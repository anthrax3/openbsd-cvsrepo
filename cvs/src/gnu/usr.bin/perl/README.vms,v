head	1.20;
access;
symbols
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	PERL_5_20_2:1.1.1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	PERL_5_20_1:1.1.1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	PERL_5_18_2:1.1.1.15
	PERL:1.1.1
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	PERL_5_16_3:1.1.1.14
	OPENBSD_5_3:1.14.0.10
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.8
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	PERL_5_12_2:1.1.1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.20
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	cxJ08BvJA9Pt2PTM;

1.19
date	2016.07.03.01.07.47;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	GzHqjSTnBjdF7Wcw;

1.18
date	2015.04.25.19.14.37;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	XRK22kO4se3v2i2I;

1.17
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	QP75iYx42Uo7mMxO;

1.16
date	2014.03.24.15.05.13;	author afresh1;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.25.20.40.43;	author sthen;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.24.15.06.39;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.12.18.24.20;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.29.17.35.56;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.28.19.22.56;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.15.21.30.18;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.09.18.08.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.32.59;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.19;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.34.45;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.03.40;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.50.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.48.14;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.11.36;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.11.36;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.36.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.08.32;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.21.54;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.36;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.12.55;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.45.37;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.16.34;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.47.40;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.03;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.35;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2010.09.24.14.48.27;	author millert;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2013.03.25.20.06.37;	author sthen;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.03.24.14.58.47;	author afresh1;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2014.11.17.20.52.39;	author afresh1;	state Exp;
branches;
next	1.1.1.17;
commitid	B31cAbBIXiCqnL97;

1.1.1.17
date	2015.04.25.19.10.12;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.20
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@If you read this file _as_is_, just ignore the equal signs on the left.
This file is written in the POD format (see [.POD]PERLPOD.POD;1) which is
specially designed to be readable as is.

=head1 NAME

perlvms - Configuring, building, testing, and installing perl on VMS

=head1 SYNOPSIS

To configure, build, test, and install perl on VMS:

    @@configure
    mmk
    mmk test
    mmk install

=head1 DESCRIPTION

=head2 Important safety tip

For best results, make sure you read the "Configuring the Perl Build",
"Building  Perl", and "Installing Perl" sections of this document before
you build or install.  Also please note other changes in the current
release by having a look at L<perldelta/VMS>.

=head2 Introduction to Perl on VMS

The VMS port of Perl is as functionally complete as any other Perl port
(and as complete as the ports on some Unix systems). The Perl binaries
provide all the Perl system calls that are either available under VMS or
reasonably emulated. There are some incompatibilities in process handling
(e.g. the fork/exec model for creating subprocesses doesn't do what you
might expect under Unix), mainly because VMS and Unix handle processes and
sub-processes very differently.

There are still some unimplemented system functions, and of course we
could use modules implementing useful VMS system services, so if you'd like
to lend a hand we'd love to have you.  Join the Perl Porting Team Now!

=head2 Other required software for Compiling Perl on VMS

In addition to VMS and DCL you will need three things:

=over 4

=item 1  A C compiler. 

HP (formerly Compaq, more formerly DEC) C for VMS (VAX, Alpha, or Itanium).
Various ancient versions of DEC C had some caveats, so if you're using a 
version older than 7.x on Alpha or Itanium or 6.x on VAX, you may need to 
upgrade to get a successful build.

There have been no recent reports of builds using Gnu C, but latent
(and most likely outdated) support for it is still present in various
parts of the sources.

There is rudimentary but not quite complete support for HP C++; to try it out,
configure with C<-"Dusecxx" -"Duser_c_flags=/WARN=INFORMATIONAL=NOCTOBUTCONREFM">.

=item 2  A make tool. 

You will need the free MMS analog MMK (available from
L<http://ftp.endlesssoftware.com.au/mmk/kits/> or 
L<https://github.com/endlesssoftware/mmk>). HP's MMS has not been known to work for
some time as Perl's automatically-generated description files are too complex for it,
but MMS support may return in the future.  Gnu Make might work, but it's been so long
since anyone's tested it that we're not sure.

=item 3  ODS-5 and Extended Parse

All development and testing of Perl on VMS takes place on ODS-5 volumes with
extended parse enabled in the environment via the command C<SET PROCESS/PARSE=EXTENDED>.
Latent support for ODS-2 volumes (including on VAX) is still present, but the number
of components that require ODS-5 features is steadily growing and ODS-2 support may be
completely removed in a future release.


=back

=head2 Additional software that is optional for Perl on VMS

You may also want to have on hand:

=over 4

=item 1  gunzip/gzip for VMS 

A de-compressor for *.gz and *.tgz files available from a number 
of web/ftp sites such as:

    L<http://www.antinode.info/dec/sw/gzip.html>
    L<http://vms.process.com/scripts/fileserv/fileserv.com?GZIP>

=item 2  VMS tar 

For reading and writing Unix tape archives (*.tar files).  Vmstar is also 
available from a number of sites such as:

    L<http://www.antinode.info/dec/sw/vmstar.html>
    L<http://vms.process.com/scripts/fileserv/fileserv.com?VMSTAR>

A port of GNU tar is also available as part of the GNV package:

    L<http://h71000.www7.hp.com/opensource/gnv.html>

=item 3  unzip for VMS

A combination decompressor and archive reader/writer for *.zip files.  
Unzip is available from a number of web/ftp sites.

    L<http://www.info-zip.org/UnZip.html>
    L<http://www.hp.com/go/openvms/freeware/>
    L<http://vms.process.com/fileserv-software.html>

=item 5 GNU patch and diffutils for VMS

Patches to Perl are usually distributed as GNU unified or contextual diffs. 
Such patches are created by the GNU diff program (part of the diffutils
distribution) and applied with GNU patch.  VMS ports of these utilities are
available here:

    L<http://www.antinode.info/dec/sw/diffutils.html>
    L<http://vms.pdv-systeme.de/users/martinv/gnupatch.zip>

=back

Please note that unzip and gunzip are not the same thing (they work with
different formats).  Many of the useful files from CPAN (the Comprehensive
Perl Archive Network) are in *.tar.gz or *.tgz format (this includes copies 
of the source code for perl as well as modules and scripts that you may 
wish to add later) hence you probably want to have GUNZIP.EXE and 
VMSTAR.EXE on your VMS machine.

If you want to include socket support, you'll need a TCP/IP stack and either
DEC C, or socket libraries.  See the "Socket Support (optional)" topic 
for more details.

=head1 Unpacking the Perl source code

You may need to set up a foreign symbol for the unpacking utility of
choice.  Once you have done so, use a command like the following to
unpack the archive:

    vmstar -xvf perl-5^.24^.1.tar

Then set default to the top-level source directory like so:

    set default [.perl-5^.24^.1]

and proceed with configuration as described in the next section.


=head1 Configuring the Perl build

To configure perl (a necessary first step), issue the command

   @@configure.com

from the top of an unpacked perl source directory.  You will be asked a 
series of questions, and the answers to them (along with the capabilities 
of your C compiler and network stack) will determine how perl is custom-
built for your machine.

If you have any symbols or logical names in your environment that may 
interfere with the build or regression testing of perl then F<configure.com> 
will try to warn you about them.  If a logical name is causing
you trouble but is in an LNM table that you do not have write access to
then try defining your own to a harmless equivalence string in a table 
such that it is resolved before the other (e.g. if TMP is defined in the
SYSTEM table then try DEFINE TMP "NL:" or somesuch in your process table) 
otherwise simply deassign the dangerous logical names.  The potentially 
troublesome logicals and symbols include:

    COMP    "LOGICAL"
    EXT     "LOGICAL"
    FOO     "LOGICAL"
    LIB     "LOGICAL"
    LIST    "LOGICAL"
    MIME    "LOGICAL"
    POSIX   "LOGICAL"
    SYS     "LOGICAL"
    T       "LOGICAL"
    THREAD  "LOGICAL"
    THREADS "LOGICAL"
    TIME    "LOGICAL"
    TMP     "LOGICAL"
    UNICODE "LOGICAL"
    UTIL    "LOGICAL"
    TEST    "SYMBOL"

As a handy shortcut, the command:

    @@configure "-des"

(note the quotation marks and case) will choose reasonable defaults 
automatically.  Some options can be given explicitly on the command line;
the following example specifies a non-default location for where Perl
will be installed:

    @@configure "-d" "-Dprefix=dka100:[utils.perl5.]"

Note that the installation location would be by default where you unpacked 
the source with a "_ROOT." appended.  For example if you unpacked the perl 
source into:

   F<DKA200:[PERL-5^.18^.0...]>

Then the F<PERL_SETUP.COM> that gets written out by F<configure.com> will
try to DEFINE your installation PERL_ROOT to be:

   F<DKA200:[PERL-5^.18^.0_ROOT.]>

More help with configure.com is available from:

    @@configure "-h"

If you find yourself reconfiguring and rebuilding  then be sure to also follow
the advice in the "Cleaning up and starting  fresh (optional)" and the checklist
of items in the "CAVEATS" sections below.

=head2 Changing compile-time options (optional) for Perl on VMS

Most of the user-definable features of Perl are enabled or disabled in
configure.com, which processes the hints file config_h.SH.  There is
code in there to Do The Right Thing, but that  may end up being the
wrong thing for you.  Make sure you understand what you are doing since
inappropriate changes to configure.com or config_h.SH can render perl 
unbuildable; odds are that there's nothing in there you'll need to
change. Note also that non-default options are tested less than default
options, so you may end up being more of a pioneer than you intend to be.

=head2 Socket Support (optional) for Perl on VMS

Perl includes a number of functions for IP sockets, which are available if
you choose to compile Perl with socket support.  It does this via the socket
routines built into the CRTL regarless of which TCP/IP stack your system
has.

=head1 Building Perl

The configuration script will print out, at the very end, the MMS or MMK
command you need to compile perl.  Issue it (exactly as printed) to start
the build.  

Once you issue your MMS or MMK command, sit back and wait.  Perl should 
compile and link without a problem.  If a problem does occur check the 
"CAVEATS" section of this document.  If that does not help send some 
mail to the VMSPERL mailing list.  Instructions are in the L<"Mailing Lists"> 
section of this document.

=head1 Testing Perl

Once Perl has built cleanly you need to test it to make sure things work.
This step is very important since there are always things that can go wrong
somehow and yield a dysfunctional Perl for you.

Testing is very easy, though, as there's a full test suite in the perl
distribution.  To run the tests, enter the I<exact> MMS line you used to
compile Perl and add the word "test" to the end, like this:

If the compile command was:

    MMK

then the test command ought to be:

    MMK test

MMK (or MMS) will run all the tests.  This may take some time, as there are 
a lot of tests.  If any tests fail, there will be a note made on-screen. 
At the end of all the tests, a summary of the tests, the number passed and 
failed, and the time taken will be displayed.

The test driver invoked via MMK TEST has a DCL wrapper ([.VMS]TEST.COM) that
downgrades privileges to NETMBX, TMPMBX for the duration of the test run,
and then restores them to their prior state upon completion of testing. 
This is done to ensure that the tests run in a private sandbox and can do no
harm to your system even in the unlikely event something goes badly wrong in
one of the test scripts while running the tests from a privileged account. 
A side effect of this safety precaution is that the account used to run the
test suite must be the owner of the directory tree in which Perl has been
built; otherwise the manipulations of temporary files and directories
attempted by some of the tests will fail.

If any tests fail, it means something is wrong with Perl, or at least
with the particular module or feature that reported failure. If the test suite
hangs (some tests can take upwards of two or three minutes, or more if
you're on an especially slow machine, depending on your machine speed, so
don't be hasty), then the test I<after> the last one displayed failed. Don't
install Perl unless you're confident that you're OK. Regardless of how
confident you are, make a bug report to the VMSPerl mailing list.

If one or more tests fail, you can get more information on the failure by 
issuing this command sequence:

    @@[.vms]test .typ "" "-v" [.subdir]test.t

where ".typ" is the file type of the Perl images you just built (if you
didn't do anything special, use .EXE), and "[.subdir]test.t" is the test
that failed. For example, with a normal Perl build, if the test indicated
that t/op/time failed, then you'd do this:

    @@ .vms]test .EXE "" "-v" [.OP]TIME.t

Note that test names are reported in UNIX syntax and relative to the
top-level build directory.  When supplying them individually to the test
driver, you can use either UNIX or VMS syntax, but you must give the path
relative to the [.t] directory and you must also add the .t extension to the
filename.  So, for example if the test lib/Math/Trig fails, you would run:

    @@[.vms]test .EXE "" -"v" [-.lib.math]trig.t

When you send in a bug report for failed tests, please include the output
from this command, which is run from the main source directory:

    MCR []MINIPERL "-Ilib" "-V"

Note that -"V" really is a capital V in double quotes. This will dump out a
couple of screens worth of configuration information, and can help us 
diagnose the problem.  If (and only if) that did not work then try enclosing 
the output of:

    MMK printconfig

If (and only if) that did not work then try enclosing the output of:

    @@[.vms]myconfig

You may also be asked to provide your C compiler version ("CC/VERSION NL:" 
with DEC C, "gcc --version" with GNU CC).  To obtain the version of MMS or 
MMK you are running try "MMS/ident" or "MMK /ident".  The GNU make version 
can be identified with "make --version".

=head2 Cleaning up and starting fresh (optional) installing Perl on VMS

If you need to recompile from scratch, you have to make sure you clean up
first.  There is a procedure to do it--enter the I<exact> MMK line you used 
to compile and add "realclean" at the end, like this:

if the compile command was:

    MMK

then the cleanup command ought to be:

    MMK realclean

If you do not do this things may behave erratically during the subsequent 
rebuild attempt.  They might not, too, so it is best to be sure and do it.

=head1 Installing Perl

There are several steps you need to take to get Perl installed and
running.

=over 4

=item 1

Check your default file protections with

     SHOW PROTECTION /DEFAULT

and adjust if necessary with C<SET PROTECTION=(code)/DEFAULT>.

=item 2

Decide where you want Perl to be installed (unless you have already done so
by using the "prefix" configuration parameter -- see the example in the
"Configuring the Perl build" section).

The DCL script PERL_SETUP.COM that is written by configure.com will help you
with the definition of the PERL_ROOT and PERLSHR logical names and the PERL
foreign command  symbol.  Take a look at PERL_SETUP.COM and modify it if you
want to.  The installation process will execute PERL_SETUP.COM and copy
files to the directory tree pointed to by the PERL_ROOT logical name defined
there, so make sure that you have write access to the parent directory of
what will become the root of your Perl installation.

=item 3

Run the install script via:

    MMK install

If for some reason it complains about target INSTALL being up to date,
throw a /FORCE switch on the MMS or MMK command.

=back

Installation will copy F<PERL_SETUP.COM> to the root of your installation
tree.  If you want to give everyone on the system  access to Perl (and you
have, for example, installed to F<dsa0:[utils.perl_root]>) then add a line
that reads:

    $ @@dsa0:[utils.perl_root]perl_setup

to F<SYS$MANAGER:SYLOGIN.COM>.  Or for your own use only, simply place
that line in F<SYS$LOGIN:LOGIN.COM>.

Two alternatives to the foreign symbol would be to install PERL into 
DCLTABLES.EXE (Check out the section "Installing Perl into DCLTABLES 
(optional)" for more information), or put the image in a 
directory that's in your DCL$PATH.

See also the "INSTALLing images (optional)" section.

=head2 Installing Perl into DCLTABLES (optional) on VMS

Execute the following command file to define PERL as a DCL command.
You'll need CMKRNL privilege to install the new dcltables.exe.

    $ create perl.cld
    !
    ! modify to reflect location of your perl.exe
    !
    define verb perl
      image perl_root:[000000]perl.exe
      cliflags (foreign)
    $!
    $ set command perl /table=sys$common:[syslib]dcltables.exe -
     /output=sys$common:[syslib]dcltables.exe
    $ install replace sys$common:[syslib]dcltables.exe
    $ exit

=head2 INSTALLing Perl images (optional) on VMS

On systems that are using perl quite a bit, and particularly those with 
minimal RAM, you can boost the performance of perl by INSTALLing it as
a known image.  PERLSHR.EXE is typically larger than 3000 blocks
and that is a reasonably large amount of IO to load each time perl is 
invoked. 

   INSTALL ADD PERLSHR/SHARE
   INSTALL ADD PERL/HEADER

should be enough for F<PERLSHR.EXE> (/share implies /header and /open), 
while /HEADER should do for FPERL.EXE> (perl.exe is not a shared image).

If your code 'use's modules, check to see if there is a shareable image for
them, too.  In the base perl build, POSIX, IO, Fcntl, Opcode, SDBM_File,
DCLsym, and Stdio, and other extensions all have shared images that can be
installed /SHARE.

How much of a win depends on your memory situation, but if you are firing
off perl with any regularity (like more than once every 20 seconds or so)
it is probably beneficial to INSTALL at least portions of perl.

While there is code in perl to remove privileges as it runs you are advised
to NOT INSTALL F<PERL.EXE> with PRIVs!

=head2 Running h2ph to create perl header files (optional) on VMS

If using HP C, ensure that you have extracted loose versions of your 
compiler's header or *.H files.  Be sure to check the contents of:

    SYS$LIBRARY:DECC$RTLDEF.TLB
    SYS$LIBRARY:SYS$LIB_C.TLB
    SYS$LIBRARY:SYS$STARLET_C.TLB

etcetera.

If using GNU cc then also check your GNU_CC:[000000...] tree for the locations
of the GNU cc headers.

=head1 Reporting Bugs

If you come across what you think might be a bug in Perl, please report
it. There's a script in PERL_ROOT:[UTILS], perlbug, that walks you through
the process of creating a bug report. This script includes details of your
installation, and is very handy. Completed bug reports should go to
perlbug@@perl.com.

=head1 CAVEATS

Probably the single biggest gotcha in compiling Perl is giving the wrong
switches to MMS/MMK when you build. Use I<exactly> what the configure.com 
script prints!

Be sure that the process that you use to build perl has a PGFLQ greater
than 100000.  Be sure to have a correct local time zone to UTC offset
defined (in seconds) in the logical name SYS$TIMEZONE_DIFFERENTIAL before
running the regression test suite.  The SYS$MANAGER:UTC$CONFIGURE_TDF.COM 
procedure will help you set that logical for your system but may require 
system privileges.  For example, a location 5 hours west of UTC (such as 
the US East coast while not on daylight savings time) would have:

    DEFINE SYS$TIMEZONE_DIFFERENTIAL "-18000"

A final thing that causes trouble is leftover pieces from a failed
build.  If things go wrong make sure you do a "(MMK|MMS|make) realclean"
before you rebuild.

=head2 GNU issues with Perl on VMS

It has been a while since the GNU utilities such as GCC or GNU make
were used to build perl on VMS.  Hence they may require a great deal
of source code modification to work again.

=head2 Floating Point Considerations

Prior to 5.8.0, Perl simply accepted the default floating point options of the
C compiler, namely representing doubles with D_FLOAT on VAX and G_FLOAT on
Alpha.  Single precision floating point values are represented in F_FLOAT
format when either D_FLOAT or G_FLOAT is in use for doubles.  Beginning with
5.8.0, Alpha builds now use IEEE floating point formats by default, which in
VMS parlance are S_FLOAT for singles and T_FLOAT for doubles.  IEEE is not
available on VAX, so F_FLOAT and D_FLOAT remain the defaults for singles and
doubles respectively.  Itanium builds have always used IEEE by default. The 
available non-default options are G_FLOAT on VAX and D_FLOAT or G_FLOAT on 
Alpha or Itanium.

The use of IEEE on Alpha or Itanium introduces NaN, infinity, and denormalization
capabilities not available with D_FLOAT and G_FLOAT.  When using one of those
non-IEEE formats, silent underflow and overflow are emulated in the conversion
of strings to numbers, but it is preferable to get the real thing by using
IEEE where possible.

Regardless of what floating point format you consider preferable, be aware
that the choice may have an impact on compatibility with external libraries,
such as database interfaces, and with existing data, such as data created with
the C<pack> function and written to disk, or data stored via the Storable
extension.  For example, a C<pack("d", $foo)")> will create a D_FLOAT,
G_FLOAT, or T_FLOAT depending on what your Perl was configured with.  When
written to disk, the value can only be retrieved later by a Perl configured
with the same floating point option that was in effect when it was created.

To obtain a non-IEEE build on Alpha or Itanium, simply answer no to the
"Use IEEE math?" question during the configuration.  To obtain an option
different from the C compiler default on any platform, put in the option that
you want in answer to the "Any additional cc flags?" question.  For example, to
obtain a G_FLOAT build on VAX, put in C</FLOAT=G_FLOAT>.

=head1 Mailing Lists

There are several mailing lists available to the Perl porter.  For VMS
specific issues (including both Perl questions and installation problems)
there is the VMSPERL mailing list.  It is usually a low-volume (10-12
messages a week) mailing list.

To subscribe, send a mail message to VMSPERL-SUBSCRIBE@@PERL.ORG. The VMSPERL
mailing list address is VMSPERL@@PERL.ORG.  Any mail sent there gets echoed
to all subscribers of the list.  There is a searchable archive of the list
on the web at:

    L<http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/>

To unsubscribe from VMSPERL send a message to VMSPERL-UNSUBSCRIBE@@PERL.ORG.
Be sure to do so from the subscribed account that you are canceling.

=head2 Web sites for Perl on VMS

Vmsperl pages on the web include:

    L<http://www.sidhe.org/vmsperl/index.html>
    L<http://www.cpan.org/modules/by-module/VMS/>
    L<http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/>
    L<http://archive.develooper.com/vmsperl@@perl.org/>
    L<http://h71000.www7.hp.com/openvms/products/ips/apache/csws_modperl.html>

=head1 SEE ALSO

Perl information for users and programmers about the port of perl to VMS is
available from the [.POD]PERLVMS.POD file that gets installed as L<perlvms>.
For administrators the perlvms document also includes a detailed discussion 
of extending vmsperl with CPAN modules after Perl has been installed.

=head1 AUTHORS

Originally by Charles Bailey bailey@@newman.upenn.edu.  See the git repository
for history.

=head1 ACKNOWLEDGEMENTS

A real big thanks needs to go to Charles Bailey
bailey@@newman.upenn.edu, who is ultimately responsible for Perl 5.004
running on VMS. Without him, nothing the rest of us have done would be at
all important.

There are, of course, far too many people involved in the porting and testing
of Perl to mention everyone who deserves it, so please forgive us if we've
missed someone.  That said, special thanks are due to the following:

  Tim Adye T.J.Adye@@rl.ac.uk
     for the VMS emulations of getpw*()
  David Denholm denholm@@conmat.phys.soton.ac.uk
     for extensive testing and provision of pipe and SocketShr code,
  Mark Pizzolato mark@@infocomm.com
     for the getredirection() code
  Rich Salz rsalz@@bbn.com
     for readdir() and related routines
  Peter Prymmer pvhp@@best.com 
     for extensive testing, as well as development work on
     configuration and documentation for VMS Perl,
  Dan Sugalski dan@@sidhe.org
     for extensive contributions to recent version support,
     development of VMS-specific extensions, and dissemination
     of information about VMS Perl,
  the Stanford Synchrotron Radiation Laboratory and the
     Laboratory of Nuclear Studies at Cornell University for
     the opportunity to test and develop for the AXP,
  John Hasstedt John.Hasstedt@@sunysb.edu
     for VAX VMS V7.2 support
  John Malmberg wb8tyw@@qsl.net
     for ODS-5 filename handling and other modernizations

and to the entire VMSperl group for useful advice and suggestions.  In
addition the perl5-porters deserve credit for their creativity and
willingness to work with the VMS newcomers.  Finally, the greatest debt of
gratitude is due to Larry Wall larry@@wall.org, for having the ideas which
have made our sleepless nights possible.

Thanks,
The VMSperl group

=cut

@


1.19
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d145 1
a145 1
    vmstar -xvf perl-5^.20^.3.tar
d149 1
a149 1
    set default [.perl-5^.20^.3]
@


1.18
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d145 1
a145 1
    vmstar -xvf perl-5^.20^.2.tar
d149 1
a149 1
    set default [.perl-5^.20^.2]
@


1.17
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d145 1
a145 1
    vmstar -xvf perl-5^.20^.1.tar
d149 1
a149 1
    set default [.perl-5^.20^.1]
@


1.16
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d145 1
a145 1
    vmstar -xvf perl-5^.18^.2.tar
d149 1
a149 1
    set default [.perl-5^.18^.2]
@


1.15
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d13 4
a16 6
    @@ Configure
    mms
    mms test
    mms install

mmk may be used in place of mms in the last three steps.
a26 16
Also note that, as of Perl version 5.005 and later, an ANSI C compliant 
compiler is required to build Perl.  VAX C is I<not> ANSI compliant, as it 
died a natural death some time before the standard was set.  Therefore 
VAX C will not compile Perl 5.005 or later.  We are sorry about that.

There have been no recent reports of builds using Gnu C, but latent
(and most likely outdated) support for it is still present in various
parts of the sources.  Currently the HP (formerly Compaq, and even 
more formerly DEC) C compiler is the only viable alternative for
building Perl.

There is minimal support for HP C++ but this support is not complete;
if you get it working please write to the vmsperl list (for info see
L</"Mailing Lists">).


d43 1
a43 1
In addition to VMS and DCL you will need two things:
d54 7
d63 15
a77 4
HP's MMS may work, but MadGoat's free MMS analog MMK (available from
http://www.kednos.com/kednos/Resources/MMK) has consistently worked
better. Gnu Make might work, but it's been so long since anyone's tested
it that we're not sure.  MMK is free though, so go ahead and use that.
d87 1
a87 1
=item 1  GUNZIP/GZIP for VMS 
d90 1
a90 4
of web/ftp sites and is distributed on the OpenVMS Freeware CD-ROM 
from HP.

    http://www.hp.com/go/openvms/freeware/
d92 2
a93 1
=item 2  VMS TAR 
d95 1
a95 3
For reading and writing unix tape archives (*.tar files).  Vmstar is also 
available from a number of web/ftp sites and is distributed on the OpenVMS
Freeware CD-ROM from HP.
d97 2
a98 1
    http://www.hp.com/go/openvms/freeware/
d100 2
a101 2
Recent versions of VMS tar on ODS-5 volumes may extract tape archive
files with ^. escaped periods in them.  See below for further workarounds.
d105 1
a105 1
    http://h71000.www7.hp.com/opensource/gnv.html
d107 1
a107 1
=item 3  UNZIP for VMS
d112 3
a114 3
    http://www.info-zip.org/UnZip.html
    http://www.hp.com/go/openvms/freeware/
    ftp://ftp.process.com/vms-freeware/fileserv/
d116 1
a116 1
=item 5 GNU PATCH and DIFFUTILS for VMS
d123 2
a124 2
    http://www.antinode.info/dec/sw/diffutils.html
    http://www.hp.com/go/openvms/freeware/
d128 1
a128 1
Please note that UNZIP and GUNZIP are not the same thing (they work with
d141 11
a151 1
You may need to set up a foreign symbol for the unpacking utility of choice.
a152 25
As of version 5.10.0, Perl will still build and run on ODS-2 volumes,
including on VAX, but there are a number of modules whose temporary
files and tests are much happier residing on ODS-5 volumes.  For
example, CPANPLUS will fail most of its tests on an ODS-2 volume because
it includes files with multiple dots that will have been converted to
underscores and the tests will have difficulty finding them.  So your
best bet is to unpack the Perl source kit on an ODS-5 volume using
recent versions of vmstar (e.g. V3.4 or later).  Contrary to advice
provided with previous versions of Perl, do I<not> use the ODS-2
compatibility qualifier.  Instead, use a command like the following:

    vmstar -xvf perl-5^.16^.3.tar

Then rename the top-level source directory like so:

    set security/protection=(o:rwed) perl-5^.16^.3.dir
    rename perl-5^.16^.3.dir perl-5_16_3.dir

The reason for this last step is that while filenames with multiple dots
are generally supported by Perl on VMS, I<directory> names with multiple
dots are a special case with special problems because the dot is the
traditional directory delimiter on VMS.  Rudimentary support for
multi-dot directory names is available, but some of the oldest and most
essential parts of Perl (such as searching for and loading library
modules) do not yet fully support the ODS-5 caret-escape syntax.
d158 1
a158 1
   @@ Configure
d162 1
a162 1
of your C compiler and network stack) will determine how perl is custom 
d166 1
a166 1
interfere with the build or regression testing of perl then configure.com 
d173 1
a173 1
troublesome logicals and symbols are:
d194 1
a194 1
    @@ Configure "-des"
d201 1
a201 1
    @@ Configure "-d" "-Dprefix=dka100:[utils.perl5.]"
d207 1
a207 1
   DKA200:[PERL-5_10_2...]
d209 1
a209 1
Then the PERL_SETUP.COM that gets written out by CONFIGURE.COM will
d212 1
a212 1
   DKA200:[PERL-5_10_2_ROOT.]
d216 1
a216 1
    @@ Configure "-h"
d218 3
a220 6
See the "Changing compile-time options (optional)" section below to learn
even more details about how to influence the outcome of the important 
configuration step.  If you find yourself reconfiguring and rebuilding 
then be sure to also follow the advice in the "Cleaning up and starting 
fresh (optional)" and the checklist of items in the "CAVEATS" sections 
below.
d224 1
a224 1
Most of the user definable features of Perl are enabled or disabled in
d230 2
a231 1
change.
d249 1
a249 1
mail to the VMSPERL mailing list.  Instructions are in the "Mailing Lists" 
d264 1
a264 1
    MMS
d268 1
a268 1
    MMS test
d270 1
a270 1
MMS (or MMK) will run all the tests.  This may take some time, as there are 
d275 1
a275 1
The test driver invoked via MMS TEST has a DCL wrapper ([.VMS]TEST.COM) that
d297 1
a297 1
    @@ [.VMS]TEST .typ "" "-v" [.subdir]test.T
d300 1
a300 1
didn't do anything special, use .EXE), and "[.subdir]test.T" is the test
d304 1
a304 1
    @@ [.VMS]TEST .EXE "" "-v" [.OP]TIME.T
d309 1
a309 1
relative to the [.T] directory and you must also add the .T extension to the
d312 1
a312 1
    @@ [.VMS]TEST .EXE "" -"v" [-.lib.math]trig.t
d317 1
a317 1
    MCR []MINIPERL "-V"
d324 1
a324 1
    MMS printconfig
d328 1
a328 1
    @@ [.vms]myconfig
d338 1
a338 1
first.  There is a procedure to do it--enter the I<exact> MMS line you used 
d343 1
a343 1
    MMS
d347 1
a347 1
    MMS realclean
d365 1
a365 1
and adjust if necessary with SET PROTECTION=(code)/DEFAULT.
d373 1
a373 1
The DCL script PERL_SETUP.COM that is written by CONFIGURE.COM will help you
a384 4
    MMS install

or

d392 4
a395 3
Copy PERL_SETUP.COM to a place accessible to your perl users.  

For example:
d397 1
a397 1
    COPY PERL_SETUP.COM SYS$LIBRARY: 
d399 2
a400 6
If you want to have everyone on the system have access to perl
then add a line that reads

    $ @@sys$library:perl_setup

to SYS$MANAGER:SYLOGIN.COM.
d405 1
a405 6
directory that's in your DCL$PATH (if you're using VMS V6.2 or higher).

An alternative to having PERL_SETUP.COM define the PERLSHR logical name
is to simply copy it into the system shareable library directory with:

    copy perl_root:[000000]perlshr.exe sys$share:
d438 2
a439 2
should be enough for PERLSHR.EXE (/share implies /header and /open), 
while /HEADER should do for PERL.EXE (perl.exe is not a shared image).
d451 1
a451 1
to NOT INSTALL PERL.EXE with PRIVs!
a480 20
The next big gotcha is directory depth.  Perl can create directories four,
five, or even six levels deep during the build, so you don't have to be 
too deep to start to hit the RMS 8 level limit (for ODS 2 volumes which were
common on versions of VMS prior to V7.2 and even with V7.3 on the VAX).  
It is best to do:

    DEFINE/TRANS=(CONC,TERM) PERLSRC "disk:[dir.dir.dir.perldir.]"
    SET DEFAULT PERLSRC:[000000]

before building in cases where you have to unpack the distribution so deep
(note the trailing period in the definition of PERLSRC).  Perl modules 
from CPAN can be just as bad (or worse), so watch out for them, too. Perl's
configuration script will warn if it thinks you are too deep (at least on 
a VAX or on Alpha versions of VMS prior to 7.2).  But MakeMaker will not 
warn you if you start out building a module too deep in a directory.

As noted above ODS-5 escape sequences such as ^. can break the perl
build.  Solutions include renaming files and directories as needed 
when unpacking perl or CPAN modules on ODS-5 volumes.

a500 2
    http://www.progis.de/

d529 5
a533 5
To obtain a non-IEEE build on Alpha, simply answer no to the "Use IEEE math?"
question during the configuration.  To obtain an option different from the C
compiler default on either VAX or Alpha, put in the option that you want in
answer to the "Any additional cc flags?" question.  For example, to obtain a
G_FLOAT build on VAX, put in C</FLOAT=G_FLOAT>.
d547 1
a547 1
    http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/
d556 5
a560 6
    http://www.sidhe.org/vmsperl/index.html
    http://www.cpan.org/modules/by-module/VMS/
    http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/
    http://www-ang.kfunigraz.ac.at/~binder/perl.html
    http://archive.develooper.com/vmsperl@@perl.org/
    http://h71000.www7.hp.com/openvms/products/ips/apache/csws_modperl.html
@


1.14
log
@merge in perl 5.12.2 plus local changes
@
text
@d7 1
a7 1
README.vms - Configuring, building, testing, and installing perl on VMS
d155 1
a155 1
compatability qualifier.  Instead, use a command like the following:
d157 1
a157 1
    vmstar -xvf perl-5^.12^.2.tar
d161 2
a162 2
    set security/protection=(o:rwed) perl-5^.12^.2.dir
    rename perl-5^.12^.2.dir perl-5_12_2.dir
d215 3
a217 4
automatically (it takes DEC C over Gnu C, DEC C sockets over SOCKETSHR 
sockets, and either over no sockets).  Some options can be given
explicitly on the command line; the following example specifies a 
non-default location for where Perl will be installed:
d256 3
a258 34
you choose to compile Perl with socket support.  Since IP networking is an 
optional addition to VMS, there are several different IP stacks available.  
How well integrated they are into the system depends on the stack, your 
version of VMS, and the version of your C compiler.

The default solution available is to use the socket routines built into DEC
C. Which routines are available depend on the version of VMS you're
running, and require proper UCX emulation by your TCP/IP vendor.
Relatively current versions of Multinet, TCPWare, Pathway, and UCX all
provide the required libraries--check your manuals or release notes to see
if your version is new enough.

The other solution uses the SOCKETSHR library. Before VAX/VMS 5.5-2 it was
the most portable solution.  The SOCKETSHR library has not been maintained
since VAX/VMS 5.5-2, and it is not known if will even compile with the ANSI
C that Perl currently requires.  It remains an option for historical reasons,
just in case someone might find it useful.

In combination with either UCX or NetLib, this supported all the major TCP
stacks (Multinet, Pathways, TCPWare, UCX, and CMU) on all versions of VMS
Perl ran on up to VAX/VMS 6.2 and Alpha VMS 1.5 with all the compilers on
both VAX and Alpha. The portion of the socket interface was also consistent
across versions of VMS and C compilers.

It has a problem with UDP sockets when used with Multinet, though, so you
should be aware of that.

As of VAX/VMS 5.5-2 and later, CMU is the only TCP/IP program that requires
socketshr, and the sources have been lost to the most recent CMU bug fixes,
so CMU is limited to OpenVMS/VAX 6.2 or earlier, which is the last release
that binaries for the last released patches are known to exist.

There is currently no official web site for downloading either CMU or
SOCKETSHR; however, copies may be found in the DECUS archives.
@


1.13
log
@Merge in perl 5.10.1
@
text
@d30 1
a30 1
compiler is required to build Perl.  VAX C is *not* ANSI compliant, as it 
a58 4
There are issues with various versions of DEC C, so if you're not running a
relatively modern version, check the "DEC C issues" section later on in this
document.

d68 3
d87 1
a87 1
=item 1  GUNZIP/GZIP.EXE for VMS 
a93 1
    http://www.crinoid.com/utils/
d110 1
a110 1
=item 3  UNZIP.EXE for VMS
d117 1
a117 12
    ftp://ftp.hp.com/pub/openvms
    ftp://ftp.process.com/vms-freeware/fileserv

=item 4  MOST

Most is an optional pager that is convenient to use with perldoc (unlike 
TYPE/PAGE, MOST can go forward and backwards in a document and supports 
regular expression searching).  Most builds with the slang 
library on VMS.  Most and slang are available from:

    ftp://space.mit.edu/pub/davis/
    ftp://ftp.process.com/vms-freeware/narnia/
d157 1
a157 5
    vmstar /extract/verbose perl-V^.VIII^.III.tar

or:

    vmstar -xvf perl-5^.10^.1.tar
d161 2
a162 2
    set security/protection=(o:rwed) perl-5^.10^.1.dir
    rename perl-5^.10^.1.dir perl-5_10_1.dir
a182 4
If you have multiple C compilers installed, you'll have your choice of
which one to use.  Various older versions of DEC C had some caveats, so if
you're using a version older than 5.2, check the "DEC C Issues" section.

d311 1
a311 1
distribution.  To run the tests, enter the *exact* MMS line you used to
d342 1
a342 1
don't be hasty), then the test *after* the last one displayed failed. Don't
d390 1
a390 1
first.  There is a procedure to do it--enter the *exact* MMS line you used 
d542 1
a542 1
switches to MMS/MMK when you build. Use *exactly* what the configure.com 
d562 2
a563 4
build.  Solutions include renaming files and directories as needed or
being careful to use the -o switch or /ODS2 qualifier with latter
versions of the vmstar utility when unpacking perl or CPAN modules
on ODS-5 volumes.
a578 37
=head2 DEC C issues with Perl on VMS

Note to DEC C users: Some early versions (pre-5.2, some pre-4. If you're DEC
C 5.x or higher, with current patches if any, you're fine) of the DECCRTL
contained a few bugs which affect Perl performance:

=over 4

=item - pipes

Newlines are lost on I/O through pipes, causing lines to run together.
This shows up as RMS RTB errors when reading from a pipe.  You can
work around this by having one process write data to a file, and
then having the other read the file, instead of the pipe.  This is
fixed in version 4 of DEC C.

=item - modf()

The modf() routine returns a non-integral value for some values above
INT_MAX; the Perl "int" operator will return a non-integral value in
these cases.  This is fixed in version 4 of DEC C.

=item - ALPACRT ECO

On the AXP, if SYSNAM privilege is enabled, the CRTL chdir() routine
changes the process default device and directory permanently, even
though the call specified that the change should not persist after
Perl exited.  This is fixed by DEC CSC patch ALPACRT04_061 or later.
See also:

    http://ftp.support.compaq.com/patches/.new/openvms.shtml

=back

Please note that in later versions "DEC C" may also be known as 
"Compaq C".

a584 1
    http://slacvx.slac.stanford.edu/HELP/GCC
a585 1
    http://www.lp.se/products/gnu.html
d596 3
a598 2
doubles respectively.  The available non-default options are G_FLOAT on VAX
and D_FLOAT or G_FLOAT on Alpha.
d600 1
a600 1
The use of IEEE on Alpha introduces NaN, infinity, and denormalization
a620 52
=head2 Multinet issues with Perl on VMS

Prior to the release of Perl 5.8.0 it was noted that the regression
test for lib/Net/hostent (in file [.lib.Net]hostent.t) will fail owing
to problems with the hostent structure returned by C calls to either
gethostbyname() or gethostbyaddr() using DEC or Compaq C with a
Multinet TCP/IP stack.  The problem was noted in Multinet 4.3A
using either Compaq C 6.5 or DEC C 6.0, and with Multinet 4.2A
using DEC C 5.2, but could easily affect other versions of Multinet.
Process Software Inc. has acknowledged a bug in the Multinet version 
of UCX$IPC_SHR and has provided an ECO for it. The ECO is called
UCX_LIBRARY_EMULATION-010_A044 and is available from:

    http://www.multinet.process.com/eco.html

As of this writing, the ECO is only available for Multinet versions 
4.3A and later.  You may determine the version of Multinet that you 
are running using the command:

    multinet show /version

from the DCL command prompt.

If the ECO is unavailable for your version of Multinet and you are 
unable to upgrade, you might try using Perl programming constructs 
such as:

    $address = substr($gethostbyname_addr,0,4);

to temporarily work around the problem, or if you are brave
and do not mind the possibility of breaking IPv6 addresses,
you might modify the pp_sys.c file to add an ad-hoc correction
like so:


    --- pp_sys.c;1        Thu May 30 14:42:17 2002
    +++ pp_sys.c        Thu May 30 12:54:02 2002
    @@@@ -4684,6 +4684,10 @@@@
             }
     #endif

    +    if (hent) {
    +        hent->h_length = 4;
    +    }
    +
         if (GIMME != G_ARRAY) {
             PUSHs(sv = sv_newmortal());
             if (hent) {

then re-compile and re-test your perl.  After the installation
of the Multinet ECO you ought to back out any such changes though.

a645 1
    http://lists.perl.org/showlist.cgi?name=vmsperl
@


1.12
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d24 4
a27 5
The build and install procedures have changed significantly from the 5.004
releases!  Make sure you read the "Configuring the Perl Build", "Building 
Perl", and "Installing Perl" sections of this document before you build or 
install.  Also please note other changes in the current release by having
a look at L<perldelta/VMS>.
d75 4
a78 5
DEC's MMS (v2.6 or later), or MadGoat's free MMS
analog MMK (available from ftp.madgoat.com/madgoat) both work
just fine. Gnu Make might work, but it's been so long since
anyone's tested it that we're not sure.  MMK is free though, so
go ahead and use that.
d110 1
a110 1
    http://gnv.sourceforge.net/
a119 1
    ftp://ftp.madgoat.com/madgoat/
d139 1
a139 1
    http://www.crinoid.com/utils/
d174 1
a174 1
    vmstar -xvf perl-5^.10^.0.tar
d178 2
a179 2
    set security/protection=(o:rwed) perl-5^.10^.0.dir
    rename perl-5^.10^.0.dir perl-5_10_0.dir
d569 1
a569 1
common on versions of VMS prior to V7.2 and even with V7.2 on the VAX).  
a755 2
    http://www.crinoid.com/
    http://duphy4.physics.drexel.edu/pub/cgi_info.htmlx
d766 1
a766 1
available from the [.VMS]PERLVMS.POD file that gets installed as L<perlvms>.
d772 2
a773 5
Revised 3-December-2007 by Craig Berry craigberry@@mac.com.  
Revised 25-February-2000 by Peter Prymmer pvhp@@best.com.  
Revised 27-October-1999 by Craig Berry craigberry@@mac.com.  
Revised 01-March-1999 by Dan Sugalski dan@@sidhe.org.  
Originally by Charles Bailey bailey@@newman.upenn.edu.
d806 2
@


1.11
log
@merge in perl 5.8.8
@
text
@d35 7
a41 3
If you are stuck without Compaq (formerly DEC) C consider trying Gnu C
instead, though there have been no recent reports of builds using Gnu C. 
There is minimal support for Compaq C++ but this support is not complete;
a59 5
The current sources and build procedures have been tested on a VAX using
DEC C, and on an AXP using DEC C. If you run into problems with
other compilers, please let us know.  (Note: DEC C was renamed to Compaq C
around version 6.2).

d72 1
a72 1
DEC (now Compaq) C or gcc for VMS (AXP or VAX).
d94 1
a94 1
from Compaq.
d96 1
a96 2
    http://www.fsf.org/order/ftp.html
    http://www.openvms.compaq.com/freeware/
d103 1
a103 1
Freeware CD-ROM from Compaq.
d105 1
a105 2
    ftp://ftp.lp.se/vms/
    http://www.openvms.compaq.com/freeware/
d110 4
d120 2
a121 2
    http://www.openvms.compaq.com/freeware/
    ftp://ftp.openvms.compaq.com/
d123 1
a123 1
    ftp://ftp.process.com/vms-freeware/
d143 1
a143 1
    http://www.openvms.compaq.com/freeware/
d162 10
a171 4
If you unpack a perl source kit with a name containing multiple periods on
an ODS-5 volume using recent versions of vmstar (e.g. V3.4 or later) you may
need to be especially careful in unpacking the tape archive file.  Try to use
the ODS-2 compatability qualifiers such as:
d173 1
a173 1
    vmstar /extract/verbose/ods2 perl-V^.VIII^.III.tar
d177 1
a177 1
    vmstar -xvof perl-5^.8^.8.tar
d179 1
a179 2
If you neglected to use the /ODS2 qualifier or the -o switch then you
could rename the source directory:
d181 2
a182 2
    set security/protection=(o:rwed) perl-5^.8^.8.dir
    rename perl-5^.8^.8.dir perl-5_8_8.dir
d184 7
a190 5
Perl on VMS as of 5.8.8 does not completely handle extended file
parse styles such as are encountered on ODS-5.  While it can be built,
installed, and run on ODS-5 filesystems; it may encounter
trouble with characters that are otherwise illegal on ODS-2
volumes (notably the ^. escaped period sequence).
a277 4
The one exception is the various *DIR install locations. Changing those
requires changes in genconfig.pl as well.  Be really careful if you need to
change these, as they can cause some fairly subtle problems.

d286 1
a286 9
The most portable solution uses the SOCKETSHR library. In combination with
either UCX or NetLib, this supports all the major TCP stacks (Multinet,
Pathways, TCPWare, UCX, and CMU) on all versions of VMS Perl runs on, with
all the compilers on both VAX and Alpha. The socket interface is also
consistent across versions of VMS and C compilers. It has a problem with
UDP sockets when used with Multinet, though, so you should be aware of
that.

The other solution available is to use the socket routines built into DEC
d293 23
d362 2
a363 1
If any tests fail, it means something is wrong with Perl. If the test suite
d543 2
a544 2
If using DEC C or Compaq C ensure that you have extracted loose versions
of your compiler's header or *.H files.  Be sure to check the contents of:
a762 1
    http://www.best.com/~pvhp/vms/
d766 1
a766 1
    http://www.openvms.compaq.com/openvms/products/ips/apache/csws_modperl.html
d777 1
a777 1
Revised 10-October-2001 by Craig Berry craigberry@@mac.com.  
@


1.10
log
@sync in-tree perl with 5.8.6
@
text
@d170 1
a170 1
    vmstar -xvof perl-5^.8^.6.tar
d175 2
a176 2
    set security/protection=(o:rwed) perl-5^.8^.6.dir
    rename perl-5^.8^.6.dir perl-5_8_6.dir
d178 1
a178 1
Perl on VMS as of 5.8.6 does not completely handle extended file
@


1.9
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d170 1
a170 1
    vmstar -xvof perl-5^.8^.5.tar
d175 2
a176 2
    set security/protection=(o:rwed) perl-5^.8^.5.dir
    rename perl-5^.8^.5.dir perl-5_8_5.dir
d178 1
a178 1
Perl on VMS as of 5.8.5 does not completely handle extended file
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d170 1
a170 1
    vmstar -xvof perl-5^.8^.3.tar
d175 2
a176 2
    set security/protection=(o:rwed) perl-5^.8^.3.dir
    rename perl-5^.8^.3.dir perl-5_8_3.dir
d178 1
a178 1
Perl on VMS as of 5.8.3 does not completely handle extended file
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d110 3
d157 27
d564 6
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d179 16
a194 6
    TMP  "LOGICAL"
    LIB  "LOGICAL"
    T    "LOGICAL"
    FOO  "LOGICAL"
    EXT  "LOGICAL"
    TEST "SYMBOL"
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d27 2
a28 1
install.
d35 5
a39 3
If you are stuck without DEC C (the VAX C license should be good for DEC C,
but the media charges might prohibit an upgrade), consider getting Gnu C
instead.
d42 1
a42 1
=head2 Introduction
d65 1
a65 1
=head2 Other required software
d85 1
a85 1
=head2 Additional software that is optional
d98 1
a98 2
    http://www.openvms.compaq.com/freeware/GZIP/
    ftp://ftp.compaq.com/pub/VMS/
d108 1
a108 2
    http://www.openvms.compaq.com/freeware/VMSTAR/
    ftp://ftp.compaq.com/pub/VMS/
d115 2
a116 3
    http://www.cdrom.com/pub/infozip/UnZip.html
    http://www.openvms.compaq.com/freeware/INFO-ZIP/
    ftp://ftp.compaq.com/pub/VMS/
d119 1
a119 1
    ftp://ftp.wku.edu/vms/
d129 1
a129 1
    ftp://ftp.wku.edu/vms/narnia/most.zip
d139 1
d198 11
d220 1
a220 1
=head2 Changing compile-time options (optional)
d223 6
a228 9
[.VMS]CONFIG.VMS. There is code in there to Do The Right Thing, but that 
may end up being the wrong thing for you.  Make sure you understand what 
you are doing since inappropriate changes to CONFIG.VMS can render perl 
unbuildable.

Odds are that there's nothing here to change, unless you're on a version of
VMS later than 6.2 and DEC C later than 5.6.  Even if you are, the correct
values will still be chosen, most likely.  Poking around here should be
unnecessary.
d234 1
a234 1
=head2 Socket Support (optional)
d292 11
d318 1
a318 1
that [.op]time failed, then you'd do this:
d322 8
d351 1
a351 1
=head2 Cleaning up and starting fresh (optional)
d437 1
a437 1
=head2 Installing Perl into DCLTABLES (optional)
d455 1
a455 1
=head2 INSTALLing images (optional)
d459 1
a459 1
a known image.  PERLSHR.EXE is typically larger than 2500 blocks
d471 2
a472 1
DCLsym, and Stdio all have shared images that can be installed /SHARE.
d481 14
d511 3
a513 2
too deep to start to hit the RMS 8 level limit (for versions of VMS prior 
to V7.2 and even with V7.2 on the VAX).  It is best to do
d539 1
a539 1
=head2 DEC C issues
d569 1
a569 1
    http://ftp.service.compaq.com/patches/.new/openvms.html
d576 1
a576 1
=head2 GNU issues
a583 1
    http://vms.gnu.org/
d586 85
d684 1
a684 1
   
d688 1
a688 1
=head2 Web sites
a696 1
    http://nucwww.chem.sunysb.edu/htbin/software_list.cgi
d698 1
a698 1
    http://bkfug.kfunigraz.ac.at/~binder/perl.html
d701 1
d712 1
a712 1
Revised 5-April-2001 by Craig Berry craigberry@@mac.com.  
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d32 1
a32 1
VAX C will not compile perl 5.005.  We are sorry about that.
d55 2
a56 1
other compilers, please let us know.
d70 1
a70 1
DEC C or gcc for VMS (AXP or VAX).
d91 2
a92 1
of web/ftp sites.
d95 3
a97 5
    ftp://ftp.uu.net/archive/systems/gnu/diffutils*.tar.gz
    ftp://gatekeeper.dec.com/pub/GNU/diffutils*.tar.gz
    ftp://ftp.gnu.org/pub/gnu/diffutils*.tar.gz 
    http://www.openvms.digital.com/cd/GZIP/
    ftp://ftp.digital.com/pub/VMS/
d102 2
a103 1
available from a number of web/ftp sites.
d106 2
a107 2
    http://www.openvms.digital.com/cd/VMSTAR/
    ftp://ftp.digital.com/pub/VMS/
d115 3
a117 3
    http://www.openvms.digital.com/cd/INFO-ZIP/
    ftp://ftp.digital.com/pub/VMS/
    ftp://ftp.openvms.digital.com/
d131 9
d144 4
a147 4
Perl Archive Network) are in *.tar.gz format (this includes copies of the
source code for perl as well as modules and scripts that you may wish to
add later) hence you probably want to have GUNZIP.EXE and VMSTAR.EXE on
your VMS machine.
d191 7
a197 2
sockets, and either over no sockets).  More help with configure.com is 
available from:
d357 11
a367 13
Create a directory somewhere and either run @@perl_setup or 
define the concealed logical PERL_ROOT to point to it by hand. 
For example, 

    CREATE/DIRECTORY dka200:[perl]
    @@PERL_SETUP
    SHOW LOGICAL PERL_ROOT

or,

    CREATE/DIRECTORY dka200:[perl]
    DEFINE/TRANS=(CONC,TERM) PERL_ROOT dka200:[perl.]

d384 2
a385 4
The DCL script PERL_SETUP.COM that is written by CONFIGURE.COM
will help you with the definition of PERL_ROOT, PERLSHR and the PERL
Foreign symbol.  Take a look at PERL_SETUP.COM and modify it if you want 
to.  Then copy PERL_SETUP.COM to a place accessible to your perl users.  
d431 1
a431 1
a known image.  PERLSHR.EXE is typically larger than 2000 blocks
d525 1
a525 1
    http://ftp.service.digital.com/patches/.new/openvms.html
d550 4
a553 6
The subscription address is MAJORDOMO@@PERL.ORG.  Send a mail message with 
just the words SUBSCRIBE VMSPERL in the body of the message.
   
The VMSPERL mailing list address is VMSPERL@@PERL.ORG.  Any mail sent there
gets echoed to all subscribers of the list.  There is a searchable archive of
the list on the web at:
d557 2
a558 3
To unsubscribe from VMSPERL send the message UNSUBSCRIBE VMSPERL to
MAJORDOMO@@PERL.ORG.  Be sure to do so from the subscribed account that 
you are canceling.
d565 1
d567 1
a568 1
    http://www.cpan.org/modules/by-module/VMS/
d572 2
d584 3
a586 2
Last revised 25-February-2000 by Peter Prymmer pvhp@@best.com.  
Revised 27-October-1999 by Craig Berry craig.berry@@metamorgs.com.  
@


1.3
log
@perl5.005_03 (stock)
@
text
@d1 3
a3 2
Last Revised 01-March-1999 by Dan Sugalski <sugalskd@@ous.edu>
Originally by Charles Bailey <bailey@@newman.upenn.edu>
d5 18
a22 1
* Important safety tip
d25 8
a32 2
releases! Make sure you read the "Building Perl" and "Installing Perl"
sections before you build or install.
d34 1
a34 6
Also note that, as of 5.005, an ANSI C compliant compiler is required to
build Perl. Vax C is *not* ANSI compliant, as it died a natural death some
time before the standard was set. Therefore Vax C will not compile perl
5.005. Sorry about that.

If you're stuck without Dec C (the Vax C license should be good for Dec C,
d38 2
a39 1
* Intro
d44 2
a45 2
reasonably emulated. There are some incompatibilites in process handling
(e.g the fork/exec model for creating subprocesses doesn't do what you
d49 1
a49 1
There are still some unimplemented system functions, and of coursse we
d51 1
a51 1
to lend a hand we'd love to have you. Join the Perl Porting Team Now!
d54 1
a54 1
Dec C, and on an AXP using Dec C. If you run into problems with
d57 2
a58 2
There are issues with varions versions of Dec C, so if you're not running a
relatively modern version, check the Dec C issues section later on in this
d61 1
a61 1
* Other required software
d63 19
a81 7
In addition to VMS, you'll need:
        1) A C compiler. Dec C or gcc for AXP or the VAX.
        2) A make tool. Dec's MMS (v2.6 or later), or MadGoat's free MMS
           analog MMK (available from ftp.madgoat.com/madgoat) both work
           just fine. Gnu Make might work, but it's been so long since
           anyone's tested it that we're not sure. MMK's free, though, so
           go ahead and use that.
d84 8
a91 8
        1) UNZIP.EXE for VMS available from a number of web/ftp sites.
    http://www.cdrom.com/pub/infozip/UnZip.html
    http://www.openvms.digital.com/cd/INFO-ZIP/
    ftp://ftp.digital.com/pub/VMS/
    ftp://ftp.openvms.digital.com/
    ftp://ftp.madgoat.com/madgoat/
    ftp://ftp.wku.edu/vms/
        2) GUNZIP/GZIP.EXE for VMS available from a number of web/ftp sites.
d98 6
a103 1
        3) VMS TAR also available from a number of web/ftp sites.
d107 25
d133 2
a134 2
different formats).  Most of the useful files from CPAN (the Comprehensive
Perl Archive Network) are in .tar.gz format (this includes copies of the
d139 5
a143 2
If you want to include socket support, you'll need a TCP stack and either
Dec C, or socket libraries. See the Socket Support topic for more details.
d145 3
a147 1
* Building Perl
d149 25
a173 1
Building perl has two steps, configuration and compilation.
d175 1
a175 1
To configure perl (a necessary first step), issue the command
d177 1
a177 1
@@CONFIGURE
d179 21
a199 7
from the top of an unpacked perl directory. You'll be asked a series of
questions, and the answers to them (along with the capabilities of your C
compiler and network stack) will determine how perl's built.

If you've got multiple C compilers installed, you'll have your choice of
which one to use. Various older versions of Dec C had some gotchas, so if
you're using a version older than 5.2, check the Dec C Issues section.
d201 10
a210 3
The configuration script will print out, at the very end, the MMS or MMK
command you need to compile perl. Issue it (exactly as printed) to start
the build.
d212 5
a216 4
Once you issue your MMS command, sit back and wait. Perl should build and
link without a problem. If it doesn't, check the Gotchas to watch out for
section. If that doesn't help, send some mail to the VMSPERL mailing list.
Instructions are in the Mailing Lists section.
d218 7
a224 1
As a handy shortcut, the command:
d226 6
a231 1
@@CONFIGURE "-des"
d233 1
a233 3
(note the quotation marks and case) will choose reasonable defaults. (It 
takes Dec C over Gnu C, Dec C sockets over SOCKETSHR sockets, and either 
over no sockets)
d235 3
a237 1
* Testing Perl
d239 11
a249 3
Once Perl has built cleanly, you need to test it to make sure things work.
This step is very important--there are always things that can go wrong
somehow and get you a dysfunctional Perl.
d252 1
a252 1
distribution. To run the tests, enter the *exact* MMS line you used to
d255 1
a255 1
Compile Command:
d257 1
a257 1
$MMS
d259 1
a259 1
Test Command:
d261 1
a261 1
$MMS test
d263 4
a266 4
MMS will run all the tests. This may take some time, as there are a lot of
tests. If any tests fail, there will be a note made on-screen. At the end
of all the tests, a summary of the tests, the number passed and failed, and
the time taken will be displayed.
d268 1
a268 1
If any tests fail, it means something's wrong with Perl. If the test suite
d275 2
a276 2
If one or more tests fail, you can get more info on the failure by issuing
this command sequence:
d278 1
a278 1
$ @@[.VMS]TEST .typ "-v" [.subdir]test.T
d285 1
a285 1
$ @@[.VMS]TEST .EXE "-v" [.OP]TIME.T
d290 8
a297 1
MCR []MINIPERL "-V"
a298 2
Note that "-V" really is a capital V in double quotes. This will dump out a
couple of screens worth of config info, and can help us diagnose the problem.
d301 6
a306 1
@@[.vms]myconfig
d308 1
a308 1
* Cleaning up and starting fresh
d311 2
a312 2
first. There's a procedure to do it--enter the *exact* MMS line you used to
compile and add "realclean" at the end, like this:
d314 1
a314 1
Compile Command:
d316 1
a316 1
$MMS
d318 1
a318 1
Cleanup Command:
d320 1
a320 1
$MMS realclean
d322 2
a323 2
If you don't do this, things may behave erratically. They might not, too,
so it's best to be sure and do it.
d325 1
a325 1
* Installing Perl
d330 15
a344 2
1) Create a directory somewhere and define the concealed logical PERL_ROOT
to point to it. For example, DEFINE/TRANS=(CONC,TERM) PERL_ROOT dka200:[perl.]
d346 3
a348 1
2) Run the install script via:
d350 11
a360 1
MMS install
d364 1
a364 1
MMK install
d369 14
a382 2
The script [.VMS]PERL_SETUP.COM that is written by CONFIGURE.COM 
will take care of most of the following:
d384 1
a384 36
3) Either define the symbol PERL somewhere, such as
SYS$MANAGER:SYLOGIN.COM, to be "PERL :== $PERL_ROOT:[000000]PERL.EXE", or
install Perl into DCLTABLES.EXE (Check out the section "Installing Perl
into DCLTABLES" for more info), or put the image in a directory that's in
your DCL$PATH (if you're using VMS 6.2 or higher).

4) Either define the logical name PERLSHR somewhere 
(such as in PERL_SETUP.COM) like so:
DEFINE/NOLOG PERLSHR PERL_ROOT:[000000]PERLSHR.EXE
or copy perl_root:[000000]perlshr.exe sys$share:.

5) Optionally define the command PERLDOC as 
PERLDOC == "$PERL_ROOT:[000000]PERL PERL_ROOT:[LIB.POD]PERLDOC.COM -t"
Note that if you wish to use most as a pager please see
ftp://space.mit.edu/pub/davis/ for both most and slang (or perhaps
ftp://ftp.wku.edu/vms/narnia/most.zip ).

6) Optionally define the command PERLBUG (the Perl bug report generator) as
PERLBUG == "$PERL_ROOT:[000000]PERL PERL_ROOT:[LIB]PERLBUG.COM"

7) Optionally define the command POD2MAN (Converts POD files to nroff
source suitable for converting to man pages. Also quiets complaints during
module builds) as

DEFINE/NOLOG POD2MAN PERL_ROOT:[LIB.POD]POD2MAN.COM
POD2MAN == "$PERL_ROOT:[000000]PERL POD2MAN"

8) Optionally define the command POD2TEXT (Converts POD files to text,
which is required for perldoc -f to work properly) as

DEFINE/NOLOG POD2TEXT PERL_ROOT:[LIB.POD]POD2TEXT.COM
POD2TEXT == "$PERL_ROOT:[000000]PERL POD2TEXT"

In all these cases, if you've got PERL defined as a foreign command, you
can replace $PERL_ROOT:[000000]PERL with ''perl'. If you've installed perl
into DCLTABLES, replace it with just perl.
d386 4
a389 1
* Installing Perl into DCLTABLES
d391 6
a396 2
Execute the following command file to define PERL as a DCL command.
You'll need CMKRNL priv to install the new dcltables.exe.
d398 1
a398 19
$ create perl.cld
!
! modify to reflect location of your perl.exe
!
define verb perl
  image perl_root:[000000]perl.exe
  cliflags (foreign)
$!
$ set command perl /table=sys$common:[syslib]dcltables.exe -
 /output=sys$common:[syslib]dcltables.exe
$ install replace sys$common:[syslib]dcltables.exe
$ exit

* Changing compile-time things

Most of the user-definable features of Perl are enabled or disabled in
[.VMS]CONFIG.VMS. There's code in there to Do The Right Thing, but that may
end up being the wrong thing for you. Make sure you understand what you're
doing, since changes here can get you a busted perl.
d400 2
a401 4
Odds are that there's nothing here to change, unless you're on a version of
VMS later than 6.2 and Dec C later than 5.6. Even if you are, the correct
values will still be chosen, most likely. Poking around here should be
unnecessary.
d403 12
a414 3
The one exception is the various *DIR install locations. Changing those
requires changes in genconfig.pl as well. Be really careful if you need to
change these, as they can cause some fairly subtle problems.
d416 1
a416 1
* INSTALLing images
d420 1
a420 1
a known image.  PERLSHR.EXE is typically larger than 1500 blocks
d425 1
d430 2
a431 2
If your code 'use's modules, check to see if there's an executable for
them, too. In the base perl build, POSIX, IO, Fcntl, Opcode, SDBM_File,
d434 1
a434 1
How much of a win depends on your memory situation, but if you're firing
d436 1
a436 1
it's probably a win.
d441 1
a441 32
* Extra things in the Perl distribution

In addition to the standard stuff that gets installed, there are two
optional extensions, DCLSYM and STDIO, that are handy. Instructions for
these two modules are in [.VMS.EXT.DCLSYM] and [.VMS.EXT.STDIO],
respectively.  They are built automatically for versions of perl >= 5.005.

* Socket Support

Perl includes a number of functions for IP sockets, which are available if
you choose to compile Perl with socket support (see the section Compiling
Perl for more info on selecting a socket stack).  Since IP networking is an
optional addition to VMS, there are several different IP stacks
available. How well integrated they are into the system depends on the
stack, your version of VMS, and the version of your C compiler.

The most portable solution uses the SOCKETSHR library. In combination with
either UCX or NetLib, this supports all the major TCP stacks (Multinet,
Pathways, TCPWare, UCX, and CMU) on all versions of VMS Perl runs on, with
all the compilers on both VAX and Alpha. The socket interface is also
consistent across versions of VMS and C compilers. It has a problem with
UDP sockets when used with Multinet, though, so you should be aware of
that.

The other solution available is to use the socket routines built into Dec
C. Which routines are available depend on the version of VMS you're
running, and require proper UCX emulation by your TCP/IP vendor.
Relatively current versions of Multinet, TCPWare, Pathway, and UCX all
provide the required libraries--check your manuals or release notes to see
if your version is new enough.

* Reporting Bugs
d449 1
a449 1
* Gotchas to watch out for
d452 25
a476 2
switches to MMS/MMK when you build. Use *exactly* what the configure script
prints!
d478 1
a478 8
The next big gotcha is directory depth. Perl can create directories four
and five levels deep during the build, so you don't have to be too deep to
start to hit the RMS 8 level point. It's best to do a
$DEFINE/TRANS=(CONC,TERM) PERLSRC disk:[dir.dir.dir.perldir.]"  (note the
trailing period) and $SET DEFAULT PERLSRC:[000000] before building. Perl
modules can be just as bad (or worse), so watch out for them, too. The
configuration script will warn if it thinks you're too deep (at least on 
versions of VMS prior to 7.2).
d480 2
a481 2
Finally, the third thing that bites people is leftover pieces from a failed
build. If things go wrong, make sure you do a "(MMK|MMS|make) realclean"
d484 1
a484 1
* Dec C issues
d486 2
a487 2
Note to DECC users: Some early versions (pre-5.2, some pre-4. If you're Dec
C 5.x or higher, with current patches if anym you're fine) of the DECCRTL
a488 12
    - Newlines are lost on I/O through pipes, causing lines to run together.
      This shows up as RMS RTB errors when reading from a pipe.  You can
      work around this by having one process write data to a file, and
      then having the other read the file, instead of the pipe.  This is
      fixed in version 4 of DECC.
    - The modf() routine returns a non-integral value for some values above
      INT_MAX; the Perl "int" operator will return a non-integral value in
      these cases.  This is fixed in version 4 of DECC.
    - On the AXP, if SYSNAM privilege is enabled, the CRTL chdir() routine
      changes the process default device and directory permanently, even
      though the call specified that the change should not persist after
      Perl exited.  This is fixed by DEC CSC patch AXPACRT04_061.
d490 25
a514 1
* Mailing Lists
d516 19
a534 1
There are several mailing lists available to the Perl porter. For VMS
d536 1
a536 1
there is the VMSPERL mailing list. It's usually a low-volume (10-12
d539 14
a552 2
The subscription address is VMSPERL-REQUEST@@NEWMAN.UPENN.EDU. Send a mail
message with just the words SUBSCRIBE VMSPERL in the body of the message.
d554 1
a554 2
The VMSPERL mailing list address is VMSPERL@@NEWMAN.UPENN.EDU. Any mail
sent there gets echoed to all subscribers of the list.
d556 16
a571 3
To unsubscribe from VMSPERL send the message UNSUBSCRIBE VMSPERL to
VMSPERL-REQUEST@@NEWMAN.UPENN.EDU.  Be sure to do so from the subscribed 
account that you are cancelling.
d573 4
d578 1
a578 1
* Acknowledgements
d581 1
a581 1
<bailey@@newman.upenn.edu>, who is ultimately responsible for Perl 5.004
d588 2
a589 1
  Tim Adye <T.J.Adye@@rl.ac.uk>
d591 1
a591 1
  David Denholm <denholm@@conmat.phys.soton.ac.uk>
d593 1
a593 1
  Mark Pizzolato <mark@@infocomm.com>
d595 1
a595 1
  Rich Salz <rsalz@@bbn.com>
d597 1
a597 1
  Peter Prymmer <pvhp@@forte.com> or <pvhp@@lns62.lns.cornell.edu>
d600 1
a600 1
  Dan Sugalski <sugalskd@@ous.edu>
d607 3
d613 1
a613 1
gratitude is due to Larry Wall <larry@@wall.org>, for having the ideas which
d618 3
@


1.2
log
@perl 5.004_04
@
text
@d1 1
a1 1
Last Revised 11-September-1997 by Dan Sugalski <sugalsd@@lbcc.cc.or.us>
d4 15
d34 1
a34 1
VaxC and Dec C, and on an AXP using Dec C. If you run into problems with
d44 1
a44 2
        1) A C compiler. Dec C for AXP, or VAX C, Dec C, or gcc for the
           VAX.
d51 25
d80 1
a80 44
* Compiling Perl

>From the top level of the Perl source directory, do this:

MMS/DESCRIP=[.VMS]DESCRIP.MMS

If you're on an Alpha, add /Macro=("__AXP__=1","decc=1")
If you're using Dec C as your C compiler (you are on all alphas), add
/Macro=("decc=1")
If Vac C is your default C compiler and you want to use Dec C, add
/Macro=("CC=CC/DECC") (Don't forget the /macro=("decc=1")
If Dec C is your default C compiler and you want to use Vax C, add
/Macro=("CC=CC/VAXC")
If you want Socket support and are using the SOCKETSHR socket library, add
/Macro=("SOCKETSHR_SOCKETS=1")
If you want Socket support and are using the Dec C RTL socket interface
(You must be using Dec C for this), add /Macro=("DECC_SOCKETS=1")

If you have multiple /macro= items, combine them together in one /Macro=()
switch, with all the options inside the parentheses separated by commas.

Samples:

VMS AXP, with Socketshr sockets:

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("decc=1","__AXP__=1","SOCKETSHR_SOCKETS=1")

VMS AXP with no sockets

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("decc=1","__AXP__=1")

VMS AXP with the Dec C RTL sockets

$MMS/DESCRIP=[.VMS]/Macro=("decc=1","__AXP__=1","DECC_SOCKETS=1")

VMS VAX with default system compiler, no sockets

$MMS/DESCRIP=[.VMS]DESCRIP.MMS

VMS VAX with Dec C compiler, no sockets

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("CC=CC/DECC","decc=1")

VMS VAX with Dec C compiler, Dec C RTL sockets
d82 1
a82 1
$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("CC=CC/DECC","decc=1","DECC_SOCKETS=1")
d84 1
a84 1
VMS VAX with Dec C compiler, Socketshr sockets
d86 1
a86 1
$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("CC=CC/DECC","decc=1","SOCKETSHR_SOCKETS=1")
d88 3
a90 4
Using Dec C is recommended over Vax C. The compiler is newer, and
supported. (Vax C was decommisioned around 1993) Various older versions had
some gotchas, so if you're using a version older than 5.2, check the Dec C
Issues section.
d92 3
a94 3
We'll also point out that Dec C will get you at least a ten-fold increase
in line-oriented IO over Vax C. The optimizer is amazingly better, too. If
you can use Dec C, then you *really*, *really* should.
d96 3
d105 8
d125 1
a125 1
$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("__AXP__=1","decc=1","DECCRTL_SOCKETS=1")
d129 1
a129 1
$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("__AXP__=1","decc=1","DECCRTL_SOCKETS=1") test
d138 1
a138 1
you're on an especially slow machine, depending on you machine speed, so
d146 1
a146 2
$ SET DEFAULT [.T]
$ @@[-.VMS]TEST .typ -v [.subdir]test.T
d153 1
a153 2
$ SET DEFAULT [.T]
$ @@[-.VMS]TEST .EXE -v [.OP]TIME.T
d162 3
d174 1
a174 1
$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("__AXP__=1","decc=1","DECCRTL_SOCKETS=1")
d178 1
a178 1
$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("__AXP__=1","decc=1","DECCRTL_SOCKETS=1") realclean
d186 1
a186 2
running. At some point we'll have a working install in DESCRIP.MMS, but for
right now the procedure's manual, and goes like this.
d191 3
a193 1
2) Copy perl.exe into PERL_ROOT:[000000]
d195 1
a195 2
3) Copy everything in [.LIB] and [.UTILS] (including all the
subdirectories!) to PERL_ROOT:[LIB] and PERL_ROOT:[UTILS].
d197 1
a197 7
4) Either copy PERLSHR.EXE to SYS$SHARE, or to somewhere globally accessble
and define the logical PERLSHR to point to it (DEFINE PERLSHR
PERL_ROOT:[000000]PERLSHR.EXE or something like that). The PerlShr image
should have W:RE protections on it. (Just W:E triggers increased security in
the image activator. Not a huge problem, but Perl will need to have any
other shared image it accesses INSTALLed. It's a huge pain, so don't unless
you know what you're doing)
d199 7
a205 1
5) Either define the symbol PERL somewhere, such as
d207 1
a207 1
install Perl into DCLTABLES.EXE )Check out the section "Installing Perl
d211 30
a240 5
6) Optionally define the command PERLDOC as 
PERLDOC :== $PERL_ROOT:[000000]PERL PERL_ROOT:[LIB.POD]PERLDOC.COM -T

7) Optionally define the command PERLBUG (the Perl bug report generator) as
PERLBUG :== $PERL_ROOT:[000000]PERL PERL_ROOT:[LIB]PERLBUG.COM"
d244 2
a245 3
Courtesy of Brad  Hughes:

Put the following, modified to reflect where your .exe is, in PERL.CLD:
d247 4
d252 3
a254 5
image perl_root:[exe]perl.exe
cliflags (foreign)

and then

d258 1
a258 2

and you don't need perl :== $perl_root:[exe]perl.exe.
d274 25
a298 1
change these,a s they can cause some fairly subtle problems.
d305 1
a305 1
respectively.
d310 2
a311 2
you choose to compile Perl with socket support. (See the section Compiling
Perl for more info on selecting a socket stack) Since IP networking is an
d337 1
a337 1
PERLBUG@@PERL.COM.
d342 2
a343 4
switches to MMS/MMK when you build. If Perl's building oddly, double-check
your switches. If you're on a VAX, be sure to add a /Macro=("decc=1") if
you're using Dec C, and if you're on an alpha and using MMS, you'll need a
/Macro=("__AXP__=1")
d350 3
a352 1
modules can be just as bad (or worse), so watch out for them, too.
d389 4
a392 6
The Perl5-Porters list is for anyone involved in porting Perl to a
platform. This includes you, if you want to participate. It's a high-volume
list (60-100 messages a day during active development times), so be sure
you want to be there. The subscription address is
Perl5-Porters-request@@perl.org. Send a message with just the word SUBSCRIBE
in the body. The posting address is Perl5-Porters@@perl.org.
d412 1
a412 1
  Peter Prymmer <pvhp@@lns62.lns.cornell.edu)
d415 1
a415 1
  Dan Sugalski <sugalsd@@stargate.lbcc.cc.or.us>
d421 1
a421 1
     the the opportunity to test and develop for the AXP,
a423 364
willingness to work with the VMS newcomers.  Finally, the greatest debt of
gratitude is due to Larry Wall <larry@@wall.org>, for having the ideas which
have made our sleepless nights possible.

Thanks,
The VMSperl group


---------------------------------------------------------------------------
[Here's the pre-5.004_04 version of README.vms, for the record.]

Last revised: 19-Jan-1996 by Charles Bailey  bailey@@genetics.upenn.edu

The VMS port of Perl is still under development.  At this time, the Perl
binaries built under VMS handle internal operations properly, for the most
part, as well as most of the system calls which have close equivalents under
VMS. There are still some incompatibilities in process handling (e.g the
fork/exec model for creating subprocesses doesn't do what you might expect
under Unix), and there remain some file handling differences from Unix.  Over
the longer term, we'll try to get many of the useful VMS system services
integrated as well, depending on time and people available.  Of course, if
you'd like to add something yourself, or join the porting team, we'd love to
have you!

The current sources and build procedures have been tested on a VAX using VAXC
and DECC, and on an AXP using DECC.  If you run into problems with other
compilers, please let us know.

Note to DECC users: Some early versions of the DECCRTL contained a few bugs
which affect Perl performance:
    - Newlines are lost on I/O through pipes, causing lines to run together.
      This shows up as RMS RTB errors when reading from a pipe.  You can
      work around this by having one process write data to a file, and
      then having the other read the file, instead of the pipe.  This is
      fixed in version 4 of DECC.
    - The modf() routine returns a non-integral value for some values above
      INT_MAX; the Perl "int" operator will return a non-integral value in
      these cases.  This is fixed in version 4 of DECC.
    - On the AXP, if SYSNAM privilege is enabled, the CRTL chdir() routine 
      changes the process default device and directory permanently, even
      though the call specified that the change should not persist after
      Perl exited.  This is fixed by DEC CSC patch AXPACRT04_061.

* Other software required

At the moment, in addition to basic VMS, you'll need two things:
   - a C compiler: VAXC, DECC, or gcc for the VAX; DECC for the AXP
   - a make tool: DEC's MMS (version 2.6 or later) or the free analog MMK
     (available from ftp.spc.edu), or a standard make utility (e.g. GNU make,
     also available from ftp.spc.edu).
In addition, you may include socket support if you have an IP stack running
on your system.  See the topic "Socket support" for more information.

* Socket support

Perl includes a number of IP socket routines among its builtin functions,
which are available if you choose to compile Perl with socket support.  Since
IP networking is an optional addition to VMS, there are several different IP
stacks available, so it's difficult to automate the process of building Perl
with socket support in a way which will work on all systems.  

By default, Perl is built without IP socket support.  If you define the macro
SOCKET when invoking MMK, however, socket support will be included.  As
distributed, Perl for VMS includes support for the SOCKETSHR socket library,
which is layered on MadGoat software's vendor-independent NETLIB interface. 
This provides support for all socket calls used by Perl except the
[g|s]etnet*() routines, which are replaced for the moment by stubs which
generate a fatal error if a Perl script attempts to call one of these routines. 
Both SOCKETSHR and NETLIB are available from MadGoat ftp sites, such as
ftp.spc.edu or ftp.wku.edu.

You can link Perl directly to your TCP/IP stack's library, *as long as* it
supplies shims for stdio routines which will properly handle both sockets and
normal file descriptors.  This is necessary because Perl does not distinguish
between the two, and will try to make normal stdio calls such as read() and
getc() on socket file descriptors.  If you'd like to link Perl directly to
your IP stack, then make the following changes:
  - In Descrip.MMS, locate the section beginning with .ifdef SOCKET, and
    change the SOCKLIB macro so that it translates to  the filespec of your
    IP stack's socket library.  This will be added to the RTL options file.
  - Edit the file SockAdapt.H in the [.VMS] subdirectory so that it
    includes the Socket.H, In.H, Inet.H, NetDb.H, and, if necessary,
    Errno.H header files for your IP stack, or so that it declares the
    standard TCP/IP constants and data structures appropriately.  (See
    the distributed copy of SockAdapt.H for a collection of the structures
    needed by Perl itself, and [.ext.Socket]Socket.xs for a list of the
    constants used by the Socket extension, if you elect to built it.)
    You should also define any logical names necessary for your C compiler
    to find these files before invoking MM[KS] to build Perl.
  - Edit the file SockAdapt.C in the [.VMS] subdirectory so that it
    contains routines which substitute for any IP library routines
    required by Perl which your IP stack does not provide.  This may
    require a little trial and error; we'll try to compile a complete
    list soon of socket routines required by Perl.


* Building Perl under VMS

Since you're reading this, presumably you've unpacked the Perl distribution
into its directory tree, in which you will find a [.vms] subdirectory below
the directory in which this file is found.  If this isn't the case, then you'll
need to unpack the distribution properly, or manually edit Descrip.MMS or
the VMS Makefile to alter directory paths as necessary.  (I'd advise using the 
`normal' directory tree, at least for the first time through.)  This
subdirectory contains several files, among which are the following:
  Config.VMS     - A template Config.H set up for VMS.
  Descrip.MMS    - The MMS/MMK dependency file for building Perl
  GenConfig.Pl   - A Perl script to generate Config.SH retrospectively
                   from Config.VMS, since the Configure shell script which
                   normally generates Config.SH doesn't run under VMS.
  GenOpt.Com     - A little DCL procedure used to write some linker options
                   files, since not all make utilities can do this easily.
  Gen_ShrFls.Pl  - A Perl script which generates linker options files and
                   MACRO declarations for PerlShr.Exe.
  Makefile       - The make dependency file for building Perl  
  MMS2Make.Pl    - A Perl script used to generate Makefile from Descrip.MMS
  PerlVMS.pod    - Documentation for VMS-specific behavior of Perl
  Perly_[CH].VMS - Versions of the byacc output from Perl's grammar,
                   modified to include VMS-specific C compiler options
  SockAdapt.[CH] - C source code used to integrate VMS TCP/IP support
  Test.Com       - DCL driver for Perl regression tests
  VMSish.H       - C header file containing VMS-specific definitions
  VMS.C          - C source code for VMS-specific routines
  VMS_Yfix.Pl    - Perl script to convert Perly.[CH] to Perly_[CH].VMS
  WriteMain.Pl   - Perl script to generate Perlmain.C
The [.Ext...] directories contain VMS-specific extensions distributed with
Perl.  There may also be other files in [.VMS...] pertaining to features under
development; for the most part, you can ignore them.  Note that packages in
[.ext.*] are not built with Perl by default; you build the ones you want
once the basic Perl build is complete (see the perlvms docs for instructions
on building extensions.)

Config.VMS and Decrip.MMS/Makefile are set up to build a version of Perl which
includes all features known to work when this release was assembled.  If you
have code at your site which would support additional features (e.g. emulation
of Unix system calls), feel free to make the appropriate changes to these
files.  (Note: Do not use or edit config.h in the main Perl source directory;
it is superseded by the current Config.VMS during the build.)  You may also
wish to make site-specific changes to Descrip.MMS or Makefile to reflect local
conventions for naming of files, etc.

There are several pieces of system-specific information which become part of
the Perl Config extension.  Under VMS, the data for Config are generated by the
script GenConfig.Pl in the [.VMS] subdirectory.  It tries to ascertain the
necessary information from various files, or from the system itself, and
generally does the right thing.  There is a list of hard-coded values at the
end of this script which specifies items that are correct for most VMS systems,
but may be incorrect for you, if your site is set up in an unusual fashion.  If
you're familiar with Perl's Config extension, feel free to edit these values as
necessary.  If this doesn't mean much to you, don't worry -- the information is
probably correct, and even if it's not, none of these parameters affect your
ability to build or run Perl.  You'll only get the wrong answer if you ask for
it specifically from Config.

Examine the information at the beginning of Descrip.MMS for information about
specifying alternate C compilers or building a version of Perl with debugging
support.  For instance, if you want to use DECC, you'll need to include the
/macro="decc=1" qualifier to MMK  (If you're using make, these options are not
supported.)  If you're on an AXP system, define the macro __AXP__ (MMK does
this for you), and DECC will automatically be selected.

To start the build, set default to the main source directory.  Since
Descrip.MMS assumes that VMS commands have their usual meaning, and makes use
of command-line macros, you may want to be certain that you haven't defined DCL
symbols which would interfere with the build.  Then, if you are using MMS or
MMK, say
$ MMS/Descrip=[.VMS] ! or MMK
(N.B. If you are using MMS, you must use version 2.6 or later; a bug in
earlier versions produces malformed cc command lines.)  If you are using a
version of make, say
$ Make -f [.VMS]Makefile
Note that the Makefile doesn't support conditional compilation, is
set up to use VAXC on a VAX, and does not include socket support.  You can
either edit the Makefile by hand, using Descrip.MMS as a guide, or use the
Makefile to build Miniperl.Exe, and then run the Perl script MMS2Make.pl,
found in the [.VMS] subdirectory, to generate a new Makefile with the options
appropriate to your site.

If you are using MM[SK], and you decide to rebuild Perl with a different set
of parameters (e.g. changing the C compiler, or adding socket support), be
sure to say
$ MMK/Descrip=[.VMS] realclean
first, in order to remove files generated during the previous build.  If
you omit this step, you risk ending up with a copy of Perl which
composed partially of old files and partially of new ones, which may lead
to strange effects when you try to run Perl.

A bug in some early versions of the DECC RTL on the AXP causes newlines
to be lost when writing to a pipe.  A different bug in some patched versions
of DECC 4.0 for VAX can also scramble preprocessor output.  Finally, gcc 2.7.2
has yet another preprocessor bug, which causes line breaks to be inserted
into the output at inopportune times.  Each of these bugs causes Gen_ShrFls.pl
to fail, since it can't parse the preprocessor output to identify global
variables and routines.  This problem is generally manifested as missing
global symbols when linking PerlShr.Exe or Perl.Exe.  You can work around
it by defining the macro PIPES_BROKEN when you invoke MMS or MMK.


This will build the following files:
  Miniperl.Exe        - a stand-alone version of without any extensions.
                        Miniperl has all the intrinsic capabilities of Perl,
                        but cannot make use of the DynaLoader or any
                        extensions which use XS code.
  PerlShr.Exe         - a shareable image containing most of Perl's internal
                        routines and global variables.  Perl.Exe is linked to
                        this image, as are all dynamic extensions, so everyone's
                        using the same set of global variables and routines.
  Perl.Exe            - the main Perl executable image.  It's contains the
                        main() routine, plus code for any statically linked
                        extensions.
  PerlShr_Attr.Opt    - A linker options file which specifies psect attributes
                        matching those in PerlShr.Exe.  It should be used when
                        linking images against PerlShr.Exe
  PerlShr_Bld.Opt     - A linker options file which specifies various things
                        used to build PerlShr.Exe.  It should be used when
                        rebuilding PerlShr.Exe via MakeMaker-produced
                        Descrip.MMS files for static extensions.
  c2ph                - Perl program which generates template code to access
                        C struct members from Perl.
  h2ph                - Perl program which generates template code to access
                        #defined constants in a C header file from Perl,
                        using the "old-style" interface.  (Largely supplanted
                        by h2xs.)
  h2xs                - Perl program which generates template files for creating
                        XSUB extensions, optionally beginning with the #defined
                        constants in a C header file.
  [.lib.pod]perldoc   - A Perl program which locates and displays documentation
                        for Perl and its extensions.
  [.Lib]Config.pm     - the Perl extension which saves configuration information
                        about Perl and your system.
  [.Lib]DynaLoader.pm - The Perl extension which performs dynamic linking of
                        shareable images for extensions.
  Several subdirectories under [.Lib] containing preprocessed files or
                        site-specific files.
There are, of course, a number of other files created for use during the build. 
Once you've got the binaries built, you may wish to `build' the `tidy' or
`clean' targets to remove extra files.

If you run into problems during the build, you can get help from the VMSPerl
or perl5-porters mailing lists (see below).  When you report the problem,
please include the following information:
  - The version of Perl you're trying to build.  Please include any
    "letter" patchlevel, in addition to the version number.  If the
    build successfully created Miniperl.Exe, you can check this by
    saying '$ MCR Sys$Disk:[]Miniperl -v'.  Also, please mention
    where you obtained the distribution kit; in particular, note
    whether you were using a basic Perl kit or the VMS test kit
    (see below).
  - The exact command you issued to build Perl.
  - A copy of all error messages which were generated during the build.
    Please include enough of the build log to establish the context of
    the error messages.
  - A summary of your configuration.  If the build progressed far enough
    to generate Miniperl.Exe and [.Lib]Config.pm, you can obtain this
    by saying '$ MCR Sys$Disk:[]Miniperl "-V"' (note the "" around -V).
    If not, then you can say '$ MMK/Descrip=[.VMS] printconfig' to
    produce the summary.
This may sound like a lot of information to send, but it'll often make
it easier for someone to spot the problem, instead of having to give
a spectrum of possibilities.
  


* Installing Perl once it's built

Once the build is complete, you'll need to do the following:
  - Put PerlShr.Exe in a common directory, and make it world-readable.
    If you place it in a location other than Sys$Share, you'll need to
    define the logical name PerlShr to point to the image.  (If you're
    installing on a VMScluster, be sure that each node is using the
    copy of PerlShr you expect [e.g. if you put PerlShr.Exe in Sys$Share,
    do they all share Sys$Share?]).
  - Put Perl.Exe in a common directory, and make it world-executable.
  - Define a foreign command to invoke Perl, using a statement like
    $ Perl == "$dev:[dir]Perl.Exe"
  - Create a world-readable directory tree for Perl library modules,
    scripts, and what-have-you, and define PERL_ROOT as a rooted logical
    name pointing to the top of this tree (i.e. if your Perl files were
    going to live in DKA1:[Util.Perl5...], then you should
      $ Define/Translation=Concealed Perl_Root DKA1:[Util.Perl5.]
    (Be careful to follow the rules for rooted logical names; in particular,
    remember that a rooted logical name cannot have as its device portion
    another rooted logical name - you've got to supply the actual device name
    and directory path to the root directory.)
  - Place the files from the [.lib...] directory tree in the distribution
    package into a [.lib...] directory tree off the root directory described
    above.
  - Most of the Perl documentation lives in the [.pod] subdirectory, and
    is written in a simple markup format which can be easily read.  In this
    directory as well are pod2man and pod2html translators to reformat the
    docs for common display engines; a pod2hlp translator is under development.
    These files are copied to [.lib.pod] during the installation.
  - Define a foreign command to execute perldoc, such as
    $ Perldoc == "''Perl' Perl_Root:[lib.pod]Perldoc -t"
    This will allow users to retrieve documentation using Perldoc.  For
    more details, say "perldoc perldoc".
That's it.

If you run into a bug in Perl, please submit a bug report.  The PerlBug
program, found in the [.lib] directory, will walk you through the process
of assembling the necessary information into a bug report, and sending
of to the Perl bug reporting address, perlbug@@perl.com.

* For more information

If you're interested in more information on Perl in general, you may wish to
consult the Usenet newsgroups comp.lang.perl.announce and comp.lang.perl.misc.
The FAQ for these groups provides pointers to other online sources of
information, as well as books describing Perl in depth.

If you're interested in up-to-date information on Perl development and
internals, you might want to subscribe to the perl5-porters mailing list.  You
can do this by sending a message to perl5-porters-request@@nicoh.com, containing
the single line
subscribe perl5-porters
This is a high-volume list at the moment (>50 messages/day).

If you're interested in ongoing information about the VMS port, you can
subscribe to the VMSPerl mailing list by sending a request to
vmsperl-request@@genetics.upenn.edu, containing the single line
subscribe VMSPerl
as the body of the message.  And, as always, we welcome any help or code you'd
like to offer - you can send mail to bailey@@genetics.upenn.edu or directly to
the VMSPerl list at vmsperl@@genetics.upenn.edu.

Finally, if you'd like to try out the latest changes to VMS Perl, you can
retrieve a test distribution kit by anonymous ftp from genetics.upenn.edu, in
the file [.perl5]perl5_ppp_yymmddx.zip, where "ppp" is the current Perl
patchlevel, and "yymmddx" is a sequence number indicating the date that
particular kit was assembled.  In order to make retrieval convenient, this
kit is also available by the name Perl5_VMSTest.Zip.  These test kits contain
"unofficial" patches from the perl5-porters group, test patches for important
bugs, and VMS-specific fixes and improvements which have occurred since the
last Perl release.  Most of these changes will be incorporated in the next
release of Perl, but until Larry Wall's looked at them and said they're OK,
none of them should be considered official.

Good luck using Perl.  Please let us know how it works for you - we can't
guarantee that we'll be able to fix bugs quickly, but we'll try, and we'd
certainly like to know they're out there.


* Acknowledgements

There are, of course, far too many people involved in the porting and testing
of Perl to mention everyone who deserves it, so please forgive us if we've
missed someone.  That said, special thanks are due to the following:
  Tim Adye <T.J.Adye@@rl.ac.uk>
     for the VMS emulations of getpw*()
  David Denholm <denholm@@conmat.phys.soton.ac.uk>
     for extensive testing and provision of pipe and SocketShr code,
  Mark Pizzolato <mark@@infocomm.com>
     for the getredirection() code
  Rich Salz <rsalz@@bbn.com>
     for readdir() and related routines
  Peter Prymmer <pvhp@@lns62.lns.cornell.edu)
     for extensive testing, as well as development work on
     configuration and documentation for VMS Perl,
  the Stanford Synchrotron Radiation Laboratory and the
     Laboratory of Nuclear Studies at Cornell University for
     the the opportunity to test and develop for the AXP,
and to the entire VMSperl group for useful advice and suggestions.  In addition
the perl5-porters, especially Andy Dougherty <doughera@@lafcol.lafayette.edu>
and Tim Bunce <Tim.Bunce@@ig.co.uk>,  deserve credit for their creativity and
@


1.1
log
@Initial revision
@
text
@d1 380
d675 4
a678 4
If you're interested in more information on Perl in general, consult the Usenet
newsgroups comp.lang.perl.announce and comp.lang.perl.misc.  The FAQ for these
groups provides pointers to other online sources of information, as well as
books describing Perl in depth.
d688 4
a691 3
subscribe to the VMSperl mailing list by sending a request to
bailey@@genetics.upenn.edu (it's to a human, not a list server - this is a small
operation at the moment).  And, as always, we welcome any help or code you'd
d693 1
a693 1
the VMSperl list at vmsperl@@genetics.upenn.edu.
d725 6
a730 3
  Richard Dyson <dyson@@blaze.physics.uiowa.edu> and
  Kent Covert <kacovert@@miavx1.acs.muohio.edu>
     for additional testing on the AXP.
d735 1
a735 1
gratitude is due to Larry Wall <lwall@@sems.com>, for having the ideas which
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d1 1
a1 2
Last Revised 01-March-1999 by Dan Sugalski <sugalskd@@ous.edu>
Originally by Charles Bailey <bailey@@newman.upenn.edu>
d3 14
a16 1
* Important safety tip
d18 2
a19 357
The build and install procedures have changed significantly from the 5.004
releases! Make sure you read the "Building Perl" and "Installing Perl"
sections before you build or install.

Also note that, as of 5.005, an ANSI C compliant compiler is required to
build Perl. Vax C is *not* ANSI compliant, as it died a natural death some
time before the standard was set. Therefore Vax C will not compile perl
5.005. Sorry about that.

If you're stuck without Dec C (the Vax C license should be good for Dec C,
but the media charges might prohibit an upgrade), consider getting Gnu C
instead.

* Intro

The VMS port of Perl is as functionally complete as any other Perl port
(and as complete as the ports on some Unix systems). The Perl binaries
provide all the Perl system calls that are either available under VMS or
reasonably emulated. There are some incompatibilites in process handling
(e.g the fork/exec model for creating subprocesses doesn't do what you
might expect under Unix), mainly because VMS and Unix handle processes and
sub-processes very differently.

There are still some unimplemented system functions, and of coursse we
could use modules implementing useful VMS system services, so if you'd like
to lend a hand we'd love to have you. Join the Perl Porting Team Now!

The current sources and build procedures have been tested on a VAX using
Dec C, and on an AXP using Dec C. If you run into problems with
other compilers, please let us know.

There are issues with varions versions of Dec C, so if you're not running a
relatively modern version, check the Dec C issues section later on in this
document.

* Other required software

In addition to VMS, you'll need:
        1) A C compiler. Dec C or gcc for AXP or the VAX.
        2) A make tool. Dec's MMS (v2.6 or later), or MadGoat's free MMS
           analog MMK (available from ftp.madgoat.com/madgoat) both work
           just fine. Gnu Make might work, but it's been so long since
           anyone's tested it that we're not sure. MMK's free, though, so
           go ahead and use that.

You may also want to have on hand:
        1) UNZIP.EXE for VMS available from a number of web/ftp sites.
    http://www.cdrom.com/pub/infozip/UnZip.html
    http://www.openvms.digital.com/cd/INFO-ZIP/
    ftp://ftp.digital.com/pub/VMS/
    ftp://ftp.openvms.digital.com/
    ftp://ftp.madgoat.com/madgoat/
    ftp://ftp.wku.edu/vms/
        2) GUNZIP/GZIP.EXE for VMS available from a number of web/ftp sites.
    http://www.fsf.org/order/ftp.html
    ftp://ftp.uu.net/archive/systems/gnu/diffutils*.tar.gz
    ftp://gatekeeper.dec.com/pub/GNU/diffutils*.tar.gz
    ftp://ftp.gnu.org/pub/gnu/diffutils*.tar.gz 
    http://www.openvms.digital.com/cd/GZIP/
    ftp://ftp.digital.com/pub/VMS/
        3) VMS TAR also available from a number of web/ftp sites.
    ftp://ftp.lp.se/vms/
    http://www.openvms.digital.com/cd/VMSTAR/
    ftp://ftp.digital.com/pub/VMS/
Please note that UNZIP and GUNZIP are not the same thing (they work with
different formats).  Most of the useful files from CPAN (the Comprehensive
Perl Archive Network) are in .tar.gz format (this includes copies of the
source code for perl as well as modules and scripts that you may wish to
add later) hence you probably want to have GUNZIP.EXE and VMSTAR.EXE on
your VMS machine.

If you want to include socket support, you'll need a TCP stack and either
Dec C, or socket libraries. See the Socket Support topic for more details.

* Building Perl

Building perl has two steps, configuration and compilation.

To configure perl (a necessary first step), issue the command

@@CONFIGURE

from the top of an unpacked perl directory. You'll be asked a series of
questions, and the answers to them (along with the capabilities of your C
compiler and network stack) will determine how perl's built.

If you've got multiple C compilers installed, you'll have your choice of
which one to use. Various older versions of Dec C had some gotchas, so if
you're using a version older than 5.2, check the Dec C Issues section.

The configuration script will print out, at the very end, the MMS or MMK
command you need to compile perl. Issue it (exactly as printed) to start
the build.

Once you issue your MMS command, sit back and wait. Perl should build and
link without a problem. If it doesn't, check the Gotchas to watch out for
section. If that doesn't help, send some mail to the VMSPERL mailing list.
Instructions are in the Mailing Lists section.

As a handy shortcut, the command:

@@CONFIGURE "-des"

(note the quotation marks and case) will choose reasonable defaults. (It 
takes Dec C over Gnu C, Dec C sockets over SOCKETSHR sockets, and either 
over no sockets)

* Testing Perl

Once Perl has built cleanly, you need to test it to make sure things work.
This step is very important--there are always things that can go wrong
somehow and get you a dysfunctional Perl.

Testing is very easy, though, as there's a full test suite in the perl
distribution. To run the tests, enter the *exact* MMS line you used to
compile Perl and add the word "test" to the end, like this:

Compile Command:

$MMS

Test Command:

$MMS test

MMS will run all the tests. This may take some time, as there are a lot of
tests. If any tests fail, there will be a note made on-screen. At the end
of all the tests, a summary of the tests, the number passed and failed, and
the time taken will be displayed.

If any tests fail, it means something's wrong with Perl. If the test suite
hangs (some tests can take upwards of two or three minutes, or more if
you're on an especially slow machine, depending on your machine speed, so
don't be hasty), then the test *after* the last one displayed failed. Don't
install Perl unless you're confident that you're OK. Regardless of how
confident you are, make a bug report to the VMSPerl mailing list.

If one or more tests fail, you can get more info on the failure by issuing
this command sequence:

$ @@[.VMS]TEST .typ "-v" [.subdir]test.T

where ".typ" is the file type of the Perl images you just built (if you
didn't do anything special, use .EXE), and "[.subdir]test.T" is the test
that failed. For example, with a normal Perl build, if the test indicated
that [.op]time failed, then you'd do this:

$ @@[.VMS]TEST .EXE "-v" [.OP]TIME.T

When you send in a bug report for failed tests, please include the output
from this command, which is run from the main source directory:

MCR []MINIPERL "-V"

Note that "-V" really is a capital V in double quotes. This will dump out a
couple of screens worth of config info, and can help us diagnose the problem.
If (and only if) that did not work then try enclosing the output of:

@@[.vms]myconfig

* Cleaning up and starting fresh

If you need to recompile from scratch, you have to make sure you clean up
first. There's a procedure to do it--enter the *exact* MMS line you used to
compile and add "realclean" at the end, like this:

Compile Command:

$MMS

Cleanup Command:

$MMS realclean

If you don't do this, things may behave erratically. They might not, too,
so it's best to be sure and do it.

* Installing Perl

There are several steps you need to take to get Perl installed and
running.

1) Create a directory somewhere and define the concealed logical PERL_ROOT
to point to it. For example, DEFINE/TRANS=(CONC,TERM) PERL_ROOT dka200:[perl.]

2) Run the install script via:

MMS install

or

MMK install

If for some reason it complains about target INSTALL being up to date,
throw a /FORCE switch on the MMS or MMK command.

The script [.VMS]PERL_SETUP.COM that is written by CONFIGURE.COM 
will take care of most of the following:

3) Either define the symbol PERL somewhere, such as
SYS$MANAGER:SYLOGIN.COM, to be "PERL :== $PERL_ROOT:[000000]PERL.EXE", or
install Perl into DCLTABLES.EXE (Check out the section "Installing Perl
into DCLTABLES" for more info), or put the image in a directory that's in
your DCL$PATH (if you're using VMS 6.2 or higher).

4) Either define the logical name PERLSHR somewhere 
(such as in PERL_SETUP.COM) like so:
DEFINE/NOLOG PERLSHR PERL_ROOT:[000000]PERLSHR.EXE
or copy perl_root:[000000]perlshr.exe sys$share:.

5) Optionally define the command PERLDOC as 
PERLDOC == "$PERL_ROOT:[000000]PERL PERL_ROOT:[LIB.POD]PERLDOC.COM -t"
Note that if you wish to use most as a pager please see
ftp://space.mit.edu/pub/davis/ for both most and slang (or perhaps
ftp://ftp.wku.edu/vms/narnia/most.zip ).

6) Optionally define the command PERLBUG (the Perl bug report generator) as
PERLBUG == "$PERL_ROOT:[000000]PERL PERL_ROOT:[LIB]PERLBUG.COM"

7) Optionally define the command POD2MAN (Converts POD files to nroff
source suitable for converting to man pages. Also quiets complaints during
module builds) as

DEFINE/NOLOG POD2MAN PERL_ROOT:[LIB.POD]POD2MAN.COM
POD2MAN == "$PERL_ROOT:[000000]PERL POD2MAN"

8) Optionally define the command POD2TEXT (Converts POD files to text,
which is required for perldoc -f to work properly) as

DEFINE/NOLOG POD2TEXT PERL_ROOT:[LIB.POD]POD2TEXT.COM
POD2TEXT == "$PERL_ROOT:[000000]PERL POD2TEXT"

In all these cases, if you've got PERL defined as a foreign command, you
can replace $PERL_ROOT:[000000]PERL with ''perl'. If you've installed perl
into DCLTABLES, replace it with just perl.

* Installing Perl into DCLTABLES

Execute the following command file to define PERL as a DCL command.
You'll need CMKRNL priv to install the new dcltables.exe.

$ create perl.cld
!
! modify to reflect location of your perl.exe
!
define verb perl
  image perl_root:[000000]perl.exe
  cliflags (foreign)
$!
$ set command perl /table=sys$common:[syslib]dcltables.exe -
 /output=sys$common:[syslib]dcltables.exe
$ install replace sys$common:[syslib]dcltables.exe
$ exit

* Changing compile-time things

Most of the user-definable features of Perl are enabled or disabled in
[.VMS]CONFIG.VMS. There's code in there to Do The Right Thing, but that may
end up being the wrong thing for you. Make sure you understand what you're
doing, since changes here can get you a busted perl.

Odds are that there's nothing here to change, unless you're on a version of
VMS later than 6.2 and Dec C later than 5.6. Even if you are, the correct
values will still be chosen, most likely. Poking around here should be
unnecessary.

The one exception is the various *DIR install locations. Changing those
requires changes in genconfig.pl as well. Be really careful if you need to
change these, as they can cause some fairly subtle problems.

* INSTALLing images

On systems that are using perl quite a bit, and particularly those with 
minimal RAM, you can boost the performance of perl by INSTALLing it as
a known image.  PERLSHR.EXE is typically larger than 1500 blocks
and that is a reasonably large amount of IO to load each time perl is 
invoked. 

   INSTALL ADD PERLSHR/SHARE

should be enough for PERLSHR.EXE (/share implies /header and /open), 
while /HEADER should do for PERL.EXE (perl.exe is not a shared image).

If your code 'use's modules, check to see if there's an executable for
them, too. In the base perl build, POSIX, IO, Fcntl, Opcode, SDBM_File,
DCLsym, and Stdio all have shared images that can be installed /SHARE.

How much of a win depends on your memory situation, but if you're firing
off perl with any regularity (like more than once every 20 seconds or so)
it's probably a win.

While there is code in perl to remove privileges as it runs you are advised
to NOT INSTALL PERL.EXE with PRIVs!

* Extra things in the Perl distribution

In addition to the standard stuff that gets installed, there are two
optional extensions, DCLSYM and STDIO, that are handy. Instructions for
these two modules are in [.VMS.EXT.DCLSYM] and [.VMS.EXT.STDIO],
respectively.  They are built automatically for versions of perl >= 5.005.

* Socket Support

Perl includes a number of functions for IP sockets, which are available if
you choose to compile Perl with socket support (see the section Compiling
Perl for more info on selecting a socket stack).  Since IP networking is an
optional addition to VMS, there are several different IP stacks
available. How well integrated they are into the system depends on the
stack, your version of VMS, and the version of your C compiler.

The most portable solution uses the SOCKETSHR library. In combination with
either UCX or NetLib, this supports all the major TCP stacks (Multinet,
Pathways, TCPWare, UCX, and CMU) on all versions of VMS Perl runs on, with
all the compilers on both VAX and Alpha. The socket interface is also
consistent across versions of VMS and C compilers. It has a problem with
UDP sockets when used with Multinet, though, so you should be aware of
that.

The other solution available is to use the socket routines built into Dec
C. Which routines are available depend on the version of VMS you're
running, and require proper UCX emulation by your TCP/IP vendor.
Relatively current versions of Multinet, TCPWare, Pathway, and UCX all
provide the required libraries--check your manuals or release notes to see
if your version is new enough.

* Reporting Bugs

If you come across what you think might be a bug in Perl, please report
it. There's a script in PERL_ROOT:[UTILS], perlbug, that walks you through
the process of creating a bug report. This script includes details of your
installation, and is very handy. Completed bug reports should go to
perlbug@@perl.com.

* Gotchas to watch out for

Probably the single biggest gotcha in compiling Perl is giving the wrong
switches to MMS/MMK when you build. Use *exactly* what the configure script
prints!

The next big gotcha is directory depth. Perl can create directories four
and five levels deep during the build, so you don't have to be too deep to
start to hit the RMS 8 level point. It's best to do a
$DEFINE/TRANS=(CONC,TERM) PERLSRC disk:[dir.dir.dir.perldir.]"  (note the
trailing period) and $SET DEFAULT PERLSRC:[000000] before building. Perl
modules can be just as bad (or worse), so watch out for them, too. The
configuration script will warn if it thinks you're too deep (at least on 
versions of VMS prior to 7.2).

Finally, the third thing that bites people is leftover pieces from a failed
build. If things go wrong, make sure you do a "(MMK|MMS|make) realclean"
before you rebuild.

* Dec C issues

Note to DECC users: Some early versions (pre-5.2, some pre-4. If you're Dec
C 5.x or higher, with current patches if anym you're fine) of the DECCRTL
contained a few bugs which affect Perl performance:
d28 1
a28 1
    - On the AXP, if SYSNAM privilege is enabled, the CRTL chdir() routine
d33 1
a33 1
* Mailing Lists
d35 294
a328 14
There are several mailing lists available to the Perl porter. For VMS
specific issues (including both Perl questions and installation problems)
there is the VMSPERL mailing list. It's usually a low-volume (10-12
messages a week) mailing list.

The subscription address is VMSPERL-REQUEST@@NEWMAN.UPENN.EDU. Send a mail
message with just the words SUBSCRIBE VMSPERL in the body of the message.

The VMSPERL mailing list address is VMSPERL@@NEWMAN.UPENN.EDU. Any mail
sent there gets echoed to all subscribers of the list.

To unsubscribe from VMSPERL send the message UNSUBSCRIBE VMSPERL to
VMSPERL-REQUEST@@NEWMAN.UPENN.EDU.  Be sure to do so from the subscribed 
account that you are cancelling.
a332 5
A real big thanks needs to go to Charles Bailey
<bailey@@newman.upenn.edu>, who is ultimately responsible for Perl 5.004
running on VMS. Without him, nothing the rest of us have done would be at
all important.

d344 6
a349 12
  Peter Prymmer <pvhp@@forte.com> or <pvhp@@lns62.lns.cornell.edu>
     for extensive testing, as well as development work on
     configuration and documentation for VMS Perl,
  Dan Sugalski <sugalskd@@ous.edu>
     for extensive contributions to recent version support,
     development of VMS-specific extensions, and dissemination
     of information about VMS Perl,
  the Stanford Synchrotron Radiation Laboratory and the
     Laboratory of Nuclear Studies at Cornell University for
     the opportunity to test and develop for the AXP,
and to the entire VMSperl group for useful advice and suggestions.  In
addition the perl5-porters deserve credit for their creativity and
d351 1
a351 1
gratitude is due to Larry Wall <larry@@wall.org>, for having the ideas which
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d1 2
a2 3
If you read this file _as_is_, just ignore the equal signs on the left.
This file is written in the POD format (see [.POD]PERLPOD.POD;1) which is
specially designed to be readable as is.
d4 1
a4 1
=head1 NAME
d6 3
a8 12
README.vms - Configuring, building, testing, and installing perl on VMS

=head1 SYNOPSIS

To configure, build, test, and install perl on VMS:

    @@ Configure
    mms
    mms test
    mms install

mmk may be used in place of mms in the last three steps.
d10 4
a13 1
=head1 DESCRIPTION
d15 1
a15 13
=head2 Important safety tip

The build and install procedures have changed significantly from the 5.004
releases!  Make sure you read the "Configuring the Perl Build", "Building 
Perl", and "Installing Perl" sections of this document before you build or 
install.

Also note that, as of Perl version 5.005 and later, an ANSI C compliant 
compiler is required to build Perl.  VAX C is *not* ANSI compliant, as it 
died a natural death some time before the standard was set.  Therefore 
VAX C will not compile perl 5.005.  We are sorry about that.

If you are stuck without DEC C (the VAX C license should be good for DEC C,
d19 1
a19 2

=head2 Introduction
d24 2
a25 2
reasonably emulated. There are some incompatibilities in process handling
(e.g. the fork/exec model for creating subprocesses doesn't do what you
d29 1
a29 1
There are still some unimplemented system functions, and of course we
d31 1
a31 1
to lend a hand we'd love to have you.  Join the Perl Porting Team Now!
d34 1
a34 1
DEC C, and on an AXP using DEC C. If you run into problems with
d37 2
a38 2
There are issues with various versions of DEC C, so if you're not running a
relatively modern version, check the "DEC C issues" section later on in this
d41 1
a41 1
=head2 Other required software
d43 7
a49 19
In addition to VMS and DCL you will need two things:

=over 4

=item 1  A C compiler. 

DEC C or gcc for VMS (AXP or VAX).

=item 2  A make tool. 

DEC's MMS (v2.6 or later), or MadGoat's free MMS
analog MMK (available from ftp.madgoat.com/madgoat) both work
just fine. Gnu Make might work, but it's been so long since
anyone's tested it that we're not sure.  MMK is free though, so
go ahead and use that.

=back

=head2 Additional software that is optional
d52 8
a59 8

=over 4

=item 1  GUNZIP/GZIP.EXE for VMS 

A de-compressor for *.gz and *.tgz files available from a number 
of web/ftp sites.

d66 1
a66 6

=item 2  VMS TAR 

For reading and writing unix tape archives (*.tar files).  Vmstar is also 
available from a number of web/ftp sites.

a69 25

=item 3  UNZIP.EXE for VMS

A combination decompressor and archive reader/writer for *.zip files.  
Unzip is available from a number of web/ftp sites.

    http://www.cdrom.com/pub/infozip/UnZip.html
    http://www.openvms.digital.com/cd/INFO-ZIP/
    ftp://ftp.digital.com/pub/VMS/
    ftp://ftp.openvms.digital.com/
    ftp://ftp.madgoat.com/madgoat/
    ftp://ftp.wku.edu/vms/

=item 4  MOST

Most is an optional pager that is convenient to use with perldoc (unlike 
TYPE/PAGE, MOST can go forward and backwards in a document and supports 
regular expression searching).  Most builds with the slang 
library on VMS.  Most and slang are available from:

    ftp://space.mit.edu/pub/davis/
    ftp://ftp.wku.edu/vms/narnia/most.zip

=back

d71 2
a72 2
different formats).  Many of the useful files from CPAN (the Comprehensive
Perl Archive Network) are in *.tar.gz format (this includes copies of the
d77 4
a80 3
If you want to include socket support, you'll need a TCP/IP stack and either
DEC C, or socket libraries.  See the "Socket Support (optional)" topic 
for more details.
d82 1
a82 1
=head1 Configuring the Perl build
d86 1
a86 1
   @@ Configure
d88 7
a94 25
from the top of an unpacked perl source directory.  You will be asked a 
series of questions, and the answers to them (along with the capabilities 
of your C compiler and network stack) will determine how perl is custom 
built for your machine.

If you have multiple C compilers installed, you'll have your choice of
which one to use.  Various older versions of DEC C had some caveats, so if
you're using a version older than 5.2, check the "DEC C Issues" section.

If you have any symbols or logical names in your environment that may 
interfere with the build or regression testing of perl then configure.com 
will try to warn you about them.  If a logical name is causing
you trouble but is in an LNM table that you do not have write access to
then try defining your own to a harmless equivalence string in a table 
such that it is resolved before the other (e.g. if TMP is defined in the
SYSTEM table then try DEFINE TMP "NL:" or somesuch in your process table) 
otherwise simply deassign the dangerous logical names.  The potentially 
troublesome logicals and symbols are:

    TMP  "LOGICAL"
    LIB  "LOGICAL"
    T    "LOGICAL"
    FOO  "LOGICAL"
    EXT  "LOGICAL"
    TEST "SYMBOL"
d96 3
a98 1
As a handy shortcut, the command:
d100 4
a103 1
    @@ Configure "-des"
d105 1
a105 21
(note the quotation marks and case) will choose reasonable defaults 
automatically (it takes DEC C over Gnu C, DEC C sockets over SOCKETSHR 
sockets, and either over no sockets).  More help with configure.com is 
available from:

    @@ Configure "-h"

See the "Changing compile-time options (optional)" section below to learn
even more details about how to influence the outcome of the important 
configuration step.  If you find yourself reconfiguring and rebuilding 
then be sure to also follow the advice in the "Cleaning up and starting 
fresh (optional)" and the checklist of items in the "CAVEATS" sections 
below.

=head2 Changing compile-time options (optional)

Most of the user definable features of Perl are enabled or disabled in
[.VMS]CONFIG.VMS. There is code in there to Do The Right Thing, but that 
may end up being the wrong thing for you.  Make sure you understand what 
you are doing since inappropriate changes to CONFIG.VMS can render perl 
unbuildable.
d107 1
a107 4
Odds are that there's nothing here to change, unless you're on a version of
VMS later than 6.2 and DEC C later than 5.6.  Even if you are, the correct
values will still be chosen, most likely.  Poking around here should be
unnecessary.
d109 3
a111 3
The one exception is the various *DIR install locations. Changing those
requires changes in genconfig.pl as well.  Be really careful if you need to
change these, as they can cause some fairly subtle problems.
d113 1
a113 28
=head2 Socket Support (optional)

Perl includes a number of functions for IP sockets, which are available if
you choose to compile Perl with socket support.  Since IP networking is an 
optional addition to VMS, there are several different IP stacks available.  
How well integrated they are into the system depends on the stack, your 
version of VMS, and the version of your C compiler.

The most portable solution uses the SOCKETSHR library. In combination with
either UCX or NetLib, this supports all the major TCP stacks (Multinet,
Pathways, TCPWare, UCX, and CMU) on all versions of VMS Perl runs on, with
all the compilers on both VAX and Alpha. The socket interface is also
consistent across versions of VMS and C compilers. It has a problem with
UDP sockets when used with Multinet, though, so you should be aware of
that.

The other solution available is to use the socket routines built into DEC
C. Which routines are available depend on the version of VMS you're
running, and require proper UCX emulation by your TCP/IP vendor.
Relatively current versions of Multinet, TCPWare, Pathway, and UCX all
provide the required libraries--check your manuals or release notes to see
if your version is new enough.

=head1 Building Perl

The configuration script will print out, at the very end, the MMS or MMK
command you need to compile perl.  Issue it (exactly as printed) to start
the build.  
d115 3
a117 11
Once you issue your MMS or MMK command, sit back and wait.  Perl should 
compile and link without a problem.  If a problem does occur check the 
"CAVEATS" section of this document.  If that does not help send some 
mail to the VMSPERL mailing list.  Instructions are in the "Mailing Lists" 
section of this document.

=head1 Testing Perl

Once Perl has built cleanly you need to test it to make sure things work.
This step is very important since there are always things that can go wrong
somehow and yield a dysfunctional Perl for you.
d120 1
a120 1
distribution.  To run the tests, enter the *exact* MMS line you used to
d123 1
a123 1
If the compile command was:
d125 1
a125 1
    MMS
d127 1
a127 1
then the test command ought to be:
d129 1
a129 1
    MMS test
d131 4
a134 4
MMS (or MMK) will run all the tests.  This may take some time, as there are 
a lot of tests.  If any tests fail, there will be a note made on-screen. 
At the end of all the tests, a summary of the tests, the number passed and 
failed, and the time taken will be displayed.
d136 1
a136 1
If any tests fail, it means something is wrong with Perl. If the test suite
d143 2
a144 2
If one or more tests fail, you can get more information on the failure by 
issuing this command sequence:
d146 1
a146 1
    @@ [.VMS]TEST .typ "" "-v" [.subdir]test.T
d153 1
a153 1
    @@ [.VMS]TEST .EXE "" "-v" [.OP]TIME.T
d158 1
a158 8
    MCR []MINIPERL "-V"

Note that -"V" really is a capital V in double quotes. This will dump out a
couple of screens worth of configuration information, and can help us 
diagnose the problem.  If (and only if) that did not work then try enclosing 
the output of:

    MMS printconfig
d160 2
d164 1
a164 6
    @@ [.vms]myconfig

You may also be asked to provide your C compiler version ("CC/VERSION NL:" 
with DEC C, "gcc --version" with GNU CC).  To obtain the version of MMS or 
MMK you are running try "MMS/ident" or "MMK /ident".  The GNU make version 
can be identified with "make --version".
d166 1
a166 1
=head2 Cleaning up and starting fresh (optional)
d169 2
a170 2
first.  There is a procedure to do it--enter the *exact* MMS line you used 
to compile and add "realclean" at the end, like this:
d172 1
a172 1
if the compile command was:
d174 1
a174 1
    MMS
d176 1
a176 1
then the cleanup command ought to be:
d178 1
a178 1
    MMS realclean
d180 2
a181 2
If you do not do this things may behave erratically during the subsequent 
rebuild attempt.  They might not, too, so it is best to be sure and do it.
d183 1
a183 1
=head1 Installing Perl
d188 2
a189 15
=over 4

=item 1

Check your default file protections with

     SHOW PROTECTION /DEFAULT

and adjust if necessary with SET PROTECTION=(code)/DEFAULT.

=item 2

Create a directory somewhere and either run @@perl_setup or 
define the concealed logical PERL_ROOT to point to it by hand. 
For example, 
d191 1
a191 3
    CREATE/DIRECTORY dka200:[perl]
    @@PERL_SETUP
    SHOW LOGICAL PERL_ROOT
d193 1
a193 11
or,

    CREATE/DIRECTORY dka200:[perl]
    DEFINE/TRANS=(CONC,TERM) PERL_ROOT dka200:[perl.]


=item 3

Run the install script via:

    MMS install
d197 1
a197 1
    MMK install
d202 2
a203 1
=back
d205 36
a240 5
The DCL script PERL_SETUP.COM that is written by CONFIGURE.COM
will help you with the definition of PERL_ROOT, PERLSHR and the PERL
Foreign symbol.  Take a look at PERL_SETUP.COM and modify it if you want 
to.  Then copy PERL_SETUP.COM to a place accessible to your perl users.  
For example:
d242 1
a242 1
    COPY PERL_SETUP.COM SYS$LIBRARY: 
d244 2
a245 2
If you want to have everyone on the system have access to perl
then add a line that reads
d247 19
a265 1
    $ @@sys$library:perl_setup
d267 4
a270 1
to SYS$MANAGER:SYLOGIN.COM.
d272 3
a274 9
Two alternatives to the foreign symbol would be to install PERL into 
DCLTABLES.EXE (Check out the section "Installing Perl into DCLTABLES 
(optional)" for more information), or put the image in a 
directory that's in your DCL$PATH (if you're using VMS V6.2 or higher).

An alternative to having PERL_SETUP.COM define the PERLSHR logical name
is to simply copy it into the system shareable library directory with:

    copy perl_root:[000000]perlshr.exe sys$share:
d276 1
a276 21
See also the "INSTALLing images (optional)" section.

=head2 Installing Perl into DCLTABLES (optional)

Execute the following command file to define PERL as a DCL command.
You'll need CMKRNL privilege to install the new dcltables.exe.

    $ create perl.cld
    !
    ! modify to reflect location of your perl.exe
    !
    define verb perl
      image perl_root:[000000]perl.exe
      cliflags (foreign)
    $!
    $ set command perl /table=sys$common:[syslib]dcltables.exe -
     /output=sys$common:[syslib]dcltables.exe
    $ install replace sys$common:[syslib]dcltables.exe
    $ exit

=head2 INSTALLing images (optional)
d280 1
a280 1
a known image.  PERLSHR.EXE is typically larger than 2000 blocks
a284 1
   INSTALL ADD PERL/HEADER
d289 2
a290 2
If your code 'use's modules, check to see if there is a shareable image for
them, too.  In the base perl build, POSIX, IO, Fcntl, Opcode, SDBM_File,
d293 1
a293 1
How much of a win depends on your memory situation, but if you are firing
d295 1
a295 1
it is probably beneficial to INSTALL at least portions of perl.
d300 32
a331 1
=head1 Reporting Bugs
d339 1
a339 1
=head1 CAVEATS
d342 2
a343 25
switches to MMS/MMK when you build. Use *exactly* what the configure.com 
script prints!

The next big gotcha is directory depth.  Perl can create directories four,
five, or even six levels deep during the build, so you don't have to be 
too deep to start to hit the RMS 8 level limit (for versions of VMS prior 
to V7.2 and even with V7.2 on the VAX).  It is best to do

    DEFINE/TRANS=(CONC,TERM) PERLSRC "disk:[dir.dir.dir.perldir.]"
    SET DEFAULT PERLSRC:[000000]

before building in cases where you have to unpack the distribution so deep
(note the trailing period in the definition of PERLSRC).  Perl modules 
from CPAN can be just as bad (or worse), so watch out for them, too. Perl's
configuration script will warn if it thinks you are too deep (at least on 
a VAX or on Alpha versions of VMS prior to 7.2).  But MakeMaker will not 
warn you if you start out building a module too deep in a directory.

Be sure that the process that you use to build perl has a PGFLQ greater
than 100000.  Be sure to have a correct local time zone to UTC offset
defined (in seconds) in the logical name SYS$TIMEZONE_DIFFERENTIAL before
running the regression test suite.  The SYS$MANAGER:UTC$CONFIGURE_TDF.COM 
procedure will help you set that logical for your system but may require 
system privileges.  For example, a location 5 hours west of UTC (such as 
the US East coast while not on daylight savings time) would have:
d345 8
a352 1
    DEFINE SYS$TIMEZONE_DIFFERENTIAL "-18000"
d354 2
a355 2
A final thing that causes trouble is leftover pieces from a failed
build.  If things go wrong make sure you do a "(MMK|MMS|make) realclean"
d358 1
a358 1
=head2 DEC C issues
d360 2
a361 2
Note to DEC C users: Some early versions (pre-5.2, some pre-4. If you're DEC
C 5.x or higher, with current patches if any, you're fine) of the DECCRTL
d363 12
d376 1
a376 25
=over 4

=item - pipes

Newlines are lost on I/O through pipes, causing lines to run together.
This shows up as RMS RTB errors when reading from a pipe.  You can
work around this by having one process write data to a file, and
then having the other read the file, instead of the pipe.  This is
fixed in version 4 of DEC C.

=item - modf()

The modf() routine returns a non-integral value for some values above
INT_MAX; the Perl "int" operator will return a non-integral value in
these cases.  This is fixed in version 4 of DEC C.

=item - ALPACRT ECO

On the AXP, if SYSNAM privilege is enabled, the CRTL chdir() routine
changes the process default device and directory permanently, even
though the call specified that the change should not persist after
Perl exited.  This is fixed by DEC CSC patch ALPACRT04_061 or later.
See also:

    http://ftp.service.digital.com/patches/.new/openvms.html
d378 1
a378 19
=back

Please note that in later versions "DEC C" may also be known as 
"Compaq C".

=head2 GNU issues

It has been a while since the GNU utilities such as GCC or GNU make
were used to build perl on VMS.  Hence they may require a great deal
of source code modification to work again.

    http://slacvx.slac.stanford.edu/HELP/GCC
    http://www.progis.de/
    http://vms.gnu.org/
    http://www.lp.se/products/gnu.html

=head1 Mailing Lists

There are several mailing lists available to the Perl porter.  For VMS
d380 1
a380 1
there is the VMSPERL mailing list.  It is usually a low-volume (10-12
d383 5
a387 6
The subscription address is MAJORDOMO@@PERL.ORG.  Send a mail message with 
just the words SUBSCRIBE VMSPERL in the body of the message.
   
The VMSPERL mailing list address is VMSPERL@@PERL.ORG.  Any mail sent there
gets echoed to all subscribers of the list.  There is a searchable archive of
the list on the web at:
a388 2
    http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/
   
d390 2
a391 6
MAJORDOMO@@PERL.ORG.  Be sure to do so from the subscribed account that 
you are canceling.

=head2 Web sites

Vmsperl pages on the web include:
a392 7
    http://www.sidhe.org/vmsperl/index.html
    http://duphy4.physics.drexel.edu/pub/cgi_info.htmlx
    http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/
    http://www.cpan.org/modules/by-module/VMS/
    http://nucwww.chem.sunysb.edu/htbin/software_list.cgi
    http://www.best.com/~pvhp/vms/
    http://bkfug.kfunigraz.ac.at/~binder/perl.html
d394 1
a394 15
=head1 SEE ALSO

Perl information for users and programmers about the port of perl to VMS is
available from the [.VMS]PERLVMS.POD file that gets installed as L<perlvms>.
For administrators the perlvms document also includes a detailed discussion 
of extending vmsperl with CPAN modules after Perl has been installed.

=head1 AUTHORS

Last revised 25-February-2000 by Peter Prymmer pvhp@@best.com.  
Revised 27-October-1999 by Craig Berry craig.berry@@metamorgs.com.  
Revised 01-March-1999 by Dan Sugalski dan@@sidhe.org.  
Originally by Charles Bailey bailey@@newman.upenn.edu.

=head1 ACKNOWLEDGEMENTS
d397 1
a397 1
bailey@@newman.upenn.edu, who is ultimately responsible for Perl 5.004
d404 1
a404 2

  Tim Adye T.J.Adye@@rl.ac.uk
d406 1
a406 1
  David Denholm denholm@@conmat.phys.soton.ac.uk
d408 1
a408 1
  Mark Pizzolato mark@@infocomm.com
d410 1
a410 1
  Rich Salz rsalz@@bbn.com
d412 1
a412 1
  Peter Prymmer pvhp@@best.com 
d415 1
a415 1
  Dan Sugalski dan@@sidhe.org
a421 3
  John Hasstedt John.Hasstedt@@sunysb.edu
     for VAX VMS V7.2 support

d425 1
a425 1
gratitude is due to Larry Wall larry@@wall.org, for having the ideas which
a429 3

=cut

@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d32 1
a32 1
VAX C will not compile Perl 5.005 or later.  We are sorry about that.
d55 1
a55 2
other compilers, please let us know.  (Note: DEC C was renamed to Compaq C
around version 6.2).
d69 1
a69 1
DEC (now Compaq) C or gcc for VMS (AXP or VAX).
d90 1
a90 2
of web/ftp sites and is distributed on the OpenVMS Freeware CD-ROM 
from Compaq.
d93 5
a97 3
    http://www.openvms.compaq.com/freeware/GZIP/
    ftp://ftp.compaq.com/pub/VMS/
    http://www.crinoid.com/utils/
d102 1
a102 2
available from a number of web/ftp sites and is distributed on the OpenVMS
Freeware CD-ROM from Compaq.
d105 2
a106 2
    http://www.openvms.compaq.com/freeware/VMSTAR/
    ftp://ftp.compaq.com/pub/VMS/
d114 3
a116 3
    http://www.openvms.compaq.com/freeware/INFO-ZIP/
    ftp://ftp.compaq.com/pub/VMS/
    ftp://ftp.openvms.compaq.com/
a129 9
=item 5 GNU PATCH and DIFFUTILS for VMS

Patches to Perl are usually distributed as GNU unified or contextual diffs. 
Such patches are created by the GNU diff program (part of the diffutils
distribution) and applied with GNU patch.  VMS ports of these utilities are
available here:

    http://www.crinoid.com/utils/

d134 4
a137 4
Perl Archive Network) are in *.tar.gz or *.tgz format (this includes copies 
of the source code for perl as well as modules and scripts that you may 
wish to add later) hence you probably want to have GUNZIP.EXE and 
VMSTAR.EXE on your VMS machine.
d181 2
a182 7
sockets, and either over no sockets).  Some options can be given
explicitly on the command line; the following example specifies a 
non-default location for where Perl will be installed:

    @@ Configure "-d" "-Dprefix=dka100:[utils.perl5.]"

More help with configure.com is available from:
d342 13
a354 11
Decide where you want Perl to be installed (unless you have already done so
by using the "prefix" configuration parameter -- see the example in the
"Configuring the Perl build" section).

The DCL script PERL_SETUP.COM that is written by CONFIGURE.COM will help you
with the definition of the PERL_ROOT and PERLSHR logical names and the PERL
foreign command  symbol.  Take a look at PERL_SETUP.COM and modify it if you
want to.  The installation process will execute PERL_SETUP.COM and copy
files to the directory tree pointed to by the PERL_ROOT logical name defined
there, so make sure that you have write access to the parent directory of
what will become the root of your Perl installation.
d371 4
a374 2
Copy PERL_SETUP.COM to a place accessible to your perl users.  

d420 1
a420 1
a known image.  PERLSHR.EXE is typically larger than 2500 blocks
d514 1
a514 1
    http://ftp.service.compaq.com/patches/.new/openvms.html
d539 6
a544 4
To subscribe, send a mail message to VMSPERL-SUBSCRIBE@@PERL.ORG. The VMSPERL
mailing list address is VMSPERL@@PERL.ORG.  Any mail sent there gets echoed
to all subscribers of the list.  There is a searchable archive of the list
on the web at:
d548 3
a550 2
To unsubscribe from VMSPERL send a message to VMSPERL-UNSUBSCRIBE@@PERL.ORG.
Be sure to do so from the subscribed account that you are canceling.
a556 1
    http://www.crinoid.com/
d558 1
a559 1
    http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/
a562 2
    http://lists.perl.org/showlist.cgi?name=vmsperl
    http://archive.develooper.com/vmsperl@@perl.org/
d573 2
a574 3
Revised 5-April-2001 by Craig Berry craigberry@@mac.com.  
Revised 25-February-2000 by Peter Prymmer pvhp@@best.com.  
Revised 27-October-1999 by Craig Berry craigberry@@mac.com.  
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d27 1
a27 2
install.  Also please note other changes in the current release by having
a look at L<perldelta/VMS>.
d34 3
a36 5
If you are stuck without Compaq (formerly DEC) C consider trying Gnu C
instead, though there have been no recent reports of builds using Gnu C. 
There is minimal support for Compaq C++ but this support is not complete;
if you get it working please write to the vmsperl list (for info see
L</"Mailing Lists">).
d39 1
a39 1
=head2 Introduction to Perl on VMS
d62 1
a62 1
=head2 Other required software for Compiling Perl on VMS
d82 1
a82 1
=head2 Additional software that is optional for Perl on VMS
d95 2
a96 1
    http://www.openvms.compaq.com/freeware/
d106 2
a107 1
    http://www.openvms.compaq.com/freeware/
d114 3
a116 2
    http://www.info-zip.org/UnZip.html
    http://www.openvms.compaq.com/freeware/
d119 1
a119 1
    ftp://ftp.process.com/vms-freeware/
d129 1
a129 1
    ftp://ftp.process.com/vms-freeware/narnia/
a138 1
    http://www.openvms.compaq.com/freeware/
a196 11
Note that the installation location would be by default where you unpacked 
the source with a "_ROOT." appended.  For example if you unpacked the perl 
source into:

   DKA200:[PERL-5_10_2...]

Then the PERL_SETUP.COM that gets written out by CONFIGURE.COM will
try to DEFINE your installation PERL_ROOT to be:

   DKA200:[PERL-5_10_2_ROOT.]

d208 1
a208 1
=head2 Changing compile-time options (optional) for Perl on VMS
d211 9
a219 6
configure.com, which processes the hints file config_h.SH.  There is
code in there to Do The Right Thing, but that  may end up being the
wrong thing for you.  Make sure you understand what you are doing since
inappropriate changes to configure.com or config_h.SH can render perl 
unbuildable; odds are that there's nothing in there you'll need to
change.
d225 1
a225 1
=head2 Socket Support (optional) for Perl on VMS
a282 11
The test driver invoked via MMS TEST has a DCL wrapper ([.VMS]TEST.COM) that
downgrades privileges to NETMBX, TMPMBX for the duration of the test run,
and then restores them to their prior state upon completion of testing. 
This is done to ensure that the tests run in a private sandbox and can do no
harm to your system even in the unlikely event something goes badly wrong in
one of the test scripts while running the tests from a privileged account. 
A side effect of this safety precaution is that the account used to run the
test suite must be the owner of the directory tree in which Perl has been
built; otherwise the manipulations of temporary files and directories
attempted by some of the tests will fail.

d298 1
a298 1
that t/op/time failed, then you'd do this:
a301 8
Note that test names are reported in UNIX syntax and relative to the
top-level build directory.  When supplying them individually to the test
driver, you can use either UNIX or VMS syntax, but you must give the path
relative to the [.T] directory and you must also add the .T extension to the
filename.  So, for example if the test lib/Math/Trig fails, you would run:

    @@ [.VMS]TEST .EXE "" -"v" [-.lib.math]trig.t

d323 1
a323 1
=head2 Cleaning up and starting fresh (optional) installing Perl on VMS
d409 1
a409 1
=head2 Installing Perl into DCLTABLES (optional) on VMS
d427 1
a427 1
=head2 INSTALLing Perl images (optional) on VMS
d431 1
a431 1
a known image.  PERLSHR.EXE is typically larger than 3000 blocks
d443 1
a443 2
DCLsym, and Stdio, and other extensions all have shared images that can be
installed /SHARE.
a451 14
=head2 Running h2ph to create perl header files (optional) on VMS

If using DEC C or Compaq C ensure that you have extracted loose versions
of your compiler's header or *.H files.  Be sure to check the contents of:

    SYS$LIBRARY:DECC$RTLDEF.TLB
    SYS$LIBRARY:SYS$LIB_C.TLB
    SYS$LIBRARY:SYS$STARLET_C.TLB

etcetera.

If using GNU cc then also check your GNU_CC:[000000...] tree for the locations
of the GNU cc headers.

d468 2
a469 3
too deep to start to hit the RMS 8 level limit (for ODS 2 volumes which were
common on versions of VMS prior to V7.2 and even with V7.2 on the VAX).  
It is best to do:
d495 1
a495 1
=head2 DEC C issues with Perl on VMS
d525 1
a525 1
    http://ftp.support.compaq.com/patches/.new/openvms.shtml
d532 1
a532 1
=head2 GNU issues with Perl on VMS
d540 1
a542 85
=head2 Floating Point Considerations

Prior to 5.8.0, Perl simply accepted the default floating point options of the
C compiler, namely representing doubles with D_FLOAT on VAX and G_FLOAT on
Alpha.  Single precision floating point values are represented in F_FLOAT
format when either D_FLOAT or G_FLOAT is in use for doubles.  Beginning with
5.8.0, Alpha builds now use IEEE floating point formats by default, which in
VMS parlance are S_FLOAT for singles and T_FLOAT for doubles.  IEEE is not
available on VAX, so F_FLOAT and D_FLOAT remain the defaults for singles and
doubles respectively.  The available non-default options are G_FLOAT on VAX
and D_FLOAT or G_FLOAT on Alpha.

The use of IEEE on Alpha introduces NaN, infinity, and denormalization
capabilities not available with D_FLOAT and G_FLOAT.  When using one of those
non-IEEE formats, silent underflow and overflow are emulated in the conversion
of strings to numbers, but it is preferable to get the real thing by using
IEEE where possible.

Regardless of what floating point format you consider preferable, be aware
that the choice may have an impact on compatibility with external libraries,
such as database interfaces, and with existing data, such as data created with
the C<pack> function and written to disk, or data stored via the Storable
extension.  For example, a C<pack("d", $foo)")> will create a D_FLOAT,
G_FLOAT, or T_FLOAT depending on what your Perl was configured with.  When
written to disk, the value can only be retrieved later by a Perl configured
with the same floating point option that was in effect when it was created.

To obtain a non-IEEE build on Alpha, simply answer no to the "Use IEEE math?"
question during the configuration.  To obtain an option different from the C
compiler default on either VAX or Alpha, put in the option that you want in
answer to the "Any additional cc flags?" question.  For example, to obtain a
G_FLOAT build on VAX, put in C</FLOAT=G_FLOAT>.

=head2 Multinet issues with Perl on VMS

Prior to the release of Perl 5.8.0 it was noted that the regression
test for lib/Net/hostent (in file [.lib.Net]hostent.t) will fail owing
to problems with the hostent structure returned by C calls to either
gethostbyname() or gethostbyaddr() using DEC or Compaq C with a
Multinet TCP/IP stack.  The problem was noted in Multinet 4.3A
using either Compaq C 6.5 or DEC C 6.0, and with Multinet 4.2A
using DEC C 5.2, but could easily affect other versions of Multinet.
Process Software Inc. has acknowledged a bug in the Multinet version 
of UCX$IPC_SHR and has provided an ECO for it. The ECO is called
UCX_LIBRARY_EMULATION-010_A044 and is available from:

    http://www.multinet.process.com/eco.html

As of this writing, the ECO is only available for Multinet versions 
4.3A and later.  You may determine the version of Multinet that you 
are running using the command:

    multinet show /version

from the DCL command prompt.

If the ECO is unavailable for your version of Multinet and you are 
unable to upgrade, you might try using Perl programming constructs 
such as:

    $address = substr($gethostbyname_addr,0,4);

to temporarily work around the problem, or if you are brave
and do not mind the possibility of breaking IPv6 addresses,
you might modify the pp_sys.c file to add an ad-hoc correction
like so:


    --- pp_sys.c;1        Thu May 30 14:42:17 2002
    +++ pp_sys.c        Thu May 30 12:54:02 2002
    @@@@ -4684,6 +4684,10 @@@@
             }
     #endif

    +    if (hent) {
    +        hent->h_length = 4;
    +    }
    +
         if (GIMME != G_ARRAY) {
             PUSHs(sv = sv_newmortal());
             if (hent) {

then re-compile and re-test your perl.  After the installation
of the Multinet ECO you ought to back out any such changes though.

d556 1
a556 1

d560 1
a560 1
=head2 Web sites for Perl on VMS
d569 1
d571 1
a571 1
    http://www-ang.kfunigraz.ac.at/~binder/perl.html
a573 1
    http://www.openvms.compaq.com/openvms/products/ips/apache/csws_modperl.html
d584 1
a584 1
Revised 10-October-2001 by Craig Berry craigberry@@mac.com.  
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d179 6
a184 16
    COMP    "LOGICAL"
    EXT     "LOGICAL"
    FOO     "LOGICAL"
    LIB     "LOGICAL"
    LIST    "LOGICAL"
    MIME    "LOGICAL"
    POSIX   "LOGICAL"
    SYS     "LOGICAL"
    T       "LOGICAL"
    THREAD  "LOGICAL"
    THREADS "LOGICAL"
    TIME    "LOGICAL"
    TMP     "LOGICAL"
    UNICODE "LOGICAL"
    UTIL    "LOGICAL"
    TEST    "SYMBOL"
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@a109 3
Recent versions of VMS tar on ODS-5 volumes may extract tape archive
files with ^. escaped periods in them.  See below for further workarounds.

a153 27
=head1 Unpacking the Perl source code

You may need to set up a foreign symbol for the unpacking utility of choice.

If you unpack a perl source kit with a name containing multiple periods on
an ODS-5 volume using recent versions of vmstar (e.g. V3.4 or later) you may
need to be especially careful in unpacking the tape archive file.  Try to use
the ODS-2 compatability qualifiers such as:

    vmstar /extract/verbose/ods2 perl-V^.VIII^.III.tar

or:

    vmstar -xvof perl-5^.8^.3.tar

If you neglected to use the /ODS2 qualifier or the -o switch then you
could rename the source directory:

    set security/protection=(o:rwed) perl-5^.8^.3.dir
    rename perl-5^.8^.3.dir perl-5_8_3.dir

Perl on VMS as of 5.8.3 does not completely handle extended file
parse styles such as are encountered on ODS-5.  While it can be built,
installed, and run on ODS-5 filesystems; it may encounter
trouble with characters that are otherwise illegal on ODS-2
volumes (notably the ^. escaped period sequence).

a533 6

As noted above ODS-5 escape sequences such as ^. can break the perl
build.  Solutions include renaming files and directories as needed or
being careful to use the -o switch or /ODS2 qualifier with latter
versions of the vmstar utility when unpacking perl or CPAN modules
on ODS-5 volumes.
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@d170 1
a170 1
    vmstar -xvof perl-5^.8^.5.tar
d175 2
a176 2
    set security/protection=(o:rwed) perl-5^.8^.5.dir
    rename perl-5^.8^.5.dir perl-5_8_5.dir
d178 1
a178 1
Perl on VMS as of 5.8.5 does not completely handle extended file
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@d170 1
a170 1
    vmstar -xvof perl-5^.8^.6.tar
d175 2
a176 2
    set security/protection=(o:rwed) perl-5^.8^.6.dir
    rename perl-5^.8^.6.dir perl-5_8_6.dir
d178 1
a178 1
Perl on VMS as of 5.8.6 does not completely handle extended file
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@d170 1
a170 1
    vmstar -xvof perl-5^.8^.8.tar
d175 2
a176 2
    set security/protection=(o:rwed) perl-5^.8^.8.dir
    rename perl-5^.8^.8.dir perl-5_8_8.dir
d178 1
a178 1
Perl on VMS as of 5.8.8 does not completely handle extended file
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d35 3
a37 7
There have been no recent reports of builds using Gnu C, but latent
(and most likely outdated) support for it is still present in various
parts of the sources.  Currently the HP (formerly Compaq, and even 
more formerly DEC) C compiler is the only viable alternative for
building Perl.

There is minimal support for HP C++ but this support is not complete;
d56 5
d73 1
a73 1
HP (formerly Compaq, more formerly DEC) C for VMS (VAX, Alpha, or Itanium).
d95 1
a95 1
from HP.
d97 2
a98 1
    http://www.hp.com/go/openvms/freeware/
d105 1
a105 1
Freeware CD-ROM from HP.
d107 2
a108 1
    http://www.hp.com/go/openvms/freeware/
a112 4
A port of GNU tar is also available as part of the GNV package:

    http://gnv.sourceforge.net/

d119 2
a120 2
    http://www.hp.com/go/openvms/freeware/
    ftp://ftp.hp.com/pub/openvms
d122 1
a122 1
    ftp://ftp.process.com/vms-freeware/fileserv
d142 1
a142 1
    http://www.hp.com/go/openvms/freeware/
d161 4
a164 10
As of version 5.10.0, Perl will still build and run on ODS-2 volumes,
including on VAX, but there are a number of modules whose temporary
files and tests are much happier residing on ODS-5 volumes.  For
example, CPANPLUS will fail most of its tests on an ODS-2 volume because
it includes files with multiple dots that will have been converted to
underscores and the tests will have difficulty finding them.  So your
best bet is to unpack the Perl source kit on an ODS-5 volume using
recent versions of vmstar (e.g. V3.4 or later).  Contrary to advice
provided with previous versions of Perl, do I<not> use the ODS-2
compatability qualifier.  Instead, use a command like the following:
d166 1
a166 1
    vmstar /extract/verbose perl-V^.VIII^.III.tar
d170 1
a170 1
    vmstar -xvf perl-5^.10^.0.tar
d172 2
a173 1
Then rename the top-level source directory like so:
d175 2
a176 2
    set security/protection=(o:rwed) perl-5^.10^.0.dir
    rename perl-5^.10^.0.dir perl-5_10_0.dir
d178 5
a182 7
The reason for this last step is that while filenames with multiple dots
are generally supported by Perl on VMS, I<directory> names with multiple
dots are a special case with special problems because the dot is the
traditional directory delimiter on VMS.  Rudimentary support for
multi-dot directory names is available, but some of the oldest and most
essential parts of Perl (such as searching for and loading library
modules) do not yet fully support the ODS-5 caret-escape syntax.
d270 4
d282 9
a290 1
The default solution available is to use the socket routines built into DEC
a296 23
The other solution uses the SOCKETSHR library. Before VAX/VMS 5.5-2 it was
the most portable solution.  The SOCKETSHR library has not been maintained
since VAX/VMS 5.5-2, and it is not known if will even compile with the ANSI
C that Perl currently requires.  It remains an option for historical reasons,
just in case someone might find it useful.

In combination with either UCX or NetLib, this supported all the major TCP
stacks (Multinet, Pathways, TCPWare, UCX, and CMU) on all versions of VMS
Perl ran on up to VAX/VMS 6.2 and Alpha VMS 1.5 with all the compilers on
both VAX and Alpha. The portion of the socket interface was also consistent
across versions of VMS and C compilers.

It has a problem with UDP sockets when used with Multinet, though, so you
should be aware of that.

As of VAX/VMS 5.5-2 and later, CMU is the only TCP/IP program that requires
socketshr, and the sources have been lost to the most recent CMU bug fixes,
so CMU is limited to OpenVMS/VAX 6.2 or earlier, which is the last release
that binaries for the last released patches are known to exist.

There is currently no official web site for downloading either CMU or
SOCKETSHR; however, copies may be found in the DECUS archives.

d343 1
a343 2
If any tests fail, it means something is wrong with Perl, or at least
with the particular module or feature that reported failure. If the test suite
d523 2
a524 2
If using HP C, ensure that you have extracted loose versions of your 
compiler's header or *.H files.  Be sure to check the contents of:
d743 1
d747 1
a747 1
    http://h71000.www7.hp.com/openvms/products/ips/apache/csws_modperl.html
d758 1
a758 1
Revised 3-December-2007 by Craig Berry craigberry@@mac.com.  
@


1.1.1.12
log
@import perl 5.10.1
@
text
@d24 5
a28 4
For best results, make sure you read the "Configuring the Perl Build",
"Building  Perl", and "Installing Perl" sections of this document before
you build or install.  Also please note other changes in the current
release by having a look at L<perldelta/VMS>.
d76 5
a80 4
HP's MMS may work, but MadGoat's free MMS analog MMK (available from
http://www.kednos.com/kednos/Resources/MMK) has consistently worked
better. Gnu Make might work, but it's been so long since anyone's tested
it that we're not sure.  MMK is free though, so go ahead and use that.
d112 1
a112 1
    http://h71000.www7.hp.com/opensource/gnv.html
d122 1
d142 1
a142 1
    http://www.antinode.info/dec/sw/diffutils.html
d177 1
a177 1
    vmstar -xvf perl-5^.10^.1.tar
d181 2
a182 2
    set security/protection=(o:rwed) perl-5^.10^.1.dir
    rename perl-5^.10^.1.dir perl-5_10_1.dir
d572 1
a572 1
common on versions of VMS prior to V7.2 and even with V7.3 on the VAX).  
d759 2
d771 1
a771 1
available from the [.POD]PERLVMS.POD file that gets installed as L<perlvms>.
d777 5
a781 2
Originally by Charles Bailey bailey@@newman.upenn.edu.  See the git repository
for history.
a813 2
  John Malmberg wb8tyw@@qsl.net
     for ODS-5 filename handling and other modernizations
@


1.1.1.13
log
@Perl 5.12.2 from CPAN
@
text
@d30 1
a30 1
compiler is required to build Perl.  VAX C is I<not> ANSI compliant, as it 
d59 4
a71 3
Various ancient versions of DEC C had some caveats, so if you're using a 
version older than 7.x on Alpha or Itanium or 6.x on VAX, you may need to 
upgrade to get a successful build.
d88 1
a88 1
=item 1  GUNZIP/GZIP for VMS 
d95 1
d112 1
a112 1
=item 3  UNZIP for VMS
d119 12
a130 1
    ftp://ftp.process.com/vms-freeware/fileserv/
d170 5
a174 1
    vmstar -xvf perl-5^.12^.2.tar
d178 2
a179 2
    set security/protection=(o:rwed) perl-5^.12^.2.dir
    rename perl-5^.12^.2.dir perl-5_12_2.dir
d200 4
d332 1
a332 1
distribution.  To run the tests, enter the I<exact> MMS line you used to
d363 1
a363 1
don't be hasty), then the test I<after> the last one displayed failed. Don't
d411 1
a411 1
first.  There is a procedure to do it--enter the I<exact> MMS line you used 
d563 1
a563 1
switches to MMS/MMK when you build. Use I<exactly> what the configure.com 
d583 4
a586 2
build.  Solutions include renaming files and directories as needed 
when unpacking perl or CPAN modules on ODS-5 volumes.
d602 37
d645 1
d647 1
d658 2
a659 3
doubles respectively.  Itanium builds have always used IEEE by default. The 
available non-default options are G_FLOAT on VAX and D_FLOAT or G_FLOAT on 
Alpha or Itanium.
d661 1
a661 1
The use of IEEE on Alpha or Itanium introduces NaN, infinity, and denormalization
d682 52
d759 1
@


1.1.1.14
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
perlvms - Configuring, building, testing, and installing perl on VMS
d155 1
a155 1
compatibility qualifier.  Instead, use a command like the following:
d157 1
a157 1
    vmstar -xvf perl-5^.16^.3.tar
d161 2
a162 2
    set security/protection=(o:rwed) perl-5^.16^.3.dir
    rename perl-5^.16^.3.dir perl-5_16_3.dir
d215 4
a218 3
automatically.  Some options can be given explicitly on the command line;
the following example specifies a non-default location for where Perl
will be installed:
d257 34
a290 3
you choose to compile Perl with socket support.  It does this via the socket
routines built into the CRTL regarless of which TCP/IP stack your system
has.
@


1.1.1.15
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d13 6
a18 4
    @@configure
    mmk
    mmk test
    mmk install
d29 16
d61 1
a61 1
In addition to VMS and DCL you will need three things:
a71 7
There have been no recent reports of builds using Gnu C, but latent
(and most likely outdated) support for it is still present in various
parts of the sources.

There is rudimentary but not quite complete support for HP C++; to try it out,
configure with C<-"Dusecxx" -"Duser_c_flags=/WARN=INFORMATIONAL=NOCTOBUTCONREFM">.

d74 4
a77 15
You will need the free MMS analog MMK (available from
L<http://ftp.endlesssoftware.com.au/mmk/kits/> or 
L<https://github.com/endlesssoftware/mmk>). HP's MMS has not been known to work for
some time as Perl's automatically-generated description files are too complex for it,
but MMS support may return in the future.  Gnu Make might work, but it's been so long
since anyone's tested it that we're not sure.

=item 3  ODS-5 and Extended Parse

All development and testing of Perl on VMS takes place on ODS-5 volumes with
extended parse enabled in the environment via the command C<SET PROCESS/PARSE=EXTENDED>.
Latent support for ODS-2 volumes (including on VAX) is still present, but the number
of components that require ODS-5 features is steadily growing and ODS-2 support may be
completely removed in a future release.

d87 1
a87 1
=item 1  gunzip/gzip for VMS 
d90 4
a93 1
of web/ftp sites such as:
d95 1
a95 2
    L<http://www.antinode.info/dec/sw/gzip.html>
    L<http://vms.process.com/scripts/fileserv/fileserv.com?GZIP>
d97 3
a99 1
=item 2  VMS tar 
d101 1
a101 2
For reading and writing Unix tape archives (*.tar files).  Vmstar is also 
available from a number of sites such as:
d103 2
a104 2
    L<http://www.antinode.info/dec/sw/vmstar.html>
    L<http://vms.process.com/scripts/fileserv/fileserv.com?VMSTAR>
d108 1
a108 1
    L<http://h71000.www7.hp.com/opensource/gnv.html>
d110 1
a110 1
=item 3  unzip for VMS
d115 3
a117 3
    L<http://www.info-zip.org/UnZip.html>
    L<http://www.hp.com/go/openvms/freeware/>
    L<http://vms.process.com/fileserv-software.html>
d119 1
a119 1
=item 5 GNU patch and diffutils for VMS
d126 2
a127 2
    L<http://www.antinode.info/dec/sw/diffutils.html>
    L<http://vms.pdv-systeme.de/users/martinv/gnupatch.zip>
d131 1
a131 1
Please note that unzip and gunzip are not the same thing (they work with
d144 1
a144 11
You may need to set up a foreign symbol for the unpacking utility of
choice.  Once you have done so, use a command like the following to
unpack the archive:

    vmstar -xvf perl-5^.18^.2.tar

Then set default to the top-level source directory like so:

    set default [.perl-5^.18^.2]

and proceed with configuration as described in the next section.
d146 25
d176 1
a176 1
   @@configure.com
d180 1
a180 1
of your C compiler and network stack) will determine how perl is custom-
d184 1
a184 1
interfere with the build or regression testing of perl then F<configure.com> 
d191 1
a191 1
troublesome logicals and symbols include:
d212 1
a212 1
    @@configure "-des"
d219 1
a219 1
    @@configure "-d" "-Dprefix=dka100:[utils.perl5.]"
d225 1
a225 1
   F<DKA200:[PERL-5^.18^.0...]>
d227 1
a227 1
Then the F<PERL_SETUP.COM> that gets written out by F<configure.com> will
d230 1
a230 1
   F<DKA200:[PERL-5^.18^.0_ROOT.]>
d234 1
a234 1
    @@configure "-h"
d236 6
a241 3
If you find yourself reconfiguring and rebuilding  then be sure to also follow
the advice in the "Cleaning up and starting  fresh (optional)" and the checklist
of items in the "CAVEATS" sections below.
d245 1
a245 1
Most of the user-definable features of Perl are enabled or disabled in
d251 1
a251 2
change. Note also that non-default options are tested less than default
options, so you may end up being more of a pioneer than you intend to be.
d269 1
a269 1
mail to the VMSPERL mailing list.  Instructions are in the L<"Mailing Lists"> 
d284 1
a284 1
    MMK
d288 1
a288 1
    MMK test
d290 1
a290 1
MMK (or MMS) will run all the tests.  This may take some time, as there are 
d295 1
a295 1
The test driver invoked via MMK TEST has a DCL wrapper ([.VMS]TEST.COM) that
d317 1
a317 1
    @@[.vms]test .typ "" "-v" [.subdir]test.t
d320 1
a320 1
didn't do anything special, use .EXE), and "[.subdir]test.t" is the test
d324 1
a324 1
    @@ .vms]test .EXE "" "-v" [.OP]TIME.t
d329 1
a329 1
relative to the [.t] directory and you must also add the .t extension to the
d332 1
a332 1
    @@[.vms]test .EXE "" -"v" [-.lib.math]trig.t
d337 1
a337 1
    MCR []MINIPERL "-Ilib" "-V"
d344 1
a344 1
    MMK printconfig
d348 1
a348 1
    @@[.vms]myconfig
d358 1
a358 1
first.  There is a procedure to do it--enter the I<exact> MMK line you used 
d363 1
a363 1
    MMK
d367 1
a367 1
    MMK realclean
d385 1
a385 1
and adjust if necessary with C<SET PROTECTION=(code)/DEFAULT>.
d393 1
a393 1
The DCL script PERL_SETUP.COM that is written by configure.com will help you
d405 4
d416 3
a418 4
Installation will copy F<PERL_SETUP.COM> to the root of your installation
tree.  If you want to give everyone on the system  access to Perl (and you
have, for example, installed to F<dsa0:[utils.perl_root]>) then add a line
that reads:
d420 1
a420 1
    $ @@dsa0:[utils.perl_root]perl_setup
d422 6
a427 2
to F<SYS$MANAGER:SYLOGIN.COM>.  Or for your own use only, simply place
that line in F<SYS$LOGIN:LOGIN.COM>.
d432 6
a437 1
directory that's in your DCL$PATH.
d470 2
a471 2
should be enough for F<PERLSHR.EXE> (/share implies /header and /open), 
while /HEADER should do for FPERL.EXE> (perl.exe is not a shared image).
d483 1
a483 1
to NOT INSTALL F<PERL.EXE> with PRIVs!
d513 20
d553 2
d583 5
a587 5
To obtain a non-IEEE build on Alpha or Itanium, simply answer no to the
"Use IEEE math?" question during the configuration.  To obtain an option
different from the C compiler default on any platform, put in the option that
you want in answer to the "Any additional cc flags?" question.  For example, to
obtain a G_FLOAT build on VAX, put in C</FLOAT=G_FLOAT>.
d601 1
a601 1
    L<http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/>
d610 6
a615 5
    L<http://www.sidhe.org/vmsperl/index.html>
    L<http://www.cpan.org/modules/by-module/VMS/>
    L<http://www.xray.mpe.mpg.de/mailing-lists/vmsperl/>
    L<http://archive.develooper.com/vmsperl@@perl.org/>
    L<http://h71000.www7.hp.com/openvms/products/ips/apache/csws_modperl.html>
@


1.1.1.16
log
@Import perl-5.20.1
@
text
@d145 1
a145 1
    vmstar -xvf perl-5^.20^.1.tar
d149 1
a149 1
    set default [.perl-5^.20^.1]
@


1.1.1.17
log
@Import perl-5.20.2
@
text
@d145 1
a145 1
    vmstar -xvf perl-5^.20^.2.tar
d149 1
a149 1
    set default [.perl-5^.20^.2]
@


