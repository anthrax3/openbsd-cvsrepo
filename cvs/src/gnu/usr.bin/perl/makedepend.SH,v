head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.2
	OPENBSD_6_2_BASE:1.12
	PERL_5_24_2:1.1.1.11
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.9
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	cxJ08BvJA9Pt2PTM;

1.11
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	QP75iYx42Uo7mMxO;

1.10
date	2014.03.24.15.05.13;	author afresh1;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.21;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.35.57;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.21;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.18;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.34.50;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.03.59;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.48.42;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.11.41;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.11.41;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.37.24;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.08.38;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.22.06;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.47;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.30;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.06;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.10.37;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.03.24.14.58.45;	author afresh1;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.11.17.20.52.36;	author afresh1;	state Exp;
branches;
next	1.1.1.11;
commitid	B31cAbBIXiCqnL97;

1.1.1.11
date	2017.08.14.13.45.26;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.12
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#! /bin/sh
case $PERL_CONFIG_SH in
'')
	if test -f config.sh; then TOP=.;
	elif test -f ../config.sh; then TOP=..;
	elif test -f ../../config.sh; then TOP=../..;
	elif test -f ../../../config.sh; then TOP=../../..;
	elif test -f ../../../../config.sh; then TOP=../../../..;
	else
		echo "Can't find config.sh."; exit 1
	fi
	. $TOP/config.sh
	;;
esac
: This forces SH files to create target in same directory as SH file.
: This is so that make depend always knows where to find SH derivatives.
case "$0" in
*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
esac

echo "Extracting makedepend (with variable substitutions)"
rm -f makedepend
$spitshell >makedepend <<!GROK!THIS!
$startsh
# makedepend.SH
#
MAKE=$make
trnl='$trnl'
!GROK!THIS!
$spitshell >>makedepend <<'!NO!SUBS!'

if test -d .depending; then
	echo "$0: Already running, exiting."
	exit 0
fi

mkdir .depending

# This script should be called with 
#     sh ./makedepend MAKE=$(MAKE)
case "$1" in 
	MAKE=*) eval $1; shift ;;
esac

export PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh \$0; kill \$\$)

case $PERL_CONFIG_SH in
'')
	if test -f config.sh; then TOP=.;
	elif test -f ../config.sh; then TOP=..;
	elif test -f ../../config.sh; then TOP=../..;
	elif test -f ../../../config.sh; then TOP=../../..;
	elif test -f ../../../../config.sh; then TOP=../../../..;
	else
		echo "Can't find config.sh."; exit 1
	fi
	. $TOP/config.sh
	;;
esac

# Avoid localized gcc messages
case "$ccname" in
    gcc) LC_ALL=C ; export LC_ALL ;;
esac

# We need .. when we are in the x2p directory if we are using the
# cppstdin wrapper script.
# Put .. and . first so that we pick up the present cppstdin, not
# an older one lying about in /usr/local/bin.
PATH=".$path_sep..$path_sep$PATH"
export PATH

case "$osname" in
amigaos) cat=/bin/cat ;; # must be absolute
esac

$cat /dev/null >.deptmp
$rm -f *.c.c c/*.c.c
if test -f Makefile; then
    rm -f $firstmakefile
    cp Makefile $firstmakefile
    # On QNX, 'cp' preserves timestamp, so $firstmakefile appears
    # to be out of date.  I don't know if OS/2 has touch, so do this:
    case "$osname" in
    os2) ;;
    *) $touch $firstmakefile ;;
    esac
fi
mf=$firstmakefile
if test -f $mf; then
    defrule=`<$mf sed -n		\
	-e '/^\.c\$(OBJ_EXT):.*;/{'	\
	-e    's/\$\*\.c//'		\
	-e    's/^[^;]*;[	 ]*//p'	\
	-e    q				\
	-e '}'				\
	-e '/^\.c\$(OBJ_EXT): *$/{'	\
	-e    N				\
	-e    's/\$\*\.c//'		\
	-e    's/^.*\n[	 ]*//p'		\
	-e    q				\
	-e '}'`
fi
case "$defrule" in
'') defrule='$(CC) -c $(CFLAGS)' ;;
esac

: Create files in UU directory to avoid problems with long filenames
: on systems with 14 character filename limits so file.c.c and file.c
: might be identical
$test -d UU || mkdir UU

$MAKE clist || ($echo "Searching for .c files..."; \
	$echo *.c | $tr ' ' $trnl | $egrep -v '\*' >.clist)
for file in `$cat .clist`; do
# for file in `cat /dev/null`; do
    case "$osname" in
    uwin)     uwinfix="-e s,\\\\\\\\,/,g -e s,\\([a-zA-Z]\\):/,/\\1/,g" ;;
    os2)      uwinfix="-e s,\\\\\\\\,/,g" ;;
    cygwin)   uwinfix="-e s,\\\\\\\\,/,g" ;;
    posix-bc) uwinfix="-e s/\\*POSIX(\\(.*\\))/\\1/" ;;
    vos)      uwinfix="-e s/\#/\\\#/" ;;
    *)        uwinfix="" ;;
    esac
    case "$file" in
    *.c) filebase=`basename $file .c` ;;
    *.y) filebase=`basename $file .y` ;;
    esac
    case "$file" in
    */*) finc="-I`echo $file | sed 's#/[^/]*$##'`" ;;
    *)   finc= ;;
    esac
    $echo "Finding dependencies for $filebase$_o."
    # Below, we strip out all but preprocessor directives.
    # We have to take care of situations like
    #       #if defined(FOO) BAR   /* comment line 1
    #                                 more comment lines */
    # If we just delete text starting from the '/*' to the end of line, we will
    # screw up cases like
    #      #if defined(FOO)    /* comment */ \
    #          && defined(BAR) /* comment */ \
    #          && defined(BAZ) /* comment */ \
    #               etc.
    # Also, in lines like
    #      #defined FOO(a,b)    a/**/b
    # the comment may be important and so needs to be retained.
    # This code processes the single-line comments first; it assumes there is
    # at most one straightforward comment per continued preprocessor line,
    # replacing each non-empty comment (and its surrounding white space) by a
    # single space.  (sed only has a greedy '*' quantifier, so this doesn't
    # work right if there are multiple comments per line, and strings can look
    # like comments to it; both are unlikely in a preprocessor statement.) Any
    # continuation line is joined, and the process repeated on the enlarged
    # line as long as there are continuations.  At the end, if there are any
    # comments remaining, they are either completely empty or are like the
    # first situation.  The latter are just deleted by first deleting to the
    # end of line (including preceding white space) things that start with '/*'
    # and the next char isn't a '*'; then things that start with '/**', but the
    # next char isn't a '/'.  (Subsequent lines of the comment are irrelevant
    # and get dropped.)  At the end, we unjoin very long lines to avoid
    # preprocessor limitations
    ( $echo "#line 2 \"$file\"";                               \
      $sed -n <$file                                           \
	-e "/^${filebase}_init(/q"                             \
        -e ': tstcont'                                         \
	-e '/^[ 	]*#/s|[ 	]*/\*..*\*/[ 	]*| |' \
        -e '/\\$/{'                                            \
            -e 'N'                                             \
            -e 'b tstcont'                                     \
        -e '}'                                                 \
	-e 's/\\\n//g'                                         \
	-e '/^#line/d'                                         \
	-e '/^[ 	]*#/{'                                 \
	    -e 's|[ 	]*/\*[^*].*$||'                        \
	    -e 's|[ 	]*/\*\*[^/].*$||'                      \
            -e 's/.\{255\}/&\\\n/g'                           \
	    -e p                                               \
	-e '}' ) >UU/$file.c

    # We're not sure why this was there; the #endif is extraneous on modern z/OS
    #if [ "$osname" = os390 -a "$file" = perly.c ]; then
    #   $echo '#endif' >>UU/$file.c
    #fi

    if [ "$osname" = os390 ]; then
        $cppstdin $finc -I. $cppflags $cppminus <UU/$file.c |
        $sed \
    	    -e '/^#.*<stdin>/d' \
	    -e '/^#.*"-"/d' \
	    -e '/^#.*git_version\.h/d' \
	    -e 's#\.[0-9][0-9]*\.c#'"$file.c#" \
	    -e 's/^[	 ]*#[	 ]*line/#/' \
	    -e '/^# *[0-9][0-9]* *[".\/]/!d' \
	    -e 's/^.*"\(.*\)".*$/'$filebase'\$(OBJ_EXT): \1/' \
	    -e 's/^# *[0-9][0-9]* \(.*\)$/'$filebase'\$(OBJ_EXT): \1/' \
	    -e 's|: \./|: |' \
	    -e 's|\.c\.c|.c|' $uwinfix | \
        $uniq | $sort | $uniq >> .deptmp
    else
        $cppstdin $finc -I. $cppflags $cppminus <UU/$file.c >.cout 2>.cerr
        $sed \
	    -e '1d' \
	    -e '/^#.*<stdin>/d' \
            -e '/^#.*<builtin>/d' \
            -e '/^#.*<built-in>/d' \
            -e '/^#.*<command line>/d' \
            -e '/^#.*<command-line>/d' \
	    -e '/^#.*"-"/d' \
	    -e '/^#.*"\/.*\/"/d' \
	    -e '/: file path prefix .* never used$/d' \
	    -e '/^#.*git_version\.h/d' \
	    -e 's#\.[0-9][0-9]*\.c#'"$file.c#" \
	    -e 's/^[	 ]*#[	 ]*line/#/' \
	    -e '/^# *[0-9][0-9]* *[".\/]/!d' \
	    -e 's/^.*"\(.*\)".*$/'$filebase'\$(OBJ_EXT): \1/' \
	    -e 's/^# *[0-9][0-9]* \(.*\)$/'$filebase'\$(OBJ_EXT): \1/' \
	    -e 's|: \./|: |' \
           -e 's|\.c\.c|.c|' $uwinfix .cout .cerr| \
        $uniq | $sort | $uniq >> .deptmp
    fi
    echo "$filebase\$(OBJ_EXT): $@@" >> .deptmp
done

$sed <$mf >$mf.new -e '1,/^# AUTOMATICALLY/!d'

if $test -s .deptmp; then
    $echo "Updating $mf..."
    $echo "# If this runs make out of memory, delete /usr/include lines." \
	>> $mf.new
    if [ "$osname" = vos ]; then
        $sed 's|\.incl\.c|.h|' .deptmp >.deptmp.vos
        mv -f .deptmp.vos .deptmp
    fi
    $sed 's|^\(.*\$(OBJ_EXT):\) *\(.*/.*\.c\) *$|\1 \2; '"$defrule \2|" .deptmp \
       >>$mf.new
else
    $MAKE hlist || ($echo "Searching for .h files..."; \
	$echo *.h | $tr ' ' $trnl | $egrep -v '\*' >.hlist)
    $echo "You don't seem to have a proper C preprocessor.  Using grep instead."
    $egrep '^#include ' `cat .clist` `cat .hlist`  >.deptmp
    $echo "Updating $mf..."
    <.clist $sed -n							\
	-e '/\//{'							\
	-e   's|^\(.*\)/\(.*\)\.c|\2\$(OBJ_EXT): \1/\2.c; '"$defrule \1/\2.c|p"	\
	-e   d								\
	-e '}'								\
	-e 's|^\(.*\)\.c|\1\$(OBJ_EXT): \1.c|p' >> $mf.new
    <.hlist $sed -n 's|\(.*/\)\(.*\)|s= \2= \1\2=|p' >.hsed
    <.deptmp $sed -n 's|c:#include "\(.*\)".*$|o: \1|p' | \
       $sed 's|^[^;]*/||' | \
       $sed -f .hsed >> $mf.new
    <.deptmp $sed -n 's|h:#include "\(.*\)".*$|h: \1|p' | \
       $sed -f .hsed >> $mf.new
fi
$rm -f $mf.old
$cp $mf $mf.old
$rm -f $mf
$cp $mf.new $mf
$rm $mf.new
$echo "# WARNING: Put nothing here or make depend will gobble it up!" >> $mf
$rm -rf .deptmp UU .clist .hlist .hsed .cout .cerr
rmdir .depending

!NO!SUBS!
$eunicefix makedepend
chmod +x makedepend
@


1.11
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d144 34
a177 23
    # This code processes these latter situations first; it assumes there is
    # at most one straightforward comment per continued preprocessor line.  (It
    # would be easier to handle more general cases if sed had a non-greedy '*'
    # quantifier; but typically preprocessor directive lines are rather
    # simple.)  The continuation line is joined, and the process repeated on
    # the enlarged line as long as there are continuations.  At the end, if
    # there are any comments remaining, they should be like the first situation,
    # and can just be deleted.  (Subsequent lines of the comment are irrelevant
    # and get dropped.)
    ( $echo "#line 2 \"$file\""; \
      $sed -n <$file \
	-e "/^${filebase}_init(/q" \
        -e ': testcont'               \
	-e '/^[	 ]*#/s|/\*.*\*/||'    \
        -e '/\\$/{'                   \
            -e 'N'                    \
            -e 'b testcont'           \
        -e '}'                        \
        -e 's/\\\n/ /g'               \
	-e '/^#line/d' \
	-e '/^[	 ]*#/{' \
	-e 's|/\*.*$||' \
	-e p \
d180 4
a183 3
    if [ "$osname" = os390 -a "$file" = perly.c ]; then
        $echo '#endif' >>UU/$file.c
    fi
@


1.10
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d42 1
a42 1
	MAKE=*) eval $1 ;;
d209 1
a209 1
    echo "$filebase\$(OBJ_EXT): cflags" >> .deptmp
a213 19
$MAKE shlist || ($echo "Searching for .SH files..."; \
	$echo *.SH | $tr ' ' $trnl | $egrep -v '\*' >.shlist)

# Now extract the dependencies on makedepend.SH and Makefile.SH
# (they should reside in the main Makefile):
rm -f .shlist.old
mv .shlist .shlist.old
$egrep -v '^makedepend\.SH' <.shlist.old >.shlist
rm -f .shlist.old
mv .shlist .shlist.old
$egrep -v '^Makefile\.SH' <.shlist.old >.shlist
rm -f .shlist.old
mv .shlist .shlist.old
$egrep -v '^perl_exp\.SH' <.shlist.old >.shlist
rm -f .shlist.old
mv .shlist .shlist.old
$egrep -v '^config_h\.SH' <.shlist.old >.shlist
rm .shlist.old

a214 4
    for file in `cat .shlist`; do
	$echo `$expr X$file : 'X\(.*\).SH'`: $file $TOP/config.sh \; \
	    $sh $file >> .deptmp
    done
a241 4
    for file in `$cat .shlist`; do
	$echo `$expr X$file : 'X\(.*\).SH'`: $file $TOP/config.sh \; \
	    $sh $file >> $mf.new
    done
d249 1
a249 1
$rm -rf .deptmp UU .shlist .clist .hlist .hsed .cout .cerr
a254 6
case `pwd` in
*SH)
    $rm -f ../makedepend
    ln makedepend ../makedepend
    ;;
esac
@


1.9
log
@Merge in perl 5.10.1
@
text
@d134 20
a153 1
    ( $echo "#line 1 \"$file\""; \
d156 7
d164 1
a164 1
	-e '/^#/{' \
a165 1
	-e 's|\\$||' \
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d153 1
d174 1
d184 1
d216 4
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a85 1
    netbsd) ;;
d130 1
a130 1
    */*) finc="-I`echo $file | sed 's#/[^/]*$##`" ;;
d169 1
d171 1
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d61 5
d144 5
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d2 1
a2 1
case $CONFIGDOTSH in
d32 7
d47 1
a47 1
case $CONFIGDOTSH in
d68 4
d113 8
a120 17
	if [ "$osname" = uwin ]; then
		uwinfix="-e s,\\\\\\\\,/,g -e s,\\([a-zA-Z]\\):/,/\\1/,g"
	else
		if [ "$osname" = os2 ]; then
			uwinfix="-e s,\\\\\\\\,/,g"
		else
			if [ "$archname" = cygwin ]; then
				uwinfix="-e s,\\\\\\\\,/,g"
			else
				if [ "$osname" = posix-bc ]; then
					uwinfix="-e s/\\*POSIX(\\(.*\\))/\\1/"
				else
					uwinfix=
				fi
			fi
		fi
	fi
a139 3
        if [ "$file" = perly.c ]; then
            $echo '#endif' >>UU/$file.c
        fi
d153 1
a153 1
        $cppstdin $finc -I. $cppflags $cppminus <UU/$file.c |
d157 3
d161 1
d168 1
a168 1
	    -e 's|\.c\.c|.c|' $uwinfix | \
d233 2
a234 1
$rm -rf .deptmp UU .shlist .clist .hlist .hsed
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d111 5
a115 1
				uwinfix=
d137 30
a166 2
    if [ "$osname" = os390 -a "$file" = perly.c ]; then
        $echo '#endif' >>UU/$file.c
a167 13
    $cppstdin $finc -I. $cppflags $cppminus <UU/$file.c |
    $sed \
	-e '1d' \
	-e '/^#.*<stdin>/d' \
	-e '/^#.*"-"/d' \
	-e 's#\.[0-9][0-9]*\.c#'"$file.c#" \
	-e 's/^[	 ]*#[	 ]*line/#/' \
	-e '/^# *[0-9][0-9]* *[".\/]/!d' \
	-e 's/^.*"\(.*\)".*$/'$filebase'\$(OBJ_EXT): \1/' \
	-e 's/^# *[0-9][0-9]* \(.*\)$/'$filebase'\$(OBJ_EXT): \1/' \
	-e 's|: \./|: |' \
	-e 's|\.c\.c|.c|' $uwinfix | \
    $uniq | $sort | $uniq >> .deptmp
@


1.3
log
@perl5.005_03 (stock)
@
text
@d2 1
a2 1
case $CONFIG in
d40 1
a40 1
case $CONFIG in
d108 5
a112 1
			uwinfix=
d133 3
d138 1
@


1.2
log
@perl 5.004_04
@
text
@d28 1
d58 1
a58 1
PATH=".:..:$PATH"
d70 1
d99 1
a99 1
	$echo *.c | $tr ' ' '\012' | $egrep -v '\*' >.clist)
d102 9
d119 1
a119 1
    $echo "Finding dependencies for $filebase$obj_ext."
d129 1
a129 1
    $cppstdin $finc -I/usr/local/include -I. $cppflags $cppminus <UU/$file.c |
d139 1
a139 1
	-e 's|\.c\.c|.c|' | \
d146 1
a146 1
	$echo *.SH | $tr ' ' '\012' | $egrep -v '\*' >.shlist)
d150 1
d153 1
d156 1
d159 1
d176 1
a176 1
	$echo *.h | $tr ' ' '\012' | $egrep -v '\*' >.hlist)
@


1.1
log
@Initial revision
@
text
@d1 1
d20 1
d27 1
a27 2
## To use an alternate make, set \$altmake in config.sh.
MAKE=${altmake-make}
d31 6
d63 1
d65 6
d75 1
a75 1
	-e '/^\.c\(\$(OBJ_EXT)\|\.o\):.*;/{'	\
d80 1
a80 1
	-e '/^\.c\(\$(OBJ_EXT)\|\.o\): *$/{'	\
d121 1
d137 2
a138 2
# Now extract the dependency on makedepend.SH
# (it should reside in the main Makefile):
d141 6
d152 1
a152 1
	    /bin/sh $file >> .deptmp
d157 1
a157 1
    $sed 's|^\(.*\(\$(OBJ_EXT)\|\.o\):\) *\(.*/.*\.c\) *$|\1 \3; '"$defrule \2|" .deptmp \
d179 1
a179 1
	    /bin/sh $file >> $mf.new
d184 1
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a0 1
#! /bin/sh
a18 1

d25 2
a26 2
MAKE=$make
trnl='$trnl'
a29 6
# This script should be called with 
#     sh ./makedepend MAKE=$(MAKE)
case "$1" in 
	MAKE=*) eval $1 ;;
esac

d50 1
a50 1
PATH=".$path_sep..$path_sep$PATH"
a55 1
    rm -f $firstmakefile
a56 7
    # On QNX, 'cp' preserves timestamp, so $firstmakefile appears
    # to be out of date.  I don't know if OS/2 has touch, so do this:
    case "$osname" in
    os2) ;;
    netbsd) ;;
    *) $touch $firstmakefile ;;
    esac
d61 1
a61 1
	-e '/^\.c\$(OBJ_EXT):.*;/{'	\
d66 1
a66 1
	-e '/^\.c\$(OBJ_EXT): *$/{'	\
d83 1
a83 1
	$echo *.c | $tr ' ' $trnl | $egrep -v '\*' >.clist)
a85 9
	if [ "$osname" = uwin ]; then
		uwinfix="-e s,\\\\\\\\,/,g -e s,\\([a-zA-Z]\\):/,/\\1/,g"
	else
		if [ "$osname" = os2 ]; then
			uwinfix="-e s,\\\\\\\\,/,g"
		else
			uwinfix=
		fi
	fi
d94 1
a94 1
    $echo "Finding dependencies for $filebase$_o."
d104 1
a104 1
    $cppstdin $finc -I. $cppflags $cppminus <UU/$file.c |
a106 1
	-e '/^#.*"-"/d' \
d113 1
a113 1
	-e 's|\.c\.c|.c|' $uwinfix | \
d120 1
a120 1
	$echo *.SH | $tr ' ' $trnl | $egrep -v '\*' >.shlist)
d122 2
a123 3
# Now extract the dependencies on makedepend.SH and Makefile.SH
# (they should reside in the main Makefile):
rm -f .shlist.old
a125 9
rm -f .shlist.old
mv .shlist .shlist.old
$egrep -v '^Makefile\.SH' <.shlist.old >.shlist
rm -f .shlist.old
mv .shlist .shlist.old
$egrep -v '^perl_exp\.SH' <.shlist.old >.shlist
rm -f .shlist.old
mv .shlist .shlist.old
$egrep -v '^config_h\.SH' <.shlist.old >.shlist
d131 1
a131 1
	    $sh $file >> .deptmp
d136 1
a136 1
    $sed 's|^\(.*\$(OBJ_EXT):\) *\(.*/.*\.c\) *$|\1 \2; '"$defrule \2|" .deptmp \
d140 1
a140 1
	$echo *.h | $tr ' ' $trnl | $egrep -v '\*' >.hlist)
d158 1
a158 1
	    $sh $file >> $mf.new
a162 1
$rm -f $mf
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d2 1
a2 1
case $CONFIGDOTSH in
d40 1
a40 1
case $CONFIGDOTSH in
d108 1
a108 5
			if [ "$archname" = cygwin ]; then
				uwinfix="-e s,\\\\\\\\,/,g"
			else
				uwinfix=
			fi
a128 3
    if [ "$osname" = os390 -a "$file" = perly.c ]; then
        $echo '#endif' >>UU/$file.c
    fi
a130 1
	-e '1d' \
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d111 1
a111 5
				if [ "$osname" = posix-bc ]; then
					uwinfix="-e s/\\*POSIX(\\(.*\\))/\\1/"
				else
					uwinfix=
				fi
d133 2
a134 30
    if [ "$osname" = os390 ]; then
        if [ "$file" = perly.c ]; then
            $echo '#endif' >>UU/$file.c
        fi
        $cppstdin $finc -I. $cppflags $cppminus <UU/$file.c |
        $sed \
    	    -e '/^#.*<stdin>/d' \
	    -e '/^#.*"-"/d' \
	    -e 's#\.[0-9][0-9]*\.c#'"$file.c#" \
	    -e 's/^[	 ]*#[	 ]*line/#/' \
	    -e '/^# *[0-9][0-9]* *[".\/]/!d' \
	    -e 's/^.*"\(.*\)".*$/'$filebase'\$(OBJ_EXT): \1/' \
	    -e 's/^# *[0-9][0-9]* \(.*\)$/'$filebase'\$(OBJ_EXT): \1/' \
	    -e 's|: \./|: |' \
	    -e 's|\.c\.c|.c|' $uwinfix | \
        $uniq | $sort | $uniq >> .deptmp
    else
        $cppstdin $finc -I. $cppflags $cppminus <UU/$file.c |
        $sed \
	    -e '1d' \
	    -e '/^#.*<stdin>/d' \
	    -e '/^#.*"-"/d' \
	    -e 's#\.[0-9][0-9]*\.c#'"$file.c#" \
	    -e 's/^[	 ]*#[	 ]*line/#/' \
	    -e '/^# *[0-9][0-9]* *[".\/]/!d' \
	    -e 's/^.*"\(.*\)".*$/'$filebase'\$(OBJ_EXT): \1/' \
	    -e 's/^# *[0-9][0-9]* \(.*\)$/'$filebase'\$(OBJ_EXT): \1/' \
	    -e 's|: \./|: |' \
	    -e 's|\.c\.c|.c|' $uwinfix | \
        $uniq | $sort | $uniq >> .deptmp
d136 13
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d2 1
a2 1
case $PERL_CONFIG_SH in
a31 7
if test -d .depending; then
	echo "$0: Already running, exiting."
	exit 0
fi

mkdir .depending

d40 1
a40 1
case $PERL_CONFIG_SH in
a60 4
case "$osname" in
amigaos) cat=/bin/cat ;; # must be absolute
esac

d102 17
a118 8
    case "$osname" in
    uwin)     uwinfix="-e s,\\\\\\\\,/,g -e s,\\([a-zA-Z]\\):/,/\\1/,g" ;;
    os2)      uwinfix="-e s,\\\\\\\\,/,g" ;;
    cygwin)   uwinfix="-e s,\\\\\\\\,/,g" ;;
    posix-bc) uwinfix="-e s/\\*POSIX(\\(.*\\))/\\1/" ;;
    vos)      uwinfix="-e s/\#/\\\#/" ;;
    *)        uwinfix="" ;;
    esac
d138 3
d154 1
a154 1
        $cppstdin $finc -I. $cppflags $cppminus <UU/$file.c >.cout 2>.cerr
a157 3
            -e '/^#.*<builtin>/d' \
            -e '/^#.*<built-in>/d' \
            -e '/^#.*<command line>/d' \
a158 1
	    -e '/: file path prefix .* never used$/d' \
d165 1
a165 1
           -e 's|\.c\.c|.c|' $uwinfix .cout .cerr| \
d230 1
a230 2
$rm -rf .deptmp UU .shlist .clist .hlist .hsed .cout .cerr
rmdir .depending
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@a60 5
# Avoid localized gcc messages
case "$ccname" in
    gcc) LC_ALL=C ; export LC_ALL ;;
esac

a138 5

    if [ "$osname" = os390 -a "$file" = perly.c ]; then
        $echo '#endif' >>UU/$file.c
    fi

@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d86 1
d131 1
a131 1
    */*) finc="-I`echo $file | sed 's#/[^/]*$##'`" ;;
a169 1
            -e '/^#.*<command-line>/d' \
a170 1
	    -e '/^#.*"\/.*\/"/d' \
@


1.1.1.8
log
@import perl 5.10.1
@
text
@a152 1
	    -e '/^#.*git_version\.h/d' \
a172 1
	    -e '/^#.*git_version\.h/d' \
a181 1
    echo "$filebase\$(OBJ_EXT): cflags" >> .deptmp
a212 4
    if [ "$osname" = vos ]; then
        $sed 's|\.incl\.c|.h|' .deptmp >.deptmp.vos
        mv -f .deptmp.vos .deptmp
    fi
@


1.1.1.9
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d134 1
a134 20
    # Below, we strip out all but preprocessor directives.
    # We have to take care of situations like
    #       #if defined(FOO) BAR   /* comment line 1
    #                                 more comment lines */
    # If we just delete text starting from the '/*' to the end of line, we will
    # screw up cases like
    #      #if defined(FOO)    /* comment */ \
    #          && defined(BAR) /* comment */ \
    #          && defined(BAZ) /* comment */ \
    #               etc.
    # This code processes these latter situations first; it assumes there is
    # at most one straightforward comment per continued preprocessor line.  (It
    # would be easier to handle more general cases if sed had a non-greedy '*'
    # quantifier; but typically preprocessor directive lines are rather
    # simple.)  The continuation line is joined, and the process repeated on
    # the enlarged line as long as there are continuations.  At the end, if
    # there are any comments remaining, they should be like the first situation,
    # and can just be deleted.  (Subsequent lines of the comment are irrelevant
    # and get dropped.)
    ( $echo "#line 2 \"$file\""; \
a136 7
        -e ': testcont'               \
	-e '/^[	 ]*#/s|/\*.*\*/||'    \
        -e '/\\$/{'                   \
            -e 'N'                    \
            -e 'b testcont'           \
        -e '}'                        \
        -e 's/\\\n/ /g'               \
d138 1
a138 1
	-e '/^[	 ]*#/{' \
d140 1
@


1.1.1.10
log
@Import perl-5.20.1
@
text
@d42 1
a42 1
	MAKE=*) eval $1; shift ;;
d209 1
a209 1
    echo "$filebase\$(OBJ_EXT): $@@" >> .deptmp
d214 19
d234 4
d265 4
d276 1
a276 1
$rm -rf .deptmp UU .clist .hlist .hsed .cout .cerr
d282 6
@


1.1.1.11
log
@Import perl-5.24.2
@
text
@d144 23
a166 34
    # Also, in lines like
    #      #defined FOO(a,b)    a/**/b
    # the comment may be important and so needs to be retained.
    # This code processes the single-line comments first; it assumes there is
    # at most one straightforward comment per continued preprocessor line,
    # replacing each non-empty comment (and its surrounding white space) by a
    # single space.  (sed only has a greedy '*' quantifier, so this doesn't
    # work right if there are multiple comments per line, and strings can look
    # like comments to it; both are unlikely in a preprocessor statement.) Any
    # continuation line is joined, and the process repeated on the enlarged
    # line as long as there are continuations.  At the end, if there are any
    # comments remaining, they are either completely empty or are like the
    # first situation.  The latter are just deleted by first deleting to the
    # end of line (including preceding white space) things that start with '/*'
    # and the next char isn't a '*'; then things that start with '/**', but the
    # next char isn't a '/'.  (Subsequent lines of the comment are irrelevant
    # and get dropped.)  At the end, we unjoin very long lines to avoid
    # preprocessor limitations
    ( $echo "#line 2 \"$file\"";                               \
      $sed -n <$file                                           \
	-e "/^${filebase}_init(/q"                             \
        -e ': tstcont'                                         \
	-e '/^[ 	]*#/s|[ 	]*/\*..*\*/[ 	]*| |' \
        -e '/\\$/{'                                            \
            -e 'N'                                             \
            -e 'b tstcont'                                     \
        -e '}'                                                 \
	-e 's/\\\n//g'                                         \
	-e '/^#line/d'                                         \
	-e '/^[ 	]*#/{'                                 \
	    -e 's|[ 	]*/\*[^*].*$||'                        \
	    -e 's|[ 	]*/\*\*[^/].*$||'                      \
            -e 's/.\{255\}/&\\\n/g'                           \
	    -e p                                               \
d169 3
a171 4
    # We're not sure why this was there; the #endif is extraneous on modern z/OS
    #if [ "$osname" = os390 -a "$file" = perly.c ]; then
    #   $echo '#endif' >>UU/$file.c
    #fi
@


