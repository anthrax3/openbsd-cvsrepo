head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	PERL_5_20_2:1.1.1.15
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.1.1.14.0.4
	OPENBSD_5_6_BASE:1.1.1.14
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.13.0.6
	OPENBSD_5_5_BASE:1.1.1.13
	OPENBSD_5_4:1.1.1.13.0.2
	OPENBSD_5_4_BASE:1.1.1.13
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.1.1.12.0.10
	OPENBSD_5_3_BASE:1.1.1.12
	OPENBSD_5_2:1.1.1.12.0.8
	OPENBSD_5_2_BASE:1.1.1.12
	OPENBSD_5_1_BASE:1.1.1.12
	OPENBSD_5_1:1.1.1.12.0.6
	OPENBSD_5_0:1.1.1.12.0.4
	OPENBSD_5_0_BASE:1.1.1.12
	OPENBSD_4_9:1.1.1.12.0.2
	OPENBSD_4_9_BASE:1.1.1.12
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.1.1.11.0.4
	OPENBSD_4_8_BASE:1.1.1.11
	OPENBSD_4_7:1.1.1.11.0.2
	OPENBSD_4_7_BASE:1.1.1.11
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.1.1.10.0.6
	OPENBSD_4_6_BASE:1.1.1.10
	OPENBSD_4_5:1.1.1.10.0.2
	OPENBSD_4_5_BASE:1.1.1.10
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.1.1.9.0.10
	OPENBSD_4_4_BASE:1.1.1.9
	OPENBSD_4_3:1.1.1.9.0.8
	OPENBSD_4_3_BASE:1.1.1.9
	OPENBSD_4_2:1.1.1.9.0.6
	OPENBSD_4_2_BASE:1.1.1.9
	OPENBSD_4_1:1.1.1.9.0.4
	OPENBSD_4_1_BASE:1.1.1.9
	OPENBSD_4_0:1.1.1.9.0.2
	OPENBSD_4_0_BASE:1.1.1.9
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.1.1.8.0.6
	OPENBSD_3_9_BASE:1.1.1.8
	OPENBSD_3_8:1.1.1.8.0.4
	OPENBSD_3_8_BASE:1.1.1.8
	OPENBSD_3_7:1.1.1.8.0.2
	OPENBSD_3_7_BASE:1.1.1.8
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.1.1.7.0.2
	OPENBSD_3_6_BASE:1.1.1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	cxJ08BvJA9Pt2PTM;

1.4
date	2015.04.25.19.26.15;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	3qGYFVvfrExB70FB;

1.3
date	2015.04.25.19.14.37;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	XRK22kO4se3v2i2I;

1.2
date	2014.11.17.21.00.55;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	LnErp1MFKSuew5Fr;

1.1
date	99.04.29.22.37.06;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.37.06;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.08.33;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.21.57;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.46;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.28;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.12.48;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.45.38;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.16.22;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.47.23;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.04;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.36;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.48.32;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.06.20;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.58.44;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.52.35;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.5
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@$! OpenVMS configuration procedure for Perl -- do not attempt to run under DOS
$ sav_ver = 'F$VERIFY(0)'
$ on control_y then goto clean_up
$! SET VERIFY
$!
$! For example, if you unpacked perl into: [USER.PERL-5n...] then you will 
$! want to cd into the tree and execute Configure:
$!
$! $ SET DEFAULT [USER.PERL5_xxx]
$! $ @@Configure 
$!
$! or
$!
$! $ SET DEFAULT [USER.PERL5_xxx]
$! $ @@Configure "-des"
$!
$! That's it. If you get into a bind trying to build perl on VMS then 
$! definitely read through the README.VMS file.
$! Beyond that send email to vmsperl@@perl.org
$!
$! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$!
$! send suggestions to: 
$!  Dan Sugalski <dan@@sidhe.org>
$! Thank you!!!!
$!
$! Adapted and converted from Larry Wall & Andy Dougherty's
$! "Configure generated by metaconfig 3.0 PL60." by Peter Prymmer
$! (a Bourne sh[ell] script for configuring the installation of perl 
$! on non-VMS systems) in the perl5.002|3 epoch (spring/summer 1996)
$! with much valuable help from Charles Bailey & 
$! the whole VMSPerl crew.
$! Extended and messed about with by Dan Sugalski
$!
$! VMS-isms we will need:
$ echo = "write sys$output "
$ cat  = "type"
$ delete := delete ! local symbol overrides globals with qualifiers
$ gcc_symbol = "gcc"
$ ld = "Link/nodebug"
$ ans = ""
$ macros = ""
$ extra_flags = ""
$ user_c_flags = ""
$ use_ieee_math = "y"
$ be_case_sensitive = "n"
$ shorten_long_symbols = "y"
$ unlink_all_versions = "n"
$ builder = "MMK"
$ use_vmsdebug_perl = "n"
$ use64bitall = "n"
$ use64bitint = "n"
$ uselongdouble = "n"
$ uselargefiles = "y"
$ usestdstat = "n"
$ usesitecustomize = "n"
$ C_Compiler_Replace = "CC="
$ thread_upcalls = "MTU="
$ thread_kernel = "MTK="
$ use_two_pot_malloc = "N"
$ use_pack_malloc = "N"
$ use_debugmalloc = "N"
$ ccflags = ""
$ static_ext = ""
$ dynamic_ext = ""
$ nonxs_ext = ""
$ nonxs_ext2 = ""
$ vms_default_directory_name = F$ENVIRONMENT("DEFAULT")
$ max_allowed_dir_depth = 3  ! e.g. [A.B.PERLxxx] not [A.B.C.PERLxxx]
$! max_allowed_dir_depth = 2 ! e.g. [A.PERLxxx] not [A.B.PERLxxx]
$!
$! Sebastian Bazley's request: close the CONFIG handle with /NOLOG
$! qualifier "just in case" (configure.com is re @@ed in a bad state).
$! This construct was tested to be not a problem as far back as
$! VMS V5.5-2, hopefully earlier versions are OK as well.
$!
$ CLOSE/NOLOG CONFIG
$!
$! Now keep track of open files
$!
$ vms_filcnt = F$GETJPI ("","FILCNT")
$!
$!: compute my invocation name
$ me = F$ENVIRONMENT("PROCEDURE")
$!
$! Many null statements (begin with colon ':') in the Bourne shell version of
$! this script serve as comments/placeholders. I have retained some of the ones
$! that will help you compare this .COM file to the sh version - as well as
$! leave placeholders for future improvements to this .COM file.
$! sfn = VMS "skipped for now"
$!
$!: Proper PATH separator                              !sfn
$!: Proper PATH setting                                !sfn
$!: Sanity checks                                      !sfn "Say '@@''$me''"
$!: On HP-UX, large Configure scripts may exercise a bug in /bin/sh !sfn
$!: Configure runs within the UU subdirectory          !->after find MANIFEST
$!   <big long list of default values (mostly null)>
$!: We must find out about Eunice early                !(?)
$!: list of known cpp symbols, sorted alphabetically   !sfn
$!   al = al + "..."
$!: default library list                               !sfn
$!   <no hints files in use (yet?)>
$!: Extra object files, if any, needed on this platform. !sfn
$!: Possible local include directories to search.      !sfn
$!: Set locincpth to "" in a hint file to defeat local include searches. !sfn
$!locincpth="/usr/local/include /opt/local/include /usr/gnu/include" !sfn
$!locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
$!: no include file wanted by default                  !sfn
$!inclwanted=''                                        !sfn
$!: Possible local library directories to search.      !sfn
$!loclibpth="/usr/local/lib /opt/local/lib /usr/gnu/lib" !sfn
$!loclibpth="$loclibpth /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib" !sfn
$!: general looking path for locating libraries        !sfn
$!glibpth="/lib/pa1.1 /usr/shlib /usr/lib/large /lib /usr/lib" !sfn
$!glibpth="$glibpth $xlibpth /lib/large /usr/lib/small /lib/small" !sfn
$!glibpth="$glibpth /usr/ccs/lib /usr/ucblib /usr/shlib" !sfn
$!: Private path used by Configure to find libraries.  Its value !sfn
$!: is prepended to libpth. This variable takes care of special !sfn
$!: machines, like the mips.  Usually, it should be empty. !sfn
$!plibpth=''                                           !sfn
$!: List of libraries we want.                         !sfn
$!libswanted='net socket inet nsl nm ndbm gdbm dbm db malloc dl' !sfn
$!libswanted="$libswanted ld sun m c cposix posix ndir dir crypt" !sfn
$!libswanted="$libswanted ucb bsd BSD PW x"            !sfn
$!: We probably want to search /usr/shlib before most other libraries. !sfn
$!: This is only used by the lib/ExtUtils/MakeMaker.pm routine extliblist. !sfn
$!glibpth=`echo " $glibpth " | sed -e 's! /usr/shlib ! !'` !sfn
$!glibpth="/usr/shlib $glibpth"                        !sfn
$!: Do not use vfork unless overridden by a hint file. !sfn
$!usevfork=false                                       !sfn
$!: script used to extract .SH files with variable substitutions !sfn
$!: produce awk script to parse command line options   !sfn
$!sfn (assume no sed awk) see below
$!: process the command line options         
$!
$!: set up default values
$ fastread=""
$ reuseval="false"
$ maniskip = "false"
$ IF F$TYPE(config_sh) .EQS. "" THEN config_sh=""
$ alldone=""
$ error=""
$ silent=""
$ extractsh=""
$ override=""
$ knowitall=""
$ ccname="DECC"
$ Dec_C_Version = ""
$ cxxversion = ""
$ use_threads = "F"
$ use_5005_threads = "N"
$ use_ithreads = "N"
$!
$!: option parsing
$ config_args = ""
$ IF (P1 .NES. "")
$ THEN            !one or more switches was thrown
$   i = 1
$   bang = 0
$Param_loop:
$   IF (P'i'.NES."") 
$   THEN
$     bang = bang + 1
$     config_args = config_args + F$FAO(" !AS",P'i')
$   ENDIF
$   i = i + 1
$   IF (i.LT.9) THEN GOTO Param_loop !DCL allows P1..P8
$!
$   i = 1
$Opt_loop:
$   IF (F$EXTRACT(0,1,P'i') .EQS. "-") THEN P'i' = P'i' - "-"
$   IF (F$EXTRACT(0,1,P'i') .EQS. "/") THEN P'i' = P'i' - "/"
$Remove_quotation_mark:
$   P'i' = P'i' - """"
$   IF F$LOCATE("""",P'i') .LT. F$LENGTH(P'i') THEN GOTO Remove_quotation_mark
$   gotopt      = "f" !"alse"
$   gotshortopt = "f" !"alse"
$   IF (F$EXTRACT(0,1,P'i') .EQS. "d")
$   THEN
$     fastread    = "yes"
$     gotopt      = "t" !"rue"
$     P'i'        = P'i' - "d"
$     gotshortopt = "t" !"rue"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "e")
$   THEN
$     alldone = "cont"
$     gotopt = "t"
$     P'i' = P'i' - "e"
$     gotshortopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "f") ! "-f"
$   THEN
$     P'i' = P'i' - "f"
$     config_sh = P'i'
$     IF (F$SEARCH(config_sh).NES."")
$     THEN
$       test_config_sh = F$FILE_ATTRIBUTES(config_sh,"PRO")
$       IF (F$LOCATE("R",test_config_sh).NE.F$LENGTH(test_config_sh)) 
$       THEN
$         config_dflt = "y"
$         CONTINUE !at this point check UIC && if test allows...
$                  !to be continued ?
$       ELSE
$         echo "''me': cannot read config file ''config_sh'."
$         error="true"
$       ENDIF
$     ELSE
$       echo "''me': cannot read config file ''config_sh'."
$       error="true"
$     ENDIF
$     gotopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "h") ! "-h"
$   THEN
$     error = "true"
$     gotopt = "t"
$     P'i' = P'i' - "h"
$     gotshortopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "m")  ! "-m"
$   THEN
$     maniskip = "true"
$     gotopt = "t"
$     P'i' = P'i' - "m"
$     gotshortopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "r")  ! "-r"
$   THEN
$     reuseval = "true"
$     gotopt = "t"
$     P'i' = P'i' - "r"
$     gotshortopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "s") ! "-s"
$   THEN
$     silent = "true"
$     gotopt = "t"
$     P'i' = P'i' - "s"
$     gotshortopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "E") ! "-E"
$   THEN
$     alldone = "exit"
$     gotopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "K") ! "-K"
$   THEN
$     knowitall = "true"
$     gotopt = "t"
$     P'i' = P'i' - "K"
$     gotshortopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "O") ! "-O"
$   THEN
$     override = "true"
$     gotopt = "t"
$     P'i' = P'i' - "O"
$     gotshortopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "S") ! "-S"
$   THEN
$     extractsh = "true"  !VMS?  Yes with munchconfig
$     gotopt = "t"
$     P'i' = P'i' - "S"
$     gotshortopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "D") ! "-D"
$   THEN
$     P'i' = P'i' - "D"
$     IF (F$LOCATE("=",P'i') .EQ. F$LENGTH(P'i'))
$     THEN
$       tmp = P'i' + "=""define"""
$       'tmp'
$       DELETE/SYMBOL tmp
$     ELSE 
$       IF (F$LOCATE("=",P'i') .EQ. (F$LENGTH(P'i') - 1))
$       THEN
$         me = F$PARSE(me,,,"NAME") + F$PARSE(me,,,"TYPE")
$         echo "''me': use ""-Usymbol=val"" not ""-Dsymbol=""."
$         echo "''me': ignoring -D",P'i'
$       ELSE
$          tmp = F$EXTRACT(0,F$LOCATE("=",P'i'),P'i')
$          tmp = tmp + "=""" + F$EXTRACT(F$LOCATE("=",P'i')+1,F$LENGTH(P'i'),P'i') + """"
$         'tmp'
$         DELETE/SYMBOL tmp
$       ENDIF
$     ENDIF
$     gotopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "U") ! "-U"
$   THEN
$     P'i' = P'i' - "U"
$     IF (F$LOCATE("=",P'i') .EQ. F$LENGTH(P'i'))
$     THEN
$       tmp = P'i' + "="""""
$       'tmp'
$       DELETE/SYMBOL tmp
$     ELSE 
$       IF (F$LOCATE("=",P'i') .LT. (F$LENGTH(P'i') - 1))
$       THEN
$         me = F$PARSE(me,,,"NAME") + F$PARSE(me,,,"TYPE")
$         echo "''me': use ""-Dsymbol=val"" not ""-Usymbol=val""."
$         echo "''me': ignoring -U",P'i'
$       ELSE
$         tmp = P'i' + "=""undef"""
$         'tmp'
$         DELETE/SYMBOL tmp
$       ENDIF
$     ENDIF
$     gotopt = "t"
$   ENDIF
$   IF (F$EXTRACT(0,1,P'i') .EQS. "V")
$   THEN
$     me = F$PARSE(me,,,"NAME") + F$PARSE(me,,,"TYPE")
$     echo "''me' generated by an unknown version of EDT."
$     STOP
$     EXIT
$   ENDIF
$   IF .NOT.gotopt 
$   THEN
$     echo "''me': unknown option ",P'i'
$     error = "true"
$   ENDIF
$   IF (F$LENGTH(P'i').GT.0).AND.(gotshortopt) THEN i = i - 1 !clustered switch
$   i = i + 1 
$   IF (i .LT. (bang + 1)) THEN GOTO Opt_loop
$!
$ ENDIF  ! (P1 .NES. "")
$ config_args = F$EDIT(config_args,"TRIM")
$!
$ IF (error)
$ THEN
$   me = F$PARSE(me,,,"DIRECTORY")+ F$PARSE(me,,,"NAME")
$   echo "Usage: @@''me' [-dehmr""EKOSV""] [-fconfig.sh] [""-Dsymbol""] [""-Dsymbol=value""]"
$   echo "                [-Usymbol]  [-Usymbol=]"
$   TYPE SYS$INPUT:
$   DECK
 "-d" : use defaults for all answers.
 "-e" : go on without questioning past the production of config.sh.    *
 "-f" : specify an alternate default configuration file.
 "-h" : print this help message and exit (with an error status).
 "-m" : skip the MANIFEST check to see that all files are present
 "-r" : reuse C symbols value if possible (skips costly nm extraction).*
 "-s" : silent mode, only echoes questions and essential information.
 -"D" : define symbol to have some value:                              *
         -"Dsymbol"         symbol gets the value 'define'
         -"Dsymbol=value"   symbol gets the value 'value'
  -E  : stop at the end of questions, after having produced config.sh. *
  -K  : do not use unless you know what you are doing.
  -O  : let -D and -U override definitions from loaded configuration file. *
  -S  : perform variable substitutions on all .SH files (can mix with -f) *
 -"U" : undefine symbol:                                               *
         -"Usymbol"    symbol gets the value 'undef'
         -"Usymbol="   symbol gets completely empty
  -V  : print version number and exit (with a zero status).
$   EOD
$   echo "%Config-I-VMS, lower case switches must be enclosed"
$   echo "-Config-I-VMS, in double quotation marks, e.g.:"
$   echo "-Config-I-VMS,   @@Configure ""-des"""
$   echo "-Config-I-VMS, * indicates switch may not be fully implemented for VMS."
$   SET DEFAULT 'vms_default_directory_name' !be kind rewind
$   STOP
$   EXIT 3 ! $STATUS = "%X00000003" (informational)
$ ENDIF
$!
$ GOTO Check_silence
$!
$Shut_up:
$ IF F$Mode() .eqs. "BATCH"
$ THEN
$   x = F$GETQUI("CANCEL_OPERATION")        ! clear the deck
$   x = "THIS_JOB"
$   bproc_queue = f$getqui("DISPLAY_QUEUE","QUEUE_NAME","*",x)
$   bproc_entry = f$getqui("DISPLAY_JOB","ENTRY_NUMBER",,x)
$   bproc_name = f$getqui("DISPLAY_JOB","JOB_NAME",,x)
$   bproc_log_spec = f$getqui("DISPLAY_JOB","LOG_SPECIFICATION",,x)
$   STDOUT = F$PARSE(bproc_name, bproc_log_spec, ".LOG")
$   WRITE SYS$OUTPUT "Writing output of entry ''bproc_entry' in queue ''bproc_queue' to a new version of: "
$   WRITE SYS$OUTPUT STDOUT
$   DELETE_/SYMBOL x
$   DELETE_/SYMBOL bproc_queue
$   DELETE_/SYMBOL bproc_entry
$   DELETE_/SYMBOL bproc_name
$   DELETE_/SYMBOL bproc_log_spec
$ ELSE
$   STDOUT = F$TRNLNM("SYS$OUTPUT")
$ ENDIF
$ DEFINE SYS$OUTPUT "_NLA0:"
$ echo4 = "write STDOUT "
$ cat4 = "TYPE/OUTPUT=''STDOUT'"
$ open/write/share=read STDOUT 'STDOUT'
$ RETURN
$!
$Check_silence:
$ IF (silent) 
$ THEN
$   GOSUB Shut_up
$ ELSE
$   echo4 = "write SYS$OUTPUT "
$   cat4 = "TYPE"
$ ENDIF
$!
$!: run the defines and the undefines, if any, but leave the file out there...
$! Unfortunately Configure.COM in DCL is not yet set up to do this - 
$! maybe someday
$!
$!: set package name
$ package = "perl5"
$ packageup = F$EDIT((package - "5"),"UPCASE")
$!
$!: Eunice requires " " instead of "", can you believe it
$ echo ""
$!: Here we go...
$ echo "Beginning of configuration questions for ''package'."
$ echo ""
$!
$!: Some greps do not return status, grrr.
$ contains = "SEARCH"
$!
$!: first determine how to suppress newline on echo command !cant DCL is record oriented
$! echo "Checking ''echo' to see how to suppress newlines..."
$! echo "giving up..."
$! echo "The star should be here-->*"
$!
$!: Now test for existence of everything in MANIFEST
$ echo ""
$ echo4 "First let's make sure your kit is complete.  Checking..."
$ manifestfound = "" 
$ miss_list = "" 
$! Here I assume we are in the [foo.PERLxxx...] tree
$! because the search routine simply does set def [-] if necessary.
$ file_2_find = "MANIFEST" !I hope this one is not in [foo.PERL5xxx.VMS...] 
$Research_manifest:
$ manifestfound = F$SEARCH(file_2_find)
$ IF (manifestfound .EQS. "")
$ THEN
$   IF F$PARSE(F$ENVIRONMENT("DEFAULT"),,,"DIRECTORY",).NES."[000000]"
$   THEN
$     SET DEFAULT [-]
$     GOTO Research_manifest
$   ELSE
$     echo ""
$     echo "There is no MANIFEST file.  I hope your kit is complete !"
$     miss_list = ""
$     GOTO Beyond_manifest
$   ENDIF
$ ELSE
$! MANIFEST. has been found and we have set def'ed there.
$! Time to bail out before it's too late, i.e. too deep.
$! Depth check is unnecessary on Alpha VMS V7.2++ (even for ODS-2).
$   tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$   IF (tmp .GES. "7.2") .AND. (F$GETSYI("HW_MODEL") .GE. 1024) THEN GOTO Beyond_depth_check
$! Depth check also unnecessary on ODS 5 (or later) file systems.
$   tmp = F$INTEGER(F$GETDVI(F$ENVIRONMENT("DEFAULT"),"ACPTYPE") - "F11V")
$   IF (tmp .GE. 5) THEN GOTO Beyond_depth_check
$   IF (F$ELEMENT(max_allowed_dir_depth,".",F$ENVIRONMENT("DEFAULT")).nes.".")
$   THEN
$     TYPE SYS$INPUT:
$     DECK
%Config-E-VMS, ERROR:
 Sorry! It apears as though your perl build sub-directory is already too
 deep into the VMS file system. Please try moving stuff into a shallower 
 directory (or altering the "max_allowed_dir_depth" parameter).
$     EOD
$     echo4 "ABORTING..."
$     SET DEFAULT 'vms_default_directory_name' !be kind rewind
$     STOP
$     EXIT !2 !$STATUS = "%X00000002" (error)
$   ENDIF
$Beyond_depth_check:
$!
$! after finding MANIFEST let's create (but not yet enter) the UU subdirectory
$!
$   IF (manifestfound .NES. "")
$   THEN
$     IF ( F$SEARCH("UU.DIR").EQS."" )
$     THEN
$       CREATE/DIRECTORY [.UU]
$     ELSE
$       IF ( F$SEARCH("[.UU.CXX_REPOSITORY]*.*").NES."" )
$       THEN
$         DELETE/NOLOG/NOCONFIRM [.UU.CXX_REPOSITORY]*.*;*
$         SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) [.UU]CXX_REPOSITORY.DIR
$       ENDIF
$       IF ( F$SEARCH("[.UU]*.*").NES."" ) THEN DELETE/NOLOG/NOCONFIRM [.UU]*.*;*
$     ENDIF
$!: Configure runs within the UU subdirectory
$     SET DEFAULT [.UU]
$!
$! a little redundancy never hurt anybody?
$     file_2_find = "[-]" + file_2_find
$     manifestfound = F$SEARCH(file_2_find)
$!
$     OPEN/WRITE MISSING MISSING.
$!change to "FALSE" if you wish to skip the manifest search 
$!(which after all is rather slow in DCL :-)
$     IF (maniskip)
$     THEN
$       echo "Skipping MANIFEST check as requested"
$     ELSE
$!
$       OPEN/READ CONFIG 'manifestfound'
$Read_loop_manifest:
$       READ/END_OF_FILE = Done_manifest CONFIG line
$! This algorithm turns "foo/bar/baz.c" into "[.foo.bar]baz.c"
$! pvhp@@lns62.lns.cornell.edu 10-JUN-1996 20:31:46
$! 2-MAR-1998 15:46:11 Improved to turn "foo/bar/baz.c.buz"
$! into "[.foo.bar]baz.c_buz as happens with vmstar and unzip
$       line = F$EDIT(line,"TRIM, COMPRESS")
$       file_2_find = F$EXTRACT(0,F$LOCATE(" ",line),line) 
$       IF F$LOCATE("/",file_2_find) .NE. F$LENGTH(file_2_find) 
$       THEN 
$Re_strip_line_manifest:
$         loca = F$LOCATE("/",file_2_find)
$         ante = F$EXTRACT(0,loca,file_2_find)
$         post = F$EXTRACT(loca,F$LENGTH(file_2_find),file_2_find)
$         test_this = ante + "." + (post - "/")
$         IF F$LOCATE("/",test_this) .NE. F$LENGTH(test_this)
$         THEN 
$           file_2_find = ante + "." + (post - "/")
$           GOTO Re_strip_line_manifest
$         ELSE
$           file_2_find = ante + "]" + (post - "/")
$         ENDIF
$           file_2_find = "[-."+file_2_find
$       ELSE
$         file_2_find = "[-]" + file_2_find
$       ENDIF
$!
$       tmp = F$PARSE(file_2_find + ";",,,,"SYNTAX_ONLY")
$       IF F$SEARCH(tmp) .NES. "" THEN file_2_find = tmp
$       dirname = F$EXTRACT(0,F$LOCATE("]",file_2_find),file_2_find) + "]"
$       file_2_find = file_2_find - dirname
$!
$!      may not need double dot check on ODS-5 volumes
$       found = F$SEARCH(dirname + file_2_find)
$       IF found .NES. "" THEN GOTO Read_loop_manifest
$!
$       dots = 0
$Dot_loop:
$       dot_ele = F$ELEMENT(dots,".",file_2_find)
$       IF dot_ele .EQS. "." THEN GOTO Eo_dot_loop
$       IF dots .eq. 0
$       THEN basename = f$extract(0,f$locate(".",file_2_find),file_2_find) + "."
$       ELSE basename = basename + dot_ele + "_"
$       ENDIF
$       dots = dots + 1
$       GOTO dot_loop
$Eo_dot_loop:
$       IF (((f$length(file_2_find)+1) .eq. f$length(basename)) .and. -
             (f$extract(f$length(basename)-1,1,basename) .eqs. "_")) THEN -
          basename = f$extract(0,f$length(basename)-1,basename)
$       file_2_find = dirname + basename
$!
$       found = F$SEARCH(file_2_find)
$       IF (found .EQS. "" .AND. dots .GT. 2)
$       THEN
$! 17-DEC-1999 Improved to turn "[.foo.bar]baz.c_buz" into
$! "[.foo.bar]baz_c.buz" to cover unzipped archives and put
$! "[.foo.bar]baz.c_buz,baz_c.buz" into missing list if neither is found.
$         dotloc = f$locate(".",basename)
$         basename[dotloc,1] := "_"
$         dot_ele = F$ELEMENT(dots - 1,"_",f$extract(dotloc,f$length(basename),basename))
$         basename = -
            f$extract(0,f$length(basename)-(f$length(dot_ele)+1),basename) -
              + "." + dot_ele
$         found = F$SEARCH(dirname + basename)
$         file_2_find = file_2_find + "," + basename
$       ENDIF
$       tildeloc = f$locate("~",basename)
$       IF (found .EQS. "" .AND. tildeloc .LT. f$length(basename))
$       THEN
$         basename[tildeloc,1] := "_"
$         found = F$SEARCH(dirname + basename)
$         file_2_find = file_2_find + "," + basename
$       ENDIF
$       IF (found .EQS. "")
$       THEN
$         WRITE MISSING file_2_find
$         IF ((F$LENGTH(miss_list)+F$LENGTH(file_2_find)).LT.250)
$         THEN
$           miss_list = miss_list + "," + file_2_find
$         ENDIF
$       ENDIF
$       GOTO Read_loop_manifest
$Done_manifest:
$       CLOSE CONFIG
$     ENDIF  !"TRUE"
$     CLOSE MISSING
$   ENDIF ! (manifestfound .NES. "")
$Beyond_manifest:
$   IF (miss_list .NES. "")
$   THEN
$     echo "Some of the files not found include:"
$     cat4 MISSING.
$   ENDIF
$   IF ((miss_list .NES. "").OR.(manifestfound .EQS. ""))
$   THEN
$     TYPE SYS$INPUT:
$     DECK


THIS PACKAGE SEEMS TO BE INCOMPLETE.

You have the option of continuing the configuration process, despite the
distinct possibility that your kit is damaged, by typing 'y'es.  If you
do, don't blame me if something goes wrong.  I advise you to type 'n'o
and contact the author (dan@@sidhe.org)

$     EOD
$     READ SYS$COMMAND/PROMPT="Continue? [n] " ans
$     IF ans
$     THEN
$       echo4 "Continuing..."
$     ELSE
$       echo4 "ABORTING..."
$       GOTO Clean_up
$     ENDIF
$   ELSE
$     echo4 "Looks good..."
$     DELETE/NOLOG/NOCONFIRM MISSING.;
$   ENDIF ! (miss_list .NES. "")
$ ENDIF   ! (manifestfound .EQS. "") ELSE 
$!
$! after finding MANIFEST (see above)
$!: Configure runs within the UU subdirectory 
$!
$!: compute the number of columns on the terminal for proper question formatting
$ IF F$MODE() .EQS. "BATCH"
$! else it winds up being 512 in batch
$ THEN COLUMNS = 80
$ ELSE COLUMNS = F$GETDVI("SYS$OUTPUT","DEVBUFSIZ")
$ ENDIF
$! "-des" sets SYS$OUTPUT to NL: with a DEVBUFSIZ too large (512 again)
$ IF COLUMNS .GT. 210 THEN COLUMNS = 80
$! not sure if this would actually be needed - it hopefully will not hurt
$ IF COLUMNS .LT. 40 THEN COLUMNS = 40
$!
$!: set up the echo used in my read              !sfn
$!: now set up to do reads with possible shell escape and default assignment !sfn
$ GOTO Beyond_myread
$!
$! The sub_rp splitting is intended to handle long symbols such as the dflt for
$! extensions.
$!
$myread:
$ ans = ""
$ len_rp = F$LENGTH(rp)
$   If (.NOT. silent) Then echo ""
$   IF len_rp .GT. 210
$   THEN
$     i_rp = 0
$   rp_loop:
$       sub_rp = F$EXTRACT(i_rp,COLUMNS,rp)
$       i_rp = i_rp + COLUMNS
$       if i_rp .LT. len_rp THEN echo4 "''sub_rp'"
$     IF i_rp .LT. len_rp THEN GOTO rp_loop
$   ELSE
$   sub_rp = rp
$   ENDIF
$ if (fastread)
$ then
$     echo4 "''sub_rp'"
$ else
$     READ SYS$COMMAND/PROMPT="''sub_rp'" ans
$ endif
$   IF (ans .EQS. "&-d")
$   THEN
$     echo4 "(OK, I will run with -d after this question.)"
$   echo ""
$   deferred_fastread =1
$   goto myread
$   ENDIF
$   IF (ans .EQS. "&-s")
$   THEN
$     echo4 "(OK, I will run with -s after this question.)"
$     echo ""
$   deferred_silent = 1
$   goto myread
$     ENDIF
$ if (bool_dflt .nes. "")
$ then
$   if (ans .eqs. "") then ans = bool_dflt
$   ans = f$extract(0,1,f$edit(ans,"collapse,upcase"))
$   if (ans .eqs. "Y" .or. ans .eqs. "1" .or. ans .eqs. "T") 
$   then
$       ans = "Y"
$   else
$       if (ans .eqs. "N" .or. ans .eqs. "0" .or. ans .eqs. "F") 
$       then
$           ans = "N"
$       else
$           echo4 "Input not understood please answer 'Yes' or 'No'"
$           goto myread
$       endif
$   endif
$   bool_dflt = ""
$ else
$   ans = f$edit(ans,"trim,compress")
$   if (ans .eqs. "") then ans = dflt
$   if (f$edit(ans,"upcase") .eqs. "NONE") then ans = ""
$ endif
$ if f$type(deferred_silent) .nes. ""  
$ then
$     silent := true
$     GOSUB Shut_up
$     delete/symbol deferred_silent
$   ENDIF
$ if f$type(deferred_fastread) .nes. ""
$ then 
$   fastread = 1
$   delete/symbol deferred_fastread
$ endif
$ RETURN
$!
$Beyond_myread:
$!
$!: create .config dir to save info across Configure sessions
$ IF ( F$SEARCH("[-]CONFIG.DIR").EQS."" )
$ THEN
$   CREATE/DIRECTORY [-.CONFIG]
$   OPEN/WRITE CONFIG [-.CONFIG]README.
$   WRITE CONFIG -
      "This directory created by Configure to save information that should"
$   WRITE CONFIG -
      "persist across sessions."
$   WRITE CONFIG ""
$   WRITE CONFIG -
      "You may safely delete it if you wish."
$   CLOSE CONFIG
$ ENDIF
$!
$ IF F$TYPE(usedevel) .EQS. "" THEN usedevel = "undef"
$ patchlevel_h = F$SEARCH("[-]patchlevel.h")
$ IF (patchlevel_h.NES."")
$ THEN
$   SEARCH 'patchlevel_h' "define","PERL_VERSION","epoch"/match=and/out=[]ver.out
$   IF .NOT. usedevel .AND. usedevel .NES. "define"
$   THEN
$     OPEN/READ CONFIG []ver.out
$     READ CONFIG line
$     CLOSE CONFIG
$     tmp = F$EDIT(line,"TRIM,COMPRESS")
$     xpatchlevel = F$INTEGER(F$ELEMENT(2," ",tmp))
$     line = xpatchlevel / 2
$     tmp = xpatchlevel - ( line * 2 )
$     IF tmp .NE. 0
$     THEN
$       echo4 "patchlevel is " + F$STRING(xpatchlevel)
$       cat4 SYS$INPUT:
$       DECK
*** WHOA THERE!!! ***

    This is an UNSTABLE DEVELOPMENT release.
    (The patchlevel, is odd--as opposed to even,
     and that signifies a development release.  If you want a
     maintenance release, you want an even-numbered release.)

    Do ***NOT*** install this into production use.
    Data corruption and crashes are possible.

    It is most seriously suggested that you do not continue any further
    unless you want to help in developing and debugging Perl.

$       EOD
$       bool_dflt="n"
$       rp="Do you really want to continue? [''bool_dflt'] "
$       fastread_save = fastread
$       fastread := FALSE
$       GOSUB myread
$       fastread = fastread_save
$       delete/symbol fastread_save
$       IF ans
$       THEN
$         echo4 "Okay, continuing."
$       ELSE
$         echo4 "Okay, bye."
$         DELETE/NOLOG/NOCONFIRM []ver.out;
$         GOTO Clean_up
$       ENDIF
$     ENDIF
$     DELETE/SYMBOL line
$     DELETE/SYMBOL tmp
$   ENDIF
$   DELETE/NOLOG/NOCONFIRM []ver.out;
$ ENDIF
$!: general instructions
$ needman = "true"
$ firsttime = "true"
$ user = F$EDIT(F$GETJPI("","USERNAME"),"TRIM,COLLAPSE")
$ IF .NOT.(F$SEARCH("[-.CONFIG]INSTRUCT.").EQS."")
$ THEN
$   messages = F$ENVIRONMENT("MESSAGE")
$   SET MESSAGE/NOFAC/NOSEV/NOIDENT/NOTEXT
$   contains /NOOUTPUT [-.CONFIG]INSTRUCT. 'user'
$   IF .NOT.($status.EQ.%X08D78053)
$   THEN
$     firsttime=""
$     bool_dflt = "n"
$     rp = "Would you like to see the instructions? [''bool_dflt'] "
$     GOSUB myread
$     if .NOT.ans THEN needman=""
$   ENDIF
$   SET MESSAGE 'messages'
$ ENDIF
$ if (fastread.AND.silent.AND.(alldone.eqs."cont")) THEN needman=""
$!
$ IF (needman)
$ THEN
$   TYPE SYS$INPUT:
$   DECK

This installation shell script will examine your system and ask you questions
to determine how the perl5 package should be installed. If you get
stuck on a question, you may use a ^C or ^Y shell escape to STOP this
process, edit something, then restart this process as you just did.
Many of the questions will have default answers in square
brackets; typing carriage return will give you the default.

$   EOD
$   if (fastread)
$   then
$     echo4 ""
$   else
$     READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
$   endif
$   TYPE SYS$INPUT:
$   DECK

In a hurry? You may run '@@Configure "-d"'.  This will bypass nearly all
the questions and use the computed defaults (or the previous answers provided 
there was already a config.sh file). Type '@@Configure "-h"' for a list of 
options.

$   EOD
$   if (fastread)
$   then
$     echo4 ""
$   else
$     READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
$   endif
$   TYPE SYS$INPUT:
$   DECK

Much effort has been expended to ensure that this shell script will
run on any VMS system.  If despite that it blows up on yours, your
best bet is to edit Configure.com and @@ it again.  Whatever problems
you have with Configure.com, let me (dan@@sidhe.org) know how I blew
it.

$   EOD
$!This installation script affects things in two ways:
$!
$!1) it may do direct variable substitutions on some of the files included
$!   in this kit.
$!2) it builds a config.h file for inclusion in C programs.  You may edit
$!   any of these files as the need arises after running this script.
$!
$!If you make a mistake on a question, there is no easy way to back up to it
$!currently.
$!
$   if (fastread)
$   then
$     echo4 ""
$   else
$     READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
$   endif
$   IF (F$SEARCH("[-.CONFIG]INSTRUCT.").EQS."")
$   THEN
$     OPEN/WRITE CONFIG [-.CONFIG]INSTRUCT.
$     WRITE CONFIG user 
$     CLOSE CONFIG
$   ENDIF
$ ENDIF  !(needman .EQS. "true")
$!
$!: see if sh knows # comments             !sfn
$!: figure out how to guarantee sh startup !sfn
$!: find out where common programs are     !sfn
$!loclist="awk/cat/comm/cp/echo/expr/find/grep/ln/ls/mkdir/rm/sed/sort/touch/tr/uniq"
$!trylist="byacc/cpp/csh/date/egrep/less/line/more/nroff/perl/pg/sendmail/test/uname"
$! echo "I don't know where '$file' is, and my life depends on it."
$! echo "Go find a public domain implementation or fix your PATH setting!"
$! echo ""
$! echo "Don't worry if any of the following aren't found..."
$!: determine whether symbolic links are supported !sfn !jem- further down
$!: see whether [:lower:] and [:upper:] are supported character classes !sfn
$!: set up the translation script tr, must be called with ./tr of course !sfn
$!
$!: Try to determine whether config.sh was made on this system
$!: Get old answers from old config file if Configure was run on the
$!: same system, otherwise use the hints.
$ config_sh_es = "''config_sh'/[-]config.sh/"
$ i = 0
$ max = 3
$Config_sh_look:
$ config_sh = F$ELEMENT(i,"/",config_sh_es)
$ i = i + 1
$ IF (config_sh.NES."/").AND.(config_sh.NES."")
$ THEN
$   configshfound = F$SEARCH(config_sh)
$   IF (configshfound.NES."") THEN GOTO Config_sh_found
$ ENDIF
$ IF (i.LT.max) THEN GOTO Config_sh_look
$ osname = F$EDIT(F$GETSYI("NODE_SWTYPE"),"COLLAPSE")
$ IF (configshfound.EQS."")
$ THEN
$   config_sh = "[-]config.sh" ! the fallback default
$   GOTO Beyond_config_sh
$ ENDIF
$Config_sh_found:
$ IF F$TYPE(osname) .EQS. "" THEN osname = F$EDIT(F$GETSYI("NODE_SWTYPE"),"COLLAPSE")
$ bool_dflt = "n"
$ IF F$TYPE(config_dflt) .NES. "" THEN bool_dflt = config_dflt
$ rp = "Shall I use ''config_sh' for default answers? [''bool_dflt'] "
$ GOSUB myread
$ IF ans
$ THEN
$   echo ""
$   echo "Fetching default answers from ''config_sh'..."
$!
$!  we do our own parsing of the shell-script stuff
$!  ...and only accept symbols if they're in the | delimited list below
$!
$   config_symbols0 ="|archlib|archlibexp|bin|binexp|builddir|cf_email|config_sh|installarchlib|installbin|installman1dir|installman3dir|"
$   config_symbols1 ="|installprivlib|installscript|installsitearch|installsitelib|most|oldarchlib|oldarchlibexp|osname|pager|perl_symbol|perl_verb|"
$   config_symbols2 ="|prefix|privlib|privlibexp|scriptdir|sitearch|sitearchexp|sitebin|sitelib|sitelib_stem|sitelibexp|usecxx|use64bitall|use64bitint|"
$   config_symbols3 ="|usecasesensitive|usedefaulttypes|usedevel|useieee|useithreads|uselongdouble|usemultiplicity|usemymalloc|usedebugging_perl|"
$   config_symbols4 ="|usesecurelog|usethreads|usevmsdebug|usefaststdio|usemallocwrap|unlink_all_versions|uselargefiles|usesitecustomize|"
$   config_symbols5 ="|buildmake|builder|usethreadupcalls|usekernelthreads|useshortenedsymbols|useversionedarchname"
$!  
$   open/read CONFIG 'config_sh'
$   rd_conf_loop:
$     read/end=erd_conf_loop CONFIG line
$     line = f$edit(line,"trim")
$     if line .eqs. "" .or. f$extract(0,1,line) .eqs. "#" then goto rd_conf_loop
$     sym = f$element(0,"=",line)
$     if sym .eqs. "=" then goto rd_conf_loop
$     dsym = "|"+sym+"|"
$     k = 0
$     rd_ck_loop:
$         syms = config_symbols'k'
$         j = f$locate(dsym, syms)
$         if j .lt. f$length(syms) then goto erd_ck_loop
$         k = k + 1
$     if k .lt. 6 then goto rd_ck_loop
$     goto rd_conf_loop
$     erd_ck_loop:
$     val = f$element(1,"=",line)
$     val = f$extract(1,f$length(val)-2,val)
$     write sys$output "''sym' = ""''val'"""
$    'sym' = "''val'"
$   goto rd_conf_loop
$   erd_conf_loop:
$   close CONFIG
$   delete/symbol config_symbols0
$   delete/symbol config_symbols1
$   delete/symbol config_symbols2
$   delete/symbol config_symbols3
$   delete/symbol config_symbols4
$   delete/symbol config_symbols5
$   delete/symbol sym
$   delete/symbol val
$   delete/symbol dsym
$   if f$type(usedebugging_perl) .nes. ""
$   then
$       DEBUGGING = usedebugging_perl
$       delete/symbol usedebugging_perl
$   endif
$!
$ ENDIF
$ if f$type(config_dflt) .nes. "" then DELETE/SYMBOL config_dflt
$!
$!we actually do not have "hints/" for VMS
$!     TYPE SYS$INPUT:
$!     DECK
$!
$!First time through, eh?  I have some defaults handy for the following systems:
$!
$!     EOD
$!     echo "     ","VMS_AXP"
$!     echo "     ","VMS_IA64"
$!        : Now look for a hint file osname_osvers, unless one has been
$!        : specified already.
$!     TYPE SYS$INPUT:
$!
$!You may give one or more space-separated answers, or "none" if appropriate.
$!If your OS version has no hints, DO NOT give a wrong version -- say "none".
$!
$!     READ SYS$COMMAND/PROMPT="Which of these apply, if any? " ans
$!
$Beyond_config_sh:
$!
$!: Restore computed paths          !sfn
$!
$! %Config-I-VMS, a necessary error trap (could be PC running VCL)
$!
$ IF (osname .NES. "VMS")
$ THEN
$   echo4 "Hmm.. I wonder what ''osname' is (?)"
$   TYPE SYS$INPUT:
$   DECK

%Config-E-VMS, ERROR:

           Err, you do not appear to be running VMS!
 This procedure is intended to Configure the building of Perl for VMS.

$   EOD
$   bool_dflt = "n"
$   GOSUB myread
$   IF ans
$   THEN
$     echo4 "Continuing..."
$   ELSE
$     echo4 "ABORTING..."
$     SET DEFAULT 'vms_default_directory_name' !be kind rewind
$     STOP
$     EXIT 2 !$STATUS = "%X00000002" (error)
$   ENDIF
$ ENDIF !(osname .NES./.EQS. "VMS")
$!
$!: who configured the system
$ cf_by = F$EDIT(user,"LOWERCASE")
$ osvers = F$EDIT(F$GETSYI("VERSION"),"TRIM")
$!
$! Peter Prymmer has seen:
$!  "SYS$TIMEZONE_DIFFERENTIAL" = "-46800"  (sic)
$!  "SYS$TIME_ZONE" = "EDT"
$!
$! Charles Lane recommended:
$!  "SYS$TIMEZONE_DIFFERENTIAL" = "-14400"
$!  "NEWS_TIMEZONE" = "-0500"
$!  "ST_TIMEZONE" = "EDT"
$!  "JAN_TIME_ZONE" = "EST  "
$!  "MULTINET_TIMEZONE" = "EST"
$!  "DAYLIGHT_SAVINGS"  = "1"
$!
$! Charles Bailey recommends (in ANU NEWS Doc Jan 1995):
$!   "PMDF_Timezone"
$!   "Multinet_Timezone"
$!   "TCPware_Timezone"
$!   "WIN$Time_Zone"
$!
$! This snippet o' DCL returns a string in default Unix `date` format,
$! and it will prompt to set SYS$TIMEZONE_DIFFERENTIAL.
$!
$ MIN_TZO = -840  !units are minutes here
$ MAX_TZO =  840
$!
$ wkday  = F$EXTRACT(0,3,F$CVTIME(,,"WEEKDAY"))
$ monn   = F$CVTIME(,,"MONTH")
$ mday   = F$EXTRACT(8,2,F$CVTIME(,,"DATE"))
$ hour   = F$CVTIME(,,"HOUR")
$ min    = F$CVTIME(,,"MINUTE")
$ sec    = F$CVTIME(,,"SECOND")
$ year   = F$CVTIME(,,"YEAR")
$!
$ months = "/Jan/Feb/Mar/Apr/May/Jun/Jul/Aug/Sep/Oct/Nov/Dec/"
$ i = 0
$Mon_loop:
$ i = i + 1
$ mon = F$ELEMENT(i,"/",months)
$ IF i.LT.monn THEN GOTO Mon_loop
$!
$ tzneedset = "t"
$ systz = F$TRNLNM("SYS$TIMEZONE_DIFFERENTIAL")
$ IF systz.NES.""
$ THEN
$   tzhour = F$INTEGER(systz)/3600
$   tzmins = F$INTEGER(systz)/60
$   tzminrem = tzmins - tzhour*60
$   IF tzminrem.lt.0 THEN tzminrem = -1*tzminrem  !keeps !2ZL happy
$   IF tzhour.ge.0 
$   THEN signothetime = "+" 
$     IF tzhour.EQ.0.AND.tzminrem.EQ.0 
$     THEN direction = "on GMT/"
$     ELSE direction = "east of "
$     ENDIF
$   ELSE signothetime = "-"
$     tzhour = -1*tzhour                          !keeps !UL happy
$     direction = "west of "
$   ENDIF
$   echo ""
$   echo "According to the setting of your ""SYS$TIMEZONE_DIFFERENTIAL"" (= ''systz')"
$   IF tzminrem.ne.0
$   THEN
$     tzspan = "''tzhour' hours & ''tzminrem' minutes"
$   ELSE
$     tzspan = "''tzhour' hours"
$   ENDIF
$   bool_dflt = "y"
$   echo "Your system is ''tzspan' ''direction'UTC in England."
$   rp = "(''systz') Is this UTC Time Zone Offset correct? [''bool_dflt'] "
$   GOSUB myread
$   IF ans
$   THEN 
$     tzneedset = "f"
$     tzd = systz
$     GOTO Beyond_TimeZone
$   ENDIF
$ ELSE
$   echo ""
$   echo4 """SYS$TIMEZONE_DIFFERENTIAL"" does not appear to be DEFINEd on your system"
$ ENDIF
$!
$TZSet:
$ echo ""
$ echo "Please tell me in hh:mm form what time offset from GMT/UTC in England"
$ echo "you are.  As an example Eastern (US) Standard Time is -5:00 offset, but"
$ echo "Eastern Daylight Time (summer) is -4:00 offset."
$ dflt = "0:00"
$ rp = "Enter the Time Zone offset: [''dflt'] "
$ GOSUB myread
$ ans = F$Edit(ans,"collapse,trim,uncomment,upcase")
$ IF ans.EQS."" THEN ans = dflt
$ tzhour   = F$ELEMENT(0,":","''ans'") !first
$ IF tzhour.EQS."" THEN tzhour = 0
$ tzhour   = F$INTEGER(tzhour)
$ tzminrem = F$ELEMENT(1,":","''ans'") !second
$ IF tzminrem.NES."" 
$ THEN 
$   tzminrem = F$INTEGER(tzminrem)
$   IF F$EXTRACT(0,1,"''ans'") .EQS. "-" THEN tzminrem = tzminrem * -1
$ ELSE 
$   tzminrem = 0
$ ENDIF
$ tzmins = tzhour*60 + tzminrem
$ tzd = F$STRING(tzmins*60)
$ IF tzhour .GE. 0 
$ THEN
$   signothetime = "+" 
$ ELSE
$   tzhour = -1*tzhour       !keeps !UL happy
$   signothetime = "-"
$ ENDIF
$ IF (tzmins.GT.MAX_TZO).OR.(tzmins.LT.MIN_TZO)
$ THEN
$   echo ""
$   echo "%Config-W-VMS-TIMERANGE, Response must be in the range -14:00 to 14:00."
$   goto TZSet
$ ENDIF
$!
$Beyond_TimeZone:
$ tz = f$fao("UTC!AS!UL:!2ZL",signothetime,tzhour,tzminrem)
$ cf_time = "''wkday' ''mon' ''mday' ''hour':''min':''sec' ''tz' ''year'"
$!
$! This quotation from Configure has to be included on VMS:
$!
$ TYPE SYS$INPUT:
$ DECK

There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
$ EOD
$!
$! Determine the architecture name.  For now we just get the base
$! architecture name, which may accumulate various minus sign-delimited
$! appendages later depending on configuration options.  But we need the
$! base name early because not all questions are worth asking on all
$! platforms.
$!
$! Please use F$ELEMENT(0,"-",archname) .EQS. "VMS_AXP" (or
$! "VMS_IA64") from here on to allow cross-platform configuration (e.g.
$! configure a IA64 build on an Alpha).
$!
$ IF (F$GETSYI("HW_MODEL") .LT. 1024 .AND. F$GETSYI("HW_MODEL") .GT. 0)
$ THEN 
$   echo "Sorry, VAX is  no longer supported by this Perl version."
$   echo "Please try Perl 5.22 or earlier"
$   exit 44
$ ELSE
$   IF (F$GETSYI("ARCH_TYPE") .EQ. 2)
$   THEN
$       archname = "VMS_AXP"
$       otherarch = "IA64"
$       arch_type = "ARCH-TYPE=__AXP__"
$   ELSE
$       archname = "VMS_IA64"
$       otherarch = "Alpha"
$       arch_type = "ARCH-TYPE=__IA64__"
$   ENDIF
$   alignbytes="8"
$ ENDIF
$!
$!: set the base revision
$ baserev="5.0"
$ revision = baserev - ".0"
$!: get the patchlevel
$ echo ""
$ echo4 "Getting the current patchlevel..."
$ patchlevel="0"
$ subversion="0"
$ api_revision="0"
$ api_version="0"
$ api_subversion="0"
$ perl_patchlevel="0"
$ patchlevel_h = F$SEARCH("[-]patchlevel.h")
$ IF (patchlevel_h.NES."")
$ THEN
$   got_patch = "false"
$   got_sub   = "false"
$   got_api_revision   = "false"
$   got_api_version    = "false"
$   got_api_subversion = "false"
$   got_perl_patchlevel= "false"
$   OPEN/READONLY CONFIG 'patchlevel_h' 
$Patchlevel_h_loop:
$   READ/END_Of_File=Close_patch/ERROR=Close_patch CONFIG line
$   IF ((F$LOCATE("#define PERL_VERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_patch))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     patchlevel = F$ELEMENT(2," ",line)
$     got_patch = "true"
$   ENDIF
$   IF ((F$LOCATE("#define PERL_SUBVERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_sub))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     subversion = F$ELEMENT(2," ",line)
$     got_sub = "true"
$   ENDIF
$   IF ((F$LOCATE("#define PERL_API_REVISION",line).NE.F$LENGTH(line)).AND.(.NOT.got_api_revision))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     api_revision = F$ELEMENT(2," ",line)
$     got_api_revision = "true"
$   ENDIF
$   IF ((F$LOCATE("#define PERL_API_VERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_api_version))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     api_version = F$ELEMENT(2," ",line)
$     got_api_version = "true"
$   ENDIF
$   IF ((F$LOCATE("#define PERL_API_SUBVERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_api_subversion))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     api_subversion = F$ELEMENT(2," ",line)
$     got_api_subversion = "true"
$   ENDIF
$   IF ((F$LOCATE("""DEVEL",line).NE.F$LENGTH(line)).AND.(.NOT.got_perl_patchlevel))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     perl_patchlevel = F$ELEMENT(1,"""",line)
$     perl_patchlevel = perl_patchlevel - "DEVEL"
$     got_perl_patchlevel = "true"
$   ENDIF
$   IF ((F$LOCATE("""SMOKE",line).NE.F$LENGTH(line)).AND.(.NOT.got_perl_patchlevel))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     perl_patchlevel = F$ELEMENT(1,"""",line)
$     perl_patchlevel = perl_patchlevel - "SMOKE"
$     got_perl_patchlevel = "true"
$   ENDIF
$   IF ((F$LOCATE("""MAINT",line).NE.F$LENGTH(line)).AND.(.NOT.got_perl_patchlevel))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     perl_patchlevel = F$ELEMENT(1,"""",line)
$     perl_patchlevel = perl_patchlevel - "MAINT"
$     got_perl_patchlevel = "true"
$   ENDIF
$   IF (.NOT. got_patch) .OR. -
       (.NOT. got_sub) .OR. - 
       (.NOT. got_api_revision) .OR. -
       (.NOT. got_api_version) .OR. -
       (.NOT. got_api_subversion) .OR. -
       (.NOT. got_perl_patchlevel) -
      THEN GOTO Patchlevel_h_loop
$Close_patch:
$   CLOSE CONFIG
$ ENDIF
$!
$ IF F$SEARCH("[-].patch") .NES. ""
$ THEN
$   SET NOON
$   OPEN/READ PATCH [-].patch
$   READ PATCH line
$   CLOSE PATCH
$   tmp = F$EDIT(line,"TRIM,COMPRESS")
$   IF F$ELEMENT(3, " ", tmp) .NES. "" THEN tmp = F$ELEMENT(3, " ", tmp)
$   SET ON
$   IF tmp .NES. "" THEN perl_patchlevel = tmp
$ ENDIF
$!
$ version_patchlevel_string = "version ''patchlevel' subversion ''subversion'"
$ IF got_perl_patchlevel .AND. perl_patchlevel .NES. "0"
$ THEN
$   version_patchlevel_string = "''version_patchlevel_string' patch ''perl_patchlevel'"
$ ENDIF
$ echo "(You have ''package' ''version_patchlevel_string'.)"
$!
$ version = revision + "_" + patchlevel + "_" + subversion
$!
$!: see if we need a special compiler
$! cc_list = "cc/decc|gcc" !%Config-I-VMS, compiler symbols/commands
$!
$ nocc = "f"
$ vms_cc_dflt = ""
$ vms_cc_available = ""
$!
$ OPEN/WRITE CONFIG ccvms.c
$ WRITE CONFIG "#ifdef __DECC"
$ WRITE CONFIG "#include <stdlib.h>"  !DECC is sooo picky
$ WRITE CONFIG "#endif"
$ WRITE CONFIG "#include <stdio.h>"
$ WRITE CONFIG "int main() {"
$ WRITE CONFIG "#ifdef __DECC"
$ WRITE CONFIG "        printf(""/DECC\n"");"
$ WRITE CONFIG "#else"
$ WRITE CONFIG "        printf(""/VAXC\n"");"
$ WRITE CONFIG "#endif"
$ WRITE CONFIG "        exit(0);"
$ WRITE CONFIG "}"
$ CLOSE CONFIG
$!
$ SET NOON
$ DEFINE/USER_MODE SYS$ERROR _NLA0:
$ DEFINE/USER_MODE SYS$OUTPUT _NLA0:
$ cc/NoObj/list=ccvms.lis ccvms.c
$ tmp = $status
$ SET ON
$ IF (silent) THEN GOSUB Shut_up
$ IF tmp.NE.%X10B90001
$ THEN 
$  IF tmp.NE.%X10000001
$  THEN 
$    nocc = "t"  !%X10000001 is return from gcc
$    GOTO Gcc_initial_check
$  ENDIF
$ ENDIF
$!
$ GOSUB List_Parse
$ IF .NOT.silent THEN echo ""
$ echo "Default ""cc"" is ''line' ''archsufx' ''F$GETSYI("VERSION")'" 
$ IF F$LOCATE("VAX",line).NE.F$LENGTH(line) 
$ THEN 
$   IF .NOT.silent
$   THEN 
$     echo "Will try cc/decc..."
$   ENDIF
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   cc/decc/NoObj/list=ccvms.lis ccvms.c
$   tmp = $status
$   SET ON
$   IF (silent) THEN GOSUB Shut_up
$   IF tmp.NE.%X10B90001
$   THEN
$     echo "Apparently you don't have that one."
$   ELSE
$     GOSUB List_parse
$     echo "You also have: ''line' ''archsufx' ''F$GETSYI("VERSION")'"
$     vms_cc_available = vms_cc_available + "cc/decc "
$   ENDIF
$ ELSE
$   IF (F$LOCATE("DEC",line).NE.F$LENGTH(line)).or.(F$LOCATE("Compaq",line).NE.F$LENGTH(line)) -
    .or.(F$LOCATE("HP",F$EDIT(line,"UPCASE")).NE.F$LENGTH(line))
$   THEN 
$     vms_cc_dflt = "/decc"
$     vms_cc_available = vms_cc_available + "cc/decc "
$   ENDIF
$ ENDIF
$!
$Gcc_initial_check:
$ echo "Checking for gcc"
$ OPEN/WRITE CONFIG gccvers.lis
$ SET NOON
$ DEFINE/USER_MODE SYS$ERROR CONFIG
$ DEFINE/USER_MODE SYS$OUTPUT CONFIG
$ 'gcc_symbol'/noobj/version _nla0:
$ tmp = $status
$ SET ON
$ IF (silent) THEN GOSUB Shut_up
$ CLOSE CONFIG
$ IF (tmp.NE.%X10000001).and.(tmp.ne.%X00030001)
$ THEN
$   echo "Symbol ""''gcc_symbol'"" is not defined. I guess you do not have it."
$   DELETE/NOLOG/NOCONFIRM gccvers.lis;
$   GOTO Cxx_initial_check
$ ENDIF
$ OPEN/READ CONFIG gccvers.lis
$GCC_List_Read:
$ READ/END_OF_FILE=GCC_List_End CONFIG line
$ GOTO GCC_List_Read
$GCC_List_End:
$ CLOSE CONFIG
$ echo line
$ vms_cc_available = vms_cc_available + "''gcc_symbol' "
$ DELETE/NOLOG/NOCONFIRM gccvers.lis;
$!
$Cxx_initial_check:
$!
$! In order to build with the HP C++ compiler, invoke configure.com with "-Dusecxx" on
$! the command line.
$!
$ IF F$TYPE(usecxx) .EQS. "" THEN usecxx := n
$ IF usecxx .OR. usecxx .EQS. "define"
$ THEN
$!
$ echo "Checking for CXX..."
$ OPEN/WRITE CONFIG ccvms.c
$ WRITE CONFIG "#include <iostream>"
$ WRITE CONFIG "int main() {"
$ WRITE CONFIG "#ifdef __DECCXX"
$ WRITE CONFIG "        cout << __DECCXX, endl;"
$ WRITE CONFIG "#else"
$ WRITE CONFIG "        cout << 0,endl;"
$ WRITE CONFIG "#endif"
$! Todo: add G++ identifier check ??
$ WRITE CONFIG "        return(0);"
$ WRITE CONFIG "}"
$ CLOSE CONFIG
$ SET NOON
$ DEFINE/USER_MODE SYS$OUTPUT NL:
$ DEFINE/USER_MODE SYS$ERROR NL:
$ cxx ccvms.c
$ tmp = $status
$ SET ON
$! success $status with:
$! DEC C++ V1.1-001 on VMS VAX V5.5-2
$! DEC C++ V5.6-013 on OpenVMS VAX V7.1
$! DEC C++ V6.1-003 on OpenVMS Alpha V7.1
$! Compaq C++ V6.2-016 for OpenVMS Alpha V7.2-1
$ IF tmp .eq. %X15F60001  
$ THEN
$! Which linker?
$   SET NOON
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   DEFINE/USER_MODE SYS$ERROR NL:
$   link/nodebug ccvms.obj
$   tmp = $status
$   SET ON
$   ! success $status with:
$   ! link && DEC C++ V1.1-001 on VMS VAX V5.5-2
$   ! link && DEC C++ V5.6-013 on OpenVMS VAX V7.1
$   IF tmp .eq. %X10000001
$   THEN
$     ld_try = "Link/nodebug"
$     vms_cc_available = vms_cc_available + "cxx "
$     echo "CXX and LINK are available."
$   ELSE
$     IF F$SEARCH("ccvms.exe") .NES. "" THEN DELETE/NOLOG/NOCONFIRM ccvms.exe;
$     SET NOON
$     DEFINE/USER_MODE SYS$OUTPUT NL:
$     DEFINE/USER_MODE SYS$ERROR NL:
$     cxxlink ccvms.obj
$     tmp = $status
$     SET ON
$     ! success $status with:
$     ! cxxlink && DEC C++ V6.1-003 on OpenVMS Alpha V7.1
$     ! cxxlink && Compaq C++ V6.2-016 for OpenVMS Alpha V7.2-1
$     IF tmp .eq. %X10000001 
$     THEN 
$       ld_try = "cxxlink"
$       vms_cc_available = vms_cc_available + "cxx "
$       echo "CXX and CXXLINK are available."
$     ENDIF
$   ENDIF
$   IF F$SEARCH("ccvms.exe") .NES. "" THEN DELETE/NOLOG/NOCONFIRM ccvms.exe;
$ ELSE
$   echo "Nope."
$ ENDIF
$ DELETE/NOLOG/NOCONFIRM ccvms.c;
$ IF F$SEARCH("ccvms.obj") .NES. "" THEN DELETE/NOLOG/NOCONFIRM ccvms.obj;
$ CALL Cxx_demangler_cleanup
$!
$ ENDIF ! 1 .eq. 0 or 1 .eq. 1
$!
$CC_Cleanup:
$ DELETE/NOLOG/NOCONFIRM ccvms.*;
$CC_Desired:
$!: see if we need a special compiler
$! echo ""
$ echo "Available compiler(s):"
$ echo "( ''vms_cc_available')"
$ IF .NOT.nocc 
$ THEN
$   IF usecxx .OR. usecxx .EQS. "define"
$   THEN
$     dflt = "cxx"
$   ELSE
$     dflt = "cc''vms_cc_dflt'"  !-> "cc" in case first compile went OK
$   ENDIF
$ ELSE
$   dflt = gcc_symbol
$ ENDIF
$ rp = "Use which C compiler? [''dflt'] "
$ GOSUB myread
$ IF ans.NES.""
$ THEN
$   ans = F$EDIT(ans,"TRIM, COMPRESS, LOWERCASE")
$   Mcc = ans
$   IF (F$LOCATE("dec",ans).NE.F$LENGTH(ans)).or.(F$LOCATE("compaq",ans).NE.F$LENGTH(ans)) -
    .or.(F$LOCATE("hp",ans).NE.F$LENGTH(ans))
$   THEN
$     Mcc = "cc/decc"
$! CPQ ?
$     ccname := DEC
$     C_COMPILER_Replace = "CC=cc=''Mcc'"
$   ENDIF
$   IF F$LOCATE("cxx",F$EDIT(ans,"COLLAPSE,LOWERCASE")) .NE. F$LENGTH(ans)
$   THEN
$     Mcc = "cxx"
$     ccname := CXX
$     ld = ld_try
$     C_COMPILER_Replace = "CC=cc=''Mcc'"
$   ELSE ! Not_cxx
$     IF Mcc.NES.dflt
$     THEN
$       IF F$LOCATE("dec",dflt) .NE. F$LENGTH(dflt) .or. -
           F$LOCATE("compaq",dflt) .NE. F$LENGTH(dflt)
$       THEN 
$         C_COMPILER_Replace = "CC=cc=''Mcc'"
$       ELSE
$         ccname := DEC
$       ENDIF
$     ELSE
$       IF Mcc .EQS. "cc/decc"
$       THEN
$         ccname := DEC
$         C_COMPILER_Replace = "CC=cc=''Mcc'"
$       ENDIF
$     ENDIF
$   ENDIF
$ ELSE 
$   Mcc = dflt
$   IF Mcc .EQS. "cc/decc"
$   THEN
$     ccname := DEC
$     C_COMPILER_Replace = "CC=cc=''Mcc'"
$   ENDIF
$   IF Mcc .EQS. "gcc"
$   THEN
$     ccname := GCC
$     C_COMPILER_Replace = "CC=cc=''Mcc'"
$   ENDIF
$ ENDIF
$Decc_Version_check:
$ ccversion=""
$ IF ccname .EQS. "DEC"
$ THEN
$   echo ""
$   echo4 "Checking for the Dec C version number..."
$   OPEN/WRITE CONFIG deccvers.c
$   WRITE CONFIG "#include <stdlib.h>"  !DECC is sooo picky
$   WRITE CONFIG "#include <stdio.h>"
$   WRITE CONFIG "int main() {"
$   WRITE CONFIG "#ifdef __DECC"
$   WRITE CONFIG "#ifdef __DECC_VER"
$   WRITE CONFIG "        printf(""%i\n"", __DECC_VER);"
$   WRITE CONFIG "#else"
$   WRITE CONFIG "        printf(""%i\n"", ""1"");"
$   WRITE CONFIG "#endif"
$   WRITE CONFIG "#endif"
$   WRITE CONFIG "        exit(0);"
$   WRITE CONFIG "}"
$   CLOSE CONFIG
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   'Mcc' deccvers.c
$   tmp = $status
$   IF (silent) THEN GOSUB Shut_up
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   link/nodebug deccvers.obj
$   tmp = $status
$   IF (silent) THEN GOSUB Shut_up
$   OPEN/WRITE CONFIG deccvers.out
$   DEFINE/USER_MODE SYS$ERROR CONFIG
$   DEFINE/USER_MODE SYS$OUTPUT CONFIG
$   mcr []deccvers.exe
$   tmp = $status
$   SET ON
$   CLOSE CONFIG
$   IF (silent) THEN GOSUB Shut_up
$   OPEN/READ CONFIG deccvers.out
$   READ/END_OF_FILE=Dec_c_cleanup CONFIG line
$Dec_c_cleanup:
$   CLOSE CONFIG
$   echo "You are using Dec C ''line'"
$   ccversion = line
$   Dec_C_Version = F$INTEGER(line)
$   echo4 "adding /NOANSI_ALIAS qualifier to ccflags."
$   ccflags = ccflags + "/NOANSI_ALIAS"
$   DELETE/NOLOG/NOCONFIRM deccvers.*;
$ ENDIF
$Gcc_check:
$ gccversion = ""
$ IF ccname .EQS. "GCC"
$ THEN
$   vaxcrtl_olb = F$SEARCH("SYS$LIBRARY:VAXCRTL.OLB")
$   vaxcrtl_exe = F$SEARCH("SYS$SHARE:VAXCRTL.EXE")
$   gcclib_olb  = F$SEARCH("GNU_CC:[000000]GCCLIB.OLB")
$   IF gcclib_olb .EQS. "" 
$   THEN 
$!    These objects/libs come w/ gcc 2.7.2 for AXP:
$     tmp = F$SEARCH("GNU_CC:[000000]libgcc2.olb")
$     IF tmp .NES. "" then gcclib_olb = tmp
$     tmp = F$SEARCH("GNU_CC:[000000]libgcclib.olb")
$     IF tmp .NES. "" 
$     THEN 
$       IF gcclib_olb .EQS. "" 
$       THEN gcclib_olb = tmp
$       ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
$       ENDIF
$     ENDIF
$     tmp = F$SEARCH("SYS$LIBRARY:VAXCRTL.OLB")
$     IF tmp .NES. "" 
$     THEN 
$       IF gcclib_olb .EQS. "" 
$       THEN gcclib_olb = tmp
$       ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
$       ENDIF
$     ENDIF
$     tmp = F$SEARCH("GNU_CC:[000000]crt0.obj")
$     IF tmp .NES. "" 
$     THEN 
$       IF gcclib_olb .EQS. "" 
$       THEN gcclib_olb = tmp
$       ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
$       ENDIF
$     ENDIF
$     IF gcclib_olb .EQS. vaxcrtl_olb THEN gcclib_olb = "" !goofy order of axplibs
$   ELSE
$     gcclib_olb = gcclib_olb + "/lib"
$   ENDIF
$   IF   gcclib_olb .NES. "" .AND. -
     (vaxcrtl_olb .NES. "" .OR. -
      vaxcrtl_exe .NES. "" )
$   THEN
$     echo ""
$     echo4 "Checking for GNU cc in disguise and/or its version number..." !>&4
$     OPEN/WRITE CONFIG gccvers.c
$     WRITE CONFIG "#include <stdio.h>"
$     WRITE CONFIG "int main() {"
$     WRITE CONFIG "#ifdef __GNUC__"
$     WRITE CONFIG "#ifdef __VERSION__"
$     WRITE CONFIG "        printf(""%s\n"", __VERSION__);"
$     WRITE CONFIG "#else"
$     WRITE CONFIG "        printf(""%s\n"", ""1"");"
$     WRITE CONFIG "#endif"
$     WRITE CONFIG "#endif"
$     WRITE CONFIG "        exit(0);"
$     WRITE CONFIG "}"
$     CLOSE CONFIG
$     DEFINE SYS$ERROR _NLA0:
$     DEFINE SYS$OUTPUT _NLA0:
$     'Mcc' gccvers.c
$     tmp = $status
$     DEASSIGN SYS$ERROR _NLA0:
$     DEASSIGN SYS$OUTPUT _NLA0:
$     IF (silent) THEN GOSUB Shut_up
$     DEFINE SYS$ERROR _NLA0:
$     DEFINE SYS$OUTPUT _NLA0:
$     IF vaxcrtl_exe .EQS. ""
$     THEN 
$       IF F$LOCATE("VAXCRTL",gcclib_olb).NE.F$LENGTH(gcclib_olb)
$       THEN 
$         link/nodebug gccvers.obj,'gcclib_olb',SYS$LIBRARY:VAXCRTL/Library
$         tmp = $status
$       ELSE
$         link/nodebug gccvers.obj,'gcclib_olb'
$         tmp = $status
$       ENDIF
$     ELSE
$       OPEN/WRITE CONFIG GCCVERS.OPT
$       WRITE CONFIG "SYS$SHARE:VAXCRTL/SHARE"
$       CLOSE CONFIG
$       link/nodebug gccvers.obj,GCCVERS.OPT/OPT,'gcclib_olb'
$       tmp = $status
$     ENDIF
$     DEASSIGN SYS$ERROR
$     DEASSIGN SYS$OUTPUT
$     IF (silent) THEN GOSUB Shut_up
$     OPEN/WRITE CONFIG gccvers.out
$     DEFINE SYS$ERROR CONFIG
$     DEFINE SYS$OUTPUT CONFIG
$     mcr []gccvers.exe
$     tmp = $status
$     CLOSE CONFIG
$     DEASSIGN SYS$OUTPUT
$     DEASSIGN SYS$ERROR
$     IF (silent) THEN GOSUB Shut_up
$     OPEN/READ CONFIG gccvers.out
$     READ/END_OF_FILE=Gcc_cleanup CONFIG line
$Gcc_cleanup:
$     CLOSE CONFIG
$     DELETE/NOLOG/NOCONFIRM gccvers.*;
$     IF F$LOCATE("GNU C version ",line).NE.F$LENGTH(line)
$     THEN 
$       echo "You are not using GNU cc."
$       GOTO Host_name
$     ELSE 
$       echo "You are using GNU cc ''line'"
$       gccversion = line
$       ccname := "GCC"
$       C_COMPILER_Replace = "CC=cc=''Mcc'"
$       GOTO Include_dirs
$     ENDIF
$   ENDIF
$ ENDIF
$Cxx_Version_check:
$ IF ccname .EQS. "CXX"
$ THEN
$   OPEN/WRITE CONFIG cxxvers.c
$   WRITE CONFIG "#include <stdio.h>"
$   WRITE CONFIG "int main() {"
$   WRITE CONFIG "#ifdef __DECCXX_VER"
$   WRITE CONFIG "        printf(""%i\n"", __DECCXX_VER);"
$   WRITE CONFIG "#else"
$   WRITE CONFIG "        printf(""%i\n"", ""0"");"
$   WRITE CONFIG "#endif"
$   WRITE CONFIG "        return(0);"
$   WRITE CONFIG "}"
$   CLOSE CONFIG
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   'Mcc' cxxvers.c
$   tmp = $status
$   SET ON
$   IF (silent) THEN GOSUB Shut_up
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   'ld' cxxvers.obj
$   tmp = $status
$   SET ON
$   IF (silent) THEN GOSUB Shut_up
$   OPEN/WRITE CONFIG cxxvers.out
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR CONFIG
$   DEFINE/USER_MODE SYS$OUTPUT CONFIG
$   mcr []cxxvers.exe
$   tmp = $status
$   SET ON
$   CLOSE CONFIG
$   IF (silent) THEN GOSUB Shut_up
$   OPEN/READ CONFIG cxxvers.out
$   READ/END_OF_FILE=Cxx_cleanup CONFIG line
$Cxx_cleanup:
$   CLOSE CONFIG
$   DELETE/NOLOG/NOCONFIRM cxxvers.*;
$   echo "You are using CXX ''line'"
$   cxxversion = line
$   ccversion = line
$   d_cplusplus = "define"
$   echo4 "adding /NOANSI_ALIAS qualifier to ccflags."
$   ccflags = ccflags + "/NOANSI_ALIAS"
$   CALL Cxx_demangler_cleanup
$ ELSE
$   d_cplusplus = "undef"
$ ENDIF
$!
$Cxx_demangler_cleanup: SUBROUTINE
$!
$!  If we do build with CXX these demangler Dbs will be left all over.
$!  However, configure.com does try to remove the [.UU] sub directory.
$!  Be sure to set default to the correct place before calling this sub.
$!
$ SET NOON
$ IF F$SEARCH("[.CXX_REPOSITORY]*.*") .NES. "" THEN DELETE/NOLOG/NOCONFIRM [.CXX_REPOSITORY]*.*;*
$ IF F$SEARCH("CXX_REPOSITORY.DIR") .NES. ""
$ THEN
$   SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) CXX_REPOSITORY.DIR
$   DELETE/NOLOG/NOCONFIRM CXX_REPOSITORY.DIR;
$ ENDIF
$ SET ON
$ EXIT
$ ENDSUBROUTINE ! Cxx_demangler_cleanup
$!
$ GOTO Host_name
$!
$List_Parse:
$ OPEN/READ CONFIG ccvms.lis
$ READ CONFIG line
$ IF F$ELEMENT(0, "-", archname) .EQS. "VMS_AXP"
$ THEN
$     archsufx = "AXP"
$ ELSE
$     archsufx = "IA64"
$ ENDIF
$ CLOSE CONFIG
$ line = F$EDIT(line,"TRIM,COMPRESS")
$ line = line - "Page 1"           ! occurs at end all compilers
$ line = line - "CCVMS "           ! filename appears w/ VAXC
$ line = line - "Source Listing "  ! Seen w/ AXP DECC
$ tmp = F$EXTRACT(0,20,line)       !timestamp, e.g. "30-JUL-1996 21:12:54 "
$ line = line - tmp
$ line = F$EDIT(line,"TRIM")       !bit redundant but we're in no big hurry
$ DELETE/NOLOG/NOCONFIRM ccvms.lis;
$ RETURN
$!
$Include_dirs:
$!: What should the include directory be ? (.TLB text libraries)
$ dflt = gcclib_olb 
$ rp = "Where are the include files you want to use? "
$ IF f$length( rp + "[''dflt'] " ) .GT. 76
$ THEN rp = F$FAO("!AS!/!AS",rp,"[''dflt'] ")
$ ELSE rp = rp + "[''dflt'] "
$ ENDIF
$ GOSUB myread
$ usrinc = ans
$!
$!: see if we have to deal with yellow pages, now NIS.
$!: now get the host name
$Host_name:
$ echo ""
$ echo4 "Figuring out host name..." !>&4
$ myhostname = ""
$  IF myhostname.eqs."" THEN myhostname = F$TRNLNM("ARPANET_HOST_NAME")
$  IF myhostname.eqs."" THEN myhostname = F$TRNLNM("INTERNET_HOST_NAME")
$  IF myhostname.eqs."" THEN myhostname = F$TRNLNM("MULTINET_HOST_NAME")
$  IF myhostname.eqs."" THEN myhostname = F$TRNLNM("UCX$INET_HOST_NAME")
$  IF myhostname.eqs."".and. -
      F$TRNLNM("UCX$INET_HOST") .nes. "" .and. -
      F$TRNLNM("UCX$INET_DOMAIN") .nes. "" THEN - 
     myhostname = F$TRNLNM("UCX$INET_HOST") + "." + F$TRNLNM("UCX$INET_DOMAIN") 
$  IF myhostname.eqs."".and. -
      F$TRNLNM("TCPIP$INET_HOST") .nes. "" .and. -
      F$TRNLNM("TCPIP$INET_DOMAIN") .nes. "" THEN - 
     myhostname = F$TRNLNM("TCPIP$INET_HOST") + "." + F$TRNLNM("TCPIP$INET_DOMAIN") 
$  IF myhostname.eqs."" THEN myhostname = F$TRNLNM("TCPWARE_DOMAINNAME")
$  IF myhostname.eqs."" THEN myhostname = F$TRNLNM("NEWS_ADDRESS")
$  IF myhostname.eqs."" THEN myhostname = F$TRNLNM("SYS$NODE") - "::"
$  IF myhostname.eqs."" THEN myhostname = F$EDIT(F$GETSYI("SCSNODE"),"TRIM")
$!: you do not want to know about this
$!: verify guess
$ rp = "Your host name appears to be """"''myhostname'"""". Right? "
$ bool_dflt = "y"
$ GOSUB myread
$ IF (.not.ans)
$   THEN 
$     READ SYS$COMMAND/PROMPT= - 
 "Please type the (one word) name of your host: " ans
$     myhostname = ans
$ ENDIF
$!: translate upper to lower if necessary
$ myhostname = F$EDIT(myhostname,"COLLAPSE")
$ mylowhostname = F$EDIT(myhostname," LOWERCASE")
$ IF mylowhostname.NES.myhostname
$ THEN
$   echo "(Normalizing case in your host name)"
$   myhostname = mylowhostname
$ ENDIF
$!
$ fp = F$LOCATE(".",myhostname)
$ mydomain = F$EXTRACT(fp,(F$LENGTH(myhostname)-fp)+1,myhostname)
$ IF mydomain.NES.""  !no periods in DECnet names like "MYDECNODE::"
$ THEN
$   rp = "What is your domain name? [''mydomain'] "
$   dflt = mydomain
$   GOSUB myread
$   mydomain = ans
$!: translate upper to lower if necessary
$   mydomain = F$EDIT(mydomain,"COLLAPSE")
$   mylowdomain = F$EDIT(mydomain," LOWERCASE")
$   IF mylowdomain.NES.mydomain
$   THEN
$     echo "(Normalizing case in your domain name)"
$     mydomain = mylowdomain
$   ENDIF
$ ENDIF
$ myhostname = myhostname - mydomain
$ echo "(Trimming domain name from host name--host name is now ''myhostname')"
$ IF .NOT.silent 
$ THEN
$   TYPE SYS$INPUT:
$   DECK

I need to get your e-mail address in Internet format if possible, i.e.
something like user@@host.domain. Please answer accurately since I have
no easy means to double check it. The default value provided below
is most probably close to the reality but may not be valid from outside
your organization...
$   EOD
$ ENDIF
$ IF F$TYPE(cf_email) .EQS. "" 
$ THEN 
$   dflt = "''cf_by'@@''myhostname'"+"''mydomain'"
$   rp = "What is your e-mail address? [''dflt'] "
$   GOSUB myread
$   cf_email = ans
$ ENDIF
$!
$ IF .NOT.silent 
$ THEN
$   TYPE SYS$INPUT:
$   DECK

If you or somebody else will be maintaining perl at your site, please
fill in the correct e-mail address here so that they may be contacted
if necessary. Currently, the "perlbug" program included with perl
will send mail to this address in addition to perlbug@@perl.com. You may
enter "none" for no administrator.
$   EOD
$ ENDIF
$ dflt = "''cf_email'"
$ rp = "Perl administrator e-mail address [''dflt'] "
$ GOSUB myread
$ perladmin = ans
$!
$!: determine where public executable scripts go
$!: determine perl absolute location
$!: figure out how to guarantee perl startup
$!
$!: see how we invoke the C preprocessor
$! echo ""
$! echo4 "Now, how can we feed standard input to your C preprocessor..." !>&4
$!: Set private lib path
$!: Now check and see which directories actually exist, avoiding duplicates
$!: determine optimize, if desired, or use for debug flag also
$!: We will not override a previous value, but we might want to
$!: augment a hint file
$!: the following weeds options from ccflags that are of no interest to cpp
$!: flags used in final linking phase
$!: Try to guess additional flags to pick up local libraries.
$!: coherency check
$! echo ""
$! echo4 "Checking your choice of C compiler and flags for coherency..." !>&4
$!: compute shared library extension
$!: Looking for optional libraries
$!: see if nm is to be used to determine whether a symbol is defined or not
$!: get list of predefined functions in a handy place
$!: see if we have sigaction or sigprocmask
$ IF (ccname .EQS. "DEC" .AND. Dec_C_Version .GE. 50200000) .OR. (ccname .EQS. "CXX")
$ THEN
$   Has_Dec_C_Sockets = "T"
$   echo ""
$   echo4 "Hmm... Looks like you have Dec C Berkeley networking support."
$ ELSE
$   Has_Dec_C_Sockets = "F"
$ ENDIF
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   echo ""
$   echo "You have sockets available via the C library. Should socket support"
$   echo "be built into Perl?"
$   dflt = "DECC"
$   rp = "Choose socket support option (NONE"
$   IF Has_Dec_C_Sockets THEN rp = rp + ",DECC"
$   rp = rp + ") [''dflt'] "
$   GOSUB myread
$   Has_Dec_C_Sockets = "F"
$   Has_socketshr = "F"
$   ans = F$EDIT(ans,"TRIM,COMPRESS,LOWERCASE")
$   IF ans.eqs."decc" THEN Has_Dec_C_Sockets = "T"
$ ENDIF
$!
$!
$! Ask if they want to build with VMS_DEBUG perl
$ echo ""
$ echo "Perl can be built to run under the VMS debugger."
$ echo "You should only select this option if you are debugging"
$ echo "perl itself.  This can be a useful feature if you are "
$ echo "embedding perl in a program."
$ bool_dflt = "n"
$ if f$type(usevmsdebug) .nes. "" 
$ then
$   if usevmsdebug .or. usevmsdebug .eqs. "define" then bool_dflt="y"
$ endif
$ rp = "Build a VMS-DEBUG version of Perl? [''bool_dflt'] "
$ GOSUB myread
$ use_vmsdebug_perl = ans
$ IF use_vmsdebug_perl
$ THEN
$   usevmsdebug = "define"
$ ELSE
$   usevmsdebug = "undef"
$ ENDIF
$!
$! Ask if they want to build with DEBUGGING
$ echo ""
$ echo "Perl can be built with extra runtime debugging enabled. This"
$ echo "enables the -D switch, at the cost of some performance.  It"
$ echo "was mandatory on perl 5.005 and before on VMS, but is now"
$ echo "optional.  If you do not generally use it you should probably"
$ echo "leave this off and gain a bit of extra speed."
$ bool_dflt = "n"
$ if f$type(DEBUGGING) .nes. "" 
$ then
$   if f$extract(0,1,f$edit(DEBUGGING,"collapse,upcase")).eqs."Y"  .or. DEBUGGING .eqs. "define" then bool_dflt="y"
$ endif
$ rp = "Build a DEBUGGING version of Perl? [''bool_dflt'] "
$ GOSUB myread
$ use_debugging_perl = ans
$!
$!
$! Ask about threads, if appropriate
$ IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
$ THEN
$   echo ""
$   echo "Perl can be built to offer a form of threading support on some systems."
$   echo "To do so, configure.com can be run with -""Dusethreads""."
$   echo ""
$   echo "Note that Perl built with threading support runs slightly slower"
$   echo "and uses slightly more memory than plain Perl."
$   echo ""
$   bool_dflt = "n"
$   if f$type(usethreads) .nes. "" 
$   then 
$       if usethreads .or. usethreads .eqs. "define" then bool_dflt="y"
$   endif
$!  Catch cases where user specified ithreads but
$!  forgot -Dusethreads 
$   if f$type(useithreads) .nes. ""
$   then
$         if useithreads .or. useithreads .eqs. "define" then bool_dflt="y"
$   endif
$   echo "If this doesn't make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Build a threading Perl? [''bool_dflt'] "
$   GOSUB myread
$   if ans
$   THEN
$     usethreads = "define"
$     use_threads="T"
$     bool_dflt = "y"
$     if f$type(useithreads) .nes. ""
$     then
$         if useithreads .eqs. "undef" then bool_dflt="n"
$     endif
$     if f$type(use5005threads) .nes. ""
$     then
$         if use5005threads .or. use5005threads .eqs. "define"
$         then
$             echo "5.005 threads are no longer supported"
$             exit 44
$         endif
$     endif
$     rp = "Use the newer interpreter-based ithreads? [''bool_dflt'] "
$     GOSUB myread
$     use_ithreads=ans
$     use_5005_threads="N"
$     ! Are they on VMS 7.1 or greater?
$     IF "''f$extract(1,3, f$getsyi(""version""))'" .GES. "7.1"
$     THEN
$       echo ""
$	echo "Threaded Perl can be linked to use system upcalls on your system. This feature"
$	echo "allows the thread scheduler to be made aware of system events (such as I/O)"
$	echo "so as to prevent a single thread from blocking all the threads in a program,"
$	echo "even on a single-processor machine."
$	bool_dflt = "y"
$	IF f$type(usethreadupcalls) .NES. ""
$	THEN
$       	if .not. usethreadupcalls .or. usethreadupcalls .eqs. "undef" then bool_dflt="n"
$	ENDIF
$       rp = "Enable thread upcalls? [''bool_dflt'] "
$       gosub myread
$       IF ans
$       THEN
$           thread_upcalls = "MTU=MTU=1"
$	    usethreadupcalls = "define"
$     	    ! Are they on alpha or itanium?
$	    IF ("''f$extract(1,3, f$getsyi(""version""))'" .GES. "7.2")
$     	    THEN
$       	echo ""
$       	echo "Threaded Perl can be linked to use multiple kernel threads on your system."
$       	echo "This feature allows multiple user threads to make use of multiple CPUs on"
$		echo "a multi-processor machine."
$       	bool_dflt = "n"
$		IF f$type(usekernelthreads) .nes. ""
$		THEN
$       		if usekernelthreads .or. usekernelthreads .eqs. "define" then bool_dflt="y"
$		ENDIF
$       	rp = "Enable multiple kernel threads? [''bool_dflt'] "
$       	gosub myread
$       	IF ans
$		THEN
$           	    thread_kernel = "MTK=MTK=1"
$	    	    usekernelthreads = "define"
$           	ENDIF
$           ENDIF
$       ENDIF
$     ENDIF
$   ELSE
$     usethreads = "undef"
$   ENDIF
$ ENDIF
$ IF F$TYPE(usethreadupcalls) .EQS. "" THEN usethreadupcalls = "undef"
$ IF F$TYPE(usekernelthreads) .EQS. "" THEN usekernelthreads = "undef"
$!
$! Ask if they want to build with MULTIPLICITY
$ echo ""
$ echo "Perl can be built so that multiple Perl interpreters can coexist"
$ echo "within the same Perl executable."
$ IF usethreads .OR. usethreads .EQS. "define"
$ THEN
$   echo "This multiple interpreter support is required for interpreter-based threads."
$   usemultiplicity="define"
$ ELSE
$   bool_dflt = "n"
$   if f$type(usemultiplicity) .nes. "" 
$   then
$     if usemultiplicity .or. usemultiplicity .eqs. "define" then bool_dflt = "y"
$   endif
$   rp = "Build Perl for multiplicity? [''bool_dflt'] "
$   GOSUB myread
$   IF ans
$   THEN
$     usemultiplicity="define"
$   ELSE
$     usemultiplicity="undef"
$   ENDIF
$ ENDIF
$!
$! Ask if they want to build with 64-bit support
$ bool_dflt = "n"
$ IF F$TYPE(use64bitint) .NES. ""
$ THEN
$   IF use64bitint .OR. use64bitint .eqs. "define" THEN bool_dflt = "y"
$ ENDIF
$ echo ""
$ echo "You have natively 64-bit long integers."
$ echo ""
$ echo "Perl can be built to take advantage of 64-bit integer types"
$ echo "on some systems, To do so, Configure can be run with -Duse64bitint."
$ echo "Choosing this option will most probably introduce binary incompatibilities."
$ echo ""
$ echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$ rp = "Try to use 64-bit integers, if available? [''bool_dflt'] "
$ GOSUB myread
$ use64bitint = ans
$!
$ bool_dflt = "n"
$ IF F$TYPE(use64bitall) .NES. ""
$ THEN
$   IF use64bitall .OR. use64bitall .eqs. "define" THEN bool_dflt = "y"
$ ENDIF
$ echo ""
$ echo "You may also choose to try maximal 64-bitness.  It means using as much"
$ echo "64-bitness as possible on the platform.  This in turn means even more"
$ echo "binary incompatibilities.  On the other hand, your platform may not"
$ echo "have any more 64-bitness available than what you already have chosen."
$ echo ""
$ echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$ rp = "Try to use maximal 64-bit support, if available? [''bool_dflt'] "
$ GOSUB myread
$ use64bitall=ans
$ IF use64bitall .AND. .NOT. use64bitint
$ THEN
$   echo ""
$   echo "Since you have chosen a maximally 64-bit build, I'm also turning on"
$   echo "the use of 64-bit integers."
$   use64bitint="Y"
$ ENDIF
$!
$ bool_dflt = use64bitall
$ IF F$TYPE(uselargefiles) .NES. "" 
$ THEN
$   IF uselargefiles .OR. uselargefiles .eqs. "define" THEN bool_dflt = "y"
$ ENDIF
$ echo ""
$ echo "Perl can be built to understand large files (files larger than 2 gigabytes)"
$ echo "on some systems.  To do so, Configure can be run with -Duselargefiles."
$ echo ""
$ echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$ rp = "Try to understand large files, if available? [''bool_dflt'] "
$ GOSUB myread
$ uselargefiles=ans
$!
$ bool_dflt = "n"
$ IF F$TYPE(uselongdouble) .NES. ""
$ THEN
$   IF uselongdouble .OR. uselongdouble .eqs. "define" THEN bool_dflt = "y"
$ ENDIF
$ echo ""
$ echo "Perl can be built to take advantage of long doubles which"
$ echo "(if available) may give more accuracy and range for floating point numbers."
$ echo ""
$ echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$ rp = "Try to use long doubles, if available? [''bool_dflt'] "
$ GOSUB myread
$ uselongdouble = ans
$!
$!
$ IF usesitecustomize .OR. usesitecustomize .eqs. "define" 
$ THEN 
$   usesitecustomize = "define"
$ ELSE
$   usesitecustomize = "undef"
$ ENDIF
$!
$! Case sensitive?
$ echo ""
$ echo "By default, perl (and pretty much everything else on VMS) uses"
$ echo "case-insensitive linker symbols. Which is to say, when the"
$ echo "underlying C code makes a call to a routine called Perl_foo in"
$ echo "the source, the name in the object modules or shareable images"
$ echo "is really PERL_FOO. There are some packages that use an"
$ echo "embedded perl interpreter that instead require case-sensitive"
$ echo "linker symbols."
$ echo ""
$ echo "If you have no idea what this means, and do not have"
$ echo "any program requiring anything, choose the default."
$ bool_dflt = be_case_sensitive
$ if f$type(usecasesensitive) .nes. ""
$ then
$   if usecasesensitive .or. usecasesensitive .eqs. "define" then bool_dflt = "y"
$   if f$extract(0,1,f$edit(usecasesensitive,"collapse,upcase")).eqs."N" .or. usecasesensitive .eqs. "undef"  then bool_dflt = "n"
$ endif
$ rp = "Build with case-sensitive symbols? [''bool_dflt'] "
$ GOSUB myread
$ be_case_sensitive = ans
$!
$! Shortened symbols?
$   echo ""
$   echo "The VMS linker does not handle symbol names longer than 31 characters,"
$   echo "but the compiler can shorten long symbols if requested."
$   bool_dflt = shorten_long_symbols
$   if f$type(useshortenedsymbols) .nes. ""
$   then
$       if useshortenedsymbols .or. useshortenedsymbols .eqs. "define" then bool_dflt = "y"
$       if f$extract(0,1,f$edit(useshortenedsymbols,"collapse,upcase")) .eqs. "N" .or. useshortenedsymbols .eqs. "undef"  then bool_dflt = "n"
$   endif
$   rp = "Build with long symbols shortened? [''bool_dflt'] "
$   GOSUB myread
$   shorten_long_symbols = ans
$! IEEE math?
$ echo ""
$ echo "Perl normally uses IEEE format (T_FLOAT) floating point numbers on"
$ echo "Alpha and Itanium, but if you need G_FLOAT for binary compatibility"
$ echo "with an external library or existing data, you may wish to disable"
$ echo "the IEEE math option."
$ bool_dflt = use_ieee_math
$ if f$type(useieee) .nes. ""
$ then
$   if useieee .or. useieee .eqs. "define"
$   then
$     bool_dflt="y"
$   else
$     bool_dflt="n"
$   endif
$ endif
$ rp = "Use IEEE math? [''bool_dflt'] "
$ GOSUB myread
$ use_ieee_math = ans
$ useieee = "undef"
$ usecasesensitive = "undef"
$ useshortenedsymbols = "undef"
$ if (use_ieee_math) then useieee = "define"
$ if (be_case_sensitive) then usecasesensitive = "define"
$ if (shorten_long_symbols) then useshortenedsymbols = "define"
$! Unlink all versions?
$ echo ""
$ echo "By default, Perl's unlink() provides VMS-like behavior and only"
$ echo "deletes the latest version of a file.  Enabling this option builds"
$ echo "Perl so that unlink() deletes all versions of a file."
$ bool_dflt = unlink_all_versions
$ if f$type(unlink_all_versions) .nes. ""
$ then
$       if unlink_all_versions .or. unlink_all_versions .eqs. "define"
$       then
$         bool_dflt="y"
$       else
$         bool_dflt="n"
$       endif
$ endif
$ rp = "Make unlink() delete all versions of a file? [''bool_dflt'] "
$ GOSUB myread
$ unlink_all_versions = ans
$ IF unlink_all_versions
$ THEN
$     d_unlink_all_versions = "define"
$ ELSE
$     d_unlink_all_versions = "undef"
$ ENDIF
$!
$! CC Flags
$ echo ""
$ echo "Your compiler may want other flags.  For this question you should include"
$ echo "/INCLUDE=(whatever) and /DEFINE=(whatever), flags and any other flags"
$ echo "or qualifiers used by the compiler."
$ echo ""
$ echo "To use no flags, specify the word ""none""."
$ dflt = user_c_flags
$ rp = "Any additional cc flags? [''dflt'] "
$ GOSUB myread
$ IF ans .EQS. "none" THEN ans = ""
$ user_c_flags = "''ans'"
$!
$! Ask whether they want to use secure logical translation when tainting
$ echo ""
$ echo "As Perl starts up, it checks several logical names, such as"
$ echo "PERL5LIB and PERL_ENV_TABLES, which allow you to modify aspects"
$ echo "of its behavior.  For additional security, you may limit this"
$ echo "process to executive- and kernel-mode translation when tainting"
$ echo "is enabled.  In this case, logical names normally skipped when"
$ echo "tainting is enabled (e.g. PERL5OPTS) are translated as well."
$ echo "If you do not choose to do this, the usual order of access modes"
$ echo "is used for logical name translation."
$ echo ""
$ echo "This restriction does not apply to the %ENV hash or to implicit"
$ echo "logical name translation during parsing of file specifications;"
$ echo "these always use the normal sequence of access modes for logical"
$ echo "name translation."
$ bool_dflt = "y"
$ if f$type(usesecurelog) .nes. "" 
$ then
$   if f$extract(0,1,f$edit(usesecurelog,"collapse,upcase")).eqs."N" .or. usesecurelog .eqs. "undef" then bool_dflt = "n"
$ endif
$ rp = "Use secure logical name translation? [''bool_dflt'] "
$ GOSUB myread
$ d_secintgenv  = ans
$ usesecurelog = "undef"
$ if (d_secintgenv) then usesecurelog = "define"
$!
$! Ask whether they want to default filetypes
$ echo ""
$ echo "When you pass the name of a program to Perl on the command line,"
$ echo "it generally doesn't supply any defaults unless the -S command"
$ echo "line switch is specified.  In keeping with the VMS tradition of"
$ echo "default file types, however, you can configure Perl to try default"
$ echo "file types of nothing, .pl, and .com, in that order (e.g. typing"
$ echo """$ perl foo"" would cause Perl to look for foo., then foo.pl, and"
$ echo "finally foo.com)."
$ echo ""
$ echo "This is currently broken in some configurations. Only enable it if"
$ echo "you know what you are doing."
$ bool_dflt = "n"
$ if f$type(usedefaulttypes) .nes. "" 
$ then
$     if usedefaulttypes .or. usedefaulttypes .eqs. "define" then bool_dflt="y"
$ endif
$ rp = "Always use default file types? [''bool_dflt'] "
$ GOSUB myread
$ d_alwdeftype = ans
$ usedefaulttypes = "undef"
$ if (d_alwdeftype) then usedefaulttypes = "define"
$!
$ dflt = archname
$ rp = "What is your architecture name? [''archname'] "
$ GOSUB myread
$ IF ans.NES.""
$ THEN
$   ans = F$EDIT(ans,"COLLAPSE, UPCASE")
$   IF (ans.NES.archname) !.AND.knowitall
$   THEN
$     echo4 "I'll go with ''archname' anyway..."
$   ENDIF
$ ENDIF
$!
$ bool_dflt = "n"
$ if f$type(useversionedarchname) .nes. ""
$ then
$   if useversionedarchname .or. useversionedarchname .eqs. "define" then bool_dflt = "y"
$ endif
$ rp = "Add the Perl API version to your archname? [''bool_dflt'] "
$ GOSUB myread
$ IF ans
$ THEN
$   useversionedarchname = "define"
$   IF F$LOCATE("-''version'", archname) .EQ. F$LENGTH(archname)
$   THEN
$     archname = "''archname'-''version'"
$     echo4 "...setting architecture name to ''archname'."
$   ELSE
$     echo4 "...and architecture name already has -''version'."
$   ENDIF
$ ELSE
$   useversionedarchname = "undef"
$ ENDIF
$!
$ IF usethreads .OR. usethreads .EQS. "define"
$ THEN
$   echo4 "Threads selected."
$   IF F$LOCATE("-thread", archname) .EQ. F$LENGTH(archname)
$   THEN
$     archname = "''archname'-thread"
$     echo4 "...setting architecture name to ''archname'."
$   ELSE
$     echo4 "...and architecture name already has -thread."
$   ENDIF
$ ENDIF
$!
$ IF usemultiplicity .OR. usemultiplicity .EQS. "define"
$ THEN
$   echo4 "Multiplicity selected."
$   IF F$LOCATE("-multi", archname) .EQ. F$LENGTH(archname)
$   THEN
$     archname = "''archname'-multi"
$     echo4 "...setting architecture name to ''archname'."
$   ELSE
$     echo4 "...and architecture name already has -multi."
$   ENDIF
$ ENDIF
$!
$ IF uselongdouble .OR. uselongdouble .EQS. "define"
$ THEN
$   echo4 "Long doubles selected."
$   IF F$LOCATE("-ld", archname) .EQ. F$LENGTH(archname)
$   THEN
$     archname = "''archname'-ld"
$     echo4 "...setting architecture name to ''archname'."
$   ELSE
$     echo4 "...and architecture name already has -ld."
$   ENDIF
$ ENDIF
$!
$ bool_dflt = "n"
$ vms_prefix = "perl_root"
$ vms_prefixup = F$EDIT(vms_prefix,"UPCASE")
$ rp = "Will you be sharing your ''vms_prefixup' with ''otherarch'? [''bool_dflt'] "
$ GOSUB myread
$ IF .NOT. ans
$ THEN
$   sharedperl = "N"
$ ELSE
$   sharedperl = "Y"
$   IF (F$ELEMENT(0, "-", archname).EQS."VMS_AXP")
$   THEN
$     macros = macros + """AXE=1"","
$   ENDIF
$   IF (F$ELEMENT(0, "-", archname).EQS."VMS_IA64")
$   THEN
$     macros = macros + """IXE=1"","
$   ENDIF
$ ENDIF
$!
$!: is AFS running?                       !sfn
$!: decide how portable to be.  Allow command line overrides. !sfn
$!: set up shell script to do ~ expansion !sfn
$!: expand filename                       !sfn
$!: now set up to get a file name         !sfn
$!
$ IF F$TYPE(prefix) .EQS. ""
$ THEN
$   prefix = F$ENVIRONMENT("DEFAULT") - ".UU]" + "]"
$   prefix = F$PARSE(prefix,,,,"NO_CONCEAL") - "][" - "000000." - ".000000" - ".;"
$   prefixbase = prefix - "]"
$!  Add _ROOT to make install PERL_ROOT differ from build directory.
$   prefix = prefixbase + "_ROOT.]"
$ ENDIF
$ ! more redundant scrubbing of values
$ prefix = prefix - "000000."
$ IF F$LOCATE(".]",prefix) .EQ. F$LENGTH(prefix) THEN prefix = prefix - "]" + ".]"
$ src = prefix - "_ROOT."
$!: determine root of directory hierarchy where package will be installed.
$ dflt = prefix
$ IF .NOT.silent 
$ THEN 
$   echo ""
$   echo "By default, ''package' will be installed in ''dflt', pod"
$   echo "pages under ''prefixbase'.LIB.POD], etc..., i.e. with ''dflt' as prefix for"
$   echo "all installation directories."
$   echo "On ''osname' the prefix is used to DEFINE the ''vms_prefixup' prior to installation"
$   echo "as well as during subsequent use of ''package' via ''packageup'_SETUP.COM."
$ ENDIF
$ rp = "Installation prefix to use (for ''vms_prefixup')? [ ''dflt' ] "
$ GOSUB myread
$ IF ans.NES.""
$ THEN 
$   prefix = ans
$   IF F$LOCATE(".]",ans) .EQ. F$LENGTH(ans) THEN prefix = prefix - "]" + ".]"
$ ELSE 
$   prefix = dflt
$ ENDIF
$ perl_root = prefix
$!
$! Check here for pre-existing PERL_ROOT.
$!  -> ask if removal desired.
$! Check here for writability of requested PERL_ROOT if it is not the default (cwd).
$!  -> recommend letting PERL_ROOT be PERL_SRC if requested PERL_ROOT is not writable.
$!
$   tmp = perl_root - ".]" + "]"
$ dflt = f$parse(tmp,,,,)
$   IF dflt .eqs. ""
$   THEN
$       echo4 "''tmp' does not yet exist."
$!      create/directory 'tmp'
$   ELSE
$       echo4 "''tmp' already exists."
$   ENDIF
$!
$ vms_skip_install = "true"
$ bool_dflt = "y"
$! echo ""
$ rp = "Skip the remaining """"where install"""" questions? [''bool_dflt'] "
$ GOSUB myread
$ IF (.NOT.ans) THEN vms_skip_install = "false"
$ IF (.NOT.vms_skip_install)
$ THEN
$!
$!: set the prefixit variable, to compute a suitable default value
$!
$!: determine where private library files go
$!: Usual default is /usr/local/lib/perl5.  Also allow things like 
$!: /opt/perl/lib, since /opt/perl/lib/perl5 would be redundant.
$   IF .NOT.silent 
$   THEN
$     TYPE SYS$INPUT:
$     DECK

There are some auxiliary files for perl5 that need to be put into a
private library directory that is accessible by everyone.
$     EOD
$   ENDIF
$   IF F$TYPE(privlib) .NES. ""
$   THEN dflt = privlib
$   ELSE dflt = "''vms_prefix':[lib]"
$   ENDIF
$   rp = "Pathname where the private library files will reside? " 
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   privlib = ans
$!
$ ENDIF !%Config-I-VMS, skip remaining "where install" questions
$!
$ IF F$TYPE(perl_symbol) .EQS. "" THEN perl_symbol := true
$ IF F$TYPE(perl_verb) .EQS. "" THEN perl_verb = ""
$ IF perl_symbol
$ THEN bool_dflt = "y"
$ ELSE bool_dflt = "n"
$ ENDIF
$ IF .NOT.silent 
$ THEN 
$   echo ""
$   echo "You may choose to write ''packageup'_SETUP.COM to assign a foreign"
$   echo "symbol to invoke ''package', which is the usual method."
$   echO "If you do not do so then you would need a DCL command verb at the"
$   echo "process or the system wide level."
$ ENDIF
$ rp = "Invoke perl as a global symbol foreign command? [''bool_dflt'] "
$ GOSUB myread
$ IF (.NOT.ans) THEN perl_symbol = "false"
$!
$ IF (.NOT.perl_symbol)
$ THEN
$   IF perl_verb .EQS. "DCLTABLES"
$   THEN bool_dflt = "n"
$   ELSE bool_dflt = "y"
$   ENDIF
$   IF .NOT.silent 
$   THEN 
$     echo ""
$     echo "Since you won't be using a symbol you must choose to put the ''packageup'"
$     echo "verb in a per-process table or in the system wide DCLTABLES (which"
$     echo "would require write privilege)."
$   ENDIF
$   rp = "Invoke perl as a per process command verb? [ ''bool_dflt' ] "
$   GOSUB myread
$   IF (.NOT.ans)
$   THEN perl_verb = "DCLTABLES"
$   ELSE perl_verb = "PROCESS"
$   ENDIF
$ ENDIF ! (.NOT.perl_symbol)
$!
$ IF (.NOT.vms_skip_install)
$ THEN
$!: set the prefixup variable, to restore leading tilde escape !sfn
$!
$!: determine where public architecture dependent libraries go
$   IF (.NOT.silent) 
$   THEN 
$     echo ""
$     echo "''package' contains architecture-dependent library files.  If you are"
$   ENDIF
$   IF (.NOT.silent) 
$   THEN
$     TYPE SYS$INPUT:
$     DECK
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.
$     EOD
$   ENDIF
$   IF F$TYPE(archlib) .NES. ""
$   THEN dflt = archlib
$   ELSE dflt = privlib - "]" + "." + archname + "." + version + "]"
$   ENDIF
$   rp = "Where do you want to put the public architecture-dependent libraries? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   archlib = ans
$!
$ ENDIF !%Config-I-VMS, skip "where install" questions
$ IF (.NOT.vms_skip_install)
$ THEN
$!: it so happens the Eunice I know will not run shell scripts in Unix format
$!
$!: see if setuid scripts can be secure           !sfn
$!: now see if they want to do setuid emulation   !sfn
$!
$!: determine where site specific libraries go.
$   IF .NOT.silent 
$   THEN
$     TYPE SYS$INPUT:
$     DECK

The installation process will also create a directory for
site-specific extensions and modules.  Some users find it convenient
to place all local files in this directory rather than in the main
distribution directory.
$     EOD
$   ENDIF
$   IF F$TYPE(sitelib) .NES. ""
$   THEN dflt = sitelib
$   ELSE dflt = privlib - "]" + ".SITE_PERL]"
$   ENDIF
$   rp = "Pathname for the site-specific library files? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   sitelib = ans
$!
$!: determine where site specific architecture-dependent libraries go.
$   IF .NOT.silent 
$   THEN TYPE SYS$INPUT:
$     DECK

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.
$     EOD
$   ENDIF
$   IF F$TYPE(sitearch) .NES. ""
$   THEN dflt = sitearch
$   ELSE dflt = sitelib - "]" + "." + archname + "]"
$   ENDIF
$   rp = "Pathname for the site-specific architecture-dependent library files? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   sitearch = ans
$!
$!: determine where old public architecture dependent libraries might be
$!
$!: determine where public executables go
$   IF F$TYPE(bin) .NES. ""
$   THEN dflt = bin
$!   ELSE dflt = prefix - ".]" + ".BIN]"
$   ELSE dflt = "/''vms_prefix'"
$   ENDIF
$   rp = "Pathname where the public executables will reside? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   bin = ans
$!
$!: determine where add-on public executables go
$   IF F$TYPE(sitebin) .NES. ""
$   THEN dflt = sitebin
$   ELSE dflt = "''vms_prefix':[bin.''archname']"
$   ENDIF
$   rp = "Pathname where the add-on public executables should be installed? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   sitebin = ans
$!
$!: determine where manual pages are on this system
$!: What suffix to use on installed man pages
$!: see if we can have long filenames
$!: determine where library module manual pages go
$!: What suffix to use on installed man pages
$!: see what memory models we can support
$!
$ ELSE ! skipping "where install" questions, we must set some symbols
$   IF F$TYPE(archlib).EQS."" THEN -
      archlib="''vms_prefix':[lib.''archname'.''version']"
$   IF F$TYPE(bin) .EQS. "" THEN -
      bin="/''vms_prefix'"
$   IF F$TYPE(privlib) .EQS. "" THEN -
      privlib ="''vms_prefix':[lib]"
$   IF F$TYPE(sitearch) .EQS. "" THEN -
      sitearch="''vms_prefix':[lib.site_perl.''archname']"
$   IF F$TYPE(sitelib) .EQS. "" THEN -
      sitelib ="''vms_prefix':[lib.site_perl]"
$   IF F$TYPE(sitebin) .EQS. "" THEN -
      sitebin="''vms_prefix':[bin.''archname']"
$ ENDIF !%Config-I-VMS, skip "where install" questions
$!
$! These derived locations can be set whether we've opted to
$! skip the where install questions or not.
$!
$ IF F$TYPE(archlibexp) .EQS. "" THEN -
    archlibexp="''vms_prefix':[lib.''archname'.''version']"
$ IF F$TYPE(binexp) .EQS. "" THEN -
    binexp ="''vms_prefix':[000000]"
$ IF F$TYPE(builddir) .EQS. "" THEN -
    builddir ="''vms_prefix':[000000]"
$ IF F$TYPE(installarchlib) .EQS. "" THEN -
    installarchlib="''vms_prefix':[lib.''archname'.''version']"
$ IF F$TYPE(installbin) .EQS. "" THEN -
    installbin ="''vms_prefix':[000000]"
$ IF F$TYPE(installscript) .EQS. "" THEN -
    installscript ="''vms_prefix':[utils]"
$ IF F$TYPE(installman1dir) .EQS. "" THEN -
    installman1dir ="''vms_prefix':[man.man1]"
$ IF F$TYPE(installman3dir) .EQS. "" THEN -
    installman3dir ="''vms_prefix':[man.man3]"
$ IF F$TYPE(installprivlib) .EQS. "" THEN -
    installprivlib ="''vms_prefix':[lib]"
$ IF F$TYPE(installsitearch) .EQS. "" THEN -
    installsitearch="''vms_prefix':[lib.site_perl.''archname']"
$ IF F$TYPE(installsitelib) .EQS. "" THEN -
    installsitelib ="''vms_prefix':[lib.site_perl]"
$ IF F$TYPE(oldarchlib) .EQS. "" THEN -
    oldarchlib="''vms_prefix':[lib.''archname']"
$ IF F$TYPE(oldarchlibexp) .EQS. "" THEN -
    oldarchlibexp="''vms_prefix':[lib.''archname']"
$ IF F$TYPE(privlibexp) .EQS. "" THEN -
    privlibexp ="''vms_prefix':[lib]"
$ IF F$TYPE(scriptdir) .EQS. "" THEN -
    scriptdir ="''vms_prefix':[utils]"
$ IF F$TYPE(sitearchexp) .EQS. "" THEN -
    sitearchexp ="''vms_prefix':[lib.site_perl.''archname']"
$ IF F$TYPE(sitelib_stem) .EQS. "" THEN -
    sitelib_stem ="''vms_prefix':[lib.site_perl]"
$ IF F$TYPE(sitelibexp) .EQS. "" THEN -
    sitelibexp ="''vms_prefix':[lib.site_perl]"
$!
$! determine whether to use malloc wrapping
$ echo ""
$ bool_dflt = "y"
$ IF F$TYPE(usemallocwrap) .nes. ""
$ then
$   if .NOT. usemallocwrap .or. usemallocwrap .eqs. "undef" then bool_dflt = "n"
$ endif
$ rp = "Do you wish to wrap malloc calls to protect against potential overflows? [''bool_dflt'] "
$ GOSUB myread
$ IF ans
$ THEN usemallocwrap = "define"
$ ELSE usemallocwrap = "undef"
$ ENDIF
$!
$! Ask if they want to use perl's memory allocator
$ echo ""
$ echo "Perl has a built-in memory allocator that is tuned for normal"
$ echo "memory usage.  It is oftentimes better than the standard system"
$ echo "memory allocator.  It also has the advantage of providing memory"
$ echo "allocation statistics, if you choose to enable them."
$ bool_dflt = "n"
$ IF F$TYPE(usemymalloc) .nes. ""
$ then
$   if usemymalloc .or. usemymalloc .eqs. "define" then bool_dflt = "y"
$ endif
$ rp = "Do you wish to attempt to use the malloc that comes with ''package'? [''bool_dflt'] "
$ GOSUB myread
$ mymalloc = ans
$ IF mymalloc
$ THEN
$   IF use_debugging_perl
$   THEN
$     echo ""
$     echo "Perl can keep statistics on memory usage if you choose to use"
$     echo "them.  This is useful for debugging, but does have some"
$     echo "performance overhead."
$     bool_dflt = "n"
$     rp = "Do you want the debugging memory allocator? [''bool_dflt'] "
$     gosub myread
$     use_debugmalloc = ans
$   ENDIF
$   ! Check which memory allocator we want
$   echo ""
$   echo "There are currently three different memory allocators: the"
$   echo "default (which is a pretty good general-purpose memory manager),"
$   echo "the TWO_POT allocator (which is optimized to save memory for"
$   echo "larger allocations), and PACK_MALLOC (which is optimized to save"
$   echo "memory for smaller allocations). They're all good, but if your"
$   echo "usage tends towards larger chunks use TWO_POT, otherwise use"
$   echo "PACK_MALLOC."
$   dflt = "DEFAULT"
$   rp = "Memory allocator (DEFAULT, TWO_POT, PACK_MALLOC) [''dflt'] "
$   GOSUB myread
$   if ans.eqs."TWO_POT" then use_two_pot_malloc = "Y"
$   if ans.eqs."PACK_MALLOC" then use_pack_malloc = "Y"
$ ENDIF
$!
$ xs_extensions = ""
$ xxx = ""
$ OPEN/READ CONFIG 'manifestfound'
$ext_loop:
$   READ/END_OF_FILE=end_ext/ERROR=end_ext CONFIG line
$   IF F$EXTRACT(0,4,line) .NES. "ext/" .AND. -
       F$EXTRACT(0,5,line) .NES. "dist/".AND. -
       F$EXTRACT(0,5,line) .NES. "cpan/" THEN goto ext_loop
$   line = F$EDIT(line,"COMPRESS")
$   line = F$ELEMENT(0," ",line)
$   IF F$EXTRACT(0,4,line) .EQS. "ext/"
$   THEN
$     xxx = F$ELEMENT(1,"/",line)
$     IF F$SEARCH("[-.ext]''xxx'.DIR;1") .EQS. "" THEN GOTO ext_loop
$   ENDIF
$   IF F$EXTRACT(0,5,line) .EQS. "dist/"
$   THEN
$     xxx = F$ELEMENT(1,"/",line)
$     IF F$SEARCH("[-.dist]''xxx'.DIR;1") .EQS. "" THEN GOTO ext_loop
$   ENDIF
$   IF F$EXTRACT(0,5,line) .EQS. "cpan/"
$   THEN
$     xxx = F$ELEMENT(1,"/",line)
$     IF F$SEARCH("[-.cpan]''xxx'.DIR;1") .EQS. "" THEN GOTO ext_loop
$   ENDIF
$   IF xxx .EQS. "DynaLoader" THEN goto ext_loop     ! omit
$!
$! (extspec = xxx) =~ tr!-!/!
$ extspec = ""
$ idx = 0
$ extension_dir_name = xxx
$ replace_dash_with_slash:
$   before = F$ELEMENT(idx, "-", xxx)
$   IF before .EQS. "-" THEN goto end_replace_dash_with_slash
$   IF extspec .NES. "" 
$   THEN
$	extspec = extspec + "/"
$   ENDIF
$   extspec = extspec + before
$   idx = idx + 1
$   goto replace_dash_with_slash
$
$ end_replace_dash_with_slash:
$!
$ IF extspec .EQS. "Scalar/List/Utils" THEN extspec = "List/Util"
$ IF extspec .EQS. "PathTools" THEN extspec = "Cwd"
$!
$ xxx = xs_extensions
$ gosub may_already_have_extension
$ IF $STATUS .EQ. 1
$ THEN
$     xxx = nonxs_ext
$     gosub may_already_have_extension
$ ENDIF
$ IF $STATUS .EQ. 1
$ THEN
$     xxx = nonxs_ext2
$     gosub may_already_have_extension
$ ENDIF
$ IF $STATUS .NE. 1 THEN goto ext_loop
$ goto found_new_extension
$!
$ may_already_have_extension:
$   idx = F$LOCATE(extspec, xxx)
$   extlen = F$LENGTH(xxx) 
$   IF idx .EQ. extlen THEN return 1	! didn't find it
$!  But "Flirble" may just be part of "Acme-Flirble".  This is not
$!  bullet-proof because we may only be looking at one chunk of the
$!  existing extension list.
$   IF idx .GT. 0 .AND. F$EXTRACT(idx - 1, 1, xxx) .NES. " "
$   THEN
$	xxx = F$EXTRACT(idx + F$LENGTH(extspec) + 1, extlen, xxx)
$	GOTO may_already_have_extension
$   ENDIF
$!  But "Foo" may just be part of "Foo-Bar" so check for equality.
$   xxx = F$EXTRACT(idx, extlen - idx, xxx)
$   IF F$ELEMENT(0, " ", xxx) .EQS. extspec
$   THEN 
$	RETURN 3
$   ELSE 
$	xxx = F$EXTRACT(F$LENGTH(extspec) + 1, extlen, xxx)
	GOTO may_already_have_extension
$   ENDIF
$!
$ found_new_extension:
$   IF F$SEARCH("[-.ext.''extension_dir_name']*.xs") .EQS. "" -
        .AND. F$SEARCH("[-.dist.''extension_dir_name']*.xs") .EQS. "" -
        .AND. F$SEARCH("[-.cpan.''extension_dir_name']*.xs") .EQS. "" -
        .AND. extension_dir_name .NES. "VMS-Filespec"
$   THEN
$!  Bit if a hack to get around the 1K buffer on older systems.
$       IF F$LENGTH(nonxs_ext) .GT. 950
$       THEN
$           nonxs_ext2 = nonxs_ext2 + " ''extspec'"
$       ELSE
$           nonxs_ext = nonxs_ext + " ''extspec'"
$       ENDIF
$   ELSE
$       xs_extensions = xs_extensions + " ''extspec'"
$   ENDIF
$   goto ext_loop
$end_ext:
$ close CONFIG
$ DELETE/SYMBOL xxx
$ DELETE/SYMBOL idx
$ DELETE/SYMBOL extspec
$ DELETE/SYMBOL extlen
$ DELETE/SYMBOL extension_dir_name
$ xs_extensions = F$EDIT(xs_extensions,"TRIM,COMPRESS")
$ dflt = xs_extensions
$ dflt = dflt - "ByteLoader"          ! needs to be ported
$ dflt = dflt - "DB_File"             ! needs to be ported
$ dflt = dflt - "GDBM_File"           ! needs porting/special library
$ dflt = dflt - "IPC/SysV"            ! needs to be ported
$ dflt = dflt - "NDBM_File"           ! needs porting/special library
$ dflt = dflt - "ODBM_File"           ! needs porting/special library
$ dflt = dflt - "Sys/Syslog"          ! needs porting/special library "GDBM_File macro LOG_DEBUG"
$ IF .NOT. Has_Dec_C_Sockets
$ THEN
$   dflt = dflt - "Socket"            ! optional on VMS
$ ENDIF
$ dflt = dflt - "Win32API/File" - "Win32"  ! need Dave Cutler's other project
$ dflt = dflt - "Amiga/ARexx" - "Amiga/Exec" ! this is not AmigaOS
$ nonxs_ext = nonxs_ext - "Win32CORE"
$ nonxs_ext2 = nonxs_ext2 - "Win32CORE"
$ dflt = F$EDIT(dflt,"TRIM,COMPRESS")
$ nonxs_ext = F$EDIT(nonxs_ext,"TRIM,COMPRESS")
$ nonxs_ext2 = F$EDIT(nonxs_ext2,"TRIM,COMPRESS")
$!
$! Ask for their default list of extensions to build
$ echo ""
$ echo "It is time to specify which modules you want to build into"
$ echo "perl. Most of these are standard and should be chosen, though"
$ echo "you might, for example, want to build GDBM_File instead of"
$ echo "SDBM_File if you have the GDBM library built on your machine."
$ echo ""
$ echo "Which modules do you want to build into perl?"
$ rp = "[''dflt'] "
$ GOSUB myread
$ dynamic_ext = F$EDIT(ans,"TRIM,COMPRESS")
$!
$! %Config-I-VMS, determine build/make utility here (make gmake mmk mms)
$ echo ""
$ echo "Checking your ""make"" utilities..."
$! If the 'build' that you use is not here add it and it's test
$! switch to the _END_ of these strings (and increment max_build)
$! (e.g. builders = builders + "/FOOMAKE" 
$!       probers  = probers + " -fooVersionSwitch"
$! ) & please let me know about it.
$ builders = "IMAKE/GNUMAKE/MGMAKE/GMAKE/MAKE/MMS/MMK"
$ probers  = "-f Makefile. -v!-f Makefile. -v!-f Makefile. -v!-f Makefile. -v!-f Makefile. -v!/IDENT!/IDENT"
$ max_build = 7
$!
$ orig_dflt = f$edit(builder,"UPCASE")
$ if orig_dflt .eqs. "" then orig_dflt = "MMK"
$ default_set = ""
$ ok_builders = ""
$ OPEN/WRITE/ERROR=Open_error CONFIG Makefile.
$ WRITE CONFIG "dont_make_anything_yet:"
$ WRITE CONFIG F$FAO("!_")
$ CLOSE CONFIG
$ n = 0
$ messages = F$ENVIRONMENT("MESSAGE")
$Build_probe:
$ build = F$ELEMENT(n,"/",builders)
$ probe  = F$ELEMENT(n,"!",probers)
$ echo "Testing whether you have ''build' on your system..."
$!
$! Noted with GNU Make version 3.60  that the $status and $severity
$! with the 'probe' Makefile appear to be: $STATUS == "%X1000000C"
$! $SEVERITY == "4".
$!
$ SET NOON
$ ON CONTROL_Y THEN GOTO Reenable_messages_build
$ SET MESSAGE/NOFAC/NOSEV/NOIDENT/NOTEXT
$ 'build' 'probe'
$ IF ($SEVERITY .EQ. 1) ! not adequate?
$ THEN 
$   echo "OK."
$   IF (build .EQS. orig_dflt) 
$   THEN 
$     default_set = "TRUE"
$     dflt = build
$   ENDIF
$   ok_builders = ok_builders + " " + build
$   IF (.NOT. default_set) THEN dflt = build
$ ELSE 
$   echo "Nope."
$ ENDIF
$Reenable_messages_build:
$ SET MESSAGE 'messages'
$ SET ON
$ on control_y then goto clean_up
$ n = n + 1
$ IF (n .LT. max_build) THEN GOTO Build_probe
$!
$ echo ""
$ IF (ok_builders .NES. "") 
$ THEN
$   echo "Here is the list of builders you can apparently use:"
$   echo "(",ok_builders," )"
$   rp = "Which """"make"""" utility do you wish to use? [''dflt'] "
$   GOSUB myread
$   ans = F$EDIT(ans,"TRIM, COMPRESS")
$   ans = F$EXTRACT(0,F$LOCATE(" ",ans),ans) !throw out "-f Makefile." here
$   IF (ans .EQS. "") 
$   THEN build = dflt
$   ELSE build = ans
$   ENDIF
$ ELSE
$   TYPE SYS$INPUT:
$   DECK

%Config-E-VMS, ERROR:
 Well this looks pretty serious. Perl5 cannot be compiled without a "make"
 utility of some sort and after checking my "builders" list I cannot find
 the symbol or command you use on your system to compile programs.

$   EOD
$   READ SYS$COMMAND/PROMPT="Which ""MMS"" do you use? " ans
$   ans = F$EDIT(ans,"TRIM, COMPRESS")
$   ans = F$EXTRACT(0,F$LOCATE(" ",ans),ans) !throw out "-f Makefile." here
$   IF (ans .EQS. "") 
$   THEN build = dflt
$     echo "I do not know where ""make"" is, and my life depends on it."
$     echo "Go find a make program or fix your DCL$PATH setting!"
$     echo "ABORTING..."
$     SET DEFAULT 'vms_default_directory_name' !be kind rewind
$     STOP
$     EXIT 2 !$STATUS = "%X00000002" (error)
$   ELSE 
$     build = ans
$   ENDIF
$ ENDIF
$!
$ DELETE/NOLOG/NOCONFIRM Makefile.;
$ GOTO Beyond_open
$Open_error:
$ TYPE SYS$INPUT:
$ DECK

 There seems to be trouble. I just tried to create a file in
$ EOD
$ echo4 'F$ENVIRONMENT("DEFAULT")'
$ TYPE SYS$INPUT:
$ DECK
 but was unsuccessful. I am stopping now. Please check that directories'
 PROTECTION bits. I will leave you in the directory where you started
 Configure.com
$ EOD
$ echo4 "ABORTING..."
$ GOTO Clean_up
$ STOP
$ EXIT
$!
$Beyond_open:
$! echo " Very well I will proceed with ""''build'"""
$ make = F$EDIT(build,"UPCASE")
$!
$!: locate the preferred pager for this system
$!pagers = "most|more|less|type/page"
$ IF osvers .GES. "V6.1"
$ THEN
$   dflt = "type/page=save=10"
$ ELSE
$   dflt = "type/page"
$ ENDIF
$! assume that the presence of a most symbol indicates the presence
$! of the pager.
$ IF F$TYPE(most) .EQS. "STRING" THEN dflt = "most"
$ IF F$TYPE(pager) .EQS. "STRING" THEN dflt = pager
$ rp="What pager is used on your system? [''dflt'] "
$ GOSUB myread
$ pager = ans
$!
$! update makefile here
$! echo4 "Updating makefile..."
$!
$ IF (make .EQS. "MMS").OR.(make .EQS. "MMK")
$ THEN 
$   makefile    = "" 		   !wrt MANIFEST dir
$   UUmakefile  = "[-]DESCRIP.MMS" !wrt CWD dir
$   DEFmakefile = "DESCRIP.MMS"    !wrt DEF dir (?)
$   Makefile_SH = "descrip_mms.template"
$ ELSE
$   makefile    = " -f Makefile."  !wrt MANIFEST dir
$   UUmakefile  = "[-]Makefile."   !wrt CWD dir
$   DEFmakefile = "Makefile."      !wrt DEF dir (?)
$   Makefile_SH = "Makefile.in"
$ ENDIF
$!
$ IF macros .NES. "" 
$ THEN
$   tmp = F$LENGTH(macros)
$   macros = F$EXTRACT(0,(tmp-1),macros) !miss trailing comma
$   macros = "/macro=(" + macros  + ")"
$ ENDIF
$! Build up the extra C flags
$!
$ IF use_ieee_math
$ THEN
$   extra_flags = "''extra_flags'" + "/float=ieee/ieee=denorm"
$ ELSE
$   IF (F$ELEMENT(0, "-", archname).EQS."VMS_IA64")
$   THEN
$     extra_flags = "''extra_flags'" + "/float=g_float"
$   ENDIF
$ ENDIF
$ names_flags = ""
$ IF be_case_sensitive
$ THEN
$   names_flags = "AS_IS"
$ ENDIF
$ IF shorten_long_symbols
$ THEN
$   IF be_case_sensitive
$   THEN
$     names_flags = "''names_flags',SHORTENED"
$   ELSE
$     names_flags = "SHORTENED"
$   ENDIF
$ ENDIF
$ IF F$LENGTH(names_flags) .ne. 0
$ THEN
$   extra_flags = "''extra_flags'" + "/NAMES=(''names_flags')"
$ ENDIF
$ DELETE/SYMBOLS names_flags
$ extra_flags = "''extra_flags'" + "''user_c_flags'"
$!
$ min_pgflquota = "100000"
$ pgflquota = F$STRING(F$GETJPI("","PGFLQUOTA"))
$ IF pgflquota .LES. min_pgflquota
$ THEN
$   echo4 "Your PGFLQUOTA of ''pgflquota' appears too small to build ''package'."
$   READ SYS$COMMAND/PROMPT="Continue? [n] " ans
$   IF ans
$   THEN
$     echo4 "Continuing..."
$   ELSE
$     echo4 "ABORTING..."
$     GOTO Clean_up
$   ENDIF
$ ENDIF
$!
$ echo ""
$ echo4 "Checking the C run-time library."
$!
$! Former SUBCONFIGURE.COM
$!
$!  - build a config.sh for VMS Perl.
$!  - use built config.sh to take config_h.SH -> config.h
$!  - also take vms/descrip_mms.template -> descrip.mms (VMS Makefile)
$!              vms/Makefile.in -> Makefile. (VMS GNU Makefile?)
$!              vms/Makefile.SH -> Makefile. (VMS GNU Makefile?)
$!
$! Note for folks from other platforms changing things in here:
$!
$!   Fancy changes (based on compiler capabilities or VMS version or
$!   whatever) are tricky, so go ahead and punt on those.
$!
$!   Simple changes, though (say, always setting something to 1, or undef,
$!   or something like that) are straightforward.  Adding a new constant 
$!   item for the ultimately created config.sh requires at least one 
$!   (possibly more) line(s) to this file.
$!
$!   Add a line in the format:
$!
$!     $ WC "foo='undef'"
$!
$!   somewhere between the line tagged '##BEGIN WRITE NEW CONSTANTS HERE##'
$!   and the one tagged '##END WRITE NEW CONSTANTS HERE##' (note the order
$!   is sorted ASCII and corresponds to the output of config.sh in the 
$!   Bourne shell version of Configure).
$!   Be very careful with quoting, as it can be tricky.
$!   For example if instead of a constant string like 'undef' or 'define' 
$!   you wanted to add something to VMS's config.sh that looks like:
$!
$!     blank_string=''
$!
$!   then add a line that looks like this before the 
$!   '##END WRITE NEW CONSTANTS HERE##' tagged line:
$!
$!     $ WC "blank_string='" + "'"
$!
$!   (+ is the string concatenator and "''var'" has the effect 
$!    of "${var}" in perl or sh, but "'const'" is not interpolated).
$!
$!   Note that unitialized variables, such as a line like:
$!
$!     $ WC "new_var='" + new_var + "'"
$!
$!   should be avoided unless new_var has a value assigned prior 
$!   to that line (think of perl's -w warnings).
$!
$!     %DCL-W-UNDSYM, undefined symbol - check validity and spelling
$!     \NEW_VAR\
$!
$!
$ vms_ver = F$EXTRACT(1,3, osvers)
$ IF F$LENGTH(Mcc) .EQ. 0 THEN Mcc := "cc"
$ MCC = f$edit(mcc, "UPCASE")
$ C_Compiler_Replace := "CC=CC=''Mcc'''ccflags'"
$ IF ccname .EQS. "DEC"
$ THEN
$   Checkcc := "''Mcc'/prefix=all"
$ ELSE
$   IF ccname .EQS. "CXX"
$   THEN
$     Checkcc := cxx
$   ELSE
$     Checkcc := "''Mcc'"
$   ENDIF
$ ENDIF
$ ccflags = ccflags + extra_flags
$ IF be_case_sensitive
$ THEN
$   d_vms_be_case_sensitive = "define"
$ ELSE
$   d_vms_be_case_sensitive = "undef"
$ ENDIF
$ IF shorten_long_symbols
$ THEN
$   d_vms_shorten_long_symbols = "define"
$ ELSE
$   d_vms_shorten_long_symbols = "undef"
$ ENDIF
$! Some constant defaults.
$ hwname = f$getsyi("HW_NAME")
$ myname = myhostname
$ IF myname .EQS. "" THEN myname = F$TRNLNM("SYS$NODE")
$!
$ ccdlflags=""
$ cccdlflags=""
$!
$! FIXME -- This section does not really handle all the different permutations 
$! of 64-bitness, and it does not provide for the /POINTER_SIZE=64 compiler
$! option that would be necessary to support the "explicit 64-bit interfaces"
$! promised by -Dusemorebits.
$!
$ usemorebits = "undef"
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$   use64bitint = "define"
$   ivdformat="""Ld"""
$   uvuformat="""Lu"""
$   uvoformat="""Lo"""
$   uvxformat="""Lx"""
$   uvXUformat="""LX"""
$ ELSE
$   use64bitint = "undef"
$   ivdformat="""ld"""
$   uvuformat="""lu"""
$   uvoformat="""lo"""
$   uvxformat="""lx"""
$   uvXUformat="""lX"""
$ ENDIF
$ IF uselongdouble .OR. uselongdouble .EQS. "define"
$ THEN
$   uselongdouble = "define"
$   alignbytes="16"
$   nveformat="""Le"""
$   nvEUformat="""LE"""
$   nvfformat="""Lf"""
$   nvFUformat="""LF"""
$   nvgformat="""Lg"""
$   nvGUformat="""LG"""
$ ELSE
$   uselongdouble = "undef"
$   nveformat="""e"""
$   nvEUformat="""E"""
$   nvfformat="""f"""
$   nvFUformat="""F"""
$   nvgformat="""g"""
$   nvGUformat="""G"""
$ ENDIF
$ IF use64bitall .OR. use64bitall .EQS. "define"
$ THEN
$   use64bitall = "define"
$ ELSE
$   use64bitall = "undef"
$ ENDIF
$ IF uselargefiles .OR. uselargefiles .EQS. "define"
$ THEN
$   uselargefiles = "define"
$ ELSE
$   uselargefiles = "undef"
$ ENDIF
$!
$ usemymalloc = "undef"
$ if mymalloc then usemymalloc = "define"
$!
$ perl_cc=Mcc
$!
$ IF (sharedperl .AND. F$ELEMENT(0, "-", archname) .EQS. "VMS_AXP")
$ THEN
$   obj_ext=".abj"
$   so="axe"
$   dlext="axe"
$   exe_ext=".axe"
$   lib_ext=".alb"
$ ELSE
$   IF (sharedperl .AND. F$ELEMENT(0, "-", archname) .EQS. "VMS_IA64")
$   THEN
$     obj_ext=".ibj"
$     so="ixe"
$     dlext="ixe"
$     exe_ext=".ixe"
$     lib_ext=".ilb"
$   ELSE
$     obj_ext=".obj"
$     so="exe"
$     dlext="exe"
$     exe_ext=".exe"
$     lib_ext=".olb"
$   ENDIF
$ ENDIF
$ dlobj="dl_vms''obj_ext'"
$!
$ cppstdin="''perl_cc'/noobj/comments=as_is/preprocess=sys$output sys$input"
$ cppminus=" "
$ cpprun="''perl_cc'/noobj/comments=as_is/preprocess=sys$output sys$input"
$ cpplast=" "
$!
$ timetype="time_t"
$ signal_t="void"
$ stdchar="char"
$!
$ IF mymalloc
$ THEN d_mymalloc="define"
$ ELSE d_mymalloc="undef"
$ ENDIF
$!
$ usedl="define"
$ startperl="""$ perl 'f$env(\""procedure\"")' \""'"+"'p1'\"" \""'"+"'p2'\"" \""'"+"'p3'\"" \""'"+"'p4'\"" \""'"+"'p5'\"" \""'"+"'p6'\"" \""'"+"'p7'\"" \""'"+"'p8'\""!\n"
$ startperl=startperl + "$ exit++ + ++$status!=0 and $exit=$status=undef; while($#ARGV != -1 and $ARGV[$#ARGV] eq '"+"'){pop @@ARGV;}"""
$!
$ libs=" "
$ libc="(DECCRTL)"
$!
$! perllibs should be libs with all non-core libs (such as gdbm) removed.
$!
$ perllibs=libs
$!
$!
$ d_PRId64 = "define"
$ d_PRIi64 = "define"
$ d_PRIu64 = "define"
$ d_PRIo64 = "define"
$ d_PRIx64 = "define"
$ d_PRIXU64 = "define"
$ sPRId64 = """Ld"""
$ sPRIXU64 = """LX"""
$ sPRIi64 = """Li"""
$ sPRIo64 = """Lo"""
$ sPRIu64 = """Lu"""
$ sPRIx64 = """Lx"""
$ d_quad = "define"
$ quadtype = "long long"
$ uquadtype = "unsigned long long"
$ quadkind  = "3"
$!
$ d_frexpl = "define"
$ d_ldexpl = "define"
$ d_modfl = "define"
$ d_modflproto = "define"
$!
$ IF useieee .OR. useieee .EQS. "define"
$ THEN
$   d_acosh = "define"
$   d_asinh = "define"
$   d_atanh = "define"
$   d_cbrt = "define"
$   d_copysign = "define"
$   d_erf = "define"
$   d_erfc = "define"
$   d_exp2 = "define"
$   d_expm1 = "define"
$   d_fdim = "define"
$   d_fma = "define"
$   d_fmax = "define"
$   d_fmin = "define"
$   d_fp_classify = "define"
$   d_hypot = "define"
$   d_ilogb = "define"
$   d_isnan = "define"
$   d_isnanl = "define"
$   d_isnormal = "define"
$   d_j0 = "define"
$   d_lgamma = "define"
$   d_log1p = "define"
$   d_log2 = "define"
$   d_logb = "define"
$   d_lrint = "define"
$   d_lrintl = "define"
$   d_lround = "define"
$   d_lroundl = "define"
$   d_nearbyint = "define"
$   d_nextafter = "define"
$   d_nexttoward = "define"
$   d_remainder = "define"
$   d_remquo = "define"
$   d_rint = "define"
$   d_tgamma = "define"
$   d_trunc = "define"
$   d_truncl = "define"
$ ELSE
$   d_acosh = "undef"
$   d_asinh = "undef"
$   d_atanh = "undef"
$   d_cbrt = "undef"
$   d_copysign = "undef"
$   d_erf = "undef"
$   d_erfc = "undef"
$   d_exp2 = "undef"
$   d_expm1 = "undef"
$   d_fdim = "undef"
$   d_fma = "undef"
$   d_fmax = "undef"
$   d_fmin = "undef"
$   d_fp_classify = "undef"
$   d_hypot = "undef"
$   d_ilogb = "undef"
$   d_isnan = "undef"
$   d_isnanl = "undef"
$   d_isnormal = "undef"
$   d_j0 = "undef"
$   d_lgamma = "undef"
$   d_log1p = "undef"
$   d_log2 = "undef"
$   d_logb = "undef"
$   d_lrint = "undef"
$   d_lrintl = "undef"
$   d_lround = "undef"
$   d_lroundl = "undef"
$   d_nearbyint = "undef"
$   d_nextafter = "undef"
$   d_nexttoward = "undef"
$   d_remainder = "undef"
$   d_remquo = "undef"
$   d_rint = "undef"
$   d_tgamma = "undef"
$   d_trunc = "undef"
$   d_truncl = "undef"
$ ENDIF
$!
$! Now some that we build up
$!
$ use5005threads = "undef"
$ d_old_pthread_create_joinable = "undef"
$ old_pthread_create_joinable = " "
$ IF use_threads
$ THEN
$    useithreads = "define"
$ ELSE
$   useithreads = "undef"
$ ENDIF
$!
$! Some that we need to invoke the compiler for
$!
$!
$! handy construction aliases/symbols
$!
$ OS := "open/write CONFIG []try.c"
$ WS := "write CONFIG"
$ CS := "close CONFIG"
$ DS := "delete/nolog/noconfirm []try.*;*"
$ Needs_Opt := N
$ good_compile = %X10B90001
$ IF ccname .EQS. "GCC"
$ THEN
$   open/write OPTCHAN []try.opt
$   write OPTCHAN "Gnu_CC:[000000]gcclib.olb/library"
$   write OPTCHAN "Sys$Share:VAXCRTL/Share"
$   Close OPTCHAN
$   Needs_Opt := Y
$   good_compile = %X10000001
$ ENDIF
$ IF ccname .EQS. "CXX"
$ THEN
$   good_compile = %X15F60001
$ ENDIF
$ good_link = %X10000001
$ tmp = "" ! null string default
$!
$ GOTO beyond_compile_ok
$!
$! Check for type sizes 
$!
$type_size_check: 
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""%d\n"", sizeof(''tmp'));"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile
$ RETURN
$!
$!: locate header file
$findhdr:
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <''tmp'>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""define\n"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ RETURN
$!
$!: define an alternate in-header-list? function
$inhdr:
$!
$ GOSUB findhdr
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   echo4 "<''tmp'> found."
$   tmp = "define"
$ ELSE
$   echo4 "<''tmp'> NOT found."
$   tmp = "undef"
$ ENDIF
$ RETURN
$!
$!: define an is-in-libc? function
$inlibc: 
$ GOSUB link_ok
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   echo4 "''tmp'() found."
$   tmp = "define"
$ ELSE
$   echo4 "''tmp'() NOT found."
$   tmp = "undef"
$ ENDIF
$ RETURN
$!
$!: define a shorthand compile call
$compile:
$ GOSUB link_ok
$just_mcr_it:
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   OPEN/WRITE CONFIG []try.out
$   DEFINE/USER_MODE SYS$ERROR CONFIG
$   DEFINE/USER_MODE  SYS$OUTPUT CONFIG
$   MCR []try.exe
$   CLOSE CONFIG
$   OPEN/READ CONFIG []try.out
$   READ CONFIG tmp
$   CLOSE CONFIG
$   DELETE/NOLOG/NOCONFIRM []try.out;
$   DELETE/NOLOG/NOCONFIRM []try.exe;
$ ELSE
$   tmp = "" ! null string default
$ ENDIF
$ RETURN
$!
$link_ok:
$ GOSUB compile_ok
$ DEFINE/USER_MODE SYS$ERROR _NLA0:
$ DEFINE/USER_MODE SYS$OUTPUT _NLA0:
$ SET NOON
$ IF Needs_Opt
$ THEN
$   'ld' try.obj,try.opt/opt
$   link_status = $status
$ ELSE
$   'ld' try.obj
$   link_status = $status
$ ENDIF
$ SET ON
$ IF F$SEARCH("try.obj") .NES. "" THEN DELETE/NOLOG/NOCONFIRM try.obj;
$ RETURN
$!
$!: define a shorthand compile call for compilations that should be ok.
$compile_ok:
$ DEFINE/USER_MODE SYS$ERROR _NLA0:
$ DEFINE/USER_MODE SYS$OUTPUT _NLA0:
$ SET NOON
$ 'Checkcc' try.c
$ compile_status = $status
$ SET ON
$ DELETE/NOLOG/NOCONFIRM try.c;
$ RETURN
$!
$beyond_compile_ok:
$!
$! Check for __STDC__
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "#ifdef __STDC__"
$ WS "printf(""42\n"");"
$ WS "#elif defined (__STD_ANSI)" ! for CXX
$ WS "printf(""42\n"");"
$ WS "#else"
$ WS "printf(""1\n"");"
$ WS "#endif"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile
$ cpp_stuff=tmp
$ IF F$INTEGER(tmp) .eq. 42
$ THEN
$   echo4 "Oh!  Smells like ANSI's been here."
$   echo "We can catify or stringify, separately or together!"
$ ENDIF
$!
$! Check for double size
$!
$ echo4 "Checking to see how big your double precision numbers are..."
$ tmp="double"
$ GOSUB type_size_check
$ doublesize = tmp
$ echo "Your double is ''doublesize' bytes long."
$!
$! Check for long double size
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#pragma message disable ALL"  ! VAX compilers may have distracting informationals
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""%d\n"", sizeof(long double));"
$ WS "exit(0);"
$ WS "}"
$ CS
$ echo4 "Checking to see if you have long double..."
$ GOSUB link_ok
$ IF link_status .NE. good_link
$ THEN
$   longdblsize="0"
$   longdblkind="0"
$   longdblinfbytes="undef"
$   longdblnanbytes="undef"
$   longdblmantbits="undef"
$   d_longdbl="undef"
$   echo "You do not have long double."
$ ELSE
$   echo "You have long double."
$   echo4 "Checking to see how big your long doubles are..."
$   GOSUB just_mcr_it
$   longdblsize = tmp
$   longdblkind = "1"
$   longdblinfbytes="0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f"
$   longdblnanbytes="0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff"
$   longdblmantbits="112"
$   d_longdbl = "define"
$   echo "Your long doubles are ''longdblsize' bytes long."
$ ENDIF
$!
$ IF d_longdbl .OR. d_longdbl .EQS. "define"
$ THEN
$   d_PRIEUldbl = "define"
$   d_PRIFUldbl = "define"
$   d_PRIGUldbl = "define"
$   d_PRIeldbl = "define"
$   d_PRIfldbl = "define"
$   d_PRIgldbl = "define"
$   sPRIEUldbl = """LE"""
$   sPRIFUldbl = """LF"""
$   sPRIGUldbl = """LG"""
$   sPRIeldbl = """Le"""
$   sPRIfldbl = """Lf"""
$   sPRIgldbl = """Lg"""
$ ELSE
$   d_PRIEUldbl = "undef"
$   d_PRIFUldbl = "undef"
$   d_PRIGUldbl = "undef"
$   d_PRIeldbl = "undef"
$   d_PRIfldbl = "undef"
$   d_PRIgldbl = "undef"
$   sPRIEUldbl = ""
$   sPRIFUldbl = ""
$   sPRIGUldbl = ""
$   sPRIeldbl = ""
$   sPRIfldbl = ""
$   sPRIgldbl = ""
$ ENDIF
$ d_SCNfldbl = d_PRIfldbl
$ sSCNfldbl = sPRIfldbl ! expect consistency
$!
$!: check for long long
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""%d\n"", sizeof(long long));"
$ WS "exit(0);"
$ WS "}"
$ CS
$ echo4 "Checking to see if you have long long..."
$ GOSUB link_ok
$ IF link_status .NE. good_link
$ THEN
$   longlongsize="0"
$   d_longlong="undef"
$   echo "You do not have long long."
$ ELSE
$   echo "You have long long."
$   echo4 "Checking to see how big your long longs are..."
$   GOSUB just_mcr_it
$   longlongsize = tmp
$   d_longlong = "define"
$   echo "Your long longs are ''longlongsize' bytes long."
$ ENDIF
$!
$! Check the prototype for getgid
$!
$ echo "Looking for the type for group ids returned by getgid()."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "int main()"
$ WS "{"
$ WS "gid_t foo;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .NE. good_compile
$ THEN
$!   Okay, gid_t failed. Must be unsigned int
$   gidtype = "unsigned int"
$   echo4 "assuming ""''gidtype'""."
$ ELSE
$   gidtype = "gid_t"
$   echo4 "gid_t found."
$ ENDIF
$!
$! Check to see if we've got dev_t
$!
$ echo "Looking for the type for dev."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "int main()"
$ WS "{"
$ WS "dev_t foo;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .NE. good_compile
$ THEN
$!   Okay, dev_t failed. Must be unsigned int
$   devtype = "unsigned int"
$   echo4 "assuming ""''devtype'""."
$ ELSE
$   devtype = "dev_t"
$   echo4 "dev_t found."
$ ENDIF
$!
$! Check to see if we've got unistd.h (which we ought to, but you never know)
$!
$ i_netdb = "undef"
$ tmp = "unistd.h"
$ GOSUB inhdr
$ i_unistd = tmp
$!
$! Check to see if we've got utime.h (which we should use if we have)
$!
$ i_netdb = "undef"
$ tmp = "utime.h"
$ GOSUB inhdr
$ i_utime = tmp
$!
$! do we have getppid()?
$!
$ IF i_unistd .EQS. "define"
$ THEN
$   OS
$   WS "#include <stdio.h>"
$   WS "#include <unistd.h>"
$   WS "int main() {"
$   WS "printf(""%d\n"",getppid());"
$   WS "return(0);"
$   WS "}"
$   CS
$   tmp = "getppid"
$   GOSUB inlibc
$   d_getppid = tmp
$ ELSE
$   d_getppid = "undef"
$ ENDIF
$!
$!: see if this is a libutil.h system
$!
$ tmp = "libutil.h"
$ GOSUB inhdr
$ i_libutil = tmp
$!
$! Check to see if we've got shadow.h (probably not, but...)
$!
$ tmp = "shadow.h"
$ GOSUB inhdr
$ i_shadow = tmp
$!
$! Check to see if we've got socks.h (probably not, but...)
$!
$ tmp = "socks.h"
$ GOSUB inhdr
$ i_socks = tmp
$!
$! Check the prototype for select
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   WS "#include <types.h>"
$   IF i_unistd .EQS. "define" THEN WS "#include <unistd.h>"
$   WS "#include <time.h>"
$   WS "#include <socket.h>"
$   WS "int main()"
$   WS "{"
$   WS "fd_set *foo;"
$   WS "int bar;"
$   WS "foo = NULL;"
$   WS "bar = select(2, foo, foo, foo, NULL);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   GOSUB compile_ok
$   IF compile_status .NE. good_compile
$   THEN
$!   Okay, select failed.  Must be an int *
$     selecttype = "int *"
$     echo4 "select() NOT found."
$   ELSE
$     selecttype="fd_set *"
$     echo4 "select() found."
$   ENDIF
$ ELSE
$   ! No sockets, so stick in an int * : no select, so pick a harmless default
$   selecttype = "int *"
$ ENDIF
$!
$! Check to see if fd_set exists
$!
$ echo "Checking to see how well your C compiler handles fd_set and friends ..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ IF Has_Dec_C_Sockets
$ THEN
$   WS "#include <time.h>"
$   WS "#include <socket.h>"
$ ENDIF
$ WS "int main()"
$ WS "{"
$ WS "fd_set *foo;"
$ WS "int bar;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .ne. good_compile
$ THEN
$!  Okay, fd_set failed. Must not exist
$   d_fd_set = "undef"
$   echo4 "Hmm, your compiler has some difficulty with fd_set."
$ ELSE
$   d_fd_set="define"
$   echo4 "Well, your system knows about the normal fd_set typedef..."
$ ENDIF
$!
$! Check for inttypes.h
$!
$ tmp = "inttypes.h"
$ GOSUB inhdr
$ i_inttypes = tmp
$!
$! Check to see if off64_t exists
$!
$ echo4 "Checking to see if you have off64_t..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "#''i_inttypes' IIH"
$ WS "#ifdef IIH"
$ WS "#include <inttypes.h>"
$ WS "#endif"
$ WS "int main()"
$ WS "{"
$ WS "off64_t bar;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .EQ. good_compile
$ THEN
$   d_off64_t="define"
$   echo "You have off64_t."
$ ELSE
$   d_off64_t = "undef"
$   echo "You do not have off64_t."
$ ENDIF
$!
$! Check to see if fpos64_t exists
$!
$ echo4 "Checking to see if you have fpos64_t..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "#''i_inttypes' IIH"
$ WS "#ifdef IIH"
$ WS "#include <inttypes.h>"
$ WS "#endif"
$ WS "int main()"
$ WS "{"
$ WS "fpos64_t bar;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .EQ. good_compile
$ THEN
$   d_fpos64_t="define"
$   echo "You have fpos64_t."
$ ELSE
$   d_fpos64_t = "undef"
$   echo "You do not have fpos64_t."
$ ENDIF
$!
$! Check to see if int64_t exists
$!
$ echo4 "Checking to see if you have int64_t..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "#''i_inttypes' IIH"
$ WS "#ifdef IIH"
$ WS "#include <inttypes.h>"
$ WS "#endif"
$ WS "int main()"
$ WS "{"
$ WS "int64_t bar;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .EQ. good_compile
$ THEN
$   d_int64_t="define"
$   echo "You have int64_t."
$ ELSE
$   d_int64_t = "undef"
$   echo "You do not have int64_t."
$ ENDIF
$!
$! Check to see if fseeko exists
$!
$ OS
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "FILE *f=NULL;"
$ WS "fseeko(f,(off_t)0,SEEK_SET);"
$ WS "return(0);"
$ WS "}"
$ CS
$ tmp = "fseeko"
$ GOSUB inlibc
$ d_fseeko = tmp
$!
$! Check to see if ftello exists
$!
$ OS
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "FILE *f=NULL; off_t o=0;"
$ WS "o=ftello(f);"
$ WS "return(0);"
$ WS "}"
$ CS
$ tmp = "ftello"
$ GOSUB inlibc
$ d_ftello = tmp
$!
$!: see if this is a netdb.h system
$ IF Has_Dec_C_Sockets
$ THEN 
$   tmp = "netdb.h"
$   GOSUB inhdr
$   i_netdb = tmp
$ ENDIF
$!
$! Check for h_errno
$!
$ echo4 "Checking to see if you have h_errno..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ IF i_unistd .EQS. "define" THEN WS "#include <unistd.h>"
$ IF i_netdb  .EQS. "define" THEN WS "#include <netdb.h>"
$ WS "int main()"
$ WS "{"
$ WS "h_errno = 3;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   d_herrno="define"
$   echo "You have h_errno."
$ ELSE
$   d_herrno="undef"
$   echo "You do not have h_errno."
$ ENDIF
$!
$! Check to see if gethostname exists
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   WS "#include <types.h>"
$   WS "#include <time.h>"
$   WS "#include <socket.h>"
$   WS "int main()"
$   WS "{"
$   WS "char name[100];"
$   WS "int bar, baz;"
$   WS "bar = 100;"
$   WS "baz = gethostname(name, bar);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   GOSUB link_ok
$   IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$   THEN
$     d_gethname="define"
$     echo4 "gethostname() found."
$   ELSE
$     d_gethname="undef"
$   ENDIF
$ ELSE
$   ! No sockets, so no gethname
$   d_gethname = "undef"
$ ENDIF
$!
$! Check for sys/file.h
$!
$ tmp = "sys/file.h"
$ GOSUB inhdr
$ i_sysfile = tmp
$!
$!
$! Check for sys/ioctl.h
$!
$ tmp = "sys/ioctl.h"
$ GOSUB inhdr
$ i_sysioctl = tmp
$!
$! Check for sys/utsname.h
$!
$ tmp = "sys/utsname.h"
$ GOSUB inhdr
$ i_sysutsname = tmp
$!
$! Check for syslog.h
$!
$ tmp = "syslog.h"
$ GOSUB inhdr
$ i_syslog = tmp
$!
$! Check for poll.h
$!
$ tmp = "poll.h"
$ GOSUB inhdr
$ i_poll = tmp
$!
$! Check for sys/uio.h
$!
$ tmp = "sys/uio.h"
$ GOSUB inhdr
$ i_sysuio = tmp
$!
$! Check for sys/mode.h
$!
$ tmp = "sys/mode.h"
$ GOSUB inhdr
$ i_sysmode = tmp
$!
$! Check for poll.h
$!
$ tmp = "sys/poll.h"
$ gosub inhdr
$ i_syspoll = tmp
$!
$! Check for sys/access.h
$!
$ tmp = "sys/access.h"
$ GOSUB inhdr
$ i_sysaccess = tmp
$!
$! Check for sys/security.h
$!
$ tmp = "sys/security.h"
$ GOSUB inhdr
$ i_syssecrt = tmp
$!
$! Check for fcntl.h
$!
$ tmp = "fcntl.h"
$ GOSUB inhdr
$ i_fcntl = tmp
$!
$! Check for fcntl
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <fcntl.h>"
$ WS "int main()"
$ WS "{"
$ WS "fcntl(1,2,3);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "fcntl"
$ GOSUB inlibc
$ d_fcntl = tmp
$!
$! Check for fcntl locking capability
$!
$ echo4 "Checking if fcntl-based file locking works... "
$ tmp = "undef"
$ IF d_fcntl .EQS. "define"
$ THEN
$   OS
$   WS "#include <stdio.h>"
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <fcntl.h>"
$   WS "#include <unistd.h>"
$   WS "int main() {"
$   WS "#if defined(F_SETLK) && defined(F_SETLKW)"
$   WS "     struct flock flock;"
$   WS "     int retval, fd;"
$   WS "     fd = open(""[-]perl.c"", O_RDONLY);"
$   WS "     flock.l_type = F_RDLCK;"
$   WS "     flock.l_whence = SEEK_SET;"
$   WS "     flock.l_start = flock.l_len = 0;"
$   WS "     retval = fcntl(fd, F_SETLK, &flock);"
$   WS "     close(fd);"
$   WS "     (retval < 0 ? printf(""undef\n"") : printf(""define\n""));"
$   WS "#else"
$   WS "     printf(""undef\n"");"
$   WS "#endif"
$   WS "}"
$   CS
$   GOSUB link_ok
$   IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$   THEN
$     GOSUB just_mcr_it
$     IF tmp .EQS. "define"
$     THEN
$       echo4 "Yes, it seems to work."
$     ELSE
$       echo4 "Nope, it didn't work."
$     ENDIF
$   ELSE
$     echo4 "I'm unable to compile the test program, so I'll assume not."
$     tmp = "undef"
$   ENDIF
$ ELSE
$   echo4 "Nope, since you don't even have fcntl()."
$ ENDIF
$ d_fcntl_can_lock = tmp
$!
$! Check for memchr
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "char * place;"
$ WS "place = (char *)memchr(""foo"", 47, 3);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "memchr"
$ GOSUB inlibc
$ d_memchr = tmp
$!
$! Check for strtoull
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "unsigned __int64 result;"
$ WS "result = strtoull(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtoull"
$ GOSUB inlibc
$ d_strtoull = tmp
$!
$! Check for strtouq
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "unsigned __int64 result;"
$ WS "result = strtouq(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtouq"
$ GOSUB inlibc
$ d_strtouq = tmp
$!
$! Check for strtoll
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "__int64 result;"
$ WS "result = strtoll(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtoll"
$ GOSUB inlibc
$ d_strtoll = tmp
$!
$! Check for strtoq
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "__int64 result;"
$ WS "result = strtoq(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtoq"
$ GOSUB inlibc
$ d_strtoq = tmp
$!
$! Check for strtold
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "long double result;"
$ WS "result = strtold(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtold"
$ GOSUB inlibc
$ d_strtold = tmp
$!
$! Check for atoll
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS " __int64 result;"
$ WS "result = atoll(""123123"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "atoll"
$ GOSUB inlibc
$ d_atoll = tmp
$!
$! Check for atolf
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "long double"
$ WS "result = atolf(""123123"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "atolf"
$ GOSUB inlibc
$ d_atolf = tmp
$!
$! Check for access
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "access(""foo"", F_OK);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "acess"
$ GOSUB inlibc
$ d_access = tmp
$!
$! Check for bzero
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <strings.h>"
$ WS "int main()"
$ WS "{"
$ WS "char foo[10];"
$ WS "bzero(foo, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "bzero"
$ GOSUB inlibc
$ d_bzero = tmp
$!
$! Check for bcopy
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <strings.h>"
$ WS "int main()"
$ WS "{"
$ WS "char foo[10], bar[10];"
$ WS "bcopy(""foo"", bar, 3);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "bcopy"
$ GOSUB inlibc
$ d_bcopy = tmp
$!
$! Check for mkstemp
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "mkstemp(""foo"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "mkstemp"
$ GOSUB inlibc
$ d_mkstemp = tmp
$!
$! Check for mkstemps
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "mkstemps(""foo"", 1);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "mkstemps"
$ GOSUB inlibc
$ d_mkstemps = tmp
$!
$! Check for mkdtemp
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "mkdtemp(""foo"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "mkdtemp"
$ GOSUB inlibc
$ d_mkdtemp = tmp
$!
$! Check for poll
$!
$ if i_poll .eqs. "define"
$ then
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <poll.h>"
$   WS "int main()"
$   WS "{"
$   WS "struct pollfd pfd;"
$   WS "int count=poll(&pfd,1,0);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "poll"
$   GOSUB inlibc
$   d_poll = tmp
$ else
$   d_poll = "undef"
$ endif
$!
$! Check for setvbuf
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "FILE *foo;"
$ WS "char Buffer[99];"
$ WS "foo = fopen(""foo"", ""r"");"
$ WS "setvbuf(foo, Buffer, 0, 0);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "setvbuf"
$ GOSUB inlibc
$ d_setvbuf = tmp
$!
$! Check for the shm* routines.
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <sys/shm.h>"
$ WS "#include <sys/stat.h>"
$ WS "int shmget(key_t key, size_t size, int shmflg);"
$ WS "void* shmat(int shmid,const void *shmaddr,int shmflg);"
$ WS "int shmctl(int shmid,  int cmd, struct shmid_ds *buf);"
$ WS "int shmdt(const void *shmaddr);"
$ WS "int main() {"
$ WS "int shm_id = shmget(IPC_PRIVATE, 8, S_IRWXU);"
$ WS "if (shm_id == -1) printf(""0\n""); else printf (""1\n"");"
$ WS "}"
$ CS
$ GOSUB compile
$ IF tmp .EQS. "1"
$ THEN
$   d_shm = "define"
$   d_shmat = "define"
$   d_shmatprototype = "define"
$   d_shmctl = "define"
$   d_shmdt = "define"
$   d_shmget = "define"
$   shmattype = "void *"
$ ELSE
$   d_shm = "undef"
$   d_shmat = "undef"
$   d_shmatprototype = "undef"
$   d_shmctl = "undef"
$   d_shmdt = "undef"
$   d_shmget = "undef"
$   shmattype = "undef"
$ ENDIF
$!
$! Check for setenv
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "setenv(""FOO"", ""BAR"", 0);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "setenv"
$ GOSUB inlibc
$ d_setenv = tmp
$!
$! Check for setproctitle
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "setproctitle(""%s"", ""FOO"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "setproctitle"
$ GOSUB inlibc
$ d_setproctitle = tmp
$!
$! Check for <netinet/in.h>
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   tmp = "netinet/in.h"
$   GOSUB inhdr
$   i_niin = tmp
$ ELSE
$   i_niin="undef"
$ ENDIF
$!
$! Check for <arpa/inet.h>
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   tmp = "arpa/inet.h"
$   GOSUB inhdr
$   i_arpainet = tmp
$ ELSE
$   i_arpainet="undef"
$ ENDIF
$!
$! Check for <sys/un.h>
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   tmp = "sys/un.h"
$   GOSUB inhdr
$   i_sysun = tmp
$ ELSE
$   i_sysun="undef"
$ ENDIF
$!
$!
$! Check for <netinet/tcp.h>
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   tmp = "netinet/tcp.h"
$   GOSUB inhdr
$   i_netinettcp = tmp
$ ELSE
$   i_netinettcp="undef"
$ ENDIF
$!
$! Check for endhostent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "endhostent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "endhostent"
$   GOSUB inlibc
$   d_endhent = tmp
$ ELSE
$   d_endhent="undef"
$ ENDIF
$!
$! Check for endnetent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "endnetent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "endnetent"
$   GOSUB inlibc
$   d_endnent = tmp
$ ELSE
$   d_endnent="undef"
$ ENDIF
$!
$! Check for endprotoent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "endprotoent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "endprotoent"
$   GOSUB inlibc
$   d_endpent = tmp
$ ELSE
$   d_endpent="undef"
$ ENDIF
$!
$! Check for endservent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "endservent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "endservent"
$   GOSUB inlibc
$   d_endsent = tmp
$ ELSE
$   d_endsent="undef"
$ ENDIF
$!
$! Check for sethostent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "sethostent(1);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "sethostent"
$   GOSUB inlibc
$   d_sethent = tmp
$ ELSE
$   d_sethent="undef"
$ ENDIF
$!
$! Check for setnetent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "setnetent(1);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "setnetent"
$   GOSUB inlibc
$   d_setnent = tmp
$ ELSE
$   d_setnent="undef"
$ ENDIF
$!
$! Check for setprotoent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "setprotoent(1);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "setprotoent"
$   GOSUB inlibc
$   d_setpent = tmp
$ ELSE
$   d_setpent="undef"
$ ENDIF
$!
$! Check for setservent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "setservent(1);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "setservent"
$   GOSUB inlibc
$   d_setsent = tmp
$ ELSE
$   d_setsent="undef"
$ ENDIF
$!
$! Check for gethostent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "gethostent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "gethostent"
$   GOSUB inlibc
$   d_gethent = tmp
$ ELSE
$   d_gethent="undef"
$ ENDIF
$!
$! Check for getnetent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "getnetent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "getnetent"
$   GOSUB inlibc
$   d_getnent = tmp
$ ELSE
$   d_getnent="undef"
$ ENDIF
$!
$! Check for getprotoent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "getprotoent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "getprotoent"
$   GOSUB inlibc
$   d_getpent = tmp
$ ELSE
$   d_getpent="undef"
$ ENDIF
$!
$! Check for getservent
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "getservent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "getservent"
$   GOSUB inlibc
$   d_getsent = tmp
$ ELSE
$   d_getsent="undef"
$ ENDIF
$!
$!
$! Check for sa_len
$!
$ echo4 "Checking the availability of sa_len in the sockaddr struct ..."
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#define _SOCKADDR_LEN"
$   WS "#include <types.h>"
$   WS "#include <socket.h>"
$   WS "#include <string.h>"
$   WS "int main() {"
$   WS "struct sockaddr sa;"
$   WS "memset((char *)&sa, 0, sizeof(sa));"
$   WS "return (sa.sa_len);"
$   WS "}"
$   CS
$   GOSUB compile_ok
$   IF compile_status .EQ. good_compile
$   THEN
$     d_sockaddr_sa_len="define"
$     echo "You have sa_len in the sockaddr struct."
$   ELSE
$     d_sockaddr_sa_len="undef"
$     echo "You do not have sa_len in the sockaddr struct."
$   ENDIF
$ ELSE
$   d_sockaddr_sa_len="undef"
$   echo "You do not have sa_len in the sockaddr struct."
$ ENDIF
$!
$! Check for sin6_scope_id
$!
$ echo4 "Checking the availability of sin6_scope_id in the struct sockaddr_in6 ..."
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#include <types.h>"
$   WS "#include <socket.h>"
$   WS "#include <in.h>"
$   WS "#include <string.h>"
$   WS "int main() {"
$   WS "struct sockaddr_in6 sin6;"
$   WS "memset((char *)&sin6, 0, sizeof(sin6));"
$   WS "return (sin6.sin6_scope_id);"
$   WS "}"
$   CS
$   GOSUB compile_ok
$   IF compile_status .EQ. good_compile
$   THEN
$     d_sin6_scope_id="define"
$     echo "You have sin6_scope_id in the sockaddr_in6 struct."
$   ELSE
$     d_sin6_scope_id="undef"
$     echo "You do not have sin6_scope_id in the sockaddr_in6 struct."
$   ENDIF
$ ELSE
$   d_sin6_scope_id="undef"
$   echo "You do not have sin6_scope_id in the sockaddr_in6 struct."
$ ENDIF
$!
$! Check for nanosleep
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <time.h>"
$ WS "int main()"
$ WS "{"
$ WS "int asleep = nanosleep(NULL,NULL);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "nanosleep"
$ GOSUB inlibc
$ d_nanosleep = tmp
$!
$! Check for socklen_t
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   echo4 "Checking to see if you have socklen_t..."
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   WS "int main()"
$   WS "{"
$   WS "socklen_t x = 16;"
$   WS "exit(0);"
$   WS "}"
$   CS
$   GOSUB link_ok
$   IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$   THEN
$     d_socklen_t="define"
$     echo "You have socklen_t."
$   ELSE
$     d_socklen_t="undef"
$     echo "You do not have socklen_t."
$   ENDIF
$ ELSE
$   d_socklen_t="undef"
$ ENDIF
$!
$! Check for pthread_yield
$!
$ IF use_threads
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <pthread.h>"
$   WS "#include <stdio.h>"
$   WS "int main()"
$   WS "{"
$   WS "pthread_yield();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "pthread_yield"
$   GOSUB inlibc
$   d_pthread_yield = tmp
$ ELSE
$   d_pthread_yield="undef"
$ ENDIF
$!
$! Check for sched_yield
$!
$ IF use_threads
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <pthread.h>"
$   WS "#include <stdio.h>"
$   WS "int main()"
$   WS "{"
$   WS "sched_yield();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "sched_yield"
$   GOSUB inlibc
$   d_sched_yield = tmp
$   IF d_sched_yield .EQS. "define"
$   THEN sched_yield = "sched_yield"
$   ELSE sched_yield = " "
$   ENDIF
$ ELSE
$   d_sched_yield="undef"
$   sched_yield = " "
$ ENDIF
$!
$! Check for pthread_attr_setscope and PTHREAD_SCOPE_SYSTEM.
$! (The actual test is to be written.)
$!
$ d_pthread_attr_setscope="undef"
$!
$! Check for generic pointer size
$!
$ echo4 "Checking to see how big your pointers are..." 
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "int foo;"
$ WS "foo = sizeof(char *);"
$ WS "printf(""%d\n"", foo);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "char *"
$ GOSUB type_size_check
$ ptrsize = tmp
$ echo "Your pointers are ''ptrsize' bytes long."
$!
$! Check for size_t size
$!
$ tmp = "size_t"
$ zzz = tmp
$ echo4 "Checking the size of ''zzz'..."
$ GOSUB type_size_check
$ sizesize = tmp
$ echo "Your ''zzz' size is ''sizesize' bytes."
$!
$! Check for _LARGEFILE capability.
$!
$ off_t_size = 4
$ OS
$ WS "#define _LARGEFILE"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""%d\n"", sizeof(off_t));"
$ WS "return(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ IF link_status .EQ. good_link
$ THEN
$   GOSUB just_mcr_it
$   off_t_size = tmp
$ ENDIF
$ echo "Your off_t size is ''off_t_size' bytes when _LARGEFILE is defined."
$ IF off_t_size .ne. 8 .AND. (uselargefiles .OR. uselargefiles .eqs. "define")
$ THEN
$   echo4 "You configured with -Duselargefiles but your CRTL does not support _LARGEFILE."
$   echo4 "I'm disabling large file support."
$   uselargefiles = "undef"
$ ENDIF
$!
$! Check for st_ino size.
$!
$ st_ino_size = 4
$ OS
$ WS "#include <sys/stat.h>"
$ WS "#include <stdio.h>"
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>
$ WS "#endif"
$ WS "int main() {
$ WS "#''uselargefiles' _LARGEFILE"
$ WS "#ifdef _LARGEFILE"
$ WS "    printf(""%d\n"", sizeof(__ino64_t));"
$ WS "#else"
$ WS "    printf(""%d\n"", sizeof(unsigned short)*3);"
$ WS "#endif"
$ WS "    exit(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ IF link_status .EQ. good_link
$ THEN
$   GOSUB just_mcr_it
$   st_ino_size = tmp
$ ENDIF
$ echo "Your st_ino size is ''st_ino_size' bytes."
$!
$! Tests for hard link, symbolic links, and 7.3 + CRTL features
$!
$  d_lchown = "undef"
$  d_link = "undef"
$  d_lstat = "undef"
$  d_readlink = "undef"
$  d_symlink = "undef"
$  d_realpath = "undef"
$!
$! Hard link support has been present since 7.3-1 except for the
$! easy to use DCL test to see if hardlinks are enabled on the build
$! disk.  That would require more work to test, and I am only testing
$! this on 8.2, so that is why the 8.2 test.
$!
$  IF (vms_ver .GES. "8.2")
$  THEN
$   IF f$getdvi("SYS$DISK","HARDLINKS_SUPPORTED")
$   THEN
$       echo "I Found 64 bit OpenVMS 8.2 or later, and hard links enabled on build disk."
$	echo "I will build with hard link support"
$	d_link = "define"
$   ELSE
$	echo "I Found 64 bit OpenVMS 8.2 or later, and hard links disabled on build disk."
$	echo "I will not build with hard link support."
$   ENDIF
$  ELSE
$    echo4 "I can not detect if your CRTL and build disk support hard links."
$    echo4 "I am disabling hard link support."
$  ENDIF
$!
$  IF uselargefiles .OR. uselargefiles .eqs. "define"
$  THEN
$    IF (vms_ver .GES. "8.2")
$    THEN
$      echo4 "Largefile support enabled, so enabling standard stat support too."
$      usestdstat = "y"
$      echo4 -
   "Looking for the realpath() function to indicate symbolic link support..."
$      OS
$      WS "#include <stdlib.h>"
$      WS "char *realpath(const char *file_name, char * resolved_name, ...);"
$      WS "int main()"
$      WS "{"
$      WS "char result[255];"
$      WS "realpath(""foo"",result);"
$      WS "exit(0);"
$      WS "}"
$      CS
$      GOSUB link_ok
$      IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$      THEN
$        echo -
           "Found realpath() which indicates symbolic link support is present."
$	 d_lchown = "define"
$	 d_lstat = "define"
$	 d_readlink = "define"
$	 d_symlink = "define"
$!	 d_realpath = "define" ! Perl will not put it in the config.h file?
$!	Perl apparently does not use a built in realpath() on other platforms,
$!      but there is a severe performance penatly on OpenVMS to use the Perl
$!      script that implements a realpath().  The d_symlink symbol is used
$!      as a replacement for the d_realpath since they are related and both
$!      were activated by the CRTL at the same time.
$!
$	 ELSE
$	  echo4 "Your system does not support symbolic links."
$	  echo4 "I am disabling symbolic link support."
$	ENDIF
$    ELSE
$       echo4 "Your system does not support symbolic links."
$       echo4 "I am disabling symbolic link support."
$    ENDIF
$  ELSE
$    IF (vms_ver .GES. "8.2")
$    THEN
$       echo4 "-Duselargefiles is required for symbolic link support."
$       echo4 "You did not specify that, so I am disabling symbolic link support."
$    ENDIF
$  ENDIF
$!
$!
$! Check for grp.h -- should be 7.3 and later, but test to be sure
$!
$ tmp = "grp.h"
$ GOSUB inhdr
$ i_grp = tmp
$!
$! VMS V7.3-2 powered options
$! We know that it is only available for V7.3-2 and later on 64 bit platforms.
$!
$  d_getgrgid_r = "undef"
$  getgrgid_r_proto = "0"
$  d_getgrnam_r = "undef"
$  getgrnam_r_proto = "0"
$  d_getpgid = "undef"
$  d_getpgrp = "undef"
$! N.B.  We already have home-grown thread-safe versions of
$!       getpwnam and getpwuid -- no need to use CRTL versions
$  d_getpwnam_r = "undef"
$  getpwnam_r_proto = "0"
$  d_getpwuid_r = "undef"
$  getpwuid_r_proto = "0"
$  echo "Asumming 64-bit OpenVMS ''vms_ver' -- will build with V7.3-2 routines"
$  d_getgrgid_r = "define"
$  getgrgid_r_proto = "1"
$  d_getgrnam_r = "define"
$  getgrnam_r_proto = "1"
$  if d_symlink .or. d_symlink .EQS. "define"
$  then
$!	 FIXME: Need to find how to activate this.
$!       d_getpgid = "define"
$!       d_getpgrp = "define"
$  endif
$  d_setgrent = "define"
$  d_ttyname_r = "define"
$  ttyname_r_proto = "1"
$  d_snprintf = "define"
$  d_vsnprintf = "define"
$!
$! VMS V7.3-2 powered options
$! We know that it is only available for V7.3-2 and later on 64 bit platforms.
$! Only implementing right now on 8.2 because that is what I am testing
$! These functions may require POSIX UIDs/GIDs to be active, so I am
$! not activating the features at this time, just preparing this file
$! to easily use them in the future.
$!
$  d_seteuid = "undef"
$  d_setpgid = "undef"
$  d_setpgrp = "undef"
$  d_setregid = "undef"
$  d_setreuid = "undef"
$  d_setsid = "undef"
$  ! Disable this section for now.
$!$  if (vms_ver .GES. "8.2")
$  if .NOT. 1
$  then
$    echo "Found 64 bit OpenVMS ''vms_ver' -- will build with V7.3-2 UID setting routines"
$    d_seteuid = "define"
$    d_setpgid = "define"
$    d_setpgrp = "define"
$    d_setregid = "define"
$    d_setreuid = "define"
$    d_setsid = "define"
$  endif
$!
$! VMS V8 powered options
$! We know that it is only available for 8.2 and later on 64 bit platforms.
$!
$  d_fstatvfs = "undef"
$  d_statvfs = "undef"
$  i_sysstatvfs = "undef"
$  if (vms_ver .GES. "8.2")
$  then
$    echo "Found 64 bit OpenVMS ''vms_ver' -- will build with 8.2 routines"
$    d_fstatvfs = "define"
$    d_statvfs = "define"
$    i_sysstatvfs = "define"
$  endif
$!
$! Check rand48 and its ilk
$!
$ echo4 "Using our internal random number implementation..."
$!
$ randfunc = "Perl_drand48"
$ drand01 = "Perl_drand48()"
$ seedfunc = "Perl_drand48_init"
$ randbits = "48"
$ randseedtype = "U32"
$ d_drand48proto = "define"
$!
$! Done with compiler checks. Clean up.
$ IF F$SEARCH("try.c")  .NES."" THEN DELETE/NOLOG/NOCONFIRM try.c;*
$ IF F$SEARCH("try.obj").NES."" THEN DELETE/NOLOG/NOCONFIRM try.obj;*
$ IF F$SEARCH("try.exe").NES."" THEN DELETE/NOLOG/NOCONFIRM try.exe;*
$ IF F$SEARCH("try.opt").NES."" THEN DELETE/NOLOG/NOCONFIRM try.opt;*
$ IF F$SEARCH("try.out").NES."" THEN DELETE/NOLOG/NOCONFIRM try.out;*
$ IF ccname .EQS. "CXX"
$ THEN
$   CALL Cxx_demangler_cleanup
$ ENDIF
$!
$! Some that are compiler or VMS version sensitive
$!
$! Gnu C stuff
$ IF ccname .EQS. "GCC"
$ THEN
$   d_attribut="define"
$   vms_cc_type="gcc"
$ ELSE
$   IF ccname .EQS. "CXX"
$   THEN
$      vms_cc_type="cxx"
$   ELSE
$      vms_cc_type="cc"
$   ENDIF
$   d_attribut="undef"
$ ENDIF
$!
$ d_bcmp="define"
$ d_getitimer="define"
$ d_gettimeod="define"
$ d_mmap="define"
$ d_mprotect="define"
$ d_munmap="define"
$ d_msync="define"
$ d_ualarm="define"
$ d_uname="define"
$! d_unsetenv="define" ! Fix me - Activating requires changing VMS code
$ d_unsetenv="undef"   ! Change will be needed to allow GNV integration
$ d_clearenv="undef"
$ d_usleep="define"
$ d_setitimer="define"
$ d_sigaction="define"
$ d_siginfo_si_addr="define"
$ d_siginfo_si_band="define"
$ d_siginfo_si_errno="define"
$ d_siginfo_si_pid="define"
$ d_siginfo_si_status="define"
$ d_siginfo_si_uid="define"
$ d_siginfo_si_value="define"
$ d_sigprocmask="define"
$ d_truncate="define"
$ d_wait4="define"
$ d_index="define"
$ pidtype="pid_t"
$ sig_name1="ZERO HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE"
$ sig_name2=" ALRM TERM USR1 USR2 NUM18 NUM19 CHLD CONT STOP TSTP TTIN TTOU DEBUG"
$ sig_name2 = sig_name2 + " NUM27 WINCH"
$!* signal.h defines SIGRTMIN as 33 and SIGRTMAX as 64, but there is no 
$!* sigqueue function or other apparent means to do realtime signalling,
$!* so let's not try to include the realtime range for now.
$!* sig_name3=" NUM29 NUM30 NUM31 NUM32 RTMIN NUM34 NUM35 NUM36 NUM37 NUM38 NUM39 NUM40 NUM41 NUM42 NUM43"
$!* sig_name4=" NUM44 NUM45 NUM46 NUM47 NUM48 NUM49 NUM50 NUM51 NUM52 NUM53 NUM54 NUM55 NUM56 NUM57 NUM58"
$!* sig_name5=" NUM59 NUM60 NUM61 NUMT62 NUM63 RTMAX"
$ sig_name = sig_name1 + sig_name2
$ sig_num = ""
$ sig_num_init = ""
$ sig_name_init = ""
$ sig_index = 0
$!
$ PARSE_SIG_NAME_LOOP:
$!
$   tmp = F$ELEMENT(sig_index, " ", sig_name)
$   IF F$LENGTH(F$EDIT(tmp,"TRIM")) .eq. 0 THEN GOTO END_SIG_NAME_LOOP
$   sig_name_init = sig_name_init + """''tmp'"","
$   sig_num = sig_num + "''sig_index' "
$   sig_num_init = sig_num_init + "''sig_index',"
$   sig_index = sig_index + 1
$   GOTO PARSE_SIG_NAME_LOOP
$!
$ END_SIG_NAME_LOOP:
$!
$   sig_name_init = sig_name_init + "0"
$   sig_num_init = sig_num_init + "0"
$   sig_size = "''sig_index'"
$   sig_index = sig_index - 1
$   sig_count = "''sig_index'"
$   uidtype="uid_t"
$   d_pathconf="define"
$   d_fpathconf="define"
$   d_sysconf="define"
$   d_sigsetjmp="define"
$!
$!: see if tzname[] exists
$ OS
$ WS "#include <stdio.h>"
$ WS "#include <time.h>"
$ WS "int main() { extern short tzname[]; printf(""%hd"", tzname[0]); }"
$ CS
$ GOSUB compile_ok
$ IF compile_status .EQ. good_compile
$ THEN
$   d_tzname = "undef"
$   echo4 "tzname[] NOT found."
$ ELSE
$   d_tzname = "define"
$   echo4 "tzname[] found."
$ ENDIF
$ IF F$SEARCH("try.obj") .NES. "" THEN DELETE/NOLOG/NOCONFIRM try.obj;
$!
$ IF d_gethname .EQS. "undef" .AND. d_uname .EQS. "undef"
$ THEN
$   d_phostname="define"
$ ELSE
$   d_phostname="undef"
$ ENDIF
$!
$! Dec C alone
$ IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
$ THEN
$   vms_cc_type="decc"
$ ENDIF
$ d_faststdio="define"
$ d_locconv="define"
$ d_mblen="define"
$ d_mbstowcs="define"
$ d_mbtowc="define"
$ d_mktime="define"
$ d_nl_langinfo="define"
$ d_setlocale="define"
$ d_stdiobase="define"
$ d_stdio_cnt_lval="define"
$ d_stdio_ptr_lval="define"
$ d_stdstdio="define"
$ d_strcoll="define"
$ d_strxfrm="define"
$ i_langinfo="define"
$ i_locale="define"
$ d_stdio_ptr_lval_sets_cnt="undef"
$ d_stdio_ptr_lval_nochange_cnt="define"
$ usefaststdio="undef"
$!
$! Sockets?
$ if Has_Dec_C_Sockets
$ THEN
$   d_vms_do_sockets="define"
$   d_htonl="define"
$   d_socket="define"
$   d_sockpair = "undef"
$   if (vms_ver .GES. "8.2")
$   then
$     echo "Found 64 bit OpenVMS 8.2, will build with socketpair support"
$     d_sockpair = "define"
$   endif
$   d_select="define"
$   netdb_hlen_type="int"
$   netdb_host_type="char *"
$   netdb_name_type="char *"
$   netdb_net_type="long"
$   d_gethbyaddr="define"
$   d_gethbyname="define"
$   d_getnbyaddr="define"
$   d_getnbyname="define"
$   d_getpbynumber="define"
$   d_getpbyname="define"
$   d_getsbyport="define"
$   d_getsbyname="define"
$   d_gethostprotos="define"
$   d_getnetprotos="define"
$   d_getprotoprotos="define"
$   d_getservprotos="define"
$   socksizetype="size_t"
$ ELSE
$   d_vms_do_sockets="undef"
$   d_htonl="undef"
$   d_socket="undef"
$   d_socketpair = "undef"
$   d_select="undef"
$   netdb_hlen_type="int"
$   netdb_host_type="char *"
$   netdb_name_type="char *"
$   netdb_net_type="long"
$   d_gethbyaddr="undef"
$   d_gethbyname="undef"
$   d_getnbyaddr="undef"
$   d_getnbyname="undef"
$   d_getpbynumber="undef"
$   d_getpbyname="undef"
$   d_getsbyport="undef"
$   d_getsbyname="undef"
$   d_gethostprotos="undef"
$   d_getnetprotos="undef"
$   d_getprotoprotos="undef"
$   d_getservprotos="undef"
$   socksizetype="undef"
$ ENDIF
$! Threads
$ d_oldpthreads="undef"
$ IF use_threads
$ THEN
$   usethreads="define"
$   d_pthreads_created_joinable="define"
$ ELSE
$   usethreads="undef"
$   d_pthreads_created_joinable="undef"
$ ENDIF
$! 
$! new (5.005_62++) typedefs for primitives
$!
$ echo "Choosing the C types to be used for Perl's internal types..."
$ ivtype="long"
$ uvtype="unsigned long"
$ i8type="char"
$ u8type="unsigned char"
$ i16type="short"
$ u16type="unsigned short"
$ i32type="int"
$ u32type="unsigned int"
$ i64type="long long"
$ u64type="unsigned long long"
$ nvtype="double"
$!
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$   ivtype = "''i64type'"
$   uvtype = "''u64type'"
$ ELSE
$   i64size="undef"
$   u64size="undef"
$ ENDIF
$!
$ doublemantbits = "52"
$ IF uselongdouble .OR. uselongdouble .EQS. "define"
$ THEN
$   nvtype="long double"
$   nvmantbits = longdblmantbits
$ ELSE
$   nvmantbits = doublemantbits
$ ENDIF
$!
$ tmp = "''ivtype'"
$ GOSUB type_size_check
$ ivsize = tmp
$ IF use64bitint .OR. use64bitint .EQS. "define" THEN i64size = tmp
$ IF ivtype .eqs. "long"
$ THEN longsize = tmp
$ ELSE
$   tmp = "long"
$   GOSUB type_size_check
$   longsize = tmp
$ ENDIF
$!
$ tmp = "''uvtype'"
$ GOSUB type_size_check
$ uvsize = tmp
$ IF use64bitint .OR. use64bitint .EQS. "define" THEN u64size = tmp
$!
$ tmp = "''i8type'"
$ GOSUB type_size_check
$ i8size = tmp
$!
$ tmp = "''u8type'"
$ GOSUB type_size_check
$ u8size = tmp
$!
$ tmp = "''i16type'"
$ GOSUB type_size_check
$ i16size = tmp
$ IF i16type .eqs. "short"
$ THEN shortsize = tmp
$ ELSE
$   tmp = "short"
$   gosub type_size_check
$   shortsize = tmp
$ ENDIF
$!
$ tmp = "''u16type'"
$ GOSUB type_size_check
$ u16size = tmp
$!
$ tmp = "''i32type'"
$ GOSUB type_size_check
$ i32size = tmp
$ IF i32type .eqs. "int"
$ THEN intsize = tmp
$ ELSE
$   tmp = "int"
$   gosub type_size_check
$   intsize = tmp
$ ENDIF
$!
$ tmp = "''u32type'"
$ gosub type_size_check
$ u32size = tmp
$!
$ tmp = "''nvtype'"
$ GOSUB type_size_check
$ nvsize = tmp
$!
$ echo "(IV will be ""''ivtype'"", ''ivsize' bytes)"
$ echo "(UV will be ""''uvtype'"", ''uvsize' bytes)"
$ echo "(NV will be ""''nvtype'"", ''nvsize' bytes)"
$!
$ d_nv_preserves_uv = "undef"
$ echo4 "Checking how many bits of your UVs your NVs can preserve..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main() {"
$ WS "    ''uvtype' u = 0;"
$ WS "    int     n = 8 * ''uvsize';"
$ WS "    int     i;"
$ WS "    for (i = 0; i < n; i++) {"
$ WS "      u = u << 1 | (''uvtype')1;"
$ WS "      if ((''uvtype')(''nvtype')u != u)"
$ WS "        break;"
$ WS "    }"
$ WS "    printf(""%d\n"", i);"
$ WS "    exit(0);"
$ WS "}"
$ CS
$ GOSUB compile
$ nv_preserves_uv_bits = tmp
$ IF F$INTEGER(nv_preserves_uv_bits) .GE. (F$INTEGER(uvsize) * 8)
$ THEN
$   d_nv_preserves_uv = "define"
$   echo "Your NVs can preserve all ''nv_preserves_uv_bits' bits of your UVs."
$ ELSE
$   d_nv_preserves_uv = "undef"
$   echo "Your NVs can preserve only ''nv_preserves_uv_bits' bits of your UVs."	
$ ENDIF
$!
$ nv_overflows_integers_at = "0"
$ echo4 "Checking to find the largest integer value your NVs can hold..."
$ OS
$ WS "#include <stdio.h>"
$ WS ""
$ WS "typedef ''nvtype' NV;"
$ WS ""
$ WS "int"
$ WS "main() {"
$ WS "  NV value = 2;"
$ WS "  int count = 1;"
$ WS ""
$ WS "  while(count < 256) {"
$ WS "    volatile NV up = value + 1.0;"
$ WS "    volatile NV negated = -value;"
$ WS "    volatile NV down = negated - 1.0;"
$ WS "    volatile NV got_up = up - value;"
$ WS "    int up_good = got_up == 1.0;"
$ WS "    int got_down = down - negated;"
$ WS "    int down_good = got_down == -1.0;"
$ WS ""
$ WS "    if (down_good != up_good) {"
$ WS "      fprintf(stderr,"
$ WS "              ""Inconsistency - up %d %f; down %d %f; for 2**%d (%.20f)\n"","
$ WS "              up_good, (double) got_up, down_good, (double) got_down,"
$ WS "              count, (double) value);"
$ WS "      return 1;"
$ WS "    }"
$ WS "    if (!up_good) {"
$ WS "      while (1) {"
$ WS "        if (count > 8) {"
$ WS "          count -= 8;"
$ WS "          fputs(""256.0"", stdout);"
$ WS "        } else {"
$ WS "          count--;"
$ WS "          fputs(""2.0"", stdout);"
$ WS "        }"
$ WS "        if (!count) {"
$ WS "          puts("""");"
$ WS "          return 0;"
$ WS "        }"
$ WS "        fputs(""*"", stdout);"
$ WS "      }"
$ WS "    }"
$ WS "    value *= 2;"
$ WS "    ++count;"
$ WS "  }"
$ WS "  fprintf(stderr, ""Cannot overflow integer range, even at 2**%d (%.20f)\n"","
$ WS "          count, (double) value);"
$ WS "  return 1;"
$ WS "}"
$ CS
$ GOSUB compile
$ IF F$LENGTH(tmp) .GT. 0
$ THEN
$   IF F$EXTRACT(0,1,tmp) .EQS. "2"
$   THEN
$     echo "The largest integer your NVs can preserve is equal to ''tmp'"
$     nv_overflows_integers_at = tmp
$   ELSE
$     echo "Cannot determine the largest integer value your NVs can hold, unexpected output"
$     echo "''tmp'"
$   ENDIF
$ ELSE
$   echo "Cannot determine the largest integer value your NVs can hold"
$ ENDIF
$!
$! Check for signbit (must already know nvtype)
$!
$ echo4 "Checking to see if you have signbit() available to work on ''nvtype'..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <fp.h>"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "    ''nvtype' x = 0.0;"
$ WS "    ''nvtype' y = -0.0;"
$ WS "    if ((signbit(x) == 0) && (signbit(y) != 0))"
$ WS "        printf(""1\n"");"
$ WS "    else"
$ WS "        printf(""0\n"");"
$ WS "}"
$ CS
$ GOSUB compile
$ IF tmp .EQS. "1" 
$ THEN 
$     d_signbit = "define"
$     echo4 "Yes."
$ ELSE
$     d_signbit = "undef"
$     echo4 "Nope."
$ ENDIF
$!
$ echo4 "Checking if kill() uses SYS$FORCEX, can't be called from a signal handler,"
$ echo4 "or fails to handle a signal value of zero..."
$ kill_by_sigprc = "undef"
$ OS
$ WS "#include <stdio.h>"
$ WS "#include <signal.h>"
$ WS "#include <unistd.h>"
$ WS "void handler1(int s) { printf(""%d"",s); kill(getpid(),2); }"
$ WS "void handler2(int s) { printf(""%d"",s); }"
$ WS "main(){"
$ WS "    printf(""0"");"
$ WS "    signal(1,handler1);"
$ WS "    signal(2,handler2);"
$ WS "    kill(getpid(),1);"
$ WS "    sleep(1);"
$ WS "    kill(getpid(),0);"
$ WS "    printf(""3\n"");"
$ WS "}"
$ CS
$ ON ERROR THEN CONTINUE
$ GOSUB compile
$ IF tmp .NES. "0123"
$ THEN 
$   echo4 "Yes, it has at least one of those limitations."
$   echo4 "Checking whether we can use SYS$SIGPRC instead..."
$   OS
$   WS "#include <stdio.h>"
$   WS "#include <lib$routines.h>"
$   WS "unsigned long code = 0;"
$   WS "#define sys$sigprc SYS$SIGPRC"
$   WS "#ifdef __cplusplus"
$   WS "extern ""C"" {"
$   WS "#endif"
$   WS "    int sys$sigprc(unsigned int *,void *,unsigned int);"
$   WS "#ifdef __cplusplus"
$   WS "}"
$   WS "#endif"
$   WS "int handler(unsigned long *args) {"
$   WS "    code = args[1];"
$   WS "    return 1;"
$   WS "}"
$   WS "main() { "
$   WS "    int iss;"
$   WS "    lib$establish(handler);"
$   WS "    iss = sys$sigprc(0,0,0x1234);"
$   WS "    iss =  ((iss&1)==1 && code == 0x1234);" 
$   WS "    printf(""%d\n"",iss);"
$   WS "}"
$   CS
$   ON ERROR THEN CONTINUE
$   GOSUB compile
$   IF tmp .EQS. "1"
$   THEN
$       echo4 "Yep, we can."
$       kill_by_sigprc = "define"
$!
$   ELSE
$       echo4 "Nope, we can't."
$   ENDIF
$ ELSE
$   echo4 "Nope, it doesn't."
$ ENDIF
$ DELETE/SYMBOL tmp
$!
$! Finally the composite ones. All config
$!
$ myuname="''osname' ''myname' ''osvers' ''F$EDIT(hwname, "TRIM")'"
$!
$ IF ccname .EQS. "DEC"
$ THEN
$   ccflags="/Include=[]/Standard=Relaxed_ANSI/Prefix=All/Obj=''obj_ext' ''ccflags'"
$ ENDIF
$ IF ccname .EQS. "CXX"
$ THEN
$   ccflags="/Include=[]/Standard=ANSI/Prefix=All/Obj=''obj_ext' ''ccflags'"
$ ENDIF
$ IF use_vmsdebug_perl
$ THEN
$   optimize="/List/Debug/NoOpt"
$   ldflags="/Debug/Trace/Map"
$   dbgprefix = "DBG"
$ ELSE
$   optimize= "/NoList"
$   ldflags="/NoTrace/NoMap"
$   dbgprefix = ""
$ ENDIF
$!
$! Okay, we've got everything configured. Now go write out a config.sh.
$ basename_config_sh = F$PARSE(config_sh,,,"NAME",)+F$PARSE(config_sh,,,"TYPE",)
$ echo4 "Creating ''basename_config_sh'..."
$ open/write CONFIG 'config_sh'
$ WC := write CONFIG
$!
$! ##BEGIN WRITE NEW CONSTANTS HERE##
$!
$ WC "#!/bin/sh"
$ WC "#"
$ WC "# This file was produced by Configure.COM on a ''osname' system."
$ WC "#"
$ WC "# Package name      : ''package'"
$ WC "# Source directory  : ''src'"
$ WC "# Configuration time: " + cf_time
$ WC "# Configuration by  : " + cf_by
$ WC "# Target system     : " + myuname
$ WC ""
$ WC "Makefile_SH='" + Makefile_SH + "'"
$ WC "Mcc='" + Mcc + "'"
$ WC "PERL_REVISION='" + revision + "'"
$ WC "PERL_VERSION='" + patchlevel + "'" 
$ WC "PERL_SUBVERSION='" + subversion + "'" 
$ WC "PERL_API_REVISION='" + api_revision + "'"
$ WC "PERL_API_VERSION='" + api_version + "'" 
$ WC "PERL_API_SUBVERSION='" + api_subversion + "'"
$ WC "PERL_PATCHLEVEL='" + perl_patchlevel + "'"
$ WC "perl_patchlevel='" + perl_patchlevel + "'"
$ WC "PERL_CONFIG_SH='true'"
$ WC "_a='" + lib_ext + "'"
$ WC "_exe='" + exe_ext + "'"
$ WC "_o='" + obj_ext + "'"
$ WC "alignbytes='" + alignbytes + "'"
$ WC "aphostname='write sys$output f$edit(f$getsyi(\""SCSNODE\""),\""TRIM,LOWERCASE\"")'"
$ WC "api_revision='" + api_revision + "'"
$ WC "api_subversion='" + api_subversion + "'"
$ WC "api_version='" + api_version + "'" 
$ WC "api_versionstring='" + version + "'" 
$ WC "ar='" + "'"
$ WC "archlib='" + archlib + "'"
$ WC "archlibexp='" + archlibexp + "'"
$ WC "archname='" + archname + "'"
$ WC "baserev='" + baserev + "'"
$ WC "bin='" + bin + "'"
$ WC "binexp='" + binexp + "'"
$ WC "bootstrap_charset='undef'"
$ WC "builddir='" + builddir + "'"
$ WC "byteorder='1234'"
$ WC "castflags='0'"
$ WC "cc='" + perl_cc + "'"
$ WC "cccdlflags='" + cccdlflags + "'"
$ WC "ccdlflags='" + ccdlflags + "'"
$ IF uselargefiles .OR. uselargefiles .EQS. "define"
$ THEN
$    IF usestdstat .OR. usestdstat .EQS. "define"
$    THEN
$	ccdefines = "_USE_STD_STAT=1"
$    ELSE
$	ccdefines = "_LARGEFILE=1"
$    ENDIF
$ ELSE
$     ccdefines = ""
$ ENDIF
$ IF ccdefines .NES. ""
$ THEN
$   WC "ccflags='" + ccflags + "/Define=" + ccdefines + "'"
$ ELSE
$   WC "ccflags='" + ccflags + "'"
$ ENDIF
$ WC "ccflags_uselargefiles='" + "'"
$ WC "ccname='" + ccname + "'"
$ WC "ccversion='" + ccversion + "'"
$ WC "cf_by='" + cf_by + "'"
$ WC "cf_email='" + cf_email + "'"
$ WC "cf_time='" + cf_time + "'"
$ WC "charbits='8'"
$ WC "config_args='" + config_args + "'"
$ WC "config_sh='" + config_sh + "'"
$ WC "cpp_stuff='" + cpp_stuff + "'"
$ WC "cpplast='" + cpplast + "'"
$ WC "cppminus='" + cppminus + "'"
$ WC "cpprun='" + cpprun + "'"
$ WC "cppstdin='" + cppstdin + "'"
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$!  gcvt() does not work for > 16 decimal places; fallback to sprintf
$   WC "d_Gconvert='sprintf((b),""%.*" + (nvgformat-"""") + ",(n),(x))'"
$ ELSE
$   WC "d_Gconvert='my_gconvert(x,n,t,b)'"
$ ENDIF
$ WC "d_PRIEUldbl='" + d_PRIEUldbl + "'"
$ WC "d_PRIFUldbl='" + d_PRIFUldbl + "'"
$ WC "d_PRIGUldbl='" + d_PRIGUldbl + "'"
$ WC "d_PRIXU64='" + d_PRIXU64 + "'"
$ WC "d_PRId64='" + d_PRId64 + "'"
$ WC "d_PRIeldbl='" + d_PRIeldbl + "'"
$ WC "d_PRIfldbl='" + d_PRIfldbl + "'"
$ WC "d_PRIgldbl='" + d_PRIgldbl + "'"
$ WC "d_PRIi64='" + d_PRIi64 + "'"
$ WC "d_PRIo64='" + d_PRIo64 + "'"
$ WC "d_PRIu64='" + d_PRIu64 + "'"
$ WC "d_PRIx64='" + d_PRIx64 + "'"
$ WC "d_SCNfldbl='" + d_SCNfldbl + "'"
$ WC "d__fwalk='undef'"
$ WC "d_access='" + d_access + "'"
$ WC "d_accessx='undef'"
$ WC "d_acosh='" + d_acosh + "'"
$ WC "d_aintl='undef'"
$ WC "d_alarm='define'"
$ WC "d_archlib='define'"
$ WC "d_asctime64='undef'"
$ WC "d_asinh='" + d_asinh + "'"
$ WC "d_atanh='" + d_atanh + "'"
$ WC "d_atolf='" + d_atolf + "'"
$ WC "d_atoll='" + d_atoll + "'"
$ WC "d_attribute_format='" + d_attribut + "'"
$ WC "d_attribute_deprecated='undef'"
$ WC "d_attribute_malloc='undef'"
$ WC "d_attribute_nonnull='undef'"
$ WC "d_attribute_noreturn='undef'"
$ WC "d_attribute_pure='undef'"
$ WC "d_attribute_unused='undef'"
$ WC "d_attribute_warn_unused_result='undef'"
$ WC "d_prctl='undef'"
$ WC "d_prctl_set_name='undef'"
$ WC "d_printf_format_null='undef'"
$ WC "d_bcmp='" + d_bcmp + "'"
$ WC "d_bcopy='" + d_bcopy + "'"
$ WC "d_bincompat3='undef'"
$ WC "d_bsd='undef'"
$ WC "d_bsdgetpgrp='undef'"
$ WC "d_bsdsetpgrp='undef'"
$ WC "d_builtin_choose_expr='undef'" ! GCC only
$ WC "d_builtin_expect='undef'" ! GCC only
$ WC "d_bzero='" + d_bzero + "'"
$ WC "d_casti32='define'"
$ WC "d_castneg='define'"
$ WC "d_cbrt='" + d_cbrt + "'"
$ WC "d_charvspr='undef'"
$ WC "d_chown='define'"
$ WC "d_chroot='undef'"
$ WC "d_chsize='undef'"
$ WC "d_class='undef'"
$ WC "d_closedir='define'"
$ WC "d_cmsghdr_s='undef'"
$ WC "d_const='define'"
$ WC "d_copysign='" + d_copysign + "'"
$ WC "d_copysignl='define'"
$ WC "d_cplusplus='" + d_cplusplus + "'"
$ WC "d_crypt='define'"
$ WC "d_csh='undef'"
$ WC "d_ctermid='define'"
$ WC "d_ctime64='undef'"
$ WC "d_cuserid='define'"
$ WC "d_c99_variadic_macros='undef'"
$ WC "d_dbl_dig='define'"
$ WC "d_dbminitproto='undef'"
$ WC "d_difftime='define'"
$ WC "d_difftime64='undef'"
$ WC "d_dir_dd_fd='undef'"
$ WC "d_dirfd='undef'"
$ WC "d_dirnamlen='define'"
$ WC "d_dladdr='undef'"
$ IF ("''F$EXTRACT(1,3, F$GETSYI(""VERSION""))'".GES."7.2")
$ THEN
$   WC "d_dlerror='define'"
$   WC "d_dlopen='define'"
$ ELSE
$   WC "d_dlerror='undef'"
$   WC "d_dlopen='undef'"
$ ENDIF
$ WC "d_dlsymun='undef'"
$ WC "d_backtrace='undef'"
$ WC "d_dosuid='undef'"
$ WC "d_drand48proto='" + d_drand48proto + "'"
$ WC "d_dup2='define'"
$ WC "d_eaccess='undef'"
$ WC "d_endgrent='define'"
$ WC "d_endhent='" + d_endhent + "'"
$ WC "d_endnent='" + d_endnent + "'"
$ WC "d_endpent='" + d_endpent + "'"
$ WC "d_endpwent='define'"
$ WC "d_endsent='" + d_endsent + "'"
$ WC "d_eofnblk='undef'"
$ WC "d_erf='" + d_erf + "'"
$ WC "d_erfc='" + d_erfc + "'"
$ WC "d_eunice='undef'"
$ WC "d_exp2='" + d_exp2 + "'"
$ WC "d_expm1='" + d_expm1 + "'"
$ WC "d_fchmod='undef'"
$ WC "d_fchdir='undef'"
$ WC "d_fchown='undef'"
$ WC "d_fcntl='" + d_fcntl + "'"
$ WC "d_fcntl_can_lock='" + d_fcntl_can_lock + "'"
$ WC "d_fd_set='" + d_fd_set + "'"
$ WC "d_fd_macros='define'"
$ WC "d_fdclose='undef'"
$ WC "d_fdim='" + d_fdim + "'"
$ WC "d_fds_bits='define'"
$ WC "d_fegetround='undef'"
$ WC "d_fgetpos='define'"
$ IF use_ieee_math
$ THEN
$   WC "d_finite='define'"
$   WC "d_finitel='define'"
$ ELSE
$   WC "d_finite='undef'"
$   WC "d_finitel='undef'"
$ ENDIF
$ WC "d_flexfnam='define'"
$ WC "d_flock='undef'"
$ WC "d_flockproto='undef'"
$ WC "d_fma='" + d_fma + "'"
$ WC "d_fmax='" + d_fmax + "'"
$ WC "d_fmin='" + d_fmin + "'"
$ WC "d_fork='undef'"
$ WC "d_fp_class='undef'"
$ WC "d_fp_classify='" + d_fp_classify + "'"
$ WC "d_fp_classify='undef'"
$ WC "d_fp_classl='undef'"
$ WC "d_fpathconf='" + d_fpathconf + "'"
$ WC "d_fpclass='undef'"
$ WC "d_fpclassify='undef'"
$ WC "d_fpclassl='undef'"
$ WC "d_fpgetround='undef'"
$ WC "d_fpos64_t='" + d_fpos64_t + "'"
$ WC "d_frexpl='" + d_frexpl + "'"
$ WC "d_fs_data_s='undef'"
$ WC "d_fseeko='" + d_fseeko + "'"
$ WC "d_fsetpos='define'"
$ WC "d_fstatfs='undef'"
$ WC "d_fstatvfs='" + d_fstatvfs + "'"
$ WC "d_fsync='define'"
$ WC "d_ftello='" + d_ftello + "'"
$ WC "d_ftime='define'"
$ WC "d_futimes='undef'"
$ WC "d_gdbmndbm_h_uses_prototypes='undef'"
$ WC "d_gdbm_ndbm_h_uses_prototypes='undef'"
$ WC "d_getaddrinfo='define'"
$ WC "d_getcwd='define'"
$ WC "d_getespwnam='undef'"
$ WC "d_getfsstat='undef'"
$ WC "d_getgrent='define'"
$ WC "d_getgrps='undef'"
$ WC "d_gethbyaddr='" + d_gethbyaddr + "'"
$ WC "d_gethbyname='" + d_gethbyname + "'"
$ WC "d_gethent='" + d_gethent + "'"
$ WC "d_gethname='" + d_gethname + "'"
$ WC "d_gethostprotos='" + d_gethostprotos + "'"
$ WC "d_getitimer='" + d_getitimer + "'"
$ WC "d_getlogin='define'"
$ WC "d_getmnt='undef'"
$ WC "d_getmntent='undef'"
$ WC "d_getnameinfo='define'"
$ WC "d_getnbyaddr='" + d_getnbyaddr + "'"
$ WC "d_getnbyname='" + d_getnbyname + "'"
$ WC "d_getnent='" + d_getnent + "'"
$ WC "d_getnetprotos='" + d_getnetprotos + "'"
$ WC "d_getpagsz='undef'"
$ WC "d_getpbyname='" + d_getpbyname + "'"
$ WC "d_getpbynumber='" + d_getpbynumber + "'"
$ WC "d_getpent='" + d_getpent + "'"
$ WC "d_getpgid='" + d_getpgid + "'"
$ WC "d_getpgrp2='undef'"
$ WC "d_getpgrp='" + d_getpgrp + "'"
$ WC "d_getppid='" + d_getppid + "'"
$ WC "d_getprior='undef'"
$ WC "d_getprotoprotos='" + d_getprotoprotos + "'"
$ WC "d_getprpwnam='undef'"
$ WC "d_getpwent='define'"
$ WC "d_getsbyname='" + d_getsbyname + "'"
$ WC "d_getsbyport='" + d_getsbyport + "'"
$ WC "d_getsent='" + d_getsent + "'"
$ WC "d_getservprotos='" + d_getservprotos + "'"
$ WC "d_getspnam='undef'"
$ WC "d_gettimeod='" + d_gettimeod + "'"
$ WC "d_gmtime64='undef'"
$ WC "d_gnulibc='undef'"
$ WC "d_grpasswd='undef'"
$ WC "d_hasmntopt='undef'"
$ WC "d_htonl='" + d_htonl + "'"
$ WC "d_hypot='" + d_hypot + "'"
$ WC "d_ilogb='" + d_ilogb + "'"
$ WC "d_ilogbl='undef'"
$ WC "d_inc_version_list='undef'"
$ WC "d_index='" + d_index + "'"
$ WC "d_inetaton='define'"
$ WC "d_inetntop='define'"
$ WC "d_inetpton='define'"
$ WC "d_int64_t='" + d_int64_t + "'"
$ WC "d_ip_mreq='define'"
$ WC "d_ip_mreq_source='undef'"
$ WC "d_ipv6_mreq='define'"
$ WC "d_ipv6_mreq_source='undef'"
$ WC "d_isascii='define'"
$ WC "d_isblank='undef'"
$ WC "d_isfinite='undef'"
$ WC "d_isfinitel='undef'"
$ WC "d_isinf='undef'"
$ WC "d_isinfl='undef'"
$ WC "d_isless='undef'"
$ WC "d_isnan='" + d_isnan + "'"
$ WC "d_isnanl='" + d_isnanl + "'"
$ WC "d_isnormal='" + d_isnormal + "'"
$ WC "d_j0='" + d_j0 + "'"
$ WC "d_j0l='undef'"
$ WC "d_killpg='define'"
$ WC "d_lchown='" + d_lchown + "'"
$ WC "d_ldbl_dig='define'"
$ WC "d_ldexpl='" + d_ldexpl + "'"
$ WC "d_lgamma='" + d_lgamma + "'"
$ WC "d_libm_lib_version='undef'"
$ WC "d_link='" + d_link + "'"
$ WC "d_llrint='undef'"
$ WC "d_llrintl='undef'"
$ WC "d_llround='undef'"
$ WC "d_llroundl='undef'"
$ WC "d_llseek='undef'"
$ WC "d_localtime64='undef'"
$ WC "d_locconv='" + d_locconv + "'"
$ WC "d_lc_monetary_2008='undef'"
$ WC "d_lockf='undef'"
$ WC "d_log1p='" + d_log1p + "'"
$ WC "d_log2='" + d_log2 + "'"
$ WC "d_logb='" + d_logb + "'"
$ WC "d_longdbl='" + d_longdbl + "'"
$ WC "d_longlong='" + d_longlong + "'"
$ WC "d_lrint='" + d_lrint + "'"
$ WC "d_lrintl='" + d_lrintl + "'"
$ WC "d_lround='" + d_lround + "'"
$ WC "d_lroundl='" + d_lroundl + "'"
$ WC "d_lseekproto='define'"
$ WC "d_lstat='" + d_lstat + "'"
$ WC "d_madvise='undef'"
$ WC "d_malloc_size='undef'"
$ WC "d_malloc_good_size='undef'"
$ WC "d_mblen='" + d_mblen + "'"
$ WC "d_mbstowcs='" + d_mbstowcs + "'"
$ WC "d_mbtowc='" + d_mbtowc + "'"
$ WC "d_memchr='" + d_memchr + "'"
$ WC "d_memcmp='define'"
$ WC "d_memcpy='define'"
$ WC "d_memmem='undef'"
$ WC "d_memmove='define'"
$ WC "d_memset='define'"
$ WC "d_mkdir='define'"
$ WC "d_mkdtemp='" + d_mkdtemp + "'"
$ WC "d_mkfifo='undef'"
$ WC "d_mknod='undef'"
$ WC "d_mkstemp='" + d_mkstemp + "'"
$ WC "d_mkstemps='" + d_mkstemps + "'"
$ WC "d_mktime='" + d_mktime + "'"
$ WC "d_mktime64='undef'"
$ WC "d_mmap='" + d_mmap + "'"
$ WC "d_modfl='" + d_modfl + "'"
$ WC "d_modflproto='" + d_modflproto + "'"
$ WC "d_modfl_pow32_bug='undef'"
$ WC "d_mprotect='" + d_mprotect + "'"
$ WC "d_msg='undef'"
$ WC "d_msgctl='undef'"
$ WC "d_msgget='undef'"
$ WC "d_msgrcv='undef'"
$ WC "d_msgsnd='undef'"
$ WC "d_msg_ctrunc='undef'"
$ WC "d_msg_dontroute='undef'"
$ WC "d_msg_oob='undef'"
$ WC "d_msg_peek='undef'"
$ WC "d_msg_proxy='undef'"
$ WC "d_msghdr_s='undef'"
$ WC "d_msync='" + d_msync + "'"
$ WC "d_munmap='" + d_munmap + "'"
$ WC "d_mymalloc='" + d_mymalloc + "'"
$ WC "d_nan='undef'"
$ WC "d_nanosleep='" + d_nanosleep + "'"
$ WC "d_ndbm='undef'"
$ WC "d_ndbm_h_uses_prototypes='undef'"
$ WC "d_nearbyint='undef'"
$ WC "d_nextafter='" + d_nextafter + "'"
$ WC "d_nexttoward='" + d_nexttoward + "'"
$ WC "d_nice='define'"
$ WC "d_nl_langinfo='" + d_nl_langinfo + "'"
$ WC "d_nv_preserves_uv='" + d_nv_preserves_uv + "'"
$ WC "nv_overflows_integers_at='" + nv_overflows_integers_at + "'"
$ WC "nv_preserves_uv_bits='" + nv_preserves_uv_bits + "'"
$ WC "d_nv_zero_is_allbits_zero='define'"
$ WC "d_off64_t='" + d_off64_t + "'"
$ WC "d_old_pthread_create_joinable='" + d_old_pthread_create_joinable + "'"
$ WC "d_oldarchlib='define'"
$ WC "d_oldpthreads='" + d_oldpthreads + "'"
$ WC "d_oldsock='undef'"
$ WC "d_open3='define'"
$ WC "d_pathconf='" + d_pathconf + "'"
$ WC "d_pause='define'"
$ WC "d_perl_otherlibdirs='undef'"
$ WC "d_phostname='" + d_phostname + "'"
$ WC "d_pipe='define'"
$ WC "d_poll='" + d_poll + "'"
$ WC "d_portable='define'"
$ WC "d_procselfexe='undef'"
$ WC "d_pseudofork='undef'"
$ WC "d_pthread_atfork='undef'"
$ WC "d_pthread_attr_setscope='" + d_pthread_attr_setscope + "'"
$ WC "d_pthread_yield='" + d_pthread_yield + "'"
$ WC "d_pthreads_created_joinable='" + d_pthreads_created_joinable + "'"
$ WC "d_ptrdiff_t='define'"
$ WC "d_pwage='undef'"
$ WC "d_pwchange='undef'"
$ WC "d_pwclass='undef'"
$ WC "d_pwcomment='define'"
$ WC "d_pwexpire='undef'"
$ WC "d_pwgecos='define'"
$ WC "d_pwpasswd='define'"
$ WC "d_pwquota='undef'"
$ WC "d_qgcvt='undef'"
$ WC "d_quad='" + d_quad + "'"
$ WC "d_readdir='define'"
$ WC "d_readlink='" + d_readlink + "'"
$ WC "d_readv='undef'"
$ WC "d_realpath='" + d_realpath + "'"
$ WC "d_recvmsg='undef'"
$ WC "d_regcomp='undef'"
$ WC "d_remainder='" + d_remainder + "'"
$ WC "d_remquo='" + d_remquo + "'"
$ WC "d_rename='define'"
$ WC "d_rewinddir='define'"
$ WC "d_rint='" + d_rint + "'"
$ WC "d_rmdir='define'"
$ WC "d_round='undef'"
$ WC "d_safebcpy='undef'"
$ WC "d_safemcpy='define'"
$ WC "d_sanemcmp='define'"
$ WC "d_sbrkproto='define'"
$ WC "d_scalbn='undef'"
$ WC "d_scalbnl='undef'"
$ WC "d_sched_yield='" + d_sched_yield + "'"
$ WC "d_scm_rights='undef'"
$ WC "d_seekdir='define'"
$ WC "d_select='" + d_select + "'"
$ IF ("''F$EXTRACT(1,3, F$GETSYI(""VERSION""))'".GES."8.4")
$ THEN
$   WC "d_sem='define'"
$   WC "d_semctl='define'"
$   WC "d_semctl_semid_ds='define'"
$   WC "d_semctl_semun='define'"
$   WC "d_semget='define'"
$   WC "d_semop='define'"
$ ELSE
$   WC "d_sem='undef'"
$   WC "d_semctl='undef'"
$   WC "d_semctl_semid_ds='undef'"
$   WC "d_semctl_semun='undef'"
$   WC "d_semget='undef'"
$   WC "d_semop='undef'"
$ ENDIF
$ WC "d_sendmsg='undef'"
$ WC "d_setegid='undef'"
$ WC "d_setenv='" + d_setenv + "'"
$ WC "d_seteuid='" + d_seteuid + "'"
$ WC "d_setgrent='" + d_setgrent + "'"
$ WC "d_setgrps='undef'"
$ WC "d_sethent='" + d_sethent + "'"
$ WC "d_setitimer='" + d_setitimer + "'"
$ WC "d_setlinebuf='undef'"
$ WC "d_setlocale='" + d_setlocale + "'"
$ WC "d_setnent='" + d_setnent + "'"
$ WC "d_setpent='" + d_setpent + "'"
$ WC "d_setpgid='" + d_setpgid + "'"
$ WC "d_setpgrp2='undef'"
$ WC "d_setpgrp='" + d_setpgrp + "'"
$ WC "d_setprior='undef'"
$ WC "d_setproctitle='" + d_setproctitle + "'"
$ WC "d_setpwent='define'"
$ WC "d_setregid='" + d_setregid + "'"
$ WC "d_setresgid='undef'"
$ WC "d_setresuid='undef'"
$ WC "d_setreuid='" + d_setreuid + "'"
$ WC "d_setrgid='undef'"
$ WC "d_setruid='undef'"
$ WC "d_setsent='" + d_setsent + "'"
$ WC "d_setsid='" + d_setsid + "'"
$ WC "d_setvbuf='" + d_setvbuf + "'"
$ WC "d_shm='" + d_shm + "'"
$ WC "d_shmat='" + d_shmat + "'"
$ WC "d_shmatprototype='" + d_shmatprototype + "'"
$ WC "d_shmctl='" + d_shmctl + "'"
$ WC "d_shmdt='" + d_shmdt + "'"
$ WC "d_shmget='" + d_shmget + "'"
$ WC "d_sigaction='" + d_sigaction + "'"
$ WC "d_siginfo_si_addr='" + d_siginfo_si_addr + "'"
$ WC "d_siginfo_si_band='" + d_siginfo_si_band + "'"
$ WC "d_siginfo_si_errno='" + d_siginfo_si_errno + "'"
$ WC "d_siginfo_si_pid='" + d_siginfo_si_pid + "'"
$ WC "d_siginfo_si_status='" + d_siginfo_si_status + "'"
$ WC "d_siginfo_si_uid='" + d_siginfo_si_uid + "'"
$ WC "d_siginfo_si_value='" + d_siginfo_si_value + "'"
$ WC "d_signbit='" + d_signbit + "'"
$ WC "d_sigprocmask='" + d_sigprocmask + "'"
$ WC "d_sigsetjmp='" + d_sigsetjmp + "'"
$ WC "d_sin6_scope_id='" + d_sin6_scope_id + "'"
$ WC "d_sitearch='define'"
$ WC "d_sockaddr_in6='define'"
$ WC "d_sockaddr_sa_len='" + d_sockaddr_sa_len + "'"
$ WC "d_sockatmark='undef'"
$ WC "d_sockatmarkproto='undef'"
$ WC "d_socket='" + d_socket + "'"
$ WC "d_socklen_t='" + d_socklen_t + "'"
$ WC "d_sockpair='" + d_sockpair + "'"
$ WC "d_socks5_init='undef'"
$ WC "d_sprintf_returns_strlen='define'"
$ WC "d_sqrtl='define'"
$ WC "d_sresgproto='undef'"
$ WC "d_sresgproto='undef'"
$ WC "d_sresproto='undef'"
$ WC "d_sresuproto='undef'"
$ WC "d_stat='define'"
$ WC "d_statblks='undef'"
$ WC "d_statfs_f_flags='undef'"
$ WC "d_statfs_s='undef'"
$ WC "d_statfsflags='undef'"
$ WC "d_static_inline='define'"
$ WC "d_stdio_cnt_lval='" + d_stdio_cnt_lval + "'"
$ WC "d_stdio_ptr_lval='" + d_stdio_ptr_lval + "'"
$ WC "d_stdio_ptr_lval_nochange_cnt='" + d_stdio_ptr_lval_nochange_cnt + "'"
$ WC "d_stdio_ptr_lval_sets_cnt='" + d_stdio_ptr_lval_sets_cnt + "'"
$ WC "d_stdio_stream_array='undef'"
$ WC "d_stdiobase='" + d_stdiobase + "'"
$ WC "d_stdstdio='" + d_stdstdio + "'"
$ WC "d_faststdio='" + d_faststdio + "'"
$ WC "d_statvfs='" + d_statvfs + "'"
$ WC "d_strchr='define'"
$ WC "d_strcoll='" + d_strcoll + "'"
$ WC "d_strctcpy='define'"
$ WC "d_strerrm='strerror((e),vaxc$errno)'"
$ WC "d_strerror='define'"
$ WC "d_strftime='define'"
$ WC "d_strlcat='undef'"
$ WC "d_strlcpy='undef'"
$ WC "d_strtod='define'"
$ WC "d_strtol='define'"
$ WC "d_strtold='" + d_strtold + "'"
$ WC "d_strtoll='" + d_strtoll + "'"
$ WC "d_strtoq='" + d_strtoq + "'"
$ WC "d_strtoul='define'"
$ WC "d_strtoull='" + d_strtoull + "'"
$ WC "d_strtouq='" + d_strtouq + "'"
$ WC "d_strxfrm='" + d_strxfrm  + "'"
$ WC "d_suidsafe='undef'"
$ WC "d_symlink='" + d_symlink + "'"
$ WC "d_syscall='undef'"
$ WC "d_syscallproto='undef'"
$ WC "d_sysconf='" + d_sysconf + "'"
$ WC "d_sysernlst='undef'"
$ WC "d_syserrlst='undef'"
$ WC "d_system='define'"
$ WC "d_tcgetpgrp='undef'"
$ WC "d_tcsetpgrp='undef'"
$ WC "d_telldir='define'"
$ WC "d_telldirproto='define'"
$ WC "d_tgamma='" + d_tgamma + "'"
$ WC "d_time='define'"
$ WC "d_timegm='undef'"
$ WC "d_times='define'"
$ IF ("''F$EXTRACT(1,3, F$GETSYI(""VERSION""))'".GES."7.0")
$ THEN
$   WC "d_tm_tm_gmtoff='define'"
$   WC "d_tm_tm_zone='define'"
$ ELSE
$   WC "d_tm_tm_gmtoff='undef'"
$   WC "d_tm_tm_zone='undef'"
$ ENDIF
$ WC "d_truncate='" + d_truncate + "'"
$ WC "d_trunc='" + d_trunc + "'"
$ WC "d_truncl='" + d_truncl + "'"
$ WC "d_tzname='" + d_tzname + "'"
$ WC "d_u32align='define'"
$ WC "d_ualarm='" + d_ualarm + "'"
$ WC "d_umask='define'"
$ WC "d_uname='" + d_uname + "'"
$ WC "d_union_semun='undef'"
$ WC "d_unlink_all_versions='" + d_unlink_all_versions + "'"	! VMS-specific
$ WC "d_unordered='undef'"
$ WC "d_unsetenv='" + d_unsetenv + "'"
$ WC "d_clearenv='" + d_clearenv + "'"
$ WC "d_usleep='" + d_usleep + "'"
$ WC "d_usleepproto='" + d_usleep + "'"
$ WC "d_ustat='undef'"
$ WC "d_vendorarch='undef'"
$ WC "d_vendorbin='undef'"
$ WC "d_vendorlib='undef'"
$ WC "d_vendorscript='undef'"
$ WC "d_vfork='define'"
$ WC "d_vms_case_sensitive_symbols='" + d_vms_be_case_sensitive + "'" ! VMS
$ WC "d_vms_do_sockets='" + d_vms_do_sockets + "'" ! VMS
$ WC "d_vms_shorten_long_symbols='" + d_vms_shorten_long_symbols + "'" ! VMS
$ WC "d_void_closedir='define'"
$ WC "d_voidsig='undef'"
$ WC "d_voidtty='" + "'"
$ WC "d_volatile='define'"
$ WC "d_vprintf='define'"
$ WC "d_vsnprintf='" + d_vsnprintf + "'"
$ WC "d_wait4='" + d_wait4 + "'"
$ WC "d_waitpid='define'"
$ WC "d_wcscmp='define'"
$ WC "d_wcstombs='define'"
$ WC "d_wcsxfrm='define'"
$ WC "d_wctomb='define'"
$ WC "d_writev='undef'"
$ WC "d_xenix='undef'"
$ WC "db_hashtype=' '"
$ WC "db_prefixtype=' '"
$ WC "db_version_major='" + "'"
$ WC "db_version_minor='" + "'"
$ WC "db_version_patch='" + "'"
$ WC "dbgprefix='" + dbgprefix + "'"
$ WC "devtype='" + devtype + "'"
$ WC "direntrytype='struct dirent'"
$ WC "dlext='" + dlext + "'"
$ WC "dlobj='" + dlobj + "'"
$ WC "dlsrc='dl_vms.xs'"
$ WC "doublekind='3'"
$ WC "doubleinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f'"
$ WC "doublenanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f'"
$ WC "doublemantbits='" + doublemantbits + "'"
$ WC "doublesize='" + doublesize + "'"
$ WC "drand01='" + drand01 + "'"
$ WC "dtrace='" + "'"
$!
$! The dynamic_ext symbol may be quite long
$!
$ tmp = "dynamic_ext='" + dynamic_ext + "'"
$ WC/symbol tmp
$ DELETE/SYMBOL tmp
$ WC "eagain=' '"
$ WC "ebcdic='undef'"
$ WC "embedmymalloc='" + usemymalloc + "'"
$ WC "eunicefix=':'"
$ WC "exe_ext='" + exe_ext + "'"
$!
$! The extensions symbols may be quite long
$!
$ WC/symbol "extensions='", nonxs_ext, " ", nonxs_ext2, " ", dynamic_ext, "'"
$ WC "fflushNULL='define'"
$ WC "fflushall='undef'"
$ WC "fpostype='fpos_t'"
$ WC "freetype='void'"
$ WC "full_ar='" + "'"
$ WC "full_csh='" + " '"
$ WC "full_sed='_NLA0:'"
$ WC "gccversion='" + gccversion + "'"
$ WC "gidformat='lu'"
$ WC "gidsign='1'"
$ WC "gidsize='4'"
$ WC "gidtype='" + gidtype + "'"
$ WC "groupstype='Gid_t'"
$ WC "h_fcntl='false'"
$ WC "h_sysfile='false'"
$ WC "hint='none'"
$ WC "hintfile='" + "'"
$ WC "i16size='" + i16size + "'"
$ WC "i16type='" + i16type + "'"
$ WC "i32size='" + i32size + "'"
$ WC "i32type='" + i32type + "'"
$ WC "i64size='" + i64size + "'"
$ WC "i64type='" + i64type + "'"
$ WC "i8size='" + i8size + "'"
$ WC "i8type='" + i8type + "'"
$ WC "i_arpainet='" + i_arpainet + "'"
$ WC "i_assert='define'"
$ WC "i_bfd='undef'"
$ WC "i_bsdioctl='undef'"
$ WC "i_crypt='undef'"
$ WC "i_db='undef'"
$ WC "i_dbm='undef'"
$ WC "i_dirent='undef'"	! we roll our own
$ WC "i_dlfcn='undef'"
$ WC "i_execinfo='undef'"
$ WC "i_fcntl='" + i_fcntl + "'"
$ WC "i_fenv='undef'"
$ WC "i_float='define'"
$ WC "i_fp='undef'"
$ WC "i_fp_class='undef'"
$ WC "i_gdbm='undef'"
$ WC "i_gdbm_ndbm='undef'"
$ WC "i_gdbmndbm='undef'"
$ WC "i_grp='" + i_grp + "'"
$ WC "i_ieeefp='undef'"
$ WC "i_inttypes='" + i_inttypes + "'"
$ WC "i_langinfo='" + i_langinfo + "'"
$ WC "i_libutil='" + i_libutil + "'"
$ WC "i_limits='define'"
$ WC "i_locale='" + i_locale + "'"
$ WC "i_machcthr='undef'"
$ WC "i_machcthreads='undef'"
$ WC "i_malloc='undef'"
$ WC "i_mallocmalloc='undef'"
$ WC "i_math='define'"
$ WC "i_memory='undef'"
$ WC "i_mntent='undef'"
$ WC "i_ndbm='undef'"
$ WC "i_netdb='" + i_netdb + "'"
$ WC "i_neterrno='define'"
$ WC "i_netinettcp='" + i_netinettcp + "'"
$ WC "i_niin='" + i_niin + "'"
$ WC "i_poll='" + i_poll + "'"
$ WC "i_prot='undef'"
$ WC "i_pthread='define'"
$ WC "i_pwd='undef'"
$ WC "i_quadmath='undef'"
$ WC "i_rpcsvcdbm='undef'"
$ WC "i_sgtty='undef'"
$ WC "i_shadow='" + i_shadow + "'"
$ WC "i_socks='" + i_socks + "'"
$ WC "i_stdarg='define'"
$ IF ccname .EQS. "DEC" .AND. F$INTEGER(Dec_C_Version).GE.60400000
$ THEN
$   WC "i_stdbool='define'"
$ ELSE
$   WC "i_stdbool='undef'"
$ ENDIF
$ WC "i_stddef='define'"
$ WC "i_stdint='undef'"
$ WC "i_stdlib='define'"
$ WC "i_string='define'"
$ WC "i_sunmath='undef'"
$ WC "i_sysaccess='" + i_sysaccess + "'"
$ WC "i_sysdir='undef'"
$ WC "i_sysfile='" + i_sysfile + "'"
$ WC "i_sysfilio='undef'"
$ WC "i_sysin='undef'"
$ WC "i_sysioctl='" + i_sysioctl + "'"
$ WC "i_syslog='" + i_syslog + "'"
$ WC "i_sysmman='undef'"
$ WC "i_sysmode='" + i_sysmode + "'"
$ WC "i_sysmount='undef'"
$ WC "i_sysndir='undef'"
$ WC "i_sysparam='undef'"
$ WC "i_syspoll='" + i_syspoll + "'"
$ WC "i_sysresrc='undef'"
$ WC "i_syssecrt='" + i_syssecrt + "'"
$ WC "i_sysselct='undef'"
$ WC "i_syssockio='undef'"
$ WC "i_sysstat='define'"
$ WC "i_sysstatfs='undef'"
$ WC "i_sysstatvfs='" + i_sysstatvfs + "'"
$ WC "i_systime='undef'"
$ WC "i_systimek='undef'"
$ WC "i_systimes='undef'"
$ WC "i_systypes='define'"
$ WC "i_sysuio='" + i_sysuio + "'"
$ WC "i_sysun='" + i_sysun + "'"
$ WC "i_sysutsname='" + i_sysutsname + "'"
$ WC "i_sysvfs='undef'"
$ WC "i_syswait='undef'"
$ WC "i_termio='undef'"
$ WC "i_termios='undef'"
$ WC "i_time='define'"
$ WC "i_unistd='" + i_unistd + "'"
$ WC "i_ustat='undef'"
$ WC "i_utime='" + i_utime + "'"
$ WC "i_values='undef'"
$ WC "i_varargs='undef'"
$ WC "i_varhdr='stdarg.h'"
$ WC "i_vfork='undef'"
$ WC "inc_version_list='0'"
$ WC "inc_version_list_init='0'"
$ WC "installarchlib='" + installarchlib + "'"
$ WC "installbin='" + installbin + "'"
$ WC "installman1dir='" + installman1dir + "'"
$ WC "installman3dir='" + installman3dir + "'"
$ WC "installprefix='" + vms_prefix + "'"
$ WC "installprefixexp='" + vms_prefix + ":'"
$ WC "installprivlib='" + installprivlib + "'"
$ WC "installscript='" + installscript + "'"
$ WC "installsitearch='" + installsitearch + "'"
$ WC "installsitebin='" + sitebin + "'"
$ WC "installsitelib='" + installsitelib + "'"
$ WC "installusrbinperl='undef'"
$ WC "intsize='" + intsize + "'"
$ WC "ivdformat='" + ivdformat + "'"
$ WC "ivsize='" + ivsize + "'"
$ WC "ivtype='" + ivtype + "'"
$!
$! The xs_extensions symbol may be quite long
$!
$ WC/symbol "known_extensions='", xs_extensions, " ", nonxs_ext, " ", nonxs_ext2, "'"
$ WC "ld='" + ld + "'"
$ WC "ld_can_script='undef'"
$ WC "lddlflags='/Share'"
$ WC "ldflags='" + ldflags + "'"
$ WC "ldflags_uselargefiles='" + "'"
$ WC "ldlibpthname='" + "'"
$ WC "lib_ext='" + lib_ext + "'"
$ WC "libc='" + libc + "'"
$ WC "libpth='/sys$share /sys$library'"
$ WC "libs='" + libs + "'"
$ WC "libswanted='" + "'"
$ WC "libswanted_uselargefiles='" + "'"
$ WC "longdblsize='" + longdblsize + "'"
$ WC "longdblkind='" + longdblkind + "'"
$ WC "longdblinfbytes='" + longdblinfbytes + "'"
$ WC "longdblnanbytes='" + longdblnanbytes + "'"
$ WC "longdblmantbits='" + longdblmantbits + "'"
$ WC "longlongsize='" + longlongsize + "'"
$ WC "longsize='" + longsize + "'"
$ IF uselargefiles .OR. uselargefiles .EQS. "define"
$ THEN
$   WC "lseeksize='8'"
$   WC "lseektype='off_t'"
$ ELSE
$   WC "lseeksize='4'"
$   WC "lseektype='int'"
$ ENDIF
$ WC "mab='" + "'"
$ WC "mad='undef'"
$ WC "make='" + make + "'"
$ WC "malloctype='void *'"
$ WC "usemallocwrap='" + usemallocwrap + "'"
$ WC "man1ext='rno'"
$ WC "man3ext='rno'"
$ WC "mmaptype='void *'"
$ WC "modetype='unsigned int'"
$ WC "multiarch='undef'"
$ WC "mydomain='" + mydomain + "'"
$ WC "myhostname='" + myhostname + "'"
$ WC "myuname='" + myuname + "'"
$ WC "need_va_copy='undef'"
$ WC "netdb_hlen_type='" + netdb_hlen_type + "'"
$ WC "netdb_host_type='" + netdb_host_type + "'"
$ WC "netdb_name_type='" + netdb_name_type + "'"
$ WC "netdb_net_type='" + netdb_net_type + "'"
$ WC/symbol "nonxs_ext='", nonxs_ext, " ", nonxs_ext2, "'"
$ WC "nveformat='" + nveformat + "'"
$ WC "nvEUformat='" + nvEUformat + "'"
$ WC "nvfformat='" + nvfformat + "'"
$ WC "nvFUformat='" + nvFUformat + "'"
$ WC "nvgformat='" + nvgformat + "'"
$ WC "nvGUformat='" + nvGUformat + "'"
$ WC "nvmantbits='" + nvmantbits + "'"
$ WC "nvsize='" + nvsize + "'"
$ WC "nvtype='" + nvtype + "'"
$ WC "o_nonblock=' '"
$ WC "obj_ext='" + obj_ext + "'"
$ WC "old_pthread_create_joinable='" + old_pthread_create_joinable + "'"
$ WC "oldarchlib='" + oldarchlib + "'"
$ WC "oldarchlibexp='" + oldarchlibexp + "'"
$ WC "optimize='" + optimize + "'"
$ WC "osname='" + osname + "'"
$ WC "osvers='" + osvers + "'"
$ WC "otherlibdirs='" + "'"
$ WC "package='" + package + "'"
$ WC "pager='" + pager + "'"
$ WC "patchlevel='" + patchlevel + "'"
$ WC "path_sep='|'"
$ WC "perl_root='" + perl_root + "'" ! VMS specific $trnlnm()
$ WC "perladmin='" + perladmin + "'"
$ WC "perllibs='" + perllibs + "'"
$ WC "perlpath='" + "''vms_prefix':[000000]Perl''exe_ext'" + "'"
$ WC "perl_static_inline='static inline'"
$ WC "perl_symbol='" + perl_symbol + "'"  ! VMS specific
$ WC "perl_verb='" + perl_verb + "'"      ! VMS specific
$ WC "pgflquota='" + pgflquota + "'"
$ WC "pidtype='" + pidtype + "'"
$ WC "prefix='" + vms_prefix + "'"
$ WC "prefixexp='" + vms_prefix + ":'"
$ WC "privlib='" + privlib + "'"
$ WC "privlibexp='" + privlibexp + "'"
$ WC "procselfexe=' '"
$ WC "prototype='define'"
$ WC "ptrsize='" + ptrsize + "'"
$ WC "quadkind='" + quadkind + "'"
$ WC "quadtype='" + quadtype + "'" 
$ WC "randbits='" + randbits + "'"
$ WC "randfunc='" + randfunc + "'"
$ WC "randseedtype='" + randseedtype + "'"
$ WC "ranlib='" + "'"
$ WC "rd_nodata=' '"
$ WC "revision='" + revision + "'"
$ WC "sGMTIME_max='4294967295'"
$ WC "sGMTIME_min='0'"
$ WC "sLOCALTIME_max='4294967295'"
$ WC "sLOCALTIME_min='0'"
$ WC "sPRId64='" + sPRId64 + "'"
$ WC "sPRIEUldbl='" + sPRIEUldbl + "'"
$ WC "sPRIFUldbl='" + sPRIFUldbl + "'"
$ WC "sPRIGUldbl='" + sPRIGUldbl + "'"
$ WC "sPRIXU64='" + sPRIXU64 + "'"
$ WC "sPRIeldbl='" + sPRIeldbl + "'"
$ WC "sPRIfldbl='" + sPRIfldbl + "'"
$ WC "sPRIgldbl='" + sPRIgldbl + "'"
$ WC "sPRIi64='" + sPRIi64 + "'"
$ WC "sPRIo64='" + sPRIo64 + "'"
$ WC "sPRIu64='" + sPRIu64 + "'"
$ WC "sPRIx64='" + sPRIx64 + "'"
$ WC "sSCNfldbl='" + sSCNfldbl + "'"
$ WC "sched_yield='" + sched_yield + "'"
$ WC "scriptdir='" + scriptdir + "'"
$ WC "scriptdirexp='" + scriptdir + "'"  ! use scriptdir for now
$ WC "seedfunc='" + seedfunc + "'"
$ WC "selectminbits='32'"
$ WC "selecttype='" + selecttype + "'"
$ WC "sh='MCR'"
$ WC "sharpbang='#!'"
$ WC "shmattype='" + shmattype + "'"
$ WC "shortsize='" + shortsize + "'"
$ IF (f$length(sig_name) .GE. 244)
$ THEN
$     tmp = "sig_name='" + sig_name + "'"
$     WC/symbol tmp
$     DELETE/SYMBOL tmp
$ ELSE
$     WC "sig_name='" + sig_name + "'"
$ ENDIF
$ IF (f$length(sig_name_init) .GE. 244)
$ THEN
$     tmp = "sig_name_init='" + sig_name_init + "'"
$     WC/symbol tmp
$     DELETE/SYMBOL tmp
$ ELSE
$     WC "sig_name_init='" + sig_name_init + "'"
$ ENDIF
$ WC "sig_num='" + sig_num + "'"
$ WC "sig_num_init='" + sig_num_init + "'"
$ WC "sig_count='" + sig_count + "'"
$ WC "sig_size='" + sig_size + "'"
$ WC "signal_t='" + signal_t + "'"
$ WC "sitearch='" + sitearch + "'"
$ WC "sitearchexp='" + sitearchexp + "'"
$ WC "sitebin='" + sitebin + "'"
$ WC "sitebinexp='" + sitebin + "'"
$ WC "sitelib='" + sitelib + "'"
$ WC "sitelib_stem='" + sitelib_stem + "'"
$ WC "sitelibexp='" + sitelibexp + "'"
$ WC "siteprefix='" + vms_prefix + "'"
$ WC "siteprefixexp='" + vms_prefix + ":'"
$ WC "sizesize='" + sizesize + "'"
$ WC "sizetype='size_t'"
$ WC "so='" + so + "'"
$ WC "socksizetype='" + socksizetype + "'"
$ WC "spitshell='write sys$output '"
$ WC "src='" + src + "'"
$ WC "ssizetype='int'"
$ WC "startperl=" + startperl ! This one's special--no enclosing single quotes
$ WC "static_ext='" + static_ext + "'"
$ WC "st_ino_size='" + st_ino_size + "'"
$ WC "st_ino_sign='1'"
$ WC "stdchar='" + stdchar + "'"
$ WC "stdio_base='((*fp)->_base)'"
$ WC "stdio_bufsiz='((*fp)->_cnt + (*fp)->_ptr - (*fp)->_base)'"
$ WC "stdio_cnt='((*fp)->_cnt)'"
$ WC "stdio_ptr='((*fp)->_ptr)'"
$ WC "stdio_stream_array=' " + "'"
$ WC "subversion='" + subversion + "'"
$ WC "targetarch='" + "'"
$ WC "targetsh='MCR'"
$ WC "timetype='" + timetype + "'"
$ WC "u16size='" + u16size + "'"
$ WC "u16type='" + u16type + "'"
$ WC "u32size='" + u32size + "'"
$ WC "u32type='" + u32type + "'"
$ WC "u64size='" + u64size + "'"
$ WC "u64type='" + u64type + "'"
$ WC "u8size='" + u8size + "'"
$ WC "u8type='" + u8type + "'"
$ WC "uidformat='lu'"
$ WC "uidsign='1'"
$ WC "uidsize='4'"
$ WC "uidtype='" + uidtype + "'"
$ WC "uquadtype='" + uquadtype + "'" 
$ WC "use5005threads='" + use5005threads + "'"
$ WC "use64bitall='" + use64bitall + "'"
$ WC "use64bitint='" + use64bitint + "'"
$ WC "usecasesensitive='" + be_case_sensitive + "'"    ! VMS-specific
$ WC "usedebugging_perl='"+use_debugging_perl+"'"
$ WC "usedefaulttypes='" + usedefaulttypes + "'"    ! VMS-specific
$ WC "usecbacktrace='undef'"
$ WC "usecrosscompile='undef'"
$ WC "usedevel='" + usedevel + "'"
$ WC "usedl='" + usedl + "'"
$ WC "usedtrace='undef'"
$ WC "usefaststdio='" + usefaststdio + "'"
$ WC "useieee='" + useieee + "'"                    ! VMS-specific
$ WC "useithreads='" + useithreads + "'"
$ WC "usekernelthreads='" + usekernelthreads + "'"	! VMS-specific
$ WC "usekernprocpathname='undef'"
$ WC "usensgetexecutablepath='undef'"
$ WC "uselargefiles='" + uselargefiles + "'"
$ WC "uselongdouble='" + uselongdouble + "'"
$ WC "usemorebits='" + usemorebits + "'"
$ WC "usemultiplicity='" + usemultiplicity + "'"
$ WC "usemymalloc='" + usemymalloc + "'"
$ WC "useperlio='define'"
$ WC "useposix='false'"
$ WC "usequadmath='undef'"
$ WC "usereentrant='undef'"
$ WC "userelocatableinc='undef'"
$ WC "usesecurelog='" + usesecurelog + "'"  ! VMS-specific
$ WC "useshortenedsymbols='" + useshortenedsymbols + "'"    ! VMS-specific
$ WC "useshrplib='true'"
$ WC "usesitecustomize='" + usesitecustomize + "'"
$ WC "usesocks='undef'"
$ WC "usethreads='" + usethreads + "'"
$ WC "usethreadupcalls='" + usethreadupcalls + "'"	! VMS-specific
$ WC "usevendorprefix='" + "'" ! try to say no, though we'll be ignored as of MM 5.90_01
$ WC "useversionedarchname='" + useversionedarchname + "'"
$ WC "usevfork='true'"
$ WC "usevmsdebug='" + usevmsdebug + "'"     ! VMS-specific
$ WC "uvoformat='" + uvoformat + "'"
$ WC "uvsize='" + uvsize + "'"
$ WC "uvtype='" + uvtype + "'"
$ WC "uvuformat='" + uvuformat + "'"
$ WC "uvxformat='" + uvxformat + "'"
$ WC "uvXUformat='" + uvXUformat + "'"
$ WC "vendorarch='" + "'"
$ WC "vaproto='define'"
$ WC "vendorarchexp='" + "'"
$ WC "vendorbin='" + "'"
$ WC "vendorbinexp='" + "'"
$ WC "vendorlib_stem='" + "'"
$ WC "vendorlib='" + "'"
$ WC "vendorlibexp='" + "'"
$ WC "vendorprefix='" + "'"
$ WC "vendorprefixexp='" + "'"
$ WC "version='" + version + "'"
$ WC "version_patchlevel_string='" + version_patchlevel_string + "'"
$ WC "vms_cc_type='" + vms_cc_type + "'" ! VMS specific
$ WC "vms_prefix='" + vms_prefix + "'" ! VMS specific
$ WC "vms_ver='" + vms_ver + "'" ! VMS specific
$!
$! ## The UNIXy POSIXy reentrantey thingys ##
$! See "Appendix B, Version-Dependency Tables" in the C RTL
$! manual for when assorted _r functions became available.
$!
$ IF use_threads
$ THEN
$   WC "asctime_r_proto='REENTRANT_PROTO_B_SB'"
$   WC "d_asctime_r='define'"
$   WC "ctime_r_proto='REENTRANT_PROTO_B_SB'"
$   WC "d_ctime_r='define'"
$ ELSE
$   WC "asctime_r_proto='0'"
$   WC "d_asctime_r='undef'"
$   WC "ctime_r_proto='0'"
$   WC "d_ctime_r='undef'"
$ ENDIF
$ WC "d_crypt_r='undef'"
$ WC "d_ctermid_r='undef'"
$ WC "d_drand48_r='undef'"
$ WC "d_endgrent_r='undef'"
$ WC "d_endhostent_r='undef'"
$ WC "d_endnetent_r='undef'"
$ WC "d_endprotoent_r='undef'"
$ WC "d_endpwent_r='undef'"
$ WC "d_endservent_r='undef'"
$ WC "d_freelocale='undef'"
$ WC "d_getgrent_r='undef'"
$ WC "d_getgrgid_r='" + d_getgrgid_r + "'"
$ WC "d_getgrnam_r='" + d_getgrnam_r + "'"
$ WC "d_gethostbyaddr_r='undef'"
$ WC "d_gethostbyname_r='undef'"
$ WC "d_gethostent_r='undef'"
$ WC "d_getlogin_r='define'"
$ WC "d_getnetbyaddr_r='undef'"
$ WC "d_getnetbyname_r='undef'"
$ WC "d_getnetent_r='undef'"
$ WC "d_getprotobyname_r='undef'"
$ WC "d_getprotobynumber_r='undef'"
$ WC "d_getprotoent_r='undef'"
$ WC "d_getpwent_r='undef'"
$ WC "d_getpwnam_r='" + d_getpwnam_r + "'"
$ WC "d_getpwuid_r='" + d_getpwuid_r + "'"
$ WC "d_getservbyname_r='undef'"
$ WC "d_getservbyport_r='undef'"
$ WC "d_getservent_r='undef'"
$ WC "d_getspnam_r='undef'"
$ WC "d_gmtime_r='undef'"      ! leave undef'd; we use my_gmtime
$ WC "d_lgamma_r='undef'"
$ WC "d_localtime_r='undef'"   ! leave undef'd; we use my_localtime
$ WC "d_localtime_r_needs_tzset='undef'"
$ WC "d_newlocale='undef'"
$ WC "d_random_r='undef'"
$ WC "d_readdir_r='define'"	! always defined; we roll our own
$ WC "d_readdir64_r='undef'"
$ WC "d_setgrent_r='undef'"
$ WC "d_sethostent_r='undef'"
$ WC "d_setlocale_r='undef'"
$ WC "d_setnetent_r='undef'"
$ WC "d_setprotoent_r='undef'"
$ WC "d_setpwent_r='undef'"
$ WC "d_setservent_r='undef'"
$ WC "d_snprintf='" + d_snprintf + "'"
$ WC "d_srand48_r='undef'"
$ WC "d_srandom_r='undef'"
$ WC "d_strerror_r='undef'"
$ WC "d_tmpnam_r='undef'"
$ WC "d_ttyname_r='" + d_ttyname_r + "'"
$ WC "d_uselocale='undef'"
$ WC "ctermid_r_proto='0'"
$ WC "crypt_r_proto='0'"
$ WC "drand48_r_proto='0'"
$ WC "endgrent_r_proto='0'"
$ WC "endhostent_r_proto='0'"
$ WC "endnetent_r_proto='0'"
$ WC "endprotoent_r_proto='0'"
$ WC "endpwent_r_proto='0'"
$ WC "endservent_r_proto='0'"
$ WC "getgrent_r_proto='0'"
$ WC "getgrgid_r_proto='" + getgrgid_r_proto + "'"
$ WC "getgrnam_r_proto='" + getgrnam_r_proto + "'"
$ WC "gethostbyaddr_r_proto='0'"
$ WC "gethostbyname_r_proto='0'"
$ WC "gethostent_r_proto='0'"
$ IF use_threads
$ THEN
$   WC "getlogin_r_proto='REENTRANT_PROTO_I_BW'"
$ ELSE
$   WC "getlogin_r_proto='0'"
$ ENDIF
$ WC "getnetbyaddr_r_proto='0'"
$ WC "getnetbyname_r_proto='0'"
$ WC "getnetent_r_proto='0'"
$ WC "getprotobyname_r_proto='0'"
$ WC "getprotobynumber_r_proto='0'"
$ WC "getprotoent_r_proto='0'"
$ WC "getpwent_r_proto='0'"
$ WC "getpwnam_r_proto='0'"
$ WC "getpwuid_r_proto='0'"
$ WC "getservbyname_r_proto='0'"
$ WC "getservbyport_r_proto='0'"
$ WC "getservent_r_proto='0'"
$ WC "getspnam_r_proto='0'"
$ WC "gmtime_r_proto='0'"
$ WC "localtime_r_proto='0'"
$ WC "random_r_proto='0'"
$ WC "readdir_r_proto='REENTRANT_PROTO_I_TSR'"  ! always defined; we roll our own
$ WC "readdir64_r_proto='0'"
$ WC "setgrent_r_proto='0'"
$ WC "sethostent_r_proto='0'"
$ WC "setlocale_r_proto='0'"
$ WC "setnetent_r_proto='0'"
$ WC "setprotoent_r_proto='0'"
$ WC "setpwent_r_proto='0'"
$ WC "setservent_r_proto='0'"
$ WC "srand48_r_proto='0'"
$ WC "srandom_r_proto='0'"
$ WC "strerror_r_proto='0'"
$ WC "tmpnam_r_proto='0'"
$ WC "ttyname_r_proto='" + ttyname_r_proto + "'"
$!
$! ##END WRITE NEW CONSTANTS HERE##
$!
$ CLOSE CONFIG
$!
$! Okay, we've gotten here. Build munchconfig.exe
$ COPY/NOLOG [-.vms]munchconfig.c []
$ COPY/NOLOG [-.vms]'Makefile_SH' []
$ 'Perl_CC' 'ccflags' munchconfig.c
$ IF Needs_Opt
$ THEN
$   OPEN/WRITE CONFIG []munchconfig.opt
$   IF ccname .EQS. "GCC"
$   THEN
$     WRITE CONFIG "Gnu_CC:[000000]gcclib.olb/library"
$   ENDIF
$   WRITE CONFIG "Sys$Share:VAXCRTL/Share"
$   CLOSE CONFIG
$   'ld'/EXE='exe_ext' munchconfig'obj_ext',munchconfig.opt/opt
$   DELETE/NOLOG/NOCONFIRM munchconfig.opt;
$ ELSE
$   'ld'/EXE='exe_ext' munchconfig'obj_ext'
$ ENDIF
$ IF F$SEARCH("munchconfig''obj_ext'") .NES. "" THEN DELETE/NOLOG/NOCONFIRM munchconfig'obj_ext';
$ IF F$SEARCH("munchconfig.c") .NES. "" THEN DELETE/NOLOG/NOCONFIRM munchconfig.c;
$ IF ccname .EQS. "CXX"
$ THEN
$   CALL Cxx_demangler_cleanup
$ ENDIF
$!
$ IF alldone .EQS. ""
$ THEN
$   cat4 SYS$INPUT:
$   DECK

If you'd like to make any changes to the config.sh file before I begin
to configure things, answer yes to the following question.

$   EOD
$   bool_dflt="n"
$   rp="Do you wish to edit ''basename_config_sh'? [''bool_dflt'] "
$   GOSUB myread
$   IF ans
$   THEN
$     echo4 ""
$     echo4 "Be sure to type LOGOUT after you have edited the file,"
$     echo4 "then this procedure will resume."
$     echo4 ""
$     default = F$ENVIRONMENT("DEFAULT")
$     DIRECTORY 'config_sh'
$     SET DEFAULT [-]
$     SPAWN/WAIT
$     SET DEFAULT 'default'
$   ENDIF
$ ENDIF
$!
$ echo ""
$ echo4 "Adding ''osname' specific preprocessor commands."
$ !
$ ! we need an fdl file
$ CREATE [-]CONFIG.FDL
$ DECK
RECORD
  FORMAT STREAM_LF
$ EOD
$ CREATE /FDL=[-]CONFIG.FDL [-]CONFIG.LOCAL
$ ! First spit out the header info with the local defines (to get
$ ! around the 255 character command line limit)
$ OPEN/APPEND CONFIG [-]config.local
$ IF use_debugging_perl THEN WC "#define DEBUGGING"
$ IF use_two_pot_malloc THEN WC "#define TWO_POT_OPTIMIZE"
$ IF mymalloc THEN WC "#define EMBEDMYMALLOC"
$ IF use_pack_malloc THEN WC "#define PACK_MALLOC"
$ IF use_debugmalloc THEN WC "#define DEBUGGING_MSTATS"
$ IF ccname .EQS. "GCC" THEN WC "#define GNUC_ATTRIBUTE_CHECK"
$ IF (Has_Dec_C_Sockets)
$ THEN
$    WC "#define VMS_DO_SOCKETS"
$    WC "#define DECCRTL_SOCKETS"
$ ENDIF
$! This is VMS-specific for now
$ WC "#''d_setenv' HAS_SETENV"
$ IF d_secintgenv THEN WC "#define SECURE_INTERNAL_GETENV"
$ IF d_alwdeftype THEN WC "#define ALWAYS_DEFTYPES"
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$   WC "#define USE_64_BIT_INT"
$ ENDIF
$ IF uselongdouble .OR. uselongdouble .EQS. "define"
$ THEN
$   WC "#define USE_LONG_DOUBLE"
$ ENDIF
$ IF use64bitall .OR. use64bitall .EQS. "define" THEN -
    WC "#define USE_64_BIT_ALL"
$ IF be_case_sensitive THEN WC "#define VMS_WE_ARE_CASE_SENSITIVE"
$ IF shorten_long_symbols THEN WC "#define VMS_SHORTEN_LONG_SYMBOLS"
$ IF use_ieee_math THEN WC "#define USE_IEEE"
$ IF d_herrno .EQS. "undef" THEN WC "#define NEED_AN_H_ERRNO"
$ WC "#define HAS_ENVGETENV"
$ WC "#define PERL_EXTERNAL_GLOB"
$ IF kill_by_sigprc .EQS. "define" then WC "#define KILL_BY_SIGPRC"
$ IF unlink_all_versions .OR. unlink_all_versions .EQS. "define" THEN -
    WC "#define UNLINK_ALL_VERSIONS"
$ IF d_sockaddr_sa_len .EQS. "define" then WC "#define _SOCKADDR_LEN 1"
$ IF ccname .EQS. "CXX" then WC "#define NO_ENVIRON_ARRAY"
$ IF ccname .EQS. "CXX" then WC "#define VMS" ! only has __VMS by default
$ CLOSE CONFIG
$!
$ echo4 "Doing variable substitutions on .SH files..."
$ echo4 "Extracting config.h (with variable substitutions)"
$!
$! Now build the normal config.h
$ DEFINE/USER_MODE sys$output [-]config.main
$ mcr []munchconfig'exe_ext' 'config_sh' [-]config_h.sh
$ ! Concatenate them together
$ copy [-]config.local,[-]config.main [-]config.h
$! Clean up
$ DELETE/NOLOG/NOCONFIRM [-]CONFIG.MAIN;*
$ DELETE/NOLOG/NOCONFIRM [-]CONFIG.LOCAL;*
$ DELETE/NOLOG/NOCONFIRM [-]CONFIG.FDL;*
$!
$ IF ccname .EQS. "DEC"
$ THEN
$   DECC_REPLACE = "DECC=decc=1"
$ ELSE
$   DECC_REPLACE = "DECC="
$ ENDIF
$ IF ccname .EQS. "CXX"
$ THEN
$   DECCXX_REPLACE = "DECCXX=DECCXX=1"
$ ELSE
$   DECCXX_REPLACE = "DECCXX="
$ ENDIF
$ IF ccname .EQS. "GCC"
$ THEN
$   GNUC_REPLACE = "GNUC=gnuc=1"
$ ELSE
$   GNUC_REPLACE = "GNUC=" 
$ ENDIF
$ IF Has_Dec_C_Sockets
$ THEN
$   SOCKET_REPLACE = "SOCKET=DECC_SOCKETS=1"
$ ELSE
$   SOCKET_REPLACE = "SOCKET="
$ ENDIF
$ IF use_threads
$ THEN
$   THREAD_REPLACE = "THREAD=THREADED=1"
$ ELSE
$   THREAD_REPLACE = "THREAD="
$ ENDIF
$ IF mymalloc
$ THEN
$   MALLOC_REPLACE = "MALLOC=MALLOC=1"
$ ELSE
$   MALLOC_REPLACE = "MALLOC="
$ ENDIF
$ IF uselargefiles .OR. uselargefiles .EQS. "define"
$ THEN
$   IF usestdstat .or. usestdstat .eqs. "define"
$   THEN
$      LARGEFILE_REPLACE = "LARGEFILE=LARGEFILE=_USE_STD_STAT=1"
$   ELSE
$      LARGEFILE_REPLACE = "LARGEFILE=LARGEFILE=_LARGEFILE=1"
$   ENDIF
$ ELSE
$   LARGEFILE_REPLACE = "LARGEFILE="
$ ENDIF
$ IF use_vmsdebug_perl
$ THEN
$   DEBUG_REPLACE = "USEVMSDEBUG=__DEBUG__=1"
$ ELSE
$   DEBUG_REPLACE = "USEVMSDEBUG="
$ ENDIF
$ PREFIX_REPLACE = "PREFIX=PREFIX=''prefix'"
$!
$! In order not to stress the tiny command buffer on pre-7.3-2 systems,
$! we put the following substitutions in a file and pass the file to
$! munchconfig.
$!
$ open/write CONFIG extra_subs.txt
$ WC := write CONFIG
$ WC "''DECC_REPLACE'"
$ WC "''DECCXX_REPLACE'"
$ WC "''ARCH_TYPE'"
$ WC "''GNUC_REPLACE'"
$ WC "''SOCKET_REPLACE'"
$ WC "''THREAD_REPLACE'"
$ WC "''C_Compiler_Replace'"
$ WC "''MALLOC_REPLACE'"
$ WC "''THREAD_UPCALLS'"
$ WC "''THREAD_KERNEL'"
$ WC "PV=''version'"
$ WC "FLAGS=FLAGS=''extra_flags'"
$ WC "''LARGEFILE_REPLACE'"
$ WC "ARCHNAME=ARCHNAME=''archname'"
$ WC "''DEBUG_REPLACE'"
$ WC "''PREFIX_REPLACE'"
$ close CONFIG
$!
$ echo4 "Extracting ''defmakefile' (with variable substitutions)"
$ DEFINE/USER_MODE sys$output 'UUmakefile'
$ mcr []munchconfig'exe_ext' 'config_sh' 'Makefile_SH' -f extra_subs.txt
$! Clean up after ourselves
$ DELETE/NOLOG/NOCONFIRM []munchconfig'exe_ext';
$ DELETE/NOLOG/NOCONFIRM []extra_subs.txt;
$!
$! Note that the /key qualifier to search, as in:
$! search README.* "=head"/key=(position=1)/window=0/output=extra.pods
$! is not supported on VMS V5.5-2, hence not used in extra_pods.com.
$!
$ echo4 "Extracting extra_pods.com (without variable substitutions)"
$ Create Sys$Disk:[-]extra_pods.com
$ Deck/Dollar="$EOExtra_Pods$"
$!++ extra_pods.com
$!   NOTE: This file is extracted as part of the VMS configuration process.
$!   Any changes made to it directly will be lost.  If you need to make any
$!   changes, please edit the template in Configure.Com instead.
$!   Use FORCE if you've just podified a README.* file on VMS.
$ miniperl = f$search("sys$disk:[]miniperl.%xe;") ! could have alternate extension
$ if f$search("extra.pods") .eqs. "" .or. P1 .eqs. "FORCE" then -
    search README.* "=head"/window=0/output=extra.pods
$ open/read/error=extra_close EXTRA extra.pods
$extra_loop:
$ read/error=extra_close/END_OF_FILE=extra_close EXTRA file
$ file_type = f$edit(f$parse(file,,,"TYPE",),"LOWERCASE") - "."
$ if file_type .nes. "VMS" .and. file_type .nes. "vms"
$ then
$   pod_file = "[.pod]perl''file_type'.pod"
$   file = file - "''f$parse(file,,,"VERSION",)'"
$   if p1 .eqs. "CLEAN"
$   then if f$search(pod_file) .nes. "" then delete/log 'pod_file';*
$   else
$     do_copy := false
$     if f$search(pod_file) .eqs. ""
$     then do_copy := true
$     else
$       file_rdt = f$cvtime(f$file_attributes(file,"RDT"))
$       pod_file_rdt = f$cvtime(f$file_attributes(pod_file,"RDT"))
$       if file_rdt .GTS. pod_file_rdt then do_copy := true
$     endif
$     ! wacky method to preserve case on ODS-5 even when parse style is traditional
$     if do_copy then mcr 'miniperl' -e "exit 0+$^E unless File::Copy::rmscopy(q{''file'}, q{''pod_file'});"
$   endif
$ endif
$ goto extra_loop
$extra_close:
$ close EXTRA
$ if p1 .eqs. "CLEAN" .and. f$search("extra.pods;-1") .nes. "" then -
    purge/nolog extra.pods
$!-- extra_pods.com
$EOExtra_Pods$
$!
$!  Warn of dangerous symbols or logical names
$!
$Bad_environment: SUBROUTINE
$   Bad_env = ""
$   IF p2 .eqs. "SYMBOL"
$   THEN
$     IF f$type('p1') .nes. "" THEN  Bad_env := SYMBOL
$   ELSE
$     IF f$trnlnm(p1) .nes. "" THEN Bad_env := LOGICAL
$   ENDIF
$   IF Bad_env .eqs. "SYMBOL" .or. Bad_env .eqs. "LOGICAL"
$   THEN
$     IF f$search("config.msg") .nes. ""
$     THEN
$       OPEN/APPEND CONFIG config.msg
$     ELSE
$       OPEN/WRITE CONFIG config.msg
$     ENDIF
$     IF Bad_env .eqs. "SYMBOL"
$     THEN
$       WRITE CONFIG ""
$       WRITE CONFIG "Symbol name ''p1' found in environment as " + &p1
$       WRITE CONFIG " delete before building ''package' via:"
$       WRITE CONFIG "     $ DELETE/SYMBOL/GLOBAL ''p1'"
$       IF f$locate("""",&p1) .ge. f$length(&p1)
$       THEN
$       WRITE CONFIG " after building, testing, and installing ''package'"
$       WRITE CONFIG " restore the symbol with:"
$       WRITE CONFIG "     $ ''p1' == """ + &p1 + """"
$       ENDIF
$     ENDIF
$     IF Bad_env .eqs. "LOGICAL"
$     THEN
$       WRITE CONFIG ""
$       WRITE CONFIG "Logical name ''p1' found in environment as " + f$trnlnm(p1)
$       WRITE CONFIG " deassign before building ''package'"
$     ENDIF
$     CLOSE CONFIG
$     Bad_env = ""
$   ENDIF
$ EXIT
$ ENDSUBROUTINE ! Bad_environment
$ echo ""
$ echo4 "Checking for dangerous pre-existing global symbols and logical names."
$ CALL Bad_environment "COMP"
$ CALL Bad_environment "EXT"
$ CALL Bad_environment "FOO"
$ CALL Bad_environment "LIB"
$ CALL Bad_environment "LIST"
$ CALL Bad_environment "MIME"
$ CALL Bad_environment "POSIX"
$ CALL Bad_environment "SYS"
$ CALL Bad_environment "T"
$ CALL Bad_environment "THREAD"
$ CALL Bad_environment "THREADS"
$ CALL Bad_environment "TIME"
$ CALL Bad_environment "TMP"
$ CALL Bad_environment "UNICODE"
$ CALL Bad_environment "UTIL"
$ CALL Bad_environment "TEST" "SYMBOL"
$ IF f$search("config.msg") .eqs. "" THEN echo "OK."
$!
$! %Config-I-VMS, write perl_setup.com here
$!
$ IF (.NOT.perl_symbol)
$ THEN
$   file_2_find = "[-]''packageup'.cld"
$   echo ""
$   echo4 "The perl.cld file is now being written..."
$   OPEN/WRITE CONFIG 'file_2_find'
$   ext = ".exe"
$   IF (sharedperl .AND. F$ELEMENT(0, "-", archname) .EQS. "VMS_AXP") THEN ext := .AXE
$   IF (sharedperl .AND. F$ELEMENT(0, "-", archname) .EQS. "VMS_IA64") THEN ext := .IXE
$   IF (use_vmsdebug_perl)
$   THEN
$     WRITE CONFIG "define verb dbgperl"
$     WRITE CONFIG F$FAO("!_!AS","image ''vms_prefix':[000000]dbgperl''ext'")
$     WRITE CONFIG F$FAO("!_!AS","cliflags (foreign)")
$     WRITE CONFIG ""
$     WRITE CONFIG "define verb perl"
$     WRITE CONFIG F$FAO("!_!AS","image ''vms_prefix':[000000]ndbgPerl''ext'")
$     WRITE CONFIG F$FAO("!_!AS","cliflags (foreign)")
$   ELSE
$     WRITE CONFIG "define verb perl"
$     WRITE CONFIG F$FAO("!_!AS","image ''vms_prefix':[000000]perl''ext'")
$     WRITE CONFIG F$FAO("!_!AS","cliflags (foreign)")
$   ENDIF
$   CLOSE CONFIG
$ ENDIF ! (.NOT.perl_symbol)
$ echo ""
$ echo4 "The perl_setup.com file is now being written..."
$ file_2_find = "[-]perl_setup.com"
$!
$! Folks are likely to want to edit perl_setup.com.
$! STMLF RFM plays nicer with ported editors than does VFC.
$!
$ CREATE [-]CONFIG.FDL
$ DECK
RECORD
  FORMAT STREAM_LF
$ EOD
$ CREATE /FDL=[-]CONFIG.FDL 'file_2_find'
$ OPEN/APPEND CONFIG 'file_2_find'
$ DELETE/NOLOG/NOCONFIRM [-]CONFIG.FDL;
$ WRITE CONFIG "$!"
$ WRITE CONFIG "$! Perl_Setup.com    ''cf_time'"
$ IF cf_email.NES.perladmin
$ THEN
$ WRITE CONFIG "$! perl configured by ''cf_email'"
$ ELSE
$ WRITE CONFIG "$! This perl configured & administered by ''perladmin'"
$ ENDIF
$ WRITE CONFIG "$!"
$ WRITE CONFIG "$ if P1 .EQS. """""
$ WRITE CONFIG "$ then"
$ WRITE CONFIG "$   myproc = f$environment(""PROCEDURE"")"
$ WRITE CONFIG "$   myroot_dev = f$parse(myproc,,,""DEVICE"",""NO_CONCEAL"")"
$ WRITE CONFIG "$   myroot_dir = f$parse(myproc,,,""DIRECTORY"",""NO_CONCEAL"")"
$ WRITE CONFIG "$   myroot_dir = myroot_dir - ""][000000."" - ""><000000."""
$ WRITE CONFIG "$   myroot_dir = myroot_dir - ""][000000]"" - ""><000000>"""
$ WRITE CONFIG "$   myroot_dir = myroot_dir - ""]["" - ""><"""
$ WRITE CONFIG "$   myroot_dir = myroot_dir - "".]"" - "".>"" - ""["" - ""]"" - ""<"" - "">"""
$ WRITE CONFIG "$   root_spec = myroot_dev + ""["" + myroot_dir + "".]"""
$ WRITE CONFIG "$ else"
$ WRITE CONFIG "$   root_spec = P1"
$ WRITE CONFIG "$ endif"
$ WRITE CONFIG "$ define/translation=concealed ''vms_prefix' 'root_spec'"
$ WRITE CONFIG "$ ext = "".exe"""
$ IF sharedperl
$ THEN
$ WRITE CONFIG "$ if f$getsyi(""ARCH_TYPE"") .eq. 2 then ext = "".AXE"""
$ WRITE CONFIG "$ if f$getsyi(""ARCH_TYPE"") .eq. 3 then ext = "".IXE"""
$ ENDIF
$ IF (perl_symbol)
$ THEN
$   perl_setup_perl = "'" + "'perl'" ! triple quoted foreign command symbol
$   IF (use_vmsdebug_perl)
$   THEN
$     WRITE CONFIG "$ dbgperl :== $''vms_prefix':[000000]dbgperl'ext'"
$     WRITE CONFIG "$ perl    :== $''vms_prefix':[000000]ndbgperl'ext'"
$     WRITE CONFIG "$ define dbgperlshr ''vms_prefix':[000000]dbgperlshr'ext'"
$   ELSE
$     WRITE CONFIG "$ perl :== $''vms_prefix':[000000]Perl'ext'"
$     WRITE CONFIG "$ define perlshr ''vms_prefix':[000000]perlshr'ext'"
$   ENDIF
$ ELSE ! .NOT.perl_symbol
$   perl_setup_perl = "perl" ! command verb
$   IF (use_vmsdebug_perl)
$   THEN
$     WRITE CONFIG "$ define dbgperlshr ''vms_prefix':[000000]dbgperlshr'ext'"
$   ELSE
$     WRITE CONFIG "$ define perlshr ''vms_prefix':[000000]perlshr'ext'"
$   ENDIF
$   IF perl_verb .EQS. "PROCESS"
$   THEN
$     WRITE CONFIG "$ set command ''vms_prefix':[000000]''packageup'.CLD"
$   ENDIF
$ ENDIF !  perl_symbol
$!
$ IF (tzneedset)
$ THEN
$ WRITE CONFIG "$ define SYS$TIMEZONE_DIFFERENTIAL ''tzd'"
$ ELSE    !leave in but commented out (in case setting was from perl :-)
$ WRITE CONFIG "$! define SYS$TIMEZONE_DIFFERENTIAL ''tzd'"
$ ENDIF
$ WRITE CONFIG "$!"
$ WRITE CONFIG "$! Symbols for Perl-based utility programs:"
$ WRITE CONFIG "$!"
$ WRITE CONFIG "$ c2ph       == """ + perl_setup_perl + " ''vms_prefix':[utils]c2ph.com"""
$ WRITE CONFIG "$ corelist   == """ + perl_setup_perl + " ''vms_prefix':[utils]corelist.com"""
$ WRITE CONFIG "$ cpan       == """ + perl_setup_perl + " ''vms_prefix':[utils]cpan.com"""
$ WRITE CONFIG "$ enc2xs     == """ + perl_setup_perl + " ''vms_prefix':[utils]enc2xs.com"""
$ WRITE CONFIG "$ encguess   == """ + perl_setup_perl + " ''vms_prefix':[utils]encguess.com"""
$ WRITE CONFIG "$ h2ph       == """ + perl_setup_perl + " ''vms_prefix':[utils]h2ph.com"""
$ WRITE CONFIG "$ h2xs       == """ + perl_setup_perl + " ''vms_prefix':[utils]h2xs.com"""
$ WRITE CONFIG "$ instmodsh  == """ + perl_setup_perl + " ''vms_prefix':[utils]instmodsh.com"""
$ WRITE CONFIG "$ json_pp    == """ + perl_setup_perl + " ''vms_prefix':[utils]json_pp.com"""
$ WRITE CONFIG "$ libnetcfg  == """ + perl_setup_perl + " ''vms_prefix':[utils]libnetcfg.com"""
$ WRITE CONFIG "$ perlbug    == """ + perl_setup_perl + " ''vms_prefix':[utils]perlbug.com"""
$ WRITE CONFIG "$ perldoc    == """ + perl_setup_perl + " ''vms_prefix':[utils]perldoc.com """"-t"""""""
$ WRITE CONFIG "$ perlivp    == """ + perl_setup_perl + " ''vms_prefix':[utils]perlivp.com"""
$ WRITE CONFIG "$ perlthanks == """ + perl_setup_perl + " ''vms_prefix':[utils]perlthanks.com"""
$ WRITE CONFIG "$ piconv     == """ + perl_setup_perl + " ''vms_prefix':[utils]piconv.com"""
$ WRITE CONFIG "$ pl2pm      == """ + perl_setup_perl + " ''vms_prefix':[utils]pl2pm.com"""
$ WRITE CONFIG "$ pod2html   == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2html.com"""
$ WRITE CONFIG "$ pod2text   == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2text.com"""
$ WRITE CONFIG "$!pod2man    == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2man.com"""
$ WRITE CONFIG "$ pod2usage  == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2usage.com"""
$ WRITE CONFIG "$ podchecker == """ + perl_setup_perl + " ''vms_prefix':[utils]podchecker.com"""
$ WRITE CONFIG "$ podselect  == """ + perl_setup_perl + " ''vms_prefix':[utils]podselect.com"""
$ WRITE CONFIG "$ prove      == """ + perl_setup_perl + " ''vms_prefix':[utils]prove.com"""
$ WRITE CONFIG "$ pstruct    == """ + perl_setup_perl + " ''vms_prefix':[utils]pstruct.com"""
$ WRITE CONFIG "$ ptar       == """ + perl_setup_perl + " ''vms_prefix':[utils]ptar.com"""
$ WRITE CONFIG "$ ptardiff   == """ + perl_setup_perl + " ''vms_prefix':[utils]ptardiff.com"""
$ WRITE CONFIG "$ ptargrep   == """ + perl_setup_perl + " ''vms_prefix':[utils]ptargrep.com"""
$ WRITE CONFIG "$ shasum     == """ + perl_setup_perl + " ''vms_prefix':[utils]shasum.com"""
$ WRITE CONFIG "$ splain     == """ + perl_setup_perl + " ''vms_prefix':[utils]splain.com"""
$ WRITE CONFIG "$ xsubpp     == """ + perl_setup_perl + " ''vms_prefix':[utils]xsubpp.com"""
$ WRITE CONFIG "$ zipdetails == """ + perl_setup_perl + " ''vms_prefix':[utils]zipdetails.com"""
$ CLOSE CONFIG
$!
$ echo  ""
$ echo  "The file can be found at:"
$ echo4 "    ''F$SEARCH(file_2_find)'"
$ echo  "Add that file (or an @@ call to it) to your [SY]LOGIN.COM"
$ echo  "when you are satisfied with a successful compilation,"
$ echo  "testing, and installation of your perl."
$ echo  ""
$ IF ((.NOT.perl_symbol) .AND. (perl_verb .EQS. "DCLTABLES"))
$ THEN
$   file_2_find = "[-]''packageup'_install.com"
$   OPEN/WRITE CONFIG 'file_2_find'
$   WRITE CONFIG "$ set command perl /table=sys$common:[syslib]dcltables.exe -"
$   WRITE CONFIG "    /output=sys$common:[syslib]dcltables.exe"
$   WRITE CONFIG "$ install replace sys$common:[syslib]dcltables.exe"
$   CLOSE CONFIG
$   echo4 ""
$   echo4 "In order to install the ''packageup' verb into DCLTABLES run:"
$   echo4 "    @@ ''F$SEARCH(file_2_find)'"
$   echo4 "after a successful build, test, and install.  Do so with CMKRNL privilege."
$   echo4 ""
$ ENDIF
$!
$!figure out where we "are" by parsing 'vms_default_directory_name' 
$!
$ set_def_command = ""
$ dflt = F$ENVIRONMENT("DEFAULT") - ".UU]" 
$ tmp = vms_default_directory_name - dflt - "]"
$ i = 0
$ IF tmp .EQS. "" THEN GOTO Beyond_set_def_loop
$Set_def_loop:
$ tmp1 = F$ELEMENT(i,".",tmp)
$ IF tmp1 .EQS. "." THEN GOTO Beyond_set_def_loop
$ IF i .EQ. 0 
$ THEN set_def_command = "set default [-"
$ ELSE set_def_command = set_def_command + "-"
$ ENDIF
$ i = i + 1
$ GOTO Set_def_loop
$Beyond_set_def_loop:
$ IF set_def_command.NES.""
$ THEN
$   set_def_command = set_def_command - "-" + "]"
$   echo4 ""
$   echo4 "In order to build ''package' you must now issue the commands:"
$   echo4 ""
$   echo4 " ''set_def_command'"
$ ELSE
$   echo4 ""
$   echo4 "In order to build ''package' you must now issue the command:"
$   echo4 ""
$ ENDIF
$ echo4 " ''make'''makefile'", macros
$ echo4 ""
$!
$ IF ( F$SEARCH("config.msg").NES."" ) 
$ THEN
$   echo4 "Hmm.  I also noted the following information while running:"
$   echo4 ""
$   TYPE/OUTPUT=SYS$ERROR: config.msg
$   SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) config.msg
$   DELETE/NOLOG/NOCONFIRM config.msg;
$ ENDIF
$!
$Clean_up:
$ SET NOON
$ IF (silent)
$ THEN
$   CLOSE/NOLOG STDOUT
$   DEASSIGN SYS$OUTPUT
$ ENDIF
$ CLOSE/NOLOG CONFIG
$ IF F$GETJPI("","FILCNT").GT.vms_filcnt
$ THEN WRITE SYS$ERROR "%Config-W-VMS, WARNING: There is a file still open"
$ ENDIF
$ dflt = F$ENVIRONMENT("DEFAULT")
$ IF F$LOCATE("UU]",dflt).EQS.(F$LENGTH(dflt)-3)
$ THEN
$   IF ( F$SEARCH("[.CXX_REPOSITORY]*.*").NES."" ) 
$   THEN 
$     DELETE/NOLOG/NOCONFIRM [.CXX_REPOSITORY]*.*;*
$     SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) CXX_REPOSITORY.DIR
$   ENDIF
$   IF ( F$SEARCH("[]*.*").NES."" ) THEN DELETE/NOLOG/NOCONFIRM []*.*;*
$   SET DEFAULT [-]
$   SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) UU.DIR
$   DELETE/NOLOG/NOCONFIRM UU.DIR;
$ ENDIF
$ SET DEFAULT 'vms_default_directory_name' !be kind rewind
$ EXIT
$!: End of Configure
@


1.4
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d147 1
a147 1
$ ccname="VAX"
d734 1
a734 1
$ IF F$TYPE(usedevel) .EQS. "" THEN usedevel := n
a980 1
$!     echo "     ","VMS_VAX"
d1163 1
a1163 1
$! Please use F$ELEMENT(0,"-",archname) .EQS. "VMS_VAX" (or "VMS_AXP" or
d1165 1
a1165 1
$! configure a VAX build on an Alpha).
d1169 3
a1171 4
$   archname = "VMS_VAX"
$   otherarch = "an Alpha or IA64"
$   alignbytes="8"
$   arch_type = "ARCH-TYPE=__VAX__"
d1176 1
a1176 1
$       otherarch = "a VAX or IA64"
d1180 1
a1180 1
$       otherarch = "a VAX or Alpha"
d1584 2
a1585 5
$   IF Dec_C_Version .GE. 60200000 .AND. F$ELEMENT(0, "-", archname) .NES. "VMS_VAX"
$   THEN
$     echo4 "adding /NOANSI_ALIAS qualifier to ccflags."
$     ccflags = ccflags + "/NOANSI_ALIAS"
$   ENDIF
d1778 1
a1778 1
$ IF F$ELEMENT(0, "-", archname) .EQS. "VMS_VAX"
d1780 1
a1780 2
$   read CONFIG line
$   archsufx = "VAX"
d1782 1
a1782 6
$   IF F$ELEMENT(0, "-", archname) .EQS. "VMS_AXP"
$   THEN
$       archsufx = "AXP"
$   ELSE
$       archsufx = "IA64"
$   ENDIF
d2056 1
a2056 1
$	    IF (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX") .AND. ("''f$extract(1,3, f$getsyi(""version""))'" .GES. "7.2")
d2109 2
a2110 1
$ IF (F$ELEMENT(0, "-", archname).NES."VMS_VAX").and.("''f$extract(1,3, f$getsyi(""version""))'".ges."7.1")
d2112 13
a2124 16
$   bool_dflt = "n"
$   IF F$TYPE(use64bitint) .NES. "" 
$   THEN
$       IF use64bitint .OR. use64bitint .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "You have natively 64-bit long integers."
$   echo ""
$   echo "Perl can be built to take advantage of 64-bit integer types"
$   echo "on some systems, To do so, Configure can be run with -Duse64bitint."
$   echo "Choosing this option will most probably introduce binary incompatibilities."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to use 64-bit integers, if available? [''bool_dflt'] "
$   GOSUB myread
$   use64bitint = ans
d2126 17
a2142 5
$   bool_dflt = "n"
$   IF F$TYPE(use64bitall) .NES. "" 
$   THEN
$       IF use64bitall .OR. use64bitall .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
d2144 4
a2147 16
$   echo "You may also choose to try maximal 64-bitness.  It means using as much"
$   echo "64-bitness as possible on the platform.  This in turn means even more"
$   echo "binary incompatibilities.  On the other hand, your platform may not"
$   echo "have any more 64-bitness available than what you already have chosen."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to use maximal 64-bit support, if available? [''bool_dflt'] "
$   GOSUB myread
$   use64bitall=ans
$   IF use64bitall .AND. .NOT. use64bitint
$   THEN
$     echo ""
$     echo "Since you have chosen a maximally 64-bit build, I'm also turning on"
$     echo "the use of 64-bit integers."
$     use64bitint="Y"
$   ENDIF
d2149 13
a2161 13
$   bool_dflt = use64bitall
$   IF F$TYPE(uselargefiles) .NES. "" 
$   THEN
$       IF uselargefiles .OR. uselargefiles .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "Perl can be built to understand large files (files larger than 2 gigabytes)"
$   echo "on some systems.  To do so, Configure can be run with -Duselargefiles."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to understand large files, if available? [''bool_dflt'] "
$   GOSUB myread
$   uselargefiles=ans
d2163 13
a2175 13
$   bool_dflt = "n"
$   IF F$TYPE(uselongdouble) .NES. "" 
$   THEN
$       IF uselongdouble .OR. uselongdouble .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "Perl can be built to take advantage of long doubles which"
$   echo "(if available) may give more accuracy and range for floating point numbers."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to use long doubles, if available? [''bool_dflt'] "
$   GOSUB myread
$   uselongdouble = ans
a2176 1
$ ENDIF ! not VAX && >= 7.1
d2180 1
a2180 1
$       usesitecustomize = "define"
d2182 1
a2182 1
$       usesitecustomize = "undef"
d2186 20
a2205 20
$   echo ""
$   echo "By default, perl (and pretty much everything else on VMS) uses"
$   echo "case-insensitive linker symbols. Which is to say, when the"
$   echo "underlying C code makes a call to a routine called Perl_foo in"
$   echo "the source, the name in the object modules or shareable images"
$   echo "is really PERL_FOO. There are some packages that use an"
$   echo "embedded perl interpreter that instead require case-sensitive"
$   echo "linker symbols."
$   echo ""
$   echo "If you have no idea what this means, and do not have"
$   echo "any program requiring anything, choose the default."
$   bool_dflt = be_case_sensitive
$   if f$type(usecasesensitive) .nes. ""
$   then
$       if usecasesensitive .or. usecasesensitive .eqs. "define" then bool_dflt = "y"
$       if f$extract(0,1,f$edit(usecasesensitive,"collapse,upcase")).eqs."N" .or. usecasesensitive .eqs. "undef"  then bool_dflt = "n"
$   endif
$   rp = "Build with case-sensitive symbols? [''bool_dflt'] "
$   GOSUB myread
$   be_case_sensitive = ans
a2219 2
$ IF F$ELEMENT(0, "-", archname) .NES. "VMS_VAX"
$ THEN
d2221 9
a2229 7
$   echo ""
$   echo "Perl normally uses IEEE format (T_FLOAT) floating point numbers on"
$   echo "Alpha and Itanium, but if you need G_FLOAT for binary compatibility"
$   echo "with an external library or existing data, you may wish to disable"
$   echo "the IEEE math option."
$   bool_dflt = use_ieee_math
$   if f$type(useieee) .nes. "" 
d2231 3
a2233 6
$       if useieee .or. useieee .eqs. "define" 
$       then 
$         bool_dflt="y"
$       else
$         bool_dflt="n"
$       endif
d2235 4
a2238 6
$   rp = "Use IEEE math? [''bool_dflt'] "
$   GOSUB myread
$   use_ieee_math = ans
$ ELSE
$   use_ieee_math = "n"
$ ENDIF
d2809 4
a2812 1
$   
a2875 4
$ IF ccname .NES. "DEC" .AND. ccname .NES. "CXX"
$ THEN
$   dflt = dflt - "POSIX"             ! not with VAX C or GCC
$ ENDIF
d2888 1
a3297 1
$ usedevel="undef"
d3303 1
a3303 6
$ IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
$ THEN
$   libc="(DECCRTL)"
$ ELSE
$   libc=" "
$ ENDIF
d3310 21
a3330 44
$ IF F$ELEMENT(0, "-", archname) .NES. "VMS_VAX"
$ THEN
$   d_PRId64 = "define"
$   d_PRIi64 = "define"
$   d_PRIu64 = "define"
$   d_PRIo64 = "define"
$   d_PRIx64 = "define"
$   d_PRIXU64 = "define"
$   sPRId64 = """Ld"""
$   sPRIXU64 = """LX"""
$   sPRIi64 = """Li"""
$   sPRIo64 = """Lo"""
$   sPRIu64 = """Lu"""
$   sPRIx64 = """Lx"""
$   d_quad = "define"
$   quadtype = "long long"
$   uquadtype = "unsigned long long"
$   quadkind  = "3"
$!
$   d_frexpl = "define"
$   d_modfl = "define"
$   d_modflproto = "define"
$ ELSE
$   d_PRId64 = "undef"
$   d_PRIi64 = "undef"
$   d_PRIXU64 = "undef"
$   d_PRIu64 = "undef"
$   d_PRIo64 = "undef"
$   d_PRIx64 = "undef"
$   sPRId64 = ""
$   sPRIXU64 = """lX"""
$   sPRIi64 = ""
$   sPRIo64 = ""
$   sPRIu64 = ""
$   sPRIx64 = ""
$   d_quad = "undef"
$   quadtype = "undef"
$   uquadtype = "undef"
$   quadkind  = "undef"
$!
$   d_frexpl = "undef"
$   d_modfl = "undef"
$   d_modflproto = "undef"
$ ENDIF
d3334 16
d3352 36
a3387 1
$ ELSE
d3390 19
d3620 4
d3631 4
d5144 1
a5144 1
$  IF (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5162 1
a5162 1
$    IF (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5203 1
a5203 1
$    IF (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5232 6
a5237 6
$  d_setgrent = "undef"
$  d_ttyname_r = "undef"
$  ttyname_r_proto = "0"
$  d_snprintf = "undef"
$  d_vsnprintf = "undef"
$  if (vms_ver .GES. "7.3-2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
a5238 7
$    echo "Found 64 bit OpenVMS ''vms_ver' -- will build with V7.3-2 routines"
$    d_getgrgid_r = "define"
$    getgrgid_r_proto = "1"
$    d_getgrnam_r = "define"
$    getgrnam_r_proto = "1"
$    if d_symlink .or. d_symlink .EQS. "define"
$    then
a5241 6
$    endif
$    d_setgrent = "define"
$    d_ttyname_r = "define"
$    ttyname_r_proto = "1"
$    d_snprintf = "define"
$    d_vsnprintf = "define"
d5243 5
d5263 1
a5263 1
$!$  if (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5281 1
a5281 1
$  if (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5343 7
d5357 1
a5357 4
$ IF (vms_ver .GES. "7.3")
$ THEN
$     sig_name2 = sig_name2 + " NUM27 WINCH"
$ ENDIF
a5419 19
$   d_mbstowcs="define"
$   d_mbtowc="define"
$   d_stdiobase="define"
$   d_stdio_cnt_lval="define"
$   d_stdio_ptr_lval="define"
$   d_stdstdio="define"
$   d_faststdio="define"
$   d_wcstombs="define"
$   d_mblen="define"
$   d_mktime="define"
$   d_strcoll="define"
$   d_strxfrm="define"
$   d_wctomb="define"
$   i_locale="define"
$   i_langinfo="define"
$   d_locconv="define"
$   d_lc_monetary_2008="define"
$   d_nl_langinfo="define"
$   d_setlocale="define"
a5420 20
$ ELSE
$   d_mbstowcs="undef"
$   d_mbtowc="undef"
$   d_stdiobase="undef"
$   d_stdio_cnt_lval="undef"
$   d_stdio_ptr_lval="undef"
$   d_stdstdio="undef"
$   d_faststdio="undef"
$   d_wcstombs="undef"
$   d_mblen="undef"
$   d_mktime="undef"
$   d_strcoll="undef"
$   d_strxfrm="undef"
$   d_wctomb="undef"
$   i_locale="undef"
$   i_langinfo="undef"
$   d_locconv="undef"
$   d_lc_monetary_2008="undef"
$   d_nl_langinfo="undef"
$   d_setlocale="undef"
d5422 16
d5449 1
a5449 1
$   if (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5471 1
a5471 6
$   IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
$   THEN
$     socksizetype="unsigned int"
$   ELSE
$     socksizetype="int *"
$   ENDIF
d5531 1
d5535 3
d5923 1
d5928 2
d5954 1
d5963 1
d5979 1
d5989 1
d6001 2
d6004 2
d6013 2
d6016 1
d6018 8
a6025 2
$ WC "d_finite='undef'"
$ WC "d_finitel='undef'"
d6029 3
d6034 3
d6041 1
d6049 1
a6049 1
$ WC "d_fsync='undef'"
d6055 1
a6055 6
$ IF vms_ver .GES. "7.3"
$ THEN
$   WC "d_getaddrinfo='define'"
$ ELSE
$   WC "d_getaddrinfo='undef'"
$ ENDIF
d6070 1
a6070 6
$ IF vms_ver .GES. "7.3"
$ THEN
$   WC "d_getnameinfo='define'"
$ ELSE
$   WC "d_getnameinfo='undef'"
$ ENDIF
d6098 2
d6114 1
d6116 2
d6120 4
a6123 1
$ WC "d_killpg='undef'"
d6126 2
d6130 4
d6137 1
a6137 1
$ WC "d_lc_monetary_2008='" + d_lc_monetary_2008 + "'"
d6139 3
d6144 4
d6159 1
d6189 1
d6193 3
d6221 1
d6237 3
d6242 1
d6244 1
d6249 1
d6305 7
d6331 1
d6375 1
d6388 2
d6419 4
a6422 2
$ WC "d_wcstombs='" + d_wcstombs + "'"
$ WC "d_wctomb='" + d_wctomb + "'"
d6436 4
d6485 1
d6492 1
d6494 1
d6524 1
d6537 1
d6615 4
d6654 1
d6791 1
d6809 1
d6849 1
a6849 1
$ IF use_threads .AND. vms_ver .GES. "7.2"
d6870 1
d6877 1
a6877 1
$ WC "d_getlogin_r='undef'"
d6892 1
d6895 1
d6912 1
d6928 6
a6933 1
$ WC "getlogin_r_proto='0'"
d6982 1
a6982 1
$   'ld' munchconfig.obj,munchconfig.opt/opt
d6985 1
a6985 1
$   'ld' munchconfig.obj
d6987 1
a6987 1
$ IF F$SEARCH("munchconfig.obj") .NES. "" THEN DELETE/NOLOG/NOCONFIRM munchconfig.obj;
d7077 1
a7077 1
$ mcr []munchconfig 'config_sh' [-]config_h.sh
d7166 1
a7166 1
$ mcr []munchconfig 'config_sh' 'Makefile_SH' -f extra_subs.txt
d7168 1
a7168 1
$ DELETE/NOLOG/NOCONFIRM []munchconfig.exe;
d7183 1
d7206 1
a7206 1
$     if do_copy then mcr sys$disk:[]miniperl.exe -e "exit 0+$^E unless File::Copy::rmscopy(q{''file'}, q{''pod_file'});"
a7385 1
$ WRITE CONFIG "$ config_data== """ + perl_setup_perl + " ''vms_prefix':[utils]config_data.com"""
d7389 1
a7389 1
$ WRITE CONFIG "$ find2perl  == """ + perl_setup_perl + " ''vms_prefix':[utils]find2perl.com"""
d7393 1
d7398 1
a7407 1
$ WRITE CONFIG "$ psed       == """ + perl_setup_perl + " ''vms_prefix':[utils]psed.com"""
a7408 1
$ WRITE CONFIG "$ s2p        == """ + perl_setup_perl + " ''vms_prefix':[utils]s2p.com"""
@


1.3
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d5410 1
d5431 1
d6104 1
@


1.2
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@a5409 1
$   d_lc_monetary_2008="define"
a5429 1
$   d_lc_monetary_2008="undef"
a6101 1
$ WC "d_lc_monetary_2008='" + d_lc_monetary_2008 + "'"
@


1.1
log
@Initial revision
@
text
@d1 1
d3 1
d6 1
a6 1
$! For example, if you unpacked perl into: [USER.PERL5_00n...] then you will 
d9 1
a9 1
$! $ SET DEFAULT [USER.PERL5_00n]
d14 1
a14 1
$! $ SET DEFAULT [USER.PERL5_00n]
d19 1
a19 1
$! Beyond that send email to VMSPerl@@cor.newman.upenn.edu 
d24 1
a24 1
$!  Dan Sugalski <sugalskd@@ous.edu>
d29 2
a30 2
$! (a Bourne sh[ell] script for configuring the installation of perl on VMS)
$! in the perl5.002|3 epoch (spring/summer 1996)
a34 3
$! SET NOVERIFY
$ sav_ver = F$VERIFY(sav_ver)
$!
d38 1
d40 1
d43 14
a56 1
$ use_debugging_perl = "Y"
d58 2
a59 1
$ Thread_Live_Dangerously = "MT="
d63 5
a67 1
$ preload_env = "N"
d69 11
a79 2
$! max_allowed_dir_depth = 3  ! e.g. [A.B.PERL5_00n] not [A.B.C.PERL5_00n]
$ max_allowed_dir_depth = 2  ! e.g. [FOO.PERL5_00n] not [FOO.BAR.PERL5_00n]
a120 2
$!: full support for void wanted by default            !sfn
$!defvoidused=15                                       !sfn
d123 1
a123 1
$!libswanted="$libswanted dld ld sun m c cposix posix ndir dir crypt" !sfn
d139 2
a140 1
$ config_sh=""
d147 1
a147 3
$ Using_Dec_C = ""
$ Using_Vax_C = ""
$ Using_Gnu_C = ""
d149 1
d151 2
d155 1
d161 5
a165 1
$   IF (P'i'.NES."") THEN bang = bang + 1
d192 1
a192 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "f") !"-f")
d198 2
a199 2
$       test = F$FILE_ATTRIBUTES(config_sh,"PRO")
$       IF (F$LOCATE("R",test).NE.F$LENGTH(test)) 
d201 1
d214 1
a214 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "h")
d221 8
a228 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "r")
d235 1
a235 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "s")
d242 1
a242 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "E") !"-E")
d247 1
a247 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "K") !"-K")
d254 1
a254 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "O")
d261 1
a261 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "S") !"-S")
d263 1
a263 1
$     extractsh = "true" !VMS?
d268 1
a268 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "D") !"-D")
a270 2
$!Hmm.. this part needs work
$!       P'i'
d273 3
a275 1
$       P'i' = "define"
d280 1
a280 1
$         echo "''me': use '-Usymbol=val' not '-Dsymbol='."
d283 4
a286 3
$!Hmm.. this part needs work
$!           'F$EXTRACT(0,F$LOCATE("=",P'i'),P'i')' = -
$! 'F$EXTRACT(F$LOCATE("=",P'i'),P'i'),F$LENGTH(P'i'),P'i')'
a288 1
$     ECHO "P''i' =>",P'i',"<="  !Diag
d291 1
a291 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "U") !"-U")
d296 3
a298 1
$       P'i' = ""
d303 1
a303 1
$         echo "''me': use '-Dsymbol=val' not '-Usymbol=val'."
d306 3
a308 1
$         P'i' = "undef"
a310 1
$     ECHO "P''i' =>",P'i',"<="  !Diag
d318 1
a318 1
$     EXIT !0
d330 1
d335 4
a338 3
$   echo "Usage: @@''me' [-dehrEKOSV] [-fconfig.sh] [-Dsymbol] [-Dsymbol=value]"
$   echo "                [-Usymbol] [-Usymbol=]"
$   TYPE SYS$INPUT
d343 1
d357 1
d370 19
a388 1
$ STDOUT = F$TRNLNM("SYS$OUTPUT")
d392 1
a392 1
$ open/write STDOUT 'STDOUT'
d410 1
d431 1
a431 1
$! Here I assume we are in the [foo.PERL5xxx.VMS...] tree
d449 9
a457 5
$! MANIFEST. has been found and we have set def'ed there - 
$! time to bail out before it's too late.
$ tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$ IF tmp .GES. "7.2" THEN GOTO Beyond_depth_check
$   IF (F$ELEMENT(max_allowed_dir_depth,".",F$ENVIRONMENT("Default")).nes.".")
d460 1
d465 1
d481 6
a486 1
$       IF ( F$SEARCH("[.UU]*.*").NES."" ) THEN DELETE/NOLOG [.UU]*.*;*
d498 1
a498 1
$     IF ("TRUE")	
d500 3
d531 2
d535 5
d557 21
d601 2
d609 1
a609 1
and contact the author (sugalskd@@ous.edu).
d611 1
d622 1
a622 1
$     DELETE/NOLOG MISSING.;
d630 9
a638 1
$! (sfn, will assume 80-ish)
d644 3
d649 29
a677 8
$ If (fastread)
$ Then
$   echo4 "''rp'"
$ Else
$   If (silent)
$   Then
$     READ SYS$COMMAND/PROMPT="''rp'" ans
$   Else
d679 36
a714 3
$     READ SYS$COMMAND/PROMPT="''rp'" ans
$   Endif
$ Endif
d734 54
d795 1
a795 1
$   SET MESSAGE/NOFAC/NOSEV/NOIDENT/NOTEXT !sorry :-(
d800 2
a801 2
$     dflt = "n"
$     rp = "Would you like to see the instructions? [''dflt'] "
d805 1
a805 1
$   SET MESSAGE 'messages'                 !hope you made it here :-)
d812 1
d821 7
a827 1
$   READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
d829 1
d831 1
a831 1
In a hurry? You may run '@@Configure -d'.  This will bypass nearly all
d833 1
a833 1
there was already a config.sh file). Type '@@Configure -h' for a list of 
d836 7
a842 1
$   READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
d844 1
d849 1
a849 1
you have with Configure.com, let me (sugalskd@@ous.edu) know how I blew
d852 1
d863 6
a868 1
$   READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
a877 1
$ sharpbang = "$ "
d881 1
a881 1
$!trylist="Mcc/byacc/cpp/csh/date/egrep/less/line/more/nroff/perl/pg/sendmail/test/uname"
d886 1
a886 1
$!: determine whether symbolic links are supported !sfn
d893 1
a893 1
$ config_sh_es = "''config_sh'/[-]config.sh/[-.vms]config.vms/"
d905 6
a910 1
$ IF (configshfound.EQS."") THEN GOTO Beyond_config_sh
d912 62
a973 2
$ echo ""
$ echo "Fetching default answers from ''config_sh'..."
d976 1
d980 1
d983 1
a996 2
$! genconfig.pl has "osname='VMS'"
$ osname = F$EDIT(F$GETSYI("NODE_SWTYPE"),"COLLAPSE") 
d1003 1
d1008 1
a1008 1
 This package is intended to Configure the building of Perl for VMS.
d1010 3
a1012 1
$   READ SYS$COMMAND/PROMPT="Continue anyway? [n] " ans
a1021 18
$ ELSE           !we are on VMS huzzah!
$   IF .NOT.silent 
$   THEN TYPE SYS$INPUT:

Configure uses the operating system name and version to set some defaults.
The default value is probably right if the name rings a bell. Otherwise,
since spelling matters for me, either accept the default or answer "none"
to leave it blank.
$   ENDIF
$   rp = "Operating system name? [''osname'] "
$   GOSUB myread
$   IF ans.nes.""
$   THEN
$     IF (ans.NES.osname) !.AND.knowitall
$     THEN
$       echo4 "I'll go with ''osname' anyway..."
$     ENDIF
$   ENDIF
a1024 1
$! see 'user' above.
d1026 1
a1026 2
$! cf_time = F$CVTIME()                 !superceded by procedure below
$ osvers = F$GETSYI("VERSION")
a1047 1
$! Peter Prymmer pvhp@@lns62.lns.cornell.edu
a1085 1
$   echo "%Config-I-VMS,"
d1093 1
a1093 1
$   dflt = "y"
d1095 1
a1095 1
$   rp = "%Config-I-VMS, (''systz') Is this UTC Time Zone Offset correct? [''dflt'] "
d1097 1
a1097 1
$   IF ans.OR.(ans.EQS."") 
a1104 1
$   echo4 "%Config-I-VMS,"
d1111 1
a1111 1
$ echo "you are. As an example Eastern (US) Standard Time is -5:00 offset, but"
d1149 18
a1166 2
$!: determine the architecture name  
$! genconfig.pl has either archname='VMS_AXP' or 'VMS_VAX'
d1168 1
a1168 1
$ IF (F$GETSYI("HW_MODEL") .LT. 1024)
d1171 3
d1175 1
a1175 18
$   archname = "VMS_AXP"
$ ENDIF
$ rp = "What is your architecture name? [''archname'] "
$ GOSUB myread
$ IF ans.NES.""
$ THEN
$   ans = F$EDIT(ans,"COLLAPSE, UPCASE")
$   IF (ans.NES.archname) !.AND.knowitall
$   THEN
$     echo4 "I'll go with ''archname' anyway..."
$   ENDIF
$ ENDIF
$ IF (archname.EQS."VMS_AXP")
$ THEN
$   dflt = "n"
$   rp = "Are you sharing your PERL_ROOT with a VAX? [''dflt'] "
$   GOSUB myread
$   if ans.NES.""
d1177 3
a1179 5
$     ans = F$EDIT(ans,"COLLAPSE, UPCASE")
$   ENDIF
$   IF (ans.NES."Y")
$   THEN
$     sharedperl = "N"
d1181 3
a1183 2
$     sharedperl = "Y"
$     macros = macros + """AXE=1"","
d1185 1
a1185 2
$ ELSE
$   sharedperl = "N"
a1187 67
$!: is AFS running?                       !sfn
$!: decide how portable to be.  Allow command line overrides. !sfn
$!: set up shell script to do ~ expansion !sfn
$!: expand filename                       !sfn
$!: now set up to get a file name         !sfn
$!
$ vms_skip_install = "true"
$ dflt = "y"
$! echo ""
$ rp = "%Config-I-VMS, Do you wish to skip the """"where install"""" questions? [''dflt'] "
$ GOSUB myread
$ IF (.NOT.ans).AND.(ans.NES."") THEN vms_skip_install = "false"
$ prefix = F$ENVIRONMENT("DEFAULT") - ".UU]" + "]"
$ prefix = f$parse(prefix,,,,"NO_CONCEAL") - "][" - ".;"
$ prefix = prefix - "]" + ".]"
$ IF (.NOT.vms_skip_install)
$ THEN
$!: determine root of directory hierarchy where package will be installed.
$   dflt = "default"
$   IF .NOT.silent 
$   THEN 
$     echo ""
$     echo "By default, ''package' will be installed in ''dflt'/bin, manual"
$     echo "pages under ''dflt'/man, etc..., i.e. with ''dflt' as prefix for"
$     echo "all installation directories. Typically set to /usr/local, but you"
$     echo "may choose /usr if you wish to install ''package' among your system
$   ENDIF
$   IF .NOT.silent 
$   THEN TYPE SYS$INPUT:
binaries. If you wish to have binaries under /bin but manual pages
under /usr/local/man, that's ok: you will be prompted separately
for each of the installation directories, the prefix being only used
to set the defaults.
$   ENDIF
$   dflt = prefix
$   rp = "Installation prefix to use? [ ''dflt' ] "
$   GOSUB myread
$   IF ans.NES.""
$   THEN 
$     prefix = ans
$     IF F$LOCATE(".]",ans) .EQ. F$LENGTH(ans) THEN prefix = prefix - "]" + ".]"
$   ELSE 
$     prefix = dflt
$   ENDIF
$!
$!: set the prefixit variable, to compute a suitable default value
$!
$!: determine where private library files go
$!: Usual default is /usr/local/lib/perl5.  Also allow things like 
$!: /opt/perl/lib, since /opt/perl/lib/perl5 would be redundant.
$   IF .NOT.silent 
$   THEN TYPE SYS$INPUT:

There are some auxiliary files for perl5 that need to be put into a
private library directory that is accessible by everyone.
$   ENDIF
$   dflt = prefix - ".]" + ".LIB]"
$   rp = "Pathname where the private library files will reside? " 
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   IF ans.NES.""
$   THEN privlib = ans
$   ELSE privlib = dflt
$   ENDIF
$!
$ ENDIF !%Config-I-VMS, skip "where install" questions
$!
d1190 1
d1193 7
a1199 1
$ echo4 "Getting the current patchlevel..." !>&4
d1205 4
d1211 2
a1212 2
$   READ/END_Of_File=Close_patch CONFIG line
$   IF ((F$LOCATE("#define PATCHLEVEL",line).NE.F$LENGTH(line)).AND.(.NOT.got_patch))
d1215 1
a1215 1
$     patchlevel = F$EXTRACT(18,F$LENGTH(line)-18,line)
d1218 1
a1218 1
$   IF ((F$LOCATE("#define SUBVERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_sub))
d1221 1
a1221 1
$     subversion = F$EXTRACT(18,F$LENGTH(line)-18,line)
d1224 46
a1269 1
$   IF (.NOT.got_patch).OR.(.NOT.got_sub) THEN GOTO Patchlevel_h_loop
a1271 3
$   ELSE
$     patchlevel="0"
$     subversion="0"
d1273 2
a1274 9
$ echo "(You have ''package' ''baserev' PL''patchlevel' sub''subversion'.)"
$! This whole thing needs replacing w/ F$FAO() calls:
$ patchlevel = F$INTEGER(patchlevel)
$ IF patchlevel.LT.10
$ THEN patchlevel = "00" + F$STRING(patchlevel)
$ ELSE patchlevel = "0" + F$STRING(patchlevel)
$ ENDIF
$ subversion = F$INTEGER(subversion)
$ IF subversion.GT.0
d1276 8
a1283 5
$   IF subversion.LT.10
$   THEN subversion = "0" + F$STRING(subversion)
$   ELSE subversion = F$STRING(subversion)
$   ENDIF
$ ELSE subversion = ""
d1286 2
a1287 3
$ version = F$EXTRACT(0,1,baserev) + "_" + patchlevel + subversion
$!
$ IF (.NOT.vms_skip_install)
d1289 3
a1291 93
$!: set the prefixup variable, to restore leading tilda escape !sfn
$!: set the prefixup variable, to restore leading tilde escape !sfn
$!
$!: determine where public architecture dependent libraries go
$   IF (.NOT.silent) 
$   THEN 
$     echo ""
$     echo "''package' contains architecture-dependent library files.  If you are"
$   ENDIF
$   IF (.NOT.silent) 
$   THEN TYPE SYS$INPUT:
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.
$   ENDIF
$   dflt = privlib - "]" + "." + archname + "." + version + "]"
$   rp = "Where do you want to put the public architecture-dependent libraries? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   IF ans.NES.""
$   THEN archlib = ans
$   ELSE archlib = dflt
$   ENDIF
$!
$!: set up the script used to warn in case of inconsistency !sfn
$!: function used to set $1 to $val                         !sfn
$!
$ ENDIF !%Config-I-VMS, skip "where install" questions
$! This quotation from Configure has to be included on VMS:
$ TYPE SYS$INPUT:

There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
$ CONTINUE
$ IF (.NOT.vms_skip_install)
$ THEN
$!: it so happens the Eunice I know will not run shell scripts in Unix format
$!
$!: see if setuid scripts can be secure           !sfn
$!: now see if they want to do setuid emulation   !sfn
$!
$!: determine where site specific libraries go.
$   IF .NOT.silent 
$   THEN TYPE SYS$INPUT:

The installation process will also create a directory for
site-specific extensions and modules.  Some users find it convenient
to place all local files in this directory rather than in the main
distribution directory.
$   ENDIF
$   dflt = privlib - "]" + ".SITE_PERL]"
$   rp = "Pathname for the site-specific library files? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   IF ans.NES.""
$   THEN sitelib = ans
$   ELSE sitelib = dflt
$   ENDIF
$!
$!: determine where site specific architecture-dependent libraries go.
$   IF .NOT.silent 
$   THEN TYPE SYS$INPUT:

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.
$   ENDIF
$   dflt = sitelib - "]" + "." + archname + "]"
$   rp = "Pathname for the site-specific architecture-dependent library files? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   IF ans.NES.""
$   THEN sitearch = ans
$   ELSE sitearch = dflt
$   ENDIF
$!
$!: determine where old public architecture dependent libraries might be
$!
$!: determine where public executables go
$   dflt = prefix - ".]" + ".BIN]"
$   rp = "Pathname where the public executables will reside? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   IF ans.NES.""
$   THEN bin = ans
$   ELSE bin = dflt
$   ENDIF
$!
$!: determine where manual pages are on this system
$!: What suffix to use on installed man pages
$!: see if we can have long filenames
$!: determine where library module manual pages go
$!: What suffix to use on installed man pages
$!: see what memory models we can support
d1293 1
a1293 1
$ ENDIF !%Config-I-VMS, skip "where install" questions
d1296 1
a1296 1
$! cc_list = "cc/vaxc|cc/decc|gcc" !%Config-I-VMS, compiler symbols/commands
d1303 1
d1305 1
d1317 3
a1319 2
$ DEFINE SYS$ERROR _NLA0:
$ DEFINE SYS$OUTPUT _NLA0:
d1322 1
a1322 2
$ DEASSIGN SYS$OUTPUT
$ DEASSIGN SYS$ERROR
a1323 2
$! echo "%Config-I-VMS, After cc compile $status = >''tmp'<" !diagnostic
$!
d1335 1
a1335 1
$ echo "%Config-I-VMS, Default ""cc"" is ''line' ''archsufx' ''F$GETSYI("VERSION")'" 
a1337 2
$   vms_cc_dflt = "/vaxc"
$   vms_cc_available = vms_cc_available + "cc/vaxc "
d1340 1
a1340 1
$     echo "%Config-I-VMS, Will try cc/decc..."
a1341 2
$   DEFINE SYS$ERROR _NLA0:
$   DEFINE SYS$OUTPUT _NLA0:
d1343 2
a1346 2
$   DEASSIGN SYS$OUTPUT
$   DEASSIGN SYS$ERROR
d1351 1
a1351 1
$     echo "%Config-I-VMS, Apparently you don't have that one."
d1354 1
a1354 1
$     echo "%Config-I-VMS, You also have: ''line' ''archsufx' ''F$GETSYI("VERSION")'"
d1358 2
a1359 1
$   IF F$LOCATE("DEC",line).NE.F$LENGTH(line) 
d1363 1
a1363 19
$     echo "%Config-I-VMS, Will try cc/vaxc..."
$     DEFINE SYS$ERROR _NLA0:
$     DEFINE SYS$OUTPUT _NLA0:
$     SET NOON
$     cc/vaxc/NoObj/list=ccvms.lis ccvms.c
$     tmp = $status
$     DEASSIGN SYS$OUTPUT
$     DEASSIGN SYS$ERROR
$     SET ON
$     IF (silent) THEN GOSUB Shut_up
$     IF tmp.NE.%X10B90001
$     THEN
$       echo "%Config-I-VMS, Apparently you don't have that one."
$     ELSE
$       GOSUB List_parse
$       echo "%Config-I-VMS, You also have: ''line' ''archsufx' ''F$GETSYI("VERSION")'"
$       vms_cc_available = vms_cc_available + "cc/vaxc "
$     ENDIF
$   ENDIF
d1367 1
a1367 1
$ echo "%Config-I-VMS, Checking for Gcc"
d1369 3
a1371 2
$ DEFINE SYS$ERROR CONFIG
$ DEFINE SYS$OUTPUT CONFIG
d1374 1
a1374 2
$ DEASSIGN SYS$OUTPUT
$ DEASSIGN SYS$ERROR
d1379 3
a1381 2
$   echo "%Config-I-VMS, Symbol ""''gcc_symbol'"" is not defined. I guess you don't have it."
$   goto cc_cleanup
d1393 78
d1476 1
a1476 1
$ echo "%Config-I-VMS, available compiler(s):"
d1480 6
a1485 1
$   dflt = "cc''vms_cc_dflt'"  !-> "cc" in case first compile went OK
d1495 2
a1496 1
$   IF F$LOCATE("dec",ans).NE.F$LENGTH(ans)
d1499 2
a1500 1
$     Using_Dec_C = "Yes"
d1503 1
a1503 1
$   IF F$LOCATE("vax",ans).NE.F$LENGTH(ans)
d1505 3
a1507 2
$     Mcc = "cc/vaxc"
$     Using_Vax_C = "Yes"
d1509 10
a1518 6
$   ENDIF
$   IF Mcc.NES.dflt
$   THEN
$     IF F$LOCATE("dec",dflt).NE.F$LENGTH(dflt) 
$     THEN 
$       C_COMPILER_Replace = "CC=cc=''Mcc'"
d1520 1
a1520 2
$       Using_Dec_C = "Yes"
$       IF F$LOCATE("vax",dflt).NE.F$LENGTH(dflt) 
d1522 1
a1525 6
$   ELSE
$     IF Mcc .EQS. "cc/decc"
$     THEN
$       Using_Dec_C = "Yes"
$       C_COMPILER_Replace = "CC=cc=''Mcc'"
$     ENDIF
d1531 1
a1531 6
$     Using_Dec_C = "Yes"
$     C_COMPILER_Replace = "CC=cc=''Mcc'"
$   ENDIF
$   IF Mcc .EQS. "cc/vaxc"
$   THEN
$     Using_Vax_C = "Yes"
d1536 1
a1536 1
$     Using_Gnu_C = "Yes"
d1541 2
a1542 1
$ IF "''Using_Dec_C'".EQS."Yes"
d1545 1
a1545 1
$   echo4 "Checking for Dec C's version number..." !>&4
d1560 3
a1562 2
$   DEFINE SYS$ERROR _NLA0:
$   DEFINE SYS$OUTPUT _NLA0:
a1564 2
$   DEASSIGN SYS$ERROR _NLA0:
$   DEASSIGN SYS$OUTPUT _NLA0:
d1566 3
a1568 3
$   DEFINE SYS$ERROR _NLA0:
$   DEFINE SYS$OUTPUT _NLA0:
$   link deccvers.obj
a1569 2
$   DEASSIGN SYS$ERROR
$   DEASSIGN SYS$OUTPUT
d1572 2
a1573 2
$   DEFINE SYS$ERROR CONFIG
$   DEFINE SYS$OUTPUT CONFIG
d1576 1
a1577 2
$   DEASSIGN SYS$OUTPUT
$   DEASSIGN SYS$ERROR
a1582 1
$!   DELETE/NOLOG/NOCONFIRM deccvers.*;
d1584 3
a1586 24
$   Dec_C_Version = line
$ ENDIF
$Vaxc_Invoke_check:
$ IF "''Using_Vax_C'".EQS."Yes"
$ THEN
$   echo ""
$   echo4 "Checking to see how to invoke Vax C..."
$   OPEN/WRITE CONFIG vaxcchk.c
$   WRITE CONFIG "#include <stdio.h>"
$   WRITE CONFIG "int main() {"
$   WRITE CONFIG "        printf(""%i\n"", ""1"");"
$   WRITE CONFIG "        exit(0);"
$   WRITE CONFIG "}"
$   CLOSE CONFIG
$   DEFINE SYS$ERROR _NLA0:
$   DEFINE SYS$OUTPUT _NLA0:
$   SET NOON
$   cc/vaxc/NoObj vaxcchk.c
$   tmp = $status
$   DEASSIGN SYS$OUTPUT
$   DEASSIGN SYS$ERROR
$   SET ON
$   IF (silent) THEN GOSUB Shut_up
$   IF tmp.NE.%X10B90001
d1588 2
a1589 3
$     Mcc = "cc"
$   ELSE
$     Mcc = "cc/vaxc"
d1591 1
a1591 2
$Vax_c_cleanup:
$   DELETE/NOLOG/NOCONFIRM vaxcchk.*;
d1594 2
a1595 1
$ if "''using_gnu_c'" .eqs. "Yes"
d1597 4
a1600 10
$ vaxcrtl_olb = F$SEARCH("SYS$LIBRARY:VAXCRTL.OLB")
$ vaxcrtl_exe = F$SEARCH("SYS$SHARE:VAXCRTL.EXE")
$ gcclib_olb  = F$SEARCH("GNU_CC:[000000]GCCLIB.OLB")
$ IF gcclib_olb .EQS. "" 
$ THEN 
$! These objects/libs come w/ gcc 2.7.2 for AXP:
$   tmp = F$SEARCH("GNU_CC:[000000]libgcc2.olb")
$   IF tmp .NES. "" then gcclib_olb = tmp
$   tmp = F$SEARCH("GNU_CC:[000000]libgcclib.olb")
$   IF tmp .NES. "" 
d1602 18
a1619 3
$     IF gcclib_olb .EQS. "" 
$     THEN gcclib_olb = tmp
$     ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
d1621 11
d1633 44
a1676 6
$   tmp = F$SEARCH("SYS$LIBRARY:VAXCRTL.OLB")
$   IF tmp .NES. "" 
$   THEN 
$     IF gcclib_olb .EQS. "" 
$     THEN gcclib_olb = tmp
$     ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
d1678 27
a1704 7
$   ENDIF
$   tmp = F$SEARCH("GNU_CC:[000000]crt0.obj")
$   IF tmp .NES. "" 
$   THEN 
$     IF gcclib_olb .EQS. "" 
$     THEN gcclib_olb = tmp
$     ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
a1706 3
$   IF gcclib_olb .EQS. vaxcrtl_olb THEN gcclib_olb = "" !goofy order of axplibs
$ ELSE
$   gcclib_olb = gcclib_olb + "/lib"
d1708 2
a1709 3
$ IF   gcclib_olb .NES. "" .AND. -
     (vaxcrtl_olb .NES. "" .OR. -
      vaxcrtl_exe .NES. "" )
d1711 1
a1711 4
$   echo ""
$   echo4 "Checking for GNU cc in disguise and/or its version number..." !>&4
$   OPEN/WRITE CONFIG gccvers.c
$   WRITE CONFIG "#include <stdlib.h>"  !DECC is sooo picky
d1714 2
a1715 3
$   WRITE CONFIG "#ifdef __GNUC__"
$   WRITE CONFIG "#ifdef __VERSION__"
$   WRITE CONFIG "        printf(""%s\n"", __VERSION__);"
d1717 1
a1717 2
$   WRITE CONFIG "        printf(""%s\n"", ""1"");"
$   WRITE CONFIG "#endif"
d1719 1
a1719 1
$   WRITE CONFIG "        exit(0);"
d1722 4
a1725 3
$   DEFINE SYS$ERROR _NLA0:
$   DEFINE SYS$OUTPUT _NLA0:
$   'Mcc' gccvers.c
d1727 1
a1727 2
$   DEASSIGN SYS$ERROR _NLA0:
$   DEASSIGN SYS$OUTPUT _NLA0:
d1729 6
a1734 21
$   DEFINE SYS$ERROR _NLA0:
$   DEFINE SYS$OUTPUT _NLA0:
$   IF vaxcrtl_exe .EQS. ""
$   THEN 
$     IF F$LOCATE("VAXCRTL",gcclib_olb).NE.F$LENGTH(gcclib_olb)
$     THEN 
$       link gccvers.obj,'gcclib_olb',SYS$LIBRARY:VAXCRTL/Library
$       tmp = $status
$     ELSE
$       link gccvers.obj,'gcclib_olb'
$       tmp = $status
$     ENDIF
$   ELSE
$     OPEN/WRITE CONFIG GCCVERS.OPT
$     WRITE CONFIG "SYS$SHARE:VAXCRTL/SHARE"
$     CLOSE CONFIG
$     link gccvers.obj,GCCVERS.OPT/OPT,'gcclib_olb'
$     tmp = $status
$   ENDIF
$   DEASSIGN SYS$ERROR
$   DEASSIGN SYS$OUTPUT
d1736 5
a1740 4
$   OPEN/WRITE CONFIG gccvers.out
$   DEFINE SYS$ERROR CONFIG
$   DEFINE SYS$OUTPUT CONFIG
$   mcr []gccvers.exe
d1742 1
a1743 2
$   DEASSIGN SYS$OUTPUT
$   DEASSIGN SYS$ERROR
d1745 3
a1747 3
$   OPEN/READ CONFIG gccvers.out
$   READ/END_OF_FILE=Gcc_cleanup CONFIG line
$Gcc_cleanup:
d1749 24
a1772 11
$   DELETE/NOLOG/NOCONFIRM gccvers.*;
$   IF F$LOCATE("GNU C version ",line).NE.F$LENGTH(line)
$   THEN 
$     echo "You are not using GNU cc."
$     GOTO Host_name
$   ELSE 
$     echo "You are using GNU cc ''line'"
$     Using_Gnu_C = "Yes"
$     C_COMPILER_Replace = "CC=cc=''Mcc'"
$     GOTO Include_dirs
$   ENDIF
d1774 4
a1777 1
$endif
d1783 1
a1783 1
$ IF (F$GETSYI("HW_MODEL") .LT. 1024)
d1788 6
a1793 1
$   archsufx = "AXP"
d1807 1
a1807 1
$!: What should the include directory be ?
d1810 1
a1810 1
$ IF f$length( rp + "[''dflt'] " ).gt.76
d1831 4
d1842 1
d1844 1
a1844 1
$ IF (.not.ans).and.(ans.NES."")
d1864 1
d1866 1
a1866 1
$   IF ans THEN mydomain = ans
d1879 3
a1881 1
$ THEN TYPE SYS$INPUT:
d1888 1
d1890 6
a1895 6
$ dflt = "''cf_by@@''myhostname'"+"''mydomain'"
$ rp = "What is your e-mail address? [''dflt'] "
$ GOSUB myread
$ IF ans
$ THEN cf_email = ans
$ ELSE cf_email = dflt
d1899 3
a1901 1
$ THEN TYPE SYS$INPUT:
d1908 1
d1913 1
a1913 4
$ IF ans
$ THEN perladmin = ans
$ ELSE perladmin = dflt
$ ENDIF
d1937 2
a1938 9
$!: see if we have sigaction
$!: see whether socketshr exists
$ IF (F$SEARCH(F$PARSE("SocketShr","Sys$Share:.Exe")).NES."")
$ THEN
$   has_socketshr     = "T"
$   echo ""
$   echo4 "Hmm... Looks like you have SOCKETSHR's Berkeley networking support."
$ endif
$ if (Dec_C_Version .ge. 50200000)
d1942 3
a1944 1
$   echo4 "Hmm... Looks like you've got Dec C's Berkeley networking support."
d1946 2
a1947 2
$ ! Hey, we've got both. Default to Dec C, then, since it's better
$ if ("''Has_socketshr'".eq."T") .or.("''has_dec_c_sockets'".eq."T")
d1950 5
a1954 11
$   echo "You've got sockets available. Which socket stack do you want to"
$   echo "build into perl?"
$   if "''has_dec_c_sockets'".eqs."T"
$   THEN
$     dflt = "DECC"
$   else
$     dflt = "SOCKETSHR"
$   endif
$   rp = "Choose socket stack (NONE"
$   if "''has_socketshr'".eqs."T" THEN rp = rp + ",SOCKETSHR"
$   if "''has_dec_c_sockets'".eqs."T" THEN rp = rp + ",DECC"
d1957 2
a1958 3
$   IF "''ans'".eqs."" THEN ans = "''dflt'"
$   has_dec_c_sockets = "F"
$   has_socketshr = "F"
d1960 36
a1995 2
$   IF ans.eqs."decc" then has_dec_c_sockets = "T"
$   IF ans.eqs."socketshr" then has_socketshr = "T"
d1997 3
d2003 1
a2003 1
$ if (Using_Dec_C.eqs."Yes")
a2004 3
$   echo "This version of Perl can be built with threads. While really nifty,
$   echo "they are a beta feature, and there is a speed penalty for perl
$   echo "programs if you build with threads *even if you don't use them*
d2006 19
a2024 2
$   dflt = "n"
$   rp = "Build with threads? [''dflt'] "
d2026 1
a2026 2
$   if ans.eqs."" then ans = dflt
$   if (f$extract(0, 1, "''ans'").eqs."Y").or.(f$extract(0, 1, "''ans'").eqs."y")
d2028 1
d2030 19
a2048 2
$     ! Are they on VMS 7.1 on an alpha?
$     if (Archname.eqs."VMS_AXP").and.("''f$extract(1,3, f$getsyi(""version""))'".ges."7.1")
d2051 10
a2060 11
$       echo "Threaded perl can be linked to use multiple kernel threads
$       echo "and system upcalls on VMS 7.1+ on Alpha systems. This feature
$       echo "allows multiple threads to execute simultaneously on an SMP
$       echo "system as well as preventing a single thread from blocking
$       echo "all the threads in a program, even on a single-processor
$       echo "machine. Unfortunately this feature isn't safe on an
$       echo "unpatched 7.1 system. (Several OS patches were required when
$       echo "this procedure was written)
$       echo ""
$       dflt = "n"
$       rp = "Enable multiple kernel threads and upcalls? [''dflt'] "
d2062 1
a2062 2
$       if ans.eqs."" then ans="''dflt'"
$       if f$extract(0, 1, f$edit(ans,"TRIM,COMPRESS,UPCASE")).eqs."Y"
d2064 22
a2085 1
$         Thread_Live_Dangerously = "MT=MT=1"
d2088 2
d2092 2
d2095 1
a2095 1
$! Pre-load %ENV?
d2097 21
a2117 18
$ echo "Because of the way perl fetches the list of logical names
$ echo "for the %ENV hash (we spawn a subprocess that does a
$ echo "SHOW LOGICALS *, which is expensive), we defer fetching it
$ echo "until the first time a program iterates over the %ENV hash.
$ echo "This means things like 'exists($ENV{'SYS$MANAGER'})' will
$ echo "return false unless you've already accessed $ENV{SYS$MANAGER}
$ echo "or done something like a keys %ENV."
$ echo ""
$ echo "If you choose, perl can populate the %ENV hash at startup.
$ echo "This will exact both a memory penalty (to store the keys) and
$ echo "a time penalty (to spawn the subprocess) every time you invoke
$ echo "perl. Depending on your system, this might not be a big deal.
$ echo ""
$ dflt = "n"
$ rp = "Populate %ENV at startup time? [''dflt'] "
$ GOSUB myread
$ if ans.eqs."" then ans="''dflt'"
$ preload_env = f$extract(0, 1, f$edit(ans,"TRIM,COMPRESS,UPCASE"))
d2119 2
a2120 13
$! Ask if they want to use perl's memory allocator
$ echo ""
$ echo "Perl has a built-in memory allocator that's tuned for perl's
$ echo "normal memory usage. It's oftentimes better than the standard
$ echo "system memory allocator. It also has the advantage of providing
$ echo "memory allocation statistics, if you choose to enable them.
$ echo ""
$ dflt = "n"
$ rp = "Build with perl's memory allocator? [''dflt'] "
$ GOSUB myread
$ if ans.eqs."" then ans="''dflt'"
$ mymalloc = f$extract(0, 1, f$edit(ans,"TRIM,COMPRESS,UPCASE"))
$ if mymalloc.eqs."Y"
d2122 33
a2154 1
$   if use_debugging_perl.eqs."Y"
d2157 9
a2165 9
$     echo "Perl can keep statistics on memory usage if you choose to use
$     echo "them. This is useful for debugging, but does have some
$     echo "performance overhead.
$     echo ""
$     dflt = "n"
$     rp = "Do you want the debugging memory allocator? [''dflt'] "
$     gosub myread
$     if ans.eqs."" then ans="''dflt'"
$     use_debugmalloc = f$extract(0, 1, f$edit(ans, "TRIM,COMPRESS,UPCASE"))
a2166 1
$   ! Check which memory allocator we want
d2168 2
a2169 7
$   echo "There are currently three different memory allocators: the
$   echo "default (which is a pretty good general-purpose memory manager),
$   echo "the TWO_POT allocator (which is optimized to save memory for
$   echo "larger allocations), and PACK_MALLOC (which is optimized to save
$   echo "memory for smaller allocations). They're all good, but if your
$   echo "usage tends towards larger chunks use TWO_POT, otherwise use
$   echo "PACK_MALLOC."
d2171 2
a2172 2
$   dflt = "DEFAULT"
$   rp = "Memory allocator (DEFAULT, TWO_POT, PACK_MALLOC) [''dflt'] "
d2174 1
a2174 4
$   if ans.eqs."" then ans = "''dflt'"
$   if ans.eqs."TWO_POT" then use_two_pot_malloc = "Y"
$   if ans.eqs."PACK_MALLOC" then use_pack_malloc = "Y"
$ ENDIF
d2176 2
a2177 13
$! Ask for their default list of extensions to build
$ echo ""
$ echo "It's time to specify which modules you want to build into
$ echo "perl. Most of these are standard and should be chosen, though
$ echo "you might, for example, want to build GDBM_File instead of
$ echo "SDBM_File if you have the GDBM library built on your machine
$ echo "
$ echo "Which modules do you want to build into perl?"
$ dflt = "Fcntl Errno IO Opcode Dumper attrs re Stdio DCLsym B SDBM_File"
$ if Using_Dec_C.eqs."Yes"
$ THEN
$   dflt = dflt + " POSIX"
$   if Use_Threads.eqs."T"
d2179 1
a2179 1
$     dflt = dflt + " Thread"
d2181 16
a2197 4
$ rp = "[''dflt'] "
$ GOSUB myread
$ if ans.eqs."" then ans = "''dflt'"
$ extensions = "''ans'"
d2199 3528
a5726 11
$! %Config-I-VMS, determine build/make utility here (make gmake mmk mms)
$ echo ""
$ echo "%Config-I-VMS, Checking your ""make"" utilities..."
$! If the 'build' that you use is not here add it and it's test
$! switch to the _END_ of these strings (and increment max_build)
$! (e.g. builders = builders + "/FOOMAKE" 
$!       probers  = probers + " -fooVersionSwitch"
$! ) & please let me know about it.
$ builders = "IMAKE/GNUMAKE/MGMAKE/GMAKE/MAKE/MMS/MMK"
$ probers  = "-f Makefile. -v!-f Makefile. -v!-f Makefile. -v!-f Makefile. -v!-f Makefile. -v!/IDENT!/IDENT"
$ max_build = 7
d5728 22
a5749 18
$ orig_dflt = "MMK"
$ default_set = ""
$ ok_builders = ""
$ OPEN/WRITE/ERROR=Open_error CONFIG Makefile.
$ WRITE CONFIG "dont_make_anything_yet:"
$ WRITE CONFIG F$FAO("!_")
$ CLOSE CONFIG
$ n = 0
$ messages = F$ENVIRONMENT("MESSAGE")
$Build_probe:
$ build = F$ELEMENT(n,"/",builders)
$ probe  = F$ELEMENT(n,"!",probers)
$ echo "Testing whether you have ''build' on your system..."
$ SET NOON                                        !sorry :-(
$ ON CONTROL_Y THEN GOTO Reenable_messages_build  !sorry :-(
$ SET MESSAGE/NOFAC/NOSEV/NOIDENT/NOTEXT          !sorry :-(
$ 'build' 'probe'
$ IF ($SEVERITY .EQ. 1)
d5751 35
a5785 5
$   echo "OK."
$   IF (build .EQS. orig_dflt) 
$   THEN 
$     default_set = "TRUE"
$     dflt = build
d5787 870
a6656 4
$   ok_builders = ok_builders + " " + build
$   IF (.NOT. default_set) THEN dflt = build
$ ELSE 
$   echo "Nope."
d6658 220
a6877 5
$Reenable_messages_build:                         !hope you made it here :-)
$ SET MESSAGE 'messages'                          !hope you made it here :-)
$ SET ON                                          !hope you made it here :-)
$ n = n + 1
$ IF (n .LT. max_build) THEN GOTO Build_probe
d6879 5
a6883 2
$ echo ""
$ IF (ok_builders .NES. "") 
d6885 4
a6888 9
$   echo "Here is the list of builders you can apparently use:"
$   echo "(",ok_builders," )"
$   rp = "Which """"make"""" utility do you wish to use [''dflt']? "
$   GOSUB myread
$   ans = F$EDIT(ans,"TRIM, COMPRESS")
$   ans = F$EXTRACT(0,F$LOCATE(" ",ans),ans) !throw out "-f Makefile." here
$   IF (ans .EQS. "") 
$   THEN build = dflt
$   ELSE build = ans
d6890 4
d6895 13
a6907 1
$   TYPE SYS$INPUT:
d6909 2
a6910 4
%Config-E-VMS, ERROR:
 Well this looks pretty serious. Perl5 cannot be compiled without a "make"
 utility of some sort and after checking my "builders" list I cannot find
 the symbol or command you use on your system to compile programs.
d6912 15
a6926 13
$   READ SYS$COMMAND/PROMPT="%Config-I-VMS, Which ""MMS"" do you use? " ans
$   ans = F$EDIT(ans,"TRIM, COMPRESS")
$   ans = F$EXTRACT(0,F$LOCATE(" ",ans),ans) !throw out "-f Makefile." here
$   IF (ans .EQS. "") 
$   THEN build = dflt
$     echo "I don't know where 'make' is, and my life depends on it."
$     echo "Go find a make program or fix your DCL$PATH setting!"
$     echo "ABORTING..."
$     SET DEFAULT 'vms_default_directory_name' !be kind rewind
$     STOP
$     EXIT 2 !$STATUS = "%X00000002" (error)
$   ELSE 
$     build = ans
d6930 51
a6980 15
$ DELETE/NOLOG Makefile.;
$ GOTO Beyond_open
$Open_error:
$ TYPE SYS$INPUT:

 There seems to be trouble. I just tried to create a file in
$ echo4 'F$ENVIRONMENT("DEFAULT")'
$ TYPE SYS$INPUT:
 but was unsuccessful. I am stopping now. Please check that directories'
 PROTECTION bits. I will leave you in the directory where you started
 Configure.com
$ echo4 "ABORTING..."
$ GOTO Clean_up
$ STOP
$ EXIT
d6982 2
a6983 3
$Beyond_open:
$! echo " Very well I will proceed with ""''build'"""
$ make = F$EDIT(build,"UPCASE")
d6985 9
a6993 3
$!: locate the preferred pager for this system
$!pagers = "most|more|less|type/page"
$!rp='What pager is used on your system?'
d6995 44
a7038 10
$! update [.vms]config.vms here
$!
$! update makefile here
$! echo4 "Updating makefile..."
$!
$ IF (make .EQS. "MMS").OR.(make .EQS. "MMK")
$ THEN 
$   makefile    = "" 		 !wrt MANIFEST dir
$   UUmakefile  = "DESCRIP.MMS"  !wrt CWD dir
$   DEFmakefile = "DESCRIP.MMS"  !wrt DEF dir (?)
d7040 1
a7040 3
$   makefile    = " -f [.VMS]Makefile." !wrt MANIFEST dir
$   UUmakefile  = "[-.VMS]Makefile."    !wrt CWD dir
$   DEFmakefile = "[-.VMS]Makefile."    !wrt DEF dir (?)
d7042 5
a7046 6
$!
$ IF macros.NES."" 
$ THEN 
$   tmp = F$LENGTH(macros)
$   macros = F$EXTRACT(0,(tmp-1),macros) !miss trailing comma
$   macros = "/macro=(" + macros  + ")"
d7048 1
d7050 118
a7167 2
$! Invoke the subconfig piece
$!
d7169 18
a7186 5
$ echo4 "Checking the C Run time library"
$ dflt = F$ENVIRONMENT("DEFAULT")
$ SET DEFAULT [-.vms]
$ @@subconfigure
$ SET DEFAULT 'dflt
d7190 25
d7216 14
a7229 3
$ echo4 "%Config-I-VMS, The perl_setup.com file is now being written..."
$ file_2_find = "[-.vms]perl_setup.com"
$ OPEN/WRITE CONFIG 'file_2_find'
d7239 46
a7284 5
$ IF F$LOCATE(".]",prefix) .EQ. F$LENGTH(prefix) THEN -
    prefix = prefix - "]" + ".]" 
$ WRITE CONFIG "$ define/translation=concealed Perl_Root ''prefix'"
$ WRITE CONFIG "$ perl :== $Perl_Root:[000000]Perl"
$ WRITE CONFIG "$ define PerlShr Perl_Root:[000000]PerlShr.Exe"
d7292 1
a7292 1
$ WRITE CONFIG "$! Symbols for commonly used scripts:"
d7294 32
a7325 1
$ WRITE CONFIG "$ Perldoc == ""'"+"'Perl' Perl_Root:[lib.pod]Perldoc.com -t"""
d7329 5
a7333 5
$ echo  "%Config-I-VMS, The file can be found at:"
$ echo4 "-Config-I-VMS, ''F$SEARCH(file_2_find)'"
$ echo  "-Config-I-VMS, Add that file (or an @@ call to it) to your [SY]LOGIN.COM"
$ echo  "-Config-I-VMS, when you are satisfied with a successful compilation,"
$ echo  "-Config-I-VMS, testing, and installation of your perl."
d7335 14
d7382 9
d7392 1
d7395 1
a7396 1
$!   DEASSIGN SYS$ERROR
d7398 2
a7399 2
$ IF F$GETJPI("","FILCNT").NE.vms_filcnt THEN CLOSE CONFIG
$ IF F$GETJPI("","FILCNT").NE.vms_filcnt 
d7405 5
a7415 1
$ STOP
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d7 1
a7 1
$! $ SET DEFAULT [USER.PERL5_xxx]
d12 1
a12 1
$! $ SET DEFAULT [USER.PERL5_xxx]
d17 1
a17 1
$! Beyond that send email to vmsperl@@perl.org
d22 1
a22 1
$!  Dan Sugalski <dan@@sidhe.org>
d27 2
a28 2
$! (a Bourne sh[ell] script for configuring the installation of perl 
$! on non-VMS systems) in the perl5.002|3 epoch (spring/summer 1996)
d33 2
a34 1
$ sav_ver = F$VERIFY(0)
d42 1
a42 7
$ extra_flags = ""
$ user_c_flags = ""
$ use_ieee_math = "n"
$ be_case_sensitive = "n"
$ use_vmsdebug_perl = "n"
$ use64bitall = "n"
$ use64bitint = "n"
d48 1
a48 3
$ d_secintgenv = "N"
$ cc_flags = ""
$ use_multiplicity = "N"
d50 2
a51 2
$ max_allowed_dir_depth = 3  ! e.g. [A.B.PERL5_xxx] not [A.B.C.PERL5_xxx]
$! max_allowed_dir_depth = 2  ! e.g. [A.PERL5_xxx] not [A.B.PERL5_xxx]
a112 1
$ maniskip = "false"
d121 1
a124 2
$ use_5005_threads = "N"
$ use_ithreads = "N"
a126 1
$ config_args = ""
d132 1
a132 5
$   IF (P'i'.NES."") 
$   THEN
$     bang = bang + 1
$     config_args = config_args + F$FAO(" !AS",P'i')
$   ENDIF
d165 2
a166 2
$       test_config_sh = F$FILE_ATTRIBUTES(config_sh,"PRO")
$       IF (F$LOCATE("R",test_config_sh).NE.F$LENGTH(test_config_sh)) 
a186 7
$   IF (F$EXTRACT(0,1,P'i') .EQS. "m")
$   THEN
$     maniskip = "true"
$     gotopt = "t"
$     P'i' = P'i' - "m"
$     gotshortopt = "t"
$   ENDIF
a285 1
$ config_args = F$EDIT(config_args,"TRIM")
d290 2
a291 2
$   echo "Usage: @@''me' [-dehmrEKOSV] [-fconfig.sh] [-Dsymbol] [-Dsymbol=value]"
$   echo "                [-Usymbol]  [-Usymbol=]"
a296 1
 "-m" : skip the MANIFEST check to see that all files are present
d322 1
a322 9
$ IF F$Mode() .eqs. "BATCH"
$ THEN
$   STDOUT = F$GetQuI("DISPLAY_JOB","LOG_SPECIFICATION",,"THIS_JOB")
$   WRITE SYS$OUTPUT "Warning: Executing in batch mode.  To avoid file locking conflicts,"
$   WRITE SYS$OUTPUT "output intended for SYS$OUTPUT will be sent to a new version"
$   WRITE SYS$OUTPUT STDOUT
$ ELSE
$   STDOUT = F$TRNLNM("SYS$OUTPUT")
$ ENDIF
d326 1
a326 1
$ open/write/share=read STDOUT 'STDOUT'
a343 1
$ packageup = F$EDIT((package - "5"),"UPCASE")
d385 1
a385 1
$ IF (tmp .GES. "7.2") .AND. (F$GETSYI("HW_MODEL") .GE. 1024) THEN GOTO Beyond_depth_check
d420 1
a420 1
$     IF (maniskip)
a421 3
$       echo "Skipping MANIFEST check as requested"
$     ELSE
$!
a468 13
$       IF (found .EQS. "" .AND. dots .GT. 2)
$       THEN
$! 17-DEC-1999 Improved to turn "[.foo.bar]baz.c_buz" into
$! "[.foo.bar]baz_c.buz" to cover unzipped archives and put
$! "[.foo.bar]baz.c_buz,baz_c.buz" into missing list if neither is found.
$         basename[f$locate(".",basename),1] := _
$         dot_ele = F$ELEMENT(dots - 1,"_",basename)
$         basename = -
            f$extract(0,f$length(basename)-(f$length(dot_ele)+1),basename) -
              + "." + dot_ele
$         found = F$SEARCH(dirname + basename)
$         file_2_find = file_2_find + "," + basename
$       ENDIF
d498 1
a498 1
and contact the author (dan@@sidhe.org)
d564 1
a564 1
$   SET MESSAGE/NOFAC/NOSEV/NOIDENT/NOTEXT
d574 1
a574 1
$   SET MESSAGE 'messages'
d592 1
a592 1
In a hurry? You may run '@@Configure "-d"'.  This will bypass nearly all
d594 1
a594 1
there was already a config.sh file). Type '@@Configure "-h"' for a list of 
d603 1
a603 1
you have with Configure.com, let me (dan@@sidhe.org) know how I blew
d690 1
a690 1
 This procedure is intended to Configure the building of Perl for VMS.
d726 1
a726 1
$ osvers = F$EDIT(F$GETSYI("VERSION"),"TRIM")
d814 1
a814 1
$ echo "you are.  As an example Eastern (US) Standard Time is -5:00 offset, but"
a857 3
$   otherarch = "an Alpha"
$   alignbytes="8"
$   arch_type = "ARCH-TYPE=__VAX__"
a859 3
$   otherarch = "a VAX"
$   alignbytes="8"
$   arch_type = "ARCH-TYPE=__AXP__"
d871 1
a871 8
$ dflt = "n"
$ rp = "Will you be sharing your PERL_ROOT with ''otherarch'? [''dflt'] "
$ GOSUB myread
$ if ans.NES.""
$ THEN
$   ans = F$EXTRACT(0,1,F$EDIT(ans,"COLLAPSE, UPCASE"))
$ ENDIF
$ IF (ans.NES."Y")
d873 8
a880 4
$   sharedperl = "N"
$ ELSE
$   sharedperl = "Y"
$   IF (archname.EQS."VMS_AXP")
d882 3
d887 2
a896 30
$ prefix = F$ENVIRONMENT("DEFAULT") - ".UU]" + "]"
$ prefix = F$PARSE(prefix,,,,"NO_CONCEAL") - "][" - ".;"
$ prefixbase = prefix - "]"
$ prefix = prefixbase + ".]"
$!: determine root of directory hierarchy where package will be installed.
$ dflt = prefix
$ IF .NOT.silent 
$ THEN 
$   echo ""
$   echo "By default, ''package' will be installed in ''dflt', pod"
$   echo "pages under ''prefixbase'LIB.POD], etc..., i.e. with ''dflt' as prefix for"
$   echo "all installation directories."
$   echo "On ''osname' the ''prefix' is used to DEFINE the ''packageup'_ROOT prior to installation"
$   echo "as well as during subsequent use of ''package' via ''packageup'_SETUP.COM."
$ ENDIF
$ rp = "Installation prefix to use (for ''packageup'_ROOT)? [ ''dflt' ] "
$ GOSUB myread
$ IF ans.NES.""
$ THEN 
$   prefix = ans
$   IF F$LOCATE(".]",ans) .EQ. F$LENGTH(ans) THEN prefix = prefix - "]" + ".]"
$ ELSE 
$   prefix = dflt
$ ENDIF
$!
$! Check here for pre-existing PERL_ROOT.
$!  -> ask if removal desired.
$! Check here for writability of requested PERL_ROOT if it is not the default (cwd).
$!  -> recommend letting PERL_ROOT be PERL_SRC if requested PERL_ROOT is not writable.
$!
d900 1
a900 1
$ rp = "%Config-I-VMS, Skip the remaining """"where install"""" questions? [''dflt'] "
d903 3
d908 27
d956 1
a956 34
$ ENDIF !%Config-I-VMS, skip remaining "where install" questions
$!
$ perl_symbol = "true"
$ perl_verb = ""
$ dflt = "y"
$ IF .NOT.silent 
$ THEN 
$   echo ""
$   echo "%Config-I-VMS, You may choose to write ''packageup'_SETUP.COM to assign a foreign"
$   echo "-Config-I-VMS, symbol to invoke ''package', which is the usual method."
$   echO "-Config-I-VMS, If you do not do so then you would need a DCL command verb at the"
$   echo "-Config-I-VMS, process or the system wide level."
$ ENDIF
$ rp = "Invoke perl as a global symbol foreign command [''dflt'] "
$ GOSUB myread
$ IF (.NOT.ans).AND.(ans.NES."") THEN perl_symbol = "false"
$!
$ IF (.NOT.perl_symbol)
$ THEN
$   dflt = "y"
$   IF .NOT.silent 
$   THEN 
$     echo ""
$     echo "%Config-I-VMS, Since you won't be using a symbol you must choose to put the ''packageup'"
$     echo "-Config-I-VMS, verb in a per-process table or in the system wide DCLTABLES (which"
$     echo "-Config-I-VMS, would require write privilege)."
$   ENDIF
$   rp = "Invoke perl as a per process command verb [ ''dflt' ] "
$   GOSUB myread
$   IF (.NOT.ans).AND.(ans.NES."")
$   THEN perl_verb = "DCLTABLES"
$   ELSE perl_verb = "PROCESS"
$   ENDIF
$ ENDIF ! (.NOT.perl_symbol)
a959 1
$ revision = baserev - ".0"
a967 3
$   got_api_revision   = "false"
$   got_api_version    = "false"
$   got_api_subversion = "false"
d971 1
a971 1
$   IF ((F$LOCATE("#define PERL_VERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_patch))
d974 1
a974 1
$     patchlevel = F$ELEMENT(2," ",line)
d977 1
a977 1
$   IF ((F$LOCATE("#define PERL_SUBVERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_sub))
d980 1
a980 1
$     subversion = F$ELEMENT(2," ",line)
a982 18
$   IF ((F$LOCATE("#define PERL_API_REVISION",line).NE.F$LENGTH(line)).AND.(.NOT.got_api_revision))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     api_revision = F$ELEMENT(2," ",line)
$     got_api_revision = "true"
$   ENDIF
$   IF ((F$LOCATE("#define PERL_API_VERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_api_version))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     api_version = F$ELEMENT(2," ",line)
$     got_api_version = "true"
$   ENDIF
$   IF ((F$LOCATE("#define PERL_API_SUBVERSION",line).NE.F$LENGTH(line)).AND.(.NOT.got_api_subversion))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     api_subversion = F$ELEMENT(2," ",line)
$     got_api_subversion = "true"
$   ENDIF
d990 9
a998 1
$ IF (F$STRING(subversion) .NES. "0")
d1000 5
a1004 3
$   echo "(You have ''package' revision ''revision' patchlevel ''patchlevel' subversion ''subversion'.)"
$ ELSE
$   echo "(You have ''package' revision ''revision' patchlevel ''patchlevel'.)"
d1007 1
a1007 1
$ version = revision + "_" + patchlevel + "_" + subversion
d1108 1
a1108 1
$! cc_list = "cc/decc|gcc" !%Config-I-VMS, compiler symbols/commands
d1127 2
a1128 2
$! DEFINE SYS$ERROR _NLA0:
$! DEFINE SYS$OUTPUT _NLA0:
d1131 2
a1132 2
$! DEASSIGN SYS$OUTPUT
$! DEASSIGN SYS$ERROR
d1150 2
d1174 1
a1174 1
$   IF (F$LOCATE("DEC",line).NE.F$LENGTH(line)).or.(F$LOCATE("Compaq",line).NE.F$LENGTH(line))
d1178 18
d1244 1
a1244 1
$   IF (F$LOCATE("dec",ans).NE.F$LENGTH(ans)).or.(F$LOCATE("compaq",ans).NE.F$LENGTH(ans))
d1250 6
d1258 1
a1258 1
$     IF (F$LOCATE("dec",dflt).NE.F$LENGTH(dflt)).or(F$LOCATE("compaq",dflt).NE.F$LENGTH(dflt))
d1263 4
d1282 5
d1342 30
a1371 2
$   Dec_C_Version = Dec_C_Version + 0
$   if Dec_C_Version.ge.60200000 THEN CC_FLAGS = CC_FLAGS + "/NOANSI_ALIAS"
d1564 1
a1564 1
$   IF ans .nes. "" THEN mydomain = ans
d1585 1
a1585 1
$ dflt = "''cf_by'@@''myhostname'"+"''mydomain'"
d1588 1
a1588 1
$ IF ans .nes. ""
d1605 1
a1605 1
$ IF ans .nes. ""
a1671 102
$! Ask if they want to build with VMS_DEBUG perl
$ echo ""
$ echo "Perl can be built to run under the VMS debugger."
$ echo "You should only select this option if you are debugging"
$ echo "perl itself.  This can be a useful feature if you are "
$ echo "embedding perl in a program."
$ dflt = "n"
$ rp = "Build a VMS-DEBUG version of Perl? [''dflt'] "
$ GOSUB myread
$ IF ans.eqs."" then ans = dflt
$ IF F$EXTRACT(0, 1, F$EDIT(ans,"COLLAPSE,UPCASE")) .eqs. "Y"
$ THEN
$   use_vmsdebug_perl = "Y"
$   macros = macros + """__DEBUG__=1"","
$ ELSE
$   use_vmsdebug_perl = "N"
$ ENDIF
$!
$! Ask if they want to build with DEBUGGING
$ echo ""
$ echo "Perl can be built with extra runtime debugging enabled. This
$ echo "enables the -D switch, at the cost of some performance. It
$ echo "was mandatory on perl 5.005 and before on VMS, but is now
$ echo "optional. If you don't generally use it you should probably
$ echo "leave this off and gain a bit of extra speed.
$ dflt = "y"
$ rp = "Build a DEBUGGING version of Perl? [''dflt'] "
$ GOSUB myread
$ IF ans.eqs."" then ans = dflt
$ IF F$EXTRACT(0, 1, F$EDIT(ans,"COLLAPSE,UPCASE")) .eqs. "Y"
$ THEN
$   use_debugging_perl = "Y"
$ ELSE
$   use_debugging_perl = "N"
$ ENDIF
$!
$! Ask if they want to build with MULTIPLICITY
$ echo ""
$ echo "The perl interpreter engine can be built in a way that makes it
$ echo "possible for a program that embeds perl into it (and yes, you can
$ echo "do that--it's pretty keen) to have multiple perl interpreters active
$ echo "at once. There is some performance overhead, however, so you
$ echo "probably don't want to choose this unless you're going to be doing
$ echo "funky perl embedding."
$ dflt = "n"
$ rp = "Build with MULTIPLICITY? [''dflt'] "
$ GOSUB myread
$ if ans.eqs."" then ans = dflt
$ IF F$EXTRACT(0, 1, F$EDIT(ans,"COLLAPSE,UPCASE")) .eqs. "Y"
$ THEN
$   use_multiplicity="Y"
$ ELSE
$   use_multiplicity="N"
$ ENDIF
$!
$! Ask if they want to build with 64-bit support
$ IF (Archname.eqs."VMS_AXP").and.("''f$extract(1,3, f$getsyi(""version""))'".ges."7.1")
$ THEN
$   dflt = use64bitint
$   echo ""
$   echo "You can have native 64-bit long integers.
$   echo ""
$   echo "Perl can be built to take advantage of 64-bit integer types
$   echo "on some systems, which provide a much larger range for perl's 
$   echo "mathematical operations.  (Note that does *not* enable 64-bit 
$   echo "fileops at the moment, as Dec C doesn't do that yet)."
$   echo "Choosing this option will most probably introduce binary incompatibilities.
$   echo ""
$   echo "If this doesn't make any sense to you, just accept the default ''dflt'.
$   rp = "Try to use 64-bit integers, if available? [''dflt'] "
$   GOSUB myread
$   IF ans .EQS. "" THEN ans = dflt
$   IF (f$extract(0, 1, f$edit(ans,"COLLAPSE,UPCASE")) .EQS. "Y")
$   THEN
$     use64bitint="Y"
$   ELSE
$     use64bitint="N"
$   ENDIF
$   IF (use64bitint)
$   THEN
$     dflt = use64bitall
$     echo ""
$     echo "Since you chose 64-bitness you may want to try maximal 64-bitness.
$     echo "What you have chosen is minimal 64-bitness which means just enough
$     echo "to get 64-bit integers.  The maximal means using as much 64-bitness
$     echo "as is possible on the platform.  This in turn means even more binary
$     echo "incompatibilities.  On the other hand, your platform may not have
$     echo "any more maximal 64-bitness than what you already have chosen.
$     echo ""
$     echo "If this doesn't make any sense to you, just accept the default ''dflt'.
$     rp = "Try to use full 64-bit support, if available? [''dflt'] "
$     GOSUB myread
$     IF ans .EQS. "" THEN ans = dflt
$     IF (f$extract(0, 1, f$edit(ans,"COLLAPSE,UPCASE")) .EQS. "Y")
$     THEN
$       use64bitall="Y"
$     ELSE
$       use64bitall="N"
$     ENDIF
$   ENDIF
$ ENDIF ! AXP && >= 7.1
$!
a1674 1
$   echo ""
d1678 1
a1685 26
$!
$     ! Shall we do the 5.005-stype threads, or IThreads?
$     echo "As of 5.5.640, Perl has two different internal threading
$     echo "implementations, the 5.005 version (5005threads) and an
$     echo "interpreter-based version (ithreads) that has one
$     echo "interpreter per thread.  Both are very experimental.  This
$     echo "arrangement exists to help developers work out which one
$     echo "is better.
$     echo "
$     echo "If you're a casual user, you probably don't want
$     echo "interpreter-threads at this time.  There doesn't yet exist
$     echo "a way to create threads from within Perl in this model,
$     echo "i.e., ""use Thread;"" will NOT work.
$     echo "
$     dflt = "n"
$     rp = "Build with Interpreter threads? [''dflt']
$     GOSUB myread
$     if ans.eqs."" then ans = dflt
$     if (f$extract(0, 1, "''ans'").eqs."Y").or.(f$extract(0, 1, "''ans'").eqs."y")
$     THEN
$       use_ithreads="Y"
$       use_5005_threads="N"
$     ELSE
$       use_ithreads="N"
$       use_5005_threads="Y"
$     ENDIF
d1698 1
a1709 2
$ if archname .eqs. "VMS_AXP"
$ then
d1711 1
a1711 1
$! Case sensitive?
d1713 12
a1724 7
$ echo "By default, perl (and pretty much everything else on VMS) uses
$ echo "case-insensitive linker symbols. Which is to say, when the
$ echo "underlying C code makes a call to a routine called Perl_foo in
$ echo "the source, the name in the object modules or shareable images
$ echo "is really PERL_FOO. There are some packages that use an
$ echo "embedded perl interpreter that instead require case-sensitive
$ echo "linker symbols.
d1726 2
a1727 47
$ echo "If you have no idea what this means, and don't have
$ echo "any program requiring anything, choose the default.
$ dflt = be_case_sensitive
$ rp = "Case-sensitive symbols [''dflt'] "
$ gosub myread
$ if ans.eqs."" then ans="''dflt'"
$ be_case_sensitive = "''ans'"
$!
$! IEEE math?
$ echo ""
$ echo "Perl normally uses G_FLOAT format floating point numbers
$ echo "internally, as do most things on VMS. You can, however, build
$ echo "with IEEE floating point numbers instead if you need to.
$ dflt = use_ieee_math
$ rp = "Use IEEE math [''dflt'] "
$ gosub myread
$ if ans.eqs."" then ans="''dflt'"
$ use_ieee_math = "''ans'"
$ endif
$! CC Flags
$ echo ""
$ echo "You can, if you need to, pass extra flags on to the C
$ echo "compiler. In general you should only do this if you really,
$ echo "really know what you're doing.
$ dflt = user_c_flags
$ rp = "Extra C flags [''dflt'] "
$ gosub myread
$ if ans.eqs."" then ans="''dflt'"
$ user_c_flags = "''ans'"
$!
$! Ask whether they want to use secure logical translation when tainting
$ echo ""
$ echo "As Perl starts up, it checks several logical names, such as"
$ echo "PERL5LIB and PERL_ENV_TABLES, which allow you to modify aspects"
$ echo "of its behavior.  For additional security, you may limit this"
$ echo "process to executive- and kernel-mode translation when tainting"
$ echo "is enabled.  In this case, logical names normally skipped when"
$ echo "tainting is enabled (e.g. PERL5OPTS) are translated as well."
$ echo "If you do not choose to do this, the usual order of access modes"
$ echo "is used for logical name translation."
$ echo ""
$ echo "This restriction does not apply to the %ENV hash or to implicit"
$ echo "logical name translation during parsing of file specifications;"
$ echo "these always use the normal sequence of access modes for logical"
$ echo "name translation."
$ dflt = "y"
$ rp = "Use secure logical name translation? [''dflt'] "
d1730 1
a1730 19
$ d_secintgenv = f$extract(0, 1, f$edit(ans,"TRIM,COMPRESS,UPCASE"))
$!
$! Ask whether they want to default filetypes
$ echo ""
$ echo "When you pass the name of a program to Perl on the command line,"
$ echo "it generally doesn't supply any defaults unless the -S command"
$ echo "line switch is specified.  In keeping with the VMS tradition of"
$ echo "default file types, however, you can configure Perl to try default"
$ echo "file types of nothing, .pl, and .com, in that order (e.g. typing"
$ echo """$ perl foo"" would cause Perl to look for foo., then foo.pl, and"
$ echo "finally foo.com)."
$ echo ""
$ echo "This is currently broken in some configurations. Only enable it if
$ echo "you know what you're doing. "
$ dflt = "N"
$ rp = "Always use default file types? [''dflt'] "
$ GOSUB myread
$ if ans.eqs."" then ans="''dflt'"
$ d_alwdeftype = f$extract(0, 1, f$edit(ans,"COLLAPSE,UPCASE"))
d1738 1
d1743 1
a1743 1
$ mymalloc = f$extract(0, 1, f$edit(ans,"COLLAPSE,UPCASE"))
d1752 1
d1757 1
a1757 1
$     use_debugmalloc = f$extract(0, 1, f$edit(ans, "COLLAPSE,UPCASE"))
d1768 1
d1782 1
a1782 3
$ echo "SDBM_File if you have the GDBM library built on your machine.
$ echo "Whatever you do, make sure the re module is first or things will
$ echo "break badly"
d1785 1
a1785 2
$! dflt = "Fcntl Errno File::Glob IO Opcode Byteloader Devel::Peek Devel::DProf Data::Dumper attrs re VMS::Stdio VMS::DCLsym B SDBM_File"
$ dflt = "re Fcntl Errno File::Glob IO Opcode Devel::Peek Devel::DProf Data::Dumper attrs VMS::Stdio VMS::DCLsym B SDBM_File Thread Sys::Hostname"
d1789 4
a1796 34
$ a = ""
$ j = 0
$ xloop1:
$   x = f$elem(j," ",ans)
$   j = j + 1
$   if x .eqs. " " then goto exloop1
$   xloop2:
$       k = f$locate("::",x)
$       if k .ge. f$len(x) then goto exloop2
$       x = f$extract(0,k,x) + "/" + f$extract(k+2,f$len(x)-2,x)
$   goto xloop2
$   exloop2:
$   a = a + " " + x
$ goto xloop1
$ exloop1:
$ ans = f$edit(a,"trim")
$!
$ a = ""
$ j = 0
$ xloop3:
$   x = f$elem(j," ",dflt)
$   j = j + 1
$   if x .eqs. " " then goto exloop3
$   xloop4:
$       k = f$locate("::",x)
$       if k .ge. f$len(x) then goto exloop4
$       x = f$extract(0,k,x) + "/" + f$extract(k+2,f$len(x)-2,x)
$   goto xloop4
$   exloop4:
$   a = a + " " + x
$ goto xloop3
$ exloop3:
$ dflt = f$edit(a,"trim")
$!
a1797 1
$ perl_known_extensions = "''dflt'"
d1824 3
a1826 3
$ SET NOON
$ ON CONTROL_Y THEN GOTO Reenable_messages_build
$ SET MESSAGE/NOFAC/NOSEV/NOIDENT/NOTEXT
d1841 3
a1843 3
$Reenable_messages_build:
$ SET MESSAGE 'messages'
$ SET ON
d1915 3
a1917 3
$   makefile    = "" 		   !wrt MANIFEST dir
$   UUmakefile  = "[-]DESCRIP.MMS" !wrt CWD dir
$   DEFmakefile = "DESCRIP.MMS"    !wrt DEF dir (?)
d1919 3
a1921 3
$   makefile    = " -f Makefile."  !wrt MANIFEST dir
$   UUmakefile  = "[-]Makefile."   !wrt CWD dir
$   DEFmakefile = "Makefile."      !wrt DEF dir (?)
a1929 11
$! Build up the extra C flags
$!
$ if use_ieee_math
$ then
$   extra_flags = "''extra_flags'" + "/float=ieee/ieee=denorm_results"
$ endif
$ if be_case_sensitive
$ then
$   extra_flags = "''extra_flags'" + "/Names=As_Is"
$ endif
$ extra_flags = "''extra_flags'" + "''user_c_flags'"
d1934 1
a1934 1
$ echo4 "Checking the C run-time library"
a1939 52
$!  Warn of dangerous symbols or logical names
$!
$Bad_environment: SUBROUTINE
$   Bad_env = ""
$   IF p2 .eqs. "SYMBOL"
$   THEN
$     IF f$type('p1) .nes. "" THEN  Bad_env := SYMBOL
$   ELSE
$     IF f$trnlnm(p1) .nes. "" THEN Bad_env := LOGICAL
$   ENDIF
$   IF Bad_env .eqs. "SYMBOL" .or. Bad_env .eqs. "LOGICAL"
$   THEN
$     IF f$search("config.msg") .nes. ""
$     THEN
$       OPEN/APPEND CONFIG config.msg
$     ELSE
$       OPEN/WRITE CONFIG config.msg
$     ENDIF
$     IF Bad_env .eqs. "SYMBOL"
$     THEN
$       WRITE CONFIG ""
$       WRITE CONFIG "Symbol name ''p1' found in environment as " + &p1
$       WRITE CONFIG " delete before building ''package' via:"
$       WRITE CONFIG "     $ DELETE/SYMBOL/GLOBAL ''p1'"
$       IF f$locate("""",&p1) .ge. f$length(&p1)
$       THEN
$       WRITE CONFIG " after building, testing, and installing ''package'
$       WRITE CONFIG " restore the symbol with:"
$       WRITE CONFIG "     $ ''p1' == """ + &p1 + """"
$       ENDIF
$     ENDIF
$     IF Bad_env .eqs. "LOGICAL"
$     THEN
$       WRITE CONFIG ""
$       WRITE CONFIG "Logical name ''p1' found in environment as " + f$trnlnm(p1)
$       WRITE CONFIG " deassign before building ''package'"
$     ENDIF
$     CLOSE CONFIG
$     Bad_env = ""
$   ENDIF
$ EXIT
$ ENDSUBROUTINE ! Bad_environment
$ echo ""
$ echo4 "%Config-I-VMS, Checking for dangerous pre-existing global symbols and logical names."
$ CALL Bad_environment "TMP"
$ CALL Bad_environment "LIB"
$ CALL Bad_environment "T"
$ CALL Bad_environment "FOO"
$ CALL Bad_environment "EXT"
$ CALL Bad_environment "TEST" "SYMBOL"
$ IF f$search("config.msg") .eqs. "" THEN echo "OK."
$!
a1941 24
$ IF (.NOT.perl_symbol)
$ THEN
$   file_2_find = "[-]''packageup'.cld"
$   echo ""
$   echo4 "%Config-I-VMS, The perl.cld file is now being written..."
$   OPEN/WRITE CONFIG 'file_2_find'
$   ext = ".exe"
$   IF ((sharedperl) .AND. (f$getsyi("ARCH_NAME") .NES. "VAX")) THEN ext := .AXE
$   IF (use_vmsdebug_perl)
$   THEN
$     WRITE CONFIG "define verb dbgperl"
$     WRITE CONFIG F$FAO("!_!AS","image ''packageup'_root:[000000]dbgperl''ext'")
$     WRITE CONFIG F$FAO("!_!AS","cliflags (foreign)")
$     WRITE CONFIG ""
$     WRITE CONFIG "define verb perl"
$     WRITE CONFIG F$FAO("!_!AS","image ''packageup'_root:[000000]ndbgPerl''ext'")
$     WRITE CONFIG F$FAO("!_!AS","cliflags (foreign)")
$   ELSE
$     WRITE CONFIG "define verb perl"
$     WRITE CONFIG F$FAO("!_!AS","image ''packageup'_root:[000000]perl''ext'")
$     WRITE CONFIG F$FAO("!_!AS","cliflags (foreign)")
$   ENDIF
$   CLOSE CONFIG
$ ENDIF ! (.NOT.perl_symbol)
d1944 1
a1944 1
$ file_2_find = "[-]perl_setup.com"
a1954 1
$ prefix = prefix - "000000."
d1958 2
a1959 32
$ WRITE CONFIG "$ ext = "".exe"""
$ IF sharedperl .EQS. "Y"
$ THEN
$   write config "$ if f$getsyi(""ARCH_NAME"") .nes. ""VAX"" then ext = "".AXE"""
$ ENDIF
$ IF (perl_symbol)
$ THEN
$   IF (use_vmsdebug_perl)
$   THEN
$     WRITE CONFIG "$ dbgperl :== $Perl_Root:[000000]dbgPerl'ext'"
$     WRITE CONFIG "$ perl    :== $Perl_Root:[000000]ndbgPerl'ext'"
$     WRITE CONFIG "$ define dbgPerlShr Perl_Root:[000000]dbgPerlShr'ext'"
$   ELSE
$     WRITE CONFIG "$ perl :== $Perl_Root:[000000]Perl'ext'"
$     WRITE CONFIG "$ define PerlShr Perl_Root:[000000]PerlShr'ext'"
$   ENDIF
$ ELSE ! .NOT.perl_symbol
$   IF (use_vmsdebug_perl)
$   THEN
$     WRITE CONFIG "$ define dbgPerlShr Perl_Root:[000000]dbgPerlShr'ext'"
$   ELSE
$     WRITE CONFIG "$ define PerlShr Perl_Root:[000000]PerlShr'ext'"
$   ENDIF
$   IF perl_verb .EQS. "PROCESS"
$   THEN
$     WRITE CONFIG "$ set command ''packagup'_ROOT:[000000]''packageup'.CLD"
$   ENDIF
$ ENDIF !  perl_symbol
$ WRITE CONFIG "$ define/nolog pod2text Perl_Root:[lib.pod]pod2text.com"
$ WRITE CONFIG "$ define/nolog pod2html Perl_Root:[lib.pod]pod2html.com"
$ WRITE CONFIG "$ define/nolog pod2man  Perl_Root:[lib.pod]pod2man.com"
$!
d1969 1
a1969 34
$ IF (perl_symbol)
$ THEN
$   WRITE CONFIG "$ Perldoc  == ""'"+"'Perl' Perl_Root:[lib.pod]Perldoc.com -t"""
$   WRITE CONFIG "$ pod2text == ""'"+"'Perl' pod2text"""
$   WRITE CONFIG "$ pod2html == ""'"+"'Perl' pod2html"""
$   WRITE CONFIG "$ pod2latex == ""'"+"'Perl' Perl_Root:[lib.pod]pod2latex.com"""
$   WRITE CONFIG "$!pod2man  == ""'"+"'Perl' pod2man"""
$   WRITE CONFIG "$!Perlbug  == ""'"+"'Perl' Perl_Root:[lib]Perlbug.com"""
$   WRITE CONFIG "$ c2ph     == ""'"+"'Perl' Perl_Root:[utils]c2ph.com"""
$   IF F$LOCATE("Devel::DProf",extensions) .LT. F$LENGTH(extensions)
$   THEN
$     WRITE CONFIG "$ dprofpp     == ""'"+"'Perl' Perl_Root:[utils]dprofpp.com"""
$   ENDIF 
$   WRITE CONFIG "$ h2ph     == ""'"+"'Perl' Perl_Root:[utils]h2ph.com"""
$   WRITE CONFIG "$ h2xs     == ""'"+"'Perl' Perl_Root:[utils]h2xs.com"""
$   WRITE CONFIG "$!perlcc   == ""'"+"'Perl' Perl_Root:[utils]perlcc.com"""
$   WRITE CONFIG "$ splain   == ""'"+"'Perl' Perl_Root:[utils]splain.com"""
$ ELSE
$   WRITE CONFIG "$ Perldoc  == ""Perl Perl_Root:[lib.pod]Perldoc.com -t"""
$   WRITE CONFIG "$ pod2text == ""Perl pod2text"""
$   WRITE CONFIG "$ pod2html == ""Perl pod2html"""
$   WRITE CONFIG "$ pod2latex == ""Perl Perl_Root:[lib.pod]pod2latex.com"""
$   WRITE CONFIG "$!pod2man  == ""Perl pod2man"""
$   WRITE CONFIG "$!Perlbug  == ""Perl Perl_Root:[lib]Perlbug.com"""
$   WRITE CONFIG "$ c2ph     == ""Perl Perl_Root:[utils]c2ph.com"""
$   IF F$LOCATE("Devel::DProf",extensions) .LT. F$LENGTH(extensions)
$   THEN
$     WRITE CONFIG "$ dprofpp     == ""Perl Perl_Root:[utils]dprofpp.com"""
$   ENDIF 
$   WRITE CONFIG "$ h2ph     == ""Perl Perl_Root:[utils]h2ph.com"""
$   WRITE CONFIG "$ h2xs     == ""Perl Perl_Root:[utils]h2xs.com"""
$   WRITE CONFIG "$!perlcc   == ""Perl Perl_Root:[utils]perlcc.com"""
$   WRITE CONFIG "$ splain   == ""Perl Perl_Root:[utils]splain.com"""
$ ENDIF
a1978 14
$ IF ((.NOT.perl_symbol) .AND. (perl_verb .EQS. "DCLTABLES"))
$ THEN
$   file_2_find = "[-]''packageup'_install.com"
$   OPEN/WRITE CONFIG 'file_2_find
$   WRITE CONFIG "$ set command perl /table=sys$common:[syslib]dcltables.exe -"
$   WRITE CONFIG "    /output=sys$common:[syslib]dcltables.exe"
$   WRITE CONFIG "$ install replace sys$common:[syslib]dcltables.exe"
$   CLOSE CONFIG
$   echo4 ""
$   echo4 "%Config-I-VMS, In order to install the ''packageup' verb into DCLTABLES run:"
$   echo4 "-Config-I-VMS, @@ ''F$SEARCH(file_2_find)'"
$   echo4 "-Config-I-VMS, after a successful build, test, and install.  Do so with CMKRNL privilege."
$   echo4 ""
$ ENDIF
a2010 9
$!
$ IF ( F$SEARCH("config.msg").NES."" ) 
$ THEN
$   echo "Hmm.  I also noted the following information while running:"
$   echo ""
$   type config.msg
$   SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) config.msg
$   DELETE/NOLOG/NOCONFIRM config.msg;
$ ENDIF
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d4 1
a4 1
$! For example, if you unpacked perl into: [USER.PERL-5n...] then you will 
d33 2
a37 1
$ delete := delete ! local symbol overrides globals with qualifiers
a38 1
$ ld = "Link"
d53 3
a55 2
$ ccflags = ""
$ static_ext = ""
d57 2
a58 11
$ max_allowed_dir_depth = 3  ! e.g. [A.B.PERLxxx] not [A.B.C.PERLxxx]
$! max_allowed_dir_depth = 2 ! e.g. [A.PERLxxx] not [A.B.PERLxxx]
$!
$! Sebastian Bazley's request: close the CONFIG handle with /NOLOG
$! qualifier "just in case" (configure.com is re @@ed in a bad state).
$! This construct was tested to be not a problem as far back as
$! VMS V5.5-2, hopefully earlier versions are OK as well.
$!
$ CLOSE/NOLOG CONFIG
$!
$! Now keep track of open files
d121 1
a121 1
$ IF F$TYPE(config_sh) .EQS. "" THEN config_sh=""
d128 2
a129 1
$ ccname="VAX"
a130 1
$ cxxversion = ""
d173 1
a173 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "f") ! "-f"
a181 1
$         config_dflt = "y"
d194 1
a194 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "h") ! "-h"
d201 1
a201 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "m")  ! "-m"
d208 1
a208 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "r")  ! "-r"
d215 1
a215 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "s") ! "-s"
d222 1
a222 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "E") ! "-E"
d227 1
a227 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "K") ! "-K"
d234 1
a234 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "O") ! "-O"
d241 1
a241 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "S") ! "-S"
d243 1
a243 1
$     extractsh = "true"  !VMS?  Yes with munchconfig
d248 1
a248 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "D") ! "-D"
d251 2
d255 1
a255 3
$       tmp = P'i' + "=""define"""
$       'tmp'
$       DELETE/SYMBOL tmp
d260 1
a260 1
$         echo "''me': use ""-Usymbol=val"" not ""-Dsymbol=""."
d263 3
a265 4
$          tmp = F$EXTRACT(0,F$LOCATE("=",P'i'),P'i')
$          tmp = tmp + "=""" + F$EXTRACT(F$LOCATE("=",P'i')+1,F$LENGTH(P'i'),P'i') + """"
$         'tmp'
$         DELETE/SYMBOL tmp
d268 1
d271 1
a271 1
$   IF (F$EXTRACT(0,1,P'i') .EQS. "U") ! "-U"
d276 1
a276 3
$       tmp = P'i' + "="""""
$       'tmp'
$       DELETE/SYMBOL tmp
d281 1
a281 1
$         echo "''me': use ""-Dsymbol=val"" not ""-Usymbol=val""."
d284 1
a284 3
$         tmp = P'i' + "=""undef"""
$         'tmp'
$         DELETE/SYMBOL tmp
d287 1
d295 1
a295 1
$     EXIT
d312 1
a312 1
$   echo "Usage: @@''me' [-dehmr""EKOSV""] [-fconfig.sh] [""-Dsymbol""] [""-Dsymbol=value""]"
d314 1
a314 2
$   TYPE SYS$INPUT:
$   DECK
a332 1
$   EOD
d347 1
a347 2
$   STDOUT = F$PARSE(F$GETQUI("DISPLAY_ENTRY", "JOB_NAME"), -
                    F$GETQUI("DISPLAY_ENTRY", "LOG_SPECIFICATION"), ".LOG")
d396 1
a396 1
$! Here I assume we are in the [foo.PERLxxx...] tree
a420 1
$     DECK
a424 1
$     EOD
a539 2
$     DECK

a547 1
$     EOD
d578 2
a579 6
$   If (.NOT. silent) Then echo ""
$   READ SYS$COMMAND/PROMPT="''rp'" ans
$   IF (ans .EQS. "&-d")
$   THEN
$     echo4 "(OK, I will run with -d after this question.)"
$     IF (.NOT. silent) THEN echo ""
d581 1
a581 5
$     fastread := yes
$   ENDIF
$   IF (ans .EQS. "&-s")
$   THEN
$     echo4 "(OK, I will run with -s after this question.)"
d584 1
a584 3
$     silent := true
$     GOSUB Shut_up
$   ENDIF
a604 52
$ IF F$TYPE(usedevel) .EQS. "" THEN usedevel := n
$ patchlevel_h = F$SEARCH("[-]patchlevel.h")
$ IF (patchlevel_h.NES."")
$ THEN
$   SEARCH 'patchlevel_h' "define","PERL_VERSION","epoch"/match=and/out=[]ver.out
$   IF .NOT. usedevel .AND. usedevel .NES. "define"
$   THEN
$     OPEN/READ CONFIG []ver.out
$     READ CONFIG line
$     CLOSE CONFIG
$     tmp = F$EDIT(line,"TRIM,COMPRESS")
$     xpatchlevel = F$INTEGER(F$ELEMENT(2," ",tmp))
$     line = xpatchlevel / 2
$     tmp = xpatchlevel - ( line * 2 )
$     IF tmp .NE. 0
$     THEN
$       echo4 "patchlevel is " + F$STRING(xpatchlevel)
$       cat4 SYS$INPUT:
$       DECK
*** WHOA THERE!!! ***

    This is an UNSTABLE DEVELOPMENT release.
    (The patchlevel, is odd--as opposed to even,
     and that signifies a development release.  If you want a
     maintenance release, you want an even-numbered release.)

    Do ***NOT*** install this into production use.
    Data corruption and crashes are possible.

    It is most seriously suggested that you do not continue any further
    unless you want to help in developing and debugging Perl.

$       EOD
$       dflt="n"
$       rp="Do you really want to continue? [''dflt'] "
$       IF (fastread) THEN fastread := FALSE
$       GOSUB myread
$       IF ans .EQS. "" THEN ans = dflt
$       IF ans
$       THEN
$         echo4 "Okay, continuing."
$       ELSE
$         echo4 "Okay, bye."
$         DELETE/NOLOG/NOCONFIRM []ver.out;
$         GOTO Clean_up
$       ENDIF
$     ENDIF
$     DELETE/SYMBOL line
$     DELETE/SYMBOL tmp
$   ENDIF
$   DELETE/NOLOG/NOCONFIRM []ver.out;
$ ENDIF
a628 1
$   DECK
a636 1
$   EOD
a638 1
$   DECK
a644 1
$   EOD
a646 1
$   DECK
a653 1
$   EOD
d678 1
a678 1
$!trylist="byacc/cpp/csh/date/egrep/less/line/more/nroff/perl/pg/sendmail/test/uname"
d702 1
a702 7
$! genconfig.pl has "osname='VMS'"
$ osname = F$EDIT(F$GETSYI("NODE_SWTYPE"),"COLLAPSE")
$ IF (configshfound.EQS."")
$ THEN
$   config_sh = "[-]config.sh" ! the fallback default
$   GOTO Beyond_config_sh
$ ENDIF
d704 2
a705 28
$ IF F$TYPE(osname) .EQS. "" THEN osname = F$EDIT(F$GETSYI("NODE_SWTYPE"),"COLLAPSE")
$ IF F$TYPE(config_dflt) .EQS. "" THEN config_dflt = "n"
$ rp = "Shall I @@ ''config_sh' for default answers? [''config_dflt'] "
$ GOSUB myread
$ IF ans .EQS. "" THEN ans = config_dflt
$ IF ans
$ THEN
$   echo ""
$   echo "Fetching default answers from ''config_sh'..."
$!
$! This @@ is why config_sh must employ DCL syntax.  Note that for
$! symbols to be returned to this procedure they must be global.
$! Which implies that assignments must be of the :== or == variety.
$! Note further that the [-]config.sh file written by this procedure
$! employs shell syntax.  In order to convert shell syntax to DCL
$! you might try:
$!
$! perl -ni -e "s/^#/!#/;s/='/==""/;s/'$/""/;print ""\$ $_"";" config.sh
$!
$! However, watch out for sig_nam, sig_nam_init, sig_num, startperl 
$! and any of the lower case double quoted variables such as the *format
$! variables in such a config."sh".
$!
$   @@'config_sh'
$!
$ ENDIF
$ DELETE/SYMBOL config_dflt
$!
a707 1
$!     DECK
a710 1
$!     EOD
d726 2
a733 1
$   DECK
a739 1
$   EOD
a752 1
$   DECK
a757 1
$   EOD
d771 1
d773 1
d796 1
d835 1
d845 1
a845 1
$   rp = "(''systz') Is this UTC Time Zone Offset correct? [''dflt'] "
d855 1
a901 2
$! Note that DCL in VMS V5.4 does not have F$GETSYI("ARCH_NAME")
$! but does have F$GETSYI("HW_MODEL").
d926 1
a926 3
$ vms_prefix = "perl_root"
$ vms_prefixup = F$EDIT(vms_prefix,"UPCASE")
$ rp = "Will you be sharing your ''vms_prefixup' with ''otherarch'? [''dflt'] "
d949 4
a952 8
$ IF F$TYPE(prefix) .EQS. ""
$ THEN
$   prefix = F$ENVIRONMENT("DEFAULT") - ".UU]" + "]"
$   prefix = F$PARSE(prefix,,,,"NO_CONCEAL") - "][" - ".;"
$   prefixbase = prefix - "]"
$   prefix = prefixbase + ".]"
$ ENDIF
$ src = prefix
d959 1
a959 1
$   echo "pages under ''prefixbase'.LIB.POD], etc..., i.e. with ''dflt' as prefix for"
d961 1
a961 1
$   echo "On ''osname' the prefix is used to DEFINE the ''vms_prefixup' prior to installation"
d964 1
a964 1
$ rp = "Installation prefix to use (for ''vms_prefixup')? [ ''dflt' ] "
a972 1
$ perl_root = prefix
d982 1
a982 1
$ rp = "Skip the remaining """"where install"""" questions? [''dflt'] "
d994 1
a994 3
$   THEN
$     TYPE SYS$INPUT:
$     DECK
a997 5
$     EOD
$   ENDIF
$   IF F$TYPE(privlib) .NES. ""
$   THEN dflt = privlib
$   ELSE dflt = "''vms_prefix':[lib]"
d999 1
d1016 4
a1019 4
$   echo "You may choose to write ''packageup'_SETUP.COM to assign a foreign"
$   echo "symbol to invoke ''package', which is the usual method."
$   echO "If you do not do so then you would need a DCL command verb at the"
$   echo "process or the system wide level."
d1021 1
a1021 1
$ rp = "Invoke perl as a global symbol foreign command? [''dflt'] "
d1031 3
a1033 3
$     echo "Since you won't be using a symbol you must choose to put the ''packageup'"
$     echo "verb in a per-process table or in the system wide DCLTABLES (which"
$     echo "would require write privilege)."
d1035 1
a1035 1
$   rp = "Invoke perl as a per process command verb? [ ''dflt' ] "
d1048 1
a1048 1
$ echo4 "Getting the current patchlevel..."
d1059 1
a1059 1
$   READ/END_Of_File=Close_patch/ERROR=Close_patch CONFIG line
d1090 1
a1090 6
$   IF (.NOT. got_patch) .OR. -
       (.NOT. got_sub) .OR. - 
       (.NOT. got_api_revision) .OR. -
       (.NOT. got_api_version) .OR. -
       (.NOT. got_api_subversion) -
      THEN GOTO Patchlevel_h_loop
d1093 3
a1095 6
$ ELSE
$   patchlevel="0"
$   subversion="0"
$   api_revision="0"
$   api_version="0"
$   api_subversion="0"
d1108 1
d1118 1
a1118 3
$   THEN
$     TYPE SYS$INPUT:
$     DECK
a1121 5
$     EOD
$   ENDIF
$   IF F$TYPE(archlib) .NES. ""
$   THEN dflt = archlib
$   ELSE dflt = privlib - "]" + "." + archname + "." + version + "]"
d1123 1
d1132 3
a1135 1
$!
a1136 1
$!
a1137 1
$ DECK
d1141 1
a1141 1
$ EOD
d1151 1
a1151 3
$   THEN
$     TYPE SYS$INPUT:
$     DECK
a1156 5
$     EOD
$   ENDIF
$   IF F$TYPE(sitelib) .NES. ""
$   THEN dflt = sitelib
$   ELSE dflt = privlib - "]" + ".SITE_PERL]"
d1158 1
a1169 1
$     DECK
a1172 5
$     EOD
$   ENDIF
$   IF F$TYPE(sitearch) .NES. ""
$   THEN dflt = sitearch
$   ELSE dflt = sitelib - "]" + "." + archname + "]"
d1174 1
d1186 1
a1186 5
$   IF F$TYPE(bin) .NES. ""
$   THEN dflt = bin
$!   ELSE dflt = prefix - ".]" + ".BIN]"
$   ELSE dflt = "/''vms_prefix'/000000"
$   ENDIF
a1201 11
$ ELSE ! skipping "where install" questions, we must set some symbols
$   IF F$TYPE(archlib).EQS."" THEN -
      archlib="''vms_prefix':[lib.''archname'.''version']"
$   IF F$TYPE(bin) .EQS. "" THEN -
      bin="/''vms_prefix'/000000"
$   IF F$TYPE(privlib) .EQS. "" THEN -
      privlib ="''vms_prefix':[lib]"
$   IF F$TYPE(sitearch) .EQS. "" THEN -
      sitearch="''vms_prefix':[lib.site_perl.''archname']"
$   IF F$TYPE(sitelib) .EQS. "" THEN -
      sitelib ="''vms_prefix':[lib.site_perl]"
a1203 38
$! These derived locations can be set whether we've opted to
$! skip the where install questions or not.
$!
$ IF F$TYPE(archlibexp) .EQS. "" THEN -
    archlibexp="''vms_prefix':[lib.''archname'.''version']"
$ IF F$TYPE(binexp) .EQS. "" THEN -
    binexp ="''vms_prefix':[000000]"
$ IF F$TYPE(builddir) .EQS. "" THEN -
    builddir ="''vms_prefix':[000000]"
$ IF F$TYPE(installarchlib) .EQS. "" THEN -
    installarchlib="''vms_prefix':[lib.''archname'.''version']"
$ IF F$TYPE(installbin) .EQS. "" THEN -
    installbin ="''vms_prefix':[000000]"
$ IF F$TYPE(installscript) .EQS. "" THEN -
    installscript ="''vms_prefix':[utils]"
$ IF F$TYPE(installman1dir) .EQS. "" THEN -
    installman1dir ="''vms_prefix':[man.man1]"
$ IF F$TYPE(installman3dir) .EQS. "" THEN -
    installman3dir ="''vms_prefix':[man.man3]"
$ IF F$TYPE(installprivlib) .EQS. "" THEN -
    installprivlib ="''vms_prefix':[lib]"
$ IF F$TYPE(installsitearch) .EQS. "" THEN -
    installsitearch="''vms_prefix':[lib.site_perl.''archname']"
$ IF F$TYPE(installsitelib) .EQS. "" THEN -
    installsitelib ="''vms_prefix':[lib.site_perl]"
$ IF F$TYPE(oldarchlib) .EQS. "" THEN -
    oldarchlib="''vms_prefix':[lib.''archname']"
$ IF F$TYPE(oldarchlibexp) .EQS. "" THEN -
    oldarchlibexp="''vms_prefix':[lib.''archname']"
$ IF F$TYPE(privlibexp) .EQS. "" THEN -
    privlibexp ="''vms_prefix':[lib]"
$ IF F$TYPE(sitearchexp) .EQS. "" THEN -
    sitearchexp ="''vms_prefix':[lib.site_perl.''archname']"
$ IF F$TYPE(sitelib_stem) .EQS. "" THEN -
    sitelib_stem ="''vms_prefix':[lib.site_perl]"
$ IF F$TYPE(sitelibexp) .EQS. "" THEN -
    sitelibexp ="''vms_prefix':[lib.site_perl]"
$!
a1211 1
$ WRITE CONFIG "#ifdef __DECC"
a1212 1
$ WRITE CONFIG "#endif"
d1231 2
d1244 1
a1244 1
$ echo "Default ""cc"" is ''line' ''archsufx' ''F$GETSYI("VERSION")'" 
d1249 1
a1249 1
$     echo "Will try cc/decc..."
d1251 2
a1252 2
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
d1256 2
d1262 1
a1262 1
$     echo "Apparently you don't have that one."
d1265 1
a1265 1
$     echo "You also have: ''line' ''archsufx' ''F$GETSYI("VERSION")'"
d1277 1
a1277 1
$ echo "Checking for gcc"
d1279 2
a1280 2
$ DEFINE/USER_MODE SYS$ERROR CONFIG
$ DEFINE/USER_MODE SYS$OUTPUT CONFIG
d1283 2
d1289 2
a1290 3
$   echo "Symbol ""''gcc_symbol'"" is not defined. I guess you do not have it."
$   DELETE/NOLOG/NOCONFIRM gccvers.lis;
$   GOTO Cxx_initial_check
a1301 81
$Cxx_initial_check:
$!
$! Do note that [vms]perl source files have a ways to go before they will 
$! compile under CXX.
$! In order to test Configure.com with CXX invoke it with "-Dtry_cxx" on
$! the command line.
$!
$ IF F$TYPE(try_cxx) .EQS. "" THEN try_cxx := n
$ IF try_cxx .OR. try_cxx .EQS. "define"
$!
$ THEN
$!
$ echo "Checking for CXX..."
$ OPEN/WRITE CONFIG ccvms.c
$ WRITE CONFIG "#include <iostream>"
$ WRITE CONFIG "int main() {"
$ WRITE CONFIG "#ifdef __DECCXX"
$ WRITE CONFIG "        cout << __DECCXX, endl;"
$ WRITE CONFIG "#else"
$ WRITE CONFIG "        cout << 0,endl;"
$ WRITE CONFIG "#endif"
$! Todo: add G++ identifier check ??
$ WRITE CONFIG "        return(0);"
$ WRITE CONFIG "}"
$ CLOSE CONFIG
$ SET NOON
$ DEFINE/USER_MODE SYS$OUTPUT NL:
$ DEFINE/USER_MODE SYS$ERROR NL:
$ cxx ccvms.c
$ tmp = $status
$ SET ON
$! success $status with:
$! DEC C++ V1.1-001 on VMS VAX V5.5-2
$! DEC C++ V5.6-013 on OpenVMS VAX V7.1
$! DEC C++ V6.1-003 on OpenVMS Alpha V7.1
$! Compaq C++ V6.2-016 for OpenVMS Alpha V7.2-1
$ IF tmp .eq. %X15F60001  
$ THEN
$! Which linker?
$   SET NOON
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   DEFINE/USER_MODE SYS$ERROR NL:
$   link ccvms.obj
$   tmp = $status
$   SET ON
$   ! success $status with:
$   ! link && DEC C++ V1.1-001 on VMS VAX V5.5-2
$   ! link && DEC C++ V5.6-013 on OpenVMS VAX V7.1
$   IF tmp .eq. %X10000001
$   THEN
$     ld_try = "Link"
$     vms_cc_available = vms_cc_available + "cxx "
$     echo "CXX and LINK are available."
$   ELSE
$     IF F$SEARCH("ccvms.exe") .NES. "" THEN DELETE/NOLOG/NOCONFIRM ccvms.exe;
$     SET NOON
$     DEFINE/USER_MODE SYS$OUTPUT NL:
$     DEFINE/USER_MODE SYS$ERROR NL:
$     cxxlink ccvms.obj
$     tmp = $status
$     SET ON
$     ! success $status with:
$     ! cxxlink && DEC C++ V6.1-003 on OpenVMS Alpha V7.1
$     ! cxxlink && Compaq C++ V6.2-016 for OpenVMS Alpha V7.2-1
$     IF tmp .eq. %X10000001 
$     THEN 
$       ld_try = "cxxlink"
$       vms_cc_available = vms_cc_available + "cxx "
$       echo "CXX and CXXLINK are available."
$     ENDIF
$   ENDIF
$   IF F$SEARCH("ccvms.exe") .NES. "" THEN DELETE/NOLOG/NOCONFIRM ccvms.exe;
$ ELSE
$   echo "Nope."
$ ENDIF
$ DELETE/NOLOG/NOCONFIRM ccvms.c;
$ IF F$SEARCH("ccvms.obj") .NES. "" THEN DELETE/NOLOG/NOCONFIRM ccvms.obj;
$ CALL Cxx_demangler_cleanup
$!
$ ENDIF ! 1 .eq. 0 or 1 .eq. 1
$!
d1307 1
a1307 1
$ echo "Available compiler(s):"
d1324 1
a1324 2
$! CPQ ?
$     ccname := DEC
d1327 1
a1327 1
$   IF F$LOCATE("cxx",F$EDIT(ans,"COLLAPSE,LOWERCASE")) .NE. F$LENGTH(ans)
d1329 8
a1336 6
$     Mcc = "cxx"
$     ccname := CXX
$     ld = ld_try
$     C_COMPILER_Replace = "CC=cc=''Mcc'"
$   ELSE ! Not_cxx
$     IF Mcc.NES.dflt
d1338 2
a1339 13
$       IF F$LOCATE("dec",dflt) .NE. F$LENGTH(dflt) .or. -
           F$LOCATE("compaq",dflt) .NE. F$LENGTH(dflt)
$       THEN 
$         C_COMPILER_Replace = "CC=cc=''Mcc'"
$       ELSE
$         ccname := DEC
$       ENDIF
$     ELSE
$       IF Mcc .EQS. "cc/decc"
$       THEN
$         ccname := DEC
$         C_COMPILER_Replace = "CC=cc=''Mcc'"
$       ENDIF
d1346 1
a1346 1
$     ccname := DEC
d1351 1
a1351 1
$     ccname := GCC
d1356 1
a1356 2
$ ccversion=""
$ IF ccname .EQS. "DEC"
d1359 1
a1359 1
$   echo4 "Checking for the Dec C version number..."
d1374 2
a1375 3
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
d1378 2
d1381 2
a1382 2
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
d1385 2
d1389 2
a1390 2
$   DEFINE/USER_MODE SYS$ERROR CONFIG
$   DEFINE/USER_MODE SYS$OUTPUT CONFIG
a1392 1
$   SET ON
d1394 2
d1401 1
d1403 3
a1405 8
$   ccversion = line
$   Dec_C_Version = F$INTEGER(line)
$   IF Dec_C_Version .GE. 60200000
$   THEN
$     echo4 "adding /NOANSI_ALIAS qualifier to ccflags."
$     ccflags = ccflags + "/NOANSI_ALIAS"
$   ENDIF
$   DELETE/NOLOG/NOCONFIRM deccvers.*;
d1408 1
a1408 2
$ gccversion = ""
$ IF ccname .EQS. "GCC"
d1410 10
a1419 4
$   vaxcrtl_olb = F$SEARCH("SYS$LIBRARY:VAXCRTL.OLB")
$   vaxcrtl_exe = F$SEARCH("SYS$SHARE:VAXCRTL.EXE")
$   gcclib_olb  = F$SEARCH("GNU_CC:[000000]GCCLIB.OLB")
$   IF gcclib_olb .EQS. "" 
d1421 3
a1423 10
$!    These objects/libs come w/ gcc 2.7.2 for AXP:
$     tmp = F$SEARCH("GNU_CC:[000000]libgcc2.olb")
$     IF tmp .NES. "" then gcclib_olb = tmp
$     tmp = F$SEARCH("GNU_CC:[000000]libgcclib.olb")
$     IF tmp .NES. "" 
$     THEN 
$       IF gcclib_olb .EQS. "" 
$       THEN gcclib_olb = tmp
$       ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
$       ENDIF
d1425 7
a1431 7
$     tmp = F$SEARCH("SYS$LIBRARY:VAXCRTL.OLB")
$     IF tmp .NES. "" 
$     THEN 
$       IF gcclib_olb .EQS. "" 
$       THEN gcclib_olb = tmp
$       ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
$       ENDIF
d1433 7
a1439 7
$     tmp = F$SEARCH("GNU_CC:[000000]crt0.obj")
$     IF tmp .NES. "" 
$     THEN 
$       IF gcclib_olb .EQS. "" 
$       THEN gcclib_olb = tmp
$       ELSE gcclib_olb = gcclib_olb + "/lib," + tmp
$       ENDIF
a1440 3
$     IF gcclib_olb .EQS. vaxcrtl_olb THEN gcclib_olb = "" !goofy order of axplibs
$   ELSE
$     gcclib_olb = gcclib_olb + "/lib"
d1442 5
a1446 1
$   IF   gcclib_olb .NES. "" .AND. -
a1448 74
$   THEN
$     echo ""
$     echo4 "Checking for GNU cc in disguise and/or its version number..." !>&4
$     OPEN/WRITE CONFIG gccvers.c
$     WRITE CONFIG "#include <stdio.h>"
$     WRITE CONFIG "int main() {"
$     WRITE CONFIG "#ifdef __GNUC__"
$     WRITE CONFIG "#ifdef __VERSION__"
$     WRITE CONFIG "        printf(""%s\n"", __VERSION__);"
$     WRITE CONFIG "#else"
$     WRITE CONFIG "        printf(""%s\n"", ""1"");"
$     WRITE CONFIG "#endif"
$     WRITE CONFIG "#endif"
$     WRITE CONFIG "        exit(0);"
$     WRITE CONFIG "}"
$     CLOSE CONFIG
$     DEFINE SYS$ERROR _NLA0:
$     DEFINE SYS$OUTPUT _NLA0:
$     'Mcc' gccvers.c
$     tmp = $status
$     DEASSIGN SYS$ERROR _NLA0:
$     DEASSIGN SYS$OUTPUT _NLA0:
$     IF (silent) THEN GOSUB Shut_up
$     DEFINE SYS$ERROR _NLA0:
$     DEFINE SYS$OUTPUT _NLA0:
$     IF vaxcrtl_exe .EQS. ""
$     THEN 
$       IF F$LOCATE("VAXCRTL",gcclib_olb).NE.F$LENGTH(gcclib_olb)
$       THEN 
$         link gccvers.obj,'gcclib_olb',SYS$LIBRARY:VAXCRTL/Library
$         tmp = $status
$       ELSE
$         link gccvers.obj,'gcclib_olb'
$         tmp = $status
$       ENDIF
$     ELSE
$       OPEN/WRITE CONFIG GCCVERS.OPT
$       WRITE CONFIG "SYS$SHARE:VAXCRTL/SHARE"
$       CLOSE CONFIG
$       link gccvers.obj,GCCVERS.OPT/OPT,'gcclib_olb'
$       tmp = $status
$     ENDIF
$     DEASSIGN SYS$ERROR
$     DEASSIGN SYS$OUTPUT
$     IF (silent) THEN GOSUB Shut_up
$     OPEN/WRITE CONFIG gccvers.out
$     DEFINE SYS$ERROR CONFIG
$     DEFINE SYS$OUTPUT CONFIG
$     mcr []gccvers.exe
$     tmp = $status
$     CLOSE CONFIG
$     DEASSIGN SYS$OUTPUT
$     DEASSIGN SYS$ERROR
$     IF (silent) THEN GOSUB Shut_up
$     OPEN/READ CONFIG gccvers.out
$     READ/END_OF_FILE=Gcc_cleanup CONFIG line
$Gcc_cleanup:
$     CLOSE CONFIG
$     DELETE/NOLOG/NOCONFIRM gccvers.*;
$     IF F$LOCATE("GNU C version ",line).NE.F$LENGTH(line)
$     THEN 
$       echo "You are not using GNU cc."
$       GOTO Host_name
$     ELSE 
$       echo "You are using GNU cc ''line'"
$       gccversion = line
$       ccname := "GCC"
$       C_COMPILER_Replace = "CC=cc=''Mcc'"
$       GOTO Include_dirs
$     ENDIF
$   ENDIF
$ ENDIF
$Cxx_Version_check:
$ IF ccname .EQS. "CXX"
d1450 4
a1453 1
$   OPEN/WRITE CONFIG cxxvers.c
d1456 3
a1458 2
$   WRITE CONFIG "#ifdef __DECCXX_VER"
$   WRITE CONFIG "        printf(""%i\n"", __DECCXX_VER);"
d1460 2
a1461 1
$   WRITE CONFIG "        printf(""%i\n"", ""0"");"
d1463 1
a1463 1
$   WRITE CONFIG "        return(0);"
d1466 3
a1468 4
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   'Mcc' cxxvers.c
d1470 2
a1471 1
$   SET ON
d1473 21
a1493 6
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   'ld' cxxvers.obj
$   tmp = $status
$   SET ON
d1495 4
a1498 5
$   OPEN/WRITE CONFIG cxxvers.out
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR CONFIG
$   DEFINE/USER_MODE SYS$OUTPUT CONFIG
$   mcr []cxxvers.exe
a1499 1
$   SET ON
d1501 2
d1504 3
a1506 3
$   OPEN/READ CONFIG cxxvers.out
$   READ/END_OF_FILE=Cxx_cleanup CONFIG line
$Cxx_cleanup:
d1508 11
a1518 19
$   DELETE/NOLOG/NOCONFIRM cxxvers.*;
$   echo "You are using CXX ''line'"
$   cxxversion = line
$   ccversion = line
$   CALL Cxx_demangler_cleanup
$ ENDIF
$!
$Cxx_demangler_cleanup: SUBROUTINE
$!
$!  If we do build with CXX these demangler Dbs will be left all over.
$!  However, configure.com does try to remove the [.UU] sub directory.
$!  Be sure to set default to the correct place before calling this sub.
$!
$ SET NOON
$ IF F$SEARCH("[.CXX_REPOSITORY]*.*") .NES. "" THEN DELETE/NOLOG/NOCONFIRM [.CXX_REPOSITORY]*.*;*
$ IF F$SEARCH("CXX_REPOSITORY.DIR") .NES. ""
$ THEN
$   SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) CXX_REPOSITORY.DIR
$   DELETE/NOLOG/NOCONFIRM CXX_REPOSITORY.DIR;
d1520 1
a1520 4
$ SET ON
$ EXIT
$ ENDSUBROUTINE ! Cxx_demangler_cleanup
$!
d1545 1
a1545 1
$!: What should the include directory be ? (.TLB text libraries)
d1611 1
a1611 3
$ THEN
$   TYPE SYS$INPUT:
$   DECK
a1617 1
$   EOD
d1619 6
a1624 9
$ IF F$TYPE(cf_email) .EQS. "" 
$ THEN 
$   dflt = "''cf_by'@@''myhostname'"+"''mydomain'"
$   rp = "What is your e-mail address? [''dflt'] "
$   GOSUB myread
$   IF ans .nes. ""
$   THEN cf_email = ans
$   ELSE cf_email = dflt
$   ENDIF
d1628 1
a1628 3
$ THEN
$   TYPE SYS$INPUT:
$   DECK
a1634 1
$   EOD
d1670 1
a1670 1
$   Has_socketshr     = "T"
d1672 3
a1674 6
$   echo4 "Hmm... Looks like you have SOCKETSHR Berkeley networking support."
$ ELSE
$   Has_socketshr     = "F"
$ ENDIF
$ IF (ccname .EQS. "DEC" .AND. Dec_C_Version .GE. 50200000) .OR. -
     (ccname .EQS. "CXX")
d1678 1
a1678 3
$   echo4 "Hmm... Looks like you have Dec C Berkeley networking support."
$ ELSE
$   Has_Dec_C_Sockets = "F"
d1681 1
a1681 1
$ IF Has_socketshr .OR. Has_Dec_C_Sockets
d1684 3
a1686 3
$   echo "You have sockets available.  Which socket stack do you want to"
$   echo "build into Perl?"
$   IF Has_Dec_C_Sockets
d1693 2
a1694 2
$   IF Has_socketshr THEN rp = rp + ",SOCKETSHR"
$   IF Has_Dec_C_Sockets THEN rp = rp + ",DECC"
d1697 3
a1699 3
$   IF ans .EQS. "" THEN ans = "''dflt'"
$   Has_Dec_C_Sockets = "F"
$   Has_socketshr = "F"
d1701 3
a1703 7
$   IF ans.eqs."decc" then Has_Dec_C_Sockets = "T"
$   IF ans.eqs."socketshr" then Has_socketshr = "T"
$ ENDIF
$ IF Has_Dec_C_Sockets .or. Has_socketshr
$ THEN
$   static_ext = f$edit(static_ext+" "+"Socket","trim,compress")
$ ENDIF
d1726 5
a1730 5
$ echo "Perl can be built with extra runtime debugging enabled. This"
$ echo "enables the -D switch, at the cost of some performance.  It"
$ echo "was mandatory on perl 5.005 and before on VMS, but is now"
$ echo "optional.  If you do not generally use it you should probably"
$ echo "leave this off and gain a bit of extra speed."
d1744 6
a1749 5
$ echo "Perl can be built so that multiple Perl interpreters can coexist"
$ echo "within the same Perl executable."
$ echo "There is some performance overhead, however, so you"
$ echo "probably do not want to choose this unless you are going to be" 
$ echo "doing things with embedded perl."
d1751 1
a1751 1
$ rp = "Build Perl for multiplicity? [''dflt'] "
d1753 2
a1754 2
$ IF ans.eqs."" then ans = dflt
$ IF ans
d1756 1
a1756 1
$   usemultiplicity="define"
d1758 1
a1758 1
$   usemultiplicity="undef"
d1762 1
a1762 1
$ IF (archname.eqs."VMS_AXP").and.("''f$extract(1,3, f$getsyi(""version""))'".ges."7.1")
d1766 1
a1766 1
$   echo "You can have native 64-bit long integers."
d1768 3
a1770 3
$   echo "Perl can be built to take advantage of 64-bit integer types"
$   echo "on some systems, which provide a much larger range for perl's"
$   echo "mathematical operations.  (Note that does *not* enable 64-bit"
d1772 1
a1772 1
$   echo "Choosing this option will most probably introduce binary incompatibilities."
d1774 1
a1774 1
$   echo "If this does not make any sense to you, just accept the default ''dflt'."
d1778 5
a1782 3
$   IF ans
$   THEN use64bitint="Y"
$   ELSE use64bitint="N"
d1788 6
a1793 6
$     echo "Since you chose 64-bitness you may want to try maximal 64-bitness."
$     echo "What you have chosen is minimal 64-bitness which means just enough"
$     echo "to get 64-bit integers.  The maximal means using as much 64-bitness"
$     echo "as is possible on the platform.  This in turn means even more binary"
$     echo "incompatibilities.  On the other hand, your platform may not have"
$     echo "any more maximal 64-bitness than what you already have chosen."
d1795 1
a1795 1
$     echo "If this does not make any sense to you, just accept the default ''dflt'."
d1799 5
a1803 3
$     IF ans
$     THEN use64bitall="Y"
$     ELSE use64bitall="N"
d1809 1
a1809 1
$ IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
d1812 3
a1814 3
$   echo "This version of Perl can be built with threads. While really nifty,"
$   echo "they are a beta feature, and there is a speed penalty for perl"
$   echo "programs if you build with threads *even if you do not use them*."
d1822 1
d1824 12
a1835 12
$     echo "As of 5.5.640, Perl has two different internal threading"
$     echo "implementations, the 5.005 version (5005threads) and an"
$     echo "interpreter-based version (ithreads) that has one"
$     echo "interpreter per thread.  Both are very experimental.  This"
$     echo "arrangement exists to help developers work out which one"
$     echo "is better."
$     echo ""
$     echo "If you are a casual user, you probably do not want"
$     echo "interpreter-threads at this time.  There doesn't yet exist"
$     echo "a way to create threads from within Perl in this model,"
$     echo "i.e., ""use Thread;"" will NOT work."
$     echo ""
d1837 1
a1837 1
$     rp = "Build with Interpreter threads? [''dflt'] "
d1849 1
a1849 1
$     if (archname.eqs."VMS_AXP").and.("''f$extract(1,3, f$getsyi(""version""))'".ges."7.1")
d1852 8
a1859 8
$       echo "Threaded perl can be linked to use multiple kernel threads"
$       echo "and system upcalls on VMS 7.1+ on Alpha systems.  This feature"
$       echo "allows multiple threads to execute simultaneously on an SMP"
$       echo "system as well as preventing a single thread from blocking"
$       echo "all the threads in a program, even on a single-processor"
$       echo "machine.  Unfortunately, this feature isn't safe on an"
$       echo "unpatched 7.1 system (several OS patches were required when"
$       echo "this procedure was written)."
d1871 3
a1873 2
$ IF archname .EQS. "VMS_AXP"
$ THEN
d1875 17
a1891 16
$   echo ""
$   echo "By default, perl (and pretty much everything else on VMS) uses"
$   echo "case-insensitive linker symbols. Which is to say, when the"
$   echo "underlying C code makes a call to a routine called Perl_foo in"
$   echo "the source, the name in the object modules or shareable images"
$   echo "is really PERL_FOO. There are some packages that use an"
$   echo "embedded perl interpreter that instead require case-sensitive"
$   echo "linker symbols."
$   echo ""
$   echo "If you have no idea what this means, and do not have"
$   echo "any program requiring anything, choose the default."
$   dflt = be_case_sensitive
$   rp = "Build with case-sensitive symbols? [''dflt'] "
$   GOSUB myread
$   IF ans .EQS. "" THEN ans="''dflt'"
$   be_case_sensitive = "''ans'"
d1893 10
a1902 10
$   echo ""
$   echo "Perl normally uses G_FLOAT format floating point numbers"
$   echo "internally, as do most things on VMS.  You can, however, build"
$   echo "with IEEE floating point numbers instead if you need to."
$   dflt = use_ieee_math
$   rp = "Use IEEE math? [''dflt'] "
$   GOSUB myread
$   IF ans .eqs. "" THEN ans = "''dflt'"
$   use_ieee_math = "''ans'"
$ ENDIF
d1905 3
a1907 5
$ echo "Your compiler may want other flags.  For this question you should include"
$ echo "/INCLUDE=(whatever) and /DEFINE=(whatever), flags and any other flags"
$ echo "or qualifiers used by the compiler."
$ echo ""
$ echo "To use no flags, specify the word ""none""."
d1909 3
a1911 4
$ rp = "Any additional cc flags? [''dflt'] "
$ GOSUB myread
$ IF ans .EQS. "" THEN ans = "''dflt'"
$ IF ans .EQS. "none" THEN ans = ""
d1932 2
a1933 5
$ IF ans .eqs. "" THEN ans = dflt
$ IF ans
$ THEN d_secintgenv := Y
$ ELSE d_secintgenv := N
$ ENDIF
d1945 3
a1947 3
$ echo "This is currently broken in some configurations. Only enable it if"
$ echo "you know what you are doing."
$ dflt = "n"
d1950 3
a1952 5
$ IF ans .EQS. "" THEN ans = dflt
$ IF ans
$ THEN d_alwdeftype := Y
$ ELSE d_alwdeftype := N
$ ENDIF
d1955 4
a1958 4
$ echo "Perl has a built-in memory allocator that is tuned for normal"
$ echo "memory usage.  It is oftentimes better than the standard system"
$ echo "memory allocator.  It also has the advantage of providing memory"
$ echo "allocation statistics, if you choose to enable them."
d1960 1
a1960 5
$ IF F$TYPE(usemymalloc) .EQS. "STRING"
$ THEN
$   IF usemymalloc THEN dflt = "y"
$ ENDIF
$ rp = "Do you wish to attempt to use the malloc that comes with ''package'? [''dflt'] "
d1962 3
a1964 6
$ IF ans .eqs. "" THEN ans = dflt
$ IF ans
$ THEN mymalloc := Y
$ ELSE mymalloc := N
$ ENDIF
$ IF mymalloc
d1966 1
a1966 1
$   IF use_debugging_perl
d1969 3
a1971 3
$     echo "Perl can keep statistics on memory usage if you choose to use"
$     echo "them.  This is useful for debugging, but does have some"
$     echo "performance overhead."
d1975 1
a1975 1
$     IF ans .eqs. "" THEN ans = "''dflt'"
d1980 6
a1985 6
$   echo "There are currently three different memory allocators: the"
$   echo "default (which is a pretty good general-purpose memory manager),"
$   echo "the TWO_POT allocator (which is optimized to save memory for"
$   echo "larger allocations), and PACK_MALLOC (which is optimized to save"
$   echo "memory for smaller allocations). They're all good, but if your"
$   echo "usage tends towards larger chunks use TWO_POT, otherwise use"
d1997 7
a2003 5
$ echo "It is time to specify which modules you want to build into"
$ echo "perl. Most of these are standard and should be chosen, though"
$ echo "you might, for example, want to build GDBM_File instead of"
$ echo "SDBM_File if you have the GDBM library built on your machine."
$ echo ""
d2007 1
a2007 1
$ IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
d2049 1
a2049 1
$ known_extensions = "''dflt'"
d2053 1
a2053 1
$ echo "Checking your ""make"" utilities..."
a2075 5
$!
$! Noted with GNU Make version 3.60  that the $status and $severity
$! with the 'probe' Makefile appear to be: $STATUS == "%X1000000C"
$! $SEVERITY == "4".
$!
d2080 1
a2080 1
$ IF ($SEVERITY .EQ. 1) ! not adequate?
d2104 1
a2104 1
$   rp = "Which """"make"""" utility do you wish to use? [''dflt'] "
a2113 1
$   DECK
d2120 1
a2120 2
$   EOD
$   READ SYS$COMMAND/PROMPT="Which ""MMS"" do you use? " ans
d2125 1
a2125 1
$     echo "I do not know where ""make"" is, and my life depends on it."
a2139 1
$ DECK
a2141 1
$ EOD
a2143 1
$ DECK
a2146 1
$ EOD
d2158 1
a2158 11
$ dflt = "type/page"
$! assume that the presence of a most symbol indicates the presence
$! of the pager.
$ IF F$TYPE(most) .EQS. "STRING" THEN dflt = "most"
$ IF F$TYPE(pager) .EQS. "STRING" THEN dflt = pager
$ rp="What pager is used on your system? [''dflt'] "
$ GOSUB myread
$ IF (ans .EQS. "") 
$ THEN pager = dflt
$ ELSE pager = ans
$ ENDIF
a2169 1
$   Makefile_SH = "descrip_mms.template"
a2173 1
$   Makefile_SH = "Makefile.in"
d2176 2
a2177 2
$ IF macros .NES. "" 
$ THEN
d2184 2
a2185 2
$ IF use_ieee_math
$ THEN
d2187 3
a2189 3
$ ENDIF
$ IF be_case_sensitive
$ THEN
d2191 1
a2191 1
$ ENDIF
d2194 9
a2202 3035
$ min_pgflquota = "100000"
$ pgflquota = F$STRING(F$GETJPI("","PGFLQUOTA"))
$ IF pgflquota .LES. min_pgflquota
$ THEN
$   echo4 "Your PGFLQUOTA of ''pgflquota' appears too small to build ''package'."
$   READ SYS$COMMAND/PROMPT="Continue? [n] " ans
$   IF ans
$   THEN
$     echo4 "Continuing..."
$   ELSE
$     echo4 "ABORTING..."
$     GOTO Clean_up
$   ENDIF
$ ENDIF
$!
$ echo ""
$ echo4 "Checking the C run-time library."
$!
$! Former SUBCONFIGURE.COM
$!
$!  - build a config.sh for VMS Perl.
$!  - use built config.sh to take config_h.SH -> config.h
$!  - also take vms/descrip_mms.template -> descrip.mms (VMS Makefile)
$!              vms/Makefile.in -> Makefile. (VMS GNU Makefile?)
$!              vms/Makefile.SH -> Makefile. (VMS GNU Makefile?)
$!  - build make_ext.com extension builder procedure.
$!
$! Note for folks from other platforms changing things in here:
$!
$!   Fancy changes (based on compiler capabilities or VMS version or
$!   whatever) are tricky, so go ahead and punt on those.
$!
$!   Simple changes, though (say, always setting something to 1, or undef,
$!   or something like that) are straightforward.  Adding a new constant 
$!   item for the ultimately created config.sh requires at least one 
$!   (possibly more) line(s) to this file.
$!
$!   Add a line in the format:
$!
$!     $ WC "foo='undef'"
$!
$!   somewhere between the line tagged '##BEGIN WRITE NEW CONSTANTS HERE##'
$!   and the one tagged '##END WRITE NEW CONSTANTS HERE##' (note the order
$!   is sorted ASCII and corresponds to the output of config.sh in the 
$!   Bourne shell version of Configure).
$!   Be very careful with quoting, as it can be tricky.
$!   For example if instead of a constant string like 'undef' or 'define' 
$!   you wanted to add something to VMS's config.sh that looks like:
$!
$!     blank_string=''
$!
$!   then add a line that looks like this before the 
$!   '##END WRITE NEW CONSTANTS HERE##' tagged line:
$!
$!     $ WC "blank_string='" + "'"
$!
$!   (+ is the string concatenator and "''var'" has the effect 
$!    of "${var}" in perl or sh, but "'const'" is not interpolated).
$!
$!   Note that unitialized variables, such as a line like:
$!
$!     $ WC "new_var='" + new_var + "'"
$!
$!   should be avoided unless new_var has a value assigned prior 
$!   to that line (think of perl's -w warnings).
$!
$!     %DCL-W-UNDSYM, undefined symbol - check validity and spelling
$!     \NEW_VAR\
$!
$!
$ vms_ver = F$EXTRACT(1,3, osvers)
$ IF F$LENGTH(Mcc) .EQ. 0 THEN Mcc := "cc"
$ MCC = f$edit(mcc, "UPCASE")
$ C_Compiler_Replace := "CC=CC=''Mcc'''ccflags'"
$ IF ccname .EQS. "DEC"
$ THEN
$   Checkcc := "''Mcc'/prefix=all"
$ ELSE
$   IF ccname .EQS. "CXX"
$   THEN
$     Checkcc := cxx
$   ELSE
$     Checkcc := "''Mcc'"
$   ENDIF
$ ENDIF
$ ccflags = ccflags + extra_flags
$ IF be_case_sensitive
$ THEN
$   d_vms_be_case_sensitive = "define"
$ ELSE
$   d_vms_be_case_sensitive = "undef"
$ ENDIF
$! Some constant defaults.
$ hwname = f$getsyi("HW_NAME")
$ myname = myhostname
$ IF myname .EQS. "" THEN myname = F$TRNLNM("SYS$NODE")
$!
$ ccdlflags=""
$ cccdlflags=""
$!
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$   use64bitint = "define"
$   uselargefiles = "define"
$   uselongdouble = "define"
$   alignbytes="16"
$   usemorebits = "define"
$ ELSE
$   use64bitint = "undef"
$   uselargefiles = "undef"
$   uselongdouble = "undef"
$   usemorebits = "undef"
$ ENDIF
$ IF use64bitall .OR. use64bitall .EQS. "define"
$ THEN
$   use64bitall = "define"
$ ELSE
$   use64bitall = "undef"
$ ENDIF
$!
$ usemymalloc=mymalloc
$!
$ perl_cc=Mcc
$!
$ IF (sharedperl .AND. F$GETSYI("HW_MODEL") .GE. 1024)
$ THEN
$   obj_ext=".abj"
$   so="axe"
$   dlext="axe"
$   exe_ext=".axe"
$   lib_ext=".alb"
$ ELSE
$   obj_ext=".obj"
$   so="exe"
$   dlext="exe"
$   exe_ext=".exe"
$   lib_ext=".olb"
$ ENDIF
$ dlobj="dl_vms''obj_ext'"
$!
$ cppstdin="''perl_cc'/noobj/preprocess=sys$output sys$input"
$ cppminus=" "
$ cpprun="''perl_cc'/noobj/preprocess=sys$output sys$input"
$ cpplast=" "
$!
$ timetype="time_t"
$ signal_t="void"
$ stdchar="char"
$!
$ IF mymalloc
$ THEN d_mymalloc="define"
$ ELSE d_mymalloc="undef"
$ ENDIF
$!
$ usedl="define"
$ startperl="""$ perl 'f$env(\""procedure\"")' \""'"+"'p1'\"" \""'"+"'p2'\"" \""'"+"'p3'\"" \""'"+"'p4'\"" \""'"+"'p5'\"" \""'"+"'p6'\"" \""'"+"'p7'\"" \""'"+"'p8'\""!\n"
$ startperl=startperl + "$ exit++ + ++$status!=0 and $exit=$status=undef; while($#ARGV != -1 and $ARGV[$#ARGV] eq '"+"'){pop @@ARGV;}"""
$!
$ IF ((Use_Threads) .AND. (vms_ver .LES. "6.2"))
$ THEN
$   libs="SYS$SHARE:CMA$LIB_SHR.EXE/SHARE SYS$SHARE:CMA$RTL.EXE/SHARE SYS$SHARE:CMA$OPEN_LIB_SHR.exe/SHARE SYS$SHARE:CMA$OPEN_RTL.exe/SHARE"
$ ELSE
$   libs=" "
$ ENDIF
$ IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
$ THEN
$   libc="(DECCRTL)"
$ ELSE
$   libc=" "
$ ENDIF
$!
$! perllibs should be libs with all non-core libs (such as gdbm) removed.
$!
$ perllibs=libs
$!
$! Are we 64 bit?
$!
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$   d_PRId64 = "define"
$   d_PRIEUldbl = "define"
$   d_PRIFUldbl = "define"
$   d_PRIGUldbl = "define"
$   d_PRIXU64 = "define"
$   d_PRIeldbl = "define"
$   d_PRIfldbl = "define"
$   d_PRIgldbl = "define"
$   d_PRIu64 = "define"
$   d_PRIo64 = "define"
$   d_PRIx64 = "define"
$   sPRId64 = """Ld"""
$   sPRIEUldbl = """LE"""
$   sPRIFUldbl = """LF"""
$   sPRIGUldbl = """LG"""
$   sPRIXU64 = """LX"""
$   sPRIeldbl = """Le"""
$   sPRIfldbl = """Lf"""
$   sPRIgldbl = """Lg"""
$   sPRIi64 = """Li"""
$   sPRIo64 = """Lo"""
$   sPRIu64 = """Lu"""
$   sPRIx64 = """Lx"""
$   d_quad = "define"
$   quadtype = "long long"
$   uquadtype = "unsigned long long"
$   quadkind  = "QUAD_IS_LONG_LONG"
$   d_frexpl = "define"
$   d_isnan = "define"
$   d_isnanl = "define"
$   d_modfl = "define"
$ ELSE
$   d_PRId64 = "undef"
$   d_PRIEUldbl = "define"
$   d_PRIFUldbl = "define"
$   d_PRIGUldbl = "define"
$   d_PRIXU64 = "undef"
$   d_PRIeldbl = "define"
$   d_PRIfldbl = "undef"
$   d_PRIgldbl = "undef"
$   d_PRIu64 = "undef"
$   d_PRIo64 = "undef"
$   d_PRIx64 = "undef"
$   sPRId64 = ""
$   sPRIEUldbl = """E"""
$   sPRIFUldbl = """F"""
$   sPRIGUldbl = """G"""
$   sPRIXU64 = """lX"""
$   sPRIeldbl = """e"""
$   sPRIfldbl = """f"""
$   sPRIgldbl = """g"""
$   sPRIi64 = ""
$   sPRIo64 = ""
$   sPRIu64 = ""
$   sPRIx64 = ""
$   d_quad = "undef"
$   quadtype = "long"
$   uquadtype = "unsigned long"
$   quadkind  = "QUAD_IS_LONG"
$   d_frexpl = "undef"
$   d_isnan = "undef"
$   d_isnanl = "undef"
$   d_modfl = "undef"
$ ENDIF
$ d_SCNfldbl = d_PRIfldbl
$ sSCNfldbl = sPRIfldbl ! expect consistency
$!
$! Now some that we build up
$!
$ IF Use_Threads
$ THEN
$   IF use_5005_threads
$   THEN
$     arch = "''arch'-thread"
$     archname = "''archname'-thread"
$     d_old_pthread_create_joinable = "undef"
$     old_pthread_create_joinable = " "
$     use5005threads = "define"
$     useithreads = "undef"
$   ELSE
$     arch = "''arch'-ithread"
$     archname = "''archname'-ithread"
$     d_old_pthread_create_joinable = "undef"
$     old_pthread_create_joinable = " "
$     use5005threads = "undef"
$     useithreads = "define"
$   ENDIF
$ ELSE
$   d_old_pthread_create_joinable = "undef"
$   old_pthread_create_joinable = " "
$   use5005threads = "undef"
$   useithreads = "undef"
$ ENDIF
$!
$! Some that we need to invoke the compiler for
$!
$!
$! handy construction aliases/symbols
$!
$ OS := "open/write CONFIG []try.c"
$ WS := "write CONFIG"
$ CS := "close CONFIG"
$ DS := "delete/nolog/noconfirm []try.*;*"
$ Needs_Opt := N
$ good_compile = %X10B90001
$ IF ccname .EQS. "GCC"
$ THEN
$   open/write OPTCHAN []try.opt
$   write OPTCHAN "Gnu_CC:[000000]gcclib.olb/library"
$   write OPTCHAN "Sys$Share:VAXCRTL/Share"
$   Close OPTCHAN
$   Needs_Opt := Y
$   good_compile = %X10000001
$ ENDIF
$ IF ccname .EQS. "CXX"
$ THEN
$   good_compile = %X15F60001
$ ENDIF
$ good_link = %X10000001
$ tmp = "" ! null string default
$!
$ GOTO beyond_compile_ok
$!
$! Check for type sizes 
$!
$type_size_check: 
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""%d\n"", sizeof(''tmp'));"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile
$ RETURN
$!
$!: locate header file
$findhdr:
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <''tmp'>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""define\n"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ RETURN
$!
$!: define an alternate in-header-list? function
$inhdr:
$!
$ GOSUB findhdr
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   echo4 "<''tmp'> found."
$   tmp = "define"
$ ELSE
$   echo4 "<''tmp'> NOT found."
$   tmp = "undef"
$ ENDIF
$ RETURN
$!
$!: define an is-in-libc? function
$inlibc: 
$ GOSUB link_ok
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   echo4 "''tmp'() found."
$   tmp = "define"
$ ELSE
$   echo4 "''tmp'() NOT found."
$   tmp = "undef"
$ ENDIF
$ RETURN
$!
$!: define a shorthand compile call
$compile:
$ GOSUB link_ok
$just_mcr_it:
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   OPEN/WRITE CONFIG []try.out
$   DEFINE/USER_MODE SYS$ERROR CONFIG
$   DEFINE/USER_MODE  SYS$OUTPUT CONFIG
$   MCR []try.exe
$   CLOSE CONFIG
$   OPEN/READ CONFIG []try.out
$   READ CONFIG tmp
$   CLOSE CONFIG
$   DELETE/NOLOG/NOCONFIRM []try.out;
$   DELETE/NOLOG/NOCONFIRM []try.exe;
$ ELSE
$   tmp = "" ! null string default
$ ENDIF
$ RETURN
$!
$link_ok:
$ GOSUB compile_ok
$ DEFINE/USER_MODE SYS$ERROR _NLA0:
$ DEFINE/USER_MODE SYS$OUTPUT _NLA0:
$ SET NOON
$ IF Needs_Opt
$ THEN
$   'ld' try.obj,try.opt/opt
$   link_status = $status
$ ELSE
$   'ld' try.obj
$   link_status = $status
$ ENDIF
$ SET ON
$ IF F$SEARCH("try.obj") .NES. "" THEN DELETE/NOLOG/NOCONFIRM try.obj;
$ RETURN
$!
$!: define a shorthand compile call for compilations that should be ok.
$compile_ok:
$ DEFINE/USER_MODE SYS$ERROR _NLA0:
$ DEFINE/USER_MODE SYS$OUTPUT _NLA0:
$ SET NOON
$ 'Checkcc' try.c
$ compile_status = $status
$ SET ON
$ DELETE/NOLOG/NOCONFIRM try.c;
$ RETURN
$!
$beyond_compile_ok:
$!
$! Check for __STDC__
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "#ifdef __STDC__"
$ WS "printf(""42\n"");"
$ WS "#else"
$ WS "printf(""1\n"");"
$ WS "#endif"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile
$ cpp_stuff=tmp
$ IF F$INTEGER(tmp) .eq. 42
$ THEN
$   echo4 "Your C compiler and pre-processor defines the symbol:"
$   echo4 "__STDC__"
$ ENDIF
$!
$! Check for double size
$!
$ echo4 "Checking to see how big your double precision numbers are..."
$ tmp="double"
$ GOSUB type_size_check
$ doublesize = tmp
$ echo "Your double is ''doublesize' bytes long."
$!
$! Check for long double size
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""%d\n"", sizeof(long double));"
$ WS "exit(0);"
$ WS "}"
$ CS
$ echo4 "Checking to see if you have long double..."
$ GOSUB link_ok
$ IF link_status .NE. good_link
$ THEN
$   longdblsize="0"
$   d_longdbl="undef"
$   echo "You do not have long double."
$ ELSE
$   echo "You have long double."
$   echo4 "Checking to see how big your long doubles are..."
$   GOSUB just_mcr_it
$   longdblsize = tmp
$   d_longdbl = "define"
$   echo "Your long doubles are ''longdblsize' bytes long."
$ ENDIF
$!
$!: check for long long
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""%d\n"", sizeof(long long));"
$ WS "exit(0);"
$ WS "}"
$ CS
$ echo4 "Checking to see if you have long long..."
$ GOSUB link_ok
$ IF link_status .NE. good_link
$ THEN
$   longlongsize="0"
$   d_longlong="undef"
$   echo "You do not have long long."
$ ELSE
$   echo "You have long long."
$   echo4 "Checking to see how big your long longs are..."
$   GOSUB just_mcr_it
$   longlongsize = tmp
$   d_longlong = "define"
$   echo "Your long longs are ''longlongsize' bytes long."
$ ENDIF
$!
$! Check the prototype for getgid
$!
$ echo "Looking for the type for group ids returned by getgid()."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "int main()"
$ WS "{"
$ WS "gid_t foo;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .NE. good_compile
$ THEN
$!   Okay, gid_t failed. Must be unsigned int
$   gidtype = "unsigned int"
$   echo4 "assuming ""''gidtype'""."
$ ELSE
$   gidtype = "gid_t"
$   echo4 "gid_t found."
$ ENDIF
$!
$! Check to see if we've got dev_t
$!
$ echo "Looking for the type for dev."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "int main()"
$ WS "{"
$ WS "dev_t foo;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .NE. good_compile
$ THEN
$!   Okay, dev_t failed. Must be unsigned int
$   devtype = "unsigned int"
$   echo4 "assuming ""''devtype'""."
$ ELSE
$   devtype = "dev_t"
$   echo4 "dev_t found."
$ ENDIF
$!
$! Check to see if we've got unistd.h (which we ought to, but you never know)
$!
$ i_netdb = "undef"
$ tmp = "unistd.h"
$ GOSUB inhdr
$ i_unistd = tmp
$!
$!: see if this is a libutil.h system
$!
$ tmp = "libutil.h"
$ GOSUB inhdr
$ i_libutil = tmp
$!
$! Check to see if we've got shadow.h (probably not, but...)
$!
$ tmp = "shadow.h"
$ GOSUB inhdr
$ i_shadow = tmp
$!
$! Check to see if we've got socks.h (probably not, but...)
$!
$ tmp = "socks.h"
$ GOSUB inhdr
$ i_socks = tmp
$!
$! Check the prototype for select
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   WS "#include <types.h>"
$   IF i_unistd .EQS. "define" THEN WS "#include <unistd.h>"
$   IF Has_Socketshr
$   THEN
$     WS "#include <socketshr.h>"
$   ELSE
$     WS "#include <time.h>"
$     WS "#include <socket.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "fd_set *foo;"
$   WS "int bar;"
$   WS "foo = NULL;"
$   WS "bar = select(2, foo, foo, foo, NULL);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   GOSUB compile_ok
$   IF compile_status .NE. good_compile
$   THEN
$!   Okay, select failed.  Must be an int *
$     selecttype = "int *"
$     echo4 "select() NOT found."
$   ELSE
$     selecttype="fd_set *"
$     echo4 "select() found."
$   ENDIF
$ ELSE
$   ! No sockets, so stick in an int * : no select, so pick a harmless default
$   selecttype = "int *"
$ ENDIF
$!
$! Check to see if fd_set exists
$!
$ echo "Checking to see how well your C compiler handles fd_set and friends ..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ IF Has_Socketshr
$ THEN
$   WS "#include <socketshr.h>"
$ ENDIF
$ IF Has_Dec_C_Sockets
$ THEN
$   WS "#include <time.h>"
$   WS "#include <socket.h>"
$ ENDIF
$ WS "int main()"
$ WS "{"
$ WS "fd_set *foo;"
$ WS "int bar;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .ne. good_compile
$ THEN
$!  Okay, fd_set failed. Must not exist
$   d_fd_set = "undef"
$   echo4 "Hmm, your compiler has some difficulty with fd_set."
$ ELSE
$   d_fd_set="define"
$   echo4 "Well, your system knows about the normal fd_set typedef..."
$ ENDIF
$!
$! Check for inttypes.h
$!
$ tmp = "inttypes.h"
$ GOSUB inhdr
$ i_inttypes = tmp
$!
$! Check to see if off64_t exists
$!
$ echo4 "Checking to see if you have off64_t..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "#''i_inttypes' IIH"
$ WS "#ifdef IIH"
$ WS "#include <inttypes.h>"
$ WS "#endif"
$ WS "int main()"
$ WS "{"
$ WS "off64_t bar;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .EQ. good_compile
$ THEN
$   d_off64_t="define"
$   echo "You have off64_t."
$ ELSE
$   d_off64_t = "undef"
$   echo "You do not have off64_t."
$ ENDIF
$!
$! Check to see if fpos64_t exists
$!
$ echo4 "Checking to see if you have fpos64_t..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "#''i_inttypes' IIH"
$ WS "#ifdef IIH"
$ WS "#include <inttypes.h>"
$ WS "#endif"
$ WS "int main()"
$ WS "{"
$ WS "fpos64_t bar;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .EQ. good_compile
$ THEN
$   d_fpos64_t="define"
$   echo "You have fpos64_t."
$ ELSE
$   d_fpos64_t = "undef"
$   echo "You do not have fpos64_t."
$ ENDIF
$!
$! Check to see if int64_t exists
$!
$ echo4 "Checking to see if you have int64_t..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <types.h>"
$ WS "#''i_inttypes' IIH"
$ WS "#ifdef IIH"
$ WS "#include <inttypes.h>"
$ WS "#endif"
$ WS "int main()"
$ WS "{"
$ WS "int64_t bar;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB compile_ok
$ IF compile_status .EQ. good_compile
$ THEN
$   d_int64_t="define"
$   echo "You have int64_t."
$ ELSE
$   d_int64_t = "undef"
$   echo "You do not have int64_t."
$ ENDIF
$!
$!: see if this is a netdb.h system
$ IF Has_Dec_C_Sockets
$ THEN 
$   tmp = "netdb.h"
$   GOSUB inhdr
$   i_netdb = tmp
$ ENDIF
$!
$! Check for h_errno
$!
$ echo4 "Checking to see if you have h_errno..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ IF i_unistd .EQS. "define" THEN WS "#include <unistd.h>"
$ IF i_netdb  .EQS. "define" THEN WS "#include <netdb.h>"
$ WS "int main()"
$ WS "{"
$ WS "h_errno = 3;"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   d_herrno="define"
$   echo "You have h_errno."
$ ELSE
$   d_herrno="undef"
$   echo "You do not have h_errno."
$ ENDIF
$!
$! Check to see if gethostname exists
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   WS "#include <types.h>"
$   IF Has_Socketshr
$   THEN
$     WS "#include <socketshr.h>"
$   ELSE
$     WS "#include <time.h>"
$     WS "#include <socket.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "char name[100];"
$   WS "int bar, baz;"
$   WS "bar = 100;"
$   WS "baz = gethostname(name, bar);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   GOSUB link_ok
$   IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$   THEN
$     d_gethname="define"
$     echo4 "gethostname() found."
$   ELSE
$     d_gethname="undef"
$   ENDIF
$ ELSE
$   ! No sockets, so no gethname
$   d_gethname = "undef"
$ ENDIF
$!
$! Check for sys/file.h
$!
$ tmp = "sys/file.h"
$ GOSUB inhdr
$ i_sysfile = tmp
$!
$! Check for sys/utsname.h
$!
$ tmp = "sys/utsname.h"
$ GOSUB inhdr
$ i_sysutsname = tmp
$!
$! Check for syslog.h
$!
$ tmp = "syslog.h"
$ GOSUB inhdr
$ i_syslog = tmp
$!
$! Check for poll.h
$!
$ tmp = "poll.h"
$ GOSUB inhdr
$ i_poll = tmp
$!
$! Check for sys/uio.h
$!
$ tmp = "sys/uio.h"
$ GOSUB inhdr
$ i_sysuio = tmp
$!
$! Check for sys/mode.h
$!
$ tmp = "sys/mode.h"
$ GOSUB inhdr
$ i_sysmode = tmp
$!
$! Check for sys/access.h
$!
$ tmp = "sys/access.h"
$ GOSUB inhdr
$ i_sysaccess = tmp
$!
$! Check for sys/security.h
$!
$ tmp = "sys/security.h"
$ GOSUB inhdr
$ i_syssecrt = tmp
$!
$! Check for fcntl.h
$!
$ tmp = "fcntl.h"
$ GOSUB inhdr
$ i_fcntl = tmp
$!
$! Check for fcntl
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <fcntl.h>"
$ WS "int main()"
$ WS "{"
$ WS "fcntl(1,2,3);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "fcntl"
$ GOSUB inlibc
$ d_fcntl = tmp
$!
$! Check for fcntl locking capability
$!
$ echo4 "Checking if fcntl-based file locking works... "
$ tmp = "undef"
$ IF d_fcntl .EQS. "define"
$ THEN
$   OS
$   WS "#include <stdio.h>"
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <fcntl.h>"
$   WS "#include <unistd.h>"
$   WS "int main() {"
$   WS "#if defined(F_SETLK) && defined(F_SETLKW)"
$   WS "     struct flock flock;"
$   WS "     int retval, fd;"
$   WS "     fd = open(""try.c"", O_RDONLY);"
$   WS "     flock.l_type = F_RDLCK;"
$   WS "     flock.l_whence = SEEK_SET;"
$   WS "     flock.l_start = flock.l_len = 0;"
$   WS "     retval = fcntl(fd, F_SETLK, &flock);"
$   WS "     close(fd);"
$   WS "     (retval < 0 ? printf(""undef\n"") : printf(""define\n""));"
$   WS "#else"
$   WS "     printf(""undef\n"");"
$   WS "#endif"
$   WS "}"
$   CS
$   GOSUB link_ok
$   IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$   THEN
$     GOSUB just_mcr_it
$     IF tmp .EQS. "define"
$     THEN
$       echo4 "Yes, it seems to work."
$     ELSE
$       echo4 "Nope, it didn't work."
$     ENDIF
$   ELSE
$     echo4 "I'm unable to compile the test program, so I'll assume not."
$     tmp = "undef"
$   ENDIF
$ ELSE
$   echo4 "Nope, since you don't even have fcntl()."
$ ENDIF
$ d_fcntl_can_lock = tmp
$!
$! Check for memchr
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "char * place;"
$ WS "place = memchr(""foo"", 47, 3)"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "memchr"
$ GOSUB inlibc
$ d_memchr = tmp
$!
$! Check for strtoull
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "unsigned __int64 result;"
$ WS "result = strtoull(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtoull"
$ GOSUB inlibc
$ d_strtoull = tmp
$!
$! Check for strtouq
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "unsigned __int64 result;"
$ WS "result = strtouq(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtouq"
$ GOSUB inlibc
$ d_strtouq = tmp
$!
$! Check for strtoll
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "__int64 result;"
$ WS "result = strtoll(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtoll"
$ GOSUB inlibc
$ d_strtoll = tmp
$!
$! Check for strtold
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "long double result;"
$ WS "result = strtold(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtold"
$ GOSUB inlibc
$ d_strtold = tmp
$!
$! Check for atoll
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS " __int64 result;"
$ WS "result = atoll(""123123"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "atoll"
$ GOSUB inlibc
$ d_atoll = tmp
$!
$! Check for atolf
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "long double"
$ WS "result = atolf(""123123"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "atolf"
$ GOSUB inlibc
$ d_atolf = tmp
$!
$! Check for access
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "access(""foo"", F_OK);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "acess"
$ GOSUB inlibc
$ d_access = tmp
$!
$! Check for bzero
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <strings.h>"
$ WS "int main()"
$ WS "{"
$ WS "char foo[10];"
$ WS "bzero(foo, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "bzero"
$ GOSUB inlibc
$ d_bzero = tmp
$!
$! Check for bcopy
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <strings.h>"
$ WS "int main()"
$ WS "{"
$ WS "char foo[10], bar[10];"
$ WS "bcopy(""foo"", bar, 3);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "bcopy"
$ GOSUB inlibc
$ d_bcopy = tmp
$!
$! Check for mkstemp
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "mkstemp(""foo"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "mkstemp"
$ GOSUB inlibc
$ d_mkstemp = tmp
$!
$! Check for mkstemps
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "mkstemps(""foo"", 1);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "mkstemps"
$ GOSUB inlibc
$ d_mkstemps = tmp
$!
$! Check for iconv
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <iconv.h>"
$ WS "int main()"
$ WS "{"
$ WS "  iconv_t cd = (iconv_t)0;"
$ WS "  char *inbuf, *outbuf;"
$ WS "  size_t inleft, outleft;"
$ WS "  iconv(cd, &inbuf, &inleft, &outbuf, &outleft);"
$ WS "  exit(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ IF compile_status .ne. good_compile
$ THEN
$   d_iconv="undef"
$   i_iconv="undef"
$ ELSE
$   IF link_status .ne. good_link
$   THEN
$     d_iconv="undef"
$     i_iconv="undef"
$   ELSE
$     d_iconv="define"
$     i_iconv="define"
$   ENDIF
$ ENDIF
$ IF i_iconv .eqs. "define" 
$ THEN echo4 "<iconv.h> found."
$ ELSE echo4 "<iconv.h> NOT found."
$ ENDIF
$!
$! Check for mkdtemp
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "mkdtemp(""foo"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "mkdtemp"
$ GOSUB inlibc
$ d_mkdtemp = tmp
$!
$! Check for setvbuf
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "FILE *foo;"
$ WS "char Buffer[99];"
$ WS "foo = fopen(""foo"", ""r"");"
$ WS "setvbuf(foo, Buffer, 0, 0);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "setvbuf"
$ GOSUB inlibc
$ d_setvbuf = tmp
$!
$! Check for setenv
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "setenv(""FOO"", ""BAR"", 0);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "setenv"
$ GOSUB inlibc
$ d_setenv = tmp
$!
$! Check for setproctitle
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "setproctitle(""%s"", ""FOO"");"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "setproctitle"
$ GOSUB inlibc
$ d_setproctitle = tmp
$!
$! Check for <netinet/in.h>
$!
$ IF Has_Dec_C_Sockets .or. Has_Socketshr
$ THEN
$   tmp = "netinet/in.h"
$   GOSUB inhdr
$   i_niin = tmp
$ ELSE
$   i_niin="undef"
$ ENDIF
$!
$! Check for <netinet/tcp.h>
$!
$ IF Has_Dec_C_Sockets .or. Has_Socketshr
$ THEN
$   tmp = "netinet/tcp.h"
$   GOSUB inhdr
$   i_netinettcp = tmp
$ ELSE
$   i_netinettcp="undef"
$ ENDIF
$!
$! Check for endhostent
$!
$ IF Has_Dec_C_Sockets .or. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "endhostent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "endhostent"
$   GOSUB inlibc
$   d_endhent = tmp
$ ELSE
$   d_endhent="undef"
$ ENDIF
$!
$! Check for endnetent
$!
$ IF Has_Dec_C_Sockets .or. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "endnetent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "endnetent"
$   GOSUB inlibc
$   d_endnent = tmp
$ ELSE
$   d_endnent="undef"
$ ENDIF
$!
$! Check for endprotoent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "endprotoent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "endprotoent"
$   GOSUB inlibc
$   d_endpent = tmp
$ ELSE
$   d_endpent="undef"
$ ENDIF
$!
$! Check for endservent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "endservent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "endservent"
$   GOSUB inlibc
$   d_endsent = tmp
$ ELSE
$   d_endsent="undef"
$ ENDIF
$!
$! Check for sethostent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "sethostent(1);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "sethostent"
$   GOSUB inlibc
$   d_sethent = tmp
$ ELSE
$   d_sethent="undef"
$ ENDIF
$!
$! Check for setnetent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "setnetent(1);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "setnetent"
$   GOSUB inlibc
$   d_setnent = tmp
$ ELSE
$   d_setnent="undef"
$ ENDIF
$!
$! Check for setprotoent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "setprotoent(1);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "setprotoent"
$   GOSUB inlibc
$   d_setpent = tmp
$ ELSE
$   d_setpent="undef"
$ ENDIF
$!
$! Check for setservent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "setservent(1);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "setservent"
$   GOSUB inlibc
$   d_setsent = tmp
$ ELSE
$   d_setsent="undef"
$ ENDIF
$!
$! Check for gethostent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "gethostent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "gethostent"
$   GOSUB inlibc
$   d_gethent = tmp
$ ELSE
$   d_gethent="undef"
$ ENDIF
$!
$! Check for getnetent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "getnetent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "getnetent"
$   GOSUB inlibc
$   d_getnent = tmp
$ ELSE
$   d_getnent="undef"
$ ENDIF
$!
$! Check for getprotoent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "getprotoent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "getprotoent"
$   GOSUB inlibc
$   d_getpent = tmp
$ ELSE
$   d_getpent="undef"
$ ENDIF
$!
$! Check for getservent
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "getservent();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "getservent"
$   GOSUB inlibc
$   d_getsent = tmp
$ ELSE
$   d_getsent="undef"
$ ENDIF
$!
$! Check for socklen_t
$!
$ IF Has_Dec_C_Sockets .OR. Has_Socketshr
$ THEN
$   echo4 "Checking to see if you have socklen_t..."
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   IF Has_Socketshr
$   THEN WS "#include <socketshr.h>"
$   ELSE IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
$   ENDIF
$   WS "int main()"
$   WS "{"
$   WS "socklen_t x = 16;"
$   WS "exit(0);"
$   WS "}"
$   CS
$   GOSUB link_ok
$   IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$   THEN
$     d_socklen_t="define"
$     echo "You have socklen_t."
$   ELSE
$     d_socklen_t="undef"
$     echo "You do not have socklen_t."
$   ENDIF
$ ELSE
$   d_socklen_t="undef"
$ ENDIF
$!
$! Check for pthread_yield
$!
$ IF use_threads
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <pthread.h>"
$   WS "#include <stdio.h>"
$   WS "int main()"
$   WS "{"
$   WS "pthread_yield();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "pthread_yield"
$   GOSUB inlibc
$   d_pthread_yield = tmp
$ ELSE
$   d_pthread_yield="undef"
$ ENDIF
$!
$! Check for sched_yield
$!
$ IF use_threads
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <pthread.h>"
$   WS "#include <stdio.h>"
$   WS "int main()"
$   WS "{"
$   WS "sched_yield();"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "sched_yield"
$   GOSUB inlibc
$   d_sched_yield = tmp
$   IF d_sched_yield .EQS. "define"
$   THEN sched_yield = "sched_yield"
$   ELSE sched_yield = " "
$   ENDIF
$ ELSE
$   d_sched_yield="undef"
$   sched_yield = " "
$ ENDIF
$!
$! Check for generic pointer size
$!
$ echo4 "Checking to see how big your pointers are..." 
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "int foo;"
$ WS "foo = sizeof(char *);"
$ WS "printf(""%d\n"", foo);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "char *"
$ GOSUB type_size_check
$ ptrsize = tmp
$ echo "Your pointers are ''ptrsize' bytes long."
$!
$! Check for size_t size
$!
$ tmp = "size_t"
$ zzz = tmp
$ echo4 "Checking the size of ''zzz'..."
$ GOSUB type_size_check
$ sizesize = tmp
$ echo "Your ''zzz' size is ''sizesize' bytes."
$!
$! Check rand48 and its ilk
$!
$ echo4 "Looking for a random number function..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "srand48(12L);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$ THEN
$   drand01 = "drand48()"
$   randseedtype = "long int"
$   seedfunc = "srand48"
$   echo4 "Good, found drand48()."
$   d_drand48proto = "define"
$ ELSE
$   d_drand48proto = "undef"
$   drand01="random()"
$   randseedtype = "unsigned"
$   seedfunc = "srandom"
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   WS "int main()"
$   WS "{"
$   WS "srandom(12);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   GOSUB link_ok
$   IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$   THEN
$     echo4 "OK, found random()."
$   ELSE
$     drand01="(((float)rand())/((float)RAND_MAX))"
$     randseedtype = "unsigned"
$     seedfunc = "srand"
$     echo4 "Yick, looks like I have to use rand()."
$   ENDIF
$ ENDIF
$! Done with compiler checks. Clean up.
$ IF F$SEARCH("try.c")  .NES."" THEN DELETE/NOLOG/NOCONFIRM try.c;*
$ IF F$SEARCH("try.obj").NES."" THEN DELETE/NOLOG/NOCONFIRM try.obj;*
$ IF F$SEARCH("try.exe").NES."" THEN DELETE/NOLOG/NOCONFIRM try.exe;*
$ IF F$SEARCH("try.opt").NES."" THEN DELETE/NOLOG/NOCONFIRM try.opt;*
$ IF F$SEARCH("try.out").NES."" THEN DELETE/NOLOG/NOCONFIRM try.out;*
$ IF ccname .EQS. "CXX"
$ THEN
$   CALL Cxx_demangler_cleanup
$ ENDIF
$!
$! Some that are compiler or VMS version sensitive
$!
$! Gnu C stuff
$ IF ccname .EQS. "GCC"
$ THEN
$   d_attribut="define"
$   vms_cc_type="gcc"
$ ELSE
$   vms_cc_type="cc"
$   d_attribut="undef"
$ ENDIF
$!
$! Dec C >= 5.2 and VMS ver >= 7.0
$ IF (ccname .EQS. "DEC") .AND. -
     (F$INTEGER(Dec_C_Version).GE.50200000) .AND. (vms_ver .GES. "7.0")
$ THEN
$   d_bcmp="define"
$   d_gettimeod="define"
$   d_uname="define"
$   d_sigaction="define"
$   d_truncate="define"
$   d_wait4="define"
$   d_index="define"
$   pidtype="pid_t"
$   sig_name="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ABRT USR1 USR2 SPARE18 SPARE19 CHLD CONT STOP TSTP TTIN TTOU DEBUG SPARE27 SPARE28 SPARE29 SPARE30 SPARE31 SPARE32 RTMIN RTMAX"",0"
$   psnwc1="""ZERO"",""HUP"",""INT"",""QUIT"",""ILL"",""TRAP"",""IOT"",""EMT"",""FPE"",""KILL"",""BUS"",""SEGV"",""SYS"","
$   psnwc2="""PIPE"",""ALRM"",""TERM"",""ABRT"",""USR1"",""USR2"",""SPARE18"",""SPARE19"",""CHLD"",""CONT"",""STOP"",""TSTP"","
$   psnwc3="""TTIN"",""TTOU"",""DEBUG"",""SPARE27"",""SPARE28"",""SPARE29"",""SPARE30"",""SPARE31"",""SPARE32"",""RTMIN"",""RTMAX"",0"
$   sig_name_init = psnwc1 + psnwc2 + psnwc3
$   sig_num="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 6 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 64"",0"
$   sig_num_init="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,64,0"
$!   perl_sig_num_with_commas=sig_num_init
$   uidtype="uid_t"
$   d_pathconf="define"
$   d_fpathconf="define"
$   d_sysconf="define"
$   d_sigsetjmp="define"
$ ELSE
$   pidtype="unsigned int"
$   d_gettimeod="undef"
$   d_bcmp="undef"
$   d_uname="undef"
$   d_sigaction="undef"
$   d_truncate="undef"
$   d_wait4="undef"
$   d_index="undef"
$   sig_name="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ABRT USR1 USR2"",0"
$   psnwc1="""ZERO"",""HUP"",""INT"",""QUIT"",""ILL"",""TRAP"",""IOT"",""EMT"",""FPE"",""KILL"",""BUS"",""SEGV"",""SYS"","
$   psnwc2="""PIPE"",""ALRM"",""TERM"",""ABRT"",""USR1"",""USR2"",0"
$   sig_name_init = psnwc1 + psnwc2
$   sig_num="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 6 16 17"",0"
$   sig_num_init="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,6,16,17,0"
$!   perl_sig_num_with_commas=sig_num_init
$   uidtype="unsigned int"
$   d_pathconf="undef"
$   d_fpathconf="undef"
$   d_sysconf="undef"
$   d_sigsetjmp="undef"
$ ENDIF
$!
$ IF d_gethname .EQS. "undef" .AND. d_uname .EQS. "undef"
$ THEN
$   d_phostname="define"
$ ELSE
$   d_phostname="undef"
$ ENDIF
$!
$! Dec C alone
$ IF ccname .EQS. "DEC"
$ THEN
$   d_mbstowcs="define"
$   d_mbtowc="define"
$   d_stdiobase="define"
$   d_stdio_cnt_lval="define"
$   d_stdio_ptr_lval="define"
$   d_stdstdio="define"
$   d_wcstombs="define"
$   d_mblen="define"
$   d_mktime="define"
$   d_strcoll="define"
$   d_strxfrm="define"
$   d_wctomb="define"
$   i_locale="define"
$   d_locconv="define"
$   d_setlocale="define"
$   vms_cc_type="decc"
$ ELSE
$   d_mbstowcs="undef"
$   d_mbtowc="undef"
$   d_stdiobase="undef"
$   d_stdio_cnt_lval="undef"
$   d_stdio_ptr_lval="undef"
$   d_stdstdio="undef"
$   d_wcstombs="undef"
$   d_mblen="undef"
$   d_mktime="undef"
$   d_strcoll="undef"
$   d_strxfrm="undef"
$   d_wctomb="undef"
$   i_locale="undef"
$   d_locconv="undef"
$   d_setlocale="undef"
$ ENDIF
$ d_stdio_ptr_lval_sets_cnt="undef"
$ d_stdio_ptr_lval_nochange_cnt="undef"
$!
$! Sockets?
$ if Has_Socketshr .OR. Has_Dec_C_Sockets
$ THEN
$   d_vms_do_sockets="define"
$   d_htonl="define"
$   d_socket="define"
$   d_select="define"
$   netdb_hlen_type="int"
$   netdb_host_type="char *"
$   netdb_name_type="char *"
$   netdb_net_type="long"
$   d_gethbyaddr="define"
$   d_gethbyname="define"
$   d_getnbyaddr="define"
$   d_getnbyname="define"
$   d_getpbynumber="define"
$   d_getpbyname="define"
$   d_getsbyport="define"
$   d_getsbyname="define"
$   d_gethostprotos="define"
$   d_getnetprotos="define"
$   d_getprotoprotos="define"
$   d_getservprotos="define"
$   IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
$   THEN
$     socksizetype="unsigned int"
$   ELSE
$     socksizetype="int *"
$   ENDIF
$ ELSE
$   d_vms_do_sockets="undef"
$   d_htonl="undef"
$   d_socket="undef"
$   d_select="undef"
$   netdb_hlen_type="int"
$   netdb_host_type="char *"
$   netdb_name_type="char *"
$   netdb_net_type="long"
$   d_gethbyaddr="undef"
$   d_gethbyname="undef"
$   d_getnbyaddr="undef"
$   d_getnbyname="undef"
$   d_getpbynumber="undef"
$   d_getpbyname="undef"
$   d_getsbyport="undef"
$   d_getsbyname="undef"
$   d_gethostprotos="undef"
$   d_getnetprotos="undef"
$   d_getprotoprotos="undef"
$   d_getservprotos="undef"
$   socksizetype="undef"
$ ENDIF
$! Threads
$ IF use_threads
$ THEN
$   usethreads="define"
$   d_pthreads_created_joinable="define"
$   if (vms_ver .GES. "7.0")
$   THEN
$     d_oldpthreads="undef"
$   ELSE
$     d_oldpthreads="define"
$   ENDIF
$ ELSE
$   d_oldpthreads="undef"
$   usethreads="undef"
$   d_pthreads_created_joinable="undef"
$ ENDIF
$! 
$! new (5.005_62++) typedefs for primitives
$!
$ echo "Choosing the C types to be used for Perl's internal types..."
$ ivtype="long"
$ uvtype="unsigned long"
$ i8type="char"
$ u8type="unsigned char"
$ i16type="short"
$ u16type="unsigned short"
$ i32type="int"
$ u32type="unsigned int"
$ i64type="long long"
$ u64type="unsigned long long"
$ nvtype="double"
$!
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$   ivtype = "''i64type'"
$   uvtype = "''u64type'"
$   nvtype="long double"
$ ELSE
$   i64size="undef"
$   u64size="undef"
$ ENDIF
$!
$ tmp = "''ivtype'"
$ GOSUB type_size_check
$ ivsize = tmp
$ IF use64bitint .OR. use64bitint .EQS. "define" THEN i64size = tmp
$ IF ivtype .eqs. "long"
$ THEN longsize = tmp
$ ELSE
$   tmp = "long"
$   GOSUB type_size_check
$   longsize = tmp
$ ENDIF
$!
$ tmp = "''uvtype'"
$ GOSUB type_size_check
$ uvsize = tmp
$ IF use64bitint .OR. use64bitint .EQS. "define" THEN u64size = tmp
$!
$ tmp = "''i8type'"
$ GOSUB type_size_check
$ i8size = tmp
$!
$ tmp = "''u8type'"
$ GOSUB type_size_check
$ u8size = tmp
$!
$ tmp = "''i16type'"
$ GOSUB type_size_check
$ i16size = tmp
$ IF i16type .eqs. "short"
$ THEN shortsize = tmp
$ ELSE
$   tmp = "short"
$   gosub type_size_check
$   shortsize = tmp
$ ENDIF
$!
$ tmp = "''u16type'"
$ GOSUB type_size_check
$ u16size = tmp
$!
$ tmp = "''i32type'"
$ GOSUB type_size_check
$ i32size = tmp
$ IF i32type .eqs. "int"
$ THEN intsize = tmp
$ ELSE
$   tmp = "int"
$   gosub type_size_check
$   intsize = tmp
$ ENDIF
$!
$ tmp = "''u32type'"
$ gosub type_size_check
$ u32size = tmp
$!
$ tmp = "''nvtype'"
$ GOSUB type_size_check
$ nvsize = tmp
$!
$ echo "(IV will be ""''ivtype'"", ''ivsize' bytes)"
$ echo "(UV will be ""''uvtype'"", ''uvsize' bytes)"
$ echo "(NV will be ""''nvtype'"", ''nvsize' bytes)"
$!
$ echo4 "Checking whether your NVs can preserve your UVs..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "int main() {"
$ WS "    ''uvtype' k = (''uvtype')~0, l;"
$ WS "    ''nvtype' d;"
$ WS "    l = k;"
$ WS "    d = (''nvtype')l;"
$ WS "    l = (''uvtype')d;"
$ WS "    if (l == k)"
$ WS "       printf(""preserve\n"");"
$ WS "    exit(0);"
$ WS "}"
$ CS
$ GOSUB compile
$ IF tmp .EQS. "preserve"
$ THEN 
$   d_nv_preserves_uv = "define"
$   echo "Yes, they can." 
$   d_nv_preserves_uv_bits = F$STRING(F$INTEGER(uvsize) * 8)
$ ELSE
$   d_nv_preserves_uv = "undef"
$   echo "No, they can't."
$   echo4 "Checking how many bits of your UVs your NVs can preserve..."
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <stdio.h>"
$   WS "int main() {"
$   WS "    ''uvtype' u = 0;"
$   WS "    int     n = 8 * ''uvsize';"
$   WS "    int     i;"
$   WS "    for (i = 0; i < n; i++) {"
$   WS "      u = u << 1 | (''uvtype')1;"
$   WS "      if ((''uvtype')(''nvtype')u != u)"
$   WS "        break;"
$   WS "    }"
$   WS "    printf(""%d\n"", i);"
$   WS "    exit(0);"
$   WS "}"
$   GOSUB compile
$   d_nv_preserves_uv_bits = tmp
$ ENDIF
$ DELETE/SYMBOL tmp
$!
$ ivdformat="""ld"""
$ uvuformat="""lu"""
$ uvoformat="""lo"""
$ uvxformat="""lx"""
$ uvXUformat="""lX"""
$! uselongdouble?
$ nveformat="""e"""
$ nvfformat="""f"""
$ nvgformat="""g"""
$! 
$! Finally the composite ones. All config
$!
$ myuname="''osname' ''myname' ''osvers' ''F$EDIT(hwname, "TRIM")'"
$!
$ IF ccname .EQS. "DEC"
$ THEN
$   ccflags="/Include=[]/Standard=Relaxed_ANSI/Prefix=All/Obj=''obj_ext'/NoList''ccflags'"
$ ENDIF
$ i_dirent = "undef"
$ IF ccname .EQS. "CXX"
$ THEN
$   i_dirent = "define"
$   ccflags="/Include=[]/Standard=ANSI/Prefix=All/Obj=''obj_ext'/NoList''ccflags'"
$ ENDIF
$ IF use_vmsdebug_perl
$ THEN
$   optimize="/Debug/NoOpt"
$   ldflags="/Debug/Trace/Map"
$   dbgprefix = "DBG"
$ ELSE
$   optimize= ""
$   ldflags="/NoTrace/NoMap"
$   dbgprefix = ""
$ ENDIF
$!
$! Okay, we've got everything configured. Now go write out a config.sh.
$ basename_config_sh = F$PARSE(config_sh,,,"NAME",)+F$PARSE(config_sh,,,"TYPE",)
$ echo4 "Creating ''basename_config_sh'..."
$ open/write CONFIG 'config_sh'
$ WC := write CONFIG
$!
$! ##BEGIN WRITE NEW CONSTANTS HERE##
$!
$ WC "#!/bin/sh"
$ WC "#"
$ WC "# This file was produced by Configure.COM on a ''osname' system."
$ WC "#"
$ WC "# Package name      : ''package'"
$ WC "# Source directory  : ''src'"
$ WC "# Configuration time: " + cf_time
$ WC "# Configuration by  : " + cf_by
$ WC "# Target system     : " + myuname
$ WC ""
$ WC "CONFIG='true'"
$ WC "Makefile_SH='" + Makefile_SH + "'"
$ WC "Mcc='" + Mcc + "'"
$ WC "PERL_REVISION='" + revision + "'"
$ WC "PERL_VERSION='" + patchlevel + "'" 
$ WC "PERL_SUBVERSION='" + subversion + "'" 
$ WC "PERL_API_VERSION='" + api_version + "'" 
$ WC "PERL_API_SUBVERSION='" + api_subversion + "'"
$ WC "alignbytes='" + alignbytes + "'"
$ WC "aphostname='write sys$output f$edit(f$getsyi(\""SCSNODE\""),\""TRIM,LOWERCASE\"")'"
$ WC "ar='" + "'"
$ WC "archlib='" + archlib + "'"
$ WC "archlibexp='" + archlibexp + "'"
$ WC "archname='" + archname + "'"
$ WC "baserev='" + baserev + "'"
$ WC "bin='" + bin + "'"
$ WC "binexp='" + binexp + "'"
$ WC "builddir='" + builddir + "'"
$ WC "byteorder='1234'"
$ WC "castflags='0'"
$ WC "cc='" + perl_cc + "'"
$ WC "cccdlflags='" + cccdlflags + "'"
$ WC "ccdlflags='" + ccdlflags + "'"
$ WC "ccflags='" + ccflags + "'"
$ WC "ccname='" + ccname + "'"
$ WC "ccversion='" + ccversion + "'"
$ WC "cf_by='" + cf_by + "'"
$ WC "cf_email='" + cf_email + "'"
$ WC "cf_time='" + cf_time + "'"
$ WC "config_args='" + config_args + "'"
$ WC "config_sh='" + config_sh + "'"
$ WC "cpp_stuff='" + cpp_stuff + "'"
$ WC "cpplast='" + cpplast + "'"
$ WC "cppminus='" + cppminus + "'"
$ WC "cpprun='" + cpprun + "'"
$ WC "cppstdin='" + cppstdin + "'"
$ WC "crosscompile='undef'"
$ WC "d__fwalk='undef'"
$ WC "d_Gconvert='my_gconvert(x,n,t,b)'"
$ WC "d_PRId64='" + d_PRId64 + "'"
$ WC "d_PRIEldbl='" + d_PRIEUldbl + "'"
$ WC "d_PRIFldbl='" + d_PRIFUldbl + "'"
$ WC "d_PRIGldbl='" + d_PRIGUldbl + "'"
$ WC "d_PRIX64='" + d_PRIXU64 + "'"
$ WC "d_PRIeldbl='" + d_PRIeldbl + "'"
$ WC "d_PRIfldbl='" + d_PRIfldbl + "'"
$ WC "d_PRIgldbl='" + d_PRIgldbl + "'"
$ WC "d_PRIo64='" + d_PRIo64 + "'"
$ WC "d_PRIu64='" + d_PRIu64 + "'"
$ WC "d_PRIx64='" + d_PRIx64 + "'"
$ WC "d_SCNfldbl='" + d_SCNfldbl + "'"
$ WC "d_access='" + d_access + "'"
$ WC "d_accessx='undef'"
$ WC "d_alarm='define'"
$ WC "d_archlib='define'"
$ WC "d_atolf='" + d_atolf + "'"
$ WC "d_atoll='" + d_atoll + "'"
$ WC "d_attribut='" + d_attribut + "'"
$ WC "d_bcmp='" + d_bcmp + "'"
$ WC "d_bcopy='" + d_bcopy + "'"
$ WC "d_bincompat3='undef'"
$ WC "d_bincompat5005='undef'"
$ WC "d_bsdgetpgrp='undef'"
$! WC "d_bsdpgrp='undef'"
$ WC "d_bsdsetpgrp='undef'"
$ WC "d_bzero='" + d_bzero + "'"
$ WC "d_casti32='define'"
$ WC "d_castneg='define'"
$ WC "d_charvspr='undef'"
$ WC "d_chown='define'"
$ WC "d_chroot='undef'"
$ WC "d_chsize='undef'"
$ WC "d_cmsghdr_s='undef'"
$ WC "d_const='define'"
$ WC "d_crypt='define'"
$ WC "d_csh='undef'"
$ WC "d_cuserid='define'"
$ WC "d_dbl_dig='define'"
$ WC "d_difftime='define'"
$ WC "d_dirnamlen='define'"
$ WC "d_dlerror='undef'"
$ WC "d_dlsymun='undef'"
$ WC "d_dosuid='undef'"
$ WC "d_drand48proto='" + d_drand48proto + "'"
$ WC "d_dup2='define'"
$ WC "d_eaccess='undef'"
$ WC "d_endgrent='define'"
$ WC "d_endhent='" + d_endhent + "'"
$ WC "d_endnent='" + d_endnent + "'"
$ WC "d_endpent='" + d_endpent + "'"
$ WC "d_endpwent='define'"
$ WC "d_endsent='" + d_endsent + "'"
$ WC "d_eofnblk='undef'"
$ WC "d_eunice='undef'"
$ WC "d_fchmod='undef'"
$ WC "d_fchown='undef'"
$ WC "d_fcntl='" + d_fcntl + "'"
$ WC "d_fcntl_can_lock='" + d_fcntl_can_lock + "'"
$ WC "d_fd_set='" + d_fd_set + "'"
$ WC "d_fgetpos='define'"
$ WC "d_flexfnam='define'"
$ WC "d_flock='undef'"
$ WC "d_fork='undef'"
$ WC "d_fpathconf='" + d_fpathconf + "'"
$ WC "d_fpos64_t='" + d_fpos64_t + "'"
$ WC "d_frexpl='" + d_frexpl + "'"
$ WC "d_fs_data_s='undef'"
$ WC "d_fseeko='undef'"
$ WC "d_fsetpos='define'"
$ WC "d_fstatfs='undef'"
$ WC "d_fstatvfs='undef'"
$ WC "d_fsync='undef'"
$ WC "d_ftello='undef'"
$ WC "d_getcwd='undef'"
$ WC "d_getespwnam='undef'"
$ WC "d_getfsstat='undef'"
$ WC "d_getgrent='define'"
$ WC "d_getgrps='undef'"
$ WC "d_gethbyaddr='" + d_gethbyaddr + "'"
$ WC "d_gethbyname='" + d_gethbyname + "'"
$ WC "d_gethent='" + d_gethent + "'"
$ WC "d_gethname='" + d_gethname + "'"
$ WC "d_gethostprotos='" + d_gethostprotos + "'"
$ WC "d_getlogin='define'"
$ WC "d_getmnt='undef'"
$ WC "d_getmntent='undef'"
$ WC "d_getnbyaddr='" + d_getnbyaddr + "'"
$ WC "d_getnbyname='" + d_getnbyname + "'"
$ WC "d_getnent='" + d_getnent + "'"
$ WC "d_getnetprotos='" + d_getnetprotos + "'"
$ WC "d_getpagsz='undef'"
$ WC "d_getpbyname='" + d_getpbyname + "'"
$ WC "d_getpbynumber='" + d_getpbynumber + "'"
$ WC "d_getpent='" + d_getpent + "'"
$ WC "d_getpgid='undef'"
$ WC "d_getpgrp2='undef'"
$ WC "d_getpgrp='undef'"
$ WC "d_getppid='undef'"
$ WC "d_getprior='undef'"
$ WC "d_getprotoprotos='" + d_getprotoprotos + "'"
$ WC "d_getprpwnam='undef'"
$ WC "d_getpwent='define'"
$ WC "d_getsbyname='" + d_getsbyname + "'"
$ WC "d_getsbyport='" + d_getsbyport + "'"
$ WC "d_getsent='" + d_getsent + "'"
$ WC "d_getservprotos='" + d_getservprotos + "'"
$ WC "d_getspnam='undef'"
$ WC "d_gettimeod='" + d_gettimeod + "'"
$ WC "d_gnulibc='undef'"
$ WC "d_grpasswd='undef'"
$ WC "d_hasmntopt='undef'"
$ WC "d_htonl='" + d_htonl + "'"
$ WC "d_iconv='" + d_iconv +"'"
$ WC "d_index='" + d_index + "'"
$ WC "d_inetaton='undef'"
$ WC "d_int64_t='" + d_int64_t + "'"
$ WC "d_isascii='define'"
$ WC "d_isnan='" + d_isnan + "'"
$ WC "d_isnanl='" + d_isnanl + "'"
$ WC "d_killpg='undef'"
$ WC "d_lchown='undef'"
$ WC "d_ldbl_dig='define'"
$ WC "d_link='undef'"
$ WC "d_llseek='undef'"
$ WC "d_locconv='" + d_locconv + "'"
$ WC "d_lockf='undef'"
$ WC "d_longdbl='" + d_longdbl + "'"
$ WC "d_longlong='" + d_longlong + "'"
$ WC "d_lseekproto='define'"
$ WC "d_lstat='undef'"
$ WC "d_madvise='undef'"
$ WC "d_mblen='" + d_mblen + "'"
$ WC "d_mbstowcs='" + d_mbstowcs + "'"
$ WC "d_mbtowc='" + d_mbtowc + "'"
$ WC "d_memchr='" + d_memchr + "'"
$ WC "d_memcmp='define'"
$ WC "d_memcpy='define'"
$ WC "d_memmove='define'"
$ WC "d_memset='define'"
$ WC "d_mkdir='define'"
$ WC "d_mkdtemp='" + d_mkdtemp + "'"
$ WC "d_mkfifo='undef'"
$ WC "d_mknod='undef'"
$ WC "d_mkstemp='" + d_mkstemp + "'"
$ WC "d_mkstemps='" + d_mkstemps + "'"
$ WC "d_mktime='" + d_mktime + "'"
$ WC "d_mmap='undef'"
$ WC "d_modfl='" + d_modfl + "'"
$ WC "d_mprotect='undef'"
$ WC "d_msg='undef'"
$ WC "d_msg_ctrunc='undef'"
$ WC "d_msg_dontroute='undef'"
$ WC "d_msg_oob='undef'"
$ WC "d_msg_peek='undef'"
$ WC "d_msg_proxy='undef'"
$ WC "d_msghdr_s='undef'"
$ WC "d_msync='undef'"
$ WC "d_munmap='undef'"
$ WC "d_mymalloc='" + d_mymalloc + "'"
$ WC "d_nice='define'"
$ WC "d_nv_preserves_uv='" + d_nv_preserves_uv + "'"
$ WC "d_nv_preserves_uv_bits='" + d_nv_preserves_uv_bits + "'"
$ WC "d_off64_t='" + d_off64_t + "'"
$ WC "d_old_pthread_create_joinable='" + d_old_pthread_create_joinable + "'"
$ WC "d_oldarchlib='define'"
$ WC "d_oldpthreads='" + d_oldpthreads + "'"
$ WC "d_open3='define'"
$ WC "d_pathconf='" + d_pathconf + "'"
$ WC "d_pause='define'"
$ WC "d_perl_otherlibdirs='undef'"
$ WC "d_phostname='" + d_phostname + "'"
$ WC "d_pipe='define'"
$ WC "d_poll='undef'"
$ WC "d_pthread_yield='" + d_pthread_yield + "'"
$ WC "d_pthreads_created_joinable='" + d_pthreads_created_joinable + "'"
$ WC "d_pwage='undef'"
$ WC "d_pwchange='undef'"
$ WC "d_pwclass='undef'"
$ WC "d_pwcomment='define'"
$ WC "d_pwexpire='undef'"
$ WC "d_pwgecos='define'"
$ WC "d_pwpasswd='define'"
$ WC "d_pwquota='undef'"
$ WC "d_qgcvt='undef'"
$ WC "d_quad='" + d_quad + "'"
$ WC "d_readdir='define'"
$ WC "d_readlink='undef'"
$ WC "d_readv='undef'"
$ WC "d_recvmsg='undef'"
$ WC "d_rename='define'"
$ WC "d_rewinddir='define'"
$ WC "d_rmdir='define'"
$ WC "d_safebcpy='undef'"
$ WC "d_safemcpy='define'"
$ WC "d_sanemcmp='define'"
$ WC "d_sbrkproto='define'"
$ WC "d_sched_yield='" + d_sched_yield + "'"
$ WC "d_scm_rights='undef'"
$ WC "d_seekdir='define'"
$ WC "d_select='" + d_select + "'"
$ WC "d_sem='undef'"
$ WC "d_semctl_semid_ds='undef'"
$ WC "d_semctl_semun='undef'"
$ WC "d_sendmsg='undef'"
$ WC "d_setegid='undef'"
$ WC "d_setenv='" + d_setenv + "'"
$ WC "d_seteuid='undef'"
$ WC "d_setgrent='undef'"
$ WC "d_setgrps='undef'"
$ WC "d_sethent='" + d_sethent + "'"
$ WC "d_setlinebuf='undef'"
$ WC "d_setlocale='" + d_setlocale + "'"
$ WC "d_setnent='" + d_setnent + "'"
$ WC "d_setpent='" + d_setpent + "'"
$ WC "d_setpgid='undef'"
$ WC "d_setpgrp2='undef'"
$ WC "d_setpgrp='undef'"
$ WC "d_setprior='undef'"
$ WC "d_setproctitle='" + d_setproctitle + "'"
$ WC "d_setpwent='define'"
$ WC "d_setregid='undef'"
$ WC "d_setresgid='undef'"
$ WC "d_setresuid='undef'"
$ WC "d_setreuid='undef'"
$ WC "d_setrgid='undef'"
$ WC "d_setruid='undef'"
$ WC "d_setsent='" + d_setsent + "'"
$ WC "d_setsid='undef'"
$ WC "d_setvbuf='" + d_setvbuf + "'"
$ WC "d_sfio='undef'"
$ WC "d_shm='undef'"
$ WC "d_shmatprototype='undef'"
$ WC "d_sigaction='" + d_sigaction + "'"
$ WC "d_sigsetjmp='" + d_sigsetjmp + "'"
$ WC "d_socket='" + d_socket + "'"
$ WC "d_socklen_t='" + d_socklen_t + "'"
$ WC "d_sockpair='undef'"
$ WC "d_socks5_init='undef'"
$ WC "d_sqrtl='define'"
$ WC "d_statblks='undef'"
$ WC "d_statfs_f_flags='undef'"
$ WC "d_statfs_s='undef'"
$ WC "d_statfsflags='undef'"
$ WC "d_stdio_cnt_lval='" + d_stdio_cnt_lval + "'"
$ WC "d_stdio_ptr_lval='" + d_stdio_ptr_lval + "'"
$ WC "d_stdio_ptr_lval_sets_cnt='" + d_stdio_ptr_lval_sets_cnt + "'"
$ WC "d_stdio_ptr_lval_nochange_cnt='" + d_stdio_ptr_lval_nochange_cnt + "'"
$ WC "d_stdio_stream_array='undef'"
$ WC "d_stdiobase='" + d_stdiobase + "'"
$ WC "d_stdstdio='" + d_stdstdio + "'"
$ WC "d_strchr='define'"
$ WC "d_strcoll='" + d_strcoll + "'"
$ WC "d_strctcpy='define'"
$ WC "d_strerrm='strerror((e),vaxc$errno)'"
$ WC "d_strerror='define'"
$ WC "d_strtod='define'"
$ WC "d_strtol='define'"
$ WC "d_strtold='" + d_strtold + "'"
$ WC "d_strtoll='" + d_strtoll + "'"
$ WC "d_strtoul='define'"
$ WC "d_strtoull='" + d_strtoull + "'"
$ WC "d_strtouq='" + d_strtouq + "'"
$ WC "d_strxfrm='" + d_strxfrm  + "'"
$ WC "d_suidsafe='undef'"
$ WC "d_symlink='undef'"
$ WC "d_syscall='undef'"
$ WC "d_sysconf='" + d_sysconf + "'"
$ WC "d_syserrlst='undef'"
$ WC "d_system='define'"
$ WC "d_tcgetpgrp='undef'"
$ WC "d_tcsetpgrp='undef'"
$ WC "d_telldir='define'"
$ WC "d_telldirproto='define'"
$ WC "d_times='define'"
$ WC "d_truncate='" + d_truncate + "'"
$ WC "d_tzname='undef'"
$ WC "d_umask='define'"
$ WC "d_uname='" + d_uname + "'"
$ WC "d_union_semun='undef'"
$ WC "d_unlink_all_versions='undef'"
$ WC "d_ustat='undef'"
$ WC "d_vendorarch='undef'"
$ WC "d_vendorlib='undef'"
$ WC "d_vfork='define'"
$ WC "d_vms_case_sensitive_symbols='" + d_vms_be_case_sensitive + "'" ! VMS
$ WC "d_vms_do_sockets='" + d_vms_do_sockets + "'" ! VMS
$ WC "d_void_closedir='define'"
$ WC "d_volatile='define'"
$ WC "d_vprintf='define'"
$ WC "d_wait4='" + d_wait4 + "'"
$ WC "d_waitpid='define'"
$ WC "d_wcstombs='" + d_wcstombs + "'"
$ WC "d_wctomb='" + d_wctomb + "'"
$ WC "d_writev='undef'"
$ WC "db_hashtype=' '"
$ WC "db_prefixtype=' '"
$ WC "dbgprefix='" + dbgprefix + "'"
$ WC "defvoidused='15'"
$ WC "devtype='" + devtype + "'"
$ WC "direntrytype='struct dirent'"
$ WC "dlext='" + dlext + "'"
$ WC "dlobj='" + dlobj + "'"
$ WC "dlsrc='dl_vms.c'"
$ WC "doublesize='" + doublesize + "'"
$ WC "drand01='" + drand01 + "'"
$ WC "dynamic_ext='" + extensions + "'"
$ WC "eagain=' '"
$ WC "ebcdic='undef'"
$ WC "embedmymalloc='" + mymalloc + "'"
$ WC "eunicefix=':'"
$ WC "exe_ext='" + exe_ext + "'"
$ WC "extensions='" + extensions + "'"
$ WC "fflushNULL='define'"
$ WC "fflushall='undef'"
$ WC "fpostype='fpos_t'"
$ WC "freetype='void'"
$ WC "full_ar='" + "'"
$ WC "full_csh='" + " '"
$ WC "full_sed='_NLA0:'"
$ WC "gccversion='" + gccversion + "'"
$ WC "gidformat='lu'"
$ WC "gidsign='1'"
$ WC "gidsize='4'"
$ WC "gidtype='" + gidtype + "'"
$ WC "groupstype='Gid_t'"
$ WC "hint='none'"
$ WC "hintfile='" + "'"
$ WC "i16size='" + i16size + "'"
$ WC "i16type='" + i16type + "'"
$ WC "i32size='" + i32size + "'"
$ WC "i32type='" + i32type + "'"
$ WC "i64size='" + i64size + "'"
$ WC "i64type='" + i64type + "'"
$ WC "i8size='" + i8size + "'"
$ WC "i8type='" + i8type + "'"
$ WC "i_arpainet='undef'"
$ WC "i_dbm='undef'"
$ WC "i_dirent='" + i_dirent + "'"
$ WC "i_dlfcn='undef'"
$ WC "i_fcntl='" + i_fcntl + "'"
$ WC "i_float='define'"
$ WC "i_grp='undef'"
$ WC "i_iconv='" + i_iconv +"'"
$ WC "i_ieeefp='undef'"
$ WC "i_inttypes='" + i_inttypes + "'"
$ WC "i_libutil='" + i_libutil + "'"
$ WC "i_limits='define'"
$ WC "i_locale='" + i_locale + "'"
$ WC "i_machcthr='undef'"
$ WC "i_machcthreads='undef'"
$ WC "i_math='define'"
$ WC "i_memory='undef'"
$ WC "i_mntent='undef'"
$ WC "i_ndbm='undef'"
$ WC "i_netdb='" + i_netdb + "'"
$ WC "i_neterrno='define'"
$ WC "i_netinettcp='" + i_netinettcp + "'"
$ WC "i_niin='" + i_niin + "'"
$ WC "i_poll='" + i_poll + "'"
$ WC "i_prot='undef'"
$ WC "i_pthread='define'"
$ WC "i_pwd='undef'"
$ WC "i_rpcsvcdbm='undef'"
$ WC "i_sfio='undef'"
$ WC "i_sgtty='undef'"
$ WC "i_shadow='" + i_shadow + "'"
$ WC "i_socks='" + i_socks + "'"
$ WC "i_stdarg='define'"
$ WC "i_stddef='define'"
$ WC "i_stdlib='define'"
$ WC "i_string='define'"
$ WC "i_sunmath='undef'"
$ WC "i_sysaccess='" + i_sysaccess + "'"
$ WC "i_sysdir='undef'"
$ WC "i_sysfile='" + i_sysfile + "'"
$ WC "i_sysioctl='undef'"
$ WC "i_syslog='" + i_syslog + "'"
$ WC "i_sysmman='undef'"
$ WC "i_sysmode='" + i_sysmode + "'"
$ WC "i_sysmount='undef'"
$ WC "i_sysndir='undef'"
$ WC "i_sysparam='undef'"
$ WC "i_sysresrc='undef'"
$ WC "i_syssecrt='" + i_syssecrt + "'"
$ WC "i_sysselct='undef'"
$ WC "i_sysstat='define'"
$ WC "i_sysstatfs='undef'"
$ WC "i_sysstatvfs='undef'"
$ WC "i_systime='undef'"
$ WC "i_systimek='undef'"
$ WC "i_systimes='undef'"
$ WC "i_systypes='define'"
$ WC "i_sysuio='" + i_sysuio + "'"
$ WC "i_sysun='undef'"
$ WC "i_sysutsname='" + i_sysutsname + "'"
$ WC "i_sysvfs='undef'"
$ WC "i_syswait='undef'"
$ WC "i_termio='undef'"
$ WC "i_termios='undef'"
$ WC "i_time='define'"
$ WC "i_unistd='" + i_unistd + "'"
$ WC "i_ustat='undef'"
$ WC "i_utime='undef'"
$ WC "i_values='undef'"
$ WC "i_varargs='undef'"
$ WC "i_vfork='undef'"
$ WC "inc_version_list='0'"
$ WC "inc_version_list_init='0'"
$ WC "installarchlib='" + installarchlib + "'"
$ WC "installbin='" + installbin + "'"
$ WC "installman1dir='" + installman1dir + "'"
$ WC "installman3dir='" + installman3dir + "'"
$ WC "installprivlib='" + installprivlib + "'"
$ WC "installscript='" + installscript + "'"
$ WC "installsitearch='" + installsitearch + "'"
$ WC "installsitelib='" + installsitelib + "'"
$ WC "installusrbinperl='undef'"
$ WC "intsize='" + intsize + "'"
$ WC "ivdformat='" + ivdformat + "'"
$ WC "ivsize='" + ivsize + "'"
$ WC "ivtype='" + ivtype + "'"
$ WC "known_extensions='" + known_extensions + "'"
$ WC "ld='" + ld + "'"
$ WC "lddlflags='/Share'"
$ WC "ldflags='" + ldflags + "'"
$ WC "lib_ext='" + lib_ext + "'"
$ WC "libc='" + libc + "'"
$ WC "libpth='/sys$share /sys$library'"
$ WC "libs='" + libs + "'"
$ WC "longdblsize='" + longdblsize + "'"
$ WC "longlongsize='" + longlongsize + "'"
$ WC "longsize='" + longsize + "'"
$ WC "lseeksize='4'"
$ WC "lseektype='int'"
$ WC "mab='" + "'"
$ WC "make='" + make + "'"
$ WC "malloctype='void *'"
$ WC "man1ext='rno'"
$ WC "man3ext='rno'"
$ WC "mmaptype=' " + "'"
$ WC "modetype='unsigned int'"
$ WC "multiarch='undef'"
$ WC "mydomain='" + mydomain + "'"
$ WC "myhostname='" + myhostname + "'"
$ WC "myuname='" + myuname + "'"
$ WC "netdb_hlen_type='" + netdb_hlen_type + "'"
$ WC "netdb_host_type='" + netdb_host_type + "'"
$ WC "netdb_name_type='" + netdb_name_type + "'"
$ WC "netdb_net_type='" + netdb_net_type + "'"
$ WC "nveformat='" + nveformat + "'"
$ WC "nvfformat='" + nvfformat + "'"
$ WC "nvgformat='" + nvgformat + "'"
$ WC "nvsize='" + nvsize + "'"
$ WC "nvtype='" + nvtype + "'"
$ WC "o_nonblock=' '"
$ WC "obj_ext='" + obj_ext + "'"
$ WC "old_pthread_create_joinable='" + old_pthread_create_joinable + "'"
$ WC "oldarchlib='" + oldarchlib + "'"
$ WC "oldarchlibexp='" + oldarchlibexp + "'"
$ WC "optimize='" + optimize + "'"
$ WC "osname='" + osname + "'"
$ WC "osvers='" + osvers + "'"
$ WC "otherlibdirs='" + "'"
$ WC "package='" + package + "'"
$ WC "pager='" + pager + "'"
$ WC "patchlevel='" + patchlevel + "'"
$ WC "path_sep='|'"
$ WC "perl_root='" + perl_root + "'" ! VMS specific $trnlnm()
$ WC "perladmin='" + perladmin + "'"
$ WC "perllibs='" + perllibs + "'"
$ WC "pgflquota='" + pgflquota + "'"
$ WC "pidtype='" + pidtype + "'"
$ WC "pm_apiversion='" + version + "'"
$! WC "prefix='" + vms_prefix + "'"
$ WC "prefix='" + prefix + "'"
$ WC "privlib='" + privlib + "'"
$ WC "privlibexp='" + privlibexp + "'"
$ WC "prototype='define'"
$ WC "ptrsize='" + ptrsize + "'"
$ WC "quadkind='" + quadkind + "'"
$ WC "quadtype='" + quadtype + "'" 
$ WC "randbits='31'"
$ WC "randseedtype='" + randseedtype + "'"
$ WC "ranlib='" + "'"
$ WC "rd_nodata=' '"
$ WC "revision='" + revision + "'"
$ WC "sPRId64='" + sPRId64 + "'"
$ WC "sPRIEldbl='" + sPRIEUldbl + "'"
$ WC "sPRIFldbl='" + sPRIFUldbl + "'"
$ WC "sPRIGldbl='" + sPRIGUldbl + "'"
$ WC "sPRIX64='" + sPRIXU64 + "'"
$ WC "sPRIeldbl='" + sPRIeldbl + "'"
$ WC "sPRIfldbl='" + sPRIfldbl + "'"
$ WC "sPRIgldbl='" + sPRIgldbl + "'"
$! WC "sPRIi64='" + sPRIi64 + "'"
$ WC "sPRIo64='" + sPRIo64 + "'"
$ WC "sPRIu64='" + sPRIu64 + "'"
$ WC "sPRIx64='" + sPRIx64 + "'"
$ WC "sSCNfldbl='" + sSCNfldbl + "'"
$ WC "sched_yield='" + sched_yield + "'"
$ WC "seedfunc='" + seedfunc + "'"
$ WC "selectminbits='32'"
$ WC "selecttype='" + selecttype + "'"
$ WC "sh='MCR'"
$ WC "shmattype='" + " '"
$ WC "shortsize='" + shortsize + "'"
$ WC "shrplib='define'"
$ WC "sig_name='" + sig_name + "'"
$ tmp = "sig_name_init='" + sig_name_init + "'"
$ WC/symbol tmp
$ DELETE/SYMBOL tmp
$ WC "sig_num='" + sig_num + "'"
$ WC "sig_num_init='" + sig_num_init + "'"
$ WC "signal_t='" + signal_t + "'"
$ WC "sitearch='" + sitearch + "'"
$ WC "sitearchexp='" + sitearchexp + "'"
$ WC "sitelib='" + sitelib + "'"
$ WC "sitelib_stem='" + sitelib_stem + "'"
$ WC "sitelibexp='" + sitelibexp + "'"
$ WC "sizesize='" + sizesize + "'"
$ WC "sizetype='size_t'"
$ WC "so='" + so + "'"
$ WC "socksizetype='" + socksizetype + "'"
$ WC "spitshell='write sys$output '"
$ WC "src='" + src + "'"
$ WC "ssizetype='int'"
$ WC "startperl=" + startperl ! This one's special--no enclosing single quotes
$ WC "static_ext='" + static_ext + "'"
$ WC "stdchar='" + stdchar + "'"
$ WC "stdio_base='((*fp)->_base)'"
$ WC "stdio_bufsiz='((*fp)->_cnt + (*fp)->_ptr - (*fp)->_base)'"
$ WC "stdio_cnt='((*fp)->_cnt)'"
$ WC "stdio_ptr='((*fp)->_ptr)'"
$ WC "stdio_stream_array=' " + "'"
$ WC "subversion='" + subversion + "'"
$ WC "timetype='" + timetype + "'"
$ WC "u16size='" + u16size + "'"
$ WC "u16type='" + u16type + "'"
$ WC "u32size='" + u32size + "'"
$ WC "u32type='" + u32type + "'"
$ WC "u64size='" + u64size + "'"
$ WC "u64type='" + u64type + "'"
$ WC "u8size='" + u8size + "'"
$ WC "u8type='" + u8type + "'"
$ WC "uidformat='lu'"
$ WC "uidsign='1'"
$ WC "uidsize='4'"
$ WC "uidtype='" + uidtype + "'"
$ WC "uquadtype='" + uquadtype + "'" 
$ WC "use5005threads='" + use5005threads + "'"
$ WC "use64bitall='" + use64bitall + "'"
$ WC "use64bitint='" + use64bitint + "'"
$ WC "usedebugging_perl='" + use_debugging_perl + "'"
$ WC "usedl='" + usedl + "'"
$ WC "useithreads='" + useithreads + "'"
$ WC "uselargefiles='" + uselargefiles + "'"
$ WC "uselongdouble='" + uselongdouble + "'"
$ WC "usemorebits='" + usemorebits + "'"
$ WC "usemultiplicity='" + usemultiplicity + "'"
$ WC "usemymalloc='" + usemymalloc + "'"
$ WC "useperlio='undef'"
$ WC "useposix='false'"
$ WC "usesocks='undef'"
$ WC "usethreads='" + usethreads + "'"
$ WC "usevfork='true'"
$ WC "uvoformat='" + uvoformat + "'"
$ WC "uvsize='" + uvsize + "'"
$ WC "uvtype='" + uvtype + "'"
$ WC "uvuformat='" + uvuformat + "'"
$ WC "uvxformat='" + uvxformat + "'"
$ WC "uvXUformat='" + uvXUformat + "'"
$ WC "vendorarchexp='" + "'"
$ WC "vendorlib_stem='" + "'"
$ WC "vendorlibexp='" + "'"
$ WC "version='" + version + "'"
$ WC "vms_cc_type='" + vms_cc_type + "'" ! VMS specific
$ WC "vms_prefix='" + vms_prefix + "'" ! VMS specific
$ WC "vms_ver='" + vms_ver + "'" ! VMS specific
$ WC "voidflags='15'"
$ WC "xs_apiversion='" + version + "'"
$ WC "CONFIGDOTSH='true'"
$!
$! ##END WRITE NEW CONSTANTS HERE##
$!
$ CLOSE CONFIG
$!
$! Okay, we've gotten here. Build munchconfig.exe
$ COPY/NOLOG [-.vms]munchconfig.c []
$ COPY/NOLOG [-.vms]'Makefile_SH' []
$ 'Perl_CC' munchconfig.c
$ IF Needs_Opt
$ THEN
$   OPEN/WRITE CONFIG []munchconfig.opt
$   IF ccname .EQS. "GCC"
$   THEN
$     WRITE CONFIG "Gnu_CC:[000000]gcclib.olb/library"
$   ENDIF
$   WRITE CONFIG "Sys$Share:VAXCRTL/Share"
$   CLOSE CONFIG
$   'ld' munchconfig.obj,munchconfig.opt/opt
$   DELETE/NOLOG/NOCONFIRM munchconfig.opt;
$ ELSE
$   'ld' munchconfig.obj
$ ENDIF
$ IF F$SEARCH("munchconfig.obj") .NES. "" THEN DELETE/NOLOG/NOCONFIRM munchconfig.obj;
$ IF F$SEARCH("munchconfig.c") .NES. "" THEN DELETE/NOLOG/NOCONFIRM munchconfig.c;
$ IF ccname .EQS. "CXX"
$ THEN
$   CALL Cxx_demangler_cleanup
$ ENDIF
$!
$ IF alldone .EQS. ""
$ THEN
$   cat4 SYS$INPUT:
$   DECK

If you'd like to make any changes to the config.sh file before I begin
to configure things, answer yes to the following question.

$   EOD
$   dflt="n"
$   rp="Do you wish to edit ''basename_config_sh'? [''dflt'] "
$   GOSUB myread
$   IF ans .EQS. "" then ans = dflt
$   IF ans
$   THEN
$     echo4 ""
$     echo4 "Be sure to type LOGOUT after you have edited the file,"
$     echo4 "then this procedure will resume."
$     echo4 ""
$     default = F$ENVIRONMENT("DEFAULT")
$     DIRECTORY 'config_sh'
$     SET DEFAULT [-]
$     SPAWN/WAIT
$     SET DEFAULT 'default'
$   ENDIF
$ ENDIF
$!
$ echo ""
$ echo4 "Adding ''osname' specific preprocessor commands."
$ !
$ ! we need an fdl file
$ CREATE [-]CONFIG.FDL
$ DECK
RECORD
  FORMAT STREAM_LF
$ EOD
$ CREATE /FDL=[-]CONFIG.FDL [-]CONFIG.LOCAL
$ ! First spit out the header info with the local defines (to get
$ ! around the 255 character command line limit)
$ OPEN/APPEND CONFIG [-]config.local
$ IF use_debugging_perl THEN WC "#define DEBUGGING"
$ IF use_two_pot_malloc THEN WC "#define TWO_POT_OPTIMIZE"
$ IF mymalloc THEN WC "#define EMBEDMYMALLOC"
$ IF use_pack_malloc THEN WC "#define PACK_MALLOC"
$ IF use_debugmalloc THEN WC "#define DEBUGGING_MSTATS"
$ IF ccname .EQS. "GCC" THEN WC "#define GNUC_ATTRIBUTE_CHECK"
$ IF (Has_Dec_C_Sockets)
$ THEN
$    WC "#define VMS_DO_SOCKETS"
$    WC "#define DECCRTL_SOCKETS"
$ ELSE
$    IF Has_Socketshr THEN WC "#define VMS_DO_SOCKETS"
$ ENDIF
$! This is VMS-specific for now
$ WC "#''d_setenv' HAS_SETENV"
$ IF d_secintgenv THEN WC "#define SECURE_INTERNAL_GETENV"
$ IF d_alwdeftype THEN WC "#define ALWAYS_DEFTYPES"
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$   WC "#define USE_64_BIT_INT"
$   WC "#define USE_LONG_DOUBLE"
$ ENDIF
$ IF use64bitall .OR. use64bitall .EQS. "define" THEN -
    WC "#define USE_64_BIT_ALL"
$ IF be_case_sensitive THEN WC "#define VMS_WE_ARE_CASE_SENSITIVE"
$ IF d_herrno .EQS. "undef" THEN WC "#define NEED_AN_H_ERRNO"
$ WC "#define HAS_ENVGETENV"
$ WC "#define PERL_EXTERNAL_GLOB"
$ CLOSE CONFIG
$!
$ echo4 "Doing variable substitutions on .SH files..."
$ echo4 "Extracting config.h (with variable substitutions)"
$!
$! Now build the normal config.h
$ DEFINE/USER_MODE sys$output [-]config.main
$ mcr []munchconfig 'config_sh' [-]config_h.sh
$ ! Concatenate them together
$ copy [-]config.local,[-]config.main [-]config.h
$! Clean up
$ DELETE/NOLOG [-]CONFIG.MAIN;*
$ DELETE/NOLOG [-]CONFIG.LOCAL;*
$ DELETE/NOLOG [-]CONFIG.FDL;*
$!
$ IF ccname .EQS. "DEC"
$ THEN
$   DECC_REPLACE = "DECC=decc=1"
$ ELSE
$   DECC_REPLACE = "DECC="
$ ENDIF
$ IF ccname .EQS. "CXX"
$ THEN
$   DECCXX_REPLACE = "DECCXX=DECCXX=1"
$ ELSE
$   DECCXX_REPLACE = "DECCXX="
$ ENDIF
$ IF ccname .EQS. "GCC"
$ THEN
$   GNUC_REPLACE = "GNUC=gnuc=1"
$ ELSE
$   GNUC_REPLACE = "GNUC=" 
$ ENDIF
$ IF Has_Dec_C_Sockets
$ THEN
$   SOCKET_REPLACE = "SOCKET=DECC_SOCKETS=1"
$ ELSE
$   IF Has_Socketshr
$   THEN
$     SOCKET_REPLACE = "SOCKET=SOCKETSHR_SOCKETS=1"
$   ELSE
$     SOCKET_REPLACE = "SOCKET="
$   ENDIF
$ ENDIF
$ IF Use_Threads
$ THEN
$   IF (vms_ver .LES. "6.2")
$   THEN
$     THREAD_REPLACE = "THREAD=OLDTHREADED=1"
$   ELSE
$     THREAD_REPLACE = "THREAD=THREADED=1"
$   ENDIF
$ ELSE
$   THREAD_REPLACE = "THREAD="
$ ENDIF
$ IF mymalloc
$ THEN
$   MALLOC_REPLACE = "MALLOC=MALLOC=1"
$ ELSE
$   MALLOC_REPLACE = "MALLOC="
$ ENDIF
$ echo4 "Extracting ''defmakefile' (with variable substitutions)"
$ DEFINE/USER_MODE sys$output 'UUmakefile'
$ mcr []munchconfig 'config_sh' 'Makefile_SH' "''DECC_REPLACE'" -
 "''DECCXX_REPLACE'" "''ARCH_TYPE'" "''GNUC_REPLACE'" "''SOCKET_REPLACE'" -
 "''THREAD_REPLACE'" "''C_Compiler_Replace'" "''MALLOC_REPLACE'" -
 "''Thread_Live_Dangerously'" "PV=''version'" "FLAGS=FLAGS=''extra_flags'"
$! Clean up after ourselves
$ DELETE/NOLOG/NOCONFIRM []munchconfig.exe;
$ echo4 "Extracting make_ext.com (without variable substitutions)"
$ Create Sys$Disk:[-]make_ext.com
$ Deck/Dollar="$EndOfTpl$"
$!++ make_ext.com
$!   NOTE: This file is extracted as part of the VMS configuration process.
$!   Any changes made to it directly will be lost.  If you need to make any
$!   changes, please edit the template in Configure.Com instead.
$    def = F$Environment("Default")
$    exts1 = F$Edit(p1,"Compress")
$    p2 = F$Edit(p2,"Upcase,Compress,Trim")
$    If F$Locate("MCR ",p2).eq.0 Then p2 = F$Extract(3,255,p2)
$    miniperl = "$" + F$Search(F$Parse(p2,".Exe"))
$    makeutil = p3
$    if f$type('p3') .nes. "" then makeutil = 'p3'
$    targ = F$Edit(p4,"Lowercase")
$    i = 0
$ next_ext:
$    ext = F$Element(i," ",p1)
$    If ext .eqs. " " Then Goto done
$    Define/User_mode Perl_Env_Tables CLISYM_LOCAL
$    miniperl
$    deck
     ($extdir = $ENV{'ext'}) =~ s/::/./g;
     $extdir =~ s#/#.#g;
     if ($extdir =~ /^vms/i) { $extdir =~ s/vms/.vms.ext/i; }
     else                    { $extdir = ".ext.$extdir";   }
     ($ENV{'extdir'} = "[$extdir]");
     ($ENV{'up'} = ('-') x ($extdir =~ tr/././));
$    eod
$    Set Default &extdir
$    redesc = 0
$    If F$Locate("clean",targ) .eqs. F$Length(targ)
$    Then
$      Write Sys$Output ""
$      Write Sys$Output "	Making ''ext' (dynamic)"
$      On Error Then Goto done
$      If F$Search("Descrip.MMS") .eqs. ""
$      Then
$        redesc = 1
$      Else
$        If F$CvTime(F$File("Descrip.MMS","rdt")) .lts. -
            F$CvTime(F$File("Makefile.PL","rdt")) Then redesc = 1
$      EndIf
$    Else
$      Write Sys$Output "''targ'ing ''ext' . . ."
$      On Error Then Continue
$    EndIf
$    If redesc Then -
       miniperl "-I[''up'.lib]" Makefile.PL "INST_LIB=[''up'.lib]" "INST_ARCHLIB=[''up'.lib]"
$    makeutil 'targ'
$    i = i + 1
$    Set Def &def
$    Goto next_ext
$ done:
$    sts = $Status
$    Set Def &def
$    Exit sts
$!-- make_ext.com
$EndOfTpl$
$!
$! Note that the /key qualifier to search, as in:
$! search README.* "=head"/key=(position=1)/window=0/output=extra.pods
$! is not supported on VMS V5.5-2, hence not used in extra_pods.com.
$!
$ echo4 "Extracting extra_pods.com (without variable substitutions)"
$ Create Sys$Disk:[-]extra_pods.com
$ Deck/Dollar="$EOExtra_Pods$"
$!++ extra_pods.com
$!   NOTE: This file is extracted as part of the VMS configuration process.
$!   Any changes made to it directly will be lost.  If you need to make any
$!   changes, please edit the template in Configure.Com instead.
$!   Use FORCE if you've just podified a README.* file on VMS.
$ if f$search("extra.pods") .eqs. "" .or. P1 .eqs. "FORCE" then -
    search README.* "=head"/window=0/output=extra.pods
$ open/read/error=extra_close EXTRA extra.pods
$extra_loop:
$ read/error=extra_close/END_OF_FILE=extra_close EXTRA file
$ file_type = f$parse(file,,,"TYPE",) - "."
$ if file_type .nes. "VMS" .and. file_type .nes. "vms"
$ then
$   pod_file = "[.pod]perl''file_type'.pod"
$   file = file - "''f$parse(file,,,"VERSION",)'"
$   if p1 .eqs. "CLEAN"
$   then if f$search(pod_file) .nes. "" then delete/log 'pod_file';*
$   else
$     do_copy := false
$     if f$search(pod_file) .eqs. ""
$     then do_copy := true
$     else
$       file_rdt = f$cvtime(f$file_attributes(file,"RDT"))
$       pod_file_rdt = f$cvtime(f$file_attributes(pod_file,"RDT"))
$       if file_rdt .GTS. pod_file_rdt then do_copy := true
$     endif
$     if do_copy then copy/log/noconfirm 'file' 'pod_file'
$   endif
$ endif
$ goto extra_loop
$extra_close:
$ close EXTRA
$ if p1 .eqs. "CLEAN" .and. f$search("extra.pods;-1") .nes. "" then -
    purge/nolog extra.pods
$!-- extra_pods.com
$EOExtra_Pods$
$!
d2209 1
a2209 1
$     IF f$type('p1') .nes. "" THEN  Bad_env := SYMBOL
d2229 1
a2229 1
$       WRITE CONFIG " after building, testing, and installing ''package'"
d2246 1
a2246 1
$ echo4 "Checking for dangerous pre-existing global symbols and logical names."
d2261 1
a2261 1
$   echo4 "The perl.cld file is now being written..."
d2264 1
a2264 1
$   IF ((sharedperl) .AND. (F$GETSYI("HW_MODEL") .GE. 1024)) THEN ext := .AXE
d2268 1
a2268 1
$     WRITE CONFIG F$FAO("!_!AS","image ''vms_prefix':[000000]dbgperl''ext'")
d2272 1
a2272 1
$     WRITE CONFIG F$FAO("!_!AS","image ''vms_prefix':[000000]ndbgPerl''ext'")
d2276 1
a2276 1
$     WRITE CONFIG F$FAO("!_!AS","image ''vms_prefix':[000000]perl''ext'")
d2282 1
a2282 1
$ echo4 "The perl_setup.com file is now being written..."
d2297 1
a2297 1
$ WRITE CONFIG "$ define/translation=concealed ''vms_prefix' ''prefix'"
d2299 1
a2299 1
$ IF sharedperl
d2301 1
a2301 1
$   write config "$ if f$getsyi(""HW_MODEL"") .ge. 1024 then ext = "".AXE"""
d2307 3
a2309 3
$     WRITE CONFIG "$ dbgperl :== $''vms_prefix':[000000]dbgPerl'ext'"
$     WRITE CONFIG "$ perl    :== $''vms_prefix':[000000]ndbgPerl'ext'"
$     WRITE CONFIG "$ define dbgPerlShr ''vms_prefix':[000000]dbgPerlShr'ext'"
d2311 2
a2312 2
$     WRITE CONFIG "$ perl :== $''vms_prefix':[000000]Perl'ext'"
$     WRITE CONFIG "$ define PerlShr ''vms_prefix':[000000]PerlShr'ext'"
d2317 1
a2317 1
$     WRITE CONFIG "$ define dbgPerlShr ''vms_prefix':[000000]dbgPerlShr'ext'"
d2319 1
a2319 1
$     WRITE CONFIG "$ define PerlShr ''vms_prefix':[000000]PerlShr'ext'"
d2323 1
a2323 1
$     WRITE CONFIG "$ set command ''vms_prefix':[000000]''packageup'.CLD"
d2326 3
a2328 3
$ WRITE CONFIG "$ define/nolog pod2text ''vms_prefix':[lib.pod]pod2text.com"
$ WRITE CONFIG "$ define/nolog pod2html ''vms_prefix':[lib.pod]pod2html.com"
$ WRITE CONFIG "$ define/nolog pod2man  ''vms_prefix':[lib.pod]pod2man.com"
d2341 1
a2341 1
$   WRITE CONFIG "$ Perldoc  == ""'"+"'Perl' ''vms_prefix':[lib.pod]Perldoc.com -t"""
d2344 1
a2344 1
$   WRITE CONFIG "$ pod2latex == ""'"+"'Perl' ''vms_prefix':[lib.pod]pod2latex.com"""
d2346 2
a2347 2
$   WRITE CONFIG "$!Perlbug  == ""'"+"'Perl' ''vms_prefix':[lib]Perlbug.com"""
$   WRITE CONFIG "$ c2ph     == ""'"+"'Perl' ''vms_prefix':[utils]c2ph.com"""
d2350 1
a2350 1
$     WRITE CONFIG "$ dprofpp     == ""'"+"'Perl' ''vms_prefix':[utils]dprofpp.com"""
d2352 4
a2355 4
$   WRITE CONFIG "$ h2ph     == ""'"+"'Perl' ''vms_prefix':[utils]h2ph.com"""
$   WRITE CONFIG "$ h2xs     == ""'"+"'Perl' ''vms_prefix':[utils]h2xs.com"""
$   WRITE CONFIG "$!perlcc   == ""'"+"'Perl' ''vms_prefix':[utils]perlcc.com"""
$   WRITE CONFIG "$ splain   == ""'"+"'Perl' ''vms_prefix':[utils]splain.com"""
d2357 1
a2357 1
$   WRITE CONFIG "$ Perldoc  == ""Perl ''vms_prefix':[lib.pod]Perldoc.com -t"""
d2360 1
a2360 1
$   WRITE CONFIG "$ pod2latex == ""Perl ''vms_prefix':[lib.pod]pod2latex.com"""
d2362 2
a2363 2
$   WRITE CONFIG "$!Perlbug  == ""Perl ''vms_prefix':[lib]Perlbug.com"""
$   WRITE CONFIG "$ c2ph     == ""Perl ''vms_prefix':[utils]c2ph.com"""
d2366 1
a2366 1
$     WRITE CONFIG "$ dprofpp     == ""Perl ''vms_prefix':[utils]dprofpp.com"""
d2368 4
a2371 4
$   WRITE CONFIG "$ h2ph     == ""Perl ''vms_prefix':[utils]h2ph.com"""
$   WRITE CONFIG "$ h2xs     == ""Perl ''vms_prefix':[utils]h2xs.com"""
$   WRITE CONFIG "$!perlcc   == ""Perl ''vms_prefix':[utils]perlcc.com"""
$   WRITE CONFIG "$ splain   == ""Perl ''vms_prefix':[utils]splain.com"""
d2376 5
a2380 5
$ echo  "The file can be found at:"
$ echo4 "    ''F$SEARCH(file_2_find)'"
$ echo  "Add that file (or an @@ call to it) to your [SY]LOGIN.COM"
$ echo  "when you are satisfied with a successful compilation,"
$ echo  "testing, and installation of your perl."
d2385 1
a2385 1
$   OPEN/WRITE CONFIG 'file_2_find'
d2391 3
a2393 3
$   echo4 "In order to install the ''packageup' verb into DCLTABLES run:"
$   echo4 "    @@ ''F$SEARCH(file_2_find)'"
$   echo4 "after a successful build, test, and install.  Do so with CMKRNL privilege."
d2444 2
a2445 2
$ IF F$GETJPI("","FILCNT").GT.vms_filcnt THEN CLOSE CONFIG
$ IF F$GETJPI("","FILCNT").GT.vms_filcnt
d2457 1
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@a0 1
$! OpenVMS configuration procedure for Perl -- do not attempt to run under DOS
a1 1
$ on control_y then goto clean_up
d43 1
a43 1
$ use_ieee_math = "y"
d429 5
a433 9
$! MANIFEST. has been found and we have set def'ed there.
$! Time to bail out before it's too late, i.e. too deep.
$! Depth check is unnecessary on Alpha VMS V7.2++ (even for ODS-2).
$   tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$   IF (tmp .GES. "7.2") .AND. (F$GETSYI("HW_MODEL") .GE. 1024) THEN GOTO Beyond_depth_check
$! Depth check also unnecessary on ODS 5 (or later) file systems.
$   tmp = F$INTEGER(F$GETDVI(F$ENVIRONMENT("DEFAULT"),"ACPTYPE") - "F11V")
$   IF (tmp .GE. 5) THEN GOTO Beyond_depth_check
$   IF (F$ELEMENT(max_allowed_dir_depth,".",F$ENVIRONMENT("DEFAULT")).nes.".")
d457 1
a457 1
$       IF ( F$SEARCH("[.UU]*.*").NES."" ) THEN DELETE/NOLOG/NOCONFIRM [.UU]*.*;*
a503 5
$!
$!      may not need double dot check on ODS-5 volumes
$       found = F$SEARCH(dirname + file_2_find)
$       IF found .NES. "" THEN GOTO Read_loop_manifest
$!
d578 1
a578 1
$     DELETE/NOLOG/NOCONFIRM MISSING.;
d586 1
a586 9
$ IF F$MODE() .EQS. "BATCH"
$! else it winds up being 512 in batch
$ THEN COLUMNS = 80
$ ELSE COLUMNS = F$GETDVI("SYS$OUTPUT","DEVBUFSIZ")
$ ENDIF
$! "-des" sets SYS$OUTPUT to NL: with a DEVBUFSIZ too large (512 again)
$ IF COLUMNS .GT. 210 THEN COLUMNS = 80
$! not sure if this would actually be needed - it hopefully will not hurt
$ IF COLUMNS .LT. 40 THEN COLUMNS = 40
a591 3
$! The sub_rp splitting is intended to handle long symbols such as the dflt for
$! extensions.
$!
d594 4
a597 1
$ len_rp = F$LENGTH(rp)
d599 1
a599 17
$   IF len_rp .GT. 210
$   THEN
$     i_rp = 0
$   rp_loop:
$       sub_rp = F$EXTRACT(i_rp,COLUMNS,rp)
$       i_rp = i_rp + COLUMNS
$       if i_rp .LT. len_rp THEN echo4 "''sub_rp'"
$     IF i_rp .LT. len_rp THEN GOTO rp_loop
$   ELSE
$   sub_rp = rp
$   ENDIF
$ if (fastread)
$ then
$     echo4 "''sub_rp'"
$ else
$     READ SYS$COMMAND/PROMPT="''sub_rp'" ans
$ endif
d603 3
a605 3
$   echo ""
$   deferred_fastread =1
$   goto myread
d611 1
a611 27
$   deferred_silent = 1
$   goto myread
$     ENDIF
$ if (bool_dflt .nes. "")
$ then
$   if (ans .eqs. "") then ans = bool_dflt
$   ans = f$extract(0,1,f$edit(ans,"collapse,upcase"))
$   if (ans .eqs. "Y" .or. ans .eqs. "1" .or. ans .eqs. "T") 
$   then
$       ans = "Y"
$   else
$       if (ans .eqs. "N" .or. ans .eqs. "0" .or. ans .eqs. "F") 
$       then
$           ans = "N"
$       else
$           echo4 "Input not understood please answer 'Yes' or 'No'"
$           goto myread
$       endif
$   endif
$   bool_dflt = ""
$ else
$   ans = f$edit(ans,"trim,compress")
$   if (ans .eqs. "") then ans = dflt
$   if (f$edit(ans,"upcase") .eqs. "NONE") then ans = ""
$ endif
$ if f$type(deferred_silent) .nes. ""  
$ then
a613 1
$     delete/symbol deferred_silent
d615 1
a615 5
$ if f$type(deferred_fastread) .nes. ""
$ then 
$   fastread = 1
$   delete/symbol deferred_fastread
$ endif
d668 3
a670 4
$       bool_dflt="n"
$       rp="Do you really want to continue? [''bool_dflt'] "
$       fastread_save = fastread
$       fastread := FALSE
d672 1
a672 2
$       fastread = fastread_save
$       delete/symbol fastread_save
d699 2
a700 2
$     bool_dflt = "n"
$     rp = "Would you like to see the instructions? [''bool_dflt'] "
d799 2
a800 3
$ bool_dflt = "n"
$ IF F$TYPE(config_dflt) .NES. "" THEN bool_dflt = config_dflt
$ rp = "Shall I use ''config_sh' for default answers? [''bool_dflt'] "
d802 1
d808 6
a813 2
$!  we do our own parsing of the shell-script stuff
$!  ...and only accept symbols if they're in the | delimited list below
d815 7
a821 43
$   config_symbols0 ="|archlib|archlibexp|bin|binexp|builddir|cf_email|config_sh|installarchlib|installbin|installman1dir|installman3dir|"
$   config_symbols1 ="|installprivlib|installscript|installsitearch|installsitelib|most|oldarchlib|oldarchlibexp|osname|pager|perl_symbol|perl_verb|"
$   config_symbols2 ="|prefix|privlib|privlibexp|scriptdir|sitearch|sitearchexp|sitebin|sitelib|sitelib_stem|sitelibexp|try_cxx|use64bitall|use64bitint|"
$   config_symbols3 ="|usecasesensitive|usedefaulttypes|usedevel|useieee|useithreads|usemultiplicity|usemymalloc|usedebugging_perl|useperlio|usesecurelog|"
$   config_symbols4 ="|usethreads|usevmsdebug|"
$!  
$   open/read CONFIG 'config_sh'
$   rd_conf_loop:
$     read/end=erd_conf_loop CONFIG line
$     line = f$edit(line,"trim")
$     if line .eqs. "" .or. f$extract(0,1,line) .eqs. "#" then goto rd_conf_loop
$     sym = f$element(0,"=",line)
$     if sym .eqs. "=" then goto rd_conf_loop
$     dsym = "|"+sym+"|"
$     k = 0
$     rd_ck_loop:
$         syms = config_symbols'k'
$         j = f$locate(dsym, syms)
$         if j .lt. f$length(syms) then goto erd_ck_loop
$         k = k + 1
$     if k .lt. 5 then goto rd_ck_loop
$     goto rd_conf_loop
$     erd_ck_loop:
$     val = f$element(1,"=",line)
$     val = f$extract(1,f$length(val)-2,val)
$     write sys$output "''sym' = ""''val'"""
$    'sym' = "''val'"
$   goto rd_conf_loop
$   erd_conf_loop:
$   close CONFIG
$   delete/symbol config_symbols0
$   delete/symbol config_symbols1
$   delete/symbol config_symbols2
$   delete/symbol config_symbols3
$   delete/symbol config_symbols4
$   delete/symbol sym
$   delete/symbol val
$   delete/symbol dsym
$   if f$type(usedebugging_perl) .nes. ""
$   then
$       useperldebug = usedebugging_perl
$       delete/symbol usedebugging_perl
$   endif
d824 1
a824 1
$ if f$type(config_dflt) .nes. "" then DELETE/SYMBOL config_dflt
d862 1
a862 2
$   bool_dflt = "n"
$   GOSUB myread
d872 20
d963 1
a963 1
$   bool_dflt = "y"
d965 1
a965 1
$   rp = "(''systz') Is this UTC Time Zone Offset correct? [''bool_dflt'] "
d967 1
a967 1
$   IF ans
a1022 3
$! Please try to use either archname .EQS. "VMS_VAX" or archname .EQS. 
$! "VMS_AXP" from here on to allow cross-platform configuration (e.g.
$! configure a VAX build on an Alpha).
a1035 1
$ dflt = archname
d1046 1
a1046 1
$ bool_dflt = "n"
d1049 1
a1049 1
$ rp = "Will you be sharing your ''vms_prefixup' with ''otherarch'? [''bool_dflt'] "
d1051 5
a1055 1
$ IF .NOT. ans
d1075 1
a1075 1
$   prefix = F$PARSE(prefix,,,,"NO_CONCEAL") - "][" - "000000." - ".000000" - ".;"
d1077 1
a1077 2
$!  Add _ROOT to make install PERL_ROOT differ from build directory.
$   prefix = prefixbase + "_ROOT.]"
a1106 10
$   tmp = perl_root - ".]" + "]"
$ dflt = f$parse(tmp,,,,)
$   IF dflt .eqs. ""
$   THEN
$       echo4 "''tmp' does not yet exist."
$!      create/directory 'tmp'
$   ELSE
$       echo4 "''tmp' already exists."
$   ENDIF
$!
d1108 1
a1108 1
$ bool_dflt = "y"
d1110 1
a1110 1
$ rp = "Skip the remaining """"where install"""" questions? [''bool_dflt'] "
d1112 1
a1112 1
$ IF (.NOT.ans) THEN vms_skip_install = "false"
d1137 4
a1140 1
$   privlib = ans
d1144 3
a1146 6
$ IF F$TYPE(perl_symbol) .EQS. "" THEN perl_symbol := true
$ IF F$TYPE(perl_verb) .EQS. "" THEN perl_verb = ""
$ IF perl_symbol
$ THEN bool_dflt = "y"
$ ELSE bool_dflt = "n"
$ ENDIF
d1155 1
a1155 1
$ rp = "Invoke perl as a global symbol foreign command? [''bool_dflt'] "
d1157 1
a1157 1
$ IF (.NOT.ans) THEN perl_symbol = "false"
d1161 1
a1161 4
$   IF perl_verb .EQS. "DCLTABLES"
$   THEN bool_dflt = "n"
$   ELSE bool_dflt = "y"
$   ENDIF
d1169 1
a1169 1
$   rp = "Invoke perl as a per process command verb? [ ''bool_dflt' ] "
d1171 1
a1171 1
$   IF (.NOT.ans)
a1182 6
$ patchlevel="0"
$ subversion="0"
$ api_revision="0"
$ api_version="0"
$ api_subversion="0"
$ perl_patchlevel="0"
a1190 1
$   got_perl_patchlevel= "false"
a1223 7
$   IF ((F$LOCATE("""DEVEL",line).NE.F$LENGTH(line)).AND.(.NOT.got_perl_patchlevel))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     perl_patchlevel = F$ELEMENT(1,"""",line)
$     perl_patchlevel = perl_patchlevel - "DEVEL"
$     got_perl_patchlevel = "true"
$   ENDIF
d1228 1
a1228 2
       (.NOT. got_api_subversion) .OR. -
       (.NOT. got_perl_patchlevel) -
d1232 6
d1239 1
a1239 2
$ version_patchlevel_string = "version ''patchlevel' subversion ''subversion'"
$ IF got_perl_patchlevel .AND. perl_patchlevel .NES. "0"
d1241 3
a1243 1
$   version_patchlevel_string = "''version_patchlevel_string' patch ''perl_patchlevel'"
a1244 1
$ echo "(You have ''package' ''version_patchlevel_string'.)"
d1274 4
a1277 1
$   archlib = ans
d1315 4
a1318 1
$   sitelib = ans
d1336 4
a1339 1
$   sitearch = ans
d1352 3
a1354 6
$   bin = ans
$!
$!: determine where add-on public executables go
$   IF F$TYPE(sitebin) .NES. ""
$   THEN dflt = sitebin
$   ELSE dflt = "''vms_prefix':[bin.''archname']"
a1355 4
$   rp = "Pathname where the add-on public executables should be installed? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   sitebin = ans
a1374 2
$   IF F$TYPE(sitebin) .EQS. "" THEN -
      sitebin="''vms_prefix':[bin.''archname']"
a1407 2
$ IF F$TYPE(scriptdir) .EQS. "" THEN -
    scriptdir ="''vms_prefix':[utils]"
d1437 2
a1438 3
$ SET NOON
$ DEFINE/USER_MODE SYS$ERROR _NLA0:
$ DEFINE/USER_MODE SYS$OUTPUT _NLA0:
d1441 2
a1442 1
$ SET ON
a1461 1
$   SET NOON
d1464 1
a1487 1
$ SET NOON
a1491 1
$ SET ON
d1700 1
a1700 1
$   IF Dec_C_Version .GE. 60200000 .AND. archname .NES. "VMS_VAX"
d1892 1
a1892 1
$ IF archname .EQS. "VMS_VAX"
a1934 4
$  IF myhostname.eqs."".and. -
      F$TRNLNM("TCPIP$INET_HOST") .nes. "" .and. -
      F$TRNLNM("TCPIP$INET_DOMAIN") .nes. "" THEN - 
     myhostname = F$TRNLNM("TCPIP$INET_HOST") + "." + F$TRNLNM("TCPIP$INET_DOMAIN") 
a1941 1
$ bool_dflt = "y"
d1943 1
a1943 1
$ IF (.not.ans)
a1962 1
$   dflt = mydomain
d1964 1
a1964 1
$   mydomain = ans
d1993 4
a1996 1
$   cf_email = ans
d2014 4
a2017 1
$ perladmin = ans
d2041 1
a2041 1
$!: see if we have sigaction or sigprocmask
d2051 2
a2052 1
$ IF (ccname .EQS. "DEC" .AND. Dec_C_Version .GE. 50200000) .OR. (ccname .EQS. "CXX")
d2069 1
a2069 1
$   ELSE
d2071 1
a2071 1
$   ENDIF
d2077 1
d2081 6
a2086 2
$   IF ans.eqs."decc" THEN Has_Dec_C_Sockets = "T"
$   IF ans.eqs."socketshr" THEN Has_socketshr = "T"
d2096 2
a2097 6
$ bool_dflt = "n"
$ if f$type(usevmsdebug) .nes. "" 
$ then
$   if usevmsdebug .or. usevmsdebug .eqs. "define" then bool_dflt="y"
$ endif
$ rp = "Build a VMS-DEBUG version of Perl? [''bool_dflt'] "
d2099 2
a2100 2
$ use_vmsdebug_perl = ans
$ IF use_vmsdebug_perl
d2102 1
a2102 1
$   usevmsdebug = "define"
d2105 1
a2105 1
$   usevmsdebug = "undef"
d2115 2
a2116 6
$ bool_dflt = "y"
$ if f$type(useperldebug) .nes. "" 
$ then
$   if f$extract(0,1,f$edit(useperldebug,"collapse,upcase")).eqs."N"  .or. useperldebug .eqs. "undef" then bool_dflt="n"
$ endif
$ rp = "Build a DEBUGGING version of Perl? [''bool_dflt'] "
d2118 7
a2124 1
$ use_debugging_perl = ans
d2133 2
a2134 6
$ bool_dflt = "n"
$ if f$type(usemultiplicity) .nes. "" 
$ then
$   if usemultiplicity .or. usemultiplicity .eqs. "define" then bool_dflt = "y"
$ endif
$ rp = "Build Perl for multiplicity? [''bool_dflt'] "
d2136 1
d2147 1
a2147 5
$   bool_dflt = "n"
$   IF F$TYPE(use64bitint) .NES. "" 
$   THEN
$       IF use64bitint .OR. use64bitint .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
d2158 1
a2158 1
$   rp = "Try to use 64-bit integers, if available? [''bool_dflt'] "
d2160 4
a2163 6
$   use64bitint = ans
$!
$   bool_dflt = "n"
$   IF F$TYPE(use64bitall) .NES. "" 
$   THEN
$       IF use64bitall .OR. use64bitall .eqs. "define" THEN bool_dflt = "y"
d2165 1
a2165 11
$   echo ""
$   echo "You may also choose to try maximal 64-bitness.  It means using as much"
$   echo "64-bitness as possible on the platform.  This in turn means even more"
$   echo "binary incompatibilities.  On the other hand, your platform may not"
$   echo "have any more 64-bitness available than what you already have chosen."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default ''dflt'."
$   rp = "Try to use maximal 64-bit support, if available? [''bool_dflt'] "
$   GOSUB myread
$   use64bitall=ans
$   IF use64bitall .AND. .NOT. use64bitint
d2167 1
d2169 15
a2183 3
$     echo "Since you have chosen a maximally 64-bit build, I'm also turning on"
$     echo "the use of 64-bit integers."
$     use64bitint="Y"
d2191 5
a2195 25
$   echo "Perl can be built to take advantage of threads on some systems."
$   echo "To do so, configure.com can be run with -""Dusethreads""."
$   echo ""
$   echo "Note that Perl built with threading support runs slightly slower"
$   echo "and uses more memory than plain Perl. The current implementation"
$   echo "is believed to be stable, but it is fairly new, and so should be"
$   echo "treated with caution."
$   echo ""
$   bool_dflt = "n"
$   if f$type(usethreads) .nes. "" 
$   then 
$       if usethreads .or. usethreads .eqs. "define" then bool_dflt="y"
$   endif
$!  Catch cases where user specified ithreads or 5005threads but
$!  forgot -Dusethreads 
$   if f$type(useithreads) .nes. ""
$   then
$         if useithreads .or. useithreads .eqs. "define" then bool_dflt="y"
$   endif
$   if f$type(use5005threads) .nes. ""
$   then
$         if use5005threads .or. use5005threads .eqs. "define" then bool_dflt="y"
$   endif
$   echo "If this doesn't make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Build a threading Perl? [''bool_dflt'] "
d2197 2
a2198 1
$   if ans
d2201 12
a2212 8
$     ! Shall we do the 5.005-type threads, or IThreads?
$     echo "Since release 5.6, Perl has had two different threading implementations,"
$     echo "the newer interpreter-based version (ithreads) with one interpreter per"
$     echo "thread, and the older 5.005 version (5005threads)."
$     echo "The 5005threads version is effectively unmaintained and will probably be"
$     echo "removed in Perl 5.10, so there should be no need to build a Perl using it"
$     echo "unless needed for backwards compatibility with some existing 5.005threads"
$     echo "code."
d2214 2
a2215 10
$     bool_dflt = "y"
$     if f$type(useithreads) .nes. ""
$     then
$         if useithreads .eqs. "undef" then bool_dflt="n"
$     endif
$     if f$type(use5005threads) .nes. ""
$     then
$         if use5005threads .or. use5005threads .eqs. "define" then bool_dflt="n"
$     endif
$     rp = "Use the newer intepreter-based ithreads? [''bool_dflt'] "
d2217 2
a2218 2
$     use_ithreads=ans
$     if use_ithreads 
d2220 1
d2223 1
d2238 2
a2239 2
$       bool_dflt = "n"
$       rp = "Enable multiple kernel threads and upcalls? [''bool_dflt'] "
d2241 2
a2242 1
$       if ans
d2263 2
a2264 7
$   bool_dflt = be_case_sensitive
$   if f$type(usecasesensitive) .nes. ""
$   then
$       if usecasesensitive .or. usecasesensitive .eqs. "define" then bool_dflt = "y"
$       if f$extract(0,1,f$edit(usecasesensitive,"collapse,upcase")).eqs."N" .or. usecasesensitive .eqs. "undef"  then bool_dflt = "n"
$   endif
$   rp = "Build with case-sensitive symbols? [''bool_dflt'] "
d2266 2
a2267 1
$   be_case_sensitive = ans
d2270 5
a2274 15
$   echo "Perl normally uses IEEE format (T_FLOAT) floating point numbers"
$   echo "internally on Alpha, but if you need G_FLOAT for binary compatibility"
$   echo "with an external library or existing data, you may wish to disable"
$   echo "the IEEE math option."
$   bool_dflt = use_ieee_math
$   if f$type(useieee) .nes. "" 
$   then
$       if useieee .or. useieee .eqs. "define" 
$       then 
$         bool_dflt="y"
$       else
$         bool_dflt="n"
$       endif
$   endif
$   rp = "Use IEEE math? [''bool_dflt'] "
d2276 2
a2277 4
$   use_ieee_math = ans
$ ELSE
$   be_case_sensitive = "n"
$   use_ieee_math = "n"
a2278 4
$ useieee = "undef"
$ usecasesensitive = "undef"
$ if (use_ieee_math) then useieee = "define"
$ if (be_case_sensitive) then usecasesensitive = "define"
d2289 1
d2308 2
a2309 6
$ bool_dflt = "y"
$ if f$type(usesecurelog) .nes. "" 
$ then
$   if f$extract(0,1,f$edit(usesecurelog,"collapse,upcase")).eqs."N" .or. usesecurelog .eqs. "undef" then bool_dflt = "n"
$ endif
$ rp = "Use secure logical name translation? [''bool_dflt'] "
d2311 5
a2315 3
$ d_secintgenv  = ans
$ usesecurelog = "undef"
$ if (d_secintgenv) then usesecurelog = "define"
d2329 2
a2330 6
$ bool_dflt = "n"
$ if f$type(usedefaulttypes) .nes. "" 
$ then
$     if usedefaulttypes .or. usedefaulttypes .eqs. "define" then bool_dflt="y"
$ endif
$ rp = "Always use default file types? [''bool_dflt'] "
d2332 5
a2336 4
$ d_alwdeftype = ans
$ usedefaulttypes = "undef"
$ if (d_alwdeftype) then usedefaulttypes = "define"
$!
d2343 6
a2348 6
$ bool_dflt = "n"
$ IF F$TYPE(usemymalloc) .nes. ""
$ then
$   if usemymalloc .or. usemymalloc .eqs. "define" then bool_dflt = "y"
$ endif
$ rp = "Do you wish to attempt to use the malloc that comes with ''package'? [''bool_dflt'] "
d2350 5
a2354 1
$ mymalloc = ans
d2363 2
a2364 2
$     bool_dflt = "n"
$     rp = "Do you want the debugging memory allocator? [''bool_dflt'] "
d2366 2
a2367 1
$     use_debugmalloc = ans
d2381 1
a2385 47
$ known_extensions = ""
$ xxx = ""
$ OPEN/READ CONFIG 'manifestfound'
$ext_loop:
$   READ/END_OF_FILE=end_ext/ERROR=end_ext CONFIG line
$   IF F$EXTRACT(0,4,line) .NES. "ext/" .AND. -
       F$EXTRACT(0,8,line) .NES. "vms/ext/" THEN goto ext_loop
$   line = F$EDIT(line,"COMPRESS")
$   line = F$ELEMENT(0," ",line)
$   line_len = F$LENGTH(line)
$   IF F$EXTRACT(line_len - 12,12,line) .NES. "/Makefile.PL" THEN goto ext_loop
$   IF F$EXTRACT(0,4,line) .EQS. "ext/" THEN -
      xxx = F$EXTRACT(4,line_len - 16,line)
$   IF xxx .EQS. "DynaLoader" THEN goto ext_loop     ! omit
$   IF xxx .EQS. "SDBM_File/sdbm" THEN goto ext_loop ! sub extension - omit
$   IF xxx .EQS. "Devel/PPPort/harness" THEN goto ext_loop ! sub extension - omit
$   IF F$EXTRACT(0,7,xxx) .EQS. "Encode/" THEN goto ext_loop  ! sub extension - omit
$   IF xxx .EQS. "B/C" THEN goto ext_loop  ! sub extension - omit
$   IF F$EXTRACT(0,8,line) .EQS. "vms/ext/" THEN -
      xxx = "VMS/" + F$EXTRACT(8,line_len - 20,line)
$   known_extensions = known_extensions + " ''xxx'"
$   goto ext_loop
$end_ext:
$ close CONFIG
$ DELETE/SYMBOL xxx
$ known_extensions = F$EDIT(known_extensions,"TRIM,COMPRESS")
$ dflt = known_extensions
$ IF ccname .NES. "DEC" .AND. ccname .NES. "CXX"
$ THEN
$   dflt = dflt - "POSIX"             ! not with VAX C or GCC
$ ENDIF
$ dflt = dflt - "ByteLoader"          ! needs to be ported
$ dflt = dflt - "DB_File"             ! needs to be ported
$ dflt = dflt - "GDBM_File"           ! needs porting/special library
$ dflt = dflt - "IPC/SysV"            ! needs to be ported
$ dflt = dflt - "NDBM_File"           ! needs porting/special library
$ dflt = dflt - "ODBM_File"           ! needs porting/special library
$ dflt = dflt - "Sys/Syslog"          ! needs porting/special library "GDBM_File macro LOG_DEBUG"
$ IF .NOT. Has_socketshr .AND. .NOT. Has_Dec_C_Sockets
$ THEN
$   dflt = dflt - "Socket"            ! optional on VMS
$ ENDIF
$ IF .NOT. use_ithreads THEN dflt = dflt - "threads/shared"
$ IF .NOT. use_ithreads THEN dflt = dflt - "threads"
$ IF .NOT. use_threads  THEN dflt = dflt - "Thread"
$ dflt = F$EDIT(dflt,"TRIM,COMPRESS")
$!
d2394 6
d2402 37
a2438 1
$ extensions = F$EDIT(ans,"TRIM,COMPRESS")
a2489 1
$ on control_y then goto clean_up
d2532 1
a2532 1
$ DELETE/NOLOG/NOCONFIRM Makefile.;
d2565 4
a2568 1
$ pager = ans
a2620 31
$! PerlIO abstraction
$!
$ bool_dflt = "y"
$ IF F$TYPE(useperlio) .NES. ""
$ then
$   if f$extract(0,1,f$edit(useperlio,"collapse,upcase")) .eqs. "N" .or. useperlio .eqs. "undef" then bool_dflt = "n"
$ endif
$ IF .NOT. silent
$ THEN
$   echo "Previous versions of ''package' used the standard IO mechanisms as"
$   TYPE SYS$INPUT:
$   DECK
defined in <stdio.h>.  Versions 5.003_02 and later of perl allow
alternate IO mechanisms via the PerlIO abstraction layer, but the
stdio mechanism is still available if needed.  The abstraction layer
can use AT&T's sfio (if you already have sfio installed) or regular stdio.
Using PerlIO with sfio may cause problems with some extension modules.

$   EOD
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$ ENDIF
$ rp = "Use the PerlIO abstraction layer? [''bool_dflt'] "
$ GOSUB myread
$ IF ans
$ THEN
$   useperlio = "define"
$ ELSE
$   echo "Ok, doing things the stdio way."
$   useperlio = "undef"
$ ENDIF
$!
d2631 1
a2712 5
$   ivdformat="""Ld"""
$   uvuformat="""Lu"""
$   uvoformat="""Lo"""
$   uvxformat="""Lx"""
$   uvXUformat="""LX"""
a2717 15
$   ivdformat="""ld"""
$   uvuformat="""lu"""
$   uvoformat="""lo"""
$   uvxformat="""lx"""
$   uvXUformat="""lX"""
$ ENDIF
$ IF uselongdouble .OR. uselongdouble .EQS. "define"
$ THEN
$   nveformat="""Le"""
$   nvfformat="""Lf"""
$   nvgformat="""Lg"""
$ ELSE
$   nveformat="""e"""
$   nvfformat="""f"""
$   nvgformat="""g"""
d2726 1
a2726 2
$ usemymalloc = "undef"
$ if mymalloc then usemymalloc = "define"
d2730 1
a2730 1
$ IF (sharedperl .AND. archname .EQS. "VMS_AXP")
d2746 1
a2746 1
$ cppstdin="''perl_cc'/noobj/comments=as_is/preprocess=sys$output sys$input"
d2748 1
a2748 1
$ cpprun="''perl_cc'/noobj/comments=as_is/preprocess=sys$output sys$input"
d2764 1
a2764 1
$ IF ((use_threads) .AND. (vms_ver .LES. "6.2"))
d2786 7
a2795 1
$   d_PRIXU64 = "define"
d2797 3
d2801 3
d2818 3
d2822 3
d2829 3
d2833 3
d2849 2
d2854 1
a2854 1
$ IF use_threads
a3058 1
$ WS "#pragma message disable ALL"  ! VAX compilers may have distracting informationals
a3083 31
$ IF d_longdbl .OR. d_longdbl .EQS. "define"
$ THEN
$   d_PRIEUldbl = "define"
$   d_PRIFUldbl = "define"
$   d_PRIGUldbl = "define"
$   d_PRIeldbl = "define"
$   d_PRIfldbl = "define"
$   d_PRIgldbl = "define"
$   sPRIEUldbl = """LE"""
$   sPRIFUldbl = """LF"""
$   sPRIGUldbl = """LG"""
$   sPRIeldbl = """Le"""
$   sPRIfldbl = """Lf"""
$   sPRIgldbl = """Lg"""
$ ELSE
$   d_PRIEUldbl = "undef"
$   d_PRIFUldbl = "undef"
$   d_PRIGUldbl = "undef"
$   d_PRIeldbl = "undef"
$   d_PRIfldbl = "undef"
$   d_PRIgldbl = "undef"
$   sPRIEUldbl = ""
$   sPRIFUldbl = ""
$   sPRIGUldbl = ""
$   sPRIeldbl = ""
$   sPRIfldbl = ""
$   sPRIgldbl = ""
$ ENDIF
$ d_SCNfldbl = d_PRIfldbl
$ sSCNfldbl = sPRIfldbl ! expect consistency
$!
a3170 19
$! do we have getppid()?
$!
$ IF i_unistd .EQS. "define"
$ THEN
$   OS
$   WS "#include <stdio.h>"
$   WS "#include <unistd.h>"
$   WS "int main() {"
$   WS "printf(""%d\n"",getppid());"
$   WS "return(0);"
$   WS "}"
$   CS
$   tmp = "getppid"
$   GOSUB inlibc
$   d_getppid = tmp
$ ELSE
$   d_getppid = "undef"
$ ENDIF
$!
d3563 1
a3563 1
$ WS "place = memchr(""foo"", 47, 3);"
a3624 36
$! Check for strtoq
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "__int64 result;"
$ WS "result = strtoq(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtoq"
$ GOSUB inlibc
$ d_strtoq = tmp
$!
$! Check for strtoq
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <string.h>"
$ WS "int main()"
$ WS "{"
$ WS "__int64 result;"
$ WS "result = strtoq(""123123"", NULL, 10);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "strtoq"
$ GOSUB inlibc
$ d_strtoq = tmp
$!
d3768 37
a3841 37
$! see if sfio.h is available
$! see if sfio library is available
$! Ok, but do we want to use it.
$! IF F$TYPE(usesfio) .EQS. "" THEN usesfio = "undef"
$! IF val .EQS. "define"
$! THEN
$!   IF usesfio .EQS. "define"
$!   THEN dflt = "y"
$!   ELSE dflt = "n"
$!   ENDIF
$!   echo "''package' can use the sfio library, but it is experimental."
$!   IF useperlio .EQS. "undef"
$!   THEN
$!     echo "For sfio also the PerlIO abstraction layer is needed."
$!     echo "Earlier you said you would not want that."
$!   ENDIF
$!   rp="You seem to have sfio available, do you want to try using it? [''dflt'] "
$!   GOSUB myread
$!   IF ans .EQS. "" THEN ans = dflt
$!   IF ans
$!   THEN
$!     echo "Ok, turning on both sfio and PerlIO, then."
$!     useperlio="define"
$!     val="define"
$!   ELSE
$!     echo "Ok, avoiding sfio this time.  I'll use stdio instead."
$!     val="undef"
$!   ENDIF
$! ELSE
$!   IF usesfio .EQS. "define"
$!   THEN
$!     echo4 "Sorry, cannot find sfio on this machine."
$!     echo4 "Ignoring your setting of usesfio=''usesfio'."
$!     val="undef"
$!   ENDIF
$! ENDIF
$!
d4367 1
a4367 1
$     drand01="(((float)rand())*MY_INV_RAND_MAX)"
a4400 1
$   d_getitimer="define"
a4401 5
$   d_mmap="define"
$   d_mprotect="define"
$   d_munmap="define"
$   d_msync="define"
$   d_ualarm="define"
a4402 2
$   d_usleep="define"
$   d_setitimer="define"
a4403 1
$   d_sigprocmask="define"
a4415 1
$   sig_size="36"
d4423 1
a4424 7
$   d_getitimer="undef"
$   d_gettimeod="undef"
$   d_mmap="undef"
$   d_mprotect="undef"
$   d_munmap="undef"
$   d_msync="undef"
$   d_ualarm="undef"
a4425 2
$   d_usleep="undef"
$   d_setitimer="undef"
a4426 1
$   d_sigprocmask="undef"
a4436 1
$   sig_size="19"
a4442 16
$!: see if tzname[] exists
$ OS
$ WS "#include <stdio.h>"
$ WS "#include <time.h>"
$ WS "int main() { extern short tzname[]; printf(""%hd"", tzname[0]); }"
$ CS
$ GOSUB compile_ok
$ IF compile_status .EQ. good_compile
$ THEN
$   d_tzname = "undef"
$   echo4 "tzname[] NOT found."
$ ELSE
$   d_tzname = "define"
$   echo4 "tzname[] found."
$ ENDIF
$ IF F$SEARCH("try.obj") .NES. "" THEN DELETE/NOLOG/NOCONFIRM try.obj;
a4466 1
$   i_langinfo="define"
a4467 6
$   IF vms_ver .GES. "6.2"
$   THEN
$     d_nl_langinfo="define"
$   ELSE
$     d_nl_langinfo="undef"
$   ENDIF
a4483 1
$   i_langinfo="undef"
a4484 1
$   d_nl_langinfo="undef"
d4488 1
a4488 1
$ d_stdio_ptr_lval_nochange_cnt="define"
d4669 1
a4669 1
$   nv_preserves_uv_bits = F$STRING(F$INTEGER(uvsize) * 8)
a4690 1
$   CS
d4692 1
a4692 74
$   nv_preserves_uv_bits = tmp
$ ENDIF
$!
$ echo4 "Checking if kill() uses SYS$FORCEX or can't be called from a signal handler..."
$ kill_by_sigprc = "undef"
$ OS
$ WS "#include <stdio.h>"
$ WS "#include <signal.h>"
$ WS "#include <unistd.h>"
$ WS "void handler1(int s) { printf(""%d"",s); kill(getpid(),2); }"
$ WS "void handler2(int s) { printf(""%d"",s); }"
$ WS "main(){"
$ WS "    printf(""0"");"
$ WS "    signal(1,handler1);"
$ WS "    signal(2,handler2);"
$ WS "    kill(getpid(),1);"
$ WS "    sleep(1);"
$ WS "    printf(""\n"");"
$ WS "}"
$ CS
$ ON ERROR THEN CONTINUE
$ GOSUB compile
$ IF tmp .NES. "012"
$ THEN 
$   echo4 "Yes, it has at least one of those limitations."
$   echo4 "Checking whether we can use SYS$SIGPRC instead..."
$   OS
$   WS "#include <stdio.h>"
$   WS "#include <lib$routines.h>"
$   WS "unsigned long code = 0;"
$   WS "int handler(unsigned long *args) {"
$   WS "    code = args[1];"
$   WS "    return 1;"
$   WS "}"
$   WS "main() { "
$   WS "    int iss, sys$sigprc();"
$   WS "    lib$establish(handler);"
$   WS "    iss = sys$sigprc(0,0,0x1234);"
$   WS "    iss =  ((iss&1)==1 && code == 0x1234);" 
$   WS "    printf(""%d\n"",iss);"
$   WS "}"
$   CS
$   GOSUB compile
$   IF tmp .EQS. "1"
$   THEN
$       echo4 "Yep, we can."
$       kill_by_sigprc = "define"
$!
$!      since SIGBUS and SIGSEGV indistinguishable, make them the same here.
$!      sigusr1 and sigusr2 show up in VMS6.2 and later
$!
$       if  vms_ver .GES. "6.2"
$       then
$           sig_name="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ABRT USR1 USR2"",0"
$           psnwc1="""ZERO"",""HUP"",""INT"",""QUIT"",""ILL"",""TRAP"",""IOT"",""EMT"",""FPE"",""KILL"",""BUS"",""SEGV"",""SYS"","
$           psnwc2="""PIPE"",""ALRM"",""TERM"",""ABRT"",""USR1"",""USR2"",0"
$           sig_name_init = psnwc1 + psnwc2
$           sig_num="0 1 2 3 4 5 6 7 8 9 10 10 12 13 14 15 6 16 17"",0"
$           sig_num_init="0,1,2,3,4,5,6,7,8,9,10,10,12,13,14,15,6,16,17,0"
$           sig_size="19"
$       else
$           sig_name="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ABRT"",0"
$           psnwc1="""ZERO"",""HUP"",""INT"",""QUIT"",""ILL"",""TRAP"",""IOT"",""EMT"",""FPE"",""KILL"",""BUS"",""SEGV"",""SYS"","
$           psnwc2="""PIPE"",""ALRM"",""TERM"",""ABRT"",0"
$           sig_name_init = psnwc1 + psnwc2
$           sig_num="0 1 2 3 4 5 6 7 8 9 10 10 12 13 14 15 6"",0"
$           sig_num_init="0,1,2,3,4,5,6,7,8,9,10,10,12,13,14,15,6,0"
$           sig_size="17"
$       endif
$   ELSE
$       echo4 "Nope, we can't."
$   ENDIF
$ ELSE
$   echo4 "Nope, it doesn't."
d4696 10
d4712 1
a4712 1
$   ccflags="/Include=[]/Standard=Relaxed_ANSI/Prefix=All/Obj=''obj_ext' ''ccflags'"
d4718 1
a4718 1
$   ccflags="/Include=[]/Standard=ANSI/Prefix=All/Obj=''obj_ext' ''ccflags'"
d4722 1
a4722 1
$   optimize="/List/Debug/NoOpt"
d4726 1
a4726 1
$   optimize= "/NoList"
a4756 3
$ WC "_a='" + lib_ext + "'"
$ WC "_exe='" + exe_ext + "'"
$ WC "_o='" + obj_ext + "'"
d4785 4
a4788 7
$ IF use64bitint .OR. use64bitint .EQS. "define"
$ THEN
$!  gcvt() does not work for > 16 decimal places; fallback to sprintf
$   WC "d_Gconvert='sprintf((b),""%.*" + (nvgformat-"""") + ",(n),(x))'"
$ ELSE
$   WC "d_Gconvert='my_gconvert(x,n,t,b)'"
$ ENDIF
d4792 1
a4792 2
$ WC "d_PRIXU64='" + d_PRIXU64 + "'"
$ WC "d_PRId64='" + d_PRId64 + "'"
a4799 1
$ WC "d__fwalk='undef'"
d4810 2
a4812 1
$ WC "d_bsdgetpgrp='undef'"
a4820 1
$ WC "d_class='undef'"
a4826 1
$ WC "d_dbminitproto='undef'"
a4827 1
$ WC "d_dirfd='undef'"
a4843 1
$ WC "d_fchdir='undef'"
a4848 2
$ WC "d_finite='undef'"
$ WC "d_finitel='undef'"
a4850 1
$ WC "d_flockproto='undef'"
a4851 1
$ WC "d_fp_class='undef'"
a4852 3
$ WC "d_fpclass='undef'"
$ WC "d_fpclassify='undef'"
$ WC "d_fpclassl='undef'"
d4862 1
a4862 1
$ WC "d_getcwd='define'"
a4871 1
$ WC "d_getitimer='" + d_getitimer + "'"
d4886 1
a4886 1
$ WC "d_getppid='" + d_getppid + "'"
d4901 1
a4905 2
$ WC "d_isfinite='undef'"
$ WC "d_isinf='undef'"
d4935 1
a4935 1
$ WC "d_mmap='" + d_mmap + "'"
d4937 1
a4937 2
$ WC "d_modfl_pow32_bug='undef'"
$ WC "d_mprotect='" + d_mprotect + "'"
d4945 2
a4946 2
$ WC "d_msync='" + d_msync + "'"
$ WC "d_munmap='" + d_munmap + "'"
a4948 1
$ WC "d_nl_langinfo='" + d_nl_langinfo + "'"
d4950 1
a4950 1
$ WC "nv_preserves_uv_bits='" + nv_preserves_uv_bits + "'"
a4961 2
$ WC "d_procselfexe='undef'"
$ WC "d_pthread_atfork='undef'"
a4976 1
$ WC "d_realpath='undef'"
a4998 1
$ WC "d_setitimer='" + d_setitimer + "'"
a5021 1
$ WC "d_sigprocmask='" + d_sigprocmask + "'"
a5022 2
$ WC "d_sockatmark='undef'"
$ WC "d_sockatmarkproto='undef'"
a5027 4
$ WC "d_sresgproto='undef'"
$ WC "d_sresgproto='undef'"
$ WC "d_sresproto='undef'"
$ WC "d_sresuproto='undef'"
d5034 1
a5035 1
$ WC "d_stdio_ptr_lval_sets_cnt='" + d_stdio_ptr_lval_sets_cnt + "'"
a5043 1
$ WC "d_strftime='define'"
a5047 1
$ WC "d_strtoq='define'"
a5054 1
$ WC "d_syscallproto='undef'"
a5061 1
$ WC "d_time='define'"
a5062 8
$ IF ("''F$EXTRACT(1,3, F$GETSYI(""VERSION""))'".GES."7.0")
$ THEN
$   WC "d_tm_tm_gmtoff='define'"
$   WC "d_tm_tm_zone='define'"
$ ELSE
$   WC "d_tm_tm_gmtoff='undef'"
$   WC "d_tm_tm_zone='undef'"
$ ENDIF
d5064 1
a5064 3
$ WC "d_tzname='" + d_tzname + "'"
$ WC "d_u32align='define'"
$ WC "d_ualarm='" + d_ualarm + "'"
a5068 3
$ WC "d_unordered='undef'"
$ WC "d_usleep='" + d_usleep + "'"
$ WC "d_usleepproto='" + d_usleep + "'"
a5084 3
$ WC "db_version_major='" + "'"
$ WC "db_version_minor='" + "'"
$ WC "db_version_patch='" + "'"
d5094 1
a5094 6
$!
$! The extensions symbol may be quite long
$!
$ tmp = "dynamic_ext='" + extensions + "'"
$ WC/symbol tmp
$ DELETE/SYMBOL tmp
d5097 1
a5097 1
$ WC "embedmymalloc='" + usemymalloc + "'"
d5100 1
a5100 6
$!
$! The extensions symbol may be quite long
$!
$ tmp = "extensions='" + extensions + "'"
$ WC/symbol tmp
$ DELETE/SYMBOL tmp
a5124 2
$ WC "i_crypt='undef'"
$ WC "i_db='undef'"
a5129 2
$ WC "i_fp='undef'"
$ WC "i_fp_class='undef'"
d5131 1
a5133 1
$ WC "i_langinfo='" + i_langinfo + "'"
a5173 1
$ WC "i_syssockio='undef'"
a5200 2
$ WC "installprefix='" + vms_prefix + "'"
$ WC "installprefixexp='" + vms_prefix + ":'"
a5203 1
$ WC "installsitebin='" + sitebin + "'"
d5210 1
a5210 6
$!
$! The known_extensions symbol may be quite long
$!
$ tmp = "known_extensions='" + known_extensions + "'"
$ WC/symbol tmp
$ DELETE/SYMBOL tmp
d5228 1
a5228 1
$ WC "mmaptype='void *'"
a5233 1
$ WC "need_va_copy='undef'"
a5258 3
$ WC "perlpath='" + "''vms_prefix':[000000]Perl''ext'" + "'"
$ WC "perl_symbol='" + perl_symbol + "'"  ! VMS specific
$ WC "perl_verb='" + perl_verb + "'"      ! VMS specific
d5262 2
a5263 2
$ WC "prefix='" + vms_prefix + "'"
$ WC "prefixexp='" + vms_prefix + ":'"
a5265 1
$ WC "procselfexe=' '"
a5288 2
$ WC "scriptdir='" + scriptdir + "'"
$ WC "scriptdirexp='" + scriptdir + "'"  ! use scriptdir for now
a5301 1
$ WC "sig_size='" + sig_size + "'"
a5304 2
$ WC "sitebin='" + sitebin + "'"
$ WC "sitebinexp='" + sitebin + "'"
a5307 2
$ WC "siteprefix='" + vms_prefix + "'"
$ WC "siteprefixexp='" + vms_prefix + ":'"
d5341 1
a5341 4
$ WC "usecasesensitive='" + be_case_sensitive + "'"    ! VMS-specific
$ WC "usedebugging_perl='"+use_debugging_perl+"'"
$ WC "usedefaulttypes='" + usedefaulttypes + "'"    ! VMS-specific
$ WC "usecrosscompile='undef'"
a5342 1
$ WC "useieee='" + useieee + "'"                    ! VMS-specific
d5349 1
a5349 1
$ WC "useperlio='" + useperlio + "'"
a5350 2
$ WC "usereentrant='undef'"
$ WC "usesecurelog='" + usesecurelog + "'"  ! VMS-specific
a5352 1
$ WC "usevendorprefix='" + "'" ! try to say no, though we'll be ignored as of MM 5.90_01
a5353 1
$ WC "usevmsdebug='" + usevmsdebug + "'"     ! VMS-specific
a5359 1
$ WC "vendorarch='" + "'"
a5360 2
$ WC "vendorbin='" + "'"
$ WC "vendorbinexp='" + "'"
a5361 1
$ WC "vendorlib='" + "'"
a5362 2
$ WC "vendorprefix='" + "'"
$ WC "vendorprefixexp='" + "'"
a5363 1
$ WC "version_patchlevel_string='" + version_patchlevel_string + "'"
d5369 1
a5369 116
$ WC "PERL_CONFIG_SH='true'"
$!
$! ## The UNIXy POSIXy reentrantey thingys ##
$! See "Appendix B, Version-Dependency Tables" in the C RTL
$! manual for when assorted _r functions became available.
$!
$ IF use_threads .AND. vms_ver .GES. "7.2"
$ THEN
$   WC "asctime_r_proto='REENTRANT_PROTO_B_SB'"
$   WC "d_asctime_r='define'"
$   WC "ctime_r_proto='REENTRANT_PROTO_B_SB'"
$   WC "d_ctime_r='define'"
$ ELSE
$   WC "asctime_r_proto='0'"
$   WC "d_asctime_r='undef'"
$   WC "ctime_r_proto='0'"
$   WC "d_ctime_r='undef'"
$ ENDIF
$ IF use_threads .AND. vms_ver .GES. "7.3-1"
$ THEN
$   WC "readdir_r_proto='REENTRANT_PROTO_I_TSR'"
$   WC "d_readdir_r='define'"
$ ELSE
$   WC "readdir_r_proto='0'"
$   WC "d_readdir_r='undef'"
$ ENDIF
$ WC "d_crypt_r='undef'"
$ WC "d_ctermid_r='undef'"
$ WC "d_drand48_r='undef'"
$ WC "d_endgrent_r='undef'"
$ WC "d_endhostent_r='undef'"
$ WC "d_endnetent_r='undef'"
$ WC "d_endprotoent_r='undef'"
$ WC "d_endpwent_r='undef'"
$ WC "d_endservent_r='undef'"
$ WC "d_getgrent_r='undef'"
$ WC "d_getgrgid_r='undef'"
$ WC "d_getgrnam_r='undef'"
$ WC "d_gethostbyaddr_r='undef'"
$ WC "d_gethostbyname_r='undef'"
$ WC "d_gethostent_r='undef'"
$ WC "d_getlogin_r='undef'"
$ WC "d_getnetbyaddr_r='undef'"
$ WC "d_getnetbyname_r='undef'"
$ WC "d_getnetent_r='undef'"
$ WC "d_getprotobyname_r='undef'"
$ WC "d_getprotobynumber_r='undef'"
$ WC "d_getprotoent_r='undef'"
$ WC "d_getpwent_r='undef'"
$ WC "d_getpwnam_r='undef'"
$ WC "d_getpwuid_r='undef'"
$ WC "d_getservbyname_r='undef'"
$ WC "d_getservbyport_r='undef'"
$ WC "d_getservent_r='undef'"
$ WC "d_getspnam_r='undef'"
$ WC "d_gmtime_r='undef'"      ! leave undef'd; we use my_gmtime
$ WC "d_localtime_r='undef'"   ! leave undef'd; we use my_localtime
$ WC "d_random_r='undef'"
$ WC "d_readdir64_r='undef'"
$ WC "d_setgrent_r='undef'"
$ WC "d_sethostent_r='undef'"
$ WC "d_setlocale_r='undef'"
$ WC "d_setnetent_r='undef'"
$ WC "d_setprotoent_r='undef'"
$ WC "d_setpwent_r='undef'"
$ WC "d_setservent_r='undef'"
$ WC "d_srand48_r='undef'"
$ WC "d_srandom_r='undef'"
$ WC "d_strerror_r='undef'"
$ WC "d_tmpnam_r='undef'"
$ WC "d_ttyname_r='undef'"
$ WC "ctermid_r_proto='0'"
$ WC "crypt_r_proto='0'"
$ WC "drand48_r_proto='0'"
$ WC "endgrent_r_proto='0'"
$ WC "endhostent_r_proto='0'"
$ WC "endnetent_r_proto='0'"
$ WC "endprotoent_r_proto='0'"
$ WC "endpwent_r_proto='0'"
$ WC "endservent_r_proto='0'"
$ WC "getgrent_r_proto='0'"
$ WC "getgrgid_r_proto='0'"
$ WC "getgrnam_r_proto='0'"
$ WC "gethostbyaddr_r_proto='0'"
$ WC "gethostbyname_r_proto='0'"
$ WC "gethostent_r_proto='0'"
$ WC "getlogin_r_proto='0'"
$ WC "getnetbyaddr_r_proto='0'"
$ WC "getnetbyname_r_proto='0'"
$ WC "getnetent_r_proto='0'"
$ WC "getprotobyname_r_proto='0'"
$ WC "getprotobynumber_r_proto='0'"
$ WC "getprotoent_r_proto='0'"
$ WC "getpwent_r_proto='0'"
$ WC "getpwnam_r_proto='0'"
$ WC "getpwuid_r_proto='0'"
$ WC "getservbyname_r_proto='0'"
$ WC "getservbyport_r_proto='0'"
$ WC "getservent_r_proto='0'"
$ WC "getspnam_r_proto='0'"
$ WC "gmtime_r_proto='0'"
$ WC "localtime_r_proto='0'"
$ WC "random_r_proto='0'"
$ WC "readdir64_r_proto='0'"
$ WC "setgrent_r_proto='0'"
$ WC "sethostent_r_proto='0'"
$ WC "setlocale_r_proto='0'"
$ WC "setnetent_r_proto='0'"
$ WC "setprotoent_r_proto='0'"
$ WC "setpwent_r_proto='0'"
$ WC "setservent_r_proto='0'"
$ WC "srand48_r_proto='0'"
$ WC "srandom_r_proto='0'"
$ WC "strerror_r_proto='0'"
$ WC "tmpnam_r_proto='0'"
$ WC "ttyname_r_proto='0'"
d5409 2
a5410 2
$   bool_dflt="n"
$   rp="Do you wish to edit ''basename_config_sh'? [''bool_dflt'] "
d5412 1
a5467 8
$ IF archname .EQS. "VMS_VAX" .AND. -
     ccname .EQS. "DEC" .AND. -
     ccversion .LE. 50390006
$ THEN
$! Alas this does not help to build Fcntl
$!   WC "#define PERL_IGNORE_FPUSIG SIGFPE"
$ ENDIF
$ IF kill_by_sigprc .EQS. "define" then WC "#define KILL_BY_SIGPRC"
d5479 3
a5481 3
$ DELETE/NOLOG/NOCONFIRM [-]CONFIG.MAIN;*
$ DELETE/NOLOG/NOCONFIRM [-]CONFIG.LOCAL;*
$ DELETE/NOLOG/NOCONFIRM [-]CONFIG.FDL;*
d5512 1
a5512 1
$ IF use_threads
a5536 1
$!
d5545 7
a5551 21
$!   p1 - how to invoke miniperl (passed in from descrip.mms)
$    p1 = F$Edit(p1,"Upcase,Compress,Trim")
$    If F$Locate("MCR ",p1).eq.0 Then p1 = F$Extract(3,255,p1)
$    miniperl = "$" + F$Search(F$Parse(p1,".Exe"))
$!   p2 - how to invoke local make utility (passed in from descrip.mms)
$    makeutil = p2
$    if f$type('p2') .nes. "" then makeutil = 'p2'
$!   p3 - make target (passed in from descrip.mms)
$    targ = F$Edit(p3,"Lowercase")
$    sts = 1
$    extensions = ""
$    open/read CONFIG config.sh
$ find_ext_loop:
$    read/end=end_ext_loop CONFIG line
$    if (f$extract(0,12,line) .NES. "extensions='")
$    then goto find_ext_loop
$    else extensions = f$extract(12,f$length(line),line) - "'"
$    endif
$ end_ext_loop:
$    close CONFIG
$    extensions = f$edit(extensions,"TRIM,COMPRESS")
d5554 2
a5555 2
$    ext = f$element(i," ",extensions)
$    If ext .eqs. " " .or. ext .eqs. "" Then Goto done
d5585 1
a5585 1
       miniperl "-I[''up'.lib]" Makefile.PL "INST_LIB=[''up'.lib]" "INST_ARCHLIB=[''up'.lib]"  "PERL_CORE=1"
d5685 1
a5685 2
$ CALL Bad_environment "EXT"
$ CALL Bad_environment "FOO"
a5686 4
$ CALL Bad_environment "LIST"
$ CALL Bad_environment "MIME"
$ CALL Bad_environment "POSIX"
$ CALL Bad_environment "SYS"
d5688 2
a5689 6
$ CALL Bad_environment "THREAD"
$ CALL Bad_environment "THREADS"
$ CALL Bad_environment "TIME"
$ CALL Bad_environment "TMP"
$ CALL Bad_environment "UNICODE"
$ CALL Bad_environment "UTIL"
d5702 1
a5702 1
$   IF (sharedperl .AND. archname .EQS. "VMS_AXP") THEN ext := .AXE
d5722 1
a5722 12
$!
$! Folks are likely to want to edit perl_setup.com.
$! STMLF RFM plays nicer with ported editors than does VFC.
$!
$ CREATE [-]CONFIG.FDL
$ DECK
RECORD
  FORMAT STREAM_LF
$ EOD
$ CREATE /FDL=[-]CONFIG.FDL 'file_2_find'
$ OPEN/APPEND CONFIG 'file_2_find'
$ DELETE/NOLOG/NOCONFIRM [-]CONFIG.FDL;
d5775 1
a5775 1
$ WRITE CONFIG "$! Symbols for commonly used programs:"
a5791 1
$   WRITE CONFIG "$ libnetcfg == ""'"+"'Perl' ''vms_prefix':[utils]libnetcfg.com"""
a5792 1
$   WRITE CONFIG "$ perlivp  == ""'"+"'Perl' ''vms_prefix':[utils]perlivp.com"""
a5793 1
$   WRITE CONFIG "$ xsubpp   == ""'"+"'Perl' ''vms_prefix':[utils]xsubpp.com"""
a5807 1
$   WRITE CONFIG "$ libnetcfg == ""Perl ''vms_prefix':[utils]libnetcfg.com"""
a5808 1
$   WRITE CONFIG "$ perlivp  == ""Perl ''vms_prefix':[utils]perlivp.com"""
a5809 1
$   WRITE CONFIG "$ xsubpp   == ""Perl ''vms_prefix':[utils]xsubpp.com"""
d5869 3
a5871 3
$   echo4 "Hmm.  I also noted the following information while running:"
$   echo4 ""
$   TYPE/OUTPUT=SYS$ERROR: config.msg
a5876 1
$ SET NOON
a5878 1
$   CLOSE/NOLOG STDOUT
d5880 1
d5882 1
a5882 1
$ CLOSE/NOLOG CONFIG
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d883 1
a883 1
$   config_symbols4 ="|usethreads|usevmsdebug|usefaststdio|"
d2576 2
d2712 1
a2712 6
$ IF osvers .GES. "V6.1"
$ THEN
$   dflt = "type/page=save=10"
$ ELSE
$   dflt = "type/page"
$ ENDIF
a3005 1
$   d_modflproto = "define"
a3025 1
$   d_modflproto = "undef"
a3665 7
$!
$! Check for sys/ioctl.h
$!
$ tmp = "sys/ioctl.h"
$ GOSUB inhdr
$ i_sysioctl = tmp
$!
a4047 23
$! Check for poll
$!
$ if i_poll .eqs. "define"
$ then
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#include <poll.h>"
$   WS "int main()"
$   WS "{"
$   WS "struct pollfd pfd;"
$   WS "int count=poll(&pfd,1,0);"
$   WS "exit(0);"
$   WS "}"
$   CS
$   tmp = "poll"
$   GOSUB inlibc
$   d_poll = tmp
$ else
$   d_poll = "undef"
$ endif
$!
a4556 5
$! Check for pthread_attr_setscope and PTHREAD_SCOPE_SYSTEM.
$! (The actual test is to be written.)
$!
$ d_pthread_attr_setscope="undef"
$!
d4680 1
a4680 1
$   sig_name="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ABRT USR1 USR2 SPARE18 SPARE19 CHLD CONT STOP TSTP TTIN TTOU DEBUG SPARE27 SPARE28 SPARE29 SPARE30 SPARE31 SPARE32 RTMIN RTMAX"
d4685 1
a4685 1
$   sig_num="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 6 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 64"
d4687 1
d4712 1
a4712 1
$   sig_name="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ABRT USR1 USR2"
d4716 1
a4716 1
$   sig_num="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 6 16 17"
d4718 1
a4758 1
$   d_faststdio="define"
a4782 1
$   d_faststdio="undef"
a4796 1
$ usefaststdio="define"
d5054 1
a5054 1
$           sig_name="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ABRT USR1 USR2"
d5058 2
a5059 2
$           sig_num="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 6 16 17"
$           sig_num_init="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,6,16,17,0"
d5062 1
a5062 1
$           sig_name="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ABRT"
d5066 2
a5067 2
$           sig_num="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 6"
$           sig_num_init="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,6,0"
a5181 1
$ WC "d_aintl='undef'"
a5202 1
$ WC "d_copysignl='define'"
a5291 1
$ WC "d_ilogbl='undef'"
a5328 1
$ WC "d_modflproto='" + d_modflproto + "'"
a5340 1
$ WC "d_nanosleep='undef'"
d5355 1
a5355 1
$ WC "d_poll='" + d_poll + "'"
a5357 1
$ WC "d_pthread_attr_setscope='" + d_pthread_attr_setscope + "'"
a5381 1
$ WC "d_scalbnl='undef'"
a5443 1
$ WC "d_faststdio='" + d_faststdio + "'"
d5603 1
a5603 1
$ WC "i_sysioctl='" + i_sysioctl + "'"
d5708 1
a5708 1
$ WC "perlpath='" + "''vms_prefix':[000000]Perl''exe_ext'" + "'"
a5805 1
$ WC "usefaststdio='" + usefaststdio + "'"
d5862 8
a5901 1
$ WC "d_readdir_r='define'"	! always defined; we roll our own
a5946 1
$ WC "readdir_r_proto='REENTRANT_PROTO_I_TSR'"  ! always defined; we roll our own
d6226 1
a6226 1
$ file_type = f$edit(f$parse(file,,,"TYPE",),"LOWERCASE") - "."
d6242 1
a6242 2
$     ! wacky method to preserve case on ODS-5 even when parse style is traditional
$     if do_copy then mcr sys$disk:[]miniperl.exe -e "exit 0+$^E unless File::Copy::rmscopy(q{''file'}, q{''pod_file'});"
a6296 1
$ CALL Bad_environment "COMP"
d6365 2
a6366 1
$ IF F$LOCATE(".]",prefix) .EQ. F$LENGTH(prefix) THEN prefix = prefix - "]" + ".]" 
d6371 1
a6371 1
$ WRITE CONFIG "$ if f$getsyi(""HW_MODEL"") .ge. 1024 then ext = "".AXE"""
a6374 1
$   perl_setup_perl = "'" + "'perl'" ! triple quoted foreign command symbol
d6377 3
a6379 3
$     WRITE CONFIG "$ dbgperl :== $''vms_prefix':[000000]dbgperl'ext'"
$     WRITE CONFIG "$ perl    :== $''vms_prefix':[000000]ndbgperl'ext'"
$     WRITE CONFIG "$ define dbgperlshr ''vms_prefix':[000000]dbgperlshr'ext'"
d6382 1
a6382 1
$     WRITE CONFIG "$ define perlshr ''vms_prefix':[000000]perlshr'ext'"
a6384 1
$   perl_setup_perl = "perl" ! command verb
d6387 1
a6387 1
$     WRITE CONFIG "$ define dbgperlshr ''vms_prefix':[000000]dbgperlshr'ext'"
d6389 1
a6389 1
$     WRITE CONFIG "$ define perlshr ''vms_prefix':[000000]perlshr'ext'"
d6409 40
a6448 29
$ WRITE CONFIG "$ c2ph       == """ + perl_setup_perl + " ''vms_prefix':[utils]c2ph.com"""
$ WRITE CONFIG "$ cpan       == """ + perl_setup_perl + " ''vms_prefix':[utils]cpan.com"""
$ IF F$LOCATE("Devel::DProf",extensions) .LT. F$LENGTH(extensions)
$ THEN
$ WRITE CONFIG "$ dprofpp    == """ + perl_setup_perl + " ''vms_prefix':[utils]dprofpp.com"""
$ ENDIF 
$ WRITE CONFIG "$ enc2xs     == """ + perl_setup_perl + " ''vms_prefix':[utils]enc2xs.com"""
$ WRITE CONFIG "$!find2perl  == """ + perl_setup_perl + " ''vms_prefix':[utils]find2perl.com"""
$ WRITE CONFIG "$ h2ph       == """ + perl_setup_perl + " ''vms_prefix':[utils]h2ph.com"""
$ WRITE CONFIG "$ h2xs       == """ + perl_setup_perl + " ''vms_prefix':[utils]h2xs.com"""
$ WRITE CONFIG "$ libnetcfg  == """ + perl_setup_perl + " ''vms_prefix':[utils]libnetcfg.com"""
$ WRITE CONFIG "$!perlbug    == """ + perl_setup_perl + " ''vms_prefix':[lib]perlbug.com"""
$ WRITE CONFIG "$!perlcc     == """ + perl_setup_perl + " ''vms_prefix':[utils]perlcc.com"""
$ WRITE CONFIG "$ perldoc    == """ + perl_setup_perl + " ''vms_prefix':[lib.pod]perldoc.com -t"""
$ WRITE CONFIG "$ perlivp    == """ + perl_setup_perl + " ''vms_prefix':[utils]perlivp.com"""
$ WRITE CONFIG "$ piconv     == """ + perl_setup_perl + " ''vms_prefix':[utils]piconv.com"""
$ WRITE CONFIG "$ pl2pm      == """ + perl_setup_perl + " ''vms_prefix':[utils]pl2pm.com"""
$ WRITE CONFIG "$ pod2html   == """ + perl_setup_perl + " pod2html"""
$ WRITE CONFIG "$ pod2latex  == """ + perl_setup_perl + " ''vms_prefix':[lib.pod]pod2latex.com"""
$ WRITE CONFIG "$ pod2text   == """ + perl_setup_perl + " pod2text"""
$ WRITE CONFIG "$!pod2man    == """ + perl_setup_perl + " pod2man"""
$ WRITE CONFIG "$ pod2usage  == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2usage.com"""
$ WRITE CONFIG "$ podchecker == """ + perl_setup_perl + " ''vms_prefix':[utils]podchecker.com"""
$ WRITE CONFIG "$ podselect  == """ + perl_setup_perl + " ''vms_prefix':[utils]podselect.com"""
$ WRITE CONFIG "$ psed       == """ + perl_setup_perl + " ''vms_prefix':[utils]psed.com"""
$ WRITE CONFIG "$ pstruct    == """ + perl_setup_perl + " ''vms_prefix':[utils]pstruct.com"""
$ WRITE CONFIG "$ s2p        == """ + perl_setup_perl + " ''vms_prefix':[utils]s2p.com"""
$ WRITE CONFIG "$ splain     == """ + perl_setup_perl + " ''vms_prefix':[utils]splain.com"""
$ WRITE CONFIG "$ xsubpp     == """ + perl_setup_perl + " ''vms_prefix':[utils]xsubpp.com"""
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@a934 1
$!     echo "     ","VMS_IA64"
d1108 1
a1108 1
$ IF (F$GETSYI("HW_MODEL") .LT. 1024 .AND. F$GETSYI("HW_MODEL") .GT. 0)
d1111 1
a1111 1
$   otherarch = "an Alpha or IA64"
d1115 2
a1116 10
$   IF (F$GETSYI("ARCH_TYPE") .EQ. 2)
$   THEN
$       archname = "VMS_AXP"
$       otherarch = "a VAX or IA64"
$       arch_type = "ARCH-TYPE=__AXP__"
$   ELSE
$       archname = "VMS_IA64"
$       otherarch = "a VAX or Alpha"
$       arch_type = "ARCH-TYPE=__IA64__"
$   ENDIF
d1118 1
a1144 4
$   IF (archname.EQS."VMS_IA64")
$   THEN
$     macros = macros + """IXE=1"","
$   ENDIF
d1584 1
a1584 2
$   IF (F$LOCATE("DEC",line).NE.F$LENGTH(line)).or.(F$LOCATE("Compaq",line).NE.F$LENGTH(line)) -
    .or.(F$LOCATE("hp",line).NE.F$LENGTH(line))
d1718 1
a1718 2
$   IF (F$LOCATE("dec",ans).NE.F$LENGTH(ans)).or.(F$LOCATE("compaq",ans).NE.F$LENGTH(ans)) -
    .or.(F$LOCATE("hp",ans).NE.F$LENGTH(ans))
d2005 1
a2005 6
$   IF archname .EQS. "VMS_AXP"
$   THEN
$       archsufx = "AXP"
$   ELSE
$       archsufx = "IA64"
$   ENDIF
d2252 1
a2252 1
$ IF (archname.NES."VMS_VAX").and.("''f$extract(1,3, f$getsyi(""version""))'".ges."7.1")
d2357 2
a2358 2
$     ! Are they on VMS 7.1 on an alpha or itanium?
$     if (archname.nes."VMS_VAX").and.("''f$extract(1,3, f$getsyi(""version""))'".ges."7.1")
d2379 1
a2379 1
$ IF archname .NES. "VMS_VAX"
d2943 5
a2947 14
$   IF (sharedperl .AND. archname .EQS. "VMS_IA64")
$   THEN
$     obj_ext=".ibj"
$     so="ixe"
$     dlext="ixe"
$     exe_ext=".ixe"
$     lib_ext=".ilb"
$   ELSE
$     obj_ext=".obj"
$     so="exe"
$     dlext="exe"
$     exe_ext=".exe"
$     lib_ext=".olb"
$   ENDIF
d5084 1
a5084 7
$   IF (F$EXTRACT(0,7,archname) .EQS. "VMS_AXP")
$   THEN
$     GOSUB compile
$   ELSE
$     ! Causes SS$_BADSTACK on OpenVMS I64 v8.1 (but hey, it was undocumented)
$     tmp = "0"	
$   ENDIF
d6369 1
a6369 2
$   IF (sharedperl .AND. F$EXTRACT(0,7,archname) .EQS. "VMS_AXP") THEN ext := .AXE
$   IF (sharedperl .AND. F$EXTRACT(0,8,archname) .EQS. "VMS_IA64") THEN ext := .IXE
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d883 1
a883 1
$   config_symbols4 ="|usethreads|usevmsdebug|usefaststdio|usemallocwrap|"
a2509 14
$! determine whether to use malloc wrapping
$ echo ""
$ bool_dflt = "y"
$ IF F$TYPE(usemallocwrap) .nes. ""
$ then
$   if .NOT. usemallocwrap .or. usemallocwrap .eqs. "undef" then bool_dflt = "n"
$ endif
$ rp = "Do you wish to wrap malloc calls to protect against potential overflows? [''bool_dflt'] "
$ GOSUB myread
$ IF ans
$ THEN usemallocwrap = "define"
$ ELSE usemallocwrap = "undef"
$ ENDIF
$!
a4535 17
$! Check for nanosleep
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <time.h>"
$ WS "int main()"
$ WS "{"
$ WS "int asleep = nanosleep(NULL,NULL);"
$ WS "exit(0);"
$ WS "}"
$ CS
$ tmp = "nanosleep"
$ GOSUB inlibc
$ d_nanosleep = tmp
$!
d5112 7
a5118 2
$   ON ERROR THEN CONTINUE
$   GOSUB compile
a5201 1
$ WC "PERL_API_REVISION='" + api_revision + "'"
d5420 1
a5420 1
$ WC "d_nanosleep='" + d_nanosleep + "'"
a5756 1
$ WC "usemallocwrap='" + usemallocwrap + "'"
d5796 1
d5927 1
d6451 1
a6451 2
$ WRITE CONFIG "$ if f$getsyi(""ARCH_TYPE"") .eq. 2 then ext = "".AXE"""
$ WRITE CONFIG "$ if f$getsyi(""ARCH_TYPE"") .eq. 3 then ext = "".IXE"""
d6498 1
a6498 1
$ WRITE CONFIG "$ find2perl  == """ + perl_setup_perl + " ''vms_prefix':[utils]find2perl.com"""
a6500 1
$ WRITE CONFIG "$ instmodsh  == """ + perl_setup_perl + " ''vms_prefix':[utils]instmodsh.com"""
d6502 1
a6502 1
$ WRITE CONFIG "$ perlbug    == """ + perl_setup_perl + " ''vms_prefix':[lib]perlbug.com"""
d6508 1
a6508 1
$ WRITE CONFIG "$ pod2html   == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2html"""
d6510 2
a6511 2
$ WRITE CONFIG "$ pod2text   == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2text"""
$ WRITE CONFIG "$!pod2man    == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2man"""
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@a46 1
$ unlink_all_versions = "n"
d883 1
a883 1
$   config_symbols4 ="|usethreads|usevmsdebug|usefaststdio|usemallocwrap|unlink_all_versions|"
a2447 24
$! Unlink all versions?
$ echo ""
$ echo "By default, Perl's unlink() provides VMS-like behavior and only"
$ echo "deletes the latest version of a file.  Enabling this option builds"
$ echo "Perl so that unlink() deletes all versions of a file."
$ bool_dflt = unlink_all_versions
$ if f$type(unlink_all_versions) .nes. ""
$ then
$       if unlink_all_versions .or. unlink_all_versions .eqs. "define"
$       then
$         bool_dflt="y"
$       else
$         bool_dflt="n"
$       endif
$ endif
$ rp = "Make unlink() delete all versions of a file? [''bool_dflt'] "
$ GOSUB myread
$ unlink_all_versions = ans
$ IF unlink_all_versions
$ THEN
$     d_unlink_all_versions = "define"
$ ELSE
$     d_unlink_all_versions = "undef"
$ ENDIF
d5597 1
a5597 1
$ WC "d_unlink_all_versions='" + d_unlink_all_versions + "'"	! VMS-specific
a6168 2
$ IF unlink_all_versions .OR. unlink_all_versions .EQS. "define" THEN -
    WC "#define UNLINK_ALL_VERSIONS"
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d40 1
a40 1
$ ld = "Link/nodebug"
a47 1
$ builder = "MMK"
a50 2
$ uselargefiles = "n"
$ usesitecustomize = "n"
a57 1
$ nonxs_ext = ""
a508 2
$       tmp = F$PARSE(file_2_find + ";",,,,"SYNTAX_ONLY")
$       IF F$SEARCH(tmp) .NES. "" THEN file_2_find = tmp
d790 1
a790 6
$   if (fastread)
$   then
$     echo4 ""
$   else
$     READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
$   endif
d800 1
a800 6
$   if (fastread)
$   then
$     echo4 ""
$   else
$     READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
$   endif
d821 1
a821 6
$   if (fastread)
$   then
$     echo4 ""
$   else
$     READ SYS$COMMAND/PROMPT="Type carriage return to continue " ans
$   endif
d840 1
a840 1
$!: determine whether symbolic links are supported !sfn !jem- further down
d884 1
a884 2
$   config_symbols4 ="|usethreads|usevmsdebug|usefaststdio|usemallocwrap|unlink_all_versions|uselargefiles|usesitecustomize|"
$   config_symbols5 ="|buildmake|builder|"
d900 1
a900 1
$     if k .lt. 6 then goto rd_ck_loop
a914 1
$   delete/symbol config_symbols5
a1355 12
$!
$ IF F$SEARCH("[-].patch") .NES. ""
$ THEN
$   SET NOON
$   OPEN/READ PATCH [-].patch
$   READ PATCH line
$   CLOSE PATCH
$   tmp = F$EDIT(line,"COLLAPSE")
$   SET ON
$   IF tmp .GT. perl_patchlevel then perl_patchlevel = tmp
$ ENDIF
$!
d1455 1
a1455 1
$   ELSE dflt = "/''vms_prefix'"
d1483 1
a1483 1
      bin="/''vms_prefix'"
d1598 1
a1598 1
    .or.(F$LOCATE("HP",F$EDIT(line,"UPCASE")).NE.F$LENGTH(line))
d1674 1
a1674 1
$   link/nodebug ccvms.obj
d1805 1
a1805 1
$   link/nodebug deccvers.obj
d1902 1
a1902 1
$         link/nodebug gccvers.obj,'gcclib_olb',SYS$LIBRARY:VAXCRTL/Library
d1905 1
a1905 1
$         link/nodebug gccvers.obj,'gcclib_olb'
d1912 1
a1912 1
$       link/nodebug gccvers.obj,GCCVERS.OPT/OPT,'gcclib_olb'
d2280 1
a2280 1
$   echo "You have natively 64-bit long integers."
d2283 3
a2285 1
$   echo "on some systems, To do so, Configure can be run with -Duse64bitint."
d2288 1
a2288 1
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
d2304 1
a2304 1
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
a2312 1
$     echo "I am also setting the default to use large files if available."
d2315 1
a2315 23
$!
$   bool_dflt = use64bitall
$   IF F$TYPE(uselargefiles) .NES. "" 
$   THEN
$       IF uselargefiles .OR. uselargefiles .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "Perl can be built to understand large files (files larger than 2 gigabytes)"
$   echo "on some systems.  To do so, Configure can be run with -Duselargefiles."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to understand large files, if available? [''bool_dflt'] "
$   GOSUB myread
$   uselargefiles=ans
$!
$ ENDIF ! not VAX && >= 7.1
$!
$ IF usesitecustomize .OR. usesitecustomize .eqs. "define" 
$ THEN 
$       usesitecustomize = "define"
$ ELSE
$       usesitecustomize = "undef"
$ ENDIF
d2661 1
a2661 2
$ orig_dflt = f$edit(builder,"UPCASE")
$ if orig_dflt .eqs. "" then orig_dflt = "MMK"
d2810 1
a2810 1
$   extra_flags = "''extra_flags'" + "/float=ieee/ieee=denorm"
d2951 1
d2962 1
a2986 6
$ IF uselargefiles .OR. uselargefiles .EQS. "define"
$ THEN
$   uselargefiles = "define"
$ ELSE
$   uselargefiles = "undef"
$ ENDIF
a3658 30
$! Check to see if fseeko exists
$!
$ OS
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "FILE *f=NULL;"
$ WS "fseeko(f,(off_t)0,SEEK_SET);"
$ WS "return(0);"
$ WS "}"
$ CS
$ tmp = "fseeko"
$ GOSUB inlibc
$ d_fseeko = tmp
$!
$! Check to see if ftello exists
$!
$ OS
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "FILE *f=NULL; off_t o=0;"
$ WS "o=ftello(f);"
$ WS "return(0);"
$ WS "}"
$ CS
$ tmp = "ftello"
$ GOSUB inlibc
$ d_ftello = tmp
$!
d3949 18
a4710 192
$! Check for _LARGEFILE capability.
$!
$ off_t_size = 4
$ OS
$ WS "#define _LARGEFILE"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "printf(""%d\n"", sizeof(off_t));"
$ WS "return(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ IF link_status .EQ. good_link
$ THEN
$   GOSUB just_mcr_it
$   off_t_size = tmp
$ ENDIF
$ echo "Your off_t size is ''off_t_size' bytes when _LARGEFILE is defined."
$ IF off_t_size .ne. 8 .AND. (uselargefiles .OR. uselargefiles .eqs. "define")
$ THEN
$   echo4 "You configured with -Duselargefiles but your CRTL does not support _LARGEFILE."
$   echo4 "I'm disabling large file support."
$   uselargefiles = "undef"
$ ENDIF
$!
$! Tests for hard link, symbolic links, and 7.3 + CRTL features
$!
$  d_lchown = "undef"
$  d_link = "undef"
$  d_lstat = "undef"
$  d_readlink = "undef"
$  d_symlink = "undef"
$  d_realpath = "undef"
$  tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$!
$! Hard link support has been present since 7.3-1 except for the
$! easy to use DCL test to see if hardlinks are enabled on the build
$! disk.  That would require more work to test, and I am only testing
$! this on 8.2, so that is why the 8.2 test.
$!
$  IF (tmp .GES. "8.2") .AND. (f$getsyi("HW_MODEL") .GE. 1024)
$  THEN
$   IF f$getdvi("SYS$DISK","HARDLINKS_SUPPORTED")
$   THEN
$       echo "I Found 64 bit OpenVMS 8.2 or later, and hard links enabled on build disk."
$	echo "I will build with hard link support"
$	d_link = "define"
$   ELSE
$	echo "I Found 64 bit OpenVMS 8.2 or later, and hard links disabled on build disk."
$	echo "I will not build with hard link support."
$   ENDIF
$  ELSE
$    echo4 "I can not dected if your CRTL and build disk support hard links."
$    echo4 "I am disabling hard link support."
$  ENDIF
$!
$  IF uselargefiles .OR. uselargefiles .eqs. "define"
$  THEN
$    IF (tmp .GES. "8.2") .AND. (f$getsyi("HW_MODEL") .GE. 1024)
$    THEN
$      echo4 -
   "Looking for the realpath() function to indicate symbolic link support..."
$      OS
$!      WS "#include <stdlib.h>"
$      WS "void exit(int foo);"
$      WS "char *realpath(const char *file_name, char * resolved_name, ...);"
$      WS "int main()"
$      WS "{"
$      WS "char result[255];"
$      WS "realpath(""foo"",result);"
$      WS "exit(0);"
$      WS "}"
$      CS
$      GOSUB link_ok
$      IF compile_status .EQ. good_compile .AND. link_status .EQ. good_link
$      THEN
$        echo -
           "Found realpath() which indicates symbolic link support is present."
$	 d_lchown = "define"
$	 d_lstat = "define"
$	 d_readlink = "define"
$	 d_symlink = "define"
$!	 d_realpath = "define" ! Perl will not put it in the config.h file?
$!	Perl apparently does not use a built in realpath() on other platforms,
$!      but there is a severe performance penatly on OpenVMS to use the Perl
$!      script that implements a realpath().  The d_symlink symbol is used
$!      as a replacement for the d_realpath since they are related and both
$!      were activated by the CRTL at the same time.
$!
$	 ELSE
$	  echo4 "Your system does not support symbolic links."
$	  echo4 "I am disabling symbolic link support."
$	ENDIF
$    ELSE
$       echo4 "Your system does not support symbolic links."
$       echo4 "I am disabling symbolic link support."
$    ENDIF
$  ELSE
$    IF (tmp .GES. "8.2") .AND. (f$getsyi("HW_MODEL") .GE. 1024)
$    THEN
$       echo4 "-duselargefiles is required for symbolic link support."
$       echo4 "You did not specify that, so I am disabling symbolic link support."
$    ENDIF
$  ENDIF
$!
$!
$! Check for grp.h -- should be 7.3 and later, but test to be sure
$!
$ tmp = "grp.h"
$ GOSUB inhdr
$ i_grp = tmp
$!
$! VMS V7.3-2 powered options
$! We know that it is only available for V7.3-2 and later on 64 bit platforms.
$! Only implementing right now on 8.2 because that is what I am testing.
$!
$  d_getgrgid_r = "undef"
$  getgrgid_r_proto = "0"
$  d_getgrnam_r = "undef"
$  getgrnam_r_proto = "0"
$  d_getpgid = "undef"
$  d_getpgrp = "undef"
$! N.B.  We already have home-grown thread-safe versions of
$!       getpwnam and getpwuid -- no need to use CRTL versions
$  d_getpwnam_r = "undef"
$  getpwnam_r_proto = "0"
$  d_getpwuid_r = "undef"
$  getpwuid_r_proto = "0"
$  d_setgrent = "undef"
$  d_ttyname_r = "undef"
$  ttyname_r_proto = "0"
$  tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$  if (tmp .GES. "8.2") .AND. (f$getsyi("HW_MODEL") .GE. 1024)
$  then
$    echo "Found 64 bit OpenVMS 8.2, will build with V7.3-2 routines"
$    d_getgrgid_r = "define"
$    getgrgid_r_proto = "1"
$    d_getgrnam_r = "define"
$    getgrnam_r_proto = "1"
$    if d_symlink .or. d_symlink .EQS. "define"
$    then
$!	 FIXME: Need to find how to activate this.
$!       d_getpgid = "define"
$!       d_getpgrp = "define"
$    endif
$    d_setgrent = "define"
$    d_ttyname_r = "define"
$    ttyname_r_proto = "1"
$  endif
$!
$! VMS V7.3-2 powered options
$! We know that it is only available for V7.3-2 and later on 64 bit platforms.
$! Only implementing right now on 8.2 because that is what I am testing
$! These functions may require POSIX UIDs/GIDs to be active, so I am
$! not activating the features at this time, just preparing this file
$! to easily use them in the future.
$!
$  d_seteuid = "undef"
$  d_setpgid = "undef"
$  d_setpgrp = "undef"
$  d_setregid = "undef"
$  d_setreuid = "undef"
$  d_setsid = "undef"
$!  tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$tmp = "" ! Disable this section for now.
$  if (tmp .GES. "8.2") .AND. (f$getsyi("HW_MODEL") .GE. 1024)
$  then
$    echo "Found 64 bit OpenVMS 8.2, will build with V7.3-2 UID setting routines"
$    d_seteuid = "define"
$    d_setpgid = "define"
$    d_setpgrp = "define"
$    d_setregid = "define"
$    d_setreuid = "define"
$    d_setsid = "define"
$  endif
$!
$! VMS V8 powered options
$! We know that it is only available for 8.2 and later on 64 bit platforms.
$!
$  d_fstatvfs = "undef"
$!  d_statvfs = "undef"
$  i_sysstatvfs = "undef"
$  tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$  if (tmp .GES. "8.2") .AND. (f$getsyi("HW_MODEL") .GE. 1024)
$  then
$    echo "Found 64 bit OpenVMS 8.2, will build with 8.2 routines"
$    d_fstatvfs = "define"
$!    d_statvfs = "define"
$    i_sysstatvfs = "define"
$  endif
$!
a4728 2
$   randbits = "48"
$   randfunc = "drand48"
a4735 2
$   randbits = "31"
$   randfunc = "random"
a4754 1
$     randfunc = "rand"
a4795 3
$!   d_unsetenv="define" ! Fix me - Activating requires changing VMS code
$   d_unsetenv="undef"   ! Change will be needed to allow GNV integration
$   d_clearenv="undef"
d4804 1
a4804 5
$   sig_name1="ZERO HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM "
$   sig_name2="TERM ABRT USR1 USR2 SPARE18 SPARE19 CHLD CONT STOP TSTP TTIN TTOU "
$   sig_name3="DEBUG SPARE27 SPARE28 SPARE29 SPARE30 SPARE31 SPARE32 "
$   sig_name4="WINCH "
$   sig_namert="RTMIN RTMAX"
d4807 5
a4811 24
$   psnwc3="""TTIN"",""TTOU"",""DEBUG"",""SPARE27"",""SPARE28"",""SPARE29"",""SPARE30"",""SPARE31"",""SPARE32"","
$   psnwc4_v7_3="""WINCH"","
$   psnwcrt="""RTMIN"",""RTMAX"",0"
$   sig_num1="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 6 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 "
$   sig_num_v7_3="28 "
$   sig_numrt="33 64"
$   sig_num_init1="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,"
$   sig_num_init_v7_3="28,"
$   sig_num_initrt="33,64,0"
$   if (vms_ver .GES. "7.3")
$   then
$	sig_name = sig_name1 + sig_name2 + sig_name3 + sig_name4 + sig_namert
$       sig_name_init = psnwc1 + psnwc2 + psnwc3 + psnwc4_v7_3 + psnwcrt
$	sig_num = sig_num1 + sig_num_v7_3 + sig_numrt
$	sig_num_init = sig_num_init1 + sig_num_v7_3 + sig_num_initrt
$	sig_size="37"
$   else
$	sig_name = sig_name1 + sig_name2 + sig_name3 + sig_namert
$       sig_name_init = psnwc1 + psnwc2 + psnwc3 + psnwcrt
$	sig_num = sig_num1 + sig_numrt
$	sig_num_init = sig_num_init1 + sig_num_initrt
$	sig_size="36"
$   endif
$   sig_count="64"
a4827 2
$   d_unsetenv="undef"
$   d_clearenv="undef"
a4841 2
$   sig_count="15"
$   if (vms_ver .GES. "6.2") then sig_count="17"
a4928 7
$   d_sockpair = "undef"
$   tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$   if (tmp .GES. "8.2") .AND. (f$getsyi("HW_MODEL") .GE. 1024)
$   then
$     echo "Found 64 bit OpenVMS 8.2, will build with socketpair support"
$     d_sockpair = "define"
$   endif
a4955 1
$   d_socketpair = "undef"
a5186 1
$	    sig_count="17"
a5194 1
$	    sig_count="15"
d5247 1
a5255 2
$ WC "PERL_PATCHLEVEL='" + perl_patchlevel + "'"
$ WC "PERL_CONFIG_SH='true'"
d5274 1
a5274 19
$ IF uselargefiles .OR. uselargefiles .EQS. "define"
$ THEN
$!    Perl can not use _USE_STD_STAT at the moment
$!    IF d_symlink .OR. d_symlink .EQS. "define"
$!    THEN
$!	ccdefines = "_USE_STD_STAT=1"
$!    ELSE
$	ccdefines = "_LARGEFILE=1"
$!    ENDIF
$ ELSE
$     ccdefines = ""
$ ENDIF
$ IF ccdefines .NES. ""
$ THEN
$   WC "ccflags='" + ccflags + "/Define=" + ccdefines + "'"
$ ELSE
$   WC "ccflags='" + ccflags + "'"
$ ENDIF
$ WC "ccflags_uselargefiles='" + "'"
d5314 1
a5314 7
$ WC "d_attribute_format='" + d_attribut + "'"
$ WC "d_attribute_malloc='undef'"
$ WC "d_attribute_nonnull='undef'"
$ WC "d_attribute_noreturn='undef'"
$ WC "d_attribute_pure='undef'"
$ WC "d_attribute_unused='undef'"
$ WC "d_attribute_warn_unused_result='undef'"
d5339 1
a5339 11
$ tmp = f$extract(1,3,f$edit(f$getsyi("VERSION"),"TRIM,COLLAPSE"))
$ IF (tmp .GES. "8.2") .AND. (f$getsyi("HW_MODEL") .GE. 1024)
$ then
$! Sorry, CRTL does not have this, and in order to support
$! POSIX filespecifications, the CRTL readdir() structures
$! need to be used globaly for now.
$  echo "Building for OpenVMS 8.2 uses CRTL dirent.h, so no dirnamlen member"
$   WC "d_dirnamlen='undef'"
$ else
$   WC "d_dirnamlen='define'"
$ endif
d5375 1
a5375 1
$ WC "d_fseeko='" + d_fseeko + "'"
d5378 1
a5378 1
$ WC "d_fstatvfs='" + d_fstatvfs + "'"
d5380 1
a5380 2
$ WC "d_ftello='" + d_ftello + "'"
$ WC "d_futimes='undef'"
d5403 1
a5403 1
$ WC "d_getpgid='" + d_getpgid + "'"
d5405 1
a5405 1
$ WC "d_getpgrp='" + d_getpgrp + "'"
d5431 1
a5431 1
$ WC "d_lchown='" + d_lchown + "'"
d5433 1
a5433 2
$ WC "d_libm_lib_version='undef'"
$ WC "d_link='" + d_link + "'"
d5440 1
a5440 1
$ WC "d_lstat='" + d_lstat + "'"
a5441 2
$ WC "d_malloc_size='undef'"
$ WC "d_malloc_good_size='undef'"
a5476 1
$ WC "d_nv_zero_is_allbits_zero='define'"
d5504 1
a5504 1
$ WC "d_readlink='" + d_readlink + "'"
d5506 1
a5506 1
$ WC "d_realpath='" + d_realpath + "'"
d5526 2
a5527 2
$ WC "d_seteuid='" + d_seteuid + "'"
$ WC "d_setgrent='" + d_setgrent + "'"
d5535 1
a5535 1
$ WC "d_setpgid='" + d_setpgid + "'"
d5537 1
a5537 1
$ WC "d_setpgrp='" + d_setpgrp + "'"
d5541 1
a5541 1
$ WC "d_setregid='" + d_setregid + "'"
d5544 1
a5544 1
$ WC "d_setreuid='" + d_setreuid + "'"
d5548 1
a5548 1
$ WC "d_setsid='" + d_setsid + "'"
d5560 1
a5560 1
$ WC "d_sockpair='" + d_sockpair + "'"
a5561 1
$ WC "d_sprintf_returns_strlen='define'"
a5584 2
$ WC "d_strlcat='undef'"
$ WC "d_strlcpy='undef'"
d5589 1
a5589 1
$ WC "d_strtoq='" + d_strtoq + "'"
d5595 1
a5595 1
$ WC "d_symlink='" + d_symlink + "'"
a5623 2
$ WC "d_unsetenv='" + d_unsetenv + "'"
$ WC "d_clearenv='" + d_clearenv + "'"
d5704 1
a5704 1
$ WC "i_grp='" + i_grp + "'"
d5751 1
a5751 1
$ WC "i_sysstatvfs='" + i_sysstatvfs + "'"
a5796 1
$ WC "ldflags_uselargefiles='" + "'"
a5800 2
$ WC "libswanted='" + "'"
$ WC "libswanted_uselargefiles='" + "'"
d5804 2
a5805 8
$ IF uselargefiles .OR. uselargefiles .EQS. "define"
$ THEN
$   WC "lseeksize='8'"
$   WC "lseektype='off_t'"
$ ELSE
$   WC "lseeksize='4'"
$   WC "lseektype='int'"
$ ENDIF
a5822 1
$ WC "nonxs_ext='" + nonxs_ext + "'"
d5858 1
a5858 2
$ WC "randbits='" + randbits + "'"
$ WC "randfunc='" + randfunc + "'"
a5891 1
$ WC "sig_count='" + sig_count + "'"
a5952 1
$ WC "usesitecustomize='" + usesitecustomize + "'"
d5979 1
d6007 2
a6008 2
$ WC "d_getgrgid_r='" + d_getgrgid_r + "'"
$ WC "d_getgrnam_r='" + d_getgrnam_r + "'"
d6020 2
a6021 2
$ WC "d_getpwnam_r='" + d_getpwnam_r + "'"
$ WC "d_getpwuid_r='" + d_getpwuid_r + "'"
d6042 1
a6042 1
$ WC "d_ttyname_r='" + d_ttyname_r + "'"
d6053 2
a6054 2
$ WC "getgrgid_r_proto='" + getgrgid_r_proto + "'"
$ WC "getgrnam_r_proto='" + getgrnam_r_proto + "'"
d6088 1
a6088 1
$ WC "ttyname_r_proto='" + ttyname_r_proto + "'"
a6256 12
$ IF uselargefiles .OR. uselargefiles .EQS. "define"
$ THEN
$!    Perl can not use _USE_STD_STAT at the moment
$!   IF d_symlink .or. d_symlink .eqs. "define"
$!   THEN
$!      LARGEFILE_REPLACE = "LARGEFILE=LARGEFILE=_USE_STD_STAT=1"
$!   ELSE
$      LARGEFILE_REPLACE = "LARGEFILE=LARGEFILE=_LARGEFILE=1"
$!   ENDIF
$ ELSE
$   LARGEFILE_REPLACE = "LARGEFILE="
$ ENDIF
d6259 4
a6262 3
$ mcr []munchconfig 'config_sh' 'Makefile_SH' "''DECC_REPLACE'" "''DECCXX_REPLACE'" "''ARCH_TYPE'" "''GNUC_REPLACE'" -
"''SOCKET_REPLACE'" "''THREAD_REPLACE'" "''C_Compiler_Replace'" "''MALLOC_REPLACE'" -
"''Thread_Live_Dangerously'" "PV=''version'" "FLAGS=FLAGS=''extra_flags'" "''LARGEFILE_REPLACE'"
a6497 22
$! HP hack to make distributing binaries easier
$!----------------------------------------------
$ pcsi_producer = f$trnlnm("PCSI_PRODUCER")
$ if pcsi_producer .eqs. ""
$ then
$   prefix = prefix - "000000."
$   IF F$LOCATE(".]",prefix) .EQ. F$LENGTH(prefix) THEN prefix = prefix - "]" + ".]"
$   WRITE CONFIG "$ define/translation=concealed ''vms_prefix' ''prefix'"
$ else
$  WRITE CONFIG "$ myproc = f$environment(""PROCEDURE"")"
$  WRITE CONFIG "$ myroot_dev = f$parse(myproc,,,""DEVICE"",""NO_CONCEAL"")"
$  WRITE CONFIG "$ myroot_dir = f$parse(myproc,,,""DIRECTORY"",""NO_CONCEAL"")"
$  WRITE CONFIG "$ myroot_dir = myroot_dir - ""][000000."" - ""><000000."""
$  WRITE CONFIG "$ myroot_dir = myroot_dir - ""][000000]"" - ""><000000>"""
$  WRITE CONFIG "$ myroot_dir = myroot_dir - ""]["" - ""><"""
$  WRITE CONFIG "$ myroot_dir = myroot_dir - "".]"" - "".>"" - ""["" - ""]"" - ""<"" - "">"""
$  WRITE CONFIG "$ if f$trnlnm(""HP_BUILD_PERL_BIN_KIT"",""LNM$PROCESS_TABLE"") .EQS. """""
$  WRITE CONFIG "$ then"
$  WRITE CONFIG "$  define/translation=concealed ''vms_prefix' 'myroot_dev'['myroot_dir'.]"
$  WRITE CONFIG "$ endif"
$ endif
$
a6500 2


d6559 1
a6559 1
$ WRITE CONFIG "$ perldoc    == """ + perl_setup_perl + " ''vms_prefix':[lib.pods]perldoc.com -t"""
a6569 1
$ WRITE CONFIG "$ prove      == """ + perl_setup_perl + " ''vms_prefix':[utils]prove.com"""
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d52 1
a52 3
$ uselongdouble = "n"
$ uselargefiles = "y"
$ usestdstat = "n"
d55 1
a55 2
$ thread_upcalls = "MTU="
$ thread_kernel = "MTK="
d544 2
a545 3
$         dotloc = f$locate(".",basename)
$         basename[dotloc,1] := "_"
$         dot_ele = F$ELEMENT(dots - 1,"_",f$extract(dotloc,f$length(basename),basename))
d852 1
d868 1
a868 1
$ config_sh_es = "''config_sh'/[-]config.sh/"
d880 1
d904 3
a906 3
$   config_symbols3 ="|usecasesensitive|usedefaulttypes|usedevel|useieee|useithreads|uselongdouble|usemultiplicity|usemymalloc|usedebugging_perl|"
$   config_symbols4 ="|useperlio|usesecurelog|usethreads|usevmsdebug|usefaststdio|usemallocwrap|unlink_all_versions|uselargefiles|usesitecustomize|"
$   config_symbols5 ="|buildmake|builder|usethreadupcalls|usekernelthread"
d1126 1
a1196 3
$ ! more redundant scrubbing of values
$ prefix = prefix - "000000."
$ IF F$LOCATE(".]",prefix) .EQ. F$LENGTH(prefix) THEN prefix = prefix - "]" + ".]"
a1368 14
$   IF ((F$LOCATE("""SMOKE",line).NE.F$LENGTH(line)).AND.(.NOT.got_perl_patchlevel))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     perl_patchlevel = F$ELEMENT(1,"""",line)
$     perl_patchlevel = perl_patchlevel - "SMOKE"
$     got_perl_patchlevel = "true"
$   ENDIF
$   IF ((F$LOCATE("""MAINT",line).NE.F$LENGTH(line)).AND.(.NOT.got_perl_patchlevel))
$   THEN
$     line = F$EDIT(line,"COMPRESS, TRIM")
$     perl_patchlevel = F$ELEMENT(1,"""",line)
$     perl_patchlevel = perl_patchlevel - "MAINT"
$     got_perl_patchlevel = "true"
$   ENDIF
a2024 1
$   d_cplusplus = "define"
a2025 2
$ ELSE
$   d_cplusplus = "undef"
d2077 1
a2077 1
$ IF f$length( rp + "[''dflt'] " ) .GT. 76
d2346 1
a2363 14
$   bool_dflt = "n"
$   IF F$TYPE(uselongdouble) .NES. "" 
$   THEN
$       IF uselongdouble .OR. uselongdouble .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "Perl can be built to take advantage of long doubles which"
$   echo "(if available) may give more accuracy and range for floating point numbers."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to use long doubles, if available? [''bool_dflt'] "
$   GOSUB myread
$   uselongdouble = ans
$!
d2433 2
a2434 2
$     ! Are they on VMS 7.1 or greater?
$     IF "''f$extract(1,3, f$getsyi(""version""))'" .GES. "7.1"
d2437 10
a2446 10
$	echo "Threaded Perl can be linked to use system upcalls on your system. This feature"
$	echo "allows the thread scheduler to be made aware of system events (such as I/O)"
$	echo "so as to prevent a single thread from blocking all the threads in a program,"
$	echo "even on a single-processor machine."
$	bool_dflt = "y"
$	IF f$type(usethreadupcalls) .NES. ""
$	THEN
$       	if .not. usethreadupcalls .or. usethreadupcalls .eqs. "undef" then bool_dflt="n"
$	ENDIF
$       rp = "Enable thread upcalls? [''bool_dflt'] "
d2448 1
a2448 1
$       IF ans
d2450 1
a2450 22
$           thread_upcalls = "MTU=MTU=1"
$	    usethreadupcalls = "define"
$     	    ! Are they on alpha or itanium?
$	    IF (archname .NES. "VMS_VAX") .AND. ("''f$extract(1,3, f$getsyi(""version""))'" .GES. "7.2")
$     	    THEN
$       	echo ""
$       	echo "Threaded Perl can be linked to use multiple kernel threads on your system."
$       	echo "This feature allows multiple user threads to make use of multiple CPUs on"
$		echo "a multi-processor machine."
$       	bool_dflt = "n"
$		IF f$type(usekernelthreads) .nes. ""
$		THEN
$       		if usekernelthreads .or. usekernelthreads .eqs. "define" then bool_dflt="y"
$		ENDIF
$       	rp = "Enable multiple kernel threads? [''bool_dflt'] "
$       	gosub myread
$       	IF ans
$		THEN
$           	    thread_kernel = "MTK=MTK=1"
$	    	    usekernelthreads = "define"
$           	ENDIF
$           ENDIF
a2454 2
$ IF F$TYPE(usethreadupcalls) .EQS. "" THEN usethreadupcalls = "undef"
$ IF F$TYPE(usekernelthreads) .EQS. "" THEN usekernelthreads = "undef"
d2480 2
a2481 2
$   echo "Perl normally uses IEEE format (T_FLOAT) floating point numbers on"
$   echo "Alpha and Itanium, but if you need G_FLOAT for binary compatibility"
a2528 1
$!
d2690 1
a2690 8
$ ! Build this one only for threads without ithreads
$ IF F$TYPE(useithreads) .EQS. "" .OR. .NOT. use_threads
$ THEN
$   dflt = dflt - "Thread"
$ ELSE
$   IF useithreads .OR. useithreads .EQS. "define" THEN dflt = dflt - "Thread"
$ ENDIF
$ dflt = dflt - "Win32API/File" - "Win32CORE" - "Win32"  ! need Dave Cutler's other project
d2839 2
a2867 5
$ ELSE
$   IF (archname.EQS."VMS_IA64")
$   THEN
$     extra_flags = "''extra_flags'" + "/float=g_float"
$   ENDIF
a3004 6
$! FIXME -- This section does not really handle all the different permutations 
$! of 64-bitness, and it does not provide for the /POINTER_SIZE=64 compiler
$! option that would be necessary to support the "explicit 64-bit interfaces"
$! promised by -Dusemorebits.
$!
$ usemorebits = "undef"
d3008 3
d3018 2
a3027 2
$   uselongdouble = "define"
$   alignbytes="16"
a3031 1
$   uselongdouble = "undef"
d3133 5
a3153 8
$ ENDIF
$!
$ IF archname .NES. "VMS_VAX"
$ THEN
$   d_frexpl = "define"
$   d_modfl = "define"
$   d_modflproto = "define"
$ ELSE
d3155 2
a3160 9
$ IF useieee .OR. useieee .EQS. "define"
$ THEN
$   d_isnan = "define"
$   d_isnanl = "define"
$ ELSE
$   d_isnan = "undef"
$   d_isnanl = "undef"
$ ENDIF
$!
a3511 7
$! Check to see if we've got utime.h (which we should use if we have)
$!
$ i_netdb = "undef"
$ tmp = "utime.h"
$ GOSUB inhdr
$ i_utime = tmp
$!
d3919 1
a3919 1
$   WS "     fd = open(""[-]perl.c"", O_RDONLY);"
d4818 1
d4825 1
a4825 1
$  IF (vms_ver .GES. "8.2") .AND. (archname .NES. "VMS_VAX")
d4837 1
a4837 1
$    echo4 "I can not detect if your CRTL and build disk support hard links."
d4843 1
a4843 1
$    IF (vms_ver .GES. "8.2") .AND. (archname .NES. "VMS_VAX")
a4844 2
$      echo4 "Largefile support enabled, so enabling standard stat support too."
$      usestdstat = "y"
d4883 1
a4883 1
$    IF (vms_ver .GES. "8.2") .AND. (archname .NES. "VMS_VAX")
d4885 1
a4885 1
$       echo4 "-Duselargefiles is required for symbolic link support."
d4899 1
d4916 2
a4917 3
$  d_snprintf = "undef"
$  d_vsnprintf = "undef"
$  if (vms_ver .GES. "7.3-2") .AND. (archname .NES. "VMS_VAX")
d4919 1
a4919 1
$    echo "Found 64 bit OpenVMS ''vms_ver' -- will build with V7.3-2 routines"
a4932 2
$    d_snprintf = "define"
$    d_vsnprintf = "define"
d4948 3
a4950 3
$  ! Disable this section for now.
$!$  if (vms_ver .GES. "8.2") .AND. (archname .NES. "VMS_VAX")
$  if .NOT. 1
d4952 1
a4952 1
$    echo "Found 64 bit OpenVMS ''vms_ver' -- will build with V7.3-2 UID setting routines"
d4967 2
a4968 1
$  if (vms_ver .GES. "8.2") .AND. (archname .NES. "VMS_VAX")
d4970 1
a4970 1
$    echo "Found 64 bit OpenVMS ''vms_ver' -- will build with 8.2 routines"
d5077 31
a5107 35
$   sig_name1="ZERO HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE"
$   sig_name2=" ALRM TERM USR1 USR2 NUM18 NUM19 CHLD CONT STOP TSTP TTIN TTOU DEBUG"
$   IF (vms_ver .GES. "7.3")
$   THEN
$     sig_name2 = sig_name2 + " NUM27 WINCH"
$   ENDIF
$!* signal.h defines SIGRTMIN as 33 and SIGRTMAX as 64, but there is no 
$!* sigqueue function or other apparent means to do realtime signalling,
$!* so let's not try to include the realtime range for now.
$!* sig_name3=" NUM29 NUM30 NUM31 NUM32 RTMIN NUM34 NUM35 NUM36 NUM37 NUM38 NUM39 NUM40 NUM41 NUM42 NUM43"
$!* sig_name4=" NUM44 NUM45 NUM46 NUM47 NUM48 NUM49 NUM50 NUM51 NUM52 NUM53 NUM54 NUM55 NUM56 NUM57 NUM58"
$!* sig_name5=" NUM59 NUM60 NUM61 NUMT62 NUM63 RTMAX"
$   sig_name = sig_name1 + sig_name2
$   sig_num = ""
$   sig_num_init = ""
$   sig_name_init = ""
$   sig_index = 0
$!
$ PARSE_SIG_NAME_LOOP:
$!
$   tmp = F$ELEMENT(sig_index, " ", sig_name)
$   IF F$LENGTH(F$EDIT(tmp,"TRIM")) .eq. 0 THEN GOTO END_SIG_NAME_LOOP
$   sig_name_init = sig_name_init + """''tmp'"","
$   sig_num = sig_num + "''sig_index' "
$   sig_num_init = sig_num_init + "''sig_index',"
$   sig_index = sig_index + 1
$   GOTO PARSE_SIG_NAME_LOOP
$!
$ END_SIG_NAME_LOOP:
$!
$   sig_name_init = sig_name_init + "0"
$   sig_num_init = sig_num_init + "0"
$   sig_size = "''sig_index'"
$   sig_index = sig_index - 1
$   sig_count = "''sig_index'"
d5221 1
a5221 1
$ usefaststdio="undef"
d5230 2
a5231 1
$   if (vms_ver .GES. "8.2") .AND. (archname .NES. "VMS_VAX")
d5319 1
a5324 5
$ IF uselongdouble .OR. uselongdouble .EQS. "define"
$ THEN
$   nvtype="long double"
$ ENDIF
$!
a5436 29
$! Check for signbit (must already know nvtype)
$!
$ echo4 "Checking to see if you have signbit() available to work on ''nvtype'..."
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <fp.h>"
$ WS "#include <stdio.h>"
$ WS "int main()"
$ WS "{"
$ WS "    ''nvtype' x = 0.0;"
$ WS "    ''nvtype' y = -0.0;"
$ WS "    if ((signbit(x) == 0) && (signbit(y) != 0))"
$ WS "        printf(""1\n"");"
$ WS "    else"
$ WS "        printf(""0\n"");"
$ WS "}"
$ CS
$ GOSUB compile
$ IF tmp .EQS. "1" 
$ THEN 
$     d_signbit = "define"
$     echo4 "Yes."
$ ELSE
$     d_signbit = "undef"
$     echo4 "Nope."
$ ENDIF
$!
d5483 2
a5484 2
$!	Use the same list of signals the CRTL does for recent systems, but cook our own for very old systems.
$!	Note that the list controls what signals can be caught by name as well as what can be raised via kill().
d5486 11
a5496 3
$       if  vms_ver .LTS. "6.2"
$	then
$!          since SIGBUS and SIGSEGV indistinguishable, make them the same here.
a5565 1
$ WC "perl_patchlevel='" + perl_patchlevel + "'"
d5587 5
a5591 4
$    IF usestdstat .OR. usestdstat .EQS. "define"
$    THEN
$	ccdefines = "_USE_STD_STAT=1"
$    ELSE
d5593 1
a5593 1
$    ENDIF
a5649 1
$ WC "d_printf_format_null='undef'"
a5655 2
$ WC "d_builtin_choose_expr='undef'" ! GCC only
$ WC "d_builtin_expect='undef'" ! GCC only
a5666 1
$ WC "d_cplusplus='" + d_cplusplus + "'"
a5668 1
$ WC "d_ctermid='define'"
a5669 1
$ WC "d_c99_variadic_macros='undef'"
a5672 1
$ WC "d_dir_dd_fd='undef'"
d5674 11
a5684 1
$ WC "d_dirnamlen='define'"
a5767 1
$ WC "d_inc_version_list='undef'"
a5838 1
$ WC "d_pseudofork='undef'"
a5903 1
$ WC "d_signbit='" + d_signbit + "'"
a5905 1
$ WC "d_sitearch='define'"
a5989 1
$ WC "d_vsnprintf='" + d_vsnprintf + "'"
a6058 1
$ WC "i_gdbm='undef'"
d6121 1
a6121 1
$ WC "i_utime='" + i_utime + "'"
a6170 1
$ WC "mad='undef'"
a6248 1
$ WC "sharpbang='#!'"
d6251 5
a6255 16
$ IF (f$length(sig_name) .GE. 244)
$ THEN
$     tmp = "sig_name='" + sig_name + "'"
$     WC/symbol tmp
$     DELETE/SYMBOL tmp
$ ELSE
$     WC "sig_name='" + sig_name + "'"
$ ENDIF
$ IF (f$length(sig_name_init) .GE. 244)
$ THEN
$     tmp = "sig_name_init='" + sig_name_init + "'"
$     WC/symbol tmp
$     DELETE/SYMBOL tmp
$ ELSE
$     WC "sig_name_init='" + sig_name_init + "'"
$ ENDIF
a6285 1
$ WC "targetarch='" + "'"
a6310 1
$ WC "usekernelthreads='" + usekernelthreads + "'"	! VMS-specific
a6318 1
$ WC "userelocatableinc='undef'"
a6319 1
$ WC "useshrplib='true'"
a6322 1
$ WC "usethreadupcalls='" + usethreadupcalls + "'"	! VMS-specific
a6394 1
$ WC "d_localtime_r_needs_tzset='undef'"
a6404 1
$ WC "d_snprintf='" + d_snprintf + "'"
d6464 1
a6464 1
$ 'Perl_CC' 'ccflags' munchconfig.c
a6549 1
$ IF use_ieee_math THEN WC "#define USE_IEEE"
d6626 5
a6630 4
$   IF usestdstat .or. usestdstat .eqs. "define"
$   THEN
$      LARGEFILE_REPLACE = "LARGEFILE=LARGEFILE=_USE_STD_STAT=1"
$   ELSE
d6632 1
a6632 1
$   ENDIF
a6635 22
$!
$! In order not to stress the tiny command buffer on pre-7.3-2 systems,
$! we put the following substitutions in a file and pass the file to
$! munchconfig.
$!
$ open/write CONFIG extra_subs.txt
$ WC := write CONFIG
$ WC "''DECC_REPLACE'"
$ WC "''DECCXX_REPLACE'"
$ WC "''ARCH_TYPE'"
$ WC "''GNUC_REPLACE'"
$ WC "''SOCKET_REPLACE'"
$ WC "''THREAD_REPLACE'"
$ WC "''C_Compiler_Replace'"
$ WC "''MALLOC_REPLACE'"
$ WC "''THREAD_UPCALLS'"
$ WC "''THREAD_KERNEL'"
$ WC "PV=''version'"
$ WC "FLAGS=FLAGS=''extra_flags'"
$ WC "''LARGEFILE_REPLACE'"
$ close CONFIG
$!
d6638 3
a6640 1
$ mcr []munchconfig 'config_sh' 'Makefile_SH' -f extra_subs.txt
a6642 1
$ DELETE/NOLOG/NOCONFIRM []extra_subs.txt;
d6651 1
a6651 1
$    mydefault = F$Environment("Default")
d6709 1
a6709 1
$    Set Def &mydefault
d6713 1
a6713 1
$    Set Def &mydefault
d6881 2
d6897 6
d6934 3
d6945 1
a6945 1
$ WRITE CONFIG "$! Symbols for Perl-based utility programs:"
a6947 2
$ WRITE CONFIG "$ config_data== """ + perl_setup_perl + " ''vms_prefix':[utils]config_data.com"""
$ WRITE CONFIG "$ corelist   == """ + perl_setup_perl + " ''vms_prefix':[utils]corelist.com"""
a6948 4
$ WRITE CONFIG "$ cpan2dist  == """ + perl_setup_perl + " ''vms_prefix':[utils]cpan2dist.com"""
$! FIXME: "-" is an operator and illegal in a symbol name -- cpanp-run-perl can't work
$!$ WRITE CONFIG "$ cpanp-run-perl == """ + perl_setup_perl + " ''vms_prefix':[utils]cpanp-run-perl.com"""
$ WRITE CONFIG "$ cpanp      == """ + perl_setup_perl + " ''vms_prefix':[utils]cpanp.com"""
d6959 3
a6961 2
$ WRITE CONFIG "$ perlbug    == """ + perl_setup_perl + " ''vms_prefix':[utils]perlbug.com"""
$ WRITE CONFIG "$ perldoc    == """ + perl_setup_perl + " ''vms_prefix':[utils]perldoc.com """"-t"""""""
d6965 4
a6968 4
$ WRITE CONFIG "$ pod2html   == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2html.com"""
$ WRITE CONFIG "$ pod2latex  == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2latex.com"""
$ WRITE CONFIG "$ pod2text   == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2text.com"""
$ WRITE CONFIG "$!pod2man    == """ + perl_setup_perl + " ''vms_prefix':[utils]pod2man.com"""
a6975 3
$ WRITE CONFIG "$ ptar       == """ + perl_setup_perl + " ''vms_prefix':[utils]ptar.com"""
$ WRITE CONFIG "$ ptardiff   == """ + perl_setup_perl + " ''vms_prefix':[utils]ptardiff.com"""
$ WRITE CONFIG "$ shasum     == """ + perl_setup_perl + " ''vms_prefix':[utils]shasum.com"""
@


1.1.1.11
log
@import perl 5.10.1
@
text
@a555 7
$       tildeloc = f$locate("~",basename)
$       IF (found .EQS. "" .AND. tildeloc .LT. f$length(basename))
$       THEN
$         basename[tildeloc,1] := "_"
$         found = F$SEARCH(dirname + basename)
$         file_2_find = file_2_find + "," + basename
$       ENDIF
d1404 1
a1404 2
$   tmp = F$EDIT(line,"TRIM,COMPRESS")
$   IF F$ELEMENT(3, " ", tmp) .NES. "" THEN tmp = F$ELEMENT(3, " ", tmp)
d1406 1
a1406 1
$   IF tmp .NES. "" THEN perl_patchlevel = tmp
d2715 4
a2718 11
$   IF F$EXTRACT(0,4,line) .EQS. "ext/"
$   THEN
$     xxx = F$ELEMENT(1,"/",line)
$     IF F$SEARCH("[-.ext]''xxx'.DIR;1") .EQS. "" THEN GOTO ext_loop
$   ENDIF
$   IF F$EXTRACT(0,8,line) .EQS. "vms/ext/"
$   THEN
$     xxx = F$ELEMENT(2,"/",line)
$     IF F$SEARCH("[-.vms.ext]''xxx'.DIR;1") .EQS. "" THEN GOTO ext_loop
$     xxx = "VMS/" + xxx
$   ENDIF
d2720 7
a2726 40
$!
$! (extspec = xxx) =~ tr!-!/!
$ extspec = ""
$ idx = 0
$ replace_dash_with_slash:
$   before = F$ELEMENT(idx, "-", xxx)
$   IF before .EQS. "-" THEN goto end_replace_dash_with_slash
$   IF extspec .NES. "" 
$   THEN
$	extspec = extspec + "/"
$   ENDIF
$   extspec = extspec + before
$   idx = idx + 1
$   goto replace_dash_with_slash
$
$ end_replace_dash_with_slash:
$   
$ xxx = known_extensions
$ may_already_have_extension:
$   idx = F$LOCATE(extspec, xxx)
$   extlen = F$LENGTH(xxx) 
$   IF idx .EQ. extlen THEN goto found_new_extension
$!  But "Flirble" may just be part of "Acme-Flirble"
$   IF idx .GT. 0 .AND. F$EXTRACT(idx - 1, 1, xxx) .NES. " "
$   THEN
$	xxx = F$EXTRACT(idx + F$LENGTH(extspec) + 1, extlen, xxx)
$	GOTO may_already_have_extension
$   ENDIF
$!  But "Foo" may just be part of "Foo-Bar" so check for equality.
$   xxx = F$EXTRACT(idx, extlen - idx, xxx)
$   IF F$ELEMENT(0, " ", xxx) .EQS. extspec
$   THEN 
$	GOTO ext_loop
$   ELSE 
$	xxx = F$EXTRACT(F$LENGTH(extspec) + 1, extlen, xxx)
	GOTO may_already_have_extension
$   ENDIF
$!
$ found_new_extension:
$   known_extensions = known_extensions + " ''extspec'"
a2730 3
$ DELETE/SYMBOL idx
$ DELETE/SYMBOL extspec
$ DELETE/SYMBOL extlen
a3164 1
$ usedevel="undef"
d3186 1
d3188 1
a3188 1
$ IF archname .NES. "VMS_VAX"
d3204 1
a3204 5
$   quadkind  = "3"
$!
$   d_frexpl = "define"
$   d_modfl = "define"
$   d_modflproto = "define"
d3218 4
a3221 3
$   quadtype = "undef"
$   uquadtype = "undef"
$   quadkind  = "undef"
d3223 6
a3954 6
$! Check for poll.h
$!
$ tmp = "sys/poll.h"
$ gosub inhdr
$ i_syspoll = tmp
$!
d5486 1
a5486 2
$ d_nv_preserves_uv = "undef"
$ echo4 "Checking how many bits of your UVs your NVs can preserve..."
d5493 7
a5499 9
$ WS "    ''uvtype' u = 0;"
$ WS "    int     n = 8 * ''uvsize';"
$ WS "    int     i;"
$ WS "    for (i = 0; i < n; i++) {"
$ WS "      u = u << 1 | (''uvtype')1;"
$ WS "      if ((''uvtype')(''nvtype')u != u)"
$ WS "        break;"
$ WS "    }"
$ WS "    printf(""%d\n"", i);"
d5504 2
a5505 3
$ nv_preserves_uv_bits = tmp
$ IF F$INTEGER(nv_preserves_uv_bits) .GE. (F$INTEGER(uvsize) * 8)
$ THEN
d5507 2
a5508 1
$   echo "Your NVs can preserve all ''nv_preserves_uv_bits' bits of your UVs."
d5510 23
a5532 69
$   d_nv_preserves_uv = "undef""
$   echo "Your NVs can preserve only ''nv_preserves_uv_bits' bits of your UVs."	
$ ENDIF
$!
$ nv_overflows_integers_at = "0"
$ echo4 "Checking to find the largest integer value your NVs can hold..."
$ OS
$ WS "#include <stdio.h>"
$ WS ""
$ WS "typedef ''nvtype' NV;"
$ WS ""
$ WS "int"
$ WS "main() {"
$ WS "  NV value = 2;"
$ WS "  int count = 1;"
$ WS ""
$ WS "  while(count < 256) {"
$ WS "    volatile NV up = value + 1.0;"
$ WS "    volatile NV negated = -value;"
$ WS "    volatile NV down = negated - 1.0;"
$ WS "    volatile NV got_up = up - value;"
$ WS "    int up_good = got_up == 1.0;"
$ WS "    int got_down = down - negated;"
$ WS "    int down_good = got_down == -1.0;"
$ WS ""
$ WS "    if (down_good != up_good) {"
$ WS "      fprintf(stderr,"
$ WS "              ""Inconsistency - up %d %f; down %d %f; for 2**%d (%.20f)\n"","
$ WS "              up_good, (double) got_up, down_good, (double) got_down,"
$ WS "              count, (double) value);"
$ WS "      return 1;"
$ WS "    }"
$ WS "    if (!up_good) {"
$ WS "      while (1) {"
$ WS "        if (count > 8) {"
$ WS "          count -= 8;"
$ WS "          fputs(""256.0"", stdout);"
$ WS "        } else {"
$ WS "          count--;"
$ WS "          fputs(""2.0"", stdout);"
$ WS "        }"
$ WS "        if (!count) {"
$ WS "          puts("""");"
$ WS "          return 0;"
$ WS "        }"
$ WS "        fputs(""*"", stdout);"
$ WS "      }"
$ WS "    }"
$ WS "    value *= 2;"
$ WS "    ++count;"
$ WS "  }"
$ WS "  fprintf(stderr, ""Cannot overflow integer range, even at 2**%d (%.20f)\n"","
$ WS "          count, (double) value);"
$ WS "  return 1;"
$ WS "}"
$ CS
$ GOSUB compile
$ IF F$LENGTH(tmp) .GT. 0
$ THEN
$   IF F$EXTRACT(0,1,tmp) .EQS. "2"
$   THEN
$     echo "The largest integer your NVs can preserve is equal to ''tmp'"
$     nv_overflows_integers_at = tmp
$   ELSE
$     echo "Cannot determine the largest integer value your NVs can hold, unexpected output"
$     echo "''tmp'"
$   ENDIF
$ ELSE
$   echo "Cannot determine the largest integer value your NVs can hold"
a5759 1
$ WC "d_asctime64='undef'"
a5762 1
$ WC "d_attribute_deprecated='undef'"
a5792 1
$ WC "d_ctime64='undef'"
a5797 1
$ WC "d_difftime64='undef'"
a5842 3
$ WC "d_gdbmndbm_h_uses_prototypes='undef'"
$ WC "d_gdbm_ndbm_h_uses_prototypes='undef'"
$ WC "d_getaddrinfo='undef'"
a5856 1
$ WC "d_getnameinfo='undef'"
a5878 1
$ WC "d_gmtime64='undef'"
a5886 2
$ WC "d_inetntop='undef'"
$ WC "d_inetpton='undef'"
a5898 1
$ WC "d_localtime64='undef'"
a5922 1
$ WC "d_mktime64='undef'"
a5938 1
$ WC "d_ndbm_h_uses_prototypes='undef'"
a5941 1
$ WC "nv_overflows_integers_at='" + nv_overflows_integers_at + "'"
a6078 1
$ WC "d_timegm='undef'"
a6129 1
$ WC "dtrace='" + "'"
a6170 1
$ WC "i_assert='define'"
a6180 2
$ WC "i_gdbm_ndbm='undef'"
$ WC "i_gdbmndbm='undef'"
a6189 1
$ WC "i_mallocmalloc='undef'"
a6221 1
$ WC "i_syspoll='" + i_syspoll + "'"
a6351 4
$ WC "sGMTIME_max='4294967295'"
$ WC "sGMTIME_min='0'"
$ WC "sLOCALTIME_max='4294967295'"
$ WC "sLOCALTIME_min='0'"
a6442 1
$ WC "usedevel='" + usedevel + "'"
a6443 1
$ WC "usedtrace='undef'"
d6806 74
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@a63 1
$ dynamic_ext = ""
a64 1
$ nonxs_ext2 = ""
d371 4
a374 8
$   x = F$GETQUI("CANCEL_OPERATION")        ! clear the deck
$   x = "THIS_JOB"
$   bproc_queue = f$getqui("DISPLAY_QUEUE","QUEUE_NAME","*",x)
$   bproc_entry = f$getqui("DISPLAY_JOB","ENTRY_NUMBER",,x)
$   bproc_name = f$getqui("DISPLAY_JOB","JOB_NAME",,x)
$   bproc_log_spec = f$getqui("DISPLAY_JOB","LOG_SPECIFICATION",,x)
$   STDOUT = F$PARSE(bproc_name, bproc_log_spec, ".LOG")
$   WRITE SYS$OUTPUT "Writing output of entry ''bproc_entry' in queue ''bproc_queue' to a new version of: "
a375 5
$   DELETE_/SYMBOL x
$   DELETE_/SYMBOL bproc_queue
$   DELETE_/SYMBOL bproc_entry
$   DELETE_/SYMBOL bproc_name
$   DELETE_/SYMBOL bproc_log_spec
d952 1
a952 1
$       DEBUGGING = usedebugging_perl
d2305 2
a2306 2
$ bool_dflt = "n"
$ if f$type(DEBUGGING) .nes. "" 
d2308 1
a2308 1
$   if f$extract(0,1,f$edit(DEBUGGING,"collapse,upcase")).eqs."Y"  .or. DEBUGGING .eqs. "define" then bool_dflt="y"
d2720 1
a2720 2
       F$EXTRACT(0,5,line) .NES. "dist/".AND. -
       F$EXTRACT(0,5,line) .NES. "cpan/" THEN goto ext_loop
d2728 1
a2728 6
$   IF F$EXTRACT(0,5,line) .EQS. "dist/"
$   THEN
$     xxx = F$ELEMENT(1,"/",line)
$     IF F$SEARCH("[-.dist]''xxx'.DIR;1") .EQS. "" THEN GOTO ext_loop
$   ENDIF
$   IF F$EXTRACT(0,5,line) .EQS. "cpan/"
d2730 3
a2732 2
$     xxx = F$ELEMENT(1,"/",line)
$     IF F$SEARCH("[-.cpan]''xxx'.DIR;1") .EQS. "" THEN GOTO ext_loop
a2738 1
$ extension_dir_name = xxx
a2752 14
$ gosub may_already_have_extension
$ IF $STATUS .EQ. 1
$ THEN
$     xxx = nonxs_ext
$     gosub may_already_have_extension
$ ENDIF
$ IF $STATUS .EQ. 1
$ THEN
$     xxx = nonxs_ext2
$     gosub may_already_have_extension
$ ENDIF
$ IF $STATUS .NE. 1 THEN goto ext_loop
$ goto found_new_extension
$!
d2756 2
a2757 4
$   IF idx .EQ. extlen THEN return 1	! didn't find it
$!  But "Flirble" may just be part of "Acme-Flirble".  This is not
$!  bullet-proof because we may only be looking at one chunk of the
$!  existing extension list.
d2767 1
a2767 1
$	RETURN 3
d2774 1
a2774 12
$   IF F$SEARCH("[-.ext.''extension_dir_name']*.xs") .EQS. "" .AND. F$SEARCH("[-.dist.''extension_dir_name']*.xs") .EQS. "" .AND. F$SEARCH("[-.cpan.''extension_dir_name']*.xs") .EQS. ""
$   THEN
$!  Bit if a hack to get around the 1K buffer on older systems.
$       IF F$LENGTH(nonxs_ext) .GT. 950
$       THEN
$           nonxs_ext2 = nonxs_ext2 + " ''extspec'"
$       ELSE
$           nonxs_ext = nonxs_ext + " ''extspec'"
$       ENDIF
$   ELSE
$       known_extensions = known_extensions + " ''extspec'"
$   ENDIF
a2781 1
$ DELETE/SYMBOL extension_dir_name
d2799 8
a2806 3
$ dflt = dflt - "Win32API/File" - "Win32"  ! need Dave Cutler's other project
$ nonxs_ext = nonxs_ext - "Win32CORE"
$ nonxs_ext2 = nonxs_ext2 - "Win32CORE"
a2807 2
$ nonxs_ext = F$EDIT(nonxs_ext,"TRIM,COMPRESS")
$ nonxs_ext2 = F$EDIT(nonxs_ext2,"TRIM,COMPRESS")
d2819 1
a2819 1
$ dynamic_ext = F$EDIT(ans,"TRIM,COMPRESS")
d3014 1
a3014 1
$   if .not. useperlio .or. useperlio .eqs. "undef" then bool_dflt = "n"
a5830 1
$ WC "charbits='8'"
d6251 1
a6251 1
$! The dynamic_ext symbol may be quite long
d6253 1
a6253 1
$ tmp = "dynamic_ext='" + dynamic_ext + "'"
d6262 1
a6262 1
$! The extensions symbols may be quite long
d6264 3
a6266 1
$ WC/symbol "extensions='", nonxs_ext, " ", nonxs_ext2, " ", dynamic_ext, "'"
d6435 1
a6435 1
$ WC/symbol "nonxs_ext='", nonxs_ext, " ", nonxs_ext2, "'"
a6603 1
$ WC "vaproto='define'"
d7164 1
a7164 1
$ IF F$LOCATE("Devel::DProf",dynamic_ext) .LT. F$LENGTH(dynamic_ext)
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a46 1
$ shorten_long_symbols = "y"
a481 5
$       IF ( F$SEARCH("[.UU.CXX_REPOSITORY]*.*").NES."" )
$       THEN
$         DELETE/NOLOG/NOCONFIRM [.UU.CXX_REPOSITORY]*.*;*
$         SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) [.UU]CXX_REPOSITORY.DIR
$       ENDIF
d925 2
a926 2
$   config_symbols4 ="|usesecurelog|usethreads|usevmsdebug|usefaststdio|usemallocwrap|unlink_all_versions|uselargefiles|usesitecustomize|"
$   config_symbols5 ="|buildmake|builder|usethreadupcalls|usekernelthreads|useshortenedsymbols"
d1145 5
a1149 17
$! This quotation from Configure has to be included on VMS:
$!
$ TYPE SYS$INPUT:
$ DECK

There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
$ EOD
$!
$! Determine the architecture name.  For now we just get the base
$! architecture name, which may accumulate various minus sign-delimited
$! appendages later depending on configuration options.  But we need the
$! base name early because not all questions are worth asking on all
$! platforms.
$!
$! Please use F$ELEMENT(0,"-",archname) .EQS. "VMS_VAX" (or "VMS_AXP" or
$! "VMS_IA64") from here on to allow cross-platform configuration (e.g.
d1171 158
d1437 3
a1439 2
$!: see if we need a special compiler
$! cc_list = "cc/decc|gcc" !%Config-I-VMS, compiler symbols/commands
d1441 2
a1442 41
$ nocc = "f"
$ vms_cc_dflt = ""
$ vms_cc_available = ""
$!
$ OPEN/WRITE CONFIG ccvms.c
$ WRITE CONFIG "#ifdef __DECC"
$ WRITE CONFIG "#include <stdlib.h>"  !DECC is sooo picky
$ WRITE CONFIG "#endif"
$ WRITE CONFIG "#include <stdio.h>"
$ WRITE CONFIG "int main() {"
$ WRITE CONFIG "#ifdef __DECC"
$ WRITE CONFIG "        printf(""/DECC\n"");"
$ WRITE CONFIG "#else"
$ WRITE CONFIG "        printf(""/VAXC\n"");"
$ WRITE CONFIG "#endif"
$ WRITE CONFIG "        exit(0);"
$ WRITE CONFIG "}"
$ CLOSE CONFIG
$!
$ SET NOON
$ DEFINE/USER_MODE SYS$ERROR _NLA0:
$ DEFINE/USER_MODE SYS$OUTPUT _NLA0:
$ cc/NoObj/list=ccvms.lis ccvms.c
$ tmp = $status
$ SET ON
$ IF (silent) THEN GOSUB Shut_up
$ IF tmp.NE.%X10B90001
$ THEN 
$  IF tmp.NE.%X10000001
$  THEN 
$    nocc = "t"  !%X10000001 is return from gcc
$    GOTO Gcc_initial_check
$  ENDIF
$ ENDIF
$!
$ GOSUB List_Parse
$ IF .NOT.silent THEN echo ""
$ echo "Default ""cc"" is ''line' ''archsufx' ''F$GETSYI("VERSION")'" 
$ IF F$LOCATE("VAX",line).NE.F$LENGTH(line) 
$ THEN 
$   IF .NOT.silent
d1444 2
a1445 1
$     echo "Will try cc/decc..."
d1447 1
a1447 8
$   SET NOON
$   DEFINE/USER_MODE SYS$ERROR NL:
$   DEFINE/USER_MODE SYS$OUTPUT NL:
$   cc/decc/NoObj/list=ccvms.lis ccvms.c
$   tmp = $status
$   SET ON
$   IF (silent) THEN GOSUB Shut_up
$   IF tmp.NE.%X10B90001
d1449 6
a1454 5
$     echo "Apparently you don't have that one."
$   ELSE
$     GOSUB List_parse
$     echo "You also have: ''line' ''archsufx' ''F$GETSYI("VERSION")'"
$     vms_cc_available = vms_cc_available + "cc/decc "
d1456 3
a1458 6
$ ELSE
$   IF (F$LOCATE("DEC",line).NE.F$LENGTH(line)).or.(F$LOCATE("Compaq",line).NE.F$LENGTH(line)) -
    .or.(F$LOCATE("HP",F$EDIT(line,"UPCASE")).NE.F$LENGTH(line))
$   THEN 
$     vms_cc_dflt = "/decc"
$     vms_cc_available = vms_cc_available + "cc/decc "
d1460 216
a1675 1
$ ENDIF
d1895 1
a1895 1
$   IF Dec_C_Version .GE. 60200000 .AND. F$ELEMENT(0, "-", archname) .NES. "VMS_VAX"
d2090 1
a2090 1
$ IF F$ELEMENT(0, "-", archname) .EQS. "VMS_VAX"
d2095 1
a2095 1
$   IF F$ELEMENT(0, "-", archname) .EQS. "VMS_AXP"
d2245 9
d2262 2
a2263 2
$!
$ IF Has_Dec_C_Sockets
d2266 10
a2275 4
$   echo "You have sockets available via the C library. Should socket support"
$   echo "be built into Perl?"
$   dflt = "DECC"
$   rp = "Choose socket support option (NONE"
d2283 1
d2325 20
d2346 2
a2347 2
$! Ask about threads, if appropriate
$ IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
d2349 5
d2355 1
a2355 2
$   echo "Perl can be built to take advantage of threads on some systems."
$   echo "To do so, configure.com can be run with -""Dusethreads""."
d2357 80
a2436 4
$   echo "Note that Perl built with threading support runs slightly slower"
$   echo "and uses more memory than plain Perl. The current implementation"
$   echo "is believed to be stable, but it is fairly new, and so should be"
$   echo "treated with caution."
a2457 1
$     usethreads = "define"
d2477 1
a2477 1
$     rp = "Use the newer interpreter-based ithreads? [''bool_dflt'] "
d2506 1
a2506 1
$	    IF (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX") .AND. ("''f$extract(1,3, f$getsyi(""version""))'" .GES. "7.2")
a2526 2
$   ELSE
$     usethreads = "undef"
d2531 1
a2531 6
$!
$! Ask if they want to build with MULTIPLICITY
$ echo ""
$ echo "Perl can be built so that multiple Perl interpreters can coexist"
$ echo "within the same Perl executable."
$ IF usethreads .OR. usethreads .EQS. "define"
a2532 98
$   echo "This multiple interpreter support is required for interpreter-based threads."
$   usemultiplicity="define"
$ ELSE
$   bool_dflt = "n"
$   if f$type(usemultiplicity) .nes. "" 
$   then
$     if usemultiplicity .or. usemultiplicity .eqs. "define" then bool_dflt = "y"
$   endif
$   rp = "Build Perl for multiplicity? [''bool_dflt'] "
$   GOSUB myread
$   IF ans
$   THEN
$     usemultiplicity="define"
$   ELSE
$     usemultiplicity="undef"
$   ENDIF
$ ENDIF
$!
$! Ask if they want to build with 64-bit support
$ IF (F$ELEMENT(0, "-", archname).NES."VMS_VAX").and.("''f$extract(1,3, f$getsyi(""version""))'".ges."7.1")
$ THEN
$   bool_dflt = "n"
$   IF F$TYPE(use64bitint) .NES. "" 
$   THEN
$       IF use64bitint .OR. use64bitint .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "You have natively 64-bit long integers."
$   echo ""
$   echo "Perl can be built to take advantage of 64-bit integer types"
$   echo "on some systems, To do so, Configure can be run with -Duse64bitint."
$   echo "Choosing this option will most probably introduce binary incompatibilities."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to use 64-bit integers, if available? [''bool_dflt'] "
$   GOSUB myread
$   use64bitint = ans
$!
$   bool_dflt = "n"
$   IF F$TYPE(use64bitall) .NES. "" 
$   THEN
$       IF use64bitall .OR. use64bitall .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "You may also choose to try maximal 64-bitness.  It means using as much"
$   echo "64-bitness as possible on the platform.  This in turn means even more"
$   echo "binary incompatibilities.  On the other hand, your platform may not"
$   echo "have any more 64-bitness available than what you already have chosen."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to use maximal 64-bit support, if available? [''bool_dflt'] "
$   GOSUB myread
$   use64bitall=ans
$   IF use64bitall .AND. .NOT. use64bitint
$   THEN
$     echo ""
$     echo "Since you have chosen a maximally 64-bit build, I'm also turning on"
$     echo "the use of 64-bit integers."
$     use64bitint="Y"
$   ENDIF
$!
$   bool_dflt = use64bitall
$   IF F$TYPE(uselargefiles) .NES. "" 
$   THEN
$       IF uselargefiles .OR. uselargefiles .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "Perl can be built to understand large files (files larger than 2 gigabytes)"
$   echo "on some systems.  To do so, Configure can be run with -Duselargefiles."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to understand large files, if available? [''bool_dflt'] "
$   GOSUB myread
$   uselargefiles=ans
$!
$   bool_dflt = "n"
$   IF F$TYPE(uselongdouble) .NES. "" 
$   THEN
$       IF uselongdouble .OR. uselongdouble .eqs. "define" THEN bool_dflt = "y"
$   ENDIF
$   echo ""
$   echo "Perl can be built to take advantage of long doubles which"
$   echo "(if available) may give more accuracy and range for floating point numbers."
$   echo ""
$   echo "If this does not make any sense to you, just accept the default '" + bool_dflt + "'."
$   rp = "Try to use long doubles, if available? [''bool_dflt'] "
$   GOSUB myread
$   uselongdouble = ans
$!
$ ENDIF ! not VAX && >= 7.1
$!
$ IF usesitecustomize .OR. usesitecustomize .eqs. "define" 
$ THEN 
$       usesitecustomize = "define"
$ ELSE
$       usesitecustomize = "undef"
$ ENDIF
$!
a2553 16
$!
$! Shortened symbols?
$   echo ""
$   echo "The VMS linker does not handle symbol names longer than 31 characters,"
$   echo "but the compiler can shorten long symbols if requested."
$   bool_dflt = shorten_long_symbols
$   if f$type(useshortenedsymbols) .nes. ""
$   then
$       if useshortenedsymbols .or. useshortenedsymbols .eqs. "define" then bool_dflt = "y"
$       if f$extract(0,1,f$edit(useshortenedsymbols,"collapse,upcase")) .eqs. "N" .or. useshortenedsymbols .eqs. "undef"  then bool_dflt = "n"
$   endif
$   rp = "Build with long symbols shortened? [''bool_dflt'] "
$   GOSUB myread
$   shorten_long_symbols = ans
$ IF F$ELEMENT(0, "-", archname) .NES. "VMS_VAX"
$ THEN
d2574 1
a2578 1
$ useshortenedsymbols = "undef"
a2580 1
$ if (shorten_long_symbols) then useshortenedsymbols = "define"
d2619 25
a2643 349
$! Ask whether they want to use secure logical translation when tainting
$ echo ""
$ echo "As Perl starts up, it checks several logical names, such as"
$ echo "PERL5LIB and PERL_ENV_TABLES, which allow you to modify aspects"
$ echo "of its behavior.  For additional security, you may limit this"
$ echo "process to executive- and kernel-mode translation when tainting"
$ echo "is enabled.  In this case, logical names normally skipped when"
$ echo "tainting is enabled (e.g. PERL5OPTS) are translated as well."
$ echo "If you do not choose to do this, the usual order of access modes"
$ echo "is used for logical name translation."
$ echo ""
$ echo "This restriction does not apply to the %ENV hash or to implicit"
$ echo "logical name translation during parsing of file specifications;"
$ echo "these always use the normal sequence of access modes for logical"
$ echo "name translation."
$ bool_dflt = "y"
$ if f$type(usesecurelog) .nes. "" 
$ then
$   if f$extract(0,1,f$edit(usesecurelog,"collapse,upcase")).eqs."N" .or. usesecurelog .eqs. "undef" then bool_dflt = "n"
$ endif
$ rp = "Use secure logical name translation? [''bool_dflt'] "
$ GOSUB myread
$ d_secintgenv  = ans
$ usesecurelog = "undef"
$ if (d_secintgenv) then usesecurelog = "define"
$!
$! Ask whether they want to default filetypes
$ echo ""
$ echo "When you pass the name of a program to Perl on the command line,"
$ echo "it generally doesn't supply any defaults unless the -S command"
$ echo "line switch is specified.  In keeping with the VMS tradition of"
$ echo "default file types, however, you can configure Perl to try default"
$ echo "file types of nothing, .pl, and .com, in that order (e.g. typing"
$ echo """$ perl foo"" would cause Perl to look for foo., then foo.pl, and"
$ echo "finally foo.com)."
$ echo ""
$ echo "This is currently broken in some configurations. Only enable it if"
$ echo "you know what you are doing."
$ bool_dflt = "n"
$ if f$type(usedefaulttypes) .nes. "" 
$ then
$     if usedefaulttypes .or. usedefaulttypes .eqs. "define" then bool_dflt="y"
$ endif
$ rp = "Always use default file types? [''bool_dflt'] "
$ GOSUB myread
$ d_alwdeftype = ans
$ usedefaulttypes = "undef"
$ if (d_alwdeftype) then usedefaulttypes = "define"
$!
$ dflt = archname
$ rp = "What is your architecture name? [''archname'] "
$ GOSUB myread
$ IF ans.NES.""
$ THEN
$   ans = F$EDIT(ans,"COLLAPSE, UPCASE")
$   IF (ans.NES.archname) !.AND.knowitall
$   THEN
$     echo4 "I'll go with ''archname' anyway..."
$   ENDIF
$ ENDIF
$!
$ IF usethreads .OR. usethreads .EQS. "define"
$ THEN
$   echo4 "Threads selected."
$   IF F$LOCATE("-thread", archname) .EQ. F$LENGTH(archname)
$   THEN
$     archname = "''archname'-thread"
$     echo4 "...setting architecture name to ''archname'."
$   ELSE
$     echo4 "...and architecture name already has -thread."
$   ENDIF
$ ENDIF
$!
$ IF usemultiplicity .OR. usemultiplicity .EQS. "define"
$ THEN
$   echo4 "Multiplicity selected."
$   IF F$LOCATE("-multi", archname) .EQ. F$LENGTH(archname)
$   THEN
$     archname = "''archname'-multi"
$     echo4 "...setting architecture name to ''archname'."
$   ELSE
$     echo4 "...and architecture name already has -multi."
$   ENDIF
$ ENDIF
$!
$ IF uselongdouble .OR. uselongdouble .EQS. "define"
$ THEN
$   echo4 "Long doubles selected."
$   IF F$LOCATE("-ld", archname) .EQ. F$LENGTH(archname)
$   THEN
$     archname = "''archname'-ld"
$     echo4 "...setting architecture name to ''archname'."
$   ELSE
$     echo4 "...and architecture name already has -ld."
$   ENDIF
$ ENDIF
$!
$ bool_dflt = "n"
$ vms_prefix = "perl_root"
$ vms_prefixup = F$EDIT(vms_prefix,"UPCASE")
$ rp = "Will you be sharing your ''vms_prefixup' with ''otherarch'? [''bool_dflt'] "
$ GOSUB myread
$ IF .NOT. ans
$ THEN
$   sharedperl = "N"
$ ELSE
$   sharedperl = "Y"
$   IF (F$ELEMENT(0, "-", archname).EQS."VMS_AXP")
$   THEN
$     macros = macros + """AXE=1"","
$   ENDIF
$   IF (F$ELEMENT(0, "-", archname).EQS."VMS_IA64")
$   THEN
$     macros = macros + """IXE=1"","
$   ENDIF
$ ENDIF
$!
$!: is AFS running?                       !sfn
$!: decide how portable to be.  Allow command line overrides. !sfn
$!: set up shell script to do ~ expansion !sfn
$!: expand filename                       !sfn
$!: now set up to get a file name         !sfn
$!
$ IF F$TYPE(prefix) .EQS. ""
$ THEN
$   prefix = F$ENVIRONMENT("DEFAULT") - ".UU]" + "]"
$   prefix = F$PARSE(prefix,,,,"NO_CONCEAL") - "][" - "000000." - ".000000" - ".;"
$   prefixbase = prefix - "]"
$!  Add _ROOT to make install PERL_ROOT differ from build directory.
$   prefix = prefixbase + "_ROOT.]"
$ ENDIF
$ ! more redundant scrubbing of values
$ prefix = prefix - "000000."
$ IF F$LOCATE(".]",prefix) .EQ. F$LENGTH(prefix) THEN prefix = prefix - "]" + ".]"
$ src = prefix
$!: determine root of directory hierarchy where package will be installed.
$ dflt = prefix
$ IF .NOT.silent 
$ THEN 
$   echo ""
$   echo "By default, ''package' will be installed in ''dflt', pod"
$   echo "pages under ''prefixbase'.LIB.POD], etc..., i.e. with ''dflt' as prefix for"
$   echo "all installation directories."
$   echo "On ''osname' the prefix is used to DEFINE the ''vms_prefixup' prior to installation"
$   echo "as well as during subsequent use of ''package' via ''packageup'_SETUP.COM."
$ ENDIF
$ rp = "Installation prefix to use (for ''vms_prefixup')? [ ''dflt' ] "
$ GOSUB myread
$ IF ans.NES.""
$ THEN 
$   prefix = ans
$   IF F$LOCATE(".]",ans) .EQ. F$LENGTH(ans) THEN prefix = prefix - "]" + ".]"
$ ELSE 
$   prefix = dflt
$ ENDIF
$ perl_root = prefix
$!
$! Check here for pre-existing PERL_ROOT.
$!  -> ask if removal desired.
$! Check here for writability of requested PERL_ROOT if it is not the default (cwd).
$!  -> recommend letting PERL_ROOT be PERL_SRC if requested PERL_ROOT is not writable.
$!
$   tmp = perl_root - ".]" + "]"
$ dflt = f$parse(tmp,,,,)
$   IF dflt .eqs. ""
$   THEN
$       echo4 "''tmp' does not yet exist."
$!      create/directory 'tmp'
$   ELSE
$       echo4 "''tmp' already exists."
$   ENDIF
$!
$ vms_skip_install = "true"
$ bool_dflt = "y"
$! echo ""
$ rp = "Skip the remaining """"where install"""" questions? [''bool_dflt'] "
$ GOSUB myread
$ IF (.NOT.ans) THEN vms_skip_install = "false"
$ IF (.NOT.vms_skip_install)
$ THEN
$!
$!: set the prefixit variable, to compute a suitable default value
$!
$!: determine where private library files go
$!: Usual default is /usr/local/lib/perl5.  Also allow things like 
$!: /opt/perl/lib, since /opt/perl/lib/perl5 would be redundant.
$   IF .NOT.silent 
$   THEN
$     TYPE SYS$INPUT:
$     DECK

There are some auxiliary files for perl5 that need to be put into a
private library directory that is accessible by everyone.
$     EOD
$   ENDIF
$   IF F$TYPE(privlib) .NES. ""
$   THEN dflt = privlib
$   ELSE dflt = "''vms_prefix':[lib]"
$   ENDIF
$   rp = "Pathname where the private library files will reside? " 
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   privlib = ans
$!
$ ENDIF !%Config-I-VMS, skip remaining "where install" questions
$!
$ IF F$TYPE(perl_symbol) .EQS. "" THEN perl_symbol := true
$ IF F$TYPE(perl_verb) .EQS. "" THEN perl_verb = ""
$ IF perl_symbol
$ THEN bool_dflt = "y"
$ ELSE bool_dflt = "n"
$ ENDIF
$ IF .NOT.silent 
$ THEN 
$   echo ""
$   echo "You may choose to write ''packageup'_SETUP.COM to assign a foreign"
$   echo "symbol to invoke ''package', which is the usual method."
$   echO "If you do not do so then you would need a DCL command verb at the"
$   echo "process or the system wide level."
$ ENDIF
$ rp = "Invoke perl as a global symbol foreign command? [''bool_dflt'] "
$ GOSUB myread
$ IF (.NOT.ans) THEN perl_symbol = "false"
$!
$ IF (.NOT.perl_symbol)
$ THEN
$   IF perl_verb .EQS. "DCLTABLES"
$   THEN bool_dflt = "n"
$   ELSE bool_dflt = "y"
$   ENDIF
$   IF .NOT.silent 
$   THEN 
$     echo ""
$     echo "Since you won't be using a symbol you must choose to put the ''packageup'"
$     echo "verb in a per-process table or in the system wide DCLTABLES (which"
$     echo "would require write privilege)."
$   ENDIF
$   rp = "Invoke perl as a per process command verb? [ ''bool_dflt' ] "
$   GOSUB myread
$   IF (.NOT.ans)
$   THEN perl_verb = "DCLTABLES"
$   ELSE perl_verb = "PROCESS"
$   ENDIF
$ ENDIF ! (.NOT.perl_symbol)
$!
$ IF (.NOT.vms_skip_install)
$ THEN
$!: set the prefixup variable, to restore leading tilde escape !sfn
$!
$!: determine where public architecture dependent libraries go
$   IF (.NOT.silent) 
$   THEN 
$     echo ""
$     echo "''package' contains architecture-dependent library files.  If you are"
$   ENDIF
$   IF (.NOT.silent) 
$   THEN
$     TYPE SYS$INPUT:
$     DECK
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.
$     EOD
$   ENDIF
$   IF F$TYPE(archlib) .NES. ""
$   THEN dflt = archlib
$   ELSE dflt = privlib - "]" + "." + archname + "." + version + "]"
$   ENDIF
$   rp = "Where do you want to put the public architecture-dependent libraries? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   archlib = ans
$!
$ ENDIF !%Config-I-VMS, skip "where install" questions
$ IF (.NOT.vms_skip_install)
$ THEN
$!: it so happens the Eunice I know will not run shell scripts in Unix format
$!
$!: see if setuid scripts can be secure           !sfn
$!: now see if they want to do setuid emulation   !sfn
$!
$!: determine where site specific libraries go.
$   IF .NOT.silent 
$   THEN
$     TYPE SYS$INPUT:
$     DECK

The installation process will also create a directory for
site-specific extensions and modules.  Some users find it convenient
to place all local files in this directory rather than in the main
distribution directory.
$     EOD
$   ENDIF
$   IF F$TYPE(sitelib) .NES. ""
$   THEN dflt = sitelib
$   ELSE dflt = privlib - "]" + ".SITE_PERL]"
$   ENDIF
$   rp = "Pathname for the site-specific library files? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   sitelib = ans
$!
$!: determine where site specific architecture-dependent libraries go.
$   IF .NOT.silent 
$   THEN TYPE SYS$INPUT:
$     DECK

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.
$     EOD
$   ENDIF
$   IF F$TYPE(sitearch) .NES. ""
$   THEN dflt = sitearch
$   ELSE dflt = sitelib - "]" + "." + archname + "]"
$   ENDIF
$   rp = "Pathname for the site-specific architecture-dependent library files? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   sitearch = ans
$!
$!: determine where old public architecture dependent libraries might be
$!
$!: determine where public executables go
$   IF F$TYPE(bin) .NES. ""
$   THEN dflt = bin
$!   ELSE dflt = prefix - ".]" + ".BIN]"
$   ELSE dflt = "/''vms_prefix'"
$   ENDIF
$   rp = "Pathname where the public executables will reside? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   bin = ans
$!
$!: determine where add-on public executables go
$   IF F$TYPE(sitebin) .NES. ""
$   THEN dflt = sitebin
$   ELSE dflt = "''vms_prefix':[bin.''archname']"
$   ENDIF
$   rp = "Pathname where the add-on public executables should be installed? "
$   rp = F$FAO("!AS!/!AS",rp,"[ ''dflt' ] ")
$   GOSUB myread
$   sitebin = ans
$!
$!: determine where manual pages are on this system
$!: What suffix to use on installed man pages
$!: see if we can have long filenames
$!: determine where library module manual pages go
$!: What suffix to use on installed man pages
$!: see what memory models we can support
d2645 22
a2666 54
$ ELSE ! skipping "where install" questions, we must set some symbols
$   IF F$TYPE(archlib).EQS."" THEN -
      archlib="''vms_prefix':[lib.''archname'.''version']"
$   IF F$TYPE(bin) .EQS. "" THEN -
      bin="/''vms_prefix'"
$   IF F$TYPE(privlib) .EQS. "" THEN -
      privlib ="''vms_prefix':[lib]"
$   IF F$TYPE(sitearch) .EQS. "" THEN -
      sitearch="''vms_prefix':[lib.site_perl.''archname']"
$   IF F$TYPE(sitelib) .EQS. "" THEN -
      sitelib ="''vms_prefix':[lib.site_perl]"
$   IF F$TYPE(sitebin) .EQS. "" THEN -
      sitebin="''vms_prefix':[bin.''archname']"
$ ENDIF !%Config-I-VMS, skip "where install" questions
$!
$! These derived locations can be set whether we've opted to
$! skip the where install questions or not.
$!
$ IF F$TYPE(archlibexp) .EQS. "" THEN -
    archlibexp="''vms_prefix':[lib.''archname'.''version']"
$ IF F$TYPE(binexp) .EQS. "" THEN -
    binexp ="''vms_prefix':[000000]"
$ IF F$TYPE(builddir) .EQS. "" THEN -
    builddir ="''vms_prefix':[000000]"
$ IF F$TYPE(installarchlib) .EQS. "" THEN -
    installarchlib="''vms_prefix':[lib.''archname'.''version']"
$ IF F$TYPE(installbin) .EQS. "" THEN -
    installbin ="''vms_prefix':[000000]"
$ IF F$TYPE(installscript) .EQS. "" THEN -
    installscript ="''vms_prefix':[utils]"
$ IF F$TYPE(installman1dir) .EQS. "" THEN -
    installman1dir ="''vms_prefix':[man.man1]"
$ IF F$TYPE(installman3dir) .EQS. "" THEN -
    installman3dir ="''vms_prefix':[man.man3]"
$ IF F$TYPE(installprivlib) .EQS. "" THEN -
    installprivlib ="''vms_prefix':[lib]"
$ IF F$TYPE(installsitearch) .EQS. "" THEN -
    installsitearch="''vms_prefix':[lib.site_perl.''archname']"
$ IF F$TYPE(installsitelib) .EQS. "" THEN -
    installsitelib ="''vms_prefix':[lib.site_perl]"
$ IF F$TYPE(oldarchlib) .EQS. "" THEN -
    oldarchlib="''vms_prefix':[lib.''archname']"
$ IF F$TYPE(oldarchlibexp) .EQS. "" THEN -
    oldarchlibexp="''vms_prefix':[lib.''archname']"
$ IF F$TYPE(privlibexp) .EQS. "" THEN -
    privlibexp ="''vms_prefix':[lib]"
$ IF F$TYPE(scriptdir) .EQS. "" THEN -
    scriptdir ="''vms_prefix':[utils]"
$ IF F$TYPE(sitearchexp) .EQS. "" THEN -
    sitearchexp ="''vms_prefix':[lib.site_perl.''archname']"
$ IF F$TYPE(sitelib_stem) .EQS. "" THEN -
    sitelib_stem ="''vms_prefix':[lib.site_perl]"
$ IF F$TYPE(sitelibexp) .EQS. "" THEN -
    sitelibexp ="''vms_prefix':[lib.site_perl]"
d2840 1
a2840 1
$ IF .NOT. Has_Dec_C_Sockets
d3025 1
a3025 1
$   IF (F$ELEMENT(0, "-", archname).EQS."VMS_IA64")
a3029 1
$ names_flags = ""
d3032 1
a3032 14
$   names_flags = "AS_IS"
$ ENDIF
$ IF shorten_long_symbols
$ THEN
$   IF be_case_sensitive
$   THEN
$     names_flags = "''names_flags',SHORTENED"
$   ELSE
$     names_flags = "SHORTENED"
$   ENDIF
$ ENDIF
$ IF F$LENGTH(names_flags) .ne. 0
$ THEN
$   extra_flags = "''extra_flags'" + "/NAMES=(''names_flags')"
a3033 1
$ DELETE/SYMBOLS names_flags
d3051 31
a3157 6
$ IF shorten_long_symbols
$ THEN
$   d_vms_shorten_long_symbols = "define"
$ ELSE
$   d_vms_shorten_long_symbols = "undef"
$ ENDIF
a3192 1
$   nvEUformat="""LE"""
a3193 1
$   nvFUformat="""LF"""
a3194 1
$   nvGUformat="""LG"""
a3197 1
$   nvEUformat="""E"""
a3198 1
$   nvFUformat="""F"""
a3199 1
$   nvGUformat="""G"""
d3219 1
a3219 1
$ IF (sharedperl .AND. F$ELEMENT(0, "-", archname) .EQS. "VMS_AXP")
d3227 1
a3227 1
$   IF (sharedperl .AND. F$ELEMENT(0, "-", archname) .EQS. "VMS_IA64")
d3263 6
a3268 1
$ libs=" "
d3281 1
a3281 1
$ IF F$ELEMENT(0, "-", archname) .NES. "VMS_VAX"
a3283 1
$   d_PRIi64 = "define"
a3303 1
$   d_PRIi64 = "undef"
d3339 2
d3346 2
d3730 1
a3730 1
$ IF Has_Dec_C_Sockets
d3739 7
a3745 2
$   WS "#include <time.h>"
$   WS "#include <socket.h>"
d3779 4
d3965 1
a3965 1
$ IF Has_Dec_C_Sockets
d3973 7
a3979 2
$   WS "#include <time.h>"
$   WS "#include <socket.h>"
d4439 5
d4449 2
a4450 1
$!     echo "Ok, turning on sfio then."
d4501 1
a4501 1
$ IF Has_Dec_C_Sockets
d4512 1
a4512 1
$ IF Has_Dec_C_Sockets
d4523 1
a4523 1
$ IF Has_Dec_C_Sockets
d4530 4
a4533 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4549 1
a4549 1
$ IF Has_Dec_C_Sockets
d4556 4
a4559 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4575 1
a4575 1
$ IF Has_Dec_C_Sockets
d4582 4
a4585 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4601 1
a4601 1
$ IF Has_Dec_C_Sockets
d4608 4
a4611 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4627 1
a4627 1
$ IF Has_Dec_C_Sockets
d4634 4
a4637 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4653 1
a4653 1
$ IF Has_Dec_C_Sockets
d4660 4
a4663 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4679 1
a4679 1
$ IF Has_Dec_C_Sockets
d4686 4
a4689 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4705 1
a4705 1
$ IF Has_Dec_C_Sockets
d4712 4
a4715 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4731 1
a4731 1
$ IF Has_Dec_C_Sockets
d4738 4
a4741 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4757 1
a4757 1
$ IF Has_Dec_C_Sockets
d4764 4
a4767 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4783 1
a4783 1
$ IF Has_Dec_C_Sockets
d4790 4
a4793 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
d4809 1
a4809 1
$ IF Has_Dec_C_Sockets
d4816 4
a4819 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
a4832 60
$!
$! Check for sa_len
$!
$ echo4 "Checking the availability of sa_len in the sockaddr struct ..."
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#if defined(__DECC) || defined(__DECCXX)"
$   WS "#include <stdlib.h>"
$   WS "#endif"
$   WS "#define _SOCKADDR_LEN"
$   WS "#include <types.h>"
$   WS "#include <socket.h>"
$   WS "int main() {"
$   WS "struct sockaddr sa;"
$   WS "return (sa.sa_len);"
$   WS "}"
$   CS
$   GOSUB compile_ok
$   IF compile_status .EQ. good_compile
$   THEN
$     d_sockaddr_sa_len="define"
$     echo "You have sa_len in the sockaddr struct."
$   ELSE
$     d_sockaddr_sa_len="undef"
$     echo "You do not have sa_len in the sockaddr struct."
$   ENDIF
$ ELSE
$   d_sockaddr_sa_len="undef"
$   echo "You do not have sa_len in the sockaddr struct."
$ ENDIF
$!
$! Check for sin6_scope_id
$!
$ echo4 "Checking the availability of sin6_scope_id in the struct sockaddr_in6 ..."
$ IF Has_Dec_C_Sockets
$ THEN
$   OS
$   WS "#include <types.h>"
$   WS "#include <socket.h>"
$   WS "#include <in.h>"
$   WS "int main() {"
$   WS "struct sockaddr_in6 sin6;"
$   WS "return (sin6.sin6_scope_id);"
$   WS "}"
$   CS
$   GOSUB compile_ok
$   IF compile_status .EQ. good_compile
$   THEN
$     d_sin6_scope_id="define"
$     echo "You have sin6_scope_id in the sockaddr_in6 struct."
$   ELSE
$     d_sin6_scope_id="undef"
$     echo "You do not have sin6_scope_id in the sockaddr_in6 struct."
$   ENDIF
$ ELSE
$   d_sin6_scope_id="undef"
$   echo "You do not have sin6_scope_id in the sockaddr_in6 struct."
$ ENDIF
$!
d4852 1
a4852 1
$ IF Has_Dec_C_Sockets
d4860 4
a4863 1
$   IF i_netdb .EQS. "define" THEN WS "#include <netdb.h>"
a4994 27
$! Check for st_ino size.
$!
$ st_ino_size = 4
$ OS
$ WS "#include <sys/stat.h>"
$ WS "#include <stdio.h>"
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>
$ WS "#endif"
$ WS "int main() {
$ WS "#''uselargefiles' _LARGEFILE"
$ WS "#ifdef _LARGEFILE"
$ WS "    printf(""%d\n"", sizeof(__ino64_t));"
$ WS "#else"
$ WS "    printf(""%d\n"", sizeof(unsigned short)*3);"
$ WS "#endif"
$ WS "    exit(0);"
$ WS "}"
$ CS
$ GOSUB link_ok
$ IF link_status .EQ. good_link
$ THEN
$   GOSUB just_mcr_it
$   st_ino_size = tmp
$ ENDIF
$ echo "Your st_ino size is ''st_ino_size' bytes."
$!
d5009 1
a5009 1
$  IF (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5027 1
a5027 1
$    IF (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5069 1
a5069 1
$    IF (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5103 1
a5103 1
$  if (vms_ver .GES. "7.3-2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5137 1
a5137 1
$!$  if (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5155 1
a5155 1
$  if (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
d5331 2
a5332 1
$   sig_count="17
d5382 6
a5387 1
$   d_nl_langinfo="define"
d5415 1
a5415 1
$ if Has_Dec_C_Sockets
d5421 1
a5421 1
$   if (vms_ver .GES. "8.2") .AND. (F$ELEMENT(0, "-", archname) .NES. "VMS_VAX")
a5473 1
$ d_oldpthreads="undef"
d5478 6
d5485 1
d5755 15
a5836 4
$ WC "api_revision='" + api_revision + "'"
$ WC "api_subversion='" + api_subversion + "'"
$ WC "api_version='" + api_version + "'" 
$ WC "api_versionstring='" + version + "'" 
d5888 3
a5890 3
$ WC "d_PRIEUldbl='" + d_PRIEUldbl + "'"
$ WC "d_PRIFUldbl='" + d_PRIFUldbl + "'"
$ WC "d_PRIGUldbl='" + d_PRIGUldbl + "'"
a5895 1
$ WC "d_PRIi64='" + d_PRIi64 + "'"
a5916 2
$ WC "d_prctl='undef'"
$ WC "d_prctl_set_name='undef'"
a6044 1
$ WC "d_ipv6_mreq='define'"
a6045 1
$ WC "d_isblank='undef'"
a6185 1
$ WC "d_sin6_scope_id='" + d_sin6_scope_id + "'"
a6186 2
$ WC "d_sockaddr_in6='define'"
$ WC "d_sockaddr_sa_len='" + d_sockaddr_sa_len + "'"
a6202 1
$ WC "d_static_inline='define'"
a6268 1
$ WC "d_vms_shorten_long_symbols='" + d_vms_shorten_long_symbols + "'" ! VMS
a6372 6
$ IF (ccname .EQS. "DEC") .AND. (F$INTEGER(Dec_C_Version).GE.60400000)
$ THEN
$   WC "i_stdbool='define'"
$ ELSE
$   WC "i_stdbool='undef'"
$ ENDIF
a6477 1
$ WC "nvEUformat='" + nvEUformat + "'"
a6478 1
$ WC "nvFUformat='" + nvFUformat + "'"
a6479 1
$ WC "nvGUformat='" + nvGUformat + "'"
a6498 1
$ WC "perl_static_inline='static inline'"
d6523 4
a6526 4
$ WC "sPRIEUldbl='" + sPRIEUldbl + "'"
$ WC "sPRIFUldbl='" + sPRIFUldbl + "'"
$ WC "sPRIGUldbl='" + sPRIGUldbl + "'"
$ WC "sPRIXU64='" + sPRIXU64 + "'"
d6530 1
a6530 1
$ WC "sPRIi64='" + sPRIi64 + "'"
a6583 2
$ WC "st_ino_size='" + st_ino_size + "'"
$ WC "st_ino_sign='1'"
a6619 2
$ WC "usekernprocpathname='undef'"
$ WC "usensgetexecutablepath='undef'"
d6625 1
a6625 1
$ WC "useperlio='define'"
a6629 1
$ WC "useshortenedsymbols='" + useshortenedsymbols + "'"    ! VMS-specific
d6850 2
a6864 1
$ IF shorten_long_symbols THEN WC "#define VMS_SHORTEN_LONG_SYMBOLS"
d6869 1
a6869 1
$ IF F$ELEMENT(0, "-", archname) .EQS. "VMS_VAX" .AND. -
a6878 1
$ IF d_sockaddr_sa_len .EQS. "define" then WC "#define _SOCKADDR_LEN 1"
d6916 6
a6921 1
$   SOCKET_REPLACE = "SOCKET="
d6925 6
a6930 1
$   THREAD_REPLACE = "THREAD=THREADED=1"
a6970 1
$ WC "ARCHNAME=ARCHNAME=''archname'"
d7096 2
a7097 2
$   IF (sharedperl .AND. F$ELEMENT(0, "-", archname) .EQS. "VMS_AXP") THEN ext := .AXE
$   IF (sharedperl .AND. F$ELEMENT(0, "-", archname) .EQS. "VMS_IA64") THEN ext := .IXE
d7206 4
a7233 1
$ WRITE CONFIG "$ ptargrep   == """ + perl_setup_perl + " ''vms_prefix':[utils]ptargrep.com"""
a7236 1
$ WRITE CONFIG "$ zipdetails == """ + perl_setup_perl + " ''vms_prefix':[utils]zipdetails.com"""
a7315 5
$   IF ( F$SEARCH("[.CXX_REPOSITORY]*.*").NES."" ) 
$   THEN 
$     DELETE/NOLOG/NOCONFIRM [.CXX_REPOSITORY]*.*;*
$     SET PROTECTION=(SYSTEM:RWED,OWNER:RWED) CXX_REPOSITORY.DIR
$   ENDIF
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d929 1
a929 1
$   config_symbols2 ="|prefix|privlib|privlibexp|scriptdir|sitearch|sitearchexp|sitebin|sitelib|sitelib_stem|sitelibexp|usecxx|use64bitall|use64bitint|"
d932 1
a932 1
$   config_symbols5 ="|buildmake|builder|usethreadupcalls|usekernelthreads|useshortenedsymbols|useversionedarchname"
d1397 3
a1399 1
$! In order to build with the HP C++ compiler, invoke configure.com with "-Dusecxx" on
d1402 3
a1404 2
$ IF F$TYPE(usecxx) .EQS. "" THEN usecxx := n
$ IF usecxx .OR. usecxx .EQS. "define"
d1445 1
a1445 1
$     ld_try = "Link/nodebug"
d1485 1
a1485 6
$   IF usecxx .OR. usecxx .EQS. "define"
$   THEN
$     dflt = "cxx"
$   ELSE
$     dflt = "cc''vms_cc_dflt'"  !-> "cc" in case first compile went OK
$   ENDIF
a1753 2
$   echo4 "adding /NOANSI_ALIAS qualifier to ccflags."
$   ccflags = ccflags + "/NOANSI_ALIAS"
a2377 21
$ bool_dflt = "n"
$ if f$type(useversionedarchname) .nes. ""
$ then
$   if useversionedarchname .or. useversionedarchname .eqs. "define" then bool_dflt = "y"
$ endif
$ rp = "Add the Perl API version to your archname? [''bool_dflt'] "
$ GOSUB myread
$ IF ans
$ THEN
$   useversionedarchname = "define"
$   IF F$LOCATE("-''version'", archname) .EQ. F$LENGTH(archname)
$   THEN
$     archname = "''archname'-''version'"
$     echo4 "...setting architecture name to ''archname'."
$   ELSE
$     echo4 "...and architecture name already has -''version'."
$   ENDIF
$ ELSE
$   useversionedarchname = "undef"
$ ENDIF
$!
a3556 2
$ WS "#elif defined (__STD_ANSI)" ! for CXX
$ WS "printf(""42\n"");"
d3567 2
a3568 2
$   echo4 "Oh!  Smells like ANSI's been here."
$   echo "We can catify or stringify, separately or together!"
d4174 1
a4174 1
$ WS "place = (char *)memchr(""foo"", 47, 3);"
a4832 1
$   WS "#include <string.h>"
a4834 1
$   WS "memset((char *)&sa, 0, sizeof(sa));"
a4860 1
$   WS "#include <string.h>"
a4862 1
$   WS "memset((char *)&sin6, 0, sizeof(sin6));"
d5105 2
a5106 1
$      WS "#include <stdlib.h>"
d5307 1
a5307 6
$   IF ccname .EQS. "CXX"
$   THEN
$      vms_cc_type="cxx"
$   ELSE
$      vms_cc_type="cc"
$   ENDIF
d5311 28
a5338 24
$ d_bcmp="define"
$ d_getitimer="define"
$ d_gettimeod="define"
$ d_mmap="define"
$ d_mprotect="define"
$ d_munmap="define"
$ d_msync="define"
$ d_ualarm="define"
$ d_uname="define"
$! d_unsetenv="define" ! Fix me - Activating requires changing VMS code
$ d_unsetenv="undef"   ! Change will be needed to allow GNV integration
$ d_clearenv="undef"
$ d_usleep="define"
$ d_setitimer="define"
$ d_sigaction="define"
$ d_sigprocmask="define"
$ d_truncate="define"
$ d_wait4="define"
$ d_index="define"
$ pidtype="pid_t"
$ sig_name1="ZERO HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE"
$ sig_name2=" ALRM TERM USR1 USR2 NUM18 NUM19 CHLD CONT STOP TSTP TTIN TTOU DEBUG"
$ IF (vms_ver .GES. "7.3")
$ THEN
d5340 1
a5340 1
$ ENDIF
d5347 5
a5351 5
$ sig_name = sig_name1 + sig_name2
$ sig_num = ""
$ sig_num_init = ""
$ sig_name_init = ""
$ sig_index = 0
d5375 34
a5408 1
$!
d5434 1
a5434 1
$ IF ccname .EQS. "DEC" .OR. ccname .EQS. "CXX"
d5668 1
a5668 1
$   d_nv_preserves_uv = "undef"
a5794 8
$   WS "#define sys$sigprc SYS$SIGPRC"
$   WS "#ifdef __cplusplus"
$   WS "extern ""C"" {"
$   WS "#endif"
$   WS "    int sys$sigprc(unsigned int *,void *,unsigned int);"
$   WS "#ifdef __cplusplus"
$   WS "}"
$   WS "#endif"
d5800 1
a5800 1
$   WS "    int iss;"
d5830 1
d5833 1
a5891 1
$ WC "bootstrap_charset='undef'"
a6095 2
$ WC "d_ip_mreq='define'"
$ WC "d_ip_mreq_source='undef'"
a6096 1
$ WC "d_ipv6_mreq_source='undef'"
d6202 3
a6204 14
$ IF ("''F$EXTRACT(1,3, F$GETSYI(""VERSION""))'".GES."8.4")
$ THEN
$   WC "d_sem='define'"
$   WC "d_semctl_semid_ds='define'"
$   WC "d_semctl_semun='define'"
$   WC "d_semget='define'"
$   WC "d_semop='define'"
$ ELSE
$   WC "d_sem='undef'"
$   WC "d_semctl_semid_ds='undef'"
$   WC "d_semctl_semun='undef'"
$   WC "d_semget='undef'"
$   WC "d_semop='undef'"
$ ENDIF
d6347 1
a6347 1
$ WC "dlsrc='dl_vms.xs'"
d6394 1
a6394 1
$ WC "i_dirent='undef'"	! we roll our own
d6431 1
a6431 1
$ IF ccname .EQS. "DEC" .AND. F$INTEGER(Dec_C_Version).GE.60400000
a6708 1
$ WC "useversionedarchname='" + useversionedarchname + "'"
a6930 3
$ ENDIF
$ IF uselongdouble .OR. uselongdouble .EQS. "define"
$ THEN
d6941 7
a6951 2
$ IF ccname .EQS. "CXX" then WC "#define NO_ENVIRON_ARRAY"
$ IF ccname .EQS. "CXX" then WC "#define VMS" ! only has __VMS by default
@


1.1.1.15
log
@Import perl-5.20.1
@
text
@d121 2
d125 1
a125 1
$!libswanted="$libswanted ld sun m c cposix posix ndir dir crypt" !sfn
d1983 1
d2009 1
a2009 1
$   echo "Perl can be built to offer a form of threading support on some systems."
d2013 3
a2015 1
$   echo "and uses slightly more memory than plain Perl."
d2022 1
a2022 1
$!  Catch cases where user specified ithreads but
d2028 4
d2039 9
d2055 1
a2055 5
$         if use5005threads .or. use5005threads .eqs. "define"
$         then
$             echo "5.005 threads are no longer supported"
$             exit 44
$         endif
d2060 6
a2065 1
$     use_5005_threads="N"
d2476 1
a2476 1
$ src = prefix - "_ROOT."
d2804 1
a2804 1
$ xs_extensions = ""
d2848 1
a2848 1
$ xxx = xs_extensions
d2886 1
a2886 4
$   IF F$SEARCH("[-.ext.''extension_dir_name']*.xs") .EQS. "" -
        .AND. F$SEARCH("[-.dist.''extension_dir_name']*.xs") .EQS. "" -
        .AND. F$SEARCH("[-.cpan.''extension_dir_name']*.xs") .EQS. "" -
        .AND. extension_dir_name .NES. "VMS-Filespec"
d2896 1
a2896 1
$       xs_extensions = xs_extensions + " ''extspec'"
d2906 2
a2907 2
$ xs_extensions = F$EDIT(xs_extensions,"TRIM,COMPRESS")
$ dflt = xs_extensions
a3406 3
$ use5005threads = "undef"
$ d_old_pthread_create_joinable = "undef"
$ old_pthread_create_joinable = " "
d3409 12
a3420 1
$    useithreads = "define"
d3422 3
d4484 30
a4513 37
$! Check for the shm* routines.
$!
$ OS
$ WS "#if defined(__DECC) || defined(__DECCXX)"
$ WS "#include <stdlib.h>"
$ WS "#endif"
$ WS "#include <stdio.h>"
$ WS "#include <sys/shm.h>"
$ WS "#include <sys/stat.h>"
$ WS "int shmget(key_t key, size_t size, int shmflg);"
$ WS "void* shmat(int shmid,const void *shmaddr,int shmflg);"
$ WS "int shmctl(int shmid,  int cmd, struct shmid_ds *buf);"
$ WS "int shmdt(const void *shmaddr);"
$ WS "int main() {"
$ WS "int shm_id = shmget(IPC_PRIVATE, 8, S_IRWXU);"
$ WS "if (shm_id == -1) printf(""0\n""); else printf (""1\n"");"
$ WS "}"
$ CS
$ GOSUB compile
$ IF tmp .EQS. "1"
$ THEN
$   d_shm = "define"
$   d_shmat = "define"
$   d_shmatprototype = "define"
$   d_shmctl = "define"
$   d_shmdt = "define"
$   d_shmget = "define"
$   shmattype = "void *"
$ ELSE
$   d_shm = "undef"
$   d_shmat = "undef"
$   d_shmatprototype = "undef"
$   d_shmctl = "undef"
$   d_shmdt = "undef"
$   d_shmget = "undef"
$   shmattype = "undef"
$ ENDIF
a4559 23
$! Check for <arpa/inet.h>
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   tmp = "arpa/inet.h"
$   GOSUB inhdr
$   i_arpainet = tmp
$ ELSE
$   i_arpainet="undef"
$ ENDIF
$!
$! Check for <sys/un.h>
$!
$ IF Has_Dec_C_Sockets
$ THEN
$   tmp = "sys/un.h"
$   GOSUB inhdr
$   i_sysun = tmp
$ ELSE
$   i_sysun="undef"
$ ENDIF
$!
$!
d5254 1
a5254 1
$  d_statvfs = "undef"
d5260 1
a5260 1
$    d_statvfs = "define"
d5266 52
a5317 9
$ echo4 "Using our internal random number implementation..."
$!
$ randfunc = "Perl_drand48"
$ drand01 = "Perl_drand48()"
$ seedfunc = "Perl_drand48_init"
$ randbits = "48"
$ randseedtype = "U32"
$ d_drand48proto = "define"
$!
d5766 1
a5766 2
$ echo4 "Checking if kill() uses SYS$FORCEX, can't be called from a signal handler,"
$ echo4 "or fails to handle a signal value of zero..."
d5780 1
a5780 2
$ WS "    kill(getpid(),0);"
$ WS "    printf(""3\n"");"
d5785 1
a5785 1
$ IF tmp .NES. "0123"
d5977 1
a5977 1
$ WC "d_bsd='undef'"
a5989 1
$ WC "d_closedir='define'"
d6007 1
a6007 8
$ IF ("''F$EXTRACT(1,3, F$GETSYI(""VERSION""))'".GES."7.2")
$ THEN
$   WC "d_dlerror='define'"
$   WC "d_dlopen='define'"
$ ELSE
$   WC "d_dlerror='undef'"
$   WC "d_dlopen='undef'"
$ ENDIF
a6026 2
$ WC "d_fd_macros='define'"
$ WC "d_fds_bits='define'"
a6047 1
$ WC "d_ftime='define'"
d6051 1
a6051 6
$ IF vms_ver .GES. "7.3"
$ THEN
$   WC "d_getaddrinfo='define'"
$ ELSE
$   WC "d_getaddrinfo='undef'"
$ ENDIF
d6066 1
a6066 6
$ IF vms_ver .GES. "7.3"
$ THEN
$   WC "d_getnameinfo='define'"
$ ELSE
$   WC "d_getnameinfo='undef'"
$ ENDIF
d6097 3
a6099 3
$ WC "d_inetaton='define'"
$ WC "d_inetntop='define'"
$ WC "d_inetpton='define'"
a6148 4
$ WC "d_msgctl='undef'"
$ WC "d_msgget='undef'"
$ WC "d_msgrcv='undef'"
$ WC "d_msgsnd='undef'"
a6158 1
$ WC "d_ndbm='undef'"
a6169 1
$ WC "d_oldsock='undef'"
a6176 1
$ WC "d_portable='define'"
a6212 1
$   WC "d_semctl='define'"
a6218 1
$   WC "d_semctl='undef'"
d6251 3
a6253 6
$ WC "d_shm='" + d_shm + "'"
$ WC "d_shmat='" + d_shmat + "'"
$ WC "d_shmatprototype='" + d_shmatprototype + "'"
$ WC "d_shmctl='" + d_shmctl + "'"
$ WC "d_shmdt='" + d_shmdt + "'"
$ WC "d_shmget='" + d_shmget + "'"
a6286 1
$ WC "d_statvfs='" + d_statvfs + "'"
a6308 1
$ WC "d_sysernlst='undef'"
a6340 1
$ WC "d_vendorbin='undef'"
a6341 1
$ WC "d_vendorscript='undef'"
a6346 2
$ WC "d_voidsig='undef'"
$ WC "d_voidtty='" + "'"
a6354 1
$ WC "d_xenix='undef'"
d6361 1
a6397 2
$ WC "h_fcntl='false'"
$ WC "h_sysfile='false'"
d6408 1
a6408 1
$ WC "i_arpainet='" + i_arpainet + "'"
a6409 1
$ WC "i_bsdioctl='undef'"
a6430 1
$ WC "i_malloc='undef'"
d6445 1
a6462 2
$ WC "i_sysfilio='undef'"
$ WC "i_sysin='undef'"
d6483 1
a6483 1
$ WC "i_sysun='" + i_sysun + "'"
a6494 1
$ WC "i_varhdr='stdarg.h'"
d6515 1
a6515 1
$! The xs_extensions symbol may be quite long
d6517 3
a6519 1
$ WC/symbol "known_extensions='", xs_extensions, " ", nonxs_ext, " ", nonxs_ext2, "'"
a6520 1
$ WC "ld_can_script='undef'"
a6523 1
$ WC "ldlibpthname='" + "'"
d6630 1
a6630 1
$ WC "shmattype='" + shmattype + "'"
a6680 1
$ WC "targetsh='MCR'"
d6752 1
a7031 7
$ IF use_vmsdebug_perl
$ THEN
$   DEBUG_REPLACE = "USEVMSDEBUG=__DEBUG__=1"
$ ELSE
$   DEBUG_REPLACE = "USEVMSDEBUG="
$ ENDIF
$ PREFIX_REPLACE = "PREFIX=PREFIX=''prefix'"
a7052 2
$ WC "''DEBUG_REPLACE'"
$ WC "''PREFIX_REPLACE'"
d7220 19
a7238 14
$ WRITE CONFIG "$ if P1 .EQS. """""
$ WRITE CONFIG "$ then"
$ WRITE CONFIG "$   myproc = f$environment(""PROCEDURE"")"
$ WRITE CONFIG "$   myroot_dev = f$parse(myproc,,,""DEVICE"",""NO_CONCEAL"")"
$ WRITE CONFIG "$   myroot_dir = f$parse(myproc,,,""DIRECTORY"",""NO_CONCEAL"")"
$ WRITE CONFIG "$   myroot_dir = myroot_dir - ""][000000."" - ""><000000."""
$ WRITE CONFIG "$   myroot_dir = myroot_dir - ""][000000]"" - ""><000000>"""
$ WRITE CONFIG "$   myroot_dir = myroot_dir - ""]["" - ""><"""
$ WRITE CONFIG "$   myroot_dir = myroot_dir - "".]"" - "".>"" - ""["" - ""]"" - ""<"" - "">"""
$ WRITE CONFIG "$   root_spec = myroot_dev + ""["" + myroot_dir + "".]"""
$ WRITE CONFIG "$ else"
$ WRITE CONFIG "$   root_spec = P1"
$ WRITE CONFIG "$ endif"
$ WRITE CONFIG "$ define/translation=concealed ''vms_prefix' 'root_spec'"
d7284 4
d7300 1
@


