head	1.20;
access;
symbols
	PERL_5_24_2:1.1.1.17
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	PERL_5_20_2:1.1.1.16
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	PERL_5_20_1:1.1.1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	PERL_5_18_2:1.1.1.15
	PERL:1.1.1
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	PERL_5_16_3:1.1.1.14
	OPENBSD_5_3:1.14.0.10
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.8
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	PERL_5_12_2:1.1.1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.20
date	2017.08.14.13.48.45;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	CrMEpTqBUsxCMTjx;

1.19
date	2017.02.05.00.31.53;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	cxJ08BvJA9Pt2PTM;

1.18
date	2016.07.03.01.07.48;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	GzHqjSTnBjdF7Wcw;

1.17
date	2014.11.17.20.56.48;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	QP75iYx42Uo7mMxO;

1.16
date	2014.03.24.15.05.13;	author afresh1;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.25.20.40.45;	author sthen;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.24.15.06.42;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.12.18.24.21;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.29.17.35.58;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.28.19.22.58;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.15.21.30.21;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.09.18.08.56;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.00;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.22;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.19;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.34.56;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.04.20;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.49.13;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.11.48;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.11.48;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.37.49;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.08.46;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.22.19;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.35;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.12.54;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.45.46;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.16.33;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.47.39;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.08;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.35;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2010.09.24.14.48.29;	author millert;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2013.03.25.20.06.35;	author sthen;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.03.24.14.58.47;	author afresh1;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2014.11.17.20.52.38;	author afresh1;	state Exp;
branches;
next	1.1.1.17;
commitid	B31cAbBIXiCqnL97;

1.1.1.17
date	2017.08.14.13.45.28;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.20
log
@Fix merge issues, remove excess files - match perl-5.24.2 dist

OK bluhm@@, Reads ok sthen@@
@
text
@/* -*- buffer-read-only: t -*-
 *
 *    proto.h
 *
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
 *    2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/embed.pl from data in embed.fnc,
 * regen/embed.pl, regen/opcodes, intrpvar.h and perlvars.h.
 * Any changes made here will be lost!
 *
 * Edit those files and run 'make regen_headers' to effect changes.
 */

START_EXTERN_C
PERL_CALLCONV UV	ASCII_TO_NEED(const UV enc, const UV ch)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing);
#define PERL_ARGS_ASSERT_GV_AMUPDATE	\
	assert(stash)
PERL_CALLCONV UV	NATIVE_TO_NEED(const UV enc, const UV ch)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV const char *	Perl_PerlIO_context_layers(pTHX_ const char *mode);
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ size_t sz)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op);
#define PERL_ARGS_ASSERT_SLAB_FREE	\
	assert(op)
PERL_CALLCONV SV*	Perl__get_encoding(pTHX)
			__attribute__pure__;

PERL_CALLCONV bool	Perl__is_in_locale_category(pTHX_ const bool compiling, const int category);
PERL_CALLCONV bool	Perl__is_uni_FOO(pTHX_ const U8 classnum, const UV c)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl__is_uni_perl_idcont(pTHX_ UV c)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl__is_uni_perl_idstart(pTHX_ UV c)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl__is_utf8_FOO(pTHX_ const U8 classnum, const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_FOO	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_idcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_IDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_idstart(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_IDSTART	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_mark(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_MARK	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_perl_idcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_PERL_IDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_perl_idstart(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_PERL_IDSTART	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_xidcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_XIDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_xidstart(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_XIDSTART	\
	assert(p)

PERL_CALLCONV UV	Perl__to_uni_fold_flags(pTHX_ UV c, U8 *p, STRLEN *lenp, U8 flags);
#define PERL_ARGS_ASSERT__TO_UNI_FOLD_FLAGS	\
	assert(p); assert(lenp)
PERL_CALLCONV UV	Perl__to_utf8_fold_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, U8 flags);
#define PERL_ARGS_ASSERT__TO_UTF8_FOLD_FLAGS	\
	assert(p); assert(ustrp)
PERL_CALLCONV UV	Perl__to_utf8_lower_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags);
#define PERL_ARGS_ASSERT__TO_UTF8_LOWER_FLAGS	\
	assert(p); assert(ustrp)
PERL_CALLCONV UV	Perl__to_utf8_title_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags);
#define PERL_ARGS_ASSERT__TO_UTF8_TITLE_FLAGS	\
	assert(p); assert(ustrp)
PERL_CALLCONV UV	Perl__to_utf8_upper_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags);
#define PERL_ARGS_ASSERT__TO_UTF8_UPPER_FLAGS	\
	assert(p); assert(ustrp)
PERL_CALLCONV void	Perl__warn_problematic_locale(void);
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ const char *const name, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_ALLOCMY	\
	assert(name)
PERL_CALLCONV SV*	Perl_amagic_call(pTHX_ SV* left, SV* right, int method, int dir);
#define PERL_ARGS_ASSERT_AMAGIC_CALL	\
	assert(left); assert(right)
PERL_CALLCONV SV *	Perl_amagic_deref_call(pTHX_ SV *ref, int method);
#define PERL_ARGS_ASSERT_AMAGIC_DEREF_CALL	\
	assert(ref)
PERL_CALLCONV bool	Perl_amagic_is_enabled(pTHX_ int method);
PERL_CALLCONV I32	Perl_apply(pTHX_ I32 type, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_APPLY	\
	assert(mark); assert(sp)
PERL_CALLCONV void	Perl_apply_attrs_string(pTHX_ const char *stashpv, CV *cv, const char *attrstr, STRLEN len);
#define PERL_ARGS_ASSERT_APPLY_ATTRS_STRING	\
	assert(stashpv); assert(cv); assert(attrstr)
PERL_CALLCONV void	Perl_atfork_lock(void);
PERL_CALLCONV void	Perl_atfork_unlock(void);
PERL_CALLCONV SV**	Perl_av_arylen_p(pTHX_ AV *av);
#define PERL_ARGS_ASSERT_AV_ARYLEN_P	\
	assert(av)
PERL_CALLCONV void	Perl_av_clear(pTHX_ AV *av);
#define PERL_ARGS_ASSERT_AV_CLEAR	\
	assert(av)
PERL_CALLCONV void	Perl_av_create_and_push(pTHX_ AV **const avp, SV *const val);
#define PERL_ARGS_ASSERT_AV_CREATE_AND_PUSH	\
	assert(avp); assert(val)
PERL_CALLCONV SV**	Perl_av_create_and_unshift_one(pTHX_ AV **const avp, SV *const val);
#define PERL_ARGS_ASSERT_AV_CREATE_AND_UNSHIFT_ONE	\
	assert(avp); assert(val)
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV *av, SSize_t key, I32 flags);
#define PERL_ARGS_ASSERT_AV_DELETE	\
	assert(av)
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV *av, SSize_t key)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_AV_EXISTS	\
	assert(av)

PERL_CALLCONV void	Perl_av_extend(pTHX_ AV *av, SSize_t key);
#define PERL_ARGS_ASSERT_AV_EXTEND	\
	assert(av)
PERL_CALLCONV void	Perl_av_extend_guts(pTHX_ AV *av, SSize_t key, SSize_t *maxp, SV ***allocp, SV ***arrayp);
#define PERL_ARGS_ASSERT_AV_EXTEND_GUTS	\
	assert(maxp); assert(allocp); assert(arrayp)
PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV *av, SSize_t key, I32 lval)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_AV_FETCH	\
	assert(av)

PERL_CALLCONV void	Perl_av_fill(pTHX_ AV *av, SSize_t fill);
#define PERL_ARGS_ASSERT_AV_FILL	\
	assert(av)
PERL_CALLCONV IV*	Perl_av_iter_p(pTHX_ AV *av);
#define PERL_ARGS_ASSERT_AV_ITER_P	\
	assert(av)
PERL_CALLCONV SSize_t	Perl_av_len(pTHX_ AV *av)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_AV_LEN	\
	assert(av)

PERL_CALLCONV AV*	Perl_av_make(pTHX_ SSize_t size, SV **strp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_AV_MAKE	\
	assert(strp)

PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV *av);
#define PERL_ARGS_ASSERT_AV_POP	\
	assert(av)
PERL_CALLCONV void	Perl_av_push(pTHX_ AV *av, SV *val);
#define PERL_ARGS_ASSERT_AV_PUSH	\
	assert(av); assert(val)
PERL_CALLCONV void	Perl_av_reify(pTHX_ AV *av);
#define PERL_ARGS_ASSERT_AV_REIFY	\
	assert(av)
PERL_CALLCONV SV*	Perl_av_shift(pTHX_ AV *av)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_AV_SHIFT	\
	assert(av)

PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV *av, SSize_t key, SV *val);
#define PERL_ARGS_ASSERT_AV_STORE	\
	assert(av)
/* PERL_CALLCONV SSize_t	Perl_av_tindex(pTHX_ AV *av)
			__attribute__warn_unused_result__; */

PERL_CALLCONV void	Perl_av_undef(pTHX_ AV *av);
#define PERL_ARGS_ASSERT_AV_UNDEF	\
	assert(av)
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV *av, SSize_t num);
#define PERL_ARGS_ASSERT_AV_UNSHIFT	\
	assert(av)
PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP *left, OP *right)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BIND_MATCH	\
	assert(left); assert(right)

PERL_CALLCONV OP*	Perl_block_end(pTHX_ I32 floor, OP* seq)
			__attribute__warn_unused_result__;

PERL_CALLCONV U8	Perl_block_gimme(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV int	Perl_block_start(pTHX_ int full)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_blockhook_register(pTHX_ BHK *hk);
#define PERL_ARGS_ASSERT_BLOCKHOOK_REGISTER	\
	assert(hk)
PERL_CALLCONV void	Perl_boot_core_PerlIO(pTHX);
PERL_CALLCONV void	Perl_boot_core_UNIVERSAL(pTHX);
PERL_CALLCONV void	Perl_boot_core_mro(pTHX);
PERL_CALLCONV int	Perl_bytes_cmp_utf8(pTHX_ const U8 *b, STRLEN blen, const U8 *u, STRLEN ulen);
#define PERL_ARGS_ASSERT_BYTES_CMP_UTF8	\
	assert(b); assert(u)
PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ const U8 *s, STRLEN *len, bool *is_utf8);
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8	\
	assert(s); assert(len)
PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ const U8 *s, STRLEN *len);
#define PERL_ARGS_ASSERT_BYTES_TO_UTF8	\
	assert(s); assert(len)
PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv);
#define PERL_ARGS_ASSERT_CALL_ARGV	\
	assert(sub_name); assert(argv)
PERL_CALLCONV void	Perl_call_atexit(pTHX_ ATEXIT_t fn, void *ptr);
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV *paramList);
#define PERL_ARGS_ASSERT_CALL_LIST	\
	assert(paramList)
PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags);
#define PERL_ARGS_ASSERT_CALL_METHOD	\
	assert(methname)
PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags);
#define PERL_ARGS_ASSERT_CALL_PV	\
	assert(sub_name)
PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, VOL I32 flags);
#define PERL_ARGS_ASSERT_CALL_SV	\
	assert(sv)
PERL_CALLCONV const PERL_CONTEXT *	Perl_caller_cx(pTHX_ I32 level, const PERL_CONTEXT **dbcxp);
PERL_CALLCONV Malloc_t	Perl_calloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_cando(pTHX_ Mode_t mode, bool effective, const Stat_t* statbufp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CANDO	\
	assert(statbufp)

PERL_CALLCONV I32	Perl_cast_i32(NV f)
			__attribute__warn_unused_result__;

PERL_CALLCONV IV	Perl_cast_iv(NV f)
			__attribute__warn_unused_result__;

PERL_CALLCONV U32	Perl_cast_ulong(NV f)
			__attribute__warn_unused_result__;

PERL_CALLCONV UV	Perl_cast_uv(NV f)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_check_utf8_print(pTHX_ const U8 *s, const STRLEN len);
#define PERL_ARGS_ASSERT_CHECK_UTF8_PRINT	\
	assert(s)
PERL_CALLCONV OP *	Perl_ck_anoncode(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_ANONCODE	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_backtick(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_BACKTICK	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_bitop(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_BITOP	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_cmp(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_CMP	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_concat(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_CONCAT	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_defined(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_DEFINED	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_delete(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_DELETE	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_each(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_EACH	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_entersub_args_core(pTHX_ OP *entersubop, GV *namegv, SV *protosv);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_CORE	\
	assert(entersubop); assert(namegv); assert(protosv)
PERL_CALLCONV OP*	Perl_ck_entersub_args_list(pTHX_ OP *entersubop);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_LIST	\
	assert(entersubop)
PERL_CALLCONV OP*	Perl_ck_entersub_args_proto(pTHX_ OP *entersubop, GV *namegv, SV *protosv);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO	\
	assert(entersubop); assert(namegv); assert(protosv)
PERL_CALLCONV OP*	Perl_ck_entersub_args_proto_or_list(pTHX_ OP *entersubop, GV *namegv, SV *protosv);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO_OR_LIST	\
	assert(entersubop); assert(namegv); assert(protosv)
PERL_CALLCONV OP *	Perl_ck_eof(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_EOF	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_eval(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_EVAL	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_exec(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_EXEC	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_exists(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_EXISTS	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_ftst(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_FTST	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_fun(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_FUN	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_glob(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_GLOB	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_grep(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_GREP	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_index(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_INDEX	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_join(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_JOIN	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_length(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_LENGTH	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_lfun(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_LFUN	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_listiob(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_LISTIOB	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_match(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_MATCH	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_method(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_METHOD	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_null(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_NULL	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_open(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_OPEN	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_prototype(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_PROTOTYPE	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_readline(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_READLINE	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_refassign(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_REFASSIGN	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_repeat(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_REPEAT	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_require(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_REQUIRE	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_return(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_RETURN	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_rfun(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_RFUN	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_rvconst(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_RVCONST	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_sassign(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SASSIGN	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_select(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SELECT	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_shift(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SHIFT	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_smartmatch(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SMARTMATCH	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_sort(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SORT	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_spair(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SPAIR	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_split(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SPLIT	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_stringify(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_STRINGIFY	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_subr(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SUBR	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_substr(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SUBSTR	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_svconst(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_SVCONST	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_tell(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_TELL	\
	assert(o)

PERL_CALLCONV OP *	Perl_ck_trunc(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_TRUNC	\
	assert(o)

PERL_CALLCONV void	Perl_ck_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_CK_WARNER	\
	assert(pat)

PERL_CALLCONV void	Perl_ck_warner_d(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_CK_WARNER_D	\
	assert(pat)

PERL_CALLCONV bool	Perl_ckwarn(pTHX_ U32 w);
PERL_CALLCONV bool	Perl_ckwarn_d(pTHX_ U32 w);
PERL_CALLCONV void	Perl_clear_defarray(pTHX_ AV* av, bool abandon);
#define PERL_ARGS_ASSERT_CLEAR_DEFARRAY	\
	assert(av)
PERL_CALLCONV const COP*	Perl_closest_cop(pTHX_ const COP *cop, const OP *o, const OP *curop, bool opnext);
#define PERL_ARGS_ASSERT_CLOSEST_COP	\
	assert(cop)
PERL_CALLCONV const char *	Perl_cop_fetch_label(pTHX_ COP *const cop, STRLEN *len, U32 *flags);
#define PERL_ARGS_ASSERT_COP_FETCH_LABEL	\
	assert(cop)
PERL_CALLCONV void	Perl_cop_store_label(pTHX_ COP *const cop, const char *label, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_COP_STORE_LABEL	\
	assert(cop); assert(label)
PERL_CALLCONV SV *	Perl_core_prototype(pTHX_ SV *sv, const char *name, const int code, int * const opnum);
#define PERL_ARGS_ASSERT_CORE_PROTOTYPE	\
	assert(name)
PERL_CALLCONV OP *	Perl_coresub_op(pTHX_ SV *const coreargssv, const int code, const int opnum);
#define PERL_ARGS_ASSERT_CORESUB_OP	\
	assert(coreargssv)
PERL_CALLCONV void	Perl_create_eval_scope(pTHX_ OP *retop, U32 flags);
PERL_CALLCONV_NO_RET void	Perl_croak(pTHX_ const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);

PERL_STATIC_NO_RET void	S_croak_memory_wrap(void)
			__attribute__noreturn__;

PERL_CALLCONV_NO_RET void	Perl_croak_no_mem(void)
			__attribute__noreturn__;

PERL_CALLCONV_NO_RET void	Perl_croak_no_modify(void)
			__attribute__noreturn__;

PERL_CALLCONV_NO_RET void	Perl_croak_popstack(void)
			__attribute__noreturn__;

PERL_CALLCONV_NO_RET void	Perl_croak_sv(pTHX_ SV *baseex)
			__attribute__noreturn__;
#define PERL_ARGS_ASSERT_CROAK_SV	\
	assert(baseex)

PERL_CALLCONV_NO_RET void	Perl_croak_xs_usage(const CV *const cv, const char *const params)
			__attribute__noreturn__;
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE	\
	assert(cv); assert(params)

PERL_CALLCONV regexp_engine const *	Perl_current_re_engine(pTHX);
PERL_CALLCONV const char *	Perl_custom_op_desc(pTHX_ const OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CUSTOM_OP_DESC	\
	assert(o)

PERL_CALLCONV XOPRETANY	Perl_custom_op_get_field(pTHX_ const OP *o, const xop_flags_enum field)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CUSTOM_OP_GET_FIELD	\
	assert(o)

PERL_CALLCONV const char *	Perl_custom_op_name(pTHX_ const OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CUSTOM_OP_NAME	\
	assert(o)

PERL_CALLCONV void	Perl_custom_op_register(pTHX_ Perl_ppaddr_t ppaddr, const XOP *xop);
#define PERL_ARGS_ASSERT_CUSTOM_OP_REGISTER	\
	assert(ppaddr); assert(xop)
/* PERL_CALLCONV const XOP *	Perl_custom_op_xop(pTHX_ const OP *o)
			__attribute__pure__; */

PERL_CALLCONV void	Perl_cv_ckproto_len_flags(pTHX_ const CV* cv, const GV* gv, const char* p, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_CV_CKPROTO_LEN_FLAGS	\
	assert(cv)
PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto);
#define PERL_ARGS_ASSERT_CV_CLONE	\
	assert(proto)
PERL_CALLCONV CV*	Perl_cv_clone_into(pTHX_ CV* proto, CV *target);
#define PERL_ARGS_ASSERT_CV_CLONE_INTO	\
	assert(proto); assert(target)
PERL_CALLCONV SV*	Perl_cv_const_sv(const CV *const cv)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_cv_const_sv_or_av(const CV *const cv)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_cv_forget_slab(pTHX_ CV *cv);
PERL_CALLCONV void	Perl_cv_get_call_checker(pTHX_ CV *cv, Perl_call_checker *ckfun_p, SV **ckobj_p);
#define PERL_ARGS_ASSERT_CV_GET_CALL_CHECKER	\
	assert(cv); assert(ckfun_p); assert(ckobj_p)
PERL_CALLCONV SV *	Perl_cv_name(pTHX_ CV *cv, SV *sv, U32 flags);
#define PERL_ARGS_ASSERT_CV_NAME	\
	assert(cv)
PERL_CALLCONV void	Perl_cv_set_call_checker(pTHX_ CV *cv, Perl_call_checker ckfun, SV *ckobj);
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER	\
	assert(cv); assert(ckfun); assert(ckobj)
PERL_CALLCONV void	Perl_cv_set_call_checker_flags(pTHX_ CV *cv, Perl_call_checker ckfun, SV *ckobj, U32 flags);
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER_FLAGS	\
	assert(cv); assert(ckfun); assert(ckobj)
PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv);
#define PERL_ARGS_ASSERT_CV_UNDEF	\
	assert(cv)
PERL_CALLCONV void	Perl_cv_undef_flags(pTHX_ CV* cv, U32 flags);
#define PERL_ARGS_ASSERT_CV_UNDEF_FLAGS	\
	assert(cv)
PERL_CALLCONV GV *	Perl_cvgv_from_hek(pTHX_ CV* cv);
#define PERL_ARGS_ASSERT_CVGV_FROM_HEK	\
	assert(cv)
PERL_CALLCONV void	Perl_cvgv_set(pTHX_ CV* cv, GV* gv);
#define PERL_ARGS_ASSERT_CVGV_SET	\
	assert(cv)
PERL_CALLCONV void	Perl_cvstash_set(pTHX_ CV* cv, HV* stash);
#define PERL_ARGS_ASSERT_CVSTASH_SET	\
	assert(cv)
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cx);
#define PERL_ARGS_ASSERT_CX_DUMP	\
	assert(cx)
PERL_CALLCONV I32	Perl_cxinc(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_deb(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_DEB	\
	assert(pat)

PERL_CALLCONV void	Perl_deb_stack_all(pTHX);
PERL_CALLCONV I32	Perl_debop(pTHX_ const OP* o);
#define PERL_ARGS_ASSERT_DEBOP	\
	assert(o)
PERL_CALLCONV void	Perl_debprofdump(pTHX);
PERL_CALLCONV I32	Perl_debstack(pTHX);
PERL_CALLCONV I32	Perl_debstackptrs(pTHX);
PERL_CALLCONV SV *	Perl_defelem_target(pTHX_ SV *sv, MAGIC *mg)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DEFELEM_TARGET	\
	assert(sv)

PERL_CALLCONV void	Perl_delete_eval_scope(pTHX);
PERL_CALLCONV char*	Perl_delimcpy(char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen);
#define PERL_ARGS_ASSERT_DELIMCPY	\
	assert(to); assert(toend); assert(from); assert(fromend); assert(retlen)
PERL_CALLCONV char*	Perl_delimcpy_no_escape(char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen);
#define PERL_ARGS_ASSERT_DELIMCPY_NO_ESCAPE	\
	assert(to); assert(toend); assert(from); assert(fromend); assert(retlen)
PERL_CALLCONV void	Perl_despatch_signals(pTHX);
PERL_CALLCONV_NO_RET OP*	Perl_die(pTHX_ const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);

PERL_CALLCONV_NO_RET OP*	Perl_die_sv(pTHX_ SV *baseex)
			__attribute__noreturn__;
#define PERL_ARGS_ASSERT_DIE_SV	\
	assert(baseex)

PERL_CALLCONV_NO_RET void	Perl_die_unwind(pTHX_ SV* msv)
			__attribute__noreturn__;
#define PERL_ARGS_ASSERT_DIE_UNWIND	\
	assert(msv)

/* PERL_CALLCONV bool	Perl_do_aexec(pTHX_ SV* really, SV** mark, SV** sp); */
#define PERL_ARGS_ASSERT_DO_AEXEC	\
	assert(mark); assert(sp)
PERL_CALLCONV bool	Perl_do_aexec5(pTHX_ SV* really, SV** mark, SV** sp, int fd, int do_report);
#define PERL_ARGS_ASSERT_DO_AEXEC5	\
	assert(mark); assert(sp)
PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int mode);
#define PERL_ARGS_ASSERT_DO_BINMODE	\
	assert(fp)
PERL_CALLCONV bool	Perl_do_close(pTHX_ GV* gv, bool not_implicit);
PERL_CALLCONV void	Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full);
#define PERL_ARGS_ASSERT_DO_DUMP_PAD	\
	assert(file)
PERL_CALLCONV bool	Perl_do_eof(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_DO_EOF	\
	assert(gv)
PERL_CALLCONV void	Perl_do_execfree(pTHX);
PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv);
#define PERL_ARGS_ASSERT_DO_GV_DUMP	\
	assert(file); assert(name)
PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv);
#define PERL_ARGS_ASSERT_DO_GVGV_DUMP	\
	assert(file); assert(name)
PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, const char *name, HV *sv);
#define PERL_ARGS_ASSERT_DO_HV_DUMP	\
	assert(file); assert(name)
PERL_CALLCONV void	Perl_do_join(pTHX_ SV *sv, SV *delim, SV **mark, SV **sp);
#define PERL_ARGS_ASSERT_DO_JOIN	\
	assert(sv); assert(delim); assert(mark); assert(sp)
PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
#define PERL_ARGS_ASSERT_DO_MAGIC_DUMP	\
	assert(file)
PERL_CALLCONV I32	Perl_do_ncmp(pTHX_ SV *const left, SV *const right)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_NCMP	\
	assert(left); assert(right)

PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, const OP *o);
#define PERL_ARGS_ASSERT_DO_OP_DUMP	\
	assert(file)
/* PERL_CALLCONV bool	Perl_do_open(pTHX_ GV* gv, const char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp); */
#define PERL_ARGS_ASSERT_DO_OPEN	\
	assert(gv); assert(name)
PERL_CALLCONV bool	Perl_do_open6(pTHX_ GV *gv, const char *oname, STRLEN len, PerlIO *supplied_fp, SV **svp, U32 num);
#define PERL_ARGS_ASSERT_DO_OPEN6	\
	assert(gv); assert(oname)
PERL_CALLCONV bool	Perl_do_open9(pTHX_ GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num);
#define PERL_ARGS_ASSERT_DO_OPEN9	\
	assert(gv); assert(name); assert(svs)
PERL_CALLCONV bool	Perl_do_open_raw(pTHX_ GV *gv, const char *oname, STRLEN len, int rawmode, int rawperm);
#define PERL_ARGS_ASSERT_DO_OPEN_RAW	\
	assert(gv); assert(oname)
PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, const char *oname, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num);
#define PERL_ARGS_ASSERT_DO_OPENN	\
	assert(gv); assert(oname)
PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, const PMOP *pm);
#define PERL_ARGS_ASSERT_DO_PMOP_DUMP	\
	assert(file)
PERL_CALLCONV bool	Perl_do_print(pTHX_ SV* sv, PerlIO* fp);
#define PERL_ARGS_ASSERT_DO_PRINT	\
	assert(fp)
PERL_CALLCONV OP*	Perl_do_readline(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_do_seek(pTHX_ GV* gv, Off_t pos, int whence);
PERL_CALLCONV void	Perl_do_sprintf(pTHX_ SV* sv, I32 len, SV** sarg);
#define PERL_ARGS_ASSERT_DO_SPRINTF	\
	assert(sv); assert(sarg)
PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
#define PERL_ARGS_ASSERT_DO_SV_DUMP	\
	assert(file)
PERL_CALLCONV Off_t	Perl_do_sysseek(pTHX_ GV* gv, Off_t pos, int whence);
#define PERL_ARGS_ASSERT_DO_SYSSEEK	\
	assert(gv)
PERL_CALLCONV Off_t	Perl_do_tell(pTHX_ GV* gv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_TELL	\
	assert(gv)

PERL_CALLCONV I32	Perl_do_trans(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_DO_TRANS	\
	assert(sv)
PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, SSize_t offset, int size);
#define PERL_ARGS_ASSERT_DO_VECGET	\
	assert(sv)
PERL_CALLCONV void	Perl_do_vecset(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_DO_VECSET	\
	assert(sv)
PERL_CALLCONV void	Perl_do_vop(pTHX_ I32 optype, SV* sv, SV* left, SV* right);
#define PERL_ARGS_ASSERT_DO_VOP	\
	assert(sv); assert(left); assert(right)
PERL_CALLCONV OP*	Perl_dofile(pTHX_ OP* term, I32 force_builtin);
#define PERL_ARGS_ASSERT_DOFILE	\
	assert(term)
PERL_CALLCONV bool	Perl_doing_taint(int argc, char** argv, char** env)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP *	Perl_doref(pTHX_ OP *o, I32 type, bool set_op_ref);
#define PERL_ARGS_ASSERT_DOREF	\
	assert(o)
PERL_CALLCONV void	Perl_dounwind(pTHX_ I32 cxix);
PERL_CALLCONV U8	Perl_dowantarray(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_drand48_init_r(perl_drand48_t *random_state, U32 seed);
#define PERL_ARGS_ASSERT_DRAND48_INIT_R	\
	assert(random_state)
PERL_CALLCONV double	Perl_drand48_r(perl_drand48_t *random_state);
#define PERL_ARGS_ASSERT_DRAND48_R	\
	assert(random_state)
PERL_CALLCONV void	Perl_dump_all(pTHX);
PERL_CALLCONV void	Perl_dump_all_perl(pTHX_ bool justperl);
PERL_CALLCONV void	Perl_dump_eval(pTHX);
PERL_CALLCONV void	Perl_dump_form(pTHX_ const GV* gv);
#define PERL_ARGS_ASSERT_DUMP_FORM	\
	assert(gv)
PERL_CALLCONV void	Perl_dump_indent(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4);
#define PERL_ARGS_ASSERT_DUMP_INDENT	\
	assert(file); assert(pat)

PERL_CALLCONV void	Perl_dump_packsubs(pTHX_ const HV* stash);
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS	\
	assert(stash)
PERL_CALLCONV void	Perl_dump_packsubs_perl(pTHX_ const HV* stash, bool justperl);
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS_PERL	\
	assert(stash)
PERL_CALLCONV void	Perl_dump_sub(pTHX_ const GV* gv);
#define PERL_ARGS_ASSERT_DUMP_SUB	\
	assert(gv)
PERL_CALLCONV void	Perl_dump_sub_perl(pTHX_ const GV* gv, bool justperl);
#define PERL_ARGS_ASSERT_DUMP_SUB_PERL	\
	assert(gv)
PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args);
#define PERL_ARGS_ASSERT_DUMP_VINDENT	\
	assert(file); assert(pat)
PERL_CALLCONV void	Perl_emulate_cop_io(pTHX_ const COP *const c, SV *const sv);
#define PERL_ARGS_ASSERT_EMULATE_COP_IO	\
	assert(c); assert(sv)
PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error);
#define PERL_ARGS_ASSERT_EVAL_PV	\
	assert(p)
PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags);
#define PERL_ARGS_ASSERT_EVAL_SV	\
	assert(sv)
PERL_CALLCONV void	Perl_fbm_compile(pTHX_ SV* sv, U32 flags);
#define PERL_ARGS_ASSERT_FBM_COMPILE	\
	assert(sv)
PERL_CALLCONV char*	Perl_fbm_instr(pTHX_ unsigned char* big, unsigned char* bigend, SV* littlestr, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FBM_INSTR	\
	assert(big); assert(bigend); assert(littlestr)

PERL_CALLCONV bool	Perl_feature_is_enabled(pTHX_ const char *const name, STRLEN namelen);
#define PERL_ARGS_ASSERT_FEATURE_IS_ENABLED	\
	assert(name)
PERL_CALLCONV SV*	Perl_filter_add(pTHX_ filter_t funcp, SV* datasv);
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp);
#define PERL_ARGS_ASSERT_FILTER_DEL	\
	assert(funcp)
PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV *buf_sv, int maxlen)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FILTER_READ	\
	assert(buf_sv)

PERL_CALLCONV void	Perl_finalize_optree(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_FINALIZE_OPTREE	\
	assert(o)
PERL_CALLCONV CV *	Perl_find_lexical_cv(pTHX_ PADOFFSET off);
PERL_CALLCONV CV*	Perl_find_runcv(pTHX_ U32 *db_seqp)
			__attribute__warn_unused_result__;

PERL_CALLCONV CV*	Perl_find_runcv_where(pTHX_ U8 cond, IV arg, U32 *db_seqp)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_find_rundefsv(pTHX);
PERL_CALLCONV PADOFFSET	Perl_find_rundefsvoffset(pTHX)
			__attribute__deprecated__;

PERL_CALLCONV char*	Perl_find_script(pTHX_ const char *scriptname, bool dosearch, const char *const *const search_ext, I32 flags);
#define PERL_ARGS_ASSERT_FIND_SCRIPT	\
	assert(scriptname)
PERL_CALLCONV I32	Perl_foldEQ(const char* a, const char* b, I32 len)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_FOLDEQ	\
	assert(a); assert(b)

PERL_CALLCONV I32	Perl_foldEQ_latin1(const char* a, const char* b, I32 len)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_FOLDEQ_LATIN1	\
	assert(a); assert(b)

PERL_CALLCONV I32	Perl_foldEQ_locale(const char* a, const char* b, I32 len)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_FOLDEQ_LOCALE	\
	assert(a); assert(b)

/* PERL_CALLCONV I32	foldEQ_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2); */
PERL_CALLCONV I32	Perl_foldEQ_utf8_flags(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2, U32 flags);
#define PERL_ARGS_ASSERT_FOLDEQ_UTF8_FLAGS	\
	assert(s1); assert(s2)
PERL_CALLCONV char*	Perl_form(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_FORM	\
	assert(pat)

PERL_CALLCONV void	Perl_free_tied_hv_pool(pTHX);
PERL_CALLCONV void	Perl_free_tmps(pTHX);
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_AV	\
	assert(name)
PERL_CALLCONV void*	Perl_get_context(void)
			__attribute__warn_unused_result__;

PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 flags);
#define PERL_ARGS_ASSERT_GET_CV	\
	assert(name)
PERL_CALLCONV CV*	Perl_get_cvn_flags(pTHX_ const char* name, STRLEN len, I32 flags);
#define PERL_ARGS_ASSERT_GET_CVN_FLAGS	\
	assert(name)
PERL_CALLCONV void	Perl_get_db_sub(pTHX_ SV **svp, CV *cv);
#define PERL_ARGS_ASSERT_GET_DB_SUB	\
	assert(cv)
PERL_CALLCONV void	Perl_get_hash_seed(pTHX_ unsigned char * const seed_buffer);
#define PERL_ARGS_ASSERT_GET_HASH_SEED	\
	assert(seed_buffer)
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_HV	\
	assert(name)
PERL_CALLCONV const char*	Perl_get_no_modify(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV char**	Perl_get_op_descs(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV char**	Perl_get_op_names(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV U32*	Perl_get_opargs(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV PPADDR_t*	Perl_get_ppaddr(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV REGEXP *	Perl_get_re_arg(pTHX_ SV *sv);
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_SV	\
	assert(name)
PERL_CALLCONV MGVTBL*	Perl_get_vtbl(pTHX_ int vtbl_id)
			__attribute__warn_unused_result__;

PERL_CALLCONV int	Perl_getcwd_sv(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_GETCWD_SV	\
	assert(sv)
PERL_CALLCONV void	Perl_gp_free(pTHX_ GV* gv);
PERL_CALLCONV GP*	Perl_gp_ref(pTHX_ GP* gp);
PERL_CALLCONV bool	Perl_grok_atoUV(const char* pv, UV* valptr, const char** endptr);
#define PERL_ARGS_ASSERT_GROK_ATOUV	\
	assert(pv); assert(valptr)
PERL_CALLCONV UV	Perl_grok_bin(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_BIN	\
	assert(start); assert(len_p); assert(flags)
PERL_CALLCONV UV	Perl_grok_hex(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_HEX	\
	assert(start); assert(len_p); assert(flags)
PERL_CALLCONV int	Perl_grok_infnan(pTHX_ const char** sp, const char *send);
#define PERL_ARGS_ASSERT_GROK_INFNAN	\
	assert(sp); assert(send)
PERL_CALLCONV int	Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep);
#define PERL_ARGS_ASSERT_GROK_NUMBER	\
	assert(pv)
PERL_CALLCONV int	Perl_grok_number_flags(pTHX_ const char *pv, STRLEN len, UV *valuep, U32 flags);
#define PERL_ARGS_ASSERT_GROK_NUMBER_FLAGS	\
	assert(pv)
PERL_CALLCONV bool	Perl_grok_numeric_radix(pTHX_ const char **sp, const char *send)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GROK_NUMERIC_RADIX	\
	assert(sp); assert(send)

PERL_CALLCONV UV	Perl_grok_oct(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_OCT	\
	assert(start); assert(len_p); assert(flags)
/* PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV *gv); */
/* PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV *gv); */
/* PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv); */
PERL_CALLCONV GV*	Perl_gv_add_by_type(pTHX_ GV *gv, svtype type);
/* PERL_CALLCONV GV*	gv_autoload4(pTHX_ HV* stash, const char* name, STRLEN len, I32 method)
			__attribute__warn_unused_result__; */

PERL_CALLCONV GV*	Perl_gv_autoload_pv(pTHX_ HV* stash, const char* namepv, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PV	\
	assert(namepv)

PERL_CALLCONV GV*	Perl_gv_autoload_pvn(pTHX_ HV* stash, const char* name, STRLEN len, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PVN	\
	assert(name)

PERL_CALLCONV GV*	Perl_gv_autoload_sv(pTHX_ HV* stash, SV* namesv, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_SV	\
	assert(namesv)

PERL_CALLCONV void	Perl_gv_check(pTHX_ HV* stash);
#define PERL_ARGS_ASSERT_GV_CHECK	\
	assert(stash)
PERL_CALLCONV SV*	Perl_gv_const_sv(pTHX_ GV* gv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_CONST_SV	\
	assert(gv)

PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, const GV* gv);
#define PERL_ARGS_ASSERT_GV_EFULLNAME	\
	assert(sv); assert(gv)
/* PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, const GV* gv, const char* prefix); */
#define PERL_ARGS_ASSERT_GV_EFULLNAME3	\
	assert(sv); assert(gv)
PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain);
#define PERL_ARGS_ASSERT_GV_EFULLNAME4	\
	assert(sv); assert(gv)
PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name);
#define PERL_ARGS_ASSERT_GV_FETCHFILE	\
	assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchfile_flags(pTHX_ const char *const name, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHFILE_FLAGS	\
	assert(name)
/* PERL_CALLCONV GV*	gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level); */
/* PERL_CALLCONV GV*	gv_fetchmeth_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level); */
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pv(pTHX_ HV* stash, const char* name, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV	\
	assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pv_autoload(pTHX_ HV* stash, const char* name, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV_AUTOLOAD	\
	assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pvn(pTHX_ HV* stash, const char* name, STRLEN len, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN	\
	assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pvn_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN_AUTOLOAD	\
	assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchmeth_sv(pTHX_ HV* stash, SV* namesv, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV	\
	assert(namesv)
PERL_CALLCONV GV*	Perl_gv_fetchmeth_sv_autoload(pTHX_ HV* stash, SV* namesv, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV_AUTOLOAD	\
	assert(namesv)
/* PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name); */
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD	\
	assert(stash); assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_AUTOLOAD	\
	assert(stash); assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchmethod_pv_flags(pTHX_ HV* stash, const char* name, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PV_FLAGS	\
	assert(stash); assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchmethod_pvn_flags(pTHX_ HV* stash, const char* name, const STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PVN_FLAGS	\
	assert(stash); assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchmethod_sv_flags(pTHX_ HV* stash, SV* namesv, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_SV_FLAGS	\
	assert(stash); assert(namesv)
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 add, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHPV	\
	assert(nambeg)
PERL_CALLCONV GV*	Perl_gv_fetchpvn_flags(pTHX_ const char* name, STRLEN len, I32 flags, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHPVN_FLAGS	\
	assert(name)
PERL_CALLCONV GV*	Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHSV	\
	assert(name)
PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, const GV* gv);
#define PERL_ARGS_ASSERT_GV_FULLNAME	\
	assert(sv); assert(gv)
/* PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, const GV* gv, const char* prefix); */
#define PERL_ARGS_ASSERT_GV_FULLNAME3	\
	assert(sv); assert(gv)
PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain);
#define PERL_ARGS_ASSERT_GV_FULLNAME4	\
	assert(sv); assert(gv)
PERL_CALLCONV CV*	Perl_gv_handler(pTHX_ HV* stash, I32 id)
			__attribute__warn_unused_result__;

/* PERL_CALLCONV void	gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi); */
PERL_CALLCONV void	Perl_gv_init_pv(pTHX_ GV* gv, HV* stash, const char* name, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_PV	\
	assert(gv); assert(name)
PERL_CALLCONV void	Perl_gv_init_pvn(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_PVN	\
	assert(gv); assert(name)
PERL_CALLCONV void	Perl_gv_init_sv(pTHX_ GV* gv, HV* stash, SV* namesv, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_SV	\
	assert(gv); assert(namesv)
PERL_CALLCONV void	Perl_gv_name_set(pTHX_ GV* gv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_GV_NAME_SET	\
	assert(gv); assert(name)
PERL_CALLCONV GV *	Perl_gv_override(pTHX_ const char * const name, const STRLEN len);
#define PERL_ARGS_ASSERT_GV_OVERRIDE	\
	assert(name)
PERL_CALLCONV void	Perl_gv_setref(pTHX_ SV *const dstr, SV *const sstr);
#define PERL_ARGS_ASSERT_GV_SETREF	\
	assert(dstr); assert(sstr)
PERL_CALLCONV HV*	Perl_gv_stashpv(pTHX_ const char* name, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHPV	\
	assert(name)
PERL_CALLCONV HV*	Perl_gv_stashpvn(pTHX_ const char* name, U32 namelen, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHPVN	\
	assert(name)
PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHSV	\
	assert(sv)
PERL_CALLCONV void	Perl_gv_try_downgrade(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_GV_TRY_DOWNGRADE	\
	assert(gv)
PERL_CALLCONV AV**	Perl_hv_backreferences_p(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_BACKREFERENCES_P	\
	assert(hv)
PERL_CALLCONV void	Perl_hv_clear(pTHX_ HV *hv);
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_CLEAR_PLACEHOLDERS	\
	assert(hv)
PERL_CALLCONV void*	Perl_hv_common(pTHX_ HV *hv, SV *keysv, const char* key, STRLEN klen, int flags, int action, SV *val, U32 hash);
PERL_CALLCONV void*	Perl_hv_common_key_len(pTHX_ HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash);
#define PERL_ARGS_ASSERT_HV_COMMON_KEY_LEN	\
	assert(key)
PERL_CALLCONV HV *	Perl_hv_copy_hints_hv(pTHX_ HV *const ohv)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV *hv, HE *entry);
#define PERL_ARGS_ASSERT_HV_DELAYFREE_ENT	\
	assert(hv)
/* PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV *hv, const char *key, I32 klen, I32 flags); */
#define PERL_ARGS_ASSERT_HV_DELETE	\
	assert(key)
/* PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV *hv, SV *keysv, I32 flags, U32 hash); */
#define PERL_ARGS_ASSERT_HV_DELETE_ENT	\
	assert(keysv)
PERL_CALLCONV HE**	Perl_hv_eiter_p(pTHX_ HV *hv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_EITER_P	\
	assert(hv)

PERL_CALLCONV void	Perl_hv_eiter_set(pTHX_ HV *hv, HE *eiter);
#define PERL_ARGS_ASSERT_HV_EITER_SET	\
	assert(hv)
PERL_CALLCONV void	Perl_hv_ename_add(pTHX_ HV *hv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_HV_ENAME_ADD	\
	assert(hv); assert(name)
PERL_CALLCONV void	Perl_hv_ename_delete(pTHX_ HV *hv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_HV_ENAME_DELETE	\
	assert(hv); assert(name)
/* PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV *hv, const char *key, I32 klen)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_HV_EXISTS	\
	assert(key)

/* PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV *hv, SV *keysv, U32 hash)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_HV_EXISTS_ENT	\
	assert(keysv)

/* PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV *hv, const char *key, I32 klen, I32 lval); */
#define PERL_ARGS_ASSERT_HV_FETCH	\
	assert(key)
/* PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV *hv, SV *keysv, I32 lval, U32 hash); */
#define PERL_ARGS_ASSERT_HV_FETCH_ENT	\
	assert(keysv)
PERL_CALLCONV STRLEN	Perl_hv_fill(pTHX_ HV *const hv);
#define PERL_ARGS_ASSERT_HV_FILL	\
	assert(hv)
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV *hv, HE *entry);
#define PERL_ARGS_ASSERT_HV_FREE_ENT	\
	assert(hv)
PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_ITERINIT	\
	assert(hv)
PERL_CALLCONV char*	Perl_hv_iterkey(pTHX_ HE* entry, I32* retlen)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERKEY	\
	assert(entry); assert(retlen)

PERL_CALLCONV SV*	Perl_hv_iterkeysv(pTHX_ HE* entry)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERKEYSV	\
	assert(entry)

/* PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV *hv)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_HV_ITERNEXT	\
	assert(hv)

PERL_CALLCONV HE*	Perl_hv_iternext_flags(pTHX_ HV *hv, I32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERNEXT_FLAGS	\
	assert(hv)

PERL_CALLCONV SV*	Perl_hv_iternextsv(pTHX_ HV *hv, char **key, I32 *retlen)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERNEXTSV	\
	assert(hv); assert(key); assert(retlen)

PERL_CALLCONV SV*	Perl_hv_iterval(pTHX_ HV *hv, HE *entry)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERVAL	\
	assert(hv); assert(entry)

PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV *hv, IV newmax);
#define PERL_ARGS_ASSERT_HV_KSPLIT	\
	assert(hv)
/* PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV *hv, GV *gv, int how); */
#define PERL_ARGS_ASSERT_HV_MAGIC	\
	assert(hv)
PERL_CALLCONV void	Perl_hv_name_set(pTHX_ HV *hv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_HV_NAME_SET	\
	assert(hv)
PERL_CALLCONV I32	Perl_hv_placeholders_get(pTHX_ const HV *hv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_GET	\
	assert(hv)

PERL_CALLCONV SSize_t*	Perl_hv_placeholders_p(pTHX_ HV *hv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_P	\
	assert(hv)

PERL_CALLCONV void	Perl_hv_placeholders_set(pTHX_ HV *hv, I32 ph);
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_SET	\
	assert(hv)
PERL_CALLCONV void	Perl_hv_rand_set(pTHX_ HV *hv, U32 new_xhv_rand);
#define PERL_ARGS_ASSERT_HV_RAND_SET	\
	assert(hv)
PERL_CALLCONV I32*	Perl_hv_riter_p(pTHX_ HV *hv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_RITER_P	\
	assert(hv)

PERL_CALLCONV void	Perl_hv_riter_set(pTHX_ HV *hv, I32 riter);
#define PERL_ARGS_ASSERT_HV_RITER_SET	\
	assert(hv)
PERL_CALLCONV SV*	Perl_hv_scalar(pTHX_ HV *hv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_SCALAR	\
	assert(hv)

/* PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV *hv, const char *key, I32 klen, SV *val, U32 hash); */
/* PERL_CALLCONV HE*	Perl_hv_store_ent(pTHX_ HV *hv, SV *key, SV *val, U32 hash); */
/* PERL_CALLCONV SV**	Perl_hv_store_flags(pTHX_ HV *hv, const char *key, I32 klen, SV *val, U32 hash, int flags); */
/* PERL_CALLCONV void	hv_undef(pTHX_ HV *hv); */
PERL_CALLCONV void	Perl_hv_undef_flags(pTHX_ HV *hv, U32 flags);
/* PERL_CALLCONV I32	ibcmp(pTHX_ const char* a, const char* b, I32 len); */
/* PERL_CALLCONV I32	ibcmp_locale(pTHX_ const char* a, const char* b, I32 len); */
/* PERL_CALLCONV I32	ibcmp_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2); */
PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int argc, char **argv);
#define PERL_ARGS_ASSERT_INIT_ARGV_SYMBOLS	\
	assert(argv)
PERL_CALLCONV void	Perl_init_constants(pTHX);
PERL_CALLCONV void	Perl_init_dbargs(pTHX);
PERL_CALLCONV void	Perl_init_debugger(pTHX);
PERL_CALLCONV int	Perl_init_i18nl10n(pTHX_ int printwarn);
PERL_CALLCONV int	Perl_init_i18nl14n(pTHX_ int printwarn);
PERL_CALLCONV void	Perl_init_stacks(pTHX);
PERL_CALLCONV void	Perl_init_tm(pTHX_ struct tm *ptm);
#define PERL_ARGS_ASSERT_INIT_TM	\
	assert(ptm)
PERL_CALLCONV char*	Perl_instr(const char* big, const char* little)
			__attribute__warn_unused_result__
			__attribute__pure__;
#define PERL_ARGS_ASSERT_INSTR	\
	assert(big); assert(little)

PERL_CALLCONV U32	Perl_intro_my(pTHX);
PERL_CALLCONV OP*	Perl_invert(pTHX_ OP* cmd)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_io_close(pTHX_ IO* io, GV *gv, bool not_implicit, bool warn_on_fail);
#define PERL_ARGS_ASSERT_IO_CLOSE	\
	assert(io)
PERL_CALLCONV bool	Perl_isALNUM_lazy(pTHX_ const char* p)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;
#define PERL_ARGS_ASSERT_ISALNUM_LAZY	\
	assert(p)

PERL_CALLCONV bool	Perl_isIDFIRST_lazy(pTHX_ const char* p)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;
#define PERL_ARGS_ASSERT_ISIDFIRST_LAZY	\
	assert(p)

/* PERL_CALLCONV bool	Perl_is_ascii_string(pTHX_ const U8 *s, STRLEN len)
			__attribute__warn_unused_result__; */

PERL_CALLCONV bool	Perl_is_invariant_string(const U8 *s, STRLEN len)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_INVARIANT_STRING	\
	assert(s)

PERL_CALLCONV I32	Perl_is_lvalue_sub(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_ascii(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_blank(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_blank_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_cntrl(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_digit(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_xdigit_lc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUM	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUMC	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_ALPHA	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_ASCII	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_blank(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_BLANK	\
	assert(p)

PERL_CALLCONV STRLEN	Perl_is_utf8_char(const U8 *s)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR	\
	assert(s)

/* PERL_CALLCONV STRLEN	Perl_is_utf8_char_buf(const U8 *buf, const U8 *buf_end); */
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_BUF	\
	assert(buf); assert(buf_end)
PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_CNTRL	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_DIGIT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_GRAPH	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_idcont(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_IDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_IDFIRST	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_LOWER	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_mark(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_MARK	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_perl_space(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_SPACE	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_perl_word(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_WORD	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_posix_digit(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_POSIX_DIGIT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_PRINT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_PUNCT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_SPACE	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_string(const U8 *s, STRLEN len);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING	\
	assert(s)
/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **ep); */
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOC	\
	assert(s)
PERL_CALLCONV bool	Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN	\
	assert(s)
PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_UPPER	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_XDIGIT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_xidcont(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_XIDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_xidfirst(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_XIDFIRST	\
	assert(p)

PERL_CALLCONV bool	Perl_isinfnan(NV nv);
PERL_CALLCONV bool	Perl_isinfnansv(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_ISINFNANSV	\
	assert(sv)
PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_JMAYBE	\
	assert(o)
PERL_CALLCONV I32	Perl_keyword(pTHX_ const char *name, I32 len, bool all_keywords)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_KEYWORD	\
	assert(name)

PERL_CALLCONV int	Perl_keyword_plugin_standard(pTHX_ char* keyword_ptr, STRLEN keyword_len, OP** op_ptr);
#define PERL_ARGS_ASSERT_KEYWORD_PLUGIN_STANDARD	\
	assert(keyword_ptr); assert(op_ptr)
PERL_CALLCONV void	Perl_leave_adjust_stacks(pTHX_ SV **from_sp, SV **to_sp, U8 gimme, int filter);
#define PERL_ARGS_ASSERT_LEAVE_ADJUST_STACKS	\
	assert(from_sp); assert(to_sp)
PERL_CALLCONV void	Perl_leave_scope(pTHX_ I32 base);
PERL_CALLCONV bool	Perl_lex_bufutf8(pTHX);
PERL_CALLCONV void	Perl_lex_discard_to(pTHX_ char* ptr);
#define PERL_ARGS_ASSERT_LEX_DISCARD_TO	\
	assert(ptr)
PERL_CALLCONV char*	Perl_lex_grow_linestr(pTHX_ STRLEN len);
PERL_CALLCONV bool	Perl_lex_next_chunk(pTHX_ U32 flags);
PERL_CALLCONV I32	Perl_lex_peek_unichar(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_lex_read_space(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_lex_read_to(pTHX_ char* ptr);
#define PERL_ARGS_ASSERT_LEX_READ_TO	\
	assert(ptr)
PERL_CALLCONV I32	Perl_lex_read_unichar(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_lex_start(pTHX_ SV* line, PerlIO *rsfp, U32 flags);
PERL_CALLCONV void	Perl_lex_stuff_pv(pTHX_ const char* pv, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_PV	\
	assert(pv)
PERL_CALLCONV void	Perl_lex_stuff_pvn(pTHX_ const char* pv, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_PVN	\
	assert(pv)
PERL_CALLCONV void	Perl_lex_stuff_sv(pTHX_ SV* sv, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_SV	\
	assert(sv)
PERL_CALLCONV void	Perl_lex_unstuff(pTHX_ char* ptr);
#define PERL_ARGS_ASSERT_LEX_UNSTUFF	\
	assert(ptr)
PERL_CALLCONV OP*	Perl_list(pTHX_ OP* o);
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...);
#define PERL_ARGS_ASSERT_LOAD_MODULE	\
	assert(name)
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP *o, I32 lex);
#define PERL_ARGS_ASSERT_LOCALIZE	\
	assert(o)
PERL_CALLCONV I32	Perl_looks_like_number(pTHX_ SV *const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_LOOKS_LIKE_NUMBER	\
	assert(sv)

PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEAR_ALL_ENV	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_cleararylen_p(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARARYLEN_P	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_clearenv(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARENV	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_clearhint(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINT	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_clearhints(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINTS	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_clearisa(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARISA	\
	assert(mg)
PERL_CALLCONV int	Perl_magic_clearpack(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARPACK	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_clearsig(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARSIG	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_copycallchecker(pTHX_ SV* sv, MAGIC *mg, SV *nsv, const char *name, I32 namlen);
#define PERL_ARGS_ASSERT_MAGIC_COPYCALLCHECKER	\
	assert(sv); assert(mg); assert(nsv)
PERL_CALLCONV void	Perl_magic_dump(pTHX_ const MAGIC *mg);
PERL_CALLCONV int	Perl_magic_existspack(pTHX_ SV* sv, const MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_EXISTSPACK	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_freearylen_p(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_FREEARYLEN_P	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_freeovrld(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_FREEOVRLD	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_get(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GET	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getarylen(pTHX_ SV* sv, const MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETARYLEN	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getdebugvar(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETDEBUGVAR	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getdefelem(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETDEFELEM	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getnkeys(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETNKEYS	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getpack(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETPACK	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getpos(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETPOS	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getsig(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETSIG	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getsubstr(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETSUBSTR	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_gettaint(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETTAINT	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getuvar(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETUVAR	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getvec(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETVEC	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg);
#define PERL_ARGS_ASSERT_MAGIC_KILLBACKREFS	\
	assert(sv); assert(mg)
PERL_CALLCONV SV*	Perl_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, U32 argc, ...);
#define PERL_ARGS_ASSERT_MAGIC_METHCALL	\
	assert(sv); assert(mg); assert(meth)
PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV *sv, MAGIC *mg, SV *key);
#define PERL_ARGS_ASSERT_MAGIC_NEXTPACK	\
	assert(sv); assert(mg); assert(key)
PERL_CALLCONV U32	Perl_magic_regdata_cnt(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_REGDATA_CNT	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_regdatum_get(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_GET	\
	assert(sv); assert(mg)
PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV *hv, MAGIC *mg);
#define PERL_ARGS_ASSERT_MAGIC_SCALARPACK	\
	assert(hv); assert(mg)
PERL_CALLCONV int	Perl_magic_set(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SET	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SET_ALL_ENV	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setarylen(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETARYLEN	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setdbline(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETDBLINE	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setdebugvar(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETDEBUGVAR	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setdefelem(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETDEFELEM	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setenv(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETENV	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_sethint(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETHINT	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setisa(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETISA	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setlvref(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETLVREF	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setmglob(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETMGLOB	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setnkeys(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETNKEYS	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setpack(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETPACK	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setpos(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETPOS	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setregexp(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETREGEXP	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setsig(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETSIG	\
	assert(mg)
PERL_CALLCONV int	Perl_magic_setsubstr(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETSUBSTR	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_settaint(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETTAINT	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setutf8(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETUTF8	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setuvar(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETUVAR	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setvec(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETVEC	\
	assert(sv); assert(mg)
PERL_CALLCONV U32	Perl_magic_sizepack(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SIZEPACK	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_wipepack(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_WIPEPACK	\
	assert(sv); assert(mg)
PERL_CALLCONV Malloc_t	Perl_malloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV I32 *	Perl_markstack_grow(pTHX);
PERL_CALLCONV SV*	Perl_mess(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_MESS	\
	assert(pat)

PERL_CALLCONV SV*	Perl_mess_sv(pTHX_ SV* basemsg, bool consume);
#define PERL_ARGS_ASSERT_MESS_SV	\
	assert(basemsg)
PERL_CALLCONV Free_t	Perl_mfree(Malloc_t where);
PERL_CALLCONV int	Perl_mg_clear(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_MG_CLEAR	\
	assert(sv)
PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV *sv, SV *nsv, const char *key, I32 klen);
#define PERL_ARGS_ASSERT_MG_COPY	\
	assert(sv); assert(nsv)
PERL_CALLCONV MAGIC*	Perl_mg_find(const SV* sv, int type)
			__attribute__warn_unused_result__;

PERL_CALLCONV MAGIC*	Perl_mg_find_mglob(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MG_FIND_MGLOB	\
	assert(sv)

PERL_CALLCONV MAGIC*	Perl_mg_findext(const SV* sv, int type, const MGVTBL *vtbl)
			__attribute__warn_unused_result__;

PERL_CALLCONV int	Perl_mg_free(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_MG_FREE	\
	assert(sv)
PERL_CALLCONV void	Perl_mg_free_type(pTHX_ SV* sv, int how);
#define PERL_ARGS_ASSERT_MG_FREE_TYPE	\
	assert(sv)
PERL_CALLCONV int	Perl_mg_get(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_MG_GET	\
	assert(sv)
PERL_CALLCONV U32	Perl_mg_length(pTHX_ SV* sv)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_MG_LENGTH	\
	assert(sv)

PERL_CALLCONV void	Perl_mg_localize(pTHX_ SV* sv, SV* nsv, bool setmagic);
#define PERL_ARGS_ASSERT_MG_LOCALIZE	\
	assert(sv); assert(nsv)
PERL_CALLCONV void	Perl_mg_magical(SV* sv);
#define PERL_ARGS_ASSERT_MG_MAGICAL	\
	assert(sv)
PERL_CALLCONV int	Perl_mg_set(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_MG_SET	\
	assert(sv)
PERL_CALLCONV I32	Perl_mg_size(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_MG_SIZE	\
	assert(sv)
PERL_CALLCONV void	Perl_mini_mktime(struct tm *ptm);
#define PERL_ARGS_ASSERT_MINI_MKTIME	\
	assert(ptm)
PERL_CALLCONV int	Perl_mode_from_discipline(pTHX_ const char* s, STRLEN len);
PERL_CALLCONV void *	Perl_more_bodies(pTHX_ const svtype sv_type, const size_t body_size, const size_t arena_size);
PERL_CALLCONV const char*	Perl_moreswitches(pTHX_ const char* s);
#define PERL_ARGS_ASSERT_MORESWITCHES	\
	assert(s)
PERL_CALLCONV const struct mro_alg *	Perl_mro_get_from_name(pTHX_ SV *name);
#define PERL_ARGS_ASSERT_MRO_GET_FROM_NAME	\
	assert(name)
PERL_CALLCONV AV*	Perl_mro_get_linear_isa(pTHX_ HV* stash);
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA	\
	assert(stash)
PERL_CALLCONV SV*	Perl_mro_get_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which);
#define PERL_ARGS_ASSERT_MRO_GET_PRIVATE_DATA	\
	assert(smeta); assert(which)
PERL_CALLCONV void	Perl_mro_isa_changed_in(pTHX_ HV* stash);
#define PERL_ARGS_ASSERT_MRO_ISA_CHANGED_IN	\
	assert(stash)
PERL_CALLCONV struct mro_meta*	Perl_mro_meta_init(pTHX_ HV* stash);
#define PERL_ARGS_ASSERT_MRO_META_INIT	\
	assert(stash)
PERL_CALLCONV void	Perl_mro_method_changed_in(pTHX_ HV* stash);
#define PERL_ARGS_ASSERT_MRO_METHOD_CHANGED_IN	\
	assert(stash)
PERL_CALLCONV void	Perl_mro_package_moved(pTHX_ HV * const stash, HV * const oldstash, const GV * const gv, U32 flags);
#define PERL_ARGS_ASSERT_MRO_PACKAGE_MOVED	\
	assert(gv)
PERL_CALLCONV void	Perl_mro_register(pTHX_ const struct mro_alg *mro);
#define PERL_ARGS_ASSERT_MRO_REGISTER	\
	assert(mro)
PERL_CALLCONV void	Perl_mro_set_mro(pTHX_ struct mro_meta *const meta, SV *const name);
#define PERL_ARGS_ASSERT_MRO_SET_MRO	\
	assert(meta); assert(name)
PERL_CALLCONV SV*	Perl_mro_set_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which, SV *const data);
#define PERL_ARGS_ASSERT_MRO_SET_PRIVATE_DATA	\
	assert(smeta); assert(which); assert(data)
PERL_CALLCONV SV*	Perl_multideref_stringify(pTHX_ const OP* o, CV *cv);
#define PERL_ARGS_ASSERT_MULTIDEREF_STRINGIFY	\
	assert(o)
PERL_CALLCONV NV	Perl_my_atof(pTHX_ const char *s);
#define PERL_ARGS_ASSERT_MY_ATOF	\
	assert(s)
PERL_CALLCONV char*	Perl_my_atof2(pTHX_ const char *s, NV* value);
#define PERL_ARGS_ASSERT_MY_ATOF2	\
	assert(s); assert(value)
PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs);
#define PERL_ARGS_ASSERT_MY_ATTRS	\
	assert(o)
PERL_CALLCONV void	Perl_my_clearenv(pTHX);
PERL_CALLCONV int	Perl_my_dirfd(DIR* dir);
PERL_CALLCONV_NO_RET void	Perl_my_exit(pTHX_ U32 status)
			__attribute__noreturn__;

PERL_CALLCONV_NO_RET void	Perl_my_failure_exit(pTHX)
			__attribute__noreturn__;

PERL_CALLCONV I32	Perl_my_fflush_all(pTHX);
PERL_CALLCONV Pid_t	Perl_my_fork(void);
/* PERL_CALLCONV I32	Perl_my_lstat(pTHX); */
PERL_CALLCONV I32	Perl_my_lstat_flags(pTHX_ const U32 flags);
PERL_CALLCONV PerlIO*	Perl_my_popen_list(pTHX_ const char* mode, int n, SV ** args);
#define PERL_ARGS_ASSERT_MY_POPEN_LIST	\
	assert(mode); assert(args)
PERL_CALLCONV void	Perl_my_setenv(pTHX_ const char* nam, const char* val);
PERL_CALLCONV int	Perl_my_snprintf(char *buffer, const Size_t len, const char *format, ...)
			__attribute__format__(__printf__,3,4);
#define PERL_ARGS_ASSERT_MY_SNPRINTF	\
	assert(buffer); assert(format)

PERL_CALLCONV int	Perl_my_socketpair(int family, int type, int protocol, int fd[2]);
/* PERL_CALLCONV I32	Perl_my_stat(pTHX); */
PERL_CALLCONV I32	Perl_my_stat_flags(pTHX_ const U32 flags);
PERL_CALLCONV char*	Perl_my_strerror(pTHX_ const int errnum);
PERL_CALLCONV char *	Perl_my_strftime(pTHX_ const char *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst)
			__attribute__format__(__strftime__,pTHX_1,0);
#define PERL_ARGS_ASSERT_MY_STRFTIME	\
	assert(fmt)

PERL_CALLCONV void	Perl_my_unexec(pTHX);
PERL_CALLCONV int	Perl_my_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap);
#define PERL_ARGS_ASSERT_MY_VSNPRINTF	\
	assert(buffer); assert(format)
PERL_CALLCONV OP*	Perl_newANONATTRSUB(pTHX_ I32 floor, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV OP*	Perl_newANONHASH(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newANONLIST(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newANONSUB(pTHX_ I32 floor, OP* proto, OP* block);
PERL_CALLCONV OP*	Perl_newASSIGNOP(pTHX_ I32 flags, OP* left, I32 optype, OP* right)
			__attribute__malloc__
			__attribute__warn_unused_result__;

/* PERL_CALLCONV CV*	newATTRSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block); */
PERL_CALLCONV CV*	Perl_newATTRSUB_x(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block, bool o_is_gv);
/* PERL_CALLCONV AV*	Perl_newAV(pTHX)
			__attribute__warn_unused_result__; */

PERL_CALLCONV OP*	Perl_newAVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWAVREF	\
	assert(o)

PERL_CALLCONV OP*	Perl_newBINOP(pTHX_ I32 type, I32 flags, OP* first, OP* last)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newCONDOP(pTHX_ I32 flags, OP* first, OP* trueop, OP* falseop)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWCONDOP	\
	assert(first)

PERL_CALLCONV CV*	Perl_newCONSTSUB(pTHX_ HV* stash, const char* name, SV* sv);
PERL_CALLCONV CV*	Perl_newCONSTSUB_flags(pTHX_ HV* stash, const char* name, STRLEN len, U32 flags, SV* sv);
PERL_CALLCONV OP*	Perl_newCVREF(pTHX_ I32 flags, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newDEFSVOP(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
PERL_CALLCONV OP*	Perl_newFOROP(pTHX_ I32 flags, OP* sv, OP* expr, OP* block, OP* cont)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWFOROP	\
	assert(expr)

PERL_CALLCONV OP*	Perl_newGIVENOP(pTHX_ OP* cond, OP* block, PADOFFSET defsv_off)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWGIVENOP	\
	assert(cond); assert(block)

PERL_CALLCONV GP *	Perl_newGP(pTHX_ GV *const gv);
#define PERL_ARGS_ASSERT_NEWGP	\
	assert(gv)
PERL_CALLCONV OP*	Perl_newGVOP(pTHX_ I32 type, I32 flags, GV* gv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWGVOP	\
	assert(gv)

PERL_CALLCONV OP*	Perl_newGVREF(pTHX_ I32 type, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

/* PERL_CALLCONV GV*	newGVgen(pTHX_ const char* pack); */
PERL_CALLCONV GV*	Perl_newGVgen_flags(pTHX_ const char* pack, U32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWGVGEN_FLAGS	\
	assert(pack)

/* PERL_CALLCONV HV*	Perl_newHV(pTHX)
			__attribute__warn_unused_result__; */

PERL_CALLCONV OP*	Perl_newHVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWHVREF	\
	assert(o)

PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV *hv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

/* PERL_CALLCONV IO*	Perl_newIO(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__; */

PERL_CALLCONV OP*	Perl_newLISTOP(pTHX_ I32 type, I32 flags, OP* first, OP* last)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP *first, OP *other)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWLOGOP	\
	assert(first); assert(other)

PERL_CALLCONV OP*	Perl_newLOOPEX(pTHX_ I32 type, OP* label)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWLOOPEX	\
	assert(label)

PERL_CALLCONV OP*	Perl_newLOOPOP(pTHX_ I32 flags, I32 debuggable, OP* expr, OP* block)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newMETHOP(pTHX_ I32 type, I32 flags, OP* dynamic_meth)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWMETHOP	\
	assert(dynamic_meth)

PERL_CALLCONV OP*	Perl_newMETHOP_named(pTHX_ I32 type, I32 flags, SV* const_meth)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWMETHOP_NAMED	\
	assert(const_meth)

PERL_CALLCONV CV *	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
#define PERL_ARGS_ASSERT_NEWMYSUB	\
	assert(o)
PERL_CALLCONV OP*	Perl_newNULLLIST(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newOP(pTHX_ I32 optype, I32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV PADNAMELIST *	Perl_newPADNAMELIST(size_t max)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV PADNAME *	Perl_newPADNAMEouter(PADNAME *outer)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPADNAMEOUTER	\
	assert(outer)

PERL_CALLCONV PADNAME *	Perl_newPADNAMEpvn(const char *s, STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPADNAMEPVN	\
	assert(s)

PERL_CALLCONV OP*	Perl_newPMOP(pTHX_ I32 type, I32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_newPROG(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_NEWPROG	\
	assert(o)
PERL_CALLCONV OP*	Perl_newPVOP(pTHX_ I32 type, I32 flags, char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newRANGE(pTHX_ I32 flags, OP* left, OP* right)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWRANGE	\
	assert(left); assert(right)

PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV *const sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWRV	\
	assert(sv)

PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *const tmpRef)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWRV_NOINC	\
	assert(tmpRef)

PERL_CALLCONV OP*	Perl_newSLICEOP(pTHX_ I32 flags, OP* subscript, OP* listop)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newSTATEOP(pTHX_ I32 flags, char* label, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV CV*	Perl_newSTUB(pTHX_ GV *gv, bool fake);
#define PERL_ARGS_ASSERT_NEWSTUB	\
	assert(gv)
/* PERL_CALLCONV CV*	Perl_newSUB(pTHX_ I32 floor, OP* o, OP* proto, OP* block); */
PERL_CALLCONV SV*	Perl_newSV(pTHX_ const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newSVOP(pTHX_ I32 type, I32 flags, SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVOP	\
	assert(sv)

PERL_CALLCONV OP*	Perl_newSVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVREF	\
	assert(o)

PERL_CALLCONV SV*	Perl_newSV_type(pTHX_ const svtype type)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVavdefelem(pTHX_ AV *av, SSize_t ix, bool extendible)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVAVDEFELEM	\
	assert(av)

PERL_CALLCONV SV*	Perl_newSVhek(pTHX_ const HEK *const hek)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSViv(pTHX_ const IV i)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVnv(pTHX_ const NV n)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpv(pTHX_ const char *const s, const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpv_share(pTHX_ const char* s, U32 hash)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpvf(pTHX_ const char *const pat, ...)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_NEWSVPVF	\
	assert(pat)

PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char *const s, const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpvn_flags(pTHX_ const char *const s, const STRLEN len, const U32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpvn_share(pTHX_ const char* s, I32 len, U32 hash)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV *const rv, const char *const classname);
#define PERL_ARGS_ASSERT_NEWSVRV	\
	assert(rv)
PERL_CALLCONV SV*	Perl_newSVsv(pTHX_ SV *const old)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ const UV u)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newUNOP(pTHX_ I32 type, I32 flags, OP* first)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newUNOP_AUX(pTHX_ I32 type, I32 flags, OP* first, UNOP_AUX_item *aux)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newWHENOP(pTHX_ OP* cond, OP* block)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWWHENOP	\
	assert(block)

PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, OP* expr, OP* block, OP* cont, I32 has_my)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV CV*	Perl_newXS(pTHX_ const char *name, XSUBADDR_t subaddr, const char *filename);
#define PERL_ARGS_ASSERT_NEWXS	\
	assert(subaddr); assert(filename)
PERL_CALLCONV CV *	Perl_newXS_deffile(pTHX_ const char *name, XSUBADDR_t subaddr);
#define PERL_ARGS_ASSERT_NEWXS_DEFFILE	\
	assert(name); assert(subaddr)
PERL_CALLCONV CV *	Perl_newXS_flags(pTHX_ const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags);
#define PERL_ARGS_ASSERT_NEWXS_FLAGS	\
	assert(subaddr); assert(filename)
PERL_CALLCONV CV *	Perl_newXS_len_flags(pTHX_ const char *name, STRLEN len, XSUBADDR_t subaddr, const char *const filename, const char *const proto, SV **const_svp, U32 flags);
#define PERL_ARGS_ASSERT_NEWXS_LEN_FLAGS	\
	assert(subaddr)
PERL_CALLCONV void	Perl_new_collate(pTHX_ const char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ const char* newctype);
#define PERL_ARGS_ASSERT_NEW_CTYPE	\
	assert(newctype)
PERL_CALLCONV void	Perl_new_numeric(pTHX_ const char* newcoll);
PERL_CALLCONV PERL_SI*	Perl_new_stackinfo(pTHX_ I32 stitems, I32 cxitems)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_new_version(pTHX_ SV *ver);
#define PERL_ARGS_ASSERT_NEW_VERSION	\
	assert(ver)
PERL_CALLCONV STRLEN *	Perl_new_warnings_bitfield(pTHX_ STRLEN *buffer, const char *const bits, STRLEN size)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEW_WARNINGS_BITFIELD	\
	assert(bits)

PERL_CALLCONV PerlIO*	Perl_nextargv(pTHX_ GV* gv, bool nomagicopen);
#define PERL_ARGS_ASSERT_NEXTARGV	\
	assert(gv)
PERL_CALLCONV char*	Perl_ninstr(const char* big, const char* bigend, const char* little, const char* lend)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_NINSTR	\
	assert(big); assert(bigend); assert(little); assert(lend)

PERL_CALLCONV_NO_RET void	Perl_noperl_die(const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_NOPERL_DIE	\
	assert(pat)

PERL_CALLCONV int	Perl_nothreadhook(pTHX);
PERL_CALLCONV OP*	Perl_oopsAV(pTHX_ OP* o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_OOPSAV	\
	assert(o)

PERL_CALLCONV OP*	Perl_oopsHV(pTHX_ OP* o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_OOPSHV	\
	assert(o)

PERL_CALLCONV OP*	Perl_op_append_elem(pTHX_ I32 optype, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_op_append_list(pTHX_ I32 optype, OP* first, OP* last);
PERL_CALLCONV void	Perl_op_clear(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_OP_CLEAR	\
	assert(o)
PERL_CALLCONV OP*	Perl_op_contextualize(pTHX_ OP* o, I32 context);
#define PERL_ARGS_ASSERT_OP_CONTEXTUALIZE	\
	assert(o)
PERL_CALLCONV OP*	Perl_op_convert_list(pTHX_ I32 optype, I32 flags, OP* o)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_op_dump(pTHX_ const OP *o);
#define PERL_ARGS_ASSERT_OP_DUMP	\
	assert(o)
PERL_CALLCONV void	Perl_op_free(pTHX_ OP* arg);
PERL_CALLCONV OP*	Perl_op_linklist(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_LINKLIST	\
	assert(o)
/* PERL_CALLCONV OP*	op_lvalue(pTHX_ OP* o, I32 type); */
PERL_CALLCONV OP*	Perl_op_lvalue_flags(pTHX_ OP* o, I32 type, U32 flags);
PERL_CALLCONV void	Perl_op_null(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_OP_NULL	\
	assert(o)
PERL_CALLCONV OP*	Perl_op_prepend_elem(pTHX_ I32 optype, OP* first, OP* last);
PERL_CALLCONV void	Perl_op_refcnt_lock(pTHX);
PERL_CALLCONV void	Perl_op_refcnt_unlock(pTHX);
PERL_CALLCONV OP*	Perl_op_scope(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_op_sibling_splice(OP *parent, OP *start, int del_count, OP* insert);
PERL_CALLCONV OP*	Perl_op_unscope(pTHX_ OP* o);
PERL_CALLCONV void	Perl_pack_cat(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags);
#define PERL_ARGS_ASSERT_PACK_CAT	\
	assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist); assert(next_in_list)
PERL_CALLCONV void	Perl_package(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_PACKAGE	\
	assert(o)
PERL_CALLCONV void	Perl_package_version(pTHX_ OP* v);
#define PERL_ARGS_ASSERT_PACKAGE_VERSION	\
	assert(v)
PERL_CALLCONV void	Perl_packlist(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist);
#define PERL_ARGS_ASSERT_PACKLIST	\
	assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist)
PERL_CALLCONV PADOFFSET	Perl_pad_add_anon(pTHX_ CV* func, I32 optype);
#define PERL_ARGS_ASSERT_PAD_ADD_ANON	\
	assert(func)
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_pv(pTHX_ const char *name, const U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PV	\
	assert(name)
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_pvn(pTHX_ const char *namepv, STRLEN namelen, U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PVN	\
	assert(namepv)
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_sv(pTHX_ SV *name, U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_SV	\
	assert(name)
PERL_CALLCONV void	Perl_pad_add_weakref(pTHX_ CV* func);
#define PERL_ARGS_ASSERT_PAD_ADD_WEAKREF	\
	assert(func)
PERL_CALLCONV PADOFFSET	Perl_pad_alloc(pTHX_ I32 optype, U32 tmptype);
PERL_CALLCONV void	Perl_pad_block_start(pTHX_ int full);
PERL_CALLCONV HV*	Perl_pad_compname_type(pTHX_ const PADOFFSET po)
			__attribute__warn_unused_result__;

PERL_CALLCONV PADOFFSET	Perl_pad_findmy_pv(pTHX_ const char* name, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_PV	\
	assert(name)
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_pvn(pTHX_ const char* namepv, STRLEN namelen, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_PVN	\
	assert(namepv)
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_sv(pTHX_ SV* name, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_SV	\
	assert(name)
PERL_CALLCONV void	Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv);
#define PERL_ARGS_ASSERT_PAD_FIXUP_INNER_ANONS	\
	assert(padlist); assert(old_cv); assert(new_cv)
PERL_CALLCONV void	Perl_pad_free(pTHX_ PADOFFSET po);
PERL_CALLCONV OP *	Perl_pad_leavemy(pTHX);
PERL_CALLCONV PADLIST*	Perl_pad_new(pTHX_ int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_pad_push(pTHX_ PADLIST *padlist, int depth);
#define PERL_ARGS_ASSERT_PAD_PUSH	\
	assert(padlist)
PERL_CALLCONV void	Perl_pad_swipe(pTHX_ PADOFFSET po, bool refadjust);
PERL_CALLCONV void	Perl_pad_tidy(pTHX_ padtidy_type type);
PERL_CALLCONV PAD **	Perl_padlist_store(pTHX_ PADLIST *padlist, I32 key, PAD *val);
#define PERL_ARGS_ASSERT_PADLIST_STORE	\
	assert(padlist)
PERL_CALLCONV void	Perl_padname_free(pTHX_ PADNAME *pn);
#define PERL_ARGS_ASSERT_PADNAME_FREE	\
	assert(pn)
PERL_CALLCONV PADNAME *	Perl_padnamelist_fetch(PADNAMELIST *pnl, SSize_t key)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PADNAMELIST_FETCH	\
	assert(pnl)

PERL_CALLCONV void	Perl_padnamelist_free(pTHX_ PADNAMELIST *pnl);
#define PERL_ARGS_ASSERT_PADNAMELIST_FREE	\
	assert(pnl)
PERL_CALLCONV PADNAME **	Perl_padnamelist_store(pTHX_ PADNAMELIST *pnl, SSize_t key, PADNAME *val);
#define PERL_ARGS_ASSERT_PADNAMELIST_STORE	\
	assert(pnl)
PERL_CALLCONV OP*	Perl_parse_arithexpr(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_barestmt(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_block(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_fullexpr(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_fullstmt(pTHX_ U32 flags);
PERL_CALLCONV SV*	Perl_parse_label(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_listexpr(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_stmtseq(pTHX_ U32 flags);
PERL_CALLCONV OP *	Perl_parse_subsignature(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_parse_termexpr(pTHX_ U32 flags);
PERL_CALLCONV U32	Perl_parse_unicode_opts(pTHX_ const char **popt);
#define PERL_ARGS_ASSERT_PARSE_UNICODE_OPTS	\
	assert(popt)
PERL_CALLCONV void	Perl_parser_free(pTHX_ const yy_parser *parser);
#define PERL_ARGS_ASSERT_PARSER_FREE	\
	assert(parser)
PERL_CALLCONV void	Perl_peep(pTHX_ OP* o);
PERL_CALLCONV PerlInterpreter*	perl_alloc(void);
PERL_CALLCONV void	perl_construct(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_CONSTRUCT	\
	assert(my_perl)
PERL_CALLCONV int	perl_destruct(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_DESTRUCT	\
	assert(my_perl)
PERL_CALLCONV void	perl_free(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_FREE	\
	assert(my_perl)
PERL_CALLCONV int	perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env);
#define PERL_ARGS_ASSERT_PERL_PARSE	\
	assert(my_perl)
PERL_CALLCONV int	perl_run(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_RUN	\
	assert(my_perl)
PERL_CALLCONV void	Perl_pmop_dump(pTHX_ PMOP* pm);
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP *o, OP *expr, OP *repl, bool isreg, I32 floor);
#define PERL_ARGS_ASSERT_PMRUNTIME	\
	assert(o); assert(expr)
PERL_CALLCONV void	Perl_pop_scope(pTHX);
PERL_CALLCONV void	Perl_populate_isa(pTHX_ const char *name, STRLEN len, ...);
#define PERL_ARGS_ASSERT_POPULATE_ISA	\
	assert(name)
PERL_CALLCONV REGEXP*	Perl_pregcomp(pTHX_ SV * const pattern, const U32 flags);
#define PERL_ARGS_ASSERT_PREGCOMP	\
	assert(pattern)
PERL_CALLCONV I32	Perl_pregexec(pTHX_ REGEXP * const prog, char* stringarg, char* strend, char* strbeg, SSize_t minend, SV* screamer, U32 nosave);
#define PERL_ARGS_ASSERT_PREGEXEC	\
	assert(prog); assert(stringarg); assert(strend); assert(strbeg); assert(screamer)
PERL_CALLCONV void	Perl_pregfree(pTHX_ REGEXP* r);
PERL_CALLCONV void	Perl_pregfree2(pTHX_ REGEXP *rx);
#define PERL_ARGS_ASSERT_PREGFREE2	\
	assert(rx)
PERL_CALLCONV const char*	Perl_prescan_version(pTHX_ const char *s, bool strict, const char** errstr, bool *sqv, int *ssaw_decimal, int *swidth, bool *salpha);
#define PERL_ARGS_ASSERT_PRESCAN_VERSION	\
	assert(s)
PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *const tbl)
			__attribute__deprecated__;

PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *const tbl, const void *const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PTR_TABLE_FETCH	\
	assert(tbl)

PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *const tbl);
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *const tbl);
#define PERL_ARGS_ASSERT_PTR_TABLE_SPLIT	\
	assert(tbl)
PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *const tbl, const void *const oldsv, void *const newsv);
#define PERL_ARGS_ASSERT_PTR_TABLE_STORE	\
	assert(tbl); assert(newsv)
PERL_CALLCONV void	Perl_push_scope(pTHX);
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
#define PERL_ARGS_ASSERT_PV_DISPLAY	\
	assert(dsv); assert(pv)
PERL_CALLCONV char*	Perl_pv_escape(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags);
#define PERL_ARGS_ASSERT_PV_ESCAPE	\
	assert(str)
PERL_CALLCONV char*	Perl_pv_pretty(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags);
#define PERL_ARGS_ASSERT_PV_PRETTY	\
	assert(dsv); assert(str)
PERL_CALLCONV char*	Perl_pv_uni_display(pTHX_ SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags);
#define PERL_ARGS_ASSERT_PV_UNI_DISPLAY	\
	assert(dsv); assert(spv)
PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err);
#define PERL_ARGS_ASSERT_QERROR	\
	assert(err)
PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ SV * const pattern, U32 orig_rx_flags);
#define PERL_ARGS_ASSERT_RE_COMPILE	\
	assert(pattern)
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, const char* const strbeg, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data);
#define PERL_ARGS_ASSERT_RE_INTUIT_START	\
	assert(rx); assert(strbeg); assert(strpos); assert(strend)
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP  *const r);
#define PERL_ARGS_ASSERT_RE_INTUIT_STRING	\
	assert(r)
PERL_CALLCONV REGEXP*	Perl_re_op_compile(pTHX_ SV ** const patternp, int pat_count, OP *expr, const regexp_engine* eng, REGEXP *old_re, bool *is_bare_re, U32 rx_flags, U32 pm_flags);
#define PERL_ARGS_ASSERT_RE_OP_COMPILE	\
	assert(eng)
PERL_CALLCONV Malloc_t	Perl_realloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_reentrant_free(pTHX);
PERL_CALLCONV void	Perl_reentrant_init(pTHX);
PERL_CALLCONV void*	Perl_reentrant_retry(const char *f, ...);
#define PERL_ARGS_ASSERT_REENTRANT_RETRY	\
	assert(f)
PERL_CALLCONV void	Perl_reentrant_size(pTHX);
/* PERL_CALLCONV OP*	Perl_ref(pTHX_ OP* o, I32 type); */
PERL_CALLCONV HV *	Perl_refcounted_he_chain_2hv(pTHX_ const struct refcounted_he *c, U32 flags);
PERL_CALLCONV SV *	Perl_refcounted_he_fetch_pv(pTHX_ const struct refcounted_he *chain, const char *key, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PV	\
	assert(key)
PERL_CALLCONV SV *	Perl_refcounted_he_fetch_pvn(pTHX_ const struct refcounted_he *chain, const char *keypv, STRLEN keylen, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PVN	\
	assert(keypv)
PERL_CALLCONV SV *	Perl_refcounted_he_fetch_sv(pTHX_ const struct refcounted_he *chain, SV *key, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_SV	\
	assert(key)
PERL_CALLCONV void	Perl_refcounted_he_free(pTHX_ struct refcounted_he *he);
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_inc(pTHX_ struct refcounted_he *he);
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_pv(pTHX_ struct refcounted_he *parent, const char *key, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PV	\
	assert(key)
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_pvn(pTHX_ struct refcounted_he *parent, const char *keypv, STRLEN keylen, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PVN	\
	assert(keypv)
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_sv(pTHX_ struct refcounted_he *parent, SV *key, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_SV	\
	assert(key)
PERL_CALLCONV SV*	Perl_reg_named_buff(pTHX_ REGEXP * const rx, SV * const key, SV * const value, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF	\
	assert(rx)
PERL_CALLCONV SV*	Perl_reg_named_buff_all(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ALL	\
	assert(rx)
PERL_CALLCONV bool	Perl_reg_named_buff_exists(pTHX_ REGEXP * const rx, SV * const key, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_EXISTS	\
	assert(rx); assert(key)
PERL_CALLCONV SV*	Perl_reg_named_buff_fetch(pTHX_ REGEXP * const rx, SV * const namesv, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FETCH	\
	assert(rx); assert(namesv)
PERL_CALLCONV SV*	Perl_reg_named_buff_firstkey(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FIRSTKEY	\
	assert(rx)
PERL_CALLCONV SV*	Perl_reg_named_buff_iter(pTHX_ REGEXP * const rx, const SV * const lastkey, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ITER	\
	assert(rx)
PERL_CALLCONV SV*	Perl_reg_named_buff_nextkey(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_NEXTKEY	\
	assert(rx)
PERL_CALLCONV SV*	Perl_reg_named_buff_scalar(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_SCALAR	\
	assert(rx)
PERL_CALLCONV void	Perl_reg_numbered_buff_fetch(pTHX_ REGEXP * const rx, const I32 paren, SV * const sv);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_FETCH	\
	assert(rx)
PERL_CALLCONV I32	Perl_reg_numbered_buff_length(pTHX_ REGEXP * const rx, const SV * const sv, const I32 paren);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_LENGTH	\
	assert(rx); assert(sv)
PERL_CALLCONV void	Perl_reg_numbered_buff_store(pTHX_ REGEXP * const rx, const I32 paren, SV const * const value);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_STORE	\
	assert(rx)
PERL_CALLCONV SV*	Perl_reg_qr_package(pTHX_ REGEXP * const rx);
#define PERL_ARGS_ASSERT_REG_QR_PACKAGE	\
	assert(rx)
PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* ret_x, REGEXP* rx);
#define PERL_ARGS_ASSERT_REG_TEMP_COPY	\
	assert(rx)
PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **altsvp);
#define PERL_ARGS_ASSERT_REGCLASS_SWASH	\
	assert(node)
PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r);
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, SSize_t minend, SV *sv, void *data, U32 flags);
#define PERL_ARGS_ASSERT_REGEXEC_FLAGS	\
	assert(rx); assert(stringarg); assert(strend); assert(strbeg); assert(sv)
PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const rx);
#define PERL_ARGS_ASSERT_REGFREE_INTERNAL	\
	assert(rx)
PERL_CALLCONV void	Perl_reginitcolors(pTHX);
PERL_CALLCONV regnode*	Perl_regnext(pTHX_ regnode* p)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_repeatcpy(char* to, const char* from, I32 len, IV count);
#define PERL_ARGS_ASSERT_REPEATCPY	\
	assert(to); assert(from)
PERL_CALLCONV void	Perl_report_evil_fh(pTHX_ const GV *gv);
PERL_CALLCONV void	Perl_report_uninit(pTHX_ const SV *uninit_sv);
PERL_CALLCONV void	Perl_report_wrongway_fh(pTHX_ const GV *gv, const char have);
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv);
#define PERL_ARGS_ASSERT_REQUIRE_PV	\
	assert(pv)
PERL_CALLCONV char*	Perl_rninstr(const char* big, const char* bigend, const char* little, const char* lend)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_RNINSTR	\
	assert(big); assert(bigend); assert(little); assert(lend)

PERL_CALLCONV void	Perl_rpeep(pTHX_ OP* o);
PERL_CALLCONV Sighandler_t	Perl_rsignal(pTHX_ int i, Sighandler_t t);
PERL_CALLCONV int	Perl_rsignal_restore(pTHX_ int i, Sigsave_t* t);
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* save);
#define PERL_ARGS_ASSERT_RSIGNAL_SAVE	\
	assert(save)
PERL_CALLCONV Sighandler_t	Perl_rsignal_state(pTHX_ int i);
PERL_CALLCONV int	Perl_runops_debug(pTHX);
PERL_CALLCONV int	Perl_runops_standard(pTHX);
PERL_CALLCONV CV*	Perl_rv2cv_op_cv(pTHX_ OP *cvop, U32 flags);
#define PERL_ARGS_ASSERT_RV2CV_OP_CV	\
	assert(cvop)
PERL_CALLCONV void	Perl_rxres_save(pTHX_ void **rsp, REGEXP *rx);
#define PERL_ARGS_ASSERT_RXRES_SAVE	\
	assert(rsp); assert(rx)
PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Free_t	Perl_safesysfree(Malloc_t where);
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp);
#define PERL_ARGS_ASSERT_SAVE_I16	\
	assert(intp)
PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp);
#define PERL_ARGS_ASSERT_SAVE_I32	\
	assert(intp)
PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep);
#define PERL_ARGS_ASSERT_SAVE_I8	\
	assert(bytep)
PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, SSize_t key);
#define PERL_ARGS_ASSERT_SAVE_ADELETE	\
	assert(av)
/* PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, SSize_t idx, SV **sptr); */
PERL_CALLCONV void	Perl_save_aelem_flags(pTHX_ AV* av, SSize_t idx, SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_AELEM_FLAGS	\
	assert(av); assert(sptr)
PERL_CALLCONV I32	Perl_save_alloc(pTHX_ I32 size, I32 pad);
PERL_CALLCONV void	Perl_save_aptr(pTHX_ AV** aptr);
#define PERL_ARGS_ASSERT_SAVE_APTR	\
	assert(aptr)
PERL_CALLCONV AV*	Perl_save_ary(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SAVE_ARY	\
	assert(gv)
PERL_CALLCONV void	Perl_save_bool(pTHX_ bool* boolp);
#define PERL_ARGS_ASSERT_SAVE_BOOL	\
	assert(boolp)
PERL_CALLCONV void	Perl_save_clearsv(pTHX_ SV** svp);
#define PERL_ARGS_ASSERT_SAVE_CLEARSV	\
	assert(svp)
PERL_CALLCONV void	Perl_save_delete(pTHX_ HV *hv, char *key, I32 klen);
#define PERL_ARGS_ASSERT_SAVE_DELETE	\
	assert(hv); assert(key)
PERL_CALLCONV void	Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void* p);
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR	\
	assert(p)
PERL_CALLCONV void	Perl_save_destructor_x(pTHX_ DESTRUCTORFUNC_t f, void* p);
/* PERL_CALLCONV void	Perl_save_freeop(pTHX_ OP* o); */
/* PERL_CALLCONV void	Perl_save_freepv(pTHX_ char* pv); */
/* PERL_CALLCONV void	Perl_save_freesv(pTHX_ SV* sv); */
PERL_CALLCONV void	Perl_save_generic_pvref(pTHX_ char** str);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_PVREF	\
	assert(str)
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_SVREF	\
	assert(sptr)
PERL_CALLCONV void	Perl_save_gp(pTHX_ GV* gv, I32 empty);
#define PERL_ARGS_ASSERT_SAVE_GP	\
	assert(gv)
PERL_CALLCONV HV*	Perl_save_hash(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SAVE_HASH	\
	assert(gv)
PERL_CALLCONV void	Perl_save_hdelete(pTHX_ HV *hv, SV *keysv);
#define PERL_ARGS_ASSERT_SAVE_HDELETE	\
	assert(hv); assert(keysv)
/* PERL_CALLCONV void	Perl_save_helem(pTHX_ HV *hv, SV *key, SV **sptr); */
PERL_CALLCONV void	Perl_save_helem_flags(pTHX_ HV *hv, SV *key, SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_HELEM_FLAGS	\
	assert(hv); assert(key); assert(sptr)
PERL_CALLCONV void	Perl_save_hints(pTHX);
PERL_CALLCONV void	Perl_save_hptr(pTHX_ HV** hptr);
#define PERL_ARGS_ASSERT_SAVE_HPTR	\
	assert(hptr)
PERL_CALLCONV void	Perl_save_int(pTHX_ int* intp);
#define PERL_ARGS_ASSERT_SAVE_INT	\
	assert(intp)
PERL_CALLCONV void	Perl_save_item(pTHX_ SV* item);
#define PERL_ARGS_ASSERT_SAVE_ITEM	\
	assert(item)
PERL_CALLCONV void	Perl_save_iv(pTHX_ IV *ivp);
#define PERL_ARGS_ASSERT_SAVE_IV	\
	assert(ivp)
PERL_CALLCONV void	Perl_save_list(pTHX_ SV** sarg, I32 maxsarg);
#define PERL_ARGS_ASSERT_SAVE_LIST	\
	assert(sarg)
PERL_CALLCONV void	Perl_save_long(pTHX_ long* longp);
#define PERL_ARGS_ASSERT_SAVE_LONG	\
	assert(longp)
/* PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv); */
#define PERL_ARGS_ASSERT_SAVE_MORTALIZESV	\
	assert(sv)
PERL_CALLCONV void	Perl_save_nogv(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SAVE_NOGV	\
	assert(gv)
/* PERL_CALLCONV void	Perl_save_op(pTHX); */
PERL_CALLCONV void	Perl_save_padsv_and_mortalize(pTHX_ PADOFFSET off);
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr);
#define PERL_ARGS_ASSERT_SAVE_PPTR	\
	assert(pptr)
PERL_CALLCONV void	Perl_save_pushi32ptr(pTHX_ const I32 i, void *const ptr, const int type);
PERL_CALLCONV void	Perl_save_pushptr(pTHX_ void *const ptr, const int type);
PERL_CALLCONV void	Perl_save_pushptrptr(pTHX_ void *const ptr1, void *const ptr2, const int type);
PERL_CALLCONV void	Perl_save_re_context(pTHX);
PERL_CALLCONV SV*	Perl_save_scalar(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SAVE_SCALAR	\
	assert(gv)
PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV *sv, U32 mask, U32 val);
#define PERL_ARGS_ASSERT_SAVE_SET_SVFLAGS	\
	assert(sv)
PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str);
#define PERL_ARGS_ASSERT_SAVE_SHARED_PVREF	\
	assert(str)
PERL_CALLCONV void	Perl_save_sptr(pTHX_ SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_SPTR	\
	assert(sptr)
PERL_CALLCONV void	Perl_save_strlen(pTHX_ STRLEN* ptr);
#define PERL_ARGS_ASSERT_SAVE_STRLEN	\
	assert(ptr)
PERL_CALLCONV SV*	Perl_save_svref(pTHX_ SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_SVREF	\
	assert(sptr)
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void *ptr);
#define PERL_ARGS_ASSERT_SAVE_VPTR	\
	assert(ptr)
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* pv, I32 len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savesharedpv(pTHX_ const char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savesharedpvn(pTHX_ const char *const pv, const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savesharedsvpv(pTHX_ SV *sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVESHAREDSVPV	\
	assert(sv)

PERL_CALLCONV void	Perl_savestack_grow(pTHX);
PERL_CALLCONV void	Perl_savestack_grow_cnt(pTHX_ I32 need);
PERL_CALLCONV char*	Perl_savesvpv(pTHX_ SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVESVPV	\
	assert(sv)

PERL_CALLCONV void	Perl_savetmps(pTHX);
PERL_CALLCONV OP*	Perl_sawparens(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalar(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalarvoid(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_SCALARVOID	\
	assert(o)
PERL_CALLCONV NV	Perl_scan_bin(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_BIN	\
	assert(start); assert(retlen)
PERL_CALLCONV NV	Perl_scan_hex(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_HEX	\
	assert(start); assert(retlen)
PERL_CALLCONV char*	Perl_scan_num(pTHX_ const char* s, YYSTYPE *lvalp);
#define PERL_ARGS_ASSERT_SCAN_NUM	\
	assert(s); assert(lvalp)
PERL_CALLCONV NV	Perl_scan_oct(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_OCT	\
	assert(start); assert(retlen)
PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *s, SV *rv, bool qv);
#define PERL_ARGS_ASSERT_SCAN_VERSION	\
	assert(s); assert(rv)
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *const e, SV *sv);
#define PERL_ARGS_ASSERT_SCAN_VSTRING	\
	assert(s); assert(e); assert(sv)
PERL_CALLCONV U32	Perl_seed(pTHX);
PERL_CALLCONV void	Perl_set_caret_X(pTHX);
PERL_CALLCONV void	Perl_set_context(void *t);
#define PERL_ARGS_ASSERT_SET_CONTEXT	\
	assert(t)
PERL_CALLCONV void	Perl_set_numeric_local(pTHX);
PERL_CALLCONV void	Perl_set_numeric_radix(pTHX);
PERL_CALLCONV void	Perl_set_numeric_standard(pTHX);
PERL_CALLCONV void	Perl_setdefout(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SETDEFOUT	\
	assert(gv)
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* str, I32 len, U32 hash);
#define PERL_ARGS_ASSERT_SHARE_HEK	\
	assert(str)
PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp);
#define PERL_ARGS_ASSERT_SORTSV	\
	assert(cmp)
PERL_CALLCONV void	Perl_sortsv_flags(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags);
#define PERL_ARGS_ASSERT_SORTSV_FLAGS	\
	assert(cmp)
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV** p, SSize_t n);
#define PERL_ARGS_ASSERT_STACK_GROW	\
	assert(sp); assert(p)
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV *tmpglob, IO *io);
#define PERL_ARGS_ASSERT_START_GLOB	\
	assert(tmpglob); assert(io)
PERL_CALLCONV I32	Perl_start_subparse(pTHX_ I32 is_format, U32 flags);
PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_STR_TO_VERSION	\
	assert(sv)

PERL_CALLCONV void	Perl_sub_crush_depth(pTHX_ CV* cv);
#define PERL_ARGS_ASSERT_SUB_CRUSH_DEPTH	\
	assert(cv)
/* PERL_CALLCONV bool	sv_2bool(pTHX_ SV *const sv); */
PERL_CALLCONV bool	Perl_sv_2bool_flags(pTHX_ SV *sv, I32 flags);
#define PERL_ARGS_ASSERT_SV_2BOOL_FLAGS	\
	assert(sv)
PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV **const st, GV **const gvp, const I32 lref);
#define PERL_ARGS_ASSERT_SV_2CV	\
	assert(st); assert(gvp)
PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_2IO	\
	assert(sv)
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV *sv); */
#define PERL_ARGS_ASSERT_SV_2IV	\
	assert(sv)
PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2IV_FLAGS	\
	assert(sv)
PERL_CALLCONV SV*	Perl_sv_2mortal(pTHX_ SV *const sv);
PERL_CALLCONV SV*	Perl_sv_2num(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_2NUM	\
	assert(sv)
PERL_CALLCONV NV	Perl_sv_2nv_flags(pTHX_ SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2NV_FLAGS	\
	assert(sv)
/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV *sv, STRLEN *lp); */
#define PERL_ARGS_ASSERT_SV_2PV	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2PV_FLAGS	\
	assert(sv)
/* PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_SV_2PV_NOLEN	\
	assert(sv)

PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV *sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_2PVBYTE	\
	assert(sv)
/* PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_SV_2PVBYTE_NOLEN	\
	assert(sv)

PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV *sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_2PVUTF8	\
	assert(sv)
/* PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_SV_2PVUTF8_NOLEN	\
	assert(sv)

/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv); */
#define PERL_ARGS_ASSERT_SV_2UV	\
	assert(sv)
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2UV_FLAGS	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_backoff(SV *const sv);
#define PERL_ARGS_ASSERT_SV_BACKOFF	\
	assert(sv)
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV *const sv, HV *const stash);
#define PERL_ARGS_ASSERT_SV_BLESS	\
	assert(sv); assert(stash)
PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen);
#define PERL_ARGS_ASSERT_SV_CAT_DECODE	\
	assert(dsv); assert(encoding); assert(ssv); assert(offset); assert(tstr)
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV *const sv, const char* ptr);
#define PERL_ARGS_ASSERT_SV_CATPV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_catpv_flags(pTHX_ SV *dstr, const char *sstr, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATPV_FLAGS	\
	assert(dstr); assert(sstr)
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_CATPV_MG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_catpvf(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_CATPVF	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_sv_catpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_CATPVF_MG	\
	assert(sv); assert(pat)

/* PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV *dsv, const char *sstr, STRLEN len); */
#define PERL_ARGS_ASSERT_SV_CATPVN	\
	assert(dsv); assert(sstr)
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *const dstr, const char *sstr, const STRLEN len, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATPVN_FLAGS	\
	assert(dstr); assert(sstr)
/* PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len); */
#define PERL_ARGS_ASSERT_SV_CATPVN_MG	\
	assert(sv); assert(ptr)
/* PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV *dstr, SV *sstr); */
#define PERL_ARGS_ASSERT_SV_CATSV	\
	assert(dstr)
PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATSV_FLAGS	\
	assert(dsv)
/* PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dsv, SV *ssv); */
#define PERL_ARGS_ASSERT_SV_CATSV_MG	\
	assert(dsv)
PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_CHOP	\
	assert(sv)
PERL_CALLCONV I32	Perl_sv_clean_all(pTHX);
PERL_CALLCONV void	Perl_sv_clean_objs(pTHX);
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV *const orig_sv);
#define PERL_ARGS_ASSERT_SV_CLEAR	\
	assert(orig_sv)
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV *const sv1, SV *const sv2);
PERL_CALLCONV I32	Perl_sv_cmp_flags(pTHX_ SV *const sv1, SV *const sv2, const U32 flags);
PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV *const sv1, SV *const sv2);
PERL_CALLCONV I32	Perl_sv_cmp_locale_flags(pTHX_ SV *const sv1, SV *const sv2, const U32 flags);
/* PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv); */
#define PERL_ARGS_ASSERT_SV_COPYPV	\
	assert(dsv); assert(ssv)
PERL_CALLCONV void	Perl_sv_copypv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_COPYPV_FLAGS	\
	assert(dsv); assert(ssv)
/* PERL_CALLCONV void	Perl_sv_copypv_nomg(pTHX_ SV *const dsv, SV *const ssv); */
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_dec_nomg(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_del_backref(pTHX_ SV *const tsv, SV *const sv);
#define PERL_ARGS_ASSERT_SV_DEL_BACKREF	\
	assert(tsv); assert(sv)
PERL_CALLCONV bool	Perl_sv_derived_from(pTHX_ SV* sv, const char *const name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_derived_from_pv(pTHX_ SV* sv, const char *const name, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PV	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_derived_from_pvn(pTHX_ SV* sv, const char *const name, const STRLEN len, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PVN	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_derived_from_sv(pTHX_ SV* sv, SV *namesv, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_SV	\
	assert(sv); assert(namesv)

PERL_CALLCONV bool	Perl_sv_destroyable(pTHX_ SV *sv);
PERL_CALLCONV bool	Perl_sv_does(pTHX_ SV* sv, const char *const name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_does_pv(pTHX_ SV* sv, const char *const name, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_PV	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_does_pvn(pTHX_ SV* sv, const char *const name, const STRLEN len, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_PVN	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_does_sv(pTHX_ SV* sv, SV* namesv, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_SV	\
	assert(sv); assert(namesv)

PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_DUMP	\
	assert(sv)
/* PERL_CALLCONV I32	sv_eq(pTHX_ SV* sv1, SV* sv2); */
PERL_CALLCONV I32	Perl_sv_eq_flags(pTHX_ SV* sv1, SV* sv2, const U32 flags);
/* PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv); */
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *const sv, const U32 flags);
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL_FLAGS	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_free(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV *const sv, const U32 refcnt);
#define PERL_ARGS_ASSERT_SV_FREE2	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_free_arenas(pTHX);
PERL_CALLCONV SV*	Perl_sv_get_backrefs(SV *const sv)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_SV_GET_BACKREFS	\
	assert(sv)

PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV *const sv, PerlIO *const fp, I32 append);
#define PERL_ARGS_ASSERT_SV_GETS	\
	assert(sv); assert(fp)
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV *const sv, STRLEN newlen);
#define PERL_ARGS_ASSERT_SV_GROW	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_inc_nomg(pTHX_ SV *const sv);
/* PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen); */
#define PERL_ARGS_ASSERT_SV_INSERT	\
	assert(bigstr); assert(little)
PERL_CALLCONV void	Perl_sv_insert_flags(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen, const U32 flags);
#define PERL_ARGS_ASSERT_SV_INSERT_FLAGS	\
	assert(bigstr); assert(little)
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char *const name);
#define PERL_ARGS_ASSERT_SV_ISA	\
	assert(name)
PERL_CALLCONV int	Perl_sv_isobject(pTHX_ SV* sv);
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_IV	\
	assert(sv)
PERL_CALLCONV STRLEN	Perl_sv_len(pTHX_ SV *const sv);
PERL_CALLCONV STRLEN	Perl_sv_len_utf8(pTHX_ SV *const sv);
PERL_CALLCONV STRLEN	Perl_sv_len_utf8_nomg(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_LEN_UTF8_NOMG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV *const sv, SV *const obj, const int how, const char *const name, const I32 namlen);
#define PERL_ARGS_ASSERT_SV_MAGIC	\
	assert(sv)
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV *const sv, SV *const obj, const int how, const MGVTBL *const vtbl, const char *const name, const I32 namlen);
#define PERL_ARGS_ASSERT_SV_MAGICEXT	\
	assert(sv)
PERL_CALLCONV MAGIC *	Perl_sv_magicext_mglob(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_MAGICEXT_MGLOB	\
	assert(sv)
/* PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV *const oldsv)
			__attribute__malloc__
			__attribute__warn_unused_result__; */

PERL_CALLCONV SV*	Perl_sv_mortalcopy_flags(pTHX_ SV *const oldsv, U32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_sv_newmortal(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_sv_newref(pTHX_ SV *const sv);
/* PERL_CALLCONV void	Perl_sv_nolocking(pTHX_ SV *sv); */
PERL_CALLCONV void	Perl_sv_nosharing(pTHX_ SV *sv);
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_NV	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_peek(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV *const sv, I32 *const offsetp);
#define PERL_ARGS_ASSERT_SV_POS_B2U	\
	assert(offsetp)
PERL_CALLCONV STRLEN	Perl_sv_pos_b2u_flags(pTHX_ SV *const sv, STRLEN const offset, U32 flags);
#define PERL_ARGS_ASSERT_SV_POS_B2U_FLAGS	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV *const sv, I32 *const offsetp, I32 *const lenp);
#define PERL_ARGS_ASSERT_SV_POS_U2B	\
	assert(offsetp)
PERL_CALLCONV STRLEN	Perl_sv_pos_u2b_flags(pTHX_ SV *const sv, STRLEN uoffset, STRLEN *const lenp, U32 flags);
#define PERL_ARGS_ASSERT_SV_POS_U2B_FLAGS	\
	assert(sv)
/* PERL_CALLCONV char*	Perl_sv_pv(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_SV_PV	\
	assert(sv)

/* PERL_CALLCONV char*	Perl_sv_pvbyte(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_SV_PVBYTE	\
	assert(sv)

PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *lp);
#define PERL_ARGS_ASSERT_SV_PVBYTEN	\
	assert(sv); assert(lp)
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV *const sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *lp);
#define PERL_ARGS_ASSERT_SV_PVN	\
	assert(sv); assert(lp)
/* PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp); */
#define PERL_ARGS_ASSERT_SV_PVN_FORCE	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags);
#define PERL_ARGS_ASSERT_SV_PVN_FORCE_FLAGS	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp);
#define PERL_ARGS_ASSERT_SV_PVN_NOMG	\
	assert(sv)
/* PERL_CALLCONV char*	Perl_sv_pvutf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */
#define PERL_ARGS_ASSERT_SV_PVUTF8	\
	assert(sv)

PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *lp);
#define PERL_ARGS_ASSERT_SV_PVUTF8N	\
	assert(sv); assert(lp)
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV *const sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_recode_to_utf8(pTHX_ SV* sv, SV *encoding);
#define PERL_ARGS_ASSERT_SV_RECODE_TO_UTF8	\
	assert(sv); assert(encoding)
PERL_CALLCONV SV*	Perl_sv_ref(pTHX_ SV *dst, const SV *const sv, const int ob);
#define PERL_ARGS_ASSERT_SV_REF	\
	assert(sv)
PERL_CALLCONV const char*	Perl_sv_reftype(pTHX_ const SV *const sv, const int ob)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_REFTYPE	\
	assert(sv)

PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV *const sv, SV *const nsv);
#define PERL_ARGS_ASSERT_SV_REPLACE	\
	assert(sv); assert(nsv)
PERL_CALLCONV void	Perl_sv_report_used(pTHX);
PERL_CALLCONV void	Perl_sv_reset(pTHX_ const char* s, HV *const stash);
#define PERL_ARGS_ASSERT_SV_RESET	\
	assert(s)
PERL_CALLCONV void	Perl_sv_resetpvn(pTHX_ const char* s, STRLEN len, HV *const stash);
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_RVWEAKEN	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_sethek(pTHX_ SV *const sv, const HEK *const hek);
#define PERL_ARGS_ASSERT_SV_SETHEK	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV *const sv, const IV num);
#define PERL_ARGS_ASSERT_SV_SETIV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *const sv, const IV i);
#define PERL_ARGS_ASSERT_SV_SETIV_MG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV *const sv, const NV num);
#define PERL_ARGS_ASSERT_SV_SETNV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *const sv, const NV num);
#define PERL_ARGS_ASSERT_SV_SETNV_MG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_SETPV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_SETPV_MG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_SETPVF	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_sv_setpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_SETPVF_MG	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV *const sv, const IV num);
#define PERL_ARGS_ASSERT_SV_SETPVIV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *const sv, const IV iv);
#define PERL_ARGS_ASSERT_SV_SETPVIV_MG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV *const sv, const char *const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *const sv, const char *const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN_MG	\
	assert(sv); assert(ptr)
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV *const rv, const char *const classname, const IV iv);
#define PERL_ARGS_ASSERT_SV_SETREF_IV	\
	assert(rv)
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV *const rv, const char *const classname, const NV nv);
#define PERL_ARGS_ASSERT_SV_SETREF_NV	\
	assert(rv)
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV *const rv, const char *const classname, void *const pv);
#define PERL_ARGS_ASSERT_SV_SETREF_PV	\
	assert(rv)
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV *const rv, const char *const classname, const char *const pv, const STRLEN n);
#define PERL_ARGS_ASSERT_SV_SETREF_PVN	\
	assert(rv); assert(pv)
PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV *const rv, const char *const classname, const UV uv);
#define PERL_ARGS_ASSERT_SV_SETREF_UV	\
	assert(rv)
/* PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV *dstr, SV *sstr); */
#define PERL_ARGS_ASSERT_SV_SETSV	\
	assert(dstr)
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dstr, SV *sstr, const I32 flags);
#define PERL_ARGS_ASSERT_SV_SETSV_FLAGS	\
	assert(dstr)
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *const dstr, SV *const sstr);
#define PERL_ARGS_ASSERT_SV_SETSV_MG	\
	assert(dstr)
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV *const sv, const UV num);
#define PERL_ARGS_ASSERT_SV_SETUV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *const sv, const UV u);
#define PERL_ARGS_ASSERT_SV_SETUV_MG	\
	assert(sv)
/* PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv); */
#define PERL_ARGS_ASSERT_SV_TAINT	\
	assert(sv)
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV *const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_TAINTED	\
	assert(sv)

PERL_CALLCONV I32	Perl_sv_true(pTHX_ SV *const sv);
PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_UNI_DISPLAY	\
	assert(dsv); assert(ssv)

PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV *const sv, const int type);
#define PERL_ARGS_ASSERT_SV_UNMAGIC	\
	assert(sv)
PERL_CALLCONV int	Perl_sv_unmagicext(pTHX_ SV *const sv, const int type, MGVTBL *vtbl);
#define PERL_ARGS_ASSERT_SV_UNMAGICEXT	\
	assert(sv)
/* PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv); */
#define PERL_ARGS_ASSERT_SV_UNREF	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV *const ref, const U32 flags);
#define PERL_ARGS_ASSERT_SV_UNREF_FLAGS	\
	assert(ref)
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_UNTAINT	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_upgrade(pTHX_ SV *const sv, svtype new_type);
#define PERL_ARGS_ASSERT_SV_UPGRADE	\
	assert(sv)
/* PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len); */
#define PERL_ARGS_ASSERT_SV_USEPVN	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_usepvn_flags(pTHX_ SV *const sv, char* ptr, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_SV_USEPVN_FLAGS	\
	assert(sv)
/* PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len); */
#define PERL_ARGS_ASSERT_SV_USEPVN_MG	\
	assert(sv)
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_UTF8_DECODE	\
	assert(sv)
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *const sv, const bool fail_ok);
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_UTF8_ENCODE	\
	assert(sv)
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade(pTHX_ SV *sv); */
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE	\
	assert(sv)
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *const sv, const I32 flags); */
PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags_grow(pTHX_ SV *const sv, const I32 flags, STRLEN extra);
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS_GROW	\
	assert(sv)
/* PERL_CALLCONV STRLEN	sv_utf8_upgrade_nomg(pTHX_ SV *sv); */
PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_UV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args);
#define PERL_ARGS_ASSERT_SV_VCATPVF	\
	assert(sv); assert(pat)
PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args);
#define PERL_ARGS_ASSERT_SV_VCATPVF_MG	\
	assert(sv); assert(pat)
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted);
#define PERL_ARGS_ASSERT_SV_VCATPVFN	\
	assert(sv); assert(pat)
PERL_CALLCONV void	Perl_sv_vcatpvfn_flags(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted, const U32 flags);
#define PERL_ARGS_ASSERT_SV_VCATPVFN_FLAGS	\
	assert(sv); assert(pat)
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args);
#define PERL_ARGS_ASSERT_SV_VSETPVF	\
	assert(sv); assert(pat)
PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args);
#define PERL_ARGS_ASSERT_SV_VSETPVF_MG	\
	assert(sv); assert(pat)
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted);
#define PERL_ARGS_ASSERT_SV_VSETPVFN	\
	assert(sv); assert(pat)
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *swash, const U8 *ptr, bool do_utf8);
#define PERL_ARGS_ASSERT_SWASH_FETCH	\
	assert(swash); assert(ptr)
PERL_CALLCONV SV*	Perl_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SWASH_INIT	\
	assert(pkg); assert(name); assert(listsv)

PERL_CALLCONV void	Perl_sync_locale(pTHX);
PERL_CALLCONV void	Perl_sys_init(int* argc, char*** argv);
#define PERL_ARGS_ASSERT_SYS_INIT	\
	assert(argc); assert(argv)
PERL_CALLCONV void	Perl_sys_init3(int* argc, char*** argv, char*** env);
#define PERL_ARGS_ASSERT_SYS_INIT3	\
	assert(argc); assert(argv); assert(env)
PERL_CALLCONV void	Perl_sys_term(void);
PERL_CALLCONV void	Perl_taint_env(pTHX);
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char *const s);
#define PERL_ARGS_ASSERT_TAINT_PROPER	\
	assert(s)
PERL_CALLCONV OP *	Perl_tied_method(pTHX_ SV *methname, SV **sp, SV *const sv, const MAGIC *const mg, const U32 flags, U32 argc, ...);
#define PERL_ARGS_ASSERT_TIED_METHOD	\
	assert(methname); assert(sp); assert(sv); assert(mg)
PERL_CALLCONV SSize_t	Perl_tmps_grow_p(pTHX_ SSize_t ix);
/* PERL_CALLCONV UV	Perl_to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp); */
PERL_CALLCONV UV	Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_LOWER	\
	assert(p); assert(lenp)
PERL_CALLCONV U32	Perl_to_uni_lower_lc(pTHX_ U32 c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV UV	Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_TITLE	\
	assert(p); assert(lenp)
PERL_CALLCONV U32	Perl_to_uni_title_lc(pTHX_ U32 c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV UV	Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_UPPER	\
	assert(p); assert(lenp)
PERL_CALLCONV U32	Perl_to_uni_upper_lc(pTHX_ U32 c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV UV	Perl_to_utf8_case(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, const char *normal, const char *special)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_TO_UTF8_CASE	\
	assert(p); assert(ustrp); assert(swashp); assert(normal)

/* PERL_CALLCONV UV	Perl_to_utf8_fold(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp); */
#define PERL_ARGS_ASSERT_TO_UTF8_FOLD	\
	assert(p); assert(ustrp)
/* PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp); */
#define PERL_ARGS_ASSERT_TO_UTF8_LOWER	\
	assert(p); assert(ustrp)
/* PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp); */
#define PERL_ARGS_ASSERT_TO_UTF8_TITLE	\
	assert(p); assert(ustrp)
/* PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp); */
#define PERL_ARGS_ASSERT_TO_UTF8_UPPER	\
	assert(p); assert(ustrp)
PERL_CALLCONV bool	Perl_try_amagic_bin(pTHX_ int method, int flags);
PERL_CALLCONV bool	Perl_try_amagic_un(pTHX_ int method, int flags);
PERL_CALLCONV I32	Perl_unpack_str(pTHX_ const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags);
#define PERL_ARGS_ASSERT_UNPACK_STR	\
	assert(pat); assert(patend); assert(s); assert(strend)
PERL_CALLCONV I32	Perl_unpackstring(pTHX_ const char *pat, const char *patend, const char *s, const char *strend, U32 flags);
#define PERL_ARGS_ASSERT_UNPACKSTRING	\
	assert(pat); assert(patend); assert(s); assert(strend)
PERL_CALLCONV void	Perl_unshare_hek(pTHX_ HEK* hek);
PERL_CALLCONV void	Perl_unsharepvn(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV SV*	Perl_upg_version(pTHX_ SV *ver, bool qv);
#define PERL_ARGS_ASSERT_UPG_VERSION	\
	assert(ver)
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8	\
	assert(p); assert(d); assert(newlen)
PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8_REVERSED	\
	assert(p); assert(d); assert(newlen)
PERL_CALLCONV IV	Perl_utf8_distance(pTHX_ const U8 *a, const U8 *b)
			__attribute__warn_unused_result__
			__attribute__pure__;
#define PERL_ARGS_ASSERT_UTF8_DISTANCE	\
	assert(a); assert(b)

PERL_CALLCONV U8*	Perl_utf8_hop(const U8 *s, SSize_t off)
			__attribute__warn_unused_result__
			__attribute__pure__;
#define PERL_ARGS_ASSERT_UTF8_HOP	\
	assert(s)

PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ const U8* s, const U8 *e)
			__attribute__warn_unused_result__
			__attribute__pure__;
#define PERL_ARGS_ASSERT_UTF8_LENGTH	\
	assert(s); assert(e)

PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len);
#define PERL_ARGS_ASSERT_UTF8_TO_BYTES	\
	assert(s); assert(len)
PERL_CALLCONV UV	Perl_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR	\
	assert(s)

/* PERL_CALLCONV UV	utf8_to_uvchr_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen); */
PERL_CALLCONV UV	Perl_utf8_to_uvuni(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI	\
	assert(s)

PERL_CALLCONV UV	Perl_utf8_to_uvuni_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI_BUF	\
	assert(s); assert(send)

PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)
PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVUNI	\
	assert(s)
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg);
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)
/* PERL_CALLCONV U8*	uvchr_to_utf8(pTHX_ U8 *d, UV uv); */
/* PERL_CALLCONV U8*	uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags); */
PERL_CALLCONV U8*	Perl_uvoffuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
#define PERL_ARGS_ASSERT_UVOFFUNI_TO_UTF8_FLAGS	\
	assert(d)
PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv);
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8	\
	assert(d)
PERL_CALLCONV U8*	Perl_uvuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8_FLAGS	\
	assert(d)
PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen);
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR	\
	assert(s)
PERL_CALLCONV UV	Perl_valid_utf8_to_uvuni(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVUNI	\
	assert(s)

PERL_CALLCONV bool	Perl_validate_proto(pTHX_ SV *name, SV *proto, bool warn);
#define PERL_ARGS_ASSERT_VALIDATE_PROTO	\
	assert(name)
PERL_CALLCONV int	Perl_vcmp(pTHX_ SV *lhv, SV *rhv);
#define PERL_ARGS_ASSERT_VCMP	\
	assert(lhv); assert(rhv)
PERL_CALLCONV_NO_RET void	Perl_vcroak(pTHX_ const char* pat, va_list* args)
			__attribute__noreturn__;

PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VDEB	\
	assert(pat)
PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VFORM	\
	assert(pat)
PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_VIVIFY_DEFELEM	\
	assert(sv)
PERL_CALLCONV SV*	Perl_vivify_ref(pTHX_ SV* sv, U32 to_what)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_VIVIFY_REF	\
	assert(sv)

PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args);
#define PERL_ARGS_ASSERT_VLOAD_MODULE	\
	assert(name)
PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VMESS	\
	assert(pat)
PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char *const pat, va_list *const args)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_VNEWSVPVF	\
	assert(pat)

PERL_CALLCONV SV*	Perl_vnormal(pTHX_ SV *vs);
#define PERL_ARGS_ASSERT_VNORMAL	\
	assert(vs)
PERL_CALLCONV SV*	Perl_vnumify(pTHX_ SV *vs);
#define PERL_ARGS_ASSERT_VNUMIFY	\
	assert(vs)
PERL_CALLCONV SV*	Perl_vstringify(pTHX_ SV *vs);
#define PERL_ARGS_ASSERT_VSTRINGIFY	\
	assert(vs)
PERL_CALLCONV SV*	Perl_vverify(pTHX_ SV *vs);
#define PERL_ARGS_ASSERT_VVERIFY	\
	assert(vs)
PERL_CALLCONV void	Perl_vwarn(pTHX_ const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VWARN	\
	assert(pat)
PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VWARNER	\
	assert(pat)
PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags);
#define PERL_ARGS_ASSERT_WAIT4PID	\
	assert(statusp)
PERL_CALLCONV void	Perl_warn(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_WARN	\
	assert(pat)

PERL_CALLCONV void	Perl_warn_sv(pTHX_ SV *baseex);
#define PERL_ARGS_ASSERT_WARN_SV	\
	assert(baseex)
PERL_CALLCONV void	Perl_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_WARNER	\
	assert(pat)

PERL_CALLCONV I32	Perl_was_lvalue_sub(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_watch(pTHX_ char** addr);
#define PERL_ARGS_ASSERT_WATCH	\
	assert(addr)
/* PERL_CALLCONV I32	whichsig(pTHX_ const char* sig); */
PERL_CALLCONV I32	Perl_whichsig_pv(pTHX_ const char* sig);
#define PERL_ARGS_ASSERT_WHICHSIG_PV	\
	assert(sig)
PERL_CALLCONV I32	Perl_whichsig_pvn(pTHX_ const char* sig, STRLEN len);
#define PERL_ARGS_ASSERT_WHICHSIG_PVN	\
	assert(sig)
PERL_CALLCONV I32	Perl_whichsig_sv(pTHX_ SV* sigsv);
#define PERL_ARGS_ASSERT_WHICHSIG_SV	\
	assert(sigsv)
PERL_CALLCONV void	Perl_wrap_op_checker(pTHX_ Optype opcode, Perl_check_t new_checker, Perl_check_t *old_checker_p);
#define PERL_ARGS_ASSERT_WRAP_OP_CHECKER	\
	assert(new_checker); assert(old_checker_p)
PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ SV* msv);
#define PERL_ARGS_ASSERT_WRITE_TO_STDERR	\
	assert(msv)
PERL_CALLCONV void	Perl_xs_boot_epilog(pTHX_ const I32 ax);
PERL_CALLCONV I32	Perl_xs_handshake(const U32 key, void * v_my_perl, const char * file, ...);
#define PERL_ARGS_ASSERT_XS_HANDSHAKE	\
	assert(v_my_perl); assert(file)
PERL_CALLCONV int	Perl_yyerror(pTHX_ const char *const s);
#define PERL_ARGS_ASSERT_YYERROR	\
	assert(s)
PERL_CALLCONV int	Perl_yyerror_pv(pTHX_ const char *const s, U32 flags);
#define PERL_ARGS_ASSERT_YYERROR_PV	\
	assert(s)
PERL_CALLCONV int	Perl_yyerror_pvn(pTHX_ const char *const s, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_YYERROR_PVN	\
	assert(s)
PERL_CALLCONV int	Perl_yylex(pTHX);
PERL_CALLCONV int	Perl_yyparse(pTHX_ int gramtype);
PERL_CALLCONV void	Perl_yyunlex(pTHX);
#if !(defined(DEBUGGING))
#  if !defined(NV_PRESERVES_UV)
#    if defined(PERL_IN_SV_C)
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE	\
	assert(sv)
#    endif
#  endif
#endif
#if !(defined(HAS_SIGACTION) && defined(SA_SIGINFO))
PERL_CALLCONV Signal_t	Perl_csighandler(int sig);
PERL_CALLCONV Signal_t	Perl_sighandler(int sig);
#endif
#if !(defined(NO_MATHOMS))
PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv);
#endif
#if !(defined(PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION))
PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd);
#define PERL_ARGS_ASSERT_DO_EXEC	\
	assert(cmd)
#endif
#if !(defined(PERL_GLOBAL_STRUCT_PRIVATE))
#  if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ int *index, size_t size);
#define PERL_ARGS_ASSERT_MY_CXT_INIT	\
	assert(index)
#  endif
#endif
#if !(defined(WIN32))
/* PERL_CALLCONV char*	my_setlocale(pTHX_ int category, const char* locale)
			__attribute__pure__; */

#endif
#if !(defined(_MSC_VER))
PERL_CALLCONV_NO_RET int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg)
			__attribute__noreturn__;
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET	\
	assert(sv); assert(mg)

#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
PERL_CALLCONV void*	Perl_my_bzero(void* vloc, size_t len);
#define PERL_ARGS_ASSERT_MY_BZERO	\
	assert(vloc)
#endif
#if !defined(HAS_GETENV_LEN)
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char *env_elem, unsigned long *len);
#define PERL_ARGS_ASSERT_GETENV_LEN	\
	assert(env_elem); assert(len)
#endif
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
PERL_CALLCONV int	Perl_my_memcmp(const void* vs1, const void* vs2, size_t len)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_MY_MEMCMP	\
	assert(vs1); assert(vs2)

#endif
#if !defined(HAS_MEMCPY) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY))
PERL_CALLCONV void*	Perl_my_bcopy(const void* vfrom, void* vto, size_t len);
#define PERL_ARGS_ASSERT_MY_BCOPY	\
	assert(vfrom); assert(vto)
#endif
#if !defined(HAS_MEMSET)
PERL_CALLCONV void*	Perl_my_memset(void* vloc, int ch, size_t len);
#define PERL_ARGS_ASSERT_MY_MEMSET	\
	assert(vloc)
#endif
#if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
#  if defined(PERL_IN_PP_SYS_C)
STATIC int	S_dooneliner(pTHX_ const char *cmd, const char *filename)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DOONELINER	\
	assert(cmd); assert(filename)

#  endif
#endif
#if !defined(HAS_RENAME)
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ const char* a, const char* b);
#define PERL_ARGS_ASSERT_SAME_DIRENT	\
	assert(a); assert(b)
#endif
#if !defined(HAS_SIGNBIT)
PERL_CALLCONV int	Perl_signbit(NV f)
			__attribute__pure__;

#endif
#if !defined(HAS_STRLCAT)
PERL_CALLCONV Size_t	Perl_my_strlcat(char *dst, const char *src, Size_t size);
#endif
#if !defined(HAS_STRLCPY)
PERL_CALLCONV Size_t	Perl_my_strlcpy(char *dst, const char *src, Size_t size);
#endif
#if !defined(HAS_TRUNCATE) && !defined(HAS_CHSIZE) && defined(F_FREESP)
PERL_CALLCONV I32	Perl_my_chsize(pTHX_ int fd, Off_t length)
			__attribute__warn_unused_result__;

#endif
#if !defined(NV_PRESERVES_UV)
#  if defined(DEBUGGING)
#    if defined(PERL_IN_SV_C)
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv, I32 numtype);
#define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE	\
	assert(sv)
#    endif
#  endif
#endif
#if !defined(PERL_DISABLE_PMC)
#  if defined(PERL_IN_PP_CTL_C)
STATIC PerlIO *	S_doopen_pm(pTHX_ SV *name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DOOPEN_PM	\
	assert(name)

#  endif
#endif
#if !defined(PERL_EXT_RE_BUILD)
#  if defined(PERL_IN_REGCOMP_C)
PERL_STATIC_INLINE IV*	S_get_invlist_previous_index_addr(SV* invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_INVLIST_PREVIOUS_INDEX_ADDR	\
	assert(invlist)

PERL_STATIC_INLINE void	S_invlist_clear(pTHX_ SV* invlist);
#define PERL_ARGS_ASSERT_INVLIST_CLEAR	\
	assert(invlist)
PERL_STATIC_INLINE IV	S_invlist_previous_index(SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_PREVIOUS_INDEX	\
	assert(invlist)

STATIC void	S_invlist_replace_list_destroys_src(pTHX_ SV *dest, SV *src);
#define PERL_ARGS_ASSERT_INVLIST_REPLACE_LIST_DESTROYS_SRC	\
	assert(dest); assert(src)
PERL_STATIC_INLINE void	S_invlist_set_previous_index(SV* const invlist, const IV index);
#define PERL_ARGS_ASSERT_INVLIST_SET_PREVIOUS_INDEX	\
	assert(invlist)
PERL_STATIC_INLINE void	S_invlist_trim(SV* invlist);
#define PERL_ARGS_ASSERT_INVLIST_TRIM	\
	assert(invlist)
#  endif
#endif
#if !defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV I32	Perl_my_pclose(pTHX_ PerlIO* ptr);
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ const char* cmd, const char* mode);
#define PERL_ARGS_ASSERT_MY_POPEN	\
	assert(cmd); assert(mode)
#endif
#if !defined(PERL_IS_MINIPERL)
#  if defined(PERL_IN_PERL_C)
STATIC SV *	S_incpush_if_exists(pTHX_ AV *const av, SV *dir, SV *const stem);
#define PERL_ARGS_ASSERT_INCPUSH_IF_EXISTS	\
	assert(av); assert(dir); assert(stem)
#  endif
#endif
#if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE STRLEN	S__is_utf8_char_slow(const U8 *s, const U8 *e)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_CHAR_SLOW	\
	assert(s); assert(e)

PERL_STATIC_INLINE void	S_append_utf8_from_native_byte(const U8 byte, U8** dest);
#define PERL_ARGS_ASSERT_APPEND_UTF8_FROM_NATIVE_BYTE	\
	assert(dest)
PERL_STATIC_INLINE SSize_t	S_av_top_index(pTHX_ AV *av)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_AV_TOP_INDEX	\
	assert(av)

PERL_STATIC_INLINE void	S_cx_popblock(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPBLOCK	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popeval(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPEVAL	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popformat(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPFORMAT	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popgiven(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPGIVEN	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_poploop(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPLOOP	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popsub(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popsub_args(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB_ARGS	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popsub_common(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB_COMMON	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popwhen(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPWHEN	\
	assert(cx)
PERL_STATIC_INLINE PERL_CONTEXT *	S_cx_pushblock(pTHX_ U8 type, U8 gimme, SV** sp, I32 saveix);
#define PERL_ARGS_ASSERT_CX_PUSHBLOCK	\
	assert(sp)
PERL_STATIC_INLINE void	S_cx_pusheval(pTHX_ PERL_CONTEXT *cx, OP *retop, SV *namesv);
#define PERL_ARGS_ASSERT_CX_PUSHEVAL	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_pushformat(pTHX_ PERL_CONTEXT *cx, CV *cv, OP *retop, GV *gv);
#define PERL_ARGS_ASSERT_CX_PUSHFORMAT	\
	assert(cx); assert(cv)
PERL_STATIC_INLINE void	S_cx_pushgiven(pTHX_ PERL_CONTEXT *cx, SV *orig_defsv);
#define PERL_ARGS_ASSERT_CX_PUSHGIVEN	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_pushloop_for(pTHX_ PERL_CONTEXT *cx, void *itervarp, SV *itersave);
#define PERL_ARGS_ASSERT_CX_PUSHLOOP_FOR	\
	assert(cx); assert(itervarp)
PERL_STATIC_INLINE void	S_cx_pushloop_plain(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_PUSHLOOP_PLAIN	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_pushsub(pTHX_ PERL_CONTEXT *cx, CV *cv, OP *retop, bool hasargs);
#define PERL_ARGS_ASSERT_CX_PUSHSUB	\
	assert(cx); assert(cv)
PERL_STATIC_INLINE void	S_cx_pushwhen(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_PUSHWHEN	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_topblock(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_TOPBLOCK	\
	assert(cx)
PERL_STATIC_INLINE bool	S_is_safe_syscall(pTHX_ const char *pv, STRLEN len, const char *what, const char *op_name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_SAFE_SYSCALL	\
	assert(pv); assert(what); assert(op_name)

PERL_STATIC_INLINE bool	S_sv_only_taint_gmagic(SV *sv);
#define PERL_ARGS_ASSERT_SV_ONLY_TAINT_GMAGIC	\
	assert(sv)
#endif
#if !defined(PERL_NO_UTF16_FILTER)
#  if defined(PERL_IN_TOKE_C)
STATIC U8*	S_add_utf16_textfilter(pTHX_ U8 *const s, bool reversed);
#define PERL_ARGS_ASSERT_ADD_UTF16_TEXTFILTER	\
	assert(s)
STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen);
#define PERL_ARGS_ASSERT_UTF16_TEXTFILTER	\
	assert(sv)
#  endif
#endif
#if !defined(SETUID_SCRIPTS_ARE_SECURE_NOW)
#  if defined(PERL_IN_PERL_C)
STATIC void	S_validate_suid(pTHX_ PerlIO *rsfp);
#define PERL_ARGS_ASSERT_VALIDATE_SUID	\
	assert(rsfp)
#  endif
#endif
#if !defined(SPRINTF_RETURNS_STRLEN)
PERL_CALLCONV int	Perl_my_sprintf(char *buffer, const char *pat, ...);
#define PERL_ARGS_ASSERT_MY_SPRINTF	\
	assert(buffer); assert(pat)
#endif
#if !defined(USE_QUADMATH)
#  if defined(PERL_IN_NUMERIC_C)
STATIC NV	S_mulexp10(NV value, I32 exponent);
#  endif
#endif
#if !defined(WIN32)
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report);
#define PERL_ARGS_ASSERT_DO_EXEC3	\
	assert(incmd)
#endif
#if defined(DEBUGGING)
PERL_CALLCONV int	Perl_get_debug_opts(pTHX_ const char **s, bool givehelp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_DEBUG_OPTS	\
	assert(s)

PERL_CALLCONV void	Perl_hv_assert(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_ASSERT	\
	assert(hv)
PERL_CALLCONV void	Perl_pad_setsv(pTHX_ PADOFFSET po, SV* sv);
#define PERL_ARGS_ASSERT_PAD_SETSV	\
	assert(sv)
PERL_CALLCONV SV*	Perl_pad_sv(pTHX_ PADOFFSET po);
PERL_CALLCONV void	Perl_set_padlist(CV * cv, PADLIST * padlist);
#define PERL_ARGS_ASSERT_SET_PADLIST	\
	assert(cv)
#  if defined(PERL_IN_PAD_C)
STATIC void	S_cv_dump(pTHX_ const CV *cv, const char *title);
#define PERL_ARGS_ASSERT_CV_DUMP	\
	assert(cv); assert(title)
#  endif
#  if defined(PERL_IN_REGCOMP_C)
STATIC void	S_dump_trie(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 depth);
#define PERL_ARGS_ASSERT_DUMP_TRIE	\
	assert(trie); assert(revcharmap)
STATIC void	S_dump_trie_interim_list(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth);
#define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_LIST	\
	assert(trie); assert(revcharmap)
STATIC void	S_dump_trie_interim_table(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth);
#define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_TABLE	\
	assert(trie); assert(revcharmap)
STATIC const regnode*	S_dumpuntil(pTHX_ const regexp *r, const regnode *start, const regnode *node, const regnode *last, const regnode *plast, SV* sv, I32 indent, U32 depth);
#define PERL_ARGS_ASSERT_DUMPUNTIL	\
	assert(r); assert(start); assert(node); assert(sv)
STATIC bool	S_put_charclass_bitmap_innards(pTHX_ SV* sv, char* bitmap, SV* nonbitmap_invlist, SV* only_utf8_locale_invlist, const regnode * const node);
#define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS	\
	assert(sv); assert(bitmap)
STATIC SV*	S_put_charclass_bitmap_innards_common(pTHX_ SV* invlist, SV* posixes, SV* only_utf8, SV* not_utf8, SV* only_utf8_locale, const bool invert);
#define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS_COMMON	\
	assert(invlist)
STATIC void	S_put_charclass_bitmap_innards_invlist(pTHX_ SV *sv, SV* invlist);
#define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS_INVLIST	\
	assert(sv); assert(invlist)
STATIC void	S_put_code_point(pTHX_ SV* sv, UV c);
#define PERL_ARGS_ASSERT_PUT_CODE_POINT	\
	assert(sv)
STATIC void	S_put_range(pTHX_ SV* sv, UV start, const UV end, const bool allow_literals);
#define PERL_ARGS_ASSERT_PUT_RANGE	\
	assert(sv)
PERL_CALLCONV int	Perl_re_indentf(pTHX_ const char *fmt, U32 depth, ...);
#define PERL_ARGS_ASSERT_RE_INDENTF	\
	assert(fmt)
STATIC void	S_regdump_extflags(pTHX_ const char *lead, const U32 flags);
STATIC void	S_regdump_intflags(pTHX_ const char *lead, const U32 flags);
STATIC U8	S_regtail_study(pTHX_ RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth);
#define PERL_ARGS_ASSERT_REGTAIL_STUDY	\
	assert(pRExC_state); assert(p); assert(val)
#  endif
#  if defined(PERL_IN_REGEXEC_C)
STATIC void	S_debug_start_match(pTHX_ const REGEXP *prog, const bool do_utf8, const char *start, const char *end, const char *blurb);
#define PERL_ARGS_ASSERT_DEBUG_START_MATCH	\
	assert(prog); assert(start); assert(end); assert(blurb)
STATIC void	S_dump_exec_pos(pTHX_ const char *locinput, const regnode *scan, const char *loc_regeol, const char *loc_bostr, const char *loc_reg_starttry, const bool do_utf8, const U32 depth);
#define PERL_ARGS_ASSERT_DUMP_EXEC_POS	\
	assert(locinput); assert(scan); assert(loc_regeol); assert(loc_bostr); assert(loc_reg_starttry)
PERL_CALLCONV int	Perl_re_exec_indentf(pTHX_ const char *fmt, U32 depth, ...);
#define PERL_ARGS_ASSERT_RE_EXEC_INDENTF	\
	assert(fmt)
#  endif
#  if defined(PERL_IN_SV_C)
STATIC void	S_del_sv(pTHX_ SV *p);
#define PERL_ARGS_ASSERT_DEL_SV	\
	assert(p)
#  endif
#  if defined(PERL_IN_TOKE_C)
STATIC void	S_printbuf(pTHX_ const char *const fmt, const char *const s)
			__attribute__format__(__printf__,pTHX_1,0);
#define PERL_ARGS_ASSERT_PRINTBUF	\
	assert(fmt); assert(s)

STATIC int	S_tokereport(pTHX_ I32 rv, const YYSTYPE* lvalp);
#define PERL_ARGS_ASSERT_TOKEREPORT	\
	assert(lvalp)
#  endif
#  if defined(USE_LOCALE)     && (defined(PERL_IN_LOCALE_C) || defined (PERL_EXT_POSIX))
PERL_CALLCONV char *	Perl__setlocale_debug_string(const int category, const char* const locale, const char* const retval)
			__attribute__warn_unused_result__
			__attribute__pure__;

#  endif
#endif
#if defined(DEBUG_LEAKING_SCALARS_FORK_DUMP)
PERL_CALLCONV void	Perl_dump_sv_child(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_DUMP_SV_CHILD	\
	assert(sv)
#endif
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_IPCCTL	\
	assert(mark); assert(sp)
PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_IPCGET	\
	assert(mark); assert(sp)
PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_MSGRCV	\
	assert(mark); assert(sp)
PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_MSGSND	\
	assert(mark); assert(sp)
PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_SEMOP	\
	assert(mark); assert(sp)
PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_SHMIO	\
	assert(mark); assert(sp)
#endif
#if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
PERL_CALLCONV Signal_t	Perl_csighandler(int sig, siginfo_t *info, void *uap);
PERL_CALLCONV Signal_t	Perl_sighandler(int sig, siginfo_t *info, void *uap);
#endif
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_clear(pTHX);
PERL_CALLCONV void	Perl_sys_intern_init(pTHX);
#  if defined(USE_ITHREADS)
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst);
#define PERL_ARGS_ASSERT_SYS_INTERN_DUP	\
	assert(src); assert(dst)
#  endif
#endif
#if defined(MYMALLOC)
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ const char* s);
#define PERL_ARGS_ASSERT_DUMP_MSTATS	\
	assert(s)
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level);
#define PERL_ARGS_ASSERT_GET_MSTATS	\
	assert(buf)
PERL_CALLCONV MEM_SIZE	Perl_malloc_good_size(size_t nbytes)
			__attribute__warn_unused_result__;

PERL_CALLCONV MEM_SIZE	Perl_malloced_size(void *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MALLOCED_SIZE	\
	assert(p)

#endif
#if defined(NO_MATHOMS)
/* PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv); */
#endif
#if defined(PERL_ANY_COW)
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dstr, SV* sstr);
#define PERL_ARGS_ASSERT_SV_SETSV_COW	\
	assert(sstr)
#endif
#if defined(PERL_CORE)
PERL_CALLCONV void	Perl_opslab_force_free(pTHX_ OPSLAB *slab);
#define PERL_ARGS_ASSERT_OPSLAB_FORCE_FREE	\
	assert(slab)
PERL_CALLCONV void	Perl_opslab_free(pTHX_ OPSLAB *slab);
#define PERL_ARGS_ASSERT_OPSLAB_FREE	\
	assert(slab)
PERL_CALLCONV void	Perl_opslab_free_nopad(pTHX_ OPSLAB *slab);
#define PERL_ARGS_ASSERT_OPSLAB_FREE_NOPAD	\
	assert(slab)
PERL_CALLCONV void	Perl_parser_free_nexttoke_ops(pTHX_ yy_parser *parser, OPSLAB *slab);
#define PERL_ARGS_ASSERT_PARSER_FREE_NEXTTOKE_OPS	\
	assert(parser); assert(slab)
PERL_STATIC_INLINE bool	S_should_warn_nl(const char *pv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SHOULD_WARN_NL	\
	assert(pv)

#  if defined(PERL_DEBUG_READONLY_OPS)
PERL_CALLCONV void	Perl_Slab_to_ro(pTHX_ OPSLAB *slab);
#define PERL_ARGS_ASSERT_SLAB_TO_RO	\
	assert(slab)
PERL_CALLCONV void	Perl_Slab_to_rw(pTHX_ OPSLAB *const slab);
#define PERL_ARGS_ASSERT_SLAB_TO_RW	\
	assert(slab)
#  endif
#endif
#if defined(PERL_CORE) || defined (PERL_EXT)
PERL_STATIC_INLINE STRLEN	S_sv_or_pv_pos_u2b(pTHX_ SV *sv, const char *pv, STRLEN pos, STRLEN *lenp);
#define PERL_ARGS_ASSERT_SV_OR_PV_POS_U2B	\
	assert(sv); assert(pv)
#endif
#if defined(PERL_CR_FILTER)
#  if defined(PERL_IN_TOKE_C)
STATIC I32	S_cr_textfilter(pTHX_ int idx, SV *sv, int maxlen);
STATIC void	S_strip_return(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_STRIP_RETURN	\
	assert(sv)
#  endif
#endif
#if defined(PERL_DEBUG_READONLY_COW)
PERL_CALLCONV void	Perl_sv_buf_to_ro(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_BUF_TO_RO	\
	assert(sv)
#  if defined(PERL_IN_SV_C)
STATIC void	S_sv_buf_to_rw(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_BUF_TO_RW	\
	assert(sv)
#  endif
#endif
#if defined(PERL_DEBUG_READONLY_OPS)
PERL_CALLCONV PADOFFSET	Perl_op_refcnt_dec(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_REFCNT_DEC	\
	assert(o)
PERL_CALLCONV OP *	Perl_op_refcnt_inc(pTHX_ OP *o);
#endif
#if defined(PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION)
/* PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd); */
#endif
#if defined(PERL_DONT_CREATE_GVSV)
/* PERL_CALLCONV GV*	Perl_gv_SVadd(pTHX_ GV *gv); */
#endif
#if defined(PERL_GLOBAL_STRUCT)
PERL_CALLCONV struct perl_vars *	Perl_GetVars(pTHX);
PERL_CALLCONV void	Perl_free_global_struct(pTHX_ struct perl_vars *plvarsp);
#define PERL_ARGS_ASSERT_FREE_GLOBAL_STRUCT	\
	assert(plvarsp)
PERL_CALLCONV struct perl_vars*	Perl_init_global_struct(pTHX);
#endif
#if defined(PERL_GLOBAL_STRUCT_PRIVATE)
#  if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV int	Perl_my_cxt_index(pTHX_ const char *my_cxt_key);
#define PERL_ARGS_ASSERT_MY_CXT_INDEX	\
	assert(my_cxt_key)
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ const char *my_cxt_key, size_t size);
#define PERL_ARGS_ASSERT_MY_CXT_INIT	\
	assert(my_cxt_key)
#  endif
#endif
#if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV_NO_RET void	Perl_croak_nocontext(const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__null_ok__(__printf__,1,2);

PERL_CALLCONV void	Perl_deb_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_DEB_NOCONTEXT	\
	assert(pat)

PERL_CALLCONV_NO_RET OP*	Perl_die_nocontext(const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__null_ok__(__printf__,1,2);

PERL_CALLCONV char*	Perl_form_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_FORM_NOCONTEXT	\
	assert(pat)

PERL_CALLCONV int	Perl_fprintf_nocontext(PerlIO *stream, const char *format, ...)
			__attribute__format__(__printf__,2,3);
#define PERL_ARGS_ASSERT_FPRINTF_NOCONTEXT	\
	assert(stream); assert(format)

PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...);
#define PERL_ARGS_ASSERT_LOAD_MODULE_NOCONTEXT	\
	assert(name)
PERL_CALLCONV SV*	Perl_mess_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_MESS_NOCONTEXT	\
	assert(pat)

PERL_CALLCONV SV*	Perl_newSVpvf_nocontext(const char *const pat, ...)
			__attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_NEWSVPVF_NOCONTEXT	\
	assert(pat)

PERL_CALLCONV int	Perl_printf_nocontext(const char *format, ...)
			__attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_PRINTF_NOCONTEXT	\
	assert(format)

PERL_CALLCONV void	Perl_sv_catpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3);
#define PERL_ARGS_ASSERT_SV_CATPVF_MG_NOCONTEXT	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_sv_catpvf_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3);
#define PERL_ARGS_ASSERT_SV_CATPVF_NOCONTEXT	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_sv_setpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3);
#define PERL_ARGS_ASSERT_SV_SETPVF_MG_NOCONTEXT	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_sv_setpvf_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3);
#define PERL_ARGS_ASSERT_SV_SETPVF_NOCONTEXT	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_warn_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_WARN_NOCONTEXT	\
	assert(pat)

PERL_CALLCONV void	Perl_warner_nocontext(U32 err, const char* pat, ...)
			__attribute__format__(__printf__,2,3);
#define PERL_ARGS_ASSERT_WARNER_NOCONTEXT	\
	assert(pat)

#endif
#if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem *ipM, struct IPerlMem *ipMS, struct IPerlMem *ipMP, struct IPerlEnv *ipE, struct IPerlStdIO *ipStd, struct IPerlLIO *ipLIO, struct IPerlDir *ipD, struct IPerlSock *ipS, struct IPerlProc *ipP);
#define PERL_ARGS_ASSERT_PERL_ALLOC_USING	\
	assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)
#  if defined(USE_ITHREADS)
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *proto_perl, UV flags, struct IPerlMem* ipM, struct IPerlMem* ipMS, struct IPerlMem* ipMP, struct IPerlEnv* ipE, struct IPerlStdIO* ipStd, struct IPerlLIO* ipLIO, struct IPerlDir* ipD, struct IPerlSock* ipS, struct IPerlProc* ipP);
#define PERL_ARGS_ASSERT_PERL_CLONE_USING	\
	assert(proto_perl); assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)
#  endif
#endif
#if defined(PERL_IN_AV_C)
STATIC MAGIC*	S_get_aux_mg(pTHX_ AV *av);
#define PERL_ARGS_ASSERT_GET_AUX_MG	\
	assert(av)
#endif
#if defined(PERL_IN_DEB_C)
STATIC void	S_deb_stack_n(pTHX_ SV** stack_base, I32 stack_min, I32 stack_max, I32 mark_min, I32 mark_max);
#define PERL_ARGS_ASSERT_DEB_STACK_N	\
	assert(stack_base)
#endif
#if defined(PERL_IN_DOIO_C)
STATIC void	S_exec_failed(pTHX_ const char *cmd, int fd, int do_report);
#define PERL_ARGS_ASSERT_EXEC_FAILED	\
	assert(cmd)
STATIC bool	S_ingroup(pTHX_ Gid_t testgid, bool effective)
			__attribute__warn_unused_result__;

STATIC bool	S_openn_cleanup(pTHX_ GV *gv, IO *io, PerlIO *fp, char *mode, const char *oname, PerlIO *saveifp, PerlIO *saveofp, int savefd, char savetype, int writing, bool was_fdopen, const char *type);
#define PERL_ARGS_ASSERT_OPENN_CLEANUP	\
	assert(gv); assert(io); assert(mode); assert(oname)
STATIC IO *	S_openn_setup(pTHX_ GV *gv, char *mode, PerlIO **saveifp, PerlIO **saveofp, int *savefd, char *savetype);
#define PERL_ARGS_ASSERT_OPENN_SETUP	\
	assert(gv); assert(mode); assert(saveifp); assert(saveofp); assert(savefd); assert(savetype)
#endif
#if defined(PERL_IN_DOOP_C)
STATIC I32	S_do_trans_complex(pTHX_ SV * const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_TRANS_COMPLEX	\
	assert(sv)

STATIC I32	S_do_trans_complex_utf8(pTHX_ SV * const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_TRANS_COMPLEX_UTF8	\
	assert(sv)

STATIC I32	S_do_trans_count(pTHX_ SV * const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_TRANS_COUNT	\
	assert(sv)

STATIC I32	S_do_trans_count_utf8(pTHX_ SV * const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_TRANS_COUNT_UTF8	\
	assert(sv)

STATIC I32	S_do_trans_simple(pTHX_ SV * const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_TRANS_SIMPLE	\
	assert(sv)

STATIC I32	S_do_trans_simple_utf8(pTHX_ SV * const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_TRANS_SIMPLE_UTF8	\
	assert(sv)

#endif
#if defined(PERL_IN_DUMP_C)
STATIC CV*	S_deb_curcv(pTHX_ I32 ix);
STATIC void	S_debprof(pTHX_ const OP *o);
#define PERL_ARGS_ASSERT_DEBPROF	\
	assert(o)
STATIC SV*	S_pm_description(pTHX_ const PMOP *pm);
#define PERL_ARGS_ASSERT_PM_DESCRIPTION	\
	assert(pm)
STATIC UV	S_sequence_num(pTHX_ const OP *o);
#endif
#if defined(PERL_IN_DUMP_C) || defined(PERL_IN_HV_C) || defined(PERL_IN_SV_C) || defined(PERL_IN_SCOPE_C)
PERL_CALLCONV void	Perl_hv_kill_backrefs(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_KILL_BACKREFS	\
	assert(hv)
#endif
#if defined(PERL_IN_GV_C)
STATIC bool	S_find_default_stash(pTHX_ HV **stash, const char *name, STRLEN len, const U32 is_utf8, const I32 add, const svtype sv_type);
#define PERL_ARGS_ASSERT_FIND_DEFAULT_STASH	\
	assert(stash); assert(name)
PERL_STATIC_INLINE GV*	S_gv_fetchmeth_internal(pTHX_ HV* stash, SV* meth, const char* name, STRLEN len, I32 level, U32 flags);
STATIC void	S_gv_init_svtype(pTHX_ GV *gv, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_INIT_SVTYPE	\
	assert(gv)
STATIC bool	S_gv_is_in_main(pTHX_ const char *name, STRLEN len, const U32 is_utf8);
#define PERL_ARGS_ASSERT_GV_IS_IN_MAIN	\
	assert(name)
STATIC bool	S_gv_magicalize(pTHX_ GV *gv, HV *stash, const char *name, STRLEN len, bool addmg, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_MAGICALIZE	\
	assert(gv); assert(stash); assert(name)
STATIC void	S_gv_magicalize_isa(pTHX_ GV *gv);
#define PERL_ARGS_ASSERT_GV_MAGICALIZE_ISA	\
	assert(gv)
PERL_STATIC_INLINE HV*	S_gv_stashpvn_internal(pTHX_ const char* name, U32 namelen, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHPVN_INTERNAL	\
	assert(name)
PERL_STATIC_INLINE HV*	S_gv_stashsvpvn_cached(pTHX_ SV *namesv, const char* name, U32 namelen, I32 flags);
STATIC void	S_maybe_multimagic_gv(pTHX_ GV *gv, const char *name, const svtype sv_type);
#define PERL_ARGS_ASSERT_MAYBE_MULTIMAGIC_GV	\
	assert(gv); assert(name)
STATIC bool	S_parse_gv_stash_name(pTHX_ HV **stash, GV **gv, const char **name, STRLEN *len, const char *nambeg, STRLEN full_len, const U32 is_utf8, const I32 add);
#define PERL_ARGS_ASSERT_PARSE_GV_STASH_NAME	\
	assert(stash); assert(gv); assert(name); assert(len); assert(nambeg)
STATIC HV*	S_require_tie_mod(pTHX_ GV *gv, const char *varpv, SV* namesv, const char *methpv, const U32 flags);
#define PERL_ARGS_ASSERT_REQUIRE_TIE_MOD	\
	assert(gv); assert(varpv); assert(namesv); assert(methpv)
#endif
#if defined(PERL_IN_GV_C) || defined(PERL_IN_SV_C) || defined(PERL_IN_PAD_C) || defined(PERL_IN_OP_C)
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *const tsv, SV *const sv);
#define PERL_ARGS_ASSERT_SV_ADD_BACKREF	\
	assert(tsv); assert(sv)
#endif
#if defined(PERL_IN_HV_C)
STATIC void	S_clear_placeholders(pTHX_ HV *hv, U32 items);
#define PERL_ARGS_ASSERT_CLEAR_PLACEHOLDERS	\
	assert(hv)
STATIC void	S_hfreeentries(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HFREEENTRIES	\
	assert(hv)
STATIC void	S_hsplit(pTHX_ HV *hv, STRLEN const oldsize, STRLEN newsize);
#define PERL_ARGS_ASSERT_HSPLIT	\
	assert(hv)
STATIC struct xpvhv_aux*	S_hv_auxinit(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_AUXINIT	\
	assert(hv)
STATIC struct xpvhv_aux*	S_hv_auxinit_internal(struct xpvhv_aux *iter);
#define PERL_ARGS_ASSERT_HV_AUXINIT_INTERNAL	\
	assert(iter)
STATIC SV*	S_hv_delete_common(pTHX_ HV *hv, SV *keysv, const char *key, STRLEN klen, int k_flags, I32 d_flags, U32 hash);
STATIC SV*	S_hv_free_ent_ret(pTHX_ HV *hv, HE *entry);
#define PERL_ARGS_ASSERT_HV_FREE_ENT_RET	\
	assert(hv); assert(entry)
STATIC void	S_hv_magic_check(HV *hv, bool *needs_copy, bool *needs_store);
#define PERL_ARGS_ASSERT_HV_MAGIC_CHECK	\
	assert(hv); assert(needs_copy); assert(needs_store)
PERL_STATIC_NO_RET void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg)
			__attribute__noreturn__;
#define PERL_ARGS_ASSERT_HV_NOTALLOWED	\
	assert(key); assert(msg)

STATIC HE*	S_new_he(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_STATIC_INLINE U32	S_ptr_hash(PTRV u);
STATIC SV *	S_refcounted_he_value(pTHX_ const struct refcounted_he *he);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_VALUE	\
	assert(he)
STATIC HEK*	S_save_hek_flags(const char *str, I32 len, U32 hash, int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVE_HEK_FLAGS	\
	assert(str)

STATIC HEK*	S_share_hek_flags(pTHX_ const char *str, I32 len, U32 hash, int flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SHARE_HEK_FLAGS	\
	assert(str)

STATIC void	S_unshare_hek_or_pvn(pTHX_ const HEK* hek, const char* str, I32 len, U32 hash);
#endif
#if defined(PERL_IN_HV_C) || defined(PERL_IN_MG_C) || defined(PERL_IN_SV_C)
PERL_CALLCONV void	Perl_sv_kill_backrefs(pTHX_ SV *const sv, AV *const av);
#define PERL_ARGS_ASSERT_SV_KILL_BACKREFS	\
	assert(sv)
#endif
#if defined(PERL_IN_HV_C) || defined(PERL_IN_SV_C)
PERL_CALLCONV SV*	Perl_hfree_next_entry(pTHX_ HV *hv, STRLEN *indexp);
#define PERL_ARGS_ASSERT_HFREE_NEXT_ENTRY	\
	assert(hv); assert(indexp)
#endif
#if defined(PERL_IN_MALLOC_C)
STATIC int	S_adjust_size_and_find_bucket(size_t *nbytes_p);
#define PERL_ARGS_ASSERT_ADJUST_SIZE_AND_FIND_BUCKET	\
	assert(nbytes_p)
#endif
#if defined(PERL_IN_MG_C)
STATIC void	S_fixup_errno_string(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_FIXUP_ERRNO_STRING	\
	assert(sv)
STATIC SV*	S_magic_methcall1(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, int n, SV *val);
#define PERL_ARGS_ASSERT_MAGIC_METHCALL1	\
	assert(sv); assert(mg); assert(meth)
STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, SV *meth);
#define PERL_ARGS_ASSERT_MAGIC_METHPACK	\
	assert(sv); assert(mg); assert(meth)
STATIC void	S_restore_magic(pTHX_ const void *p);
STATIC void	S_save_magic_flags(pTHX_ I32 mgs_ix, SV *sv, U32 flags);
#define PERL_ARGS_ASSERT_SAVE_MAGIC_FLAGS	\
	assert(sv)
STATIC void	S_unwind_handler_stack(pTHX_ const void *p);
#endif
#if defined(PERL_IN_MG_C) || defined(PERL_IN_PP_C)
PERL_CALLCONV bool	Perl_translate_substr_offsets(STRLEN curlen, IV pos1_iv, bool pos1_is_uv, IV len_iv, bool len_is_uv, STRLEN *posp, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TRANSLATE_SUBSTR_OFFSETS	\
	assert(posp); assert(lenp)
#endif
#if defined(PERL_IN_MRO_C)
STATIC void	S_mro_clean_isarev(pTHX_ HV * const isa, const char * const name, const STRLEN len, HV * const exceptions, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_MRO_CLEAN_ISAREV	\
	assert(isa); assert(name)
STATIC void	S_mro_gather_and_rename(pTHX_ HV * const stashes, HV * const seen_stashes, HV *stash, HV *oldstash, SV *namesv);
#define PERL_ARGS_ASSERT_MRO_GATHER_AND_RENAME	\
	assert(stashes); assert(seen_stashes); assert(namesv)
STATIC AV*	S_mro_get_linear_isa_dfs(pTHX_ HV* stash, U32 level);
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA_DFS	\
	assert(stash)
#endif
#if defined(PERL_IN_OP_C)
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs);
#define PERL_ARGS_ASSERT_APPLY_ATTRS	\
	assert(stash); assert(target)
STATIC void	S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp);
#define PERL_ARGS_ASSERT_APPLY_ATTRS_MY	\
	assert(stash); assert(target); assert(imopsp)
STATIC I32	S_assignment_type(pTHX_ const OP *o)
			__attribute__warn_unused_result__;

STATIC void	S_bad_type_gv(pTHX_ I32 n, GV *gv, const OP *kid, const char *t);
#define PERL_ARGS_ASSERT_BAD_TYPE_GV	\
	assert(gv); assert(kid); assert(t)
STATIC void	S_bad_type_pv(pTHX_ I32 n, const char *t, const OP *o, const OP *kid);
#define PERL_ARGS_ASSERT_BAD_TYPE_PV	\
	assert(t); assert(o); assert(kid)
STATIC void	S_clear_special_blocks(pTHX_ const char *const fullname, GV *const gv, CV *const cv);
#define PERL_ARGS_ASSERT_CLEAR_SPECIAL_BLOCKS	\
	assert(fullname); assert(gv); assert(cv)
STATIC void	S_cop_free(pTHX_ COP *cop);
#define PERL_ARGS_ASSERT_COP_FREE	\
	assert(cop)
STATIC OP *	S_dup_attrlist(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_DUP_ATTRLIST	\
	assert(o)
STATIC void	S_finalize_op(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_FINALIZE_OP	\
	assert(o)
STATIC void	S_find_and_forget_pmops(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_FIND_AND_FORGET_PMOPS	\
	assert(o)
STATIC OP*	S_fold_constants(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_FOLD_CONSTANTS	\
	assert(o)
STATIC OP*	S_force_list(pTHX_ OP* arg, bool nullit);
STATIC void	S_forget_pmop(pTHX_ PMOP *const o);
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
	assert(o)
STATIC OP*	S_gen_constant_list(pTHX_ OP* o);
STATIC void	S_inplace_aassign(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_INPLACE_AASSIGN	\
	assert(o)
STATIC bool	S_is_handle_constructor(const OP *o, I32 numargs)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_HANDLE_CONSTRUCTOR	\
	assert(o)

STATIC OP*	S_listkids(pTHX_ OP* o);
STATIC bool	S_looks_like_bool(pTHX_ const OP* o);
#define PERL_ARGS_ASSERT_LOOKS_LIKE_BOOL	\
	assert(o)
STATIC OP*	S_modkids(pTHX_ OP *o, I32 type);
STATIC void	S_move_proto_attr(pTHX_ OP **proto, OP **attrs, const GV *name);
#define PERL_ARGS_ASSERT_MOVE_PROTO_ATTR	\
	assert(proto); assert(attrs); assert(name)
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp);
#define PERL_ARGS_ASSERT_MY_KID	\
	assert(imopsp)
STATIC OP*	S_newGIVWHENOP(pTHX_ OP* cond, OP *block, I32 enter_opcode, I32 leave_opcode, PADOFFSET entertarg);
#define PERL_ARGS_ASSERT_NEWGIVWHENOP	\
	assert(block)
PERL_STATIC_INLINE OP*	S_newMETHOP_internal(pTHX_ I32 type, I32 flags, OP* dynamic_meth, SV* const_meth);
STATIC OP*	S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEW_LOGOP	\
	assert(firstp); assert(otherp)

STATIC void	S_no_bareword_allowed(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_NO_BAREWORD_ALLOWED	\
	assert(o)
STATIC OP*	S_no_fh_allowed(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NO_FH_ALLOWED	\
	assert(o)

PERL_STATIC_INLINE OP*	S_op_integerize(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_INTEGERIZE	\
	assert(o)
PERL_STATIC_INLINE OP*	S_op_std_init(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_STD_INIT	\
	assert(o)
STATIC OP*	S_pmtrans(pTHX_ OP* o, OP* expr, OP* repl);
#define PERL_ARGS_ASSERT_PMTRANS	\
	assert(o); assert(expr); assert(repl)
STATIC bool	S_process_special_blocks(pTHX_ I32 floor, const char *const fullname, GV *const gv, CV *const cv);
#define PERL_ARGS_ASSERT_PROCESS_SPECIAL_BLOCKS	\
	assert(fullname); assert(gv); assert(cv)
STATIC OP*	S_ref_array_or_hash(pTHX_ OP* cond);
STATIC OP*	S_refkids(pTHX_ OP* o, I32 type);
STATIC bool	S_scalar_mod_type(const OP *o, I32 type)
			__attribute__warn_unused_result__;

STATIC OP*	S_scalarboolean(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_SCALARBOOLEAN	\
	assert(o)
STATIC OP*	S_scalarkids(pTHX_ OP* o);
STATIC OP*	S_scalarseq(pTHX_ OP* o);
STATIC OP*	S_search_const(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SEARCH_CONST	\
	assert(o)

STATIC void	S_simplify_sort(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_SIMPLIFY_SORT	\
	assert(o)
STATIC OP*	S_too_few_arguments_pv(pTHX_ OP *o, const char* name, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_TOO_FEW_ARGUMENTS_PV	\
	assert(o); assert(name)

STATIC OP*	S_too_many_arguments_pv(pTHX_ OP *o, const char* name, U32 flags);
#define PERL_ARGS_ASSERT_TOO_MANY_ARGUMENTS_PV	\
	assert(o); assert(name)
#  if defined(USE_ITHREADS)
PERL_STATIC_INLINE void	S_op_relocate_sv(pTHX_ SV** svp, PADOFFSET* targp);
#define PERL_ARGS_ASSERT_OP_RELOCATE_SV	\
	assert(svp); assert(targp)
#  endif
#endif
#if defined(PERL_IN_OP_C) || defined(PERL_IN_SV_C)
PERL_CALLCONV void	Perl_report_redefined_cv(pTHX_ const SV *name, const CV *old_cv, SV * const *new_const_svp);
#define PERL_ARGS_ASSERT_REPORT_REDEFINED_CV	\
	assert(name); assert(old_cv)
#endif
#if defined(PERL_IN_PAD_C)
STATIC PADOFFSET	S_pad_alloc_name(pTHX_ PADNAME *name, U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ALLOC_NAME	\
	assert(name)
STATIC void	S_pad_check_dup(pTHX_ PADNAME *name, U32 flags, const HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_CHECK_DUP	\
	assert(name)
STATIC PADOFFSET	S_pad_findlex(pTHX_ const char *namepv, STRLEN namelen, U32 flags, const CV* cv, U32 seq, int warn, SV** out_capture, PADNAME** out_name, int *out_flags);
#define PERL_ARGS_ASSERT_PAD_FINDLEX	\
	assert(namepv); assert(cv); assert(out_name); assert(out_flags)
STATIC void	S_pad_reset(pTHX);
#endif
#if defined(PERL_IN_PERL_C)
STATIC void	S_find_beginning(pTHX_ SV* linestr_sv, PerlIO *rsfp);
#define PERL_ARGS_ASSERT_FIND_BEGINNING	\
	assert(linestr_sv); assert(rsfp)
STATIC void	S_forbid_setid(pTHX_ const char flag, const bool suidscript);
STATIC void	S_incpush(pTHX_ const char *const dir, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_INCPUSH	\
	assert(dir)
STATIC void	S_incpush_use_sep(pTHX_ const char *p, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_INCPUSH_USE_SEP	\
	assert(p)
STATIC void	S_init_ids(pTHX);
STATIC void	S_init_interp(pTHX);
STATIC void	S_init_main_stash(pTHX);
STATIC void	S_init_perllib(pTHX);
STATIC void	S_init_postdump_symbols(pTHX_ int argc, char **argv, char **env);
#define PERL_ARGS_ASSERT_INIT_POSTDUMP_SYMBOLS	\
	assert(argv)
STATIC void	S_init_predump_symbols(pTHX);
STATIC SV*	S_mayberelocate(pTHX_ const char *const dir, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_MAYBERELOCATE	\
	assert(dir)
PERL_STATIC_NO_RET void	S_minus_v(pTHX)
			__attribute__noreturn__;

PERL_STATIC_NO_RET void	S_my_exit_jump(pTHX)
			__attribute__noreturn__;

STATIC void	S_nuke_stacks(pTHX);
STATIC PerlIO *	S_open_script(pTHX_ const char *scriptname, bool dosearch, bool *suidscript);
#define PERL_ARGS_ASSERT_OPEN_SCRIPT	\
	assert(scriptname); assert(suidscript)
STATIC void*	S_parse_body(pTHX_ char **env, XSINIT_t xsinit);
PERL_STATIC_NO_RET void	S_run_body(pTHX_ I32 oldscope)
			__attribute__noreturn__;

PERL_STATIC_NO_RET void	S_usage(pTHX)
			__attribute__noreturn__;

#endif
#if defined(PERL_IN_PP_C)
STATIC size_t	S_do_chomp(pTHX_ SV *retval, SV *sv, bool chomping);
#define PERL_ARGS_ASSERT_DO_CHOMP	\
	assert(retval); assert(sv)
STATIC OP*	S_do_delete_local(pTHX);
STATIC SV*	S_refto(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REFTO	\
	assert(sv)

#endif
#if defined(PERL_IN_PP_C) || defined(PERL_IN_PP_HOT_C)
PERL_CALLCONV GV*	Perl_softref2xv(pTHX_ SV *const sv, const char *const what, const svtype type, SV ***spp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SOFTREF2XV	\
	assert(sv); assert(what); assert(spp)

#endif
#if defined(PERL_IN_PP_CTL_C)
STATIC PerlIO *	S_check_type_and_open(pTHX_ SV *name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CHECK_TYPE_AND_OPEN	\
	assert(name)

STATIC void	S_destroy_matcher(pTHX_ PMOP* matcher);
#define PERL_ARGS_ASSERT_DESTROY_MATCHER	\
	assert(matcher)
STATIC OP*	S_do_smartmatch(pTHX_ HV* seen_this, HV* seen_other, const bool copied);
STATIC OP*	S_docatch(pTHX_ OP *o)
			__attribute__warn_unused_result__;

STATIC bool	S_doeval_compile(pTHX_ U8 gimme, CV* outside, U32 seq, HV* hh);
STATIC OP*	S_dofindlabel(pTHX_ OP *o, const char *label, STRLEN len, U32 flags, OP **opstack, OP **oplimit)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DOFINDLABEL	\
	assert(o); assert(label); assert(opstack); assert(oplimit)

STATIC MAGIC *	S_doparseform(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_DOPARSEFORM	\
	assert(sv)
STATIC I32	S_dopoptoeval(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptogivenfor(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptolabel(pTHX_ const char *label, STRLEN len, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DOPOPTOLABEL	\
	assert(label)

STATIC I32	S_dopoptoloop(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptosub_at(pTHX_ const PERL_CONTEXT* cxstk, I32 startingblock)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DOPOPTOSUB_AT	\
	assert(cxstk)

STATIC I32	S_dopoptowhen(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC PMOP*	S_make_matcher(pTHX_ REGEXP* re)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MAKE_MATCHER	\
	assert(re)

STATIC bool	S_matcher_matches_sv(pTHX_ PMOP* matcher, SV* sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MATCHER_MATCHES_SV	\
	assert(matcher); assert(sv)

STATIC bool	S_num_overflow(NV value, I32 fldsize, I32 frcsize)
			__attribute__warn_unused_result__;

PERL_STATIC_INLINE bool	S_path_is_searchable(const char *name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PATH_IS_SEARCHABLE	\
	assert(name)

STATIC I32	S_run_user_filter(pTHX_ int idx, SV *buf_sv, int maxlen)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_RUN_USER_FILTER	\
	assert(buf_sv)

STATIC void	S_rxres_free(pTHX_ void** rsp);
#define PERL_ARGS_ASSERT_RXRES_FREE	\
	assert(rsp)
STATIC void	S_rxres_restore(pTHX_ void **rsp, REGEXP *rx);
#define PERL_ARGS_ASSERT_RXRES_RESTORE	\
	assert(rsp); assert(rx)
STATIC void	S_save_lines(pTHX_ AV *array, SV *sv);
#define PERL_ARGS_ASSERT_SAVE_LINES	\
	assert(sv)
#endif
#if defined(PERL_IN_PP_HOT_C)
STATIC void	S_do_oddball(pTHX_ SV **oddkey, SV **firstkey);
#define PERL_ARGS_ASSERT_DO_ODDBALL	\
	assert(oddkey); assert(firstkey)
PERL_STATIC_INLINE HV*	S_opmethod_stash(pTHX_ SV* meth);
#define PERL_ARGS_ASSERT_OPMETHOD_STASH	\
	assert(meth)
#endif
#if defined(PERL_IN_PP_PACK_C)
STATIC int	S_div128(pTHX_ SV *pnum, bool *done);
#define PERL_ARGS_ASSERT_DIV128	\
	assert(pnum); assert(done)
STATIC char	S_first_symbol(const char *pat, const char *patend);
#define PERL_ARGS_ASSERT_FIRST_SYMBOL	\
	assert(pat); assert(patend)
STATIC const char *	S_get_num(pTHX_ const char *patptr, I32 *lenptr)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_NUM	\
	assert(patptr); assert(lenptr)

STATIC const char *	S_group_end(pTHX_ const char *patptr, const char *patend, char ender);
#define PERL_ARGS_ASSERT_GROUP_END	\
	assert(patptr); assert(patend)
STATIC SV*	S_is_an_int(pTHX_ const char *s, STRLEN l)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_AN_INT	\
	assert(s)

STATIC I32	S_measure_struct(pTHX_ struct tempsym* symptr);
#define PERL_ARGS_ASSERT_MEASURE_STRUCT	\
	assert(symptr)
STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m);
#define PERL_ARGS_ASSERT_MUL128	\
	assert(sv)
STATIC char *	S_my_bytes_to_utf8(const U8 *start, STRLEN len, char *dest, const bool needs_swap)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MY_BYTES_TO_UTF8	\
	assert(start); assert(dest)

STATIC bool	S_need_utf8(const char *pat, const char *patend);
#define PERL_ARGS_ASSERT_NEED_UTF8	\
	assert(pat); assert(patend)
STATIC bool	S_next_symbol(pTHX_ struct tempsym* symptr);
#define PERL_ARGS_ASSERT_NEXT_SYMBOL	\
	assert(symptr)
STATIC SV **	S_pack_rec(pTHX_ SV *cat, struct tempsym* symptr, SV **beglist, SV **endlist);
#define PERL_ARGS_ASSERT_PACK_REC	\
	assert(cat); assert(symptr); assert(beglist); assert(endlist)
STATIC char *	S_sv_exp_grow(pTHX_ SV *sv, STRLEN needed)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_EXP_GROW	\
	assert(sv)

STATIC I32	S_unpack_rec(pTHX_ struct tempsym* symptr, const char *s, const char *strbeg, const char *strend, const char **new_s);
#define PERL_ARGS_ASSERT_UNPACK_REC	\
	assert(symptr); assert(s); assert(strbeg); assert(strend)
#endif
#if defined(PERL_IN_PP_SORT_C)
STATIC I32	S_amagic_cmp(pTHX_ SV *const str1, SV *const str2);
#define PERL_ARGS_ASSERT_AMAGIC_CMP	\
	assert(str1); assert(str2)
STATIC I32	S_amagic_i_ncmp(pTHX_ SV *const a, SV *const b);
#define PERL_ARGS_ASSERT_AMAGIC_I_NCMP	\
	assert(a); assert(b)
STATIC I32	S_amagic_ncmp(pTHX_ SV *const a, SV *const b);
#define PERL_ARGS_ASSERT_AMAGIC_NCMP	\
	assert(a); assert(b)
STATIC void	S_qsortsvu(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t compare);
#define PERL_ARGS_ASSERT_QSORTSVU	\
	assert(compare)
STATIC I32	S_sortcv(pTHX_ SV *const a, SV *const b);
#define PERL_ARGS_ASSERT_SORTCV	\
	assert(a); assert(b)
STATIC I32	S_sortcv_stacked(pTHX_ SV *const a, SV *const b);
#define PERL_ARGS_ASSERT_SORTCV_STACKED	\
	assert(a); assert(b)
STATIC I32	S_sortcv_xsub(pTHX_ SV *const a, SV *const b);
#define PERL_ARGS_ASSERT_SORTCV_XSUB	\
	assert(a); assert(b)
STATIC I32	S_sv_i_ncmp(pTHX_ SV *const a, SV *const b);
#define PERL_ARGS_ASSERT_SV_I_NCMP	\
	assert(a); assert(b)
STATIC I32	S_sv_ncmp(pTHX_ SV *const a, SV *const b);
#define PERL_ARGS_ASSERT_SV_NCMP	\
	assert(a); assert(b)
#  if defined(USE_LOCALE_COLLATE)
STATIC I32	S_amagic_cmp_locale(pTHX_ SV *const str1, SV *const str2);
#define PERL_ARGS_ASSERT_AMAGIC_CMP_LOCALE	\
	assert(str1); assert(str2)
#  endif
#endif
#if defined(PERL_IN_PP_SYS_C)
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop);
#define PERL_ARGS_ASSERT_DOFORM	\
	assert(cv); assert(gv)
STATIC SV *	S_space_join_names_mortal(pTHX_ char *const *array);
#define PERL_ARGS_ASSERT_SPACE_JOIN_NAMES_MORTAL	\
	assert(array)
#endif
#if defined(PERL_IN_REGCOMP_C)
STATIC void	S__append_range_to_invlist(pTHX_ SV* const invlist, const UV start, const UV end);
#define PERL_ARGS_ASSERT__APPEND_RANGE_TO_INVLIST	\
	assert(invlist)
PERL_STATIC_INLINE UV*	S__invlist_array_init(SV* const invlist, const bool will_have_0)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__INVLIST_ARRAY_INIT	\
	assert(invlist)

STATIC SV*	S__make_exactf_invlist(pTHX_ RExC_state_t *pRExC_state, regnode *node)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__MAKE_EXACTF_INVLIST	\
	assert(pRExC_state); assert(node)

STATIC void	S_add_above_Latin1_folds(pTHX_ RExC_state_t *pRExC_state, const U8 cp, SV** invlist);
#define PERL_ARGS_ASSERT_ADD_ABOVE_LATIN1_FOLDS	\
	assert(pRExC_state); assert(invlist)
PERL_STATIC_INLINE SV*	S_add_cp_to_invlist(pTHX_ SV* invlist, const UV cp)
			__attribute__warn_unused_result__;

STATIC U32	S_add_data(RExC_state_t* const pRExC_state, const char* const s, const U32 n)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ADD_DATA	\
	assert(pRExC_state); assert(s)

STATIC AV*	S_add_multi_match(pTHX_ AV* multi_char_matches, SV* multi_string, const STRLEN cp_count);
#define PERL_ARGS_ASSERT_ADD_MULTI_MATCH	\
	assert(multi_string)
PERL_STATIC_INLINE void	S_alloc_maybe_populate_EXACT(pTHX_ RExC_state_t *pRExC_state, regnode *node, I32 *flagp, STRLEN len, UV code_point, bool downgradable);
#define PERL_ARGS_ASSERT_ALLOC_MAYBE_POPULATE_EXACT	\
	assert(pRExC_state); assert(node); assert(flagp)
STATIC const char *	S_cntrl_to_mnemonic(const U8 c)
			__attribute__pure__;

PERL_STATIC_INLINE U8	S_compute_EXACTish(RExC_state_t *pRExC_state);
#define PERL_ARGS_ASSERT_COMPUTE_EXACTISH	\
	assert(pRExC_state)
STATIC regnode *	S_construct_ahocorasick_from_trie(pTHX_ RExC_state_t *pRExC_state, regnode *source, U32 depth);
#define PERL_ARGS_ASSERT_CONSTRUCT_AHOCORASICK_FROM_TRIE	\
	assert(pRExC_state); assert(source)
STATIC int	S_edit_distance(const UV *src, const UV *tgt, const STRLEN x, const STRLEN y, const SSize_t maxDistance)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_EDIT_DISTANCE	\
	assert(src); assert(tgt)

STATIC SV*	S_get_ANYOF_cp_list_for_ssc(pTHX_ const RExC_state_t *pRExC_state, const regnode_charclass* const node);
#define PERL_ARGS_ASSERT_GET_ANYOF_CP_LIST_FOR_SSC	\
	assert(pRExC_state); assert(node)
PERL_STATIC_INLINE STRLEN*	S_get_invlist_iter_addr(SV* invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_INVLIST_ITER_ADDR	\
	assert(invlist)

STATIC bool	S_grok_bslash_N(pTHX_ RExC_state_t *pRExC_state, regnode** nodep, UV *code_point_p, int* cp_count, I32 *flagp, const bool strict, const U32 depth);
#define PERL_ARGS_ASSERT_GROK_BSLASH_N	\
	assert(pRExC_state); assert(flagp)
PERL_STATIC_INLINE regnode*	S_handle_named_backref(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, char * parse_start, char ch);
#define PERL_ARGS_ASSERT_HANDLE_NAMED_BACKREF	\
	assert(pRExC_state); assert(flagp); assert(parse_start)
STATIC int	S_handle_possible_posix(pTHX_ RExC_state_t *pRExC_state, const char* const s, char ** updated_parse_ptr, AV** posix_warnings, const bool check_only);
#define PERL_ARGS_ASSERT_HANDLE_POSSIBLE_POSIX	\
	assert(pRExC_state); assert(s)
STATIC regnode*	S_handle_regex_sets(pTHX_ RExC_state_t *pRExC_state, SV ** return_invlist, I32 *flagp, U32 depth, char * const oregcomp_parse);
#define PERL_ARGS_ASSERT_HANDLE_REGEX_SETS	\
	assert(pRExC_state); assert(flagp); assert(oregcomp_parse)
PERL_STATIC_INLINE SV*	S_invlist_clone(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_CLONE	\
	assert(invlist)

STATIC SV*	S_invlist_contents(pTHX_ SV* const invlist, const bool traditional_style)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_CONTENTS	\
	assert(invlist)

STATIC void	S_invlist_extend(pTHX_ SV* const invlist, const UV len);
#define PERL_ARGS_ASSERT_INVLIST_EXTEND	\
	assert(invlist)
PERL_STATIC_INLINE UV	S_invlist_highest(SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_HIGHEST	\
	assert(invlist)

PERL_STATIC_INLINE bool	S_invlist_is_iterating(SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_IS_ITERATING	\
	assert(invlist)

PERL_STATIC_INLINE void	S_invlist_iterfinish(SV* invlist);
#define PERL_ARGS_ASSERT_INVLIST_ITERFINISH	\
	assert(invlist)
PERL_STATIC_INLINE void	S_invlist_iterinit(SV* invlist);
#define PERL_ARGS_ASSERT_INVLIST_ITERINIT	\
	assert(invlist)
STATIC bool	S_invlist_iternext(SV* invlist, UV* start, UV* end)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_ITERNEXT	\
	assert(invlist); assert(start); assert(end)

PERL_STATIC_INLINE UV	S_invlist_max(SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_MAX	\
	assert(invlist)

PERL_STATIC_INLINE void	S_invlist_set_len(pTHX_ SV* const invlist, const UV len, const bool offset);
#define PERL_ARGS_ASSERT_INVLIST_SET_LEN	\
	assert(invlist)
STATIC bool	S_is_ssc_worth_it(const RExC_state_t * pRExC_state, const regnode_ssc * ssc);
#define PERL_ARGS_ASSERT_IS_SSC_WORTH_IT	\
	assert(pRExC_state); assert(ssc)
STATIC U32	S_join_exact(pTHX_ RExC_state_t *pRExC_state, regnode *scan, UV *min_subtract, bool *unfolded_multi_char, U32 flags, regnode *val, U32 depth);
#define PERL_ARGS_ASSERT_JOIN_EXACT	\
	assert(pRExC_state); assert(scan); assert(min_subtract); assert(unfolded_multi_char)
STATIC I32	S_make_trie(pTHX_ RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth);
#define PERL_ARGS_ASSERT_MAKE_TRIE	\
	assert(pRExC_state); assert(startbranch); assert(first); assert(last); assert(tail)
STATIC void	S_nextchar(pTHX_ RExC_state_t *pRExC_state);
#define PERL_ARGS_ASSERT_NEXTCHAR	\
	assert(pRExC_state)
STATIC void	S_output_or_return_posix_warnings(pTHX_ RExC_state_t *pRExC_state, AV* posix_warnings, AV** return_posix_warnings);
#define PERL_ARGS_ASSERT_OUTPUT_OR_RETURN_POSIX_WARNINGS	\
	assert(pRExC_state); assert(posix_warnings)
STATIC void	S_parse_lparen_question_flags(pTHX_ RExC_state_t *pRExC_state);
#define PERL_ARGS_ASSERT_PARSE_LPAREN_QUESTION_FLAGS	\
	assert(pRExC_state)
STATIC void	S_populate_ANYOF_from_invlist(pTHX_ regnode *node, SV** invlist_ptr);
#define PERL_ARGS_ASSERT_POPULATE_ANYOF_FROM_INVLIST	\
	assert(node); assert(invlist_ptr)
PERL_STATIC_NO_RET void	S_re_croak2(pTHX_ bool utf8, const char* pat1, const char* pat2, ...)
			__attribute__noreturn__;
#define PERL_ARGS_ASSERT_RE_CROAK2	\
	assert(pat1); assert(pat2)

STATIC regnode*	S_reg(pTHX_ RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth);
#define PERL_ARGS_ASSERT_REG	\
	assert(pRExC_state); assert(flagp)
STATIC regnode*	S_reg2Lanode(pTHX_ RExC_state_t *pRExC_state, const U8 op, const U32 arg1, const I32 arg2);
#define PERL_ARGS_ASSERT_REG2LANODE	\
	assert(pRExC_state)
STATIC regnode*	S_reg_node(pTHX_ RExC_state_t *pRExC_state, U8 op);
#define PERL_ARGS_ASSERT_REG_NODE	\
	assert(pRExC_state)
STATIC UV	S_reg_recode(pTHX_ const U8 value, SV **encp);
#define PERL_ARGS_ASSERT_REG_RECODE	\
	assert(encp)
STATIC SV *	S_reg_scan_name(pTHX_ RExC_state_t *pRExC_state, U32 flags);
#define PERL_ARGS_ASSERT_REG_SCAN_NAME	\
	assert(pRExC_state)
PERL_STATIC_INLINE char *	S_reg_skipcomment(RExC_state_t *pRExC_state, char * p);
#define PERL_ARGS_ASSERT_REG_SKIPCOMMENT	\
	assert(pRExC_state); assert(p)
STATIC regnode*	S_reganode(pTHX_ RExC_state_t *pRExC_state, U8 op, U32 arg);
#define PERL_ARGS_ASSERT_REGANODE	\
	assert(pRExC_state)
STATIC regnode*	S_regatom(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth);
#define PERL_ARGS_ASSERT_REGATOM	\
	assert(pRExC_state); assert(flagp)
STATIC regnode*	S_regbranch(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, I32 first, U32 depth);
#define PERL_ARGS_ASSERT_REGBRANCH	\
	assert(pRExC_state); assert(flagp)
STATIC regnode*	S_regclass(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth, const bool stop_at_1, bool allow_multi_fold, const bool silence_non_portable, const bool strict, bool optimizable, SV** ret_invlist, AV** return_posix_warnings);
#define PERL_ARGS_ASSERT_REGCLASS	\
	assert(pRExC_state); assert(flagp)
STATIC unsigned int	S_regex_set_precedence(const U8 my_operator)
			__attribute__pure__;

STATIC void	S_reginsert(pTHX_ RExC_state_t *pRExC_state, U8 op, regnode *opnd, U32 depth);
#define PERL_ARGS_ASSERT_REGINSERT	\
	assert(pRExC_state); assert(opnd)
STATIC regnode*	S_regnode_guts(pTHX_ RExC_state_t *pRExC_state, const U8 op, const STRLEN extra_len, const char* const name);
#define PERL_ARGS_ASSERT_REGNODE_GUTS	\
	assert(pRExC_state); assert(name)
STATIC regnode*	S_regpiece(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth);
#define PERL_ARGS_ASSERT_REGPIECE	\
	assert(pRExC_state); assert(flagp)
STATIC void	S_regtail(pTHX_ RExC_state_t * pRExC_state, const regnode * const p, const regnode * const val, const U32 depth);
#define PERL_ARGS_ASSERT_REGTAIL	\
	assert(pRExC_state); assert(p); assert(val)
STATIC void	S_scan_commit(pTHX_ const RExC_state_t *pRExC_state, struct scan_data_t *data, SSize_t *minlenp, int is_inf);
#define PERL_ARGS_ASSERT_SCAN_COMMIT	\
	assert(pRExC_state); assert(data); assert(minlenp)
STATIC void	S_set_ANYOF_arg(pTHX_ RExC_state_t* const pRExC_state, regnode* const node, SV* const cp_list, SV* const runtime_defns, SV* const only_utf8_locale_list, SV* const swash, const bool has_user_defined_property);
#define PERL_ARGS_ASSERT_SET_ANYOF_ARG	\
	assert(pRExC_state); assert(node)
STATIC void	S_skip_to_be_ignored_text(pTHX_ RExC_state_t *pRExC_state, char ** p, const bool force_to_xmod);
#define PERL_ARGS_ASSERT_SKIP_TO_BE_IGNORED_TEXT	\
	assert(pRExC_state); assert(p)
PERL_STATIC_INLINE void	S_ssc_add_range(pTHX_ regnode_ssc *ssc, UV const start, UV const end);
#define PERL_ARGS_ASSERT_SSC_ADD_RANGE	\
	assert(ssc)
STATIC void	S_ssc_and(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *and_with);
#define PERL_ARGS_ASSERT_SSC_AND	\
	assert(pRExC_state); assert(ssc); assert(and_with)
STATIC void	S_ssc_anything(pTHX_ regnode_ssc *ssc);
#define PERL_ARGS_ASSERT_SSC_ANYTHING	\
	assert(ssc)
PERL_STATIC_INLINE void	S_ssc_clear_locale(regnode_ssc *ssc);
#define PERL_ARGS_ASSERT_SSC_CLEAR_LOCALE	\
	assert(ssc)
PERL_STATIC_INLINE void	S_ssc_cp_and(pTHX_ regnode_ssc *ssc, UV const cp);
#define PERL_ARGS_ASSERT_SSC_CP_AND	\
	assert(ssc)
STATIC void	S_ssc_finalize(pTHX_ RExC_state_t *pRExC_state, regnode_ssc *ssc);
#define PERL_ARGS_ASSERT_SSC_FINALIZE	\
	assert(pRExC_state); assert(ssc)
STATIC void	S_ssc_init(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc);
#define PERL_ARGS_ASSERT_SSC_INIT	\
	assert(pRExC_state); assert(ssc)
PERL_STATIC_INLINE void	S_ssc_intersection(pTHX_ regnode_ssc *ssc, SV* const invlist, const bool invert_2nd);
#define PERL_ARGS_ASSERT_SSC_INTERSECTION	\
	assert(ssc); assert(invlist)
STATIC int	S_ssc_is_anything(const regnode_ssc *ssc)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SSC_IS_ANYTHING	\
	assert(ssc)

STATIC int	S_ssc_is_cp_posixl_init(const RExC_state_t *pRExC_state, const regnode_ssc *ssc)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SSC_IS_CP_POSIXL_INIT	\
	assert(pRExC_state); assert(ssc)

STATIC void	S_ssc_or(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *or_with);
#define PERL_ARGS_ASSERT_SSC_OR	\
	assert(pRExC_state); assert(ssc); assert(or_with)
PERL_STATIC_INLINE void	S_ssc_union(pTHX_ regnode_ssc *ssc, SV* const invlist, const bool invert_2nd);
#define PERL_ARGS_ASSERT_SSC_UNION	\
	assert(ssc); assert(invlist)
STATIC SSize_t	S_study_chunk(pTHX_ RExC_state_t *pRExC_state, regnode **scanp, SSize_t *minlenp, SSize_t *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U32 recursed_depth, regnode_ssc *and_withp, U32 flags, U32 depth);
#define PERL_ARGS_ASSERT_STUDY_CHUNK	\
	assert(pRExC_state); assert(scanp); assert(minlenp); assert(deltap); assert(last)
#endif
#if defined(PERL_IN_REGCOMP_C) || defined (PERL_IN_DUMP_C)
PERL_CALLCONV void	Perl__invlist_dump(pTHX_ PerlIO *file, I32 level, const char* const indent, SV* const invlist);
#define PERL_ARGS_ASSERT__INVLIST_DUMP	\
	assert(file); assert(indent); assert(invlist)
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_PERL_C) || defined(PERL_IN_UTF8_C)
PERL_CALLCONV bool	Perl__invlistEQ(pTHX_ SV* const a, SV* const b, const bool complement_b);
#define PERL_ARGS_ASSERT__INVLISTEQ	\
	assert(a); assert(b)
PERL_CALLCONV SV*	Perl__new_invlist_C_array(pTHX_ const UV* const list)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__NEW_INVLIST_C_ARRAY	\
	assert(list)

#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
PERL_CALLCONV SV*	Perl__get_regclass_nonbitmap_data(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **lonly_utf8_locale, SV **output_invlist);
#define PERL_ARGS_ASSERT__GET_REGCLASS_NONBITMAP_DATA	\
	assert(node)
PERL_CALLCONV void	Perl__load_PL_utf8_foldclosures(pTHX);
PERL_CALLCONV int	Perl_re_printf(pTHX_ const char *fmt, ...);
#define PERL_ARGS_ASSERT_RE_PRINTF	\
	assert(fmt)
PERL_CALLCONV void	Perl_regprop(pTHX_ const regexp *prog, SV* sv, const regnode* o, const regmatch_info *reginfo, const RExC_state_t *pRExC_state);
#define PERL_ARGS_ASSERT_REGPROP	\
	assert(sv); assert(o)
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C)
PERL_CALLCONV SV*	Perl__get_swash_invlist(pTHX_ SV* const swash)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__GET_SWASH_INVLIST	\
	assert(swash)

PERL_STATIC_INLINE bool	S__invlist_contains_cp(SV* const invlist, const UV cp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__INVLIST_CONTAINS_CP	\
	assert(invlist)

PERL_STATIC_INLINE UV	S__invlist_len(SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__INVLIST_LEN	\
	assert(invlist)

PERL_CALLCONV IV	Perl__invlist_search(SV* const invlist, const UV cp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__INVLIST_SEARCH	\
	assert(invlist)

PERL_CALLCONV HV*	Perl__swash_inversion_hash(pTHX_ SV* const swash)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__SWASH_INVERSION_HASH	\
	assert(swash)

PERL_STATIC_INLINE bool*	S_get_invlist_offset_addr(SV* invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_INVLIST_OFFSET_ADDR	\
	assert(invlist)

PERL_STATIC_INLINE UV*	S_invlist_array(SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_ARRAY	\
	assert(invlist)

#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C) || defined(PERL_IN_TOKE_C)
PERL_CALLCONV SV*	Perl__core_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none, SV* invlist, U8* const flags_p);
#define PERL_ARGS_ASSERT__CORE_SWASH_INIT	\
	assert(pkg); assert(name); assert(listsv)
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_TOKE_C) || defined(PERL_IN_DQUOTE_C)
PERL_STATIC_INLINE char*	S_form_short_octal_warning(pTHX_ const char * const s, const STRLEN len)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FORM_SHORT_OCTAL_WARNING	\
	assert(s)

PERL_CALLCONV char	Perl_grok_bslash_c(pTHX_ const char source, const bool output_warning)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_grok_bslash_o(pTHX_ char** s, UV* uv, const char** error_msg, const bool output_warning, const bool strict, const bool silence_non_portable, const bool utf8)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GROK_BSLASH_O	\
	assert(s); assert(uv); assert(error_msg)

PERL_CALLCONV bool	Perl_grok_bslash_x(pTHX_ char** s, UV* uv, const char** error_msg, const bool output_warning, const bool strict, const bool silence_non_portable, const bool utf8)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GROK_BSLASH_X	\
	assert(s); assert(uv); assert(error_msg)

PERL_STATIC_INLINE I32	S_regcurly(const char *s)
			__attribute__warn_unused_result__
			__attribute__pure__;
#define PERL_ARGS_ASSERT_REGCURLY	\
	assert(s)

#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_UTF8_C)
PERL_CALLCONV SV*	Perl__add_range_to_invlist(pTHX_ SV* invlist, const UV start, const UV end)
			__attribute__warn_unused_result__;

/* PERL_CALLCONV void	_invlist_intersection(pTHX_ SV* const a, SV* const b, SV** i); */
PERL_CALLCONV void	Perl__invlist_intersection_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, const bool complement_b, SV** i);
#define PERL_ARGS_ASSERT__INVLIST_INTERSECTION_MAYBE_COMPLEMENT_2ND	\
	assert(b); assert(i)
PERL_CALLCONV void	Perl__invlist_invert(pTHX_ SV* const invlist);
#define PERL_ARGS_ASSERT__INVLIST_INVERT	\
	assert(invlist)
PERL_CALLCONV void	Perl__invlist_populate_swatch(SV* const invlist, const UV start, const UV end, U8* swatch);
#define PERL_ARGS_ASSERT__INVLIST_POPULATE_SWATCH	\
	assert(invlist); assert(swatch)
/* PERL_CALLCONV void	_invlist_subtract(pTHX_ SV* const a, SV* const b, SV** result); */
/* PERL_CALLCONV void	_invlist_union(pTHX_ SV* const a, SV* const b, SV** output); */
PERL_CALLCONV void	Perl__invlist_union_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, const bool complement_b, SV** output);
#define PERL_ARGS_ASSERT__INVLIST_UNION_MAYBE_COMPLEMENT_2ND	\
	assert(b); assert(output)
PERL_CALLCONV SV*	Perl__new_invlist(pTHX_ IV initial_size)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl__setup_canned_invlist(pTHX_ const STRLEN size, const UV element0, UV** other_elements_ptr)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__SETUP_CANNED_INVLIST	\
	assert(other_elements_ptr)

PERL_CALLCONV SV*	Perl__swash_to_invlist(pTHX_ SV* const swash)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__SWASH_TO_INVLIST	\
	assert(swash)

#endif
#if defined(PERL_IN_REGEXEC_C)
STATIC LB_enum	S_advance_one_LB(pTHX_ U8 ** curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ADVANCE_ONE_LB	\
	assert(curpos); assert(strend)

STATIC SB_enum	S_advance_one_SB(pTHX_ U8 ** curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ADVANCE_ONE_SB	\
	assert(curpos); assert(strend)

STATIC WB_enum	S_advance_one_WB(pTHX_ U8 ** curpos, const U8 * const strend, const bool utf8_target, const bool skip_Extend_Format)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ADVANCE_ONE_WB	\
	assert(curpos); assert(strend)

STATIC LB_enum	S_backup_one_LB(pTHX_ const U8 * const strbeg, U8 ** curpos, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BACKUP_ONE_LB	\
	assert(strbeg); assert(curpos)

STATIC SB_enum	S_backup_one_SB(pTHX_ const U8 * const strbeg, U8 ** curpos, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BACKUP_ONE_SB	\
	assert(strbeg); assert(curpos)

STATIC WB_enum	S_backup_one_WB(pTHX_ WB_enum * previous, const U8 * const strbeg, U8 ** curpos, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BACKUP_ONE_WB	\
	assert(previous); assert(strbeg); assert(curpos)

STATIC char*	S_find_byclass(pTHX_ regexp * prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FIND_BYCLASS	\
	assert(prog); assert(c); assert(s); assert(strend)

STATIC bool	S_isFOO_lc(pTHX_ const U8 classnum, const U8 character)
			__attribute__warn_unused_result__;

STATIC bool	S_isFOO_utf8_lc(pTHX_ const U8 classnum, const U8* character)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ISFOO_UTF8_LC	\
	assert(character)

PERL_STATIC_INLINE bool	S_isGCB(const GCB_enum before, const GCB_enum after)
			__attribute__warn_unused_result__;

STATIC bool	S_isLB(pTHX_ LB_enum before, LB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ISLB	\
	assert(strbeg); assert(curpos); assert(strend)

STATIC bool	S_isSB(pTHX_ SB_enum before, SB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ISSB	\
	assert(strbeg); assert(curpos); assert(strend)

STATIC bool	S_isWB(pTHX_ WB_enum previous, WB_enum before, WB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ISWB	\
	assert(strbeg); assert(curpos); assert(strend)

STATIC I32	S_reg_check_named_buff_matched(const regexp *rex, const regnode *scan)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REG_CHECK_NAMED_BUFF_MATCHED	\
	assert(rex); assert(scan)

STATIC void	S_regcppop(pTHX_ regexp *rex, U32 *maxopenparen_p);
#define PERL_ARGS_ASSERT_REGCPPOP	\
	assert(rex); assert(maxopenparen_p)
STATIC CHECKPOINT	S_regcppush(pTHX_ const regexp *rex, I32 parenfloor, U32 maxopenparen);
#define PERL_ARGS_ASSERT_REGCPPUSH	\
	assert(rex)
STATIC U8*	S_reghop3(U8 *s, SSize_t off, const U8 *lim)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REGHOP3	\
	assert(s); assert(lim)

STATIC U8*	S_reghop4(U8 *s, SSize_t off, const U8 *llim, const U8 *rlim)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REGHOP4	\
	assert(s); assert(llim); assert(rlim)

STATIC U8*	S_reghopmaybe3(U8 *s, SSize_t off, const U8 *lim)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REGHOPMAYBE3	\
	assert(s); assert(lim)

STATIC bool	S_reginclass(pTHX_ regexp * const prog, const regnode * const n, const U8 * const p, const U8 * const p_end, bool const utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REGINCLASS	\
	assert(n); assert(p); assert(p_end)

STATIC SSize_t	S_regmatch(pTHX_ regmatch_info *reginfo, char *startpos, regnode *prog)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REGMATCH	\
	assert(reginfo); assert(startpos); assert(prog)

STATIC I32	S_regrepeat(pTHX_ regexp *prog, char **startposp, const regnode *p, regmatch_info *const reginfo, I32 max, int depth)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REGREPEAT	\
	assert(prog); assert(startposp); assert(p); assert(reginfo)

STATIC bool	S_regtry(pTHX_ regmatch_info *reginfo, char **startposp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REGTRY	\
	assert(reginfo); assert(startposp)

STATIC bool	S_to_byte_substr(pTHX_ regexp * prog);
#define PERL_ARGS_ASSERT_TO_BYTE_SUBSTR	\
	assert(prog)
STATIC void	S_to_utf8_substr(pTHX_ regexp * prog);
#define PERL_ARGS_ASSERT_TO_UTF8_SUBSTR	\
	assert(prog)
#endif
#if defined(PERL_IN_SCOPE_C)
STATIC void	S_save_pushptri32ptr(pTHX_ void *const ptr1, const I32 i, void *const ptr2, const int type);
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_SCALAR_AT	\
	assert(sptr)
#endif
#if defined(PERL_IN_SV_C)
STATIC char *	S_F0convert(NV nv, char *const endbuf, STRLEN *const len);
#define PERL_ARGS_ASSERT_F0CONVERT	\
	assert(endbuf); assert(len)
STATIC void	S_anonymise_cv_maybe(pTHX_ GV *gv, CV *cv);
#define PERL_ARGS_ASSERT_ANONYMISE_CV_MAYBE	\
	assert(gv); assert(cv)
STATIC void	S_assert_uft8_cache_coherent(pTHX_ const char *const func, STRLEN from_cache, STRLEN real, SV *const sv);
#define PERL_ARGS_ASSERT_ASSERT_UFT8_CACHE_COHERENT	\
	assert(func); assert(sv)
STATIC bool	S_curse(pTHX_ SV * const sv, const bool check_refcnt);
#define PERL_ARGS_ASSERT_CURSE	\
	assert(sv)
STATIC I32	S_expect_number(pTHX_ char **const pattern)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_EXPECT_NUMBER	\
	assert(pattern)

STATIC I32	S_find_array_subscript(pTHX_ const AV *const av, const SV *const val);
#define PERL_ARGS_ASSERT_FIND_ARRAY_SUBSCRIPT	\
	assert(val)
STATIC SV *	S_find_hash_subscript(pTHX_ const HV *const hv, const SV *const val);
#define PERL_ARGS_ASSERT_FIND_HASH_SUBSCRIPT	\
	assert(val)
STATIC SV*	S_find_uninit_var(pTHX_ const OP *const obase, const SV *const uninit_sv, bool match, const char **desc_p);
#define PERL_ARGS_ASSERT_FIND_UNINIT_VAR	\
	assert(desc_p)
STATIC bool	S_glob_2number(pTHX_ GV* const gv);
#define PERL_ARGS_ASSERT_GLOB_2NUMBER	\
	assert(gv)
STATIC void	S_glob_assign_glob(pTHX_ SV *const dstr, SV *const sstr, const int dtype);
#define PERL_ARGS_ASSERT_GLOB_ASSIGN_GLOB	\
	assert(dstr); assert(sstr)
STATIC SV *	S_more_sv(pTHX);
STATIC void	S_not_a_number(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_NOT_A_NUMBER	\
	assert(sv)
STATIC void	S_not_incrementable(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_NOT_INCREMENTABLE	\
	assert(sv)
STATIC PTR_TBL_ENT_t *	S_ptr_table_find(PTR_TBL_t *const tbl, const void *const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PTR_TABLE_FIND	\
	assert(tbl)

STATIC bool	S_sv_2iuv_common(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_2IUV_COMMON	\
	assert(sv)
STATIC void	S_sv_add_arena(pTHX_ char *const ptr, const U32 size, const U32 flags);
#define PERL_ARGS_ASSERT_SV_ADD_ARENA	\
	assert(ptr)
STATIC const char *	S_sv_display(pTHX_ SV *const sv, char *tmpbuf, STRLEN tmpbuf_size);
#define PERL_ARGS_ASSERT_SV_DISPLAY	\
	assert(sv); assert(tmpbuf)
STATIC STRLEN	S_sv_pos_b2u_midway(pTHX_ const U8 *const s, const U8 *const target, const U8 *end, STRLEN endu);
#define PERL_ARGS_ASSERT_SV_POS_B2U_MIDWAY	\
	assert(s); assert(target); assert(end)
STATIC STRLEN	S_sv_pos_u2b_cached(pTHX_ SV *const sv, MAGIC **const mgp, const U8 *const start, const U8 *const send, STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0);
#define PERL_ARGS_ASSERT_SV_POS_U2B_CACHED	\
	assert(sv); assert(mgp); assert(start); assert(send)
STATIC STRLEN	S_sv_pos_u2b_forwards(const U8 *const start, const U8 *const send, STRLEN *const uoffset, bool *const at_end);
#define PERL_ARGS_ASSERT_SV_POS_U2B_FORWARDS	\
	assert(start); assert(send); assert(uoffset); assert(at_end)
STATIC STRLEN	S_sv_pos_u2b_midway(const U8 *const start, const U8 *send, STRLEN uoffset, const STRLEN uend);
#define PERL_ARGS_ASSERT_SV_POS_U2B_MIDWAY	\
	assert(start); assert(send)
PERL_STATIC_INLINE void	S_sv_unglob(pTHX_ SV *const sv, U32 flags);
#define PERL_ARGS_ASSERT_SV_UNGLOB	\
	assert(sv)
STATIC char *	S_uiv_2buf(char *const buf, const IV iv, UV uv, const int is_uv, char **const peob)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_UIV_2BUF	\
	assert(buf); assert(peob)

STATIC void	S_utf8_mg_len_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN ulen);
#define PERL_ARGS_ASSERT_UTF8_MG_LEN_CACHE_UPDATE	\
	assert(sv); assert(mgp)
STATIC void	S_utf8_mg_pos_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN byte, const STRLEN utf8, const STRLEN blen);
#define PERL_ARGS_ASSERT_UTF8_MG_POS_CACHE_UPDATE	\
	assert(sv); assert(mgp)
STATIC I32	S_visit(pTHX_ SVFUNC_t f, const U32 flags, const U32 mask);
#define PERL_ARGS_ASSERT_VISIT	\
	assert(f)
#  if defined(USE_ITHREADS)
STATIC SV*	S_sv_dup_common(pTHX_ const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DUP_COMMON	\
	assert(sstr); assert(param)

STATIC SV **	S_sv_dup_inc_multiple(pTHX_ SV *const *source, SV **dest, SSize_t items, CLONE_PARAMS *const param);
#define PERL_ARGS_ASSERT_SV_DUP_INC_MULTIPLE	\
	assert(source); assert(dest); assert(param)
STATIC void	S_unreferenced_to_tmp_stack(pTHX_ AV *const unreferenced);
#define PERL_ARGS_ASSERT_UNREFERENCED_TO_TMP_STACK	\
	assert(unreferenced)
#  endif
#endif
#if defined(PERL_IN_SV_C) || defined (PERL_IN_OP_C)
PERL_CALLCONV SV *	Perl_varname(pTHX_ const GV *const gv, const char gvtype, PADOFFSET targ, const SV *const keyname, I32 aindex, int subscript_type)
			__attribute__warn_unused_result__;

#endif
#if defined(PERL_IN_TOKE_C)
STATIC int	S_ao(pTHX_ int toketype);
STATIC void	S_check_uni(pTHX);
STATIC void	S_checkcomma(pTHX_ const char *s, const char *name, const char *what);
#define PERL_ARGS_ASSERT_CHECKCOMMA	\
	assert(s); assert(name); assert(what)
STATIC int	S_deprecate_commaless_var_list(pTHX);
STATIC char *	S_filter_gets(pTHX_ SV *sv, STRLEN append)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FILTER_GETS	\
	assert(sv)

STATIC HV *	S_find_in_my_stash(pTHX_ const char *pkgname, STRLEN len)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FIND_IN_MY_STASH	\
	assert(pkgname)

STATIC void	S_force_ident(pTHX_ const char *s, int kind);
#define PERL_ARGS_ASSERT_FORCE_IDENT	\
	assert(s)
STATIC void	S_force_ident_maybe_lex(pTHX_ char pit);
STATIC void	S_force_next(pTHX_ I32 type);
STATIC char*	S_force_strict_version(pTHX_ char *s);
#define PERL_ARGS_ASSERT_FORCE_STRICT_VERSION	\
	assert(s)
STATIC char*	S_force_version(pTHX_ char *s, int guessing);
#define PERL_ARGS_ASSERT_FORCE_VERSION	\
	assert(s)
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack);
#define PERL_ARGS_ASSERT_FORCE_WORD	\
	assert(start)
PERL_STATIC_INLINE SV*	S_get_and_check_backslash_N_name(pTHX_ const char* s, const char* const e)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_AND_CHECK_BACKSLASH_N_NAME	\
	assert(s); assert(e)

STATIC void	S_incline(pTHX_ const char *s);
#define PERL_ARGS_ASSERT_INCLINE	\
	assert(s)
STATIC int	S_intuit_method(pTHX_ char *s, SV *ioname, CV *cv);
#define PERL_ARGS_ASSERT_INTUIT_METHOD	\
	assert(s)
STATIC int	S_intuit_more(pTHX_ char *s);
#define PERL_ARGS_ASSERT_INTUIT_MORE	\
	assert(s)
STATIC I32	S_lop(pTHX_ I32 f, int x, char *s);
#define PERL_ARGS_ASSERT_LOP	\
	assert(s)
PERL_STATIC_NO_RET void	S_missingterm(pTHX_ char *s)
			__attribute__noreturn__;

STATIC SV*	S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, STRLEN keylen, SV *sv, SV *pv, const char *type, STRLEN typelen);
#define PERL_ARGS_ASSERT_NEW_CONSTANT	\
	assert(key); assert(sv)
STATIC void	S_no_op(pTHX_ const char *const what, char *s);
#define PERL_ARGS_ASSERT_NO_OP	\
	assert(what)
STATIC void	S_parse_ident(pTHX_ char **s, char **d, char * const e, int allow_package, bool is_utf8);
#define PERL_ARGS_ASSERT_PARSE_IDENT	\
	assert(s); assert(d); assert(e)
STATIC int	S_pending_ident(pTHX);
STATIC char*	S_scan_const(pTHX_ char *start)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_CONST	\
	assert(start)

STATIC char*	S_scan_formline(pTHX_ char *s)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_FORMLINE	\
	assert(s)

STATIC char*	S_scan_heredoc(pTHX_ char *s)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_HEREDOC	\
	assert(s)

STATIC char*	S_scan_ident(pTHX_ char *s, char *dest, STRLEN destlen, I32 ck_uni);
#define PERL_ARGS_ASSERT_SCAN_IDENT	\
	assert(s); assert(dest)
STATIC char*	S_scan_inputsymbol(pTHX_ char *start)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_INPUTSYMBOL	\
	assert(start)

STATIC char*	S_scan_pat(pTHX_ char *start, I32 type)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_PAT	\
	assert(start)

STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims, int re_reparse, char **delimp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_STR	\
	assert(start)

STATIC char*	S_scan_subst(pTHX_ char *start)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_SUBST	\
	assert(start)

STATIC char*	S_scan_trans(pTHX_ char *start)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_TRANS	\
	assert(start)

STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp);
#define PERL_ARGS_ASSERT_SCAN_WORD	\
	assert(s); assert(dest); assert(slp)
STATIC char*	S_skipspace_flags(pTHX_ char *s, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SKIPSPACE_FLAGS	\
	assert(s)

STATIC I32	S_sublex_done(pTHX)
			__attribute__warn_unused_result__;

STATIC I32	S_sublex_push(pTHX)
			__attribute__warn_unused_result__;

STATIC I32	S_sublex_start(pTHX)
			__attribute__warn_unused_result__;

STATIC char*	S_swallow_bom(pTHX_ U8 *s)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SWALLOW_BOM	\
	assert(s)

STATIC char *	S_tokenize_use(pTHX_ int is_use, char *s)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_TOKENIZE_USE	\
	assert(s)

STATIC SV*	S_tokeq(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_TOKEQ	\
	assert(sv)
STATIC void	S_update_debugger_info(pTHX_ SV *orig_sv, const char *const buf, STRLEN len);
STATIC int	S_yywarn(pTHX_ const char *const s, U32 flags);
#define PERL_ARGS_ASSERT_YYWARN	\
	assert(s)
#endif
#if defined(PERL_IN_UNIVERSAL_C)
STATIC bool	S_isa_lookup(pTHX_ HV *stash, const char * const name, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_ISA_LOOKUP	\
	assert(stash); assert(name)
#endif
#if defined(PERL_IN_UTF8_C)
STATIC UV	S__to_utf8_case(pTHX_ const UV uv1, const U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, const char *normal, const char *special);
#define PERL_ARGS_ASSERT__TO_UTF8_CASE	\
	assert(p); assert(ustrp); assert(swashp); assert(normal)
STATIC UV	S_check_locale_boundary_crossing(pTHX_ const U8* const p, const UV result, U8* const ustrp, STRLEN *lenp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CHECK_LOCALE_BOUNDARY_CROSSING	\
	assert(p); assert(ustrp); assert(lenp)

PERL_STATIC_INLINE bool	S_is_utf8_common(pTHX_ const U8 *const p, SV **swash, const char * const swashname, SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_UTF8_COMMON	\
	assert(p); assert(swash); assert(swashname)

STATIC U8*	S_swash_scan_list_line(pTHX_ U8* l, U8* const lend, UV* min, UV* max, UV* val, const bool wants_value, const U8* const typestr)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SWASH_SCAN_LIST_LINE	\
	assert(l); assert(lend); assert(min); assert(max); assert(val); assert(typestr)

STATIC SV*	S_swatch_get(pTHX_ SV* swash, UV start, UV span)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SWATCH_GET	\
	assert(swash)

STATIC U8	S_to_lower_latin1(const U8 c, U8 *p, STRLEN *lenp)
			__attribute__warn_unused_result__;

#endif
#if defined(PERL_IN_UTF8_C) || defined(PERL_IN_PP_C)
PERL_CALLCONV UV	Perl__to_upper_title_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const char S_or_s);
#define PERL_ARGS_ASSERT__TO_UPPER_TITLE_LATIN1	\
	assert(p); assert(lenp)
#endif
#if defined(PERL_IN_UTF8_C) || defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
PERL_CALLCONV UV	Perl__to_fold_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const unsigned int flags);
#define PERL_ARGS_ASSERT__TO_FOLD_LATIN1	\
	assert(p); assert(lenp)
#endif
#if defined(PERL_IN_UTIL_C)
STATIC bool	S_ckwarn_common(pTHX_ U32 w);
STATIC bool	S_invoke_exception_hook(pTHX_ SV *ex, bool warn);
STATIC SV*	S_mess_alloc(pTHX);
STATIC SV *	S_with_queued_errors(pTHX_ SV *ex);
#define PERL_ARGS_ASSERT_WITH_QUEUED_ERRORS	\
	assert(ex)
STATIC void	S_xs_version_bootcheck(pTHX_ U32 items, U32 ax, const char *xs_p, STRLEN xs_len);
#define PERL_ARGS_ASSERT_XS_VERSION_BOOTCHECK	\
	assert(xs_p)
#  if defined(PERL_MEM_LOG) && !defined(PERL_MEM_LOG_NOIMPL)
STATIC void	S_mem_log_common(enum mem_log_type mlt, const UV n, const UV typesize, const char *type_name, const SV *sv, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
#define PERL_ARGS_ASSERT_MEM_LOG_COMMON	\
	assert(type_name); assert(filename); assert(funcname)
#  endif
#endif
#if defined(PERL_MEM_LOG)
PERL_CALLCONV Malloc_t	Perl_mem_log_alloc(const UV nconst, UV typesize, const char *type_name, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
#define PERL_ARGS_ASSERT_MEM_LOG_ALLOC	\
	assert(type_name); assert(filename); assert(funcname)
PERL_CALLCONV Malloc_t	Perl_mem_log_free(Malloc_t oldalloc, const char *filename, const int linenumber, const char *funcname);
#define PERL_ARGS_ASSERT_MEM_LOG_FREE	\
	assert(filename); assert(funcname)
PERL_CALLCONV Malloc_t	Perl_mem_log_realloc(const UV n, const UV typesize, const char *type_name, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
#define PERL_ARGS_ASSERT_MEM_LOG_REALLOC	\
	assert(type_name); assert(filename); assert(funcname)
#endif
#if defined(PERL_OP_PARENT)
PERL_CALLCONV OP*	Perl_op_parent(OP *o);
#define PERL_ARGS_ASSERT_OP_PARENT	\
	assert(o)
#endif
#if defined(PERL_USES_PL_PIDSTATUS) && defined(PERL_IN_UTIL_C)
STATIC void	S_pidgone(pTHX_ Pid_t pid, int status);
#endif
#if defined(UNLINK_ALL_VERSIONS)
PERL_CALLCONV I32	Perl_unlnk(pTHX_ const char* f);
#define PERL_ARGS_ASSERT_UNLNK	\
	assert(f)
#endif
#if defined(USE_C_BACKTRACE)
PERL_CALLCONV bool	Perl_dump_c_backtrace(pTHX_ PerlIO* fp, int max_depth, int skip);
#define PERL_ARGS_ASSERT_DUMP_C_BACKTRACE	\
	assert(fp)
/* PERL_CALLCONV void	free_c_backtrace(pTHX_ Perl_c_backtrace* bt); */
PERL_CALLCONV Perl_c_backtrace*	Perl_get_c_backtrace(pTHX_ int max_depth, int skip);
PERL_CALLCONV SV*	Perl_get_c_backtrace_dump(pTHX_ int max_depth, int skip);
#endif
#if defined(USE_DTRACE)
PERL_CALLCONV void	Perl_dtrace_probe_call(pTHX_ CV *cv, bool is_call);
#define PERL_ARGS_ASSERT_DTRACE_PROBE_CALL	\
	assert(cv)
PERL_CALLCONV void	Perl_dtrace_probe_load(pTHX_ const char *name, bool is_loading);
#define PERL_ARGS_ASSERT_DTRACE_PROBE_LOAD	\
	assert(name)
PERL_CALLCONV void	Perl_dtrace_probe_op(pTHX_ const OP *op);
#define PERL_ARGS_ASSERT_DTRACE_PROBE_OP	\
	assert(op)
PERL_CALLCONV void	Perl_dtrace_probe_phase(pTHX_ enum perl_phase phase);
#endif
#if defined(USE_ITHREADS)
PERL_CALLCONV PADOFFSET	Perl_alloccopstash(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_ALLOCCOPSTASH	\
	assert(hv)
PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, const PerlInterpreter* proto_perl)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ANY_DUP	\
	assert(proto_perl)

PERL_CALLCONV void	Perl_clone_params_del(CLONE_PARAMS *param);
#define PERL_ARGS_ASSERT_CLONE_PARAMS_DEL	\
	assert(param)
PERL_CALLCONV CLONE_PARAMS *	Perl_clone_params_new(PerlInterpreter *const from, PerlInterpreter *const to)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CLONE_PARAMS_NEW	\
	assert(from); assert(to)

PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max, CLONE_PARAMS* param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CX_DUP	\
	assert(param)

PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR *const dp, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DIRP_DUP	\
	assert(param)

PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO *const fp, const char type, CLONE_PARAMS *const param);
#define PERL_ARGS_ASSERT_FP_DUP	\
	assert(param)
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP *const gp, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GP_DUP	\
	assert(param)

PERL_CALLCONV HE*	Perl_he_dup(pTHX_ const HE* e, bool shared, CLONE_PARAMS* param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HE_DUP	\
	assert(param)

PERL_CALLCONV HEK*	Perl_hek_dup(pTHX_ HEK* e, CLONE_PARAMS* param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HEK_DUP	\
	assert(param)

PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC *mg, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MG_DUP	\
	assert(param)

PERL_CALLCONV struct mro_meta*	Perl_mro_meta_dup(pTHX_ struct mro_meta* smeta, CLONE_PARAMS* param);
#define PERL_ARGS_ASSERT_MRO_META_DUP	\
	assert(smeta); assert(param)
PERL_CALLCONV OP*	Perl_newPADOP(pTHX_ I32 type, I32 flags, SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPADOP	\
	assert(sv)

PERL_CALLCONV PADLIST *	Perl_padlist_dup(pTHX_ PADLIST *srcpad, CLONE_PARAMS *param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PADLIST_DUP	\
	assert(srcpad); assert(param)

PERL_CALLCONV PADNAME *	Perl_padname_dup(pTHX_ PADNAME *src, CLONE_PARAMS *param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PADNAME_DUP	\
	assert(src); assert(param)

PERL_CALLCONV PADNAMELIST *	Perl_padnamelist_dup(pTHX_ PADNAMELIST *srcpad, CLONE_PARAMS *param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PADNAMELIST_DUP	\
	assert(srcpad); assert(param)

PERL_CALLCONV yy_parser*	Perl_parser_dup(pTHX_ const yy_parser *const proto, CLONE_PARAMS *const param);
#define PERL_ARGS_ASSERT_PARSER_DUP	\
	assert(param)
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter *proto_perl, UV flags);
#define PERL_ARGS_ASSERT_PERL_CLONE	\
	assert(proto_perl)
PERL_CALLCONV void	Perl_re_dup_guts(pTHX_ const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS* param);
#define PERL_ARGS_ASSERT_RE_DUP_GUTS	\
	assert(sstr); assert(dstr); assert(param)
PERL_CALLCONV void*	Perl_regdupe_internal(pTHX_ REGEXP * const r, CLONE_PARAMS* param);
#define PERL_ARGS_ASSERT_REGDUPE_INTERNAL	\
	assert(r); assert(param)
PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV *const dstr, const SV *const sstr, CLONE_PARAMS *const param);
#define PERL_ARGS_ASSERT_RVPV_DUP	\
	assert(dstr); assert(sstr); assert(param)
PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si, CLONE_PARAMS* param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SI_DUP	\
	assert(param)

PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SS_DUP	\
	assert(proto_perl); assert(param)

PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DUP	\
	assert(param)

PERL_CALLCONV SV*	Perl_sv_dup_inc(pTHX_ const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DUP_INC	\
	assert(param)

#endif
#if defined(USE_LOCALE)     && (defined(PERL_IN_LOCALE_C) || defined (PERL_EXT_POSIX))
PERL_CALLCONV bool	Perl__is_cur_LC_category_utf8(pTHX_ int category);
#endif
#if defined(USE_LOCALE) && defined(PERL_IN_LOCALE_C)
STATIC char*	S_stdize_locale(pTHX_ char* locs);
#define PERL_ARGS_ASSERT_STDIZE_LOCALE	\
	assert(locs)
#endif
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETCOLLXFRM	\
	assert(sv); assert(mg)
PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen);
#define PERL_ARGS_ASSERT_MEM_COLLXFRM	\
	assert(s); assert(xlen)
/* PERL_CALLCONV char*	sv_collxfrm(pTHX_ SV *const sv, STRLEN *const nxp); */
PERL_CALLCONV char*	Perl_sv_collxfrm_flags(pTHX_ SV *const sv, STRLEN *const nxp, I32 const flags);
#define PERL_ARGS_ASSERT_SV_COLLXFRM_FLAGS	\
	assert(sv); assert(nxp)
#endif
#if defined(USE_PERLIO)
PERL_CALLCONV void	Perl_PerlIO_clearerr(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_close(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_eof(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_error(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_fileno(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_fill(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_flush(pTHX_ PerlIO *f);
PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_base(pTHX_ PerlIO *f);
PERL_CALLCONV SSize_t	Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *f)
			__attribute__warn_unused_result__;

PERL_CALLCONV SSize_t	Perl_PerlIO_get_cnt(pTHX_ PerlIO *f)
			__attribute__warn_unused_result__;

PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_ptr(pTHX_ PerlIO *f);
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *vbuf, Size_t count);
#define PERL_ARGS_ASSERT_PERLIO_READ	\
	assert(vbuf)
PERL_CALLCONV void	Perl_PerlIO_restore_errno(pTHX_ PerlIO *f);
PERL_CALLCONV void	Perl_PerlIO_save_errno(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_seek(pTHX_ PerlIO *f, Off_t offset, int whence);
PERL_CALLCONV void	Perl_PerlIO_set_cnt(pTHX_ PerlIO *f, SSize_t cnt);
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, SSize_t cnt);
PERL_CALLCONV void	Perl_PerlIO_setlinebuf(pTHX_ PerlIO *f);
PERL_CALLCONV PerlIO *	Perl_PerlIO_stderr(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV PerlIO *	Perl_PerlIO_stdin(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV PerlIO *	Perl_PerlIO_stdout(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV Off_t	Perl_PerlIO_tell(pTHX_ PerlIO *f);
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *vbuf, Size_t count);
#define PERL_ARGS_ASSERT_PERLIO_UNREAD	\
	assert(vbuf)
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *vbuf, Size_t count);
#define PERL_ARGS_ASSERT_PERLIO_WRITE	\
	assert(vbuf)
#endif
#if defined(USE_QUADMATH)
PERL_CALLCONV bool	Perl_quadmath_format_needed(const char* format);
#define PERL_ARGS_ASSERT_QUADMATH_FORMAT_NEEDED	\
	assert(format)
PERL_CALLCONV const char*	Perl_quadmath_format_single(const char* format);
#define PERL_ARGS_ASSERT_QUADMATH_FORMAT_SINGLE	\
	assert(format)
#endif
#if defined(WIN32)
PERL_CALLCONV char*	Perl_my_setlocale(pTHX_ int category, const char* locale)
			__attribute__pure__;

PERL_CALLCONV_NO_RET void	win32_croak_not_implemented(const char * fname)
			__attribute__noreturn__;
#define PERL_ARGS_ASSERT_WIN32_CROAK_NOT_IMPLEMENTED	\
	assert(fname)

#endif
#if defined(WIN32) || defined(__SYMBIAN32__) || defined(VMS)
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_ASPAWN	\
	assert(mark); assert(sp)
PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd);
#define PERL_ARGS_ASSERT_DO_SPAWN	\
	assert(cmd)
PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd);
#define PERL_ARGS_ASSERT_DO_SPAWN_NOWAIT	\
	assert(cmd)
#endif
#if defined(_MSC_VER)
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET	\
	assert(sv); assert(mg)
#endif
#ifdef PERL_CORE
#  include "pp_proto.h"
#endif
END_EXTERN_C

/* ex: set ro: */
@


1.19
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d662 3
@


1.18
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d25 1
a25 2
PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing)
			__attribute__nonnull__(pTHX_1);
a27 1

d38 1
a38 2
PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op)
			__attribute__nonnull__(pTHX_1);
d41 2
d44 1
d55 1
a55 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d59 10
d70 1
a70 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d75 1
a75 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d80 1
a80 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d84 11
a94 3
PERL_CALLCONV UV	Perl__to_uni_fold_flags(pTHX_ UV c, U8 *p, STRLEN *lenp, U8 flags)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d97 1
a97 4

PERL_CALLCONV UV	Perl__to_utf8_fold_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, U8 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d100 1
a100 4

PERL_CALLCONV UV	Perl__to_utf8_lower_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d103 1
a103 4

PERL_CALLCONV UV	Perl__to_utf8_title_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d106 1
a106 4

PERL_CALLCONV UV	Perl__to_utf8_upper_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d109 2
a110 3

PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ const char *const name, const STRLEN len, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d113 1
a113 4

PERL_CALLCONV SV*	Perl_amagic_call(pTHX_ SV* left, SV* right, int method, int dir)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d116 1
a116 3

PERL_CALLCONV SV *	Perl_amagic_deref_call(pTHX_ SV *ref, int method)
			__attribute__nonnull__(pTHX_1);
a118 1

d120 1
a120 8
PERL_STATIC_INLINE void	S_append_utf8_from_native_byte(const U8 byte, U8** dest)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_APPEND_UTF8_FROM_NATIVE_BYTE	\
	assert(dest)

PERL_CALLCONV I32	Perl_apply(pTHX_ I32 type, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d123 1
a123 5

PERL_CALLCONV void	Perl_apply_attrs_string(pTHX_ const char *stashpv, CV *cv, const char *attrstr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a125 1

d128 1
a128 2
PERL_CALLCONV SV**	Perl_av_arylen_p(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
d131 1
a131 3

PERL_CALLCONV void	Perl_av_clear(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
d134 1
a134 4

PERL_CALLCONV void	Perl_av_create_and_push(pTHX_ AV **const avp, SV *const val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d137 1
a137 4

PERL_CALLCONV SV**	Perl_av_create_and_unshift_one(pTHX_ AV **const avp, SV *const val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d140 1
a140 3

PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV *av, SSize_t key, I32 flags)
			__attribute__nonnull__(pTHX_1);
a142 1

d144 1
a144 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d148 1
a148 2
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV *av, SSize_t key)
			__attribute__nonnull__(pTHX_1);
d151 1
a151 5

PERL_CALLCONV void	Perl_av_extend_guts(pTHX_ AV *av, SSize_t key, SSize_t *maxp, SV ***allocp, SV ***arrayp)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
a153 1

d155 1
a155 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d159 1
a159 2
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV *av, SSize_t fill)
			__attribute__nonnull__(pTHX_1);
d162 1
a162 3

PERL_CALLCONV IV*	Perl_av_iter_p(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
a164 1

d166 1
a166 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d171 1
a171 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d175 1
a175 2
PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
d178 1
a178 4

PERL_CALLCONV void	Perl_av_push(pTHX_ AV *av, SV *val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d181 1
a181 3

PERL_CALLCONV void	Perl_av_reify(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
a183 1

d185 1
a185 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d189 1
a189 2
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV *av, SSize_t key, SV *val)
			__attribute__nonnull__(pTHX_1);
a191 1

d193 1
a193 8
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */

PERL_STATIC_INLINE SSize_t	S_av_top_index(pTHX_ AV *av)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_AV_TOP_INDEX	\
	assert(av)
d195 1
a195 2
PERL_CALLCONV void	Perl_av_undef(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
d198 1
a198 3

PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV *av, SSize_t num)
			__attribute__nonnull__(pTHX_1);
a200 1

d202 1
a202 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d209 1
a209 1
PERL_CALLCONV I32	Perl_block_gimme(pTHX)
d215 1
a215 2
PERL_CALLCONV void	Perl_blockhook_register(pTHX_ BHK *hk)
			__attribute__nonnull__(pTHX_1);
a217 1

d221 1
a221 3
PERL_CALLCONV int	Perl_bytes_cmp_utf8(pTHX_ const U8 *b, STRLEN blen, const U8 *u, STRLEN ulen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d224 1
a224 4

PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ const U8 *s, STRLEN *len, bool *is_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d227 1
a227 4

PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ const U8 *s, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d230 1
a230 4

PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
a232 1

d234 1
a234 2
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV *paramList)
			__attribute__nonnull__(pTHX_2);
d237 1
a237 3

PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags)
			__attribute__nonnull__(pTHX_1);
d240 1
a240 3

PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags)
			__attribute__nonnull__(pTHX_1);
d243 1
a243 3

PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, VOL I32 flags)
			__attribute__nonnull__(pTHX_1);
a245 1

d252 1
a252 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d256 1
a256 1
PERL_CALLCONV I32	Perl_cast_i32(pTHX_ NV f)
d259 1
a259 1
PERL_CALLCONV IV	Perl_cast_iv(pTHX_ NV f)
d262 1
a262 1
PERL_CALLCONV U32	Perl_cast_ulong(pTHX_ NV f)
d265 1
a265 1
PERL_CALLCONV UV	Perl_cast_uv(pTHX_ NV f)
d268 1
a268 2
PERL_CALLCONV bool	Perl_check_utf8_print(pTHX_ const U8 *s, const STRLEN len)
			__attribute__nonnull__(pTHX_1);
a270 1

d272 1
a272 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d277 1
a277 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d282 1
a282 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d287 1
a287 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d292 1
a292 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d297 1
a297 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d302 1
a302 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d307 1
a307 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d311 1
a311 4
PERL_CALLCONV OP*	Perl_ck_entersub_args_core(pTHX_ OP *entersubop, GV *namegv, SV *protosv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d314 1
a314 3

PERL_CALLCONV OP*	Perl_ck_entersub_args_list(pTHX_ OP *entersubop)
			__attribute__nonnull__(pTHX_1);
d317 1
a317 5

PERL_CALLCONV OP*	Perl_ck_entersub_args_proto(pTHX_ OP *entersubop, GV *namegv, SV *protosv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d320 1
a320 5

PERL_CALLCONV OP*	Perl_ck_entersub_args_proto_or_list(pTHX_ OP *entersubop, GV *namegv, SV *protosv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a322 1

d324 1
a324 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d329 1
a329 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d334 1
a334 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d339 1
a339 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d344 1
a344 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d349 1
a349 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d354 1
a354 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d359 1
a359 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d364 1
a364 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d369 1
a369 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d374 1
a374 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d379 1
a379 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d384 1
a384 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d389 1
a389 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d394 1
a394 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d399 1
a399 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d404 1
a404 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d408 5
d414 1
a414 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d418 5
d424 1
a424 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d429 1
a429 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d434 1
a434 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d439 1
a439 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d444 1
a444 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d449 1
a449 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d454 1
a454 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d459 1
a459 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d464 1
a464 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d469 1
a469 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d474 1
a474 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d479 1
a479 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d483 5
d489 1
a489 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d494 1
a494 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d499 1
a499 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d504 1
a504 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d509 1
a509 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d514 1
a514 2
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_2);
d519 1
a519 2
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_2);
d525 4
a528 2
PERL_CALLCONV const COP*	Perl_closest_cop(pTHX_ const COP *cop, const OP *o, const OP *curop, bool opnext)
			__attribute__nonnull__(pTHX_1);
d531 1
a531 6

PERL_CALLCONV OP*	Perl_convert(pTHX_ I32 optype, I32 flags, OP* o)
			__attribute__warn_unused_result__;

PERL_CALLCONV const char *	Perl_cop_fetch_label(pTHX_ COP *const cop, STRLEN *len, U32 *flags)
			__attribute__nonnull__(pTHX_1);
d534 1
a534 4

PERL_CALLCONV void	Perl_cop_store_label(pTHX_ COP *const cop, const char *label, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d537 1
a537 3

PERL_CALLCONV SV *	Perl_core_prototype(pTHX_ SV *sv, const char *name, const int code, int * const opnum)
			__attribute__nonnull__(pTHX_2);
d540 1
a540 3

PERL_CALLCONV OP *	Perl_coresub_op(pTHX_ SV *const coreargssv, const int code, const int opnum)
			__attribute__nonnull__(pTHX_1);
d543 1
a543 2

PERL_CALLCONV PERL_CONTEXT*	Perl_create_eval_scope(pTHX_ U32 flags);
d561 1
a561 2
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1);
d566 1
a566 3
			__attribute__noreturn__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d572 1
a572 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d577 1
a577 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d582 1
a582 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d586 1
a586 3
PERL_CALLCONV void	Perl_custom_op_register(pTHX_ Perl_ppaddr_t ppaddr, const XOP *xop)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a588 1

d590 1
a590 2
			__attribute__pure__
			__attribute__nonnull__(pTHX_1); */
d592 1
a592 2
PERL_CALLCONV void	Perl_cv_ckproto_len_flags(pTHX_ const CV* cv, const GV* gv, const char* p, const STRLEN len, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d595 1
a595 3

PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto)
			__attribute__nonnull__(pTHX_1);
d598 1
a598 4

PERL_CALLCONV CV*	Perl_cv_clone_into(pTHX_ CV* proto, CV *target)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d601 1
a601 2

PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ const CV *const cv)
d604 1
a604 1
PERL_CALLCONV SV*	Perl_cv_const_sv_or_av(pTHX_ const CV *const cv)
d607 2
a608 9
PERL_CALLCONV void	Perl_cv_forget_slab(pTHX_ CV *cv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CV_FORGET_SLAB	\
	assert(cv)

PERL_CALLCONV void	Perl_cv_get_call_checker(pTHX_ CV *cv, Perl_call_checker *ckfun_p, SV **ckobj_p)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d611 4
a614 5

PERL_CALLCONV void	Perl_cv_set_call_checker(pTHX_ CV *cv, Perl_call_checker ckfun, SV *ckobj)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d617 4
a620 3

PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv)
			__attribute__nonnull__(pTHX_1);
d623 7
a629 3

PERL_CALLCONV void	Perl_cvgv_set(pTHX_ CV* cv, GV* gv)
			__attribute__nonnull__(pTHX_1);
d632 1
a632 3

PERL_CALLCONV void	Perl_cvstash_set(pTHX_ CV* cv, HV* stash)
			__attribute__nonnull__(pTHX_1);
d635 1
a635 3

PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cx)
			__attribute__nonnull__(pTHX_1);
a637 1

d642 1
a642 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
d647 1
a647 2
PERL_CALLCONV I32	Perl_debop(pTHX_ const OP* o)
			__attribute__nonnull__(pTHX_1);
a649 1

d654 1
a654 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d659 1
a659 6
PERL_CALLCONV char*	Perl_delimcpy(char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(6);
a661 1

d663 2
a664 1
PERL_CALLCONV OP*	Perl_die(pTHX_ const char* pat, ...)
d667 2
a668 2
PERL_CALLCONV OP*	Perl_die_sv(pTHX_ SV *baseex)
			__attribute__nonnull__(pTHX_1);
d673 1
a673 2
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1);
d677 1
a677 3
/* PERL_CALLCONV bool	Perl_do_aexec(pTHX_ SV* really, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */
d680 1
a680 4

PERL_CALLCONV bool	Perl_do_aexec5(pTHX_ SV* really, SV** mark, SV** sp, int fd, int do_report)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d683 1
a683 3

PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int mode)
			__attribute__nonnull__(pTHX_1);
a685 1

d687 1
a687 2
PERL_CALLCONV void	Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full)
			__attribute__nonnull__(pTHX_2);
d690 1
a690 3

PERL_CALLCONV bool	Perl_do_eof(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
a692 1

d694 1
a694 3
PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d697 1
a697 4

PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d700 1
a700 4

PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, const char *name, HV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d703 1
a703 6

PERL_CALLCONV void	Perl_do_join(pTHX_ SV *sv, SV *delim, SV **mark, SV **sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d706 1
a706 4

PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d708 1
a708 2
	assert(file); assert(mg)

d710 1
a710 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d714 1
a714 2
PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, const OP *o)
			__attribute__nonnull__(pTHX_2);
d717 1
a717 4

/* PERL_CALLCONV bool	Perl_do_open(pTHX_ GV* gv, const char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d720 1
a720 4

PERL_CALLCONV bool	Perl_do_open6(pTHX_ GV *gv, const char *oname, STRLEN len, PerlIO *supplied_fp, SV **svp, U32 num)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d723 1
a723 5

PERL_CALLCONV bool	Perl_do_open9(pTHX_ GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_8);
d726 1
a726 4

PERL_CALLCONV bool	Perl_do_open_raw(pTHX_ GV *gv, const char *oname, STRLEN len, int rawmode, int rawperm)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d729 1
a729 4

PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, const char *oname, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d732 1
a732 3

PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, const PMOP *pm)
			__attribute__nonnull__(pTHX_2);
d735 1
a735 3

PERL_CALLCONV bool	Perl_do_print(pTHX_ SV* sv, PerlIO* fp)
			__attribute__nonnull__(pTHX_2);
a737 1

d742 1
a742 3
PERL_CALLCONV void	Perl_do_sprintf(pTHX_ SV* sv, I32 len, SV** sarg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d745 1
a745 3

PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim)
			__attribute__nonnull__(pTHX_2);
d748 1
a748 3

PERL_CALLCONV Off_t	Perl_do_sysseek(pTHX_ GV* gv, Off_t pos, int whence)
			__attribute__nonnull__(pTHX_1);
a750 1

d752 1
a752 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d756 1
a756 2
PERL_CALLCONV I32	Perl_do_trans(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d759 1
a759 3

PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, SSize_t offset, int size)
			__attribute__nonnull__(pTHX_1);
d762 1
a762 3

PERL_CALLCONV void	Perl_do_vecset(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d765 1
a765 5

PERL_CALLCONV void	Perl_do_vop(pTHX_ I32 optype, SV* sv, SV* left, SV* right)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d768 1
a768 3

PERL_CALLCONV OP*	Perl_dofile(pTHX_ OP* term, I32 force_builtin)
			__attribute__nonnull__(pTHX_1);
a770 1

d774 1
a774 2
PERL_CALLCONV OP *	Perl_doref(pTHX_ OP *o, I32 type, bool set_op_ref)
			__attribute__nonnull__(pTHX_1);
a776 1

d778 1
a778 1
PERL_CALLCONV I32	Perl_dowantarray(pTHX)
d781 1
a781 2
PERL_CALLCONV void	Perl_drand48_init_r(perl_drand48_t *random_state, U32 seed)
			__attribute__nonnull__(1);
d784 1
a784 3

PERL_CALLCONV double	Perl_drand48_r(perl_drand48_t *random_state)
			__attribute__nonnull__(1);
a786 1

d790 1
a790 2
PERL_CALLCONV void	Perl_dump_form(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
a792 1

d794 1
a794 3
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d798 1
a798 2
PERL_CALLCONV void	Perl_dump_packsubs(pTHX_ const HV* stash)
			__attribute__nonnull__(pTHX_1);
d801 1
a801 3

PERL_CALLCONV void	Perl_dump_packsubs_perl(pTHX_ const HV* stash, bool justperl)
			__attribute__nonnull__(pTHX_1);
d804 1
a804 3

PERL_CALLCONV void	Perl_dump_sub(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
d807 1
a807 3

PERL_CALLCONV void	Perl_dump_sub_perl(pTHX_ const GV* gv, bool justperl)
			__attribute__nonnull__(pTHX_1);
d810 1
a810 4

PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d813 1
a813 4

PERL_CALLCONV void	Perl_emulate_cop_io(pTHX_ const COP *const c, SV *const sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d816 1
a816 3

PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error)
			__attribute__nonnull__(pTHX_1);
d819 1
a819 3

PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);
d822 1
a822 3

PERL_CALLCONV void	Perl_fbm_compile(pTHX_ SV* sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
a824 1

d826 1
a826 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d830 1
a830 2
PERL_CALLCONV bool	Perl_feature_is_enabled(pTHX_ const char *const name, STRLEN namelen)
			__attribute__nonnull__(pTHX_1);
a832 1

d834 1
a834 2
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp)
			__attribute__nonnull__(pTHX_1);
a836 1

d838 1
a838 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d842 1
a842 2
PERL_CALLCONV void	Perl_finalize_optree(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
a844 1

a852 5
PERL_CALLCONV SV*	Perl_find_rundefsv2(pTHX_ CV *cv, U32 seq)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FIND_RUNDEFSV2	\
	assert(cv)

d856 1
a856 2
PERL_CALLCONV char*	Perl_find_script(pTHX_ const char *scriptname, bool dosearch, const char *const *const search_ext, I32 flags)
			__attribute__nonnull__(pTHX_1);
a858 1

d860 1
a860 3
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d865 1
a865 3
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d870 1
a870 3
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d874 2
a875 7
/* PERL_CALLCONV I32	foldEQ_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_5); */

PERL_CALLCONV I32	Perl_foldEQ_utf8_flags(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_5);
a877 1

d879 1
a879 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
d885 1
a885 2
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char *name, I32 flags)
			__attribute__nonnull__(pTHX_1);
a887 1

d891 1
a891 2
PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 flags)
			__attribute__nonnull__(pTHX_1);
d894 1
a894 3

PERL_CALLCONV CV*	Perl_get_cvn_flags(pTHX_ const char* name, STRLEN len, I32 flags)
			__attribute__nonnull__(pTHX_1);
d897 1
a897 3

PERL_CALLCONV void	Perl_get_db_sub(pTHX_ SV **svp, CV *cv)
			__attribute__nonnull__(pTHX_2);
d900 1
a900 3

PERL_CALLCONV void	Perl_get_hash_seed(pTHX_ unsigned char * const seed_buffer)
			__attribute__nonnull__(pTHX_1);
d903 1
a903 3

PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char *name, I32 flags)
			__attribute__nonnull__(pTHX_1);
a905 1

d927 1
a927 2
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char *name, I32 flags)
			__attribute__nonnull__(pTHX_1);
a929 1

d933 1
a933 2
PERL_CALLCONV int	Perl_getcwd_sv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
a935 1

d938 4
a941 4
PERL_CALLCONV UV	Perl_grok_bin(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d944 1
a944 5

PERL_CALLCONV UV	Perl_grok_hex(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d947 4
a950 3

PERL_CALLCONV int	Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep)
			__attribute__nonnull__(pTHX_1);
d953 3
a955 1

d957 1
a957 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d961 1
a961 4
PERL_CALLCONV UV	Perl_grok_oct(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a963 1

d969 1
a969 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2); */
d972 1
a972 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d977 1
a977 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d982 1
a982 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d986 1
a986 2
PERL_CALLCONV void	Perl_gv_check(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
a988 1

d990 1
a990 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d994 2
a995 8
PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_DUMP	\
	assert(gv)

PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, const GV* gv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d998 1
a998 4

/* PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, const GV* gv, const char* prefix)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d1001 1
a1001 4

PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1004 1
a1004 3

PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name)
			__attribute__nonnull__(pTHX_1);
d1007 1
a1007 3

PERL_CALLCONV GV*	Perl_gv_fetchfile_flags(pTHX_ const char *const name, const STRLEN len, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d1010 3
a1012 9

/* PERL_CALLCONV GV*	gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level)
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV GV*	gv_fetchmeth_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level)
			__attribute__nonnull__(pTHX_2); */

PERL_CALLCONV GV*	Perl_gv_fetchmeth_pv(pTHX_ HV* stash, const char* name, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
d1015 1
a1015 3

PERL_CALLCONV GV*	Perl_gv_fetchmeth_pv_autoload(pTHX_ HV* stash, const char* name, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
d1018 1
a1018 3

PERL_CALLCONV GV*	Perl_gv_fetchmeth_pvn(pTHX_ HV* stash, const char* name, STRLEN len, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
d1021 1
a1021 3

PERL_CALLCONV GV*	Perl_gv_fetchmeth_pvn_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
d1024 1
a1024 3

PERL_CALLCONV GV*	Perl_gv_fetchmeth_sv(pTHX_ HV* stash, SV* namesv, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
d1027 1
a1027 3

PERL_CALLCONV GV*	Perl_gv_fetchmeth_sv_autoload(pTHX_ HV* stash, SV* namesv, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
d1030 1
a1030 4

/* PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d1033 1
a1033 4

PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1036 1
a1036 4

PERL_CALLCONV GV*	Perl_gv_fetchmethod_pv_flags(pTHX_ HV* stash, const char* name, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1039 1
a1039 4

PERL_CALLCONV GV*	Perl_gv_fetchmethod_pvn_flags(pTHX_ HV* stash, const char* name, const STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1042 1
a1042 4

PERL_CALLCONV GV*	Perl_gv_fetchmethod_sv_flags(pTHX_ HV* stash, SV* namesv, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1045 1
a1045 3

PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 add, const svtype sv_type)
			__attribute__nonnull__(pTHX_1);
d1048 1
a1048 3

PERL_CALLCONV GV*	Perl_gv_fetchpvn_flags(pTHX_ const char* name, STRLEN len, I32 flags, const svtype sv_type)
			__attribute__nonnull__(pTHX_1);
d1051 1
a1051 3

PERL_CALLCONV GV*	Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, const svtype sv_type)
			__attribute__nonnull__(pTHX_1);
d1054 1
a1054 4

PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, const GV* gv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1057 1
a1057 4

/* PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, const GV* gv, const char* prefix)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d1060 1
a1060 4

PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a1062 1

d1066 2
a1067 7
/* PERL_CALLCONV void	gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV void	Perl_gv_init_pv(pTHX_ GV* gv, HV* stash, const char* name, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d1070 1
a1070 4

PERL_CALLCONV void	Perl_gv_init_pvn(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d1073 1
a1073 4

PERL_CALLCONV void	Perl_gv_init_sv(pTHX_ GV* gv, HV* stash, SV* namesv, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d1076 1
a1076 4

PERL_CALLCONV void	Perl_gv_name_set(pTHX_ GV* gv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1079 1
a1079 3

PERL_CALLCONV GV *	Perl_gv_override(pTHX_ const char * const name, const STRLEN len)
			__attribute__nonnull__(pTHX_1);
d1082 4
a1085 3

PERL_CALLCONV HV*	Perl_gv_stashpv(pTHX_ const char* name, I32 flags)
			__attribute__nonnull__(pTHX_1);
d1088 1
a1088 3

PERL_CALLCONV HV*	Perl_gv_stashpvn(pTHX_ const char* name, U32 namelen, I32 flags)
			__attribute__nonnull__(pTHX_1);
d1091 1
a1091 3

PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);
d1094 1
a1094 3

PERL_CALLCONV void	Perl_gv_try_downgrade(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
d1097 1
a1097 3

PERL_CALLCONV AV**	Perl_hv_backreferences_p(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
a1099 1

d1101 1
a1101 2
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
a1103 1

d1105 1
a1105 2
PERL_CALLCONV void*	Perl_hv_common_key_len(pTHX_ HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash)
			__attribute__nonnull__(pTHX_2);
a1107 1

d1111 1
a1111 2
PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV *hv, HE *entry)
			__attribute__nonnull__(pTHX_1);
d1114 1
a1114 3

/* PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV *hv, const char *key, I32 klen, I32 flags)
			__attribute__nonnull__(pTHX_2); */
d1117 1
a1117 3

/* PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV *hv, SV *keysv, I32 flags, U32 hash)
			__attribute__nonnull__(pTHX_2); */
a1119 1

d1121 1
a1121 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1125 1
a1125 2
PERL_CALLCONV void	Perl_hv_eiter_set(pTHX_ HV *hv, HE *eiter)
			__attribute__nonnull__(pTHX_1);
d1128 1
a1128 4

PERL_CALLCONV void	Perl_hv_ename_add(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1131 1
a1131 4

PERL_CALLCONV void	Perl_hv_ename_delete(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a1133 1

d1135 1
a1135 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2); */
d1140 1
a1140 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2); */
d1144 1
a1144 2
/* PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV *hv, const char *key, I32 klen, I32 lval)
			__attribute__nonnull__(pTHX_2); */
d1147 1
a1147 3

/* PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV *hv, SV *keysv, I32 lval, U32 hash)
			__attribute__nonnull__(pTHX_2); */
d1150 1
a1150 3

PERL_CALLCONV STRLEN	Perl_hv_fill(pTHX_ HV *const hv)
			__attribute__nonnull__(pTHX_1);
d1153 1
a1153 3

PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV *hv, HE *entry)
			__attribute__nonnull__(pTHX_1);
d1156 1
a1156 3

PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
a1158 1

d1160 1
a1160 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1165 1
a1165 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1170 1
a1170 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d1175 1
a1175 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1180 1
a1180 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1185 1
a1185 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1189 1
a1189 2
PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV *hv, IV newmax)
			__attribute__nonnull__(pTHX_1);
d1192 1
a1192 3

/* PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV *hv, GV *gv, int how)
			__attribute__nonnull__(pTHX_1); */
d1195 1
a1195 3

PERL_CALLCONV void	Perl_hv_name_set(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1);
a1197 1

d1199 1
a1199 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1204 1
a1204 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1208 1
a1208 2
PERL_CALLCONV void	Perl_hv_placeholders_set(pTHX_ HV *hv, I32 ph)
			__attribute__nonnull__(pTHX_1);
d1211 1
a1211 3

PERL_CALLCONV void	Perl_hv_rand_set(pTHX_ HV *hv, U32 new_xhv_rand)
			__attribute__nonnull__(pTHX_1);
a1213 1

d1215 1
a1215 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1219 1
a1219 2
PERL_CALLCONV void	Perl_hv_riter_set(pTHX_ HV *hv, I32 riter)
			__attribute__nonnull__(pTHX_1);
a1221 1

d1223 1
a1223 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1232 4
a1235 14
/* PERL_CALLCONV I32	ibcmp(pTHX_ const char* a, const char* b, I32 len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV I32	ibcmp_locale(pTHX_ const char* a, const char* b, I32 len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV I32	ibcmp_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_5); */

PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int argc, char **argv)
			__attribute__nonnull__(pTHX_2);
a1237 1

d1244 1
a1244 2
PERL_CALLCONV void	Perl_init_tm(pTHX_ struct tm *ptm)
			__attribute__nonnull__(pTHX_1);
a1246 1

d1249 1
a1249 3
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d1257 1
a1257 2
PERL_CALLCONV bool	Perl_io_close(pTHX_ IO* io, bool not_implicit)
			__attribute__nonnull__(pTHX_1);
d1260 1
a1260 2

PERL_STATIC_INLINE bool	S_isALNUM_lazy(pTHX_ const char* p)
d1263 1
a1263 2
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
d1267 1
a1267 1
PERL_STATIC_INLINE bool	S_isIDFIRST_lazy(pTHX_ const char* p)
d1270 1
a1270 2
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
d1274 6
a1279 3
PERL_CALLCONV bool	Perl_is_ascii_string(const U8 *s, STRLEN len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_ASCII_STRING	\
a1284 8
PERL_STATIC_INLINE bool	S_is_safe_syscall(pTHX_ const char *pv, STRLEN len, const char *what, const char *op_name)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_IS_SAFE_SYSCALL	\
	assert(pv); assert(what); assert(op_name)

d1437 1
a1437 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1443 1
a1443 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1449 1
a1449 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1455 1
a1455 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1461 1
a1461 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1466 1
a1466 2
			__attribute__deprecated__
			__attribute__nonnull__(1);
d1470 1
a1470 3
PERL_CALLCONV STRLEN	Perl_is_utf8_char_buf(const U8 *buf, const U8 *buf_end)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
a1472 1

d1475 1
a1475 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1481 1
a1481 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1487 1
a1487 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1493 1
a1493 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1499 1
a1499 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1505 1
a1505 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1511 1
a1511 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1517 1
a1517 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1523 1
a1523 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1529 1
a1529 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1535 1
a1535 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1541 1
a1541 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1547 1
a1547 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1551 1
a1551 2
PERL_CALLCONV bool	Perl_is_utf8_string(const U8 *s, STRLEN len)
			__attribute__nonnull__(1);
d1554 1
a1554 3

/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **ep)
			__attribute__nonnull__(1); */
d1557 1
a1557 3

PERL_CALLCONV bool	Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
			__attribute__nonnull__(1);
a1559 1

d1562 1
a1562 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1568 1
a1568 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1574 1
a1574 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1580 1
a1580 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1584 5
a1588 2
PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
a1590 1

d1592 1
a1592 2
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
d1596 1
a1596 3
PERL_CALLCONV int	Perl_keyword_plugin_standard(pTHX_ char* keyword_ptr, STRLEN keyword_len, OP** op_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d1599 3
a1601 1

d1604 1
a1604 2
PERL_CALLCONV void	Perl_lex_discard_to(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
a1606 1

d1611 1
a1611 2
PERL_CALLCONV void	Perl_lex_read_to(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
a1613 1

d1616 1
a1616 2
PERL_CALLCONV void	Perl_lex_stuff_pv(pTHX_ const char* pv, U32 flags)
			__attribute__nonnull__(pTHX_1);
d1619 1
a1619 3

PERL_CALLCONV void	Perl_lex_stuff_pvn(pTHX_ const char* pv, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
d1622 1
a1622 3

PERL_CALLCONV void	Perl_lex_stuff_sv(pTHX_ SV* sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
d1625 1
a1625 3

PERL_CALLCONV void	Perl_lex_unstuff(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
a1627 1

d1629 1
a1629 2
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...)
			__attribute__nonnull__(pTHX_2);
d1632 1
a1632 3

PERL_CALLCONV OP*	Perl_localize(pTHX_ OP *o, I32 lex)
			__attribute__nonnull__(pTHX_1);
a1634 1

d1636 1
a1636 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1640 1
a1640 3
PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1643 1
a1643 4

PERL_CALLCONV int	Perl_magic_cleararylen_p(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1646 1
a1646 4

PERL_CALLCONV int	Perl_magic_clearenv(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1649 1
a1649 4

PERL_CALLCONV int	Perl_magic_clearhint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1652 1
a1652 4

PERL_CALLCONV int	Perl_magic_clearhints(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1655 1
a1655 3

PERL_CALLCONV int	Perl_magic_clearisa(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_2);
d1658 1
a1658 4

PERL_CALLCONV int	Perl_magic_clearpack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1661 1
a1661 4

PERL_CALLCONV int	Perl_magic_clearsig(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1664 1
a1664 5

PERL_CALLCONV int	Perl_magic_copycallchecker(pTHX_ SV* sv, MAGIC *mg, SV *nsv, const char *name, I32 namlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a1666 1

d1668 1
a1668 3
PERL_CALLCONV int	Perl_magic_existspack(pTHX_ SV* sv, const MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1671 1
a1671 4

PERL_CALLCONV int	Perl_magic_freearylen_p(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1674 1
a1674 4

PERL_CALLCONV int	Perl_magic_freeovrld(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1677 1
a1677 4

PERL_CALLCONV int	Perl_magic_get(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1680 1
a1680 4

PERL_CALLCONV int	Perl_magic_getarylen(pTHX_ SV* sv, const MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1683 4
a1686 4

PERL_CALLCONV int	Perl_magic_getdefelem(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1689 1
a1689 4

PERL_CALLCONV int	Perl_magic_getnkeys(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1692 1
a1692 4

PERL_CALLCONV int	Perl_magic_getpack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1695 1
a1695 4

PERL_CALLCONV int	Perl_magic_getpos(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1698 1
a1698 4

PERL_CALLCONV int	Perl_magic_getsig(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1701 1
a1701 4

PERL_CALLCONV int	Perl_magic_getsubstr(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1704 1
a1704 4

PERL_CALLCONV int	Perl_magic_gettaint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1707 1
a1707 4

PERL_CALLCONV int	Perl_magic_getuvar(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1710 1
a1710 4

PERL_CALLCONV int	Perl_magic_getvec(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1713 1
a1713 4

PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1716 1
a1716 5

PERL_CALLCONV SV*	Perl_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, U32 argc, ...)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1719 1
a1719 5

PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV *sv, MAGIC *mg, SV *key)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1722 1
a1722 4

PERL_CALLCONV U32	Perl_magic_regdata_cnt(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1725 1
a1725 4

PERL_CALLCONV int	Perl_magic_regdatum_get(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1728 1
a1728 4

PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV *hv, MAGIC *mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1731 1
a1731 4

PERL_CALLCONV int	Perl_magic_set(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1734 1
a1734 4

PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1737 1
a1737 4

PERL_CALLCONV int	Perl_magic_setarylen(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1740 1
a1740 4

PERL_CALLCONV int	Perl_magic_setdbline(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1743 4
a1746 4

PERL_CALLCONV int	Perl_magic_setdefelem(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1749 1
a1749 4

PERL_CALLCONV int	Perl_magic_setenv(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1752 1
a1752 4

PERL_CALLCONV int	Perl_magic_sethint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1755 1
a1755 4

PERL_CALLCONV int	Perl_magic_setisa(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1758 4
a1761 4

PERL_CALLCONV int	Perl_magic_setmglob(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1764 1
a1764 4

PERL_CALLCONV int	Perl_magic_setnkeys(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1767 1
a1767 4

PERL_CALLCONV int	Perl_magic_setpack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1770 1
a1770 4

PERL_CALLCONV int	Perl_magic_setpos(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1773 1
a1773 4

PERL_CALLCONV int	Perl_magic_setregexp(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1776 1
a1776 3

PERL_CALLCONV int	Perl_magic_setsig(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_2);
d1779 1
a1779 4

PERL_CALLCONV int	Perl_magic_setsubstr(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1782 1
a1782 4

PERL_CALLCONV int	Perl_magic_settaint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1785 1
a1785 4

PERL_CALLCONV int	Perl_magic_setutf8(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1788 1
a1788 4

PERL_CALLCONV int	Perl_magic_setuvar(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1791 1
a1791 4

PERL_CALLCONV int	Perl_magic_setvec(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1794 1
a1794 4

PERL_CALLCONV U32	Perl_magic_sizepack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1797 1
a1797 4

PERL_CALLCONV int	Perl_magic_wipepack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a1799 1

d1804 1
a1804 1
PERL_CALLCONV void	Perl_markstack_grow(pTHX);
d1806 1
a1806 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
d1810 1
a1810 2
PERL_CALLCONV SV*	Perl_mess_sv(pTHX_ SV* basemsg, bool consume)
			__attribute__nonnull__(pTHX_1);
a1812 1

d1814 1
a1814 2
PERL_CALLCONV int	Perl_mg_clear(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d1817 1
a1817 4

PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV *sv, SV *nsv, const char *key, I32 klen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1820 1
a1820 2

PERL_CALLCONV MAGIC*	Perl_mg_find(pTHX_ const SV* sv, int type)
d1824 1
a1824 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1828 1
a1828 1
PERL_CALLCONV MAGIC*	Perl_mg_findext(pTHX_ const SV* sv, int type, const MGVTBL *vtbl)
d1831 1
a1831 2
PERL_CALLCONV int	Perl_mg_free(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d1834 1
a1834 3

PERL_CALLCONV void	Perl_mg_free_type(pTHX_ SV* sv, int how)
			__attribute__nonnull__(pTHX_1);
d1837 1
a1837 3

PERL_CALLCONV int	Perl_mg_get(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
a1839 1

d1841 1
a1841 2
			__attribute__deprecated__
			__attribute__nonnull__(pTHX_1);
d1845 1
a1845 3
PERL_CALLCONV void	Perl_mg_localize(pTHX_ SV* sv, SV* nsv, bool setmagic)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1848 1
a1848 3

PERL_CALLCONV void	Perl_mg_magical(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d1851 1
a1851 3

PERL_CALLCONV int	Perl_mg_set(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d1854 1
a1854 3

PERL_CALLCONV I32	Perl_mg_size(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d1857 1
a1857 3

PERL_CALLCONV void	Perl_mini_mktime(pTHX_ struct tm *ptm)
			__attribute__nonnull__(pTHX_1);
a1859 1

d1862 1
a1862 2
PERL_CALLCONV const char*	Perl_moreswitches(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);
d1865 1
a1865 3

PERL_CALLCONV const struct mro_alg *	Perl_mro_get_from_name(pTHX_ SV *name)
			__attribute__nonnull__(pTHX_1);
d1868 1
a1868 3

PERL_CALLCONV AV*	Perl_mro_get_linear_isa(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
d1871 1
a1871 4

PERL_CALLCONV SV*	Perl_mro_get_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1874 1
a1874 3

PERL_CALLCONV void	Perl_mro_isa_changed_in(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
d1877 1
a1877 3

PERL_CALLCONV struct mro_meta*	Perl_mro_meta_init(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
d1880 1
a1880 3

PERL_CALLCONV void	Perl_mro_method_changed_in(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
d1883 1
a1883 3

PERL_CALLCONV void	Perl_mro_package_moved(pTHX_ HV * const stash, HV * const oldstash, const GV * const gv, U32 flags)
			__attribute__nonnull__(pTHX_3);
d1886 1
a1886 3

PERL_CALLCONV void	Perl_mro_register(pTHX_ const struct mro_alg *mro)
			__attribute__nonnull__(pTHX_1);
d1889 1
a1889 4

PERL_CALLCONV void	Perl_mro_set_mro(pTHX_ struct mro_meta *const meta, SV *const name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1892 1
a1892 5

PERL_CALLCONV SV*	Perl_mro_set_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which, SV *const data)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1895 4
a1898 3

PERL_CALLCONV NV	Perl_my_atof(pTHX_ const char *s)
			__attribute__nonnull__(pTHX_1);
d1901 1
a1901 4

PERL_CALLCONV char*	Perl_my_atof2(pTHX_ const char *s, NV* value)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1904 1
a1904 3

PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs)
			__attribute__nonnull__(pTHX_1);
a1906 1

d1908 1
a1908 1
PERL_CALLCONV int	Perl_my_dirfd(pTHX_ DIR* dir);
d1919 1
a1919 3
PERL_CALLCONV PerlIO*	Perl_my_popen_list(pTHX_ const char* mode, int n, SV ** args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
a1921 1

d1924 1
a1924 3
			__attribute__format__(__printf__,3,4)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
d1931 1
d1933 1
a1933 2
			__attribute__format__(__strftime__,pTHX_1,0)
			__attribute__nonnull__(pTHX_1);
d1938 1
a1938 3
PERL_CALLCONV int	Perl_my_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
a1940 1

d1962 1
a1962 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1972 1
a1972 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d1982 4
d1988 1
a1988 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d1994 1
a1994 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1998 1
a1998 2
PERL_CALLCONV GP *	Perl_newGP(pTHX_ GV *const gv)
			__attribute__nonnull__(pTHX_1);
a2000 1

d2003 1
a2003 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d2011 1
a2011 3
/* PERL_CALLCONV GV*	newGVgen(pTHX_ const char* pack)
			__attribute__nonnull__(pTHX_1); */

d2014 1
a2014 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2023 1
a2023 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2041 1
a2041 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d2047 1
a2047 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d2055 13
a2067 2
PERL_CALLCONV CV *	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__nonnull__(pTHX_2);
a2069 1

d2078 16
d2098 1
a2098 2
PERL_CALLCONV void	Perl_newPROG(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
a2100 1

d2107 1
a2107 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d2113 1
a2113 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2117 1
a2117 1
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *const sv)
d2119 1
a2119 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2121 1
a2121 1
	assert(sv)
d2131 1
a2131 2
PERL_CALLCONV CV*	Perl_newSTUB(pTHX_ GV *gv, bool fake)
			__attribute__nonnull__(pTHX_1);
a2133 1

d2141 1
a2141 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d2147 1
a2147 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2157 1
a2157 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2184 1
a2184 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
d2200 1
a2200 2
PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV *const rv, const char *const classname)
			__attribute__nonnull__(pTHX_1);
a2202 1

d2215 4
d2221 1
a2221 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d2229 1
a2229 3
PERL_CALLCONV CV*	Perl_newXS(pTHX_ const char *name, XSUBADDR_t subaddr, const char *filename)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d2232 4
a2235 4

PERL_CALLCONV CV *	Perl_newXS_flags(pTHX_ const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d2238 1
a2238 4

PERL_CALLCONV CV *	Perl_newXS_len_flags(pTHX_ const char *name, STRLEN len, XSUBADDR_t subaddr, const char *const filename, const char *const proto, SV **const_svp, U32 flags)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d2240 1
a2240 2
	assert(subaddr); assert(filename)

d2242 1
a2242 2
PERL_CALLCONV void	Perl_new_ctype(pTHX_ const char* newctype)
			__attribute__nonnull__(pTHX_1);
a2244 1

d2250 1
a2250 2
PERL_CALLCONV SV*	Perl_new_version(pTHX_ SV *ver)
			__attribute__nonnull__(pTHX_1);
a2252 1

d2255 1
a2255 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d2259 1
a2259 2
PERL_CALLCONV PerlIO*	Perl_nextargv(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
a2261 1

d2263 1
a2263 5
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
d2267 6
d2275 1
a2275 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2280 1
a2280 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2286 1
a2286 2
PERL_CALLCONV void	Perl_op_clear(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
d2289 1
a2289 6

PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ const OP* o, CV* cv)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_op_contextualize(pTHX_ OP* o, I32 context)
			__attribute__nonnull__(pTHX_1);
d2292 2
d2295 1
a2295 2
PERL_CALLCONV void	Perl_op_dump(pTHX_ const OP *o)
			__attribute__nonnull__(pTHX_1);
a2297 1

d2299 1
a2299 2
PERL_CALLCONV OP*	Perl_op_linklist(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
a2301 1

d2304 1
a2304 2
PERL_CALLCONV void	Perl_op_null(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
a2306 1

d2311 1
d2313 1
a2313 7
PERL_CALLCONV void	Perl_pack_cat(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
d2316 4
a2319 3

PERL_CALLCONV void	Perl_package_version(pTHX_ OP* v)
			__attribute__nonnull__(pTHX_1);
d2322 1
a2322 7

PERL_CALLCONV void	Perl_packlist(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d2325 1
a2325 3

PERL_CALLCONV PADOFFSET	Perl_pad_add_anon(pTHX_ CV* func, I32 optype)
			__attribute__nonnull__(pTHX_1);
d2328 1
a2328 3

PERL_CALLCONV PADOFFSET	Perl_pad_add_name_pv(pTHX_ const char *name, const U32 flags, HV *typestash, HV *ourstash)
			__attribute__nonnull__(pTHX_1);
d2331 1
a2331 3

PERL_CALLCONV PADOFFSET	Perl_pad_add_name_pvn(pTHX_ const char *namepv, STRLEN namelen, U32 flags, HV *typestash, HV *ourstash)
			__attribute__nonnull__(pTHX_1);
d2334 1
a2334 3

PERL_CALLCONV PADOFFSET	Perl_pad_add_name_sv(pTHX_ SV *name, U32 flags, HV *typestash, HV *ourstash)
			__attribute__nonnull__(pTHX_1);
d2337 3
a2339 1

d2345 1
a2345 2
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_pv(pTHX_ const char* name, U32 flags)
			__attribute__nonnull__(pTHX_1);
d2348 1
a2348 3

PERL_CALLCONV PADOFFSET	Perl_pad_findmy_pvn(pTHX_ const char* namepv, STRLEN namelen, U32 flags)
			__attribute__nonnull__(pTHX_1);
d2351 1
a2351 3

PERL_CALLCONV PADOFFSET	Perl_pad_findmy_sv(pTHX_ SV* name, U32 flags)
			__attribute__nonnull__(pTHX_1);
d2354 1
a2354 5

PERL_CALLCONV void	Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a2356 1

d2363 1
a2363 2
PERL_CALLCONV void	Perl_pad_push(pTHX_ PADLIST *padlist, int depth)
			__attribute__nonnull__(pTHX_1);
a2365 1

d2368 1
a2368 2
PERL_CALLCONV PAD **	Perl_padlist_store(pTHX_ PADLIST *padlist, I32 key, PAD *val)
			__attribute__nonnull__(pTHX_1);
d2371 14
a2384 1

d2397 1
a2397 2
PERL_CALLCONV U32	Perl_parse_unicode_opts(pTHX_ const char **popt)
			__attribute__nonnull__(pTHX_1);
d2400 1
a2400 3

PERL_CALLCONV void	Perl_parser_free(pTHX_ const yy_parser *parser)
			__attribute__nonnull__(pTHX_1);
a2402 1

d2405 1
a2405 2
PERL_CALLCONV void	perl_construct(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
d2408 1
a2408 3

PERL_CALLCONV int	perl_destruct(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
d2411 1
a2411 3

PERL_CALLCONV void	perl_free(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
d2414 1
a2414 3

PERL_CALLCONV int	perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env)
			__attribute__nonnull__(1);
d2417 1
a2417 3

PERL_CALLCONV int	perl_run(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
a2419 1

d2421 1
a2421 3
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP *o, OP *expr, bool isreg, I32 floor)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a2423 1

d2425 1
a2425 2
PERL_CALLCONV void	Perl_populate_isa(pTHX_ const char *name, STRLEN len, ...)
			__attribute__nonnull__(pTHX_1);
d2428 1
a2428 3

PERL_CALLCONV REGEXP*	Perl_pregcomp(pTHX_ SV * const pattern, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d2431 1
a2431 7

PERL_CALLCONV I32	Perl_pregexec(pTHX_ REGEXP * const prog, char* stringarg, char* strend, char* strbeg, SSize_t minend, SV* screamer, U32 nosave)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_6);
a2433 1

d2435 1
a2435 2
PERL_CALLCONV void	Perl_pregfree2(pTHX_ REGEXP *rx)
			__attribute__nonnull__(pTHX_1);
d2438 1
a2438 3

PERL_CALLCONV const char*	Perl_prescan_version(pTHX_ const char *s, bool strict, const char** errstr, bool *sqv, int *ssaw_decimal, int *swidth, bool *salpha)
			__attribute__nonnull__(pTHX_1);
a2440 1

d2445 1
a2445 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2454 1
a2454 2
PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *const tbl)
			__attribute__nonnull__(pTHX_1);
d2457 1
a2457 4

PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *const tbl, const void *const oldsv, void *const newsv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
a2459 1

d2461 1
a2461 3
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2464 1
a2464 4

PERL_CALLCONV char*	Perl_pv_escape(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2466 2
a2467 5
	assert(dsv); assert(str)

PERL_CALLCONV char*	Perl_pv_pretty(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2470 1
a2470 4

PERL_CALLCONV char*	Perl_pv_uni_display(pTHX_ SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2473 1
a2473 3

PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err)
			__attribute__nonnull__(pTHX_1);
d2476 1
a2476 3

PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ SV * const pattern, U32 orig_rx_flags)
			__attribute__nonnull__(pTHX_1);
d2479 1
a2479 6

PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, const char* const strbeg, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d2482 1
a2482 3

PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP  *const r)
			__attribute__nonnull__(pTHX_1);
d2485 1
a2485 3

PERL_CALLCONV REGEXP*	Perl_re_op_compile(pTHX_ SV ** const patternp, int pat_count, OP *expr, const regexp_engine* eng, REGEXP *old_re, bool *is_bare_re, U32 rx_flags, U32 pm_flags)
			__attribute__nonnull__(pTHX_4);
a2487 1

d2494 1
a2494 2
PERL_CALLCONV void*	Perl_reentrant_retry(const char *f, ...)
			__attribute__nonnull__(1);
a2496 1

d2500 1
a2500 2
PERL_CALLCONV SV *	Perl_refcounted_he_fetch_pv(pTHX_ const struct refcounted_he *chain, const char *key, U32 hash, U32 flags)
			__attribute__nonnull__(pTHX_2);
d2503 1
a2503 3

PERL_CALLCONV SV *	Perl_refcounted_he_fetch_pvn(pTHX_ const struct refcounted_he *chain, const char *keypv, STRLEN keylen, U32 hash, U32 flags)
			__attribute__nonnull__(pTHX_2);
d2506 1
a2506 3

PERL_CALLCONV SV *	Perl_refcounted_he_fetch_sv(pTHX_ const struct refcounted_he *chain, SV *key, U32 hash, U32 flags)
			__attribute__nonnull__(pTHX_2);
a2508 1

d2511 1
a2511 2
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_pv(pTHX_ struct refcounted_he *parent, const char *key, U32 hash, SV *value, U32 flags)
			__attribute__nonnull__(pTHX_2);
d2514 1
a2514 3

PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_pvn(pTHX_ struct refcounted_he *parent, const char *keypv, STRLEN keylen, U32 hash, SV *value, U32 flags)
			__attribute__nonnull__(pTHX_2);
d2517 1
a2517 3

PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_sv(pTHX_ struct refcounted_he *parent, SV *key, U32 hash, SV *value, U32 flags)
			__attribute__nonnull__(pTHX_2);
d2520 1
a2520 3

PERL_CALLCONV SV*	Perl_reg_named_buff(pTHX_ REGEXP * const rx, SV * const key, SV * const value, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d2523 1
a2523 3

PERL_CALLCONV SV*	Perl_reg_named_buff_all(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d2526 1
a2526 4

PERL_CALLCONV bool	Perl_reg_named_buff_exists(pTHX_ REGEXP * const rx, SV * const key, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2529 1
a2529 4

PERL_CALLCONV SV*	Perl_reg_named_buff_fetch(pTHX_ REGEXP * const rx, SV * const namesv, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2532 1
a2532 3

PERL_CALLCONV SV*	Perl_reg_named_buff_firstkey(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d2535 1
a2535 3

PERL_CALLCONV SV*	Perl_reg_named_buff_iter(pTHX_ REGEXP * const rx, const SV * const lastkey, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d2538 1
a2538 3

PERL_CALLCONV SV*	Perl_reg_named_buff_nextkey(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d2541 1
a2541 3

PERL_CALLCONV SV*	Perl_reg_named_buff_scalar(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d2544 1
a2544 3

PERL_CALLCONV void	Perl_reg_numbered_buff_fetch(pTHX_ REGEXP * const rx, const I32 paren, SV * const sv)
			__attribute__nonnull__(pTHX_1);
d2547 1
a2547 4

PERL_CALLCONV I32	Perl_reg_numbered_buff_length(pTHX_ REGEXP * const rx, const SV * const sv, const I32 paren)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2550 1
a2550 3

PERL_CALLCONV void	Perl_reg_numbered_buff_store(pTHX_ REGEXP * const rx, const I32 paren, SV const * const value)
			__attribute__nonnull__(pTHX_1);
d2553 1
a2553 3

PERL_CALLCONV SV*	Perl_reg_qr_package(pTHX_ REGEXP * const rx)
			__attribute__nonnull__(pTHX_1);
d2556 1
a2556 3

PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* ret_x, REGEXP* rx)
			__attribute__nonnull__(pTHX_2);
d2559 1
a2559 3

PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **altsvp)
			__attribute__nonnull__(pTHX_2);
d2562 1
a2562 3

PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r)
			__attribute__nonnull__(pTHX_1);
d2565 1
a2565 7

PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, SSize_t minend, SV *sv, void *data, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_6);
d2568 1
a2568 3

PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const rx)
			__attribute__nonnull__(pTHX_1);
a2570 1

d2575 1
a2575 9
PERL_CALLCONV void	Perl_regprop(pTHX_ const regexp *prog, SV* sv, const regnode* o, const regmatch_info *reginfo)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGPROP	\
	assert(sv); assert(o)

PERL_CALLCONV void	Perl_repeatcpy(char* to, const char* from, I32 len, IV count)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
a2577 1

d2581 1
a2581 2
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv)
			__attribute__nonnull__(pTHX_1);
a2583 1

d2585 1
a2585 5
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
d2592 1
a2592 2
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* save)
			__attribute__nonnull__(pTHX_3);
a2594 1

d2598 1
a2598 2
PERL_CALLCONV CV*	Perl_rv2cv_op_cv(pTHX_ OP *cvop, U32 flags)
			__attribute__nonnull__(pTHX_1);
d2601 1
a2601 4

PERL_CALLCONV void	Perl_rxres_save(pTHX_ void **rsp, REGEXP *rx)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a2603 1

d2617 1
a2617 2
PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp)
			__attribute__nonnull__(pTHX_1);
d2620 1
a2620 3

PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp)
			__attribute__nonnull__(pTHX_1);
d2623 1
a2623 3

PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep)
			__attribute__nonnull__(pTHX_1);
d2626 1
a2626 3

PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, SSize_t key)
			__attribute__nonnull__(pTHX_1);
d2629 2
a2630 8

/* PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, SSize_t idx, SV **sptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV void	Perl_save_aelem_flags(pTHX_ AV* av, SSize_t idx, SV **sptr, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
a2632 1

d2634 1
a2634 2
PERL_CALLCONV void	Perl_save_aptr(pTHX_ AV** aptr)
			__attribute__nonnull__(pTHX_1);
d2637 1
a2637 3

PERL_CALLCONV AV*	Perl_save_ary(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
d2640 1
a2640 3

PERL_CALLCONV void	Perl_save_bool(pTHX_ bool* boolp)
			__attribute__nonnull__(pTHX_1);
d2643 1
a2643 3

PERL_CALLCONV void	Perl_save_clearsv(pTHX_ SV** svp)
			__attribute__nonnull__(pTHX_1);
d2646 1
a2646 4

PERL_CALLCONV void	Perl_save_delete(pTHX_ HV *hv, char *key, I32 klen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2649 1
a2649 3

PERL_CALLCONV void	Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void* p)
			__attribute__nonnull__(pTHX_2);
a2651 1

d2656 1
a2656 2
PERL_CALLCONV void	Perl_save_generic_pvref(pTHX_ char** str)
			__attribute__nonnull__(pTHX_1);
d2659 1
a2659 3

PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr)
			__attribute__nonnull__(pTHX_1);
d2662 1
a2662 3

PERL_CALLCONV void	Perl_save_gp(pTHX_ GV* gv, I32 empty)
			__attribute__nonnull__(pTHX_1);
d2665 1
a2665 3

PERL_CALLCONV HV*	Perl_save_hash(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
d2668 1
a2668 4

PERL_CALLCONV void	Perl_save_hdelete(pTHX_ HV *hv, SV *keysv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2671 2
a2672 10

/* PERL_CALLCONV void	Perl_save_helem(pTHX_ HV *hv, SV *key, SV **sptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV void	Perl_save_helem_flags(pTHX_ HV *hv, SV *key, SV **sptr, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a2674 1

d2676 1
a2676 2
PERL_CALLCONV void	Perl_save_hptr(pTHX_ HV** hptr)
			__attribute__nonnull__(pTHX_1);
d2679 1
a2679 3

PERL_CALLCONV void	Perl_save_int(pTHX_ int* intp)
			__attribute__nonnull__(pTHX_1);
d2682 1
a2682 3

PERL_CALLCONV void	Perl_save_item(pTHX_ SV* item)
			__attribute__nonnull__(pTHX_1);
d2685 1
a2685 3

PERL_CALLCONV void	Perl_save_iv(pTHX_ IV *ivp)
			__attribute__nonnull__(pTHX_1);
d2688 1
a2688 3

PERL_CALLCONV void	Perl_save_list(pTHX_ SV** sarg, I32 maxsarg)
			__attribute__nonnull__(pTHX_1);
d2691 1
a2691 3

PERL_CALLCONV void	Perl_save_long(pTHX_ long* longp)
			__attribute__nonnull__(pTHX_1);
d2694 1
a2694 3

/* PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */
d2697 1
a2697 3

PERL_CALLCONV void	Perl_save_nogv(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
a2699 1

d2702 1
a2702 2
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr)
			__attribute__nonnull__(pTHX_1);
a2704 1

d2709 1
a2709 2
PERL_CALLCONV SV*	Perl_save_scalar(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
d2712 1
a2712 3

PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV *sv, U32 mask, U32 val)
			__attribute__nonnull__(pTHX_1);
d2715 1
a2715 3

PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str)
			__attribute__nonnull__(pTHX_1);
d2718 1
a2718 3

PERL_CALLCONV void	Perl_save_sptr(pTHX_ SV** sptr)
			__attribute__nonnull__(pTHX_1);
d2721 1
a2721 3

PERL_CALLCONV void	Perl_save_strlen(pTHX_ STRLEN* ptr)
			__attribute__nonnull__(pTHX_1);
d2724 1
a2724 3

PERL_CALLCONV SV*	Perl_save_svref(pTHX_ SV** sptr)
			__attribute__nonnull__(pTHX_1);
d2727 1
a2727 3

PERL_CALLCONV void	Perl_save_vptr(pTHX_ void *ptr)
			__attribute__nonnull__(pTHX_1);
a2729 1

d2748 1
a2748 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2756 1
a2756 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2760 1
d2763 1
a2763 2
PERL_CALLCONV OP*	Perl_scalarvoid(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
d2766 1
a2766 4

PERL_CALLCONV NV	Perl_scan_bin(pTHX_ const char* start, STRLEN len, STRLEN* retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d2769 1
a2769 4

PERL_CALLCONV NV	Perl_scan_hex(pTHX_ const char* start, STRLEN len, STRLEN* retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d2772 1
a2772 4

PERL_CALLCONV char*	Perl_scan_num(pTHX_ const char* s, YYSTYPE *lvalp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2775 1
a2775 4

PERL_CALLCONV NV	Perl_scan_oct(pTHX_ const char* start, STRLEN len, STRLEN* retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d2778 1
a2778 4

PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *s, SV *rv, bool qv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2781 1
a2781 5

PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *const e, SV *sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a2783 8

PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV *bigstr, SV *littlestr, I32 start_shift, I32 end_shift, I32 *old_posp, I32 last)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SCREAMINSTR	\
	assert(bigstr); assert(littlestr); assert(old_posp)

d2786 1
a2786 2
PERL_CALLCONV void	Perl_set_context(void *t)
			__attribute__nonnull__(1);
a2788 1

d2792 1
a2792 2
PERL_CALLCONV void	Perl_setdefout(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
d2795 1
a2795 3

PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* str, I32 len, U32 hash)
			__attribute__nonnull__(pTHX_1);
d2798 1
a2798 3

PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp)
			__attribute__nonnull__(pTHX_3);
d2801 1
a2801 3

PERL_CALLCONV void	Perl_sortsv_flags(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags)
			__attribute__nonnull__(pTHX_3);
d2804 1
a2804 4

PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV** p, SSize_t n)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2807 1
a2807 4

PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV *tmpglob, IO *io)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a2809 1

d2812 1
a2812 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2816 1
a2816 2
PERL_CALLCONV void	Perl_sub_crush_depth(pTHX_ CV* cv)
			__attribute__nonnull__(pTHX_1);
d2819 2
a2820 6

/* PERL_CALLCONV bool	sv_2bool(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV bool	Perl_sv_2bool_flags(pTHX_ SV *sv, I32 flags)
			__attribute__nonnull__(pTHX_1);
d2823 1
a2823 4

PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV **const st, GV **const gvp, const I32 lref)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d2826 1
a2826 3

PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d2829 1
a2829 3

/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
d2832 1
a2832 3

PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1);
a2834 1

d2836 1
a2836 2
PERL_CALLCONV SV*	Perl_sv_2num(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d2839 1
a2839 3

PERL_CALLCONV NV	Perl_sv_2nv_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1);
d2842 1
a2842 3

/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV *sv, STRLEN *lp)
			__attribute__nonnull__(pTHX_1); */
d2845 1
a2845 3

PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags)
			__attribute__nonnull__(pTHX_1);
a2847 1

d2849 1
a2849 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d2853 1
a2853 2
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV *sv, STRLEN *const lp)
			__attribute__nonnull__(pTHX_1);
a2855 1

d2857 1
a2857 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d2861 1
a2861 2
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV *sv, STRLEN *const lp)
			__attribute__nonnull__(pTHX_1);
a2863 1

d2865 1
a2865 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d2869 1
a2869 2
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
d2872 1
a2872 3

PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1);
d2875 1
a2875 3

PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d2878 1
a2878 4

PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV *const sv, HV *const stash)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2881 1
a2881 7

PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d2884 1
a2884 3

PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV *const sv, const char* ptr)
			__attribute__nonnull__(pTHX_1);
d2887 1
a2887 4

PERL_CALLCONV void	Perl_sv_catpv_flags(pTHX_ SV *dstr, const char *sstr, const I32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2890 1
a2890 3

PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *const sv, const char *const ptr)
			__attribute__nonnull__(pTHX_1);
a2892 1

d2894 1
a2894 3
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2899 1
a2899 3
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2903 1
a2903 3
/* PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV *dsv, const char *sstr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d2906 1
a2906 4

PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *const dstr, const char *sstr, const STRLEN len, const I32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2909 1
a2909 4

/* PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d2912 1
a2912 3

/* PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV *dstr, SV *sstr)
			__attribute__nonnull__(pTHX_1); */
d2915 1
a2915 3

PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags)
			__attribute__nonnull__(pTHX_1);
d2918 1
a2918 3

/* PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dsv, SV *ssv)
			__attribute__nonnull__(pTHX_1); */
d2921 1
a2921 3

PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV *const sv, const char *const ptr)
			__attribute__nonnull__(pTHX_1);
a2923 1

d2926 1
a2926 2
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV *const orig_sv)
			__attribute__nonnull__(pTHX_1);
a2928 1

d2933 1
a2933 3
/* PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d2936 1
a2936 4

PERL_CALLCONV void	Perl_sv_copypv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2939 1
a2939 5

/* PERL_CALLCONV void	Perl_sv_copypv_nomg(pTHX_ SV *const dsv, SV *const ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

d2942 1
a2942 3
PERL_CALLCONV void	Perl_sv_del_backref(pTHX_ SV *const tsv, SV *const sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a2944 1

d2946 1
a2946 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2951 1
a2951 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2956 1
a2956 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2961 1
a2961 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2967 1
a2967 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2972 1
a2972 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2977 1
a2977 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2982 1
a2982 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2986 1
a2986 2
PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
a2988 1

d2991 1
a2991 2
/* PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
d2994 1
a2994 3

PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *const sv, const U32 flags)
			__attribute__nonnull__(pTHX_1);
a2996 1

d2998 1
a2998 2
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV *const sv, const U32 refcnt)
			__attribute__nonnull__(pTHX_1);
d3001 5
d3007 1
a3007 4
PERL_CALLCONV void	Perl_sv_free_arenas(pTHX);
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV *const sv, PerlIO *const fp, I32 append)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3010 1
a3010 3

PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV *const sv, STRLEN newlen)
			__attribute__nonnull__(pTHX_1);
a3012 1

d3015 1
a3015 3
/* PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4); */
d3018 1
a3018 4

PERL_CALLCONV void	Perl_sv_insert_flags(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4);
d3021 1
a3021 3

PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char *const name)
			__attribute__nonnull__(pTHX_2);
a3023 1

d3025 1
a3025 2
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
a3027 1

d3030 1
a3030 2
PERL_CALLCONV STRLEN	Perl_sv_len_utf8_nomg(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d3033 1
a3033 3

PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV *const sv, SV *const obj, const int how, const char *const name, const I32 namlen)
			__attribute__nonnull__(pTHX_1);
d3036 1
a3036 3

PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV *const sv, SV *const obj, const int how, const MGVTBL *const vtbl, const char *const name, const I32 namlen)
			__attribute__nonnull__(pTHX_1);
d3039 1
a3039 3

PERL_CALLCONV MAGIC *	Perl_sv_magicext_mglob(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
a3041 1

d3056 1
a3056 2
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
a3058 6

PERL_STATIC_INLINE bool	S_sv_only_taint_gmagic(SV *sv)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_SV_ONLY_TAINT_GMAGIC	\
	assert(sv)

d3060 1
a3060 2
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV *const sv, I32 *const offsetp)
			__attribute__nonnull__(pTHX_2);
d3063 1
a3063 3

PERL_CALLCONV STRLEN	Perl_sv_pos_b2u_flags(pTHX_ SV *const sv, STRLEN const offset, U32 flags)
			__attribute__nonnull__(pTHX_1);
d3066 1
a3066 3

PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV *const sv, I32 *const offsetp, I32 *const lenp)
			__attribute__nonnull__(pTHX_2);
d3069 1
a3069 3

PERL_CALLCONV STRLEN	Perl_sv_pos_u2b_flags(pTHX_ SV *const sv, STRLEN uoffset, STRLEN *const lenp, U32 flags)
			__attribute__nonnull__(pTHX_1);
a3071 1

d3073 1
a3073 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d3078 1
a3078 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d3082 1
a3082 3
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *lp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3085 1
a3085 3

PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV *const sv, STRLEN *const lp)
			__attribute__nonnull__(pTHX_1);
d3088 1
a3088 4

PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *lp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3091 1
a3091 3

/* PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1); */
d3094 1
a3094 3

PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags)
			__attribute__nonnull__(pTHX_1);
d3097 1
a3097 3

PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1);
a3099 1

d3101 1
a3101 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d3105 1
a3105 3
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *lp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3108 1
a3108 3

PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV *const sv, STRLEN *const lp)
			__attribute__nonnull__(pTHX_1);
d3111 1
a3111 4

PERL_CALLCONV char*	Perl_sv_recode_to_utf8(pTHX_ SV* sv, SV *encoding)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3114 1
a3114 3

PERL_CALLCONV SV*	Perl_sv_ref(pTHX_ SV *dst, const SV *const sv, const int ob)
			__attribute__nonnull__(pTHX_2);
a3116 1

d3118 1
a3118 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d3122 1
a3122 3
PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV *const sv, SV *const nsv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3124 1

d3126 1
a3126 2
PERL_CALLCONV void	Perl_sv_reset(pTHX_ const char* s, HV *const stash)
			__attribute__nonnull__(pTHX_1);
a3128 1

d3130 1
a3130 2
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d3133 1
a3133 3

PERL_CALLCONV void	Perl_sv_sethek(pTHX_ SV *const sv, const HEK *const hek)
			__attribute__nonnull__(pTHX_1);
d3136 1
a3136 3

PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV *const sv, const IV num)
			__attribute__nonnull__(pTHX_1);
d3139 1
a3139 3

PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *const sv, const IV i)
			__attribute__nonnull__(pTHX_1);
d3142 1
a3142 3

PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV *const sv, const NV num)
			__attribute__nonnull__(pTHX_1);
d3145 1
a3145 3

PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *const sv, const NV num)
			__attribute__nonnull__(pTHX_1);
d3148 1
a3148 3

PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV *const sv, const char *const ptr)
			__attribute__nonnull__(pTHX_1);
d3151 1
a3151 3

PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *const sv, const char *const ptr)
			__attribute__nonnull__(pTHX_1);
a3153 1

d3155 1
a3155 3
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3160 1
a3160 3
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3164 1
a3164 2
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV *const sv, const IV num)
			__attribute__nonnull__(pTHX_1);
d3167 1
a3167 3

PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *const sv, const IV iv)
			__attribute__nonnull__(pTHX_1);
d3170 1
a3170 3

PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV *const sv, const char *const ptr, const STRLEN len)
			__attribute__nonnull__(pTHX_1);
d3173 1
a3173 4

PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *const sv, const char *const ptr, const STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3176 1
a3176 3

PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV *const rv, const char *const classname, const IV iv)
			__attribute__nonnull__(pTHX_1);
d3179 1
a3179 3

PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV *const rv, const char *const classname, const NV nv)
			__attribute__nonnull__(pTHX_1);
d3182 1
a3182 3

PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV *const rv, const char *const classname, void *const pv)
			__attribute__nonnull__(pTHX_1);
d3185 1
a3185 4

PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV *const rv, const char *const classname, const char *const pv, const STRLEN n)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d3188 1
a3188 3

PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV *const rv, const char *const classname, const UV uv)
			__attribute__nonnull__(pTHX_1);
d3191 1
a3191 3

/* PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV *dstr, SV *sstr)
			__attribute__nonnull__(pTHX_1); */
d3194 1
a3194 3

PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dstr, SV *sstr, const I32 flags)
			__attribute__nonnull__(pTHX_1);
d3197 1
a3197 3

PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *const dstr, SV *const sstr)
			__attribute__nonnull__(pTHX_1);
d3200 1
a3200 3

PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV *const sv, const UV num)
			__attribute__nonnull__(pTHX_1);
d3203 1
a3203 3

PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *const sv, const UV u)
			__attribute__nonnull__(pTHX_1);
d3206 1
a3206 3

/* PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */
a3208 1

d3210 1
a3210 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d3216 1
a3216 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3220 1
a3220 2
PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV *const sv, const int type)
			__attribute__nonnull__(pTHX_1);
d3223 1
a3223 3

PERL_CALLCONV int	Perl_sv_unmagicext(pTHX_ SV *const sv, const int type, MGVTBL *vtbl)
			__attribute__nonnull__(pTHX_1);
d3226 1
a3226 3

/* PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */
d3229 1
a3229 3

PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV *const ref, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d3232 1
a3232 3

PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d3235 1
a3235 3

PERL_CALLCONV void	Perl_sv_upgrade(pTHX_ SV *const sv, svtype new_type)
			__attribute__nonnull__(pTHX_1);
d3238 1
a3238 3

/* PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1); */
d3241 1
a3241 3

PERL_CALLCONV void	Perl_sv_usepvn_flags(pTHX_ SV *const sv, char* ptr, const STRLEN len, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d3244 1
a3244 3

/* PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1); */
d3247 1
a3247 3

PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d3250 1
a3250 3

PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *const sv, const bool fail_ok)
			__attribute__nonnull__(pTHX_1);
d3253 1
a3253 3

PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d3256 1
a3256 3

/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
d3259 2
a3260 6

/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags_grow(pTHX_ SV *const sv, const I32 flags, STRLEN extra)
			__attribute__nonnull__(pTHX_1);
d3263 2
a3264 6

/* PERL_CALLCONV STRLEN	sv_utf8_upgrade_nomg(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d3267 1
a3267 4

PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3270 1
a3270 4

PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3273 1
a3273 4

PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3276 1
a3276 4

PERL_CALLCONV void	Perl_sv_vcatpvfn_flags(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3279 1
a3279 4

PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3282 1
a3282 4

PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3285 1
a3285 4

PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3288 1
a3288 4

PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *swash, const U8 *ptr, bool do_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3290 1

d3292 1
a3292 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d3296 2
a3297 4
/* PERL_CALLCONV void	sync_locale(void); */
PERL_CALLCONV void	Perl_sys_init(int* argc, char*** argv)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d3300 1
a3300 5

PERL_CALLCONV void	Perl_sys_init3(int* argc, char*** argv, char*** env)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
a3302 1

d3305 1
a3305 2
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char *const s)
			__attribute__nonnull__(pTHX_2);
d3308 1
a3308 6

PERL_CALLCONV OP *	Perl_tied_method(pTHX_ SV *methname, SV **sp, SV *const sv, const MAGIC *const mg, const U32 flags, U32 argc, ...)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d3311 3
a3313 9

PERL_CALLCONV void	Perl_tmps_grow(pTHX_ SSize_t n);
/* PERL_CALLCONV UV	Perl_to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV UV	Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a3315 1

d3321 1
a3321 3
PERL_CALLCONV UV	Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a3323 1

d3329 1
a3329 3
PERL_CALLCONV UV	Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a3331 1

d3338 1
a3338 4
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d3342 1
a3342 3
/* PERL_CALLCONV UV	Perl_to_utf8_fold(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d3345 1
a3345 4

/* PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d3348 1
a3348 4

/* PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d3351 1
a3351 4

/* PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
a3353 1

d3356 1
a3356 5
PERL_CALLCONV I32	Perl_unpack_str(pTHX_ const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
d3359 1
a3359 6

PERL_CALLCONV I32	Perl_unpackstring(pTHX_ const char *pat, const char *patend, const char *s, const char *strend, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
a3361 1

d3364 1
a3364 2
PERL_CALLCONV SV*	Perl_upg_version(pTHX_ SV *ver, bool qv)
			__attribute__nonnull__(pTHX_1);
d3367 1
a3367 5

PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
d3370 1
a3370 5

PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
a3372 1

d3375 1
a3375 3
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3379 1
a3379 1
PERL_CALLCONV U8*	Perl_utf8_hop(pTHX_ const U8 *s, I32 off)
d3381 1
a3381 2
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
d3387 1
a3387 3
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3391 1
a3391 3
PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3393 1

d3395 1
a3395 2
			__attribute__deprecated__
			__attribute__nonnull__(pTHX_1);
d3399 1
a3399 4
/* PERL_CALLCONV UV	utf8_to_uvchr_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

d3401 1
a3401 2
			__attribute__deprecated__
			__attribute__nonnull__(pTHX_1);
d3406 1
a3406 3
			__attribute__deprecated__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3410 1
a3410 2
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1);
d3413 1
a3413 3

PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1);
d3416 6
a3421 9

/* PERL_CALLCONV U8*	uvchr_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1); */

/* PERL_CALLCONV U8*	uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV U8*	Perl_uvoffuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
			__attribute__nonnull__(pTHX_1);
d3424 1
a3424 3

PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1);
d3427 1
a3427 3

PERL_CALLCONV U8*	Perl_uvuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
			__attribute__nonnull__(pTHX_1);
d3430 1
a3430 3

PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1);
a3432 1

d3434 1
a3434 2
			__attribute__deprecated__
			__attribute__nonnull__(pTHX_1);
d3438 1
a3438 2
PERL_CALLCONV bool	Perl_validate_proto(pTHX_ SV *name, SV *proto, bool warn)
			__attribute__nonnull__(pTHX_1);
d3441 1
a3441 4

PERL_CALLCONV int	Perl_vcmp(pTHX_ SV *lhv, SV *rhv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3443 1

d3447 1
a3447 2
PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
d3450 1
a3450 3

PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
d3453 1
a3453 3

PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
a3455 1

d3457 1
a3457 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d3461 1
a3461 2
PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args)
			__attribute__nonnull__(pTHX_2);
d3464 1
a3464 3

PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
a3466 1

d3469 1
a3469 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d3473 1
a3473 2
PERL_CALLCONV SV*	Perl_vnormal(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
d3476 1
a3476 3

PERL_CALLCONV SV*	Perl_vnumify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
d3479 1
a3479 3

PERL_CALLCONV SV*	Perl_vstringify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
d3482 1
a3482 3

PERL_CALLCONV SV*	Perl_vverify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
d3485 1
a3485 3

PERL_CALLCONV void	Perl_vwarn(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
d3488 1
a3488 3

PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_2);
d3491 1
a3491 3

PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags)
			__attribute__nonnull__(pTHX_2);
a3493 1

d3495 1
a3495 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
d3499 1
a3499 2
PERL_CALLCONV void	Perl_warn_sv(pTHX_ SV *baseex)
			__attribute__nonnull__(pTHX_1);
a3501 1

d3503 1
a3503 2
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_2);
d3510 1
a3510 2
PERL_CALLCONV void	Perl_watch(pTHX_ char** addr)
			__attribute__nonnull__(pTHX_1);
d3513 2
a3514 6

/* PERL_CALLCONV I32	whichsig(pTHX_ const char* sig)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV I32	Perl_whichsig_pv(pTHX_ const char* sig)
			__attribute__nonnull__(pTHX_1);
d3517 1
a3517 3

PERL_CALLCONV I32	Perl_whichsig_pvn(pTHX_ const char* sig, STRLEN len)
			__attribute__nonnull__(pTHX_1);
d3520 1
a3520 3

PERL_CALLCONV I32	Perl_whichsig_sv(pTHX_ SV* sigsv)
			__attribute__nonnull__(pTHX_1);
d3523 1
a3523 4

PERL_CALLCONV void	Perl_wrap_op_checker(pTHX_ Optype opcode, Perl_check_t new_checker, Perl_check_t *old_checker_p)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d3526 1
a3526 3

PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ SV* msv)
			__attribute__nonnull__(pTHX_1);
d3529 5
a3533 14

PERL_CALLCONV void	Perl_xs_apiversion_bootcheck(pTHX_ SV *module, const char *api_p, STRLEN api_len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_XS_APIVERSION_BOOTCHECK	\
	assert(module); assert(api_p)

PERL_CALLCONV void	Perl_xs_version_bootcheck(pTHX_ U32 items, U32 ax, const char *xs_p, STRLEN xs_len)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_XS_VERSION_BOOTCHECK	\
	assert(xs_p)

PERL_CALLCONV int	Perl_yyerror(pTHX_ const char *const s)
			__attribute__nonnull__(pTHX_1);
d3536 1
a3536 3

PERL_CALLCONV int	Perl_yyerror_pv(pTHX_ const char *const s, U32 flags)
			__attribute__nonnull__(pTHX_1);
d3539 1
a3539 3

PERL_CALLCONV int	Perl_yyerror_pvn(pTHX_ const char *const s, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
a3541 1

d3548 1
a3548 2
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
a3550 1

d3562 1
a3562 2
PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd)
			__attribute__nonnull__(pTHX_1);
a3564 1

d3568 1
a3568 2
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ int *index, size_t size)
			__attribute__nonnull__(pTHX_1);
a3570 1

a3572 13
#if !(defined(PERL_MAD))
PERL_CALLCONV void	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
PERL_CALLCONV void	Perl_package(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PACKAGE	\
	assert(o)

PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)

#endif
d3580 1
a3580 3
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3586 1
a3586 2
PERL_CALLCONV char*	Perl_my_bzero(char* loc, I32 len)
			__attribute__nonnull__(1);
d3588 1
a3588 2
	assert(loc)

d3591 1
a3591 3
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char *env_elem, unsigned long *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3593 1

d3596 2
a3597 4
PERL_CALLCONV I32	Perl_my_memcmp(const char* s1, const char* s2, I32 len)
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d3599 1
a3599 1
	assert(s1); assert(s2)
d3602 5
d3608 1
a3608 2
PERL_CALLCONV void*	Perl_my_memset(char* loc, I32 ch, I32 len)
			__attribute__nonnull__(1);
d3610 1
a3610 2
	assert(loc)

d3615 1
a3615 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3622 1
a3622 3
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ const char* a, const char* b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3624 1

d3645 1
a3645 2
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv, I32 numtype)
			__attribute__nonnull__(pTHX_1);
a3647 1

d3654 1
a3654 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d3660 26
d3688 1
a3688 3
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ const char* cmd, const char* mode)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3690 1

d3694 1
a3694 4
STATIC SV *	S_incpush_if_exists(pTHX_ AV *const av, SV *dir, SV *const stem)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d3697 74
d3772 3
a3774 1
#  endif
d3778 1
a3778 2
STATIC U8*	S_add_utf16_textfilter(pTHX_ U8 *const s, bool reversed)
			__attribute__nonnull__(pTHX_1);
d3781 1
a3781 3

STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen)
			__attribute__nonnull__(pTHX_2);
a3783 1

d3788 1
a3788 2
STATIC void	S_validate_suid(pTHX_ PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1);
a3790 1

d3794 1
a3794 3
PERL_CALLCONV int	Perl_my_sprintf(char *buffer, const char *pat, ...)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d3797 5
a3801 1

d3804 1
a3804 2
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report)
			__attribute__nonnull__(pTHX_1);
a3806 9

#endif
#if (!defined(HAS_MEMCPY) && !defined(HAS_BCOPY)) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY) && !defined(HAS_SAFE_BCOPY))
PERL_CALLCONV char*	Perl_my_bcopy(const char* from, char* to, I32 len)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_MY_BCOPY	\
	assert(from); assert(to)

d3810 1
a3810 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d3814 1
a3814 2
PERL_CALLCONV void	Perl_hv_assert(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
d3817 1
a3817 3

PERL_CALLCONV void	Perl_pad_setsv(pTHX_ PADOFFSET po, SV* sv)
			__attribute__nonnull__(pTHX_2);
a3819 1

d3821 3
d3825 1
a3825 3
STATIC void	S_cv_dump(pTHX_ const CV *cv, const char *title)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3827 1

d3830 1
a3830 3
STATIC void	S_dump_trie(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d3833 1
a3833 4

STATIC void	S_dump_trie_interim_list(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d3836 1
a3836 4

STATIC void	S_dump_trie_interim_table(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d3839 1
a3839 6

STATIC const regnode*	S_dumpuntil(pTHX_ const regexp *r, const regnode *start, const regnode *node, const regnode *last, const regnode *plast, SV* sv, I32 indent, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_6);
d3842 11
a3852 4

STATIC void	S_put_byte(pTHX_ SV* sv, int c)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PUT_BYTE	\
d3854 1
a3854 9

STATIC bool	S_put_latin1_charclass_innards(pTHX_ SV* sv, char* bitmap)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PUT_LATIN1_CHARCLASS_INNARDS	\
	assert(sv); assert(bitmap)

STATIC void	S_put_range(pTHX_ SV* sv, UV start, UV end)
			__attribute__nonnull__(pTHX_1);
d3857 3
a3859 1

d3862 1
a3862 4
STATIC U8	S_regtail_study(pTHX_ RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a3864 1

d3867 1
a3867 5
STATIC void	S_debug_start_match(pTHX_ const REGEXP *prog, const bool do_utf8, const char *start, const char *end, const char *blurb)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d3870 1
a3870 7

STATIC void	S_dump_exec_pos(pTHX_ const char *locinput, const regnode *scan, const char *loc_regeol, const char *loc_bostr, const char *loc_reg_starttry, const bool do_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d3873 3
a3875 1

d3878 1
a3878 2
STATIC void	S_del_sv(pTHX_ SV *p)
			__attribute__nonnull__(pTHX_1);
a3880 1

d3884 1
a3884 3
			__attribute__format__(__printf__,pTHX_1,0)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3888 1
a3888 2
STATIC int	S_tokereport(pTHX_ I32 rv, const YYSTYPE* lvalp)
			__attribute__nonnull__(pTHX_2);
d3891 5
d3900 1
a3900 2
PERL_CALLCONV void	Perl_dump_sv_child(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
a3902 1

d3905 1
a3905 3
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d3908 1
a3908 4

PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d3911 1
a3911 4

PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3914 1
a3914 4

PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3917 1
a3917 4

PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3920 1
a3920 4

PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a3922 1

d3932 1
a3932 3
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3934 1

d3938 1
a3938 2
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);
d3941 1
a3941 3

PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level)
			__attribute__nonnull__(pTHX_1);
a3943 1

d3948 1
a3948 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
d3957 1
a3957 2
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dstr, SV* sstr)
			__attribute__nonnull__(pTHX_2);
a3959 1

d3962 1
a3962 2
PERL_CALLCONV void	Perl_opslab_force_free(pTHX_ OPSLAB *slab)
			__attribute__nonnull__(pTHX_1);
d3965 1
a3965 3

PERL_CALLCONV void	Perl_opslab_free(pTHX_ OPSLAB *slab)
			__attribute__nonnull__(pTHX_1);
d3968 1
a3968 3

PERL_CALLCONV void	Perl_opslab_free_nopad(pTHX_ OPSLAB *slab)
			__attribute__nonnull__(pTHX_1);
d3971 1
a3971 4

PERL_CALLCONV void	Perl_parser_free_nexttoke_ops(pTHX_ yy_parser *parser, OPSLAB *slab)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3974 4
d3980 1
a3980 2
PERL_CALLCONV void	Perl_Slab_to_ro(pTHX_ OPSLAB *slab)
			__attribute__nonnull__(pTHX_1);
d3983 1
a3983 3

PERL_CALLCONV void	Perl_Slab_to_rw(pTHX_ OPSLAB *const slab)
			__attribute__nonnull__(pTHX_1);
a3985 1

d3989 1
a3989 3
PERL_STATIC_INLINE STRLEN	S_sv_or_pv_pos_u2b(pTHX_ SV *sv, const char *pv, STRLEN pos, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a3991 1

d3996 1
a3996 2
STATIC void	S_strip_return(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
a3998 1

d4002 1
a4002 2
PERL_CALLCONV void	Perl_sv_buf_to_ro(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
a4004 1

d4006 1
a4006 2
STATIC void	S_sv_buf_to_rw(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
a4008 1

d4012 1
a4012 2
PERL_CALLCONV PADOFFSET	Perl_op_refcnt_dec(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
a4014 1

d4018 1
a4018 3
/* PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd)
			__attribute__nonnull__(pTHX_1); */

d4025 1
a4025 2
PERL_CALLCONV void	Perl_free_global_struct(pTHX_ struct perl_vars *plvarsp)
			__attribute__nonnull__(pTHX_1);
a4027 1

d4032 1
a4032 2
PERL_CALLCONV int	Perl_my_cxt_index(pTHX_ const char *my_cxt_key)
			__attribute__nonnull__(pTHX_1);
d4035 1
a4035 3

PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ const char *my_cxt_key, size_t size)
			__attribute__nonnull__(pTHX_1);
a4037 1

d4046 1
a4046 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d4050 2
a4051 1
PERL_CALLCONV OP*	Perl_die_nocontext(const char* pat, ...)
d4055 1
a4055 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d4060 1
a4060 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d4064 1
a4064 2
PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...)
			__attribute__nonnull__(2);
a4066 1

d4068 1
a4068 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d4073 1
a4073 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d4078 1
a4078 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d4083 1
a4083 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d4088 1
a4088 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d4093 1
a4093 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d4098 1
a4098 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d4103 1
a4103 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d4108 1
a4108 2
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(2);
d4114 1
a4114 10
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem *ipM, struct IPerlMem *ipMS, struct IPerlMem *ipMP, struct IPerlEnv *ipE, struct IPerlStdIO *ipStd, struct IPerlLIO *ipLIO, struct IPerlDir *ipD, struct IPerlSock *ipS, struct IPerlProc *ipP)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(5)
			__attribute__nonnull__(6)
			__attribute__nonnull__(7)
			__attribute__nonnull__(8)
			__attribute__nonnull__(9);
a4116 1

d4118 1
a4118 11
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *proto_perl, UV flags, struct IPerlMem* ipM, struct IPerlMem* ipMS, struct IPerlMem* ipMP, struct IPerlEnv* ipE, struct IPerlStdIO* ipStd, struct IPerlLIO* ipLIO, struct IPerlDir* ipD, struct IPerlSock* ipS, struct IPerlProc* ipP)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(5)
			__attribute__nonnull__(6)
			__attribute__nonnull__(7)
			__attribute__nonnull__(8)
			__attribute__nonnull__(9)
			__attribute__nonnull__(10)
			__attribute__nonnull__(11);
a4120 1

d4124 1
a4124 2
STATIC MAGIC*	S_get_aux_mg(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
a4126 1

d4129 1
a4129 2
STATIC void	S_deb_stack_n(pTHX_ SV** stack_base, I32 stack_min, I32 stack_max, I32 mark_min, I32 mark_max)
			__attribute__nonnull__(pTHX_1);
a4131 1

d4134 1
a4134 2
STATIC void	S_exec_failed(pTHX_ const char *cmd, int fd, int do_report)
			__attribute__nonnull__(pTHX_1);
a4136 1

d4140 1
a4140 5
STATIC bool	S_openn_cleanup(pTHX_ GV *gv, IO *io, PerlIO *fp, char *mode, const char *oname, PerlIO *saveifp, PerlIO *saveofp, int savefd, char savetype, int writing, bool was_fdopen, const char *type)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d4143 1
a4143 8

STATIC IO *	S_openn_setup(pTHX_ GV *gv, char *mode, PerlIO **saveifp, PerlIO **saveofp, int *savefd, char *savetype)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
a4145 1

d4149 1
a4149 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4154 1
a4154 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4159 1
a4159 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4164 1
a4164 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4169 1
a4169 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4174 1
a4174 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4180 2
a4181 3
STATIC CV*	S_deb_curcv(pTHX_ const I32 ix);
STATIC void	S_debprof(pTHX_ const OP *o)
			__attribute__nonnull__(pTHX_1);
d4184 1
a4184 3

STATIC SV*	S_pm_description(pTHX_ const PMOP *pm)
			__attribute__nonnull__(pTHX_1);
a4186 1

a4187 9
#  if defined(PERL_MAD)
STATIC void	S_xmldump_attr(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_XMLDUMP_ATTR	\
	assert(file); assert(pat)

#  endif
d4190 1
a4190 2
PERL_CALLCONV void	Perl_hv_kill_backrefs(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
a4192 1

d4195 1
a4195 3
STATIC bool	S_find_default_stash(pTHX_ HV **stash, const char *name, STRLEN len, const U32 is_utf8, const I32 add, svtype sv_type)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4198 2
a4199 3

STATIC void	S_gv_init_svtype(pTHX_ GV *gv, const svtype sv_type)
			__attribute__nonnull__(pTHX_1);
d4202 1
a4202 3

STATIC bool	S_gv_is_in_main(pTHX_ const char *name, STRLEN len, const U32 is_utf8)
			__attribute__nonnull__(pTHX_1);
d4205 1
a4205 5

STATIC bool	S_gv_magicalize(pTHX_ GV *gv, HV *stash, const char *name, STRLEN len, bool addmg, svtype sv_type)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4208 1
a4208 3

STATIC void	S_gv_magicalize_isa(pTHX_ GV *gv)
			__attribute__nonnull__(pTHX_1);
d4211 5
a4215 4

STATIC void	S_maybe_multimagic_gv(pTHX_ GV *gv, const char *name, const svtype sv_type)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4218 1
a4218 7

STATIC bool	S_parse_gv_stash_name(pTHX_ HV **stash, GV **gv, const char **name, STRLEN *len, const char *nambeg, STRLEN full_len, const U32 is_utf8, const I32 add)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d4221 1
a4221 6

STATIC HV*	S_require_tie_mod(pTHX_ GV *gv, const char *varpv, SV* namesv, const char *methpv, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
a4223 1

d4226 1
a4226 3
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *const tsv, SV *const sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a4228 1

d4231 1
a4231 2
STATIC void	S_clear_placeholders(pTHX_ HV *hv, U32 items)
			__attribute__nonnull__(pTHX_1);
d4234 1
a4234 3

STATIC void	S_hfreeentries(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
d4237 1
a4237 3

STATIC void	S_hsplit(pTHX_ HV *hv, STRLEN const oldsize, STRLEN newsize)
			__attribute__nonnull__(pTHX_1);
d4240 1
a4240 3

STATIC struct xpvhv_aux*	S_hv_auxinit(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
d4243 1
a4243 3

STATIC struct xpvhv_aux*	S_hv_auxinit_internal(struct xpvhv_aux *iter)
			__attribute__nonnull__(1);
a4245 1

d4247 1
a4247 3
STATIC SV*	S_hv_free_ent_ret(pTHX_ HV *hv, HE *entry)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4250 1
a4250 5

STATIC void	S_hv_magic_check(HV *hv, bool *needs_copy, bool *needs_store)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
a4252 1

d4254 1
a4254 3
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
d4263 1
a4263 2
STATIC SV *	S_refcounted_he_value(pTHX_ const struct refcounted_he *he)
			__attribute__nonnull__(pTHX_1);
a4265 1

d4268 1
a4268 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
d4273 1
a4273 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4280 1
a4280 2
PERL_CALLCONV void	Perl_sv_kill_backrefs(pTHX_ SV *const sv, AV *const av)
			__attribute__nonnull__(pTHX_1);
a4282 1

d4285 1
a4285 3
PERL_CALLCONV SV*	Perl_hfree_next_entry(pTHX_ HV *hv, STRLEN *indexp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a4287 9

#endif
#if defined(PERL_IN_LOCALE_C) && defined(USE_LOCALE)
STATIC bool	S_is_cur_LC_category_utf8(pTHX_ int category);
STATIC char*	S_stdize_locale(pTHX_ char* locs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_STDIZE_LOCALE	\
	assert(locs)

d4290 1
a4290 2
STATIC int	S_adjust_size_and_find_bucket(size_t *nbytes_p)
			__attribute__nonnull__(1);
a4292 1

d4295 1
a4295 2
STATIC void	S_fixup_errno_string(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d4298 1
a4298 5

STATIC SV*	S_magic_methcall1(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, int n, SV *val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4301 1
a4301 5

STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, SV *meth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a4303 1

d4305 1
a4305 2
STATIC void	S_save_magic_flags(pTHX_ I32 mgs_ix, SV *sv, U32 flags)
			__attribute__nonnull__(pTHX_2);
a4307 1

d4311 1
a4311 3
PERL_CALLCONV bool	Perl_translate_substr_offsets(pTHX_ STRLEN curlen, IV pos1_iv, bool pos1_is_uv, IV len_iv, bool len_is_uv, STRLEN *posp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_6)
			__attribute__nonnull__(pTHX_7);
a4313 1

d4316 1
a4316 3
STATIC void	S_mro_clean_isarev(pTHX_ HV * const isa, const char * const name, const STRLEN len, HV * const exceptions, U32 hash, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4319 1
a4319 5

STATIC void	S_mro_gather_and_rename(pTHX_ HV * const stashes, HV * const seen_stashes, HV *stash, HV *oldstash, SV *namesv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5);
d4322 1
a4322 3

STATIC AV*	S_mro_get_linear_isa_dfs(pTHX_ HV* stash, U32 level)
			__attribute__nonnull__(pTHX_1);
a4324 4

#endif
#if defined(PERL_IN_NUMERIC_C)
STATIC NV	S_mulexp10(NV value, I32 exponent);
d4327 1
a4327 4
PERL_STATIC_INLINE bool	S_aassign_common_vars(pTHX_ OP* o);
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4330 1
a4330 5

STATIC void	S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
d4333 2
d4336 1
a4336 4
STATIC void	S_bad_type_gv(pTHX_ I32 n, const char *t, GV *gv, U32 flags, const OP *kid)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
d4338 2
a4339 6
	assert(t); assert(gv); assert(kid)

STATIC void	S_bad_type_pv(pTHX_ I32 n, const char *t, const char *name, U32 flags, const OP *kid)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
d4341 5
a4345 4
	assert(t); assert(name); assert(kid)

STATIC void	S_cop_free(pTHX_ COP *cop)
			__attribute__nonnull__(pTHX_1);
d4348 1
a4348 3

STATIC OP *	S_dup_attrlist(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d4351 1
a4351 3

STATIC void	S_finalize_op(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
d4354 1
a4354 3

STATIC void	S_find_and_forget_pmops(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d4357 1
a4357 3

STATIC OP*	S_fold_constants(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d4360 2
a4361 4

STATIC OP*	S_force_list(pTHX_ OP* arg);
STATIC void	S_forget_pmop(pTHX_ PMOP *const o)
			__attribute__nonnull__(pTHX_1);
a4363 1

d4365 1
a4365 7
STATIC SV*	S_gv_ename(pTHX_ GV *gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_ENAME	\
	assert(gv)

STATIC void	S_inplace_aassign(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
a4367 1

d4369 1
a4369 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
a4372 3
STATIC I32	S_is_list_assignment(pTHX_ const OP *o)
			__attribute__warn_unused_result__;

d4374 1
a4374 2
STATIC bool	S_looks_like_bool(pTHX_ const OP* o)
			__attribute__nonnull__(pTHX_1);
a4376 1

d4378 1
a4378 4
STATIC void	S_move_proto_attr(pTHX_ OP **proto, OP **attrs, const GV *name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4381 1
a4381 3

STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp)
			__attribute__nonnull__(pTHX_3);
d4384 1
a4384 6

STATIC OP*	S_newDEFSVOP(pTHX)
			__attribute__warn_unused_result__;

STATIC OP*	S_newGIVWHENOP(pTHX_ OP* cond, OP *block, I32 enter_opcode, I32 leave_opcode, PADOFFSET entertarg)
			__attribute__nonnull__(pTHX_2);
d4387 1
a4387 1

d4389 1
a4389 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d4393 1
a4393 2
STATIC void	S_no_bareword_allowed(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
a4395 1

d4397 1
a4397 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4401 1
a4401 7
STATIC void	S_null_listop_in_list_context(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NULL_LISTOP_IN_LIST_CONTEXT	\
	assert(o)

PERL_STATIC_INLINE OP*	S_op_integerize(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d4404 1
a4404 3

PERL_STATIC_INLINE OP*	S_op_std_init(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d4407 1
a4407 5

STATIC OP*	S_pmtrans(pTHX_ OP* o, OP* expr, OP* repl)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4410 1
a4410 5

STATIC void	S_process_special_blocks(pTHX_ I32 floor, const char *const fullname, GV *const gv, CV *const cv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
a4412 1

d4418 1
a4418 2
STATIC OP*	S_scalarboolean(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
a4420 1

d4424 1
a4424 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4428 1
a4428 2
STATIC void	S_simplify_sort(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
a4430 1

d4432 1
a4432 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4436 1
a4436 10
STATIC OP*	S_too_few_arguments_sv(pTHX_ OP *o, SV* namesv, U32 flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TOO_FEW_ARGUMENTS_SV	\
	assert(o); assert(namesv)

STATIC OP*	S_too_many_arguments_pv(pTHX_ OP *o, const char* name, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4439 5
a4443 8

STATIC OP*	S_too_many_arguments_sv(pTHX_ OP *o, SV* namesv, U32 flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TOO_MANY_ARGUMENTS_SV	\
	assert(o); assert(namesv)

d4446 1
a4446 3
PERL_CALLCONV void	Perl_report_redefined_cv(pTHX_ const SV *name, const CV *old_cv, SV * const *new_const_svp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a4448 1

d4451 1
a4451 2
STATIC PADOFFSET	S_pad_alloc_name(pTHX_ SV *namesv, U32 flags, HV *typestash, HV *ourstash)
			__attribute__nonnull__(pTHX_1);
d4453 2
a4454 4
	assert(namesv)

STATIC void	S_pad_check_dup(pTHX_ SV *name, U32 flags, const HV *ourstash)
			__attribute__nonnull__(pTHX_1);
d4457 1
a4457 6

STATIC PADOFFSET	S_pad_findlex(pTHX_ const char *namepv, STRLEN namelen, U32 flags, const CV* cv, U32 seq, int warn, SV** out_capture, SV** out_name_sv, int *out_flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_8)
			__attribute__nonnull__(pTHX_9);
d4459 1
a4459 2
	assert(namepv); assert(cv); assert(out_name_sv); assert(out_flags)

d4463 1
a4463 3
STATIC void	S_find_beginning(pTHX_ SV* linestr_sv, PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a4465 1

d4467 1
a4467 2
STATIC void	S_incpush(pTHX_ const char *const dir, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
d4470 1
a4470 3

STATIC void	S_incpush_use_sep(pTHX_ const char *p, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
a4472 1

d4477 1
a4477 2
STATIC void	S_init_postdump_symbols(pTHX_ int argc, char **argv, char **env)
			__attribute__nonnull__(pTHX_2);
a4479 1

d4481 1
a4481 2
STATIC SV*	S_mayberelocate(pTHX_ const char *const dir, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
a4483 1

d4491 1
a4491 3
STATIC PerlIO *	S_open_script(pTHX_ const char *scriptname, bool dosearch, bool *suidscript)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
a4493 1

d4503 1
a4503 3
STATIC void	S_do_chomp(pTHX_ SV *retval, SV *sv, bool chomping)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a4505 1

d4508 1
a4508 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4515 1
a4515 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
a4520 7
STATIC SV **	S_adjust_stack_on_leave(pTHX_ SV **newsp, SV **sp, SV **mark, I32 gimme, U32 flags, bool lvalue)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_ADJUST_STACK_ON_LEAVE	\
	assert(newsp); assert(sp); assert(mark)

d4522 1
a4522 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4526 1
a4526 2
STATIC void	S_destroy_matcher(pTHX_ PMOP* matcher)
			__attribute__nonnull__(pTHX_1);
a4528 1

d4533 1
a4533 1
STATIC bool	S_doeval(pTHX_ int gimme, CV* outside, U32 seq, HV* hh);
d4535 1
a4535 5
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
d4539 1
a4539 2
STATIC MAGIC *	S_doparseform(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
a4541 1

d4545 1
a4545 1
STATIC I32	S_dopoptogiven(pTHX_ I32 startingblock)
d4549 1
a4549 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4557 1
a4557 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4565 1
a4565 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4570 1
a4570 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4578 1
a4578 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
d4583 1
a4583 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d4587 1
a4587 2
STATIC void	S_rxres_free(pTHX_ void** rsp)
			__attribute__nonnull__(pTHX_1);
d4590 1
a4590 4

STATIC void	S_rxres_restore(pTHX_ void **rsp, REGEXP *rx)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4593 1
a4593 3

STATIC void	S_save_lines(pTHX_ AV *array, SV *sv)
			__attribute__nonnull__(pTHX_2);
a4595 1

d4598 1
a4598 3
STATIC void	S_do_oddball(pTHX_ SV **oddkey, SV **firstkey)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4601 2
a4602 5

STATIC SV*	S_method_common(pTHX_ SV* meth, U32* hashp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_METHOD_COMMON	\
a4603 1

d4606 1
a4606 10
STATIC char *	S_bytes_to_uni(const U8 *start, STRLEN len, char *dest, const bool needs_swap)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_BYTES_TO_UNI	\
	assert(start); assert(dest)

STATIC int	S_div128(pTHX_ SV *pnum, bool *done)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4609 1
a4609 4

STATIC char	S_first_symbol(const char *pat, const char *patend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
a4611 1

d4613 1
a4613 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4617 1
a4617 3
STATIC const char *	S_group_end(pTHX_ const char *patptr, const char *patend, char ender)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a4619 1

d4621 1
a4621 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4625 1
a4625 2
STATIC I32	S_measure_struct(pTHX_ struct tempsym* symptr)
			__attribute__nonnull__(pTHX_1);
d4628 1
a4628 3

STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m)
			__attribute__nonnull__(pTHX_1);
d4631 4
d4636 1
a4636 3
STATIC bool	S_need_utf8(const char *pat, const char *patend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d4639 1
a4639 3

STATIC bool	S_next_symbol(pTHX_ struct tempsym* symptr)
			__attribute__nonnull__(pTHX_1);
d4642 1
a4642 6

STATIC SV **	S_pack_rec(pTHX_ SV *cat, struct tempsym* symptr, SV **beglist, SV **endlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
a4644 1

d4646 1
a4646 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4650 1
a4650 5
STATIC I32	S_unpack_rec(pTHX_ struct tempsym* symptr, const char *s, const char *strbeg, const char *strend, const char **new_s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
a4652 1

d4655 1
a4655 3
STATIC I32	S_amagic_cmp(pTHX_ SV *const str1, SV *const str2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4658 1
a4658 10

STATIC I32	S_amagic_cmp_locale(pTHX_ SV *const str1, SV *const str2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_CMP_LOCALE	\
	assert(str1); assert(str2)

STATIC I32	S_amagic_i_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4661 1
a4661 4

STATIC I32	S_amagic_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4664 1
a4664 3

STATIC void	S_qsortsvu(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t compare)
			__attribute__nonnull__(pTHX_3);
d4667 1
a4667 4

STATIC I32	S_sortcv(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4670 1
a4670 4

STATIC I32	S_sortcv_stacked(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4673 1
a4673 4

STATIC I32	S_sortcv_xsub(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4676 1
a4676 4

STATIC I32	S_sv_i_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4679 1
a4679 4

STATIC I32	S_sv_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4682 5
a4686 1

d4689 1
a4689 3
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4692 1
a4692 3

STATIC SV *	S_space_join_names_mortal(pTHX_ char *const *array)
			__attribute__nonnull__(pTHX_1);
a4694 1

d4697 1
a4697 2
STATIC void	S__append_range_to_invlist(pTHX_ SV* const invlist, const UV start, const UV end)
			__attribute__nonnull__(pTHX_1);
d4700 2
a4701 4

PERL_STATIC_INLINE UV*	S__invlist_array_init(pTHX_ SV* const invlist, const bool will_have_0)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4705 8
d4717 1
a4717 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d4721 4
a4724 4
PERL_STATIC_INLINE void	S_alloc_maybe_populate_EXACT(pTHX_ RExC_state_t *pRExC_state, regnode *node, I32 *flagp, STRLEN len, UV code_point, bool downgradable)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4727 2
d4730 1
a4730 2
PERL_STATIC_INLINE U8	S_compute_EXACTish(pTHX_ RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
d4733 7
d4741 1
a4741 8
STATIC bool	S_could_it_be_a_POSIX_class(pTHX_ RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_COULD_IT_BE_A_POSIX_CLASS	\
	assert(pRExC_state)

STATIC SV*	S_get_ANYOF_cp_list_for_ssc(pTHX_ const RExC_state_t *pRExC_state, const regnode_charclass* const node)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4744 2
a4745 4

PERL_STATIC_INLINE STRLEN*	S_get_invlist_iter_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4749 1
a4749 9
PERL_STATIC_INLINE IV*	S_get_invlist_previous_index_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_INVLIST_PREVIOUS_INDEX_ADDR	\
	assert(invlist)

STATIC bool	S_grok_bslash_N(pTHX_ RExC_state_t *pRExC_state, regnode** nodep, UV *valuep, I32 *flagp, U32 depth, bool in_char_class, const bool strict)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4);
d4752 7
a4758 5

STATIC regnode*	S_handle_regex_sets(pTHX_ RExC_state_t *pRExC_state, SV ** return_invlist, I32 *flagp, U32 depth, char * const oregcomp_parse)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
d4761 3
a4763 5

PERL_STATIC_INLINE UV*	S_invlist_array(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_ARRAY	\
d4766 3
a4768 4
PERL_STATIC_INLINE SV*	S_invlist_clone(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_CLONE	\
d4771 1
a4771 2
STATIC void	S_invlist_extend(pTHX_ SV* const invlist, const UV len)
			__attribute__nonnull__(pTHX_1);
d4774 2
a4775 4

PERL_STATIC_INLINE UV	S_invlist_highest(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4779 2
a4780 3
PERL_STATIC_INLINE bool	S_invlist_is_iterating(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4784 1
a4784 2
PERL_STATIC_INLINE void	S_invlist_iterfinish(pTHX_ SV* invlist)
			__attribute__nonnull__(pTHX_1);
d4787 1
a4787 3

PERL_STATIC_INLINE void	S_invlist_iterinit(pTHX_ SV* invlist)
			__attribute__nonnull__(pTHX_1);
d4790 2
a4791 6

STATIC bool	S_invlist_iternext(pTHX_ SV* invlist, UV* start, UV* end)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4795 2
a4796 3
PERL_STATIC_INLINE UV	S_invlist_max(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4800 1
a4800 8
PERL_STATIC_INLINE IV	S_invlist_previous_index(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_PREVIOUS_INDEX	\
	assert(invlist)

PERL_STATIC_INLINE void	S_invlist_set_len(pTHX_ SV* const invlist, const UV len, const bool offset)
			__attribute__nonnull__(pTHX_1);
d4803 4
a4806 16

PERL_STATIC_INLINE void	S_invlist_set_previous_index(pTHX_ SV* const invlist, const IV index)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_SET_PREVIOUS_INDEX	\
	assert(invlist)

PERL_STATIC_INLINE void	S_invlist_trim(pTHX_ SV* const invlist)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_TRIM	\
	assert(invlist)

STATIC U32	S_join_exact(pTHX_ RExC_state_t *pRExC_state, regnode *scan, UV *min_subtract, bool *unfolded_multi_char, U32 flags, regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d4809 1
a4809 7

STATIC I32	S_make_trie(pTHX_ RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d4812 1
a4812 10

STATIC void	S_make_trie_failtable(pTHX_ RExC_state_t *pRExC_state, regnode *source, regnode *stclass, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MAKE_TRIE_FAILTABLE	\
	assert(pRExC_state); assert(source); assert(stclass)

STATIC char *	S_nextchar(pTHX_ RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
d4815 4
a4818 3

STATIC void	S_parse_lparen_question_flags(pTHX_ RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
d4821 1
a4821 4

STATIC void	S_populate_ANYOF_from_invlist(pTHX_ regnode *node, SV** invlist_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a4823 1

d4825 1
a4825 3
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4829 1
a4829 3
STATIC regnode*	S_reg(pTHX_ RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d4832 4
a4835 3

STATIC regnode*	S_reg_node(pTHX_ RExC_state_t *pRExC_state, U8 op)
			__attribute__nonnull__(pTHX_1);
d4838 1
a4838 3

STATIC UV	S_reg_recode(pTHX_ const char value, SV **encp)
			__attribute__nonnull__(pTHX_2);
d4841 1
a4841 3

STATIC SV *	S_reg_scan_name(pTHX_ RExC_state_t *pRExC_state, U32 flags)
			__attribute__nonnull__(pTHX_1);
d4844 1
a4844 3

STATIC bool	S_reg_skipcomment(pTHX_ RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
d4846 2
a4847 4
	assert(pRExC_state)

STATIC regnode*	S_reganode(pTHX_ RExC_state_t *pRExC_state, U8 op, U32 arg)
			__attribute__nonnull__(pTHX_1);
d4850 1
a4850 4

STATIC regnode*	S_regatom(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4853 1
a4853 4

STATIC regnode*	S_regbranch(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, I32 first, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4856 1
a4856 4

STATIC regnode*	S_regclass(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth, const bool stop_at_1, bool allow_multi_fold, const bool silence_non_portable, SV** ret_invlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4859 2
d4862 1
a4862 3
STATIC void	S_reginsert(pTHX_ RExC_state_t *pRExC_state, U8 op, regnode *opnd, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d4865 4
a4868 11

STATIC char *	S_regpatws(RExC_state_t *pRExC_state, char *p, const bool recognize_comment)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_REGPATWS	\
	assert(pRExC_state); assert(p)

STATIC regnode*	S_regpiece(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4871 1
a4871 10

PERL_STATIC_INLINE I32	S_regpposixcc(pTHX_ RExC_state_t *pRExC_state, I32 value, const bool strict)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REGPPOSIXCC	\
	assert(pRExC_state)

STATIC void	S_regtail(pTHX_ RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4874 1
a4874 18

PERL_STATIC_INLINE STRLEN	S_reguni(pTHX_ const RExC_state_t *pRExC_state, UV uv, char *s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGUNI	\
	assert(pRExC_state); assert(s)

STATIC char *	S_regwhite(RExC_state_t *pRExC_state, char *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_REGWHITE	\
	assert(pRExC_state); assert(p)

STATIC void	S_scan_commit(pTHX_ const RExC_state_t *pRExC_state, struct scan_data_t *data, SSize_t *minlenp, int is_inf)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4877 1
a4877 4

STATIC void	S_set_ANYOF_arg(pTHX_ RExC_state_t* const pRExC_state, regnode* const node, SV* const cp_list, SV* const runtime_defns, SV* const only_utf8_locale_list, SV* const swash, const bool has_user_defined_property)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4880 4
a4883 3

PERL_STATIC_INLINE void	S_ssc_add_range(pTHX_ regnode_ssc *ssc, UV const start, UV const end)
			__attribute__nonnull__(pTHX_1);
d4886 1
a4886 5

STATIC void	S_ssc_and(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *and_with)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4889 1
a4889 3

STATIC void	S_ssc_anything(pTHX_ regnode_ssc *ssc)
			__attribute__nonnull__(pTHX_1);
d4892 1
a4892 3

PERL_STATIC_INLINE void	S_ssc_clear_locale(pTHX_ regnode_ssc *ssc)
			__attribute__nonnull__(pTHX_1);
d4895 1
a4895 3

PERL_STATIC_INLINE void	S_ssc_cp_and(pTHX_ regnode_ssc *ssc, UV const cp)
			__attribute__nonnull__(pTHX_1);
d4898 1
a4898 4

STATIC void	S_ssc_finalize(pTHX_ RExC_state_t *pRExC_state, regnode_ssc *ssc)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4901 1
a4901 4

STATIC void	S_ssc_init(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4904 1
a4904 4

PERL_STATIC_INLINE void	S_ssc_intersection(pTHX_ regnode_ssc *ssc, SV* const invlist, const bool invert_2nd)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4907 2
a4908 4

STATIC int	S_ssc_is_anything(pTHX_ const regnode_ssc *ssc)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4912 2
a4913 4
STATIC int	S_ssc_is_cp_posixl_init(pTHX_ const RExC_state_t *pRExC_state, const regnode_ssc *ssc)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4917 1
a4917 4
STATIC void	S_ssc_or(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *or_with)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4920 1
a4920 4

PERL_STATIC_INLINE void	S_ssc_union(pTHX_ regnode_ssc *ssc, SV* const invlist, const bool invert_2nd)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4923 1
a4923 7

STATIC SSize_t	S_study_chunk(pTHX_ RExC_state_t *pRExC_state, regnode **scanp, SSize_t *minlenp, SSize_t *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U32 recursed_depth, regnode_ssc *and_withp, U32 flags, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
a4925 1

d4928 1
a4928 4
PERL_CALLCONV void	Perl__invlist_dump(pTHX_ PerlIO *file, I32 level, const char* const indent, SV* const invlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
a4930 1

d4933 3
d4937 1
a4937 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4943 1
a4943 2
PERL_CALLCONV SV*	Perl__get_regclass_nonbitmap_data(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **lonly_utf8_locale)
			__attribute__nonnull__(pTHX_2);
d4946 7
a4952 1

d4956 1
a4956 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4960 2
a4961 3
PERL_STATIC_INLINE bool	S__invlist_contains_cp(pTHX_ SV* const invlist, const UV cp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4965 2
a4966 9
PERL_CALLCONV SV*	Perl__invlist_contents(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__INVLIST_CONTENTS	\
	assert(invlist)

PERL_STATIC_INLINE UV	S__invlist_len(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4970 2
a4971 3
PERL_CALLCONV IV	Perl__invlist_search(pTHX_ SV* const invlist, const UV cp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4976 1
a4976 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4980 2
a4981 3
PERL_STATIC_INLINE bool*	S_get_invlist_offset_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4985 5
d4992 1
a4992 4
PERL_CALLCONV SV*	Perl__core_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none, SV* invlist, U8* const flags_p)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a4994 1

d4996 3
a4998 5
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_TOKE_C)
STATIC char*	S_form_short_octal_warning(pTHX_ const char * const s, const STRLEN len)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
d5002 1
a5002 1
STATIC char	S_grok_bslash_c(pTHX_ const char source, const bool output_warning)
d5005 2
a5006 5
STATIC bool	S_grok_bslash_o(pTHX_ char** s, UV* uv, const char** error_msg, const bool output_warning, const bool strict, const bool silence_non_portable, const bool utf8)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d5010 2
a5011 5
PERL_STATIC_INLINE bool	S_grok_bslash_x(pTHX_ char** s, UV* uv, const char** error_msg, const bool output_warning, const bool strict, const bool silence_non_portable, const bool utf8)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d5015 1
a5015 1
PERL_STATIC_INLINE I32	S_regcurly(pTHX_ const char *s, const bool rbrace_must_be_escaped)
d5017 1
a5017 2
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
d5026 2
a5027 8
/* PERL_CALLCONV void	_invlist_intersection(pTHX_ SV* const a, SV* const b, SV** i)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV void	Perl__invlist_intersection_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, const bool complement_b, SV** i)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
d5030 1
a5030 3

PERL_CALLCONV void	Perl__invlist_invert(pTHX_ SV* const invlist)
			__attribute__nonnull__(pTHX_1);
d5033 1
a5033 4

PERL_CALLCONV void	Perl__invlist_populate_swatch(pTHX_ SV* const invlist, const UV start, const UV end, U8* swatch)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4);
d5036 3
a5038 13

/* PERL_CALLCONV void	_invlist_subtract(pTHX_ SV* const a, SV* const b, SV** result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */

/* PERL_CALLCONV void	_invlist_union(pTHX_ SV* const a, SV* const b, SV** output)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV void	Perl__invlist_union_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, const bool complement_b, SV** output)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
a5040 1

d5045 1
a5045 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d5050 1
a5050 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5056 30
d5087 1
a5087 5
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d5095 1
a5095 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5099 20
a5118 4
STATIC I32	S_reg_check_named_buff_matched(pTHX_ const regexp *rex, const regnode *scan)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5122 1
a5122 3
STATIC void	S_regcppop(pTHX_ regexp *rex, U32 *maxopenparen_p)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5125 1
a5125 3

STATIC CHECKPOINT	S_regcppush(pTHX_ const regexp *rex, I32 parenfloor, U32 maxopenparen)
			__attribute__nonnull__(pTHX_1);
a5127 1

d5129 1
a5129 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
d5134 1
a5134 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
d5139 1
a5139 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
d5144 1
a5144 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d5149 1
a5149 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d5154 1
a5154 5
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d5158 2
a5159 4
STATIC I32	S_regtry(pTHX_ regmatch_info *reginfo, char **startposp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5163 1
a5163 2
STATIC bool	S_to_byte_substr(pTHX_ regexp * prog)
			__attribute__nonnull__(pTHX_1);
d5166 1
a5166 3

STATIC void	S_to_utf8_substr(pTHX_ regexp * prog)
			__attribute__nonnull__(pTHX_1);
a5168 1

d5172 1
a5172 2
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr, const U32 flags)
			__attribute__nonnull__(pTHX_1);
a5174 1

d5177 1
a5177 3
STATIC char *	S_F0convert(NV nv, char *const endbuf, STRLEN *const len)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
d5180 1
a5180 4

STATIC void	S_anonymise_cv_maybe(pTHX_ GV *gv, CV *cv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5183 1
a5183 4

STATIC void	S_assert_uft8_cache_coherent(pTHX_ const char *const func, STRLEN from_cache, STRLEN real, SV *const sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4);
d5186 1
a5186 3

STATIC bool	S_curse(pTHX_ SV * const sv, const bool check_refcnt)
			__attribute__nonnull__(pTHX_1);
a5188 1

d5190 1
a5190 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5194 1
a5194 2
STATIC I32	S_find_array_subscript(pTHX_ const AV *const av, const SV *const val)
			__attribute__nonnull__(pTHX_2);
d5197 1
a5197 3

STATIC SV *	S_find_hash_subscript(pTHX_ const HV *const hv, const SV *const val)
			__attribute__nonnull__(pTHX_2);
d5200 4
a5203 4

STATIC SV*	S_find_uninit_var(pTHX_ const OP *const obase, const SV *const uninit_sv, bool top);
STATIC bool	S_glob_2number(pTHX_ GV* const gv)
			__attribute__nonnull__(pTHX_1);
d5206 1
a5206 4

STATIC void	S_glob_assign_glob(pTHX_ SV *const dstr, SV *const sstr, const int dtype)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a5208 7

STATIC void	S_glob_assign_ref(pTHX_ SV *const dstr, SV *const sstr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GLOB_ASSIGN_REF	\
	assert(dstr); assert(sstr)

d5210 1
a5210 2
STATIC void	S_not_a_number(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d5213 3
a5215 1

d5217 1
a5217 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
d5221 1
a5221 2
STATIC bool	S_sv_2iuv_common(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
d5224 1
a5224 3

STATIC void	S_sv_add_arena(pTHX_ char *const ptr, const U32 size, const U32 flags)
			__attribute__nonnull__(pTHX_1);
d5227 4
a5230 5

STATIC STRLEN	S_sv_pos_b2u_midway(pTHX_ const U8 *const s, const U8 *const target, const U8 *end, STRLEN endu)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d5233 1
a5233 6

STATIC STRLEN	S_sv_pos_u2b_cached(pTHX_ SV *const sv, MAGIC **const mgp, const U8 *const start, const U8 *const send, STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d5236 1
a5236 6

STATIC STRLEN	S_sv_pos_u2b_forwards(const U8 *const start, const U8 *const send, STRLEN *const uoffset, bool *const at_end)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
d5239 1
a5239 4

STATIC STRLEN	S_sv_pos_u2b_midway(const U8 *const start, const U8 *send, STRLEN uoffset, const STRLEN uend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d5242 1
a5242 3

PERL_STATIC_INLINE void	S_sv_unglob(pTHX_ SV *const sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
a5244 1

d5246 1
a5246 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(5);
d5250 1
a5250 3
STATIC void	S_utf8_mg_len_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN ulen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5253 1
a5253 4

STATIC void	S_utf8_mg_pos_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN byte, const STRLEN utf8, const STRLEN blen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5256 1
a5256 3

STATIC I32	S_visit(pTHX_ SVFUNC_t f, const U32 flags, const U32 mask)
			__attribute__nonnull__(pTHX_1);
a5258 10

#  if defined(PERL_OLD_COPY_ON_WRITE)
STATIC void	S_sv_release_COW(pTHX_ SV *sv, const char *pvx, SV *after)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SV_RELEASE_COW	\
	assert(sv); assert(pvx); assert(after)

#  endif
d5261 1
a5261 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5265 1
a5265 4
STATIC SV **	S_sv_dup_inc_multiple(pTHX_ SV *const *source, SV **dest, SSize_t items, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
d5268 1
a5268 3

STATIC void	S_unreferenced_to_tmp_stack(pTHX_ AV *const unreferenced)
			__attribute__nonnull__(pTHX_1);
a5270 1

d5281 1
a5281 4
STATIC void	S_checkcomma(pTHX_ const char *s, const char *name, const char *what)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a5283 1

d5286 1
a5286 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5291 1
a5291 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5295 1
a5295 2
STATIC void	S_force_ident(pTHX_ const char *s, int kind)
			__attribute__nonnull__(pTHX_1);
a5297 1

d5300 1
a5300 2
STATIC char*	S_force_strict_version(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
d5303 1
a5303 3

STATIC char*	S_force_version(pTHX_ char *s, int guessing)
			__attribute__nonnull__(pTHX_1);
d5306 1
a5306 3

STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack)
			__attribute__nonnull__(pTHX_1);
a5308 1

d5310 1
a5310 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5314 1
a5314 2
STATIC void	S_incline(pTHX_ const char *s)
			__attribute__nonnull__(pTHX_1);
d5317 1
a5317 3

STATIC int	S_intuit_method(pTHX_ char *s, GV *gv, CV *cv)
			__attribute__nonnull__(pTHX_1);
d5320 1
a5320 3

STATIC int	S_intuit_more(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
d5323 1
a5323 3

STATIC I32	S_lop(pTHX_ I32 f, int x, char *s)
			__attribute__nonnull__(pTHX_3);
a5325 1

d5329 1
a5329 3
STATIC SV*	S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, STRLEN keylen, SV *sv, SV *pv, const char *type, STRLEN typelen)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
d5332 1
a5332 3

STATIC void	S_no_op(pTHX_ const char *const what, char *s)
			__attribute__nonnull__(pTHX_1);
d5335 1
a5335 5

STATIC void	S_parse_ident(pTHX_ char **s, char **d, char * const e, int allow_package, bool is_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a5337 1

d5340 1
a5340 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5345 1
a5345 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5350 1
a5350 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5354 1
a5354 3
STATIC char*	S_scan_ident(pTHX_ char *s, char *dest, STRLEN destlen, I32 ck_uni)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a5356 1

d5358 1
a5358 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5363 1
a5363 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5367 2
a5368 3
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims, int re_reparse, bool deprecate_escaped_matching, char **delimp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5373 1
a5373 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5378 1
a5378 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5382 1
a5382 4
STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5);
a5384 1

d5386 1
a5386 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5400 1
a5400 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5405 1
a5405 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5409 1
a5409 2
STATIC SV*	S_tokeq(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
a5411 1

d5413 1
a5413 2
STATIC int	S_yywarn(pTHX_ const char *const s, U32 flags)
			__attribute__nonnull__(pTHX_1);
a5415 20

#  if defined(PERL_MAD)
STATIC void	S_curmad(pTHX_ char slot, SV *sv);
STATIC char*	S_skipspace0(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE0	\
	assert(s)

STATIC char*	S_skipspace1(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE1	\
	assert(s)

STATIC char*	S_skipspace2(pTHX_ char *s, SV **sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE2	\
	assert(s)

STATIC void	S_start_force(pTHX_ int where);
#  endif
d5418 1
a5418 3
STATIC bool	S_isa_lookup(pTHX_ HV *stash, const char * const name, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a5420 1

d5423 3
d5427 1
a5427 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
a5430 6
PERL_STATIC_INLINE STRLEN	S_is_utf8_char_slow(const U8 *s, const STRLEN len)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_SLOW	\
	assert(s)

d5432 1
a5432 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d5436 5
d5442 1
a5442 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d5446 1
a5446 1
STATIC U8	S_to_lower_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp)
d5451 1
a5451 3
PERL_CALLCONV UV	Perl__to_upper_title_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const char S_or_s)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a5453 1

d5456 1
a5456 3
PERL_CALLCONV UV	Perl__to_fold_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const unsigned int flags)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a5458 1

d5464 1
a5464 2
STATIC SV *	S_with_queued_errors(pTHX_ SV *ex)
			__attribute__nonnull__(pTHX_1);
d5467 3
a5469 1

d5471 1
a5471 4
STATIC void	S_mem_log_common(enum mem_log_type mlt, const UV n, const UV typesize, const char *type_name, const SV *sv, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname)
			__attribute__nonnull__(4)
			__attribute__nonnull__(8)
			__attribute__nonnull__(10);
a5473 1

d5476 14
a5489 34
#if defined(PERL_MAD)
PERL_CALLCONV void	Perl_addmad(pTHX_ MADPROP* tm, MADPROP** root, char slot);
PERL_CALLCONV void	Perl_append_madprops(pTHX_ MADPROP* tm, OP* o, char slot);
PERL_CALLCONV void	Perl_do_op_xmldump(pTHX_ I32 level, PerlIO *file, const OP *o)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_OP_XMLDUMP	\
	assert(file)

PERL_CALLCONV void	Perl_do_pmop_xmldump(pTHX_ I32 level, PerlIO *file, const PMOP *pm)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_PMOP_XMLDUMP	\
	assert(file)

PERL_CALLCONV void	Perl_mad_free(pTHX_ MADPROP* mp);
PERL_CALLCONV int	Perl_madlex(pTHX);
PERL_CALLCONV int	Perl_madparse(pTHX_ int gramtype);
PERL_CALLCONV OP*	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
PERL_CALLCONV MADPROP*	Perl_newMADPROP(pTHX_ char key, char type, void* val, I32 vlen);
PERL_CALLCONV MADPROP*	Perl_newMADsv(pTHX_ char key, SV* sv)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_NEWMADSV	\
	assert(sv)

PERL_CALLCONV TOKEN*	Perl_newTOKEN(pTHX_ I32 optype, YYSTYPE lval, MADPROP* madprop);
PERL_CALLCONV void	Perl_op_getmad(pTHX_ OP* from, OP* o, char slot);
PERL_CALLCONV void	Perl_op_getmad_weak(pTHX_ OP* from, OP* o, char slot);
PERL_CALLCONV void	Perl_op_xmldump(pTHX_ const OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OP_XMLDUMP	\
	assert(o)

PERL_CALLCONV OP*	Perl_package(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PACKAGE	\
a5490 87

PERL_CALLCONV void	Perl_pad_peg(const char* s)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PAD_PEG	\
	assert(s)

PERL_CALLCONV void	Perl_pmop_xmldump(pTHX_ const PMOP* pm);
PERL_CALLCONV void	Perl_prepend_madprops(pTHX_ MADPROP* mp, OP* o, char slot);
PERL_CALLCONV char*	Perl_sv_catxmlpv(pTHX_ SV *dsv, const char *pv, int utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATXMLPV	\
	assert(dsv); assert(pv)

PERL_CALLCONV char*	Perl_sv_catxmlpvn(pTHX_ SV *dsv, const char *pv, STRLEN len, int utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATXMLPVN	\
	assert(dsv); assert(pv)

PERL_CALLCONV char*	Perl_sv_catxmlsv(pTHX_ SV *dsv, SV *ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATXMLSV	\
	assert(dsv); assert(ssv)

PERL_CALLCONV char*	Perl_sv_xmlpeek(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_XMLPEEK	\
	assert(sv)

PERL_CALLCONV void	Perl_token_free(pTHX_ TOKEN *tk)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_TOKEN_FREE	\
	assert(tk)

PERL_CALLCONV void	Perl_token_getmad(pTHX_ TOKEN *tk, OP *o, char slot)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_TOKEN_GETMAD	\
	assert(tk)

PERL_CALLCONV OP *	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)

PERL_CALLCONV void	Perl_xmldump_all(pTHX);
PERL_CALLCONV void	Perl_xmldump_all_perl(pTHX_ bool justperl);
PERL_CALLCONV void	Perl_xmldump_eval(pTHX);
PERL_CALLCONV void	Perl_xmldump_form(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_FORM	\
	assert(gv)

PERL_CALLCONV void	Perl_xmldump_indent(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_XMLDUMP_INDENT	\
	assert(file); assert(pat)

PERL_CALLCONV void	Perl_xmldump_packsubs(pTHX_ const HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_PACKSUBS	\
	assert(stash)

PERL_CALLCONV void	Perl_xmldump_packsubs_perl(pTHX_ const HV* stash, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_PACKSUBS_PERL	\
	assert(stash)

PERL_CALLCONV void	Perl_xmldump_sub(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_SUB	\
	assert(gv)

PERL_CALLCONV void	Perl_xmldump_sub_perl(pTHX_ const GV* gv, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_SUB_PERL	\
	assert(gv)

PERL_CALLCONV void	Perl_xmldump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_XMLDUMP_VINDENT	\
	assert(file); assert(pat)

d5496 1
a5496 2
PERL_CALLCONV I32	Perl_unlnk(pTHX_ const char* f)
			__attribute__nonnull__(pTHX_1);
d5499 20
a5518 1

d5521 1
a5521 2
PERL_CALLCONV PADOFFSET	Perl_alloccopstash(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
a5523 1

d5525 1
a5525 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5529 1
a5529 2
PERL_CALLCONV void	Perl_clone_params_del(CLONE_PARAMS *param)
			__attribute__nonnull__(1);
a5531 1

d5534 1
a5534 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d5539 1
a5539 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_4);
d5544 1
a5544 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5548 1
a5548 2
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO *const fp, const char type, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_3);
a5550 1

d5552 1
a5552 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5557 1
a5557 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d5562 1
a5562 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5567 1
a5567 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5571 1
a5571 3
PERL_CALLCONV struct mro_meta*	Perl_mro_meta_dup(pTHX_ struct mro_meta* smeta, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a5573 1

d5576 1
a5576 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d5581 1
a5581 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5583 11
a5593 1
	assert(param)
d5595 1
a5595 2
PERL_CALLCONV yy_parser*	Perl_parser_dup(pTHX_ const yy_parser *const proto, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_2);
d5598 1
a5598 3

PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter *proto_perl, UV flags)
			__attribute__nonnull__(1);
d5601 1
a5601 5

PERL_CALLCONV void	Perl_re_dup_guts(pTHX_ const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d5604 1
a5604 4

PERL_CALLCONV void*	Perl_regdupe_internal(pTHX_ REGEXP * const r, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5607 1
a5607 5

PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV *const dstr, const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
a5609 1

d5611 1
a5611 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5617 1
a5617 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5622 1
a5622 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5627 1
a5627 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d5632 8
d5641 1
a5641 3
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5644 1
a5644 4

PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d5647 2
a5648 8

/* PERL_CALLCONV char*	sv_collxfrm(pTHX_ SV *const sv, STRLEN *const nxp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

PERL_CALLCONV char*	Perl_sv_collxfrm_flags(pTHX_ SV *const sv, STRLEN *const nxp, I32 const flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a5650 1

d5668 1
a5668 2
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *vbuf, Size_t count)
			__attribute__nonnull__(pTHX_2);
d5671 2
a5672 1

d5687 1
a5687 2
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *vbuf, Size_t count)
			__attribute__nonnull__(pTHX_2);
d5690 1
a5690 3

PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *vbuf, Size_t count)
			__attribute__nonnull__(pTHX_2);
d5693 8
a5700 1

d5707 1
a5707 2
			__attribute__noreturn__
			__attribute__nonnull__(1);
d5713 1
a5713 3
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d5716 1
a5716 3

PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd)
			__attribute__nonnull__(pTHX_1);
d5719 1
a5719 3

PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd)
			__attribute__nonnull__(pTHX_1);
a5721 1

d5724 1
a5724 3
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a5726 1

@


1.17
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d4255 5
@


1.16
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d20 5
d30 5
a35 3
PERL_CALLCONV_NO_RET void	Perl_croak_memory_wrap(void)
			__attribute__noreturn__;

d78 1
a78 1
PERL_CALLCONV UV	Perl__to_uni_fold_flags(pTHX_ UV c, U8 *p, STRLEN *lenp, const U8 flags)
d84 1
a84 1
PERL_CALLCONV UV	Perl__to_utf8_fold_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, U8 flags, bool* tainted_ptr)
d90 1
a90 1
PERL_CALLCONV UV	Perl__to_utf8_lower_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, const bool flags, bool* tainted_ptr)
d96 1
a96 1
PERL_CALLCONV UV	Perl__to_utf8_title_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, const bool flags, bool* tainted_ptr)
d102 1
a102 1
PERL_CALLCONV UV	Perl__to_utf8_upper_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, const bool flags, bool* tainted_ptr)
d125 5
d167 1
a167 1
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV *av, I32 key, I32 flags)
d172 1
a172 1
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV *av, I32 key)
d178 1
a178 1
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV *av, I32 key)
d183 1
a183 1
PERL_CALLCONV void	Perl_av_extend_guts(pTHX_ AV *av, I32 key, SSize_t *maxp, SV ***allocp, SV ***arrayp)
d190 1
a190 1
PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV *av, I32 key, I32 lval)
d196 1
a196 1
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV *av, I32 fill)
d206 1
a206 1
PERL_CALLCONV I32	Perl_av_len(pTHX_ AV *av)
d212 1
a212 1
PERL_CALLCONV AV*	Perl_av_make(pTHX_ I32 size, SV **strp)
d240 1
a240 1
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV *av, I32 key, SV *val)
d245 1
a245 1
/* PERL_CALLCONV I32	Perl_av_tindex(pTHX_ AV *av)
d249 1
a249 1
PERL_STATIC_INLINE I32	S_av_top_index(pTHX_ AV *av)
d260 1
a260 1
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV *av, I32 num)
d368 6
a403 6
PERL_CALLCONV OP *	Perl_ck_die(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_DIE	\
	assert(o)

a459 6
PERL_CALLCONV OP *	Perl_ck_exit(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EXIT	\
	assert(o)

d660 5
d694 3
d726 6
d744 1
a744 1
PERL_CALLCONV const XOP *	Perl_custom_op_xop(pTHX_ const OP *o)
d746 1
a746 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CUSTOM_OP_XOP	\
	assert(o)
d767 3
d827 6
d937 6
d950 6
d1037 10
d1327 1
a1327 1
PERL_CALLCONV void	Perl_gv_check(pTHX_ const HV* stash)
d1501 5
d1606 1
a1606 1
PERL_CALLCONV STRLEN	Perl_hv_fill(pTHX_ HV const *const hv)
d1682 1
a1682 1
PERL_CALLCONV I32*	Perl_hv_placeholders_p(pTHX_ HV *hv)
d1789 8
d2345 1
a2345 1
PERL_CALLCONV SV*	Perl_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, const char *meth, U32 flags, U32 argc, ...)
d2533 6
d2696 1
a2700 5
PERL_CALLCONV void	Perl_my_swabn(void* ptr, int n)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MY_SWABN	\
	assert(ptr)

d2722 2
a2723 2
PERL_CALLCONV CV*	Perl_newATTRSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV CV*	Perl_newATTRSUB_flags(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block, U32 flags);
d2917 7
d3195 3
d3254 1
a3254 1
PERL_CALLCONV I32	Perl_pregexec(pTHX_ REGEXP * const prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, U32 nosave)
d3334 1
a3334 1
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
d3337 2
a3338 1
			__attribute__nonnull__(pTHX_4);
d3340 1
a3340 1
	assert(rx); assert(strpos); assert(strend)
d3476 1
a3476 1
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, I32 minend, SV *sv, void *data, U32 flags)
d3494 1
a3494 1
PERL_CALLCONV void	Perl_regprop(pTHX_ const regexp *prog, SV* sv, const regnode* o)
d3573 1
a3573 1
PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, I32 key)
d3578 1
a3578 1
/* PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, I32 idx, SV **sptr)
d3582 1
a3582 1
PERL_CALLCONV void	Perl_save_aelem_flags(pTHX_ AV* av, I32 idx, SV **sptr, const U32 flags)
d3734 5
d3833 1
d3862 1
a3862 1
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV** p, int n)
d3889 1
a3889 1
PERL_CALLCONV bool	Perl_sv_2bool_flags(pTHX_ SV *const sv, const I32 flags)
d3905 10
a3914 2
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV *sv); */
PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV *const sv, const I32 flags);
d3921 15
a3935 3
PERL_CALLCONV NV	Perl_sv_2nv_flags(pTHX_ SV *const sv, const I32 flags);
/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV *sv, STRLEN *lp); */
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags);
d3964 10
a3973 2
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv); */
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags);
d4231 5
d4261 5
d4649 1
d4670 1
a4670 1
PERL_CALLCONV OP *	Perl_tied_method(pTHX_ const char *const methname, SV **sp, SV *const sv, const MAGIC *const mg, const U32 flags, U32 argc, ...)
d4678 1
a4678 1
PERL_CALLCONV void	Perl_tmps_grow(pTHX_ I32 n);
d4822 1
a4822 1
PERL_CALLCONV UV	Perl_utf8_to_uvchr_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen)
d4824 1
a4824 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR_BUF	\
	assert(s); assert(send)
d4833 1
d4839 5
d4849 7
a4855 1
PERL_CALLCONV U8*	Perl_uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
d4857 1
a4857 1
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8_FLAGS	\
d4860 2
a4861 2
/* PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1); */
d4870 5
d4876 1
d4881 5
a5061 17
#if !(defined(EBCDIC))
/* PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)

/* PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8	\
	assert(d)

/* PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR	\
	assert(s)

#endif
d5098 5
d5323 11
d5335 2
a5336 1
STATIC U8	S_regtail_study(pTHX_ struct RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
d5372 1
a5391 24
#if defined(DUMP_FDS)
PERL_CALLCONV void	Perl_dump_fds(pTHX_ char* s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUMP_FDS	\
	assert(s)

#endif
#if defined(EBCDIC)
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)

PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8	\
	assert(d)

PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR	\
	assert(s)

#endif
a5466 14
#if defined(MYSWAP)
PERL_CALLCONV long	Perl_my_htonl(pTHX_ long l)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV long	Perl_my_ntohl(pTHX_ long l)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV short	Perl_my_swap(pTHX_ short s)
			__attribute__warn_unused_result__
			__attribute__pure__;

#endif
d5512 8
d5530 14
d5728 18
d5816 6
d5827 12
d5844 15
d5897 5
d5927 1
a5927 1
STATIC U32	S_ptr_hash(PTRV u);
d5963 2
a5964 2
#if defined(PERL_IN_LOCALE_C)
#  if defined(USE_LOCALE_NUMERIC) || defined(USE_LOCALE_COLLATE)
d5970 7
a5976 1
#  endif
d5979 6
a5984 1
STATIC SV*	S_magic_methcall1(pTHX_ SV *sv, const MAGIC *mg, const char *meth, U32 flags, int n, SV *val)
d5991 1
a5991 1
STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, const char *meth)
d5999 1
a5999 1
STATIC void	S_save_magic(pTHX_ I32 mgs_ix, SV *sv)
d6001 1
a6001 1
#define PERL_ARGS_ASSERT_SAVE_MAGIC	\
d6015 1
a6015 1
STATIC void	S_mro_clean_isarev(pTHX_ HV * const isa, const char * const name, const STRLEN len, HV * const exceptions, U32 flags)
d6052 1
a6052 1
STATIC void	S_bad_type_pv(pTHX_ I32 n, const char *t, const char *name, U32 flags, const OP *kid)
d6056 2
a6057 2
#define PERL_ARGS_ASSERT_BAD_TYPE_PV	\
	assert(t); assert(name); assert(kid)
d6059 1
a6059 1
STATIC void	S_bad_type_sv(pTHX_ I32 n, const char *t, SV *namesv, U32 flags, const OP *kid)
d6063 2
a6064 2
#define PERL_ARGS_ASSERT_BAD_TYPE_SV	\
	assert(t); assert(namesv); assert(kid)
d6124 7
d6162 5
d6351 1
a6351 1
STATIC SV **	S_adjust_stack_on_leave(pTHX_ SV **newsp, SV **sp, SV **mark, I32 gimme, U32 flags)
d6428 1
a6428 1
STATIC bool	S_path_is_absolute(const char *name)
d6431 1
a6431 1
#define PERL_ARGS_ASSERT_PATH_IS_ABSOLUTE	\
d6472 1
a6472 1
STATIC char *	S_bytes_to_uni(const U8 *start, STRLEN len, char *dest)
d6618 1
a6618 2
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d6620 1
a6620 1
	assert(cv); assert(gv); assert(retop)
a6639 6
STATIC SV*	S__new_invlist_C_array(pTHX_ UV* list)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__NEW_INVLIST_C_ARRAY	\
	assert(list)

d6643 1
a6643 1
STATIC U32	S_add_data(struct RExC_state_t *pRExC_state, U32 n, const char *s)
d6646 1
a6646 1
			__attribute__nonnull__(3);
d6650 1
a6650 1
PERL_STATIC_INLINE void	S_alloc_maybe_populate_EXACT(pTHX_ struct RExC_state_t *pRExC_state, regnode *node, I32 *flagp, STRLEN len, UV code_point)
d6657 1
a6657 32
STATIC void	S_cl_and(struct regnode_charclass_class *cl, const struct regnode_charclass_class *and_with)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_AND	\
	assert(cl); assert(and_with)

STATIC void	S_cl_anything(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_ANYTHING	\
	assert(pRExC_state); assert(cl)

STATIC void	S_cl_init(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_INIT	\
	assert(pRExC_state); assert(cl)

STATIC int	S_cl_is_anything(const struct regnode_charclass_class *cl)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_CL_IS_ANYTHING	\
	assert(cl)

STATIC void	S_cl_or(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl, const struct regnode_charclass_class *or_with)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_CL_OR	\
	assert(pRExC_state); assert(cl); assert(or_with)

PERL_STATIC_INLINE U8	S_compute_EXACTish(pTHX_ struct RExC_state_t *pRExC_state)
d6662 1
a6662 1
STATIC bool	S_could_it_be_a_POSIX_class(pTHX_ struct RExC_state_t *pRExC_state)
d6667 7
a6673 1
PERL_STATIC_INLINE UV*	S_get_invlist_iter_addr(pTHX_ SV* invlist)
d6685 1
a6685 13
PERL_STATIC_INLINE UV*	S_get_invlist_version_id_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_INVLIST_VERSION_ID_ADDR	\
	assert(invlist)

PERL_STATIC_INLINE UV*	S_get_invlist_zero_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_INVLIST_ZERO_ADDR	\
	assert(invlist)

STATIC bool	S_grok_bslash_N(pTHX_ struct RExC_state_t *pRExC_state, regnode** nodep, UV *valuep, I32 *flagp, U32 depth, bool in_char_class, const bool strict)
d6691 1
a6691 1
STATIC regnode*	S_handle_regex_sets(pTHX_ struct RExC_state_t *pRExC_state, SV ** return_invlist, I32 *flagp, U32 depth, char * const oregcomp_parse)
d6757 1
a6757 1
PERL_STATIC_INLINE void	S_invlist_set_len(pTHX_ SV* const invlist, const UV len)
d6772 1
a6772 1
STATIC U32	S_join_exact(pTHX_ struct RExC_state_t *pRExC_state, regnode *scan, UV *min_subtract, bool *has_exactf_sharp_s, U32 flags, regnode *val, U32 depth)
d6778 1
a6778 1
	assert(pRExC_state); assert(scan); assert(min_subtract); assert(has_exactf_sharp_s)
d6780 1
a6780 1
STATIC I32	S_make_trie(pTHX_ struct RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
d6789 1
a6789 1
STATIC void	S_make_trie_failtable(pTHX_ struct RExC_state_t *pRExC_state, regnode *source, regnode *stclass, U32 depth)
d6796 1
a6796 1
STATIC char *	S_nextchar(pTHX_ struct RExC_state_t *pRExC_state)
d6801 1
a6801 1
STATIC void	S_parse_lparen_question_flags(pTHX_ struct RExC_state_t *pRExC_state)
d6806 1
a6806 2
PERL_STATIC_NO_RET void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...)
			__attribute__noreturn__
d6809 7
d6819 1
a6819 1
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth)
d6825 1
a6825 1
STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t *pRExC_state, U8 op)
d6835 1
a6835 1
STATIC SV *	S_reg_scan_name(pTHX_ struct RExC_state_t *pRExC_state, U32 flags)
d6840 1
a6840 1
STATIC bool	S_reg_skipcomment(pTHX_ struct RExC_state_t *pRExC_state)
d6845 1
a6845 1
STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t *pRExC_state, U8 op, U32 arg)
d6850 1
a6850 1
STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
d6856 1
a6856 1
STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, I32 first, U32 depth)
d6862 1
a6862 1
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, U32 depth, const bool stop_at_1, bool allow_multi_fold, const bool silence_non_portable, SV** ret_invlist)
d6868 1
a6868 1
STATIC void	S_reginsert(pTHX_ struct RExC_state_t *pRExC_state, U8 op, regnode *opnd, U32 depth)
d6874 1
a6874 1
STATIC char *	S_regpatws(struct RExC_state_t *pRExC_state, char *p, const bool recognize_comment)
d6881 1
a6881 1
STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
d6887 1
a6887 1
PERL_STATIC_INLINE I32	S_regpposixcc(pTHX_ struct RExC_state_t *pRExC_state, I32 value, const bool strict)
d6892 1
a6892 1
STATIC void	S_regtail(pTHX_ struct RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
d6899 1
a6899 1
STATIC STRLEN	S_reguni(pTHX_ const struct RExC_state_t *pRExC_state, UV uv, char *s)
d6905 1
a6905 1
STATIC char *	S_regwhite(struct RExC_state_t *pRExC_state, char *p)
d6912 1
a6912 1
STATIC void	S_scan_commit(pTHX_ const struct RExC_state_t *pRExC_state, struct scan_data_t *data, I32 *minlenp, int is_inf)
d6919 78
a6996 1
STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t *pRExC_state, regnode **scanp, I32 *minlenp, I32 *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U8* recursed, struct regnode_charclass_class *and_withp, U32 flags, U32 depth)
d7006 11
a7016 2
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C)
PERL_STATIC_INLINE UV*	S__get_invlist_len_addr(pTHX_ SV* invlist)
d7019 9
a7027 2
#define PERL_ARGS_ASSERT__GET_INVLIST_LEN_ADDR	\
	assert(invlist)
d7029 2
d7067 6
d7091 1
a7091 1
STATIC char	S_grok_bslash_c(pTHX_ const char source, const bool utf8, const bool output_warning)
d7127 1
a7127 1
PERL_CALLCONV void	Perl__invlist_intersection_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, bool complement_b, SV** i)
a7137 5
PERL_CALLCONV void	Perl__invlist_invert_prop(pTHX_ SV* const invlist)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__INVLIST_INVERT_PROP	\
	assert(invlist)

d7153 1
a7153 1
PERL_CALLCONV void	Perl__invlist_union_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, bool complement_b, SV** output)
d7162 6
d7176 1
a7176 7
STATIC SV*	S_core_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CORE_REGCLASS_SWASH	\
	assert(node)

STATIC char*	S_find_byclass(pTHX_ regexp * prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo, bool is_utf_pat)
d7212 1
a7212 1
STATIC U8*	S_reghop3(U8 *s, I32 off, const U8 *lim)
d7219 9
a7227 1
STATIC U8*	S_reghopmaybe3(U8 *s, I32 off, const U8 *lim)
d7234 1
a7234 1
STATIC bool	S_reginclass(pTHX_ regexp * const prog, const regnode * const n, const U8 * const p, bool const utf8_target)
d7237 2
a7238 1
			__attribute__nonnull__(pTHX_3);
d7240 1
a7240 1
	assert(n); assert(p)
d7242 1
a7242 1
STATIC I32	S_regmatch(pTHX_ regmatch_info *reginfo, char *startpos, regnode *prog)
d7250 1
a7250 1
STATIC I32	S_regrepeat(pTHX_ regexp *prog, char **startposp, const regnode *p, I32 max, int depth, bool is_utf8_pat)
d7254 2
a7255 1
			__attribute__nonnull__(pTHX_3);
d7257 1
a7257 1
	assert(prog); assert(startposp); assert(p)
a7275 10
#  if defined(XXX_dmq)
STATIC U8*	S_reghop4(U8 *s, I32 off, const U8 *llim, const U8 *rlim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
#define PERL_ARGS_ASSERT_REGHOP4	\
	assert(s); assert(llim); assert(rlim)

#  endif
d7499 1
a7499 1
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack, int allow_tick)
a7552 1
STATIC void	S_readpipe_override(pTHX);
d7571 1
a7571 1
STATIC char*	S_scan_ident(pTHX_ char *s, const char *send, char *dest, STRLEN destlen, I32 ck_uni)
d7573 1
a7573 2
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d7575 1
a7575 1
	assert(s); assert(send); assert(dest)
d7589 1
a7589 1
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims, int re_reparse, bool deprecate_escaped_matching)
d7614 1
a7614 1
STATIC char*	S_skipspace(pTHX_ char *s)
d7617 1
a7617 1
#define PERL_ARGS_ASSERT_SKIPSPACE	\
d7695 1
a7695 1
PERL_STATIC_INLINE bool	S_is_utf8_common(pTHX_ const U8 *const p, SV **swash, const char * const swashname)
d7722 1
a7722 1
PERL_CALLCONV UV	Perl__to_fold_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const bool flags)
a7730 5
STATIC const COP*	S_closest_cop(pTHX_ const COP *cop, const OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CLOSEST_COP	\
	assert(cop)

a7870 72
#if defined(PERL_NEED_MY_BETOH16)
PERL_CALLCONV U16	Perl_my_betoh16(U16 n);
#endif
#if defined(PERL_NEED_MY_BETOH32)
PERL_CALLCONV U32	Perl_my_betoh32(U32 n);
#endif
#if defined(PERL_NEED_MY_BETOH64)
PERL_CALLCONV U64	Perl_my_betoh64(U64 n);
#endif
#if defined(PERL_NEED_MY_BETOHI)
PERL_CALLCONV int	Perl_my_betohi(int n);
#endif
#if defined(PERL_NEED_MY_BETOHL)
PERL_CALLCONV long	Perl_my_betohl(long n);
#endif
#if defined(PERL_NEED_MY_BETOHS)
PERL_CALLCONV short	Perl_my_betohs(short n);
#endif
#if defined(PERL_NEED_MY_HTOBE16)
PERL_CALLCONV U16	Perl_my_htobe16(U16 n);
#endif
#if defined(PERL_NEED_MY_HTOBE32)
PERL_CALLCONV U32	Perl_my_htobe32(U32 n);
#endif
#if defined(PERL_NEED_MY_HTOBE64)
PERL_CALLCONV U64	Perl_my_htobe64(U64 n);
#endif
#if defined(PERL_NEED_MY_HTOBEI)
PERL_CALLCONV int	Perl_my_htobei(int n);
#endif
#if defined(PERL_NEED_MY_HTOBEL)
PERL_CALLCONV long	Perl_my_htobel(long n);
#endif
#if defined(PERL_NEED_MY_HTOBES)
PERL_CALLCONV short	Perl_my_htobes(short n);
#endif
#if defined(PERL_NEED_MY_HTOLE16)
PERL_CALLCONV U16	Perl_my_htole16(U16 n);
#endif
#if defined(PERL_NEED_MY_HTOLE32)
PERL_CALLCONV U32	Perl_my_htole32(U32 n);
#endif
#if defined(PERL_NEED_MY_HTOLE64)
PERL_CALLCONV U64	Perl_my_htole64(U64 n);
#endif
#if defined(PERL_NEED_MY_HTOLEI)
PERL_CALLCONV int	Perl_my_htolei(int n);
#endif
#if defined(PERL_NEED_MY_HTOLEL)
PERL_CALLCONV long	Perl_my_htolel(long n);
#endif
#if defined(PERL_NEED_MY_HTOLES)
PERL_CALLCONV short	Perl_my_htoles(short n);
#endif
#if defined(PERL_NEED_MY_LETOH16)
PERL_CALLCONV U16	Perl_my_letoh16(U16 n);
#endif
#if defined(PERL_NEED_MY_LETOH32)
PERL_CALLCONV U32	Perl_my_letoh32(U32 n);
#endif
#if defined(PERL_NEED_MY_LETOH64)
PERL_CALLCONV U64	Perl_my_letoh64(U64 n);
#endif
#if defined(PERL_NEED_MY_LETOHI)
PERL_CALLCONV int	Perl_my_letohi(int n);
#endif
#if defined(PERL_NEED_MY_LETOHL)
PERL_CALLCONV long	Perl_my_letohl(long n);
#endif
#if defined(PERL_NEED_MY_LETOHS)
PERL_CALLCONV short	Perl_my_letohs(short n);
#endif
d8047 1
a8047 1
#if defined(USE_PERLIO) && !defined(USE_SFIO)
d8056 1
a8056 1
PERL_CALLCONV int	Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *f)
d8059 1
a8059 1
PERL_CALLCONV int	Perl_PerlIO_get_cnt(pTHX_ PerlIO *f)
d8069 2
a8070 2
PERL_CALLCONV void	Perl_PerlIO_set_cnt(pTHX_ PerlIO *f, int cnt);
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, int cnt);
d8094 3
@


1.15
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d26 40
a65 1
PERL_CALLCONV bool	Perl__is_utf8__perl_idstart(pTHX_ const U8 *p)
d68 1
a68 1
#define PERL_ARGS_ASSERT__IS_UTF8__PERL_IDSTART	\
d71 1
a71 1
PERL_CALLCONV UV	Perl__to_uni_fold_flags(pTHX_ UV c, U8 *p, STRLEN *lenp, const bool flags)
d171 7
d233 10
a361 6
PERL_CALLCONV OP *	Perl_ck_chdir(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_CHDIR	\
	assert(o)

d673 1
a673 1
PERL_CALLCONV OP *	Perl_coresub_op(pTHX_ SV *coreargssv, const int code, const int opnum)
d679 1
a679 1
PERL_CALLCONV void	Perl_croak(pTHX_ const char* pat, ...)
d683 7
a689 1
PERL_CALLCONV void	Perl_croak_no_modify(pTHX)
d692 1
a692 1
PERL_CALLCONV void	Perl_croak_sv(pTHX_ SV *baseex)
d698 1
a698 1
PERL_CALLCONV void	Perl_croak_xs_usage(pTHX_ const CV *const cv, const char *const params)
d700 2
a701 2
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d705 1
d740 6
d749 5
d825 1
a825 1
PERL_CALLCONV void	Perl_die_unwind(pTHX_ SV* msv)
d964 1
a964 1
PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, I32 offset, I32 size)
d1090 1
d1094 3
d1173 4
a1176 2
PERL_CALLCONV UV	Perl_get_hash_seed(pTHX)
			__attribute__warn_unused_result__;
d1557 1
a1557 1
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV *hv, HE *entryK)
d1639 5
d1683 1
d1711 16
d1736 1
d1741 11
d1756 1
d1761 1
d1766 1
d1771 11
d1786 1
d1791 1
d1796 1
d1801 1
d1806 1
d1811 1
d1816 1
d1821 1
d1826 1
d1831 1
d1836 1
d1841 1
d1846 1
d1851 1
d1856 1
d1861 1
d1866 1
d1871 1
d1876 1
d1881 1
d1885 2
a1886 1
PERL_CALLCONV bool	Perl_is_utf8_X_L(pTHX_ const U8 *p)
d1889 1
a1889 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_L	\
d1892 2
a1893 1
PERL_CALLCONV bool	Perl_is_utf8_X_LV(pTHX_ const U8 *p)
d1896 1
a1896 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_LV	\
d1899 2
a1900 1
PERL_CALLCONV bool	Perl_is_utf8_X_LVT(pTHX_ const U8 *p)
d1903 1
a1903 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_LVT	\
d1906 2
a1907 1
PERL_CALLCONV bool	Perl_is_utf8_X_LV_LVT_V(pTHX_ const U8 *p)
d1910 1
a1910 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_LV_LVT_V	\
d1913 2
a1914 49
PERL_CALLCONV bool	Perl_is_utf8_X_T(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_T	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_V(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_V	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_begin(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_BEGIN	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_extend(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_EXTEND	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_non_hangul(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_NON_HANGUL	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_prepend(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_PREPEND	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUM	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_ALPHA	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ const U8 *p)
d1917 1
a1917 1
#define PERL_ARGS_ASSERT_IS_UTF8_ASCII	\
d1933 1
d1940 1
d1947 1
d1954 1
d1961 1
d1968 1
d1975 1
d1982 1
d1989 1
d1996 1
d2003 1
d2010 1
d2017 1
d2028 1
a2028 1
/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **p)
d2039 1
d2046 1
d2053 1
d2060 1
d2144 6
d2185 7
a2282 6
PERL_CALLCONV U32	Perl_magic_len(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_LEN	\
	assert(sv); assert(mg)

a2308 7
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg)
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET	\
	assert(sv); assert(mg)

a2326 6
PERL_CALLCONV int	Perl_magic_setamagic(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SETAMAGIC	\
	assert(sv); assert(mg)

a2427 6
PERL_CALLCONV int	Perl_magic_setvstring(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SETVSTRING	\
	assert(sv); assert(mg)

d2490 1
a2581 5
PERL_CALLCONV void	Perl_munge_qwlist_to_paren_list(pTHX_ OP* qwlist)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MUNGE_QWLIST_TO_PAREN_LIST	\
	assert(qwlist)

d2600 1
a2600 1
PERL_CALLCONV void	Perl_my_exit(pTHX_ U32 status)
d2603 1
a2603 1
PERL_CALLCONV void	Perl_my_failure_exit(pTHX)
d2769 5
d2825 5
d3026 1
d3099 1
a3099 1
PERL_CALLCONV void	Perl_pad_leavemy(pTHX);
d3111 5
d3163 1
a3163 1
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP *o, OP *expr, bool isreg)
d3255 1
a3255 1
PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ SV * const pattern, U32 flags)
d3272 5
d3281 8
a3400 5
PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)

d3761 5
a3765 1
PERL_CALLCONV void	Perl_setdefout(pTHX_ GV* gv);
a3793 7
PERL_CALLCONV bool	Perl_stashpv_hvname_match(pTHX_ const COP *c, const HV *hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_STASHPV_HVNAME_MATCH	\
	assert(c); assert(hv)

d3964 1
a3964 2
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV *sv, OP **startop, const char *code, PAD **padp)
			__attribute__deprecated__
d3966 3
a3968 5
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_COMPILE_2OP	\
	assert(sv); assert(startop); assert(code); assert(padp)
d3970 1
a3970 1
PERL_CALLCONV OP*	Perl_sv_compile_2op_is_broken(pTHX_ SV *sv, OP **startop, const char *code, PAD **padp)
d3972 5
a3976 7
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_COMPILE_2OP_IS_BROKEN	\
	assert(sv); assert(startop); assert(code); assert(padp)

PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv)
d3978 1
a3978 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_COPYPV	\
	assert(dsv); assert(ssv)
d4063 1
a4063 1
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV *const sv)
d4107 5
d4122 5
a4126 1
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV *const oldsv)
d4247 1
d4492 6
d4570 1
d4581 1
d4592 1
a4739 5
PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR	\
	assert(s)

d4751 1
a4751 1
PERL_CALLCONV void	Perl_vcroak(pTHX_ const char* pat, va_list* args)
d4932 5
a4962 3
PERL_CALLCONV void	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__noreturn__;

d4974 7
a4980 6
#if !(defined(USE_ITHREADS))
#  if defined(PERL_IN_OP_C)
STATIC void	S_forget_pmop(pTHX_ PMOP *const o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
	assert(o)
a4981 1
#  endif
d5268 5
a5350 1
			__attribute__malloc__
a5354 1
			__attribute__malloc__
a5358 1
			__attribute__malloc__
d5366 42
a5418 10
#  if defined(PERL_IN_OP_C)
#    if defined(PL_OP_SLAB_ALLOC)
STATIC void	S_Slab_to_rw(pTHX_ void *op)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SLAB_TO_RW	\
	assert(op)

#    endif
#  endif
#  if defined(PL_OP_SLAB_ALLOC)
a5424 2
PERL_CALLCONV void	Perl_pending_Slabs_to_ro(pTHX);
#  endif
d5458 1
a5458 1
PERL_CALLCONV void	Perl_croak_nocontext(const char* pat, ...)
a5640 21
#if defined(PERL_IN_DQUOTE_STATIC_C)
STATIC char	S_grok_bslash_c(pTHX_ const char source, const bool utf8, const bool output_warning)
			__attribute__warn_unused_result__;

STATIC bool	S_grok_bslash_o(pTHX_ const char* s, UV* uv, STRLEN* len, const char** error_msg, const bool output_warning)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_GROK_BSLASH_O	\
	assert(s); assert(uv); assert(len); assert(error_msg)

PERL_STATIC_INLINE I32	S_regcurly(pTHX_ const char *s)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REGCURLY	\
	assert(s)

#endif
a5671 5
STATIC HV*	S_gv_get_super_pkg(pTHX_ const char* name, I32 namelen, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_GET_SUPER_PKG	\
	assert(name)

a5681 5
STATIC void	S_gv_magicalize_overload(pTHX_ GV *gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_MAGICALIZE_OVERLOAD	\
	assert(gv)

d5710 1
a5710 1
STATIC void	S_hsplit(pTHX_ HV *hv)
d5715 2
a5716 2
STATIC struct xpvhv_aux*	S_hv_auxinit(HV *hv)
			__attribute__nonnull__(1);
d5721 3
a5723 2
STATIC SV*	S_hv_free_ent_ret(pTHX_ HV *hv, HE *entryK)
			__attribute__nonnull__(pTHX_1);
d5725 1
a5725 1
	assert(hv)
d5734 1
a5734 1
STATIC void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg)
d5745 1
d5846 1
a5846 1
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs, bool for_my)
d5899 5
a5971 5
STATIC OP*	S_opt_scalarhv(pTHX_ OP* rep_op)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OPT_SCALARHV	\
	assert(rep_op)

d5979 1
a5979 2
STATIC void	S_process_special_blocks(pTHX_ const char *const fullname, GV *const gv, CV *const cv)
			__attribute__nonnull__(pTHX_1)
d5981 2
a5982 1
			__attribute__nonnull__(pTHX_3);
a6035 7
#  if defined(USE_ITHREADS)
STATIC void	S_forget_pmop(pTHX_ PMOP *const o, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
	assert(o)

#  endif
d6099 1
a6099 1
STATIC void	S_minus_v(pTHX)
d6102 1
a6102 1
STATIC void	S_my_exit_jump(pTHX)
d6113 1
a6113 1
STATIC void	S_run_body(pTHX_ I32 oldscope)
d6116 1
a6116 1
STATIC void	S_usage(pTHX)
d6168 1
a6168 1
STATIC bool	S_doeval(pTHX_ int gimme, OP** startop, CV* outside, U32 seq, HV* hh);
d6253 1
a6253 1
STATIC void	S_do_oddball(pTHX_ HV *hash, SV **relem, SV **firstrelem)
d6255 1
a6255 2
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d6257 1
a6257 1
	assert(hash); assert(relem); assert(firstrelem)
a6441 6
STATIC void	S_add_alternate(pTHX_ AV** alternate_ptr, U8* string, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_ADD_ALTERNATE	\
	assert(alternate_ptr); assert(string)

d6452 6
a6457 4
STATIC void	S_checkposixcc(pTHX_ struct RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CHECKPOSIXCC	\
	assert(pRExC_state)
d6490 10
d6506 1
a6506 1
PERL_STATIC_INLINE UV*	S_get_invlist_len_addr(pTHX_ SV* invlist)
d6509 1
a6509 1
#define PERL_ARGS_ASSERT_GET_INVLIST_LEN_ADDR	\
d6524 13
d6554 17
a6583 6
PERL_STATIC_INLINE UV	S_invlist_len(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_LEN	\
	assert(invlist)

d6590 1
a6590 1
STATIC IV	S_invlist_search(pTHX_ SV* const invlist, const UV cp)
d6593 1
a6593 1
#define PERL_ARGS_ASSERT_INVLIST_SEARCH	\
d6601 5
d6640 6
a6645 1
STATIC void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...)
a6657 5
STATIC regnode*	S_reg_namedseq(pTHX_ struct RExC_state_t *pRExC_state, UV *valuep, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_NAMEDSEQ	\
	assert(pRExC_state)

d6695 3
a6697 2
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *pRExC_state, U32 depth)
			__attribute__nonnull__(pTHX_1);
d6699 1
a6699 1
	assert(pRExC_state)
d6707 7
d6720 1
a6720 1
STATIC I32	S_regpposixcc(pTHX_ struct RExC_state_t *pRExC_state, I32 value)
a6751 16
PERL_STATIC_INLINE U8	S_set_regclass_bit(pTHX_ struct RExC_state_t* pRExC_state, regnode* node, const U8 value, SV** invlist_ptr, AV** alternate_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SET_REGCLASS_BIT	\
	assert(pRExC_state); assert(node); assert(invlist_ptr); assert(alternate_ptr)

STATIC U8	S_set_regclass_bit_fold(pTHX_ struct RExC_state_t *pRExC_state, regnode* node, const U8 value, SV** invlist_ptr, AV** alternate_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SET_REGCLASS_BIT_FOLD	\
	assert(pRExC_state); assert(node); assert(invlist_ptr); assert(alternate_ptr)

d6763 45
a6807 1
PERL_CALLCONV SV*	Perl__core_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none, bool return_if_undef, SV* invlist, bool passed_in_invlist_has_user_defined_property)
d6814 29
a6842 1
PERL_CALLCONV SV*	Perl__invlist_contents(pTHX_ SV* const invlist)
d6844 1
d6846 2
a6847 2
#define PERL_ARGS_ASSERT__INVLIST_CONTENTS	\
	assert(invlist)
a6898 6
PERL_CALLCONV HV*	Perl__swash_inversion_hash(pTHX_ SV* const swash)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__SWASH_INVERSION_HASH	\
	assert(swash)

d6907 1
a6907 1
STATIC SV*	S_core_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **altsvp)
d6913 1
a6913 1
STATIC char*	S_find_byclass(pTHX_ regexp * prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo)
d6922 9
d6938 7
a6944 1
STATIC char*	S_regcppop(pTHX_ const regexp *rex)
d6946 1
a6946 1
#define PERL_ARGS_ASSERT_REGCPPOP	\
a6948 1
STATIC CHECKPOINT	S_regcppush(pTHX_ I32 parenfloor);
d6963 1
a6963 1
STATIC bool	S_reginclass(pTHX_ const regexp * const prog, const regnode * const n, const U8 * const p, STRLEN *lenp, bool const do_utf8sv_is_utf8)
d6970 1
a6970 1
STATIC I32	S_regmatch(pTHX_ regmatch_info *reginfo, regnode *prog)
d6973 2
a6974 1
			__attribute__nonnull__(pTHX_2);
d6976 1
a6976 1
	assert(reginfo); assert(prog)
d6978 1
a6978 1
STATIC I32	S_regrepeat(pTHX_ const regexp *prog, const regnode *p, I32 max, int depth)
d6981 2
a6982 1
			__attribute__nonnull__(pTHX_2);
d6984 1
a6984 1
	assert(prog); assert(p)
d6986 1
a6986 1
STATIC I32	S_regtry(pTHX_ regmatch_info *reginfo, char **startpos)
d6991 1
a6991 1
	assert(reginfo); assert(startpos)
d6993 1
a6993 1
STATIC void	S_to_byte_substr(pTHX_ regexp * prog)
d7224 1
d7241 7
d7268 1
a7268 1
STATIC void	S_missingterm(pTHX_ char *s)
d7282 8
d7328 1
a7328 1
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims)
d7428 1
a7428 1
STATIC STRLEN	S_is_utf8_char_slow(const U8 *s, const STRLEN len)
d7434 1
a7434 1
STATIC bool	S_is_utf8_common(pTHX_ const U8 *const p, SV **swash, const char * const swashname)
a7452 6
PERL_CALLCONV bool	Perl__is_utf8_quotemeta(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__IS_UTF8_QUOTEMETA	\
	assert(p)

a7481 3
STATIC char *	S_write_no_mem(pTHX)
			__attribute__noreturn__;

a7514 3
PERL_CALLCONV OP *	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__noreturn__;

a7686 7
#if defined(PERL_OLD_COPY_ON_WRITE)
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dstr, SV* sstr)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_SETSV_COW	\
	assert(sstr)

#endif
a7689 11
#if defined(PL_OP_SLAB_ALLOC)
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ size_t sz)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SLAB_FREE	\
	assert(op)

#endif
d7698 5
d7776 1
a7776 1
PERL_CALLCONV AV*	Perl_padlist_dup(pTHX_ AV *srcpad, CLONE_PARAMS *param)
d7909 3
a7911 4
#if defined(USE_REENTRANT_API)
PERL_CALLCONV void	Perl_reentrant_free(pTHX);
PERL_CALLCONV void	Perl_reentrant_init(pTHX);
PERL_CALLCONV void*	Perl_reentrant_retry(const char *f, ...)
d7913 2
a7914 2
#define PERL_ARGS_ASSERT_REENTRANT_RETRY	\
	assert(f)
a7915 1
PERL_CALLCONV void	Perl_reentrant_size(pTHX);
d7933 8
@


1.14
log
@merge in perl 5.12.2 plus local changes
@
text
@d1 1
a1 1
/*  -*- buffer-read-only: t -*-
d5 2
a6 2
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999,
 *    2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, by Larry Wall and others
d12 2
a13 2
 * This file is built by embed.pl from data in embed.fnc, embed.pl,
 * pp.sym, intrpvar.h, and perlvars.h.
d20 4
d25 2
a26 83
#if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem *ipM, struct IPerlMem *ipMS, struct IPerlMem *ipMP, struct IPerlEnv *ipE, struct IPerlStdIO *ipStd, struct IPerlLIO *ipLIO, struct IPerlDir *ipD, struct IPerlSock *ipS, struct IPerlProc *ipP)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(5)
			__attribute__nonnull__(6)
			__attribute__nonnull__(7)
			__attribute__nonnull__(8)
			__attribute__nonnull__(9);
#define PERL_ARGS_ASSERT_PERL_ALLOC_USING	\
	assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)

#endif
PERL_CALLCONV PerlInterpreter*	perl_alloc(void);
PERL_CALLCONV void	perl_construct(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_CONSTRUCT	\
	assert(my_perl)

PERL_CALLCONV int	perl_destruct(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_DESTRUCT	\
	assert(my_perl)

PERL_CALLCONV void	perl_free(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_FREE	\
	assert(my_perl)

PERL_CALLCONV int	perl_run(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_RUN	\
	assert(my_perl)

PERL_CALLCONV int	perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_PARSE	\
	assert(my_perl)

PERL_CALLCONV bool	Perl_doing_taint(int argc, char** argv, char** env)
			__attribute__warn_unused_result__;

#if defined(USE_ITHREADS)
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter *proto_perl, UV flags)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_CLONE	\
	assert(proto_perl)

#  if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *proto_perl, UV flags, struct IPerlMem* ipM, struct IPerlMem* ipMS, struct IPerlMem* ipMP, struct IPerlEnv* ipE, struct IPerlStdIO* ipStd, struct IPerlLIO* ipLIO, struct IPerlDir* ipD, struct IPerlSock* ipS, struct IPerlProc* ipP)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(5)
			__attribute__nonnull__(6)
			__attribute__nonnull__(7)
			__attribute__nonnull__(8)
			__attribute__nonnull__(9)
			__attribute__nonnull__(10)
			__attribute__nonnull__(11);
#define PERL_ARGS_ASSERT_PERL_CLONE_USING	\
	assert(proto_perl); assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)

#  endif
#endif

PERL_CALLCONV Malloc_t	Perl_malloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_calloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_realloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Free_t	Perl_mfree(Malloc_t where);
#if defined(MYMALLOC)
PERL_CALLCONV MEM_SIZE	Perl_malloced_size(void *p)
d28 2
a29 2
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MALLOCED_SIZE	\
d32 5
a36 2
PERL_CALLCONV MEM_SIZE	Perl_malloc_good_size(size_t nbytes)
			__attribute__warn_unused_result__;
d38 5
a42 1
#endif
d44 5
a48 2
PERL_CALLCONV void*	Perl_get_context(void)
			__attribute__warn_unused_result__;
d50 5
a54 4
PERL_CALLCONV void	Perl_set_context(void *t)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_SET_CONTEXT	\
	assert(t)
d56 5
a60 6
PERL_CALLCONV I32	Perl_regcurly(const char *s)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_REGCURLY	\
	assert(s)
d62 4
a66 5
END_EXTERN_C

/* functions with flag 'n' should come before here */
START_EXTERN_C
#  include "pp_proto.h"
d73 1
a73 1
PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing)
d75 2
a76 5
#define PERL_ARGS_ASSERT_GV_AMUPDATE	\
	assert(stash)

PERL_CALLCONV CV*	Perl_gv_handler(pTHX_ HV* stash, I32 id)
			__attribute__warn_unused_result__;
d78 1
a78 2
PERL_CALLCONV OP*	Perl_append_elem(pTHX_ I32 optype, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_append_list(pTHX_ I32 optype, LISTOP* first, LISTOP* last);
d92 7
d104 12
d143 5
a164 6
PERL_CALLCONV void	Perl_av_create_and_push(pTHX_ AV **const avp, SV *const val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AV_CREATE_AND_PUSH	\
	assert(avp); assert(val)

a191 6
PERL_CALLCONV SV**	Perl_av_create_and_unshift_one(pTHX_ AV **const avp, SV *const val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AV_CREATE_AND_UNSHIFT_ONE	\
	assert(avp); assert(val)

a196 17
PERL_CALLCONV SV**	Perl_av_arylen_p(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_AV_ARYLEN_P	\
	assert(av)

PERL_CALLCONV IV*	Perl_av_iter_p(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_AV_ITER_P	\
	assert(av)

#if defined(PERL_IN_AV_C) || defined(PERL_DECL_PROT)
STATIC MAGIC*	S_get_aux_mg(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_AUX_MG	\
	assert(av)

#endif
d213 6
d220 26
a245 1
PERL_CALLCONV void	Perl_boot_core_PerlIO(pTHX);
d251 20
a276 3
PERL_CALLCONV U32	Perl_cast_ulong(pTHX_ NV f)
			__attribute__warn_unused_result__;

d283 1
a283 1
PERL_CALLCONV UV	Perl_cast_uv(pTHX_ NV f)
d286 1
a286 2
#if !defined(HAS_TRUNCATE) && !defined(HAS_CHSIZE) && defined(F_FREESP)
PERL_CALLCONV I32	Perl_my_chsize(pTHX_ int fd, Off_t length)
d289 4
a292 3
#endif
PERL_CALLCONV OP*	Perl_convert(pTHX_ I32 optype, I32 flags, OP* o)
			__attribute__warn_unused_result__;
d294 5
a298 4
PERL_CALLCONV PERL_CONTEXT*	Perl_create_eval_scope(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_croak(pTHX_ const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);
d300 17
a316 2
PERL_CALLCONV void	Perl_vcroak(pTHX_ const char* pat, va_list* args)
			__attribute__noreturn__;
d318 5
a322 6
PERL_CALLCONV void	Perl_croak_xs_usage(pTHX_ const CV *const cv, const char *const params)
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE	\
	assert(cv); assert(params)
d324 5
d330 5
a334 4
#if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV void	Perl_croak_nocontext(const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__null_ok__(__printf__,1,2);
d336 5
a340 2
PERL_CALLCONV OP*	Perl_die_nocontext(const char* pat, ...)
			__attribute__format__null_ok__(__printf__,1,2);
d342 5
a346 5
PERL_CALLCONV void	Perl_deb_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_DEB_NOCONTEXT	\
	assert(pat)
d348 6
a353 5
PERL_CALLCONV char*	Perl_form_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_FORM_NOCONTEXT	\
	assert(pat)
d355 4
a358 4
PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_LOAD_MODULE_NOCONTEXT	\
	assert(name)
d360 6
a365 5
PERL_CALLCONV SV*	Perl_mess_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MESS_NOCONTEXT	\
	assert(pat)
d367 6
a372 5
PERL_CALLCONV void	Perl_warn_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_WARN_NOCONTEXT	\
	assert(pat)
d374 5
a378 5
PERL_CALLCONV void	Perl_warner_nocontext(U32 err, const char* pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_WARNER_NOCONTEXT	\
	assert(pat)
d380 5
a384 5
PERL_CALLCONV SV*	Perl_newSVpvf_nocontext(const char *const pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_NEWSVPVF_NOCONTEXT	\
	assert(pat)
d386 5
a390 6
PERL_CALLCONV void	Perl_sv_catpvf_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_CATPVF_NOCONTEXT	\
	assert(sv); assert(pat)
d392 5
a396 6
PERL_CALLCONV void	Perl_sv_setpvf_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_SETPVF_NOCONTEXT	\
	assert(sv); assert(pat)
d398 5
a402 6
PERL_CALLCONV void	Perl_sv_catpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_CATPVF_MG_NOCONTEXT	\
	assert(sv); assert(pat)
d404 5
a408 6
PERL_CALLCONV void	Perl_sv_setpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_SETPVF_MG_NOCONTEXT	\
	assert(sv); assert(pat)
d410 5
a414 6
PERL_CALLCONV int	Perl_fprintf_nocontext(PerlIO *stream, const char *format, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_FPRINTF_NOCONTEXT	\
	assert(stream); assert(format)
d416 5
a420 5
PERL_CALLCONV int	Perl_printf_nocontext(const char *format, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PRINTF_NOCONTEXT	\
	assert(format)
d422 2
a423 2
#endif
PERL_CALLCONV void	Perl_cv_ckproto_len(pTHX_ const CV* cv, const GV* gv, const char* p, const STRLEN len)
d425 2
a426 2
#define PERL_ARGS_ASSERT_CV_CKPROTO_LEN	\
	assert(cv)
d428 2
a429 1
PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto)
d431 2
a432 2
#define PERL_ARGS_ASSERT_CV_CLONE	\
	assert(proto)
d434 1
a434 1
PERL_CALLCONV SV*	Perl_gv_const_sv(pTHX_ GV* gv)
d437 2
a438 2
#define PERL_ARGS_ASSERT_GV_CONST_SV	\
	assert(gv)
d440 5
a444 2
PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ const CV *const cv)
			__attribute__warn_unused_result__;
d446 5
a450 2
PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ const OP* o, CV* cv)
			__attribute__warn_unused_result__;
d452 2
a453 1
PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv)
d455 2
a456 2
#define PERL_ARGS_ASSERT_CV_UNDEF	\
	assert(cv)
d458 2
a459 1
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cx)
d461 2
a462 2
#define PERL_ARGS_ASSERT_CX_DUMP	\
	assert(cx)
d464 2
a465 2
PERL_CALLCONV SV*	Perl_filter_add(pTHX_ filter_t funcp, SV* datasv);
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp)
d467 2
a468 2
#define PERL_ARGS_ASSERT_FILTER_DEL	\
	assert(funcp)
d470 1
a470 1
PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV *buf_sv, int maxlen)
d472 3
a474 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_FILTER_READ	\
	assert(buf_sv)
d476 1
a476 1
PERL_CALLCONV char**	Perl_get_op_descs(pTHX)
d478 3
a480 1
			__attribute__pure__;
d482 1
a482 1
PERL_CALLCONV char**	Perl_get_op_names(pTHX)
d484 3
a486 1
			__attribute__pure__;
d488 1
a488 1
PERL_CALLCONV const char*	Perl_get_no_modify(pTHX)
d490 3
a492 1
			__attribute__pure__;
d494 1
a494 1
PERL_CALLCONV U32*	Perl_get_opargs(pTHX)
d496 3
a498 1
			__attribute__pure__;
d500 1
a500 1
PERL_CALLCONV PPADDR_t*	Perl_get_ppaddr(pTHX)
d502 3
a504 1
			__attribute__pure__;
d506 5
a510 2
PERL_CALLCONV I32	Perl_cxinc(pTHX)
			__attribute__warn_unused_result__;
d512 2
a513 2
PERL_CALLCONV void	Perl_deb(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
d515 2
a516 2
#define PERL_ARGS_ASSERT_DEB	\
	assert(pat)
d518 2
a519 1
PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args)
d521 2
a522 2
#define PERL_ARGS_ASSERT_VDEB	\
	assert(pat)
d524 2
a525 2
PERL_CALLCONV void	Perl_debprofdump(pTHX);
PERL_CALLCONV I32	Perl_debop(pTHX_ const OP* o)
d527 1
a527 1
#define PERL_ARGS_ASSERT_DEBOP	\
d530 206
d738 1
d748 1
a748 1
PERL_CALLCONV void	Perl_delete_eval_scope(pTHX);
d752 10
a761 5
#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_vdie(pTHX_ const char* pat, va_list* args);
#endif
PERL_CALLCONV void	Perl_die_where(pTHX_ SV* msv)
			__attribute__noreturn__;
a762 1
PERL_CALLCONV void	Perl_dounwind(pTHX_ I32 cxix);
d780 2
a781 2
PERL_CALLCONV void	Perl_do_chop(pTHX_ SV *astr, SV *sv)
			__attribute__nonnull__(pTHX_1)
d783 2
a784 2
#define PERL_ARGS_ASSERT_DO_CHOP	\
	assert(astr); assert(sv)
a785 1
PERL_CALLCONV bool	Perl_do_close(pTHX_ GV* gv, bool not_implicit);
d791 6
d798 5
a802 5
#ifdef PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION
/* PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_DO_EXEC	\
	assert(cmd)
d804 1
a804 10
#else
PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_EXEC	\
	assert(cmd)

#endif

#if defined(WIN32) || defined(__SYMBIAN32__) || defined(VMS)
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp)
d807 2
a808 2
#define PERL_ARGS_ASSERT_DO_ASPAWN	\
	assert(mark); assert(sp)
d810 2
a811 28
PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_SPAWN	\
	assert(cmd)

PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_SPAWN_NOWAIT	\
	assert(cmd)

#endif
#if !defined(WIN32)
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_EXEC3	\
	assert(incmd)

#endif
PERL_CALLCONV void	Perl_do_execfree(pTHX);
#if defined(PERL_IN_DOIO_C) || defined(PERL_DECL_PROT)
STATIC void	S_exec_failed(pTHX_ const char *cmd, int fd, int do_report)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_EXEC_FAILED	\
	assert(cmd)

#endif
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp)
d813 4
a816 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_IPCCTL	\
	assert(mark); assert(sp)
d818 1
a818 1
PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp)
d821 2
a822 2
#define PERL_ARGS_ASSERT_DO_IPCGET	\
	assert(mark); assert(sp)
d824 2
a825 1
PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp)
d828 2
a829 2
#define PERL_ARGS_ASSERT_DO_MSGRCV	\
	assert(mark); assert(sp)
d831 1
a831 2
PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
d833 2
a834 23
#define PERL_ARGS_ASSERT_DO_MSGSND	\
	assert(mark); assert(sp)

PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_SEMOP	\
	assert(mark); assert(sp)

PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_SHMIO	\
	assert(mark); assert(sp)

#endif
PERL_CALLCONV void	Perl_do_join(pTHX_ SV *sv, SV *delim, SV **mark, SV **sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_DO_JOIN	\
	assert(sv); assert(delim); assert(mark); assert(sp)
a835 1
PERL_CALLCONV OP*	Perl_do_kv(pTHX);
d855 5
a867 5
PERL_CALLCONV I32	Perl_do_chomp(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_CHOMP	\
	assert(sv)

d875 5
d918 9
a932 7
#if defined(DUMP_FDS)
PERL_CALLCONV void	Perl_dump_fds(pTHX_ char* s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUMP_FDS	\
	assert(s)

#endif
d938 6
a943 9
PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_DUMP	\
	assert(gv)

PERL_CALLCONV void	Perl_op_dump(pTHX_ const OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OP_DUMP	\
	assert(o)
a944 1
PERL_CALLCONV void	Perl_pmop_dump(pTHX_ PMOP* pm);
d965 22
d1000 1
a1000 1
PERL_CALLCONV char*	Perl_find_script(pTHX_ const char *scriptname, bool dosearch, const char *const *const search_ext, I32 flags)
d1002 2
a1003 2
#define PERL_ARGS_ASSERT_FIND_SCRIPT	\
	assert(scriptname)
d1005 2
a1006 3
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_force_list(pTHX_ OP* arg);
STATIC OP*	S_fold_constants(pTHX_ OP *o)
d1008 2
a1009 2
#define PERL_ARGS_ASSERT_FOLD_CONSTANTS	\
	assert(o)
d1011 5
a1015 6
#endif
PERL_CALLCONV char*	Perl_form(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORM	\
	assert(pat)
d1017 1
a1017 1
PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args)
d1019 2
a1020 2
#define PERL_ARGS_ASSERT_VFORM	\
	assert(pat)
d1022 2
a1023 10
PERL_CALLCONV void	Perl_free_tmps(pTHX);
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_gen_constant_list(pTHX_ OP* o);
#endif
#if !defined(HAS_GETENV_LEN)
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char *env_elem, unsigned long *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GETENV_LEN	\
	assert(env_elem); assert(len)
d1025 4
a1028 4
#endif
PERL_CALLCONV void	Perl_get_db_sub(pTHX_ SV **svp, CV *cv)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GET_DB_SUB	\
d1031 2
a1032 11
PERL_CALLCONV void	Perl_gp_free(pTHX_ GV* gv);
PERL_CALLCONV GP*	Perl_gp_ref(pTHX_ GP* gp);
PERL_CALLCONV GV*	Perl_gv_add_by_type(pTHX_ GV *gv, svtype type);
/* PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV *gv); */
/* PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV *gv); */
/* PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv); */
PERL_CALLCONV GV*	Perl_gv_autoload4(pTHX_ HV* stash, const char* name, STRLEN len, I32 method)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_AUTOLOAD4	\
	assert(name)
d1034 1
a1034 1
PERL_CALLCONV void	Perl_gv_check(pTHX_ const HV* stash)
d1036 16
a1051 2
#define PERL_ARGS_ASSERT_GV_CHECK	\
	assert(stash)
d1053 6
a1058 5
PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, const GV* gv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_EFULLNAME	\
	assert(sv); assert(gv)
d1060 1
a1060 1
/* PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, const GV* gv, const char* prefix)
d1062 1
a1062 3
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_GV_EFULLNAME3	\
	assert(sv); assert(gv)
d1064 1
a1064 1
PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain)
d1066 3
a1068 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_EFULLNAME4	\
	assert(sv); assert(gv)
d1070 2
a1071 1
PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name)
d1073 2
a1074 2
#define PERL_ARGS_ASSERT_GV_FETCHFILE	\
	assert(name)
d1076 3
a1078 1
PERL_CALLCONV GV*	Perl_gv_fetchfile_flags(pTHX_ const char *const name, const STRLEN len, const U32 flags)
d1080 1
a1080 1
#define PERL_ARGS_ASSERT_GV_FETCHFILE_FLAGS	\
d1083 6
a1088 3
PERL_CALLCONV GV*	Perl_gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETH	\
d1091 3
a1093 3
PERL_CALLCONV GV*	Perl_gv_fetchmeth_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_AUTOLOAD	\
d1096 1
a1096 8
/* PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD	\
	assert(stash); assert(name)

PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload)
			__attribute__nonnull__(pTHX_1)
d1098 2
a1099 2
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_AUTOLOAD	\
	assert(stash); assert(name)
d1101 2
a1102 5
PERL_CALLCONV GV*	Perl_gv_fetchmethod_flags(pTHX_ HV* stash, const char* name, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_FLAGS	\
	assert(stash); assert(name)
d1104 1
a1104 1
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 add, const svtype sv_type)
d1106 2
a1107 2
#define PERL_ARGS_ASSERT_GV_FETCHPV	\
	assert(nambeg)
d1109 3
a1111 5
PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, const GV* gv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FULLNAME	\
	assert(sv); assert(gv)
d1113 3
a1115 5
/* PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, const GV* gv, const char* prefix)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_GV_FULLNAME3	\
	assert(sv); assert(gv)
d1117 3
a1119 5
PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FULLNAME4	\
	assert(sv); assert(gv)
d1121 95
a1215 1
PERL_CALLCONV GP *	Perl_newGP(pTHX_ GV *const gv)
d1217 1
a1217 1
#define PERL_ARGS_ASSERT_NEWGP	\
d1220 141
a1360 1
PERL_CALLCONV void	Perl_gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi)
d1363 1
a1363 1
#define PERL_ARGS_ASSERT_GV_INIT	\
d1366 6
a1377 5
PERL_CALLCONV void	Perl_gv_try_downgrade(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_TRY_DOWNGRADE	\
	assert(gv)

d1393 10
d1404 14
a1417 1
PERL_CALLCONV HV *	Perl_hv_copy_hints_hv(pTHX_ HV *const ohv);
d1433 23
d1478 4
a1481 5
PERL_CALLCONV void*	Perl_hv_common(pTHX_ HV *hv, SV *keysv, const char* key, STRLEN klen, int flags, int action, SV *val, U32 hash);
PERL_CALLCONV void*	Perl_hv_common_key_len(pTHX_ HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HV_COMMON_KEY_LEN	\
	assert(key)
d1512 6
a1525 6
PERL_CALLCONV HE*	Perl_hv_iternext_flags(pTHX_ HV *hv, I32 flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_ITERNEXT_FLAGS	\
	assert(hv)

d1543 38
a1580 10
PERL_CALLCONV HV *	Perl_refcounted_he_chain_2hv(pTHX_ const struct refcounted_he *c);
PERL_CALLCONV SV *	Perl_refcounted_he_fetch(pTHX_ const struct refcounted_he *chain, SV *keysv, const char *key, STRLEN klen, int flags, U32 hash);
PERL_CALLCONV void	Perl_refcounted_he_free(pTHX_ struct refcounted_he *he);
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new(pTHX_ struct refcounted_he *const parent, SV *const key, SV *const value);
#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC struct refcounted_he *	S_refcounted_he_new_common(pTHX_ struct refcounted_he *const parent, const char *const key_p, const STRLEN key_len, const char flags, char value_type, const void *value, const STRLEN value_len)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_COMMON	\
	assert(key_p); assert(value)
a1581 1
#endif
d1585 5
a1589 7
PERL_CALLCONV void	Perl_hv_undef(pTHX_ HV *hv);
PERL_CALLCONV I32	Perl_ibcmp(const char* a, const char* b, I32 len)
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_IBCMP	\
	assert(a); assert(b)
d1591 3
a1593 6
PERL_CALLCONV I32	Perl_ibcmp_locale(const char* a, const char* b, I32 len)
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_IBCMP_LOCALE	\
	assert(a); assert(b)
d1595 1
a1595 1
PERL_CALLCONV I32	Perl_ibcmp_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2)
d1597 1
a1597 7
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_IBCMP_UTF8	\
	assert(s1); assert(s2)

#if defined(PERL_IN_DOIO_C) || defined(PERL_DECL_PROT)
STATIC bool	S_ingroup(pTHX_ Gid_t testgid, bool effective)
			__attribute__warn_unused_result__;
a1598 1
#endif
d1606 2
a1613 1
PERL_CALLCONV U32	Perl_intro_my(pTHX);
d1622 4
d1631 4
a1634 2
PERL_CALLCONV OP*	Perl_invert(pTHX_ OP* cmd)
			__attribute__warn_unused_result__;
d1639 1
a1639 1
PERL_CALLCONV U32	Perl_to_uni_upper_lc(pTHX_ U32 c)
d1643 1
a1643 1
PERL_CALLCONV U32	Perl_to_uni_title_lc(pTHX_ U32 c)
d1647 1
a1647 1
PERL_CALLCONV U32	Perl_to_uni_lower_lc(pTHX_ U32 c)
d1651 1
a1651 9
PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ UV c)
d1659 1
a1659 1
PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ UV c)
d1667 1
a1667 1
PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ UV c)
d1675 1
a1675 1
PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ UV c)
d1679 1
a1679 1
PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ UV c)
d1683 1
a1683 1
PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ UV c)
d1687 1
a1687 1
PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ UV c)
d1691 1
a1691 1
PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ UV c)
d1695 1
a1695 25
PERL_CALLCONV UV	Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_TO_UNI_UPPER	\
	assert(p); assert(lenp)

PERL_CALLCONV UV	Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_TO_UNI_TITLE	\
	assert(p); assert(lenp)

PERL_CALLCONV UV	Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_TO_UNI_LOWER	\
	assert(p); assert(lenp)

PERL_CALLCONV UV	Perl_to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_TO_UNI_FOLD	\
	assert(p); assert(lenp)

PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ UV c)
d1699 1
a1699 1
PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ UV c)
d1703 1
a1703 1
PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ UV c)
d1707 1
a1707 1
PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ UV c)
d1711 1
a1711 1
PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ UV c)
d1715 1
a1715 1
PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ UV c)
d1719 1
a1719 1
PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ UV c)
d1723 1
a1723 1
PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ UV c)
d1727 1
a1727 1
PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ UV c)
d1731 1
a1731 1
PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ UV c)
d1735 1
a1735 5
PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ UV c)
d1743 1
a1743 26
PERL_CALLCONV bool	Perl_is_ascii_string(const U8 *s, STRLEN len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_ASCII_STRING	\
	assert(s)

PERL_CALLCONV STRLEN	Perl_is_utf8_char(const U8 *s)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR	\
	assert(s)

PERL_CALLCONV bool	Perl_is_utf8_string(const U8 *s, STRLEN len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING	\
	assert(s)

/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **p)
			__attribute__nonnull__(1); */
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOC	\
	assert(s)

PERL_CALLCONV bool	Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN	\
	assert(s)

PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ const U8 *p)
d1746 1
a1746 1
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUM	\
d1749 1
a1749 1
PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ const U8 *p)
d1752 1
a1752 1
#define PERL_ARGS_ASSERT_IS_UTF8_IDFIRST	\
d1755 1
a1755 1
PERL_CALLCONV bool	Perl_is_utf8_idcont(pTHX_ const U8 *p)
d1758 1
a1758 1
#define PERL_ARGS_ASSERT_IS_UTF8_IDCONT	\
d1761 1
a1761 1
PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ const U8 *p)
d1764 1
a1764 1
#define PERL_ARGS_ASSERT_IS_UTF8_ALPHA	\
d1767 1
a1767 1
PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ const U8 *p)
d1770 1
a1770 1
#define PERL_ARGS_ASSERT_IS_UTF8_ASCII	\
d1773 1
a1773 1
PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ const U8 *p)
d1776 1
a1776 1
#define PERL_ARGS_ASSERT_IS_UTF8_SPACE	\
d1779 1
a1779 1
PERL_CALLCONV bool	Perl_is_utf8_perl_space(pTHX_ const U8 *p)
d1782 1
a1782 1
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_SPACE	\
d1785 1
a1785 1
PERL_CALLCONV bool	Perl_is_utf8_perl_word(pTHX_ const U8 *p)
d1788 1
a1788 1
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_WORD	\
d1791 1
a1791 1
PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ const U8 *p)
d1794 1
a1794 1
#define PERL_ARGS_ASSERT_IS_UTF8_CNTRL	\
d1797 1
a1797 1
PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ const U8 *p)
d1800 1
a1800 1
#define PERL_ARGS_ASSERT_IS_UTF8_DIGIT	\
d1803 1
a1803 1
PERL_CALLCONV bool	Perl_is_utf8_posix_digit(pTHX_ const U8 *p)
d1806 1
a1806 1
#define PERL_ARGS_ASSERT_IS_UTF8_POSIX_DIGIT	\
d1809 1
a1809 1
PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ const U8 *p)
d1812 1
a1812 1
#define PERL_ARGS_ASSERT_IS_UTF8_GRAPH	\
d1815 1
a1815 1
PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ const U8 *p)
d1818 1
a1818 1
#define PERL_ARGS_ASSERT_IS_UTF8_UPPER	\
d1821 5
a1825 5
PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_LOWER	\
	assert(p)
d1827 25
a1851 1
PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ const U8 *p)
d1854 1
a1854 1
#define PERL_ARGS_ASSERT_IS_UTF8_PRINT	\
d1857 1
a1857 1
PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ const U8 *p)
d1860 1
a1860 1
#define PERL_ARGS_ASSERT_IS_UTF8_PUNCT	\
d1863 1
a1863 1
PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ const U8 *p)
d1866 1
a1866 1
#define PERL_ARGS_ASSERT_IS_UTF8_XDIGIT	\
d1875 1
a1875 1
PERL_CALLCONV bool	Perl_is_utf8_X_begin(pTHX_ const U8 *p)
d1878 1
a1878 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_BEGIN	\
d1881 1
a1881 1
PERL_CALLCONV bool	Perl_is_utf8_X_extend(pTHX_ const U8 *p)
d1884 1
a1884 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_EXTEND	\
d1887 1
a1887 1
PERL_CALLCONV bool	Perl_is_utf8_X_prepend(pTHX_ const U8 *p)
d1890 1
a1890 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_PREPEND	\
d1893 1
a1893 1
PERL_CALLCONV bool	Perl_is_utf8_X_non_hangul(pTHX_ const U8 *p)
d1896 1
a1896 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_NON_HANGUL	\
d1899 1
a1899 1
PERL_CALLCONV bool	Perl_is_utf8_X_L(pTHX_ const U8 *p)
d1902 1
a1902 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_L	\
d1905 1
a1905 1
PERL_CALLCONV bool	Perl_is_utf8_X_LV(pTHX_ const U8 *p)
d1908 1
a1908 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_LV	\
d1911 16
a1926 1
PERL_CALLCONV bool	Perl_is_utf8_X_LVT(pTHX_ const U8 *p)
d1929 1
a1929 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_LVT	\
d1932 1
a1932 1
PERL_CALLCONV bool	Perl_is_utf8_X_LV_LVT_V(pTHX_ const U8 *p)
d1935 1
a1935 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_LV_LVT_V	\
d1938 1
a1938 1
PERL_CALLCONV bool	Perl_is_utf8_X_T(pTHX_ const U8 *p)
d1941 1
a1941 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_T	\
d1944 1
a1944 1
PERL_CALLCONV bool	Perl_is_utf8_X_V(pTHX_ const U8 *p)
d1947 1
a1947 1
#define PERL_ARGS_ASSERT_IS_UTF8_X_V	\
d1961 5
a1965 10
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_opt_scalarhv(pTHX_ OP* rep_op)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OPT_SCALARHV	\
	assert(rep_op)

STATIC OP*	S_is_inplace_av(pTHX_ OP* o, OP* oright)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_INPLACE_AV	\
	assert(o)
a1966 1
#endif
a1967 2
PERL_CALLCONV void	Perl_lex_end(pTHX);
PERL_CALLCONV void	Perl_lex_start(pTHX_ SV* line, PerlIO *rsfp, bool new_filter);
d1969 1
a1969 2
PERL_CALLCONV char*	Perl_lex_grow_linestr(pTHX_ STRLEN len);
PERL_CALLCONV void	Perl_lex_stuff_pvn(pTHX_ char* pv, STRLEN len, U32 flags)
d1971 1
a1971 11
#define PERL_ARGS_ASSERT_LEX_STUFF_PVN	\
	assert(pv)

PERL_CALLCONV void	Perl_lex_stuff_sv(pTHX_ SV* sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_STUFF_SV	\
	assert(sv)

PERL_CALLCONV void	Perl_lex_unstuff(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_UNSTUFF	\
d1974 4
d1983 3
a1985 1
PERL_CALLCONV void	Perl_lex_discard_to(pTHX_ char* ptr)
d1987 2
a1988 2
#define PERL_ARGS_ASSERT_LEX_DISCARD_TO	\
	assert(ptr)
d1990 1
a1990 5
PERL_CALLCONV bool	Perl_lex_next_chunk(pTHX_ U32 flags);
PERL_CALLCONV I32	Perl_lex_peek_unichar(pTHX_ U32 flags);
PERL_CALLCONV I32	Perl_lex_read_unichar(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_lex_read_space(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_op_null(pTHX_ OP* o)
d1992 2
a1993 2
#define PERL_ARGS_ASSERT_OP_NULL	\
	assert(o)
d1995 1
a1995 1
PERL_CALLCONV void	Perl_op_clear(pTHX_ OP* o)
d1997 2
a1998 2
#define PERL_ARGS_ASSERT_OP_CLEAR	\
	assert(o)
d2000 1
a2000 4
PERL_CALLCONV void	Perl_op_refcnt_lock(pTHX);
PERL_CALLCONV void	Perl_op_refcnt_unlock(pTHX);
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_linklist(pTHX_ OP *o)
d2002 2
a2003 2
#define PERL_ARGS_ASSERT_LINKLIST	\
	assert(o)
a2004 2
STATIC OP*	S_listkids(pTHX_ OP* o);
#endif
a2010 5
PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_VLOAD_MODULE	\
	assert(name)

d2022 1
a2022 21
PERL_CALLCONV UV	Perl_grok_bin(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GROK_BIN	\
	assert(start); assert(len_p); assert(flags)

PERL_CALLCONV UV	Perl_grok_hex(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GROK_HEX	\
	assert(start); assert(len_p); assert(flags)

PERL_CALLCONV int	Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GROK_NUMBER	\
	assert(pv)

PERL_CALLCONV bool	Perl_grok_numeric_radix(pTHX_ const char **sp, const char *send)
			__attribute__warn_unused_result__
d2025 2
a2026 9
#define PERL_ARGS_ASSERT_GROK_NUMERIC_RADIX	\
	assert(sp); assert(send)

PERL_CALLCONV UV	Perl_grok_oct(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GROK_OCT	\
	assert(start); assert(len_p); assert(flags)
a2033 6
PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEAR_ALL_ENV	\
	assert(sv); assert(mg)

d2063 1
d2070 6
d2148 6
d2160 7
d2193 6
d2205 6
a2222 6
PERL_CALLCONV int	Perl_magic_freearylen_p(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_FREEARYLEN_P	\
	assert(sv); assert(mg)

d2300 6
d2318 1
a2318 7
PERL_CALLCONV int	Perl_magic_setutf8(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SETUTF8	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg)
d2321 1
a2321 1
#define PERL_ARGS_ASSERT_MAGIC_SET_ALL_ENV	\
d2336 4
a2340 14
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SETCOLLXFRM	\
	assert(sv); assert(mg)

PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MEM_COLLXFRM	\
	assert(s); assert(xlen)

#endif
d2347 1
a2347 1
PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args)
d2349 2
a2350 17
#define PERL_ARGS_ASSERT_VMESS	\
	assert(pat)

PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_QERROR	\
	assert(err)

PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SORTSV	\
	assert(cmp)

PERL_CALLCONV void	Perl_sortsv_flags(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SORTSV_FLAGS	\
	assert(cmp)
d2352 1
d2364 2
a2365 5
PERL_CALLCONV void	Perl_mg_localize(pTHX_ SV* sv, SV* nsv, bool setmagic)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MG_LOCALIZE	\
	assert(sv); assert(nsv)
d2367 1
a2367 1
PERL_CALLCONV MAGIC*	Perl_mg_find(pTHX_ const SV* sv, int type)
d2375 5
d2390 6
a2415 1
PERL_CALLCONV OP*	Perl_mod(pTHX_ OP* o, I32 type);
d2417 1
d2423 59
d2487 5
a2491 6
#if (!defined(HAS_MEMCPY) && !defined(HAS_BCOPY)) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY) && !defined(HAS_SAFE_BCOPY))
PERL_CALLCONV char*	Perl_my_bcopy(const char* from, char* to, I32 len)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_MY_BCOPY	\
	assert(from); assert(to)
d2493 4
a2496 6
#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
PERL_CALLCONV char*	Perl_my_bzero(char* loc, I32 len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MY_BZERO	\
	assert(loc)
d2498 2
a2499 1
#endif
d2508 2
a2509 26
PERL_CALLCONV void	Perl_atfork_lock(void);
PERL_CALLCONV void	Perl_atfork_unlock(void);
PERL_CALLCONV I32	Perl_my_lstat(pTHX);
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
PERL_CALLCONV I32	Perl_my_memcmp(const char* s1, const char* s2, I32 len)
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_MY_MEMCMP	\
	assert(s1); assert(s2)

#endif
#if !defined(HAS_MEMSET)
PERL_CALLCONV void*	Perl_my_memset(char* loc, I32 ch, I32 len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MY_MEMSET	\
	assert(loc)

#endif
PERL_CALLCONV I32	Perl_my_pclose(pTHX_ PerlIO* ptr);
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ const char* cmd, const char* mode)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MY_POPEN	\
	assert(cmd); assert(mode)

d2517 10
a2526 1
PERL_CALLCONV I32	Perl_my_stat(pTHX);
d2532 4
a2535 5
#if defined(MYSWAP)
PERL_CALLCONV short	Perl_my_swap(pTHX_ short s)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__pure__;
d2537 6
a2542 4
PERL_CALLCONV long	Perl_my_htonl(pTHX_ long l)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__pure__;
d2544 2
a2545 1
PERL_CALLCONV long	Perl_my_ntohl(pTHX_ long l)
d2547 1
a2547 2
			__attribute__warn_unused_result__
			__attribute__pure__;
a2548 2
#endif
PERL_CALLCONV void	Perl_my_unexec(pTHX);
d2553 2
a2554 1
PERL_CALLCONV OP*	Perl_newANONHASH(pTHX_ OP* o)
d2558 13
a2570 2
PERL_CALLCONV OP*	Perl_newANONSUB(pTHX_ I32 floor, OP* proto, OP* block);
PERL_CALLCONV OP*	Perl_newASSIGNOP(pTHX_ I32 flags, OP* left, I32 optype, OP* right)
d2582 6
a2587 6
#ifdef PERL_MAD
PERL_CALLCONV OP*	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
#else
PERL_CALLCONV void	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
#endif
PERL_CALLCONV OP*	Perl_newFOROP(pTHX_ I32 flags, char* label, line_t forline, OP* sv, OP* expr, OP* block, OP* cont)
d2590 1
a2590 1
			__attribute__nonnull__(pTHX_5);
d2602 48
d2677 4
d2686 4
d2698 1
a2698 1
PERL_CALLCONV OP*	Perl_newSLICEOP(pTHX_ I32 flags, OP* subscript, OP* listop)
d2700 1
a2700 25
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newSTATEOP(pTHX_ I32 flags, char* label, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV CV*	Perl_newSUB(pTHX_ I32 floor, OP* o, OP* proto, OP* block);
PERL_CALLCONV CV *	Perl_newXS_flags(pTHX_ const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_NEWXS_FLAGS	\
	assert(subaddr); assert(filename)

PERL_CALLCONV CV*	Perl_newXS(pTHX_ const char *name, XSUBADDR_t subaddr, const char *filename)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_NEWXS	\
	assert(subaddr); assert(filename)

/* PERL_CALLCONV AV*	Perl_newAV(pTHX)
			__attribute__warn_unused_result__; */

PERL_CALLCONV OP*	Perl_newAVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__
d2702 2
a2703 2
#define PERL_ARGS_ASSERT_NEWAVREF	\
	assert(o)
d2705 1
a2705 16
PERL_CALLCONV OP*	Perl_newBINOP(pTHX_ I32 type, I32 flags, OP* first, OP* last)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newCVREF(pTHX_ I32 flags, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newGVOP(pTHX_ I32 type, I32 flags, GV* gv)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_NEWGVOP	\
	assert(gv)

PERL_CALLCONV GV*	Perl_newGVgen(pTHX_ const char* pack)
d2709 2
a2710 2
#define PERL_ARGS_ASSERT_NEWGVGEN	\
	assert(pack)
d2712 1
a2712 1
PERL_CALLCONV OP*	Perl_newGVREF(pTHX_ I32 type, OP* o)
d2716 1
a2716 11
PERL_CALLCONV OP*	Perl_newHVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWHVREF	\
	assert(o)

/* PERL_CALLCONV HV*	Perl_newHV(pTHX)
			__attribute__warn_unused_result__; */

PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV *hv)
d2720 2
a2721 5
/* PERL_CALLCONV IO*	Perl_newIO(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__; */

PERL_CALLCONV OP*	Perl_newLISTOP(pTHX_ I32 type, I32 flags, OP* first, OP* last)
d2725 1
a2725 2
#ifdef USE_ITHREADS
PERL_CALLCONV OP*	Perl_newPADOP(pTHX_ I32 type, I32 flags, SV* sv)
d2729 1
a2729 24
#define PERL_ARGS_ASSERT_NEWPADOP	\
	assert(sv)

#endif
PERL_CALLCONV OP*	Perl_newPMOP(pTHX_ I32 type, I32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newPVOP(pTHX_ I32 type, I32 flags, char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV *const sv)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWRV	\
	assert(sv)

PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *const sv)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWRV_NOINC	\
a2731 4
PERL_CALLCONV SV*	Perl_newSV(pTHX_ const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d2739 1
a2739 1
PERL_CALLCONV OP*	Perl_newSVOP(pTHX_ I32 type, I32 flags, SV* sv)
d2741 1
a2741 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_NEWSVOP	\
	assert(sv)
d2743 1
a2743 1
PERL_CALLCONV SV*	Perl_newSViv(pTHX_ const IV i)
d2747 1
a2747 1
PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ const UV u)
d2759 1
a2759 1
PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char *const s, const STRLEN len)
d2763 9
a2771 1
PERL_CALLCONV SV*	Perl_newSVpvn_flags(pTHX_ const char *const s, const STRLEN len, const U32 flags)
d2775 1
a2775 1
PERL_CALLCONV SV*	Perl_newSVhek(pTHX_ const HEK *const hek)
a2782 15
PERL_CALLCONV SV*	Perl_newSVpvf(pTHX_ const char *const pat, ...)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWSVPVF	\
	assert(pat)

PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char *const pat, va_list *const args)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VNEWSVPVF	\
	assert(pat)

d2792 1
a2792 1
PERL_CALLCONV SV*	Perl_newSV_type(pTHX_ const svtype type)
d2807 1
a2807 1
PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, I32 whileline, OP* expr, OP* block, OP* cont, I32 has_my)
d2811 5
a2815 3
PERL_CALLCONV PERL_SI*	Perl_new_stackinfo(pTHX_ I32 stitems, I32 cxitems)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2817 1
a2817 2
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *const e, SV *sv)
			__attribute__nonnull__(pTHX_1)
d2820 2
a2821 2
#define PERL_ARGS_ASSERT_SCAN_VSTRING	\
	assert(s); assert(e); assert(sv)
d2823 5
a2827 5
PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *s, SV *rv, bool qv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SCAN_VERSION	\
	assert(s); assert(rv)
d2829 2
a2830 1
PERL_CALLCONV const char*	Perl_prescan_version(pTHX_ const char *s, bool strict, const char** errstr, bool *sqv, int *ssaw_decimal, int *swidth, bool *salpha)
d2832 7
a2838 2
#define PERL_ARGS_ASSERT_PRESCAN_VERSION	\
	assert(s)
d2845 3
a2847 27
PERL_CALLCONV SV*	Perl_upg_version(pTHX_ SV *ver, bool qv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UPG_VERSION	\
	assert(ver)

PERL_CALLCONV bool	Perl_vverify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VVERIFY	\
	assert(vs)

PERL_CALLCONV SV*	Perl_vnumify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VNUMIFY	\
	assert(vs)

PERL_CALLCONV SV*	Perl_vnormal(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VNORMAL	\
	assert(vs)

PERL_CALLCONV SV*	Perl_vstringify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VSTRINGIFY	\
	assert(vs)

PERL_CALLCONV int	Perl_vcmp(pTHX_ SV *lhv, SV *rhv)
			__attribute__nonnull__(pTHX_1)
d2849 2
a2850 2
#define PERL_ARGS_ASSERT_VCMP	\
	assert(lhv); assert(rhv)
d2866 3
a2868 3
PERL_CALLCONV void	Perl_op_free(pTHX_ OP* arg);
#ifdef PERL_MAD
PERL_CALLCONV OP*	Perl_package(pTHX_ OP* o)
d2870 1
a2870 1
#define PERL_ARGS_ASSERT_PACKAGE	\
d2873 2
a2874 2
#else
PERL_CALLCONV void	Perl_package(pTHX_ OP* o)
d2876 1
a2876 1
#define PERL_ARGS_ASSERT_PACKAGE	\
d2879 3
a2881 2
#endif
PERL_CALLCONV void	Perl_package_version(pTHX_ OP* v)
d2883 5
a2887 2
#define PERL_ARGS_ASSERT_PACKAGE_VERSION	\
	assert(v)
d2889 1
a2889 2
PERL_CALLCONV PADOFFSET	Perl_pad_alloc(pTHX_ I32 optype, U32 tmptype);
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ const char *const name, const STRLEN len, const U32 flags)
d2891 2
a2892 2
#define PERL_ARGS_ASSERT_ALLOCMY	\
	assert(name)
d2894 1
a2894 2
PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ const char* name, STRLEN len, U32 flags)
			__attribute__warn_unused_result__
d2896 2
a2897 2
#define PERL_ARGS_ASSERT_PAD_FINDMY	\
	assert(name)
d2899 2
a2900 3
PERL_CALLCONV PADOFFSET	Perl_find_rundefsvoffset(pTHX);
PERL_CALLCONV OP*	Perl_oopsAV(pTHX_ OP* o)
			__attribute__warn_unused_result__
d2902 1
a2902 1
#define PERL_ARGS_ASSERT_OOPSAV	\
d2905 3
a2907 2
PERL_CALLCONV OP*	Perl_oopsHV(pTHX_ OP* o)
			__attribute__warn_unused_result__
d2909 1
a2909 1
#define PERL_ARGS_ASSERT_OOPSHV	\
d2912 13
a2924 15
PERL_CALLCONV void	Perl_pad_leavemy(pTHX);
#ifdef DEBUGGING
PERL_CALLCONV SV*	Perl_pad_sv(pTHX_ PADOFFSET po);
#endif
PERL_CALLCONV void	Perl_pad_free(pTHX_ PADOFFSET po);
#if defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
STATIC void	S_pad_reset(pTHX);
#endif
PERL_CALLCONV void	Perl_pad_swipe(pTHX_ PADOFFSET po, bool refadjust);
PERL_CALLCONV void	Perl_peep(pTHX_ OP* o);
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV *tmpglob, IO *io)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_START_GLOB	\
	assert(tmpglob); assert(io)
d2926 4
a2929 8
#if defined(USE_REENTRANT_API)
PERL_CALLCONV void	Perl_reentrant_size(pTHX);
PERL_CALLCONV void	Perl_reentrant_init(pTHX);
PERL_CALLCONV void	Perl_reentrant_free(pTHX);
PERL_CALLCONV void*	Perl_reentrant_retry(const char *f, ...)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_REENTRANT_RETRY	\
	assert(f)
d2931 1
a2931 3
#endif
PERL_CALLCONV void	Perl_call_atexit(pTHX_ ATEXIT_t fn, void *ptr);
PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv)
d2933 6
a2938 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_CALL_ARGV	\
	assert(sub_name); assert(argv)
d2940 1
a2940 1
PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags)
d2942 2
a2943 2
#define PERL_ARGS_ASSERT_CALL_METHOD	\
	assert(methname)
d2945 1
a2945 1
PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags)
d2947 2
a2948 2
#define PERL_ARGS_ASSERT_CALL_PV	\
	assert(sub_name)
d2950 1
a2950 1
PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, VOL I32 flags)
d2952 2
a2953 2
#define PERL_ARGS_ASSERT_CALL_SV	\
	assert(sv)
d2955 1
a2955 2
PERL_CALLCONV void	Perl_despatch_signals(pTHX);
PERL_CALLCONV OP *	Perl_doref(pTHX_ OP *o, I32 type, bool set_op_ref)
d2957 7
a2963 2
#define PERL_ARGS_ASSERT_DOREF	\
	assert(o)
d2965 1
a2965 1
PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error)
d2967 2
a2968 2
#define PERL_ARGS_ASSERT_EVAL_PV	\
	assert(p)
d2970 1
a2970 1
PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags)
d2972 2
a2973 2
#define PERL_ARGS_ASSERT_EVAL_SV	\
	assert(sv)
d2975 1
a2975 1
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char *name, I32 flags)
d2977 1
a2977 1
#define PERL_ARGS_ASSERT_GET_SV	\
d2980 12
a2991 4
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char *name, I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_AV	\
	assert(name)
d2993 1
a2993 1
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char *name, I32 flags)
d2995 2
a2996 2
#define PERL_ARGS_ASSERT_GET_HV	\
	assert(name)
d2998 12
a3009 1
PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 flags)
d3011 2
a3012 2
#define PERL_ARGS_ASSERT_GET_CV	\
	assert(name)
d3014 1
a3014 1
PERL_CALLCONV CV*	Perl_get_cvn_flags(pTHX_ const char* name, STRLEN len, I32 flags)
d3016 2
a3017 2
#define PERL_ARGS_ASSERT_GET_CVN_FLAGS	\
	assert(name)
d3019 6
a3024 7
PERL_CALLCONV int	Perl_init_i18nl10n(pTHX_ int printwarn);
PERL_CALLCONV int	Perl_init_i18nl14n(pTHX_ int printwarn);
PERL_CALLCONV void	Perl_new_collate(pTHX_ const char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ const char* newctype)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEW_CTYPE	\
	assert(newctype)
d3026 4
a3029 8
PERL_CALLCONV void	Perl_new_numeric(pTHX_ const char* newcoll);
PERL_CALLCONV void	Perl_set_numeric_local(pTHX);
PERL_CALLCONV void	Perl_set_numeric_radix(pTHX);
PERL_CALLCONV void	Perl_set_numeric_standard(pTHX);
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REQUIRE_PV	\
	assert(pv)
d3031 4
a3034 9
PERL_CALLCONV void	Perl_pack_cat(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_PACK_CAT	\
	assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist); assert(next_in_list)
d3036 4
a3039 8
PERL_CALLCONV void	Perl_packlist(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_PACKLIST	\
	assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist)
d3041 4
a3044 8
#if defined(PERL_USES_PL_PIDSTATUS) && defined(PERL_IN_UTIL_C)
STATIC void	S_pidgone(pTHX_ Pid_t pid, int status);
#endif
PERL_CALLCONV void	Perl_pmflag(pTHX_ U32 *pmfl, int ch)
			__attribute__deprecated__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PMFLAG	\
	assert(pmfl)
d3046 1
a3052 9
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_pmtrans(pTHX_ OP* o, OP* expr, OP* repl)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_PMTRANS	\
	assert(o); assert(expr); assert(repl)

#endif
d3054 1
a3054 7
PERL_CALLCONV OP*	Perl_prepend_elem(pTHX_ I32 optype, OP* head, OP* tail);
PERL_CALLCONV void	Perl_push_scope(pTHX);
/* PERL_CALLCONV OP*	Perl_ref(pTHX_ OP* o, I32 type); */
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_refkids(pTHX_ OP* o, I32 type);
#endif
PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r)
d3056 2
a3057 2
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)
d3059 1
a3059 1
PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r)
d3061 2
a3062 7
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)

PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **altsvp)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGCLASS_SWASH	\
	assert(node)
d3079 1
a3079 6
PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* ret_x, REGEXP* rx)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REG_TEMP_COPY	\
	assert(rx)

PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const rx)
d3081 2
a3082 2
#define PERL_ARGS_ASSERT_REGFREE_INTERNAL	\
	assert(rx)
d3084 2
a3085 6
#if defined(USE_ITHREADS)
PERL_CALLCONV void*	Perl_regdupe_internal(pTHX_ REGEXP * const r, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGDUPE_INTERNAL	\
	assert(r); assert(param)
d3087 2
a3088 2
#endif
PERL_CALLCONV REGEXP*	Perl_pregcomp(pTHX_ SV * const pattern, const U32 flags)
d3090 7
a3096 2
#define PERL_ARGS_ASSERT_PREGCOMP	\
	assert(pattern)
d3098 1
a3098 1
PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ SV * const pattern, U32 flags)
d3100 2
a3101 2
#define PERL_ARGS_ASSERT_RE_COMPILE	\
	assert(pattern)
d3103 1
a3103 1
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
d3105 3
a3107 4
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_RE_INTUIT_START	\
	assert(rx); assert(strpos); assert(strend)
d3109 6
a3114 4
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP  *const r)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_RE_INTUIT_STRING	\
	assert(r)
d3116 29
a3144 1
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, I32 minend, SV *sv, void *data, U32 flags)
a3145 1
			__attribute__nonnull__(pTHX_2)
d3147 8
a3154 4
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_REGEXEC_FLAGS	\
	assert(rx); assert(stringarg); assert(strend); assert(strbeg); assert(sv)
d3156 2
a3157 1
PERL_CALLCONV regnode*	Perl_regnext(pTHX_ regnode* p)
d3160 33
d3199 1
a3199 1
PERL_CALLCONV SV*	Perl_reg_named_buff_iter(pTHX_ REGEXP * const rx, const SV * const lastkey, const U32 flags)
d3201 1
a3201 1
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ITER	\
d3204 6
a3215 6
PERL_CALLCONV bool	Perl_reg_named_buff_exists(pTHX_ REGEXP * const rx, SV * const key, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_EXISTS	\
	assert(rx); assert(key)

d3221 5
a3235 6
PERL_CALLCONV SV*	Perl_reg_named_buff_all(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ALL	\
	assert(rx)


a3240 5
PERL_CALLCONV void	Perl_reg_numbered_buff_store(pTHX_ REGEXP * const rx, const I32 paren, SV const * const value)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_STORE	\
	assert(rx)

d3247 4
d3257 37
d3301 1
a3301 1
PERL_CALLCONV void	Perl_repeatcpy(char* to, const char* from, I32 len, I32 count)
d3307 8
d3324 1
d3333 3
a3335 2
#if defined(PERL_IN_PP_CTL_C) || defined(PERL_DECL_PROT)
STATIC void	S_rxres_free(pTHX_ void** rsp)
d3337 2
a3338 8
#define PERL_ARGS_ASSERT_RXRES_FREE	\
	assert(rsp)

STATIC void	S_rxres_restore(pTHX_ void **rsp, REGEXP *rx)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_RXRES_RESTORE	\
	assert(rsp); assert(rx)
a3339 1
#endif
d3346 1
a3346 9
#if !defined(HAS_RENAME)
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ const char* a, const char* b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAME_DIRENT	\
	assert(a); assert(b)

#endif
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* pv)
d3350 2
a3351 1
PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* pv, I32 len)
d3355 1
a3355 1
PERL_CALLCONV char*	Perl_savesharedpv(pTHX_ const char* pv)
d3359 11
a3369 3
PERL_CALLCONV char*	Perl_savesharedpvn(pTHX_ const char *const pv, const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__
d3371 2
a3372 2
#define PERL_ARGS_ASSERT_SAVESHAREDPVN	\
	assert(pv)
d3374 1
a3374 3
PERL_CALLCONV char*	Perl_savesvpv(pTHX_ SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__
d3376 2
a3377 2
#define PERL_ARGS_ASSERT_SAVESVPV	\
	assert(sv)
a3378 2
PERL_CALLCONV void	Perl_savestack_grow(pTHX);
PERL_CALLCONV void	Perl_savestack_grow_cnt(pTHX_ I32 need);
a3415 11
PERL_CALLCONV void	Perl_save_hdelete(pTHX_ HV *hv, SV *keysv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAVE_HDELETE	\
	assert(hv); assert(keysv)

PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, I32 key)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_ADELETE	\
	assert(av)

a3421 1
/* PERL_CALLCONV void	Perl_save_freesv(pTHX_ SV* sv); */
d3424 1
a3424 5
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_SVREF	\
	assert(sptr)

d3430 1
a3430 1
PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str)
d3432 2
a3433 2
#define PERL_ARGS_ASSERT_SAVE_SHARED_PVREF	\
	assert(str)
d3445 6
a3450 1
PERL_CALLCONV void	Perl_save_hints(pTHX);
d3463 1
a3468 15
PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_I16	\
	assert(intp)

PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_I32	\
	assert(intp)

PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_I8	\
	assert(bytep)

d3505 10
d3520 1
a3520 1
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr)
d3522 2
a3523 2
#define PERL_ARGS_ASSERT_SAVE_PPTR	\
	assert(pptr)
d3525 1
a3525 1
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void *ptr)
d3527 2
a3528 2
#define PERL_ARGS_ASSERT_SAVE_VPTR	\
	assert(ptr)
a3529 2
PERL_CALLCONV void	Perl_save_re_context(pTHX);
PERL_CALLCONV void	Perl_save_padsv_and_mortalize(pTHX_ PADOFFSET off);
d3540 37
a3576 6
PERL_CALLCONV void	Perl_save_pushptr(pTHX_ void *const ptr, const int type);
PERL_CALLCONV void	Perl_save_pushi32ptr(pTHX_ const I32 i, void *const ptr, const int type);
PERL_CALLCONV void	Perl_save_pushptrptr(pTHX_ void *const ptr1, void *const ptr2, const int type);
#if defined(PERL_IN_SCOPE_C) || defined(PERL_DECL_PROT)
STATIC void	S_save_pushptri32ptr(pTHX_ void *const ptr1, const I32 i, void *const ptr2, const int type);
#endif
a3578 4
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_scalarkids(pTHX_ OP* o);
STATIC OP*	S_scalarseq(pTHX_ OP* o);
#endif
d3608 13
a3620 1
PERL_CALLCONV OP*	Perl_scope(pTHX_ OP* o);
d3628 9
d3643 10
a3652 7
#if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
PERL_CALLCONV Signal_t	Perl_sighandler(int sig, siginfo_t *info, void *uap);
PERL_CALLCONV Signal_t	Perl_csighandler(int sig, siginfo_t *info, void *uap);
#else
PERL_CALLCONV Signal_t	Perl_sighandler(int sig);
PERL_CALLCONV Signal_t	Perl_csighandler(int sig);
#endif
d3659 6
d3666 13
d3684 4
a3687 1
PERL_CALLCONV bool	Perl_sv_2bool(pTHX_ SV *const sv)
d3689 1
a3689 1
#define PERL_ARGS_ASSERT_SV_2BOOL	\
a3702 7
#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC bool	S_glob_2number(pTHX_ GV* const gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GLOB_2NUMBER	\
	assert(gv)

#endif
a3705 1
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV *const sv);
d3711 1
d3714 4
a3717 3
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV *const sv, STRLEN *const lp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_2PVUTF8	\
d3720 1
a3720 1
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV *const sv, STRLEN *const lp)
d3725 4
a3728 3
PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_PVN_NOMG	\
d3731 1
a3731 3
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv); */
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags);
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv)
d3733 1
a3733 1
#define PERL_ARGS_ASSERT_SV_IV	\
d3736 4
a3739 3
PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_UV	\
d3742 3
a3744 1
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv)
d3746 1
a3746 1
#define PERL_ARGS_ASSERT_SV_NV	\
d3749 1
a3749 1
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *lp)
d3752 2
a3753 2
#define PERL_ARGS_ASSERT_SV_PVN	\
	assert(sv); assert(lp)
d3755 1
a3755 1
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *lp)
d3757 11
a3767 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_PVUTF8N	\
	assert(sv); assert(lp)
d3769 1
a3769 1
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *lp)
d3772 2
a3773 2
#define PERL_ARGS_ASSERT_SV_PVBYTEN	\
	assert(sv); assert(lp)
d3775 1
a3775 3
PERL_CALLCONV I32	Perl_sv_true(pTHX_ SV *const sv);
#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC void	S_sv_add_arena(pTHX_ char *const ptr, const U32 size, const U32 flags)
d3777 1
a3777 7
#define PERL_ARGS_ASSERT_SV_ADD_ARENA	\
	assert(ptr)

#endif
PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_BACKOFF	\
a3779 6
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV *const sv, HV *const stash)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_BLESS	\
	assert(sv); assert(stash)

d3787 2
a3788 1
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d3791 1
a3791 1
#define PERL_ARGS_ASSERT_SV_VCATPVF	\
a3793 5
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV *const sv, const char* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_CATPV	\
	assert(sv)

d3800 12
d3817 10
d3834 1
a3834 1
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV *const sv)
d3837 1
a3837 1
	assert(sv)
d3840 1
d3842 3
a3844 2
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV char*	Perl_sv_collxfrm(pTHX_ SV *const sv, STRLEN *const nxp)
d3846 5
a3850 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_COLLXFRM	\
	assert(sv); assert(nxp)
d3852 1
a3852 2
#endif
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV *sv, OP **startop, const char *code, PAD **padp)
d3857 1
a3857 1
#define PERL_ARGS_ASSERT_SV_COMPILE_2OP	\
d3860 5
a3864 4
PERL_CALLCONV int	Perl_getcwd_sv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GETCWD_SV	\
	assert(sv)
d3867 6
a3872 4
PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_DUMP	\
	assert(sv)
d3881 1
a3881 1
PERL_CALLCONV bool	Perl_sv_does(pTHX_ SV* sv, const char *const name)
d3885 1
a3885 1
#define PERL_ARGS_ASSERT_SV_DOES	\
d3888 60
a3947 1
PERL_CALLCONV I32	Perl_sv_eq(pTHX_ SV* sv1, SV* sv2);
d3967 1
d3986 5
d4011 7
d4019 5
d4034 25
a4058 1
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV *const sv, I32 *const offsetp)
d4060 2
a4061 2
#define PERL_ARGS_ASSERT_SV_POS_B2U	\
	assert(offsetp)
d4068 6
a4073 1
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV *const sv, STRLEN *const lp)
d4075 7
a4081 1
#define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE	\
d4084 7
a4090 1
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV *const sv, STRLEN *const lp)
d4092 1
a4092 1
#define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE	\
d4101 4
a4104 8
PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SV_CAT_DECODE	\
	assert(dsv); assert(encoding); assert(ssv); assert(offset); assert(tstr)
d4124 40
d4171 2
a4172 1
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d4175 1
a4175 1
#define PERL_ARGS_ASSERT_SV_VSETPVF	\
a4177 5
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV *const sv, const IV num)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETIV	\
	assert(sv)

d4183 1
a4183 1
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV *const sv, const UV num)
d4185 1
a4185 1
#define PERL_ARGS_ASSERT_SV_SETUV	\
d4188 1
a4188 1
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV *const sv, const NV num)
d4190 1
a4190 1
#define PERL_ARGS_ASSERT_SV_SETNV	\
d4193 6
a4203 5
PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV *const rv, const char *const classname, const UV uv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETREF_UV	\
	assert(rv)

d4220 1
a4220 1
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV *const sv, const char *const ptr)
d4222 2
a4223 7
#define PERL_ARGS_ASSERT_SV_SETPV	\
	assert(sv)

PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV *const sv, const char *const ptr, const STRLEN len)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETPVN	\
	assert(sv)
d4230 20
d4261 8
d4274 5
d4309 4
a4312 5
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_VCATPVFN	\
	assert(sv); assert(pat)
d4314 4
a4317 5
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_VSETPVFN	\
	assert(sv); assert(pat)
d4319 1
a4319 2
PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv)
			__attribute__warn_unused_result__
d4321 1
a4321 1
#define PERL_ARGS_ASSERT_STR_TO_VERSION	\
d4324 68
d4393 1
d4400 12
a4411 5
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *swash, const U8 *ptr, bool do_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SWASH_FETCH	\
	assert(swash); assert(ptr)
d4413 1
d4420 43
d4467 1
a4467 2
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
d4469 1
a4469 1
	assert(p); assert(ustrp); assert(swashp); assert(normal); assert(special)
d4471 1
a4471 1
PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
d4473 2
a4474 2
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TO_UTF8_LOWER	\
d4477 1
a4477 1
PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
d4479 2
a4480 2
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TO_UTF8_UPPER	\
d4483 1
a4483 1
PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
d4485 1
a4485 1
			__attribute__nonnull__(pTHX_2);
d4489 1
a4489 1
PERL_CALLCONV UV	Perl_to_utf8_fold(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
d4491 2
a4492 2
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TO_UTF8_FOLD	\
d4495 2
a4496 7
#if defined(UNLINK_ALL_VERSIONS)
PERL_CALLCONV I32	Perl_unlnk(pTHX_ const char* f)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UNLNK	\
	assert(f)

#endif
d4513 1
d4515 4
a4518 6
PERL_CALLCONV void	Perl_unshare_hek(pTHX_ HEK* hek);
#ifdef PERL_MAD
PERL_CALLCONV OP *	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)
a4519 7
#else
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)

#endif
a4533 8
PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ const U8* s, const U8 *e)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_UTF8_LENGTH	\
	assert(s); assert(e)

d4549 3
a4551 1
PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len)
d4554 2
a4555 2
#define PERL_ARGS_ASSERT_UTF8_TO_BYTES	\
	assert(s); assert(len)
d4557 1
a4557 1
PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ const U8 *s, STRLEN *len, bool *is_utf8)
d4560 1
a4560 7
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8	\
	assert(s); assert(len)

PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ const U8 *s, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_BYTES_TO_UTF8	\
d4564 1
d4569 6
d4576 1
d4581 5
a4585 14

#ifdef EBCDIC
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)

#else
/* PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)

#endif
d4592 1
a4592 3

#ifdef EBCDIC
PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv)
d4594 1
a4594 1
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8	\
a4596 8
#else
/* PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8	\
	assert(d)

#endif

d4602 1
a4602 1
PERL_CALLCONV U8*	Perl_uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
d4604 1
a4604 1
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8_FLAGS	\
d4607 6
a4612 1
PERL_CALLCONV U8*	Perl_uvuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
d4614 2
a4615 2
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8_FLAGS	\
	assert(d)
d4617 1
a4617 1
PERL_CALLCONV char*	Perl_pv_uni_display(pTHX_ SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags)
d4620 2
a4621 2
#define PERL_ARGS_ASSERT_PV_UNI_DISPLAY	\
	assert(dsv); assert(spv)
d4623 2
a4624 6
PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_UNI_DISPLAY	\
	assert(dsv); assert(ssv)
d4626 1
a4626 1
PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv)
d4628 2
a4629 2
#define PERL_ARGS_ASSERT_VIVIFY_DEFELEM	\
	assert(sv)
d4631 12
a4642 1
PERL_CALLCONV void	Perl_vivify_ref(pTHX_ SV* sv, U32 to_what)
d4647 1
a4647 1
PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags)
d4649 19
a4667 2
#define PERL_ARGS_ASSERT_WAIT4PID	\
	assert(statusp)
d4669 1
a4669 1
PERL_CALLCONV U32	Perl_parse_unicode_opts(pTHX_ const char **popt)
d4671 2
a4672 2
#define PERL_ARGS_ASSERT_PARSE_UNICODE_OPTS	\
	assert(popt)
d4674 4
a4677 3
PERL_CALLCONV U32	Perl_seed(pTHX);
PERL_CALLCONV UV	Perl_get_hash_seed(pTHX)
			__attribute__warn_unused_result__;
d4679 1
a4679 4
PERL_CALLCONV void	Perl_report_evil_fh(pTHX_ const GV *gv, const IO *io, I32 op);
PERL_CALLCONV void	Perl_report_uninit(pTHX_ const SV *uninit_sv);
PERL_CALLCONV void	Perl_warn(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
d4681 2
a4682 2
#define PERL_ARGS_ASSERT_WARN	\
	assert(pat)
d4689 1
a4689 2
PERL_CALLCONV void	Perl_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
d4691 1
a4691 1
#define PERL_ARGS_ASSERT_WARNER	\
d4694 1
a4694 2
PERL_CALLCONV void	Perl_ck_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
d4696 7
a4702 1
#define PERL_ARGS_ASSERT_CK_WARNER	\
d4705 6
a4710 1
PERL_CALLCONV void	Perl_ck_warner_d(pTHX_ U32 err, const char* pat, ...)
d4713 1
a4713 1
#define PERL_ARGS_ASSERT_CK_WARNER_D	\
d4716 2
a4717 4
PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_VWARNER	\
	assert(pat)
d4724 9
a4732 1
PERL_CALLCONV I32	Perl_whichsig(pTHX_ const char* sig)
d4734 1
a4734 1
#define PERL_ARGS_ASSERT_WHICHSIG	\
d4737 11
d4753 11
d4769 10
d4780 6
a4785 2
PERL_CALLCONV int	Perl_yyparse(pTHX);
PERL_CALLCONV void	Perl_parser_free(pTHX_ const yy_parser *parser)
d4787 2
a4788 2
#define PERL_ARGS_ASSERT_PARSER_FREE	\
	assert(parser)
d4790 7
a4796 4
#if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
STATIC int	S_yywarn(pTHX_ const char *const s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_YYWARN	\
d4799 5
d4805 9
a4813 2
#if defined(MYMALLOC)
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ const char* s)
d4815 2
a4816 2
#define PERL_ARGS_ASSERT_DUMP_MSTATS	\
	assert(s)
d4818 4
a4821 1
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level)
d4823 2
a4824 2
#define PERL_ARGS_ASSERT_GET_MSTATS	\
	assert(buf)
d4826 1
d4828 4
a4831 3
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d4833 4
a4836 3
PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d4838 4
a4841 3
PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d4843 4
a4846 5
PERL_CALLCONV Free_t	Perl_safesysfree(Malloc_t where);
#if defined(PERL_GLOBAL_STRUCT)
PERL_CALLCONV struct perl_vars *	Perl_GetVars(pTHX);
PERL_CALLCONV struct perl_vars*	Perl_init_global_struct(pTHX);
PERL_CALLCONV void	Perl_free_global_struct(pTHX_ struct perl_vars *plvarsp)
d4848 2
a4849 2
#define PERL_ARGS_ASSERT_FREE_GLOBAL_STRUCT	\
	assert(plvarsp)
d4851 1
d4853 5
a4857 8
PERL_CALLCONV int	Perl_runops_standard(pTHX);
PERL_CALLCONV int	Perl_runops_debug(pTHX);
PERL_CALLCONV void	Perl_sv_catpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATPVF_MG	\
	assert(sv); assert(pat)
d4859 3
a4861 1
PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d4864 2
a4865 2
#define PERL_ARGS_ASSERT_SV_VCATPVF_MG	\
	assert(sv); assert(pat)
d4867 8
a4874 4
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *const sv, const char *const ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_CATPV_MG	\
	assert(sv)
d4876 6
a4881 5
/* PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_SV_CATPVN_MG	\
	assert(sv); assert(ptr)
d4883 5
a4887 7
/* PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dsv, SV *ssv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_CATSV_MG	\
	assert(dsv)

PERL_CALLCONV void	Perl_sv_setpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
d4890 2
a4891 2
#define PERL_ARGS_ASSERT_SV_SETPVF_MG	\
	assert(sv); assert(pat)
d4893 4
a4896 1
PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d4899 7
a4905 2
#define PERL_ARGS_ASSERT_SV_VSETPVF_MG	\
	assert(sv); assert(pat)
d4907 10
a4916 4
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *const sv, const IV i)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETIV_MG	\
	assert(sv)
d4918 5
a4922 1
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *const sv, const IV iv)
d4924 1
a4924 1
#define PERL_ARGS_ASSERT_SV_SETPVIV_MG	\
d4927 7
a4933 1
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *const sv, const UV u)
d4935 22
a4956 2
#define PERL_ARGS_ASSERT_SV_SETUV_MG	\
	assert(sv)
d4958 5
a4962 1
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *const sv, const NV num)
d4964 6
a4969 1
#define PERL_ARGS_ASSERT_SV_SETNV_MG	\
d4972 5
a4976 1
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *const sv, const char *const ptr)
d4978 2
a4979 2
#define PERL_ARGS_ASSERT_SV_SETPV_MG	\
	assert(sv)
d4981 8
a4988 5
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *const sv, const char *const ptr, const STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_SETPVN_MG	\
	assert(sv); assert(ptr)
d4990 3
a4992 1
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *const dstr, SV *const sstr)
d4994 10
a5003 2
#define PERL_ARGS_ASSERT_SV_SETSV_MG	\
	assert(dstr)
d5005 7
a5011 4
/* PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_USEPVN_MG	\
	assert(sv)
d5013 4
a5016 2
PERL_CALLCONV MGVTBL*	Perl_get_vtbl(pTHX_ int vtbl_id)
			__attribute__warn_unused_result__;
d5018 1
a5018 2
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim)
			__attribute__nonnull__(pTHX_1)
d5020 2
a5021 2
#define PERL_ARGS_ASSERT_PV_DISPLAY	\
	assert(dsv); assert(pv)
d5023 3
a5025 1
PERL_CALLCONV char*	Perl_pv_escape(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags)
d5028 2
a5029 2
#define PERL_ARGS_ASSERT_PV_ESCAPE	\
	assert(dsv); assert(str)
d5031 3
a5033 1
PERL_CALLCONV char*	Perl_pv_pretty(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags)
d5035 3
a5037 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PV_PRETTY	\
	assert(dsv); assert(str)
d5039 2
a5040 3
PERL_CALLCONV void	Perl_dump_indent(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
d5042 2
a5043 2
#define PERL_ARGS_ASSERT_DUMP_INDENT	\
	assert(file); assert(pat)
d5045 2
a5046 2
PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args)
			__attribute__nonnull__(pTHX_2)
d5048 2
a5049 2
#define PERL_ARGS_ASSERT_DUMP_VINDENT	\
	assert(file); assert(pat)
d5051 2
a5052 1
PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv)
d5054 9
a5062 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_GV_DUMP	\
	assert(file); assert(name)
d5064 3
a5066 1
PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv)
d5069 2
a5070 2
#define PERL_ARGS_ASSERT_DO_GVGV_DUMP	\
	assert(file); assert(name)
d5072 9
a5080 5
PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, const char *name, HV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_HV_DUMP	\
	assert(file); assert(name)
d5082 2
a5083 1
PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim)
d5085 5
a5089 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_MAGIC_DUMP	\
	assert(file); assert(mg)
d5091 6
a5096 4
PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, const OP *o)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_OP_DUMP	\
	assert(file)
d5098 4
a5101 1
PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, const PMOP *pm)
d5103 2
a5104 2
#define PERL_ARGS_ASSERT_DO_PMOP_DUMP	\
	assert(file)
d5106 1
a5106 1
PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim)
d5108 2
a5109 2
#define PERL_ARGS_ASSERT_DO_SV_DUMP	\
	assert(file)
d5111 6
a5116 6
PERL_CALLCONV void	Perl_magic_dump(pTHX_ const MAGIC *mg);
PERL_CALLCONV void	Perl_reginitcolors(pTHX);
/* PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2PV_NOLEN	\
d5119 13
a5131 5
/* PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2PVUTF8_NOLEN	\
	assert(sv)
d5133 4
a5136 5
/* PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2PVBYTE_NOLEN	\
	assert(sv)
d5138 7
a5144 5
/* PERL_CALLCONV char*	Perl_sv_pv(pTHX_ SV *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_PV	\
	assert(sv)
d5146 62
a5207 1
/* PERL_CALLCONV char*	Perl_sv_pvutf8(pTHX_ SV *sv)
d5209 3
a5211 3
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_PVUTF8	\
	assert(sv)
d5213 4
a5216 1
/* PERL_CALLCONV char*	Perl_sv_pvbyte(pTHX_ SV *sv)
d5218 1
a5218 3
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_PVBYTE	\
	assert(sv)
d5220 4
a5223 4
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE	\
	assert(sv)
d5225 4
a5228 2
/* PERL_CALLCONV STRLEN	sv_utf8_upgrade_nomg(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
d5230 8
a5237 1
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *const sv, const bool fail_ok)
d5239 1
a5239 1
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE	\
d5242 6
a5247 1
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *const sv)
d5249 2
a5250 2
#define PERL_ARGS_ASSERT_SV_UTF8_ENCODE	\
	assert(sv)
d5252 4
a5255 1
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *const sv)
d5257 2
a5258 2
#define PERL_ARGS_ASSERT_SV_UTF8_DECODE	\
	assert(sv)
d5260 6
a5265 1
/* PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv)
a5266 2
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL	\
	assert(sv)
d5268 7
a5274 1
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *const sv, const U32 flags)
d5276 2
a5277 2
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL_FLAGS	\
	assert(sv)
d5279 5
a5283 2
PERL_CALLCONV void	Perl_tmps_grow(pTHX_ I32 n);
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *const sv)
d5285 2
a5286 2
#define PERL_ARGS_ASSERT_SV_RVWEAKEN	\
	assert(sv)
d5288 4
a5291 5
PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_KILLBACKREFS	\
	assert(sv); assert(mg)
d5293 6
a5298 5
PERL_CALLCONV OP*	Perl_newANONATTRSUB(pTHX_ I32 floor, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV CV*	Perl_newATTRSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
#ifdef PERL_MAD
PERL_CALLCONV OP *	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__noreturn__;
d5300 5
a5304 3
#else
PERL_CALLCONV void	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__noreturn__;
d5306 2
a5307 5
#endif
PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MY_ATTRS	\
	assert(o)
d5309 5
a5313 6
#if defined(USE_ITHREADS)
PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_CX_DUP	\
	assert(param)
d5315 6
a5320 5
PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SI_DUP	\
	assert(param)
d5322 4
a5325 7
PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SS_DUP	\
	assert(proto_perl); assert(param)
d5327 5
a5331 5
PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, const PerlInterpreter* proto_perl)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_ANY_DUP	\
	assert(proto_perl)
d5333 5
a5337 5
PERL_CALLCONV HE*	Perl_he_dup(pTHX_ const HE* e, bool shared, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_HE_DUP	\
	assert(param)
d5339 5
a5343 5
PERL_CALLCONV HEK*	Perl_hek_dup(pTHX_ HEK* e, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HEK_DUP	\
	assert(param)
d5345 6
a5350 6
PERL_CALLCONV void	Perl_re_dup_guts(pTHX_ const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_RE_DUP_GUTS	\
	assert(sstr); assert(dstr); assert(param)
d5352 6
a5357 4
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO *const fp, const char type, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_FP_DUP	\
	assert(param)
d5359 6
a5364 2
PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR *const dp)
			__attribute__warn_unused_result__;
d5366 6
a5371 5
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP *const gp, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GP_DUP	\
	assert(param)
d5373 5
a5377 5
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC *mg, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MG_DUP	\
	assert(param)
d5379 5
a5383 7
#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC SV **	S_sv_dup_inc_multiple(pTHX_ SV *const *source, SV **dest, SSize_t items, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_DUP_INC_MULTIPLE	\
	assert(source); assert(dest); assert(param)
d5386 13
a5398 5
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_DUP	\
	assert(param)
d5400 14
a5413 11
PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV *const dstr, const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_RVPV_DUP	\
	assert(dstr); assert(sstr); assert(param)

PERL_CALLCONV yy_parser*	Perl_parser_dup(pTHX_ const yy_parser *const proto, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PARSER_DUP	\
	assert(param)
d5415 1
d5417 2
a5418 6
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *const tbl, const void *const sv)
			__attribute__warn_unused_result__
d5420 2
a5421 2
#define PERL_ARGS_ASSERT_PTR_TABLE_FETCH	\
	assert(tbl)
a5422 22
PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *const tbl, const void *const oldsv, void *const newsv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_PTR_TABLE_STORE	\
	assert(tbl); assert(newsv)

PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *const tbl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PTR_TABLE_SPLIT	\
	assert(tbl)

PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *const tbl);
PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *const tbl);
#if defined(USE_ITHREADS)
#  if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SYS_INTERN_DUP	\
	assert(src); assert(dst)

#  endif
d5424 2
a5425 7
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_clear(pTHX);
PERL_CALLCONV void	Perl_sys_intern_init(pTHX);
#endif

PERL_CALLCONV const char *	Perl_custom_op_name(pTHX_ const OP *o)
			__attribute__warn_unused_result__
d5427 2
a5428 2
#define PERL_ARGS_ASSERT_CUSTOM_OP_NAME	\
	assert(o)
d5430 3
a5432 2
PERL_CALLCONV const char *	Perl_custom_op_desc(pTHX_ const OP *o)
			__attribute__warn_unused_result__
d5434 2
a5435 2
#define PERL_ARGS_ASSERT_CUSTOM_OP_DESC	\
	assert(o)
d5437 2
a5439 7
PERL_CALLCONV void	Perl_sv_nosharing(pTHX_ SV *sv);
/* PERL_CALLCONV void	Perl_sv_nolocking(pTHX_ SV *sv); */
PERL_CALLCONV bool	Perl_sv_destroyable(pTHX_ SV *sv);
#ifdef NO_MATHOMS
/* PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv); */
#else
PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv);
d5441 6
a5446 1
PERL_CALLCONV int	Perl_nothreadhook(pTHX);
d5448 1
a5448 4
END_EXTERN_C

#if defined(PERL_IN_DOOP_C) || defined(PERL_DECL_PROT)
STATIC I32	S_do_trans_simple(pTHX_ SV * const sv)
d5451 1
a5451 1
#define PERL_ARGS_ASSERT_DO_TRANS_SIMPLE	\
d5460 7
a5466 1
STATIC I32	S_do_trans_complex(pTHX_ SV * const sv)
d5469 1
a5469 1
#define PERL_ARGS_ASSERT_DO_TRANS_COMPLEX	\
d5478 6
a5483 1
STATIC I32	S_do_trans_count_utf8(pTHX_ SV * const sv)
d5485 6
a5490 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_TRANS_COUNT_UTF8	\
	assert(sv)
d5492 1
a5492 1
STATIC I32	S_do_trans_complex_utf8(pTHX_ SV * const sv)
d5494 1
d5496 2
a5497 2
#define PERL_ARGS_ASSERT_DO_TRANS_COMPLEX_UTF8	\
	assert(sv)
d5500 20
d5521 4
a5524 2
#if defined(PERL_IN_GV_C) || defined(PERL_DECL_PROT)
STATIC void	S_gv_init_sv(pTHX_ GV *gv, const svtype sv_type)
d5526 2
a5527 2
#define PERL_ARGS_ASSERT_GV_INIT_SV	\
	assert(gv)
d5529 3
a5531 1
STATIC HV*	S_gv_get_super_pkg(pTHX_ const char* name, I32 namelen)
d5536 15
d5560 6
d5567 3
a5569 7
PERL_CALLCONV void*	Perl_get_arena(pTHX_ const size_t arenasize, const svtype bodytype)
			__attribute__malloc__
			__attribute__warn_unused_result__;


#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC void	S_hsplit(pTHX_ HV *hv)
d5571 1
a5571 1
#define PERL_ARGS_ASSERT_HSPLIT	\
d5579 4
a5582 4
STATIC I32	S_anonymise_cv(pTHX_ HEK *stash, SV *val)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_ANONYMISE_CV	\
	assert(val)
d5584 4
a5587 3
STATIC HE*	S_new_he(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d5589 5
a5593 6
STATIC HEK*	S_save_hek_flags(const char *str, I32 len, U32 hash, int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_SAVE_HEK_FLAGS	\
	assert(str)
a5601 7
STATIC void	S_unshare_hek_or_pvn(pTHX_ const HEK* hek, const char* str, I32 len, U32 hash);
STATIC HEK*	S_share_hek_flags(pTHX_ const char *str, I32 len, U32 hash, int flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SHARE_HEK_FLAGS	\
	assert(str)

d5609 3
a5611 149
STATIC struct xpvhv_aux*	S_hv_auxinit(HV *hv)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_HV_AUXINIT	\
	assert(hv)

STATIC SV*	S_hv_delete_common(pTHX_ HV *hv, SV *keysv, const char *key, STRLEN klen, int k_flags, I32 d_flags, U32 hash);
STATIC void	S_clear_placeholders(pTHX_ HV *hv, U32 items)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CLEAR_PLACEHOLDERS	\
	assert(hv)

STATIC SV *	S_refcounted_he_value(pTHX_ const struct refcounted_he *he)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_VALUE	\
	assert(he)

#endif

#if defined(PERL_IN_MG_C) || defined(PERL_DECL_PROT)
STATIC void	S_save_magic(pTHX_ I32 mgs_ix, SV *sv)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAVE_MAGIC	\
	assert(sv)

STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, const char *meth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MAGIC_METHPACK	\
	assert(sv); assert(mg); assert(meth)

STATIC int	S_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, const char *meth, I32 f, int n, SV *val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MAGIC_METHCALL	\
	assert(sv); assert(mg); assert(meth)

STATIC void	S_restore_magic(pTHX_ const void *p);
STATIC void	S_unwind_handler_stack(pTHX_ const void *p)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UNWIND_HANDLER_STACK	\
	assert(p)


#endif

#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV OP*	Perl_ck_anoncode(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_ANONCODE	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_bitop(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_BITOP	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_concat(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_CONCAT	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_defined(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_DEFINED	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_delete(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_DELETE	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_die(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_DIE	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_eof(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EOF	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_eval(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EVAL	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_exec(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EXEC	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_exists(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EXISTS	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_exit(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EXIT	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_ftst(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_FTST	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_fun(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_FUN	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_glob(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_GLOB	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_grep(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_GREP	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_index(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_INDEX	\
	assert(o)

PERL_CALLCONV OP*	Perl_ck_join(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_JOIN	\
	assert(o)
d5613 1
a5613 2
PERL_CALLCONV OP*	Perl_ck_lfun(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5615 2
a5616 2
#define PERL_ARGS_ASSERT_CK_LFUN	\
	assert(o)
d5618 2
a5619 1
PERL_CALLCONV OP*	Perl_ck_listiob(pTHX_ OP *o)
d5621 3
a5623 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_LISTIOB	\
	assert(o)
d5625 1
a5625 1
PERL_CALLCONV OP*	Perl_ck_match(pTHX_ OP *o)
d5628 2
a5629 2
#define PERL_ARGS_ASSERT_CK_MATCH	\
	assert(o)
d5631 4
a5634 2
PERL_CALLCONV OP*	Perl_ck_method(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5636 2
a5637 2
#define PERL_ARGS_ASSERT_CK_METHOD	\
	assert(o)
d5639 7
a5645 5
PERL_CALLCONV OP*	Perl_ck_null(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_NULL	\
	assert(o)
d5647 4
a5650 2
PERL_CALLCONV OP*	Perl_ck_open(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5652 2
a5653 2
#define PERL_ARGS_ASSERT_CK_OPEN	\
	assert(o)
d5655 9
a5663 5
PERL_CALLCONV OP*	Perl_ck_readline(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_READLINE	\
	assert(o)
d5665 6
a5670 5
PERL_CALLCONV OP*	Perl_ck_repeat(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_REPEAT	\
	assert(o)
d5672 5
a5676 5
PERL_CALLCONV OP*	Perl_ck_require(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_REQUIRE	\
	assert(o)
d5678 8
a5685 5
PERL_CALLCONV OP*	Perl_ck_return(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_RETURN	\
	assert(o)
d5687 7
a5693 5
PERL_CALLCONV OP*	Perl_ck_rfun(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_RFUN	\
	assert(o)
d5695 6
a5700 5
PERL_CALLCONV OP*	Perl_ck_rvconst(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_RVCONST	\
	assert(o)
d5702 1
a5702 2
PERL_CALLCONV OP*	Perl_ck_sassign(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5704 2
a5705 2
#define PERL_ARGS_ASSERT_CK_SASSIGN	\
	assert(o)
d5707 11
a5717 5
PERL_CALLCONV OP*	Perl_ck_select(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SELECT	\
	assert(o)
d5719 6
a5724 5
PERL_CALLCONV OP*	Perl_ck_shift(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SHIFT	\
	assert(o)
d5726 6
a5731 5
PERL_CALLCONV OP*	Perl_ck_sort(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SORT	\
	assert(o)
d5733 6
a5738 5
PERL_CALLCONV OP*	Perl_ck_spair(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SPAIR	\
	assert(o)
d5740 1
a5740 2
PERL_CALLCONV OP*	Perl_ck_split(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5742 2
a5743 2
#define PERL_ARGS_ASSERT_CK_SPLIT	\
	assert(o)
d5745 1
a5745 2
PERL_CALLCONV OP*	Perl_ck_subr(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5747 1
a5747 1
#define PERL_ARGS_ASSERT_CK_SUBR	\
d5750 1
a5750 2
PERL_CALLCONV OP*	Perl_ck_substr(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5752 1
a5752 1
#define PERL_ARGS_ASSERT_CK_SUBSTR	\
d5755 1
a5755 2
PERL_CALLCONV OP*	Perl_ck_svconst(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5757 1
a5757 1
#define PERL_ARGS_ASSERT_CK_SVCONST	\
d5760 1
a5760 2
PERL_CALLCONV OP*	Perl_ck_trunc(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5762 1
a5762 1
#define PERL_ARGS_ASSERT_CK_TRUNC	\
d5765 3
a5767 2
PERL_CALLCONV OP*	Perl_ck_unpack(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5769 2
a5770 2
#define PERL_ARGS_ASSERT_CK_UNPACK	\
	assert(o)
d5772 1
a5772 2
PERL_CALLCONV OP*	Perl_ck_each(pTHX_ OP *o)
			__attribute__warn_unused_result__
d5774 1
a5774 1
#define PERL_ARGS_ASSERT_CK_EACH	\
d5786 2
a5787 2
#  ifdef USE_ITHREADS
STATIC void	S_forget_pmop(pTHX_ PMOP *const o, U32 flags)
d5789 1
a5789 1
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
a5791 17
#  else
STATIC void	S_forget_pmop(pTHX_ PMOP *const o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
	assert(o)

#  endif
STATIC void	S_find_and_forget_pmops(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FIND_AND_FORGET_PMOPS	\
	assert(o)

STATIC void	S_cop_free(pTHX_ COP *cop)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_COP_FREE	\
	assert(cop)

d5793 4
a5796 4
STATIC OP*	S_scalarboolean(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCALARBOOLEAN	\
	assert(o)
d5801 4
a5804 5
STATIC OP*	S_search_const(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SEARCH_CONST	\
	assert(o)
d5813 1
a5813 1
STATIC void	S_simplify_sort(pTHX_ OP *o)
d5815 1
a5815 1
#define PERL_ARGS_ASSERT_SIMPLIFY_SORT	\
d5818 2
a5819 1
STATIC const char*	S_gv_ename(pTHX_ GV *gv)
d5821 2
a5822 2
#define PERL_ARGS_ASSERT_GV_ENAME	\
	assert(gv)
d5824 3
a5826 4
STATIC bool	S_scalar_mod_type(const OP *o, I32 type)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_SCALAR_MOD_TYPE	\
d5829 4
a5832 4
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MY_KID	\
	assert(imopsp)
d5834 1
a5834 1
STATIC OP *	S_dup_attrlist(pTHX_ OP *o)
d5836 2
a5837 2
#define PERL_ARGS_ASSERT_DUP_ATTRLIST	\
	assert(o)
d5839 1
a5839 1
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs, bool for_my)
d5841 4
a5844 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_APPLY_ATTRS	\
	assert(stash); assert(target)
d5846 1
a5846 1
STATIC void	S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp)
d5849 3
a5851 3
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_APPLY_ATTRS_MY	\
	assert(stash); assert(target); assert(imopsp)
d5853 4
a5856 6
STATIC void	S_bad_type(pTHX_ I32 n, const char *t, const char *name, const OP *kid)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_BAD_TYPE	\
	assert(t); assert(name); assert(kid)
d5858 1
a5858 1
STATIC void	S_no_bareword_allowed(pTHX_ const OP *o)
d5860 1
a5860 1
#define PERL_ARGS_ASSERT_NO_BAREWORD_ALLOWED	\
d5863 3
a5865 1
STATIC OP*	S_no_fh_allowed(pTHX_ OP *o)
d5868 6
a5873 1
#define PERL_ARGS_ASSERT_NO_FH_ALLOWED	\
d5876 1
a5876 1
STATIC OP*	S_too_few_arguments(pTHX_ OP *o, const char* name)
d5880 1
a5880 1
#define PERL_ARGS_ASSERT_TOO_FEW_ARGUMENTS	\
d5883 1
a5883 1
STATIC OP*	S_too_many_arguments(pTHX_ OP *o, const char* name)
d5887 7
a5893 1
#define PERL_ARGS_ASSERT_TOO_MANY_ARGUMENTS	\
d5896 9
a5904 1
STATIC bool	S_looks_like_bool(pTHX_ const OP* o)
d5906 1
a5906 1
#define PERL_ARGS_ASSERT_LOOKS_LIKE_BOOL	\
d5909 5
a5913 1
STATIC OP*	S_newGIVWHENOP(pTHX_ OP* cond, OP *block, I32 enter_opcode, I32 leave_opcode, PADOFFSET entertarg)
d5915 2
a5916 10
#define PERL_ARGS_ASSERT_NEWGIVWHENOP	\
	assert(block)

STATIC OP*	S_ref_array_or_hash(pTHX_ OP* cond);
STATIC void	S_process_special_blocks(pTHX_ const char *const fullname, GV *const gv, CV *const cv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_PROCESS_SPECIAL_BLOCKS	\
	assert(fullname); assert(gv); assert(cv)
d5919 2
a5920 6
#if defined(PL_OP_SLAB_ALLOC)
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ size_t sz)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op)
d5922 2
a5923 2
#define PERL_ARGS_ASSERT_SLAB_FREE	\
	assert(op)
d5925 1
a5925 4
#  if defined(PERL_DEBUG_READONLY_OPS)
PERL_CALLCONV void	Perl_pending_Slabs_to_ro(pTHX);
PERL_CALLCONV OP *	Perl_op_refcnt_inc(pTHX_ OP *o);
PERL_CALLCONV PADOFFSET	Perl_op_refcnt_dec(pTHX_ OP *o)
d5927 2
a5928 2
#define PERL_ARGS_ASSERT_OP_REFCNT_DEC	\
	assert(o)
d5930 7
a5936 5
#    if defined(PERL_IN_OP_C)
STATIC void	S_Slab_to_rw(pTHX_ void *op)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SLAB_TO_RW	\
	assert(op)
d5938 1
a5938 2
#    endif
#  endif
d5940 1
a5940 2

#if defined(PERL_IN_PERL_C) || defined(PERL_DECL_PROT)
d5958 1
a5959 1
STATIC void	S_init_ids(pTHX);
d5968 8
d5980 199
a6178 6
STATIC int	S_open_script(pTHX_ const char *scriptname, bool dosearch, bool *suidscript, PerlIO **rsfpp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_OPEN_SCRIPT	\
	assert(scriptname); assert(suidscript); assert(rsfpp)
d6180 1
a6180 1
STATIC void	S_usage(pTHX_ const char *name)
d6182 2
a6183 2
#define PERL_ARGS_ASSERT_USAGE	\
	assert(name)
d6185 1
a6185 2
#ifndef SETUID_SCRIPTS_ARE_SECURE_NOW
STATIC void	S_validate_suid(pTHX_ PerlIO *rsfp)
d6187 2
a6188 2
#define PERL_ARGS_ASSERT_VALIDATE_SUID	\
	assert(rsfp)
d6190 5
a6194 1
#endif
d6196 4
a6199 3
STATIC void*	S_parse_body(pTHX_ char **env, XSINIT_t xsinit);
STATIC void	S_run_body(pTHX_ I32 oldscope)
			__attribute__noreturn__;
d6201 1
a6201 1
STATIC SV *	S_incpush_if_exists(pTHX_ AV *const av, SV *dir, SV *const stem)
d6204 4
a6207 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_INCPUSH_IF_EXISTS	\
	assert(av); assert(dir); assert(stem)
d6209 1
a6209 5
#endif

#if defined(PERL_IN_PP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_do_delete_local(pTHX);
STATIC SV*	S_refto(pTHX_ SV* sv)
d6212 1
a6212 1
#define PERL_ARGS_ASSERT_REFTO	\
d6215 1
a6215 4
#endif
#if defined(PERL_IN_PP_C) || defined(PERL_IN_PP_HOT_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV GV*	Perl_softref2xv(pTHX_ SV *const sv, const char *const what, const svtype type, SV ***spp)
			__attribute__warn_unused_result__
d6218 1
d6220 2
a6221 2
#define PERL_ARGS_ASSERT_SOFTREF2XV	\
	assert(sv); assert(what); assert(spp)
d6224 6
d6231 1
a6231 2
#if defined(PERL_IN_PP_PACK_C) || defined(PERL_DECL_PROT)
STATIC I32	S_unpack_rec(pTHX_ struct tempsym* symptr, const char *s, const char *strbeg, const char *strend, const char **new_s)
d6233 3
a6235 5
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UNPACK_REC	\
	assert(symptr); assert(s); assert(strbeg); assert(strend)
d6237 1
a6237 1
STATIC SV **	S_pack_rec(pTHX_ SV *cat, struct tempsym* symptr, SV **beglist, SV **endlist)
d6239 3
a6241 5
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_PACK_REC	\
	assert(cat); assert(symptr); assert(beglist); assert(endlist)
d6243 5
a6247 4
STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MUL128	\
	assert(sv)
d6249 4
a6252 4
STATIC I32	S_measure_struct(pTHX_ struct tempsym* symptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MEASURE_STRUCT	\
	assert(symptr)
d6254 5
a6258 4
STATIC bool	S_next_symbol(pTHX_ struct tempsym* symptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEXT_SYMBOL	\
	assert(symptr)
d6260 5
a6264 5
STATIC SV*	S_is_an_int(pTHX_ const char *s, STRLEN l)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_AN_INT	\
	assert(s)
d6266 1
a6266 1
STATIC int	S_div128(pTHX_ SV *pnum, bool *done)
d6269 2
a6270 2
#define PERL_ARGS_ASSERT_DIV128	\
	assert(pnum); assert(done)
d6272 1
a6272 1
STATIC const char *	S_group_end(pTHX_ const char *patptr, const char *patend, char ender)
d6275 2
a6276 2
#define PERL_ARGS_ASSERT_GROUP_END	\
	assert(patptr); assert(patend)
d6278 1
a6278 2
STATIC const char *	S_get_num(pTHX_ const char *patptr, I32 *lenptr)
			__attribute__warn_unused_result__
d6281 11
a6291 2
#define PERL_ARGS_ASSERT_GET_NUM	\
	assert(patptr); assert(lenptr)
d6293 4
a6296 5
STATIC bool	S_need_utf8(const char *pat, const char *patend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_NEED_UTF8	\
	assert(pat); assert(patend)
d6298 6
a6303 5
STATIC char	S_first_symbol(const char *pat, const char *patend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_FIRST_SYMBOL	\
	assert(pat); assert(patend)
d6305 1
a6305 1
STATIC char *	S_sv_exp_grow(pTHX_ SV *sv, STRLEN needed)
d6308 2
a6309 2
#define PERL_ARGS_ASSERT_SV_EXP_GROW	\
	assert(sv)
d6311 1
a6311 1
STATIC char *	S_bytes_to_uni(const U8 *start, STRLEN len, char *dest)
d6313 3
a6315 4
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_BYTES_TO_UNI	\
	assert(start); assert(dest)
d6317 5
a6321 1
#endif
d6323 1
a6323 2
#if defined(PERL_IN_PP_CTL_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_docatch(pTHX_ OP *o)
d6326 1
a6326 1
STATIC OP*	S_dofindlabel(pTHX_ OP *o, const char *label, OP **opstack, OP **oplimit)
d6328 4
a6331 6
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_DOFINDLABEL	\
	assert(o); assert(label); assert(opstack); assert(oplimit)
d6333 1
a6333 2
STATIC OP*	S_doparseform(pTHX_ SV *sv)
			__attribute__warn_unused_result__
d6335 2
a6336 2
#define PERL_ARGS_ASSERT_DOPARSEFORM	\
	assert(sv)
d6338 5
a6342 2
STATIC bool	S_num_overflow(NV value, I32 fldsize, I32 frcsize)
			__attribute__warn_unused_result__;
d6344 5
a6348 2
STATIC I32	S_dopoptoeval(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;
d6350 5
a6354 2
STATIC I32	S_dopoptogiven(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;
d6356 1
a6356 1
STATIC I32	S_dopoptolabel(pTHX_ const char *label)
d6358 3
a6360 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DOPOPTOLABEL	\
	assert(label)
d6362 6
a6367 2
STATIC I32	S_dopoptoloop(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;
d6369 1
a6369 1
STATIC I32	S_dopoptosub_at(pTHX_ const PERL_CONTEXT* cxstk, I32 startingblock)
d6372 2
a6373 10
#define PERL_ARGS_ASSERT_DOPOPTOSUB_AT	\
	assert(cxstk)

STATIC I32	S_dopoptowhen(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC void	S_save_lines(pTHX_ AV *array, SV *sv)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAVE_LINES	\
	assert(sv)
d6375 1
a6375 2
STATIC bool	S_doeval(pTHX_ int gimme, OP** startop, CV* outside, U32 seq);
STATIC PerlIO *	S_check_type_and_open(pTHX_ const char *name)
d6378 2
a6379 2
#define PERL_ARGS_ASSERT_CHECK_TYPE_AND_OPEN	\
	assert(name)
d6381 1
a6381 2
#ifndef PERL_DISABLE_PMC
STATIC PerlIO *	S_doopen_pm(pTHX_ const char *name, const STRLEN namelen)
d6384 2
a6385 2
#define PERL_ARGS_ASSERT_DOOPEN_PM	\
	assert(name)
d6387 1
a6387 2
#endif
STATIC bool	S_path_is_absolute(const char *name)
d6389 3
a6391 3
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PATH_IS_ABSOLUTE	\
	assert(name)
d6393 1
a6393 1
STATIC I32	S_run_user_filter(pTHX_ int idx, SV *buf_sv, int maxlen)
d6395 3
a6397 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_RUN_USER_FILTER	\
	assert(buf_sv)
d6399 1
a6399 1
STATIC PMOP*	S_make_matcher(pTHX_ REGEXP* re)
d6402 2
a6403 9
#define PERL_ARGS_ASSERT_MAKE_MATCHER	\
	assert(re)

STATIC bool	S_matcher_matches_sv(pTHX_ PMOP* matcher, SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MATCHER_MATCHES_SV	\
	assert(matcher); assert(sv)
d6405 1
a6405 1
STATIC void	S_destroy_matcher(pTHX_ PMOP* matcher)
d6407 2
a6408 2
#define PERL_ARGS_ASSERT_DESTROY_MATCHER	\
	assert(matcher)
d6410 4
a6413 2
STATIC OP*	S_do_smartmatch(pTHX_ HV* seen_this, HV* seen_other);
#endif
d6415 2
a6416 2
#if defined(PERL_IN_PP_HOT_C) || defined(PERL_DECL_PROT)
STATIC void	S_do_oddball(pTHX_ HV *hash, SV **relem, SV **firstrelem)
d6420 2
a6421 2
#define PERL_ARGS_ASSERT_DO_ODDBALL	\
	assert(hash); assert(relem); assert(firstrelem)
d6423 1
a6423 1
STATIC SV*	S_method_common(pTHX_ SV* meth, U32* hashp)
d6426 2
a6427 2
#define PERL_ARGS_ASSERT_METHOD_COMMON	\
	assert(meth)
d6429 5
a6433 1
#endif
d6435 5
a6439 6
#if defined(PERL_IN_PP_SORT_C) || defined(PERL_DECL_PROT)
STATIC I32	S_sv_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_NCMP	\
	assert(a); assert(b)
d6441 4
a6444 5
STATIC I32	S_sv_i_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_I_NCMP	\
	assert(a); assert(b)
d6446 4
a6449 5
STATIC I32	S_amagic_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_NCMP	\
	assert(a); assert(b)
d6451 1
a6451 1
STATIC I32	S_amagic_i_ncmp(pTHX_ SV *const a, SV *const b)
d6453 5
a6457 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_I_NCMP	\
	assert(a); assert(b)
d6459 1
a6459 1
STATIC I32	S_amagic_cmp(pTHX_ SV *const str1, SV *const str2)
d6461 6
a6466 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_CMP	\
	assert(str1); assert(str2)
d6468 1
a6468 1
STATIC I32	S_amagic_cmp_locale(pTHX_ SV *const str1, SV *const str2)
d6470 4
a6473 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_CMP_LOCALE	\
	assert(str1); assert(str2)
d6475 4
a6478 5
STATIC I32	S_sortcv(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SORTCV	\
	assert(a); assert(b)
d6480 2
a6481 1
STATIC I32	S_sortcv_xsub(pTHX_ SV *const a, SV *const b)
d6484 2
a6485 2
#define PERL_ARGS_ASSERT_SORTCV_XSUB	\
	assert(a); assert(b)
d6487 1
a6487 1
STATIC I32	S_sortcv_stacked(pTHX_ SV *const a, SV *const b)
a6488 5
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SORTCV_STACKED	\
	assert(a); assert(b)

STATIC void	S_qsortsvu(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t compare)
d6490 2
a6491 2
#define PERL_ARGS_ASSERT_QSORTSVU	\
	assert(compare)
d6493 4
a6496 1
#endif
d6498 4
a6501 7
#if defined(PERL_IN_PP_SYS_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DOFORM	\
	assert(cv); assert(gv); assert(retop)
d6503 1
a6503 4
#  if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
STATIC int	S_dooneliner(pTHX_ const char *cmd, const char *filename)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
d6505 2
a6506 2
#define PERL_ARGS_ASSERT_DOONELINER	\
	assert(cmd); assert(filename)
d6508 1
a6508 2
#  endif
STATIC SV *	S_space_join_names_mortal(pTHX_ char *const *array)
d6510 2
a6511 2
#define PERL_ARGS_ASSERT_SPACE_JOIN_NAMES_MORTAL	\
	assert(array)
d6513 4
a6516 8
#endif

#if defined(PERL_IN_REGCOMP_C) || defined(PERL_DECL_PROT)
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REG	\
	assert(pRExC_state); assert(flagp)
a6534 6
STATIC STRLEN	S_reguni(pTHX_ const struct RExC_state_t *pRExC_state, UV uv, char *s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGUNI	\
	assert(pRExC_state); assert(s)

d6540 5
a6544 9
STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t *pRExC_state, U8 op)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_NODE	\
	assert(pRExC_state)

STATIC UV	S_reg_recode(pTHX_ const char value, SV **encp)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REG_RECODE	\
	assert(encp)
d6552 1
a6552 1
STATIC regnode*	S_reg_namedseq(pTHX_ struct RExC_state_t *pRExC_state, UV *valuep, I32 *flagp)
d6554 1
a6554 1
#define PERL_ARGS_ASSERT_REG_NAMEDSEQ	\
a6556 6
STATIC void	S_reginsert(pTHX_ struct RExC_state_t *pRExC_state, U8 op, regnode *opnd, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGINSERT	\
	assert(pRExC_state); assert(opnd)

d6564 1
a6564 6
STATIC SV *	S_reg_scan_name(pTHX_ struct RExC_state_t *pRExC_state, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_SCAN_NAME	\
	assert(pRExC_state)

STATIC U32	S_join_exact(pTHX_ struct RExC_state_t *pRExC_state, regnode *scan, I32 *min, U32 flags, regnode *val, U32 depth)
a6565 1
			__attribute__nonnull__(pTHX_2)
d6567 2
a6568 2
#define PERL_ARGS_ASSERT_JOIN_EXACT	\
	assert(pRExC_state); assert(scan); assert(min)
a6576 10
STATIC char *	S_nextchar(pTHX_ struct RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEXTCHAR	\
	assert(pRExC_state)

STATIC bool	S_reg_skipcomment(pTHX_ struct RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_SKIPCOMMENT	\
	assert(pRExC_state)

d6584 7
a6590 5
STATIC void	S_cl_anything(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_ANYTHING	\
	assert(pRExC_state); assert(cl)
d6592 7
a6598 30
STATIC int	S_cl_is_anything(const struct regnode_charclass_class *cl)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_CL_IS_ANYTHING	\
	assert(cl)

STATIC void	S_cl_init(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_INIT	\
	assert(pRExC_state); assert(cl)

STATIC void	S_cl_init_zero(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_INIT_ZERO	\
	assert(pRExC_state); assert(cl)

STATIC void	S_cl_and(struct regnode_charclass_class *cl, const struct regnode_charclass_class *and_with)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_AND	\
	assert(cl); assert(and_with)

STATIC void	S_cl_or(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl, const struct regnode_charclass_class *or_with)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_CL_OR	\
	assert(pRExC_state); assert(cl); assert(or_with)
d6609 3
a6611 9
STATIC U32	S_add_data(struct RExC_state_t *pRExC_state, U32 n, const char *s)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_ADD_DATA	\
	assert(pRExC_state); assert(s)

STATIC void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...)
			__attribute__noreturn__
d6613 4
a6616 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_RE_CROAK2	\
	assert(pat1); assert(pat2)
d6618 2
a6619 6
STATIC I32	S_regpposixcc(pTHX_ struct RExC_state_t *pRExC_state, I32 value)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REGPPOSIXCC	\
	assert(pRExC_state)

STATIC void	S_checkposixcc(pTHX_ struct RExC_state_t *pRExC_state)
d6621 2
a6622 2
#define PERL_ARGS_ASSERT_CHECKPOSIXCC	\
	assert(pRExC_state)
d6624 4
a6627 8
STATIC I32	S_make_trie(pTHX_ struct RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_MAKE_TRIE	\
	assert(pRExC_state); assert(startbranch); assert(first); assert(last); assert(tail)
d6629 1
a6629 1
STATIC void	S_make_trie_failtable(pTHX_ struct RExC_state_t *pRExC_state, regnode *source, regnode *stclass, U32 depth)
d6632 1
a6632 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MAKE_TRIE_FAILTABLE	\
	assert(pRExC_state); assert(source); assert(stclass)
d6634 1
a6634 4
#  ifdef DEBUGGING
STATIC void	S_regdump_extflags(pTHX_ const char *lead, const U32 flags);
STATIC const regnode*	S_dumpuntil(pTHX_ const regexp *r, const regnode *start, const regnode *node, const regnode *last, const regnode *plast, SV* sv, I32 indent, U32 depth)
			__attribute__nonnull__(pTHX_1)
d6636 8
a6643 4
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_DUMPUNTIL	\
	assert(r); assert(start); assert(node); assert(sv)
d6645 1
a6645 1
STATIC void	S_put_byte(pTHX_ SV* sv, int c)
d6647 2
a6648 2
#define PERL_ARGS_ASSERT_PUT_BYTE	\
	assert(sv)
d6650 1
a6650 1
STATIC void	S_dump_trie(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 depth)
d6652 3
a6654 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DUMP_TRIE	\
	assert(trie); assert(revcharmap)
d6656 1
a6656 1
STATIC void	S_dump_trie_interim_list(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth)
d6658 2
a6659 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_LIST	\
	assert(trie); assert(revcharmap)
d6661 3
a6663 5
STATIC void	S_dump_trie_interim_table(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_TABLE	\
	assert(trie); assert(revcharmap)
d6665 1
a6665 2
STATIC U8	S_regtail_study(pTHX_ struct RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
d6667 18
a6684 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGTAIL_STUDY	\
	assert(pRExC_state); assert(p); assert(val)
a6685 1
#  endif
d6687 2
a6688 3

#if defined(PERL_IN_REGEXEC_C) || defined(PERL_DECL_PROT)
STATIC I32	S_regmatch(pTHX_ regmatch_info *reginfo, regnode *prog)
a6689 1
			__attribute__nonnull__(pTHX_1)
d6691 2
a6692 2
#define PERL_ARGS_ASSERT_REGMATCH	\
	assert(reginfo); assert(prog)
d6694 1
a6694 1
STATIC I32	S_regrepeat(pTHX_ const regexp *prog, const regnode *p, I32 max, int depth)
d6697 5
a6701 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGREPEAT	\
	assert(prog); assert(p)
d6703 1
a6703 1
STATIC I32	S_regtry(pTHX_ regmatch_info *reginfo, char **startpos)
d6707 2
a6708 9
#define PERL_ARGS_ASSERT_REGTRY	\
	assert(reginfo); assert(startpos)

STATIC bool	S_reginclass(pTHX_ const regexp *prog, const regnode *n, const U8 *p, STRLEN *lenp, bool do_utf8sv_is_utf8)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGINCLASS	\
	assert(n); assert(p)
a6709 1
STATIC CHECKPOINT	S_regcppush(pTHX_ I32 parenfloor);
d6715 1
a6722 10
#ifdef XXX_dmq
STATIC U8*	S_reghop4(U8 *s, I32 off, const U8 *llim, const U8 *rlim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
#define PERL_ARGS_ASSERT_REGHOP4	\
	assert(s); assert(llim); assert(rlim)

#endif
d6730 1
a6730 1
STATIC char*	S_find_byclass(pTHX_ regexp * prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo)
a6731 1
			__attribute__nonnull__(pTHX_1)
d6733 3
a6735 4
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_FIND_BYCLASS	\
	assert(prog); assert(c); assert(s); assert(strend)
d6737 1
a6737 11
STATIC void	S_to_utf8_substr(pTHX_ regexp * prog)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_TO_UTF8_SUBSTR	\
	assert(prog)

STATIC void	S_to_byte_substr(pTHX_ regexp * prog)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_TO_BYTE_SUBSTR	\
	assert(prog)

STATIC I32	S_reg_check_named_buff_matched(pTHX_ const regexp *rex, const regnode *scan)
d6741 2
a6742 2
#define PERL_ARGS_ASSERT_REG_CHECK_NAMED_BUFF_MATCHED	\
	assert(rex); assert(scan)
d6744 2
a6745 2
#  ifdef DEBUGGING
STATIC void	S_dump_exec_pos(pTHX_ const char *locinput, const regnode *scan, const char *loc_regeol, const char *loc_bostr, const char *loc_reg_starttry, const bool do_utf8)
d6747 3
a6749 6
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_DUMP_EXEC_POS	\
	assert(locinput); assert(scan); assert(loc_regeol); assert(loc_bostr); assert(loc_reg_starttry)
d6751 2
a6752 1
STATIC void	S_debug_start_match(pTHX_ const REGEXP *prog, const bool do_utf8, const char *start, const char *end, const char *blurb)
d6754 3
a6756 5
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_DEBUG_START_MATCH	\
	assert(prog); assert(start); assert(end); assert(blurb)
d6758 4
a6761 2
#  endif
#endif
d6763 1
a6763 3
#if defined(PERL_IN_DUMP_C) || defined(PERL_DECL_PROT)
STATIC CV*	S_deb_curcv(pTHX_ const I32 ix);
STATIC void	S_debprof(pTHX_ const OP *o)
d6765 2
a6766 2
#define PERL_ARGS_ASSERT_DEBPROF	\
	assert(o)
d6768 8
a6775 7
STATIC void	S_sequence(pTHX_ const OP *o);
STATIC void	S_sequence_tail(pTHX_ const OP *o);
STATIC UV	S_sequence_num(pTHX_ const OP *o);
STATIC SV*	S_pm_description(pTHX_ const PMOP *pm)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PM_DESCRIPTION	\
	assert(pm)
d6777 1
d6779 2
a6780 2

#if defined(PERL_IN_SCOPE_C) || defined(PERL_DECL_PROT)
d6787 6
d6794 1
a6794 2
#if defined(PERL_IN_GV_C) || defined(PERL_IN_SV_C) || defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *const tsv, SV *const sv)
d6797 2
a6798 2
#define PERL_ARGS_ASSERT_SV_ADD_BACKREF	\
	assert(tsv); assert(sv)
d6800 1
a6800 4
#endif

#if defined(PERL_IN_HV_C) || defined(PERL_IN_MG_C) || defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV int	Perl_sv_kill_backrefs(pTHX_ SV *const sv, AV *const av)
d6802 3
a6804 43
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_KILL_BACKREFS	\
	assert(sv); assert(av)

#endif

#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC char *	S_uiv_2buf(char *const buf, const IV iv, UV uv, const int is_uv, char **const peob)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(5);
#define PERL_ARGS_ASSERT_UIV_2BUF	\
	assert(buf); assert(peob)

STATIC void	S_sv_unglob(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_UNGLOB	\
	assert(sv)

STATIC void	S_not_a_number(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NOT_A_NUMBER	\
	assert(sv)

STATIC I32	S_visit(pTHX_ SVFUNC_t f, const U32 flags, const U32 mask)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VISIT	\
	assert(f)

STATIC void	S_sv_del_backref(pTHX_ SV *const tsv, SV *const sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_DEL_BACKREF	\
	assert(tsv); assert(sv)

STATIC SV *	S_varname(pTHX_ const GV *const gv, const char gvtype, PADOFFSET targ, const SV *const keyname, I32 aindex, int subscript_type)
			__attribute__warn_unused_result__;

#  ifdef DEBUGGING
STATIC void	S_del_sv(pTHX_ SV *p)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DEL_SV	\
	assert(p)
d6806 1
a6806 10
#  endif
#  if !defined(NV_PRESERVES_UV)
#    ifdef DEBUGGING
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv, I32 numtype)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE	\
	assert(sv)

#    else
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv)
d6808 1
a6808 1
#define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE	\
a6810 2
#    endif
#  endif
d6817 1
a6817 23
#
STATIC STRLEN	S_sv_pos_u2b_forwards(const U8 *const start, const U8 *const send, STRLEN uoffset)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_POS_U2B_FORWARDS	\
	assert(start); assert(send)

STATIC STRLEN	S_sv_pos_u2b_midway(const U8 *const start, const U8 *send, const STRLEN uoffset, const STRLEN uend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_POS_U2B_MIDWAY	\
	assert(start); assert(send)

STATIC STRLEN	S_sv_pos_u2b_cached(pTHX_ SV *const sv, MAGIC **const mgp, const U8 *const start, const U8 *const send, const STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_POS_U2B_CACHED	\
	assert(sv); assert(mgp); assert(start); assert(send)

STATIC void	S_utf8_mg_pos_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN byte, const STRLEN utf8, const STRLEN blen)
			__attribute__nonnull__(pTHX_1)
d6819 2
a6820 9
#define PERL_ARGS_ASSERT_UTF8_MG_POS_CACHE_UPDATE	\
	assert(sv); assert(mgp)

STATIC STRLEN	S_sv_pos_b2u_midway(pTHX_ const U8 *const s, const U8 *const target, const U8 *end, STRLEN endu)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SV_POS_B2U_MIDWAY	\
	assert(s); assert(target); assert(end)
d6822 4
a6825 5
STATIC char *	S_F0convert(NV nv, char *const endbuf, STRLEN *const len)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_F0CONVERT	\
	assert(endbuf); assert(len)
d6827 2
a6828 12
#  if defined(PERL_OLD_COPY_ON_WRITE)
STATIC void	S_sv_release_COW(pTHX_ SV *sv, const char *pvx, SV *after)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SV_RELEASE_COW	\
	assert(sv); assert(pvx); assert(after)

#  endif
STATIC SV *	S_more_sv(pTHX);
STATIC void *	S_more_bodies(pTHX_ const svtype sv_type);
STATIC bool	S_sv_2iuv_common(pTHX_ SV *const sv)
d6830 2
a6831 2
#define PERL_ARGS_ASSERT_SV_2IUV_COMMON	\
	assert(sv)
d6845 6
d6857 4
a6860 1
#endif
d6862 1
a6862 4
#if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
STATIC void	S_check_uni(pTHX);
STATIC void	S_force_next(pTHX_ I32 type);
STATIC char*	S_force_version(pTHX_ char *s, int guessing)
d6864 17
a6880 2
#define PERL_ARGS_ASSERT_FORCE_VERSION	\
	assert(s)
d6882 7
a6888 4
STATIC char*	S_force_strict_version(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORCE_STRICT_VERSION	\
	assert(s)
d6890 5
a6894 4
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack, int allow_tick)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORCE_WORD	\
	assert(start)
d6896 1
a6896 1
STATIC SV*	S_tokeq(pTHX_ SV *sv)
d6898 1
a6898 1
#define PERL_ARGS_ASSERT_TOKEQ	\
d6901 1
a6901 2
STATIC void	S_readpipe_override(pTHX);
STATIC char*	S_scan_const(pTHX_ char *start)
d6903 10
a6912 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCAN_CONST	\
	assert(start)
d6914 5
a6918 5
STATIC char*	S_scan_formline(pTHX_ char *s)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCAN_FORMLINE	\
	assert(s)
d6920 1
a6920 2
STATIC char*	S_scan_heredoc(pTHX_ char *s)
			__attribute__warn_unused_result__
d6922 2
a6923 2
#define PERL_ARGS_ASSERT_SCAN_HEREDOC	\
	assert(s)
d6925 2
a6926 1
STATIC char*	S_scan_ident(pTHX_ char *s, const char *send, char *dest, STRLEN destlen, I32 ck_uni)
d6930 2
a6931 2
#define PERL_ARGS_ASSERT_SCAN_IDENT	\
	assert(s); assert(send); assert(dest)
d6933 3
a6935 1
STATIC char*	S_scan_inputsymbol(pTHX_ char *start)
d6937 4
a6940 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCAN_INPUTSYMBOL	\
	assert(start)
d6942 1
a6942 25
STATIC char*	S_scan_pat(pTHX_ char *start, I32 type)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCAN_PAT	\
	assert(start)

STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCAN_STR	\
	assert(start)

STATIC char*	S_scan_subst(pTHX_ char *start)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCAN_SUBST	\
	assert(start)

STATIC char*	S_scan_trans(pTHX_ char *start)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCAN_TRANS	\
	assert(start)

STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp)
d6945 3
a6947 10
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SCAN_WORD	\
	assert(s); assert(dest); assert(slp)

STATIC void	S_update_debugger_info(pTHX_ SV *orig_sv, const char *const buf, STRLEN len);
STATIC char*	S_skipspace(pTHX_ char *s)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE	\
	assert(s)
d6949 1
a6949 2
STATIC char*	S_swallow_bom(pTHX_ U8 *s)
			__attribute__warn_unused_result__
d6951 2
a6952 2
#define PERL_ARGS_ASSERT_SWALLOW_BOM	\
	assert(s)
d6954 5
a6958 10
#ifndef PERL_NO_UTF16_FILTER
STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_UTF16_TEXTFILTER	\
	assert(sv)

STATIC U8*	S_add_utf16_textfilter(pTHX_ U8 *const s, bool reversed)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_ADD_UTF16_TEXTFILTER	\
	assert(s)
d6961 3
d6971 1
a6971 47
STATIC bool	S_feature_is_enabled(pTHX_ const char *const name, STRLEN namelen)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FEATURE_IS_ENABLED	\
	assert(name)

STATIC void	S_force_ident(pTHX_ const char *s, int kind)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORCE_IDENT	\
	assert(s)

STATIC void	S_incline(pTHX_ const char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INCLINE	\
	assert(s)

STATIC int	S_intuit_method(pTHX_ char *s, GV *gv, CV *cv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INTUIT_METHOD	\
	assert(s)

STATIC int	S_intuit_more(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INTUIT_MORE	\
	assert(s)

STATIC I32	S_lop(pTHX_ I32 f, int x, char *s)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_LOP	\
	assert(s)

STATIC void	S_missingterm(pTHX_ char *s)
			__attribute__noreturn__;

STATIC void	S_no_op(pTHX_ const char *const what, char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NO_OP	\
	assert(what)

STATIC I32	S_sublex_done(pTHX)
			__attribute__warn_unused_result__;

STATIC I32	S_sublex_push(pTHX)
			__attribute__warn_unused_result__;

STATIC I32	S_sublex_start(pTHX)
			__attribute__warn_unused_result__;

d6975 1
a6975 28
#define PERL_ARGS_ASSERT_FILTER_GETS	\
	assert(sv)

STATIC HV *	S_find_in_my_stash(pTHX_ const char *pkgname, STRLEN len)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FIND_IN_MY_STASH	\
	assert(pkgname)

STATIC char *	S_tokenize_use(pTHX_ int is_use, char *s)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TOKENIZE_USE	\
	assert(s)

STATIC SV*	S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, STRLEN keylen, SV *sv, SV *pv, const char *type, STRLEN typelen)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_NEW_CONSTANT	\
	assert(key); assert(sv)

STATIC int	S_deprecate_commaless_var_list(pTHX);
STATIC int	S_ao(pTHX_ int toketype);
#  if defined(PERL_CR_FILTER)
STATIC I32	S_cr_textfilter(pTHX_ int idx, SV *sv, int maxlen);
STATIC void	S_strip_return(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_STRIP_RETURN	\
d6978 5
a6982 6
#  endif
#  if defined(DEBUGGING)
STATIC int	S_tokereport(pTHX_ I32 rv, const YYSTYPE* lvalp)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TOKEREPORT	\
	assert(lvalp)
d6984 4
a6987 5
STATIC void	S_printbuf(pTHX_ const char *const fmt, const char *const s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PRINTBUF	\
	assert(fmt); assert(s)
d6989 5
a6993 2
#  endif
#endif
d6995 4
a6998 6
#if defined(PERL_IN_UNIVERSAL_C) || defined(PERL_DECL_PROT)
STATIC bool	S_isa_lookup(pTHX_ HV *stash, const char * const name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_ISA_LOOKUP	\
	assert(stash); assert(name)
d7000 1
a7000 1
STATIC HV *	S_get_isa_hash(pTHX_ HV *const stash)
d7002 2
a7003 2
#define PERL_ARGS_ASSERT_GET_ISA_HASH	\
	assert(stash)
d7005 4
a7008 1
#endif
d7010 1
a7010 3
#if defined(PERL_IN_LOCALE_C) || defined(PERL_DECL_PROT)
#if defined(USE_LOCALE_NUMERIC) || defined(USE_LOCALE_COLLATE)
STATIC char*	S_stdize_locale(pTHX_ char* locs)
d7012 2
a7013 2
#define PERL_ARGS_ASSERT_STDIZE_LOCALE	\
	assert(locs)
d7015 4
a7018 2
#endif
#endif
d7020 4
a7023 5
#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
STATIC const COP*	S_closest_cop(pTHX_ const COP *cop, const OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CLOSEST_COP	\
	assert(cop)
d7025 1
a7025 4
STATIC SV*	S_mess_alloc(pTHX);
STATIC SV *	S_vdie_croak_common(pTHX_ const char *pat, va_list *args);
STATIC bool	S_vdie_common(pTHX_ SV *message, bool warn);
STATIC char *	S_write_no_mem(pTHX)
d7028 5
a7032 7
#if defined(PERL_MEM_LOG) && !defined(PERL_MEM_LOG_NOIMPL)
STATIC void	S_mem_log_common(enum mem_log_type mlt, const UV n, const UV typesize, const char *type_name, const SV *sv, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname)
			__attribute__nonnull__(4)
			__attribute__nonnull__(8)
			__attribute__nonnull__(10);
#define PERL_ARGS_ASSERT_MEM_LOG_COMMON	\
	assert(type_name); assert(filename); assert(funcname)
d7034 4
a7037 2
#endif
#endif
d7039 6
a7044 3
#if defined(PERL_IN_NUMERIC_C) || defined(PERL_DECL_PROT)
STATIC NV	S_mulexp10(NV value, I32 exponent);
#endif
d7046 1
a7046 2
#if defined(PERL_IN_UTF8_C) || defined(PERL_DECL_PROT)
STATIC STRLEN	S_is_utf8_char_slow(const U8 *s, const STRLEN len)
d7048 2
a7049 2
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_SLOW	\
d7052 1
a7052 1
STATIC bool	S_is_utf8_common(pTHX_ const U8 *const p, SV **swash, const char * const swashname)
d7054 5
d7062 2
a7063 2
#define PERL_ARGS_ASSERT_IS_UTF8_COMMON	\
	assert(p); assert(swash); assert(swashname)
d7065 1
a7065 1
STATIC SV*	S_swash_get(pTHX_ SV* swash, UV start, UV span)
d7068 2
a7069 2
#define PERL_ARGS_ASSERT_SWASH_GET	\
	assert(swash)
d7071 2
a7072 5
#endif

START_EXTERN_C

PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dstr, SV *sstr, const I32 flags)
d7074 2
a7075 2
#define PERL_ARGS_ASSERT_SV_SETSV_FLAGS	\
	assert(dstr)
d7077 2
a7078 7
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *const dstr, const char *sstr, const STRLEN len, const I32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATPVN_FLAGS	\
	assert(dstr); assert(sstr)

PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags)
d7080 2
a7081 2
#define PERL_ARGS_ASSERT_SV_CATSV_FLAGS	\
	assert(dsv)
d7083 2
a7084 4
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags_grow(pTHX_ SV *const sv, const I32 flags, STRLEN extra)
d7086 2
a7087 2
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS_GROW	\
	assert(sv)
d7089 2
a7090 1
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags)
d7092 2
a7093 2
#define PERL_ARGS_ASSERT_SV_PVN_FORCE_FLAGS	\
	assert(sv)
d7095 1
a7095 1
PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv)
d7097 4
a7100 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_COPYPV	\
	assert(dsv); assert(ssv)
d7102 5
a7106 5
PERL_CALLCONV char*	Perl_my_atof2(pTHX_ const char *s, NV* value)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MY_ATOF2	\
	assert(s); assert(value)
d7108 1
a7108 44
PERL_CALLCONV int	Perl_my_socketpair(int family, int type, int protocol, int fd[2]);
PERL_CALLCONV int	Perl_my_dirfd(pTHX_ DIR* dir);
#ifdef PERL_OLD_COPY_ON_WRITE
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dstr, SV* sstr)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_SETSV_COW	\
	assert(sstr)

#endif

PERL_CALLCONV const char *	Perl_PerlIO_context_layers(pTHX_ const char *mode);

#if defined(USE_PERLIO) && !defined(USE_SFIO)
PERL_CALLCONV int	Perl_PerlIO_close(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_fill(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_fileno(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_eof(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_error(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_flush(pTHX_ PerlIO *f);
PERL_CALLCONV void	Perl_PerlIO_clearerr(pTHX_ PerlIO *f);
PERL_CALLCONV void	Perl_PerlIO_set_cnt(pTHX_ PerlIO *f, int cnt);
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, int cnt);
PERL_CALLCONV void	Perl_PerlIO_setlinebuf(pTHX_ PerlIO *f);
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *vbuf, Size_t count)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PERLIO_READ	\
	assert(vbuf)

PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *vbuf, Size_t count)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PERLIO_WRITE	\
	assert(vbuf)

PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *vbuf, Size_t count)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PERLIO_UNREAD	\
	assert(vbuf)

PERL_CALLCONV Off_t	Perl_PerlIO_tell(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_seek(pTHX_ PerlIO *f, Off_t offset, int whence);

PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_base(pTHX_ PerlIO *f);
PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_ptr(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *f)
d7111 1
a7111 1
PERL_CALLCONV int	Perl_PerlIO_get_cnt(pTHX_ PerlIO *f)
d7114 1
a7114 2

PERL_CALLCONV PerlIO *	Perl_PerlIO_stdin(pTHX)
d7117 5
a7121 2
PERL_CALLCONV PerlIO *	Perl_PerlIO_stdout(pTHX)
			__attribute__warn_unused_result__;
d7123 5
a7127 2
PERL_CALLCONV PerlIO *	Perl_PerlIO_stderr(pTHX)
			__attribute__warn_unused_result__;
d7129 1
a7129 5
#endif /* PERLIO_LAYERS */

PERL_CALLCONV void	Perl_deb_stack_all(pTHX);
#if defined(PERL_IN_DEB_C) || defined(PERL_DECL_PROT)
STATIC void	S_deb_stack_n(pTHX_ SV** stack_base, I32 stack_min, I32 stack_max, I32 mark_min, I32 mark_max)
d7131 2
a7132 2
#define PERL_ARGS_ASSERT_DEB_STACK_N	\
	assert(stack_base)
d7134 2
a7135 7
#endif

PERL_CALLCONV PADLIST*	Perl_pad_new(pTHX_ int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_pad_undef(pTHX_ CV* cv)
d7137 2
a7138 2
#define PERL_ARGS_ASSERT_PAD_UNDEF	\
	assert(cv)
d7140 3
a7142 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name(pTHX_ const char *name, const STRLEN len, const U32 flags, HV *typestash, HV *ourstash)
d7144 2
a7145 2
#define PERL_ARGS_ASSERT_PAD_ADD_NAME	\
	assert(name)
d7147 1
a7147 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_anon(pTHX_ SV* sv, OPCODE op_type)
d7149 2
a7150 2
#define PERL_ARGS_ASSERT_PAD_ADD_ANON	\
	assert(sv)
d7152 1
a7152 2
#if defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
STATIC void	S_pad_check_dup(pTHX_ SV *name, const U32 flags, const HV *ourstash)
d7154 2
a7155 2
#define PERL_ARGS_ASSERT_PAD_CHECK_DUP	\
	assert(name)
d7157 2
d7160 3
a7162 2
#ifdef DEBUGGING
PERL_CALLCONV void	Perl_pad_setsv(pTHX_ PADOFFSET po, SV* sv)
d7164 2
a7165 2
#define PERL_ARGS_ASSERT_PAD_SETSV	\
	assert(sv)
d7168 14
a7181 6
PERL_CALLCONV void	Perl_pad_block_start(pTHX_ int full);
PERL_CALLCONV void	Perl_pad_tidy(pTHX_ padtidy_type type);
PERL_CALLCONV void	Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_DUMP_PAD	\
	assert(file)
d7183 2
a7184 1
PERL_CALLCONV void	Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv)
d7188 2
a7189 2
#define PERL_ARGS_ASSERT_PAD_FIXUP_INNER_ANONS	\
	assert(padlist); assert(old_cv); assert(new_cv)
d7191 2
a7192 2

PERL_CALLCONV void	Perl_pad_push(pTHX_ PADLIST *padlist, int depth)
d7194 2
a7195 2
#define PERL_ARGS_ASSERT_PAD_PUSH	\
	assert(padlist)
d7197 1
a7197 1
PERL_CALLCONV HV*	Perl_pad_compname_type(pTHX_ const PADOFFSET po)
d7200 13
d7214 3
a7216 3
#if defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
STATIC PADOFFSET	S_pad_findlex(pTHX_ const char *name, const CV* cv, U32 seq, int warn, SV** out_capture, SV** out_name_sv, int *out_flags)
			__attribute__nonnull__(pTHX_1)
d7218 11
a7228 4
			__attribute__nonnull__(pTHX_6)
			__attribute__nonnull__(pTHX_7);
#define PERL_ARGS_ASSERT_PAD_FINDLEX	\
	assert(name); assert(cv); assert(out_name_sv); assert(out_flags)
d7230 3
a7232 1
STATIC PADOFFSET	S_pad_add_name_sv(pTHX_ SV *namesv, const U32 flags, HV *typestash, HV *ourstash)
d7234 5
a7238 2
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_SV	\
	assert(namesv)
d7240 7
a7246 6
#  if defined(DEBUGGING)
STATIC void	S_cv_dump(pTHX_ const CV *cv, const char *title)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CV_DUMP	\
	assert(cv); assert(title)
d7250 25
a7274 2
PERL_CALLCONV CV*	Perl_find_runcv(pTHX_ U32 *db_seqp)
			__attribute__warn_unused_result__;
d7276 4
a7279 4
PERL_CALLCONV void	Perl_free_tied_hv_pool(pTHX);
#if defined(DEBUGGING)
PERL_CALLCONV int	Perl_get_debug_opts(pTHX_ const char **s, bool givehelp)
			__attribute__warn_unused_result__
d7281 2
a7282 2
#define PERL_ARGS_ASSERT_GET_DEBUG_OPTS	\
	assert(s)
d7284 1
a7284 2
#endif
PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV *sv, U32 mask, U32 val)
d7286 2
a7287 2
#define PERL_ARGS_ASSERT_SAVE_SET_SVFLAGS	\
	assert(sv)
d7289 4
a7292 5
#ifdef DEBUGGING
PERL_CALLCONV void	Perl_hv_assert(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_ASSERT	\
	assert(hv)
d7294 7
a7300 1
#endif
d7302 5
a7306 5
PERL_CALLCONV SV*	Perl_hv_scalar(pTHX_ HV *hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_SCALAR	\
	assert(hv)
d7308 5
a7312 5
PERL_CALLCONV I32*	Perl_hv_riter_p(pTHX_ HV *hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_RITER_P	\
	assert(hv)
d7314 1
a7314 2
PERL_CALLCONV HE**	Perl_hv_eiter_p(pTHX_ HV *hv)
			__attribute__warn_unused_result__
d7316 2
a7317 2
#define PERL_ARGS_ASSERT_HV_EITER_P	\
	assert(hv)
d7319 1
a7319 1
PERL_CALLCONV void	Perl_hv_riter_set(pTHX_ HV *hv, I32 riter)
d7321 2
a7322 2
#define PERL_ARGS_ASSERT_HV_RITER_SET	\
	assert(hv)
d7324 1
a7324 1
PERL_CALLCONV void	Perl_hv_eiter_set(pTHX_ HV *hv, HE *eiter)
d7326 2
a7327 2
#define PERL_ARGS_ASSERT_HV_EITER_SET	\
	assert(hv)
d7329 4
a7332 4
PERL_CALLCONV void	Perl_hv_name_set(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_NAME_SET	\
	assert(hv)
d7334 4
a7337 1
PERL_CALLCONV AV**	Perl_hv_backreferences_p(pTHX_ HV *hv)
d7339 2
a7340 2
#define PERL_ARGS_ASSERT_HV_BACKREFERENCES_P	\
	assert(hv)
d7342 6
a7347 5
#if defined(PERL_IN_DUMP_C) || defined(PERL_IN_HV_C) || defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV void	Perl_hv_kill_backrefs(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_KILL_BACKREFS	\
	assert(hv)
d7349 1
a7349 2
#endif
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV *hv)
d7351 2
a7352 2
#define PERL_ARGS_ASSERT_HV_CLEAR_PLACEHOLDERS	\
	assert(hv)
d7354 1
a7354 2
PERL_CALLCONV I32*	Perl_hv_placeholders_p(pTHX_ HV *hv)
			__attribute__warn_unused_result__
d7356 2
a7357 2
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_P	\
	assert(hv)
d7359 1
a7359 2
PERL_CALLCONV I32	Perl_hv_placeholders_get(pTHX_ const HV *hv)
			__attribute__warn_unused_result__
d7361 2
a7362 2
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_GET	\
	assert(hv)
d7364 1
a7364 1
PERL_CALLCONV void	Perl_hv_placeholders_set(pTHX_ HV *hv, I32 ph)
d7366 2
a7367 16
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_SET	\
	assert(hv)


PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV *hv, MAGIC *mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SCALARPACK	\
	assert(hv); assert(mg)


#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC SV *	S_find_hash_subscript(pTHX_ const HV *const hv, const SV *const val)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_FIND_HASH_SUBSCRIPT	\
	assert(val)
d7369 5
a7373 4
STATIC I32	S_find_array_subscript(pTHX_ const AV *const av, const SV *const val)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_FIND_ARRAY_SUBSCRIPT	\
	assert(val)
a7374 1
STATIC SV*	S_find_uninit_var(pTHX_ const OP *const obase, const SV *const uninit_sv, bool top);
d7376 5
a7380 3

#ifdef PERL_NEED_MY_HTOLE16
PERL_CALLCONV U16	Perl_my_htole16(U16 n);
d7382 2
a7383 2
#ifdef PERL_NEED_MY_LETOH16
PERL_CALLCONV U16	Perl_my_letoh16(U16 n);
d7385 2
a7386 2
#ifdef PERL_NEED_MY_HTOBE16
PERL_CALLCONV U16	Perl_my_htobe16(U16 n);
d7388 2
a7389 2
#ifdef PERL_NEED_MY_BETOH16
PERL_CALLCONV U16	Perl_my_betoh16(U16 n);
d7391 2
a7392 2
#ifdef PERL_NEED_MY_HTOLE32
PERL_CALLCONV U32	Perl_my_htole32(U32 n);
d7394 2
a7395 2
#ifdef PERL_NEED_MY_LETOH32
PERL_CALLCONV U32	Perl_my_letoh32(U32 n);
d7397 1
a7397 1
#ifdef PERL_NEED_MY_HTOBE32
d7400 2
a7401 2
#ifdef PERL_NEED_MY_BETOH32
PERL_CALLCONV U32	Perl_my_betoh32(U32 n);
d7403 2
a7404 2
#ifdef PERL_NEED_MY_HTOLE64
PERL_CALLCONV U64	Perl_my_htole64(U64 n);
d7406 2
a7407 2
#ifdef PERL_NEED_MY_LETOH64
PERL_CALLCONV U64	Perl_my_letoh64(U64 n);
d7409 2
a7410 2
#ifdef PERL_NEED_MY_HTOBE64
PERL_CALLCONV U64	Perl_my_htobe64(U64 n);
d7412 2
a7413 2
#ifdef PERL_NEED_MY_BETOH64
PERL_CALLCONV U64	Perl_my_betoh64(U64 n);
d7415 2
a7416 3

#ifdef PERL_NEED_MY_HTOLES
PERL_CALLCONV short	Perl_my_htoles(short n);
d7418 2
a7419 2
#ifdef PERL_NEED_MY_LETOHS
PERL_CALLCONV short	Perl_my_letohs(short n);
d7421 2
a7422 2
#ifdef PERL_NEED_MY_HTOBES
PERL_CALLCONV short	Perl_my_htobes(short n);
d7424 2
a7425 2
#ifdef PERL_NEED_MY_BETOHS
PERL_CALLCONV short	Perl_my_betohs(short n);
d7427 2
a7428 2
#ifdef PERL_NEED_MY_HTOLEI
PERL_CALLCONV int	Perl_my_htolei(int n);
d7430 2
a7431 2
#ifdef PERL_NEED_MY_LETOHI
PERL_CALLCONV int	Perl_my_letohi(int n);
d7433 2
a7434 2
#ifdef PERL_NEED_MY_HTOBEI
PERL_CALLCONV int	Perl_my_htobei(int n);
d7436 2
a7437 2
#ifdef PERL_NEED_MY_BETOHI
PERL_CALLCONV int	Perl_my_betohi(int n);
d7439 2
a7440 2
#ifdef PERL_NEED_MY_HTOLEL
PERL_CALLCONV long	Perl_my_htolel(long n);
d7442 1
a7442 1
#ifdef PERL_NEED_MY_LETOHL
d7445 9
a7453 2
#ifdef PERL_NEED_MY_HTOBEL
PERL_CALLCONV long	Perl_my_htobel(long n);
d7455 2
a7456 2
#ifdef PERL_NEED_MY_BETOHL
PERL_CALLCONV long	Perl_my_betohl(long n);
d7458 4
d7463 1
a7463 7
PERL_CALLCONV void	Perl_my_swabn(void* ptr, int n)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MY_SWABN	\
	assert(ptr)


PERL_CALLCONV GV*	Perl_gv_fetchpvn_flags(pTHX_ const char* name, STRLEN len, I32 flags, const svtype sv_type)
d7465 2
a7466 2
#define PERL_ARGS_ASSERT_GV_FETCHPVN_FLAGS	\
	assert(name)
d7468 3
a7470 1
PERL_CALLCONV GV*	Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, const svtype sv_type)
d7472 2
a7473 2
#define PERL_ARGS_ASSERT_GV_FETCHSV	\
	assert(name)
d7475 3
a7477 8
PERL_CALLCONV bool	Perl_is_gv_magical_sv(pTHX_ SV *const name_sv, U32 flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_GV_MAGICAL_SV	\
	assert(name_sv)


PERL_CALLCONV bool	Perl_stashpv_hvname_match(pTHX_ const COP *c, const HV *hv)
a7478 1
			__attribute__nonnull__(pTHX_1)
d7480 2
a7481 2
#define PERL_ARGS_ASSERT_STASHPV_HVNAME_MATCH	\
	assert(c); assert(hv)
d7483 4
d7488 1
a7488 17
#ifdef DEBUG_LEAKING_SCALARS_FORK_DUMP
PERL_CALLCONV void	Perl_dump_sv_child(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUMP_SV_CHILD	\
	assert(sv)

#endif

#ifdef PERL_DONT_CREATE_GVSV
/* PERL_CALLCONV GV*	Perl_gv_SVadd(pTHX_ GV *gv); */
#endif
#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
STATIC bool	S_ckwarn_common(pTHX_ U32 w);
#endif
PERL_CALLCONV bool	Perl_ckwarn(pTHX_ U32 w);
PERL_CALLCONV bool	Perl_ckwarn_d(pTHX_ U32 w);
PERL_CALLCONV STRLEN *	Perl_new_warnings_bitfield(pTHX_ STRLEN *buffer, const char *const bits, STRLEN size)
a7490 13
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_NEW_WARNINGS_BITFIELD	\
	assert(bits)


PERL_CALLCONV void	Perl_offer_nice_chunk(pTHX_ void *const chunk, const U32 chunk_size)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OFFER_NICE_CHUNK	\
	assert(chunk)


#ifndef SPRINTF_RETURNS_STRLEN
PERL_CALLCONV int	Perl_my_sprintf(char *buffer, const char *pat, ...)
d7493 2
a7494 2
#define PERL_ARGS_ASSERT_MY_SPRINTF	\
	assert(buffer); assert(pat)
d7496 5
a7500 1
#endif
d7502 5
a7506 6
PERL_CALLCONV int	Perl_my_snprintf(char *buffer, const Size_t len, const char *format, ...)
			__attribute__format__(__printf__,3,4)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_MY_SNPRINTF	\
	assert(buffer); assert(format)
d7508 1
a7508 48
PERL_CALLCONV int	Perl_my_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_MY_VSNPRINTF	\
	assert(buffer); assert(format)


PERL_CALLCONV void	Perl_my_clearenv(pTHX);

#ifdef PERL_IMPLICIT_CONTEXT
#ifdef PERL_GLOBAL_STRUCT_PRIVATE
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ const char *my_cxt_key, size_t size)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MY_CXT_INIT	\
	assert(my_cxt_key)

PERL_CALLCONV int	Perl_my_cxt_index(pTHX_ const char *my_cxt_key)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MY_CXT_INDEX	\
	assert(my_cxt_key)

#else
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ int *index, size_t size)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MY_CXT_INIT	\
	assert(index)

#endif
#endif

#ifndef HAS_STRLCAT
PERL_CALLCONV Size_t	Perl_my_strlcat(char *dst, const char *src, Size_t size);
#endif

#ifndef HAS_STRLCPY
PERL_CALLCONV Size_t	Perl_my_strlcpy(char *dst, const char *src, Size_t size);
#endif

#ifdef PERL_MAD
PERL_CALLCONV void	Perl_pad_peg(const char* s)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PAD_PEG	\
	assert(s)

#if defined(PERL_IN_DUMP_C) || defined(PERL_DECL_PROT)
STATIC void	S_xmldump_attr(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
d7510 2
a7511 2
#define PERL_ARGS_ASSERT_XMLDUMP_ATTR	\
	assert(file); assert(pat)
d7513 5
a7517 7
#endif
PERL_CALLCONV void	Perl_xmldump_indent(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_XMLDUMP_INDENT	\
	assert(file); assert(pat)
d7519 2
a7520 2
PERL_CALLCONV void	Perl_xmldump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args)
			__attribute__nonnull__(pTHX_2)
d7522 2
a7523 2
#define PERL_ARGS_ASSERT_XMLDUMP_VINDENT	\
	assert(file); assert(pat)
d7525 5
a7529 6
PERL_CALLCONV void	Perl_xmldump_all(pTHX);
PERL_CALLCONV void	Perl_xmldump_all_perl(pTHX_ bool justperl);
PERL_CALLCONV void	Perl_xmldump_packsubs(pTHX_ const HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_PACKSUBS	\
	assert(stash)
d7531 2
a7532 23
PERL_CALLCONV void	Perl_xmldump_packsubs_perl(pTHX_ const HV* stash, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_PACKSUBS_PERL	\
	assert(stash)

PERL_CALLCONV void	Perl_xmldump_sub(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_SUB	\
	assert(gv)

PERL_CALLCONV void	Perl_xmldump_sub_perl(pTHX_ const GV* gv, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_SUB_PERL	\
	assert(gv)

PERL_CALLCONV void	Perl_xmldump_form(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_FORM	\
	assert(gv)

PERL_CALLCONV void	Perl_xmldump_eval(pTHX);
PERL_CALLCONV char*	Perl_sv_catxmlsv(pTHX_ SV *dsv, SV *ssv)
			__attribute__nonnull__(pTHX_1)
d7534 2
a7535 2
#define PERL_ARGS_ASSERT_SV_CATXMLSV	\
	assert(dsv); assert(ssv)
d7537 1
a7537 1
PERL_CALLCONV char*	Perl_sv_catxmlpvn(pTHX_ SV *dsv, const char *pv, STRLEN len, int utf8)
d7540 2
a7541 2
#define PERL_ARGS_ASSERT_SV_CATXMLPVN	\
	assert(dsv); assert(pv)
d7543 5
a7547 3
PERL_CALLCONV char*	Perl_sv_xmlpeek(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_XMLPEEK	\
d7550 2
a7551 1
PERL_CALLCONV void	Perl_do_pmop_xmldump(pTHX_ I32 level, PerlIO *file, const PMOP *pm)
d7553 2
a7554 2
#define PERL_ARGS_ASSERT_DO_PMOP_XMLDUMP	\
	assert(file)
d7556 1
a7556 2
PERL_CALLCONV void	Perl_pmop_xmldump(pTHX_ const PMOP* pm);
PERL_CALLCONV void	Perl_do_op_xmldump(pTHX_ I32 level, PerlIO *file, const OP *o)
d7558 2
a7559 2
#define PERL_ARGS_ASSERT_DO_OP_XMLDUMP	\
	assert(file)
d7561 4
a7564 4
PERL_CALLCONV void	Perl_op_xmldump(pTHX_ const OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OP_XMLDUMP	\
	assert(o)
d7566 6
d7573 5
a7577 5
PERL_CALLCONV TOKEN*	Perl_newTOKEN(pTHX_ I32 optype, YYSTYPE lval, MADPROP* madprop);
PERL_CALLCONV void	Perl_token_free(pTHX_ TOKEN *tk)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_TOKEN_FREE	\
	assert(tk)
d7579 6
a7584 4
PERL_CALLCONV void	Perl_token_getmad(pTHX_ TOKEN *tk, OP *o, char slot)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_TOKEN_GETMAD	\
	assert(tk)
d7586 2
a7587 6
PERL_CALLCONV void	Perl_op_getmad_weak(pTHX_ OP* from, OP* o, char slot);
PERL_CALLCONV void	Perl_op_getmad(pTHX_ OP* from, OP* o, char slot);
PERL_CALLCONV void	Perl_prepend_madprops(pTHX_ MADPROP* mp, OP* o, char slot);
PERL_CALLCONV void	Perl_append_madprops(pTHX_ MADPROP* tm, OP* o, char slot);
PERL_CALLCONV void	Perl_addmad(pTHX_ MADPROP* tm, MADPROP** root, char slot);
PERL_CALLCONV MADPROP*	Perl_newMADsv(pTHX_ char key, SV* sv)
d7589 2
a7590 2
#define PERL_ARGS_ASSERT_NEWMADSV	\
	assert(sv)
d7592 7
a7598 2
PERL_CALLCONV MADPROP*	Perl_newMADPROP(pTHX_ char key, char type, void* val, I32 vlen);
PERL_CALLCONV void	Perl_mad_free(pTHX_ MADPROP* mp);
d7600 5
a7604 5
#  if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
STATIC char*	S_skipspace0(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE0	\
	assert(s)
d7606 5
a7610 9
STATIC char*	S_skipspace1(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE1	\
	assert(s)

STATIC char*	S_skipspace2(pTHX_ char *s, SV **sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE2	\
	assert(s)
a7611 5
STATIC void	S_start_force(pTHX_ int where);
STATIC void	S_curmad(pTHX_ char slot, SV *sv);
#  endif
PERL_CALLCONV int	Perl_madlex(pTHX);
PERL_CALLCONV int	Perl_madparse(pTHX);
d7613 2
a7614 7
#if !defined(HAS_SIGNBIT)
PERL_CALLCONV int	Perl_signbit(NV f)
			__attribute__pure__;

#endif

PERL_CALLCONV void	Perl_emulate_cop_io(pTHX_ const COP *const c, SV *const sv)
d7617 2
a7618 2
#define PERL_ARGS_ASSERT_EMULATE_COP_IO	\
	assert(c); assert(sv)
d7620 1
a7620 9
PERL_CALLCONV REGEXP *	Perl_get_re_arg(pTHX_ SV *sv);

PERL_CALLCONV SV*	Perl_mro_get_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MRO_GET_PRIVATE_DATA	\
	assert(smeta); assert(which)

PERL_CALLCONV SV*	Perl_mro_set_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which, SV *const data)
a7621 1
			__attribute__nonnull__(pTHX_2)
d7623 2
a7624 12
#define PERL_ARGS_ASSERT_MRO_SET_PRIVATE_DATA	\
	assert(smeta); assert(which); assert(data)

PERL_CALLCONV const struct mro_alg *	Perl_mro_get_from_name(pTHX_ SV *name)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_GET_FROM_NAME	\
	assert(name)

PERL_CALLCONV void	Perl_mro_register(pTHX_ const struct mro_alg *mro)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_REGISTER	\
	assert(mro)
d7626 1
a7626 1
PERL_CALLCONV void	Perl_mro_set_mro(pTHX_ struct mro_meta *const meta, SV *const name)
d7628 1
a7628 8
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MRO_SET_MRO	\
	assert(meta); assert(name)

PERL_CALLCONV struct mro_meta*	Perl_mro_meta_init(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_META_INIT	\
	assert(stash)
d7630 1
a7630 2
#if defined(USE_ITHREADS)
PERL_CALLCONV struct mro_meta*	Perl_mro_meta_dup(pTHX_ struct mro_meta* smeta, CLONE_PARAMS* param)
d7633 2
a7634 2
#define PERL_ARGS_ASSERT_MRO_META_DUP	\
	assert(smeta); assert(param)
d7637 14
a7650 4
PERL_CALLCONV AV*	Perl_mro_get_linear_isa(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA	\
	assert(stash)
d7652 5
a7656 5
#if defined(PERL_IN_MRO_C) || defined(PERL_DECL_PROT)
STATIC AV*	S_mro_get_linear_isa_dfs(pTHX_ HV* stash, U32 level)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA_DFS	\
	assert(stash)
d7658 6
a7663 5
#endif
PERL_CALLCONV void	Perl_mro_isa_changed_in(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_ISA_CHANGED_IN	\
	assert(stash)
d7665 2
a7666 4
PERL_CALLCONV void	Perl_mro_method_changed_in(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_METHOD_CHANGED_IN	\
	assert(stash)
d7668 2
a7669 6
PERL_CALLCONV void	Perl_boot_core_mro(pTHX);
PERL_CALLCONV void	Perl_sys_init(int* argc, char*** argv)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SYS_INIT	\
	assert(argc); assert(argv)
d7671 5
a7675 6
PERL_CALLCONV void	Perl_sys_init3(int* argc, char*** argv, char*** env)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_SYS_INIT3	\
	assert(argc); assert(argv); assert(env)
d7677 1
a7677 3
PERL_CALLCONV void	Perl_sys_term(void);
PERL_CALLCONV const char *	Perl_fetch_cop_label(pTHX_ struct refcounted_he *const chain, STRLEN *len, U32 *flags);
PERL_CALLCONV struct refcounted_he *	Perl_store_cop_label(pTHX_ struct refcounted_he *const chain, const char *label)
d7679 2
a7680 2
#define PERL_ARGS_ASSERT_STORE_COP_LABEL	\
	assert(label)
d7682 8
d7691 5
a7695 2
PERL_CALLCONV int	Perl_keyword_plugin_standard(pTHX_ char* keyword_ptr, STRLEN keyword_len, OP** op_ptr)
			__attribute__nonnull__(pTHX_1)
d7697 7
a7703 2
#define PERL_ARGS_ASSERT_KEYWORD_PLUGIN_STANDARD	\
	assert(keyword_ptr); assert(op_ptr)
d7705 4
d7710 4
d7715 1
a7715 3
/*
 * ex: set ts=8 sts=4 sw=4 noet:
 */
@


1.13
log
@Merge in perl 5.10.1
@
text
@d122 7
d141 1
a141 1
PERL_CALLCONV bool	Perl_Gv_AMupdate(pTHX_ HV* stash)
a184 6
PERL_CALLCONV AV*	Perl_av_fake(pTHX_ I32 size, SV **strp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AV_FAKE	\
	assert(strp)

d196 1
a196 1
PERL_CALLCONV I32	Perl_av_len(pTHX_ const AV *av)
d262 12
d382 1
a382 1
PERL_CALLCONV SV*	Perl_newSVpvf_nocontext(const char* pat, ...)
d388 1
a388 1
PERL_CALLCONV void	Perl_sv_catpvf_nocontext(SV* sv, const char* pat, ...)
d395 1
a395 1
PERL_CALLCONV void	Perl_sv_setpvf_nocontext(SV* sv, const char* pat, ...)
d402 1
a402 1
PERL_CALLCONV void	Perl_sv_catpvf_mg_nocontext(SV* sv, const char* pat, ...)
d409 1
a409 1
PERL_CALLCONV void	Perl_sv_setpvf_mg_nocontext(SV* sv, const char* pat, ...)
a429 5
PERL_CALLCONV void	Perl_cv_ckproto(pTHX_ const CV* cv, const GV* gv, const char* p)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CV_CKPROTO	\
	assert(cv)

d446 1
a446 1
PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ CV* cv)
d516 6
a521 6
PERL_CALLCONV char*	Perl_delimcpy(pTHX_ char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_6);
a525 10
PERL_CALLCONV void	Perl_deprecate(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DEPRECATE	\
	assert(s)

PERL_CALLCONV void	Perl_deprecate_old(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DEPRECATE_OLD	\
	assert(s)

d529 6
a534 2
PERL_CALLCONV OP*	Perl_vdie(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV OP*	Perl_die_where(pTHX_ const char* message, STRLEN msglen);
d741 1
d771 5
d781 5
d804 3
a806 2
PERL_CALLCONV OP*	Perl_force_list(pTHX_ OP* arg);
PERL_CALLCONV OP*	Perl_fold_constants(pTHX_ OP *o)
d811 1
d824 3
a826 1
PERL_CALLCONV OP*	Perl_gen_constant_list(pTHX_ OP* o);
d842 4
a845 15
PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_AVADD	\
	assert(gv)

PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_HVADD	\
	assert(gv)

PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_IOADD	\
	assert(gv)

d896 1
d899 1
a899 1
	assert(name)
d902 1
d905 7
a911 1
	assert(name)
d913 1
a913 1
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 add, I32 sv_type)
d953 5
d973 1
a973 1
PERL_CALLCONV void	Perl_hv_clear(pTHX_ HV* hv);
d1082 8
d1094 1
a1094 1
PERL_CALLCONV I32	Perl_ibcmp(pTHX_ const char* a, const char* b, I32 len)
d1096 2
a1097 2
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1101 1
a1101 1
PERL_CALLCONV I32	Perl_ibcmp_locale(pTHX_ const char* a, const char* b, I32 len)
d1103 2
a1104 2
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1114 2
a1115 1
PERL_CALLCONV bool	Perl_ingroup(pTHX_ Gid_t testgid, bool effective)
d1118 1
d1124 1
d1133 1
a1133 1
PERL_CALLCONV char*	Perl_instr(pTHX_ const char* big, const char* little)
d1136 2
a1137 2
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a1148 6
PERL_CALLCONV bool	Perl_is_gv_magical(pTHX_ const char *name, STRLEN len, U32 flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_GV_MAGICAL	\
	assert(name)

a1167 4
PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

a1243 4
PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

d1292 7
a1298 2
PERL_CALLCONV STRLEN	Perl_is_utf8_char(pTHX_ const U8 *s)
			__attribute__nonnull__(pTHX_1);
d1302 2
a1303 2
PERL_CALLCONV bool	Perl_is_utf8_string(pTHX_ const U8 *s, STRLEN len)
			__attribute__nonnull__(pTHX_1);
d1307 2
a1308 2
/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(pTHX_ const U8 *s, STRLEN len, const U8 **p)
			__attribute__nonnull__(pTHX_1); */
d1312 2
a1313 2
PERL_CALLCONV bool	Perl_is_utf8_string_loclen(pTHX_ const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
			__attribute__nonnull__(pTHX_1);
a1322 6
PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUMC	\
	assert(p)

d1353 12
d1377 6
d1425 60
d1496 12
d1511 31
d1554 2
a1555 1
PERL_CALLCONV OP*	Perl_linklist(pTHX_ OP* o)
d1560 2
a1562 1
PERL_CALLCONV OP*	Perl_listkids(pTHX_ OP* o);
d1573 1
a1573 1
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP* o, I32 lex)
d1578 1
a1578 1
PERL_CALLCONV I32	Perl_looks_like_number(pTHX_ SV* sv)
d1635 6
a1641 1
			__attribute__nonnull__(pTHX_1)
d1644 1
a1644 1
	assert(sv); assert(mg)
a1663 6
PERL_CALLCONV int	Perl_magic_freeregexp(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_FREEREGEXP	\
	assert(sv); assert(mg)

a1791 14
#ifndef NO_MATHOMS
PERL_CALLCONV int	Perl_magic_setbm(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SETBM	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_setfm(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SETFM	\
	assert(sv); assert(mg)

#endif
a1821 8
#ifndef NO_MATHOMS
PERL_CALLCONV int	Perl_magic_setglob(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SETGLOB	\
	assert(sv); assert(mg)

#endif
a1852 1
			__attribute__nonnull__(pTHX_1)
d1855 1
a1855 1
	assert(sv); assert(mg)
a1904 5
PERL_CALLCONV void	Perl_magicname(pTHX_ const char* sym, const char* name, I32 namlen)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MAGICNAME	\
	assert(sym)

d1957 1
a1957 1
PERL_CALLCONV void	Perl_mg_localize(pTHX_ SV* sv, SV* nsv)
d2002 1
a2002 1
PERL_CALLCONV int	Perl_mode_from_discipline(pTHX_ SV* discp);
a2007 5
PERL_CALLCONV OP*	Perl_my(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MY	\
	assert(o)

d2062 1
a2062 1
PERL_CALLCONV PerlIO*	Perl_my_popen_list(pTHX_ char* mode, int n, SV ** args)
d2245 1
a2245 1
PERL_CALLCONV IO*	Perl_newIO(pTHX)
d2247 1
a2247 1
			__attribute__warn_unused_result__;
d2270 1
a2270 1
PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV* sv)
d2277 1
a2277 1
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV* sv)
d2284 1
a2284 1
PERL_CALLCONV SV*	Perl_newSV(pTHX_ STRLEN len)
d2302 1
a2302 1
PERL_CALLCONV SV*	Perl_newSViv(pTHX_ IV i)
d2306 1
a2306 1
PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ UV u)
d2310 1
a2310 1
PERL_CALLCONV SV*	Perl_newSVnv(pTHX_ NV n)
d2314 1
a2314 1
PERL_CALLCONV SV*	Perl_newSVpv(pTHX_ const char* s, STRLEN len)
d2318 1
a2318 1
PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char* s, STRLEN len)
d2322 1
a2322 1
PERL_CALLCONV SV*	Perl_newSVpvn_flags(pTHX_ const char* s, STRLEN len, U32 flags)
d2326 1
a2326 1
PERL_CALLCONV SV*	Perl_newSVhek(pTHX_ const HEK *hek)
d2334 1
a2334 1
PERL_CALLCONV SV*	Perl_newSVpvf(pTHX_ const char* pat, ...)
d2342 1
a2342 1
PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char* pat, va_list* args)
d2349 1
a2349 1
PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV* rv, const char* classname)
d2354 1
a2354 1
PERL_CALLCONV SV*	Perl_newSVsv(pTHX_ SV* old)
d2358 1
a2358 1
PERL_CALLCONV SV*	Perl_newSV_type(pTHX_ svtype type)
d2381 1
a2381 1
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *e, SV *sv)
d2394 5
d2440 1
a2440 1
PERL_CALLCONV char*	Perl_ninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend)
d2442 4
a2445 4
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
a2448 6
PERL_CALLCONV OP*	Perl_oopsCV(pTHX_ OP* o)
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OOPSCV	\
	assert(o)

d2463 5
d2469 1
a2469 1
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ const char *const name)
d2474 1
a2474 1
PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ const char* name)
d2494 1
d2496 1
d2498 3
a2500 1
PERL_CALLCONV void	Perl_pad_reset(pTHX);
d2618 2
a2619 2
#ifdef PERL_USES_PL_PIDSTATUS
PERL_CALLCONV void	Perl_pidgone(pTHX_ Pid_t pid, int status);
d2621 2
a2622 1
PERL_CALLCONV void	Perl_pmflag(pTHX_ U32* pmfl, int ch)
d2633 2
a2634 1
PERL_CALLCONV OP*	Perl_pmtrans(pTHX_ OP* o, OP* expr, OP* repl)
d2641 1
d2646 3
a2648 1
PERL_CALLCONV OP*	Perl_refkids(pTHX_ OP* o, I32 type);
d2674 1
a2674 1
PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* r)
d2676 5
d2682 1
a2682 1
	assert(r)
d2684 1
a2684 1
PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const r)
d2687 1
a2687 6
	assert(r)

PERL_CALLCONV char *	Perl_reg_stringify(pTHX_ MAGIC *mg, STRLEN *lp, U32 *flags, I32 *haseval)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_STRINGIFY	\
	assert(mg)
d2697 1
a2697 1
PERL_CALLCONV REGEXP*	Perl_pregcomp(pTHX_ const SV * const pattern, const U32 flags)
d2702 1
a2702 1
PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ const SV * const pattern, const U32 flags)
d2707 1
a2707 1
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const prog, SV* sv, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
d2712 1
a2712 1
	assert(prog); assert(strpos); assert(strend)
d2714 1
a2714 1
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP  *const prog)
d2717 1
a2717 1
	assert(prog)
d2719 1
a2719 1
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const prog, char *stringarg, char *strend, char *strbeg, I32 minend, SV *sv, void *data, U32 flags)
d2726 1
a2726 1
	assert(prog); assert(stringarg); assert(strend); assert(strbeg); assert(sv)
d2804 3
a2806 3
PERL_CALLCONV void	Perl_repeatcpy(pTHX_ char* to, const char* from, I32 len, I32 count)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2810 1
a2810 1
PERL_CALLCONV char*	Perl_rninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend)
d2812 4
a2815 4
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d2827 2
a2828 1
PERL_CALLCONV void	Perl_rxres_free(pTHX_ void** rsp)
d2833 1
a2833 1
PERL_CALLCONV void	Perl_rxres_restore(pTHX_ void **rsp, REGEXP *rx)
d2839 1
d2882 5
a2886 1
PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, I32 idx, SV **sptr)
d2889 1
a2889 1
#define PERL_ARGS_ASSERT_SAVE_AELEM	\
d2919 11
d2965 6
a2970 1
PERL_CALLCONV void	Perl_save_helem(pTHX_ HV *hv, SV *key, SV **sptr)
d2974 1
a2974 1
#define PERL_ARGS_ASSERT_SAVE_HELEM	\
a3048 1
PERL_CALLCONV void	Perl_save_padsv(pTHX_ PADOFFSET off);
d3068 4
a3071 2
PERL_CALLCONV OP*	Perl_scalarkids(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalarseq(pTHX_ OP* o);
a3108 7
#if !defined(VMS)
PERL_CALLCONV I32	Perl_setenv_getix(pTHX_ const char* nam)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SETENV_GETIX	\
	assert(nam)

#endif
d3134 1
a3134 1
PERL_CALLCONV bool	Perl_sv_2bool(pTHX_ SV* sv)
d3139 1
a3139 1
PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV** st, GV** gvp, I32 lref)
d3145 1
a3145 1
PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV* sv)
a3155 5
STATIC char*	S_glob_2pv(pTHX_ GV* const gv, STRLEN * const len)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GLOB_2PV	\
	assert(gv)

d3157 5
a3161 5
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV* sv); */
PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV* sv, I32 flags);
PERL_CALLCONV SV*	Perl_sv_2mortal(pTHX_ SV* sv);
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV* sv);
PERL_CALLCONV SV*	Perl_sv_2num(pTHX_ SV* sv)
d3166 3
a3168 3
/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV* sv, STRLEN* lp); */
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags);
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV* sv, STRLEN* lp)
d3173 1
a3173 1
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV* sv, STRLEN* lp)
d3183 2
a3184 2
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV* sv); */
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV* sv, I32 flags);
d3218 3
a3220 2
PERL_CALLCONV I32	Perl_sv_true(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_add_arena(pTHX_ char* ptr, U32 size, U32 flags)
d3225 2
a3226 1
PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV* sv)
d3231 1
a3231 1
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV* sv, HV* stash)
d3237 1
a3237 1
PERL_CALLCONV void	Perl_sv_catpvf(pTHX_ SV* sv, const char* pat, ...)
d3244 1
a3244 1
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV* sv, const char* pat, va_list* args)
d3250 1
a3250 1
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV* sv, const char* ptr)
d3266 1
a3266 1
PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV* sv, const char* ptr)
d3273 1
a3273 1
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV* sv)
d3278 2
a3279 2
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV* sv1, SV* sv2);
PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV* sv1, SV* sv2);
d3281 1
a3281 1
PERL_CALLCONV char*	Perl_sv_collxfrm(pTHX_ SV* sv, STRLEN* nxp)
d3301 1
a3301 1
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV* sv);
d3307 1
a3307 1
PERL_CALLCONV bool	Perl_sv_derived_from(pTHX_ SV* sv, const char* name)
d3314 1
a3314 1
PERL_CALLCONV bool	Perl_sv_does(pTHX_ SV* sv, const char* name)
d3322 2
a3323 2
PERL_CALLCONV void	Perl_sv_free(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV* sv)
d3329 1
a3329 1
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV* sv, PerlIO* fp, I32 append)
d3335 1
a3335 1
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV* sv, STRLEN newlen)
d3340 2
a3341 2
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV* sv);
/* PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV *bigstr, STRLEN offset, STRLEN len, const char *little, STRLEN littlelen)
d3353 1
a3353 1
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char* name)
d3359 3
a3361 3
PERL_CALLCONV STRLEN	Perl_sv_len(pTHX_ SV* sv);
PERL_CALLCONV STRLEN	Perl_sv_len_utf8(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV* sv, SV* obj, int how, const char* name, I32 namlen)
d3366 1
a3366 1
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV* sv, SV* obj, int how, const MGVTBL *vtbl, const char* name, I32 namlen)
d3371 1
a3371 1
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV* oldsv)
d3378 1
a3378 1
PERL_CALLCONV SV*	Perl_sv_newref(pTHX_ SV* sv);
d3380 1
a3380 1
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV* sv, I32* offsetp, I32* lenp)
d3385 6
a3390 1
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV* sv, I32* offsetp)
d3400 1
a3400 1
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV* sv, STRLEN* lp)
d3405 1
a3405 1
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV* sv, STRLEN* lp)
d3425 1
a3425 1
PERL_CALLCONV const char*	Perl_sv_reftype(pTHX_ const SV* sv, int ob)
d3431 1
a3431 1
PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV* sv, SV* nsv)
d3438 1
a3438 1
PERL_CALLCONV void	Perl_sv_reset(pTHX_ const char* s, HV* stash)
d3443 1
a3443 1
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV* sv, const char* pat, ...)
d3450 1
a3450 1
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV* sv, const char* pat, va_list* args)
d3456 1
a3456 1
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV* sv, IV num)
d3461 1
a3461 1
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV* sv, IV num)
d3466 1
a3466 1
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV* sv, UV num)
d3471 1
a3471 1
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV* sv, NV num)
d3476 1
a3476 1
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV* rv, const char* classname, IV iv)
d3481 1
a3481 1
PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV* rv, const char* classname, UV uv)
d3486 1
a3486 1
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV* rv, const char* classname, NV nv)
d3491 1
a3491 1
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV* rv, const char* classname, void* pv)
d3496 1
a3496 1
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV* rv, const char* classname, const char* pv, STRLEN n)
d3502 1
a3502 1
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV* sv, const char* ptr)
d3507 1
a3507 1
PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV* sv, const char* ptr, STRLEN len)
d3522 1
a3522 1
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV* sv)
d3528 1
a3528 1
PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV* sv, int type)
d3538 1
a3538 1
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV *ref, U32 flags)
d3543 1
a3543 1
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV* sv)
d3548 1
a3548 1
PERL_CALLCONV void	Perl_sv_upgrade(pTHX_ SV* sv, svtype new_type)
d3558 1
a3558 1
PERL_CALLCONV void	Perl_sv_usepvn_flags(pTHX_ SV* sv, char* ptr, STRLEN len, U32 flags)
d3563 1
a3563 1
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)
d3569 1
a3569 1
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)
d3595 1
a3595 1
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char* s)
d3824 1
a3824 1
PERL_CALLCONV void	Perl_report_uninit(pTHX_ SV* uninit_sv);
d3842 12
d3869 1
a3869 1
PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ const char* message, int msglen)
d3872 1
a3872 1
	assert(message)
d3874 1
a3874 1
PERL_CALLCONV int	Perl_yyerror(pTHX_ const char* s)
d3886 2
a3887 1
PERL_CALLCONV int	Perl_yywarn(pTHX_ const char* s)
d3892 1
d3894 1
a3894 1
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ char* s)
d3929 1
a3929 1
PERL_CALLCONV void	Perl_sv_catpvf_mg(pTHX_ SV *sv, const char* pat, ...)
d3936 1
a3936 1
PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args)
d3942 1
a3942 1
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *sv, const char *ptr)
d3958 1
a3958 1
PERL_CALLCONV void	Perl_sv_setpvf_mg(pTHX_ SV *sv, const char* pat, ...)
d3965 1
a3965 1
PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args)
d3971 1
a3971 1
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *sv, IV i)
d3976 1
a3976 1
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *sv, IV iv)
d3981 1
a3981 1
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *sv, UV u)
d3986 1
a3986 1
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *sv, NV num)
d3991 1
a3991 1
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *sv, const char *ptr)
d3996 1
a3996 1
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len)
d4002 1
a4002 1
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *dstr, SV *sstr)
d4128 4
a4131 1
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *sv, bool fail_ok)
d4136 1
a4136 4
/* PERL_CALLCONV STRLEN	sv_utf8_upgrade_nomg(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *sv)
d4141 1
a4141 1
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *sv)
d4151 1
a4151 1
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *sv, U32 flags)
d4157 1
a4157 1
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *sv)
a4183 1
PERL_CALLCONV void	Perl_boot_core_xsutils(pTHX);
d4223 6
a4228 5
PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ const REGEXP* r, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_RE_DUP	\
	assert(param)
d4230 1
a4230 1
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type, CLONE_PARAMS* param)
d4235 1
a4235 1
PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR* dp)
d4238 1
a4238 1
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp, CLONE_PARAMS* param)
d4244 1
a4244 1
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg, CLONE_PARAMS* param)
d4250 10
a4259 1
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ const SV* sstr, CLONE_PARAMS* param)
d4265 1
a4265 1
PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV* dstr, const SV *sstr, CLONE_PARAMS* param)
d4272 1
a4272 1
PERL_CALLCONV yy_parser*	Perl_parser_dup(pTHX_ const yy_parser *proto, CLONE_PARAMS* param)
d4282 1
a4282 1
PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *tbl, const void *sv)
d4288 1
a4288 1
PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *tbl, const void *oldsv, void *newsv)
d4294 1
a4294 1
PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *tbl)
d4299 2
a4300 2
PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *tbl);
PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *tbl);
d4381 1
a4381 1
STATIC void	S_gv_init_sv(pTHX_ GV *gv, I32 sv_type)
d4401 1
a4401 1
PERL_CALLCONV void*	Perl_get_arena(pTHX_ size_t svtype, U32 misc)
d4417 5
a4603 6
PERL_CALLCONV OP*	Perl_ck_lengthconst(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_LENGTHCONST	\
	assert(o)

d4742 6
d4928 10
a4937 1
STATIC void	S_incpush(pTHX_ const char *dir, bool addsubdirs, bool addoldvers, bool usesep, bool canrelocate);
d4952 1
a4952 1
STATIC int	S_open_script(pTHX_ const char *scriptname, bool dosearch, SV *sv, bool *suidscript, PerlIO **rsfpp)
d4955 1
a4955 2
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d4957 1
a4957 1
	assert(scriptname); assert(sv); assert(suidscript); assert(rsfpp)
d4964 1
a4964 21
#ifdef DOSUID
#  ifdef IAMSUID
STATIC void	S_validate_suid(pTHX_ const char *validarg, int fdscript, bool suidscript, SV* linestr_sv, PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_VALIDATE_SUID	\
	assert(validarg); assert(linestr_sv); assert(rsfp)

#  else
STATIC void	S_validate_suid(pTHX_ const char *validarg, const char *scriptname, int fdscript, SV* linestr_sv, PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_VALIDATE_SUID	\
	assert(validarg); assert(scriptname); assert(linestr_sv); assert(rsfp)

#  endif
#else
#  ifndef SETUID_SCRIPTS_ARE_SECURE_NOW
a4969 1
#  endif
a4971 3
#  if defined(IAMSUID)
STATIC int	S_fd_on_nosuid_fs(pTHX_ int fd);
#  endif
d4976 4
a4979 2
STATIC SV *	S_incpush_if_exists(pTHX_ SV *dir)
			__attribute__nonnull__(pTHX_1);
d4981 1
a4981 1
	assert(dir)
d4986 1
d4995 1
a4995 1
PERL_CALLCONV GV*	Perl_softref2xv(pTHX_ SV *const sv, const char *const what, const U32 type, SV ***spp)
d5205 1
a5205 1
STATIC I32	S_sv_ncmp(pTHX_ SV *a, SV *b)
d5211 1
a5211 1
STATIC I32	S_sv_i_ncmp(pTHX_ SV *a, SV *b)
d5217 1
a5217 1
STATIC I32	S_amagic_ncmp(pTHX_ SV *a, SV *b)
d5223 1
a5223 1
STATIC I32	S_amagic_i_ncmp(pTHX_ SV *a, SV *b)
d5229 1
a5229 1
STATIC I32	S_amagic_cmp(pTHX_ SV *str1, SV *str2)
d5235 1
a5235 1
STATIC I32	S_amagic_cmp_locale(pTHX_ SV *str1, SV *str2)
d5241 1
a5241 1
STATIC I32	S_sortcv(pTHX_ SV *a, SV *b)
d5247 1
a5247 1
STATIC I32	S_sortcv_xsub(pTHX_ SV *a, SV *b)
d5253 1
a5253 1
STATIC I32	S_sortcv_stacked(pTHX_ SV *a, SV *b)
a5324 6
STATIC I32	S_regcurly(const char *s)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_REGCURLY	\
	assert(s)

d5341 1
a5341 1
STATIC regnode*	S_reg_namedseq(pTHX_ struct RExC_state_t *pRExC_state, UV *valuep)
a5591 5
STATIC void	S_swap_match_buff(pTHX_ regexp * prog)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SWAP_MATCH_BUFF	\
	assert(prog)

d5648 1
a5648 1
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr)
d5656 1
a5656 1
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *tsv, SV *sv)
d5665 1
a5665 1
PERL_CALLCONV int	Perl_sv_kill_backrefs(pTHX_ SV *sv, AV *av)
d5674 1
a5674 1
STATIC char *	S_uiv_2buf(char *buf, IV iv, UV uv, int is_uv, char **peob)
d5681 1
a5681 1
STATIC void	S_sv_unglob(pTHX_ SV* sv)
d5686 1
a5686 1
STATIC void	S_not_a_number(pTHX_ SV *sv)
d5691 1
a5691 1
STATIC I32	S_visit(pTHX_ SVFUNC_t f, U32 flags, U32 mask)
d5696 1
a5696 1
STATIC void	S_sv_del_backref(pTHX_ SV *tsv, SV *sv)
d5702 1
a5702 1
STATIC SV *	S_varname(pTHX_ GV *gv, const char gvtype, PADOFFSET targ, SV *keyname, I32 aindex, int subscript_type)
d5714 1
a5714 1
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *sv, I32 numtype)
d5720 1
a5720 1
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *sv)
d5727 1
a5727 1
STATIC I32	S_expect_number(pTHX_ char** pattern)
d5740 1
a5740 1
STATIC STRLEN	S_sv_pos_u2b_midway(const U8 *const start, const U8 *send, STRLEN uoffset, STRLEN uend)
d5746 1
a5746 1
STATIC STRLEN	S_sv_pos_u2b_cached(pTHX_ SV *sv, MAGIC **mgp, const U8 *const start, const U8 *const send, STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0)
d5754 1
a5754 1
STATIC void	S_utf8_mg_pos_cache_update(pTHX_ SV *sv, MAGIC **mgp, STRLEN byte, STRLEN utf8, STRLEN blen)
d5760 1
a5760 1
STATIC STRLEN	S_sv_pos_b2u_midway(pTHX_ const U8 *s, const U8 *const target, const U8 *end, STRLEN endu)
d5767 1
a5767 1
STATIC char *	S_F0convert(NV nv, char *endbuf, STRLEN *len)
d5783 2
a5784 2
STATIC void *	S_more_bodies(pTHX_ svtype sv_type);
STATIC bool	S_sv_2iuv_common(pTHX_ SV *sv)
d5789 1
a5789 1
STATIC void	S_glob_assign_glob(pTHX_ SV *dstr, SV *sstr, const int dtype)
d5795 1
a5795 1
STATIC void	S_glob_assign_ref(pTHX_ SV *dstr, SV *sstr)
d5801 1
a5801 1
STATIC PTR_TBL_ENT_t *	S_ptr_table_find(PTR_TBL_t *tbl, const void *sv)
d5817 5
d5895 1
a5895 1
STATIC void	S_update_debugger_info(pTHX_ SV *orig_sv, const char *buf, STRLEN len);
d5908 12
d5927 1
a5927 1
STATIC bool	S_feature_is_enabled(pTHX_ const char* name, STRLEN namelen)
d5960 1
a5960 1
STATIC void	S_no_op(pTHX_ const char *what, char *s)
d5974 1
a5974 1
STATIC char *	S_filter_gets(pTHX_ SV *sv, PerlIO *fp, STRLEN append)
d5976 1
a5976 2
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5978 1
a5978 1
	assert(sv); assert(fp)
d5998 1
d6014 1
a6014 1
STATIC void	S_printbuf(pTHX_ const char* fmt, const char* s)
d6054 2
a6055 2
STATIC const char *	S_vdie_croak_common(pTHX_ const char *pat, va_list *args, STRLEN *msglen, I32* utf8);
STATIC bool	S_vdie_common(pTHX_ const char *message, STRLEN msglen, I32 utf8, bool warn);
d6059 1
a6059 1
#if defined(PERL_MEM_LOG) && defined(PERL_MEM_LOG_STDERR)
d6099 1
a6099 1
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dstr, SV *sstr, I32 flags)
d6104 1
a6104 1
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *dstr, const char *sstr, STRLEN len, I32 flags)
d6110 1
a6110 1
PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV* dsv, SV* ssv, I32 flags)
d6115 4
a6118 1
PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *sv, I32 flags)
d6120 1
a6120 1
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS	\
d6123 1
a6123 1
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags)
d6128 1
a6128 1
PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV* dsv, SV* ssv)
d6219 1
a6219 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name(pTHX_ const char *name, HV* typestash, HV* ourstash, bool clone, bool state)
d6229 3
a6231 3
PERL_CALLCONV void	Perl_pad_check_dup(pTHX_ const char* name, bool is_our, const HV* ourstash)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d6233 1
a6233 1
	assert(name); assert(ourstash)
d6235 1
d6276 5
d6307 1
d6313 1
d6371 1
a6371 1
PERL_CALLCONV I32	Perl_hv_placeholders_get(pTHX_ HV *hv)
d6391 1
a6391 1
STATIC SV *	S_find_hash_subscript(pTHX_ HV *hv, SV *val)
d6396 1
a6396 1
STATIC I32	S_find_array_subscript(pTHX_ AV *av, SV *val)
d6401 1
a6401 1
STATIC SV*	S_find_uninit_var(pTHX_ OP* obase, SV* uninit_sv, bool top);
d6484 1
a6484 1
PERL_CALLCONV GV*	Perl_gv_fetchpvn_flags(pTHX_ const char* name, STRLEN len, I32 flags, I32 sv_type)
d6489 1
a6489 1
PERL_CALLCONV GV*	Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, I32 sv_type)
d6494 1
a6494 1
PERL_CALLCONV bool	Perl_is_gv_magical_sv(pTHX_ SV *name, U32 flags)
d6498 1
a6498 1
	assert(name)
d6518 4
a6521 5
PERL_CALLCONV GV*	Perl_gv_SVadd(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_SVADD	\
	assert(gv)

d6533 1
a6533 1
PERL_CALLCONV void	Perl_offer_nice_chunk(pTHX_ void *chunk, U32 chunk_size)
d6622 1
d6628 5
d6638 5
d6704 1
a6704 1
PERL_CALLCONV MADPROP*	Perl_newMADPROP(pTHX_ char key, char type, const void* val, I32 vlen);
d6822 13
@


1.12
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d6 1
a6 1
 *    2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, by Larry Wall and others
d22 1
a22 1
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p)
d32 2
d37 1
a37 1
PERL_CALLCONV void	perl_construct(PerlInterpreter* interp)
d39 2
d42 1
a42 1
PERL_CALLCONV int	perl_destruct(PerlInterpreter* interp)
d44 2
d47 1
a47 1
PERL_CALLCONV void	perl_free(PerlInterpreter* interp)
d49 2
d52 1
a52 1
PERL_CALLCONV int	perl_run(PerlInterpreter* interp)
d54 2
d57 1
a57 1
PERL_CALLCONV int	perl_parse(PerlInterpreter* interp, XSINIT_t xsinit, int argc, char** argv, char** env)
d59 2
d66 1
a66 1
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter* interp, UV flags)
d68 2
d72 1
a72 1
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *interp, UV flags, struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p)
d83 2
d106 5
d117 1
a117 1
PERL_CALLCONV void	Perl_set_context(void *thx)
d119 2
d131 2
d136 2
d147 2
d154 2
d157 1
a157 1
PERL_CALLCONV void	Perl_av_clear(pTHX_ AV* ar)
d159 2
d162 1
a162 1
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV* ar, I32 key, I32 flags)
d164 2
d167 1
a167 1
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV* ar, I32 key)
d170 2
d173 1
a173 1
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV* ar, I32 key)
d175 2
d178 1
a178 1
PERL_CALLCONV AV*	Perl_av_fake(pTHX_ I32 size, SV** svp)
d181 2
d184 1
a184 1
PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV* ar, I32 key, I32 lval)
d187 2
d190 1
a190 1
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV* ar, I32 fill)
d192 2
d195 1
a195 1
PERL_CALLCONV I32	Perl_av_len(pTHX_ const AV* ar)
d198 2
d201 1
a201 1
PERL_CALLCONV AV*	Perl_av_make(pTHX_ I32 size, SV** svp)
d204 2
d207 1
a207 1
PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV* ar)
d209 2
d215 2
d218 1
a218 1
PERL_CALLCONV void	Perl_av_push(pTHX_ AV* ar, SV* val)
d221 2
d224 1
a224 1
PERL_CALLCONV void	Perl_av_reify(pTHX_ AV* ar)
d226 2
d229 1
a229 1
PERL_CALLCONV SV*	Perl_av_shift(pTHX_ AV* ar)
d232 2
d235 1
a235 1
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV* ar, I32 key, SV* val)
d237 2
d240 1
a240 1
PERL_CALLCONV void	Perl_av_undef(pTHX_ AV* ar)
d242 2
d248 2
d251 1
a251 1
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV* ar, I32 num)
d253 2
d256 1
a256 1
PERL_CALLCONV SV**	Perl_av_arylen_p(pTHX_ AV* av)
d258 2
d261 1
a261 1
PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP* left, OP* pat)
d265 2
d279 1
a279 1
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV* av_list)
d281 2
d287 2
d316 3
d320 5
a324 1
			__attribute__nonnull__(pTHX_1);
d329 1
a329 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d332 1
a332 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d337 2
d343 2
d347 3
a349 2
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
d354 2
d360 2
d366 2
d372 2
d379 2
d386 2
d393 2
d400 2
d403 1
a403 1
PERL_CALLCONV int	Perl_fprintf_nocontext(PerlIO* stream, const char* fmt, ...)
d407 2
d410 1
a410 1
PERL_CALLCONV int	Perl_printf_nocontext(const char* fmt, ...)
d413 2
d419 2
d424 2
d429 2
d435 2
d446 2
d451 2
d457 2
d460 1
a460 1
PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV* buffer, int maxlen)
d463 2
d492 2
d497 2
d503 2
d514 2
d520 2
d525 2
d537 2
d543 2
d548 2
d551 1
a551 1
PERL_CALLCONV void	Perl_do_chop(pTHX_ SV* asv, SV* sv)
d554 2
d560 2
d567 2
d573 2
d578 1
a578 1
#if defined(WIN32) || defined(__SYMBIAN32__)
a579 1
			__attribute__nonnull__(pTHX_1)
d582 2
d587 2
d592 2
d597 1
a597 1
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ const char* cmd, int fd, int do_report)
d599 2
d604 1
a604 1
#ifdef PERL_IN_DOIO_C
d607 2
d615 2
d621 2
d627 2
d633 2
d639 2
d645 2
d649 1
a649 1
PERL_CALLCONV void	Perl_do_join(pTHX_ SV* sv, SV* del, SV** mark, SV** sp)
d654 2
d661 2
d668 2
d671 1
a671 1
PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num)
d674 2
d679 2
d687 2
d694 2
d699 2
d705 2
d710 2
d715 2
d720 2
d727 2
d732 2
d743 2
d749 2
d754 2
d757 1
a757 1
PERL_CALLCONV void	Perl_op_dump(pTHX_ const OP* arg)
d759 2
d765 2
d770 2
d775 2
d778 1
a778 1
PERL_CALLCONV char*	Perl_fbm_instr(pTHX_ unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags)
d783 2
d788 2
d792 1
a792 1
PERL_CALLCONV OP*	Perl_fold_constants(pTHX_ OP* arg)
d794 2
d800 2
d805 2
d811 1
a811 1
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char* key, unsigned long *len)
d814 2
d820 2
d827 2
d832 2
d837 2
d843 2
d848 2
d854 2
d860 2
d866 2
d871 2
d876 2
d881 2
d886 2
d891 2
d896 2
d899 1
a899 1
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char* name, I32 add, I32 sv_type)
d901 2
d907 2
d913 2
d919 2
d924 2
d930 2
d936 2
d941 2
d946 2
d949 1
a949 3
PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 flags);
PERL_CALLCONV void	Perl_hv_clear(pTHX_ HV* tb);
PERL_CALLCONV HV *	Perl_hv_copy_hints_hv(pTHX_ HV *const ohv)
d951 2
d954 3
a956 1
PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV* hv, HE* entry)
d958 2
d961 1
a961 1
/* PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV* tb, const char* key, I32 klen, I32 flags)
d963 2
d966 1
a966 1
/* PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV* tb, SV* key, I32 flags, U32 hash)
d968 2
d971 1
a971 1
/* PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, I32 klen)
d974 2
d977 1
a977 1
/* PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV* tb, SV* key, U32 hash)
d980 2
d983 1
a983 1
/* PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV* tb, const char* key, I32 klen, I32 lval)
d985 2
d988 1
a988 1
/* PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV* tb, SV* key, I32 lval, U32 hash)
d990 2
d993 1
a993 1
PERL_CALLCONV void*	Perl_hv_common(pTHX_ HV* tb, SV* keysv, const char* key, STRLEN klen, int flags, int action, SV* val, U32 hash);
d996 2
d999 1
a999 1
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV* hv, HE* entryK)
d1001 2
d1004 1
a1004 1
PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV* tb)
d1006 2
d1013 2
d1019 2
d1022 1
a1022 1
/* PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV* tb)
d1025 2
d1028 1
a1028 1
PERL_CALLCONV SV*	Perl_hv_iternextsv(pTHX_ HV* hv, char** key, I32* retlen)
d1033 2
d1036 1
a1036 1
PERL_CALLCONV HE*	Perl_hv_iternext_flags(pTHX_ HV* tb, I32 flags)
d1039 2
d1042 1
a1042 1
PERL_CALLCONV SV*	Perl_hv_iterval(pTHX_ HV* tb, HE* entry)
d1046 2
d1049 1
a1049 1
PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV* hv, IV newmax)
d1051 2
d1054 1
a1054 1
/* PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV* hv, GV* gv, int how)
d1056 2
d1063 4
a1066 4
/* PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV* tb, const char* key, I32 klen, SV* val, U32 hash); */
/* PERL_CALLCONV HE*	Perl_hv_store_ent(pTHX_ HV* tb, SV* key, SV* val, U32 hash); */
/* PERL_CALLCONV SV**	Perl_hv_store_flags(pTHX_ HV* tb, const char* key, I32 klen, SV* val, U32 hash, int flags); */
PERL_CALLCONV void	Perl_hv_undef(pTHX_ HV* tb);
d1071 2
d1078 2
d1081 1
a1081 1
PERL_CALLCONV I32	Perl_ibcmp_utf8(pTHX_ const char* a, char **pe1, UV l1, bool u1, const char* b, char **pe2, UV l2, bool u2)
d1084 2
d1092 2
d1099 2
d1108 2
d1113 2
d1122 2
d1199 2
d1205 2
d1211 2
d1217 2
d1276 1
a1276 1
PERL_CALLCONV STRLEN	Perl_is_utf8_char(pTHX_ const U8 *p)
d1278 2
d1283 2
d1288 2
d1293 2
d1299 2
d1305 2
d1311 2
d1317 2
d1323 2
d1329 2
d1335 2
d1341 2
d1347 2
d1353 2
d1359 2
d1365 2
d1371 2
d1377 2
d1383 2
d1389 2
d1392 1
a1392 1
PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP* arg)
d1394 2
d1397 1
a1397 1
PERL_CALLCONV I32	Perl_keyword(pTHX_ const char* d, I32 len, bool all_keywords)
d1400 2
d1408 2
d1413 2
d1420 2
d1427 2
d1432 2
d1435 1
a1435 1
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP* arg, I32 lexical)
d1437 2
d1443 2
d1450 2
d1457 2
d1462 2
d1469 2
d1476 2
d1482 2
d1488 2
d1494 8
d1506 2
d1512 2
d1518 2
d1524 2
d1530 2
d1536 2
d1542 2
d1548 2
d1554 2
d1560 2
d1566 2
d1572 2
d1578 2
d1584 2
d1590 2
d1596 2
d1602 2
d1605 1
a1605 1
PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV* sv, MAGIC* mg, SV* key)
d1609 2
d1615 2
d1621 2
d1628 2
d1634 2
d1640 2
d1646 2
d1652 2
d1655 1
d1659 2
d1662 7
d1672 2
d1678 2
d1684 2
a1685 4

PERL_CALLCONV int	Perl_magic_setfm(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1690 2
d1696 2
d1699 1
d1703 2
d1706 1
d1710 2
d1716 2
d1722 2
d1728 2
d1734 2
d1740 2
d1746 2
d1752 2
d1758 2
d1764 2
d1770 2
d1776 2
d1782 2
d1788 2
d1793 2
d1801 2
d1807 2
d1814 2
d1819 2
d1824 2
a1827 1
			__attribute__nonnull__(pTHX_1)
d1829 2
a1832 1
			__attribute__nonnull__(pTHX_1)
d1834 2
d1839 2
d1842 1
a1842 1
PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV* sv, SV* nsv, const char* key, I32 klen)
d1845 2
d1851 2
d1859 2
d1864 2
d1869 2
d1874 2
d1879 2
d1884 2
d1887 1
a1887 1
PERL_CALLCONV void	Perl_mini_mktime(pTHX_ struct tm *pm)
d1889 2
d1896 2
d1901 2
d1906 2
d1913 2
d1920 2
d1940 2
d1947 2
d1955 2
d1961 2
d1968 2
d2006 2
d2019 2
d2027 2
d2030 1
a2030 1
PERL_CALLCONV OP*	Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP* left, OP* right)
d2035 2
d2042 2
d2059 2
d2067 2
d2082 2
d2085 1
a2085 1
PERL_CALLCONV CV*	Perl_newXS(pTHX_ const char* name, XSUBADDR_t f, const char* filename)
d2088 2
d2091 2
a2092 3
PERL_CALLCONV AV*	Perl_newAV(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2098 2
d2113 2
d2120 2
d2131 2
d2134 2
a2135 3
PERL_CALLCONV HV*	Perl_newHV(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2137 1
a2137 1
PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV* hv)
d2154 2
d2170 2
d2177 2
d2188 2
d2195 2
d2218 4
d2235 2
d2242 2
d2247 2
d2266 2
d2277 1
a2277 1
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *vstr, const char *end, SV *sv)
d2281 2
d2284 1
a2284 1
PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *vstr, SV *sv, bool qv)
d2287 2
d2292 2
d2297 2
d2302 2
d2307 2
d2312 2
d2317 2
d2320 1
a2320 1
PERL_CALLCONV int	Perl_vcmp(pTHX_ SV *lvs, SV *rvs)
d2323 2
d2328 2
d2337 2
d2343 2
d2350 2
d2356 2
d2363 2
d2369 2
d2376 2
d2382 2
d2391 1
a2391 1
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV* pattern, IO *io)
d2394 2
d2401 1
a2401 1
PERL_CALLCONV void*	Perl_reentrant_retry(const char*, ...)
d2403 2
d2411 2
d2416 2
d2421 2
d2424 1
a2424 1
PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, I32 flags)
d2426 2
d2432 2
d2437 2
d2442 2
d2445 1
a2445 1
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char* name, I32 create)
d2447 2
d2450 1
a2450 1
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char* name, I32 create)
d2452 2
d2455 1
a2455 1
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char* name, I32 create)
d2457 2
d2462 2
d2467 2
d2475 2
d2484 2
d2494 2
d2503 2
d2511 2
d2514 1
a2514 1
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP* pm, OP* expr, bool isreg)
d2517 2
d2524 2
d2534 2
d2539 2
d2542 1
a2542 1
PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ const regexp *prog, const struct regnode *n, bool doinit, SV **listsvp, SV **altsvp)
d2544 2
d2553 8
d2562 1
a2562 2
PERL_CALLCONV void	Perl_pregfree(pTHX_ struct regexp* r);
PERL_CALLCONV struct regexp*	Perl_reg_temp_copy(pTHX_ struct regexp* r)
d2564 2
a2566 1
PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP * const r);
d2569 2
d2576 2
d2582 2
d2587 2
d2590 1
a2590 1
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
d2594 2
d2597 1
a2597 1
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP * const rx)
d2599 2
d2602 1
a2602 1
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP * const rx, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, void* data, U32 flags)
d2608 2
d2612 1
a2612 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2617 2
d2622 2
d2628 2
d2634 2
d2639 2
d2644 2
d2649 2
d2654 2
d2660 2
d2665 2
d2671 2
d2677 2
d2684 2
d2690 2
d2699 2
d2704 1
a2704 1
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* t2)
d2706 2
d2712 2
d2715 1
a2715 1
PERL_CALLCONV void	Perl_rxres_restore(pTHX_ void** rsp, REGEXP* prx)
d2718 2
d2721 1
a2721 1
PERL_CALLCONV void	Perl_rxres_save(pTHX_ void** rsp, REGEXP* prx)
d2724 2
d2731 2
d2751 2
d2758 2
d2766 2
d2772 2
d2777 2
d2782 2
d2787 2
d2790 1
a2790 1
PERL_CALLCONV void	Perl_save_delete(pTHX_ HV* hv, char* key, I32 klen)
d2793 2
d2798 2
d2802 3
a2804 3
PERL_CALLCONV void	Perl_save_freesv(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_save_freeop(pTHX_ OP* o);
PERL_CALLCONV void	Perl_save_freepv(pTHX_ char* pv);
d2807 2
d2812 2
d2817 2
d2822 2
d2827 2
d2830 2
a2831 1
PERL_CALLCONV void	Perl_save_helem(pTHX_ HV* hv, SV *key, SV **sptr)
d2835 2
d2840 2
d2845 2
d2850 2
d2855 2
d2860 2
d2865 2
d2868 1
a2868 1
PERL_CALLCONV void	Perl_save_iv(pTHX_ IV* iv)
d2870 2
d2875 2
d2880 7
d2888 1
a2888 1
PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv)
d2890 2
d2893 1
a2893 2
PERL_CALLCONV void	Perl_save_nogv(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_op(pTHX);
d2896 2
d2901 2
d2904 1
a2904 1
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void* pptr)
d2906 2
d2911 1
d2914 2
d2919 2
d2922 6
d2934 2
d2940 2
d2946 2
d2952 2
d2958 2
d2962 1
a2962 1
PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV *bigstr, SV *littlestr, I32 start_shift, I32 end_shift, I32 *oldposp, I32 last)
d2966 2
d2972 2
d2979 2
d2992 2
d2998 2
d3003 2
d3009 2
d3014 2
d3017 1
a3017 1
#ifdef PERL_IN_SV_C
d3020 2
d3025 2
d3029 2
a3030 6
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);

d3032 1
a3032 3
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

d3035 2
d3038 2
a3039 6
/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags)
			__attribute__nonnull__(pTHX_1);

d3042 2
d3047 2
d3052 2
d3055 2
a3056 6
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);

d3059 2
d3064 2
d3069 2
d3072 1
a3072 1
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *len)
d3075 2
d3078 1
a3078 1
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *len)
d3081 2
d3084 1
a3084 1
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *len)
d3087 2
d3093 2
d3098 2
d3104 2
d3111 2
d3117 2
d3121 3
a3123 2
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3125 1
a3125 1
/* PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV* sv, const char* ptr, STRLEN len)
d3128 2
d3131 1
a3131 1
/* PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV* dsv, SV* ssv)
d3133 2
d3138 2
d3145 2
d3148 2
a3149 8
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV* sv1, SV* sv2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV* sv1, SV* sv2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d3154 2
d3158 1
a3158 1
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV* sv, OP** startp, const char* code, PAD** padp)
d3163 2
d3168 2
d3171 1
a3171 3
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

d3174 2
d3181 2
d3188 2
d3195 2
d3202 2
d3207 2
d3210 6
a3215 2
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d3217 1
a3217 1
PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV* bigsv, STRLEN offset, STRLEN len, const char* little, STRLEN littlelen)
d3220 2
d3225 2
d3233 2
d3238 2
d3252 2
d3257 2
d3262 2
d3267 2
d3272 2
d3278 2
d3287 2
d3293 2
d3299 2
d3305 2
d3312 2
d3318 2
d3323 2
d3328 2
d3333 2
d3338 2
d3343 2
d3348 2
d3353 2
d3358 2
d3364 2
d3369 2
d3374 2
d3377 1
a3377 1
/* PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV* dsv, SV* ssv)
d3379 2
d3384 2
d3390 2
d3395 2
d3400 2
d3403 1
a3403 1
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV* sv, U32 flags)
d3405 2
d3410 2
d3415 2
d3420 2
d3425 2
d3431 2
d3437 2
d3443 2
d3450 2
d3456 2
d3462 2
d3471 2
d3477 2
d3483 2
d3489 2
d3495 2
d3501 2
d3510 2
d3518 2
d3526 2
d3532 2
d3540 2
d3547 2
d3555 2
d3563 2
d3570 2
d3576 2
d3582 2
d3588 2
d3593 2
d3598 2
d3605 2
d3611 2
d3618 2
d3625 2
d3631 2
d3638 2
d3643 2
d3648 2
d3654 2
d3661 2
d3666 2
d3671 2
d3676 2
d3681 2
d3693 2
d3698 2
d3704 2
d3709 2
d3714 2
d3719 2
d3724 2
d3729 2
d3734 1
a3734 1
PERL_CALLCONV void	Perl_parser_free(pTHX_ const yy_parser *)
d3736 2
d3741 2
d3747 2
d3752 2
d3774 2
d3784 2
d3790 2
d3794 3
a3796 2
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d3801 2
d3804 1
a3804 1
/* PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dstr, SV *sstr)
d3806 2
d3813 2
d3819 2
d3824 2
d3829 2
d3834 2
d3839 2
d3844 2
d3850 2
d3855 2
d3860 2
d3869 2
d3875 2
d3881 2
d3888 2
d3894 2
d3900 2
d3906 2
d3912 2
d3918 2
d3923 2
d3928 2
d3933 2
d3941 2
d3947 2
d3953 2
d3959 2
d3965 2
d3971 2
d3976 2
d3981 5
d3989 2
d3994 2
d3999 2
d4004 2
d4010 2
d4016 2
d4032 2
d4040 2
d4046 2
d4054 2
d4060 2
d4066 2
d4072 2
d4078 2
d4083 2
d4092 2
d4098 2
d4104 2
d4111 2
a4114 1
			__attribute__nonnull__(pTHX_1)
d4116 2
d4126 3
a4128 2
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d4133 2
d4138 2
d4148 2
d4158 1
a4158 1
PERL_CALLCONV const char *	Perl_custom_op_name(pTHX_ const OP* op)
d4161 2
d4164 1
a4164 1
PERL_CALLCONV const char *	Perl_custom_op_desc(pTHX_ const OP* op)
d4167 2
d4187 2
d4193 2
d4199 2
d4205 2
d4211 2
d4217 2
d4225 2
d4230 2
d4238 2
d4251 2
d4256 2
d4267 2
d4274 2
d4278 1
a4278 1
STATIC HEK*	S_share_hek_flags(pTHX_ const char* sv, I32 len, U32 hash, int flags)
d4281 2
d4288 2
d4293 2
d4296 2
a4297 2
STATIC SV*	S_hv_delete_common(pTHX_ HV* tb, SV* keysv, const char* key, STRLEN klen, int k_flags, I32 d_flags, U32 hash);
STATIC void	S_clear_placeholders(pTHX_ HV* hb, U32 items)
d4299 2
d4304 2
d4312 2
d4319 2
d4326 2
d4329 1
a4329 3
STATIC void	S_restore_magic(pTHX_ const void *p)
			__attribute__nonnull__(pTHX_1);

d4332 2
d4342 2
d4348 2
d4354 2
d4360 2
d4366 2
d4372 2
d4378 2
d4384 2
d4390 2
d4396 2
d4402 2
d4408 2
d4414 2
d4420 2
d4426 2
d4432 2
d4438 2
d4444 2
d4450 2
d4456 2
d4462 2
d4468 2
d4474 2
d4480 2
d4486 2
d4492 2
d4498 2
a4499 4

PERL_CALLCONV OP*	Perl_ck_retarget(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d4504 2
d4510 2
d4516 2
d4522 2
d4528 2
d4534 2
d4540 2
d4546 2
d4552 2
d4558 2
d4564 2
d4570 2
d4576 2
d4582 2
d4588 2
d4597 2
d4603 2
d4609 2
d4614 2
d4620 2
d4626 6
d4636 2
d4641 2
d4646 2
d4652 2
d4657 2
d4662 2
d4668 2
d4675 2
d4682 2
d4687 2
d4693 2
d4700 2
d4707 2
d4712 2
d4717 2
d4725 2
d4736 2
d4744 2
d4750 2
d4761 2
d4764 1
a4764 1
STATIC void	S_forbid_setid(pTHX_ const char flag, const int suidscript);
d4772 2
d4780 1
a4780 1
STATIC int	S_open_script(pTHX_ const char *scriptname, bool dosearch, SV *sv, int *suidscript, PerlIO **rsfpp)
d4785 2
d4790 2
d4793 11
a4803 1
STATIC void	S_validate_suid(pTHX_ const char *validarg, const char *scriptname, int fdscript, int suidscript, SV* linestr_sv, PerlIO *rsfp)
d4806 12
a4817 2
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
d4819 2
d4831 2
d4840 2
d4850 2
d4861 2
d4869 2
d4874 2
d4879 2
d4884 2
d4890 2
d4896 2
d4899 1
a4899 1
STATIC const char *	S_group_end(pTHX_ const char *pat, const char *patend, char ender)
d4902 2
d4905 1
a4905 1
STATIC const char *	S_get_num(pTHX_ const char *ppat, I32 *lenptr)
d4909 2
d4915 2
d4921 2
d4927 2
d4934 2
d4949 2
d4955 2
d4970 2
d4979 2
d4987 2
d4994 2
d5001 2
d5008 2
d5014 2
d5017 1
a5017 1
STATIC PMOP*	S_make_matcher(pTHX_ regexp* re)
d5020 2
d5027 2
d5032 2
d5043 2
d5049 2
d5058 2
d5064 2
d5070 2
d5076 2
d5079 1
a5079 1
STATIC I32	S_amagic_cmp(pTHX_ SV *a, SV *b)
d5082 2
d5085 1
a5085 1
STATIC I32	S_amagic_cmp_locale(pTHX_ SV *a, SV *b)
d5088 2
d5094 2
d5100 2
d5106 2
a5109 1
			__attribute__nonnull__(pTHX_1)
d5111 2
d5121 2
d5129 2
d5135 2
d5141 1
a5141 1
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t *state, I32 paren, I32 *flagp, U32 depth)
d5144 2
d5147 1
a5147 1
STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t *state, U8 op, U32 arg)
d5149 2
d5152 1
a5152 1
STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t *state, I32 *flagp, U32 depth)
d5155 2
d5158 1
a5158 1
STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t *state, I32 *flagp, I32 first, U32 depth)
d5161 2
d5164 1
a5164 1
STATIC STRLEN	S_reguni(pTHX_ const struct RExC_state_t *state, UV uv, char *s)
d5167 2
d5170 1
a5170 1
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *state, U32 depth)
d5172 2
d5175 1
a5175 1
STATIC I32	S_regcurly(const char *)
d5178 2
d5181 1
a5181 1
STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t *state, U8 op)
d5183 2
d5188 2
d5191 1
a5191 1
STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t *state, I32 *flagp, U32 depth)
d5194 2
d5197 1
a5197 1
STATIC regnode*	S_reg_namedseq(pTHX_ struct RExC_state_t *state, UV *valuep)
d5199 2
d5202 1
a5202 1
STATIC void	S_reginsert(pTHX_ struct RExC_state_t *state, U8 op, regnode *opnd, U32 depth)
d5205 2
d5208 1
a5208 1
STATIC void	S_regtail(pTHX_ struct RExC_state_t *state, regnode *p, const regnode *val, U32 depth)
d5212 2
d5215 1
a5215 1
STATIC SV *	S_reg_scan_name(pTHX_ struct RExC_state_t *state, U32 flags)
d5217 2
d5220 1
a5220 1
STATIC U32	S_join_exact(pTHX_ struct RExC_state_t *state, regnode *scan, I32 *min, U32 flags, regnode *val, U32 depth)
d5224 2
d5227 1
a5227 1
STATIC char *	S_regwhite(struct RExC_state_t *state, char *p)
d5231 2
d5234 1
a5234 1
STATIC char *	S_nextchar(pTHX_ struct RExC_state_t *state)
d5236 2
d5239 1
a5239 1
STATIC bool	S_reg_skipcomment(pTHX_ struct RExC_state_t *state)
d5241 2
d5244 1
a5244 1
STATIC void	S_scan_commit(pTHX_ const struct RExC_state_t* state, struct scan_data_t *data, I32 *minlenp, int is_inf)
d5248 2
d5251 1
a5251 1
STATIC void	S_cl_anything(const struct RExC_state_t* state, struct regnode_charclass_class *cl)
d5254 2
d5260 2
d5263 1
a5263 1
STATIC void	S_cl_init(const struct RExC_state_t* state, struct regnode_charclass_class *cl)
d5266 2
d5269 1
a5269 1
STATIC void	S_cl_init_zero(const struct RExC_state_t* state, struct regnode_charclass_class *cl)
d5272 2
d5278 2
d5281 1
a5281 1
STATIC void	S_cl_or(const struct RExC_state_t* state, struct regnode_charclass_class *cl, const struct regnode_charclass_class *or_with)
d5285 2
d5288 1
a5288 1
STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t* state, regnode **scanp, I32 *minlenp, I32 *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U8* recursed, struct regnode_charclass_class *and_withp, U32 flags, U32 depth)
d5294 2
d5297 1
a5297 1
STATIC U32	S_add_data(struct RExC_state_t* state, U32 n, const char *s)
d5301 2
d5308 2
d5311 1
a5311 1
STATIC I32	S_regpposixcc(pTHX_ struct RExC_state_t* state, I32 value)
d5313 2
d5316 1
a5316 1
STATIC void	S_checkposixcc(pTHX_ struct RExC_state_t* state)
d5318 2
d5321 1
a5321 1
STATIC I32	S_make_trie(pTHX_ struct RExC_state_t* state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
d5327 2
d5330 1
a5330 1
STATIC void	S_make_trie_failtable(pTHX_ struct RExC_state_t* state, regnode *source, regnode *node, U32 depth)
d5334 2
d5344 2
d5349 2
d5355 2
d5361 2
d5367 2
d5370 1
a5370 1
STATIC U8	S_regtail_study(pTHX_ struct RExC_state_t *state, regnode *p, const regnode *val, U32 depth)
d5374 2
d5385 2
d5392 2
d5399 2
d5406 2
d5412 2
d5415 1
a5415 1
STATIC U8*	S_reghop3(U8 *pos, I32 off, const U8 *lim)
d5419 2
d5423 1
a5423 1
STATIC U8*	S_reghop4(U8 *pos, I32 off, const U8 *llim, const U8 *rlim)
d5428 2
d5432 1
a5432 1
STATIC U8*	S_reghopmaybe3(U8 *pos, I32 off, const U8 *lim)
d5436 2
d5445 2
d5450 2
d5455 2
d5460 2
d5463 1
a5463 1
STATIC I32	S_reg_check_named_buff_matched(pTHX_ const regexp *rex, const regnode *prog)
d5467 2
d5477 2
d5480 1
a5480 1
STATIC void	S_debug_start_match(pTHX_ const regexp *prog, const bool do_utf8, const char *start, const char *end, const char *blurb)
d5485 2
d5495 2
d5503 2
d5511 2
d5520 2
d5529 2
d5539 2
d5544 2
d5549 2
d5554 2
d5557 1
a5557 1
STATIC void	S_sv_del_backref(pTHX_ SV *target, SV *ref)
d5560 2
d5569 2
d5574 1
d5577 8
d5586 1
d5591 2
d5598 2
d5604 2
d5612 2
d5618 2
d5625 2
d5631 2
d5639 2
d5647 2
d5653 2
d5659 2
d5664 3
a5666 2
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d5673 1
a5673 1
STATIC char*	S_force_version(pTHX_ char *start, int guessing)
d5675 2
d5680 2
d5685 2
d5692 2
d5698 2
d5704 2
d5711 2
d5717 2
d5723 2
d5729 2
d5735 2
d5741 2
d5748 2
d5755 2
d5761 2
d5768 2
d5773 2
d5778 2
d5783 2
d5788 2
d5793 2
d5798 2
d5806 2
d5822 2
d5828 2
d5834 2
d5840 2
d5848 2
d5853 5
a5857 1
STATIC int	S_tokereport(pTHX_ I32 rv);
d5861 2
d5868 2
a5869 1
STATIC bool	S_isa_lookup(pTHX_ HV *stash, const char * const name, const HV * const name_stash)
d5871 7
d5885 2
d5894 2
d5903 9
d5922 2
d5930 2
d5936 2
d5943 1
a5943 1
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV* dsv, SV* ssv, I32 flags)
d5945 2
d5948 1
a5948 1
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV* sv, const char* ptr, STRLEN len, I32 flags)
d5951 2
d5956 2
d5961 2
d5966 2
d5972 2
d5978 2
d5984 1
a5984 2
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dsv, SV* ssv)
			__attribute__nonnull__(pTHX_1)
d5986 2
d6002 1
a6002 3
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, int cnt)
			__attribute__nonnull__(pTHX_2);

d6004 1
a6004 1
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *buf, Size_t count)
d6006 2
d6009 1
a6009 1
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *buf, Size_t count)
d6011 2
d6014 1
a6014 1
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *buf, Size_t count)
d6016 2
d6043 1
a6043 1
#ifdef PERL_IN_DEB_C
d6046 2
d6057 2
d6062 2
d6067 2
d6073 2
d6079 2
d6087 2
d6094 2
d6100 2
d6113 2
d6120 2
d6133 2
d6137 6
a6142 2
PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV* sv, U32 mask, U32 val);
PERL_CALLCONV void	Perl_hv_assert(pTHX_ HV* tb)
d6144 2
d6148 1
a6148 1
PERL_CALLCONV SV*	Perl_hv_scalar(pTHX_ HV* hv)
d6151 2
d6154 1
a6154 1
PERL_CALLCONV I32*	Perl_hv_riter_p(pTHX_ HV* hv)
d6157 2
d6160 1
a6160 1
PERL_CALLCONV HE**	Perl_hv_eiter_p(pTHX_ HV* hv)
d6163 2
d6166 1
a6166 1
PERL_CALLCONV void	Perl_hv_riter_set(pTHX_ HV* hv, I32 riter)
d6168 2
d6171 1
a6171 1
PERL_CALLCONV void	Perl_hv_eiter_set(pTHX_ HV* hv, HE* eiter)
d6173 2
d6176 1
a6176 1
PERL_CALLCONV void	Perl_hv_name_set(pTHX_ HV* hv, const char *name, U32 len, U32 flags)
d6178 2
d6181 1
a6181 1
PERL_CALLCONV AV**	Perl_hv_backreferences_p(pTHX_ HV* hv)
d6183 2
d6187 1
a6187 1
PERL_CALLCONV void	Perl_hv_kill_backrefs(pTHX_ HV* hv)
d6189 2
d6193 1
a6193 1
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV* hb)
d6195 2
d6198 1
a6198 1
PERL_CALLCONV I32*	Perl_hv_placeholders_p(pTHX_ HV* hv)
d6201 2
d6204 1
a6204 1
PERL_CALLCONV I32	Perl_hv_placeholders_get(pTHX_ HV* hv)
d6207 2
d6210 1
a6210 1
PERL_CALLCONV void	Perl_hv_placeholders_set(pTHX_ HV* hv, I32 ph)
d6212 2
d6216 1
a6216 1
PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV* hv, MAGIC* mg)
d6219 2
d6226 2
d6231 2
d6313 2
d6319 2
d6324 2
d6330 2
d6334 1
a6334 1
PERL_CALLCONV bool	Perl_stashpv_hvname_match(pTHX_ const COP *cop, const HV *hv)
d6338 2
d6345 2
d6353 2
d6363 2
d6369 2
d6377 2
d6386 2
d6392 2
d6402 2
d6407 2
d6413 2
d6430 2
d6438 2
d6446 2
d6452 2
d6458 2
d6463 2
d6468 2
d6475 2
d6481 2
d6486 2
d6491 2
d6497 2
d6500 1
a6500 1
PERL_CALLCONV void	Perl_op_xmldump(pTHX_ const OP* arg)
d6502 2
d6507 1
a6507 1
PERL_CALLCONV void	Perl_token_free(pTHX_ TOKEN* arg)
d6509 2
d6512 1
a6512 1
PERL_CALLCONV void	Perl_token_getmad(pTHX_ TOKEN* arg, OP* o, char slot)
d6514 2
d6524 2
d6533 2
d6538 2
d6543 2
d6561 2
d6566 29
d6597 2
d6604 2
d6610 2
d6614 1
a6614 4
STATIC AV*	S_mro_get_linear_isa_c3(pTHX_ HV* stash, I32 level)
			__attribute__nonnull__(pTHX_1);

STATIC AV*	S_mro_get_linear_isa_dfs(pTHX_ HV* stash, I32 level)
d6616 2
d6622 2
d6627 2
d6634 2
d6641 2
a6644 1

@


1.11
log
@merge in perl 5.8.8
@
text
@d6 1
a6 1
 *    2000, 2001, 2002, 2003, 2004, 2005, 2006, by Larry Wall and others
d13 1
a13 1
 * pp.sym, intrpvar.h, perlvars.h and thrdvar.h.
d22 11
a32 1
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p);
d35 15
a49 5
PERL_CALLCONV void	perl_construct(PerlInterpreter* interp);
PERL_CALLCONV int	perl_destruct(PerlInterpreter* interp);
PERL_CALLCONV void	perl_free(PerlInterpreter* interp);
PERL_CALLCONV int	perl_run(PerlInterpreter* interp);
PERL_CALLCONV int	perl_parse(PerlInterpreter* interp, XSINIT_t xsinit, int argc, char** argv, char** env);
d54 3
a56 1
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter* interp, UV flags);
d58 12
a69 1
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *interp, UV flags, struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p);
d88 2
a89 1
			__attribute__warn_unused_result__;
d96 3
a98 1
PERL_CALLCONV void	Perl_set_context(void *thx);
d105 7
a111 2
PERL_CALLCONV SV*	Perl_amagic_call(pTHX_ SV* left, SV* right, int method, int dir);
PERL_CALLCONV bool	Perl_Gv_AMupdate(pTHX_ HV* stash);
d117 15
a131 11
PERL_CALLCONV I32	Perl_apply(pTHX_ I32 type, SV** mark, SV** sp);
PERL_CALLCONV void	Perl_apply_attrs_string(pTHX_ char *stashpv, CV *cv, char *attrstr, STRLEN len);
PERL_CALLCONV SV*	Perl_avhv_delete_ent(pTHX_ AV *ar, SV* keysv, I32 flags, U32 hash);
PERL_CALLCONV bool	Perl_avhv_exists_ent(pTHX_ AV *ar, SV* keysv, U32 hash);
PERL_CALLCONV SV**	Perl_avhv_fetch_ent(pTHX_ AV *ar, SV* keysv, I32 lval, U32 hash);
PERL_CALLCONV SV**	Perl_avhv_store_ent(pTHX_ AV *ar, SV* keysv, SV* val, U32 hash);
PERL_CALLCONV HE*	Perl_avhv_iternext(pTHX_ AV *ar);
PERL_CALLCONV SV*	Perl_avhv_iterval(pTHX_ AV *ar, HE* entry);
PERL_CALLCONV HV*	Perl_avhv_keys(pTHX_ AV *ar);
PERL_CALLCONV void	Perl_av_clear(pTHX_ AV* ar);
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV* ar, I32 key, I32 flags);
d133 5
a137 1
			__attribute__warn_unused_result__;
a138 1
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV* ar, I32 key);
d140 2
a141 1
			__attribute__warn_unused_result__;
d144 5
a148 1
			__attribute__warn_unused_result__;
d150 3
a152 3
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV* ar, I32 fill);
PERL_CALLCONV I32	Perl_av_len(pTHX_ AV* ar)
			__attribute__warn_unused_result__;
d155 16
a170 1
			__attribute__warn_unused_result__;
a171 3
PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV* ar);
PERL_CALLCONV void	Perl_av_push(pTHX_ AV* ar, SV* val);
PERL_CALLCONV void	Perl_av_reify(pTHX_ AV* ar);
d173 18
a190 1
			__attribute__warn_unused_result__;
a191 3
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV* ar, I32 key, SV* val);
PERL_CALLCONV void	Perl_av_undef(pTHX_ AV* ar);
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV* ar, I32 num);
d193 3
a195 1
			__attribute__warn_unused_result__;
d208 6
a213 3
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV* av_list);
PERL_CALLCONV bool	Perl_cando(pTHX_ Mode_t mode, Uid_t effective, Stat_t* statbufp)
			__attribute__warn_unused_result__;
a231 3
#if defined(USE_5005THREADS)
PERL_CALLCONV MAGIC*	Perl_condpair_magic(pTHX_ SV *sv);
#endif
d235 1
d238 1
a238 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d241 2
a242 1
			__attribute__noreturn__;
d247 2
a248 1
			__attribute__format__(__printf__,1,2);
d251 2
a252 1
			__attribute__format__(__printf__,1,2);
d255 2
a256 1
			__attribute__format__(__printf__,1,2);
d259 6
a264 1
			__attribute__format__(__printf__,1,2);
a265 1
PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...);
d267 2
a268 1
			__attribute__format__(__printf__,1,2);
d271 2
a272 1
			__attribute__format__(__printf__,1,2);
d275 2
a276 1
			__attribute__format__(__printf__,2,3);
d279 2
a280 1
			__attribute__format__(__printf__,1,2);
d283 3
a285 1
			__attribute__format__(__printf__,2,3);
d288 3
a290 1
			__attribute__format__(__printf__,2,3);
d293 3
a295 1
			__attribute__format__(__printf__,2,3);
d298 3
a300 1
			__attribute__format__(__printf__,2,3);
d303 3
a305 1
			__attribute__format__(__printf__,2,3);
d308 2
a309 1
			__attribute__format__(__printf__,1,2);
d312 13
a324 2
PERL_CALLCONV void	Perl_cv_ckproto(pTHX_ CV* cv, GV* gv, char* p);
PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto);
d328 1
a328 1
PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ OP* o, CV* cv)
d331 6
a336 2
PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv);
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cx);
d338 3
a340 1
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp);
d342 2
a343 1
			__attribute__warn_unused_result__;
d353 1
a353 1
PERL_CALLCONV char*	Perl_get_no_modify(pTHX)
d369 5
a373 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
a374 1
PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args);
d376 3
a378 1
PERL_CALLCONV I32	Perl_debop(pTHX_ OP* o);
d381 14
a394 3
PERL_CALLCONV char*	Perl_delimcpy(pTHX_ char* to, char* toend, char* from, char* fromend, int delim, I32* retlen);
PERL_CALLCONV void	Perl_deprecate(pTHX_ char* s);
PERL_CALLCONV void	Perl_deprecate_old(pTHX_ char* s);
d396 1
a396 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d399 1
a399 1
PERL_CALLCONV OP*	Perl_die_where(pTHX_ char* message, STRLEN msglen);
d401 15
a415 4
PERL_CALLCONV bool	Perl_do_aexec(pTHX_ SV* really, SV** mark, SV** sp);
PERL_CALLCONV bool	Perl_do_aexec5(pTHX_ SV* really, SV** mark, SV** sp, int fd, int flag);
PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int mode);
PERL_CALLCONV void	Perl_do_chop(pTHX_ SV* asv, SV* sv);
d417 26
a442 6
PERL_CALLCONV bool	Perl_do_eof(pTHX_ GV* gv);
PERL_CALLCONV bool	Perl_do_exec(pTHX_ char* cmd);
#if defined(WIN32)
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp);
PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd);
PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd);
d445 3
a447 1
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ char* cmd, int fd, int flag);
d450 5
d456 31
a486 8
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp);
#endif
PERL_CALLCONV void	Perl_do_join(pTHX_ SV* sv, SV* del, SV** mark, SV** sp);
d488 16
a503 5
PERL_CALLCONV bool	Perl_do_open(pTHX_ GV* gv, char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp);
PERL_CALLCONV bool	Perl_do_open9(pTHX_ GV *gv, char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num);
PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num);
PERL_CALLCONV void	Perl_do_pipe(pTHX_ SV* sv, GV* rgv, GV* wgv);
PERL_CALLCONV bool	Perl_do_print(pTHX_ SV* sv, PerlIO* fp);
d507 3
a509 1
PERL_CALLCONV I32	Perl_do_chomp(pTHX_ SV* sv);
d511 7
a517 2
PERL_CALLCONV void	Perl_do_sprintf(pTHX_ SV* sv, I32 len, SV** sarg);
PERL_CALLCONV Off_t	Perl_do_sysseek(pTHX_ GV* gv, Off_t pos, int whence);
d519 19
a537 1
			__attribute__warn_unused_result__;
a538 5
PERL_CALLCONV I32	Perl_do_trans(pTHX_ SV* sv);
PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, I32 offset, I32 size);
PERL_CALLCONV void	Perl_do_vecset(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_do_vop(pTHX_ I32 optype, SV* sv, SV* left, SV* right);
PERL_CALLCONV OP*	Perl_dofile(pTHX_ OP* term);
d545 3
a547 1
PERL_CALLCONV void	Perl_dump_fds(pTHX_ char* s);
d549 9
a557 3
PERL_CALLCONV void	Perl_dump_form(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_op_dump(pTHX_ OP* arg);
d559 9
a567 3
PERL_CALLCONV void	Perl_dump_packsubs(pTHX_ HV* stash);
PERL_CALLCONV void	Perl_dump_sub(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_fbm_compile(pTHX_ SV* sv, U32 flags);
d569 7
a575 1
			__attribute__warn_unused_result__;
a576 4
PERL_CALLCONV char*	Perl_find_script(pTHX_ char *scriptname, bool dosearch, char **search_ext, I32 flags);
#if defined(USE_5005THREADS)
PERL_CALLCONV PADOFFSET	Perl_find_threadsv(pTHX_ const char *name);
#endif
d578 3
a580 1
PERL_CALLCONV OP*	Perl_fold_constants(pTHX_ OP* arg);
d582 5
a586 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
a587 1
PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args);
d591 4
a594 1
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char* key, unsigned long *len);
d596 3
d601 9
a609 3
PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV* gv);
PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV* gv);
PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv);
d611 67
a677 1
			__attribute__warn_unused_result__;
d679 1
a679 17
PERL_CALLCONV void	Perl_gv_check(pTHX_ HV* stash);
PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, GV* gv);
/* PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, GV* gv, const char* prefix); */
PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, GV* gv, const char* prefix, bool keepmain);
PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name);
PERL_CALLCONV GV*	Perl_gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level);
PERL_CALLCONV GV*	Perl_gv_fetchmeth_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level);
PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name);
PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload);
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char* name, I32 add, I32 sv_type);
PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, GV* gv);
/* PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, GV* gv, const char* prefix); */
PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, GV* gv, const char* prefix, bool keepmain);
PERL_CALLCONV void	Perl_gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi);
PERL_CALLCONV HV*	Perl_gv_stashpv(pTHX_ const char* name, I32 create);
PERL_CALLCONV HV*	Perl_gv_stashpvn(pTHX_ const char* name, U32 namelen, I32 create);
PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 create);
d681 32
a712 5
PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV* hv, HE* entry);
PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV* tb, const char* key, I32 klen, I32 flags);
PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV* tb, SV* key, I32 flags, U32 hash);
PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, I32 klen)
			__attribute__warn_unused_result__;
d714 2
a715 2
PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV* tb, SV* key, U32 hash)
			__attribute__warn_unused_result__;
a716 4
PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV* tb, const char* key, I32 klen, I32 lval);
PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV* tb, SV* key, I32 lval, U32 hash);
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV* hv, HE* entryK);
PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV* tb);
d718 3
a720 1
			__attribute__warn_unused_result__;
d723 2
a724 1
			__attribute__warn_unused_result__;
d726 3
a728 2
PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV* tb)
			__attribute__warn_unused_result__;
d731 4
a734 1
			__attribute__warn_unused_result__;
d737 2
a738 1
			__attribute__warn_unused_result__;
d741 9
a749 1
			__attribute__warn_unused_result__;
d751 7
a757 5
PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV* hv, IV newmax);
PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV* hv, GV* gv, int how);
PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV* tb, const char* key, I32 klen, SV* val, U32 hash);
PERL_CALLCONV HE*	Perl_hv_store_ent(pTHX_ HV* tb, SV* key, SV* val, U32 hash);
PERL_CALLCONV SV**	Perl_hv_store_flags(pTHX_ HV* tb, const char* key, I32 klen, SV* val, U32 hash, int flags);
d760 3
a762 1
			__attribute__pure__;
d765 7
a771 1
			__attribute__pure__;
d773 1
a773 2
PERL_CALLCONV I32	Perl_ibcmp_utf8(pTHX_ const char* a, char **pe1, UV l1, bool u1, const char* b, char **pe2, UV l2, bool u2);
PERL_CALLCONV bool	Perl_ingroup(pTHX_ Gid_t testgid, Uid_t effective)
d776 3
a778 1
PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int argc, char **argv);
d781 3
a783 1
PERL_CALLCONV void	Perl_init_tm(pTHX_ struct tm *ptm);
d787 3
a789 1
			__attribute__pure__;
d792 1
a792 1
			__attribute__warn_unused_result__;
d797 3
a799 2
PERL_CALLCONV bool	Perl_is_gv_magical(pTHX_ char *name, STRLEN len, U32 flags)
			__attribute__warn_unused_result__;
d872 16
a887 4
PERL_CALLCONV UV	Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp);
d944 19
a962 5
PERL_CALLCONV STRLEN	Perl_is_utf8_char(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_string_loc(pTHX_ U8 *s, STRLEN len, U8 **p);
PERL_CALLCONV bool	Perl_is_utf8_string(pTHX_ U8 *s, STRLEN len);
PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d964 3
a966 2
PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d968 3
a970 2
PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d972 3
a974 2
PERL_CALLCONV bool	Perl_is_utf8_idcont(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d976 3
a978 2
PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d980 3
a982 2
PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d984 3
a986 2
PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d988 3
a990 2
PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d992 3
a994 2
PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d996 3
a998 2
PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d1000 3
a1002 2
PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d1004 3
a1006 2
PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d1008 3
a1010 2
PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d1012 3
a1014 2
PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d1016 3
a1018 2
PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d1020 2
a1021 2
PERL_CALLCONV bool	Perl_is_utf8_mark(pTHX_ U8 *p)
			__attribute__warn_unused_result__;
d1023 3
a1025 3
PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP* arg);
PERL_CALLCONV I32	Perl_keyword(pTHX_ char* d, I32 len)
			__attribute__pure__;
d1029 12
a1040 4
PERL_CALLCONV void	Perl_lex_start(pTHX_ SV* line);
PERL_CALLCONV void	Perl_op_null(pTHX_ OP* o);
PERL_CALLCONV void	Perl_op_clear(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_linklist(pTHX_ OP* o);
d1043 9
a1051 3
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...);
PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args);
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP* arg, I32 lexical);
d1053 15
a1067 1
			__attribute__warn_unused_result__;
a1068 3
PERL_CALLCONV UV	Perl_grok_bin(pTHX_ char* start, STRLEN* len, I32* flags, NV *result);
PERL_CALLCONV UV	Perl_grok_hex(pTHX_ char* start, STRLEN* len, I32* flags, NV *result);
PERL_CALLCONV int	Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep);
d1070 101
a1170 1
			__attribute__warn_unused_result__;
a1171 27
PERL_CALLCONV UV	Perl_grok_oct(pTHX_ char* start, STRLEN* len_p, I32* flags, NV *result);
PERL_CALLCONV int	Perl_magic_clearenv(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clearpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clearsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_existspack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_freeregexp(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_freeovrld(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_get(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getarylen(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getdefelem(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getnkeys(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getpos(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getsubstr(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_gettaint(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getuvar(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getvec(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV U32	Perl_magic_len(pTHX_ SV* sv, MAGIC* mg);
#if defined(USE_5005THREADS)
PERL_CALLCONV int	Perl_magic_mutexfree(pTHX_ SV* sv, MAGIC* mg);
#endif
PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV* sv, MAGIC* mg, SV* key);
PERL_CALLCONV U32	Perl_magic_regdata_cnt(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_regdatum_get(pTHX_ SV* sv, MAGIC* mg);
d1173 110
a1282 1
			__attribute__noreturn__;
a1283 28
PERL_CALLCONV int	Perl_magic_set(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setamagic(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setarylen(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setbm(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setdbline(pTHX_ SV* sv, MAGIC* mg);
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg);
#endif
PERL_CALLCONV int	Perl_magic_setdefelem(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setenv(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setfm(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setisa(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setmglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setnkeys(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setpos(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setregexp(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setsubstr(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_settaint(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setuvar(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setvec(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setutf8(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV U32	Perl_magic_sizepack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_wipepack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV void	Perl_magicname(pTHX_ char* sym, char* name, I32 namlen);
d1286 8
a1293 1
PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen);
d1296 51
a1346 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
a1347 15
PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err);
PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp);
PERL_CALLCONV int	Perl_mg_clear(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV* sv, SV* nsv, const char* key, I32 klen);
PERL_CALLCONV MAGIC*	Perl_mg_find(pTHX_ SV* sv, int type)
			__attribute__warn_unused_result__;

PERL_CALLCONV int	Perl_mg_free(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_get(pTHX_ SV* sv);
PERL_CALLCONV U32	Perl_mg_length(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_mg_magical(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_set(pTHX_ SV* sv);
PERL_CALLCONV I32	Perl_mg_size(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_mini_mktime(pTHX_ struct tm *pm);
d1350 9
a1358 3
PERL_CALLCONV char*	Perl_moreswitches(pTHX_ char* s);
PERL_CALLCONV OP*	Perl_my(pTHX_ OP* o);
PERL_CALLCONV NV	Perl_my_atof(pTHX_ const char *s);
d1360 4
a1363 1
PERL_CALLCONV char*	Perl_my_bcopy(const char* from, char* to, I32 len);
d1366 3
a1368 1
PERL_CALLCONV char*	Perl_my_bzero(char* loc, I32 len);
d1383 3
a1385 1
			__attribute__pure__;
d1389 3
a1391 1
PERL_CALLCONV void*	Perl_my_memset(char* loc, I32 ch, I32 len);
d1394 9
a1402 3
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ char* cmd, char* mode);
PERL_CALLCONV PerlIO*	Perl_my_popen_list(pTHX_ char* mode, int n, SV ** args);
PERL_CALLCONV void	Perl_my_setenv(pTHX_ char* nam, char* val);
d1404 3
a1406 1
PERL_CALLCONV char *	Perl_my_strftime(pTHX_ char *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst);
d1440 2
a1441 1
			__attribute__warn_unused_result__;
d1443 4
a1446 1
PERL_CALLCONV CV*	Perl_newCONSTSUB(pTHX_ HV* stash, char* name, SV* sv);
d1448 1
d1451 8
a1458 1
			__attribute__warn_unused_result__;
d1462 3
a1464 1
			__attribute__warn_unused_result__;
d1468 2
a1469 1
			__attribute__warn_unused_result__;
d1483 3
a1485 1
PERL_CALLCONV void	Perl_newPROG(pTHX_ OP* o);
d1488 3
a1490 1
			__attribute__warn_unused_result__;
d1501 8
a1508 1
PERL_CALLCONV CV*	Perl_newXS(pTHX_ char* name, XSUBADDR_t f, char* filename);
d1515 2
a1516 1
			__attribute__warn_unused_result__;
d1528 2
a1529 1
			__attribute__warn_unused_result__;
d1531 1
a1531 1
PERL_CALLCONV GV*	Perl_newGVgen(pTHX_ char* pack)
d1533 2
a1534 1
			__attribute__warn_unused_result__;
d1542 2
a1543 1
			__attribute__warn_unused_result__;
d1561 1
d1564 2
a1565 1
			__attribute__warn_unused_result__;
d1567 1
d1576 1
a1576 1
PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV* pref)
d1578 2
a1579 1
			__attribute__warn_unused_result__;
d1581 1
a1581 1
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *sv)
d1583 2
a1584 1
			__attribute__warn_unused_result__;
d1592 2
a1593 1
			__attribute__warn_unused_result__;
d1597 2
a1598 1
			__attribute__warn_unused_result__;
d1620 4
d1631 2
a1632 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d1636 8
d1646 1
a1646 2
PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV* rv, const char* classname);
PERL_CALLCONV SV*	Perl_newSVsv(pTHX_ SV* old)
d1654 6
a1659 1
PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, I32 whileline, OP* expr, OP* block, OP* cont)
d1667 34
a1700 2
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ char *vstr, SV *sv);
PERL_CALLCONV PerlIO*	Perl_nextargv(pTHX_ GV* gv);
d1702 5
a1706 1
			__attribute__pure__;
d1709 2
a1710 1
			__attribute__noreturn__;
d1713 9
a1721 1
PERL_CALLCONV void	Perl_package(pTHX_ OP* o);
d1723 6
a1728 3
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ char* name);
PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ char* name)
			__attribute__warn_unused_result__;
d1730 1
d1732 2
a1733 1
			__attribute__warn_unused_result__;
d1736 2
a1737 1
			__attribute__warn_unused_result__;
d1745 4
a1748 4
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV* pattern, IO *io);
#if defined(USE_5005THREADS)
PERL_CALLCONV struct perl_thread*	Perl_new_struct_thread(pTHX_ struct perl_thread *t);
#endif
d1753 3
a1755 1
PERL_CALLCONV void*	Perl_reentrant_retry(const char*, ...);
d1758 13
a1770 4
PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv);
PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags);
PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags);
PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, I32 flags);
d1772 24
a1795 6
PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error);
PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags);
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char* name, I32 create);
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char* name, I32 create);
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char* name, I32 create);
PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 create);
d1798 5
a1802 3
PERL_CALLCONV void	Perl_new_collate(pTHX_ char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ char* newctype);
PERL_CALLCONV void	Perl_new_numeric(pTHX_ char* newcoll);
d1806 19
a1824 3
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv);
PERL_CALLCONV void	Perl_pack_cat(pTHX_ SV *cat, char *pat, char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags);
PERL_CALLCONV void	Perl_packlist(pTHX_ SV *cat, char *pat, char *patend, SV **beglist, SV **endlist);
d1826 13
a1838 4
PERL_CALLCONV void	Perl_pmflag(pTHX_ U32* pmfl, int ch);
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP* pm, OP* expr, OP* repl);
PERL_CALLCONV OP*	Perl_pmtrans(pTHX_ OP* o, OP* expr, OP* repl);
PERL_CALLCONV OP*	Perl_pop_return(pTHX);
a1840 1
PERL_CALLCONV void	Perl_push_return(pTHX_ OP* o);
d1842 1
a1842 1
PERL_CALLCONV OP*	Perl_ref(pTHX_ OP* o, I32 type);
d1844 16
a1859 3
PERL_CALLCONV void	Perl_regdump(pTHX_ regexp* r);
PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ struct regnode *n, bool doinit, SV **listsvp, SV **altsvp);
PERL_CALLCONV I32	Perl_pregexec(pTHX_ regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, U32 nosave);
d1861 34
a1894 4
PERL_CALLCONV regexp*	Perl_pregcomp(pTHX_ char* exp, char* xend, PMOP* pm);
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ regexp* prog, SV* sv, char* strpos, char* strend, U32 flags, struct re_scream_pos_data_s *data);
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ regexp* prog);
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, void* data, U32 flags);
d1896 53
a1948 1
			__attribute__warn_unused_result__;
a1949 2
PERL_CALLCONV void	Perl_regprop(pTHX_ SV* sv, regnode* o);
PERL_CALLCONV void	Perl_repeatcpy(pTHX_ char* to, const char* from, I32 len, I32 count);
d1951 5
a1955 1
			__attribute__pure__;
d1959 3
a1961 1
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* t2);
d1963 11
a1973 3
PERL_CALLCONV void	Perl_rxres_free(pTHX_ void** rsp);
PERL_CALLCONV void	Perl_rxres_restore(pTHX_ void** rsp, REGEXP* prx);
PERL_CALLCONV void	Perl_rxres_save(pTHX_ void** rsp, REGEXP* prx);
d1975 4
a1978 1
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ char* a, char* b);
d1992 10
d2004 4
a2007 1
PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, I32 idx, SV **sptr);
d2009 19
a2027 6
PERL_CALLCONV void	Perl_save_aptr(pTHX_ AV** aptr);
PERL_CALLCONV AV*	Perl_save_ary(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_bool(pTHX_ bool* boolp);
PERL_CALLCONV void	Perl_save_clearsv(pTHX_ SV** svp);
PERL_CALLCONV void	Perl_save_delete(pTHX_ HV* hv, char* key, I32 klen);
PERL_CALLCONV void	Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void* p);
d2032 49
a2080 8
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr);
PERL_CALLCONV void	Perl_save_generic_pvref(pTHX_ char** str);
PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str);
PERL_CALLCONV void	Perl_save_gp(pTHX_ GV* gv, I32 empty);
PERL_CALLCONV HV*	Perl_save_hash(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_helem(pTHX_ HV* hv, SV *key, SV **sptr);
PERL_CALLCONV void	Perl_save_hints(pTHX)
			__attribute__noreturn__;
a2081 10
PERL_CALLCONV void	Perl_save_hptr(pTHX_ HV** hptr);
PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp);
PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp);
PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep);
PERL_CALLCONV void	Perl_save_int(pTHX_ int* intp);
PERL_CALLCONV void	Perl_save_item(pTHX_ SV* item);
PERL_CALLCONV void	Perl_save_iv(pTHX_ IV* iv);
PERL_CALLCONV void	Perl_save_list(pTHX_ SV** sarg, I32 maxsarg);
PERL_CALLCONV void	Perl_save_long(pTHX_ long* longp);
PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv);
d2084 9
a2092 3
PERL_CALLCONV SV*	Perl_save_scalar(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr);
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void* pptr);
d2095 5
a2099 7
PERL_CALLCONV void	Perl_save_sptr(pTHX_ SV** sptr);
PERL_CALLCONV SV*	Perl_save_svref(pTHX_ SV** sptr);
#ifdef USE_5005THREADS
PERL_CALLCONV SV**	Perl_save_threadsv(pTHX_ PADOFFSET i);
#else
PERL_CALLCONV SV**	Perl_save_threadsv(pTHX_ PADOFFSET i)
			__attribute__noreturn__;
a2100 1
#endif
d2105 19
a2123 5
PERL_CALLCONV OP*	Perl_scalarvoid(pTHX_ OP* o);
PERL_CALLCONV NV	Perl_scan_bin(pTHX_ char* start, STRLEN len, STRLEN* retlen);
PERL_CALLCONV NV	Perl_scan_hex(pTHX_ char* start, STRLEN len, STRLEN* retlen);
PERL_CALLCONV char*	Perl_scan_num(pTHX_ char* s, YYSTYPE *lvalp);
PERL_CALLCONV NV	Perl_scan_oct(pTHX_ char* start, STRLEN len, STRLEN* retlen);
d2125 5
a2129 1
PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV *bigstr, SV *littlestr, I32 start_shift, I32 end_shift, I32 *oldposp, I32 last);
d2131 3
a2133 1
PERL_CALLCONV I32	Perl_setenv_getix(pTHX_ char* nam);
d2136 7
a2142 1
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* str, I32 len, U32 hash);
d2145 5
a2149 1
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV**p, int n);
d2151 27
a2177 5
PERL_CALLCONV void	Perl_sub_crush_depth(pTHX_ CV* cv);
PERL_CALLCONV bool	Perl_sv_2bool(pTHX_ SV* sv);
PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV** st, GV** gvp, I32 lref);
PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV* sv);
PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV* sv);
d2179 48
a2226 12
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV* sv);
/* PERL_CALLCONV char*	sv_2pv(pTHX_ SV* sv, STRLEN* lp); */
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV* sv);
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv);
PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv);
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *len);
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *len);
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *len);
d2228 10
a2237 3
PERL_CALLCONV void	Perl_sv_add_arena(pTHX_ char* ptr, U32 size, U32 flags);
PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV* sv);
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV* sv, HV* stash);
d2239 21
a2259 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
a2260 5
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV* sv, const char* ptr);
/* PERL_CALLCONV void	sv_catpvn(pTHX_ SV* sv, const char* ptr, STRLEN len); */
/* PERL_CALLCONV void	sv_catsv(pTHX_ SV* dsv, SV* ssv); */
PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV* sv, char* ptr);
d2263 11
a2273 3
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV* sv);
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV* sv1, SV* sv2);
PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV* sv1, SV* sv2);
d2275 4
a2278 1
PERL_CALLCONV char*	Perl_sv_collxfrm(pTHX_ SV* sv, STRLEN* nxp);
d2280 15
a2294 4
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV* sv, OP** startp, char* code, PAD** padp);
PERL_CALLCONV int	Perl_getcwd_sv(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv);
d2296 8
a2303 1
			__attribute__warn_unused_result__;
d2307 3
d2311 17
a2327 5
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV* sv, PerlIO* fp, I32 append);
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV* sv, STRLEN newlen);
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV* bigsv, STRLEN offset, STRLEN len, char* little, STRLEN littlelen);
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char* name);
d2331 6
a2336 2
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV* sv, SV* obj, int how, const char* name, I32 namlen);
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV* sv, SV* obj, int how, MGVTBL *vtbl, const char* name, I32 namlen);
d2346 5
a2350 9
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV* sv, I32* offsetp, I32* lenp);
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV* sv, I32* offsetp);
/* PERL_CALLCONV char*	sv_pvn_force(pTHX_ SV* sv, STRLEN* lp); */
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_recode_to_utf8(pTHX_ SV* sv, SV *encoding);
PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen);
PERL_CALLCONV char*	Perl_sv_reftype(pTHX_ SV* sv, int ob)
			__attribute__warn_unused_result__;
d2352 2
a2353 5
PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV* sv, SV* nsv);
PERL_CALLCONV void	Perl_sv_report_used(pTHX);
PERL_CALLCONV void	Perl_sv_reset(pTHX_ char* s, HV* stash);
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV* sv, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d2355 2
a2356 16
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV* sv, IV num);
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV* sv, IV num);
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV* sv, UV num);
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV* sv, NV num);
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV* rv, const char* classname, IV iv);
PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV* rv, const char* classname, UV uv);
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV* rv, const char* classname, NV nv);
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV* rv, const char* classname, void* pv);
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV* rv, const char* classname, char* pv, STRLEN n);
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV* sv, const char* ptr);
PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV* sv, const char* ptr, STRLEN len);
/* PERL_CALLCONV void	sv_setsv(pTHX_ SV* dsv, SV* ssv); */
PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
d2358 2
a2359 10
PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV* sv, int type);
PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV* sv, U32 flags);
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_sv_upgrade(pTHX_ SV* sv, U32 mt);
PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted);
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted);
PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
d2361 3
a2363 25
PERL_CALLCONV SV*	Perl_swash_init(pTHX_ char* pkg, char* name, SV* listsv, I32 minbits, I32 none);
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *sv, U8 *ptr, bool do_utf8);
PERL_CALLCONV void	Perl_taint_env(pTHX);
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char* s);
PERL_CALLCONV UV	Perl_to_utf8_case(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, char *normal, char *special);
PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_utf8_fold(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp);
#if defined(UNLINK_ALL_VERSIONS)
PERL_CALLCONV I32	Perl_unlnk(pTHX_ char* f);
#endif
#if defined(USE_5005THREADS)
PERL_CALLCONV void	Perl_unlock_condpair(pTHX_ void* svv);
#endif
PERL_CALLCONV I32	Perl_unpack_str(pTHX_ char *pat, char *patend, char *s, char *strbeg, char *strend, char **new_s, I32 ocnt, U32 flags);
PERL_CALLCONV I32	Perl_unpackstring(pTHX_ char *pat, char *patend, char *s, char *strend, U32 flags);
PERL_CALLCONV void	Perl_unsharepvn(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV void	Perl_unshare_hek(pTHX_ HEK* hek);
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg);
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ U8* s, U8 *e)
			__attribute__warn_unused_result__
			__attribute__pure__;
d2365 6
a2370 3
PERL_CALLCONV IV	Perl_utf8_distance(pTHX_ U8 *a, U8 *b)
			__attribute__warn_unused_result__
			__attribute__pure__;
d2372 1
a2372 1
PERL_CALLCONV U8*	Perl_utf8_hop(pTHX_ U8 *s, I32 off)
d2374 1
a2374 1
			__attribute__pure__;
d2376 3
a2378 14
PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len);
PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ U8 *s, STRLEN *len, bool *is_utf8);
PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ U8 *s, STRLEN *len);
PERL_CALLCONV UV	Perl_utf8_to_uvchr(pTHX_ U8 *s, STRLEN *retlen);
PERL_CALLCONV UV	Perl_utf8_to_uvuni(pTHX_ U8 *s, STRLEN *retlen);
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags);
PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags);
PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv);
PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv);
PERL_CALLCONV U8*	Perl_uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
PERL_CALLCONV U8*	Perl_uvuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
PERL_CALLCONV char*	Perl_pv_uni_display(pTHX_ SV *dsv, U8 *spv, STRLEN len, STRLEN pvlim, UV flags);
PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
			__attribute__warn_unused_result__;
d2380 3
a2382 7
PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_vivify_ref(pTHX_ SV* sv, U32 to_what);
PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags);
PERL_CALLCONV U32	Perl_parse_unicode_opts(pTHX_ char **popt);
PERL_CALLCONV U32	Perl_seed(pTHX);
PERL_CALLCONV UV	Perl_get_hash_seed(pTHX)
			__attribute__warn_unused_result__;
d2384 4
a2387 4
PERL_CALLCONV void	Perl_report_evil_fh(pTHX_ GV *gv, IO *io, I32 op);
PERL_CALLCONV void	Perl_report_uninit(pTHX);
PERL_CALLCONV void	Perl_warn(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d2389 3
a2391 3
PERL_CALLCONV void	Perl_vwarn(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d2393 2
a2394 15
PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_watch(pTHX_ char** addr);
PERL_CALLCONV I32	Perl_whichsig(pTHX_ char* sig);
PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ const char* message, int msglen);
PERL_CALLCONV int	Perl_yyerror(pTHX_ char* s);
#ifdef USE_PURE_BISON
PERL_CALLCONV int	Perl_yylex_r(pTHX_ YYSTYPE *lvalp, int *lcharp);
#endif
PERL_CALLCONV int	Perl_yylex(pTHX);
PERL_CALLCONV int	Perl_yyparse(pTHX);
PERL_CALLCONV int	Perl_yywarn(pTHX_ char* s);
#if defined(MYMALLOC)
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ char* s);
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level)
			__attribute__warn_unused_result__;
d2396 2
a2397 4
#endif
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2399 2
a2400 3
PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2402 291
a2692 3
PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2697 4
a2703 3
#if defined(USE_5005THREADS)
PERL_CALLCONV SV*	Perl_sv_lock(pTHX_ SV *sv);
#endif
d2705 18
a2722 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
a2723 4
PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *sv, const char *ptr);
PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dstr, SV *sstr);
d2725 32
a2756 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
a2757 9
PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *sv, IV i);
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *sv, IV iv);
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *sv, UV u);
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *sv, NV num);
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *sv, const char *ptr);
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *dstr, SV *sstr);
PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len);
d2761 12
a2772 1
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *dsv, char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
d2774 26
a2799 1
			__attribute__format__(__printf__,pTHX_3,pTHX_4);
d2801 7
a2807 13
PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args);
PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, char *name, GV *sv);
PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, char *name, GV *sv);
PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, char *name, HV *sv);
PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, OP *o);
PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, PMOP *pm);
PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
PERL_CALLCONV void	Perl_magic_dump(pTHX_ MAGIC *mg);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
PERL_CALLCONV void*	Perl_default_protect(pTHX_ volatile JMPENV *je, int *excpt, protect_body_t body, ...);
PERL_CALLCONV void*	Perl_vdefault_protect(pTHX_ volatile JMPENV *je, int *excpt, protect_body_t body, va_list *args);
#endif
d2809 26
a2834 2
PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
d2836 2
a2837 2
PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
d2839 2
a2840 2
PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
d2842 2
a2843 2
/* PERL_CALLCONV char*	sv_pv(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */
d2845 2
a2846 2
/* PERL_CALLCONV char*	sv_pvutf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */
d2848 2
a2849 2
/* PERL_CALLCONV char*	sv_pvbyte(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */
a2850 6
/* PERL_CALLCONV STRLEN	sv_utf8_upgrade(pTHX_ SV *sv); */
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *sv, bool fail_ok);
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *sv);
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *sv, U32 flags);
d2852 7
a2858 2
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *sv);
PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg);
d2861 5
d2869 4
a2872 1
PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs);
d2876 2
a2877 2
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2880 2
a2881 2
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2885 24
d2911 23
a2933 1
PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, PerlInterpreter* proto_perl)
d2937 91
a3027 1
PERL_CALLCONV HE*	Perl_he_dup(pTHX_ HE* e, bool shared, CLONE_PARAMS* param)
d3031 9
a3039 1
PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ REGEXP* r, CLONE_PARAMS* param)
d3043 1
a3043 1
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type, CLONE_PARAMS* param)
d3045 161
a3205 1
			__attribute__warn_unused_result__;
d3207 3
a3209 3
PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR* dp)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d3211 3
a3213 3
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d3215 3
a3217 3
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d3219 3
a3221 3
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ SV* sstr, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d3223 3
a3225 7
PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV* dstr, SV *sstr, CLONE_PARAMS* param);
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst);
#endif
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d3227 3
a3229 3
PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *tbl, void *sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d3231 3
a3233 9
PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *tbl, void *oldsv, void *newsv);
PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *tbl);
PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *tbl);
PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *tbl);
#endif
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_clear(pTHX);
PERL_CALLCONV void	Perl_sys_intern_init(pTHX);
#endif
d3235 3
a3237 2
PERL_CALLCONV char *	Perl_custom_op_name(pTHX_ OP* op)
			__attribute__warn_unused_result__;
d3239 3
a3241 2
PERL_CALLCONV char *	Perl_custom_op_desc(pTHX_ OP* op)
			__attribute__warn_unused_result__;
d3243 3
d3247 3
a3249 4
PERL_CALLCONV void	Perl_sv_nosharing(pTHX_ SV *);
PERL_CALLCONV void	Perl_sv_nolocking(pTHX_ SV *);
PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *);
PERL_CALLCONV int	Perl_nothreadhook(pTHX);
d3251 3
a3253 1
END_EXTERN_C
d3255 3
a3257 4
#if defined(PERL_IN_AV_C) || defined(PERL_DECL_PROT)
STATIC I32	S_avhv_index_sv(pTHX_ SV* sv);
STATIC I32	S_avhv_index(pTHX_ AV* av, SV* sv, U32 hash);
#endif
d3259 3
a3261 3
#if defined(PERL_IN_DOOP_C) || defined(PERL_DECL_PROT)
STATIC I32	S_do_trans_simple(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
d3263 3
a3265 2
STATIC I32	S_do_trans_count(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
d3267 3
a3269 2
STATIC I32	S_do_trans_complex(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
d3271 1
a3271 1
STATIC I32	S_do_trans_simple_utf8(pTHX_ SV *sv)
d3274 7
a3280 2
STATIC I32	S_do_trans_count_utf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
d3282 3
a3284 2
STATIC I32	S_do_trans_complex_utf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
d3286 2
a3287 1
#endif
d3289 3
a3291 4
#if defined(PERL_IN_GV_C) || defined(PERL_DECL_PROT)
STATIC void	S_gv_init_sv(pTHX_ GV *gv, I32 sv_type);
STATIC void	S_require_errno(pTHX_ GV *gv);
#endif
d3293 1
a3293 5
#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC void	S_hsplit(pTHX_ HV *hv);
STATIC void	S_hfreeentries(pTHX_ HV *hv);
STATIC HE*	S_new_he(pTHX)
			__attribute__malloc__
d3296 4
a3299 4
STATIC void	S_del_he(pTHX_ HE *p);
STATIC HEK*	S_save_hek_flags(pTHX_ const char *str, I32 len, U32 hash, int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d3301 2
a3302 4
STATIC void	S_hv_magic_check(pTHX_ HV *hv, bool *needs_copy, bool *needs_store);
STATIC void	S_unshare_hek_or_pvn(pTHX_ HEK* hek, const char* str, I32 len, U32 hash);
STATIC HEK*	S_share_hek_flags(pTHX_ const char* str, I32 len, U32 hash, int flags)
			__attribute__warn_unused_result__;
d3304 2
a3305 2
STATIC void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg)
			__attribute__noreturn__;
d3307 3
a3309 1
#endif
d3311 2
a3312 6
#if defined(PERL_IN_MG_C) || defined(PERL_DECL_PROT)
STATIC void	S_save_magic(pTHX_ I32 mgs_ix, SV *sv);
STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, const char *meth);
STATIC int	S_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, const char *meth, I32 f, int n, SV *val);
STATIC void	S_restore_magic(pTHX_ const void *p);
STATIC void	S_unwind_handler_stack(pTHX_ const void *p);
d3314 2
a3315 1
#endif
d3317 3
a3319 3
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC bool	S_is_handle_constructor(pTHX_ const OP *o, I32 numargs)
			__attribute__warn_unused_result__;
d3321 4
a3324 2
STATIC I32	S_is_list_assignment(pTHX_ const OP *o)
			__attribute__warn_unused_result__;
d3326 4
a3329 5
STATIC void	S_cop_free(pTHX_ COP *cop);
STATIC OP*	S_modkids(pTHX_ OP *o, I32 type);
STATIC OP*	S_scalarboolean(pTHX_ OP *o);
STATIC OP*	S_newDEFSVOP(pTHX)
			__attribute__warn_unused_result__;
d3331 2
a3332 2
STATIC OP*	S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp)
			__attribute__warn_unused_result__;
a3333 9
STATIC void	S_simplify_sort(pTHX_ OP *o);
STATIC const char*	S_gv_ename(pTHX_ GV *gv);
STATIC bool	S_scalar_mod_type(pTHX_ const OP *o, I32 type);
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp);
STATIC OP *	S_dup_attrlist(pTHX_ OP *o);
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs, bool for_my);
STATIC void	S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp);
STATIC void	S_bad_type(pTHX_ I32 n, const char *t, const char *name, const OP *kid);
STATIC void	S_no_bareword_allowed(pTHX_ const OP *o);
d3335 2
a3336 1
			__attribute__warn_unused_result__;
d3339 3
a3341 1
			__attribute__warn_unused_result__;
d3344 15
a3358 1
			__attribute__warn_unused_result__;
d3362 1
a3362 1
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ int m, size_t sz)
d3366 15
a3380 1
PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op);
d3384 6
a3389 3
STATIC void	S_find_beginning(pTHX);
STATIC void	S_forbid_setid(pTHX_ const char * s);
STATIC void	S_incpush(pTHX_ const char *dir, bool addsubdirs, bool addoldvers, bool usesep);
a3391 1
STATIC void	S_init_lexer(pTHX);
d3394 3
a3396 1
STATIC void	S_init_postdump_symbols(pTHX_ int argc, char **argv, char **env);
d3402 16
a3417 3
STATIC void	S_open_script(pTHX_ const char *scriptname, bool dosearch, SV *sv);
STATIC void	S_usage(pTHX_ const char *name);
STATIC void	S_validate_suid(pTHX_ const char *validarg, const char *scriptname);
d3425 3
a3427 11
STATIC void	S_call_body(pTHX_ const OP *myop, bool is_eval);
STATIC void*	S_call_list_body(pTHX_ CV *cv);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
STATIC void*	S_vparse_body(pTHX_ va_list args);
STATIC void*	S_vrun_body(pTHX_ va_list args);
STATIC void*	S_vcall_body(pTHX_ va_list args);
STATIC void*	S_vcall_list_body(pTHX_ va_list args);
#endif
#  if defined(USE_5005THREADS)
STATIC struct perl_thread *	S_init_main_thread(pTHX);
#  endif
d3432 10
a3441 1
			__attribute__warn_unused_result__;
d3446 21
a3466 8
STATIC I32	S_unpack_rec(pTHX_ tempsym_t* symptr, char *s, char *strbeg, char *strend, char **new_s);
STATIC SV **	S_pack_rec(pTHX_ SV *cat, tempsym_t* symptr, SV **beglist, SV **endlist);
STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m);
STATIC I32	S_measure_struct(pTHX_ tempsym_t* symptr);
STATIC const char *	S_group_end(pTHX_ const char *pat, const char *patend, char ender);
STATIC const char *	S_get_num(pTHX_ const char *ppat, I32 *);
STATIC bool	S_next_symbol(pTHX_ tempsym_t* symptr);
STATIC void	S_doencodes(pTHX_ SV* sv, char* s, I32 len);
d3468 32
a3499 1
			__attribute__warn_unused_result__;
a3500 1
STATIC int	S_div128(pTHX_ SV *pnum, bool *done);
a3506 4
STATIC void	S_docatch_body(pTHX);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
STATIC void*	S_vdocatch_body(pTHX_ va_list args);
#endif
d3508 5
a3512 1
			__attribute__warn_unused_result__;
d3515 2
a3516 1
			__attribute__warn_unused_result__;
d3524 3
d3528 2
a3529 1
			__attribute__warn_unused_result__;
d3534 5
a3538 1
STATIC I32	S_dopoptosub(pTHX_ I32 startingblock)
d3541 17
a3557 2
STATIC I32	S_dopoptosub_at(pTHX_ const PERL_CONTEXT* cxstk, I32 startingblock)
			__attribute__warn_unused_result__;
d3559 3
a3561 3
STATIC void	S_save_lines(pTHX_ AV *array, SV *sv);
STATIC OP*	S_doeval(pTHX_ int gimme, OP** startop, CV* outside, U32 seq)
			__attribute__warn_unused_result__;
d3563 3
a3565 2
STATIC PerlIO *	S_check_type_and_open(pTHX_ const char *name, const char *mode)
			__attribute__warn_unused_result__;
d3567 4
a3570 2
STATIC PerlIO *	S_doopen_pm(pTHX_ const char *name, const char *mode)
			__attribute__warn_unused_result__;
d3572 2
a3573 2
STATIC bool	S_path_is_absolute(pTHX_ const char *name)
			__attribute__warn_unused_result__;
d3575 1
d3579 4
a3582 4
STATIC int	S_do_maybe_phash(pTHX_ AV *ary, SV **lelem, SV **firstlelem, SV **relem, SV **lastrelem);
STATIC void	S_do_oddball(pTHX_ HV *hash, SV **relem, SV **firstrelem);
STATIC CV*	S_get_db_sub(pTHX_ SV **svp, CV *cv)
			__attribute__warn_unused_result__;
d3585 45
a3629 1
			__attribute__warn_unused_result__;
d3634 5
a3638 2
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop);
STATIC int	S_emulate_eaccess(pTHX_ const char* path, Mode_t mode);
d3641 3
a3643 1
			__attribute__warn_unused_result__;
d3646 3
d3652 132
a3783 16
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t *state, I32 paren, I32 *flagp);
STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t *state, U8 op, U32 arg);
STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t *state, I32 *flagp);
STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t *state, I32 *flagp, I32 first);
STATIC void	S_reguni(pTHX_ const struct RExC_state_t *state, UV uv, char *s, STRLEN *lenp);
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *state);
STATIC I32	S_regcurly(pTHX_ const char *)
			__attribute__warn_unused_result__;

STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t *state, U8 op);
STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t *state, I32 *flagp);
STATIC void	S_reginsert(pTHX_ struct RExC_state_t *state, U8 op, regnode *opnd);
STATIC void	S_regoptail(pTHX_ struct RExC_state_t *state, regnode *p, regnode *val);
STATIC void	S_regtail(pTHX_ struct RExC_state_t *state, regnode *p, regnode *val);
STATIC char*	S_regwhite(pTHX_ char *p, const char *e);
STATIC char*	S_nextchar(pTHX_ struct RExC_state_t*);
d3785 27
a3811 2
STATIC regnode*	S_dumpuntil(pTHX_ regnode *start, regnode *node, regnode *last, SV* sv, I32 l);
STATIC void	S_put_byte(pTHX_ SV* sv, int c);
a3812 14
STATIC void	S_scan_commit(pTHX_ struct RExC_state_t*, struct scan_data_t *data);
STATIC void	S_cl_anything(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl);
STATIC int	S_cl_is_anything(pTHX_ const struct regnode_charclass_class *cl);
STATIC void	S_cl_init(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl);
STATIC void	S_cl_init_zero(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl);
STATIC void	S_cl_and(pTHX_ struct regnode_charclass_class *cl, const struct regnode_charclass_class *and_with);
STATIC void	S_cl_or(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl, const struct regnode_charclass_class *or_with);
STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t* pRExC_state, regnode **scanp, I32 *deltap, regnode *last, struct scan_data_t *data, U32 flags);
STATIC I32	S_add_data(pTHX_ struct RExC_state_t*, I32 n, const char *s);
STATIC void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...)
			__attribute__noreturn__;

STATIC I32	S_regpposixcc(pTHX_ struct RExC_state_t*, I32 value);
STATIC void	S_checkposixcc(pTHX_ struct RExC_state_t*);
d3816 23
a3838 2
STATIC I32	S_regmatch(pTHX_ regnode *prog)
			__attribute__warn_unused_result__;
d3840 4
a3843 2
STATIC I32	S_regrepeat(pTHX_ const regnode *p, I32 max)
			__attribute__warn_unused_result__;
d3845 6
a3850 2
STATIC I32	S_regrepeat_hard(pTHX_ regnode *p, I32 max, I32 *lp)
			__attribute__warn_unused_result__;
d3852 5
a3856 2
STATIC I32	S_regtry(pTHX_ regexp *prog, char *startpos)
			__attribute__warn_unused_result__;
d3858 6
a3863 2
STATIC bool	S_reginclass(pTHX_ const regnode *n, const U8 *p, STRLEN *lenp, bool do_utf8sv_is_utf8)
			__attribute__warn_unused_result__;
d3865 2
a3866 6
STATIC CHECKPOINT	S_regcppush(pTHX_ I32 parenfloor);
STATIC char*	S_regcppop(pTHX);
STATIC char*	S_regcp_set_to(pTHX_ I32 ss);
STATIC void	S_cache_re(pTHX_ regexp *prog);
STATIC U8*	S_reghop(pTHX_ U8 *pos, I32 off)
			__attribute__warn_unused_result__;
d3868 2
a3869 2
STATIC U8*	S_reghop3(pTHX_ U8 *pos, I32 off, U8 *lim)
			__attribute__warn_unused_result__;
d3871 2
a3872 2
STATIC U8*	S_reghopmaybe(pTHX_ U8 *pos, I32 off)
			__attribute__warn_unused_result__;
d3874 4
a3877 2
STATIC U8*	S_reghopmaybe3(pTHX_ U8 *pos, I32 off, U8 *lim)
			__attribute__warn_unused_result__;
d3879 13
a3891 2
STATIC char*	S_find_byclass(pTHX_ regexp * prog, regnode *c, char *s, const char *strend, I32 norun)
			__attribute__warn_unused_result__;
d3893 1
a3893 2
STATIC void	S_to_utf8_substr(pTHX_ regexp * prog);
STATIC void	S_to_byte_substr(pTHX_ regexp * prog);
d3897 10
a3906 2
STATIC CV*	S_deb_curcv(pTHX_ I32 ix);
STATIC void	S_debprof(pTHX_ const OP *o);
d3910 17
a3926 1
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr);
d3931 12
a3942 1
			__attribute__warn_unused_result__;
d3944 3
a3946 2
STATIC IV	S_asIV(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
d3948 1
a3948 1
STATIC UV	S_asUV(pTHX_ SV* sv)
a3950 29
STATIC XPVIV*	S_new_xiv(pTHX);
STATIC XPVNV*	S_new_xnv(pTHX);
STATIC XPV*	S_new_xpv(pTHX);
STATIC XPVIV*	S_new_xpviv(pTHX);
STATIC XPVNV*	S_new_xpvnv(pTHX);
STATIC XPVCV*	S_new_xpvcv(pTHX);
STATIC XPVAV*	S_new_xpvav(pTHX);
STATIC XPVHV*	S_new_xpvhv(pTHX);
STATIC XPVMG*	S_new_xpvmg(pTHX);
STATIC XPVLV*	S_new_xpvlv(pTHX);
STATIC XPVBM*	S_new_xpvbm(pTHX);
STATIC XRV*	S_new_xrv(pTHX);
STATIC void	S_del_xiv(pTHX_ XPVIV* p);
STATIC void	S_del_xnv(pTHX_ XPVNV* p);
STATIC void	S_del_xpv(pTHX_ XPV* p);
STATIC void	S_del_xpviv(pTHX_ XPVIV* p);
STATIC void	S_del_xpvnv(pTHX_ XPVNV* p);
STATIC void	S_del_xpvcv(pTHX_ XPVCV* p);
STATIC void	S_del_xpvav(pTHX_ XPVAV* p);
STATIC void	S_del_xpvhv(pTHX_ XPVHV* p);
STATIC void	S_del_xpvmg(pTHX_ XPVMG* p);
STATIC void	S_del_xpvlv(pTHX_ XPVLV* p);
STATIC void	S_del_xpvbm(pTHX_ XPVBM* p);
STATIC void	S_del_xrv(pTHX_ XRV* p);
STATIC void	S_sv_unglob(pTHX_ SV* sv);
STATIC void	S_not_a_number(pTHX_ SV *sv);
STATIC I32	S_visit(pTHX_ SVFUNC_t f, U32 flags, U32 mask);
STATIC void	S_sv_add_backref(pTHX_ SV *tsv, SV *sv);
STATIC void	S_sv_del_backref(pTHX_ SV *sv);
d3952 3
a3954 1
STATIC void	S_del_sv(pTHX_ SV *p);
d3957 3
a3959 1
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *sv, I32 numtype);
d3962 2
a3963 1
			__attribute__warn_unused_result__;
d3966 52
a4017 2
STATIC bool	S_utf8_mg_pos(pTHX_ SV *sv, MAGIC **mgp, STRLEN **cachep, I32 i, I32 *offsetp, I32 uoff, const U8 **sp, const U8 *start, const U8 *send);
STATIC bool	S_utf8_mg_pos_init(pTHX_ SV *sv, MAGIC **mgp, STRLEN **cachep, I32 i, I32 offsetp, const U8 *s, const U8 *start);
d4023 10
a4032 4
STATIC char*	S_force_version(pTHX_ char *start, int guessing);
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack, int allow_tick);
STATIC SV*	S_tokeq(pTHX_ SV *sv);
STATIC int	S_pending_ident(pTHX);
d4034 2
a4035 1
			__attribute__warn_unused_result__;
d4038 2
a4039 1
			__attribute__warn_unused_result__;
d4042 7
a4048 1
			__attribute__warn_unused_result__;
a4049 1
STATIC char*	S_scan_ident(pTHX_ char *s, const char *send, char *dest, STRLEN destlen, I32 ck_uni);
d4051 2
a4052 1
			__attribute__warn_unused_result__;
d4055 2
a4056 1
			__attribute__warn_unused_result__;
d4059 2
a4060 1
			__attribute__warn_unused_result__;
d4063 2
a4064 1
			__attribute__warn_unused_result__;
d4067 7
a4073 1
			__attribute__warn_unused_result__;
d4075 1
a4075 1
STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp);
d4077 2
a4078 1
			__attribute__warn_unused_result__;
d4081 25
a4105 1
			__attribute__warn_unused_result__;
a4106 6
STATIC void	S_checkcomma(pTHX_ char *s, const char *name, const char *what);
STATIC void	S_force_ident(pTHX_ const char *s, int kind);
STATIC void	S_incline(pTHX_ char *s);
STATIC int	S_intuit_method(pTHX_ char *s, GV *gv);
STATIC int	S_intuit_more(pTHX_ char *s);
STATIC I32	S_lop(pTHX_ I32 f, int x, char *s);
d4110 3
a4112 2
STATIC void	S_no_op(pTHX_ const char *what, char *s);
STATIC void	S_set_csh(pTHX);
d4123 11
a4133 1
			__attribute__warn_unused_result__;
d4135 3
a4137 2
STATIC HV *	S_find_in_my_stash(pTHX_ const char *pkgname, I32 len)
			__attribute__warn_unused_result__;
a4138 4
STATIC SV*	S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, SV *sv, SV *pv, const char *type);
#  if defined(DEBUGGING)
STATIC int	S_tokereport(pTHX_ const char *s, I32 rv);
#  endif
a4139 2
STATIC void	S_depcom(pTHX);
STATIC const char*	S_incl_perldb(pTHX);
d4142 10
d4156 3
a4158 1
STATIC SV*	S_isa_lookup(pTHX_ HV *stash, const char *name, HV *name_stash, int len, int level);
d4162 5
a4166 1
STATIC char*	S_stdize_locale(pTHX_ char* locs);
d4170 3
a4172 1
STATIC COP*	S_closest_cop(pTHX_ COP *cop, const OP *o);
d4174 5
a4178 2
PERL_CALLCONV const char *	vdie_croak_common(pTHX_ const char *pat, va_list *args, STRLEN *msglen, I32* utf8);
PERL_CALLCONV void	vdie_common(pTHX_ const char *message, STRLEN msglen, I32 utf8);
d4186 14
a4199 1
STATIC STRLEN	S_is_utf8_char_slow(pTHX_ const U8 *s, const STRLEN len);
d4204 24
a4227 8
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV* dsv, SV* ssv, I32 flags);
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV* sv, const char* ptr, STRLEN len, I32 flags);
PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV* dsv, SV* ssv, I32 flags);
PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *sv, I32 flags);
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags);
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags);
PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV* dsv, SV* ssv);
PERL_CALLCONV char*	Perl_my_atof2(pTHX_ const char *s, NV* value);
d4229 9
d4248 3
a4250 1
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, int cnt);
d4252 9
a4260 3
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *buf, Size_t count);
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *buf, Size_t count);
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *buf, Size_t count);
d4286 3
a4288 1
STATIC void	S_deb_stack_n(pTHX_ SV** stack_base, I32 stack_min, I32 stack_max, I32 mark_min, I32 mark_max);
d4295 13
a4307 4
PERL_CALLCONV void	Perl_pad_undef(pTHX_ CV* cv);
PERL_CALLCONV PADOFFSET	Perl_pad_add_name(pTHX_ char *name, HV* typestash, HV* ourstash, bool clone);
PERL_CALLCONV PADOFFSET	Perl_pad_add_anon(pTHX_ SV* sv, OPCODE op_type);
PERL_CALLCONV void	Perl_pad_check_dup(pTHX_ char* name, bool is_our, HV* ourstash);
d4309 3
a4311 1
PERL_CALLCONV void	Perl_pad_setsv(pTHX_ PADOFFSET po, SV* sv);
d4315 11
a4325 2
PERL_CALLCONV void	Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full);
PERL_CALLCONV void	Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv);
a4326 1
PERL_CALLCONV void	Perl_pad_push(pTHX_ PADLIST *padlist, int depth, int has_args);
d4332 6
a4337 1
STATIC PADOFFSET	S_pad_findlex(pTHX_ const char* name, PADOFFSET newoff, const CV* innercv);
d4339 4
a4342 1
STATIC void	S_cv_dump(pTHX_ const CV *cv, const char *title);
a4343 1
STATIC CV*	S_cv_clone2(pTHX_ CV *proto, CV *outside);
d4350 3
a4352 2
PERL_CALLCONV int	Perl_get_debug_opts(pTHX_ char **s)
			__attribute__warn_unused_result__;
d4355 3
a4358 1
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV* hb);
a4359 4
#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC SV*	S_hv_delete_common(pTHX_ HV* tb, SV* key_sv, const char* key, STRLEN klen, int k_flags, I32 d_flags, U32 hash);
STATIC HE*	S_hv_fetch_common(pTHX_ HV* tb, SV* key_sv, const char* key, STRLEN klen, int flags, int action, SV* val, U32 hash);
#endif
d4361 22
a4382 1
			__attribute__warn_unused_result__;
d4384 3
a4386 1
PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV* hv, MAGIC* mg);
a4387 2
#if defined(DEBUGGING)
PERL_CALLCONV int	Perl_get_debug_opts_flags(pTHX_ char **s, int flags);
d4389 18
a4407 5
PERL_CALLCONV void	Perl_op_refcnt_lock(pTHX);
PERL_CALLCONV void	Perl_op_refcnt_unlock(pTHX);
PERL_CALLCONV char*	Perl_savesvpv(pTHX_ SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d4409 9
d4493 24
a4516 1
PERL_CALLCONV void	Perl_my_swabn(void* ptr, int n);
d4518 1
a4518 3
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV OP*	Perl_ck_anoncode(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4520 3
a4522 2
PERL_CALLCONV OP*	Perl_ck_bitop(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4524 7
a4530 2
PERL_CALLCONV OP*	Perl_ck_concat(pTHX_ OP *o)
			__attribute__warn_unused_result__;
a4531 2
PERL_CALLCONV OP*	Perl_ck_defined(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4533 2
a4534 2
PERL_CALLCONV OP*	Perl_ck_delete(pTHX_ OP *o)
			__attribute__warn_unused_result__;
a4535 2
PERL_CALLCONV OP*	Perl_ck_die(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4537 4
a4540 2
PERL_CALLCONV OP*	Perl_ck_eof(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4542 1
a4542 2
PERL_CALLCONV OP*	Perl_ck_eval(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4544 4
a4547 2
PERL_CALLCONV OP*	Perl_ck_exec(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4549 3
a4551 2
PERL_CALLCONV OP*	Perl_ck_exists(pTHX_ OP *o)
			__attribute__warn_unused_result__;
a4552 2
PERL_CALLCONV OP*	Perl_ck_exit(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4554 1
a4554 2
PERL_CALLCONV OP*	Perl_ck_ftst(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4556 4
a4559 2
PERL_CALLCONV OP*	Perl_ck_fun(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4561 2
a4562 2
PERL_CALLCONV OP*	Perl_ck_glob(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4564 3
a4566 2
PERL_CALLCONV OP*	Perl_ck_grep(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4568 2
a4569 2
PERL_CALLCONV OP*	Perl_ck_index(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4571 3
a4573 2
PERL_CALLCONV OP*	Perl_ck_join(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4575 3
a4577 2
PERL_CALLCONV OP*	Perl_ck_lengthconst(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4579 3
a4581 2
PERL_CALLCONV OP*	Perl_ck_lfun(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4583 5
a4587 2
PERL_CALLCONV OP*	Perl_ck_listiob(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4589 5
a4593 2
PERL_CALLCONV OP*	Perl_ck_match(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4595 3
a4597 2
PERL_CALLCONV OP*	Perl_ck_method(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4599 3
a4601 2
PERL_CALLCONV OP*	Perl_ck_null(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4603 2
a4604 2
PERL_CALLCONV OP*	Perl_ck_open(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4606 2
a4607 2
PERL_CALLCONV OP*	Perl_ck_repeat(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4609 4
a4612 2
PERL_CALLCONV OP*	Perl_ck_require(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4614 3
a4616 2
PERL_CALLCONV OP*	Perl_ck_return(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4618 2
a4619 2
PERL_CALLCONV OP*	Perl_ck_rfun(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4621 2
a4622 2
PERL_CALLCONV OP*	Perl_ck_rvconst(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4624 3
a4626 2
PERL_CALLCONV OP*	Perl_ck_sassign(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4628 2
a4629 2
PERL_CALLCONV OP*	Perl_ck_select(pTHX_ OP *o)
			__attribute__warn_unused_result__;
a4630 2
PERL_CALLCONV OP*	Perl_ck_shift(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4632 3
a4634 2
PERL_CALLCONV OP*	Perl_ck_sort(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4636 2
a4637 2
PERL_CALLCONV OP*	Perl_ck_spair(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4639 7
a4645 2
PERL_CALLCONV OP*	Perl_ck_split(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4647 2
a4648 2
PERL_CALLCONV OP*	Perl_ck_subr(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4650 3
a4652 2
PERL_CALLCONV OP*	Perl_ck_substr(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4654 2
a4655 2
PERL_CALLCONV OP*	Perl_ck_svconst(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4657 2
a4658 2
PERL_CALLCONV OP*	Perl_ck_trunc(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d4660 5
d4666 3
d4670 1
a4670 4
PERL_CALLCONV bool	Perl_is_utf8_string_loclen(pTHX_ const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
PERL_CALLCONV SV*	Perl_newSVhek(pTHX_ const HEK *hek)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d4672 3
a4674 2
PERL_CALLCONV bool	Perl_stashpv_hvname_match(pTHX_ const COP *cop, const HV *hv)
			__attribute__warn_unused_result__;
d4676 1
d4678 2
a4679 1
PERL_CALLCONV void	Perl_offer_nice_chunk(pTHX_ void *chunk, U32 chunk_size);
d4681 4
a4685 2
#ifdef DEBUG_LEAKING_SCALARS_FORK_DUMP
PERL_CALLCONV void	Perl_dump_sv_child(pTHX_ SV *sv);
d4687 9
a4696 2
#ifdef PERL_DONT_CREATE_GVSV
PERL_CALLCONV GV*	Perl_gv_SVadd(pTHX_ GV* gv);
d4698 17
a4714 2
PERL_CALLCONV bool	Perl_ckwarn(pTHX_ U32 w);
PERL_CALLCONV bool	Perl_ckwarn_d(pTHX_ U32 w);
a4715 1
PERL_CALLCONV void	Perl_my_clearenv(pTHX);
@


1.10
log
@sync in-tree perl with 5.8.6
@
text
@d1 2
a2 1
/*
d6 1
a6 1
 *    2000, 2001, 2002, 2003, 2004, by Larry Wall and others
d30 3
a32 1
PERL_CALLCONV bool	Perl_doing_taint(int argc, char** argv, char** env);
d40 12
a51 3
PERL_CALLCONV Malloc_t	Perl_malloc(MEM_SIZE nbytes);
PERL_CALLCONV Malloc_t	Perl_calloc(MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_realloc(Malloc_t where, MEM_SIZE nbytes);
d54 3
a56 1
PERL_CALLCONV MEM_SIZE	Perl_malloced_size(void *p);
d59 3
a61 1
PERL_CALLCONV void*	Perl_get_context(void);
d71 4
a74 2
PERL_CALLCONV CV*	Perl_gv_handler(pTHX_ HV* stash, I32 id);
PERL_CALLCONV OP*	Perl_append_elem(pTHX_ I32 optype, OP* head, OP* tail);
d87 3
a89 1
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV* ar, I32 key);
d91 6
a96 2
PERL_CALLCONV AV*	Perl_av_fake(pTHX_ I32 size, SV** svp);
PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV* ar, I32 key, I32 lval);
d98 6
a103 2
PERL_CALLCONV I32	Perl_av_len(pTHX_ AV* ar);
PERL_CALLCONV AV*	Perl_av_make(pTHX_ I32 size, SV** svp);
d107 3
a109 1
PERL_CALLCONV SV*	Perl_av_shift(pTHX_ AV* ar);
d113 12
a124 4
PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP* left, OP* pat);
PERL_CALLCONV OP*	Perl_block_end(pTHX_ I32 floor, OP* seq);
PERL_CALLCONV I32	Perl_block_gimme(pTHX);
PERL_CALLCONV int	Perl_block_start(pTHX_ int full);
d128 15
a142 5
PERL_CALLCONV bool	Perl_cando(pTHX_ Mode_t mode, Uid_t effective, Stat_t* statbufp);
PERL_CALLCONV U32	Perl_cast_ulong(pTHX_ NV f);
PERL_CALLCONV I32	Perl_cast_i32(pTHX_ NV f);
PERL_CALLCONV IV	Perl_cast_iv(pTHX_ NV f);
PERL_CALLCONV UV	Perl_cast_uv(pTHX_ NV f);
d144 3
a146 1
PERL_CALLCONV I32	Perl_my_chsize(pTHX_ int fd, Off_t length);
d151 10
a160 4
PERL_CALLCONV OP*	Perl_convert(pTHX_ I32 optype, I32 flags, OP* o);
PERL_CALLCONV void	Perl_croak(pTHX_ const char* pat, ...) __attribute__((noreturn))
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
PERL_CALLCONV void	Perl_vcroak(pTHX_ const char* pat, va_list* args) __attribute__((noreturn));
d162 4
a165 2
PERL_CALLCONV void	Perl_croak_nocontext(const char* pat, ...) __attribute__((noreturn))
	__attribute__format__(__printf__,1,2);
d167 2
a168 1
	__attribute__format__(__printf__,1,2);
d170 2
a171 1
	__attribute__format__(__printf__,1,2);
d173 2
a174 1
	__attribute__format__(__printf__,1,2);
d177 2
a178 1
	__attribute__format__(__printf__,1,2);
d180 2
a181 1
	__attribute__format__(__printf__,1,2);
d183 2
a184 1
	__attribute__format__(__printf__,2,3);
d186 2
a187 1
	__attribute__format__(__printf__,1,2);
d189 2
a190 1
	__attribute__format__(__printf__,2,3);
d192 2
a193 1
	__attribute__format__(__printf__,2,3);
d195 2
a196 1
	__attribute__format__(__printf__,2,3);
d198 2
a199 1
	__attribute__format__(__printf__,2,3);
d201 2
a202 1
	__attribute__format__(__printf__,2,3);
d204 2
a205 1
	__attribute__format__(__printf__,1,2);
d209 6
a214 2
PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ CV* cv);
PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ OP* o, CV* cv);
d216 1
a216 1
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cs);
d219 26
a244 7
PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV* buffer, int maxlen);
PERL_CALLCONV char**	Perl_get_op_descs(pTHX);
PERL_CALLCONV char**	Perl_get_op_names(pTHX);
PERL_CALLCONV char*	Perl_get_no_modify(pTHX);
PERL_CALLCONV U32*	Perl_get_opargs(pTHX);
PERL_CALLCONV PPADDR_t*	Perl_get_ppaddr(pTHX);
PERL_CALLCONV I32	Perl_cxinc(pTHX);
d246 2
a247 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d257 2
a258 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d293 3
a295 1
PERL_CALLCONV OP*	Perl_do_readline(pTHX);
d300 3
a302 1
PERL_CALLCONV Off_t	Perl_do_tell(pTHX_ GV* gv);
d308 3
a310 1
PERL_CALLCONV I32	Perl_dowantarray(pTHX);
d323 3
a325 1
PERL_CALLCONV char*	Perl_fbm_instr(pTHX_ unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags);
d333 2
a334 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d346 3
a348 1
PERL_CALLCONV GV*	Perl_gv_autoload4(pTHX_ HV* stash, const char* name, STRLEN len, I32 method);
d351 1
a351 1
PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, GV* gv, const char* prefix);
d360 1
a360 1
PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, GV* gv, const char* prefix);
d370 6
a375 2
PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, I32 klen);
PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV* tb, SV* key, U32 hash);
d378 1
a378 1
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV* hv, HE* entry);
d380 18
a397 6
PERL_CALLCONV char*	Perl_hv_iterkey(pTHX_ HE* entry, I32* retlen);
PERL_CALLCONV SV*	Perl_hv_iterkeysv(pTHX_ HE* entry);
PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV* tb);
PERL_CALLCONV SV*	Perl_hv_iternextsv(pTHX_ HV* hv, char** key, I32* retlen);
PERL_CALLCONV HE*	Perl_hv_iternext_flags(pTHX_ HV* tb, I32 flags);
PERL_CALLCONV SV*	Perl_hv_iterval(pTHX_ HV* tb, HE* entry);
d404 6
a409 2
PERL_CALLCONV I32	Perl_ibcmp(pTHX_ const char* a, const char* b, I32 len);
PERL_CALLCONV I32	Perl_ibcmp_locale(pTHX_ const char* a, const char* b, I32 len);
d411 4
a414 2
PERL_CALLCONV bool	Perl_ingroup(pTHX_ Gid_t testgid, Uid_t effective);
PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int, char **);
d419 84
a502 22
PERL_CALLCONV char*	Perl_instr(pTHX_ const char* big, const char* little);
PERL_CALLCONV bool	Perl_io_close(pTHX_ IO* io, bool not_implicit);
PERL_CALLCONV OP*	Perl_invert(pTHX_ OP* cmd);
PERL_CALLCONV bool	Perl_is_gv_magical(pTHX_ char *name, STRLEN len, U32 flags);
PERL_CALLCONV I32	Perl_is_lvalue_sub(pTHX);
PERL_CALLCONV U32	Perl_to_uni_upper_lc(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_title_lc(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_lower_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_ascii(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_cntrl(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_digit(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ UV c);
d507 56
a562 14
PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_xdigit_lc(pTHX_ UV c);
d564 1
d566 48
a613 17
PERL_CALLCONV bool	Perl_is_utf8_string_loc(pTHX_ U8 *s, STRLEN len, U8 **p);
PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_idcont(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_mark(pTHX_ U8 *p);
d615 3
a617 1
PERL_CALLCONV I32	Perl_keyword(pTHX_ char* d, I32 len);
d629 3
a631 1
PERL_CALLCONV I32	Perl_looks_like_number(pTHX_ SV* sv);
d635 4
a638 2
PERL_CALLCONV bool	Perl_grok_numeric_radix(pTHX_ const char **sp, const char *send);
PERL_CALLCONV UV	Perl_grok_oct(pTHX_ char* start, STRLEN* len, I32* flags, NV *result);
d665 3
a667 1
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg);
d701 2
a702 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d705 1
a705 1
PERL_CALLCONV void	Perl_sortsv(pTHX_ SV ** array, size_t num_elts, SVCOMPARE_t cmp);
d708 3
a710 1
PERL_CALLCONV MAGIC*	Perl_mg_find(pTHX_ SV* sv, int type);
d729 6
a734 2
PERL_CALLCONV void	Perl_my_exit(pTHX_ U32 status) __attribute__((noreturn));
PERL_CALLCONV void	Perl_my_failure_exit(pTHX) __attribute__((noreturn));
d741 3
a743 1
PERL_CALLCONV I32	Perl_my_memcmp(const char* s1, const char* s2, I32 len);
d755 15
a769 3
PERL_CALLCONV short	Perl_my_swap(pTHX_ short s);
PERL_CALLCONV long	Perl_my_htonl(pTHX_ long l);
PERL_CALLCONV long	Perl_my_ntohl(pTHX_ long l);
d772 8
a779 2
PERL_CALLCONV OP*	Perl_newANONLIST(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newANONHASH(pTHX_ OP* o);
d781 8
a788 2
PERL_CALLCONV OP*	Perl_newASSIGNOP(pTHX_ I32 flags, OP* left, I32 optype, OP* right);
PERL_CALLCONV OP*	Perl_newCONDOP(pTHX_ I32 flags, OP* expr, OP* trueop, OP* falseop);
d791 24
a814 6
PERL_CALLCONV OP*	Perl_newFOROP(pTHX_ I32 flags, char* label, line_t forline, OP* sclr, OP* expr, OP*block, OP*cont);
PERL_CALLCONV OP*	Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP* left, OP* right);
PERL_CALLCONV OP*	Perl_newLOOPEX(pTHX_ I32 type, OP* label);
PERL_CALLCONV OP*	Perl_newLOOPOP(pTHX_ I32 flags, I32 debuggable, OP* expr, OP* block);
PERL_CALLCONV OP*	Perl_newNULLLIST(pTHX);
PERL_CALLCONV OP*	Perl_newOP(pTHX_ I32 optype, I32 flags);
d816 12
a827 3
PERL_CALLCONV OP*	Perl_newRANGE(pTHX_ I32 flags, OP* left, OP* right);
PERL_CALLCONV OP*	Perl_newSLICEOP(pTHX_ I32 flags, OP* subscript, OP* listop);
PERL_CALLCONV OP*	Perl_newSTATEOP(pTHX_ I32 flags, char* label, OP* o);
d830 104
a933 26
PERL_CALLCONV AV*	Perl_newAV(pTHX);
PERL_CALLCONV OP*	Perl_newAVREF(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newBINOP(pTHX_ I32 type, I32 flags, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_newCVREF(pTHX_ I32 flags, OP* o);
PERL_CALLCONV OP*	Perl_newGVOP(pTHX_ I32 type, I32 flags, GV* gv);
PERL_CALLCONV GV*	Perl_newGVgen(pTHX_ char* pack);
PERL_CALLCONV OP*	Perl_newGVREF(pTHX_ I32 type, OP* o);
PERL_CALLCONV OP*	Perl_newHVREF(pTHX_ OP* o);
PERL_CALLCONV HV*	Perl_newHV(pTHX);
PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV* hv);
PERL_CALLCONV IO*	Perl_newIO(pTHX);
PERL_CALLCONV OP*	Perl_newLISTOP(pTHX_ I32 type, I32 flags, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_newPADOP(pTHX_ I32 type, I32 flags, SV* sv);
PERL_CALLCONV OP*	Perl_newPMOP(pTHX_ I32 type, I32 flags);
PERL_CALLCONV OP*	Perl_newPVOP(pTHX_ I32 type, I32 flags, char* pv);
PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV* pref);
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *sv);
PERL_CALLCONV SV*	Perl_newSV(pTHX_ STRLEN len);
PERL_CALLCONV OP*	Perl_newSVREF(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newSVOP(pTHX_ I32 type, I32 flags, SV* sv);
PERL_CALLCONV SV*	Perl_newSViv(pTHX_ IV i);
PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ UV u);
PERL_CALLCONV SV*	Perl_newSVnv(pTHX_ NV n);
PERL_CALLCONV SV*	Perl_newSVpv(pTHX_ const char* s, STRLEN len);
PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char* s, STRLEN len);
PERL_CALLCONV SV*	Perl_newSVpvn_share(pTHX_ const char* s, I32 len, U32 hash);
d935 8
a942 2
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char* pat, va_list* args);
d944 15
a958 3
PERL_CALLCONV SV*	Perl_newSVsv(pTHX_ SV* old);
PERL_CALLCONV OP*	Perl_newUNOP(pTHX_ I32 type, I32 flags, OP* first);
PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, I32 whileline, OP* expr, OP* block, OP* cont);
a959 1
PERL_CALLCONV PERL_SI*	Perl_new_stackinfo(pTHX_ I32 stitems, I32 cxitems);
d962 6
a967 2
PERL_CALLCONV char*	Perl_ninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend);
PERL_CALLCONV OP*	Perl_oopsCV(pTHX_ OP* o);
d972 9
a980 3
PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ char* name);
PERL_CALLCONV OP*	Perl_oopsAV(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_oopsHV(pTHX_ OP* o);
d1039 3
a1041 1
PERL_CALLCONV regnode*	Perl_regnext(pTHX_ regnode* p);
d1044 3
a1046 1
PERL_CALLCONV char*	Perl_rninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend);
d1057 12
a1068 3
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* pv);
PERL_CALLCONV char*	Perl_savesharedpv(pTHX_ const char* pv);
PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* pv, I32 len);
d1089 3
a1091 1
PERL_CALLCONV void	Perl_save_hints(pTHX);
d1111 1
d1113 5
d1128 1
a1128 1
PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV* bigsv, SV* littlesv, I32 start_shift, I32 end_shift, I32 *state, I32 last);
d1133 1
a1133 1
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* sv, I32 len, U32 hash);
d1161 2
a1162 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
d1180 3
a1182 1
PERL_CALLCONV bool	Perl_sv_derived_from(pTHX_ SV* sv, const char* name);
d1195 8
a1202 3
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV* sv, SV* obj, int how, MGVTBL *vtbl, const char* name, I32 namlen	);
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV* oldsv);
PERL_CALLCONV SV*	Perl_sv_newmortal(pTHX);
d1212 3
a1214 1
PERL_CALLCONV char*	Perl_sv_reftype(pTHX_ SV* sv, int ob);
d1219 2
a1220 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
d1235 3
a1237 1
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV* sv);
d1246 3
a1248 1
PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv);
d1253 1
a1253 1
PERL_CALLCONV UV	Perl_to_utf8_case(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp, SV **swash, char *normal, char *special);
d1271 12
a1282 3
PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ U8* s, U8 *e);
PERL_CALLCONV IV	Perl_utf8_distance(pTHX_ U8 *a, U8 *b);
PERL_CALLCONV U8*	Perl_utf8_hop(pTHX_ U8 *s, I32 off);
d1286 4
a1289 4
PERL_CALLCONV UV	Perl_utf8_to_uvchr(pTHX_ U8 *s, STRLEN* retlen);
PERL_CALLCONV UV	Perl_utf8_to_uvuni(pTHX_ U8 *s, STRLEN* retlen);
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
d1295 3
a1297 1
PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags);
d1303 3
a1305 1
PERL_CALLCONV UV	Perl_get_hash_seed(pTHX);
d1309 2
a1310 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d1313 2
a1314 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
d1328 3
a1330 1
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level);
d1332 12
a1343 3
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes);
PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes);
d1354 2
a1355 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
d1361 2
a1362 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
d1372 3
a1374 1
PERL_CALLCONV MGVTBL*	Perl_get_vtbl(pTHX_ int vtbl_id);
d1377 2
a1378 1
	__attribute__format__(__printf__,pTHX_3,pTHX_4);
d1393 18
a1410 6
PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv);
/* PERL_CALLCONV char*	sv_pv(pTHX_ SV *sv); */
/* PERL_CALLCONV char*	sv_pvutf8(pTHX_ SV *sv); */
/* PERL_CALLCONV char*	sv_pvbyte(pTHX_ SV *sv); */
d1422 3
a1424 1
PERL_CALLCONV void	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
d1428 45
a1472 11
PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max, CLONE_PARAMS* param);
PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si, CLONE_PARAMS* param);
PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl, CLONE_PARAMS* param);
PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, PerlInterpreter* proto_perl);
PERL_CALLCONV HE*	Perl_he_dup(pTHX_ HE* e, bool shared, CLONE_PARAMS* param);
PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ REGEXP* r, CLONE_PARAMS* param);
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type, CLONE_PARAMS* param);
PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR* dp);
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp, CLONE_PARAMS* param);
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg, CLONE_PARAMS* param);
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ SV* sstr, CLONE_PARAMS* param);
d1476 8
a1483 2
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX);
PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *tbl, void *sv);
d1494 6
a1499 2
PERL_CALLCONV char *	Perl_custom_op_name(pTHX_ OP* op);
PERL_CALLCONV char *	Perl_custom_op_desc(pTHX_ OP* op);
d1514 18
a1531 6
STATIC I32	S_do_trans_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_count(pTHX_ SV *sv);
STATIC I32	S_do_trans_complex(pTHX_ SV *sv);
STATIC I32	S_do_trans_simple_utf8(pTHX_ SV *sv);
STATIC I32	S_do_trans_count_utf8(pTHX_ SV *sv);
STATIC I32	S_do_trans_complex_utf8(pTHX_ SV *sv);
d1542 4
a1545 2
STATIC void	S_more_he(pTHX);
STATIC HE*	S_new_he(pTHX);
d1547 4
a1550 1
STATIC HEK*	S_save_hek_flags(pTHX_ const char *str, I32 len, U32 hash, int flags);
d1552 7
a1558 3
STATIC void	S_unshare_hek_or_pvn(pTHX_ HEK* hek, const char* sv, I32 len, U32 hash);
STATIC HEK*	S_share_hek_flags(pTHX_ const char* sv, I32 len, U32 hash, int flags);
STATIC void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg);
d1563 5
a1567 2
STATIC int	S_magic_methpack(pTHX_ SV *sv, MAGIC *mg, char *meth);
STATIC int	S_magic_methcall(pTHX_ SV *sv, MAGIC *mg, char *meth, I32 f, int n, SV *val);
d1571 6
a1576 2
STATIC I32	S_list_assignment(pTHX_ OP *o);
STATIC void	S_bad_type(pTHX_ I32 n, char *t, char *name, OP *kid);
a1578 2
STATIC void	S_no_bareword_allowed(pTHX_ OP *o);
STATIC OP*	S_no_fh_allowed(pTHX_ OP *o);
d1580 6
a1585 4
STATIC OP*	S_too_few_arguments(pTHX_ OP *o, char* name);
STATIC OP*	S_too_many_arguments(pTHX_ OP *o, char* name);
STATIC OP*	S_newDEFSVOP(pTHX);
STATIC OP*	S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp);
d1587 2
a1588 3
STATIC bool	S_is_handle_constructor(pTHX_ OP *o, I32 argnum);
STATIC char*	S_gv_ename(pTHX_ GV *gv);
STATIC bool	S_scalar_mod_type(pTHX_ OP *o, I32 type);
d1593 11
d1606 4
a1609 1
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ int m, size_t sz);
d1615 2
a1616 2
STATIC void	S_forbid_setid(pTHX_ char *);
STATIC void	S_incpush(pTHX_ char *, int, int, int);
d1622 1
a1622 1
STATIC void	S_init_postdump_symbols(pTHX_ int, char **, char **);
d1624 3
a1626 1
STATIC void	S_my_exit_jump(pTHX) __attribute__((noreturn));
d1628 3
a1630 3
STATIC void	S_open_script(pTHX_ char *, bool, SV *);
STATIC void	S_usage(pTHX_ char *);
STATIC void	S_validate_suid(pTHX_ char *, char*);
d1635 4
a1638 2
STATIC void*	S_run_body(pTHX_ I32 oldscope);
STATIC void	S_call_body(pTHX_ OP *myop, int is_eval);
d1652 3
a1654 1
STATIC SV*	S_refto(pTHX_ SV* sv);
d1662 2
a1663 2
STATIC char *	S_group_end(pTHX_ char *pat, char *patend, char ender);
STATIC char *	S_get_num(pTHX_ char *ppat, I32 *);
d1666 3
a1668 1
STATIC SV*	S_is_an_int(pTHX_ char *s, STRLEN l);
d1673 4
a1676 2
STATIC OP*	S_docatch(pTHX_ OP *o);
STATIC void*	S_docatch_body(pTHX);
d1680 24
a1703 8
STATIC OP*	S_dofindlabel(pTHX_ OP *o, char *label, OP **opstack, OP **oplimit);
STATIC OP*	S_doparseform(pTHX_ SV *sv);
STATIC bool	S_num_overflow(NV value, I32 fldsize, I32 frcsize);
STATIC I32	S_dopoptoeval(pTHX_ I32 startingblock);
STATIC I32	S_dopoptolabel(pTHX_ char *label);
STATIC I32	S_dopoptoloop(pTHX_ I32 startingblock);
STATIC I32	S_dopoptosub(pTHX_ I32 startingblock);
STATIC I32	S_dopoptosub_at(pTHX_ PERL_CONTEXT* cxstk, I32 startingblock);
d1705 12
a1716 3
STATIC OP*	S_doeval(pTHX_ int gimme, OP** startop, CV* outside, U32 seq);
STATIC PerlIO *	S_doopen_pm(pTHX_ const char *name, const char *mode);
STATIC bool	S_path_is_absolute(pTHX_ char *name);
d1722 6
a1727 2
STATIC CV*	S_get_db_sub(pTHX_ SV **svp, CV *cv);
STATIC SV*	S_method_common(pTHX_ SV* meth, U32* hashp);
d1734 3
a1736 1
STATIC int	S_dooneliner(pTHX_ char *cmd, char *filename);
d1741 15
a1755 13
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t*, I32, I32 *);
STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t*, U8, U32);
STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t*, I32 *);
STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t*, I32 *, I32);
STATIC void	S_reguni(pTHX_ struct RExC_state_t*, UV, char *, STRLEN*);
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t*);
STATIC I32	S_regcurly(pTHX_ char *);
STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t*, U8);
STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t*, I32 *);
STATIC void	S_reginsert(pTHX_ struct RExC_state_t*, U8, regnode *);
STATIC void	S_regoptail(pTHX_ struct RExC_state_t*, regnode *, regnode *);
STATIC void	S_regtail(pTHX_ struct RExC_state_t*, regnode *, regnode *);
STATIC char*	S_regwhite(pTHX_ char *, char *);
d1763 1
a1763 1
STATIC int	S_cl_is_anything(pTHX_ struct regnode_charclass_class *cl);
d1766 7
a1772 5
STATIC void	S_cl_and(pTHX_ struct regnode_charclass_class *cl, struct regnode_charclass_class *and_with);
STATIC void	S_cl_or(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl, struct regnode_charclass_class *or_with);
STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t*, regnode **scanp, I32 *deltap, regnode *last, struct scan_data_t *data, U32 flags);
STATIC I32	S_add_data(pTHX_ struct RExC_state_t*, I32 n, char *s);
STATIC void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...) __attribute__((noreturn));
d1778 15
a1792 5
STATIC I32	S_regmatch(pTHX_ regnode *prog);
STATIC I32	S_regrepeat(pTHX_ regnode *p, I32 max);
STATIC I32	S_regrepeat_hard(pTHX_ regnode *p, I32 max, I32 *lp);
STATIC I32	S_regtry(pTHX_ regexp *prog, char *startpos);
STATIC bool	S_reginclass(pTHX_ regnode *n, U8 *p, STRLEN *lenp, bool do_utf8sv_is_utf8);
d1797 15
a1811 5
STATIC U8*	S_reghop(pTHX_ U8 *pos, I32 off);
STATIC U8*	S_reghop3(pTHX_ U8 *pos, I32 off, U8 *lim);
STATIC U8*	S_reghopmaybe(pTHX_ U8 *pos, I32 off);
STATIC U8*	S_reghopmaybe3(pTHX_ U8 *pos, I32 off, U8 *lim);
STATIC char*	S_find_byclass(pTHX_ regexp * prog, regnode *c, char *s, char *strend, char *startpos, I32 norun);
d1818 1
a1818 1
STATIC void	S_debprof(pTHX_ OP *o);
d1826 9
a1834 15
STATIC IV	S_asIV(pTHX_ SV* sv);
STATIC UV	S_asUV(pTHX_ SV* sv);
STATIC SV*	S_more_sv(pTHX);
STATIC void	S_more_xiv(pTHX);
STATIC void	S_more_xnv(pTHX);
STATIC void	S_more_xpv(pTHX);
STATIC void	S_more_xpviv(pTHX);
STATIC void	S_more_xpvnv(pTHX);
STATIC void	S_more_xpvcv(pTHX);
STATIC void	S_more_xpvav(pTHX);
STATIC void	S_more_xpvhv(pTHX);
STATIC void	S_more_xpvmg(pTHX);
STATIC void	S_more_xpvlv(pTHX);
STATIC void	S_more_xpvbm(pTHX);
STATIC void	S_more_xrv(pTHX);
d1870 3
a1872 1
STATIC I32	S_expect_number(pTHX_ char** pattern);
d1874 2
a1875 5
#  if defined(USE_ITHREADS)
STATIC SV*	S_gv_share(pTHX_ SV *sv, CLONE_PARAMS *param);
#  endif
STATIC bool	S_utf8_mg_pos(pTHX_ SV *sv, MAGIC **mgp, STRLEN **cachep, I32 i, I32 *offsetp, I32 uoff, U8 **sp, U8 *start, U8 *send);
STATIC bool	S_utf8_mg_pos_init(pTHX_ SV *sv, MAGIC **mgp, STRLEN **cachep, I32 i, I32 *offsetp, U8 *s, U8 *start);
d1885 25
a1909 9
STATIC char*	S_scan_const(pTHX_ char *start);
STATIC char*	S_scan_formline(pTHX_ char *s);
STATIC char*	S_scan_heredoc(pTHX_ char *s);
STATIC char*	S_scan_ident(pTHX_ char *s, char *send, char *dest, STRLEN destlen, I32 ck_uni);
STATIC char*	S_scan_inputsymbol(pTHX_ char *start);
STATIC char*	S_scan_pat(pTHX_ char *start, I32 type);
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims);
STATIC char*	S_scan_subst(pTHX_ char *start);
STATIC char*	S_scan_trans(pTHX_ char *start);
d1911 8
a1918 4
STATIC char*	S_skipspace(pTHX_ char *s);
STATIC char*	S_swallow_bom(pTHX_ U8 *s);
STATIC void	S_checkcomma(pTHX_ char *s, char *name, char *what);
STATIC void	S_force_ident(pTHX_ char *s, int kind);
d1923 4
a1926 2
STATIC void	S_missingterm(pTHX_ char *s);
STATIC void	S_no_op(pTHX_ char *what, char *s);
d1928 16
a1943 6
STATIC I32	S_sublex_done(pTHX);
STATIC I32	S_sublex_push(pTHX);
STATIC I32	S_sublex_start(pTHX);
STATIC char *	S_filter_gets(pTHX_ SV *sv, PerlIO *fp, STRLEN append);
STATIC HV *	S_find_in_my_stash(pTHX_ char *pkgname, I32 len);
STATIC SV*	S_new_constant(pTHX_ char *s, STRLEN len, const char *key, SV *sv, SV *pv, const char *type);
d1945 1
a1945 1
STATIC void	S_tokereport(pTHX_ char *thing, char *s, I32 rv);
d1949 1
a1949 5
STATIC char*	S_incl_perldb(pTHX);
#if 0
STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen);
STATIC I32	S_utf16rev_textfilter(pTHX_ int idx, SV *sv, int maxlen);
#endif
d1964 1
a1964 1
STATIC COP*	S_closest_cop(pTHX_ COP *cop, OP *o);
d1966 2
d1974 4
d1991 34
a2024 24
PERL_CALLCONV int	Perl_PerlIO_close(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_fill(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_fileno(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_eof(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_error(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_flush(pTHX_ PerlIO *);
PERL_CALLCONV void	Perl_PerlIO_clearerr(pTHX_ PerlIO *);
PERL_CALLCONV void	Perl_PerlIO_set_cnt(pTHX_ PerlIO *, int);
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *, STDCHAR *, int);
PERL_CALLCONV void	Perl_PerlIO_setlinebuf(pTHX_ PerlIO *);
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *, void *, Size_t);
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *, const void *, Size_t);
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *, const void *, Size_t);
PERL_CALLCONV Off_t	Perl_PerlIO_tell(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_seek(pTHX_ PerlIO *, Off_t, int);

PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_base(pTHX_ PerlIO *);
PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_ptr(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_get_cnt(pTHX_ PerlIO *);

PERL_CALLCONV PerlIO *	Perl_PerlIO_stdin(pTHX);
PERL_CALLCONV PerlIO *	Perl_PerlIO_stdout(pTHX);
PERL_CALLCONV PerlIO *	Perl_PerlIO_stderr(pTHX);
d2032 4
a2035 1
PERL_CALLCONV PADLIST*	Perl_pad_new(pTHX_ int flags);
d2049 3
d2054 1
a2054 1
STATIC PADOFFSET	S_pad_findlex(pTHX_ char* name, PADOFFSET newoff, CV* innercv);
d2056 1
a2056 1
STATIC void	S_cv_dump(pTHX_ CV *cv, char *title);
d2060 3
a2062 1
PERL_CALLCONV CV*	Perl_find_runcv(pTHX_ U32 *db_seqp);
d2065 3
a2067 1
PERL_CALLCONV int	Perl_get_debug_opts(pTHX_ char **s);
a2069 3



d2076 4
a2079 2
PERL_CALLCONV SV*	Perl_hv_scalar(pTHX_ HV* hv);
PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV* hv, MAGIC*	mg);
d2084 228
d2313 4
@


1.9
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d1366 3
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d5 1
a5 1
 *    2000, 2001, 2002, 2003, by Larry Wall and others
d1022 1
a1022 1
STATIC void	S_open_script(pTHX_ char *, bool, SV *, int *fd);
d1024 1
a1024 1
STATIC void	S_validate_suid(pTHX_ char *, char*, int);
d1067 2
a1068 1
STATIC void	S_doparseform(pTHX_ SV *sv);
d1198 1
a1198 1
STATIC I32	S_visit(pTHX_ SVFUNC_t f);
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a973 1
STATIC SV**	S_hv_fetch_flags(pTHX_ HV* tb, const char* key, I32 klen, I32 lval, int flags);
d1355 10
a1365 1

@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d4 2
a5 1
 *    Copyright (c) 1997-2002, Larry Wall
d11 5
a15 2
 * This file is autogenerated from data in embed.pl.  Edit that file
 * and run 'make regen_headers' to effect changes.
a17 1

d29 1
d103 1
a103 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
d107 1
a107 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d109 1
a109 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d111 1
a111 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d113 1
a113 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d116 1
a116 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d118 1
a118 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d120 1
a120 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
d122 1
a122 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d124 1
a124 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
d126 1
a126 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
d128 1
a128 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
d130 1
a130 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
d132 1
a132 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
d134 1
a134 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d152 1
a152 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
d162 1
a162 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
d229 1
a229 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
d332 1
d412 1
d418 1
d428 1
a428 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
d524 1
a524 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
d532 1
a532 1
PERL_CALLCONV char*	Perl_new_vstring(pTHX_ char *vstr, SV *sv);
d539 1
a539 1
PERL_CALLCONV PADOFFSET	Perl_pad_allocmy(pTHX_ char* name);
d543 1
a543 1
PERL_CALLCONV void	Perl_pad_leavemy(pTHX_ I32 fill);
d547 1
a547 1
PERL_CALLCONV void	Perl_pad_swipe(pTHX_ PADOFFSET po);
d581 1
d619 1
d624 1
d676 1
d702 1
a702 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
d716 1
a716 1
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV* sv, OP** startp, char* code, AV** avp);
d744 1
d750 1
a750 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
d753 1
d791 1
d794 1
a794 1
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* id, OP* arg);
d816 3
d822 1
a822 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
d825 1
a825 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
d829 1
a844 6
#if defined(LEAKTEST)
PERL_CALLCONV Malloc_t	Perl_safexmalloc(I32 x, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safexcalloc(I32 x, MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safexrealloc(Malloc_t where, MEM_SIZE size);
PERL_CALLCONV void	Perl_safexfree(Malloc_t where);
#endif
d854 1
a854 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
d860 1
a860 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
d863 1
d873 1
a873 4
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_3,pTHX_4)))
#endif
;
a993 2
STATIC PADOFFSET	S_pad_addlex(pTHX_ SV* name);
STATIC PADOFFSET	S_pad_findlex(pTHX_ char* name, PADOFFSET newoff, U32 seq, CV* startcv, I32 cx_ix, I32 saweval, U32 flags);
a998 4
#  if defined(DEBUG_CLOSURES)
STATIC void	S_cv_dump(pTHX_ CV *cv);
#  endif
STATIC CV*	S_cv_clone2(pTHX_ CV *proto, CV *outside);
d1004 4
a1007 4
#  if defined(PL_OP_SLAB_ALLOC)
STATIC void*	S_Slab_Alloc(pTHX_ int m, size_t sz);
STATIC void	S_Slab_Free(pTHX_ void *op);
#  endif
d1013 1
a1013 1
STATIC void	S_incpush(pTHX_ char *, int, int);
a1045 1
STATIC U32	S_seed(pTHX);
d1049 7
a1056 1
STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m);
a1058 4
STATIC char *	S_next_symbol(pTHX_ char *pat, char *patend);
STATIC I32	S_find_count(pTHX_ char **ppat, char *patend, int *star);
STATIC char *	S_group_end(pTHX_ char *pat, char *patend, char ender);
STATIC I32	S_measure_struct(pTHX_ char *pat, char *patend);
d1075 2
a1076 2
STATIC OP*	S_doeval(pTHX_ int gimme, OP** startop);
STATIC PerlIO *	S_doopen_pmc(pTHX_ const char *name, const char *mode);
d1212 2
d1276 4
a1279 3
#  if defined(LEAKTEST)
STATIC void	S_xstat(pTHX_ int);
#  endif
d1320 35
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d2 7
a14 1

d22 1
a22 1
PERL_CALLCONV void	perl_destruct(PerlInterpreter* interp);
a32 1
#if defined(MYMALLOC)
d37 1
a46 15
#if defined(PERL_OBJECT)
class CPerlObj {
public:
	struct interpreter interp;
	CPerlObj(IPerlMem*, IPerlMem*, IPerlMem*, IPerlEnv*, IPerlStdIO*,
	    IPerlLIO*, IPerlDir*, IPerlSock*, IPerlProc*);
	void* operator new(size_t nSize, IPerlMem *pvtbl);
#ifndef __BORLANDC__
	static void operator delete(void* pPerl, IPerlMem *pvtbl);
#endif
	int do_aspawn (void *vreally, void **vmark, void **vsp);
#endif
#if defined(PERL_OBJECT)
public:
#else
a47 1
#endif
d51 1
d84 1
d94 1
a94 1
#if defined(USE_THREADS)
d204 1
d220 5
d241 1
d270 1
a270 1
#if defined(USE_THREADS)
d298 1
d311 1
a311 1
PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV* tb, const char* key, U32 klen, I32 flags);
d313 1
a313 1
PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, U32 klen);
d315 1
a315 1
PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV* tb, const char* key, U32 klen, I32 lval);
d323 1
d327 1
a327 1
PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV* tb, const char* key, U32 klen, SV* val, U32 hash);
d329 1
d333 1
d335 1
d338 1
a344 31
PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_ascii(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_cntrl(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_digit(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_upper(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_title(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_lower(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_xdigit_lc(pTHX_ U32 c);
d348 32
d385 1
d403 2
d412 5
d423 1
d437 1
a437 1
#if defined(USE_THREADS)
d481 1
d491 1
d497 1
a497 1
#if !defined(HAS_BCOPY) || !defined(HAS_SAFE_BCOPY)
d506 3
a515 1
#if !defined(PERL_OBJECT)
d518 1
a518 1
#endif
d521 1
d533 1
a533 1
PERL_CALLCONV void	Perl_newCONSTSUB(pTHX_ HV* stash, char* name, SV* sv);
d572 1
d585 1
d602 3
a604 6
#if defined(PERL_OBJECT)
PERL_CALLCONV void	Perl_construct(pTHX);
PERL_CALLCONV void	Perl_destruct(pTHX);
PERL_CALLCONV void	Perl_free(pTHX);
PERL_CALLCONV int	Perl_run(pTHX);
PERL_CALLCONV int	Perl_parse(pTHX_ XSINIT_t xsinit, int argc, char** argv, char** env);
d606 5
a610 2
#if defined(USE_THREADS)
PERL_CALLCONV struct perl_thread*	Perl_new_struct_thread(pTHX_ struct perl_thread *t);
d617 1
d633 1
d635 1
a635 1
PERL_CALLCONV void	Perl_pmflag(pTHX_ U16* pmfl, int ch);
d646 1
d667 3
a669 2
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* sv);
PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* sv, I32 len);
d684 1
a723 1
PERL_CALLCONV char*	Perl_sharepvn(pTHX_ const char* sv, I32 len, U32 hash);
d735 1
a735 1
PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV* sv, STRLEN* lp);
d738 1
d757 2
a758 2
PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV* sv, const char* ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV* dsv, SV* ssv);
d769 1
d785 1
d792 1
a792 1
PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp);
d795 1
a806 1
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV* sv, IV num);
d810 1
d816 1
a816 1
PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV* dsv, SV* ssv);
d821 1
d829 1
a829 1
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *sv, U8 *ptr);
d832 5
a836 3
PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ U8 *p);
PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ U8 *p);
PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ U8 *p);
d840 1
a840 1
#if defined(USE_THREADS)
d843 1
d855 10
a864 3
PERL_CALLCONV UV	Perl_utf8_to_uv_simple(pTHX_ U8 *s, STRLEN* retlen);
PERL_CALLCONV UV	Perl_utf8_to_uv(pTHX_ U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
PERL_CALLCONV U8*	Perl_uv_to_utf8(pTHX_ U8 *d, UV uv);
d910 1
a910 1
#if defined(USE_THREADS)
a928 1
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *sv, IV iv);
d936 1
a936 1
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *sv, char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
d959 4
a962 4
PERL_CALLCONV char*	Perl_sv_pv(pTHX_ SV *sv);
PERL_CALLCONV char*	Perl_sv_pvutf8(pTHX_ SV *sv);
PERL_CALLCONV char*	Perl_sv_pvbyte(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_utf8_upgrade(pTHX_ SV *sv);
d967 1
a967 2
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *tsv, SV *sv);
PERL_CALLCONV void	Perl_sv_del_backref(pTHX_ SV *sv);
d977 3
a979 3
PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max);
PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si);
PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl);
d981 3
a983 3
PERL_CALLCONV HE*	Perl_he_dup(pTHX_ HE* e, bool shared);
PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ REGEXP* r);
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type);
d985 3
a987 3
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp);
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg);
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ SV* sstr);
d1003 8
a1010 3
#if defined(PERL_OBJECT)
protected:
#else
a1011 1
#endif
d1029 1
d1038 1
a1038 1
STATIC HEK*	S_save_hek(pTHX_ const char *str, I32 len, U32 hash);
d1040 4
a1061 3
STATIC U8*	S_trlist_upgrade(pTHX_ U8** sp, U8** ep);
STATIC void	S_op_clear(pTHX_ OP* o);
STATIC void	S_null(pTHX_ OP* o);
d1069 1
d1071 1
d1074 1
a1074 1
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs);
d1076 2
a1077 1
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs);
d1080 1
d1113 1
a1113 1
#  if defined(USE_THREADS)
a1118 1
STATIC void	S_doencodes(pTHX_ SV* sv, char* s, I32 len);
d1121 4
d1128 4
d1150 1
a1150 1
STATIC void	S_qsortsv(pTHX_ SV ** array, size_t num_elts, SVCOMPARE_t f);
d1169 6
a1174 7
STATIC regnode*	S_reg(pTHX_ I32, I32 *);
STATIC regnode*	S_reganode(pTHX_ U8, U32);
STATIC regnode*	S_regatom(pTHX_ I32 *);
STATIC regnode*	S_regbranch(pTHX_ I32 *, I32);
STATIC void	S_reguni(pTHX_ UV, char *, STRLEN*);
STATIC regnode*	S_regclass(pTHX);
STATIC regnode*	S_regclassutf8(pTHX);
d1176 5
a1180 5
STATIC regnode*	S_reg_node(pTHX_ U8);
STATIC regnode*	S_regpiece(pTHX_ I32 *);
STATIC void	S_reginsert(pTHX_ U8, regnode *);
STATIC void	S_regoptail(pTHX_ regnode *, regnode *);
STATIC void	S_regtail(pTHX_ regnode *, regnode *);
d1182 2
a1183 1
STATIC char*	S_nextchar(pTHX);
d1186 3
a1188 2
STATIC void	S_scan_commit(pTHX_ struct scan_data_t *data);
STATIC void	S_cl_anything(pTHX_ struct regnode_charclass_class *cl);
d1190 2
a1191 2
STATIC void	S_cl_init(pTHX_ struct regnode_charclass_class *cl);
STATIC void	S_cl_init_zero(pTHX_ struct regnode_charclass_class *cl);
d1193 3
a1195 3
STATIC void	S_cl_or(pTHX_ struct regnode_charclass_class *cl, struct regnode_charclass_class *or_with);
STATIC I32	S_study_chunk(pTHX_ regnode **scanp, I32 *deltap, regnode *last, struct scan_data_t *data, U32 flags);
STATIC I32	S_add_data(pTHX_ I32 n, char *s);
d1197 2
a1198 2
STATIC I32	S_regpposixcc(pTHX_ I32 value);
STATIC void	S_checkposixcc(pTHX);
d1206 1
a1206 2
STATIC bool	S_reginclass(pTHX_ regnode *p, I32 c);
STATIC bool	S_reginclassutf8(pTHX_ regnode *f, U8* p);
d1212 1
d1214 1
d1216 2
d1220 2
a1221 1
#if defined(PERL_IN_RUN_C) || defined(PERL_DECL_PROT)
d1272 3
a1274 1
#  if defined(DEBUGGING)
d1277 8
d1290 1
a1290 1
STATIC char*	S_force_version(pTHX_ char *start);
d1293 1
d1321 3
a1330 3
#  if defined(CRIPPLED_CC)
STATIC int	S_uni(pTHX_ I32 f, char *s);
#  endif
d1337 5
a1341 1
STATIC SV*	S_isa_lookup(pTHX_ HV *stash, const char *name, int len, int level);
d1345 1
a1345 1
STATIC char*	S_stdize_locale(pTHX_ char* locs);
d1352 41
a1392 3
#if defined(PERL_OBJECT)
};
#endif
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d64 1
d133 1
a133 5
PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,3,4)))
#endif
;
d179 5
d222 1
a222 1
PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int flag);
d285 1
a285 1
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ char* key, unsigned long *len);
d296 1
d304 1
d338 2
d374 2
a375 1
PERL_CALLCONV int	Perl_is_utf8_char(pTHX_ U8 *p);
d399 1
a399 5
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_3,pTHX_4)))
#endif
;
d428 1
d603 3
a605 3
PERL_CALLCONV void	Perl_new_collate(pTHX_ const char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ const char* newctype);
PERL_CALLCONV void	Perl_new_numeric(pTHX_ const char* newcoll);
d657 1
d671 1
d678 1
d687 4
a690 4
PERL_CALLCONV NV	Perl_scan_bin(pTHX_ char* start, I32 len, I32* retlen);
PERL_CALLCONV NV	Perl_scan_hex(pTHX_ char* start, I32 len, I32* retlen);
PERL_CALLCONV char*	Perl_scan_num(pTHX_ char* s);
PERL_CALLCONV NV	Perl_scan_oct(pTHX_ char* start, I32 len, I32* retlen);
d733 1
a733 1
PERL_CALLCONV void	Perl_sv_clean_all(pTHX);
d813 4
a816 3
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U16* p, U8 *d, I32 bytelen);
PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U16* p, U8 *d, I32 bytelen);
PERL_CALLCONV I32	Perl_utf8_distance(pTHX_ U8 *a, U8 *b);
d818 5
a822 1
PERL_CALLCONV UV	Perl_utf8_to_uv(pTHX_ U8 *s, I32* retlen);
d827 1
a827 1
PERL_CALLCONV void	Perl_report_closed_fh(pTHX_ GV *gv, IO *io, const char *func, const char *obj);
d844 3
a846 3
#if defined(USE_PURE_BISON)
PERL_CALLCONV int	Perl_yylex(pTHX_ YYSTYPE *lvalp, int *lcharp);
#else
a847 1
#endif
d869 3
d927 2
d956 6
d976 6
a981 10
STATIC I32	S_do_trans_CC_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_CC_count(pTHX_ SV *sv);
STATIC I32	S_do_trans_CC_complex(pTHX_ SV *sv);
STATIC I32	S_do_trans_UU_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_UU_count(pTHX_ SV *sv);
STATIC I32	S_do_trans_UU_complex(pTHX_ SV *sv);
STATIC I32	S_do_trans_UC_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_CU_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_UC_trivial(pTHX_ SV *sv);
STATIC I32	S_do_trans_CU_trivial(pTHX_ SV *sv);
d1014 1
a1090 1
STATIC void	S_free_closures(pTHX);
d1117 1
a1117 1
STATIC void	S_reguni(pTHX_ UV, char *, I32*);
d1210 1
a1210 3
STATIC void	S_visit(pTHX_ SVFUNC_t f);
STATIC void	S_sv_add_backref(pTHX_ SV *tsv, SV *sv);
STATIC void	S_sv_del_backref(pTHX_ SV *sv);
d1233 1
d1247 1
d1269 1
@


1.3
log
@perl5.005_03 (stock)
@
text
@d1 7
a7 3
#ifndef PERL_CALLCONV
#  define PERL_CALLCONV
#endif 
a8 4
#ifdef PERL_OBJECT
#define VIRTUAL virtual PERL_CALLCONV
#else
#define VIRTUAL PERL_CALLCONV
d10 23
d35 2
a36 3
/* NOTE!!! When new virtual functions are added, they must be added at
 * the end of this file to maintain binary compatibility with PERL_OBJECT
 */
d38 1
d40 17
a56 44
#ifndef NEXT30_NO_ATTRIBUTE
#ifndef HASATTRIBUTE       /* disable GNU-cc attribute checking? */
#ifdef  __attribute__      /* Avoid possible redefinition errors */
#undef  __attribute__
#endif
#define __attribute__(attr)
#endif
#endif
#ifdef OVERLOAD
VIRTUAL SV*	amagic_call _((SV* left,SV* right,int method,int dir));
VIRTUAL bool	Gv_AMupdate _((HV* stash));
#endif /* OVERLOAD */
VIRTUAL OP*	append_elem _((I32 optype, OP* head, OP* tail));
VIRTUAL OP*	append_list _((I32 optype, LISTOP* first, LISTOP* last));
VIRTUAL I32	apply _((I32 type, SV** mark, SV** sp));
VIRTUAL void	assertref _((OP* o));
VIRTUAL bool	avhv_exists_ent _((AV *ar, SV* keysv, U32 hash));
VIRTUAL SV**	avhv_fetch_ent _((AV *ar, SV* keysv, I32 lval, U32 hash));
VIRTUAL HE*	avhv_iternext _((AV *ar));
VIRTUAL SV*	avhv_iterval _((AV *ar, HE* entry));
VIRTUAL HV*	avhv_keys _((AV *ar));
VIRTUAL void	av_clear _((AV* ar));
VIRTUAL void	av_extend _((AV* ar, I32 key));
VIRTUAL AV*	av_fake _((I32 size, SV** svp));
VIRTUAL SV**	av_fetch _((AV* ar, I32 key, I32 lval));
VIRTUAL void	av_fill _((AV* ar, I32 fill));
VIRTUAL I32	av_len _((AV* ar));
VIRTUAL AV*	av_make _((I32 size, SV** svp));
VIRTUAL SV*	av_pop _((AV* ar));
VIRTUAL void	av_push _((AV* ar, SV* val));
VIRTUAL void	av_reify _((AV* ar));
VIRTUAL SV*	av_shift _((AV* ar));
VIRTUAL SV**	av_store _((AV* ar, I32 key, SV* val));
VIRTUAL void	av_undef _((AV* ar));
VIRTUAL void	av_unshift _((AV* ar, I32 num));
VIRTUAL OP*	bind_match _((I32 type, OP* left, OP* pat));
VIRTUAL OP*	block_end _((I32 floor, OP* seq));
VIRTUAL I32	block_gimme _((void));
VIRTUAL int	block_start _((int full));
VIRTUAL void	boot_core_UNIVERSAL _((void));
VIRTUAL void	call_list _((I32 oldscope, AV* av_list));
VIRTUAL I32	cando _((I32 bit, I32 effective, Stat_t* statbufp));
#ifndef CASTNEGFLOAT
VIRTUAL U32	cast_ulong _((double f));
d58 40
d99 1
a99 1
VIRTUAL I32	my_chsize _((int fd, Off_t length));
d101 2
a102 43
VIRTUAL OP*	ck_gvconst _((OP*  o));
VIRTUAL OP*	ck_retarget _((OP* o));
#ifdef USE_THREADS
VIRTUAL MAGIC *	condpair_magic _((SV *sv));
#endif
VIRTUAL OP*	convert _((I32 optype, I32 flags, OP* o));
VIRTUAL void	croak _((const char* pat,...)) __attribute__((noreturn));
VIRTUAL void	cv_ckproto _((CV* cv, GV* gv, char* p));
VIRTUAL CV*	cv_clone _((CV* proto));
VIRTUAL SV*	cv_const_sv _((CV* cv));
VIRTUAL SV*	op_const_sv _((OP* o, CV* cv));
VIRTUAL void	cv_undef _((CV* cv));
VIRTUAL void	cx_dump _((PERL_CONTEXT* cs));
VIRTUAL SV*	filter_add _((filter_t funcp, SV* datasv));
VIRTUAL void	filter_del _((filter_t funcp));
VIRTUAL I32	filter_read _((int idx, SV* buffer, int maxlen));
VIRTUAL char **	get_op_descs _((void));
VIRTUAL char **	get_op_names _((void));
VIRTUAL char *	get_no_modify _((void));
VIRTUAL U32 *	get_opargs _((void));
VIRTUAL I32	cxinc _((void));
VIRTUAL void	deb _((const char* pat,...));
VIRTUAL void	deb_growlevel _((void));
VIRTUAL void	debprofdump _((void));
VIRTUAL I32	debop _((OP* o));
VIRTUAL I32	debstack _((void));
VIRTUAL I32	debstackptrs _((void));
VIRTUAL char*	delimcpy _((char* to, char* toend, char* from, char* fromend,
		    int delim, I32* retlen));
VIRTUAL void	deprecate _((char* s));
VIRTUAL OP*	die _((const char* pat,...));
VIRTUAL OP*	die_where _((char* message));
VIRTUAL void	dounwind _((I32 cxix));
VIRTUAL bool	do_aexec _((SV* really, SV** mark, SV** sp));
VIRTUAL int	do_binmode _((PerlIO *fp, int iotype, int flag));
VIRTUAL void    do_chop _((SV* asv, SV* sv));
VIRTUAL bool	do_close _((GV* gv, bool not_implicit));
VIRTUAL bool	do_eof _((GV* gv));
VIRTUAL bool	do_exec _((char* cmd));
VIRTUAL void	do_execfree _((void));
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
I32	do_ipcctl _((I32 optype, SV** mark, SV** sp));
I32	do_ipcget _((I32 optype, SV** mark, SV** sp));
d104 123
a226 5
VIRTUAL void	do_join _((SV* sv, SV* del, SV** mark, SV** sp));
VIRTUAL OP*	do_kv _((ARGSproto));
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
I32	do_msgrcv _((SV** mark, SV** sp));
I32	do_msgsnd _((SV** mark, SV** sp));
d228 1
a228 7
VIRTUAL bool	do_open _((GV* gv, char* name, I32 len,
		   int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp));
VIRTUAL void	do_pipe _((SV* sv, GV* rgv, GV* wgv));
VIRTUAL bool	do_print _((SV* sv, PerlIO* fp));
VIRTUAL OP*	do_readline _((void));
VIRTUAL I32	do_chomp _((SV* sv));
VIRTUAL bool	do_seek _((GV* gv, long pos, int whence));
d230 246
a475 165
I32	do_semop _((SV** mark, SV** sp));
I32	do_shmio _((I32 optype, SV** mark, SV** sp));
#endif
VIRTUAL void	do_sprintf _((SV* sv, I32 len, SV** sarg));
VIRTUAL long	do_sysseek _((GV* gv, long pos, int whence));
VIRTUAL long	do_tell _((GV* gv));
VIRTUAL I32	do_trans _((SV* sv, OP* arg));
VIRTUAL void	do_vecset _((SV* sv));
VIRTUAL void	do_vop _((I32 optype, SV* sv, SV* left, SV* right));
VIRTUAL I32	dowantarray _((void));
VIRTUAL void	dump_all _((void));
VIRTUAL void	dump_eval _((void));
#ifdef DUMP_FDS  /* See util.c */
VIRTUAL void	dump_fds _((char* s));
#endif
VIRTUAL void	dump_form _((GV* gv));
VIRTUAL void	dump_gv _((GV* gv));
#ifdef MYMALLOC
VIRTUAL void	dump_mstats _((char* s));
#endif
VIRTUAL void	dump_op _((OP* arg));
VIRTUAL void	dump_pm _((PMOP* pm));
VIRTUAL void	dump_packsubs _((HV* stash));
VIRTUAL void	dump_sub _((GV* gv));
VIRTUAL void	fbm_compile _((SV* sv, U32 flags));
VIRTUAL char*	fbm_instr _((unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags));
VIRTUAL char*	find_script _((char *scriptname, bool dosearch, char **search_ext, I32 flags));
#ifdef USE_THREADS
VIRTUAL PADOFFSET	find_threadsv _((char *name));
#endif
VIRTUAL OP*	force_list _((OP* arg));
VIRTUAL OP*	fold_constants _((OP* arg));
VIRTUAL char*	form _((const char* pat, ...));
VIRTUAL void	free_tmps _((void));
VIRTUAL OP*	gen_constant_list _((OP* o));
VIRTUAL void	gp_free _((GV* gv));
VIRTUAL GP*	gp_ref _((GP* gp));
VIRTUAL GV*	gv_AVadd _((GV* gv));
VIRTUAL GV*	gv_HVadd _((GV* gv));
VIRTUAL GV*	gv_IOadd _((GV* gv));
VIRTUAL GV*	gv_autoload4 _((HV* stash, char* name, STRLEN len, I32 method));
VIRTUAL void	gv_check _((HV* stash));
VIRTUAL void	gv_efullname _((SV* sv, GV* gv));
VIRTUAL void	gv_efullname3 _((SV* sv, GV* gv, char* prefix));
VIRTUAL GV*	gv_fetchfile _((char* name));
VIRTUAL GV*	gv_fetchmeth _((HV* stash, char* name, STRLEN len, I32 level));
VIRTUAL GV*	gv_fetchmethod _((HV* stash, char* name));
VIRTUAL GV*	gv_fetchmethod_autoload _((HV* stash, char* name, I32 autoload));
VIRTUAL GV*	gv_fetchpv _((char* name, I32 add, I32 sv_type));
VIRTUAL void	gv_fullname _((SV* sv, GV* gv));
VIRTUAL void	gv_fullname3 _((SV* sv, GV* gv, char* prefix));
VIRTUAL void	gv_init _((GV* gv, HV* stash, char* name, STRLEN len, int multi));
VIRTUAL HV*	gv_stashpv _((char* name, I32 create));
VIRTUAL HV*	gv_stashpvn _((char* name, U32 namelen, I32 create));
VIRTUAL HV*	gv_stashsv _((SV* sv, I32 create));
VIRTUAL void	hv_clear _((HV* tb));
VIRTUAL void	hv_delayfree_ent _((HV* hv, HE* entry));
VIRTUAL SV*	hv_delete _((HV* tb, char* key, U32 klen, I32 flags));
VIRTUAL SV*	hv_delete_ent _((HV* tb, SV* key, I32 flags, U32 hash));
VIRTUAL bool	hv_exists _((HV* tb, char* key, U32 klen));
VIRTUAL bool	hv_exists_ent _((HV* tb, SV* key, U32 hash));
VIRTUAL SV**	hv_fetch _((HV* tb, char* key, U32 klen, I32 lval));
VIRTUAL HE*	hv_fetch_ent _((HV* tb, SV* key, I32 lval, U32 hash));
VIRTUAL void	hv_free_ent _((HV* hv, HE* entry));
VIRTUAL I32	hv_iterinit _((HV* tb));
VIRTUAL char*	hv_iterkey _((HE* entry, I32* retlen));
VIRTUAL SV*	hv_iterkeysv _((HE* entry));
VIRTUAL HE*	hv_iternext _((HV* tb));
VIRTUAL SV*	hv_iternextsv _((HV* hv, char** key, I32* retlen));
VIRTUAL SV*	hv_iterval _((HV* tb, HE* entry));
VIRTUAL void	hv_ksplit _((HV* hv, IV newmax));
VIRTUAL void	hv_magic _((HV* hv, GV* gv, int how));
VIRTUAL SV**	hv_store _((HV* tb, char* key, U32 klen, SV* val, U32 hash));
VIRTUAL HE*	hv_store_ent _((HV* tb, SV* key, SV* val, U32 hash));
VIRTUAL void	hv_undef _((HV* tb));
VIRTUAL I32	ibcmp _((char* a, char* b, I32 len));
VIRTUAL I32	ibcmp_locale _((char* a, char* b, I32 len));
VIRTUAL I32	ingroup _((I32 testgid, I32 effective));
VIRTUAL void	init_stacks _((ARGSproto));
VIRTUAL U32	intro_my _((void));
VIRTUAL char*	instr _((char* big, char* little));
VIRTUAL bool	io_close _((IO* io));
VIRTUAL OP*	invert _((OP* cmd));
VIRTUAL OP*	jmaybe _((OP* arg));
VIRTUAL I32	keyword _((char* d, I32 len));
VIRTUAL void	leave_scope _((I32 base));
VIRTUAL void	lex_end _((void));
VIRTUAL void	lex_start _((SV* line));
VIRTUAL OP*	linklist _((OP* o));
VIRTUAL OP*	list _((OP* o));
VIRTUAL OP*	listkids _((OP* o));
VIRTUAL OP*	localize _((OP* arg, I32 lexical));
VIRTUAL I32	looks_like_number _((SV* sv));
VIRTUAL int	magic_clearenv	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_clear_all_env _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_clearpack	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_clearsig	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_existspack _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_freeregexp _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_get	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getarylen	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getdefelem _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getglob	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getnkeys	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getpack	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getpos	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getsig	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getsubstr	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_gettaint	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getuvar	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getvec	_((SV* sv, MAGIC* mg));
VIRTUAL U32	magic_len	_((SV* sv, MAGIC* mg));
#ifdef USE_THREADS
VIRTUAL int	magic_mutexfree	_((SV* sv, MAGIC* mg));
#endif /* USE_THREADS */
VIRTUAL int	magic_nextpack	_((SV* sv, MAGIC* mg, SV* key));
VIRTUAL int	magic_set	_((SV* sv, MAGIC* mg));
#ifdef OVERLOAD
VIRTUAL int	magic_setamagic	_((SV* sv, MAGIC* mg));
#endif /* OVERLOAD */
VIRTUAL int	magic_setarylen	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setbm	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setdbline	_((SV* sv, MAGIC* mg));
#ifdef USE_LOCALE_COLLATE
VIRTUAL int	magic_setcollxfrm _((SV* sv, MAGIC* mg));
#endif
VIRTUAL int	magic_setdefelem _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setenv	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setfm	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setisa	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setglob	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setmglob	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setnkeys	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setpack	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setpos	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setsig	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setsubstr	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_settaint	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setuvar	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setvec	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_set_all_env _((SV* sv, MAGIC* mg));
VIRTUAL U32	magic_sizepack	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_wipepack	_((SV* sv, MAGIC* mg));
VIRTUAL void	magicname _((char* sym, char* name, I32 namlen));
int	main _((int argc, char** argv, char** env));
#ifdef MYMALLOC
VIRTUAL MEM_SIZE	malloced_size _((void *p));
#endif
VIRTUAL void	markstack_grow _((void));
#ifdef USE_LOCALE_COLLATE
VIRTUAL char*	mem_collxfrm _((const char* s, STRLEN len, STRLEN* xlen));
#endif
VIRTUAL char*	mess _((const char* pat, va_list* args));
VIRTUAL int	mg_clear _((SV* sv));
VIRTUAL int	mg_copy _((SV* sv, SV* nsv, char* key, I32 klen));
VIRTUAL MAGIC*	mg_find _((SV* sv, int type));
VIRTUAL int	mg_free _((SV* sv));
VIRTUAL int	mg_get _((SV* sv));
VIRTUAL U32	mg_length _((SV* sv));
VIRTUAL void	mg_magical _((SV* sv));
VIRTUAL int	mg_set _((SV* sv));
VIRTUAL I32	mg_size _((SV* sv));
VIRTUAL OP*	mod _((OP* o, I32 type));
VIRTUAL char*	moreswitches _((char* s));
VIRTUAL OP*	my _((OP* o));
d477 1
a477 1
VIRTUAL char*	my_bcopy _((char* from, char* to, I32 len));
d480 1
a480 1
char*	my_bzero _((char* loc, I32 len));
d482 4
a485 3
VIRTUAL void	my_exit _((U32 status)) __attribute__((noreturn));
VIRTUAL void	my_failure_exit _((void)) __attribute__((noreturn));
VIRTUAL I32	my_lstat _((ARGSproto));
d487 1
a487 1
VIRTUAL I32	my_memcmp _((char* s1, char* s2, I32 len));
d490 1
a490 1
VIRTUAL void*	my_memset _((char* loc, I32 ch, I32 len));
d492 342
a833 85
#ifndef PERL_OBJECT
VIRTUAL I32	my_pclose _((PerlIO* ptr));
VIRTUAL PerlIO*	my_popen _((char* cmd, char* mode));
#endif
VIRTUAL void	my_setenv _((char* nam, char* val));
VIRTUAL I32	my_stat _((ARGSproto));
#ifdef MYSWAP
VIRTUAL short	my_swap _((short s));
VIRTUAL long	my_htonl _((long l));
VIRTUAL long	my_ntohl _((long l));
#endif
VIRTUAL void	my_unexec _((void));
VIRTUAL OP*	newANONLIST _((OP* o));
VIRTUAL OP*	newANONHASH _((OP* o));
VIRTUAL OP*	newANONSUB _((I32 floor, OP* proto, OP* block));
VIRTUAL OP*	newASSIGNOP _((I32 flags, OP* left, I32 optype, OP* right));
VIRTUAL OP*	newCONDOP _((I32 flags, OP* expr, OP* trueop, OP* falseop));
VIRTUAL void	newCONSTSUB _((HV* stash, char* name, SV* sv));
VIRTUAL void	newFORM _((I32 floor, OP* o, OP* block));
VIRTUAL OP*	newFOROP _((I32 flags, char* label, line_t forline, OP* sclr, OP* expr, OP*block, OP*cont));
VIRTUAL OP*	newLOGOP _((I32 optype, I32 flags, OP* left, OP* right));
VIRTUAL OP*	newLOOPEX _((I32 type, OP* label));
VIRTUAL OP*	newLOOPOP _((I32 flags, I32 debuggable, OP* expr, OP* block));
VIRTUAL OP*	newNULLLIST _((void));
VIRTUAL OP*	newOP _((I32 optype, I32 flags));
VIRTUAL void	newPROG _((OP* o));
VIRTUAL OP*	newRANGE _((I32 flags, OP* left, OP* right));
VIRTUAL OP*	newSLICEOP _((I32 flags, OP* subscript, OP* list));
VIRTUAL OP*	newSTATEOP _((I32 flags, char* label, OP* o));
VIRTUAL CV*	newSUB _((I32 floor, OP* o, OP* proto, OP* block));
VIRTUAL CV*	newXS _((char* name, void (*subaddr)(CV* cv _CPERLproto), char* filename));
VIRTUAL AV*	newAV _((void));
VIRTUAL OP*	newAVREF _((OP* o));
VIRTUAL OP*	newBINOP _((I32 type, I32 flags, OP* first, OP* last));
VIRTUAL OP*	newCVREF _((I32 flags, OP* o));
VIRTUAL OP*	newGVOP _((I32 type, I32 flags, GV* gv));
VIRTUAL GV*	newGVgen _((char* pack));
VIRTUAL OP*	newGVREF _((I32 type, OP* o));
VIRTUAL OP*	newHVREF _((OP* o));
VIRTUAL HV*	newHV _((void));
VIRTUAL HV*	newHVhv _((HV* hv));
VIRTUAL IO*	newIO _((void));
VIRTUAL OP*	newLISTOP _((I32 type, I32 flags, OP* first, OP* last));
VIRTUAL OP*	newPMOP _((I32 type, I32 flags));
VIRTUAL OP*	newPVOP _((I32 type, I32 flags, char* pv));
VIRTUAL SV*	newRV _((SV* pref));
VIRTUAL SV*	newRV_noinc _((SV *sv));
VIRTUAL SV*	newSV _((STRLEN len));
VIRTUAL OP*	newSVREF _((OP* o));
VIRTUAL OP*	newSVOP _((I32 type, I32 flags, SV* sv));
VIRTUAL SV*	newSViv _((IV i));
VIRTUAL SV*	newSVnv _((double n));
VIRTUAL SV*	newSVpv _((char* s, STRLEN len));
VIRTUAL SV*	newSVpvn _((char *s, STRLEN len));
VIRTUAL SV*	newSVpvf _((const char* pat, ...));
VIRTUAL SV*	newSVrv _((SV* rv, char* classname));
VIRTUAL SV*	newSVsv _((SV* old));
VIRTUAL OP*	newUNOP _((I32 type, I32 flags, OP* first));
VIRTUAL OP*	newWHILEOP _((I32 flags, I32 debuggable, LOOP* loop,
		      I32 whileline, OP* expr, OP* block, OP* cont));
#ifdef USE_THREADS
VIRTUAL struct perl_thread *	new_struct_thread _((struct perl_thread *t));
#endif
VIRTUAL PERL_SI *	new_stackinfo _((I32 stitems, I32 cxitems));
VIRTUAL PerlIO*	nextargv _((GV* gv));
VIRTUAL char*	ninstr _((char* big, char* bigend, char* little, char* lend));
VIRTUAL OP*	oopsCV _((OP* o));
VIRTUAL void	op_free _((OP* arg));
VIRTUAL void	package _((OP* o));
VIRTUAL PADOFFSET	pad_alloc _((I32 optype, U32 tmptype));
VIRTUAL PADOFFSET	pad_allocmy _((char* name));
VIRTUAL PADOFFSET	pad_findmy _((char* name));
VIRTUAL OP*	oopsAV _((OP* o));
VIRTUAL OP*	oopsHV _((OP* o));
VIRTUAL void	pad_leavemy _((I32 fill));
VIRTUAL SV*	pad_sv _((PADOFFSET po));
VIRTUAL void	pad_free _((PADOFFSET po));
VIRTUAL void	pad_reset _((void));
VIRTUAL void	pad_swipe _((PADOFFSET po));
VIRTUAL void	peep _((OP* o));
#ifndef PERL_OBJECT
PerlInterpreter*	perl_alloc _((void));
#endif
#ifdef PERL_OBJECT
VIRTUAL void    perl_atexit _((void(*fn)(CPerlObj *, void *), void* ptr));
d835 1
a835 1
void    perl_atexit _((void(*fn)(void *), void*));
d837 103
a939 10
VIRTUAL I32	perl_call_argv _((char* sub_name, I32 flags, char** argv));
VIRTUAL I32	perl_call_method _((char* methname, I32 flags));
VIRTUAL I32	perl_call_pv _((char* sub_name, I32 flags));
VIRTUAL I32	perl_call_sv _((SV* sv, I32 flags));
#ifdef PERL_OBJECT
VIRTUAL void	perl_construct _((void));
VIRTUAL void	perl_destruct _((void));
#else
void	perl_construct _((PerlInterpreter* sv_interp));
void	perl_destruct _((PerlInterpreter* sv_interp));
d941 3
a943 4
VIRTUAL SV*	perl_eval_pv _((char* p, I32 croak_on_error));
VIRTUAL I32	perl_eval_sv _((SV* sv, I32 flags));
#ifdef PERL_OBJECT
VIRTUAL void	perl_free _((void));
d945 1
a945 1
void	perl_free _((PerlInterpreter* sv_interp));
d947 308
a1254 229
VIRTUAL SV*	perl_get_sv _((char* name, I32 create));
VIRTUAL AV*	perl_get_av _((char* name, I32 create));
VIRTUAL HV*	perl_get_hv _((char* name, I32 create));
VIRTUAL CV*	perl_get_cv _((char* name, I32 create));
VIRTUAL int	perl_init_i18nl10n _((int printwarn));
VIRTUAL int	perl_init_i18nl14n _((int printwarn));
VIRTUAL void	perl_new_collate _((char* newcoll));
VIRTUAL void	perl_new_ctype _((char* newctype));
VIRTUAL void	perl_new_numeric _((char* newcoll));
VIRTUAL void	perl_set_numeric_local _((void));
VIRTUAL void	perl_set_numeric_standard _((void));
#ifdef PERL_OBJECT
VIRTUAL int	perl_parse _((void(*xsinit)(CPerlObj*), int argc, char** argv, char** env));
#else
int	perl_parse _((PerlInterpreter* sv_interp, void(*xsinit)(void), int argc, char** argv, char** env));
#endif
VIRTUAL void	perl_require_pv _((char* pv));
#define perl_requirepv perl_require_pv
#ifdef PERL_OBJECT
VIRTUAL int	perl_run _((void));
#else
int	perl_run _((PerlInterpreter* sv_interp));
#endif
VIRTUAL void	pidgone _((int pid, int status));
VIRTUAL void	pmflag _((U16* pmfl, int ch));
VIRTUAL OP*	pmruntime _((OP* pm, OP* expr, OP* repl));
VIRTUAL OP*	pmtrans _((OP* o, OP* expr, OP* repl));
VIRTUAL OP*	pop_return _((void));
VIRTUAL void	pop_scope _((void));
VIRTUAL OP*	prepend_elem _((I32 optype, OP* head, OP* tail));
VIRTUAL void	push_return _((OP* o));
VIRTUAL void	push_scope _((void));
VIRTUAL OP*	ref _((OP* o, I32 type));
VIRTUAL OP*	refkids _((OP* o, I32 type));
VIRTUAL void	regdump _((regexp* r));
VIRTUAL I32	pregexec _((regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, U32 nosave));
VIRTUAL void	pregfree _((struct regexp* r));
VIRTUAL regexp*	pregcomp _((char* exp, char* xend, PMOP* pm));
VIRTUAL I32	regexec_flags _((regexp* prog, char* stringarg, char* strend,
			 char* strbeg, I32 minend, SV* screamer,
			 void* data, U32 flags));
VIRTUAL regnode* regnext _((regnode* p));
VIRTUAL void	regprop _((SV* sv, regnode* o));
VIRTUAL void	repeatcpy _((char* to, char* from, I32 len, I32 count));
VIRTUAL char*	rninstr _((char* big, char* bigend, char* little, char* lend));
VIRTUAL Sighandler_t rsignal _((int i, Sighandler_t t));
VIRTUAL int	rsignal_restore _((int i, Sigsave_t* t));
VIRTUAL int	rsignal_save _((int i, Sighandler_t t1, Sigsave_t* t2));
VIRTUAL Sighandler_t rsignal_state _((int i));
VIRTUAL void	rxres_free _((void** rsp));
VIRTUAL void	rxres_restore _((void** rsp, REGEXP* prx));
VIRTUAL void	rxres_save _((void** rsp, REGEXP* prx));
#ifndef HAS_RENAME
VIRTUAL I32	same_dirent _((char* a, char* b));
#endif
VIRTUAL char*	savepv _((char* sv));
VIRTUAL char*	savepvn _((char* sv, I32 len));
VIRTUAL void	savestack_grow _((void));
VIRTUAL void	save_aelem _((AV* av, I32 idx, SV **sptr));
VIRTUAL void	save_aptr _((AV** aptr));
VIRTUAL AV*	save_ary _((GV* gv));
VIRTUAL void	save_clearsv _((SV** svp));
VIRTUAL void	save_delete _((HV* hv, char* key, I32 klen));
#ifndef titan  /* TitanOS cc can't handle this */
#ifdef PERL_OBJECT
typedef void (CPerlObj::*DESTRUCTORFUNC) _((void*));
VIRTUAL void	save_destructor _((DESTRUCTORFUNC f, void* p));
#else
void	save_destructor _((void (*f)(void*), void* p));
#endif
#endif /* titan */
VIRTUAL void	save_freesv _((SV* sv));
VIRTUAL void	save_freeop _((OP* o));
VIRTUAL void	save_freepv _((char* pv));
VIRTUAL void	save_gp _((GV* gv, I32 empty));
VIRTUAL HV*	save_hash _((GV* gv));
VIRTUAL void	save_helem _((HV* hv, SV *key, SV **sptr));
VIRTUAL void	save_hints _((void));
VIRTUAL void	save_hptr _((HV** hptr));
VIRTUAL void	save_I16 _((I16* intp));
VIRTUAL void	save_I32 _((I32* intp));
VIRTUAL void	save_int _((int* intp));
VIRTUAL void	save_item _((SV* item));
VIRTUAL void	save_iv _((IV* iv));
VIRTUAL void	save_list _((SV** sarg, I32 maxsarg));
VIRTUAL void	save_long _((long* longp));
VIRTUAL void	save_nogv _((GV* gv));
VIRTUAL void	save_op _((void));
VIRTUAL SV*	save_scalar _((GV* gv));
VIRTUAL void	save_pptr _((char** pptr));
VIRTUAL void	save_sptr _((SV** sptr));
VIRTUAL SV*	save_svref _((SV** sptr));
VIRTUAL SV**	save_threadsv _((PADOFFSET i));
VIRTUAL OP*	sawparens _((OP* o));
VIRTUAL OP*	scalar _((OP* o));
VIRTUAL OP*	scalarkids _((OP* o));
VIRTUAL OP*	scalarseq _((OP* o));
VIRTUAL OP*	scalarvoid _((OP* o));
VIRTUAL UV	scan_hex _((char* start, I32 len, I32* retlen));
VIRTUAL char*	scan_num _((char* s));
VIRTUAL UV	scan_oct _((char* start, I32 len, I32* retlen));
VIRTUAL OP*	scope _((OP* o));
VIRTUAL char*	screaminstr _((SV* bigsv, SV* littlesv, I32 start_shift, I32 end_shift, I32 *state, I32 last));
#ifndef VMS
VIRTUAL I32	setenv_getix _((char* nam));
#endif
VIRTUAL void	setdefout _((GV* gv));
VIRTUAL char*	sharepvn _((char* sv, I32 len, U32 hash));
VIRTUAL HEK*	share_hek _((char* sv, I32 len, U32 hash));
VIRTUAL Signal_t sighandler _((int sig));
VIRTUAL SV**	stack_grow _((SV** sp, SV**p, int n));
VIRTUAL I32	start_subparse _((I32 is_format, U32 flags));
VIRTUAL void	sub_crush_depth _((CV* cv));
VIRTUAL bool	sv_2bool _((SV* sv));
VIRTUAL CV*	sv_2cv _((SV* sv, HV** st, GV** gvp, I32 lref));
VIRTUAL IO*	sv_2io _((SV* sv));
VIRTUAL IV	sv_2iv _((SV* sv));
VIRTUAL SV*	sv_2mortal _((SV* sv));
VIRTUAL double	sv_2nv _((SV* sv));
VIRTUAL char*	sv_2pv _((SV* sv, STRLEN* lp));
VIRTUAL UV	sv_2uv _((SV* sv));
VIRTUAL IV	sv_iv _((SV* sv));
VIRTUAL UV	sv_uv _((SV* sv));
VIRTUAL double	sv_nv _((SV* sv));
VIRTUAL char *	sv_pvn _((SV *sv, STRLEN *len));
VIRTUAL I32	sv_true _((SV *sv));
VIRTUAL void	sv_add_arena _((char* ptr, U32 size, U32 flags));
VIRTUAL int	sv_backoff _((SV* sv));
VIRTUAL SV*	sv_bless _((SV* sv, HV* stash));
VIRTUAL void	sv_catpvf _((SV* sv, const char* pat, ...));
VIRTUAL void	sv_catpv _((SV* sv, char* ptr));
VIRTUAL void	sv_catpvn _((SV* sv, char* ptr, STRLEN len));
VIRTUAL void	sv_catsv _((SV* dsv, SV* ssv));
VIRTUAL void	sv_chop _((SV* sv, char* ptr));
VIRTUAL void	sv_clean_all _((void));
VIRTUAL void	sv_clean_objs _((void));
VIRTUAL void	sv_clear _((SV* sv));
VIRTUAL I32	sv_cmp _((SV* sv1, SV* sv2));
VIRTUAL I32	sv_cmp_locale _((SV* sv1, SV* sv2));
#ifdef USE_LOCALE_COLLATE
VIRTUAL char*	sv_collxfrm _((SV* sv, STRLEN* nxp));
#endif
VIRTUAL OP*	sv_compile_2op _((SV* sv, OP** startp, char* code, AV** avp));
VIRTUAL void	sv_dec _((SV* sv));
VIRTUAL void	sv_dump _((SV* sv));
VIRTUAL bool	sv_derived_from _((SV* sv, char* name));
VIRTUAL I32	sv_eq _((SV* sv1, SV* sv2));
VIRTUAL void	sv_free _((SV* sv));
VIRTUAL void	sv_free_arenas _((void));
VIRTUAL char*	sv_gets _((SV* sv, PerlIO* fp, I32 append));
#ifndef DOSISH
VIRTUAL char*	sv_grow _((SV* sv, I32 newlen));
#else
VIRTUAL char*	sv_grow _((SV* sv, unsigned long newlen));
#endif
VIRTUAL void	sv_inc _((SV* sv));
VIRTUAL void	sv_insert _((SV* bigsv, STRLEN offset, STRLEN len, char* little, STRLEN littlelen));
VIRTUAL int	sv_isa _((SV* sv, char* name));
VIRTUAL int	sv_isobject _((SV* sv));
VIRTUAL STRLEN	sv_len _((SV* sv));
VIRTUAL void	sv_magic _((SV* sv, SV* obj, int how, char* name, I32 namlen));
VIRTUAL SV*	sv_mortalcopy _((SV* oldsv));
VIRTUAL SV*	sv_newmortal _((void));
VIRTUAL SV*	sv_newref _((SV* sv));
VIRTUAL char*	sv_peek _((SV* sv));
VIRTUAL char*	sv_pvn_force _((SV* sv, STRLEN* lp));
VIRTUAL char*	sv_reftype _((SV* sv, int ob));
VIRTUAL void	sv_replace _((SV* sv, SV* nsv));
VIRTUAL void	sv_report_used _((void));
VIRTUAL void	sv_reset _((char* s, HV* stash));
VIRTUAL void	sv_setpvf _((SV* sv, const char* pat, ...));
VIRTUAL void	sv_setiv _((SV* sv, IV num));
VIRTUAL void	sv_setpviv _((SV* sv, IV num));
VIRTUAL void	sv_setuv _((SV* sv, UV num));
VIRTUAL void	sv_setnv _((SV* sv, double num));
VIRTUAL SV*	sv_setref_iv _((SV* rv, char* classname, IV iv));
VIRTUAL SV*	sv_setref_nv _((SV* rv, char* classname, double nv));
VIRTUAL SV*	sv_setref_pv _((SV* rv, char* classname, void* pv));
VIRTUAL SV*	sv_setref_pvn _((SV* rv, char* classname, char* pv, I32 n));
VIRTUAL void	sv_setpv _((SV* sv, const char* ptr));
VIRTUAL void	sv_setpvn _((SV* sv, const char* ptr, STRLEN len));
VIRTUAL void	sv_setsv _((SV* dsv, SV* ssv));
VIRTUAL void	sv_taint _((SV* sv));
VIRTUAL bool	sv_tainted _((SV* sv));
VIRTUAL int	sv_unmagic _((SV* sv, int type));
VIRTUAL void	sv_unref _((SV* sv));
VIRTUAL void	sv_untaint _((SV* sv));
VIRTUAL bool	sv_upgrade _((SV* sv, U32 mt));
VIRTUAL void	sv_usepvn _((SV* sv, char* ptr, STRLEN len));
VIRTUAL void	sv_vcatpvfn _((SV* sv, const char* pat, STRLEN patlen,
		       va_list* args, SV** svargs, I32 svmax,
		       bool *used_locale));
VIRTUAL void	sv_vsetpvfn _((SV* sv, const char* pat, STRLEN patlen,
		       va_list* args, SV** svargs, I32 svmax,
		       bool *used_locale));
VIRTUAL void	taint_env _((void));
VIRTUAL void	taint_proper _((const char* f, char* s));
#ifdef UNLINK_ALL_VERSIONS
VIRTUAL I32	unlnk _((char* f));
#endif
#ifdef USE_THREADS
VIRTUAL void	unlock_condpair _((void* svv));
#endif
VIRTUAL void	unsharepvn _((char* sv, I32 len, U32 hash));
VIRTUAL void	unshare_hek _((HEK* hek));
VIRTUAL void	utilize _((int aver, I32 floor, OP* version, OP* id, OP* arg));
VIRTUAL void	vivify_defelem _((SV* sv));
VIRTUAL void	vivify_ref _((SV* sv, U32 to_what));
VIRTUAL I32	wait4pid _((int pid, int* statusp, int flags));
VIRTUAL void	warn _((const char* pat,...));
VIRTUAL void	watch _((char** addr));
VIRTUAL I32	whichsig _((char* sig));
VIRTUAL int	yyerror _((char* s));
VIRTUAL int	yylex _((void));
VIRTUAL int	yyparse _((void));
VIRTUAL int	yywarn _((char* s));

#ifndef MYMALLOC
VIRTUAL Malloc_t safemalloc _((MEM_SIZE nbytes));
VIRTUAL Malloc_t safecalloc _((MEM_SIZE elements, MEM_SIZE size));
VIRTUAL Malloc_t saferealloc _((Malloc_t where, MEM_SIZE nbytes));
VIRTUAL Free_t   safefree _((Malloc_t where));
#endif

#ifdef LEAKTEST
VIRTUAL Malloc_t safexmalloc _((I32 x, MEM_SIZE size));
VIRTUAL Malloc_t safexcalloc _((I32 x, MEM_SIZE elements, MEM_SIZE size));
VIRTUAL Malloc_t safexrealloc _((Malloc_t where, MEM_SIZE size));
VIRTUAL void     safexfree _((Malloc_t where));
d1257 2
a1258 2
#ifdef PERL_GLOBAL_STRUCT
VIRTUAL struct perl_vars *Perl_GetVars _((void));
a1259 267

#ifdef PERL_OBJECT
protected:
void hsplit _((HV *hv));
void hfreeentries _((HV *hv));
void more_he _((void));
HE* new_he _((void));
void del_he _((HE *p));
HEK *save_hek _((char *str, I32 len, U32 hash));
SV *mess_alloc _((void));
void gv_init_sv _((GV *gv, I32 sv_type));
SV *save_scalar_at _((SV **sptr));
IV asIV _((SV* sv));
UV asUV _((SV* sv));
SV *more_sv _((void));
void more_xiv _((void));
void more_xnv _((void));
void more_xpv _((void));
void more_xrv _((void));
XPVIV *new_xiv _((void));
XPVNV *new_xnv _((void));
XPV *new_xpv _((void));
XRV *new_xrv _((void));
void del_xiv _((XPVIV* p));
void del_xnv _((XPVNV* p));
void del_xpv _((XPV* p));
void del_xrv _((XRV* p));
void sv_mortalgrow _((void));
void sv_unglob _((SV* sv));
void sv_check_thinkfirst _((SV *sv));
I32 avhv_index_sv _((SV* sv));

void do_report_used _((SV *sv));
void do_clean_objs _((SV *sv));
void do_clean_named_objs _((SV *sv));
void do_clean_all _((SV *sv));
void not_a_number _((SV *sv));
void* my_safemalloc _((MEM_SIZE size));

typedef void (CPerlObj::*SVFUNC) _((SV*));
void visit _((SVFUNC f));

typedef I32 (CPerlObj::*SVCOMPARE) _((SV*, SV*));
void qsortsv _((SV ** array, size_t num_elts, SVCOMPARE f));
I32 sortcv _((SV *a, SV *b));
void save_magic _((MGS *mgs, SV *sv));
int magic_methpack _((SV *sv, MAGIC *mg, char *meth));
int magic_methcall _((SV *sv, MAGIC *mg, char *meth, I32 flags, int n, SV *val));
OP * doform _((CV *cv, GV *gv, OP *retop));
void doencodes _((SV* sv, char* s, I32 len));
SV* refto _((SV* sv));
U32 seed _((void));
OP *docatch _((OP *o));
OP *dofindlabel _((OP *o, char *label, OP **opstack, OP **oplimit));
void doparseform _((SV *sv));
I32 dopoptoeval _((I32 startingblock));
I32 dopoptolabel _((char *label));
I32 dopoptoloop _((I32 startingblock));
I32 dopoptosub _((I32 startingblock));
I32 dopoptosub_at _((PERL_CONTEXT* cxstk, I32 startingblock));
void save_lines _((AV *array, SV *sv));
OP *doeval _((int gimme, OP** startop));
SV *mul128 _((SV *sv, U8 m));
SV *is_an_int _((char *s, STRLEN l));
int div128 _((SV *pnum, bool *done));

int runops_standard _((void));
int runops_debug _((void));

void check_uni _((void));
void  force_next _((I32 type));
char *force_version _((char *start));
char *force_word _((char *start, int token, int check_keyword, int allow_pack, int allow_tick));
SV *tokeq _((SV *sv));
char *scan_const _((char *start));
char *scan_formline _((char *s));
char *scan_heredoc _((char *s));
char *scan_ident _((char *s, char *send, char *dest, STRLEN destlen, I32 ck_uni));
char *scan_inputsymbol _((char *start));
char *scan_pat _((char *start, I32 type));
char *scan_str _((char *start));
char *scan_subst _((char *start));
char *scan_trans _((char *start));
char *scan_word _((char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp));
char *skipspace _((char *s));
void checkcomma _((char *s, char *name, char *what));
void force_ident _((char *s, int kind));
void incline _((char *s));
int intuit_method _((char *s, GV *gv));
int intuit_more _((char *s));
I32 lop _((I32 f, expectation x, char *s));
void missingterm _((char *s));
void no_op _((char *what, char *s));
void set_csh _((void));
I32 sublex_done _((void));
I32 sublex_push _((void));
I32 sublex_start _((void));
#ifdef CRIPPLED_CC
int uni _((I32 f, char *s));
#endif
char * filter_gets _((SV *sv, PerlIO *fp, STRLEN append));
SV *new_constant _((char *s, STRLEN len, char *key, SV *sv, SV *pv, char *type));
int ao _((int toketype));
void depcom _((void));
#ifdef WIN32
I32 win32_textfilter _((int idx, SV *sv, int maxlen));
#endif
char* incl_perldb _((void));
SV *isa_lookup _((HV *stash, char *name, int len, int level));
CV *get_db_sub _((SV **svp, CV *cv));
I32 list_assignment _((OP *o));
void bad_type _((I32 n, char *t, char *name, OP *kid));
OP *modkids _((OP *o, I32 type));
OP *no_fh_allowed _((OP *o));
OP *scalarboolean _((OP *o));
OP *too_few_arguments _((OP *o, char* name));
OP *too_many_arguments _((OP *o, char* name));
void null _((OP* o));
PADOFFSET pad_findlex _((char* name, PADOFFSET newoff, U32 seq, CV* startcv, I32 cx_ix, I32 saweval, U32 flags));
OP *newDEFSVOP _((void));
char* gv_ename _((GV *gv));
CV *cv_clone2 _((CV *proto, CV *outside));

void find_beginning _((void));
void forbid_setid _((char *));
void incpush _((char *, int));
void init_interp _((void));
void init_ids _((void));
void init_debugger _((void));
void init_lexer _((void));
void init_main_stash _((void));
#ifdef USE_THREADS
struct perl_thread * init_main_thread _((void));
#endif /* USE_THREADS */
void init_perllib _((void));
void init_postdump_symbols _((int, char **, char **));
void init_predump_symbols _((void));
void my_exit_jump _((void)) __attribute__((noreturn));
void nuke_stacks _((void));
void open_script _((char *, bool, SV *, int *fd));
void usage _((char *));
void validate_suid _((char *, char*, int));

regnode *reg _((I32, I32 *));
regnode *reganode _((U8, U32));
regnode *regatom _((I32 *));
regnode *regbranch _((I32 *, I32));
void regc _((U8, char *));
regnode *regclass _((void));
I32 regcurly _((char *));
regnode *reg_node _((U8));
regnode *regpiece _((I32 *));
void reginsert _((U8, regnode *));
void regoptail _((regnode *, regnode *));
void regset _((char *, I32));
void regtail _((regnode *, regnode *));
char* regwhite _((char *, char *));
char* nextchar _((void));
regnode *dumpuntil _((regnode *start, regnode *node, regnode *last, SV* sv, I32 l));
void scan_commit _((scan_data_t *data));
I32 study_chunk _((regnode **scanp, I32 *deltap, regnode *last, scan_data_t *data, U32 flags));
I32 add_data _((I32 n, char *s));
void	re_croak2 _((const char* pat1,const char* pat2,...)) __attribute__((noreturn));
I32 regmatch _((regnode *prog));
I32 regrepeat _((regnode *p, I32 max));
I32 regrepeat_hard _((regnode *p, I32 max, I32 *lp));
I32 regtry _((regexp *prog, char *startpos));
bool reginclass _((char *p, I32 c));
CHECKPOINT regcppush _((I32 parenfloor));
char * regcppop _((void));
void dump _((char *pat,...));
#ifdef WIN32
int do_aspawn _((void *vreally, void **vmark, void **vsp));
#endif

#ifdef DEBUGGING
void del_sv _((SV *p));
#endif
void debprof _((OP *o));

void *bset_obj_store _((void *obj, I32 ix));
OP *new_logop _((I32 type, I32 flags, OP **firstp, OP **otherp));
I32     amagic_cmp _((register SV *str1, register SV *str2));
I32     amagic_cmp_locale _((register SV *str1, register SV *str2));

#define PPDEF(s) OP* CPerlObj::s _((ARGSproto));
public:

#include "pp_proto.h"

OP * ck_ftst _((OP *o));
OP *ck_anoncode _((OP *o));
OP *ck_bitop _((OP *o));
OP *ck_concat _((OP *o));
OP *ck_spair _((OP *o));
OP *ck_delete _((OP *o));
OP *ck_eof _((OP *o));
OP *ck_eval _((OP *o));
OP *ck_exec _((OP *o));
OP *ck_exists _((OP *o));
OP *ck_rvconst _((OP *o));
OP *ck_fun _((OP *o));
OP *ck_glob _((OP *o));
OP *ck_grep _((OP *o));
OP *ck_index _((OP *o));
OP *ck_lengthconst _((OP *o));
OP *ck_lfun _((OP *o));
OP *ck_rfun _((OP *o));
OP *ck_listiob _((OP *o));
OP *ck_fun_locale _((OP *o));
OP *ck_scmp _((OP *o));
OP *ck_match _((OP *o));
OP *ck_null _((OP *o));
OP *ck_repeat _((OP *o));
OP *ck_require _((OP *o));
OP *ck_select _((OP *o));
OP *ck_shift _((OP *o));
OP *ck_sort _((OP *o));
OP *ck_split _((OP *o));
OP *ck_subr _((OP *o));
OP *ck_svconst _((OP *o));
OP *ck_trunc _((OP *o));
void unwind_handler_stack _((void *p));
void restore_magic _((void *p));
void restore_rsfp _((void *f));
void restore_expect _((void *e));
void restore_lex_expect _((void *e));
void yydestruct _((void *ptr));

VIRTUAL int fprintf _((PerlIO *pf, const char *pat, ...));
VIRTUAL SV**	get_specialsv_list _((void));

#ifdef WIN32
VIRTUAL int&	ErrorNo _((void));
#endif	/* WIN32 */
#else	/* !PERL_OBJECT */
END_EXTERN_C
#endif	/* PERL_OBJECT */

#ifdef INDIRECT_BGET_MACROS
VIRTUAL void byterun _((struct bytestream bs));
#else
VIRTUAL void byterun _((PerlIO *fp));
#endif /* INDIRECT_BGET_MACROS */

VIRTUAL void	sv_catpvf_mg _((SV *sv, const char* pat, ...));
VIRTUAL void	sv_catpv_mg _((SV *sv, char *ptr));
VIRTUAL void	sv_catpvn_mg _((SV *sv, char *ptr, STRLEN len));
VIRTUAL void	sv_catsv_mg _((SV *dstr, SV *sstr));
VIRTUAL void	sv_setpvf_mg _((SV *sv, const char* pat, ...));
VIRTUAL void	sv_setiv_mg _((SV *sv, IV i));
VIRTUAL void	sv_setpviv_mg _((SV *sv, IV iv));
VIRTUAL void	sv_setuv_mg _((SV *sv, UV u));
VIRTUAL void	sv_setnv_mg _((SV *sv, double num));
VIRTUAL void	sv_setpv_mg _((SV *sv, const char *ptr));
VIRTUAL void	sv_setpvn_mg _((SV *sv, const char *ptr, STRLEN len));
VIRTUAL void	sv_setsv_mg _((SV *dstr, SV *sstr));
VIRTUAL void	sv_usepvn_mg _((SV *sv, char *ptr, STRLEN len));

VIRTUAL MGVTBL*	get_vtbl _((int vtbl_id));
VIRTUAL OP*	dofile _((OP* term));
VIRTUAL void	save_generic_svref _((SV** sptr));
 
/* New virtual functions must be added here to maintain binary
 * compatablity with PERL_OBJECT
 */

@


1.2
log
@perl 5.004_04
@
text
@d1 16
d23 1
a23 1
#endif 
d26 2
a27 2
SV*	amagic_call _((SV* left,SV* right,int method,int dir));
bool	Gv_AMupdate _((HV* stash));
d29 30
a58 25
OP*	append_elem _((I32 optype, OP* head, OP* tail));
OP*	append_list _((I32 optype, LISTOP* first, LISTOP* last));
I32	apply _((I32 type, SV** mark, SV** sp));
void	assertref _((OP* op));
void	av_clear _((AV* ar));
void	av_extend _((AV* ar, I32 key));
AV*	av_fake _((I32 size, SV** svp));
SV**	av_fetch _((AV* ar, I32 key, I32 lval));
void	av_fill _((AV* ar, I32 fill));
I32	av_len _((AV* ar));
AV*	av_make _((I32 size, SV** svp));
SV*	av_pop _((AV* ar));
void	av_push _((AV* ar, SV* val));
void	av_reify _((AV* ar));
SV*	av_shift _((AV* ar));
SV**	av_store _((AV* ar, I32 key, SV* val));
void	av_undef _((AV* ar));
void	av_unshift _((AV* ar, I32 num));
OP*	bind_match _((I32 type, OP* left, OP* pat));
OP*	block_end _((I32 floor, OP* seq));
I32	block_gimme _((void));
int	block_start _((int full));
void	boot_core_UNIVERSAL _((void));
void	call_list _((I32 oldscope, AV* list));
I32	cando _((I32 bit, I32 effective, struct stat* statbufp));
d60 1
a60 1
U32	cast_ulong _((double f));
d63 1
a63 12
I32	my_chsize _((int fd, Off_t length));
#endif
OP*	ck_gvconst _((OP*  o));
OP*	ck_retarget _((OP* op));
OP*	convert _((I32 optype, I32 flags, OP* op));
void	croak _((const char* pat,...)) __attribute__((noreturn));
void	cv_ckproto _((CV* cv, GV* gv, char* p));
CV*	cv_clone _((CV* proto));
SV*	cv_const_sv _((CV* cv));
void	cv_undef _((CV* cv));
#ifdef DEBUGGING
void	cx_dump _((CONTEXT* cs));
d65 28
a92 13
SV*	filter_add _((filter_t funcp, SV* datasv));
void	filter_del _((filter_t funcp));
I32	filter_read _((int idx, SV* buffer, int maxlen));
I32	cxinc _((void));
void	deb _((const char* pat,...)) __attribute__((format(printf,1,2)));
void	deb_growlevel _((void));
I32	debop _((OP* op));
I32	debstackptrs _((void));
#ifdef DEBUGGING
void	debprofdump _((void));
#endif
I32	debstack _((void));
char*	delimcpy _((char* to, char* toend, char* from, char* fromend,
d94 11
a104 10
void	deprecate _((char* s));
OP*	die _((const char* pat,...));
OP*	die_where _((char* message));
void	dounwind _((I32 cxix));
bool	do_aexec _((SV* really, SV** mark, SV** sp));
void    do_chop _((SV* asv, SV* sv));
bool	do_close _((GV* gv, bool not_implicit));
bool	do_eof _((GV* gv));
bool	do_exec _((char* cmd));
void	do_execfree _((void));
d109 2
a110 2
void	do_join _((SV* sv, SV* del, SV** mark, SV** sp));
OP*	do_kv _((void));
d115 1
a115 1
bool	do_open _((GV* gv, char* name, I32 len,
d117 5
a121 5
void	do_pipe _((SV* sv, GV* rgv, GV* wgv));
bool	do_print _((SV* sv, PerlIO* fp));
OP*	do_readline _((void));
I32	do_chomp _((SV* sv));
bool	do_seek _((GV* gv, long pos, int whence));
d126 9
a134 9
void	do_sprintf _((SV* sv, I32 len, SV** sarg));
long	do_sysseek _((GV* gv, long pos, int whence));
long	do_tell _((GV* gv));
I32	do_trans _((SV* sv, OP* arg));
void	do_vecset _((SV* sv));
void	do_vop _((I32 optype, SV* sv, SV* left, SV* right));
I32	dowantarray _((void));
void	dump_all _((void));
void	dump_eval _((void));
d136 1
a136 1
int	dump_fds _((char* s));
d138 2
a139 2
void	dump_form _((GV* gv));
void	dump_gv _((GV* gv));
d141 1
a141 1
void	dump_mstats _((char* s));
d143 97
a239 87
void	dump_op _((OP* arg));
void	dump_pm _((PMOP* pm));
void	dump_packsubs _((HV* stash));
void	dump_sub _((GV* gv));
void	fbm_compile _((SV* sv));
char*	fbm_instr _((unsigned char* big, unsigned char* bigend, SV* littlesv));
OP*	force_list _((OP* arg));
OP*	fold_constants _((OP* arg));
char*	form _((const char* pat, ...));
void	free_tmps _((void));
OP*	gen_constant_list _((OP* op));
void	gp_free _((GV* gv));
GP*	gp_ref _((GP* gp));
GV*	gv_AVadd _((GV* gv));
GV*	gv_HVadd _((GV* gv));
GV*	gv_IOadd _((GV* gv));
GV*	gv_autoload4 _((HV* stash, char* name, STRLEN len, I32 method));
void	gv_check _((HV* stash));
void	gv_efullname _((SV* sv, GV* gv));
void	gv_efullname3 _((SV* sv, GV* gv, char* prefix));
GV*	gv_fetchfile _((char* name));
GV*	gv_fetchmeth _((HV* stash, char* name, STRLEN len, I32 level));
GV*	gv_fetchmethod _((HV* stash, char* name));
GV*	gv_fetchmethod_autoload _((HV* stash, char* name, I32 autoload));
GV*	gv_fetchpv _((char* name, I32 add, I32 sv_type));
void	gv_fullname _((SV* sv, GV* gv));
void	gv_fullname3 _((SV* sv, GV* gv, char* prefix));
void	gv_init _((GV* gv, HV* stash, char* name, STRLEN len, int multi));
HV*	gv_stashpv _((char* name, I32 create));
HV*	gv_stashpvn _((char* name, U32 namelen, I32 create));
HV*	gv_stashsv _((SV* sv, I32 create));
void	hoistmust _((PMOP* pm));
void	hv_clear _((HV* tb));
void	hv_delayfree_ent _((HV* hv, HE* entry));
SV*	hv_delete _((HV* tb, char* key, U32 klen, I32 flags));
SV*	hv_delete_ent _((HV* tb, SV* key, I32 flags, U32 hash));
bool	hv_exists _((HV* tb, char* key, U32 klen));
bool	hv_exists_ent _((HV* tb, SV* key, U32 hash));
SV**	hv_fetch _((HV* tb, char* key, U32 klen, I32 lval));
HE*	hv_fetch_ent _((HV* tb, SV* key, I32 lval, U32 hash));
void	hv_free_ent _((HV* hv, HE* entry));
I32	hv_iterinit _((HV* tb));
char*	hv_iterkey _((HE* entry, I32* retlen));
SV*	hv_iterkeysv _((HE* entry));
HE*	hv_iternext _((HV* tb));
SV*	hv_iternextsv _((HV* hv, char** key, I32* retlen));
SV*	hv_iterval _((HV* tb, HE* entry));
void	hv_ksplit _((HV* hv, IV newmax));
void	hv_magic _((HV* hv, GV* gv, int how));
SV**	hv_store _((HV* tb, char* key, U32 klen, SV* val, U32 hash));
HE*	hv_store_ent _((HV* tb, SV* key, SV* val, U32 hash));
void	hv_undef _((HV* tb));
I32	ibcmp _((char* a, char* b, I32 len));
I32	ibcmp_locale _((char* a, char* b, I32 len));
I32	ingroup _((I32 testgid, I32 effective));
U32	intro_my _((void));
char*	instr _((char* big, char* little));
bool	io_close _((IO* io));
OP*	invert _((OP* cmd));
OP*	jmaybe _((OP* arg));
I32	keyword _((char* d, I32 len));
void	leave_scope _((I32 base));
void	lex_end _((void));
void	lex_start _((SV* line));
OP*	linklist _((OP* op));
OP*	list _((OP* o));
OP*	listkids _((OP* o));
OP*	localize _((OP* arg, I32 lexical));
I32	looks_like_number _((SV* sv));
int	magic_clearenv	_((SV* sv, MAGIC* mg));
int	magic_clear_all_env _((SV* sv, MAGIC* mg));
int	magic_clearpack	_((SV* sv, MAGIC* mg));
int	magic_clearsig	_((SV* sv, MAGIC* mg));
int	magic_existspack _((SV* sv, MAGIC* mg));
int	magic_freedefelem _((SV* sv, MAGIC* mg));
int	magic_get	_((SV* sv, MAGIC* mg));
int	magic_getarylen	_((SV* sv, MAGIC* mg));
int	magic_getdefelem _((SV* sv, MAGIC* mg));
int	magic_getglob	_((SV* sv, MAGIC* mg));
int	magic_getpack	_((SV* sv, MAGIC* mg));
int	magic_getpos	_((SV* sv, MAGIC* mg));
int	magic_getsig	_((SV* sv, MAGIC* mg));
int	magic_gettaint	_((SV* sv, MAGIC* mg));
int	magic_getuvar	_((SV* sv, MAGIC* mg));
U32	magic_len	_((SV* sv, MAGIC* mg));
int	magic_nextpack	_((SV* sv, MAGIC* mg, SV* key));
int	magic_set	_((SV* sv, MAGIC* mg));
d241 1
a241 1
int	magic_setamagic	_((SV* sv, MAGIC* mg));
d243 3
a245 3
int	magic_setarylen	_((SV* sv, MAGIC* mg));
int	magic_setbm	_((SV* sv, MAGIC* mg));
int	magic_setdbline	_((SV* sv, MAGIC* mg));
d247 1
a247 1
int	magic_setcollxfrm _((SV* sv, MAGIC* mg));
d249 18
a266 17
int	magic_setdefelem _((SV* sv, MAGIC* mg));
int	magic_setenv	_((SV* sv, MAGIC* mg));
int	magic_setfm	_((SV* sv, MAGIC* mg));
int	magic_setisa	_((SV* sv, MAGIC* mg));
int	magic_setglob	_((SV* sv, MAGIC* mg));
int	magic_setmglob	_((SV* sv, MAGIC* mg));
int	magic_setnkeys	_((SV* sv, MAGIC* mg));
int	magic_setpack	_((SV* sv, MAGIC* mg));
int	magic_setpos	_((SV* sv, MAGIC* mg));
int	magic_setsig	_((SV* sv, MAGIC* mg));
int	magic_setsubstr	_((SV* sv, MAGIC* mg));
int	magic_settaint	_((SV* sv, MAGIC* mg));
int	magic_setuvar	_((SV* sv, MAGIC* mg));
int	magic_setvec	_((SV* sv, MAGIC* mg));
int	magic_set_all_env _((SV* sv, MAGIC* mg));
int	magic_wipepack	_((SV* sv, MAGIC* mg));
void	magicname _((char* sym, char* name, I32 namlen));
d268 4
a271 1
void	markstack_grow _((void));
d273 1
a273 1
char*	mem_collxfrm _((const char* s, STRLEN len, STRLEN* xlen));
d275 13
a287 12
char*	mess _((const char* pat, va_list* args));
int	mg_clear _((SV* sv));
int	mg_copy _((SV* , SV* , char* , I32));
MAGIC*	mg_find _((SV* sv, int type));
int	mg_free _((SV* sv));
int	mg_get _((SV* sv));
U32	mg_len _((SV* sv));
void	mg_magical _((SV* sv));
int	mg_set _((SV* sv));
OP*	mod _((OP* op, I32 type));
char*	moreswitches _((char* s));
OP*	my _((OP* op));
d289 1
a289 1
char*	my_bcopy _((char* from, char* to, I32 len));
d294 3
a296 3
void	my_exit _((U32 status)) __attribute__((noreturn));
void	my_failure_exit _((void)) __attribute__((noreturn));
I32	my_lstat _((void));
d298 1
a298 1
I32	my_memcmp _((char* s1, char* s2, I32 len));
d301 1
a301 1
void*	my_memset _((char* loc, I32 ch, I32 len));
d303 6
a308 4
I32	my_pclose _((PerlIO* ptr));
PerlIO*	my_popen _((char* cmd, char* mode));
void	my_setenv _((char* nam, char* val));
I32	my_stat _((void));
d310 78
a387 42
short	my_swap _((short s));
long	my_htonl _((long l));
long	my_ntohl _((long l));
#endif
void	my_unexec _((void));
OP*	newANONLIST _((OP* op));
OP*	newANONHASH _((OP* op));
OP*	newANONSUB _((I32 floor, OP* proto, OP* block));
OP*	newASSIGNOP _((I32 flags, OP* left, I32 optype, OP* right));
OP*	newCONDOP _((I32 flags, OP* expr, OP* trueop, OP* falseop));
void	newFORM _((I32 floor, OP* op, OP* block));
OP*	newFOROP _((I32 flags, char* label, line_t forline, OP* scalar, OP* expr, OP*block, OP*cont));
OP*	newLOGOP _((I32 optype, I32 flags, OP* left, OP* right));
OP*	newLOOPEX _((I32 type, OP* label));
OP*	newLOOPOP _((I32 flags, I32 debuggable, OP* expr, OP* block));
OP*	newNULLLIST _((void));
OP*	newOP _((I32 optype, I32 flags));
void	newPROG _((OP* op));
OP*	newRANGE _((I32 flags, OP* left, OP* right));
OP*	newSLICEOP _((I32 flags, OP* subscript, OP* list));
OP*	newSTATEOP _((I32 flags, char* label, OP* o));
CV*	newSUB _((I32 floor, OP* op, OP* proto, OP* block));
CV*	newXS _((char* name, void (*subaddr)(CV* cv), char* filename));
#ifdef DEPRECATED
CV*	newXSUB _((char* name, I32 ix, I32 (*subaddr)(int,int,int), char* filename));
#endif
AV*	newAV _((void));
OP*	newAVREF _((OP* o));
OP*	newBINOP _((I32 type, I32 flags, OP* first, OP* last));
OP*	newCVREF _((I32 flags, OP* o));
OP*	newGVOP _((I32 type, I32 flags, GV* gv));
GV*	newGVgen _((char* pack));
OP*	newGVREF _((I32 type, OP* o));
OP*	newHVREF _((OP* o));
HV*	newHV _((void));
IO*	newIO _((void));
OP*	newLISTOP _((I32 type, I32 flags, OP* first, OP* last));
OP*	newPMOP _((I32 type, I32 flags));
OP*	newPVOP _((I32 type, I32 flags, char* pv));
SV*	newRV _((SV* ref));
#ifdef LEAKTEST
SV*	newSV _((I32 x, STRLEN len));
d389 1
a389 1
SV*	newSV _((STRLEN len));
d391 8
a398 32
OP*	newSVREF _((OP* o));
OP*	newSVOP _((I32 type, I32 flags, SV* sv));
SV*	newSViv _((IV i));
SV*	newSVnv _((double n));
SV*	newSVpv _((char* s, STRLEN len));
SV*	newSVpvf _((const char* pat, ...));
SV*	newSVrv _((SV* rv, char* classname));
SV*	newSVsv _((SV* old));
OP*	newUNOP _((I32 type, I32 flags, OP* first));
OP*	newWHILEOP _((I32 flags, I32 debuggable, LOOP* loop,
		      I32 whileline, OP* expr, OP* block, OP* cont));
PerlIO*	nextargv _((GV* gv));
char*	ninstr _((char* big, char* bigend, char* little, char* lend));
OP*	oopsCV _((OP* o));
void	op_free _((OP* arg));
void	package _((OP* op));
PADOFFSET	pad_alloc _((I32 optype, U32 tmptype));
PADOFFSET	pad_allocmy _((char* name));
PADOFFSET	pad_findmy _((char* name));
OP*	oopsAV _((OP* o));
OP*	oopsHV _((OP* o));
void	pad_leavemy _((I32 fill));
SV*	pad_sv _((PADOFFSET po));
void	pad_free _((PADOFFSET po));
void	pad_reset _((void));
void	pad_swipe _((PADOFFSET po));
void	peep _((OP* op));
PerlInterpreter*	perl_alloc _((void));
I32	perl_call_argv _((char* subname, I32 flags, char** argv));
I32	perl_call_method _((char* methname, I32 flags));
I32	perl_call_pv _((char* subname, I32 flags));
I32	perl_call_sv _((SV* sv, I32 flags));
d401 6
a406 2
SV*	perl_eval_pv _((char* p, I32 croak_on_error));
I32	perl_eval_sv _((SV* sv, I32 flags));
d408 15
a422 11
SV*	perl_get_sv _((char* name, I32 create));
AV*	perl_get_av _((char* name, I32 create));
HV*	perl_get_hv _((char* name, I32 create));
CV*	perl_get_cv _((char* name, I32 create));
int	perl_init_i18nl10n _((int printwarn));
int	perl_init_i18nl14n _((int printwarn));
void	perl_new_collate _((char* newcoll));
void	perl_new_ctype _((char* newctype));
void	perl_new_numeric _((char* newcoll));
void	perl_set_numeric_local _((void));
void	perl_set_numeric_standard _((void));
d424 2
a425 1
void	perl_require_pv _((char* pv));
d427 3
d431 30
a460 27
void	pidgone _((int pid, int status));
void	pmflag _((U16* pmfl, int ch));
OP*	pmruntime _((OP* pm, OP* expr, OP* repl));
OP*	pmtrans _((OP* op, OP* expr, OP* repl));
OP*	pop_return _((void));
void	pop_scope _((void));
OP*	prepend_elem _((I32 optype, OP* head, OP* tail));
void	push_return _((OP* op));
void	push_scope _((void));
regexp*	pregcomp _((char* exp, char* xend, PMOP* pm));
OP*	ref _((OP* op, I32 type));
OP*	refkids _((OP* op, I32 type));
void	regdump _((regexp* r));
I32	pregexec _((regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, I32 safebase));
void	pregfree _((struct regexp* r));
char*	regnext _((char* p));
void	regprop _((SV* sv, char* op));
void	repeatcpy _((char* to, char* from, I32 len, I32 count));
char*	rninstr _((char* big, char* bigend, char* little, char* lend));
Sighandler_t rsignal _((int, Sighandler_t));
int	rsignal_restore _((int, Sigsave_t*));
int	rsignal_save _((int, Sighandler_t, Sigsave_t*));
Sighandler_t rsignal_state _((int));
int	runops _((void));
void	rxres_free _((void** rsp));
void	rxres_restore _((void** rsp, REGEXP* rx));
void	rxres_save _((void** rsp, REGEXP* rx));
d462 1
a462 1
I32	same_dirent _((char* a, char* b));
d464 8
a471 7
char*	savepv _((char* sv));
char*	savepvn _((char* sv, I32 len));
void	savestack_grow _((void));
void	save_aptr _((AV** aptr));
AV*	save_ary _((GV* gv));
void	save_clearsv _((SV** svp));
void	save_delete _((HV* hv, char* key, I32 klen));
d473 4
d478 1
d480 32
a511 28
void	save_freesv _((SV* sv));
void	save_freeop _((OP* op));
void	save_freepv _((char* pv));
void	save_gp _((GV* gv, I32 empty));
HV*	save_hash _((GV* gv));
void	save_hptr _((HV** hptr));
void	save_I16 _((I16* intp));
void	save_I32 _((I32* intp));
void	save_int _((int* intp));
void	save_item _((SV* item));
void	save_iv _((IV* iv));
void	save_list _((SV** sarg, I32 maxsarg));
void	save_long _((long* longp));
void	save_nogv _((GV* gv));
SV*	save_scalar _((GV* gv));
void	save_pptr _((char** pptr));
void	save_sptr _((SV** sptr));
SV*	save_svref _((SV** sptr));
OP*	sawparens _((OP* o));
OP*	scalar _((OP* o));
OP*	scalarkids _((OP* op));
OP*	scalarseq _((OP* o));
OP*	scalarvoid _((OP* op));
UV	scan_hex _((char* start, I32 len, I32* retlen));
char*	scan_num _((char* s));
UV	scan_oct _((char* start, I32 len, I32* retlen));
OP*	scope _((OP* o));
char*	screaminstr _((SV* bigsv, SV* littlesv));
d513 1
a513 1
I32	setenv_getix _((char* nam));
d515 33
a547 28
void	setdefout _((GV* gv));
char*	sharepvn _((char* sv, I32 len, U32 hash));
HEK*	share_hek _((char* sv, I32 len, U32 hash));
Signal_t sighandler _((int sig));
SV**	stack_grow _((SV** sp, SV**p, int n));
I32	start_subparse _((I32 is_format, U32 flags));
void	sub_crush_depth _((CV* cv));
bool	sv_2bool _((SV* sv));
CV*	sv_2cv _((SV* sv, HV** st, GV** gvp, I32 lref));
IO*	sv_2io _((SV* sv));
IV	sv_2iv _((SV* sv));
SV*	sv_2mortal _((SV* sv));
double	sv_2nv _((SV* sv));
char*	sv_2pv _((SV* sv, STRLEN* lp));
UV	sv_2uv _((SV* sv));
void	sv_add_arena _((char* ptr, U32 size, U32 flags));
int	sv_backoff _((SV* sv));
SV*	sv_bless _((SV* sv, HV* stash));
void	sv_catpvf _((SV* sv, const char* pat, ...));
void	sv_catpv _((SV* sv, char* ptr));
void	sv_catpvn _((SV* sv, char* ptr, STRLEN len));
void	sv_catsv _((SV* dsv, SV* ssv));
void	sv_chop _((SV* sv, char* ptr));
void	sv_clean_all _((void));
void	sv_clean_objs _((void));
void	sv_clear _((SV* sv));
I32	sv_cmp _((SV* sv1, SV* sv2));
I32	sv_cmp_locale _((SV* sv1, SV* sv2));
d549 1
a549 1
char*	sv_collxfrm _((SV* sv, STRLEN* nxp));
d551 8
a558 7
void	sv_dec _((SV* sv));
void	sv_dump _((SV* sv));
bool	sv_derived_from _((SV* sv, char* name));
I32	sv_eq _((SV* sv1, SV* sv2));
void	sv_free _((SV* sv));
void	sv_free_arenas _((void));
char*	sv_gets _((SV* sv, PerlIO* fp, I32 append));
d560 1
a560 1
char*	sv_grow _((SV* sv, I32 newlen));
d562 1
a562 1
char*	sv_grow _((SV* sv, unsigned long newlen));
d564 35
a598 35
void	sv_inc _((SV* sv));
void	sv_insert _((SV* bigsv, STRLEN offset, STRLEN len, char* little, STRLEN littlelen));
int	sv_isa _((SV* sv, char* name));
int	sv_isobject _((SV* sv));
STRLEN	sv_len _((SV* sv));
void	sv_magic _((SV* sv, SV* obj, int how, char* name, I32 namlen));
SV*	sv_mortalcopy _((SV* oldsv));
SV*	sv_newmortal _((void));
SV*	sv_newref _((SV* sv));
char*	sv_peek _((SV* sv));
char*	sv_pvn_force _((SV* sv, STRLEN* lp));
char*	sv_reftype _((SV* sv, int ob));
void	sv_replace _((SV* sv, SV* nsv));
void	sv_report_used _((void));
void	sv_reset _((char* s, HV* stash));
void	sv_setpvf _((SV* sv, const char* pat, ...));
void	sv_setiv _((SV* sv, IV num));
void	sv_setpviv _((SV* sv, IV num));
void	sv_setuv _((SV* sv, UV num));
void	sv_setnv _((SV* sv, double num));
SV*	sv_setref_iv _((SV* rv, char* classname, IV iv));
SV*	sv_setref_nv _((SV* rv, char* classname, double nv));
SV*	sv_setref_pv _((SV* rv, char* classname, void* pv));
SV*	sv_setref_pvn _((SV* rv, char* classname, char* pv, I32 n));
void	sv_setpv _((SV* sv, const char* ptr));
void	sv_setpvn _((SV* sv, const char* ptr, STRLEN len));
void	sv_setsv _((SV* dsv, SV* ssv));
void	sv_taint _((SV* sv));
bool	sv_tainted _((SV* sv));
int	sv_unmagic _((SV* sv, int type));
void	sv_unref _((SV* sv));
void	sv_untaint _((SV* sv));
bool	sv_upgrade _((SV* sv, U32 mt));
void	sv_usepvn _((SV* sv, char* ptr, STRLEN len));
void	sv_vcatpvfn _((SV* sv, const char* pat, STRLEN patlen,
d601 1
a601 1
void	sv_vsetpvfn _((SV* sv, const char* pat, STRLEN patlen,
d604 2
a605 2
void	taint_env _((void));
void	taint_proper _((const char* f, char* s));
d607 1
a607 1
I32	unlnk _((char* f));
d609 2
a610 19
void	unsharepvn _((char* sv, I32 len, U32 hash));
void	unshare_hek _((HEK* hek));
void	utilize _((int aver, I32 floor, OP* version, OP* id, OP* arg));
void	vivify_defelem _((SV* sv));
void	vivify_ref _((SV* sv, U32 to_what));
I32	wait4pid _((int pid, int* statusp, int flags));
void	warn _((const char* pat,...));
void	watch _((char** addr));
I32	whichsig _((char* sig));
int	yyerror _((char* s));
int	yylex _((void));
int	yyparse _((void));
int	yywarn _((char* s));

#if defined(MYMALLOC) || !defined(STANDARD_C)
Malloc_t malloc _((MEM_SIZE nbytes));
Malloc_t calloc _((MEM_SIZE elements, MEM_SIZE size));
Malloc_t realloc _((Malloc_t where, MEM_SIZE nbytes));
Free_t   free _((Malloc_t where));
d612 13
d627 4
a630 4
Malloc_t safemalloc _((MEM_SIZE nbytes));
Malloc_t safecalloc _((MEM_SIZE elements, MEM_SIZE size));
Malloc_t saferealloc _((Malloc_t where, MEM_SIZE nbytes));
Free_t   safefree _((Malloc_t where));
d634 182
a815 4
Malloc_t safexmalloc _((I32 x, MEM_SIZE size));
Malloc_t safexcalloc _((I32 x, MEM_SIZE elements, MEM_SIZE size));
Malloc_t safexrealloc _((Malloc_t where, MEM_SIZE size));
void     safexfree _((Malloc_t where));
d817 93
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
bool Gv_AMupdate _((HV* stash));
d26 1
d32 5
a36 3
OP*	block_end _((int line, int floor, OP* seq));
int	block_start _((void));
void	calllist _((AV* list));
d42 1
a42 1
I32	chsize _((int fd, Off_t length));
d44 2
a45 2
OP *	ck_gvconst _((OP * o));
OP *	ck_retarget _((OP *op));
d47 2
a48 2
char*	cpytill _((char* to, char* from, char* fromend, int delim, I32* retlen));
void	croak _((char* pat,...)) __attribute__((format(printf,1,2),noreturn));
d50 1
d55 1
a55 1
SV *	filter_add _((filter_t funcp, SV *datasv));
d57 1
a57 1
I32	filter_read _((int idx, SV *buffer, int maxlen));
d59 1
a59 1
void	deb _((char* pat,...)) __attribute__((format(printf,1,2)));
d67 2
d70 1
a70 1
OP*	die _((char* pat,...)) __attribute__((format(printf,1,2)));
d75 1
a75 1
bool	do_close _((GV* gv, bool explicit));
d90 1
a90 1
		   int as_raw, int rawmode, int rawperm, FILE* supplied_fp));
d92 2
a93 2
bool	do_print _((SV* sv, FILE* fp));
OP *	do_readline _((void));
d101 1
d121 1
a121 1
void	fbm_compile _((SV* sv, I32 iflag));
d124 2
a125 1
OP*	fold_constants _((OP * arg));
d133 1
d136 1
d140 1
d143 2
a144 1
void	gv_init _((GV *gv, HV *stash, char *name, STRLEN len, int multi));
d146 1
a147 2
void	he_delayfree _((HE* hent));
void	he_free _((HE* hent));
d150 1
d152 1
d154 1
d156 2
d160 1
d162 1
a162 1
SV *	hv_iternextsv _((HV* hv, char** key, I32* retlen));
d164 1
d167 1
d169 2
a170 1
I32	ibcmp _((U8* a, U8* b, I32 len));
d172 1
d180 1
a180 1
void	lex_start _((SV *line));
d187 1
d189 3
a191 1
int	magic_existspack	_((SV* sv, MAGIC* mg));
d194 2
a196 1
int	magic_getglob	_((SV* sv, MAGIC* mg));
d198 1
d210 4
d215 1
d219 1
d227 1
d231 3
a233 7
#if !defined(STANDARD_C)
Malloc_t	malloc _((MEM_SIZE nbytes));
#endif
#if defined(MYMALLOC) && defined(HIDEMYMALLOC)
extern Malloc_t malloc _((MEM_SIZE nbytes));
extern Malloc_t realloc _((Malloc_t, MEM_SIZE));
extern Free_t   free _((Malloc_t));
d235 1
a235 2
void	markstack_grow _((void));
char*	mess _((char* pat, va_list* args));
d237 1
a237 1
int	mg_copy _((SV *, SV *, char *, STRLEN));
d246 2
a247 1
OP *	my _(( OP *));
d249 1
d254 1
d256 2
a257 2
#ifndef HAS_MEMCMP
I32	my_memcmp _((unsigned char* s1, unsigned char* s2, I32 len));
d259 5
a263 2
I32	my_pclose _((FILE* ptr));
FILE*	my_popen _((char* cmd, char* mode));
d289 1
a289 1
CV*	newXS _((char *name, void (*subaddr)(CV* cv), char *filename));
d291 1
a291 1
CV*	newXSUB _((char *name, I32 ix, I32 (*subaddr)(int,int,int), char *filename));
d298 1
a298 1
GV*	newGVgen _((char *pack));
d317 1
d321 3
a323 2
OP *	newWHILEOP _((I32 flags, I32 debuggable, LOOP* loop, OP* expr, OP* block, OP* cont));
FILE*	nextargv _((GV* gv));
d325 1
a325 1
OP *	oopsCV _((OP* o));
d346 1
d353 1
d355 5
a370 1
void	provide_ref _((OP* op, SV* sv));
d380 1
a380 1
char*	regprop _((char* op));
d383 4
d388 3
a390 14
#ifndef safemalloc
void	safefree _((char* where));
char*	safemalloc _((MEM_SIZE size));
#ifndef MSDOS
char*	saferealloc _((char* where, MEM_SIZE size));
#else
char*	saferealloc _((char* where, unsigned long size));
#endif
#endif
#ifdef LEAKTEST
void	safexfree _((char* where));
char*	safexmalloc _((I32 x, MEM_SIZE size));
char*	safexrealloc _((char* where, MEM_SIZE size));
#endif
d407 1
d410 1
d414 1
d416 1
a416 1
void	save_long _((long *longp));
d419 1
a419 1
void	save_pptr _((char **pptr));
d427 1
a427 1
unsigned long	scan_hex _((char* start, I32 len, I32* retlen));
d429 1
a429 1
unsigned long	scan_oct _((char* start, I32 len, I32* retlen));
d435 3
a437 1
void	setdefout _((GV *gv));
d440 2
a441 1
int	start_subparse _((void));
d449 1
d453 1
d462 4
d468 1
d472 1
a472 1
char*	sv_gets _((SV* sv, FILE* fp, I32 append));
d487 2
a488 2
char *	sv_peek _((SV* sv));
char *	sv_pvn_force _((SV* sv, STRLEN* lp));
d493 1
d495 2
d498 6
a503 6
SV*	sv_setref_iv _((SV *rv, char *classname, IV iv));
SV*	sv_setref_nv _((SV *rv, char *classname, double nv));
SV*	sv_setref_pv _((SV *rv, char *classname, void* pv));
SV*	sv_setref_pvn _((SV *rv, char *classname, char* pv, I32 n));
void	sv_setpv _((SV* sv, char* ptr));
void	sv_setpvn _((SV* sv, char* ptr, STRLEN len));
d505 2
d509 1
d512 6
d519 1
a519 2
void	taint_not _((char *s));
void	taint_proper _((char* f, char* s));
d523 5
a527 1
void	utilize _((int aver, I32 floor, OP* id, OP* arg));
d529 2
a530 2
void	warn _((char* pat,...)) __attribute__((format(printf,1,2)));
void	watch _((char **addr));
d536 21
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a0 16
#ifndef PERL_CALLCONV
#  define PERL_CALLCONV
#endif 

#ifdef PERL_OBJECT
#define VIRTUAL virtual PERL_CALLCONV
#else
#define VIRTUAL PERL_CALLCONV
START_EXTERN_C
#endif

/* NOTE!!! When new virtual functions are added, they must be added at
 * the end of this file to maintain binary compatibility with PERL_OBJECT
 */


d7 1
a7 1
#endif
d10 2
a11 2
VIRTUAL SV*	amagic_call _((SV* left,SV* right,int method,int dir));
VIRTUAL bool	Gv_AMupdate _((HV* stash));
d13 22
a34 30
VIRTUAL OP*	append_elem _((I32 optype, OP* head, OP* tail));
VIRTUAL OP*	append_list _((I32 optype, LISTOP* first, LISTOP* last));
VIRTUAL I32	apply _((I32 type, SV** mark, SV** sp));
VIRTUAL void	assertref _((OP* o));
VIRTUAL bool	avhv_exists_ent _((AV *ar, SV* keysv, U32 hash));
VIRTUAL SV**	avhv_fetch_ent _((AV *ar, SV* keysv, I32 lval, U32 hash));
VIRTUAL HE*	avhv_iternext _((AV *ar));
VIRTUAL SV*	avhv_iterval _((AV *ar, HE* entry));
VIRTUAL HV*	avhv_keys _((AV *ar));
VIRTUAL void	av_clear _((AV* ar));
VIRTUAL void	av_extend _((AV* ar, I32 key));
VIRTUAL AV*	av_fake _((I32 size, SV** svp));
VIRTUAL SV**	av_fetch _((AV* ar, I32 key, I32 lval));
VIRTUAL void	av_fill _((AV* ar, I32 fill));
VIRTUAL I32	av_len _((AV* ar));
VIRTUAL AV*	av_make _((I32 size, SV** svp));
VIRTUAL SV*	av_pop _((AV* ar));
VIRTUAL void	av_push _((AV* ar, SV* val));
VIRTUAL void	av_reify _((AV* ar));
VIRTUAL SV*	av_shift _((AV* ar));
VIRTUAL SV**	av_store _((AV* ar, I32 key, SV* val));
VIRTUAL void	av_undef _((AV* ar));
VIRTUAL void	av_unshift _((AV* ar, I32 num));
VIRTUAL OP*	bind_match _((I32 type, OP* left, OP* pat));
VIRTUAL OP*	block_end _((I32 floor, OP* seq));
VIRTUAL I32	block_gimme _((void));
VIRTUAL int	block_start _((int full));
VIRTUAL void	boot_core_UNIVERSAL _((void));
VIRTUAL void	call_list _((I32 oldscope, AV* av_list));
VIRTUAL I32	cando _((I32 bit, I32 effective, Stat_t* statbufp));
d36 1
a36 1
VIRTUAL U32	cast_ulong _((double f));
d39 22
a60 1
VIRTUAL I32	my_chsize _((int fd, Off_t length));
d62 11
a72 40
VIRTUAL OP*	ck_gvconst _((OP*  o));
VIRTUAL OP*	ck_retarget _((OP* o));
#ifdef USE_THREADS
VIRTUAL MAGIC *	condpair_magic _((SV *sv));
#endif
VIRTUAL OP*	convert _((I32 optype, I32 flags, OP* o));
VIRTUAL void	croak _((const char* pat,...)) __attribute__((noreturn));
VIRTUAL void	cv_ckproto _((CV* cv, GV* gv, char* p));
VIRTUAL CV*	cv_clone _((CV* proto));
VIRTUAL SV*	cv_const_sv _((CV* cv));
VIRTUAL SV*	op_const_sv _((OP* o, CV* cv));
VIRTUAL void	cv_undef _((CV* cv));
VIRTUAL void	cx_dump _((PERL_CONTEXT* cs));
VIRTUAL SV*	filter_add _((filter_t funcp, SV* datasv));
VIRTUAL void	filter_del _((filter_t funcp));
VIRTUAL I32	filter_read _((int idx, SV* buffer, int maxlen));
VIRTUAL char **	get_op_descs _((void));
VIRTUAL char **	get_op_names _((void));
VIRTUAL char *	get_no_modify _((void));
VIRTUAL U32 *	get_opargs _((void));
VIRTUAL I32	cxinc _((void));
VIRTUAL void	deb _((const char* pat,...));
VIRTUAL void	deb_growlevel _((void));
VIRTUAL void	debprofdump _((void));
VIRTUAL I32	debop _((OP* o));
VIRTUAL I32	debstack _((void));
VIRTUAL I32	debstackptrs _((void));
VIRTUAL char*	delimcpy _((char* to, char* toend, char* from, char* fromend,
		    int delim, I32* retlen));
VIRTUAL void	deprecate _((char* s));
VIRTUAL OP*	die _((const char* pat,...));
VIRTUAL OP*	die_where _((char* message));
VIRTUAL void	dounwind _((I32 cxix));
VIRTUAL bool	do_aexec _((SV* really, SV** mark, SV** sp));
VIRTUAL int	do_binmode _((PerlIO *fp, int iotype, int flag));
VIRTUAL void    do_chop _((SV* asv, SV* sv));
VIRTUAL bool	do_close _((GV* gv, bool not_implicit));
VIRTUAL bool	do_eof _((GV* gv));
VIRTUAL bool	do_exec _((char* cmd));
VIRTUAL void	do_execfree _((void));
d77 2
a78 2
VIRTUAL void	do_join _((SV* sv, SV* del, SV** mark, SV** sp));
VIRTUAL OP*	do_kv _((ARGSproto));
d83 7
a89 7
VIRTUAL bool	do_open _((GV* gv, char* name, I32 len,
		   int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp));
VIRTUAL void	do_pipe _((SV* sv, GV* rgv, GV* wgv));
VIRTUAL bool	do_print _((SV* sv, PerlIO* fp));
VIRTUAL OP*	do_readline _((void));
VIRTUAL I32	do_chomp _((SV* sv));
VIRTUAL bool	do_seek _((GV* gv, long pos, int whence));
d94 8
a101 9
VIRTUAL void	do_sprintf _((SV* sv, I32 len, SV** sarg));
VIRTUAL long	do_sysseek _((GV* gv, long pos, int whence));
VIRTUAL long	do_tell _((GV* gv));
VIRTUAL I32	do_trans _((SV* sv, OP* arg));
VIRTUAL void	do_vecset _((SV* sv));
VIRTUAL void	do_vop _((I32 optype, SV* sv, SV* left, SV* right));
VIRTUAL I32	dowantarray _((void));
VIRTUAL void	dump_all _((void));
VIRTUAL void	dump_eval _((void));
d103 1
a103 1
VIRTUAL void	dump_fds _((char* s));
d105 2
a106 2
VIRTUAL void	dump_form _((GV* gv));
VIRTUAL void	dump_gv _((GV* gv));
d108 1
a108 1
VIRTUAL void	dump_mstats _((char* s));
d110 68
a177 97
VIRTUAL void	dump_op _((OP* arg));
VIRTUAL void	dump_pm _((PMOP* pm));
VIRTUAL void	dump_packsubs _((HV* stash));
VIRTUAL void	dump_sub _((GV* gv));
VIRTUAL void	fbm_compile _((SV* sv, U32 flags));
VIRTUAL char*	fbm_instr _((unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags));
VIRTUAL char*	find_script _((char *scriptname, bool dosearch, char **search_ext, I32 flags));
#ifdef USE_THREADS
VIRTUAL PADOFFSET	find_threadsv _((char *name));
#endif
VIRTUAL OP*	force_list _((OP* arg));
VIRTUAL OP*	fold_constants _((OP* arg));
VIRTUAL char*	form _((const char* pat, ...));
VIRTUAL void	free_tmps _((void));
VIRTUAL OP*	gen_constant_list _((OP* o));
VIRTUAL void	gp_free _((GV* gv));
VIRTUAL GP*	gp_ref _((GP* gp));
VIRTUAL GV*	gv_AVadd _((GV* gv));
VIRTUAL GV*	gv_HVadd _((GV* gv));
VIRTUAL GV*	gv_IOadd _((GV* gv));
VIRTUAL GV*	gv_autoload4 _((HV* stash, char* name, STRLEN len, I32 method));
VIRTUAL void	gv_check _((HV* stash));
VIRTUAL void	gv_efullname _((SV* sv, GV* gv));
VIRTUAL void	gv_efullname3 _((SV* sv, GV* gv, char* prefix));
VIRTUAL GV*	gv_fetchfile _((char* name));
VIRTUAL GV*	gv_fetchmeth _((HV* stash, char* name, STRLEN len, I32 level));
VIRTUAL GV*	gv_fetchmethod _((HV* stash, char* name));
VIRTUAL GV*	gv_fetchmethod_autoload _((HV* stash, char* name, I32 autoload));
VIRTUAL GV*	gv_fetchpv _((char* name, I32 add, I32 sv_type));
VIRTUAL void	gv_fullname _((SV* sv, GV* gv));
VIRTUAL void	gv_fullname3 _((SV* sv, GV* gv, char* prefix));
VIRTUAL void	gv_init _((GV* gv, HV* stash, char* name, STRLEN len, int multi));
VIRTUAL HV*	gv_stashpv _((char* name, I32 create));
VIRTUAL HV*	gv_stashpvn _((char* name, U32 namelen, I32 create));
VIRTUAL HV*	gv_stashsv _((SV* sv, I32 create));
VIRTUAL void	hv_clear _((HV* tb));
VIRTUAL void	hv_delayfree_ent _((HV* hv, HE* entry));
VIRTUAL SV*	hv_delete _((HV* tb, char* key, U32 klen, I32 flags));
VIRTUAL SV*	hv_delete_ent _((HV* tb, SV* key, I32 flags, U32 hash));
VIRTUAL bool	hv_exists _((HV* tb, char* key, U32 klen));
VIRTUAL bool	hv_exists_ent _((HV* tb, SV* key, U32 hash));
VIRTUAL SV**	hv_fetch _((HV* tb, char* key, U32 klen, I32 lval));
VIRTUAL HE*	hv_fetch_ent _((HV* tb, SV* key, I32 lval, U32 hash));
VIRTUAL void	hv_free_ent _((HV* hv, HE* entry));
VIRTUAL I32	hv_iterinit _((HV* tb));
VIRTUAL char*	hv_iterkey _((HE* entry, I32* retlen));
VIRTUAL SV*	hv_iterkeysv _((HE* entry));
VIRTUAL HE*	hv_iternext _((HV* tb));
VIRTUAL SV*	hv_iternextsv _((HV* hv, char** key, I32* retlen));
VIRTUAL SV*	hv_iterval _((HV* tb, HE* entry));
VIRTUAL void	hv_ksplit _((HV* hv, IV newmax));
VIRTUAL void	hv_magic _((HV* hv, GV* gv, int how));
VIRTUAL SV**	hv_store _((HV* tb, char* key, U32 klen, SV* val, U32 hash));
VIRTUAL HE*	hv_store_ent _((HV* tb, SV* key, SV* val, U32 hash));
VIRTUAL void	hv_undef _((HV* tb));
VIRTUAL I32	ibcmp _((char* a, char* b, I32 len));
VIRTUAL I32	ibcmp_locale _((char* a, char* b, I32 len));
VIRTUAL I32	ingroup _((I32 testgid, I32 effective));
VIRTUAL void	init_stacks _((ARGSproto));
VIRTUAL U32	intro_my _((void));
VIRTUAL char*	instr _((char* big, char* little));
VIRTUAL bool	io_close _((IO* io));
VIRTUAL OP*	invert _((OP* cmd));
VIRTUAL OP*	jmaybe _((OP* arg));
VIRTUAL I32	keyword _((char* d, I32 len));
VIRTUAL void	leave_scope _((I32 base));
VIRTUAL void	lex_end _((void));
VIRTUAL void	lex_start _((SV* line));
VIRTUAL OP*	linklist _((OP* o));
VIRTUAL OP*	list _((OP* o));
VIRTUAL OP*	listkids _((OP* o));
VIRTUAL OP*	localize _((OP* arg, I32 lexical));
VIRTUAL I32	looks_like_number _((SV* sv));
VIRTUAL int	magic_clearenv	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_clear_all_env _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_clearpack	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_clearsig	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_existspack _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_freeregexp _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_get	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getarylen	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getdefelem _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getglob	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getnkeys	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getpack	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getpos	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getsig	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getsubstr	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_gettaint	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getuvar	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_getvec	_((SV* sv, MAGIC* mg));
VIRTUAL U32	magic_len	_((SV* sv, MAGIC* mg));
#ifdef USE_THREADS
VIRTUAL int	magic_mutexfree	_((SV* sv, MAGIC* mg));
#endif /* USE_THREADS */
VIRTUAL int	magic_nextpack	_((SV* sv, MAGIC* mg, SV* key));
VIRTUAL int	magic_set	_((SV* sv, MAGIC* mg));
d179 1
a179 1
VIRTUAL int	magic_setamagic	_((SV* sv, MAGIC* mg));
d181 16
a196 24
VIRTUAL int	magic_setarylen	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setbm	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setdbline	_((SV* sv, MAGIC* mg));
#ifdef USE_LOCALE_COLLATE
VIRTUAL int	magic_setcollxfrm _((SV* sv, MAGIC* mg));
#endif
VIRTUAL int	magic_setdefelem _((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setenv	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setfm	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setisa	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setglob	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setmglob	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setnkeys	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setpack	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setpos	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setsig	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setsubstr	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_settaint	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setuvar	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_setvec	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_set_all_env _((SV* sv, MAGIC* mg));
VIRTUAL U32	magic_sizepack	_((SV* sv, MAGIC* mg));
VIRTUAL int	magic_wipepack	_((SV* sv, MAGIC* mg));
VIRTUAL void	magicname _((char* sym, char* name, I32 namlen));
d198 2
a199 22
#ifdef MYMALLOC
VIRTUAL MEM_SIZE	malloced_size _((void *p));
#endif
VIRTUAL void	markstack_grow _((void));
#ifdef USE_LOCALE_COLLATE
VIRTUAL char*	mem_collxfrm _((const char* s, STRLEN len, STRLEN* xlen));
#endif
VIRTUAL char*	mess _((const char* pat, va_list* args));
VIRTUAL int	mg_clear _((SV* sv));
VIRTUAL int	mg_copy _((SV* sv, SV* nsv, char* key, I32 klen));
VIRTUAL MAGIC*	mg_find _((SV* sv, int type));
VIRTUAL int	mg_free _((SV* sv));
VIRTUAL int	mg_get _((SV* sv));
VIRTUAL U32	mg_length _((SV* sv));
VIRTUAL void	mg_magical _((SV* sv));
VIRTUAL int	mg_set _((SV* sv));
VIRTUAL I32	mg_size _((SV* sv));
VIRTUAL OP*	mod _((OP* o, I32 type));
VIRTUAL char*	moreswitches _((char* s));
VIRTUAL OP*	my _((OP* o));
#if !defined(HAS_BCOPY) || !defined(HAS_SAFE_BCOPY)
VIRTUAL char*	my_bcopy _((char* from, char* to, I32 len));
d201 19
d223 9
a231 15
VIRTUAL void	my_exit _((U32 status)) __attribute__((noreturn));
VIRTUAL void	my_failure_exit _((void)) __attribute__((noreturn));
VIRTUAL I32	my_lstat _((ARGSproto));
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
VIRTUAL I32	my_memcmp _((char* s1, char* s2, I32 len));
#endif
#if !defined(HAS_MEMSET)
VIRTUAL void*	my_memset _((char* loc, I32 ch, I32 len));
#endif
#ifndef PERL_OBJECT
VIRTUAL I32	my_pclose _((PerlIO* ptr));
VIRTUAL PerlIO*	my_popen _((char* cmd, char* mode));
#endif
VIRTUAL void	my_setenv _((char* nam, char* val));
VIRTUAL I32	my_stat _((ARGSproto));
d233 42
a274 78
VIRTUAL short	my_swap _((short s));
VIRTUAL long	my_htonl _((long l));
VIRTUAL long	my_ntohl _((long l));
#endif
VIRTUAL void	my_unexec _((void));
VIRTUAL OP*	newANONLIST _((OP* o));
VIRTUAL OP*	newANONHASH _((OP* o));
VIRTUAL OP*	newANONSUB _((I32 floor, OP* proto, OP* block));
VIRTUAL OP*	newASSIGNOP _((I32 flags, OP* left, I32 optype, OP* right));
VIRTUAL OP*	newCONDOP _((I32 flags, OP* expr, OP* trueop, OP* falseop));
VIRTUAL void	newCONSTSUB _((HV* stash, char* name, SV* sv));
VIRTUAL void	newFORM _((I32 floor, OP* o, OP* block));
VIRTUAL OP*	newFOROP _((I32 flags, char* label, line_t forline, OP* sclr, OP* expr, OP*block, OP*cont));
VIRTUAL OP*	newLOGOP _((I32 optype, I32 flags, OP* left, OP* right));
VIRTUAL OP*	newLOOPEX _((I32 type, OP* label));
VIRTUAL OP*	newLOOPOP _((I32 flags, I32 debuggable, OP* expr, OP* block));
VIRTUAL OP*	newNULLLIST _((void));
VIRTUAL OP*	newOP _((I32 optype, I32 flags));
VIRTUAL void	newPROG _((OP* o));
VIRTUAL OP*	newRANGE _((I32 flags, OP* left, OP* right));
VIRTUAL OP*	newSLICEOP _((I32 flags, OP* subscript, OP* list));
VIRTUAL OP*	newSTATEOP _((I32 flags, char* label, OP* o));
VIRTUAL CV*	newSUB _((I32 floor, OP* o, OP* proto, OP* block));
VIRTUAL CV*	newXS _((char* name, void (*subaddr)(CV* cv _CPERLproto), char* filename));
VIRTUAL AV*	newAV _((void));
VIRTUAL OP*	newAVREF _((OP* o));
VIRTUAL OP*	newBINOP _((I32 type, I32 flags, OP* first, OP* last));
VIRTUAL OP*	newCVREF _((I32 flags, OP* o));
VIRTUAL OP*	newGVOP _((I32 type, I32 flags, GV* gv));
VIRTUAL GV*	newGVgen _((char* pack));
VIRTUAL OP*	newGVREF _((I32 type, OP* o));
VIRTUAL OP*	newHVREF _((OP* o));
VIRTUAL HV*	newHV _((void));
VIRTUAL HV*	newHVhv _((HV* hv));
VIRTUAL IO*	newIO _((void));
VIRTUAL OP*	newLISTOP _((I32 type, I32 flags, OP* first, OP* last));
VIRTUAL OP*	newPMOP _((I32 type, I32 flags));
VIRTUAL OP*	newPVOP _((I32 type, I32 flags, char* pv));
VIRTUAL SV*	newRV _((SV* pref));
VIRTUAL SV*	newRV_noinc _((SV *sv));
VIRTUAL SV*	newSV _((STRLEN len));
VIRTUAL OP*	newSVREF _((OP* o));
VIRTUAL OP*	newSVOP _((I32 type, I32 flags, SV* sv));
VIRTUAL SV*	newSViv _((IV i));
VIRTUAL SV*	newSVnv _((double n));
VIRTUAL SV*	newSVpv _((char* s, STRLEN len));
VIRTUAL SV*	newSVpvn _((char *s, STRLEN len));
VIRTUAL SV*	newSVpvf _((const char* pat, ...));
VIRTUAL SV*	newSVrv _((SV* rv, char* classname));
VIRTUAL SV*	newSVsv _((SV* old));
VIRTUAL OP*	newUNOP _((I32 type, I32 flags, OP* first));
VIRTUAL OP*	newWHILEOP _((I32 flags, I32 debuggable, LOOP* loop,
		      I32 whileline, OP* expr, OP* block, OP* cont));
#ifdef USE_THREADS
VIRTUAL struct perl_thread *	new_struct_thread _((struct perl_thread *t));
#endif
VIRTUAL PERL_SI *	new_stackinfo _((I32 stitems, I32 cxitems));
VIRTUAL PerlIO*	nextargv _((GV* gv));
VIRTUAL char*	ninstr _((char* big, char* bigend, char* little, char* lend));
VIRTUAL OP*	oopsCV _((OP* o));
VIRTUAL void	op_free _((OP* arg));
VIRTUAL void	package _((OP* o));
VIRTUAL PADOFFSET	pad_alloc _((I32 optype, U32 tmptype));
VIRTUAL PADOFFSET	pad_allocmy _((char* name));
VIRTUAL PADOFFSET	pad_findmy _((char* name));
VIRTUAL OP*	oopsAV _((OP* o));
VIRTUAL OP*	oopsHV _((OP* o));
VIRTUAL void	pad_leavemy _((I32 fill));
VIRTUAL SV*	pad_sv _((PADOFFSET po));
VIRTUAL void	pad_free _((PADOFFSET po));
VIRTUAL void	pad_reset _((void));
VIRTUAL void	pad_swipe _((PADOFFSET po));
VIRTUAL void	peep _((OP* o));
#ifndef PERL_OBJECT
PerlInterpreter*	perl_alloc _((void));
#endif
#ifdef PERL_OBJECT
VIRTUAL void    perl_atexit _((void(*fn)(CPerlObj *, void *), void* ptr));
d276 1
a276 1
void    perl_atexit _((void(*fn)(void *), void*));
d278 30
a307 8
VIRTUAL I32	perl_call_argv _((char* sub_name, I32 flags, char** argv));
VIRTUAL I32	perl_call_method _((char* methname, I32 flags));
VIRTUAL I32	perl_call_pv _((char* sub_name, I32 flags));
VIRTUAL I32	perl_call_sv _((SV* sv, I32 flags));
#ifdef PERL_OBJECT
VIRTUAL void	perl_construct _((void));
VIRTUAL void	perl_destruct _((void));
#else
d310 1
a310 6
#endif
VIRTUAL SV*	perl_eval_pv _((char* p, I32 croak_on_error));
VIRTUAL I32	perl_eval_sv _((SV* sv, I32 flags));
#ifdef PERL_OBJECT
VIRTUAL void	perl_free _((void));
#else
d312 5
a316 15
#endif
VIRTUAL SV*	perl_get_sv _((char* name, I32 create));
VIRTUAL AV*	perl_get_av _((char* name, I32 create));
VIRTUAL HV*	perl_get_hv _((char* name, I32 create));
VIRTUAL CV*	perl_get_cv _((char* name, I32 create));
VIRTUAL int	perl_init_i18nl10n _((int printwarn));
VIRTUAL int	perl_init_i18nl14n _((int printwarn));
VIRTUAL void	perl_new_collate _((char* newcoll));
VIRTUAL void	perl_new_ctype _((char* newctype));
VIRTUAL void	perl_new_numeric _((char* newcoll));
VIRTUAL void	perl_set_numeric_local _((void));
VIRTUAL void	perl_set_numeric_standard _((void));
#ifdef PERL_OBJECT
VIRTUAL int	perl_parse _((void(*xsinit)(CPerlObj*), int argc, char** argv, char** env));
#else
d318 1
a318 2
#endif
VIRTUAL void	perl_require_pv _((char* pv));
d320 27
a346 2
#ifdef PERL_OBJECT
VIRTUAL int	perl_run _((void));
d348 7
a354 1
int	perl_run _((PerlInterpreter* sv_interp));
a355 29
VIRTUAL void	pidgone _((int pid, int status));
VIRTUAL void	pmflag _((U16* pmfl, int ch));
VIRTUAL OP*	pmruntime _((OP* pm, OP* expr, OP* repl));
VIRTUAL OP*	pmtrans _((OP* o, OP* expr, OP* repl));
VIRTUAL OP*	pop_return _((void));
VIRTUAL void	pop_scope _((void));
VIRTUAL OP*	prepend_elem _((I32 optype, OP* head, OP* tail));
VIRTUAL void	push_return _((OP* o));
VIRTUAL void	push_scope _((void));
VIRTUAL OP*	ref _((OP* o, I32 type));
VIRTUAL OP*	refkids _((OP* o, I32 type));
VIRTUAL void	regdump _((regexp* r));
VIRTUAL I32	pregexec _((regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, U32 nosave));
VIRTUAL void	pregfree _((struct regexp* r));
VIRTUAL regexp*	pregcomp _((char* exp, char* xend, PMOP* pm));
VIRTUAL I32	regexec_flags _((regexp* prog, char* stringarg, char* strend,
			 char* strbeg, I32 minend, SV* screamer,
			 void* data, U32 flags));
VIRTUAL regnode* regnext _((regnode* p));
VIRTUAL void	regprop _((SV* sv, regnode* o));
VIRTUAL void	repeatcpy _((char* to, char* from, I32 len, I32 count));
VIRTUAL char*	rninstr _((char* big, char* bigend, char* little, char* lend));
VIRTUAL Sighandler_t rsignal _((int i, Sighandler_t t));
VIRTUAL int	rsignal_restore _((int i, Sigsave_t* t));
VIRTUAL int	rsignal_save _((int i, Sighandler_t t1, Sigsave_t* t2));
VIRTUAL Sighandler_t rsignal_state _((int i));
VIRTUAL void	rxres_free _((void** rsp));
VIRTUAL void	rxres_restore _((void** rsp, REGEXP* prx));
VIRTUAL void	rxres_save _((void** rsp, REGEXP* prx));
d357 1
a357 1
VIRTUAL I32	same_dirent _((char* a, char* b));
d359 7
a365 8
VIRTUAL char*	savepv _((char* sv));
VIRTUAL char*	savepvn _((char* sv, I32 len));
VIRTUAL void	savestack_grow _((void));
VIRTUAL void	save_aelem _((AV* av, I32 idx, SV **sptr));
VIRTUAL void	save_aptr _((AV** aptr));
VIRTUAL AV*	save_ary _((GV* gv));
VIRTUAL void	save_clearsv _((SV** svp));
VIRTUAL void	save_delete _((HV* hv, char* key, I32 klen));
a366 4
#ifdef PERL_OBJECT
typedef void (CPerlObj::*DESTRUCTORFUNC) _((void*));
VIRTUAL void	save_destructor _((DESTRUCTORFUNC f, void* p));
#else
a367 1
#endif
d369 25
a393 32
VIRTUAL void	save_freesv _((SV* sv));
VIRTUAL void	save_freeop _((OP* o));
VIRTUAL void	save_freepv _((char* pv));
VIRTUAL void	save_gp _((GV* gv, I32 empty));
VIRTUAL HV*	save_hash _((GV* gv));
VIRTUAL void	save_helem _((HV* hv, SV *key, SV **sptr));
VIRTUAL void	save_hints _((void));
VIRTUAL void	save_hptr _((HV** hptr));
VIRTUAL void	save_I16 _((I16* intp));
VIRTUAL void	save_I32 _((I32* intp));
VIRTUAL void	save_int _((int* intp));
VIRTUAL void	save_item _((SV* item));
VIRTUAL void	save_iv _((IV* iv));
VIRTUAL void	save_list _((SV** sarg, I32 maxsarg));
VIRTUAL void	save_long _((long* longp));
VIRTUAL void	save_nogv _((GV* gv));
VIRTUAL void	save_op _((void));
VIRTUAL SV*	save_scalar _((GV* gv));
VIRTUAL void	save_pptr _((char** pptr));
VIRTUAL void	save_sptr _((SV** sptr));
VIRTUAL SV*	save_svref _((SV** sptr));
VIRTUAL SV**	save_threadsv _((PADOFFSET i));
VIRTUAL OP*	sawparens _((OP* o));
VIRTUAL OP*	scalar _((OP* o));
VIRTUAL OP*	scalarkids _((OP* o));
VIRTUAL OP*	scalarseq _((OP* o));
VIRTUAL OP*	scalarvoid _((OP* o));
VIRTUAL UV	scan_hex _((char* start, I32 len, I32* retlen));
VIRTUAL char*	scan_num _((char* s));
VIRTUAL UV	scan_oct _((char* start, I32 len, I32* retlen));
VIRTUAL OP*	scope _((OP* o));
VIRTUAL char*	screaminstr _((SV* bigsv, SV* littlesv, I32 start_shift, I32 end_shift, I32 *state, I32 last));
d395 1
a395 1
VIRTUAL I32	setenv_getix _((char* nam));
d397 28
a424 44
VIRTUAL void	setdefout _((GV* gv));
VIRTUAL char*	sharepvn _((char* sv, I32 len, U32 hash));
VIRTUAL HEK*	share_hek _((char* sv, I32 len, U32 hash));
VIRTUAL Signal_t sighandler _((int sig));
VIRTUAL SV**	stack_grow _((SV** sp, SV**p, int n));
VIRTUAL I32	start_subparse _((I32 is_format, U32 flags));
VIRTUAL void	sub_crush_depth _((CV* cv));
VIRTUAL bool	sv_2bool _((SV* sv));
VIRTUAL CV*	sv_2cv _((SV* sv, HV** st, GV** gvp, I32 lref));
VIRTUAL IO*	sv_2io _((SV* sv));
VIRTUAL IV	sv_2iv _((SV* sv));
VIRTUAL SV*	sv_2mortal _((SV* sv));
VIRTUAL double	sv_2nv _((SV* sv));
VIRTUAL char*	sv_2pv _((SV* sv, STRLEN* lp));
VIRTUAL UV	sv_2uv _((SV* sv));
VIRTUAL IV	sv_iv _((SV* sv));
VIRTUAL UV	sv_uv _((SV* sv));
VIRTUAL double	sv_nv _((SV* sv));
VIRTUAL char *	sv_pvn _((SV *sv, STRLEN *len));
VIRTUAL I32	sv_true _((SV *sv));
VIRTUAL void	sv_add_arena _((char* ptr, U32 size, U32 flags));
VIRTUAL int	sv_backoff _((SV* sv));
VIRTUAL SV*	sv_bless _((SV* sv, HV* stash));
VIRTUAL void	sv_catpvf _((SV* sv, const char* pat, ...));
VIRTUAL void	sv_catpv _((SV* sv, char* ptr));
VIRTUAL void	sv_catpvn _((SV* sv, char* ptr, STRLEN len));
VIRTUAL void	sv_catsv _((SV* dsv, SV* ssv));
VIRTUAL void	sv_chop _((SV* sv, char* ptr));
VIRTUAL void	sv_clean_all _((void));
VIRTUAL void	sv_clean_objs _((void));
VIRTUAL void	sv_clear _((SV* sv));
VIRTUAL I32	sv_cmp _((SV* sv1, SV* sv2));
VIRTUAL I32	sv_cmp_locale _((SV* sv1, SV* sv2));
#ifdef USE_LOCALE_COLLATE
VIRTUAL char*	sv_collxfrm _((SV* sv, STRLEN* nxp));
#endif
VIRTUAL OP*	sv_compile_2op _((SV* sv, OP** startp, char* code, AV** avp));
VIRTUAL void	sv_dec _((SV* sv));
VIRTUAL void	sv_dump _((SV* sv));
VIRTUAL bool	sv_derived_from _((SV* sv, char* name));
VIRTUAL I32	sv_eq _((SV* sv1, SV* sv2));
VIRTUAL void	sv_free _((SV* sv));
VIRTUAL void	sv_free_arenas _((void));
VIRTUAL char*	sv_gets _((SV* sv, PerlIO* fp, I32 append));
d426 1
a426 1
VIRTUAL char*	sv_grow _((SV* sv, I32 newlen));
d428 1
a428 1
VIRTUAL char*	sv_grow _((SV* sv, unsigned long newlen));
d430 31
a460 42
VIRTUAL void	sv_inc _((SV* sv));
VIRTUAL void	sv_insert _((SV* bigsv, STRLEN offset, STRLEN len, char* little, STRLEN littlelen));
VIRTUAL int	sv_isa _((SV* sv, char* name));
VIRTUAL int	sv_isobject _((SV* sv));
VIRTUAL STRLEN	sv_len _((SV* sv));
VIRTUAL void	sv_magic _((SV* sv, SV* obj, int how, char* name, I32 namlen));
VIRTUAL SV*	sv_mortalcopy _((SV* oldsv));
VIRTUAL SV*	sv_newmortal _((void));
VIRTUAL SV*	sv_newref _((SV* sv));
VIRTUAL char*	sv_peek _((SV* sv));
VIRTUAL char*	sv_pvn_force _((SV* sv, STRLEN* lp));
VIRTUAL char*	sv_reftype _((SV* sv, int ob));
VIRTUAL void	sv_replace _((SV* sv, SV* nsv));
VIRTUAL void	sv_report_used _((void));
VIRTUAL void	sv_reset _((char* s, HV* stash));
VIRTUAL void	sv_setpvf _((SV* sv, const char* pat, ...));
VIRTUAL void	sv_setiv _((SV* sv, IV num));
VIRTUAL void	sv_setpviv _((SV* sv, IV num));
VIRTUAL void	sv_setuv _((SV* sv, UV num));
VIRTUAL void	sv_setnv _((SV* sv, double num));
VIRTUAL SV*	sv_setref_iv _((SV* rv, char* classname, IV iv));
VIRTUAL SV*	sv_setref_nv _((SV* rv, char* classname, double nv));
VIRTUAL SV*	sv_setref_pv _((SV* rv, char* classname, void* pv));
VIRTUAL SV*	sv_setref_pvn _((SV* rv, char* classname, char* pv, I32 n));
VIRTUAL void	sv_setpv _((SV* sv, const char* ptr));
VIRTUAL void	sv_setpvn _((SV* sv, const char* ptr, STRLEN len));
VIRTUAL void	sv_setsv _((SV* dsv, SV* ssv));
VIRTUAL void	sv_taint _((SV* sv));
VIRTUAL bool	sv_tainted _((SV* sv));
VIRTUAL int	sv_unmagic _((SV* sv, int type));
VIRTUAL void	sv_unref _((SV* sv));
VIRTUAL void	sv_untaint _((SV* sv));
VIRTUAL bool	sv_upgrade _((SV* sv, U32 mt));
VIRTUAL void	sv_usepvn _((SV* sv, char* ptr, STRLEN len));
VIRTUAL void	sv_vcatpvfn _((SV* sv, const char* pat, STRLEN patlen,
		       va_list* args, SV** svargs, I32 svmax,
		       bool *used_locale));
VIRTUAL void	sv_vsetpvfn _((SV* sv, const char* pat, STRLEN patlen,
		       va_list* args, SV** svargs, I32 svmax,
		       bool *used_locale));
VIRTUAL void	taint_env _((void));
VIRTUAL void	taint_proper _((const char* f, char* s));
d462 1
a462 4
VIRTUAL I32	unlnk _((char* f));
#endif
#ifdef USE_THREADS
VIRTUAL void	unlock_condpair _((void* svv));
d464 9
a472 298
VIRTUAL void	unsharepvn _((char* sv, I32 len, U32 hash));
VIRTUAL void	unshare_hek _((HEK* hek));
VIRTUAL void	utilize _((int aver, I32 floor, OP* version, OP* id, OP* arg));
VIRTUAL void	vivify_defelem _((SV* sv));
VIRTUAL void	vivify_ref _((SV* sv, U32 to_what));
VIRTUAL I32	wait4pid _((int pid, int* statusp, int flags));
VIRTUAL void	warn _((const char* pat,...));
VIRTUAL void	watch _((char** addr));
VIRTUAL I32	whichsig _((char* sig));
VIRTUAL int	yyerror _((char* s));
VIRTUAL int	yylex _((void));
VIRTUAL int	yyparse _((void));
VIRTUAL int	yywarn _((char* s));

#ifndef MYMALLOC
VIRTUAL Malloc_t safemalloc _((MEM_SIZE nbytes));
VIRTUAL Malloc_t safecalloc _((MEM_SIZE elements, MEM_SIZE size));
VIRTUAL Malloc_t saferealloc _((Malloc_t where, MEM_SIZE nbytes));
VIRTUAL Free_t   safefree _((Malloc_t where));
#endif

#ifdef LEAKTEST
VIRTUAL Malloc_t safexmalloc _((I32 x, MEM_SIZE size));
VIRTUAL Malloc_t safexcalloc _((I32 x, MEM_SIZE elements, MEM_SIZE size));
VIRTUAL Malloc_t safexrealloc _((Malloc_t where, MEM_SIZE size));
VIRTUAL void     safexfree _((Malloc_t where));
#endif

#ifdef PERL_GLOBAL_STRUCT
VIRTUAL struct perl_vars *Perl_GetVars _((void));
#endif

#ifdef PERL_OBJECT
protected:
void hsplit _((HV *hv));
void hfreeentries _((HV *hv));
void more_he _((void));
HE* new_he _((void));
void del_he _((HE *p));
HEK *save_hek _((char *str, I32 len, U32 hash));
SV *mess_alloc _((void));
void gv_init_sv _((GV *gv, I32 sv_type));
SV *save_scalar_at _((SV **sptr));
IV asIV _((SV* sv));
UV asUV _((SV* sv));
SV *more_sv _((void));
void more_xiv _((void));
void more_xnv _((void));
void more_xpv _((void));
void more_xrv _((void));
XPVIV *new_xiv _((void));
XPVNV *new_xnv _((void));
XPV *new_xpv _((void));
XRV *new_xrv _((void));
void del_xiv _((XPVIV* p));
void del_xnv _((XPVNV* p));
void del_xpv _((XPV* p));
void del_xrv _((XRV* p));
void sv_mortalgrow _((void));
void sv_unglob _((SV* sv));
void sv_check_thinkfirst _((SV *sv));
I32 avhv_index_sv _((SV* sv));

void do_report_used _((SV *sv));
void do_clean_objs _((SV *sv));
void do_clean_named_objs _((SV *sv));
void do_clean_all _((SV *sv));
void not_a_number _((SV *sv));
void* my_safemalloc _((MEM_SIZE size));

typedef void (CPerlObj::*SVFUNC) _((SV*));
void visit _((SVFUNC f));

typedef I32 (CPerlObj::*SVCOMPARE) _((SV*, SV*));
void qsortsv _((SV ** array, size_t num_elts, SVCOMPARE f));
I32 sortcv _((SV *a, SV *b));
void save_magic _((MGS *mgs, SV *sv));
int magic_methpack _((SV *sv, MAGIC *mg, char *meth));
int magic_methcall _((SV *sv, MAGIC *mg, char *meth, I32 flags, int n, SV *val));
OP * doform _((CV *cv, GV *gv, OP *retop));
void doencodes _((SV* sv, char* s, I32 len));
SV* refto _((SV* sv));
U32 seed _((void));
OP *docatch _((OP *o));
OP *dofindlabel _((OP *o, char *label, OP **opstack, OP **oplimit));
void doparseform _((SV *sv));
I32 dopoptoeval _((I32 startingblock));
I32 dopoptolabel _((char *label));
I32 dopoptoloop _((I32 startingblock));
I32 dopoptosub _((I32 startingblock));
I32 dopoptosub_at _((PERL_CONTEXT* cxstk, I32 startingblock));
void save_lines _((AV *array, SV *sv));
OP *doeval _((int gimme, OP** startop));
SV *mul128 _((SV *sv, U8 m));
SV *is_an_int _((char *s, STRLEN l));
int div128 _((SV *pnum, bool *done));

int runops_standard _((void));
int runops_debug _((void));

void check_uni _((void));
void  force_next _((I32 type));
char *force_version _((char *start));
char *force_word _((char *start, int token, int check_keyword, int allow_pack, int allow_tick));
SV *tokeq _((SV *sv));
char *scan_const _((char *start));
char *scan_formline _((char *s));
char *scan_heredoc _((char *s));
char *scan_ident _((char *s, char *send, char *dest, STRLEN destlen, I32 ck_uni));
char *scan_inputsymbol _((char *start));
char *scan_pat _((char *start, I32 type));
char *scan_str _((char *start));
char *scan_subst _((char *start));
char *scan_trans _((char *start));
char *scan_word _((char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp));
char *skipspace _((char *s));
void checkcomma _((char *s, char *name, char *what));
void force_ident _((char *s, int kind));
void incline _((char *s));
int intuit_method _((char *s, GV *gv));
int intuit_more _((char *s));
I32 lop _((I32 f, expectation x, char *s));
void missingterm _((char *s));
void no_op _((char *what, char *s));
void set_csh _((void));
I32 sublex_done _((void));
I32 sublex_push _((void));
I32 sublex_start _((void));
#ifdef CRIPPLED_CC
int uni _((I32 f, char *s));
#endif
char * filter_gets _((SV *sv, PerlIO *fp, STRLEN append));
SV *new_constant _((char *s, STRLEN len, char *key, SV *sv, SV *pv, char *type));
int ao _((int toketype));
void depcom _((void));
#ifdef WIN32
I32 win32_textfilter _((int idx, SV *sv, int maxlen));
#endif
char* incl_perldb _((void));
SV *isa_lookup _((HV *stash, char *name, int len, int level));
CV *get_db_sub _((SV **svp, CV *cv));
I32 list_assignment _((OP *o));
void bad_type _((I32 n, char *t, char *name, OP *kid));
OP *modkids _((OP *o, I32 type));
OP *no_fh_allowed _((OP *o));
OP *scalarboolean _((OP *o));
OP *too_few_arguments _((OP *o, char* name));
OP *too_many_arguments _((OP *o, char* name));
void null _((OP* o));
PADOFFSET pad_findlex _((char* name, PADOFFSET newoff, U32 seq, CV* startcv, I32 cx_ix, I32 saweval, U32 flags));
OP *newDEFSVOP _((void));
char* gv_ename _((GV *gv));
CV *cv_clone2 _((CV *proto, CV *outside));

void find_beginning _((void));
void forbid_setid _((char *));
void incpush _((char *, int));
void init_interp _((void));
void init_ids _((void));
void init_debugger _((void));
void init_lexer _((void));
void init_main_stash _((void));
#ifdef USE_THREADS
struct perl_thread * init_main_thread _((void));
#endif /* USE_THREADS */
void init_perllib _((void));
void init_postdump_symbols _((int, char **, char **));
void init_predump_symbols _((void));
void my_exit_jump _((void)) __attribute__((noreturn));
void nuke_stacks _((void));
void open_script _((char *, bool, SV *, int *fd));
void usage _((char *));
void validate_suid _((char *, char*, int));

regnode *reg _((I32, I32 *));
regnode *reganode _((U8, U32));
regnode *regatom _((I32 *));
regnode *regbranch _((I32 *, I32));
void regc _((U8, char *));
regnode *regclass _((void));
I32 regcurly _((char *));
regnode *reg_node _((U8));
regnode *regpiece _((I32 *));
void reginsert _((U8, regnode *));
void regoptail _((regnode *, regnode *));
void regset _((char *, I32));
void regtail _((regnode *, regnode *));
char* regwhite _((char *, char *));
char* nextchar _((void));
regnode *dumpuntil _((regnode *start, regnode *node, regnode *last, SV* sv, I32 l));
void scan_commit _((scan_data_t *data));
I32 study_chunk _((regnode **scanp, I32 *deltap, regnode *last, scan_data_t *data, U32 flags));
I32 add_data _((I32 n, char *s));
void	re_croak2 _((const char* pat1,const char* pat2,...)) __attribute__((noreturn));
I32 regmatch _((regnode *prog));
I32 regrepeat _((regnode *p, I32 max));
I32 regrepeat_hard _((regnode *p, I32 max, I32 *lp));
I32 regtry _((regexp *prog, char *startpos));
bool reginclass _((char *p, I32 c));
CHECKPOINT regcppush _((I32 parenfloor));
char * regcppop _((void));
void dump _((char *pat,...));
#ifdef WIN32
int do_aspawn _((void *vreally, void **vmark, void **vsp));
#endif

#ifdef DEBUGGING
void del_sv _((SV *p));
#endif
void debprof _((OP *o));

void *bset_obj_store _((void *obj, I32 ix));
OP *new_logop _((I32 type, I32 flags, OP **firstp, OP **otherp));
I32     amagic_cmp _((register SV *str1, register SV *str2));
I32     amagic_cmp_locale _((register SV *str1, register SV *str2));

#define PPDEF(s) OP* CPerlObj::s _((ARGSproto));
public:

#include "pp_proto.h"

OP * ck_ftst _((OP *o));
OP *ck_anoncode _((OP *o));
OP *ck_bitop _((OP *o));
OP *ck_concat _((OP *o));
OP *ck_spair _((OP *o));
OP *ck_delete _((OP *o));
OP *ck_eof _((OP *o));
OP *ck_eval _((OP *o));
OP *ck_exec _((OP *o));
OP *ck_exists _((OP *o));
OP *ck_rvconst _((OP *o));
OP *ck_fun _((OP *o));
OP *ck_glob _((OP *o));
OP *ck_grep _((OP *o));
OP *ck_index _((OP *o));
OP *ck_lengthconst _((OP *o));
OP *ck_lfun _((OP *o));
OP *ck_rfun _((OP *o));
OP *ck_listiob _((OP *o));
OP *ck_fun_locale _((OP *o));
OP *ck_scmp _((OP *o));
OP *ck_match _((OP *o));
OP *ck_null _((OP *o));
OP *ck_repeat _((OP *o));
OP *ck_require _((OP *o));
OP *ck_select _((OP *o));
OP *ck_shift _((OP *o));
OP *ck_sort _((OP *o));
OP *ck_split _((OP *o));
OP *ck_subr _((OP *o));
OP *ck_svconst _((OP *o));
OP *ck_trunc _((OP *o));
void unwind_handler_stack _((void *p));
void restore_magic _((void *p));
void restore_rsfp _((void *f));
void restore_expect _((void *e));
void restore_lex_expect _((void *e));
void yydestruct _((void *ptr));

VIRTUAL int fprintf _((PerlIO *pf, const char *pat, ...));
VIRTUAL SV**	get_specialsv_list _((void));

#ifdef WIN32
VIRTUAL int&	ErrorNo _((void));
#endif	/* WIN32 */
#else	/* !PERL_OBJECT */
END_EXTERN_C
#endif	/* PERL_OBJECT */

#ifdef INDIRECT_BGET_MACROS
VIRTUAL void byterun _((struct bytestream bs));
#else
VIRTUAL void byterun _((PerlIO *fp));
#endif /* INDIRECT_BGET_MACROS */

VIRTUAL void	sv_catpvf_mg _((SV *sv, const char* pat, ...));
VIRTUAL void	sv_catpv_mg _((SV *sv, char *ptr));
VIRTUAL void	sv_catpvn_mg _((SV *sv, char *ptr, STRLEN len));
VIRTUAL void	sv_catsv_mg _((SV *dstr, SV *sstr));
VIRTUAL void	sv_setpvf_mg _((SV *sv, const char* pat, ...));
VIRTUAL void	sv_setiv_mg _((SV *sv, IV i));
VIRTUAL void	sv_setpviv_mg _((SV *sv, IV iv));
VIRTUAL void	sv_setuv_mg _((SV *sv, UV u));
VIRTUAL void	sv_setnv_mg _((SV *sv, double num));
VIRTUAL void	sv_setpv_mg _((SV *sv, const char *ptr));
VIRTUAL void	sv_setpvn_mg _((SV *sv, const char *ptr, STRLEN len));
VIRTUAL void	sv_setsv_mg _((SV *dstr, SV *sstr));
VIRTUAL void	sv_usepvn_mg _((SV *sv, char *ptr, STRLEN len));

VIRTUAL MGVTBL*	get_vtbl _((int vtbl_id));
VIRTUAL OP*	dofile _((OP* term));
VIRTUAL void	save_generic_svref _((SV** sptr));
 
/* New virtual functions must be added here to maintain binary
 * compatablity with PERL_OBJECT
 */

@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d1 3
a3 7
/*
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is autogenerated from data in embed.pl.  Edit that file
 * and run 'make regen_headers' to effect changes.
 */


d5 4
a9 23

#if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p);
#endif
PERL_CALLCONV PerlInterpreter*	perl_alloc(void);
PERL_CALLCONV void	perl_construct(PerlInterpreter* interp);
PERL_CALLCONV void	perl_destruct(PerlInterpreter* interp);
PERL_CALLCONV void	perl_free(PerlInterpreter* interp);
PERL_CALLCONV int	perl_run(PerlInterpreter* interp);
PERL_CALLCONV int	perl_parse(PerlInterpreter* interp, XSINIT_t xsinit, int argc, char** argv, char** env);
#if defined(USE_ITHREADS)
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter* interp, UV flags);
#  if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *interp, UV flags, struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p);
#  endif
#endif

#if defined(MYMALLOC)
PERL_CALLCONV Malloc_t	Perl_malloc(MEM_SIZE nbytes);
PERL_CALLCONV Malloc_t	Perl_calloc(MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_realloc(Malloc_t where, MEM_SIZE nbytes);
PERL_CALLCONV Free_t	Perl_mfree(Malloc_t where);
PERL_CALLCONV MEM_SIZE	Perl_malloced_size(void *p);
d12 3
a14 2
PERL_CALLCONV void*	Perl_get_context(void);
PERL_CALLCONV void	Perl_set_context(void *thx);
a15 1
END_EXTERN_C
d17 44
a60 17
/* functions with flag 'n' should come before here */
#if defined(PERL_OBJECT)
class CPerlObj {
public:
	struct interpreter interp;
	CPerlObj(IPerlMem*, IPerlMem*, IPerlMem*, IPerlEnv*, IPerlStdIO*,
	    IPerlLIO*, IPerlDir*, IPerlSock*, IPerlProc*);
	void* operator new(size_t nSize, IPerlMem *pvtbl);
#ifndef __BORLANDC__
	static void operator delete(void* pPerl, IPerlMem *pvtbl);
#endif
	int do_aspawn (void *vreally, void **vmark, void **vsp);
#endif
#if defined(PERL_OBJECT)
public:
#else
START_EXTERN_C
a61 40
#  include "pp_proto.h"
PERL_CALLCONV SV*	Perl_amagic_call(pTHX_ SV* left, SV* right, int method, int dir);
PERL_CALLCONV bool	Perl_Gv_AMupdate(pTHX_ HV* stash);
PERL_CALLCONV OP*	Perl_append_elem(pTHX_ I32 optype, OP* head, OP* tail);
PERL_CALLCONV OP*	Perl_append_list(pTHX_ I32 optype, LISTOP* first, LISTOP* last);
PERL_CALLCONV I32	Perl_apply(pTHX_ I32 type, SV** mark, SV** sp);
PERL_CALLCONV SV*	Perl_avhv_delete_ent(pTHX_ AV *ar, SV* keysv, I32 flags, U32 hash);
PERL_CALLCONV bool	Perl_avhv_exists_ent(pTHX_ AV *ar, SV* keysv, U32 hash);
PERL_CALLCONV SV**	Perl_avhv_fetch_ent(pTHX_ AV *ar, SV* keysv, I32 lval, U32 hash);
PERL_CALLCONV SV**	Perl_avhv_store_ent(pTHX_ AV *ar, SV* keysv, SV* val, U32 hash);
PERL_CALLCONV HE*	Perl_avhv_iternext(pTHX_ AV *ar);
PERL_CALLCONV SV*	Perl_avhv_iterval(pTHX_ AV *ar, HE* entry);
PERL_CALLCONV HV*	Perl_avhv_keys(pTHX_ AV *ar);
PERL_CALLCONV void	Perl_av_clear(pTHX_ AV* ar);
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV* ar, I32 key, I32 flags);
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV* ar, I32 key);
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV* ar, I32 key);
PERL_CALLCONV AV*	Perl_av_fake(pTHX_ I32 size, SV** svp);
PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV* ar, I32 key, I32 lval);
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV* ar, I32 fill);
PERL_CALLCONV I32	Perl_av_len(pTHX_ AV* ar);
PERL_CALLCONV AV*	Perl_av_make(pTHX_ I32 size, SV** svp);
PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV* ar);
PERL_CALLCONV void	Perl_av_push(pTHX_ AV* ar, SV* val);
PERL_CALLCONV void	Perl_av_reify(pTHX_ AV* ar);
PERL_CALLCONV SV*	Perl_av_shift(pTHX_ AV* ar);
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV* ar, I32 key, SV* val);
PERL_CALLCONV void	Perl_av_undef(pTHX_ AV* ar);
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV* ar, I32 num);
PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP* left, OP* pat);
PERL_CALLCONV OP*	Perl_block_end(pTHX_ I32 floor, OP* seq);
PERL_CALLCONV I32	Perl_block_gimme(pTHX);
PERL_CALLCONV int	Perl_block_start(pTHX_ int full);
PERL_CALLCONV void	Perl_boot_core_UNIVERSAL(pTHX);
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV* av_list);
PERL_CALLCONV bool	Perl_cando(pTHX_ Mode_t mode, Uid_t effective, Stat_t* statbufp);
PERL_CALLCONV U32	Perl_cast_ulong(pTHX_ NV f);
PERL_CALLCONV I32	Perl_cast_i32(pTHX_ NV f);
PERL_CALLCONV IV	Perl_cast_iv(pTHX_ NV f);
PERL_CALLCONV UV	Perl_cast_uv(pTHX_ NV f);
d63 1
a63 1
PERL_CALLCONV I32	Perl_my_chsize(pTHX_ int fd, Off_t length);
d65 43
a107 2
#if defined(USE_THREADS)
PERL_CALLCONV MAGIC*	Perl_condpair_magic(pTHX_ SV *sv);
d109 5
a113 123
PERL_CALLCONV OP*	Perl_convert(pTHX_ I32 optype, I32 flags, OP* o);
PERL_CALLCONV void	Perl_croak(pTHX_ const char* pat, ...) __attribute__((noreturn))
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV void	Perl_vcroak(pTHX_ const char* pat, va_list* args) __attribute__((noreturn));
#if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV void	Perl_croak_nocontext(const char* pat, ...) __attribute__((noreturn))
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV OP*	Perl_die_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_deb_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV char*	Perl_form_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,3,4)))
#endif
;
PERL_CALLCONV SV*	Perl_mess_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_warn_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_warner_nocontext(U32 err, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV SV*	Perl_newSVpvf_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_sv_catpvf_nocontext(SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV void	Perl_sv_setpvf_nocontext(SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV void	Perl_sv_catpvf_mg_nocontext(SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV void	Perl_sv_setpvf_mg_nocontext(SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV int	Perl_fprintf_nocontext(PerlIO* stream, const char* fmt, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
#endif
PERL_CALLCONV void	Perl_cv_ckproto(pTHX_ CV* cv, GV* gv, char* p);
PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto);
PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ CV* cv);
PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ OP* o, CV* cv);
PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv);
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cs);
PERL_CALLCONV SV*	Perl_filter_add(pTHX_ filter_t funcp, SV* datasv);
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp);
PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV* buffer, int maxlen);
PERL_CALLCONV char**	Perl_get_op_descs(pTHX);
PERL_CALLCONV char**	Perl_get_op_names(pTHX);
PERL_CALLCONV char*	Perl_get_no_modify(pTHX);
PERL_CALLCONV U32*	Perl_get_opargs(pTHX);
PERL_CALLCONV PPADDR_t*	Perl_get_ppaddr(pTHX);
PERL_CALLCONV I32	Perl_cxinc(pTHX);
PERL_CALLCONV void	Perl_deb(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_debprofdump(pTHX);
PERL_CALLCONV I32	Perl_debop(pTHX_ OP* o);
PERL_CALLCONV I32	Perl_debstack(pTHX);
PERL_CALLCONV I32	Perl_debstackptrs(pTHX);
PERL_CALLCONV char*	Perl_delimcpy(pTHX_ char* to, char* toend, char* from, char* fromend, int delim, I32* retlen);
PERL_CALLCONV void	Perl_deprecate(pTHX_ char* s);
PERL_CALLCONV OP*	Perl_die(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV OP*	Perl_vdie(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV OP*	Perl_die_where(pTHX_ char* message, STRLEN msglen);
PERL_CALLCONV void	Perl_dounwind(pTHX_ I32 cxix);
PERL_CALLCONV bool	Perl_do_aexec(pTHX_ SV* really, SV** mark, SV** sp);
PERL_CALLCONV bool	Perl_do_aexec5(pTHX_ SV* really, SV** mark, SV** sp, int fd, int flag);
PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int flag);
PERL_CALLCONV void	Perl_do_chop(pTHX_ SV* asv, SV* sv);
PERL_CALLCONV bool	Perl_do_close(pTHX_ GV* gv, bool not_implicit);
PERL_CALLCONV bool	Perl_do_eof(pTHX_ GV* gv);
PERL_CALLCONV bool	Perl_do_exec(pTHX_ char* cmd);
#if !defined(WIN32)
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ char* cmd, int fd, int flag);
d115 7
a121 1
PERL_CALLCONV void	Perl_do_execfree(pTHX);
d123 165
a287 246
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp);
#endif
PERL_CALLCONV void	Perl_do_join(pTHX_ SV* sv, SV* del, SV** mark, SV** sp);
PERL_CALLCONV OP*	Perl_do_kv(pTHX);
PERL_CALLCONV bool	Perl_do_open(pTHX_ GV* gv, char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp);
PERL_CALLCONV bool	Perl_do_open9(pTHX_ GV *gv, char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num);
PERL_CALLCONV void	Perl_do_pipe(pTHX_ SV* sv, GV* rgv, GV* wgv);
PERL_CALLCONV bool	Perl_do_print(pTHX_ SV* sv, PerlIO* fp);
PERL_CALLCONV OP*	Perl_do_readline(pTHX);
PERL_CALLCONV I32	Perl_do_chomp(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_do_seek(pTHX_ GV* gv, Off_t pos, int whence);
PERL_CALLCONV void	Perl_do_sprintf(pTHX_ SV* sv, I32 len, SV** sarg);
PERL_CALLCONV Off_t	Perl_do_sysseek(pTHX_ GV* gv, Off_t pos, int whence);
PERL_CALLCONV Off_t	Perl_do_tell(pTHX_ GV* gv);
PERL_CALLCONV I32	Perl_do_trans(pTHX_ SV* sv);
PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, I32 offset, I32 size);
PERL_CALLCONV void	Perl_do_vecset(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_do_vop(pTHX_ I32 optype, SV* sv, SV* left, SV* right);
PERL_CALLCONV OP*	Perl_dofile(pTHX_ OP* term);
PERL_CALLCONV I32	Perl_dowantarray(pTHX);
PERL_CALLCONV void	Perl_dump_all(pTHX);
PERL_CALLCONV void	Perl_dump_eval(pTHX);
#if defined(DUMP_FDS)
PERL_CALLCONV void	Perl_dump_fds(pTHX_ char* s);
#endif
PERL_CALLCONV void	Perl_dump_form(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_op_dump(pTHX_ OP* arg);
PERL_CALLCONV void	Perl_pmop_dump(pTHX_ PMOP* pm);
PERL_CALLCONV void	Perl_dump_packsubs(pTHX_ HV* stash);
PERL_CALLCONV void	Perl_dump_sub(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_fbm_compile(pTHX_ SV* sv, U32 flags);
PERL_CALLCONV char*	Perl_fbm_instr(pTHX_ unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags);
PERL_CALLCONV char*	Perl_find_script(pTHX_ char *scriptname, bool dosearch, char **search_ext, I32 flags);
#if defined(USE_THREADS)
PERL_CALLCONV PADOFFSET	Perl_find_threadsv(pTHX_ const char *name);
#endif
PERL_CALLCONV OP*	Perl_force_list(pTHX_ OP* arg);
PERL_CALLCONV OP*	Perl_fold_constants(pTHX_ OP* arg);
PERL_CALLCONV char*	Perl_form(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_free_tmps(pTHX);
PERL_CALLCONV OP*	Perl_gen_constant_list(pTHX_ OP* o);
#if !defined(HAS_GETENV_LEN)
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ char* key, unsigned long *len);
#endif
PERL_CALLCONV void	Perl_gp_free(pTHX_ GV* gv);
PERL_CALLCONV GP*	Perl_gp_ref(pTHX_ GP* gp);
PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV* gv);
PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV* gv);
PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv);
PERL_CALLCONV GV*	Perl_gv_autoload4(pTHX_ HV* stash, const char* name, STRLEN len, I32 method);
PERL_CALLCONV void	Perl_gv_check(pTHX_ HV* stash);
PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, GV* gv);
PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, GV* gv, const char* prefix);
PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name);
PERL_CALLCONV GV*	Perl_gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level);
PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name);
PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload);
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char* name, I32 add, I32 sv_type);
PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, GV* gv);
PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, GV* gv, const char* prefix);
PERL_CALLCONV void	Perl_gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi);
PERL_CALLCONV HV*	Perl_gv_stashpv(pTHX_ const char* name, I32 create);
PERL_CALLCONV HV*	Perl_gv_stashpvn(pTHX_ const char* name, U32 namelen, I32 create);
PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 create);
PERL_CALLCONV void	Perl_hv_clear(pTHX_ HV* tb);
PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV* hv, HE* entry);
PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV* tb, const char* key, U32 klen, I32 flags);
PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV* tb, SV* key, I32 flags, U32 hash);
PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, U32 klen);
PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV* tb, SV* key, U32 hash);
PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV* tb, const char* key, U32 klen, I32 lval);
PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV* tb, SV* key, I32 lval, U32 hash);
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV* hv, HE* entry);
PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV* tb);
PERL_CALLCONV char*	Perl_hv_iterkey(pTHX_ HE* entry, I32* retlen);
PERL_CALLCONV SV*	Perl_hv_iterkeysv(pTHX_ HE* entry);
PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV* tb);
PERL_CALLCONV SV*	Perl_hv_iternextsv(pTHX_ HV* hv, char** key, I32* retlen);
PERL_CALLCONV SV*	Perl_hv_iterval(pTHX_ HV* tb, HE* entry);
PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV* hv, IV newmax);
PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV* hv, GV* gv, int how);
PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV* tb, const char* key, U32 klen, SV* val, U32 hash);
PERL_CALLCONV HE*	Perl_hv_store_ent(pTHX_ HV* tb, SV* key, SV* val, U32 hash);
PERL_CALLCONV void	Perl_hv_undef(pTHX_ HV* tb);
PERL_CALLCONV I32	Perl_ibcmp(pTHX_ const char* a, const char* b, I32 len);
PERL_CALLCONV I32	Perl_ibcmp_locale(pTHX_ const char* a, const char* b, I32 len);
PERL_CALLCONV bool	Perl_ingroup(pTHX_ Gid_t testgid, Uid_t effective);
PERL_CALLCONV void	Perl_init_debugger(pTHX);
PERL_CALLCONV void	Perl_init_stacks(pTHX);
PERL_CALLCONV U32	Perl_intro_my(pTHX);
PERL_CALLCONV char*	Perl_instr(pTHX_ const char* big, const char* little);
PERL_CALLCONV bool	Perl_io_close(pTHX_ IO* io, bool not_implicit);
PERL_CALLCONV OP*	Perl_invert(pTHX_ OP* cmd);
PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_ascii(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_cntrl(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_digit(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_upper(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_title(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_lower(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_xdigit_lc(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_upper_lc(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_title_lc(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_lower_lc(pTHX_ U32 c);
PERL_CALLCONV int	Perl_is_utf8_char(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_mark(pTHX_ U8 *p);
PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP* arg);
PERL_CALLCONV I32	Perl_keyword(pTHX_ char* d, I32 len);
PERL_CALLCONV void	Perl_leave_scope(pTHX_ I32 base);
PERL_CALLCONV void	Perl_lex_end(pTHX);
PERL_CALLCONV void	Perl_lex_start(pTHX_ SV* line);
PERL_CALLCONV OP*	Perl_linklist(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_list(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_listkids(pTHX_ OP* o);
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_3,pTHX_4)))
#endif
;
PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args);
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP* arg, I32 lexical);
PERL_CALLCONV I32	Perl_looks_like_number(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_magic_clearenv(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clearpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clearsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_existspack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_freeregexp(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_get(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getarylen(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getdefelem(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getnkeys(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getpos(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getsubstr(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_gettaint(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getuvar(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getvec(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV U32	Perl_magic_len(pTHX_ SV* sv, MAGIC* mg);
#if defined(USE_THREADS)
PERL_CALLCONV int	Perl_magic_mutexfree(pTHX_ SV* sv, MAGIC* mg);
#endif
PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV* sv, MAGIC* mg, SV* key);
PERL_CALLCONV U32	Perl_magic_regdata_cnt(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_regdatum_get(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_set(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setamagic(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setarylen(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setbm(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setdbline(pTHX_ SV* sv, MAGIC* mg);
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg);
#endif
PERL_CALLCONV int	Perl_magic_setdefelem(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setenv(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setfm(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setisa(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setmglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setnkeys(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setpos(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setsubstr(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_settaint(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setuvar(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setvec(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV U32	Perl_magic_sizepack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_wipepack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV void	Perl_magicname(pTHX_ char* sym, char* name, I32 namlen);
PERL_CALLCONV void	Perl_markstack_grow(pTHX);
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen);
#endif
PERL_CALLCONV SV*	Perl_mess(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err);
PERL_CALLCONV int	Perl_mg_clear(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV* sv, SV* nsv, const char* key, I32 klen);
PERL_CALLCONV MAGIC*	Perl_mg_find(pTHX_ SV* sv, int type);
PERL_CALLCONV int	Perl_mg_free(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_get(pTHX_ SV* sv);
PERL_CALLCONV U32	Perl_mg_length(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_mg_magical(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_set(pTHX_ SV* sv);
PERL_CALLCONV I32	Perl_mg_size(pTHX_ SV* sv);
PERL_CALLCONV OP*	Perl_mod(pTHX_ OP* o, I32 type);
PERL_CALLCONV int	Perl_mode_from_discipline(pTHX_ SV* discp);
PERL_CALLCONV char*	Perl_moreswitches(pTHX_ char* s);
PERL_CALLCONV OP*	Perl_my(pTHX_ OP* o);
PERL_CALLCONV NV	Perl_my_atof(pTHX_ const char *s);
d289 1
a289 1
PERL_CALLCONV char*	Perl_my_bcopy(const char* from, char* to, I32 len);
d292 1
a292 1
PERL_CALLCONV char*	Perl_my_bzero(char* loc, I32 len);
d294 3
a296 4
PERL_CALLCONV void	Perl_my_exit(pTHX_ U32 status) __attribute__((noreturn));
PERL_CALLCONV void	Perl_my_failure_exit(pTHX) __attribute__((noreturn));
PERL_CALLCONV I32	Perl_my_fflush_all(pTHX);
PERL_CALLCONV I32	Perl_my_lstat(pTHX);
d298 1
a298 1
PERL_CALLCONV I32	Perl_my_memcmp(const char* s1, const char* s2, I32 len);
d301 1
a301 1
PERL_CALLCONV void*	Perl_my_memset(char* loc, I32 ch, I32 len);
d303 85
a387 342
#if !defined(PERL_OBJECT)
PERL_CALLCONV I32	Perl_my_pclose(pTHX_ PerlIO* ptr);
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ char* cmd, char* mode);
#endif
PERL_CALLCONV void	Perl_my_setenv(pTHX_ char* nam, char* val);
PERL_CALLCONV I32	Perl_my_stat(pTHX);
#if defined(MYSWAP)
PERL_CALLCONV short	Perl_my_swap(pTHX_ short s);
PERL_CALLCONV long	Perl_my_htonl(pTHX_ long l);
PERL_CALLCONV long	Perl_my_ntohl(pTHX_ long l);
#endif
PERL_CALLCONV void	Perl_my_unexec(pTHX);
PERL_CALLCONV OP*	Perl_newANONLIST(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newANONHASH(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newANONSUB(pTHX_ I32 floor, OP* proto, OP* block);
PERL_CALLCONV OP*	Perl_newASSIGNOP(pTHX_ I32 flags, OP* left, I32 optype, OP* right);
PERL_CALLCONV OP*	Perl_newCONDOP(pTHX_ I32 flags, OP* expr, OP* trueop, OP* falseop);
PERL_CALLCONV void	Perl_newCONSTSUB(pTHX_ HV* stash, char* name, SV* sv);
PERL_CALLCONV void	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
PERL_CALLCONV OP*	Perl_newFOROP(pTHX_ I32 flags, char* label, line_t forline, OP* sclr, OP* expr, OP*block, OP*cont);
PERL_CALLCONV OP*	Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP* left, OP* right);
PERL_CALLCONV OP*	Perl_newLOOPEX(pTHX_ I32 type, OP* label);
PERL_CALLCONV OP*	Perl_newLOOPOP(pTHX_ I32 flags, I32 debuggable, OP* expr, OP* block);
PERL_CALLCONV OP*	Perl_newNULLLIST(pTHX);
PERL_CALLCONV OP*	Perl_newOP(pTHX_ I32 optype, I32 flags);
PERL_CALLCONV void	Perl_newPROG(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newRANGE(pTHX_ I32 flags, OP* left, OP* right);
PERL_CALLCONV OP*	Perl_newSLICEOP(pTHX_ I32 flags, OP* subscript, OP* listop);
PERL_CALLCONV OP*	Perl_newSTATEOP(pTHX_ I32 flags, char* label, OP* o);
PERL_CALLCONV CV*	Perl_newSUB(pTHX_ I32 floor, OP* o, OP* proto, OP* block);
PERL_CALLCONV CV*	Perl_newXS(pTHX_ char* name, XSUBADDR_t f, char* filename);
PERL_CALLCONV AV*	Perl_newAV(pTHX);
PERL_CALLCONV OP*	Perl_newAVREF(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newBINOP(pTHX_ I32 type, I32 flags, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_newCVREF(pTHX_ I32 flags, OP* o);
PERL_CALLCONV OP*	Perl_newGVOP(pTHX_ I32 type, I32 flags, GV* gv);
PERL_CALLCONV GV*	Perl_newGVgen(pTHX_ char* pack);
PERL_CALLCONV OP*	Perl_newGVREF(pTHX_ I32 type, OP* o);
PERL_CALLCONV OP*	Perl_newHVREF(pTHX_ OP* o);
PERL_CALLCONV HV*	Perl_newHV(pTHX);
PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV* hv);
PERL_CALLCONV IO*	Perl_newIO(pTHX);
PERL_CALLCONV OP*	Perl_newLISTOP(pTHX_ I32 type, I32 flags, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_newPADOP(pTHX_ I32 type, I32 flags, SV* sv);
PERL_CALLCONV OP*	Perl_newPMOP(pTHX_ I32 type, I32 flags);
PERL_CALLCONV OP*	Perl_newPVOP(pTHX_ I32 type, I32 flags, char* pv);
PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV* pref);
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *sv);
PERL_CALLCONV SV*	Perl_newSV(pTHX_ STRLEN len);
PERL_CALLCONV OP*	Perl_newSVREF(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newSVOP(pTHX_ I32 type, I32 flags, SV* sv);
PERL_CALLCONV SV*	Perl_newSViv(pTHX_ IV i);
PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ UV u);
PERL_CALLCONV SV*	Perl_newSVnv(pTHX_ NV n);
PERL_CALLCONV SV*	Perl_newSVpv(pTHX_ const char* s, STRLEN len);
PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char* s, STRLEN len);
PERL_CALLCONV SV*	Perl_newSVpvf(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV* rv, const char* classname);
PERL_CALLCONV SV*	Perl_newSVsv(pTHX_ SV* old);
PERL_CALLCONV OP*	Perl_newUNOP(pTHX_ I32 type, I32 flags, OP* first);
PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, I32 whileline, OP* expr, OP* block, OP* cont);

PERL_CALLCONV PERL_SI*	Perl_new_stackinfo(pTHX_ I32 stitems, I32 cxitems);
PERL_CALLCONV PerlIO*	Perl_nextargv(pTHX_ GV* gv);
PERL_CALLCONV char*	Perl_ninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend);
PERL_CALLCONV OP*	Perl_oopsCV(pTHX_ OP* o);
PERL_CALLCONV void	Perl_op_free(pTHX_ OP* arg);
PERL_CALLCONV void	Perl_package(pTHX_ OP* o);
PERL_CALLCONV PADOFFSET	Perl_pad_alloc(pTHX_ I32 optype, U32 tmptype);
PERL_CALLCONV PADOFFSET	Perl_pad_allocmy(pTHX_ char* name);
PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ char* name);
PERL_CALLCONV OP*	Perl_oopsAV(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_oopsHV(pTHX_ OP* o);
PERL_CALLCONV void	Perl_pad_leavemy(pTHX_ I32 fill);
PERL_CALLCONV SV*	Perl_pad_sv(pTHX_ PADOFFSET po);
PERL_CALLCONV void	Perl_pad_free(pTHX_ PADOFFSET po);
PERL_CALLCONV void	Perl_pad_reset(pTHX);
PERL_CALLCONV void	Perl_pad_swipe(pTHX_ PADOFFSET po);
PERL_CALLCONV void	Perl_peep(pTHX_ OP* o);
#if defined(PERL_OBJECT)
PERL_CALLCONV void	Perl_construct(pTHX);
PERL_CALLCONV void	Perl_destruct(pTHX);
PERL_CALLCONV void	Perl_free(pTHX);
PERL_CALLCONV int	Perl_run(pTHX);
PERL_CALLCONV int	Perl_parse(pTHX_ XSINIT_t xsinit, int argc, char** argv, char** env);
#endif
#if defined(USE_THREADS)
PERL_CALLCONV struct perl_thread*	Perl_new_struct_thread(pTHX_ struct perl_thread *t);
#endif
PERL_CALLCONV void	Perl_call_atexit(pTHX_ ATEXIT_t fn, void *ptr);
PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv);
PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags);
PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags);
PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, I32 flags);
PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error);
PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags);
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char* name, I32 create);
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char* name, I32 create);
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char* name, I32 create);
PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 create);
PERL_CALLCONV int	Perl_init_i18nl10n(pTHX_ int printwarn);
PERL_CALLCONV int	Perl_init_i18nl14n(pTHX_ int printwarn);
PERL_CALLCONV void	Perl_new_collate(pTHX_ const char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ const char* newctype);
PERL_CALLCONV void	Perl_new_numeric(pTHX_ const char* newcoll);
PERL_CALLCONV void	Perl_set_numeric_local(pTHX);
PERL_CALLCONV void	Perl_set_numeric_radix(pTHX);
PERL_CALLCONV void	Perl_set_numeric_standard(pTHX);
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv);
PERL_CALLCONV void	Perl_pidgone(pTHX_ Pid_t pid, int status);
PERL_CALLCONV void	Perl_pmflag(pTHX_ U16* pmfl, int ch);
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP* pm, OP* expr, OP* repl);
PERL_CALLCONV OP*	Perl_pmtrans(pTHX_ OP* o, OP* expr, OP* repl);
PERL_CALLCONV OP*	Perl_pop_return(pTHX);
PERL_CALLCONV void	Perl_pop_scope(pTHX);
PERL_CALLCONV OP*	Perl_prepend_elem(pTHX_ I32 optype, OP* head, OP* tail);
PERL_CALLCONV void	Perl_push_return(pTHX_ OP* o);
PERL_CALLCONV void	Perl_push_scope(pTHX);
PERL_CALLCONV OP*	Perl_ref(pTHX_ OP* o, I32 type);
PERL_CALLCONV OP*	Perl_refkids(pTHX_ OP* o, I32 type);
PERL_CALLCONV void	Perl_regdump(pTHX_ regexp* r);
PERL_CALLCONV I32	Perl_pregexec(pTHX_ regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, U32 nosave);
PERL_CALLCONV void	Perl_pregfree(pTHX_ struct regexp* r);
PERL_CALLCONV regexp*	Perl_pregcomp(pTHX_ char* exp, char* xend, PMOP* pm);
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ regexp* prog, SV* sv, char* strpos, char* strend, U32 flags, struct re_scream_pos_data_s *data);
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ regexp* prog);
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, void* data, U32 flags);
PERL_CALLCONV regnode*	Perl_regnext(pTHX_ regnode* p);
PERL_CALLCONV void	Perl_regprop(pTHX_ SV* sv, regnode* o);
PERL_CALLCONV void	Perl_repeatcpy(pTHX_ char* to, const char* from, I32 len, I32 count);
PERL_CALLCONV char*	Perl_rninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend);
PERL_CALLCONV Sighandler_t	Perl_rsignal(pTHX_ int i, Sighandler_t t);
PERL_CALLCONV int	Perl_rsignal_restore(pTHX_ int i, Sigsave_t* t);
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* t2);
PERL_CALLCONV Sighandler_t	Perl_rsignal_state(pTHX_ int i);
PERL_CALLCONV void	Perl_rxres_free(pTHX_ void** rsp);
PERL_CALLCONV void	Perl_rxres_restore(pTHX_ void** rsp, REGEXP* prx);
PERL_CALLCONV void	Perl_rxres_save(pTHX_ void** rsp, REGEXP* prx);
#if !defined(HAS_RENAME)
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ char* a, char* b);
#endif
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* sv);
PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* sv, I32 len);
PERL_CALLCONV void	Perl_savestack_grow(pTHX);
PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, I32 idx, SV **sptr);
PERL_CALLCONV I32	Perl_save_alloc(pTHX_ I32 size, I32 pad);
PERL_CALLCONV void	Perl_save_aptr(pTHX_ AV** aptr);
PERL_CALLCONV AV*	Perl_save_ary(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_clearsv(pTHX_ SV** svp);
PERL_CALLCONV void	Perl_save_delete(pTHX_ HV* hv, char* key, I32 klen);
PERL_CALLCONV void	Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void* p);
PERL_CALLCONV void	Perl_save_destructor_x(pTHX_ DESTRUCTORFUNC_t f, void* p);
PERL_CALLCONV void	Perl_save_freesv(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_save_freeop(pTHX_ OP* o);
PERL_CALLCONV void	Perl_save_freepv(pTHX_ char* pv);
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr);
PERL_CALLCONV void	Perl_save_gp(pTHX_ GV* gv, I32 empty);
PERL_CALLCONV HV*	Perl_save_hash(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_helem(pTHX_ HV* hv, SV *key, SV **sptr);
PERL_CALLCONV void	Perl_save_hints(pTHX);
PERL_CALLCONV void	Perl_save_hptr(pTHX_ HV** hptr);
PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp);
PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp);
PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep);
PERL_CALLCONV void	Perl_save_int(pTHX_ int* intp);
PERL_CALLCONV void	Perl_save_item(pTHX_ SV* item);
PERL_CALLCONV void	Perl_save_iv(pTHX_ IV* iv);
PERL_CALLCONV void	Perl_save_list(pTHX_ SV** sarg, I32 maxsarg);
PERL_CALLCONV void	Perl_save_long(pTHX_ long* longp);
PERL_CALLCONV void	Perl_save_nogv(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_op(pTHX);
PERL_CALLCONV SV*	Perl_save_scalar(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr);
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void* pptr);
PERL_CALLCONV void	Perl_save_re_context(pTHX);
PERL_CALLCONV void	Perl_save_sptr(pTHX_ SV** sptr);
PERL_CALLCONV SV*	Perl_save_svref(pTHX_ SV** sptr);
PERL_CALLCONV SV**	Perl_save_threadsv(pTHX_ PADOFFSET i);
PERL_CALLCONV OP*	Perl_sawparens(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalar(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalarkids(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalarseq(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalarvoid(pTHX_ OP* o);
PERL_CALLCONV NV	Perl_scan_bin(pTHX_ char* start, I32 len, I32* retlen);
PERL_CALLCONV NV	Perl_scan_hex(pTHX_ char* start, I32 len, I32* retlen);
PERL_CALLCONV char*	Perl_scan_num(pTHX_ char* s);
PERL_CALLCONV NV	Perl_scan_oct(pTHX_ char* start, I32 len, I32* retlen);
PERL_CALLCONV OP*	Perl_scope(pTHX_ OP* o);
PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV* bigsv, SV* littlesv, I32 start_shift, I32 end_shift, I32 *state, I32 last);
#if !defined(VMS)
PERL_CALLCONV I32	Perl_setenv_getix(pTHX_ char* nam);
#endif
PERL_CALLCONV void	Perl_setdefout(pTHX_ GV* gv);
PERL_CALLCONV char*	Perl_sharepvn(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV Signal_t	Perl_sighandler(int sig);
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV**p, int n);
PERL_CALLCONV I32	Perl_start_subparse(pTHX_ I32 is_format, U32 flags);
PERL_CALLCONV void	Perl_sub_crush_depth(pTHX_ CV* cv);
PERL_CALLCONV bool	Perl_sv_2bool(pTHX_ SV* sv);
PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV** st, GV** gvp, I32 lref);
PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV* sv);
PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV* sv);
PERL_CALLCONV SV*	Perl_sv_2mortal(pTHX_ SV* sv);
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV* sv);
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv);
PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv);
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *len);
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *len);
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *len);
PERL_CALLCONV I32	Perl_sv_true(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_add_arena(pTHX_ char* ptr, U32 size, U32 flags);
PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV* sv);
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV* sv, HV* stash);
PERL_CALLCONV void	Perl_sv_catpvf(pTHX_ SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV* sv, const char* ptr);
PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV* sv, const char* ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV* dsv, SV* ssv);
PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV* sv, char* ptr);
PERL_CALLCONV void	Perl_sv_clean_all(pTHX);
PERL_CALLCONV void	Perl_sv_clean_objs(pTHX);
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV* sv);
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV* sv1, SV* sv2);
PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV* sv1, SV* sv2);
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV char*	Perl_sv_collxfrm(pTHX_ SV* sv, STRLEN* nxp);
#endif
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV* sv, OP** startp, char* code, AV** avp);
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_sv_derived_from(pTHX_ SV* sv, const char* name);
PERL_CALLCONV I32	Perl_sv_eq(pTHX_ SV* sv1, SV* sv2);
PERL_CALLCONV void	Perl_sv_free(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_free_arenas(pTHX);
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV* sv, PerlIO* fp, I32 append);
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV* sv, STRLEN newlen);
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV* bigsv, STRLEN offset, STRLEN len, char* little, STRLEN littlelen);
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char* name);
PERL_CALLCONV int	Perl_sv_isobject(pTHX_ SV* sv);
PERL_CALLCONV STRLEN	Perl_sv_len(pTHX_ SV* sv);
PERL_CALLCONV STRLEN	Perl_sv_len_utf8(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV* sv, SV* obj, int how, const char* name, I32 namlen);
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV* oldsv);
PERL_CALLCONV SV*	Perl_sv_newmortal(pTHX);
PERL_CALLCONV SV*	Perl_sv_newref(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_peek(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV* sv, I32* offsetp, I32* lenp);
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV* sv, I32* offsetp);
PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_reftype(pTHX_ SV* sv, int ob);
PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV* sv, SV* nsv);
PERL_CALLCONV void	Perl_sv_report_used(pTHX);
PERL_CALLCONV void	Perl_sv_reset(pTHX_ char* s, HV* stash);
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV* sv, IV num);
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV* sv, IV num);
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV* sv, UV num);
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV* sv, NV num);
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV* rv, const char* classname, IV iv);
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV* rv, const char* classname, NV nv);
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV* rv, const char* classname, void* pv);
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV* rv, const char* classname, char* pv, STRLEN n);
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV* sv, const char* ptr);
PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV* sv, const char* ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV* dsv, SV* ssv);
PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV* sv, int type);
PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_sv_upgrade(pTHX_ SV* sv, U32 mt);
PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted);
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted);
PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv);
PERL_CALLCONV SV*	Perl_swash_init(pTHX_ char* pkg, char* name, SV* listsv, I32 minbits, I32 none);
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *sv, U8 *ptr);
PERL_CALLCONV void	Perl_taint_env(pTHX);
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char* s);
PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ U8 *p);
PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ U8 *p);
PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ U8 *p);
#if defined(UNLINK_ALL_VERSIONS)
PERL_CALLCONV I32	Perl_unlnk(pTHX_ char* f);
#endif
#if defined(USE_THREADS)
PERL_CALLCONV void	Perl_unlock_condpair(pTHX_ void* svv);
#endif
PERL_CALLCONV void	Perl_unsharepvn(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV void	Perl_unshare_hek(pTHX_ HEK* hek);
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* id, OP* arg);
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U16* p, U8 *d, I32 bytelen);
PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U16* p, U8 *d, I32 bytelen);
PERL_CALLCONV I32	Perl_utf8_distance(pTHX_ U8 *a, U8 *b);
PERL_CALLCONV U8*	Perl_utf8_hop(pTHX_ U8 *s, I32 off);
PERL_CALLCONV UV	Perl_utf8_to_uv(pTHX_ U8 *s, I32* retlen);
PERL_CALLCONV U8*	Perl_uv_to_utf8(pTHX_ U8 *d, UV uv);
PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_vivify_ref(pTHX_ SV* sv, U32 to_what);
PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags);
PERL_CALLCONV void	Perl_report_closed_fh(pTHX_ GV *gv, IO *io, const char *func, const char *obj);
PERL_CALLCONV void	Perl_report_uninit(pTHX);
PERL_CALLCONV void	Perl_warn(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV void	Perl_vwarn(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_warner(pTHX_ U32 err, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_watch(pTHX_ char** addr);
PERL_CALLCONV I32	Perl_whichsig(pTHX_ char* sig);
PERL_CALLCONV int	Perl_yyerror(pTHX_ char* s);
#if defined(USE_PURE_BISON)
PERL_CALLCONV int	Perl_yylex(pTHX_ YYSTYPE *lvalp, int *lcharp);
d389 1
a389 1
PERL_CALLCONV int	Perl_yylex(pTHX);
d391 247
a637 103
PERL_CALLCONV int	Perl_yyparse(pTHX);
PERL_CALLCONV int	Perl_yywarn(pTHX_ char* s);
#if defined(MYMALLOC)
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ char* s);
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level);
#endif
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes);
PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes);
PERL_CALLCONV Free_t	Perl_safesysfree(Malloc_t where);
#if defined(LEAKTEST)
PERL_CALLCONV Malloc_t	Perl_safexmalloc(I32 x, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safexcalloc(I32 x, MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safexrealloc(Malloc_t where, MEM_SIZE size);
PERL_CALLCONV void	Perl_safexfree(Malloc_t where);
#endif
#if defined(PERL_GLOBAL_STRUCT)
PERL_CALLCONV struct perl_vars *	Perl_GetVars(pTHX);
#endif
PERL_CALLCONV int	Perl_runops_standard(pTHX);
PERL_CALLCONV int	Perl_runops_debug(pTHX);
PERL_CALLCONV void	Perl_sv_catpvf_mg(pTHX_ SV *sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *sv, const char *ptr);
PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dstr, SV *sstr);
PERL_CALLCONV void	Perl_sv_setpvf_mg(pTHX_ SV *sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *sv, IV i);
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *sv, IV iv);
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *sv, UV u);
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *sv, NV num);
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *sv, const char *ptr);
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *dstr, SV *sstr);
PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len);
PERL_CALLCONV MGVTBL*	Perl_get_vtbl(pTHX_ int vtbl_id);
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *sv, char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
PERL_CALLCONV void	Perl_dump_indent(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_3,pTHX_4)))
#endif
;
PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args);
PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, char *name, GV *sv);
PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, char *name, GV *sv);
PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, char *name, HV *sv);
PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, OP *o);
PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, PMOP *pm);
PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
PERL_CALLCONV void	Perl_magic_dump(pTHX_ MAGIC *mg);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
PERL_CALLCONV void*	Perl_default_protect(pTHX_ volatile JMPENV *je, int *excpt, protect_body_t body, ...);
PERL_CALLCONV void*	Perl_vdefault_protect(pTHX_ volatile JMPENV *je, int *excpt, protect_body_t body, va_list *args);
#endif
PERL_CALLCONV void	Perl_reginitcolors(pTHX);
PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_pv(pTHX_ SV *sv);
PERL_CALLCONV char*	Perl_sv_pvutf8(pTHX_ SV *sv);
PERL_CALLCONV char*	Perl_sv_pvbyte(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_utf8_upgrade(pTHX_ SV *sv);
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *sv, bool fail_ok);
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *sv);
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_tmps_grow(pTHX_ I32 n);
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *sv);
PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg);
PERL_CALLCONV OP*	Perl_newANONATTRSUB(pTHX_ I32 floor, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV CV*	Perl_newATTRSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV void	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs);
PERL_CALLCONV void	Perl_boot_core_xsutils(pTHX);
#if defined(USE_ITHREADS)
PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max);
PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si);
PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl);
PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, PerlInterpreter* proto_perl);
PERL_CALLCONV HE*	Perl_he_dup(pTHX_ HE* e, bool shared);
PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ REGEXP* r);
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type);
PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR* dp);
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp);
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg);
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ SV* sstr);
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst);
#endif
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX);
PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *tbl, void *sv);
PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *tbl, void *oldsv, void *newsv);
PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *tbl);
d640 5
a644 1
#if defined(PERL_OBJECT)
d646 238
d885 2
a886 2
END_EXTERN_C
#endif
d888 21
a908 308
#if defined(PERL_IN_AV_C) || defined(PERL_DECL_PROT)
STATIC I32	S_avhv_index_sv(pTHX_ SV* sv);
STATIC I32	S_avhv_index(pTHX_ AV* av, SV* sv, U32 hash);
#endif

#if defined(PERL_IN_DOOP_C) || defined(PERL_DECL_PROT)
STATIC I32	S_do_trans_CC_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_CC_count(pTHX_ SV *sv);
STATIC I32	S_do_trans_CC_complex(pTHX_ SV *sv);
STATIC I32	S_do_trans_UU_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_UU_count(pTHX_ SV *sv);
STATIC I32	S_do_trans_UU_complex(pTHX_ SV *sv);
STATIC I32	S_do_trans_UC_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_CU_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_UC_trivial(pTHX_ SV *sv);
STATIC I32	S_do_trans_CU_trivial(pTHX_ SV *sv);
#endif

#if defined(PERL_IN_GV_C) || defined(PERL_DECL_PROT)
STATIC void	S_gv_init_sv(pTHX_ GV *gv, I32 sv_type);
#endif

#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC void	S_hsplit(pTHX_ HV *hv);
STATIC void	S_hfreeentries(pTHX_ HV *hv);
STATIC void	S_more_he(pTHX);
STATIC HE*	S_new_he(pTHX);
STATIC void	S_del_he(pTHX_ HE *p);
STATIC HEK*	S_save_hek(pTHX_ const char *str, I32 len, U32 hash);
STATIC void	S_hv_magic_check(pTHX_ HV *hv, bool *needs_copy, bool *needs_store);
#endif

#if defined(PERL_IN_MG_C) || defined(PERL_DECL_PROT)
STATIC void	S_save_magic(pTHX_ I32 mgs_ix, SV *sv);
STATIC int	S_magic_methpack(pTHX_ SV *sv, MAGIC *mg, char *meth);
STATIC int	S_magic_methcall(pTHX_ SV *sv, MAGIC *mg, char *meth, I32 f, int n, SV *val);
#endif

#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC I32	S_list_assignment(pTHX_ OP *o);
STATIC void	S_bad_type(pTHX_ I32 n, char *t, char *name, OP *kid);
STATIC void	S_cop_free(pTHX_ COP *cop);
STATIC OP*	S_modkids(pTHX_ OP *o, I32 type);
STATIC void	S_no_bareword_allowed(pTHX_ OP *o);
STATIC OP*	S_no_fh_allowed(pTHX_ OP *o);
STATIC OP*	S_scalarboolean(pTHX_ OP *o);
STATIC OP*	S_too_few_arguments(pTHX_ OP *o, char* name);
STATIC OP*	S_too_many_arguments(pTHX_ OP *o, char* name);
STATIC void	S_op_clear(pTHX_ OP* o);
STATIC void	S_null(pTHX_ OP* o);
STATIC PADOFFSET	S_pad_addlex(pTHX_ SV* name);
STATIC PADOFFSET	S_pad_findlex(pTHX_ char* name, PADOFFSET newoff, U32 seq, CV* startcv, I32 cx_ix, I32 saweval, U32 flags);
STATIC OP*	S_newDEFSVOP(pTHX);
STATIC OP*	S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp);
STATIC void	S_simplify_sort(pTHX_ OP *o);
STATIC bool	S_is_handle_constructor(pTHX_ OP *o, I32 argnum);
STATIC char*	S_gv_ename(pTHX_ GV *gv);
STATIC void	S_cv_dump(pTHX_ CV *cv);
STATIC CV*	S_cv_clone2(pTHX_ CV *proto, CV *outside);
STATIC bool	S_scalar_mod_type(pTHX_ OP *o, I32 type);
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs);
STATIC OP *	S_dup_attrlist(pTHX_ OP *o);
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs);
#  if defined(PL_OP_SLAB_ALLOC)
STATIC void*	S_Slab_Alloc(pTHX_ int m, size_t sz);
#  endif
#endif

#if defined(PERL_IN_PERL_C) || defined(PERL_DECL_PROT)
STATIC void	S_find_beginning(pTHX);
STATIC void	S_forbid_setid(pTHX_ char *);
STATIC void	S_incpush(pTHX_ char *, int, int);
STATIC void	S_init_interp(pTHX);
STATIC void	S_init_ids(pTHX);
STATIC void	S_init_lexer(pTHX);
STATIC void	S_init_main_stash(pTHX);
STATIC void	S_init_perllib(pTHX);
STATIC void	S_init_postdump_symbols(pTHX_ int, char **, char **);
STATIC void	S_init_predump_symbols(pTHX);
STATIC void	S_my_exit_jump(pTHX) __attribute__((noreturn));
STATIC void	S_nuke_stacks(pTHX);
STATIC void	S_open_script(pTHX_ char *, bool, SV *, int *fd);
STATIC void	S_usage(pTHX_ char *);
STATIC void	S_validate_suid(pTHX_ char *, char*, int);
#  if defined(IAMSUID)
STATIC int	S_fd_on_nosuid_fs(pTHX_ int fd);
#  endif
STATIC void*	S_parse_body(pTHX_ char **env, XSINIT_t xsinit);
STATIC void*	S_run_body(pTHX_ I32 oldscope);
STATIC void	S_call_body(pTHX_ OP *myop, int is_eval);
STATIC void*	S_call_list_body(pTHX_ CV *cv);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
STATIC void*	S_vparse_body(pTHX_ va_list args);
STATIC void*	S_vrun_body(pTHX_ va_list args);
STATIC void*	S_vcall_body(pTHX_ va_list args);
STATIC void*	S_vcall_list_body(pTHX_ va_list args);
#endif
#  if defined(USE_THREADS)
STATIC struct perl_thread *	S_init_main_thread(pTHX);
#  endif
#endif

#if defined(PERL_IN_PP_C) || defined(PERL_DECL_PROT)
STATIC void	S_doencodes(pTHX_ SV* sv, char* s, I32 len);
STATIC SV*	S_refto(pTHX_ SV* sv);
STATIC U32	S_seed(pTHX);
STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m);
STATIC SV*	S_is_an_int(pTHX_ char *s, STRLEN l);
STATIC int	S_div128(pTHX_ SV *pnum, bool *done);
#endif

#if defined(PERL_IN_PP_CTL_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_docatch(pTHX_ OP *o);
STATIC void*	S_docatch_body(pTHX);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
STATIC void*	S_vdocatch_body(pTHX_ va_list args);
#endif
STATIC OP*	S_dofindlabel(pTHX_ OP *o, char *label, OP **opstack, OP **oplimit);
STATIC void	S_doparseform(pTHX_ SV *sv);
STATIC I32	S_dopoptoeval(pTHX_ I32 startingblock);
STATIC I32	S_dopoptolabel(pTHX_ char *label);
STATIC I32	S_dopoptoloop(pTHX_ I32 startingblock);
STATIC I32	S_dopoptosub(pTHX_ I32 startingblock);
STATIC I32	S_dopoptosub_at(pTHX_ PERL_CONTEXT* cxstk, I32 startingblock);
STATIC void	S_free_closures(pTHX);
STATIC void	S_save_lines(pTHX_ AV *array, SV *sv);
STATIC OP*	S_doeval(pTHX_ int gimme, OP** startop);
STATIC PerlIO *	S_doopen_pmc(pTHX_ const char *name, const char *mode);
STATIC void	S_qsortsv(pTHX_ SV ** array, size_t num_elts, SVCOMPARE_t f);
#endif

#if defined(PERL_IN_PP_HOT_C) || defined(PERL_DECL_PROT)
STATIC int	S_do_maybe_phash(pTHX_ AV *ary, SV **lelem, SV **firstlelem, SV **relem, SV **lastrelem);
STATIC void	S_do_oddball(pTHX_ HV *hash, SV **relem, SV **firstrelem);
STATIC CV*	S_get_db_sub(pTHX_ SV **svp, CV *cv);
STATIC SV*	S_method_common(pTHX_ SV* meth, U32* hashp);
#endif

#if defined(PERL_IN_PP_SYS_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop);
STATIC int	S_emulate_eaccess(pTHX_ const char* path, Mode_t mode);
#  if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
STATIC int	S_dooneliner(pTHX_ char *cmd, char *filename);
#  endif
#endif

#if defined(PERL_IN_REGCOMP_C) || defined(PERL_DECL_PROT)
STATIC regnode*	S_reg(pTHX_ I32, I32 *);
STATIC regnode*	S_reganode(pTHX_ U8, U32);
STATIC regnode*	S_regatom(pTHX_ I32 *);
STATIC regnode*	S_regbranch(pTHX_ I32 *, I32);
STATIC void	S_reguni(pTHX_ UV, char *, I32*);
STATIC regnode*	S_regclass(pTHX);
STATIC regnode*	S_regclassutf8(pTHX);
STATIC I32	S_regcurly(pTHX_ char *);
STATIC regnode*	S_reg_node(pTHX_ U8);
STATIC regnode*	S_regpiece(pTHX_ I32 *);
STATIC void	S_reginsert(pTHX_ U8, regnode *);
STATIC void	S_regoptail(pTHX_ regnode *, regnode *);
STATIC void	S_regtail(pTHX_ regnode *, regnode *);
STATIC char*	S_regwhite(pTHX_ char *, char *);
STATIC char*	S_nextchar(pTHX);
STATIC regnode*	S_dumpuntil(pTHX_ regnode *start, regnode *node, regnode *last, SV* sv, I32 l);
STATIC void	S_put_byte(pTHX_ SV* sv, int c);
STATIC void	S_scan_commit(pTHX_ struct scan_data_t *data);
STATIC void	S_cl_anything(pTHX_ struct regnode_charclass_class *cl);
STATIC int	S_cl_is_anything(pTHX_ struct regnode_charclass_class *cl);
STATIC void	S_cl_init(pTHX_ struct regnode_charclass_class *cl);
STATIC void	S_cl_init_zero(pTHX_ struct regnode_charclass_class *cl);
STATIC void	S_cl_and(pTHX_ struct regnode_charclass_class *cl, struct regnode_charclass_class *and_with);
STATIC void	S_cl_or(pTHX_ struct regnode_charclass_class *cl, struct regnode_charclass_class *or_with);
STATIC I32	S_study_chunk(pTHX_ regnode **scanp, I32 *deltap, regnode *last, struct scan_data_t *data, U32 flags);
STATIC I32	S_add_data(pTHX_ I32 n, char *s);
STATIC void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...) __attribute__((noreturn));
STATIC I32	S_regpposixcc(pTHX_ I32 value);
STATIC void	S_checkposixcc(pTHX);
#endif

#if defined(PERL_IN_REGEXEC_C) || defined(PERL_DECL_PROT)
STATIC I32	S_regmatch(pTHX_ regnode *prog);
STATIC I32	S_regrepeat(pTHX_ regnode *p, I32 max);
STATIC I32	S_regrepeat_hard(pTHX_ regnode *p, I32 max, I32 *lp);
STATIC I32	S_regtry(pTHX_ regexp *prog, char *startpos);
STATIC bool	S_reginclass(pTHX_ regnode *p, I32 c);
STATIC bool	S_reginclassutf8(pTHX_ regnode *f, U8* p);
STATIC CHECKPOINT	S_regcppush(pTHX_ I32 parenfloor);
STATIC char*	S_regcppop(pTHX);
STATIC char*	S_regcp_set_to(pTHX_ I32 ss);
STATIC void	S_cache_re(pTHX_ regexp *prog);
STATIC U8*	S_reghop(pTHX_ U8 *pos, I32 off);
STATIC U8*	S_reghopmaybe(pTHX_ U8 *pos, I32 off);
STATIC char*	S_find_byclass(pTHX_ regexp * prog, regnode *c, char *s, char *strend, char *startpos, I32 norun);
#endif

#if defined(PERL_IN_RUN_C) || defined(PERL_DECL_PROT)
STATIC void	S_debprof(pTHX_ OP *o);
#endif

#if defined(PERL_IN_SCOPE_C) || defined(PERL_DECL_PROT)
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr);
#endif

#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC IV	S_asIV(pTHX_ SV* sv);
STATIC UV	S_asUV(pTHX_ SV* sv);
STATIC SV*	S_more_sv(pTHX);
STATIC void	S_more_xiv(pTHX);
STATIC void	S_more_xnv(pTHX);
STATIC void	S_more_xpv(pTHX);
STATIC void	S_more_xpviv(pTHX);
STATIC void	S_more_xpvnv(pTHX);
STATIC void	S_more_xpvcv(pTHX);
STATIC void	S_more_xpvav(pTHX);
STATIC void	S_more_xpvhv(pTHX);
STATIC void	S_more_xpvmg(pTHX);
STATIC void	S_more_xpvlv(pTHX);
STATIC void	S_more_xpvbm(pTHX);
STATIC void	S_more_xrv(pTHX);
STATIC XPVIV*	S_new_xiv(pTHX);
STATIC XPVNV*	S_new_xnv(pTHX);
STATIC XPV*	S_new_xpv(pTHX);
STATIC XPVIV*	S_new_xpviv(pTHX);
STATIC XPVNV*	S_new_xpvnv(pTHX);
STATIC XPVCV*	S_new_xpvcv(pTHX);
STATIC XPVAV*	S_new_xpvav(pTHX);
STATIC XPVHV*	S_new_xpvhv(pTHX);
STATIC XPVMG*	S_new_xpvmg(pTHX);
STATIC XPVLV*	S_new_xpvlv(pTHX);
STATIC XPVBM*	S_new_xpvbm(pTHX);
STATIC XRV*	S_new_xrv(pTHX);
STATIC void	S_del_xiv(pTHX_ XPVIV* p);
STATIC void	S_del_xnv(pTHX_ XPVNV* p);
STATIC void	S_del_xpv(pTHX_ XPV* p);
STATIC void	S_del_xpviv(pTHX_ XPVIV* p);
STATIC void	S_del_xpvnv(pTHX_ XPVNV* p);
STATIC void	S_del_xpvcv(pTHX_ XPVCV* p);
STATIC void	S_del_xpvav(pTHX_ XPVAV* p);
STATIC void	S_del_xpvhv(pTHX_ XPVHV* p);
STATIC void	S_del_xpvmg(pTHX_ XPVMG* p);
STATIC void	S_del_xpvlv(pTHX_ XPVLV* p);
STATIC void	S_del_xpvbm(pTHX_ XPVBM* p);
STATIC void	S_del_xrv(pTHX_ XRV* p);
STATIC void	S_sv_unglob(pTHX_ SV* sv);
STATIC void	S_not_a_number(pTHX_ SV *sv);
STATIC void	S_visit(pTHX_ SVFUNC_t f);
STATIC void	S_sv_add_backref(pTHX_ SV *tsv, SV *sv);
STATIC void	S_sv_del_backref(pTHX_ SV *sv);
#  if defined(DEBUGGING)
STATIC void	S_del_sv(pTHX_ SV *p);
#  endif
#endif

#if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
STATIC void	S_check_uni(pTHX);
STATIC void	S_force_next(pTHX_ I32 type);
STATIC char*	S_force_version(pTHX_ char *start);
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack, int allow_tick);
STATIC SV*	S_tokeq(pTHX_ SV *sv);
STATIC char*	S_scan_const(pTHX_ char *start);
STATIC char*	S_scan_formline(pTHX_ char *s);
STATIC char*	S_scan_heredoc(pTHX_ char *s);
STATIC char*	S_scan_ident(pTHX_ char *s, char *send, char *dest, STRLEN destlen, I32 ck_uni);
STATIC char*	S_scan_inputsymbol(pTHX_ char *start);
STATIC char*	S_scan_pat(pTHX_ char *start, I32 type);
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims);
STATIC char*	S_scan_subst(pTHX_ char *start);
STATIC char*	S_scan_trans(pTHX_ char *start);
STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp);
STATIC char*	S_skipspace(pTHX_ char *s);
STATIC void	S_checkcomma(pTHX_ char *s, char *name, char *what);
STATIC void	S_force_ident(pTHX_ char *s, int kind);
STATIC void	S_incline(pTHX_ char *s);
STATIC int	S_intuit_method(pTHX_ char *s, GV *gv);
STATIC int	S_intuit_more(pTHX_ char *s);
STATIC I32	S_lop(pTHX_ I32 f, int x, char *s);
STATIC void	S_missingterm(pTHX_ char *s);
STATIC void	S_no_op(pTHX_ char *what, char *s);
STATIC void	S_set_csh(pTHX);
STATIC I32	S_sublex_done(pTHX);
STATIC I32	S_sublex_push(pTHX);
STATIC I32	S_sublex_start(pTHX);
STATIC char *	S_filter_gets(pTHX_ SV *sv, PerlIO *fp, STRLEN append);
STATIC SV*	S_new_constant(pTHX_ char *s, STRLEN len, const char *key, SV *sv, SV *pv, const char *type);
STATIC int	S_ao(pTHX_ int toketype);
STATIC void	S_depcom(pTHX);
STATIC char*	S_incl_perldb(pTHX);
#if 0
STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen);
STATIC I32	S_utf16rev_textfilter(pTHX_ int idx, SV *sv, int maxlen);
#endif
#  if defined(CRIPPLED_CC)
STATIC int	S_uni(pTHX_ I32 f, char *s);
#  endif
#  if defined(PERL_CR_FILTER)
STATIC I32	S_cr_textfilter(pTHX_ int idx, SV *sv, int maxlen);
#  endif
#endif

#if defined(PERL_IN_UNIVERSAL_C) || defined(PERL_DECL_PROT)
STATIC SV*	S_isa_lookup(pTHX_ HV *stash, const char *name, int len, int level);
#endif

#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
STATIC SV*	S_mess_alloc(pTHX);
#  if defined(LEAKTEST)
STATIC void	S_xstat(pTHX_ int);
#  endif
#endif
a909 3
#if defined(PERL_OBJECT)
};
#endif
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a63 1
PERL_CALLCONV void	Perl_apply_attrs_string(pTHX_ char *stashpv, CV *cv, char *attrstr, STRLEN len);
d132 5
a136 1
PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...);
a181 5
PERL_CALLCONV int	Perl_printf_nocontext(const char* fmt, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
d220 1
a220 1
PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int mode);
d283 1
a283 1
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char* key, unsigned long *len);
a293 1
PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, GV* gv, const char* prefix, bool keepmain);
a300 1
PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, GV* gv, const char* prefix, bool keepmain);
a333 2
PERL_CALLCONV bool	Perl_is_gv_magical(pTHX_ char *name, STRLEN len, U32 flags);
PERL_CALLCONV I32	Perl_is_lvalue_sub(pTHX);
d368 1
a368 2
PERL_CALLCONV STRLEN	Perl_is_utf8_char(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_string(pTHX_ U8 *s, STRLEN len);
d392 5
a396 1
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...);
a424 1
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg);
d599 3
a601 3
PERL_CALLCONV void	Perl_new_collate(pTHX_ char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ char* newctype);
PERL_CALLCONV void	Perl_new_numeric(pTHX_ char* newcoll);
a652 1
PERL_CALLCONV void	Perl_save_generic_pvref(pTHX_ char** str);
a665 1
PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv);
a671 1
PERL_CALLCONV void	Perl_save_padsv(pTHX_ PADOFFSET off);
d680 4
a683 4
PERL_CALLCONV NV	Perl_scan_bin(pTHX_ char* start, STRLEN len, STRLEN* retlen);
PERL_CALLCONV NV	Perl_scan_hex(pTHX_ char* start, STRLEN len, STRLEN* retlen);
PERL_CALLCONV char*	Perl_scan_num(pTHX_ char* s, YYSTYPE *lvalp);
PERL_CALLCONV NV	Perl_scan_oct(pTHX_ char* start, STRLEN len, STRLEN* retlen);
d726 1
a726 1
PERL_CALLCONV I32	Perl_sv_clean_all(pTHX);
d806 3
a808 4
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ U8* s, U8 *e);
PERL_CALLCONV IV	Perl_utf8_distance(pTHX_ U8 *a, U8 *b);
d810 1
a810 5
PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len);
PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ U8 *s, STRLEN *len, bool *is_utf8);
PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ U8 *s, STRLEN *len);
PERL_CALLCONV UV	Perl_utf8_to_uv_simple(pTHX_ U8 *s, STRLEN* retlen);
PERL_CALLCONV UV	Perl_utf8_to_uv(pTHX_ U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
d815 1
a815 1
PERL_CALLCONV void	Perl_report_evil_fh(pTHX_ GV *gv, IO *io, I32 op);
d832 4
a835 2
#ifdef USE_PURE_BISON
PERL_CALLCONV int	Perl_yylex_r(pTHX_ YYSTYPE *lvalp, int *lcharp);
a836 1
PERL_CALLCONV int	Perl_yylex(pTHX);
a857 3
#if defined(USE_THREADS)
PERL_CALLCONV SV*	Perl_sv_lock(pTHX_ SV *sv);
#endif
a912 2
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *tsv, SV *sv);
PERL_CALLCONV void	Perl_sv_del_backref(pTHX_ SV *sv);
a939 6
PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *tbl);
PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *tbl);
#endif
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_clear(pTHX);
PERL_CALLCONV void	Perl_sys_intern_init(pTHX);
d954 10
a963 6
STATIC I32	S_do_trans_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_count(pTHX_ SV *sv);
STATIC I32	S_do_trans_complex(pTHX_ SV *sv);
STATIC I32	S_do_trans_simple_utf8(pTHX_ SV *sv);
STATIC I32	S_do_trans_count_utf8(pTHX_ SV *sv);
STATIC I32	S_do_trans_complex_utf8(pTHX_ SV *sv);
a995 1
STATIC U8*	S_trlist_upgrade(pTHX_ U8** sp, U8** ep);
d1072 1
d1099 1
a1099 1
STATIC void	S_reguni(pTHX_ UV, char *, STRLEN*);
d1192 3
a1194 1
STATIC I32	S_visit(pTHX_ SVFUNC_t f);
a1216 1
STATIC char*	S_swallow_bom(pTHX_ U8 *s);
a1229 1
STATIC HV *	S_find_in_my_stash(pTHX_ char *pkgname, I32 len);
a1250 1
STATIC char*	S_stdize_locale(pTHX_ char* locs);
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@a1 7
 *    proto.h
 *
 *    Copyright (c) 1997-2002, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
d8 1
d16 1
a16 1
PERL_CALLCONV int	perl_destruct(PerlInterpreter* interp);
d27 1
a31 1
#if defined(MYMALLOC)
d41 15
d57 1
a60 1
PERL_CALLCONV CV*	Perl_gv_handler(pTHX_ HV* stash, I32 id);
a92 1
PERL_CALLCONV void	Perl_boot_core_PerlIO(pTHX);
d102 1
a102 1
#if defined(USE_5005THREADS)
a211 1
PERL_CALLCONV void	Perl_deprecate_old(pTHX_ char* s);
a226 5
#if defined(WIN32)
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp);
PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd);
PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd);
#endif
a242 1
PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num);
d271 1
a271 1
#if defined(USE_5005THREADS)
a298 1
PERL_CALLCONV GV*	Perl_gv_fetchmeth_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level);
d311 1
a311 1
PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV* tb, const char* key, I32 klen, I32 flags);
d313 1
a313 1
PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, I32 klen);
d315 1
a315 1
PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV* tb, const char* key, I32 klen, I32 lval);
a322 1
PERL_CALLCONV HE*	Perl_hv_iternext_flags(pTHX_ HV* tb, I32 flags);
d326 1
a326 1
PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV* tb, const char* key, I32 klen, SV* val, U32 hash);
a327 1
PERL_CALLCONV SV**	Perl_hv_store_flags(pTHX_ HV* tb, const char* key, I32 klen, SV* val, U32 hash, int flags);
a330 1
PERL_CALLCONV I32	Perl_ibcmp_utf8(pTHX_ const char* a, char **pe1, UV l1, bool u1, const char* b, char **pe2, UV l2, bool u2);
a331 1
PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int, char **);
a333 1
PERL_CALLCONV void	Perl_init_tm(pTHX_ struct tm *ptm);
d340 31
a373 32
PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_ascii(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_cntrl(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_digit(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ UV c);
PERL_CALLCONV UV	Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp);
PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ UV c);
PERL_CALLCONV bool	Perl_is_uni_xdigit_lc(pTHX_ UV c);
a378 1
PERL_CALLCONV bool	Perl_is_utf8_idcont(pTHX_ U8 *p);
a395 2
PERL_CALLCONV void	Perl_op_null(pTHX_ OP* o);
PERL_CALLCONV void	Perl_op_clear(pTHX_ OP* o);
a402 5
PERL_CALLCONV UV	Perl_grok_bin(pTHX_ char* start, STRLEN* len, I32* flags, NV *result);
PERL_CALLCONV UV	Perl_grok_hex(pTHX_ char* start, STRLEN* len, I32* flags, NV *result);
PERL_CALLCONV int	Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep);
PERL_CALLCONV bool	Perl_grok_numeric_radix(pTHX_ const char **sp, const char *send);
PERL_CALLCONV UV	Perl_grok_oct(pTHX_ char* start, STRLEN* len, I32* flags, NV *result);
a408 1
PERL_CALLCONV int	Perl_magic_freeovrld(pTHX_ SV* sv, MAGIC* mg);
d422 1
a422 1
#if defined(USE_5005THREADS)
a465 1
PERL_CALLCONV void	Perl_sortsv(pTHX_ SV ** array, size_t num_elts, SVCOMPARE_t cmp);
a474 1
PERL_CALLCONV void	Perl_mini_mktime(pTHX_ struct tm *pm);
d480 1
a480 1
#if (!defined(HAS_MEMCPY) && !defined(HAS_BCOPY)) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY) && !defined(HAS_SAFE_BCOPY))
a488 3
PERL_CALLCONV Pid_t	Perl_my_fork(void);
PERL_CALLCONV void	Perl_atfork_lock(void);
PERL_CALLCONV void	Perl_atfork_unlock(void);
d496 1
d499 1
a499 1
PERL_CALLCONV PerlIO*	Perl_my_popen_list(pTHX_ char* mode, int n, SV ** args);
a501 1
PERL_CALLCONV char *	Perl_my_strftime(pTHX_ char *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst);
d513 1
a513 1
PERL_CALLCONV CV*	Perl_newCONSTSUB(pTHX_ HV* stash, char* name, SV* sv);
a551 1
PERL_CALLCONV SV*	Perl_newSVpvn_share(pTHX_ const char* s, I32 len, U32 hash);
a563 1
PERL_CALLCONV char*	Perl_new_vstring(pTHX_ char *vstr, SV *sv);
d580 8
a587 2
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV* pattern, IO *io);
#if defined(USE_5005THREADS)
a589 6
#if defined(USE_REENTRANT_API)
PERL_CALLCONV void	Perl_reentrant_size(pTHX);
PERL_CALLCONV void	Perl_reentrant_init(pTHX);
PERL_CALLCONV void	Perl_reentrant_free(pTHX);
PERL_CALLCONV void*	Perl_reentrant_retry(const char*, ...);
#endif
a594 1
PERL_CALLCONV void	Perl_despatch_signals(pTHX);
a609 1
PERL_CALLCONV void	Perl_pack_cat(pTHX_ SV *cat, char *pat, char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags);
d611 1
a611 1
PERL_CALLCONV void	Perl_pmflag(pTHX_ U32* pmfl, int ch);
a621 1
PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ struct regnode *n, bool doinit, SV **listsvp, SV **altsvp);
d642 2
a643 3
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* pv);
PERL_CALLCONV char*	Perl_savesharedpv(pTHX_ const char* pv);
PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* pv, I32 len);
a657 1
PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str);
d697 1
d709 1
a709 1
/* PERL_CALLCONV char*	sv_2pv(pTHX_ SV* sv, STRLEN* lp); */
a711 1
PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp);
d730 2
a731 2
/* PERL_CALLCONV void	sv_catpvn(pTHX_ SV* sv, const char* ptr, STRLEN len); */
/* PERL_CALLCONV void	sv_catsv(pTHX_ SV* dsv, SV* ssv); */
a741 1
PERL_CALLCONV int	Perl_getcwd_sv(pTHX_ SV* sv);
a756 1
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV* sv, SV* obj, int how, MGVTBL *vtbl, const char* name, I32 namlen	);
d763 1
a763 1
/* PERL_CALLCONV char*	sv_pvn_force(pTHX_ SV* sv, STRLEN* lp); */
a765 1
PERL_CALLCONV char*	Perl_sv_recode_to_utf8(pTHX_ SV* sv, SV *encoding);
d777 1
a780 1
PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV* rv, const char* classname, UV uv);
d786 1
a786 1
/* PERL_CALLCONV void	sv_setsv(pTHX_ SV* dsv, SV* ssv); */
a790 1
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV* sv, U32 flags);
d798 1
a798 1
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *sv, U8 *ptr, bool do_utf8);
d801 3
a803 5
PERL_CALLCONV UV	Perl_to_utf8_case(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp, SV **swash, char *normal, char *special);
PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp);
PERL_CALLCONV UV	Perl_to_utf8_fold(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp);
d807 1
a807 1
#if defined(USE_5005THREADS)
a809 1
PERL_CALLCONV I32	Perl_unpack_str(pTHX_ char *pat, char *patend, char *s, char *strbeg, char *strend, char **new_s, I32 ocnt, U32 flags);
d821 3
a823 10
PERL_CALLCONV UV	Perl_utf8_to_uvchr(pTHX_ U8 *s, STRLEN* retlen);
PERL_CALLCONV UV	Perl_utf8_to_uvuni(pTHX_ U8 *s, STRLEN* retlen);
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv);
PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv);
PERL_CALLCONV U8*	Perl_uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
PERL_CALLCONV U8*	Perl_uvuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
PERL_CALLCONV char*	Perl_pv_uni_display(pTHX_ SV *dsv, U8 *spv, STRLEN len, STRLEN pvlim, UV flags);
PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags);
d869 1
a869 1
#if defined(USE_5005THREADS)
d888 1
d896 1
a896 1
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *dsv, char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
d919 4
a922 4
/* PERL_CALLCONV char*	sv_pv(pTHX_ SV *sv); */
/* PERL_CALLCONV char*	sv_pvutf8(pTHX_ SV *sv); */
/* PERL_CALLCONV char*	sv_pvbyte(pTHX_ SV *sv); */
/* PERL_CALLCONV STRLEN	sv_utf8_upgrade(pTHX_ SV *sv); */
d927 2
a928 1
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *sv, U32 flags);
d938 3
a940 3
PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max, CLONE_PARAMS* param);
PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si, CLONE_PARAMS* param);
PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl, CLONE_PARAMS* param);
d942 3
a944 3
PERL_CALLCONV HE*	Perl_he_dup(pTHX_ HE* e, bool shared, CLONE_PARAMS* param);
PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ REGEXP* r, CLONE_PARAMS* param);
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type, CLONE_PARAMS* param);
d946 3
a948 3
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp, CLONE_PARAMS* param);
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg, CLONE_PARAMS* param);
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ SV* sstr, CLONE_PARAMS* param);
d964 3
a966 8
PERL_CALLCONV char *	Perl_custom_op_name(pTHX_ OP* op);
PERL_CALLCONV char *	Perl_custom_op_desc(pTHX_ OP* op);

PERL_CALLCONV void	Perl_sv_nosharing(pTHX_ SV *);
PERL_CALLCONV void	Perl_sv_nolocking(pTHX_ SV *);
PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *);
PERL_CALLCONV int	Perl_nothreadhook(pTHX);

d968 1
a985 1
STATIC void	S_require_errno(pTHX_ GV *gv);
d994 1
a994 1
STATIC HEK*	S_save_hek_flags(pTHX_ const char *str, I32 len, U32 hash, int flags);
a995 4
STATIC void	S_unshare_hek_or_pvn(pTHX_ HEK* hek, const char* sv, I32 len, U32 hash);
STATIC HEK*	S_share_hek_flags(pTHX_ const char* sv, I32 len, U32 hash, int flags);
STATIC SV**	S_hv_fetch_flags(pTHX_ HV* tb, const char* key, I32 klen, I32 lval, int flags);
STATIC void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg);
d1014 3
a1023 1
#  if defined(DEBUG_CLOSURES)
a1024 1
#  endif
d1027 1
a1027 1
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp);
d1029 1
a1029 2
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs, bool for_my);
STATIC void	S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp);
a1031 1
STATIC void	S_Slab_Free(pTHX_ void *op);
d1064 1
a1064 1
#  if defined(USE_5005THREADS)
d1070 1
a1072 4
#endif

#if defined(PERL_IN_PP_PACK_C) || defined(PERL_DECL_PROT)
STATIC void	S_doencodes(pTHX_ SV* sv, char* s, I32 len);
a1075 4
STATIC char *	S_next_symbol(pTHX_ char *pat, char *patend);
STATIC I32	S_find_count(pTHX_ char **ppat, char *patend, int *star);
STATIC char *	S_group_end(pTHX_ char *pat, char *patend, char ender);
STATIC I32	S_measure_struct(pTHX_ char *pat, char *patend);
d1094 1
a1094 1
STATIC bool	S_path_is_absolute(pTHX_ char *name);
d1113 7
a1119 6
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t*, I32, I32 *);
STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t*, U8, U32);
STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t*, I32 *);
STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t*, I32 *, I32);
STATIC void	S_reguni(pTHX_ struct RExC_state_t*, UV, char *, STRLEN*);
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t*);
d1121 5
a1125 5
STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t*, U8);
STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t*, I32 *);
STATIC void	S_reginsert(pTHX_ struct RExC_state_t*, U8, regnode *);
STATIC void	S_regoptail(pTHX_ struct RExC_state_t*, regnode *, regnode *);
STATIC void	S_regtail(pTHX_ struct RExC_state_t*, regnode *, regnode *);
d1127 1
a1127 2
STATIC char*	S_nextchar(pTHX_ struct RExC_state_t*);
#  ifdef DEBUGGING
d1130 2
a1131 3
#  endif
STATIC void	S_scan_commit(pTHX_ struct RExC_state_t*, struct scan_data_t *data);
STATIC void	S_cl_anything(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl);
d1133 2
a1134 2
STATIC void	S_cl_init(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl);
STATIC void	S_cl_init_zero(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl);
d1136 3
a1138 3
STATIC void	S_cl_or(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl, struct regnode_charclass_class *or_with);
STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t*, regnode **scanp, I32 *deltap, regnode *last, struct scan_data_t *data, U32 flags);
STATIC I32	S_add_data(pTHX_ struct RExC_state_t*, I32 n, char *s);
d1140 2
a1141 2
STATIC I32	S_regpposixcc(pTHX_ struct RExC_state_t*, I32 value);
STATIC void	S_checkposixcc(pTHX_ struct RExC_state_t*);
d1149 2
a1150 1
STATIC bool	S_reginclass(pTHX_ regnode *n, U8 *p, STRLEN *lenp, bool do_utf8sv_is_utf8);
a1155 1
STATIC U8*	S_reghop3(pTHX_ U8 *pos, I32 off, U8 *lim);
a1156 1
STATIC U8*	S_reghopmaybe3(pTHX_ U8 *pos, I32 off, U8 *lim);
a1157 2
STATIC void	S_to_utf8_substr(pTHX_ regexp * prog);
STATIC void	S_to_byte_substr(pTHX_ regexp * prog);
d1160 1
a1160 2
#if defined(PERL_IN_DUMP_C) || defined(PERL_DECL_PROT)
STATIC CV*	S_deb_curcv(pTHX_ I32 ix);
d1211 1
a1211 3
STATIC void	S_sv_add_backref(pTHX_ SV *tsv, SV *sv);
STATIC void	S_sv_del_backref(pTHX_ SV *sv);
#  ifdef DEBUGGING
a1213 8
#  if !defined(NV_PRESERVES_UV)
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *sv, I32 numtype);
#  endif
STATIC I32	S_expect_number(pTHX_ char** pattern);
#
#  if defined(USE_ITHREADS)
STATIC SV*	S_gv_share(pTHX_ SV *sv, CLONE_PARAMS *param);
#  endif
d1219 1
a1219 1
STATIC char*	S_force_version(pTHX_ char *start, int guessing);
a1221 1
STATIC int	S_pending_ident(pTHX);
a1248 3
#  if defined(DEBUGGING)
STATIC void	S_tokereport(pTHX_ char *thing, char *s, I32 rv);
#  endif
d1256 3
d1265 1
a1265 1
STATIC SV*	S_isa_lookup(pTHX_ HV *stash, const char *name, HV *name_stash, int len, int level);
d1268 1
a1268 1
#if defined(PERL_IN_LOCALE_C) || defined(PERL_DECL_PROT)
a1269 4
#endif

#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
STATIC COP*	S_closest_cop(pTHX_ COP *cop, OP *o);
d1276 3
a1278 41
START_EXTERN_C

PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV* dsv, SV* ssv, I32 flags);
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV* sv, const char* ptr, STRLEN len, I32 flags);
PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV* dsv, SV* ssv, I32 flags);
PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *sv, I32 flags);
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags);
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags);
PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV* dsv, SV* ssv);
PERL_CALLCONV char*	Perl_my_atof2(pTHX_ const char *s, NV* value);
PERL_CALLCONV int	Perl_my_socketpair(int family, int type, int protocol, int fd[2]);

#if defined(USE_PERLIO) && !defined(USE_SFIO)
PERL_CALLCONV int	Perl_PerlIO_close(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_fill(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_fileno(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_eof(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_error(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_flush(pTHX_ PerlIO *);
PERL_CALLCONV void	Perl_PerlIO_clearerr(pTHX_ PerlIO *);
PERL_CALLCONV void	Perl_PerlIO_set_cnt(pTHX_ PerlIO *, int);
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *, STDCHAR *, int);
PERL_CALLCONV void	Perl_PerlIO_setlinebuf(pTHX_ PerlIO *);
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *, void *, Size_t);
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *, const void *, Size_t);
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *, const void *, Size_t);
PERL_CALLCONV Off_t	Perl_PerlIO_tell(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_seek(pTHX_ PerlIO *, Off_t, int);

PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_base(pTHX_ PerlIO *);
PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_ptr(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *);
PERL_CALLCONV int	Perl_PerlIO_get_cnt(pTHX_ PerlIO *);

PERL_CALLCONV PerlIO *	Perl_PerlIO_stdin(pTHX);
PERL_CALLCONV PerlIO *	Perl_PerlIO_stdout(pTHX);
PERL_CALLCONV PerlIO *	Perl_PerlIO_stderr(pTHX);
#endif /* PERLIO_LAYERS */

END_EXTERN_C

@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d4 1
a4 2
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999,
 *    2000, 2001, 2002, 2003, by Larry Wall and others
d10 2
a11 5
 * This file is built by embed.pl from data in embed.fnc, embed.pl,
 * pp.sym, intrpvar.h, perlvars.h and thrdvar.h.
 * Any changes made here will be lost!
 *
 * Edit those files and run 'make regen_headers' to effect changes.
d14 1
a25 1
PERL_CALLCONV bool	Perl_doing_taint(int argc, char** argv, char** env);
d99 4
a102 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d106 4
a109 1
	__attribute__format__(__printf__,1,2);
d111 4
a114 1
	__attribute__format__(__printf__,1,2);
d116 4
a119 1
	__attribute__format__(__printf__,1,2);
d121 4
a124 1
	__attribute__format__(__printf__,1,2);
d127 4
a130 1
	__attribute__format__(__printf__,1,2);
d132 4
a135 1
	__attribute__format__(__printf__,1,2);
d137 4
a140 1
	__attribute__format__(__printf__,2,3);
d142 4
a145 1
	__attribute__format__(__printf__,1,2);
d147 4
a150 1
	__attribute__format__(__printf__,2,3);
d152 4
a155 1
	__attribute__format__(__printf__,2,3);
d157 4
a160 1
	__attribute__format__(__printf__,2,3);
d162 4
a165 1
	__attribute__format__(__printf__,2,3);
d167 4
a170 1
	__attribute__format__(__printf__,2,3);
d172 4
a175 1
	__attribute__format__(__printf__,1,2);
d193 4
a196 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d206 4
a209 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d276 4
a279 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
a381 1
PERL_CALLCONV bool	Perl_is_utf8_string_loc(pTHX_ U8 *s, STRLEN len, U8 **p);
a460 1
PERL_CALLCONV int	Perl_magic_setregexp(pTHX_ SV* sv, MAGIC* mg);
a465 1
PERL_CALLCONV int	Perl_magic_setutf8(pTHX_ SV* sv, MAGIC* mg);
d475 4
a478 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d574 4
a577 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d585 1
a585 1
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ char *vstr, SV *sv);
d592 1
a592 1
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ char* name);
d596 1
a596 1
PERL_CALLCONV void	Perl_pad_leavemy(pTHX);
d600 1
a600 1
PERL_CALLCONV void	Perl_pad_swipe(pTHX_ PADOFFSET po, bool refadjust);
a633 1
PERL_CALLCONV void	Perl_packlist(pTHX_ SV *cat, char *pat, char *patend, SV **beglist, SV **endlist);
a670 1
PERL_CALLCONV void	Perl_savestack_grow_cnt(pTHX_ I32 need);
a674 1
PERL_CALLCONV void	Perl_save_bool(pTHX_ bool* boolp);
a725 1
PERL_CALLCONV Signal_t	Perl_csighandler(int sig);
d751 4
a754 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
d768 1
a768 1
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV* sv, OP** startp, char* code, PAD** padp);
a795 1
PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen);
d801 4
a804 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
a806 1
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV* sv, IV num);
a843 1
PERL_CALLCONV I32	Perl_unpackstring(pTHX_ char *pat, char *patend, char *s, char *strend, U32 flags);
d846 1
a846 1
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg);
a867 3
PERL_CALLCONV U32	Perl_parse_unicode_opts(pTHX_ char **popt);
PERL_CALLCONV U32	Perl_seed(pTHX);
PERL_CALLCONV UV	Perl_get_hash_seed(pTHX);
d871 4
a874 1
	__attribute__format__(__printf__,pTHX_1,pTHX_2);
d877 4
a880 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
a883 1
PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ const char* message, int msglen);
d899 6
d914 4
a917 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
d923 4
a926 1
	__attribute__format__(__printf__,pTHX_2,pTHX_3);
a928 1
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *sv, IV iv);
d938 4
a941 1
	__attribute__format__(__printf__,pTHX_3,pTHX_4);
d1062 2
d1069 4
d1078 4
a1081 4
#endif
#if defined(PL_OP_SLAB_ALLOC)
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ int m, size_t sz);
PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op);
d1087 1
a1087 1
STATIC void	S_incpush(pTHX_ char *, int, int, int);
d1120 1
d1124 1
a1124 2
STATIC I32	S_unpack_rec(pTHX_ tempsym_t* symptr, char *s, char *strbeg, char *strend, char **new_s);
STATIC SV **	S_pack_rec(pTHX_ SV *cat, tempsym_t* symptr, SV **beglist, SV **endlist);
a1125 5
STATIC I32	S_measure_struct(pTHX_ tempsym_t* symptr);
STATIC char *	S_group_end(pTHX_ char *pat, char *patend, char ender);
STATIC char *	S_get_num(pTHX_ char *ppat, I32 *);
STATIC bool	S_next_symbol(pTHX_ tempsym_t* symptr);
STATIC void	S_doencodes(pTHX_ SV* sv, char* s, I32 len);
d1128 4
d1148 2
a1149 2
STATIC OP*	S_doeval(pTHX_ int gimme, OP** startop, CV* outside, U32 seq);
STATIC PerlIO *	S_doopen_pm(pTHX_ const char *name, const char *mode);
a1284 2
STATIC bool	S_utf8_mg_pos(pTHX_ SV *sv, MAGIC **mgp, STRLEN **cachep, I32 i, I32 *offsetp, I32 uoff, U8 **sp, U8 *start, U8 *send);
STATIC bool	S_utf8_mg_pos_init(pTHX_ SV *sv, MAGIC **mgp, STRLEN **cachep, I32 i, I32 *offsetp, U8 *s, U8 *start);
d1347 3
a1349 4
#endif

#if defined(PERL_IN_NUMERIC_C) || defined(PERL_DECL_PROT)
STATIC NV	S_mulexp10(NV value, I32 exponent);
a1389 35

PERL_CALLCONV void	Perl_deb_stack_all(pTHX);
#ifdef PERL_IN_DEB_C
STATIC void	S_deb_stack_n(pTHX_ SV** stack_base, I32 stack_min, I32 stack_max, I32 mark_min, I32 mark_max);
#endif

PERL_CALLCONV PADLIST*	Perl_pad_new(pTHX_ int flags);
PERL_CALLCONV void	Perl_pad_undef(pTHX_ CV* cv);
PERL_CALLCONV PADOFFSET	Perl_pad_add_name(pTHX_ char *name, HV* typestash, HV* ourstash, bool clone);
PERL_CALLCONV PADOFFSET	Perl_pad_add_anon(pTHX_ SV* sv, OPCODE op_type);
PERL_CALLCONV void	Perl_pad_check_dup(pTHX_ char* name, bool is_our, HV* ourstash);
#ifdef DEBUGGING
PERL_CALLCONV void	Perl_pad_setsv(pTHX_ PADOFFSET po, SV* sv);
#endif
PERL_CALLCONV void	Perl_pad_block_start(pTHX_ int full);
PERL_CALLCONV void	Perl_pad_tidy(pTHX_ padtidy_type type);
PERL_CALLCONV void	Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full);
PERL_CALLCONV void	Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv);

PERL_CALLCONV void	Perl_pad_push(pTHX_ PADLIST *padlist, int depth, int has_args);

#if defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
STATIC PADOFFSET	S_pad_findlex(pTHX_ char* name, PADOFFSET newoff, CV* innercv);
#  if defined(DEBUGGING)
STATIC void	S_cv_dump(pTHX_ CV *cv, char *title);
#  endif
STATIC CV*	S_cv_clone2(pTHX_ CV *proto, CV *outside);
#endif
PERL_CALLCONV CV*	Perl_find_runcv(pTHX_ U32 *db_seqp);
PERL_CALLCONV void	Perl_free_tied_hv_pool(pTHX);
#if defined(DEBUGGING)
PERL_CALLCONV int	Perl_get_debug_opts(pTHX_ char **s);
#endif


@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@d974 1
d1356 1
a1357 10
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV* hb);

#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC SV*	S_hv_delete_common(pTHX_ HV* tb, SV* key_sv, const char* key, STRLEN klen, int k_flags, I32 d_flags, U32 hash);
STATIC HE*	S_hv_fetch_common(pTHX_ HV* tb, SV* key_sv, const char* key, STRLEN klen, int flags, int action, SV* val, U32 hash);
#endif
PERL_CALLCONV SV*	Perl_hv_scalar(pTHX_ HV* hv);
PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV* hv, MAGIC*	mg);

END_EXTERN_C
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@d5 1
a5 1
 *    2000, 2001, 2002, 2003, 2004, by Larry Wall and others
d1022 1
a1022 1
STATIC void	S_open_script(pTHX_ char *, bool, SV *);
d1024 1
a1024 1
STATIC void	S_validate_suid(pTHX_ char *, char*);
d1067 1
a1067 2
STATIC OP*	S_doparseform(pTHX_ SV *sv);
STATIC bool	S_num_overflow(NV value, I32 fldsize, I32 frcsize);
d1197 1
a1197 1
STATIC I32	S_visit(pTHX_ SVFUNC_t f, U32 flags, U32 mask);
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@a1365 3
#if defined(DEBUGGING)
PERL_CALLCONV int	Perl_get_debug_opts_flags(pTHX_ char **s, int flags);
#endif
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@d1 1
a1 2
/*  -*- buffer-read-only: t -*-
 *
d5 1
a5 1
 *    2000, 2001, 2002, 2003, 2004, 2005, 2006, by Larry Wall and others
d29 1
a29 3
PERL_CALLCONV bool	Perl_doing_taint(int argc, char** argv, char** env)
			__attribute__warn_unused_result__;

d37 3
a39 12
PERL_CALLCONV Malloc_t	Perl_malloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_calloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_realloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d42 1
a42 3
PERL_CALLCONV MEM_SIZE	Perl_malloced_size(void *p)
			__attribute__warn_unused_result__;

d45 1
a45 3
PERL_CALLCONV void*	Perl_get_context(void)
			__attribute__warn_unused_result__;

d55 2
a56 4
PERL_CALLCONV CV*	Perl_gv_handler(pTHX_ HV* stash, I32 id)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_append_elem(pTHX_ I32 optype, OP* first, OP* last);
d69 1
a69 3
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV* ar, I32 key)
			__attribute__warn_unused_result__;

d71 2
a72 6
PERL_CALLCONV AV*	Perl_av_fake(pTHX_ I32 size, SV** svp)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV* ar, I32 key, I32 lval)
			__attribute__warn_unused_result__;

d74 2
a75 6
PERL_CALLCONV I32	Perl_av_len(pTHX_ AV* ar)
			__attribute__warn_unused_result__;

PERL_CALLCONV AV*	Perl_av_make(pTHX_ I32 size, SV** svp)
			__attribute__warn_unused_result__;

d79 1
a79 3
PERL_CALLCONV SV*	Perl_av_shift(pTHX_ AV* ar)
			__attribute__warn_unused_result__;

d83 4
a86 12
PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP* left, OP* pat)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_block_end(pTHX_ I32 floor, OP* seq)
			__attribute__warn_unused_result__;

PERL_CALLCONV I32	Perl_block_gimme(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV int	Perl_block_start(pTHX_ int full)
			__attribute__warn_unused_result__;

d90 5
a94 15
PERL_CALLCONV bool	Perl_cando(pTHX_ Mode_t mode, Uid_t effective, Stat_t* statbufp)
			__attribute__warn_unused_result__;

PERL_CALLCONV U32	Perl_cast_ulong(pTHX_ NV f)
			__attribute__warn_unused_result__;

PERL_CALLCONV I32	Perl_cast_i32(pTHX_ NV f)
			__attribute__warn_unused_result__;

PERL_CALLCONV IV	Perl_cast_iv(pTHX_ NV f)
			__attribute__warn_unused_result__;

PERL_CALLCONV UV	Perl_cast_uv(pTHX_ NV f)
			__attribute__warn_unused_result__;

d96 1
a96 3
PERL_CALLCONV I32	Perl_my_chsize(pTHX_ int fd, Off_t length)
			__attribute__warn_unused_result__;

d101 4
a104 10
PERL_CALLCONV OP*	Perl_convert(pTHX_ I32 optype, I32 flags, OP* o)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_croak(pTHX_ const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__(__printf__,pTHX_1,pTHX_2);

PERL_CALLCONV void	Perl_vcroak(pTHX_ const char* pat, va_list* args)
			__attribute__noreturn__;

d106 2
a107 4
PERL_CALLCONV void	Perl_croak_nocontext(const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__(__printf__,1,2);

d109 1
a109 2
			__attribute__format__(__printf__,1,2);

d111 1
a111 2
			__attribute__format__(__printf__,1,2);

d113 1
a113 2
			__attribute__format__(__printf__,1,2);

d116 1
a116 2
			__attribute__format__(__printf__,1,2);

d118 1
a118 2
			__attribute__format__(__printf__,1,2);

d120 1
a120 2
			__attribute__format__(__printf__,2,3);

d122 1
a122 2
			__attribute__format__(__printf__,1,2);

d124 1
a124 2
			__attribute__format__(__printf__,2,3);

d126 1
a126 2
			__attribute__format__(__printf__,2,3);

d128 1
a128 2
			__attribute__format__(__printf__,2,3);

d130 1
a130 2
			__attribute__format__(__printf__,2,3);

d132 1
a132 2
			__attribute__format__(__printf__,2,3);

d134 1
a134 2
			__attribute__format__(__printf__,1,2);

d138 2
a139 6
PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ CV* cv)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ OP* o, CV* cv)
			__attribute__warn_unused_result__;

d141 1
a141 1
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cx);
d144 7
a150 26
PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV* buffer, int maxlen)
			__attribute__warn_unused_result__;

PERL_CALLCONV char**	Perl_get_op_descs(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV char**	Perl_get_op_names(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV char*	Perl_get_no_modify(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV U32*	Perl_get_opargs(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV PPADDR_t*	Perl_get_ppaddr(pTHX)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV I32	Perl_cxinc(pTHX)
			__attribute__warn_unused_result__;

d152 1
a152 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2);

d162 1
a162 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2);

d197 1
a197 3
PERL_CALLCONV OP*	Perl_do_readline(pTHX)
			__attribute__warn_unused_result__;

d202 1
a202 3
PERL_CALLCONV Off_t	Perl_do_tell(pTHX_ GV* gv)
			__attribute__warn_unused_result__;

d208 1
a208 3
PERL_CALLCONV I32	Perl_dowantarray(pTHX)
			__attribute__warn_unused_result__;

d221 1
a221 3
PERL_CALLCONV char*	Perl_fbm_instr(pTHX_ unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags)
			__attribute__warn_unused_result__;

d229 1
a229 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2);

d241 1
a241 3
PERL_CALLCONV GV*	Perl_gv_autoload4(pTHX_ HV* stash, const char* name, STRLEN len, I32 method)
			__attribute__warn_unused_result__;

d244 1
a244 1
/* PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, GV* gv, const char* prefix); */
d253 1
a253 1
/* PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, GV* gv, const char* prefix); */
d263 2
a264 6
PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, I32 klen)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV* tb, SV* key, U32 hash)
			__attribute__warn_unused_result__;

d267 1
a267 1
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV* hv, HE* entryK);
d269 6
a274 18
PERL_CALLCONV char*	Perl_hv_iterkey(pTHX_ HE* entry, I32* retlen)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_hv_iterkeysv(pTHX_ HE* entry)
			__attribute__warn_unused_result__;

PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV* tb)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_hv_iternextsv(pTHX_ HV* hv, char** key, I32* retlen)
			__attribute__warn_unused_result__;

PERL_CALLCONV HE*	Perl_hv_iternext_flags(pTHX_ HV* tb, I32 flags)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_hv_iterval(pTHX_ HV* tb, HE* entry)
			__attribute__warn_unused_result__;

d281 2
a282 6
PERL_CALLCONV I32	Perl_ibcmp(pTHX_ const char* a, const char* b, I32 len)
			__attribute__pure__;

PERL_CALLCONV I32	Perl_ibcmp_locale(pTHX_ const char* a, const char* b, I32 len)
			__attribute__pure__;

d284 2
a285 4
PERL_CALLCONV bool	Perl_ingroup(pTHX_ Gid_t testgid, Uid_t effective)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int argc, char **argv);
d290 22
a311 84
PERL_CALLCONV char*	Perl_instr(pTHX_ const char* big, const char* little)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_io_close(pTHX_ IO* io, bool not_implicit)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_invert(pTHX_ OP* cmd)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_gv_magical(pTHX_ char *name, STRLEN len, U32 flags)
			__attribute__warn_unused_result__;

PERL_CALLCONV I32	Perl_is_lvalue_sub(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV U32	Perl_to_uni_upper_lc(pTHX_ U32 c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV U32	Perl_to_uni_title_lc(pTHX_ U32 c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV U32	Perl_to_uni_lower_lc(pTHX_ U32 c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_ascii(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_cntrl(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_digit(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

d316 14
a329 56
PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_xdigit_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

d331 1
d333 16
a348 49
PERL_CALLCONV bool	Perl_is_utf8_string(pTHX_ U8 *s, STRLEN len);
PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_idcont(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_is_utf8_mark(pTHX_ U8 *p)
			__attribute__warn_unused_result__;

d350 1
a350 3
PERL_CALLCONV I32	Perl_keyword(pTHX_ char* d, I32 len)
			__attribute__pure__;

d362 1
a362 3
PERL_CALLCONV I32	Perl_looks_like_number(pTHX_ SV* sv)
			__attribute__warn_unused_result__;

d366 2
a367 4
PERL_CALLCONV bool	Perl_grok_numeric_radix(pTHX_ const char **sp, const char *send)
			__attribute__warn_unused_result__;

PERL_CALLCONV UV	Perl_grok_oct(pTHX_ char* start, STRLEN* len_p, I32* flags, NV *result);
d394 1
a394 3
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg)
			__attribute__noreturn__;

d428 1
a428 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2);

d431 1
a431 1
PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp);
d434 1
a434 3
PERL_CALLCONV MAGIC*	Perl_mg_find(pTHX_ SV* sv, int type)
			__attribute__warn_unused_result__;

d453 2
a454 6
PERL_CALLCONV void	Perl_my_exit(pTHX_ U32 status)
			__attribute__noreturn__;

PERL_CALLCONV void	Perl_my_failure_exit(pTHX)
			__attribute__noreturn__;

d461 1
a461 3
PERL_CALLCONV I32	Perl_my_memcmp(const char* s1, const char* s2, I32 len)
			__attribute__pure__;

d473 3
a475 15
PERL_CALLCONV short	Perl_my_swap(pTHX_ short s)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV long	Perl_my_htonl(pTHX_ long l)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV long	Perl_my_ntohl(pTHX_ long l)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__pure__;

d478 2
a479 8
PERL_CALLCONV OP*	Perl_newANONLIST(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newANONHASH(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d481 2
a482 8
PERL_CALLCONV OP*	Perl_newASSIGNOP(pTHX_ I32 flags, OP* left, I32 optype, OP* right)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newCONDOP(pTHX_ I32 flags, OP* first, OP* trueop, OP* falseop)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d485 6
a490 24
PERL_CALLCONV OP*	Perl_newFOROP(pTHX_ I32 flags, char* label, line_t forline, OP* sv, OP* expr, OP* block, OP* cont)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP* left, OP* right)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newLOOPEX(pTHX_ I32 type, OP* label)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newLOOPOP(pTHX_ I32 flags, I32 debuggable, OP* expr, OP* block)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newNULLLIST(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newOP(pTHX_ I32 optype, I32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d492 3
a494 12
PERL_CALLCONV OP*	Perl_newRANGE(pTHX_ I32 flags, OP* left, OP* right)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newSLICEOP(pTHX_ I32 flags, OP* subscript, OP* listop)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newSTATEOP(pTHX_ I32 flags, char* label, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d497 26
a522 104
PERL_CALLCONV AV*	Perl_newAV(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newAVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newBINOP(pTHX_ I32 type, I32 flags, OP* first, OP* last)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newCVREF(pTHX_ I32 flags, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newGVOP(pTHX_ I32 type, I32 flags, GV* gv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV GV*	Perl_newGVgen(pTHX_ char* pack)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newGVREF(pTHX_ I32 type, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newHVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV HV*	Perl_newHV(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV* hv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV IO*	Perl_newIO(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newLISTOP(pTHX_ I32 type, I32 flags, OP* first, OP* last)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newPADOP(pTHX_ I32 type, I32 flags, SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newPMOP(pTHX_ I32 type, I32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newPVOP(pTHX_ I32 type, I32 flags, char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV* pref)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSV(pTHX_ STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newSVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newSVOP(pTHX_ I32 type, I32 flags, SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSViv(pTHX_ IV i)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ UV u)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVnv(pTHX_ NV n)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpv(pTHX_ const char* s, STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char* s, STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpvn_share(pTHX_ const char* s, I32 len, U32 hash)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d524 2
a525 8
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__format__(__printf__,pTHX_1,pTHX_2);

PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char* pat, va_list* args)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d527 3
a529 15
PERL_CALLCONV SV*	Perl_newSVsv(pTHX_ SV* old)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newUNOP(pTHX_ I32 type, I32 flags, OP* first)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, I32 whileline, OP* expr, OP* block, OP* cont)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV PERL_SI*	Perl_new_stackinfo(pTHX_ I32 stitems, I32 cxitems)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d531 1
d534 2
a535 6
PERL_CALLCONV char*	Perl_ninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend)
			__attribute__pure__;

PERL_CALLCONV OP*	Perl_oopsCV(pTHX_ OP* o)
			__attribute__noreturn__;

d540 3
a542 9
PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ char* name)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_oopsAV(pTHX_ OP* o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_oopsHV(pTHX_ OP* o)
			__attribute__warn_unused_result__;

d601 1
a601 3
PERL_CALLCONV regnode*	Perl_regnext(pTHX_ regnode* p)
			__attribute__warn_unused_result__;

d604 1
a604 3
PERL_CALLCONV char*	Perl_rninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend)
			__attribute__pure__;

d615 3
a617 12
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* pv, I32 len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savesharedpv(pTHX_ const char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d638 1
a638 3
PERL_CALLCONV void	Perl_save_hints(pTHX)
			__attribute__noreturn__;

a657 1
#ifdef USE_5005THREADS
a658 5
#else
PERL_CALLCONV SV**	Perl_save_threadsv(pTHX_ PADOFFSET i)
			__attribute__noreturn__;

#endif
d669 1
a669 1
PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV *bigstr, SV *littlestr, I32 start_shift, I32 end_shift, I32 *oldposp, I32 last);
d674 1
a674 1
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* str, I32 len, U32 hash);
d702 1
a702 2
			__attribute__format__(__printf__,pTHX_2,pTHX_3);

d720 1
a720 3
PERL_CALLCONV bool	Perl_sv_derived_from(pTHX_ SV* sv, const char* name)
			__attribute__warn_unused_result__;

d733 3
a735 8
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV* sv, SV* obj, int how, MGVTBL *vtbl, const char* name, I32 namlen);
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV* oldsv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_sv_newmortal(pTHX)
			__attribute__warn_unused_result__;

d745 1
a745 3
PERL_CALLCONV char*	Perl_sv_reftype(pTHX_ SV* sv, int ob)
			__attribute__warn_unused_result__;

d750 1
a750 2
			__attribute__format__(__printf__,pTHX_2,pTHX_3);

d765 1
a765 3
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV* sv)
			__attribute__warn_unused_result__;

d774 1
a774 3
PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv)
			__attribute__warn_unused_result__;

d779 1
a779 1
PERL_CALLCONV UV	Perl_to_utf8_case(pTHX_ U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, char *normal, char *special);
d797 3
a799 12
PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ U8* s, U8 *e)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV IV	Perl_utf8_distance(pTHX_ U8 *a, U8 *b)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV U8*	Perl_utf8_hop(pTHX_ U8 *s, I32 off)
			__attribute__warn_unused_result__
			__attribute__pure__;

d803 4
a806 4
PERL_CALLCONV UV	Perl_utf8_to_uvchr(pTHX_ U8 *s, STRLEN *retlen);
PERL_CALLCONV UV	Perl_utf8_to_uvuni(pTHX_ U8 *s, STRLEN *retlen);
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags);
PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags);
d812 1
a812 3
PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
			__attribute__warn_unused_result__;

d818 1
a818 3
PERL_CALLCONV UV	Perl_get_hash_seed(pTHX)
			__attribute__warn_unused_result__;

d822 1
a822 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2);

d825 1
a825 2
			__attribute__format__(__printf__,pTHX_2,pTHX_3);

d839 1
a839 3
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level)
			__attribute__warn_unused_result__;

d841 3
a843 12
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d854 1
a854 2
			__attribute__format__(__printf__,pTHX_2,pTHX_3);

d860 1
a860 2
			__attribute__format__(__printf__,pTHX_2,pTHX_3);

d870 1
a870 3
PERL_CALLCONV MGVTBL*	Perl_get_vtbl(pTHX_ int vtbl_id)
			__attribute__warn_unused_result__;

d873 1
a873 2
			__attribute__format__(__printf__,pTHX_3,pTHX_4);

d888 6
a893 18
PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;

/* PERL_CALLCONV char*	sv_pv(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */

/* PERL_CALLCONV char*	sv_pvutf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */

/* PERL_CALLCONV char*	sv_pvbyte(pTHX_ SV *sv)
			__attribute__warn_unused_result__; */

d905 1
a905 3
PERL_CALLCONV void	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__noreturn__;

d909 11
a919 45
PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, PerlInterpreter* proto_perl)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV HE*	Perl_he_dup(pTHX_ HE* e, bool shared, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ REGEXP* r, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR* dp)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ SV* sstr, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV* dstr, SV *sstr, CLONE_PARAMS* param);
d923 2
a924 8
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *tbl, void *sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d935 2
a936 6
PERL_CALLCONV char *	Perl_custom_op_name(pTHX_ OP* op)
			__attribute__warn_unused_result__;

PERL_CALLCONV char *	Perl_custom_op_desc(pTHX_ OP* op)
			__attribute__warn_unused_result__;

d951 6
a956 18
STATIC I32	S_do_trans_simple(pTHX_ SV *sv)
			__attribute__warn_unused_result__;

STATIC I32	S_do_trans_count(pTHX_ SV *sv)
			__attribute__warn_unused_result__;

STATIC I32	S_do_trans_complex(pTHX_ SV *sv)
			__attribute__warn_unused_result__;

STATIC I32	S_do_trans_simple_utf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__;

STATIC I32	S_do_trans_count_utf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__;

STATIC I32	S_do_trans_complex_utf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__;

d967 2
a968 4
STATIC HE*	S_new_he(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d970 1
a970 4
STATIC HEK*	S_save_hek_flags(pTHX_ const char *str, I32 len, U32 hash, int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d972 3
a974 7
STATIC void	S_unshare_hek_or_pvn(pTHX_ HEK* hek, const char* str, I32 len, U32 hash);
STATIC HEK*	S_share_hek_flags(pTHX_ const char* str, I32 len, U32 hash, int flags)
			__attribute__warn_unused_result__;

STATIC void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg)
			__attribute__noreturn__;

d979 2
a980 5
STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, const char *meth);
STATIC int	S_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, const char *meth, I32 f, int n, SV *val);
STATIC void	S_restore_magic(pTHX_ const void *p);
STATIC void	S_unwind_handler_stack(pTHX_ const void *p);

d984 2
a985 6
STATIC bool	S_is_handle_constructor(pTHX_ const OP *o, I32 numargs)
			__attribute__warn_unused_result__;

STATIC I32	S_is_list_assignment(pTHX_ const OP *o)
			__attribute__warn_unused_result__;

d988 2
d991 4
a994 6
STATIC OP*	S_newDEFSVOP(pTHX)
			__attribute__warn_unused_result__;

STATIC OP*	S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp)
			__attribute__warn_unused_result__;

d996 3
a998 2
STATIC const char*	S_gv_ename(pTHX_ GV *gv);
STATIC bool	S_scalar_mod_type(pTHX_ const OP *o, I32 type);
a1002 11
STATIC void	S_bad_type(pTHX_ I32 n, const char *t, const char *name, const OP *kid);
STATIC void	S_no_bareword_allowed(pTHX_ const OP *o);
STATIC OP*	S_no_fh_allowed(pTHX_ OP *o)
			__attribute__warn_unused_result__;

STATIC OP*	S_too_few_arguments(pTHX_ OP *o, const char* name)
			__attribute__warn_unused_result__;

STATIC OP*	S_too_many_arguments(pTHX_ OP *o, const char* name)
			__attribute__warn_unused_result__;

d1005 1
a1005 4
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ int m, size_t sz)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d1011 2
a1012 2
STATIC void	S_forbid_setid(pTHX_ const char * s);
STATIC void	S_incpush(pTHX_ const char *dir, bool addsubdirs, bool addoldvers, bool usesep);
d1018 1
a1018 1
STATIC void	S_init_postdump_symbols(pTHX_ int argc, char **argv, char **env);
d1020 1
a1020 3
STATIC void	S_my_exit_jump(pTHX)
			__attribute__noreturn__;

d1022 3
a1024 3
STATIC void	S_open_script(pTHX_ const char *scriptname, bool dosearch, SV *sv);
STATIC void	S_usage(pTHX_ const char *name);
STATIC void	S_validate_suid(pTHX_ const char *validarg, const char *scriptname);
d1029 2
a1030 4
STATIC void	S_run_body(pTHX_ I32 oldscope)
			__attribute__noreturn__;

STATIC void	S_call_body(pTHX_ const OP *myop, bool is_eval);
d1044 1
a1044 3
STATIC SV*	S_refto(pTHX_ SV* sv)
			__attribute__warn_unused_result__;

d1052 2
a1053 2
STATIC const char *	S_group_end(pTHX_ const char *pat, const char *patend, char ender);
STATIC const char *	S_get_num(pTHX_ const char *ppat, I32 *);
d1056 1
a1056 3
STATIC SV*	S_is_an_int(pTHX_ const char *s, STRLEN l)
			__attribute__warn_unused_result__;

d1061 2
a1062 4
STATIC OP*	S_docatch(pTHX_ OP *o)
			__attribute__warn_unused_result__;

STATIC void	S_docatch_body(pTHX);
d1066 8
a1073 24
STATIC OP*	S_dofindlabel(pTHX_ OP *o, const char *label, OP **opstack, OP **oplimit)
			__attribute__warn_unused_result__;

STATIC OP*	S_doparseform(pTHX_ SV *sv)
			__attribute__warn_unused_result__;

STATIC bool	S_num_overflow(NV value, I32 fldsize, I32 frcsize)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptoeval(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptolabel(pTHX_ const char *label)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptoloop(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptosub(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptosub_at(pTHX_ const PERL_CONTEXT* cxstk, I32 startingblock)
			__attribute__warn_unused_result__;

d1075 3
a1077 12
STATIC OP*	S_doeval(pTHX_ int gimme, OP** startop, CV* outside, U32 seq)
			__attribute__warn_unused_result__;

STATIC PerlIO *	S_check_type_and_open(pTHX_ const char *name, const char *mode)
			__attribute__warn_unused_result__;

STATIC PerlIO *	S_doopen_pm(pTHX_ const char *name, const char *mode)
			__attribute__warn_unused_result__;

STATIC bool	S_path_is_absolute(pTHX_ const char *name)
			__attribute__warn_unused_result__;

d1083 2
a1084 6
STATIC CV*	S_get_db_sub(pTHX_ SV **svp, CV *cv)
			__attribute__warn_unused_result__;

STATIC SV*	S_method_common(pTHX_ SV* meth, U32* hashp)
			__attribute__warn_unused_result__;

d1091 1
a1091 3
STATIC int	S_dooneliner(pTHX_ const char *cmd, const char *filename)
			__attribute__warn_unused_result__;

d1096 13
a1108 15
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t *state, I32 paren, I32 *flagp);
STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t *state, U8 op, U32 arg);
STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t *state, I32 *flagp);
STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t *state, I32 *flagp, I32 first);
STATIC void	S_reguni(pTHX_ const struct RExC_state_t *state, UV uv, char *s, STRLEN *lenp);
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *state);
STATIC I32	S_regcurly(pTHX_ const char *)
			__attribute__warn_unused_result__;

STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t *state, U8 op);
STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t *state, I32 *flagp);
STATIC void	S_reginsert(pTHX_ struct RExC_state_t *state, U8 op, regnode *opnd);
STATIC void	S_regoptail(pTHX_ struct RExC_state_t *state, regnode *p, regnode *val);
STATIC void	S_regtail(pTHX_ struct RExC_state_t *state, regnode *p, regnode *val);
STATIC char*	S_regwhite(pTHX_ char *p, const char *e);
d1116 1
a1116 1
STATIC int	S_cl_is_anything(pTHX_ const struct regnode_charclass_class *cl);
d1119 5
a1123 7
STATIC void	S_cl_and(pTHX_ struct regnode_charclass_class *cl, const struct regnode_charclass_class *and_with);
STATIC void	S_cl_or(pTHX_ struct RExC_state_t*, struct regnode_charclass_class *cl, const struct regnode_charclass_class *or_with);
STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t* pRExC_state, regnode **scanp, I32 *deltap, regnode *last, struct scan_data_t *data, U32 flags);
STATIC I32	S_add_data(pTHX_ struct RExC_state_t*, I32 n, const char *s);
STATIC void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...)
			__attribute__noreturn__;

d1129 5
a1133 15
STATIC I32	S_regmatch(pTHX_ regnode *prog)
			__attribute__warn_unused_result__;

STATIC I32	S_regrepeat(pTHX_ const regnode *p, I32 max)
			__attribute__warn_unused_result__;

STATIC I32	S_regrepeat_hard(pTHX_ regnode *p, I32 max, I32 *lp)
			__attribute__warn_unused_result__;

STATIC I32	S_regtry(pTHX_ regexp *prog, char *startpos)
			__attribute__warn_unused_result__;

STATIC bool	S_reginclass(pTHX_ const regnode *n, const U8 *p, STRLEN *lenp, bool do_utf8sv_is_utf8)
			__attribute__warn_unused_result__;

d1138 5
a1142 15
STATIC U8*	S_reghop(pTHX_ U8 *pos, I32 off)
			__attribute__warn_unused_result__;

STATIC U8*	S_reghop3(pTHX_ U8 *pos, I32 off, U8 *lim)
			__attribute__warn_unused_result__;

STATIC U8*	S_reghopmaybe(pTHX_ U8 *pos, I32 off)
			__attribute__warn_unused_result__;

STATIC U8*	S_reghopmaybe3(pTHX_ U8 *pos, I32 off, U8 *lim)
			__attribute__warn_unused_result__;

STATIC char*	S_find_byclass(pTHX_ regexp * prog, regnode *c, char *s, const char *strend, I32 norun)
			__attribute__warn_unused_result__;

d1149 1
a1149 1
STATIC void	S_debprof(pTHX_ const OP *o);
d1157 15
a1171 9
STATIC char *	S_uiv_2buf(char *buf, IV iv, UV uv, int is_uv, char **peob)
			__attribute__warn_unused_result__;

STATIC IV	S_asIV(pTHX_ SV* sv)
			__attribute__warn_unused_result__;

STATIC UV	S_asUV(pTHX_ SV* sv)
			__attribute__warn_unused_result__;

d1207 1
a1207 3
STATIC I32	S_expect_number(pTHX_ char** pattern)
			__attribute__warn_unused_result__;

d1209 5
a1213 2
STATIC bool	S_utf8_mg_pos(pTHX_ SV *sv, MAGIC **mgp, STRLEN **cachep, I32 i, I32 *offsetp, I32 uoff, const U8 **sp, const U8 *start, const U8 *send);
STATIC bool	S_utf8_mg_pos_init(pTHX_ SV *sv, MAGIC **mgp, STRLEN **cachep, I32 i, I32 offsetp, const U8 *s, const U8 *start);
d1223 9
a1231 25
STATIC char*	S_scan_const(pTHX_ char *start)
			__attribute__warn_unused_result__;

STATIC char*	S_scan_formline(pTHX_ char *s)
			__attribute__warn_unused_result__;

STATIC char*	S_scan_heredoc(pTHX_ char *s)
			__attribute__warn_unused_result__;

STATIC char*	S_scan_ident(pTHX_ char *s, const char *send, char *dest, STRLEN destlen, I32 ck_uni);
STATIC char*	S_scan_inputsymbol(pTHX_ char *start)
			__attribute__warn_unused_result__;

STATIC char*	S_scan_pat(pTHX_ char *start, I32 type)
			__attribute__warn_unused_result__;

STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims)
			__attribute__warn_unused_result__;

STATIC char*	S_scan_subst(pTHX_ char *start)
			__attribute__warn_unused_result__;

STATIC char*	S_scan_trans(pTHX_ char *start)
			__attribute__warn_unused_result__;

d1233 4
a1236 8
STATIC char*	S_skipspace(pTHX_ char *s)
			__attribute__warn_unused_result__;

STATIC char*	S_swallow_bom(pTHX_ U8 *s)
			__attribute__warn_unused_result__;

STATIC void	S_checkcomma(pTHX_ char *s, const char *name, const char *what);
STATIC void	S_force_ident(pTHX_ const char *s, int kind);
d1241 2
a1242 4
STATIC void	S_missingterm(pTHX_ char *s)
			__attribute__noreturn__;

STATIC void	S_no_op(pTHX_ const char *what, char *s);
d1244 6
a1249 16
STATIC I32	S_sublex_done(pTHX)
			__attribute__warn_unused_result__;

STATIC I32	S_sublex_push(pTHX)
			__attribute__warn_unused_result__;

STATIC I32	S_sublex_start(pTHX)
			__attribute__warn_unused_result__;

STATIC char *	S_filter_gets(pTHX_ SV *sv, PerlIO *fp, STRLEN append)
			__attribute__warn_unused_result__;

STATIC HV *	S_find_in_my_stash(pTHX_ const char *pkgname, I32 len)
			__attribute__warn_unused_result__;

STATIC SV*	S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, SV *sv, SV *pv, const char *type);
d1251 1
a1251 1
STATIC int	S_tokereport(pTHX_ const char *s, I32 rv);
d1255 5
a1259 1
STATIC const char*	S_incl_perldb(pTHX);
d1274 1
a1274 1
STATIC COP*	S_closest_cop(pTHX_ COP *cop, const OP *o);
a1275 2
PERL_CALLCONV const char *	vdie_croak_common(pTHX_ const char *pat, va_list *args, STRLEN *msglen, I32* utf8);
PERL_CALLCONV void	vdie_common(pTHX_ const char *message, STRLEN msglen, I32 utf8);
a1281 4
#if defined(PERL_IN_UTF8_C) || defined(PERL_DECL_PROT)
STATIC STRLEN	S_is_utf8_char_slow(pTHX_ const U8 *s, const STRLEN len);
#endif

d1295 24
a1318 34
PERL_CALLCONV int	Perl_PerlIO_close(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_fill(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_fileno(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_eof(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_error(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_flush(pTHX_ PerlIO *f);
PERL_CALLCONV void	Perl_PerlIO_clearerr(pTHX_ PerlIO *f);
PERL_CALLCONV void	Perl_PerlIO_set_cnt(pTHX_ PerlIO *f, int cnt);
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, int cnt);
PERL_CALLCONV void	Perl_PerlIO_setlinebuf(pTHX_ PerlIO *f);
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *buf, Size_t count);
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *buf, Size_t count);
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *buf, Size_t count);
PERL_CALLCONV Off_t	Perl_PerlIO_tell(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_seek(pTHX_ PerlIO *f, Off_t offset, int whence);

PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_base(pTHX_ PerlIO *f);
PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_ptr(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *f)
			__attribute__warn_unused_result__;

PERL_CALLCONV int	Perl_PerlIO_get_cnt(pTHX_ PerlIO *f)
			__attribute__warn_unused_result__;


PERL_CALLCONV PerlIO *	Perl_PerlIO_stdin(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV PerlIO *	Perl_PerlIO_stdout(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV PerlIO *	Perl_PerlIO_stderr(pTHX)
			__attribute__warn_unused_result__;

d1326 1
a1326 4
PERL_CALLCONV PADLIST*	Perl_pad_new(pTHX_ int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

a1339 3
PERL_CALLCONV HV*	Perl_pad_compname_type(pTHX_ const PADOFFSET po)
			__attribute__warn_unused_result__;

d1342 1
a1342 1
STATIC PADOFFSET	S_pad_findlex(pTHX_ const char* name, PADOFFSET newoff, const CV* innercv);
d1344 1
a1344 1
STATIC void	S_cv_dump(pTHX_ const CV *cv, const char *title);
d1348 1
a1348 3
PERL_CALLCONV CV*	Perl_find_runcv(pTHX_ U32 *db_seqp)
			__attribute__warn_unused_result__;

d1351 4
a1354 2
PERL_CALLCONV int	Perl_get_debug_opts(pTHX_ char **s)
			__attribute__warn_unused_result__;
a1355 1
#endif
d1363 2
a1364 4
PERL_CALLCONV SV*	Perl_hv_scalar(pTHX_ HV* hv)
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV* hv, MAGIC* mg);
a1368 228

PERL_CALLCONV void	Perl_op_refcnt_lock(pTHX);
PERL_CALLCONV void	Perl_op_refcnt_unlock(pTHX);
PERL_CALLCONV char*	Perl_savesvpv(pTHX_ SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;


#ifdef PERL_NEED_MY_HTOLE16
PERL_CALLCONV U16	Perl_my_htole16(U16 n);
#endif
#ifdef PERL_NEED_MY_LETOH16
PERL_CALLCONV U16	Perl_my_letoh16(U16 n);
#endif
#ifdef PERL_NEED_MY_HTOBE16
PERL_CALLCONV U16	Perl_my_htobe16(U16 n);
#endif
#ifdef PERL_NEED_MY_BETOH16
PERL_CALLCONV U16	Perl_my_betoh16(U16 n);
#endif
#ifdef PERL_NEED_MY_HTOLE32
PERL_CALLCONV U32	Perl_my_htole32(U32 n);
#endif
#ifdef PERL_NEED_MY_LETOH32
PERL_CALLCONV U32	Perl_my_letoh32(U32 n);
#endif
#ifdef PERL_NEED_MY_HTOBE32
PERL_CALLCONV U32	Perl_my_htobe32(U32 n);
#endif
#ifdef PERL_NEED_MY_BETOH32
PERL_CALLCONV U32	Perl_my_betoh32(U32 n);
#endif
#ifdef PERL_NEED_MY_HTOLE64
PERL_CALLCONV U64	Perl_my_htole64(U64 n);
#endif
#ifdef PERL_NEED_MY_LETOH64
PERL_CALLCONV U64	Perl_my_letoh64(U64 n);
#endif
#ifdef PERL_NEED_MY_HTOBE64
PERL_CALLCONV U64	Perl_my_htobe64(U64 n);
#endif
#ifdef PERL_NEED_MY_BETOH64
PERL_CALLCONV U64	Perl_my_betoh64(U64 n);
#endif

#ifdef PERL_NEED_MY_HTOLES
PERL_CALLCONV short	Perl_my_htoles(short n);
#endif
#ifdef PERL_NEED_MY_LETOHS
PERL_CALLCONV short	Perl_my_letohs(short n);
#endif
#ifdef PERL_NEED_MY_HTOBES
PERL_CALLCONV short	Perl_my_htobes(short n);
#endif
#ifdef PERL_NEED_MY_BETOHS
PERL_CALLCONV short	Perl_my_betohs(short n);
#endif
#ifdef PERL_NEED_MY_HTOLEI
PERL_CALLCONV int	Perl_my_htolei(int n);
#endif
#ifdef PERL_NEED_MY_LETOHI
PERL_CALLCONV int	Perl_my_letohi(int n);
#endif
#ifdef PERL_NEED_MY_HTOBEI
PERL_CALLCONV int	Perl_my_htobei(int n);
#endif
#ifdef PERL_NEED_MY_BETOHI
PERL_CALLCONV int	Perl_my_betohi(int n);
#endif
#ifdef PERL_NEED_MY_HTOLEL
PERL_CALLCONV long	Perl_my_htolel(long n);
#endif
#ifdef PERL_NEED_MY_LETOHL
PERL_CALLCONV long	Perl_my_letohl(long n);
#endif
#ifdef PERL_NEED_MY_HTOBEL
PERL_CALLCONV long	Perl_my_htobel(long n);
#endif
#ifdef PERL_NEED_MY_BETOHL
PERL_CALLCONV long	Perl_my_betohl(long n);
#endif

PERL_CALLCONV void	Perl_my_swabn(void* ptr, int n);

#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV OP*	Perl_ck_anoncode(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_bitop(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_concat(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_defined(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_delete(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_die(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_eof(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_eval(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_exec(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_exists(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_exit(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_ftst(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_fun(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_glob(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_grep(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_index(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_join(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_lengthconst(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_lfun(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_listiob(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_match(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_method(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_null(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_open(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_repeat(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_require(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_return(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_rfun(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_rvconst(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_sassign(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_select(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_shift(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_sort(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_spair(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_split(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_subr(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_substr(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_svconst(pTHX_ OP *o)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_ck_trunc(pTHX_ OP *o)
			__attribute__warn_unused_result__;

#endif

PERL_CALLCONV bool	Perl_is_utf8_string_loclen(pTHX_ const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
PERL_CALLCONV SV*	Perl_newSVhek(pTHX_ const HEK *hek)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_stashpv_hvname_match(pTHX_ const COP *cop, const HV *hv)
			__attribute__warn_unused_result__;


PERL_CALLCONV void	Perl_offer_nice_chunk(pTHX_ void *chunk, U32 chunk_size);


#ifdef DEBUG_LEAKING_SCALARS_FORK_DUMP
PERL_CALLCONV void	Perl_dump_sv_child(pTHX_ SV *sv);
#endif

#ifdef PERL_DONT_CREATE_GVSV
PERL_CALLCONV GV*	Perl_gv_SVadd(pTHX_ GV* gv);
#endif
PERL_CALLCONV bool	Perl_ckwarn(pTHX_ U32 w);
PERL_CALLCONV bool	Perl_ckwarn_d(pTHX_ U32 w);

PERL_CALLCONV void	Perl_my_clearenv(pTHX);

a1369 4
/*
 * ex: set ts=8 sts=4 sw=4 noet:
 */
/* ex: set ro: */
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d6 1
a6 1
 *    2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, by Larry Wall and others
d13 1
a13 1
 * pp.sym, intrpvar.h, and perlvars.h.
d22 1
a22 11
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(5)
			__attribute__nonnull__(6)
			__attribute__nonnull__(7)
			__attribute__nonnull__(8)
			__attribute__nonnull__(9);

d25 5
a29 15
PERL_CALLCONV void	perl_construct(PerlInterpreter* interp)
			__attribute__nonnull__(1);

PERL_CALLCONV int	perl_destruct(PerlInterpreter* interp)
			__attribute__nonnull__(1);

PERL_CALLCONV void	perl_free(PerlInterpreter* interp)
			__attribute__nonnull__(1);

PERL_CALLCONV int	perl_run(PerlInterpreter* interp)
			__attribute__nonnull__(1);

PERL_CALLCONV int	perl_parse(PerlInterpreter* interp, XSINIT_t xsinit, int argc, char** argv, char** env)
			__attribute__nonnull__(1);

d34 1
a34 3
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter* interp, UV flags)
			__attribute__nonnull__(1);

d36 1
a36 12
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *interp, UV flags, struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(5)
			__attribute__nonnull__(6)
			__attribute__nonnull__(7)
			__attribute__nonnull__(8)
			__attribute__nonnull__(9)
			__attribute__nonnull__(10)
			__attribute__nonnull__(11);

d55 1
a55 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
d62 1
a62 3
PERL_CALLCONV void	Perl_set_context(void *thx)
			__attribute__nonnull__(1);

d69 2
a70 7
PERL_CALLCONV SV*	Perl_amagic_call(pTHX_ SV* left, SV* right, int method, int dir)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV bool	Perl_Gv_AMupdate(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);

d76 11
a86 15
PERL_CALLCONV I32	Perl_apply(pTHX_ I32 type, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_apply_attrs_string(pTHX_ const char *stashpv, CV *cv, const char *attrstr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_av_clear(pTHX_ AV* ar)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV* ar, I32 key, I32 flags)
			__attribute__nonnull__(pTHX_1);

d88 1
a88 5
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_av_extend(pTHX_ AV* ar, I32 key)
			__attribute__nonnull__(pTHX_1);
d90 1
d92 1
a92 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d95 1
a95 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d97 3
a99 6
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV* ar, I32 fill)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_av_len(pTHX_ const AV* ar)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d102 1
a102 16
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV* ar)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_av_create_and_push(pTHX_ AV **const avp, SV *const val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_av_push(pTHX_ AV* ar, SV* val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_av_reify(pTHX_ AV* ar)
			__attribute__nonnull__(pTHX_1);
d104 3
d108 1
a108 18
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV* ar, I32 key, SV* val)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_av_undef(pTHX_ AV* ar)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV**	Perl_av_create_and_unshift_one(pTHX_ AV **const avp, SV *const val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV* ar, I32 num)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV**	Perl_av_arylen_p(pTHX_ AV* av)
			__attribute__nonnull__(pTHX_1);
d110 3
d114 1
a114 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d127 3
a129 6
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV* av_list)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV bool	Perl_cando(pTHX_ Mode_t mode, bool effective, const Stat_t* statbufp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d148 3
a153 1
PERL_CALLCONV PERL_CONTEXT*	Perl_create_eval_scope(pTHX_ U32 flags);
d156 1
a156 1
			__attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);
d159 1
a159 2
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1);
d164 1
a164 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d167 1
a167 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d170 1
a170 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d173 1
a173 6
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);

PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
d175 1
d177 1
a177 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d180 1
a180 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d183 1
a183 2
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(2);
d186 1
a186 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d189 1
a189 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d192 1
a192 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d195 1
a195 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d198 1
a198 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d201 1
a201 3
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d204 1
a204 2
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
d207 2
a208 13
PERL_CALLCONV void	Perl_cv_ckproto(pTHX_ const CV* cv, const GV* gv, const char* p)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_cv_ckproto_len(pTHX_ const CV* cv, const GV* gv, const char* p, const STRLEN len)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_gv_const_sv(pTHX_ GV* gv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

d212 1
a212 1
PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ const OP* o, CV* cv)
d215 2
a216 6
PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cx)
			__attribute__nonnull__(pTHX_1);

d218 1
a218 3
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp)
			__attribute__nonnull__(pTHX_1);

d220 1
a220 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d230 1
a230 1
PERL_CALLCONV const char*	Perl_get_no_modify(pTHX)
d246 1
a246 5
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
d248 1
d250 1
a250 3
PERL_CALLCONV I32	Perl_debop(pTHX_ const OP* o)
			__attribute__nonnull__(pTHX_1);

d253 3
a255 14
PERL_CALLCONV char*	Perl_delimcpy(pTHX_ char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_6);

PERL_CALLCONV void	Perl_delete_eval_scope(pTHX);
PERL_CALLCONV void	Perl_deprecate(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_deprecate_old(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);

d257 1
a257 1
			__attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);
d260 1
a260 1
PERL_CALLCONV OP*	Perl_die_where(pTHX_ const char* message, STRLEN msglen);
d262 4
a265 15
/* PERL_CALLCONV bool	Perl_do_aexec(pTHX_ SV* really, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV bool	Perl_do_aexec5(pTHX_ SV* really, SV** mark, SV** sp, int fd, int do_report)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int mode)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_do_chop(pTHX_ SV* asv, SV* sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d267 6
a272 26
PERL_CALLCONV bool	Perl_do_eof(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);


#ifdef PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION
/* PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd)
			__attribute__nonnull__(pTHX_1); */

#else
PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd)
			__attribute__nonnull__(pTHX_1);

#endif

#if defined(WIN32) || defined(__SYMBIAN32__)
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd)
			__attribute__nonnull__(pTHX_1);

d275 1
a275 3
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ const char* cmd, int fd, int do_report)
			__attribute__nonnull__(pTHX_1);

d278 7
a284 4
#ifdef PERL_IN_DOIO_C
STATIC void	S_exec_failed(pTHX_ const char *cmd, int fd, int do_report)
			__attribute__nonnull__(pTHX_1);

d286 1
a286 32
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

#endif
PERL_CALLCONV void	Perl_do_join(pTHX_ SV* sv, SV* del, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

d288 5
a292 16
/* PERL_CALLCONV bool	Perl_do_open(pTHX_ GV* gv, const char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

PERL_CALLCONV bool	Perl_do_open9(pTHX_ GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_8);

PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV bool	Perl_do_print(pTHX_ SV* sv, PerlIO* fp)
			__attribute__nonnull__(pTHX_2);

d296 1
a296 3
PERL_CALLCONV I32	Perl_do_chomp(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

d298 2
a299 7
PERL_CALLCONV void	Perl_do_sprintf(pTHX_ SV* sv, I32 len, SV** sarg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV Off_t	Perl_do_sysseek(pTHX_ GV* gv, Off_t pos, int whence)
			__attribute__nonnull__(pTHX_1);

d301 1
a301 19
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_do_trans(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, I32 offset, I32 size)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_do_vecset(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_do_vop(pTHX_ I32 optype, SV* sv, SV* left, SV* right)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

PERL_CALLCONV OP*	Perl_dofile(pTHX_ OP* term, I32 force_builtin)
			__attribute__nonnull__(pTHX_1);
d303 5
d314 1
a314 3
PERL_CALLCONV void	Perl_dump_fds(pTHX_ char* s)
			__attribute__nonnull__(pTHX_1);

d316 3
a318 9
PERL_CALLCONV void	Perl_dump_form(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_op_dump(pTHX_ const OP* arg)
			__attribute__nonnull__(pTHX_1);

d320 3
a322 9
PERL_CALLCONV void	Perl_dump_packsubs(pTHX_ const HV* stash)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_dump_sub(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_fbm_compile(pTHX_ SV* sv, U32 flags)
			__attribute__nonnull__(pTHX_1);

d324 1
a324 7
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV char*	Perl_find_script(pTHX_ const char *scriptname, bool dosearch, const char *const *const search_ext, I32 flags)
			__attribute__nonnull__(pTHX_1);
d326 4
d331 1
a331 3
PERL_CALLCONV OP*	Perl_fold_constants(pTHX_ OP* arg)
			__attribute__nonnull__(pTHX_1);

d333 1
a333 5
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
d335 1
d339 1
a339 4
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char* key, unsigned long *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

a340 3
PERL_CALLCONV void	Perl_get_db_sub(pTHX_ SV **svp, CV *cv)
			__attribute__nonnull__(pTHX_2);

d343 3
a345 9
PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);

d347 1
a347 64
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_gv_check(pTHX_ const HV* stash)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, const GV* gv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

/* PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, const GV* gv, const char* prefix)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV GV*	Perl_gv_fetchfile_flags(pTHX_ const char *const name, const STRLEN len, const U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV GV*	Perl_gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV GV*	Perl_gv_fetchmeth_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level)
			__attribute__nonnull__(pTHX_2);

/* PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name)
			__attribute__nonnull__(pTHX_2); */

PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char* name, I32 add, I32 sv_type)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, const GV* gv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

/* PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, const GV* gv, const char* prefix)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV GP *	Perl_newGP(pTHX_ GV *const gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_gv_name_set(pTHX_ GV* gv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV HV*	Perl_gv_stashpv(pTHX_ const char* name, I32 flags)
			__attribute__nonnull__(pTHX_1);
d349 17
a365 4
PERL_CALLCONV HV*	Perl_gv_stashpvn(pTHX_ const char* name, U32 namelen, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 flags);
d367 5
a371 2
PERL_CALLCONV HV *	Perl_hv_copy_hints_hv(pTHX_ HV *const ohv)
			__attribute__nonnull__(pTHX_1);
d373 2
a374 32
PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV* hv, HE* entry)
			__attribute__nonnull__(pTHX_1);

/* PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV* tb, const char* key, I32 klen, I32 flags)
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV* tb, SV* key, I32 flags, U32 hash)
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, I32 klen)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV* tb, SV* key, U32 hash)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV* tb, const char* key, I32 klen, I32 lval)
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV* tb, SV* key, I32 lval, U32 hash)
			__attribute__nonnull__(pTHX_2); */

PERL_CALLCONV void*	Perl_hv_common(pTHX_ HV* tb, SV* keysv, const char* key, STRLEN klen, int flags, int action, SV* val, U32 hash);
PERL_CALLCONV void*	Perl_hv_common_key_len(pTHX_ HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV* hv, HE* entryK)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV* tb)
			__attribute__nonnull__(pTHX_1);
d376 4
d381 1
a381 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d384 1
a384 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d386 2
a387 3
/* PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV* tb)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d390 1
a390 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d393 1
a393 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d396 1
a396 9
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV* hv, IV newmax)
			__attribute__nonnull__(pTHX_1);

/* PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV* hv, GV* gv, int how)
			__attribute__nonnull__(pTHX_1); */
d398 5
a402 7
PERL_CALLCONV HV *	Perl_refcounted_he_chain_2hv(pTHX_ const struct refcounted_he *c);
PERL_CALLCONV SV *	Perl_refcounted_he_fetch(pTHX_ const struct refcounted_he *chain, SV *keysv, const char *key, STRLEN klen, int flags, U32 hash);
PERL_CALLCONV void	Perl_refcounted_he_free(pTHX_ struct refcounted_he *he);
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new(pTHX_ struct refcounted_he *const parent, SV *const key, SV *const value);
/* PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV* tb, const char* key, I32 klen, SV* val, U32 hash); */
/* PERL_CALLCONV HE*	Perl_hv_store_ent(pTHX_ HV* tb, SV* key, SV* val, U32 hash); */
/* PERL_CALLCONV SV**	Perl_hv_store_flags(pTHX_ HV* tb, const char* key, I32 klen, SV* val, U32 hash, int flags); */
d405 1
a405 3
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d408 1
a408 3
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d410 2
a411 5
PERL_CALLCONV I32	Perl_ibcmp_utf8(pTHX_ const char* a, char **pe1, UV l1, bool u1, const char* b, char **pe2, UV l2, bool u2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_5);

PERL_CALLCONV bool	Perl_ingroup(pTHX_ Gid_t testgid, bool effective)
d414 1
a414 3
PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int argc, char **argv)
			__attribute__nonnull__(pTHX_2);

d417 1
a417 3
PERL_CALLCONV void	Perl_init_tm(pTHX_ struct tm *ptm)
			__attribute__nonnull__(pTHX_1);

d421 1
a421 3
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d424 1
a424 1
			__attribute__nonnull__(pTHX_1);
d429 2
a430 3
PERL_CALLCONV bool	Perl_is_gv_magical(pTHX_ const char *name, STRLEN len, U32 flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d503 4
a506 16
PERL_CALLCONV UV	Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV UV	Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV UV	Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV UV	Perl_to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

d563 5
a567 2
PERL_CALLCONV STRLEN	Perl_is_utf8_char(pTHX_ const U8 *p)
			__attribute__nonnull__(pTHX_1);
d569 2
a570 2
PERL_CALLCONV bool	Perl_is_utf8_string(pTHX_ const U8 *s, STRLEN len)
			__attribute__nonnull__(pTHX_1);
d572 2
a573 2
/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(pTHX_ const U8 *s, STRLEN len, const U8 **p)
			__attribute__nonnull__(pTHX_1); */
d575 2
a576 2
PERL_CALLCONV bool	Perl_is_utf8_string_loclen(pTHX_ const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
			__attribute__nonnull__(pTHX_1);
d578 2
a579 3
PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d581 2
a582 3
PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d584 2
a585 3
PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d587 2
a588 3
PERL_CALLCONV bool	Perl_is_utf8_idcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d590 2
a591 3
PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d593 2
a594 3
PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d596 2
a597 3
PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d599 2
a600 3
PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d602 2
a603 3
PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d605 2
a606 3
PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d608 2
a609 3
PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d611 2
a612 3
PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d614 3
a616 22
PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV bool	Perl_is_utf8_mark(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP* arg)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_keyword(pTHX_ const char* d, I32 len, bool all_keywords)
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
d620 4
a623 12
PERL_CALLCONV void	Perl_lex_start(pTHX_ SV* line, PerlIO *rsfp, bool new_filter);
PERL_CALLCONV void	Perl_op_null(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_op_clear(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_op_refcnt_lock(pTHX);
PERL_CALLCONV void	Perl_op_refcnt_unlock(pTHX);
PERL_CALLCONV OP*	Perl_linklist(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);

d626 3
a628 9
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV OP*	Perl_localize(pTHX_ OP* arg, I32 lexical)
			__attribute__nonnull__(pTHX_1);

d630 1
a630 15
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV UV	Perl_grok_bin(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV UV	Perl_grok_hex(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV int	Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep)
			__attribute__nonnull__(pTHX_1);
d632 3
d636 1
a636 101
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV UV	Perl_grok_oct(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV int	Perl_magic_clearenv(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_clearhint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_clearpack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_clearsig(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_existspack(pTHX_ SV* sv, const MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_freeregexp(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_freeovrld(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_get(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getarylen(pTHX_ SV* sv, const MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getdefelem(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getnkeys(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getpack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getpos(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getsig(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getsubstr(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_gettaint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getuvar(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_getvec(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV U32	Perl_magic_len(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV* sv, MAGIC* mg, SV* key)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV U32	Perl_magic_regdata_cnt(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_regdatum_get(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d638 27
d666 1
a666 110
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_set(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setamagic(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setarylen(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_freearylen_p(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setbm(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setdbline(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setdefelem(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setenv(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setfm(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_sethint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setisa(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setglob(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setmglob(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setnkeys(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setpack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setpos(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setregexp(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setsig(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setsubstr(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_settaint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setuvar(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setvec(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_setutf8(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV U32	Perl_magic_sizepack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV int	Perl_magic_wipepack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_magicname(pTHX_ const char* sym, const char* name, I32 namlen)
			__attribute__nonnull__(pTHX_1);
d668 28
d698 1
a698 8
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

d701 1
a701 51
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_sortsv_flags(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV int	Perl_mg_clear(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV* sv, SV* nsv, const char* key, I32 klen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_mg_localize(pTHX_ SV* sv, SV* nsv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV MAGIC*	Perl_mg_find(pTHX_ const SV* sv, int type)
			__attribute__warn_unused_result__;

PERL_CALLCONV int	Perl_mg_free(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_mg_get(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV U32	Perl_mg_length(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_mg_magical(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_mg_set(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_mg_size(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_mini_mktime(pTHX_ struct tm *pm)
			__attribute__nonnull__(pTHX_1);
d703 15
d720 3
a722 9
PERL_CALLCONV const char*	Perl_moreswitches(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_my(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV NV	Perl_my_atof(pTHX_ const char *s)
			__attribute__nonnull__(pTHX_1);

d724 1
a724 4
PERL_CALLCONV char*	Perl_my_bcopy(const char* from, char* to, I32 len)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

d727 1
a727 3
PERL_CALLCONV char*	Perl_my_bzero(char* loc, I32 len)
			__attribute__nonnull__(1);

d742 1
a742 3
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d746 1
a746 3
PERL_CALLCONV void*	Perl_my_memset(char* loc, I32 ch, I32 len)
			__attribute__nonnull__(1);

d749 3
a751 9
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ const char* cmd, const char* mode)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV PerlIO*	Perl_my_popen_list(pTHX_ char* mode, int n, SV ** args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_my_setenv(pTHX_ const char* nam, const char* val);
d753 1
a753 3
PERL_CALLCONV char *	Perl_my_strftime(pTHX_ const char *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst)
			__attribute__nonnull__(pTHX_1);

d787 1
a787 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d789 1
a789 4
PERL_CALLCONV CV*	Perl_newCONSTSUB(pTHX_ HV* stash, const char* name, SV* sv);
#ifdef PERL_MAD
PERL_CALLCONV OP*	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
#else
a790 1
#endif
d793 1
a793 8
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_5);

PERL_CALLCONV OP*	Perl_newGIVENOP(pTHX_ OP* cond, OP* block, PADOFFSET defsv_off)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d797 1
a797 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d801 1
a801 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d815 1
a815 3
PERL_CALLCONV void	Perl_newPROG(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);

d818 1
a818 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d829 1
a829 8
PERL_CALLCONV CV *	Perl_newXS_flags(pTHX_ const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV CV*	Perl_newXS(pTHX_ const char* name, XSUBADDR_t f, const char* filename)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

d836 1
a836 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d848 1
a848 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
d850 1
a850 1
PERL_CALLCONV GV*	Perl_newGVgen(pTHX_ const char* pack)
d852 1
a852 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d860 1
a860 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
a877 1
#ifdef USE_ITHREADS
d880 1
a880 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
a881 1
#endif
d890 1
a890 1
PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV* sv)
d892 1
a892 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d894 1
a894 1
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV* sv)
d896 1
a896 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d904 1
a904 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d908 1
a908 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
a929 4
PERL_CALLCONV SV*	Perl_newSVhek(pTHX_ const HEK *hek)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d937 1
a937 2
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
d941 1
a941 5
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV* rv, const char* classname)
			__attribute__nonnull__(pTHX_1);
d943 1
a947 4
PERL_CALLCONV SV*	Perl_newSV_type(pTHX_ svtype type)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d952 1
a952 6
PERL_CALLCONV OP*	Perl_newWHENOP(pTHX_ OP* cond, OP* block)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, I32 whileline, OP* expr, OP* block, OP* cont, I32 has_my)
d960 2
a961 34
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *vstr, const char *end, SV *sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *vstr, SV *sv, bool qv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV SV*	Perl_new_version(pTHX_ SV *ver)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_upg_version(pTHX_ SV *ver, bool qv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV bool	Perl_vverify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_vnumify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_vnormal(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_vstringify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_vcmp(pTHX_ SV *lvs, SV *rvs)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV PerlIO*	Perl_nextargv(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);

d963 1
a963 5
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d966 1
a966 2
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1);
d969 1
a969 9
#ifdef PERL_MAD
PERL_CALLCONV OP*	Perl_package(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);

#else
PERL_CALLCONV void	Perl_package(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);

#endif
d971 3
a973 6
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ const char *const name)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ const char* name)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
a974 1
PERL_CALLCONV PADOFFSET	Perl_find_rundefsvoffset(pTHX);
d976 1
a976 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d979 1
a979 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d987 4
a990 4
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV* pattern, IO *io)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d995 1
a995 3
PERL_CALLCONV void*	Perl_reentrant_retry(const char*, ...)
			__attribute__nonnull__(1);

d998 4
a1001 13
PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);

d1003 6
a1008 24
PERL_CALLCONV OP *	Perl_doref(pTHX_ OP *o, I32 type, bool set_op_ref)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char* name, I32 create)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char* name, I32 create)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char* name, I32 create)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV CV*	Perl_get_cvn_flags(pTHX_ const char* name, STRLEN len, I32 flags)
			__attribute__nonnull__(pTHX_1);

d1011 3
a1013 5
PERL_CALLCONV void	Perl_new_collate(pTHX_ const char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ const char* newctype)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_new_numeric(pTHX_ const char* newcoll);
d1017 3
a1019 19
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_pack_cat(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);

PERL_CALLCONV void	Perl_packlist(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);

#ifdef PERL_USES_PL_PIDSTATUS
d1021 4
a1024 13
#endif
PERL_CALLCONV void	Perl_pmflag(pTHX_ U32* pmfl, int ch)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP* pm, OP* expr, bool isreg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV OP*	Perl_pmtrans(pTHX_ OP* o, OP* expr, OP* repl)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

d1027 1
d1029 1
a1029 1
/* PERL_CALLCONV OP*	Perl_ref(pTHX_ OP* o, I32 type); */
d1031 3
a1033 16
PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ const regexp *prog, const struct regnode *n, bool doinit, SV **listsvp, SV **altsvp)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV I32	Perl_pregexec(pTHX_ REGEXP * const prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, U32 nosave)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_6);

d1035 4
a1038 34
PERL_CALLCONV struct regexp*	Perl_reg_temp_copy(pTHX_ struct regexp* r)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP * const r);
PERL_CALLCONV char *	Perl_reg_stringify(pTHX_ MAGIC *mg, STRLEN *lp, U32 *flags, I32 *haseval)
			__attribute__nonnull__(pTHX_1);

#if defined(USE_ITHREADS)
PERL_CALLCONV void*	Perl_regdupe_internal(pTHX_ REGEXP * const r, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

#endif
PERL_CALLCONV REGEXP*	Perl_pregcomp(pTHX_ const SV * const pattern, const U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ const SV * const pattern, const U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP * const rx)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP * const rx, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, void* data, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_6);

d1040 1
a1040 53
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);


PERL_CALLCONV SV*	Perl_reg_named_buff(pTHX_ REGEXP * const rx, SV * const key, SV * const value, const U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_reg_named_buff_iter(pTHX_ REGEXP * const rx, const SV * const lastkey, const U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_reg_named_buff_fetch(pTHX_ REGEXP * const rx, SV * const namesv, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV bool	Perl_reg_named_buff_exists(pTHX_ REGEXP * const rx, SV * const key, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV SV*	Perl_reg_named_buff_firstkey(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_reg_named_buff_nextkey(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_reg_named_buff_scalar(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_reg_named_buff_all(pTHX_ REGEXP * const rx, const U32 flags)
			__attribute__nonnull__(pTHX_1);


PERL_CALLCONV void	Perl_reg_numbered_buff_fetch(pTHX_ REGEXP * const rx, const I32 paren, SV * const sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_reg_numbered_buff_store(pTHX_ REGEXP * const rx, const I32 paren, SV const * const value)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_reg_numbered_buff_length(pTHX_ REGEXP * const rx, const SV * const sv, const I32 paren)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);


PERL_CALLCONV SV*	Perl_reg_qr_package(pTHX_ REGEXP * const rx)
			__attribute__nonnull__(pTHX_1);


PERL_CALLCONV void	Perl_regprop(pTHX_ const regexp *prog, SV* sv, const regnode* o)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_repeatcpy(pTHX_ char* to, const char* from, I32 len, I32 count)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1042 2
d1045 1
a1045 5
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d1049 1
a1049 3
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* t2)
			__attribute__nonnull__(pTHX_3);

d1051 3
a1053 11
PERL_CALLCONV void	Perl_rxres_free(pTHX_ void** rsp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_rxres_restore(pTHX_ void** rsp, REGEXP* prx)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_rxres_save(pTHX_ void** rsp, REGEXP* prx)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1055 1
a1055 4
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ const char* a, const char* b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

a1068 10
PERL_CALLCONV char*	Perl_savesharedpvn(pTHX_ const char *const pv, const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_savesvpv(pTHX_ SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

d1071 1
a1071 4
PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, I32 idx, SV **sptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

d1073 6
a1078 19
PERL_CALLCONV void	Perl_save_aptr(pTHX_ AV** aptr)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV AV*	Perl_save_ary(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_bool(pTHX_ bool* boolp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_clearsv(pTHX_ SV** svp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_delete(pTHX_ HV* hv, char* key, I32 klen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void* p)
			__attribute__nonnull__(pTHX_2);

d1083 8
a1090 49
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_generic_pvref(pTHX_ char** str)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_gp(pTHX_ GV* gv, I32 empty)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV HV*	Perl_save_hash(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_helem(pTHX_ HV* hv, SV *key, SV **sptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_save_hptr(pTHX_ HV** hptr)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_int(pTHX_ int* intp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_item(pTHX_ SV* item)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_iv(pTHX_ IV* iv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_list(pTHX_ SV** sarg, I32 maxsarg)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_long(pTHX_ long* longp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d1092 10
d1104 3
a1106 9
PERL_CALLCONV SV*	Perl_save_scalar(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_save_vptr(pTHX_ void* pptr)
			__attribute__nonnull__(pTHX_1);

d1109 7
a1115 5
PERL_CALLCONV void	Perl_save_sptr(pTHX_ SV** sptr)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_save_svref(pTHX_ SV** sptr)
			__attribute__nonnull__(pTHX_1);
d1117 1
d1122 5
a1126 19
PERL_CALLCONV OP*	Perl_scalarvoid(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV NV	Perl_scan_bin(pTHX_ const char* start, STRLEN len, STRLEN* retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV NV	Perl_scan_hex(pTHX_ const char* start, STRLEN len, STRLEN* retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV char*	Perl_scan_num(pTHX_ const char* s, YYSTYPE *lvalp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV NV	Perl_scan_oct(pTHX_ const char* start, STRLEN len, STRLEN* retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

d1128 1
a1128 5
PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV *bigstr, SV *littlestr, I32 start_shift, I32 end_shift, I32 *oldposp, I32 last)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5);

d1130 1
a1130 3
PERL_CALLCONV I32	Perl_setenv_getix(pTHX_ const char* nam)
			__attribute__nonnull__(pTHX_1);

d1133 1
a1133 7
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* str, I32 len, U32 hash)
			__attribute__nonnull__(pTHX_1);

#if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
PERL_CALLCONV Signal_t	Perl_sighandler(int sig, siginfo_t *info, void *uap);
PERL_CALLCONV Signal_t	Perl_csighandler(int sig, siginfo_t *info, void *uap);
#else
d1136 1
a1136 5
#endif
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV** p, int n)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1138 5
a1142 27
PERL_CALLCONV void	Perl_sub_crush_depth(pTHX_ CV* cv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV bool	Perl_sv_2bool(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV** st, GV** gvp, I32 lref)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

#ifdef PERL_IN_SV_C
STATIC bool	S_glob_2number(pTHX_ GV* const gv)
			__attribute__nonnull__(pTHX_1);

STATIC char*	S_glob_2pv(pTHX_ GV* const gv, STRLEN * const len)
			__attribute__nonnull__(pTHX_1);

#endif
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);

d1144 12
a1155 48
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_sv_2num(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1);

/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1157 3
a1159 10
PERL_CALLCONV void	Perl_sv_add_arena(pTHX_ char* ptr, U32 size, U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV* sv, HV* stash)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1161 1
a1161 21
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV* sv, const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV* sv, const char* ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

/* PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV* sv, const char* ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV* dsv, SV* ssv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV* sv, const char* ptr)
			__attribute__nonnull__(pTHX_1);
d1163 5
d1170 3
a1172 11
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV* sv1, SV* sv2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV* sv1, SV* sv2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1174 1
a1174 4
PERL_CALLCONV char*	Perl_sv_collxfrm(pTHX_ SV* sv, STRLEN* nxp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1176 4
a1179 15
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV* sv, OP** startp, const char* code, PAD** padp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

PERL_CALLCONV int	Perl_getcwd_sv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

d1181 1
a1181 8
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV bool	Perl_sv_does(pTHX_ SV* sv, const char* name)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a1184 3
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

d1186 5
a1190 17
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV* sv, PerlIO* fp, I32 append)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV* sv, STRLEN newlen)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV* bigsv, STRLEN offset, STRLEN len, const char* little, STRLEN littlelen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4);

PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char* name)
			__attribute__nonnull__(pTHX_2);

d1194 2
a1195 6
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV* sv, SV* obj, int how, const char* name, I32 namlen)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV* sv, SV* obj, int how, const MGVTBL *vtbl, const char* name, I32 namlen)
			__attribute__nonnull__(pTHX_1);

d1205 9
a1213 2
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV* sv, I32* offsetp, I32* lenp)
			__attribute__nonnull__(pTHX_2);
d1215 5
a1219 2
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV* sv, I32* offsetp)
			__attribute__nonnull__(pTHX_2);
d1221 16
a1236 2
/* PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1); */
d1238 10
a1247 2
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1);
d1249 25
a1273 2
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1);
d1275 3
a1277 10
PERL_CALLCONV char*	Perl_sv_recode_to_utf8(pTHX_ SV* sv, SV *encoding)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d1279 1
a1279 1
PERL_CALLCONV const char*	Perl_sv_reftype(pTHX_ const SV* sv, int ob)
d1281 1
a1281 1
			__attribute__nonnull__(pTHX_1);
d1283 14
a1296 3
PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV* sv, SV* nsv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1298 7
a1304 3
PERL_CALLCONV void	Perl_sv_report_used(pTHX);
PERL_CALLCONV void	Perl_sv_reset(pTHX_ const char* s, HV* stash)
			__attribute__nonnull__(pTHX_1);
d1306 4
a1309 4
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV* sv, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1311 3
a1313 3
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV* sv, const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1315 15
a1329 2
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV* sv, IV num)
			__attribute__nonnull__(pTHX_1);
d1331 4
a1334 2
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV* sv, IV num)
			__attribute__nonnull__(pTHX_1);
d1336 3
a1338 2
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV* sv, UV num)
			__attribute__nonnull__(pTHX_1);
d1340 3
a1342 291
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV* sv, NV num)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV* rv, const char* classname, IV iv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV* rv, const char* classname, UV uv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV* rv, const char* classname, NV nv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV* rv, const char* classname, void* pv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV* rv, const char* classname, const char* pv, STRLEN n)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV* sv, const char* ptr)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV* sv, const char* ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1);

/* PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV* dsv, SV* ssv)
			__attribute__nonnull__(pTHX_1); */

/* PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV* sv, int type)
			__attribute__nonnull__(pTHX_1);

/* PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV* sv, U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_upgrade(pTHX_ SV* sv, svtype new_type)
			__attribute__nonnull__(pTHX_1);

/* PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV void	Perl_sv_usepvn_flags(pTHX_ SV* sv, char* ptr, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV SV*	Perl_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *swash, const U8 *ptr, bool do_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_taint_env(pTHX);
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char* s)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV UV	Perl_to_utf8_case(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, const char *normal, const char *special)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);

PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV UV	Perl_to_utf8_fold(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

#if defined(UNLINK_ALL_VERSIONS)
PERL_CALLCONV I32	Perl_unlnk(pTHX_ const char* f)
			__attribute__nonnull__(pTHX_1);

#endif
PERL_CALLCONV I32	Perl_unpack_str(pTHX_ const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);

PERL_CALLCONV I32	Perl_unpackstring(pTHX_ const char *pat, const char *patend, const char *s, const char *strend, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

PERL_CALLCONV void	Perl_unsharepvn(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV void	Perl_unshare_hek(pTHX_ HEK* hek);
#ifdef PERL_MAD
PERL_CALLCONV OP *	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg)
			__attribute__nonnull__(pTHX_4);

#else
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg)
			__attribute__nonnull__(pTHX_4);

#endif
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);

PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);

PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ const U8* s, const U8 *e)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV IV	Perl_utf8_distance(pTHX_ const U8 *a, const U8 *b)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV U8*	Perl_utf8_hop(pTHX_ const U8 *s, I32 off)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ const U8 *s, STRLEN *len, bool *is_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ const U8 *s, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV UV	Perl_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV UV	Perl_utf8_to_uvuni(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1);


#ifdef EBCDIC
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1);

#else
/* PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1); */

#endif

PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1);


#ifdef EBCDIC
PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1);

#else
/* PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1); */

#endif

/* PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV U8*	Perl_uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV U8*	Perl_uvuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_pv_uni_display(pTHX_ SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_vivify_ref(pTHX_ SV* sv, U32 to_what)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV U32	Perl_parse_unicode_opts(pTHX_ const char **popt)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV U32	Perl_seed(pTHX);
PERL_CALLCONV UV	Perl_get_hash_seed(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_report_evil_fh(pTHX_ const GV *gv, const IO *io, I32 op);
PERL_CALLCONV void	Perl_report_uninit(pTHX_ SV* uninit_sv);
PERL_CALLCONV void	Perl_warn(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_vwarn(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_watch(pTHX_ char** addr)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_whichsig(pTHX_ const char* sig)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ const char* message, int msglen)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_yyerror(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_yylex(pTHX);
PERL_CALLCONV int	Perl_yyparse(pTHX);
PERL_CALLCONV void	Perl_parser_free(pTHX_ const yy_parser *)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_yywarn(pTHX_ const char* s)
			__attribute__nonnull__(pTHX_1);

#if defined(MYMALLOC)
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ char* s)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level)
			__attribute__nonnull__(pTHX_1);

#endif
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;
a1346 4
PERL_CALLCONV struct perl_vars*	Perl_init_global_struct(pTHX);
PERL_CALLCONV void	Perl_free_global_struct(pTHX_ struct perl_vars *plvarsp)
			__attribute__nonnull__(pTHX_1);

d1350 3
d1354 1
a1354 18
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *sv, const char *ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

/* PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

/* PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dstr, SV *sstr)
			__attribute__nonnull__(pTHX_1); */
d1356 4
d1361 1
a1361 32
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *sv, IV i)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *sv, IV iv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *sv, UV u)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *sv, NV num)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *sv, const char *ptr)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *dstr, SV *sstr)
			__attribute__nonnull__(pTHX_1);

/* PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1); */
d1363 9
d1375 1
a1375 12
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV char*	Perl_pv_escape(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV char*	Perl_pv_pretty(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1377 1
a1377 3
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1379 13
a1391 30
PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, const char *name, HV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, const OP *o)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, const PMOP *pm)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_magic_dump(pTHX_ const MAGIC *mg);
d1393 2
a1394 3
/* PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d1396 2
a1397 3
/* PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d1399 2
a1400 7
/* PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */

/* PERL_CALLCONV char*	Perl_sv_pv(pTHX_ SV *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
d1402 2
a1403 16
/* PERL_CALLCONV char*	Perl_sv_pvutf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */

/* PERL_CALLCONV char*	Perl_sv_pvbyte(pTHX_ SV *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */

/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *sv, bool fail_ok)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
d1405 2
a1406 2
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
d1408 2
a1409 5
/* PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
d1411 6
d1418 2
a1419 7
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

a1421 5
#ifdef PERL_MAD
PERL_CALLCONV OP *	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__noreturn__;

#else
d1425 1
a1425 4
#endif
PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs)
			__attribute__nonnull__(pTHX_1);

d1429 2
a1430 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_4);
d1433 2
a1434 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d1438 1
a1438 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1440 2
a1441 20
PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, const PerlInterpreter* proto_perl)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV HE*	Perl_he_dup(pTHX_ const HE* e, bool shared, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV HEK*	Perl_hek_dup(pTHX_ HEK* e, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ const REGEXP* r, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR* dp)
d1444 1
a1444 23
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ const SV* sstr, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV* dstr, const SV *sstr, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV yy_parser*	Perl_parser_dup(pTHX_ const yy_parser *proto, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

#endif
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX)
d1448 1
a1448 91
PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *tbl, const void *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *tbl, const void *oldsv, void *newsv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *tbl)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *tbl);
PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *tbl);
#if defined(USE_ITHREADS)
#  if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

#  endif
#endif
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_clear(pTHX);
PERL_CALLCONV void	Perl_sys_intern_init(pTHX);
#endif

PERL_CALLCONV const char *	Perl_custom_op_name(pTHX_ const OP* op)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV const char *	Perl_custom_op_desc(pTHX_ const OP* op)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);


PERL_CALLCONV void	Perl_sv_nosharing(pTHX_ SV *sv);
/* PERL_CALLCONV void	Perl_sv_nolocking(pTHX_ SV *sv); */
PERL_CALLCONV bool	Perl_sv_destroyable(pTHX_ SV *sv);
#ifdef NO_MATHOMS
/* PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv); */
#else
PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv);
#endif
PERL_CALLCONV int	Perl_nothreadhook(pTHX);

END_EXTERN_C

#if defined(PERL_IN_DOOP_C) || defined(PERL_DECL_PROT)
STATIC I32	S_do_trans_simple(pTHX_ SV * const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_do_trans_count(pTHX_ SV * const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_do_trans_complex(pTHX_ SV * const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_do_trans_simple_utf8(pTHX_ SV * const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_do_trans_count_utf8(pTHX_ SV * const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_do_trans_complex_utf8(pTHX_ SV * const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

#endif

#if defined(PERL_IN_GV_C) || defined(PERL_DECL_PROT)
STATIC void	S_gv_init_sv(pTHX_ GV *gv, I32 sv_type)
			__attribute__nonnull__(pTHX_1);

STATIC HV*	S_gv_get_super_pkg(pTHX_ const char* name, I32 namelen)
			__attribute__nonnull__(pTHX_1);

STATIC HV*	S_require_tie_mod(pTHX_ GV *gv, const char *varpv, SV* namesv, const char *methpv, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

#endif

PERL_CALLCONV void*	Perl_get_arena(pTHX_ size_t svtype, U32 misc)
d1452 1
a1452 9

#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC void	S_hsplit(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_hfreeentries(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);

STATIC HE*	S_new_he(pTHX)
d1456 1
a1456 1
STATIC HEK*	S_save_hek_flags(const char *str, I32 len, U32 hash, int flags)
d1458 1
a1458 165
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);

STATIC void	S_hv_magic_check(HV *hv, bool *needs_copy, bool *needs_store)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);

STATIC void	S_unshare_hek_or_pvn(pTHX_ const HEK* hek, const char* str, I32 len, U32 hash);
STATIC HEK*	S_share_hek_flags(pTHX_ const char* sv, I32 len, U32 hash, int flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg)
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);

STATIC struct xpvhv_aux*	S_hv_auxinit(HV *hv)
			__attribute__nonnull__(1);

STATIC SV*	S_hv_delete_common(pTHX_ HV* tb, SV* keysv, const char* key, STRLEN klen, int k_flags, I32 d_flags, U32 hash);
STATIC void	S_clear_placeholders(pTHX_ HV* hb, U32 items)
			__attribute__nonnull__(pTHX_1);

STATIC SV *	S_refcounted_he_value(pTHX_ const struct refcounted_he *he)
			__attribute__nonnull__(pTHX_1);

#endif

#if defined(PERL_IN_MG_C) || defined(PERL_DECL_PROT)
STATIC void	S_save_magic(pTHX_ I32 mgs_ix, SV *sv)
			__attribute__nonnull__(pTHX_2);

STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, const char *meth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

STATIC int	S_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, const char *meth, I32 f, int n, SV *val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

STATIC void	S_restore_magic(pTHX_ const void *p)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_unwind_handler_stack(pTHX_ const void *p)
			__attribute__nonnull__(pTHX_1);


#endif

#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV OP*	Perl_ck_anoncode(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_bitop(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_concat(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_defined(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_delete(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_die(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_eof(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_eval(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_exec(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_exists(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_exit(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_ftst(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_fun(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_glob(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_grep(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_index(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_join(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_lengthconst(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_lfun(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_listiob(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_match(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_method(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_null(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_open(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_readline(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_repeat(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_require(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV OP*	Perl_ck_retarget(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1460 3
a1462 3
PERL_CALLCONV OP*	Perl_ck_return(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1464 3
a1466 3
PERL_CALLCONV OP*	Perl_ck_rfun(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1468 3
a1470 3
PERL_CALLCONV OP*	Perl_ck_rvconst(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1472 7
a1478 3
PERL_CALLCONV OP*	Perl_ck_sassign(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1480 3
a1482 3
PERL_CALLCONV OP*	Perl_ck_select(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1484 9
a1492 3
PERL_CALLCONV OP*	Perl_ck_shift(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1494 2
a1495 3
PERL_CALLCONV OP*	Perl_ck_sort(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1497 2
a1498 3
PERL_CALLCONV OP*	Perl_ck_spair(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
a1499 3
PERL_CALLCONV OP*	Perl_ck_split(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1501 4
a1504 3
PERL_CALLCONV OP*	Perl_ck_subr(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1506 1
a1506 3
PERL_CALLCONV OP*	Perl_ck_substr(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1508 4
a1511 3
PERL_CALLCONV OP*	Perl_ck_svconst(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1513 3
a1515 3
PERL_CALLCONV OP*	Perl_ck_trunc(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1517 2
a1518 3
PERL_CALLCONV OP*	Perl_ck_unpack(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1520 2
a1521 3
STATIC bool	S_is_handle_constructor(const OP *o, I32 numargs)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
d1523 1
a1523 1
STATIC I32	S_is_list_assignment(pTHX_ const OP *o)
d1526 2
a1527 7
#  ifdef USE_ITHREADS
STATIC void	S_forget_pmop(pTHX_ PMOP *const o, U32 flags)
			__attribute__nonnull__(pTHX_1);

#  else
STATIC void	S_forget_pmop(pTHX_ PMOP *const o)
			__attribute__nonnull__(pTHX_1);
d1529 2
a1530 3
#  endif
STATIC void	S_find_and_forget_pmops(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d1532 1
a1532 2
STATIC void	S_cop_free(pTHX_ COP *cop)
			__attribute__nonnull__(pTHX_1);
d1534 4
a1537 3
STATIC OP*	S_modkids(pTHX_ OP *o, I32 type);
STATIC OP*	S_scalarboolean(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d1539 5
a1543 1
STATIC OP*	S_newDEFSVOP(pTHX)
d1546 4
a1549 4
STATIC OP*	S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d1551 4
a1554 2
STATIC void	S_simplify_sort(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d1556 2
a1557 2
STATIC const char*	S_gv_ename(pTHX_ GV *gv)
			__attribute__nonnull__(pTHX_1);
d1559 1
a1559 3
STATIC bool	S_scalar_mod_type(const OP *o, I32 type)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
d1561 6
a1566 2
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp)
			__attribute__nonnull__(pTHX_3);
d1568 1
a1568 2
STATIC OP *	S_dup_attrlist(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
d1570 3
a1572 3
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs, bool for_my)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1574 2
a1575 4
STATIC void	S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
d1577 5
a1581 4
STATIC void	S_bad_type(pTHX_ I32 n, const char *t, const char *name, const OP *kid)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d1583 2
a1584 2
STATIC void	S_no_bareword_allowed(pTHX_ const OP *o)
			__attribute__nonnull__(pTHX_1);
d1586 9
d1596 1
a1596 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1599 1
a1599 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1602 1
a1602 15
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC bool	S_looks_like_bool(pTHX_ const OP* o)
			__attribute__nonnull__(pTHX_1);

STATIC OP*	S_newGIVWHENOP(pTHX_ OP* cond, OP *block, I32 enter_opcode, I32 leave_opcode, PADOFFSET entertarg)
			__attribute__nonnull__(pTHX_2);

STATIC OP*	S_ref_array_or_hash(pTHX_ OP* cond);
STATIC void	S_process_special_blocks(pTHX_ const char *const fullname, GV *const gv, CV *const cv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1606 1
a1606 1
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ size_t sz)
d1610 1
a1610 15
PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op)
			__attribute__nonnull__(pTHX_1);

#  if defined(PERL_DEBUG_READONLY_OPS)
PERL_CALLCONV void	Perl_pending_Slabs_to_ro(pTHX);
PERL_CALLCONV OP *	Perl_op_refcnt_inc(pTHX_ OP *o);
PERL_CALLCONV PADOFFSET	Perl_op_refcnt_dec(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);

#    if defined(PERL_IN_OP_C)
STATIC void	S_Slab_to_rw(pTHX_ void *op)
			__attribute__nonnull__(pTHX_1);

#    endif
#  endif
d1614 3
a1616 6
STATIC void	S_find_beginning(pTHX_ SV* linestr_sv, PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC void	S_forbid_setid(pTHX_ const char flag, const int suidscript);
STATIC void	S_incpush(pTHX_ const char *dir, bool addsubdirs, bool addoldvers, bool usesep, bool canrelocate);
d1619 1
d1622 1
a1622 3
STATIC void	S_init_postdump_symbols(pTHX_ int argc, char **argv, char **env)
			__attribute__nonnull__(pTHX_2);

d1628 3
a1630 16
STATIC int	S_open_script(pTHX_ const char *scriptname, bool dosearch, SV *sv, int *suidscript, PerlIO **rsfpp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);

STATIC void	S_usage(pTHX_ const char *name)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_validate_suid(pTHX_ const char *validarg, const char *scriptname, int fdscript, int suidscript, SV* linestr_sv, PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);


d1638 11
a1648 3
STATIC SV *	S_incpush_if_exists(pTHX_ SV *dir)
			__attribute__nonnull__(pTHX_1);

d1653 1
a1653 10
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

#endif
#if defined(PERL_IN_PP_C) || defined(PERL_IN_PP_HOT_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV GV*	Perl_softref2xv(pTHX_ SV *const sv, const char *const what, const U32 type, SV ***spp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
d1658 8
a1665 21
STATIC I32	S_unpack_rec(pTHX_ struct tempsym* symptr, const char *s, const char *strbeg, const char *strend, const char **new_s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

STATIC SV **	S_pack_rec(pTHX_ SV *cat, struct tempsym* symptr, SV **beglist, SV **endlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m)
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_measure_struct(pTHX_ struct tempsym* symptr)
			__attribute__nonnull__(pTHX_1);

STATIC bool	S_next_symbol(pTHX_ struct tempsym* symptr)
			__attribute__nonnull__(pTHX_1);

d1667 1
a1667 32
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC int	S_div128(pTHX_ SV *pnum, bool *done)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC const char *	S_group_end(pTHX_ const char *pat, const char *patend, char ender)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC const char *	S_get_num(pTHX_ const char *ppat, I32 *lenptr)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC bool	S_need_utf8(const char *pat, const char *patend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC char	S_first_symbol(const char *pat, const char *patend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC char *	S_sv_exp_grow(pTHX_ SV *sv, STRLEN needed)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC char *	S_bytes_to_uni(const U8 *start, STRLEN len, char *dest)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
d1669 1
d1676 4
d1681 1
a1681 5
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d1684 1
a1684 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1692 1
a1692 1
STATIC I32	S_dopoptogiven(pTHX_ I32 startingblock)
d1695 2
a1696 3
STATIC I32	S_dopoptolabel(pTHX_ const char *label)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1698 1
a1698 1
STATIC I32	S_dopoptoloop(pTHX_ I32 startingblock)
d1702 1
a1702 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1704 2
a1705 1
STATIC I32	S_dopoptowhen(pTHX_ I32 startingblock)
d1708 2
a1709 2
STATIC void	S_save_lines(pTHX_ AV *array, SV *sv)
			__attribute__nonnull__(pTHX_2);
d1711 2
a1712 4
STATIC bool	S_doeval(pTHX_ int gimme, OP** startop, CV* outside, U32 seq);
STATIC PerlIO *	S_check_type_and_open(pTHX_ const char *name)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1714 2
a1715 25
#ifndef PERL_DISABLE_PMC
STATIC PerlIO *	S_doopen_pm(pTHX_ const char *name, const STRLEN namelen)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

#endif
STATIC bool	S_path_is_absolute(const char *name)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);

STATIC I32	S_run_user_filter(pTHX_ int idx, SV *buf_sv, int maxlen)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

STATIC PMOP*	S_make_matcher(pTHX_ regexp* re)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC bool	S_matcher_matches_sv(pTHX_ PMOP* matcher, SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC void	S_destroy_matcher(pTHX_ PMOP* matcher)
			__attribute__nonnull__(pTHX_1);
a1716 1
STATIC OP*	S_do_smartmatch(pTHX_ HV* seen_this, HV* seen_other);
d1720 4
a1723 4
STATIC void	S_do_oddball(pTHX_ HV *hash, SV **relem, SV **firstrelem)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1726 1
a1726 45
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

#endif

#if defined(PERL_IN_PP_SORT_C) || defined(PERL_DECL_PROT)
STATIC I32	S_sv_ncmp(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_sv_i_ncmp(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_amagic_ncmp(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_amagic_i_ncmp(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_amagic_cmp(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_amagic_cmp_locale(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_sortcv(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_sortcv_xsub(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_sortcv_stacked(pTHX_ SV *a, SV *b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC void	S_qsortsvu(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t compare)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
d1731 2
a1732 5
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

d1735 1
a1735 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a1737 3
STATIC SV *	S_space_join_names_mortal(pTHX_ char *const *array)
			__attribute__nonnull__(pTHX_1);

d1741 29
a1769 109
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t *state, I32 paren, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t *state, U8 op, U32 arg)
			__attribute__nonnull__(pTHX_1);

STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t *state, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t *state, I32 *flagp, I32 first, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC STRLEN	S_reguni(pTHX_ const struct RExC_state_t *state, UV uv, char *s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *state, U32 depth)
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_regcurly(const char *)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);

STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t *state, U8 op)
			__attribute__nonnull__(pTHX_1);

STATIC UV	S_reg_recode(pTHX_ const char value, SV **encp)
			__attribute__nonnull__(pTHX_2);

STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t *state, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC regnode*	S_reg_namedseq(pTHX_ struct RExC_state_t *state, UV *valuep)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_reginsert(pTHX_ struct RExC_state_t *state, U8 op, regnode *opnd, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

STATIC void	S_regtail(pTHX_ struct RExC_state_t *state, regnode *p, const regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

STATIC SV *	S_reg_scan_name(pTHX_ struct RExC_state_t *state, U32 flags)
			__attribute__nonnull__(pTHX_1);

STATIC U32	S_join_exact(pTHX_ struct RExC_state_t *state, regnode *scan, I32 *min, U32 flags, regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

STATIC char *	S_regwhite(struct RExC_state_t *state, char *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC char *	S_nextchar(pTHX_ struct RExC_state_t *state)
			__attribute__nonnull__(pTHX_1);

STATIC bool	S_reg_skipcomment(pTHX_ struct RExC_state_t *state)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_scan_commit(pTHX_ const struct RExC_state_t* state, struct scan_data_t *data, I32 *minlenp, int is_inf)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

STATIC void	S_cl_anything(const struct RExC_state_t* state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC int	S_cl_is_anything(const struct regnode_charclass_class *cl)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);

STATIC void	S_cl_init(const struct RExC_state_t* state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC void	S_cl_init_zero(const struct RExC_state_t* state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC void	S_cl_and(struct regnode_charclass_class *cl, const struct regnode_charclass_class *and_with)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC void	S_cl_or(const struct RExC_state_t* state, struct regnode_charclass_class *cl, const struct regnode_charclass_class *or_with)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);

STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t* state, regnode **scanp, I32 *minlenp, I32 *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U8* recursed, struct regnode_charclass_class *and_withp, U32 flags, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);

STATIC U32	S_add_data(struct RExC_state_t* state, U32 n, const char *s)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);

d1771 1
a1771 9
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_regpposixcc(pTHX_ struct RExC_state_t* state, I32 value)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_checkposixcc(pTHX_ struct RExC_state_t* state)
			__attribute__nonnull__(pTHX_1);
d1773 2
a1774 41
STATIC I32	S_make_trie(pTHX_ struct RExC_state_t* state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);

STATIC void	S_make_trie_failtable(pTHX_ struct RExC_state_t* state, regnode *source, regnode *node, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

#  ifdef DEBUGGING
STATIC void	S_regdump_extflags(pTHX_ const char *lead, const U32 flags);
STATIC const regnode*	S_dumpuntil(pTHX_ const regexp *r, const regnode *start, const regnode *node, const regnode *last, const regnode *plast, SV* sv, I32 indent, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_6);

STATIC void	S_put_byte(pTHX_ SV* sv, int c)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_dump_trie(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

STATIC void	S_dump_trie_interim_list(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

STATIC void	S_dump_trie_interim_table(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

STATIC U8	S_regtail_study(pTHX_ struct RExC_state_t *state, regnode *p, const regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

#  endif
d1778 5
a1782 4
STATIC I32	S_regmatch(pTHX_ regmatch_info *reginfo, regnode *prog)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1784 2
a1785 4
STATIC I32	S_regrepeat(pTHX_ const regexp *prog, const regnode *p, I32 max, int depth)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1787 2
a1788 4
STATIC I32	S_regtry(pTHX_ regmatch_info *reginfo, char **startpos)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1790 2
a1791 4
STATIC bool	S_reginclass(pTHX_ const regexp *prog, const regnode *n, const U8 *p, STRLEN *lenp, bool do_utf8sv_is_utf8)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1794 5
a1798 2
STATIC char*	S_regcppop(pTHX_ const regexp *rex)
			__attribute__nonnull__(pTHX_1);
d1800 2
a1801 4
STATIC U8*	S_reghop3(U8 *pos, I32 off, const U8 *lim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
d1803 2
a1804 6
#ifdef XXX_dmq
STATIC U8*	S_reghop4(U8 *pos, I32 off, const U8 *llim, const U8 *rlim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
d1806 2
a1807 5
#endif
STATIC U8*	S_reghopmaybe3(U8 *pos, I32 off, const U8 *lim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
d1809 2
a1810 6
STATIC char*	S_find_byclass(pTHX_ regexp * prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d1812 2
a1813 29
STATIC void	S_swap_match_buff(pTHX_ regexp * prog)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_to_utf8_substr(pTHX_ regexp * prog)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_to_byte_substr(pTHX_ regexp * prog)
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_reg_check_named_buff_matched(pTHX_ const regexp *rex, const regnode *prog)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

#  ifdef DEBUGGING
STATIC void	S_dump_exec_pos(pTHX_ const char *locinput, const regnode *scan, const char *loc_regeol, const char *loc_bostr, const char *loc_reg_starttry, const bool do_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);

STATIC void	S_debug_start_match(pTHX_ const regexp *prog, const bool do_utf8, const char *start, const char *end, const char *blurb)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);

#  endif
d1817 2
a1818 10
STATIC CV*	S_deb_curcv(pTHX_ const I32 ix);
STATIC void	S_debprof(pTHX_ const OP *o)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_sequence(pTHX_ const OP *o);
STATIC void	S_sequence_tail(pTHX_ const OP *o);
STATIC UV	S_sequence_num(pTHX_ const OP *o);
STATIC SV*	S_pm_description(pTHX_ const PMOP *pm)
			__attribute__nonnull__(pTHX_1);

d1822 1
a1822 17
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr)
			__attribute__nonnull__(pTHX_1);

#endif

#if defined(PERL_IN_GV_C) || defined(PERL_IN_SV_C) || defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *tsv, SV *sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

#endif

#if defined(PERL_IN_HV_C) || defined(PERL_IN_MG_C) || defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV int	Perl_sv_kill_backrefs(pTHX_ SV *sv, AV *av)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1827 1
a1827 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(5);
d1829 2
a1830 5
STATIC void	S_sv_unglob(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_not_a_number(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
d1832 1
a1832 8
STATIC I32	S_visit(pTHX_ SVFUNC_t f, U32 flags, U32 mask)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_sv_del_backref(pTHX_ SV *target, SV *ref)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC SV *	S_varname(pTHX_ GV *gv, const char gvtype, PADOFFSET targ, SV *keyname, I32 aindex, int subscript_type)
d1835 29
d1865 1
a1865 3
STATIC void	S_del_sv(pTHX_ SV *p)
			__attribute__nonnull__(pTHX_1);

d1868 1
a1868 3
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *sv, I32 numtype)
			__attribute__nonnull__(pTHX_1);

d1871 1
a1871 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1874 2
a1875 52
STATIC STRLEN	S_sv_pos_u2b_forwards(const U8 *const start, const U8 *const send, STRLEN uoffset)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC STRLEN	S_sv_pos_u2b_midway(const U8 *const start, const U8 *send, STRLEN uoffset, STRLEN uend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

STATIC STRLEN	S_sv_pos_u2b_cached(pTHX_ SV *sv, MAGIC **mgp, const U8 *const start, const U8 *const send, STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);

STATIC void	S_utf8_mg_pos_cache_update(pTHX_ SV *sv, MAGIC **mgp, STRLEN byte, STRLEN utf8, STRLEN blen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC STRLEN	S_sv_pos_b2u_midway(pTHX_ const U8 *s, const U8 *const target, const U8 *end, STRLEN endu)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

STATIC char *	S_F0convert(NV nv, char *endbuf, STRLEN *len)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);

#  if defined(PERL_OLD_COPY_ON_WRITE)
STATIC void	S_sv_release_COW(pTHX_ SV *sv, const char *pvx, SV *after)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

#  endif
STATIC SV *	S_more_sv(pTHX);
STATIC void *	S_more_bodies(pTHX_ svtype sv_type);
STATIC bool	S_sv_2iuv_common(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_glob_assign_glob(pTHX_ SV *dstr, SV *sstr, const int dtype)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC void	S_glob_assign_ref(pTHX_ SV *dstr, SV *sstr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

STATIC PTR_TBL_ENT_t *	S_ptr_table_find(PTR_TBL_t *tbl, const void *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

d1881 4
a1884 10
STATIC char*	S_force_version(pTHX_ char *start, int guessing)
			__attribute__nonnull__(pTHX_1);

STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack, int allow_tick)
			__attribute__nonnull__(pTHX_1);

STATIC SV*	S_tokeq(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_readpipe_override(pTHX);
d1886 1
a1886 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1889 1
a1889 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1892 1
a1892 7
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC char*	S_scan_ident(pTHX_ char *s, const char *send, char *dest, STRLEN destlen, I32 ck_uni)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d1894 1
d1896 1
a1896 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1899 1
a1899 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1902 1
a1902 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1905 1
a1905 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1908 1
a1908 7
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5);
d1910 1
a1910 1
STATIC void	S_update_debugger_info(pTHX_ SV *orig_sv, const char *buf, STRLEN len);
d1912 1
a1912 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d1915 1
a1915 25
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC void	S_checkcomma(pTHX_ const char *s, const char *name, const char *what)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

STATIC bool	S_feature_is_enabled(pTHX_ const char* name, STRLEN namelen)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_force_ident(pTHX_ const char *s, int kind)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_incline(pTHX_ const char *s)
			__attribute__nonnull__(pTHX_1);

STATIC int	S_intuit_method(pTHX_ char *s, GV *gv, CV *cv)
			__attribute__nonnull__(pTHX_1);

STATIC int	S_intuit_more(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);

STATIC I32	S_lop(pTHX_ I32 f, int x, char *s)
			__attribute__nonnull__(pTHX_3);
d1917 6
d1926 2
a1927 3
STATIC void	S_no_op(pTHX_ const char *what, char *s)
			__attribute__nonnull__(pTHX_1);

d1938 1
a1938 3
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d1940 2
a1941 11
STATIC HV *	S_find_in_my_stash(pTHX_ const char *pkgname, STRLEN len)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

STATIC char *	S_tokenize_use(pTHX_ int is_use, char *s)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);

STATIC SV*	S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, STRLEN keylen, SV *sv, SV *pv, const char *type, STRLEN typelen)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
d1943 4
d1948 2
a1951 10
STATIC void	S_strip_return(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);

#  endif
#  if defined(DEBUGGING)
STATIC int	S_tokereport(pTHX_ I32 rv);
STATIC void	S_printbuf(pTHX_ const char* fmt, const char* s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d1956 1
a1956 3
STATIC bool	S_isa_lookup(pTHX_ HV *stash, const char * const name, const HV * const name_stash)
			__attribute__nonnull__(pTHX_2);

d1960 1
a1960 5
#if defined(USE_LOCALE_NUMERIC) || defined(USE_LOCALE_COLLATE)
STATIC char*	S_stdize_locale(pTHX_ char* locs)
			__attribute__nonnull__(pTHX_1);

#endif
d1964 1
a1964 3
STATIC const COP*	S_closest_cop(pTHX_ const COP *cop, const OP *o)
			__attribute__nonnull__(pTHX_1);

d1966 2
a1967 5
STATIC const char *	S_vdie_croak_common(pTHX_ const char *pat, va_list *args, STRLEN *msglen, I32* utf8);
STATIC bool	S_vdie_common(pTHX_ const char *message, STRLEN msglen, I32 utf8, bool warn);
STATIC char *	S_write_no_mem(pTHX)
			__attribute__noreturn__;

d1975 1
a1975 14
STATIC STRLEN	S_is_utf8_char_slow(const U8 *s, const STRLEN len)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);

STATIC bool	S_is_utf8_common(pTHX_ const U8 *const p, SV **swash, const char * const swashname)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);

STATIC SV*	S_swash_get(pTHX_ SV* swash, UV start, UV span)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

d1980 8
a1987 24
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV* dsv, SV* ssv, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV* sv, const char* ptr, STRLEN len, I32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV* dsv, SV* ssv, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *sv, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV* dsv, SV* ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV char*	Perl_my_atof2(pTHX_ const char *s, NV* value)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

a1988 9
PERL_CALLCONV int	Perl_my_dirfd(pTHX_ DIR* dir);
#ifdef PERL_OLD_COPY_ON_WRITE
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dsv, SV* ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

#endif

PERL_CALLCONV const char *	Perl_PerlIO_context_layers(pTHX_ const char *mode);
d1999 1
a1999 3
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, int cnt)
			__attribute__nonnull__(pTHX_2);

d2001 3
a2003 9
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *buf, Size_t count)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *buf, Size_t count)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *buf, Size_t count)
			__attribute__nonnull__(pTHX_2);

d2029 1
a2029 3
STATIC void	S_deb_stack_n(pTHX_ SV** stack_base, I32 stack_min, I32 stack_max, I32 mark_min, I32 mark_max)
			__attribute__nonnull__(pTHX_1);

d2036 4
a2039 13
PERL_CALLCONV void	Perl_pad_undef(pTHX_ CV* cv)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV PADOFFSET	Perl_pad_add_name(pTHX_ const char *name, HV* typestash, HV* ourstash, bool clone, bool state)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV PADOFFSET	Perl_pad_add_anon(pTHX_ SV* sv, OPCODE op_type)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_pad_check_dup(pTHX_ const char* name, bool is_our, const HV* ourstash)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);

d2041 1
a2041 3
PERL_CALLCONV void	Perl_pad_setsv(pTHX_ PADOFFSET po, SV* sv)
			__attribute__nonnull__(pTHX_2);

d2045 2
a2046 11
PERL_CALLCONV void	Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full)
			__attribute__nonnull__(pTHX_2);

PERL_CALLCONV void	Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);


PERL_CALLCONV void	Perl_pad_push(pTHX_ PADLIST *padlist, int depth)
			__attribute__nonnull__(pTHX_1);
d2048 1
d2054 1
a2054 6
STATIC PADOFFSET	S_pad_findlex(pTHX_ const char *name, const CV* cv, U32 seq, int warn, SV** out_capture, SV** out_name_sv, int *out_flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_6)
			__attribute__nonnull__(pTHX_7);

d2056 1
a2056 4
STATIC void	S_cv_dump(pTHX_ const CV *cv, const char *title)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);

d2058 1
d2065 2
a2066 3
PERL_CALLCONV int	Perl_get_debug_opts(pTHX_ const char **s, bool givehelp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
a2068 3
PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV* sv, U32 mask, U32 val);
PERL_CALLCONV void	Perl_hv_assert(pTHX_ HV* tb)
			__attribute__nonnull__(pTHX_1);
d2070 1
d2072 4
d2077 1
a2077 2
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2079 1
a2079 23
PERL_CALLCONV I32*	Perl_hv_riter_p(pTHX_ HV* hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV HE**	Perl_hv_eiter_p(pTHX_ HV* hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_hv_riter_set(pTHX_ HV* hv, I32 riter)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_hv_eiter_set(pTHX_ HV* hv, HE* eiter)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_hv_name_set(pTHX_ HV* hv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV AV**	Perl_hv_backreferences_p(pTHX_ HV* hv)
			__attribute__nonnull__(pTHX_1);

#if defined(PERL_IN_DUMP_C) || defined(PERL_IN_HV_C) || defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
PERL_CALLCONV void	Perl_hv_kill_backrefs(pTHX_ HV* hv)
			__attribute__nonnull__(pTHX_1);
d2081 2
a2083 2
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV* hb)
			__attribute__nonnull__(pTHX_1);
d2085 5
a2089 23
PERL_CALLCONV I32*	Perl_hv_placeholders_p(pTHX_ HV* hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV I32	Perl_hv_placeholders_get(pTHX_ HV* hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_hv_placeholders_set(pTHX_ HV* hv, I32 ph)
			__attribute__nonnull__(pTHX_1);


PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV* hv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);


#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC SV *	S_find_hash_subscript(pTHX_ HV *hv, SV *val)
			__attribute__nonnull__(pTHX_2);

STATIC I32	S_find_array_subscript(pTHX_ AV *av, SV *val)
			__attribute__nonnull__(pTHX_2);
a2090 2
STATIC SV*	S_find_uninit_var(pTHX_ OP* obase, SV* uninit_sv, bool top);
#endif
d2166 1
a2166 2
PERL_CALLCONV void	Perl_my_swabn(void* ptr, int n)
			__attribute__nonnull__(1);
d2168 3
d2172 2
a2173 2
PERL_CALLCONV GV*	Perl_gv_fetchpvn_flags(pTHX_ const char* name, STRLEN len, I32 flags, I32 sv_type)
			__attribute__nonnull__(pTHX_1);
d2175 2
a2176 2
PERL_CALLCONV GV*	Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, I32 sv_type)
			__attribute__nonnull__(pTHX_1);
d2178 2
a2179 3
PERL_CALLCONV bool	Perl_is_gv_magical_sv(pTHX_ SV *name, U32 flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
d2181 2
d2184 2
a2185 4
PERL_CALLCONV bool	Perl_stashpv_hvname_match(pTHX_ const COP *cop, const HV *hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2187 2
d2190 2
a2191 3
#ifdef DEBUG_LEAKING_SCALARS_FORK_DUMP
PERL_CALLCONV void	Perl_dump_sv_child(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
d2193 2
a2194 1
#endif
d2196 2
a2197 3
#ifdef PERL_DONT_CREATE_GVSV
PERL_CALLCONV GV*	Perl_gv_SVadd(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
d2199 2
a2200 7
#endif
PERL_CALLCONV bool	Perl_ckwarn(pTHX_ U32 w);
PERL_CALLCONV bool	Perl_ckwarn_d(pTHX_ U32 w);
PERL_CALLCONV STRLEN *	Perl_new_warnings_bitfield(pTHX_ STRLEN *buffer, const char *const bits, STRLEN size)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
d2202 2
d2205 2
a2206 2
PERL_CALLCONV void	Perl_offer_nice_chunk(pTHX_ void *chunk, U32 chunk_size)
			__attribute__nonnull__(pTHX_1);
d2208 2
d2211 2
a2212 4
#ifndef SPRINTF_RETURNS_STRLEN
PERL_CALLCONV int	Perl_my_sprintf(char *buffer, const char *pat, ...)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d2214 2
a2215 1
#endif
d2217 2
a2218 4
PERL_CALLCONV int	Perl_my_snprintf(char *buffer, const Size_t len, const char *format, ...)
			__attribute__format__(__printf__,3,4)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
d2220 2
a2221 3
PERL_CALLCONV int	Perl_my_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
d2223 2
d2226 2
a2227 1
PERL_CALLCONV void	Perl_my_clearenv(pTHX);
d2229 2
a2230 4
#ifdef PERL_IMPLICIT_CONTEXT
#ifdef PERL_GLOBAL_STRUCT_PRIVATE
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ const char *my_cxt_key, size_t size)
			__attribute__nonnull__(pTHX_1);
d2232 2
a2233 2
PERL_CALLCONV int	Perl_my_cxt_index(pTHX_ const char *my_cxt_key)
			__attribute__nonnull__(pTHX_1);
d2235 2
a2236 3
#else
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ int *index, size_t size)
			__attribute__nonnull__(pTHX_1);
d2238 2
a2239 2
#endif
#endif
d2241 2
a2242 3
#ifndef HAS_STRLCAT
PERL_CALLCONV Size_t	Perl_my_strlcat(char *dst, const char *src, Size_t size);
#endif
d2244 2
a2245 3
#ifndef HAS_STRLCPY
PERL_CALLCONV Size_t	Perl_my_strlcpy(char *dst, const char *src, Size_t size);
#endif
d2247 2
a2248 3
#ifdef PERL_MAD
PERL_CALLCONV void	Perl_pad_peg(const char* s)
			__attribute__nonnull__(1);
d2250 2
a2251 5
#if defined(PERL_IN_DUMP_C) || defined(PERL_DECL_PROT)
STATIC void	S_xmldump_attr(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d2253 2
a2254 5
#endif
PERL_CALLCONV void	Perl_xmldump_indent(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d2256 2
a2257 3
PERL_CALLCONV void	Perl_xmldump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d2259 2
a2260 3
PERL_CALLCONV void	Perl_xmldump_all(pTHX);
PERL_CALLCONV void	Perl_xmldump_packsubs(pTHX_ const HV* stash)
			__attribute__nonnull__(pTHX_1);
d2262 2
a2263 2
PERL_CALLCONV void	Perl_xmldump_sub(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
d2265 2
a2266 2
PERL_CALLCONV void	Perl_xmldump_form(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
d2268 2
a2269 4
PERL_CALLCONV void	Perl_xmldump_eval(pTHX);
PERL_CALLCONV char*	Perl_sv_catxmlsv(pTHX_ SV *dsv, SV *ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2271 2
a2272 3
PERL_CALLCONV char*	Perl_sv_catxmlpvn(pTHX_ SV *dsv, const char *pv, STRLEN len, int utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2274 2
a2275 2
PERL_CALLCONV char*	Perl_sv_xmlpeek(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
d2277 2
a2278 2
PERL_CALLCONV void	Perl_do_pmop_xmldump(pTHX_ I32 level, PerlIO *file, const PMOP *pm)
			__attribute__nonnull__(pTHX_2);
d2280 2
a2281 3
PERL_CALLCONV void	Perl_pmop_xmldump(pTHX_ const PMOP* pm);
PERL_CALLCONV void	Perl_do_op_xmldump(pTHX_ I32 level, PerlIO *file, const OP *o)
			__attribute__nonnull__(pTHX_2);
d2283 2
a2284 18
PERL_CALLCONV void	Perl_op_xmldump(pTHX_ const OP* arg)
			__attribute__nonnull__(pTHX_1);


PERL_CALLCONV TOKEN*	Perl_newTOKEN(pTHX_ I32 optype, YYSTYPE lval, MADPROP* madprop);
PERL_CALLCONV void	Perl_token_free(pTHX_ TOKEN* arg)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_token_getmad(pTHX_ TOKEN* arg, OP* o, char slot)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_op_getmad_weak(pTHX_ OP* from, OP* o, char slot);
PERL_CALLCONV void	Perl_op_getmad(pTHX_ OP* from, OP* o, char slot);
PERL_CALLCONV void	Perl_prepend_madprops(pTHX_ MADPROP* mp, OP* o, char slot);
PERL_CALLCONV void	Perl_append_madprops(pTHX_ MADPROP* tm, OP* o, char slot);
PERL_CALLCONV void	Perl_addmad(pTHX_ MADPROP* tm, MADPROP** root, char slot);
PERL_CALLCONV MADPROP*	Perl_newMADsv(pTHX_ char key, SV* sv)
			__attribute__nonnull__(pTHX_2);
a2285 18
PERL_CALLCONV MADPROP*	Perl_newMADPROP(pTHX_ char key, char type, const void* val, I32 vlen);
PERL_CALLCONV void	Perl_mad_free(pTHX_ MADPROP* mp);

#  if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
STATIC char*	S_skipspace0(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);

STATIC char*	S_skipspace1(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);

STATIC char*	S_skipspace2(pTHX_ char *s, SV **sv)
			__attribute__nonnull__(pTHX_1);

STATIC void	S_start_force(pTHX_ int where);
STATIC void	S_curmad(pTHX_ char slot, SV *sv);
#  endif
PERL_CALLCONV int	Perl_madlex(pTHX);
PERL_CALLCONV int	Perl_madparse(pTHX);
a2286 3
#if !defined(HAS_SIGNBIT)
PERL_CALLCONV int	Perl_signbit(NV f)
			__attribute__pure__;
d2288 4
a2291 1
#endif
d2293 2
a2294 3
PERL_CALLCONV void	Perl_emulate_cop_io(pTHX_ const COP *const c, SV *const sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a2295 1
PERL_CALLCONV REGEXP *	Perl_get_re_arg(pTHX_ SV *sv);
d2297 1
a2297 2
PERL_CALLCONV struct mro_meta*	Perl_mro_meta_init(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
a2298 4
#if defined(USE_ITHREADS)
PERL_CALLCONV struct mro_meta*	Perl_mro_meta_dup(pTHX_ struct mro_meta* smeta, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d2300 2
a2302 9
PERL_CALLCONV AV*	Perl_mro_get_linear_isa(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);

#if defined(PERL_IN_MRO_C) || defined(PERL_DECL_PROT)
STATIC AV*	S_mro_get_linear_isa_c3(pTHX_ HV* stash, I32 level)
			__attribute__nonnull__(pTHX_1);

STATIC AV*	S_mro_get_linear_isa_dfs(pTHX_ HV* stash, I32 level)
			__attribute__nonnull__(pTHX_1);
d2304 2
d2307 2
a2308 17
PERL_CALLCONV void	Perl_mro_isa_changed_in(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_mro_method_changed_in(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);

PERL_CALLCONV void	Perl_boot_core_mro(pTHX);
PERL_CALLCONV void	Perl_sys_init(int* argc, char*** argv)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);

PERL_CALLCONV void	Perl_sys_init3(int* argc, char*** argv, char*** env)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);

PERL_CALLCONV void	Perl_sys_term(void);
d2310 1
@


1.1.1.12
log
@import perl 5.10.1
@
text
@d6 1
a6 1
 *    2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, by Larry Wall and others
d22 1
a22 1
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem *ipM, struct IPerlMem *ipMS, struct IPerlMem *ipMP, struct IPerlEnv *ipE, struct IPerlStdIO *ipStd, struct IPerlLIO *ipLIO, struct IPerlDir *ipD, struct IPerlSock *ipS, struct IPerlProc *ipP)
a31 2
#define PERL_ARGS_ASSERT_PERL_ALLOC_USING	\
	assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)
d35 1
a35 1
PERL_CALLCONV void	perl_construct(PerlInterpreter *my_perl)
a36 2
#define PERL_ARGS_ASSERT_PERL_CONSTRUCT	\
	assert(my_perl)
d38 1
a38 1
PERL_CALLCONV int	perl_destruct(PerlInterpreter *my_perl)
a39 2
#define PERL_ARGS_ASSERT_PERL_DESTRUCT	\
	assert(my_perl)
d41 1
a41 1
PERL_CALLCONV void	perl_free(PerlInterpreter *my_perl)
a42 2
#define PERL_ARGS_ASSERT_PERL_FREE	\
	assert(my_perl)
d44 1
a44 1
PERL_CALLCONV int	perl_run(PerlInterpreter *my_perl)
a45 2
#define PERL_ARGS_ASSERT_PERL_RUN	\
	assert(my_perl)
d47 1
a47 1
PERL_CALLCONV int	perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env)
a48 2
#define PERL_ARGS_ASSERT_PERL_PARSE	\
	assert(my_perl)
d54 1
a54 1
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter *proto_perl, UV flags)
a55 2
#define PERL_ARGS_ASSERT_PERL_CLONE	\
	assert(proto_perl)
d58 1
a58 1
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *proto_perl, UV flags, struct IPerlMem* ipM, struct IPerlMem* ipMS, struct IPerlMem* ipMP, struct IPerlEnv* ipE, struct IPerlStdIO* ipStd, struct IPerlLIO* ipLIO, struct IPerlDir* ipD, struct IPerlSock* ipS, struct IPerlProc* ipP)
a68 2
#define PERL_ARGS_ASSERT_PERL_CLONE_USING	\
	assert(proto_perl); assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)
a89 5
#define PERL_ARGS_ASSERT_MALLOCED_SIZE	\
	assert(p)

PERL_CALLCONV MEM_SIZE	Perl_malloc_good_size(size_t nbytes)
			__attribute__warn_unused_result__;
d96 1
a96 1
PERL_CALLCONV void	Perl_set_context(void *t)
a97 2
#define PERL_ARGS_ASSERT_SET_CONTEXT	\
	assert(t)
a107 2
#define PERL_ARGS_ASSERT_AMAGIC_CALL	\
	assert(left); assert(right)
a110 2
#define PERL_ARGS_ASSERT_GV_AMUPDATE	\
	assert(stash)
a119 2
#define PERL_ARGS_ASSERT_APPLY	\
	assert(mark); assert(sp)
a124 2
#define PERL_ARGS_ASSERT_APPLY_ATTRS_STRING	\
	assert(stashpv); assert(cv); assert(attrstr)
d126 1
a126 1
PERL_CALLCONV void	Perl_av_clear(pTHX_ AV *av)
a127 2
#define PERL_ARGS_ASSERT_AV_CLEAR	\
	assert(av)
d129 1
a129 1
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV *av, I32 key, I32 flags)
a130 2
#define PERL_ARGS_ASSERT_AV_DELETE	\
	assert(av)
d132 1
a132 1
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV *av, I32 key)
a134 2
#define PERL_ARGS_ASSERT_AV_EXISTS	\
	assert(av)
d136 1
a136 1
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV *av, I32 key)
a137 2
#define PERL_ARGS_ASSERT_AV_EXTEND	\
	assert(av)
d139 1
a139 1
PERL_CALLCONV AV*	Perl_av_fake(pTHX_ I32 size, SV **strp)
a141 2
#define PERL_ARGS_ASSERT_AV_FAKE	\
	assert(strp)
d143 1
a143 1
PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV *av, I32 key, I32 lval)
a145 2
#define PERL_ARGS_ASSERT_AV_FETCH	\
	assert(av)
d147 1
a147 1
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV *av, I32 fill)
a148 2
#define PERL_ARGS_ASSERT_AV_FILL	\
	assert(av)
d150 1
a150 1
PERL_CALLCONV I32	Perl_av_len(pTHX_ const AV *av)
a152 2
#define PERL_ARGS_ASSERT_AV_LEN	\
	assert(av)
d154 1
a154 1
PERL_CALLCONV AV*	Perl_av_make(pTHX_ I32 size, SV **strp)
a156 2
#define PERL_ARGS_ASSERT_AV_MAKE	\
	assert(strp)
d158 1
a158 1
PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV *av)
a159 2
#define PERL_ARGS_ASSERT_AV_POP	\
	assert(av)
a163 2
#define PERL_ARGS_ASSERT_AV_CREATE_AND_PUSH	\
	assert(avp); assert(val)
d165 1
a165 1
PERL_CALLCONV void	Perl_av_push(pTHX_ AV *av, SV *val)
a167 2
#define PERL_ARGS_ASSERT_AV_PUSH	\
	assert(av); assert(val)
d169 1
a169 1
PERL_CALLCONV void	Perl_av_reify(pTHX_ AV *av)
a170 2
#define PERL_ARGS_ASSERT_AV_REIFY	\
	assert(av)
d172 1
a172 1
PERL_CALLCONV SV*	Perl_av_shift(pTHX_ AV *av)
a174 2
#define PERL_ARGS_ASSERT_AV_SHIFT	\
	assert(av)
d176 1
a176 1
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV *av, I32 key, SV *val)
a177 2
#define PERL_ARGS_ASSERT_AV_STORE	\
	assert(av)
d179 1
a179 1
PERL_CALLCONV void	Perl_av_undef(pTHX_ AV *av)
a180 2
#define PERL_ARGS_ASSERT_AV_UNDEF	\
	assert(av)
a184 2
#define PERL_ARGS_ASSERT_AV_CREATE_AND_UNSHIFT_ONE	\
	assert(avp); assert(val)
d186 1
a186 1
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV *av, I32 num)
a187 2
#define PERL_ARGS_ASSERT_AV_UNSHIFT	\
	assert(av)
d189 1
a189 1
PERL_CALLCONV SV**	Perl_av_arylen_p(pTHX_ AV *av)
a190 2
#define PERL_ARGS_ASSERT_AV_ARYLEN_P	\
	assert(av)
d192 1
a192 1
PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP *left, OP *right)
a195 2
#define PERL_ARGS_ASSERT_BIND_MATCH	\
	assert(left); assert(right)
d208 1
a208 1
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV *paramList)
a209 2
#define PERL_ARGS_ASSERT_CALL_LIST	\
	assert(paramList)
a213 2
#define PERL_ARGS_ASSERT_CANDO	\
	assert(statbufp)
a240 3
			__attribute__noreturn__;

PERL_CALLCONV void	Perl_croak_xs_usage(pTHX_ const CV *const cv, const char *const params)
d242 1
a242 5
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE	\
	assert(cv); assert(params)

d247 2
a248 1
			__attribute__format__null_ok__(__printf__,1,2);
d251 2
a252 1
			__attribute__format__null_ok__(__printf__,1,2);
a256 2
#define PERL_ARGS_ASSERT_DEB_NOCONTEXT	\
	assert(pat)
a260 2
#define PERL_ARGS_ASSERT_FORM_NOCONTEXT	\
	assert(pat)
d263 2
a264 3
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_LOAD_MODULE_NOCONTEXT	\
	assert(name)
a268 2
#define PERL_ARGS_ASSERT_MESS_NOCONTEXT	\
	assert(pat)
a272 2
#define PERL_ARGS_ASSERT_WARN_NOCONTEXT	\
	assert(pat)
a276 2
#define PERL_ARGS_ASSERT_WARNER_NOCONTEXT	\
	assert(pat)
a280 2
#define PERL_ARGS_ASSERT_NEWSVPVF_NOCONTEXT	\
	assert(pat)
a285 2
#define PERL_ARGS_ASSERT_SV_CATPVF_NOCONTEXT	\
	assert(sv); assert(pat)
a290 2
#define PERL_ARGS_ASSERT_SV_SETPVF_NOCONTEXT	\
	assert(sv); assert(pat)
a295 2
#define PERL_ARGS_ASSERT_SV_CATPVF_MG_NOCONTEXT	\
	assert(sv); assert(pat)
a300 2
#define PERL_ARGS_ASSERT_SV_SETPVF_MG_NOCONTEXT	\
	assert(sv); assert(pat)
d302 1
a302 1
PERL_CALLCONV int	Perl_fprintf_nocontext(PerlIO *stream, const char *format, ...)
a305 2
#define PERL_ARGS_ASSERT_FPRINTF_NOCONTEXT	\
	assert(stream); assert(format)
d307 1
a307 1
PERL_CALLCONV int	Perl_printf_nocontext(const char *format, ...)
a309 2
#define PERL_ARGS_ASSERT_PRINTF_NOCONTEXT	\
	assert(format)
a313 2
#define PERL_ARGS_ASSERT_CV_CKPROTO	\
	assert(cv)
a316 2
#define PERL_ARGS_ASSERT_CV_CKPROTO_LEN	\
	assert(cv)
a319 2
#define PERL_ARGS_ASSERT_CV_CLONE	\
	assert(proto)
a323 2
#define PERL_ARGS_ASSERT_GV_CONST_SV	\
	assert(gv)
a332 2
#define PERL_ARGS_ASSERT_CV_UNDEF	\
	assert(cv)
a335 2
#define PERL_ARGS_ASSERT_CX_DUMP	\
	assert(cx)
a339 2
#define PERL_ARGS_ASSERT_FILTER_DEL	\
	assert(funcp)
d341 1
a341 1
PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV *buf_sv, int maxlen)
a343 2
#define PERL_ARGS_ASSERT_FILTER_READ	\
	assert(buf_sv)
a370 2
#define PERL_ARGS_ASSERT_DEB	\
	assert(pat)
a373 2
#define PERL_ARGS_ASSERT_VDEB	\
	assert(pat)
a377 2
#define PERL_ARGS_ASSERT_DEBOP	\
	assert(o)
a386 2
#define PERL_ARGS_ASSERT_DELIMCPY	\
	assert(to); assert(toend); assert(from); assert(fromend); assert(retlen)
a390 2
#define PERL_ARGS_ASSERT_DEPRECATE	\
	assert(s)
a393 2
#define PERL_ARGS_ASSERT_DEPRECATE_OLD	\
	assert(s)
a403 2
#define PERL_ARGS_ASSERT_DO_AEXEC	\
	assert(mark); assert(sp)
a407 2
#define PERL_ARGS_ASSERT_DO_AEXEC5	\
	assert(mark); assert(sp)
a410 2
#define PERL_ARGS_ASSERT_DO_BINMODE	\
	assert(fp)
d412 1
a412 1
PERL_CALLCONV void	Perl_do_chop(pTHX_ SV *astr, SV *sv)
a414 2
#define PERL_ARGS_ASSERT_DO_CHOP	\
	assert(astr); assert(sv)
a418 2
#define PERL_ARGS_ASSERT_DO_EOF	\
	assert(gv)
a423 2
#define PERL_ARGS_ASSERT_DO_EXEC	\
	assert(cmd)
a427 2
#define PERL_ARGS_ASSERT_DO_EXEC	\
	assert(cmd)
d431 1
a431 1
#if defined(WIN32) || defined(__SYMBIAN32__) || defined(VMS)
d433 1
a435 2
#define PERL_ARGS_ASSERT_DO_ASPAWN	\
	assert(mark); assert(sp)
a438 2
#define PERL_ARGS_ASSERT_DO_SPAWN	\
	assert(cmd)
a441 2
#define PERL_ARGS_ASSERT_DO_SPAWN_NOWAIT	\
	assert(cmd)
d445 1
a445 1
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report)
a446 2
#define PERL_ARGS_ASSERT_DO_EXEC3	\
	assert(incmd)
d450 1
a450 1
#if defined(PERL_IN_DOIO_C) || defined(PERL_DECL_PROT)
a452 2
#define PERL_ARGS_ASSERT_EXEC_FAILED	\
	assert(cmd)
a458 2
#define PERL_ARGS_ASSERT_DO_IPCCTL	\
	assert(mark); assert(sp)
a462 2
#define PERL_ARGS_ASSERT_DO_IPCGET	\
	assert(mark); assert(sp)
a466 2
#define PERL_ARGS_ASSERT_DO_MSGRCV	\
	assert(mark); assert(sp)
a470 2
#define PERL_ARGS_ASSERT_DO_MSGSND	\
	assert(mark); assert(sp)
a474 2
#define PERL_ARGS_ASSERT_DO_SEMOP	\
	assert(mark); assert(sp)
a478 2
#define PERL_ARGS_ASSERT_DO_SHMIO	\
	assert(mark); assert(sp)
d481 1
a481 1
PERL_CALLCONV void	Perl_do_join(pTHX_ SV *sv, SV *delim, SV **mark, SV **sp)
a485 2
#define PERL_ARGS_ASSERT_DO_JOIN	\
	assert(sv); assert(delim); assert(mark); assert(sp)
a490 2
#define PERL_ARGS_ASSERT_DO_OPEN	\
	assert(gv); assert(name)
a495 2
#define PERL_ARGS_ASSERT_DO_OPEN9	\
	assert(gv); assert(name); assert(svs)
d497 1
a497 1
PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, const char *oname, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num)
a499 2
#define PERL_ARGS_ASSERT_DO_OPENN	\
	assert(gv); assert(oname)
a502 2
#define PERL_ARGS_ASSERT_DO_PRINT	\
	assert(fp)
a508 2
#define PERL_ARGS_ASSERT_DO_CHOMP	\
	assert(sv)
a513 2
#define PERL_ARGS_ASSERT_DO_SPRINTF	\
	assert(sv); assert(sarg)
a516 2
#define PERL_ARGS_ASSERT_DO_SYSSEEK	\
	assert(gv)
a520 2
#define PERL_ARGS_ASSERT_DO_TELL	\
	assert(gv)
a523 2
#define PERL_ARGS_ASSERT_DO_TRANS	\
	assert(sv)
a526 2
#define PERL_ARGS_ASSERT_DO_VECGET	\
	assert(sv)
a529 2
#define PERL_ARGS_ASSERT_DO_VECSET	\
	assert(sv)
a534 2
#define PERL_ARGS_ASSERT_DO_VOP	\
	assert(sv); assert(left); assert(right)
a537 2
#define PERL_ARGS_ASSERT_DOFILE	\
	assert(term)
a546 2
#define PERL_ARGS_ASSERT_DUMP_FDS	\
	assert(s)
a550 2
#define PERL_ARGS_ASSERT_DUMP_FORM	\
	assert(gv)
a553 2
#define PERL_ARGS_ASSERT_GV_DUMP	\
	assert(gv)
d555 1
a555 1
PERL_CALLCONV void	Perl_op_dump(pTHX_ const OP *o)
a556 2
#define PERL_ARGS_ASSERT_OP_DUMP	\
	assert(o)
a560 2
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS	\
	assert(stash)
a563 2
#define PERL_ARGS_ASSERT_DUMP_SUB	\
	assert(gv)
a566 2
#define PERL_ARGS_ASSERT_FBM_COMPILE	\
	assert(sv)
d568 1
a568 1
PERL_CALLCONV char*	Perl_fbm_instr(pTHX_ unsigned char* big, unsigned char* bigend, SV* littlestr, U32 flags)
a572 2
#define PERL_ARGS_ASSERT_FBM_INSTR	\
	assert(big); assert(bigend); assert(littlestr)
a575 2
#define PERL_ARGS_ASSERT_FIND_SCRIPT	\
	assert(scriptname)
d578 1
a578 1
PERL_CALLCONV OP*	Perl_fold_constants(pTHX_ OP *o)
a579 2
#define PERL_ARGS_ASSERT_FOLD_CONSTANTS	\
	assert(o)
a583 2
#define PERL_ARGS_ASSERT_FORM	\
	assert(pat)
a586 2
#define PERL_ARGS_ASSERT_VFORM	\
	assert(pat)
d591 1
a591 1
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char *env_elem, unsigned long *len)
a593 2
#define PERL_ARGS_ASSERT_GETENV_LEN	\
	assert(env_elem); assert(len)
a597 2
#define PERL_ARGS_ASSERT_GET_DB_SUB	\
	assert(cv)
a602 2
#define PERL_ARGS_ASSERT_GV_AVADD	\
	assert(gv)
a605 2
#define PERL_ARGS_ASSERT_GV_HVADD	\
	assert(gv)
a608 2
#define PERL_ARGS_ASSERT_GV_IOADD	\
	assert(gv)
a612 2
#define PERL_ARGS_ASSERT_GV_AUTOLOAD4	\
	assert(name)
a615 2
#define PERL_ARGS_ASSERT_GV_CHECK	\
	assert(stash)
a619 2
#define PERL_ARGS_ASSERT_GV_EFULLNAME	\
	assert(sv); assert(gv)
a623 2
#define PERL_ARGS_ASSERT_GV_EFULLNAME3	\
	assert(sv); assert(gv)
a627 2
#define PERL_ARGS_ASSERT_GV_EFULLNAME4	\
	assert(sv); assert(gv)
a630 2
#define PERL_ARGS_ASSERT_GV_FETCHFILE	\
	assert(name)
a633 2
#define PERL_ARGS_ASSERT_GV_FETCHFILE_FLAGS	\
	assert(name)
a636 2
#define PERL_ARGS_ASSERT_GV_FETCHMETH	\
	assert(name)
a639 2
#define PERL_ARGS_ASSERT_GV_FETCHMETH_AUTOLOAD	\
	assert(name)
a642 2
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD	\
	assert(name)
a645 2
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_AUTOLOAD	\
	assert(name)
d647 1
a647 1
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 add, I32 sv_type)
a648 2
#define PERL_ARGS_ASSERT_GV_FETCHPV	\
	assert(nambeg)
a652 2
#define PERL_ARGS_ASSERT_GV_FULLNAME	\
	assert(sv); assert(gv)
a656 2
#define PERL_ARGS_ASSERT_GV_FULLNAME3	\
	assert(sv); assert(gv)
a660 2
#define PERL_ARGS_ASSERT_GV_FULLNAME4	\
	assert(sv); assert(gv)
a663 2
#define PERL_ARGS_ASSERT_NEWGP	\
	assert(gv)
a667 2
#define PERL_ARGS_ASSERT_GV_INIT	\
	assert(gv); assert(name)
a671 2
#define PERL_ARGS_ASSERT_GV_NAME_SET	\
	assert(gv); assert(name)
a674 2
#define PERL_ARGS_ASSERT_GV_STASHPV	\
	assert(name)
a677 2
#define PERL_ARGS_ASSERT_GV_STASHPVN	\
	assert(name)
d679 3
a681 1
PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 flags)
a682 2
#define PERL_ARGS_ASSERT_GV_STASHSV	\
	assert(sv)
d684 1
a684 3
PERL_CALLCONV void	Perl_hv_clear(pTHX_ HV* hv);
PERL_CALLCONV HV *	Perl_hv_copy_hints_hv(pTHX_ HV *const ohv);
PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV *hv, HE *entry)
a685 2
#define PERL_ARGS_ASSERT_HV_DELAYFREE_ENT	\
	assert(hv)
d687 1
a687 1
/* PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV *hv, const char *key, I32 klen, I32 flags)
a688 2
#define PERL_ARGS_ASSERT_HV_DELETE	\
	assert(key)
d690 1
a690 1
/* PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV *hv, SV *keysv, I32 flags, U32 hash)
a691 2
#define PERL_ARGS_ASSERT_HV_DELETE_ENT	\
	assert(keysv)
d693 1
a693 1
/* PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV *hv, const char *key, I32 klen)
a695 2
#define PERL_ARGS_ASSERT_HV_EXISTS	\
	assert(key)
d697 1
a697 1
/* PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV *hv, SV *keysv, U32 hash)
a699 2
#define PERL_ARGS_ASSERT_HV_EXISTS_ENT	\
	assert(keysv)
d701 1
a701 1
/* PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV *hv, const char *key, I32 klen, I32 lval)
a702 2
#define PERL_ARGS_ASSERT_HV_FETCH	\
	assert(key)
d704 1
a704 1
/* PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV *hv, SV *keysv, I32 lval, U32 hash)
a705 2
#define PERL_ARGS_ASSERT_HV_FETCH_ENT	\
	assert(keysv)
d707 1
a707 1
PERL_CALLCONV void*	Perl_hv_common(pTHX_ HV *hv, SV *keysv, const char* key, STRLEN klen, int flags, int action, SV *val, U32 hash);
a709 2
#define PERL_ARGS_ASSERT_HV_COMMON_KEY_LEN	\
	assert(key)
d711 1
a711 1
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV *hv, HE *entryK)
a712 2
#define PERL_ARGS_ASSERT_HV_FREE_ENT	\
	assert(hv)
d714 1
a714 1
PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV *hv)
a715 2
#define PERL_ARGS_ASSERT_HV_ITERINIT	\
	assert(hv)
a720 2
#define PERL_ARGS_ASSERT_HV_ITERKEY	\
	assert(entry); assert(retlen)
a724 2
#define PERL_ARGS_ASSERT_HV_ITERKEYSV	\
	assert(entry)
d726 1
a726 1
/* PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV *hv)
a728 2
#define PERL_ARGS_ASSERT_HV_ITERNEXT	\
	assert(hv)
d730 1
a730 1
PERL_CALLCONV SV*	Perl_hv_iternextsv(pTHX_ HV *hv, char **key, I32 *retlen)
a734 2
#define PERL_ARGS_ASSERT_HV_ITERNEXTSV	\
	assert(hv); assert(key); assert(retlen)
d736 1
a736 1
PERL_CALLCONV HE*	Perl_hv_iternext_flags(pTHX_ HV *hv, I32 flags)
a738 2
#define PERL_ARGS_ASSERT_HV_ITERNEXT_FLAGS	\
	assert(hv)
d740 1
a740 1
PERL_CALLCONV SV*	Perl_hv_iterval(pTHX_ HV *hv, HE *entry)
a743 2
#define PERL_ARGS_ASSERT_HV_ITERVAL	\
	assert(hv); assert(entry)
d745 1
a745 1
PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV *hv, IV newmax)
a746 2
#define PERL_ARGS_ASSERT_HV_KSPLIT	\
	assert(hv)
d748 1
a748 1
/* PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV *hv, GV *gv, int how)
a749 2
#define PERL_ARGS_ASSERT_HV_MAGIC	\
	assert(hv)
d755 4
a758 4
/* PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV *hv, const char *key, I32 klen, SV *val, U32 hash); */
/* PERL_CALLCONV HE*	Perl_hv_store_ent(pTHX_ HV *hv, SV *key, SV *val, U32 hash); */
/* PERL_CALLCONV SV**	Perl_hv_store_flags(pTHX_ HV *hv, const char *key, I32 klen, SV *val, U32 hash, int flags); */
PERL_CALLCONV void	Perl_hv_undef(pTHX_ HV *hv);
a762 2
#define PERL_ARGS_ASSERT_IBCMP	\
	assert(a); assert(b)
a767 2
#define PERL_ARGS_ASSERT_IBCMP_LOCALE	\
	assert(a); assert(b)
d769 1
a769 1
PERL_CALLCONV I32	Perl_ibcmp_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2)
a771 2
#define PERL_ARGS_ASSERT_IBCMP_UTF8	\
	assert(s1); assert(s2)
a777 2
#define PERL_ARGS_ASSERT_INIT_ARGV_SYMBOLS	\
	assert(argv)
a782 2
#define PERL_ARGS_ASSERT_INIT_TM	\
	assert(ptm)
a789 2
#define PERL_ARGS_ASSERT_INSTR	\
	assert(big); assert(little)
a792 2
#define PERL_ARGS_ASSERT_IO_CLOSE	\
	assert(io)
a799 2
#define PERL_ARGS_ASSERT_IS_GV_MAGICAL	\
	assert(name)
a874 2
#define PERL_ARGS_ASSERT_TO_UNI_UPPER	\
	assert(p); assert(lenp)
a878 2
#define PERL_ARGS_ASSERT_TO_UNI_TITLE	\
	assert(p); assert(lenp)
a882 2
#define PERL_ARGS_ASSERT_TO_UNI_LOWER	\
	assert(p); assert(lenp)
a886 2
#define PERL_ARGS_ASSERT_TO_UNI_FOLD	\
	assert(p); assert(lenp)
d944 1
a944 1
PERL_CALLCONV STRLEN	Perl_is_utf8_char(pTHX_ const U8 *s)
a945 2
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR	\
	assert(s)
a948 2
#define PERL_ARGS_ASSERT_IS_UTF8_STRING	\
	assert(s)
a951 2
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOC	\
	assert(s)
a954 2
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN	\
	assert(s)
a958 2
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUM	\
	assert(p)
a962 2
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUMC	\
	assert(p)
a966 2
#define PERL_ARGS_ASSERT_IS_UTF8_IDFIRST	\
	assert(p)
a970 2
#define PERL_ARGS_ASSERT_IS_UTF8_IDCONT	\
	assert(p)
a974 2
#define PERL_ARGS_ASSERT_IS_UTF8_ALPHA	\
	assert(p)
a978 2
#define PERL_ARGS_ASSERT_IS_UTF8_ASCII	\
	assert(p)
a982 2
#define PERL_ARGS_ASSERT_IS_UTF8_SPACE	\
	assert(p)
a986 2
#define PERL_ARGS_ASSERT_IS_UTF8_CNTRL	\
	assert(p)
a990 2
#define PERL_ARGS_ASSERT_IS_UTF8_DIGIT	\
	assert(p)
a994 2
#define PERL_ARGS_ASSERT_IS_UTF8_GRAPH	\
	assert(p)
a998 2
#define PERL_ARGS_ASSERT_IS_UTF8_UPPER	\
	assert(p)
a1002 2
#define PERL_ARGS_ASSERT_IS_UTF8_LOWER	\
	assert(p)
a1006 2
#define PERL_ARGS_ASSERT_IS_UTF8_PRINT	\
	assert(p)
a1010 2
#define PERL_ARGS_ASSERT_IS_UTF8_PUNCT	\
	assert(p)
a1014 2
#define PERL_ARGS_ASSERT_IS_UTF8_XDIGIT	\
	assert(p)
a1018 2
#define PERL_ARGS_ASSERT_IS_UTF8_MARK	\
	assert(p)
d1020 1
a1020 1
PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP *o)
a1021 2
#define PERL_ARGS_ASSERT_JMAYBE	\
	assert(o)
d1023 1
a1023 1
PERL_CALLCONV I32	Perl_keyword(pTHX_ const char *name, I32 len, bool all_keywords)
a1025 2
#define PERL_ARGS_ASSERT_KEYWORD	\
	assert(name)
a1031 2
#define PERL_ARGS_ASSERT_OP_NULL	\
	assert(o)
a1034 2
#define PERL_ARGS_ASSERT_OP_CLEAR	\
	assert(o)
a1039 2
#define PERL_ARGS_ASSERT_LINKLIST	\
	assert(o)
a1044 2
#define PERL_ARGS_ASSERT_LOAD_MODULE	\
	assert(name)
a1047 2
#define PERL_ARGS_ASSERT_VLOAD_MODULE	\
	assert(name)
d1049 1
a1049 1
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP* o, I32 lex)
a1050 2
#define PERL_ARGS_ASSERT_LOCALIZE	\
	assert(o)
a1054 2
#define PERL_ARGS_ASSERT_LOOKS_LIKE_NUMBER	\
	assert(sv)
a1059 2
#define PERL_ARGS_ASSERT_GROK_BIN	\
	assert(start); assert(len_p); assert(flags)
a1064 2
#define PERL_ARGS_ASSERT_GROK_HEX	\
	assert(start); assert(len_p); assert(flags)
a1067 2
#define PERL_ARGS_ASSERT_GROK_NUMBER	\
	assert(pv)
a1072 2
#define PERL_ARGS_ASSERT_GROK_NUMERIC_RADIX	\
	assert(sp); assert(send)
a1077 2
#define PERL_ARGS_ASSERT_GROK_OCT	\
	assert(start); assert(len_p); assert(flags)
a1081 2
#define PERL_ARGS_ASSERT_MAGIC_CLEARENV	\
	assert(sv); assert(mg)
a1085 2
#define PERL_ARGS_ASSERT_MAGIC_CLEAR_ALL_ENV	\
	assert(sv); assert(mg)
a1089 8
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINT	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_clearisa(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARISA	\
	assert(sv); assert(mg)
a1093 2
#define PERL_ARGS_ASSERT_MAGIC_CLEARPACK	\
	assert(sv); assert(mg)
a1097 2
#define PERL_ARGS_ASSERT_MAGIC_CLEARSIG	\
	assert(sv); assert(mg)
a1101 2
#define PERL_ARGS_ASSERT_MAGIC_EXISTSPACK	\
	assert(sv); assert(mg)
a1105 2
#define PERL_ARGS_ASSERT_MAGIC_FREEREGEXP	\
	assert(sv); assert(mg)
a1109 2
#define PERL_ARGS_ASSERT_MAGIC_FREEOVRLD	\
	assert(sv); assert(mg)
a1113 2
#define PERL_ARGS_ASSERT_MAGIC_GET	\
	assert(sv); assert(mg)
a1117 2
#define PERL_ARGS_ASSERT_MAGIC_GETARYLEN	\
	assert(sv); assert(mg)
a1121 2
#define PERL_ARGS_ASSERT_MAGIC_GETDEFELEM	\
	assert(sv); assert(mg)
a1125 2
#define PERL_ARGS_ASSERT_MAGIC_GETNKEYS	\
	assert(sv); assert(mg)
a1129 2
#define PERL_ARGS_ASSERT_MAGIC_GETPACK	\
	assert(sv); assert(mg)
a1133 2
#define PERL_ARGS_ASSERT_MAGIC_GETPOS	\
	assert(sv); assert(mg)
a1137 2
#define PERL_ARGS_ASSERT_MAGIC_GETSIG	\
	assert(sv); assert(mg)
a1141 2
#define PERL_ARGS_ASSERT_MAGIC_GETSUBSTR	\
	assert(sv); assert(mg)
a1145 2
#define PERL_ARGS_ASSERT_MAGIC_GETTAINT	\
	assert(sv); assert(mg)
a1149 2
#define PERL_ARGS_ASSERT_MAGIC_GETUVAR	\
	assert(sv); assert(mg)
a1153 2
#define PERL_ARGS_ASSERT_MAGIC_GETVEC	\
	assert(sv); assert(mg)
a1157 2
#define PERL_ARGS_ASSERT_MAGIC_LEN	\
	assert(sv); assert(mg)
d1159 1
a1159 1
PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV *sv, MAGIC *mg, SV *key)
a1162 2
#define PERL_ARGS_ASSERT_MAGIC_NEXTPACK	\
	assert(sv); assert(mg); assert(key)
a1166 2
#define PERL_ARGS_ASSERT_MAGIC_REGDATA_CNT	\
	assert(sv); assert(mg)
a1170 2
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_GET	\
	assert(sv); assert(mg)
a1175 2
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET	\
	assert(sv); assert(mg)
a1179 2
#define PERL_ARGS_ASSERT_MAGIC_SET	\
	assert(sv); assert(mg)
a1183 2
#define PERL_ARGS_ASSERT_MAGIC_SETAMAGIC	\
	assert(sv); assert(mg)
a1187 2
#define PERL_ARGS_ASSERT_MAGIC_SETARYLEN	\
	assert(sv); assert(mg)
a1191 2
#define PERL_ARGS_ASSERT_MAGIC_FREEARYLEN_P	\
	assert(sv); assert(mg)
a1192 1
#ifndef NO_MATHOMS
a1195 2
#define PERL_ARGS_ASSERT_MAGIC_SETBM	\
	assert(sv); assert(mg)
d1197 1
a1197 1
PERL_CALLCONV int	Perl_magic_setfm(pTHX_ SV* sv, MAGIC* mg)
a1199 2
#define PERL_ARGS_ASSERT_MAGIC_SETFM	\
	assert(sv); assert(mg)
d1201 1
a1201 2
#endif
PERL_CALLCONV int	Perl_magic_setdbline(pTHX_ SV* sv, MAGIC* mg)
a1203 2
#define PERL_ARGS_ASSERT_MAGIC_SETDBLINE	\
	assert(sv); assert(mg)
d1205 1
a1205 1
PERL_CALLCONV int	Perl_magic_setdefelem(pTHX_ SV* sv, MAGIC* mg)
a1207 2
#define PERL_ARGS_ASSERT_MAGIC_SETDEFELEM	\
	assert(sv); assert(mg)
d1209 1
a1209 1
PERL_CALLCONV int	Perl_magic_setenv(pTHX_ SV* sv, MAGIC* mg)
a1211 2
#define PERL_ARGS_ASSERT_MAGIC_SETENV	\
	assert(sv); assert(mg)
a1215 2
#define PERL_ARGS_ASSERT_MAGIC_SETHINT	\
	assert(sv); assert(mg)
a1219 2
#define PERL_ARGS_ASSERT_MAGIC_SETISA	\
	assert(sv); assert(mg)
a1220 1
#ifndef NO_MATHOMS
a1223 2
#define PERL_ARGS_ASSERT_MAGIC_SETGLOB	\
	assert(sv); assert(mg)
a1224 1
#endif
a1227 2
#define PERL_ARGS_ASSERT_MAGIC_SETMGLOB	\
	assert(sv); assert(mg)
a1231 2
#define PERL_ARGS_ASSERT_MAGIC_SETNKEYS	\
	assert(sv); assert(mg)
a1235 2
#define PERL_ARGS_ASSERT_MAGIC_SETPACK	\
	assert(sv); assert(mg)
a1239 2
#define PERL_ARGS_ASSERT_MAGIC_SETPOS	\
	assert(sv); assert(mg)
a1243 2
#define PERL_ARGS_ASSERT_MAGIC_SETREGEXP	\
	assert(sv); assert(mg)
a1247 2
#define PERL_ARGS_ASSERT_MAGIC_SETSIG	\
	assert(sv); assert(mg)
a1251 2
#define PERL_ARGS_ASSERT_MAGIC_SETSUBSTR	\
	assert(sv); assert(mg)
a1255 2
#define PERL_ARGS_ASSERT_MAGIC_SETTAINT	\
	assert(sv); assert(mg)
a1259 2
#define PERL_ARGS_ASSERT_MAGIC_SETUVAR	\
	assert(sv); assert(mg)
a1263 2
#define PERL_ARGS_ASSERT_MAGIC_SETVEC	\
	assert(sv); assert(mg)
a1267 2
#define PERL_ARGS_ASSERT_MAGIC_SETUTF8	\
	assert(sv); assert(mg)
a1271 2
#define PERL_ARGS_ASSERT_MAGIC_SET_ALL_ENV	\
	assert(sv); assert(mg)
a1275 2
#define PERL_ARGS_ASSERT_MAGIC_SIZEPACK	\
	assert(sv); assert(mg)
a1279 2
#define PERL_ARGS_ASSERT_MAGIC_WIPEPACK	\
	assert(sv); assert(mg)
a1282 2
#define PERL_ARGS_ASSERT_MAGICNAME	\
	assert(sym)
a1288 2
#define PERL_ARGS_ASSERT_MAGIC_SETCOLLXFRM	\
	assert(sv); assert(mg)
a1292 2
#define PERL_ARGS_ASSERT_MEM_COLLXFRM	\
	assert(s); assert(xlen)
a1297 2
#define PERL_ARGS_ASSERT_MESS	\
	assert(pat)
a1300 2
#define PERL_ARGS_ASSERT_VMESS	\
	assert(pat)
a1303 2
#define PERL_ARGS_ASSERT_QERROR	\
	assert(err)
d1306 1
a1307 2
#define PERL_ARGS_ASSERT_SORTSV	\
	assert(cmp)
d1310 1
a1311 2
#define PERL_ARGS_ASSERT_SORTSV_FLAGS	\
	assert(cmp)
a1314 2
#define PERL_ARGS_ASSERT_MG_CLEAR	\
	assert(sv)
d1316 1
a1316 1
PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV *sv, SV *nsv, const char *key, I32 klen)
a1318 2
#define PERL_ARGS_ASSERT_MG_COPY	\
	assert(sv); assert(nsv)
a1322 2
#define PERL_ARGS_ASSERT_MG_LOCALIZE	\
	assert(sv); assert(nsv)
a1328 2
#define PERL_ARGS_ASSERT_MG_FREE	\
	assert(sv)
a1331 2
#define PERL_ARGS_ASSERT_MG_GET	\
	assert(sv)
a1334 2
#define PERL_ARGS_ASSERT_MG_LENGTH	\
	assert(sv)
a1337 2
#define PERL_ARGS_ASSERT_MG_MAGICAL	\
	assert(sv)
a1340 2
#define PERL_ARGS_ASSERT_MG_SET	\
	assert(sv)
a1343 2
#define PERL_ARGS_ASSERT_MG_SIZE	\
	assert(sv)
d1345 1
a1345 1
PERL_CALLCONV void	Perl_mini_mktime(pTHX_ struct tm *ptm)
a1346 2
#define PERL_ARGS_ASSERT_MINI_MKTIME	\
	assert(ptm)
a1351 2
#define PERL_ARGS_ASSERT_MORESWITCHES	\
	assert(s)
a1354 2
#define PERL_ARGS_ASSERT_MY	\
	assert(o)
a1357 2
#define PERL_ARGS_ASSERT_MY_ATOF	\
	assert(s)
a1362 2
#define PERL_ARGS_ASSERT_MY_BCOPY	\
	assert(from); assert(to)
a1367 2
#define PERL_ARGS_ASSERT_MY_BZERO	\
	assert(loc)
a1385 2
#define PERL_ARGS_ASSERT_MY_MEMCMP	\
	assert(s1); assert(s2)
a1390 2
#define PERL_ARGS_ASSERT_MY_MEMSET	\
	assert(loc)
a1396 2
#define PERL_ARGS_ASSERT_MY_POPEN	\
	assert(cmd); assert(mode)
a1400 2
#define PERL_ARGS_ASSERT_MY_POPEN_LIST	\
	assert(mode); assert(args)
a1405 2
#define PERL_ARGS_ASSERT_MY_STRFTIME	\
	assert(fmt)
a1441 2
#define PERL_ARGS_ASSERT_NEWCONDOP	\
	assert(first)
a1452 2
#define PERL_ARGS_ASSERT_NEWFOROP	\
	assert(expr)
a1458 2
#define PERL_ARGS_ASSERT_NEWGIVENOP	\
	assert(cond); assert(block)
d1460 1
a1460 1
PERL_CALLCONV OP*	Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP *first, OP *other)
a1464 2
#define PERL_ARGS_ASSERT_NEWLOGOP	\
	assert(first); assert(other)
a1469 2
#define PERL_ARGS_ASSERT_NEWLOOPEX	\
	assert(label)
a1484 2
#define PERL_ARGS_ASSERT_NEWPROG	\
	assert(o)
a1490 2
#define PERL_ARGS_ASSERT_NEWRANGE	\
	assert(left); assert(right)
a1503 2
#define PERL_ARGS_ASSERT_NEWXS_FLAGS	\
	assert(subaddr); assert(filename)
d1505 1
a1505 1
PERL_CALLCONV CV*	Perl_newXS(pTHX_ const char *name, XSUBADDR_t subaddr, const char *filename)
a1507 2
#define PERL_ARGS_ASSERT_NEWXS	\
	assert(subaddr); assert(filename)
d1509 3
a1511 2
/* PERL_CALLCONV AV*	Perl_newAV(pTHX)
			__attribute__warn_unused_result__; */
a1516 2
#define PERL_ARGS_ASSERT_NEWAVREF	\
	assert(o)
a1529 2
#define PERL_ARGS_ASSERT_NEWGVOP	\
	assert(gv)
a1534 2
#define PERL_ARGS_ASSERT_NEWGVGEN	\
	assert(pack)
a1543 2
#define PERL_ARGS_ASSERT_NEWHVREF	\
	assert(o)
d1545 3
a1547 2
/* PERL_CALLCONV HV*	Perl_newHV(pTHX)
			__attribute__warn_unused_result__; */
d1549 1
a1549 1
PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV *hv)
a1565 2
#define PERL_ARGS_ASSERT_NEWPADOP	\
	assert(sv)
a1579 2
#define PERL_ARGS_ASSERT_NEWRV	\
	assert(sv)
a1584 2
#define PERL_ARGS_ASSERT_NEWRV_NOINC	\
	assert(sv)
a1593 2
#define PERL_ARGS_ASSERT_NEWSVREF	\
	assert(o)
a1598 2
#define PERL_ARGS_ASSERT_NEWSVOP	\
	assert(sv)
a1619 4
PERL_CALLCONV SV*	Perl_newSVpvn_flags(pTHX_ const char* s, STRLEN len, U32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

a1632 2
#define PERL_ARGS_ASSERT_NEWSVPVF	\
	assert(pat)
a1637 2
#define PERL_ARGS_ASSERT_VNEWSVPVF	\
	assert(pat)
a1640 2
#define PERL_ARGS_ASSERT_NEWSVRV	\
	assert(rv)
a1657 2
#define PERL_ARGS_ASSERT_NEWWHENOP	\
	assert(block)
d1667 1
a1667 1
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *e, SV *sv)
a1670 2
#define PERL_ARGS_ASSERT_SCAN_VSTRING	\
	assert(s); assert(e); assert(sv)
d1672 1
a1672 1
PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *s, SV *rv, bool qv)
a1674 2
#define PERL_ARGS_ASSERT_SCAN_VERSION	\
	assert(s); assert(rv)
a1677 2
#define PERL_ARGS_ASSERT_NEW_VERSION	\
	assert(ver)
a1680 2
#define PERL_ARGS_ASSERT_UPG_VERSION	\
	assert(ver)
a1683 2
#define PERL_ARGS_ASSERT_VVERIFY	\
	assert(vs)
a1686 2
#define PERL_ARGS_ASSERT_VNUMIFY	\
	assert(vs)
a1689 2
#define PERL_ARGS_ASSERT_VNORMAL	\
	assert(vs)
a1692 2
#define PERL_ARGS_ASSERT_VSTRINGIFY	\
	assert(vs)
d1694 1
a1694 1
PERL_CALLCONV int	Perl_vcmp(pTHX_ SV *lhv, SV *rhv)
a1696 2
#define PERL_ARGS_ASSERT_VCMP	\
	assert(lhv); assert(rhv)
a1699 2
#define PERL_ARGS_ASSERT_NEXTARGV	\
	assert(gv)
a1706 2
#define PERL_ARGS_ASSERT_NINSTR	\
	assert(big); assert(bigend); assert(little); assert(lend)
a1710 2
#define PERL_ARGS_ASSERT_OOPSCV	\
	assert(o)
a1715 2
#define PERL_ARGS_ASSERT_PACKAGE	\
	assert(o)
a1719 2
#define PERL_ARGS_ASSERT_PACKAGE	\
	assert(o)
a1724 2
#define PERL_ARGS_ASSERT_ALLOCMY	\
	assert(name)
a1728 2
#define PERL_ARGS_ASSERT_PAD_FINDMY	\
	assert(name)
a1733 2
#define PERL_ARGS_ASSERT_OOPSAV	\
	assert(o)
a1737 2
#define PERL_ARGS_ASSERT_OOPSHV	\
	assert(o)
d1745 1
a1745 1
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV *tmpglob, IO *io)
a1747 2
#define PERL_ARGS_ASSERT_START_GLOB	\
	assert(tmpglob); assert(io)
d1753 1
a1753 1
PERL_CALLCONV void*	Perl_reentrant_retry(const char *f, ...)
a1754 2
#define PERL_ARGS_ASSERT_REENTRANT_RETRY	\
	assert(f)
a1760 2
#define PERL_ARGS_ASSERT_CALL_ARGV	\
	assert(sub_name); assert(argv)
a1763 2
#define PERL_ARGS_ASSERT_CALL_METHOD	\
	assert(methname)
a1766 2
#define PERL_ARGS_ASSERT_CALL_PV	\
	assert(sub_name)
d1768 1
a1768 1
PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, VOL I32 flags)
a1769 2
#define PERL_ARGS_ASSERT_CALL_SV	\
	assert(sv)
a1773 2
#define PERL_ARGS_ASSERT_DOREF	\
	assert(o)
a1776 2
#define PERL_ARGS_ASSERT_EVAL_PV	\
	assert(p)
a1779 2
#define PERL_ARGS_ASSERT_EVAL_SV	\
	assert(sv)
d1781 1
a1781 1
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char *name, I32 flags)
a1782 2
#define PERL_ARGS_ASSERT_GET_SV	\
	assert(name)
d1784 1
a1784 1
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char *name, I32 flags)
a1785 2
#define PERL_ARGS_ASSERT_GET_AV	\
	assert(name)
d1787 1
a1787 1
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char *name, I32 flags)
a1788 2
#define PERL_ARGS_ASSERT_GET_HV	\
	assert(name)
a1791 2
#define PERL_ARGS_ASSERT_GET_CV	\
	assert(name)
a1794 2
#define PERL_ARGS_ASSERT_GET_CVN_FLAGS	\
	assert(name)
a1800 2
#define PERL_ARGS_ASSERT_NEW_CTYPE	\
	assert(newctype)
a1807 2
#define PERL_ARGS_ASSERT_REQUIRE_PV	\
	assert(pv)
a1815 2
#define PERL_ARGS_ASSERT_PACK_CAT	\
	assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist); assert(next_in_list)
a1822 2
#define PERL_ARGS_ASSERT_PACKLIST	\
	assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist)
a1828 2
#define PERL_ARGS_ASSERT_PMFLAG	\
	assert(pmfl)
d1830 1
a1830 1
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP *o, OP *expr, bool isreg)
a1832 2
#define PERL_ARGS_ASSERT_PMRUNTIME	\
	assert(o); assert(expr)
a1837 2
#define PERL_ARGS_ASSERT_PMTRANS	\
	assert(o); assert(expr); assert(repl)
a1845 2
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)
a1848 2
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)
d1850 1
a1850 1
PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **altsvp)
a1851 2
#define PERL_ARGS_ASSERT_REGCLASS_SWASH	\
	assert(node)
a1858 8
#define PERL_ARGS_ASSERT_PREGEXEC	\
	assert(prog); assert(stringarg); assert(strend); assert(strbeg); assert(screamer)

PERL_CALLCONV void	Perl_pregfree(pTHX_ REGEXP* r);
PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* r)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_TEMP_COPY	\
	assert(r)
d1860 2
a1861 1
PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const r)
a1862 2
#define PERL_ARGS_ASSERT_REGFREE_INTERNAL	\
	assert(r)
d1864 1
a1866 2
#define PERL_ARGS_ASSERT_REG_STRINGIFY	\
	assert(mg)
a1871 2
#define PERL_ARGS_ASSERT_REGDUPE_INTERNAL	\
	assert(r); assert(param)
a1875 2
#define PERL_ARGS_ASSERT_PREGCOMP	\
	assert(pattern)
a1878 2
#define PERL_ARGS_ASSERT_RE_COMPILE	\
	assert(pattern)
d1880 1
a1880 1
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const prog, SV* sv, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
a1883 2
#define PERL_ARGS_ASSERT_RE_INTUIT_START	\
	assert(prog); assert(strpos); assert(strend)
d1885 1
a1885 1
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP  *const prog)
a1886 2
#define PERL_ARGS_ASSERT_RE_INTUIT_STRING	\
	assert(prog)
d1888 1
a1888 1
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const prog, char *stringarg, char *strend, char *strbeg, I32 minend, SV *sv, void *data, U32 flags)
a1893 2
#define PERL_ARGS_ASSERT_REGEXEC_FLAGS	\
	assert(prog); assert(stringarg); assert(strend); assert(strbeg); assert(sv)
d1896 2
a1897 1
			__attribute__warn_unused_result__;
a1901 2
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF	\
	assert(rx)
a1904 2
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ITER	\
	assert(rx)
a1908 2
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FETCH	\
	assert(rx); assert(namesv)
a1912 2
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_EXISTS	\
	assert(rx); assert(key)
a1915 2
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FIRSTKEY	\
	assert(rx)
a1918 2
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_NEXTKEY	\
	assert(rx)
a1921 2
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_SCALAR	\
	assert(rx)
a1924 2
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ALL	\
	assert(rx)
a1928 2
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_FETCH	\
	assert(rx)
a1931 2
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_STORE	\
	assert(rx)
a1935 2
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_LENGTH	\
	assert(rx); assert(sv)
a1939 2
#define PERL_ARGS_ASSERT_REG_QR_PACKAGE	\
	assert(rx)
a1944 2
#define PERL_ARGS_ASSERT_REGPROP	\
	assert(sv); assert(o)
a1948 2
#define PERL_ARGS_ASSERT_REPEATCPY	\
	assert(to); assert(from)
a1955 2
#define PERL_ARGS_ASSERT_RNINSTR	\
	assert(big); assert(bigend); assert(little); assert(lend)
d1959 1
a1959 1
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* save)
a1960 2
#define PERL_ARGS_ASSERT_RSIGNAL_SAVE	\
	assert(save)
a1964 2
#define PERL_ARGS_ASSERT_RXRES_FREE	\
	assert(rsp)
d1966 1
a1966 1
PERL_CALLCONV void	Perl_rxres_restore(pTHX_ void **rsp, REGEXP *rx)
a1968 2
#define PERL_ARGS_ASSERT_RXRES_RESTORE	\
	assert(rsp); assert(rx)
d1970 1
a1970 1
PERL_CALLCONV void	Perl_rxres_save(pTHX_ void **rsp, REGEXP *rx)
a1972 2
#define PERL_ARGS_ASSERT_RXRES_SAVE	\
	assert(rsp); assert(rx)
a1977 2
#define PERL_ARGS_ASSERT_SAME_DIRENT	\
	assert(a); assert(b)
a1995 2
#define PERL_ARGS_ASSERT_SAVESHAREDPVN	\
	assert(pv)
a2000 2
#define PERL_ARGS_ASSERT_SAVESVPV	\
	assert(sv)
a2006 2
#define PERL_ARGS_ASSERT_SAVE_AELEM	\
	assert(av); assert(sptr)
a2010 2
#define PERL_ARGS_ASSERT_SAVE_APTR	\
	assert(aptr)
a2013 2
#define PERL_ARGS_ASSERT_SAVE_ARY	\
	assert(gv)
a2016 2
#define PERL_ARGS_ASSERT_SAVE_BOOL	\
	assert(boolp)
a2019 2
#define PERL_ARGS_ASSERT_SAVE_CLEARSV	\
	assert(svp)
d2021 1
a2021 1
PERL_CALLCONV void	Perl_save_delete(pTHX_ HV *hv, char *key, I32 klen)
a2023 2
#define PERL_ARGS_ASSERT_SAVE_DELETE	\
	assert(hv); assert(key)
a2026 2
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR	\
	assert(p)
d2029 3
a2031 3
/* PERL_CALLCONV void	Perl_save_freesv(pTHX_ SV* sv); */
/* PERL_CALLCONV void	Perl_save_freeop(pTHX_ OP* o); */
/* PERL_CALLCONV void	Perl_save_freepv(pTHX_ char* pv); */
a2033 2
#define PERL_ARGS_ASSERT_SAVE_GENERIC_SVREF	\
	assert(sptr)
a2036 2
#define PERL_ARGS_ASSERT_SAVE_GENERIC_PVREF	\
	assert(str)
a2039 2
#define PERL_ARGS_ASSERT_SAVE_SHARED_PVREF	\
	assert(str)
a2042 2
#define PERL_ARGS_ASSERT_SAVE_GP	\
	assert(gv)
a2045 2
#define PERL_ARGS_ASSERT_SAVE_HASH	\
	assert(gv)
d2047 1
a2047 2
PERL_CALLCONV void	Perl_save_hints(pTHX);
PERL_CALLCONV void	Perl_save_helem(pTHX_ HV *hv, SV *key, SV **sptr)
a2050 2
#define PERL_ARGS_ASSERT_SAVE_HELEM	\
	assert(hv); assert(key); assert(sptr)
a2053 2
#define PERL_ARGS_ASSERT_SAVE_HPTR	\
	assert(hptr)
a2056 2
#define PERL_ARGS_ASSERT_SAVE_I16	\
	assert(intp)
a2059 2
#define PERL_ARGS_ASSERT_SAVE_I32	\
	assert(intp)
a2062 2
#define PERL_ARGS_ASSERT_SAVE_I8	\
	assert(bytep)
a2065 2
#define PERL_ARGS_ASSERT_SAVE_INT	\
	assert(intp)
a2068 2
#define PERL_ARGS_ASSERT_SAVE_ITEM	\
	assert(item)
d2070 1
a2070 1
PERL_CALLCONV void	Perl_save_iv(pTHX_ IV *ivp)
a2071 2
#define PERL_ARGS_ASSERT_SAVE_IV	\
	assert(ivp)
a2074 2
#define PERL_ARGS_ASSERT_SAVE_LIST	\
	assert(sarg)
a2077 7
#define PERL_ARGS_ASSERT_SAVE_LONG	\
	assert(longp)

/* PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SAVE_MORTALIZESV	\
	assert(sv)
d2079 1
a2079 1
PERL_CALLCONV void	Perl_save_nogv(pTHX_ GV* gv)
a2080 2
#define PERL_ARGS_ASSERT_SAVE_NOGV	\
	assert(gv)
d2082 2
a2083 1
/* PERL_CALLCONV void	Perl_save_op(pTHX); */
a2085 2
#define PERL_ARGS_ASSERT_SAVE_SCALAR	\
	assert(gv)
a2088 2
#define PERL_ARGS_ASSERT_SAVE_PPTR	\
	assert(pptr)
d2090 1
a2090 1
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void *ptr)
a2091 2
#define PERL_ARGS_ASSERT_SAVE_VPTR	\
	assert(ptr)
a2094 1
PERL_CALLCONV void	Perl_save_padsv_and_mortalize(pTHX_ PADOFFSET off);
a2096 2
#define PERL_ARGS_ASSERT_SAVE_SPTR	\
	assert(sptr)
a2099 2
#define PERL_ARGS_ASSERT_SAVE_SVREF	\
	assert(sptr)
a2100 6
PERL_CALLCONV void	Perl_save_pushptr(pTHX_ void *const ptr, const int type);
PERL_CALLCONV void	Perl_save_pushi32ptr(pTHX_ const I32 i, void *const ptr, const int type);
PERL_CALLCONV void	Perl_save_pushptrptr(pTHX_ void *const ptr1, void *const ptr2, const int type);
#if defined(PERL_IN_SCOPE_C) || defined(PERL_DECL_PROT)
STATIC void	S_save_pushptri32ptr(pTHX_ void *const ptr1, const I32 i, void *const ptr2, const int type);
#endif
a2106 2
#define PERL_ARGS_ASSERT_SCALARVOID	\
	assert(o)
a2110 2
#define PERL_ARGS_ASSERT_SCAN_BIN	\
	assert(start); assert(retlen)
a2114 2
#define PERL_ARGS_ASSERT_SCAN_HEX	\
	assert(start); assert(retlen)
a2118 2
#define PERL_ARGS_ASSERT_SCAN_NUM	\
	assert(s); assert(lvalp)
a2122 2
#define PERL_ARGS_ASSERT_SCAN_OCT	\
	assert(start); assert(retlen)
d2125 1
a2125 1
PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV *bigstr, SV *littlestr, I32 start_shift, I32 end_shift, I32 *old_posp, I32 last)
a2128 2
#define PERL_ARGS_ASSERT_SCREAMINSTR	\
	assert(bigstr); assert(littlestr); assert(old_posp)
a2132 2
#define PERL_ARGS_ASSERT_SETENV_GETIX	\
	assert(nam)
a2137 2
#define PERL_ARGS_ASSERT_SHARE_HEK	\
	assert(str)
a2148 2
#define PERL_ARGS_ASSERT_STACK_GROW	\
	assert(sp); assert(p)
a2152 2
#define PERL_ARGS_ASSERT_SUB_CRUSH_DEPTH	\
	assert(cv)
a2155 2
#define PERL_ARGS_ASSERT_SV_2BOOL	\
	assert(sv)
a2159 2
#define PERL_ARGS_ASSERT_SV_2CV	\
	assert(st); assert(gvp)
a2162 2
#define PERL_ARGS_ASSERT_SV_2IO	\
	assert(sv)
d2164 1
a2164 1
#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
a2166 2
#define PERL_ARGS_ASSERT_GLOB_2NUMBER	\
	assert(gv)
a2169 2
#define PERL_ARGS_ASSERT_GLOB_2PV	\
	assert(gv)
d2172 6
a2177 2
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV* sv); */
PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV* sv, I32 flags);
d2179 3
a2181 1
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV* sv);
a2183 2
#define PERL_ARGS_ASSERT_SV_2NUM	\
	assert(sv)
d2185 6
a2190 2
/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV* sv, STRLEN* lp); */
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV* sv, STRLEN* lp, I32 flags);
a2192 2
#define PERL_ARGS_ASSERT_SV_2PVUTF8	\
	assert(sv)
a2195 2
#define PERL_ARGS_ASSERT_SV_2PVBYTE	\
	assert(sv)
a2198 2
#define PERL_ARGS_ASSERT_SV_PVN_NOMG	\
	assert(sv)
d2200 6
a2205 2
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV* sv); */
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV* sv, I32 flags);
a2207 2
#define PERL_ARGS_ASSERT_SV_IV	\
	assert(sv)
a2210 2
#define PERL_ARGS_ASSERT_SV_UV	\
	assert(sv)
a2213 2
#define PERL_ARGS_ASSERT_SV_NV	\
	assert(sv)
d2215 1
a2215 1
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *lp)
a2217 2
#define PERL_ARGS_ASSERT_SV_PVN	\
	assert(sv); assert(lp)
d2219 1
a2219 1
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *lp)
a2221 2
#define PERL_ARGS_ASSERT_SV_PVUTF8N	\
	assert(sv); assert(lp)
d2223 1
a2223 1
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *lp)
a2225 2
#define PERL_ARGS_ASSERT_SV_PVBYTEN	\
	assert(sv); assert(lp)
a2229 2
#define PERL_ARGS_ASSERT_SV_ADD_ARENA	\
	assert(ptr)
a2232 2
#define PERL_ARGS_ASSERT_SV_BACKOFF	\
	assert(sv)
a2236 2
#define PERL_ARGS_ASSERT_SV_BLESS	\
	assert(sv); assert(stash)
a2241 2
#define PERL_ARGS_ASSERT_SV_CATPVF	\
	assert(sv); assert(pat)
a2245 2
#define PERL_ARGS_ASSERT_SV_VCATPVF	\
	assert(sv); assert(pat)
d2248 2
a2249 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_CATPV	\
	assert(sv)
d2251 1
a2251 1
/* PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV *dsv, const char *sstr, STRLEN len)
a2253 2
#define PERL_ARGS_ASSERT_SV_CATPVN	\
	assert(dsv); assert(sstr)
d2255 1
a2255 1
/* PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV *dstr, SV *sstr)
a2256 2
#define PERL_ARGS_ASSERT_SV_CATSV	\
	assert(dstr)
a2259 2
#define PERL_ARGS_ASSERT_SV_CHOP	\
	assert(sv)
a2264 2
#define PERL_ARGS_ASSERT_SV_CLEAR	\
	assert(sv)
d2266 8
a2273 2
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV* sv1, SV* sv2);
PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV* sv1, SV* sv2);
a2277 2
#define PERL_ARGS_ASSERT_SV_COLLXFRM	\
	assert(sv); assert(nxp)
d2280 1
a2280 1
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV *sv, OP **startop, const char *code, PAD **padp)
a2284 2
#define PERL_ARGS_ASSERT_SV_COMPILE_2OP	\
	assert(sv); assert(startop); assert(code); assert(padp)
a2287 2
#define PERL_ARGS_ASSERT_GETCWD_SV	\
	assert(sv)
d2289 3
a2291 1
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV* sv);
a2293 2
#define PERL_ARGS_ASSERT_SV_DUMP	\
	assert(sv)
a2298 2
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM	\
	assert(sv); assert(name)
a2303 2
#define PERL_ARGS_ASSERT_SV_DOES	\
	assert(sv); assert(name)
a2308 2
#define PERL_ARGS_ASSERT_SV_FREE2	\
	assert(sv)
a2313 2
#define PERL_ARGS_ASSERT_SV_GETS	\
	assert(sv); assert(fp)
a2316 2
#define PERL_ARGS_ASSERT_SV_GROW	\
	assert(sv)
d2318 2
a2319 6
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV* sv);
/* PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV *bigstr, STRLEN offset, STRLEN len, const char *little, STRLEN littlelen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4); */
#define PERL_ARGS_ASSERT_SV_INSERT	\
	assert(bigstr); assert(little)
d2321 1
a2321 1
PERL_CALLCONV void	Perl_sv_insert_flags(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen, const U32 flags)
a2323 2
#define PERL_ARGS_ASSERT_SV_INSERT_FLAGS	\
	assert(bigstr); assert(little)
a2326 2
#define PERL_ARGS_ASSERT_SV_ISA	\
	assert(name)
a2332 2
#define PERL_ARGS_ASSERT_SV_MAGIC	\
	assert(sv)
a2335 2
#define PERL_ARGS_ASSERT_SV_MAGICEXT	\
	assert(sv)
a2347 2
#define PERL_ARGS_ASSERT_SV_POS_U2B	\
	assert(offsetp)
a2350 2
#define PERL_ARGS_ASSERT_SV_POS_B2U	\
	assert(offsetp)
a2353 2
#define PERL_ARGS_ASSERT_SV_PVN_FORCE	\
	assert(sv)
a2356 2
#define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE	\
	assert(sv)
a2359 2
#define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE	\
	assert(sv)
a2363 2
#define PERL_ARGS_ASSERT_SV_RECODE_TO_UTF8	\
	assert(sv); assert(encoding)
a2370 2
#define PERL_ARGS_ASSERT_SV_CAT_DECODE	\
	assert(dsv); assert(encoding); assert(ssv); assert(offset); assert(tstr)
a2374 2
#define PERL_ARGS_ASSERT_SV_REFTYPE	\
	assert(sv)
a2378 2
#define PERL_ARGS_ASSERT_SV_REPLACE	\
	assert(sv); assert(nsv)
a2382 2
#define PERL_ARGS_ASSERT_SV_RESET	\
	assert(s)
a2387 2
#define PERL_ARGS_ASSERT_SV_SETPVF	\
	assert(sv); assert(pat)
a2391 2
#define PERL_ARGS_ASSERT_SV_VSETPVF	\
	assert(sv); assert(pat)
a2394 2
#define PERL_ARGS_ASSERT_SV_SETIV	\
	assert(sv)
a2397 2
#define PERL_ARGS_ASSERT_SV_SETPVIV	\
	assert(sv)
a2400 2
#define PERL_ARGS_ASSERT_SV_SETUV	\
	assert(sv)
a2403 2
#define PERL_ARGS_ASSERT_SV_SETNV	\
	assert(sv)
a2406 2
#define PERL_ARGS_ASSERT_SV_SETREF_IV	\
	assert(rv)
a2409 2
#define PERL_ARGS_ASSERT_SV_SETREF_UV	\
	assert(rv)
a2412 2
#define PERL_ARGS_ASSERT_SV_SETREF_NV	\
	assert(rv)
a2415 2
#define PERL_ARGS_ASSERT_SV_SETREF_PV	\
	assert(rv)
a2419 2
#define PERL_ARGS_ASSERT_SV_SETREF_PVN	\
	assert(rv); assert(pv)
a2422 2
#define PERL_ARGS_ASSERT_SV_SETPV	\
	assert(sv)
a2425 2
#define PERL_ARGS_ASSERT_SV_SETPVN	\
	assert(sv)
d2427 1
a2427 1
/* PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV *dstr, SV *sstr)
a2428 2
#define PERL_ARGS_ASSERT_SV_SETSV	\
	assert(dstr)
a2431 2
#define PERL_ARGS_ASSERT_SV_TAINT	\
	assert(sv)
a2435 2
#define PERL_ARGS_ASSERT_SV_TAINTED	\
	assert(sv)
a2438 2
#define PERL_ARGS_ASSERT_SV_UNMAGIC	\
	assert(sv)
a2441 2
#define PERL_ARGS_ASSERT_SV_UNREF	\
	assert(sv)
d2443 1
a2443 1
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV *ref, U32 flags)
a2444 2
#define PERL_ARGS_ASSERT_SV_UNREF_FLAGS	\
	assert(ref)
a2447 2
#define PERL_ARGS_ASSERT_SV_UNTAINT	\
	assert(sv)
a2450 2
#define PERL_ARGS_ASSERT_SV_UPGRADE	\
	assert(sv)
a2453 2
#define PERL_ARGS_ASSERT_SV_USEPVN	\
	assert(sv)
a2456 2
#define PERL_ARGS_ASSERT_SV_USEPVN_FLAGS	\
	assert(sv)
a2460 2
#define PERL_ARGS_ASSERT_SV_VCATPVFN	\
	assert(sv); assert(pat)
a2464 2
#define PERL_ARGS_ASSERT_SV_VSETPVFN	\
	assert(sv); assert(pat)
a2468 2
#define PERL_ARGS_ASSERT_STR_TO_VERSION	\
	assert(sv)
a2473 2
#define PERL_ARGS_ASSERT_SWASH_INIT	\
	assert(pkg); assert(name); assert(listsv)
a2477 2
#define PERL_ARGS_ASSERT_SWASH_FETCH	\
	assert(swash); assert(ptr)
a2481 2
#define PERL_ARGS_ASSERT_TAINT_PROPER	\
	assert(s)
a2488 2
#define PERL_ARGS_ASSERT_TO_UTF8_CASE	\
	assert(p); assert(ustrp); assert(swashp); assert(normal); assert(special)
a2492 2
#define PERL_ARGS_ASSERT_TO_UTF8_LOWER	\
	assert(p); assert(ustrp)
a2496 2
#define PERL_ARGS_ASSERT_TO_UTF8_UPPER	\
	assert(p); assert(ustrp)
a2500 2
#define PERL_ARGS_ASSERT_TO_UTF8_TITLE	\
	assert(p); assert(ustrp)
a2504 2
#define PERL_ARGS_ASSERT_TO_UTF8_FOLD	\
	assert(p); assert(ustrp)
a2508 2
#define PERL_ARGS_ASSERT_UNLNK	\
	assert(f)
a2515 2
#define PERL_ARGS_ASSERT_UNPACK_STR	\
	assert(pat); assert(patend); assert(s); assert(strend)
a2521 2
#define PERL_ARGS_ASSERT_UNPACKSTRING	\
	assert(pat); assert(patend); assert(s); assert(strend)
a2527 2
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)
a2531 2
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)
a2537 2
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8	\
	assert(p); assert(d); assert(newlen)
a2542 2
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8_REVERSED	\
	assert(p); assert(d); assert(newlen)
a2548 2
#define PERL_ARGS_ASSERT_UTF8_LENGTH	\
	assert(s); assert(e)
a2554 2
#define PERL_ARGS_ASSERT_UTF8_DISTANCE	\
	assert(a); assert(b)
a2559 2
#define PERL_ARGS_ASSERT_UTF8_HOP	\
	assert(s)
a2563 2
#define PERL_ARGS_ASSERT_UTF8_TO_BYTES	\
	assert(s); assert(len)
a2567 2
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8	\
	assert(s); assert(len)
a2571 2
#define PERL_ARGS_ASSERT_BYTES_TO_UTF8	\
	assert(s); assert(len)
a2574 2
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR	\
	assert(s)
a2577 2
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI	\
	assert(s)
a2582 2
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)
a2586 2
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)
a2591 2
#define PERL_ARGS_ASSERT_UTF8N_TO_UVUNI	\
	assert(s)
a2596 2
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8	\
	assert(d)
a2600 2
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8	\
	assert(d)
a2605 2
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8	\
	assert(d)
a2608 2
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8_FLAGS	\
	assert(d)
a2611 2
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8_FLAGS	\
	assert(d)
a2615 2
#define PERL_ARGS_ASSERT_PV_UNI_DISPLAY	\
	assert(dsv); assert(spv)
a2620 2
#define PERL_ARGS_ASSERT_SV_UNI_DISPLAY	\
	assert(dsv); assert(ssv)
a2623 2
#define PERL_ARGS_ASSERT_VIVIFY_DEFELEM	\
	assert(sv)
a2626 2
#define PERL_ARGS_ASSERT_VIVIFY_REF	\
	assert(sv)
a2629 2
#define PERL_ARGS_ASSERT_WAIT4PID	\
	assert(statusp)
a2632 2
#define PERL_ARGS_ASSERT_PARSE_UNICODE_OPTS	\
	assert(popt)
a2642 2
#define PERL_ARGS_ASSERT_WARN	\
	assert(pat)
a2645 2
#define PERL_ARGS_ASSERT_VWARN	\
	assert(pat)
a2649 2
#define PERL_ARGS_ASSERT_WARNER	\
	assert(pat)
a2652 2
#define PERL_ARGS_ASSERT_VWARNER	\
	assert(pat)
a2655 2
#define PERL_ARGS_ASSERT_WATCH	\
	assert(addr)
a2658 2
#define PERL_ARGS_ASSERT_WHICHSIG	\
	assert(sig)
a2661 2
#define PERL_ARGS_ASSERT_WRITE_TO_STDERR	\
	assert(message)
a2664 2
#define PERL_ARGS_ASSERT_YYERROR	\
	assert(s)
d2668 1
a2668 1
PERL_CALLCONV void	Perl_parser_free(pTHX_ const yy_parser *parser)
a2669 2
#define PERL_ARGS_ASSERT_PARSER_FREE	\
	assert(parser)
a2672 2
#define PERL_ARGS_ASSERT_YYWARN	\
	assert(s)
a2676 2
#define PERL_ARGS_ASSERT_DUMP_MSTATS	\
	assert(s)
a2679 2
#define PERL_ARGS_ASSERT_GET_MSTATS	\
	assert(buf)
a2699 2
#define PERL_ARGS_ASSERT_FREE_GLOBAL_STRUCT	\
	assert(plvarsp)
a2707 2
#define PERL_ARGS_ASSERT_SV_CATPVF_MG	\
	assert(sv); assert(pat)
a2711 2
#define PERL_ARGS_ASSERT_SV_VCATPVF_MG	\
	assert(sv); assert(pat)
d2714 2
a2715 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_CATPV_MG	\
	assert(sv)
a2719 2
#define PERL_ARGS_ASSERT_SV_CATPVN_MG	\
	assert(sv); assert(ptr)
d2721 1
a2721 1
/* PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dsv, SV *ssv)
a2722 2
#define PERL_ARGS_ASSERT_SV_CATSV_MG	\
	assert(dsv)
a2727 2
#define PERL_ARGS_ASSERT_SV_SETPVF_MG	\
	assert(sv); assert(pat)
a2731 2
#define PERL_ARGS_ASSERT_SV_VSETPVF_MG	\
	assert(sv); assert(pat)
a2734 2
#define PERL_ARGS_ASSERT_SV_SETIV_MG	\
	assert(sv)
a2737 2
#define PERL_ARGS_ASSERT_SV_SETPVIV_MG	\
	assert(sv)
a2740 2
#define PERL_ARGS_ASSERT_SV_SETUV_MG	\
	assert(sv)
a2743 2
#define PERL_ARGS_ASSERT_SV_SETNV_MG	\
	assert(sv)
a2746 2
#define PERL_ARGS_ASSERT_SV_SETPV_MG	\
	assert(sv)
a2750 2
#define PERL_ARGS_ASSERT_SV_SETPVN_MG	\
	assert(sv); assert(ptr)
a2753 2
#define PERL_ARGS_ASSERT_SV_SETSV_MG	\
	assert(dstr)
a2756 2
#define PERL_ARGS_ASSERT_SV_USEPVN_MG	\
	assert(sv)
a2763 2
#define PERL_ARGS_ASSERT_PV_DISPLAY	\
	assert(dsv); assert(pv)
a2767 2
#define PERL_ARGS_ASSERT_PV_ESCAPE	\
	assert(dsv); assert(str)
a2771 2
#define PERL_ARGS_ASSERT_PV_PRETTY	\
	assert(dsv); assert(str)
a2776 2
#define PERL_ARGS_ASSERT_DUMP_INDENT	\
	assert(file); assert(pat)
a2780 2
#define PERL_ARGS_ASSERT_DUMP_VINDENT	\
	assert(file); assert(pat)
a2784 2
#define PERL_ARGS_ASSERT_DO_GV_DUMP	\
	assert(file); assert(name)
a2788 2
#define PERL_ARGS_ASSERT_DO_GVGV_DUMP	\
	assert(file); assert(name)
a2792 2
#define PERL_ARGS_ASSERT_DO_HV_DUMP	\
	assert(file); assert(name)
a2796 2
#define PERL_ARGS_ASSERT_DO_MAGIC_DUMP	\
	assert(file); assert(mg)
a2799 2
#define PERL_ARGS_ASSERT_DO_OP_DUMP	\
	assert(file)
a2802 2
#define PERL_ARGS_ASSERT_DO_PMOP_DUMP	\
	assert(file)
a2805 2
#define PERL_ARGS_ASSERT_DO_SV_DUMP	\
	assert(file)
a2811 2
#define PERL_ARGS_ASSERT_SV_2PV_NOLEN	\
	assert(sv)
a2815 2
#define PERL_ARGS_ASSERT_SV_2PVUTF8_NOLEN	\
	assert(sv)
a2819 2
#define PERL_ARGS_ASSERT_SV_2PVBYTE_NOLEN	\
	assert(sv)
a2823 2
#define PERL_ARGS_ASSERT_SV_PV	\
	assert(sv)
a2827 2
#define PERL_ARGS_ASSERT_SV_PVUTF8	\
	assert(sv)
a2831 2
#define PERL_ARGS_ASSERT_SV_PVBYTE	\
	assert(sv)
a2834 2
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE	\
	assert(sv)
a2837 5
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE	\
	assert(sv)

/* PERL_CALLCONV STRLEN	sv_utf8_upgrade_nomg(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
a2840 2
#define PERL_ARGS_ASSERT_SV_UTF8_ENCODE	\
	assert(sv)
a2843 2
#define PERL_ARGS_ASSERT_SV_UTF8_DECODE	\
	assert(sv)
a2846 2
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL	\
	assert(sv)
a2849 2
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL_FLAGS	\
	assert(sv)
a2853 2
#define PERL_ARGS_ASSERT_SV_RVWEAKEN	\
	assert(sv)
a2857 2
#define PERL_ARGS_ASSERT_MAGIC_KILLBACKREFS	\
	assert(sv); assert(mg)
a2871 2
#define PERL_ARGS_ASSERT_MY_ATTRS	\
	assert(o)
a2877 2
#define PERL_ARGS_ASSERT_CX_DUP	\
	assert(param)
a2881 2
#define PERL_ARGS_ASSERT_SI_DUP	\
	assert(param)
a2887 2
#define PERL_ARGS_ASSERT_SS_DUP	\
	assert(proto_perl); assert(param)
a2891 2
#define PERL_ARGS_ASSERT_ANY_DUP	\
	assert(proto_perl)
a2895 2
#define PERL_ARGS_ASSERT_HE_DUP	\
	assert(param)
a2899 2
#define PERL_ARGS_ASSERT_HEK_DUP	\
	assert(param)
a2903 2
#define PERL_ARGS_ASSERT_RE_DUP	\
	assert(param)
a2906 2
#define PERL_ARGS_ASSERT_FP_DUP	\
	assert(param)
a2913 2
#define PERL_ARGS_ASSERT_GP_DUP	\
	assert(param)
a2917 2
#define PERL_ARGS_ASSERT_MG_DUP	\
	assert(param)
a2921 2
#define PERL_ARGS_ASSERT_SV_DUP	\
	assert(param)
a2926 2
#define PERL_ARGS_ASSERT_RVPV_DUP	\
	assert(dstr); assert(sstr); assert(param)
d2929 1
a2930 2
#define PERL_ARGS_ASSERT_PARSER_DUP	\
	assert(param)
d2939 2
a2940 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PTR_TABLE_FETCH	\
	assert(tbl)
a2944 2
#define PERL_ARGS_ASSERT_PTR_TABLE_STORE	\
	assert(tbl); assert(newsv)
a2947 2
#define PERL_ARGS_ASSERT_PTR_TABLE_SPLIT	\
	assert(tbl)
a2955 2
#define PERL_ARGS_ASSERT_SYS_INTERN_DUP	\
	assert(src); assert(dst)
d2964 1
a2964 1
PERL_CALLCONV const char *	Perl_custom_op_name(pTHX_ const OP *o)
a2966 2
#define PERL_ARGS_ASSERT_CUSTOM_OP_NAME	\
	assert(o)
d2968 1
a2968 1
PERL_CALLCONV const char *	Perl_custom_op_desc(pTHX_ const OP *o)
a2970 2
#define PERL_ARGS_ASSERT_CUSTOM_OP_DESC	\
	assert(o)
a2988 2
#define PERL_ARGS_ASSERT_DO_TRANS_SIMPLE	\
	assert(sv)
a2992 2
#define PERL_ARGS_ASSERT_DO_TRANS_COUNT	\
	assert(sv)
a2996 2
#define PERL_ARGS_ASSERT_DO_TRANS_COMPLEX	\
	assert(sv)
a3000 2
#define PERL_ARGS_ASSERT_DO_TRANS_SIMPLE_UTF8	\
	assert(sv)
a3004 2
#define PERL_ARGS_ASSERT_DO_TRANS_COUNT_UTF8	\
	assert(sv)
a3008 2
#define PERL_ARGS_ASSERT_DO_TRANS_COMPLEX_UTF8	\
	assert(sv)
a3014 2
#define PERL_ARGS_ASSERT_GV_INIT_SV	\
	assert(gv)
a3017 2
#define PERL_ARGS_ASSERT_GV_GET_SUPER_PKG	\
	assert(name)
a3023 2
#define PERL_ARGS_ASSERT_REQUIRE_TIE_MOD	\
	assert(gv); assert(varpv); assert(namesv); assert(methpv)
a3034 2
#define PERL_ARGS_ASSERT_HSPLIT	\
	assert(hv)
a3037 2
#define PERL_ARGS_ASSERT_HFREEENTRIES	\
	assert(hv)
a3046 2
#define PERL_ARGS_ASSERT_SAVE_HEK_FLAGS	\
	assert(str)
a3051 2
#define PERL_ARGS_ASSERT_HV_MAGIC_CHECK	\
	assert(hv); assert(needs_copy); assert(needs_store)
d3054 1
a3054 1
STATIC HEK*	S_share_hek_flags(pTHX_ const char *str, I32 len, U32 hash, int flags)
a3056 2
#define PERL_ARGS_ASSERT_SHARE_HEK_FLAGS	\
	assert(str)
a3061 2
#define PERL_ARGS_ASSERT_HV_NOTALLOWED	\
	assert(key); assert(msg)
a3064 2
#define PERL_ARGS_ASSERT_HV_AUXINIT	\
	assert(hv)
d3066 2
a3067 2
STATIC SV*	S_hv_delete_common(pTHX_ HV *hv, SV *keysv, const char *key, STRLEN klen, int k_flags, I32 d_flags, U32 hash);
STATIC void	S_clear_placeholders(pTHX_ HV *hv, U32 items)
a3068 2
#define PERL_ARGS_ASSERT_CLEAR_PLACEHOLDERS	\
	assert(hv)
a3071 2
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_VALUE	\
	assert(he)
a3077 2
#define PERL_ARGS_ASSERT_SAVE_MAGIC	\
	assert(sv)
a3082 2
#define PERL_ARGS_ASSERT_MAGIC_METHPACK	\
	assert(sv); assert(mg); assert(meth)
a3087 2
#define PERL_ARGS_ASSERT_MAGIC_METHCALL	\
	assert(sv); assert(mg); assert(meth)
d3089 3
a3091 1
STATIC void	S_restore_magic(pTHX_ const void *p);
a3093 2
#define PERL_ARGS_ASSERT_UNWIND_HANDLER_STACK	\
	assert(p)
a3101 2
#define PERL_ARGS_ASSERT_CK_ANONCODE	\
	assert(o)
a3105 2
#define PERL_ARGS_ASSERT_CK_BITOP	\
	assert(o)
a3109 2
#define PERL_ARGS_ASSERT_CK_CONCAT	\
	assert(o)
a3113 2
#define PERL_ARGS_ASSERT_CK_DEFINED	\
	assert(o)
a3117 2
#define PERL_ARGS_ASSERT_CK_DELETE	\
	assert(o)
a3121 2
#define PERL_ARGS_ASSERT_CK_DIE	\
	assert(o)
a3125 2
#define PERL_ARGS_ASSERT_CK_EOF	\
	assert(o)
a3129 2
#define PERL_ARGS_ASSERT_CK_EVAL	\
	assert(o)
a3133 2
#define PERL_ARGS_ASSERT_CK_EXEC	\
	assert(o)
a3137 2
#define PERL_ARGS_ASSERT_CK_EXISTS	\
	assert(o)
a3141 2
#define PERL_ARGS_ASSERT_CK_EXIT	\
	assert(o)
a3145 2
#define PERL_ARGS_ASSERT_CK_FTST	\
	assert(o)
a3149 2
#define PERL_ARGS_ASSERT_CK_FUN	\
	assert(o)
a3153 2
#define PERL_ARGS_ASSERT_CK_GLOB	\
	assert(o)
a3157 2
#define PERL_ARGS_ASSERT_CK_GREP	\
	assert(o)
a3161 2
#define PERL_ARGS_ASSERT_CK_INDEX	\
	assert(o)
a3165 2
#define PERL_ARGS_ASSERT_CK_JOIN	\
	assert(o)
a3169 2
#define PERL_ARGS_ASSERT_CK_LENGTHCONST	\
	assert(o)
a3173 2
#define PERL_ARGS_ASSERT_CK_LFUN	\
	assert(o)
a3177 2
#define PERL_ARGS_ASSERT_CK_LISTIOB	\
	assert(o)
a3181 2
#define PERL_ARGS_ASSERT_CK_MATCH	\
	assert(o)
a3185 2
#define PERL_ARGS_ASSERT_CK_METHOD	\
	assert(o)
a3189 2
#define PERL_ARGS_ASSERT_CK_NULL	\
	assert(o)
a3193 2
#define PERL_ARGS_ASSERT_CK_OPEN	\
	assert(o)
a3197 2
#define PERL_ARGS_ASSERT_CK_READLINE	\
	assert(o)
a3201 2
#define PERL_ARGS_ASSERT_CK_REPEAT	\
	assert(o)
d3206 4
a3209 2
#define PERL_ARGS_ASSERT_CK_REQUIRE	\
	assert(o)
a3213 2
#define PERL_ARGS_ASSERT_CK_RETURN	\
	assert(o)
a3217 2
#define PERL_ARGS_ASSERT_CK_RFUN	\
	assert(o)
a3221 2
#define PERL_ARGS_ASSERT_CK_RVCONST	\
	assert(o)
a3225 2
#define PERL_ARGS_ASSERT_CK_SASSIGN	\
	assert(o)
a3229 2
#define PERL_ARGS_ASSERT_CK_SELECT	\
	assert(o)
a3233 2
#define PERL_ARGS_ASSERT_CK_SHIFT	\
	assert(o)
a3237 2
#define PERL_ARGS_ASSERT_CK_SORT	\
	assert(o)
a3241 2
#define PERL_ARGS_ASSERT_CK_SPAIR	\
	assert(o)
a3245 2
#define PERL_ARGS_ASSERT_CK_SPLIT	\
	assert(o)
a3249 2
#define PERL_ARGS_ASSERT_CK_SUBR	\
	assert(o)
a3253 2
#define PERL_ARGS_ASSERT_CK_SUBSTR	\
	assert(o)
a3257 2
#define PERL_ARGS_ASSERT_CK_SVCONST	\
	assert(o)
a3261 2
#define PERL_ARGS_ASSERT_CK_TRUNC	\
	assert(o)
a3265 2
#define PERL_ARGS_ASSERT_CK_UNPACK	\
	assert(o)
a3269 2
#define PERL_ARGS_ASSERT_IS_HANDLE_CONSTRUCTOR	\
	assert(o)
a3276 2
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
	assert(o)
a3280 2
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
	assert(o)
a3284 2
#define PERL_ARGS_ASSERT_FIND_AND_FORGET_PMOPS	\
	assert(o)
a3287 2
#define PERL_ARGS_ASSERT_COP_FREE	\
	assert(cop)
a3291 2
#define PERL_ARGS_ASSERT_SCALARBOOLEAN	\
	assert(o)
a3295 6
STATIC OP*	S_search_const(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SEARCH_CONST	\
	assert(o)

a3299 2
#define PERL_ARGS_ASSERT_NEW_LOGOP	\
	assert(firstp); assert(otherp)
a3302 2
#define PERL_ARGS_ASSERT_SIMPLIFY_SORT	\
	assert(o)
a3305 2
#define PERL_ARGS_ASSERT_GV_ENAME	\
	assert(gv)
a3309 2
#define PERL_ARGS_ASSERT_SCALAR_MOD_TYPE	\
	assert(o)
a3312 2
#define PERL_ARGS_ASSERT_MY_KID	\
	assert(imopsp)
a3315 2
#define PERL_ARGS_ASSERT_DUP_ATTRLIST	\
	assert(o)
a3319 2
#define PERL_ARGS_ASSERT_APPLY_ATTRS	\
	assert(stash); assert(target)
a3324 2
#define PERL_ARGS_ASSERT_APPLY_ATTRS_MY	\
	assert(stash); assert(target); assert(imopsp)
a3329 2
#define PERL_ARGS_ASSERT_BAD_TYPE	\
	assert(t); assert(name); assert(kid)
a3332 2
#define PERL_ARGS_ASSERT_NO_BAREWORD_ALLOWED	\
	assert(o)
a3336 2
#define PERL_ARGS_ASSERT_NO_FH_ALLOWED	\
	assert(o)
a3341 2
#define PERL_ARGS_ASSERT_TOO_FEW_ARGUMENTS	\
	assert(o); assert(name)
a3346 2
#define PERL_ARGS_ASSERT_TOO_MANY_ARGUMENTS	\
	assert(o); assert(name)
a3349 2
#define PERL_ARGS_ASSERT_LOOKS_LIKE_BOOL	\
	assert(o)
a3352 2
#define PERL_ARGS_ASSERT_NEWGIVWHENOP	\
	assert(block)
a3358 2
#define PERL_ARGS_ASSERT_PROCESS_SPECIAL_BLOCKS	\
	assert(fullname); assert(gv); assert(cv)
a3367 2
#define PERL_ARGS_ASSERT_SLAB_FREE	\
	assert(op)
a3373 2
#define PERL_ARGS_ASSERT_OP_REFCNT_DEC	\
	assert(o)
a3377 2
#define PERL_ARGS_ASSERT_SLAB_TO_RW	\
	assert(op)
a3386 2
#define PERL_ARGS_ASSERT_FIND_BEGINNING	\
	assert(linestr_sv); assert(rsfp)
d3388 1
a3388 1
STATIC void	S_forbid_setid(pTHX_ const char flag, const bool suidscript);
a3395 2
#define PERL_ARGS_ASSERT_INIT_POSTDUMP_SYMBOLS	\
	assert(argv)
d3402 1
a3402 1
STATIC int	S_open_script(pTHX_ const char *scriptname, bool dosearch, SV *sv, bool *suidscript, PerlIO **rsfpp)
a3406 2
#define PERL_ARGS_ASSERT_OPEN_SCRIPT	\
	assert(scriptname); assert(sv); assert(suidscript); assert(rsfpp)
a3409 2
#define PERL_ARGS_ASSERT_USAGE	\
	assert(name)
d3411 1
a3411 11
#ifdef DOSUID
#  ifdef IAMSUID
STATIC void	S_validate_suid(pTHX_ const char *validarg, int fdscript, bool suidscript, SV* linestr_sv, PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_VALIDATE_SUID	\
	assert(validarg); assert(linestr_sv); assert(rsfp)

#  else
STATIC void	S_validate_suid(pTHX_ const char *validarg, const char *scriptname, int fdscript, SV* linestr_sv, PerlIO *rsfp)
d3414 2
a3415 4
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_VALIDATE_SUID	\
	assert(validarg); assert(scriptname); assert(linestr_sv); assert(rsfp)
a3416 10
#  endif
#else
#  ifndef SETUID_SCRIPTS_ARE_SECURE_NOW
STATIC void	S_validate_suid(pTHX_ PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VALIDATE_SUID	\
	assert(rsfp)

#  endif
#endif
a3426 2
#define PERL_ARGS_ASSERT_INCPUSH_IF_EXISTS	\
	assert(dir)
a3433 2
#define PERL_ARGS_ASSERT_REFTO	\
	assert(sv)
a3441 2
#define PERL_ARGS_ASSERT_SOFTREF2XV	\
	assert(sv); assert(what); assert(spp)
a3450 2
#define PERL_ARGS_ASSERT_UNPACK_REC	\
	assert(symptr); assert(s); assert(strbeg); assert(strend)
a3456 2
#define PERL_ARGS_ASSERT_PACK_REC	\
	assert(cat); assert(symptr); assert(beglist); assert(endlist)
a3459 2
#define PERL_ARGS_ASSERT_MUL128	\
	assert(sv)
a3462 2
#define PERL_ARGS_ASSERT_MEASURE_STRUCT	\
	assert(symptr)
a3465 2
#define PERL_ARGS_ASSERT_NEXT_SYMBOL	\
	assert(symptr)
a3469 2
#define PERL_ARGS_ASSERT_IS_AN_INT	\
	assert(s)
a3473 2
#define PERL_ARGS_ASSERT_DIV128	\
	assert(pnum); assert(done)
d3475 1
a3475 1
STATIC const char *	S_group_end(pTHX_ const char *patptr, const char *patend, char ender)
a3477 2
#define PERL_ARGS_ASSERT_GROUP_END	\
	assert(patptr); assert(patend)
d3479 1
a3479 1
STATIC const char *	S_get_num(pTHX_ const char *patptr, I32 *lenptr)
a3482 2
#define PERL_ARGS_ASSERT_GET_NUM	\
	assert(patptr); assert(lenptr)
a3486 2
#define PERL_ARGS_ASSERT_NEED_UTF8	\
	assert(pat); assert(patend)
a3490 2
#define PERL_ARGS_ASSERT_FIRST_SYMBOL	\
	assert(pat); assert(patend)
a3494 2
#define PERL_ARGS_ASSERT_SV_EXP_GROW	\
	assert(sv)
a3499 2
#define PERL_ARGS_ASSERT_BYTES_TO_UNI	\
	assert(start); assert(dest)
a3512 2
#define PERL_ARGS_ASSERT_DOFINDLABEL	\
	assert(o); assert(label); assert(opstack); assert(oplimit)
a3516 2
#define PERL_ARGS_ASSERT_DOPARSEFORM	\
	assert(sv)
a3529 2
#define PERL_ARGS_ASSERT_DOPOPTOLABEL	\
	assert(label)
a3536 2
#define PERL_ARGS_ASSERT_DOPOPTOSUB_AT	\
	assert(cxstk)
a3542 2
#define PERL_ARGS_ASSERT_SAVE_LINES	\
	assert(sv)
a3547 2
#define PERL_ARGS_ASSERT_CHECK_TYPE_AND_OPEN	\
	assert(name)
a3552 2
#define PERL_ARGS_ASSERT_DOOPEN_PM	\
	assert(name)
a3557 2
#define PERL_ARGS_ASSERT_PATH_IS_ABSOLUTE	\
	assert(name)
a3561 2
#define PERL_ARGS_ASSERT_RUN_USER_FILTER	\
	assert(buf_sv)
d3563 1
a3563 1
STATIC PMOP*	S_make_matcher(pTHX_ REGEXP* re)
a3565 2
#define PERL_ARGS_ASSERT_MAKE_MATCHER	\
	assert(re)
a3570 2
#define PERL_ARGS_ASSERT_MATCHER_MATCHES_SV	\
	assert(matcher); assert(sv)
a3573 2
#define PERL_ARGS_ASSERT_DESTROY_MATCHER	\
	assert(matcher)
a3582 2
#define PERL_ARGS_ASSERT_DO_ODDBALL	\
	assert(hash); assert(relem); assert(firstrelem)
a3586 2
#define PERL_ARGS_ASSERT_METHOD_COMMON	\
	assert(meth)
a3593 2
#define PERL_ARGS_ASSERT_SV_NCMP	\
	assert(a); assert(b)
a3597 2
#define PERL_ARGS_ASSERT_SV_I_NCMP	\
	assert(a); assert(b)
a3601 2
#define PERL_ARGS_ASSERT_AMAGIC_NCMP	\
	assert(a); assert(b)
a3605 2
#define PERL_ARGS_ASSERT_AMAGIC_I_NCMP	\
	assert(a); assert(b)
d3607 1
a3607 1
STATIC I32	S_amagic_cmp(pTHX_ SV *str1, SV *str2)
a3609 2
#define PERL_ARGS_ASSERT_AMAGIC_CMP	\
	assert(str1); assert(str2)
d3611 1
a3611 1
STATIC I32	S_amagic_cmp_locale(pTHX_ SV *str1, SV *str2)
a3613 2
#define PERL_ARGS_ASSERT_AMAGIC_CMP_LOCALE	\
	assert(str1); assert(str2)
a3617 2
#define PERL_ARGS_ASSERT_SORTCV	\
	assert(a); assert(b)
a3621 2
#define PERL_ARGS_ASSERT_SORTCV_XSUB	\
	assert(a); assert(b)
a3625 2
#define PERL_ARGS_ASSERT_SORTCV_STACKED	\
	assert(a); assert(b)
d3628 1
a3629 2
#define PERL_ARGS_ASSERT_QSORTSVU	\
	assert(compare)
a3637 2
#define PERL_ARGS_ASSERT_DOFORM	\
	assert(cv); assert(gv); assert(retop)
a3643 2
#define PERL_ARGS_ASSERT_DOONELINER	\
	assert(cmd); assert(filename)
a3647 2
#define PERL_ARGS_ASSERT_SPACE_JOIN_NAMES_MORTAL	\
	assert(array)
d3652 1
a3652 1
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth)
a3654 2
#define PERL_ARGS_ASSERT_REG	\
	assert(pRExC_state); assert(flagp)
d3656 1
a3656 1
STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t *pRExC_state, U8 op, U32 arg)
a3657 2
#define PERL_ARGS_ASSERT_REGANODE	\
	assert(pRExC_state)
d3659 1
a3659 1
STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
a3661 2
#define PERL_ARGS_ASSERT_REGATOM	\
	assert(pRExC_state); assert(flagp)
d3663 1
a3663 1
STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, I32 first, U32 depth)
a3665 2
#define PERL_ARGS_ASSERT_REGBRANCH	\
	assert(pRExC_state); assert(flagp)
d3667 1
a3667 1
STATIC STRLEN	S_reguni(pTHX_ const struct RExC_state_t *pRExC_state, UV uv, char *s)
a3669 2
#define PERL_ARGS_ASSERT_REGUNI	\
	assert(pRExC_state); assert(s)
d3671 1
a3671 1
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *pRExC_state, U32 depth)
a3672 2
#define PERL_ARGS_ASSERT_REGCLASS	\
	assert(pRExC_state)
d3674 1
a3674 1
STATIC I32	S_regcurly(const char *s)
a3676 2
#define PERL_ARGS_ASSERT_REGCURLY	\
	assert(s)
d3678 1
a3678 1
STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t *pRExC_state, U8 op)
a3679 2
#define PERL_ARGS_ASSERT_REG_NODE	\
	assert(pRExC_state)
a3682 2
#define PERL_ARGS_ASSERT_REG_RECODE	\
	assert(encp)
d3684 1
a3684 1
STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
a3686 2
#define PERL_ARGS_ASSERT_REGPIECE	\
	assert(pRExC_state); assert(flagp)
d3688 1
a3688 1
STATIC regnode*	S_reg_namedseq(pTHX_ struct RExC_state_t *pRExC_state, UV *valuep)
a3689 2
#define PERL_ARGS_ASSERT_REG_NAMEDSEQ	\
	assert(pRExC_state)
d3691 1
a3691 1
STATIC void	S_reginsert(pTHX_ struct RExC_state_t *pRExC_state, U8 op, regnode *opnd, U32 depth)
a3693 2
#define PERL_ARGS_ASSERT_REGINSERT	\
	assert(pRExC_state); assert(opnd)
d3695 1
a3695 1
STATIC void	S_regtail(pTHX_ struct RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
a3698 2
#define PERL_ARGS_ASSERT_REGTAIL	\
	assert(pRExC_state); assert(p); assert(val)
d3700 1
a3700 1
STATIC SV *	S_reg_scan_name(pTHX_ struct RExC_state_t *pRExC_state, U32 flags)
a3701 2
#define PERL_ARGS_ASSERT_REG_SCAN_NAME	\
	assert(pRExC_state)
d3703 1
a3703 1
STATIC U32	S_join_exact(pTHX_ struct RExC_state_t *pRExC_state, regnode *scan, I32 *min, U32 flags, regnode *val, U32 depth)
a3706 2
#define PERL_ARGS_ASSERT_JOIN_EXACT	\
	assert(pRExC_state); assert(scan); assert(min)
d3708 1
a3708 1
STATIC char *	S_regwhite(struct RExC_state_t *pRExC_state, char *p)
a3711 2
#define PERL_ARGS_ASSERT_REGWHITE	\
	assert(pRExC_state); assert(p)
d3713 1
a3713 1
STATIC char *	S_nextchar(pTHX_ struct RExC_state_t *pRExC_state)
a3714 2
#define PERL_ARGS_ASSERT_NEXTCHAR	\
	assert(pRExC_state)
d3716 1
a3716 1
STATIC bool	S_reg_skipcomment(pTHX_ struct RExC_state_t *pRExC_state)
a3717 2
#define PERL_ARGS_ASSERT_REG_SKIPCOMMENT	\
	assert(pRExC_state)
d3719 1
a3719 1
STATIC void	S_scan_commit(pTHX_ const struct RExC_state_t *pRExC_state, struct scan_data_t *data, I32 *minlenp, int is_inf)
a3722 2
#define PERL_ARGS_ASSERT_SCAN_COMMIT	\
	assert(pRExC_state); assert(data); assert(minlenp)
d3724 1
a3724 1
STATIC void	S_cl_anything(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
a3726 2
#define PERL_ARGS_ASSERT_CL_ANYTHING	\
	assert(pRExC_state); assert(cl)
a3730 2
#define PERL_ARGS_ASSERT_CL_IS_ANYTHING	\
	assert(cl)
d3732 1
a3732 1
STATIC void	S_cl_init(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
a3734 2
#define PERL_ARGS_ASSERT_CL_INIT	\
	assert(pRExC_state); assert(cl)
d3736 1
a3736 1
STATIC void	S_cl_init_zero(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
a3738 2
#define PERL_ARGS_ASSERT_CL_INIT_ZERO	\
	assert(pRExC_state); assert(cl)
a3742 2
#define PERL_ARGS_ASSERT_CL_AND	\
	assert(cl); assert(and_with)
d3744 1
a3744 1
STATIC void	S_cl_or(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl, const struct regnode_charclass_class *or_with)
a3747 2
#define PERL_ARGS_ASSERT_CL_OR	\
	assert(pRExC_state); assert(cl); assert(or_with)
d3749 1
a3749 1
STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t *pRExC_state, regnode **scanp, I32 *minlenp, I32 *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U8* recursed, struct regnode_charclass_class *and_withp, U32 flags, U32 depth)
a3754 2
#define PERL_ARGS_ASSERT_STUDY_CHUNK	\
	assert(pRExC_state); assert(scanp); assert(minlenp); assert(deltap); assert(last)
d3756 1
a3756 1
STATIC U32	S_add_data(struct RExC_state_t *pRExC_state, U32 n, const char *s)
a3759 2
#define PERL_ARGS_ASSERT_ADD_DATA	\
	assert(pRExC_state); assert(s)
a3764 2
#define PERL_ARGS_ASSERT_RE_CROAK2	\
	assert(pat1); assert(pat2)
d3766 1
a3766 1
STATIC I32	S_regpposixcc(pTHX_ struct RExC_state_t *pRExC_state, I32 value)
a3767 2
#define PERL_ARGS_ASSERT_REGPPOSIXCC	\
	assert(pRExC_state)
d3769 1
a3769 1
STATIC void	S_checkposixcc(pTHX_ struct RExC_state_t *pRExC_state)
a3770 2
#define PERL_ARGS_ASSERT_CHECKPOSIXCC	\
	assert(pRExC_state)
d3772 1
a3772 1
STATIC I32	S_make_trie(pTHX_ struct RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
a3777 2
#define PERL_ARGS_ASSERT_MAKE_TRIE	\
	assert(pRExC_state); assert(startbranch); assert(first); assert(last); assert(tail)
d3779 1
a3779 1
STATIC void	S_make_trie_failtable(pTHX_ struct RExC_state_t *pRExC_state, regnode *source, regnode *stclass, U32 depth)
a3782 2
#define PERL_ARGS_ASSERT_MAKE_TRIE_FAILTABLE	\
	assert(pRExC_state); assert(source); assert(stclass)
a3790 2
#define PERL_ARGS_ASSERT_DUMPUNTIL	\
	assert(r); assert(start); assert(node); assert(sv)
a3793 2
#define PERL_ARGS_ASSERT_PUT_BYTE	\
	assert(sv)
a3797 2
#define PERL_ARGS_ASSERT_DUMP_TRIE	\
	assert(trie); assert(revcharmap)
a3801 2
#define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_LIST	\
	assert(trie); assert(revcharmap)
a3805 2
#define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_TABLE	\
	assert(trie); assert(revcharmap)
d3807 1
a3807 1
STATIC U8	S_regtail_study(pTHX_ struct RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
a3810 2
#define PERL_ARGS_ASSERT_REGTAIL_STUDY	\
	assert(pRExC_state); assert(p); assert(val)
a3819 2
#define PERL_ARGS_ASSERT_REGMATCH	\
	assert(reginfo); assert(prog)
a3824 2
#define PERL_ARGS_ASSERT_REGREPEAT	\
	assert(prog); assert(p)
a3829 2
#define PERL_ARGS_ASSERT_REGTRY	\
	assert(reginfo); assert(startpos)
a3834 2
#define PERL_ARGS_ASSERT_REGINCLASS	\
	assert(n); assert(p)
a3838 2
#define PERL_ARGS_ASSERT_REGCPPOP	\
	assert(rex)
d3840 1
a3840 1
STATIC U8*	S_reghop3(U8 *s, I32 off, const U8 *lim)
a3843 2
#define PERL_ARGS_ASSERT_REGHOP3	\
	assert(s); assert(lim)
d3846 1
a3846 1
STATIC U8*	S_reghop4(U8 *s, I32 off, const U8 *llim, const U8 *rlim)
a3850 2
#define PERL_ARGS_ASSERT_REGHOP4	\
	assert(s); assert(llim); assert(rlim)
d3853 1
a3853 1
STATIC U8*	S_reghopmaybe3(U8 *s, I32 off, const U8 *lim)
a3856 2
#define PERL_ARGS_ASSERT_REGHOPMAYBE3	\
	assert(s); assert(lim)
a3863 2
#define PERL_ARGS_ASSERT_FIND_BYCLASS	\
	assert(prog); assert(c); assert(s); assert(strend)
a3866 2
#define PERL_ARGS_ASSERT_SWAP_MATCH_BUFF	\
	assert(prog)
a3869 2
#define PERL_ARGS_ASSERT_TO_UTF8_SUBSTR	\
	assert(prog)
a3872 2
#define PERL_ARGS_ASSERT_TO_BYTE_SUBSTR	\
	assert(prog)
d3874 1
a3874 1
STATIC I32	S_reg_check_named_buff_matched(pTHX_ const regexp *rex, const regnode *scan)
a3877 2
#define PERL_ARGS_ASSERT_REG_CHECK_NAMED_BUFF_MATCHED	\
	assert(rex); assert(scan)
a3885 2
#define PERL_ARGS_ASSERT_DUMP_EXEC_POS	\
	assert(locinput); assert(scan); assert(loc_regeol); assert(loc_bostr); assert(loc_reg_starttry)
d3887 1
a3887 1
STATIC void	S_debug_start_match(pTHX_ const REGEXP *prog, const bool do_utf8, const char *start, const char *end, const char *blurb)
a3891 2
#define PERL_ARGS_ASSERT_DEBUG_START_MATCH	\
	assert(prog); assert(start); assert(end); assert(blurb)
a3899 2
#define PERL_ARGS_ASSERT_DEBPROF	\
	assert(o)
a3905 2
#define PERL_ARGS_ASSERT_PM_DESCRIPTION	\
	assert(pm)
a3911 2
#define PERL_ARGS_ASSERT_SAVE_SCALAR_AT	\
	assert(sptr)
a3918 2
#define PERL_ARGS_ASSERT_SV_ADD_BACKREF	\
	assert(tsv); assert(sv)
a3925 2
#define PERL_ARGS_ASSERT_SV_KILL_BACKREFS	\
	assert(sv); assert(av)
a3933 2
#define PERL_ARGS_ASSERT_UIV_2BUF	\
	assert(buf); assert(peob)
a3936 2
#define PERL_ARGS_ASSERT_SV_UNGLOB	\
	assert(sv)
a3939 2
#define PERL_ARGS_ASSERT_NOT_A_NUMBER	\
	assert(sv)
a3942 2
#define PERL_ARGS_ASSERT_VISIT	\
	assert(f)
d3944 1
a3944 1
STATIC void	S_sv_del_backref(pTHX_ SV *tsv, SV *sv)
a3946 2
#define PERL_ARGS_ASSERT_SV_DEL_BACKREF	\
	assert(tsv); assert(sv)
a3953 2
#define PERL_ARGS_ASSERT_DEL_SV	\
	assert(p)
a3956 1
#    ifdef DEBUGGING
a3958 8
#define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE	\
	assert(sv)

#    else
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE	\
	assert(sv)
a3959 1
#    endif
a3963 2
#define PERL_ARGS_ASSERT_EXPECT_NUMBER	\
	assert(pattern)
a3968 2
#define PERL_ARGS_ASSERT_SV_POS_U2B_FORWARDS	\
	assert(start); assert(send)
a3972 2
#define PERL_ARGS_ASSERT_SV_POS_U2B_MIDWAY	\
	assert(start); assert(send)
a3978 2
#define PERL_ARGS_ASSERT_SV_POS_U2B_CACHED	\
	assert(sv); assert(mgp); assert(start); assert(send)
a3982 2
#define PERL_ARGS_ASSERT_UTF8_MG_POS_CACHE_UPDATE	\
	assert(sv); assert(mgp)
a3987 2
#define PERL_ARGS_ASSERT_SV_POS_B2U_MIDWAY	\
	assert(s); assert(target); assert(end)
a3991 2
#define PERL_ARGS_ASSERT_F0CONVERT	\
	assert(endbuf); assert(len)
a3997 2
#define PERL_ARGS_ASSERT_SV_RELEASE_COW	\
	assert(sv); assert(pvx); assert(after)
a4003 2
#define PERL_ARGS_ASSERT_SV_2IUV_COMMON	\
	assert(sv)
a4007 2
#define PERL_ARGS_ASSERT_GLOB_ASSIGN_GLOB	\
	assert(dstr); assert(sstr)
a4011 2
#define PERL_ARGS_ASSERT_GLOB_ASSIGN_REF	\
	assert(dstr); assert(sstr)
d4015 2
a4016 3
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PTR_TABLE_FIND	\
	assert(tbl)
d4023 1
a4023 1
STATIC char*	S_force_version(pTHX_ char *s, int guessing)
a4024 2
#define PERL_ARGS_ASSERT_FORCE_VERSION	\
	assert(s)
a4027 2
#define PERL_ARGS_ASSERT_FORCE_WORD	\
	assert(start)
a4030 2
#define PERL_ARGS_ASSERT_TOKEQ	\
	assert(sv)
a4035 2
#define PERL_ARGS_ASSERT_SCAN_CONST	\
	assert(start)
a4039 2
#define PERL_ARGS_ASSERT_SCAN_FORMLINE	\
	assert(s)
a4043 2
#define PERL_ARGS_ASSERT_SCAN_HEREDOC	\
	assert(s)
a4048 2
#define PERL_ARGS_ASSERT_SCAN_IDENT	\
	assert(s); assert(send); assert(dest)
a4052 2
#define PERL_ARGS_ASSERT_SCAN_INPUTSYMBOL	\
	assert(start)
a4056 2
#define PERL_ARGS_ASSERT_SCAN_PAT	\
	assert(start)
a4060 2
#define PERL_ARGS_ASSERT_SCAN_STR	\
	assert(start)
a4064 2
#define PERL_ARGS_ASSERT_SCAN_SUBST	\
	assert(start)
a4068 2
#define PERL_ARGS_ASSERT_SCAN_TRANS	\
	assert(start)
a4073 2
#define PERL_ARGS_ASSERT_SCAN_WORD	\
	assert(s); assert(dest); assert(slp)
a4078 2
#define PERL_ARGS_ASSERT_SKIPSPACE	\
	assert(s)
a4082 2
#define PERL_ARGS_ASSERT_SWALLOW_BOM	\
	assert(s)
a4087 2
#define PERL_ARGS_ASSERT_CHECKCOMMA	\
	assert(s); assert(name); assert(what)
a4090 2
#define PERL_ARGS_ASSERT_FEATURE_IS_ENABLED	\
	assert(name)
a4093 2
#define PERL_ARGS_ASSERT_FORCE_IDENT	\
	assert(s)
a4096 2
#define PERL_ARGS_ASSERT_INCLINE	\
	assert(s)
a4099 2
#define PERL_ARGS_ASSERT_INTUIT_METHOD	\
	assert(s)
a4102 2
#define PERL_ARGS_ASSERT_INTUIT_MORE	\
	assert(s)
a4105 2
#define PERL_ARGS_ASSERT_LOP	\
	assert(s)
a4111 2
#define PERL_ARGS_ASSERT_NO_OP	\
	assert(what)
a4125 2
#define PERL_ARGS_ASSERT_FILTER_GETS	\
	assert(sv); assert(fp)
a4129 2
#define PERL_ARGS_ASSERT_FIND_IN_MY_STASH	\
	assert(pkgname)
a4133 2
#define PERL_ARGS_ASSERT_TOKENIZE_USE	\
	assert(s)
a4137 2
#define PERL_ARGS_ASSERT_NEW_CONSTANT	\
	assert(key); assert(sv)
a4143 2
#define PERL_ARGS_ASSERT_STRIP_RETURN	\
	assert(sv)
d4147 1
a4147 5
STATIC int	S_tokereport(pTHX_ I32 rv, const YYSTYPE* lvalp)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TOKEREPORT	\
	assert(lvalp)

a4150 2
#define PERL_ARGS_ASSERT_PRINTBUF	\
	assert(fmt); assert(s)
d4156 1
a4156 2
STATIC bool	S_isa_lookup(pTHX_ HV *stash, const char * const name)
			__attribute__nonnull__(pTHX_1)
a4157 7
#define PERL_ARGS_ASSERT_ISA_LOOKUP	\
	assert(stash); assert(name)

STATIC HV *	S_get_isa_hash(pTHX_ HV *const stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_ISA_HASH	\
	assert(stash)
a4164 2
#define PERL_ARGS_ASSERT_STDIZE_LOCALE	\
	assert(locs)
a4171 2
#define PERL_ARGS_ASSERT_CLOSEST_COP	\
	assert(cop)
a4178 9
#if defined(PERL_MEM_LOG) && defined(PERL_MEM_LOG_STDERR)
STATIC void	S_mem_log_common(enum mem_log_type mlt, const UV n, const UV typesize, const char *type_name, const SV *sv, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname)
			__attribute__nonnull__(4)
			__attribute__nonnull__(8)
			__attribute__nonnull__(10);
#define PERL_ARGS_ASSERT_MEM_LOG_COMMON	\
	assert(type_name); assert(filename); assert(funcname)

#endif
a4188 2
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_SLOW	\
	assert(s)
a4194 2
#define PERL_ARGS_ASSERT_IS_UTF8_COMMON	\
	assert(p); assert(swash); assert(swashname)
a4198 2
#define PERL_ARGS_ASSERT_SWASH_GET	\
	assert(swash)
d4204 1
a4204 1
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dstr, SV *sstr, I32 flags)
a4205 2
#define PERL_ARGS_ASSERT_SV_SETSV_FLAGS	\
	assert(dstr)
d4207 1
a4207 1
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *dstr, const char *sstr, STRLEN len, I32 flags)
a4209 2
#define PERL_ARGS_ASSERT_SV_CATPVN_FLAGS	\
	assert(dstr); assert(sstr)
a4212 2
#define PERL_ARGS_ASSERT_SV_CATSV_FLAGS	\
	assert(dsv)
a4215 2
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS	\
	assert(sv)
a4218 2
#define PERL_ARGS_ASSERT_SV_PVN_FORCE_FLAGS	\
	assert(sv)
a4222 2
#define PERL_ARGS_ASSERT_SV_COPYPV	\
	assert(dsv); assert(ssv)
a4226 2
#define PERL_ARGS_ASSERT_MY_ATOF2	\
	assert(s); assert(value)
d4231 2
a4232 1
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dstr, SV* sstr)
a4233 2
#define PERL_ARGS_ASSERT_SV_SETSV_COW	\
	assert(sstr)
d4248 3
a4250 1
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, int cnt);
d4252 1
a4252 1
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *vbuf, Size_t count)
a4253 2
#define PERL_ARGS_ASSERT_PERLIO_READ	\
	assert(vbuf)
d4255 1
a4255 1
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *vbuf, Size_t count)
a4256 2
#define PERL_ARGS_ASSERT_PERLIO_WRITE	\
	assert(vbuf)
d4258 1
a4258 1
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *vbuf, Size_t count)
a4259 2
#define PERL_ARGS_ASSERT_PERLIO_UNREAD	\
	assert(vbuf)
d4285 1
a4285 1
#if defined(PERL_IN_DEB_C) || defined(PERL_DECL_PROT)
a4287 2
#define PERL_ARGS_ASSERT_DEB_STACK_N	\
	assert(stack_base)
a4296 2
#define PERL_ARGS_ASSERT_PAD_UNDEF	\
	assert(cv)
a4299 2
#define PERL_ARGS_ASSERT_PAD_ADD_NAME	\
	assert(name)
a4302 2
#define PERL_ARGS_ASSERT_PAD_ADD_ANON	\
	assert(sv)
a4306 2
#define PERL_ARGS_ASSERT_PAD_CHECK_DUP	\
	assert(name); assert(ourstash)
a4310 2
#define PERL_ARGS_ASSERT_PAD_SETSV	\
	assert(sv)
a4316 2
#define PERL_ARGS_ASSERT_DO_DUMP_PAD	\
	assert(file)
a4321 2
#define PERL_ARGS_ASSERT_PAD_FIXUP_INNER_ANONS	\
	assert(padlist); assert(old_cv); assert(new_cv)
a4325 2
#define PERL_ARGS_ASSERT_PAD_PUSH	\
	assert(padlist)
a4336 2
#define PERL_ARGS_ASSERT_PAD_FINDLEX	\
	assert(name); assert(cv); assert(out_name_sv); assert(out_flags)
a4341 2
#define PERL_ARGS_ASSERT_CV_DUMP	\
	assert(cv); assert(title)
a4352 2
#define PERL_ARGS_ASSERT_GET_DEBUG_OPTS	\
	assert(s)
d4355 2
a4356 6
PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV *sv, U32 mask, U32 val)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_SET_SVFLAGS	\
	assert(sv)

PERL_CALLCONV void	Perl_hv_assert(pTHX_ HV *hv)
a4357 2
#define PERL_ARGS_ASSERT_HV_ASSERT	\
	assert(hv)
d4360 1
a4360 1
PERL_CALLCONV SV*	Perl_hv_scalar(pTHX_ HV *hv)
a4362 2
#define PERL_ARGS_ASSERT_HV_SCALAR	\
	assert(hv)
d4364 1
a4364 1
PERL_CALLCONV I32*	Perl_hv_riter_p(pTHX_ HV *hv)
a4366 2
#define PERL_ARGS_ASSERT_HV_RITER_P	\
	assert(hv)
d4368 1
a4368 1
PERL_CALLCONV HE**	Perl_hv_eiter_p(pTHX_ HV *hv)
a4370 2
#define PERL_ARGS_ASSERT_HV_EITER_P	\
	assert(hv)
d4372 1
a4372 1
PERL_CALLCONV void	Perl_hv_riter_set(pTHX_ HV *hv, I32 riter)
a4373 2
#define PERL_ARGS_ASSERT_HV_RITER_SET	\
	assert(hv)
d4375 1
a4375 1
PERL_CALLCONV void	Perl_hv_eiter_set(pTHX_ HV *hv, HE *eiter)
a4376 2
#define PERL_ARGS_ASSERT_HV_EITER_SET	\
	assert(hv)
d4378 1
a4378 1
PERL_CALLCONV void	Perl_hv_name_set(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
a4379 2
#define PERL_ARGS_ASSERT_HV_NAME_SET	\
	assert(hv)
d4381 1
a4381 1
PERL_CALLCONV AV**	Perl_hv_backreferences_p(pTHX_ HV *hv)
a4382 2
#define PERL_ARGS_ASSERT_HV_BACKREFERENCES_P	\
	assert(hv)
d4385 1
a4385 1
PERL_CALLCONV void	Perl_hv_kill_backrefs(pTHX_ HV *hv)
a4386 2
#define PERL_ARGS_ASSERT_HV_KILL_BACKREFS	\
	assert(hv)
d4389 1
a4389 1
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV *hv)
a4390 2
#define PERL_ARGS_ASSERT_HV_CLEAR_PLACEHOLDERS	\
	assert(hv)
d4392 1
a4392 1
PERL_CALLCONV I32*	Perl_hv_placeholders_p(pTHX_ HV *hv)
a4394 2
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_P	\
	assert(hv)
d4396 1
a4396 1
PERL_CALLCONV I32	Perl_hv_placeholders_get(pTHX_ HV *hv)
a4398 2
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_GET	\
	assert(hv)
d4400 1
a4400 1
PERL_CALLCONV void	Perl_hv_placeholders_set(pTHX_ HV *hv, I32 ph)
a4401 2
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_SET	\
	assert(hv)
d4404 1
a4404 1
PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV *hv, MAGIC *mg)
a4406 2
#define PERL_ARGS_ASSERT_MAGIC_SCALARPACK	\
	assert(hv); assert(mg)
a4411 2
#define PERL_ARGS_ASSERT_FIND_HASH_SUBSCRIPT	\
	assert(val)
a4414 2
#define PERL_ARGS_ASSERT_FIND_ARRAY_SUBSCRIPT	\
	assert(val)
a4494 2
#define PERL_ARGS_ASSERT_MY_SWABN	\
	assert(ptr)
a4498 2
#define PERL_ARGS_ASSERT_GV_FETCHPVN_FLAGS	\
	assert(name)
a4501 2
#define PERL_ARGS_ASSERT_GV_FETCHSV	\
	assert(name)
a4505 2
#define PERL_ARGS_ASSERT_IS_GV_MAGICAL_SV	\
	assert(name)
d4508 1
a4508 1
PERL_CALLCONV bool	Perl_stashpv_hvname_match(pTHX_ const COP *c, const HV *hv)
a4511 2
#define PERL_ARGS_ASSERT_STASHPV_HVNAME_MATCH	\
	assert(c); assert(hv)
a4516 2
#define PERL_ARGS_ASSERT_DUMP_SV_CHILD	\
	assert(sv)
a4522 2
#define PERL_ARGS_ASSERT_GV_SVADD	\
	assert(gv)
a4530 2
#define PERL_ARGS_ASSERT_NEW_WARNINGS_BITFIELD	\
	assert(bits)
a4534 2
#define PERL_ARGS_ASSERT_OFFER_NICE_CHUNK	\
	assert(chunk)
a4540 2
#define PERL_ARGS_ASSERT_MY_SPRINTF	\
	assert(buffer); assert(pat)
a4547 2
#define PERL_ARGS_ASSERT_MY_SNPRINTF	\
	assert(buffer); assert(format)
a4551 2
#define PERL_ARGS_ASSERT_MY_VSNPRINTF	\
	assert(buffer); assert(format)
a4559 2
#define PERL_ARGS_ASSERT_MY_CXT_INIT	\
	assert(my_cxt_key)
a4562 2
#define PERL_ARGS_ASSERT_MY_CXT_INDEX	\
	assert(my_cxt_key)
a4566 2
#define PERL_ARGS_ASSERT_MY_CXT_INIT	\
	assert(index)
a4581 2
#define PERL_ARGS_ASSERT_PAD_PEG	\
	assert(s)
a4587 2
#define PERL_ARGS_ASSERT_XMLDUMP_ATTR	\
	assert(file); assert(pat)
a4593 2
#define PERL_ARGS_ASSERT_XMLDUMP_INDENT	\
	assert(file); assert(pat)
a4597 2
#define PERL_ARGS_ASSERT_XMLDUMP_VINDENT	\
	assert(file); assert(pat)
a4601 2
#define PERL_ARGS_ASSERT_XMLDUMP_PACKSUBS	\
	assert(stash)
a4604 2
#define PERL_ARGS_ASSERT_XMLDUMP_SUB	\
	assert(gv)
a4607 2
#define PERL_ARGS_ASSERT_XMLDUMP_FORM	\
	assert(gv)
a4612 2
#define PERL_ARGS_ASSERT_SV_CATXMLSV	\
	assert(dsv); assert(ssv)
a4616 2
#define PERL_ARGS_ASSERT_SV_CATXMLPVN	\
	assert(dsv); assert(pv)
a4619 2
#define PERL_ARGS_ASSERT_SV_XMLPEEK	\
	assert(sv)
a4622 2
#define PERL_ARGS_ASSERT_DO_PMOP_XMLDUMP	\
	assert(file)
a4626 2
#define PERL_ARGS_ASSERT_DO_OP_XMLDUMP	\
	assert(file)
d4628 1
a4628 1
PERL_CALLCONV void	Perl_op_xmldump(pTHX_ const OP *o)
a4629 2
#define PERL_ARGS_ASSERT_OP_XMLDUMP	\
	assert(o)
d4633 1
a4633 1
PERL_CALLCONV void	Perl_token_free(pTHX_ TOKEN *tk)
a4634 2
#define PERL_ARGS_ASSERT_TOKEN_FREE	\
	assert(tk)
d4636 1
a4636 1
PERL_CALLCONV void	Perl_token_getmad(pTHX_ TOKEN *tk, OP *o, char slot)
a4637 2
#define PERL_ARGS_ASSERT_TOKEN_GETMAD	\
	assert(tk)
a4645 2
#define PERL_ARGS_ASSERT_NEWMADSV	\
	assert(sv)
a4652 2
#define PERL_ARGS_ASSERT_SKIPSPACE0	\
	assert(s)
a4655 2
#define PERL_ARGS_ASSERT_SKIPSPACE1	\
	assert(s)
a4658 2
#define PERL_ARGS_ASSERT_SKIPSPACE2	\
	assert(s)
a4674 2
#define PERL_ARGS_ASSERT_EMULATE_COP_IO	\
	assert(c); assert(sv)
a4677 29
PERL_CALLCONV SV*	Perl_mro_get_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MRO_GET_PRIVATE_DATA	\
	assert(smeta); assert(which)

PERL_CALLCONV SV*	Perl_mro_set_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which, SV *const data)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MRO_SET_PRIVATE_DATA	\
	assert(smeta); assert(which); assert(data)

PERL_CALLCONV const struct mro_alg *	Perl_mro_get_from_name(pTHX_ SV *name)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_GET_FROM_NAME	\
	assert(name)

PERL_CALLCONV void	Perl_mro_register(pTHX_ const struct mro_alg *mro)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_REGISTER	\
	assert(mro)

PERL_CALLCONV void	Perl_mro_set_mro(pTHX_ struct mro_meta *const meta, SV *const name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MRO_SET_MRO	\
	assert(meta); assert(name)

a4679 2
#define PERL_ARGS_ASSERT_MRO_META_INIT	\
	assert(stash)
a4684 2
#define PERL_ARGS_ASSERT_MRO_META_DUP	\
	assert(smeta); assert(param)
a4688 2
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA	\
	assert(stash)
d4691 4
a4694 1
STATIC AV*	S_mro_get_linear_isa_dfs(pTHX_ HV* stash, U32 level)
a4695 2
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA_DFS	\
	assert(stash)
a4699 2
#define PERL_ARGS_ASSERT_MRO_ISA_CHANGED_IN	\
	assert(stash)
a4702 2
#define PERL_ARGS_ASSERT_MRO_METHOD_CHANGED_IN	\
	assert(stash)
a4707 2
#define PERL_ARGS_ASSERT_SYS_INIT	\
	assert(argc); assert(argv)
a4712 2
#define PERL_ARGS_ASSERT_SYS_INIT3	\
	assert(argc); assert(argv); assert(env)
d4715 1
@


1.1.1.13
log
@Perl 5.12.2 from CPAN
@
text
@a121 7
PERL_CALLCONV I32	Perl_regcurly(const char *s)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_REGCURLY	\
	assert(s)

d134 1
a134 1
PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing)
d178 6
d195 1
a195 1
PERL_CALLCONV I32	Perl_av_len(pTHX_ AV *av)
a260 12
PERL_CALLCONV IV*	Perl_av_iter_p(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_AV_ITER_P	\
	assert(av)

#if defined(PERL_IN_AV_C) || defined(PERL_DECL_PROT)
STATIC MAGIC*	S_get_aux_mg(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_AUX_MG	\
	assert(av)

#endif
d369 1
a369 1
PERL_CALLCONV SV*	Perl_newSVpvf_nocontext(const char *const pat, ...)
d375 1
a375 1
PERL_CALLCONV void	Perl_sv_catpvf_nocontext(SV *const sv, const char *const pat, ...)
d382 1
a382 1
PERL_CALLCONV void	Perl_sv_setpvf_nocontext(SV *const sv, const char *const pat, ...)
d389 1
a389 1
PERL_CALLCONV void	Perl_sv_catpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
d396 1
a396 1
PERL_CALLCONV void	Perl_sv_setpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
d417 5
d438 1
a438 1
PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ const CV *const cv)
d508 6
a513 6
PERL_CALLCONV char*	Perl_delimcpy(char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(6);
d518 10
d531 2
a532 6
#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_vdie(pTHX_ const char* pat, va_list* args);
#endif
PERL_CALLCONV void	Perl_die_where(pTHX_ SV* msv)
			__attribute__noreturn__;

a738 1
PERL_CALLCONV void	Perl_dump_all_perl(pTHX_ bool justperl);
a767 5
PERL_CALLCONV void	Perl_dump_packsubs_perl(pTHX_ const HV* stash, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS_PERL	\
	assert(stash)

a772 5
PERL_CALLCONV void	Perl_dump_sub_perl(pTHX_ const GV* gv, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUMP_SUB_PERL	\
	assert(gv)

d791 2
a792 3
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_force_list(pTHX_ OP* arg);
STATIC OP*	S_fold_constants(pTHX_ OP *o)
a796 1
#endif
d809 1
a809 3
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_gen_constant_list(pTHX_ OP* o);
#endif
d825 15
a839 4
PERL_CALLCONV GV*	Perl_gv_add_by_type(pTHX_ GV *gv, svtype type);
/* PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV *gv); */
/* PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV *gv); */
/* PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv); */
a889 1
			__attribute__nonnull__(pTHX_1)
d892 1
a892 1
	assert(stash); assert(name)
a894 1
			__attribute__nonnull__(pTHX_1)
d897 1
a897 7
	assert(stash); assert(name)

PERL_CALLCONV GV*	Perl_gv_fetchmethod_flags(pTHX_ HV* stash, const char* name, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_FLAGS	\
	assert(stash); assert(name)
d899 1
a899 1
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 add, const svtype sv_type)
a938 5
PERL_CALLCONV void	Perl_gv_try_downgrade(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_TRY_DOWNGRADE	\
	assert(gv)

d954 1
a954 1
PERL_CALLCONV void	Perl_hv_clear(pTHX_ HV *hv);
a1062 8
#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC struct refcounted_he *	S_refcounted_he_new_common(pTHX_ struct refcounted_he *const parent, const char *const key_p, const STRLEN key_len, const char flags, char value_type, const void *value, const STRLEN value_len)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_COMMON	\
	assert(key_p); assert(value)

#endif
d1067 1
a1067 1
PERL_CALLCONV I32	Perl_ibcmp(const char* a, const char* b, I32 len)
d1069 2
a1070 2
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d1074 1
a1074 1
PERL_CALLCONV I32	Perl_ibcmp_locale(const char* a, const char* b, I32 len)
d1076 2
a1077 2
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d1087 1
a1087 2
#if defined(PERL_IN_DOIO_C) || defined(PERL_DECL_PROT)
STATIC bool	S_ingroup(pTHX_ Gid_t testgid, bool effective)
a1089 1
#endif
a1094 1
PERL_CALLCONV void	Perl_init_dbargs(pTHX);
d1103 1
a1103 1
PERL_CALLCONV char*	Perl_instr(const char* big, const char* little)
d1106 2
a1107 2
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d1119 6
d1144 4
d1224 4
d1276 2
a1277 7
PERL_CALLCONV bool	Perl_is_ascii_string(const U8 *s, STRLEN len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_ASCII_STRING	\
	assert(s)

PERL_CALLCONV STRLEN	Perl_is_utf8_char(const U8 *s)
			__attribute__nonnull__(1);
d1281 2
a1282 2
PERL_CALLCONV bool	Perl_is_utf8_string(const U8 *s, STRLEN len)
			__attribute__nonnull__(1);
d1286 2
a1287 2
/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **p)
			__attribute__nonnull__(1); */
d1291 2
a1292 2
PERL_CALLCONV bool	Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
			__attribute__nonnull__(1);
d1302 6
a1337 12
PERL_CALLCONV bool	Perl_is_utf8_perl_space(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_SPACE	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_perl_word(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_WORD	\
	assert(p)

a1349 6
PERL_CALLCONV bool	Perl_is_utf8_posix_digit(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_POSIX_DIGIT	\
	assert(p)

a1391 60
PERL_CALLCONV bool	Perl_is_utf8_X_begin(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_BEGIN	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_extend(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_EXTEND	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_prepend(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_PREPEND	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_non_hangul(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_NON_HANGUL	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_L(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_L	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_LV(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_LV	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_LVT(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_LVT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_LV_LVT_V(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_LV_LVT_V	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_T(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_T	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_V(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_V	\
	assert(p)

a1402 12
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_opt_scalarhv(pTHX_ OP* rep_op)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OPT_SCALARHV	\
	assert(rep_op)

STATIC OP*	S_is_inplace_av(pTHX_ OP* o, OP* oright)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_INPLACE_AV	\
	assert(o)

#endif
a1405 31
PERL_CALLCONV bool	Perl_lex_bufutf8(pTHX);
PERL_CALLCONV char*	Perl_lex_grow_linestr(pTHX_ STRLEN len);
PERL_CALLCONV void	Perl_lex_stuff_pvn(pTHX_ char* pv, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_STUFF_PVN	\
	assert(pv)

PERL_CALLCONV void	Perl_lex_stuff_sv(pTHX_ SV* sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_STUFF_SV	\
	assert(sv)

PERL_CALLCONV void	Perl_lex_unstuff(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_UNSTUFF	\
	assert(ptr)

PERL_CALLCONV void	Perl_lex_read_to(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_READ_TO	\
	assert(ptr)

PERL_CALLCONV void	Perl_lex_discard_to(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_DISCARD_TO	\
	assert(ptr)

PERL_CALLCONV bool	Perl_lex_next_chunk(pTHX_ U32 flags);
PERL_CALLCONV I32	Perl_lex_peek_unichar(pTHX_ U32 flags);
PERL_CALLCONV I32	Perl_lex_read_unichar(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_lex_read_space(pTHX_ U32 flags);
d1418 1
a1418 2
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_linklist(pTHX_ OP *o)
a1422 2
STATIC OP*	S_listkids(pTHX_ OP* o);
#endif
d1424 1
d1435 1
a1435 1
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP *o, I32 lex)
d1440 1
a1440 1
PERL_CALLCONV I32	Perl_looks_like_number(pTHX_ SV *const sv)
d1497 1
a1497 1
PERL_CALLCONV int	Perl_magic_clearhints(pTHX_ SV* sv, MAGIC* mg)
d1500 1
a1500 1
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINTS	\
a1502 5
PERL_CALLCONV int	Perl_magic_clearisa(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARISA	\
	assert(mg)

d1521 6
d1655 14
d1699 8
d1738 1
d1741 1
a1741 1
	assert(mg)
d1791 5
d1848 1
a1848 1
PERL_CALLCONV void	Perl_mg_localize(pTHX_ SV* sv, SV* nsv, bool setmagic)
d1893 1
a1893 1
PERL_CALLCONV int	Perl_mode_from_discipline(pTHX_ const char* s, STRLEN len);
d1899 5
d1958 1
a1958 1
PERL_CALLCONV PerlIO*	Perl_my_popen_list(pTHX_ const char* mode, int n, SV ** args)
d2141 1
a2141 1
/* PERL_CALLCONV IO*	Perl_newIO(pTHX)
d2143 1
a2143 1
			__attribute__warn_unused_result__; */
d2166 1
a2166 1
PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV *const sv)
d2173 1
a2173 1
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *const sv)
d2180 1
a2180 1
PERL_CALLCONV SV*	Perl_newSV(pTHX_ const STRLEN len)
d2198 1
a2198 1
PERL_CALLCONV SV*	Perl_newSViv(pTHX_ const IV i)
d2202 1
a2202 1
PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ const UV u)
d2206 1
a2206 1
PERL_CALLCONV SV*	Perl_newSVnv(pTHX_ const NV n)
d2210 1
a2210 1
PERL_CALLCONV SV*	Perl_newSVpv(pTHX_ const char *const s, const STRLEN len)
d2214 1
a2214 1
PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char *const s, const STRLEN len)
d2218 1
a2218 1
PERL_CALLCONV SV*	Perl_newSVpvn_flags(pTHX_ const char *const s, const STRLEN len, const U32 flags)
d2222 1
a2222 1
PERL_CALLCONV SV*	Perl_newSVhek(pTHX_ const HEK *const hek)
d2230 1
a2230 1
PERL_CALLCONV SV*	Perl_newSVpvf(pTHX_ const char *const pat, ...)
d2238 1
a2238 1
PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char *const pat, va_list *const args)
d2245 1
a2245 1
PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV *const rv, const char *const classname)
d2250 1
a2250 1
PERL_CALLCONV SV*	Perl_newSVsv(pTHX_ SV *const old)
d2254 1
a2254 1
PERL_CALLCONV SV*	Perl_newSV_type(pTHX_ const svtype type)
d2277 1
a2277 1
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *const e, SV *sv)
a2289 5
PERL_CALLCONV const char*	Perl_prescan_version(pTHX_ const char *s, bool strict, const char** errstr, bool *sqv, int *ssaw_decimal, int *swidth, bool *salpha)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PRESCAN_VERSION	\
	assert(s)

d2331 1
a2331 1
PERL_CALLCONV char*	Perl_ninstr(const char* big, const char* bigend, const char* little, const char* lend)
d2333 4
a2336 4
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
d2340 6
a2359 5
PERL_CALLCONV void	Perl_package_version(pTHX_ OP* v)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PACKAGE_VERSION	\
	assert(v)

d2361 1
a2361 1
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ const char *const name, const STRLEN len, const U32 flags)
d2366 1
a2366 1
PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ const char* name, STRLEN len, U32 flags)
a2385 1
#ifdef DEBUGGING
a2386 1
#endif
d2388 1
a2388 3
#if defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
STATIC void	S_pad_reset(pTHX);
#endif
d2506 2
a2507 2
#if defined(PERL_USES_PL_PIDSTATUS) && defined(PERL_IN_UTIL_C)
STATIC void	S_pidgone(pTHX_ Pid_t pid, int status);
d2509 1
a2509 2
PERL_CALLCONV void	Perl_pmflag(pTHX_ U32 *pmfl, int ch)
			__attribute__deprecated__
d2520 1
a2520 2
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_pmtrans(pTHX_ OP* o, OP* expr, OP* repl)
a2526 1
#endif
d2531 1
a2531 3
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_refkids(pTHX_ OP* o, I32 type);
#endif
d2557 1
a2557 1
PERL_CALLCONV void	Perl_pregfree2(pTHX_ REGEXP *rx)
a2558 5
#define PERL_ARGS_ASSERT_PREGFREE2	\
	assert(rx)

PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* ret_x, REGEXP* rx)
			__attribute__nonnull__(pTHX_2);
d2560 1
a2560 1
	assert(rx)
d2562 1
a2562 1
PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const rx)
d2565 6
a2570 1
	assert(rx)
d2580 1
a2580 1
PERL_CALLCONV REGEXP*	Perl_pregcomp(pTHX_ SV * const pattern, const U32 flags)
d2585 1
a2585 1
PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ SV * const pattern, U32 flags)
d2590 1
a2590 1
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
d2595 1
a2595 1
	assert(rx); assert(strpos); assert(strend)
d2597 1
a2597 1
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP  *const r)
d2600 1
a2600 1
	assert(r)
d2602 1
a2602 1
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, I32 minend, SV *sv, void *data, U32 flags)
d2609 1
a2609 1
	assert(rx); assert(stringarg); assert(strend); assert(strbeg); assert(sv)
d2687 3
a2689 3
PERL_CALLCONV void	Perl_repeatcpy(char* to, const char* from, I32 len, I32 count)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
d2693 1
a2693 1
PERL_CALLCONV char*	Perl_rninstr(const char* big, const char* bigend, const char* little, const char* lend)
d2695 4
a2698 4
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
d2710 1
a2710 2
#if defined(PERL_IN_PP_CTL_C) || defined(PERL_DECL_PROT)
STATIC void	S_rxres_free(pTHX_ void** rsp)
d2715 1
a2715 1
STATIC void	S_rxres_restore(pTHX_ void **rsp, REGEXP *rx)
a2720 1
#endif
d2763 1
a2763 5
/* PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, I32 idx, SV **sptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV void	Perl_save_aelem_flags(pTHX_ AV* av, I32 idx, SV **sptr, const U32 flags)
d2766 1
a2766 1
#define PERL_ARGS_ASSERT_SAVE_AELEM_FLAGS	\
a2795 11
PERL_CALLCONV void	Perl_save_hdelete(pTHX_ HV *hv, SV *keysv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAVE_HDELETE	\
	assert(hv); assert(keysv)

PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, I32 key)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_ADELETE	\
	assert(av)

d2831 1
a2831 6
/* PERL_CALLCONV void	Perl_save_helem(pTHX_ HV *hv, SV *key, SV **sptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV void	Perl_save_helem_flags(pTHX_ HV *hv, SV *key, SV **sptr, const U32 flags)
d2835 1
a2835 1
#define PERL_ARGS_ASSERT_SAVE_HELEM_FLAGS	\
d2910 1
d2930 2
a2931 4
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_scalarkids(pTHX_ OP* o);
STATIC OP*	S_scalarseq(pTHX_ OP* o);
#endif
d2969 7
d3001 1
a3001 1
PERL_CALLCONV bool	Perl_sv_2bool(pTHX_ SV *const sv)
d3006 1
a3006 1
PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV **const st, GV **const gvp, const I32 lref)
d3012 1
a3012 1
PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV *const sv)
d3023 5
d3029 5
a3033 5
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV *sv); */
PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV *const sv, const I32 flags);
PERL_CALLCONV SV*	Perl_sv_2mortal(pTHX_ SV *const sv);
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV *const sv);
PERL_CALLCONV SV*	Perl_sv_2num(pTHX_ SV *const sv)
d3038 3
a3040 3
/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV *sv, STRLEN *lp); */
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags);
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV *const sv, STRLEN *const lp)
d3045 1
a3045 1
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV *const sv, STRLEN *const lp)
d3055 2
a3056 2
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv); */
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags);
d3090 2
a3091 3
PERL_CALLCONV I32	Perl_sv_true(pTHX_ SV *const sv);
#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC void	S_sv_add_arena(pTHX_ char *const ptr, const U32 size, const U32 flags)
d3096 1
a3096 2
#endif
PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV *const sv)
d3101 1
a3101 1
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV *const sv, HV *const stash)
d3107 1
a3107 1
PERL_CALLCONV void	Perl_sv_catpvf(pTHX_ SV *const sv, const char *const pat, ...)
d3114 1
a3114 1
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d3120 1
a3120 1
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV *const sv, const char* ptr)
d3136 1
a3136 1
PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV *const sv, const char *const ptr)
d3143 1
a3143 1
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV *const sv)
d3148 2
a3149 2
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV *const sv1, SV *const sv2);
PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV *const sv1, SV *const sv2);
d3151 1
a3151 1
PERL_CALLCONV char*	Perl_sv_collxfrm(pTHX_ SV *const sv, STRLEN *const nxp)
d3171 1
a3171 1
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV *const sv);
d3177 1
a3177 1
PERL_CALLCONV bool	Perl_sv_derived_from(pTHX_ SV* sv, const char *const name)
d3184 1
a3184 1
PERL_CALLCONV bool	Perl_sv_does(pTHX_ SV* sv, const char *const name)
d3192 2
a3193 2
PERL_CALLCONV void	Perl_sv_free(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV *const sv)
d3199 1
a3199 1
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV *const sv, PerlIO *const fp, I32 append)
d3205 1
a3205 1
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV *const sv, STRLEN newlen)
d3210 2
a3211 2
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV *const sv);
/* PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen)
d3223 1
a3223 1
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char *const name)
d3229 3
a3231 3
PERL_CALLCONV STRLEN	Perl_sv_len(pTHX_ SV *const sv);
PERL_CALLCONV STRLEN	Perl_sv_len_utf8(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV *const sv, SV *const obj, const int how, const char *const name, const I32 namlen)
d3236 1
a3236 1
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV *const sv, SV *const obj, const int how, const MGVTBL *const vtbl, const char *const name, const I32 namlen)
d3241 1
a3241 1
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV *const oldsv)
d3248 1
a3248 1
PERL_CALLCONV SV*	Perl_sv_newref(pTHX_ SV *const sv);
d3250 1
a3250 1
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV *const sv, I32 *const offsetp, I32 *const lenp)
d3255 1
a3255 6
PERL_CALLCONV STRLEN	Perl_sv_pos_u2b_flags(pTHX_ SV *const sv, STRLEN uoffset, STRLEN *const lenp, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_POS_U2B_FLAGS	\
	assert(sv)

PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV *const sv, I32 *const offsetp)
d3265 1
a3265 1
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV *const sv, STRLEN *const lp)
d3270 1
a3270 1
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV *const sv, STRLEN *const lp)
d3290 1
a3290 1
PERL_CALLCONV const char*	Perl_sv_reftype(pTHX_ const SV *const sv, const int ob)
d3296 1
a3296 1
PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV *const sv, SV *const nsv)
d3303 1
a3303 1
PERL_CALLCONV void	Perl_sv_reset(pTHX_ const char* s, HV *const stash)
d3308 1
a3308 1
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV *const sv, const char *const pat, ...)
d3315 1
a3315 1
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d3321 1
a3321 1
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV *const sv, const IV num)
d3326 1
a3326 1
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV *const sv, const IV num)
d3331 1
a3331 1
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV *const sv, const UV num)
d3336 1
a3336 1
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV *const sv, const NV num)
d3341 1
a3341 1
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV *const rv, const char *const classname, const IV iv)
d3346 1
a3346 1
PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV *const rv, const char *const classname, const UV uv)
d3351 1
a3351 1
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV *const rv, const char *const classname, const NV nv)
d3356 1
a3356 1
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV *const rv, const char *const classname, void *const pv)
d3361 1
a3361 1
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV *const rv, const char *const classname, const char *const pv, const STRLEN n)
d3367 1
a3367 1
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV *const sv, const char *const ptr)
d3372 1
a3372 1
PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV *const sv, const char *const ptr, const STRLEN len)
d3387 1
a3387 1
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV *const sv)
d3393 1
a3393 1
PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV *const sv, const int type)
d3403 1
a3403 1
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV *const ref, const U32 flags)
d3408 1
a3408 1
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV *const sv)
d3413 1
a3413 1
PERL_CALLCONV void	Perl_sv_upgrade(pTHX_ SV *const sv, svtype new_type)
d3423 1
a3423 1
PERL_CALLCONV void	Perl_sv_usepvn_flags(pTHX_ SV *const sv, char* ptr, const STRLEN len, const U32 flags)
d3428 1
a3428 1
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted)
d3434 1
a3434 1
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted)
d3460 1
a3460 1
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char *const s)
d3689 1
a3689 1
PERL_CALLCONV void	Perl_report_uninit(pTHX_ const SV *uninit_sv);
a3706 12
PERL_CALLCONV void	Perl_ck_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CK_WARNER	\
	assert(pat)

PERL_CALLCONV void	Perl_ck_warner_d(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CK_WARNER_D	\
	assert(pat)

d3722 1
a3722 1
PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ SV* msv)
d3725 1
a3725 1
	assert(msv)
d3727 1
a3727 1
PERL_CALLCONV int	Perl_yyerror(pTHX_ const char *const s)
d3739 1
a3739 2
#if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
STATIC int	S_yywarn(pTHX_ const char *const s)
a3743 1
#endif
d3745 1
a3745 1
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ const char* s)
d3780 1
a3780 1
PERL_CALLCONV void	Perl_sv_catpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
d3787 1
a3787 1
PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d3793 1
a3793 1
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *const sv, const char *const ptr)
d3809 1
a3809 1
PERL_CALLCONV void	Perl_sv_setpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
d3816 1
a3816 1
PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d3822 1
a3822 1
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *const sv, const IV i)
d3827 1
a3827 1
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *const sv, const IV iv)
d3832 1
a3832 1
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *const sv, const UV u)
d3837 1
a3837 1
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *const sv, const NV num)
d3842 1
a3842 1
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *const sv, const char *const ptr)
d3847 1
a3847 1
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *const sv, const char *const ptr, const STRLEN len)
d3853 1
a3853 1
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *const dstr, SV *const sstr)
d3979 1
a3979 4
/* PERL_CALLCONV STRLEN	sv_utf8_upgrade_nomg(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *const sv, const bool fail_ok)
d3984 4
a3987 1
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *const sv)
d3992 1
a3992 1
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *const sv)
d4002 1
a4002 1
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *const sv, const U32 flags)
d4008 1
a4008 1
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *const sv)
d4035 1
d4075 5
a4079 6
PERL_CALLCONV void	Perl_re_dup_guts(pTHX_ const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_RE_DUP_GUTS	\
	assert(sstr); assert(dstr); assert(param)
d4081 1
a4081 1
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO *const fp, const char type, CLONE_PARAMS *const param)
d4086 1
a4086 1
PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR *const dp)
d4089 1
a4089 1
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP *const gp, CLONE_PARAMS *const param)
d4095 1
a4095 1
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC *mg, CLONE_PARAMS *const param)
d4101 1
a4101 10
#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC SV **	S_sv_dup_inc_multiple(pTHX_ SV *const *source, SV **dest, SSize_t items, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_DUP_INC_MULTIPLE	\
	assert(source); assert(dest); assert(param)

#endif
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ const SV *const sstr, CLONE_PARAMS *const param)
d4107 1
a4107 1
PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV *const dstr, const SV *const sstr, CLONE_PARAMS *const param)
d4114 1
a4114 1
PERL_CALLCONV yy_parser*	Perl_parser_dup(pTHX_ const yy_parser *const proto, CLONE_PARAMS *const param)
d4124 1
a4124 1
PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *const tbl, const void *const sv)
d4130 1
a4130 1
PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *const tbl, const void *const oldsv, void *const newsv)
d4136 1
a4136 1
PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *const tbl)
d4141 2
a4142 2
PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *const tbl);
PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *const tbl);
d4223 1
a4223 1
STATIC void	S_gv_init_sv(pTHX_ GV *gv, const svtype sv_type)
d4243 1
a4243 1
PERL_CALLCONV void*	Perl_get_arena(pTHX_ const size_t arenasize, const svtype bodytype)
a4258 5
STATIC I32	S_anonymise_cv(pTHX_ HEK *stash, SV *val)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_ANONYMISE_CV	\
	assert(val)

d4441 6
a4584 6
PERL_CALLCONV OP*	Perl_ck_each(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EACH	\
	assert(o)

d4765 1
a4765 10
STATIC void	S_incpush(pTHX_ const char *const dir, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INCPUSH	\
	assert(dir)

STATIC void	S_incpush_use_sep(pTHX_ const char *p, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INCPUSH_USE_SEP	\
	assert(p)

d4780 1
a4780 1
STATIC int	S_open_script(pTHX_ const char *scriptname, bool dosearch, bool *suidscript, PerlIO **rsfpp)
d4783 2
a4784 1
			__attribute__nonnull__(pTHX_4);
d4786 1
a4786 1
	assert(scriptname); assert(suidscript); assert(rsfpp)
d4793 21
a4813 1
#ifndef SETUID_SCRIPTS_ARE_SECURE_NOW
d4819 1
d4822 3
d4829 2
a4830 4
STATIC SV *	S_incpush_if_exists(pTHX_ AV *const av, SV *dir, SV *const stem)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d4832 1
a4832 1
	assert(av); assert(dir); assert(stem)
a4836 1
STATIC OP*	S_do_delete_local(pTHX);
d4845 1
a4845 1
PERL_CALLCONV GV*	Perl_softref2xv(pTHX_ SV *const sv, const char *const what, const svtype type, SV ***spp)
d5055 1
a5055 1
STATIC I32	S_sv_ncmp(pTHX_ SV *const a, SV *const b)
d5061 1
a5061 1
STATIC I32	S_sv_i_ncmp(pTHX_ SV *const a, SV *const b)
d5067 1
a5067 1
STATIC I32	S_amagic_ncmp(pTHX_ SV *const a, SV *const b)
d5073 1
a5073 1
STATIC I32	S_amagic_i_ncmp(pTHX_ SV *const a, SV *const b)
d5079 1
a5079 1
STATIC I32	S_amagic_cmp(pTHX_ SV *const str1, SV *const str2)
d5085 1
a5085 1
STATIC I32	S_amagic_cmp_locale(pTHX_ SV *const str1, SV *const str2)
d5091 1
a5091 1
STATIC I32	S_sortcv(pTHX_ SV *const a, SV *const b)
d5097 1
a5097 1
STATIC I32	S_sortcv_xsub(pTHX_ SV *const a, SV *const b)
d5103 1
a5103 1
STATIC I32	S_sortcv_stacked(pTHX_ SV *const a, SV *const b)
d5175 6
d5197 1
a5197 1
STATIC regnode*	S_reg_namedseq(pTHX_ struct RExC_state_t *pRExC_state, UV *valuep, I32 *flagp)
d5448 5
d5509 1
a5509 1
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr, const U32 flags)
d5517 1
a5517 1
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *const tsv, SV *const sv)
d5526 1
a5526 1
PERL_CALLCONV int	Perl_sv_kill_backrefs(pTHX_ SV *const sv, AV *const av)
d5535 1
a5535 1
STATIC char *	S_uiv_2buf(char *const buf, const IV iv, UV uv, const int is_uv, char **const peob)
d5542 1
a5542 1
STATIC void	S_sv_unglob(pTHX_ SV *const sv)
d5547 1
a5547 1
STATIC void	S_not_a_number(pTHX_ SV *const sv)
d5552 1
a5552 1
STATIC I32	S_visit(pTHX_ SVFUNC_t f, const U32 flags, const U32 mask)
d5557 1
a5557 1
STATIC void	S_sv_del_backref(pTHX_ SV *const tsv, SV *const sv)
d5563 1
a5563 1
STATIC SV *	S_varname(pTHX_ const GV *const gv, const char gvtype, PADOFFSET targ, const SV *const keyname, I32 aindex, int subscript_type)
d5575 1
a5575 1
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv, I32 numtype)
d5581 1
a5581 1
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv)
d5588 1
a5588 1
STATIC I32	S_expect_number(pTHX_ char **const pattern)
d5601 1
a5601 1
STATIC STRLEN	S_sv_pos_u2b_midway(const U8 *const start, const U8 *send, const STRLEN uoffset, const STRLEN uend)
d5607 1
a5607 1
STATIC STRLEN	S_sv_pos_u2b_cached(pTHX_ SV *const sv, MAGIC **const mgp, const U8 *const start, const U8 *const send, const STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0)
d5615 1
a5615 1
STATIC void	S_utf8_mg_pos_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN byte, const STRLEN utf8, const STRLEN blen)
d5621 1
a5621 1
STATIC STRLEN	S_sv_pos_b2u_midway(pTHX_ const U8 *const s, const U8 *const target, const U8 *end, STRLEN endu)
d5628 1
a5628 1
STATIC char *	S_F0convert(NV nv, char *const endbuf, STRLEN *const len)
d5644 2
a5645 2
STATIC void *	S_more_bodies(pTHX_ const svtype sv_type);
STATIC bool	S_sv_2iuv_common(pTHX_ SV *const sv)
d5650 1
a5650 1
STATIC void	S_glob_assign_glob(pTHX_ SV *const dstr, SV *const sstr, const int dtype)
d5656 1
a5656 1
STATIC void	S_glob_assign_ref(pTHX_ SV *const dstr, SV *const sstr)
d5662 1
a5662 1
STATIC PTR_TBL_ENT_t *	S_ptr_table_find(PTR_TBL_t *const tbl, const void *const sv)
a5677 5
STATIC char*	S_force_strict_version(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORCE_STRICT_VERSION	\
	assert(s)

d5751 1
a5751 1
STATIC void	S_update_debugger_info(pTHX_ SV *orig_sv, const char *const buf, STRLEN len);
a5763 12
#ifndef PERL_NO_UTF16_FILTER
STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_UTF16_TEXTFILTER	\
	assert(sv)

STATIC U8*	S_add_utf16_textfilter(pTHX_ U8 *const s, bool reversed)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_ADD_UTF16_TEXTFILTER	\
	assert(s)

#endif
d5771 1
a5771 1
STATIC bool	S_feature_is_enabled(pTHX_ const char *const name, STRLEN namelen)
d5804 1
a5804 1
STATIC void	S_no_op(pTHX_ const char *const what, char *s)
d5818 1
a5818 1
STATIC char *	S_filter_gets(pTHX_ SV *sv, STRLEN append)
d5820 2
a5821 1
			__attribute__nonnull__(pTHX_1);
d5823 1
a5823 1
	assert(sv)
a5842 1
STATIC int	S_deprecate_commaless_var_list(pTHX);
d5858 1
a5858 1
STATIC void	S_printbuf(pTHX_ const char *const fmt, const char *const s)
d5898 2
a5899 2
STATIC SV *	S_vdie_croak_common(pTHX_ const char *pat, va_list *args);
STATIC bool	S_vdie_common(pTHX_ SV *message, bool warn);
d5903 1
a5903 1
#if defined(PERL_MEM_LOG) && !defined(PERL_MEM_LOG_NOIMPL)
d5943 1
a5943 1
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dstr, SV *sstr, const I32 flags)
d5948 1
a5948 1
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *const dstr, const char *sstr, const STRLEN len, const I32 flags)
d5954 1
a5954 1
PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags)
d5959 1
a5959 4
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags_grow(pTHX_ SV *const sv, const I32 flags, STRLEN extra)
d5961 1
a5961 1
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS_GROW	\
d5964 1
a5964 1
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags)
d5969 1
a5969 1
PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv)
d6060 1
a6060 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name(pTHX_ const char *name, const STRLEN len, const U32 flags, HV *typestash, HV *ourstash)
d6070 3
a6072 3
#if defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
STATIC void	S_pad_check_dup(pTHX_ SV *name, const U32 flags, const HV *ourstash)
			__attribute__nonnull__(pTHX_1);
d6074 1
a6074 1
	assert(name)
a6075 1
#endif
a6115 5
STATIC PADOFFSET	S_pad_add_name_sv(pTHX_ SV *namesv, const U32 flags, HV *typestash, HV *ourstash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_SV	\
	assert(namesv)

a6141 1
#ifdef DEBUGGING
a6146 1
#endif
d6204 1
a6204 1
PERL_CALLCONV I32	Perl_hv_placeholders_get(pTHX_ const HV *hv)
d6224 1
a6224 1
STATIC SV *	S_find_hash_subscript(pTHX_ const HV *const hv, const SV *const val)
d6229 1
a6229 1
STATIC I32	S_find_array_subscript(pTHX_ const AV *const av, const SV *const val)
d6234 1
a6234 1
STATIC SV*	S_find_uninit_var(pTHX_ const OP *const obase, const SV *const uninit_sv, bool top);
d6317 1
a6317 1
PERL_CALLCONV GV*	Perl_gv_fetchpvn_flags(pTHX_ const char* name, STRLEN len, I32 flags, const svtype sv_type)
d6322 1
a6322 1
PERL_CALLCONV GV*	Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, const svtype sv_type)
d6327 1
a6327 1
PERL_CALLCONV bool	Perl_is_gv_magical_sv(pTHX_ SV *const name_sv, U32 flags)
d6331 1
a6331 1
	assert(name_sv)
d6351 5
a6355 4
/* PERL_CALLCONV GV*	Perl_gv_SVadd(pTHX_ GV *gv); */
#endif
#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
STATIC bool	S_ckwarn_common(pTHX_ U32 w);
d6367 1
a6367 1
PERL_CALLCONV void	Perl_offer_nice_chunk(pTHX_ void *const chunk, const U32 chunk_size)
a6455 1
PERL_CALLCONV void	Perl_xmldump_all_perl(pTHX_ bool justperl);
a6460 5
PERL_CALLCONV void	Perl_xmldump_packsubs_perl(pTHX_ const HV* stash, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_PACKSUBS_PERL	\
	assert(stash)

a6465 5
PERL_CALLCONV void	Perl_xmldump_sub_perl(pTHX_ const GV* gv, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_SUB_PERL	\
	assert(gv)

d6527 1
a6527 1
PERL_CALLCONV MADPROP*	Perl_newMADPROP(pTHX_ char key, char type, void* val, I32 vlen);
a6644 13
PERL_CALLCONV const char *	Perl_fetch_cop_label(pTHX_ struct refcounted_he *const chain, STRLEN *len, U32 *flags);
PERL_CALLCONV struct refcounted_he *	Perl_store_cop_label(pTHX_ struct refcounted_he *const chain, const char *label)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_STORE_COP_LABEL	\
	assert(label)


PERL_CALLCONV int	Perl_keyword_plugin_standard(pTHX_ char* keyword_ptr, STRLEN keyword_len, OP** op_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_KEYWORD_PLUGIN_STANDARD	\
	assert(keyword_ptr); assert(op_ptr)

@


1.1.1.14
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
a1 1
/* -*- buffer-read-only: t -*-
d5 2
a6 2
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
 *    2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 by Larry Wall and others
d12 2
a13 2
 * This file is built by regen/embed.pl from data in embed.fnc,
 * regen/embed.pl, regen/opcodes, intrpvar.h and perlvars.h.
a19 4
PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_AMUPDATE	\
	assert(stash)
d21 83
a103 2
PERL_CALLCONV const char *	Perl_PerlIO_context_layers(pTHX_ const char *mode);
PERL_CALLCONV bool	Perl__is_utf8__perl_idstart(pTHX_ const U8 *p)
d105 2
a106 2
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__IS_UTF8__PERL_IDSTART	\
d109 4
a112 5
PERL_CALLCONV UV	Perl__to_uni_fold_flags(pTHX_ UV c, U8 *p, STRLEN *lenp, const bool flags)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT__TO_UNI_FOLD_FLAGS	\
	assert(p); assert(lenp)
d114 2
a115 5
PERL_CALLCONV UV	Perl__to_utf8_fold_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, U8 flags, bool* tainted_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT__TO_UTF8_FOLD_FLAGS	\
	assert(p); assert(ustrp)
d117 4
a120 5
PERL_CALLCONV UV	Perl__to_utf8_lower_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, const bool flags, bool* tainted_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT__TO_UTF8_LOWER_FLAGS	\
	assert(p); assert(ustrp)
d122 6
a127 5
PERL_CALLCONV UV	Perl__to_utf8_title_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, const bool flags, bool* tainted_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT__TO_UTF8_TITLE_FLAGS	\
	assert(p); assert(ustrp)
a128 5
PERL_CALLCONV UV	Perl__to_utf8_upper_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, const bool flags, bool* tainted_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT__TO_UTF8_UPPER_FLAGS	\
	assert(p); assert(ustrp)
d130 1
a130 4
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ const char *const name, const STRLEN len, const U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_ALLOCMY	\
	assert(name)
d132 3
d141 1
a141 1
PERL_CALLCONV SV *	Perl_amagic_deref_call(pTHX_ SV *ref, int method)
d143 5
a147 2
#define PERL_ARGS_ASSERT_AMAGIC_DEREF_CALL	\
	assert(ref)
d149 2
a150 1
PERL_CALLCONV bool	Perl_amagic_is_enabled(pTHX_ int method);
a163 7
PERL_CALLCONV void	Perl_atfork_lock(void);
PERL_CALLCONV void	Perl_atfork_unlock(void);
PERL_CALLCONV SV**	Perl_av_arylen_p(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_AV_ARYLEN_P	\
	assert(av)

a168 12
PERL_CALLCONV void	Perl_av_create_and_push(pTHX_ AV **const avp, SV *const val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AV_CREATE_AND_PUSH	\
	assert(avp); assert(val)

PERL_CALLCONV SV**	Perl_av_create_and_unshift_one(pTHX_ AV **const avp, SV *const val)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AV_CREATE_AND_UNSHIFT_ONE	\
	assert(avp); assert(val)

a195 5
PERL_CALLCONV IV*	Perl_av_iter_p(pTHX_ AV *av)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_AV_ITER_P	\
	assert(av)

d213 6
d246 6
d257 17
d290 1
a290 5
PERL_CALLCONV void	Perl_blockhook_register(pTHX_ BHK *hk)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_BLOCKHOOK_REGISTER	\
	assert(hk)

a291 27
PERL_CALLCONV void	Perl_boot_core_UNIVERSAL(pTHX);
PERL_CALLCONV void	Perl_boot_core_mro(pTHX);
PERL_CALLCONV int	Perl_bytes_cmp_utf8(pTHX_ const U8 *b, STRLEN blen, const U8 *u, STRLEN ulen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_BYTES_CMP_UTF8	\
	assert(b); assert(u)

PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ const U8 *s, STRLEN *len, bool *is_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8	\
	assert(s); assert(len)

PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ const U8 *s, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_BYTES_TO_UTF8	\
	assert(s); assert(len)

PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_CALL_ARGV	\
	assert(sub_name); assert(argv)

PERL_CALLCONV void	Perl_call_atexit(pTHX_ ATEXIT_t fn, void *ptr);
a296 20
PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CALL_METHOD	\
	assert(methname)

PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CALL_PV	\
	assert(sub_name)

PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, VOL I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CALL_SV	\
	assert(sv)

PERL_CALLCONV const PERL_CONTEXT *	Perl_caller_cx(pTHX_ I32 level, const PERL_CONTEXT **dbcxp);
PERL_CALLCONV Malloc_t	Perl_calloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d303 3
d312 5
a316 1
PERL_CALLCONV U32	Perl_cast_ulong(pTHX_ NV f)
d319 2
a320 1
PERL_CALLCONV UV	Perl_cast_uv(pTHX_ NV f)
d323 4
a326 4
PERL_CALLCONV bool	Perl_check_utf8_print(pTHX_ const U8 *s, const STRLEN len)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CHECK_UTF8_PRINT	\
	assert(s)
d328 9
a336 5
PERL_CALLCONV OP *	Perl_ck_anoncode(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_ANONCODE	\
	assert(o)
a337 5
PERL_CALLCONV OP *	Perl_ck_bitop(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_BITOP	\
	assert(o)
d339 4
a342 5
PERL_CALLCONV OP *	Perl_ck_chdir(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_CHDIR	\
	assert(o)
d344 2
a345 5
PERL_CALLCONV OP *	Perl_ck_cmp(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_CMP	\
	assert(o)
d347 5
a351 5
PERL_CALLCONV OP *	Perl_ck_concat(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_CONCAT	\
	assert(o)
d353 5
a357 5
PERL_CALLCONV OP *	Perl_ck_defined(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_DEFINED	\
	assert(o)
d359 4
a362 5
PERL_CALLCONV OP *	Perl_ck_delete(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_DELETE	\
	assert(o)
d364 5
a368 5
PERL_CALLCONV OP *	Perl_ck_die(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_DIE	\
	assert(o)
d370 5
a374 5
PERL_CALLCONV OP *	Perl_ck_each(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EACH	\
	assert(o)
d376 5
a380 6
PERL_CALLCONV OP*	Perl_ck_entersub_args_core(pTHX_ OP *entersubop, GV *namegv, SV *protosv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_CORE	\
	assert(entersubop); assert(namegv); assert(protosv)
d382 5
a386 4
PERL_CALLCONV OP*	Perl_ck_entersub_args_list(pTHX_ OP *entersubop)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_LIST	\
	assert(entersubop)
d388 6
a393 6
PERL_CALLCONV OP*	Perl_ck_entersub_args_proto(pTHX_ OP *entersubop, GV *namegv, SV *protosv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO	\
	assert(entersubop); assert(namegv); assert(protosv)
d395 6
a400 6
PERL_CALLCONV OP*	Perl_ck_entersub_args_proto_or_list(pTHX_ OP *entersubop, GV *namegv, SV *protosv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO_OR_LIST	\
	assert(entersubop); assert(namegv); assert(protosv)
d402 6
a407 5
PERL_CALLCONV OP *	Perl_ck_eof(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EOF	\
	assert(o)
d409 6
a414 5
PERL_CALLCONV OP *	Perl_ck_eval(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EVAL	\
	assert(o)
d416 6
a421 5
PERL_CALLCONV OP *	Perl_ck_exec(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EXEC	\
	assert(o)
d423 5
a427 5
PERL_CALLCONV OP *	Perl_ck_exists(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_EXISTS	\
	assert(o)
d429 2
a430 2
PERL_CALLCONV OP *	Perl_ck_exit(pTHX_ OP *o)
			__attribute__warn_unused_result__
d432 2
a433 2
#define PERL_ARGS_ASSERT_CK_EXIT	\
	assert(o)
d435 1
a435 2
PERL_CALLCONV OP *	Perl_ck_ftst(pTHX_ OP *o)
			__attribute__warn_unused_result__
d437 2
a438 2
#define PERL_ARGS_ASSERT_CK_FTST	\
	assert(o)
d440 1
a440 1
PERL_CALLCONV OP *	Perl_ck_fun(pTHX_ OP *o)
d443 2
a444 2
#define PERL_ARGS_ASSERT_CK_FUN	\
	assert(o)
d446 2
a447 5
PERL_CALLCONV OP *	Perl_ck_glob(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_GLOB	\
	assert(o)
d449 2
a450 5
PERL_CALLCONV OP *	Perl_ck_grep(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_GREP	\
	assert(o)
d452 1
a452 2
PERL_CALLCONV OP *	Perl_ck_index(pTHX_ OP *o)
			__attribute__warn_unused_result__
d454 2
a455 2
#define PERL_ARGS_ASSERT_CK_INDEX	\
	assert(o)
d457 1
a457 2
PERL_CALLCONV OP *	Perl_ck_join(pTHX_ OP *o)
			__attribute__warn_unused_result__
d459 2
a460 2
#define PERL_ARGS_ASSERT_CK_JOIN	\
	assert(o)
d462 2
a463 2
PERL_CALLCONV OP *	Perl_ck_length(pTHX_ OP *o)
			__attribute__warn_unused_result__
d465 2
a466 2
#define PERL_ARGS_ASSERT_CK_LENGTH	\
	assert(o)
d468 1
a468 1
PERL_CALLCONV OP *	Perl_ck_lfun(pTHX_ OP *o)
d470 3
a472 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_LFUN	\
	assert(o)
d474 1
a474 1
PERL_CALLCONV OP *	Perl_ck_listiob(pTHX_ OP *o)
d476 1
a476 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_LISTIOB	\
	assert(o)
d478 1
a478 1
PERL_CALLCONV OP *	Perl_ck_match(pTHX_ OP *o)
d480 1
a480 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_MATCH	\
	assert(o)
d482 1
a482 1
PERL_CALLCONV OP *	Perl_ck_method(pTHX_ OP *o)
d484 1
a484 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_METHOD	\
	assert(o)
d486 1
a486 1
PERL_CALLCONV OP *	Perl_ck_null(pTHX_ OP *o)
d488 1
a488 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_NULL	\
	assert(o)
d490 1
a490 1
PERL_CALLCONV OP *	Perl_ck_open(pTHX_ OP *o)
d492 1
a492 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_OPEN	\
	assert(o)
d494 2
a495 5
PERL_CALLCONV OP *	Perl_ck_readline(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_READLINE	\
	assert(o)
d497 2
a498 2
PERL_CALLCONV OP *	Perl_ck_repeat(pTHX_ OP *o)
			__attribute__warn_unused_result__
d500 2
a501 2
#define PERL_ARGS_ASSERT_CK_REPEAT	\
	assert(o)
d503 1
a503 2
PERL_CALLCONV OP *	Perl_ck_require(pTHX_ OP *o)
			__attribute__warn_unused_result__
d505 2
a506 2
#define PERL_ARGS_ASSERT_CK_REQUIRE	\
	assert(o)
d508 2
a509 2
PERL_CALLCONV OP *	Perl_ck_return(pTHX_ OP *o)
			__attribute__warn_unused_result__
d511 1
a511 1
#define PERL_ARGS_ASSERT_CK_RETURN	\
d514 10
a523 5
PERL_CALLCONV OP *	Perl_ck_rfun(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_RFUN	\
	assert(o)
d525 24
a548 2
PERL_CALLCONV OP *	Perl_ck_rvconst(pTHX_ OP *o)
			__attribute__warn_unused_result__
d550 2
a551 2
#define PERL_ARGS_ASSERT_CK_RVCONST	\
	assert(o)
d553 5
a557 5
PERL_CALLCONV OP *	Perl_ck_sassign(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SASSIGN	\
	assert(o)
d559 2
a560 2
PERL_CALLCONV OP *	Perl_ck_select(pTHX_ OP *o)
			__attribute__warn_unused_result__
d562 2
a563 2
#define PERL_ARGS_ASSERT_CK_SELECT	\
	assert(o)
a564 5
PERL_CALLCONV OP *	Perl_ck_shift(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SHIFT	\
	assert(o)
d566 5
a570 5
PERL_CALLCONV OP *	Perl_ck_smartmatch(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SMARTMATCH	\
	assert(o)
d572 2
a573 2
PERL_CALLCONV OP *	Perl_ck_sort(pTHX_ OP *o)
			__attribute__warn_unused_result__
d575 2
a576 2
#define PERL_ARGS_ASSERT_CK_SORT	\
	assert(o)
d578 1
a578 5
PERL_CALLCONV OP *	Perl_ck_spair(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SPAIR	\
	assert(o)
d580 6
a585 5
PERL_CALLCONV OP *	Perl_ck_split(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_SPLIT	\
	assert(o)
d587 1
a587 2
PERL_CALLCONV OP *	Perl_ck_subr(pTHX_ OP *o)
			__attribute__warn_unused_result__
d589 2
a590 2
#define PERL_ARGS_ASSERT_CK_SUBR	\
	assert(o)
d592 1
a592 2
PERL_CALLCONV OP *	Perl_ck_substr(pTHX_ OP *o)
			__attribute__warn_unused_result__
d594 2
a595 2
#define PERL_ARGS_ASSERT_CK_SUBSTR	\
	assert(o)
d597 3
a599 2
PERL_CALLCONV OP *	Perl_ck_svconst(pTHX_ OP *o)
			__attribute__warn_unused_result__
d601 2
a602 2
#define PERL_ARGS_ASSERT_CK_SVCONST	\
	assert(o)
d604 4
a607 2
PERL_CALLCONV OP *	Perl_ck_tell(pTHX_ OP *o)
			__attribute__warn_unused_result__
d609 2
a610 2
#define PERL_ARGS_ASSERT_CK_TELL	\
	assert(o)
d612 7
a618 5
PERL_CALLCONV OP *	Perl_ck_trunc(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_TRUNC	\
	assert(o)
d620 5
a624 5
PERL_CALLCONV void	Perl_ck_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CK_WARNER	\
	assert(pat)
d626 2
a627 2
PERL_CALLCONV void	Perl_ck_warner_d(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
d629 2
a630 2
#define PERL_ARGS_ASSERT_CK_WARNER_D	\
	assert(pat)
d632 1
a632 11
PERL_CALLCONV bool	Perl_ckwarn(pTHX_ U32 w);
PERL_CALLCONV bool	Perl_ckwarn_d(pTHX_ U32 w);
PERL_CALLCONV OP*	Perl_convert(pTHX_ I32 optype, I32 flags, OP* o)
			__attribute__warn_unused_result__;

PERL_CALLCONV const char *	Perl_cop_fetch_label(pTHX_ COP *const cop, STRLEN *len, U32 *flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_COP_FETCH_LABEL	\
	assert(cop)

PERL_CALLCONV void	Perl_cop_store_label(pTHX_ COP *const cop, const char *label, STRLEN len, U32 flags)
d635 2
a636 2
#define PERL_ARGS_ASSERT_COP_STORE_LABEL	\
	assert(cop); assert(label)
d638 2
a639 1
PERL_CALLCONV SV *	Perl_core_prototype(pTHX_ SV *sv, const char *name, const int code, int * const opnum)
d641 2
a642 2
#define PERL_ARGS_ASSERT_CORE_PROTOTYPE	\
	assert(name)
d644 5
a648 4
PERL_CALLCONV OP *	Perl_coresub_op(pTHX_ SV *coreargssv, const int code, const int opnum)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CORESUB_OP	\
	assert(coreargssv)
d650 8
a657 4
PERL_CALLCONV PERL_CONTEXT*	Perl_create_eval_scope(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_croak(pTHX_ const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);
d659 6
a664 2
PERL_CALLCONV void	Perl_croak_no_modify(pTHX)
			__attribute__noreturn__;
d666 6
a671 5
PERL_CALLCONV void	Perl_croak_sv(pTHX_ SV *baseex)
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CROAK_SV	\
	assert(baseex)
d673 1
a673 2
PERL_CALLCONV void	Perl_croak_xs_usage(pTHX_ const CV *const cv, const char *const params)
			__attribute__noreturn__
d676 7
a682 2
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE	\
	assert(cv); assert(params)
d684 2
a685 5
PERL_CALLCONV const char *	Perl_custom_op_desc(pTHX_ const OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CUSTOM_OP_DESC	\
	assert(o)
d687 1
a687 2
PERL_CALLCONV const char *	Perl_custom_op_name(pTHX_ const OP *o)
			__attribute__warn_unused_result__
d689 2
a690 2
#define PERL_ARGS_ASSERT_CUSTOM_OP_NAME	\
	assert(o)
d692 2
a693 1
PERL_CALLCONV void	Perl_custom_op_register(pTHX_ Perl_ppaddr_t ppaddr, const XOP *xop)
d695 3
a697 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CUSTOM_OP_REGISTER	\
	assert(ppaddr); assert(xop)
d699 1
a699 2
PERL_CALLCONV const XOP *	Perl_custom_op_xop(pTHX_ const OP *o)
			__attribute__pure__
d701 2
a702 2
#define PERL_ARGS_ASSERT_CUSTOM_OP_XOP	\
	assert(o)
d704 2
a705 1
PERL_CALLCONV void	Perl_cv_ckproto_len_flags(pTHX_ const CV* cv, const GV* gv, const char* p, const STRLEN len, const U32 flags)
d707 2
a708 2
#define PERL_ARGS_ASSERT_CV_CKPROTO_LEN_FLAGS	\
	assert(cv)
d710 1
a710 1
PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto)
d712 2
a713 2
#define PERL_ARGS_ASSERT_CV_CLONE	\
	assert(proto)
d715 4
a718 2
PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ const CV *const cv)
			__attribute__warn_unused_result__;
d720 4
a723 6
PERL_CALLCONV void	Perl_cv_get_call_checker(pTHX_ CV *cv, Perl_call_checker *ckfun_p, SV **ckobj_p)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_CV_GET_CALL_CHECKER	\
	assert(cv); assert(ckfun_p); assert(ckobj_p)
d725 1
a725 2
PERL_CALLCONV void	Perl_cv_set_call_checker(pTHX_ CV *cv, Perl_call_checker ckfun, SV *ckobj)
			__attribute__nonnull__(pTHX_1)
d727 4
a730 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER	\
	assert(cv); assert(ckfun); assert(ckobj)
d732 1
a732 1
PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv)
d734 2
a735 2
#define PERL_ARGS_ASSERT_CV_UNDEF	\
	assert(cv)
d737 2
a738 4
PERL_CALLCONV void	Perl_cvgv_set(pTHX_ CV* cv, GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CVGV_SET	\
	assert(cv)
d740 5
a744 1
PERL_CALLCONV void	Perl_cvstash_set(pTHX_ CV* cv, HV* stash)
d746 2
a747 2
#define PERL_ARGS_ASSERT_CVSTASH_SET	\
	assert(cv)
d749 2
a750 1
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cx)
d752 2
a753 2
#define PERL_ARGS_ASSERT_CX_DUMP	\
	assert(cx)
d755 1
a755 5
PERL_CALLCONV I32	Perl_cxinc(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_deb(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
d757 2
a758 2
#define PERL_ARGS_ASSERT_DEB	\
	assert(pat)
d760 1
a760 2
PERL_CALLCONV void	Perl_deb_stack_all(pTHX);
PERL_CALLCONV I32	Perl_debop(pTHX_ const OP* o)
d762 1
a762 1
#define PERL_ARGS_ASSERT_DEBOP	\
d765 5
a769 12
PERL_CALLCONV void	Perl_debprofdump(pTHX);
PERL_CALLCONV I32	Perl_debstack(pTHX);
PERL_CALLCONV I32	Perl_debstackptrs(pTHX);
PERL_CALLCONV void	Perl_delete_eval_scope(pTHX);
PERL_CALLCONV char*	Perl_delimcpy(char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(6);
#define PERL_ARGS_ASSERT_DELIMCPY	\
	assert(to); assert(toend); assert(from); assert(fromend); assert(retlen)
d771 4
a774 3
PERL_CALLCONV void	Perl_despatch_signals(pTHX);
PERL_CALLCONV OP*	Perl_die(pTHX_ const char* pat, ...)
			__attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);
d776 1
a776 1
PERL_CALLCONV OP*	Perl_die_sv(pTHX_ SV *baseex)
d778 2
a779 2
#define PERL_ARGS_ASSERT_DIE_SV	\
	assert(baseex)
d781 1
a781 2
PERL_CALLCONV void	Perl_die_unwind(pTHX_ SV* msv)
			__attribute__noreturn__
d783 2
a784 2
#define PERL_ARGS_ASSERT_DIE_UNWIND	\
	assert(msv)
d786 4
a789 5
/* PERL_CALLCONV bool	Perl_do_aexec(pTHX_ SV* really, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */
#define PERL_ARGS_ASSERT_DO_AEXEC	\
	assert(mark); assert(sp)
d791 3
a793 1
PERL_CALLCONV bool	Perl_do_aexec5(pTHX_ SV* really, SV** mark, SV** sp, int fd, int do_report)
d796 7
a802 2
#define PERL_ARGS_ASSERT_DO_AEXEC5	\
	assert(mark); assert(sp)
d804 3
a806 1
PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int mode)
d808 2
a809 2
#define PERL_ARGS_ASSERT_DO_BINMODE	\
	assert(fp)
d811 6
a816 5
PERL_CALLCONV bool	Perl_do_close(pTHX_ GV* gv, bool not_implicit);
PERL_CALLCONV void	Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_DUMP_PAD	\
	assert(file)
d818 1
a818 1
PERL_CALLCONV bool	Perl_do_eof(pTHX_ GV* gv)
d820 13
a832 2
#define PERL_ARGS_ASSERT_DO_EOF	\
	assert(gv)
d834 5
a838 6
PERL_CALLCONV void	Perl_do_execfree(pTHX);
PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_GV_DUMP	\
	assert(file); assert(name)
d840 11
a850 5
PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_GVGV_DUMP	\
	assert(file); assert(name)
d852 4
a855 5
PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, const char *name, HV *sv)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_HV_DUMP	\
	assert(file); assert(name)
d857 1
a857 1
PERL_CALLCONV void	Perl_do_join(pTHX_ SV *sv, SV *delim, SV **mark, SV **sp)
d859 3
a861 5
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_DO_JOIN	\
	assert(sv); assert(delim); assert(mark); assert(sp)
d863 5
a867 5
PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_MAGIC_DUMP	\
	assert(file); assert(mg)
d869 1
a869 2
PERL_CALLCONV I32	Perl_do_ncmp(pTHX_ SV *const left, SV *const right)
			__attribute__warn_unused_result__
d872 17
a888 2
#define PERL_ARGS_ASSERT_DO_NCMP	\
	assert(left); assert(right)
d890 1
a890 1
PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, const OP *o)
d892 2
a893 2
#define PERL_ARGS_ASSERT_DO_OP_DUMP	\
	assert(file)
d895 1
a895 1
/* PERL_CALLCONV bool	Perl_do_open(pTHX_ GV* gv, const char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp)
d898 2
a899 2
#define PERL_ARGS_ASSERT_DO_OPEN	\
	assert(gv); assert(name)
d901 1
a901 1
PERL_CALLCONV bool	Perl_do_open9(pTHX_ GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num)
d903 3
a905 4
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_8);
#define PERL_ARGS_ASSERT_DO_OPEN9	\
	assert(gv); assert(name); assert(svs)
d907 1
a907 1
PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, const char *oname, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num)
d910 7
a916 2
#define PERL_ARGS_ASSERT_DO_OPENN	\
	assert(gv); assert(oname)
d918 2
a919 1
PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, const PMOP *pm)
d921 8
a928 2
#define PERL_ARGS_ASSERT_DO_PMOP_DUMP	\
	assert(file)
d930 2
a931 1
PERL_CALLCONV bool	Perl_do_print(pTHX_ SV* sv, PerlIO* fp)
d933 2
a934 2
#define PERL_ARGS_ASSERT_DO_PRINT	\
	assert(fp)
d936 4
a939 2
PERL_CALLCONV OP*	Perl_do_readline(pTHX)
			__attribute__warn_unused_result__;
d941 1
a941 2
PERL_CALLCONV bool	Perl_do_seek(pTHX_ GV* gv, Off_t pos, int whence);
PERL_CALLCONV void	Perl_do_sprintf(pTHX_ SV* sv, I32 len, SV** sarg)
d944 2
a945 2
#define PERL_ARGS_ASSERT_DO_SPRINTF	\
	assert(sv); assert(sarg)
d947 2
a948 1
PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim)
d950 2
a951 2
#define PERL_ARGS_ASSERT_DO_SV_DUMP	\
	assert(file)
d953 1
a953 1
PERL_CALLCONV Off_t	Perl_do_sysseek(pTHX_ GV* gv, Off_t pos, int whence)
d955 1
a955 1
#define PERL_ARGS_ASSERT_DO_SYSSEEK	\
d958 4
a961 5
PERL_CALLCONV Off_t	Perl_do_tell(pTHX_ GV* gv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_TELL	\
	assert(gv)
d963 1
a963 1
PERL_CALLCONV I32	Perl_do_trans(pTHX_ SV* sv)
d965 2
a966 2
#define PERL_ARGS_ASSERT_DO_TRANS	\
	assert(sv)
d968 1
a968 1
PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, I32 offset, I32 size)
d970 1
a970 1
#define PERL_ARGS_ASSERT_DO_VECGET	\
d973 3
a975 1
PERL_CALLCONV void	Perl_do_vecset(pTHX_ SV* sv)
d977 2
a978 2
#define PERL_ARGS_ASSERT_DO_VECSET	\
	assert(sv)
d980 4
a983 6
PERL_CALLCONV void	Perl_do_vop(pTHX_ I32 optype, SV* sv, SV* left, SV* right)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_DO_VOP	\
	assert(sv); assert(left); assert(right)
d985 4
a988 4
PERL_CALLCONV OP*	Perl_dofile(pTHX_ OP* term, I32 force_builtin)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DOFILE	\
	assert(term)
d990 5
a994 2
PERL_CALLCONV bool	Perl_doing_taint(int argc, char** argv, char** env)
			__attribute__warn_unused_result__;
d996 5
a1000 4
PERL_CALLCONV OP *	Perl_doref(pTHX_ OP *o, I32 type, bool set_op_ref)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DOREF	\
	assert(o)
d1002 4
a1005 3
PERL_CALLCONV void	Perl_dounwind(pTHX_ I32 cxix);
PERL_CALLCONV I32	Perl_dowantarray(pTHX)
			__attribute__warn_unused_result__;
d1007 4
a1010 7
PERL_CALLCONV void	Perl_dump_all(pTHX);
PERL_CALLCONV void	Perl_dump_all_perl(pTHX_ bool justperl);
PERL_CALLCONV void	Perl_dump_eval(pTHX);
PERL_CALLCONV void	Perl_dump_form(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUMP_FORM	\
	assert(gv)
d1012 5
a1016 6
PERL_CALLCONV void	Perl_dump_indent(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DUMP_INDENT	\
	assert(file); assert(pat)
d1018 1
a1018 1
PERL_CALLCONV void	Perl_dump_packsubs(pTHX_ const HV* stash)
d1020 2
a1021 2
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS	\
	assert(stash)
d1023 1
a1023 1
PERL_CALLCONV void	Perl_dump_packsubs_perl(pTHX_ const HV* stash, bool justperl)
d1025 2
a1026 2
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS_PERL	\
	assert(stash)
d1028 2
a1029 17
PERL_CALLCONV void	Perl_dump_sub(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUMP_SUB	\
	assert(gv)

PERL_CALLCONV void	Perl_dump_sub_perl(pTHX_ const GV* gv, bool justperl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUMP_SUB_PERL	\
	assert(gv)

PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DUMP_VINDENT	\
	assert(file); assert(pat)

PERL_CALLCONV void	Perl_emulate_cop_io(pTHX_ const COP *const c, SV *const sv)
d1032 2
a1033 2
#define PERL_ARGS_ASSERT_EMULATE_COP_IO	\
	assert(c); assert(sv)
d1035 2
a1036 1
PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error)
d1038 2
a1039 2
#define PERL_ARGS_ASSERT_EVAL_PV	\
	assert(p)
d1041 5
a1045 4
PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_EVAL_SV	\
	assert(sv)
d1047 1
a1047 6
PERL_CALLCONV void	Perl_fbm_compile(pTHX_ SV* sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FBM_COMPILE	\
	assert(sv)

PERL_CALLCONV char*	Perl_fbm_instr(pTHX_ unsigned char* big, unsigned char* bigend, SV* littlestr, U32 flags)
d1052 2
a1053 2
#define PERL_ARGS_ASSERT_FBM_INSTR	\
	assert(big); assert(bigend); assert(littlestr)
d1055 2
a1056 1
PERL_CALLCONV bool	Perl_feature_is_enabled(pTHX_ const char *const name, STRLEN namelen)
d1058 2
a1059 2
#define PERL_ARGS_ASSERT_FEATURE_IS_ENABLED	\
	assert(name)
d1061 1
a1061 7
PERL_CALLCONV SV*	Perl_filter_add(pTHX_ filter_t funcp, SV* datasv);
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FILTER_DEL	\
	assert(funcp)

PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV *buf_sv, int maxlen)
d1063 1
d1065 2
a1066 2
#define PERL_ARGS_ASSERT_FILTER_READ	\
	assert(buf_sv)
d1068 1
a1068 1
PERL_CALLCONV void	Perl_finalize_optree(pTHX_ OP* o)
d1070 2
a1071 2
#define PERL_ARGS_ASSERT_FINALIZE_OPTREE	\
	assert(o)
d1073 4
a1076 2
PERL_CALLCONV CV*	Perl_find_runcv(pTHX_ U32 *db_seqp)
			__attribute__warn_unused_result__;
d1078 10
a1087 5
PERL_CALLCONV SV*	Perl_find_rundefsv(pTHX);
PERL_CALLCONV SV*	Perl_find_rundefsv2(pTHX_ CV *cv, U32 seq)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FIND_RUNDEFSV2	\
	assert(cv)
d1089 6
a1094 16
PERL_CALLCONV PADOFFSET	Perl_find_rundefsvoffset(pTHX)
			__attribute__deprecated__;

PERL_CALLCONV char*	Perl_find_script(pTHX_ const char *scriptname, bool dosearch, const char *const *const search_ext, I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FIND_SCRIPT	\
	assert(scriptname)

PERL_CALLCONV I32	Perl_foldEQ(const char* a, const char* b, I32 len)
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_FOLDEQ	\
	assert(a); assert(b)

PERL_CALLCONV I32	Perl_foldEQ_latin1(const char* a, const char* b, I32 len)
d1098 1
a1098 1
#define PERL_ARGS_ASSERT_FOLDEQ_LATIN1	\
d1101 1
a1101 1
PERL_CALLCONV I32	Perl_foldEQ_locale(const char* a, const char* b, I32 len)
d1105 1
a1105 1
#define PERL_ARGS_ASSERT_FOLDEQ_LOCALE	\
d1108 1
a1108 5
/* PERL_CALLCONV I32	foldEQ_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_5); */

PERL_CALLCONV I32	Perl_foldEQ_utf8_flags(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2, U32 flags)
d1111 1
a1111 1
#define PERL_ARGS_ASSERT_FOLDEQ_UTF8_FLAGS	\
d1114 9
a1122 5
PERL_CALLCONV char*	Perl_form(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORM	\
	assert(pat)
d1124 4
a1127 3
PERL_CALLCONV void	Perl_free_tied_hv_pool(pTHX);
PERL_CALLCONV void	Perl_free_tmps(pTHX);
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char *name, I32 flags)
d1129 2
a1130 2
#define PERL_ARGS_ASSERT_GET_AV	\
	assert(name)
d1132 8
a1139 2
PERL_CALLCONV void*	Perl_get_context(void)
			__attribute__warn_unused_result__;
d1141 1
a1141 1
PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 flags)
d1143 2
a1144 2
#define PERL_ARGS_ASSERT_GET_CV	\
	assert(name)
d1146 2
a1147 4
PERL_CALLCONV CV*	Perl_get_cvn_flags(pTHX_ const char* name, STRLEN len, I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_CVN_FLAGS	\
	assert(name)
d1149 1
a1149 6
PERL_CALLCONV void	Perl_get_db_sub(pTHX_ SV **svp, CV *cv)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GET_DB_SUB	\
	assert(cv)

PERL_CALLCONV UV	Perl_get_hash_seed(pTHX)
d1152 31
a1182 4
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char *name, I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_HV	\
	assert(name)
d1184 1
a1184 1
PERL_CALLCONV const char*	Perl_get_no_modify(pTHX)
d1188 1
a1188 1
PERL_CALLCONV char**	Perl_get_op_descs(pTHX)
d1192 1
a1192 1
PERL_CALLCONV char**	Perl_get_op_names(pTHX)
d1196 1
a1196 1
PERL_CALLCONV U32*	Perl_get_opargs(pTHX)
d1200 1
a1200 1
PERL_CALLCONV PPADDR_t*	Perl_get_ppaddr(pTHX)
d1204 3
a1206 5
PERL_CALLCONV REGEXP *	Perl_get_re_arg(pTHX_ SV *sv);
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char *name, I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_SV	\
	assert(name)
d1208 3
a1210 2
PERL_CALLCONV MGVTBL*	Perl_get_vtbl(pTHX_ int vtbl_id)
			__attribute__warn_unused_result__;
d1212 3
a1214 4
PERL_CALLCONV int	Perl_getcwd_sv(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GETCWD_SV	\
	assert(sv)
d1216 1
a1216 4
PERL_CALLCONV void	Perl_gp_free(pTHX_ GV* gv);
PERL_CALLCONV GP*	Perl_gp_ref(pTHX_ GP* gp);
PERL_CALLCONV UV	Perl_grok_bin(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
d1219 2
a1220 2
#define PERL_ARGS_ASSERT_GROK_BIN	\
	assert(start); assert(len_p); assert(flags)
d1222 1
a1222 2
PERL_CALLCONV UV	Perl_grok_hex(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
d1225 2
a1226 2
#define PERL_ARGS_ASSERT_GROK_HEX	\
	assert(start); assert(len_p); assert(flags)
d1228 5
a1232 11
PERL_CALLCONV int	Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GROK_NUMBER	\
	assert(pv)

PERL_CALLCONV bool	Perl_grok_numeric_radix(pTHX_ const char **sp, const char *send)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GROK_NUMERIC_RADIX	\
	assert(sp); assert(send)
d1234 1
a1234 2
PERL_CALLCONV UV	Perl_grok_oct(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result)
			__attribute__nonnull__(pTHX_1)
d1237 6
a1242 2
#define PERL_ARGS_ASSERT_GROK_OCT	\
	assert(start); assert(len_p); assert(flags)
d1244 1
a1244 5
/* PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV *gv); */
/* PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV *gv); */
/* PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv); */
PERL_CALLCONV GV*	Perl_gv_add_by_type(pTHX_ GV *gv, svtype type);
/* PERL_CALLCONV GV*	gv_autoload4(pTHX_ HV* stash, const char* name, STRLEN len, I32 method)
d1246 1
a1246 1
			__attribute__nonnull__(pTHX_2); */
d1248 1
a1248 1
PERL_CALLCONV GV*	Perl_gv_autoload_pv(pTHX_ HV* stash, const char* namepv, U32 flags)
d1250 1
a1250 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PV	\
	assert(namepv)
d1252 1
a1252 1
PERL_CALLCONV GV*	Perl_gv_autoload_pvn(pTHX_ HV* stash, const char* name, STRLEN len, U32 flags)
d1254 1
a1254 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PVN	\
	assert(name)
d1256 1
a1256 1
PERL_CALLCONV GV*	Perl_gv_autoload_sv(pTHX_ HV* stash, SV* namesv, U32 flags)
d1258 1
a1258 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_SV	\
	assert(namesv)
d1260 3
a1262 4
PERL_CALLCONV void	Perl_gv_check(pTHX_ const HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_CHECK	\
	assert(stash)
d1264 1
a1264 1
PERL_CALLCONV SV*	Perl_gv_const_sv(pTHX_ GV* gv)
d1266 1
a1266 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_CONST_SV	\
	assert(gv)
d1268 3
a1270 4
PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_DUMP	\
	assert(gv)
d1272 3
a1274 5
PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, const GV* gv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_EFULLNAME	\
	assert(sv); assert(gv)
d1276 3
a1278 5
/* PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, const GV* gv, const char* prefix)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_GV_EFULLNAME3	\
	assert(sv); assert(gv)
d1280 3
a1282 5
PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_EFULLNAME4	\
	assert(sv); assert(gv)
d1284 3
a1286 4
PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_FETCHFILE	\
	assert(name)
d1288 3
a1290 4
PERL_CALLCONV GV*	Perl_gv_fetchfile_flags(pTHX_ const char *const name, const STRLEN len, const U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_FETCHFILE_FLAGS	\
	assert(name)
d1292 4
a1295 2
/* PERL_CALLCONV GV*	gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level)
			__attribute__nonnull__(pTHX_2); */
d1297 4
a1300 2
/* PERL_CALLCONV GV*	gv_fetchmeth_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level)
			__attribute__nonnull__(pTHX_2); */
d1302 4
a1305 4
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pv(pTHX_ HV* stash, const char* name, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV	\
	assert(name)
d1307 4
a1310 4
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pv_autoload(pTHX_ HV* stash, const char* name, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV_AUTOLOAD	\
	assert(name)
d1312 4
a1315 4
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pvn(pTHX_ HV* stash, const char* name, STRLEN len, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN	\
	assert(name)
d1317 5
a1321 4
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pvn_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN_AUTOLOAD	\
	assert(name)
d1323 5
a1327 4
PERL_CALLCONV GV*	Perl_gv_fetchmeth_sv(pTHX_ HV* stash, SV* namesv, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV	\
	assert(namesv)
d1329 5
a1333 4
PERL_CALLCONV GV*	Perl_gv_fetchmeth_sv_autoload(pTHX_ HV* stash, SV* namesv, I32 level, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV_AUTOLOAD	\
	assert(namesv)
d1335 5
a1339 5
/* PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD	\
	assert(stash); assert(name)
d1341 5
a1345 5
PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_AUTOLOAD	\
	assert(stash); assert(name)
d1347 5
a1351 5
PERL_CALLCONV GV*	Perl_gv_fetchmethod_pv_flags(pTHX_ HV* stash, const char* name, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PV_FLAGS	\
	assert(stash); assert(name)
d1353 2
a1354 13
PERL_CALLCONV GV*	Perl_gv_fetchmethod_pvn_flags(pTHX_ HV* stash, const char* name, const STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PVN_FLAGS	\
	assert(stash); assert(name)

PERL_CALLCONV GV*	Perl_gv_fetchmethod_sv_flags(pTHX_ HV* stash, SV* namesv, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_SV_FLAGS	\
	assert(stash); assert(namesv)

PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 add, const svtype sv_type)
d1356 2
a1357 2
#define PERL_ARGS_ASSERT_GV_FETCHPV	\
	assert(nambeg)
d1359 2
a1360 1
PERL_CALLCONV GV*	Perl_gv_fetchpvn_flags(pTHX_ const char* name, STRLEN len, I32 flags, const svtype sv_type)
d1362 2
a1363 2
#define PERL_ARGS_ASSERT_GV_FETCHPVN_FLAGS	\
	assert(name)
d1365 2
a1366 1
PERL_CALLCONV GV*	Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, const svtype sv_type)
d1368 2
a1369 2
#define PERL_ARGS_ASSERT_GV_FETCHSV	\
	assert(name)
d1371 2
a1372 50
PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, const GV* gv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FULLNAME	\
	assert(sv); assert(gv)

/* PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, const GV* gv, const char* prefix)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_GV_FULLNAME3	\
	assert(sv); assert(gv)

PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_FULLNAME4	\
	assert(sv); assert(gv)

PERL_CALLCONV CV*	Perl_gv_handler(pTHX_ HV* stash, I32 id)
			__attribute__warn_unused_result__;

/* PERL_CALLCONV void	gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3); */

PERL_CALLCONV void	Perl_gv_init_pv(pTHX_ GV* gv, HV* stash, const char* name, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GV_INIT_PV	\
	assert(gv); assert(name)

PERL_CALLCONV void	Perl_gv_init_pvn(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GV_INIT_PVN	\
	assert(gv); assert(name)

PERL_CALLCONV void	Perl_gv_init_sv(pTHX_ GV* gv, HV* stash, SV* namesv, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GV_INIT_SV	\
	assert(gv); assert(namesv)

PERL_CALLCONV void	Perl_gv_name_set(pTHX_ GV* gv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GV_NAME_SET	\
	assert(gv); assert(name)

PERL_CALLCONV HV*	Perl_gv_stashpv(pTHX_ const char* name, I32 flags)
d1374 2
a1375 2
#define PERL_ARGS_ASSERT_GV_STASHPV	\
	assert(name)
d1377 2
a1378 1
PERL_CALLCONV HV*	Perl_gv_stashpvn(pTHX_ const char* name, U32 namelen, I32 flags)
d1380 2
a1381 2
#define PERL_ARGS_ASSERT_GV_STASHPVN	\
	assert(name)
d1383 2
a1384 1
PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 flags)
d1386 2
a1387 2
#define PERL_ARGS_ASSERT_GV_STASHSV	\
	assert(sv)
d1389 2
a1390 1
PERL_CALLCONV void	Perl_gv_try_downgrade(pTHX_ GV* gv)
d1392 2
a1393 2
#define PERL_ARGS_ASSERT_GV_TRY_DOWNGRADE	\
	assert(gv)
d1395 2
a1396 1
PERL_CALLCONV AV**	Perl_hv_backreferences_p(pTHX_ HV *hv)
d1398 2
a1399 2
#define PERL_ARGS_ASSERT_HV_BACKREFERENCES_P	\
	assert(hv)
d1401 2
a1402 2
PERL_CALLCONV void	Perl_hv_clear(pTHX_ HV *hv);
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV *hv)
d1404 2
a1405 2
#define PERL_ARGS_ASSERT_HV_CLEAR_PLACEHOLDERS	\
	assert(hv)
d1407 2
a1408 10
PERL_CALLCONV void*	Perl_hv_common(pTHX_ HV *hv, SV *keysv, const char* key, STRLEN klen, int flags, int action, SV *val, U32 hash);
PERL_CALLCONV void*	Perl_hv_common_key_len(pTHX_ HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HV_COMMON_KEY_LEN	\
	assert(key)

PERL_CALLCONV HV *	Perl_hv_copy_hints_hv(pTHX_ HV *const ohv)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV *hv, HE *entry)
d1410 2
a1411 2
#define PERL_ARGS_ASSERT_HV_DELAYFREE_ENT	\
	assert(hv)
d1413 1
a1413 11
/* PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV *hv, const char *key, I32 klen, I32 flags)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_HV_DELETE	\
	assert(key)

/* PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV *hv, SV *keysv, I32 flags, U32 hash)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_HV_DELETE_ENT	\
	assert(keysv)

PERL_CALLCONV HE**	Perl_hv_eiter_p(pTHX_ HV *hv)
d1416 2
a1417 2
#define PERL_ARGS_ASSERT_HV_EITER_P	\
	assert(hv)
d1419 2
a1420 1
PERL_CALLCONV void	Perl_hv_eiter_set(pTHX_ HV *hv, HE *eiter)
d1422 2
a1423 2
#define PERL_ARGS_ASSERT_HV_EITER_SET	\
	assert(hv)
d1425 1
a1425 13
PERL_CALLCONV void	Perl_hv_ename_add(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HV_ENAME_ADD	\
	assert(hv); assert(name)

PERL_CALLCONV void	Perl_hv_ename_delete(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HV_ENAME_DELETE	\
	assert(hv); assert(name)

/* PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV *hv, const char *key, I32 klen)
d1427 3
a1429 3
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_HV_EXISTS	\
	assert(key)
d1431 1
a1431 1
/* PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV *hv, SV *keysv, U32 hash)
a1432 15
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_HV_EXISTS_ENT	\
	assert(keysv)

/* PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV *hv, const char *key, I32 klen, I32 lval)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_HV_FETCH	\
	assert(key)

/* PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV *hv, SV *keysv, I32 lval, U32 hash)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_HV_FETCH_ENT	\
	assert(keysv)

PERL_CALLCONV STRLEN	Perl_hv_fill(pTHX_ HV const *const hv)
d1434 2
a1435 2
#define PERL_ARGS_ASSERT_HV_FILL	\
	assert(hv)
d1437 2
a1438 1
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV *hv, HE *entryK)
d1440 2
a1441 2
#define PERL_ARGS_ASSERT_HV_FREE_ENT	\
	assert(hv)
d1443 2
a1444 1
PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV *hv)
d1446 2
a1447 2
#define PERL_ARGS_ASSERT_HV_ITERINIT	\
	assert(hv)
d1449 1
a1449 1
PERL_CALLCONV char*	Perl_hv_iterkey(pTHX_ HE* entry, I32* retlen)
d1451 3
a1453 4
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HV_ITERKEY	\
	assert(entry); assert(retlen)
d1455 1
a1455 1
PERL_CALLCONV SV*	Perl_hv_iterkeysv(pTHX_ HE* entry)
d1458 2
a1459 2
#define PERL_ARGS_ASSERT_HV_ITERKEYSV	\
	assert(entry)
d1461 1
a1461 1
/* PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV *hv)
d1463 3
a1465 3
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_HV_ITERNEXT	\
	assert(hv)
d1467 1
a1467 1
PERL_CALLCONV HE*	Perl_hv_iternext_flags(pTHX_ HV *hv, I32 flags)
d1470 2
a1471 2
#define PERL_ARGS_ASSERT_HV_ITERNEXT_FLAGS	\
	assert(hv)
d1473 1
a1473 1
PERL_CALLCONV SV*	Perl_hv_iternextsv(pTHX_ HV *hv, char **key, I32 *retlen)
d1475 3
a1477 5
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_HV_ITERNEXTSV	\
	assert(hv); assert(key); assert(retlen)
d1479 1
a1479 1
PERL_CALLCONV SV*	Perl_hv_iterval(pTHX_ HV *hv, HE *entry)
d1481 3
a1483 4
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HV_ITERVAL	\
	assert(hv); assert(entry)
d1485 1
a1485 1
PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV *hv, IV newmax)
d1487 2
a1488 2
#define PERL_ARGS_ASSERT_HV_KSPLIT	\
	assert(hv)
d1490 11
a1500 4
/* PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV *hv, GV *gv, int how)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_HV_MAGIC	\
	assert(hv)
d1502 1
a1502 1
PERL_CALLCONV void	Perl_hv_name_set(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
d1504 2
a1505 2
#define PERL_ARGS_ASSERT_HV_NAME_SET	\
	assert(hv)
d1507 7
a1513 2
PERL_CALLCONV I32	Perl_hv_placeholders_get(pTHX_ const HV *hv)
			__attribute__warn_unused_result__
d1515 2
a1516 2
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_GET	\
	assert(hv)
d1518 1
a1518 2
PERL_CALLCONV I32*	Perl_hv_placeholders_p(pTHX_ HV *hv)
			__attribute__warn_unused_result__
d1520 2
a1521 2
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_P	\
	assert(hv)
d1523 1
a1523 1
PERL_CALLCONV void	Perl_hv_placeholders_set(pTHX_ HV *hv, I32 ph)
d1525 2
a1526 2
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_SET	\
	assert(hv)
d1528 1
a1528 2
PERL_CALLCONV I32*	Perl_hv_riter_p(pTHX_ HV *hv)
			__attribute__warn_unused_result__
d1530 2
a1531 2
#define PERL_ARGS_ASSERT_HV_RITER_P	\
	assert(hv)
d1533 1
a1533 1
PERL_CALLCONV void	Perl_hv_riter_set(pTHX_ HV *hv, I32 riter)
d1535 2
a1536 2
#define PERL_ARGS_ASSERT_HV_RITER_SET	\
	assert(hv)
d1538 5
a1542 2
PERL_CALLCONV SV*	Perl_hv_scalar(pTHX_ HV *hv)
			__attribute__warn_unused_result__
d1544 2
a1545 2
#define PERL_ARGS_ASSERT_HV_SCALAR	\
	assert(hv)
d1547 4
a1550 8
/* PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV *hv, const char *key, I32 klen, SV *val, U32 hash); */
/* PERL_CALLCONV HE*	Perl_hv_store_ent(pTHX_ HV *hv, SV *key, SV *val, U32 hash); */
/* PERL_CALLCONV SV**	Perl_hv_store_flags(pTHX_ HV *hv, const char *key, I32 klen, SV *val, U32 hash, int flags); */
/* PERL_CALLCONV void	hv_undef(pTHX_ HV *hv); */
PERL_CALLCONV void	Perl_hv_undef_flags(pTHX_ HV *hv, U32 flags);
/* PERL_CALLCONV I32	ibcmp(pTHX_ const char* a, const char* b, I32 len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d1552 7
a1558 3
/* PERL_CALLCONV I32	ibcmp_locale(pTHX_ const char* a, const char* b, I32 len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
d1560 7
a1566 3
/* PERL_CALLCONV I32	ibcmp_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_5); */
d1568 1
a1568 1
PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int argc, char **argv)
d1570 2
a1571 2
#define PERL_ARGS_ASSERT_INIT_ARGV_SYMBOLS	\
	assert(argv)
d1573 1
a1573 6
PERL_CALLCONV void	Perl_init_dbargs(pTHX);
PERL_CALLCONV void	Perl_init_debugger(pTHX);
PERL_CALLCONV int	Perl_init_i18nl10n(pTHX_ int printwarn);
PERL_CALLCONV int	Perl_init_i18nl14n(pTHX_ int printwarn);
PERL_CALLCONV void	Perl_init_stacks(pTHX);
PERL_CALLCONV void	Perl_init_tm(pTHX_ struct tm *ptm)
d1575 2
a1576 2
#define PERL_ARGS_ASSERT_INIT_TM	\
	assert(ptm)
d1578 1
a1578 1
PERL_CALLCONV char*	Perl_instr(const char* big, const char* little)
a1579 11
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_INSTR	\
	assert(big); assert(little)

PERL_CALLCONV U32	Perl_intro_my(pTHX);
PERL_CALLCONV OP*	Perl_invert(pTHX_ OP* cmd)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl_io_close(pTHX_ IO* io, bool not_implicit)
d1581 2
a1582 2
#define PERL_ARGS_ASSERT_IO_CLOSE	\
	assert(io)
d1584 6
a1589 4
PERL_CALLCONV bool	Perl_is_ascii_string(const U8 *s, STRLEN len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_ASCII_STRING	\
	assert(s)
d1591 6
a1596 2
PERL_CALLCONV I32	Perl_is_lvalue_sub(pTHX)
			__attribute__warn_unused_result__;
d1598 4
a1601 3
PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1603 1
a1603 1
PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ UV c)
d1605 4
a1608 1
			__attribute__pure__;
d1610 6
a1615 3
PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1617 5
a1621 3
PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1623 5
a1627 3
PERL_CALLCONV bool	Perl_is_uni_ascii(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1629 5
a1633 3
PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1635 5
a1639 3
PERL_CALLCONV bool	Perl_is_uni_cntrl(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1641 4
a1644 3
PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1646 5
a1650 3
PERL_CALLCONV bool	Perl_is_uni_digit(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1652 5
a1656 3
PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1658 5
a1662 3
PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1664 5
a1668 3
PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1670 5
a1674 3
PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1676 5
a1680 3
PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1682 5
a1686 3
PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;
d1688 2
a1689 403
PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_xdigit_lc(pTHX_ UV c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_utf8_X_L(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_L	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_LV(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_LV	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_LVT(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_LVT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_LV_LVT_V(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_LV_LVT_V	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_T(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_T	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_V(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_V	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_begin(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_BEGIN	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_extend(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_EXTEND	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_non_hangul(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_NON_HANGUL	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_X_prepend(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_X_PREPEND	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUM	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_ALPHA	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_ASCII	\
	assert(p)

PERL_CALLCONV STRLEN	Perl_is_utf8_char(const U8 *s)
			__attribute__deprecated__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR	\
	assert(s)

PERL_CALLCONV STRLEN	Perl_is_utf8_char_buf(const U8 *buf, const U8 *buf_end)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_BUF	\
	assert(buf); assert(buf_end)

PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_CNTRL	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_DIGIT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_GRAPH	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_idcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_IDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_IDFIRST	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_LOWER	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_mark(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_MARK	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_perl_space(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_SPACE	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_perl_word(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_PERL_WORD	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_posix_digit(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_POSIX_DIGIT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_PRINT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_PUNCT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_SPACE	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_string(const U8 *s, STRLEN len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING	\
	assert(s)

/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **p)
			__attribute__nonnull__(1); */
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOC	\
	assert(s)

PERL_CALLCONV bool	Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN	\
	assert(s)

PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_UPPER	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_XDIGIT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_xidcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_XIDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl_is_utf8_xidfirst(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_XIDFIRST	\
	assert(p)

PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_JMAYBE	\
	assert(o)

PERL_CALLCONV I32	Perl_keyword(pTHX_ const char *name, I32 len, bool all_keywords)
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_KEYWORD	\
	assert(name)

PERL_CALLCONV int	Perl_keyword_plugin_standard(pTHX_ char* keyword_ptr, STRLEN keyword_len, OP** op_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_KEYWORD_PLUGIN_STANDARD	\
	assert(keyword_ptr); assert(op_ptr)

PERL_CALLCONV void	Perl_leave_scope(pTHX_ I32 base);
PERL_CALLCONV bool	Perl_lex_bufutf8(pTHX);
PERL_CALLCONV void	Perl_lex_discard_to(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_DISCARD_TO	\
	assert(ptr)

PERL_CALLCONV char*	Perl_lex_grow_linestr(pTHX_ STRLEN len);
PERL_CALLCONV bool	Perl_lex_next_chunk(pTHX_ U32 flags);
PERL_CALLCONV I32	Perl_lex_peek_unichar(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_lex_read_space(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_lex_read_to(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_READ_TO	\
	assert(ptr)

PERL_CALLCONV I32	Perl_lex_read_unichar(pTHX_ U32 flags);
PERL_CALLCONV void	Perl_lex_start(pTHX_ SV* line, PerlIO *rsfp, U32 flags);
PERL_CALLCONV void	Perl_lex_stuff_pv(pTHX_ const char* pv, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_STUFF_PV	\
	assert(pv)

PERL_CALLCONV void	Perl_lex_stuff_pvn(pTHX_ const char* pv, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_STUFF_PVN	\
	assert(pv)

PERL_CALLCONV void	Perl_lex_stuff_sv(pTHX_ SV* sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_STUFF_SV	\
	assert(sv)

PERL_CALLCONV void	Perl_lex_unstuff(pTHX_ char* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LEX_UNSTUFF	\
	assert(ptr)

PERL_CALLCONV OP*	Perl_list(pTHX_ OP* o);
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_LOAD_MODULE	\
	assert(name)

PERL_CALLCONV OP*	Perl_localize(pTHX_ OP *o, I32 lex)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LOCALIZE	\
	assert(o)

PERL_CALLCONV I32	Perl_looks_like_number(pTHX_ SV *const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_LOOKS_LIKE_NUMBER	\
	assert(sv)

PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEAR_ALL_ENV	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_clearenv(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARENV	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_clearhint(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINT	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_clearhints(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINTS	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_clearisa(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARISA	\
	assert(mg)

PERL_CALLCONV int	Perl_magic_clearpack(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARPACK	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_clearsig(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARSIG	\
	assert(sv); assert(mg)

PERL_CALLCONV void	Perl_magic_dump(pTHX_ const MAGIC *mg);
PERL_CALLCONV int	Perl_magic_existspack(pTHX_ SV* sv, const MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_EXISTSPACK	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_freearylen_p(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_FREEARYLEN_P	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_freeovrld(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_FREEOVRLD	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_get(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_GET	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_getarylen(pTHX_ SV* sv, const MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_GETARYLEN	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_getdefelem(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_GETDEFELEM	\
	assert(sv); assert(mg)

PERL_CALLCONV int	Perl_magic_getnkeys(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
a1735 6
PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_KILLBACKREFS	\
	assert(sv); assert(mg)

a1741 7
PERL_CALLCONV SV*	Perl_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, const char *meth, U32 flags, U32 argc, ...)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MAGIC_METHCALL	\
	assert(sv); assert(mg); assert(meth)

a1767 6
PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV *hv, MAGIC *mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_SCALARPACK	\
	assert(hv); assert(mg)

d1774 1
a1774 1
PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg)
d1777 1
a1777 1
#define PERL_ARGS_ASSERT_MAGIC_SET_ALL_ENV	\
d1780 1
a1780 1
PERL_CALLCONV int	Perl_magic_setamagic(pTHX_ SV* sv, MAGIC* mg)
d1783 1
a1783 1
#define PERL_ARGS_ASSERT_MAGIC_SETAMAGIC	\
d1786 1
a1786 1
PERL_CALLCONV int	Perl_magic_setarylen(pTHX_ SV* sv, MAGIC* mg)
d1789 1
a1789 1
#define PERL_ARGS_ASSERT_MAGIC_SETARYLEN	\
d1869 1
a1869 1
PERL_CALLCONV int	Perl_magic_setutf8(pTHX_ SV* sv, MAGIC* mg)
d1872 1
a1872 1
#define PERL_ARGS_ASSERT_MAGIC_SETUTF8	\
d1875 1
a1875 1
PERL_CALLCONV int	Perl_magic_setuvar(pTHX_ SV* sv, MAGIC* mg)
d1878 1
a1878 1
#define PERL_ARGS_ASSERT_MAGIC_SETUVAR	\
d1881 1
a1881 1
PERL_CALLCONV int	Perl_magic_setvec(pTHX_ SV* sv, MAGIC* mg)
d1884 1
a1884 1
#define PERL_ARGS_ASSERT_MAGIC_SETVEC	\
d1887 1
a1887 1
PERL_CALLCONV int	Perl_magic_setvstring(pTHX_ SV* sv, MAGIC* mg)
d1890 1
a1890 1
#define PERL_ARGS_ASSERT_MAGIC_SETVSTRING	\
d1905 13
a1917 3
PERL_CALLCONV Malloc_t	Perl_malloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d1919 1
a1919 1
PERL_CALLCONV void	Perl_markstack_grow(pTHX);
d1926 6
a1931 1
PERL_CALLCONV SV*	Perl_mess_sv(pTHX_ SV* basemsg, bool consume)
d1933 12
a1944 2
#define PERL_ARGS_ASSERT_MESS_SV	\
	assert(basemsg)
a1945 1
PERL_CALLCONV Free_t	Perl_mfree(Malloc_t where);
d1957 6
a1965 3
PERL_CALLCONV MAGIC*	Perl_mg_findext(pTHX_ const SV* sv, int type, const MGVTBL *vtbl)
			__attribute__warn_unused_result__;

a1970 5
PERL_CALLCONV void	Perl_mg_free_type(pTHX_ SV* sv, int how)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MG_FREE_TYPE	\
	assert(sv)

a1980 6
PERL_CALLCONV void	Perl_mg_localize(pTHX_ SV* sv, SV* nsv, bool setmagic)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MG_LOCALIZE	\
	assert(sv); assert(nsv)

d2001 1
a2002 1
PERL_CALLCONV void *	Perl_more_bodies(pTHX_ const svtype sv_type, const size_t body_size, const size_t arena_size);
d2005 2
a2006 61
#define PERL_ARGS_ASSERT_MORESWITCHES	\
	assert(s)

PERL_CALLCONV const struct mro_alg *	Perl_mro_get_from_name(pTHX_ SV *name)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_GET_FROM_NAME	\
	assert(name)

PERL_CALLCONV AV*	Perl_mro_get_linear_isa(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA	\
	assert(stash)

PERL_CALLCONV SV*	Perl_mro_get_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MRO_GET_PRIVATE_DATA	\
	assert(smeta); assert(which)

PERL_CALLCONV void	Perl_mro_isa_changed_in(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_ISA_CHANGED_IN	\
	assert(stash)

PERL_CALLCONV struct mro_meta*	Perl_mro_meta_init(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_META_INIT	\
	assert(stash)

PERL_CALLCONV void	Perl_mro_method_changed_in(pTHX_ HV* stash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_METHOD_CHANGED_IN	\
	assert(stash)

PERL_CALLCONV void	Perl_mro_package_moved(pTHX_ HV * const stash, HV * const oldstash, const GV * const gv, U32 flags)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MRO_PACKAGE_MOVED	\
	assert(gv)

PERL_CALLCONV void	Perl_mro_register(pTHX_ const struct mro_alg *mro)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_REGISTER	\
	assert(mro)

PERL_CALLCONV void	Perl_mro_set_mro(pTHX_ struct mro_meta *const meta, SV *const name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MRO_SET_MRO	\
	assert(meta); assert(name)

PERL_CALLCONV SV*	Perl_mro_set_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which, SV *const data)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MRO_SET_PRIVATE_DATA	\
	assert(smeta); assert(which); assert(data)

PERL_CALLCONV void	Perl_munge_qwlist_to_paren_list(pTHX_ OP* qwlist)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MUNGE_QWLIST_TO_PAREN_LIST	\
	assert(qwlist)
d2013 6
a2018 5
PERL_CALLCONV char*	Perl_my_atof2(pTHX_ const char *s, NV* value)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MY_ATOF2	\
	assert(s); assert(value)
d2020 6
a2025 4
PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MY_ATTRS	\
	assert(o)
d2027 1
a2027 2
PERL_CALLCONV void	Perl_my_clearenv(pTHX);
PERL_CALLCONV int	Perl_my_dirfd(pTHX_ DIR* dir);
d2036 26
a2061 2
/* PERL_CALLCONV I32	Perl_my_lstat(pTHX); */
PERL_CALLCONV I32	Perl_my_lstat_flags(pTHX_ const U32 flags);
d2069 1
a2069 10
PERL_CALLCONV int	Perl_my_snprintf(char *buffer, const Size_t len, const char *format, ...)
			__attribute__format__(__printf__,3,4)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_MY_SNPRINTF	\
	assert(buffer); assert(format)

PERL_CALLCONV int	Perl_my_socketpair(int family, int type, int protocol, int fd[2]);
/* PERL_CALLCONV I32	Perl_my_stat(pTHX); */
PERL_CALLCONV I32	Perl_my_stat_flags(pTHX_ const U32 flags);
d2075 5
a2079 4
PERL_CALLCONV void	Perl_my_swabn(void* ptr, int n)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MY_SWABN	\
	assert(ptr)
d2081 4
a2084 6
PERL_CALLCONV void	Perl_my_unexec(pTHX);
PERL_CALLCONV int	Perl_my_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_MY_VSNPRINTF	\
	assert(buffer); assert(format)
d2086 1
a2086 2
PERL_CALLCONV OP*	Perl_newANONATTRSUB(pTHX_ I32 floor, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV OP*	Perl_newANONHASH(pTHX_ OP* o)
d2088 2
a2089 1
			__attribute__warn_unused_result__;
d2091 2
d2097 1
a2097 2
PERL_CALLCONV OP*	Perl_newANONSUB(pTHX_ I32 floor, OP* proto, OP* block);
PERL_CALLCONV OP*	Perl_newASSIGNOP(pTHX_ I32 flags, OP* left, I32 optype, OP* right)
d2101 2
a2102 13
PERL_CALLCONV CV*	Perl_newATTRSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV CV*	Perl_newATTRSUB_flags(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block, U32 flags);
/* PERL_CALLCONV AV*	Perl_newAV(pTHX)
			__attribute__warn_unused_result__; */

PERL_CALLCONV OP*	Perl_newAVREF(pTHX_ OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWAVREF	\
	assert(o)

PERL_CALLCONV OP*	Perl_newBINOP(pTHX_ I32 type, I32 flags, OP* first, OP* last)
d2114 6
a2119 6
PERL_CALLCONV CV*	Perl_newCONSTSUB_flags(pTHX_ HV* stash, const char* name, STRLEN len, U32 flags, SV* sv);
PERL_CALLCONV OP*	Perl_newCVREF(pTHX_ I32 flags, OP* o)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_newFOROP(pTHX_ I32 flags, OP* sv, OP* expr, OP* block, OP* cont)
d2122 1
a2122 1
			__attribute__nonnull__(pTHX_3);
d2134 28
a2161 1
PERL_CALLCONV GP *	Perl_newGP(pTHX_ GV *const gv)
d2163 2
a2164 2
#define PERL_ARGS_ASSERT_NEWGP	\
	assert(gv)
d2166 1
a2166 1
PERL_CALLCONV OP*	Perl_newGVOP(pTHX_ I32 type, I32 flags, GV* gv)
d2169 1
d2171 6
a2176 2
#define PERL_ARGS_ASSERT_NEWGVOP	\
	assert(gv)
d2178 1
a2178 1
PERL_CALLCONV OP*	Perl_newGVREF(pTHX_ I32 type, OP* o)
d2182 6
a2187 2
/* PERL_CALLCONV GV*	newGVgen(pTHX_ const char* pack)
			__attribute__nonnull__(pTHX_1); */
d2189 5
a2193 6
PERL_CALLCONV GV*	Perl_newGVgen_flags(pTHX_ const char* pack, U32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWGVGEN_FLAGS	\
	assert(pack)
d2195 1
a2195 1
/* PERL_CALLCONV HV*	Perl_newHV(pTHX)
d2198 1
a2198 1
PERL_CALLCONV OP*	Perl_newHVREF(pTHX_ OP* o)
d2202 1
a2202 1
#define PERL_ARGS_ASSERT_NEWHVREF	\
d2205 1
a2205 1
PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV *hv)
d2209 1
a2209 1
/* PERL_CALLCONV IO*	Perl_newIO(pTHX)
d2211 1
a2211 1
			__attribute__warn_unused_result__; */
d2213 1
a2213 1
PERL_CALLCONV OP*	Perl_newLISTOP(pTHX_ I32 type, I32 flags, OP* first, OP* last)
d2215 4
a2218 1
			__attribute__warn_unused_result__;
d2220 1
a2220 1
PERL_CALLCONV OP*	Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP *first, OP *other)
d2223 7
a2229 4
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_NEWLOGOP	\
	assert(first); assert(other)
d2231 1
a2231 1
PERL_CALLCONV OP*	Perl_newLOOPEX(pTHX_ I32 type, OP* label)
d2234 6
a2239 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_NEWLOOPEX	\
	assert(label)
d2241 1
a2241 1
PERL_CALLCONV OP*	Perl_newLOOPOP(pTHX_ I32 flags, I32 debuggable, OP* expr, OP* block)
d2245 5
a2249 1
PERL_CALLCONV OP*	Perl_newNULLLIST(pTHX)
d2253 2
a2254 1
PERL_CALLCONV OP*	Perl_newOP(pTHX_ I32 optype, I32 flags)
d2256 4
a2259 1
			__attribute__warn_unused_result__;
d2261 1
a2265 5
PERL_CALLCONV void	Perl_newPROG(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWPROG	\
	assert(o)

a2269 8
PERL_CALLCONV OP*	Perl_newRANGE(pTHX_ I32 flags, OP* left, OP* right)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_NEWRANGE	\
	assert(left); assert(right)

d2284 1
a2284 1
PERL_CALLCONV OP*	Perl_newSLICEOP(pTHX_ I32 flags, OP* subscript, OP* listop)
d2288 1
a2288 1
PERL_CALLCONV OP*	Perl_newSTATEOP(pTHX_ I32 flags, char* label, OP* o)
d2290 4
a2293 6
			__attribute__warn_unused_result__;

/* PERL_CALLCONV CV*	Perl_newSUB(pTHX_ I32 floor, OP* o, OP* proto, OP* block); */
PERL_CALLCONV SV*	Perl_newSV(pTHX_ const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2302 5
a2306 1
PERL_CALLCONV OP*	Perl_newSVREF(pTHX_ OP* o)
d2308 1
a2308 4
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWSVREF	\
	assert(o)
d2310 1
a2310 1
PERL_CALLCONV SV*	Perl_newSV_type(pTHX_ const svtype type)
d2314 1
a2314 1
PERL_CALLCONV SV*	Perl_newSVhek(pTHX_ const HEK *const hek)
d2318 1
a2318 1
PERL_CALLCONV SV*	Perl_newSViv(pTHX_ const IV i)
d2322 1
a2322 1
PERL_CALLCONV SV*	Perl_newSVnv(pTHX_ const NV n)
d2326 1
a2326 1
PERL_CALLCONV SV*	Perl_newSVpv(pTHX_ const char *const s, const STRLEN len)
d2330 1
a2330 1
PERL_CALLCONV SV*	Perl_newSVpv_share(pTHX_ const char* s, U32 hash)
d2342 1
a2342 1
PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char *const s, const STRLEN len)
d2344 4
a2347 9
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpvn_flags(pTHX_ const char *const s, const STRLEN len, const U32 flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV SV*	Perl_newSVpvn_share(pTHX_ const char* s, I32 len, U32 hash)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2358 1
a2358 1
PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ const UV u)
d2373 1
a2373 1
PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, OP* expr, OP* block, OP* cont, I32 has_my)
d2377 3
a2379 5
PERL_CALLCONV CV*	Perl_newXS(pTHX_ const char *name, XSUBADDR_t subaddr, const char *filename)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_NEWXS	\
	assert(subaddr); assert(filename)
d2381 2
a2382 1
PERL_CALLCONV CV *	Perl_newXS_flags(pTHX_ const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags)
d2385 2
a2386 2
#define PERL_ARGS_ASSERT_NEWXS_FLAGS	\
	assert(subaddr); assert(filename)
d2388 5
a2392 5
PERL_CALLCONV CV *	Perl_newXS_len_flags(pTHX_ const char *name, STRLEN len, XSUBADDR_t subaddr, const char *const filename, const char *const proto, SV **const_svp, U32 flags)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_NEWXS_LEN_FLAGS	\
	assert(subaddr); assert(filename)
d2394 1
a2394 2
PERL_CALLCONV void	Perl_new_collate(pTHX_ const char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ const char* newctype)
d2396 2
a2397 7
#define PERL_ARGS_ASSERT_NEW_CTYPE	\
	assert(newctype)

PERL_CALLCONV void	Perl_new_numeric(pTHX_ const char* newcoll);
PERL_CALLCONV PERL_SI*	Perl_new_stackinfo(pTHX_ I32 stitems, I32 cxitems)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d2404 27
a2430 3
PERL_CALLCONV STRLEN *	Perl_new_warnings_bitfield(pTHX_ STRLEN *buffer, const char *const bits, STRLEN size)
			__attribute__malloc__
			__attribute__warn_unused_result__
d2432 2
a2433 2
#define PERL_ARGS_ASSERT_NEW_WARNINGS_BITFIELD	\
	assert(bits)
d2449 3
a2451 3
PERL_CALLCONV int	Perl_nothreadhook(pTHX);
PERL_CALLCONV OP*	Perl_oopsAV(pTHX_ OP* o)
			__attribute__warn_unused_result__
d2453 1
a2453 1
#define PERL_ARGS_ASSERT_OOPSAV	\
d2456 2
a2457 2
PERL_CALLCONV OP*	Perl_oopsHV(pTHX_ OP* o)
			__attribute__warn_unused_result__
d2459 1
a2459 1
#define PERL_ARGS_ASSERT_OOPSHV	\
d2462 2
a2463 3
PERL_CALLCONV OP*	Perl_op_append_elem(pTHX_ I32 optype, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_op_append_list(pTHX_ I32 optype, OP* first, OP* last);
PERL_CALLCONV void	Perl_op_clear(pTHX_ OP* o)
d2465 2
a2466 2
#define PERL_ARGS_ASSERT_OP_CLEAR	\
	assert(o)
d2468 2
a2469 4
PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ const OP* o, CV* cv)
			__attribute__warn_unused_result__;

PERL_CALLCONV OP*	Perl_op_contextualize(pTHX_ OP* o, I32 context)
d2471 2
a2472 2
#define PERL_ARGS_ASSERT_OP_CONTEXTUALIZE	\
	assert(o)
d2474 2
a2475 1
PERL_CALLCONV void	Perl_op_dump(pTHX_ const OP *o)
d2477 2
a2478 2
#define PERL_ARGS_ASSERT_OP_DUMP	\
	assert(o)
d2480 3
a2482 2
PERL_CALLCONV void	Perl_op_free(pTHX_ OP* arg);
PERL_CALLCONV OP*	Perl_op_linklist(pTHX_ OP *o)
d2484 1
a2484 1
#define PERL_ARGS_ASSERT_OP_LINKLIST	\
d2487 2
a2488 3
/* PERL_CALLCONV OP*	op_lvalue(pTHX_ OP* o, I32 type); */
PERL_CALLCONV OP*	Perl_op_lvalue_flags(pTHX_ OP* o, I32 type, U32 flags);
PERL_CALLCONV void	Perl_op_null(pTHX_ OP* o)
d2490 1
a2490 1
#define PERL_ARGS_ASSERT_OP_NULL	\
d2493 11
a2503 5
PERL_CALLCONV OP*	Perl_op_prepend_elem(pTHX_ I32 optype, OP* first, OP* last);
PERL_CALLCONV void	Perl_op_refcnt_lock(pTHX);
PERL_CALLCONV void	Perl_op_refcnt_unlock(pTHX);
PERL_CALLCONV OP*	Perl_op_scope(pTHX_ OP* o);
PERL_CALLCONV void	Perl_pack_cat(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags)
d2505 3
a2507 7
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_PACK_CAT	\
	assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist); assert(next_in_list)
d2509 8
a2516 4
PERL_CALLCONV void	Perl_package_version(pTHX_ OP* v)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PACKAGE_VERSION	\
	assert(v)
d2518 3
a2520 1
PERL_CALLCONV void	Perl_packlist(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist)
d2522 8
a2529 6
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_PACKLIST	\
	assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist)
d2531 1
a2531 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_anon(pTHX_ CV* func, I32 optype)
d2533 2
a2534 2
#define PERL_ARGS_ASSERT_PAD_ADD_ANON	\
	assert(func)
d2536 1
a2536 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_pv(pTHX_ const char *name, const U32 flags, HV *typestash, HV *ourstash)
d2538 2
a2539 2
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PV	\
	assert(name)
d2541 2
a2542 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_pvn(pTHX_ const char *namepv, STRLEN namelen, U32 flags, HV *typestash, HV *ourstash)
d2544 2
a2545 2
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PVN	\
	assert(namepv)
d2547 1
a2547 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_sv(pTHX_ SV *name, U32 flags, HV *typestash, HV *ourstash)
d2549 2
a2550 2
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_SV	\
	assert(name)
d2552 4
a2555 4
PERL_CALLCONV PADOFFSET	Perl_pad_alloc(pTHX_ I32 optype, U32 tmptype);
PERL_CALLCONV void	Perl_pad_block_start(pTHX_ int full);
PERL_CALLCONV HV*	Perl_pad_compname_type(pTHX_ const PADOFFSET po)
			__attribute__warn_unused_result__;
d2557 1
a2557 1
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_pv(pTHX_ const char* name, U32 flags)
d2559 1
a2559 1
#define PERL_ARGS_ASSERT_PAD_FINDMY_PV	\
d2562 1
a2562 1
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_pvn(pTHX_ const char* namepv, STRLEN namelen, U32 flags)
d2564 2
a2565 2
#define PERL_ARGS_ASSERT_PAD_FINDMY_PVN	\
	assert(namepv)
d2567 1
a2567 1
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_sv(pTHX_ SV* name, U32 flags)
d2569 1
a2569 1
#define PERL_ARGS_ASSERT_PAD_FINDMY_SV	\
d2572 1
a2572 14
PERL_CALLCONV void	Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_PAD_FIXUP_INNER_ANONS	\
	assert(padlist); assert(old_cv); assert(new_cv)

PERL_CALLCONV void	Perl_pad_free(pTHX_ PADOFFSET po);
PERL_CALLCONV void	Perl_pad_leavemy(pTHX);
PERL_CALLCONV PADLIST*	Perl_pad_new(pTHX_ int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_pad_push(pTHX_ PADLIST *padlist, int depth)
d2574 2
a2575 2
#define PERL_ARGS_ASSERT_PAD_PUSH	\
	assert(padlist)
d2577 1
a2577 12
PERL_CALLCONV void	Perl_pad_swipe(pTHX_ PADOFFSET po, bool refadjust);
PERL_CALLCONV void	Perl_pad_tidy(pTHX_ padtidy_type type);
PERL_CALLCONV OP*	Perl_parse_arithexpr(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_barestmt(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_block(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_fullexpr(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_fullstmt(pTHX_ U32 flags);
PERL_CALLCONV SV*	Perl_parse_label(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_listexpr(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_stmtseq(pTHX_ U32 flags);
PERL_CALLCONV OP*	Perl_parse_termexpr(pTHX_ U32 flags);
PERL_CALLCONV U32	Perl_parse_unicode_opts(pTHX_ const char **popt)
d2579 2
a2580 2
#define PERL_ARGS_ASSERT_PARSE_UNICODE_OPTS	\
	assert(popt)
d2582 4
a2585 1
PERL_CALLCONV void	Perl_parser_free(pTHX_ const yy_parser *parser)
d2587 2
a2588 2
#define PERL_ARGS_ASSERT_PARSER_FREE	\
	assert(parser)
d2590 8
a2597 6
PERL_CALLCONV void	Perl_peep(pTHX_ OP* o);
PERL_CALLCONV PerlInterpreter*	perl_alloc(void);
PERL_CALLCONV void	perl_construct(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_CONSTRUCT	\
	assert(my_perl)
d2599 9
a2607 4
PERL_CALLCONV int	perl_destruct(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_DESTRUCT	\
	assert(my_perl)
d2609 8
a2616 4
PERL_CALLCONV void	perl_free(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_FREE	\
	assert(my_perl)
d2618 8
a2625 9
PERL_CALLCONV int	perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_PARSE	\
	assert(my_perl)

PERL_CALLCONV int	perl_run(PerlInterpreter *my_perl)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_RUN	\
	assert(my_perl)
a2626 1
PERL_CALLCONV void	Perl_pmop_dump(pTHX_ PMOP* pm);
d2633 9
d2643 7
a2649 1
PERL_CALLCONV void	Perl_populate_isa(pTHX_ const char *name, STRLEN len, ...)
d2651 2
a2652 2
#define PERL_ARGS_ASSERT_POPULATE_ISA	\
	assert(name)
d2654 1
a2654 1
PERL_CALLCONV REGEXP*	Perl_pregcomp(pTHX_ SV * const pattern, const U32 flags)
d2656 7
a2662 2
#define PERL_ARGS_ASSERT_PREGCOMP	\
	assert(pattern)
d2679 4
a2682 4
PERL_CALLCONV const char*	Perl_prescan_version(pTHX_ const char *s, bool strict, const char** errstr, bool *sqv, int *ssaw_decimal, int *swidth, bool *salpha)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PRESCAN_VERSION	\
	assert(s)
d2684 1
a2684 5
PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *const tbl)
			__attribute__deprecated__;

PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *const tbl, const void *const sv)
			__attribute__warn_unused_result__
d2686 2
a2687 2
#define PERL_ARGS_ASSERT_PTR_TABLE_FETCH	\
	assert(tbl)
d2689 2
a2690 18
PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *const tbl);
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *const tbl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PTR_TABLE_SPLIT	\
	assert(tbl)

PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *const tbl, const void *const oldsv, void *const newsv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_PTR_TABLE_STORE	\
	assert(tbl); assert(newsv)

PERL_CALLCONV void	Perl_push_scope(pTHX);
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim)
d2693 2
a2694 2
#define PERL_ARGS_ASSERT_PV_DISPLAY	\
	assert(dsv); assert(pv)
d2696 2
a2697 19
PERL_CALLCONV char*	Perl_pv_escape(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PV_ESCAPE	\
	assert(dsv); assert(str)

PERL_CALLCONV char*	Perl_pv_pretty(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PV_PRETTY	\
	assert(dsv); assert(str)

PERL_CALLCONV char*	Perl_pv_uni_display(pTHX_ SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PV_UNI_DISPLAY	\
	assert(dsv); assert(spv)

PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err)
d2699 2
a2700 2
#define PERL_ARGS_ASSERT_QERROR	\
	assert(err)
d2719 10
a2728 2
PERL_CALLCONV Malloc_t	Perl_realloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__malloc__
a2730 33
/* PERL_CALLCONV OP*	Perl_ref(pTHX_ OP* o, I32 type); */
PERL_CALLCONV HV *	Perl_refcounted_he_chain_2hv(pTHX_ const struct refcounted_he *c, U32 flags);
PERL_CALLCONV SV *	Perl_refcounted_he_fetch_pv(pTHX_ const struct refcounted_he *chain, const char *key, U32 hash, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PV	\
	assert(key)

PERL_CALLCONV SV *	Perl_refcounted_he_fetch_pvn(pTHX_ const struct refcounted_he *chain, const char *keypv, STRLEN keylen, U32 hash, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PVN	\
	assert(keypv)

PERL_CALLCONV SV *	Perl_refcounted_he_fetch_sv(pTHX_ const struct refcounted_he *chain, SV *key, U32 hash, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_SV	\
	assert(key)

PERL_CALLCONV void	Perl_refcounted_he_free(pTHX_ struct refcounted_he *he);
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_inc(pTHX_ struct refcounted_he *he);
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_pv(pTHX_ struct refcounted_he *parent, const char *key, U32 hash, SV *value, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PV	\
	assert(key)

PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_pvn(pTHX_ struct refcounted_he *parent, const char *keypv, STRLEN keylen, U32 hash, SV *value, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PVN	\
	assert(keypv)

PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_sv(pTHX_ struct refcounted_he *parent, SV *key, U32 hash, SV *value, U32 flags)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_SV	\
	assert(key)
d2737 1
a2737 1
PERL_CALLCONV SV*	Perl_reg_named_buff_all(pTHX_ REGEXP * const rx, const U32 flags)
d2739 1
a2739 1
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ALL	\
d2742 6
a2753 6
PERL_CALLCONV SV*	Perl_reg_named_buff_fetch(pTHX_ REGEXP * const rx, SV * const namesv, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FETCH	\
	assert(rx); assert(namesv)

a2758 5
PERL_CALLCONV SV*	Perl_reg_named_buff_iter(pTHX_ REGEXP * const rx, const SV * const lastkey, const U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ITER	\
	assert(rx)

d2769 6
a2779 6
PERL_CALLCONV I32	Perl_reg_numbered_buff_length(pTHX_ REGEXP * const rx, const SV * const sv, const I32 paren)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_LENGTH	\
	assert(rx); assert(sv)

d2785 2
a2786 6
PERL_CALLCONV SV*	Perl_reg_qr_package(pTHX_ REGEXP * const rx)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REG_QR_PACKAGE	\
	assert(rx)

PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* ret_x, REGEXP* rx)
d2788 2
a2789 17
#define PERL_ARGS_ASSERT_REG_TEMP_COPY	\
	assert(rx)

PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **altsvp)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGCLASS_SWASH	\
	assert(node)

PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)

PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)
a2790 8
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, I32 minend, SV *sv, void *data, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_REGEXEC_FLAGS	\
	assert(rx); assert(stringarg); assert(strend); assert(strbeg); assert(sv)
d2792 1
a2792 1
PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const rx)
d2794 1
a2794 1
#define PERL_ARGS_ASSERT_REGFREE_INTERNAL	\
a2796 3
PERL_CALLCONV void	Perl_reginitcolors(pTHX);
PERL_CALLCONV regnode*	Perl_regnext(pTHX_ regnode* p)
			__attribute__warn_unused_result__;
d2804 1
a2804 1
PERL_CALLCONV void	Perl_repeatcpy(char* to, const char* from, I32 len, IV count)
a2809 8
PERL_CALLCONV void	Perl_report_evil_fh(pTHX_ const GV *gv);
PERL_CALLCONV void	Perl_report_uninit(pTHX_ const SV *uninit_sv);
PERL_CALLCONV void	Perl_report_wrongway_fh(pTHX_ const GV *gv, const char have);
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REQUIRE_PV	\
	assert(pv)

a2818 1
PERL_CALLCONV void	Perl_rpeep(pTHX_ OP* o);
d2827 2
a2828 3
PERL_CALLCONV int	Perl_runops_debug(pTHX);
PERL_CALLCONV int	Perl_runops_standard(pTHX);
PERL_CALLCONV CV*	Perl_rv2cv_op_cv(pTHX_ OP *cvop, U32 flags)
d2830 8
a2837 2
#define PERL_ARGS_ASSERT_RV2CV_OP_CV	\
	assert(cvop)
d2839 1
d2846 9
a2854 1
PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size)
d2858 1
a2858 2
PERL_CALLCONV Free_t	Perl_safesysfree(Malloc_t where);
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes)
d2862 1
a2862 1
PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
d2866 3
a2868 1
PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp)
d2870 2
a2871 2
#define PERL_ARGS_ASSERT_SAVE_I16	\
	assert(intp)
d2873 3
a2875 1
PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp)
d2877 2
a2878 12
#define PERL_ARGS_ASSERT_SAVE_I32	\
	assert(intp)

PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_I8	\
	assert(bytep)

PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, I32 key)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_ADELETE	\
	assert(av)
d2880 2
d2919 11
d2936 1
d2939 5
a2943 1
/* PERL_CALLCONV void	Perl_save_freesv(pTHX_ SV* sv); */
d2949 1
a2949 1
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr)
d2951 2
a2952 2
#define PERL_ARGS_ASSERT_SAVE_GENERIC_SVREF	\
	assert(sptr)
d2964 1
a2964 6
PERL_CALLCONV void	Perl_save_hdelete(pTHX_ HV *hv, SV *keysv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAVE_HDELETE	\
	assert(hv); assert(keysv)

a2976 1
PERL_CALLCONV void	Perl_save_hints(pTHX);
d2982 15
a3032 10
PERL_CALLCONV void	Perl_save_padsv_and_mortalize(pTHX_ PADOFFSET off);
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_PPTR	\
	assert(pptr)

PERL_CALLCONV void	Perl_save_pushi32ptr(pTHX_ const I32 i, void *const ptr, const int type);
PERL_CALLCONV void	Perl_save_pushptr(pTHX_ void *const ptr, const int type);
PERL_CALLCONV void	Perl_save_pushptrptr(pTHX_ void *const ptr1, void *const ptr2, const int type);
PERL_CALLCONV void	Perl_save_re_context(pTHX);
d3038 1
a3038 1
PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV *sv, U32 mask, U32 val)
d3040 2
a3041 2
#define PERL_ARGS_ASSERT_SAVE_SET_SVFLAGS	\
	assert(sv)
d3043 1
a3043 1
PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str)
d3045 2
a3046 2
#define PERL_ARGS_ASSERT_SAVE_SHARED_PVREF	\
	assert(str)
d3048 2
d3060 6
a3065 37
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void *ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_VPTR	\
	assert(ptr)

PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* pv, I32 len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savesharedpv(pTHX_ const char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savesharedpvn(pTHX_ const char *const pv, const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV char*	Perl_savesharedsvpv(pTHX_ SV *sv)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVESHAREDSVPV	\
	assert(sv)

PERL_CALLCONV void	Perl_savestack_grow(pTHX);
PERL_CALLCONV void	Perl_savestack_grow_cnt(pTHX_ I32 need);
PERL_CALLCONV char*	Perl_savesvpv(pTHX_ SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVESVPV	\
	assert(sv)

d3068 4
d3101 1
a3101 13
PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *s, SV *rv, bool qv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SCAN_VERSION	\
	assert(s); assert(rv)

PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *const e, SV *sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SCAN_VSTRING	\
	assert(s); assert(e); assert(sv)

a3108 9
PERL_CALLCONV U32	Perl_seed(pTHX);
PERL_CALLCONV void	Perl_set_context(void *t)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_SET_CONTEXT	\
	assert(t)

PERL_CALLCONV void	Perl_set_numeric_local(pTHX);
PERL_CALLCONV void	Perl_set_numeric_radix(pTHX);
PERL_CALLCONV void	Perl_set_numeric_standard(pTHX);
d3115 7
a3121 10
PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SORTSV	\
	assert(cmp)

PERL_CALLCONV void	Perl_sortsv_flags(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SORTSV_FLAGS	\
	assert(cmp)

a3127 6
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV *tmpglob, IO *io)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_START_GLOB	\
	assert(tmpglob); assert(io)

a3128 13
PERL_CALLCONV bool	Perl_stashpv_hvname_match(pTHX_ const COP *c, const HV *hv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_STASHPV_HVNAME_MATCH	\
	assert(c); assert(hv)

PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_STR_TO_VERSION	\
	assert(sv)

d3134 1
a3134 4
/* PERL_CALLCONV bool	sv_2bool(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV bool	Perl_sv_2bool_flags(pTHX_ SV *const sv, const I32 flags)
d3136 1
a3136 1
#define PERL_ARGS_ASSERT_SV_2BOOL_FLAGS	\
d3150 7
d3160 1
a3165 1
PERL_CALLCONV NV	Perl_sv_2nv_flags(pTHX_ SV *const sv, const I32 flags);
d3168 3
a3170 4
/* PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2PV_NOLEN	\
d3173 1
a3173 1
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV *sv, STRLEN *const lp)
d3178 3
a3180 4
/* PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2PVBYTE_NOLEN	\
d3183 3
a3185 1
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV *sv, STRLEN *const lp)
d3187 1
a3187 1
#define PERL_ARGS_ASSERT_SV_2PVUTF8	\
d3190 3
a3192 4
/* PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2PVUTF8_NOLEN	\
d3195 1
a3195 3
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv); */
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags);
PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV *const sv)
d3197 1
a3197 1
#define PERL_ARGS_ASSERT_SV_BACKOFF	\
d3200 7
a3206 1
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV *const sv, HV *const stash)
d3209 2
a3210 2
#define PERL_ARGS_ASSERT_SV_BLESS	\
	assert(sv); assert(stash)
d3212 1
a3212 1
PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen)
d3214 10
a3223 6
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SV_CAT_DECODE	\
	assert(dsv); assert(encoding); assert(ssv); assert(offset); assert(tstr)
d3225 2
a3226 1
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV *const sv, const char* ptr)
d3228 1
a3228 1
#define PERL_ARGS_ASSERT_SV_CATPV	\
d3231 1
a3231 1
PERL_CALLCONV void	Perl_sv_catpv_flags(pTHX_ SV *dstr, const char *sstr, const I32 flags)
d3234 2
a3235 7
#define PERL_ARGS_ASSERT_SV_CATPV_FLAGS	\
	assert(dstr); assert(sstr)

PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *const sv, const char *const ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_CATPV_MG	\
	assert(sv)
d3244 1
a3244 2
PERL_CALLCONV void	Perl_sv_catpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
d3247 1
a3247 1
#define PERL_ARGS_ASSERT_SV_CATPVF_MG	\
d3250 5
a3260 12
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *const dstr, const char *sstr, const STRLEN len, const I32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATPVN_FLAGS	\
	assert(dstr); assert(sstr)

/* PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_SV_CATPVN_MG	\
	assert(sv); assert(ptr)

a3265 10
PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_CATSV_FLAGS	\
	assert(dsv)

/* PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dsv, SV *ssv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_CATSV_MG	\
	assert(dsv)

d3273 1
a3273 1
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV *const orig_sv)
d3276 1
a3276 1
	assert(orig_sv)
a3278 1
PERL_CALLCONV I32	Perl_sv_cmp_flags(pTHX_ SV *const sv1, SV *const sv2, const U32 flags);
d3280 8
a3287 1
PERL_CALLCONV I32	Perl_sv_cmp_locale_flags(pTHX_ SV *const sv1, SV *const sv2, const U32 flags);
a3288 1
			__attribute__deprecated__
d3296 4
a3299 13
PERL_CALLCONV OP*	Perl_sv_compile_2op_is_broken(pTHX_ SV *sv, OP **startop, const char *code, PAD **padp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_COMPILE_2OP_IS_BROKEN	\
	assert(sv); assert(startop); assert(code); assert(padp)

PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_COPYPV	\
	assert(dsv); assert(ssv)
d3302 4
a3305 6
PERL_CALLCONV void	Perl_sv_dec_nomg(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_del_backref(pTHX_ SV *const tsv, SV *const sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_DEL_BACKREF	\
	assert(tsv); assert(sv)
d3314 1
a3314 1
PERL_CALLCONV bool	Perl_sv_derived_from_pv(pTHX_ SV* sv, const char *const name, U32 flags)
d3318 1
a3318 1
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PV	\
d3321 9
a3329 2
PERL_CALLCONV bool	Perl_sv_derived_from_pvn(pTHX_ SV* sv, const char *const name, const STRLEN len, U32 flags)
			__attribute__warn_unused_result__
d3332 14
a3345 2
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PVN	\
	assert(sv); assert(name)
d3347 1
a3347 2
PERL_CALLCONV bool	Perl_sv_derived_from_sv(pTHX_ SV* sv, SV *namesv, U32 flags)
			__attribute__warn_unused_result__
d3349 42
d3392 17
a3408 2
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_SV	\
	assert(sv); assert(namesv)
d3410 1
a3410 3
PERL_CALLCONV bool	Perl_sv_destroyable(pTHX_ SV *sv);
PERL_CALLCONV bool	Perl_sv_does(pTHX_ SV* sv, const char *const name)
			__attribute__warn_unused_result__
d3413 11
a3423 2
#define PERL_ARGS_ASSERT_SV_DOES	\
	assert(sv); assert(name)
d3425 1
a3425 1
PERL_CALLCONV bool	Perl_sv_does_pv(pTHX_ SV* sv, const char *const name, U32 flags)
d3427 5
d3434 8
a3441 2
#define PERL_ARGS_ASSERT_SV_DOES_PV	\
	assert(sv); assert(name)
d3443 2
a3444 2
PERL_CALLCONV bool	Perl_sv_does_pvn(pTHX_ SV* sv, const char *const name, const STRLEN len, U32 flags)
			__attribute__warn_unused_result__
d3447 2
a3448 2
#define PERL_ARGS_ASSERT_SV_DOES_PVN	\
	assert(sv); assert(name)
d3450 1
a3450 2
PERL_CALLCONV bool	Perl_sv_does_sv(pTHX_ SV* sv, SV* namesv, U32 flags)
			__attribute__warn_unused_result__
d3453 2
a3454 2
#define PERL_ARGS_ASSERT_SV_DOES_SV	\
	assert(sv); assert(namesv)
d3456 1
a3456 1
PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv)
d3458 1
a3458 1
#define PERL_ARGS_ASSERT_SV_DUMP	\
d3461 3
a3463 5
/* PERL_CALLCONV I32	sv_eq(pTHX_ SV* sv1, SV* sv2); */
PERL_CALLCONV I32	Perl_sv_eq_flags(pTHX_ SV* sv1, SV* sv2, const U32 flags);
/* PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL	\
d3466 1
a3466 1
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *const sv, const U32 flags)
d3468 1
a3468 1
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL_FLAGS	\
d3471 1
a3471 2
PERL_CALLCONV void	Perl_sv_free(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV *const sv)
d3473 1
a3473 1
#define PERL_ARGS_ASSERT_SV_FREE2	\
d3476 21
a3496 2
PERL_CALLCONV void	Perl_sv_free_arenas(pTHX);
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV *const sv, PerlIO *const fp, I32 append)
d3498 3
a3500 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_GETS	\
	assert(sv); assert(fp)
d3502 1
a3502 1
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV *const sv, STRLEN newlen)
d3504 1
a3504 1
#define PERL_ARGS_ASSERT_SV_GROW	\
d3507 4
a3510 7
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_inc_nomg(pTHX_ SV *const sv);
/* PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4); */
#define PERL_ARGS_ASSERT_SV_INSERT	\
	assert(bigstr); assert(little)
d3512 4
a3515 5
PERL_CALLCONV void	Perl_sv_insert_flags(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_INSERT_FLAGS	\
	assert(bigstr); assert(little)
d3517 4
a3520 4
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char *const name)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_ISA	\
	assert(name)
d3522 2
a3523 2
PERL_CALLCONV int	Perl_sv_isobject(pTHX_ SV* sv);
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv)
d3525 1
a3525 1
#define PERL_ARGS_ASSERT_SV_IV	\
d3528 1
a3528 3
PERL_CALLCONV STRLEN	Perl_sv_len(pTHX_ SV *const sv);
PERL_CALLCONV STRLEN	Perl_sv_len_utf8(pTHX_ SV *const sv);
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV *const sv, SV *const obj, const int how, const char *const name, const I32 namlen)
d3530 6
a3535 1
#define PERL_ARGS_ASSERT_SV_MAGIC	\
d3538 6
a3543 1
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV *const sv, SV *const obj, const int how, const MGVTBL *const vtbl, const char *const name, const I32 namlen)
d3545 1
a3545 1
#define PERL_ARGS_ASSERT_SV_MAGICEXT	\
d3548 4
a3551 3
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV *const oldsv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d3553 4
a3556 2
PERL_CALLCONV SV*	Perl_sv_newmortal(pTHX)
			__attribute__warn_unused_result__;
d3558 1
a3558 4
PERL_CALLCONV SV*	Perl_sv_newref(pTHX_ SV *const sv);
/* PERL_CALLCONV void	Perl_sv_nolocking(pTHX_ SV *sv); */
PERL_CALLCONV void	Perl_sv_nosharing(pTHX_ SV *sv);
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv)
d3560 1
a3560 1
#define PERL_ARGS_ASSERT_SV_NV	\
d3563 2
a3564 2
PERL_CALLCONV char*	Perl_sv_peek(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV *const sv, I32 *const offsetp)
d3566 2
a3567 2
#define PERL_ARGS_ASSERT_SV_POS_B2U	\
	assert(offsetp)
d3569 2
a3570 1
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV *const sv, I32 *const offsetp, I32 *const lenp)
d3572 2
a3573 2
#define PERL_ARGS_ASSERT_SV_POS_U2B	\
	assert(offsetp)
d3575 2
a3576 1
PERL_CALLCONV STRLEN	Perl_sv_pos_u2b_flags(pTHX_ SV *const sv, STRLEN uoffset, STRLEN *const lenp, U32 flags)
d3578 1
a3578 1
#define PERL_ARGS_ASSERT_SV_POS_U2B_FLAGS	\
d3581 18
a3598 5
/* PERL_CALLCONV char*	Perl_sv_pv(pTHX_ SV *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_PV	\
	assert(sv)
d3600 8
a3607 5
/* PERL_CALLCONV char*	Perl_sv_pvbyte(pTHX_ SV *sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_PVBYTE	\
	assert(sv)
d3609 1
a3609 1
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *lp)
d3612 2
a3613 2
#define PERL_ARGS_ASSERT_SV_PVBYTEN	\
	assert(sv); assert(lp)
d3615 5
a3619 4
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV *const sv, STRLEN *const lp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE	\
	assert(sv)
d3621 1
a3621 1
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *lp)
d3624 2
a3625 2
#define PERL_ARGS_ASSERT_SV_PVN	\
	assert(sv); assert(lp)
d3627 5
a3631 4
/* PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_PVN_FORCE	\
	assert(sv)
d3633 2
a3634 1
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags)
d3636 41
a3676 2
#define PERL_ARGS_ASSERT_SV_PVN_FORCE_FLAGS	\
	assert(sv)
d3678 6
a3683 4
PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_PVN_NOMG	\
	assert(sv)
d3685 1
a3685 1
/* PERL_CALLCONV char*	Perl_sv_pvutf8(pTHX_ SV *sv)
d3687 5
a3691 3
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_PVUTF8	\
	assert(sv)
d3693 3
a3695 1
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *lp)
d3698 2
a3699 2
#define PERL_ARGS_ASSERT_SV_PVUTF8N	\
	assert(sv); assert(lp)
d3701 3
a3703 1
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV *const sv, STRLEN *const lp)
d3705 2
a3706 2
#define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE	\
	assert(sv)
d3708 1
a3708 1
PERL_CALLCONV char*	Perl_sv_recode_to_utf8(pTHX_ SV* sv, SV *encoding)
d3711 2
a3712 2
#define PERL_ARGS_ASSERT_SV_RECODE_TO_UTF8	\
	assert(sv); assert(encoding)
d3714 2
a3715 1
PERL_CALLCONV SV*	Perl_sv_ref(pTHX_ SV *dst, const SV *const sv, const int ob)
d3717 2
a3718 2
#define PERL_ARGS_ASSERT_SV_REF	\
	assert(sv)
d3720 1
a3720 7
PERL_CALLCONV const char*	Perl_sv_reftype(pTHX_ const SV *const sv, const int ob)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_REFTYPE	\
	assert(sv)

PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV *const sv, SV *const nsv)
d3723 2
a3724 2
#define PERL_ARGS_ASSERT_SV_REPLACE	\
	assert(sv); assert(nsv)
d3726 1
a3726 2
PERL_CALLCONV void	Perl_sv_report_used(pTHX);
PERL_CALLCONV void	Perl_sv_reset(pTHX_ const char* s, HV *const stash)
d3728 1
a3728 1
#define PERL_ARGS_ASSERT_SV_RESET	\
d3731 1
a3731 1
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *const sv)
d3733 3
a3735 2
#define PERL_ARGS_ASSERT_SV_RVWEAKEN	\
	assert(sv)
d3737 2
a3738 1
PERL_CALLCONV void	Perl_sv_sethek(pTHX_ SV *const sv, const HEK *const hek)
d3740 10
a3749 2
#define PERL_ARGS_ASSERT_SV_SETHEK	\
	assert(sv)
d3751 1
a3751 1
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV *const sv, const IV num)
d3753 3
a3755 2
#define PERL_ARGS_ASSERT_SV_SETIV	\
	assert(sv)
d3757 2
a3758 1
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *const sv, const IV i)
d3760 8
a3767 2
#define PERL_ARGS_ASSERT_SV_SETIV_MG	\
	assert(sv)
d3769 1
a3769 4
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV *const sv, const NV num)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETNV	\
	assert(sv)
d3771 4
a3774 4
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *const sv, const NV num)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETNV_MG	\
	assert(sv)
d3776 1
a3776 1
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV *const sv, const char *const ptr)
d3778 2
a3779 2
#define PERL_ARGS_ASSERT_SV_SETPV	\
	assert(sv)
d3781 1
a3781 1
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *const sv, const char *const ptr)
d3783 2
a3784 2
#define PERL_ARGS_ASSERT_SV_SETPV_MG	\
	assert(sv)
d3786 1
a3786 2
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
d3789 2
a3790 2
#define PERL_ARGS_ASSERT_SV_SETPVF	\
	assert(sv); assert(pat)
d3792 2
a3793 2
PERL_CALLCONV void	Perl_sv_setpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
d3796 2
a3797 2
#define PERL_ARGS_ASSERT_SV_SETPVF_MG	\
	assert(sv); assert(pat)
d3799 1
a3799 1
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV *const sv, const IV num)
d3801 1
a3801 1
#define PERL_ARGS_ASSERT_SV_SETPVIV	\
d3804 1
a3804 1
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *const sv, const IV iv)
d3806 1
a3806 1
#define PERL_ARGS_ASSERT_SV_SETPVIV_MG	\
d3809 1
a3809 7
PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV *const sv, const char *const ptr, const STRLEN len)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETPVN	\
	assert(sv)

PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *const sv, const char *const ptr, const STRLEN len)
			__attribute__nonnull__(pTHX_1)
d3811 2
a3812 2
#define PERL_ARGS_ASSERT_SV_SETPVN_MG	\
	assert(sv); assert(ptr)
d3814 1
a3814 1
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV *const rv, const char *const classname, const IV iv)
d3816 2
a3817 2
#define PERL_ARGS_ASSERT_SV_SETREF_IV	\
	assert(rv)
d3819 3
a3821 4
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV *const rv, const char *const classname, const NV nv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETREF_NV	\
	assert(rv)
d3823 4
a3826 1
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV *const rv, const char *const classname, void *const pv)
d3828 2
a3829 2
#define PERL_ARGS_ASSERT_SV_SETREF_PV	\
	assert(rv)
d3831 1
a3831 7
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV *const rv, const char *const classname, const char *const pv, const STRLEN n)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SV_SETREF_PVN	\
	assert(rv); assert(pv)

PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV *const rv, const char *const classname, const UV uv)
d3833 2
a3834 2
#define PERL_ARGS_ASSERT_SV_SETREF_UV	\
	assert(rv)
d3836 5
a3840 4
/* PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV *dstr, SV *sstr)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_SETSV	\
	assert(dstr)
d3842 5
a3846 4
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dstr, SV *sstr, const I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETSV_FLAGS	\
	assert(dstr)
d3848 5
a3852 4
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *const dstr, SV *const sstr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETSV_MG	\
	assert(dstr)
d3854 1
a3854 25
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV *const sv, const UV num)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETUV	\
	assert(sv)

PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *const sv, const UV u)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_SETUV_MG	\
	assert(sv)

/* PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_TAINT	\
	assert(sv)

PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV *const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_TAINTED	\
	assert(sv)

PERL_CALLCONV I32	Perl_sv_true(pTHX_ SV *const sv);
PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
d3856 2
a3857 17
#define PERL_ARGS_ASSERT_SV_UNI_DISPLAY	\
	assert(dsv); assert(ssv)

PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV *const sv, const int type)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_UNMAGIC	\
	assert(sv)

PERL_CALLCONV int	Perl_sv_unmagicext(pTHX_ SV *const sv, const int type, MGVTBL *vtbl)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_UNMAGICEXT	\
	assert(sv)

/* PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_UNREF	\
	assert(sv)
d3859 1
a3859 1
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV *const ref, const U32 flags)
d3861 2
a3862 2
#define PERL_ARGS_ASSERT_SV_UNREF_FLAGS	\
	assert(ref)
d3864 1
a3864 1
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV *const sv)
d3866 2
a3867 2
#define PERL_ARGS_ASSERT_SV_UNTAINT	\
	assert(sv)
d3869 1
a3869 1
PERL_CALLCONV void	Perl_sv_upgrade(pTHX_ SV *const sv, svtype new_type)
d3871 2
a3872 2
#define PERL_ARGS_ASSERT_SV_UPGRADE	\
	assert(sv)
d3874 4
a3877 4
/* PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_USEPVN	\
	assert(sv)
d3879 3
a3881 1
PERL_CALLCONV void	Perl_sv_usepvn_flags(pTHX_ SV *const sv, char* ptr, const STRLEN len, const U32 flags)
d3883 2
a3884 7
#define PERL_ARGS_ASSERT_SV_USEPVN_FLAGS	\
	assert(sv)

/* PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_USEPVN_MG	\
	assert(sv)
d3886 2
a3887 1
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *const sv)
d3889 2
a3890 2
#define PERL_ARGS_ASSERT_SV_UTF8_DECODE	\
	assert(sv)
d3892 3
a3894 1
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *const sv, const bool fail_ok)
d3896 2
a3897 2
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE	\
	assert(sv)
d3899 1
a3899 1
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *const sv)
d3901 2
a3902 2
#define PERL_ARGS_ASSERT_SV_UTF8_ENCODE	\
	assert(sv)
d3904 4
a3907 4
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE	\
	assert(sv)
d3909 3
a3911 2
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1); */
d3913 3
a3915 4
PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags_grow(pTHX_ SV *const sv, const I32 flags, STRLEN extra)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS_GROW	\
	assert(sv)
d3917 5
a3921 4
/* PERL_CALLCONV STRLEN	sv_utf8_upgrade_nomg(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv)
d3923 2
a3924 2
#define PERL_ARGS_ASSERT_SV_UV	\
	assert(sv)
d3926 5
a3930 1
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d3933 1
a3933 1
#define PERL_ARGS_ASSERT_SV_VCATPVF	\
d3942 6
a3947 1
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted)
d3949 8
a3956 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_VCATPVFN	\
	assert(sv); assert(pat)
d3958 2
a3959 1
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args)
d3962 1
a3962 1
#define PERL_ARGS_ASSERT_SV_VSETPVF	\
d3971 4
a3974 5
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_VSETPVFN	\
	assert(sv); assert(pat)
d3976 4
a3979 5
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *swash, const U8 *ptr, bool do_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SWASH_FETCH	\
	assert(swash); assert(ptr)
d3981 4
a3984 7
PERL_CALLCONV SV*	Perl_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SWASH_INIT	\
	assert(pkg); assert(name); assert(listsv)
d3986 4
a3989 5
PERL_CALLCONV void	Perl_sys_init(int* argc, char*** argv)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SYS_INIT	\
	assert(argc); assert(argv)
d3991 4
a3994 6
PERL_CALLCONV void	Perl_sys_init3(int* argc, char*** argv, char*** env)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_SYS_INIT3	\
	assert(argc); assert(argv); assert(env)
d3996 2
a3997 3
PERL_CALLCONV void	Perl_sys_term(void);
PERL_CALLCONV void	Perl_taint_env(pTHX);
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char *const s)
d3999 2
a4000 2
#define PERL_ARGS_ASSERT_TAINT_PROPER	\
	assert(s)
d4002 4
a4005 7
PERL_CALLCONV OP *	Perl_tied_method(pTHX_ const char *const methname, SV **sp, SV *const sv, const MAGIC *const mg, const U32 flags, U32 argc, ...)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_TIED_METHOD	\
	assert(methname); assert(sp); assert(sv); assert(mg)
d4007 4
a4010 4
PERL_CALLCONV void	Perl_tmps_grow(pTHX_ I32 n);
/* PERL_CALLCONV UV	Perl_to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */
d4012 2
a4013 5
PERL_CALLCONV UV	Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_TO_UNI_LOWER	\
	assert(p); assert(lenp)
d4015 1
a4015 25
PERL_CALLCONV U32	Perl_to_uni_lower_lc(pTHX_ U32 c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV UV	Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_TO_UNI_TITLE	\
	assert(p); assert(lenp)

PERL_CALLCONV U32	Perl_to_uni_title_lc(pTHX_ U32 c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV UV	Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_TO_UNI_UPPER	\
	assert(p); assert(lenp)

PERL_CALLCONV U32	Perl_to_uni_upper_lc(pTHX_ U32 c)
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV UV	Perl_to_utf8_case(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, const char *normal, const char *special)
d4017 3
a4019 5
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_TO_UTF8_CASE	\
	assert(p); assert(ustrp); assert(swashp); assert(normal)
d4021 1
a4021 1
/* PERL_CALLCONV UV	Perl_to_utf8_fold(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
d4023 3
a4025 3
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_TO_UTF8_FOLD	\
	assert(p); assert(ustrp)
d4027 1
a4027 1
/* PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
d4029 3
a4031 3
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_TO_UTF8_LOWER	\
	assert(p); assert(ustrp)
d4033 6
a4038 11
/* PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_TO_UTF8_TITLE	\
	assert(p); assert(ustrp)

/* PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_TO_UTF8_UPPER	\
	assert(p); assert(ustrp)
d4040 1
a4040 4
PERL_CALLCONV bool	Perl_try_amagic_bin(pTHX_ int method, int flags);
PERL_CALLCONV bool	Perl_try_amagic_un(pTHX_ int method, int flags);
PERL_CALLCONV I32	Perl_unpack_str(pTHX_ const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags)
			__attribute__nonnull__(pTHX_1)
d4042 3
a4044 4
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_UNPACK_STR	\
	assert(pat); assert(patend); assert(s); assert(strend)
d4046 1
a4046 2
PERL_CALLCONV I32	Perl_unpackstring(pTHX_ const char *pat, const char *patend, const char *s, const char *strend, U32 flags)
			__attribute__nonnull__(pTHX_1)
d4048 3
a4050 4
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UNPACKSTRING	\
	assert(pat); assert(patend); assert(s); assert(strend)
d4052 5
a4056 6
PERL_CALLCONV void	Perl_unshare_hek(pTHX_ HEK* hek);
PERL_CALLCONV void	Perl_unsharepvn(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV SV*	Perl_upg_version(pTHX_ SV *ver, bool qv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UPG_VERSION	\
	assert(ver)
d4058 1
a4058 2
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen)
			__attribute__nonnull__(pTHX_1)
d4060 3
a4062 3
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8	\
	assert(p); assert(d); assert(newlen)
d4064 1
a4064 2
PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen)
			__attribute__nonnull__(pTHX_1)
d4066 3
a4068 3
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8_REVERSED	\
	assert(p); assert(d); assert(newlen)
d4070 1
a4070 4
PERL_CALLCONV IV	Perl_utf8_distance(pTHX_ const U8 *a, const U8 *b)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
d4072 2
a4073 2
#define PERL_ARGS_ASSERT_UTF8_DISTANCE	\
	assert(a); assert(b)
d4075 1
a4075 11
PERL_CALLCONV U8*	Perl_utf8_hop(pTHX_ const U8 *s, I32 off)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UTF8_HOP	\
	assert(s)

PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ const U8* s, const U8 *e)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1)
d4077 2
a4078 2
#define PERL_ARGS_ASSERT_UTF8_LENGTH	\
	assert(s); assert(e)
d4080 1
a4080 2
PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len)
			__attribute__nonnull__(pTHX_1)
d4082 2
a4083 2
#define PERL_ARGS_ASSERT_UTF8_TO_BYTES	\
	assert(s); assert(len)
d4085 7
a4091 5
PERL_CALLCONV UV	Perl_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__deprecated__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR	\
	assert(s)
d4093 5
a4097 5
PERL_CALLCONV UV	Perl_utf8_to_uvchr_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR_BUF	\
	assert(s); assert(send)
d4099 5
a4103 5
PERL_CALLCONV UV	Perl_utf8_to_uvuni(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__deprecated__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI	\
	assert(s)
d4105 5
a4109 5
PERL_CALLCONV UV	Perl_utf8_to_uvuni_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI_BUF	\
	assert(s); assert(send)
d4111 5
a4115 4
PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVUNI	\
	assert(s)
d4117 5
a4121 4
PERL_CALLCONV U8*	Perl_uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8_FLAGS	\
	assert(d)
d4123 1
a4123 1
/* PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv)
d4125 2
a4126 2
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8	\
	assert(d)
d4128 2
a4129 4
PERL_CALLCONV U8*	Perl_uvuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8_FLAGS	\
	assert(d)
d4131 1
a4131 1
PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
d4133 2
a4134 2
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR	\
	assert(s)
d4136 1
a4136 1
PERL_CALLCONV UV	Perl_valid_utf8_to_uvuni(pTHX_ const U8 *s, STRLEN *retlen)
d4138 2
a4139 2
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVUNI	\
	assert(s)
d4141 1
a4141 10
PERL_CALLCONV int	Perl_vcmp(pTHX_ SV *lhv, SV *rhv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_VCMP	\
	assert(lhv); assert(rhv)

PERL_CALLCONV void	Perl_vcroak(pTHX_ const char* pat, va_list* args)
			__attribute__noreturn__;

PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args)
d4143 2
a4144 2
#define PERL_ARGS_ASSERT_VDEB	\
	assert(pat)
d4146 4
a4149 4
PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VFORM	\
	assert(pat)
d4151 1
a4151 1
PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv)
d4153 1
a4153 1
#define PERL_ARGS_ASSERT_VIVIFY_DEFELEM	\
d4156 2
a4157 2
PERL_CALLCONV SV*	Perl_vivify_ref(pTHX_ SV* sv, U32 to_what)
			__attribute__warn_unused_result__
d4159 1
a4159 1
#define PERL_ARGS_ASSERT_VIVIFY_REF	\
d4162 2
a4163 1
PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args)
d4165 2
a4166 2
#define PERL_ARGS_ASSERT_VLOAD_MODULE	\
	assert(name)
d4168 5
a4172 4
PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VMESS	\
	assert(pat)
d4174 3
a4176 6
PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char *const pat, va_list *const args)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VNEWSVPVF	\
	assert(pat)
d4178 2
a4179 1
PERL_CALLCONV SV*	Perl_vnormal(pTHX_ SV *vs)
d4181 2
a4182 2
#define PERL_ARGS_ASSERT_VNORMAL	\
	assert(vs)
d4184 6
a4189 4
PERL_CALLCONV SV*	Perl_vnumify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VNUMIFY	\
	assert(vs)
d4191 5
a4195 4
PERL_CALLCONV SV*	Perl_vstringify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VSTRINGIFY	\
	assert(vs)
d4197 7
a4203 4
PERL_CALLCONV SV*	Perl_vverify(pTHX_ SV *vs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VVERIFY	\
	assert(vs)
d4205 5
a4209 4
PERL_CALLCONV void	Perl_vwarn(pTHX_ const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VWARN	\
	assert(pat)
d4211 5
a4215 4
PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_VWARNER	\
	assert(pat)
d4217 2
a4218 1
PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags)
d4220 2
a4221 2
#define PERL_ARGS_ASSERT_WAIT4PID	\
	assert(statusp)
d4223 6
a4228 5
PERL_CALLCONV void	Perl_warn(pTHX_ const char* pat, ...)
			__attribute__format__(__printf__,pTHX_1,pTHX_2)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_WARN	\
	assert(pat)
d4230 4
a4233 10
PERL_CALLCONV void	Perl_warn_sv(pTHX_ SV *baseex)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_WARN_SV	\
	assert(baseex)

PERL_CALLCONV void	Perl_warner(pTHX_ U32 err, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_WARNER	\
	assert(pat)
d4235 1
a4235 1
PERL_CALLCONV I32	Perl_was_lvalue_sub(pTHX)
d4238 5
a4242 4
PERL_CALLCONV void	Perl_watch(pTHX_ char** addr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_WATCH	\
	assert(addr)
d4244 5
a4248 2
/* PERL_CALLCONV I32	whichsig(pTHX_ const char* sig)
			__attribute__nonnull__(pTHX_1); */
d4250 7
a4256 4
PERL_CALLCONV I32	Perl_whichsig_pv(pTHX_ const char* sig)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_WHICHSIG_PV	\
	assert(sig)
d4258 6
a4263 4
PERL_CALLCONV I32	Perl_whichsig_pvn(pTHX_ const char* sig, STRLEN len)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_WHICHSIG_PVN	\
	assert(sig)
d4265 2
a4266 6
PERL_CALLCONV I32	Perl_whichsig_sv(pTHX_ SV* sigsv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_WHICHSIG_SV	\
	assert(sigsv)

PERL_CALLCONV void	Perl_wrap_op_checker(pTHX_ Optype opcode, Perl_check_t new_checker, Perl_check_t *old_checker_p)
d4269 2
a4270 2
#define PERL_ARGS_ASSERT_WRAP_OP_CHECKER	\
	assert(new_checker); assert(old_checker_p)
d4272 1
a4272 7
PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ SV* msv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_WRITE_TO_STDERR	\
	assert(msv)

PERL_CALLCONV void	Perl_xs_apiversion_bootcheck(pTHX_ SV *module, const char *api_p, STRLEN api_len)
			__attribute__nonnull__(pTHX_1)
d4274 2
a4275 2
#define PERL_ARGS_ASSERT_XS_APIVERSION_BOOTCHECK	\
	assert(module); assert(api_p)
d4277 4
a4280 4
PERL_CALLCONV void	Perl_xs_version_bootcheck(pTHX_ U32 items, U32 ax, const char *xs_p, STRLEN xs_len)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_XS_VERSION_BOOTCHECK	\
	assert(xs_p)
d4282 2
a4283 1
PERL_CALLCONV int	Perl_yyerror(pTHX_ const char *const s)
d4285 2
a4286 2
#define PERL_ARGS_ASSERT_YYERROR	\
	assert(s)
d4288 5
a4292 4
PERL_CALLCONV int	Perl_yyerror_pv(pTHX_ const char *const s, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_YYERROR_PV	\
	assert(s)
d4294 1
a4294 1
PERL_CALLCONV int	Perl_yyerror_pvn(pTHX_ const char *const s, STRLEN len, U32 flags)
d4296 2
a4297 2
#define PERL_ARGS_ASSERT_YYERROR_PVN	\
	assert(s)
d4299 9
a4307 10
PERL_CALLCONV int	Perl_yylex(pTHX);
PERL_CALLCONV int	Perl_yyparse(pTHX_ int gramtype);
PERL_CALLCONV void	Perl_yyunlex(pTHX);
#if !(defined(DEBUGGING))
#  if !defined(NV_PRESERVES_UV)
#    if defined(PERL_IN_SV_C)
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE	\
	assert(sv)
a4308 1
#    endif
d4311 3
a4313 15
#if !(defined(EBCDIC))
/* PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)

/* PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8	\
	assert(d)

#endif
#if !(defined(HAS_SIGACTION) && defined(SA_SIGINFO))
PERL_CALLCONV Signal_t	Perl_csighandler(int sig);
PERL_CALLCONV Signal_t	Perl_sighandler(int sig);
a4314 8
#if !(defined(NO_MATHOMS))
PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv);
#endif
#if !(defined(PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION))
PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_EXEC	\
	assert(cmd)
d4316 2
a4317 4
#endif
#if !(defined(PERL_GLOBAL_STRUCT_PRIVATE))
#  if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ int *index, size_t size)
d4319 1
a4319 13
#define PERL_ARGS_ASSERT_MY_CXT_INIT	\
	assert(index)

#  endif
#endif
#if !(defined(PERL_MAD))
PERL_CALLCONV void	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
PERL_CALLCONV void	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__noreturn__;

PERL_CALLCONV void	Perl_package(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PACKAGE	\
d4322 2
a4323 9
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)

#endif
#if !(defined(USE_ITHREADS))
#  if defined(PERL_IN_OP_C)
STATIC void	S_forget_pmop(pTHX_ PMOP *const o)
d4325 1
a4325 1
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
a4327 7
#  endif
#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
PERL_CALLCONV char*	Perl_my_bzero(char* loc, I32 len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MY_BZERO	\
	assert(loc)
d4329 7
d4337 1
a4337 6
#if !defined(HAS_GETENV_LEN)
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char *env_elem, unsigned long *len)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GETENV_LEN	\
	assert(env_elem); assert(len)
d4339 1
a4339 8
#endif
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
PERL_CALLCONV I32	Perl_my_memcmp(const char* s1, const char* s2, I32 len)
			__attribute__pure__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_MY_MEMCMP	\
	assert(s1); assert(s2)
d4341 6
a4346 6
#endif
#if !defined(HAS_MEMSET)
PERL_CALLCONV void*	Perl_my_memset(char* loc, I32 ch, I32 len)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MY_MEMSET	\
	assert(loc)
d4348 1
a4348 4
#endif
#if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
#  if defined(PERL_IN_PP_SYS_C)
STATIC int	S_dooneliner(pTHX_ const char *cmd, const char *filename)
d4350 3
a4352 4
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DOONELINER	\
	assert(cmd); assert(filename)
d4354 5
a4358 8
#  endif
#endif
#if !defined(HAS_RENAME)
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ const char* a, const char* b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAME_DIRENT	\
	assert(a); assert(b)
d4360 5
a4364 4
#endif
#if !defined(HAS_SIGNBIT)
PERL_CALLCONV int	Perl_signbit(NV f)
			__attribute__pure__;
d4366 5
a4370 10
#endif
#if !defined(HAS_STRLCAT)
PERL_CALLCONV Size_t	Perl_my_strlcat(char *dst, const char *src, Size_t size);
#endif
#if !defined(HAS_STRLCPY)
PERL_CALLCONV Size_t	Perl_my_strlcpy(char *dst, const char *src, Size_t size);
#endif
#if !defined(HAS_TRUNCATE) && !defined(HAS_CHSIZE) && defined(F_FREESP)
PERL_CALLCONV I32	Perl_my_chsize(pTHX_ int fd, Off_t length)
			__attribute__warn_unused_result__;
d4372 2
a4373 5
#endif
#if !defined(NV_PRESERVES_UV)
#  if defined(DEBUGGING)
#    if defined(PERL_IN_SV_C)
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv, I32 numtype)
d4375 1
a4375 1
#define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE	\
a4377 2
#    endif
#  endif
d4379 8
a4386 4
#if !defined(PERL_DISABLE_PMC)
#  if defined(PERL_IN_PP_CTL_C)
STATIC PerlIO *	S_doopen_pm(pTHX_ SV *name)
			__attribute__warn_unused_result__
d4388 1
a4388 1
#define PERL_ARGS_ASSERT_DOOPEN_PM	\
d4391 1
a4391 5
#  endif
#endif
#if !defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV I32	Perl_my_pclose(pTHX_ PerlIO* ptr);
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ const char* cmd, const char* mode)
d4393 5
a4397 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MY_POPEN	\
	assert(cmd); assert(mode)
a4399 8
#if !defined(PERL_IS_MINIPERL)
#  if defined(PERL_IN_PERL_C)
STATIC SV *	S_incpush_if_exists(pTHX_ AV *const av, SV *dir, SV *const stem)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_INCPUSH_IF_EXISTS	\
	assert(av); assert(dir); assert(stem)
d4401 12
a4412 5
#  endif
#endif
#if !defined(PERL_NO_UTF16_FILTER)
#  if defined(PERL_IN_TOKE_C)
STATIC U8*	S_add_utf16_textfilter(pTHX_ U8 *const s, bool reversed)
d4414 2
a4415 2
#define PERL_ARGS_ASSERT_ADD_UTF16_TEXTFILTER	\
	assert(s)
d4417 1
a4417 1
STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen)
d4419 6
a4424 2
#define PERL_ARGS_ASSERT_UTF16_TEXTFILTER	\
	assert(sv)
d4426 6
a4431 8
#  endif
#endif
#if !defined(SETUID_SCRIPTS_ARE_SECURE_NOW)
#  if defined(PERL_IN_PERL_C)
STATIC void	S_validate_suid(pTHX_ PerlIO *rsfp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VALIDATE_SUID	\
	assert(rsfp)
d4433 1
a4433 4
#  endif
#endif
#if !defined(SPRINTF_RETURNS_STRLEN)
PERL_CALLCONV int	Perl_my_sprintf(char *buffer, const char *pat, ...)
d4435 4
a4438 3
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_MY_SPRINTF	\
	assert(buffer); assert(pat)
d4440 3
a4442 3
#endif
#if !defined(WIN32)
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report)
d4444 9
a4452 2
#define PERL_ARGS_ASSERT_DO_EXEC3	\
	assert(incmd)
d4454 4
a4457 7
#endif
#if (!defined(HAS_MEMCPY) && !defined(HAS_BCOPY)) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY) && !defined(HAS_SAFE_BCOPY))
PERL_CALLCONV char*	Perl_my_bcopy(const char* from, char* to, I32 len)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_MY_BCOPY	\
	assert(from); assert(to)
d4459 2
a4460 4
#endif
#if defined(DEBUGGING)
PERL_CALLCONV int	Perl_get_debug_opts(pTHX_ const char **s, bool givehelp)
			__attribute__warn_unused_result__
d4462 2
a4463 2
#define PERL_ARGS_ASSERT_GET_DEBUG_OPTS	\
	assert(s)
d4465 1
a4465 1
PERL_CALLCONV void	Perl_hv_assert(pTHX_ HV *hv)
d4467 4
a4470 2
#define PERL_ARGS_ASSERT_HV_ASSERT	\
	assert(hv)
d4472 2
a4473 1
PERL_CALLCONV void	Perl_pad_setsv(pTHX_ PADOFFSET po, SV* sv)
d4475 1
a4475 1
#define PERL_ARGS_ASSERT_PAD_SETSV	\
d4478 1
a4478 3
PERL_CALLCONV SV*	Perl_pad_sv(pTHX_ PADOFFSET po);
#  if defined(PERL_IN_PAD_C)
STATIC void	S_cv_dump(pTHX_ const CV *cv, const char *title)
d4480 4
a4483 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CV_DUMP	\
	assert(cv); assert(title)
d4485 1
a4485 3
#  endif
#  if defined(PERL_IN_REGCOMP_C)
STATIC void	S_dump_trie(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 depth)
d4487 1
d4489 2
a4490 2
#define PERL_ARGS_ASSERT_DUMP_TRIE	\
	assert(trie); assert(revcharmap)
d4492 5
a4496 5
STATIC void	S_dump_trie_interim_list(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_LIST	\
	assert(trie); assert(revcharmap)
a4497 5
STATIC void	S_dump_trie_interim_table(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_TABLE	\
	assert(trie); assert(revcharmap)
d4499 1
a4499 7
STATIC const regnode*	S_dumpuntil(pTHX_ const regexp *r, const regnode *start, const regnode *node, const regnode *last, const regnode *plast, SV* sv, I32 indent, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_DUMPUNTIL	\
	assert(r); assert(start); assert(node); assert(sv)
d4501 3
a4503 1
STATIC void	S_put_byte(pTHX_ SV* sv, int c)
d4505 2
a4506 2
#define PERL_ARGS_ASSERT_PUT_BYTE	\
	assert(sv)
d4508 5
a4512 7
STATIC void	S_regdump_extflags(pTHX_ const char *lead, const U32 flags);
STATIC U8	S_regtail_study(pTHX_ struct RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGTAIL_STUDY	\
	assert(pRExC_state); assert(p); assert(val)
d4514 5
a4518 9
#  endif
#  if defined(PERL_IN_REGEXEC_C)
STATIC void	S_debug_start_match(pTHX_ const REGEXP *prog, const bool do_utf8, const char *start, const char *end, const char *blurb)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_DEBUG_START_MATCH	\
	assert(prog); assert(start); assert(end); assert(blurb)
d4520 5
a4524 8
STATIC void	S_dump_exec_pos(pTHX_ const char *locinput, const regnode *scan, const char *loc_regeol, const char *loc_bostr, const char *loc_reg_starttry, const bool do_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_DUMP_EXEC_POS	\
	assert(locinput); assert(scan); assert(loc_regeol); assert(loc_bostr); assert(loc_reg_starttry)
d4526 2
a4527 3
#  endif
#  if defined(PERL_IN_SV_C)
STATIC void	S_del_sv(pTHX_ SV *p)
d4529 2
a4530 2
#define PERL_ARGS_ASSERT_DEL_SV	\
	assert(p)
d4532 5
a4536 7
#  endif
#  if defined(PERL_IN_TOKE_C)
STATIC void	S_printbuf(pTHX_ const char *const fmt, const char *const s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PRINTBUF	\
	assert(fmt); assert(s)
d4538 5
a4542 4
STATIC int	S_tokereport(pTHX_ I32 rv, const YYSTYPE* lvalp)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TOKEREPORT	\
	assert(lvalp)
d4544 2
a4545 4
#  endif
#endif
#if defined(DEBUG_LEAKING_SCALARS_FORK_DUMP)
PERL_CALLCONV void	Perl_dump_sv_child(pTHX_ SV *sv)
d4547 2
a4548 2
#define PERL_ARGS_ASSERT_DUMP_SV_CHILD	\
	assert(sv)
d4550 2
a4551 3
#endif
#if defined(DUMP_FDS)
PERL_CALLCONV void	Perl_dump_fds(pTHX_ char* s)
d4553 2
a4554 2
#define PERL_ARGS_ASSERT_DUMP_FDS	\
	assert(s)
d4556 2
a4557 3
#endif
#if defined(EBCDIC)
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
d4559 2
a4560 2
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)
d4562 2
a4563 1
PERL_CALLCONV U8*	Perl_uvchr_to_utf8(pTHX_ U8 *d, UV uv)
d4565 2
a4566 2
#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8	\
	assert(d)
d4568 5
a4572 7
#endif
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_IPCCTL	\
	assert(mark); assert(sp)
d4574 5
a4578 5
PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_IPCGET	\
	assert(mark); assert(sp)
d4580 5
a4584 5
PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_MSGRCV	\
	assert(mark); assert(sp)
d4586 5
a4590 5
PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_MSGSND	\
	assert(mark); assert(sp)
d4592 5
a4596 5
PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_SEMOP	\
	assert(mark); assert(sp)
d4598 5
a4602 5
PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_SHMIO	\
	assert(mark); assert(sp)
d4604 5
a4608 14
#endif
#if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
PERL_CALLCONV Signal_t	Perl_csighandler(int sig, siginfo_t *info, void *uap);
PERL_CALLCONV Signal_t	Perl_sighandler(int sig, siginfo_t *info, void *uap);
#endif
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_clear(pTHX);
PERL_CALLCONV void	Perl_sys_intern_init(pTHX);
#  if defined(USE_ITHREADS)
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SYS_INTERN_DUP	\
	assert(src); assert(dst)
d4610 2
a4611 4
#  endif
#endif
#if defined(MYMALLOC)
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ const char* s)
d4613 2
a4614 2
#define PERL_ARGS_ASSERT_DUMP_MSTATS	\
	assert(s)
d4616 2
a4617 1
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level)
d4619 2
a4620 2
#define PERL_ARGS_ASSERT_GET_MSTATS	\
	assert(buf)
d4622 5
a4626 2
PERL_CALLCONV MEM_SIZE	Perl_malloc_good_size(size_t nbytes)
			__attribute__warn_unused_result__;
d4628 1
a4628 1
PERL_CALLCONV MEM_SIZE	Perl_malloced_size(void *p)
d4630 3
a4632 3
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MALLOCED_SIZE	\
	assert(p)
d4634 1
a4634 4
#endif
#if defined(MYSWAP)
PERL_CALLCONV long	Perl_my_htonl(pTHX_ long l)
			__attribute__malloc__
d4636 3
a4638 1
			__attribute__pure__;
d4640 1
a4640 2
PERL_CALLCONV long	Perl_my_ntohl(pTHX_ long l)
			__attribute__malloc__
d4642 3
a4644 1
			__attribute__pure__;
d4646 1
a4646 2
PERL_CALLCONV short	Perl_my_swap(pTHX_ short s)
			__attribute__malloc__
d4648 3
a4650 1
			__attribute__pure__;
d4652 2
a4653 8
#endif
#if defined(NO_MATHOMS)
/* PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv); */
#endif
#if defined(PERL_CR_FILTER)
#  if defined(PERL_IN_TOKE_C)
STATIC I32	S_cr_textfilter(pTHX_ int idx, SV *sv, int maxlen);
STATIC void	S_strip_return(pTHX_ SV *sv)
d4655 2
a4656 2
#define PERL_ARGS_ASSERT_STRIP_RETURN	\
	assert(sv)
d4658 2
a4659 6
#  endif
#endif
#if defined(PERL_DEBUG_READONLY_OPS)
#  if defined(PERL_IN_OP_C)
#    if defined(PL_OP_SLAB_ALLOC)
STATIC void	S_Slab_to_rw(pTHX_ void *op)
d4661 2
a4662 2
#define PERL_ARGS_ASSERT_SLAB_TO_RW	\
	assert(op)
d4664 2
a4665 4
#    endif
#  endif
#  if defined(PL_OP_SLAB_ALLOC)
PERL_CALLCONV PADOFFSET	Perl_op_refcnt_dec(pTHX_ OP *o)
d4667 1
a4667 1
#define PERL_ARGS_ASSERT_OP_REFCNT_DEC	\
d4670 5
a4674 7
PERL_CALLCONV OP *	Perl_op_refcnt_inc(pTHX_ OP *o);
PERL_CALLCONV void	Perl_pending_Slabs_to_ro(pTHX);
#  endif
#endif
#if defined(PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION)
/* PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd)
			__attribute__nonnull__(pTHX_1); */
d4676 2
a4677 7
#endif
#if defined(PERL_DONT_CREATE_GVSV)
/* PERL_CALLCONV GV*	Perl_gv_SVadd(pTHX_ GV *gv); */
#endif
#if defined(PERL_GLOBAL_STRUCT)
PERL_CALLCONV struct perl_vars *	Perl_GetVars(pTHX);
PERL_CALLCONV void	Perl_free_global_struct(pTHX_ struct perl_vars *plvarsp)
d4679 2
a4680 2
#define PERL_ARGS_ASSERT_FREE_GLOBAL_STRUCT	\
	assert(plvarsp)
d4682 2
a4683 5
PERL_CALLCONV struct perl_vars*	Perl_init_global_struct(pTHX);
#endif
#if defined(PERL_GLOBAL_STRUCT_PRIVATE)
#  if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV int	Perl_my_cxt_index(pTHX_ const char *my_cxt_key)
d4685 2
a4686 2
#define PERL_ARGS_ASSERT_MY_CXT_INDEX	\
	assert(my_cxt_key)
d4688 2
a4689 1
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ const char *my_cxt_key, size_t size)
d4691 2
a4692 2
#define PERL_ARGS_ASSERT_MY_CXT_INIT	\
	assert(my_cxt_key)
d4694 5
a4698 6
#  endif
#endif
#if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV void	Perl_croak_nocontext(const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__null_ok__(__printf__,1,2);
d4700 5
a4704 5
PERL_CALLCONV void	Perl_deb_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_DEB_NOCONTEXT	\
	assert(pat)
d4706 5
a4710 2
PERL_CALLCONV OP*	Perl_die_nocontext(const char* pat, ...)
			__attribute__format__null_ok__(__printf__,1,2);
d4712 5
a4716 5
PERL_CALLCONV char*	Perl_form_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_FORM_NOCONTEXT	\
	assert(pat)
d4718 5
a4722 29
PERL_CALLCONV int	Perl_fprintf_nocontext(PerlIO *stream, const char *format, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_FPRINTF_NOCONTEXT	\
	assert(stream); assert(format)

PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_LOAD_MODULE_NOCONTEXT	\
	assert(name)

PERL_CALLCONV SV*	Perl_mess_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_MESS_NOCONTEXT	\
	assert(pat)

PERL_CALLCONV SV*	Perl_newSVpvf_nocontext(const char *const pat, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_NEWSVPVF_NOCONTEXT	\
	assert(pat)

PERL_CALLCONV int	Perl_printf_nocontext(const char *format, ...)
			__attribute__format__(__printf__,1,2)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PRINTF_NOCONTEXT	\
	assert(format)
d4724 5
a4728 6
PERL_CALLCONV void	Perl_sv_catpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_CATPVF_MG_NOCONTEXT	\
	assert(sv); assert(pat)
d4730 5
a4734 6
PERL_CALLCONV void	Perl_sv_catpvf_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_CATPVF_NOCONTEXT	\
	assert(sv); assert(pat)
d4736 5
a4740 6
PERL_CALLCONV void	Perl_sv_setpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_SETPVF_MG_NOCONTEXT	\
	assert(sv); assert(pat)
d4742 5
a4746 6
PERL_CALLCONV void	Perl_sv_setpvf_nocontext(SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_SETPVF_NOCONTEXT	\
	assert(sv); assert(pat)
d4748 2
a4749 2
PERL_CALLCONV void	Perl_warn_nocontext(const char* pat, ...)
			__attribute__format__(__printf__,1,2)
d4751 2
a4752 2
#define PERL_ARGS_ASSERT_WARN_NOCONTEXT	\
	assert(pat)
d4754 2
a4755 5
PERL_CALLCONV void	Perl_warner_nocontext(U32 err, const char* pat, ...)
			__attribute__format__(__printf__,2,3)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_WARNER_NOCONTEXT	\
	assert(pat)
d4757 5
a4761 14
#endif
#if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem *ipM, struct IPerlMem *ipMS, struct IPerlMem *ipMP, struct IPerlEnv *ipE, struct IPerlStdIO *ipStd, struct IPerlLIO *ipLIO, struct IPerlDir *ipD, struct IPerlSock *ipS, struct IPerlProc *ipP)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(5)
			__attribute__nonnull__(6)
			__attribute__nonnull__(7)
			__attribute__nonnull__(8)
			__attribute__nonnull__(9);
#define PERL_ARGS_ASSERT_PERL_ALLOC_USING	\
	assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)
d4763 5
a4767 14
#  if defined(USE_ITHREADS)
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *proto_perl, UV flags, struct IPerlMem* ipM, struct IPerlMem* ipMS, struct IPerlMem* ipMP, struct IPerlEnv* ipE, struct IPerlStdIO* ipStd, struct IPerlLIO* ipLIO, struct IPerlDir* ipD, struct IPerlSock* ipS, struct IPerlProc* ipP)
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4)
			__attribute__nonnull__(5)
			__attribute__nonnull__(6)
			__attribute__nonnull__(7)
			__attribute__nonnull__(8)
			__attribute__nonnull__(9)
			__attribute__nonnull__(10)
			__attribute__nonnull__(11);
#define PERL_ARGS_ASSERT_PERL_CLONE_USING	\
	assert(proto_perl); assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)
d4770 1
a4770 3
#endif
#if defined(PERL_IN_AV_C)
STATIC MAGIC*	S_get_aux_mg(pTHX_ AV *av)
d4772 2
a4773 2
#define PERL_ARGS_ASSERT_GET_AUX_MG	\
	assert(av)
d4775 1
a4775 3
#endif
#if defined(PERL_IN_DEB_C)
STATIC void	S_deb_stack_n(pTHX_ SV** stack_base, I32 stack_min, I32 stack_max, I32 mark_min, I32 mark_max)
d4777 2
a4778 2
#define PERL_ARGS_ASSERT_DEB_STACK_N	\
	assert(stack_base)
d4780 2
a4781 3
#endif
#if defined(PERL_IN_DOIO_C)
STATIC void	S_exec_failed(pTHX_ const char *cmd, int fd, int do_report)
d4783 2
a4784 2
#define PERL_ARGS_ASSERT_EXEC_FAILED	\
	assert(cmd)
d4786 1
a4786 1
STATIC bool	S_ingroup(pTHX_ Gid_t testgid, bool effective)
d4789 1
a4789 3
#endif
#if defined(PERL_IN_DOOP_C)
STATIC I32	S_do_trans_complex(pTHX_ SV * const sv)
d4792 2
a4793 2
#define PERL_ARGS_ASSERT_DO_TRANS_COMPLEX	\
	assert(sv)
d4795 1
a4795 1
STATIC I32	S_do_trans_complex_utf8(pTHX_ SV * const sv)
d4797 11
d4809 2
a4810 2
#define PERL_ARGS_ASSERT_DO_TRANS_COMPLEX_UTF8	\
	assert(sv)
d4812 1
a4812 1
STATIC I32	S_do_trans_count(pTHX_ SV * const sv)
d4814 35
d4850 2
a4851 2
#define PERL_ARGS_ASSERT_DO_TRANS_COUNT	\
	assert(sv)
d4853 1
a4853 1
STATIC I32	S_do_trans_count_utf8(pTHX_ SV * const sv)
d4856 2
a4857 2
#define PERL_ARGS_ASSERT_DO_TRANS_COUNT_UTF8	\
	assert(sv)
d4859 1
a4859 1
STATIC I32	S_do_trans_simple(pTHX_ SV * const sv)
d4861 4
a4864 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_TRANS_SIMPLE	\
	assert(sv)
d4866 1
a4866 1
STATIC I32	S_do_trans_simple_utf8(pTHX_ SV * const sv)
d4868 6
d4875 2
a4876 2
#define PERL_ARGS_ASSERT_DO_TRANS_SIMPLE_UTF8	\
	assert(sv)
d4878 4
a4881 4
#endif
#if defined(PERL_IN_DQUOTE_STATIC_C)
STATIC char	S_grok_bslash_c(pTHX_ const char source, const bool utf8, const bool output_warning)
			__attribute__warn_unused_result__;
d4883 2
a4884 2
STATIC bool	S_grok_bslash_o(pTHX_ const char* s, UV* uv, STRLEN* len, const char** error_msg, const bool output_warning)
			__attribute__warn_unused_result__
d4887 9
a4895 4
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_GROK_BSLASH_O	\
	assert(s); assert(uv); assert(len); assert(error_msg)
d4897 1
a4897 3
PERL_STATIC_INLINE I32	S_regcurly(pTHX_ const char *s)
			__attribute__warn_unused_result__
			__attribute__pure__
d4899 2
a4900 2
#define PERL_ARGS_ASSERT_REGCURLY	\
	assert(s)
d4902 4
a4905 4
#endif
#if defined(PERL_IN_DUMP_C)
STATIC CV*	S_deb_curcv(pTHX_ const I32 ix);
STATIC void	S_debprof(pTHX_ const OP *o)
d4907 1
a4907 1
#define PERL_ARGS_ASSERT_DEBPROF	\
d4910 2
a4911 1
STATIC SV*	S_pm_description(pTHX_ const PMOP *pm)
d4913 2
a4914 2
#define PERL_ARGS_ASSERT_PM_DESCRIPTION	\
	assert(pm)
d4916 3
a4918 8
STATIC UV	S_sequence_num(pTHX_ const OP *o);
#  if defined(PERL_MAD)
STATIC void	S_xmldump_attr(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
			__attribute__format__(__printf__,pTHX_3,pTHX_4)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_XMLDUMP_ATTR	\
	assert(file); assert(pat)
d4920 6
a4925 7
#  endif
#endif
#if defined(PERL_IN_DUMP_C) || defined(PERL_IN_HV_C) || defined(PERL_IN_SV_C) || defined(PERL_IN_SCOPE_C)
PERL_CALLCONV void	Perl_hv_kill_backrefs(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_KILL_BACKREFS	\
	assert(hv)
d4927 2
a4928 3
#endif
#if defined(PERL_IN_GV_C)
STATIC HV*	S_gv_get_super_pkg(pTHX_ const char* name, I32 namelen, U32 flags)
d4930 2
a4931 2
#define PERL_ARGS_ASSERT_GV_GET_SUPER_PKG	\
	assert(name)
d4933 1
a4933 1
STATIC void	S_gv_init_svtype(pTHX_ GV *gv, const svtype sv_type)
d4935 2
a4936 2
#define PERL_ARGS_ASSERT_GV_INIT_SVTYPE	\
	assert(gv)
d4938 8
a4945 4
STATIC void	S_gv_magicalize_isa(pTHX_ GV *gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_MAGICALIZE_ISA	\
	assert(gv)
d4947 3
a4949 4
STATIC void	S_gv_magicalize_overload(pTHX_ GV *gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_MAGICALIZE_OVERLOAD	\
	assert(gv)
d4951 2
a4952 1
STATIC HV*	S_require_tie_mod(pTHX_ GV *gv, const char *varpv, SV* namesv, const char *methpv, const U32 flags)
a4953 1
			__attribute__nonnull__(pTHX_2)
d4956 2
a4957 10
#define PERL_ARGS_ASSERT_REQUIRE_TIE_MOD	\
	assert(gv); assert(varpv); assert(namesv); assert(methpv)

#endif
#if defined(PERL_IN_GV_C) || defined(PERL_IN_SV_C) || defined(PERL_IN_PAD_C) || defined(PERL_IN_OP_C)
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *const tsv, SV *const sv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_ADD_BACKREF	\
	assert(tsv); assert(sv)
d4959 1
a4959 3
#endif
#if defined(PERL_IN_HV_C)
STATIC void	S_clear_placeholders(pTHX_ HV *hv, U32 items)
d4961 2
a4962 2
#define PERL_ARGS_ASSERT_CLEAR_PLACEHOLDERS	\
	assert(hv)
d4964 2
a4965 1
STATIC void	S_hfreeentries(pTHX_ HV *hv)
d4967 2
a4968 2
#define PERL_ARGS_ASSERT_HFREEENTRIES	\
	assert(hv)
d4970 1
a4970 4
STATIC void	S_hsplit(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HSPLIT	\
	assert(hv)
d4972 3
a4974 4
STATIC struct xpvhv_aux*	S_hv_auxinit(HV *hv)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_HV_AUXINIT	\
	assert(hv)
d4976 2
a4977 15
STATIC SV*	S_hv_delete_common(pTHX_ HV *hv, SV *keysv, const char *key, STRLEN klen, int k_flags, I32 d_flags, U32 hash);
STATIC SV*	S_hv_free_ent_ret(pTHX_ HV *hv, HE *entryK)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_FREE_ENT_RET	\
	assert(hv)

STATIC void	S_hv_magic_check(HV *hv, bool *needs_copy, bool *needs_store)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_HV_MAGIC_CHECK	\
	assert(hv); assert(needs_copy); assert(needs_store)

STATIC void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg)
			__attribute__noreturn__
d4979 3
a4981 3
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_HV_NOTALLOWED	\
	assert(key); assert(msg)
d4983 1
a4983 3
STATIC HE*	S_new_he(pTHX)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d4985 3
a4987 13
STATIC SV *	S_refcounted_he_value(pTHX_ const struct refcounted_he *he)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_VALUE	\
	assert(he)

STATIC HEK*	S_save_hek_flags(const char *str, I32 len, U32 hash, int flags)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_SAVE_HEK_FLAGS	\
	assert(str)

STATIC HEK*	S_share_hek_flags(pTHX_ const char *str, I32 len, U32 hash, int flags)
d4990 1
a4990 9
#define PERL_ARGS_ASSERT_SHARE_HEK_FLAGS	\
	assert(str)

STATIC void	S_unshare_hek_or_pvn(pTHX_ const HEK* hek, const char* str, I32 len, U32 hash);
#endif
#if defined(PERL_IN_HV_C) || defined(PERL_IN_MG_C) || defined(PERL_IN_SV_C)
PERL_CALLCONV void	Perl_sv_kill_backrefs(pTHX_ SV *const sv, AV *const av)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_KILL_BACKREFS	\
d4994 3
a4996 2
#if defined(PERL_IN_HV_C) || defined(PERL_IN_SV_C)
PERL_CALLCONV SV*	Perl_hfree_next_entry(pTHX_ HV *hv, STRLEN *indexp)
d4998 4
a5001 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HFREE_NEXT_ENTRY	\
	assert(hv); assert(indexp)
a5003 6
#if defined(PERL_IN_LOCALE_C)
#  if defined(USE_LOCALE_NUMERIC) || defined(USE_LOCALE_COLLATE)
STATIC char*	S_stdize_locale(pTHX_ char* locs)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_STDIZE_LOCALE	\
	assert(locs)
d5005 2
a5006 4
#  endif
#endif
#if defined(PERL_IN_MG_C)
STATIC SV*	S_magic_methcall1(pTHX_ SV *sv, const MAGIC *mg, const char *meth, U32 flags, int n, SV *val)
d5009 4
a5012 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MAGIC_METHCALL1	\
	assert(sv); assert(mg); assert(meth)
d5014 1
a5014 1
STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, const char *meth)
d5017 4
a5020 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MAGIC_METHPACK	\
	assert(sv); assert(mg); assert(meth)
d5022 3
a5024 4
STATIC void	S_restore_magic(pTHX_ const void *p);
STATIC void	S_save_magic(pTHX_ I32 mgs_ix, SV *sv)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAVE_MAGIC	\
d5027 15
a5041 8
STATIC void	S_unwind_handler_stack(pTHX_ const void *p);
#endif
#if defined(PERL_IN_MG_C) || defined(PERL_IN_PP_C)
PERL_CALLCONV bool	Perl_translate_substr_offsets(pTHX_ STRLEN curlen, IV pos1_iv, bool pos1_is_uv, IV len_iv, bool len_is_uv, STRLEN *posp, STRLEN *lenp)
			__attribute__nonnull__(pTHX_6)
			__attribute__nonnull__(pTHX_7);
#define PERL_ARGS_ASSERT_TRANSLATE_SUBSTR_OFFSETS	\
	assert(posp); assert(lenp)
d5043 1
a5043 3
#endif
#if defined(PERL_IN_MRO_C)
STATIC void	S_mro_clean_isarev(pTHX_ HV * const isa, const char * const name, const STRLEN len, HV * const exceptions, U32 flags)
d5046 2
a5047 2
#define PERL_ARGS_ASSERT_MRO_CLEAN_ISAREV	\
	assert(isa); assert(name)
d5049 1
a5049 1
STATIC void	S_mro_gather_and_rename(pTHX_ HV * const stashes, HV * const seen_stashes, HV *stash, HV *oldstash, SV *namesv)
d5051 3
a5053 4
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_MRO_GATHER_AND_RENAME	\
	assert(stashes); assert(seen_stashes); assert(namesv)
d5055 2
a5056 12
STATIC AV*	S_mro_get_linear_isa_dfs(pTHX_ HV* stash, U32 level)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA_DFS	\
	assert(stash)

#endif
#if defined(PERL_IN_NUMERIC_C)
STATIC NV	S_mulexp10(NV value, I32 exponent);
#endif
#if defined(PERL_IN_OP_C)
PERL_STATIC_INLINE bool	S_aassign_common_vars(pTHX_ OP* o);
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs, bool for_my)
d5059 8
a5066 2
#define PERL_ARGS_ASSERT_APPLY_ATTRS	\
	assert(stash); assert(target)
d5068 5
a5072 6
STATIC void	S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_APPLY_ATTRS_MY	\
	assert(stash); assert(target); assert(imopsp)
d5074 5
a5078 6
STATIC void	S_bad_type_pv(pTHX_ I32 n, const char *t, const char *name, U32 flags, const OP *kid)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_BAD_TYPE_PV	\
	assert(t); assert(name); assert(kid)
d5080 6
a5085 6
STATIC void	S_bad_type_sv(pTHX_ I32 n, const char *t, SV *namesv, U32 flags, const OP *kid)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_BAD_TYPE_SV	\
	assert(t); assert(namesv); assert(kid)
d5087 1
a5087 4
STATIC void	S_cop_free(pTHX_ COP *cop)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_COP_FREE	\
	assert(cop)
d5089 3
a5091 4
STATIC OP *	S_dup_attrlist(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DUP_ATTRLIST	\
	assert(o)
d5093 8
a5100 4
STATIC void	S_finalize_op(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FINALIZE_OP	\
	assert(o)
d5102 2
a5103 1
STATIC void	S_find_and_forget_pmops(pTHX_ OP *o)
d5105 2
a5106 2
#define PERL_ARGS_ASSERT_FIND_AND_FORGET_PMOPS	\
	assert(o)
d5108 2
a5109 4
STATIC OP*	S_fold_constants(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FOLD_CONSTANTS	\
	assert(o)
d5111 2
a5112 6
STATIC OP*	S_force_list(pTHX_ OP* arg);
STATIC OP*	S_gen_constant_list(pTHX_ OP* o);
STATIC SV*	S_gv_ename(pTHX_ GV *gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_ENAME	\
	assert(gv)
d5114 2
a5115 4
STATIC void	S_inplace_aassign(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INPLACE_AASSIGN	\
	assert(o)
d5117 1
a5117 1
STATIC bool	S_is_handle_constructor(const OP *o, I32 numargs)
d5119 3
a5121 3
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_IS_HANDLE_CONSTRUCTOR	\
	assert(o)
d5123 1
a5123 1
STATIC I32	S_is_list_assignment(pTHX_ const OP *o)
d5126 2
a5127 2
STATIC OP*	S_listkids(pTHX_ OP* o);
STATIC bool	S_looks_like_bool(pTHX_ const OP* o)
d5129 2
a5130 2
#define PERL_ARGS_ASSERT_LOOKS_LIKE_BOOL	\
	assert(o)
d5132 1
a5132 7
STATIC OP*	S_modkids(pTHX_ OP *o, I32 type);
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MY_KID	\
	assert(imopsp)

STATIC OP*	S_newDEFSVOP(pTHX)
d5135 1
a5135 1
STATIC OP*	S_newGIVWHENOP(pTHX_ OP* cond, OP *block, I32 enter_opcode, I32 leave_opcode, PADOFFSET entertarg)
d5137 2
a5138 2
#define PERL_ARGS_ASSERT_NEWGIVWHENOP	\
	assert(block)
d5140 2
a5141 1
STATIC OP*	S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp)
d5143 3
a5145 4
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_NEW_LOGOP	\
	assert(firstp); assert(otherp)
d5147 3
a5149 1
STATIC void	S_no_bareword_allowed(pTHX_ OP *o)
d5151 9
a5159 2
#define PERL_ARGS_ASSERT_NO_BAREWORD_ALLOWED	\
	assert(o)
d5161 1
a5161 1
STATIC OP*	S_no_fh_allowed(pTHX_ OP *o)
d5163 3
a5165 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NO_FH_ALLOWED	\
	assert(o)
d5167 2
a5168 1
PERL_STATIC_INLINE OP*	S_op_integerize(pTHX_ OP *o)
d5170 2
a5171 2
#define PERL_ARGS_ASSERT_OP_INTEGERIZE	\
	assert(o)
d5173 6
a5178 4
PERL_STATIC_INLINE OP*	S_op_std_init(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OP_STD_INIT	\
	assert(o)
d5180 1
a5180 1
STATIC OP*	S_opt_scalarhv(pTHX_ OP* rep_op)
d5182 2
a5183 2
#define PERL_ARGS_ASSERT_OPT_SCALARHV	\
	assert(rep_op)
d5185 2
a5186 6
STATIC OP*	S_pmtrans(pTHX_ OP* o, OP* expr, OP* repl)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_PMTRANS	\
	assert(o); assert(expr); assert(repl)
d5188 2
a5189 1
STATIC void	S_process_special_blocks(pTHX_ const char *const fullname, GV *const gv, CV *const cv)
d5193 2
a5194 2
#define PERL_ARGS_ASSERT_PROCESS_SPECIAL_BLOCKS	\
	assert(fullname); assert(gv); assert(cv)
d5196 1
a5196 13
STATIC OP*	S_ref_array_or_hash(pTHX_ OP* cond);
STATIC OP*	S_refkids(pTHX_ OP* o, I32 type);
STATIC bool	S_scalar_mod_type(const OP *o, I32 type)
			__attribute__warn_unused_result__;

STATIC OP*	S_scalarboolean(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SCALARBOOLEAN	\
	assert(o)

STATIC OP*	S_scalarkids(pTHX_ OP* o);
STATIC OP*	S_scalarseq(pTHX_ OP* o);
STATIC OP*	S_search_const(pTHX_ OP *o)
d5199 2
a5200 2
#define PERL_ARGS_ASSERT_SEARCH_CONST	\
	assert(o)
d5202 1
a5202 4
STATIC void	S_simplify_sort(pTHX_ OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SIMPLIFY_SORT	\
	assert(o)
d5204 2
a5205 2
STATIC OP*	S_too_few_arguments_pv(pTHX_ OP *o, const char* name, U32 flags)
			__attribute__warn_unused_result__
d5208 2
a5209 2
#define PERL_ARGS_ASSERT_TOO_FEW_ARGUMENTS_PV	\
	assert(o); assert(name)
d5211 1
a5211 2
STATIC OP*	S_too_few_arguments_sv(pTHX_ OP *o, SV* namesv, U32 flags)
			__attribute__warn_unused_result__
d5214 2
a5215 2
#define PERL_ARGS_ASSERT_TOO_FEW_ARGUMENTS_SV	\
	assert(o); assert(namesv)
d5217 1
a5217 1
STATIC OP*	S_too_many_arguments_pv(pTHX_ OP *o, const char* name, U32 flags)
d5220 2
a5221 2
#define PERL_ARGS_ASSERT_TOO_MANY_ARGUMENTS_PV	\
	assert(o); assert(name)
d5223 1
a5223 2
STATIC OP*	S_too_many_arguments_sv(pTHX_ OP *o, SV* namesv, U32 flags)
			__attribute__warn_unused_result__
d5226 2
a5227 2
#define PERL_ARGS_ASSERT_TOO_MANY_ARGUMENTS_SV	\
	assert(o); assert(namesv)
d5229 5
a5233 5
#  if defined(USE_ITHREADS)
STATIC void	S_forget_pmop(pTHX_ PMOP *const o, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
	assert(o)
d5235 1
a5235 4
#  endif
#endif
#if defined(PERL_IN_OP_C) || defined(PERL_IN_SV_C)
PERL_CALLCONV void	Perl_report_redefined_cv(pTHX_ const SV *name, const CV *old_cv, SV * const *new_const_svp)
d5238 2
a5239 2
#define PERL_ARGS_ASSERT_REPORT_REDEFINED_CV	\
	assert(name); assert(old_cv)
d5241 5
a5245 6
#endif
#if defined(PERL_IN_PAD_C)
STATIC PADOFFSET	S_pad_alloc_name(pTHX_ SV *namesv, U32 flags, HV *typestash, HV *ourstash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PAD_ALLOC_NAME	\
	assert(namesv)
d5247 5
a5251 4
STATIC void	S_pad_check_dup(pTHX_ SV *name, U32 flags, const HV *ourstash)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PAD_CHECK_DUP	\
	assert(name)
d5253 1
a5253 1
STATIC PADOFFSET	S_pad_findlex(pTHX_ const char *namepv, STRLEN namelen, U32 flags, const CV* cv, U32 seq, int warn, SV** out_capture, SV** out_name_sv, int *out_flags)
d5255 8
a5262 5
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_8)
			__attribute__nonnull__(pTHX_9);
#define PERL_ARGS_ASSERT_PAD_FINDLEX	\
	assert(namepv); assert(cv); assert(out_name_sv); assert(out_flags)
a5263 1
STATIC void	S_pad_reset(pTHX);
d5265 12
a5276 2
#if defined(PERL_IN_PERL_C)
STATIC void	S_find_beginning(pTHX_ SV* linestr_sv, PerlIO *rsfp)
d5279 2
a5280 2
#define PERL_ARGS_ASSERT_FIND_BEGINNING	\
	assert(linestr_sv); assert(rsfp)
d5282 2
a5283 2
STATIC void	S_forbid_setid(pTHX_ const char flag, const bool suidscript);
STATIC void	S_incpush(pTHX_ const char *const dir, STRLEN len, U32 flags)
d5285 11
a5295 2
#define PERL_ARGS_ASSERT_INCPUSH	\
	assert(dir)
d5297 1
a5297 1
STATIC void	S_incpush_use_sep(pTHX_ const char *p, STRLEN len, U32 flags)
d5299 2
a5300 2
#define PERL_ARGS_ASSERT_INCPUSH_USE_SEP	\
	assert(p)
d5302 2
a5303 5
STATIC void	S_init_ids(pTHX);
STATIC void	S_init_interp(pTHX);
STATIC void	S_init_main_stash(pTHX);
STATIC void	S_init_perllib(pTHX);
STATIC void	S_init_postdump_symbols(pTHX_ int argc, char **argv, char **env)
d5305 2
a5306 2
#define PERL_ARGS_ASSERT_INIT_POSTDUMP_SYMBOLS	\
	assert(argv)
d5308 5
a5312 5
STATIC void	S_init_predump_symbols(pTHX);
STATIC SV*	S_mayberelocate(pTHX_ const char *const dir, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MAYBERELOCATE	\
	assert(dir)
d5314 5
a5318 2
STATIC void	S_minus_v(pTHX)
			__attribute__noreturn__;
d5320 4
a5323 2
STATIC void	S_my_exit_jump(pTHX)
			__attribute__noreturn__;
d5325 4
a5328 6
STATIC void	S_nuke_stacks(pTHX);
STATIC PerlIO *	S_open_script(pTHX_ const char *scriptname, bool dosearch, bool *suidscript)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_OPEN_SCRIPT	\
	assert(scriptname); assert(suidscript)
d5330 4
a5333 3
STATIC void*	S_parse_body(pTHX_ char **env, XSINIT_t xsinit);
STATIC void	S_run_body(pTHX_ I32 oldscope)
			__attribute__noreturn__;
d5335 1
a5335 6
STATIC void	S_usage(pTHX)
			__attribute__noreturn__;

#endif
#if defined(PERL_IN_PP_C)
STATIC void	S_do_chomp(pTHX_ SV *retval, SV *sv, bool chomping)
d5338 2
a5339 2
#define PERL_ARGS_ASSERT_DO_CHOMP	\
	assert(retval); assert(sv)
d5341 1
a5341 3
STATIC OP*	S_do_delete_local(pTHX);
STATIC SV*	S_refto(pTHX_ SV* sv)
			__attribute__warn_unused_result__
d5343 2
a5344 2
#define PERL_ARGS_ASSERT_REFTO	\
	assert(sv)
d5346 1
a5346 4
#endif
#if defined(PERL_IN_PP_C) || defined(PERL_IN_PP_HOT_C)
PERL_CALLCONV GV*	Perl_softref2xv(pTHX_ SV *const sv, const char *const what, const svtype type, SV ***spp)
			__attribute__warn_unused_result__
d5348 3
a5350 4
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SOFTREF2XV	\
	assert(sv); assert(what); assert(spp)
d5352 1
a5352 3
#endif
#if defined(PERL_IN_PP_CTL_C)
STATIC SV **	S_adjust_stack_on_leave(pTHX_ SV **newsp, SV **sp, SV **mark, I32 gimme, U32 flags)
d5356 2
a5357 2
#define PERL_ARGS_ASSERT_ADJUST_STACK_ON_LEAVE	\
	assert(newsp); assert(sp); assert(mark)
d5359 1
a5359 2
STATIC PerlIO *	S_check_type_and_open(pTHX_ SV *name)
			__attribute__warn_unused_result__
d5361 2
a5362 11
#define PERL_ARGS_ASSERT_CHECK_TYPE_AND_OPEN	\
	assert(name)

STATIC void	S_destroy_matcher(pTHX_ PMOP* matcher)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DESTROY_MATCHER	\
	assert(matcher)

STATIC OP*	S_do_smartmatch(pTHX_ HV* seen_this, HV* seen_other, const bool copied);
STATIC OP*	S_docatch(pTHX_ OP *o)
			__attribute__warn_unused_result__;
d5364 1
a5364 3
STATIC bool	S_doeval(pTHX_ int gimme, OP** startop, CV* outside, U32 seq, HV* hh);
STATIC OP*	S_dofindlabel(pTHX_ OP *o, const char *label, STRLEN len, U32 flags, OP **opstack, OP **oplimit)
			__attribute__warn_unused_result__
d5367 3
a5369 4
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_DOFINDLABEL	\
	assert(o); assert(label); assert(opstack); assert(oplimit)
d5371 1
a5371 12
STATIC MAGIC *	S_doparseform(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DOPARSEFORM	\
	assert(sv)

STATIC I32	S_dopoptoeval(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptogiven(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptolabel(pTHX_ const char *label, STRLEN len, U32 flags)
d5373 4
a5376 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DOPOPTOLABEL	\
	assert(label)
d5378 1
a5378 5
STATIC I32	S_dopoptoloop(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC I32	S_dopoptosub_at(pTHX_ const PERL_CONTEXT* cxstk, I32 startingblock)
			__attribute__warn_unused_result__
d5380 2
a5381 2
#define PERL_ARGS_ASSERT_DOPOPTOSUB_AT	\
	assert(cxstk)
d5383 1
a5383 5
STATIC I32	S_dopoptowhen(pTHX_ I32 startingblock)
			__attribute__warn_unused_result__;

STATIC PMOP*	S_make_matcher(pTHX_ REGEXP* re)
			__attribute__warn_unused_result__
d5385 2
a5386 2
#define PERL_ARGS_ASSERT_MAKE_MATCHER	\
	assert(re)
d5388 1
a5388 2
STATIC bool	S_matcher_matches_sv(pTHX_ PMOP* matcher, SV* sv)
			__attribute__warn_unused_result__
d5390 4
a5393 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MATCHER_MATCHES_SV	\
	assert(matcher); assert(sv)
d5395 5
a5399 2
STATIC bool	S_num_overflow(NV value, I32 fldsize, I32 frcsize)
			__attribute__warn_unused_result__;
d5401 1
a5401 1
STATIC bool	S_path_is_absolute(const char *name)
d5404 2
a5405 2
#define PERL_ARGS_ASSERT_PATH_IS_ABSOLUTE	\
	assert(name)
d5407 5
a5411 5
STATIC I32	S_run_user_filter(pTHX_ int idx, SV *buf_sv, int maxlen)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_RUN_USER_FILTER	\
	assert(buf_sv)
d5413 5
a5417 4
STATIC void	S_rxres_free(pTHX_ void** rsp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_RXRES_FREE	\
	assert(rsp)
d5419 5
a5423 5
STATIC void	S_rxres_restore(pTHX_ void **rsp, REGEXP *rx)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_RXRES_RESTORE	\
	assert(rsp); assert(rx)
d5425 6
a5430 4
STATIC void	S_save_lines(pTHX_ AV *array, SV *sv)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SAVE_LINES	\
	assert(sv)
d5432 1
a5432 3
#endif
#if defined(PERL_IN_PP_HOT_C)
STATIC void	S_do_oddball(pTHX_ HV *hash, SV **relem, SV **firstrelem)
d5435 5
a5439 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_DO_ODDBALL	\
	assert(hash); assert(relem); assert(firstrelem)
d5441 1
a5441 9
STATIC SV*	S_method_common(pTHX_ SV* meth, U32* hashp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_METHOD_COMMON	\
	assert(meth)

#endif
#if defined(PERL_IN_PP_PACK_C)
STATIC char *	S_bytes_to_uni(const U8 *start, STRLEN len, char *dest)
d5445 2
a5446 2
#define PERL_ARGS_ASSERT_BYTES_TO_UNI	\
	assert(start); assert(dest)
d5448 2
a5449 1
STATIC int	S_div128(pTHX_ SV *pnum, bool *done)
d5452 2
a5453 2
#define PERL_ARGS_ASSERT_DIV128	\
	assert(pnum); assert(done)
d5455 1
a5455 21
STATIC char	S_first_symbol(const char *pat, const char *patend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_FIRST_SYMBOL	\
	assert(pat); assert(patend)

STATIC const char *	S_get_num(pTHX_ const char *patptr, I32 *lenptr)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GET_NUM	\
	assert(patptr); assert(lenptr)

STATIC const char *	S_group_end(pTHX_ const char *patptr, const char *patend, char ender)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GROUP_END	\
	assert(patptr); assert(patend)

STATIC SV*	S_is_an_int(pTHX_ const char *s, STRLEN l)
			__attribute__warn_unused_result__
d5457 2
a5458 2
#define PERL_ARGS_ASSERT_IS_AN_INT	\
	assert(s)
d5460 1
a5460 1
STATIC I32	S_measure_struct(pTHX_ struct tempsym* symptr)
d5462 2
a5463 2
#define PERL_ARGS_ASSERT_MEASURE_STRUCT	\
	assert(symptr)
d5465 8
a5472 4
STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MUL128	\
	assert(sv)
d5474 6
a5479 10
STATIC bool	S_need_utf8(const char *pat, const char *patend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_NEED_UTF8	\
	assert(pat); assert(patend)

STATIC bool	S_next_symbol(pTHX_ struct tempsym* symptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEXT_SYMBOL	\
	assert(symptr)
d5481 3
a5483 1
STATIC SV **	S_pack_rec(pTHX_ SV *cat, struct tempsym* symptr, SV **beglist, SV **endlist)
d5487 3
a5489 3
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_PACK_REC	\
	assert(cat); assert(symptr); assert(beglist); assert(endlist)
d5491 1
a5491 2
STATIC char *	S_sv_exp_grow(pTHX_ SV *sv, STRLEN needed)
			__attribute__warn_unused_result__
d5493 1
a5493 1
#define PERL_ARGS_ASSERT_SV_EXP_GROW	\
d5496 1
a5496 1
STATIC I32	S_unpack_rec(pTHX_ struct tempsym* symptr, const char *s, const char *strbeg, const char *strend, const char **new_s)
d5498 3
a5500 5
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UNPACK_REC	\
	assert(symptr); assert(s); assert(strbeg); assert(strend)
d5502 1
a5502 3
#endif
#if defined(PERL_IN_PP_SORT_C)
STATIC I32	S_amagic_cmp(pTHX_ SV *const str1, SV *const str2)
d5504 3
a5506 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_CMP	\
	assert(str1); assert(str2)
d5508 1
a5508 1
STATIC I32	S_amagic_cmp_locale(pTHX_ SV *const str1, SV *const str2)
d5510 3
a5512 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_CMP_LOCALE	\
	assert(str1); assert(str2)
d5514 1
a5514 1
STATIC I32	S_amagic_i_ncmp(pTHX_ SV *const a, SV *const b)
d5516 1
a5516 11
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_I_NCMP	\
	assert(a); assert(b)

STATIC I32	S_amagic_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_AMAGIC_NCMP	\
	assert(a); assert(b)

STATIC void	S_qsortsvu(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t compare)
d5518 2
a5519 2
#define PERL_ARGS_ASSERT_QSORTSVU	\
	assert(compare)
d5521 2
a5522 5
STATIC I32	S_sortcv(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SORTCV	\
	assert(a); assert(b)
d5524 3
a5526 1
STATIC I32	S_sortcv_stacked(pTHX_ SV *const a, SV *const b)
d5529 2
a5530 2
#define PERL_ARGS_ASSERT_SORTCV_STACKED	\
	assert(a); assert(b)
d5532 2
a5533 1
STATIC I32	S_sortcv_xsub(pTHX_ SV *const a, SV *const b)
d5536 2
a5537 2
#define PERL_ARGS_ASSERT_SORTCV_XSUB	\
	assert(a); assert(b)
d5539 2
a5540 1
STATIC I32	S_sv_i_ncmp(pTHX_ SV *const a, SV *const b)
d5543 2
a5544 2
#define PERL_ARGS_ASSERT_SV_I_NCMP	\
	assert(a); assert(b)
d5546 2
a5547 10
STATIC I32	S_sv_ncmp(pTHX_ SV *const a, SV *const b)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_NCMP	\
	assert(a); assert(b)

#endif
#if defined(PERL_IN_PP_SYS_C)
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop)
			__attribute__nonnull__(pTHX_1)
d5550 2
a5551 2
#define PERL_ARGS_ASSERT_DOFORM	\
	assert(cv); assert(gv); assert(retop)
d5553 2
a5554 1
STATIC SV *	S_space_join_names_mortal(pTHX_ char *const *array)
d5556 18
a5573 2
#define PERL_ARGS_ASSERT_SPACE_JOIN_NAMES_MORTAL	\
	assert(array)
d5576 6
a5581 5
#if defined(PERL_IN_REGCOMP_C)
STATIC void	S__append_range_to_invlist(pTHX_ SV* const invlist, const UV start, const UV end)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__APPEND_RANGE_TO_INVLIST	\
	assert(invlist)
d5583 1
a5583 1
PERL_STATIC_INLINE UV*	S__invlist_array_init(pTHX_ SV* const invlist, const bool will_have_0)
d5585 8
d5594 2
a5595 2
#define PERL_ARGS_ASSERT__INVLIST_ARRAY_INIT	\
	assert(invlist)
d5597 1
a5597 2
STATIC SV*	S__new_invlist_C_array(pTHX_ UV* list)
			__attribute__warn_unused_result__
d5599 2
a5600 2
#define PERL_ARGS_ASSERT__NEW_INVLIST_C_ARRAY	\
	assert(list)
d5602 2
a5603 1
STATIC void	S_add_alternate(pTHX_ AV** alternate_ptr, U8* string, STRLEN len)
d5606 20
a5625 2
#define PERL_ARGS_ASSERT_ADD_ALTERNATE	\
	assert(alternate_ptr); assert(string)
d5627 2
a5628 2
PERL_STATIC_INLINE SV*	S_add_cp_to_invlist(pTHX_ SV* invlist, const UV cp)
			__attribute__warn_unused_result__;
d5630 6
a5635 6
STATIC U32	S_add_data(struct RExC_state_t *pRExC_state, U32 n, const char *s)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_ADD_DATA	\
	assert(pRExC_state); assert(s)
d5637 4
a5640 1
STATIC void	S_checkposixcc(pTHX_ struct RExC_state_t *pRExC_state)
d5642 4
a5645 2
#define PERL_ARGS_ASSERT_CHECKPOSIXCC	\
	assert(pRExC_state)
d5647 5
a5651 5
STATIC void	S_cl_and(struct regnode_charclass_class *cl, const struct regnode_charclass_class *and_with)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_AND	\
	assert(cl); assert(and_with)
d5653 1
a5653 5
STATIC void	S_cl_anything(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_ANYTHING	\
	assert(pRExC_state); assert(cl)
d5655 6
a5660 5
STATIC void	S_cl_init(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CL_INIT	\
	assert(pRExC_state); assert(cl)
d5662 1
a5662 5
STATIC int	S_cl_is_anything(const struct regnode_charclass_class *cl)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_CL_IS_ANYTHING	\
	assert(cl)
d5664 6
a5669 6
STATIC void	S_cl_or(const struct RExC_state_t *pRExC_state, struct regnode_charclass_class *cl, const struct regnode_charclass_class *or_with)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_CL_OR	\
	assert(pRExC_state); assert(cl); assert(or_with)
d5671 1
a5671 5
PERL_STATIC_INLINE UV*	S_get_invlist_iter_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_INVLIST_ITER_ADDR	\
	assert(invlist)
d5673 2
a5674 1
PERL_STATIC_INLINE UV*	S_get_invlist_len_addr(pTHX_ SV* invlist)
d5676 4
a5679 3
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_INVLIST_LEN_ADDR	\
	assert(invlist)
d5681 1
a5681 2
PERL_STATIC_INLINE UV*	S_get_invlist_version_id_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
d5683 2
a5684 2
#define PERL_ARGS_ASSERT_GET_INVLIST_VERSION_ID_ADDR	\
	assert(invlist)
d5686 1
a5686 2
PERL_STATIC_INLINE UV*	S_get_invlist_zero_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
d5688 2
a5689 2
#define PERL_ARGS_ASSERT_GET_INVLIST_ZERO_ADDR	\
	assert(invlist)
d5691 1
a5691 2
PERL_STATIC_INLINE UV*	S_invlist_array(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
d5693 2
a5694 2
#define PERL_ARGS_ASSERT_INVLIST_ARRAY	\
	assert(invlist)
d5696 5
a5700 5
PERL_STATIC_INLINE SV*	S_invlist_clone(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_CLONE	\
	assert(invlist)
d5702 2
a5703 4
STATIC void	S_invlist_extend(pTHX_ SV* const invlist, const UV len)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_EXTEND	\
	assert(invlist)
d5705 2
a5706 1
PERL_STATIC_INLINE void	S_invlist_iterinit(pTHX_ SV* invlist)
d5708 2
a5709 2
#define PERL_ARGS_ASSERT_INVLIST_ITERINIT	\
	assert(invlist)
d5711 4
a5714 10
STATIC bool	S_invlist_iternext(pTHX_ SV* invlist, UV* start, UV* end)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_INVLIST_ITERNEXT	\
	assert(invlist); assert(start); assert(end)

PERL_STATIC_INLINE UV	S_invlist_len(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
d5716 2
a5717 2
#define PERL_ARGS_ASSERT_INVLIST_LEN	\
	assert(invlist)
d5719 2
a5720 2
PERL_STATIC_INLINE UV	S_invlist_max(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
d5722 2
a5723 2
#define PERL_ARGS_ASSERT_INVLIST_MAX	\
	assert(invlist)
d5725 3
a5727 1
STATIC IV	S_invlist_search(pTHX_ SV* const invlist, const UV cp)
d5730 2
a5731 2
#define PERL_ARGS_ASSERT_INVLIST_SEARCH	\
	assert(invlist)
d5733 6
a5738 4
PERL_STATIC_INLINE void	S_invlist_set_len(pTHX_ SV* const invlist, const UV len)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_SET_LEN	\
	assert(invlist)
d5740 5
a5744 4
PERL_STATIC_INLINE void	S_invlist_trim(pTHX_ SV* const invlist)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_TRIM	\
	assert(invlist)
d5746 1
a5746 1
STATIC U32	S_join_exact(pTHX_ struct RExC_state_t *pRExC_state, regnode *scan, UV *min_subtract, bool *has_exactf_sharp_s, U32 flags, regnode *val, U32 depth)
d5751 8
a5758 2
#define PERL_ARGS_ASSERT_JOIN_EXACT	\
	assert(pRExC_state); assert(scan); assert(min_subtract); assert(has_exactf_sharp_s)
d5760 1
a5760 1
STATIC I32	S_make_trie(pTHX_ struct RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
d5763 9
a5771 5
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_MAKE_TRIE	\
	assert(pRExC_state); assert(startbranch); assert(first); assert(last); assert(tail)
d5773 2
a5774 1
STATIC void	S_make_trie_failtable(pTHX_ struct RExC_state_t *pRExC_state, regnode *source, regnode *stclass, U32 depth)
d5778 2
a5779 2
#define PERL_ARGS_ASSERT_MAKE_TRIE_FAILTABLE	\
	assert(pRExC_state); assert(source); assert(stclass)
d5781 4
a5784 1
STATIC char *	S_nextchar(pTHX_ struct RExC_state_t *pRExC_state)
d5786 2
a5787 2
#define PERL_ARGS_ASSERT_NEXTCHAR	\
	assert(pRExC_state)
d5789 1
a5789 2
STATIC void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...)
			__attribute__noreturn__
d5792 2
a5793 2
#define PERL_ARGS_ASSERT_RE_CROAK2	\
	assert(pat1); assert(pat2)
d5795 1
a5795 1
STATIC regnode*	S_reg(pTHX_ struct RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth)
d5797 11
a5807 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REG	\
	assert(pRExC_state); assert(flagp)
d5809 4
a5812 1
STATIC regnode*	S_reg_namedseq(pTHX_ struct RExC_state_t *pRExC_state, UV *valuep, I32 *flagp, U32 depth)
d5814 2
a5815 2
#define PERL_ARGS_ASSERT_REG_NAMEDSEQ	\
	assert(pRExC_state)
d5817 1
a5817 1
STATIC regnode*	S_reg_node(pTHX_ struct RExC_state_t *pRExC_state, U8 op)
d5819 2
a5820 2
#define PERL_ARGS_ASSERT_REG_NODE	\
	assert(pRExC_state)
d5822 4
a5825 4
STATIC UV	S_reg_recode(pTHX_ const char value, SV **encp)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REG_RECODE	\
	assert(encp)
d5827 1
a5827 1
STATIC SV *	S_reg_scan_name(pTHX_ struct RExC_state_t *pRExC_state, U32 flags)
d5829 2
a5830 2
#define PERL_ARGS_ASSERT_REG_SCAN_NAME	\
	assert(pRExC_state)
d5832 3
a5834 1
STATIC bool	S_reg_skipcomment(pTHX_ struct RExC_state_t *pRExC_state)
d5836 2
a5837 2
#define PERL_ARGS_ASSERT_REG_SKIPCOMMENT	\
	assert(pRExC_state)
d5839 2
a5840 1
STATIC regnode*	S_reganode(pTHX_ struct RExC_state_t *pRExC_state, U8 op, U32 arg)
d5842 2
a5843 2
#define PERL_ARGS_ASSERT_REGANODE	\
	assert(pRExC_state)
d5845 2
a5846 13
STATIC regnode*	S_regatom(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGATOM	\
	assert(pRExC_state); assert(flagp)

STATIC regnode*	S_regbranch(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, I32 first, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGBRANCH	\
	assert(pRExC_state); assert(flagp)

STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *pRExC_state, U32 depth)
d5848 2
a5849 2
#define PERL_ARGS_ASSERT_REGCLASS	\
	assert(pRExC_state)
d5851 1
a5851 1
STATIC void	S_reginsert(pTHX_ struct RExC_state_t *pRExC_state, U8 op, regnode *opnd, U32 depth)
d5853 1
d5855 2
a5856 2
#define PERL_ARGS_ASSERT_REGINSERT	\
	assert(pRExC_state); assert(opnd)
d5858 5
a5862 5
STATIC regnode*	S_regpiece(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGPIECE	\
	assert(pRExC_state); assert(flagp)
d5864 2
a5865 1
STATIC I32	S_regpposixcc(pTHX_ struct RExC_state_t *pRExC_state, I32 value)
d5867 2
a5868 2
#define PERL_ARGS_ASSERT_REGPPOSIXCC	\
	assert(pRExC_state)
d5870 5
a5874 6
STATIC void	S_regtail(pTHX_ struct RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGTAIL	\
	assert(pRExC_state); assert(p); assert(val)
d5876 5
a5880 5
STATIC STRLEN	S_reguni(pTHX_ const struct RExC_state_t *pRExC_state, UV uv, char *s)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGUNI	\
	assert(pRExC_state); assert(s)
d5882 1
a5882 1
STATIC char *	S_regwhite(struct RExC_state_t *pRExC_state, char *p)
d5884 3
a5886 4
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_REGWHITE	\
	assert(pRExC_state); assert(p)
d5888 1
a5888 1
STATIC void	S_scan_commit(pTHX_ const struct RExC_state_t *pRExC_state, struct scan_data_t *data, I32 *minlenp, int is_inf)
d5891 10
a5900 3
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SCAN_COMMIT	\
	assert(pRExC_state); assert(data); assert(minlenp)
d5902 5
a5906 7
PERL_STATIC_INLINE U8	S_set_regclass_bit(pTHX_ struct RExC_state_t* pRExC_state, regnode* node, const U8 value, SV** invlist_ptr, AV** alternate_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SET_REGCLASS_BIT	\
	assert(pRExC_state); assert(node); assert(invlist_ptr); assert(alternate_ptr)
d5908 5
a5912 7
STATIC U8	S_set_regclass_bit_fold(pTHX_ struct RExC_state_t *pRExC_state, regnode* node, const U8 value, SV** invlist_ptr, AV** alternate_ptr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SET_REGCLASS_BIT_FOLD	\
	assert(pRExC_state); assert(node); assert(invlist_ptr); assert(alternate_ptr)
d5914 4
a5917 8
STATIC I32	S_study_chunk(pTHX_ struct RExC_state_t *pRExC_state, regnode **scanp, I32 *minlenp, I32 *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U8* recursed, struct regnode_charclass_class *and_withp, U32 flags, U32 depth)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_STUDY_CHUNK	\
	assert(pRExC_state); assert(scanp); assert(minlenp); assert(deltap); assert(last)
d5920 1
a5920 2
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C)
PERL_CALLCONV SV*	Perl__core_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none, bool return_if_undef, SV* invlist, bool passed_in_invlist_has_user_defined_property)
d5924 2
a5925 2
#define PERL_ARGS_ASSERT__CORE_SWASH_INIT	\
	assert(pkg); assert(name); assert(listsv)
d5927 1
a5927 2
PERL_CALLCONV SV*	Perl__invlist_contents(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
d5929 2
a5930 2
#define PERL_ARGS_ASSERT__INVLIST_CONTENTS	\
	assert(invlist)
d5932 4
a5935 4
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_UTF8_C)
PERL_CALLCONV SV*	Perl__add_range_to_invlist(pTHX_ SV* invlist, const UV start, const UV end)
			__attribute__warn_unused_result__;
d5937 4
a5940 4
/* PERL_CALLCONV void	_invlist_intersection(pTHX_ SV* const a, SV* const b, SV** i)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */
d5942 4
a5945 5
PERL_CALLCONV void	Perl__invlist_intersection_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, bool complement_b, SV** i)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT__INVLIST_INTERSECTION_MAYBE_COMPLEMENT_2ND	\
	assert(b); assert(i)
d5947 1
a5947 1
PERL_CALLCONV void	Perl__invlist_invert(pTHX_ SV* const invlist)
d5949 2
a5950 2
#define PERL_ARGS_ASSERT__INVLIST_INVERT	\
	assert(invlist)
d5952 4
a5955 4
PERL_CALLCONV void	Perl__invlist_invert_prop(pTHX_ SV* const invlist)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__INVLIST_INVERT_PROP	\
	assert(invlist)
d5957 2
a5958 5
PERL_CALLCONV void	Perl__invlist_populate_swatch(pTHX_ SV* const invlist, const UV start, const UV end, U8* swatch)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT__INVLIST_POPULATE_SWATCH	\
	assert(invlist); assert(swatch)
d5960 4
a5963 4
/* PERL_CALLCONV void	_invlist_subtract(pTHX_ SV* const a, SV* const b, SV** result)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */
d5965 2
a5966 3
/* PERL_CALLCONV void	_invlist_union(pTHX_ SV* const a, SV* const b, SV** output)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3); */
d5968 2
a5969 5
PERL_CALLCONV void	Perl__invlist_union_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, bool complement_b, SV** output)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT__INVLIST_UNION_MAYBE_COMPLEMENT_2ND	\
	assert(b); assert(output)
d5971 1
a5971 1
PERL_CALLCONV SV*	Perl__new_invlist(pTHX_ IV initial_size)
d5974 1
a5974 1
PERL_CALLCONV HV*	Perl__swash_inversion_hash(pTHX_ SV* const swash)
d5977 2
a5978 2
#define PERL_ARGS_ASSERT__SWASH_INVERSION_HASH	\
	assert(swash)
d5980 1
a5980 1
PERL_CALLCONV SV*	Perl__swash_to_invlist(pTHX_ SV* const swash)
d5983 2
a5984 2
#define PERL_ARGS_ASSERT__SWASH_TO_INVLIST	\
	assert(swash)
d5986 1
a5986 3
#endif
#if defined(PERL_IN_REGEXEC_C)
STATIC SV*	S_core_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **altsvp)
d5989 2
a5990 2
#define PERL_ARGS_ASSERT_CORE_REGCLASS_SWASH	\
	assert(node)
d5992 1
a5992 4
STATIC char*	S_find_byclass(pTHX_ regexp * prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
d5994 3
a5996 3
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_FIND_BYCLASS	\
	assert(prog); assert(c); assert(s); assert(strend)
d5998 5
a6002 8
STATIC I32	S_reg_check_named_buff_matched(pTHX_ const regexp *rex, const regnode *scan)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REG_CHECK_NAMED_BUFF_MATCHED	\
	assert(rex); assert(scan)

STATIC char*	S_regcppop(pTHX_ const regexp *rex)
d6004 2
a6005 2
#define PERL_ARGS_ASSERT_REGCPPOP	\
	assert(rex)
d6007 6
a6012 7
STATIC CHECKPOINT	S_regcppush(pTHX_ I32 parenfloor);
STATIC U8*	S_reghop3(U8 *s, I32 off, const U8 *lim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_REGHOP3	\
	assert(s); assert(lim)
d6014 5
a6018 6
STATIC U8*	S_reghopmaybe3(U8 *s, I32 off, const U8 *lim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_REGHOPMAYBE3	\
	assert(s); assert(lim)
d6020 2
a6021 6
STATIC bool	S_reginclass(pTHX_ const regexp * const prog, const regnode * const n, const U8 * const p, STRLEN *lenp, bool const do_utf8sv_is_utf8)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_REGINCLASS	\
	assert(n); assert(p)
d6023 2
a6024 2
STATIC I32	S_regmatch(pTHX_ regmatch_info *reginfo, regnode *prog)
			__attribute__warn_unused_result__
d6027 2
a6028 2
#define PERL_ARGS_ASSERT_REGMATCH	\
	assert(reginfo); assert(prog)
d6030 4
a6033 6
STATIC I32	S_regrepeat(pTHX_ const regexp *prog, const regnode *p, I32 max, int depth)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGREPEAT	\
	assert(prog); assert(p)
d6035 1
a6035 6
STATIC I32	S_regtry(pTHX_ regmatch_info *reginfo, char **startpos)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_REGTRY	\
	assert(reginfo); assert(startpos)
d6037 3
a6039 1
STATIC void	S_to_byte_substr(pTHX_ regexp * prog)
d6041 5
a6045 2
#define PERL_ARGS_ASSERT_TO_BYTE_SUBSTR	\
	assert(prog)
d6047 2
a6048 1
STATIC void	S_to_utf8_substr(pTHX_ regexp * prog)
d6050 8
a6057 2
#define PERL_ARGS_ASSERT_TO_UTF8_SUBSTR	\
	assert(prog)
d6059 7
a6065 8
#  if defined(XXX_dmq)
STATIC U8*	S_reghop4(U8 *s, I32 off, const U8 *llim, const U8 *rlim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
#define PERL_ARGS_ASSERT_REGHOP4	\
	assert(s); assert(llim); assert(rlim)
a6066 1
#  endif
d6068 1
a6068 6
#if defined(PERL_IN_SCOPE_C)
STATIC void	S_save_pushptri32ptr(pTHX_ void *const ptr1, const I32 i, void *const ptr2, const int type);
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr, const U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_SCALAR_AT	\
	assert(sptr)
d6070 2
a6072 6
#if defined(PERL_IN_SV_C)
STATIC char *	S_F0convert(NV nv, char *const endbuf, STRLEN *const len)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3);
#define PERL_ARGS_ASSERT_F0CONVERT	\
	assert(endbuf); assert(len)
d6074 6
a6079 5
STATIC void	S_anonymise_cv_maybe(pTHX_ GV *gv, CV *cv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_ANONYMISE_CV_MAYBE	\
	assert(gv); assert(cv)
d6081 2
a6082 1
STATIC void	S_assert_uft8_cache_coherent(pTHX_ const char *const func, STRLEN from_cache, STRLEN real, SV *const sv)
d6084 4
a6087 8
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_ASSERT_UFT8_CACHE_COHERENT	\
	assert(func); assert(sv)

STATIC bool	S_curse(pTHX_ SV * const sv, const bool check_refcnt)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CURSE	\
	assert(sv)
d6089 1
a6089 1
STATIC I32	S_expect_number(pTHX_ char **const pattern)
d6092 2
a6093 2
#define PERL_ARGS_ASSERT_EXPECT_NUMBER	\
	assert(pattern)
d6095 1
a6095 4
STATIC I32	S_find_array_subscript(pTHX_ const AV *const av, const SV *const val)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_FIND_ARRAY_SUBSCRIPT	\
	assert(val)
d6097 1
a6097 4
STATIC SV *	S_find_hash_subscript(pTHX_ const HV *const hv, const SV *const val)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_FIND_HASH_SUBSCRIPT	\
	assert(val)
d6099 1
a6099 2
STATIC SV*	S_find_uninit_var(pTHX_ const OP *const obase, const SV *const uninit_sv, bool top);
STATIC bool	S_glob_2number(pTHX_ GV* const gv)
d6101 2
a6102 2
#define PERL_ARGS_ASSERT_GLOB_2NUMBER	\
	assert(gv)
d6104 1
a6104 1
STATIC void	S_glob_assign_glob(pTHX_ SV *const dstr, SV *const sstr, const int dtype)
d6107 1
a6107 1
#define PERL_ARGS_ASSERT_GLOB_ASSIGN_GLOB	\
d6110 1
a6110 8
STATIC void	S_glob_assign_ref(pTHX_ SV *const dstr, SV *const sstr)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GLOB_ASSIGN_REF	\
	assert(dstr); assert(sstr)

STATIC SV *	S_more_sv(pTHX);
STATIC void	S_not_a_number(pTHX_ SV *const sv)
d6112 2
a6113 2
#define PERL_ARGS_ASSERT_NOT_A_NUMBER	\
	assert(sv)
d6115 2
a6116 5
STATIC PTR_TBL_ENT_t *	S_ptr_table_find(PTR_TBL_t *const tbl, const void *const sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PTR_TABLE_FIND	\
	assert(tbl)
d6118 1
a6118 1
STATIC bool	S_sv_2iuv_common(pTHX_ SV *const sv)
d6120 1
a6120 1
#define PERL_ARGS_ASSERT_SV_2IUV_COMMON	\
d6123 1
a6123 1
STATIC void	S_sv_add_arena(pTHX_ char *const ptr, const U32 size, const U32 flags)
d6125 2
a6126 2
#define PERL_ARGS_ASSERT_SV_ADD_ARENA	\
	assert(ptr)
d6128 1
a6128 1
STATIC STRLEN	S_sv_pos_b2u_midway(pTHX_ const U8 *const s, const U8 *const target, const U8 *end, STRLEN endu)
d6130 3
a6132 4
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SV_POS_B2U_MIDWAY	\
	assert(s); assert(target); assert(end)
d6134 1
a6134 1
STATIC STRLEN	S_sv_pos_u2b_cached(pTHX_ SV *const sv, MAGIC **const mgp, const U8 *const start, const U8 *const send, STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0)
d6136 3
a6138 5
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_POS_U2B_CACHED	\
	assert(sv); assert(mgp); assert(start); assert(send)
d6140 7
a6146 7
STATIC STRLEN	S_sv_pos_u2b_forwards(const U8 *const start, const U8 *const send, STRLEN *const uoffset, bool *const at_end)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
#define PERL_ARGS_ASSERT_SV_POS_U2B_FORWARDS	\
	assert(start); assert(send); assert(uoffset); assert(at_end)
d6148 1
a6148 5
STATIC STRLEN	S_sv_pos_u2b_midway(const U8 *const start, const U8 *send, STRLEN uoffset, const STRLEN uend)
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_SV_POS_U2B_MIDWAY	\
	assert(start); assert(send)
d6150 1
a6150 4
PERL_STATIC_INLINE void	S_sv_unglob(pTHX_ SV *const sv, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_UNGLOB	\
	assert(sv)
d6152 15
a6166 6
STATIC char *	S_uiv_2buf(char *const buf, const IV iv, UV uv, const int is_uv, char **const peob)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(5);
#define PERL_ARGS_ASSERT_UIV_2BUF	\
	assert(buf); assert(peob)
d6168 1
a6168 2
STATIC void	S_utf8_mg_len_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN ulen)
			__attribute__nonnull__(pTHX_1)
d6170 2
a6171 2
#define PERL_ARGS_ASSERT_UTF8_MG_LEN_CACHE_UPDATE	\
	assert(sv); assert(mgp)
d6173 1
a6173 2
STATIC void	S_utf8_mg_pos_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN byte, const STRLEN utf8, const STRLEN blen)
			__attribute__nonnull__(pTHX_1)
d6175 14
a6188 2
#define PERL_ARGS_ASSERT_UTF8_MG_POS_CACHE_UPDATE	\
	assert(sv); assert(mgp)
d6190 2
a6191 4
STATIC I32	S_visit(pTHX_ SVFUNC_t f, const U32 flags, const U32 mask)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VISIT	\
	assert(f)
d6193 2
a6194 7
#  if defined(PERL_OLD_COPY_ON_WRITE)
STATIC void	S_sv_release_COW(pTHX_ SV *sv, const char *pvx, SV *after)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SV_RELEASE_COW	\
	assert(sv); assert(pvx); assert(after)
d6196 2
a6197 8
#  endif
#  if defined(USE_ITHREADS)
STATIC SV*	S_sv_dup_common(pTHX_ const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_DUP_COMMON	\
	assert(sstr); assert(param)
d6199 1
a6199 6
STATIC SV **	S_sv_dup_inc_multiple(pTHX_ SV *const *source, SV **dest, SSize_t items, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_SV_DUP_INC_MULTIPLE	\
	assert(source); assert(dest); assert(param)
d6201 3
a6203 1
STATIC void	S_unreferenced_to_tmp_stack(pTHX_ AV *const unreferenced)
d6205 2
a6206 2
#define PERL_ARGS_ASSERT_UNREFERENCED_TO_TMP_STACK	\
	assert(unreferenced)
a6207 1
#  endif
d6209 3
a6211 2
#if defined(PERL_IN_SV_C) || defined (PERL_IN_OP_C)
PERL_CALLCONV SV *	Perl_varname(pTHX_ const GV *const gv, const char gvtype, PADOFFSET targ, const SV *const keyname, I32 aindex, int subscript_type)
d6214 1
a6214 14
#endif
#if defined(PERL_IN_TOKE_C)
STATIC int	S_ao(pTHX_ int toketype);
STATIC void	S_check_uni(pTHX);
STATIC void	S_checkcomma(pTHX_ const char *s, const char *name, const char *what)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_CHECKCOMMA	\
	assert(s); assert(name); assert(what)

STATIC int	S_deprecate_commaless_var_list(pTHX);
STATIC char *	S_filter_gets(pTHX_ SV *sv, STRLEN append)
			__attribute__warn_unused_result__
d6216 2
a6217 2
#define PERL_ARGS_ASSERT_FILTER_GETS	\
	assert(sv)
d6219 1
a6219 2
STATIC HV *	S_find_in_my_stash(pTHX_ const char *pkgname, STRLEN len)
			__attribute__warn_unused_result__
d6221 2
a6222 2
#define PERL_ARGS_ASSERT_FIND_IN_MY_STASH	\
	assert(pkgname)
d6224 1
a6224 1
STATIC void	S_force_ident(pTHX_ const char *s, int kind)
d6226 2
a6227 2
#define PERL_ARGS_ASSERT_FORCE_IDENT	\
	assert(s)
d6229 2
a6230 2
STATIC void	S_force_next(pTHX_ I32 type);
STATIC char*	S_force_strict_version(pTHX_ char *s)
d6232 2
a6233 2
#define PERL_ARGS_ASSERT_FORCE_STRICT_VERSION	\
	assert(s)
d6235 6
a6240 4
STATIC char*	S_force_version(pTHX_ char *s, int guessing)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORCE_VERSION	\
	assert(s)
d6242 7
a6248 4
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack, int allow_tick)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORCE_WORD	\
	assert(start)
d6250 6
a6255 4
STATIC void	S_incline(pTHX_ const char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INCLINE	\
	assert(s)
a6256 4
STATIC int	S_intuit_method(pTHX_ char *s, GV *gv, CV *cv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INTUIT_METHOD	\
	assert(s)
d6258 1
a6258 1
STATIC int	S_intuit_more(pTHX_ char *s)
d6260 2
a6261 2
#define PERL_ARGS_ASSERT_INTUIT_MORE	\
	assert(s)
d6263 2
a6264 4
STATIC I32	S_lop(pTHX_ I32 f, int x, char *s)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_LOP	\
	assert(s)
a6265 2
STATIC void	S_missingterm(pTHX_ char *s)
			__attribute__noreturn__;
d6267 8
a6274 5
STATIC SV*	S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, STRLEN keylen, SV *sv, SV *pv, const char *type, STRLEN typelen)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_NEW_CONSTANT	\
	assert(key); assert(sv)
d6276 1
a6276 1
STATIC void	S_no_op(pTHX_ const char *const what, char *s)
d6278 14
a6291 2
#define PERL_ARGS_ASSERT_NO_OP	\
	assert(what)
d6293 3
a6295 2
STATIC void	S_readpipe_override(pTHX);
STATIC char*	S_scan_const(pTHX_ char *start)
d6298 2
a6299 2
#define PERL_ARGS_ASSERT_SCAN_CONST	\
	assert(start)
d6301 2
a6302 2
STATIC char*	S_scan_formline(pTHX_ char *s)
			__attribute__warn_unused_result__
d6304 2
a6305 2
#define PERL_ARGS_ASSERT_SCAN_FORMLINE	\
	assert(s)
d6307 2
a6308 2
STATIC char*	S_scan_heredoc(pTHX_ char *s)
			__attribute__warn_unused_result__
d6310 2
a6311 2
#define PERL_ARGS_ASSERT_SCAN_HEREDOC	\
	assert(s)
d6313 1
a6313 6
STATIC char*	S_scan_ident(pTHX_ char *s, const char *send, char *dest, STRLEN destlen, I32 ck_uni)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SCAN_IDENT	\
	assert(s); assert(send); assert(dest)
d6315 1
a6315 1
STATIC char*	S_scan_inputsymbol(pTHX_ char *start)
d6318 2
a6319 2
#define PERL_ARGS_ASSERT_SCAN_INPUTSYMBOL	\
	assert(start)
d6321 1
a6321 1
STATIC char*	S_scan_pat(pTHX_ char *start, I32 type)
d6324 2
a6325 2
#define PERL_ARGS_ASSERT_SCAN_PAT	\
	assert(start)
d6327 1
a6327 1
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims)
d6330 2
a6331 2
#define PERL_ARGS_ASSERT_SCAN_STR	\
	assert(start)
d6333 1
a6333 2
STATIC char*	S_scan_subst(pTHX_ char *start)
			__attribute__warn_unused_result__
d6335 2
a6336 2
#define PERL_ARGS_ASSERT_SCAN_SUBST	\
	assert(start)
d6338 1
a6338 2
STATIC char*	S_scan_trans(pTHX_ char *start)
			__attribute__warn_unused_result__
d6340 2
a6341 2
#define PERL_ARGS_ASSERT_SCAN_TRANS	\
	assert(start)
d6343 4
a6346 6
STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_SCAN_WORD	\
	assert(s); assert(dest); assert(slp)
d6348 1
a6348 2
STATIC char*	S_skipspace(pTHX_ char *s)
			__attribute__warn_unused_result__
d6350 2
a6351 2
#define PERL_ARGS_ASSERT_SKIPSPACE	\
	assert(s)
d6353 5
a6357 2
STATIC I32	S_sublex_done(pTHX)
			__attribute__warn_unused_result__;
d6359 5
a6363 2
STATIC I32	S_sublex_push(pTHX)
			__attribute__warn_unused_result__;
d6365 1
a6365 4
STATIC I32	S_sublex_start(pTHX)
			__attribute__warn_unused_result__;

STATIC char*	S_swallow_bom(pTHX_ U8 *s)
d6368 2
a6369 2
#define PERL_ARGS_ASSERT_SWALLOW_BOM	\
	assert(s)
d6371 1
a6371 1
STATIC char *	S_tokenize_use(pTHX_ int is_use, char *s)
d6373 3
a6375 3
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_TOKENIZE_USE	\
	assert(s)
d6377 1
a6377 1
STATIC SV*	S_tokeq(pTHX_ SV *sv)
d6379 9
a6387 2
#define PERL_ARGS_ASSERT_TOKEQ	\
	assert(sv)
a6388 5
STATIC void	S_update_debugger_info(pTHX_ SV *orig_sv, const char *const buf, STRLEN len);
STATIC int	S_yywarn(pTHX_ const char *const s, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_YYWARN	\
	assert(s)
d6390 5
a6394 6
#  if defined(PERL_MAD)
STATIC void	S_curmad(pTHX_ char slot, SV *sv);
STATIC char*	S_skipspace0(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE0	\
	assert(s)
d6396 4
a6399 4
STATIC char*	S_skipspace1(pTHX_ char *s)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE1	\
	assert(s)
d6401 2
a6402 4
STATIC char*	S_skipspace2(pTHX_ char *s, SV **sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SKIPSPACE2	\
	assert(s)
d6404 35
a6438 2
STATIC void	S_start_force(pTHX_ int where);
#  endif
a6439 6
#if defined(PERL_IN_UNIVERSAL_C)
STATIC bool	S_isa_lookup(pTHX_ HV *stash, const char * const name, STRLEN len, U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_ISA_LOOKUP	\
	assert(stash); assert(name)
d6441 35
a6476 8
#if defined(PERL_IN_UTF8_C)
STATIC UV	S_check_locale_boundary_crossing(pTHX_ const U8* const p, const UV result, U8* const ustrp, STRLEN *lenp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_CHECK_LOCALE_BOUNDARY_CROSSING	\
	assert(p); assert(ustrp); assert(lenp)
d6478 1
a6478 2
STATIC STRLEN	S_is_utf8_char_slow(const U8 *s, const STRLEN len)
			__attribute__warn_unused_result__
d6480 2
a6481 2
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_SLOW	\
	assert(s)
a6482 7
STATIC bool	S_is_utf8_common(pTHX_ const U8 *const p, SV **swash, const char * const swashname)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_IS_UTF8_COMMON	\
	assert(p); assert(swash); assert(swashname)
d6484 1
a6484 2
STATIC SV*	S_swatch_get(pTHX_ SV* swash, UV start, UV span)
			__attribute__warn_unused_result__
d6486 2
a6487 2
#define PERL_ARGS_ASSERT_SWATCH_GET	\
	assert(swash)
d6489 4
a6492 2
STATIC U8	S_to_lower_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp)
			__attribute__warn_unused_result__;
d6494 1
a6494 3
#endif
#if defined(PERL_IN_UTF8_C) || defined(PERL_IN_PP_C)
PERL_CALLCONV bool	Perl__is_utf8_quotemeta(pTHX_ const U8 *p)
d6497 2
a6498 2
#define PERL_ARGS_ASSERT__IS_UTF8_QUOTEMETA	\
	assert(p)
a6499 5
PERL_CALLCONV UV	Perl__to_upper_title_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const char S_or_s)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT__TO_UPPER_TITLE_LATIN1	\
	assert(p); assert(lenp)
d6501 6
a6506 7
#endif
#if defined(PERL_IN_UTF8_C) || defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
PERL_CALLCONV UV	Perl__to_fold_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const bool flags)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT__TO_FOLD_LATIN1	\
	assert(p); assert(lenp)
a6507 7
#endif
#if defined(PERL_IN_UTIL_C)
STATIC bool	S_ckwarn_common(pTHX_ U32 w);
STATIC const COP*	S_closest_cop(pTHX_ const COP *cop, const OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CLOSEST_COP	\
	assert(cop)
d6509 2
a6510 3
STATIC bool	S_invoke_exception_hook(pTHX_ SV *ex, bool warn);
STATIC SV*	S_mess_alloc(pTHX);
STATIC SV *	S_with_queued_errors(pTHX_ SV *ex)
d6512 2
a6513 2
#define PERL_ARGS_ASSERT_WITH_QUEUED_ERRORS	\
	assert(ex)
d6515 1
a6515 2
STATIC char *	S_write_no_mem(pTHX)
			__attribute__noreturn__;
d6517 5
a6521 9
#  if defined(PERL_MEM_LOG) && !defined(PERL_MEM_LOG_NOIMPL)
STATIC void	S_mem_log_common(enum mem_log_type mlt, const UV n, const UV typesize, const char *type_name, const SV *sv, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname)
			__attribute__nonnull__(4)
			__attribute__nonnull__(8)
			__attribute__nonnull__(10);
#define PERL_ARGS_ASSERT_MEM_LOG_COMMON	\
	assert(type_name); assert(filename); assert(funcname)

#  endif
d6523 8
a6530 7
#if defined(PERL_MAD)
PERL_CALLCONV void	Perl_addmad(pTHX_ MADPROP* tm, MADPROP** root, char slot);
PERL_CALLCONV void	Perl_append_madprops(pTHX_ MADPROP* tm, OP* o, char slot);
PERL_CALLCONV void	Perl_do_op_xmldump(pTHX_ I32 level, PerlIO *file, const OP *o)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_OP_XMLDUMP	\
	assert(file)
a6531 4
PERL_CALLCONV void	Perl_do_pmop_xmldump(pTHX_ I32 level, PerlIO *file, const PMOP *pm)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_PMOP_XMLDUMP	\
	assert(file)
d6533 4
a6536 9
PERL_CALLCONV void	Perl_mad_free(pTHX_ MADPROP* mp);
PERL_CALLCONV int	Perl_madlex(pTHX);
PERL_CALLCONV int	Perl_madparse(pTHX_ int gramtype);
PERL_CALLCONV OP*	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
PERL_CALLCONV MADPROP*	Perl_newMADPROP(pTHX_ char key, char type, void* val, I32 vlen);
PERL_CALLCONV MADPROP*	Perl_newMADsv(pTHX_ char key, SV* sv)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_NEWMADSV	\
	assert(sv)
a6537 2
PERL_CALLCONV OP *	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__noreturn__;
d6539 6
a6544 7
PERL_CALLCONV TOKEN*	Perl_newTOKEN(pTHX_ I32 optype, YYSTYPE lval, MADPROP* madprop);
PERL_CALLCONV void	Perl_op_getmad(pTHX_ OP* from, OP* o, char slot);
PERL_CALLCONV void	Perl_op_getmad_weak(pTHX_ OP* from, OP* o, char slot);
PERL_CALLCONV void	Perl_op_xmldump(pTHX_ const OP *o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OP_XMLDUMP	\
	assert(o)
d6546 1
a6546 4
PERL_CALLCONV OP*	Perl_package(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PACKAGE	\
	assert(o)
d6548 6
a6553 4
PERL_CALLCONV void	Perl_pad_peg(const char* s)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PAD_PEG	\
	assert(s)
d6555 5
a6559 7
PERL_CALLCONV void	Perl_pmop_xmldump(pTHX_ const PMOP* pm);
PERL_CALLCONV void	Perl_prepend_madprops(pTHX_ MADPROP* mp, OP* o, char slot);
PERL_CALLCONV char*	Perl_sv_catxmlpv(pTHX_ SV *dsv, const char *pv, int utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATXMLPV	\
	assert(dsv); assert(pv)
a6560 5
PERL_CALLCONV char*	Perl_sv_catxmlpvn(pTHX_ SV *dsv, const char *pv, STRLEN len, int utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATXMLPVN	\
	assert(dsv); assert(pv)
d6562 1
a6562 5
PERL_CALLCONV char*	Perl_sv_catxmlsv(pTHX_ SV *dsv, SV *ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_CATXMLSV	\
	assert(dsv); assert(ssv)
d6564 3
a6566 1
PERL_CALLCONV char*	Perl_sv_xmlpeek(pTHX_ SV* sv)
d6568 2
a6569 2
#define PERL_ARGS_ASSERT_SV_XMLPEEK	\
	assert(sv)
d6571 1
a6571 1
PERL_CALLCONV void	Perl_token_free(pTHX_ TOKEN *tk)
d6573 2
a6574 2
#define PERL_ARGS_ASSERT_TOKEN_FREE	\
	assert(tk)
d6576 2
a6577 1
PERL_CALLCONV void	Perl_token_getmad(pTHX_ TOKEN *tk, OP *o, char slot)
d6579 13
a6591 2
#define PERL_ARGS_ASSERT_TOKEN_GETMAD	\
	assert(tk)
d6593 5
a6597 4
PERL_CALLCONV OP *	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)
d6599 7
a6605 7
PERL_CALLCONV void	Perl_xmldump_all(pTHX);
PERL_CALLCONV void	Perl_xmldump_all_perl(pTHX_ bool justperl);
PERL_CALLCONV void	Perl_xmldump_eval(pTHX);
PERL_CALLCONV void	Perl_xmldump_form(pTHX_ const GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_XMLDUMP_FORM	\
	assert(gv)
d6607 1
d6615 8
d6643 4
a6646 5
PERL_CALLCONV void	Perl_xmldump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_XMLDUMP_VINDENT	\
	assert(file); assert(pat)
d6648 3
a6650 75
#endif
#if defined(PERL_NEED_MY_BETOH16)
PERL_CALLCONV U16	Perl_my_betoh16(U16 n);
#endif
#if defined(PERL_NEED_MY_BETOH32)
PERL_CALLCONV U32	Perl_my_betoh32(U32 n);
#endif
#if defined(PERL_NEED_MY_BETOH64)
PERL_CALLCONV U64	Perl_my_betoh64(U64 n);
#endif
#if defined(PERL_NEED_MY_BETOHI)
PERL_CALLCONV int	Perl_my_betohi(int n);
#endif
#if defined(PERL_NEED_MY_BETOHL)
PERL_CALLCONV long	Perl_my_betohl(long n);
#endif
#if defined(PERL_NEED_MY_BETOHS)
PERL_CALLCONV short	Perl_my_betohs(short n);
#endif
#if defined(PERL_NEED_MY_HTOBE16)
PERL_CALLCONV U16	Perl_my_htobe16(U16 n);
#endif
#if defined(PERL_NEED_MY_HTOBE32)
PERL_CALLCONV U32	Perl_my_htobe32(U32 n);
#endif
#if defined(PERL_NEED_MY_HTOBE64)
PERL_CALLCONV U64	Perl_my_htobe64(U64 n);
#endif
#if defined(PERL_NEED_MY_HTOBEI)
PERL_CALLCONV int	Perl_my_htobei(int n);
#endif
#if defined(PERL_NEED_MY_HTOBEL)
PERL_CALLCONV long	Perl_my_htobel(long n);
#endif
#if defined(PERL_NEED_MY_HTOBES)
PERL_CALLCONV short	Perl_my_htobes(short n);
#endif
#if defined(PERL_NEED_MY_HTOLE16)
PERL_CALLCONV U16	Perl_my_htole16(U16 n);
#endif
#if defined(PERL_NEED_MY_HTOLE32)
PERL_CALLCONV U32	Perl_my_htole32(U32 n);
#endif
#if defined(PERL_NEED_MY_HTOLE64)
PERL_CALLCONV U64	Perl_my_htole64(U64 n);
#endif
#if defined(PERL_NEED_MY_HTOLEI)
PERL_CALLCONV int	Perl_my_htolei(int n);
#endif
#if defined(PERL_NEED_MY_HTOLEL)
PERL_CALLCONV long	Perl_my_htolel(long n);
#endif
#if defined(PERL_NEED_MY_HTOLES)
PERL_CALLCONV short	Perl_my_htoles(short n);
#endif
#if defined(PERL_NEED_MY_LETOH16)
PERL_CALLCONV U16	Perl_my_letoh16(U16 n);
#endif
#if defined(PERL_NEED_MY_LETOH32)
PERL_CALLCONV U32	Perl_my_letoh32(U32 n);
#endif
#if defined(PERL_NEED_MY_LETOH64)
PERL_CALLCONV U64	Perl_my_letoh64(U64 n);
#endif
#if defined(PERL_NEED_MY_LETOHI)
PERL_CALLCONV int	Perl_my_letohi(int n);
#endif
#if defined(PERL_NEED_MY_LETOHL)
PERL_CALLCONV long	Perl_my_letohl(long n);
#endif
#if defined(PERL_NEED_MY_LETOHS)
PERL_CALLCONV short	Perl_my_letohs(short n);
#endif
#if defined(PERL_OLD_COPY_ON_WRITE)
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dstr, SV* sstr)
d6652 2
a6653 2
#define PERL_ARGS_ASSERT_SV_SETSV_COW	\
	assert(sstr)
d6655 5
a6659 8
#endif
#if defined(PERL_USES_PL_PIDSTATUS) && defined(PERL_IN_UTIL_C)
STATIC void	S_pidgone(pTHX_ Pid_t pid, int status);
#endif
#if defined(PL_OP_SLAB_ALLOC)
PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ size_t sz)
			__attribute__malloc__
			__attribute__warn_unused_result__;
d6661 1
a6661 1
PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op)
d6663 2
a6664 2
#define PERL_ARGS_ASSERT_SLAB_FREE	\
	assert(op)
d6666 4
a6669 6
#endif
#if defined(UNLINK_ALL_VERSIONS)
PERL_CALLCONV I32	Perl_unlnk(pTHX_ const char* f)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UNLNK	\
	assert(f)
d6671 2
a6672 4
#endif
#if defined(USE_ITHREADS)
PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, const PerlInterpreter* proto_perl)
			__attribute__warn_unused_result__
d6674 2
a6675 2
#define PERL_ARGS_ASSERT_ANY_DUP	\
	assert(proto_perl)
d6677 4
a6680 4
PERL_CALLCONV void	Perl_clone_params_del(CLONE_PARAMS *param)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_CLONE_PARAMS_DEL	\
	assert(param)
a6681 7
PERL_CALLCONV CLONE_PARAMS *	Perl_clone_params_new(PerlInterpreter *const from, PerlInterpreter *const to)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_CLONE_PARAMS_NEW	\
	assert(from); assert(to)
d6683 5
a6687 5
PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_CX_DUP	\
	assert(param)
d6689 4
a6692 5
PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR *const dp, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DIRP_DUP	\
	assert(param)
d6694 6
a6699 7
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO *const fp, const char type, CLONE_PARAMS *const param)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_FP_DUP	\
	assert(param)

PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP *const gp, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
d6701 2
a6702 2
#define PERL_ARGS_ASSERT_GP_DUP	\
	assert(param)
d6704 2
a6705 5
PERL_CALLCONV HE*	Perl_he_dup(pTHX_ const HE* e, bool shared, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_HE_DUP	\
	assert(param)
d6707 5
a6711 5
PERL_CALLCONV HEK*	Perl_hek_dup(pTHX_ HEK* e, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_HEK_DUP	\
	assert(param)
d6713 4
a6716 5
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC *mg, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MG_DUP	\
	assert(param)
d6718 4
a6721 5
PERL_CALLCONV struct mro_meta*	Perl_mro_meta_dup(pTHX_ struct mro_meta* smeta, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MRO_META_DUP	\
	assert(smeta); assert(param)
d6723 9
a6731 6
PERL_CALLCONV OP*	Perl_newPADOP(pTHX_ I32 type, I32 flags, SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_NEWPADOP	\
	assert(sv)
d6733 1
a6733 5
PERL_CALLCONV AV*	Perl_padlist_dup(pTHX_ AV *srcpad, CLONE_PARAMS *param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PADLIST_DUP	\
	assert(param)
d6735 2
a6736 1
PERL_CALLCONV yy_parser*	Perl_parser_dup(pTHX_ const yy_parser *const proto, CLONE_PARAMS *const param)
d6738 2
a6739 2
#define PERL_ARGS_ASSERT_PARSER_DUP	\
	assert(param)
d6741 1
a6741 4
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter *proto_perl, UV flags)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_PERL_CLONE	\
	assert(proto_perl)
d6743 1
a6743 8
PERL_CALLCONV void	Perl_re_dup_guts(pTHX_ const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS* param)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_RE_DUP_GUTS	\
	assert(sstr); assert(dstr); assert(param)

PERL_CALLCONV void*	Perl_regdupe_internal(pTHX_ REGEXP * const r, CLONE_PARAMS* param)
d6746 2
a6747 2
#define PERL_ARGS_ASSERT_REGDUPE_INTERNAL	\
	assert(r); assert(param)
d6749 1
a6749 1
PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV *const dstr, const SV *const sstr, CLONE_PARAMS *const param)
d6753 2
a6754 2
#define PERL_ARGS_ASSERT_RVPV_DUP	\
	assert(dstr); assert(sstr); assert(param)
d6756 4
a6759 5
PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si, CLONE_PARAMS* param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SI_DUP	\
	assert(param)
d6761 4
a6764 7
PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl, CLONE_PARAMS* param)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SS_DUP	\
	assert(proto_perl); assert(param)
d6766 1
a6766 15
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_DUP	\
	assert(param)

PERL_CALLCONV SV*	Perl_sv_dup_inc(pTHX_ const SV *const sstr, CLONE_PARAMS *const param)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_DUP_INC	\
	assert(param)

#endif
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg)
d6769 2
a6770 2
#define PERL_ARGS_ASSERT_MAGIC_SETCOLLXFRM	\
	assert(sv); assert(mg)
d6772 4
a6775 5
PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MEM_COLLXFRM	\
	assert(s); assert(xlen)
d6777 2
a6778 5
/* PERL_CALLCONV char*	sv_collxfrm(pTHX_ SV *const sv, STRLEN *const nxp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

PERL_CALLCONV char*	Perl_sv_collxfrm_flags(pTHX_ SV *const sv, STRLEN *const nxp, I32 const flags)
d6781 2
a6782 2
#define PERL_ARGS_ASSERT_SV_COLLXFRM_FLAGS	\
	assert(sv); assert(nxp)
d6785 4
a6788 11
#if defined(USE_PERLIO) && !defined(USE_SFIO)
PERL_CALLCONV void	Perl_PerlIO_clearerr(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_close(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_eof(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_error(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_fileno(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_fill(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_flush(pTHX_ PerlIO *f);
PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_base(pTHX_ PerlIO *f);
PERL_CALLCONV int	Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *f)
			__attribute__warn_unused_result__;
d6790 5
a6794 2
PERL_CALLCONV int	Perl_PerlIO_get_cnt(pTHX_ PerlIO *f)
			__attribute__warn_unused_result__;
d6796 5
a6800 5
PERL_CALLCONV STDCHAR *	Perl_PerlIO_get_ptr(pTHX_ PerlIO *f);
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *vbuf, Size_t count)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PERLIO_READ	\
	assert(vbuf)
d6802 4
a6805 6
PERL_CALLCONV int	Perl_PerlIO_seek(pTHX_ PerlIO *f, Off_t offset, int whence);
PERL_CALLCONV void	Perl_PerlIO_set_cnt(pTHX_ PerlIO *f, int cnt);
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, int cnt);
PERL_CALLCONV void	Perl_PerlIO_setlinebuf(pTHX_ PerlIO *f);
PERL_CALLCONV PerlIO *	Perl_PerlIO_stderr(pTHX)
			__attribute__warn_unused_result__;
d6807 6
a6812 2
PERL_CALLCONV PerlIO *	Perl_PerlIO_stdin(pTHX)
			__attribute__warn_unused_result__;
d6814 6
a6819 2
PERL_CALLCONV PerlIO *	Perl_PerlIO_stdout(pTHX)
			__attribute__warn_unused_result__;
d6821 3
a6823 2
PERL_CALLCONV Off_t	Perl_PerlIO_tell(pTHX_ PerlIO *f);
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *vbuf, Size_t count)
d6825 2
a6826 2
#define PERL_ARGS_ASSERT_PERLIO_UNREAD	\
	assert(vbuf)
a6827 4
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *vbuf, Size_t count)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PERLIO_WRITE	\
	assert(vbuf)
d6829 2
a6830 14
#endif
#if defined(USE_REENTRANT_API)
PERL_CALLCONV void	Perl_reentrant_free(pTHX);
PERL_CALLCONV void	Perl_reentrant_init(pTHX);
PERL_CALLCONV void*	Perl_reentrant_retry(const char *f, ...)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_REENTRANT_RETRY	\
	assert(f)

PERL_CALLCONV void	Perl_reentrant_size(pTHX);
#endif
#if defined(WIN32) || defined(__SYMBIAN32__) || defined(VMS)
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp)
			__attribute__nonnull__(pTHX_2)
d6832 2
a6833 7
#define PERL_ARGS_ASSERT_DO_ASPAWN	\
	assert(mark); assert(sp)

PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_SPAWN	\
	assert(cmd)
a6834 4
PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DO_SPAWN_NOWAIT	\
	assert(cmd)
a6835 4
#endif
#ifdef PERL_CORE
#  include "pp_proto.h"
#endif
d6837 3
a6839 1

@


1.1.1.15
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d26 1
a26 40
PERL_CALLCONV_NO_RET void	Perl_croak_memory_wrap(void)
			__attribute__noreturn__;

PERL_CALLCONV void*	Perl_Slab_Alloc(pTHX_ size_t sz)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SLAB_FREE	\
	assert(op)

PERL_CALLCONV bool	Perl__is_uni_FOO(pTHX_ const U8 classnum, const UV c)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl__is_uni_perl_idcont(pTHX_ UV c)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl__is_uni_perl_idstart(pTHX_ UV c)
			__attribute__warn_unused_result__;

PERL_CALLCONV bool	Perl__is_utf8_FOO(pTHX_ const U8 classnum, const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT__IS_UTF8_FOO	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_mark(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__IS_UTF8_MARK	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_perl_idcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__IS_UTF8_PERL_IDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_perl_idstart(pTHX_ const U8 *p)
d29 1
a29 1
#define PERL_ARGS_ASSERT__IS_UTF8_PERL_IDSTART	\
d32 1
a32 1
PERL_CALLCONV UV	Perl__to_uni_fold_flags(pTHX_ UV c, U8 *p, STRLEN *lenp, const U8 flags)
a131 7
PERL_CALLCONV void	Perl_av_extend_guts(pTHX_ AV *av, I32 key, SSize_t *maxp, SV ***allocp, SV ***arrayp)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_AV_EXTEND_GUTS	\
	assert(maxp); assert(allocp); assert(arrayp)

a186 10
/* PERL_CALLCONV I32	Perl_av_tindex(pTHX_ AV *av)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1); */

PERL_STATIC_INLINE I32	S_av_top_index(pTHX_ AV *av)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_AV_TOP_INDEX	\
	assert(av)

d306 6
d623 1
a623 1
PERL_CALLCONV OP *	Perl_coresub_op(pTHX_ SV *const coreargssv, const int code, const int opnum)
d629 1
a629 1
PERL_CALLCONV_NO_RET void	Perl_croak(pTHX_ const char* pat, ...)
d633 1
a633 7
PERL_CALLCONV_NO_RET void	Perl_croak_no_mem(void)
			__attribute__noreturn__;

PERL_CALLCONV_NO_RET void	Perl_croak_no_modify(void)
			__attribute__noreturn__;

PERL_CALLCONV_NO_RET void	Perl_croak_popstack(void)
d636 1
a636 1
PERL_CALLCONV_NO_RET void	Perl_croak_sv(pTHX_ SV *baseex)
d642 1
a642 1
PERL_CALLCONV_NO_RET void	Perl_croak_xs_usage(const CV *const cv, const char *const params)
d644 2
a645 2
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
a648 1
PERL_CALLCONV regexp_engine const *	Perl_current_re_engine(pTHX);
a682 6
PERL_CALLCONV CV*	Perl_cv_clone_into(pTHX_ CV* proto, CV *target)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_CV_CLONE_INTO	\
	assert(proto); assert(target)

a685 5
PERL_CALLCONV void	Perl_cv_forget_slab(pTHX_ CV *cv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CV_FORGET_SLAB	\
	assert(cv)

d757 1
a757 1
PERL_CALLCONV_NO_RET void	Perl_die_unwind(pTHX_ SV* msv)
d896 1
a896 1
PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, SSize_t offset, int size)
a1021 1
PERL_CALLCONV CV *	Perl_find_lexical_cv(pTHX_ PADOFFSET off);
a1024 3
PERL_CALLCONV CV*	Perl_find_runcv_where(pTHX_ U8 cond, IV arg, U32 *db_seqp)
			__attribute__warn_unused_result__;

d1101 2
a1102 4
PERL_CALLCONV void	Perl_get_hash_seed(pTHX_ unsigned char * const seed_buffer)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_HASH_SEED	\
	assert(seed_buffer)
d1483 1
a1483 1
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV *hv, HE *entry)
a1564 5
PERL_CALLCONV void	Perl_hv_rand_set(pTHX_ HV *hv, U32 new_xhv_rand)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_HV_RAND_SET	\
	assert(hv)

a1603 1
PERL_CALLCONV void	Perl_init_constants(pTHX);
a1630 16
PERL_STATIC_INLINE bool	S_isALNUM_lazy(pTHX_ const char* p)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_ISALNUM_LAZY	\
	assert(p)

PERL_STATIC_INLINE bool	S_isIDFIRST_lazy(pTHX_ const char* p)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_ISIDFIRST_LAZY	\
	assert(p)

a1639 1
			__attribute__deprecated__
a1643 11
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ UV c)
			__attribute__deprecated__
a1647 1
			__attribute__deprecated__
a1651 1
			__attribute__deprecated__
a1655 1
			__attribute__deprecated__
a1659 11
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_blank(pTHX_ UV c)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

PERL_CALLCONV bool	Perl_is_uni_blank_lc(pTHX_ UV c)
			__attribute__deprecated__
a1663 1
			__attribute__deprecated__
a1667 1
			__attribute__deprecated__
a1671 1
			__attribute__deprecated__
a1675 1
			__attribute__deprecated__
a1679 1
			__attribute__deprecated__
a1683 1
			__attribute__deprecated__
a1687 1
			__attribute__deprecated__
a1691 1
			__attribute__deprecated__
a1695 1
			__attribute__deprecated__
a1699 1
			__attribute__deprecated__
a1703 1
			__attribute__deprecated__
a1707 1
			__attribute__deprecated__
a1711 1
			__attribute__deprecated__
a1715 1
			__attribute__deprecated__
a1719 1
			__attribute__deprecated__
a1723 1
			__attribute__deprecated__
a1727 1
			__attribute__deprecated__
a1731 1
			__attribute__deprecated__
a1735 1
			__attribute__deprecated__
a1739 1
			__attribute__deprecated__
d1743 55
a1797 2
PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ const U8 *p)
			__attribute__deprecated__
d1800 1
a1800 1
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUM	\
d1803 1
a1803 2
PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ const U8 *p)
			__attribute__deprecated__
d1806 1
a1806 1
#define PERL_ARGS_ASSERT_IS_UTF8_ALNUMC	\
a1809 1
			__attribute__deprecated__
a1815 1
			__attribute__deprecated__
a1820 7
PERL_CALLCONV bool	Perl_is_utf8_blank(pTHX_ const U8 *p)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_IS_UTF8_BLANK	\
	assert(p)

a1833 1
			__attribute__deprecated__
a1839 1
			__attribute__deprecated__
a1845 1
			__attribute__deprecated__
a1851 1
			__attribute__deprecated__
a1857 1
			__attribute__deprecated__
a1863 1
			__attribute__deprecated__
a1869 1
			__attribute__deprecated__
a1875 1
			__attribute__deprecated__
a1881 1
			__attribute__deprecated__
a1887 1
			__attribute__deprecated__
a1893 1
			__attribute__deprecated__
a1899 1
			__attribute__deprecated__
a1905 1
			__attribute__deprecated__
d1916 1
a1916 1
/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **ep)
a1926 1
			__attribute__deprecated__
a1932 1
			__attribute__deprecated__
a1938 1
			__attribute__deprecated__
a1944 1
			__attribute__deprecated__
a2027 6
PERL_CALLCONV int	Perl_magic_cleararylen_p(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_CLEARARYLEN_P	\
	assert(sv); assert(mg)

a2062 7
PERL_CALLCONV int	Perl_magic_copycallchecker(pTHX_ SV* sv, MAGIC *mg, SV *nsv, const char *name, I32 namlen)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MAGIC_COPYCALLCHECKER	\
	assert(sv); assert(mg); assert(nsv)

d2154 6
d2186 7
d2211 6
d2318 6
a2385 1
			__attribute__deprecated__
d2477 5
d2500 1
a2500 1
PERL_CALLCONV_NO_RET void	Perl_my_exit(pTHX_ U32 status)
d2503 1
a2503 1
PERL_CALLCONV_NO_RET void	Perl_my_failure_exit(pTHX)
a2668 5
PERL_CALLCONV CV *	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_NEWMYSUB	\
	assert(o)

a2719 5
PERL_CALLCONV CV*	Perl_newSTUB(pTHX_ GV *gv, bool fake)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWSTUB	\
	assert(gv)

a2915 1
PERL_CALLCONV OP*	Perl_op_unscope(pTHX_ OP* o);
d2988 1
a2988 1
PERL_CALLCONV OP *	Perl_pad_leavemy(pTHX);
a2999 5
PERL_CALLCONV PAD **	Perl_padlist_store(pTHX_ PADLIST *padlist, I32 key, PAD *val)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PADLIST_STORE	\
	assert(padlist)

d3047 1
a3047 1
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP *o, OP *expr, bool isreg, I32 floor)
d3139 1
a3139 1
PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ SV * const pattern, U32 orig_rx_flags)
a3155 5
PERL_CALLCONV REGEXP*	Perl_re_op_compile(pTHX_ SV ** const patternp, int pat_count, OP *expr, const regexp_engine* eng, REGEXP *old_re, bool *is_bare_re, U32 rx_flags, U32 pm_flags)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_RE_OP_COMPILE	\
	assert(eng)

a3159 8
PERL_CALLCONV void	Perl_reentrant_free(pTHX);
PERL_CALLCONV void	Perl_reentrant_init(pTHX);
PERL_CALLCONV void*	Perl_reentrant_retry(const char *f, ...)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_REENTRANT_RETRY	\
	assert(f)

PERL_CALLCONV void	Perl_reentrant_size(pTHX);
d3272 5
d3637 1
a3637 5
PERL_CALLCONV void	Perl_setdefout(pTHX_ GV* gv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SETDEFOUT	\
	assert(gv)

d3666 7
d3843 2
a3844 1
/* PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv)
d3846 5
a3850 3
			__attribute__nonnull__(pTHX_2); */
#define PERL_ARGS_ASSERT_SV_COPYPV	\
	assert(dsv); assert(ssv)
d3852 9
a3860 1
PERL_CALLCONV void	Perl_sv_copypv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags)
d3863 1
a3863 1
#define PERL_ARGS_ASSERT_SV_COPYPV_FLAGS	\
a3865 4
/* PERL_CALLCONV void	Perl_sv_copypv_nomg(pTHX_ SV *const dsv, SV *const ssv)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2); */

d3949 1
a3949 1
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV *const sv, const U32 refcnt)
a3992 5
PERL_CALLCONV STRLEN	Perl_sv_len_utf8_nomg(pTHX_ SV *const sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_LEN_UTF8_NOMG	\
	assert(sv)

d4003 1
a4003 5
/* PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV *const oldsv)
			__attribute__malloc__
			__attribute__warn_unused_result__; */

PERL_CALLCONV SV*	Perl_sv_mortalcopy_flags(pTHX_ SV *const oldsv, U32 flags)
a4123 1
PERL_CALLCONV void	Perl_sv_resetpvn(pTHX_ const char* s, STRLEN len, HV *const stash);
a4367 6
PERL_CALLCONV void	Perl_sv_vcatpvfn_flags(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted, const U32 flags)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_VCATPVFN_FLAGS	\
	assert(sv); assert(pat)

a4439 1
			__attribute__deprecated__
a4449 1
			__attribute__deprecated__
a4459 1
			__attribute__deprecated__
d4607 5
d4623 1
a4623 1
PERL_CALLCONV_NO_RET void	Perl_vcroak(pTHX_ const char* pat, va_list* args)
a4803 5
/* PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR	\
	assert(s)

d4830 3
d4844 6
a4849 7
#if !(defined(_MSC_VER))
PERL_CALLCONV_NO_RET int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg)
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET	\
	assert(sv); assert(mg)
d4851 1
a5137 5
PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR	\
	assert(s)

d5216 1
d5221 1
d5226 1
a5233 42
#if defined(PERL_ANY_COW)
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dstr, SV* sstr)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_SETSV_COW	\
	assert(sstr)

#endif
#if defined(PERL_CORE)
PERL_CALLCONV void	Perl_opslab_force_free(pTHX_ OPSLAB *slab)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OPSLAB_FORCE_FREE	\
	assert(slab)

PERL_CALLCONV void	Perl_opslab_free(pTHX_ OPSLAB *slab)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OPSLAB_FREE	\
	assert(slab)

PERL_CALLCONV void	Perl_opslab_free_nopad(pTHX_ OPSLAB *slab)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_OPSLAB_FREE_NOPAD	\
	assert(slab)

PERL_CALLCONV void	Perl_parser_free_nexttoke_ops(pTHX_ yy_parser *parser, OPSLAB *slab)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PARSER_FREE_NEXTTOKE_OPS	\
	assert(parser); assert(slab)

#  if defined(PERL_DEBUG_READONLY_OPS)
PERL_CALLCONV void	Perl_Slab_to_ro(pTHX_ OPSLAB *slab)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SLAB_TO_RO	\
	assert(slab)

PERL_CALLCONV void	Perl_Slab_to_rw(pTHX_ OPSLAB *const slab)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SLAB_TO_RW	\
	assert(slab)

#  endif
#endif
d5245 10
d5261 2
d5296 1
a5296 1
PERL_CALLCONV_NO_RET void	Perl_croak_nocontext(const char* pat, ...)
d5479 21
d5531 5
d5546 5
d5579 1
a5579 1
STATIC void	S_hsplit(pTHX_ HV *hv, STRLEN const oldsize, STRLEN newsize)
d5584 2
a5585 2
STATIC struct xpvhv_aux*	S_hv_auxinit(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
d5590 2
a5591 3
STATIC SV*	S_hv_free_ent_ret(pTHX_ HV *hv, HE *entry)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d5593 1
a5593 1
	assert(hv); assert(entry)
d5602 1
a5602 1
PERL_STATIC_NO_RET void	S_hv_notallowed(pTHX_ int flags, const char *key, I32 klen, const char *msg)
a5612 1
STATIC U32	S_ptr_hash(PTRV u);
d5713 1
a5713 1
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs)
a5765 5
STATIC void	S_forget_pmop(pTHX_ PMOP *const o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FORGET_PMOP	\
	assert(o)

d5834 5
d5846 2
a5847 1
STATIC void	S_process_special_blocks(pTHX_ I32 floor, const char *const fullname, GV *const gv, CV *const cv)
d5849 1
a5849 2
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d5903 7
d5973 1
a5973 1
PERL_STATIC_NO_RET void	S_minus_v(pTHX)
d5976 1
a5976 1
PERL_STATIC_NO_RET void	S_my_exit_jump(pTHX)
d5987 1
a5987 1
PERL_STATIC_NO_RET void	S_run_body(pTHX_ I32 oldscope)
d5990 1
a5990 1
PERL_STATIC_NO_RET void	S_usage(pTHX)
d6042 1
a6042 1
STATIC bool	S_doeval(pTHX_ int gimme, CV* outside, U32 seq, HV* hh);
d6127 1
a6127 1
STATIC void	S_do_oddball(pTHX_ SV **oddkey, SV **firstkey)
d6129 2
a6130 1
			__attribute__nonnull__(pTHX_2);
d6132 1
a6132 1
	assert(oddkey); assert(firstkey)
d6317 6
d6333 4
a6336 6
PERL_STATIC_INLINE void	S_alloc_maybe_populate_EXACT(pTHX_ struct RExC_state_t *pRExC_state, regnode *node, I32 *flagp, STRLEN len, UV code_point)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_ALLOC_MAYBE_POPULATE_EXACT	\
	assert(pRExC_state); assert(node); assert(flagp)
a6368 10
PERL_STATIC_INLINE U8	S_compute_EXACTish(pTHX_ struct RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_COMPUTE_EXACTISH	\
	assert(pRExC_state)

STATIC bool	S_could_it_be_a_POSIX_class(pTHX_ struct RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_COULD_IT_BE_A_POSIX_CLASS	\
	assert(pRExC_state)

d6375 1
a6375 1
PERL_STATIC_INLINE IV*	S_get_invlist_previous_index_addr(pTHX_ SV* invlist)
d6378 1
a6378 1
#define PERL_ARGS_ASSERT_GET_INVLIST_PREVIOUS_INDEX_ADDR	\
a6392 13
STATIC bool	S_grok_bslash_N(pTHX_ struct RExC_state_t *pRExC_state, regnode** nodep, UV *valuep, I32 *flagp, U32 depth, bool in_char_class, const bool strict)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_GROK_BSLASH_N	\
	assert(pRExC_state); assert(flagp)

STATIC regnode*	S_handle_regex_sets(pTHX_ struct RExC_state_t *pRExC_state, SV ** return_invlist, I32 *flagp, U32 depth, char * const oregcomp_parse)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_HANDLE_REGEX_SETS	\
	assert(pRExC_state); assert(flagp); assert(oregcomp_parse)

a6409 17
PERL_STATIC_INLINE UV	S_invlist_highest(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_HIGHEST	\
	assert(invlist)

PERL_STATIC_INLINE bool	S_invlist_is_iterating(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_IS_ITERATING	\
	assert(invlist)

PERL_STATIC_INLINE void	S_invlist_iterfinish(pTHX_ SV* invlist)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_ITERFINISH	\
	assert(invlist)

d6423 6
d6435 1
a6435 1
PERL_STATIC_INLINE IV	S_invlist_previous_index(pTHX_ SV* const invlist)
d6438 1
a6438 1
#define PERL_ARGS_ASSERT_INVLIST_PREVIOUS_INDEX	\
a6445 5
PERL_STATIC_INLINE void	S_invlist_set_previous_index(pTHX_ SV* const invlist, const IV index)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_INVLIST_SET_PREVIOUS_INDEX	\
	assert(invlist)

d6480 1
a6480 6
STATIC void	S_parse_lparen_question_flags(pTHX_ struct RExC_state_t *pRExC_state)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PARSE_LPAREN_QUESTION_FLAGS	\
	assert(pRExC_state)

PERL_STATIC_NO_RET void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...)
d6493 5
d6535 2
a6536 3
STATIC regnode*	S_regclass(pTHX_ struct RExC_state_t *pRExC_state, I32 *flagp, U32 depth, const bool stop_at_1, bool allow_multi_fold, const bool silence_non_portable, SV** ret_invlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
d6538 1
a6538 1
	assert(pRExC_state); assert(flagp)
a6545 7
STATIC char *	S_regpatws(struct RExC_state_t *pRExC_state, char *p, const bool recognize_comment)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_REGPATWS	\
	assert(pRExC_state); assert(p)

d6552 1
a6552 1
PERL_STATIC_INLINE I32	S_regpposixcc(pTHX_ struct RExC_state_t *pRExC_state, I32 value, const bool strict)
d6584 16
d6611 1
a6611 45
PERL_STATIC_INLINE UV*	S__get_invlist_len_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__GET_INVLIST_LEN_ADDR	\
	assert(invlist)

PERL_CALLCONV SV*	Perl__get_swash_invlist(pTHX_ SV* const swash)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__GET_SWASH_INVLIST	\
	assert(swash)

PERL_STATIC_INLINE bool	S__invlist_contains_cp(pTHX_ SV* const invlist, const UV cp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__INVLIST_CONTAINS_CP	\
	assert(invlist)

PERL_CALLCONV SV*	Perl__invlist_contents(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__INVLIST_CONTENTS	\
	assert(invlist)

PERL_STATIC_INLINE UV	S__invlist_len(pTHX_ SV* const invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__INVLIST_LEN	\
	assert(invlist)

PERL_CALLCONV IV	Perl__invlist_search(pTHX_ SV* const invlist, const UV cp)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__INVLIST_SEARCH	\
	assert(invlist)

PERL_CALLCONV HV*	Perl__swash_inversion_hash(pTHX_ SV* const swash)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT__SWASH_INVERSION_HASH	\
	assert(swash)

#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C) || defined(PERL_IN_TOKE_C)
PERL_CALLCONV SV*	Perl__core_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none, SV* invlist, U8* const flags_p)
d6618 1
a6618 3
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_TOKE_C)
STATIC char*	S_form_short_octal_warning(pTHX_ const char * const s, const STRLEN len)
a6619 1
			__attribute__pure__
d6621 2
a6622 28
#define PERL_ARGS_ASSERT_FORM_SHORT_OCTAL_WARNING	\
	assert(s)

STATIC char	S_grok_bslash_c(pTHX_ const char source, const bool utf8, const bool output_warning)
			__attribute__warn_unused_result__;

STATIC bool	S_grok_bslash_o(pTHX_ char** s, UV* uv, const char** error_msg, const bool output_warning, const bool strict, const bool silence_non_portable, const bool utf8)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GROK_BSLASH_O	\
	assert(s); assert(uv); assert(error_msg)

PERL_STATIC_INLINE bool	S_grok_bslash_x(pTHX_ char** s, UV* uv, const char** error_msg, const bool output_warning, const bool strict, const bool silence_non_portable, const bool utf8)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GROK_BSLASH_X	\
	assert(s); assert(uv); assert(error_msg)

PERL_STATIC_INLINE I32	S_regcurly(pTHX_ const char *s, const bool rbrace_must_be_escaped)
			__attribute__warn_unused_result__
			__attribute__pure__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REGCURLY	\
	assert(s)
d6674 6
d6688 1
a6688 1
STATIC SV*	S_core_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp)
d6694 1
a6694 1
STATIC char*	S_find_byclass(pTHX_ regexp * prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo, bool is_utf_pat)
a6702 9
STATIC bool	S_isFOO_lc(pTHX_ const U8 classnum, const U8 character)
			__attribute__warn_unused_result__;

STATIC bool	S_isFOO_utf8_lc(pTHX_ const U8 classnum, const U8* character)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_ISFOO_UTF8_LC	\
	assert(character)

d6710 2
a6711 3
STATIC void	S_regcppop(pTHX_ regexp *rex, U32 *maxopenparen_p)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
a6712 5
	assert(rex); assert(maxopenparen_p)

STATIC CHECKPOINT	S_regcppush(pTHX_ const regexp *rex, I32 parenfloor, U32 maxopenparen)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_REGCPPUSH	\
d6715 1
d6730 1
a6730 1
STATIC bool	S_reginclass(pTHX_ regexp * const prog, const regnode * const n, const U8 * const p, bool const utf8_target)
d6737 1
a6737 1
STATIC I32	S_regmatch(pTHX_ regmatch_info *reginfo, char *startpos, regnode *prog)
d6740 1
a6740 2
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d6742 1
a6742 1
	assert(reginfo); assert(startpos); assert(prog)
d6744 1
a6744 1
STATIC I32	S_regrepeat(pTHX_ regexp *prog, char **startposp, const regnode *p, I32 max, int depth, bool is_utf8_pat)
d6747 1
a6747 2
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d6749 1
a6749 1
	assert(prog); assert(startposp); assert(p)
d6751 1
a6751 1
STATIC I32	S_regtry(pTHX_ regmatch_info *reginfo, char **startposp)
d6756 1
a6756 1
	assert(reginfo); assert(startposp)
d6758 1
a6758 1
STATIC bool	S_to_byte_substr(pTHX_ regexp * prog)
a6988 1
STATIC void	S_force_ident_maybe_lex(pTHX_ char pit);
a7004 7
PERL_STATIC_INLINE SV*	S_get_and_check_backslash_N_name(pTHX_ const char* s, const char* const e)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GET_AND_CHECK_BACKSLASH_N_NAME	\
	assert(s); assert(e)

d7025 1
a7025 1
PERL_STATIC_NO_RET void	S_missingterm(pTHX_ char *s)
a7038 8
STATIC void	S_parse_ident(pTHX_ char **s, char **d, char * const e, int allow_package, bool is_utf8)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_PARSE_IDENT	\
	assert(s); assert(d); assert(e)

STATIC int	S_pending_ident(pTHX);
d7077 1
a7077 1
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims, int re_reparse, bool deprecate_escaped_matching)
d7177 1
a7177 1
PERL_STATIC_INLINE STRLEN	S_is_utf8_char_slow(const U8 *s, const STRLEN len)
d7183 1
a7183 1
PERL_STATIC_INLINE bool	S_is_utf8_common(pTHX_ const U8 *const p, SV **swash, const char * const swashname)
d7202 6
d7237 3
d7273 3
d7448 7
d7458 11
a7476 5
PERL_CALLCONV PADOFFSET	Perl_alloccopstash(pTHX_ HV *hv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_ALLOCCOPSTASH	\
	assert(hv)

d7550 1
a7550 1
PERL_CALLCONV PADLIST *	Perl_padlist_dup(pTHX_ PADLIST *srcpad, CLONE_PARAMS *param)
d7683 4
a7686 3
#if defined(WIN32)
PERL_CALLCONV_NO_RET void	win32_croak_not_implemented(const char * fname)
			__attribute__noreturn__
d7688 2
a7689 2
#define PERL_ARGS_ASSERT_WIN32_CROAK_NOT_IMPLEMENTED	\
	assert(fname)
d7691 1
a7708 8

#endif
#if defined(_MSC_VER)
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET	\
	assert(sv); assert(mg)
@


1.1.1.16
log
@Import perl-5.20.1
@
text
@a19 5
PERL_CALLCONV UV	ASCII_TO_NEED(const UV enc, const UV ch)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;

d25 3
a27 4
PERL_CALLCONV UV	NATIVE_TO_NEED(const UV enc, const UV ch)
			__attribute__deprecated__
			__attribute__warn_unused_result__
			__attribute__pure__;
a28 1
PERL_CALLCONV const char *	Perl_PerlIO_context_layers(pTHX_ const char *mode);
d71 1
a71 1
PERL_CALLCONV UV	Perl__to_uni_fold_flags(pTHX_ UV c, U8 *p, STRLEN *lenp, U8 flags)
d77 1
a77 1
PERL_CALLCONV UV	Perl__to_utf8_fold_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, U8 flags)
d83 1
a83 1
PERL_CALLCONV UV	Perl__to_utf8_lower_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags)
d89 1
a89 1
PERL_CALLCONV UV	Perl__to_utf8_title_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags)
d95 1
a95 1
PERL_CALLCONV UV	Perl__to_utf8_upper_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags)
a117 5
PERL_STATIC_INLINE void	S_append_utf8_from_native_byte(const U8 byte, U8** dest)
			__attribute__nonnull__(2);
#define PERL_ARGS_ASSERT_APPEND_UTF8_FROM_NATIVE_BYTE	\
	assert(dest)

d155 1
a155 1
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV *av, SSize_t key, I32 flags)
d160 1
a160 1
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV *av, SSize_t key)
d166 1
a166 1
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV *av, SSize_t key)
d171 1
a171 1
PERL_CALLCONV void	Perl_av_extend_guts(pTHX_ AV *av, SSize_t key, SSize_t *maxp, SV ***allocp, SV ***arrayp)
d178 1
a178 1
PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV *av, SSize_t key, I32 lval)
d184 1
a184 1
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV *av, SSize_t fill)
d194 1
a194 1
PERL_CALLCONV SSize_t	Perl_av_len(pTHX_ AV *av)
d200 1
a200 1
PERL_CALLCONV AV*	Perl_av_make(pTHX_ SSize_t size, SV **strp)
d228 1
a228 1
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV *av, SSize_t key, SV *val)
d233 1
a233 1
/* PERL_CALLCONV SSize_t	Perl_av_tindex(pTHX_ AV *av)
d237 1
a237 1
PERL_STATIC_INLINE SSize_t	S_av_top_index(pTHX_ AV *av)
d248 1
a248 1
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV *av, SSize_t num)
a355 6
PERL_CALLCONV OP *	Perl_ck_backtick(pTHX_ OP *o)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CK_BACKTICK	\
	assert(o)

d386 6
d448 6
a653 5
PERL_CALLCONV const COP*	Perl_closest_cop(pTHX_ const COP *cop, const OP *o, const OP *curop, bool opnext)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CLOSEST_COP	\
	assert(cop)

a682 3
PERL_STATIC_NO_RET void	S_croak_memory_wrap(void)
			__attribute__noreturn__;

a711 6
PERL_CALLCONV XOPRETANY	Perl_custom_op_get_field(pTHX_ const OP *o, const xop_flags_enum field)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_CUSTOM_OP_GET_FIELD	\
	assert(o)

d724 1
a724 1
/* PERL_CALLCONV const XOP *	Perl_custom_op_xop(pTHX_ const OP *o)
d726 3
a728 1
			__attribute__nonnull__(pTHX_1); */
a748 3
PERL_CALLCONV SV*	Perl_cv_const_sv_or_av(pTHX_ const CV *const cv)
			__attribute__warn_unused_result__;

a805 6
PERL_CALLCONV SV *	Perl_defelem_target(pTHX_ SV *sv, MAGIC *mg)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_DEFELEM_TARGET	\
	assert(sv)

a909 6
PERL_CALLCONV bool	Perl_do_open6(pTHX_ GV *gv, const char *oname, STRLEN len, PerlIO *supplied_fp, SV **svp, U32 num)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_OPEN6	\
	assert(gv); assert(oname)

a916 6
PERL_CALLCONV bool	Perl_do_open_raw(pTHX_ GV *gv, const char *oname, STRLEN len, int rawmode, int rawperm)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_DO_OPEN_RAW	\
	assert(gv); assert(oname)

a997 10
PERL_CALLCONV void	Perl_drand48_init_r(perl_drand48_t *random_state, U32 seed)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_DRAND48_INIT_R	\
	assert(random_state)

PERL_CALLCONV double	Perl_drand48_r(perl_drand48_t *random_state)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_DRAND48_R	\
	assert(random_state)

d1278 1
a1278 1
PERL_CALLCONV void	Perl_gv_check(pTHX_ HV* stash)
a1451 5
PERL_CALLCONV GV *	Perl_gv_override(pTHX_ const char * const name, const STRLEN len)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_OVERRIDE	\
	assert(name)

d1552 1
a1552 1
PERL_CALLCONV STRLEN	Perl_hv_fill(pTHX_ HV *const hv)
d1628 1
a1628 1
PERL_CALLCONV SSize_t*	Perl_hv_placeholders_p(pTHX_ HV *hv)
a1734 8
PERL_STATIC_INLINE bool	S_is_safe_syscall(pTHX_ const char *pv, STRLEN len, const char *what, const char *op_name)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT_IS_SAFE_SYSCALL	\
	assert(pv); assert(what); assert(op_name)

d2283 1
a2283 1
PERL_CALLCONV SV*	Perl_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, U32 argc, ...)
a2470 6
PERL_CALLCONV MAGIC*	Perl_mg_find_mglob(pTHX_ SV* sv)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_MG_FIND_MGLOB	\
	assert(sv)

a2627 1
			__attribute__format__(__strftime__,pTHX_1,0)
d2632 5
d2658 2
a2659 2
/* PERL_CALLCONV CV*	newATTRSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block); */
PERL_CALLCONV CV*	Perl_newATTRSUB_x(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block, bool o_is_gv);
a2852 7
PERL_CALLCONV SV*	Perl_newSVavdefelem(pTHX_ AV *av, SSize_t ix, bool extendible)
			__attribute__malloc__
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NEWSVAVDEFELEM	\
	assert(av)

a3123 3
PERL_CALLCONV OP *	Perl_parse_subsignature(pTHX)
			__attribute__warn_unused_result__;

d3180 1
a3180 1
PERL_CALLCONV I32	Perl_pregexec(pTHX_ REGEXP * const prog, char* stringarg, char* strend, char* strbeg, SSize_t minend, SV* screamer, U32 nosave)
d3260 1
a3260 1
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, const char* const strbeg, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data)
d3263 1
a3263 2
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
d3265 1
a3265 1
	assert(rx); assert(strbeg); assert(strpos); assert(strend)
d3401 1
a3401 1
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, SSize_t minend, SV *sv, void *data, U32 flags)
d3419 1
a3419 1
PERL_CALLCONV void	Perl_regprop(pTHX_ const regexp *prog, SV* sv, const regnode* o, const regmatch_info *reginfo)
d3498 1
a3498 1
PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, SSize_t key)
d3503 1
a3503 1
/* PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, SSize_t idx, SV **sptr)
d3507 1
a3507 1
PERL_CALLCONV void	Perl_save_aelem_flags(pTHX_ AV* av, SSize_t idx, SV **sptr, const U32 flags)
a3658 5
PERL_CALLCONV void	Perl_save_strlen(pTHX_ STRLEN* ptr)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SAVE_STRLEN	\
	assert(ptr)

a3752 1
PERL_CALLCONV void	Perl_set_caret_X(pTHX);
d3781 1
a3781 1
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV** p, SSize_t n)
d3808 1
a3808 1
PERL_CALLCONV bool	Perl_sv_2bool_flags(pTHX_ SV *sv, I32 flags)
d3824 2
a3825 10
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2IV	\
	assert(sv)

PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_2IV_FLAGS	\
	assert(sv)

d3832 3
a3834 15
PERL_CALLCONV NV	Perl_sv_2nv_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_2NV_FLAGS	\
	assert(sv)

/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV *sv, STRLEN *lp)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2PV	\
	assert(sv)

PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_2PV_FLAGS	\
	assert(sv)

d3863 2
a3864 10
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1); */
#define PERL_ARGS_ASSERT_SV_2UV	\
	assert(sv)

PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_2UV_FLAGS	\
	assert(sv)

a4121 5
PERL_CALLCONV MAGIC *	Perl_sv_magicext_mglob(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_MAGICEXT_MGLOB	\
	assert(sv)

a4146 5
PERL_CALLCONV STRLEN	Perl_sv_pos_b2u_flags(pTHX_ SV *const sv, STRLEN const offset, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_POS_B2U_FLAGS	\
	assert(sv)

a4529 1
/* PERL_CALLCONV void	sync_locale(void); */
d4550 1
a4550 1
PERL_CALLCONV OP *	Perl_tied_method(pTHX_ SV *methname, SV **sp, SV *const sv, const MAGIC *const mg, const U32 flags, U32 argc, ...)
d4558 1
a4558 1
PERL_CALLCONV void	Perl_tmps_grow(pTHX_ SSize_t n);
d4702 1
a4702 1
/* PERL_CALLCONV UV	utf8_to_uvchr_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen)
d4704 3
a4706 1
			__attribute__nonnull__(pTHX_2); */
a4714 1
			__attribute__deprecated__
a4719 5
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR	\
	assert(s)

d4725 1
a4725 7
/* PERL_CALLCONV U8*	uvchr_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1); */

/* PERL_CALLCONV U8*	uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
			__attribute__nonnull__(pTHX_1); */

PERL_CALLCONV U8*	Perl_uvoffuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags)
d4727 1
a4727 1
#define PERL_ARGS_ASSERT_UVOFFUNI_TO_UTF8_FLAGS	\
d4730 2
a4731 2
PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv)
			__attribute__nonnull__(pTHX_1);
a4739 5
PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR	\
	assert(s)

a4740 1
			__attribute__deprecated__
a4744 5
PERL_CALLCONV bool	Perl_validate_proto(pTHX_ SV *name, SV *proto, bool warn)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_VALIDATE_PROTO	\
	assert(name)

d4921 17
a4973 5
#if !(defined(WIN32))
/* PERL_CALLCONV char*	my_setlocale(pTHX_ int category, const char* locale)
			__attribute__pure__; */

#endif
a5193 11
STATIC bool	S_put_latin1_charclass_innards(pTHX_ SV* sv, char* bitmap)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_PUT_LATIN1_CHARCLASS_INNARDS	\
	assert(sv); assert(bitmap)

STATIC void	S_put_range(pTHX_ SV* sv, UV start, UV end)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_PUT_RANGE	\
	assert(sv)

d5195 1
a5195 2
STATIC void	S_regdump_intflags(pTHX_ const char *lead, const U32 flags);
STATIC U8	S_regtail_study(pTHX_ RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
a5230 1
			__attribute__format__(__printf__,pTHX_1,0)
d5250 24
d5349 14
a5407 8
#if defined(PERL_CORE) || defined (PERL_EXT)
PERL_STATIC_INLINE STRLEN	S_sv_or_pv_pos_u2b(pTHX_ SV *sv, const char *pv, STRLEN pos, STRLEN *lenp)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SV_OR_PV_POS_U2B	\
	assert(sv); assert(pv)

#endif
a5417 14
#if defined(PERL_DEBUG_READONLY_COW)
PERL_CALLCONV void	Perl_sv_buf_to_ro(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_BUF_TO_RO	\
	assert(sv)

#  if defined(PERL_IN_SV_C)
STATIC void	S_sv_buf_to_rw(pTHX_ SV *sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SV_BUF_TO_RW	\
	assert(sv)

#  endif
#endif
a5601 18
STATIC bool	S_openn_cleanup(pTHX_ GV *gv, IO *io, PerlIO *fp, char *mode, const char *oname, PerlIO *saveifp, PerlIO *saveofp, int savefd, char savetype, int writing, bool was_fdopen, const char *type)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_OPENN_CLEANUP	\
	assert(gv); assert(io); assert(mode); assert(oname)

STATIC IO *	S_openn_setup(pTHX_ GV *gv, char *mode, PerlIO **saveifp, PerlIO **saveofp, int *savefd, char *savetype)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5)
			__attribute__nonnull__(pTHX_6);
#define PERL_ARGS_ASSERT_OPENN_SETUP	\
	assert(gv); assert(mode); assert(saveifp); assert(saveofp); assert(savefd); assert(savetype)

a5671 6
STATIC bool	S_find_default_stash(pTHX_ HV **stash, const char *name, STRLEN len, const U32 is_utf8, const I32 add, svtype sv_type)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_FIND_DEFAULT_STASH	\
	assert(stash); assert(name)

a5676 12
STATIC bool	S_gv_is_in_main(pTHX_ const char *name, STRLEN len, const U32 is_utf8)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GV_IS_IN_MAIN	\
	assert(name)

STATIC bool	S_gv_magicalize(pTHX_ GV *gv, HV *stash, const char *name, STRLEN len, bool addmg, svtype sv_type)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_GV_MAGICALIZE	\
	assert(gv); assert(stash); assert(name)

a5681 15
STATIC void	S_maybe_multimagic_gv(pTHX_ GV *gv, const char *name, const svtype sv_type)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_MAYBE_MULTIMAGIC_GV	\
	assert(gv); assert(name)

STATIC bool	S_parse_gv_stash_name(pTHX_ HV **stash, GV **gv, const char **name, STRLEN *len, const char *nambeg, STRLEN full_len, const U32 is_utf8, const I32 add)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4)
			__attribute__nonnull__(pTHX_5);
#define PERL_ARGS_ASSERT_PARSE_GV_STASH_NAME	\
	assert(stash); assert(gv); assert(name); assert(len); assert(nambeg)

a5719 5
STATIC struct xpvhv_aux*	S_hv_auxinit_internal(struct xpvhv_aux *iter)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_HV_AUXINIT_INTERNAL	\
	assert(iter)

d5745 1
a5745 1
PERL_STATIC_INLINE U32	S_ptr_hash(PTRV u);
d5781 2
a5782 2
#if defined(PERL_IN_LOCALE_C) && defined(USE_LOCALE)
STATIC bool	S_is_cur_LC_category_utf8(pTHX_ int category);
d5788 1
a5788 7
#endif
#if defined(PERL_IN_MALLOC_C)
STATIC int	S_adjust_size_and_find_bucket(size_t *nbytes_p)
			__attribute__nonnull__(1);
#define PERL_ARGS_ASSERT_ADJUST_SIZE_AND_FIND_BUCKET	\
	assert(nbytes_p)

d5791 1
a5791 6
STATIC void	S_fixup_errno_string(pTHX_ SV* sv)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_FIXUP_ERRNO_STRING	\
	assert(sv)

STATIC SV*	S_magic_methcall1(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, int n, SV *val)
d5798 1
a5798 1
STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, SV *meth)
d5806 1
a5806 1
STATIC void	S_save_magic_flags(pTHX_ I32 mgs_ix, SV *sv, U32 flags)
d5808 1
a5808 1
#define PERL_ARGS_ASSERT_SAVE_MAGIC_FLAGS	\
d5822 1
a5822 1
STATIC void	S_mro_clean_isarev(pTHX_ HV * const isa, const char * const name, const STRLEN len, HV * const exceptions, U32 hash, U32 flags)
d5859 1
a5859 1
STATIC void	S_bad_type_gv(pTHX_ I32 n, const char *t, GV *gv, U32 flags, const OP *kid)
d5863 2
a5864 2
#define PERL_ARGS_ASSERT_BAD_TYPE_GV	\
	assert(t); assert(gv); assert(kid)
d5866 1
a5866 1
STATIC void	S_bad_type_pv(pTHX_ I32 n, const char *t, const char *name, U32 flags, const OP *kid)
d5870 2
a5871 2
#define PERL_ARGS_ASSERT_BAD_TYPE_PV	\
	assert(t); assert(name); assert(kid)
a5930 7
STATIC void	S_move_proto_attr(pTHX_ OP **proto, OP **attrs, const GV *name)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_MOVE_PROTO_ATTR	\
	assert(proto); assert(attrs); assert(name)

a5961 5
STATIC void	S_null_listop_in_list_context(pTHX_ OP* o)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_NULL_LISTOP_IN_LIST_CONTEXT	\
	assert(o)

d6146 1
a6146 1
STATIC SV **	S_adjust_stack_on_leave(pTHX_ SV **newsp, SV **sp, SV **mark, I32 gimme, U32 flags, bool lvalue)
d6223 1
a6223 1
PERL_STATIC_INLINE bool	S_path_is_searchable(const char *name)
d6226 1
a6226 1
#define PERL_ARGS_ASSERT_PATH_IS_SEARCHABLE	\
d6267 1
a6267 1
STATIC char *	S_bytes_to_uni(const U8 *start, STRLEN len, char *dest, const bool needs_swap)
d6413 2
a6414 1
			__attribute__nonnull__(pTHX_2);
d6416 1
a6416 1
	assert(cv); assert(gv)
d6436 6
d6445 1
a6445 1
STATIC U32	S_add_data(RExC_state_t* const pRExC_state, const char* const s, const U32 n)
d6448 1
a6448 1
			__attribute__nonnull__(2);
d6452 1
a6452 1
PERL_STATIC_INLINE void	S_alloc_maybe_populate_EXACT(pTHX_ RExC_state_t *pRExC_state, regnode *node, I32 *flagp, STRLEN len, UV code_point, bool downgradable)
d6459 32
a6490 1
PERL_STATIC_INLINE U8	S_compute_EXACTish(pTHX_ RExC_state_t *pRExC_state)
d6495 1
a6495 1
STATIC bool	S_could_it_be_a_POSIX_class(pTHX_ RExC_state_t *pRExC_state)
d6500 1
a6500 7
STATIC SV*	S_get_ANYOF_cp_list_for_ssc(pTHX_ const RExC_state_t *pRExC_state, const regnode_charclass* const node)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_GET_ANYOF_CP_LIST_FOR_SSC	\
	assert(pRExC_state); assert(node)

PERL_STATIC_INLINE STRLEN*	S_get_invlist_iter_addr(pTHX_ SV* invlist)
d6512 13
a6524 1
STATIC bool	S_grok_bslash_N(pTHX_ RExC_state_t *pRExC_state, regnode** nodep, UV *valuep, I32 *flagp, U32 depth, bool in_char_class, const bool strict)
d6530 1
a6530 1
STATIC regnode*	S_handle_regex_sets(pTHX_ RExC_state_t *pRExC_state, SV ** return_invlist, I32 *flagp, U32 depth, char * const oregcomp_parse)
d6596 1
a6596 1
PERL_STATIC_INLINE void	S_invlist_set_len(pTHX_ SV* const invlist, const UV len, const bool offset)
d6611 1
a6611 1
STATIC U32	S_join_exact(pTHX_ RExC_state_t *pRExC_state, regnode *scan, UV *min_subtract, bool *unfolded_multi_char, U32 flags, regnode *val, U32 depth)
d6617 1
a6617 1
	assert(pRExC_state); assert(scan); assert(min_subtract); assert(unfolded_multi_char)
d6619 1
a6619 1
STATIC I32	S_make_trie(pTHX_ RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
d6628 1
a6628 1
STATIC void	S_make_trie_failtable(pTHX_ RExC_state_t *pRExC_state, regnode *source, regnode *stclass, U32 depth)
d6635 1
a6635 1
STATIC char *	S_nextchar(pTHX_ RExC_state_t *pRExC_state)
d6640 1
a6640 1
STATIC void	S_parse_lparen_question_flags(pTHX_ RExC_state_t *pRExC_state)
d6645 2
a6646 1
STATIC void	S_populate_ANYOF_from_invlist(pTHX_ regnode *node, SV** invlist_ptr)
a6648 7
#define PERL_ARGS_ASSERT_POPULATE_ANYOF_FROM_INVLIST	\
	assert(node); assert(invlist_ptr)

PERL_STATIC_NO_RET void	S_re_croak2(pTHX_ bool utf8, const char* pat1, const char* pat2, ...)
			__attribute__noreturn__
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
d6652 1
a6652 1
STATIC regnode*	S_reg(pTHX_ RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth)
d6658 1
a6658 1
STATIC regnode*	S_reg_node(pTHX_ RExC_state_t *pRExC_state, U8 op)
d6668 1
a6668 1
STATIC SV *	S_reg_scan_name(pTHX_ RExC_state_t *pRExC_state, U32 flags)
d6673 1
a6673 1
STATIC bool	S_reg_skipcomment(pTHX_ RExC_state_t *pRExC_state)
d6678 1
a6678 1
STATIC regnode*	S_reganode(pTHX_ RExC_state_t *pRExC_state, U8 op, U32 arg)
d6683 1
a6683 1
STATIC regnode*	S_regatom(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
d6689 1
a6689 1
STATIC regnode*	S_regbranch(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, I32 first, U32 depth)
d6695 1
a6695 1
STATIC regnode*	S_regclass(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth, const bool stop_at_1, bool allow_multi_fold, const bool silence_non_portable, SV** ret_invlist)
d6701 1
a6701 1
STATIC void	S_reginsert(pTHX_ RExC_state_t *pRExC_state, U8 op, regnode *opnd, U32 depth)
d6707 1
a6707 1
STATIC char *	S_regpatws(RExC_state_t *pRExC_state, char *p, const bool recognize_comment)
d6714 1
a6714 1
STATIC regnode*	S_regpiece(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth)
d6720 1
a6720 1
PERL_STATIC_INLINE I32	S_regpposixcc(pTHX_ RExC_state_t *pRExC_state, I32 value, const bool strict)
d6725 1
a6725 1
STATIC void	S_regtail(pTHX_ RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth)
d6732 1
a6732 1
PERL_STATIC_INLINE STRLEN	S_reguni(pTHX_ const RExC_state_t *pRExC_state, UV uv, char *s)
d6738 1
a6738 1
STATIC char *	S_regwhite(RExC_state_t *pRExC_state, char *p)
d6745 1
a6745 1
STATIC void	S_scan_commit(pTHX_ const RExC_state_t *pRExC_state, struct scan_data_t *data, SSize_t *minlenp, int is_inf)
d6752 1
a6752 78
STATIC void	S_set_ANYOF_arg(pTHX_ RExC_state_t* const pRExC_state, regnode* const node, SV* const cp_list, SV* const runtime_defns, SV* const only_utf8_locale_list, SV* const swash, const bool has_user_defined_property)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SET_ANYOF_ARG	\
	assert(pRExC_state); assert(node)

PERL_STATIC_INLINE void	S_ssc_add_range(pTHX_ regnode_ssc *ssc, UV const start, UV const end)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SSC_ADD_RANGE	\
	assert(ssc)

STATIC void	S_ssc_and(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *and_with)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SSC_AND	\
	assert(pRExC_state); assert(ssc); assert(and_with)

STATIC void	S_ssc_anything(pTHX_ regnode_ssc *ssc)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SSC_ANYTHING	\
	assert(ssc)

PERL_STATIC_INLINE void	S_ssc_clear_locale(pTHX_ regnode_ssc *ssc)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SSC_CLEAR_LOCALE	\
	assert(ssc)

PERL_STATIC_INLINE void	S_ssc_cp_and(pTHX_ regnode_ssc *ssc, UV const cp)
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SSC_CP_AND	\
	assert(ssc)

STATIC void	S_ssc_finalize(pTHX_ RExC_state_t *pRExC_state, regnode_ssc *ssc)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SSC_FINALIZE	\
	assert(pRExC_state); assert(ssc)

STATIC void	S_ssc_init(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SSC_INIT	\
	assert(pRExC_state); assert(ssc)

PERL_STATIC_INLINE void	S_ssc_intersection(pTHX_ regnode_ssc *ssc, SV* const invlist, const bool invert_2nd)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SSC_INTERSECTION	\
	assert(ssc); assert(invlist)

STATIC int	S_ssc_is_anything(pTHX_ const regnode_ssc *ssc)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_SSC_IS_ANYTHING	\
	assert(ssc)

STATIC int	S_ssc_is_cp_posixl_init(pTHX_ const RExC_state_t *pRExC_state, const regnode_ssc *ssc)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SSC_IS_CP_POSIXL_INIT	\
	assert(pRExC_state); assert(ssc)

STATIC void	S_ssc_or(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *or_with)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2)
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT_SSC_OR	\
	assert(pRExC_state); assert(ssc); assert(or_with)

PERL_STATIC_INLINE void	S_ssc_union(pTHX_ regnode_ssc *ssc, SV* const invlist, const bool invert_2nd)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT_SSC_UNION	\
	assert(ssc); assert(invlist)

STATIC SSize_t	S_study_chunk(pTHX_ RExC_state_t *pRExC_state, regnode **scanp, SSize_t *minlenp, SSize_t *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U32 recursed_depth, regnode_ssc *and_withp, U32 flags, U32 depth)
d6762 2
a6763 11
#if defined(PERL_IN_REGCOMP_C) || defined (PERL_IN_DUMP_C)
PERL_CALLCONV void	Perl__invlist_dump(pTHX_ PerlIO *file, I32 level, const char* const indent, SV* const invlist)
			__attribute__nonnull__(pTHX_1)
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
#define PERL_ARGS_ASSERT__INVLIST_DUMP	\
	assert(file); assert(indent); assert(invlist)

#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_PERL_C) || defined(PERL_IN_UTF8_C)
PERL_CALLCONV SV*	Perl__new_invlist_C_array(pTHX_ const UV* const list)
d6766 2
a6767 9
#define PERL_ARGS_ASSERT__NEW_INVLIST_C_ARRAY	\
	assert(list)

#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
PERL_CALLCONV SV*	Perl__get_regclass_nonbitmap_data(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **lonly_utf8_locale)
			__attribute__nonnull__(pTHX_2);
#define PERL_ARGS_ASSERT__GET_REGCLASS_NONBITMAP_DATA	\
	assert(node)
a6768 2
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_UTF8_C)
a6804 6
PERL_STATIC_INLINE bool*	S_get_invlist_offset_addr(pTHX_ SV* invlist)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_1);
#define PERL_ARGS_ASSERT_GET_INVLIST_OFFSET_ADDR	\
	assert(invlist)

d6823 1
a6823 1
STATIC char	S_grok_bslash_c(pTHX_ const char source, const bool output_warning)
d6859 1
a6859 1
PERL_CALLCONV void	Perl__invlist_intersection_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, const bool complement_b, SV** i)
d6870 5
d6890 1
a6890 1
PERL_CALLCONV void	Perl__invlist_union_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, const bool complement_b, SV** output)
a6898 6
PERL_CALLCONV SV*	Perl__setup_canned_invlist(pTHX_ const STRLEN size, const UV element0, UV** other_elements_ptr)
			__attribute__warn_unused_result__
			__attribute__nonnull__(pTHX_3);
#define PERL_ARGS_ASSERT__SETUP_CANNED_INVLIST	\
	assert(other_elements_ptr)

d6907 7
a6913 1
STATIC char*	S_find_byclass(pTHX_ regexp * prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo)
d6949 1
a6949 1
STATIC U8*	S_reghop3(U8 *s, SSize_t off, const U8 *lim)
d6956 1
a6956 9
STATIC U8*	S_reghop4(U8 *s, SSize_t off, const U8 *llim, const U8 *rlim)
			__attribute__warn_unused_result__
			__attribute__nonnull__(1)
			__attribute__nonnull__(3)
			__attribute__nonnull__(4);
#define PERL_ARGS_ASSERT_REGHOP4	\
	assert(s); assert(llim); assert(rlim)

STATIC U8*	S_reghopmaybe3(U8 *s, SSize_t off, const U8 *lim)
d6963 1
a6963 1
STATIC bool	S_reginclass(pTHX_ regexp * const prog, const regnode * const n, const U8 * const p, const U8 * const p_end, bool const utf8_target)
d6966 1
a6966 2
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d6968 1
a6968 1
	assert(n); assert(p); assert(p_end)
d6970 1
a6970 1
STATIC SSize_t	S_regmatch(pTHX_ regmatch_info *reginfo, char *startpos, regnode *prog)
d6978 1
a6978 1
STATIC I32	S_regrepeat(pTHX_ regexp *prog, char **startposp, const regnode *p, regmatch_info *const reginfo, I32 max, int depth)
d6982 1
a6982 2
			__attribute__nonnull__(pTHX_3)
			__attribute__nonnull__(pTHX_4);
d6984 1
a6984 1
	assert(prog); assert(startposp); assert(p); assert(reginfo)
d7003 10
d7236 1
a7236 1
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack)
d7290 1
d7309 1
a7309 1
STATIC char*	S_scan_ident(pTHX_ char *s, char *dest, STRLEN destlen, I32 ck_uni)
d7311 2
a7312 1
			__attribute__nonnull__(pTHX_2);
d7314 1
a7314 1
	assert(s); assert(dest)
d7328 1
a7328 1
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims, int re_reparse, bool deprecate_escaped_matching, char **delimp)
d7353 1
a7353 1
STATIC char*	S_skipspace_flags(pTHX_ char *s, U32 flags)
d7356 1
a7356 1
#define PERL_ARGS_ASSERT_SKIPSPACE_FLAGS	\
d7434 1
a7434 1
PERL_STATIC_INLINE bool	S_is_utf8_common(pTHX_ const U8 *const p, SV **swash, const char * const swashname, SV* const invlist)
d7461 1
a7461 1
PERL_CALLCONV UV	Perl__to_fold_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const unsigned int flags)
d7470 5
d7615 72
d7863 1
a7863 1
#if defined(USE_PERLIO)
d7872 1
a7872 1
PERL_CALLCONV SSize_t	Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *f)
d7875 1
a7875 1
PERL_CALLCONV SSize_t	Perl_PerlIO_get_cnt(pTHX_ PerlIO *f)
d7885 2
a7886 2
PERL_CALLCONV void	Perl_PerlIO_set_cnt(pTHX_ PerlIO *f, SSize_t cnt);
PERL_CALLCONV void	Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, SSize_t cnt);
a7909 3
PERL_CALLCONV char*	Perl_my_setlocale(pTHX_ int category, const char* locale)
			__attribute__pure__;

@


1.1.1.17
log
@Import perl-5.24.2
@
text
@d25 2
a26 1
PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing);
d29 1
d40 2
a41 1
PERL_CALLCONV void	Perl_Slab_Free(pTHX_ void *op);
a43 2
PERL_CALLCONV SV*	Perl__get_encoding(pTHX)
			__attribute__pure__;
a44 1
PERL_CALLCONV bool	Perl__is_in_locale_category(pTHX_ const bool compiling, const int category);
d55 2
a56 1
			__attribute__warn_unused_result__;
a59 10
PERL_CALLCONV bool	Perl__is_utf8_idcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_IDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_idstart(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_IDSTART	\
	assert(p)

d61 2
a62 1
			__attribute__warn_unused_result__;
d67 2
a68 1
			__attribute__warn_unused_result__;
d73 2
a74 1
			__attribute__warn_unused_result__;
d78 3
a80 11
PERL_CALLCONV bool	Perl__is_utf8_xidcont(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_XIDCONT	\
	assert(p)

PERL_CALLCONV bool	Perl__is_utf8_xidstart(pTHX_ const U8 *p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_XIDSTART	\
	assert(p)

PERL_CALLCONV UV	Perl__to_uni_fold_flags(pTHX_ UV c, U8 *p, STRLEN *lenp, U8 flags);
d83 4
a86 1
PERL_CALLCONV UV	Perl__to_utf8_fold_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, U8 flags);
d89 4
a92 1
PERL_CALLCONV UV	Perl__to_utf8_lower_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags);
d95 4
a98 1
PERL_CALLCONV UV	Perl__to_utf8_title_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags);
d101 4
a104 1
PERL_CALLCONV UV	Perl__to_utf8_upper_flags(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp, bool flags);
d107 3
a109 2
PERL_CALLCONV void	Perl__warn_problematic_locale(void);
PERL_CALLCONV PADOFFSET	Perl_allocmy(pTHX_ const char *const name, const STRLEN len, const U32 flags);
d112 4
a115 1
PERL_CALLCONV SV*	Perl_amagic_call(pTHX_ SV* left, SV* right, int method, int dir);
d118 3
a120 1
PERL_CALLCONV SV *	Perl_amagic_deref_call(pTHX_ SV *ref, int method);
d123 1
d125 8
a132 1
PERL_CALLCONV I32	Perl_apply(pTHX_ I32 type, SV** mark, SV** sp);
d135 5
a139 1
PERL_CALLCONV void	Perl_apply_attrs_string(pTHX_ const char *stashpv, CV *cv, const char *attrstr, STRLEN len);
d142 1
d145 2
a146 1
PERL_CALLCONV SV**	Perl_av_arylen_p(pTHX_ AV *av);
d149 3
a151 1
PERL_CALLCONV void	Perl_av_clear(pTHX_ AV *av);
d154 4
a157 1
PERL_CALLCONV void	Perl_av_create_and_push(pTHX_ AV **const avp, SV *const val);
d160 4
a163 1
PERL_CALLCONV SV**	Perl_av_create_and_unshift_one(pTHX_ AV **const avp, SV *const val);
d166 3
a168 1
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV *av, SSize_t key, I32 flags);
d171 1
d173 2
a174 1
			__attribute__warn_unused_result__;
d178 2
a179 1
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV *av, SSize_t key);
d182 5
a186 1
PERL_CALLCONV void	Perl_av_extend_guts(pTHX_ AV *av, SSize_t key, SSize_t *maxp, SV ***allocp, SV ***arrayp);
d189 1
d191 2
a192 1
			__attribute__warn_unused_result__;
d196 2
a197 1
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV *av, SSize_t fill);
d200 3
a202 1
PERL_CALLCONV IV*	Perl_av_iter_p(pTHX_ AV *av);
d205 1
d207 2
a208 1
			__attribute__warn_unused_result__;
d213 2
a214 1
			__attribute__warn_unused_result__;
d218 2
a219 1
PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV *av);
d222 4
a225 1
PERL_CALLCONV void	Perl_av_push(pTHX_ AV *av, SV *val);
d228 3
a230 1
PERL_CALLCONV void	Perl_av_reify(pTHX_ AV *av);
d233 1
d235 2
a236 1
			__attribute__warn_unused_result__;
d240 2
a241 1
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV *av, SSize_t key, SV *val);
d244 1
d246 8
a253 1
			__attribute__warn_unused_result__; */
d255 2
a256 1
PERL_CALLCONV void	Perl_av_undef(pTHX_ AV *av);
d259 3
a261 1
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV *av, SSize_t num);
d264 1
d266 3
a268 1
			__attribute__warn_unused_result__;
d275 1
a275 1
PERL_CALLCONV U8	Perl_block_gimme(pTHX)
d281 2
a282 1
PERL_CALLCONV void	Perl_blockhook_register(pTHX_ BHK *hk);
d285 1
d289 3
a291 1
PERL_CALLCONV int	Perl_bytes_cmp_utf8(pTHX_ const U8 *b, STRLEN blen, const U8 *u, STRLEN ulen);
d294 4
a297 1
PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ const U8 *s, STRLEN *len, bool *is_utf8);
d300 4
a303 1
PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ const U8 *s, STRLEN *len);
d306 4
a309 1
PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv);
d312 1
d314 2
a315 1
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV *paramList);
d318 3
a320 1
PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags);
d323 3
a325 1
PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags);
d328 3
a330 1
PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, VOL I32 flags);
d333 1
d340 2
a341 1
			__attribute__warn_unused_result__;
d345 1
a345 1
PERL_CALLCONV I32	Perl_cast_i32(NV f)
d348 1
a348 1
PERL_CALLCONV IV	Perl_cast_iv(NV f)
d351 1
a351 1
PERL_CALLCONV U32	Perl_cast_ulong(NV f)
d354 1
a354 1
PERL_CALLCONV UV	Perl_cast_uv(NV f)
d357 2
a358 1
PERL_CALLCONV bool	Perl_check_utf8_print(pTHX_ const U8 *s, const STRLEN len);
d361 1
d363 2
a364 1
			__attribute__warn_unused_result__;
d369 2
a370 1
			__attribute__warn_unused_result__;
d375 2
a376 1
			__attribute__warn_unused_result__;
d381 2
a382 1
			__attribute__warn_unused_result__;
d387 2
a388 1
			__attribute__warn_unused_result__;
d393 2
a394 1
			__attribute__warn_unused_result__;
d399 2
a400 1
			__attribute__warn_unused_result__;
d405 2
a406 1
			__attribute__warn_unused_result__;
d410 4
a413 1
PERL_CALLCONV OP*	Perl_ck_entersub_args_core(pTHX_ OP *entersubop, GV *namegv, SV *protosv);
d416 3
a418 1
PERL_CALLCONV OP*	Perl_ck_entersub_args_list(pTHX_ OP *entersubop);
d421 5
a425 1
PERL_CALLCONV OP*	Perl_ck_entersub_args_proto(pTHX_ OP *entersubop, GV *namegv, SV *protosv);
d428 5
a432 1
PERL_CALLCONV OP*	Perl_ck_entersub_args_proto_or_list(pTHX_ OP *entersubop, GV *namegv, SV *protosv);
d435 1
d437 2
a438 1
			__attribute__warn_unused_result__;
d443 2
a444 1
			__attribute__warn_unused_result__;
d449 2
a450 1
			__attribute__warn_unused_result__;
d455 2
a456 1
			__attribute__warn_unused_result__;
d461 2
a462 1
			__attribute__warn_unused_result__;
d467 2
a468 1
			__attribute__warn_unused_result__;
d473 2
a474 1
			__attribute__warn_unused_result__;
d479 2
a480 1
			__attribute__warn_unused_result__;
d485 2
a486 1
			__attribute__warn_unused_result__;
d491 2
a492 1
			__attribute__warn_unused_result__;
d497 2
a498 1
			__attribute__warn_unused_result__;
d503 2
a504 1
			__attribute__warn_unused_result__;
d509 2
a510 1
			__attribute__warn_unused_result__;
d515 2
a516 1
			__attribute__warn_unused_result__;
d521 2
a522 1
			__attribute__warn_unused_result__;
d527 2
a528 1
			__attribute__warn_unused_result__;
d533 2
a534 1
			__attribute__warn_unused_result__;
a537 5
PERL_CALLCONV OP *	Perl_ck_prototype(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_PROTOTYPE	\
	assert(o)

d539 2
a540 1
			__attribute__warn_unused_result__;
a543 5
PERL_CALLCONV OP *	Perl_ck_refassign(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_REFASSIGN	\
	assert(o)

d545 2
a546 1
			__attribute__warn_unused_result__;
d551 2
a552 1
			__attribute__warn_unused_result__;
d557 2
a558 1
			__attribute__warn_unused_result__;
d563 2
a564 1
			__attribute__warn_unused_result__;
d569 2
a570 1
			__attribute__warn_unused_result__;
d575 2
a576 1
			__attribute__warn_unused_result__;
d581 2
a582 1
			__attribute__warn_unused_result__;
d587 2
a588 1
			__attribute__warn_unused_result__;
d593 2
a594 1
			__attribute__warn_unused_result__;
d599 2
a600 1
			__attribute__warn_unused_result__;
d605 2
a606 1
			__attribute__warn_unused_result__;
d611 2
a612 1
			__attribute__warn_unused_result__;
a615 5
PERL_CALLCONV OP *	Perl_ck_stringify(pTHX_ OP *o)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CK_STRINGIFY	\
	assert(o)

d617 2
a618 1
			__attribute__warn_unused_result__;
d623 2
a624 1
			__attribute__warn_unused_result__;
d629 2
a630 1
			__attribute__warn_unused_result__;
d635 2
a636 1
			__attribute__warn_unused_result__;
d641 2
a642 1
			__attribute__warn_unused_result__;
d647 2
a648 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d653 2
a654 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d660 2
a661 4
PERL_CALLCONV void	Perl_clear_defarray(pTHX_ AV* av, bool abandon);
#define PERL_ARGS_ASSERT_CLEAR_DEFARRAY	\
	assert(av)
PERL_CALLCONV const COP*	Perl_closest_cop(pTHX_ const COP *cop, const OP *o, const OP *curop, bool opnext);
d664 6
a669 1
PERL_CALLCONV const char *	Perl_cop_fetch_label(pTHX_ COP *const cop, STRLEN *len, U32 *flags);
d672 4
a675 1
PERL_CALLCONV void	Perl_cop_store_label(pTHX_ COP *const cop, const char *label, STRLEN len, U32 flags);
d678 3
a680 1
PERL_CALLCONV SV *	Perl_core_prototype(pTHX_ SV *sv, const char *name, const int code, int * const opnum);
d683 3
a685 1
PERL_CALLCONV OP *	Perl_coresub_op(pTHX_ SV *const coreargssv, const int code, const int opnum);
d688 2
a689 1
PERL_CALLCONV void	Perl_create_eval_scope(pTHX_ OP *retop, U32 flags);
d707 2
a708 1
			__attribute__noreturn__;
d713 3
a715 1
			__attribute__noreturn__;
d721 2
a722 1
			__attribute__warn_unused_result__;
d727 2
a728 1
			__attribute__warn_unused_result__;
d733 2
a734 1
			__attribute__warn_unused_result__;
d738 3
a740 1
PERL_CALLCONV void	Perl_custom_op_register(pTHX_ Perl_ppaddr_t ppaddr, const XOP *xop);
d743 1
d745 2
a746 1
			__attribute__pure__; */
d748 2
a749 1
PERL_CALLCONV void	Perl_cv_ckproto_len_flags(pTHX_ const CV* cv, const GV* gv, const char* p, const STRLEN len, const U32 flags);
d752 3
a754 1
PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto);
d757 4
a760 1
PERL_CALLCONV CV*	Perl_cv_clone_into(pTHX_ CV* proto, CV *target);
d763 2
a764 1
PERL_CALLCONV SV*	Perl_cv_const_sv(const CV *const cv)
d767 1
a767 1
PERL_CALLCONV SV*	Perl_cv_const_sv_or_av(const CV *const cv)
d770 9
a778 2
PERL_CALLCONV void	Perl_cv_forget_slab(pTHX_ CV *cv);
PERL_CALLCONV void	Perl_cv_get_call_checker(pTHX_ CV *cv, Perl_call_checker *ckfun_p, SV **ckobj_p);
d781 5
a785 4
PERL_CALLCONV SV *	Perl_cv_name(pTHX_ CV *cv, SV *sv, U32 flags);
#define PERL_ARGS_ASSERT_CV_NAME	\
	assert(cv)
PERL_CALLCONV void	Perl_cv_set_call_checker(pTHX_ CV *cv, Perl_call_checker ckfun, SV *ckobj);
d788 3
a790 4
PERL_CALLCONV void	Perl_cv_set_call_checker_flags(pTHX_ CV *cv, Perl_call_checker ckfun, SV *ckobj, U32 flags);
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER_FLAGS	\
	assert(cv); assert(ckfun); assert(ckobj)
PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv);
d793 3
a795 7
PERL_CALLCONV void	Perl_cv_undef_flags(pTHX_ CV* cv, U32 flags);
#define PERL_ARGS_ASSERT_CV_UNDEF_FLAGS	\
	assert(cv)
PERL_CALLCONV GV *	Perl_cvgv_from_hek(pTHX_ CV* cv);
#define PERL_ARGS_ASSERT_CVGV_FROM_HEK	\
	assert(cv)
PERL_CALLCONV void	Perl_cvgv_set(pTHX_ CV* cv, GV* gv);
d798 3
a800 1
PERL_CALLCONV void	Perl_cvstash_set(pTHX_ CV* cv, HV* stash);
d803 3
a805 1
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cx);
d808 1
d813 2
a814 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d819 2
a820 1
PERL_CALLCONV I32	Perl_debop(pTHX_ const OP* o);
d823 1
d828 2
a829 1
			__attribute__warn_unused_result__;
d834 6
a839 1
PERL_CALLCONV char*	Perl_delimcpy(char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen);
d842 1
a842 3
PERL_CALLCONV char*	Perl_delimcpy_no_escape(char* to, const char* toend, const char* from, const char* fromend, int delim, I32* retlen);
#define PERL_ARGS_ASSERT_DELIMCPY_NO_ESCAPE	\
	assert(to); assert(toend); assert(from); assert(fromend); assert(retlen)
d844 1
a844 2
PERL_CALLCONV_NO_RET OP*	Perl_die(pTHX_ const char* pat, ...)
			__attribute__noreturn__
d847 2
a848 2
PERL_CALLCONV_NO_RET OP*	Perl_die_sv(pTHX_ SV *baseex)
			__attribute__noreturn__;
d853 2
a854 1
			__attribute__noreturn__;
d858 3
a860 1
/* PERL_CALLCONV bool	Perl_do_aexec(pTHX_ SV* really, SV** mark, SV** sp); */
d863 4
a866 1
PERL_CALLCONV bool	Perl_do_aexec5(pTHX_ SV* really, SV** mark, SV** sp, int fd, int do_report);
d869 3
a871 1
PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int mode);
d874 1
d876 2
a877 1
PERL_CALLCONV void	Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full);
d880 3
a882 1
PERL_CALLCONV bool	Perl_do_eof(pTHX_ GV* gv);
d885 1
d887 3
a889 1
PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv);
d892 4
a895 1
PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv);
d898 4
a901 1
PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, const char *name, HV *sv);
d904 6
a909 1
PERL_CALLCONV void	Perl_do_join(pTHX_ SV *sv, SV *delim, SV **mark, SV **sp);
d912 4
a915 1
PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
d917 2
a918 1
	assert(file)
d920 3
a922 1
			__attribute__warn_unused_result__;
d926 2
a927 1
PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, const OP *o);
d930 4
a933 1
/* PERL_CALLCONV bool	Perl_do_open(pTHX_ GV* gv, const char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp); */
d936 4
a939 1
PERL_CALLCONV bool	Perl_do_open6(pTHX_ GV *gv, const char *oname, STRLEN len, PerlIO *supplied_fp, SV **svp, U32 num);
d942 5
a946 1
PERL_CALLCONV bool	Perl_do_open9(pTHX_ GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num);
d949 4
a952 1
PERL_CALLCONV bool	Perl_do_open_raw(pTHX_ GV *gv, const char *oname, STRLEN len, int rawmode, int rawperm);
d955 4
a958 1
PERL_CALLCONV bool	Perl_do_openn(pTHX_ GV *gv, const char *oname, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num);
d961 3
a963 1
PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, const PMOP *pm);
d966 3
a968 1
PERL_CALLCONV bool	Perl_do_print(pTHX_ SV* sv, PerlIO* fp);
d971 1
d976 3
a978 1
PERL_CALLCONV void	Perl_do_sprintf(pTHX_ SV* sv, I32 len, SV** sarg);
d981 3
a983 1
PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
d986 3
a988 1
PERL_CALLCONV Off_t	Perl_do_sysseek(pTHX_ GV* gv, Off_t pos, int whence);
d991 1
d993 2
a994 1
			__attribute__warn_unused_result__;
d998 2
a999 1
PERL_CALLCONV I32	Perl_do_trans(pTHX_ SV* sv);
d1002 3
a1004 1
PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, SSize_t offset, int size);
d1007 3
a1009 1
PERL_CALLCONV void	Perl_do_vecset(pTHX_ SV* sv);
d1012 5
a1016 1
PERL_CALLCONV void	Perl_do_vop(pTHX_ I32 optype, SV* sv, SV* left, SV* right);
d1019 3
a1021 1
PERL_CALLCONV OP*	Perl_dofile(pTHX_ OP* term, I32 force_builtin);
d1024 1
d1028 2
a1029 1
PERL_CALLCONV OP *	Perl_doref(pTHX_ OP *o, I32 type, bool set_op_ref);
d1032 1
d1034 1
a1034 1
PERL_CALLCONV U8	Perl_dowantarray(pTHX)
d1037 2
a1038 1
PERL_CALLCONV void	Perl_drand48_init_r(perl_drand48_t *random_state, U32 seed);
d1041 3
a1043 1
PERL_CALLCONV double	Perl_drand48_r(perl_drand48_t *random_state);
d1046 1
d1050 2
a1051 1
PERL_CALLCONV void	Perl_dump_form(pTHX_ const GV* gv);
d1054 1
d1056 3
a1058 1
			__attribute__format__(__printf__,pTHX_3,pTHX_4);
d1062 2
a1063 1
PERL_CALLCONV void	Perl_dump_packsubs(pTHX_ const HV* stash);
d1066 3
a1068 1
PERL_CALLCONV void	Perl_dump_packsubs_perl(pTHX_ const HV* stash, bool justperl);
d1071 3
a1073 1
PERL_CALLCONV void	Perl_dump_sub(pTHX_ const GV* gv);
d1076 3
a1078 1
PERL_CALLCONV void	Perl_dump_sub_perl(pTHX_ const GV* gv, bool justperl);
d1081 4
a1084 1
PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args);
d1087 4
a1090 1
PERL_CALLCONV void	Perl_emulate_cop_io(pTHX_ const COP *const c, SV *const sv);
d1093 3
a1095 1
PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error);
d1098 3
a1100 1
PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags);
d1103 3
a1105 1
PERL_CALLCONV void	Perl_fbm_compile(pTHX_ SV* sv, U32 flags);
d1108 1
d1110 4
a1113 1
			__attribute__warn_unused_result__;
d1117 2
a1118 1
PERL_CALLCONV bool	Perl_feature_is_enabled(pTHX_ const char *const name, STRLEN namelen);
d1121 1
d1123 2
a1124 1
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp);
d1127 1
d1129 2
a1130 1
			__attribute__warn_unused_result__;
d1134 2
a1135 1
PERL_CALLCONV void	Perl_finalize_optree(pTHX_ OP* o);
d1138 1
d1147 5
d1155 2
a1156 1
PERL_CALLCONV char*	Perl_find_script(pTHX_ const char *scriptname, bool dosearch, const char *const *const search_ext, I32 flags);
d1159 1
d1161 3
a1163 1
			__attribute__pure__;
d1168 3
a1170 1
			__attribute__pure__;
d1175 3
a1177 1
			__attribute__pure__;
d1181 7
a1187 2
/* PERL_CALLCONV I32	foldEQ_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2); */
PERL_CALLCONV I32	Perl_foldEQ_utf8_flags(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2, U32 flags);
d1190 1
d1192 2
a1193 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d1199 2
a1200 1
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char *name, I32 flags);
d1203 1
d1207 2
a1208 1
PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 flags);
d1211 3
a1213 1
PERL_CALLCONV CV*	Perl_get_cvn_flags(pTHX_ const char* name, STRLEN len, I32 flags);
d1216 3
a1218 1
PERL_CALLCONV void	Perl_get_db_sub(pTHX_ SV **svp, CV *cv);
d1221 3
a1223 1
PERL_CALLCONV void	Perl_get_hash_seed(pTHX_ unsigned char * const seed_buffer);
d1226 3
a1228 1
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char *name, I32 flags);
d1231 1
d1253 2
a1254 1
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char *name, I32 flags);
d1257 1
d1261 2
a1262 1
PERL_CALLCONV int	Perl_getcwd_sv(pTHX_ SV* sv);
d1265 1
d1268 4
a1271 4
PERL_CALLCONV bool	Perl_grok_atoUV(const char* pv, UV* valptr, const char** endptr);
#define PERL_ARGS_ASSERT_GROK_ATOUV	\
	assert(pv); assert(valptr)
PERL_CALLCONV UV	Perl_grok_bin(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result);
d1274 5
a1278 1
PERL_CALLCONV UV	Perl_grok_hex(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result);
d1281 3
a1283 4
PERL_CALLCONV int	Perl_grok_infnan(pTHX_ const char** sp, const char *send);
#define PERL_ARGS_ASSERT_GROK_INFNAN	\
	assert(sp); assert(send)
PERL_CALLCONV int	Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep);
d1286 1
a1286 3
PERL_CALLCONV int	Perl_grok_number_flags(pTHX_ const char *pv, STRLEN len, UV *valuep, U32 flags);
#define PERL_ARGS_ASSERT_GROK_NUMBER_FLAGS	\
	assert(pv)
d1288 3
a1290 1
			__attribute__warn_unused_result__;
d1294 4
a1297 1
PERL_CALLCONV UV	Perl_grok_oct(pTHX_ const char* start, STRLEN* len_p, I32* flags, NV *result);
d1300 1
d1306 2
a1307 1
			__attribute__warn_unused_result__; */
d1310 2
a1311 1
			__attribute__warn_unused_result__;
d1316 2
a1317 1
			__attribute__warn_unused_result__;
d1322 2
a1323 1
			__attribute__warn_unused_result__;
d1327 2
a1328 1
PERL_CALLCONV void	Perl_gv_check(pTHX_ HV* stash);
d1331 1
d1333 2
a1334 1
			__attribute__warn_unused_result__;
d1338 8
a1345 2
PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, const GV* gv);
d1348 4
a1351 1
/* PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, const GV* gv, const char* prefix); */
d1354 4
a1357 1
PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain);
d1360 3
a1362 1
PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name);
d1365 3
a1367 1
PERL_CALLCONV GV*	Perl_gv_fetchfile_flags(pTHX_ const char *const name, const STRLEN len, const U32 flags);
d1370 9
a1378 3
/* PERL_CALLCONV GV*	gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level); */
/* PERL_CALLCONV GV*	gv_fetchmeth_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level); */
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pv(pTHX_ HV* stash, const char* name, I32 level, U32 flags);
d1381 3
a1383 1
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pv_autoload(pTHX_ HV* stash, const char* name, I32 level, U32 flags);
d1386 3
a1388 1
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pvn(pTHX_ HV* stash, const char* name, STRLEN len, I32 level, U32 flags);
d1391 3
a1393 1
PERL_CALLCONV GV*	Perl_gv_fetchmeth_pvn_autoload(pTHX_ HV* stash, const char* name, STRLEN len, I32 level, U32 flags);
d1396 3
a1398 1
PERL_CALLCONV GV*	Perl_gv_fetchmeth_sv(pTHX_ HV* stash, SV* namesv, I32 level, U32 flags);
d1401 3
a1403 1
PERL_CALLCONV GV*	Perl_gv_fetchmeth_sv_autoload(pTHX_ HV* stash, SV* namesv, I32 level, U32 flags);
d1406 4
a1409 1
/* PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name); */
d1412 4
a1415 1
PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload);
d1418 4
a1421 1
PERL_CALLCONV GV*	Perl_gv_fetchmethod_pv_flags(pTHX_ HV* stash, const char* name, U32 flags);
d1424 4
a1427 1
PERL_CALLCONV GV*	Perl_gv_fetchmethod_pvn_flags(pTHX_ HV* stash, const char* name, const STRLEN len, U32 flags);
d1430 4
a1433 1
PERL_CALLCONV GV*	Perl_gv_fetchmethod_sv_flags(pTHX_ HV* stash, SV* namesv, U32 flags);
d1436 3
a1438 1
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 add, const svtype sv_type);
d1441 3
a1443 1
PERL_CALLCONV GV*	Perl_gv_fetchpvn_flags(pTHX_ const char* name, STRLEN len, I32 flags, const svtype sv_type);
d1446 3
a1448 1
PERL_CALLCONV GV*	Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, const svtype sv_type);
d1451 4
a1454 1
PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, const GV* gv);
d1457 4
a1460 1
/* PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, const GV* gv, const char* prefix); */
d1463 4
a1466 1
PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, const GV* gv, const char* prefix, bool keepmain);
d1469 1
d1473 7
a1479 2
/* PERL_CALLCONV void	gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi); */
PERL_CALLCONV void	Perl_gv_init_pv(pTHX_ GV* gv, HV* stash, const char* name, U32 flags);
d1482 4
a1485 1
PERL_CALLCONV void	Perl_gv_init_pvn(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, U32 flags);
d1488 4
a1491 1
PERL_CALLCONV void	Perl_gv_init_sv(pTHX_ GV* gv, HV* stash, SV* namesv, U32 flags);
d1494 4
a1497 1
PERL_CALLCONV void	Perl_gv_name_set(pTHX_ GV* gv, const char *name, U32 len, U32 flags);
d1500 3
a1502 1
PERL_CALLCONV GV *	Perl_gv_override(pTHX_ const char * const name, const STRLEN len);
d1505 3
a1507 4
PERL_CALLCONV void	Perl_gv_setref(pTHX_ SV *const dstr, SV *const sstr);
#define PERL_ARGS_ASSERT_GV_SETREF	\
	assert(dstr); assert(sstr)
PERL_CALLCONV HV*	Perl_gv_stashpv(pTHX_ const char* name, I32 flags);
d1510 3
a1512 1
PERL_CALLCONV HV*	Perl_gv_stashpvn(pTHX_ const char* name, U32 namelen, I32 flags);
d1515 3
a1517 1
PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 flags);
d1520 3
a1522 1
PERL_CALLCONV void	Perl_gv_try_downgrade(pTHX_ GV* gv);
d1525 3
a1527 1
PERL_CALLCONV AV**	Perl_hv_backreferences_p(pTHX_ HV *hv);
d1530 1
d1532 2
a1533 1
PERL_CALLCONV void	Perl_hv_clear_placeholders(pTHX_ HV *hv);
d1536 1
d1538 2
a1539 1
PERL_CALLCONV void*	Perl_hv_common_key_len(pTHX_ HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash);
d1542 1
d1546 2
a1547 1
PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV *hv, HE *entry);
d1550 3
a1552 1
/* PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV *hv, const char *key, I32 klen, I32 flags); */
d1555 3
a1557 1
/* PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV *hv, SV *keysv, I32 flags, U32 hash); */
d1560 1
d1562 2
a1563 1
			__attribute__warn_unused_result__;
d1567 2
a1568 1
PERL_CALLCONV void	Perl_hv_eiter_set(pTHX_ HV *hv, HE *eiter);
d1571 4
a1574 1
PERL_CALLCONV void	Perl_hv_ename_add(pTHX_ HV *hv, const char *name, U32 len, U32 flags);
d1577 4
a1580 1
PERL_CALLCONV void	Perl_hv_ename_delete(pTHX_ HV *hv, const char *name, U32 len, U32 flags);
d1583 1
d1585 2
a1586 1
			__attribute__warn_unused_result__; */
d1591 2
a1592 1
			__attribute__warn_unused_result__; */
d1596 2
a1597 1
/* PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV *hv, const char *key, I32 klen, I32 lval); */
d1600 3
a1602 1
/* PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV *hv, SV *keysv, I32 lval, U32 hash); */
d1605 3
a1607 1
PERL_CALLCONV STRLEN	Perl_hv_fill(pTHX_ HV *const hv);
d1610 3
a1612 1
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV *hv, HE *entry);
d1615 3
a1617 1
PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV *hv);
d1620 1
d1622 3
a1624 1
			__attribute__warn_unused_result__;
d1629 2
a1630 1
			__attribute__warn_unused_result__;
d1635 2
a1636 1
			__attribute__warn_unused_result__; */
d1641 2
a1642 1
			__attribute__warn_unused_result__;
d1647 4
a1650 1
			__attribute__warn_unused_result__;
d1655 3
a1657 1
			__attribute__warn_unused_result__;
d1661 2
a1662 1
PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV *hv, IV newmax);
d1665 3
a1667 1
/* PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV *hv, GV *gv, int how); */
d1670 3
a1672 1
PERL_CALLCONV void	Perl_hv_name_set(pTHX_ HV *hv, const char *name, U32 len, U32 flags);
d1675 1
d1677 2
a1678 1
			__attribute__warn_unused_result__;
d1683 2
a1684 1
			__attribute__warn_unused_result__;
d1688 2
a1689 1
PERL_CALLCONV void	Perl_hv_placeholders_set(pTHX_ HV *hv, I32 ph);
d1692 3
a1694 1
PERL_CALLCONV void	Perl_hv_rand_set(pTHX_ HV *hv, U32 new_xhv_rand);
d1697 1
d1699 2
a1700 1
			__attribute__warn_unused_result__;
d1704 2
a1705 1
PERL_CALLCONV void	Perl_hv_riter_set(pTHX_ HV *hv, I32 riter);
d1708 1
d1710 2
a1711 1
			__attribute__warn_unused_result__;
d1720 14
a1733 4
/* PERL_CALLCONV I32	ibcmp(pTHX_ const char* a, const char* b, I32 len); */
/* PERL_CALLCONV I32	ibcmp_locale(pTHX_ const char* a, const char* b, I32 len); */
/* PERL_CALLCONV I32	ibcmp_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2); */
PERL_CALLCONV void	Perl_init_argv_symbols(pTHX_ int argc, char **argv);
d1736 1
d1743 2
a1744 1
PERL_CALLCONV void	Perl_init_tm(pTHX_ struct tm *ptm);
d1747 1
d1750 3
a1752 1
			__attribute__pure__;
d1760 2
a1761 1
PERL_CALLCONV bool	Perl_io_close(pTHX_ IO* io, GV *gv, bool not_implicit, bool warn_on_fail);
d1764 2
a1765 1
PERL_CALLCONV bool	Perl_isALNUM_lazy(pTHX_ const char* p)
d1768 2
a1769 1
			__attribute__pure__;
d1773 1
a1773 1
PERL_CALLCONV bool	Perl_isIDFIRST_lazy(pTHX_ const char* p)
d1776 2
a1777 1
			__attribute__pure__;
d1781 3
a1783 6
/* PERL_CALLCONV bool	Perl_is_ascii_string(pTHX_ const U8 *s, STRLEN len)
			__attribute__warn_unused_result__; */

PERL_CALLCONV bool	Perl_is_invariant_string(const U8 *s, STRLEN len)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_INVARIANT_STRING	\
d1789 8
d1949 2
a1950 1
			__attribute__warn_unused_result__;
d1956 2
a1957 1
			__attribute__warn_unused_result__;
d1963 2
a1964 1
			__attribute__warn_unused_result__;
d1970 2
a1971 1
			__attribute__warn_unused_result__;
d1977 2
a1978 1
			__attribute__warn_unused_result__;
d1983 2
a1984 1
			__attribute__deprecated__;
d1988 3
a1990 1
/* PERL_CALLCONV STRLEN	Perl_is_utf8_char_buf(const U8 *buf, const U8 *buf_end); */
d1993 1
d1996 2
a1997 1
			__attribute__warn_unused_result__;
d2003 2
a2004 1
			__attribute__warn_unused_result__;
d2010 2
a2011 1
			__attribute__warn_unused_result__;
d2017 2
a2018 1
			__attribute__warn_unused_result__;
d2024 2
a2025 1
			__attribute__warn_unused_result__;
d2031 2
a2032 1
			__attribute__warn_unused_result__;
d2038 2
a2039 1
			__attribute__warn_unused_result__;
d2045 2
a2046 1
			__attribute__warn_unused_result__;
d2052 2
a2053 1
			__attribute__warn_unused_result__;
d2059 2
a2060 1
			__attribute__warn_unused_result__;
d2066 2
a2067 1
			__attribute__warn_unused_result__;
d2073 2
a2074 1
			__attribute__warn_unused_result__;
d2080 2
a2081 1
			__attribute__warn_unused_result__;
d2085 2
a2086 1
PERL_CALLCONV bool	Perl_is_utf8_string(const U8 *s, STRLEN len);
d2089 3
a2091 1
/* PERL_CALLCONV bool	Perl_is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **ep); */
d2094 3
a2096 1
PERL_CALLCONV bool	Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
d2099 1
d2102 2
a2103 1
			__attribute__warn_unused_result__;
d2109 2
a2110 1
			__attribute__warn_unused_result__;
d2116 2
a2117 1
			__attribute__warn_unused_result__;
d2123 2
a2124 1
			__attribute__warn_unused_result__;
d2128 2
a2129 5
PERL_CALLCONV bool	Perl_isinfnan(NV nv);
PERL_CALLCONV bool	Perl_isinfnansv(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_ISINFNANSV	\
	assert(sv)
PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP *o);
d2132 1
d2134 2
a2135 1
			__attribute__pure__;
d2139 3
a2141 1
PERL_CALLCONV int	Perl_keyword_plugin_standard(pTHX_ char* keyword_ptr, STRLEN keyword_len, OP** op_ptr);
d2144 1
a2144 3
PERL_CALLCONV void	Perl_leave_adjust_stacks(pTHX_ SV **from_sp, SV **to_sp, U8 gimme, int filter);
#define PERL_ARGS_ASSERT_LEAVE_ADJUST_STACKS	\
	assert(from_sp); assert(to_sp)
d2147 2
a2148 1
PERL_CALLCONV void	Perl_lex_discard_to(pTHX_ char* ptr);
d2151 1
d2156 2
a2157 1
PERL_CALLCONV void	Perl_lex_read_to(pTHX_ char* ptr);
d2160 1
d2163 2
a2164 1
PERL_CALLCONV void	Perl_lex_stuff_pv(pTHX_ const char* pv, U32 flags);
d2167 3
a2169 1
PERL_CALLCONV void	Perl_lex_stuff_pvn(pTHX_ const char* pv, STRLEN len, U32 flags);
d2172 3
a2174 1
PERL_CALLCONV void	Perl_lex_stuff_sv(pTHX_ SV* sv, U32 flags);
d2177 3
a2179 1
PERL_CALLCONV void	Perl_lex_unstuff(pTHX_ char* ptr);
d2182 1
d2184 2
a2185 1
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...);
d2188 3
a2190 1
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP *o, I32 lex);
d2193 1
d2195 2
a2196 1
			__attribute__warn_unused_result__;
d2200 3
a2202 1
PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg);
d2205 4
a2208 1
PERL_CALLCONV int	Perl_magic_cleararylen_p(pTHX_ SV* sv, MAGIC* mg);
d2211 4
a2214 1
PERL_CALLCONV int	Perl_magic_clearenv(pTHX_ SV* sv, MAGIC* mg);
d2217 4
a2220 1
PERL_CALLCONV int	Perl_magic_clearhint(pTHX_ SV* sv, MAGIC* mg);
d2223 4
a2226 1
PERL_CALLCONV int	Perl_magic_clearhints(pTHX_ SV* sv, MAGIC* mg);
d2229 3
a2231 1
PERL_CALLCONV int	Perl_magic_clearisa(pTHX_ SV* sv, MAGIC* mg);
d2234 4
a2237 1
PERL_CALLCONV int	Perl_magic_clearpack(pTHX_ SV* sv, MAGIC* mg);
d2240 4
a2243 1
PERL_CALLCONV int	Perl_magic_clearsig(pTHX_ SV* sv, MAGIC* mg);
d2246 5
a2250 1
PERL_CALLCONV int	Perl_magic_copycallchecker(pTHX_ SV* sv, MAGIC *mg, SV *nsv, const char *name, I32 namlen);
d2253 1
d2255 3
a2257 1
PERL_CALLCONV int	Perl_magic_existspack(pTHX_ SV* sv, const MAGIC* mg);
d2260 4
a2263 1
PERL_CALLCONV int	Perl_magic_freearylen_p(pTHX_ SV* sv, MAGIC* mg);
d2266 4
a2269 1
PERL_CALLCONV int	Perl_magic_freeovrld(pTHX_ SV* sv, MAGIC* mg);
d2272 4
a2275 1
PERL_CALLCONV int	Perl_magic_get(pTHX_ SV* sv, MAGIC* mg);
d2278 4
a2281 1
PERL_CALLCONV int	Perl_magic_getarylen(pTHX_ SV* sv, const MAGIC* mg);
d2284 4
a2287 4
PERL_CALLCONV int	Perl_magic_getdebugvar(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETDEBUGVAR	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_getdefelem(pTHX_ SV* sv, MAGIC* mg);
d2290 4
a2293 1
PERL_CALLCONV int	Perl_magic_getnkeys(pTHX_ SV* sv, MAGIC* mg);
d2296 4
a2299 1
PERL_CALLCONV int	Perl_magic_getpack(pTHX_ SV* sv, MAGIC* mg);
d2302 4
a2305 1
PERL_CALLCONV int	Perl_magic_getpos(pTHX_ SV* sv, MAGIC* mg);
d2308 4
a2311 1
PERL_CALLCONV int	Perl_magic_getsig(pTHX_ SV* sv, MAGIC* mg);
d2314 4
a2317 1
PERL_CALLCONV int	Perl_magic_getsubstr(pTHX_ SV* sv, MAGIC* mg);
d2320 4
a2323 1
PERL_CALLCONV int	Perl_magic_gettaint(pTHX_ SV* sv, MAGIC* mg);
d2326 4
a2329 1
PERL_CALLCONV int	Perl_magic_getuvar(pTHX_ SV* sv, MAGIC* mg);
d2332 4
a2335 1
PERL_CALLCONV int	Perl_magic_getvec(pTHX_ SV* sv, MAGIC* mg);
d2338 4
a2341 1
PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg);
d2344 5
a2348 1
PERL_CALLCONV SV*	Perl_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, U32 argc, ...);
d2351 5
a2355 1
PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV *sv, MAGIC *mg, SV *key);
d2358 4
a2361 1
PERL_CALLCONV U32	Perl_magic_regdata_cnt(pTHX_ SV* sv, MAGIC* mg);
d2364 4
a2367 1
PERL_CALLCONV int	Perl_magic_regdatum_get(pTHX_ SV* sv, MAGIC* mg);
d2370 4
a2373 1
PERL_CALLCONV SV*	Perl_magic_scalarpack(pTHX_ HV *hv, MAGIC *mg);
d2376 4
a2379 1
PERL_CALLCONV int	Perl_magic_set(pTHX_ SV* sv, MAGIC* mg);
d2382 4
a2385 1
PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg);
d2388 4
a2391 1
PERL_CALLCONV int	Perl_magic_setarylen(pTHX_ SV* sv, MAGIC* mg);
d2394 4
a2397 1
PERL_CALLCONV int	Perl_magic_setdbline(pTHX_ SV* sv, MAGIC* mg);
d2400 4
a2403 4
PERL_CALLCONV int	Perl_magic_setdebugvar(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETDEBUGVAR	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setdefelem(pTHX_ SV* sv, MAGIC* mg);
d2406 4
a2409 1
PERL_CALLCONV int	Perl_magic_setenv(pTHX_ SV* sv, MAGIC* mg);
d2412 4
a2415 1
PERL_CALLCONV int	Perl_magic_sethint(pTHX_ SV* sv, MAGIC* mg);
d2418 4
a2421 1
PERL_CALLCONV int	Perl_magic_setisa(pTHX_ SV* sv, MAGIC* mg);
d2424 4
a2427 4
PERL_CALLCONV int	Perl_magic_setlvref(pTHX_ SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETLVREF	\
	assert(sv); assert(mg)
PERL_CALLCONV int	Perl_magic_setmglob(pTHX_ SV* sv, MAGIC* mg);
d2430 4
a2433 1
PERL_CALLCONV int	Perl_magic_setnkeys(pTHX_ SV* sv, MAGIC* mg);
d2436 4
a2439 1
PERL_CALLCONV int	Perl_magic_setpack(pTHX_ SV* sv, MAGIC* mg);
d2442 4
a2445 1
PERL_CALLCONV int	Perl_magic_setpos(pTHX_ SV* sv, MAGIC* mg);
d2448 4
a2451 1
PERL_CALLCONV int	Perl_magic_setregexp(pTHX_ SV* sv, MAGIC* mg);
d2454 3
a2456 1
PERL_CALLCONV int	Perl_magic_setsig(pTHX_ SV* sv, MAGIC* mg);
d2459 4
a2462 1
PERL_CALLCONV int	Perl_magic_setsubstr(pTHX_ SV* sv, MAGIC* mg);
d2465 4
a2468 1
PERL_CALLCONV int	Perl_magic_settaint(pTHX_ SV* sv, MAGIC* mg);
d2471 4
a2474 1
PERL_CALLCONV int	Perl_magic_setutf8(pTHX_ SV* sv, MAGIC* mg);
d2477 4
a2480 1
PERL_CALLCONV int	Perl_magic_setuvar(pTHX_ SV* sv, MAGIC* mg);
d2483 4
a2486 1
PERL_CALLCONV int	Perl_magic_setvec(pTHX_ SV* sv, MAGIC* mg);
d2489 4
a2492 1
PERL_CALLCONV U32	Perl_magic_sizepack(pTHX_ SV* sv, MAGIC* mg);
d2495 4
a2498 1
PERL_CALLCONV int	Perl_magic_wipepack(pTHX_ SV* sv, MAGIC* mg);
d2501 1
d2506 1
a2506 1
PERL_CALLCONV I32 *	Perl_markstack_grow(pTHX);
d2508 2
a2509 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d2513 2
a2514 1
PERL_CALLCONV SV*	Perl_mess_sv(pTHX_ SV* basemsg, bool consume);
d2517 1
d2519 2
a2520 1
PERL_CALLCONV int	Perl_mg_clear(pTHX_ SV* sv);
d2523 4
a2526 1
PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV *sv, SV *nsv, const char *key, I32 klen);
d2529 2
a2530 1
PERL_CALLCONV MAGIC*	Perl_mg_find(const SV* sv, int type)
d2534 2
a2535 1
			__attribute__warn_unused_result__;
d2539 1
a2539 1
PERL_CALLCONV MAGIC*	Perl_mg_findext(const SV* sv, int type, const MGVTBL *vtbl)
d2542 2
a2543 1
PERL_CALLCONV int	Perl_mg_free(pTHX_ SV* sv);
d2546 3
a2548 1
PERL_CALLCONV void	Perl_mg_free_type(pTHX_ SV* sv, int how);
d2551 3
a2553 1
PERL_CALLCONV int	Perl_mg_get(pTHX_ SV* sv);
d2556 1
d2558 2
a2559 1
			__attribute__deprecated__;
d2563 3
a2565 1
PERL_CALLCONV void	Perl_mg_localize(pTHX_ SV* sv, SV* nsv, bool setmagic);
d2568 3
a2570 1
PERL_CALLCONV void	Perl_mg_magical(SV* sv);
d2573 3
a2575 1
PERL_CALLCONV int	Perl_mg_set(pTHX_ SV* sv);
d2578 3
a2580 1
PERL_CALLCONV I32	Perl_mg_size(pTHX_ SV* sv);
d2583 3
a2585 1
PERL_CALLCONV void	Perl_mini_mktime(struct tm *ptm);
d2588 1
d2591 2
a2592 1
PERL_CALLCONV const char*	Perl_moreswitches(pTHX_ const char* s);
d2595 3
a2597 1
PERL_CALLCONV const struct mro_alg *	Perl_mro_get_from_name(pTHX_ SV *name);
d2600 3
a2602 1
PERL_CALLCONV AV*	Perl_mro_get_linear_isa(pTHX_ HV* stash);
d2605 4
a2608 1
PERL_CALLCONV SV*	Perl_mro_get_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which);
d2611 3
a2613 1
PERL_CALLCONV void	Perl_mro_isa_changed_in(pTHX_ HV* stash);
d2616 3
a2618 1
PERL_CALLCONV struct mro_meta*	Perl_mro_meta_init(pTHX_ HV* stash);
d2621 3
a2623 1
PERL_CALLCONV void	Perl_mro_method_changed_in(pTHX_ HV* stash);
d2626 3
a2628 1
PERL_CALLCONV void	Perl_mro_package_moved(pTHX_ HV * const stash, HV * const oldstash, const GV * const gv, U32 flags);
d2631 3
a2633 1
PERL_CALLCONV void	Perl_mro_register(pTHX_ const struct mro_alg *mro);
d2636 4
a2639 1
PERL_CALLCONV void	Perl_mro_set_mro(pTHX_ struct mro_meta *const meta, SV *const name);
d2642 5
a2646 1
PERL_CALLCONV SV*	Perl_mro_set_private_data(pTHX_ struct mro_meta *const smeta, const struct mro_alg *const which, SV *const data);
d2649 3
a2651 4
PERL_CALLCONV SV*	Perl_multideref_stringify(pTHX_ const OP* o, CV *cv);
#define PERL_ARGS_ASSERT_MULTIDEREF_STRINGIFY	\
	assert(o)
PERL_CALLCONV NV	Perl_my_atof(pTHX_ const char *s);
d2654 4
a2657 1
PERL_CALLCONV char*	Perl_my_atof2(pTHX_ const char *s, NV* value);
d2660 3
a2662 1
PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs);
d2665 1
d2667 1
a2667 1
PERL_CALLCONV int	Perl_my_dirfd(DIR* dir);
d2678 3
a2680 1
PERL_CALLCONV PerlIO*	Perl_my_popen_list(pTHX_ const char* mode, int n, SV ** args);
d2683 1
d2686 3
a2688 1
			__attribute__format__(__printf__,3,4);
a2694 1
PERL_CALLCONV char*	Perl_my_strerror(pTHX_ const int errnum);
d2696 2
a2697 1
			__attribute__format__(__strftime__,pTHX_1,0);
d2702 3
a2704 1
PERL_CALLCONV int	Perl_my_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap);
d2707 1
d2729 2
a2730 1
			__attribute__warn_unused_result__;
d2740 2
a2741 1
			__attribute__warn_unused_result__;
a2750 4
PERL_CALLCONV OP*	Perl_newDEFSVOP(pTHX)
			__attribute__warn_unused_result__;

PERL_CALLCONV void	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
d2753 2
a2754 1
			__attribute__warn_unused_result__;
d2760 3
a2762 1
			__attribute__warn_unused_result__;
d2766 2
a2767 1
PERL_CALLCONV GP *	Perl_newGP(pTHX_ GV *const gv);
d2770 1
d2773 2
a2774 1
			__attribute__warn_unused_result__;
d2782 3
a2784 1
/* PERL_CALLCONV GV*	newGVgen(pTHX_ const char* pack); */
d2787 2
a2788 1
			__attribute__warn_unused_result__;
d2797 2
a2798 1
			__attribute__warn_unused_result__;
d2816 3
a2818 1
			__attribute__warn_unused_result__;
d2824 2
a2825 1
			__attribute__warn_unused_result__;
d2833 2
a2834 13
PERL_CALLCONV OP*	Perl_newMETHOP(pTHX_ I32 type, I32 flags, OP* dynamic_meth)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWMETHOP	\
	assert(dynamic_meth)

PERL_CALLCONV OP*	Perl_newMETHOP_named(pTHX_ I32 type, I32 flags, SV* const_meth)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWMETHOP_NAMED	\
	assert(const_meth)

PERL_CALLCONV CV *	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
d2837 1
a2845 16
PERL_CALLCONV PADNAMELIST *	Perl_newPADNAMELIST(size_t max)
			__attribute__malloc__
			__attribute__warn_unused_result__;

PERL_CALLCONV PADNAME *	Perl_newPADNAMEouter(PADNAME *outer)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPADNAMEOUTER	\
	assert(outer)

PERL_CALLCONV PADNAME *	Perl_newPADNAMEpvn(const char *s, STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPADNAMEPVN	\
	assert(s)

d2850 2
a2851 1
PERL_CALLCONV void	Perl_newPROG(pTHX_ OP* o);
d2854 1
d2861 3
a2863 1
			__attribute__warn_unused_result__;
d2869 2
a2870 1
			__attribute__warn_unused_result__;
d2874 1
a2874 1
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *const tmpRef)
d2876 2
a2877 1
			__attribute__warn_unused_result__;
d2879 1
a2879 1
	assert(tmpRef)
d2889 2
a2890 1
PERL_CALLCONV CV*	Perl_newSTUB(pTHX_ GV *gv, bool fake);
d2893 1
d2901 2
a2902 1
			__attribute__warn_unused_result__;
d2908 2
a2909 1
			__attribute__warn_unused_result__;
d2919 2
a2920 1
			__attribute__warn_unused_result__;
d2947 2
a2948 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d2964 2
a2965 1
PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV *const rv, const char *const classname);
d2968 1
a2980 4
PERL_CALLCONV OP*	Perl_newUNOP_AUX(pTHX_ I32 type, I32 flags, OP* first, UNOP_AUX_item *aux)
			__attribute__malloc__
			__attribute__warn_unused_result__;

d2983 2
a2984 1
			__attribute__warn_unused_result__;
d2992 3
a2994 1
PERL_CALLCONV CV*	Perl_newXS(pTHX_ const char *name, XSUBADDR_t subaddr, const char *filename);
d2997 4
a3000 4
PERL_CALLCONV CV *	Perl_newXS_deffile(pTHX_ const char *name, XSUBADDR_t subaddr);
#define PERL_ARGS_ASSERT_NEWXS_DEFFILE	\
	assert(name); assert(subaddr)
PERL_CALLCONV CV *	Perl_newXS_flags(pTHX_ const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags);
d3003 4
a3006 1
PERL_CALLCONV CV *	Perl_newXS_len_flags(pTHX_ const char *name, STRLEN len, XSUBADDR_t subaddr, const char *const filename, const char *const proto, SV **const_svp, U32 flags);
d3008 2
a3009 1
	assert(subaddr)
d3011 2
a3012 1
PERL_CALLCONV void	Perl_new_ctype(pTHX_ const char* newctype);
d3015 1
d3021 2
a3022 1
PERL_CALLCONV SV*	Perl_new_version(pTHX_ SV *ver);
d3025 1
d3028 2
a3029 1
			__attribute__warn_unused_result__;
d3033 2
a3034 1
PERL_CALLCONV PerlIO*	Perl_nextargv(pTHX_ GV* gv, bool nomagicopen);
d3037 1
d3039 5
a3043 1
			__attribute__pure__;
a3046 6
PERL_CALLCONV_NO_RET void	Perl_noperl_die(const char* pat, ...)
			__attribute__noreturn__
			__attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_NOPERL_DIE	\
	assert(pat)

d3049 2
a3050 1
			__attribute__warn_unused_result__;
d3055 2
a3056 1
			__attribute__warn_unused_result__;
d3062 2
a3063 1
PERL_CALLCONV void	Perl_op_clear(pTHX_ OP* o);
d3066 6
a3071 1
PERL_CALLCONV OP*	Perl_op_contextualize(pTHX_ OP* o, I32 context);
a3073 2
PERL_CALLCONV OP*	Perl_op_convert_list(pTHX_ I32 optype, I32 flags, OP* o)
			__attribute__warn_unused_result__;
d3075 2
a3076 1
PERL_CALLCONV void	Perl_op_dump(pTHX_ const OP *o);
d3079 1
d3081 2
a3082 1
PERL_CALLCONV OP*	Perl_op_linklist(pTHX_ OP *o);
d3085 1
d3088 2
a3089 1
PERL_CALLCONV void	Perl_op_null(pTHX_ OP* o);
d3092 1
a3096 1
PERL_CALLCONV OP*	Perl_op_sibling_splice(OP *parent, OP *start, int del_count, OP* insert);
d3098 7
a3104 1
PERL_CALLCONV void	Perl_pack_cat(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags);
d3107 3
a3109 4
PERL_CALLCONV void	Perl_package(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_PACKAGE	\
	assert(o)
PERL_CALLCONV void	Perl_package_version(pTHX_ OP* v);
d3112 7
a3118 1
PERL_CALLCONV void	Perl_packlist(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist);
d3121 3
a3123 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_anon(pTHX_ CV* func, I32 optype);
d3126 3
a3128 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_pv(pTHX_ const char *name, const U32 flags, HV *typestash, HV *ourstash);
d3131 3
a3133 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_pvn(pTHX_ const char *namepv, STRLEN namelen, U32 flags, HV *typestash, HV *ourstash);
d3136 3
a3138 1
PERL_CALLCONV PADOFFSET	Perl_pad_add_name_sv(pTHX_ SV *name, U32 flags, HV *typestash, HV *ourstash);
d3141 1
a3141 3
PERL_CALLCONV void	Perl_pad_add_weakref(pTHX_ CV* func);
#define PERL_ARGS_ASSERT_PAD_ADD_WEAKREF	\
	assert(func)
d3147 2
a3148 1
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_pv(pTHX_ const char* name, U32 flags);
d3151 3
a3153 1
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_pvn(pTHX_ const char* namepv, STRLEN namelen, U32 flags);
d3156 3
a3158 1
PERL_CALLCONV PADOFFSET	Perl_pad_findmy_sv(pTHX_ SV* name, U32 flags);
d3161 5
a3165 1
PERL_CALLCONV void	Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv);
d3168 1
d3175 2
a3176 1
PERL_CALLCONV void	Perl_pad_push(pTHX_ PADLIST *padlist, int depth);
d3179 1
d3182 2
a3183 1
PERL_CALLCONV PAD **	Perl_padlist_store(pTHX_ PADLIST *padlist, I32 key, PAD *val);
d3186 1
a3186 14
PERL_CALLCONV void	Perl_padname_free(pTHX_ PADNAME *pn);
#define PERL_ARGS_ASSERT_PADNAME_FREE	\
	assert(pn)
PERL_CALLCONV PADNAME *	Perl_padnamelist_fetch(PADNAMELIST *pnl, SSize_t key)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PADNAMELIST_FETCH	\
	assert(pnl)

PERL_CALLCONV void	Perl_padnamelist_free(pTHX_ PADNAMELIST *pnl);
#define PERL_ARGS_ASSERT_PADNAMELIST_FREE	\
	assert(pnl)
PERL_CALLCONV PADNAME **	Perl_padnamelist_store(pTHX_ PADNAMELIST *pnl, SSize_t key, PADNAME *val);
#define PERL_ARGS_ASSERT_PADNAMELIST_STORE	\
	assert(pnl)
d3199 2
a3200 1
PERL_CALLCONV U32	Perl_parse_unicode_opts(pTHX_ const char **popt);
d3203 3
a3205 1
PERL_CALLCONV void	Perl_parser_free(pTHX_ const yy_parser *parser);
d3208 1
d3211 2
a3212 1
PERL_CALLCONV void	perl_construct(PerlInterpreter *my_perl);
d3215 3
a3217 1
PERL_CALLCONV int	perl_destruct(PerlInterpreter *my_perl);
d3220 3
a3222 1
PERL_CALLCONV void	perl_free(PerlInterpreter *my_perl);
d3225 3
a3227 1
PERL_CALLCONV int	perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env);
d3230 3
a3232 1
PERL_CALLCONV int	perl_run(PerlInterpreter *my_perl);
d3235 1
d3237 3
a3239 1
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP *o, OP *expr, OP *repl, bool isreg, I32 floor);
d3242 1
d3244 2
a3245 1
PERL_CALLCONV void	Perl_populate_isa(pTHX_ const char *name, STRLEN len, ...);
d3248 3
a3250 1
PERL_CALLCONV REGEXP*	Perl_pregcomp(pTHX_ SV * const pattern, const U32 flags);
d3253 7
a3259 1
PERL_CALLCONV I32	Perl_pregexec(pTHX_ REGEXP * const prog, char* stringarg, char* strend, char* strbeg, SSize_t minend, SV* screamer, U32 nosave);
d3262 1
d3264 2
a3265 1
PERL_CALLCONV void	Perl_pregfree2(pTHX_ REGEXP *rx);
d3268 3
a3270 1
PERL_CALLCONV const char*	Perl_prescan_version(pTHX_ const char *s, bool strict, const char** errstr, bool *sqv, int *ssaw_decimal, int *swidth, bool *salpha);
d3273 1
d3278 2
a3279 1
			__attribute__warn_unused_result__;
d3288 2
a3289 1
PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *const tbl);
d3292 4
a3295 1
PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *const tbl, const void *const oldsv, void *const newsv);
d3298 1
d3300 3
a3302 1
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
d3305 4
a3308 1
PERL_CALLCONV char*	Perl_pv_escape(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags);
d3310 5
a3314 2
	assert(str)
PERL_CALLCONV char*	Perl_pv_pretty(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags);
d3317 4
a3320 1
PERL_CALLCONV char*	Perl_pv_uni_display(pTHX_ SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags);
d3323 3
a3325 1
PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err);
d3328 3
a3330 1
PERL_CALLCONV REGEXP*	Perl_re_compile(pTHX_ SV * const pattern, U32 orig_rx_flags);
d3333 6
a3338 1
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV* sv, const char* const strbeg, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data);
d3341 3
a3343 1
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ REGEXP  *const r);
d3346 3
a3348 1
PERL_CALLCONV REGEXP*	Perl_re_op_compile(pTHX_ SV ** const patternp, int pat_count, OP *expr, const regexp_engine* eng, REGEXP *old_re, bool *is_bare_re, U32 rx_flags, U32 pm_flags);
d3351 1
d3358 2
a3359 1
PERL_CALLCONV void*	Perl_reentrant_retry(const char *f, ...);
d3362 1
d3366 2
a3367 1
PERL_CALLCONV SV *	Perl_refcounted_he_fetch_pv(pTHX_ const struct refcounted_he *chain, const char *key, U32 hash, U32 flags);
d3370 3
a3372 1
PERL_CALLCONV SV *	Perl_refcounted_he_fetch_pvn(pTHX_ const struct refcounted_he *chain, const char *keypv, STRLEN keylen, U32 hash, U32 flags);
d3375 3
a3377 1
PERL_CALLCONV SV *	Perl_refcounted_he_fetch_sv(pTHX_ const struct refcounted_he *chain, SV *key, U32 hash, U32 flags);
d3380 1
d3383 2
a3384 1
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_pv(pTHX_ struct refcounted_he *parent, const char *key, U32 hash, SV *value, U32 flags);
d3387 3
a3389 1
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_pvn(pTHX_ struct refcounted_he *parent, const char *keypv, STRLEN keylen, U32 hash, SV *value, U32 flags);
d3392 3
a3394 1
PERL_CALLCONV struct refcounted_he *	Perl_refcounted_he_new_sv(pTHX_ struct refcounted_he *parent, SV *key, U32 hash, SV *value, U32 flags);
d3397 3
a3399 1
PERL_CALLCONV SV*	Perl_reg_named_buff(pTHX_ REGEXP * const rx, SV * const key, SV * const value, const U32 flags);
d3402 3
a3404 1
PERL_CALLCONV SV*	Perl_reg_named_buff_all(pTHX_ REGEXP * const rx, const U32 flags);
d3407 4
a3410 1
PERL_CALLCONV bool	Perl_reg_named_buff_exists(pTHX_ REGEXP * const rx, SV * const key, const U32 flags);
d3413 4
a3416 1
PERL_CALLCONV SV*	Perl_reg_named_buff_fetch(pTHX_ REGEXP * const rx, SV * const namesv, const U32 flags);
d3419 3
a3421 1
PERL_CALLCONV SV*	Perl_reg_named_buff_firstkey(pTHX_ REGEXP * const rx, const U32 flags);
d3424 3
a3426 1
PERL_CALLCONV SV*	Perl_reg_named_buff_iter(pTHX_ REGEXP * const rx, const SV * const lastkey, const U32 flags);
d3429 3
a3431 1
PERL_CALLCONV SV*	Perl_reg_named_buff_nextkey(pTHX_ REGEXP * const rx, const U32 flags);
d3434 3
a3436 1
PERL_CALLCONV SV*	Perl_reg_named_buff_scalar(pTHX_ REGEXP * const rx, const U32 flags);
d3439 3
a3441 1
PERL_CALLCONV void	Perl_reg_numbered_buff_fetch(pTHX_ REGEXP * const rx, const I32 paren, SV * const sv);
d3444 4
a3447 1
PERL_CALLCONV I32	Perl_reg_numbered_buff_length(pTHX_ REGEXP * const rx, const SV * const sv, const I32 paren);
d3450 3
a3452 1
PERL_CALLCONV void	Perl_reg_numbered_buff_store(pTHX_ REGEXP * const rx, const I32 paren, SV const * const value);
d3455 3
a3457 1
PERL_CALLCONV SV*	Perl_reg_qr_package(pTHX_ REGEXP * const rx);
d3460 3
a3462 1
PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* ret_x, REGEXP* rx);
d3465 3
a3467 1
PERL_CALLCONV SV*	Perl_regclass_swash(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **altsvp);
d3470 3
a3472 1
PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r);
d3475 7
a3481 1
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, SSize_t minend, SV *sv, void *data, U32 flags);
d3484 3
a3486 1
PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const rx);
d3489 1
d3494 9
a3502 1
PERL_CALLCONV void	Perl_repeatcpy(char* to, const char* from, I32 len, IV count);
d3505 1
d3509 2
a3510 1
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv);
d3513 1
d3515 5
a3519 1
			__attribute__pure__;
d3526 2
a3527 1
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* save);
d3530 1
d3534 2
a3535 1
PERL_CALLCONV CV*	Perl_rv2cv_op_cv(pTHX_ OP *cvop, U32 flags);
d3538 4
a3541 1
PERL_CALLCONV void	Perl_rxres_save(pTHX_ void **rsp, REGEXP *rx);
d3544 1
d3558 2
a3559 1
PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp);
d3562 3
a3564 1
PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp);
d3567 3
a3569 1
PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep);
d3572 3
a3574 1
PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, SSize_t key);
d3577 8
a3584 2
/* PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, SSize_t idx, SV **sptr); */
PERL_CALLCONV void	Perl_save_aelem_flags(pTHX_ AV* av, SSize_t idx, SV **sptr, const U32 flags);
d3587 1
d3589 2
a3590 1
PERL_CALLCONV void	Perl_save_aptr(pTHX_ AV** aptr);
d3593 3
a3595 1
PERL_CALLCONV AV*	Perl_save_ary(pTHX_ GV* gv);
d3598 3
a3600 1
PERL_CALLCONV void	Perl_save_bool(pTHX_ bool* boolp);
d3603 3
a3605 1
PERL_CALLCONV void	Perl_save_clearsv(pTHX_ SV** svp);
d3608 4
a3611 1
PERL_CALLCONV void	Perl_save_delete(pTHX_ HV *hv, char *key, I32 klen);
d3614 3
a3616 1
PERL_CALLCONV void	Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void* p);
d3619 1
d3624 2
a3625 1
PERL_CALLCONV void	Perl_save_generic_pvref(pTHX_ char** str);
d3628 3
a3630 1
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr);
d3633 3
a3635 1
PERL_CALLCONV void	Perl_save_gp(pTHX_ GV* gv, I32 empty);
d3638 3
a3640 1
PERL_CALLCONV HV*	Perl_save_hash(pTHX_ GV* gv);
d3643 4
a3646 1
PERL_CALLCONV void	Perl_save_hdelete(pTHX_ HV *hv, SV *keysv);
d3649 10
a3658 2
/* PERL_CALLCONV void	Perl_save_helem(pTHX_ HV *hv, SV *key, SV **sptr); */
PERL_CALLCONV void	Perl_save_helem_flags(pTHX_ HV *hv, SV *key, SV **sptr, const U32 flags);
d3661 1
d3663 2
a3664 1
PERL_CALLCONV void	Perl_save_hptr(pTHX_ HV** hptr);
d3667 3
a3669 1
PERL_CALLCONV void	Perl_save_int(pTHX_ int* intp);
d3672 3
a3674 1
PERL_CALLCONV void	Perl_save_item(pTHX_ SV* item);
d3677 3
a3679 1
PERL_CALLCONV void	Perl_save_iv(pTHX_ IV *ivp);
d3682 3
a3684 1
PERL_CALLCONV void	Perl_save_list(pTHX_ SV** sarg, I32 maxsarg);
d3687 3
a3689 1
PERL_CALLCONV void	Perl_save_long(pTHX_ long* longp);
d3692 3
a3694 1
/* PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv); */
d3697 3
a3699 1
PERL_CALLCONV void	Perl_save_nogv(pTHX_ GV* gv);
d3702 1
d3705 2
a3706 1
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr);
d3709 1
d3714 2
a3715 1
PERL_CALLCONV SV*	Perl_save_scalar(pTHX_ GV* gv);
d3718 3
a3720 1
PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV *sv, U32 mask, U32 val);
d3723 3
a3725 1
PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str);
d3728 3
a3730 1
PERL_CALLCONV void	Perl_save_sptr(pTHX_ SV** sptr);
d3733 3
a3735 1
PERL_CALLCONV void	Perl_save_strlen(pTHX_ STRLEN* ptr);
d3738 3
a3740 1
PERL_CALLCONV SV*	Perl_save_svref(pTHX_ SV** sptr);
d3743 3
a3745 1
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void *ptr);
d3748 1
d3767 2
a3768 1
			__attribute__warn_unused_result__;
d3776 2
a3777 1
			__attribute__warn_unused_result__;
a3780 1
PERL_CALLCONV void	Perl_savetmps(pTHX);
d3783 2
a3784 1
PERL_CALLCONV OP*	Perl_scalarvoid(pTHX_ OP* o);
d3787 4
a3790 1
PERL_CALLCONV NV	Perl_scan_bin(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
d3793 4
a3796 1
PERL_CALLCONV NV	Perl_scan_hex(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
d3799 4
a3802 1
PERL_CALLCONV char*	Perl_scan_num(pTHX_ const char* s, YYSTYPE *lvalp);
d3805 4
a3808 1
PERL_CALLCONV NV	Perl_scan_oct(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
d3811 4
a3814 1
PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *s, SV *rv, bool qv);
d3817 5
a3821 1
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *const e, SV *sv);
d3824 8
d3834 2
a3835 1
PERL_CALLCONV void	Perl_set_context(void *t);
d3838 1
d3842 2
a3843 1
PERL_CALLCONV void	Perl_setdefout(pTHX_ GV* gv);
d3846 3
a3848 1
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* str, I32 len, U32 hash);
d3851 3
a3853 1
PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp);
d3856 3
a3858 1
PERL_CALLCONV void	Perl_sortsv_flags(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags);
d3861 4
a3864 1
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV** p, SSize_t n);
d3867 4
a3870 1
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV *tmpglob, IO *io);
d3873 1
d3876 2
a3877 1
			__attribute__warn_unused_result__;
d3881 2
a3882 1
PERL_CALLCONV void	Perl_sub_crush_depth(pTHX_ CV* cv);
d3885 6
a3890 2
/* PERL_CALLCONV bool	sv_2bool(pTHX_ SV *const sv); */
PERL_CALLCONV bool	Perl_sv_2bool_flags(pTHX_ SV *sv, I32 flags);
d3893 4
a3896 1
PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV **const st, GV **const gvp, const I32 lref);
d3899 3
a3901 1
PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV *const sv);
d3904 3
a3906 1
/* PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV *sv); */
d3909 3
a3911 1
PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV *const sv, const I32 flags);
d3914 1
d3916 2
a3917 1
PERL_CALLCONV SV*	Perl_sv_2num(pTHX_ SV *const sv);
d3920 3
a3922 1
PERL_CALLCONV NV	Perl_sv_2nv_flags(pTHX_ SV *const sv, const I32 flags);
d3925 3
a3927 1
/* PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV *sv, STRLEN *lp); */
d3930 3
a3932 1
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags);
d3935 1
d3937 2
a3938 1
			__attribute__warn_unused_result__; */
d3942 2
a3943 1
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV *sv, STRLEN *const lp);
d3946 1
d3948 2
a3949 1
			__attribute__warn_unused_result__; */
d3953 2
a3954 1
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV *sv, STRLEN *const lp);
d3957 1
d3959 2
a3960 1
			__attribute__warn_unused_result__; */
d3964 2
a3965 1
/* PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv); */
d3968 3
a3970 1
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags);
d3973 3
a3975 1
PERL_CALLCONV void	Perl_sv_backoff(SV *const sv);
d3978 4
a3981 1
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV *const sv, HV *const stash);
d3984 7
a3990 1
PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen);
d3993 3
a3995 1
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV *const sv, const char* ptr);
d3998 4
a4001 1
PERL_CALLCONV void	Perl_sv_catpv_flags(pTHX_ SV *dstr, const char *sstr, const I32 flags);
d4004 3
a4006 1
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *const sv, const char *const ptr);
d4009 1
d4011 3
a4013 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d4018 3
a4020 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d4024 3
a4026 1
/* PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV *dsv, const char *sstr, STRLEN len); */
d4029 4
a4032 1
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *const dstr, const char *sstr, const STRLEN len, const I32 flags);
d4035 4
a4038 1
/* PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len); */
d4041 3
a4043 1
/* PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV *dstr, SV *sstr); */
d4046 3
a4048 1
PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags);
d4051 3
a4053 1
/* PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dsv, SV *ssv); */
d4056 3
a4058 1
PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV *const sv, const char *const ptr);
d4061 1
d4064 2
a4065 1
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV *const orig_sv);
d4068 1
d4073 3
a4075 1
/* PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv); */
d4078 4
a4081 1
PERL_CALLCONV void	Perl_sv_copypv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags);
d4084 5
a4088 1
/* PERL_CALLCONV void	Perl_sv_copypv_nomg(pTHX_ SV *const dsv, SV *const ssv); */
d4091 3
a4093 1
PERL_CALLCONV void	Perl_sv_del_backref(pTHX_ SV *const tsv, SV *const sv);
d4096 1
d4098 3
a4100 1
			__attribute__warn_unused_result__;
d4105 3
a4107 1
			__attribute__warn_unused_result__;
d4112 3
a4114 1
			__attribute__warn_unused_result__;
d4119 3
a4121 1
			__attribute__warn_unused_result__;
d4127 3
a4129 1
			__attribute__warn_unused_result__;
d4134 3
a4136 1
			__attribute__warn_unused_result__;
d4141 3
a4143 1
			__attribute__warn_unused_result__;
d4148 3
a4150 1
			__attribute__warn_unused_result__;
d4154 2
a4155 1
PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv);
d4158 1
d4161 2
a4162 1
/* PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv); */
d4165 3
a4167 1
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *const sv, const U32 flags);
d4170 1
d4172 2
a4173 1
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV *const sv, const U32 refcnt);
d4176 1
d4178 3
a4180 6
PERL_CALLCONV SV*	Perl_sv_get_backrefs(SV *const sv)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_SV_GET_BACKREFS	\
	assert(sv)

PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV *const sv, PerlIO *const fp, I32 append);
d4183 3
a4185 1
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV *const sv, STRLEN newlen);
d4188 1
d4191 3
a4193 1
/* PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen); */
d4196 4
a4199 1
PERL_CALLCONV void	Perl_sv_insert_flags(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen, const U32 flags);
d4202 3
a4204 1
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char *const name);
d4207 1
d4209 2
a4210 1
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv);
d4213 1
d4216 2
a4217 1
PERL_CALLCONV STRLEN	Perl_sv_len_utf8_nomg(pTHX_ SV *const sv);
d4220 3
a4222 1
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV *const sv, SV *const obj, const int how, const char *const name, const I32 namlen);
d4225 3
a4227 1
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV *const sv, SV *const obj, const int how, const MGVTBL *const vtbl, const char *const name, const I32 namlen);
d4230 3
a4232 1
PERL_CALLCONV MAGIC *	Perl_sv_magicext_mglob(pTHX_ SV *sv);
d4235 1
d4250 2
a4251 1
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv);
d4254 1
d4256 2
a4257 1
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV *const sv, I32 *const offsetp);
d4260 3
a4262 1
PERL_CALLCONV STRLEN	Perl_sv_pos_b2u_flags(pTHX_ SV *const sv, STRLEN const offset, U32 flags);
d4265 3
a4267 1
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV *const sv, I32 *const offsetp, I32 *const lenp);
d4270 3
a4272 1
PERL_CALLCONV STRLEN	Perl_sv_pos_u2b_flags(pTHX_ SV *const sv, STRLEN uoffset, STRLEN *const lenp, U32 flags);
d4275 1
d4277 2
a4278 1
			__attribute__warn_unused_result__; */
d4283 2
a4284 1
			__attribute__warn_unused_result__; */
d4288 3
a4290 1
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *lp);
d4293 3
a4295 1
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV *const sv, STRLEN *const lp);
d4298 4
a4301 1
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *lp);
d4304 3
a4306 1
/* PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp); */
d4309 3
a4311 1
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV *const sv, STRLEN *const lp, const I32 flags);
d4314 3
a4316 1
PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp);
d4319 1
d4321 2
a4322 1
			__attribute__warn_unused_result__; */
d4326 3
a4328 1
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *lp);
d4331 3
a4333 1
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV *const sv, STRLEN *const lp);
d4336 4
a4339 1
PERL_CALLCONV char*	Perl_sv_recode_to_utf8(pTHX_ SV* sv, SV *encoding);
d4342 3
a4344 1
PERL_CALLCONV SV*	Perl_sv_ref(pTHX_ SV *dst, const SV *const sv, const int ob);
d4347 1
d4349 2
a4350 1
			__attribute__warn_unused_result__;
d4354 3
a4356 1
PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV *const sv, SV *const nsv);
d4359 1
d4361 2
a4362 1
PERL_CALLCONV void	Perl_sv_reset(pTHX_ const char* s, HV *const stash);
d4365 1
d4367 2
a4368 1
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *const sv);
d4371 3
a4373 1
PERL_CALLCONV void	Perl_sv_sethek(pTHX_ SV *const sv, const HEK *const hek);
d4376 3
a4378 1
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV *const sv, const IV num);
d4381 3
a4383 1
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *const sv, const IV i);
d4386 3
a4388 1
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV *const sv, const NV num);
d4391 3
a4393 1
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *const sv, const NV num);
d4396 3
a4398 1
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV *const sv, const char *const ptr);
d4401 3
a4403 1
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *const sv, const char *const ptr);
d4406 1
d4408 3
a4410 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d4415 3
a4417 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d4421 2
a4422 1
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV *const sv, const IV num);
d4425 3
a4427 1
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *const sv, const IV iv);
d4430 3
a4432 1
PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV *const sv, const char *const ptr, const STRLEN len);
d4435 4
a4438 1
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *const sv, const char *const ptr, const STRLEN len);
d4441 3
a4443 1
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV *const rv, const char *const classname, const IV iv);
d4446 3
a4448 1
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV *const rv, const char *const classname, const NV nv);
d4451 3
a4453 1
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV *const rv, const char *const classname, void *const pv);
d4456 4
a4459 1
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV *const rv, const char *const classname, const char *const pv, const STRLEN n);
d4462 3
a4464 1
PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV *const rv, const char *const classname, const UV uv);
d4467 3
a4469 1
/* PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV *dstr, SV *sstr); */
d4472 3
a4474 1
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dstr, SV *sstr, const I32 flags);
d4477 3
a4479 1
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *const dstr, SV *const sstr);
d4482 3
a4484 1
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV *const sv, const UV num);
d4487 3
a4489 1
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *const sv, const UV u);
d4492 3
a4494 1
/* PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv); */
d4497 1
d4499 2
a4500 1
			__attribute__warn_unused_result__;
d4506 3
a4508 1
			__attribute__warn_unused_result__;
d4512 2
a4513 1
PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV *const sv, const int type);
d4516 3
a4518 1
PERL_CALLCONV int	Perl_sv_unmagicext(pTHX_ SV *const sv, const int type, MGVTBL *vtbl);
d4521 3
a4523 1
/* PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv); */
d4526 3
a4528 1
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV *const ref, const U32 flags);
d4531 3
a4533 1
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV *const sv);
d4536 3
a4538 1
PERL_CALLCONV void	Perl_sv_upgrade(pTHX_ SV *const sv, svtype new_type);
d4541 3
a4543 1
/* PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len); */
d4546 3
a4548 1
PERL_CALLCONV void	Perl_sv_usepvn_flags(pTHX_ SV *const sv, char* ptr, const STRLEN len, const U32 flags);
d4551 3
a4553 1
/* PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len); */
d4556 3
a4558 1
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *const sv);
d4561 3
a4563 1
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *const sv, const bool fail_ok);
d4566 3
a4568 1
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *const sv);
d4571 3
a4573 1
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade(pTHX_ SV *sv); */
d4576 6
a4581 2
/* PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags(pTHX_ SV *const sv, const I32 flags); */
PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade_flags_grow(pTHX_ SV *const sv, const I32 flags, STRLEN extra);
d4584 6
a4589 2
/* PERL_CALLCONV STRLEN	sv_utf8_upgrade_nomg(pTHX_ SV *sv); */
PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv);
d4592 4
a4595 1
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args);
d4598 4
a4601 1
PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args);
d4604 4
a4607 1
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted);
d4610 4
a4613 1
PERL_CALLCONV void	Perl_sv_vcatpvfn_flags(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted, const U32 flags);
d4616 4
a4619 1
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV *const sv, const char *const pat, va_list *const args);
d4622 4
a4625 1
PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV *const sv, const char *const pat, va_list *const args);
d4628 4
a4631 1
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const I32 svmax, bool *const maybe_tainted);
d4634 4
a4637 1
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *swash, const U8 *ptr, bool do_utf8);
d4640 1
d4642 4
a4645 1
			__attribute__warn_unused_result__;
d4649 4
a4652 2
PERL_CALLCONV void	Perl_sync_locale(pTHX);
PERL_CALLCONV void	Perl_sys_init(int* argc, char*** argv);
d4655 5
a4659 1
PERL_CALLCONV void	Perl_sys_init3(int* argc, char*** argv, char*** env);
d4662 1
d4665 2
a4666 1
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char *const s);
d4669 6
a4674 1
PERL_CALLCONV OP *	Perl_tied_method(pTHX_ SV *methname, SV **sp, SV *const sv, const MAGIC *const mg, const U32 flags, U32 argc, ...);
d4677 9
a4685 3
PERL_CALLCONV SSize_t	Perl_tmps_grow_p(pTHX_ SSize_t ix);
/* PERL_CALLCONV UV	Perl_to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp); */
PERL_CALLCONV UV	Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp);
d4688 1
d4694 3
a4696 1
PERL_CALLCONV UV	Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp);
d4699 1
d4705 3
a4707 1
PERL_CALLCONV UV	Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp);
d4710 1
d4717 4
a4720 1
			__attribute__deprecated__;
d4724 3
a4726 1
/* PERL_CALLCONV UV	Perl_to_utf8_fold(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp); */
d4729 4
a4732 1
/* PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp); */
d4735 4
a4738 1
/* PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp); */
d4741 4
a4744 1
/* PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ const U8 *p, U8* ustrp, STRLEN *lenp); */
d4747 1
d4750 5
a4754 1
PERL_CALLCONV I32	Perl_unpack_str(pTHX_ const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags);
d4757 6
a4762 1
PERL_CALLCONV I32	Perl_unpackstring(pTHX_ const char *pat, const char *patend, const char *s, const char *strend, U32 flags);
d4765 1
d4768 2
a4769 1
PERL_CALLCONV SV*	Perl_upg_version(pTHX_ SV *ver, bool qv);
d4772 5
a4776 1
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
d4779 5
a4783 1
PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
d4786 1
d4789 3
a4791 1
			__attribute__pure__;
d4795 1
a4795 1
PERL_CALLCONV U8*	Perl_utf8_hop(const U8 *s, SSize_t off)
d4797 2
a4798 1
			__attribute__pure__;
d4804 3
a4806 1
			__attribute__pure__;
d4810 3
a4812 1
PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len);
d4815 1
d4817 2
a4818 1
			__attribute__deprecated__;
d4822 4
a4825 1
/* PERL_CALLCONV UV	utf8_to_uvchr_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen); */
d4827 2
a4828 1
			__attribute__deprecated__;
d4833 3
a4835 1
			__attribute__deprecated__;
d4839 2
a4840 1
PERL_CALLCONV UV	Perl_utf8n_to_uvchr(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags);
d4843 3
a4845 1
PERL_CALLCONV UV	Perl_utf8n_to_uvuni(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags);
d4848 9
a4856 6
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* idop, OP* arg);
#define PERL_ARGS_ASSERT_UTILIZE	\
	assert(idop)
/* PERL_CALLCONV U8*	uvchr_to_utf8(pTHX_ U8 *d, UV uv); */
/* PERL_CALLCONV U8*	uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags); */
PERL_CALLCONV U8*	Perl_uvoffuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
d4859 3
a4861 1
PERL_CALLCONV U8*	Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv);
d4864 3
a4866 1
PERL_CALLCONV U8*	Perl_uvuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
d4869 3
a4871 1
PERL_CALLCONV UV	Perl_valid_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen);
d4874 1
d4876 2
a4877 1
			__attribute__deprecated__;
d4881 2
a4882 1
PERL_CALLCONV bool	Perl_validate_proto(pTHX_ SV *name, SV *proto, bool warn);
d4885 4
a4888 1
PERL_CALLCONV int	Perl_vcmp(pTHX_ SV *lhv, SV *rhv);
d4891 1
d4895 2
a4896 1
PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args);
d4899 3
a4901 1
PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args);
d4904 3
a4906 1
PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv);
d4909 1
d4911 2
a4912 1
			__attribute__warn_unused_result__;
d4916 2
a4917 1
PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args);
d4920 3
a4922 1
PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args);
d4925 1
d4928 2
a4929 1
			__attribute__warn_unused_result__;
d4933 2
a4934 1
PERL_CALLCONV SV*	Perl_vnormal(pTHX_ SV *vs);
d4937 3
a4939 1
PERL_CALLCONV SV*	Perl_vnumify(pTHX_ SV *vs);
d4942 3
a4944 1
PERL_CALLCONV SV*	Perl_vstringify(pTHX_ SV *vs);
d4947 3
a4949 1
PERL_CALLCONV SV*	Perl_vverify(pTHX_ SV *vs);
d4952 3
a4954 1
PERL_CALLCONV void	Perl_vwarn(pTHX_ const char* pat, va_list* args);
d4957 3
a4959 1
PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args);
d4962 3
a4964 1
PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags);
d4967 1
d4969 2
a4970 1
			__attribute__format__(__printf__,pTHX_1,pTHX_2);
d4974 2
a4975 1
PERL_CALLCONV void	Perl_warn_sv(pTHX_ SV *baseex);
d4978 1
d4980 2
a4981 1
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
d4988 2
a4989 1
PERL_CALLCONV void	Perl_watch(pTHX_ char** addr);
d4992 6
a4997 2
/* PERL_CALLCONV I32	whichsig(pTHX_ const char* sig); */
PERL_CALLCONV I32	Perl_whichsig_pv(pTHX_ const char* sig);
d5000 3
a5002 1
PERL_CALLCONV I32	Perl_whichsig_pvn(pTHX_ const char* sig, STRLEN len);
d5005 3
a5007 1
PERL_CALLCONV I32	Perl_whichsig_sv(pTHX_ SV* sigsv);
d5010 4
a5013 1
PERL_CALLCONV void	Perl_wrap_op_checker(pTHX_ Optype opcode, Perl_check_t new_checker, Perl_check_t *old_checker_p);
d5016 3
a5018 1
PERL_CALLCONV void	Perl_write_to_stderr(pTHX_ SV* msv);
d5021 14
a5034 5
PERL_CALLCONV void	Perl_xs_boot_epilog(pTHX_ const I32 ax);
PERL_CALLCONV I32	Perl_xs_handshake(const U32 key, void * v_my_perl, const char * file, ...);
#define PERL_ARGS_ASSERT_XS_HANDSHAKE	\
	assert(v_my_perl); assert(file)
PERL_CALLCONV int	Perl_yyerror(pTHX_ const char *const s);
d5037 3
a5039 1
PERL_CALLCONV int	Perl_yyerror_pv(pTHX_ const char *const s, U32 flags);
d5042 3
a5044 1
PERL_CALLCONV int	Perl_yyerror_pvn(pTHX_ const char *const s, STRLEN len, U32 flags);
d5047 1
d5054 2
a5055 1
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv);
d5058 1
d5070 2
a5071 1
PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd);
d5074 1
d5078 2
a5079 1
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ int *index, size_t size);
d5082 1
d5085 13
d5105 3
a5107 1
			__attribute__noreturn__;
d5113 2
a5114 1
PERL_CALLCONV void*	Perl_my_bzero(void* vloc, size_t len);
d5116 2
a5117 1
	assert(vloc)
d5120 3
a5122 1
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char *env_elem, unsigned long *len);
d5125 1
d5128 4
a5131 2
PERL_CALLCONV int	Perl_my_memcmp(const void* vs1, const void* vs2, size_t len)
			__attribute__pure__;
d5133 1
a5133 1
	assert(vs1); assert(vs2)
a5135 5
#if !defined(HAS_MEMCPY) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY))
PERL_CALLCONV void*	Perl_my_bcopy(const void* vfrom, void* vto, size_t len);
#define PERL_ARGS_ASSERT_MY_BCOPY	\
	assert(vfrom); assert(vto)
#endif
d5137 2
a5138 1
PERL_CALLCONV void*	Perl_my_memset(void* vloc, int ch, size_t len);
d5140 2
a5141 1
	assert(vloc)
d5146 3
a5148 1
			__attribute__warn_unused_result__;
d5155 3
a5157 1
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ const char* a, const char* b);
d5160 1
d5181 2
a5182 1
STATIC int	S_sv_2iuv_non_preserve(pTHX_ SV *const sv, I32 numtype);
d5185 1
d5192 2
a5193 1
			__attribute__warn_unused_result__;
d5199 7
a5205 14
#if !defined(PERL_EXT_RE_BUILD)
#  if defined(PERL_IN_REGCOMP_C)
PERL_STATIC_INLINE IV*	S_get_invlist_previous_index_addr(SV* invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_INVLIST_PREVIOUS_INDEX_ADDR	\
	assert(invlist)

PERL_STATIC_INLINE void	S_invlist_clear(pTHX_ SV* invlist);
#define PERL_ARGS_ASSERT_INVLIST_CLEAR	\
	assert(invlist)
PERL_STATIC_INLINE IV	S_invlist_previous_index(SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_PREVIOUS_INDEX	\
	assert(invlist)
a5206 16
STATIC void	S_invlist_replace_list_destroys_src(pTHX_ SV *dest, SV *src);
#define PERL_ARGS_ASSERT_INVLIST_REPLACE_LIST_DESTROYS_SRC	\
	assert(dest); assert(src)
PERL_STATIC_INLINE void	S_invlist_set_previous_index(SV* const invlist, const IV index);
#define PERL_ARGS_ASSERT_INVLIST_SET_PREVIOUS_INDEX	\
	assert(invlist)
PERL_STATIC_INLINE void	S_invlist_trim(SV* invlist);
#define PERL_ARGS_ASSERT_INVLIST_TRIM	\
	assert(invlist)
#  endif
#endif
#if !defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV I32	Perl_my_pclose(pTHX_ PerlIO* ptr);
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ const char* cmd, const char* mode);
#define PERL_ARGS_ASSERT_MY_POPEN	\
	assert(cmd); assert(mode)
d5210 4
a5213 1
STATIC SV *	S_incpush_if_exists(pTHX_ AV *const av, SV *dir, SV *const stem);
d5216 1
a5218 77
#if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE STRLEN	S__is_utf8_char_slow(const U8 *s, const U8 *e)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__IS_UTF8_CHAR_SLOW	\
	assert(s); assert(e)

PERL_STATIC_INLINE void	S_append_utf8_from_native_byte(const U8 byte, U8** dest);
#define PERL_ARGS_ASSERT_APPEND_UTF8_FROM_NATIVE_BYTE	\
	assert(dest)
PERL_STATIC_INLINE SSize_t	S_av_top_index(pTHX_ AV *av)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_AV_TOP_INDEX	\
	assert(av)

PERL_STATIC_INLINE void	S_cx_popblock(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPBLOCK	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popeval(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPEVAL	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popformat(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPFORMAT	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popgiven(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPGIVEN	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_poploop(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPLOOP	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popsub(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popsub_args(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB_ARGS	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popsub_common(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB_COMMON	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_popwhen(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPWHEN	\
	assert(cx)
PERL_STATIC_INLINE PERL_CONTEXT *	S_cx_pushblock(pTHX_ U8 type, U8 gimme, SV** sp, I32 saveix);
#define PERL_ARGS_ASSERT_CX_PUSHBLOCK	\
	assert(sp)
PERL_STATIC_INLINE void	S_cx_pusheval(pTHX_ PERL_CONTEXT *cx, OP *retop, SV *namesv);
#define PERL_ARGS_ASSERT_CX_PUSHEVAL	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_pushformat(pTHX_ PERL_CONTEXT *cx, CV *cv, OP *retop, GV *gv);
#define PERL_ARGS_ASSERT_CX_PUSHFORMAT	\
	assert(cx); assert(cv)
PERL_STATIC_INLINE void	S_cx_pushgiven(pTHX_ PERL_CONTEXT *cx, SV *orig_defsv);
#define PERL_ARGS_ASSERT_CX_PUSHGIVEN	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_pushloop_for(pTHX_ PERL_CONTEXT *cx, void *itervarp, SV *itersave);
#define PERL_ARGS_ASSERT_CX_PUSHLOOP_FOR	\
	assert(cx); assert(itervarp)
PERL_STATIC_INLINE void	S_cx_pushloop_plain(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_PUSHLOOP_PLAIN	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_pushsub(pTHX_ PERL_CONTEXT *cx, CV *cv, OP *retop, bool hasargs);
#define PERL_ARGS_ASSERT_CX_PUSHSUB	\
	assert(cx); assert(cv)
PERL_STATIC_INLINE void	S_cx_pushwhen(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_PUSHWHEN	\
	assert(cx)
PERL_STATIC_INLINE void	S_cx_topblock(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_TOPBLOCK	\
	assert(cx)
PERL_STATIC_INLINE bool	S_is_safe_syscall(pTHX_ const char *pv, STRLEN len, const char *what, const char *op_name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_SAFE_SYSCALL	\
	assert(pv); assert(what); assert(op_name)

PERL_STATIC_INLINE bool	S_sv_only_taint_gmagic(SV *sv);
#define PERL_ARGS_ASSERT_SV_ONLY_TAINT_GMAGIC	\
	assert(sv)
#endif
d5221 2
a5222 1
STATIC U8*	S_add_utf16_textfilter(pTHX_ U8 *const s, bool reversed);
d5225 3
a5227 1
STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen);
d5230 1
d5235 2
a5236 1
STATIC void	S_validate_suid(pTHX_ PerlIO *rsfp);
d5239 1
d5243 3
a5245 1
PERL_CALLCONV int	Perl_my_sprintf(char *buffer, const char *pat, ...);
d5248 1
a5248 5
#endif
#if !defined(USE_QUADMATH)
#  if defined(PERL_IN_NUMERIC_C)
STATIC NV	S_mulexp10(NV value, I32 exponent);
#  endif
d5251 2
a5252 1
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report);
d5255 9
d5267 2
a5268 1
			__attribute__warn_unused_result__;
d5272 2
a5273 1
PERL_CALLCONV void	Perl_hv_assert(pTHX_ HV *hv);
d5276 3
a5278 1
PERL_CALLCONV void	Perl_pad_setsv(pTHX_ PADOFFSET po, SV* sv);
d5281 1
a5282 3
PERL_CALLCONV void	Perl_set_padlist(CV * cv, PADLIST * padlist);
#define PERL_ARGS_ASSERT_SET_PADLIST	\
	assert(cv)
d5284 3
a5286 1
STATIC void	S_cv_dump(pTHX_ const CV *cv, const char *title);
d5289 1
d5292 3
a5294 1
STATIC void	S_dump_trie(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 depth);
d5297 4
a5300 1
STATIC void	S_dump_trie_interim_list(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth);
d5303 4
a5306 1
STATIC void	S_dump_trie_interim_table(pTHX_ const struct _reg_trie_data *trie, HV* widecharmap, AV *revcharmap, U32 next_alloc, U32 depth);
d5309 6
a5314 1
STATIC const regnode*	S_dumpuntil(pTHX_ const regexp *r, const regnode *start, const regnode *node, const regnode *last, const regnode *plast, SV* sv, I32 indent, U32 depth);
d5317 10
a5326 2
STATIC bool	S_put_charclass_bitmap_innards(pTHX_ SV* sv, char* bitmap, SV* nonbitmap_invlist, SV* only_utf8_locale_invlist, const regnode * const node);
#define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS	\
d5328 3
a5330 10
STATIC SV*	S_put_charclass_bitmap_innards_common(pTHX_ SV* invlist, SV* posixes, SV* only_utf8, SV* not_utf8, SV* only_utf8_locale, const bool invert);
#define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS_COMMON	\
	assert(invlist)
STATIC void	S_put_charclass_bitmap_innards_invlist(pTHX_ SV *sv, SV* invlist);
#define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS_INVLIST	\
	assert(sv); assert(invlist)
STATIC void	S_put_code_point(pTHX_ SV* sv, UV c);
#define PERL_ARGS_ASSERT_PUT_CODE_POINT	\
	assert(sv)
STATIC void	S_put_range(pTHX_ SV* sv, UV start, const UV end, const bool allow_literals);
d5333 1
a5333 3
PERL_CALLCONV int	Perl_re_indentf(pTHX_ const char *fmt, U32 depth, ...);
#define PERL_ARGS_ASSERT_RE_INDENTF	\
	assert(fmt)
d5336 4
a5339 1
STATIC U8	S_regtail_study(pTHX_ RExC_state_t *pRExC_state, regnode *p, const regnode *val, U32 depth);
d5342 1
d5345 5
a5349 1
STATIC void	S_debug_start_match(pTHX_ const REGEXP *prog, const bool do_utf8, const char *start, const char *end, const char *blurb);
d5352 7
a5358 1
STATIC void	S_dump_exec_pos(pTHX_ const char *locinput, const regnode *scan, const char *loc_regeol, const char *loc_bostr, const char *loc_reg_starttry, const bool do_utf8, const U32 depth);
d5361 1
a5361 3
PERL_CALLCONV int	Perl_re_exec_indentf(pTHX_ const char *fmt, U32 depth, ...);
#define PERL_ARGS_ASSERT_RE_EXEC_INDENTF	\
	assert(fmt)
d5364 2
a5365 1
STATIC void	S_del_sv(pTHX_ SV *p);
d5368 1
d5372 3
a5374 1
			__attribute__format__(__printf__,pTHX_1,0);
d5378 2
a5379 1
STATIC int	S_tokereport(pTHX_ I32 rv, const YYSTYPE* lvalp);
a5381 5
#  endif
#  if defined(USE_LOCALE)     && (defined(PERL_IN_LOCALE_C) || defined (PERL_EXT_POSIX))
PERL_CALLCONV char *	Perl__setlocale_debug_string(const int category, const char* const locale, const char* const retval)
			__attribute__warn_unused_result__
			__attribute__pure__;
d5386 2
a5387 1
PERL_CALLCONV void	Perl_dump_sv_child(pTHX_ SV *sv);
d5390 1
d5393 3
a5395 1
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp);
d5398 4
a5401 1
PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp);
d5404 4
a5407 1
PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp);
d5410 4
a5413 1
PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp);
d5416 4
a5419 1
PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp);
d5422 4
a5425 1
PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp);
d5428 1
d5438 3
a5440 1
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst);
d5443 1
d5447 2
a5448 1
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ const char* s);
d5451 3
a5453 1
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level);
d5456 1
d5461 2
a5462 1
			__attribute__warn_unused_result__;
d5471 2
a5472 1
PERL_CALLCONV SV*	Perl_sv_setsv_cow(pTHX_ SV* dstr, SV* sstr);
d5475 1
d5478 2
a5479 1
PERL_CALLCONV void	Perl_opslab_force_free(pTHX_ OPSLAB *slab);
d5482 3
a5484 1
PERL_CALLCONV void	Perl_opslab_free(pTHX_ OPSLAB *slab);
d5487 3
a5489 1
PERL_CALLCONV void	Perl_opslab_free_nopad(pTHX_ OPSLAB *slab);
d5492 4
a5495 1
PERL_CALLCONV void	Perl_parser_free_nexttoke_ops(pTHX_ yy_parser *parser, OPSLAB *slab);
a5497 4
PERL_STATIC_INLINE bool	S_should_warn_nl(const char *pv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SHOULD_WARN_NL	\
	assert(pv)
d5500 2
a5501 1
PERL_CALLCONV void	Perl_Slab_to_ro(pTHX_ OPSLAB *slab);
d5504 3
a5506 1
PERL_CALLCONV void	Perl_Slab_to_rw(pTHX_ OPSLAB *const slab);
d5509 1
d5513 3
a5515 1
PERL_STATIC_INLINE STRLEN	S_sv_or_pv_pos_u2b(pTHX_ SV *sv, const char *pv, STRLEN pos, STRLEN *lenp);
d5518 1
d5523 2
a5524 1
STATIC void	S_strip_return(pTHX_ SV *sv);
d5527 1
d5531 2
a5532 1
PERL_CALLCONV void	Perl_sv_buf_to_ro(pTHX_ SV *sv);
d5535 1
d5537 2
a5538 1
STATIC void	S_sv_buf_to_rw(pTHX_ SV *sv);
d5541 1
d5545 2
a5546 1
PERL_CALLCONV PADOFFSET	Perl_op_refcnt_dec(pTHX_ OP *o);
d5549 1
d5553 3
a5555 1
/* PERL_CALLCONV bool	Perl_do_exec(pTHX_ const char* cmd); */
d5562 2
a5563 1
PERL_CALLCONV void	Perl_free_global_struct(pTHX_ struct perl_vars *plvarsp);
d5566 1
d5571 2
a5572 1
PERL_CALLCONV int	Perl_my_cxt_index(pTHX_ const char *my_cxt_key);
d5575 3
a5577 1
PERL_CALLCONV void*	Perl_my_cxt_init(pTHX_ const char *my_cxt_key, size_t size);
d5580 1
d5589 2
a5590 1
			__attribute__format__(__printf__,1,2);
d5594 1
a5594 2
PERL_CALLCONV_NO_RET OP*	Perl_die_nocontext(const char* pat, ...)
			__attribute__noreturn__
d5598 2
a5599 1
			__attribute__format__(__printf__,1,2);
d5604 3
a5606 1
			__attribute__format__(__printf__,2,3);
d5610 2
a5611 1
PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...);
d5614 1
d5616 2
a5617 1
			__attribute__format__(__printf__,1,2);
d5622 2
a5623 1
			__attribute__format__(__printf__,1,2);
d5628 2
a5629 1
			__attribute__format__(__printf__,1,2);
d5634 3
a5636 1
			__attribute__format__(__printf__,2,3);
d5641 3
a5643 1
			__attribute__format__(__printf__,2,3);
d5648 3
a5650 1
			__attribute__format__(__printf__,2,3);
d5655 3
a5657 1
			__attribute__format__(__printf__,2,3);
d5662 2
a5663 1
			__attribute__format__(__printf__,1,2);
d5668 2
a5669 1
			__attribute__format__(__printf__,2,3);
d5675 10
a5684 1
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem *ipM, struct IPerlMem *ipMS, struct IPerlMem *ipMP, struct IPerlEnv *ipE, struct IPerlStdIO *ipStd, struct IPerlLIO *ipLIO, struct IPerlDir *ipD, struct IPerlSock *ipS, struct IPerlProc *ipP);
d5687 1
d5689 11
a5699 1
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *proto_perl, UV flags, struct IPerlMem* ipM, struct IPerlMem* ipMS, struct IPerlMem* ipMP, struct IPerlEnv* ipE, struct IPerlStdIO* ipStd, struct IPerlLIO* ipLIO, struct IPerlDir* ipD, struct IPerlSock* ipS, struct IPerlProc* ipP);
d5702 1
d5706 2
a5707 1
STATIC MAGIC*	S_get_aux_mg(pTHX_ AV *av);
d5710 1
d5713 2
a5714 1
STATIC void	S_deb_stack_n(pTHX_ SV** stack_base, I32 stack_min, I32 stack_max, I32 mark_min, I32 mark_max);
d5717 1
d5720 2
a5721 1
STATIC void	S_exec_failed(pTHX_ const char *cmd, int fd, int do_report);
d5724 1
d5728 5
a5732 1
STATIC bool	S_openn_cleanup(pTHX_ GV *gv, IO *io, PerlIO *fp, char *mode, const char *oname, PerlIO *saveifp, PerlIO *saveofp, int savefd, char savetype, int writing, bool was_fdopen, const char *type);
d5735 8
a5742 1
STATIC IO *	S_openn_setup(pTHX_ GV *gv, char *mode, PerlIO **saveifp, PerlIO **saveofp, int *savefd, char *savetype);
d5745 1
d5749 2
a5750 1
			__attribute__warn_unused_result__;
d5755 2
a5756 1
			__attribute__warn_unused_result__;
d5761 2
a5762 1
			__attribute__warn_unused_result__;
d5767 2
a5768 1
			__attribute__warn_unused_result__;
d5773 2
a5774 1
			__attribute__warn_unused_result__;
d5779 2
a5780 1
			__attribute__warn_unused_result__;
d5786 3
a5788 2
STATIC CV*	S_deb_curcv(pTHX_ I32 ix);
STATIC void	S_debprof(pTHX_ const OP *o);
d5791 3
a5793 1
STATIC SV*	S_pm_description(pTHX_ const PMOP *pm);
d5796 1
d5798 9
d5809 2
a5810 1
PERL_CALLCONV void	Perl_hv_kill_backrefs(pTHX_ HV *hv);
d5813 1
d5816 3
a5818 1
STATIC bool	S_find_default_stash(pTHX_ HV **stash, const char *name, STRLEN len, const U32 is_utf8, const I32 add, const svtype sv_type);
d5821 3
a5823 2
PERL_STATIC_INLINE GV*	S_gv_fetchmeth_internal(pTHX_ HV* stash, SV* meth, const char* name, STRLEN len, I32 level, U32 flags);
STATIC void	S_gv_init_svtype(pTHX_ GV *gv, const svtype sv_type);
d5826 3
a5828 1
STATIC bool	S_gv_is_in_main(pTHX_ const char *name, STRLEN len, const U32 is_utf8);
d5831 5
a5835 1
STATIC bool	S_gv_magicalize(pTHX_ GV *gv, HV *stash, const char *name, STRLEN len, bool addmg, const svtype sv_type);
d5838 3
a5840 1
STATIC void	S_gv_magicalize_isa(pTHX_ GV *gv);
d5843 4
a5846 5
PERL_STATIC_INLINE HV*	S_gv_stashpvn_internal(pTHX_ const char* name, U32 namelen, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHPVN_INTERNAL	\
	assert(name)
PERL_STATIC_INLINE HV*	S_gv_stashsvpvn_cached(pTHX_ SV *namesv, const char* name, U32 namelen, I32 flags);
STATIC void	S_maybe_multimagic_gv(pTHX_ GV *gv, const char *name, const svtype sv_type);
d5849 7
a5855 1
STATIC bool	S_parse_gv_stash_name(pTHX_ HV **stash, GV **gv, const char **name, STRLEN *len, const char *nambeg, STRLEN full_len, const U32 is_utf8, const I32 add);
d5858 6
a5863 1
STATIC HV*	S_require_tie_mod(pTHX_ GV *gv, const char *varpv, SV* namesv, const char *methpv, const U32 flags);
d5866 1
d5869 3
a5871 1
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *const tsv, SV *const sv);
d5874 1
d5877 2
a5878 1
STATIC void	S_clear_placeholders(pTHX_ HV *hv, U32 items);
d5881 3
a5883 1
STATIC void	S_hfreeentries(pTHX_ HV *hv);
d5886 3
a5888 1
STATIC void	S_hsplit(pTHX_ HV *hv, STRLEN const oldsize, STRLEN newsize);
d5891 3
a5893 1
STATIC struct xpvhv_aux*	S_hv_auxinit(pTHX_ HV *hv);
d5896 3
a5898 1
STATIC struct xpvhv_aux*	S_hv_auxinit_internal(struct xpvhv_aux *iter);
d5901 1
d5903 3
a5905 1
STATIC SV*	S_hv_free_ent_ret(pTHX_ HV *hv, HE *entry);
d5908 5
a5912 1
STATIC void	S_hv_magic_check(HV *hv, bool *needs_copy, bool *needs_store);
d5915 1
d5917 3
a5919 1
			__attribute__noreturn__;
d5928 2
a5929 1
STATIC SV *	S_refcounted_he_value(pTHX_ const struct refcounted_he *he);
d5932 1
d5935 2
a5936 1
			__attribute__warn_unused_result__;
d5941 2
a5942 1
			__attribute__warn_unused_result__;
d5949 2
a5950 1
PERL_CALLCONV void	Perl_sv_kill_backrefs(pTHX_ SV *const sv, AV *const av);
d5953 1
d5956 3
a5958 1
PERL_CALLCONV SV*	Perl_hfree_next_entry(pTHX_ HV *hv, STRLEN *indexp);
d5961 9
d5972 2
a5973 1
STATIC int	S_adjust_size_and_find_bucket(size_t *nbytes_p);
d5976 1
d5979 2
a5980 1
STATIC void	S_fixup_errno_string(pTHX_ SV* sv);
d5983 5
a5987 1
STATIC SV*	S_magic_methcall1(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, int n, SV *val);
d5990 5
a5994 1
STATIC int	S_magic_methpack(pTHX_ SV *sv, const MAGIC *mg, SV *meth);
d5997 1
d5999 2
a6000 1
STATIC void	S_save_magic_flags(pTHX_ I32 mgs_ix, SV *sv, U32 flags);
d6003 1
d6007 3
a6009 1
PERL_CALLCONV bool	Perl_translate_substr_offsets(STRLEN curlen, IV pos1_iv, bool pos1_is_uv, IV len_iv, bool len_is_uv, STRLEN *posp, STRLEN *lenp);
d6012 1
d6015 3
a6017 1
STATIC void	S_mro_clean_isarev(pTHX_ HV * const isa, const char * const name, const STRLEN len, HV * const exceptions, U32 hash, U32 flags);
d6020 5
a6024 1
STATIC void	S_mro_gather_and_rename(pTHX_ HV * const stashes, HV * const seen_stashes, HV *stash, HV *oldstash, SV *namesv);
d6027 3
a6029 1
STATIC AV*	S_mro_get_linear_isa_dfs(pTHX_ HV* stash, U32 level);
d6032 4
d6038 4
a6041 1
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs);
d6044 5
a6048 1
STATIC void	S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp);
a6050 2
STATIC I32	S_assignment_type(pTHX_ const OP *o)
			__attribute__warn_unused_result__;
d6052 4
a6055 1
STATIC void	S_bad_type_gv(pTHX_ I32 n, GV *gv, const OP *kid, const char *t);
d6057 6
a6062 2
	assert(gv); assert(kid); assert(t)
STATIC void	S_bad_type_pv(pTHX_ I32 n, const char *t, const OP *o, const OP *kid);
d6064 4
a6067 5
	assert(t); assert(o); assert(kid)
STATIC void	S_clear_special_blocks(pTHX_ const char *const fullname, GV *const gv, CV *const cv);
#define PERL_ARGS_ASSERT_CLEAR_SPECIAL_BLOCKS	\
	assert(fullname); assert(gv); assert(cv)
STATIC void	S_cop_free(pTHX_ COP *cop);
d6070 3
a6072 1
STATIC OP *	S_dup_attrlist(pTHX_ OP *o);
d6075 3
a6077 1
STATIC void	S_finalize_op(pTHX_ OP* o);
d6080 3
a6082 1
STATIC void	S_find_and_forget_pmops(pTHX_ OP *o);
d6085 3
a6087 1
STATIC OP*	S_fold_constants(pTHX_ OP *o);
d6090 4
a6093 2
STATIC OP*	S_force_list(pTHX_ OP* arg, bool nullit);
STATIC void	S_forget_pmop(pTHX_ PMOP *const o);
d6096 1
d6098 7
a6104 1
STATIC void	S_inplace_aassign(pTHX_ OP* o);
d6107 1
d6109 2
a6110 1
			__attribute__warn_unused_result__;
d6114 3
d6118 2
a6119 1
STATIC bool	S_looks_like_bool(pTHX_ const OP* o);
d6122 1
d6124 4
a6127 1
STATIC void	S_move_proto_attr(pTHX_ OP **proto, OP **attrs, const GV *name);
d6130 3
a6132 1
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp);
d6135 6
a6140 1
STATIC OP*	S_newGIVWHENOP(pTHX_ OP* cond, OP *block, I32 enter_opcode, I32 leave_opcode, PADOFFSET entertarg);
d6143 1
a6143 1
PERL_STATIC_INLINE OP*	S_newMETHOP_internal(pTHX_ I32 type, I32 flags, OP* dynamic_meth, SV* const_meth);
d6145 3
a6147 1
			__attribute__warn_unused_result__;
d6151 2
a6152 1
STATIC void	S_no_bareword_allowed(pTHX_ OP *o);
d6155 1
d6157 2
a6158 1
			__attribute__warn_unused_result__;
d6162 7
a6168 1
PERL_STATIC_INLINE OP*	S_op_integerize(pTHX_ OP *o);
d6171 3
a6173 1
PERL_STATIC_INLINE OP*	S_op_std_init(pTHX_ OP *o);
d6176 5
a6180 1
STATIC OP*	S_pmtrans(pTHX_ OP* o, OP* expr, OP* repl);
d6183 5
a6187 1
STATIC bool	S_process_special_blocks(pTHX_ I32 floor, const char *const fullname, GV *const gv, CV *const cv);
d6190 1
d6196 2
a6197 1
STATIC OP*	S_scalarboolean(pTHX_ OP *o);
d6200 1
d6204 2
a6205 1
			__attribute__warn_unused_result__;
d6209 2
a6210 1
STATIC void	S_simplify_sort(pTHX_ OP *o);
d6213 1
d6215 3
a6217 1
			__attribute__warn_unused_result__;
d6221 10
a6230 1
STATIC OP*	S_too_many_arguments_pv(pTHX_ OP *o, const char* name, U32 flags);
d6233 8
a6240 5
#  if defined(USE_ITHREADS)
PERL_STATIC_INLINE void	S_op_relocate_sv(pTHX_ SV** svp, PADOFFSET* targp);
#define PERL_ARGS_ASSERT_OP_RELOCATE_SV	\
	assert(svp); assert(targp)
#  endif
d6243 3
a6245 1
PERL_CALLCONV void	Perl_report_redefined_cv(pTHX_ const SV *name, const CV *old_cv, SV * const *new_const_svp);
d6248 1
d6251 2
a6252 1
STATIC PADOFFSET	S_pad_alloc_name(pTHX_ PADNAME *name, U32 flags, HV *typestash, HV *ourstash);
d6254 4
a6257 2
	assert(name)
STATIC void	S_pad_check_dup(pTHX_ PADNAME *name, U32 flags, const HV *ourstash);
d6260 6
a6265 1
STATIC PADOFFSET	S_pad_findlex(pTHX_ const char *namepv, STRLEN namelen, U32 flags, const CV* cv, U32 seq, int warn, SV** out_capture, PADNAME** out_name, int *out_flags);
d6267 2
a6268 1
	assert(namepv); assert(cv); assert(out_name); assert(out_flags)
d6272 3
a6274 1
STATIC void	S_find_beginning(pTHX_ SV* linestr_sv, PerlIO *rsfp);
d6277 1
d6279 2
a6280 1
STATIC void	S_incpush(pTHX_ const char *const dir, STRLEN len, U32 flags);
d6283 3
a6285 1
STATIC void	S_incpush_use_sep(pTHX_ const char *p, STRLEN len, U32 flags);
d6288 1
d6293 2
a6294 1
STATIC void	S_init_postdump_symbols(pTHX_ int argc, char **argv, char **env);
d6297 1
d6299 2
a6300 1
STATIC SV*	S_mayberelocate(pTHX_ const char *const dir, STRLEN len, U32 flags);
d6303 1
d6311 3
a6313 1
STATIC PerlIO *	S_open_script(pTHX_ const char *scriptname, bool dosearch, bool *suidscript);
d6316 1
d6326 3
a6328 1
STATIC size_t	S_do_chomp(pTHX_ SV *retval, SV *sv, bool chomping);
d6331 1
d6334 2
a6335 1
			__attribute__warn_unused_result__;
d6342 4
a6345 1
			__attribute__warn_unused_result__;
d6351 7
d6359 2
a6360 1
			__attribute__warn_unused_result__;
d6364 2
a6365 1
STATIC void	S_destroy_matcher(pTHX_ PMOP* matcher);
d6368 1
d6373 1
a6373 1
STATIC bool	S_doeval_compile(pTHX_ U8 gimme, CV* outside, U32 seq, HV* hh);
d6375 5
a6379 1
			__attribute__warn_unused_result__;
d6383 2
a6384 1
STATIC MAGIC *	S_doparseform(pTHX_ SV *sv);
d6387 1
d6391 1
a6391 1
STATIC I32	S_dopoptogivenfor(pTHX_ I32 startingblock)
d6395 2
a6396 1
			__attribute__warn_unused_result__;
d6404 2
a6405 1
			__attribute__warn_unused_result__;
d6413 2
a6414 1
			__attribute__warn_unused_result__;
d6419 3
a6421 1
			__attribute__warn_unused_result__;
d6429 2
a6430 1
			__attribute__warn_unused_result__;
d6435 2
a6436 1
			__attribute__warn_unused_result__;
d6440 2
a6441 1
STATIC void	S_rxres_free(pTHX_ void** rsp);
d6444 4
a6447 1
STATIC void	S_rxres_restore(pTHX_ void **rsp, REGEXP *rx);
d6450 3
a6452 1
STATIC void	S_save_lines(pTHX_ AV *array, SV *sv);
d6455 1
d6458 3
a6460 1
STATIC void	S_do_oddball(pTHX_ SV **oddkey, SV **firstkey);
d6463 5
a6467 2
PERL_STATIC_INLINE HV*	S_opmethod_stash(pTHX_ SV* meth);
#define PERL_ARGS_ASSERT_OPMETHOD_STASH	\
d6469 1
d6472 10
a6481 1
STATIC int	S_div128(pTHX_ SV *pnum, bool *done);
d6484 4
a6487 1
STATIC char	S_first_symbol(const char *pat, const char *patend);
d6490 1
d6492 3
a6494 1
			__attribute__warn_unused_result__;
d6498 3
a6500 1
STATIC const char *	S_group_end(pTHX_ const char *patptr, const char *patend, char ender);
d6503 1
d6505 2
a6506 1
			__attribute__warn_unused_result__;
d6510 2
a6511 1
STATIC I32	S_measure_struct(pTHX_ struct tempsym* symptr);
d6514 3
a6516 1
STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m);
a6518 4
STATIC char *	S_my_bytes_to_utf8(const U8 *start, STRLEN len, char *dest, const bool needs_swap)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MY_BYTES_TO_UTF8	\
	assert(start); assert(dest)
d6520 3
a6522 1
STATIC bool	S_need_utf8(const char *pat, const char *patend);
d6525 3
a6527 1
STATIC bool	S_next_symbol(pTHX_ struct tempsym* symptr);
d6530 6
a6535 1
STATIC SV **	S_pack_rec(pTHX_ SV *cat, struct tempsym* symptr, SV **beglist, SV **endlist);
d6538 1
d6540 2
a6541 1
			__attribute__warn_unused_result__;
d6545 5
a6549 1
STATIC I32	S_unpack_rec(pTHX_ struct tempsym* symptr, const char *s, const char *strbeg, const char *strend, const char **new_s);
d6552 1
d6555 3
a6557 1
STATIC I32	S_amagic_cmp(pTHX_ SV *const str1, SV *const str2);
d6560 10
a6569 1
STATIC I32	S_amagic_i_ncmp(pTHX_ SV *const a, SV *const b);
d6572 4
a6575 1
STATIC I32	S_amagic_ncmp(pTHX_ SV *const a, SV *const b);
d6578 3
a6580 1
STATIC void	S_qsortsvu(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t compare);
d6583 4
a6586 1
STATIC I32	S_sortcv(pTHX_ SV *const a, SV *const b);
d6589 4
a6592 1
STATIC I32	S_sortcv_stacked(pTHX_ SV *const a, SV *const b);
d6595 4
a6598 1
STATIC I32	S_sortcv_xsub(pTHX_ SV *const a, SV *const b);
d6601 4
a6604 1
STATIC I32	S_sv_i_ncmp(pTHX_ SV *const a, SV *const b);
d6607 4
a6610 1
STATIC I32	S_sv_ncmp(pTHX_ SV *const a, SV *const b);
d6613 1
a6613 5
#  if defined(USE_LOCALE_COLLATE)
STATIC I32	S_amagic_cmp_locale(pTHX_ SV *const str1, SV *const str2);
#define PERL_ARGS_ASSERT_AMAGIC_CMP_LOCALE	\
	assert(str1); assert(str2)
#  endif
d6616 3
a6618 1
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop);
d6621 3
a6623 1
STATIC SV *	S_space_join_names_mortal(pTHX_ char *const *array);
d6626 1
d6629 2
a6630 1
STATIC void	S__append_range_to_invlist(pTHX_ SV* const invlist, const UV start, const UV end);
d6633 4
a6636 2
PERL_STATIC_INLINE UV*	S__invlist_array_init(SV* const invlist, const bool will_have_0)
			__attribute__warn_unused_result__;
a6639 8
STATIC SV*	S__make_exactf_invlist(pTHX_ RExC_state_t *pRExC_state, regnode *node)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT__MAKE_EXACTF_INVLIST	\
	assert(pRExC_state); assert(node)

STATIC void	S_add_above_Latin1_folds(pTHX_ RExC_state_t *pRExC_state, const U8 cp, SV** invlist);
#define PERL_ARGS_ASSERT_ADD_ABOVE_LATIN1_FOLDS	\
	assert(pRExC_state); assert(invlist)
d6644 3
a6646 1
			__attribute__warn_unused_result__;
d6650 4
a6653 4
STATIC AV*	S_add_multi_match(pTHX_ AV* multi_char_matches, SV* multi_string, const STRLEN cp_count);
#define PERL_ARGS_ASSERT_ADD_MULTI_MATCH	\
	assert(multi_string)
PERL_STATIC_INLINE void	S_alloc_maybe_populate_EXACT(pTHX_ RExC_state_t *pRExC_state, regnode *node, I32 *flagp, STRLEN len, UV code_point, bool downgradable);
a6655 2
STATIC const char *	S_cntrl_to_mnemonic(const U8 c)
			__attribute__pure__;
d6657 2
a6658 1
PERL_STATIC_INLINE U8	S_compute_EXACTish(RExC_state_t *pRExC_state);
a6660 7
STATIC regnode *	S_construct_ahocorasick_from_trie(pTHX_ RExC_state_t *pRExC_state, regnode *source, U32 depth);
#define PERL_ARGS_ASSERT_CONSTRUCT_AHOCORASICK_FROM_TRIE	\
	assert(pRExC_state); assert(source)
STATIC int	S_edit_distance(const UV *src, const UV *tgt, const STRLEN x, const STRLEN y, const SSize_t maxDistance)
			__attribute__pure__;
#define PERL_ARGS_ASSERT_EDIT_DISTANCE	\
	assert(src); assert(tgt)
d6662 8
a6669 1
STATIC SV*	S_get_ANYOF_cp_list_for_ssc(pTHX_ const RExC_state_t *pRExC_state, const regnode_charclass* const node);
d6672 4
a6675 2
PERL_STATIC_INLINE STRLEN*	S_get_invlist_iter_addr(SV* invlist)
			__attribute__warn_unused_result__;
d6679 9
a6687 1
STATIC bool	S_grok_bslash_N(pTHX_ RExC_state_t *pRExC_state, regnode** nodep, UV *code_point_p, int* cp_count, I32 *flagp, const bool strict, const U32 depth);
d6690 5
a6694 7
PERL_STATIC_INLINE regnode*	S_handle_named_backref(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, char * parse_start, char ch);
#define PERL_ARGS_ASSERT_HANDLE_NAMED_BACKREF	\
	assert(pRExC_state); assert(flagp); assert(parse_start)
STATIC int	S_handle_possible_posix(pTHX_ RExC_state_t *pRExC_state, const char* const s, char ** updated_parse_ptr, AV** posix_warnings, const bool check_only);
#define PERL_ARGS_ASSERT_HANDLE_POSSIBLE_POSIX	\
	assert(pRExC_state); assert(s)
STATIC regnode*	S_handle_regex_sets(pTHX_ RExC_state_t *pRExC_state, SV ** return_invlist, I32 *flagp, U32 depth, char * const oregcomp_parse);
d6697 7
d6705 2
a6706 1
			__attribute__warn_unused_result__;
d6710 3
a6712 3
STATIC SV*	S_invlist_contents(pTHX_ SV* const invlist, const bool traditional_style)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_CONTENTS	\
d6715 3
a6717 5
STATIC void	S_invlist_extend(pTHX_ SV* const invlist, const UV len);
#define PERL_ARGS_ASSERT_INVLIST_EXTEND	\
	assert(invlist)
PERL_STATIC_INLINE UV	S_invlist_highest(SV* const invlist)
			__attribute__warn_unused_result__;
d6721 3
a6723 2
PERL_STATIC_INLINE bool	S_invlist_is_iterating(SV* const invlist)
			__attribute__warn_unused_result__;
d6727 2
a6728 1
PERL_STATIC_INLINE void	S_invlist_iterfinish(SV* invlist);
d6731 3
a6733 1
PERL_STATIC_INLINE void	S_invlist_iterinit(SV* invlist);
d6736 6
a6741 2
STATIC bool	S_invlist_iternext(SV* invlist, UV* start, UV* end)
			__attribute__warn_unused_result__;
d6745 3
a6747 2
PERL_STATIC_INLINE UV	S_invlist_max(SV* const invlist)
			__attribute__warn_unused_result__;
d6751 8
a6758 1
PERL_STATIC_INLINE void	S_invlist_set_len(pTHX_ SV* const invlist, const UV len, const bool offset);
d6761 16
a6776 4
STATIC bool	S_is_ssc_worth_it(const RExC_state_t * pRExC_state, const regnode_ssc * ssc);
#define PERL_ARGS_ASSERT_IS_SSC_WORTH_IT	\
	assert(pRExC_state); assert(ssc)
STATIC U32	S_join_exact(pTHX_ RExC_state_t *pRExC_state, regnode *scan, UV *min_subtract, bool *unfolded_multi_char, U32 flags, regnode *val, U32 depth);
d6779 7
a6785 1
STATIC I32	S_make_trie(pTHX_ RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth);
d6788 10
a6797 1
STATIC void	S_nextchar(pTHX_ RExC_state_t *pRExC_state);
d6800 3
a6802 4
STATIC void	S_output_or_return_posix_warnings(pTHX_ RExC_state_t *pRExC_state, AV* posix_warnings, AV** return_posix_warnings);
#define PERL_ARGS_ASSERT_OUTPUT_OR_RETURN_POSIX_WARNINGS	\
	assert(pRExC_state); assert(posix_warnings)
STATIC void	S_parse_lparen_question_flags(pTHX_ RExC_state_t *pRExC_state);
d6805 4
a6808 1
STATIC void	S_populate_ANYOF_from_invlist(pTHX_ regnode *node, SV** invlist_ptr);
d6811 1
d6813 3
a6815 1
			__attribute__noreturn__;
d6819 3
a6821 1
STATIC regnode*	S_reg(pTHX_ RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth);
d6824 3
a6826 4
STATIC regnode*	S_reg2Lanode(pTHX_ RExC_state_t *pRExC_state, const U8 op, const U32 arg1, const I32 arg2);
#define PERL_ARGS_ASSERT_REG2LANODE	\
	assert(pRExC_state)
STATIC regnode*	S_reg_node(pTHX_ RExC_state_t *pRExC_state, U8 op);
d6829 3
a6831 1
STATIC UV	S_reg_recode(pTHX_ const U8 value, SV **encp);
d6834 3
a6836 1
STATIC SV *	S_reg_scan_name(pTHX_ RExC_state_t *pRExC_state, U32 flags);
d6839 3
a6841 1
PERL_STATIC_INLINE char *	S_reg_skipcomment(RExC_state_t *pRExC_state, char * p);
d6843 4
a6846 2
	assert(pRExC_state); assert(p)
STATIC regnode*	S_reganode(pTHX_ RExC_state_t *pRExC_state, U8 op, U32 arg);
d6849 4
a6852 1
STATIC regnode*	S_regatom(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth);
d6855 4
a6858 1
STATIC regnode*	S_regbranch(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, I32 first, U32 depth);
d6861 4
a6864 1
STATIC regnode*	S_regclass(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth, const bool stop_at_1, bool allow_multi_fold, const bool silence_non_portable, const bool strict, bool optimizable, SV** ret_invlist, AV** return_posix_warnings);
a6866 2
STATIC unsigned int	S_regex_set_precedence(const U8 my_operator)
			__attribute__pure__;
d6868 3
a6870 1
STATIC void	S_reginsert(pTHX_ RExC_state_t *pRExC_state, U8 op, regnode *opnd, U32 depth);
d6873 11
a6883 4
STATIC regnode*	S_regnode_guts(pTHX_ RExC_state_t *pRExC_state, const U8 op, const STRLEN extra_len, const char* const name);
#define PERL_ARGS_ASSERT_REGNODE_GUTS	\
	assert(pRExC_state); assert(name)
STATIC regnode*	S_regpiece(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth);
d6886 10
a6895 1
STATIC void	S_regtail(pTHX_ RExC_state_t * pRExC_state, const regnode * const p, const regnode * const val, const U32 depth);
d6898 18
a6915 1
STATIC void	S_scan_commit(pTHX_ const RExC_state_t *pRExC_state, struct scan_data_t *data, SSize_t *minlenp, int is_inf);
d6918 4
a6921 1
STATIC void	S_set_ANYOF_arg(pTHX_ RExC_state_t* const pRExC_state, regnode* const node, SV* const cp_list, SV* const runtime_defns, SV* const only_utf8_locale_list, SV* const swash, const bool has_user_defined_property);
d6924 3
a6926 4
STATIC void	S_skip_to_be_ignored_text(pTHX_ RExC_state_t *pRExC_state, char ** p, const bool force_to_xmod);
#define PERL_ARGS_ASSERT_SKIP_TO_BE_IGNORED_TEXT	\
	assert(pRExC_state); assert(p)
PERL_STATIC_INLINE void	S_ssc_add_range(pTHX_ regnode_ssc *ssc, UV const start, UV const end);
d6929 5
a6933 1
STATIC void	S_ssc_and(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *and_with);
d6936 3
a6938 1
STATIC void	S_ssc_anything(pTHX_ regnode_ssc *ssc);
d6941 3
a6943 1
PERL_STATIC_INLINE void	S_ssc_clear_locale(regnode_ssc *ssc);
d6946 3
a6948 1
PERL_STATIC_INLINE void	S_ssc_cp_and(pTHX_ regnode_ssc *ssc, UV const cp);
d6951 4
a6954 1
STATIC void	S_ssc_finalize(pTHX_ RExC_state_t *pRExC_state, regnode_ssc *ssc);
d6957 4
a6960 1
STATIC void	S_ssc_init(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc);
d6963 4
a6966 1
PERL_STATIC_INLINE void	S_ssc_intersection(pTHX_ regnode_ssc *ssc, SV* const invlist, const bool invert_2nd);
d6969 4
a6972 2
STATIC int	S_ssc_is_anything(const regnode_ssc *ssc)
			__attribute__warn_unused_result__;
d6976 4
a6979 2
STATIC int	S_ssc_is_cp_posixl_init(const RExC_state_t *pRExC_state, const regnode_ssc *ssc)
			__attribute__warn_unused_result__;
d6983 4
a6986 1
STATIC void	S_ssc_or(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *or_with);
d6989 4
a6992 1
PERL_STATIC_INLINE void	S_ssc_union(pTHX_ regnode_ssc *ssc, SV* const invlist, const bool invert_2nd);
d6995 7
a7001 1
STATIC SSize_t	S_study_chunk(pTHX_ RExC_state_t *pRExC_state, regnode **scanp, SSize_t *minlenp, SSize_t *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U32 recursed_depth, regnode_ssc *and_withp, U32 flags, U32 depth);
d7004 1
d7007 4
a7010 1
PERL_CALLCONV void	Perl__invlist_dump(pTHX_ PerlIO *file, I32 level, const char* const indent, SV* const invlist);
d7013 1
a7015 3
PERL_CALLCONV bool	Perl__invlistEQ(pTHX_ SV* const a, SV* const b, const bool complement_b);
#define PERL_ARGS_ASSERT__INVLISTEQ	\
	assert(a); assert(b)
d7017 2
a7018 1
			__attribute__warn_unused_result__;
d7024 2
a7025 1
PERL_CALLCONV SV*	Perl__get_regclass_nonbitmap_data(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **lonly_utf8_locale, SV **output_invlist);
d7028 1
a7028 7
PERL_CALLCONV void	Perl__load_PL_utf8_foldclosures(pTHX);
PERL_CALLCONV int	Perl_re_printf(pTHX_ const char *fmt, ...);
#define PERL_ARGS_ASSERT_RE_PRINTF	\
	assert(fmt)
PERL_CALLCONV void	Perl_regprop(pTHX_ const regexp *prog, SV* sv, const regnode* o, const regmatch_info *reginfo, const RExC_state_t *pRExC_state);
#define PERL_ARGS_ASSERT_REGPROP	\
	assert(sv); assert(o)
d7032 2
a7033 1
			__attribute__warn_unused_result__;
d7037 3
a7039 2
PERL_STATIC_INLINE bool	S__invlist_contains_cp(SV* const invlist, const UV cp)
			__attribute__warn_unused_result__;
d7043 9
a7051 2
PERL_STATIC_INLINE UV	S__invlist_len(SV* const invlist)
			__attribute__warn_unused_result__;
d7055 3
a7057 2
PERL_CALLCONV IV	Perl__invlist_search(SV* const invlist, const UV cp)
			__attribute__warn_unused_result__;
d7062 2
a7063 1
			__attribute__warn_unused_result__;
d7067 3
a7069 2
PERL_STATIC_INLINE bool*	S_get_invlist_offset_addr(SV* invlist)
			__attribute__warn_unused_result__;
a7072 5
PERL_STATIC_INLINE UV*	S_invlist_array(SV* const invlist)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_INVLIST_ARRAY	\
	assert(invlist)

d7075 4
a7078 1
PERL_CALLCONV SV*	Perl__core_swash_init(pTHX_ const char* pkg, const char* name, SV* listsv, I32 minbits, I32 none, SV* invlist, U8* const flags_p);
d7081 1
d7083 5
a7087 3
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_TOKE_C) || defined(PERL_IN_DQUOTE_C)
PERL_STATIC_INLINE char*	S_form_short_octal_warning(pTHX_ const char * const s, const STRLEN len)
			__attribute__warn_unused_result__;
d7091 1
a7091 1
PERL_CALLCONV char	Perl_grok_bslash_c(pTHX_ const char source, const bool output_warning)
d7094 5
a7098 2
PERL_CALLCONV bool	Perl_grok_bslash_o(pTHX_ char** s, UV* uv, const char** error_msg, const bool output_warning, const bool strict, const bool silence_non_portable, const bool utf8)
			__attribute__warn_unused_result__;
d7102 5
a7106 2
PERL_CALLCONV bool	Perl_grok_bslash_x(pTHX_ char** s, UV* uv, const char** error_msg, const bool output_warning, const bool strict, const bool silence_non_portable, const bool utf8)
			__attribute__warn_unused_result__;
d7110 1
a7110 1
PERL_STATIC_INLINE I32	S_regcurly(const char *s)
d7112 2
a7113 1
			__attribute__pure__;
d7122 8
a7129 2
/* PERL_CALLCONV void	_invlist_intersection(pTHX_ SV* const a, SV* const b, SV** i); */
PERL_CALLCONV void	Perl__invlist_intersection_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, const bool complement_b, SV** i);
d7132 3
a7134 1
PERL_CALLCONV void	Perl__invlist_invert(pTHX_ SV* const invlist);
d7137 4
a7140 1
PERL_CALLCONV void	Perl__invlist_populate_swatch(SV* const invlist, const UV start, const UV end, U8* swatch);
d7143 13
a7155 3
/* PERL_CALLCONV void	_invlist_subtract(pTHX_ SV* const a, SV* const b, SV** result); */
/* PERL_CALLCONV void	_invlist_union(pTHX_ SV* const a, SV* const b, SV** output); */
PERL_CALLCONV void	Perl__invlist_union_maybe_complement_2nd(pTHX_ SV* const a, SV* const b, const bool complement_b, SV** output);
d7158 1
d7163 2
a7164 1
			__attribute__warn_unused_result__;
d7169 2
a7170 1
			__attribute__warn_unused_result__;
a7175 30
STATIC LB_enum	S_advance_one_LB(pTHX_ U8 ** curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ADVANCE_ONE_LB	\
	assert(curpos); assert(strend)

STATIC SB_enum	S_advance_one_SB(pTHX_ U8 ** curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ADVANCE_ONE_SB	\
	assert(curpos); assert(strend)

STATIC WB_enum	S_advance_one_WB(pTHX_ U8 ** curpos, const U8 * const strend, const bool utf8_target, const bool skip_Extend_Format)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ADVANCE_ONE_WB	\
	assert(curpos); assert(strend)

STATIC LB_enum	S_backup_one_LB(pTHX_ const U8 * const strbeg, U8 ** curpos, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BACKUP_ONE_LB	\
	assert(strbeg); assert(curpos)

STATIC SB_enum	S_backup_one_SB(pTHX_ const U8 * const strbeg, U8 ** curpos, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BACKUP_ONE_SB	\
	assert(strbeg); assert(curpos)

STATIC WB_enum	S_backup_one_WB(pTHX_ WB_enum * previous, const U8 * const strbeg, U8 ** curpos, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BACKUP_ONE_WB	\
	assert(previous); assert(strbeg); assert(curpos)

d7177 5
a7181 1
			__attribute__warn_unused_result__;
d7189 2
a7190 1
			__attribute__warn_unused_result__;
d7194 4
a7197 20
PERL_STATIC_INLINE bool	S_isGCB(const GCB_enum before, const GCB_enum after)
			__attribute__warn_unused_result__;

STATIC bool	S_isLB(pTHX_ LB_enum before, LB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ISLB	\
	assert(strbeg); assert(curpos); assert(strend)

STATIC bool	S_isSB(pTHX_ SB_enum before, SB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ISSB	\
	assert(strbeg); assert(curpos); assert(strend)

STATIC bool	S_isWB(pTHX_ WB_enum previous, WB_enum before, WB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_ISWB	\
	assert(strbeg); assert(curpos); assert(strend)

STATIC I32	S_reg_check_named_buff_matched(const regexp *rex, const regnode *scan)
			__attribute__warn_unused_result__;
d7201 3
a7203 1
STATIC void	S_regcppop(pTHX_ regexp *rex, U32 *maxopenparen_p);
d7206 3
a7208 1
STATIC CHECKPOINT	S_regcppush(pTHX_ const regexp *rex, I32 parenfloor, U32 maxopenparen);
d7211 1
d7213 3
a7215 1
			__attribute__warn_unused_result__;
d7220 4
a7223 1
			__attribute__warn_unused_result__;
d7228 3
a7230 1
			__attribute__warn_unused_result__;
d7235 4
a7238 1
			__attribute__warn_unused_result__;
d7243 4
a7246 1
			__attribute__warn_unused_result__;
d7251 5
a7255 1
			__attribute__warn_unused_result__;
d7259 4
a7262 2
STATIC bool	S_regtry(pTHX_ regmatch_info *reginfo, char **startposp)
			__attribute__warn_unused_result__;
d7266 2
a7267 1
STATIC bool	S_to_byte_substr(pTHX_ regexp * prog);
d7270 3
a7272 1
STATIC void	S_to_utf8_substr(pTHX_ regexp * prog);
d7275 1
d7279 2
a7280 1
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr, const U32 flags);
d7283 1
d7286 3
a7288 1
STATIC char *	S_F0convert(NV nv, char *const endbuf, STRLEN *const len);
d7291 4
a7294 1
STATIC void	S_anonymise_cv_maybe(pTHX_ GV *gv, CV *cv);
d7297 4
a7300 1
STATIC void	S_assert_uft8_cache_coherent(pTHX_ const char *const func, STRLEN from_cache, STRLEN real, SV *const sv);
d7303 3
a7305 1
STATIC bool	S_curse(pTHX_ SV * const sv, const bool check_refcnt);
d7308 1
d7310 2
a7311 1
			__attribute__warn_unused_result__;
d7315 2
a7316 1
STATIC I32	S_find_array_subscript(pTHX_ const AV *const av, const SV *const val);
d7319 3
a7321 1
STATIC SV *	S_find_hash_subscript(pTHX_ const HV *const hv, const SV *const val);
d7324 4
a7327 4
STATIC SV*	S_find_uninit_var(pTHX_ const OP *const obase, const SV *const uninit_sv, bool match, const char **desc_p);
#define PERL_ARGS_ASSERT_FIND_UNINIT_VAR	\
	assert(desc_p)
STATIC bool	S_glob_2number(pTHX_ GV* const gv);
d7330 4
a7333 1
STATIC void	S_glob_assign_glob(pTHX_ SV *const dstr, SV *const sstr, const int dtype);
d7336 7
d7344 2
a7345 1
STATIC void	S_not_a_number(pTHX_ SV *const sv);
d7348 1
a7348 3
STATIC void	S_not_incrementable(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_NOT_INCREMENTABLE	\
	assert(sv)
d7350 2
a7351 1
			__attribute__warn_unused_result__;
d7355 2
a7356 1
STATIC bool	S_sv_2iuv_common(pTHX_ SV *const sv);
d7359 3
a7361 1
STATIC void	S_sv_add_arena(pTHX_ char *const ptr, const U32 size, const U32 flags);
d7364 5
a7368 4
STATIC const char *	S_sv_display(pTHX_ SV *const sv, char *tmpbuf, STRLEN tmpbuf_size);
#define PERL_ARGS_ASSERT_SV_DISPLAY	\
	assert(sv); assert(tmpbuf)
STATIC STRLEN	S_sv_pos_b2u_midway(pTHX_ const U8 *const s, const U8 *const target, const U8 *end, STRLEN endu);
d7371 6
a7376 1
STATIC STRLEN	S_sv_pos_u2b_cached(pTHX_ SV *const sv, MAGIC **const mgp, const U8 *const start, const U8 *const send, STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0);
d7379 6
a7384 1
STATIC STRLEN	S_sv_pos_u2b_forwards(const U8 *const start, const U8 *const send, STRLEN *const uoffset, bool *const at_end);
d7387 4
a7390 1
STATIC STRLEN	S_sv_pos_u2b_midway(const U8 *const start, const U8 *send, STRLEN uoffset, const STRLEN uend);
d7393 3
a7395 1
PERL_STATIC_INLINE void	S_sv_unglob(pTHX_ SV *const sv, U32 flags);
d7398 1
d7400 3
a7402 1
			__attribute__warn_unused_result__;
d7406 3
a7408 1
STATIC void	S_utf8_mg_len_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN ulen);
d7411 4
a7414 1
STATIC void	S_utf8_mg_pos_cache_update(pTHX_ SV *const sv, MAGIC **const mgp, const STRLEN byte, const STRLEN utf8, const STRLEN blen);
d7417 3
a7419 1
STATIC I32	S_visit(pTHX_ SVFUNC_t f, const U32 flags, const U32 mask);
d7422 10
d7434 3
a7436 1
			__attribute__warn_unused_result__;
d7440 4
a7443 1
STATIC SV **	S_sv_dup_inc_multiple(pTHX_ SV *const *source, SV **dest, SSize_t items, CLONE_PARAMS *const param);
d7446 3
a7448 1
STATIC void	S_unreferenced_to_tmp_stack(pTHX_ AV *const unreferenced);
d7451 1
d7462 4
a7465 1
STATIC void	S_checkcomma(pTHX_ const char *s, const char *name, const char *what);
d7468 1
d7471 2
a7472 1
			__attribute__warn_unused_result__;
d7477 2
a7478 1
			__attribute__warn_unused_result__;
d7482 2
a7483 1
STATIC void	S_force_ident(pTHX_ const char *s, int kind);
d7486 1
d7489 2
a7490 1
STATIC char*	S_force_strict_version(pTHX_ char *s);
d7493 3
a7495 1
STATIC char*	S_force_version(pTHX_ char *s, int guessing);
d7498 3
a7500 1
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack);
d7503 1
d7505 3
a7507 1
			__attribute__warn_unused_result__;
d7511 2
a7512 1
STATIC void	S_incline(pTHX_ const char *s);
d7515 3
a7517 1
STATIC int	S_intuit_method(pTHX_ char *s, SV *ioname, CV *cv);
d7520 3
a7522 1
STATIC int	S_intuit_more(pTHX_ char *s);
d7525 3
a7527 1
STATIC I32	S_lop(pTHX_ I32 f, int x, char *s);
d7530 1
d7534 3
a7536 1
STATIC SV*	S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, STRLEN keylen, SV *sv, SV *pv, const char *type, STRLEN typelen);
d7539 3
a7541 1
STATIC void	S_no_op(pTHX_ const char *const what, char *s);
d7544 5
a7548 1
STATIC void	S_parse_ident(pTHX_ char **s, char **d, char * const e, int allow_package, bool is_utf8);
d7551 1
d7554 2
a7555 1
			__attribute__warn_unused_result__;
d7560 2
a7561 1
			__attribute__warn_unused_result__;
d7566 2
a7567 1
			__attribute__warn_unused_result__;
d7571 3
a7573 1
STATIC char*	S_scan_ident(pTHX_ char *s, char *dest, STRLEN destlen, I32 ck_uni);
d7576 1
d7578 2
a7579 1
			__attribute__warn_unused_result__;
d7584 2
a7585 1
			__attribute__warn_unused_result__;
d7589 3
a7591 2
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims, int re_reparse, char **delimp)
			__attribute__warn_unused_result__;
d7596 2
a7597 1
			__attribute__warn_unused_result__;
d7602 2
a7603 1
			__attribute__warn_unused_result__;
d7607 4
a7610 1
STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp);
d7613 1
d7615 2
a7616 1
			__attribute__warn_unused_result__;
d7630 2
a7631 1
			__attribute__warn_unused_result__;
d7636 2
a7637 1
			__attribute__warn_unused_result__;
d7641 2
a7642 1
STATIC SV*	S_tokeq(pTHX_ SV *sv);
d7645 1
d7647 2
a7648 1
STATIC int	S_yywarn(pTHX_ const char *const s, U32 flags);
d7651 20
d7673 3
a7675 1
STATIC bool	S_isa_lookup(pTHX_ HV *stash, const char * const name, STRLEN len, U32 flags);
d7678 1
a7680 3
STATIC UV	S__to_utf8_case(pTHX_ const UV uv1, const U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, const char *normal, const char *special);
#define PERL_ARGS_ASSERT__TO_UTF8_CASE	\
	assert(p); assert(ustrp); assert(swashp); assert(normal)
d7682 4
a7685 1
			__attribute__warn_unused_result__;
d7689 6
d7696 4
a7699 1
			__attribute__warn_unused_result__;
a7702 5
STATIC U8*	S_swash_scan_list_line(pTHX_ U8* l, U8* const lend, UV* min, UV* max, UV* val, const bool wants_value, const U8* const typestr)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SWASH_SCAN_LIST_LINE	\
	assert(l); assert(lend); assert(min); assert(max); assert(val); assert(typestr)

d7704 2
a7705 1
			__attribute__warn_unused_result__;
d7709 1
a7709 1
STATIC U8	S_to_lower_latin1(const U8 c, U8 *p, STRLEN *lenp)
d7714 3
a7716 1
PERL_CALLCONV UV	Perl__to_upper_title_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const char S_or_s);
d7719 1
d7722 3
a7724 1
PERL_CALLCONV UV	Perl__to_fold_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const unsigned int flags);
d7727 1
d7733 2
a7734 1
STATIC SV *	S_with_queued_errors(pTHX_ SV *ex);
d7737 1
a7737 3
STATIC void	S_xs_version_bootcheck(pTHX_ U32 items, U32 ax, const char *xs_p, STRLEN xs_len);
#define PERL_ARGS_ASSERT_XS_VERSION_BOOTCHECK	\
	assert(xs_p)
d7739 4
a7742 1
STATIC void	S_mem_log_common(enum mem_log_type mlt, const UV n, const UV typesize, const char *type_name, const SV *sv, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
d7745 1
d7748 34
a7781 14
#if defined(PERL_MEM_LOG)
PERL_CALLCONV Malloc_t	Perl_mem_log_alloc(const UV nconst, UV typesize, const char *type_name, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
#define PERL_ARGS_ASSERT_MEM_LOG_ALLOC	\
	assert(type_name); assert(filename); assert(funcname)
PERL_CALLCONV Malloc_t	Perl_mem_log_free(Malloc_t oldalloc, const char *filename, const int linenumber, const char *funcname);
#define PERL_ARGS_ASSERT_MEM_LOG_FREE	\
	assert(filename); assert(funcname)
PERL_CALLCONV Malloc_t	Perl_mem_log_realloc(const UV n, const UV typesize, const char *type_name, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
#define PERL_ARGS_ASSERT_MEM_LOG_REALLOC	\
	assert(type_name); assert(filename); assert(funcname)
#endif
#if defined(PERL_OP_PARENT)
PERL_CALLCONV OP*	Perl_op_parent(OP *o);
#define PERL_ARGS_ASSERT_OP_PARENT	\
d7783 87
d7875 2
a7876 1
PERL_CALLCONV I32	Perl_unlnk(pTHX_ const char* f);
d7879 1
a7879 20
#endif
#if defined(USE_C_BACKTRACE)
PERL_CALLCONV bool	Perl_dump_c_backtrace(pTHX_ PerlIO* fp, int max_depth, int skip);
#define PERL_ARGS_ASSERT_DUMP_C_BACKTRACE	\
	assert(fp)
/* PERL_CALLCONV void	free_c_backtrace(pTHX_ Perl_c_backtrace* bt); */
PERL_CALLCONV Perl_c_backtrace*	Perl_get_c_backtrace(pTHX_ int max_depth, int skip);
PERL_CALLCONV SV*	Perl_get_c_backtrace_dump(pTHX_ int max_depth, int skip);
#endif
#if defined(USE_DTRACE)
PERL_CALLCONV void	Perl_dtrace_probe_call(pTHX_ CV *cv, bool is_call);
#define PERL_ARGS_ASSERT_DTRACE_PROBE_CALL	\
	assert(cv)
PERL_CALLCONV void	Perl_dtrace_probe_load(pTHX_ const char *name, bool is_loading);
#define PERL_ARGS_ASSERT_DTRACE_PROBE_LOAD	\
	assert(name)
PERL_CALLCONV void	Perl_dtrace_probe_op(pTHX_ const OP *op);
#define PERL_ARGS_ASSERT_DTRACE_PROBE_OP	\
	assert(op)
PERL_CALLCONV void	Perl_dtrace_probe_phase(pTHX_ enum perl_phase phase);
d7882 2
a7883 1
PERL_CALLCONV PADOFFSET	Perl_alloccopstash(pTHX_ HV *hv);
d7886 1
d7888 2
a7889 1
			__attribute__warn_unused_result__;
d7893 2
a7894 1
PERL_CALLCONV void	Perl_clone_params_del(CLONE_PARAMS *param);
d7897 1
d7900 3
a7902 1
			__attribute__warn_unused_result__;
d7907 2
a7908 1
			__attribute__warn_unused_result__;
d7913 2
a7914 1
			__attribute__warn_unused_result__;
d7918 2
a7919 1
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO *const fp, const char type, CLONE_PARAMS *const param);
d7922 1
d7924 2
a7925 1
			__attribute__warn_unused_result__;
d7930 2
a7931 1
			__attribute__warn_unused_result__;
d7936 2
a7937 1
			__attribute__warn_unused_result__;
d7942 2
a7943 1
			__attribute__warn_unused_result__;
d7947 3
a7949 1
PERL_CALLCONV struct mro_meta*	Perl_mro_meta_dup(pTHX_ struct mro_meta* smeta, CLONE_PARAMS* param);
d7952 1
d7955 2
a7956 1
			__attribute__warn_unused_result__;
d7961 2
a7962 1
			__attribute__warn_unused_result__;
d7964 1
a7964 11
	assert(srcpad); assert(param)

PERL_CALLCONV PADNAME *	Perl_padname_dup(pTHX_ PADNAME *src, CLONE_PARAMS *param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PADNAME_DUP	\
	assert(src); assert(param)

PERL_CALLCONV PADNAMELIST *	Perl_padnamelist_dup(pTHX_ PADNAMELIST *srcpad, CLONE_PARAMS *param)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PADNAMELIST_DUP	\
	assert(srcpad); assert(param)
d7966 2
a7967 1
PERL_CALLCONV yy_parser*	Perl_parser_dup(pTHX_ const yy_parser *const proto, CLONE_PARAMS *const param);
d7970 3
a7972 1
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter *proto_perl, UV flags);
d7975 5
a7979 1
PERL_CALLCONV void	Perl_re_dup_guts(pTHX_ const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS* param);
d7982 4
a7985 1
PERL_CALLCONV void*	Perl_regdupe_internal(pTHX_ REGEXP * const r, CLONE_PARAMS* param);
d7988 5
a7992 1
PERL_CALLCONV void	Perl_rvpv_dup(pTHX_ SV *const dstr, const SV *const sstr, CLONE_PARAMS *const param);
d7995 1
d7997 2
a7998 1
			__attribute__warn_unused_result__;
d8004 3
a8006 1
			__attribute__warn_unused_result__;
d8011 2
a8012 1
			__attribute__warn_unused_result__;
d8017 2
a8018 1
			__attribute__warn_unused_result__;
a8022 8
#if defined(USE_LOCALE)     && (defined(PERL_IN_LOCALE_C) || defined (PERL_EXT_POSIX))
PERL_CALLCONV bool	Perl__is_cur_LC_category_utf8(pTHX_ int category);
#endif
#if defined(USE_LOCALE) && defined(PERL_IN_LOCALE_C)
STATIC char*	S_stdize_locale(pTHX_ char* locs);
#define PERL_ARGS_ASSERT_STDIZE_LOCALE	\
	assert(locs)
#endif
d8024 3
a8026 1
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg);
d8029 4
a8032 1
PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen);
d8035 8
a8042 2
/* PERL_CALLCONV char*	sv_collxfrm(pTHX_ SV *const sv, STRLEN *const nxp); */
PERL_CALLCONV char*	Perl_sv_collxfrm_flags(pTHX_ SV *const sv, STRLEN *const nxp, I32 const flags);
d8045 1
d8063 2
a8064 1
PERL_CALLCONV SSize_t	Perl_PerlIO_read(pTHX_ PerlIO *f, void *vbuf, Size_t count);
d8067 1
a8067 2
PERL_CALLCONV void	Perl_PerlIO_restore_errno(pTHX_ PerlIO *f);
PERL_CALLCONV void	Perl_PerlIO_save_errno(pTHX_ PerlIO *f);
d8082 2
a8083 1
PERL_CALLCONV SSize_t	Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *vbuf, Size_t count);
d8086 3
a8088 1
PERL_CALLCONV SSize_t	Perl_PerlIO_write(pTHX_ PerlIO *f, const void *vbuf, Size_t count);
d8091 1
a8091 8
#endif
#if defined(USE_QUADMATH)
PERL_CALLCONV bool	Perl_quadmath_format_needed(const char* format);
#define PERL_ARGS_ASSERT_QUADMATH_FORMAT_NEEDED	\
	assert(format)
PERL_CALLCONV const char*	Perl_quadmath_format_single(const char* format);
#define PERL_ARGS_ASSERT_QUADMATH_FORMAT_SINGLE	\
	assert(format)
d8098 2
a8099 1
			__attribute__noreturn__;
d8105 3
a8107 1
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp);
d8110 3
a8112 1
PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd);
d8115 3
a8117 1
PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd);
d8120 1
d8123 3
a8125 1
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg);
d8128 1
@


