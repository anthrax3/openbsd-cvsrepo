head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	PERL_5_20_2:1.1.1.15
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.14
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.8
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.1.7.0.4
	OPENBSD_3_8_BASE:1.1.1.7
	OPENBSD_3_7:1.1.1.7.0.2
	OPENBSD_3_7_BASE:1.1.1.7
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.1.1.6.0.2
	OPENBSD_3_6_BASE:1.1.1.6
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.11
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	cxJ08BvJA9Pt2PTM;

1.10
date	2015.04.25.19.14.37;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	XRK22kO4se3v2i2I;

1.9
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.8;
commitid	QP75iYx42Uo7mMxO;

1.8
date	2014.03.24.15.05.13;	author afresh1;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.25.20.40.44;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.24.15.06.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.12.18.24.21;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.29.17.35.57;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.28.19.22.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.02.23.37.09;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.06.16.08.38;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.08.38;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.22.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.47;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.43.30;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.04.07.21.12.50;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.08.09.17.45.42;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.16.26;	author millert;	state Exp;
branches
	1.1.1.7.2.1
	1.1.1.7.4.1;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.47.29;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.06;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.34;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.48.31;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.06.26;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.03.24.14.58.45;	author afresh1;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.11.17.20.52.36;	author afresh1;	state Exp;
branches;
next	1.1.1.15;
commitid	B31cAbBIXiCqnL97;

1.1.1.15
date	2015.04.25.19.10.09;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.7.2.1
date	2006.01.03.05.44.49;	author brad;	state Exp;
branches;
next	;

1.1.1.7.4.1
date	2006.01.03.04.22.40;	author brad;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#./perl -w
#
# Create the export list for perl.
#
# Needed by WIN32 and OS/2 for creating perl.dll,
# and by AIX for creating libperl.a when -Duseshrplib is in effect,
# and by VMS for creating perlshr.exe.
#
# Reads from information stored in
#
#    %Config::Config (ie config.sh)
#    config.h
#    embed.fnc
#    globvar.sym
#    intrpvar.h
#    miniperl.map (on OS/2)
#    perl5.def    (on OS/2; this is the old version of the file being made)
#    perlio.sym
#    perlvars.h
#    regen/opcodes
#
# plus long lists of function names hard-coded directly in this script.
#
# Writes the result to STDOUT.
#
# Normally this script is invoked from a makefile (e.g. win32/Makefile),
# which redirects STDOUT to a suitable file, such as:
#
#    perl5.def   OS/2
#    perldll.def Windows
#    perl.exp    AIX
#    perl.imp    NetWare
#    makedef.lis VMS

my $fold;
my %ARGS;
my %define;

BEGIN {
    BEGIN { unshift @@INC, "lib" }
    use Config;
    use strict;

    %ARGS = (CCTYPE => 'MSVC', TARG_DIR => '');

    sub process_cc_flags {
	foreach (map {split /\s+/, $_} @@_) {
	    $define{$1} = $2 // 1 if /^-D(\w+)(?:=(.+))?/;
	}
    }

    while (@@ARGV) {
	my $flag = shift;
	if ($flag =~ /^(?:CC_FLAGS=)?(-D\w.*)/) {
	    process_cc_flags($1);
	} elsif ($flag =~ /^(CCTYPE|FILETYPE|PLATFORM|TARG_DIR)=(.+)$/) {
	    $ARGS{$1} = $2;
	} elsif ($flag eq '--sort-fold') {
	    ++$fold;
	}
    }
    my @@PLATFORM = qw(aix win32 wince os2 netware vms test);
    my %PLATFORM;
    @@PLATFORM{@@PLATFORM} = ();

    die "PLATFORM undefined, must be one of: @@PLATFORM\n"
	unless defined $ARGS{PLATFORM};
    die "PLATFORM must be one of: @@PLATFORM\n"
	unless exists $PLATFORM{$ARGS{PLATFORM}};
}
use constant PLATFORM => $ARGS{PLATFORM};

require "$ARGS{TARG_DIR}regen/embed_lib.pl";

# Is the following guard strictly necessary? Added during refactoring
# to keep the same behaviour when merging other code into here.
process_cc_flags(@@Config{qw(ccflags optimize)})
    if $ARGS{PLATFORM} ne 'win32' && $ARGS{PLATFORM} ne 'wince'
    && $ARGS{PLATFORM} ne 'netware';

# Add the compile-time options that miniperl was built with to %define.
# On Win32 these are not the same options as perl itself will be built
# with since miniperl is built with a canned config (one of the win32/
# config_H.*) and none of the BUILDOPT's that are set in the makefiles,
# but they do include some #define's that are hard-coded in various
# source files and header files and don't include any BUILDOPT's that
# the user might have chosen to disable because the canned configs are
# minimal configs that don't include any of those options.

#don't use the host Perl's -V defines for the WinCE Perl
if($ARGS{PLATFORM} ne 'wince') {
    my @@options = sort(Config::bincompat_options(), Config::non_bincompat_options());
    print STDERR "Options: (@@options)\n" unless $ARGS{PLATFORM} eq 'test';
    $define{$_} = 1 foreach @@options;
}

my %exportperlmalloc =
    (
       Perl_malloc		=>	"malloc",
       Perl_mfree		=>	"free",
       Perl_realloc		=>	"realloc",
       Perl_calloc		=>	"calloc",
    );

my $exportperlmalloc = $ARGS{PLATFORM} eq 'os2';

my $config_h = 'config.h';
open(CFG, '<', $config_h) || die "Cannot open $config_h: $!\n";
while (<CFG>) {
    $define{$1} = 1 if /^\s*\#\s*define\s+(MYMALLOC|MULTIPLICITY
                                           |SPRINTF_RETURNS_STRLEN
                                           |KILL_BY_SIGPRC
                                           |(?:PERL|USE|HAS)_\w+)\b/x;
}
close(CFG);

# perl.h logic duplication begins

if ($define{USE_ITHREADS}) {
    if (!$define{MULTIPLICITY}) {
        $define{MULTIPLICITY} = 1;
    }
}

$define{PERL_IMPLICIT_CONTEXT} ||=
    $define{USE_ITHREADS} ||
    $define{MULTIPLICITY} ;

if ($define{USE_ITHREADS} && $ARGS{PLATFORM} ne 'win32' && $^O ne 'darwin') {
    $define{USE_REENTRANT_API} = 1;
}

# perl.h logic duplication ends

print STDERR "Defines: (" . join(' ', sort keys %define) . ")\n"
     unless $ARGS{PLATFORM} eq 'test';

my $sym_ord = 0;
my %ordinal;

if ($ARGS{PLATFORM} eq 'os2') {
    if (open my $fh, '<', 'perl5.def') {
      while (<$fh>) {
	last if /^\s*EXPORTS\b/;
      }
      while (<$fh>) {
	$ordinal{$1} = $2 if /^\s*"(\w+)"\s*(?:=\s*"\w+"\s*)?\@@(\d+)\s*$/;
	# This allows skipping ordinals which were used in older versions
	$sym_ord = $1 if /^\s*;\s*LAST_ORDINAL\s*=\s*(\d+)\s*$/;
      }
      $sym_ord < $_ and $sym_ord = $_ for values %ordinal; # Take the max
    }
}

my %skip;
# All platforms export boot_DynaLoader unconditionally.
my %export = ( boot_DynaLoader => 1 );

sub try_symbols {
    foreach my $symbol (@@_) {
	++$export{$symbol} unless exists $skip{$symbol};
    }
}

sub readvar {
    # $hash is the hash that we're adding to. For one of our callers, it will
    # actually be the skip hash but that doesn't affect the intent of what
    # we're doing, as in that case we skip adding something to the skip hash
    # for the second time.

    my $file = $ARGS{TARG_DIR} . shift;
    my $hash = shift;
    my $proc = shift;
    open my $vars, '<', $file or die die "Cannot open $file: $!\n";

    while (<$vars>) {
	# All symbols have a Perl_ prefix because that's what embed.h sticks
	# in front of them.  The A?I?S?C? is strictly speaking wrong.
	next unless /\bPERLVAR(A?I?S?C?)\(([IGT]),\s*(\w+)/;

	my $var = "PL_$3";
	my $symbol = $proc ? &$proc($1,$2,$3) : $var;
	++$hash->{$symbol} unless exists $skip{$var};
    }
}

if ($ARGS{PLATFORM} ne 'os2') {
    ++$skip{$_} foreach qw(
		     PL_cryptseen
		     PL_opsave
		     Perl_GetVars
		     Perl_dump_fds
		     Perl_my_bcopy
		     Perl_my_bzero
		     Perl_my_chsize
		     Perl_my_htonl
		     Perl_my_memcmp
		     Perl_my_memset
		     Perl_my_ntohl
		     Perl_my_swap
			 );
    if ($ARGS{PLATFORM} eq 'vms') {
	++$skip{PL_statusvalue_posix};
        # This is a wrapper if we have symlink, not a replacement
        # if we don't.
        ++$skip{Perl_my_symlink} unless $Config{d_symlink};
    } else {
	++$skip{PL_statusvalue_vms};
	if ($ARGS{PLATFORM} ne 'aix') {
	    ++$skip{$_} foreach qw(
				PL_DBcv
				PL_generation
				PL_lastgotoprobe
				PL_modcount
				main
				 );
	}
    }
}

if ($ARGS{PLATFORM} ne 'vms') {
    # VMS does its own thing for these symbols.
    ++$skip{$_} foreach qw(
			PL_sig_handlers_initted
			PL_sig_ignoring
			PL_sig_defaulting
			 );
    if ($ARGS{PLATFORM} ne 'win32') {
	++$skip{$_} foreach qw(
			    Perl_do_spawn
			    Perl_do_spawn_nowait
			    Perl_do_aspawn
			     );
    }
}

if ($ARGS{PLATFORM} ne 'win32') {
    ++$skip{$_} foreach qw(
		    Perl_my_setlocale
			 );
}

unless ($define{UNLINK_ALL_VERSIONS}) {
    ++$skip{Perl_unlnk};
}

unless ($define{'DEBUGGING'}) {
    ++$skip{$_} foreach qw(
		    Perl_debop
		    Perl_debprofdump
		    Perl_debstack
		    Perl_debstackptrs
		    Perl_pad_sv
		    Perl_pad_setsv
                    Perl__setlocale_debug_string
		    Perl_set_padlist
		    Perl_hv_assert
		    PL_watchaddr
		    PL_watchok
		    PL_watch_pvx
			 );
}

if ($define{'PERL_IMPLICIT_SYS'}) {
    ++$skip{$_} foreach qw(
		    Perl_my_popen
		    Perl_my_pclose
			 );
    ++$export{$_} foreach qw(perl_get_host_info perl_alloc_override);
    ++$export{perl_clone_host} if $define{USE_ITHREADS};
}
else {
    ++$skip{$_} foreach qw(
		    PL_Mem
		    PL_MemShared
		    PL_MemParse
		    PL_Env
		    PL_StdIO
		    PL_LIO
		    PL_Dir
		    PL_Sock
		    PL_Proc
		    perl_alloc_using
		    perl_clone_using
			 );
}

if (!$define{'PERL_COPY_ON_WRITE'} || $define{'PERL_NO_COW'}) {
    ++$skip{Perl_sv_setsv_cow};
}

unless ($define{PERL_SAWAMPERSAND}) {
    ++$skip{PL_sawampersand};
}

unless ($define{'USE_REENTRANT_API'}) {
    ++$skip{PL_reentrant_buffer};
}

if ($define{'MYMALLOC'}) {
    try_symbols(qw(
		    Perl_dump_mstats
		    Perl_get_mstats
		    Perl_strdup
		    Perl_putenv
		    MallocCfg_ptr
		    MallocCfgP_ptr
		    ));
    unless ($define{USE_ITHREADS}) {
	++$skip{PL_malloc_mutex}
    }
}
else {
    ++$skip{$_} foreach qw(
		    PL_malloc_mutex
		    Perl_dump_mstats
		    Perl_get_mstats
		    MallocCfg_ptr
		    MallocCfgP_ptr
			 );
}

if ($define{'PERL_USE_SAFE_PUTENV'}) {
    ++$skip{PL_use_safe_putenv};
}

unless ($define{'USE_ITHREADS'}) {
    ++$skip{PL_thr_key};
}

# USE_5005THREADS symbols. Kept as reference for easier removal
++$skip{$_} foreach qw(
		    PL_sv_mutex
		    PL_strtab_mutex
		    PL_svref_mutex
		    PL_cred_mutex
		    PL_eval_mutex
		    PL_fdpid_mutex
		    PL_sv_lock_mutex
		    PL_eval_cond
		    PL_eval_owner
		    PL_threads_mutex
		    PL_nthreads
		    PL_nthreads_cond
		    PL_threadnum
		    PL_threadsv_names
		    PL_thrsv
		    PL_vtbl_mutex
		    Perl_condpair_magic
		    Perl_new_struct_thread
		    Perl_per_thread_magicals
		    Perl_thread_create
		    Perl_find_threadsv
		    Perl_unlock_condpair
		    Perl_magic_mutexfree
		    Perl_sv_lock
		     );

unless ($define{'USE_ITHREADS'}) {
    ++$skip{$_} foreach qw(
		    PL_check_mutex
		    PL_op_mutex
		    PL_regex_pad
		    PL_regex_padav
		    PL_dollarzero_mutex
		    PL_hints_mutex
		    PL_locale_mutex
		    PL_my_ctx_mutex
		    PL_perlio_mutex
		    PL_stashpad
		    PL_stashpadix
		    PL_stashpadmax
		    Perl_alloccopstash
		    Perl_allocfilegv
		    Perl_clone_params_del
		    Perl_clone_params_new
		    Perl_parser_dup
		    Perl_dirp_dup
		    Perl_cx_dup
		    Perl_si_dup
		    Perl_any_dup
		    Perl_ss_dup
		    Perl_fp_dup
		    Perl_gp_dup
		    Perl_he_dup
		    Perl_mg_dup
		    Perl_re_dup_guts
		    Perl_sv_dup
		    Perl_sv_dup_inc
		    Perl_rvpv_dup
		    Perl_hek_dup
		    Perl_sys_intern_dup
		    perl_clone
		    perl_clone_using
		    Perl_stashpv_hvname_match
		    Perl_regdupe_internal
		    Perl_newPADOP
			 );
}

unless ($define{'PERL_IMPLICIT_CONTEXT'}) {
    ++$skip{$_} foreach qw(
		    PL_my_cxt_index
		    PL_my_cxt_list
		    PL_my_cxt_size
		    PL_my_cxt_keys
		    Perl_croak_nocontext
		    Perl_die_nocontext
		    Perl_deb_nocontext
		    Perl_form_nocontext
		    Perl_load_module_nocontext
		    Perl_mess_nocontext
		    Perl_warn_nocontext
		    Perl_warner_nocontext
		    Perl_newSVpvf_nocontext
		    Perl_sv_catpvf_nocontext
		    Perl_sv_setpvf_nocontext
		    Perl_sv_catpvf_mg_nocontext
		    Perl_sv_setpvf_mg_nocontext
		    Perl_my_cxt_init
		    Perl_my_cxt_index
			 );
}

unless ($define{'PERL_OP_PARENT'}) {
    ++$skip{$_} foreach qw(
		    Perl_op_parent
                );
}

unless ($define{'USE_DTRACE'}) {
    ++$skip{$_} foreach qw(
                    Perl_dtrace_probe_call
                    Perl_dtrace_probe_load
                    Perl_dtrace_probe_op
                    Perl_dtrace_probe_phase
                );
}

if ($define{'NO_MATHOMS'}) {
    # win32 builds happen in the win32/ subdirectory, but vms builds happen
    # at the top level, so we need to look in two candidate locations for
    # the mathoms.c file.
    my ($file) = grep { -f } qw( mathoms.c ../mathoms.c )
        or die "No mathoms.c file found in . or ..\n";
    open my $mathoms, '<', $file
        or die "Cannot open $file: $!\n";
    while (<$mathoms>) {
        ++$skip{$1} if /\A ( NATIVE_TO_NEED
                           | ASCII_TO_NEED
                           | Perl_\w+ ) \s* \( /axms;
    }
}

unless ($define{'PERL_NEED_APPCTX'}) {
    ++$skip{PL_appctx};
}

unless ($define{'PERL_NEED_TIMESBASE'}) {
    ++$skip{PL_timesbase};
}

unless ($define{'DEBUG_LEAKING_SCALARS'}) {
    ++$skip{PL_sv_serial};
}

unless ($define{'DEBUG_LEAKING_SCALARS_FORK_DUMP'}) {
    ++$skip{PL_dumper_fd};
}

unless ($define{'PERL_DONT_CREATE_GVSV'}) {
    ++$skip{Perl_gv_SVadd};
}

if ($define{'SPRINTF_RETURNS_STRLEN'}) {
    ++$skip{Perl_my_sprintf};
}

unless ($define{'PERL_USES_PL_PIDSTATUS'}) {
    ++$skip{PL_pidstatus};
}

unless ($define{'PERL_TRACK_MEMPOOL'}) {
    ++$skip{PL_memory_debug_header};
}

unless ($define{'MULTIPLICITY'}) {
    ++$skip{$_} foreach qw(
		    PL_interp_size
		    PL_interp_size_5_18_0
			 );
}

unless ($define{'PERL_GLOBAL_STRUCT'}) {
    ++$skip{PL_global_struct_size};
}

unless ($define{'PERL_GLOBAL_STRUCT_PRIVATE'}) {
    ++$skip{$_} foreach qw(
		    PL_my_cxt_keys
		    Perl_my_cxt_index
			 );
}

unless ($define{HAS_MMAP}) {
    ++$skip{PL_mmap_page_size};
}

if ($define{HAS_SIGACTION}) {
    ++$skip{PL_sig_trapped};

    if ($ARGS{PLATFORM} eq 'vms') {
        # FAKE_PERSISTENT_SIGNAL_HANDLERS defined as !defined(HAS_SIGACTION)
        ++$skip{PL_sig_ignoring};
        ++$skip{PL_sig_handlers_initted} unless $define{KILL_BY_SIGPRC};
    }
}

if ($ARGS{PLATFORM} eq 'vms' && !$define{KILL_BY_SIGPRC}) {
    # FAKE_DEFAULT_SIGNAL_HANDLERS defined as KILL_BY_SIGPRC
    ++$skip{Perl_csighandler_init};
    ++$skip{Perl_my_kill};
    ++$skip{Perl_sig_to_vmscondition};
    ++$skip{PL_sig_defaulting};
    ++$skip{PL_sig_handlers_initted} unless !$define{HAS_SIGACTION};
}

unless ($define{USE_LOCALE_COLLATE}) {
    ++$skip{$_} foreach qw(
		    PL_collation_ix
		    PL_collation_name
		    PL_collation_standard
		    PL_collxfrm_base
		    PL_collxfrm_mult
		    Perl_sv_collxfrm
		    Perl_sv_collxfrm_flags
			 );
}

unless ($define{USE_LOCALE_NUMERIC}) {
    ++$skip{$_} foreach qw(
		    PL_numeric_local
		    PL_numeric_name
		    PL_numeric_radix_sv
		    PL_numeric_standard
			 );
}

unless ($define{'USE_C_BACKTRACE'}) {
    ++$skip{Perl_get_c_backtrace_dump};
    ++$skip{Perl_dump_c_backtrace};
}

unless ($define{HAVE_INTERP_INTERN}) {
    ++$skip{$_} foreach qw(
		    Perl_sys_intern_clear
		    Perl_sys_intern_dup
		    Perl_sys_intern_init
		    PL_sys_intern
			 );
}

if ($define{HAS_SIGNBIT}) {
    ++$skip{Perl_signbit};
}

if ($define{'PERL_GLOBAL_STRUCT'}) {
    readvar('perlvars.h', \%skip);
    # This seems like the least ugly way to cope with the fact that PL_sh_path
    # is mentioned in perlvar.h and globvar.sym, and always exported.
    delete $skip{PL_sh_path};
    ++$export{Perl_GetVars};
    try_symbols(qw(PL_Vars PL_VarsPtr))
      unless $ARGS{CCTYPE} eq 'GCC' || $define{PERL_GLOBAL_STRUCT_PRIVATE};
} else {
    ++$skip{$_} foreach qw(Perl_init_global_struct Perl_free_global_struct);
}

++$skip{PL_op_exec_cnt}
    unless $define{PERL_TRACE_OPS};

# functions from *.sym files

my @@syms = qw(globvar.sym);

# Symbols that are the public face of the PerlIO layers implementation
# These are in _addition to_ the public face of the abstraction
# and need to be exported to allow XS modules to implement layers
my @@layer_syms = qw(
		    PerlIOBase_binmode
		    PerlIOBase_clearerr
		    PerlIOBase_close
		    PerlIOBase_dup
		    PerlIOBase_eof
		    PerlIOBase_error
		    PerlIOBase_fileno
		    PerlIOBase_open
		    PerlIOBase_noop_fail
		    PerlIOBase_noop_ok
		    PerlIOBase_popped
		    PerlIOBase_pushed
		    PerlIOBase_read
		    PerlIOBase_setlinebuf
		    PerlIOBase_unread
		    PerlIOBuf_bufsiz
		    PerlIOBuf_close
		    PerlIOBuf_dup
		    PerlIOBuf_fill
		    PerlIOBuf_flush
		    PerlIOBuf_get_base
		    PerlIOBuf_get_cnt
		    PerlIOBuf_get_ptr
		    PerlIOBuf_open
		    PerlIOBuf_popped
		    PerlIOBuf_pushed
		    PerlIOBuf_read
		    PerlIOBuf_seek
		    PerlIOBuf_set_ptrcnt
		    PerlIOBuf_tell
		    PerlIOBuf_unread
		    PerlIOBuf_write
		    PerlIO_allocate
		    PerlIO_apply_layera
		    PerlIO_apply_layers
		    PerlIO_arg_fetch
		    PerlIO_debug
		    PerlIO_define_layer
		    PerlIO_find_layer
		    PerlIO_isutf8
		    PerlIO_layer_fetch
		    PerlIO_list_alloc
		    PerlIO_list_free
		    PerlIO_modestr
		    PerlIO_parse_layers
		    PerlIO_pending
		    PerlIO_perlio
		    PerlIO_pop
		    PerlIO_push
		    PerlIO_sv_dup
		    Perl_PerlIO_clearerr
		    Perl_PerlIO_close
		    Perl_PerlIO_context_layers
		    Perl_PerlIO_eof
		    Perl_PerlIO_error
		    Perl_PerlIO_fileno
		    Perl_PerlIO_fill
		    Perl_PerlIO_flush
		    Perl_PerlIO_get_base
		    Perl_PerlIO_get_bufsiz
		    Perl_PerlIO_get_cnt
		    Perl_PerlIO_get_ptr
		    Perl_PerlIO_read
		    Perl_PerlIO_restore_errno
		    Perl_PerlIO_save_errno
		    Perl_PerlIO_seek
		    Perl_PerlIO_set_cnt
		    Perl_PerlIO_set_ptrcnt
		    Perl_PerlIO_setlinebuf
		    Perl_PerlIO_stderr
		    Perl_PerlIO_stdin
		    Perl_PerlIO_stdout
		    Perl_PerlIO_tell
		    Perl_PerlIO_unread
		    Perl_PerlIO_write
);
if ($ARGS{PLATFORM} eq 'netware') {
    push(@@layer_syms,'PL_def_layerlist','PL_known_layers','PL_perlio');
}

# Export the symbols that make up the PerlIO abstraction, regardless
# of its implementation - read from a file
push @@syms, 'perlio.sym';

# PerlIO with layers - export implementation
try_symbols(@@layer_syms, 'perlsio_binmode');


unless ($define{'USE_QUADMATH'}) {
  ++$skip{Perl_quadmath_format_needed};
  ++$skip{Perl_quadmath_format_single};
}

###############################################################################

# At this point all skip lists should be completed, as we are about to test
# many symbols against them.

{
    my %seen;
    my ($embed) = setup_embed($ARGS{TARG_DIR});

    foreach (@@$embed) {
	my ($flags, $retval, $func, @@args) = @@$_;
	next unless $func;
	if ($flags =~ /[AX]/ && $flags !~ /[xmi]/ || $flags =~ /b/) {
	    # public API, so export

	    # If a function is defined twice, for example before and after
	    # an #else, only export its name once. Important to do this test
	    # within the block, as the *first* definition may have flags which
	    # mean "don't export"
	    next if $seen{$func}++;
	    # Should we also skip adding the Perl_ prefix if $flags =~ /o/ ?
	    $func = "Perl_$func" if ($flags =~ /[pbX]/ && $func !~ /^Perl_/); 
	    ++$export{$func} unless exists $skip{$func};
	}
    }
}

foreach (@@syms) {
    my $syms = $ARGS{TARG_DIR} . $_;
    open my $global, '<', $syms or die "failed to open $syms: $!\n";
    while (<$global>) {
	next unless /^([A-Za-z].*)/;
	my $symbol = "$1";
	++$export{$symbol} unless exists $skip{$symbol};
    }
}

# variables

if ($define{'MULTIPLICITY'} && $define{PERL_GLOBAL_STRUCT}) {
    readvar('perlvars.h', \%export, sub { "Perl_" . $_[1] . $_[2] . "_ptr" });
    # XXX AIX seems to want the perlvars.h symbols, for some reason
    if ($ARGS{PLATFORM} eq 'aix' or $ARGS{PLATFORM} eq 'os2') {	# OS/2 needs PL_thr_key
	readvar('perlvars.h', \%export);
    }
}
else {
    unless ($define{'PERL_GLOBAL_STRUCT'}) {
	readvar('perlvars.h', \%export);
    }
    unless ($define{MULTIPLICITY}) {
	readvar('intrpvar.h', \%export);
    }
}

# Oddities from PerlIO
# All have alternate implementations in perlio.c, so always exist.
# Should they be considered to be part of the API?
try_symbols(qw(
		    PerlIO_binmode
		    PerlIO_getpos
		    PerlIO_init
		    PerlIO_setpos
		    PerlIO_tmpfile
	     ));

if ($ARGS{PLATFORM} eq 'win32') {
    try_symbols(qw(
				 win32_free_childdir
				 win32_free_childenv
				 win32_get_childdir
				 win32_get_childenv
				 win32_spawnvp
		 ));
}

if ($ARGS{PLATFORM} eq 'wince') {
    ++$skip{'win32_isatty'}; # commit 4342f4d6df is win32-only
}

if ($ARGS{PLATFORM} =~ /^win(?:32|ce)$/) {
    try_symbols(qw(
			    Perl_init_os_extras
			    Perl_thread_create
			    Perl_win32_init
			    Perl_win32_term
			    RunPerl
			    win32_async_check
			    win32_errno
			    win32_environ
			    win32_abort
			    win32_fstat
			    win32_stat
			    win32_pipe
			    win32_popen
			    win32_pclose
			    win32_rename
			    win32_setmode
			    win32_chsize
			    win32_lseek
			    win32_tell
			    win32_dup
			    win32_dup2
			    win32_open
			    win32_close
			    win32_eof
			    win32_isatty
			    win32_read
			    win32_write
			    win32_mkdir
			    win32_rmdir
			    win32_chdir
			    win32_flock
			    win32_execv
			    win32_execvp
			    win32_htons
			    win32_ntohs
			    win32_htonl
			    win32_ntohl
			    win32_inet_addr
			    win32_inet_ntoa
			    win32_socket
			    win32_bind
			    win32_listen
			    win32_accept
			    win32_connect
			    win32_send
			    win32_sendto
			    win32_recv
			    win32_recvfrom
			    win32_shutdown
			    win32_closesocket
			    win32_ioctlsocket
			    win32_setsockopt
			    win32_getsockopt
			    win32_getpeername
			    win32_getsockname
			    win32_gethostname
			    win32_gethostbyname
			    win32_gethostbyaddr
			    win32_getprotobyname
			    win32_getprotobynumber
			    win32_getservbyname
			    win32_getservbyport
			    win32_select
			    win32_endhostent
			    win32_endnetent
			    win32_endprotoent
			    win32_endservent
			    win32_getnetent
			    win32_getnetbyname
			    win32_getnetbyaddr
			    win32_getprotoent
			    win32_getservent
			    win32_sethostent
			    win32_setnetent
			    win32_setprotoent
			    win32_setservent
			    win32_getenv
			    win32_putenv
			    win32_perror
			    win32_malloc
			    win32_calloc
			    win32_realloc
			    win32_free
			    win32_sleep
			    win32_times
			    win32_access
			    win32_alarm
			    win32_chmod
			    win32_open_osfhandle
			    win32_get_osfhandle
			    win32_ioctl
			    win32_link
			    win32_unlink
			    win32_utime
			    win32_gettimeofday
			    win32_uname
			    win32_wait
			    win32_waitpid
			    win32_kill
			    win32_str_os_error
			    win32_opendir
			    win32_readdir
			    win32_telldir
			    win32_seekdir
			    win32_rewinddir
			    win32_closedir
			    win32_longpath
			    win32_ansipath
			    win32_os_id
			    win32_getpid
			    win32_crypt
			    win32_dynaload
			    win32_clearenv
			    win32_stdin
			    win32_stdout
			    win32_stderr
			    win32_ferror
			    win32_feof
			    win32_strerror
			    win32_fprintf
			    win32_printf
			    win32_vfprintf
			    win32_vprintf
			    win32_fread
			    win32_fwrite
			    win32_fopen
			    win32_fdopen
			    win32_freopen
			    win32_fclose
			    win32_fputs
			    win32_fputc
			    win32_ungetc
			    win32_getc
			    win32_fileno
			    win32_clearerr
			    win32_fflush
			    win32_ftell
			    win32_fseek
			    win32_fgetpos
			    win32_fsetpos
			    win32_rewind
			    win32_tmpfile
			    win32_setbuf
			    win32_setvbuf
			    win32_flushall
			    win32_fcloseall
			    win32_fgets
			    win32_gets
			    win32_fgetc
			    win32_putc
			    win32_puts
			    win32_getchar
			    win32_putchar
		 ));
}
elsif ($ARGS{PLATFORM} eq 'vms') {
    try_symbols(qw(
		      Perl_cando
		      Perl_cando_by_name
		      Perl_closedir
		      Perl_csighandler_init
		      Perl_do_rmdir
		      Perl_fileify_dirspec
		      Perl_fileify_dirspec_ts
		      Perl_fileify_dirspec_utf8
		      Perl_fileify_dirspec_utf8_ts
		      Perl_flex_fstat
		      Perl_flex_lstat
		      Perl_flex_stat
		      Perl_kill_file
		      Perl_my_chdir
		      Perl_my_chmod
		      Perl_my_crypt
		      Perl_my_endpwent
		      Perl_my_fclose
		      Perl_my_fdopen
		      Perl_my_fgetname
		      Perl_my_flush
		      Perl_my_fwrite
		      Perl_my_gconvert
		      Perl_my_getenv
		      Perl_my_getenv_len
		      Perl_my_getpwnam
		      Perl_my_getpwuid
		      Perl_my_gmtime
		      Perl_my_kill
		      Perl_my_killpg
		      Perl_my_localtime
		      Perl_my_mkdir
		      Perl_my_sigaction
		      Perl_my_symlink
		      Perl_my_time
		      Perl_my_tmpfile
		      Perl_my_trnlnm
		      Perl_my_utime
		      Perl_my_waitpid
		      Perl_opendir
		      Perl_pathify_dirspec
		      Perl_pathify_dirspec_ts
		      Perl_pathify_dirspec_utf8
		      Perl_pathify_dirspec_utf8_ts
		      Perl_readdir
		      Perl_readdir_r
		      Perl_rename
		      Perl_rmscopy
		      Perl_rmsexpand
		      Perl_rmsexpand_ts
		      Perl_rmsexpand_utf8
		      Perl_rmsexpand_utf8_ts
		      Perl_seekdir
		      Perl_sig_to_vmscondition
		      Perl_telldir
		      Perl_tounixpath
		      Perl_tounixpath_ts
		      Perl_tounixpath_utf8
		      Perl_tounixpath_utf8_ts
		      Perl_tounixspec
		      Perl_tounixspec_ts
		      Perl_tounixspec_utf8
		      Perl_tounixspec_utf8_ts
		      Perl_tovmspath
		      Perl_tovmspath_ts
		      Perl_tovmspath_utf8
		      Perl_tovmspath_utf8_ts
		      Perl_tovmsspec
		      Perl_tovmsspec_ts
		      Perl_tovmsspec_utf8
		      Perl_tovmsspec_utf8_ts
		      Perl_trim_unixpath
		      Perl_vms_case_tolerant
		      Perl_vms_do_aexec
		      Perl_vms_do_exec
		      Perl_vms_image_init
		      Perl_vms_realpath
		      Perl_vmssetenv
		      Perl_vmssetuserlnm
		      Perl_vmstrnenv
		      PerlIO_openn
		 ));
}
elsif ($ARGS{PLATFORM} eq 'os2') {
    try_symbols(qw(
		      ctermid
		      get_sysinfo
		      Perl_OS2_init
		      Perl_OS2_init3
		      Perl_OS2_term
		      OS2_Perl_data
		      dlopen
		      dlsym
		      dlerror
		      dlclose
		      dup2
		      dup
		      my_tmpfile
		      my_tmpnam
		      my_flock
		      my_rmdir
		      my_mkdir
		      my_getpwuid
		      my_getpwnam
		      my_getpwent
		      my_setpwent
		      my_endpwent
		      fork_with_resources
		      croak_with_os2error
		      setgrent
		      endgrent
		      getgrent
		      malloc_mutex
		      threads_mutex
		      nthreads
		      nthreads_cond
		      os2_cond_wait
		      os2_stat
		      os2_execname
		      async_mssleep
		      msCounter
		      InfoTable
		      pthread_join
		      pthread_create
		      pthread_detach
		      XS_Cwd_change_drive
		      XS_Cwd_current_drive
		      XS_Cwd_extLibpath
		      XS_Cwd_extLibpath_set
		      XS_Cwd_sys_abspath
		      XS_Cwd_sys_chdir
		      XS_Cwd_sys_cwd
		      XS_Cwd_sys_is_absolute
		      XS_Cwd_sys_is_relative
		      XS_Cwd_sys_is_rooted
		      XS_DynaLoader_mod2fname
		      XS_File__Copy_syscopy
		      Perl_Register_MQ
		      Perl_Deregister_MQ
		      Perl_Serve_Messages
		      Perl_Process_Messages
		      init_PMWIN_entries
		      PMWIN_entries
		      Perl_hab_GET
		      loadByOrdinal
		      pExtFCN
		      os2error
		      ResetWinError
		      CroakWinError
		      PL_do_undump
		 ));
}
elsif ($ARGS{PLATFORM} eq 'netware') {
    try_symbols(qw(
			Perl_init_os_extras
			Perl_thread_create
			Perl_nw5_init
			RunPerl
			AllocStdPerl
			FreeStdPerl
			do_spawn2
			do_aspawn
			nw_uname
			nw_stdin
			nw_stdout
			nw_stderr
			nw_feof
			nw_ferror
			nw_fopen
			nw_fclose
			nw_clearerr
			nw_getc
			nw_fgets
			nw_fputc
			nw_fputs
			nw_fflush
			nw_ungetc
			nw_fileno
			nw_fdopen
			nw_freopen
			nw_fread
			nw_fwrite
			nw_setbuf
			nw_setvbuf
			nw_vfprintf
			nw_ftell
			nw_fseek
			nw_rewind
			nw_tmpfile
			nw_fgetpos
			nw_fsetpos
			nw_dup
			nw_access
			nw_chmod
			nw_chsize
			nw_close
			nw_dup2
			nw_flock
			nw_isatty
			nw_link
			nw_lseek
			nw_stat
			nw_mktemp
			nw_open
			nw_read
			nw_rename
			nw_setmode
			nw_unlink
			nw_utime
			nw_write
			nw_chdir
			nw_rmdir
			nw_closedir
			nw_opendir
			nw_readdir
			nw_rewinddir
			nw_seekdir
			nw_telldir
			nw_htonl
			nw_htons
			nw_ntohl
			nw_ntohs
			nw_accept
			nw_bind
			nw_connect
			nw_endhostent
			nw_endnetent
			nw_endprotoent
			nw_endservent
			nw_gethostbyaddr
			nw_gethostbyname
			nw_gethostent
			nw_gethostname
			nw_getnetbyaddr
			nw_getnetbyname
			nw_getnetent
			nw_getpeername
			nw_getprotobyname
			nw_getprotobynumber
			nw_getprotoent
			nw_getservbyname
			nw_getservbyport
			nw_getservent
			nw_getsockname
			nw_getsockopt
			nw_inet_addr
			nw_listen
			nw_socket
			nw_recv
			nw_recvfrom
			nw_select
			nw_send
			nw_sendto
			nw_sethostent
			nw_setnetent
			nw_setprotoent
			nw_setservent
			nw_setsockopt
			nw_inet_ntoa
			nw_shutdown
			nw_crypt
			nw_execvp
			nw_kill
			nw_Popen
			nw_Pclose
			nw_Pipe
			nw_times
			nw_waitpid
			nw_getpid
			nw_spawnvp
			nw_os_id
			nw_open_osfhandle
			nw_get_osfhandle
			nw_abort
			nw_sleep
			nw_wait
			nw_dynaload
			nw_strerror
			fnFpSetMode
			fnInsertHashListAddrs
			fnGetHashListAddrs
			Perl_deb
			Perl_sv_setsv
			Perl_sv_catsv
			Perl_sv_catpvn
			Perl_sv_2pv
			nw_freeenviron
			Remove_Thread_Ctx
		 ));
}

# When added this code was only run for Win32 and WinCE
# Currently only Win32 links static extensions into the shared library.
# The WinCE makefile doesn't appear to support static extensions, so this code
# can't have any effect there.
# The NetWare Makefile doesn't support static extensions (and hardcodes the
# list of dynamic extensions, and the rules to build them)
# For *nix (and presumably OS/2) with a shared libperl, Makefile.SH compiles
# static extensions with -fPIC, but links them to perl, not libperl.so
# The VMS build scripts don't yet implement static extensions at all.

if ($ARGS{PLATFORM} =~ /^win(?:32|ce)$/) {
    # records of type boot_module for statically linked modules (except Dynaloader)
    my $static_ext = $Config{static_ext} // "";
    $static_ext =~ s/\//__/g;
    $static_ext =~ s/\bDynaLoader\b//;
    try_symbols(map {"boot_$_"} grep {/\S/} split /\s+/, $static_ext);
    try_symbols("init_Win32CORE") if $static_ext =~ /\bWin32CORE\b/;
}

if ($ARGS{PLATFORM} eq 'os2') {
    my (%mapped, @@missing);
    open MAP, 'miniperl.map' or die 'Cannot read miniperl.map';
    /^\s*[\da-f:]+\s+(\w+)/i and $mapped{$1}++ foreach <MAP>;
    close MAP or die 'Cannot close miniperl.map';

    @@missing = grep { !exists $mapped{$_} }
		    keys %export;
    @@missing = grep { !exists $exportperlmalloc{$_} } @@missing;
    delete $export{$_} foreach @@missing;
}

###############################################################################

# Now all symbols should be defined because next we are going to output them.

# Start with platform specific headers:

if ($ARGS{PLATFORM} =~ /^win(?:32|ce)$/) {
    my $dll = $define{PERL_DLL} ? $define{PERL_DLL} =~ s/\.dll$//ir
	: "perl$Config{api_revision}$Config{api_version}";
    print "LIBRARY $dll\n";
    # The DESCRIPTION module definition file statement is not supported
    # by VC7 onwards.
    if ($ARGS{CCTYPE} =~ /^(?:MSVC60|GCC)$/) {
	print "DESCRIPTION 'Perl interpreter'\n";
    }
    print "EXPORTS\n";
}
elsif ($ARGS{PLATFORM} eq 'os2') {
    (my $v = $]) =~ s/(\d\.\d\d\d)(\d\d)$/$1_$2/;
    $v .= '-thread' if $Config{archname} =~ /-thread/;
    (my $dll = $define{PERL_DLL}) =~ s/\.dll$//i;
    $v .= "\@@$Config{perl_patchlevel}" if $Config{perl_patchlevel};
    my $d = "DESCRIPTION '\@@#perl5-porters\@@perl.org:$v#\@@ Perl interpreter, configured as $Config{config_args}'";
    $d = substr($d, 0, 249) . "...'" if length $d > 253;
    print <<"---EOP---";
LIBRARY '$dll' INITINSTANCE TERMINSTANCE
$d
STACKSIZE 32768
CODE LOADONCALL
DATA LOADONCALL NONSHARED MULTIPLE
EXPORTS
---EOP---
}
elsif ($ARGS{PLATFORM} eq 'aix') {
    my $OSVER = `uname -v`;
    chop $OSVER;
    my $OSREL = `uname -r`;
    chop $OSREL;
    if ($OSVER > 4 || ($OSVER == 4 && $OSREL >= 3)) {
	print "#! ..\n";
    } else {
	print "#!\n";
    }
}
elsif ($ARGS{PLATFORM} eq 'netware') {
	if ($ARGS{FILETYPE} eq 'def') {
	print "LIBRARY perl$Config{api_revision}$Config{api_version}\n";
	print "DESCRIPTION 'Perl interpreter for NetWare'\n";
	print "EXPORTS\n";
	}
}

# Then the symbols

my @@symbols = $fold ? sort {lc $a cmp lc $b} keys %export : sort keys %export;
foreach my $symbol (@@symbols) {
    if (PLATFORM eq 'win32' || PLATFORM eq 'wince') {
	# Remembering the origin file of each symbol is an alternative to PL_ matching
	if (substr($symbol, 0, 3) eq 'PL_') {
	    print "\t$symbol DATA\n";
	}
	else {
	    print "\t$symbol\n";
	}
    }
    elsif (PLATFORM eq 'os2') {
	printf qq(    %-31s \@@%s\n),
	  qq("$symbol"), $ordinal{$symbol} || ++$sym_ord;
	printf qq(    %-31s \@@%s\n),
	  qq("$exportperlmalloc{$symbol}" = "$symbol"),
	  $ordinal{$exportperlmalloc{$symbol}} || ++$sym_ord
	  if $exportperlmalloc and exists $exportperlmalloc{$symbol};
    }
    elsif (PLATFORM eq 'netware') {
	print "\t$symbol,\n";
    } else {
	print "$symbol\n";
    }
}

# Then platform specific footers.

if ($ARGS{PLATFORM} eq 'os2') {
    print <<EOP;
    dll_perlmain=main
    fill_extLibpath
    dir_subst
    Perl_OS2_handler_install

; LAST_ORDINAL=$sym_ord
EOP
}

1;
@


1.10
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d35 2
a36 6
BEGIN { unshift @@INC, "lib" }
use Config;
use strict;

my %ARGS = (CCTYPE => 'MSVC', TARG_DIR => '');

d39 11
a49 5
my $fold;

sub process_cc_flags {
    foreach (map {split /\s+/, $_} @@_) {
	$define{$1} = $2 // 1 if /^-D(\w+)(?:=(.+))?/;
a50 1
}
d52 9
a60 8
while (@@ARGV) {
    my $flag = shift;
    if ($flag =~ /^(?:CC_FLAGS=)?(-D\w.*)/) {
	process_cc_flags($1);
    } elsif ($flag =~ /^(CCTYPE|FILETYPE|PLATFORM|TARG_DIR)=(.+)$/) {
	$ARGS{$1} = $2;
    } elsif ($flag eq '--sort-fold') {
	++$fold;
a61 5
}

require "$ARGS{TARG_DIR}regen/embed_lib.pl";

{
d71 3
a214 1
				PL_timesbuf
d255 2
d288 1
a288 2
unless ($define{'PERL_OLD_COPY_ON_WRITE'}
     || $define{'PERL_NEW_COPY_ON_WRITE'}) {
d367 1
d424 16
d441 12
a452 150
    ++$skip{$_} foreach qw(
		    ASCII_TO_NEED
		    NATIVE_TO_NEED
		    Perl_custom_op_desc
		    Perl_custom_op_name
		    Perl_do_aexec
		    Perl_do_binmode
		    Perl_do_open
		    Perl_do_open9
		    Perl_fprintf_nocontext
		    Perl_gv_AVadd
		    Perl_gv_HVadd
		    Perl_gv_IOadd
		    Perl_gv_SVadd
		    Perl_gv_efullname
		    Perl_gv_efullname3
		    Perl_gv_fetchmethod
		    Perl_gv_fullname
		    Perl_gv_fullname3
		    Perl_hv_delete
		    Perl_hv_delete_ent
		    Perl_hv_exists
		    Perl_hv_exists_ent
		    Perl_hv_fetch
		    Perl_hv_fetch_ent
		    Perl_hv_iternext
		    Perl_hv_magic
		    Perl_hv_store
		    Perl_hv_store_ent
		    Perl_hv_store_flags
		    Perl_init_i18nl14n
		    Perl_isALNUM_lazy
		    Perl_isIDFIRST_lazy
		    Perl_is_uni_alnum
		    Perl_is_uni_alnum_lc
		    Perl_is_uni_alnumc
		    Perl_is_uni_alnumc_lc
		    Perl_is_uni_alpha
		    Perl_is_uni_alpha_lc
		    Perl_is_uni_ascii
		    Perl_is_uni_ascii_lc
		    Perl_is_uni_blank
		    Perl_is_uni_blank_lc
		    Perl_is_uni_cntrl
		    Perl_is_uni_cntrl_lc
		    Perl_is_uni_digit
		    Perl_is_uni_digit_lc
		    Perl_is_uni_graph
		    Perl_is_uni_graph_lc
		    Perl_is_uni_idfirst
		    Perl_is_uni_idfirst_lc
		    Perl_is_uni_lower
		    Perl_is_uni_lower_lc
		    Perl_is_uni_print
		    Perl_is_uni_print_lc
		    Perl_is_uni_punct
		    Perl_is_uni_punct_lc
		    Perl_is_uni_space
		    Perl_is_uni_space_lc
		    Perl_is_uni_upper
		    Perl_is_uni_upper_lc
		    Perl_is_uni_xdigit
		    Perl_is_uni_xdigit_lc
		    Perl_is_utf8_alnum
		    Perl_is_utf8_alnumc
		    Perl_is_utf8_alpha
		    Perl_is_utf8_ascii
		    Perl_is_utf8_blank
		    Perl_is_utf8_char
		    Perl_is_utf8_cntrl
		    Perl_is_utf8_digit
		    Perl_is_utf8_graph
		    Perl_is_utf8_idcont
		    Perl_is_utf8_idfirst
		    Perl_is_utf8_lower
		    Perl_is_utf8_mark
		    Perl_is_utf8_perl_space
		    Perl_is_utf8_perl_word
		    Perl_is_utf8_posix_digit
		    Perl_is_utf8_print
		    Perl_is_utf8_punct
		    Perl_is_utf8_space
		    Perl_is_utf8_string_loc
		    Perl_is_utf8_upper
		    Perl_is_utf8_xdigit
		    Perl_is_utf8_xidcont
		    Perl_is_utf8_xidfirst
		    Perl_my_lstat
		    Perl_my_stat
		    Perl_newAV
		    Perl_newHV
		    Perl_newIO
		    Perl_newSUB
		    Perl_pack_cat
		    Perl_printf_nocontext
		    Perl_ref
		    Perl_save_freeop
		    Perl_save_freepv
		    Perl_save_freesv
		    Perl_save_iv
		    Perl_save_list
		    Perl_save_long
		    Perl_save_mortalizesv
		    Perl_save_nogv
		    Perl_save_op
		    Perl_save_re_context
		    Perl_sv_2iv
		    Perl_sv_2pv
		    Perl_sv_2pv_nolen
		    Perl_sv_2pvbyte_nolen
		    Perl_sv_2pvutf8_nolen
		    Perl_sv_2uv
		    Perl_sv_catpvn
		    Perl_sv_catpvn_mg
		    Perl_sv_catsv
		    Perl_sv_catsv_mg
		    Perl_sv_force_normal
		    Perl_sv_insert
		    Perl_sv_iv
		    Perl_sv_mortalcopy
		    Perl_sv_nolocking
		    Perl_sv_nounlocking
		    Perl_sv_nv
		    Perl_sv_pv
		    Perl_sv_pvbyte
		    Perl_sv_pvbyten
		    Perl_sv_pvn
		    Perl_sv_pvn_force
		    Perl_sv_pvn_nomg
		    Perl_sv_pvutf8
		    Perl_sv_pvutf8n
		    Perl_sv_setsv
		    Perl_sv_taint
		    Perl_sv_unref
		    Perl_sv_usepvn
		    Perl_sv_usepvn_mg
		    Perl_sv_utf8_upgrade
		    Perl_sv_uv
		    Perl_to_uni_lower_lc
		    Perl_to_uni_title_lc
		    Perl_to_uni_upper_lc
		    Perl_to_utf8_fold
		    Perl_to_utf8_lower
		    Perl_to_utf8_title
		    Perl_to_utf8_upper
		    Perl_unpack_str
		    Perl_utf8_to_uvchr
		    Perl_utf8_to_uvuni
		    Perl_valid_utf8_to_uvuni
			 );
a486 7
unless ($define{PERL_MAD}) {
    ++$skip{$_} foreach qw(
		    PL_madskills
		    PL_xmlfp
			 );
}

d549 5
d653 2
d670 6
a675 4
if ($define{'USE_PERLIO'}) {
    # Export the symbols that make up the PerlIO abstraction, regardless
    # of its implementation - read from a file
    push @@syms, 'perlio.sym';
a676 17
    # PerlIO with layers - export implementation
    try_symbols(@@layer_syms, 'perlsio_binmode');
} else {
	# -Uuseperlio
	# Skip the PerlIO layer symbols - although
	# nothing should have exported them anyway.
	++$skip{$_} foreach @@layer_syms;
	++$skip{$_} foreach qw(
			perlsio_binmode
			PL_def_layerlist
			PL_known_layers
			PL_perlio
			PL_perlio_debug_fd
			PL_perlio_fd_refcnt
			PL_perlio_fd_refcnt_size
			PL_perlio_mutex
			     );
d678 3
a680 3
	# Also do NOT add abstraction symbols from $perlio_sym
	# abstraction is done as #define to stdio
	# Remaining remnants that _may_ be functions are handled below.
a712 3
    # Functions already have a Perl_ prefix
    # Variables need a PL_ prefix
    my $prefix = $syms =~ /var\.sym$/i ? 'PL_' : '';
d715 1
a715 1
	my $symbol = "$prefix$1";
a946 1
		      Perl_my_getlogin
d951 1
d1300 8
a1307 2
    if ($ARGS{PLATFORM} =~ /^win(?:32|ce)$/) {
	print "\t$symbol\n";
d1309 1
a1309 1
    elsif ($ARGS{PLATFORM} eq 'os2') {
d1317 1
a1317 1
    elsif ($ARGS{PLATFORM} eq 'netware') {
@


1.9
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d423 152
@


1.8
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d107 1
a107 1
my $config_h = $ARGS{PLATFORM} eq 'wince' ? 'xconfig.h' : 'config.h';
d238 6
d373 1
d550 3
d640 1
a640 1
    # Export the symols that make up the PerlIO abstraction, regardless
d644 2
a645 83
    # This part is then dependent on how the abstraction is implemented
    if ($define{'USE_SFIO'}) {
	# Old legacy non-stdio "PerlIO"
	++$skip{$_} foreach @@layer_syms;
	++$skip{perlsio_binmode};
	# SFIO defines most of the PerlIO routines as macros
	# So undo most of what $perlio_sym has just done - d'oh !
	# Perhaps it would be better to list the ones which do exist
	# And emit them
	++$skip{$_} foreach qw(
			 PerlIO_canset_cnt
			 PerlIO_clearerr
			 PerlIO_close
			 PerlIO_eof
			 PerlIO_error
			 PerlIO_exportFILE
			 PerlIO_fast_gets
			 PerlIO_fdopen
			 PerlIO_fileno
			 PerlIO_findFILE
			 PerlIO_flush
			 PerlIO_get_base
			 PerlIO_get_bufsiz
			 PerlIO_get_cnt
			 PerlIO_get_ptr
			 PerlIO_getc
			 PerlIO_getname
			 PerlIO_has_base
			 PerlIO_has_cntptr
			 PerlIO_importFILE
			 PerlIO_open
			 PerlIO_printf
			 PerlIO_putc
			 PerlIO_puts
			 PerlIO_read
			 PerlIO_releaseFILE
			 PerlIO_reopen
			 PerlIO_rewind
			 PerlIO_seek
			 PerlIO_set_cnt
			 PerlIO_set_ptrcnt
			 PerlIO_setlinebuf
			 PerlIO_sprintf
			 PerlIO_stderr
			 PerlIO_stdin
			 PerlIO_stdout
			 PerlIO_stdoutf
			 PerlIO_tell
			 PerlIO_ungetc
			 PerlIO_vprintf
			 PerlIO_write
			 PerlIO_perlio
			 Perl_PerlIO_clearerr
			 Perl_PerlIO_close
			 Perl_PerlIO_eof
			 Perl_PerlIO_error
			 Perl_PerlIO_fileno
			 Perl_PerlIO_fill
			 Perl_PerlIO_flush
			 Perl_PerlIO_get_base
			 Perl_PerlIO_get_bufsiz
			 Perl_PerlIO_get_cnt
			 Perl_PerlIO_get_ptr
			 Perl_PerlIO_read
			 Perl_PerlIO_seek
			 Perl_PerlIO_set_cnt
			 Perl_PerlIO_set_ptrcnt
			 Perl_PerlIO_setlinebuf
			 Perl_PerlIO_stderr
			 Perl_PerlIO_stdin
			 Perl_PerlIO_stdout
			 Perl_PerlIO_tell
			 Perl_PerlIO_unread
			 Perl_PerlIO_write
                         PL_def_layerlist
                         PL_known_layers
                         PL_perlio
			     );
    }
    else {
	# PerlIO with layers - export implementation
	try_symbols(@@layer_syms, 'perlsio_binmode');
    }
a732 1
		    PerlIO_sprintf
a733 1
		    PerlIO_vsprintf
@


1.7
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d90 6
a95 3
my @@options = sort(Config::bincompat_options(), Config::non_bincompat_options());
print STDERR "Options: (@@options)\n" unless $ARGS{PLATFORM} eq 'test';
$define{$_} = 1 foreach @@options;
d107 2
a108 1
open(CFG, '<', 'config.h') || die "Cannot open config.h: $!\n";
d112 1
a118 4
if ($define{PERL_IMPLICIT_SYS}) {
    $define{PL_OP_SLAB_ALLOC} = 1;
}

a250 1
		    PL_block_type
d281 2
a282 1
unless ($define{'PERL_OLD_COPY_ON_WRITE'}) {
d286 4
d363 4
a416 17
unless ($define{'PL_OP_SLAB_ALLOC'}) {
    ++$skip{$_} foreach qw(
                     PL_OpPtr
                     PL_OpSlab
                     PL_OpSpace
		     Perl_Slab_Alloc
		     Perl_Slab_Free
			 );
}

unless ($define{'PERL_DEBUG_READONLY_OPS'}) {
    ++$skip{$_} foreach qw(
		    PL_slab_count
		    PL_slabs
			 );
}

d459 1
a459 1
		    PL_interp_size_5_16_0
d484 1
d488 9
d537 2
a538 1
    try_symbols(qw(PL_Vars PL_VarsPtr)) unless $ARGS{CCTYPE} eq 'GCC';
d750 1
a750 1
	if ($flags =~ /[AX]/ && $flags !~ /[xm]/ || $flags =~ /b/) {
d758 2
a759 1
	    $func = "Perl_$func" if $flags =~ /[pbX]/;
a810 2
				 setgid
				 setuid
d817 4
@


1.6
log
@merge in perl 5.12.2 plus local changes
@
text
@d6 2
a7 2
# and by AIX for creating libperl.a when -Dusershrplib is in effect,
# and by MacOS Classic.
d11 1
d13 1
a13 2
#    config.sh
#    global.sym
a15 1
#    macperl.sym  (on MacOS)
d20 1
d22 1
a22 2
# plus long lists of function names hard-coded directly in this script and
# in the DATA section.
d33 1
a33 1

d39 3
a41 1
use vars qw($PLATFORM $CCTYPE $FILETYPE $CONFIG_ARGS $ARCHNAME $PATCHLEVEL);
d43 7
a49 1
my (%define, %ordinal);
d53 6
a58 13
    if ($flag =~ s/^CC_FLAGS=/ /) {
	for my $fflag ($flag =~ /(?:^|\s)-D(\S+)/g) {
	    $fflag     .= '=1' unless $fflag =~ /^(\w+)=/;
	    $define{$1} = $2   if $fflag =~ /^(\w+)=(.+)$/;
	}
	next;
    }
    $define{$1} = 1 if ($flag =~ /^-D(\w+)$/);
    $define{$1} = $2 if ($flag =~ /^-D(\w+)=(.+)$/);
    $CCTYPE   = $1 if ($flag =~ /^CCTYPE=(\w+)$/);
    $PLATFORM = $1 if ($flag =~ /^PLATFORM=(\w+)$/);
    if ($PLATFORM eq 'netware') {
	$FILETYPE = $1 if ($flag =~ /^FILETYPE=(\w+)$/);
d62 31
a92 29
my @@PLATFORM = qw(aix win32 wince os2 MacOS netware);
my %PLATFORM;
@@PLATFORM{@@PLATFORM} = ();

defined $PLATFORM || die "PLATFORM undefined, must be one of: @@PLATFORM\n";
exists $PLATFORM{$PLATFORM} || die "PLATFORM must be one of: @@PLATFORM\n";

if ($PLATFORM eq 'win32' or $PLATFORM eq 'wince' or $PLATFORM eq "aix") {
	# Add the compile-time options that miniperl was built with to %define.
	# On Win32 these are not the same options as perl itself will be built
	# with since miniperl is built with a canned config (one of the win32/
	# config_H.*) and none of the BUILDOPT's that are set in the makefiles,
	# but they do include some #define's that are hard-coded in various
	# source files and header files and don't include any BUILDOPT's that
	# the user might have chosen to disable because the canned configs are
	# minimal configs that don't include any of those options.
	my $opts = ($PLATFORM eq 'wince' ? '-MCross' : ''); # for wince need Cross.pm to get Config.pm

	$ENV{PERL5LIB} = join $Config{path_sep}, @@INC;
	my $cmd = "$^X $opts -V";
	my $config = `$cmd`
	    or die "Couldn't run [$cmd]: $!";
	my($options) = $config =~ /^  Compile-time options: (.*?)\n^  \S/ms;
	$options =~ s/\s+/ /g;
	print STDERR "Options: ($options)\n";
	foreach (split /\s+/, $options) {
		$define{$_} = 1;
	}
}
d102 1
a102 28
my $exportperlmalloc = $PLATFORM eq 'os2';

my $config_sh   = "config.sh";
my $config_h    = "config.h";
my $intrpvar_h  = "intrpvar.h";
my $perlvars_h  = "perlvars.h";
my $global_sym  = "global.sym";
my $pp_sym      = "pp.sym";
my $globvar_sym = "globvar.sym";
my $perlio_sym  = "perlio.sym";
my $static_ext = "";

if ($PLATFORM eq 'aix') {
    # Nothing for now.
}
elsif ($PLATFORM =~ /^win(?:32|ce)$/ || $PLATFORM eq 'netware') {
    $CCTYPE = "MSVC" unless defined $CCTYPE;
    foreach ($intrpvar_h, $perlvars_h, $global_sym,
	     $pp_sym, $globvar_sym, $perlio_sym) {
	s!^!..\\!;
    }
}
elsif ($PLATFORM eq 'MacOS') {
    foreach ($intrpvar_h, $perlvars_h, $global_sym,
	     $pp_sym, $globvar_sym, $perlio_sym) {
	s!^!::!;
    }
}
d104 1
a104 27
unless ($PLATFORM eq 'win32' || $PLATFORM eq 'wince' || $PLATFORM eq 'MacOS' || $PLATFORM eq 'netware') {
    open(CFG,$config_sh) || die "Cannot open $config_sh: $!\n";
    while (<CFG>) {
	if (/^(?:ccflags|optimize)='(.+)'$/) {
	    $_ = $1;
	    $define{$1} = 1 while /-D(\w+)/g;
	}
        if (/^(d_(?:mmap|sigaction))='(.+)'$/) {
            $define{$1} = $2;
        }
	if ($PLATFORM eq 'os2') {
	    $CONFIG_ARGS = $1 if /^config_args='(.+)'$/;
	    $ARCHNAME =    $1 if /^archname='(.+)'$/;
	    $PATCHLEVEL =  $1 if /^perl_patchlevel='(.+)'$/;
	}
    }
    close(CFG);
}
if ($PLATFORM eq 'win32' || $PLATFORM eq 'wince') {
    open(CFG,"<..\\$config_sh") || die "Cannot open ..\\$config_sh: $!\n";
    if ((join '', <CFG>) =~ /^static_ext='(.*)'$/m) {
        $static_ext = $1;
    }
    close(CFG);
}

open(CFG,$config_h) || die "Cannot open $config_h: $!\n";
d106 3
a108 5
    $define{$1} = 1 if /^\s*#\s*define\s+(MYMALLOC)\b/;
    $define{$1} = 1 if /^\s*#\s*define\s+(MULTIPLICITY)\b/;
    $define{$1} = 1 if /^\s*#\s*define\s+(PERL_\w+)\b/;
    $define{$1} = 1 if /^\s*#\s*define\s+(USE_\w+)\b/;
    $define{$1} = 1 if /^\s*#\s*define\s+(HAS_\w+)\b/;
d128 1
a128 1
if ($define{USE_ITHREADS} && $PLATFORM ne 'win32' && $^O ne 'darwin') {
d134 3
d138 1
d140 1
a140 20
print STDERR "Defines: (" . join(' ', sort keys %define) . ")\n";

if ($PLATFORM =~ /^win(?:32|ce)$/) {
    (my $dll = ($define{PERL_DLL} || "perl512")) =~ s/\.dll$//i;
    print "LIBRARY $dll\n";
    # The DESCRIPTION module definition file statement is not supported
    # by VC7 onwards.
    if ($CCTYPE !~ /^MSVC7/ && $CCTYPE !~ /^MSVC8/ && $CCTYPE !~ /^MSVC9/) {
	print "DESCRIPTION 'Perl interpreter'\n";
    }
    print "EXPORTS\n";
    if ($define{PERL_IMPLICIT_SYS}) {
	output_symbol("perl_get_host_info");
	output_symbol("perl_alloc_override");
    }
    if ($define{USE_ITHREADS} and $define{PERL_IMPLICIT_SYS}) {
	output_symbol("perl_clone_host");
    }
}
elsif ($PLATFORM eq 'os2') {
a151 37
    (my $v = $]) =~ s/(\d\.\d\d\d)(\d\d)$/$1_$2/;
    $v .= '-thread' if $ARCHNAME =~ /-thread/;
    (my $dll = $define{PERL_DLL}) =~ s/\.dll$//i;
    $v .= "\@@$PATCHLEVEL" if $PATCHLEVEL;
    my $d = "DESCRIPTION '\@@#perl5-porters\@@perl.org:$v#\@@ Perl interpreter, configured as $CONFIG_ARGS'";
    $d = substr($d, 0, 249) . "...'" if length $d > 253;
    print <<"---EOP---";
LIBRARY '$dll' INITINSTANCE TERMINSTANCE
$d
STACKSIZE 32768
CODE LOADONCALL
DATA LOADONCALL NONSHARED MULTIPLE
EXPORTS
---EOP---
}
elsif ($PLATFORM eq 'aix') {
    my $OSVER = `uname -v`;
    chop $OSVER;
    my $OSREL = `uname -r`;
    chop $OSREL;
    if ($OSVER > 4 || ($OSVER == 4 && $OSREL >= 3)) {
	print "#! ..\n";
    } else {
	print "#!\n";
    }
}
elsif ($PLATFORM eq 'netware') {
	if ($FILETYPE eq 'def') {
	print "LIBRARY perl512\n";
	print "DESCRIPTION 'Perl interpreter for NetWare'\n";
	print "EXPORTS\n";
	}
	if ($define{PERL_IMPLICIT_SYS}) {
	    output_symbol("perl_get_host_info");
	    output_symbol("perl_alloc_override");
	    output_symbol("perl_clone_host");
	}
d155 2
a156 1
my %export;
d158 3
a160 4
sub skip_symbols {
    my $list = shift;
    foreach my $symbol (@@$list) {
	$skip{$symbol} = 1;
d164 19
a182 9
sub emit_symbols {
    my $list = shift;
    foreach my $symbol (@@$list) {
	my $skipsym = $symbol;
	# XXX hack
	if ($define{MULTIPLICITY}) {
	    $skipsym =~ s/^Perl_[GIT](\w+)_ptr$/PL_$1/;
	}
	emit_symbol($symbol) unless exists $skip{$skipsym};
d186 2
a187 4
if ($PLATFORM eq 'win32') {
    skip_symbols [qw(
		     PL_statusvalue_vms
		     PL_archpat_auto
a188 38
		     PL_DBcv
		     PL_generation
		     PL_lastgotoprobe
		     PL_linestart
		     PL_modcount
		     PL_pending_ident
		     PL_sublex_info
		     PL_timesbuf
		     main
		     Perl_ErrorNo
		     Perl_GetVars
		     Perl_do_exec3
		     Perl_do_ipcctl
		     Perl_do_ipcget
		     Perl_do_msgrcv
		     Perl_do_msgsnd
		     Perl_do_semop
		     Perl_do_shmio
		     Perl_dump_fds
		     Perl_init_thread_intern
		     Perl_my_bzero
		     Perl_my_bcopy
		     Perl_my_htonl
		     Perl_my_ntohl
		     Perl_my_swap
		     Perl_my_chsize
		     Perl_same_dirent
		     Perl_setenv_getix
		     Perl_unlnk
		     Perl_watch
		     Perl_safexcalloc
		     Perl_safexmalloc
		     Perl_safexfree
		     Perl_safexrealloc
		     Perl_my_memcmp
		     Perl_my_memset
		     PL_cshlen
		     PL_cshname
a189 48
		     Perl_do_exec
		     Perl_getenv_len
		     Perl_my_pclose
		     Perl_my_popen
		     Perl_my_sprintf
		     )];
}
else {
    skip_symbols [qw(
		     Perl_do_spawn
		     Perl_do_spawn_nowait
		     Perl_do_aspawn
		     )];
}
if ($PLATFORM eq 'wince') {
    skip_symbols [qw(
		     PL_statusvalue_vms
		     PL_archpat_auto
		     PL_cryptseen
		     PL_DBcv
		     PL_generation
		     PL_lastgotoprobe
		     PL_linestart
		     PL_modcount
		     PL_pending_ident
		     PL_sublex_info
		     PL_timesbuf
		     PL_collation_ix
		     PL_collation_name
		     PL_collation_standard
		     PL_collxfrm_base
		     PL_collxfrm_mult
		     PL_numeric_compat1
		     PL_numeric_local
		     PL_numeric_name
		     PL_numeric_radix_sv
		     PL_numeric_standard
		     PL_vtbl_collxfrm
		     Perl_sv_collxfrm
		     setgid
		     setuid
		     win32_free_childdir
		     win32_free_childenv
		     win32_get_childdir
		     win32_get_childenv
		     win32_spawnvp
		     main
		     Perl_ErrorNo
a190 37
		     Perl_do_exec3
		     Perl_do_ipcctl
		     Perl_do_ipcget
		     Perl_do_msgrcv
		     Perl_do_msgsnd
		     Perl_do_semop
		     Perl_do_shmio
		     Perl_dump_fds
		     Perl_init_thread_intern
		     Perl_my_bzero
		     Perl_my_bcopy
		     Perl_my_htonl
		     Perl_my_ntohl
		     Perl_my_swap
		     Perl_my_chsize
		     Perl_same_dirent
		     Perl_setenv_getix
		     Perl_unlnk
		     Perl_watch
		     Perl_safexcalloc
		     Perl_safexmalloc
		     Perl_safexfree
		     Perl_safexrealloc
		     Perl_my_memcmp
		     Perl_my_memset
		     PL_cshlen
		     PL_cshname
		     PL_opsave
		     Perl_do_exec
		     Perl_getenv_len
		     Perl_my_pclose
		     Perl_my_popen
		     Perl_my_sprintf
		     )];
}
elsif ($PLATFORM eq 'aix') {
    skip_symbols([qw(
a191 2
		     Perl_ErrorNo
		     Perl_GetVars
d200 35
a234 125
		     Perl_safexcalloc
		     Perl_safexfree
		     Perl_safexmalloc
		     Perl_safexrealloc
		     Perl_same_dirent
		     Perl_unlnk
		     Perl_sys_intern_clear
		     Perl_sys_intern_dup
		     Perl_sys_intern_init
		     Perl_my_sprintf
		     PL_cryptseen
		     PL_opsave
		     PL_statusvalue_vms
		     PL_sys_intern
		     )]);
    skip_symbols([qw(
		     Perl_signbit
		     )])
	if $define{'HAS_SIGNBIT'};
    emit_symbols([qw(
		     boot_DynaLoader
		     )]);
}
elsif ($PLATFORM eq 'os2') {
    emit_symbols([qw(
		    ctermid
		    get_sysinfo
		    Perl_OS2_init
		    Perl_OS2_init3
		    Perl_OS2_term
		    OS2_Perl_data
		    dlopen
		    dlsym
		    dlerror
		    dlclose
		    dup2
		    dup
		    my_tmpfile
		    my_tmpnam
		    my_flock
		    my_rmdir
		    my_mkdir
		    my_getpwuid
		    my_getpwnam
		    my_getpwent
		    my_setpwent
		    my_endpwent
		    fork_with_resources
		    croak_with_os2error
		    setgrent
		    endgrent
		    getgrent
		    malloc_mutex
		    threads_mutex
		    nthreads
		    nthreads_cond
		    os2_cond_wait
		    os2_stat
		    os2_execname
		    async_mssleep
		    msCounter
		    InfoTable
		    pthread_join
		    pthread_create
		    pthread_detach
		    XS_Cwd_change_drive
		    XS_Cwd_current_drive
		    XS_Cwd_extLibpath
		    XS_Cwd_extLibpath_set
		    XS_Cwd_sys_abspath
		    XS_Cwd_sys_chdir
		    XS_Cwd_sys_cwd
		    XS_Cwd_sys_is_absolute
		    XS_Cwd_sys_is_relative
		    XS_Cwd_sys_is_rooted
		    XS_DynaLoader_mod2fname
		    XS_File__Copy_syscopy
		    Perl_Register_MQ
		    Perl_Deregister_MQ
		    Perl_Serve_Messages
		    Perl_Process_Messages
		    init_PMWIN_entries
		    PMWIN_entries
		    Perl_hab_GET
		    loadByOrdinal
		    pExtFCN
		    os2error
		    ResetWinError
		    CroakWinError
		    PL_do_undump
		    )]);
    emit_symbols([qw(os2_cond_wait
		     pthread_join
		     pthread_create
		     pthread_detach
		    )])
      if $define{'USE_5005THREADS'} or $define{'USE_ITHREADS'};
}
elsif ($PLATFORM eq 'MacOS') {
    skip_symbols [qw(
		    Perl_GetVars
		    PL_cryptseen
		    PL_cshlen
		    PL_cshname
		    PL_statusvalue_vms
		    PL_sys_intern
		    PL_opsave
		    PL_timesbuf
		    Perl_dump_fds
		    Perl_my_bcopy
		    Perl_my_bzero
		    Perl_my_chsize
		    Perl_my_htonl
		    Perl_my_memcmp
		    Perl_my_memset
		    Perl_my_ntohl
		    Perl_my_swap
		    Perl_safexcalloc
		    Perl_safexfree
		    Perl_safexmalloc
		    Perl_safexrealloc
		    Perl_unlnk
		    Perl_sys_intern_clear
		    Perl_sys_intern_init
		    )];
d236 3
a238 75
elsif ($PLATFORM eq 'netware') {
	skip_symbols [qw(
			PL_statusvalue_vms
			PL_archpat_auto
			PL_cryptseen
			PL_DBcv
			PL_generation
			PL_lastgotoprobe
			PL_linestart
			PL_modcount
			PL_pending_ident
			PL_sublex_info
			PL_timesbuf
			main
			Perl_ErrorNo
			Perl_GetVars
			Perl_do_exec3
			Perl_do_ipcctl
			Perl_do_ipcget
			Perl_do_msgrcv
			Perl_do_msgsnd
			Perl_do_semop
			Perl_do_shmio
			Perl_dump_fds
			Perl_init_thread_intern
			Perl_my_bzero
			Perl_my_htonl
			Perl_my_ntohl
			Perl_my_swap
			Perl_my_chsize
			Perl_same_dirent
			Perl_setenv_getix
			Perl_unlnk
			Perl_watch
			Perl_safexcalloc
			Perl_safexmalloc
			Perl_safexfree
			Perl_safexrealloc
			Perl_my_memcmp
			Perl_my_memset
			PL_cshlen
			PL_cshname
			PL_opsave
			Perl_do_exec
			Perl_getenv_len
			Perl_my_pclose
			Perl_my_popen
			Perl_sys_intern_init
			Perl_sys_intern_dup
			Perl_sys_intern_clear
			Perl_my_bcopy
			Perl_PerlIO_write
			Perl_PerlIO_unread
			Perl_PerlIO_tell
			Perl_PerlIO_stdout
			Perl_PerlIO_stdin
			Perl_PerlIO_stderr
			Perl_PerlIO_setlinebuf
			Perl_PerlIO_set_ptrcnt
			Perl_PerlIO_set_cnt
			Perl_PerlIO_seek
			Perl_PerlIO_read
			Perl_PerlIO_get_ptr
			Perl_PerlIO_get_cnt
			Perl_PerlIO_get_bufsiz
			Perl_PerlIO_get_base
			Perl_PerlIO_flush
			Perl_PerlIO_fill
			Perl_PerlIO_fileno
			Perl_PerlIO_error
			Perl_PerlIO_eof
			Perl_PerlIO_close
			Perl_PerlIO_clearerr
			PerlIO_perlio
			)];
d242 1
a242 2
    skip_symbols [qw(
		    Perl_deb_growlevel
d248 1
d254 1
a254 7
		    )];
}

if ($define{'PERL_IMPLICIT_CONTEXT'}) {
    skip_symbols [qw(
		    PL_sig_sv
		    )];
d258 1
a258 2
    skip_symbols [qw(
		    Perl_getenv_len
d261 3
a263 1
		    )];
d266 1
a266 1
    skip_symbols [qw(
d276 3
a278 1
		    )];
d282 1
a282 3
    skip_symbols [qw(
		    Perl_sv_setsv_cow
		  )];
d286 1
a286 3
    skip_symbols [qw(
		    PL_reentrant_buffer
		    )];
d290 1
a290 1
    emit_symbols [qw(
d297 3
a299 10
		    )];
    if ($define{'USE_ITHREADS'}) {
	emit_symbols [qw(
			PL_malloc_mutex
			)];
    }
    else {
	skip_symbols [qw(
			PL_malloc_mutex
			)];
d303 1
a303 1
    skip_symbols [qw(
a306 2
		    Perl_malloced_size
		    Perl_malloc_good_size
d309 1
a309 1
		    )];
d313 1
a313 3
    skip_symbols [qw(
                   PL_use_safe_putenv
                  )];
d317 1
a317 3
    skip_symbols [qw(
		    PL_thr_key
		    )];
d321 1
a321 1
    skip_symbols [qw(
d346 1
a346 1
		    )];
d349 2
a350 1
    skip_symbols [qw(
a353 2
		    PL_sharedsv_space
		    PL_sharedsv_space_mutex
d358 2
a359 1
		    PL_regdupe
a369 1
		    Perl_mro_meta_dup
d372 1
a377 7
		    Perl_sharedsv_find
		    Perl_sharedsv_init
		    Perl_sharedsv_lock
		    Perl_sharedsv_new
		    Perl_sharedsv_thrcnt_dec
		    Perl_sharedsv_thrcnt_inc
		    Perl_sharedsv_unlock
d381 1
a381 1
		    )];
d385 1
a385 1
    skip_symbols [qw(
d405 1
a405 12
		    )];
}

unless ($define{'PERL_IMPLICIT_SYS'}) {
    skip_symbols [qw(
		    perl_alloc_using
		    perl_clone_using
		    )];
}

unless ($define{'FAKE_THREADS'}) {
    skip_symbols [qw(PL_curthr)];
d409 1
a409 1
    skip_symbols [qw(
d415 1
a415 1
                    )];
d419 1
a419 1
    skip_symbols [qw(
d422 1
a422 5
                  )];
}

unless ($define{'THREADS_HAVE_PIDS'}) {
    skip_symbols [qw(PL_ppid)];
d426 1
a426 3
    skip_symbols [qw(
		    PL_appctx
		    )];
d430 1
a430 3
    skip_symbols [qw(
		    PL_timesbase
		    )];
d434 1
a434 3
    skip_symbols [qw(
		    PL_sv_serial
		    )];
d438 1
a438 3
    skip_symbols [qw(
		    PL_dumper_fd
		    )];
d440 1
d442 1
a442 3
    skip_symbols [qw(
		     Perl_gv_SVadd
		    )];
d444 1
d446 1
a446 3
    skip_symbols [qw(
		     Perl_my_sprintf
		    )];
d448 1
d450 1
a450 4
    skip_symbols [qw(
		     Perl_pidgone
		     PL_pidstatus
		    )];
d454 1
a454 3
    skip_symbols [qw(
                     PL_memory_debug_header
                    )];
d457 2
a458 7
if ($define{'PERL_MAD'}) {
    skip_symbols [qw(
		     PL_nextval
		     PL_nexttype
		     )];
} else {
    skip_symbols [qw(
d461 1
a461 29
		    PL_lasttoke
		    PL_realtokenstart
		    PL_faketokens
		    PL_thismad
		    PL_thistoken
		    PL_thisopen
		    PL_thisstuff
		    PL_thisclose
		    PL_thiswhite
		    PL_nextwhite
		    PL_skipwhite
		    PL_endwhite
		    PL_curforce
		    Perl_pad_peg
		    Perl_xmldump_indent
		    Perl_xmldump_vindent
		    Perl_xmldump_all
		    Perl_xmldump_packsubs
		    Perl_xmldump_sub
		    Perl_xmldump_form
		    Perl_xmldump_eval
		    Perl_sv_catxmlsv
		    Perl_sv_catxmlpvn
		    Perl_sv_xmlpeek
		    Perl_do_pmop_xmldump
		    Perl_pmop_xmldump
		    Perl_do_op_xmldump
		    Perl_op_xmldump
		    )];
d465 1
a465 1
    skip_symbols [qw(
d467 2
a468 2
		    PL_interp_size_5_10_0
		    )];
d472 1
a472 3
    skip_symbols [qw(
		    PL_global_struct_size
		    )];
d476 1
a476 1
    skip_symbols [qw(
d479 14
a492 1
		    )];
d495 10
a504 4
unless ($define{'d_mmap'}) {
    skip_symbols [qw(
		    PL_mmap_page_size
		    )];
d507 7
a513 4
if ($define{'d_sigaction'}) {
    skip_symbols [qw(
		    PL_sig_trapped
		    )];
d516 8
a523 6
if ($^O ne 'vms') {
    # VMS does its own thing for these symbols.
    skip_symbols [qw(PL_sig_handlers_initted
                     PL_sig_ignoring
                     PL_sig_defaulting)];
}  
d525 2
a526 13
sub readvar {
    my $file = shift;
    my $proc = shift || sub { "PL_$_[2]" };
    open(VARS,$file) || die "Cannot open $file: $!\n";
    my @@syms;
    while (<VARS>) {
	# All symbols have a Perl_ prefix because that's what embed.h
	# sticks in front of them.  The A?I?S?C? is strictly speaking
	# wrong.
	push(@@syms, &$proc($1,$2,$3)) if (/\bPERLVAR(A?I?S?C?)\(([IGT])(\w+)/);
    }
    close(VARS);
    return \@@syms;
d530 6
a535 4
    my $global = readvar($perlvars_h);
    skip_symbols $global;
    emit_symbol('Perl_GetVars');
    emit_symbols [qw(PL_Vars PL_VarsPtr)] unless $CCTYPE eq 'GCC';
d537 1
a537 1
    skip_symbols [qw(Perl_init_global_struct Perl_free_global_struct)];
d542 1
a542 1
my @@syms = ($global_sym, $globvar_sym); # $pp_sym is not part of the API
d555 1
d622 1
a622 1
if ($PLATFORM eq 'netware') {
d629 1
a629 1
    push @@syms, $perlio_sym;
d634 2
a635 2
	skip_symbols \@@layer_syms;
	skip_symbols [qw(perlsio_binmode)];
d640 1
a640 1
	skip_symbols [qw(
d708 1
a708 1
			 )];
d712 1
a712 12
	emit_symbols \@@layer_syms;
	emit_symbols [qw(perlsio_binmode)];
    }
    if ($define{'USE_ITHREADS'}) {
	emit_symbols [qw(
			PL_perlio_mutex
			)];
    }
    else {
	skip_symbols [qw(
			PL_perlio_mutex
			)];
d718 2
a719 2
	skip_symbols \@@layer_syms;
	skip_symbols [qw(
d727 2
a728 1
			)];
d732 27
a758 2
	# Remaining remnants that _may_ be functions
	# are handled in <DATA>
d761 10
a770 10
for my $syms (@@syms) {
    open (GLOBAL, "<$syms") || die "failed to open $syms: $!\n";
    while (<GLOBAL>) {
	next if (!/^[A-Za-z]/);
	# Functions have a Perl_ prefix
	# Variables have a PL_ prefix
	chomp($_);
	my $symbol = ($syms =~ /var\.sym$/i ? "PL_" : "");
	$symbol .= $_;
	emit_symbol($symbol) unless exists $skip{$symbol};
a771 1
    close(GLOBAL);
d776 2
a777 9
if ($define{'MULTIPLICITY'}) {
    for my $f ($perlvars_h, $intrpvar_h) {
	my $glob = readvar($f, sub { "Perl_" . $_[1] . $_[2] . "_ptr" });
	emit_symbols $glob;
    }
    unless ($define{'USE_ITHREADS'}) {
	# XXX needed for XS extensions that define PERL_CORE
	emit_symbol("PL_curinterp");
    }
d779 2
a780 3
    if ($PLATFORM eq 'aix' or $PLATFORM eq 'os2') {	# OS/2 needs PL_thr_key
	my $glob = readvar($perlvars_h);
	emit_symbols $glob;
d785 1
a785 2
	my $glob = readvar($perlvars_h);
	emit_symbols $glob;
d787 2
a788 3
    unless ($define{'MULTIPLICITY'}) {
	my $glob = readvar($intrpvar_h);
	emit_symbols $glob;
d792 23
a814 13
sub try_symbol {
    my $symbol = shift;

    return if $symbol !~ /^[A-Za-z_]/;
    return if $symbol =~ /^\#/;
    $symbol =~s/\r//g;
    chomp($symbol);
    return if exists $skip{$symbol};
    emit_symbol($symbol);
}

while (<DATA>) {
    try_symbol($_);
d817 2
a818 5
if ($PLATFORM =~ /^win(?:32|ce)$/) {
    foreach my $symbol (qw(
			    setuid
			    setgid
			    boot_DynaLoader
a845 1
			    win32_spawnvp
a930 2
			    win32_get_childenv
			    win32_free_childenv
a931 2
			    win32_get_childdir
			    win32_free_childdir
d972 1
a972 7
			   ))
    {
	try_symbol($symbol);
    }
    if ($CCTYPE eq "BORLAND") {
	try_symbol('_matherr');
    }
d974 153
a1126 10
elsif ($PLATFORM eq 'os2') {
    my (%mapped, @@missing);
    open MAP, 'miniperl.map' or die 'Cannot read miniperl.map';
    /^\s*[\da-f:]+\s+(\w+)/i and $mapped{$1}++ foreach <MAP>;
    close MAP or die 'Cannot close miniperl.map';

    @@missing = grep { !exists $mapped{$_} }
		    keys %export;
    @@missing = grep { !exists $exportperlmalloc{$_} } @@missing;
    delete $export{$_} foreach @@missing;
d1128 2
a1129 12
elsif ($PLATFORM eq 'MacOS') {
    open MACSYMS, 'macperl.sym' or die 'Cannot read macperl.sym';

    while (<MACSYMS>) {
	try_symbol($_);
    }

    close MACSYMS;
}
elsif ($PLATFORM eq 'netware') {
foreach my $symbol (qw(
			boot_DynaLoader
d1264 1
a1264 4
			   ))
    {
	try_symbol($symbol);
    }
d1267 18
a1284 8
# records of type boot_module for statically linked modules (except Dynaloader)
$static_ext =~ s/\//__/g;
$static_ext =~ s/\bDynaLoader\b//;
my @@stat_mods = map {"boot_$_"} grep {/\S/} split /\s+/, $static_ext;
foreach my $symbol (@@stat_mods)
    {
	try_symbol($symbol);
    }
d1286 5
a1290 1
try_symbol("init_Win32CORE") if $static_ext =~ /\bWin32CORE\b/;
d1292 7
a1298 2
# Now all symbols should be defined because
# next we are going to output them.
d1300 1
a1300 3
foreach my $symbol (sort keys %export) {
    output_symbol($symbol);
}
d1302 1
a1302 6
if ($PLATFORM eq 'os2') {
	print <<EOP;
    dll_perlmain=main
    fill_extLibpath
    dir_subst
    Perl_OS2_handler_install
d1304 44
a1347 2
; LAST_ORDINAL=$sym_ord
EOP
d1350 1
a1350 5
sub emit_symbol {
    my $symbol = shift;
    chomp($symbol);
    $export{$symbol} = 1;
}
d1352 3
a1354 4
sub output_symbol {
    my $symbol = shift;
    if ($PLATFORM =~ /^win(?:32|ce)$/) {
	$symbol = "_$symbol" if $CCTYPE eq 'BORLAND';
a1355 21
# XXX: binary compatibility between compilers is an exercise
# in frustration :-(
#        if ($CCTYPE eq "BORLAND") {
#	    # workaround Borland quirk by exporting both the straight
#	    # name and a name with leading underscore.  Note the
#	    # alias *must* come after the symbol itself, if both
#	    # are to be exported. (Linker bug?)
#	    print "\t_$symbol\n";
#	    print "\t$symbol = _$symbol\n";
#	}
#	elsif ($CCTYPE eq 'GCC') {
#	    # Symbols have leading _ whole process is $%@@"% slow
#	    # so skip aliases for now
#	    nprint "\t$symbol\n";
#	}
#	else {
#	    # for binary coexistence, export both the symbol and
#	    # alias with leading underscore
#	    print "\t$symbol\n";
#	    print "\t_$symbol = $symbol\n";
#	}
d1357 1
a1357 1
    elsif ($PLATFORM eq 'os2') {
d1365 3
a1367 1
    elsif ($PLATFORM eq 'aix' || $PLATFORM eq 'MacOS') {
d1370 13
a1382 3
	elsif ($PLATFORM eq 'netware') {
	print "\t$symbol,\n";
	}
a1385 10
__DATA__
# Oddities from PerlIO
PerlIO_binmode
PerlIO_getpos
PerlIO_init
PerlIO_setpos
PerlIO_sprintf
PerlIO_sv_dup
PerlIO_tmpfile
PerlIO_vsprintf
@


1.5
log
@Merge in perl 5.10.1
@
text
@d37 1
d79 5
a83 1
	my $config = `$^X $opts -Ilib -V`;
d192 1
a192 1
    (my $dll = ($define{PERL_DLL} || "perl510")) =~ s/\.dll$//i;
d248 1
a248 1
	print "LIBRARY perl510\n";
d761 1
d775 1
a775 1
		    Perl_re_dup
a796 1
		    PL_my_ctx_mutex
d1226 4
d1291 1
@


1.4
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d9 26
a34 2
# reads global.sym, pp.sym, perlvars.h, intrpvar.h, config.h
# On OS/2 reads miniperl.map and the previous version of perl5.def as well
d156 1
d432 7
a627 1
		    Perl_sv_peek
d701 1
d858 6
d1040 1
d1043 1
@


1.3
log
@merge in perl 5.8.8
@
text
@d1 1
d9 1
a9 1
# reads global.sym, pp.sym, perlvars.h, intrpvar.h, thrdvar.h, config.h
d12 6
a17 2
my $PLATFORM;
my $CCTYPE;
d44 1
a44 1
if ($PLATFORM eq 'win32' or $PLATFORM eq "aix") {
d53 2
a54 1
	my $config = `$^X -Ilib -V`;
a74 1
my $thrdvar_h   = "thrdvar.h";
d88 2
a89 2
    foreach ($thrdvar_h, $intrpvar_h, $perlvars_h, $global_sym,
		$pp_sym, $globvar_sym, $perlio_sym) {
d94 2
a95 2
    foreach ($thrdvar_h, $intrpvar_h, $perlvars_h, $global_sym,
		$pp_sym, $globvar_sym, $perlio_sym) {
d107 3
a148 1
    $define{USE_5005THREADS}  ||
d162 1
a162 1
    ($dll = ($define{PERL_DLL} || "perl58")) =~ s/\.dll$//i;
d164 5
a168 1
    print "DESCRIPTION 'Perl interpreter'\n";
d190 1
a190 1
    ($v = $]) =~ s/(\d\.\d\d\d)(\d\d)$/$1_$2/;
d192 1
a192 1
    ($dll = $define{PERL_DLL}) =~ s/\.dll$//i;
d194 1
a194 1
    $d = "DESCRIPTION '\@@#perl5-porters\@@perl.org:$v#\@@ Perl interpreter, configured as $CONFIG_ARGS'";
d206 1
a206 1
    $OSVER = `uname -v`;
d208 1
a208 1
    $OSREL = `uname -r`;
d218 1
a218 1
	print "LIBRARY perl58\n";
a261 1
		     PL_sortcxix
a319 1
		     PL_sortcxix
d401 1
a521 1
			PL_sortcxix
d595 1
d597 1
d601 7
d632 1
a632 1
unless ($define{'PERL_FLEXIBLE_EXCEPTIONS'}) {
d634 2
a635 4
		    PL_protect
		    Perl_default_protect
		    Perl_vdefault_protect
		    )];
d653 1
a653 1
    if ($define{'USE_5005THREADS'} || $define{'USE_ITHREADS'}) {
d681 1
a681 1
unless ($define{'USE_5005THREADS'} || $define{'USE_ITHREADS'}) {
d687 1
a687 1
unless ($define{'USE_5005THREADS'}) {
a713 1
}
a716 3
		    PL_ptr_table
		    PL_pte_root
		    PL_pte_arenaroot
d723 4
d736 1
d740 1
a741 8
		    Perl_ptr_table_clear
		    Perl_ptr_table_fetch
		    Perl_ptr_table_free
		    Perl_ptr_table_new
		    Perl_ptr_table_clear
		    Perl_ptr_table_free
		    Perl_ptr_table_split
		    Perl_ptr_table_store
d752 2
d759 5
d777 2
d803 7
d814 12
d836 96
d940 3
a942 2
	# sticks in front of them.
	push(@@syms, &$proc($1,$2,$3)) if (/\bPERLVAR(A?I?C?)\(([IGT])(\w+)/);
a947 5
if ($define{'USE_5005THREADS'}) {
    my $thrd = readvar($thrdvar_h);
    skip_symbols $thrd;
}

d953 2
d1014 1
d1129 10
d1142 1
a1142 1
	# nothing should have exported them any way
d1144 9
a1152 2
	skip_symbols [qw(perlsio_binmode)];
        skip_symbols [qw(PL_def_layerlist PL_known_layers PL_perlio)];
d1177 1
a1177 1
    for my $f ($perlvars_h, $intrpvar_h, $thrdvar_h) {
a1195 4
    unless ($define{'MULTIPLICITY'} || $define{'USE_5005THREADS'}) {
	my $glob = readvar($thrdvar_h);
	emit_symbols $glob;
    }
d1325 1
d1384 1
d1555 2
a1625 11
# extra globals not included above.
Perl_cxinc
perl_alloc
perl_alloc_using
perl_clone
perl_clone_using
perl_construct
perl_destruct
perl_free
perl_parse
perl_run
@


1.2
log
@The official fix for the Perl sprintf buffer overflow.

ok millert@@
@
text
@d39 18
d152 2
a154 1
    warn join(' ',keys %define)."\n";
d289 1
d367 1
d659 6
d703 2
d722 1
d741 1
d788 11
d916 1
d994 1
d1001 1
d1232 3
a1495 1
perlsio_binmode
@


1.1
log
@Initial revision
@
text
@d4 3
a6 2
# Needed by WIN32 and OS/2 for creating perl.dll
# and by AIX for creating libperl.a when -Dusershrplib is in effect.
d9 1
a9 1
# On OS/2 reads miniperl.map as well
a13 33
my %bincompat5005 =
      (
       Perl_call_atexit		=>	"perl_atexit",
       Perl_eval_sv		=>	"perl_eval_sv",
       Perl_eval_pv		=>	"perl_eval_pv",
       Perl_call_argv		=>	"perl_call_argv",
       Perl_call_method		=>	"perl_call_method",
       Perl_call_pv		=>	"perl_call_pv",
       Perl_call_sv		=>	"perl_call_sv",
       Perl_get_av		=>	"perl_get_av",
       Perl_get_cv		=>	"perl_get_cv",
       Perl_get_hv		=>	"perl_get_hv",
       Perl_get_sv		=>	"perl_get_sv",
       Perl_init_i18nl10n	=>	"perl_init_i18nl10n",
       Perl_init_i18nl14n	=>	"perl_init_i18nl14n",
       Perl_new_collate		=>	"perl_new_collate",
       Perl_new_ctype		=>	"perl_new_ctype",
       Perl_new_numeric		=>	"perl_new_numeric",
       Perl_require_pv		=>	"perl_require_pv",
       Perl_safesyscalloc	=>	"Perl_safecalloc",
       Perl_safesysfree		=>	"Perl_safefree",
       Perl_safesysmalloc	=>	"Perl_safemalloc",
       Perl_safesysrealloc	=>	"Perl_saferealloc",
       Perl_set_numeric_local	=>	"perl_set_numeric_local",
       Perl_set_numeric_standard  =>	"perl_set_numeric_standard",
       Perl_malloc		=>	"malloc",
       Perl_mfree		=>	"free",
       Perl_realloc		=>	"realloc",
       Perl_calloc		=>	"calloc",
      );

my $bincompat5005 = join("|", keys %bincompat5005);

d16 7
d27 3
d32 1
a32 1
my @@PLATFORM = qw(aix win32 os2);
d37 11
a47 1
exists $PLATFORM{$PLATFORM} || die "PLATFORM must be one of: @@PLATFORM\n"; 
d58 1
d60 1
a60 1
if ($PLATFORM eq 'aix') { 
d63 1
a63 1
elsif ($PLATFORM eq 'win32') {
d65 2
a66 1
    foreach ($thrdvar_h, $intrpvar_h, $perlvars_h, $global_sym, $pp_sym, $globvar_sym) {
d70 6
d77 1
a77 1
unless ($PLATFORM eq 'win32') {
d85 3
a87 2
	    $CONFIG_ARGS = $1 if /^(?:config_args)='(.+)'$/;
	    $ARCHNAME = $1 if /^(?:archname)='(.+)'$/;
d92 7
a102 3
    $define{$1} = 1 if /^\s*#\s*define\s+(USE_5005THREADS)\b/;
    $define{$1} = 1 if /^\s*#\s*define\s+(USE_ITHREADS)\b/;
    $define{$1} = 1 if /^\s*#\s*define\s+(USE_PERLIO)\b/;
d104 2
a105 2
    $define{$1} = 1 if /^\s*#\s*define\s+(PERL_IMPLICIT_SYS)\b/;
    $define{$1} = 1 if /^\s*#\s*define\s+(PERL_BINCOMPAT_5005)\b/;
d111 4
d116 1
a116 1
    if (!$define{MULTIPLICITY} && !$define{PERL_OBJECT}) {
d126 2
a127 5
if ($define{PERL_CAPI}) {
    delete $define{PERL_OBJECT};
    $define{MULTIPLICITY} = 1; 
    $define{PERL_IMPLICIT_CONTEXT} = 1;
    $define{PERL_IMPLICIT_SYS}     = 1;
d130 1
a130 4
if ($define{PERL_OBJECT}) {
    $define{PERL_IMPLICIT_CONTEXT} = 1;
    $define{PERL_IMPLICIT_SYS}     = 1;
}
d132 1
a132 1
# perl.h logic duplication ends
d134 1
a134 1
if ($PLATFORM eq 'win32') {
d136 2
a137 1
    print "LIBRARY Perl56\n";
d144 3
d149 11
a161 8
    #$sum = 0;
    #for (split //, $v) {
    #	$sum = ($sum * 33) + ord;
    #	$sum &= 0xffffff;
    #}
    #$sum += $sum >> 5;
    #$sum &= 0xffff;
    #$sum = printf '%X', $sum;
d163 3
a165 1
    # print STDERR "'$dll' <= '$define{PERL_DLL}'\n";
d168 1
a168 1
DESCRIPTION '\@@#perl5-porters\@@perl.org:$v#\@@ Perl interpreter, configured as $CONFIG_ARGS'
d176 21
a196 1
    print "#!\n";
d214 1
a214 1
	if ($define{PERL_OBJECT} || $define{MULTIPLICITY}) {
d248 78
d368 1
d370 1
d382 2
d389 2
d394 12
d412 4
d438 6
d445 111
a559 1
		    Perl_deb
a564 1
		    Perl_runops_debug
d601 6
d611 4
a614 4
		    Perl_malloc
		    Perl_mfree
		    Perl_realloc
		    Perl_calloc
a631 4
		    Perl_malloc
		    Perl_mfree
		    Perl_realloc
		    Perl_calloc
d633 2
d651 2
d669 1
d677 5
d694 1
d696 1
d698 2
d704 7
d743 14
d766 2
a767 2
    } 
    close(VARS); 
d787 78
d866 97
a962 1
     push @@syms, $perlio_sym;
d981 1
a981 1
if ($define{'PERL_OBJECT'} || $define{'MULTIPLICITY'}) {
d987 1
a987 1
    if ($PLATFORM eq 'aix') {
d996 1
a996 1
    } 
d1000 1
a1000 1
    } 
d1004 1
a1004 1
    } 
d1010 1
a1010 1
    return if $symbol !~ /^[A-Za-z]/;
d1022 1
a1022 1
if ($PLATFORM eq 'win32') {
d1024 2
d1030 1
d1032 1
a1034 29
			    win32_stdin
			    win32_stdout
			    win32_stderr
			    win32_ferror
			    win32_feof
			    win32_strerror
			    win32_fprintf
			    win32_printf
			    win32_vfprintf
			    win32_vprintf
			    win32_fread
			    win32_fwrite
			    win32_fopen
			    win32_fdopen
			    win32_freopen
			    win32_fclose
			    win32_fputs
			    win32_fputc
			    win32_ungetc
			    win32_getc
			    win32_fileno
			    win32_clearerr
			    win32_fflush
			    win32_ftell
			    win32_fseek
			    win32_fgetpos
			    win32_fsetpos
			    win32_rewind
			    win32_tmpfile
d1043 1
a1105 11
			    win32_setbuf
			    win32_setvbuf
			    win32_flushall
			    win32_fcloseall
			    win32_fgets
			    win32_gets
			    win32_fgetc
			    win32_putc
			    win32_puts
			    win32_getchar
			    win32_putchar
d1121 1
d1138 45
d1193 1
a1193 1
    @@missing = grep { !exists $mapped{$_} and !exists $bincompat5005{$_} }
d1195 1
d1198 160
d1366 11
d1379 1
a1379 1
    chomp($symbol); 
d1385 1
a1385 3
    $symbol = $bincompat5005{$symbol}
	if $define{PERL_BINCOMPAT_5005} and $symbol =~ /^($bincompat5005)$/;
    if ($PLATFORM eq 'win32') {
d1411 6
a1416 1
	print qq(    "$symbol"\n);
d1418 1
a1418 1
    elsif ($PLATFORM eq 'aix') {
d1421 3
d1429 1
d1439 10
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d54 1
a54 1
my @@PLATFORM = qw(aix win32 os2 MacOS);
a79 6
elsif ($PLATFORM eq 'MacOS') {
    foreach ($thrdvar_h, $intrpvar_h, $perlvars_h, $global_sym,
		$pp_sym, $globvar_sym, $perlio_sym) {
	s!^!::!;
    }
}
d81 1
a81 1
unless ($PLATFORM eq 'win32' || $PLATFORM eq 'MacOS') {
a101 1
    $define{$1} = 1 if /^\s*#\s*define\s+(USE_SFIO)\b/;
d160 1
a160 1
DESCRIPTION '\@@#perl5-porters\@@perl.org:$v#\@@ Perl interpreter'
a261 1
		     Perl_sys_intern_clear
a262 1
		     Perl_sys_intern_init
a281 2
		    my_rmdir
		    my_mkdir
a311 29
elsif ($PLATFORM eq 'MacOS') {
    skip_symbols [qw(
		    Perl_GetVars
		    PL_cryptseen
		    PL_cshlen
		    PL_cshname
		    PL_statusvalue_vms
		    PL_sys_intern
		    PL_opsave
		    PL_timesbuf
		    Perl_dump_fds
		    Perl_my_bcopy
		    Perl_my_bzero
		    Perl_my_chsize
		    Perl_my_htonl
		    Perl_my_memcmp
		    Perl_my_memset
		    Perl_my_ntohl
		    Perl_my_swap
		    Perl_safexcalloc
		    Perl_safexfree
		    Perl_safexmalloc
		    Perl_safexrealloc
		    Perl_unlnk
		    Perl_sys_intern_clear
		    Perl_sys_intern_init
		    )];
}

d315 1
a365 2
		    Perl_strdup
		    Perl_putenv
a403 2
		    PL_fdpid_mutex
		    PL_sv_lock_mutex
a419 1
		    Perl_sv_lock
a442 2
		    Perl_ptr_table_clear
		    Perl_ptr_table_free
d508 1
a508 47
    push @@syms, $perlio_sym;
    if ($define{'USE_SFIO'}) {
	# SFIO defines most of the PerlIO routines as macros
	skip_symbols [qw(
			 PerlIO_canset_cnt
			 PerlIO_clearerr
			 PerlIO_close
			 PerlIO_eof
			 PerlIO_error
			 PerlIO_exportFILE
			 PerlIO_fast_gets
			 PerlIO_fdopen
			 PerlIO_fileno
			 PerlIO_findFILE
			 PerlIO_flush
			 PerlIO_get_base
			 PerlIO_get_bufsiz
			 PerlIO_get_cnt
			 PerlIO_get_ptr
			 PerlIO_getc
			 PerlIO_getname
			 PerlIO_has_base
			 PerlIO_has_cntptr
			 PerlIO_importFILE
			 PerlIO_open
			 PerlIO_printf
			 PerlIO_putc
			 PerlIO_puts
			 PerlIO_read
			 PerlIO_releaseFILE
			 PerlIO_reopen
			 PerlIO_rewind
			 PerlIO_seek
			 PerlIO_set_cnt
			 PerlIO_set_ptrcnt
			 PerlIO_setlinebuf
			 PerlIO_sprintf
			 PerlIO_stderr
			 PerlIO_stdin
			 PerlIO_stdout
			 PerlIO_stdoutf
			 PerlIO_tell
			 PerlIO_ungetc
			 PerlIO_vprintf
			 PerlIO_write
			 )];
    }
a731 9
elsif ($PLATFORM eq 'MacOS') {
    open MACSYMS, 'macperl.sym' or die 'Cannot read macperl.sym';

    while (<MACSYMS>) {
	try_symbol($_);
    }

    close MACSYMS;
}
d778 1
a778 1
    elsif ($PLATFORM eq 'aix' || $PLATFORM eq 'MacOS') {
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d4 2
a5 3
# Needed by WIN32 and OS/2 for creating perl.dll,
# and by AIX for creating libperl.a when -Dusershrplib is in effect,
# and by MacOS Classic.
d13 33
a51 3
    if ($PLATFORM eq 'netware') {
	$FILETYPE = $1 if ($flag =~ /^FILETYPE=(\w+)$/);
    }
d54 1
a54 1
my @@PLATFORM = qw(aix win32 wince os2 MacOS netware);
d59 1
a59 11
exists $PLATFORM{$PLATFORM} || die "PLATFORM must be one of: @@PLATFORM\n";

my %exportperlmalloc =
    (
       Perl_malloc		=>	"malloc",
       Perl_mfree		=>	"free",
       Perl_realloc		=>	"realloc",
       Perl_calloc		=>	"calloc",
    );

my $exportperlmalloc = $PLATFORM eq 'os2';
d71 1
a71 1
if ($PLATFORM eq 'aix') {
d74 1
a74 1
elsif ($PLATFORM =~ /^win(?:32|ce)$/ || $PLATFORM eq 'netware') {
d76 1
a76 2
    foreach ($thrdvar_h, $intrpvar_h, $perlvars_h, $global_sym,
		$pp_sym, $globvar_sym, $perlio_sym) {
d87 1
a87 1
unless ($PLATFORM eq 'win32' || $PLATFORM eq 'wince' || $PLATFORM eq 'MacOS' || $PLATFORM eq 'netware') {
d95 2
a96 3
	    $CONFIG_ARGS = $1 if /^config_args='(.+)'$/;
	    $ARCHNAME =    $1 if /^archname='(.+)'$/;
	    $PATCHLEVEL =  $1 if /^perl_patchlevel='(.+)'$/;
d105 4
d110 2
a111 2
    $define{$1} = 1 if /^\s*#\s*define\s+(PERL_\w+)\b/;
    $define{$1} = 1 if /^\s*#\s*define\s+(USE_\w+)\b/;
a116 4
if ($define{PERL_IMPLICIT_SYS}) {
    $define{PL_OP_SLAB_ALLOC} = 1;
}

d118 1
a118 1
    if (!$define{MULTIPLICITY}) {
d128 10
a137 2
if ($define{USE_ITHREADS} && $PLATFORM ne 'win32' && $^O ne 'darwin') {
    $define{USE_REENTRANT_API} = 1;
d142 1
a142 3
my $sym_ord = 0;

if ($PLATFORM =~ /^win(?:32|ce)$/) {
d144 1
a144 2
    ($dll = ($define{PERL_DLL} || "perl58")) =~ s/\.dll$//i;
    print "LIBRARY $dll\n";
a150 3
    if ($define{USE_ITHREADS} and $define{PERL_IMPLICIT_SYS}) {
	output_symbol("perl_clone_host");
    }
a152 11
    if (open my $fh, '<', 'perl5.def') {
      while (<$fh>) {
	last if /^\s*EXPORTS\b/;
      }
      while (<$fh>) {
	$ordinal{$1} = $2 if /^\s*"(\w+)"\s*(?:=\s*"\w+"\s*)?\@@(\d+)\s*$/;
	# This allows skipping ordinals which were used in older versions
	$sym_ord = $1 if /^\s*;\s*LAST_ORDINAL\s*=\s*(\d+)\s*$/;
      }
      $sym_ord < $_ and $sym_ord = $_ for values %ordinal; # Take the max
    }
d155 8
d164 1
a164 3
    $v .= "\@@$PATCHLEVEL" if $PATCHLEVEL;
    $d = "DESCRIPTION '\@@#perl5-porters\@@perl.org:$v#\@@ Perl interpreter, configured as $CONFIG_ARGS'";
    $d = substr($d, 0, 249) . "...'" if length $d > 253;
d167 1
a167 1
$d
d175 1
a175 21
    $OSVER = `uname -v`;
    chop $OSVER;
    $OSREL = `uname -r`;
    chop $OSREL;
    if ($OSVER > 4 || ($OSVER == 4 && $OSREL >= 3)) {
	print "#! ..\n";
    } else {
	print "#!\n";
    }
}
elsif ($PLATFORM eq 'netware') {
	if ($FILETYPE eq 'def') {
	print "LIBRARY perl58\n";
	print "DESCRIPTION 'Perl interpreter for NetWare'\n";
	print "EXPORTS\n";
	}
	if ($define{PERL_IMPLICIT_SYS}) {
	    output_symbol("perl_get_host_info");
	    output_symbol("perl_alloc_override");
	    output_symbol("perl_clone_host");
	}
d193 1
a193 1
	if ($define{MULTIPLICITY}) {
a226 79
		     Perl_my_bcopy
		     Perl_my_htonl
		     Perl_my_ntohl
		     Perl_my_swap
		     Perl_my_chsize
		     Perl_same_dirent
		     Perl_setenv_getix
		     Perl_unlnk
		     Perl_watch
		     Perl_safexcalloc
		     Perl_safexmalloc
		     Perl_safexfree
		     Perl_safexrealloc
		     Perl_my_memcmp
		     Perl_my_memset
		     PL_cshlen
		     PL_cshname
		     PL_opsave
		     Perl_do_exec
		     Perl_getenv_len
		     Perl_my_pclose
		     Perl_my_popen
		     )];
}
else {
    skip_symbols [qw(
		     Perl_do_spawn
		     Perl_do_spawn_nowait
		     Perl_do_aspawn
		     )];
}
if ($PLATFORM eq 'wince') {
    skip_symbols [qw(
		     PL_statusvalue_vms
		     PL_archpat_auto
		     PL_cryptseen
		     PL_DBcv
		     PL_generation
		     PL_lastgotoprobe
		     PL_linestart
		     PL_modcount
		     PL_pending_ident
		     PL_sortcxix
		     PL_sublex_info
		     PL_timesbuf
		     PL_collation_ix
		     PL_collation_name
		     PL_collation_standard
		     PL_collxfrm_base
		     PL_collxfrm_mult
		     PL_numeric_compat1
		     PL_numeric_local
		     PL_numeric_name
		     PL_numeric_radix_sv
		     PL_numeric_standard
		     PL_vtbl_collxfrm
		     Perl_sv_collxfrm
		     setgid
		     setuid
		     win32_async_check
		     win32_free_childdir
		     win32_free_childenv
		     win32_get_childdir
		     win32_get_childenv
		     win32_spawnvp
		     main
		     Perl_ErrorNo
		     Perl_GetVars
		     Perl_do_exec3
		     Perl_do_ipcctl
		     Perl_do_ipcget
		     Perl_do_msgrcv
		     Perl_do_msgsnd
		     Perl_do_semop
		     Perl_do_shmio
		     Perl_dump_fds
		     Perl_init_thread_intern
		     Perl_my_bzero
		     Perl_my_bcopy
a282 2
		    Perl_OS2_init3
		    Perl_OS2_term
a292 8
		    my_getpwuid
		    my_getpwnam
		    my_getpwent
		    my_setpwent
		    my_endpwent
		    setgrent
		    endgrent
		    getgrent
a320 5
		    loadByOrdinal
		    pExtFCN
		    os2error
		    ResetWinError
		    CroakWinError
d351 1
a351 77
elsif ($PLATFORM eq 'netware') {
	skip_symbols [qw(
			PL_statusvalue_vms
			PL_archpat_auto
			PL_cryptseen
			PL_DBcv
			PL_generation
			PL_lastgotoprobe
			PL_linestart
			PL_modcount
			PL_pending_ident
			PL_sortcxix
			PL_sublex_info
			PL_timesbuf
			main
			Perl_ErrorNo
			Perl_GetVars
			Perl_do_exec3
			Perl_do_ipcctl
			Perl_do_ipcget
			Perl_do_msgrcv
			Perl_do_msgsnd
			Perl_do_semop
			Perl_do_shmio
			Perl_dump_fds
			Perl_init_thread_intern
			Perl_my_bzero
			Perl_my_htonl
			Perl_my_ntohl
			Perl_my_swap
			Perl_my_chsize
			Perl_same_dirent
			Perl_setenv_getix
			Perl_unlnk
			Perl_watch
			Perl_safexcalloc
			Perl_safexmalloc
			Perl_safexfree
			Perl_safexrealloc
			Perl_my_memcmp
			Perl_my_memset
			PL_cshlen
			PL_cshname
			PL_opsave
			Perl_do_exec
			Perl_getenv_len
			Perl_my_pclose
			Perl_my_popen
			Perl_sys_intern_init
			Perl_sys_intern_dup
			Perl_sys_intern_clear
			Perl_my_bcopy
			Perl_PerlIO_write
			Perl_PerlIO_unread
			Perl_PerlIO_tell
			Perl_PerlIO_stdout
			Perl_PerlIO_stdin
			Perl_PerlIO_stderr
			Perl_PerlIO_setlinebuf
			Perl_PerlIO_set_ptrcnt
			Perl_PerlIO_set_cnt
			Perl_PerlIO_seek
			Perl_PerlIO_read
			Perl_PerlIO_get_ptr
			Perl_PerlIO_get_cnt
			Perl_PerlIO_get_bufsiz
			Perl_PerlIO_get_base
			Perl_PerlIO_flush
			Perl_PerlIO_fill
			Perl_PerlIO_fileno
			Perl_PerlIO_error
			Perl_PerlIO_eof
			Perl_PerlIO_close
			Perl_PerlIO_clearerr
			PerlIO_perlio
			)];
}
d360 1
a396 6
unless ($define{'USE_REENTRANT_API'}) {
    skip_symbols [qw(
		    PL_reentrant_buffer
		    )];
}

d401 4
d424 4
a470 4
		    PL_regex_pad
		    PL_regex_padav
		    PL_sharedsv_space
		    PL_sharedsv_space_mutex
a482 1
		    Perl_ptr_table_clear
a483 1
		    Perl_ptr_table_free
d485 2
a488 2
		    Perl_ptr_table_split
		    Perl_ptr_table_store
a490 7
		    Perl_sharedsv_find
		    Perl_sharedsv_init
		    Perl_sharedsv_lock
		    Perl_sharedsv_new
		    Perl_sharedsv_thrcnt_dec
		    Perl_sharedsv_thrcnt_inc
		    Perl_sharedsv_unlock
a522 8
unless ($define{'PL_OP_SLAB_ALLOC'}) {
    skip_symbols [qw(
                     PL_OpPtr
                     PL_OpSlab
                     PL_OpSpace
                    )];
}

d532 2
a533 2
    }
    close(VARS);
a552 76
# Symbols that are the public face of the PerlIO layers implementation
# These are in _addition to_ the public face of the abstraction
# and need to be exported to allow XS modules to implement layers
my @@layer_syms = qw(
			 PerlIOBase_clearerr
			 PerlIOBase_close
			 PerlIOBase_dup
			 PerlIOBase_eof
			 PerlIOBase_error
			 PerlIOBase_fileno
			 PerlIOBase_pushed
			 PerlIOBase_binmode
			 PerlIOBase_popped
			 PerlIOBase_read
			 PerlIOBase_setlinebuf
			 PerlIOBase_unread
			 PerlIOBuf_bufsiz
			 PerlIOBuf_fill
			 PerlIOBuf_flush
			 PerlIOBuf_get_base
			 PerlIOBuf_get_cnt
			 PerlIOBuf_get_ptr
			 PerlIOBuf_open
			 PerlIOBuf_pushed
			 PerlIOBuf_popped
			 PerlIOBuf_read
			 PerlIOBuf_seek
			 PerlIOBuf_set_ptrcnt
			 PerlIOBuf_tell
			 PerlIOBuf_unread
			 PerlIOBuf_write
			 PerlIO_debug
			 PerlIO_allocate
			 PerlIO_apply_layera
			 PerlIO_apply_layers
			 PerlIO_arg_fetch
			 PerlIO_define_layer
			 PerlIO_modestr
			 PerlIO_parse_layers
			 PerlIO_layer_fetch
			 PerlIO_list_free
			 PerlIO_apply_layera
			 PerlIO_pending
			 PerlIO_push
			 PerlIO_pop
			 PerlIO_sv_dup
			 PerlIO_perlio

Perl_PerlIO_clearerr
Perl_PerlIO_close
Perl_PerlIO_eof
Perl_PerlIO_error
Perl_PerlIO_fileno
Perl_PerlIO_fill
Perl_PerlIO_flush
Perl_PerlIO_get_base
Perl_PerlIO_get_bufsiz
Perl_PerlIO_get_cnt
Perl_PerlIO_get_ptr
Perl_PerlIO_read
Perl_PerlIO_seek
Perl_PerlIO_set_cnt
Perl_PerlIO_set_ptrcnt
Perl_PerlIO_setlinebuf
Perl_PerlIO_stderr
Perl_PerlIO_stdin
Perl_PerlIO_stdout
Perl_PerlIO_tell
Perl_PerlIO_unread
Perl_PerlIO_write

);
if ($PLATFORM eq 'netware') {
    push(@@layer_syms,'PL_def_layerlist','PL_known_layers','PL_perlio');
}

a553 2
    # Export the symols that make up the PerlIO abstraction, regardless
    # of its implementation - read from a file
a554 2

    # This part is then dependent on how the abstraction is implemented
a555 2
	# Old legacy non-stdio "PerlIO"
	skip_symbols \@@layer_syms;
a556 3
	# So undo most of what $perlio_sym has just done - d'oh !
	# Perhaps it would be better to list the ones which do exist
	# And emit them
a598 26
			 PerlIO_perlio
			 Perl_PerlIO_clearerr
			 Perl_PerlIO_close
			 Perl_PerlIO_eof
			 Perl_PerlIO_error
			 Perl_PerlIO_fileno
			 Perl_PerlIO_fill
			 Perl_PerlIO_flush
			 Perl_PerlIO_get_base
			 Perl_PerlIO_get_bufsiz
			 Perl_PerlIO_get_cnt
			 Perl_PerlIO_get_ptr
			 Perl_PerlIO_read
			 Perl_PerlIO_seek
			 Perl_PerlIO_set_cnt
			 Perl_PerlIO_set_ptrcnt
			 Perl_PerlIO_setlinebuf
			 Perl_PerlIO_stderr
			 Perl_PerlIO_stdin
			 Perl_PerlIO_stdout
			 Perl_PerlIO_tell
			 Perl_PerlIO_unread
			 Perl_PerlIO_write
                         PL_def_layerlist
                         PL_known_layers
                         PL_perlio
a600 15
    else {
	# PerlIO with layers - export implementation
	emit_symbols \@@layer_syms;
    }
} else {
	# -Uuseperlio
	# Skip the PerlIO layer symbols - although
	# nothing should have exported them any way
	skip_symbols \@@layer_syms;
        skip_symbols [qw(PL_def_layerlist PL_known_layers PL_perlio)];

	# Also do NOT add abstraction symbols from $perlio_sym
	# abstraction is done as #define to stdio
	# Remaining remnants that _may_ be functions
	# are handled in <DATA>
d619 1
a619 1
if ($define{'MULTIPLICITY'}) {
d634 1
a634 1
    }
d638 1
a638 1
    }
d642 1
a642 1
    }
d648 1
a648 1
    return if $symbol !~ /^[A-Za-z_]/;
d660 1
a660 1
if ($PLATFORM =~ /^win(?:32|ce)$/) {
a661 2
			    setuid
			    setgid
a666 1
			    win32_async_check
d669 29
d768 11
a793 1
			    win32_gettimeofday
a809 45
			    win32_get_childenv
			    win32_free_childenv
			    win32_clearenv
			    win32_get_childdir
			    win32_free_childdir
			    win32_stdin
			    win32_stdout
			    win32_stderr
			    win32_ferror
			    win32_feof
			    win32_strerror
			    win32_fprintf
			    win32_printf
			    win32_vfprintf
			    win32_vprintf
			    win32_fread
			    win32_fwrite
			    win32_fopen
			    win32_fdopen
			    win32_freopen
			    win32_fclose
			    win32_fputs
			    win32_fputc
			    win32_ungetc
			    win32_getc
			    win32_fileno
			    win32_clearerr
			    win32_fflush
			    win32_ftell
			    win32_fseek
			    win32_fgetpos
			    win32_fsetpos
			    win32_rewind
			    win32_tmpfile
			    win32_setbuf
			    win32_setvbuf
			    win32_flushall
			    win32_fcloseall
			    win32_fgets
			    win32_gets
			    win32_fgetc
			    win32_putc
			    win32_puts
			    win32_getchar
			    win32_putchar
d820 1
a820 1
    @@missing = grep { !exists $mapped{$_} }
a821 1
    @@missing = grep { !exists $exportperlmalloc{$_} } @@missing;
a832 142
elsif ($PLATFORM eq 'netware') {
foreach my $symbol (qw(
			boot_DynaLoader
			Perl_init_os_extras
			Perl_thread_create
			Perl_nw5_init
			RunPerl
			AllocStdPerl
			FreeStdPerl
			do_spawn2
			do_aspawn
			nw_uname
			nw_stdin
			nw_stdout
			nw_stderr
			nw_feof
			nw_ferror
			nw_fopen
			nw_fclose
			nw_clearerr
			nw_getc
			nw_fgets
			nw_fputc
			nw_fputs
			nw_fflush
			nw_ungetc
			nw_fileno
			nw_fdopen
			nw_freopen
			nw_fread
			nw_fwrite
			nw_setbuf
			nw_setvbuf
			nw_vfprintf
			nw_ftell
			nw_fseek
			nw_rewind
			nw_tmpfile
			nw_fgetpos
			nw_fsetpos
			nw_dup
			nw_access
			nw_chmod
			nw_chsize
			nw_close
			nw_dup2
			nw_flock
			nw_isatty
			nw_link
			nw_lseek
			nw_stat
			nw_mktemp
			nw_open
			nw_read
			nw_rename
			nw_setmode
			nw_unlink
			nw_utime
			nw_write
			nw_chdir
			nw_rmdir
			nw_closedir
			nw_opendir
			nw_readdir
			nw_rewinddir
			nw_seekdir
			nw_telldir
			nw_htonl
			nw_htons
			nw_ntohl
			nw_ntohs
			nw_accept
			nw_bind
			nw_connect
			nw_endhostent
			nw_endnetent
			nw_endprotoent
			nw_endservent
			nw_gethostbyaddr
			nw_gethostbyname
			nw_gethostent
			nw_gethostname
			nw_getnetbyaddr
			nw_getnetbyname
			nw_getnetent
			nw_getpeername
			nw_getprotobyname
			nw_getprotobynumber
			nw_getprotoent
			nw_getservbyname
			nw_getservbyport
			nw_getservent
			nw_getsockname
			nw_getsockopt
			nw_inet_addr
			nw_listen
			nw_socket
			nw_recv
			nw_recvfrom
			nw_select
			nw_send
			nw_sendto
			nw_sethostent
			nw_setnetent
			nw_setprotoent
			nw_setservent
			nw_setsockopt
			nw_inet_ntoa
			nw_shutdown
			nw_crypt
			nw_execvp
			nw_kill
			nw_Popen
			nw_Pclose
			nw_Pipe
			nw_times
			nw_waitpid
			nw_getpid
			nw_spawnvp
			nw_os_id
			nw_open_osfhandle
			nw_get_osfhandle
			nw_abort
			nw_sleep
			nw_wait
			nw_dynaload
			nw_strerror
			fnFpSetMode
			fnInsertHashListAddrs
			fnGetHashListAddrs
			Perl_deb
			Perl_sv_setsv
			Perl_sv_catsv
			Perl_sv_catpvn
			Perl_sv_2pv
			nw_freeenviron
			Remove_Thread_Ctx
			   ))
    {
	try_symbol($symbol);
    }
}
a840 4
if ($PLATFORM eq 'os2') {
	print "; LAST_ORDINAL=$sym_ord\n";
}

d843 1
a843 1
    chomp($symbol);
d849 3
a851 1
    if ($PLATFORM =~ /^win(?:32|ce)$/) {
d877 1
a877 6
	printf qq(    %-31s \@@%s\n),
	  qq("$symbol"), $ordinal{$symbol} || ++$sym_ord;
	printf qq(    %-31s \@@%s\n),
	  qq("$exportperlmalloc{$symbol}" = "$symbol"),
	  $ordinal{$exportperlmalloc{$symbol}} || ++$sym_ord
	  if $exportperlmalloc and exists $exportperlmalloc{$symbol};
a881 3
	elsif ($PLATFORM eq 'netware') {
	print "\t$symbol,\n";
	}
a886 1
Perl_cxinc
a895 10
# Oddities from PerlIO
PerlIO_binmode
PerlIO_getpos
PerlIO_init
PerlIO_setpos
PerlIO_sprintf
PerlIO_sv_dup
PerlIO_tmpfile
PerlIO_vsprintf
perlsio_binmode
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d9 1
a9 1
# On OS/2 reads miniperl.map and the previous version of perl5.def as well
a15 7
    if ($flag =~ s/^CC_FLAGS=/ /) {
	for my $fflag ($flag =~ /(?:^|\s)-D(\S+)/g) {
	    $fflag     .= '=1' unless $fflag =~ /^(\w+)=/;
	    $define{$1} = $2   if $fflag =~ /^(\w+)=(.+)$/;
	}
	next;
    }
d292 1
a374 2
		    dup2
		    dup
a384 2
		    fork_with_resources
		    croak_with_os2error
a420 1
		    PL_do_undump
a421 6
    emit_symbols([qw(os2_cond_wait
		     pthread_join
		     pthread_create
		     pthread_detach
		    )])
      if $define{'USE_5005THREADS'} or $define{'USE_ITHREADS'};
a583 2
		    MallocCfg_ptr
		    MallocCfgP_ptr
a601 2
		    MallocCfg_ptr
		    MallocCfgP_ptr
a647 1
		    PL_dollarzero_mutex
a713 2
		     Perl_Slab_Alloc
		     Perl_Slab_Free
a716 4
unless ($define{'THREADS_HAVE_PIDS'}) {
    skip_symbols [qw(PL_ppid)];
}

d751 67
a817 69
		    PerlIOBase_binmode
		    PerlIOBase_clearerr
		    PerlIOBase_close
		    PerlIOBase_dup
		    PerlIOBase_eof
		    PerlIOBase_error
		    PerlIOBase_fileno
		    PerlIOBase_noop_fail
		    PerlIOBase_noop_ok
		    PerlIOBase_popped
		    PerlIOBase_pushed
		    PerlIOBase_read
		    PerlIOBase_setlinebuf
		    PerlIOBase_unread
		    PerlIOBuf_bufsiz
		    PerlIOBuf_close
		    PerlIOBuf_dup
		    PerlIOBuf_fill
		    PerlIOBuf_flush
		    PerlIOBuf_get_base
		    PerlIOBuf_get_cnt
		    PerlIOBuf_get_ptr
		    PerlIOBuf_open
		    PerlIOBuf_popped
		    PerlIOBuf_pushed
		    PerlIOBuf_read
		    PerlIOBuf_seek
		    PerlIOBuf_set_ptrcnt
		    PerlIOBuf_tell
		    PerlIOBuf_unread
		    PerlIOBuf_write
		    PerlIO_allocate
		    PerlIO_apply_layera
		    PerlIO_apply_layers
		    PerlIO_arg_fetch
		    PerlIO_debug
		    PerlIO_define_layer
		    PerlIO_isutf8
		    PerlIO_layer_fetch
		    PerlIO_list_free
		    PerlIO_modestr
		    PerlIO_parse_layers
		    PerlIO_pending
		    PerlIO_perlio
		    PerlIO_pop
		    PerlIO_push
		    PerlIO_sv_dup
		    Perl_PerlIO_clearerr
		    Perl_PerlIO_close
		    Perl_PerlIO_eof
		    Perl_PerlIO_error
		    Perl_PerlIO_fileno
		    Perl_PerlIO_fill
		    Perl_PerlIO_flush
		    Perl_PerlIO_get_base
		    Perl_PerlIO_get_bufsiz
		    Perl_PerlIO_get_cnt
		    Perl_PerlIO_get_ptr
		    Perl_PerlIO_read
		    Perl_PerlIO_seek
		    Perl_PerlIO_set_cnt
		    Perl_PerlIO_set_ptrcnt
		    Perl_PerlIO_setlinebuf
		    Perl_PerlIO_stderr
		    Perl_PerlIO_stdin
		    Perl_PerlIO_stdout
		    Perl_PerlIO_tell
		    Perl_PerlIO_unread
		    Perl_PerlIO_write
d945 1
a945 1
    if ($PLATFORM eq 'aix' or $PLATFORM eq 'os2') {	# OS/2 needs PL_thr_key
a987 1
			    Perl_win32_term
d1314 1
a1314 4
	print <<EOP;
    dll_perlmain=main
; LAST_ORDINAL=$sym_ord
EOP
@


1.1.1.5
log
@perl 5.8.3 from CPAN
@
text
@a403 4
		    os2_execname
		    async_mssleep
		    msCounter
		    InfoTable
a1346 4
    fill_extLibpath
    dir_subst
    Perl_OS2_handler_install

@


1.1.1.6
log
@Import of stock perl 5.8.5
@
text
@a629 6
if ($define{'PERL_MALLOC_WRAP'}) {
    emit_symbols [qw(
		    PL_memory_wrap
		    )];
}

a1034 1
			    win32_chsize
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@a57 1
my $static_ext = "";
a90 7
if ($PLATFORM eq 'win32' || $PLATFORM eq 'wince') {
    open(CFG,"<..\\$config_sh") || die "Cannot open ..\\$config_sh: $!\n";
    if ((join '', <CFG>) =~ /^static_ext='(.*)'$/m) {
        $static_ext = $1;
    }
    close(CFG);
}
a1346 9

# records of type boot_module for statically linked modules (except Dynaloader)
$static_ext =~ s/\//__/g;
$static_ext =~ s/\bDynaLoader\b//;
my @@stat_mods = map {"boot_$_"} grep {/\S/} split /\s+/, $static_ext;
foreach my $symbol (@@stat_mods)
    {
	try_symbol($symbol);
    }
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@a38 18
if ($PLATFORM eq 'win32' or $PLATFORM eq "aix") {
	# Add the compile-time options that miniperl was built with to %define.
	# On Win32 these are not the same options as perl itself will be built
	# with since miniperl is built with a canned config (one of the win32/
	# config_H.*) and none of the BUILDOPT's that are set in the makefiles,
	# but they do include some #define's that are hard-coded in various
	# source files and header files and don't include any BUILDOPT's that
	# the user might have chosen to disable because the canned configs are
	# minimal configs that don't include any of those options.
	my $config = `$^X -Ilib -V`;
	my($options) = $config =~ /^  Compile-time options: (.*?)\n^  \S/ms;
	$options =~ s/\s+/ /g;
	print STDERR "Options: ($options)\n";
	foreach (split /\s+/, $options) {
		$define{$_} = 1;
	}
}

a133 2
print STDERR "Defines: (" . join(' ', sort keys %define) . ")\n";

d135 1
a269 1
		     Perl_my_sprintf
a346 1
		     Perl_my_sprintf
d638 4
a641 4
if ($define{'PERL_USE_SAFE_PUTENV'}) {
    skip_symbols [qw(
                   PL_use_safe_putenv
                  )];
a681 2
		    PL_pte_root
		    PL_pte_arenaroot
a698 1
		    Perl_rvpv_dup
a716 1
		    Perl_stashpv_hvname_match
a762 11
unless ($define{'DEBUG_LEAKING_SCALARS_FORK_DUMP'}) {
    skip_symbols [qw(
		    PL_dumper_fd
		    )];
}
unless ($define{'PERL_DONT_CREATE_GVSV'}) {
    skip_symbols [qw(
		     Perl_gv_SVadd
		    )];
}

a879 1
	skip_symbols [qw(perlsio_binmode)];
a956 1
	emit_symbols [qw(perlsio_binmode)];
a962 1
	skip_symbols [qw(perlsio_binmode)];
a1192 3
    if ($CCTYPE eq "BORLAND") {
	try_symbol('_matherr');
    }
d1454 1
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@a0 1
#./perl -w
d8 1
a8 1
# reads global.sym, pp.sym, perlvars.h, intrpvar.h, config.h
d11 2
a12 6
BEGIN { unshift @@INC, "lib" }
use strict;

use vars qw($PLATFORM $CCTYPE $FILETYPE $CONFIG_ARGS $ARCHNAME $PATCHLEVEL);

my (%define, %ordinal);
d39 1
a39 1
if ($PLATFORM eq 'win32' or $PLATFORM eq 'wince' or $PLATFORM eq "aix") {
d48 1
a48 2
	my $opts = ($PLATFORM eq 'wince' ? '-MCross' : ''); # for wince need Cross.pm to get Config.pm
	my $config = `$^X $opts -Ilib -V`;
d69 1
d83 2
a84 2
    foreach ($intrpvar_h, $perlvars_h, $global_sym,
	     $pp_sym, $globvar_sym, $perlio_sym) {
d89 2
a90 2
    foreach ($intrpvar_h, $perlvars_h, $global_sym,
	     $pp_sym, $globvar_sym, $perlio_sym) {
a101 3
        if (/^(d_(?:mmap|sigaction))='(.+)'$/) {
            $define{$1} = $2;
        }
d141 1
d155 1
a155 1
    (my $dll = ($define{PERL_DLL} || "perl510")) =~ s/\.dll$//i;
d157 1
a157 5
    # The DESCRIPTION module definition file statement is not supported
    # by VC7 onwards.
    if ($CCTYPE !~ /^MSVC7/ && $CCTYPE !~ /^MSVC8/ && $CCTYPE !~ /^MSVC9/) {
	print "DESCRIPTION 'Perl interpreter'\n";
    }
d179 1
a179 1
    (my $v = $]) =~ s/(\d\.\d\d\d)(\d\d)$/$1_$2/;
d181 1
a181 1
    (my $dll = $define{PERL_DLL}) =~ s/\.dll$//i;
d183 1
a183 1
    my $d = "DESCRIPTION '\@@#perl5-porters\@@perl.org:$v#\@@ Perl interpreter, configured as $CONFIG_ARGS'";
d195 1
a195 1
    my $OSVER = `uname -v`;
d197 1
a197 1
    my $OSREL = `uname -r`;
d207 1
a207 1
	print "LIBRARY perl510\n";
d251 1
d310 1
a391 1
		     Perl_my_sprintf
d512 1
a585 1
		    Perl_pad_sv
a586 1
		    Perl_hv_assert
a589 7
		    PL_watch_pvx
		    )];
}

if ($define{'PERL_IMPLICIT_CONTEXT'}) {
    skip_symbols [qw(
		    PL_sig_sv
d614 1
a614 1
unless ($define{'PERL_OLD_COPY_ON_WRITE'}) {
d616 4
a619 2
		    Perl_sv_setsv_cow
		  )];
d637 1
a637 1
    if ($define{'USE_ITHREADS'}) {
d665 1
a665 1
unless ($define{'USE_ITHREADS'}) {
d671 1
a671 1
# USE_5005THREADS symbols. Kept as reference for easier removal
d698 1
d702 3
a710 4
		    PL_hints_mutex
		    PL_perlio_mutex
		    PL_regdupe
		    Perl_parser_dup
a719 1
		    Perl_mro_meta_dup
a722 1
		    Perl_hek_dup
d724 8
a741 2
		    Perl_regdupe_internal
		    Perl_newPADOP
a746 5
		    PL_my_ctx_mutex
		    PL_my_cxt_index
		    PL_my_cxt_list
		    PL_my_cxt_size
		    PL_my_cxt_keys
a759 2
		    Perl_my_cxt_init
		    Perl_my_cxt_index
a783 7
unless ($define{'PERL_DEBUG_READONLY_OPS'}) {
    skip_symbols [qw(
		    PL_slab_count
		    PL_slabs
                  )];
}

a787 12
unless ($define{'PERL_NEED_APPCTX'}) {
    skip_symbols [qw(
		    PL_appctx
		    )];
}

unless ($define{'PERL_NEED_TIMESBASE'}) {
    skip_symbols [qw(
		    PL_timesbase
		    )];
}

a797 96
if ($define{'SPRINTF_RETURNS_STRLEN'}) {
    skip_symbols [qw(
		     Perl_my_sprintf
		    )];
}
unless ($define{'PERL_USES_PL_PIDSTATUS'}) {
    skip_symbols [qw(
		     Perl_pidgone
		     PL_pidstatus
		    )];
}

unless ($define{'PERL_TRACK_MEMPOOL'}) {
    skip_symbols [qw(
                     PL_memory_debug_header
                    )];
}

if ($define{'PERL_MAD'}) {
    skip_symbols [qw(
		     PL_nextval
		     PL_nexttype
		     )];
} else {
    skip_symbols [qw(
		    PL_madskills
		    PL_xmlfp
		    PL_lasttoke
		    PL_realtokenstart
		    PL_faketokens
		    PL_thismad
		    PL_thistoken
		    PL_thisopen
		    PL_thisstuff
		    PL_thisclose
		    PL_thiswhite
		    PL_nextwhite
		    PL_skipwhite
		    PL_endwhite
		    PL_curforce
		    Perl_pad_peg
		    Perl_xmldump_indent
		    Perl_xmldump_vindent
		    Perl_xmldump_all
		    Perl_xmldump_packsubs
		    Perl_xmldump_sub
		    Perl_xmldump_form
		    Perl_xmldump_eval
		    Perl_sv_catxmlsv
		    Perl_sv_catxmlpvn
		    Perl_sv_xmlpeek
		    Perl_do_pmop_xmldump
		    Perl_pmop_xmldump
		    Perl_do_op_xmldump
		    Perl_op_xmldump
		    )];
}

unless ($define{'MULTIPLICITY'}) {
    skip_symbols [qw(
		    PL_interp_size
		    PL_interp_size_5_10_0
		    )];
}

unless ($define{'PERL_GLOBAL_STRUCT'}) {
    skip_symbols [qw(
		    PL_global_struct_size
		    )];
}

unless ($define{'PERL_GLOBAL_STRUCT_PRIVATE'}) {
    skip_symbols [qw(
		    PL_my_cxt_keys
		    Perl_my_cxt_index
		    )];
}

unless ($define{'d_mmap'}) {
    skip_symbols [qw(
		    PL_mmap_page_size
		    )];
}

if ($define{'d_sigaction'}) {
    skip_symbols [qw(
		    PL_sig_trapped
		    )];
}

if ($^O ne 'vms') {
    # VMS does its own thing for these symbols.
    skip_symbols [qw(PL_sig_handlers_initted
                     PL_sig_ignoring
                     PL_sig_defaulting)];
}  
d806 2
a807 3
	# sticks in front of them.  The A?I?S?C? is strictly speaking
	# wrong.
	push(@@syms, &$proc($1,$2,$3)) if (/\bPERLVAR(A?I?S?C?)\(([IGT])(\w+)/);
d813 5
a822 2
} else {
    skip_symbols [qw(Perl_init_global_struct Perl_free_global_struct)];
a881 1
		    Perl_PerlIO_context_layers
a995 10
    if ($define{'USE_ITHREADS'}) {
	emit_symbols [qw(
			PL_perlio_mutex
			)];
    }
    else {
	skip_symbols [qw(
			PL_perlio_mutex
			)];
    }
d999 1
a999 1
	# nothing should have exported them anyway.
d1001 2
a1002 9
	skip_symbols [qw(
			perlsio_binmode
			PL_def_layerlist
			PL_known_layers
			PL_perlio
			PL_perlio_debug_fd
			PL_perlio_fd_refcnt
			PL_perlio_fd_refcnt_size
			)];
d1027 1
a1027 1
    for my $f ($perlvars_h, $intrpvar_h) {
d1046 4
a1178 1
			    win32_ansipath
a1236 1
    my (%mapped, @@missing);
a1406 2
try_symbol("init_Win32CORE") if $static_ext =~ /\bWin32CORE\b/;

d1476 11
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d9 2
a10 26
# Reads from information stored in
#
#    config.h
#    config.sh
#    global.sym
#    globvar.sym
#    intrpvar.h
#    macperl.sym  (on MacOS)
#    miniperl.map (on OS/2)
#    perl5.def    (on OS/2; this is the old version of the file being made)
#    perlio.sym
#    perlvars.h
#
# plus long lists of function names hard-coded directly in this script and
# in the DATA section.
#
# Writes the result to STDOUT.
#
# Normally this script is invoked from a makefile (e.g. win32/Makefile),
# which redirects STDOUT to a suitable file, such as:
#
#    perl5.def   OS/2
#    perldll.def Windows
#    perl.exp    AIX
#    perl.imp    NetWare

a131 1
    $define{$1} = 1 if /^\s*#\s*define\s+(HAS_\w+)\b/;
a406 7
    skip_symbols([qw(
		     Perl_signbit
		     )])
	if $define{'HAS_SIGNBIT'};
    emit_symbols([qw(
		     boot_DynaLoader
		     )]);
d596 1
a669 1
		    Perl_malloc_good_size
a825 6
unless ($define{'DEBUG_LEAKING_SCALARS'}) {
    skip_symbols [qw(
		    PL_sv_serial
		    )];
}

a1001 1
		    PerlIO_find_layer
a1003 1
		    PerlIO_list_alloc
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@a36 1
use Config;
d78 1
a78 5

	$ENV{PERL5LIB} = join $Config{path_sep}, @@INC;
	my $cmd = "$^X $opts -V";
	my $config = `$cmd`
	    or die "Couldn't run [$cmd]: $!";
d187 1
a187 1
    (my $dll = ($define{PERL_DLL} || "perl512")) =~ s/\.dll$//i;
d243 1
a243 1
	print "LIBRARY perl512\n";
a755 1
		    PL_my_ctx_mutex
d769 1
a769 1
		    Perl_re_dup_guts
d791 1
a1220 4
    unless ($define{'USE_ITHREADS'}) {
	# XXX needed for XS extensions that define PERL_CORE
	emit_symbol("PL_curinterp");
    }
a1281 1
			    win32_isatty
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d6 2
a7 2
# and by AIX for creating libperl.a when -Duseshrplib is in effect,
# and by VMS for creating perlshr.exe.
a10 1
#    %Config::Config (ie config.sh)
d12 2
a13 1
#    embed.fnc
d16 1
a20 1
#    regen/opcodes
d22 2
a23 1
# plus long lists of function names hard-coded directly in this script.
d34 1
a34 1
#    makedef.lis VMS
d40 1
a40 3
my %ARGS = (CCTYPE => 'MSVC', TARG_DIR => '');

my %define;
d42 1
a42 7
my $fold;

sub process_cc_flags {
    foreach (map {split /\s+/, $_} @@_) {
	$define{$1} = $2 // 1 if /^-D(\w+)(?:=(.+))?/;
    }
}
d46 13
a58 6
    if ($flag =~ /^(?:CC_FLAGS=)?(-D\w.*)/) {
	process_cc_flags($1);
    } elsif ($flag =~ /^(CCTYPE|FILETYPE|PLATFORM|TARG_DIR)=(.+)$/) {
	$ARGS{$1} = $2;
    } elsif ($flag eq '--sort-fold') {
	++$fold;
d62 29
a90 31
require "$ARGS{TARG_DIR}regen/embed_lib.pl";

{
    my @@PLATFORM = qw(aix win32 wince os2 netware vms test);
    my %PLATFORM;
    @@PLATFORM{@@PLATFORM} = ();

    die "PLATFORM undefined, must be one of: @@PLATFORM\n"
	unless defined $ARGS{PLATFORM};
    die "PLATFORM must be one of: @@PLATFORM\n"
	unless exists $PLATFORM{$ARGS{PLATFORM}};
}

# Is the following guard strictly necessary? Added during refactoring
# to keep the same behaviour when merging other code into here.
process_cc_flags(@@Config{qw(ccflags optimize)})
    if $ARGS{PLATFORM} ne 'win32' && $ARGS{PLATFORM} ne 'wince'
    && $ARGS{PLATFORM} ne 'netware';

# Add the compile-time options that miniperl was built with to %define.
# On Win32 these are not the same options as perl itself will be built
# with since miniperl is built with a canned config (one of the win32/
# config_H.*) and none of the BUILDOPT's that are set in the makefiles,
# but they do include some #define's that are hard-coded in various
# source files and header files and don't include any BUILDOPT's that
# the user might have chosen to disable because the canned configs are
# minimal configs that don't include any of those options.

my @@options = sort(Config::bincompat_options(), Config::non_bincompat_options());
print STDERR "Options: (@@options)\n" unless $ARGS{PLATFORM} eq 'test';
$define{$_} = 1 foreach @@options;
d100 28
a127 1
my $exportperlmalloc = $ARGS{PLATFORM} eq 'os2';
d129 27
a155 1
open(CFG, '<', 'config.h') || die "Cannot open config.h: $!\n";
d157 5
a161 3
    $define{$1} = 1 if /^\s*\#\s*define\s+(MYMALLOC|MULTIPLICITY
                                           |SPRINTF_RETURNS_STRLEN
                                           |(?:PERL|USE|HAS)_\w+)\b/x;
d181 1
a181 1
if ($define{USE_ITHREADS} && $ARGS{PLATFORM} ne 'win32' && $^O ne 'darwin') {
d187 1
a187 2
print STDERR "Defines: (" . join(' ', sort keys %define) . ")\n"
     unless $ARGS{PLATFORM} eq 'test';
d189 1
a189 2
my $sym_ord = 0;
my %ordinal;
d191 18
a208 1
if ($ARGS{PLATFORM} eq 'os2') {
d220 37
d260 1
a260 2
# All platforms export boot_DynaLoader unconditionally.
my %export = ( boot_DynaLoader => 1 );
d262 4
a265 3
sub try_symbols {
    foreach my $symbol (@@_) {
	++$export{$symbol} unless exists $skip{$symbol};
d269 9
a277 19
sub readvar {
    # $hash is the hash that we're adding to. For one of our callers, it will
    # actually be the skip hash but that doesn't affect the intent of what
    # we're doing, as in that case we skip adding something to the skip hash
    # for the second time.

    my $file = $ARGS{TARG_DIR} . shift;
    my $hash = shift;
    my $proc = shift;
    open my $vars, '<', $file or die die "Cannot open $file: $!\n";

    while (<$vars>) {
	# All symbols have a Perl_ prefix because that's what embed.h sticks
	# in front of them.  The A?I?S?C? is strictly speaking wrong.
	next unless /\bPERLVAR(A?I?S?C?)\(([IGT]),\s*(\w+)/;

	my $var = "PL_$3";
	my $symbol = $proc ? &$proc($1,$2,$3) : $var;
	++$hash->{$symbol} unless exists $skip{$var};
d281 4
a284 2
if ($ARGS{PLATFORM} ne 'os2') {
    ++$skip{$_} foreach qw(
d286 38
d325 48
d374 37
d412 2
d422 125
a546 19
			 );
    if ($ARGS{PLATFORM} eq 'vms') {
	++$skip{PL_statusvalue_posix};
        # This is a wrapper if we have symlink, not a replacement
        # if we don't.
        ++$skip{Perl_my_symlink} unless $Config{d_symlink};
    } else {
	++$skip{PL_statusvalue_vms};
	if ($ARGS{PLATFORM} ne 'aix') {
	    ++$skip{$_} foreach qw(
				PL_DBcv
				PL_generation
				PL_lastgotoprobe
				PL_modcount
				PL_timesbuf
				main
				 );
	}
    }
d548 75
a622 19

if ($ARGS{PLATFORM} ne 'vms') {
    # VMS does its own thing for these symbols.
    ++$skip{$_} foreach qw(
			PL_sig_handlers_initted
			PL_sig_ignoring
			PL_sig_defaulting
			 );
    if ($ARGS{PLATFORM} ne 'win32') {
	++$skip{$_} foreach qw(
			    Perl_do_spawn
			    Perl_do_spawn_nowait
			    Perl_do_aspawn
			     );
    }
}

unless ($define{UNLINK_ALL_VERSIONS}) {
    ++$skip{Perl_unlnk};
d626 2
a627 1
    ++$skip{$_} foreach qw(
a632 1
		    Perl_pad_setsv
d638 7
a644 1
			 );
d648 2
a649 1
    ++$skip{$_} foreach qw(
d652 1
a652 3
			 );
    ++$export{$_} foreach qw(perl_get_host_info perl_alloc_override);
    ++$export{perl_clone_host} if $define{USE_ITHREADS};
d655 1
a655 1
    ++$skip{$_} foreach qw(
d665 1
a665 3
		    perl_alloc_using
		    perl_clone_using
			 );
d669 3
a671 1
    ++$skip{Perl_sv_setsv_cow};
d675 3
a677 1
    ++$skip{PL_reentrant_buffer};
d681 1
a681 1
    try_symbols(qw(
d688 10
a697 3
		    ));
    unless ($define{USE_ITHREADS}) {
	++$skip{PL_malloc_mutex}
d701 1
a701 1
    ++$skip{$_} foreach qw(
d705 2
d709 1
a709 1
			 );
d713 3
a715 1
    ++$skip{PL_use_safe_putenv};
d719 3
a721 1
    ++$skip{PL_thr_key};
d725 1
a725 1
++$skip{$_} foreach qw(
d750 1
a750 1
		     );
d753 1
a753 2
    ++$skip{$_} foreach qw(
		    PL_check_mutex
d757 2
d763 1
a763 2
		    Perl_clone_params_del
		    Perl_clone_params_new
d774 1
a776 1
		    Perl_sv_dup_inc
d782 7
d792 1
a792 1
			 );
d796 1
a796 1
    ++$skip{$_} foreach qw(
d816 12
a827 1
			 );
d831 1
a831 1
    ++$skip{$_} foreach qw(
d837 1
a837 1
			 );
d841 1
a841 1
    ++$skip{$_} foreach qw(
d844 5
a848 1
			 );
d852 3
a854 1
    ++$skip{PL_appctx};
d858 3
a860 1
    ++$skip{PL_timesbase};
d864 3
a866 1
    ++$skip{PL_sv_serial};
d870 3
a872 1
    ++$skip{PL_dumper_fd};
a873 1

d875 3
a877 1
    ++$skip{Perl_gv_SVadd};
a878 1

d880 3
a882 1
    ++$skip{Perl_my_sprintf};
a883 1

d885 4
a888 1
    ++$skip{PL_pidstatus};
d892 3
a894 1
    ++$skip{PL_memory_debug_header};
d897 7
a903 2
unless ($define{PERL_MAD}) {
    ++$skip{$_} foreach qw(
d906 29
a934 1
			 );
d938 1
a938 1
    ++$skip{$_} foreach qw(
d940 2
a941 2
		    PL_interp_size_5_16_0
			 );
d945 3
a947 1
    ++$skip{PL_global_struct_size};
d951 1
a951 1
    ++$skip{$_} foreach qw(
d954 1
a954 1
			 );
d957 4
a960 2
unless ($define{HAS_MMAP}) {
    ++$skip{PL_mmap_page_size};
d963 4
a966 7
if ($define{HAS_SIGACTION}) {
    ++$skip{PL_sig_trapped};

    if ($ARGS{PLATFORM} eq 'vms') {
        # FAKE_PERSISTENT_SIGNAL_HANDLERS defined as !defined(HAS_SIGACTION)
        ++$skip{PL_sig_ignoring};
    }
d969 6
a974 11
unless ($define{USE_LOCALE_COLLATE}) {
    ++$skip{$_} foreach qw(
		    PL_collation_ix
		    PL_collation_name
		    PL_collation_standard
		    PL_collxfrm_base
		    PL_collxfrm_mult
		    Perl_sv_collxfrm
		    Perl_sv_collxfrm_flags
			 );
}
d976 13
a988 20
unless ($define{USE_LOCALE_NUMERIC}) {
    ++$skip{$_} foreach qw(
		    PL_numeric_local
		    PL_numeric_name
		    PL_numeric_radix_sv
		    PL_numeric_standard
			 );
}

unless ($define{HAVE_INTERP_INTERN}) {
    ++$skip{$_} foreach qw(
		    Perl_sys_intern_clear
		    Perl_sys_intern_dup
		    Perl_sys_intern_init
		    PL_sys_intern
			 );
}

if ($define{HAS_SIGNBIT}) {
    ++$skip{Perl_signbit};
d992 4
a995 6
    readvar('perlvars.h', \%skip);
    # This seems like the least ugly way to cope with the fact that PL_sh_path
    # is mentioned in perlvar.h and globvar.sym, and always exported.
    delete $skip{PL_sh_path};
    ++$export{Perl_GetVars};
    try_symbols(qw(PL_Vars PL_VarsPtr)) unless $ARGS{CCTYPE} eq 'GCC';
d997 1
a997 1
    ++$skip{$_} foreach qw(Perl_init_global_struct Perl_free_global_struct);
d1002 1
a1002 1
my @@syms = qw(globvar.sym);
a1014 1
		    PerlIOBase_open
d1081 1
a1081 1
if ($ARGS{PLATFORM} eq 'netware') {
d1088 1
a1088 1
    push @@syms, 'perlio.sym';
d1093 2
a1094 2
	++$skip{$_} foreach @@layer_syms;
	++$skip{perlsio_binmode};
d1099 1
a1099 1
	++$skip{$_} foreach qw(
d1167 1
a1167 1
			     );
d1171 12
a1182 1
	try_symbols(@@layer_syms, 'perlsio_binmode');
d1188 2
a1189 2
	++$skip{$_} foreach @@layer_syms;
	++$skip{$_} foreach qw(
d1197 1
a1197 2
			PL_perlio_mutex
			     );
d1201 2
a1202 27
	# Remaining remnants that _may_ be functions are handled below.
}

###############################################################################

# At this point all skip lists should be completed, as we are about to test
# many symbols against them.

{
    my %seen;
    my ($embed) = setup_embed($ARGS{TARG_DIR});

    foreach (@@$embed) {
	my ($flags, $retval, $func, @@args) = @@$_;
	next unless $func;
	if ($flags =~ /[AX]/ && $flags !~ /[xm]/ || $flags =~ /b/) {
	    # public API, so export

	    # If a function is defined twice, for example before and after
	    # an #else, only export its name once. Important to do this test
	    # within the block, as the *first* definition may have flags which
	    # mean "don't export"
	    next if $seen{$func}++;
	    $func = "Perl_$func" if $flags =~ /[pbX]/;
	    ++$export{$func} unless exists $skip{$func};
	}
    }
d1205 10
a1214 10
foreach (@@syms) {
    my $syms = $ARGS{TARG_DIR} . $_;
    open my $global, '<', $syms or die "failed to open $syms: $!\n";
    # Functions already have a Perl_ prefix
    # Variables need a PL_ prefix
    my $prefix = $syms =~ /var\.sym$/i ? 'PL_' : '';
    while (<$global>) {
	next unless /^([A-Za-z].*)/;
	my $symbol = "$prefix$1";
	++$export{$symbol} unless exists $skip{$symbol};
d1216 1
d1221 9
a1229 2
if ($define{'MULTIPLICITY'} && $define{PERL_GLOBAL_STRUCT}) {
    readvar('perlvars.h', \%export, sub { "Perl_" . $_[1] . $_[2] . "_ptr" });
d1231 3
a1233 2
    if ($ARGS{PLATFORM} eq 'aix' or $ARGS{PLATFORM} eq 'os2') {	# OS/2 needs PL_thr_key
	readvar('perlvars.h', \%export);
d1238 2
a1239 1
	readvar('perlvars.h', \%export);
d1241 3
a1243 2
    unless ($define{MULTIPLICITY}) {
	readvar('intrpvar.h', \%export);
d1247 13
a1259 23
# Oddities from PerlIO
# All have alternate implementations in perlio.c, so always exist.
# Should they be considered to be part of the API?
try_symbols(qw(
		    PerlIO_binmode
		    PerlIO_getpos
		    PerlIO_init
		    PerlIO_setpos
		    PerlIO_sprintf
		    PerlIO_tmpfile
		    PerlIO_vsprintf
	     ));

if ($ARGS{PLATFORM} eq 'win32') {
    try_symbols(qw(
				 setgid
				 setuid
				 win32_free_childdir
				 win32_free_childenv
				 win32_get_childdir
				 win32_get_childenv
				 win32_spawnvp
		 ));
d1262 5
a1266 2
if ($ARGS{PLATFORM} =~ /^win(?:32|ce)$/) {
    try_symbols(qw(
d1294 1
d1380 2
d1383 2
d1425 7
a1431 1
		 ));
d1433 10
a1442 153
elsif ($ARGS{PLATFORM} eq 'vms') {
    try_symbols(qw(
		      Perl_cando
		      Perl_cando_by_name
		      Perl_closedir
		      Perl_csighandler_init
		      Perl_do_rmdir
		      Perl_fileify_dirspec
		      Perl_fileify_dirspec_ts
		      Perl_fileify_dirspec_utf8
		      Perl_fileify_dirspec_utf8_ts
		      Perl_flex_fstat
		      Perl_flex_lstat
		      Perl_flex_stat
		      Perl_kill_file
		      Perl_my_chdir
		      Perl_my_chmod
		      Perl_my_crypt
		      Perl_my_endpwent
		      Perl_my_fclose
		      Perl_my_fdopen
		      Perl_my_fgetname
		      Perl_my_flush
		      Perl_my_fwrite
		      Perl_my_gconvert
		      Perl_my_getenv
		      Perl_my_getenv_len
		      Perl_my_getlogin
		      Perl_my_getpwnam
		      Perl_my_getpwuid
		      Perl_my_gmtime
		      Perl_my_kill
		      Perl_my_localtime
		      Perl_my_mkdir
		      Perl_my_sigaction
		      Perl_my_symlink
		      Perl_my_time
		      Perl_my_tmpfile
		      Perl_my_trnlnm
		      Perl_my_utime
		      Perl_my_waitpid
		      Perl_opendir
		      Perl_pathify_dirspec
		      Perl_pathify_dirspec_ts
		      Perl_pathify_dirspec_utf8
		      Perl_pathify_dirspec_utf8_ts
		      Perl_readdir
		      Perl_readdir_r
		      Perl_rename
		      Perl_rmscopy
		      Perl_rmsexpand
		      Perl_rmsexpand_ts
		      Perl_rmsexpand_utf8
		      Perl_rmsexpand_utf8_ts
		      Perl_seekdir
		      Perl_sig_to_vmscondition
		      Perl_telldir
		      Perl_tounixpath
		      Perl_tounixpath_ts
		      Perl_tounixpath_utf8
		      Perl_tounixpath_utf8_ts
		      Perl_tounixspec
		      Perl_tounixspec_ts
		      Perl_tounixspec_utf8
		      Perl_tounixspec_utf8_ts
		      Perl_tovmspath
		      Perl_tovmspath_ts
		      Perl_tovmspath_utf8
		      Perl_tovmspath_utf8_ts
		      Perl_tovmsspec
		      Perl_tovmsspec_ts
		      Perl_tovmsspec_utf8
		      Perl_tovmsspec_utf8_ts
		      Perl_trim_unixpath
		      Perl_vms_case_tolerant
		      Perl_vms_do_aexec
		      Perl_vms_do_exec
		      Perl_vms_image_init
		      Perl_vms_realpath
		      Perl_vmssetenv
		      Perl_vmssetuserlnm
		      Perl_vmstrnenv
		      PerlIO_openn
		 ));
}
elsif ($ARGS{PLATFORM} eq 'os2') {
    try_symbols(qw(
		      ctermid
		      get_sysinfo
		      Perl_OS2_init
		      Perl_OS2_init3
		      Perl_OS2_term
		      OS2_Perl_data
		      dlopen
		      dlsym
		      dlerror
		      dlclose
		      dup2
		      dup
		      my_tmpfile
		      my_tmpnam
		      my_flock
		      my_rmdir
		      my_mkdir
		      my_getpwuid
		      my_getpwnam
		      my_getpwent
		      my_setpwent
		      my_endpwent
		      fork_with_resources
		      croak_with_os2error
		      setgrent
		      endgrent
		      getgrent
		      malloc_mutex
		      threads_mutex
		      nthreads
		      nthreads_cond
		      os2_cond_wait
		      os2_stat
		      os2_execname
		      async_mssleep
		      msCounter
		      InfoTable
		      pthread_join
		      pthread_create
		      pthread_detach
		      XS_Cwd_change_drive
		      XS_Cwd_current_drive
		      XS_Cwd_extLibpath
		      XS_Cwd_extLibpath_set
		      XS_Cwd_sys_abspath
		      XS_Cwd_sys_chdir
		      XS_Cwd_sys_cwd
		      XS_Cwd_sys_is_absolute
		      XS_Cwd_sys_is_relative
		      XS_Cwd_sys_is_rooted
		      XS_DynaLoader_mod2fname
		      XS_File__Copy_syscopy
		      Perl_Register_MQ
		      Perl_Deregister_MQ
		      Perl_Serve_Messages
		      Perl_Process_Messages
		      init_PMWIN_entries
		      PMWIN_entries
		      Perl_hab_GET
		      loadByOrdinal
		      pExtFCN
		      os2error
		      ResetWinError
		      CroakWinError
		      PL_do_undump
		 ));
d1444 12
a1455 2
elsif ($ARGS{PLATFORM} eq 'netware') {
    try_symbols(qw(
d1590 4
a1593 1
		 ));
d1596 10
a1605 18
# When added this code was only run for Win32 and WinCE
# Currently only Win32 links static extensions into the shared library.
# The WinCE makefile doesn't appear to support static extensions, so this code
# can't have any effect there.
# The NetWare Makefile doesn't support static extensions (and hardcodes the
# list of dynamic extensions, and the rules to build them)
# For *nix (and presumably OS/2) with a shared libperl, Makefile.SH compiles
# static extensions with -fPIC, but links them to perl, not libperl.so
# The VMS build scripts don't yet implement static extensions at all.

if ($ARGS{PLATFORM} =~ /^win(?:32|ce)$/) {
    # records of type boot_module for statically linked modules (except Dynaloader)
    my $static_ext = $Config{static_ext} // "";
    $static_ext =~ s/\//__/g;
    $static_ext =~ s/\bDynaLoader\b//;
    try_symbols(map {"boot_$_"} grep {/\S/} split /\s+/, $static_ext);
    try_symbols("init_Win32CORE") if $static_ext =~ /\bWin32CORE\b/;
}
d1607 2
a1608 5
if ($ARGS{PLATFORM} eq 'os2') {
    my (%mapped, @@missing);
    open MAP, 'miniperl.map' or die 'Cannot read miniperl.map';
    /^\s*[\da-f:]+\s+(\w+)/i and $mapped{$1}++ foreach <MAP>;
    close MAP or die 'Cannot close miniperl.map';
d1610 2
a1611 4
    @@missing = grep { !exists $mapped{$_} }
		    keys %export;
    @@missing = grep { !exists $exportperlmalloc{$_} } @@missing;
    delete $export{$_} foreach @@missing;
d1614 6
a1619 1
###############################################################################
d1621 3
a1623 1
# Now all symbols should be defined because next we are going to output them.
d1625 4
a1628 12
# Start with platform specific headers:

if ($ARGS{PLATFORM} =~ /^win(?:32|ce)$/) {
    my $dll = $define{PERL_DLL} ? $define{PERL_DLL} =~ s/\.dll$//ir
	: "perl$Config{api_revision}$Config{api_version}";
    print "LIBRARY $dll\n";
    # The DESCRIPTION module definition file statement is not supported
    # by VC7 onwards.
    if ($ARGS{CCTYPE} =~ /^(?:MSVC60|GCC)$/) {
	print "DESCRIPTION 'Perl interpreter'\n";
    }
    print "EXPORTS\n";
a1629 36
elsif ($ARGS{PLATFORM} eq 'os2') {
    (my $v = $]) =~ s/(\d\.\d\d\d)(\d\d)$/$1_$2/;
    $v .= '-thread' if $Config{archname} =~ /-thread/;
    (my $dll = $define{PERL_DLL}) =~ s/\.dll$//i;
    $v .= "\@@$Config{perl_patchlevel}" if $Config{perl_patchlevel};
    my $d = "DESCRIPTION '\@@#perl5-porters\@@perl.org:$v#\@@ Perl interpreter, configured as $Config{config_args}'";
    $d = substr($d, 0, 249) . "...'" if length $d > 253;
    print <<"---EOP---";
LIBRARY '$dll' INITINSTANCE TERMINSTANCE
$d
STACKSIZE 32768
CODE LOADONCALL
DATA LOADONCALL NONSHARED MULTIPLE
EXPORTS
---EOP---
}
elsif ($ARGS{PLATFORM} eq 'aix') {
    my $OSVER = `uname -v`;
    chop $OSVER;
    my $OSREL = `uname -r`;
    chop $OSREL;
    if ($OSVER > 4 || ($OSVER == 4 && $OSREL >= 3)) {
	print "#! ..\n";
    } else {
	print "#!\n";
    }
}
elsif ($ARGS{PLATFORM} eq 'netware') {
	if ($ARGS{FILETYPE} eq 'def') {
	print "LIBRARY perl$Config{api_revision}$Config{api_version}\n";
	print "DESCRIPTION 'Perl interpreter for NetWare'\n";
	print "EXPORTS\n";
	}
}

# Then the symbols
d1631 4
a1634 3
my @@symbols = $fold ? sort {lc $a cmp lc $b} keys %export : sort keys %export;
foreach my $symbol (@@symbols) {
    if ($ARGS{PLATFORM} =~ /^win(?:32|ce)$/) {
d1636 21
d1658 1
a1658 1
    elsif ($ARGS{PLATFORM} eq 'os2') {
d1666 1
a1666 3
    elsif ($ARGS{PLATFORM} eq 'netware') {
	print "\t$symbol,\n";
    } else {
d1669 3
a1671 13
}

# Then platform specific footers.

if ($ARGS{PLATFORM} eq 'os2') {
    print <<EOP;
    dll_perlmain=main
    fill_extLibpath
    dir_subst
    Perl_OS2_handler_install

; LAST_ORDINAL=$sym_ord
EOP
d1675 10
@


1.1.1.13
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d90 3
a92 6
#don't use the host Perl's -V defines for the WinCE Perl
if($ARGS{PLATFORM} ne 'wince') {
    my @@options = sort(Config::bincompat_options(), Config::non_bincompat_options());
    print STDERR "Options: (@@options)\n" unless $ARGS{PLATFORM} eq 'test';
    $define{$_} = 1 foreach @@options;
}
d104 1
a104 2
my $config_h = $ARGS{PLATFORM} eq 'wince' ? 'xconfig.h' : 'config.h';
open(CFG, '<', $config_h) || die "Cannot open $config_h: $!\n";
a107 1
                                           |KILL_BY_SIGPRC
d114 4
d250 1
d281 1
a281 2
unless ($define{'PERL_OLD_COPY_ON_WRITE'}
     || $define{'PERL_NEW_COPY_ON_WRITE'}) {
a284 4
unless ($define{PERL_SAWAMPERSAND}) {
    ++$skip{PL_sawampersand};
}

a357 4
		    PL_stashpad
		    PL_stashpadix
		    PL_stashpadmax
		    Perl_alloccopstash
d408 17
d467 1
a467 1
		    PL_interp_size_5_18_0
a491 1
        ++$skip{PL_sig_handlers_initted} unless $define{KILL_BY_SIGPRC};
a494 9
if ($ARGS{PLATFORM} eq 'vms' && !$define{KILL_BY_SIGPRC}) {
    # FAKE_DEFAULT_SIGNAL_HANDLERS defined as KILL_BY_SIGPRC
    ++$skip{Perl_csighandler_init};
    ++$skip{Perl_my_kill};
    ++$skip{Perl_sig_to_vmscondition};
    ++$skip{PL_sig_defaulting};
    ++$skip{PL_sig_handlers_initted} unless !$define{HAS_SIGACTION};
}

d535 1
a535 2
    try_symbols(qw(PL_Vars PL_VarsPtr))
      unless $ARGS{CCTYPE} eq 'GCC' || $define{PERL_GLOBAL_STRUCT_PRIVATE};
d747 1
a747 1
	if ($flags =~ /[AX]/ && $flags !~ /[xmi]/ || $flags =~ /b/) {
d755 1
a755 2
	    # Should we also skip adding the Perl_ prefix if $flags =~ /o/ ?
	    $func = "Perl_$func" if ($flags =~ /[pbX]/ && $func !~ /^Perl_/); 
d807 2
a814 4
}

if ($ARGS{PLATFORM} eq 'wince') {
    ++$skip{'win32_isatty'}; # commit 4342f4d6df is win32-only
@


1.1.1.14
log
@Import perl-5.20.1
@
text
@d107 1
a107 1
my $config_h = 'config.h';
a237 6
if ($ARGS{PLATFORM} ne 'win32') {
    ++$skip{$_} foreach qw(
		    Perl_my_setlocale
			 );
}

a366 1
		    Perl_allocfilegv
a542 3
++$skip{PL_op_exec_cnt}
    unless $define{PERL_TRACE_OPS};

d630 1
a630 1
    # Export the symbols that make up the PerlIO abstraction, regardless
d634 83
a716 2
    # PerlIO with layers - export implementation
    try_symbols(@@layer_syms, 'perlsio_binmode');
d804 1
d806 1
@


1.1.1.15
log
@Import perl-5.20.2
@
text
@a422 152
if ($define{'NO_MATHOMS'}) {
    ++$skip{$_} foreach qw(
		    ASCII_TO_NEED
		    NATIVE_TO_NEED
		    Perl_custom_op_desc
		    Perl_custom_op_name
		    Perl_do_aexec
		    Perl_do_binmode
		    Perl_do_open
		    Perl_do_open9
		    Perl_fprintf_nocontext
		    Perl_gv_AVadd
		    Perl_gv_HVadd
		    Perl_gv_IOadd
		    Perl_gv_SVadd
		    Perl_gv_efullname
		    Perl_gv_efullname3
		    Perl_gv_fetchmethod
		    Perl_gv_fullname
		    Perl_gv_fullname3
		    Perl_hv_delete
		    Perl_hv_delete_ent
		    Perl_hv_exists
		    Perl_hv_exists_ent
		    Perl_hv_fetch
		    Perl_hv_fetch_ent
		    Perl_hv_iternext
		    Perl_hv_magic
		    Perl_hv_store
		    Perl_hv_store_ent
		    Perl_hv_store_flags
		    Perl_init_i18nl14n
		    Perl_isALNUM_lazy
		    Perl_isIDFIRST_lazy
		    Perl_is_uni_alnum
		    Perl_is_uni_alnum_lc
		    Perl_is_uni_alnumc
		    Perl_is_uni_alnumc_lc
		    Perl_is_uni_alpha
		    Perl_is_uni_alpha_lc
		    Perl_is_uni_ascii
		    Perl_is_uni_ascii_lc
		    Perl_is_uni_blank
		    Perl_is_uni_blank_lc
		    Perl_is_uni_cntrl
		    Perl_is_uni_cntrl_lc
		    Perl_is_uni_digit
		    Perl_is_uni_digit_lc
		    Perl_is_uni_graph
		    Perl_is_uni_graph_lc
		    Perl_is_uni_idfirst
		    Perl_is_uni_idfirst_lc
		    Perl_is_uni_lower
		    Perl_is_uni_lower_lc
		    Perl_is_uni_print
		    Perl_is_uni_print_lc
		    Perl_is_uni_punct
		    Perl_is_uni_punct_lc
		    Perl_is_uni_space
		    Perl_is_uni_space_lc
		    Perl_is_uni_upper
		    Perl_is_uni_upper_lc
		    Perl_is_uni_xdigit
		    Perl_is_uni_xdigit_lc
		    Perl_is_utf8_alnum
		    Perl_is_utf8_alnumc
		    Perl_is_utf8_alpha
		    Perl_is_utf8_ascii
		    Perl_is_utf8_blank
		    Perl_is_utf8_char
		    Perl_is_utf8_cntrl
		    Perl_is_utf8_digit
		    Perl_is_utf8_graph
		    Perl_is_utf8_idcont
		    Perl_is_utf8_idfirst
		    Perl_is_utf8_lower
		    Perl_is_utf8_mark
		    Perl_is_utf8_perl_space
		    Perl_is_utf8_perl_word
		    Perl_is_utf8_posix_digit
		    Perl_is_utf8_print
		    Perl_is_utf8_punct
		    Perl_is_utf8_space
		    Perl_is_utf8_string_loc
		    Perl_is_utf8_upper
		    Perl_is_utf8_xdigit
		    Perl_is_utf8_xidcont
		    Perl_is_utf8_xidfirst
		    Perl_my_lstat
		    Perl_my_stat
		    Perl_newAV
		    Perl_newHV
		    Perl_newIO
		    Perl_newSUB
		    Perl_pack_cat
		    Perl_printf_nocontext
		    Perl_ref
		    Perl_save_freeop
		    Perl_save_freepv
		    Perl_save_freesv
		    Perl_save_iv
		    Perl_save_list
		    Perl_save_long
		    Perl_save_mortalizesv
		    Perl_save_nogv
		    Perl_save_op
		    Perl_save_re_context
		    Perl_sv_2iv
		    Perl_sv_2pv
		    Perl_sv_2pv_nolen
		    Perl_sv_2pvbyte_nolen
		    Perl_sv_2pvutf8_nolen
		    Perl_sv_2uv
		    Perl_sv_catpvn
		    Perl_sv_catpvn_mg
		    Perl_sv_catsv
		    Perl_sv_catsv_mg
		    Perl_sv_force_normal
		    Perl_sv_insert
		    Perl_sv_iv
		    Perl_sv_mortalcopy
		    Perl_sv_nolocking
		    Perl_sv_nounlocking
		    Perl_sv_nv
		    Perl_sv_pv
		    Perl_sv_pvbyte
		    Perl_sv_pvbyten
		    Perl_sv_pvn
		    Perl_sv_pvn_force
		    Perl_sv_pvn_nomg
		    Perl_sv_pvutf8
		    Perl_sv_pvutf8n
		    Perl_sv_setsv
		    Perl_sv_taint
		    Perl_sv_unref
		    Perl_sv_usepvn
		    Perl_sv_usepvn_mg
		    Perl_sv_utf8_upgrade
		    Perl_sv_uv
		    Perl_to_uni_lower_lc
		    Perl_to_uni_title_lc
		    Perl_to_uni_upper_lc
		    Perl_to_utf8_fold
		    Perl_to_utf8_lower
		    Perl_to_utf8_title
		    Perl_to_utf8_upper
		    Perl_unpack_str
		    Perl_utf8_to_uvchr
		    Perl_utf8_to_uvuni
		    Perl_valid_utf8_to_uvuni
			 );
}
@


1.1.1.7.2.1
log
@MFC:
Fix by brad@@

The official fix for the Perl sprintf buffer overflow.
@
text
@d638 6
@


1.1.1.7.4.1
log
@MFC:
Fix by brad@@

The official fix for the Perl sprintf buffer overflow.
@
text
@d638 6
@


