head	1.12;
access;
symbols
	OPENBSD_6_0:1.11.0.12
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.9.0.18
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.16
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.14
	OPENBSD_5_0:1.9.0.12
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	cxJ08BvJA9Pt2PTM;

1.11
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.25.20.41.00;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.21;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.13;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.21.33.10;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.27;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.06.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.27;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.27;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.59;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.26.03;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.45;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.49.51;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.19.04;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.09.40;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# Create global symbol declarations, transfer vector, and
# linker options files for PerlShr.
#
# Processes the output of makedef.pl.
#
# Input:
#    $cc_cmd - compiler command
#    $objsuffix - file type (including '.') used for object files.
#    $libperl - Perl object library.
#    $extnames - package names for static extensions (used to generate
#        linker options file entries for boot functions)
#    $rtlopt - name of options file specifying RTLs to which PerlShr.Exe
#        must be linked
#
# Output:
#    PerlShr_Attr.Opt - linker options file which specifies that global vars
#        be placed in NOSHR,WRT psects.  Use when linking any object files
#        against PerlShr.Exe, since cc places global vars in SHR,WRT psects
#        by default.
#    PerlShr_Bld.Opt - declares universal symbols for PerlShr.Exe
#
# To do:
#   - figure out a good way to collect global vars in one psect, given that
#     we can't use globaldef because of gcc.
#   - then, check for existing files and preserve symbol and transfer vector
#     order for upward compatibility
#   - then, add GSMATCH to options file - but how do we insure that new
#     library has everything old one did
#     (i.e. /Define=DEBUGGING,EMBED,MULTIPLICITY)?
#
# Author: Charles Bailey  bailey@@newman.upenn.edu

use strict;
require 5.000;

my $debug = $ENV{'GEN_SHRFLS_DEBUG'};

print "gen_shrfls.pl Rev. 8-Jul-2011\n" if $debug;

if ($ARGV[0] eq '-f') {
  open(INP,$ARGV[1]) or die "Can't read input file $ARGV[1]: $!\n";
  print "Input taken from file $ARGV[1]\n" if $debug;
  @@ARGV = ();
  while (<INP>) {
    chomp;
    push(@@ARGV,split(/\|/,$_));
  }
  close INP;
  print "Read input data | ",join(' | ',@@ARGV)," |\n" if $debug > 1;
}

my $cc_cmd = shift @@ARGV; # no longer used to run the preprocessor

print "Input \$cc_cmd: \\$cc_cmd\\\n" if $debug;
my $docc = ($cc_cmd !~ /^~~/);
print "\$docc = $docc\n" if $debug;

my ( $use_threads, $use_mymalloc, $care_about_case, $shorten_symbols,
     $debugging_enabled, $hide_mymalloc, $isgcc, $use_perlio, $dir )
   = ( 0, 0, 0, 0, 0, 0, 0, 0 );

if (-f 'perl.h') { $dir = '[]'; }
elsif (-f '[-]perl.h') { $dir = '[-]'; }
else { die "$0: Can't find perl.h\n"; }

# Go see what is enabled in config.sh
my $config = $dir . "config.sh";
open CONFIG, '<', $config;
while(<CONFIG>) {
    $use_threads++ if /usethreads='(define|yes|true|t|y|1)'/i;
    $use_mymalloc++ if /usemymalloc='(define|yes|true|t|y|1)'/i;
    $care_about_case++ if /d_vms_case_sensitive_symbols='(define|yes|true|t|y|1)'/i;
    $shorten_symbols++ if /d_vms_shorten_long_symbols='(define|yes|true|t|y|1)'/i;
    $debugging_enabled++ if /usedebugging_perl='(define|yes|true|t|y|1)'/i;
    $hide_mymalloc++ if /embedmymalloc='(define|yes|true|t|y|1)'/i;
    $isgcc++ if /gccversion='[^']/;
    $use_perlio++ if /useperlio='(define|yes|true|t|y|1)'/i;
}
close CONFIG;
  
# put quotes back onto defines - they were removed by DCL on the way in
if (my ($prefix,$defines,$suffix) =
         ($cc_cmd =~ m#(.*)/Define=(.*?)([/\s].*)#i)) {
  $defines =~ s/^\((.*)\)$/$1/;
  $debugging_enabled ||= $defines =~ /\bDEBUGGING\b/;
  my @@defines = split(/,/,$defines);
  $cc_cmd = "$prefix/Define=(" . join(',',grep($_ = "\"$_\"",@@defines)) 
              . ')' . $suffix;
}
print "Filtered \$cc_cmd: \\$cc_cmd\\\n" if $debug;

# check for gcc - if present, we'll need to use MACRO hack to
# define global symbols for shared variables

print "\$isgcc: $isgcc\n" if $debug;
print "\$debugging_enabled: $debugging_enabled\n" if $debug;

my $objsuffix = shift @@ARGV;
print "\$objsuffix: \\$objsuffix\\\n" if $debug;
my $dbgprefix = shift @@ARGV;
print "\$dbgprefix: \\$dbgprefix\\\n" if $debug;
my $olbsuffix = shift @@ARGV;
print "\$olbsuffix: \\$olbsuffix\\\n" if $debug;
my $libperl = "${dbgprefix}libperl$olbsuffix";
my $extnames = shift @@ARGV;
print "\$extnames: \\$extnames\\\n" if $debug;
my $rtlopt = shift @@ARGV;
print "\$rtlopt: \\$rtlopt\\\n" if $debug;

my (%vars, %fcns);

open my $makedefs, '<', $dir . 'makedef.lis' or die "Unable to open makedef.lis: $!";

while (my $line = <$makedefs>) {
  chomp $line;
  $line = shorten_symbol($line, $care_about_case) if $shorten_symbols;
  # makedef.pl loses distinction between vars and funcs, so
  # use the start of the name to guess and add specific
  # exceptions when we know about them.
  if ($line =~ m/^(PL_|MallocCfg)/
      || $line eq 'PerlIO_perlio'
      || $line eq 'PerlIO_pending') {
    $vars{$line}++;
  }
  else {
    $fcns{$line}++;
  }
}

if ($debugging_enabled and $isgcc) { $vars{'colors'}++ }
foreach (split /\s+/, $extnames) {
  my($pkgname) = $_;
  $pkgname =~ s/::/__/g;
  $fcns{"boot_$pkgname"}++;
  print "Adding boot_$pkgname to \%fcns (for extension $_)\n" if $debug;
}

# Eventually, we'll check against existing copies here, so we can add new
# symbols to an existing options file in an upwardly-compatible manner.

my $marord = 1;
open(OPTBLD,'>', "${dir}${dbgprefix}perlshr_bld.opt")
  or die "$0: Can't write to ${dir}${dbgprefix}perlshr_bld.opt: $!\n";

unless ($isgcc) {
  print OPTBLD "PSECT_ATTR=LIB\$INITIALIZE,GBL,NOEXE,NOWRT,NOSHR,LONG\n";
}
print OPTBLD "case_sensitive=yes\n" if $care_about_case;
my $count = 0;
foreach my $var (sort (keys %vars)) {
  print OPTBLD "SYMBOL_VECTOR=($var=DATA)\n";
}

foreach my $func (sort keys %fcns) {
  print OPTBLD "SYMBOL_VECTOR=($func=PROCEDURE)\n";
}

open(OPTATTR, '>', "${dir}perlshr_attr.opt")
  or die "$0: Can't write to ${dir}perlshr_attr.opt: $!\n";
if ($isgcc) {
# TODO -- lost ability to distinguish constant vars from others when
# we switched to using makedef.pl for input.
#  foreach my $var (sort keys %cvars) {
#    print OPTATTR "PSECT_ATTR=${var},PIC,OVR,RD,NOEXE,NOWRT,SHR\n";
#  }
  foreach my $var (sort keys %vars) {
    print OPTATTR "PSECT_ATTR=${var},PIC,OVR,RD,NOEXE,WRT,NOSHR\n";
  }
}
else {
  print OPTATTR "! No additional linker directives are needed when using DECC\n";
}
close OPTATTR;

my $incstr = 'PERL,GLOBALS';
my (@@symfiles, $drvrname);

# Initial hack to permit building of compatible shareable images for a
# given version of Perl.
if ($ENV{PERLSHR_USE_GSMATCH}) {
  if ($ENV{PERLSHR_USE_GSMATCH} eq 'INCLUDE_COMPILE_OPTIONS') {
    # Build up a major ID. Since on Alpha it can only be 8 bits, we encode
    # the version number in the top 5 bits and use the bottom 3 for build
    # options most likely to cause incompatibilities.  Breaks at Perl 5.32.
    my ($ver, $sub) = $] =~ /\.(\d\d\d)(\d\d\d)/;
    $ver += 0; $sub += 0;
    my $gsmatch = ($ver % 2 == 1) ? "EQUAL" : "LEQUAL"; # Force an equal match for
						  # dev, but be more forgiving
						  # for releases

    $ver <<= 3;
    $ver += 1 if $debugging_enabled;	# If DEBUGGING is set
    $ver += 2 if $use_threads;		# if we're threaded
    $ver += 4 if $use_mymalloc;		# if we're using perl's malloc
    print OPTBLD "GSMATCH=$gsmatch,$ver,$sub\n";
  }
  else {
    my $major = int($] * 1000)                        & 0xFF;  # range 0..255
    my $minor = int(($] * 1000 - $major) * 100 + 0.5) & 0xFF;  # range 0..255
    print OPTBLD "GSMATCH=LEQUAL,$major,$minor\n";
  }
}
elsif (@@symfiles) { $incstr .= ',' . join(',',@@symfiles); }
# Include object modules and RTLs in options file
# Linker wants /Include and /Library on different lines
print OPTBLD "$libperl/Include=($incstr)\n";
print OPTBLD "$libperl/Library\n";
open(RTLOPT,$rtlopt) or die "$0: Can't read options file $rtlopt: $!\n";
while (<RTLOPT>) { print OPTBLD; }
close RTLOPT;
close OPTBLD;


# Symbol shortening Copyright (c) 2012 Craig A. Berry
#
# Released under the same terms as Perl itself.
#
# This code provides shortening of long symbols (> 31 characters) using the
# same mechanism as the OpenVMS C compiler.  The basic procedure is to compute
# an AUTODIN II checksum of the entire symbol, encode the checksum in base32,
# and glue together a shortened symbol from the first 23 characters of the
# original symbol plus the encoded checksum appended.  The output format is
# the same used in the name mangler database, stored by default in
# [.CXX_REPOSITORY]CXX$DEMANGLER_DB.

sub crc32 {
    use constant autodin_ii_table => [
        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
        0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
        0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
        0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
        0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
        0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,
        0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
        0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
        0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,
        0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
        0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
        0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
        0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
        0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
        0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
        0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
        0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
        0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
        0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
        0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
        0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
        0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
        0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
        0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
        0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
        0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
        0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
        0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
        0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
        0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
        0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
        0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
        0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,
    ];

    my $input_string = shift;
    my $crc = 0xFFFFFFFF;

    for my $byte (unpack 'C*', $input_string) {
        $crc = ($crc >> 8) ^ autodin_ii_table->[($crc ^ $byte) & 0xff];
    }
    return ~$crc;
}

sub base32 {
    my $input = shift;
    my $output = '';
    use constant base32hex_table => [
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v'
    ];

    # Grab lowest 5 bits and look up conversion in table.  Lather, rinse,
    # repeat for a total of 7, 5-bit chunks to accommodate 32 bits of input.

    for (0..6) {
        $output  = base32hex_table->[$input & 0x1f] . $output;
        $input >>= 5;     # position to look at next 5
    }
    $output .= '$';       #  It's DEC, so use '$' not '=' to pad.

    return $output;
}

sub shorten_symbol {
    my $input_symbol = shift;
    my $as_is_flag = shift;
    my $symbol = $input_symbol;

    return $symbol unless length($input_symbol) > 31;

    $symbol = uc($symbol) unless $as_is_flag;
    my $crc = crc32($symbol);
    $crc = ~$crc;  # Compiler uses non-inverted form.
    my $b32 = base32($crc);
    $b32 = uc($b32) unless $as_is_flag;

    return substr($symbol, 0, 23) . $b32;
}

__END__

@


1.11
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@a20 5
#    Perlshr_Gbl*.Mar, Perlshr_Gbl*.Obj (VAX  only) - declares global symbols
#        for global vars (done here because gcc can't globaldef) and creates
#        transfer vectors for routines on a VAX.
#    PerlShr_Gbl.Opt (VAX only) - list of PerlShr_Gbl*.Obj, used for input
#        to the linker when building PerlShr.Exe.
a53 9
# Someday, we'll have $GetSyI built into perl . . .
my $isvax = `\$ Write Sys\$Output \(F\$GetSyI(\"HW_MODEL\") .LE. 1024 .AND. F\$GetSyI(\"HW_MODEL\") .GT. 0\)`;
chomp $isvax;
print "\$isvax: \\$isvax\\\n" if $debug;

my $isi64 = `\$ Write Sys\$Output \(F\$GetSyI(\"HW_MODEL\") .GE. 4096)`;
chomp $isi64;
print "\$isi64: \\$isi64\\\n" if $debug;

a143 5
if ($isvax) {
  open(MAR, '>', "${dir}perlshr_gbl${marord}.mar")
    or die "$0: Can't write to ${dir}perlshr_gbl${marord}.mar: $!\n";
  print MAR "\t.title perlshr_gbl$marord\n";
}
a145 8
  if ($isi64) {
    print OPTBLD "PSECT_ATTR=\$GLOBAL_RO_VARS,NOEXE,RD,NOWRT,SHR\n";
    print OPTBLD "PSECT_ATTR=\$GLOBAL_RW_VARS,NOEXE,RD,WRT,NOSHR\n";
  }
  else {
    print OPTBLD "PSECT_ATTR=\$GLOBAL_RO_VARS,PIC,NOEXE,RD,NOWRT,SHR\n";
    print OPTBLD "PSECT_ATTR=\$GLOBAL_RW_VARS,PIC,NOEXE,RD,WRT,NOSHR\n";
  }
d151 1
a151 16
  if ($isvax) { print OPTBLD "UNIVERSAL=$var\n"; }
  else { print OPTBLD "SYMBOL_VECTOR=($var=DATA)\n"; }
  # This hack brought to you by the lack of a globaldef in gcc.
  if ($isgcc) {
    if ($count++ > 200) {  # max 254 psects/file
      print MAR "\t.end\n";
      close MAR;
      $marord++;
      open(MAR, '>', "${dir}perlshr_gbl${marord}.mar")
        or die "$0: Can't write to ${dir}perlshr_gbl${marord}.mar: $!\n";
      print MAR "\t.title perlshr_gbl$marord\n";
      $count = 0;
    }
    print MAR "\t.psect ${var},long,pic,ovr,rd,wrt,noexe,noshr\n";
    print MAR "\t${var}::	.blkl 1\n";
  }
a153 1
print MAR "\t.psect \$transfer_vec,pic,rd,nowrt,exe,shr\n" if ($isvax);
d155 1
a155 10
  if ($isvax) {
    print MAR "\t.transfer $func\n";
    print MAR "\t.mask $func\n";
    print MAR "\tjmp G\^${func}+2\n";
  }
  else { print OPTBLD "SYMBOL_VECTOR=($func=PROCEDURE)\n"; }
}
if ($isvax) {
  print MAR "\t.end\n";
  close MAR;
a176 25
if ($isvax) {
  $drvrname = "Compile_shrmars.tmp_".time;
  open (DRVR,'>', $drvrname) or die "$0: Can't write to $drvrname: $!\n";
  print DRVR "\$ Set NoOn\n";  
  print DRVR "\$ Delete/NoLog/NoConfirm $drvrname;\n";
  print DRVR "\$ old_proc_vfy = F\$Environment(\"VERIFY_PROCEDURE\")\n";
  print DRVR "\$ old_img_vfy = F\$Environment(\"VERIFY_IMAGE\")\n";
  print DRVR "\$ MCR $^X -e \"\$ENV{'LIBPERL_RDT'} = (stat('$libperl'))[9]\"\n";
  print DRVR "\$ Set Verify\n";
  print DRVR "\$ If F\$Search(\"$libperl\").eqs.\"\" Then Library/Object/Create $libperl\n";
  do {
    push(@@symfiles,"perlshr_gbl$marord");
    print DRVR "\$ Macro/NoDebug/Object=PerlShr_Gbl${marord}$objsuffix PerlShr_Gbl$marord.Mar\n";
    print DRVR "\$ Library/Object/Replace/Log $libperl PerlShr_Gbl${marord}$objsuffix\n";
  } while (--$marord); 
  # We had to have a working miniperl to run this program; it's probably the
  # one we just built.  It depended on LibPerl, which will be changed when
  # the PerlShr_Gbl* modules get inserted, so miniperl will be out of date,
  # and so, therefore, will all of its dependents . . .
  # We touch LibPerl here so it'll be back 'in date', and we won't rebuild
  # miniperl etc., and therefore LibPerl, the next time we invoke MM[KS].
  print DRVR "\$ old_proc_vfy = F\$Verify(old_proc_vfy,old_img_vfy)\n";
  print DRVR "\$ MCR $^X -e \"utime 0, \$ENV{'LIBPERL_RDT'}, '$libperl'\"\n";
  close DRVR;
}
a201 2
  print OPTBLD 'CLUSTER=$$TRANSFER_VECTOR,,',
               map(",$_$objsuffix",@@symfiles), "\n" if $isvax;
a211 2

exec "\$ \@@$drvrname" if $isvax;
@


1.10
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d134 1
a134 1
  if ($line =~ m/^PL_/
d173 1
d259 4
a262 4
    # Build up a major ID. Since it can only be 8 bits, we encode the version
    # number in the top four bits and use the bottom four for build options
    # that'll cause incompatibilities
    my ($ver, $sub) = $] =~ /\.(\d\d\d)(\d\d)/;
d264 1
a264 1
    my $gsmatch = ($sub >= 50) ? "equal" : "lequal"; # Force an equal match for
d268 4
a271 4
    $ver *=16;
    $ver += 8 if $debugging_enabled;	# If DEBUGGING is set
    $ver += 4 if $use_threads;		# if we're threaded
    $ver += 2 if $use_mymalloc;		# if we're using perl's malloc
d280 1
a280 1
               map(",$_$objsuffix",@@symfiles), "\n";
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d4 2
d7 1
a7 3
#    $cflags - command line qualifiers passed to cc when preprocesing perl.h
#        Note: A rather simple-minded attempt is made to restore quotes to
#        a /Define clause - use with care.
d16 1
a16 1
#    PerlShr_Attr.Opt - linker options file which speficies that global vars
d38 1
d41 1
a41 1
$debug = $ENV{'GEN_SHRFLS_DEBUG'};
d43 1
a43 1
print "gen_shrfls.pl Rev. 18-Dec-2003\n" if $debug;
d57 1
a57 1
$cc_cmd = shift @@ARGV;
d60 1
a60 1
$isvax = `\$ Write Sys\$Output \(F\$GetSyI(\"HW_MODEL\") .LE. 1024 .AND. F\$GetSyI(\"HW_MODEL\") .GT. 0\)`;
d64 1
a64 1
$isi64 = `\$ Write Sys\$Output \(F\$GetSyI(\"HW_MODEL\") .GE. 4096)`;
d69 1
a69 1
$docc = ($cc_cmd !~ /^~~/);
d72 12
a83 12
if ($docc) {
  if (-f 'perl.h') { $dir = '[]'; }
  elsif (-f '[-]perl.h') { $dir = '[-]'; }
  else { die "$0: Can't find perl.h\n"; }

  $use_threads = $use_mymalloc = $case_about_case = $debugging_enabled = 0;
  $hide_mymalloc = $isgcc = $use_perlio = 0;

  # Go see what is enabled in config.sh
  $config = $dir . "config.sh";
  open CONFIG, "< $config";
  while(<CONFIG>) {
d87 1
d92 2
a93 2
  }
  close CONFIG;
d95 2
a96 2
  # put quotes back onto defines - they were removed by DCL on the way in
  if (($prefix,$defines,$suffix) =
d98 4
a101 4
    $defines =~ s/^\((.*)\)$/$1/;
    $debugging_enabled ||= $defines =~ /\bDEBUGGING\b/;
    @@defines = split(/,/,$defines);
    $cc_cmd = "$prefix/Define=(" . join(',',grep($_ = "\"$_\"",@@defines)) 
d103 2
a104 2
  }
  print "Filtered \$cc_cmd: \\$cc_cmd\\\n" if $debug;
d106 2
a107 2
  # check for gcc - if present, we'll need to use MACRO hack to
  # define global symbols for shared variables
d109 2
a110 2
  print "\$isgcc: $isgcc\n" if $debug;
  print "\$debugging_enabled: $debugging_enabled\n" if $debug;
d112 1
a112 12
}
else { 
  ($junk,$junk,$cpp_file,$cc_cmd) = split(/~~/,$cc_cmd,4);
  $isgcc = $cc_cmd =~ /case_hack/i
           or 0;  # for nice debug output
  $debugging_enabled = $cc_cmd =~ /\bdebugging\b/i;
  print "\$isgcc: \\$isgcc\\\n" if $debug;
  print "\$debugging_enabled: \\$debugging_enabled\\\n" if $debug;
  print "Not running cc, preprocesor output in \\$cpp_file\\\n" if $debug;
}

$objsuffix = shift @@ARGV;
d114 1
a114 1
$dbgprefix = shift @@ARGV;
d116 1
a116 1
$olbsuffix = shift @@ARGV;
d118 2
a119 2
$libperl = "${dbgprefix}libperl$olbsuffix";
$extnames = shift @@ARGV;
d121 1
a121 1
$rtlopt = shift @@ARGV;
d124 1
a124 55
sub scan_var {
  my($line) = @@_;
  my($const) = $line =~ /^EXTCONST/;

  print "\tchecking for global variable\n" if $debug > 1;
  $line =~ s/\s*EXT/EXT/;
  $line =~ s/INIT\s*\(.*\)//;
  $line =~ s/\[.*//;
  $line =~ s/=.*//;
  $line =~ s/\W*;?\s*$//;
  $line =~ s/\W*\)\s*\(.*$//; # closing paren for args stripped in previous stmt
  print "\tfiltered to \\$line\\\n" if $debug > 1;
  if ($line =~ /(\w+)$/) {
    print "\tvar name is \\$1\\" . ($const ? ' (const)' : '') . "\n" if $debug > 1;
   if ($const) { $cvars{$1}++; }
   else        { $vars{$1}++;  }
  }
}

sub scan_func {
  my @@lines = split /;/, @@_[0];

  for my $line (@@lines) {
    print "\tchecking for global routine\n" if $debug > 1;
    $line =~ s/\b(IV|Off_t|Size_t|SSize_t|void|int)\b//i;
    if ( $line =~ /(\w+)\s*\(/ ) {
      print "\troutine name is \\$1\\\n" if $debug > 1;
      if ($1 eq 'main' || $1 eq 'perl_init_ext' || $1 eq '__attribute__format__'
          || $1 eq 'sizeof' || (($1 eq 'Perl_stashpv_hvname_match') && ! $use_threads)) {
        print "\tskipped\n" if $debug > 1;
      }
      else { $fcns{$1}++ }
    }
  }
}

# Go add some right up front if we need 'em
if ($use_mymalloc) {
  $fcns{'Perl_malloc'}++;
  $fcns{'Perl_calloc'}++;
  $fcns{'Perl_realloc'}++;
  $fcns{'Perl_mfree'}++;
}

$used_expectation_enum = $used_opcode_enum = 0; # avoid warnings
if ($docc) {
  1 while unlink 'perlincludes.tmp';
  END { 1 while unlink 'perlincludes.tmp'; }  # and clean up after

  open(PERLINC, '>perlincludes.tmp') or die "Couldn't open 'perlincludes.tmp' $!";

  print PERLINC qq/#include "${dir}perl.h"\n/;
  print PERLINC qq/#include "${dir}perlapi.h"\n/; 
  print PERLINC qq/#include "${dir}perliol.h"\n/ if $use_perlio;
  print PERLINC qq/#include "${dir}regcomp.h"\n/;
d126 1
a126 2
  close PERLINC;
  $preprocess_list = 'perlincludes.tmp';
d128 10
a137 41
  open(CPP,"${cc_cmd}/NoObj/PreProc=Sys\$Output $preprocess_list|")
    or die "$0: Can't preprocess $preprocess_list: $!\n";
}
else {
  open(CPP,"$cpp_file") or die "$0: Can't read preprocessed file $cpp_file: $!\n";
}
%checkh = map { $_,1 } qw( bytecode byterun intrpvar perlapi perlio perliol 
                           perlvars proto regcomp thrdvar thread );
$ckfunc = 0;
LINE: while (<CPP>) {
  while (/^#.*vmsish\.h/i .. /^#.*perl\.h/i) {
    while (/__VMS_PROTOTYPES__/i .. /__VMS_SEPYTOTORP__/i) {
      print "vms_proto>> $_" if $debug > 2;
      if (/^\s*EXT(CONST|\s+)/) { &scan_var($_);  }
      else        { &scan_func($_); }
      last LINE unless defined($_ = <CPP>);
    }
    print "vmsish.h>> $_" if $debug > 2;
    if (/^\s*EXT(CONST|\s+)/) { &scan_var($_); }
    last LINE unless defined($_ = <CPP>);
  }    
  while (/^#.*opcode\.h/i .. /^#.*perl\.h/i) {
    print "opcode.h>> $_" if $debug > 2;
    if (/^OP \*\s/) { &scan_func($_); }
    if (/^\s*EXT(CONST|\s+)/) { &scan_var($_); }
    last LINE unless defined($_ = <CPP>);
  }
  # Check for transition to new header file
  if (/^# \d+ "(\S+)"/) {
    my $spec = $1;
    # Pull name from library module or header filespec
    $spec =~ /^(\w+)$/ or $spec =~ /(\w+)\.h/i;
    my $name = lc $1;
    $ckfunc = exists $checkh{$name} ? 1 : 0;
    $scanname = $name if $ckfunc;
    print "Header file transition: ckfunc = $ckfunc for $name.h\n" if $debug > 1;
  }
  if ($ckfunc) {
    print "$scanname>> $_" if $debug > 2;
    if (/^\s*EXT(CONST|\s+)/) { &scan_var($_);  }
    else           { &scan_func($_); }
d140 1
a140 2
    print $_ if $debug > 3 && ($debug > 5 || length($_));
    if (/^\s*EXT(CONST|\s+)/) { &scan_var($_); }
a142 1
close CPP;
a143 10
while (<DATA>) {
  next if /^#/;
  s/\s+#.*\n//;
  next if /^\s*$/;
  ($key,$array) = split('=',$_);
  if ($array eq 'vars') { $key = "PL_$key";   }
  else                  { $key = "Perl_$key"; }
  print "Adding $key to \%$array list\n" if $debug > 1;
  ${$array}{$key}++;
}
d155 2
a156 2
$marord++;
open(OPTBLD,">${dir}${dbgprefix}perlshr_bld.opt")
d159 1
a159 1
  open(MAR,">${dir}perlshr_gbl${marord}.mar")
d175 2
a176 1
foreach $var (sort (keys %vars,keys %cvars)) {
d185 1
a185 1
      open(MAR,">${dir}perlshr_gbl${marord}.mar")
d196 1
a196 1
foreach $func (sort keys %fcns) {
d209 1
a209 1
open(OPTATTR,">${dir}perlshr_attr.opt")
d212 6
a217 4
  foreach $var (sort keys %cvars) {
    print OPTATTR "PSECT_ATTR=${var},PIC,OVR,RD,NOEXE,NOWRT,SHR\n";
  }
  foreach $var (sort keys %vars) {
d226 2
a227 1
$incstr = 'PERL,GLOBALS';
d230 1
a230 1
  open (DRVR,">$drvrname") or die "$0: Can't write to $drvrname: $!\n";
d261 1
a261 1
    ($ver, $sub) = $] =~ /\.(\d\d\d)(\d\d)/;
d263 1
a263 1
    $gsmatch = ($sub >= 50) ? "equal" : "lequal"; # Force an equal match for
d294 106
a401 3
# Oddball cases, so we can keep the perl.h scan above simple
#Foo=vars    # uncommented becomes PL_Foo
#Bar=funcs   # uncommented becomes Perl_Bar
@


1.8
log
@merge in perl 5.8.8
@
text
@d63 4
d157 1
a157 1
    $line =~ s/\b(IV|Off_t|Size_t|SSize_t|void)\b//i;
a176 6
if ($use_perlio) {
  $preprocess_list = "${dir}perl.h+${dir}perlapi.h,${dir}perliol.h";
} else {
  $preprocess_list = "${dir}perl.h+${dir}perlapi.h";
}

d179 13
d198 2
a199 1
%checkh = map { $_,1 } qw( thread bytecode byterun proto perlapi perlio perlvars intrpvar thrdvar );
d205 1
a205 1
      if (/^\s*EXT/) { &scan_var($_);  }
d210 1
a210 1
    if (/^\s*EXT/) { &scan_var($_); }
d216 1
a216 1
    if (/^\s*EXT/) { &scan_var($_); }
a224 1
    $name = 'perlio' if $name eq 'perliol';
d231 1
a231 1
    if (/^\s*EXT/) { &scan_var($_);  }
d236 1
a236 1
    if (/^\s*EXT/) { &scan_var($_); }
d272 8
a279 2
  print OPTBLD "PSECT_ATTR=\$GLOBAL_RO_VARS,PIC,NOEXE,RD,NOWRT,SHR\n";
  print OPTBLD "PSECT_ATTR=\$GLOBAL_RW_VARS,PIC,NOEXE,RD,WRT,NOSHR\n";
d400 2
a401 3
regkind=vars    # declared in regcomp.h
simple=vars     # declared in regcomp.h
varies=vars     # declared in regcomp.h
@


1.7
log
@merge local changes into perl-5.8.3
@
text
@d149 1
a149 1
  my($line) = @@_;
d151 10
a160 6
  print "\tchecking for global routine\n" if $debug > 1;
  $line =~ s/\b(IV|Off_t|Size_t|SSize_t|void)\b//i;
  if ( $line =~ /(\w+)\s*\(/ ) {
    print "\troutine name is \\$1\\\n" if $debug > 1;
    if ($1 eq 'main' || $1 eq 'perl_init_ext') {
      print "\tskipped\n" if $debug > 1;
a161 1
    else { $fcns{$1}++ }
d187 1
a187 1
%checkh = map { $_,1 } qw( thread bytecode byterun proto perlio perlvars intrpvar thrdvar );
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d42 1
a42 1
print "gen_shrfls.pl Rev. 18-May-2001\n" if $debug;
d59 2
a60 1
$isvax = `\$ Write Sys\$Output F\$GetSyI(\"HW_MODEL\")` <= 1024;
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d42 1
a42 1
print "gen_shrfls.pl Rev. 14-Dec-1997\n" if $debug;
d72 1
a72 1
  $hide_mymalloc = $isgcc = 0;
d78 5
a82 5
    $use_threads++ if /usethreads='define'/;
    $use_mymalloc++ if /usemymalloc='Y'/;
    $care_about_case++ if /d_vms_case_sensitive_symbols='define'/;
    $debugging_enabled++ if /usedebugging_perl='Y'/;
    $hide_mymalloc++ if /embedmymalloc='Y'/;
d84 1
d151 1
d169 6
d177 2
a178 2
  open(CPP,"${cc_cmd}/NoObj/PreProc=Sys\$Output ${dir}perl.h|")
    or die "$0: Can't preprocess ${dir}perl.h: $!\n";
d183 1
a183 1
%checkh = map { $_,1 } qw( thread bytecode byterun proto );
d209 1
d216 1
a216 1
    if (/\s*^EXT/) { &scan_var($_);  }
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d71 5
a75 2
  # Go see if debugging is enabled in config.h
  $config = $dir . "config.h";
d78 6
a83 5
    $debugging_enabled++ if /define\s+DEBUGGING/;
    $use_mymalloc++ if /define\s+MYMALLOC/;
    $hide_mymalloc++ if /define\s+EMBEDMYMALLOC/;
    $use_threads++ if /define\s+USE_THREADS/;
    $care_about_case++ if /define\s+VMS_WE_ARE_CASE_SENSITIVE/;
d85 1
d100 1
a100 2
  $isgcc = `$cc_cmd _nla0:/Version` =~ /GNU/
           or 0; # make debug output nice
d335 1
@


1.3
log
@perl5.005_03 (stock)
@
text
@d36 1
a36 1
# Author: Charles Bailey  bailey@@genetics.upenn.edu
d76 1
d78 2
a79 1
    $use_mymalloc++ if /define\s+MYMALLOC/;
a94 1
  $isvaxc = 0;
a96 4
  $isvaxc = (!$isgcc && $isvax &&
             # Check exit status too, in case message is shut off
             (`$cc_cmd /prefix=all _nla0:` =~ /IVQUAL/ || $? == 0x38240))
            or 0; # again, make debug output nice
a97 1
  print "\$isvaxc: $isvaxc\n" if $debug;
a104 2
  $isvaxc = (!$isgcc && $cc_cmd !~ /standard=/i)
            or 0;  # again, for nice debug output
a106 1
  print "\$isvaxc: \\$isvaxc\\\n" if $debug;
a122 27
# This part gets tricky.  VAXC creates global symbols for each of the
# constants in an enum if that enum is ever used as the data type of a
# global[dr]ef.  We have to detect enums which are used in this way, so we
# can set up the constants as universal symbols, since anything which
# #includes perl.h will want to resolve these global symbols.
# We're using a weak test here - we basically know that the only enums
# we need to handle now are the big one in opcode.h, and the
# "typedef enum { ... } expectation" in perl.h, so we hard code
# appropriate tests below. Since we can't know in general whether a given
# enum will be used elsewhere in a globaldef, it's hard to decide a
# priori whether its constants need to be treated as global symbols.
sub scan_enum {
  my($line) = @@_;

  return unless $isvaxc;

  return unless /^\s+(OP|X)/;  # we only want opcode and expectation enums
  print "\tchecking for enum constant\n" if $debug > 1;
  $line =~ s#/\*.+##;
  $line =~ s/,?\s*\n?$//;
  print "\tfiltered to \\$line\\\n" if $debug > 1;
  if ($line =~ /(\w+)$/) {
    print "\tconstant name is \\$1\\\n" if $debug > 1;
    $enums{$1}++;
  }
}

a139 12
  if ($isvaxc) {
    my($type) = $line =~ /^\s*EXT\w*\s+(\w+)/;
    print "\tchecking for use of enum (type is \"$type\")\n" if $debug > 2;
    if ($type eq 'expectation') {
      $used_expectation_enum++;
      print "\tsaw global use of enum \"expectation\"\n" if $debug > 1;
    }
    if ($type eq 'opcode') {
      $used_opcode_enum++;
      print "\tsaw global use of enum \"opcode\"\n" if $debug > 1;
    }
  }
d146 1
a146 1
  if ( $line =~ /(\w+)\s+\(/ ) {
d160 1
a160 1
  $fcns{'Perl_myfree'}++;
a188 6
    if (/^\s+OP_/) { &scan_enum($_); }
    last LINE unless defined($_ = <CPP>);
  }
  while (/^typedef enum/ .. /^\s*\}/) {
    print "global enum>> $_" if $debug > 2;
    &scan_enum($_);
a212 6

# Kluge to determine whether we need to add EMBED prefix to
# symbols read from local list.  vmsreaddirversions() is a VMS-
# specific function whose Perl_ prefix is added in vmsish.h
# if EMBED is #defined.
$embed = exists($fcns{'Perl_vmsreaddirversions'}) ? 'Perl_' : '';
d218 2
a219 1
  $key = "$embed$key";
a230 24
# If we're using VAXC, fold in the names of the constants for enums
# we've seen as the type of global vars.
if ($isvaxc) {
  foreach (keys %enums) {
    if (/^OP/) {
      $vars{$_}++ if $used_opcode_enum;
      next;
    }
    if (/^X/) {
      $vars{$_}++ if $used_expectation_enum;
      next;
    }
    print STDERR "Unrecognized enum constant \"$_\" ignored\n";
  }
}
elsif ($isgcc) {
  # gcc creates this as a SHR,WRT psect in globals.c, but we
  # don't see it in the perl.h scan, since it's only declared
  # if DOINIT is #defined.  Bleah.  It's cheaper to just add
  # it by hand than to add /Define=DOINIT to the preprocessing
  # run and wade through all the extra junk.
  $vars{"${embed}Error"}++;
}

d242 1
d247 1
d283 1
a283 4
if ($isvaxc) {
  print OPTATTR "PSECT_ATTR=\$CHAR_STRING_CONSTANTS,PIC,SHR,NOEXE,RD,NOWRT\n";
}
elsif ($isgcc) {
d296 1
a296 1
$incstr = 'perl,globals';
d326 20
a345 3
  my $major = int($] * 1000)                        & 0xFF;  # range 0..255
  my $minor = int(($] * 1000 - $major) * 100 + 0.5) & 0xFF;  # range 0..255
  print OPTBLD "GSMATCH=LEQUAL,$major,$minor\n";
a367 19
watchaddr=vars  # declared in run.c
watchok=vars    # declared in run.c
yychar=vars     # generated by byacc in perly.c
yycheck=vars    # generated by byacc in perly.c
yydebug=vars    # generated by byacc in perly.c
yydefred=vars   # generated by byacc in perly.c
yydgoto=vars    # generated by byacc in perly.c
yyerrflag=vars  # generated by byacc in perly.c
yygindex=vars   # generated by byacc in perly.c
yylen=vars      # generated by byacc in perly.c
yylhs=vars      # generated by byacc in perly.c
yylval=vars     # generated by byacc in perly.c
yyname=vars     # generated by byacc in perly.c
yynerrs=vars    # generated by byacc in perly.c
yyrindex=vars   # generated by byacc in perly.c
yyrule=vars     # generated by byacc in perly.c
yysindex=vars   # generated by byacc in perly.c
yytable=vars    # generated by byacc in perly.c
yyval=vars      # generated by byacc in perly.c
@


1.2
log
@perl 5.004_04
@
text
@d42 1
a42 1
print "gen_shrfls.pl Rev. 14-Dec-1996\n" if $debug;
d67 13
d84 1
d102 1
a103 3
  if (-f 'perl.h') { $dir = '[]'; }
  elsif (-f '[-]perl.h') { $dir = '[-]'; }
  else { die "$0: Can't find perl.h\n"; }
d111 1
d114 1
d167 1
d201 8
d217 2
d225 1
a225 1
      last LINE unless $_ = <CPP>;
d229 1
a229 1
    last LINE unless $_ = <CPP>;
d236 1
a236 1
    last LINE unless $_ = <CPP>;
d238 1
a238 1
  while (/^typedef enum/ .. /^\}/) {
d241 11
a251 1
    last LINE unless $_ = <CPP>;
d253 2
a254 2
  while (/^#.*proto\.h/i .. /^#.*perl\.h/i) {
    print "proto.h>> $_" if $debug > 2;
d256 5
a260 2
    else        { &scan_func($_); }
    last LINE unless $_ = <CPP>;
a261 2
  print $_ if $debug > 3 && ($debug > 5 || length($_));
  if (/^\s*EXT/) { &scan_var($_); }
d280 1
d411 2
a412 3
  foreach (@@symfiles) {
    print OPTBLD "CLUSTER=\$\$TRANSFER_VECTOR,,,$_.$objsuffix\n";
  }
a429 3
rcsid=vars      # declared in perl.c
regarglen=vars  # declared in regcomp.h
regdummy=vars   # declared in regcomp.h
@


1.1
log
@Initial revision
@
text
@a36 1
# Revised: 20-Feb-1996
d42 2
d82 3
a84 1
  $isvaxc = (!$isgcc && $isvax && `$cc_cmd /prefix=all _nla0:` =~ /IVQUAL/)
d145 1
d148 2
a149 1
  $line =~ s/INIT\(.*\)//;
d155 15
a169 2
    print "\tvar name is \\$1\\\n" if $debug > 1;
   $vars{$1}++;
d198 1
a198 1
      if (/^EXT/) { &scan_var($_);  }
d203 1
a203 1
    if (/^EXT/) { &scan_var($_); }
d209 1
a209 1
    if (/^EXT/) { &scan_var($_); }
d220 1
a220 1
    if (/^EXT/) { &scan_var($_);  }
d224 2
a225 14
  print $_ if $debug > 3;
  if (($type) = /^EXT\s+(\w+)/) {
    if ($isvaxc) {
      if ($type eq 'expectation') {
        $used_expectation_enum++;
        print "\tsaw global use of enum \"expectation\"\n" if $debug > 1;
      }
      if ($type eq 'opcode') {
        $used_opcode_enum++;
        print "\tsaw global use of enum \"opcode\"\n" if $debug > 1;
      }
    }
    &scan_var($_);
  }
d231 1
a231 1
# symbols read from local list.  init_os_extras() is a VMS-
d234 1
a234 1
$embed = exists($fcns{'Perl_init_os_extras'}) ? 'Perl_' : '';
d266 8
d286 5
a290 1
foreach $var (sort keys %vars) {
d325 13
a337 3
print OPTATTR "PSECT_ATTR=\$CHAR_STRING_CONSTANTS,PIC,SHR,NOEXE,RD,NOWRT\n";
foreach $var (sort keys %vars) {
  print OPTATTR "PSECT_ATTR=${var},PIC,OVR,RD,NOEXE,WRT,NOSHR\n";
d353 1
a353 1
    $incstr .= ",perlshr_gbl$marord";
d368 11
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d37 1
a42 2
print "gen_shrfls.pl Rev. 14-Dec-1997\n" if $debug;

a65 13
  if (-f 'perl.h') { $dir = '[]'; }
  elsif (-f '[-]perl.h') { $dir = '[-]'; }
  else { die "$0: Can't find perl.h\n"; }

  # Go see if debugging is enabled in config.h
  $config = $dir . "config.h";
  open CONFIG, "< $config";
  while(<CONFIG>) {
    $debugging_enabled++ if /define\s+DEBUGGING/;
    $hide_mymalloc++ if /define\s+EMBEDMYMALLOC/;
    $use_mymalloc++ if /define\s+MYMALLOC/;
  }
  
a69 1
    $debugging_enabled ||= $defines =~ /\bDEBUGGING\b/;
d81 1
a81 3
  $isvaxc = (!$isgcc && $isvax &&
             # Check exit status too, in case message is shut off
             (`$cc_cmd /prefix=all _nla0:` =~ /IVQUAL/ || $? == 0x38240))
a84 1
  print "\$debugging_enabled: $debugging_enabled\n" if $debug;
d86 3
a95 1
  $debugging_enabled = $cc_cmd =~ /\bdebugging\b/i;
a97 1
  print "\$debugging_enabled: \\$debugging_enabled\\\n" if $debug;
a141 1
  my($const) = $line =~ /^EXTCONST/;
d144 1
a144 2
  $line =~ s/\s*EXT/EXT/;
  $line =~ s/INIT\s*\(.*\)//;
a147 1
  $line =~ s/\W*\)\s*\(.*$//; # closing paren for args stripped in previous stmt
d150 2
a151 15
    print "\tvar name is \\$1\\" . ($const ? ' (const)' : '') . "\n" if $debug > 1;
   if ($const) { $cvars{$1}++; }
   else        { $vars{$1}++;  }
  }
  if ($isvaxc) {
    my($type) = $line =~ /^\s*EXT\w*\s+(\w+)/;
    print "\tchecking for use of enum (type is \"$type\")\n" if $debug > 2;
    if ($type eq 'expectation') {
      $used_expectation_enum++;
      print "\tsaw global use of enum \"expectation\"\n" if $debug > 1;
    }
    if ($type eq 'opcode') {
      $used_opcode_enum++;
      print "\tsaw global use of enum \"opcode\"\n" if $debug > 1;
    }
a167 8
# Go add some right up front if we need 'em
if ($use_mymalloc) {
  $fcns{'Perl_malloc'}++;
  $fcns{'Perl_calloc'}++;
  $fcns{'Perl_realloc'}++;
  $fcns{'Perl_myfree'}++;
}

a175 2
%checkh = map { $_,1 } qw( thread bytecode byterun proto );
$ckfunc = 0;
d180 1
a180 1
      if (/^\s*EXT/) { &scan_var($_);  }
d182 1
a182 1
      last LINE unless defined($_ = <CPP>);
d185 2
a186 2
    if (/^\s*EXT/) { &scan_var($_); }
    last LINE unless defined($_ = <CPP>);
d191 1
a191 1
    if (/^\s*EXT/) { &scan_var($_); }
d193 1
a193 1
    last LINE unless defined($_ = <CPP>);
d195 1
a195 1
  while (/^typedef enum/ .. /^\s*\}/) {
d198 1
a198 1
    last LINE unless defined($_ = <CPP>);
d200 19
a218 18
  # Check for transition to new header file
  if (/^# \d+ "(\S+)"/) {
    my $spec = $1;
    # Pull name from library module or header filespec
    $spec =~ /^(\w+)$/ or $spec =~ /(\w+)\.h/i;
    my $name = lc $1;
    $ckfunc = exists $checkh{$name} ? 1 : 0;
    $scanname = $name if $ckfunc;
    print "Header file transition: ckfunc = $ckfunc for $name.h\n" if $debug > 1;
  }
  if ($ckfunc) {
    print "$scanname>> $_" if $debug > 2;
    if (/\s*^EXT/) { &scan_var($_);  }
    else           { &scan_func($_); }
  }
  else {
    print $_ if $debug > 3 && ($debug > 5 || length($_));
    if (/^\s*EXT/) { &scan_var($_); }
d225 1
a225 1
# symbols read from local list.  vmsreaddirversions() is a VMS-
d228 1
a228 1
$embed = exists($fcns{'Perl_vmsreaddirversions'}) ? 'Perl_' : '';
a237 1
if ($debugging_enabled and $isgcc) { $vars{'colors'}++ }
a259 8
elsif ($isgcc) {
  # gcc creates this as a SHR,WRT psect in globals.c, but we
  # don't see it in the perl.h scan, since it's only declared
  # if DOINIT is #defined.  Bleah.  It's cheaper to just add
  # it by hand than to add /Define=DOINIT to the preprocessing
  # run and wade through all the extra junk.
  $vars{"${embed}Error"}++;
}
d272 1
a272 5
unless ($isgcc) {
  print OPTBLD "PSECT_ATTR=\$GLOBAL_RO_VARS,PIC,NOEXE,RD,NOWRT,SHR\n";
  print OPTBLD "PSECT_ATTR=\$GLOBAL_RW_VARS,PIC,NOEXE,RD,WRT,NOSHR\n";
}
foreach $var (sort (keys %vars,keys %cvars)) {
d307 3
a309 13
if ($isvaxc) {
  print OPTATTR "PSECT_ATTR=\$CHAR_STRING_CONSTANTS,PIC,SHR,NOEXE,RD,NOWRT\n";
}
elsif ($isgcc) {
  foreach $var (sort keys %cvars) {
    print OPTATTR "PSECT_ATTR=${var},PIC,OVR,RD,NOEXE,NOWRT,SHR\n";
  }
  foreach $var (sort keys %vars) {
    print OPTATTR "PSECT_ATTR=${var},PIC,OVR,RD,NOEXE,WRT,NOSHR\n";
  }
}
else {
  print OPTATTR "! No additional linker directives are needed when using DECC\n";
d325 1
a325 1
    push(@@symfiles,"perlshr_gbl$marord");
a339 10
# Initial hack to permit building of compatible shareable images for a
# given version of Perl.
if ($ENV{PERLSHR_USE_GSMATCH}) {
  my $major = int($] * 1000)                        & 0xFF;  # range 0..255
  my $minor = int(($] * 1000 - $major) * 100 + 0.5) & 0xFF;  # range 0..255
  print OPTBLD "GSMATCH=LEQUAL,$major,$minor\n";
  print OPTBLD 'CLUSTER=$$TRANSFER_VECTOR,,',
               map(",$_$objsuffix",@@symfiles), "\n";
}
elsif (@@symfiles) { $incstr .= ',' . join(',',@@symfiles); }
d355 3
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d36 1
a36 1
# Author: Charles Bailey  bailey@@newman.upenn.edu
d76 1
a77 3
    $hide_mymalloc++ if /define\s+EMBEDMYMALLOC/;
    $use_threads++ if /define\s+USE_THREADS/;
    $care_about_case++ if /define\s+VMS_WE_ARE_CASE_SENSITIVE/;
d93 1
d96 4
d101 1
d109 2
d113 1
d130 27
d174 12
d192 1
a192 1
  if ( $line =~ /(\w+)\s*\(/ ) {
d206 1
a206 1
  $fcns{'Perl_mfree'}++;
d235 6
d265 6
d276 1
a276 2
  if ($array eq 'vars') { $key = "PL_$key";   }
  else                  { $key = "Perl_$key"; }
d288 24
a322 1

a326 1
print OPTBLD "case_sensitive=yes\n" if $care_about_case;
d362 4
a365 1
if ($isgcc) {
d378 1
a378 1
$incstr = 'PERL,GLOBALS';
d408 3
a410 20
  if ($ENV{PERLSHR_USE_GSMATCH} eq 'INCLUDE_COMPILE_OPTIONS') {
    # Build up a major ID. Since it can only be 8 bits, we encode the version
    # number in the top four bits and use the bottom four for build options
    # that'll cause incompatibilities
    ($ver, $sub) = $] =~ /\.(\d\d\d)(\d\d)/;
    $gsmatch = ($sub >= 50) ? "equal" : "lequal"; # Force an equal match for
						  # dev, but be more forgiving
						  # for releases

    $ver *=16;
    $ver += 8 if $debugging_enabled;	# If DEBUGGING is set
    $ver += 4 if $use_threads;		# if we're threaded
    $ver += 2 if $use_mymalloc;		# if we're using perl's malloc
    print OPTBLD "GSMATCH=$gsmatch,$ver,$sub\n";
  }
  else {
    my $major = int($] * 1000)                        & 0xFF;  # range 0..255
    my $minor = int(($] * 1000 - $major) * 100 + 0.5) & 0xFF;  # range 0..255
    print OPTBLD "GSMATCH=LEQUAL,$major,$minor\n";
  }
d433 19
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d71 2
a72 5
  $use_threads = $use_mymalloc = $case_about_case = $debugging_enabled = 0;
  $hide_mymalloc = $isgcc = 0;

  # Go see what is enabled in config.sh
  $config = $dir . "config.sh";
d75 5
a79 6
    $use_threads++ if /usethreads='define'/;
    $use_mymalloc++ if /usemymalloc='Y'/;
    $care_about_case++ if /d_vms_case_sensitive_symbols='define'/;
    $debugging_enabled++ if /usedebugging_perl='Y'/;
    $hide_mymalloc++ if /embedmymalloc='Y'/;
    $isgcc++ if /gccversion='[^']/;
a80 1
  close CONFIG;
d95 2
a96 1

a330 1
    $ver += 0; $sub += 0;
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d42 1
a42 1
print "gen_shrfls.pl Rev. 18-May-2001\n" if $debug;
d72 1
a72 1
  $hide_mymalloc = $isgcc = $use_perlio = 0;
d78 5
a82 5
    $use_threads++ if /usethreads='(define|yes|true|t|y|1)'/i;
    $use_mymalloc++ if /usemymalloc='(define|yes|true|t|y|1)'/i;
    $care_about_case++ if /d_vms_case_sensitive_symbols='(define|yes|true|t|y|1)'/i;
    $debugging_enabled++ if /usedebugging_perl='(define|yes|true|t|y|1)'/i;
    $hide_mymalloc++ if /embedmymalloc='(define|yes|true|t|y|1)'/i;
a83 1
    $use_perlio++ if /useperlio='(define|yes|true|t|y|1)'/i;
a149 1
  $line =~ s/\b(IV|Off_t|Size_t|SSize_t|void)\b//i;
a166 6
if ($use_perlio) {
  $preprocess_list = "${dir}perl.h+${dir}perlapi.h,${dir}perliol.h";
} else {
  $preprocess_list = "${dir}perl.h+${dir}perlapi.h";
}

d169 2
a170 2
  open(CPP,"${cc_cmd}/NoObj/PreProc=Sys\$Output $preprocess_list|")
    or die "$0: Can't preprocess $preprocess_list: $!\n";
d175 1
a175 1
%checkh = map { $_,1 } qw( thread bytecode byterun proto perlio perlvars intrpvar thrdvar );
a200 1
    $name = 'perlio' if $name eq 'perliol';
d207 1
a207 1
    if (/^\s*EXT/) { &scan_var($_);  }
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d42 1
a42 1
print "gen_shrfls.pl Rev. 18-Dec-2003\n" if $debug;
d59 1
a59 2
$isvax = `\$ Write Sys\$Output \(F\$GetSyI(\"HW_MODEL\") .LE. 1024 .AND. F\$GetSyI(\"HW_MODEL\") .GT. 0\)`;
chomp $isvax;
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d149 1
a149 1
  my @@lines = split /;/, @@_[0];
d151 6
a156 10
  for my $line (@@lines) {
    print "\tchecking for global routine\n" if $debug > 1;
    $line =~ s/\b(IV|Off_t|Size_t|SSize_t|void)\b//i;
    if ( $line =~ /(\w+)\s*\(/ ) {
      print "\troutine name is \\$1\\\n" if $debug > 1;
      if ($1 eq 'main' || $1 eq 'perl_init_ext' || $1 eq '__attribute__format__'
          || $1 eq 'sizeof' || (($1 eq 'Perl_stashpv_hvname_match') && ! $use_threads)) {
        print "\tskipped\n" if $debug > 1;
      }
      else { $fcns{$1}++ }
d158 1
d184 1
a184 1
%checkh = map { $_,1 } qw( thread bytecode byterun proto perlapi perlio perlvars intrpvar thrdvar );
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@a62 4
$isi64 = `\$ Write Sys\$Output \(F\$GetSyI(\"HW_MODEL\") .GE. 4096)`;
chomp $isi64;
print "\$isi64: \\$isi64\\\n" if $debug;

d153 1
a153 1
    $line =~ s/\b(IV|Off_t|Size_t|SSize_t|void|int)\b//i;
d173 6
a180 13
  1 while unlink 'perlincludes.tmp';
  END { 1 while unlink 'perlincludes.tmp'; }  # and clean up after

  open(PERLINC, '>perlincludes.tmp') or die "Couldn't open 'perlincludes.tmp' $!";

  print PERLINC qq/#include "${dir}perl.h"\n/;
  print PERLINC qq/#include "${dir}perlapi.h"\n/; 
  print PERLINC qq/#include "${dir}perliol.h"\n/ if $use_perlio;
  print PERLINC qq/#include "${dir}regcomp.h"\n/;

  close PERLINC;
  $preprocess_list = 'perlincludes.tmp';

d187 1
a187 2
%checkh = map { $_,1 } qw( bytecode byterun intrpvar perlapi perlio perliol 
                           perlvars proto regcomp thrdvar thread );
d193 1
a193 1
      if (/^\s*EXT(CONST|\s+)/) { &scan_var($_);  }
d198 1
a198 1
    if (/^\s*EXT(CONST|\s+)/) { &scan_var($_); }
d204 1
a204 1
    if (/^\s*EXT(CONST|\s+)/) { &scan_var($_); }
d213 1
d220 1
a220 1
    if (/^\s*EXT(CONST|\s+)/) { &scan_var($_);  }
d225 1
a225 1
    if (/^\s*EXT(CONST|\s+)/) { &scan_var($_); }
d261 2
a262 8
  if ($isi64) {
    print OPTBLD "PSECT_ATTR=\$GLOBAL_RO_VARS,NOEXE,RD,NOWRT,SHR\n";
    print OPTBLD "PSECT_ATTR=\$GLOBAL_RW_VARS,NOEXE,RD,WRT,NOSHR\n";
  }
  else {
    print OPTBLD "PSECT_ATTR=\$GLOBAL_RO_VARS,PIC,NOEXE,RD,NOWRT,SHR\n";
    print OPTBLD "PSECT_ATTR=\$GLOBAL_RW_VARS,PIC,NOEXE,RD,WRT,NOSHR\n";
  }
d383 3
a385 2
#Foo=vars    # uncommented becomes PL_Foo
#Bar=funcs   # uncommented becomes Perl_Bar
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a3 2
# Processes the output of makedef.pl.
#
d5 3
a7 1
#    $cc_cmd - compiler command
d16 1
a16 1
#    PerlShr_Attr.Opt - linker options file which specifies that global vars
a37 1
use strict;
d40 1
a40 1
my $debug = $ENV{'GEN_SHRFLS_DEBUG'};
d42 1
a42 1
print "gen_shrfls.pl Rev. 8-Jul-2011\n" if $debug;
d56 1
a56 1
my $cc_cmd = shift @@ARGV; # no longer used to run the preprocessor
d59 1
a59 1
my $isvax = `\$ Write Sys\$Output \(F\$GetSyI(\"HW_MODEL\") .LE. 1024 .AND. F\$GetSyI(\"HW_MODEL\") .GT. 0\)`;
d63 1
a63 1
my $isi64 = `\$ Write Sys\$Output \(F\$GetSyI(\"HW_MODEL\") .GE. 4096)`;
d68 1
a68 1
my $docc = ($cc_cmd !~ /^~~/);
d71 12
a82 12
my ( $use_threads, $use_mymalloc, $care_about_case, $shorten_symbols,
     $debugging_enabled, $hide_mymalloc, $isgcc, $use_perlio, $dir )
   = ( 0, 0, 0, 0, 0, 0, 0, 0 );

if (-f 'perl.h') { $dir = '[]'; }
elsif (-f '[-]perl.h') { $dir = '[-]'; }
else { die "$0: Can't find perl.h\n"; }

# Go see what is enabled in config.sh
my $config = $dir . "config.sh";
open CONFIG, '<', $config;
while(<CONFIG>) {
a85 1
    $shorten_symbols++ if /d_vms_shorten_long_symbols='(define|yes|true|t|y|1)'/i;
d90 2
a91 2
}
close CONFIG;
d93 2
a94 2
# put quotes back onto defines - they were removed by DCL on the way in
if (my ($prefix,$defines,$suffix) =
d96 4
a99 4
  $defines =~ s/^\((.*)\)$/$1/;
  $debugging_enabled ||= $defines =~ /\bDEBUGGING\b/;
  my @@defines = split(/,/,$defines);
  $cc_cmd = "$prefix/Define=(" . join(',',grep($_ = "\"$_\"",@@defines)) 
d101 5
a105 2
}
print "Filtered \$cc_cmd: \\$cc_cmd\\\n" if $debug;
d107 2
a108 2
# check for gcc - if present, we'll need to use MACRO hack to
# define global symbols for shared variables
d110 10
a119 2
print "\$isgcc: $isgcc\n" if $debug;
print "\$debugging_enabled: $debugging_enabled\n" if $debug;
d121 1
a121 1
my $objsuffix = shift @@ARGV;
d123 1
a123 1
my $dbgprefix = shift @@ARGV;
d125 1
a125 1
my $olbsuffix = shift @@ARGV;
d127 2
a128 2
my $libperl = "${dbgprefix}libperl$olbsuffix";
my $extnames = shift @@ARGV;
d130 1
a130 1
my $rtlopt = shift @@ARGV;
d133 55
a187 1
my (%vars, %fcns);
d189 2
a190 1
open my $makedefs, '<', $dir . 'makedef.lis' or die "Unable to open makedef.lis: $!";
d192 41
a232 10
while (my $line = <$makedefs>) {
  chomp $line;
  $line = shorten_symbol($line, $care_about_case) if $shorten_symbols;
  # makedef.pl loses distinction between vars and funcs, so
  # use the start of the name to guess and add specific
  # exceptions when we know about them.
  if ($line =~ m/^PL_/
      || $line eq 'PerlIO_perlio'
      || $line eq 'PerlIO_pending') {
    $vars{$line}++;
d235 2
a236 1
    $fcns{$line}++;
d239 1
d241 10
d262 2
a263 2
my $marord = 1;
open(OPTBLD,'>', "${dir}${dbgprefix}perlshr_bld.opt")
d266 1
a266 1
  open(MAR, '>', "${dir}perlshr_gbl${marord}.mar")
d282 1
a282 2
my $count = 0;
foreach my $var (sort (keys %vars)) {
d291 1
a291 1
      open(MAR, '>', "${dir}perlshr_gbl${marord}.mar")
d302 1
a302 1
foreach my $func (sort keys %fcns) {
d315 1
a315 1
open(OPTATTR, '>', "${dir}perlshr_attr.opt")
d318 4
a321 6
# TODO -- lost ability to distinguish constant vars from others when
# we switched to using makedef.pl for input.
#  foreach my $var (sort keys %cvars) {
#    print OPTATTR "PSECT_ATTR=${var},PIC,OVR,RD,NOEXE,NOWRT,SHR\n";
#  }
  foreach my $var (sort keys %vars) {
d330 1
a330 2
my $incstr = 'PERL,GLOBALS';
my (@@symfiles, $drvrname);
d333 1
a333 1
  open (DRVR,'>', $drvrname) or die "$0: Can't write to $drvrname: $!\n";
d364 1
a364 1
    my ($ver, $sub) = $] =~ /\.(\d\d\d)(\d\d)/;
d366 1
a366 1
    my $gsmatch = ($sub >= 50) ? "equal" : "lequal"; # Force an equal match for
a396 106
# Symbol shortening Copyright (c) 2012 Craig A. Berry
#
# Released under the same terms as Perl itself.
#
# This code provides shortening of long symbols (> 31 characters) using the
# same mechanism as the OpenVMS C compiler.  The basic procedure is to compute
# an AUTODIN II checksum of the entire symbol, encode the checksum in base32,
# and glue together a shortened symbol from the first 23 characters of the
# original symbol plus the encoded checksum appended.  The output format is
# the same used in the name mangler database, stored by default in
# [.CXX_REPOSITORY]CXX$DEMANGLER_DB.

sub crc32 {
    use constant autodin_ii_table => [
        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
        0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
        0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
        0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
        0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
        0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,
        0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
        0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
        0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,
        0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
        0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
        0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
        0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
        0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
        0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
        0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
        0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
        0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
        0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
        0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
        0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
        0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
        0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
        0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
        0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
        0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
        0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
        0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
        0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
        0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
        0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
        0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
        0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,
    ];

    my $input_string = shift;
    my $crc = 0xFFFFFFFF;

    for my $byte (unpack 'C*', $input_string) {
        $crc = ($crc >> 8) ^ autodin_ii_table->[($crc ^ $byte) & 0xff];
    }
    return ~$crc;
}

sub base32 {
    my $input = shift;
    my $output = '';
    use constant base32hex_table => [
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v'
    ];

    # Grab lowest 5 bits and look up conversion in table.  Lather, rinse,
    # repeat for a total of 7, 5-bit chunks to accommodate 32 bits of input.

    for (0..6) {
        $output  = base32hex_table->[$input & 0x1f] . $output;
        $input >>= 5;     # position to look at next 5
    }
    $output .= '$';       #  It's DEC, so use '$' not '=' to pad.

    return $output;
}

sub shorten_symbol {
    my $input_symbol = shift;
    my $as_is_flag = shift;
    my $symbol = $input_symbol;

    return $symbol unless length($input_symbol) > 31;

    $symbol = uc($symbol) unless $as_is_flag;
    my $crc = crc32($symbol);
    $crc = ~$crc;  # Compiler uses non-inverted form.
    my $b32 = base32($crc);
    $b32 = uc($b32) unless $as_is_flag;

    return substr($symbol, 0, 23) . $b32;
}

d399 3
@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d134 1
a134 1
  if ($line =~ m/^(PL_|MallocCfg)/
a172 1
  print OPTBLD "PSECT_ATTR=LIB\$INITIALIZE,GBL,NOEXE,NOWRT,NOSHR,LONG\n";
d258 4
a261 4
    # Build up a major ID. Since on Alpha it can only be 8 bits, we encode
    # the version number in the top 5 bits and use the bottom 3 for build
    # options most likely to cause incompatibilities.  Breaks at Perl 5.32.
    my ($ver, $sub) = $] =~ /\.(\d\d\d)(\d\d\d)/;
d263 1
a263 1
    my $gsmatch = ($ver % 2 == 1) ? "EQUAL" : "LEQUAL"; # Force an equal match for
d267 4
a270 4
    $ver <<= 3;
    $ver += 1 if $debugging_enabled;	# If DEBUGGING is set
    $ver += 2 if $use_threads;		# if we're threaded
    $ver += 4 if $use_mymalloc;		# if we're using perl's malloc
d279 1
a279 1
               map(",$_$objsuffix",@@symfiles), "\n" if $isvax;
@


