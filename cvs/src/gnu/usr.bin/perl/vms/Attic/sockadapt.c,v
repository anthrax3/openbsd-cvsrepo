head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.42
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.40
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2013.03.25.20.41.00;	author sthen;	state dead;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.06.18;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.29;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.29;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.42.03;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.11.00;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.12;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@/*  sockadapt.c
 *
 *  Author: Charles Bailey  bailey@@newman.upenn.edu
 *  Last Revised:  4-Mar-1997
 *
 *  This file should contain stubs for any of the TCP/IP functions perl5
 *  requires which are not supported by your TCP/IP stack.  These stubs
 *  can attempt to emulate the routine in question, or can just return
 *  an error status or cause perl to die.
 *
 *  This version is set up for perl5 with UCX (or emulation) via
 *  the DECCRTL or SOCKETSHR 0.9D.
 */

#include "EXTERN.h"
#include "perl.h"

#if defined(__DECC) && defined(__DECC_VER) && (__DECC_VER >= 50200000)
#  define __sockadapt_my_hostent_t __struct_hostent_ptr32
#  define __sockadapt_my_netent_t __struct_netent_ptr32
#  define __sockadapt_my_servent_t __struct_servent_ptr32
#  define __sockadapt_my_addr_t   __in_addr_t
#  define __sockadapt_my_name_t   const char *
#else
#  define __sockadapt_my_hostent_t struct hostent *
#  define __sockadapt_my_netent_t struct netent *
#  define __sockadapt_my_servent_t struct servent *
#  define __sockadapt_my_addr_t   long
#  define __sockadapt_my_name_t   char *
#endif

/* We have these on VMS 7.0 and above, or on Dec C 5.6 if it's providing */
/* the 7.0 DECC RTL */
#if ((((__VMS_VER >= 70000000) && (__DECC_VER >= 50200000)) || (__CRTL_VER >= 70000000)) && defined(DECCRTL_SOCKETS))
#else
void setnetent(int stayopen) {
  dTHX;
  Perl_croak(aTHX_ "Function \"setnetent\" not implemented in this version of perl");
}
void endnetent() {
  dTHX;
  Perl_croak(aTHX_ "Function \"endnetent\" not implemented in this version of perl");
}
#endif

#if defined(DECCRTL_SOCKETS)
   /* Use builtin socket interface in DECCRTL and
    * UCX emulation in whatever TCP/IP stack is present.
    */

#if ((__VMS_VER >= 70000000) && (__DECC_VER >= 50200000)) || (__CRTL_VER >= 70000000)
#else
  void sethostent(int stayopen) {
    dTHX;
    Perl_croak(aTHX_ "Function \"sethostent\" not implemented in this version of perl");
  }
  void endhostent() {
    dTHX;
    Perl_croak(aTHX_ "Function \"endhostent\" not implemented in this version of perl");
  }
  void setprotoent(int stayopen) {
    dTHX;
    Perl_croak(aTHX_ "Function \"setprotoent\" not implemented in this version of perl");
  }
  void endprotoent() {
    dTHX;
    Perl_croak(aTHX_ "Function \"endprotoent\" not implemented in this version of perl");
  }
  void setservent(int stayopen) {
    dTHX;
    Perl_croak(aTHX_ "Function \"setservent\" not implemented in this version of perl");
  }
  void endservent() {
    dTHX;
    Perl_croak(aTHX_ "Function \"endservent\" not implemented in this version of perl");
  }
  __sockadapt_my_hostent_t gethostent() {
    dTHX;
    Perl_croak(aTHX_ "Function \"gethostent\" not implemented in this version of perl");
    return (__sockadapt_my_hostent_t )NULL; /* Avoid MISSINGRETURN warning, not reached */
  }
  __sockadapt_my_servent_t getservent() {
    dTHX;
    Perl_croak(aTHX_ "Function \"getservent\" not implemented in this version of perl");
    return (__sockadapt_my_servent_t )NULL; /* Avoid MISSINGRETURN warning, not reached */
  }
#endif

#else
    /* Work around things missing/broken in SOCKETSHR. */

__sockadapt_my_netent_t getnetbyaddr( __sockadapt_my_addr_t net, int type) {
  dTHX;
  Perl_croak(aTHX_ "Function \"getnetbyaddr\" not implemented in this version of perl");
  return (struct netent *)NULL; /* Avoid MISSINGRETURN warning, not reached */
}
__sockadapt_my_netent_t getnetbyname( __sockadapt_my_name_t name) {
  dTHX;
  Perl_croak(aTHX_ "Function \"getnetbyname\" not implemented in this version of perl");
  return (struct netent *)NULL; /* Avoid MISSINGRETURN warning, not reached */
}
__sockadapt_my_netent_t getnetent() {
  dTHX;
  Perl_croak(aTHX_ "Function \"getnetent\" not implemented in this version of perl");
  return (__sockadapt_my_netent_t )NULL; /* Avoid MISSINGRETURN warning, not reached */
}

/* Some TCP/IP implementations seem to return success, when getpeername()
 * is called on a UDP socket, but the port and in_addr are all zeroes.
 */

int my_getpeername(int sock, struct sockaddr *addr, int *addrlen) {
  static char nowhere[] = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
  int rslt;

  rslt = si_getpeername(sock, addr, addrlen);

  /* Just pass an error back up the line */
  if (rslt) return rslt;

  /* If the call succeeded, make sure we don't have a zeroed port/addr */
  if (addr->sa_family == AF_INET &&
      !memcmp((char *)addr + sizeof(u_short), nowhere,
              sizeof(u_short) + sizeof(struct in_addr))) {
    rslt = -1;
    SETERRNO(ENOTCONN,SS$_CLEARED);
  }
  return rslt;
}
#endif /* SOCKETSHR stuff */
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.3
log
@perl-5.6.0 + local changes
@
text
@d37 2
a38 1
  croak("Function \"setnetent\" not implemented in this version of perl");
d41 2
a42 1
  croak("Function \"endnetent\" not implemented in this version of perl");
d54 2
a55 1
    croak("Function \"sethostent\" not implemented in this version of perl");
d58 2
a59 1
    croak("Function \"endhostent\" not implemented in this version of perl");
d62 2
a63 1
    croak("Function \"setprotoent\" not implemented in this version of perl");
d66 2
a67 1
    croak("Function \"endprotoent\" not implemented in this version of perl");
d70 2
a71 1
    croak("Function \"setservent\" not implemented in this version of perl");
d74 2
a75 1
    croak("Function \"endservent\" not implemented in this version of perl");
d78 2
a79 1
    croak("Function \"gethostent\" not implemented in this version of perl");
d83 2
a84 1
    croak("Function \"getservent\" not implemented in this version of perl");
d93 2
a94 1
  croak("Function \"getnetbyaddr\" not implemented in this version of perl");
d98 2
a99 1
  croak("Function \"getnetbyname\" not implemented in this version of perl");
d103 2
a104 1
  croak("Function \"getnetent\" not implemented in this version of perl");
@


1.2
log
@perl 5.004_04
@
text
@d3 1
a3 1
 *  Author: Charles Bailey  bailey@@genetics.upenn.edu
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 *  Last Revised: 29-Jan-1996
d11 2
a12 1
 *  This version is set up for perl5 with socketshr 0.9D TCP/IP support.
d17 1
d19 1
d21 1
d25 1
d27 1
d32 50
d92 1
a92 1
  return (struct netent *)NULL; /* Avoid MISSINGRETURN warning, not reached */
d94 22
a115 5
void setnetent() {
  croak("Function \"setnetent\" not implemented in this version of perl");
}
void endnetent() {
  croak("Function \"endnetent\" not implemented in this version of perl");
d117 1
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d4 1
a4 1
 *  Last Revised:  4-Mar-1997
d11 1
a11 2
 *  This version is set up for perl5 with UCX (or emulation) via
 *  the DECCRTL or SOCKETSHR 0.9D.
a15 1

a16 1
#  define __sockadapt_my_hostent_t __struct_hostent_ptr32
a17 1
#  define __sockadapt_my_servent_t __struct_servent_ptr32
a20 1
#  define __sockadapt_my_hostent_t struct hostent *
a21 1
#  define __sockadapt_my_servent_t struct servent *
a25 50
/* We have these on VMS 7.0 and above, or on Dec C 5.6 if it's providing */
/* the 7.0 DECC RTL */
#if ((((__VMS_VER >= 70000000) && (__DECC_VER >= 50200000)) || (__CRTL_VER >= 70000000)) && defined(DECCRTL_SOCKETS))
#else
void setnetent(int stayopen) {
  croak("Function \"setnetent\" not implemented in this version of perl");
}
void endnetent() {
  croak("Function \"endnetent\" not implemented in this version of perl");
}
#endif

#if defined(DECCRTL_SOCKETS)
   /* Use builtin socket interface in DECCRTL and
    * UCX emulation in whatever TCP/IP stack is present.
    */

#if ((__VMS_VER >= 70000000) && (__DECC_VER >= 50200000)) || (__CRTL_VER >= 70000000)
#else
  void sethostent(int stayopen) {
    croak("Function \"sethostent\" not implemented in this version of perl");
  }
  void endhostent() {
    croak("Function \"endhostent\" not implemented in this version of perl");
  }
  void setprotoent(int stayopen) {
    croak("Function \"setprotoent\" not implemented in this version of perl");
  }
  void endprotoent() {
    croak("Function \"endprotoent\" not implemented in this version of perl");
  }
  void setservent(int stayopen) {
    croak("Function \"setservent\" not implemented in this version of perl");
  }
  void endservent() {
    croak("Function \"endservent\" not implemented in this version of perl");
  }
  __sockadapt_my_hostent_t gethostent() {
    croak("Function \"gethostent\" not implemented in this version of perl");
    return (__sockadapt_my_hostent_t )NULL; /* Avoid MISSINGRETURN warning, not reached */
  }
  __sockadapt_my_servent_t getservent() {
    croak("Function \"getservent\" not implemented in this version of perl");
    return (__sockadapt_my_servent_t )NULL; /* Avoid MISSINGRETURN warning, not reached */
  }
#endif

#else
    /* Work around things missing/broken in SOCKETSHR. */

d36 1
a36 1
  return (__sockadapt_my_netent_t )NULL; /* Avoid MISSINGRETURN warning, not reached */
d38 5
a42 22

/* Some TCP/IP implementations seem to return success, when getpeername()
 * is called on a UDP socket, but the port and in_addr are all zeroes.
 */

int my_getpeername(int sock, struct sockaddr *addr, int *addrlen) {
  static char nowhere[] = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
  int rslt;

  rslt = si_getpeername(sock, addr, addrlen);

  /* Just pass an error back up the line */
  if (rslt) return rslt;

  /* If the call succeeded, make sure we don't have a zeroed port/addr */
  if (addr->sa_family == AF_INET &&
      !memcmp((char *)addr + sizeof(u_short), nowhere,
              sizeof(u_short) + sizeof(struct in_addr))) {
    rslt = -1;
    SETERRNO(ENOTCONN,SS$_CLEARED);
  }
  return rslt;
a43 1
#endif /* SOCKETSHR stuff */
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
 *  Author: Charles Bailey  bailey@@newman.upenn.edu
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d37 1
a37 2
  dTHX;
  Perl_croak(aTHX_ "Function \"setnetent\" not implemented in this version of perl");
d40 1
a40 2
  dTHX;
  Perl_croak(aTHX_ "Function \"endnetent\" not implemented in this version of perl");
d52 1
a52 2
    dTHX;
    Perl_croak(aTHX_ "Function \"sethostent\" not implemented in this version of perl");
d55 1
a55 2
    dTHX;
    Perl_croak(aTHX_ "Function \"endhostent\" not implemented in this version of perl");
d58 1
a58 2
    dTHX;
    Perl_croak(aTHX_ "Function \"setprotoent\" not implemented in this version of perl");
d61 1
a61 2
    dTHX;
    Perl_croak(aTHX_ "Function \"endprotoent\" not implemented in this version of perl");
d64 1
a64 2
    dTHX;
    Perl_croak(aTHX_ "Function \"setservent\" not implemented in this version of perl");
d67 1
a67 2
    dTHX;
    Perl_croak(aTHX_ "Function \"endservent\" not implemented in this version of perl");
d70 1
a70 2
    dTHX;
    Perl_croak(aTHX_ "Function \"gethostent\" not implemented in this version of perl");
d74 1
a74 2
    dTHX;
    Perl_croak(aTHX_ "Function \"getservent\" not implemented in this version of perl");
d83 1
a83 2
  dTHX;
  Perl_croak(aTHX_ "Function \"getnetbyaddr\" not implemented in this version of perl");
d87 1
a87 2
  dTHX;
  Perl_croak(aTHX_ "Function \"getnetbyname\" not implemented in this version of perl");
d91 1
a91 2
  dTHX;
  Perl_croak(aTHX_ "Function \"getnetent\" not implemented in this version of perl");
@


