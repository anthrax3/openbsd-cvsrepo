head	1.11;
access;
symbols
	PERL_5_24_2:1.1.1.10
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.16
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.10
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.12
	OPENBSD_5_8_BASE:1.10
	PERL_5_20_2:1.1.1.9
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	PERL_5_20_1:1.1.1.9
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.9
	PERL:1.1.1
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.9.0.18
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.16
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.14
	OPENBSD_5_0:1.9.0.12
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.11
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	cxJ08BvJA9Pt2PTM;

1.10
date	2013.03.25.20.41.00;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.21;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.13;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.15.21.30.41;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.06.19;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.29;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.29;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.42.04;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.11.00;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.26.07;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.12;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.15.21.18.23;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.49.52;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.19.04;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.09.40;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2017.08.14.13.46.26;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.11
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@$!  Test.Com - DCL wrapper for perl5 regression test driver
$!
$!  Version 2.0  25-April-2002   Craig Berry  craigberry@@mac.com
$!                               (and many other hands in the last 7+ years)
$!  The most significant difference is that we now run the external t/TEST
$!  rather than keeping a separately maintained test driver embedded here.
$!
$!  Version 1.1   4-Dec-1995
$!  Charles Bailey  bailey@@newman.upenn.edu
$!
$!  Set up error handler and save things we'll restore later.
$   On Control_Y Then Goto Control_Y_exit
$   On Error Then Goto wrapup
$   olddef = F$Environment("Default")
$   oldmsg = F$Environment("Message")
$   oldpriv = F$SetPrv("NOALL")         ! downgrade privs for safety
$   discard = F$SetPrv("NETMBX,TMPMBX") ! only need these to run tests
$!
$! Process arguments.  P1 is the file extension of the Perl images.
$! P2, when not empty, indicates that we are testing a version of Perl built
$! for the VMS debugger.  The other arguments are passed directly to t/TEST.
$!
$   exe = ".Exe"
$   If p1.nes."" Then exe = p1
$   If F$Extract(0,1,exe) .nes. "."
$   Then
$     Write Sys$Error ""
$     Write Sys$Error "The first parameter passed to Test.Com must be the file type used for the"
$     Write Sys$Error "images produced when you built Perl (i.e. "".Exe"", unless you edited"
$     Write Sys$Error "Descrip.MMS or used the AXE=1 macro in the MM[SK] command line."
$     Write Sys$Error ""
$     $status = 44
$     goto wrapup
$   EndIf
$!
$!  "debug" perl if second parameter is nonblank
$!
$   dbg = ""
$   ndbg = ""
$   if p2.nes."" then dbg  = "dbg"
$   if p2.nes."" then ndbg = "ndbg"
$!
$! Run using "TEST." unless something else (e.g. "harness.") was specified.
$  If F$Type(PERL_TEST_DRIVER) .eqs. "" Then PERL_TEST_DRIVER == "TEST."
$!
$!  Make sure we are where we need to be.
$   If F$Search("t.dir").nes.""
$   Then
$       Set Default [.t]
$   Else
$       If F$TrnLNm("Perl_Root").nes.""
$       Then 
$           Set Default Perl_Root:[t]
$       Else
$           Write Sys$Error "Can't find test directory"
$           $status = 44
$           goto wrapup
$       EndIf
$   EndIf
$!
$!  Pick up a copy of perl to use for the tests
$   If F$Search("Perl''exe'").nes."" Then Delete/Log/NoConfirm Perl'exe';*
$   If PERL_TEST_DRIVER .eqs. "minitest"
$   Then
$       Copy/Log/NoConfirm [-]miniperl'exe' []Perl'exe'
$   Else
$       Copy/Log/NoConfirm [-]'ndbg'Perl'exe' []Perl'exe'
$   EndIf
$!
$!  Pick up a copy of vmspipe.com to use for the tests
$   If F$Search("VMSPIPE.COM").nes."" then Delete/Log/Noconfirm VMSPIPE.COM;*
$   Copy/Log/NoConfirm [-]VMSPIPE.COM []
$!
$!  This may be set for the C compiler in descrip.mms, but it confuses the File::Find tests
$   if f$trnlnm("sys") .nes. "" then Define sys " "
$!
$!  And do it
$   Set Message /NoFacility/NoSeverity/NoIdentification/NoText
$   Show Process/Accounting
$   PerlShr_filespec = f$parse("Sys$Disk:[-]''dbg'PerlShr''exe'")
$   Define 'dbg'Perlshr 'PerlShr_filespec'
$   If F$Mode() .nes. "INTERACTIVE" Then Define/Nolog PERL_SKIP_TTY_TEST 1
$   If PERL_TEST_DRIVER .eqs. "minitest"
$   Then
$       MCR Sys$Disk:[]Perl'exe' TEST. "base/*.t" "comp/*.t" "cmd/*.t" "run/*.t" "io/*.t" "op/*.t" "uni/*.t"
$   Else
$       MCR Sys$Disk:[]Perl'exe' "-I[-.lib]" 'PERL_TEST_DRIVER' "''p3'" "''p4'" "''p5'" "''p6'" "''p7'"
$   EndIf
$   goto wrapup
$!
$ Control_Y_exit:
$   $status = 1552   ! %SYSTEM-W-CONTROLY
$!
$ wrapup:
$   status = $status
$   If f$trnlnm("''dbg'PerlShr") .nes. "" Then DeAssign 'dbg'PerlShr
$   Show Process/Accounting
$   If f$type(olddef) .nes. "" Then Set Default &olddef
$   If f$type(oldmsg) .nes. "" Then Set Message 'oldmsg'
$   If f$type(oldpriv) .nes. "" Then discard = F$SetPrv(oldpriv)
$   Exit status
@


1.10
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@a79 1
$   testdir = "Directory/NoHead/NoTrail/Column=1"
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d86 1
a86 1
$       MCR Sys$Disk:[]Perl'exe' TEST. "-minitest" "base/*.t" "comp/*.t" "cmd/*.t" "run/*.t" "io/*.t" "op/*.t" "uni/*.t"
@


1.8
log
@merge in perl 5.8.8
@
text
@d62 1
a62 1
$   If F$Search("Perl.").nes."" Then Delete/Log/NoConfirm Perl.;*
d65 1
a65 1
$       Copy/Log/NoConfirm [-]miniperl'exe' []Perl.
d67 1
a67 1
$       Copy/Log/NoConfirm [-]'ndbg'Perl'exe' []Perl.
d86 1
a86 1
$       MCR Sys$Disk:[]Perl. TEST. "-minitest" "base/*.t" "comp/*.t" "cmd/*.t" "run/*.t" "io/*.t" "op/*.t" "uni/*.t"
d88 1
a88 1
$       MCR Sys$Disk:[]Perl. "-I[-.lib]" 'PERL_TEST_DRIVER' "''p3'" "''p4'" "''p5'" "''p6'" "''p7'"
@


1.7
log
@sync in-tree perl with 5.8.6
@
text
@d63 6
a68 1
$   Copy/Log/NoConfirm [-]'ndbg'Perl'exe' []Perl.
d84 6
a89 1
$   MCR Sys$Disk:[]Perl. "-I[-.lib]" 'PERL_TEST_DRIVER' "''p3'" "''p4'" "''p5'" "''p6'" "''p7'"
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d19 3
a21 3
$! Process arguments.  P1 is the file extension of the Perl images.  P2,
$! when not empty, indicates that we are testing a version of Perl built for
$! the VMS debugger.  The other arguments are passed directly to t/TEST.
d43 3
d79 1
a79 1
$   MCR Sys$Disk:[]Perl. "-I[-.lib]" TEST. "''p3'" "''p4'" "''p5'" "''p6'"
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d1 6
a6 1
$!  Test.Com - DCL driver for perl5 regression tests
d10 3
a12 2
$
$!  A little basic setup
d16 7
a22 14
$   If F$Search("t.dir").nes.""
$   Then
$       Set Default [.t]
$   Else
$       If F$TrnLNm("Perl_Root").nes.""
$       Then 
$           Set Default Perl_Root:[t]
$       Else
$           Write Sys$Error "Can't find test directory"
$           Exit 44
$       EndIf
$   EndIf
$   Set Message /NoFacility/NoSeverity/NoIdentification/NoText
$
d32 2
a33 1
$     Exit 44
d43 15
d66 3
a68 47
$!  Make the environment look a little friendlier to tests which assume Unix
$   cat == "Type"
$   Macro/NoDebug/NoList/Object=Echo.Obj Sys$Input
		.title echo
		.psect data,wrt,noexe
	dsc:
		.word 0
		.byte 14 ; DSC$K_DTYPE_T
		.byte 2  ; DSC$K_CLASS_D
		.long 0
		.psect code,nowrt,exe
		.entry	echo,^m<r2,r3>
		movab	dsc,r2
		pushab	(r2)
		calls	#1,G^LIB$GET_FOREIGN
		movl	4(r2),r3
		movzwl	(r2),r0
		addl2	4(r2),r0
		cmpl	r3,r0
		bgtru	sym.3
		nop	
	sym.1:
		movb	(r3),r0
		cmpb	r0,#65
		blss	sym.2
		cmpb	r0,#90
		bgtr	sym.2
		cvtbl	r0,r0
		addl2	#32,r0
		cvtlb	r0,(r3)
	sym.2:
		incl	r3
		movzwl	(r2),r0
		addl2	4(r2),r0
		cmpl	r3,r0
		blequ	sym.1
	sym.3:
		pushab	(r2)
		calls	#1,G^LIB$PUT_OUTPUT
		movl	#1,r0
		ret	
		.end echo
$   If F$Search("Echo.Exe").nes."" Then Delete/Log/NoConfirm Echo.Exe;*
$   Link/NoMap/NoTrace/Exe=Echo.Exe Echo.Obj;
$   Delete/Log/NoConfirm Echo.Obj;*
$   echo == "$" + F$Parse("Echo.Exe")
$
d70 1
d73 9
a81 146
$   Define 'dbg'Perlshr Sys$Disk:[-]'dbg'PerlShr'exe'
$   MCR Sys$Disk:[]Perl. "-I[-.lib]" - "''p3'" "''p4'" "''p5'" "''p6'"
$   Deck/Dollar=$$END-OF-TEST$$
# $RCSfile: TEST,v $$Revision: 4.1 $$Date: 92/08/07 18:27:00 $
# Modified for VMS 30-Sep-1994  Charles Bailey  bailey@@newman.upenn.edu
#
# This is written in a peculiar style, since we're trying to avoid
# most of the constructs we'll be testing for.

# skip those tests we know will fail entirely or cause perl to hang bacause
# of Unixisms in the tests.  (The Perl operators being tested may work fine,
# but the tests may use other operators which don't.)
use Config;

@@compexcl=('cpp.t');
@@ioexcl=('argv.t','dup.t','fs.t','pipe.t');
@@libexcl=('db-btree.t','db-hash.t','db-recno.t',
          'gdbm.t','io_dup.t', 'io_pipe.t', 'io_poll.t', 'io_sel.t',
          'io_sock.t', 'io_unix.t',
          'ndbm.t','odbm.t','open2.t','open3.t', 'ph.t', 'posix.t');

# Note: POSIX is not part of basic build, but can be built
# separately if you're using DECC
# io_xs.t tests the new_tmpfile routine, which doesn't work with the
# VAXCRTL, since the file can't be stat()d, an Perl's do_open()
# insists on stat()ing a file descriptor before it'll use it.
push(@@libexcl,'io_xs.t') if $Config{'vms_cc_type'} ne 'decc';

@@opexcl=('die_exit.t','exec.t','fork.t','glob.t','groups.t','magic.t','stat.t');
@@exclist=(@@compexcl,@@ioexcl,@@libexcl,@@opexcl);
foreach $file (@@exclist) { $skip{$file}++; }

$| = 1;

@@ARGV = grep($_,@@ARGV);  # remove empty elements due to "''p1'" syntax

if (lc($ARGV[0]) eq '-v') {
    $verbose = 1;
    shift;
}

chdir 't' if -f 't/TEST';

if ($ARGV[0] eq '') {
    foreach (<[.*]*.t>) {
      s/.*[\[.]t./[./;
      ($fname = $_) =~ s/.*\]//;
      if ($skip{"\L$fname"}) { push(@@skipped,$_); }
      else { push(@@ARGV,$_); }
    }
}

if (@@skipped) {
  print "The following tests were skipped because they rely extensively on\n";
  print " Unixisms not compatible with the current version of perl for VMS:\n";
  print "\t",join("\n\t",@@skipped),"\n\n";
}

$bad = 0;
$good = 0;
$total = @@ARGV;
while ($test = shift) {
    if ($test =~ /^$/) {
	next;
    }
    $te = $test;
    chop($te);
    $te .= '.' x (24 - length($te));
	open(script,"$test") || die "Can't run $test.\n";
	$_ = <script>;
	close(script);
	if (/#!..perl(.*)/) {
	    $switch = $1;
	    # Add "" to protect uppercase switches on command line
	    $switch =~ s/-(\S*[A-Z]\S*)/"-$1"/g;
	} else {
	    $switch = '';
	}
	open(results,"\$ MCR Sys\$Disk:[]Perl. \"-I[-.lib]\" $switch $test 2>&1|") || (print "can't run.\n");
    $ok = 0;
    $next = 0;
    $pending_not = 0;
    while (<results>) {
	if ($verbose) {
	    print "$te$_";
	    $te = '';
	}
	unless (/^#/) {
	    if (/^1\.\.([0-9]+)/) {
		$max = $1;
		$totmax += $max;
		$files += 1;
		$next = 1;
		$ok = 1;
	    } else {
		$next = $1, $ok = 0, last if /^not ok ([0-9]*)/;
		next if /^\s*$/; # our 'echo' substitute produces one more \n than Unix'
		if (/^ok (.*)/ && $1 == $next) {
		    $next = $1, $ok=0, last if $pending_not;
		    $next = $next + 1;
		} elsif (/^not/) {
		    $pending_not = 1;
		} else {
		    $ok = 0;
		}
	    }
	}
    }
    $next = $next - 1;
    if ($ok && $next == $max) {
	if ($max) {
	    print "${te}ok\n";
	    $good = $good + 1;
	} else {
	    print "${te}skipping test on this platform\n";
	    $files -= 1;
	}
    } else {
	$next += 1;
	print "${te}FAILED on test $next\n";
	$bad = $bad + 1;
	$_ = $test;
	if (/^base/) {
	    die "Failed a basic test--cannot continue.\n";
	}
    }
}

if ($bad == 0) {
    if ($ok) {
	print "All tests successful.\n";
    } else {
	die "FAILED--no tests were run for some reason.\n";
    }
} else {
    $pct = sprintf("%.2f", $good / $total * 100);
    if ($bad == 1) {
	warn "Failed 1 test, $pct% okay.\n";
    } else {
	warn "Failed $bad/$total tests, $pct% okay.\n";
    }
}
($user,$sys,$cuser,$csys) = times;
print sprintf("u=%g  s=%g  cu=%g  cs=%g  scripts=%d  tests=%d\n",
    $user,$sys,$cuser,$csys,$files,$totmax);
$$END-OF-TEST$$
d83 2
a84 1
$   deassign 'dbg'Perlshr
d86 4
a89 3
$   Set Default &olddef
$   Set Message 'oldmsg'
$   Exit
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d22 1
a22 1
$   Set Message /Facility/Severity/Identification/Text
d44 1
a44 1
$   Delete/Log/NoConfirm Perl.;*
d46 5
a50 1
$
d93 1
d101 1
a101 1
$   Define/User 'dbg'Perlshr Sys$Disk:[-]'dbg'PerlShr'exe'
d116 1
a116 1
@@ioexcl=('argv.t','dup.t','fs.t','pipe.t','openpid.t');
d120 1
a120 1
          'ndbm.t','odbm.t','open2.t','open3.t', 'ph.t', 'posix.t', 'dprof.t');
d129 1
a129 1
@@opexcl=('die_exit.t','exec.t','fork.t','glob.t','groups.t','magic.t','misc.t','stat.t');
d179 1
a179 1
	open(results,"\$ MCR Sys\$Disk:[]Perl. \"-I[-.lib]\" $switch $test |") || (print "can't run.\n");
d244 1
a244 1
print sprintf("u=%g  s=%g  cu=%g  cs=%g  files=%d  tests=%d\n",
d248 1
a249 1
$   If F$Search("Echo.Exe").nes."" Then Delete/Log/NoConfirm Echo.Exe;*
@


1.3
log
@perl5.005_03 (stock)
@
text
@d4 1
a4 1
$!  Charles Bailey  bailey@@genetics.upenn.edu
d35 8
d45 1
a45 1
$   Copy/Log/NoConfirm [-]Perl'exe' []Perl.
d48 1
a48 1
$   cat = "Type"
d91 1
a91 1
$   echo = "$" + F$Parse("Echo.Exe")
d96 2
a97 2
$   Define/User Perlshr Sys$Disk:[-]PerlShr'exe'
$   MCR Sys$Disk:[]Perl. "-I[-.lib]" - "''p2'" "''p3'" "''p4'" "''p5'" "''p6'"
d100 1
a100 1
# Modified for VMS 30-Sep-1994  Charles Bailey  bailey@@genetics.upenn.edu
d111 1
a111 1
@@ioexcl=('argv.t','dup.t','fs.t','pipe.t');
d113 3
a115 2
          'gdbm.t','io_dup.t', 'io_pipe.t', 'io_sel.t', 'io_sock.t',
          'ndbm.t','odbm.t','open2.t','open3.t', 'ph.t', 'posix.t');
d177 1
d194 1
d196 2
@


1.2
log
@perl 5.004_04
@
text
@d24 11
a34 2
$  exe = ".Exe"
$  If p1.nes."" Then exe = p1
d86 1
d103 2
a104 2
@@ioexcl=('argv.t','dup.t','fs.t','inplace.t','pipe.t');
@@libexcl=('anydbm.t','db-btree.t','db-hash.t','db-recno.t',
d106 1
a106 2
          'ndbm.t','odbm.t','open2.t','open3.t','posix.t',
          'sdbm.t');
d115 1
a115 1
@@opexcl=('exec.t','fork.t','glob.t','groups.t','magic.t','misc.t','stat.t');
d123 1
a123 1
if ($ARGV[0] eq '-v') {
d165 1
a165 1
	open(results,"\$ MCR Sys\$Disk:[]Perl. $switch $test |") || (print "can't run.\n");
d230 1
@


1.1
log
@Initial revision
@
text
@d9 1
d22 1
d24 2
d28 1
a28 1
$   Copy/Log/NoConfirm [-]Perl.Exe []Perl.
d32 1
a32 1
$   Macro/NoDebug/Object=Echo.Obj Sys$Input
d72 1
a72 1
$   Link/NoTrace Echo.Obj;
d78 2
a79 2
$   Define/User Perlshr Sys$Disk:[-]PerlShr.Exe
$   MCR Sys$Disk:[]Perl. "''p1'" "''p2'" "''p3'" "''p4'" "''p5'" "''p6'"
d88 5
a92 2
# of Unixisms
@@compexcl=('cpp.t','script.t');
d95 12
a106 2
          'gdbm.t','ndbm.t','odbm.t','sdbm.t','posix.t','soundex.t');
@@opexcl=('exec.t','fork.t','glob.t','magic.t','misc.t','stat.t');
d151 2
d184 7
a190 2
	print "${te}ok\n";
	$good = $good + 1;
d223 1
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a8 1
$   oldmsg = F$Environment("Message")
a20 1
$   Set Message /Facility/Severity/Identification/Text
a21 11
$   exe = ".Exe"
$   If p1.nes."" Then exe = p1
$   If F$Extract(0,1,exe) .nes. "."
$   Then
$     Write Sys$Error ""
$     Write Sys$Error "The first parameter passed to Test.Com must be the file type used for the"
$     Write Sys$Error "images produced when you built Perl (i.e. "".Exe"", unless you edited"
$     Write Sys$Error "Descrip.MMS or used the AXE=1 macro in the MM[SK] command line."
$     Write Sys$Error ""
$     Exit 44
$   EndIf
d24 1
a24 1
$   Copy/Log/NoConfirm [-]Perl'exe' []Perl.
d28 1
a28 1
$   Macro/NoDebug/NoList/Object=Echo.Obj Sys$Input
d68 1
a68 1
$   Link/NoMap/NoTrace/Exe=Echo.Exe Echo.Obj;
a72 1
$   Show Process/Accounting
d74 2
a75 2
$   Define/User Perlshr Sys$Disk:[-]PerlShr'exe'
$   MCR Sys$Disk:[]Perl. "-I[-.lib]" - "''p2'" "''p3'" "''p4'" "''p5'" "''p6'"
d84 6
a89 18
# of Unixisms in the tests.  (The Perl operators being tested may work fine,
# but the tests may use other operators which don't.)
use Config;

@@compexcl=('cpp.t');
@@ioexcl=('argv.t','dup.t','fs.t','pipe.t');
@@libexcl=('db-btree.t','db-hash.t','db-recno.t',
          'gdbm.t','io_dup.t', 'io_pipe.t', 'io_sel.t', 'io_sock.t',
          'ndbm.t','odbm.t','open2.t','open3.t', 'ph.t', 'posix.t');

# Note: POSIX is not part of basic build, but can be built
# separately if you're using DECC
# io_xs.t tests the new_tmpfile routine, which doesn't work with the
# VAXCRTL, since the file can't be stat()d, an Perl's do_open()
# insists on stat()ing a file descriptor before it'll use it.
push(@@libexcl,'io_xs.t') if $Config{'vms_cc_type'} ne 'decc';

@@opexcl=('die_exit.t','exec.t','fork.t','glob.t','groups.t','magic.t','misc.t','stat.t');
d97 1
a97 1
if (lc($ARGV[0]) eq '-v') {
a133 2
	    # Add "" to protect uppercase switches on command line
	    $switch =~ s/-(\S*[A-Z]\S*)/"-$1"/g;
d137 1
a137 1
	open(results,"\$ MCR Sys\$Disk:[]Perl. \"-I[-.lib]\" $switch $test |") || (print "can't run.\n");
d165 2
a166 7
	if ($max) {
	    print "${te}ok\n";
	    $good = $good + 1;
	} else {
	    print "${te}skipping test on this platform\n";
	    $files -= 1;
	}
a196 1
$   Show Process/Accounting
a198 1
$   Set Message 'oldmsg'
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d4 1
a4 1
$!  Charles Bailey  bailey@@newman.upenn.edu
a34 8
$!
$!  "debug" perl if second parameter is nonblank
$!
$   dbg = ""
$   ndbg = ""
$   if p2.nes."" then dbg  = "dbg"
$   if p2.nes."" then ndbg = "ndbg"
$!
d37 1
a37 1
$   Copy/Log/NoConfirm [-]'ndbg'Perl'exe' []Perl.
d40 1
a40 1
$   cat == "Type"
d83 1
a83 1
$   echo == "$" + F$Parse("Echo.Exe")
d88 2
a89 2
$   Define/User 'dbg'Perlshr Sys$Disk:[-]'dbg'PerlShr'exe'
$   MCR Sys$Disk:[]Perl. "-I[-.lib]" - "''p3'" "''p4'" "''p5'" "''p6'"
d92 1
a92 1
# Modified for VMS 30-Sep-1994  Charles Bailey  bailey@@newman.upenn.edu
d103 1
a103 1
@@ioexcl=('argv.t','dup.t','fs.t','pipe.t','openpid.t');
d105 2
a106 3
          'gdbm.t','io_dup.t', 'io_pipe.t', 'io_poll.t', 'io_sel.t',
          'io_sock.t', 'io_unix.t',
          'ndbm.t','odbm.t','open2.t','open3.t', 'ph.t', 'posix.t', 'dprof.t');
a167 1
    $pending_not = 0;
a183 1
		    $next = $1, $ok=0, last if $pending_not;
a184 2
		} elsif (/^not/) {
		    $pending_not = 1;
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d22 1
a22 1
$   Set Message /NoFacility/NoSeverity/NoIdentification/NoText
d44 1
a44 1
$   If F$Search("Perl.").nes."" Then Delete/Log/NoConfirm Perl.;*
d46 1
a46 5
$!
$!  Pick up a copy of vmspipe.com to use for the tests
$   If F$Search("VMSPIPE.COM").nes."" then Delete/Log/Noconfirm VMSPIPE.COM;*
$   Copy/Log/NoConfirm [-]VMSPIPE.COM []
$!
a88 1
$   If F$Search("Echo.Exe").nes."" Then Delete/Log/NoConfirm Echo.Exe;*
d96 1
a96 1
$   Define 'dbg'Perlshr Sys$Disk:[-]'dbg'PerlShr'exe'
d111 1
a111 1
@@ioexcl=('argv.t','dup.t','fs.t','pipe.t');
d115 1
a115 1
          'ndbm.t','odbm.t','open2.t','open3.t', 'ph.t', 'posix.t');
d124 1
a124 1
@@opexcl=('die_exit.t','exec.t','fork.t','glob.t','groups.t','magic.t','stat.t');
d174 1
a174 1
	open(results,"\$ MCR Sys\$Disk:[]Perl. \"-I[-.lib]\" $switch $test 2>&1|") || (print "can't run.\n");
d239 1
a239 1
print sprintf("u=%g  s=%g  cu=%g  cs=%g  scripts=%d  tests=%d\n",
a242 1
$   deassign 'dbg'Perlshr
d244 1
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 6
$!  Test.Com - DCL wrapper for perl5 regression test driver
$!
$!  Version 2.0  25-April-2002   Craig Berry  craigberry@@mac.com
$!                               (and many other hands in the last 7+ years)
$!  The most significant difference is that we now run the external t/TEST
$!  rather than keeping a separately maintained test driver embedded here.
d5 2
a6 3
$!
$!  Set up error handler and save things we'll restore later.
$   On Control_Y Then Goto Control_Y_exit
d10 14
a23 7
$   oldpriv = F$SetPrv("NOALL")         ! downgrade privs for safety
$   discard = F$SetPrv("NETMBX,TMPMBX") ! only need these to run tests
$!
$! Process arguments.  P1 is the file extension of the Perl images.  P2,
$! when not empty, indicates that we are testing a version of Perl built for
$! the VMS debugger.  The other arguments are passed directly to t/TEST.
$!
d33 1
a33 2
$     $status = 44
$     goto wrapup
a42 15
$!  Make sure we are where we need to be.
$   If F$Search("t.dir").nes.""
$   Then
$       Set Default [.t]
$   Else
$       If F$TrnLNm("Perl_Root").nes.""
$       Then 
$           Set Default Perl_Root:[t]
$       Else
$           Write Sys$Error "Can't find test directory"
$           $status = 44
$           goto wrapup
$       EndIf
$   EndIf
$!
d51 47
a97 3
$!  This may be set for the C compiler in descrip.mms, but it confuses the File::Find tests
$   if f$trnlnm("sys") .nes. "" then Define sys " "
$!
a98 1
$   Set Message /NoFacility/NoSeverity/NoIdentification/NoText
d101 146
a246 9
$   PerlShr_filespec = f$parse("Sys$Disk:[-]''dbg'PerlShr''exe'")
$   Define 'dbg'Perlshr 'PerlShr_filespec'
$   If F$Mode() .nes. "INTERACTIVE" Then Define/Nolog PERL_SKIP_TTY_TEST 1
$   MCR Sys$Disk:[]Perl. "-I[-.lib]" TEST. "''p3'" "''p4'" "''p5'" "''p6'"
$   goto wrapup
$!
$ Control_Y_exit:
$   $status = 1552   ! %SYSTEM-W-CONTROLY
$!
d248 1
a248 2
$   status = $status
$   If f$trnlnm("''dbg'PerlShr") .nes. "" Then DeAssign 'dbg'PerlShr
d250 3
a252 4
$   If f$type(olddef) .nes. "" Then Set Default &olddef
$   If f$type(oldmsg) .nes. "" Then Set Message 'oldmsg'
$   If f$type(oldpriv) .nes. "" Then discard = F$SetPrv(oldpriv)
$   Exit status
@


1.1.1.6
log
@perl 5.8.6 from CPAN
@
text
@d19 3
a21 3
$! Process arguments.  P1 is the file extension of the Perl images.
$! P2, when not empty, indicates that we are testing a version of Perl built
$! for the VMS debugger.  The other arguments are passed directly to t/TEST.
a42 3
$! Run using "TEST." unless something else (e.g. "harness.") was specified.
$  If F$Type(PERL_TEST_DRIVER) .eqs. "" Then PERL_TEST_DRIVER == "TEST."
$!
d76 1
a76 1
$   MCR Sys$Disk:[]Perl. "-I[-.lib]" 'PERL_TEST_DRIVER' "''p3'" "''p4'" "''p5'" "''p6'" "''p7'"
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d63 1
a63 6
$   If PERL_TEST_DRIVER .eqs. "minitest"
$   Then
$       Copy/Log/NoConfirm [-]miniperl'exe' []Perl.
$   Else
$       Copy/Log/NoConfirm [-]'ndbg'Perl'exe' []Perl.
$   EndIf
d79 1
a79 6
$   If PERL_TEST_DRIVER .eqs. "minitest"
$   Then
$       MCR Sys$Disk:[]Perl. TEST. "-minitest" "base/*.t" "comp/*.t" "cmd/*.t" "run/*.t" "io/*.t" "op/*.t" "uni/*.t"
$   Else
$       MCR Sys$Disk:[]Perl. "-I[-.lib]" 'PERL_TEST_DRIVER' "''p3'" "''p4'" "''p5'" "''p6'" "''p7'"
$   EndIf
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d62 1
a62 1
$   If F$Search("Perl''exe'").nes."" Then Delete/Log/NoConfirm Perl'exe';*
d65 1
a65 1
$       Copy/Log/NoConfirm [-]miniperl'exe' []Perl'exe'
d67 1
a67 1
$       Copy/Log/NoConfirm [-]'ndbg'Perl'exe' []Perl'exe'
d86 1
a86 1
$       MCR Sys$Disk:[]Perl'exe' TEST. "-minitest" "base/*.t" "comp/*.t" "cmd/*.t" "run/*.t" "io/*.t" "op/*.t" "uni/*.t"
d88 1
a88 1
$       MCR Sys$Disk:[]Perl'exe' "-I[-.lib]" 'PERL_TEST_DRIVER' "''p3'" "''p4'" "''p5'" "''p6'" "''p7'"
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d86 1
a86 1
$       MCR Sys$Disk:[]Perl'exe' TEST. "base/*.t" "comp/*.t" "cmd/*.t" "run/*.t" "io/*.t" "op/*.t" "uni/*.t"
@


1.1.1.10
log
@Import perl-5.24.2
@
text
@d80 1
@


