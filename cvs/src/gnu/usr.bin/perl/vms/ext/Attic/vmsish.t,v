head	1.4;
access;
symbols
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2002.10.27.22.25.39;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2001.05.24.18.36.30;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.06.17.08.51;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.26;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.08;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.01;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.26.09;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@
BEGIN { unshift @@INC, '[-.lib]'; }

my $Invoke_Perl = qq(MCR $^X "-I[-.lib]");

print "1..17\n";

#========== vmsish status ==========
`$Invoke_Perl -e 1`;  # Avoid system() from a pipe from harness.  Mutter.
if ($?) { print "not ok 1 # POSIX status is $?\n"; }
else    { print "ok 1\n"; }
{
  use vmsish qw(status);
  if (not ($? & 1)) { print "not ok 2 # vmsish status is $?\n"; }
  else              { print "ok 2\n"; }
  {
    no vmsish '$?'; # check unimport function
    if ($?) { print "not ok 3 # POSIX status is $?\n"; }
    else    { print "ok 3\n"; }
  }
  # and lexical scoping
  if (not ($? & 1)) { print "not ok 4 # vmsish status is $?\n"; }
  else              { print "ok 4\n"; }
}
if ($?) { print "not ok 5 # POSIX status is $?\n"; }
else    { print "ok 5\n";                          }
{
  use vmsish qw(exit);  # check import function
  if ($?) { print "not ok 6 # POSIX status is $?\n"; }
  else    { print "ok 6\n"; }
}

#========== vmsish exit, messages ==========
{
  use vmsish qw(status);

  $msg = do_a_perl('-e "exit 1"');
  if ($msg !~ /ABORT/) {
    $msg =~ s/\n/\\n/g; # keep output on one line
    print "not ok 7 # subprocess output: |$msg|\n";
  }
  else { print "ok 7\n"; }
  if ($? & 1) { print "not ok 8 # subprocess VMS status: $?\n"; }
  else        { print "ok 8\n"; }

  $msg = do_a_perl('-e "use vmsish qw(exit); exit 1"');
  if (length $msg) {
    $msg =~ s/\n/\\n/g; # keep output on one line
    print "not ok 9 # subprocess output: |$msg|\n";
  }
  else { print "ok 9\n"; }
  if (not ($? & 1)) { print "not ok 10 # subprocess VMS status: $?\n"; }
  else              { print "ok 10\n"; }

  $msg = do_a_perl('-e "use vmsish qw(exit); exit 44"');
  if ($msg !~ /ABORT/) {
    $msg =~ s/\n/\\n/g; # keep output on one line
    print "not ok 11 # subprocess output: |$msg|\n";
  }
  else { print "ok 11\n"; }
  if ($? & 1) { print "not ok 12 # subprocess VMS status: $?\n"; }
  else        { print "ok 12\n"; }

  $msg = do_a_perl('-e "use vmsish qw(exit hushed); exit 44"');
  if ($msg =~ /ABORT/) {
    $msg =~ s/\n/\\n/g; # keep output on one line
    print "not ok 13 # subprocess output: |$msg|\n";
  }
  else { print "ok 13\n"; }

}


#========== vmsish time ==========
{
  my($utctime, @@utclocal, @@utcgmtime, $utcmtime,
     $vmstime, @@vmslocal, @@vmsgmtime, $vmsmtime,
     $utcval,  $vmaval, $offset);
  # Make sure apparent local time isn't GMT
  if (not $ENV{'SYS$TIMEZONE_DIFFERENTIAL'}) {
    $oldtz = $ENV{'SYS$TIMEZONE_DIFFERENTIAL'};
    $ENV{'SYS$TIMEZONE_DIFFERENTIAL'} = 3600;
    eval "END { \$ENV{'SYS\$TIMEZONE_DIFFERENTIAL'} = $oldtz; }";
    gmtime(0); # Force reset of tz offset
  }
  {
     use vmsish qw(time);
     $vmstime   = time;
     @@vmslocal  = localtime($vmstime);
     @@vmsgmtime = gmtime($vmstime);
     $vmsmtime  = (stat $0)[9];
  }
  $utctime   = time;
  @@utclocal  = localtime($vmstime);
  @@utcgmtime = gmtime($vmstime);
  $utcmtime  = (stat $0)[9];
  
  $offset = $ENV{'SYS$TIMEZONE_DIFFERENTIAL'};

  # We allow lots of leeway (10 sec) difference for these tests,
  # since it's unlikely local time will differ from UTC by so small
  # an amount, and it renders the test resistant to delays from
  # things like stat() on a file mounted over a slow network link.
  if ($utctime - $vmstime + $offset > 10) {
    print "not ok 14  # (time) UTC: $utctime  VMS: $vmstime\n";
  }
  else { print "ok 14\n"; }

  $utcval = $utclocal[5] * 31536000 + $utclocal[7] * 86400 +
            $utclocal[2] * 3600     + $utclocal[1] * 60 + $utclocal[0];
  $vmsval = $vmslocal[5] * 31536000 + $vmslocal[7] * 86400 +
            $vmslocal[2] * 3600     + $vmslocal[1] * 60 + $vmslocal[0];
  if ($vmsval - $utcval + $offset > 10) {
    print "not ok 15  # (localtime)\n# UTC: @@utclocal\n# VMS: @@vmslocal\n";
  }
  else { print "ok 15\n"; }

  $utcval = $utcgmtime[5] * 31536000 + $utcgmtime[7] * 86400 +
            $utcgmtime[2] * 3600     + $utcgmtime[1] * 60 + $utcgmtime[0];
  $vmsval = $vmsgmtime[5] * 31536000 + $vmsgmtime[7] * 86400 +
            $vmsgmtime[2] * 3600     + $vmsgmtime[1] * 60 + $vmsgmtime[0];
  if ($vmsval - $utcval + $offset > 10) {
    print "not ok 16  # (gmtime)\n# UTC: @@utcgmtime\n# VMS: @@vmsgmtime\n";
  }
  else { print "ok 16\n"; }

  if ($vmsmtime - $utcmtime + $offset > 10) {
    print "not ok 17  # (stat) UTC: $utcmtime  VMS: $vmsmtime\n";
  }
  else { print "ok 17\n"; }
}

#====== need this to make sure error messages come out, even if
#       they were turned off in invoking procedure
sub do_a_perl {
    local *P;
    open(P,'>vmsish_test.com') || die('not ok ?? : unable to open "vmsish_test.com" for writing');
    print P "\$ set message/facil/sever/ident/text\n";
    print P "\$ define/nolog/user sys\$error _nla0:\n";
    print P "\$ $Invoke_Perl @@_\n";
    close P;
    my $x = `\@@vmsish_test.com`;
    unlink 'vmsish_test.com';
    return $x;
}

@


1.3
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.2
log
@perl-5.6.0 + local changes
@
text
@d139 1
@


1.1
log
@perl 5.004_04
@
text
@d6 1
a6 1
print "1..16\n";
d33 1
a33 1
#========== vmsish exit ==========
d36 2
a37 1
  my $msg = `$Invoke_Perl "-I[-.lib]" -e "exit 1"`;
d46 1
a46 1
  $msg = `$Invoke_Perl "-I[-.lib]" -e "use vmsish qw(exit); exit 1"`;
d55 1
a55 1
  $msg = `$Invoke_Perl "-I[-.lib]" -e "use vmsish qw(exit); exit 44"`;
d63 8
d105 1
a105 1
    print "not ok 13  # (time) UTC: $utctime  VMS: $vmstime\n";
d107 1
a107 1
  else { print "ok 13\n"; }
d114 1
a114 1
    print "not ok 14  # (localtime)\n# UTC: @@utclocal\n# VMS: @@vmslocal\n";
d116 1
a116 1
  else { print "ok 14\n"; }
d123 1
a123 1
    print "not ok 15  # (gmtime)\n# UTC: @@utcgmtime\n# VMS: @@vmsgmtime\n";
d125 1
a125 1
  else { print "ok 15\n"; }
d127 2
a128 2
  if ($utcmtime - $vmsmtime + $offset > 10) {
    print "not ok 16  # (stat) UTC: $utcmtime  VMS: $vmsmtime\n";
d130 14
a143 1
  else { print "ok 16\n"; }
d145 1
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d6 1
a6 1
print "1..17\n";
d33 1
a33 1
#========== vmsish exit, messages ==========
d36 1
a36 2

  $msg = do_a_perl('-e "exit 1"');
d45 1
a45 1
  $msg = do_a_perl('-e "use vmsish qw(exit); exit 1"');
d54 1
a54 1
  $msg = do_a_perl('-e "use vmsish qw(exit); exit 44"');
a61 8

  $msg = do_a_perl('-e "use vmsish qw(exit hushed); exit 44"');
  if ($msg =~ /ABORT/) {
    $msg =~ s/\n/\\n/g; # keep output on one line
    print "not ok 13 # subprocess output: |$msg|\n";
  }
  else { print "ok 13\n"; }

d96 1
a96 1
    print "not ok 14  # (time) UTC: $utctime  VMS: $vmstime\n";
d98 1
a98 1
  else { print "ok 14\n"; }
d105 1
a105 1
    print "not ok 15  # (localtime)\n# UTC: @@utclocal\n# VMS: @@vmslocal\n";
d107 1
a107 1
  else { print "ok 15\n"; }
d114 1
a114 1
    print "not ok 16  # (gmtime)\n# UTC: @@utcgmtime\n# VMS: @@vmsgmtime\n";
d116 1
a116 1
  else { print "ok 16\n"; }
d118 2
a119 2
  if ($vmsmtime - $utcmtime + $offset > 10) {
    print "not ok 17  # (stat) UTC: $utcmtime  VMS: $vmsmtime\n";
d121 1
a121 14
  else { print "ok 17\n"; }
}

#====== need this to make sure error messages come out, even if
#       they were turned off in invoking procedure
sub do_a_perl {
    local *P;
    open(P,'>vmsish_test.com') || die('not ok ?? : unable to open "vmsish_test.com" for writing');
    print P "\$ set message/facil/sever/ident/text\n";
    print P "\$ $Invoke_Perl @@_\n";
    close P;
    my $x = `\@@vmsish_test.com`;
    unlink 'vmsish_test.com';
    return $x;
a122 1

@


1.1.1.3
log
@stock perl 5.6.1
@
text
@a138 1
    print P "\$ define/nolog/user sys\$error _nla0:\n";
@


