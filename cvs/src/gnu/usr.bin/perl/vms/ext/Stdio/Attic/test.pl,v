head	1.7;
access;
symbols
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.4.0.16
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.14
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2010.09.24.15.00.02;	author millert;	state dead;
branches;
next	1.6;

1.6
date	2008.09.29.17.36.21;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.03.03.02.51;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.54;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.49;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.06.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.32;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.32;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.42.10;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.11.03;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.44.36;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.19.04;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Tests for VMS::Stdio v2.2
use VMS::Stdio;
import VMS::Stdio qw(&flush &getname &rewind &sync &tmpnam);

print "1..18\n";
print +(defined(&getname) ? '' : 'not '), "ok 1\n";

#VMS can pretend that it is UNIX.
my $perl = $^X;
$perl = VMS::Filespec::vmsify($perl) if $^O eq 'VMS';

$name = "test$$";
$name++ while -e "$name.tmp";
$fh = VMS::Stdio::vmsopen("+>$name",'ctx=rec','shr=put','fop=dlt','dna=.tmp');
print +($fh ? '' : 'not '), "ok 2\n";

print +(flush($fh) ? '' : 'not '),"ok 3\n";
print +(sync($fh) ? '' : 'not '),"ok 4\n";

$time = (stat("$name.tmp"))[9];
print +($time ? '' : 'not '), "ok 5\n";

$fh->autoflush;  # Can we autoload autoflush from IO::File?  Do or die.
print "ok 6\n";

print 'not ' unless print $fh scalar(localtime($time)),"\n";
print "ok 7\n";

print +(rewind($fh) ? '' : 'not '),"ok 8\n";

chop($line = <$fh>);
print +($line eq localtime($time) ? '' : 'not '), "ok 9\n";

($gotname) = (getname($fh) =~/\](.*);/);

#we may be in UNIX emulation mode.
if (!defined($gotname)) {
   ($gotname) = (VMS::Filespec::vmsify(getname($fh)) =~/\](.*)/);
}
print +("\U$gotname" eq "\U$name.tmp" ? '' : 'not '), "ok 10\n";

$sfh = VMS::Stdio::vmssysopen($name, O_RDONLY, 0,
                              'ctx=rec', 'shr=put', 'dna=.tmp');
print +($sfh ? '' : 'not ($!) '), "ok 11\n";

close($fh);
sysread($sfh,$line,24);
print +($line eq localtime($time) ? '' : 'not '), "ok 12\n";

undef $sfh;
print +(stat("$name.tmp") ? 'not ' : ''),"ok 13\n";

print +(&VMS::Stdio::tmpnam ? '' : 'not '),"ok 14\n";

#if (open(P, qq[| $^X -e "1 while (<STDIN>);print 'Foo';1 while (<STDIN>); print 'Bar'" >$name.tmp])) {
#  print P "Baz\nQuux\n";
#  print +(VMS::Stdio::writeof(P) ? '' : 'not '),"ok 15\n";
#  print P "Baz\nQuux\n";
#  print +(close(P) ? '' : ''),"ok 16\n";
#  $fh = VMS::Stdio::vmsopen("$name.tmp");
#  chomp($line = <$fh>);
#  close $fh;
#  unlink("$name.tmp");
#  print +($line eq 'FooBar' ? '' : 'not '),"ok 17\n";
#}
#else { 
print "ok 15\nok 16\nok 17\n";
#}

$sfh = VMS::Stdio::vmsopen(">$name.tmp");
$setuperl = "\$ MCR $perl\nBEGIN { \@@INC = qw(@@INC) };\nuse VMS::Stdio qw(&setdef);";
print $sfh qq[\$ here = F\$Environment("Default")\n];
print $sfh "$setuperl\nsetdef();\n\$ Show Default\n\$ Set Default 'here'\n";
print $sfh "$setuperl\nsetdef('..');\n\$ Show Default\n";
close $sfh;
@@defs = map { /(\S+)/ && $1 } `\@@$name.tmp`;
unlink("$name.tmp");
print +($defs[0] eq uc($ENV{'SYS$LOGIN'}) ? '' : "not ($defs[0]) "),"ok 18\n";
#print +($defs[1] eq VMS::Filespec::rmsexpand('[-]') ? '' : "not ($defs[1]) "),"ok 19\n";
@


1.6
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@@


1.5
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d8 4
d35 5
d55 1
a55 1
#if (open(P, qq[| MCR $^X -e "1 while (<STDIN>);print 'Foo';1 while (<STDIN>); print 'Bar'" >$name.tmp])) {
d71 1
a71 1
$setuperl = "\$ MCR $^X\nBEGIN { \@@INC = qw(@@INC) };\nuse VMS::Stdio qw(&setdef);";
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d31 1
a31 1
print +($gotname eq "\U$name.tmp" ? '' : 'not '), "ok 10\n";
@


1.3
log
@perl5.005_03 (stock)
@
text
@d1 1
a1 1
# Tests for VMS::Stdio v2.1
@


1.2
log
@perl 5.004_04
@
text
@d1 1
a1 1
# Tests for VMS::Stdio v2.01
d3 1
a3 1
import VMS::Stdio qw(&flush &getname &rewind &sync);
d5 1
a5 1
print "1..14\n";
d45 26
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Tests for VMS::Stdio v2.0
d5 1
a5 1
print "1..13\n";
d19 3
d23 1
a23 1
print "ok 6\n";
d25 1
a25 1
print +(rewind($fh) ? '' : 'not '),"ok 7\n";
d28 1
a28 1
print +($line eq localtime($time) ? '' : 'not '), "ok 8\n";
d31 1
a31 1
print +($gotname eq "\U$name.tmp" ? '' : 'not '), "ok 9\n";
d35 1
a35 1
print +($sfh ? '' : 'not ($!) '), "ok 10\n";
d39 1
a39 1
print +($line eq localtime($time) ? '' : 'not '), "ok 11\n";
d42 1
a42 1
print +(stat("$name.tmp") ? 'not ' : ''),"ok 12\n";
d44 1
a44 1
print +(&VMS::Stdio::tmpnam ? '' : 'not '),"ok 13\n";
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d1 1
a1 1
# Tests for VMS::Stdio v2.1
d3 1
a3 1
import VMS::Stdio qw(&flush &getname &rewind &sync &tmpnam);
d5 1
a5 1
print "1..18\n";
d19 1
a19 1
$fh->autoflush;  # Can we autoload autoflush from IO::File?  Do or die.
d22 1
a22 4
print 'not ' unless print $fh scalar(localtime($time)),"\n";
print "ok 7\n";

print +(rewind($fh) ? '' : 'not '),"ok 8\n";
d25 1
a25 1
print +($line eq localtime($time) ? '' : 'not '), "ok 9\n";
d28 1
a28 1
print +($gotname eq "\U$name.tmp" ? '' : 'not '), "ok 10\n";
d32 1
a32 1
print +($sfh ? '' : 'not ($!) '), "ok 11\n";
d36 1
a36 1
print +($line eq localtime($time) ? '' : 'not '), "ok 12\n";
d39 1
a39 3
print +(stat("$name.tmp") ? 'not ' : ''),"ok 13\n";

print +(&VMS::Stdio::tmpnam ? '' : 'not '),"ok 14\n";
d41 1
a41 25
#if (open(P, qq[| MCR $^X -e "1 while (<STDIN>);print 'Foo';1 while (<STDIN>); print 'Bar'" >$name.tmp])) {
#  print P "Baz\nQuux\n";
#  print +(VMS::Stdio::writeof(P) ? '' : 'not '),"ok 15\n";
#  print P "Baz\nQuux\n";
#  print +(close(P) ? '' : ''),"ok 16\n";
#  $fh = VMS::Stdio::vmsopen("$name.tmp");
#  chomp($line = <$fh>);
#  close $fh;
#  unlink("$name.tmp");
#  print +($line eq 'FooBar' ? '' : 'not '),"ok 17\n";
#}
#else { 
print "ok 15\nok 16\nok 17\n";
#}

$sfh = VMS::Stdio::vmsopen(">$name.tmp");
$setuperl = "\$ MCR $^X\nBEGIN { \@@INC = qw(@@INC) };\nuse VMS::Stdio qw(&setdef);";
print $sfh qq[\$ here = F\$Environment("Default")\n];
print $sfh "$setuperl\nsetdef();\n\$ Show Default\n\$ Set Default 'here'\n";
print $sfh "$setuperl\nsetdef('..');\n\$ Show Default\n";
close $sfh;
@@defs = map { /(\S+)/ && $1 } `\@@$name.tmp`;
unlink("$name.tmp");
print +($defs[0] eq uc($ENV{'SYS$LOGIN'}) ? '' : "not ($defs[0]) "),"ok 18\n";
#print +($defs[1] eq VMS::Filespec::rmsexpand('[-]') ? '' : "not ($defs[1]) "),"ok 19\n";
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d1 1
a1 1
# Tests for VMS::Stdio v2.2
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d31 1
a31 1
print +("\U$gotname" eq "\U$name.tmp" ? '' : 'not '), "ok 10\n";
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@a7 4
#VMS can pretend that it is UNIX.
my $perl = $^X;
$perl = VMS::Filespec::vmsify($perl) if $^O eq 'VMS';

a30 5

#we may be in UNIX emulation mode.
if (!defined($gotname)) {
   ($gotname) = (VMS::Filespec::vmsify(getname($fh)) =~/\](.*)/);
}
d46 1
a46 1
#if (open(P, qq[| $^X -e "1 while (<STDIN>);print 'Foo';1 while (<STDIN>); print 'Bar'" >$name.tmp])) {
d62 1
a62 1
$setuperl = "\$ MCR $perl\nBEGIN { \@@INC = qw(@@INC) };\nuse VMS::Stdio qw(&setdef);";
@


