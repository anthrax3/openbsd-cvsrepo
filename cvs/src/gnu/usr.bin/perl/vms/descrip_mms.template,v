head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	PERL_5_24_2:1.1.1.17
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.16.0.2
	OPENBSD_5_9_BASE:1.1.1.16
	OPENBSD_5_8:1.1.1.16.0.4
	OPENBSD_5_8_BASE:1.1.1.16
	PERL_5_20_2:1.1.1.16
	OPENBSD_5_7:1.1.1.15.0.2
	OPENBSD_5_7_BASE:1.1.1.15
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.1.1.14.0.4
	OPENBSD_5_6_BASE:1.1.1.14
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.13.0.6
	OPENBSD_5_5_BASE:1.1.1.13
	OPENBSD_5_4:1.1.1.13.0.2
	OPENBSD_5_4_BASE:1.1.1.13
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.1.1.12.0.10
	OPENBSD_5_3_BASE:1.1.1.12
	OPENBSD_5_2:1.1.1.12.0.8
	OPENBSD_5_2_BASE:1.1.1.12
	OPENBSD_5_1_BASE:1.1.1.12
	OPENBSD_5_1:1.1.1.12.0.6
	OPENBSD_5_0:1.1.1.12.0.4
	OPENBSD_5_0_BASE:1.1.1.12
	OPENBSD_4_9:1.1.1.12.0.2
	OPENBSD_4_9_BASE:1.1.1.12
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.1.1.11.0.4
	OPENBSD_4_8_BASE:1.1.1.11
	OPENBSD_4_7:1.1.1.11.0.2
	OPENBSD_4_7_BASE:1.1.1.11
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.1.1.10.0.6
	OPENBSD_4_6_BASE:1.1.1.10
	OPENBSD_4_5:1.1.1.10.0.2
	OPENBSD_4_5_BASE:1.1.1.10
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.1.1.9.0.10
	OPENBSD_4_4_BASE:1.1.1.9
	OPENBSD_4_3:1.1.1.9.0.8
	OPENBSD_4_3_BASE:1.1.1.9
	OPENBSD_4_2:1.1.1.9.0.6
	OPENBSD_4_2_BASE:1.1.1.9
	OPENBSD_4_1:1.1.1.9.0.4
	OPENBSD_4_1_BASE:1.1.1.9
	OPENBSD_4_0:1.1.1.9.0.2
	OPENBSD_4_0_BASE:1.1.1.9
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.1.1.8.0.6
	OPENBSD_3_9_BASE:1.1.1.8
	OPENBSD_3_8:1.1.1.8.0.4
	OPENBSD_3_8_BASE:1.1.1.8
	OPENBSD_3_7:1.1.1.8.0.2
	OPENBSD_3_7_BASE:1.1.1.8
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.1.1.7.0.2
	OPENBSD_3_6_BASE:1.1.1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2017.08.14.13.48.48;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	CrMEpTqBUsxCMTjx;

1.3
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2016.07.03.01.08.05;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	GzHqjSTnBjdF7Wcw;

1.1
date	99.04.29.22.41.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.26.02;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.34;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.45;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.38;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.18.23;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.50;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.19.03;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.47;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.48.54;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.09.40;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.53.19;	author afresh1;	state Exp;
branches;
next	1.1.1.16;
commitid	B31cAbBIXiCqnL97;

1.1.1.16
date	2015.04.25.19.10.50;	author afresh1;	state Exp;
branches;
next	1.1.1.17;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.17
date	2017.08.14.13.46.26;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.4
log
@Fix merge issues, remove excess files - match perl-5.24.2 dist

OK bluhm@@, Reads ok sthen@@
@
text
@!GROK!THIS!
# Descrip.MMS for perl5 on VMS
# Last revised 5-Dec-2001 by Craig Berry -- craigberry@@mac.com
#
#: This file uses MMS syntax, and can be processed using DEC's MMS product,
#: or the free MMK clone (available by ftp at ftp.spc.edu).  If you want to
#: a Unix-style MAKE tool, run this file through mms2make.pl, which should
#: be found in the same directory as this file.
#:
#: Lines beginning with "#:" will be removed by mms2make.pl when converting
#: this file to MAKE syntax.
#
#	tidy      -- purge files generated by executing this file
#	clean     -- remove all intermediate (e.g. object files, C files generated
#	             during build) files generated by executing this file,
#	             but leave 'installable' files (images, library) intact
#	realclean -- remove all files generated by executing this file
#	cleansrc  -- 'realclean' + purge *.c,*.h,descrip.mms
#	crtl.opt  -- compiler-specific linker options file (made automatically)
#

#### Start of system configuration section. ####

~DECC~
~DECCXX~
~GNUC~
~ARCH-TYPE~ = 1
~THREAD~
~SOCKET~
~MALLOC~
~CC~
~MTK~
~MTU~
~FLAGS~
~LARGEFILE~
~ARCHNAME~
~USEVMSDEBUG~
~PREFIX~

#: >>>>> Architecture-specific options <<<<<
.ifdef IXE
O = .ibj
OLB = .ilb
E = .ixe
.else
.ifdef AXE
# File type to use for object files
O = .abj
# File type to use for object libraries
OLB = .alb
# File type to use for executable images
E = .axe
.else
# File type to use for object files
O = .obj
# File type to use for object libraries
OLB = .olb
# File type to use for executable images
E = .exe
.endif
.endif

.ifdef __IA64__
OBJVAL = $(O)
.else
.ifdef __AXP__
OBJVAL = $(O)
.else
OBJVAL = $(MMS$TARGET_NAME)$(O)
.endif
.endif

PERL_VERSION = ~PV~

.ifdef MALLOC
MALLOC_O = malloc$(O)
MALLOC_C = malloc$(C)
.endif

.ifdef DECC_SOCKETS
SOCKET=1
.endif

ARCHDIR =  [.lib.$(ARCHNAME).$(PERL_VERSION)]
ARCHCORE = [.lib.$(ARCHNAME).$(PERL_VERSION).CORE]
ARCHAUTO = [.lib.$(ARCHNAME).$(PERL_VERSION).auto]

#: >>>>>Compiler-specific options <<<<<
.ifdef GNUC
.first
	@@ If F$TrnLnm("Sys").eqs."" Then Define/NoLog SYS GNU_CC_Include:[VMS]
CC = gcc
# -fno-builtin avoids bug in gcc up to version 2.6.2 which can destroy
# data when memcpy() is called on large (>64 kB) blocks of memory
# (fixed in gcc 2.6.3)
XTRACCFLAGS = /Obj=$(MMS$TARGET_NAME)$(O)/NoCase_Hack/Optimize=2
DBGSPECFLAGS =
XTRADEF = 
XTRAOBJS =
LIBS1 = GNU_CC:[000000]GCCLIB.OLB/Library
LIBS2 = Sys$Share:VAXCRTL/Shareable
POSIX =
.else
XTRAOBJS = 
LIBS1 = $(XTRAOBJS)
DBGSPECFLAGS = /Show=(expansion,include)/machine
# Some versions of DECCRTL on AXP have a bug in chdir() which causes the change
# to persist after the image exits, even when this was not requested, iff
# SYSNAM is enabled.  This is fixed in CSC Patch # AXPACRT04_061, but turning
# off SYSNAM for the MM[SK] subprocess doesn't hurt anything, so we do it
# just in case.
.first
	@@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").nes."" Then Define/NoLog SYS DECC$System_Include
.ifdef __AXP__
	@@ Set Process/Privilege=(NoSYSNAM)
	@@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").eqs."" Then Define/NoLog SYS Sys$Library
.else
	@@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").eqs."" Then Define/NoLog SYS DECC$Library_Include
.endif

.ifdef DECCXX
XTRACCFLAGS = /Include=[]/Standard=ANSI/Prefix=All/Obj=$(OBJVAL)
.else
XTRACCFLAGS = /Include=[]/Standard=Relaxed_ANSI/Prefix=All/Obj=$(OBJVAL)
.endif
XTRADEF =
POSIX = POSIX
.endif

#: >>>>> Configuration options <<<<<
#: __DEBUG__: builds images with full VMS debugger support
.ifdef __DEBUG__
DBGCCFLAGS = /List/Debug/NoOpt$(DBGSPECFLAGS)
DBGLINKFLAGS = /Trace/Debug/Map=$(MMS$TARGET_NAME).MAP/Full/Cross
DBG = DBG
.else
DBGCCFLAGS = /NoList
DBGLINKFLAGS = /NoTrace/NoMap
DBG = 
.endif

.ifdef THREADED
THREADDEF = 
THREAD = THREAD
.endif

.ifdef OLDTHREADED
THREADDEF = 
THREAD = THREAD
THRLIBS1 = sys$share:cma$lib_shr/share|sys$share:cma$rtl/share
.ifdef __AXP__
THRLIBS2 = sys$share:cma$open_lib_shr/share|sys$share:cma$open_rtl/share
.endif
.endif

.ifdef MTU
.ifdef MTK
MTHREADLINKFLAGS = /THREADS=(MULTIPLE_KERNEL,UPCALLS)
.else
MTHREADLINKFLAGS = /THREADS=UPCALLS
.endif
.else
MTHREADLINKFLAGS = 
.endif

# C preprocessor manifest "DEBUGGING" ==> perl -D, not the VMS debugger
.IFDEF LARGEFILE
CFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=$(LARGEFILE)
CORECFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=(PERL_CORE,$(LARGEFILE))
.ELSE
CFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)
CORECFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=PERL_CORE
.ENDIF

LINKFLAGS = $(DBGLINKFLAGS)

MAKE = $(MMS)
MAKEFILE = Descrip.MMS   # this file
NOOP = continue

# Macros to invoke a copy of miniperl during the build.  Targets which
# are built using these macros should depend on $(MINIPERL_EXE)
MINIPERL_EXE = Sys$Disk:[]miniperl$(E)
MINIPERL = MCR $(MINIPERL_EXE) "-I[.lib]"
MINIPERLQ = MCR $(MINIPERL_EXE) ""-I[.lib]""
XSUBPP = $(MINIPERL) "-I[.ext.re]" [.lib.extutils]xsubpp -noprototypes
# Macro to invoke a preexisting copy of Perl.  This is used to regenerate
# some header files when rebuilding Perl, but premade versions are provided
# in the distribution, so it's OK if this doesn't work; it's here to make
# life easier for those who modify Perl and rebuild it.
INSTPERL = perl
# Macros to invoke a copy of perl during the build.  Targets which
# are built using these macros should depend on $(PERL_EXE) EXT
.IFDEF __DEBUG__
PERL_EXE = Sys$Disk:[]n$(DBG)perl$(E)
.ELSE
PERL_EXE = Sys$Disk:[]perl$(E)
.ENDIF
PERL = MCR $(PERL_EXE) "-I[.lib]"

# Space-separated list of "static" extensions to build into perlshr (case counts).
MYEXT = DynaLoader
# object files for these extensions; the trailing comma is required if
# there are any object files specified
# These must be built separately, or you must add rules below to build them
myextobj = DynaLoader$(O),
EXT = $(MYEXT)
extobj = $(myextobj)

.ifdef LIBS2
.else
LIBS2=
.endif

.ifdef THRLIBS1
.else
THRLIBS1=
.endif

.ifdef THRLIBS2
.else
THRLIBS2=
.endif

FULLLIBS2 = $(LIBS2)|$(THRLIBS1)|$(THRLIBS2)

#### End of system configuration section. ####

c0 = $(MALLOC_C) av.c caretx.c deb.c doio.c doop.c dquote.c dump.c globals.c gv.c hv.c mro_core.c
c1 = mg.c locale.c mathoms.c miniperlmain.c numeric.c op.c pad.c perl.c perlapi.c perlio.c
c2 = perly.c pp.c pp_ctl.c pp_hot.c pp_pack.c pp_sort.c pp_sys.c regcomp.c regexec.c reentr.c
c3 = run.c scope.c sv.c taint.c time64.c toke.c universal.c utf8.c util.c vms.c keywords.c
c = $(c0) $(c1) $(c2) $(c3)

obj0 = perl$(O)
obj1 = $(MALLOC_O) av$(O) caretx$(O) deb$(O) doio$(O) doop$(O) dquote$(O) dump$(O) mro_core$(O) globals$(O) gv$(O) hv$(O)
obj2 = keywords$(O) locale$(O) mathoms$(O) mg$(O) miniperlmain$(O) numeric$(O) op$(O) pad$(O) perlapi$(O) perlio$(O) 
obj3 = perly$(O) pp$(O) pp_ctl$(O) pp_hot$(O) reentr$(O) pp_pack$(O) pp_sort$(O) pp_sys$(O) regcomp$(O) 
obj4 = regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) time64$(O) toke$(O) universal$(O) utf8$(O) util$(O) vms$(O)

mini_obj = perlmini$(O) $(obj1) $(obj2) $(obj3) $(obj4)
obj = $(obj0) $(obj1) $(obj2) $(obj3) $(obj4)

h0 = av.h config.h cop.h cv.h embed.h embedvar.h
h1 = EXTERN.h form.h gv.h handy.h hv.h l1_char_class_tab.h INTERN.h intrpvar.h
h2 = iperlsys.h keywords.h mydtrace.h mg.h mg_vtable.h nostdio.h op.h 
h3 = op_reg_common.h opcode.h opnames.h overload.h pad.h parser.h patchlevel.h 
h4 = perl.h perlapi.h perlio.h perlsdio.h perlvars.h perly.h
h5 = pp.h pp_proto.h proto.h regcomp.h regexp.h regnodes.h scope.h
h6 = sv.h thread.h utf8.h util.h vmsish.h warnings.h xsub.h
h = $(h0) $(h1) $(h2) $(h3) $(h4) $(h5) $(h6)

acopt = $(ARCHCORE)perlshr_attr.opt $(ARCHCORE)$(DBG)perlshr_bld.opt
ac = archcore_includes.ts $(acopt)

generated_headers = uudmap.h bitcount.h mg_data.h

CRTL = []crtl.opt
CRTLOPTS =,$(CRTL)/Options

.SUFFIXES

.ifdef LINK_ONLY
.else
.SUFFIXES $(O) .c .xs

.xs.c :
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$TARGET)

.c$(O) :
	$(CC) $(CFLAGS) $(MMS$SOURCE)

.xs$(O) :
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$SOURCE_NAME).c
	$(CC) $(CFLAGS) $(MMS$SOURCE_NAME).c
.endif

# Directories of Unicode data files generated by mktables
unidatadirs = lib/unicore/To lib/unicore/lib

# Modules which must be installed before we can build extensions
LIBPREREQ = $(ARCHDIR)Config.pm $(ARCHDIR)Config_heavy.pl $(ARCHDIR)vmspipe.com

utils1 = [.utils]perldoc.com [.utils]c2ph.com [.utils]h2ph.com 
utils2 = [.utils]h2xs.com [.utils]libnetcfg.com [.lib]perlbug.com [.utils]json_pp.com
utils3 = [.utils]perlivp.com [.lib]splain.com [.utils]pl2pm.com [.utils]xsubpp.com [.utils]pod2html.com [.utils]instmodsh.com
utils4 = [.utils]enc2xs.com [.utils]piconv.com [.utils]cpan.com [.utils]prove.com [.utils]ptar.com [.utils]ptardiff.com [.utils]shasum.com
utils5 = [.utils]corelist.com [.utils]ptargrep.com [.utils]zipdetails.com [.utils]encguess.com

all : base extras archcorefiles preplibrary [.pod]perltoc.pod
	@@ QUALIFIERS := $(MMSQUALIFIERS)
	@@ QUALIFIERS = QUALIFIERS - """" - """"
	@@ write sys$output " "
	@@ write sys$output " Everything is up to date. '$(MMS)''QUALIFIERS' test' to run test suite."

git_version.h : $(MINIPERL_EXE) make_patchnum.pl
        $(MINIPERL) make_patchnum.pl

base : miniperl git_version.h nonxsext perl
	@@ $(NOOP)
extras : dynext libmods utils extra.pods
	@@ $(NOOP)
libmods : $(LIBPREREQ)
	@@ $(NOOP)
utils : $(utils1) $(utils2) $(utils3) $(utils4) $(utils5)
	@@ $(NOOP)
extra.pods : miniperl
	@@ @@extra_pods.com

PERLDELTA_CURRENT = [.pod]perl5242delta.pod

$(PERLDELTA_CURRENT) : [.pod]perldelta.pod
	Copy/NoConfirm/Log $(MMS$SOURCE) $(PERLDELTA_CURRENT)

[.pod]perlmodlib.pod : [.pod]perlmodlib.pl MANIFEST $(MINIPERL_EXE)
	$(MINIPERL) [.pod]perlmodlib.pl "-q"

[.pod]perlapi.pod : [.pod]perlintern.pod
	@@ $(NOOP)

[.pod]perlintern.pod : embed.fnc autodoc.pl $(MINIPERL_EXE)
	$(MINIPERL) autodoc.pl

[.pod]perltoc.pod : $(PERLDELTA_CURRENT) [.pod]perlapi.pod [.pod]perlintern.pod  [.pod]perlmodlib.pod extra.pods $(PERL_EXE)
	@@ define/user_mode $(DBG)PERLSHR SYS$DISK:[]$(DBG)perlshr$(E)
	$(PERL) "-f" [.pod]buildtoc "-q"

archcorefiles : $(ac) $(ARCHAUTO)time.stamp
	@@ $(NOOP)

# See the comment in Makefile.SH explaining this seemingly cranky ordering
$(MINIPERL_EXE) : [.lib]buildcustomize.pl
	@@ $(NOOP)

vmspipe.com : [.vms]vmspipe.com
	Copy/NoConfirm/Log $(MMS$SOURCE) []

miniperl : $(DBG)miniperl$(E)  vmspipe.com
	@@ Continue

[.lib]buildcustomize.pl :  miniperlmain$(O), $(DBG)libperlmini$(OLB) $(CRTL) write_buildcustomize.pl
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MINIPERL_EXE) miniperlmain$(O), $(DBG)libperlmini$(OLB)/Library/Include=globals $(CRTLOPTS)
       $(MINIPERL) "-f" write_buildcustomize.pl

$(DBG)miniperl$(E) :  miniperlmain$(O), $(DBG)libperlmini$(OLB) $(CRTL)
	Link $(LINKFLAGS)/Trace/Exe=$(MMS$TARGET) miniperlmain$(O), $(DBG)libperlmini$(OLB)/Library/Include=globals  $(CRTLOPTS)

$(DBG)libperl$(OLB) : $(obj)
	@@ If F$Search("$(MMS$TARGET)").eqs."" Then Library/Object/Create $(MMS$TARGET)
	Library/Object/Replace $(MMS$TARGET) $(MMS$SOURCE_LIST)

$(DBG)libperlmini$(OLB) : $(mini_obj)
	@@ If F$Search("$(MMS$TARGET)").eqs."" Then Library/Object/Create $(MMS$TARGET)
	Library/Object/Replace $(MMS$TARGET) $(MMS$SOURCE_LIST)

perlmain.c : miniperlmain.c $(MINIPERL_EXE) nonxsext
	$(MINIPERL) -"MExtUtils::Miniperl" -e "writemain(\'perlmain.c', @@ARGV)" "$(EXT)"

.ifdef __DEBUG__
# Link an extra perl that doesn't invoke the debugger
perl : $(DBG)perl$(E)
	Link $(LINKFLAGS)$(MTHREADLINKFLAGS)/NoDebug/Trace/NoMap/NoCross/NoFull/Exe=N$(DBG)perl$(E) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
.else
perl : $(DBG)perl$(E)
	@@ Continue
.endif

$(DBG)perl$(E) : perlmain$(O), $(DBG)perlshr$(E), $(MINIPERL_EXE)
	@@ @@[.vms]genopt "PerlShr.Opt/Write" "|" "''F$Environment("Default")'$(DBG)PerlShr$(E)/Share"
	Link $(LINKFLAGS)$(MTHREADLINKFLAGS)/Exe=$(MMS$TARGET) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)

$(DBG)perlshr$(E) : $(DBG)libperl$(OLB) $(extobj) $(DBG)perlshr_xtras.ts
	Link $(LINKFLAGS)/Share=$(MMS$TARGET) $(extobj) []$(DBG)perlshr_bld.opt/Option, perlshr_attr.opt/Option

perlmini.c : perl.c
	@@ IF F$SEARCH("$(MMS$TARGET)") .NES. "" THEN DELETE/NOCONFIRM/LOG $(MMS$TARGET);*
	@@ COPY/NOCONFIRM _NLA0: $(MMS$TARGET)
	@@ SET FILE /ATTRIBUTES=RFM:STMLF $(MMS$TARGET)
	@@ OPEN/APPEND perlmini $(MMS$TARGET)
	@@ WRITE perlmini "#define PERL_IS_MINIPERL"
	@@ CLOSE perlmini
	@@ APPEND/NOCONFIRM/LOG $(MMS$SOURCE) $(MMS$TARGET)

perlmini$(O) : perlmini.c
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)

bitcount.h mg_data.h : uudmap.h 
	@@ $(NOOP)

uudmap.h : generate_uudmap$(E)
	MCR SYS$DISK:[]generate_uudmap$(E) $(generated_headers)

generate_uudmap$(E) : generate_uudmap$(O) $(CRTL)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MMS$TARGET) generate_uudmap$(O) $(CRTLOPTS)

generate_uudmap$(O) : generate_uudmap.c mg_raw.h
        $(CC) $(CORECFLAGS) $(MMS$SOURCE)

# The following files are built in one go by gen_shrfls.pl:
#  perlshr_attr.opt, $(DBG)perlshr_bld.opt - AXP and IA64
# The song and dance with gen_shrfls.opt accommodates DCL's line length limit.
$(DBG)perlshr_xtras.ts : perl.h config.h vmsish.h proto.h [.vms]gen_shrfls.pl $(MINIPERL_EXE) $(MAKEFILE) $(CRTL)
	@@ $(MINIPERL) makedef.pl "PLATFORM=vms" > makedef.lis
	@@ $(MINIPERLQ) -e "print join('|',@@ARGV),'|';" "$(CC)$(CFLAGS)" >gen_shrfls.opt
	@@ $(MINIPERLQ) -e "print join('|',@@ARGV);" "$(O)" "$(DBG)" "$(OLB)" "$(EXT)" "$(CRTL)" >>gen_shrfls.opt
	$(MINIPERL) [.vms]gen_shrfls.pl -f gen_shrfls.opt
	@@ Delete/NoLog/NoConfirm gen_shrfls.opt;
	@@ If F$Search("$(DBG)perlshr_xtras.ts").nes."" Then Delete/NoLog/NoConfirm $(DBG)perlshr_xtras.ts;*
	@@ Copy _NLA0: $(DBG)perlshr_xtras.ts

$(ARCHDIR)Config.pm : [.lib]Config.pm
	Create/Directory $(ARCHDIR)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHDIR)

$(ARCHDIR)Config_heavy.pl : [.lib]Config_heavy.pl
	Create/Directory $(ARCHDIR)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHDIR)

[.lib]Config.pm : config.h $(MINIPERL_EXE)
	$(MINIPERL) ConfigPM.

$(ARCHDIR)vmspipe.com : vmspipe.com
        Copy $(MMS$SOURCE) $(ARCHDIR)

unidatafiles.ts : $(MINIPERL_EXE) [.lib]Config.pm [.lib.unicore]mktables nonxsext
	$(MINIPERL) [.lib.unicore]mktables "-C" [.lib.unicore] "-P" [.pod] "-makelist" "-maketest" "-p"
	@@ If F$Search("$(MMS$TARGET)").nes."" Then Delete/NoLog/NoConfirm $(MMS$TARGET);*
	@@ Copy/NoConfirm _NLA0: $(MMS$TARGET)
 
DynaLoader$(O) : [.lib]buildcustomize.pl $(ARCHDIR)Config.pm $(MINIPERL_EXE)
	$(MINIPERL) make_ext.pl "MAKE=$(MMS)" "DynaLoader"

dynext : $(LIBPREREQ) $(DBG)perlshr$(E) unidatafiles.ts DynaLoader$(O) preplibrary makeppport $(MINIPERL_EXE)
       $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--dynamic" "--static"

nonxsext : $(LIBPREREQ) preplibrary $(MINIPERL_EXE) [.pod]perlfunc.pod
       $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--nonxs"

[.utils]perldoc.com : [.utils]perldoc.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]perlivp.com : [.utils]perlivp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]cpan.com : [.utils]cpan.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]prove.com : [.utils]prove.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]ptar.com : [.utils]ptar.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]ptardiff.com : [.utils]ptardiff.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]ptargrep.com : [.utils]ptargrep.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]shasum.com : [.utils]shasum.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]corelist.com : [.utils]corelist.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]c2ph.com : [.utils]c2ph.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]json_pp.com : [.utils]json_pp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]enc2xs.com : [.utils]enc2xs.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]encguess.com : [.utils]encguess.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]h2ph.com : [.utils]h2ph.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]h2xs.com : [.utils]h2xs.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]instmodsh.com : [.utils]instmodsh.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]libnetcfg.com : [.utils]libnetcfg.PL $(ARCHDIR)Config.pm
       $(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.lib]perlbug.com : [.utils]perlbug.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]perlbug.com [.lib]

[.utils]piconv.com : [.utils]piconv.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]pl2pm.com : [.utils]pl2pm.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.lib]splain.com : [.utils]splain.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]splain.com [.lib]

[.utils]xsubpp.com : [.utils]xsubpp.PL $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]zipdetails.com : [.utils]zipdetails.PL $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]pod2html.com : [.utils]pod2html.PL $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

preplibrary : $(MINIPERL_EXE) $(LIBPREREQ) 
	@@ $(NOOP)

makeppport : $(MINIPERL_EXE) $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) mkppport

install.html : [.pod]perltoc.pod
	@@ @@perl_setup.com "$(PREFIX)"
	@@ If F$Search("perl_root:[lib]html.dir").eqs."" Then Create/Directory perl_root:[lib.html]
	$(MINIPERL) installhtml. "--podroot=. --recurse --htmldir=/perl_root/lib/html --htmlroot=.. --verbose"

printconfig :
        @@ @@[.vms]make_command $(MMS) $(MMSQUALIFIERS) $(MMSTARGETS)
        @@ @@[.vms]myconfig "$(CC)" "$(CFLAGS)" "$(LINKFLAGS)" "$(LIBS1)" "$(FULLLIBS2)" "$(EXT)" "$(DBG)"

# The following files are generated automatically
#       embed.pl:       proto.h embed.h embedvar.h perlapi.h perlapi.c
#       opcode.pl:      opcode.h opnames.h pp_proto.h
#       regcomp.pl:     regnodes.h
#       warnings.pl:    warnings.h lib/warnings.pm
# The correct versions should be already supplied with the perl kit,
# in case you don't have perl available.
# To force them to be regenerated, run
#       perl regen.pl
# with your existing copy of perl
# (make regen_headers is kept for backwards compatibility)

regen :
	$(INSTPERL) regen.pl

regen_headers :
	$(INSTPERL) regen.pl -v

.ifdef LINK_ONLY
.else
perly$(O) : perly.c, perly.h, $(h)
.endif

check : test
	@@ Continue

test : all
	@@ PERL_TEST_DRIVER == "TEST."
	- @@[.vms]test.com "$(E)" "$(__DEBUG__)"
	@@ $(MINIPERL) -e "print ""Ran tests"";" > [.t]rantests.

test_harness : all
	@@ PERL_TEST_DRIVER == "harness."
	- @@[.vms]test.com "$(E)" "$(__DEBUG__)"
	@@ $(MINIPERL) -e "print ""Ran tests"";" > [.t]rantests.

minitest : $(MINITEST_EXE) unidatafiles.ts
	@@ PERL_TEST_DRIVER == "minitest"
	- @@[.vms]test.com "$(E)" "$(__DEBUG__)"

# install ought not need a source, but it doesn't work if one's not
# there. Go figure...
install : $(PERL_EXE)
	@@ @@perl_setup.com "$(PREFIX)"
	If F$TrnLnm("Sys") .nes. "" Then Deass SYS
	@@ define/user_mode $(DBG)PERLSHR SYS$DISK:[]$(DBG)perlshr$(E)
	$(PERL) installperl

archify : all
	@@ Write Sys$Output "Moving files to architecture-specific locations for $(ARCHNAME)"
	archroot = "$(ARCHAUTO)" - "]" + "...]"
	Backup/Log/Verify [.lib.auto...]*.*;/Exclude=(*.al,*.ix) 'archroot'/New_Version
	Delete/Log/NoConfirm [.lib.auto...]*.*;*/exclude=(*.al,*.ix,*.dir)
	Delete/Log/NoConfirm [.lib]Config.pm;*
	Delete/Log/NoConfirm [.lib]Config_heavy.pl;*
	Copy/Log/NoConfirm *$(E);, $(ARCHDIR)
	Delete/Log/NoConfirm Perl*$(E);*
	@@ QUALIFIERS := $(MMSQUALIFIERS)
	@@ QUALIFIERS = QUALIFIERS - """" - """"
	@@ Write Sys$Output "Architecture-specific setup completed."
	@@ Write Sys$Output "Before building for another architecture, be sure to"
	@@ Write Sys$Output "    1. $(MMS)''QUALIFIERS' clean"
	@@ Write Sys$Output "    2. Delete Miniperl$(E)"

# CORE subset for MakeMaker, so we can build Perl without sources

archcore_includes.ts :
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log *.h $(ARCHCORE)
	@@ Copy _NLA0: $(MMS$TARGET)
$(ARCHCORE)$(DBG)libperl$(OLB) : $(DBG)libperl$(OLB) $(DBG)perlshr_xtras.ts
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlshr_attr.opt : $(DBG)perlshr_xtras.ts
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log perlshr_attr.opt $(ARCHCORE)
$(ARCHCORE)$(DBG)perlshr_bld.opt : $(DBG)perlshr_xtras.ts
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(DBG)perlshr_bld.opt $(ARCHCORE)
$(ARCHAUTO)time.stamp :
	@@ If F$Search("$(ARCHDIR)auto.dir").eqs."" Then Create/Directory $(ARCHAUTO)
	@@ If F$Search("$(MMS$TARGET)").eqs."" Then Copy/NoConfirm _NLA0: $(MMS$TARGET)

.ifdef LINK_ONLY
.else
# We need(ed?) an action line here for broken older versions of MMS which
# otherwise conclude that they should be compiling [.x2p]utils.c :-(
#util$(O) : util.c
#	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
# AUTOMATICALLY GENERATED MAKE DEPENDENCIES--PUT NOTHING BELOW THIS LINE
av$(O) : av.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
caretx$(O) : caretx.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
deb$(O) : deb.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
doio$(O) : doio.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
doop$(O) : doop.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
dquote$(O) : dquote.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
dump$(O) : dump.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
globals$(O) : globals.c $(generated_headers) $(h)
        $(CC) $(CORECFLAGS) $(MMS$SOURCE)
gv$(O) : gv.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
mro_core$(O) : mro_core.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
hv$(O) : hv.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
keywords$(O) : keywords.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
locale$(O) : locale.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
malloc$(O) : malloc.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
mathoms$(O) : mathoms.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
mg$(O) : mg.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
miniperlmain$(O) : miniperlmain.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
numeric$(O) : numeric.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pad$(O) : pad.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
op$(O) : op.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perl$(O) : perl.c git_version.h $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlapi$(O) : perlapi.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlio$(O) : perlio.c config.h $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlmain$(O) : perlmain.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perly$(O) : perly.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp$(O) : pp.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_ctl$(O) : pp_ctl.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_hot$(O) : pp_hot.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_pack$(O) : pp_pack.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_sort$(O) : pp_sort.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_sys$(O) : pp_sys.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
reentr$(O) : reentr.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
regcomp$(O) : regcomp.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
regexec$(O) : regexec.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
run$(O) : run.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
scope$(O) : scope.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
sv$(O) : sv.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
taint$(O) : taint.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
time64$(O) : time64.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
toke$(O) : toke.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
universal$(O) : universal.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
utf8$(O) : utf8.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
util$(O) : util.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
vms$(O) : vms.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)

# End of automatically generated make dependencies
.endif # !LINK_ONLY

vmsish.h : [.vms]vmsish.h
	Copy/Log/NoConfirm [.vms]vmsish.h []

vms.c : [.vms]vms.c
	Copy/Log/Noconfirm [.vms]vms.c []

$(CRTL) : $(MAKEFILE)
	@@ @@[.vms]genopt "$(CRTL)/Write" "|" "$(LIBS1)|$(FULLLIBS2)"

ok : $(utils)
	$(MINIPERL) lib/perlbug.com -ok -s "(UNINSTALLED)"

okfile : $(utils)
	$(MINIPERL) lib/perlbug.com -ok -s "(UNINSTALLED)" "-F" perl.ok

nok : $(utils)
	@@ write sys$output " "
	@@ write sys$output " Please type the command:"
	@@ write sys$output " "
	@@ write sys$output "$(MINIPERLQ) lib/perlbug.com -nok -s ""(UNINSTALLED)"""

nokfile : $(utils)
	@@ write sys$output " "
	@@ write sys$output " Please type the command:"
	@@ write sys$output " "
	@@ write sys$output "$(MINIPERLQ) lib/perlbug.com -nok -s ""(UNINSTALLED)"" ""-F"" perl.nok"

cleanlis :
	- If F$Search("*.Lis").nes."" Then Delete/NoConfirm/Log *.Lis;*
	- If F$Search("*.CPP").nes."" Then Delete/NoConfirm/Log *.CPP;*
	- If F$Search("*.Map").nes."" Then Delete/NoConfirm/Log *.Map;*

cleantest :
        - If F$Search("[.t]Perl$(E)").nes."" Then Delete/NoConfirm/Log [.t]Perl$(E);*
        - If F$Search("[.t]VMSPIPE.COM").nes."" Then Delete/NoConfirm/Log [.t]VMSPIPE.COM;*

tidy : cleanlis
	- If F$Search("[...]*.Opt;-1").nes."" Then Purge/NoConfirm/Log [...]*.Opt
	- If F$Search("[...]*$(O);-1").nes."" Then Purge/NoConfirm/Log [...]*$(O)
	- If F$Search("[...]*$(E);-1").nes."" Then Purge/NoConfirm/Log [...]*$(E)
	- If F$Search("config.h;-1").nes."" Then Purge/NoConfirm/Log config.h
	- If F$Search("config.sh;-1").nes."" Then Purge/NoConfirm/Log config.sh
	- If F$Search("vmsish.h;-1").nes."" Then Purge/NoConfirm/Log vmsish.h
	- If F$Search("vms.c;-1")   .nes."" Then Purge/NoConfirm/Log vms.c
	- If F$Search("perlmain.c;-1")   .nes."" Then Purge/NoConfirm/Log perlmain.c
	- If F$Search("uudmap.h;-1")   .nes."" Then Purge/NoConfirm/Log uudmap.h
	- If F$Search("bitcount.h;-1")   .nes."" Then Purge/NoConfirm/Log bitcount.h
	- If F$Search("mg_data.h;-1")   .nes."" Then Purge/NoConfirm/Log mg_data.h
	- If F$Search("Perlshr_Gbl*.Mar;-1")   .nes."" Then Purge/NoConfirm/Log Perlshr_Gbl*.Mar
	- If F$Search("[.ext.Opcode...];-1").nes."" Then Purge/NoConfirm/Log [.ext.Opcode]
	- If F$Search("[.lib.auto...]*.al;-1").nes."" Then Purge/NoConfirm/Log [.lib.auto...]*.al
	- If F$Search("[.lib.auto...]autosplit.ix;-1").nes."" Then Purge/NoConfirm/Log [.lib.auto...]autosplit.ix
	- If F$Search("[.lib]Config.pm;-1").nes."" Then Purge/NoConfirm/Log [.lib]Config.pm
	- If F$Search("$(ARCHDIR)Config.pm;-1").nes."" Then Purge/NoConfirm/Log $(ARCHDIR)Config.pm
	- If F$Search("[.lib]Config_heavy.pl;-1").nes."" Then Purge/NoConfirm/Log [.lib]Config_heavy.pl
	- If F$Search("$(ARCHDIR)Config_heavy.pl;-1").nes."" Then Purge/NoConfirm/Log $(ARCHDIR)Config_heavy.pl
	- If F$Search("[.lib.VMS]*.*;-1").nes."" Then Purge/NoConfirm/Log [.lib.VMS]*.*
	- If F$Search("$(ARCHCORE)*.*").nes."" Then Purge/NoConfirm/Log $(ARCHCORE)*.*
	- If F$Search("[.lib]*.com;-1").nes."" Then Purge/NoConfirm/Log [.lib]*.com
	- If F$Search("[.pod]*.com;-1").nes."" Then Purge/NoConfirm/Log [.pod]*.com
	- If F$Search("[.utils]*.com;-1").nes."" Then Purge/NoConfirm/Log [.utils]*.com
	- If F$Search("[.lib]buildcustomize.pl;-1").nes."" Then Purge/NoConfirm/Log [.lib]buildcustomize.pl

clean : tidy cleantest
      	- $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--all" "--target=clean"
	- If F$Search("*.Opt").nes."" Then Delete/NoConfirm/Log *.Opt;*/Exclude=PerlShr_*.Opt
	- If F$Search("[...]*$(O);*") .nes."" Then Delete/NoConfirm/Log [...]*$(O);*
	- If F$Search("vmsish.h").nes."" Then Delete/NoConfirm/Log vmsish.h;*
	- If F$Search("vms.c")   .nes."" Then Delete/NoConfirm/Log vms.c;*
	- If F$Search("perlmain.c")   .nes."" Then Delete/NoConfirm/Log perlmain.c;*
	- If F$Search("perlmini.c")   .nes."" Then Delete/NoConfirm/Log perlmini.c;*
	- If F$Search("uudmap.h")   .nes."" Then Delete/NoConfirm/Log uudmap.h;*
	- If F$Search("bitcount.h")   .nes."" Then Delete/NoConfirm/Log bitcount.h;*
	- If F$Search("mg_data.h")   .nes."" Then Delete/NoConfirm/Log mg_data.h;*
	- If F$Search("Perlshr_Gbl*.Mar")   .nes."" Then Delete/NoConfirm/Log Perlshr_Gbl*.Mar;*
	- If F$Search("*.TS").nes."" Then Delete/NoConfirm/Log *.TS;*
	- If F$Search("[.pod]*.com").nes."" Then Delete/NoConfirm/Log [.pod]*.com;*
	- If F$Search("[.pod]roffitall").nes."" Then Delete/NoConfirm/Log [.pod]roffitall;*
	- If F$Search("$(PERLDELTA_CURRENT)").nes."" Then Delete/NoConfirm/Log $(PERLDELTA_CURRENT);*
	- If F$Search("[.pod]perlapi.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlapi.pod;*
	- If F$Search("[.pod]perlintern.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlintern.pod;*
	- If F$Search("[.pod]perlmodlib.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlmodlib.pod;*
	- If F$Search("[.pod]perltoc.pod").nes."" Then Delete/NoConfirm/Log [.pod]perltoc.pod;*
	- If F$Search("[.pod]perluniprops.pod").nes."" Then Delete/NoConfirm/Log [.pod]perluniprops.pod;*
	- @@extra_pods CLEAN
	- If F$Search("[.lib]Config_git.pl").nes."" Then Delete/NoConfirm/Log [.lib]Config_git.pl;*
	- If F$Search("git_version.h").nes."" Then Delete/NoConfirm/Log git_version.h;*

realclean : clean
      	- $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--all" "--target=realclean"
	- $(MINIPERL) mkppport "--clean"
	- If F$Search("*$(OLB)").nes."" Then Delete/NoConfirm/Log *$(OLB);*
	- If F$Search("*.Opt").nes."" Then Delete/NoConfirm/Log *.Opt;*
	- If F$Search("config.h").nes."" Then Delete/NoConfirm/Log config.h;*
	- If F$Search("config.sh").nes."" Then Delete/NoConfirm/Log config.sh;*
	- $(MINIPERL) -e "use File::Path; rmtree(\@@ARGV,1,0);" config
	- If F$Search("[.lib.unicore...]*.pl").nes."" Then Delete/NoConfirm/Log [.lib.unicore...]*.pl;*
	- If F$Search("[.lib.unicore]Properties.").nes."" Then Delete/NoConfirm/Log [.lib.unicore]Properties.;*
	- $(MINIPERL) -e "use File::Path; rmtree(\@@ARGV,1,0);" $(unidatadirs)
	- If F$Search("Descrip.MMS").nes."" Then Delete/NoConfirm/Log Descrip.MMS;*
	- If F$Search("extra_pods.Com").nes."" Then Delete/NoConfirm/Log extra_pods.Com;*
	- If F$Search("extra.pods").nes."" Then Delete/NoConfirm/Log extra.pods;*
	- $(MINIPERL) -e "use File::Path; rmtree(['[.CXX_REPOSITORY]', 'lib/auto','lib/VMS','lib/$(ARCHNAME)'],1,0);"
	- If F$Search("*.TS").nes."" Then Delete/NoConfirm/Log *.TS;*
	- If F$Search("[.lib]Config.pm").nes."" Then Delete/NoConfirm/Log [.lib]Config.pm;*
	- If F$Search("[.lib]Config_heavy.pl").nes."" Then Delete/NoConfirm/Log [.lib]Config_heavy.pl;*
	- If F$Search("[.lib]*.com").nes."" Then Delete/NoConfirm/Log [.lib]*.com;*
	- If F$Search("[.lib...].exists").nes."" Then Delete/NoConfirm/Log [.lib...].exists;*
	- If F$Search("[.pod]*.com").nes."" Then Delete/NoConfirm/Log [.pod]*.com;*
	- If F$Search("[.utils]*.com").nes."" Then Delete/NoConfirm/Log [.utils]*.com;*
	- If F$Search("$(ARCHDIR)Config.pm").nes."" Then Delete/NoConfirm/Log $(ARCHDIR)Config.pm;*
	- If F$Search("$(ARCHDIR)Config_heavy.pl").nes."" Then Delete/NoConfirm/Log $(ARCHDIR)Config_heavy.pl;*
	- If F$Search("[.utils]perldoc.com").nes."" Then Delete/NoConfirm/Log [.utils]perldoc.com;*
	- If F$Search("[.utils]perlivp.com").nes."" Then Delete/NoConfirm/Log [.utils]perlivp.com;*
	- If F$Search("[...]*$(E)").nes."" Then Delete/NoConfirm/Log [...]*$(E);*
	- If F$Search("Perl_Setup.Com").nes."" Then Delete/NoConfirm/Log Perl_Setup.Com;*
	- If F$Search("[.t]rantests.").nes."" Then Delete/NoConfirm/Log [.t]rantests.;*
	- If F$Search("[.t]test_state.").nes."" Then Delete/NoConfirm/Log [.t]test_state.;*
	- If F$Search("vmspipe.com").nes."" Then Delete/NoConfirm/Log vmspipe.com;*
	- If F$Search("[.lib]buildcustomize.pl").nes."" Then Delete/NoConfirm/Log [.lib]buildcustomize.pl;*
	- If F$Search("[.lib]config.pod").nes."" Then Delete/NoConfirm/Log [.lib]config.pod;*

cleansrc : clean
	- If F$Search("*.c;-1").nes."" Then Purge/NoConfirm/Log *.c
	- If F$Search("*.h;-1").nes."" Then Purge/NoConfirm/Log *.h
	- If F$Search("*.vms;-1").nes."" Then Purge/NoConfirm/Log *.vms
	- If F$Search("[.vms]$(MAKEFILE);-1").nes."" Then Purge/NoConfirm/Log [.vms]$(MAKEFILE)
	- If F$Search("[.vms]*.c;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.c
	- If F$Search("[.vms]*.h;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.h
	- If F$Search("[.vms]*.pl;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.pl
	- If F$Search("[.vms]*.vms;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.vms
	- If F$Search("[.vms...]*.pm;-1").nes."" Then Purge/NoConfirm/Log [.vms...]*.pm
	- If F$Search("[.vms...]*.xs;-1").nes."" Then Purge/NoConfirm/Log [.vms...]*.xs
!GROK!THIS!
@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d310 1
a310 1
PERLDELTA_CURRENT = [.pod]perl5241delta.pod
@


1.2
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d134 1
a134 1
DBGLINKFLAGS = /Trace/Debug/Map/Full/Cross
a168 1
X2PCFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=(PERL_FOR_X2P,$(LARGEFILE))
a171 1
X2PCFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=PERL_FOR_X2P
d229 1
a229 1
c0 = $(MALLOC_C) av.c caretx.c deb.c doio.c doop.c dump.c globals.c gv.c hv.c mro.c
d232 1
a232 1
c3 = run.c scope.c sv.c taint.c toke.c universal.c utf8.c util.c vms.c keywords.c
d236 1
a236 1
obj1 = $(MALLOC_O) av$(O) caretx$(O) deb$(O) doio$(O) doop$(O) dump$(O) mro$(O) globals$(O) gv$(O) hv$(O) 
d239 1
a239 1
obj4 = regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) toke$(O) universal$(O) utf8$(O) util$(O) vms$(O)
d288 1
a288 1
utils5 = [.utils]corelist.com [.utils]config_data.com [.utils]ptargrep.com [.utils]zipdetails.com
a289 1
.ifdef NOX2P
a294 7
.else
all : base extras x2p archcorefiles preplibrary [.pod]perltoc.pod
	@@ QUALIFIERS := $(MMSQUALIFIERS)
	@@ QUALIFIERS = QUALIFIERS - """" - """"
	@@ write sys$output " "
	@@ write sys$output " Everything is up to date. '$(MMS)''QUALIFIERS' test' to run test suite."
.endif
a306 2
x2p : [.x2p]$(DBG)a2p$(E) [.x2p]s2p.com [.x2p]find2perl.com 
	@@ $(NOOP)
d310 1
a310 1
PERLDELTA_CURRENT = [.pod]perl5203delta.pod
d400 1
a400 2
#  perlshr_attr.opt, $(DBG)perlshr_bld.opt - VAX and AXP
#  perlshr_gbl*.mar, perlshr_gbl*$(O) - VAX only
a462 3
[.utils]config_data.com : [.utils]config_data.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

d475 3
a503 6
[.x2p]find2perl.com : [.x2p]find2perl.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.x2p]s2p.com : [.x2p]s2p.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

a512 29
# Rename catches problem with some DECC versions in which object file is
# placed in current default dir, not same one as source file.
[.x2p]$(DBG)a2p$(E) : [.x2p]a2p$(O), [.x2p]hash$(O), [.x2p]str$(O), [.x2p]util$(O), [.x2p]walk$(O)
	@@ If F$Search("hash$(O)").nes."" Then Rename/NoLog hash$(O),str$(O),util$(O),walk$(O) [.x2p]
	Link $(LINKFLAGS) /Exe=$(MMS$TARGET) $(MMS$SOURCE_LIST) $(CRTLOPTS)

# Accommodate buggy cpp in some version of DECC, which chokes on illegal
# filespec "y.tab.c", and broken gcc cpp, which doesn't start #include ""
# search in same dir as source file
[.x2p]a2p$(O) : [.x2p]a2p.c [.x2p]a2py.c [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h config.h handy.h vmsish.h $(MINIPERL_EXE)
	$(MINIPERL) -pe "s/^#line\s+(\d+)\s+\Q""y.tab.c""/#line $1 ""y_tab.c""/;" $(MMS$SOURCE) >$(MMS$TARGET_NAME)_vms.c
	$(CC) $(X2PCFLAGS) /Object=$(MMS$TARGET)/Include=([.x2p],[],"./x2p") $(MMS$TARGET_NAME)_vms.c
	Delete/Log/NoConfirm $(MMS$TARGET_NAME)_vms.c;

# gcc cpp broken -- doesn't look in directory of source file for #include ""
.ifdef GNUC
[.x2p]hash$(O) : [.x2p]hash.c
	$(CC) $(X2PCFLAGS) /Include=[.x2p] $(MMS$SOURCE)

[.x2p]str$(O) : [.x2p]str.c
	$(CC) $(X2PCFLAGS) /Include=[.x2p] $(MMS$SOURCE)

[.x2p]util$(O) : [.x2p]util.c
	$(CC) $(X2PCFLAGS) /Include=[.x2p] $(MMS$SOURCE)

[.x2p]walk$(O) : [.x2p]walk.c
	$(CC) $(X2PCFLAGS) /Include=[.x2p] $(MMS$SOURCE)
.endif

d583 2
a584 2
	Copy/Log/NoConfirm *$(E);,[.x2p]$(DBG)a2p$(E); $(ARCHDIR)
	Delete/Log/NoConfirm Perl*$(E);*,[.x2p]$(DBG)a2p$(E);*
d613 1
a613 1
# We need an action line here for broken older versions of MMS which
d628 2
d636 1
a636 1
mro$(O) : mro.c $(h)
d694 2
a706 12
[.x2p]hash$(O) : [.x2p]hash.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h
	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

[.x2p]str$(O) : [.x2p]str.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h
	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

[.x2p]util$(O) : [.x2p]util.c [.x2p]EXTERN.h [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h
	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

[.x2p]walk$(O) : [.x2p]walk.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h
	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

a770 1
	- If F$Search("[.x2p]*.com;-1").nes."" Then Purge/NoConfirm/Log [.x2p]*.com
a819 1
	- If F$Search("[.x2p]*.com").nes."" Then Delete/NoConfirm/Log [.x2p]*.com;*
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
# Last revised 27-Feb-1998 by Charles Bailey  bailey@@genetics.upenn.edu
d8 1
a8 2
#: be found in the same directory as this file.  (There should be a pre-made
#: copy of Makefile for VAXC in this directory to allow you to build perl.)
d16 1
a16 1
#	             but leave `installable' files (images, library) intact
d18 1
a18 1
#	cleansrc  -- `realclean' + purge *.c,*.h,descrip.mms
d25 1
d32 7
a38 1
~MT~
d41 5
d61 1
d63 3
a66 1
ARCH = VMS_AXP
a68 1
ARCH = VMS_VAX
d71 1
d76 2
a77 2
MALLOC_O = ,malloc$(O)
MALLOC_C = ,malloc$(C)
d84 3
a86 29
.ifdef SOCKETSHR_SOCKETS
SOCKET=1
.endif

# If they defined SOCKET but didn't choose a stack, default to SOCKETSHR
.ifdef DECC_SOCKETS
.else
.ifdef SOCKETSHR_SOCKETS
.else
.ifdef SOCKET
SOCKETSHR_SOCKETS=1
.endif
.endif
.endif


ARCHDIR =  [.lib.$(ARCH).$(PERL_VERSION)]
ARCHCORE = [.lib.$(ARCH).$(PERL_VERSION).CORE]
ARCHAUTO = [.lib.$(ARCH).$(PERL_VERSION).auto]


#: Backwards compatibility
.ifdef DECC_PIPES_BROKEN
PIPES_BROKEN = 1
.endif

.ifdef __DEBUG__
NOX2P = 1
.endif
a92 1
PIPES_BROKEN = 1
d106 1
a106 2
DBGSPECFLAGS = /Show=All
.ifdef decc
a112 1
	@@ Set Process/Privilege=(NoSYSNAM)
d115 1
d121 3
d125 1
a127 9
.else # VAXC
.first
	@@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("VAXC$Include").eqs."" Then Define/NoLog SYS Sys$Library
	@@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("VAXC$Include").nes."" Then Define/NoLog SYS VAXC$Include

XTRACCFLAGS = /Include=[]/Object=$(O)
XTRADEF =
LIBS2 = Sys$Share:VAXCRTL/Shareable
POSIX =
a128 2
.endif

a141 31
#: SOCKET: build in support for TCP/IP sockets
#: By default, used SOCKETSHR library; see ReadMe.VMS
#: for information on changing socket support
.ifdef SOCKET
.ifdef DECC_SOCKETS
SOCKDEF = 
SOCKLIB = 
.else
SOCKDEF = 
SOCKLIB = SocketShr/Share
.endif
# N.B. the targets for $(SOCKC) and $(SOCKH) assume that the permanent
# copies live in [.vms], and the `clean' target will delete copies of
# these files in the current default directory.
SOCKC = sockadapt.c
SOCKH = sockadapt.h
SOCKCLIS = ,$(SOCKC)
SOCKHLIS = ,$(SOCKH)
SOCKOBJ = ,sockadapt$(O)
SOCKPM = [.lib]Socket.pm
.else
SOCKDEF =
SOCKLIB =
SOCKC =
SOCKH =
SOCKCLIS =
SOCKHLIS =
SOCKOBJ =
SOCKPM =
.endif

d156 6
a161 5
.ifdef FAKETHREADED
THREADDEF = 
THREADH = fakethr.h
acth = $(ARCHCORE)fakethr.h
THREAD = THREAD
d163 1
a163 2
THREADH =
acth =
d167 10
a176 5
CFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)
# Flags for a core compile
X2PCFLAGS = $(CFLAGS)/Define=PERL_FOR_X2P
# Flags for an x2p compile
CORECFLAGS = $(CFLAGS)/Define=PERL_CORE
d187 2
a188 1
XSUBPP = $(MINIPERL) [.lib.extutils]xsubpp -noprototypes
d194 8
d208 1
a208 8
myextobj = [.ext.dynaloader]dl_vms$(O),
#: We include the Socket extension by default if we're building with socket
#: support, since it's small and not really worth bothering to keep track
#: of separately.
.ifdef SOCKET
EXT = $(MYEXT) Socket
extobj = $(myextobj) [.ext.socket]socket$(O), 
.else
a210 1
.endif
d231 23
d255 2
a256 34
h1 = EXTERN.h, INTERN.h, XSUB.h, av.h, bytecode.h, byterun.h, config.h, cop.h, cv.h
h2 = embed.h, form.h, gv.h, handy.h, hv.h, keywords.h, mg.h, op.h, thread.h
h3 = opcode.h, patchlevel.h, perl.h, perly.h, pp.h, proto.h, regcomp.h
h4 = regexp.h, scope.h, sv.h, vmsish.h, util.h, perlsdio.h, perlio.h
h5 = embedvar.h, intrpvar.h, perlvars.h, thrdvar.h, iperlsys.h
h = $(h1), $(h2), $(h3), $(h4), $(h5) $(SOCKHLIS) $(THREADH)

c1 = av.c, scope.c, op.c, doop.c, doio.c, dump.c, hv.c, mg.c, universal.c, perlio.c
c2 = perl.c, perly.c, pp.c, pp_hot.c, pp_ctl.c, pp_sys.c, regcomp.c, regexec.c $(MALLOC_C)
c3 = gv.c, sv.c, taint.c, toke.c, util.c, deb.c, run.c, globals.c, vms.c, byterun.c $(SOCKCLIS)

c = $(c1), $(c2), $(c3), miniperlmain.c, perlmain.c, byteperl.c

obj1 = perl$(O), gv$(O), toke$(O), perly$(O), op$(O), regcomp$(O), dump$(O), util$(O), mg$(O), perlio$(O) $(MALLOC_O)
obj2 = hv$(O), av$(O), run$(O), pp_hot$(O), sv$(O), pp$(O), scope$(O), pp_ctl$(O), pp_sys$(O)
obj3 = doop$(O), doio$(O), regexec$(O), taint$(O), deb$(O), universal$(O), globals$(O), vms$(O), byterun$(O) $(SOCKOBJ)

obj = $(obj1), $(obj2), $(obj3)

ac1 = $(ARCHCORE)EXTERN.h $(ARCHCORE)INTERN.h  $(ARCHCORE)XSUB.h $(ARCHCORE)av.h
ac2 = $(ARCHCORE)config.h $(ARCHCORE)cop.h $(ARCHCORE)cv.h $(ARCHCORE)embed.h
ac3 = $(ARCHCORE)form.h $(ARCHCORE)gv.h $(ARCHCORE)handy.h $(ARCHCORE)hv.h
ac4 = $(ARCHCORE)keywords.h $(ARCHCORE)mg.h $(ARCHCORE)op.h $(ARCHCORE)opcode.h
ac5 = $(ARCHCORE)patchlevel.h $(ARCHCORE)perl.h $(ARCHCORE)perly.h $(ARCHCORE)thread.h $(ARCHCORE)iperlsys.h
ac6 = $(ARCHCORE)pp.h $(ARCHCORE)proto.h $(ARCHCORE)regcomp.h $(ARCHCORE)perlsdio.h $(ARCHCORE)perlio.h
ac7 = $(ARCHCORE)regexp.h $(ARCHCORE)scope.h $(ARCHCORE)sv.h $(ARCHCORE)util.h
ac8  = $(ARCHCORE)embedvar.h $(ARCHCORE)intrpvar.h $(ARCHCORE)perlvars.h $(ARCHCORE)thrdvar.h
ac9  = $(ARCHCORE)vmsish.h $(ARCHCORE)$(DBG)libperl$(OLB) $(ARCHCORE)perlshr_attr.opt
ac10 = $(ARCHCORE)$(DBG)perlshr_bld.opt $(ARCHCORE)bytecode.h $(ARCHCORE)byterun.h
.ifdef SOCKET
acs = $(ARCHCORE)$(SOCKH)
.else
acs =
.endif
d258 1
a271 1

d280 3
d284 1
a284 1
LIBPREREQ = $(ARCHDIR)Config.pm [.lib]DynaLoader.pm [.lib]vmsish.pm [.lib.VMS]Filespec.pm [.lib.ExtUtils]XSSymSet.pm
d286 5
a290 2
utils1 = [.lib.pod]perldoc.com [.lib.ExtUtils]Miniperl.pm [.utils]c2ph.com [.utils]h2ph.com [.utils]h2xs.com [.lib]perlbug.com
utils2 = [.lib]splain.com [.utils]pl2pm.com
d293 5
a297 2
all : base extras archcorefiles preplibrary perlpods
	@@ $(NOOP)
d299 5
a303 2
all : base extras x2p archcorefiles preplibrary perlpods
	@@ $(NOOP)
d305 5
a309 1
base : miniperl perl
d311 1
a311 2
#extras : Fcntl IO Opcode attrs Stdio DCLsym B $(POSIX) $(THREAD) SDBM_File libmods utils podxform
extras : $extensions libmods utils podxform
d315 1
a315 1
utils : $(utils1) $(utils2)
d317 1
a317 1
podxform : [.lib.pod]pod2text.com [.lib.pod]pod2html.com [.lib.pod]pod2latex.com [.lib.pod]pod2man.com
d319 12
a330 1
x2p : [.x2p]a2p$(E) [.x2p]s2p.com [.x2p]find2perl.com 
d333 6
a338 8
pod1 = [.lib.pod]perl.pod [.lib.pod]perlapio.pod [.lib.pod]perlbook.pod [.lib.pod]perlbot.pod [.lib.pod]perlcall.pod
pod2 = [.lib.pod]perldata.pod [.lib.pod]perldebug.pod [.lib.pod]perldelta.pod [.lib.pod]perldiag.pod [.lib.pod]perldsc.pod
pod3 = [.lib.pod]perlembed.pod [.lib.pod]perlform.pod [.lib.pod]perlfunc.pod [.lib.pod]perlguts.pod
pod4 = [.lib.pod]perlipc.pod [.lib.pod]perllocale.pod [.lib.pod]perllol.pod [.lib.pod]perlmod.pod [.lib.pod]perlobj.pod
pod5 = [.lib.pod]perlop.pod [.lib.pod]perlpod.pod [.lib.pod]perlre.pod [.lib.pod]perlref.pod [.lib.pod]perlrun.pod
pod6 = [.lib.pod]perlsec.pod [.lib.pod]perlstyle.pod [.lib.pod]perlsub.pod [.lib.pod]perlsyn.pod
pod7 = [.lib.pod]perltie.pod [.lib.pod]perltoc.pod [.lib.pod]perltoot.pod
pod8 = [.lib.pod]perltrap.pod [.lib.pod]perlvar.pod [.lib.pod]perlxs.pod [.lib.pod]perlxstut.pod
d340 1
a340 1
perlpods : $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) [.lib.pod]perlvms.pod
d343 2
a344 1
archcorefiles :  $(ac1) $(ac2) $(ac3) $(ac4) $(ac5) $(ac6) $(ac7) $(ac8) $(ac9) $(ac10) $(acs) $(acth) $(ARCHAUTO)time.stamp
d347 4
a350 1
miniperl : $(DBG)miniperl$(E)
d352 7
a358 4
$(MINIPERL_EXE) :  miniperlmain$(O), $(DBG)libperl$(OLB) $(CRTL)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MMS$TARGET) miniperlmain$(O), $(DBG)libperl$(OLB)/Library/Include=globals $(CRTLOPTS)
$(DBG)miniperl$(E) :  miniperlmain$(O), $(DBG)libperl$(OLB) $(CRTL)
	Link $(LINKFLAGS)/Trace/Exe=$(MMS$TARGET) miniperlmain$(O),$(DBG)libperl$(OLB)/Library/Include=globals  $(CRTLOPTS)
d362 1
a362 3
	Library/Object/Replace $(MMS$TARGET) $(obj1)
	Library/Object/Replace $(MMS$TARGET) $(obj2)
	Library/Object/Replace $(MMS$TARGET) $(obj3)
d364 3
a366 2
perlmain.c : miniperlmain.c $(MINIPERL_EXE) [.vms]writemain.pl
	$(MINIPERL) [.VMS]Writemain.pl "$(EXT)"
d368 2
a369 2
byteperl.c : [.ext.B]byteperl.c
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d373 2
a374 3
perl : $(DBG)perl$(E) $(DBG)byteperl$(E)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoCross/NoFull/Exe=N$(DBG)perl$(E) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoCross/NoFull/Exe=N$(DBG)byteperl$(E) byteperl$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
d376 1
a376 1
perl : $(DBG)perl$(E) $(DBG)byteperl$(E)
d382 1
a382 9
.ifdef MT
	Link $(LINKFLAGS)/Exe=$(MMS$TARGET) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)/THREAD=(MULTI,UPCALL)
.else
	Link $(LINKFLAGS)/Exe=$(MMS$TARGET) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
.endif

$(DBG)byteperl$(E) : byteperl$(O), $(DBG)perlshr$(E), $(MINIPERL_EXE)
	@@ @@[.vms]genopt "PerlShr.Opt/Write" "|" "''F$Environment("Default")'$(DBG)PerlShr$(E)/Share"
	Link $(LINKFLAGS)/Exe=$(MMS$TARGET) byteperl$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
d387 24
d414 1
a414 14
# The song and dance with gen_shrfls.opt accomodates DCL's 255 character
# line length limit.
.ifdef PIPES_BROKEN
# This is a backup target used only with older versions of the DECCRTL which
# can't deal with pipes properly.  See ReadMe.VMS for details.
$(DBG)perlshr_xtras.ts : perl.h config.h vmsish.h proto.h [.vms]gen_shrfls.pl $(MINIPERL_EXE) $(MAKEFILE) $(CRTL)
	$(CC) $(CFLAGS)/NoObject/NoList/PreProcess=perl.i perl.h
	@@ $(MINIPERL) -e "print join('|',@@ARGV),'|';" "~~NOCC~~perl.i~~$(CC)$(CFLAGS)" >gen_shrfls.opt
	@@ $(MINIPERL) -e "print join('|',@@ARGV);" "$(O)" "$(DBG)" "$(OLB)" "$(EXT)" "$(CRTL)" >>gen_shrfls.opt
	$(MINIPERL) [.vms]gen_shrfls.pl -f gen_shrfls.opt
	@@ Delete/NoLog/NoConfirm perl.i;, gen_shrfls.opt;
	@@ If F$Search("$(DBG)perlshr_xtras.ts").nes."" Then Delete/NoLog/NoConfirm $(DBG)perlshr_xtras.ts;*
	@@ Copy _NLA0: $(DBG)perlshr_xtras.ts
.else
d416 3
a418 2
	@@ $(MINIPERL) -e "print join('|',@@ARGV),'|';" "$(CC)$(CFLAGS)" >gen_shrfls.opt
	@@ $(MINIPERL) -e "print join('|',@@ARGV);" "$(O)" "$(DBG)" "$(OLB)" "$(EXT)" "$(CRTL)" >>gen_shrfls.opt
a422 1
.endif
d424 5
a428 1
$(ARCHDIR)config.pm : [.lib]config.pm
d430 1
a430 1
	Copy $(MMS$SOURCE) $(MMS$TARGET)
d432 1
a432 1
[.lib]config.pm : config.h $(MINIPERL_EXE) [.lib]re.pm
d435 2
a436 2
[.ext.dynaloader]dl_vms.c : [.ext.dynaloader]dl_vms.xs $(ARCHDIR)Config.pm [.lib.ExtUtils]XSSymSet.pm $(MINIPERL_EXE)
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$TARGET)
d438 7
a444 2
[.ext.dynaloader]dl_vms$(O) : [.ext.dynaloader]dl_vms.c
	$(CC) $(CFLAGS) /Include=([],[.ext.dynaloader])/Object=$(MMS$TARGET) $(MMS$SOURCE)
d446 2
a447 8
[.lib]DynaLoader.pm : [.ext.dynaloader]dynaloader.pm
	Copy/Log/NoConfirm [.ext.dynaloader]dynaloader.pm [.lib]DynaLoader.pm
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ $(MINIPERL) -e "use AutoSplit; autosplit_lib_modules(@@ARGV)" [.lib]DynaLoader.pm

[.ext.dynaloader]dynaloader.pm : [.ext.dynaloader]dynaloader_pm.pl
	$(MINIPERL) $(MMS$SOURCE)
	@@ Rename/Log dynaloader.pm [.ext.dynaloader]
d449 2
a450 2
Opcode : [.lib]Opcode.pm [.lib]ops.pm [.lib]Safe.pm [.lib.auto.Opcode]Opcode$(E)
	@@ $(NOOP)
d452 2
a453 27
[.lib]Opcode.pm : [.ext.Opcode]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.Opcode]
	$(MMS)
	@@ Set Default [--]

[.lib]ops.pm : [.ext.Opcode]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.Opcode]
	$(MMS)
	@@ Set Default [--]

[.lib]Safe.pm : [.ext.Opcode]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.Opcode]
	$(MMS)
	@@ Set Default [--]

[.lib.auto.Opcode]Opcode$(E) : [.ext.Opcode]Descrip.MMS
	@@ Set Default [.ext.Opcode]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.Opcode]Descrip.MMS : [.ext.Opcode]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.Opcode]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"
d455 2
a456 2
Fcntl : [.lib]Fcntl.pm [.lib.auto.Fcntl]Fcntl$(E)
	@@ $(NOOP)
d458 2
a459 15
[.lib]Fcntl.pm : [.ext.Fcntl]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.Fcntl]
	$(MMS)
	@@ Set Default [--]

[.lib.auto.Fcntl]Fcntl$(E) : [.ext.Fcntl]Descrip.MMS
	@@ Set Default [.ext.Fcntl]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.Fcntl]Descrip.MMS : [.ext.Fcntl]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.Fcntl]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"
d461 2
a462 2
Stdio : [.lib.vms]Stdio.pm [.lib.auto.vms.Stdio]Stdio$(E) [.t.lib]vms_stdio.t
	@@ $(NOOP)
d464 2
a465 18
[.lib.vms]Stdio.pm : [.vms.ext.stdio]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.vms.ext.Stdio]
	$(MMS)
	@@ Set Default [---]

[.lib.auto.vms.Stdio]Stdio$(E) : [.vms.ext.Stdio]Descrip.MMS
	@@ Set Default [.vms.ext.Stdio]
	$(MMS)
	@@ Set Default [---]

[.t.lib]vms_stdio.t : [.vms.ext.Stdio]test.pl
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.vms.ext.stdio]Descrip.MMS : [.vms.ext.Stdio]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[---.lib]" -e "chdir('[.vms.ext.Stdio]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[---.lib]" "INST_ARCHLIB=[---.lib]"
d467 2
a468 2
DCLsym : [.lib.vms]DCLsym.pm [.lib.auto.vms.DCLsym]DCLsym$(E) [.t.lib]vms_dclsym.t
	@@ $(NOOP)
d470 2
a471 18
[.lib.vms]DCLsym.pm : [.vms.ext.dclsym]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.vms.ext.DCLsym]
	$(MMS)
	@@ Set Default [---]

[.lib.auto.vms.DCLsym]DCLsym$(E) : [.vms.ext.DCLsym]Descrip.MMS
	@@ Set Default [.vms.ext.DCLsym]
	$(MMS)
	@@ Set Default [---]

[.t.lib]vms_dclsym.t : [.vms.ext.DCLsym]test.pl
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.vms.ext.DCLsym]Descrip.MMS : [.vms.ext.DCLsym]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[---.lib]" -e "chdir('[.vms.ext.DCLsym]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[---.lib]" "INST_ARCHLIB=[---.lib]"
d473 2
a474 2
attrs : [.lib]attrs.pm [.lib.auto.attrs]attrs$(E)
	@@ $(NOOP)
d476 2
a477 15
[.lib]attrs.pm : [.ext.attrs]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.attrs]
	$(MMS)
	@@ Set Default [--]

[.lib.auto.attrs]attrs$(E) : [.ext.attrs]Descrip.MMS
	@@ Set Default [.ext.attrs]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.attrs]Descrip.MMS : [.ext.Fcntl]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.attrs]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"
d479 2
a480 2
POSIX : [.lib]POSIX.pm [.lib.auto.POSIX]POSIX$(E)
	@@ $(NOOP)
d482 2
a483 15
[.lib]POSIX.pm : [.ext.POSIX]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.POSIX]
	$(MMS)
	@@ Set Default [--]

[.lib.auto.POSIX]POSIX$(E) : [.ext.POSIX]Descrip.MMS
	@@ Set Default [.ext.POSIX]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.POSIX]Descrip.MMS : [.ext.POSIX]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.POSIX]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"
d485 2
a486 2
Dumper : [.lib.data]dumper.pm [.lib.auto.data.dumper]dumper$(E)
	@@ $(NOOP)
d488 2
a489 15
[.lib.data]dumper.pm : [.ext.data.dumper]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.data.dumper]
	$(MMS)
	@@ Set Default [---]

[.lib.auto.data.dumper]dumper$(E) : [.ext.data.dumper]Descrip.MMS
	@@ Set Default [.ext.data.dumper]
	$(MMS)
	@@ Set Default [---]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.data.dumper]Descrip.MMS : [.ext.data.dumper]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[---.lib]" -e "chdir('[.ext.data.dumper]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[---.lib]" "INST_ARCHLIB=[---.lib]"
d491 2
a492 2
re : [.lib]re.pm [.lib.auto.re]re$(E)
	@@ $(NOOP)
d494 2
a495 14
[.lib]re.pm : [.ext.re]re.pm
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ copy [.ext.re]re.pm [.lib]re.pm   

[.lib.auto.re]re$(E) : [.ext.re]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.re]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.re]Descrip.MMS : [.ext.re]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.re]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"
d497 2
a498 2
THREAD : [.lib]THREAD.pm [.lib.auto.THREAD]THREAD$(E)
	@@ $(NOOP)
d500 2
a501 15
[.lib]THREAD.pm : [.ext.THREAD]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.THREAD]
	$(MMS)
	@@ Set Default [--]

[.lib.auto.THREAD]THREAD$(E) : [.ext.THREAD]Descrip.MMS
	@@ Set Default [.ext.THREAD]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.THREAD]Descrip.MMS : [.ext.THREAD]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.THREAD]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"
d503 3
a505 86
Errno : [.lib]Errno.pm
	@@ $(NOOP)

[.lib]Errno.pm : [.ext.Errno]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.Errno]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.Errno]Descrip.MMS : [.ext.Errno]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.Errno]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"

SDBM_File : [.lib]SDBM_File.pm [.lib.auto.SDBM_File]SDBM_File$(E) 
	@@ $(NOOP)

[.lib]SDBM_File.pm : [.ext.SDBM_File]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ If F$Search("[.lib.auto]sdbm.dir").eqs."" Then Create/Directory [.lib.auto.sdbm]
	@@ Set Default [.ext.SDBM_File]
	$(MMS)
	@@ Set Default [--]

[.lib.auto.SDBM_File]SDBM_File$(E) : [.ext.SDBM_File]Descrip.MMS
	@@ Set Default [.ext.SDBM_File]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.SDBM_File]Descrip.MMS : [.ext.SDBM_File]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.SDBM_File]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"

IO : [.lib]IO.pm [.lib.IO]File.pm [.lib.IO]Handle.pm [.lib.IO]Pipe.pm [.lib.IO]Seekable.pm [.lib.IO]Socket.pm [.lib.auto.IO]IO$(E)
	@@ $(NOOP)

[.lib]IO.pm : [.ext.IO]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.IO]
	$(MMS)
	@@ Set Default [--]

[.lib.IO]File.pm : [.ext.IO]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.IO]
	$(MMS)
	@@ Set Default [--]

[.lib.IO]Handle.pm : [.ext.IO]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.IO]
	$(MMS)
	@@ Set Default [--]

[.lib.IO]Pipe.pm : [.ext.IO]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.IO]
	$(MMS)
	@@ Set Default [--]

[.lib.IO]Seekable.pm : [.ext.IO]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.IO]
	$(MMS)
	@@ Set Default [--]

[.lib.IO]Socket.pm : [.ext.IO]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.IO]
	$(MMS)
	@@ Set Default [--]

[.lib.auto.IO]IO$(E) : [.ext.IO]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.IO]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.IO]Descrip.MMS : [.ext.IO]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.IO]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"

B : [.lib]B.pm [.lib]O.pm [.lib.B]Asmdata.pm [.lib.B]Assembler.pm [.lib.B]Bblock.pm [.lib.B]Bytecode.pm [.lib.B]C.pm [.lib.B]CC.pm [.lib.B]Debug.pm [.lib.B]Deparse.pm [.lib.B]Disassembler.pm [.lib.B]Lint.pm [.lib.B]Showlex.pm [.lib.B]Stackobj.pm [.lib.B]Terse.pm [.lib.B]Xref.pm [.lib.auto.B]B$(E)
	@@ $(NOOP)
d507 2
a508 138
[.lib]B.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib]O.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Asmdata.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Assembler.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Bblock.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Bytecode.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]C.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]CC.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Debug.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Deparse.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Disassembler.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Lint.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Showlex.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Stackobj.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Terse.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.B]Xref.pm : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

[.lib.auto.B]B$(E) : [.ext.B]Descrip.MMS
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ Set Default [.ext.B]
	$(MMS)
	@@ Set Default [--]

# Add "-I[--.lib]" t $(MINIPERL) so we use this copy of lib after C<chdir>
# ${@@} necessary to distract different versions of MM[SK]/make
[.ext.B]Descrip.MMS : [.ext.B]Makefile.PL $(LIBPREREQ) $(DBG)perlshr$(E)
	$(MINIPERL) "-I[--.lib]" -e "chdir('[.ext.B]') or die $!; do 'Makefile.PL'; print ${@@} if ${@@};" "INST_LIB=[--.lib]" "INST_ARCHLIB=[--.lib]"

[.lib]vmsish.pm : [.vms.ext]vmsish.pm
	Copy/Log/NoConfirm $(MMS$SOURCE) $(MMS$TARGET)

[.lib.VMS]Filespec.pm : [.vms.ext]Filespec.pm
	@@ If F$Search("[.lib]VMS.Dir").eqs."" Then Create/Directory [.lib.VMS]
	Copy/Log/NoConfirm $(MMS$SOURCE) $(MMS$TARGET)

[.lib.ExtUtils]XSSymSet.pm : [.vms.ext]XSSymSet.pm
	@@ If F$Search("[.lib]VMS.Dir").eqs."" Then Create/Directory [.lib.VMS]
	Copy/Log/NoConfirm $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perldoc.com : [.utils]perldoc.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.utils]perldoc.com $(MMS$TARGET)

[.lib.ExtUtils]Miniperl.pm : Minimod.PL miniperlmain.c $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE) >$(MMS$TARGET)

[.utils]c2ph.com : [.utils]c2ph.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]h2ph.com : [.utils]h2ph.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]h2xs.com : [.utils]h2xs.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.lib]perlbug.com : [.utils]perlbug.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.utils]perlbug.com $(MMS$TARGET)
d511 1
a511 1
	$(MINIPERL) $(MMS$SOURCE)
d514 2
a515 2
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.utils]splain.com $(MMS$TARGET)
d518 1
a518 1
	$(MINIPERL) $(MMS$SOURCE)
d521 10
a530 1
	$(MINIPERL) $(MMS$SOURCE)
d538 1
a538 1
# Accomodate buggy cpp in some version of DECC, which chokes on illegal
d541 1
a541 1
[.x2p]a2p$(O) : [.x2p]a2p.c $(MINIPERL_EXE)
d543 1
a543 1
	$(CC) $(X2PCFLAGS) /Object=$(MMS$TARGET)/Include=([.x2p],[]) $(MMS$TARGET_NAME)_vms.c
d561 10
a570 168
[.lib.pod]pod2html.com : [.pod]pod2html.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.pod]pod2html.com $(MMS$TARGET)

[.lib.pod]pod2latex.com : [.pod]pod2latex.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.pod]pod2latex.com $(MMS$TARGET)

[.lib.pod]pod2man.com : [.pod]pod2man.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.pod]pod2man.com $(MMS$TARGET)

[.lib.pod]pod2text.com : [.pod]pod2text.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.pod]pod2text.com $(MMS$TARGET)

preplibrary : $(MINIPERL_EXE) $(LIBPREREQ) $(SOCKPM)
	@@ Write Sys$Output "Autosplitting Perl library . . ."
	@@ Create/Directory [.lib.auto]
	@@ $(MINIPERL) -e "use AutoSplit; autosplit_lib_modules(@@ARGV)" [.lib]*.pm [.lib.*]*.pm

[.lib.pod]perl.pod : [.pod]perl.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlapio.pod : [.pod]perlapio.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlbook.pod : [.pod]perlbook.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlbot.pod : [.pod]perlbot.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlcall.pod : [.pod]perlcall.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perldata.pod : [.pod]perldata.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perldebug.pod : [.pod]perldebug.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perldelta.pod : [.pod]perldelta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perldiag.pod : [.pod]perldiag.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perldsc.pod : [.pod]perldsc.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlembed.pod : [.pod]perlembed.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlform.pod : [.pod]perlform.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlfunc.pod : [.pod]perlfunc.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlguts.pod : [.pod]perlguts.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perllocale.pod : [.pod]perllocale.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlipc.pod : [.pod]perlipc.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perllol.pod : [.pod]perllol.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlmod.pod : [.pod]perlmod.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlobj.pod : [.pod]perlobj.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlop.pod : [.pod]perlop.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlpod.pod : [.pod]perlpod.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlre.pod : [.pod]perlre.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlref.pod : [.pod]perlref.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlrun.pod : [.pod]perlrun.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlsec.pod : [.pod]perlsec.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlstyle.pod : [.pod]perlstyle.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlsub.pod : [.pod]perlsub.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlsyn.pod : [.pod]perlsyn.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perltie.pod : [.pod]perltie.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perltoc.pod : [.pod]perltoc.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perltoot.pod : [.pod]perltoot.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perltrap.pod : [.pod]perltrap.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlvar.pod : [.pod]perlvar.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlxs.pod : [.pod]perlxs.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlxstut.pod : [.pod]perlxstut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

[.lib.pod]perlvms.pod : [.vms]perlvms.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	@@ Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d574 1
a574 1
        @@ @@[.vms]myconfig "$(CC)" "$(CFLAGS)" "$(LINKFLAGS)" "$(LIBS1)" "$(FULLLIBS2)" "$(SOCKLIB)" "$(EXT)" "$(DBG)"
d576 11
a586 1
.ifdef SOCKET
d588 2
a589 8
.ifdef LINK_ONLY
.else
[.ext.Socket]Socket$(O) : [.ext.Socket]Socket.c
	$(CC) $(CFLAGS) /Object=$(MMS$TARGET) $(MMS$SOURCE)

[.ext.Socket]Socket.c : [.ext.Socket]Socket.xs [.lib.ExtUtils]XSSymSet.pm $(MINIPERL_EXE)
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$TARGET)
.endif # !LINK_ONLY
a590 22
vmsish.h : $(SOCKH)

$(SOCKOBJ) : $(SOCKC) EXTERN.h perl.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h perlio.h

$(SOCKC) : [.vms]$(SOCKC)
	Copy/Log/NoConfirm [.vms]$(SOCKC) []$(SOCKC)

$(SOCKH) : [.vms]$(SOCKH)
	Copy/Log/NoConfirm [.vms]$(SOCKH) []$(SOCKH)

[.lib]Socket.pm : [.ext.Socket]Socket.pm
	Copy/Log/NoConfirm $(MMS$SOURCE) $(MMS$TARGET)
.endif

# The following three header files are generated automatically
#	keywords.h :	keywords.pl
#	opcode.h :	opcode.pl
#	embed.h :	embed.pl global.sym interp.sym
# The correct versions should be already supplied with the perl kit,
# in case you don't have perl available.
# To force them to run, type
#	MMS regen_headers
d592 1
a592 20
	$(INSTPERL) keywords.pl
	$(INSTPERL) opcode.pl
	$(INSTPERL) embed.pl

# VMS uses modified perly.[ch] with tags for globaldefs if using DEC compiler
perly.c : [.vms]perly_c.vms
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
perly.h : [.vms]perly_h.vms
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

# I now supply perly.c with the kits, so the following section is
# commented out if you don't have byacc.
# Altered for VMS by Charles Bailey  bailey@@genetics.upenn.edu
# perly.c:
# 	@@ Write Sys$Output "Expect 80 shift/reduce and 62 reduce/reduce conflicts"
# 	\$(BYACC) -d perly.y
# Has to be done by hand or by POSIX shell under VMS
# 	sh \$(shellflags) ./perly.fixer y.tab.c perly.c
# 	rename y.tab.h perly.h
# 	$(INSTPERL) [.vms]vms_yfix.pl perly.c perly.h [.vms]perly_c.vms [.vms]perly_h.vms
d599 2
a600 2
[.t.lib]vmsfspec.t : [.vms.ext]filespec.t
	Copy/Log/NoConfirm $(MMS$SOURCE) $(MMS$TARGET)
d602 13
a614 5
[.t.lib]vmsish.t : [.vms.ext]vmsish.t
	Copy/Log/NoConfirm $(MMS$SOURCE) $(MMS$TARGET)

test : all [.t.lib]vmsfspec.t [.t.lib]vmsish.t
	- @@[.VMS]Test.Com "$(E)"
d618 5
a622 2
install : $(MINIPERL_EXE)
	$(MINIPERL) installperl
d625 1
a625 1
	@@ Write Sys$Output "Moving files to architecture-specific locations for $(ARCH)"
d630 5
a634 2
	Copy/Log/NoConfirm *$(E);,[.x2p]a2p$(E); $(ARCHDIR)
	Delete/Log/NoConfirm Perl*$(E);*,[.x2p]a2p$(E);*
d637 1
a637 1
	@@ Write Sys$Output "    1. $(MMS)$(MMSQUALIFIERS) clean"
d641 2
a642 94
# Should move to VMS installperl when we get one
$(ARCHCORE)EXTERN.h : EXTERN.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)INTERN.h : INTERN.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)XSUB.h : XSUB.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)bytecode.h : bytecode.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)byterun.h : byterun.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)av.h : av.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)config.h : config.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)cop.h : cop.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)cv.h : cv.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)embed.h : embed.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)embedvar.h : embedvar.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
.ifdef FAKETHREADED
$(ARCHCORE)fakethr.h : fakethr.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
.endif
$(ARCHCORE)form.h : form.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)gv.h : gv.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)handy.h : handy.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)hv.h : hv.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)intrpvar.h : intrpvar.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)keywords.h : keywords.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)mg.h : mg.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)op.h : op.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)opcode.h : opcode.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)patchlevel.h : patchlevel.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)perl.h : perl.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)iperlsys.h : iperlsys.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)perlsdio.h : perlsdio.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)perlio.h : perlio.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)perlvars.h : perlvars.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)perly.h : perly.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)pp.h : pp.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)proto.h : proto.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)regcomp.h : regcomp.h
d644 2
a645 27
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)regexp.h : regexp.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)scope.h : scope.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)sv.h : sv.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)thrdvar.h : thrdvar.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)thread.h : thread.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)util.h : util.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)vmsish.h : vmsish.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
.ifdef SOCKET
$(ARCHCORE)$(SOCKH) : $(SOCKH)
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
.endif
d648 1
a648 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d651 1
a651 1
	Copy/Log perlshr_attr.opt $(MMS$TARGET)
d654 1
a654 1
	Copy/Log $(DBG)perlshr_bld.opt $(MMS$TARGET)
d666 11
a676 1
av$(O) : av.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d678 11
a688 2

byterun$(O) : byterun.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d690 1
a690 2

deb$(O) : deb.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d692 1
a692 2

doio$(O) : doio.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d694 1
a694 2

doop$(O) : doop.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d696 1
a696 2

dump$(O) : dump.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d698 1
a698 2

globals$(O) : globals.c INTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d700 1
a700 2

gv$(O) : gv.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d702 1
a702 2

hv$(O) : hv.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d704 1
a704 2

malloc$(O) : malloc.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d706 1
a706 2

mg$(O) : mg.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d708 1
a708 2

miniperlmain$(O) : miniperlmain.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d710 1
a710 2

op$(O) : op.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d712 1
a712 2

perl$(O) : perl.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h patchlevel.h iperlsys.h
d714 1
a714 2

perlio$(O) : perlio.c config.h EXTERN.h perl.h bytecode.h byterun.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d716 1
a716 2

perlmain$(O) : perlmain.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d718 1
a718 2

byteperl$(O) : byteperl.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d720 1
a720 2

perly$(O) : perly.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d722 1
a722 2

pp$(O) : pp.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d724 1
a724 2

pp_ctl$(O) : pp_ctl.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d726 1
a726 2

pp_hot$(O) : pp_hot.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d728 1
a728 2

pp_sys$(O) : pp_sys.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d730 1
a730 2

regcomp$(O) : regcomp.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h INTERN.h regcomp.h iperlsys.h
d732 1
a732 2

regexec$(O) : regexec.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h regcomp.h iperlsys.h
d734 1
a734 2

run$(O) : run.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d736 1
a736 2

scope$(O) : scope.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d738 1
a738 2

sv$(O) : sv.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d740 1
a740 2

taint$(O) : taint.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d742 1
a742 2

toke$(O) : toke.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h keywords.h iperlsys.h
d744 1
a744 2

universal$(O) : universal.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h XSUB.h iperlsys.h
d746 1
a746 2

util$(O) : util.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h iperlsys.h
d748 1
a748 2

vms$(O) : vms.c EXTERN.h perl.h bytecode.h byterun.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h XSUB.h iperlsys.h
d751 1
a751 4
#[.x2p]a2p$(O) : [.x2p]a2p.c [.x2p]a2py.c [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h config.h handy.h
#	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

[.x2p]hash$(O) : [.x2p]hash.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h
d754 1
a754 1
[.x2p]str$(O) : [.x2p]str.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h
d757 1
a757 1
[.x2p]util$(O) : [.x2p]util.c [.x2p]EXTERN.h [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h
d760 1
a760 1
[.x2p]walk$(O) : [.x2p]walk.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h
d767 1
a767 1
	Copy/Log/NoConfirm [.vms]vmsish.h []vmsish.h
d773 4
a776 1
	@@ @@[.vms]genopt "$(CRTL)/Write" "|" "$(LIBS1)|$(FULLLIBS2)|$(SOCKLIB)"
d778 14
d798 4
d806 8
a813 8
	- If F$Search("Config.H;-1").nes."" Then Purge/NoConfirm/Log Config.H
	- If F$Search("Config.SH;-1").nes."" Then Purge/NoConfirm/Log Config.SH
	- If F$Search("perly.c;-1").nes."" Then Purge/NoConfirm/Log perly.c
	- If F$Search("perly.h;-1").nes."" Then Purge/NoConfirm/Log perly.h
	- If F$Search("VMSish.H;-1").nes."" Then Purge/NoConfirm/Log VMSish.H
	- If F$Search("VMS.C;-1")   .nes."" Then Purge/NoConfirm/Log VMS.C
	- If F$Search("Perlmain.C;-1")   .nes."" Then Purge/NoConfirm/Log Perlmain.C
	- If F$Search("byteperl.C;-1")   .nes."" Then Purge/NoConfirm/Log byteperl.C
d815 4
a818 11
	- If F$Search("[.Ext.DynaLoader]DL_VMS$(O);-1").nes."" Then Purge/NoConfirm/Log [.Ext.DynaLoader]DL_VMS$(O)
	- If F$Search("[.Ext.DynaLoader]DL_VMS.C;-1").nes."" Then Purge/NoConfirm/Log [.Ext.DynaLoader]DL_VMS.C
	- If F$Search("[.Ext.Socket]Socket.C;-1").nes."" Then Purge/NoConfirm/Log [.Ext.DynaLoader]DL_VMS.C
	- If F$Search("[.Ext.Opcode...];-1").nes."" Then Purge/NoConfirm/Log [.Ext.Opcode]
	- If F$Search("[.VMS.Ext...]*.C;-1").nes."" Then Purge/NoConfirm/Log [.VMS.Ext...]*.C
	- If F$Search("[.VMS.Ext...]*$(O);-1").nes."" Then Purge/NoConfirm/Log [.VMS.Ext...]*$(O)
	- If F$Search("[.Lib.Auto...]*.al;-1").nes."" Then Purge/NoConfirm/Log [.Lib.Auto...]*.al
	- If F$Search("[.Lib.Auto...]autosplit.ix;-1").nes."" Then Purge/NoConfirm/Log [.Lib.Auto...]autosplit.ix
	- If F$Search("[.Lib]DynaLoader.pm;-1").nes."" Then Purge/NoConfirm/Log [.Lib]DynaLoader.pm
	- If F$Search("[.Lib]Socket.pm;-1").nes."" Then Purge/NoConfirm/Log [.Lib]Socket.pm
	- If F$Search("[.Lib]Config.pm;-1").nes."" Then Purge/NoConfirm/Log [.Lib]Config.pm
d820 3
a822 4
	- If F$Search("[.lib.ExtUtils]Miniperl.pm").nes."" Then Purge/NoConfirm/Log [.lib.ExtUtils]Miniperl.pm
	- If F$Search("[.lib.ExtUtils]XSSymSet.pm").nes."" Then Purge/NoConfirm/Log [.lib.ExtUtils]XSSymSet.pm
	- If F$Search("[.Lib.VMS]*.*;-1").nes."" Then Purge/NoConfirm/Log [.Lib.VMS]*.*
	- If F$Search("[.Lib.Pod]*.Pod;-1").nes."" Then Purge/NoConfirm/Log [.Lib.Pod]*.Pod
d828 1
a828 1
	- If F$Search("[.lib.pod]*.com;-1").nes."" Then Purge/NoConfirm/Log [.lib.pod]*.com
d830 2
a831 44
clean : tidy
	Set Default [.ext.Fcntl]
	- $(MMS) clean
	Set Default [--]
	Set Default [.ext.Errno]
	- $(MMS) clean
	Set Default [--]
	Set Default [.ext.IO]
	- $(MMS) clean
	Set Default [--]
	Set Default [.ext.Opcode]
	- $(MMS) clean
	Set Default [--]
	Set Default [.ext.attrs]
	- $(MMS) clean
	Set Default [--]
	Set Default [.ext.B]
	- $(MMS) clean
	Set Default [--]
.ifdef THREAD
	Set Default [.ext.Thread]
	- $(MMS) realclean
	Set Default [--]
.endif
.ifdef DECC
	Set Default [.ext.POSIX]
	- $(MMS) clean
	Set Default [--]
.endif
	Set Default [.ext.SDBM_File]
	- $(MMS) clean
	Set Default [--]
	Set Default [.vms.ext.Stdio]
	- $(MMS) clean
	Set Default [---]
	Set Default [.vms.ext.DCLsym]
	- $(MMS) clean
	Set Default [---]
    Set Default [.ext.re]
    - $(MMS) clean
    Set Default [--]
    Set Default [.ext.dumper]
    - $(MMS) clean
    Set Default [--]
d834 7
a840 8
	- If F$Search(F$Parse("Sys$Disk:[]","$(SOCKH)")).nes."" Then Delete/NoConfirm/Log $(SOCKH);*
	- If F$Search(F$Parse("Sys$Disk:[]","$(SOCKC)")).nes."" Then Delete/NoConfirm/Log $(SOCKC);*
	- If F$Search("perly.c").nes."" Then Delete/NoConfirm/Log perly.c;*
	- If F$Search("perly.h").nes."" Then Delete/NoConfirm/Log perly.h;*
	- If F$Search("VMSish.H").nes."" Then Delete/NoConfirm/Log VMSish.H;*
	- If F$Search("VMS.C")   .nes."" Then Delete/NoConfirm/Log VMS.C;*
	- If F$Search("Perlmain.C")   .nes."" Then Delete/NoConfirm/Log Perlmain.C;*
	- If F$Search("byteperl.C")   .nes."" Then Delete/NoConfirm/Log byteperl.C;*
a842 6
	- If F$Search("[.Ext.DynaLoader]DL_VMS$(O)").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]DL_VMS$(O);*
	- If F$Search("[.Ext.DynaLoader]DL_VMS.C").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]DL_VMS.C;*
	- If F$Search("[.Ext.Socket]Socket$(O)").nes."" Then Delete/NoConfirm/Log [.Ext.Socket]Socket$(O);*
	- If F$Search("[.Ext.Socket]Socket.C").nes."" Then Delete/NoConfirm/Log [.Ext.Socket]Socket.C;*
	- If F$Search("[.VMS.Ext...]*.C").nes."" Then Delete/NoConfirm/Log [.VMS.Ext...]*.C;*
	- If F$Search("[.VMS.Ext...]*$(O)").nes."" Then Delete/NoConfirm/Log [.VMS.Ext...]*$(O);*
d844 14
a857 45

realclean : tidy
	Set Default [.ext.Fcntl]
	- $(MMS) realclean
	Set Default [--]
	Set Default [.ext.Errno]
	- $(MMS) realclean
	Set Default [--]
	Set Default [.ext.IO]
	- $(MMS) realclean
	Set Default [--]
	Set Default [.ext.Opcode]
	- $(MMS) realclean
	Set Default [--]
	Set Default [.ext.attrs]
	- $(MMS) realclean
	Set Default [--]
	Set Default [.ext.B]
	- $(MMS) realclean
	Set Default [--]
.ifdef THREAD
	Set Default [.ext.Thread]
	- $(MMS) realclean
	Set Default [--]
.endif
.ifdef DECC
	Set Default [.ext.POSIX]
	- $(MMS) realclean
	Set Default [--]
.endif
	Set Default [.ext.SDBM_File]
	- $(MMS) realclean
	Set Default [--]
	Set Default [.vms.ext.Stdio]
	- $(MMS) realclean
	Set Default [---]
	Set Default [.vms.ext.DCLsym]
	- $(MMS) realclean
	Set Default [---]
	Set Default [.ext.dumper]
	- $(MMS) realclean
	Set Default [--]
	Set Default [.ext.re]
	- $(MMS) realclean
	Set Default [--]
d860 16
a875 8
	- If F$Search("Config.H").nes."" Then Delete/NoConfirm/Log Config.H;*
	- If F$Search("Config.SH").nes."" Then Delete/NoConfirm/Log Config.SH;*
	- If F$Search("descrip.mms").nes."" Then Delete/NoConfirm/Log descrip.mms;*
	- $(MINIPERL) -e "use File::Path; rmtree(['lib/auto','lib/VMS','lib/$(ARCH)'],1,0);"
	- If F$Search("[.Lib]DynaLoader.pm").nes."" Then Delete/NoConfirm/Log [.Lib]DynaLoader.pm;*
	- If F$Search("[.Lib]Socket.pm").nes."" Then Delete/NoConfirm/Log [.Lib]Socket.pm;*
	- If F$Search("[.Lib]Config.pm").nes."" Then Delete/NoConfirm/Log [.Lib]Config.pm;*
	- If F$Search("[.Lib]*.com").nes."" Then Delete/NoConfirm/Log [.Lib]*.com;*
d879 3
a881 6
	- If F$Search("[.lib.ExtUtils]Miniperl.pm").nes."" Then Delete/NoConfirm/Log [.lib.ExtUtils]Miniperl.pm;*
	- If F$Search("[.lib.ExtUtils]XSSymSet.pm").nes."" Then Delete/NoConfirm/Log [.lib.ExtUtils]XSSymSet.pm;*
	- If F$Search("[.lib.pod]*.pod").nes."" Then Delete/NoConfirm/Log [.lib.pod]*.pod;*
	- If F$Search("[.lib.pod]perldoc.com").nes."" Then Delete/NoConfirm/Log [.lib.pod]perldoc.com;*
	- If F$Search("[.lib.pod]pod2*.com").nes."" Then Delete/NoConfirm/Log [.lib.pod]pod2*.com;*
	- If F$Search("[.t.lib]vms*.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vms*.t;*
d883 6
d891 10
a900 10
	- If F$Search("*.C;-1").nes."" Then Purge/NoConfirm/Log *.C
	- If F$Search("*.H;-1").nes."" Then Purge/NoConfirm/Log *.H
	- If F$Search("*.VMS;-1").nes."" Then Purge/NoConfirm/Log *.VMS
	- If F$Search("[.VMS]$(MAKEFILE);-1").nes."" Then Purge/NoConfirm/Log [.VMS]$(MAKEFILE)
	- If F$Search("[.VMS]*.C;-1").nes."" Then Purge/NoConfirm/Log [.VMS]*.C
	- If F$Search("[.VMS]*.H;-1").nes."" Then Purge/NoConfirm/Log [.VMS]*.H
	- If F$Search("[.VMS]*.Pl;-1").nes."" Then Purge/NoConfirm/Log [.VMS]*.Pl
	- If F$Search("[.VMS]*.VMS;-1").nes."" Then Purge/NoConfirm/Log [.VMS]*.VMS
	- If F$Search("[.VMS...]*.pm;-1").nes."" Then Purge/NoConfirm/Log [.VMS...]*.pm
	- If F$Search("[.VMS...]*.xs;-1").nes."" Then Purge/NoConfirm/Log [.VMS...]*.xs
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
# Last revised 01-Mar-2000 by Charles Bailey  bailey@@newman.upenn.edu
d8 2
a9 1
#: be found in the same directory as this file.
a32 1
~FLAGS~
d62 2
a63 2
MALLOC_O = malloc$(O)
MALLOC_C = malloc$(C)
d120 1
d127 1
a129 1
	@@ Set Process/Privilege=(NoSYSNAM)
d138 10
d179 3
a181 2
SOCKARCH = $(ARCHCORE)$(SOCKH)
SOCKO = sockadapt$(O)
d188 3
a190 2
SOCKARCH =
SOCKO =
d219 1
a219 1
CFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)
d234 1
a234 1
XSUBPP = $(MINIPERL) "-I[.ext.re]" [.lib.extutils]xsubpp -noprototypes
a240 4
# Space-separated list of "dynamic" extensions which should be built for
# run-time dynamic loading.
dynamic_ext = $extensions

d277 22
a298 25
c0 = $(MALLOC_C) $(SOCKC) av.c deb.c doio.c doop.c dump.c globals.c gv.c
c1 = hv.c mg.c miniperlmain.c op.c perl.c perlio.c perly.c pp.c pp_ctl.c
c2 = pp_hot.c pp_sys.c regcomp.c regexec.c run.c scope.c sv.c taint.c
c3 = toke.c universal.c utf8.c util.c vms.c xsutils.c
c = $(c0) $(c1) $(c2) $(c3)

obj0 = $(MALLOC_O) $(SOCKO) av$(O) deb$(O) doio$(O) doop$(O) dump$(O)
obj1 = globals$(O) gv$(O) hv$(O) mg$(O) miniperlmain$(O) op$(O) perl$(O)
obj2 = perlio$(O) perly$(O) pp$(O) pp_ctl$(O) pp_hot$(O) pp_sys$(O) regcomp$(O)
obj3 = regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) toke$(O) universal$(O)
obj4 = utf8$(O) util$(O) vms$(O) xsutils$(O)
obj = $(obj0) $(obj1) $(obj2) $(obj3) $(obj4)

h0 = av.h cc_runtime.h config.h cop.h cv.h embed.h embedvar.h
h1 = extern.h form.h gv.h handy.h hv.h intern.h intrpvar.h
h2 = iperlsys.h keywords.h mg.h nostdio.h objxsub.h op.h opcode.h opnames.h
h3 = patchlevel.h perl.h perlapi.h perlio.h perlsdio.h perlvars.h perly.h
h4 = pp.h pp_proto.h proto.h regcomp.h regexp.h regnodes.h scope.h
h5 = sv.h thrdvar.h thread.h utf8.h util.h vmsish.h warnings.h
h6 = xsub.h $(SOCKH) $(THREADH)
h = $(h0) $(h1) $(h2) $(h3) $(h4) $(h5) $(h6)

ac0 = $(ARCHCORE)$(sockh) $(ARCHCORE)av.h $(ARCHCORE)cc_runtime.h
ac1 = $(ARCHCORE)config.h $(ARCHCORE)cop.h $(ARCHCORE)cv.h $(ARCHCORE)embed.h
ac2 = $(ARCHCORE)embedvar.h $(ARCHCORE)extern.h $(acth)
d300 13
a312 13
ac4 = $(ARCHCORE)intern.h $(ARCHCORE)intrpvar.h $(ARCHCORE)iperlsys.h
ac5 = $(ARCHCORE)keywords.h $(ARCHCORE)mg.h $(ARCHCORE)nostdio.h
ac6 = $(ARCHCORE)objxsub.h $(ARCHCORE)op.h $(ARCHCORE)opcode.h
ac7 = $(ARCHCORE)opnames.h $(ARCHCORE)patchlevel.h $(ARCHCORE)perl.h
ac8 = $(ARCHCORE)perlapi.h $(ARCHCORE)perlio.h $(ARCHCORE)perlsdio.h
ac9 = $(ARCHCORE)perlvars.h $(ARCHCORE)perly.h $(ARCHCORE)pp.h
ac10 = $(ARCHCORE)pp_proto.h $(ARCHCORE)proto.h $(ARCHCORE)regcomp.h
ac11 = $(ARCHCORE)regexp.h $(ARCHCORE)regnodes.h $(ARCHCORE)scope.h
ac12 = $(ARCHCORE)sv.h $(ARCHCORE)thrdvar.h $(SOCKARCH)
ac13 = $(ARCHCORE)thread.h $(ARCHCORE)utf8.h $(ARCHCORE)util.h
ac14 = $(ARCHCORE)vmsish.h $(ARCHCORE)warnings.h $(ARCHCORE)xsub.h
acopt = $(ARCHCORE)perlshr_attr.opt $(ARCHCORE)$(DBG)perlshr_bld.opt
ac = $(ac0) $(ac1) $(ac2) $(ac3) $(ac4) $(ac5) $(ac6) $(ac7) $(ac8) $(ac9) $(ac10) $(ac11) $(ac12) $(ac13) $(ac14) $(acopt)
d336 1
a336 1
LIBPREREQ = $(ARCHDIR)Config.pm [.lib]DynaLoader.pm [.lib]XSLoader.pm [.lib]vmsish.pm [.lib.VMS]Filespec.pm [.lib.ExtUtils]XSSymSet.pm
d338 1
a338 1
utils1 = [.lib.pod]perldoc.com [.lib.ExtUtils]Miniperl.pm [.utils]c2ph.com [.utils]h2ph.com [.utils]h2xs.com [.lib]perlbug.com [.lib]perlcc.com [.utils]dprofpp.com
d350 2
a351 1
extras : dynext libmods utils podxform
d357 1
a357 1
podxform : [.lib.pod]pod2text.com [.lib.pod]pod2html.com [.lib.pod]pod2latex.com [.lib.pod]pod2man.com [.lib.pod]podchecker.com [.lib.pod]pod2usage.com [.lib.pod]podselect.com
d362 8
a369 23
pod0 = [.lib.pod]perl.pod [.lib.pod]perl5004delta.pod [.lib.pod]perl5005delta.pod
pod1 = [.lib.pod]perlapi.pod [.lib.pod]perlapio.pod [.lib.pod]perlbook.pod
pod2 = [.lib.pod]perlbot.pod [.lib.pod]perlcall.pod [.lib.pod]perlcompile.pod
pod3 = [.lib.pod]perldata.pod [.lib.pod]perldbmfilter.pod [.lib.pod]perldebug.pod
pod4 = [.lib.pod]perldelta.pod [.lib.pod]perldiag.pod [.lib.pod]perldsc.pod
pod5 = [.lib.pod]perlembed.pod [.lib.pod]perlfaq.pod [.lib.pod]perlfaq1.pod
pod6 = [.lib.pod]perlfaq2.pod [.lib.pod]perlfaq3.pod [.lib.pod]perlfaq4.pod
pod7 = [.lib.pod]perlfaq5.pod [.lib.pod]perlfaq6.pod [.lib.pod]perlfaq7.pod
pod8 = [.lib.pod]perlfaq8.pod [.lib.pod]perlfaq9.pod [.lib.pod]perlfilter.pod
pod9 = [.lib.pod]perlfork.pod [.lib.pod]perlform.pod [.lib.pod]perlfunc.pod
pod10 = [.lib.pod]perlguts.pod [.lib.pod]perlhack.pod [.lib.pod]perlhist.pod
pod11 = [.lib.pod]perlintern.pod [.lib.pod]perlipc.pod [.lib.pod]perllexwarn.pod
pod12 = [.lib.pod]perllocale.pod [.lib.pod]perllol.pod [.lib.pod]perlmod.pod
pod13 = [.lib.pod]perlmodinstall.pod [.lib.pod]perlmodlib.pod [.lib.pod]perlobj.pod
pod14 = [.lib.pod]perlop.pod [.lib.pod]perlopentut.pod [.lib.pod]perlpod.pod
pod15 = [.lib.pod]perlport.pod [.lib.pod]perlre.pod [.lib.pod]perlref.pod
pod16 = [.lib.pod]perlreftut.pod [.lib.pod]perlrun.pod [.lib.pod]perlsec.pod
pod17 = [.lib.pod]perlstyle.pod [.lib.pod]perlsub.pod [.lib.pod]perlsyn.pod
pod18 = [.lib.pod]perlthrtut.pod [.lib.pod]perltie.pod [.lib.pod]perltoc.pod
pod19 = [.lib.pod]perltodo.pod [.lib.pod]perltoot.pod [.lib.pod]perltootc.pod
pod20 = [.lib.pod]perltrap.pod [.lib.pod]perlunicode.pod [.lib.pod]perlvar.pod
pod21 = [.lib.pod]perlxs.pod [.lib.pod]perlxstut.pod [.lib.pod]win32.pod [.lib.pod]perlvms.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21)
d371 1
a371 1
perlpods : $(pod)
d374 1
a374 1
archcorefiles : $(ac) $(acth) $(ARCHAUTO)time.stamp
d386 3
a388 1
	Library/Object/Replace $(MMS$TARGET) $(MMS$SOURCE_LIST)
d393 3
d398 1
a398 1
perl : $(DBG)perl$(E)
d400 1
d402 1
a402 1
perl : $(DBG)perl$(E)
d414 4
d424 1
a424 1
# The song and dance with gen_shrfls.opt accommodates DCL's 255 character
d451 1
a451 1
[.lib]config.pm : config.h $(MINIPERL_EXE)
a464 5
[.lib]XSLoader.pm : [.ext.dynaloader]xsloader.pm
	Copy/Log/NoConfirm [.ext.dynaloader]xsloader.pm [.lib]XSLoader.pm
	@@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@@ $(MINIPERL) -e "use AutoSplit; autosplit_lib_modules(@@ARGV)" [.lib]XSLoader.pm

d469 364
a832 3
[.ext.dynaloader]xsloader.pm : [.ext.dynaloader]xsloader_pm.pl
	$(MINIPERL) $(MMS$SOURCE)
	@@ Rename/Log xsloader.pm [.ext.dynaloader]
d834 16
a849 2
dynext : $(LIBPREREQ) $(DBG)perlshr$(E)
	@@build_ext "$(dynamic_ext)" "$(MINIPERL_EXE)" "$(MMS)"
a872 3
[.utils]dprofpp.com : [.utils]dprofpp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

a882 4
[.lib]perlcc.com : [.utils]perlcc.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.utils]perlcc.com $(MMS$TARGET)

d902 1
a902 1
# Accommodate buggy cpp in some version of DECC, which chokes on illegal
d905 1
a905 1
[.x2p]a2p$(O) : [.x2p]a2p.c [.x2p]a2py.c [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h config.h handy.h vmsish.h $(SOCKH) $(MINIPERL_EXE)
a944 15
[.lib.pod]podchecker.com : [.pod]podchecker.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.pod]podchecker.com $(MMS$TARGET)

[.lib.pod]pod2usage.com : [.pod]pod2usage.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.pod]pod2usage.com $(MMS$TARGET)

[.lib.pod]podselect.com : [.pod]podselect.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/Log [.pod]podselect.com $(MMS$TARGET)

d952 2
a953 10
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perl5004delta.pod : [.pod]perl5004delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perl5005delta.pod : [.pod]perl5005delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlapi.pod : [.pod]perlapi.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d956 2
a957 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d960 2
a961 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d964 2
a965 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d968 2
a969 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlcompile.pod : [.pod]perlcompile.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d972 2
a973 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perldbmfilter.pod : [.pod]perldbmfilter.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d976 2
a977 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d980 2
a981 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d984 2
a985 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d988 2
a989 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d992 2
a993 37
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq.pod : [.pod]perlfaq.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq1.pod : [.pod]perlfaq1.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq2.pod : [.pod]perlfaq2.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq3.pod : [.pod]perlfaq3.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq4.pod : [.pod]perlfaq4.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq5.pod : [.pod]perlfaq5.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq6.pod : [.pod]perlfaq6.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq7.pod : [.pod]perlfaq7.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq8.pod : [.pod]perlfaq8.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfaq9.pod : [.pod]perlfaq9.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfilter.pod : [.pod]perlfilter.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlfork.pod : [.pod]perlfork.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d996 2
a997 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1000 2
a1001 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1004 3
a1006 2
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlhack.pod : [.pod]perlhack.pod
d1008 2
a1009 7
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlhist.pod : [.pod]perlhist.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlintern.pod : [.pod]perlintern.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1012 2
a1013 7
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perllexwarn.pod : [.pod]perllexwarn.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perllocale.pod : [.pod]perllocale.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1016 2
a1017 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1020 2
a1021 7
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlmodinstall.pod : [.pod]perlmodinstall.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlmodlib.pod : [.pod]perlmodlib.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1024 2
a1025 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1028 2
a1029 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlopentut.pod : [.pod]perlopentut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1032 2
a1033 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlport.pod : [.pod]perlport.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1036 2
a1037 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1040 2
a1041 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlreftut.pod : [.pod]perlreftut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1044 2
a1045 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1048 2
a1049 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1052 2
a1053 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1056 2
a1057 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1060 2
a1061 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlthrtut.pod : [.pod]perlthrtut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1064 2
a1065 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1068 2
a1069 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perltodo.pod : [.pod]perltodo.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1072 2
a1073 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perltootc.pod : [.pod]perltootc.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1076 2
a1077 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlunicode.pod : [.pod]perlunicode.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1080 2
a1081 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1084 2
a1085 1
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1088 2
a1089 4
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]win32.pod : [.pod]win32.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1092 1
a1092 6
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

install.html : $(perlpods)
	@@ @@perl_setup.com
	@@ If F$Search("perl_root:[lib]html.dir").eqs."" Then Create/Directory perl_root:[lib.html]
	$(MINIPERL) installhtml. "--podroot=. --recurse --htmldir=/perl_root/lib/html --htmlroot=.. --verbose"
d1111 1
a1111 1
$(SOCKO) : $(SOCKC) EXTERN.h perl.h config.h embed.h perlsdio.h handy.h vmsish.h regexp.h sv.h util.h form.h gv.h cv.h opcode.h opnames.h op.h cop.h av.h hv.h mg.h scope.h perly.h thread.h pp.h proto.h embedvar.h perlvars.h thrdvar.h intrpvar.h perlio.h
d1123 4
a1126 14
# The following files are generated automatically
#	keywords.h:	keywords.pl
#	opcode.h:	opcode.pl
#	opnames.h:	opcode.pl
#	pp_proto.h:	opcode.pl
#	pp.sym:		opcode.pl
#	embed.h:  	embed.pl  [* needs pp.sym generated by opcode.pl! *]
#	embedvar.h:  	embed.pl  [* needs pp.sym generated by opcode.pl! *]
#	ext/ByteLoader/byterun.h:	bytecode.pl
#	ext/ByteLoader/byterun.c:	bytecode.pl
#	ext/B/Asmdata.pm:	bytecode.pl
#	global.sym:	embed.pl
#	regnodes.h:	regcomp.pl
#	warnings.h lib/warnings.pm:	warnings.pl
a1134 3
	$(INSTPERL) bytecode.pl
	$(INSTPERL) regcomp.pl
	$(INSTPERL) warnings.pl
d1142 11
d1165 1
a1165 1
	- @@[.VMS]Test.Com "$(E)" "$(__DEBUG__)"
a1169 2
	@@ @@perl_setup.com
	If F$TrnLnm("Sys") .nes. "" Then Deass SYS
d1187 10
a1196 2
.ifdef SOCKET
$(SOCKARCH) : $(SOCKH)
d1199 1
a1199 2
.endif
$(ARCHCORE)av.h : av.h
d1202 1
a1202 1
$(ARCHCORE)cc_runtime.h : cc_runtime.h
a1219 3
$(ARCHCORE)extern.h : extern.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a1236 3
$(ARCHCORE)intern.h : intern.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a1239 3
$(ARCHCORE)iperlsys.h : iperlsys.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a1245 6
$(ARCHCORE)nostdio.h : nostdio.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)objxsub.h : objxsub.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a1251 3
$(ARCHCORE)opnames.h : opnames.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1258 1
a1258 1
$(ARCHCORE)perlapi.h : perlapi.h
d1261 1
a1261 1
$(ARCHCORE)perlio.h : perlio.h
d1264 1
a1264 1
$(ARCHCORE)perlsdio.h : perlsdio.h
a1275 3
$(ARCHCORE)pp_proto.h : pp_proto.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a1284 3
$(ARCHCORE)regnodes.h : regnodes.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a1296 3
$(ARCHCORE)utf8.h : utf8.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d1303 2
a1304 4
$(ARCHCORE)warnings.h : warnings.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
$(ARCHCORE)xsub.h : xsub.h
d1307 1
d1328 1
a1328 2
.ifdef SOCKET
$(SOCKO) : $(SOCKC) extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1330 2
a1331 2
.endif
av$(O) : av.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1333 2
a1334 1
deb$(O) : deb.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1336 2
a1337 1
doio$(O) : doio.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1339 2
a1340 1
doop$(O) : doop.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1342 2
a1343 1
dump$(O) : dump.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h regcomp.h regnodes.h
d1345 2
a1346 1
globals$(O) : globals.c intern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h perlapi.h
d1348 2
a1349 1
gv$(O) : gv.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1351 2
a1352 1
hv$(O) : hv.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1354 2
a1355 1
mg$(O) : mg.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1357 2
a1358 1
miniperlmain$(O) : miniperlmain.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1360 2
a1361 1
op$(O) : op.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h keywords.h
d1363 2
a1364 1
perl$(O) : perl.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h patchlevel.h intrpvar.h thrdvar.h
d1366 2
a1367 1
perlio$(O) : perlio.c config.h extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1369 2
a1370 1
perlmain$(O) : perlmain.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1372 2
a1373 1
perly$(O) : perly.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1375 2
a1376 1
pp$(O) : pp.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1378 2
a1379 1
pp_ctl$(O) : pp_ctl.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1381 2
a1382 1
pp_hot$(O) : pp_hot.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1384 2
a1385 1
pp_sys$(O) : pp_sys.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1387 2
a1388 1
regcomp$(O) : regcomp.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h intern.h regcomp.h regnodes.h
d1390 2
a1391 1
regexec$(O) : regexec.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h regcomp.h regnodes.h
d1393 2
a1394 1
run$(O) : run.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1396 2
a1397 1
scope$(O) : scope.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1399 2
a1400 1
sv$(O) : sv.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1402 2
a1403 1
taint$(O) : taint.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1405 2
a1406 1
toke$(O) : toke.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h keywords.h
d1408 2
a1409 1
universal$(O) : universal.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h xsub.h perlapi.h objxsub.h
d1411 2
a1412 1
utf8$(O) : utf8.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1414 2
a1415 1
util$(O) : util.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1417 2
a1418 1
vms$(O) : vms.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
d1420 2
a1421 1
xsutils$(O) : xsutils.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h xsub.h perlapi.h objxsub.h
d1424 4
a1427 1
[.x2p]hash$(O) : [.x2p]hash.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h $(SOCKH)
d1430 1
a1430 1
[.x2p]str$(O) : [.x2p]str.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h $(SOCKH)
d1433 1
a1433 1
[.x2p]util$(O) : [.x2p]util.c [.x2p]EXTERN.h [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h $(SOCKH)
d1436 1
a1436 1
[.x2p]walk$(O) : [.x2p]walk.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h $(SOCKH)
d1468 1
a1478 1
	- If F$Search("[.Lib]XSLoader.pm;-1").nes."" Then Purge/NoConfirm/Log [.Lib]XSLoader.pm
d1494 43
a1536 1
	- @@build_ext "$(dynamic_ext)" "$(MINIPERL_EXE)" "$(MMS)" clean
a1541 1
	- Copy [.vms]perly_c.vms []perly.c
a1542 1
	- Copy [.vms]perly_h.vms []perly.h
d1546 1
a1550 2
	- If F$Search("[.Ext.DynaLoader]DynaLoader.pm").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]DynaLoader.pm;*
	- If F$Search("[.Ext.DynaLoader]XSLoader.pm").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]XSLoader.pm;*
d1557 44
a1600 2
realclean : clean
	- @@build_ext "$(dynamic_ext)" "$(MINIPERL_EXE)" "$(MMS)" realclean
d1605 1
a1605 3
	- $(MINIPERL) -e "use File::Path; rmtree(\@@ARGV,1,0);" config
	- If F$Search("Descrip.MMS").nes."" Then Delete/NoConfirm/Log Descrip.MMS;*
	- If F$Search("Build_Ext.Com").nes."" Then Delete/NoConfirm/Log Build_Ext.Com;*
a1606 1
	- If F$Search("*.TS").nes."" Then Delete/NoConfirm/Log *.TS;*
a1607 1
	- If F$Search("[.Lib]XSLoader.pm").nes."" Then Delete/NoConfirm/Log [.Lib]XSLoader.pm;*
a1610 1
	- If F$Search("[.pod]*.com").nes."" Then Delete/NoConfirm/Log [.pod]*.com;*
a1620 1
	- If F$Search("[.vms]Perl_Setup.Com").nes."" Then Delete/NoConfirm/Log [.vms]Perl_Setup.Com;*
a1622 1
!GROK!THIS!
d1633 1
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@a24 1
~DECCXX~
a133 3
.ifdef DECCXX
XTRACCFLAGS = /Include=[]/Standard=ANSI/Prefix=All/Obj=$(OBJVAL)
.else
a134 1
.endif
a220 1
MINIPERLQ = MCR $(MINIPERL_EXE) ""-I[.lib]""
d269 1
a269 1
c1 = hv.c mg.c miniperlmain.c op.c perl.c perlapi.c perlio.c perly.c pp.c pp_ctl.c
d275 1
a275 1
obj1 = globals$(O) gv$(O) hv$(O) mg$(O) miniperlmain$(O) op$(O) perl$(O) perlapi$(O)
a301 1
.ifdef SOCKARCH
a302 3
.else
ac12 = $(ARCHCORE)sv.h $(ARCHCORE)thrdvar.h
.endif 
d330 1
a330 1
LIBPREREQ = $(ARCHDIR)Config.pm [.lib.VMS]Filespec.pm [.lib]DynaLoader.pm [.lib]XSLoader.pm [.lib]vmsish.pm [.lib.ExtUtils]XSSymSet.pm $(ARCHDIR)vmspipe.com [.lib]re.pm
d337 1
a337 2
	@@ write sys$output " "
	@@ write sys$output " Everything is up to date. '$(MMS)$(MMSQUALIFIERS) test' to run test suite."
d340 1
a340 2
	@@ write sys$output " "
	@@ write sys$output " Everything is up to date. '$(MMS)$(MMSQUALIFIERS) test' to run test suite."
d344 1
a344 1
extras : dynext libmods utils podxform extra.pods
a353 2
extra.pods : miniperl
	@@ @@extra_pods.com
d385 1
a385 7
[.lib]re.pm  : [.ext.re]re.pm
	copy/log $(MMS$SOURCE) $(MMS$TARGET)

vmspipe.com : [.vms]vmspipe.com
	copy/log $(MMS$SOURCE) $(MMS$TARGET)

miniperl : $(DBG)miniperl$(E)  vmspipe.com
a451 3
$(ARCHDIR)vmspipe.com : vmspipe.com
        Copy $(MMS$SOURCE) $(MMS$TARGET)

d477 1
a477 1
	@@make_ext "$(dynamic_ext)" "$(MINIPERL_EXE)" "$(MMS)"
d795 1
a795 1
[.lib.pod]win32.pod : [.lib]win32.pod
a878 3
check : test
	@@ Continue

a880 1
	@@ $(MINIPERL) -e "print ""Ran tests"";" > [.t]rantests.
a1085 2
malloc$(O) : malloc.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
a1093 2
perlapi$(O) : perlapi.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h patchlevel.h intrpvar.h thrdvar.h
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
a1157 19
ok : $(utils)
	$(MINIPERL) lib/perlbug.com -ok -s "(UNINSTALLED)"

okfile : $(utils)
	$(MINIPERL) lib/perlbug.com -ok -s "(UNINSTALLED)" "-F" perl.ok

nok : $(utils)
	@@ write sys$output " "
	@@ write sys$output " Please type the command:"
	@@ write sys$output " "
	@@ write sys$output "$(MINIPERLQ) lib/perlbug.com -nok -s ""(UNINSTALLED)"""

nokfile : $(utils)
	@@ write sys$output " "
	@@ write sys$output " Please type the command:"
	@@ write sys$output " "
	@@ write sys$output "$(MINIPERLQ) lib/perlbug.com -nok -s ""(UNINSTALLED)"" ""-F"" perl.nok"


a1162 5
cleantest :
        - If F$Search("[.t]Perl.").nes."" Then Delete/NoConfirm/Log [.t]Perl.;*
        - If F$Search("[.t]VMSPIPE.COM").nes."" Then Delete/NoConfirm/Log [.t]VMSPIPE.COM;*
        - If F$Search("[.t]Echo.exe").nes."" Then Delete/NoConfirm/Log [.t]Echo.exe;*

d1199 2
a1200 2
clean : tidy cleantest
	- @@make_ext "$(dynamic_ext)" "$(MINIPERL_EXE)" "$(MMS)" clean
a1222 1
	- @@extra_pods CLEAN
d1225 1
a1225 1
	- @@make_ext "$(dynamic_ext)" "$(MINIPERL_EXE)" "$(MMS)" realclean
d1232 1
a1232 2
	- If F$Search("make_ext.Com").nes."" Then Delete/NoConfirm/Log make_ext.Com;*
	- If F$Search("extra_pods.Com").nes."" Then Delete/NoConfirm/Log extra_pods.Com;*
a1251 1
	- If F$Search("[.t]rantests.").nes."" Then Delete/NoConfirm/Log [.t]rantests.;*
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d234 4
d244 7
d253 1
d274 4
a277 4
c0 = $(MALLOC_C) $(SOCKC) av.c deb.c doio.c doop.c dump.c globals.c gv.c hv.c
c1 = mg.c locale.c miniperlmain.c numeric.c op.c perl.c perlapi.c perlio.c
c2 = perly.c pp.c pp_ctl.c pp_hot.c pp_pack.c pp_sort.c pp_sys.c regcomp.c regexec.c reentr.c
c3 = run.c scope.c sv.c taint.c toke.c universal.c utf8.c util.c vms.c xsutils.c
d281 4
a284 4
obj1 = globals$(O) gv$(O) hv$(O) locale$(O) mg$(O) miniperlmain$(O) numeric$(O)
obj2 = op$(O) perl$(O) perlapi$(O) perlio$(O) perly$(O) pp$(O) pp_ctl$(O) pp_hot$(O) reentr$(O)
obj3 = pp_pack$(O) pp_sort$(O) pp_sys$(O) regcomp$(O) regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) toke$(O)
obj4 = universal$(O) utf8$(O) util$(O) vms$(O) xsutils$(O)
d289 1
a289 1
h2 = iperlsys.h keywords.h mg.h nostdio.h op.h opcode.h opnames.h
d302 1
a302 1
ac6 = $(ARCHCORE)op.h $(ARCHCORE)opcode.h
d340 1
a340 1
LIBPREREQ = $(ARCHDIR)Config.pm [.lib.VMS]Filespec.pm [.lib]DynaLoader.pm [.lib]XSLoader.pm [.lib]lib.pm [.lib.ExtUtils]XSSymSet.pm $(ARCHDIR)vmspipe.com [.lib]re.pm
d342 2
a343 4
utils1 = [.lib.pod]perldoc.com [.lib.ExtUtils]Miniperl.pm [.utils]c2ph.com [.utils]h2ph.com 
utils2 = [.utils]h2xs.com [.utils]libnetcfg.com [.lib]perlbug.com [.lib]perlcc.com [.utils]dprofpp.com 
utils3 = [.utils]perlivp.com [.lib]splain.com [.utils]pl2pm.com [.lib.ExtUtils]xsubpp.com
utils4 = [.utils]enc2xs.com [.utils]piconv.com
d360 1
a360 1
utils : $(utils1) $(utils2) $(utils3) $(utils4)
d388 2
a389 2
pod19 = [.lib.pod]perltodo.pod [.lib.pod]perltoot.pod [.lib.pod]perltooc.pod
pod20 = [.lib.pod]perltrap.pod [.lib.pod]perlunicode.pod [.lib.pod]perluniintro.pod [.lib.pod]perlvar.pod
d391 1
a391 3
pod22 = [.lib.pod]perldebguts.pod [.lib.pod]perldebtut.pod [.lib.pod]perlebcdic.pod [.lib.pod]perliol.pod
pod23 = [.lib.pod]perlnewmod.pod [.lib.pod]perlnumber.pod [.lib.pod]perlrequick.pod [.lib.pod]perlretut.pod [.lib.pod]perlutil.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21) $(pod22) $(pod23)
d499 2
a500 2
dynext : $(LIBPREREQ) $(DBG)perlshr$(E) preplibrary
       @@make_ext "$(MINIPERL_EXE)" "$(MMS)"
d502 2
a503 2
[.lib]lib.pm : [.lib]lib_pm.PL
	$(MINIPERL) $(MMS$SOURCE)
a520 3
[.utils]perlivp.com : [.utils]perlivp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

a526 3
[.utils]enc2xs.com : [.utils]enc2xs.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

a532 3
[.utils]libnetcfg.com : [.utils]libnetcfg.PL $(ARCHDIR)Config.pm
       $(MINIPERL) $(MMS$SOURCE)

a540 3
[.utils]piconv.com : [.utils]piconv.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

a553 3
[.lib.ExtUtils]xsubpp.com : [.lib.ExtUtils]xsubpp 
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)

d618 1
a618 1
preplibrary : $(MINIPERL_EXE) $(LIBPREREQ) 
a658 6
[.lib.pod]perldebguts.pod : [.pod]perldebguts.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perldebtut.pod : [.pod]perldebtut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a667 3
[.lib.pod]perlebcdic.pod : [.pod]perlebcdic.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a724 3
[.lib.pod]perliol.pod : [.pod]perliol.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a745 6
[.lib.pod]perlnewmod.pod : [.pod]perlnewmod.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlnumber.pod : [.pod]perlnumber.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
a769 6
[.lib.pod]perlrequick.pod : [.pod]perlrequick.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlretut.pod : [.pod]perlretut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d800 1
a800 1
[.lib.pod]perltooc.pod : [.pod]perltooc.pod
a808 6
[.lib.pod]perluniintro.pod : [.pod]perluniintro.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
[.lib.pod]perlutil.pod : [.pod]perlutil.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d836 9
d855 2
d899 1
a899 4
[.t.lib]vms_dclsym.t : [.vms.ext.DCLsym]test.pl
	Copy/Log/NoConfirm $(MMS$SOURCE) $(MMS$TARGET)

[.t.lib]vms_stdio.t : [.vms.ext.Stdio]test.pl
d905 1
a905 1
test : all [.t.lib]vmsfspec.t [.t.lib]vms_dclsym.t [.t.lib]vms_stdio.t
d933 2
a934 2
       @@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
       Copy/Log $(MMS$SOURCE) $(MMS$TARGET)
d995 3
a1112 2
locale$(O) : locale.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
a1118 2
numeric$(O) : numeric.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h keywords.h
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
d1137 1
a1137 3
pp_pack$(O) : pp_pack.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
pp_sort$(O) : pp_sort.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h
pp_sys$(O) : pp_sys.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h reentr.h
a1138 1
reentr(O) : reentr.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h intern.h reentr.h
d1153 1
a1153 1
universal$(O) : universal.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h xsub.h perlapi.h
d1161 1
a1161 1
xsutils$(O) : xsutils.c extern.h perl.h config.h embed.h handy.h vmsish.h $(SOCKH) iperlsys.h perlsdio.h perl.h regexp.h sv.h util.h form.h gv.h cv.h opnames.h op.h cop.h av.h hv.h mg.h scope.h warnings.h utf8.h perly.h thread.h pp.h proto.h pp_proto.h opcode.h embedvar.h intrpvar.h thrdvar.h perlvars.h patchlevel.h xsub.h perlapi.h
d1232 1
d1240 1
d1255 1
a1255 1
	- @@make_ext "$(MINIPERL_EXE)" "$(MMS)" clean
d1273 2
d1281 1
a1281 1
	- @@make_ext "$(MINIPERL_EXE)" "$(MMS)" realclean
d1294 1
a1304 1
	- If F$Search("[.utils]perlivp.com").nes."" Then Delete/NoConfirm/Log [.utils]perlivp.com;*
a1309 4
	- If F$Search("[.t.lib]vmsfspec.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vmsfspec.t;*
	- If F$Search("[.t.lib]vmsish.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vmsish.t;*
	- If F$Search("[.t.lib]vms_dclsym.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vms_dclsym.t;*
	- If F$Search("[.t.lib]vms_stdio.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vms_stdio.t;*
d1312 1
a1322 1
!GROK!THIS!
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 1
# Last revised 5-Dec-2001 by Craig Berry -- craigberry@@mac.com
d97 4
d203 1
d207 1
d263 1
a263 1
c1 = mg.c locale.c miniperlmain.c numeric.c op.c pad.c perl.c perlapi.c perlio.c
d269 2
a270 2
obj1 = globals$(O) gv$(O) hv$(O) locale$(O) mg$(O) miniperlmain$(O) numeric$(O) op$(O) pad$(O)
obj2 = perl$(O) perlapi$(O) perlio$(O) perly$(O) pp$(O) pp_ctl$(O) pp_hot$(O) reentr$(O)
d276 2
a277 2
h1 = EXTERN.h form.h gv.h handy.h hv.h INTERN.h intrpvar.h
h2 = iperlsys.h keywords.h mg.h nostdio.h op.h opcode.h opnames.h pad.h
d286 1
a286 1
ac2 = $(ARCHCORE)embedvar.h $(ARCHCORE)EXTERN.h $(ARCHCORE)fakethr.h
d288 1
a288 1
ac4 = $(ARCHCORE)INTERN.h $(ARCHCORE)intrpvar.h $(ARCHCORE)iperlsys.h
d290 2
a291 2
ac6 = $(ARCHCORE)op.h $(ARCHCORE)opcode.h $(ARCHCORE)opnames.h 
ac7 = $(ARCHCORE)pad.h $(ARCHCORE)patchlevel.h $(ARCHCORE)perl.h
d293 1
a293 4
ac9 = $(ARCHCORE)perlsfio.h $(ARCHCORE)perlvars.h $(ARCHCORE)perly.h $(ARCHCORE)pp.h
.ifdef THREADED
ac10 = $(ARCHCORE)pp_proto.h $(ARCHCORE)proto.h $(ARCHCORE)reentr.h $(ARCHCORE)regcomp.h
.else
a294 1
.endif
d333 1
a333 1
utils4 = [.utils]enc2xs.com [.utils]piconv.com [.utils]cpan.com
a336 2
	@@ QUALIFIERS := $(MMSQUALIFIERS)
	@@ QUALIFIERS = QUALIFIERS - """" - """"
d338 1
a338 1
	@@ write sys$output " Everything is up to date. '$(MMS)''QUALIFIERS' test' to run test suite."
a340 2
	@@ QUALIFIERS := $(MMSQUALIFIERS)
	@@ QUALIFIERS = QUALIFIERS - """" - """"
d342 1
a342 1
	@@ write sys$output " Everything is up to date. '$(MMS)''QUALIFIERS' test' to run test suite."
d354 1
a354 1
x2p : [.x2p]$(DBG)a2p$(E) [.x2p]s2p.com [.x2p]find2perl.com 
d359 25
a383 24
pod0 = [.lib.pod]perl.pod [.lib.pod]perl5004delta.pod [.lib.pod]perl5005delta.pod [.lib.pod]perl561delta.pod [.lib.pod]perl56delta.pod
pod1 = [.lib.pod]perl570delta.pod [.lib.pod]perl571delta.pod [.lib.pod]perl572delta.pod [.lib.pod]perl573delta.pod [.lib.pod]perl581delta.pod
pod2 = [.lib.pod]perl58delta.pod [.lib.pod]perlaix.pod [.lib.pod]perlamiga.pod [.lib.pod]perlapi.pod [.lib.pod]perlapio.pod [.lib.pod]perlapollo.pod
pod3 = [.lib.pod]perlartistic.pod [.lib.pod]perlbeos.pod [.lib.pod]perlbook.pod [.lib.pod]perlboot.pod [.lib.pod]perlbot.pod [.lib.pod]perlbs2000.pod
pod4 = [.lib.pod]perlcall.pod [.lib.pod]perlce.pod [.lib.pod]perlcheat.pod [.lib.pod]perlclib.pod [.lib.pod]perlcn.pod [.lib.pod]perlcompile.pod
pod5 = [.lib.pod]perlcygwin.pod [.lib.pod]perldata.pod [.lib.pod]perldbmfilter.pod [.lib.pod]perldebguts.pod [.lib.pod]perldebtut.pod
pod6 = [.lib.pod]perldebug.pod [.lib.pod]perldelta.pod [.lib.pod]perldgux.pod [.lib.pod]perldiag.pod [.lib.pod]perldoc.pod [.lib.pod]perldos.pod
pod7 = [.lib.pod]perldsc.pod [.lib.pod]perlebcdic.pod [.lib.pod]perlembed.pod [.lib.pod]perlepoc.pod [.lib.pod]perlfaq.pod [.lib.pod]perlfaq1.pod
pod8 = [.lib.pod]perlfaq2.pod [.lib.pod]perlfaq3.pod [.lib.pod]perlfaq4.pod [.lib.pod]perlfaq5.pod [.lib.pod]perlfaq6.pod [.lib.pod]perlfaq7.pod
pod9 = [.lib.pod]perlfaq8.pod [.lib.pod]perlfaq9.pod [.lib.pod]perlfilter.pod [.lib.pod]perlfork.pod [.lib.pod]perlform.pod [.lib.pod]perlfreebsd.pod
pod10 = [.lib.pod]perlfunc.pod [.lib.pod]perlgpl.pod [.lib.pod]perlguts.pod [.lib.pod]perlhack.pod [.lib.pod]perlhist.pod [.lib.pod]perlhpux.pod
pod11 = [.lib.pod]perlhurd.pod [.lib.pod]perlintern.pod [.lib.pod]perlintro.pod [.lib.pod]perliol.pod [.lib.pod]perlipc.pod [.lib.pod]perlirix.pod
pod12 = [.lib.pod]perljp.pod [.lib.pod]perlko.pod [.lib.pod]perllexwarn.pod [.lib.pod]perllocale.pod [.lib.pod]perllol.pod [.lib.pod]perlmachten.pod
pod13 = [.lib.pod]perlmacos.pod [.lib.pod]perlmacosx.pod [.lib.pod]perlmint.pod [.lib.pod]perlmod.pod [.lib.pod]perlmodinstall.pod [.lib.pod]perlmodlib.pod
pod14 = [.lib.pod]perlmodstyle.pod [.lib.pod]perlmpeix.pod [.lib.pod]perlnetware.pod [.lib.pod]perlnewmod.pod [.lib.pod]perlnumber.pod [.lib.pod]perlobj.pod
pod15 = [.lib.pod]perlop.pod [.lib.pod]perlopentut.pod [.lib.pod]perlos2.pod [.lib.pod]perlos390.pod [.lib.pod]perlos400.pod [.lib.pod]perlothrtut.pod
pod16 = [.lib.pod]perlpacktut.pod [.lib.pod]perlplan9.pod [.lib.pod]perlpod.pod [.lib.pod]perlpodspec.pod [.lib.pod]perlport.pod [.lib.pod]perlqnx.pod
pod17 = [.lib.pod]perlre.pod [.lib.pod]perlref.pod [.lib.pod]perlreftut.pod [.lib.pod]perlrequick.pod [.lib.pod]perlreref.pod [.lib.pod]perlretut.pod
pod18 = [.lib.pod]perlrun.pod [.lib.pod]perlsec.pod [.lib.pod]perlsolaris.pod [.lib.pod]perlstyle.pod [.lib.pod]perlsub.pod [.lib.pod]perlsyn.pod
pod19 = [.lib.pod]perlthrtut.pod [.lib.pod]perltie.pod [.lib.pod]perltoc.pod [.lib.pod]perltodo.pod [.lib.pod]perltooc.pod [.lib.pod]perltoot.pod
pod20 = [.lib.pod]perltrap.pod [.lib.pod]perltru64.pod [.lib.pod]perltw.pod [.lib.pod]perlunicode.pod [.lib.pod]perluniintro.pod [.lib.pod]perlutil.pod
pod21 = [.lib.pod]perluts.pod [.lib.pod]perlvar.pod [.lib.pod]perlvmesa.pod [.lib.pod]perlvms.pod [.lib.pod]perlvos.pod [.lib.pod]perlwin32.pod
pod22 = [.lib.pod]perlxs.pod [.lib.pod]perlxstut.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21) $(pod22)
d388 1
a388 1
archcorefiles : $(ac) $(ARCHAUTO)time.stamp
d392 1
a392 1
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib]
d395 1
a395 1
	Copy/NoConfirm/Log $(MMS$SOURCE) []
d457 1
a457 1
$(ARCHDIR)Config.pm : [.lib]Config.pm
d459 1
a459 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHDIR)
d461 1
a461 1
[.lib]Config.pm : config.h $(MINIPERL_EXE)
d465 1
a465 1
        Copy $(MMS$SOURCE) $(ARCHDIR)
d473 2
a474 2
[.lib]DynaLoader.pm : [.ext.Dynaloader]Dynaloader.pm
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib]
d478 2
a479 2
[.lib]XSLoader.pm : [.ext.Dynaloader]XSLoader.pm
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib]
d499 1
a499 1
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.VMS]
d502 2
a503 2
	@@ If F$Search("[.lib]ExtUtils.Dir").eqs."" Then Create/Directory [.lib.ExtUtils]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.ExtUtils]
d508 1
a508 1
	Copy/NoConfirm/Log [.utils]perldoc.com [.lib.pod]
a515 3
[.utils]cpan.com : [.utils]cpan.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

d536 1
a536 1
	Copy/NoConfirm/Log [.utils]perlbug.com [.lib]
d540 1
a540 1
	Copy/NoConfirm/Log [.utils]perlcc.com [.lib]
d550 1
a550 1
	Copy/NoConfirm/Log [.utils]splain.com [.lib]
d559 1
a559 1
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.ExtUtils]xsubpp.com
d593 1
a593 1
	Copy/NoConfirm/Log [.pod]pod2html.com [.lib.pod]
d598 1
a598 1
	Copy/NoConfirm/Log [.pod]pod2latex.com [.lib.pod]
d603 1
a603 1
	Copy/NoConfirm/Log [.pod]pod2man.com [.lib.pod]
d608 1
a608 1
	Copy/NoConfirm/Log [.pod]pod2text.com [.lib.pod]
d613 1
a613 1
	Copy/NoConfirm/Log [.pod]podchecker.com [.lib.pod]
d618 1
a618 1
	Copy/NoConfirm/Log [.pod]pod2usage.com [.lib.pod]
d623 1
a623 1
	Copy/NoConfirm/Log [.pod]podselect.com [.lib.pod]
d632 1
a632 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d635 1
a635 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d638 1
a638 42
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl561delta.pod : [.pod]perl561delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl56delta.pod : [.pod]perl56delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl570delta.pod : [.pod]perl570delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl571delta.pod : [.pod]perl571delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl572delta.pod : [.pod]perl572delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl573delta.pod : [.pod]perl573delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl581delta.pod : [.pod]perl581delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl58delta.pod : [.pod]perl58delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlaix.pod : [.pod]perlaix.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlamiga.pod : [.pod]perlamiga.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d641 1
a641 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d644 1
a644 14
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlapollo.pod : [.pod]perlapollo.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlartistic.pod : [.pod]perlartistic.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlbeos.pod : [.pod]perlbeos.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d647 1
a647 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlboot.pod : [.pod]perlboot.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d650 1
a650 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlbs2000.pod : [.pod]perlbs2000.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d653 1
a653 18
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlce.pod : [.pod]perlce.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlcheat.pod : [.pod]perlcheat.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlclib.pod : [.pod]perlclib.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlcn.pod : [.pod]perlcn.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d656 1
a656 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlcygwin.pod : [.pod]perlcygwin.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d659 1
a659 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d662 4
a665 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d668 1
a668 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d671 1
a671 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldebug.pod : [.pod]perldebug.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d674 1
a674 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldgux.pod : [.pod]perldgux.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d677 1
a677 10
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldoc.pod : [.pod]perldoc.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldos.pod : [.pod]perldos.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d680 1
a680 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d683 1
a683 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d686 1
a686 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlepoc.pod : [.pod]perlepoc.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d689 1
a689 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d692 1
a692 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d695 1
a695 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d698 1
a698 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d701 1
a701 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d704 1
a704 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d707 1
a707 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d710 1
a710 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d713 1
a713 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d716 1
a716 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d719 1
a719 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d722 1
a722 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d725 1
a725 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfreebsd.pod : [.pod]perlfreebsd.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d728 1
a728 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlgpl.pod : [.pod]perlgpl.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d731 1
a731 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d734 1
a734 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d737 1
a737 10
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlhpux.pod : [.pod]perlhpux.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlhurd.pod : [.pod]perlhurd.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d740 1
a740 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlintro.pod : [.pod]perlintro.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d743 1
a743 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d746 1
a746 14
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlirix.pod : [.pod]perlirix.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perljp.pod : [.pod]perljp.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlko.pod : [.pod]perlko.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d749 1
a749 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d752 1
a752 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d755 1
a755 18
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmachten.pod : [.pod]perlmachten.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmacos.pod : [.pod]perlmacos.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmacosx.pod : [.pod]perlmacosx.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmint.pod : [.pod]perlmint.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d758 1
a758 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d761 1
a761 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d764 1
a764 14
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmodstyle.pod : [.pod]perlmodstyle.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmpeix.pod : [.pod]perlmpeix.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlnetware.pod : [.pod]perlnetware.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d767 1
a767 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d770 1
a770 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d773 1
a773 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d776 1
a776 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d779 1
a779 26
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlos2.pod : [.pod]perlos2.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlos390.pod : [.pod]perlos390.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlos400.pod : [.pod]perlos400.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlothrtut.pod : [.pod]perlothrtut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlpacktut.pod : [.pod]perlpacktut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlplan9.pod : [.pod]perlplan9.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d782 1
a782 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlpodspec.pod : [.pod]perlpodspec.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d785 1
a785 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlqnx.pod : [.pod]perlqnx.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d788 1
a788 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d791 1
a791 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d794 1
a794 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d797 1
a797 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlreref.pod : [.pod]perlreref.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d800 1
a800 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d803 1
a803 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d806 1
a806 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlsolaris.pod : [.pod]perlsolaris.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d809 1
a809 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d812 1
a812 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d815 1
a815 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d818 1
a818 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d821 1
a821 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d824 1
a824 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d827 4
a830 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d833 1
a833 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltoot.pod : [.pod]perltoot.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d836 1
a836 10
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltru64.pod : [.pod]perltru64.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltw.pod : [.pod]perltw.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d839 1
a839 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d842 1
a842 2
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d845 1
a845 6
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perluts.pod : [.pod]perluts.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d848 2
a849 3
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlvmesa.pod : [.pod]perlvmesa.pod
d851 2
a852 3
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlvms.pod : [.vms]perlvms.pod
d854 2
a855 3
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlvos.pod : [.pod]perlvos.pod
d857 2
a858 3
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlwin32.pod : [.pod]perlwin32.pod
d860 1
a860 9
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlxs.pod : [.pod]perlxs.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlxstut.pod : [.pod]perlxstut.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]
d875 1
a875 1
$(SOCKO) : $(SOCKC) $(h)
d878 1
a878 1
	Copy/NoConfirm/Log $(MMS$SOURCE) []
d881 1
a881 1
	Copy/NoConfirm/Log $(MMS$SOURCE) []
d913 1
a913 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)
d915 1
a915 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)
d923 1
a923 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)
d926 1
a926 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)
d929 1
a929 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)
d951 2
a952 4
	Copy/Log/NoConfirm *$(E);,[.x2p]$(DBG)a2p$(E); $(ARCHDIR)
	Delete/Log/NoConfirm Perl*$(E);*,[.x2p]$(DBG)a2p$(E);*
	@@ QUALIFIERS := $(MMSQUALIFIERS)
	@@ QUALIFIERS = QUALIFIERS - """" - """"
d955 1
a955 1
	@@ Write Sys$Output "    1. $(MMS)''QUALIFIERS' clean"
d963 1
a963 1
       Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d967 1
a967 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d970 1
a970 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d973 1
a973 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d976 1
a976 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d979 1
a979 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d982 1
a982 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d985 2
a986 2
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)EXTERN.h : EXTERN.h
d988 2
a989 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d992 2
a993 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d996 1
a996 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d999 1
a999 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1002 1
a1002 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1005 2
a1006 2
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)INTERN.h : INTERN.h
d1008 1
a1008 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1011 1
a1011 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1014 1
a1014 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1017 1
a1017 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1020 1
a1020 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1023 1
a1023 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1026 1
a1026 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1029 1
a1029 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1032 1
a1032 4
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)pad.h : pad.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1035 1
a1035 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1038 1
a1038 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1041 1
a1041 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1044 1
a1044 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1047 1
a1047 4
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlsfio.h : perlsfio.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1050 1
a1050 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1053 1
a1053 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1056 1
a1056 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1059 1
a1059 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1062 1
a1062 6
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
.ifdef THREADED
$(ARCHCORE)reentr.h : reentr.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
.endif
d1065 1
a1065 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1068 1
a1068 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1071 1
a1071 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1074 1
a1074 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1077 1
a1077 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1080 1
a1080 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1083 1
a1083 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1086 1
a1086 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1089 1
a1089 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1092 1
a1092 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1095 1
a1095 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1098 1
a1098 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1101 1
a1101 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1104 1
a1104 1
	Copy/NoConfirm/Log perlshr_attr.opt $(ARCHCORE)
d1107 1
a1107 1
	Copy/NoConfirm/Log $(DBG)perlshr_bld.opt $(ARCHCORE)
d1120 1
a1120 1
$(SOCKO) : $(SOCKC) $(h)
d1123 1
a1123 9
av$(O) : av.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
deb$(O) : deb.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
doio$(O) : doio.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
doop$(O) : doop.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
dump$(O) : dump.c $(h)
d1125 1
a1125 1
globals$(O) : globals.c $(h)
d1127 1
a1127 1
gv$(O) : gv.c $(h)
d1129 1
a1129 1
hv$(O) : hv.c $(h)
d1131 1
a1131 1
locale$(O) : locale.c $(h)
d1133 1
a1133 1
malloc$(O) : malloc.c $(h)
d1135 1
a1135 1
mg$(O) : mg.c $(h)
d1137 1
a1137 1
miniperlmain$(O) : miniperlmain.c $(h)
d1139 1
a1139 1
numeric$(O) : numeric.c $(h)
d1141 1
a1141 1
op$(O) : op.c $(h)
d1143 1
a1143 1
pad$(O) : pad.c $(h)
d1145 1
a1145 1
perl$(O) : perl.c $(h)
d1147 1
a1147 1
perlapi$(O) : perlapi.c $(h)
d1149 1
a1149 1
perlio$(O) : perlio.c config.h $(h)
d1151 1
a1151 1
perlmain$(O) : perlmain.c $(h)
d1153 1
a1153 1
perly$(O) : perly.c $(h)
d1155 1
a1155 1
pp$(O) : pp.c $(h)
d1157 1
a1157 1
pp_ctl$(O) : pp_ctl.c $(h)
d1159 1
a1159 1
pp_hot$(O) : pp_hot.c $(h)
d1161 1
a1161 1
pp_pack$(O) : pp_pack.c $(h)
d1163 1
a1163 1
pp_sort$(O) : pp_sort.c $(h)
d1165 1
a1165 1
pp_sys$(O) : pp_sys.c $(h)
d1167 3
a1169 1
reentr$(O) : reentr.c $(h)
d1171 2
a1172 1
regcomp$(O) : regcomp.c $(h)
d1174 1
a1174 1
regexec$(O) : regexec.c $(h)
d1176 1
a1176 1
run$(O) : run.c $(h)
d1178 1
a1178 1
scope$(O) : scope.c $(h)
d1180 1
a1180 1
sv$(O) : sv.c 
d1182 1
a1182 1
taint$(O) : taint.c $(h)
d1184 1
a1184 1
toke$(O) : toke.c $(h)
d1186 1
a1186 1
universal$(O) : universal.c $(h)
d1188 1
a1188 1
utf8$(O) : utf8.c $(h)
d1190 1
a1190 1
util$(O) : util.c $(h)
d1192 1
a1192 1
vms$(O) : vms.c $(h)
d1194 1
a1194 1
xsutils$(O) : xsutils.c $(h)
d1213 1
a1213 1
	Copy/Log/NoConfirm [.vms]vmsish.h []
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d86 1
d91 1
d140 1
d289 1
a289 1
ac10 = $(ARCHCORE)pp_proto.h $(ARCHCORE)proto.h $(ARCHCORE)reentr.h $(ARCHCORE)reentr.inc $(ARCHCORE)regcomp.h
d316 1
d331 1
a331 1
utils4 = [.utils]enc2xs.com [.utils]piconv.com [.utils]cpan.com [.utils]prove.com
d363 21
a383 21
pod2 = [.lib.pod]perl582delta.pod [.lib.pod]perl583delta.pod [.lib.pod]perl58delta.pod [.lib.pod]perlaix.pod [.lib.pod]perlamiga.pod [.lib.pod]perlapi.pod
pod3 = [.lib.pod]perlapio.pod [.lib.pod]perlapollo.pod [.lib.pod]perlartistic.pod [.lib.pod]perlbeos.pod [.lib.pod]perlbook.pod [.lib.pod]perlboot.pod
pod4 = [.lib.pod]perlbot.pod [.lib.pod]perlbs2000.pod [.lib.pod]perlcall.pod [.lib.pod]perlce.pod [.lib.pod]perlcheat.pod [.lib.pod]perlclib.pod
pod5 = [.lib.pod]perlcn.pod [.lib.pod]perlcompile.pod [.lib.pod]perlcygwin.pod [.lib.pod]perldata.pod [.lib.pod]perldbmfilter.pod [.lib.pod]perldebguts.pod
pod6 = [.lib.pod]perldebtut.pod [.lib.pod]perldebug.pod [.lib.pod]perldelta.pod [.lib.pod]perldgux.pod [.lib.pod]perldiag.pod [.lib.pod]perldoc.pod
pod7 = [.lib.pod]perldos.pod [.lib.pod]perldsc.pod [.lib.pod]perlebcdic.pod [.lib.pod]perlembed.pod [.lib.pod]perlepoc.pod [.lib.pod]perlfaq.pod
pod8 = [.lib.pod]perlfaq1.pod [.lib.pod]perlfaq2.pod [.lib.pod]perlfaq3.pod [.lib.pod]perlfaq4.pod [.lib.pod]perlfaq5.pod [.lib.pod]perlfaq6.pod
pod9 = [.lib.pod]perlfaq7.pod [.lib.pod]perlfaq8.pod [.lib.pod]perlfaq9.pod [.lib.pod]perlfilter.pod [.lib.pod]perlfork.pod [.lib.pod]perlform.pod
pod10 = [.lib.pod]perlfreebsd.pod [.lib.pod]perlfunc.pod [.lib.pod]perlgpl.pod [.lib.pod]perlguts.pod [.lib.pod]perlhack.pod [.lib.pod]perlhist.pod
pod11 = [.lib.pod]perlhpux.pod [.lib.pod]perlhurd.pod [.lib.pod]perlintern.pod [.lib.pod]perlintro.pod [.lib.pod]perliol.pod [.lib.pod]perlipc.pod
pod12 = [.lib.pod]perlirix.pod [.lib.pod]perljp.pod [.lib.pod]perlko.pod [.lib.pod]perllexwarn.pod [.lib.pod]perllocale.pod [.lib.pod]perllol.pod
pod13 = [.lib.pod]perlmachten.pod [.lib.pod]perlmacos.pod [.lib.pod]perlmacosx.pod [.lib.pod]perlmint.pod [.lib.pod]perlmod.pod [.lib.pod]perlmodinstall.pod
pod14 = [.lib.pod]perlmodlib.pod [.lib.pod]perlmodstyle.pod [.lib.pod]perlmpeix.pod [.lib.pod]perlnetware.pod [.lib.pod]perlnewmod.pod
pod15 = [.lib.pod]perlnumber.pod [.lib.pod]perlobj.pod [.lib.pod]perlop.pod [.lib.pod]perlopentut.pod [.lib.pod]perlos2.pod [.lib.pod]perlos390.pod
pod16 = [.lib.pod]perlos400.pod [.lib.pod]perlothrtut.pod [.lib.pod]perlpacktut.pod [.lib.pod]perlplan9.pod [.lib.pod]perlpod.pod [.lib.pod]perlpodspec.pod
pod17 = [.lib.pod]perlport.pod [.lib.pod]perlqnx.pod [.lib.pod]perlre.pod [.lib.pod]perlref.pod [.lib.pod]perlreftut.pod [.lib.pod]perlrequick.pod
pod18 = [.lib.pod]perlreref.pod [.lib.pod]perlretut.pod [.lib.pod]perlrun.pod [.lib.pod]perlsec.pod [.lib.pod]perlsolaris.pod [.lib.pod]perlstyle.pod
pod19 = [.lib.pod]perlsub.pod [.lib.pod]perlsyn.pod [.lib.pod]perlthrtut.pod [.lib.pod]perltie.pod [.lib.pod]perltoc.pod [.lib.pod]perltodo.pod
pod20 = [.lib.pod]perltooc.pod [.lib.pod]perltoot.pod [.lib.pod]perltrap.pod [.lib.pod]perltru64.pod [.lib.pod]perltw.pod [.lib.pod]perlunicode.pod
pod21 = [.lib.pod]perluniintro.pod [.lib.pod]perlutil.pod [.lib.pod]perluts.pod [.lib.pod]perlvar.pod [.lib.pod]perlvmesa.pod [.lib.pod]perlvms.pod
pod22 = [.lib.pod]perlvos.pod [.lib.pod]perlwin32.pod [.lib.pod]perlxs.pod [.lib.pod]perlxstut.pod
a385 5
# Would be useful to automate the generation of this rule from pod/buildtoc
# Plus its corresponding delete in the clean target.
[.pod]perldelta.pod : [.pod]perl583delta.pod
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)

a519 3
[.utils]prove.com : [.utils]prove.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

a673 8
[.lib.pod]perl582delta.pod : [.pod]perl582delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl583delta.pod : [.pod]perl583delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

a1368 3
$(ARCHCORE)reentr.inc : reentr.inc
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1533 1
d1552 1
a1618 1
	- If F$Search("[.pod]perldelta.pod").nes."" Then Delete/NoConfirm/Log [.pod]perldelta.pod;*
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@a35 5
.ifdef IXE
O = .ibj
OLB = .ilb
E = .ixe
.else
a50 1
.endif
a51 4
.ifdef __IA64__
ARCH = VMS_IA64
OBJVAL = $(O)
.else
a58 1
.endif
d285 1
d287 3
a320 9
unidatafiles1 = [.lib.unicore]Canonical.pl [.lib.unicore]Exact.pl
unidatafiles2 = [.lib.unicore]Properties [.lib.unicore]Decomposition.pl
unidatafiles3 = [.lib.unicore]CombiningClass.pl [.lib.unicore]Name.pl
unidatafiles4 = [.lib.unicore]PVA.pl
unidatafiles = $(unidatafiles1) $(unidatafiles2) $(unidatafiles3) $(unidatafiles4)

# Directories of Unicode data files generated by mktables
unidatadirs = lib/unicore/To lib/unicore/lib

d322 1
a322 1
LIBPREREQ = $(ARCHDIR)Config.pm [.lib.VMS]Filespec.pm [.lib]DynaLoader.pm [.lib]XSLoader.pm [.lib]lib.pm [.lib.ExtUtils]XSSymSet.pm $(ARCHDIR)vmspipe.com [.lib]re.pm $(unidatafiles)
d326 1
a326 1
utils3 = [.utils]perlivp.com [.lib]splain.com [.utils]pl2pm.com [.utils]xsubpp.com [.utils]instmodsh.com
d359 21
a379 21
pod2 = [.lib.pod]perl582delta.pod [.lib.pod]perl583delta.pod [.lib.pod]perl584delta.pod [.lib.pod]perl585delta.pod [.lib.pod]perl58delta.pod
pod3 = [.lib.pod]perlaix.pod [.lib.pod]perlamiga.pod [.lib.pod]perlapi.pod [.lib.pod]perlapio.pod [.lib.pod]perlapollo.pod [.lib.pod]perlartistic.pod
pod4 = [.lib.pod]perlbeos.pod [.lib.pod]perlbook.pod [.lib.pod]perlboot.pod [.lib.pod]perlbot.pod [.lib.pod]perlbs2000.pod [.lib.pod]perlcall.pod
pod5 = [.lib.pod]perlce.pod [.lib.pod]perlcheat.pod [.lib.pod]perlclib.pod [.lib.pod]perlcn.pod [.lib.pod]perlcompile.pod [.lib.pod]perlcygwin.pod
pod6 = [.lib.pod]perldata.pod [.lib.pod]perldbmfilter.pod [.lib.pod]perldebguts.pod [.lib.pod]perldebtut.pod [.lib.pod]perldebug.pod [.lib.pod]perldelta.pod
pod7 = [.lib.pod]perldgux.pod [.lib.pod]perldiag.pod [.lib.pod]perldoc.pod [.lib.pod]perldos.pod [.lib.pod]perldsc.pod [.lib.pod]perlebcdic.pod
pod8 = [.lib.pod]perlembed.pod [.lib.pod]perlepoc.pod [.lib.pod]perlfaq.pod [.lib.pod]perlfaq1.pod [.lib.pod]perlfaq2.pod [.lib.pod]perlfaq3.pod
pod9 = [.lib.pod]perlfaq4.pod [.lib.pod]perlfaq5.pod [.lib.pod]perlfaq6.pod [.lib.pod]perlfaq7.pod [.lib.pod]perlfaq8.pod [.lib.pod]perlfaq9.pod
pod10 = [.lib.pod]perlfilter.pod [.lib.pod]perlfork.pod [.lib.pod]perlform.pod [.lib.pod]perlfreebsd.pod [.lib.pod]perlfunc.pod [.lib.pod]perlgpl.pod
pod11 = [.lib.pod]perlguts.pod [.lib.pod]perlhack.pod [.lib.pod]perlhist.pod [.lib.pod]perlhpux.pod [.lib.pod]perlhurd.pod [.lib.pod]perlintern.pod
pod12 = [.lib.pod]perlintro.pod [.lib.pod]perliol.pod [.lib.pod]perlipc.pod [.lib.pod]perlirix.pod [.lib.pod]perljp.pod [.lib.pod]perlko.pod
pod13 = [.lib.pod]perllexwarn.pod [.lib.pod]perllocale.pod [.lib.pod]perllol.pod [.lib.pod]perlmachten.pod [.lib.pod]perlmacos.pod [.lib.pod]perlmacosx.pod
pod14 = [.lib.pod]perlmint.pod [.lib.pod]perlmod.pod [.lib.pod]perlmodinstall.pod [.lib.pod]perlmodlib.pod [.lib.pod]perlmodstyle.pod [.lib.pod]perlmpeix.pod
pod15 = [.lib.pod]perlnetware.pod [.lib.pod]perlnewmod.pod [.lib.pod]perlnumber.pod [.lib.pod]perlobj.pod [.lib.pod]perlop.pod [.lib.pod]perlopentut.pod
pod16 = [.lib.pod]perlos2.pod [.lib.pod]perlos390.pod [.lib.pod]perlos400.pod [.lib.pod]perlothrtut.pod [.lib.pod]perlpacktut.pod [.lib.pod]perlplan9.pod
pod17 = [.lib.pod]perlpod.pod [.lib.pod]perlpodspec.pod [.lib.pod]perlport.pod [.lib.pod]perlqnx.pod [.lib.pod]perlre.pod [.lib.pod]perlref.pod
pod18 = [.lib.pod]perlreftut.pod [.lib.pod]perlrequick.pod [.lib.pod]perlreref.pod [.lib.pod]perlretut.pod [.lib.pod]perlrun.pod [.lib.pod]perlsec.pod
pod19 = [.lib.pod]perlsolaris.pod [.lib.pod]perlstyle.pod [.lib.pod]perlsub.pod [.lib.pod]perlsyn.pod [.lib.pod]perlthrtut.pod [.lib.pod]perltie.pod
pod20 = [.lib.pod]perltoc.pod [.lib.pod]perltodo.pod [.lib.pod]perltooc.pod [.lib.pod]perltoot.pod [.lib.pod]perltrap.pod [.lib.pod]perltru64.pod
pod21 = [.lib.pod]perltw.pod [.lib.pod]perlunicode.pod [.lib.pod]perluniintro.pod [.lib.pod]perlutil.pod [.lib.pod]perluts.pod [.lib.pod]perlvar.pod
pod22 = [.lib.pod]perlvmesa.pod [.lib.pod]perlvms.pod [.lib.pod]perlvos.pod [.lib.pod]perlwin32.pod [.lib.pod]perlxs.pod [.lib.pod]perlxstut.pod
d384 1
a384 1
[.pod]perldelta.pod : [.pod]perl584delta.pod
a468 5
# Aargh. I don't know how (if) it's possible to change directory
# So make the perl script do it
$(unidatafiles) : $(MINIPERL_EXE) [.lib]Config.pm [.lib.unicore]mktables
	$(MINIPERL) [.lib.unicore]mktables "-C" lib "-C" unicore
 
a538 3
[.utils]instmodsh.com : [.utils]instmodsh.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

d566 2
a567 2
[.utils]xsubpp.com : [.utils]xsubpp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)
a685 8
[.lib.pod]perl584delta.pod : [.pod]perl584delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl585delta.pod : [.pod]perl585delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

d1377 1
d1384 1
d1582 2
d1616 4
a1641 2
	- $(MINIPERL) -e "foreach (@@ARGV) {unlink qq{$_;*} or warn qq{unlink $_: $!}}" $(unidatafiles)
	- $(MINIPERL) -e "use File::Path; rmtree(\@@ARGV,1,0);" $(unidatadirs)
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d328 6
d338 1
a338 1
LIBPREREQ = $(ARCHDIR)Config.pm [.lib.VMS]Filespec.pm [.lib]DynaLoader.pm [.lib]XSLoader.pm [.lib]lib.pm [.lib.ExtUtils]XSSymSet.pm $(ARCHDIR)vmspipe.com [.lib]re.pm unidatafiles.ts
d375 22
a396 23
pod2 = [.lib.pod]perl582delta.pod [.lib.pod]perl583delta.pod [.lib.pod]perl584delta.pod [.lib.pod]perl585delta.pod [.lib.pod]perl586delta.pod
pod3 = [.lib.pod]perl58delta.pod [.lib.pod]perlaix.pod [.lib.pod]perlamiga.pod [.lib.pod]perlapi.pod [.lib.pod]perlapio.pod [.lib.pod]perlapollo.pod
pod4 = [.lib.pod]perlartistic.pod [.lib.pod]perlbeos.pod [.lib.pod]perlbook.pod [.lib.pod]perlboot.pod [.lib.pod]perlbot.pod [.lib.pod]perlbs2000.pod
pod5 = [.lib.pod]perlcall.pod [.lib.pod]perlce.pod [.lib.pod]perlcheat.pod [.lib.pod]perlclib.pod [.lib.pod]perlcn.pod [.lib.pod]perlcompile.pod
pod6 = [.lib.pod]perlcygwin.pod [.lib.pod]perldata.pod [.lib.pod]perldbmfilter.pod [.lib.pod]perldebguts.pod [.lib.pod]perldebtut.pod
pod7 = [.lib.pod]perldebug.pod [.lib.pod]perldelta.pod [.lib.pod]perldgux.pod [.lib.pod]perldiag.pod [.lib.pod]perldoc.pod [.lib.pod]perldos.pod
pod8 = [.lib.pod]perldsc.pod [.lib.pod]perlebcdic.pod [.lib.pod]perlembed.pod [.lib.pod]perlepoc.pod [.lib.pod]perlfaq.pod [.lib.pod]perlfaq1.pod
pod9 = [.lib.pod]perlfaq2.pod [.lib.pod]perlfaq3.pod [.lib.pod]perlfaq4.pod [.lib.pod]perlfaq5.pod [.lib.pod]perlfaq6.pod [.lib.pod]perlfaq7.pod
pod10 = [.lib.pod]perlfaq8.pod [.lib.pod]perlfaq9.pod [.lib.pod]perlfilter.pod [.lib.pod]perlfork.pod [.lib.pod]perlform.pod [.lib.pod]perlfreebsd.pod
pod11 = [.lib.pod]perlfunc.pod [.lib.pod]perlgpl.pod [.lib.pod]perlguts.pod [.lib.pod]perlhack.pod [.lib.pod]perlhist.pod [.lib.pod]perlhpux.pod
pod12 = [.lib.pod]perlhurd.pod [.lib.pod]perlintern.pod [.lib.pod]perlintro.pod [.lib.pod]perliol.pod [.lib.pod]perlipc.pod [.lib.pod]perlirix.pod
pod13 = [.lib.pod]perljp.pod [.lib.pod]perlko.pod [.lib.pod]perllexwarn.pod [.lib.pod]perllocale.pod [.lib.pod]perllol.pod [.lib.pod]perlmachten.pod
pod14 = [.lib.pod]perlmacos.pod [.lib.pod]perlmacosx.pod [.lib.pod]perlmint.pod [.lib.pod]perlmod.pod [.lib.pod]perlmodinstall.pod [.lib.pod]perlmodlib.pod
pod15 = [.lib.pod]perlmodstyle.pod [.lib.pod]perlmpeix.pod [.lib.pod]perlnetware.pod [.lib.pod]perlnewmod.pod [.lib.pod]perlnumber.pod [.lib.pod]perlobj.pod
pod16 = [.lib.pod]perlop.pod [.lib.pod]perlopentut.pod [.lib.pod]perlos2.pod [.lib.pod]perlos390.pod [.lib.pod]perlos400.pod [.lib.pod]perlothrtut.pod
pod17 = [.lib.pod]perlpacktut.pod [.lib.pod]perlplan9.pod [.lib.pod]perlpod.pod [.lib.pod]perlpodspec.pod [.lib.pod]perlport.pod [.lib.pod]perlqnx.pod
pod18 = [.lib.pod]perlre.pod [.lib.pod]perlref.pod [.lib.pod]perlreftut.pod [.lib.pod]perlrequick.pod [.lib.pod]perlreref.pod [.lib.pod]perlretut.pod
pod19 = [.lib.pod]perlrun.pod [.lib.pod]perlsec.pod [.lib.pod]perlsolaris.pod [.lib.pod]perlstyle.pod [.lib.pod]perlsub.pod [.lib.pod]perlsyn.pod
pod20 = [.lib.pod]perlthrtut.pod [.lib.pod]perltie.pod [.lib.pod]perltoc.pod [.lib.pod]perltodo.pod [.lib.pod]perltooc.pod [.lib.pod]perltoot.pod
pod21 = [.lib.pod]perltrap.pod [.lib.pod]perltru64.pod [.lib.pod]perltw.pod [.lib.pod]perlunicode.pod [.lib.pod]perluniintro.pod [.lib.pod]perlutil.pod
pod22 = [.lib.pod]perluts.pod [.lib.pod]perlvar.pod [.lib.pod]perlvmesa.pod [.lib.pod]perlvms.pod [.lib.pod]perlvos.pod [.lib.pod]perlwin32.pod
pod23 = [.lib.pod]perlxs.pod [.lib.pod]perlxstut.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21) $(pod22) $(pod23)
d485 4
a488 4
unidatafiles.ts : $(MINIPERL_EXE) [.lib]Config.pm [.lib.unicore]mktables
	$(MINIPERL) [.lib.unicore]mktables "-C" [.lib.unicore] 
	@@ If F$Search("$(MMS$TARGET)").nes."" Then Delete/NoLog/NoConfirm $(MMS$TARGET);*
	@@ Copy/NoConfirm _NLA0: $(MMS$TARGET)
a717 4
[.lib.pod]perl586delta.pod : [.pod]perl586delta.pod
	@@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

a1274 6
	@@ PERL_TEST_DRIVER == "TEST."
	- @@[.VMS]Test.Com "$(E)" "$(__DEBUG__)"
	@@ $(MINIPERL) -e "print ""Ran tests"";" > [.t]rantests.

test_harness : all [.t.lib]vmsfspec.t [.t.lib]vms_dclsym.t [.t.lib]vms_stdio.t
	@@ PERL_TEST_DRIVER == "harness."
d1666 1
a1666 2
	- If F$Search("[.lib.unicore]*.pl").nes."" Then Delete/NoConfirm/Log [.lib.unicore]*.pl;*
	- If F$Search("[.lib.unicore]Properties.").nes."" Then Delete/NoConfirm/Log [.lib.unicore]Properties.;*
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@a33 1
~LARGEFILE~
a212 5
.IFDEF LARGEFILE
CFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=$(LARGEFILE)
X2PCFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=(PERL_FOR_X2P,$(LARGEFILE))
CORECFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=(PERL_CORE,$(LARGEFILE))
.ELSE
d214 4
a217 4
X2PCFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=PERL_FOR_X2P
CORECFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=PERL_CORE
.ENDIF

d332 1
a332 1
LIBPREREQ = $(ARCHDIR)Config.pm $(ARCHDIR)Config_heavy.pl [.lib.VMS]Filespec.pm [.lib]DynaLoader.pm [.lib]XSLoader.pm [.lib]lib.pm [.lib.ExtUtils]XSSymSet.pm $(ARCHDIR)vmspipe.com [.lib]re.pm unidatafiles.ts
d334 1
a334 1
utils1 = [.lib.pods]perldoc.com [.lib.ExtUtils]Miniperl.pm [.utils]c2ph.com [.utils]h2ph.com 
d360 1
a360 1
podxform : [.lib.pods]pod2text.com [.lib.pods]pod2html.com [.lib.pods]pod2latex.com [.lib.pods]pod2man.com [.lib.pods]podchecker.com [.lib.pods]pod2usage.com [.lib.pods]podselect.com
d367 25
a391 27
pod0 = [.lib.pods]perl.pod [.lib.pods]perl5004delta.pod [.lib.pods]perl5005delta.pod [.lib.pods]perl561delta.pod [.lib.pods]perl56delta.pod
pod1 = [.lib.pods]perl570delta.pod [.lib.pods]perl571delta.pod [.lib.pods]perl572delta.pod [.lib.pods]perl573delta.pod [.lib.pods]perl581delta.pod
pod2 = [.lib.pods]perl582delta.pod [.lib.pods]perl583delta.pod [.lib.pods]perl584delta.pod [.lib.pods]perl585delta.pod [.lib.pods]perl586delta.pod
pod3 = [.lib.pods]perl587delta.pod [.lib.pods]perl588delta.pod [.lib.pods]perl58delta.pod [.lib.pods]perlaix.pod [.lib.pods]perlamiga.pod
pod4 = [.lib.pods]perlapi.pod [.lib.pods]perlapio.pod [.lib.pods]perlapollo.pod [.lib.pods]perlartistic.pod [.lib.pods]perlbeos.pod [.lib.pods]perlbook.pod
pod5 = [.lib.pods]perlboot.pod [.lib.pods]perlbot.pod [.lib.pods]perlbs2000.pod [.lib.pods]perlcall.pod [.lib.pods]perlce.pod [.lib.pods]perlcheat.pod
pod6 = [.lib.pods]perlclib.pod [.lib.pods]perlcn.pod [.lib.pods]perlcompile.pod [.lib.pods]perlcygwin.pod [.lib.pods]perldata.pod
pod7 = [.lib.pods]perldbmfilter.pod [.lib.pods]perldebguts.pod [.lib.pods]perldebtut.pod [.lib.pods]perldebug.pod [.lib.pods]perldelta.pod
pod8 = [.lib.pods]perldgux.pod [.lib.pods]perldiag.pod [.lib.pods]perldoc.pod [.lib.pods]perldos.pod [.lib.pods]perldsc.pod [.lib.pods]perlebcdic.pod
pod9 = [.lib.pods]perlembed.pod [.lib.pods]perlepoc.pod [.lib.pods]perlfaq.pod [.lib.pods]perlfaq1.pod [.lib.pods]perlfaq2.pod [.lib.pods]perlfaq3.pod
pod10 = [.lib.pods]perlfaq4.pod [.lib.pods]perlfaq5.pod [.lib.pods]perlfaq6.pod [.lib.pods]perlfaq7.pod [.lib.pods]perlfaq8.pod [.lib.pods]perlfaq9.pod
pod11 = [.lib.pods]perlfilter.pod [.lib.pods]perlfork.pod [.lib.pods]perlform.pod [.lib.pods]perlfreebsd.pod [.lib.pods]perlfunc.pod
pod12 = [.lib.pods]perlglossary.pod [.lib.pods]perlgpl.pod [.lib.pods]perlguts.pod [.lib.pods]perlhack.pod [.lib.pods]perlhist.pod [.lib.pods]perlhpux.pod
pod13 = [.lib.pods]perlhurd.pod [.lib.pods]perlintern.pod [.lib.pods]perlintro.pod [.lib.pods]perliol.pod [.lib.pods]perlipc.pod [.lib.pods]perlirix.pod
pod14 = [.lib.pods]perljp.pod [.lib.pods]perlko.pod [.lib.pods]perllexwarn.pod [.lib.pods]perllinux.pod [.lib.pods]perllocale.pod [.lib.pods]perllol.pod
pod15 = [.lib.pods]perlmachten.pod [.lib.pods]perlmacos.pod [.lib.pods]perlmacosx.pod [.lib.pods]perlmint.pod [.lib.pods]perlmod.pod
pod16 = [.lib.pods]perlmodinstall.pod [.lib.pods]perlmodlib.pod [.lib.pods]perlmodstyle.pod [.lib.pods]perlmpeix.pod [.lib.pods]perlnetware.pod
pod17 = [.lib.pods]perlnewmod.pod [.lib.pods]perlnumber.pod [.lib.pods]perlobj.pod [.lib.pods]perlop.pod [.lib.pods]perlopenbsd.pod
pod18 = [.lib.pods]perlopentut.pod [.lib.pods]perlos2.pod [.lib.pods]perlos390.pod [.lib.pods]perlos400.pod [.lib.pods]perlothrtut.pod
pod19 = [.lib.pods]perlpacktut.pod [.lib.pods]perlplan9.pod [.lib.pods]perlpod.pod [.lib.pods]perlpodspec.pod [.lib.pods]perlport.pod [.lib.pods]perlqnx.pod
pod20 = [.lib.pods]perlre.pod [.lib.pods]perlref.pod [.lib.pods]perlreftut.pod [.lib.pods]perlrequick.pod [.lib.pods]perlreref.pod [.lib.pods]perlretut.pod
pod21 = [.lib.pods]perlrun.pod [.lib.pods]perlsec.pod [.lib.pods]perlsolaris.pod [.lib.pods]perlstyle.pod [.lib.pods]perlsub.pod [.lib.pods]perlsyn.pod
pod22 = [.lib.pods]perlthrtut.pod [.lib.pods]perltie.pod [.lib.pods]perltoc.pod [.lib.pods]perltodo.pod [.lib.pods]perltooc.pod [.lib.pods]perltoot.pod
pod23 = [.lib.pods]perltrap.pod [.lib.pods]perltru64.pod [.lib.pods]perltw.pod [.lib.pods]perlunicode.pod [.lib.pods]perluniintro.pod [.lib.pods]perlutil.pod
pod24 = [.lib.pods]perluts.pod [.lib.pods]perlvar.pod [.lib.pods]perlvmesa.pod [.lib.pods]perlvms.pod [.lib.pods]perlvos.pod [.lib.pods]perlwin32.pod
pod25 = [.lib.pods]perlxs.pod [.lib.pods]perlxstut.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21) $(pod22) $(pod23) $(pod24) $(pod25)
a473 4
$(ARCHDIR)Config_heavy.pl : [.lib]Config_heavy.pl
	Create/Directory $(ARCHDIR)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHDIR)

d485 1
a485 1
[.ext.dynaloader]dl_vms.c : [.ext.dynaloader]dl_vms.xs $(ARCHDIR)Config.pm [.lib.ExtUtils]XSSymSet.pm $(MINIPERL_EXE) [.lib.VMS]Filespec.pm 
d523 4
a526 4
[.lib.pods]perldoc.com : [.utils]perldoc.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]perldoc.com [.lib.pods]
d529 1
a529 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE) >$(MMS$TARGET)
d532 1
a532 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d535 1
a535 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d538 1
a538 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d541 1
a541 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d544 1
a544 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d547 1
a547 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d550 1
a550 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d553 1
a553 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d556 1
a556 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d559 1
a559 1
       $(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d562 1
a562 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d566 1
a566 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d570 1
a570 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d573 1
a573 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d576 1
a576 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d580 1
a580 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d583 1
a583 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d586 1
a586 1
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
d617 34
a650 34
[.lib.pods]pod2html.com : [.pod]pod2html.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2html.com [.lib.pods]

[.lib.pods]pod2latex.com : [.pod]pod2latex.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2latex.com [.lib.pods]

[.lib.pods]pod2man.com : [.pod]pod2man.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2man.com [.lib.pods]

[.lib.pods]pod2text.com : [.pod]pod2text.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2text.com [.lib.pods]

[.lib.pods]podchecker.com : [.pod]podchecker.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]podchecker.com [.lib.pods]

[.lib.pods]pod2usage.com : [.pod]pod2usage.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2usage.com [.lib.pods]

[.lib.pods]podselect.com : [.pod]podselect.PL $(ARCHDIR)Config.pm
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]podselect.com [.lib.pods]
d657 543
a1199 563
[.lib.pods]perl.pod : [.pod]perl.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5004delta.pod : [.pod]perl5004delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5005delta.pod : [.pod]perl5005delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl561delta.pod : [.pod]perl561delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl56delta.pod : [.pod]perl56delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl570delta.pod : [.pod]perl570delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl571delta.pod : [.pod]perl571delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl572delta.pod : [.pod]perl572delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl573delta.pod : [.pod]perl573delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl581delta.pod : [.pod]perl581delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl582delta.pod : [.pod]perl582delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl583delta.pod : [.pod]perl583delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl584delta.pod : [.pod]perl584delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl585delta.pod : [.pod]perl585delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl586delta.pod : [.pod]perl586delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl587delta.pod : [.pod]perl587delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl588delta.pod : [.pod]perl588delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl58delta.pod : [.pod]perl58delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlaix.pod : [.pod]perlaix.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlamiga.pod : [.pod]perlamiga.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlapi.pod : [.pod]perlapi.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlapio.pod : [.pod]perlapio.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlapollo.pod : [.pod]perlapollo.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlartistic.pod : [.pod]perlartistic.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlbeos.pod : [.pod]perlbeos.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlbook.pod : [.pod]perlbook.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlboot.pod : [.pod]perlboot.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlbot.pod : [.pod]perlbot.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlbs2000.pod : [.pod]perlbs2000.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlcall.pod : [.pod]perlcall.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlce.pod : [.pod]perlce.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlcheat.pod : [.pod]perlcheat.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlclib.pod : [.pod]perlclib.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlcn.pod : [.pod]perlcn.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlcompile.pod : [.pod]perlcompile.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlcygwin.pod : [.pod]perlcygwin.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldata.pod : [.pod]perldata.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldbmfilter.pod : [.pod]perldbmfilter.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldebguts.pod : [.pod]perldebguts.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldebtut.pod : [.pod]perldebtut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldebug.pod : [.pod]perldebug.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldelta.pod : [.pod]perldelta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldgux.pod : [.pod]perldgux.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldiag.pod : [.pod]perldiag.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldoc.pod : [.pod]perldoc.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldos.pod : [.pod]perldos.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perldsc.pod : [.pod]perldsc.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlebcdic.pod : [.pod]perlebcdic.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlembed.pod : [.pod]perlembed.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlepoc.pod : [.pod]perlepoc.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq.pod : [.pod]perlfaq.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq1.pod : [.pod]perlfaq1.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq2.pod : [.pod]perlfaq2.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq3.pod : [.pod]perlfaq3.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq4.pod : [.pod]perlfaq4.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq5.pod : [.pod]perlfaq5.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq6.pod : [.pod]perlfaq6.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq7.pod : [.pod]perlfaq7.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq8.pod : [.pod]perlfaq8.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfaq9.pod : [.pod]perlfaq9.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfilter.pod : [.pod]perlfilter.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfork.pod : [.pod]perlfork.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlform.pod : [.pod]perlform.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfreebsd.pod : [.pod]perlfreebsd.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlfunc.pod : [.pod]perlfunc.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlglossary.pod : [.pod]perlglossary.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlgpl.pod : [.pod]perlgpl.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlguts.pod : [.pod]perlguts.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlhack.pod : [.pod]perlhack.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlhist.pod : [.pod]perlhist.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlhpux.pod : [.pod]perlhpux.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlhurd.pod : [.pod]perlhurd.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlintern.pod : [.pod]perlintern.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlintro.pod : [.pod]perlintro.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perliol.pod : [.pod]perliol.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlipc.pod : [.pod]perlipc.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlirix.pod : [.pod]perlirix.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perljp.pod : [.pod]perljp.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlko.pod : [.pod]perlko.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perllexwarn.pod : [.pod]perllexwarn.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perllinux.pod : [.pod]perllinux.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perllocale.pod : [.pod]perllocale.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perllol.pod : [.pod]perllol.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmachten.pod : [.pod]perlmachten.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmacos.pod : [.pod]perlmacos.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmacosx.pod : [.pod]perlmacosx.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmint.pod : [.pod]perlmint.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmod.pod : [.pod]perlmod.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmodinstall.pod : [.pod]perlmodinstall.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmodlib.pod : [.pod]perlmodlib.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmodstyle.pod : [.pod]perlmodstyle.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlmpeix.pod : [.pod]perlmpeix.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlnetware.pod : [.pod]perlnetware.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlnewmod.pod : [.pod]perlnewmod.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlnumber.pod : [.pod]perlnumber.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlobj.pod : [.pod]perlobj.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlop.pod : [.pod]perlop.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlopenbsd.pod : [.pod]perlopenbsd.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlopentut.pod : [.pod]perlopentut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlos2.pod : [.pod]perlos2.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlos390.pod : [.pod]perlos390.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlos400.pod : [.pod]perlos400.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlothrtut.pod : [.pod]perlothrtut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlpacktut.pod : [.pod]perlpacktut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlplan9.pod : [.pod]perlplan9.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlpod.pod : [.pod]perlpod.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlpodspec.pod : [.pod]perlpodspec.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlport.pod : [.pod]perlport.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlqnx.pod : [.pod]perlqnx.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlre.pod : [.pod]perlre.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlref.pod : [.pod]perlref.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlreftut.pod : [.pod]perlreftut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlrequick.pod : [.pod]perlrequick.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlreref.pod : [.pod]perlreref.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlretut.pod : [.pod]perlretut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlrun.pod : [.pod]perlrun.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlsec.pod : [.pod]perlsec.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlsolaris.pod : [.pod]perlsolaris.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlstyle.pod : [.pod]perlstyle.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlsub.pod : [.pod]perlsub.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlsyn.pod : [.pod]perlsyn.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlthrtut.pod : [.pod]perlthrtut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perltie.pod : [.pod]perltie.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perltoc.pod : [.pod]perltoc.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perltodo.pod : [.pod]perltodo.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perltooc.pod : [.pod]perltooc.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perltoot.pod : [.pod]perltoot.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perltrap.pod : [.pod]perltrap.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perltru64.pod : [.pod]perltru64.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perltw.pod : [.pod]perltw.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlunicode.pod : [.pod]perlunicode.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perluniintro.pod : [.pod]perluniintro.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlutil.pod : [.pod]perlutil.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perluts.pod : [.pod]perluts.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlvar.pod : [.pod]perlvar.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlvmesa.pod : [.pod]perlvmesa.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlvms.pod : [.vms]perlvms.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlvos.pod : [.pod]perlvos.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlwin32.pod : [.pod]perlwin32.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlxs.pod : [.pod]perlxs.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlxstut.pod : [.pod]perlxstut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]
a1282 4
minitest : $(MINITEST_EXE) [.lib]re.pm [.lib]lib.pm [.lib.VMS]Filespec.pm unidatafiles.ts
	@@ PERL_TEST_DRIVER == "minitest"
	- @@[.VMS]Test.Com "$(E)" "$(__DEBUG__)"

a1295 1
	Delete/Log/NoConfirm [.lib]Config_heavy.pl;*
d1542 1
a1542 1
sv$(O) : sv.c $(h)
a1631 2
	- If F$Search("[.Lib]Config_heavy.pl;-1").nes."" Then Purge/NoConfirm/Log [.Lib]Config_heavy.pl
	- If F$Search("$(ARCHDIR)Config_heavy.pl;-1").nes."" Then Purge/NoConfirm/Log $(ARCHDIR)Config_heavy.pl
d1635 1
a1635 1
	- If F$Search("[.lib.pods]*.Pod;-1").nes."" Then Purge/NoConfirm/Log [.lib.pods]*.Pod
d1641 1
a1641 1
	- If F$Search("[.lib.pods]*.com;-1").nes."" Then Purge/NoConfirm/Log [.lib.pods]*.com
a1676 1
	- If F$Search("extra.pods").nes."" Then Delete/NoConfirm/Log extra.pods;*
a1681 1
	- If F$Search("[.Lib]Config_heavy.pl").nes."" Then Delete/NoConfirm/Log [.Lib]Config_heavy.pl;*
a1686 1
	- If F$Search("$(ARCHDIR)Config_heavy.pl").nes."" Then Delete/NoConfirm/Log $(ARCHDIR)Config_heavy.pl;*
d1689 2
a1690 2
	- If F$Search("[.lib.pods]*.pod").nes."" Then Delete/NoConfirm/Log [.lib.pods]*.pod;*
	- If F$Search("[.lib.pods]perldoc.com").nes."" Then Delete/NoConfirm/Log [.lib.pods]perldoc.com;*
d1692 1
a1692 1
	- If F$Search("[.lib.pods]pod2*.com").nes."" Then Delete/NoConfirm/Log [.lib.pods]pod2*.com;*
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d32 1
a32 2
~MTK~
~MTU~
d126 1
a126 1
DBGSPECFLAGS = /Show=(expansion,include)/machine
a212 10
.ifdef MTU
.ifdef MTK
MTHREADLINKFLAGS = /THREADS=(MULTIPLE_KERNEL,UPCALLS)
.else
MTHREADLINKFLAGS = /THREADS=UPCALLS
.endif
.else
MTHREADLINKFLAGS = 
.endif

d247 1
a247 1
myextobj = [.ext.DynaLoader]dl_vms$(O),
d270 2
a271 2
c0 = $(MALLOC_C) $(SOCKC) av.c deb.c doio.c doop.c dump.c globals.c gv.c hv.c mro.c
c1 = mg.c locale.c mathoms.c miniperlmain.c numeric.c op.c pad.c perl.c perlapi.c perlio.c
d276 2
a277 2
obj0 = $(MALLOC_O) $(SOCKO) av$(O) deb$(O) doio$(O) doop$(O) dump$(O) mro$(O)
obj1 = globals$(O) gv$(O) hv$(O) locale$(O) mathoms$(O) mg$(O) miniperlmain$(O) numeric$(O) op$(O) pad$(O)
d285 2
a286 2
h2 = iperlsys.h keywords.h mg.h nostdio.h op.h opcode.h opnames.h overload.h pad.h
h3 = parser.h patchlevel.h perl.h perlapi.h perlio.h perlsdio.h perlvars.h perly.h
d288 1
a288 1
h5 = sv.h thread.h utf8.h util.h vmsish.h warnings.h
d298 2
a299 2
ac6 = $(ARCHCORE)op.h $(ARCHCORE)opcode.h $(ARCHCORE)opnames.h  $(ARCHCORE)overload.h
ac7 = $(ARCHCORE)pad.h $(ARCHCORE)parser.h $(ARCHCORE)patchlevel.h $(ARCHCORE)perl.h
d302 1
a302 5
.ifdef THREADED
ac10 = $(ARCHCORE)pp_proto.h $(ARCHCORE)proto.h $(ARCHCORE)reentr.h $(ARCHCORE)regcomp.h
.else
ac10 = $(ARCHCORE)pp_proto.h $(ARCHCORE)proto.h $(ARCHCORE)regcomp.h
.endif
d305 1
a305 1
ac12 = $(ARCHCORE)sv.h $(SOCKARCH)
d307 1
a307 1
ac12 = $(ARCHCORE)sv.h
d341 1
a341 1
utils2 = [.utils]h2xs.com [.utils]libnetcfg.com [.lib]perlbug.com [.utils]dprofpp.com 
d343 1
a343 2
utils4 = [.utils]enc2xs.com [.utils]piconv.com [.utils]cpan.com [.utils]prove.com [.utils]ptar.com [.utils]ptardiff.com [.utils]shasum.com
utils5 = [.utils]corelist.com [.utils]config_data.com [.utils]cpanp.com [.utils]cpan2dist.com [.utils]cpanp-run-perl.com
d364 1
a364 1
utils : $(utils1) $(utils2) $(utils3) $(utils4) $(utils5)
d373 27
a399 30
pod0 = [.lib.pods]perl.pod [.lib.pods]perl5004delta.pod [.lib.pods]perl5005delta.pod [.lib.pods]perl5100delta.pod [.lib.pods]perl561delta.pod
pod1 = [.lib.pods]perl56delta.pod [.lib.pods]perl570delta.pod [.lib.pods]perl571delta.pod [.lib.pods]perl572delta.pod [.lib.pods]perl573delta.pod
pod2 = [.lib.pods]perl581delta.pod [.lib.pods]perl582delta.pod [.lib.pods]perl583delta.pod [.lib.pods]perl584delta.pod [.lib.pods]perl585delta.pod
pod3 = [.lib.pods]perl586delta.pod [.lib.pods]perl587delta.pod [.lib.pods]perl588delta.pod [.lib.pods]perl58delta.pod [.lib.pods]perl590delta.pod
pod4 = [.lib.pods]perl591delta.pod [.lib.pods]perl592delta.pod [.lib.pods]perl593delta.pod [.lib.pods]perl594delta.pod [.lib.pods]perl595delta.pod
pod5 = [.lib.pods]perlaix.pod [.lib.pods]perlamiga.pod [.lib.pods]perlapi.pod [.lib.pods]perlapio.pod [.lib.pods]perlapollo.pod [.lib.pods]perlartistic.pod
pod6 = [.lib.pods]perlbeos.pod [.lib.pods]perlbook.pod [.lib.pods]perlboot.pod [.lib.pods]perlbot.pod [.lib.pods]perlbs2000.pod [.lib.pods]perlcall.pod
pod7 = [.lib.pods]perlce.pod [.lib.pods]perlcheat.pod [.lib.pods]perlclib.pod [.lib.pods]perlcn.pod [.lib.pods]perlcommunity.pod [.lib.pods]perlcompile.pod
pod8 = [.lib.pods]perlcygwin.pod [.lib.pods]perldata.pod [.lib.pods]perldbmfilter.pod [.lib.pods]perldebguts.pod [.lib.pods]perldebtut.pod
pod9 = [.lib.pods]perldebug.pod [.lib.pods]perldelta.pod [.lib.pods]perldgux.pod [.lib.pods]perldiag.pod [.lib.pods]perldoc.pod [.lib.pods]perldos.pod
pod10 = [.lib.pods]perldsc.pod [.lib.pods]perlebcdic.pod [.lib.pods]perlembed.pod [.lib.pods]perlepoc.pod [.lib.pods]perlfaq.pod [.lib.pods]perlfaq1.pod
pod11 = [.lib.pods]perlfaq2.pod [.lib.pods]perlfaq3.pod [.lib.pods]perlfaq4.pod [.lib.pods]perlfaq5.pod [.lib.pods]perlfaq6.pod [.lib.pods]perlfaq7.pod
pod12 = [.lib.pods]perlfaq8.pod [.lib.pods]perlfaq9.pod [.lib.pods]perlfilter.pod [.lib.pods]perlfork.pod [.lib.pods]perlform.pod [.lib.pods]perlfreebsd.pod
pod13 = [.lib.pods]perlfunc.pod [.lib.pods]perlglossary.pod [.lib.pods]perlgpl.pod [.lib.pods]perlguts.pod [.lib.pods]perlhack.pod [.lib.pods]perlhist.pod
pod14 = [.lib.pods]perlhpux.pod [.lib.pods]perlhurd.pod [.lib.pods]perlintern.pod [.lib.pods]perlintro.pod [.lib.pods]perliol.pod [.lib.pods]perlipc.pod
pod15 = [.lib.pods]perlirix.pod [.lib.pods]perljp.pod [.lib.pods]perlko.pod [.lib.pods]perllexwarn.pod [.lib.pods]perllinux.pod [.lib.pods]perllocale.pod
pod16 = [.lib.pods]perllol.pod [.lib.pods]perlmachten.pod [.lib.pods]perlmacos.pod [.lib.pods]perlmacosx.pod [.lib.pods]perlmint.pod [.lib.pods]perlmod.pod
pod17 = [.lib.pods]perlmodinstall.pod [.lib.pods]perlmodlib.pod [.lib.pods]perlmodstyle.pod [.lib.pods]perlmpeix.pod [.lib.pods]perlnetware.pod
pod18 = [.lib.pods]perlnewmod.pod [.lib.pods]perlnumber.pod [.lib.pods]perlobj.pod [.lib.pods]perlop.pod [.lib.pods]perlopenbsd.pod
pod19 = [.lib.pods]perlopentut.pod [.lib.pods]perlos2.pod [.lib.pods]perlos390.pod [.lib.pods]perlos400.pod [.lib.pods]perlothrtut.pod
pod20 = [.lib.pods]perlpacktut.pod [.lib.pods]perlplan9.pod [.lib.pods]perlpod.pod [.lib.pods]perlpodspec.pod [.lib.pods]perlport.pod
pod21 = [.lib.pods]perlpragma.pod [.lib.pods]perlqnx.pod [.lib.pods]perlre.pod [.lib.pods]perlreapi.pod [.lib.pods]perlrebackslash.pod
pod22 = [.lib.pods]perlrecharclass.pod [.lib.pods]perlref.pod [.lib.pods]perlreftut.pod [.lib.pods]perlreguts.pod [.lib.pods]perlrequick.pod
pod23 = [.lib.pods]perlreref.pod [.lib.pods]perlretut.pod [.lib.pods]perlriscos.pod [.lib.pods]perlrun.pod [.lib.pods]perlsec.pod [.lib.pods]perlsolaris.pod
pod24 = [.lib.pods]perlstyle.pod [.lib.pods]perlsub.pod [.lib.pods]perlsymbian.pod [.lib.pods]perlsyn.pod [.lib.pods]perlthrtut.pod [.lib.pods]perltie.pod
pod25 = [.lib.pods]perltoc.pod [.lib.pods]perltodo.pod [.lib.pods]perltooc.pod [.lib.pods]perltoot.pod [.lib.pods]perltrap.pod [.lib.pods]perltru64.pod
pod26 = [.lib.pods]perltw.pod [.lib.pods]perlunicode.pod [.lib.pods]perlunifaq.pod [.lib.pods]perluniintro.pod [.lib.pods]perlunitut.pod
pod27 = [.lib.pods]perlutil.pod [.lib.pods]perluts.pod [.lib.pods]perlvar.pod [.lib.pods]perlvmesa.pod [.lib.pods]perlvms.pod [.lib.pods]perlvos.pod
pod28 = [.lib.pods]perlwin32.pod [.lib.pods]perlxs.pod [.lib.pods]perlxstut.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21) $(pod22) $(pod23) $(pod24) $(pod25) $(pod26) $(pod27) $(pod28)
d403 1
a403 1
[.pod]perldelta.pod : [.pod]perl5100delta.pod
d430 1
a430 1
	$(MINIPERL) [.vms]Writemain.pl "$(EXT)"
d435 1
a435 1
	Link $(LINKFLAGS)$(MTHREADLINKFLAGS)/NoDebug/Trace/NoMap/NoCross/NoFull/Exe=N$(DBG)perl$(E) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
d443 5
a447 1
	Link $(LINKFLAGS)$(MTHREADLINKFLAGS)/Exe=$(MMS$TARGET) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
a451 9
globals$(O) : uudmap.h

uudmap.h : generate_uudmap$(E)
	DEFINE/USER_MODE SYS$OUTPUT uudmap.h
	MCR SYS$DISK:[]generate_uudmap$(E)

generate_uudmap$(E) : generate_uudmap$(O) $(CRTL)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MMS$TARGET) generate_uudmap$(O) $(CRTLOPTS)

d497 1
a497 1
[.ext.DynaLoader]dl_vms.c : [.ext.DynaLoader]dl_vms.xs $(ARCHDIR)Config.pm [.lib.ExtUtils]XSSymSet.pm $(MINIPERL_EXE) [.lib.VMS]Filespec.pm 
d500 2
a501 2
[.ext.DynaLoader]dl_vms$(O) : [.ext.DynaLoader]dl_vms.c
	$(CC) $(CFLAGS) /Include=([],[.ext.DynaLoader])/Object=$(MMS$TARGET) $(MMS$SOURCE)
d503 1
a503 1
[.lib]DynaLoader.pm : [.ext.DynaLoader]DynaLoader.pm
d508 1
a508 1
[.lib]XSLoader.pm : [.ext.DynaLoader]XSLoader.pm
d513 1
a513 1
[.ext.DynaLoader]DynaLoader.pm : [.ext.DynaLoader]DynaLoader_pm.PL
d515 1
a515 1
	@@ Rename/Log DynaLoader.pm [.ext.DynaLoader]
d517 1
a517 1
[.ext.DynaLoader]XSLoader.pm : [.ext.DynaLoader]XSLoader_pm.PL
d519 1
a519 1
	@@ Rename/Log XSLoader.pm [.ext.DynaLoader]
d521 1
a521 1
dynext : $(LIBPREREQ) $(DBG)perlshr$(E) preplibrary makeppport
a548 9
[.utils]cpanp.com : [.utils]cpanp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]cpan2dist.com : [.utils]cpan2dist.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]cpanp-run-perl.com : [.utils]cpanp-run-perl.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

a551 15
[.utils]ptar.com : [.utils]ptar.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]ptardiff.com : [.utils]ptardiff.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]shasum.com : [.utils]shasum.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]config_data.com : [.utils]config_data.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]corelist.com : [.utils]corelist.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

d577 4
d667 1
a667 4
	@@ $(MINIPERL) -e "use AutoSplit; autosplit_lib_modules(@@ARGV)" [.lib]*.pm [.lib.*]*.pm [.lib.*.*]*.pm

makeppport : $(MINIPERL_EXE) $(ARCHDIR)Config.pm
	$(MINIPERL) mkppport
a680 4
[.lib.pods]perl5100delta.pod : [.pod]perl5100delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a740 24
[.lib.pods]perl590delta.pod : [.pod]perl590delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl591delta.pod : [.pod]perl591delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl592delta.pod : [.pod]perl592delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl593delta.pod : [.pod]perl593delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl594delta.pod : [.pod]perl594delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl595delta.pod : [.pod]perl595delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a804 4
[.lib.pods]perlcommunity.pod : [.pod]perlcommunity.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1100 4
[.lib.pods]perlpragma.pod : [.pod]perlpragma.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1108 12
[.lib.pods]perlreapi.pod : [.pod]perlreapi.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlrebackslash.pod : [.pod]perlrebackslash.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perlrecharclass.pod : [.pod]perlrecharclass.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1116 4
[.lib.pods]perlreguts.pod : [.pod]perlreguts.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1128 4
[.lib.pods]perlriscos.pod : [.pod]perlriscos.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1148 4
[.lib.pods]perlsymbian.pod : [.pod]perlsymbian.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1192 4
[.lib.pods]perlunifaq.pod : [.pod]perlunifaq.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1196 4
[.lib.pods]perlunitut.pod : [.pod]perlunitut.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1259 1
#	overload.h:	overload.pl
d1264 3
a1276 1
	$(INSTPERL) overload.pl
d1278 1
d1282 6
a1301 6
unpack_files :
	- $(MINIPERL) uupacktool.pl -u -m

cleanup_unpacked_files :
	- IF F$SEARCH("$(MINIPERL_EXE)") .NES. "" THEN $(MINIPERL) uupacktool.pl -c

d1305 1
a1305 1
test : all [.t.lib]vmsfspec.t [.t.lib]vms_dclsym.t [.t.lib]vms_stdio.t unpack_files
d1307 1
a1307 1
	- @@[.vms]test.com "$(E)" "$(__DEBUG__)"
d1312 1
a1312 1
	- @@[.vms]test.com "$(E)" "$(__DEBUG__)"
d1317 1
a1317 1
	- @@[.vms]test.com "$(E)" "$(__DEBUG__)"
a1414 3
$(ARCHCORE)overload.h : overload.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
a1417 3
$(ARCHCORE)parser.h : parser.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
a1450 1
.ifdef THREADED
d1454 3
a1456 1
.endif
d1472 3
a1530 2
mro$(O) : mro.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
a1536 2
mathoms$(O) : mathoms.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
d1543 2
a1546 2
op$(O) : op.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
d1644 1
a1644 1
        - If F$Search("[.t]Perl$(E)").nes."" Then Delete/NoConfirm/Log [.t]Perl$(E);*
d1646 1
d1652 5
a1656 6
	- If F$Search("config.h;-1").nes."" Then Purge/NoConfirm/Log config.h
	- If F$Search("config.sh;-1").nes."" Then Purge/NoConfirm/Log config.sh
	- If F$Search("vmsish.h;-1").nes."" Then Purge/NoConfirm/Log vmsish.h
	- If F$Search("vms.c;-1")   .nes."" Then Purge/NoConfirm/Log vms.c
	- If F$Search("perlmain.c;-1")   .nes."" Then Purge/NoConfirm/Log perlmain.c
	- If F$Search("uudmap.h;-1")   .nes."" Then Purge/NoConfirm/Log uudmap.h
d1658 10
a1667 10
	- If F$Search("[.ext.DynaLoader]dl_vms$(O);-1").nes."" Then Purge/NoConfirm/Log [.ext.DynaLoader]dl_vms$(O)
	- If F$Search("[.ext.DynaLoader]dl_vms.c;-1").nes."" Then Purge/NoConfirm/Log [.ext.DynaLoader]dl_vms.c
	- If F$Search("[.ext.Opcode...];-1").nes."" Then Purge/NoConfirm/Log [.ext.Opcode]
	- If F$Search("[.vms.ext...]*.C;-1").nes."" Then Purge/NoConfirm/Log [.vms.ext...]*.C
	- If F$Search("[.vms.ext...]*$(O);-1").nes."" Then Purge/NoConfirm/Log [.vms.ext...]*$(O)
	- If F$Search("[.lib.auto...]*.al;-1").nes."" Then Purge/NoConfirm/Log [.lib.auto...]*.al
	- If F$Search("[.lib.auto...]autosplit.ix;-1").nes."" Then Purge/NoConfirm/Log [.lib.auto...]autosplit.ix
	- If F$Search("[.lib]DynaLoader.pm;-1").nes."" Then Purge/NoConfirm/Log [.lib]DynaLoader.pm
	- If F$Search("[.lib]XSLoader.pm;-1").nes."" Then Purge/NoConfirm/Log [.lib]XSLoader.pm
	- If F$Search("[.lib]Config.pm;-1").nes."" Then Purge/NoConfirm/Log [.lib]Config.pm
d1669 1
a1669 1
	- If F$Search("[.lib]Config_heavy.pl;-1").nes."" Then Purge/NoConfirm/Log [.lib]Config_heavy.pl
d1673 1
a1673 1
	- If F$Search("[.lib.VMS]*.*;-1").nes."" Then Purge/NoConfirm/Log [.lib.VMS]*.*
d1682 1
a1682 1
clean : tidy cleantest cleanup_unpacked_files
d1688 3
a1690 4
	- If F$Search("vmsish.h").nes."" Then Delete/NoConfirm/Log vmsish.h;*
	- If F$Search("vms.c")   .nes."" Then Delete/NoConfirm/Log vms.c;*
	- If F$Search("perlmain.c")   .nes."" Then Delete/NoConfirm/Log perlmain.c;*
	- If F$Search("uudmap.h")   .nes."" Then Delete/NoConfirm/Log uudmap.h;*
d1693 6
a1698 6
	- If F$Search("[.ext.DynaLoader]dl_vms$(O)").nes."" Then Delete/NoConfirm/Log [.ext.DynaLoader]dl_vms$(O);*
	- If F$Search("[.ext.DynaLoader]dl_vms.c").nes."" Then Delete/NoConfirm/Log [.ext.DynaLoader]dl_vms.c;*
	- If F$Search("[.ext.DynaLoader]DynaLoader.pm").nes."" Then Delete/NoConfirm/Log [.ext.DynaLoader]DynaLoader.pm;*
	- If F$Search("[.ext.DynaLoader]XSLoader.pm").nes."" Then Delete/NoConfirm/Log [.ext.DynaLoader]XSLoader.pm;*
	- If F$Search("[.vms.ext...]*.C").nes."" Then Delete/NoConfirm/Log [.vms.ext...]*.C;*
	- If F$Search("[.vms.ext...]*$(O)").nes."" Then Delete/NoConfirm/Log [.vms.ext...]*$(O);*
a1704 1
	- $(MINIPERL) mkppport "--clean"
d1707 2
a1708 2
	- If F$Search("config.h").nes."" Then Delete/NoConfirm/Log config.h;*
	- If F$Search("config.sh").nes."" Then Delete/NoConfirm/Log config.sh;*
d1719 5
a1723 5
	- If F$Search("[.lib]DynaLoader.pm").nes."" Then Delete/NoConfirm/Log [.lib]DynaLoader.pm;*
	- If F$Search("[.lib]XSLoader.pm").nes."" Then Delete/NoConfirm/Log [.lib]XSLoader.pm;*
	- If F$Search("[.lib]Config.pm").nes."" Then Delete/NoConfirm/Log [.lib]Config.pm;*
	- If F$Search("[.lib]Config_heavy.pl").nes."" Then Delete/NoConfirm/Log [.lib]Config_heavy.pl;*
	- If F$Search("[.lib]*.com").nes."" Then Delete/NoConfirm/Log [.lib]*.com;*
d1745 10
a1754 10
	- If F$Search("*.c;-1").nes."" Then Purge/NoConfirm/Log *.c
	- If F$Search("*.h;-1").nes."" Then Purge/NoConfirm/Log *.h
	- If F$Search("*.vms;-1").nes."" Then Purge/NoConfirm/Log *.vms
	- If F$Search("[.vms]$(MAKEFILE);-1").nes."" Then Purge/NoConfirm/Log [.vms]$(MAKEFILE)
	- If F$Search("[.vms]*.c;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.c
	- If F$Search("[.vms]*.h;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.h
	- If F$Search("[.vms]*.pl;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.pl
	- If F$Search("[.vms]*.vms;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.vms
	- If F$Search("[.vms...]*.pm;-1").nes."" Then Purge/NoConfirm/Log [.vms...]*.pm
	- If F$Search("[.vms...]*.xs;-1").nes."" Then Purge/NoConfirm/Log [.vms...]*.xs
@


1.1.1.11
log
@import perl 5.10.1
@
text
@a251 8
# Macros to invoke a copy of perl during the build.  Targets which
# are built using these macros should depend on $(PERL_EXE) EXT
.IFDEF __DEBUG__
PERL_EXE = Sys$Disk:[]n$(DBG)perl$(E)
.ELSE
PERL_EXE = Sys$Disk:[]perl$(E)
.ENDIF
PERL = MCR $(PERL_EXE) "-I[.lib]"
d287 5
a291 7
obj0 = perl$(O)
obj1 = $(MALLOC_O) $(SOCKO) av$(O) deb$(O) doio$(O) doop$(O) dump$(O) mro$(O) globals$(O) gv$(O) hv$(O) 
obj2 = locale$(O) mathoms$(O) mg$(O) miniperlmain$(O) numeric$(O) op$(O) pad$(O) perlapi$(O) perlio$(O) 
obj3 = perly$(O) pp$(O) pp_ctl$(O) pp_hot$(O) reentr$(O) pp_pack$(O) pp_sort$(O) pp_sys$(O) regcomp$(O) 
obj4 = regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) toke$(O) universal$(O) utf8$(O) util$(O) vms$(O) xsutils$(O)

mini_obj = perlmini$(O) $(obj1) $(obj2) $(obj3) $(obj4)
d296 1
a296 1
h2 = iperlsys.h keywords.h mydtrace.h mg.h nostdio.h op.h opcode.h opnames.h overload.h pad.h
d308 1
a308 1
ac5 = $(ARCHCORE)keywords.h $(ARCHCORE)mydtrace.h $(ARCHCORE)mg.h $(ARCHCORE)nostdio.h
d353 1
a353 1
LIBPREREQ = $(ARCHDIR)Config.pm $(ARCHDIR)Config_heavy.pl [.lib.VMS]Filespec.pm [.lib]DynaLoader.pm [.lib]XSLoader.pm [.lib]lib.pm $(ARCHDIR)vmspipe.com [.lib]re.pm unidatafiles.ts
d362 1
a362 1
all : base extras archcorefiles preplibrary [.pod]perltoc.pod
d368 1
a368 1
all : base extras x2p archcorefiles preplibrary [.pod]perltoc.pod
a373 4

git_version.h : $(MINIPERL_EXE) make_patchnum.pl
        $(MINIPERL) make_patchnum.pl

d389 30
a418 31
pod0 = [.lib.pods]perl.pod [.lib.pods]perl5004delta.pod [.lib.pods]perl5005delta.pod [.lib.pods]perl5100delta.pod [.lib.pods]perl5101delta.pod
pod1 = [.lib.pods]perl561delta.pod [.lib.pods]perl56delta.pod [.lib.pods]perl570delta.pod [.lib.pods]perl571delta.pod [.lib.pods]perl572delta.pod
pod2 = [.lib.pods]perl573delta.pod [.lib.pods]perl581delta.pod [.lib.pods]perl582delta.pod [.lib.pods]perl583delta.pod [.lib.pods]perl584delta.pod
pod3 = [.lib.pods]perl585delta.pod [.lib.pods]perl586delta.pod [.lib.pods]perl587delta.pod [.lib.pods]perl588delta.pod [.lib.pods]perl589delta.pod
pod4 = [.lib.pods]perl58delta.pod [.lib.pods]perl590delta.pod [.lib.pods]perl591delta.pod [.lib.pods]perl592delta.pod [.lib.pods]perl593delta.pod
pod5 = [.lib.pods]perl594delta.pod [.lib.pods]perl595delta.pod [.lib.pods]perlaix.pod [.lib.pods]perlamiga.pod [.lib.pods]perlapi.pod
pod6 = [.lib.pods]perlapio.pod [.lib.pods]perlapollo.pod [.lib.pods]perlartistic.pod [.lib.pods]perlbeos.pod [.lib.pods]perlbook.pod [.lib.pods]perlboot.pod
pod7 = [.lib.pods]perlbot.pod [.lib.pods]perlbs2000.pod [.lib.pods]perlcall.pod [.lib.pods]perlce.pod [.lib.pods]perlcheat.pod [.lib.pods]perlclib.pod
pod8 = [.lib.pods]perlcn.pod [.lib.pods]perlcommunity.pod [.lib.pods]perlcompile.pod [.lib.pods]perlcygwin.pod [.lib.pods]perldata.pod
pod9 = [.lib.pods]perldbmfilter.pod [.lib.pods]perldebguts.pod [.lib.pods]perldebtut.pod [.lib.pods]perldebug.pod [.lib.pods]perldelta.pod
pod10 = [.lib.pods]perldgux.pod [.lib.pods]perldiag.pod [.lib.pods]perldoc.pod [.lib.pods]perldos.pod [.lib.pods]perldsc.pod [.lib.pods]perlebcdic.pod
pod11 = [.lib.pods]perlembed.pod [.lib.pods]perlepoc.pod [.lib.pods]perlfaq.pod [.lib.pods]perlfaq1.pod [.lib.pods]perlfaq2.pod [.lib.pods]perlfaq3.pod
pod12 = [.lib.pods]perlfaq4.pod [.lib.pods]perlfaq5.pod [.lib.pods]perlfaq6.pod [.lib.pods]perlfaq7.pod [.lib.pods]perlfaq8.pod [.lib.pods]perlfaq9.pod
pod13 = [.lib.pods]perlfilter.pod [.lib.pods]perlfork.pod [.lib.pods]perlform.pod [.lib.pods]perlfreebsd.pod [.lib.pods]perlfunc.pod
pod14 = [.lib.pods]perlglossary.pod [.lib.pods]perlgpl.pod [.lib.pods]perlguts.pod [.lib.pods]perlhack.pod [.lib.pods]perlhaiku.pod [.lib.pods]perlhist.pod
pod15 = [.lib.pods]perlhpux.pod [.lib.pods]perlhurd.pod [.lib.pods]perlintern.pod [.lib.pods]perlintro.pod [.lib.pods]perliol.pod [.lib.pods]perlipc.pod
pod16 = [.lib.pods]perlirix.pod [.lib.pods]perljp.pod [.lib.pods]perlko.pod [.lib.pods]perllexwarn.pod [.lib.pods]perllinux.pod [.lib.pods]perllocale.pod
pod17 = [.lib.pods]perllol.pod [.lib.pods]perlmachten.pod [.lib.pods]perlmacos.pod [.lib.pods]perlmacosx.pod [.lib.pods]perlmint.pod [.lib.pods]perlmod.pod
pod18 = [.lib.pods]perlmodinstall.pod [.lib.pods]perlmodlib.pod [.lib.pods]perlmodstyle.pod [.lib.pods]perlmpeix.pod [.lib.pods]perlmroapi.pod
pod19 = [.lib.pods]perlnetware.pod [.lib.pods]perlnewmod.pod [.lib.pods]perlnumber.pod [.lib.pods]perlobj.pod [.lib.pods]perlop.pod
pod20 = [.lib.pods]perlopenbsd.pod [.lib.pods]perlopentut.pod [.lib.pods]perlos2.pod [.lib.pods]perlos390.pod [.lib.pods]perlos400.pod [.lib.pods]perlothrtut.pod
pod21 = [.lib.pods]perlpacktut.pod [.lib.pods]perlperf.pod [.lib.pods]perlplan9.pod [.lib.pods]perlpod.pod [.lib.pods]perlpodspec.pod [.lib.pods]perlport.pod
pod22 = [.lib.pods]perlpragma.pod [.lib.pods]perlqnx.pod [.lib.pods]perlre.pod [.lib.pods]perlreapi.pod [.lib.pods]perlrebackslash.pod
pod23 = [.lib.pods]perlrecharclass.pod [.lib.pods]perlref.pod [.lib.pods]perlreftut.pod [.lib.pods]perlreguts.pod [.lib.pods]perlrepository.pod
pod24 = [.lib.pods]perlrequick.pod [.lib.pods]perlreref.pod [.lib.pods]perlretut.pod [.lib.pods]perlriscos.pod [.lib.pods]perlrun.pod [.lib.pods]perlsec.pod
pod25 = [.lib.pods]perlsolaris.pod [.lib.pods]perlstyle.pod [.lib.pods]perlsub.pod [.lib.pods]perlsymbian.pod [.lib.pods]perlsyn.pod
pod26 = [.lib.pods]perlthrtut.pod [.lib.pods]perltie.pod [.lib.pods]perltoc.pod [.lib.pods]perltodo.pod [.lib.pods]perltooc.pod [.lib.pods]perltoot.pod
pod27 = [.lib.pods]perltrap.pod [.lib.pods]perltru64.pod [.lib.pods]perltw.pod [.lib.pods]perlunicode.pod [.lib.pods]perlunifaq.pod
pod28 = [.lib.pods]perluniintro.pod [.lib.pods]perlunitut.pod [.lib.pods]perlutil.pod [.lib.pods]perluts.pod [.lib.pods]perlvar.pod [.lib.pods]perlvmesa.pod
pod29 = [.lib.pods]perlvms.pod [.lib.pods]perlvos.pod [.lib.pods]perlwin32.pod [.lib.pods]perlxs.pod [.lib.pods]perlxstut.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21) $(pod22) $(pod23) $(pod24) $(pod25) $(pod26) $(pod27) $(pod28) $(pod29)
d422 1
a422 1
[.pod]perldelta.pod : [.pod]perl5101delta.pod
d425 2
a426 12
[.pod]perlapi.pod : embed.fnc autodoc.pl $(MINIPERL_EXE)
	$(MINIPERL) autodoc.pl

[.pod]perlmodlib.pod : [.pod]perlmodlib.pl MANIFEST $(MINIPERL_EXE)
	$(MINIPERL) [.pod]perlmodlib.pl "-q"

[.pod]perlintern.pod : embed.fnc autodoc.pl $(MINIPERL_EXE)
	$(MINIPERL) autodoc.pl

[.pod]perltoc.pod : [.pod]perldelta.pod [.pod]perlapi.pod [.pod]perlintern.pod  [.pod]perlmodlib.pod extra.pods $(PERL_EXE)
	@@ define/user_mode $(DBG)PERLSHR SYS$DISK:[]$(DBG)perlshr$(E)
	$(PERL) [.pod]buildtoc "-q" "--build-toc"
d439 4
a442 4
$(MINIPERL_EXE) :  miniperlmain$(O), $(DBG)libperlmini$(OLB) $(CRTL)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MMS$TARGET) miniperlmain$(O), $(DBG)libperlmini$(OLB)/Library/Include=globals $(CRTLOPTS)
$(DBG)miniperl$(E) :  miniperlmain$(O), $(DBG)libperlmini$(OLB) $(CRTL)
	Link $(LINKFLAGS)/Trace/Exe=$(MMS$TARGET) miniperlmain$(O), $(DBG)libperlmini$(OLB)/Library/Include=globals  $(CRTLOPTS)
a447 4
$(DBG)libperlmini$(OLB) : $(mini_obj)
	@@ If F$Search("$(MMS$TARGET)").eqs."" Then Library/Object/Create $(MMS$TARGET)
	Library/Object/Replace $(MMS$TARGET) $(MMS$SOURCE_LIST)

d467 1
a467 11
perlmini.c : perl.c
	@@ IF F$SEARCH("$(MMS$TARGET)") .NES. "" THEN DELETE/NOCONFIRM/LOG $(MMS$TARGET);*
	@@ COPY/NOCONFIRM _NLA0: $(MMS$TARGET)
	@@ SET FILE /ATTRIBUTES=RFM:STMLF $(MMS$TARGET)
	@@ OPEN/APPEND perlmini $(MMS$TARGET)
	@@ WRITE perlmini "#define PERL_IS_MINIPERL"
	@@ CLOSE perlmini
	@@ APPEND/NOCONFIRM/LOG $(MMS$SOURCE) $(MMS$TARGET)

perlmini$(O) : perlmini.c
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
a475 3
generate_uudmap$(O) : generate_uudmap.c
        $(CC) $(CORECFLAGS) $(MMS$SOURCE)

d521 1
a521 1
[.ext.DynaLoader]dl_vms.c : [.ext.DynaLoader]dl_vms.xs $(ARCHDIR)Config.pm $(MINIPERL_EXE) [.lib.VMS]Filespec.pm 
d545 2
a546 2
dynext : $(LIBPREREQ) $(DBG)perlshr$(E) preplibrary makeppport $(MINIPERL_EXE)
       $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--all"
d555 4
a731 4
[.lib.pods]perl5101delta.pod : [.pod]perl5101delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a787 4
[.lib.pods]perl589delta.pod : [.pod]perl589delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1023 4
[.lib.pods]perlhaiku.pod : [.pod]perlhaiku.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1115 4
[.lib.pods]perlmroapi.pod : [.pod]perlmroapi.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1163 4
[.lib.pods]perlperf.pod : [.pod]perlperf.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1215 4
[.lib.pods]perlrepository.pod : [.pod]perlrepository.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

d1328 1
a1328 1
[.lib.pods]perlvms.pod : [.pod]perlvms.pod
d1348 1
a1348 1
install.html : [.pod]perltoc.pod
d1423 1
a1423 1
test_harness : all [.t.lib]vmsfspec.t [.t.lib]vms_dclsym.t [.t.lib]vms_stdio.t unpack_files
a1512 3
$(ARCHCORE)mydtrace.h : mydtrace.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1642 2
a1643 2
globals$(O) : globals.c uudmap.h $(h)
        $(CC) $(CORECFLAGS) $(MMS$SOURCE)
d1666 1
a1666 1
perl$(O) : perl.c git_version.h $(h)
d1791 1
d1802 1
a1802 1
      	- $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--all" "--target=clean"
a1809 1
	- If F$Search("perlmini.c")   .nes."" Then Delete/NoConfirm/Log perlmini.c;*
a1819 1
	- If F$Search("[.pod]perlapi.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlapi.pod;*
a1820 3
	- If F$Search("[.pod]perlintern.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlintern.pod;*
	- If F$Search("[.pod]perlmodlib.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlmodlib.pod;*
	- If F$Search("[.pod]perltoc.pod").nes."" Then Delete/NoConfirm/Log [.pod]perltoc.pod;*
a1821 3
	- If F$Search("unpushed.h").nes."" Then Delete/NoConfirm/Log unpushed.h;*
	- If F$Search("[.lib]Config_git.pl").nes."" Then Delete/NoConfirm/Log [.lib]Config_git.pl;*
	- If F$Search("git_version.h").nes."" Then Delete/NoConfirm/Log git_version.h;*
d1824 1
a1824 1
      	- $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--all" "--target=realclean"
d1831 1
a1831 1
	- If F$Search("[.lib.unicore...]*.pl").nes."" Then Delete/NoConfirm/Log [.lib.unicore...]*.pl;*
d1835 1
a1844 1
	- If F$Search("[.lib...].exists").nes."" Then Delete/NoConfirm/Log [.lib...].exists;*
d1851 1
a1859 1
	- If F$Search("[.t]test_state.").nes."" Then Delete/NoConfirm/Log [.t]test_state.;*
a1863 1
	- If F$Search("vmspipe.com").nes."" Then Delete/NoConfirm/Log vmspipe.com;*
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d244 1
a244 1
MINIPERL = MCR $(MINIPERL_EXE) "-I[.lib]" "-I[.cpan.Cwd]" "-I[.cpan.Cwd.lib]"
d266 1
a266 1
myextobj = DynaLoader$(O),
d292 1
a292 1
c3 = run.c scope.c sv.c taint.c toke.c universal.c utf8.c util.c vms.c
d299 1
a299 1
obj4 = regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) toke$(O) universal$(O) utf8$(O) util$(O) vms$(O)
d316 1
a316 1
ac3 = $(ARCHCORE)form.h $(ARCHCORE)git_version.h $(ARCHCORE)gv.h $(ARCHCORE)handy.h $(ARCHCORE)hv.h
d363 1
a363 1
LIBPREREQ = $(ARCHDIR)Config.pm $(ARCHDIR)Config_heavy.pl [.lib.VMS]Filespec.pm $(ARCHDIR)vmspipe.com [.lib]re.pm
d388 1
a388 1
base : miniperl git_version.h nonxsext perl
d404 30
a433 32
pod1 = [.lib.pods]perl5110delta.pod [.lib.pods]perl5111delta.pod [.lib.pods]perl5112delta.pod [.lib.pods]perl5113delta.pod [.lib.pods]perl5114delta.pod
pod2 = [.lib.pods]perl5115delta.pod [.lib.pods]perl5120delta.pod [.lib.pods]perl5121delta.pod [.lib.pods]perl5122delta.pod [.lib.pods]perl561delta.pod
pod3 = [.lib.pods]perl56delta.pod [.lib.pods]perl570delta.pod [.lib.pods]perl571delta.pod [.lib.pods]perl572delta.pod [.lib.pods]perl573delta.pod
pod4 = [.lib.pods]perl581delta.pod [.lib.pods]perl582delta.pod [.lib.pods]perl583delta.pod [.lib.pods]perl584delta.pod [.lib.pods]perl585delta.pod
pod5 = [.lib.pods]perl586delta.pod [.lib.pods]perl587delta.pod [.lib.pods]perl588delta.pod [.lib.pods]perl589delta.pod [.lib.pods]perl58delta.pod
pod6 = [.lib.pods]perl590delta.pod [.lib.pods]perl591delta.pod [.lib.pods]perl592delta.pod [.lib.pods]perl593delta.pod [.lib.pods]perl594delta.pod
pod7 = [.lib.pods]perl595delta.pod [.lib.pods]perlaix.pod [.lib.pods]perlamiga.pod [.lib.pods]perlapi.pod [.lib.pods]perlapio.pod [.lib.pods]perlapollo.pod
pod8 = [.lib.pods]perlartistic.pod [.lib.pods]perlbeos.pod [.lib.pods]perlbook.pod [.lib.pods]perlboot.pod [.lib.pods]perlbot.pod [.lib.pods]perlbs2000.pod
pod9 = [.lib.pods]perlcall.pod [.lib.pods]perlce.pod [.lib.pods]perlcheat.pod [.lib.pods]perlclib.pod [.lib.pods]perlcn.pod [.lib.pods]perlcommunity.pod
pod10 = [.lib.pods]perlcompile.pod [.lib.pods]perlcygwin.pod [.lib.pods]perldata.pod [.lib.pods]perldbmfilter.pod [.lib.pods]perldebguts.pod
pod11 = [.lib.pods]perldebtut.pod [.lib.pods]perldebug.pod [.lib.pods]perldelta.pod [.lib.pods]perldgux.pod [.lib.pods]perldiag.pod [.lib.pods]perldoc.pod
pod12 = [.lib.pods]perldos.pod [.lib.pods]perldsc.pod [.lib.pods]perlebcdic.pod [.lib.pods]perlembed.pod [.lib.pods]perlepoc.pod [.lib.pods]perlfaq.pod
pod13 = [.lib.pods]perlfaq1.pod [.lib.pods]perlfaq2.pod [.lib.pods]perlfaq3.pod [.lib.pods]perlfaq4.pod [.lib.pods]perlfaq5.pod [.lib.pods]perlfaq6.pod
pod14 = [.lib.pods]perlfaq7.pod [.lib.pods]perlfaq8.pod [.lib.pods]perlfaq9.pod [.lib.pods]perlfilter.pod [.lib.pods]perlfork.pod [.lib.pods]perlform.pod
pod15 = [.lib.pods]perlfreebsd.pod [.lib.pods]perlfunc.pod [.lib.pods]perlglossary.pod [.lib.pods]perlgpl.pod [.lib.pods]perlguts.pod [.lib.pods]perlhack.pod
pod16 = [.lib.pods]perlhaiku.pod [.lib.pods]perlhist.pod [.lib.pods]perlhpux.pod [.lib.pods]perlhurd.pod [.lib.pods]perlintern.pod [.lib.pods]perlintro.pod
pod17 = [.lib.pods]perliol.pod [.lib.pods]perlipc.pod [.lib.pods]perlirix.pod [.lib.pods]perljp.pod [.lib.pods]perlko.pod [.lib.pods]perllexwarn.pod
pod18 = [.lib.pods]perllinux.pod [.lib.pods]perllocale.pod [.lib.pods]perllol.pod [.lib.pods]perlmacos.pod [.lib.pods]perlmacosx.pod [.lib.pods]perlmod.pod
pod19 = [.lib.pods]perlmodinstall.pod [.lib.pods]perlmodlib.pod [.lib.pods]perlmodstyle.pod [.lib.pods]perlmpeix.pod [.lib.pods]perlmroapi.pod
pod20 = [.lib.pods]perlnetware.pod [.lib.pods]perlnewmod.pod [.lib.pods]perlnumber.pod [.lib.pods]perlobj.pod [.lib.pods]perlop.pod
pod21 = [.lib.pods]perlopenbsd.pod [.lib.pods]perlopentut.pod [.lib.pods]perlos2.pod [.lib.pods]perlos390.pod [.lib.pods]perlos400.pod
pod22 = [.lib.pods]perlpacktut.pod [.lib.pods]perlperf.pod [.lib.pods]perlplan9.pod [.lib.pods]perlpod.pod [.lib.pods]perlpodspec.pod
pod23 = [.lib.pods]perlpolicy.pod [.lib.pods]perlport.pod [.lib.pods]perlpragma.pod [.lib.pods]perlqnx.pod [.lib.pods]perlre.pod [.lib.pods]perlreapi.pod
pod24 = [.lib.pods]perlrebackslash.pod [.lib.pods]perlrecharclass.pod [.lib.pods]perlref.pod [.lib.pods]perlreftut.pod [.lib.pods]perlreguts.pod
pod25 = [.lib.pods]perlrepository.pod [.lib.pods]perlrequick.pod [.lib.pods]perlreref.pod [.lib.pods]perlretut.pod [.lib.pods]perlriscos.pod
pod26 = [.lib.pods]perlrun.pod [.lib.pods]perlsec.pod [.lib.pods]perlsolaris.pod [.lib.pods]perlstyle.pod [.lib.pods]perlsub.pod [.lib.pods]perlsymbian.pod
pod27 = [.lib.pods]perlsyn.pod [.lib.pods]perlthrtut.pod [.lib.pods]perltie.pod [.lib.pods]perltoc.pod [.lib.pods]perltodo.pod [.lib.pods]perltooc.pod
pod28 = [.lib.pods]perltoot.pod [.lib.pods]perltrap.pod [.lib.pods]perltru64.pod [.lib.pods]perltw.pod [.lib.pods]perlunicode.pod [.lib.pods]perlunifaq.pod
pod29 = [.lib.pods]perluniintro.pod [.lib.pods]perluniprops.pod [.lib.pods]perlunitut.pod [.lib.pods]perlutil.pod [.lib.pods]perluts.pod
pod30 = [.lib.pods]perlvar.pod [.lib.pods]perlvmesa.pod [.lib.pods]perlvms.pod [.lib.pods]perlvos.pod [.lib.pods]perlwin32.pod [.lib.pods]perlxs.pod
pod31 = [.lib.pods]perlxstut.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21) $(pod22) $(pod23) $(pod24) $(pod25) $(pod26) $(pod27) $(pod28) $(pod29) $(pod30) $(pod31)
d437 1
a437 1
[.pod]perldelta.pod : [.pod]perl5122delta.pod
d451 1
a451 1
	$(PERL) "-f" [.pod]buildtoc "-q" "--build-toc"
d508 3
a510 2
uudmap.h bitcount.h : generate_uudmap$(E)
	MCR SYS$DISK:[]generate_uudmap$(E) uudmap.h bitcount.h
d558 2
a559 2
unidatafiles.ts : $(MINIPERL_EXE) [.lib]Config.pm [.lib.unicore]mktables nonxsext
	$(MINIPERL) [.lib.unicore]mktables "-C" [.lib.unicore] "-P" [.pod] "-makelist" "-maketest" "-p"
d563 10
a572 2
DynaLoader$(O) : $(ARCHDIR)Config.pm $(MINIPERL_EXE) [.lib.VMS]Filespec.pm 
	$(MINIPERL) make_ext.pl "MAKE=$(MMS)" "DynaLoader"
d574 12
a585 2
dynext : $(LIBPREREQ) $(DBG)perlshr$(E) unidatafiles.ts DynaLoader$(O) preplibrary makeppport $(MINIPERL_EXE)
       $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--dynamic" "--static"
d587 5
a591 2
nonxsext : $(LIBPREREQ) preplibrary $(MINIPERL_EXE)
       $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--nonxs"
d679 1
a679 1
[.utils]xsubpp.com : [.utils]xsubpp.PL $(ARCHDIR)Config.pm nonxsext
d747 3
d751 1
a751 1
makeppport : $(MINIPERL_EXE) $(ARCHDIR)Config.pm nonxsext
a773 36
[.lib.pods]perl5110delta.pod : [.pod]perl5110delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5111delta.pod : [.pod]perl5111delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5112delta.pod : [.pod]perl5112delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5113delta.pod : [.pod]perl5113delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5114delta.pod : [.pod]perl5114delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5115delta.pod : [.pod]perl5115delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5120delta.pod : [.pod]perl5120delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5121delta.pod : [.pod]perl5121delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

[.lib.pods]perl5122delta.pod : [.pod]perl5122delta.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

d1130 4
d1142 4
d1210 4
a1233 4
[.lib.pods]perlpolicy.pod : [.pod]perlpolicy.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

a1369 4
[.lib.pods]perluniprops.pod : [.pod]perluniprops.pod
	@@ If F$Search("[.lib]pods.dir").eqs."" Then Create/Directory [.lib.pods]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pods]

d1465 12
d1480 1
a1480 1
test : all [.t.lib]vmsfspec.t
d1485 1
a1485 1
test_harness : all [.t.lib]vmsfspec.t
d1490 1
a1490 1
minitest : $(MINITEST_EXE) [.lib]re.pm [.lib.VMS]Filespec.pm unidatafiles.ts
a1553 3
$(ARCHCORE)git_version.h : git_version.h
	@@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
d1707 1
a1707 1
globals$(O) : globals.c uudmap.h bitcount.h $(h)
d1777 2
a1840 1
	- If F$Search("bitcount.h;-1")   .nes."" Then Purge/NoConfirm/Log bitcount.h
d1842 2
d1849 2
d1865 1
a1865 1
clean : tidy cleantest
a1875 1
	- If F$Search("bitcount.h")   .nes."" Then Delete/NoConfirm/Log bitcount.h;*
d1878 4
a1889 1
	- If F$Search("[.pod]perluniprops.pod").nes."" Then Delete/NoConfirm/Log [.pod]perluniprops.pod;*
d1911 2
d1934 2
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d16 1
a16 1
#	             but leave 'installable' files (images, library) intact
d18 1
a18 1
#	cleansrc  -- 'realclean' + purge *.c,*.h,descrip.mms
a35 1
~ARCHNAME~
d61 1
d65 1
d68 1
d84 23
a106 3
ARCHDIR =  [.lib.$(ARCHNAME).$(PERL_VERSION)]
ARCHCORE = [.lib.$(ARCHNAME).$(PERL_VERSION).CORE]
ARCHAUTO = [.lib.$(ARCHNAME).$(PERL_VERSION).auto]
d113 1
d163 29
d244 1
a244 1
MINIPERL = MCR $(MINIPERL_EXE) "-I[.lib]" "-I[.dist.Cwd]" "-I[.dist.Cwd.lib]"
d289 1
a289 1
c0 = $(MALLOC_C) av.c deb.c doio.c doop.c dump.c globals.c gv.c hv.c mro.c
d292 1
a292 1
c3 = run.c scope.c sv.c taint.c toke.c universal.c utf8.c util.c vms.c keywords.c
d296 2
a297 2
obj1 = $(MALLOC_O) av$(O) deb$(O) doio$(O) doop$(O) dump$(O) mro$(O) globals$(O) gv$(O) hv$(O) 
obj2 = keywords$(O) locale$(O) mathoms$(O) mg$(O) miniperlmain$(O) numeric$(O) op$(O) pad$(O) perlapi$(O) perlio$(O) 
d304 32
a335 10
h0 = av.h config.h cop.h cv.h embed.h embedvar.h
h1 = EXTERN.h form.h gv.h handy.h hv.h l1_char_class_tab.h INTERN.h intrpvar.h
h2 = iperlsys.h keywords.h mydtrace.h mg.h mg_vtable.h nostdio.h op.h 
h3 = op_reg_common.h opcode.h opnames.h overload.h pad.h parser.h patchlevel.h 
h4 = perl.h perlapi.h perlio.h perlsdio.h perlvars.h perly.h
h5 = pp.h pp_proto.h proto.h regcomp.h regexp.h regnodes.h scope.h
h6 = sv.h thread.h utf8.h util.h vmsish.h warnings.h
h7 = xsub.h $(THREADH)
h = $(h0) $(h1) $(h2) $(h3) $(h4) $(h5) $(h6) $(h7)

d337 1
a337 3
ac = archcore_includes.ts $(acopt)

generated_headers = uudmap.h bitcount.h mg_data.h
d363 1
a363 1
LIBPREREQ = $(ARCHDIR)Config.pm $(ARCHDIR)Config_heavy.pl [.lib.VMS]Filespec.pm $(ARCHDIR)vmspipe.com [.lib]buildcustomize.pl
d365 3
a367 3
utils1 = [.utils]perldoc.com [.lib.ExtUtils]Miniperl.pm [.utils]c2ph.com [.utils]h2ph.com 
utils2 = [.utils]h2xs.com [.utils]libnetcfg.com [.lib]perlbug.com [.utils]json_pp.com
utils3 = [.utils]perlivp.com [.lib]splain.com [.utils]pl2pm.com [.utils]xsubpp.com [.utils]pod2html.com [.utils]instmodsh.com
d369 1
a369 1
utils5 = [.utils]corelist.com [.utils]config_data.com [.utils]cpanp.com [.utils]cpan2dist.com [.utils]cpanp-run-perl.com [.utils]ptargrep.com [.utils]zipdetails.com
d390 1
a390 1
extras : dynext libmods utils extra.pods
d396 2
d403 37
a439 3
PERLDELTA_CURRENT = [.pod]perl5163delta.pod

$(PERLDELTA_CURRENT) : [.pod]perldelta.pod
d451 1
a451 1
[.pod]perltoc.pod : $(PERLDELTA_CURRENT) [.pod]perlapi.pod [.pod]perlintern.pod  [.pod]perlmodlib.pod extra.pods $(PERL_EXE)
d453 1
a453 1
	$(PERL) "-f" [.pod]buildtoc "-q"
d458 2
a459 2
[.lib]buildcustomize.pl : write_buildcustomize.pl $(MINIPERL_EXE)
       $(MINIPERL) write_buildcustomize.pl > [.lib]buildcustomize.pl
d479 2
a480 2
perlmain.c : miniperlmain.c $(MINIPERL_EXE) [.lib.ExtUtils]Miniperl.pm
	$(MINIPERL) -"MExtUtils::Miniperl" -e "writemain(@@ARGV)" "$(EXT)" > perlmain.c
d510 2
a511 5
bitcount.h mg_data.h : uudmap.h 
	@@ $(NOOP)

uudmap.h : generate_uudmap$(E)
	MCR SYS$DISK:[]generate_uudmap$(E) $(generated_headers)
d516 1
a516 1
generate_uudmap$(O) : generate_uudmap.c mg_raw.h
d522 14
a535 1
# The song and dance with gen_shrfls.opt accommodates DCL's line length limit.
a536 1
	@@ $(MINIPERL) makedef.pl "PLATFORM=vms" > makedef.lis
d543 1
d564 1
a564 1
DynaLoader$(O) : [.lib]buildcustomize.pl $(ARCHDIR)Config.pm $(MINIPERL_EXE) [.lib.VMS]Filespec.pm 
d570 1
a570 1
nonxsext : $(LIBPREREQ) preplibrary $(MINIPERL_EXE) [.pod]perlfunc.pod
d577 2
a578 1
[.utils]perldoc.com : [.utils]perldoc.PL $(ARCHDIR)Config.pm
d580 1
a608 3
[.utils]ptargrep.com : [.utils]ptargrep.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

d621 1
a621 1
[.utils]json_pp.com : [.utils]json_pp.PL $(ARCHDIR)Config.pm
a661 6
[.utils]zipdetails.com : [.utils]zipdetails.PL $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]pod2html.com : [.utils]pod2html.PL $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

d671 1
a671 1
[.x2p]a2p$(O) : [.x2p]a2p.c [.x2p]a2py.c [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h config.h handy.h vmsish.h $(MINIPERL_EXE)
d691 35
a726 1
	@@ $(NOOP)
d731 688
d1426 15
a1440 1
        @@ @@[.vms]myconfig "$(CC)" "$(CFLAGS)" "$(LINKFLAGS)" "$(LIBS1)" "$(FULLLIBS2)" "$(EXT)" "$(DBG)"
d1443 11
a1453 4
#       embed.pl:       proto.h embed.h embedvar.h perlapi.h perlapi.c
#       opcode.pl:      opcode.h opnames.h pp_proto.h
#       regcomp.pl:     regnodes.h
#       warnings.pl:    warnings.h lib/warnings.pm
d1456 2
a1457 8
# To force them to be regenerated, run
#       perl regen.pl
# with your existing copy of perl
# (make regen_headers is kept for backwards compatibility)

regen :
	$(INSTPERL) regen.pl

d1459 6
a1464 1
	$(INSTPERL) regen.pl -v
d1487 1
a1487 1
minitest : $(MINITEST_EXE) [.lib.VMS]Filespec.pm unidatafiles.ts
d1493 1
a1493 1
install : $(PERL_EXE)
d1496 1
a1496 2
	@@ define/user_mode $(DBG)PERLSHR SYS$DISK:[]$(DBG)perlshr$(E)
	$(PERL) installperl
d1499 1
a1499 1
	@@ Write Sys$Output "Moving files to architecture-specific locations for $(ARCHNAME)"
d1515 156
a1670 2

archcore_includes.ts :
d1672 1
a1672 2
	Copy/NoConfirm/Log *.h $(ARCHCORE)
	@@ Copy _NLA0: $(MMS$TARGET)
d1693 4
d1707 1
a1707 1
globals$(O) : globals.c $(generated_headers) $(h)
a1714 2
keywords$(O) : keywords.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
d1778 1
a1778 1
[.x2p]hash$(O) : [.x2p]hash.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h
d1781 1
a1781 1
[.x2p]str$(O) : [.x2p]str.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h
d1784 1
a1784 1
[.x2p]util$(O) : [.x2p]util.c [.x2p]EXTERN.h [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h
d1787 1
a1787 1
[.x2p]walk$(O) : [.x2p]walk.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h
d1800 1
a1800 1
	@@ @@[.vms]genopt "$(CRTL)/Write" "|" "$(LIBS1)|$(FULLLIBS2)"
a1839 1
	- If F$Search("mg_data.h;-1")   .nes."" Then Purge/NoConfirm/Log mg_data.h
d1852 1
d1858 1
a1858 1
	- If F$Search("[.lib]buildcustomize.pl;-1").nes."" Then Purge/NoConfirm/Log [.lib]buildcustomize.pl
d1864 2
a1871 1
	- If F$Search("mg_data.h")   .nes."" Then Delete/NoConfirm/Log mg_data.h;*
a1876 2
	- If F$Search("[.pod]roffitall").nes."" Then Delete/NoConfirm/Log [.pod]roffitall;*
	- If F$Search("$(PERLDELTA_CURRENT)").nes."" Then Delete/NoConfirm/Log $(PERLDELTA_CURRENT);*
d1878 1
d1884 1
d1902 1
a1902 1
	- $(MINIPERL) -e "use File::Path; rmtree(['[.CXX_REPOSITORY]', 'lib/auto','lib/VMS','lib/$(ARCHNAME)'],1,0);"
d1914 2
a1915 1
	- If F$Search("[.utils]perldoc.com").nes."" Then Delete/NoConfirm/Log [.utils]perldoc.com;*
d1917 1
d1920 1
a1920 1
	- If F$Search("Perl_Setup.Com").nes."" Then Delete/NoConfirm/Log Perl_Setup.Com;*
a1925 2
	- If F$Search("[.lib]buildcustomize.pl").nes."" Then Delete/NoConfirm/Log [.lib]buildcustomize.pl;*
	- If F$Search("[.lib]config.pod").nes."" Then Delete/NoConfirm/Log [.lib]config.pod;*
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d329 1
a329 1
PERLDELTA_CURRENT = [.pod]perl5182delta.pod
d332 1
a332 1
	Copy/NoConfirm/Log $(MMS$SOURCE) $(PERLDELTA_CURRENT)
d420 2
a421 2
	@@ $(MINIPERLQ) -e "print join('|',@@ARGV),'|';" "$(CC)$(CFLAGS)" >gen_shrfls.opt
	@@ $(MINIPERLQ) -e "print join('|',@@ARGV);" "$(O)" "$(DBG)" "$(OLB)" "$(EXT)" "$(CRTL)" >>gen_shrfls.opt
d562 1
a562 1
	$(CC) $(X2PCFLAGS) /Object=$(MMS$TARGET)/Include=([.x2p],[],"./x2p") $(MMS$TARGET_NAME)_vms.c
d618 2
a619 4
VMSFSPEC_T = [.t.lib]vmsfspec.t

$(VMSFSPEC_T) : [.vms.ext]filespec.t
	Copy/NoConfirm/Log $(MMS$SOURCE) $(VMSFSPEC_T)
@


1.1.1.15
log
@Import perl-5.20.1
@
text
@a36 2
~USEVMSDEBUG~
~PREFIX~
d154 8
d192 1
a192 1
MINIPERL = MCR $(MINIPERL_EXE) "-I[.lib]"
d237 1
a237 1
c0 = $(MALLOC_C) av.c caretx.c deb.c doio.c doop.c dump.c globals.c gv.c hv.c mro.c
d244 1
a244 1
obj1 = $(MALLOC_O) av$(O) caretx$(O) deb$(O) doio$(O) doop$(O) dump$(O) mro$(O) globals$(O) gv$(O) hv$(O) 
d258 3
a260 2
h6 = sv.h thread.h utf8.h util.h vmsish.h warnings.h xsub.h
h = $(h0) $(h1) $(h2) $(h3) $(h4) $(h5) $(h6)
d291 1
a291 1
LIBPREREQ = $(ARCHDIR)Config.pm $(ARCHDIR)Config_heavy.pl $(ARCHDIR)vmspipe.com
d293 1
a293 1
utils1 = [.utils]perldoc.com [.utils]c2ph.com [.utils]h2ph.com 
d297 1
a297 1
utils5 = [.utils]corelist.com [.utils]config_data.com [.utils]ptargrep.com [.utils]zipdetails.com
d329 1
a329 1
PERLDELTA_CURRENT = [.pod]perl5201delta.pod
d334 3
a339 3
[.pod]perlapi.pod : [.pod]perlintern.pod
	@@ $(NOOP)

d350 2
a351 3
# See the comment in Makefile.SH explaining this seemingly cranky ordering
$(MINIPERL_EXE) : [.lib]buildcustomize.pl
	@@ $(NOOP)
d358 2
a359 5

[.lib]buildcustomize.pl :  miniperlmain$(O), $(DBG)libperlmini$(OLB) $(CRTL) write_buildcustomize.pl
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MINIPERL_EXE) miniperlmain$(O), $(DBG)libperlmini$(OLB)/Library/Include=globals $(CRTLOPTS)
       $(MINIPERL) "-f" write_buildcustomize.pl

d371 2
a372 2
perlmain.c : miniperlmain.c $(MINIPERL_EXE) nonxsext
	$(MINIPERL) -"MExtUtils::Miniperl" -e "writemain(\'perlmain.c', @@ARGV)" "$(EXT)"
d446 1
a446 1
DynaLoader$(O) : [.lib]buildcustomize.pl $(ARCHDIR)Config.pm $(MINIPERL_EXE)
d455 4
d462 3
d471 9
d587 1
a587 1
	@@ @@perl_setup.com "$(PREFIX)"
d618 5
d626 1
a626 1
test : all
d631 1
a631 1
test_harness : all
d636 1
a636 1
minitest : $(MINITEST_EXE) unidatafiles.ts
d643 1
a643 1
	@@ @@perl_setup.com "$(PREFIX)"
a691 2
caretx$(O) : caretx.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
d838 2
d846 1
d868 2
d907 1
d910 1
d915 2
@


1.1.1.16
log
@Import perl-5.20.2
@
text
@d322 1
a322 1
PERLDELTA_CURRENT = [.pod]perl5202delta.pod
@


1.1.1.17
log
@Import perl-5.24.2
@
text
@d134 1
a134 1
DBGLINKFLAGS = /Trace/Debug/Map=$(MMS$TARGET_NAME).MAP/Full/Cross
d169 1
d173 1
d231 1
a231 1
c0 = $(MALLOC_C) av.c caretx.c deb.c doio.c doop.c dquote.c dump.c globals.c gv.c hv.c mro_core.c
d234 1
a234 1
c3 = run.c scope.c sv.c taint.c time64.c toke.c universal.c utf8.c util.c vms.c keywords.c
d238 1
a238 1
obj1 = $(MALLOC_O) av$(O) caretx$(O) deb$(O) doio$(O) doop$(O) dquote$(O) dump$(O) mro_core$(O) globals$(O) gv$(O) hv$(O)
d241 1
a241 1
obj4 = regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) time64$(O) toke$(O) universal$(O) utf8$(O) util$(O) vms$(O)
d290 1
a290 1
utils5 = [.utils]corelist.com [.utils]ptargrep.com [.utils]zipdetails.com [.utils]encguess.com
d292 1
d298 7
d317 2
d322 1
a322 1
PERLDELTA_CURRENT = [.pod]perl5242delta.pod
d412 2
a413 1
#  perlshr_attr.opt, $(DBG)perlshr_bld.opt - AXP and IA64
d476 3
a490 3
[.utils]encguess.com : [.utils]encguess.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

d517 6
d532 29
d631 2
a632 2
	Copy/Log/NoConfirm *$(E);, $(ARCHDIR)
	Delete/Log/NoConfirm Perl*$(E);*
d661 1
a661 1
# We need(ed?) an action line here for broken older versions of MMS which
a675 2
dquote$(O) : dquote.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
d682 1
a682 1
mro_core$(O) : mro_core.c $(h)
a739 2
time64$(O) : time64.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
d751 12
d827 1
d877 1
@


