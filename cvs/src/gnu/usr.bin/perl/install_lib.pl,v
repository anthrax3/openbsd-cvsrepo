head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2017.02.05.00.33.38;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	7JLVNm1wwPgqSqTa;

1.3
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2016.09.20.18.29.12;	author natano;	state Exp;
branches;
next	1.1;
commitid	hHrIAZKVIofYrkTK;

1.1
date	2009.10.12.18.10.28;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.10.28;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.06.25;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.44;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.36;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.4
log
@Apply local patches - perl-5.24.1
@
text
@#!perl

# Initialisation code and subroutines shared between installperl and installman
# Probably installhtml needs to join the club.

use strict;
use vars qw($Is_VMS $Is_W32 $Is_OS2 $Is_Cygwin $Is_Darwin $Is_NetWare $Is_AmigaOS
	    %opts $packlist);
use subs qw(unlink link chmod chown);
require File::Path;
require File::Copy;

BEGIN {
    require Config;
    if ($Config::Config{userelocatableinc}) {
	# This might be a considered a hack. Need to get information about the
	# configuration from Config.pm *before* Config.pm expands any .../
	# prefixes.
	#
	# So we set $^X to pretend that we're the already installed perl, so
	# Config.pm does its ... expansion off that location.

        my $location = $Config::Config{initialinstalllocation};
	die <<'OS' unless defined $location;
$Config{initialinstalllocation} is not defined - can't install a relocatable
perl without this.
OS
	$^X = "$location/perl";
	# And then remove all trace of ever having loaded Config.pm, so that
	# it will reload with the revised $^X
	undef %Config::;
	delete $INC{"Config.pm"};
	delete $INC{"Config_heavy.pl"};
	delete $INC{"Config_git.pl"};
	# You never saw us. We weren't here.

	require Config;
    }
    Config->import;
}

if ($Config{d_umask}) {
    umask(022); # umasks like 077 aren't that useful for installations
}

$Is_VMS = $^O eq 'VMS';
$Is_W32 = $^O eq 'MSWin32';
$Is_OS2 = $^O eq 'os2';
$Is_Cygwin = $^O eq 'cygwin';
$Is_Darwin = $^O eq 'darwin';
$Is_NetWare = $Config{osname} eq 'NetWare';
$Is_AmigaOS = $^O eq 'amigaos';

sub unlink {
    my(@@names) = @@_;
    my($cnt) = 0;

    return scalar(@@names) if $Is_VMS;

    foreach my $name (@@names) {
	next unless -e $name;
	chmod 0777, $name if ($Is_OS2 || $Is_W32 || $Is_Cygwin || $Is_NetWare || $Is_AmigaOS);
	print "  unlink $name\n" if $opts{verbose};
	( CORE::unlink($name) and ++$cnt
	  or warn "Couldn't unlink $name: $!\n" ) unless $opts{notify};
    }
    return $cnt;
}

sub link {
    my($from,$to) = @@_;
    my($success) = 0;

    my $xfrom = $from;
    $xfrom =~ s/^\Q$opts{destdir}\E// if $opts{destdir};
    my $xto = $to;
    $xto =~ s/^\Q$opts{destdir}\E// if $opts{destdir};
    print $opts{verbose} ? "  ln $xfrom $xto\n" : "  $xto\n"
	unless $opts{silent};
    my $link = $Is_AmigaOS ? \&CORE::symlink : \&CORE::link;
    eval {
      $link->($from, $to)
        ? $success++
          : ($from =~ m#^/afs/# || $to =~ m#^/afs/#)
            ? die "AFS"  # okay inside eval {}
              : die "Couldn't link $from to $to: $!\n"
                unless $opts{notify};
      $packlist->{$xto} = { from => $xfrom, type => 'link' };
     };
    if ($@@) {
	warn "Replacing link() with File::Copy::copy(): $@@";
	print $opts{verbose} ? "  cp $from $xto\n" : "  $xto\n"
	    unless $opts{silent};
	print "  creating new version of $xto\n"
		 if $Is_VMS and -e $to and !$opts{silent};
	unless ($opts{notify} or File::Copy::copy($from, $to) and ++$success) {
	    # Might have been that F::C::c can't overwrite the target
	    warn "Couldn't copy $from to $to: $!\n"
		unless -f $to and (chmod(0666, $to), unlink $to)
			and File::Copy::copy($from, $to) and ++$success;
	}
	if (defined($opts{uid}) || defined($opts{gid})) {
	    chown($opts{uid}, $opts{gid}, $to) if $success;
	}
	$packlist->{$xto} = { type => 'file' };
    }
    $success;
}

sub chmod {
    my($mode,$name) = @@_;

    return if ($^O eq 'dos');
    printf "  chmod %o %s\n", $mode, $name if $opts{verbose};
    CORE::chmod($mode,$name)
	|| warn sprintf("Couldn't chmod %o %s: $!\n", $mode, $name)
      unless $opts{notify};
}

sub chown {
    my($uid,$gid,$name) = @@_;

    return if ($^O eq 'dos');
    printf "  chown %s:%s %s\n", $uid, $gid, $name if $opts{verbose};
    CORE::chown($uid,$gid,$name)
	|| warn sprintf("Couldn't chown %s:%s %s: $!\n", $uid, $gid, $name)
      unless $opts{notify};
}

sub samepath {
    my($p1, $p2) = @@_;

    return (lc($p1) eq lc($p2)) if ($Is_W32 || $Is_NetWare);

    return 1
        if $p1 eq $p2;

    my ($dev1, $ino1) = stat $p1;
    return 0
        unless defined $dev1;
    my ($dev2, $ino2) = stat $p2;

    return $dev1 == $dev2 && $ino1 == $ino2;
}

sub safe_rename {
    my($from,$to) = @@_;
    if (-f $to and not unlink($to)) {
        my($i);
        for ($i = 1; $i < 50; $i++) {
            last if rename($to, "$to.$i");
        }
        warn("Cannot rename to '$to.$i': $!"), return 0
           if $i >= 50; # Give up!
    }
    link($from,$to) || return 0;
    unlink($from);
}

sub mkpath {
    File::Path::make_path(shift, {owner=>$opts{uid}, group=>$opts{gid},
        mode=>0777, verbose=>$opts{verbose}}) unless $opts{notify};
}

sub unixtoamiga
{
	my $unixpath = shift;

	my @@parts = split("/",$unixpath);
	my $isdir = 0;
	$isdir = 1 if substr($unixpath,-1) eq "/";

	my $first = 1;
	my $amigapath = "";

	my $i = 0;

	for($i = 0; $i <= $#parts;$i++)
	{
		next if $parts[$i] eq ".";
		if($parts[$i] eq "..")
		{
			$parts[$i] = "/";
		}
		if($i == 0)
		{
			if($parts[$i] eq "")
			{
				$amigapath .= $parts[$i + 1] . ":";
				$i++;
				next;
			}
		}
		$amigapath .= $parts[$i];
		if($i != $#parts)
		{
			$amigapath .= "/" unless $parts[$i] eq "/" ;
		}
		else
		{
			if($isdir)
			{
				$amigapath .= "/" unless $parts[$i] eq "/" ;
			}
		}
	}

	return $amigapath;
}

sub amigaprotect
{
	my ($file,$bits) = @@_;
	print "PROTECT: File $file\n";
	system("PROTECT $file $bits")
	      unless $opts{notify};
}

1;
@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d9 1
a9 1
use subs qw(unlink link chmod);
d102 3
d120 10
d161 2
a162 1
    File::Path::mkpath(shift , $opts{verbose}, 0777) unless $opts{notify};
@


1.2
log
@Set correct owner for installed files. One step closer to noperm
builds.

initial diff and ok millert
@
text
@d7 1
a7 1
use vars qw($Is_VMS $Is_W32 $Is_OS2 $Is_Cygwin $Is_Darwin $Is_NetWare
d9 1
a9 1
use subs qw(unlink link chmod chown);
d11 1
d52 1
d62 1
a62 1
	chmod 0777, $name if ($Is_OS2 || $Is_W32 || $Is_Cygwin || $Is_NetWare);
d80 1
d82 8
a89 8
	CORE::link($from, $to)
	    ? $success++
	    : ($from =~ m#^/afs/# || $to =~ m#^/afs/#)
	      ? die "AFS"  # okay inside eval {}
	      : die "Couldn't link $from to $to: $!\n"
	  unless $opts{notify};
	$packlist->{$xto} = { from => $xfrom, type => 'link' };
    };
a101 3
	if (defined($opts{uid}) || defined($opts{gid})) {
	    chown($opts{uid}, $opts{gid}, $to) if $success;
	}
a116 10
sub chown {
    my($uid,$gid,$name) = @@_;

    return if ($^O eq 'dos');
    printf "  chown %s:%s %s\n", $uid, $gid, $name if $opts{verbose};
    CORE::chown($uid,$gid,$name)
	|| warn sprintf("Couldn't chown %s:%s %s: $!\n", $uid, $gid, $name)
      unless $opts{notify};
}

d148 55
a202 2
    File::Path::make_path(shift, {owner=>$opts{uid}, group=>$opts{gid},
        mode=>0777, verbose=>$opts{verbose}}) unless $opts{notify};
@


1.1
log
@Initial revision
@
text
@d9 2
a10 1
use subs qw(unlink link chmod);
a11 1
use Config;
d13 2
a14 1
    if ($Config{userelocatableinc}) {
d20 1
a20 1
	# Config.pm doesits ... expansion off that location.
d22 1
a22 1
	my $location = $Config{initialinstalllocation};
a36 1
	Config->import;
d38 1
d99 3
d117 9
d132 20
a151 8
    if ($p1 ne $p2) {
	my($dev1, $ino1, $dev2, $ino2);
	($dev1, $ino1) = stat($p1);
	($dev2, $ino2) = stat($p2);
	($dev1 == $dev2 && $ino1 == $ino2);
    }
    else {
	1;
d153 7
@


1.1.1.1
log
@import perl 5.10.1
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d123 1
a123 1
	($dev1 ~~ $dev2 && $ino1 ~~ $ino2);
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d123 1
a123 1
	($dev1 == $dev2 && $ino1 == $ino2);
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@a9 1
require File::Path;
d11 1
d13 1
a13 2
    require Config;
    if ($Config::Config{userelocatableinc}) {
d19 1
a19 1
	# Config.pm does its ... expansion off that location.
d21 1
a21 1
        my $location = $Config::Config{initialinstalllocation};
d36 1
a37 1
    Config->import;
d113 1
d119 8
a126 20
    return 1
        if $p1 eq $p2;

    my ($dev1, $ino1) = stat $p1;
    return 0
        unless defined $dev1;
    my ($dev2, $ino2) = stat $p2;

    return $dev1 == $dev2 && $ino1 == $ino2;
}

sub safe_rename {
    my($from,$to) = @@_;
    if (-f $to and not unlink($to)) {
        my($i);
        for ($i = 1; $i < 50; $i++) {
            last if rename($to, "$to.$i");
        }
        warn("Cannot rename to '$to.$i': $!"), return 0
           if $i >= 50; # Give up!
a127 6
    link($from,$to) || return 0;
    unlink($from);
}

sub mkpath {
    File::Path::mkpath(shift , $opts{verbose}, 0777) unless $opts{notify};
@


