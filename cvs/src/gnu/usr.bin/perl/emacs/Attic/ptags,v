head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.7.0.10
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.8
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.6
	OPENBSD_5_0:1.1.1.7.0.4
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.2
	OPENBSD_4_9_BASE:1.1.1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.1.1.6.0.8
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.4
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.6.0.6
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.2
	OPENBSD_4_5_BASE:1.1.1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.1.1.5.0.20
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.18
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.16
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.14
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.12
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.10
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.8
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.6
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.4
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2013.03.25.20.40.53;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.39.23;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.39.23;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.08.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.37;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.40;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.27;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.09.24.14.48.47;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@# Make a TAGS file for emacs ``M-x find-tag'' from all <c,h,y,xs> source files.
# (``make realclean'' first to avoid generated files, or ``make'' first
# to get tags from all files.)
#
# (IZ: to be a happier jumper: install 'imenu-go.el' from
#      ftp://ftp.math.ohio-state.edu/pub/users/ilya/emacs.)
#
# (Some tags should probably live in their own subdirs, like those in x2p/,
# but I have never been interested in x2p anyway.)
#
# Hallvard B Furuseth <h.b.furuseth@@usit.uio.no>, Aug -96.
#
# Ilya Zakharevich, Oct 97: minor comments, add CPerl scan;
#   Use Hallvard's scan for XS files - since he processes the "C" part too -
#   but with a lot of improvements: now it is no worse than CPerl's one.

# Avoid builtin on OS/2:
if test ! -z "$OS2_SHELL"; then alias find=gnufind; fi

# Insure proper order (.h after .c, .xs before .c in subdirs):
# Move autogenerated less-informative files to the end:
# Hard to do embed.h and embedvar.h in one sweep:

topfiles="`echo ' ' *.y *.c *.h ' ' | sed 's/ \(embed\(var\|\)\.h\|obj\(pp\|XSUB\)\.h\|globals\.c\) \(\(embedvar\|objpp\).h \|\)/ /g'`"
subdirfiles="`( find ./*/* -name '*.[cy]' -print | sort ; find ./*/* -name '*.[hH]' -print | sort )`"
xsfiles="`find . -name '*.xs' -print | sort`"

# etags -d : process defines too (default now)

# These are example lines for global variables and PP-code:
## IEXT SV *       Iparsehook;
## IEXT char *     Isplitstr IINIT(" ");
## dEXTCONST char rcsid[] = "perl.c\nPatch level: ###\n";
## PP(pp_const)
## PERLVARI(Grsfp, PerlIO *, Nullfp)
## PERLVAR(cvcache,      HV *)

# Putting PL_\1 in the substitution line makes etags dump core
# Thus we do it later (but 20.2.92 does it OK).
set x	-d -l c \
	-r '/[dI]?EXT\(CONST\)?[ \t*]+\([a-zA-Z_0-9]+[ \t*]+\)*\([a-zA-Z_0-9]+\)[ \t]*\($\|;\|\[\|[ \t]I+NIT[ \t]*(\|\/\*\)/\3/' \
	-r '/IEXT[ \t][^\/]*[ \t*]I\([a-zA-Z_][a-zA-Z_0-9]*\)[\[; \t]/\1/'  \
	-r '/PERLVAR[a-zA-Z_0-9]*[ \t]*([ \t]*[GIT]?\([a-zA-Z_][a-zA-Z_0-9]*\)[ \t]*[\[,]/\1/'  \
	-r '/PP[ \t]*([ \t]*\([^ \t()]*\)[ \t]*)/\1/'

shift

rm -f TAGS.tmp TAGS.tm2

# Process lines like this: #define MEM_ALIGNBYTES $alignbytes      /**/
etags -o TAGS.tmp \
	-l none -r '/#\(\$[a-zA-Z_0-9]+\|define\)[ \t]+\([a-zA-Z_0-9]+\)/\2/' \
	config_h.SH
etags -o TAGS.tmp -a "$@@" $topfiles

# Now add these PL_:
perl -w014pe 'if (s/^( .* PERLVAR I?	# 1:   TAG group
		       \s* \( \s* [GIT] #
		       .*		#
		     \x7F		#      End of description
		     ) 
		     ( .* \x1 )		# 2:   Exact group
		   /${1}PL_$2/mgx) {	# Add PL_
		  $chars = chomp;
		  s/^((\n.+,)\d+)/ $2 . (length($_) - length($1) - 1) /e;
		  $_ .= ("\f" x $chars);
	      }' TAGS.tmp > TAGS.tm1 && mv TAGS.tm1 TAGS.tmp



etags -o TAGS.tmp -a -D -l none -r '/#define.*\t\(Perl_.*\)/\1/' embed.h
etags -o TAGS.tmp -a globals.c embedvar.h objXSUB.h objpp.h

perl -w014pe 'if (s/^( [^\n\x7F\x1]*\b	# 1:   TAG group
	               (\w+)		#   2: word
		       [^\w\x7X\x1\n]*	#      Most anything
		       \x7F		#      End of description
		     )
		     (\d+,\d+\n)	# 3:   TAGS Trail
		   /$1$2\x1$3/mgx) {	# Add specific marking
		  $chars = chomp;
		  s/^((\n.+,)\d+)/ $2 . (length($_) - length($1) - 1) /e;
		  $_ .= ("\f" x $chars);
	      }' TAGS.tmp > TAGS.tm1 && mv TAGS.tm1 TAGS.tmp

# Add MODULE lines to TAG files (to be postprocessed later),
#   and BOOT: lines (in DynaLoader processed twice?)

# This skips too many XSUBs:

# etags -o TAGS.tmp -a -d -l c \
# 	-r '/MODULE[ \t=]+\(.*PACKAGE[ \t]*=[ \t]*\)?\([^ \t]+\)\([ \t]*PREFIX[ \t]*=[ \t]*\([^ \t]+\)\)?/\2/' \
# 	-r '/[ \t]*BOOT:/' \
# 	$xsfiles

etags -o TAGS.tmp -a -d -l c \
	-r '/MODULE[ \t=]+\(.*PACKAGE[ \t]*=[ \t]*\)?\([^ \t]+\)\([ \t]*PREFIX[ \t]*=[ \t]*\([^ \t]+\)\)?/\2/' \
	-r '/[ \t]*BOOT:/' \
	-r '/\([_a-zA-Z][a-zA-Z0-9_:]*\)(/' \
	$xsfiles

#	-r '/MODULE[ \t=]+\(.*PACKAGE[ \t]*=[ \t]*\)?\([^ \t]+\)/\2/' \
#	-r '/MODULE.*PREFIX[ \t]*=[ \t]*\([^ \t]+\)/\1/'	\
#	$xsfiles

etags -o TAGS.tmp -a "$@@" $subdirfiles

if test ! -f emacs/cperl-mode.elc ; then
    ( cd emacs; emacs -batch -q -no-site-file -f batch-byte-compile cperl-mode.el )
fi

# This should work with newer Emaxen

cp TAGS.tmp TAGS
if emacs -batch -q -no-site-file -l emacs/cperl-mode.elc -f cperl-add-tags-recurse-noxs ; then
    mv TAGS TAGS.tmp
fi

perl -w014pe '
    $update  = s/^PP\(\177\d+,\d+\n//gm;
    $update += s/^(I?EXT.*[ \t])IINIT[ \t]*\((\177)/$1$2/gm;
    if (/^\n*[^\s,]+\.xs,/s) {
	$mod = $cmod = $bmod = $pref = "";
	s/^(.*\n)\1+/$1/mg;			# Remove duplicate lines
	$_ = join("", map {
	    if (/^MODULE[ \t]*=[ \t]*(\S+)(?:[ \t]+PACKAGE[ \t]*=[ \t]*(\S+))?[ \t\177]/m) {
		$mod = $+;
		($bmod = $mod) =~ tr/:/_/;
		$cmod = "XS_${bmod}_";
		$pref = "";
		if (s/[ \t]+PREFIX[ \t]*=[ \t]*([^\s\177]+)(\177)/$+/) {
		    $pref = $1;
		    $pref =~ s/([^\w\s])/\\$1/g;
		    $pref = "(?:$pref)?";
		}
	    } elsif ($mod ne "") {
		# Ref points for Module::subr, XS_Module_subr, subr
		s/^($pref(\w+)[ \t()]*\177)(\d+,\d+)$/$1${mod}::${2}\01$3\n$1$2\01$3\n$1$cmod$2\01$3/gm;
		# Ref for Module::bootstrap bootstrap boot_Module
		s/^([ \t]*BOOT:\177)(\d+,\d+)$/$1${mod}::bootstrap\01$2\n${1}bootstrap\01$2\n${1}boot_$bmod\01$2/gm;
	    }
	    $_;
	} split(/(\nMODULE[ \t]*=[^\n\177]+\177)/));

	$update = 1;
    }
    if ($update) {
	$chars = chomp;
	s/^((\n.+,)\d+)/ $2 . (length($_) - length($1) - 1) /e;
	$_ .= ("\f" x $chars);
    }' TAGS.tmp > TAGS.tm2

rm -f TAGS
mv TAGS.tm2 TAGS
rm -f TAGS.tmp



@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d24 2
a25 4
topfiles="`echo ' ' *.y *.c *.h ' ' | sed 's/ /  /g' | sed 's/ embedvar\.h\|embed\.h\|obj\(pp\|XSUB\)\.h\|\(globals\|perlapi\)\.c / /g'`"
subdirs="`find ./* -maxdepth 0 -type d`"
subdirfiles="`find $subdirs -name '*.[cy]' -print | sort`"
subdirfiles1="`find $subdirs -name '*.[hH]' -print | sort`"
a53 5
# Process lines like this: Mcc (Loc.U):
etags -o TAGS.tmp -a \
	-l none -r '/^\([a-zA-Z_0-9]+\)[ \t]+(/\$\1/' \
		-r '/^\([a-zA-Z_0-9]+\)[ \t]+(/\1/' Porting/Glossary

d57 1
a57 1
perl -w014pe 'if (s/^( .* PERLVAR A?I?	# 1:   TAG group
d62 1
a62 1
		     ( .* \x01 )	# 2:   Exact group
a69 23
# Now remove these Perl_, add empty- and perl_-flavors:
perl -w014pe 'if (s/^(Perl_		# 1:   First group
		       (\w+) \(		# 2:   Stripped name
		       \x7F		#      End of description
		     )			#      End of description
		     (\d+,\d+\n)	# 3:   TAGS Trail
		   /$1$3$1$2\x01$3$1perl_$2\x01$3/mgx) {	# Repeat, add empty and perl_ flavors
		  $chars = chomp;
		  s/^((\n.+,)\d+)/ $2 . (length($_) - length($1) - 1) /e;
		  $_ .= ("\f" x $chars);
	      }' TAGS.tmp > TAGS.tm1 && mv TAGS.tm1 TAGS.tmp

# Now remove these S_, add empty-flavor:
perl -w014pe 'if (s/^(S_		# 1:   First group
		       (\w+) \(		# 2:   Stripped name
		       \x7F		#      End of description
		     )			#      End of description
		     (\d+,\d+\n)	# 3:   TAGS Trail
		   /$1$3$1$2\x01$3/mgx) {	# Repeat, add empty_ flavor
		  $chars = chomp;
		  s/^((\n.+,)\d+)/ $2 . (length($_) - length($1) - 1) /e;
		  $_ .= ("\f" x $chars);
	      }' TAGS.tmp > TAGS.tm1 && mv TAGS.tm1 TAGS.tmp
d72 1
a72 1
etags -o TAGS.tmp -a globals.c embedvar.h objXSUB.h perlapi.c
d74 1
a74 5
# The above processes created a lot of descriptions with an
# an explicitly specified tag.  Such descriptions have higher
# precedence than descriptions without an explicitely specified tag.
# To restore the justice, make all the descriptions explicit.
perl -w014pe 'if (s/^( [^\n\x7F\x01]*\b	# 1:   TAG group
d76 1
a76 1
		       [^\w\x7F\x01\n]*	#      Most anything
d80 1
a80 1
		   /$1$2\x01$3/mgx) {	# Add specific marking
a106 1
etags -o TAGS.tmp -a "$@@" $subdirfiles1
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d24 1
a24 1
topfiles="`echo ' ' *.y *.c *.h ' ' | sed 's/ /  /g' | sed 's/ embedvar\.h\|embed\.h\|perlapi\.h\|obj\(pp\|XSUB\)\.h\|\(globals\|perlapi\)\.c / /g'`"
d102 1
a102 1
etags -o TAGS.tmp -a globals.c embedvar.h objXSUB.h perlapi.c perlapi.h
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d24 1
a24 1
topfiles="`echo ' ' *.y *.c *.h ' ' | sed 's/ /  /g' | sed 's/ embedvar\.h\|embed\.h\|perlapi\.h\|\(globals\|perlapi\)\.c / /g'`"
d102 1
a102 1
etags -o TAGS.tmp -a globals.c embedvar.h perlapi.c perlapi.h
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@a4 7
#
# usage: sh emacs/ptags <options>
# 
# options:
#
# fullpath - use full paths in TAGS (default: relative to the root)
#
a19 15
case "$1" in
  fullpath)
    cwd=`pwd`
    cperl_add_tags='cperl-add-tags-recurse-noxs-fullpath'
    echo "Building TAGS with full paths"
  ;;
  *)
    cperl_add_tags='cperl-add-tags-recurse-noxs'
    cwd='.'
    echo "Building TAGS with relative paths"
esac

emacs=`(which emacs || which xemacs) 2>/dev/null`
[ -x "$emacs" ] || { echo "can't find emacs or xemacs in PATH"; exit 1; }

d24 2
a25 2
topfiles="`echo ' ' *.y *.c *.h ' ' | sed 's/ /  /g' | sed 's/ embedvar\.h\|embed\.h\|perlapi\.h\|os2ish\.h\|\(globals\|perlapi\| os2\)\.c / /g'| sed "s#\(^\| \)\([^ ]\)#\1$cwd/\2#g"`"
subdirs="`find $cwd/* -maxdepth 0 -type d`"
d28 1
a28 1
xsfiles="`find $cwd/ -name '*.xs' -print | sort`"
d55 1
a55 1
	$cwd/config_h.SH
d59 1
a59 1
		-r '/^\([a-zA-Z_0-9]+\)[ \t]+(/\1/' $cwd/Porting/Glossary
d101 2
a102 2
etags -o TAGS.tmp -a -D -l none -r '/#define.*\t\(Perl_.*\)/\1/' $cwd/embed.h
etags -o TAGS.tmp -a $cwd/globals.c $cwd/embedvar.h $cwd/perlapi.c $cwd/perlapi.h
d144 1
a144 1
    ( cd emacs; $emacs -batch -q -no-site-file -f batch-byte-compile cperl-mode.el )
d150 1
a150 1
if $emacs -batch -q -no-site-file -l emacs/cperl-mode.elc -f $cperl_add_tags ; then
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d39 1
a39 1
emacs=`(which emacs || which xemacs || echo emacs) 2>/dev/null`
@


1.1.1.7
log
@Perl 5.12.2 from CPAN
@
text
@d12 3
@


