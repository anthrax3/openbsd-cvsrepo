head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.6
	OPENBSD_6_2_BASE:1.17
	PERL_5_24_2:1.1.1.16
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.8
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	PERL_5_20_2:1.1.1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	PERL_5_20_1:1.1.1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.17
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	cxJ08BvJA9Pt2PTM;

1.16
date	2015.04.25.19.14.37;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	XRK22kO4se3v2i2I;

1.15
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	QP75iYx42Uo7mMxO;

1.14
date	2014.03.24.15.05.13;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.40.43;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.15.06.39;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.20;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.35.56;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.22.56;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.15.21.30.18;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.09.18.08.54;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.19;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.34.45;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.03.41;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.50.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.48.16;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.36.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.08.32;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.21.55;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.36;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.08.09.17.45.37;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.16.34;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.47.41;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.03;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.35;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.48.16;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.06.37;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.03.24.14.58.47;	author afresh1;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.11.17.20.52.39;	author afresh1;	state Exp;
branches;
next	1.1.1.15;
commitid	B31cAbBIXiCqnL97;

1.1.1.15
date	2015.04.25.19.10.12;	author afresh1;	state Exp;
branches;
next	1.1.1.16;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.16
date	2017.08.14.13.45.29;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@perl 5.004_04
@


1.17
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see pod/perlpod.pod) which is
specially designed to be readable as is.

=head1 NAME

perlwin32 - Perl under Windows

=head1 SYNOPSIS

These are instructions for building Perl under Windows 2000 and later.

=head1 DESCRIPTION

Before you start, you should glance through the README file
found in the top-level directory to which the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.

Also make sure you read L<BUGS AND CAVEATS> below for the
known limitations of this port.

The INSTALL file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
"Configure".

You may also want to look at one other option for building a perl that
will work on Windows: the README.cygwin file, which give a different
set of rules to build a perl for Windows.  This method will probably
enable you to build a more Unix-compatible perl, but you will also
need to download and use various other build-time and run-time support
software described in that file.

This set of instructions is meant to describe a so-called "native"
port of Perl to the Windows platform.  This includes both 32-bit and
64-bit Windows operating systems.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using one of the
following compilers on the Intel x86 architecture:

      Microsoft Visual C++    version 6.0 or later
      Intel C++ Compiler      (experimental)
      Gcc by mingw.org        gcc version 3.4.5 or later
      Gcc by mingw-w64.org    gcc version 4.4.3 or later

Note that the last two of these are actually competing projects both
delivering complete gcc toolchain for MS Windows:

=over 4

=item L<http://mingw.org>

Delivers gcc toolchain targeting 32-bit Windows platform.

=item L<http://mingw-w64.org>

Delivers gcc toolchain targeting both 64-bit Windows and 32-bit Windows
platforms (despite the project name "mingw-w64" they are not only 64-bit
oriented). They deliver the native gcc compilers and cross-compilers
that are also supported by perl's makefile.

=back

The Microsoft Visual C++ compilers are also now being given away free. They are
available as "Visual C++ Toolkit 2003" or "Visual C++ 2005-2013 Express
Edition" (and also as part of the ".NET Framework SDK") and are the same
compilers that ship with "Visual C++ .NET 2003 Professional" or "Visual C++
2005-2013 Professional" respectively.

This port can also be built on IA64/AMD64 using:

      Microsoft Platform SDK	Nov 2001 (64-bit compiler and tools)
      MinGW64 compiler (gcc version 4.4.3 or later)

The Windows SDK can be downloaded from L<http://www.microsoft.com/>.
The MinGW64 compiler is available at L<http://mingw-w64.org>.
The latter is actually a cross-compiler targeting Win64. There's also a trimmed
down compiler (no java, or gfortran) suitable for building perl available at:
L<http://strawberryperl.com/package/kmx/64_gcctoolchain/>

NOTE: If you're using a 32-bit compiler to build perl on a 64-bit Windows
operating system, then you should set the WIN64 environment variable to "undef".
Also, the trimmed down compiler only passes tests when USE_ITHREADS *= define
(as opposed to undef) and when the CFG *= Debug line is commented out.

This port fully supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the CPAN sites.
See L<Usage Hints for Perl on Windows> below for general hints about this.

=head2 Setting Up Perl on Windows

=over 4

=item Make

You need a "make" program to build the sources.  If you are using
Visual C++ or the Windows SDK tools, you can use nmake supplied with Visual C++
or Windows SDK. You may also use, for Visual C++ or Windows SDK, dmake or gmake
instead of nmake.  dmake is open source software, but is not included with
Visual C++ or Windows SDK.  Builds using gcc need dmake or gmake.  nmake is not
supported for gcc builds.  Parallel building is only supported with dmake and
gmake, not nmake.  When using dmake it is recommended to use dmake 4.13 or newer
for parallel building.  Older dmakes, in parallel mode, have very high CPU usage
and pound the disk/filing system with duplicate I/O calls in an aggressive
polling loop.

A port of dmake for Windows is available from:

L<http://search.cpan.org/dist/dmake/>

Fetch and install dmake somewhere on your path.

=item Command Shell

Use the default "cmd" shell that comes with Windows.  Some versions of the
popular 4DOS/NT shell have incompatibilities that may cause you trouble.
If the build fails under that shell, try building again with the cmd
shell.

Make sure the path to the build directory does not contain spaces.  The
build usually works in this circumstance, but some tests will fail.

=item Microsoft Visual C++

The nmake that comes with Visual C++ will suffice for building. Visual C
requires that certain things be set up in the console before Visual C will
sucessfully run. To make a console box be able to run the C compiler, you will
need to beforehand, run the C<vcvars32.bat> file to compile for x86-32 and for
x86-64 C<vcvarsall.bat x64> or C<vcvarsamd64.bat>. On a typical install of a
Microsoft C compiler product, these batch files will already be in your C<PATH>
environment variable so you may just type them without an absolute path into
your console. If you need to find the absolute path to the batch file, it is
usually found somewhere like C:\Program Files\Microsoft Visual Studio\VC98\Bin.
With some newer Micrsoft C products (released after ~2004), the installer will
put a shortcut in the start menu to launch a new console window with the
console already set up for your target architecture (x86-32 or x86-64 or IA64).
With the newer compilers, you may also use the older batch files if you choose
so.

=item Microsoft Visual C++ 2008-2013 Express Edition

These free versions of Visual C++ 2008-2013 Professional contain the same
compilers and linkers that ship with the full versions, and also contain
everything necessary to build Perl, rather than requiring a separate download
of the Windows SDK like previous versions did.

These packages can be downloaded by searching in the Download Center at
L<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Install Visual C++ 2008-2013 Express, then setup your environment using, e.g.

 C:\Program Files\Microsoft Visual Studio 12.0\Common7\Tools\vsvars32.bat

(assuming the default installation location was chosen).

Perl should now build using the win32/Makefile.  You will need to edit that
file to set CCTYPE to one of MSVC90FREE-MSVC120FREE first.

=item Microsoft Visual C++ 2005 Express Edition

This free version of Visual C++ 2005 Professional contains the same compiler
and linker that ship with the full version, but doesn't contain everything
necessary to build Perl.

You will also need to download the "Windows SDK" (the "Core SDK" and "MDAC
SDK" components are required) for more header files and libraries.

These packages can both be downloaded by searching in the Download Center at
L<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Try to obtain the latest version of the Windows SDK.  Sometimes these packages
contain a particular Windows OS version in their name, but actually work on
other OS versions too.  For example, the "Windows Server 2003 R2 Platform SDK"
also runs on Windows XP SP2 and Windows 2000.

Install Visual C++ 2005 first, then the Platform SDK.  Setup your environment
as follows (assuming default installation locations were chosen):

 SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK

 SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual Studio 8\Common7\IDE;C:\Program Files\Microsoft Visual Studio 8\VC\BIN;C:\Program Files\Microsoft Visual Studio 8\Common7\Tools;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\bin;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;C:\Program Files\Microsoft Visual Studio 8\VC\VCPackages;%PlatformSDKDir%\Bin

 SET INCLUDE=C:\Program Files\Microsoft Visual Studio 8\VC\INCLUDE;%PlatformSDKDir%\include

 SET LIB=C:\Program Files\Microsoft Visual Studio 8\VC\LIB;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\lib;%PlatformSDKDir%\lib

 SET LIBPATH=C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727

(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into "C:\Program Files\Microsoft SDK",
while the latest versions install into version-specific locations such as
"C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2".)

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

 CCTYPE = MSVC80FREE

and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.

=item Microsoft Visual C++ Toolkit 2003

This free toolkit contains the same compiler and linker that ship with
Visual C++ .NET 2003 Professional, but doesn't contain everything
necessary to build Perl.

You will also need to download the "Platform SDK" (the "Core SDK" and "MDAC
SDK" components are required) for header files, libraries and rc.exe, and
".NET Framework SDK" for more libraries and nmake.exe.  Note that the latter
(which also includes the free compiler and linker) requires the ".NET
Framework Redistributable" to be installed first.  This can be downloaded and
installed separately, but is included in the "Visual C++ Toolkit 2003" anyway.

These packages can all be downloaded by searching in the Download Center at
L<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Try to obtain the latest version of the Windows SDK.  Sometimes these packages
contain a particular Windows OS version in their name, but actually work on
other OS versions too.  For example, the "Windows Server 2003 R2 Platform SDK"
also runs on Windows XP SP2 and Windows 2000.

Install the Toolkit first, then the Platform SDK, then the .NET Framework SDK.
Setup your environment as follows (assuming default installation locations
were chosen):

 SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK

 SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin;%PlatformSDKDir%\Bin;C:\Program Files\Microsoft.NET\SDK\v1.1\Bin

 SET INCLUDE=C:\Program Files\Microsoft Visual C++ Toolkit 2003\include;%PlatformSDKDir%\include;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include

 SET LIB=C:\Program Files\Microsoft Visual C++ Toolkit 2003\lib;%PlatformSDKDir%\lib;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib

(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into "C:\Program Files\Microsoft SDK",
while the latest versions install into version-specific locations such as
"C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2".)

Several required files will still be missing:

=over 4

=item *

cvtres.exe is required by link.exe when using a .res file.  It is actually
installed by the .NET Framework SDK, but into a location such as the
following:

 C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322

Copy it from there to %PlatformSDKDir%\Bin

=item *

lib.exe is normally used to build libraries, but link.exe with the /lib
option also works, so change win32/config.vc to use it instead:

Change the line reading:

	ar='lib'

to:

	ar='link /lib'

It may also be useful to create a batch file called lib.bat in
C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin containing:

	@@echo off
	link /lib %*

for the benefit of any naughty C extension modules that you might want to build
later which explicitly reference "lib" rather than taking their value from
$Config{ar}.

=item *

setargv.obj is required to build perlglob.exe (and perl.exe if the USE_SETARGV
option is enabled).  The Platform SDK supplies this object file in source form
in %PlatformSDKDir%\src\crt.  Copy setargv.c, cruntime.h and
internal.h from there to some temporary location and build setargv.obj using

	cl.exe /c /I. /D_CRTBLD setargv.c

Then copy setargv.obj to %PlatformSDKDir%\lib

Alternatively, if you don't need perlglob.exe and don't need to enable the
USE_SETARGV option then you can safely just remove all mention of $(GLOBEXE)
from win32/Makefile and setargv.obj won't be required anyway.

=back

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC70FREE

and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.

=item Microsoft Platform SDK 64-bit Compiler

The nmake that comes with the Platform SDK will suffice for building
Perl.  Make sure you are building within one of the "Build Environment"
shells available after you install the Platform SDK from the Start Menu.

=item MinGW release 3 with gcc

Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.4.5
and later).  It can be downloaded here:

L<http://www.mingw.org/>

You also need dmake.  See L</"Make"> above on how to get it.

=item Intel C++ Compiler

Experimental support for using Intel C++ Compiler has been added. Edit
win32/Makefile and pick the correct CCTYPE for the Visual C that Intel C was
installed into. Also uncomment __ICC to enable Intel C on Visual C support.
To set up the build enviroment, from the Start Menu run
IA-32 Visual Studio 20__ mode or Intel 64 Visual Studio 20__ mode as
appropriate. Then run nmake as usually in that prompt box.

Only Intel C++ Compiler v12.1 has been tested. Other versions probably will
work. Using Intel C++ Compiler instead of Visual C has the benefit of C99
compatibility which is needed by some CPAN XS modules, while maintaining
compatibility with Visual C object code and Visual C debugging infrastructure
unlike GCC.

=back

=head2 Building

=over 4

=item *

Make sure you are in the "win32" subdirectory under the perl toplevel.
This directory contains a "Makefile" that will work with
versions of nmake that come with Visual C++ or the Windows SDK, and
a dmake "makefile.mk" that will work for all supported compilers.  The
defaults in the dmake makefile are setup to build using MinGW/gcc.

=item *

Edit the makefile.mk (or Makefile, if you're using nmake) and change
the values of INST_DRV and INST_TOP.   You can also enable various
build flags.  These are explained in the makefiles.

Note that it is generally not a good idea to try to build a perl with
INST_DRV and INST_TOP set to a path that already exists from a previous
build.  In particular, this may cause problems with the
lib/ExtUtils/t/Embed.t test, which attempts to build a test program and
may end up building against the installed perl's lib/CORE directory rather
than the one being tested.

You will have to make sure that CCTYPE is set correctly and that
CCHOME points to wherever you installed your compiler.

If building with the cross-compiler provided by
mingw-w64.org you'll need to uncomment the line that sets
GCCCROSS in the makefile.mk. Do this only if it's the cross-compiler - ie
only if the bin folder doesn't contain a gcc.exe. (The cross-compiler
does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these
executables are prefixed with 'x86_64-w64-mingw32-'.)

The default value for CCHOME in the makefiles for Visual C++
may not be correct for some versions.  Make sure the default exists
and is valid.

You may also need to comment out the C<DELAYLOAD = ...> line in the
Makefile if you're using VC++ 6.0 without the latest service pack and
the linker reports an internal error.

If you want build some core extensions statically into perl's dll, specify
them in the STATIC_EXT macro.

NOTE: The USE_64_BIT_INT build option is not supported with the 32-bit
Visual C++ 6.0 compiler.

Be sure to read the instructions near the top of the makefiles carefully.

=item *

Type "dmake" (or "nmake" if you are using that make).

This should build everything.  Specifically, it will create perl.exe,
perl524.dll at the perl toplevel, and various other extension dll's
under the lib\auto directory.  If the build fails for any reason, make
sure you have done the previous steps correctly.

To try dmake's parallel mode, type "dmake -P2", where 2, is the maximum number
of parallel jobs you want to run. A number of things in the build process will
run in parallel, but there are serialization points where you will see just 1
CPU maxed out. This is normal.

If you are advanced enough with building C code, here is a suggestion to speed
up building perl, and the later C<make test>. Try to keep your PATH enviromental
variable with the least number of folders possible (remember to keep your C
compiler's folders there). C<C:\WINDOWS\system32> or C<C:\WINNT\system32>
depending on your OS version should be first folder in PATH, since "cmd.exe"
is the most commonly launched program during the build and later testing.

=back

=head2 Testing Perl on Windows

Type "dmake test" (or "nmake test").  This will run most of the tests from
the testsuite (many tests will be skipped).

There should be no test failures.

If you build with Visual C++ 2013 then three tests currently may fail with
Daylight Saving Time related problems: F<t/io/fs.t>,
F<cpan/HTTP-Tiny/t/110_mirror.t> and F<lib/File/Copy.t>. The failures are
caused by bugs in the CRT in VC++ 2013 which will be fixed in future releases
of VC++, as explained by Microsoft here:
L<https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013>. In the meantime,
if you need fixed C<stat> and C<utime> functions then have a look at the
CPAN distribution Win32::UTCFileTime.

If you build with certain versions (e.g. 4.8.1) of gcc from www.mingw.org then
F<ext/POSIX/t/time.t> may fail test 17 due to a known bug in those gcc builds:
see L<http://sourceforge.net/p/mingw/bugs/2152/>.

Some test failures may occur if you use a command shell other than the
native "cmd.exe", or if you are building from a path that contains
spaces.  So don't do that.

If you are running the tests from a emacs shell window, you may see
failures in op/stat.t.  Run "dmake test-notty" in that case.

Furthermore, you should make sure that during C<make test> you do not
have any GNU tool packages in your path: some toolkits like Unixutils
include some tools (C<type> for instance) which override the Windows
ones and makes tests fail. Remove them from your path while testing to
avoid these errors.

Please report any other failures as described under L<BUGS AND CAVEATS>.

=head2 Installation of Perl on Windows

Type "dmake install" (or "nmake install").  This will put the newly
built perl and the libraries under whatever C<INST_TOP> points to in the
Makefile.  It will also install the pod documentation under
C<$INST_TOP\$INST_VER\lib\pod> and HTML versions of the same under
C<$INST_TOP\$INST_VER\lib\pod\html>.

To use the Perl you just installed you will need to add a new entry to
your PATH environment variable: C<$INST_TOP\bin>, e.g.

    set PATH=c:\perl\bin;%PATH%

If you opted to uncomment C<INST_VER> and C<INST_ARCH> in the makefile
then the installation structure is a little more complicated and you will
need to add two new PATH components instead: C<$INST_TOP\$INST_VER\bin> and
C<$INST_TOP\$INST_VER\bin\$ARCHNAME>, e.g.

    set PATH=c:\perl\5.6.0\bin;c:\perl\5.6.0\bin\MSWin32-x86;%PATH%

=head2 Usage Hints for Perl on Windows

=over 4

=item Environment Variables

The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your PATH variable).

If you put extensions in unusual places, you can set PERL5LIB
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in L<perlrun>.

You can also control the shell that perl uses to run system() and
backtick commands via PERL5SHELL.  See L<perlrun>.

Perl does not depend on the registry, but it can look up certain default
values if you choose to put them there unless disabled at build time with
USE_NO_REGISTRY.  On Perl process start Perl checks if
C<HKEY_CURRENT_USER\Software\Perl> and C<HKEY_LOCAL_MACHINE\Software\Perl>
exist.  If the keys exists, they will be checked for remainder of the Perl
process's run life for certain entries.  Entries in
C<HKEY_CURRENT_USER\Software\Perl> override entries in
C<HKEY_LOCAL_MACHINE\Software\Perl>.  One or more of the following entries
(of type REG_SZ or REG_EXPAND_SZ) may be set in the keys:

 lib-$]        version-specific standard library path to add to @@INC
 lib           standard library path to add to @@INC
 sitelib-$]    version-specific site library path to add to @@INC
 sitelib       site library path to add to @@INC
 vendorlib-$]  version-specific vendor library path to add to @@INC
 vendorlib     vendor library path to add to @@INC
 PERL*         fallback for all %ENV lookups that begin with "PERL"

Note the C<$]> in the above is not literal.  Substitute whatever version
of perl you want to honor that entry, e.g. C<5.6.0>.  Paths must be
separated with semicolons, as usual on Windows.

=item File Globbing

By default, perl handles file globbing using the File::Glob extension,
which provides portable globbing.

If you want perl to use globbing that emulates the quirks of DOS
filename conventions, you might want to consider using File::DosGlob
to override the internal glob() implementation.  See L<File::DosGlob> for
details.

=item Using perl from the command line

If you are accustomed to using perl from various command-line
shells found in UNIX environments, you will be less than pleased
with what Windows offers by way of a command shell.

The crucial thing to understand about the Windows environment is that
the command line you type in is processed twice before Perl sees it.
First, your command shell (usually CMD.EXE) preprocesses the command
line, to handle redirection, environment variable expansion, and
location of the executable to run. Then, the perl executable splits
the remaining command line into individual arguments, using the
C runtime library upon which Perl was built.

It is particularly important to note that neither the shell nor the C
runtime do any wildcard expansions of command-line arguments (so
wildcards need not be quoted).  Also, the quoting behaviours of the
shell and the C runtime are rudimentary at best (and may, if you are
using a non-standard shell, be inconsistent).  The only (useful) quote
character is the double quote (").  It can be used to protect spaces
and other special characters in arguments.

The Windows documentation describes the shell parsing rules here:
L<http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true>
and the C runtime parsing rules here:
L<http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx>.

Here are some further observations based on experiments: The C runtime
breaks arguments at spaces and passes them to programs in argc/argv.
Double quotes can be used to prevent arguments with spaces in them from
being split up.  You can put a double quote in an argument by escaping
it with a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the argument will
be stripped by the C runtime.

The file redirection characters "E<lt>", "E<gt>", and "|" can be quoted by
double quotes (although there are suggestions that this may not always
be true).  Single quotes are not treated as quotes by the shell or
the C runtime, they don't get stripped by the shell (just to make
this type of quoting completely useless).  The caret "^" has also
been observed to behave as a quoting character, but this appears
to be a shell feature, and the caret is not stripped from the command
line, so Perl still sees it (and the C runtime phase does not treat
the caret as a quote character).

Here are some examples of usage of the "cmd" shell:

This prints two doublequotes:

    perl -e "print '\"\"' "

This does the same:

    perl -e "print \"\\\"\\\"\" "

This prints "bar" and writes "foo" to the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" > blurch

This prints "foo" ("bar" disappears into nowhereland):

    perl -e "print 'foo'; print STDERR 'bar'" 2> nul

This prints "bar" and writes "foo" into the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 1> blurch

This pipes "foo" to the "less" pager and prints "bar" on the console:

    perl -e "print 'foo'; print STDERR 'bar'" | less

This pipes "foo\nbar\n" to the less pager:

    perl -le "print 'foo'; print STDERR 'bar'" 2>&1 | less

This pipes "foo" to the pager and writes "bar" in the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch | less


Discovering the usefulness of the "command.com" shell on Windows 9x
is left as an exercise to the reader :)

One particularly pernicious problem with the 4NT command shell for
Windows is that it (nearly) always treats a % character as indicating
that environment variable expansion is needed.  Under this shell, it is
therefore important to always double any % characters which you want
Perl to see (for example, for hash variables), even when they are
quoted.

=item Building Extensions

The Comprehensive Perl Archive Network (CPAN) offers a wealth
of extensions, some of which require a C compiler to build.
Look in L<http://www.cpan.org/> for more information on CPAN.

Note that not all of the extensions available from CPAN may work
in the Windows environment; you should check the information at
L<http://www.cpantesters.org/> before investing too much effort into
porting modules that don't readily build.

Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:

    perl Makefile.PL
    $MAKE
    $MAKE test
    $MAKE install

where $MAKE is whatever 'make' program you have configured perl to
use.  Use "perl -V:make" to find out what this is.  Some extensions
may not provide a testsuite (so "$MAKE test" may not do anything or
fail), but most serious ones do.

It is important that you use a supported 'make' program, and
ensure Config.pm knows about it.  If you don't have nmake, you can
either get dmake from the location mentioned earlier or get an
old version of nmake reportedly available from:

L<http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe>

Another option is to use the make written in Perl, available from
CPAN.

L<http://www.cpan.org/modules/by-module/Make/>

You may also use dmake.  See L</"Make"> above on how to get it.

Note that MakeMaker actually emits makefiles with different syntax
depending on what 'make' it thinks you are using.  Therefore, it is
important that one of the following values appears in Config.pm:

    make='nmake'	# MakeMaker emits nmake syntax
    make='dmake'	# MakeMaker emits dmake syntax
    any other value	# MakeMaker emits generic make syntax
    			    (e.g GNU make, or Perl make)

If the value doesn't match the 'make' program you want to use,
edit Config.pm to fix it.

If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation before running C<perl Makefile.PL>
or any invocation of make.

If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.

=item Command-line Wildcard Expansion

The default command shells on DOS descendant operating systems (such
as they are) usually do not expand wildcard arguments supplied to
programs.  They consider it the application's job to handle that.
This is commonly achieved by linking the application (in our case,
perl) with startup code that the C runtime libraries usually provide.
However, doing that results in incompatible perl versions (since the
behavior of the argv expansion code differs depending on the
compiler, and it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary with an
alternate shell that *does* expand wildcards.

Instead, the following solution works rather well. The nice things
about it are 1) you can start using it right away; 2) it is more
powerful, because it will do the right thing with a pattern like
*/*/*.c; 3) you can decide whether you do/don't want to use it; and
4) you can extend the method to add any customizations (or even
entirely different kinds of wildcard expansion).

 C:\> copy con c:\perl\lib\Wild.pm
 # Wild.pm - emulate shell @@ARGV expansion on shells that don't
 use File::DosGlob;
 @@ARGV = map {
	      my @@g = File::DosGlob::glob($_) if /[*?]/;
	      @@g ? @@g : $_;
	    } @@ARGV;
 1;
 ^Z
 C:\> set PERL5OPT=-MWild
 C:\> perl -le "for (@@ARGV) { print }" */*/perl*.c
 p4view/perl/perl.c
 p4view/perl/perlio.c
 p4view/perl/perly.c
 perl5.005/win32/perlglob.c
 perl5.005/win32/perllib.c
 perl5.005/win32/perlglob.c
 perl5.005/win32/perllib.c
 perl5.005/win32/perlglob.c
 perl5.005/win32/perllib.c

Note there are two distinct steps there: 1) You'll have to create
Wild.pm and put it in your perl lib directory. 2) You'll need to
set the PERL5OPT environment variable.  If you want argv expansion
to be the default, just set PERL5OPT in your default startup
environment.

If you are using the Visual C compiler, you can get the C runtime's
command line wildcard expansion built into perl binary.  The resulting
binary will always expand unquoted command lines, which may not be
what you want if you use a shell that does that for you.  The expansion
done is also somewhat less powerful than the approach suggested above.

=item Notes on 64-bit Windows

Windows .NET Server supports the LLP64 data model on the Intel Itanium
architecture.

The LLP64 data model is different from the LP64 data model that is the
norm on 64-bit Unix platforms.  In the former, C<int> and C<long> are
both 32-bit data types, while pointers are 64 bits wide.  In addition,
there is a separate 64-bit wide integral type, C<__int64>.  In contrast,
the LP64 data model that is pervasive on Unix platforms provides C<int>
as the 32-bit type, while both the C<long> type and pointers are of
64-bit precision.  Note that both models provide for 64-bits of
addressability.

64-bit Windows running on Itanium is capable of running 32-bit x86
binaries transparently.  This means that you could use a 32-bit build
of Perl on a 64-bit system.  Given this, why would one want to build
a 64-bit build of Perl?  Here are some reasons why you would bother:

=over

=item *

A 64-bit native application will run much more efficiently on
Itanium hardware.

=item *

There is no 2GB limit on process size.

=item *

Perl automatically provides large file support when built under
64-bit Windows.

=item *

Embedding Perl inside a 64-bit application.

=back

=back

=head2 Running Perl Scripts

Perl scripts on UNIX use the "#!" (a.k.a "shebang") line to
indicate to the OS that it should execute the file using perl.
Windows has no comparable means to indicate arbitrary files are
executables.

Instead, all available methods to execute plain text files on
Windows rely on the file "extension".  There are three methods
to use this to execute perl scripts:

=over 8

=item 1

There is a facility called "file extension associations".  This can be
manipulated via the two commands "assoc" and "ftype" that come
standard with Windows.  Type "ftype /?" for a complete example of how
to set this up for perl scripts (Say what?  You thought Windows
wasn't perl-ready? :).

=item 2

Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the OS, may be used.  The install process
makes available the "pl2bat.bat" script which can be used to wrap
perl scripts into batch files.  For example:

	pl2bat foo.pl

will create the file "FOO.BAT".  Note "pl2bat" strips any
.pl suffix and adds a .bat suffix to the generated file.

If you use the 4DOS/NT or similar command shell, note that
"pl2bat" uses the "%*" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a "ParameterChar = *" statement in their
4NT.INI file or will need to execute "setdos /p*" in the 4DOS/NT
startup file to enable this to work.

=item 3

Using "pl2bat" has a few problems:  the file name gets changed,
so scripts that rely on C<$0> to find what they must do may not
run properly; running "pl2bat" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.

A script called "runperl.bat" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it "foo.bat", it will run the file "foo" when it is
executed.  Since you can run batch files on Windows platforms simply
by typing the name (without the extension), this effectively
runs the file "foo", when you type either "foo" or "foo.bat".
With this method, "foo.bat" can even be in a different location
than the file "foo", as long as "foo" is available somewhere on
the PATH.  If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying "runperl.bat".

Here's a diversion:  copy "runperl.bat" to "runperl", and type
"runperl".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,"lrepnur" eteled :tniH

=back

=head2 Miscellaneous Things

A full set of HTML documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.

C<perldoc> is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like C<less> (recent versions of which have Windows support).  You may
have to set the PAGER environment variable to use a specific pager.
"perldoc -f foo" will print information about the perl operator
"foo".

One common mistake when using this port with a GUI library like C<Tk>
is assuming that Perl's normal behavior of opening a command-line
window will go away.  This isn't the case.  If you want to start a copy
of C<perl> without opening a command-line window, use the C<wperl>
executable built during the installation process.  Usage is exactly
the same as normal C<perl> on Windows, except that options like C<-h>
don't work (since they need a command-line window to print to).

If you find bugs in perl, you can run C<perlbug> to create a
bug report (you may have to send it manually if C<perlbug> cannot
find a mailer on your system).

=head1 BUGS AND CAVEATS

Norton AntiVirus interferes with the build process, particularly if
set to "AutoProtect, All Files, when Opened". Unlike large applications
the perl build process opens and modifies a lot of files. Having the
the AntiVirus scan each and every one slows build the process significantly.
Worse, with PERLIO=stdio the build process fails with peculiar messages
as the virus checker interacts badly with miniperl.exe writing configure
files (it seems to either catch file part written and treat it as suspicious,
or virus checker may have it "locked" in a way which inhibits miniperl
updating it). The build does complete with

   set PERLIO=perlio

but that may be just luck. Other AntiVirus software may have similar issues.

A git GUI shell extension for Windows such as TortoiseGit will cause the build
and later C<make test> to run much slower since every file is checked for its
git status as soon as it is created and/or modified. TortoiseGit doesn't cause
any test failures or build problems unlike the antivirus software described
above, but it does cause similar slowness. It is suggested to use Task Manager
to look for background processes which use high CPU amounts during the building
process.

Some of the built-in functions do not act exactly as documented in
L<perlfunc>, and a few are not implemented at all.  To avoid
surprises, particularly if you have had prior exposure to Perl
in other operating environments or if you intend to write code
that will be portable to other environments, see L<perlport>
for a reasonably definitive list of these differences.

Not all extensions available from CPAN may build or work properly
in the Windows environment.  See L</"Building Extensions">.

Most C<socket()> related calls are supported, but they may not
behave as on Unix platforms.  See L<perlport> for the full list.

Signal handling may not behave as on Unix platforms (where it
doesn't exactly "behave", either :).  For instance, calling C<die()>
or C<exit()> from signal handlers will cause an exception, since most
implementations of C<signal()> on Windows are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.

Please send detailed descriptions of any problems and solutions that
you may find to E<lt>F<perlbug@@perl.org>E<gt>, along with the output
produced by C<perl -V>.

=head1 ACKNOWLEDGEMENTS

The use of a camel with the topic of Perl is a trademark
of O'Reilly and Associates, Inc. Used with permission.

=head1 AUTHORS

=over 4

=item Gary Ng E<lt>71564.1743@@CompuServe.COME<gt>

=item Gurusamy Sarathy E<lt>gsar@@activestate.comE<gt>

=item Nick Ing-Simmons E<lt>nick@@ing-simmons.netE<gt>

=item Jan Dubois E<lt>jand@@activestate.comE<gt>

=item Steve Hay E<lt>steve.m.hay@@googlemail.comE<gt>

=back

This document is maintained by Jan Dubois.

=head1 SEE ALSO

L<perl>

=head1 HISTORY

This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.  Various people have made numerous and sundry hacks
since then.

GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).

Support for PERL_OBJECT was added in 5.005 (ActiveState Tool Corp).

Support for fork() emulation was added in 5.6 (ActiveState Tool Corp).

Win9x support was added in 5.6 (Benjamin Stuhl).

Support for 64-bit Windows added in 5.8 (ActiveState Corp).

Last updated: 07 October 2014

=cut
@


1.16
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d45 1
a45 1
      Gcc by mingw-w64.sf.net gcc version 4.4.3 or later
d56 1
a56 1
=item L<http://mingw-w64.sf.net>
d77 1
a77 1
The MinGW64 compiler is available at L<http://sourceforge.net/projects/mingw-w64>.
d99 9
a107 5
Visual C++ or the Windows SDK tools, nmake will work.  Builds using
the gcc need dmake.

dmake is a freely available make that has very nice macro features
and parallelability.
a141 7
You can also use dmake to build using Visual C++; provided, however,
you set OSRELEASE to "microsft" (or whatever the directory name
under which the Visual C dmake configuration lives) in your environment
and edit win32/config.vc to change "make=nmake" into "make=dmake".  The
latter step is only essential if you want to use dmake as your default
make for building extensions using MakeMaker.

d156 1
a156 1
	C:\Program Files\Microsoft Visual Studio 12.0\Common7\Tools\vsvars32.bat
d185 1
a185 1
	SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK
d187 1
a187 1
	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual Studio 8\Common7\IDE;C:\Program Files\Microsoft Visual Studio 8\VC\BIN;C:\Program Files\Microsoft Visual Studio 8\Common7\Tools;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\bin;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;C:\Program Files\Microsoft Visual Studio 8\VC\VCPackages;%PlatformSDKDir%\Bin
d189 1
a189 1
	SET INCLUDE=C:\Program Files\Microsoft Visual Studio 8\VC\INCLUDE;%PlatformSDKDir%\include
d191 1
a191 1
	SET LIB=C:\Program Files\Microsoft Visual Studio 8\VC\LIB;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\lib;%PlatformSDKDir%\lib
d193 1
a193 1
	SET LIBPATH=C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727
d203 1
a203 1
	CCTYPE = MSVC80FREE
d234 1
a234 1
	SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK
d236 1
a236 1
	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin;%PlatformSDKDir%\Bin;C:\Program Files\Microsoft.NET\SDK\v1.1\Bin
d238 1
a238 1
	SET INCLUDE=C:\Program Files\Microsoft Visual C++ Toolkit 2003\include;%PlatformSDKDir%\include;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include
d240 1
a240 1
	SET LIB=C:\Program Files\Microsoft Visual C++ Toolkit 2003\lib;%PlatformSDKDir%\lib;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib
d257 1
a257 1
	C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322
d333 4
a336 1
work.
d369 1
a369 1
mingw-w64.sourceforge.net you'll need to uncomment the line that sets
d396 1
a396 1
perl520.dll at the perl toplevel, and various other extension dll's
d400 5
d423 1
a423 1
F<cpan/HTTP-Tiny/t/110_mirror.t> and F<lib/File.Copy.t>. The failures are
d488 16
a503 12
values if you choose to put them there.  Perl attempts to read entries from
C<HKEY_CURRENT_USER\Software\Perl> and C<HKEY_LOCAL_MACHINE\Software\Perl>.
Entries in the former override entries in the latter.  One or more of the
following entries (of type REG_SZ or REG_EXPAND_SZ) may be set:

    lib-$]		version-specific standard library path to add to @@INC
    lib			standard library path to add to @@INC
    sitelib-$]		version-specific site library path to add to @@INC
    sitelib		site library path to add to @@INC
    vendorlib-$]	version-specific vendor library path to add to @@INC
    vendorlib		vendor library path to add to @@INC
    PERL*		fallback for all %ENV lookups that begin with "PERL"
d690 20
a709 20
	C:\> copy con c:\perl\lib\Wild.pm
	# Wild.pm - emulate shell @@ARGV expansion on shells that don't
	use File::DosGlob;
	@@ARGV = map {
		      my @@g = File::DosGlob::glob($_) if /[*?]/;
		      @@g ? @@g : $_;
		    } @@ARGV;
	1;
	^Z
	C:\> set PERL5OPT=-MWild
	C:\> perl -le "for (@@ARGV) { print }" */*/perl*.c
	p4view/perl/perl.c
	p4view/perl/perlio.c
	p4view/perl/perly.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
@


1.15
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d123 14
a136 4
The nmake that comes with Visual C++ will suffice for building.
You will need to run the VCVARS32.BAT file, usually found somewhere
like C:\Program Files\Microsoft Visual Studio\VC98\Bin.
This will set your build environment.
d400 7
d608 1
a608 1
L<http://testers.cpan.org/> before investing too much effort into
d652 2
a653 1
the compiler for command-line compilation.
d867 8
d944 1
a944 1
Last updated: 22 October 2013
@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d43 2
a44 1
      Gcc by mingw.org        gcc version 3.2 or later
d66 1
a66 1
available as "Visual C++ Toolkit 2003" or "Visual C++ 2005/2008/2010/2012 Express
d69 1
a69 1
2005/2008/2010/2012 Professional" respectively.
d135 1
a135 1
=item Microsoft Visual C++ 2008/2010/2012 Express Edition
d137 1
a137 1
These free versions of Visual C++ 2008/2010/2012 Professional contain the same
d147 1
a147 1
Install Visual C++ 2008/2010/2012 Express, then setup your environment using, e.g.
d149 1
a149 1
	C:\Program Files\Microsoft Visual Studio 11.0\Common7\Tools\vsvars32.bat
d154 1
a154 1
file to set CCTYPE to MSVC90FREE or MSVC100FREE first.
d309 1
a309 1
Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.2.x
d316 12
d376 3
d386 1
a386 1
perl518.dll at the perl toplevel, and various other extension dll's
d399 13
a418 4
If you run the tests on a FAT partition, you may see some failures for
C<link()> related tests (I<op/write.t>, I<op/stat.t> ...). Testing on
NTFS avoids these errors.

d918 1
a918 1
Last updated: 02 January 2012
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d65 1
a65 1
available as "Visual C++ Toolkit 2003" or "Visual C++ 2005/2008/2010 Express
d68 1
a68 1
2005/2008/2010 Professional" respectively.
d134 1
a134 1
=item Microsoft Visual C++ 2008/2010 Express Edition
d136 1
a136 1
These free versions of Visual C++ 2008/2010 Professional contain the same
d146 1
a146 1
Install Visual C++ 2008/2010 Express, then setup your environment using, e.g.
d148 1
a148 1
	C:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools\vsvars32.bat
d370 1
a370 1
perl516.dll at the perl toplevel, and various other extension dll's
d893 1
a893 1
Last updated: 10 September 2011
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@d11 1
a11 2
These are instructions for building Perl under Windows 9x/NT/2000/XP
on the Intel x86 and Itanium architectures.
d28 6
a33 7
You may also want to look at two other options for building
a perl that will work on Windows NT:  the README.cygwin and
README.os2 files, each of which give a different set of rules to
build a Perl that will work on Win32 platforms.  Those two methods
will probably enable you to build a more Unix-compatible perl, but
you will also need to download and use various other build-time and
run-time support software described in those files.
d36 1
a36 1
port of Perl to Win32 platforms.  This includes both 32-bit and
d42 2
a43 4
      Borland C++           version 5.02 or later
      Microsoft Visual C++  version 2.0 or later
      MinGW with gcc        gcc version 2.95.2 or later
      Gcc by mingw.org        gcc version 2.95.2 or later
d48 21
a68 16
- http://mingw.org - delivers gcc toolchain targeting 32-bit Windows
  platform.
  Use version 3.2.x or later for the best results with this compiler.
- http://mingw-w64.sf.net - delivers gcc toolchain targeting both 64-bit
  Windows and 32-bit Windows platforms (despite the project name "mingw-w64"
  they are not only 64-bit oriented). They deliver the native gcc compilers
  + cross-compilers that are also supported by perl's makefile.

The Borland C++ and Microsoft Visual C++ compilers are also now being given
away free.  The Borland compiler is available as "Borland C++ Compiler Free
Command Line Tools" and is the same compiler that ships with the full
"Borland C++ Builder" product.  The Microsoft compiler is available as
"Visual C++ Toolkit 2003" or "Visual C++ 2005/2008 Express Edition" (and also
as part of the ".NET Framework SDK") and is the same compiler that ships with
"Visual C++ .NET 2003 Professional" or "Visual C++ 2005/2008 Professional"
respectively.
d75 2
a76 2
The MS Platform SDK can be downloaded from http://www.microsoft.com/.
The MinGW64 compiler is available at http://sourceforge.net/projects/mingw-w64.
d79 1
a79 1
http://strawberryperl.com/package/kmx/64_gcctoolchain/mingw64-w64-20100123-kmx-v2.zip
d89 1
a89 1
See L<Usage Hints for Perl on Win32> below for general hints about this.
d91 1
a91 1
=head2 Setting Up Perl on Win32
d98 2
a99 2
Visual C++ or the Platform SDK tools under Windows NT/2000/XP, nmake
will work.  All other builds need dmake.
d106 1
a106 1
    http://search.cpan.org/dist/dmake/
a109 10
There exists a minor coexistence problem with dmake and Borland C++
compilers.  Namely, if a distribution has C files named with mixed
case letters, they will be compiled into appropriate .obj-files named
with all lowercase letters, and every time dmake is invoked
to bring files up to date, it will try to recompile such files again.
For example, Tk distribution has a lot of such files, resulting in
needless recompiles every time dmake is invoked.  To avoid this, you
may use the script "sync_ext.pl" after a successful build.  It is
available in the win32 subdirectory of the Perl source distribution.

d112 1
a112 1
Use the default "cmd" shell that comes with NT.  Some versions of the
a116 6
The nmake Makefile also has known incompatibilities with the
"command.com" shell that comes with Windows 9x.  You will need to
use dmake and makefile.mk to build under Windows 9x.

The surest way to build it is on Windows NT/2000/XP, using the cmd shell.

a119 8
=item Borland C++

If you are using the Borland compiler, you will need dmake.
(The make that Borland supplies is seriously crippled and will not
work for MakeMaker builds.)

See L</"Make"> above.

d124 1
a124 1
like C:\MSDEV4.2\BIN or C:\Program Files\Microsoft Visual Studio\VC98\Bin.
d134 6
a139 1
=item Microsoft Visual C++ 2008 Express Edition
d141 2
a142 8
This free version of Visual C++ 2008 Professional contains the same compiler
and linker that ship with the full version, and also contains everything
necessary to build Perl, rather than requiring a separate download of the
Platform SDK like previous versions did.

This package can be downloaded by searching for "Visual Studio 2008 Express
Edition" in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
d146 1
a146 1
Install Visual C++ 2008, then setup your environment using
d148 1
a148 1
	C:\Program Files\Microsoft Visual Studio 9.0\Common7\Tools\vsvars32.bat
d153 1
a153 5
file to set

	CCTYPE = MSVC90FREE

first.
d161 1
a161 1
You will also need to download the "Platform SDK" (the "Core SDK" and "MDAC
d165 1
a165 1
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
d169 1
a169 1
Try to obtain the latest version of the Platform SDK.  Sometimes these packages
a173 4
According to the download pages these packages are only supported on Windows
2000/XP/2003, so trying to use these tools on Windows 95/98/ME and even Windows
NT probably won't work.

d213 1
a213 1
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
d217 1
a217 1
Try to obtain the latest version of the Platform SDK.  Sometimes these packages
a221 4
According to the download pages these packages are only supported on Windows
2000/XP/2003, so trying to use these tools on Windows 95/98/ME and even Windows
NT probably won't work.

d308 2
a309 2
The latest release of MinGW at the time of writing is 3.1.0, which contains
gcc-3.2.3.  It can be downloaded here:
d311 1
a311 7
    http://www.mingw.org/

Perl also compiles with earlier releases of gcc (2.95.2 and up).  See below
for notes about using earlier versions of MinGW/gcc.

And perl also compiles with gcc-4.3.0 and up, and perhaps even some of the
earlier 4.x.x versions.
a314 36
=item MinGW release 1 with gcc

The MinGW-1.1 bundle contains gcc-2.95.3.

Make sure you install the binaries that work with MSVCRT.DLL as indicated
in the README for the GCC bundle.  You may need to set up a few environment
variables (usually ran from a batch file).

There are a couple of problems with the version of gcc-2.95.2-msvcrt.exe
released 7 November 1999:

=over

=item *

It left out a fix for certain command line quotes.  To fix this, be sure
to download and install the file fixes/quote-fix-msvcrt.exe from the above
ftp location.

=item *

The definition of the fpos_t type in stdio.h may be wrong.  If your
stdio.h has this problem, you will see an exception when running the
test t/lib/io_xs.t.  To fix this, change the typedef for fpos_t from
"long" to "long long" in the file i386-mingw32msvc/include/stdio.h,
and rebuild.

=back

A potentially simpler to install (but probably soon-to-be-outdated) bundle
of the above package with the mentioned fixes already applied is available
here:

    http://downloads.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip
    ftp://ftp.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip

d325 1
a325 1
versions of nmake that come with Visual C++ or the Platform SDK, and
d343 1
a343 3
CCHOME points to wherever you installed your compiler. If building with
gcc-4.x.x, you'll also need to uncomment the assignment to GCC_4XX and
uncomment the assignment to the appropriate GCCHELPERDLL in the makefile.mk.
a359 13
If you are using VC++ 4.2 or earlier then you'll have to change the /EHsc
option in the CXX_FLAG macro to the equivalent /GX option.

If you have either the source or a library that contains des_fcrypt(),
enable the appropriate option in the makefile.  A ready-to-use version
of fcrypt.c, based on the version originally written by Eric Young at
ftp://ftp.funet.fi/pub/crypt/mirrors/dsi/libdes/, is bundled with the
distribution and CRYPT_SRC is set to use it.
Alternatively, if you have built a library that contains des_fcrypt(),
you can set CRYPT_LIB to point to the library name.
Perl will also build without des_fcrypt(), but the crypt() builtin will
fail at run time.

d370 1
a370 1
perl512.dll at the perl toplevel, and various other extension dll's
d376 1
a376 1
=head2 Testing Perl on Win32
d381 1
a381 2
There should be no test failures when running under Windows NT/2000/XP.
Many tests I<will> fail under Windows 9x due to the inferior command shell.
a389 14
If you're using the Borland compiler, you may see a failure in op/taint.t
arising from the inability to find the Borland Runtime DLLs on the system
default path.  You will need to copy the DLLs reported by the messages
from where Borland chose to install it, into the Windows system directory
(usually somewhere like C:\WINNT\SYSTEM32) and rerun the test.

If you're using Borland compiler versions 5.2 and below, you may run into
problems finding the correct header files when building extensions.  For
example, building the "Tk" extension may fail because both perl and Tk
contain a header file called "patchlevel.h".  The latest Borland compiler
(v5.5) is free of this misbehaviour, and it even supports an
option -VI- for backward (bugward) compatibility for using the old Borland
search algorithm  to locate header files.

d402 1
a402 1
=head2 Installation of Perl on Win32
d422 1
a422 1
=head2 Usage Hints for Perl on Win32
d456 1
a456 1
separated with semicolons, as usual on win32.
d476 5
a480 6
First, your command shell (usually CMD.EXE on Windows NT, and
COMMAND.COM on Windows 9x) preprocesses the command line, to handle
redirection, environment variable expansion, and location of the
executable to run. Then, the perl executable splits the remaining
command line into individual arguments, using the C runtime library
upon which Perl was built.
d490 12
a501 9
The Windows NT documentation has almost no description of how the
quoting rules are implemented, but here are some general observations
based on experiments: The C runtime breaks arguments at spaces and
passes them to programs in argc/argv.  Double quotes can be used to
prevent arguments with spaces in them from being split up.  You can
put a double quote in an argument by escaping it with a backslash and
enclosing the whole argument within double quotes.  The backslash and
the pair of double quotes surrounding the argument will be stripped by
the C runtime.
d552 1
a552 1
Windows NT is that it (nearly) always treats a % character as indicating
d562 1
a562 1
Look in http://www.cpan.org/ for more information on CPAN.
d565 2
a566 2
in the Win32 environment; you should check the information at
http://testers.cpan.org/ before investing too much effort into
d587 1
a587 1
 http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe
d592 1
a592 1
    http://www.cpan.org/modules/by-module/Make/
a670 21
=item Win32 Specific Extensions

A number of extensions specific to the Win32 platform are available
from CPAN.  You may find that many of these extensions are meant to
be used under the Activeware port of Perl, which used to be the only
native port for the Win32 platform.  Since the Activeware port does not
have adequate support for Perl's extension building tools, these
extensions typically do not support those tools either and, therefore,
cannot be built using the generic steps shown in the previous section.

To ensure smooth transitioning of existing code that uses the
ActiveState port, there is a bundle of Win32 extensions that contains
all of the ActiveState extensions and several other Win32 extensions from
CPAN in source form, along with many added bugfixes, and with MakeMaker
support.  The latest version of this bundle is available at:

    http://search.cpan.org/dist/libwin32/

See the README in that distribution for building and installation
instructions.

d718 1
a718 1
Win32 has no comparable means to indicate arbitrary files are
d722 1
a722 1
Win32 rely on the file "extension".  There are three methods
d729 5
a733 6
There is a facility called "file extension associations" that will
work in Windows NT 4.0.  This can be manipulated via the two
commands "assoc" and "ftype" that come standard with Windows NT
4.0.  Type "ftype /?" for a complete example of how to set this
up for perl scripts (Say what?  You thought Windows NT wasn't
perl-ready? :).
d769 1
a769 1
executed.  Since you can run batch files on Win32 platforms simply
d791 1
a791 1
like C<less> (recent versions of which have Win32 support).  You may
d801 1
a801 1
the same as normal C<perl> on Win32, except that options like C<-h>
d832 1
a832 1
in the Win32 environment.  See L</"Building Extensions">.
a835 6
Perl requires Winsock2 to be installed on the system. If you're
running Win95, you can download Winsock upgrade from here:

http://www.microsoft.com/windows95/downloads/contents/WUAdminTools/S_WUNetworkingTools/W95Sockets2/Default.asp

Later OS versions already include Winsock2 support.
d840 1
a840 1
implementations of C<signal()> on Win32 are severely crippled.
d866 1
a866 1
=item Steve Hay E<lt>steve.hay@@uk.radan.comE<gt>
a882 2
Borland support was added in 5.004_01 (Gurusamy Sarathy).

d893 1
a893 1
Last updated: 29 August 2007
@


1.11
log
@Merge in perl 5.10.1
@
text
@d1 1031
a1031 1000
If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see pod/perlpod.pod) which is
specially designed to be readable as is.

=head1 NAME

perlwin32 - Perl under Windows

=head1 SYNOPSIS

These are instructions for building Perl under Windows 9x/NT/2000/XP
on the Intel x86 and Itanium architectures.

=head1 DESCRIPTION

Before you start, you should glance through the README file
found in the top-level directory to which the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.

Also make sure you read L<BUGS AND CAVEATS> below for the
known limitations of this port.

The INSTALL file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
"Configure".

You may also want to look at two other options for building
a perl that will work on Windows NT:  the README.cygwin and
README.os2 files, each of which give a different set of rules to
build a Perl that will work on Win32 platforms.  Those two methods
will probably enable you to build a more Unix-compatible perl, but
you will also need to download and use various other build-time and
run-time support software described in those files.

This set of instructions is meant to describe a so-called "native"
port of Perl to Win32 platforms.  This includes both 32-bit and
64-bit Windows operating systems.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using one of the
following compilers on the Intel x86 architecture:

      Borland C++           version 5.02 or later
      Microsoft Visual C++  version 2.0 or later
      MinGW with gcc        gcc version 2.95.2 or later

The last of these is a high quality freeware compiler.  Use version
3.2.x or later for the best results with this compiler.

The Borland C++ and Microsoft Visual C++ compilers are also now being given
away free.  The Borland compiler is available as "Borland C++ Compiler Free
Command Line Tools" and is the same compiler that ships with the full
"Borland C++ Builder" product.  The Microsoft compiler is available as
"Visual C++ Toolkit 2003" or "Visual C++ 2005/2008 Express Edition" (and also
as part of the ".NET Framework SDK") and is the same compiler that ships with
"Visual C++ .NET 2003 Professional" or "Visual C++ 2005/2008 Professional"
respectively.

This port can also be built on the Intel IA64 using:

      Microsoft Platform SDK	Nov 2001 (64-bit compiler and tools)

The MS Platform SDK can be downloaded from http://www.microsoft.com/.

This port fully supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the CPAN sites.
See L<Usage Hints for Perl on Win32> below for general hints about this.

=head2 Setting Up Perl on Win32

=over 4

=item Make

You need a "make" program to build the sources.  If you are using
Visual C++ or the Platform SDK tools under Windows NT/2000/XP, nmake
will work.  All other builds need dmake.

dmake is a freely available make that has very nice macro features
and parallelability.

A port of dmake for Windows is available from:

    http://search.cpan.org/dist/dmake/

Fetch and install dmake somewhere on your path.

There exists a minor coexistence problem with dmake and Borland C++
compilers.  Namely, if a distribution has C files named with mixed
case letters, they will be compiled into appropriate .obj-files named
with all lowercase letters, and every time dmake is invoked
to bring files up to date, it will try to recompile such files again.
For example, Tk distribution has a lot of such files, resulting in
needless recompiles every time dmake is invoked.  To avoid this, you
may use the script "sync_ext.pl" after a successful build.  It is
available in the win32 subdirectory of the Perl source distribution.

=item Command Shell

Use the default "cmd" shell that comes with NT.  Some versions of the
popular 4DOS/NT shell have incompatibilities that may cause you trouble.
If the build fails under that shell, try building again with the cmd
shell.

The nmake Makefile also has known incompatibilities with the
"command.com" shell that comes with Windows 9x.  You will need to
use dmake and makefile.mk to build under Windows 9x.

The surest way to build it is on Windows NT/2000/XP, using the cmd shell.

Make sure the path to the build directory does not contain spaces.  The
build usually works in this circumstance, but some tests will fail.

=item Borland C++

If you are using the Borland compiler, you will need dmake.
(The make that Borland supplies is seriously crippled and will not
work for MakeMaker builds.)

See L</"Make"> above.

=item Microsoft Visual C++

The nmake that comes with Visual C++ will suffice for building.
You will need to run the VCVARS32.BAT file, usually found somewhere
like C:\MSDEV4.2\BIN or C:\Program Files\Microsoft Visual Studio\VC98\Bin.
This will set your build environment.

You can also use dmake to build using Visual C++; provided, however,
you set OSRELEASE to "microsft" (or whatever the directory name
under which the Visual C dmake configuration lives) in your environment
and edit win32/config.vc to change "make=nmake" into "make=dmake".  The
latter step is only essential if you want to use dmake as your default
make for building extensions using MakeMaker.

=item Microsoft Visual C++ 2008 Express Edition

This free version of Visual C++ 2008 Professional contains the same compiler
and linker that ship with the full version, and also contains everything
necessary to build Perl, rather than requiring a separate download of the
Platform SDK like previous versions did.

This package can be downloaded by searching for "Visual Studio 2008 Express
Edition" in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Install Visual C++ 2008, then setup your environment using

	C:\Program Files\Microsoft Visual Studio 9.0\Common7\Tools\vsvars32.bat

(assuming the default installation location was chosen).

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC90FREE

first.

=item Microsoft Visual C++ 2005 Express Edition

This free version of Visual C++ 2005 Professional contains the same compiler
and linker that ship with the full version, but doesn't contain everything
necessary to build Perl.

You will also need to download the "Platform SDK" (the "Core SDK" and "MDAC
SDK" components are required) for more header files and libraries.

These packages can both be downloaded by searching in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Try to obtain the latest version of the Platform SDK.  Sometimes these packages
contain a particular Windows OS version in their name, but actually work on
other OS versions too.  For example, the "Windows Server 2003 R2 Platform SDK"
also runs on Windows XP SP2 and Windows 2000.

According to the download pages these packages are only supported on Windows
2000/XP/2003, so trying to use these tools on Windows 95/98/ME and even Windows
NT probably won't work.

Install Visual C++ 2005 first, then the Platform SDK.  Setup your environment
as follows (assuming default installation locations were chosen):

	SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK

	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual Studio 8\Common7\IDE;C:\Program Files\Microsoft Visual Studio 8\VC\BIN;C:\Program Files\Microsoft Visual Studio 8\Common7\Tools;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\bin;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;C:\Program Files\Microsoft Visual Studio 8\VC\VCPackages;%PlatformSDKDir%\Bin

	SET INCLUDE=C:\Program Files\Microsoft Visual Studio 8\VC\INCLUDE;%PlatformSDKDir%\include

	SET LIB=C:\Program Files\Microsoft Visual Studio 8\VC\LIB;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\lib;%PlatformSDKDir%\lib

	SET LIBPATH=C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727

(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into "C:\Program Files\Microsoft SDK",
while the latest versions install into version-specific locations such as
"C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2".)

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC80FREE

and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.

=item Microsoft Visual C++ Toolkit 2003

This free toolkit contains the same compiler and linker that ship with
Visual C++ .NET 2003 Professional, but doesn't contain everything
necessary to build Perl.

You will also need to download the "Platform SDK" (the "Core SDK" and "MDAC
SDK" components are required) for header files, libraries and rc.exe, and
".NET Framework SDK" for more libraries and nmake.exe.  Note that the latter
(which also includes the free compiler and linker) requires the ".NET
Framework Redistributable" to be installed first.  This can be downloaded and
installed separately, but is included in the "Visual C++ Toolkit 2003" anyway.

These packages can all be downloaded by searching in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Try to obtain the latest version of the Platform SDK.  Sometimes these packages
contain a particular Windows OS version in their name, but actually work on
other OS versions too.  For example, the "Windows Server 2003 R2 Platform SDK"
also runs on Windows XP SP2 and Windows 2000.

According to the download pages these packages are only supported on Windows
2000/XP/2003, so trying to use these tools on Windows 95/98/ME and even Windows
NT probably won't work.

Install the Toolkit first, then the Platform SDK, then the .NET Framework SDK.
Setup your environment as follows (assuming default installation locations
were chosen):

	SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK

	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin;%PlatformSDKDir%\Bin;C:\Program Files\Microsoft.NET\SDK\v1.1\Bin

	SET INCLUDE=C:\Program Files\Microsoft Visual C++ Toolkit 2003\include;%PlatformSDKDir%\include;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include

	SET LIB=C:\Program Files\Microsoft Visual C++ Toolkit 2003\lib;%PlatformSDKDir%\lib;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib

(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into "C:\Program Files\Microsoft SDK",
while the latest versions install into version-specific locations such as
"C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2".)

Several required files will still be missing:

=over 4

=item *

cvtres.exe is required by link.exe when using a .res file.  It is actually
installed by the .NET Framework SDK, but into a location such as the
following:

	C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322

Copy it from there to %PlatformSDKDir%\Bin

=item *

lib.exe is normally used to build libraries, but link.exe with the /lib
option also works, so change win32/config.vc to use it instead:

Change the line reading:

	ar='lib'

to:

	ar='link /lib'

It may also be useful to create a batch file called lib.bat in
C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin containing:

	@@echo off
	link /lib %*

for the benefit of any naughty C extension modules that you might want to build
later which explicitly reference "lib" rather than taking their value from
$Config{ar}.

=item *

setargv.obj is required to build perlglob.exe (and perl.exe if the USE_SETARGV
option is enabled).  The Platform SDK supplies this object file in source form
in %PlatformSDKDir%\src\crt.  Copy setargv.c, cruntime.h and
internal.h from there to some temporary location and build setargv.obj using

	cl.exe /c /I. /D_CRTBLD setargv.c

Then copy setargv.obj to %PlatformSDKDir%\lib

Alternatively, if you don't need perlglob.exe and don't need to enable the
USE_SETARGV option then you can safely just remove all mention of $(GLOBEXE)
from win32/Makefile and setargv.obj won't be required anyway.

=back

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC70FREE

and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.

=item Microsoft Platform SDK 64-bit Compiler

The nmake that comes with the Platform SDK will suffice for building
Perl.  Make sure you are building within one of the "Build Environment"
shells available after you install the Platform SDK from the Start Menu.

=item MinGW release 3 with gcc

The latest release of MinGW at the time of writing is 3.1.0, which contains
gcc-3.2.3.  It can be downloaded here:

    http://www.mingw.org/

Perl also compiles with earlier releases of gcc (2.95.2 and up).  See below
for notes about using earlier versions of MinGW/gcc.

You also need dmake.  See L</"Make"> above on how to get it.

=item MinGW release 1 with gcc

The MinGW-1.1 bundle contains gcc-2.95.3.

Make sure you install the binaries that work with MSVCRT.DLL as indicated
in the README for the GCC bundle.  You may need to set up a few environment
variables (usually ran from a batch file).

There are a couple of problems with the version of gcc-2.95.2-msvcrt.exe
released 7 November 1999:

=over

=item *

It left out a fix for certain command line quotes.  To fix this, be sure
to download and install the file fixes/quote-fix-msvcrt.exe from the above
ftp location.

=item *

The definition of the fpos_t type in stdio.h may be wrong.  If your
stdio.h has this problem, you will see an exception when running the
test t/lib/io_xs.t.  To fix this, change the typedef for fpos_t from
"long" to "long long" in the file i386-mingw32msvc/include/stdio.h,
and rebuild.

=back

A potentially simpler to install (but probably soon-to-be-outdated) bundle
of the above package with the mentioned fixes already applied is available
here:

    http://downloads.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip
    ftp://ftp.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip

=back

=head2 Building

=over 4

=item *

Make sure you are in the "win32" subdirectory under the perl toplevel.
This directory contains a "Makefile" that will work with
versions of nmake that come with Visual C++ or the Platform SDK, and
a dmake "makefile.mk" that will work for all supported compilers.  The
defaults in the dmake makefile are setup to build using MinGW/gcc.

=item *

Edit the makefile.mk (or Makefile, if you're using nmake) and change
the values of INST_DRV and INST_TOP.   You can also enable various
build flags.  These are explained in the makefiles.

Note that it is generally not a good idea to try to build a perl with
INST_DRV and INST_TOP set to a path that already exists from a previous
build.  In particular, this may cause problems with the
lib/ExtUtils/t/Embed.t test, which attempts to build a test program and
may end up building against the installed perl's lib/CORE directory rather
than the one being tested.

You will have to make sure that CCTYPE is set correctly and that
CCHOME points to wherever you installed your compiler.

The default value for CCHOME in the makefiles for Visual C++
may not be correct for some versions.  Make sure the default exists
and is valid.

You may also need to comment out the C<DELAYLOAD = ...> line in the
Makefile if you're using VC++ 6.0 without the latest service pack and
the linker reports an internal error.

If you are using VC++ 4.2 or earlier then you'll have to change the /EHsc
option in the CXX_FLAG macro to the equivalent /GX option.

If you have either the source or a library that contains des_fcrypt(),
enable the appropriate option in the makefile.  A ready-to-use version
of fcrypt.c, based on the version originally written by Eric Young at
ftp://ftp.funet.fi/pub/crypt/mirrors/dsi/libdes/, is bundled with the
distribution and CRYPT_SRC is set to use it.
Alternatively, if you have built a library that contains des_fcrypt(),
you can set CRYPT_LIB to point to the library name.
Perl will also build without des_fcrypt(), but the crypt() builtin will
fail at run time.

If you want build some core extensions statically into perl's dll, specify
them in the STATIC_EXT macro.

Be sure to read the instructions near the top of the makefiles carefully.

=item *

Type "dmake" (or "nmake" if you are using that make).

This should build everything.  Specifically, it will create perl.exe,
perl510.dll at the perl toplevel, and various other extension dll's
under the lib\auto directory.  If the build fails for any reason, make
sure you have done the previous steps correctly.

=back

=head2 Testing Perl on Win32

Type "dmake test" (or "nmake test").  This will run most of the tests from
the testsuite (many tests will be skipped).

There should be no test failures when running under Windows NT/2000/XP.
Many tests I<will> fail under Windows 9x due to the inferior command shell.

Some test failures may occur if you use a command shell other than the
native "cmd.exe", or if you are building from a path that contains
spaces.  So don't do that.

If you are running the tests from a emacs shell window, you may see
failures in op/stat.t.  Run "dmake test-notty" in that case.

If you're using the Borland compiler, you may see a failure in op/taint.t
arising from the inability to find the Borland Runtime DLLs on the system
default path.  You will need to copy the DLLs reported by the messages
from where Borland chose to install it, into the Windows system directory
(usually somewhere like C:\WINNT\SYSTEM32) and rerun the test.

If you're using Borland compiler versions 5.2 and below, you may run into
problems finding the correct header files when building extensions.  For
example, building the "Tk" extension may fail because both perl and Tk
contain a header file called "patchlevel.h".  The latest Borland compiler
(v5.5) is free of this misbehaviour, and it even supports an
option -VI- for backward (bugward) compatibility for using the old Borland
search algorithm  to locate header files.

If you run the tests on a FAT partition, you may see some failures for
C<link()> related tests (I<op/write.t>, I<op/stat.t> ...). Testing on
NTFS avoids these errors.

Furthermore, you should make sure that during C<make test> you do not
have any GNU tool packages in your path: some toolkits like Unixutils
include some tools (C<type> for instance) which override the Windows
ones and makes tests fail. Remove them from your path while testing to
avoid these errors.

Please report any other failures as described under L<BUGS AND CAVEATS>.

=head2 Installation of Perl on Win32

Type "dmake install" (or "nmake install").  This will put the newly
built perl and the libraries under whatever C<INST_TOP> points to in the
Makefile.  It will also install the pod documentation under
C<$INST_TOP\$INST_VER\lib\pod> and HTML versions of the same under
C<$INST_TOP\$INST_VER\lib\pod\html>.

To use the Perl you just installed you will need to add a new entry to
your PATH environment variable: C<$INST_TOP\bin>, e.g.

    set PATH=c:\perl\bin;%PATH%

If you opted to uncomment C<INST_VER> and C<INST_ARCH> in the makefile
then the installation structure is a little more complicated and you will
need to add two new PATH components instead: C<$INST_TOP\$INST_VER\bin> and
C<$INST_TOP\$INST_VER\bin\$ARCHNAME>, e.g.

    set PATH=c:\perl\5.6.0\bin;c:\perl\5.6.0\bin\MSWin32-x86;%PATH%

=head2 Usage Hints for Perl on Win32

=over 4

=item Environment Variables

The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your PATH variable).

If you put extensions in unusual places, you can set PERL5LIB
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in L<perlrun>.

You can also control the shell that perl uses to run system() and
backtick commands via PERL5SHELL.  See L<perlrun>.

Perl does not depend on the registry, but it can look up certain default
values if you choose to put them there.  Perl attempts to read entries from
C<HKEY_CURRENT_USER\Software\Perl> and C<HKEY_LOCAL_MACHINE\Software\Perl>.
Entries in the former override entries in the latter.  One or more of the
following entries (of type REG_SZ or REG_EXPAND_SZ) may be set:

    lib-$]		version-specific standard library path to add to @@INC
    lib			standard library path to add to @@INC
    sitelib-$]		version-specific site library path to add to @@INC
    sitelib		site library path to add to @@INC
    vendorlib-$]	version-specific vendor library path to add to @@INC
    vendorlib		vendor library path to add to @@INC
    PERL*		fallback for all %ENV lookups that begin with "PERL"

Note the C<$]> in the above is not literal.  Substitute whatever version
of perl you want to honor that entry, e.g. C<5.6.0>.  Paths must be
separated with semicolons, as usual on win32.

=item File Globbing

By default, perl handles file globbing using the File::Glob extension,
which provides portable globbing.

If you want perl to use globbing that emulates the quirks of DOS
filename conventions, you might want to consider using File::DosGlob
to override the internal glob() implementation.  See L<File::DosGlob> for
details.

=item Using perl from the command line

If you are accustomed to using perl from various command-line
shells found in UNIX environments, you will be less than pleased
with what Windows offers by way of a command shell.

The crucial thing to understand about the Windows environment is that
the command line you type in is processed twice before Perl sees it.
First, your command shell (usually CMD.EXE on Windows NT, and
COMMAND.COM on Windows 9x) preprocesses the command line, to handle
redirection, environment variable expansion, and location of the
executable to run. Then, the perl executable splits the remaining
command line into individual arguments, using the C runtime library
upon which Perl was built.

It is particularly important to note that neither the shell nor the C
runtime do any wildcard expansions of command-line arguments (so
wildcards need not be quoted).  Also, the quoting behaviours of the
shell and the C runtime are rudimentary at best (and may, if you are
using a non-standard shell, be inconsistent).  The only (useful) quote
character is the double quote (").  It can be used to protect spaces
and other special characters in arguments.

The Windows NT documentation has almost no description of how the
quoting rules are implemented, but here are some general observations
based on experiments: The C runtime breaks arguments at spaces and
passes them to programs in argc/argv.  Double quotes can be used to
prevent arguments with spaces in them from being split up.  You can
put a double quote in an argument by escaping it with a backslash and
enclosing the whole argument within double quotes.  The backslash and
the pair of double quotes surrounding the argument will be stripped by
the C runtime.

The file redirection characters "E<lt>", "E<gt>", and "|" can be quoted by
double quotes (although there are suggestions that this may not always
be true).  Single quotes are not treated as quotes by the shell or
the C runtime, they don't get stripped by the shell (just to make
this type of quoting completely useless).  The caret "^" has also
been observed to behave as a quoting character, but this appears
to be a shell feature, and the caret is not stripped from the command
line, so Perl still sees it (and the C runtime phase does not treat
the caret as a quote character).

Here are some examples of usage of the "cmd" shell:

This prints two doublequotes:

    perl -e "print '\"\"' "

This does the same:

    perl -e "print \"\\\"\\\"\" "

This prints "bar" and writes "foo" to the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" > blurch

This prints "foo" ("bar" disappears into nowhereland):

    perl -e "print 'foo'; print STDERR 'bar'" 2> nul

This prints "bar" and writes "foo" into the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 1> blurch

This pipes "foo" to the "less" pager and prints "bar" on the console:

    perl -e "print 'foo'; print STDERR 'bar'" | less

This pipes "foo\nbar\n" to the less pager:

    perl -le "print 'foo'; print STDERR 'bar'" 2>&1 | less

This pipes "foo" to the pager and writes "bar" in the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch | less


Discovering the usefulness of the "command.com" shell on Windows 9x
is left as an exercise to the reader :)

One particularly pernicious problem with the 4NT command shell for
Windows NT is that it (nearly) always treats a % character as indicating
that environment variable expansion is needed.  Under this shell, it is
therefore important to always double any % characters which you want
Perl to see (for example, for hash variables), even when they are
quoted.

=item Building Extensions

The Comprehensive Perl Archive Network (CPAN) offers a wealth
of extensions, some of which require a C compiler to build.
Look in http://www.cpan.org/ for more information on CPAN.

Note that not all of the extensions available from CPAN may work
in the Win32 environment; you should check the information at
http://testers.cpan.org/ before investing too much effort into
porting modules that don't readily build.

Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:

    perl Makefile.PL
    $MAKE
    $MAKE test
    $MAKE install

where $MAKE is whatever 'make' program you have configured perl to
use.  Use "perl -V:make" to find out what this is.  Some extensions
may not provide a testsuite (so "$MAKE test" may not do anything or
fail), but most serious ones do.

It is important that you use a supported 'make' program, and
ensure Config.pm knows about it.  If you don't have nmake, you can
either get dmake from the location mentioned earlier or get an
old version of nmake reportedly available from:

 http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe

Another option is to use the make written in Perl, available from
CPAN.

    http://www.cpan.org/modules/by-module/Make/

You may also use dmake.  See L</"Make"> above on how to get it.

Note that MakeMaker actually emits makefiles with different syntax
depending on what 'make' it thinks you are using.  Therefore, it is
important that one of the following values appears in Config.pm:

    make='nmake'	# MakeMaker emits nmake syntax
    make='dmake'	# MakeMaker emits dmake syntax
    any other value	# MakeMaker emits generic make syntax
    			    (e.g GNU make, or Perl make)

If the value doesn't match the 'make' program you want to use,
edit Config.pm to fix it.

If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation.

If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.

=item Command-line Wildcard Expansion

The default command shells on DOS descendant operating systems (such
as they are) usually do not expand wildcard arguments supplied to
programs.  They consider it the application's job to handle that.
This is commonly achieved by linking the application (in our case,
perl) with startup code that the C runtime libraries usually provide.
However, doing that results in incompatible perl versions (since the
behavior of the argv expansion code differs depending on the
compiler, and it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary with an
alternate shell that *does* expand wildcards.

Instead, the following solution works rather well. The nice things
about it are 1) you can start using it right away; 2) it is more
powerful, because it will do the right thing with a pattern like
*/*/*.c; 3) you can decide whether you do/don't want to use it; and
4) you can extend the method to add any customizations (or even
entirely different kinds of wildcard expansion).

	C:\> copy con c:\perl\lib\Wild.pm
	# Wild.pm - emulate shell @@ARGV expansion on shells that don't
	use File::DosGlob;
	@@ARGV = map {
		      my @@g = File::DosGlob::glob($_) if /[*?]/;
		      @@g ? @@g : $_;
		    } @@ARGV;
	1;
	^Z
	C:\> set PERL5OPT=-MWild
	C:\> perl -le "for (@@ARGV) { print }" */*/perl*.c
	p4view/perl/perl.c
	p4view/perl/perlio.c
	p4view/perl/perly.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c

Note there are two distinct steps there: 1) You'll have to create
Wild.pm and put it in your perl lib directory. 2) You'll need to
set the PERL5OPT environment variable.  If you want argv expansion
to be the default, just set PERL5OPT in your default startup
environment.

If you are using the Visual C compiler, you can get the C runtime's
command line wildcard expansion built into perl binary.  The resulting
binary will always expand unquoted command lines, which may not be
what you want if you use a shell that does that for you.  The expansion
done is also somewhat less powerful than the approach suggested above.

=item Win32 Specific Extensions

A number of extensions specific to the Win32 platform are available
from CPAN.  You may find that many of these extensions are meant to
be used under the Activeware port of Perl, which used to be the only
native port for the Win32 platform.  Since the Activeware port does not
have adequate support for Perl's extension building tools, these
extensions typically do not support those tools either and, therefore,
cannot be built using the generic steps shown in the previous section.

To ensure smooth transitioning of existing code that uses the
ActiveState port, there is a bundle of Win32 extensions that contains
all of the ActiveState extensions and several other Win32 extensions from
CPAN in source form, along with many added bugfixes, and with MakeMaker
support.  The latest version of this bundle is available at:

    http://search.cpan.org/dist/libwin32/

See the README in that distribution for building and installation
instructions.

=item Notes on 64-bit Windows

Windows .NET Server supports the LLP64 data model on the Intel Itanium
architecture.

The LLP64 data model is different from the LP64 data model that is the
norm on 64-bit Unix platforms.  In the former, C<int> and C<long> are
both 32-bit data types, while pointers are 64 bits wide.  In addition,
there is a separate 64-bit wide integral type, C<__int64>.  In contrast,
the LP64 data model that is pervasive on Unix platforms provides C<int>
as the 32-bit type, while both the C<long> type and pointers are of
64-bit precision.  Note that both models provide for 64-bits of
addressability.

64-bit Windows running on Itanium is capable of running 32-bit x86
binaries transparently.  This means that you could use a 32-bit build
of Perl on a 64-bit system.  Given this, why would one want to build
a 64-bit build of Perl?  Here are some reasons why you would bother:

=over

=item *

A 64-bit native application will run much more efficiently on
Itanium hardware.

=item *

There is no 2GB limit on process size.

=item *

Perl automatically provides large file support when built under
64-bit Windows.

=item *

Embedding Perl inside a 64-bit application.

=back

=back

=head2 Running Perl Scripts

Perl scripts on UNIX use the "#!" (a.k.a "shebang") line to
indicate to the OS that it should execute the file using perl.
Win32 has no comparable means to indicate arbitrary files are
executables.

Instead, all available methods to execute plain text files on
Win32 rely on the file "extension".  There are three methods
to use this to execute perl scripts:

=over 8

=item 1

There is a facility called "file extension associations" that will
work in Windows NT 4.0.  This can be manipulated via the two
commands "assoc" and "ftype" that come standard with Windows NT
4.0.  Type "ftype /?" for a complete example of how to set this
up for perl scripts (Say what?  You thought Windows NT wasn't
perl-ready? :).

=item 2

Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the OS, may be used.  The install process
makes available the "pl2bat.bat" script which can be used to wrap
perl scripts into batch files.  For example:

	pl2bat foo.pl

will create the file "FOO.BAT".  Note "pl2bat" strips any
.pl suffix and adds a .bat suffix to the generated file.

If you use the 4DOS/NT or similar command shell, note that
"pl2bat" uses the "%*" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a "ParameterChar = *" statement in their
4NT.INI file or will need to execute "setdos /p*" in the 4DOS/NT
startup file to enable this to work.

=item 3

Using "pl2bat" has a few problems:  the file name gets changed,
so scripts that rely on C<$0> to find what they must do may not
run properly; running "pl2bat" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.

A script called "runperl.bat" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it "foo.bat", it will run the file "foo" when it is
executed.  Since you can run batch files on Win32 platforms simply
by typing the name (without the extension), this effectively
runs the file "foo", when you type either "foo" or "foo.bat".
With this method, "foo.bat" can even be in a different location
than the file "foo", as long as "foo" is available somewhere on
the PATH.  If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying "runperl.bat".

Here's a diversion:  copy "runperl.bat" to "runperl", and type
"runperl".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,"lrepnur" eteled :tniH

=back

=head2 Miscellaneous Things

A full set of HTML documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.

C<perldoc> is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like C<less> (recent versions of which have Win32 support).  You may
have to set the PAGER environment variable to use a specific pager.
"perldoc -f foo" will print information about the perl operator
"foo".

One common mistake when using this port with a GUI library like C<Tk>
is assuming that Perl's normal behavior of opening a command-line
window will go away.  This isn't the case.  If you want to start a copy
of C<perl> without opening a command-line window, use the C<wperl>
executable built during the installation process.  Usage is exactly
the same as normal C<perl> on Win32, except that options like C<-h>
don't work (since they need a command-line window to print to).

If you find bugs in perl, you can run C<perlbug> to create a
bug report (you may have to send it manually if C<perlbug> cannot
find a mailer on your system).

=head1 BUGS AND CAVEATS

Norton AntiVirus interferes with the build process, particularly if
set to "AutoProtect, All Files, when Opened". Unlike large applications
the perl build process opens and modifies a lot of files. Having the
the AntiVirus scan each and every one slows build the process significantly.
Worse, with PERLIO=stdio the build process fails with peculiar messages
as the virus checker interacts badly with miniperl.exe writing configure
files (it seems to either catch file part written and treat it as suspicious,
or virus checker may have it "locked" in a way which inhibits miniperl
updating it). The build does complete with

   set PERLIO=perlio

but that may be just luck. Other AntiVirus software may have similar issues.

Some of the built-in functions do not act exactly as documented in
L<perlfunc>, and a few are not implemented at all.  To avoid
surprises, particularly if you have had prior exposure to Perl
in other operating environments or if you intend to write code
that will be portable to other environments, see L<perlport>
for a reasonably definitive list of these differences.

Not all extensions available from CPAN may build or work properly
in the Win32 environment.  See L</"Building Extensions">.

Most C<socket()> related calls are supported, but they may not
behave as on Unix platforms.  See L<perlport> for the full list.
Perl requires Winsock2 to be installed on the system. If you're
running Win95, you can download Winsock upgrade from here:

http://www.microsoft.com/windows95/downloads/contents/WUAdminTools/S_WUNetworkingTools/W95Sockets2/Default.asp

Later OS versions already include Winsock2 support.

Signal handling may not behave as on Unix platforms (where it
doesn't exactly "behave", either :).  For instance, calling C<die()>
or C<exit()> from signal handlers will cause an exception, since most
implementations of C<signal()> on Win32 are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.

Please send detailed descriptions of any problems and solutions that
you may find to E<lt>F<perlbug@@perl.org>E<gt>, along with the output
produced by C<perl -V>.

=head1 ACKNOWLEDGEMENTS

The use of a camel with the topic of Perl is a trademark
of O'Reilly and Associates, Inc. Used with permission.

=head1 AUTHORS

=over 4

=item Gary Ng E<lt>71564.1743@@CompuServe.COME<gt>

=item Gurusamy Sarathy E<lt>gsar@@activestate.comE<gt>

=item Nick Ing-Simmons E<lt>nick@@ing-simmons.netE<gt>

=item Jan Dubois E<lt>jand@@activestate.comE<gt>

=item Steve Hay E<lt>steve.hay@@uk.radan.comE<gt>

=back

This document is maintained by Jan Dubois.

=head1 SEE ALSO

L<perl>

=head1 HISTORY

This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.  Various people have made numerous and sundry hacks
since then.

Borland support was added in 5.004_01 (Gurusamy Sarathy).

GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).

Support for PERL_OBJECT was added in 5.005 (ActiveState Tool Corp).

Support for fork() emulation was added in 5.6 (ActiveState Tool Corp).

Win9x support was added in 5.6 (Benjamin Stuhl).

Support for 64-bit Windows added in 5.8 (ActiveState Corp).

Last updated: 29 August 2007

=cut
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d138 1
a138 1
=item Microsoft Visual C++ 2008 Express Edition Beta 2
d145 5
a149 8
The Beta 2 package is currently available from 

http://msdn2.microsoft.com/en-us/express/future/default.aspx
http://msdn2.microsoft.com/en-gb/express/future/default.aspx

The final release version will probably be found by searching in the Download
Center at http://www.microsoft.com/downloads/search.aspx?displaylang=en in due
course.
@


1.9
log
@merge in perl 5.8.8
@
text
@d55 4
a58 2
"Visual C++ Toolkit 2003", and also as part of the ".NET Framework SDK", and
is the same compiler that ships with "Visual Studio .NET 2003 Professional".
d138 77
d218 1
a218 1
Visual Studio .NET 2003 Professional, but doesn't contain everything
d235 1
a235 1
other OS versions too.  For example, the "Windows Server 2003 SP1 Platform SDK"
d238 3
a240 3
According to the download pages the Toolkit and the .NET Framework SDK are only
supported on Windows 2000/XP/2003, so trying to use these tools on Windows
95/98/ME and even Windows NT probably won't work.
d246 12
a257 3
	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin;C:\Program Files\Microsoft SDK\Bin;C:\Program Files\Microsoft.NET\SDK\v1.1\Bin
	SET INCLUDE=C:\Program Files\Microsoft Visual C++ Toolkit 2003\include;C:\Program Files\Microsoft SDK\include;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include
	SET LIB=C:\Program Files\Microsoft Visual C++ Toolkit 2003\lib;C:\Program Files\Microsoft SDK\lib;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib
d271 1
a271 1
Copy it from there to C:\Program Files\Microsoft SDK\Bin
d300 1
a300 1
in C:\Program Files\Microsoft SDK\src\crt.  Copy setargv.c, cruntime.h and
d305 1
a305 1
Then copy setargv.obj to C:\Program Files\Microsoft SDK\lib
d412 3
d435 1
a435 1
perl58.dll at the perl toplevel, and various other extension dll's
d471 2
a472 14
C<link()> related tests:

    Failed Test                     Stat Wstat Total Fail  Failed  List

    ../ext/IO/lib/IO/t/io_dup.t                    6    4  66.67%  2-5
    ../lib/File/Temp/t/mktemp.t                    9    1  11.11%  2
    ../lib/File/Temp/t/posix.t                     7    1  14.29%  3
    ../lib/File/Temp/t/security.t                 13    1   7.69%  2
    ../lib/File/Temp/t/tempfile.t                 20    2  10.00%  2 4
    comp/multiline.t                               6    2  33.33%  5-6
    io/dup.t                                       8    6  75.00%  2-7
    op/write.t                                    47    7  14.89%  1-3 6 9-11

Testing on NTFS avoids these errors.
d1001 1
a1001 1
Last updated: 30 September 2005
@


1.8
log
@sync in-tree perl with 5.8.6
@
text
@d45 1
a45 1
      Microsoft Visual C++  version 4.2 or later
d51 6
a56 4
The Microsoft Visual C++ compiler is also now being given away free in
the "Visual C++ Toolkit 2003", and also as part of the ".NET Framework
SDK".  This is the same compiler that ships with "Visual Studio .NET 2003
Professional".
d84 1
a84 1
    http://www.cpan.org/authors/id/GSAR/dmake-4.1pl1-win32.zip
d86 1
a86 7
(This is a fixed version of the original dmake sources obtained from
http://www.wticorp.com/  As of version 4.1PL1, the original
sources did not build as shipped and had various other problems.
A patch is included in the above fixed version.)

Fetch and install dmake somewhere on your path (follow the instructions
in the README.NOW file).
d150 8
a157 7
http://www.microsoft.com/downloads/search.aspx?displaylang=en

Note that the "Platform SDK February 2003" download requires Internet Explorer
5.0 to function.  Alternatively, the very latest version at the time of writing
(called "Windows XP Service Pack 2 Platform SDK RC2") is now available as an
ISO-9660 CD image file and does not require IE5 to be downloaded but will only
work on Windows XP.
d188 11
a198 1
option also works, so create a batch file called lib.bat in
d204 3
a206 2
This will work as long as "lib.exe" is invoked simply as "lib" (which it is
during the Perl build process).
d219 4
d226 5
a230 3
file to comment-out CCTYPE = MSVC60 (since that enables delay-loading of the
Winsock DLL which the free toolkit does not support) and to set CCHOME,
CCINCDIR and CCLIBDIR as per the environment setup above.
d240 1
a240 1
The latest release of MinGW at the time of writing is 3.1.0, which contains 
d302 1
a302 1
Edit the makefile.mk (or Makefile, if you're using nmake) and change 
d313 1
a313 1
You will have to make sure that CCTYPE is set correctly and that 
d320 4
d334 3
d631 1
a631 1
about it are 1) you can start using it right away; 2) it is more 
d634 1
a634 1
4) you can extend the method to add any customizations (or even 
d684 1
a684 1
support.  This bundle is available at:
d686 1
a686 1
   http://www.cpan.org/modules/by-module/Win32/libwin32-0.191.zip
d689 1
a689 2
instructions.  Look for later versions that may be available at the
same location.
d831 3
a833 3
Norton AntiVirus interferes with the build process, particularly if 
set to "AutoProtect, All Files, when Opened". Unlike large applications 
the perl build process opens and modifies a lot of files. Having the  
d836 1
a836 1
as the virus checker interacts badly with miniperl.exe writing configure 
d839 1
a839 1
updating it). The build does complete with 
d872 1
a872 1
Please send detailed descriptions of any problems and solutions that 
d891 4
d897 1
a897 1
This document is maintained by Gurusamy Sarathy.
d922 1
a922 1
Last updated: 30 July 2004
@


1.7
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d44 3
a46 3
      Borland C++		version 5.02 or later
      Microsoft Visual C++	version 4.2 or later
      MinGW with gcc		gcc version 2.95.2 or later
d51 5
d130 2
a131 1
like C:\MSDEV4.2\BIN.  This will set your build environment.
d140 78
d226 2
a227 2
The latest release of MinGW at the time of writing is 3.1.0, which comes 
with gcc-3.2.3, and can be downloaded here:
d238 1
a238 1
The MinGW-1.1 bundle comes with gcc-2.95.3.
d284 1
a284 2
defaults in the dmake makefile are setup to build using Microsoft Visual
C++ 6.0 or newer.
d310 1
a310 1
distribution. Set CRYPT_SRC to fcrypt.c to use this version.
d387 2
a388 11
C<$INST_TOP\$VERSION\lib\pod> and HTML versions of the same under
C<$INST_TOP\$VERSION\lib\pod\html>.  To use the Perl you just installed,
you will need to add two components to your PATH environment variable,
C<$INST_TOP\$VERSION\bin> and C<$INST_TOP\$VERSION\bin\$ARCHNAME>.
For example:

    set PATH c:\perl\5.6.0\bin;c:\perl\5.6.0\bin\MSWin32-x86;%PATH%

If you opt to comment out INST_VER and INST_ARCH in the makefiles, the
installation structure is much simpler.  In that case, it will be
sufficient to add a single entry to the path, for instance:
d390 11
a400 1
    set PATH c:\perl\bin;%PATH%
d481 1
a481 1
The file redirection characters "<", ">", and "|" can be quoted by
d661 1
a661 1
all of the ActiveState extensions and most other Win32 extensions from
d665 1
a665 1
   http://www.cpan.org/authors/id/GSAR/libwin32-0.18.zip
d690 2
d712 2
d782 3
a784 1
=item Miscellaneous Things
a808 2
=back

d829 1
a829 1
that will be portable to other environments.  See L<perlport>
d837 6
d853 2
a854 2
you may find to <F<perlbug@@perl.com>>, along with the output produced
by C<perl -V>.
d898 1
a898 1
Last updated: 20 April 2002
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d46 1
a46 1
      Mingw32 with GCC		version 2.95.2 or better
d48 2
a49 3
The last of these is a high quality freeware compiler.  Support
for it is still experimental.  (Older versions of GCC are known
not to work.)
d140 1
a140 1
=item MinGW32 with gcc
d142 2
a143 2
The latest release of MinGW (at the time of writing) is 2.0.0, which comes 
with gcc-3.2, and can be downloaded here:
d145 1
a145 1
    http://sourceforge.net/projects/mingw
d147 2
a148 7
Perl compiles with earlier releases of gcc (2.95 and up) that can be
downloaded from the same place. If you use gcc-3.2, comment out the
line:

    USE_GCC_V3_2	*= define

in win32\makefile.mk
d152 1
a152 1
=item MinGW release 1
d209 7
d481 1
a481 1
    ftp://ftp.microsoft.com/Softlib/MSLFILES/nmake15.exe
d761 5
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d141 1
a141 1
=item Mingw32 with GCC
d143 2
a144 1
GCC-2.95.2 binaries can be downloaded from:
d146 9
a154 1
    ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/
d158 3
a160 1
The GCC-2.95.2 bundle comes with Mingw32 libraries and headers.
d223 6
a228 21
enable the appropriate option in the makefile.  des_fcrypt() is not
bundled with the distribution due to US Government restrictions
on the export of cryptographic software.  Nevertheless, this routine
is part of the "libdes" library (written by Eric Young) which is widely
available worldwide, usually along with SSLeay ( for example, 
ftp://ftp.funet.fi/pub/crypt/mirrors/dsi/libdes/ ).  Set CRYPT_SRC to the
name of the file that implements des_fcrypt().  Alternatively, if
you have built a library that contains des_fcrypt(), you can set
CRYPT_LIB to point to the library name.  The location above contains
many versions of the "libdes" library, all with slightly different
implementations of des_fcrypt().  Older versions have a single,
self-contained file (fcrypt.c) that implements crypt(), so they may be
easier to use.  A patch against the fcrypt.c found in libdes-3.06 is
in des_fcrypt.patch.

An easier alternative may be to get the pre-patched and ready-to-use
fcrypt.c that can be found here:

    http://downloads.ActiveState.com/pub/staff/gsar/fcrypt.c
    ftp://ftp.ActiveState.com/pub/staff/gsar/fcrypt.c

d275 14
a288 2
C<link()> related tests (I<op/write.t>, I<op/stat.t> ...). Testing on
NTFS avoids these errors.
d705 8
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d7 1
a7 1
perlwin32 - Perl under Win32
d11 2
a12 2
These are instructions for building Perl under Windows (9x, NT and
2000).
d38 2
a39 1
port of Perl to Win32 platforms.  The resulting Perl requires no
d42 1
a42 1
following compilers:
d52 7
a58 1
This port currently supports MakeMaker (the set of modules that
d61 1
a61 1
See L<Usage Hints> below for general hints about this.
d63 1
a63 1
=head2 Setting Up
d70 2
a71 2
Visual C++ under Windows NT or 2000, nmake will work.  All other
builds need dmake.
d81 1
a81 1
http://www.wticorp.com/dmake/.  As of version 4.1PL1, the original
d94 2
a95 2
needless recompiles everytime dmake is invoked.  To avoid this, you
may use the script "sncfnmcs.pl" after a successful build.  It is
d109 1
a109 1
The surest way to build it is on Windows NT, using the cmd shell.
d135 6
d193 4
a196 3
versions of nmake that come with Visual C++, and a dmake "makefile.mk"
that will work for all supported compilers.  The defaults in the dmake
makefile are setup to build using the GCC compiler.
d216 2
a217 2
available worldwide, usually along with SSLeay (for example, 
"ftp://fractal.mta.ca/pub/crypto/SSLeay/DES/").  Set CRYPT_SRC to the
d227 6
d243 1
a243 1
perl56.dll at the perl toplevel, and various other extension dll's
d249 1
a249 1
=head2 Testing
d254 2
a255 3
There should be no test failures when running under Windows NT 4.0 or
Windows 2000.  Many tests I<will> fail under Windows 9x due to the inferior
command shell.
d278 10
d290 1
a290 1
=head2 Installation
d309 1
a309 1
=head2 Usage Hints
d475 1
a475 1
CPAN:
d477 1
a477 1
    http://www.cpan.org/authors/id/NI-S/Make-0.03.tar.gz
d572 1
a572 1
   http://www.cpan.org/authors/id/GSAR/libwin32-0.151.zip
d578 40
a617 1
=item Running Perl Scripts
a684 2
=back

d706 14
d753 1
a753 1
=item Nick Ing-Simmons E<lt>nick@@ni-s.u-net.comE<gt>
d780 3
a782 1
Last updated: 1 April 2001
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d17 1
a17 1
found in the top-level directory where the Perl distribution
d31 4
a34 4
README.os2 files, which each give a different set of rules to build
a Perl that will work on Win32 platforms.  Those two methods will
probably enable you to build a more Unix-compatible perl, but you
will also need to download and use various other build-time and
d73 1
a73 1
(This is a fixed version of original dmake sources obtained from
d75 1
a75 1
sources did not build as shipped, and had various other problems.
d81 10
d98 1
a98 1
The nmake Makefile also has known incompatibilites with the
d110 1
a110 1
(The make that Borland supplies is seriously crippled, and will not
d113 1
a113 1
See L/"Make"> above.
d118 1
a118 1
You will need to run the VCVARS32.BAT file usually found somewhere
d121 1
a121 1
You can also use dmake to build using Visual C++, provided:
d123 1
a123 1
under which the Visual C dmake configuration lives) in your environment,
d134 2
d140 26
a165 1
variables (usually run from a batch file).
d167 2
a168 1
You also need dmake.  See L</"Make"> above on how to get it.
d186 3
a188 3
Edit the makefile.mk (or Makefile, if using nmake) and change the values
of INST_DRV and INST_TOP.   You can also enable various build
flags.  These are explained in the makefiles.
d190 2
a191 2
You will have to make sure CCTYPE is set correctly, and CCHOME points
to wherever you installed your compiler.
d202 1
a202 1
available worldwide, usually along with SSLeay (for example:
d234 3
a236 3
No tests should typically fail when running Windows NT 4.0.  Under Windows
2000, test 22 in lib/open3.t is known to fail (cause still unknown).  Many
tests will fail under Windows 9x due to the inferior command shell.
d249 9
a257 1
(usually somewhere like C:\WINNT\SYSTEM32), and rerun the test.
d269 1
a269 1
C<$INST_TOP\$VERSION\bin>, and C<$INST_TOP\$VERSION\bin\$ARCHNAME>.
d332 18
a349 7
The crucial thing to understand about the "cmd" shell (which is
the default on Windows NT) is that it does not do any wildcard
expansions of command-line arguments (so wildcards need not be
quoted).  It also provides only rudimentary quoting.  The only
(useful) quote character is the double quote (").  It can be used to
protect spaces in arguments and other special characters.  The
Windows NT documentation has almost no description of how the
d351 17
a367 15
based on experiments:  The shell breaks arguments at spaces and
passes them to programs in argc/argv.  Doublequotes can be used
to prevent arguments with spaces in them from being split up.
You can put a double quote in an argument by escaping it with
a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the
argument will be stripped by the shell.

The file redirection characters "<", ">", and "|" cannot be quoted
by double quotes (there are probably more such).  Single quotes
will protect those three file redirection characters, but the
single quotes don't get stripped by the shell (just to make this
type of quoting completely useless).  The caret "^" has also
been observed to behave as a quoting character (and doesn't get
stripped by the shell also).
d407 7
d435 1
a435 1
may not provide a testsuite (so "$MAKE test" may not do anything, or
d440 1
a440 1
either get dmake from the location mentioned earlier, or get an
d488 5
a492 5
about it: 1) you can start using it right away 2) it is more powerful,
because it will do the right thing with a pattern like */*/*.c
3) you can decide whether you do/don't want to use it 4) you can
extend the method to add any customizations (or even entirely
different kinds of wildcard expansion).
d534 1
a534 1
extensions typically do not support those tools either, and therefore
d590 1
a590 1
4NT.INI file, or will need to execute "setdos /p*" in the 4DOS/NT
d644 1
a644 1
that will be portable to other environments, see L<perlport>
d669 1
a669 1
Gary Ng E<lt>71564.1743@@CompuServe.COME<gt>
d671 1
a671 1
Gurusamy Sarathy E<lt>gsar@@activestate.comE<gt>
d673 1
a673 1
Nick Ing-Simmons E<lt>nick@@ni-s.u-net.comE<gt>
d700 1
a700 1
Last updated: 22 March 2000
@


1.2
log
@perl5.005_03 (stock)
@
text
@d11 2
a12 7
These are instructions for building Perl under Windows NT (versions
3.51 or 4.0).  Currently, this port is reported to build
under Windows95 using the 4DOS shell--the default shell that infests
Windows95 will not work (see below).  Note this caveat is only about
B<building> perl.  Once built, you should be able to B<use> it on
either Win32 platform (modulo the problems arising from the inferior
command shell).
d30 1
a30 1
a perl that will work on Windows NT:  the README.cygwin32 and
d45 1
a45 2
      Mingw32 with EGCS		versions 1.0.2, 1.1
      Mingw32 with GCC		version 2.8.1
d47 3
a49 2
The last two of these are high quality freeware compilers.  Support
for them is still experimental.
d60 21
d86 1
a86 5
shell.  The Makefile also has known incompatibilites with the "command.com"
shell that comes with Windows95, so building under Windows95 should
be considered "unsupported".  However, there have been reports of successful
build attempts using 4DOS/NT version 6.01 under Windows95, using dmake, but
your mileage may vary.
d88 5
a92 1
The surest way to build it is on WindowsNT, using the cmd shell.
d99 1
a99 2
If you are using the Borland compiler, you will need dmake, a freely
available make that has very nice macro features and parallelability.
d103 1
a103 6
A port of dmake for win32 platforms is available from:

    http://www-personal.umich.edu/~gsar/dmake-4.1-win32.zip

Fetch and install dmake somewhere on your path (follow the instructions
in the README.NOW file).
d107 1
a107 1
The NMAKE that comes with Visual C++ will suffice for building.
d118 1
a118 1
=item Mingw32 with EGCS or GCC
d120 1
a120 1
ECGS binaries can be downloaded from:
d124 1
a124 3
GCC-2.8.1 binaries are available from:

    http://agnes.dida.physik.uni-essen.de/~janjaap/mingw32/
d126 3
a128 4
You only need either one of those, not both.  Both bundles come with
Mingw32 libraries and headers.  While both of them work to build perl,
the EGCS binaries are currently favored by the maintainers, since they
come with more up-to-date Mingw32 libraries.
d130 1
a130 5
Make sure you install the binaries as indicated in the web sites
above.  You will need to set up a few environment variables (usually
run from a batch file).

You also need dmake.  See L</"Borland C++"> above on how to get it.
d142 1
a142 1
versions of NMAKE that come with Visual C++, and a dmake "makefile.mk"
d144 1
a144 1
makefile are setup to build using the Borland compiler.
d150 1
a150 1
flags.
d152 2
a153 22
Beginning with version 5.005, there is experimental support for building
a perl interpreter that supports the Perl Object abstraction (courtesy
ActiveState Tool Corp.)  PERL_OBJECT uses C++, and the binaries are
therefore incompatible with the regular C build.  However, the
PERL_OBJECT build does provide something called the C-API, for linking
it with extensions that won't compile under PERL_OBJECT. Using the C_API
is typically requested through:

    perl Makefile.PL CAPI=TRUE

PERL_OBJECT requires VC++ 5.0 (Service Pack 3 recommended) or later. It
is not yet supported under GCC or EGCS.  WARNING:  Binaries built with
PERL_OBJECT enabled are B<not> compatible with binaries built without.
Perl installs PERL_OBJECT binaries under a distinct architecture name,
so they B<can> coexist, though.

Beginning with version 5.005, there is experimental support for building
a perl interpreter that is capable of native threading.  Binaries built
with thread support enabled are also incompatible with the vanilla C
build.  WARNING:  Binaries built with threads enabled are B<not> compatible
with binaries built without.  Perl installs threads enabled binaries under
a distinct architecture name, so they B<can> coexist, though.
d155 3
a157 2
At the present time, you cannot enable both threading and PERL_OBJECT.
You can get only one of them in a Perl interpreter.
d163 1
a163 1
is part of the "libdes" library (written by Ed Young) which is widely
d178 1
a178 9
You will also have to make sure CCHOME points to wherever you installed
your compiler.

The default value for CCHOME in the makefiles for Visual C++
may not be correct for some versions.  Make sure the default exists
and is valid.

Other options are explained in the makefiles.  Be sure to read the
instructions carefully.
d185 3
a187 22
perl.dll (or perlcore.dll), and perlglob.exe at the perl toplevel, and
various other extension dll's under the lib\auto directory.  If the build
fails for any reason, make sure you have done the previous steps correctly.

The build process may produce "harmless" compiler warnings (more or
less copiously, depending on how picky your compiler gets).  The
maintainers are aware of these warnings, thankyouverymuch. :)

When building using Visual C++, a perl95.exe will also get built.  This
executable is only needed on Windows95, and should be used instead of
perl.exe, and then only if you want sockets to work properly on Windows95.
This is necessitated by a bug in the Microsoft C Runtime that cannot be
worked around in the "normal" perl.exe.  perl95.exe gets built with its
own private copy of the C Runtime that is not accessible to extensions
(which see the DLL version of the CRT).  Be aware, therefore, that this
perl95.exe will have esoteric problems with extensions like perl/Tk that
themselves use the C Runtime heavily, or want to free() pointers
malloc()-ed by perl.

You can avoid the perl95.exe problems completely if you either enable
USE_PERLCRT with Visual C++, or use Borland C++ for building perl.  In
those cases, perl95.exe is not needed and will not be built.
d194 1
a194 1
the testsuite (many tests will be skipped, and but no test should fail).
d196 7
a202 3
If some tests do fail, it may be because you are using a different command
shell than the native "cmd.exe", or because you are building from a path
that contains spaces.  So don't do that.
a212 4
The Visual C runtime apparently has a bug that causes posix.t to fail
test#2.  This usually happens only if you extracted the files in text
mode.  Enable the USE_PERLCRT option in the Makefile to fix this bug.

d226 5
a230 1
    set PATH c:\perl\5.005\bin;c:\perl\5.005\bin\MSWin32-x86;%PATH%
d232 1
d258 6
a263 4
    lib-$]		version-specific path to add to @@INC
    lib			path to add to @@INC
    sitelib-$]		version-specific path to add to @@INC
    sitelib		path to add to @@INC
d267 1
a267 1
of perl you want to honor that entry, e.g. C<5.00502>.  Paths must be
d272 6
a277 19
By default, perl spawns an external program to do file globbing.
The install process installs both a perlglob.exe and a perlglob.bat
that perl can use for this purpose.  Note that with the default
installation, perlglob.exe will be found by the system before
perlglob.bat.

perlglob.exe relies on the argv expansion done by the C Runtime of
the particular compiler you used, and therefore behaves very
differently depending on the Runtime used to build it.  To preserve
compatiblity, perlglob.bat (a perl script that can be used portably)
is installed.  Besides being portable, perlglob.bat also offers
enhanced globbing functionality.

If you want perl to use perlglob.bat instead of perlglob.exe, just
delete perlglob.exe from the install location (or move it somewhere
perl cannot find).  Using File::DosGlob.pm (which implements the core
functionality of perlglob.bat) to override the internal CORE::glob()
works about 10 times faster than spawing perlglob.exe, and you should
take this approach when writing new modules.  See File::DosGlob for
d284 1
a284 1
with what Windows NT offers by way of a command shell.
d345 1
a345 1
Discovering the usefulness of the "command.com" shell on Windows95
d352 6
a357 1
Look in http://www.perl.com/ for more information on CPAN.
d382 3
a384 1
    http://www.perl.com/CPAN/authors/id/NI-S/Make-0.03.tar.gz
d477 1
a477 1
   http://www.perl.com/CPAN/authors/id/GSAR/libwin32-0.14.zip
d574 6
a579 19
An effort has been made to ensure that the DLLs produced by the two
supported compilers are compatible with each other (despite the
best efforts of the compiler vendors).  Extension binaries produced
by one compiler should also coexist with a perl binary built by
a different compiler.  In order to accomplish this, PERL.DLL provides
a layer of runtime code that uses the C Runtime that perl was compiled
with.  Extensions which include "perl.h" will transparently access
the functions in this layer, thereby ensuring that both perl and
extensions use the same runtime functions.

If you have had prior exposure to Perl on Unix platforms, you will notice
this port exhibits behavior different from what is documented.  Most of the
differences fall under one of these categories.  We do not consider
any of them to be serious limitations (especially when compared to the
limited nature of some of the Win32 OSes themselves :)

=over 8

=item *
d581 2
a582 4
C<stat()> and C<lstat()> functions may not behave as documented.  They
may return values that bear no resemblance to those reported on Unix
platforms, and some fields (like the the one for inode) may be completely
bogus.
d584 2
a585 44
=item *

The following functions are currently unavailable: C<fork()>,
C<dump()>, C<chown()>, C<link()>, C<symlink()>, C<chroot()>,
C<setpgrp()> and related security functions, C<setpriority()>,
C<getpriority()>, C<syscall()>, C<fcntl()>, C<getpw*()>,
C<msg*()>, C<shm*()>, C<sem*()>, C<alarm()>, C<socketpair()>,
C<*netent()>, C<*protoent()>, C<*servent()>, C<*hostent()>,
C<getnetby*()>.
This list is possibly incomplete.

=item *

Various C<socket()> related calls are supported, but they may not
behave as on Unix platforms.

=item *

The four-argument C<select()> call is only supported on sockets.

=item *

The C<ioctl()> call is only supported on sockets (where it provides the
functionality of ioctlsocket() in the Winsock API).

=item *

Failure to spawn() a subprocess is indicated by setting $? to "255 << 8".
C<$?> is set in a way compatible with Unix (i.e. the exitstatus of the
subprocess is obtained by "$? >> 8", as described in the documentation).

=item *

You can expect problems building modules available on CPAN if you
build perl itself with -DUSE_THREADS.  These problems should be resolved
as we get closer to 5.005.

=item *

C<utime()>, C<times()> and process-related functions may not
behave as described in the documentation, and some of the
returned values or effects may be bogus.

=item *
a594 24
=item *

C<kill()> is implemented, but doesn't have the semantics of
C<raise()>, i.e. it doesn't send a signal to the identified process
like it does on Unix platforms.  Instead it immediately calls
C<TerminateProcess(process,signal)>.  Thus the signal argument is
used to set the exit-status of the terminated process.  This behavior
may change in future.

=item *

File globbing may not behave as on Unix platforms.  In particular,
if you don't use perlglob.bat for globbing, it will understand
wildcards only in the filename component (and not in the pathname).
In other words, something like "print <*/*.pl>" will not print all the
perl scripts in all the subdirectories one level under the current one
(like it does on UNIX platforms).  perlglob.exe is also dependent on
the particular implementation of wildcard expansion in the vendor
libraries used to build it (which varies wildly at the present time).
Using perlglob.bat (or File::DosGlob) avoids these limitations, but
still only provides DOS semantics (read "warts") for globbing.

=back

d605 1
a605 1
Gurusamy Sarathy E<lt>gsar@@umich.eduE<gt>
d621 2
a622 4
at the time.

Nick Ing-Simmons and Gurusamy Sarathy have made numerous and
sundry hacks since then.
d630 5
a634 1
Last updated: 18 January 1999
a636 1

@


1.1
log
@perl 5.004_04
@
text
@d1 758
a758 583
If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see pod/perlpod.pod) which is
specially designed to be readable as is.

=head1 NAME

perlwin32 - Perl under Win32

=head1 SYNOPSIS

These are instructions for building Perl under Windows NT (versions
3.51 or 4.0), using Visual C++ (versions 2.0 through 5.0) or Borland
C++ (version 5.x).  Currently, this port may also build under Windows95,
but you can expect problems stemming from the unmentionable command
shell that infests that platform.  Note this caveat is only about
B<building> perl.  Once built, you should be able to B<use> it on
either Win32 platform (modulo the problems arising from the inferior
command shell).

=head1 DESCRIPTION

Before you start, you should glance through the README file
found in the top-level directory where the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.

Also make sure you read L<BUGS AND CAVEATS> below for the
known limitations of this port.

The INSTALL file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
"Configure".

You may also want to look at two other options for building
a perl that will work on Windows NT:  the README.cygwin32 and
README.os2 files, which each give a different set of rules to build
a Perl that will work on Win32 platforms.  Those two methods will
probably enable you to build a more Unix-compatible perl, but you
will also need to download and use various other build-time and
run-time support software described in those files.

This set of instructions is meant to describe a so-called "native"
port of Perl to Win32 platforms.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using either the
Microsoft Visual C++ compiler, or the Borland C++ compiler.  The
ultimate goal is to support the other major compilers that can
generally be used to build Win32 applications.

This port currently supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the CPAN sites.
See L<Usage Hints> below for general hints about this.

=head2 Setting Up

=over 4

=item Command Shell

Use the default "cmd" shell that comes with NT.  In particular, do
*not* use the 4DOS/NT shell.  The Makefile has commands that are not
compatible with that shell.  The Makefile also has known
incompatibilites with the default shell that comes with Windows95,
so building under Windows95 should be considered "unsupported".

=item Borland C++

If you are using the Borland compiler, you will need dmake, a freely
available make that has very nice macro features and parallelability.
(The make that Borland supplies is seriously crippled, and will not
work for MakeMaker builds--if you *have* to bug someone about this,
I suggest you bug Borland to fix their make :)

A port of dmake for win32 platforms is available from
"http://www-personal.umich.edu/~gsar/dmake-4.0-win32.tar.gz".
Fetch and install dmake somewhere on your path.  Also make sure you
copy the Borland dmake.ini file to some location where you keep
*.ini files.  If you use the binary that comes with the above port, you
will need to set INIT in your environment to the directory where you
put the dmake.ini file.

=item Microsoft Visual C++

The NMAKE that comes with Visual C++ will suffice for building.
If you did not choose to always initialize the Visual C++ compilation
environment variables when you installed Visual C++ on your system, you
will need to run the VCVARS32.BAT file usually found somewhere like
C:\MSDEV4.2\BIN.  This will set your build environment.

You can also use dmake to build using Visual C++, provided: you
copied the dmake.ini for Visual C++; set INIT to point to the
directory where you put it, as above; and edit win32/config.vc
and change "make=nmake" to "make=dmake".  The last step is only
essential if you want to use dmake to be your default make for
building extensions using MakeMaker.

=item Permissions

Depending on how you extracted the distribution, you have to make sure
some of the files are writable by you.  The easiest way to make sure of
this is to execute:

	attrib -R *.* /S

from the perl toplevel directory.  You don't I<have> to do this if you
used the right tools to extract the files in the standard distribution,
but it doesn't hurt to do so.

=back

=head2 Building

=over 4

=item *

Make sure you are in the "win32" subdirectory under the perl toplevel.
This directory contains a "Makefile" that will work with
versions of NMAKE that come with Visual C++ ver. 2.0 and above, and
a dmake "makefile.mk" that will work for both Borland and Visual C++
builds.  The defaults in the dmake makefile are setup to build using the
Borland compiler.

=item *

Edit the Makefile (or makefile.mk, if using dmake) and change the values
of INST_DRV and INST_TOP if you want perl to be installed in a location
other than "C:\PERL".  If you are using Visual C++ ver. 2.0, uncomment
the line that sets "CCTYPE=MSVC20".

You will also have to make sure CCHOME points to wherever you installed
your compiler.

=item *

Type "nmake" (or "dmake" if you are using that make).

This should build everything.  Specifically, it will create perl.exe,
perl.dll, and perlglob.exe at the perl toplevel, and various other
extension dll's under the lib\auto directory.  If the build fails for
any reason, make sure you have done the previous steps correctly.

The build process may produce "harmless" compiler warnings (more or
less copiously, depending on how picky your compiler gets).  The
maintainers are aware of these warnings, thankyouverymuch. :)

When building using Visual C++, a perl95.exe will also get built.  This
executable is only needed on Windows95, and should be used instead of
perl.exe, and then only if you want sockets to work properly on Windows95.
This is necessitated by a bug in the Microsoft C Runtime that cannot be
worked around in the "normal" perl.exe.  Again, if this bugs you, please
bug Microsoft :). perl95.exe gets built with its own private copy of the
C Runtime that is not accessible to extensions (which see the DLL version
of the CRT).  Be aware, therefore, that this perl95.exe will have
esoteric problems with extensions like perl/Tk that themselves use the C
Runtime heavily, or want to free() pointers malloc()-ed by perl.

You can avoid the perl95.exe problems completely if you use Borland
C++ for building perl (perl95.exe is not needed and will not be built
in that case).

=back

=head2 Testing

Type "nmake test" (or "dmake test").  This will run most of the tests from
the testsuite (many tests will be skipped, and but no test should fail).

If some tests do fail, it may be because you are using a different command
shell than the native "cmd.exe".

If you used the Borland compiler, you may see a failure in op/taint.t
arising from the inability to find the Borland Runtime DLLs on the system
default path.  You will need to copy the DLLs reported by the messages
from where Borland chose to install it, into the Windows system directory
(usually somewhere like C:\WINNT\SYSTEM32), and rerun the test.

Please report any other failures as described under L<BUGS AND CAVEATS>.

=head2 Installation

Type "nmake install" (or "dmake install").  This will put the newly
built perl and the libraries under "C:\perl" (actually whatever you set
C<INST_TOP> to in the Makefile).  It will also install the pod
documentation under C<$INST_TOP\lib\pod> and HTML versions of the same
under C<$INST_TOP\lib\pod\html>.  To use the Perl you just installed,
set your PATH environment variable to "C:\perl\bin" (or C<$INST_TOP\bin>,
if you changed the default as above).

=head2 Usage Hints

=over 4

=item Environment Variables

The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your PATH variable).

If you put extensions in unusual places, you can set PERL5LIB
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in the perlrun podpage.

Sometime in the future, some of the configuration information
for perl will be moved into the Windows registry.

=item File Globbing

By default, perl spawns an external program to do file globbing.
The install process installs both a perlglob.exe and a perlglob.bat
that perl can use for this purpose.  Note that with the default
installation, perlglob.exe will be found by the system before
perlglob.bat.

perlglob.exe relies on the argv expansion done by the C Runtime of
the particular compiler you used, and therefore behaves very
differently depending on the Runtime used to build it.  To preserve
compatiblity, perlglob.bat (a perl script/module that can be
used portably) is installed.  Besides being portable, perlglob.bat
also offers enhanced globbing functionality.

If you want perl to use perlglob.bat instead of perlglob.exe, just
delete perlglob.exe from the install location (or move it somewhere
perl cannot find).  Using File::DosGlob.pm (which is the same
as perlglob.bat) to override the internal CORE::glob() works about 10
times faster than spawing perlglob.exe, and you should take this
approach when writing new modules.  See File::DosGlob for details.

=item Using perl from the command line

If you are accustomed to using perl from various command-line
shells found in UNIX environments, you will be less than pleased
with what Windows NT offers by way of a command shell.

The crucial thing to understand about the "cmd" shell (which is
the default on Windows NT) is that it does not do any wildcard
expansions of command-line arguments (so wildcards need not be
quoted).  It also provides only rudimentary quoting.  The only
(useful) quote character is the double quote (").  It can be used to
protect spaces in arguments and other special characters.  The
Windows NT documentation has almost no description of how the
quoting rules are implemented, but here are some general observations
based on experiments:  The shell breaks arguments at spaces and
passes them to programs in argc/argv.  Doublequotes can be used
to prevent arguments with spaces in them from being split up.
You can put a double quote in an argument by escaping it with
a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the
argument will be stripped by the shell.

The file redirection characters "<", ">", and "|" cannot be quoted
by double quotes (there are probably more such).  Single quotes
will protect those three file redirection characters, but the
single quotes don't get stripped by the shell (just to make this
type of quoting completely useless).  The caret "^" has also
been observed to behave as a quoting character (and doesn't get
stripped by the shell also).

Here are some examples of usage of the "cmd" shell:

This prints two doublequotes:

    perl -e "print '\"\"' "

This does the same:

    perl -e "print \"\\\"\\\"\" "

This prints "bar" and writes "foo" to the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" > blurch

This prints "foo" ("bar" disappears into nowhereland):

    perl -e "print 'foo'; print STDERR 'bar'" 2> nul

This prints "bar" and writes "foo" into the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 1> blurch

This pipes "foo" to the "less" pager and prints "bar" on the console:

    perl -e "print 'foo'; print STDERR 'bar'" | less

This pipes "foo\nbar\n" to the less pager:

    perl -le "print 'foo'; print STDERR 'bar'" 2>&1 | less

This pipes "foo" to the pager and writes "bar" in the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch | less


Discovering the usefulness of the "command.com" shell on Windows95
is left as an exercise to the reader :)

=item Building Extensions

The Comprehensive Perl Archive Network (CPAN) offers a wealth
of extensions, some of which require a C compiler to build.
Look in http://www.perl.com/ for more information on CPAN.

Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:

    perl Makefile.PL
    $MAKE
    $MAKE test
    $MAKE install

where $MAKE stands for NMAKE or DMAKE.  Some extensions may not
provide a testsuite (so "$MAKE test" may not do anything, or fail),
but most serious ones do.

If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation.

If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.

=item Win32 Specific Extensions

A number of extensions specific to the Win32 platform are available
from CPAN.  You may find that many of these extensions are meant to
be used under the Activeware port of Perl, which used to be the only
native port for the Win32 platform.  Since the Activeware port does not
have adequate support for Perl's extension building tools, these
extensions typically do not support those tools either, and therefore
cannot be built using the generic steps shown in the previous section.

To ensure smooth transitioning of existing code that uses the
Activeware port, there is a bundle of Win32 extensions that contains
all of the Activeware extensions and most other Win32 extensions from
CPAN in source form, along with many added bugfixes, and with MakeMaker
support.  This bundle is available at:

   http://www.perl.com/CPAN/authors/id/GSAR/libwin32-0.08.tar.gz

See the README in that distribution for building and installation
instructions.  Look for later versions that may be available at the
same location.

It is expected that authors of Win32 specific extensions will begin
distributing their work in MakeMaker compatible form subsequent to
the 5.004 release of perl, at which point the need for a dedicated
bundle such as the above should diminish.

=item Running Perl Scripts

Perl scripts on UNIX use the "#!" (a.k.a "shebang") line to
indicate to the OS that it should execute the file using perl.
Win32 has no comparable means to indicate arbitrary files are
executables.

Instead, all available methods to execute plain text files on
Win32 rely on the file "extension".  There are three methods
to use this to execute perl scripts:

=over 8

=item 1

There is a facility called "file extension associations" that will
work in Windows NT 4.0.  This can be manipulated via the two
commands "assoc" and "ftype" that come standard with Windows NT
4.0.  Type "ftype /?" for a complete example of how to set this
up for perl scripts (Say what?  You thought Windows NT wasn't
perl-ready? :).

=item 2

Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the OS, may be used.  The install process
makes available the "pl2bat.bat" script which can be used to wrap
perl scripts into batch files.  For example:

	pl2bat foo.pl

will create the file "FOO.BAT".  Note "pl2bat" strips any
.pl suffix and adds a .bat suffix to the generated file.

If you use the 4DOS/NT or similar command shell, note that
"pl2bat" uses the "%*" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a "ParameterChar = *" statement in their
4NT.INI file, or will need to execute "setdos /p*" in the 4DOS/NT
startup file to enable this to work.

=item 3

Using "pl2bat" has a few problems:  the file name gets changed,
so scripts that rely on C<$0> to find what they must do may not
run properly; running "pl2bat" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.

A script called "runperl.bat" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it "foo.bat", it will run the file "foo" when it is
executed.  Since you can run batch files on Win32 platforms simply
by typing the name (without the extension), this effectively
runs the file "foo", when you type either "foo" or "foo.bat".
With this method, "foo.bat" can even be in a different location
than the file "foo", as long as "foo" is available somewhere on
the PATH.  If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying "runperl.bat".

Here's a diversion:  copy "runperl.bat" to "runperl", and type
"runperl".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,"lrepnur" eteled :tniH

=back

=item Miscellaneous Things

A full set of HTML documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.

C<perldoc> is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like C<less> (recent versions of which have Win32 support).  You may
have to set the PAGER environment variable to use a specific pager.
"perldoc -f foo" will print information about the perl operator
"foo".

If you find bugs in perl, you can run C<perlbug> to create a
bug report (you may have to send it manually if C<perlbug> cannot
find a mailer on your system).

=back

=head1 BUGS AND CAVEATS

This port should be considered beta quality software at the present
time because some details are still in flux and there may be
changes in any of these areas: build process, installation structure,
supported utilities/modules, and supported perl functionality.
In particular, functionality specific to the Win32 environment may
ultimately be supported as either core modules or extensions.  The
beta status implies, among other things, that you should be prepared
to recompile extensions when binary incompatibilites arise due to
changes in the internal structure of the code.

An effort has been made to ensure that the DLLs produced by the two
supported compilers are compatible with each other (despite the
best efforts of the compiler vendors).  Extension binaries produced
by one compiler should also coexist with a perl binary built by
a different compiler.  In order to accomplish this, PERL.DLL provides
a layer of runtime code that uses the C Runtime that perl was compiled
with.  Extensions which include "perl.h" will transparently access
the functions in this layer, thereby ensuring that both perl and
extensions use the same runtime functions.

If you have had prior exposure to Perl on Unix platforms, you will notice
this port exhibits behavior different from what is documented.  Most of the
differences fall under one of these categories.  We do not consider
any of them to be serious limitations (especially when compared to the
limited nature of some of the Win32 OSes themselves :)

=over 8

=item *

C<stat()> and C<lstat()> functions may not behave as documented.  They
may return values that bear no resemblance to those reported on Unix
platforms, and some fields (like the the one for inode) may be completely
bogus.

=item *

The following functions are currently unavailable: C<fork()>,
C<dump()>, C<chown()>, C<link()>, C<symlink()>, C<chroot()>,
C<setpgrp()>, C<getpgrp()>, C<setpriority()>, C<getpriority()>,
C<syscall()>, C<fcntl()>.  This list is possibly very incomplete.

=item *

crypt() is not available due to silly export restrictions.  It may
become available when the laws change.  Meanwhile, look in CPAN for
extensions that provide it.

=item *

Various C<socket()> related calls are supported, but they may not
behave as on Unix platforms.

=item *

The four-argument C<select()> call is only supported on sockets.

=item *

C<$?> ends up with the exitstatus of the subprocess (this is different
from Unix, where the exitstatus is actually given by "$? >> 8").
Failure to spawn() the subprocess is indicated by setting $? to 
"255<<8".  This is subject to change.

=item *

Building modules available on CPAN is mostly supported, but this
hasn't been tested much yet.  Expect strange problems, and be
prepared to deal with the consequences.

=item *

C<utime()>, C<times()> and process-related functions may not
behave as described in the documentation, and some of the
returned values or effects may be bogus.

=item *

Signal handling may not behave as on Unix platforms (where it
doesn't exactly "behave", either :).  For instance, calling C<die()>
or C<exit()> from signal handlers will cause an exception, since most
implementations of C<signal()> on Win32 are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.

=item *

File globbing may not behave as on Unix platforms.  In particular,
if you don't use perlglob.bat for globbing, it will understand
wildcards only in the filename component (and not in the pathname).
In other words, something like "print <*/*.pl>" will not print all the
perl scripts in all the subdirectories one level under the current one
(like it does on UNIX platforms).  perlglob.exe is also dependent on
the particular implementation of wildcard expansion in the vendor
libraries used to build it (which varies wildly at the present time).
Using perlglob.bat (or File::DosGlob) avoids these limitations, but
still only provides DOS semantics (read "warts") for globbing.

=back

Please send detailed descriptions of any problems and solutions that 
you may find to <F<perlbug@@perl.com>>, along with the output produced
by C<perl -V>.

=head1 AUTHORS

=over 4

Gary Ng E<lt>71564.1743@@CompuServe.COME<gt>

Gurusamy Sarathy E<lt>gsar@@umich.eduE<gt>

Nick Ing-Simmons E<lt>nick@@ni-s.u-net.comE<gt>

=back

This document is maintained by Gurusamy Sarathy.

=head1 SEE ALSO

L<perl>

=head1 HISTORY

This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.

Nick Ing-Simmons and Gurusamy Sarathy have made numerous and
sundry hacks since then.

Borland support was added in 5.004_01 (Gurusamy Sarathy).

Last updated: 25 July 1997

=cut

@


1.1.1.1
log
@perl5.005_03
@
text
@d1 583
a583 758
If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see pod/perlpod.pod) which is
specially designed to be readable as is.

=head1 NAME

perlwin32 - Perl under Win32

=head1 SYNOPSIS

These are instructions for building Perl under Windows NT (versions
3.51 or 4.0).  Currently, this port is reported to build
under Windows95 using the 4DOS shell--the default shell that infests
Windows95 will not work (see below).  Note this caveat is only about
B<building> perl.  Once built, you should be able to B<use> it on
either Win32 platform (modulo the problems arising from the inferior
command shell).

=head1 DESCRIPTION

Before you start, you should glance through the README file
found in the top-level directory where the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.

Also make sure you read L<BUGS AND CAVEATS> below for the
known limitations of this port.

The INSTALL file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
"Configure".

You may also want to look at two other options for building
a perl that will work on Windows NT:  the README.cygwin32 and
README.os2 files, which each give a different set of rules to build
a Perl that will work on Win32 platforms.  Those two methods will
probably enable you to build a more Unix-compatible perl, but you
will also need to download and use various other build-time and
run-time support software described in those files.

This set of instructions is meant to describe a so-called "native"
port of Perl to Win32 platforms.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using one of the
following compilers:

      Borland C++		version 5.02 or later
      Microsoft Visual C++	version 4.2 or later
      Mingw32 with EGCS		versions 1.0.2, 1.1
      Mingw32 with GCC		version 2.8.1

The last two of these are high quality freeware compilers.  Support
for them is still experimental.

This port currently supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the CPAN sites.
See L<Usage Hints> below for general hints about this.

=head2 Setting Up

=over 4

=item Command Shell

Use the default "cmd" shell that comes with NT.  Some versions of the
popular 4DOS/NT shell have incompatibilities that may cause you trouble.
If the build fails under that shell, try building again with the cmd
shell.  The Makefile also has known incompatibilites with the "command.com"
shell that comes with Windows95, so building under Windows95 should
be considered "unsupported".  However, there have been reports of successful
build attempts using 4DOS/NT version 6.01 under Windows95, using dmake, but
your mileage may vary.

The surest way to build it is on WindowsNT, using the cmd shell.

Make sure the path to the build directory does not contain spaces.  The
build usually works in this circumstance, but some tests will fail.

=item Borland C++

If you are using the Borland compiler, you will need dmake, a freely
available make that has very nice macro features and parallelability.
(The make that Borland supplies is seriously crippled, and will not
work for MakeMaker builds.)

A port of dmake for win32 platforms is available from:

    http://www-personal.umich.edu/~gsar/dmake-4.1-win32.zip

Fetch and install dmake somewhere on your path (follow the instructions
in the README.NOW file).

=item Microsoft Visual C++

The NMAKE that comes with Visual C++ will suffice for building.
You will need to run the VCVARS32.BAT file usually found somewhere
like C:\MSDEV4.2\BIN.  This will set your build environment.

You can also use dmake to build using Visual C++, provided:
you set OSRELEASE to "microsft" (or whatever the directory name
under which the Visual C dmake configuration lives) in your environment,
and edit win32/config.vc to change "make=nmake" into "make=dmake".  The
latter step is only essential if you want to use dmake as your default
make for building extensions using MakeMaker.

=item Mingw32 with EGCS or GCC

ECGS binaries can be downloaded from:

    ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/

GCC-2.8.1 binaries are available from:

    http://agnes.dida.physik.uni-essen.de/~janjaap/mingw32/

You only need either one of those, not both.  Both bundles come with
Mingw32 libraries and headers.  While both of them work to build perl,
the EGCS binaries are currently favored by the maintainers, since they
come with more up-to-date Mingw32 libraries.

Make sure you install the binaries as indicated in the web sites
above.  You will need to set up a few environment variables (usually
run from a batch file).

You also need dmake.  See L</"Borland C++"> above on how to get it.

=back

=head2 Building

=over 4

=item *

Make sure you are in the "win32" subdirectory under the perl toplevel.
This directory contains a "Makefile" that will work with
versions of NMAKE that come with Visual C++, and a dmake "makefile.mk"
that will work for all supported compilers.  The defaults in the dmake
makefile are setup to build using the Borland compiler.

=item *

Edit the makefile.mk (or Makefile, if using nmake) and change the values
of INST_DRV and INST_TOP.   You can also enable various build
flags.

Beginning with version 5.005, there is experimental support for building
a perl interpreter that supports the Perl Object abstraction (courtesy
ActiveState Tool Corp.)  PERL_OBJECT uses C++, and the binaries are
therefore incompatible with the regular C build.  However, the
PERL_OBJECT build does provide something called the C-API, for linking
it with extensions that won't compile under PERL_OBJECT. Using the C_API
is typically requested through:

    perl Makefile.PL CAPI=TRUE

PERL_OBJECT requires VC++ 5.0 (Service Pack 3 recommended) or later. It
is not yet supported under GCC or EGCS.  WARNING:  Binaries built with
PERL_OBJECT enabled are B<not> compatible with binaries built without.
Perl installs PERL_OBJECT binaries under a distinct architecture name,
so they B<can> coexist, though.

Beginning with version 5.005, there is experimental support for building
a perl interpreter that is capable of native threading.  Binaries built
with thread support enabled are also incompatible with the vanilla C
build.  WARNING:  Binaries built with threads enabled are B<not> compatible
with binaries built without.  Perl installs threads enabled binaries under
a distinct architecture name, so they B<can> coexist, though.

At the present time, you cannot enable both threading and PERL_OBJECT.
You can get only one of them in a Perl interpreter.

If you have either the source or a library that contains des_fcrypt(),
enable the appropriate option in the makefile.  des_fcrypt() is not
bundled with the distribution due to US Government restrictions
on the export of cryptographic software.  Nevertheless, this routine
is part of the "libdes" library (written by Ed Young) which is widely
available worldwide, usually along with SSLeay (for example:
"ftp://fractal.mta.ca/pub/crypto/SSLeay/DES/").  Set CRYPT_SRC to the
name of the file that implements des_fcrypt().  Alternatively, if
you have built a library that contains des_fcrypt(), you can set
CRYPT_LIB to point to the library name.  The location above contains
many versions of the "libdes" library, all with slightly different
implementations of des_fcrypt().  Older versions have a single,
self-contained file (fcrypt.c) that implements crypt(), so they may be
easier to use.  A patch against the fcrypt.c found in libdes-3.06 is
in des_fcrypt.patch.

Perl will also build without des_fcrypt(), but the crypt() builtin will
fail at run time.

You will also have to make sure CCHOME points to wherever you installed
your compiler.

The default value for CCHOME in the makefiles for Visual C++
may not be correct for some versions.  Make sure the default exists
and is valid.

Other options are explained in the makefiles.  Be sure to read the
instructions carefully.

=item *

Type "dmake" (or "nmake" if you are using that make).

This should build everything.  Specifically, it will create perl.exe,
perl.dll (or perlcore.dll), and perlglob.exe at the perl toplevel, and
various other extension dll's under the lib\auto directory.  If the build
fails for any reason, make sure you have done the previous steps correctly.

The build process may produce "harmless" compiler warnings (more or
less copiously, depending on how picky your compiler gets).  The
maintainers are aware of these warnings, thankyouverymuch. :)

When building using Visual C++, a perl95.exe will also get built.  This
executable is only needed on Windows95, and should be used instead of
perl.exe, and then only if you want sockets to work properly on Windows95.
This is necessitated by a bug in the Microsoft C Runtime that cannot be
worked around in the "normal" perl.exe.  perl95.exe gets built with its
own private copy of the C Runtime that is not accessible to extensions
(which see the DLL version of the CRT).  Be aware, therefore, that this
perl95.exe will have esoteric problems with extensions like perl/Tk that
themselves use the C Runtime heavily, or want to free() pointers
malloc()-ed by perl.

You can avoid the perl95.exe problems completely if you either enable
USE_PERLCRT with Visual C++, or use Borland C++ for building perl.  In
those cases, perl95.exe is not needed and will not be built.

=back

=head2 Testing

Type "dmake test" (or "nmake test").  This will run most of the tests from
the testsuite (many tests will be skipped, and but no test should fail).

If some tests do fail, it may be because you are using a different command
shell than the native "cmd.exe", or because you are building from a path
that contains spaces.  So don't do that.

If you are running the tests from a emacs shell window, you may see
failures in op/stat.t.  Run "dmake test-notty" in that case.

If you're using the Borland compiler, you may see a failure in op/taint.t
arising from the inability to find the Borland Runtime DLLs on the system
default path.  You will need to copy the DLLs reported by the messages
from where Borland chose to install it, into the Windows system directory
(usually somewhere like C:\WINNT\SYSTEM32), and rerun the test.

The Visual C runtime apparently has a bug that causes posix.t to fail
test#2.  This usually happens only if you extracted the files in text
mode.  Enable the USE_PERLCRT option in the Makefile to fix this bug.

Please report any other failures as described under L<BUGS AND CAVEATS>.

=head2 Installation

Type "dmake install" (or "nmake install").  This will put the newly
built perl and the libraries under whatever C<INST_TOP> points to in the
Makefile.  It will also install the pod documentation under
C<$INST_TOP\$VERSION\lib\pod> and HTML versions of the same under
C<$INST_TOP\$VERSION\lib\pod\html>.  To use the Perl you just installed,
you will need to add two components to your PATH environment variable,
C<$INST_TOP\$VERSION\bin>, and C<$INST_TOP\$VERSION\bin\$ARCHNAME>.
For example:

    set PATH c:\perl\5.005\bin;c:\perl\5.005\bin\MSWin32-x86;%PATH%


=head2 Usage Hints

=over 4

=item Environment Variables

The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your PATH variable).

If you put extensions in unusual places, you can set PERL5LIB
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in L<perlrun>.

You can also control the shell that perl uses to run system() and
backtick commands via PERL5SHELL.  See L<perlrun>.

Perl does not depend on the registry, but it can look up certain default
values if you choose to put them there.  Perl attempts to read entries from
C<HKEY_CURRENT_USER\Software\Perl> and C<HKEY_LOCAL_MACHINE\Software\Perl>.
Entries in the former override entries in the latter.  One or more of the
following entries (of type REG_SZ or REG_EXPAND_SZ) may be set:

    lib-$]		version-specific path to add to @@INC
    lib			path to add to @@INC
    sitelib-$]		version-specific path to add to @@INC
    sitelib		path to add to @@INC
    PERL*		fallback for all %ENV lookups that begin with "PERL"

Note the C<$]> in the above is not literal.  Substitute whatever version
of perl you want to honor that entry, e.g. C<5.00502>.  Paths must be
separated with semicolons, as usual on win32.

=item File Globbing

By default, perl spawns an external program to do file globbing.
The install process installs both a perlglob.exe and a perlglob.bat
that perl can use for this purpose.  Note that with the default
installation, perlglob.exe will be found by the system before
perlglob.bat.

perlglob.exe relies on the argv expansion done by the C Runtime of
the particular compiler you used, and therefore behaves very
differently depending on the Runtime used to build it.  To preserve
compatiblity, perlglob.bat (a perl script that can be used portably)
is installed.  Besides being portable, perlglob.bat also offers
enhanced globbing functionality.

If you want perl to use perlglob.bat instead of perlglob.exe, just
delete perlglob.exe from the install location (or move it somewhere
perl cannot find).  Using File::DosGlob.pm (which implements the core
functionality of perlglob.bat) to override the internal CORE::glob()
works about 10 times faster than spawing perlglob.exe, and you should
take this approach when writing new modules.  See File::DosGlob for
details.

=item Using perl from the command line

If you are accustomed to using perl from various command-line
shells found in UNIX environments, you will be less than pleased
with what Windows NT offers by way of a command shell.

The crucial thing to understand about the "cmd" shell (which is
the default on Windows NT) is that it does not do any wildcard
expansions of command-line arguments (so wildcards need not be
quoted).  It also provides only rudimentary quoting.  The only
(useful) quote character is the double quote (").  It can be used to
protect spaces in arguments and other special characters.  The
Windows NT documentation has almost no description of how the
quoting rules are implemented, but here are some general observations
based on experiments:  The shell breaks arguments at spaces and
passes them to programs in argc/argv.  Doublequotes can be used
to prevent arguments with spaces in them from being split up.
You can put a double quote in an argument by escaping it with
a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the
argument will be stripped by the shell.

The file redirection characters "<", ">", and "|" cannot be quoted
by double quotes (there are probably more such).  Single quotes
will protect those three file redirection characters, but the
single quotes don't get stripped by the shell (just to make this
type of quoting completely useless).  The caret "^" has also
been observed to behave as a quoting character (and doesn't get
stripped by the shell also).

Here are some examples of usage of the "cmd" shell:

This prints two doublequotes:

    perl -e "print '\"\"' "

This does the same:

    perl -e "print \"\\\"\\\"\" "

This prints "bar" and writes "foo" to the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" > blurch

This prints "foo" ("bar" disappears into nowhereland):

    perl -e "print 'foo'; print STDERR 'bar'" 2> nul

This prints "bar" and writes "foo" into the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 1> blurch

This pipes "foo" to the "less" pager and prints "bar" on the console:

    perl -e "print 'foo'; print STDERR 'bar'" | less

This pipes "foo\nbar\n" to the less pager:

    perl -le "print 'foo'; print STDERR 'bar'" 2>&1 | less

This pipes "foo" to the pager and writes "bar" in the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch | less


Discovering the usefulness of the "command.com" shell on Windows95
is left as an exercise to the reader :)

=item Building Extensions

The Comprehensive Perl Archive Network (CPAN) offers a wealth
of extensions, some of which require a C compiler to build.
Look in http://www.perl.com/ for more information on CPAN.

Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:

    perl Makefile.PL
    $MAKE
    $MAKE test
    $MAKE install

where $MAKE is whatever 'make' program you have configured perl to
use.  Use "perl -V:make" to find out what this is.  Some extensions
may not provide a testsuite (so "$MAKE test" may not do anything, or
fail), but most serious ones do.

It is important that you use a supported 'make' program, and
ensure Config.pm knows about it.  If you don't have nmake, you can
either get dmake from the location mentioned earlier, or get an
old version of nmake reportedly available from:

    ftp://ftp.microsoft.com/Softlib/MSLFILES/nmake15.exe

Another option is to use the make written in Perl, available from
CPAN:

    http://www.perl.com/CPAN/authors/id/NI-S/Make-0.03.tar.gz

Note that MakeMaker actually emits makefiles with different syntax
depending on what 'make' it thinks you are using.  Therefore, it is
important that one of the following values appears in Config.pm:

    make='nmake'	# MakeMaker emits nmake syntax
    make='dmake'	# MakeMaker emits dmake syntax
    any other value	# MakeMaker emits generic make syntax
    			    (e.g GNU make, or Perl make)

If the value doesn't match the 'make' program you want to use,
edit Config.pm to fix it.

If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation.

If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.

=item Command-line Wildcard Expansion

The default command shells on DOS descendant operating systems (such
as they are) usually do not expand wildcard arguments supplied to
programs.  They consider it the application's job to handle that.
This is commonly achieved by linking the application (in our case,
perl) with startup code that the C runtime libraries usually provide.
However, doing that results in incompatible perl versions (since the
behavior of the argv expansion code differs depending on the
compiler, and it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary with an
alternate shell that *does* expand wildcards.

Instead, the following solution works rather well. The nice things
about it: 1) you can start using it right away 2) it is more powerful,
because it will do the right thing with a pattern like */*/*.c
3) you can decide whether you do/don't want to use it 4) you can
extend the method to add any customizations (or even entirely
different kinds of wildcard expansion).

	C:\> copy con c:\perl\lib\Wild.pm
	# Wild.pm - emulate shell @@ARGV expansion on shells that don't
	use File::DosGlob;
	@@ARGV = map {
		      my @@g = File::DosGlob::glob($_) if /[*?]/;
		      @@g ? @@g : $_;
		    } @@ARGV;
	1;
	^Z
	C:\> set PERL5OPT=-MWild
	C:\> perl -le "for (@@ARGV) { print }" */*/perl*.c
	p4view/perl/perl.c
	p4view/perl/perlio.c
	p4view/perl/perly.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c

Note there are two distinct steps there: 1) You'll have to create
Wild.pm and put it in your perl lib directory. 2) You'll need to
set the PERL5OPT environment variable.  If you want argv expansion
to be the default, just set PERL5OPT in your default startup
environment.

If you are using the Visual C compiler, you can get the C runtime's
command line wildcard expansion built into perl binary.  The resulting
binary will always expand unquoted command lines, which may not be
what you want if you use a shell that does that for you.  The expansion
done is also somewhat less powerful than the approach suggested above.

=item Win32 Specific Extensions

A number of extensions specific to the Win32 platform are available
from CPAN.  You may find that many of these extensions are meant to
be used under the Activeware port of Perl, which used to be the only
native port for the Win32 platform.  Since the Activeware port does not
have adequate support for Perl's extension building tools, these
extensions typically do not support those tools either, and therefore
cannot be built using the generic steps shown in the previous section.

To ensure smooth transitioning of existing code that uses the
ActiveState port, there is a bundle of Win32 extensions that contains
all of the ActiveState extensions and most other Win32 extensions from
CPAN in source form, along with many added bugfixes, and with MakeMaker
support.  This bundle is available at:

   http://www.perl.com/CPAN/authors/id/GSAR/libwin32-0.14.zip

See the README in that distribution for building and installation
instructions.  Look for later versions that may be available at the
same location.

=item Running Perl Scripts

Perl scripts on UNIX use the "#!" (a.k.a "shebang") line to
indicate to the OS that it should execute the file using perl.
Win32 has no comparable means to indicate arbitrary files are
executables.

Instead, all available methods to execute plain text files on
Win32 rely on the file "extension".  There are three methods
to use this to execute perl scripts:

=over 8

=item 1

There is a facility called "file extension associations" that will
work in Windows NT 4.0.  This can be manipulated via the two
commands "assoc" and "ftype" that come standard with Windows NT
4.0.  Type "ftype /?" for a complete example of how to set this
up for perl scripts (Say what?  You thought Windows NT wasn't
perl-ready? :).

=item 2

Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the OS, may be used.  The install process
makes available the "pl2bat.bat" script which can be used to wrap
perl scripts into batch files.  For example:

	pl2bat foo.pl

will create the file "FOO.BAT".  Note "pl2bat" strips any
.pl suffix and adds a .bat suffix to the generated file.

If you use the 4DOS/NT or similar command shell, note that
"pl2bat" uses the "%*" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a "ParameterChar = *" statement in their
4NT.INI file, or will need to execute "setdos /p*" in the 4DOS/NT
startup file to enable this to work.

=item 3

Using "pl2bat" has a few problems:  the file name gets changed,
so scripts that rely on C<$0> to find what they must do may not
run properly; running "pl2bat" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.

A script called "runperl.bat" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it "foo.bat", it will run the file "foo" when it is
executed.  Since you can run batch files on Win32 platforms simply
by typing the name (without the extension), this effectively
runs the file "foo", when you type either "foo" or "foo.bat".
With this method, "foo.bat" can even be in a different location
than the file "foo", as long as "foo" is available somewhere on
the PATH.  If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying "runperl.bat".

Here's a diversion:  copy "runperl.bat" to "runperl", and type
"runperl".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,"lrepnur" eteled :tniH

=back

=item Miscellaneous Things

A full set of HTML documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.

C<perldoc> is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like C<less> (recent versions of which have Win32 support).  You may
have to set the PAGER environment variable to use a specific pager.
"perldoc -f foo" will print information about the perl operator
"foo".

If you find bugs in perl, you can run C<perlbug> to create a
bug report (you may have to send it manually if C<perlbug> cannot
find a mailer on your system).

=back

=head1 BUGS AND CAVEATS

An effort has been made to ensure that the DLLs produced by the two
supported compilers are compatible with each other (despite the
best efforts of the compiler vendors).  Extension binaries produced
by one compiler should also coexist with a perl binary built by
a different compiler.  In order to accomplish this, PERL.DLL provides
a layer of runtime code that uses the C Runtime that perl was compiled
with.  Extensions which include "perl.h" will transparently access
the functions in this layer, thereby ensuring that both perl and
extensions use the same runtime functions.

If you have had prior exposure to Perl on Unix platforms, you will notice
this port exhibits behavior different from what is documented.  Most of the
differences fall under one of these categories.  We do not consider
any of them to be serious limitations (especially when compared to the
limited nature of some of the Win32 OSes themselves :)

=over 8

=item *

C<stat()> and C<lstat()> functions may not behave as documented.  They
may return values that bear no resemblance to those reported on Unix
platforms, and some fields (like the the one for inode) may be completely
bogus.

=item *

The following functions are currently unavailable: C<fork()>,
C<dump()>, C<chown()>, C<link()>, C<symlink()>, C<chroot()>,
C<setpgrp()> and related security functions, C<setpriority()>,
C<getpriority()>, C<syscall()>, C<fcntl()>, C<getpw*()>,
C<msg*()>, C<shm*()>, C<sem*()>, C<alarm()>, C<socketpair()>,
C<*netent()>, C<*protoent()>, C<*servent()>, C<*hostent()>,
C<getnetby*()>.
This list is possibly incomplete.

=item *

Various C<socket()> related calls are supported, but they may not
behave as on Unix platforms.

=item *

The four-argument C<select()> call is only supported on sockets.

=item *

The C<ioctl()> call is only supported on sockets (where it provides the
functionality of ioctlsocket() in the Winsock API).

=item *

Failure to spawn() a subprocess is indicated by setting $? to "255 << 8".
C<$?> is set in a way compatible with Unix (i.e. the exitstatus of the
subprocess is obtained by "$? >> 8", as described in the documentation).

=item *

You can expect problems building modules available on CPAN if you
build perl itself with -DUSE_THREADS.  These problems should be resolved
as we get closer to 5.005.

=item *

C<utime()>, C<times()> and process-related functions may not
behave as described in the documentation, and some of the
returned values or effects may be bogus.

=item *

Signal handling may not behave as on Unix platforms (where it
doesn't exactly "behave", either :).  For instance, calling C<die()>
or C<exit()> from signal handlers will cause an exception, since most
implementations of C<signal()> on Win32 are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.

=item *

C<kill()> is implemented, but doesn't have the semantics of
C<raise()>, i.e. it doesn't send a signal to the identified process
like it does on Unix platforms.  Instead it immediately calls
C<TerminateProcess(process,signal)>.  Thus the signal argument is
used to set the exit-status of the terminated process.  This behavior
may change in future.

=item *

File globbing may not behave as on Unix platforms.  In particular,
if you don't use perlglob.bat for globbing, it will understand
wildcards only in the filename component (and not in the pathname).
In other words, something like "print <*/*.pl>" will not print all the
perl scripts in all the subdirectories one level under the current one
(like it does on UNIX platforms).  perlglob.exe is also dependent on
the particular implementation of wildcard expansion in the vendor
libraries used to build it (which varies wildly at the present time).
Using perlglob.bat (or File::DosGlob) avoids these limitations, but
still only provides DOS semantics (read "warts") for globbing.

=back

Please send detailed descriptions of any problems and solutions that 
you may find to <F<perlbug@@perl.com>>, along with the output produced
by C<perl -V>.

=head1 AUTHORS

=over 4

Gary Ng E<lt>71564.1743@@CompuServe.COME<gt>

Gurusamy Sarathy E<lt>gsar@@umich.eduE<gt>

Nick Ing-Simmons E<lt>nick@@ni-s.u-net.comE<gt>

=back

This document is maintained by Gurusamy Sarathy.

=head1 SEE ALSO

L<perl>

=head1 HISTORY

This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.

Nick Ing-Simmons and Gurusamy Sarathy have made numerous and
sundry hacks since then.

Borland support was added in 5.004_01 (Gurusamy Sarathy).

GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).

Support for PERL_OBJECT was added in 5.005 (ActiveState Tool Corp).

Last updated: 18 January 1999

=cut

@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d11 7
a17 2
These are instructions for building Perl under Windows (9x, NT and
2000).
d35 1
a35 1
a perl that will work on Windows NT:  the README.cygwin and
d50 2
a51 1
      Mingw32 with GCC		version 2.95.2 or better
d53 2
a54 3
The last of these is a high quality freeware compiler.  Support
for it is still experimental.  (Older versions of GCC are known
not to work.)
a64 21
=item Make

You need a "make" program to build the sources.  If you are using
Visual C++ under Windows NT or 2000, nmake will work.  All other
builds need dmake.

dmake is a freely available make that has very nice macro features
and parallelability.

A port of dmake for Windows is available from:

    http://www.cpan.org/authors/id/GSAR/dmake-4.1pl1-win32.zip

(This is a fixed version of original dmake sources obtained from
http://www.wticorp.com/dmake/.  As of version 4.1PL1, the original
sources did not build as shipped, and had various other problems.
A patch is included in the above fixed version.)

Fetch and install dmake somewhere on your path (follow the instructions
in the README.NOW file).

d70 5
a74 1
shell.
d76 1
a76 5
The nmake Makefile also has known incompatibilites with the
"command.com" shell that comes with Windows 9x.  You will need to
use dmake and makefile.mk to build under Windows 9x.

The surest way to build it is on Windows NT, using the cmd shell.
d83 2
a84 1
If you are using the Borland compiler, you will need dmake.
d88 6
a93 1
See L/"Make"> above.
d97 1
a97 1
The nmake that comes with Visual C++ will suffice for building.
d108 1
a108 1
=item Mingw32 with GCC
d110 1
a110 1
GCC-2.95.2 binaries can be downloaded from:
d114 3
a116 1
The GCC-2.95.2 bundle comes with Mingw32 libraries and headers.
d118 4
a121 3
Make sure you install the binaries that work with MSVCRT.DLL as indicated
in the README for the GCC bundle.  You may need to set up a few environment
variables (usually run from a batch file).
d123 5
a127 1
You also need dmake.  See L</"Make"> above on how to get it.
d139 1
a139 1
versions of nmake that come with Visual C++, and a dmake "makefile.mk"
d141 1
a141 1
makefile are setup to build using the GCC compiler.
d147 1
a147 1
flags.  These are explained in the makefiles.
d149 22
a170 2
You will have to make sure CCTYPE is set correctly, and CCHOME points
to wherever you installed your compiler.
d172 2
a173 3
The default value for CCHOME in the makefiles for Visual C++
may not be correct for some versions.  Make sure the default exists
and is valid.
d179 1
a179 1
is part of the "libdes" library (written by Eric Young) which is widely
d194 9
a202 1
Be sure to read the instructions near the top of the makefiles carefully.
d209 22
a230 3
perl56.dll at the perl toplevel, and various other extension dll's
under the lib\auto directory.  If the build fails for any reason, make
sure you have done the previous steps correctly.
d237 1
a237 1
the testsuite (many tests will be skipped).
d239 3
a241 7
No tests should typically fail when running Windows NT 4.0.  Under Windows
2000, test 22 in lib/open3.t is known to fail (cause still unknown).  Many
tests will fail under Windows 9x due to the inferior command shell.

Some test failures may occur if you use a command shell other than the
native "cmd.exe", or if you are building from a path that contains
spaces.  So don't do that.
d252 4
d269 1
a269 5
    set PATH c:\perl\5.6.0\bin;c:\perl\5.6.0\bin\MSWin32-x86;%PATH%

If you opt to comment out INST_VER and INST_ARCH in the makefiles, the
installation structure is much simpler.  In that case, it will be
sufficient to add a single entry to the path, for instance:
a270 1
    set PATH c:\perl\bin;%PATH%
d296 4
a299 6
    lib-$]		version-specific standard library path to add to @@INC
    lib			standard library path to add to @@INC
    sitelib-$]		version-specific site library path to add to @@INC
    sitelib		site library path to add to @@INC
    vendorlib-$]	version-specific vendor library path to add to @@INC
    vendorlib		vendor library path to add to @@INC
d303 1
a303 1
of perl you want to honor that entry, e.g. C<5.6.0>.  Paths must be
d308 19
a326 6
By default, perl handles file globbing using the File::Glob extension,
which provides portable globbing.

If you want perl to use globbing that emulates the quirks of DOS
filename conventions, you might want to consider using File::DosGlob
to override the internal glob() implementation.  See L<File::DosGlob> for
d333 1
a333 1
with what Windows offers by way of a command shell.
d394 1
a394 1
Discovering the usefulness of the "command.com" shell on Windows 9x
d401 1
a401 6
Look in http://www.cpan.org/ for more information on CPAN.

Note that not all of the extensions available from CPAN may work
in the Win32 environment; you should check the information at
http://testers.cpan.org/ before investing too much effort into
porting modules that don't readily build.
d426 1
a426 3
    http://www.cpan.org/authors/id/NI-S/Make-0.03.tar.gz

You may also use dmake.  See L</"Make"> above on how to get it.
d519 1
a519 1
   http://www.cpan.org/authors/id/GSAR/libwin32-0.151.zip
d616 19
a634 6
Some of the built-in functions do not act exactly as documented in
L<perlfunc>, and a few are not implemented at all.  To avoid
surprises, particularly if you have had prior exposure to Perl
in other operating environments or if you intend to write code
that will be portable to other environments, see L<perlport>
for a reasonably definitive list of these differences.
d636 4
a639 2
Not all extensions available from CPAN may build or work properly
in the Win32 environment.  See L</"Building Extensions">.
d641 44
a684 2
Most C<socket()> related calls are supported, but they may not
behave as on Unix platforms.  See L<perlport> for the full list.
d694 24
d728 1
a728 1
Gurusamy Sarathy E<lt>gsar@@activestate.comE<gt>
d744 4
a747 2
at the time.  Various people have made numerous and sundry hacks
since then.
d755 1
a755 1
Support for fork() emulation was added in 5.6 (ActiveState Tool Corp).
d757 1
a757 1
Win9x support was added in 5.6 (Benjamin Stuhl).
a758 3
Last updated: 22 March 2000

=cut
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d17 1
a17 1
found in the top-level directory to which the Perl distribution
d31 4
a34 4
README.os2 files, each of which give a different set of rules to
build a Perl that will work on Win32 platforms.  Those two methods
will probably enable you to build a more Unix-compatible perl, but
you will also need to download and use various other build-time and
d73 1
a73 1
(This is a fixed version of the original dmake sources obtained from
d75 1
a75 1
sources did not build as shipped and had various other problems.
a80 10
There exists a minor coexistence problem with dmake and Borland C++
compilers.  Namely, if a distribution has C files named with mixed
case letters, they will be compiled into appropriate .obj-files named
with all lowercase letters, and every time dmake is invoked
to bring files up to date, it will try to recompile such files again.
For example, Tk distribution has a lot of such files, resulting in
needless recompiles everytime dmake is invoked.  To avoid this, you
may use the script "sncfnmcs.pl" after a successful build.  It is
available in the win32 subdirectory of the Perl source distribution.

d88 1
a88 1
The nmake Makefile also has known incompatibilities with the
d100 1
a100 1
(The make that Borland supplies is seriously crippled and will not
d103 1
a103 1
See L</"Make"> above.
d108 1
a108 1
You will need to run the VCVARS32.BAT file, usually found somewhere
d111 1
a111 1
You can also use dmake to build using Visual C++; provided, however,
d113 1
a113 1
under which the Visual C dmake configuration lives) in your environment
a123 2
You also need dmake.  See L</"Make"> above on how to get it.

d128 1
a128 1
variables (usually ran from a batch file).
d130 1
a130 27
There are a couple of problems with the version of gcc-2.95.2-msvcrt.exe
released 7 November 1999:

=over

=item *

It left out a fix for certain command line quotes.  To fix this, be sure
to download and install the file fixes/quote-fix-msvcrt.exe from the above
ftp location.

=item *

The definition of the fpos_t type in stdio.h may be wrong.  If your
stdio.h has this problem, you will see an exception when running the
test t/lib/io_xs.t.  To fix this, change the typedef for fpos_t from
"long" to "long long" in the file i386-mingw32msvc/include/stdio.h,
and rebuild.

=back

A potentially simpler to install (but probably soon-to-be-outdated) bundle
of the above package with the mentioned fixes already applied is available
here:

    http://downloads.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip
    ftp://ftp.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip
d148 3
a150 3
Edit the makefile.mk (or Makefile, if you're using nmake) and change 
the values of INST_DRV and INST_TOP.   You can also enable various
build flags.  These are explained in the makefiles.
d152 2
a153 2
You will have to make sure that CCTYPE is set correctly and that 
CCHOME points to wherever you installed your compiler.
d164 1
a164 1
available worldwide, usually along with SSLeay (for example, 
d196 3
a198 3
There should be no test failures when running under Windows NT 4.0 or
Windows 2000.  Many tests I<will> fail under Windows 9x due to the inferior
command shell.
d211 1
a211 9
(usually somewhere like C:\WINNT\SYSTEM32) and rerun the test.

If you're using Borland compiler versions 5.2 and below, you may run into
problems finding the correct header files when building extensions.  For
example, building the "Tk" extension may fail because both perl and Tk
contain a header file called "patchlevel.h".  The latest Borland compiler
(v5.5) is free of this misbehaviour, and it even supports an
option -VI- for backward (bugward) compatibility for using the old Borland
search algorithm  to locate header files.
d223 1
a223 1
C<$INST_TOP\$VERSION\bin> and C<$INST_TOP\$VERSION\bin\$ARCHNAME>.
d286 7
a292 18
The crucial thing to understand about the Windows environment is that
the command line you type in is processed twice before Perl sees it.
First, your command shell (usually CMD.EXE on Windows NT, and
COMMAND.COM on Windows 9x) preprocesses the command line, to handle
redirection, environment variable expansion, and location of the
executable to run. Then, the perl executable splits the remaining
command line into individual arguments, using the C runtime library
upon which Perl was built.

It is particularly important to note that neither the shell nor the C
runtime do any wildcard expansions of command-line arguments (so
wildcards need not be quoted).  Also, the quoting behaviours of the
shell and the C runtime are rudimentary at best (and may, if you are
using a non-standard shell, be inconsistent).  The only (useful) quote
character is the double quote (").  It can be used to protect spaces
and other special characters in arguments.

The Windows NT documentation has almost no description of how the
d294 15
a308 17
based on experiments: The C runtime breaks arguments at spaces and
passes them to programs in argc/argv.  Double quotes can be used to
prevent arguments with spaces in them from being split up.  You can
put a double quote in an argument by escaping it with a backslash and
enclosing the whole argument within double quotes.  The backslash and
the pair of double quotes surrounding the argument will be stripped by
the C runtime.

The file redirection characters "<", ">", and "|" can be quoted by
double quotes (although there are suggestions that this may not always
be true).  Single quotes are not treated as quotes by the shell or
the C runtime, they don't get stripped by the shell (just to make
this type of quoting completely useless).  The caret "^" has also
been observed to behave as a quoting character, but this appears
to be a shell feature, and the caret is not stripped from the command
line, so Perl still sees it (and the C runtime phase does not treat
the caret as a quote character).
a347 7
One particularly pernicious problem with the 4NT command shell for
Windows NT is that it (nearly) always treats a % character as indicating
that environment variable expansion is needed.  Under this shell, it is
therefore important to always double any % characters which you want
Perl to see (for example, for hash variables), even when they are
quoted.

d369 1
a369 1
may not provide a testsuite (so "$MAKE test" may not do anything or
d374 1
a374 1
either get dmake from the location mentioned earlier or get an
d422 5
a426 5
about it are 1) you can start using it right away; 2) it is more 
powerful, because it will do the right thing with a pattern like
*/*/*.c; 3) you can decide whether you do/don't want to use it; and
4) you can extend the method to add any customizations (or even 
entirely different kinds of wildcard expansion).
d468 1
a468 1
extensions typically do not support those tools either and, therefore,
d524 1
a524 1
4NT.INI file or will need to execute "setdos /p*" in the 4DOS/NT
d578 1
a578 1
that will be portable to other environments.  See L<perlport>
d603 1
a603 1
=item Gary Ng E<lt>71564.1743@@CompuServe.COME<gt>
d605 1
a605 1
=item Gurusamy Sarathy E<lt>gsar@@activestate.comE<gt>
d607 1
a607 1
=item Nick Ing-Simmons E<lt>nick@@ni-s.u-net.comE<gt>
d634 1
a634 1
Last updated: 1 April 2001
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d7 1
a7 1
perlwin32 - Perl under Windows
d11 2
a12 2
These are instructions for building Perl under Windows 9x/NT/2000/XP
on the Intel x86 and Itanium architectures.
d38 1
a38 2
port of Perl to Win32 platforms.  This includes both 32-bit and
64-bit Windows operating systems.  The resulting Perl requires no
d41 1
a41 1
following compilers on the Intel x86 architecture:
d51 1
a51 7
This port can also be built on the Intel IA64 using:

      Microsoft Platform SDK	Nov 2001 (64-bit compiler and tools)

The MS Platform SDK can be downloaded from http://www.microsoft.com/.

This port fully supports MakeMaker (the set of modules that
d54 1
a54 1
See L<Usage Hints for Perl on Win32> below for general hints about this.
d56 1
a56 1
=head2 Setting Up Perl on Win32
d63 2
a64 2
Visual C++ or the Platform SDK tools under Windows NT/2000/XP, nmake
will work.  All other builds need dmake.
d74 1
a74 1
http://www.wticorp.com/  As of version 4.1PL1, the original
d87 2
a88 2
needless recompiles every time dmake is invoked.  To avoid this, you
may use the script "sync_ext.pl" after a successful build.  It is
d102 1
a102 1
The surest way to build it is on Windows NT/2000/XP, using the cmd shell.
a127 6
=item Microsoft Platform SDK 64-bit Compiler

The nmake that comes with the Platform SDK will suffice for building
Perl.  Make sure you are building within one of the "Build Environment"
shells available after you install the Platform SDK from the Start Menu.

d180 3
a182 4
versions of nmake that come with Visual C++ or the Platform SDK, and
a dmake "makefile.mk" that will work for all supported compilers.  The
defaults in the dmake makefile are setup to build using Microsoft Visual
C++ 6.0 or newer.
d202 2
a203 2
available worldwide, usually along with SSLeay ( for example, 
ftp://ftp.funet.fi/pub/crypt/mirrors/dsi/libdes/ ).  Set CRYPT_SRC to the
a212 6
An easier alternative may be to get the pre-patched and ready-to-use
fcrypt.c that can be found here:

    http://downloads.ActiveState.com/pub/staff/gsar/fcrypt.c
    ftp://ftp.ActiveState.com/pub/staff/gsar/fcrypt.c

d223 1
a223 1
perl58.dll at the perl toplevel, and various other extension dll's
d229 1
a229 1
=head2 Testing Perl on Win32
d234 3
a236 2
There should be no test failures when running under Windows NT/2000/XP.
Many tests I<will> fail under Windows 9x due to the inferior command shell.
a258 10
If you run the tests on a FAT partition, you may see some failures for
C<link()> related tests (I<op/write.t>, I<op/stat.t> ...). Testing on
NTFS avoids these errors.

Furthermore, you should make sure that during C<make test> you do not
have any GNU tool packages in your path: some toolkits like Unixutils
include some tools (C<type> for instance) which override the Windows
ones and makes tests fail. Remove them from your path while testing to
avoid these errors.

d261 1
a261 1
=head2 Installation of Perl on Win32
d280 1
a280 1
=head2 Usage Hints for Perl on Win32
d446 1
a446 1
CPAN.
d448 1
a448 1
    http://www.cpan.org/modules/by-module/Make/
d543 1
a543 1
   http://www.cpan.org/authors/id/GSAR/libwin32-0.18.zip
d549 1
a549 40
=item Notes on 64-bit Windows

Windows .NET Server supports the LLP64 data model on the Intel Itanium
architecture.

The LLP64 data model is different from the LP64 data model that is the
norm on 64-bit Unix platforms.  In the former, C<int> and C<long> are
both 32-bit data types, while pointers are 64 bits wide.  In addition,
there is a separate 64-bit wide integral type, C<__int64>.  In contrast,
the LP64 data model that is pervasive on Unix platforms provides C<int>
as the 32-bit type, while both the C<long> type and pointers are of
64-bit precision.  Note that both models provide for 64-bits of
addressability.

64-bit Windows running on Itanium is capable of running 32-bit x86
binaries transparently.  This means that you could use a 32-bit build
of Perl on a 64-bit system.  Given this, why would one want to build
a 64-bit build of Perl?  Here are some reasons why you would bother:

=item *

A 64-bit native application will run much more efficiently on
Itanium hardware.

=item *

There is no 2GB limit on process size.

=item *

Perl automatically provides large file support when built under
64-bit Windows.

=item *

Embedding Perl inside a 64-bit application.

=back

=head2 Running Perl Scripts
d617 2
a639 14
Norton AntiVirus interferes with the build process, particularly if 
set to "AutoProtect, All Files, when Opened". Unlike large applications 
the perl build process opens and modifies a lot of files. Having the  
the AntiVirus scan each and every one slows build the process significantly.
Worse, with PERLIO=stdio the build process fails with peculiar messages
as the virus checker interacts badly with miniperl.exe writing configure 
files (it seems to either catch file part written and treat it as suspicious,
or virus checker may have it "locked" in a way which inhibits miniperl
updating it). The build does complete with 

   set PERLIO=perlio

but that may be just luck. Other AntiVirus software may have similar issues.

d673 1
a673 1
=item Nick Ing-Simmons E<lt>nick@@ing-simmons.netE<gt>
d700 1
a700 3
Support for 64-bit Windows added in 5.8 (ActiveState Corp).

Last updated: 20 April 2002
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d141 1
a141 1
=item MinGW32 with gcc
d143 1
a143 2
The latest release of MinGW (at the time of writing) is 2.0.0, which comes 
with gcc-3.2, and can be downloaded here:
d145 1
a145 9
    http://sourceforge.net/projects/mingw

Perl compiles with earlier releases of gcc (2.95 and up) that can be
downloaded from the same place. If you use gcc-3.2, comment out the
line:

    USE_GCC_V3_2	*= define

in win32\makefile.mk
d149 1
a149 3
=item MinGW release 1

The MinGW-1.1 bundle comes with gcc-2.95.3.
d212 21
a232 6
enable the appropriate option in the makefile.  A ready-to-use version
of fcrypt.c, based on the version originally written by Eric Young at
ftp://ftp.funet.fi/pub/crypt/mirrors/dsi/libdes/, is bundled with the
distribution. Set CRYPT_SRC to fcrypt.c to use this version.
Alternatively, if you have built a library that contains des_fcrypt(),
you can set CRYPT_LIB to point to the library name.
d279 2
a280 14
C<link()> related tests:

    Failed Test                     Stat Wstat Total Fail  Failed  List

    ../ext/IO/lib/IO/t/io_dup.t                    6    4  66.67%  2-5
    ../lib/File/Temp/t/mktemp.t                    9    1  11.11%  2
    ../lib/File/Temp/t/posix.t                     7    1  14.29%  3
    ../lib/File/Temp/t/security.t                 13    1   7.69%  2
    ../lib/File/Temp/t/tempfile.t                 20    2  10.00%  2 4
    comp/multiline.t                               6    2  33.33%  5-6
    io/dup.t                                       8    6  75.00%  2-7
    op/write.t                                    47    7  14.89%  1-3 6 9-11

Testing on NTFS avoids these errors.
a696 8

One common mistake when using this port with a GUI library like C<Tk>
is assuming that Perl's normal behavior of opening a command-line
window will go away.  This isn't the case.  If you want to start a copy
of C<perl> without opening a command-line window, use the C<wperl>
executable built during the installation process.  Usage is exactly
the same as normal C<perl> on Win32, except that options like C<-h>
don't work (since they need a command-line window to print to).
@


1.1.1.6
log
@Import of stock perl 5.8.5
@
text
@d46 1
a46 1
      MinGW with gcc		gcc version 2.95.2 or later
d48 3
a50 2
The last of these is a high quality freeware compiler.  Use version
3.2.x or later for the best results with this compiler.
d141 1
a141 1
=item MinGW release 3 with gcc
d143 2
a144 2
The latest release of MinGW at the time of writing is 3.1.0, which comes 
with gcc-3.2.3, and can be downloaded here:
d146 1
a146 1
    http://www.mingw.org/
d148 7
a154 2
Perl also compiles with earlier releases of gcc (2.95.2 and up).  See below
for notes about using earlier versions of MinGW/gcc.
d158 1
a158 1
=item MinGW release 1 with gcc
a214 7
Note that it is generally not a good idea to try to build a perl with
INST_DRV and INST_TOP set to a path that already exists from a previous
build.  In particular, this may cause problems with the
lib/ExtUtils/t/Embed.t test, which attempts to build a test program and
may end up building against the installed perl's lib/CORE directory rather
than the one being tested.

d480 1
a480 1
 http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe
a759 5

=head1 ACKNOWLEDGEMENTS

The use of a camel with the topic of Perl is a trademark
of O'Reilly and Associates, Inc. Used with permission.
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@d44 3
a46 3
      Borland C++           version 5.02 or later
      Microsoft Visual C++  version 4.2 or later
      MinGW with gcc        gcc version 2.95.2 or later
a50 5
The Microsoft Visual C++ compiler is also now being given away free in
the "Visual C++ Toolkit 2003", and also as part of the ".NET Framework
SDK".  This is the same compiler that ships with "Visual Studio .NET 2003
Professional".

d125 1
a125 2
like C:\MSDEV4.2\BIN or C:\Program Files\Microsoft Visual Studio\VC98\Bin.
This will set your build environment.
a133 78
=item Microsoft Visual C++ Toolkit 2003

This free toolkit contains the same compiler and linker that ship with
Visual Studio .NET 2003 Professional, but doesn't contain everything
necessary to build Perl.

You will also need to download the "Platform SDK" (the "Core SDK" and "MDAC
SDK" components are required) for header files, libraries and rc.exe, and
".NET Framework SDK" for more libraries and nmake.exe.  Note that the latter
(which also includes the free compiler and linker) requires the ".NET
Framework Redistributable" to be installed first.  This can be downloaded and
installed separately, but is included in the "Visual C++ Toolkit 2003" anyway.

These packages can all be downloaded by searching in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en

Note that the "Platform SDK February 2003" download requires Internet Explorer
5.0 to function.  Alternatively, the very latest version at the time of writing
(called "Windows XP Service Pack 2 Platform SDK RC2") is now available as an
ISO-9660 CD image file and does not require IE5 to be downloaded but will only
work on Windows XP.

According to the download pages the Toolkit and the .NET Framework SDK are only
supported on Windows 2000/XP/2003, so trying to use these tools on Windows
95/98/ME and even Windows NT probably won't work.

Install the Toolkit first, then the Platform SDK, then the .NET Framework SDK.
Setup your environment as follows (assuming default installation locations
were chosen):

	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin;C:\Program Files\Microsoft SDK\Bin;C:\Program Files\Microsoft.NET\SDK\v1.1\Bin
	SET INCLUDE=C:\Program Files\Microsoft Visual C++ Toolkit 2003\include;C:\Program Files\Microsoft SDK\include;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include
	SET LIB=C:\Program Files\Microsoft Visual C++ Toolkit 2003\lib;C:\Program Files\Microsoft SDK\lib;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib

Several required files will still be missing:

=over 4

=item *

cvtres.exe is required by link.exe when using a .res file.  It is actually
installed by the .NET Framework SDK, but into a location such as the
following:

	C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322

Copy it from there to C:\Program Files\Microsoft SDK\Bin

=item *

lib.exe is normally used to build libraries, but link.exe with the /lib
option also works, so create a batch file called lib.bat in
C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin containing:

	@@echo off
	link /lib %*

This will work as long as "lib.exe" is invoked simply as "lib" (which it is
during the Perl build process).

=item *

setargv.obj is required to build perlglob.exe (and perl.exe if the USE_SETARGV
option is enabled).  The Platform SDK supplies this object file in source form
in C:\Program Files\Microsoft SDK\src\crt.  Copy setargv.c, cruntime.h and
internal.h from there to some temporary location and build setargv.obj using

	cl.exe /c /I. /D_CRTBLD setargv.c

Then copy setargv.obj to C:\Program Files\Microsoft SDK\lib

=back

Perl should now build using the win32/Makefile.  You will need to edit that
file to comment-out CCTYPE = MSVC60 (since that enables delay-loading of the
Winsock DLL which the free toolkit does not support) and to set CCHOME,
CCINCDIR and CCLIBDIR as per the environment setup above.

d142 2
a143 2
The latest release of MinGW at the time of writing is 3.1.0, which contains 
gcc-3.2.3.  It can be downloaded here:
d154 1
a154 1
The MinGW-1.1 bundle contains gcc-2.95.3.
d200 2
a201 1
defaults in the dmake makefile are setup to build using MinGW/gcc.
d227 1
a227 1
distribution and CRYPT_SRC is set to use it.
d304 11
a314 2
C<$INST_TOP\$INST_VER\lib\pod> and HTML versions of the same under
C<$INST_TOP\$INST_VER\lib\pod\html>.
d316 1
a316 11
To use the Perl you just installed you will need to add a new entry to
your PATH environment variable: C<$INST_TOP\bin>, e.g.

    set PATH=c:\perl\bin;%PATH%

If you opted to uncomment C<INST_VER> and C<INST_ARCH> in the makefile
then the installation structure is a little more complicated and you will
need to add two new PATH components instead: C<$INST_TOP\$INST_VER\bin> and
C<$INST_TOP\$INST_VER\bin\$ARCHNAME>, e.g.

    set PATH=c:\perl\5.6.0\bin;c:\perl\5.6.0\bin\MSWin32-x86;%PATH%
d397 1
a397 1
The file redirection characters "E<lt>", "E<gt>", and "|" can be quoted by
d577 1
a577 1
all of the ActiveState extensions and several other Win32 extensions from
d581 1
a581 1
   http://www.cpan.org/modules/by-module/Win32/libwin32-0.191.zip
a605 2
=over

a625 2
=back

d694 1
a694 3
=back

=head2 Miscellaneous Things
d719 2
d741 1
a741 1
that will be portable to other environments, see L<perlport>
a748 6
Perl requires Winsock2 to be installed on the system. If you're
running Win95, you can download Winsock upgrade from here:

http://www.microsoft.com/windows95/downloads/contents/WUAdminTools/S_WUNetworkingTools/W95Sockets2/Default.asp

Later OS versions already include Winsock2 support.
d759 2
a760 2
you may find to E<lt>F<perlbug@@perl.org>E<gt>, along with the output
produced by C<perl -V>.
d804 1
a804 1
Last updated: 30 July 2004
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d45 1
a45 1
      Microsoft Visual C++  version 2.0 or later
d51 4
a54 6
The Borland C++ and Microsoft Visual C++ compilers are also now being given
away free.  The Borland compiler is available as "Borland C++ Compiler Free
Command Line Tools" and is the same compiler that ships with the full
"Borland C++ Builder" product.  The Microsoft compiler is available as
"Visual C++ Toolkit 2003", and also as part of the ".NET Framework SDK", and
is the same compiler that ships with "Visual Studio .NET 2003 Professional".
d82 1
a82 1
    http://search.cpan.org/dist/dmake/
d84 7
a90 1
Fetch and install dmake somewhere on your path.
d154 7
a160 8
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Try to obtain the latest version of the Platform SDK.  Sometimes these packages
contain a particular Windows OS version in their name, but actually work on
other OS versions too.  For example, the "Windows Server 2003 SP1 Platform SDK"
also runs on Windows XP SP2 and Windows 2000.
d191 1
a191 11
option also works, so change win32/config.vc to use it instead:

Change the line reading:

	ar='lib'

to:

	ar='link /lib'

It may also be useful to create a batch file called lib.bat in
d197 2
a198 3
for the benefit of any naughty C extension modules that you might want to build
later which explicitly reference "lib" rather than taking their value from
$Config{ar}.
a210 4
Alternatively, if you don't need perlglob.exe and don't need to enable the
USE_SETARGV option then you can safely just remove all mention of $(GLOBEXE)
from win32/Makefile and setargv.obj won't be required anyway.

d214 3
a216 5
file to set

	CCTYPE = MSVC70FREE

and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.
d226 1
a226 1
The latest release of MinGW at the time of writing is 3.1.0, which contains
d288 1
a288 1
Edit the makefile.mk (or Makefile, if you're using nmake) and change
d299 1
a299 1
You will have to make sure that CCTYPE is set correctly and that
a305 4
You may also need to comment out the C<DELAYLOAD = ...> line in the
Makefile if you're using VC++ 6.0 without the latest service pack and
the linker reports an internal error.

a315 3
If you want build some core extensions statically into perl's dll, specify
them in the STATIC_EXT macro.

d610 1
a610 1
about it are 1) you can start using it right away; 2) it is more
d613 1
a613 1
4) you can extend the method to add any customizations (or even
d663 1
a663 1
support.  The latest version of this bundle is available at:
d665 1
a665 1
    http://search.cpan.org/dist/libwin32/
d668 2
a669 1
instructions.
d811 3
a813 3
Norton AntiVirus interferes with the build process, particularly if
set to "AutoProtect, All Files, when Opened". Unlike large applications
the perl build process opens and modifies a lot of files. Having the
d816 1
a816 1
as the virus checker interacts badly with miniperl.exe writing configure
d819 1
a819 1
updating it). The build does complete with
d852 1
a852 1
Please send detailed descriptions of any problems and solutions that
a870 4
=item Jan Dubois E<lt>jand@@activestate.comE<gt>

=item Steve Hay E<lt>steve.hay@@uk.radan.comE<gt>

d873 1
a873 1
This document is maintained by Jan Dubois.
d898 1
a898 1
Last updated: 30 September 2005
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d55 2
a56 4
"Visual C++ Toolkit 2003" or "Visual C++ 2005/2008 Express Edition" (and also
as part of the ".NET Framework SDK") and is the same compiler that ships with
"Visual C++ .NET 2003 Professional" or "Visual C++ 2005/2008 Professional"
respectively.
a135 77
=item Microsoft Visual C++ 2008 Express Edition Beta 2

This free version of Visual C++ 2008 Professional contains the same compiler
and linker that ship with the full version, and also contains everything
necessary to build Perl, rather than requiring a separate download of the
Platform SDK like previous versions did.

The Beta 2 package is currently available from 

http://msdn2.microsoft.com/en-us/express/future/default.aspx
http://msdn2.microsoft.com/en-gb/express/future/default.aspx

The final release version will probably be found by searching in the Download
Center at http://www.microsoft.com/downloads/search.aspx?displaylang=en in due
course.

Install Visual C++ 2008, then setup your environment using

	C:\Program Files\Microsoft Visual Studio 9.0\Common7\Tools\vsvars32.bat

(assuming the default installation location was chosen).

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC90FREE

first.

=item Microsoft Visual C++ 2005 Express Edition

This free version of Visual C++ 2005 Professional contains the same compiler
and linker that ship with the full version, but doesn't contain everything
necessary to build Perl.

You will also need to download the "Platform SDK" (the "Core SDK" and "MDAC
SDK" components are required) for more header files and libraries.

These packages can both be downloaded by searching in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Try to obtain the latest version of the Platform SDK.  Sometimes these packages
contain a particular Windows OS version in their name, but actually work on
other OS versions too.  For example, the "Windows Server 2003 R2 Platform SDK"
also runs on Windows XP SP2 and Windows 2000.

According to the download pages these packages are only supported on Windows
2000/XP/2003, so trying to use these tools on Windows 95/98/ME and even Windows
NT probably won't work.

Install Visual C++ 2005 first, then the Platform SDK.  Setup your environment
as follows (assuming default installation locations were chosen):

	SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK

	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual Studio 8\Common7\IDE;C:\Program Files\Microsoft Visual Studio 8\VC\BIN;C:\Program Files\Microsoft Visual Studio 8\Common7\Tools;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\bin;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;C:\Program Files\Microsoft Visual Studio 8\VC\VCPackages;%PlatformSDKDir%\Bin

	SET INCLUDE=C:\Program Files\Microsoft Visual Studio 8\VC\INCLUDE;%PlatformSDKDir%\include

	SET LIB=C:\Program Files\Microsoft Visual Studio 8\VC\LIB;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\lib;%PlatformSDKDir%\lib

	SET LIBPATH=C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727

(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into "C:\Program Files\Microsoft SDK",
while the latest versions install into version-specific locations such as
"C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2".)

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC80FREE

and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.

d139 1
a139 1
Visual C++ .NET 2003 Professional, but doesn't contain everything
d156 1
a156 1
other OS versions too.  For example, the "Windows Server 2003 R2 Platform SDK"
d159 3
a161 3
According to the download pages these packages are only supported on Windows
2000/XP/2003, so trying to use these tools on Windows 95/98/ME and even Windows
NT probably won't work.
d167 3
a169 12
	SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK

	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin;%PlatformSDKDir%\Bin;C:\Program Files\Microsoft.NET\SDK\v1.1\Bin

	SET INCLUDE=C:\Program Files\Microsoft Visual C++ Toolkit 2003\include;%PlatformSDKDir%\include;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include

	SET LIB=C:\Program Files\Microsoft Visual C++ Toolkit 2003\lib;%PlatformSDKDir%\lib;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib

(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into "C:\Program Files\Microsoft SDK",
while the latest versions install into version-specific locations such as
"C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2".)
d183 1
a183 1
Copy it from there to %PlatformSDKDir%\Bin
d212 1
a212 1
in %PlatformSDKDir%\src\crt.  Copy setargv.c, cruntime.h and
d217 1
a217 1
Then copy setargv.obj to %PlatformSDKDir%\lib
a323 3
If you are using VC++ 4.2 or earlier then you'll have to change the /EHsc
option in the CXX_FLAG macro to the equivalent /GX option.

d344 1
a344 1
perl510.dll at the perl toplevel, and various other extension dll's
d380 14
a393 2
C<link()> related tests (I<op/write.t>, I<op/stat.t> ...). Testing on
NTFS avoids these errors.
d922 1
a922 1
Last updated: 29 August 2007
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d138 1
a138 1
=item Microsoft Visual C++ 2008 Express Edition
d145 8
a152 5
This package can be downloaded by searching for "Visual Studio 2008 Express
Edition" in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@d1 1000
a1000 1031
If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see pod/perlpod.pod) which is
specially designed to be readable as is.

=head1 NAME

perlwin32 - Perl under Windows

=head1 SYNOPSIS

These are instructions for building Perl under Windows 9x/NT/2000/XP
on the Intel x86 and Itanium architectures.

=head1 DESCRIPTION

Before you start, you should glance through the README file
found in the top-level directory to which the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.

Also make sure you read L<BUGS AND CAVEATS> below for the
known limitations of this port.

The INSTALL file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
"Configure".

You may also want to look at two other options for building
a perl that will work on Windows NT:  the README.cygwin and
README.os2 files, each of which give a different set of rules to
build a Perl that will work on Win32 platforms.  Those two methods
will probably enable you to build a more Unix-compatible perl, but
you will also need to download and use various other build-time and
run-time support software described in those files.

This set of instructions is meant to describe a so-called "native"
port of Perl to Win32 platforms.  This includes both 32-bit and
64-bit Windows operating systems.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using one of the
following compilers on the Intel x86 architecture:

      Borland C++           version 5.02 or later
      Microsoft Visual C++  version 2.0 or later
      MinGW with gcc        gcc version 2.95.2 or later
      Gcc by mingw.org        gcc version 2.95.2 or later
      Gcc by mingw-w64.sf.net gcc version 4.4.3 or later

Note that the last two of these are actually competing projects both
delivering complete gcc toolchain for MS Windows:
- http://mingw.org - delivers gcc toolchain targeting 32-bit Windows
  platform.
  Use version 3.2.x or later for the best results with this compiler.
- http://mingw-w64.sf.net - delivers gcc toolchain targeting both 64-bit
  Windows and 32-bit Windows platforms (despite the project name "mingw-w64"
  they are not only 64-bit oriented). They deliver the native gcc compilers
  + cross-compilers that are also supported by perl's makefile.

The Borland C++ and Microsoft Visual C++ compilers are also now being given
away free.  The Borland compiler is available as "Borland C++ Compiler Free
Command Line Tools" and is the same compiler that ships with the full
"Borland C++ Builder" product.  The Microsoft compiler is available as
"Visual C++ Toolkit 2003" or "Visual C++ 2005/2008 Express Edition" (and also
as part of the ".NET Framework SDK") and is the same compiler that ships with
"Visual C++ .NET 2003 Professional" or "Visual C++ 2005/2008 Professional"
respectively.

This port can also be built on IA64/AMD64 using:

      Microsoft Platform SDK	Nov 2001 (64-bit compiler and tools)
      MinGW64 compiler (gcc version 4.4.3 or later)

The MS Platform SDK can be downloaded from http://www.microsoft.com/.
The MinGW64 compiler is available at http://sourceforge.net/projects/mingw-w64.
The latter is actually a cross-compiler targeting Win64. There's also a trimmed
down compiler (no java, or gfortran) suitable for building perl available at:
http://strawberryperl.com/package/kmx/64_gcctoolchain/mingw64-w64-20100123-kmx-v2.zip

NOTE: If you're using a 32-bit compiler to build perl on a 64-bit Windows
operating system, then you should set the WIN64 environment variable to "undef".
Also, the trimmed down compiler only passes tests when USE_ITHREADS *= define
(as opposed to undef) and when the CFG *= Debug line is commented out.

This port fully supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the CPAN sites.
See L<Usage Hints for Perl on Win32> below for general hints about this.

=head2 Setting Up Perl on Win32

=over 4

=item Make

You need a "make" program to build the sources.  If you are using
Visual C++ or the Platform SDK tools under Windows NT/2000/XP, nmake
will work.  All other builds need dmake.

dmake is a freely available make that has very nice macro features
and parallelability.

A port of dmake for Windows is available from:

    http://search.cpan.org/dist/dmake/

Fetch and install dmake somewhere on your path.

There exists a minor coexistence problem with dmake and Borland C++
compilers.  Namely, if a distribution has C files named with mixed
case letters, they will be compiled into appropriate .obj-files named
with all lowercase letters, and every time dmake is invoked
to bring files up to date, it will try to recompile such files again.
For example, Tk distribution has a lot of such files, resulting in
needless recompiles every time dmake is invoked.  To avoid this, you
may use the script "sync_ext.pl" after a successful build.  It is
available in the win32 subdirectory of the Perl source distribution.

=item Command Shell

Use the default "cmd" shell that comes with NT.  Some versions of the
popular 4DOS/NT shell have incompatibilities that may cause you trouble.
If the build fails under that shell, try building again with the cmd
shell.

The nmake Makefile also has known incompatibilities with the
"command.com" shell that comes with Windows 9x.  You will need to
use dmake and makefile.mk to build under Windows 9x.

The surest way to build it is on Windows NT/2000/XP, using the cmd shell.

Make sure the path to the build directory does not contain spaces.  The
build usually works in this circumstance, but some tests will fail.

=item Borland C++

If you are using the Borland compiler, you will need dmake.
(The make that Borland supplies is seriously crippled and will not
work for MakeMaker builds.)

See L</"Make"> above.

=item Microsoft Visual C++

The nmake that comes with Visual C++ will suffice for building.
You will need to run the VCVARS32.BAT file, usually found somewhere
like C:\MSDEV4.2\BIN or C:\Program Files\Microsoft Visual Studio\VC98\Bin.
This will set your build environment.

You can also use dmake to build using Visual C++; provided, however,
you set OSRELEASE to "microsft" (or whatever the directory name
under which the Visual C dmake configuration lives) in your environment
and edit win32/config.vc to change "make=nmake" into "make=dmake".  The
latter step is only essential if you want to use dmake as your default
make for building extensions using MakeMaker.

=item Microsoft Visual C++ 2008 Express Edition

This free version of Visual C++ 2008 Professional contains the same compiler
and linker that ship with the full version, and also contains everything
necessary to build Perl, rather than requiring a separate download of the
Platform SDK like previous versions did.

This package can be downloaded by searching for "Visual Studio 2008 Express
Edition" in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Install Visual C++ 2008, then setup your environment using

	C:\Program Files\Microsoft Visual Studio 9.0\Common7\Tools\vsvars32.bat

(assuming the default installation location was chosen).

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC90FREE

first.

=item Microsoft Visual C++ 2005 Express Edition

This free version of Visual C++ 2005 Professional contains the same compiler
and linker that ship with the full version, but doesn't contain everything
necessary to build Perl.

You will also need to download the "Platform SDK" (the "Core SDK" and "MDAC
SDK" components are required) for more header files and libraries.

These packages can both be downloaded by searching in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Try to obtain the latest version of the Platform SDK.  Sometimes these packages
contain a particular Windows OS version in their name, but actually work on
other OS versions too.  For example, the "Windows Server 2003 R2 Platform SDK"
also runs on Windows XP SP2 and Windows 2000.

According to the download pages these packages are only supported on Windows
2000/XP/2003, so trying to use these tools on Windows 95/98/ME and even Windows
NT probably won't work.

Install Visual C++ 2005 first, then the Platform SDK.  Setup your environment
as follows (assuming default installation locations were chosen):

	SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK

	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual Studio 8\Common7\IDE;C:\Program Files\Microsoft Visual Studio 8\VC\BIN;C:\Program Files\Microsoft Visual Studio 8\Common7\Tools;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\bin;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;C:\Program Files\Microsoft Visual Studio 8\VC\VCPackages;%PlatformSDKDir%\Bin

	SET INCLUDE=C:\Program Files\Microsoft Visual Studio 8\VC\INCLUDE;%PlatformSDKDir%\include

	SET LIB=C:\Program Files\Microsoft Visual Studio 8\VC\LIB;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\lib;%PlatformSDKDir%\lib

	SET LIBPATH=C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727

(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into "C:\Program Files\Microsoft SDK",
while the latest versions install into version-specific locations such as
"C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2".)

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC80FREE

and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.

=item Microsoft Visual C++ Toolkit 2003

This free toolkit contains the same compiler and linker that ship with
Visual C++ .NET 2003 Professional, but doesn't contain everything
necessary to build Perl.

You will also need to download the "Platform SDK" (the "Core SDK" and "MDAC
SDK" components are required) for header files, libraries and rc.exe, and
".NET Framework SDK" for more libraries and nmake.exe.  Note that the latter
(which also includes the free compiler and linker) requires the ".NET
Framework Redistributable" to be installed first.  This can be downloaded and
installed separately, but is included in the "Visual C++ Toolkit 2003" anyway.

These packages can all be downloaded by searching in the Download Center at
http://www.microsoft.com/downloads/search.aspx?displaylang=en.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)

Try to obtain the latest version of the Platform SDK.  Sometimes these packages
contain a particular Windows OS version in their name, but actually work on
other OS versions too.  For example, the "Windows Server 2003 R2 Platform SDK"
also runs on Windows XP SP2 and Windows 2000.

According to the download pages these packages are only supported on Windows
2000/XP/2003, so trying to use these tools on Windows 95/98/ME and even Windows
NT probably won't work.

Install the Toolkit first, then the Platform SDK, then the .NET Framework SDK.
Setup your environment as follows (assuming default installation locations
were chosen):

	SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK

	SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin;%PlatformSDKDir%\Bin;C:\Program Files\Microsoft.NET\SDK\v1.1\Bin

	SET INCLUDE=C:\Program Files\Microsoft Visual C++ Toolkit 2003\include;%PlatformSDKDir%\include;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include

	SET LIB=C:\Program Files\Microsoft Visual C++ Toolkit 2003\lib;%PlatformSDKDir%\lib;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib

(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into "C:\Program Files\Microsoft SDK",
while the latest versions install into version-specific locations such as
"C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2".)

Several required files will still be missing:

=over 4

=item *

cvtres.exe is required by link.exe when using a .res file.  It is actually
installed by the .NET Framework SDK, but into a location such as the
following:

	C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322

Copy it from there to %PlatformSDKDir%\Bin

=item *

lib.exe is normally used to build libraries, but link.exe with the /lib
option also works, so change win32/config.vc to use it instead:

Change the line reading:

	ar='lib'

to:

	ar='link /lib'

It may also be useful to create a batch file called lib.bat in
C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin containing:

	@@echo off
	link /lib %*

for the benefit of any naughty C extension modules that you might want to build
later which explicitly reference "lib" rather than taking their value from
$Config{ar}.

=item *

setargv.obj is required to build perlglob.exe (and perl.exe if the USE_SETARGV
option is enabled).  The Platform SDK supplies this object file in source form
in %PlatformSDKDir%\src\crt.  Copy setargv.c, cruntime.h and
internal.h from there to some temporary location and build setargv.obj using

	cl.exe /c /I. /D_CRTBLD setargv.c

Then copy setargv.obj to %PlatformSDKDir%\lib

Alternatively, if you don't need perlglob.exe and don't need to enable the
USE_SETARGV option then you can safely just remove all mention of $(GLOBEXE)
from win32/Makefile and setargv.obj won't be required anyway.

=back

Perl should now build using the win32/Makefile.  You will need to edit that
file to set

	CCTYPE = MSVC70FREE

and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.

=item Microsoft Platform SDK 64-bit Compiler

The nmake that comes with the Platform SDK will suffice for building
Perl.  Make sure you are building within one of the "Build Environment"
shells available after you install the Platform SDK from the Start Menu.

=item MinGW release 3 with gcc

The latest release of MinGW at the time of writing is 3.1.0, which contains
gcc-3.2.3.  It can be downloaded here:

    http://www.mingw.org/

Perl also compiles with earlier releases of gcc (2.95.2 and up).  See below
for notes about using earlier versions of MinGW/gcc.

And perl also compiles with gcc-4.3.0 and up, and perhaps even some of the
earlier 4.x.x versions.

You also need dmake.  See L</"Make"> above on how to get it.

=item MinGW release 1 with gcc

The MinGW-1.1 bundle contains gcc-2.95.3.

Make sure you install the binaries that work with MSVCRT.DLL as indicated
in the README for the GCC bundle.  You may need to set up a few environment
variables (usually ran from a batch file).

There are a couple of problems with the version of gcc-2.95.2-msvcrt.exe
released 7 November 1999:

=over

=item *

It left out a fix for certain command line quotes.  To fix this, be sure
to download and install the file fixes/quote-fix-msvcrt.exe from the above
ftp location.

=item *

The definition of the fpos_t type in stdio.h may be wrong.  If your
stdio.h has this problem, you will see an exception when running the
test t/lib/io_xs.t.  To fix this, change the typedef for fpos_t from
"long" to "long long" in the file i386-mingw32msvc/include/stdio.h,
and rebuild.

=back

A potentially simpler to install (but probably soon-to-be-outdated) bundle
of the above package with the mentioned fixes already applied is available
here:

    http://downloads.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip
    ftp://ftp.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip

=back

=head2 Building

=over 4

=item *

Make sure you are in the "win32" subdirectory under the perl toplevel.
This directory contains a "Makefile" that will work with
versions of nmake that come with Visual C++ or the Platform SDK, and
a dmake "makefile.mk" that will work for all supported compilers.  The
defaults in the dmake makefile are setup to build using MinGW/gcc.

=item *

Edit the makefile.mk (or Makefile, if you're using nmake) and change
the values of INST_DRV and INST_TOP.   You can also enable various
build flags.  These are explained in the makefiles.

Note that it is generally not a good idea to try to build a perl with
INST_DRV and INST_TOP set to a path that already exists from a previous
build.  In particular, this may cause problems with the
lib/ExtUtils/t/Embed.t test, which attempts to build a test program and
may end up building against the installed perl's lib/CORE directory rather
than the one being tested.

You will have to make sure that CCTYPE is set correctly and that
CCHOME points to wherever you installed your compiler. If building with
gcc-4.x.x, you'll also need to uncomment the assignment to GCC_4XX and
uncomment the assignment to the appropriate GCCHELPERDLL in the makefile.mk.

If building with the cross-compiler provided by
mingw-w64.sourceforge.net you'll need to uncomment the line that sets
GCCCROSS in the makefile.mk. Do this only if it's the cross-compiler - ie
only if the bin folder doesn't contain a gcc.exe. (The cross-compiler
does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these
executables are prefixed with 'x86_64-w64-mingw32-'.)

The default value for CCHOME in the makefiles for Visual C++
may not be correct for some versions.  Make sure the default exists
and is valid.

You may also need to comment out the C<DELAYLOAD = ...> line in the
Makefile if you're using VC++ 6.0 without the latest service pack and
the linker reports an internal error.

If you are using VC++ 4.2 or earlier then you'll have to change the /EHsc
option in the CXX_FLAG macro to the equivalent /GX option.

If you have either the source or a library that contains des_fcrypt(),
enable the appropriate option in the makefile.  A ready-to-use version
of fcrypt.c, based on the version originally written by Eric Young at
ftp://ftp.funet.fi/pub/crypt/mirrors/dsi/libdes/, is bundled with the
distribution and CRYPT_SRC is set to use it.
Alternatively, if you have built a library that contains des_fcrypt(),
you can set CRYPT_LIB to point to the library name.
Perl will also build without des_fcrypt(), but the crypt() builtin will
fail at run time.

If you want build some core extensions statically into perl's dll, specify
them in the STATIC_EXT macro.

Be sure to read the instructions near the top of the makefiles carefully.

=item *

Type "dmake" (or "nmake" if you are using that make).

This should build everything.  Specifically, it will create perl.exe,
perl512.dll at the perl toplevel, and various other extension dll's
under the lib\auto directory.  If the build fails for any reason, make
sure you have done the previous steps correctly.

=back

=head2 Testing Perl on Win32

Type "dmake test" (or "nmake test").  This will run most of the tests from
the testsuite (many tests will be skipped).

There should be no test failures when running under Windows NT/2000/XP.
Many tests I<will> fail under Windows 9x due to the inferior command shell.

Some test failures may occur if you use a command shell other than the
native "cmd.exe", or if you are building from a path that contains
spaces.  So don't do that.

If you are running the tests from a emacs shell window, you may see
failures in op/stat.t.  Run "dmake test-notty" in that case.

If you're using the Borland compiler, you may see a failure in op/taint.t
arising from the inability to find the Borland Runtime DLLs on the system
default path.  You will need to copy the DLLs reported by the messages
from where Borland chose to install it, into the Windows system directory
(usually somewhere like C:\WINNT\SYSTEM32) and rerun the test.

If you're using Borland compiler versions 5.2 and below, you may run into
problems finding the correct header files when building extensions.  For
example, building the "Tk" extension may fail because both perl and Tk
contain a header file called "patchlevel.h".  The latest Borland compiler
(v5.5) is free of this misbehaviour, and it even supports an
option -VI- for backward (bugward) compatibility for using the old Borland
search algorithm  to locate header files.

If you run the tests on a FAT partition, you may see some failures for
C<link()> related tests (I<op/write.t>, I<op/stat.t> ...). Testing on
NTFS avoids these errors.

Furthermore, you should make sure that during C<make test> you do not
have any GNU tool packages in your path: some toolkits like Unixutils
include some tools (C<type> for instance) which override the Windows
ones and makes tests fail. Remove them from your path while testing to
avoid these errors.

Please report any other failures as described under L<BUGS AND CAVEATS>.

=head2 Installation of Perl on Win32

Type "dmake install" (or "nmake install").  This will put the newly
built perl and the libraries under whatever C<INST_TOP> points to in the
Makefile.  It will also install the pod documentation under
C<$INST_TOP\$INST_VER\lib\pod> and HTML versions of the same under
C<$INST_TOP\$INST_VER\lib\pod\html>.

To use the Perl you just installed you will need to add a new entry to
your PATH environment variable: C<$INST_TOP\bin>, e.g.

    set PATH=c:\perl\bin;%PATH%

If you opted to uncomment C<INST_VER> and C<INST_ARCH> in the makefile
then the installation structure is a little more complicated and you will
need to add two new PATH components instead: C<$INST_TOP\$INST_VER\bin> and
C<$INST_TOP\$INST_VER\bin\$ARCHNAME>, e.g.

    set PATH=c:\perl\5.6.0\bin;c:\perl\5.6.0\bin\MSWin32-x86;%PATH%

=head2 Usage Hints for Perl on Win32

=over 4

=item Environment Variables

The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your PATH variable).

If you put extensions in unusual places, you can set PERL5LIB
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in L<perlrun>.

You can also control the shell that perl uses to run system() and
backtick commands via PERL5SHELL.  See L<perlrun>.

Perl does not depend on the registry, but it can look up certain default
values if you choose to put them there.  Perl attempts to read entries from
C<HKEY_CURRENT_USER\Software\Perl> and C<HKEY_LOCAL_MACHINE\Software\Perl>.
Entries in the former override entries in the latter.  One or more of the
following entries (of type REG_SZ or REG_EXPAND_SZ) may be set:

    lib-$]		version-specific standard library path to add to @@INC
    lib			standard library path to add to @@INC
    sitelib-$]		version-specific site library path to add to @@INC
    sitelib		site library path to add to @@INC
    vendorlib-$]	version-specific vendor library path to add to @@INC
    vendorlib		vendor library path to add to @@INC
    PERL*		fallback for all %ENV lookups that begin with "PERL"

Note the C<$]> in the above is not literal.  Substitute whatever version
of perl you want to honor that entry, e.g. C<5.6.0>.  Paths must be
separated with semicolons, as usual on win32.

=item File Globbing

By default, perl handles file globbing using the File::Glob extension,
which provides portable globbing.

If you want perl to use globbing that emulates the quirks of DOS
filename conventions, you might want to consider using File::DosGlob
to override the internal glob() implementation.  See L<File::DosGlob> for
details.

=item Using perl from the command line

If you are accustomed to using perl from various command-line
shells found in UNIX environments, you will be less than pleased
with what Windows offers by way of a command shell.

The crucial thing to understand about the Windows environment is that
the command line you type in is processed twice before Perl sees it.
First, your command shell (usually CMD.EXE on Windows NT, and
COMMAND.COM on Windows 9x) preprocesses the command line, to handle
redirection, environment variable expansion, and location of the
executable to run. Then, the perl executable splits the remaining
command line into individual arguments, using the C runtime library
upon which Perl was built.

It is particularly important to note that neither the shell nor the C
runtime do any wildcard expansions of command-line arguments (so
wildcards need not be quoted).  Also, the quoting behaviours of the
shell and the C runtime are rudimentary at best (and may, if you are
using a non-standard shell, be inconsistent).  The only (useful) quote
character is the double quote (").  It can be used to protect spaces
and other special characters in arguments.

The Windows NT documentation has almost no description of how the
quoting rules are implemented, but here are some general observations
based on experiments: The C runtime breaks arguments at spaces and
passes them to programs in argc/argv.  Double quotes can be used to
prevent arguments with spaces in them from being split up.  You can
put a double quote in an argument by escaping it with a backslash and
enclosing the whole argument within double quotes.  The backslash and
the pair of double quotes surrounding the argument will be stripped by
the C runtime.

The file redirection characters "E<lt>", "E<gt>", and "|" can be quoted by
double quotes (although there are suggestions that this may not always
be true).  Single quotes are not treated as quotes by the shell or
the C runtime, they don't get stripped by the shell (just to make
this type of quoting completely useless).  The caret "^" has also
been observed to behave as a quoting character, but this appears
to be a shell feature, and the caret is not stripped from the command
line, so Perl still sees it (and the C runtime phase does not treat
the caret as a quote character).

Here are some examples of usage of the "cmd" shell:

This prints two doublequotes:

    perl -e "print '\"\"' "

This does the same:

    perl -e "print \"\\\"\\\"\" "

This prints "bar" and writes "foo" to the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" > blurch

This prints "foo" ("bar" disappears into nowhereland):

    perl -e "print 'foo'; print STDERR 'bar'" 2> nul

This prints "bar" and writes "foo" into the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 1> blurch

This pipes "foo" to the "less" pager and prints "bar" on the console:

    perl -e "print 'foo'; print STDERR 'bar'" | less

This pipes "foo\nbar\n" to the less pager:

    perl -le "print 'foo'; print STDERR 'bar'" 2>&1 | less

This pipes "foo" to the pager and writes "bar" in the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch | less


Discovering the usefulness of the "command.com" shell on Windows 9x
is left as an exercise to the reader :)

One particularly pernicious problem with the 4NT command shell for
Windows NT is that it (nearly) always treats a % character as indicating
that environment variable expansion is needed.  Under this shell, it is
therefore important to always double any % characters which you want
Perl to see (for example, for hash variables), even when they are
quoted.

=item Building Extensions

The Comprehensive Perl Archive Network (CPAN) offers a wealth
of extensions, some of which require a C compiler to build.
Look in http://www.cpan.org/ for more information on CPAN.

Note that not all of the extensions available from CPAN may work
in the Win32 environment; you should check the information at
http://testers.cpan.org/ before investing too much effort into
porting modules that don't readily build.

Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:

    perl Makefile.PL
    $MAKE
    $MAKE test
    $MAKE install

where $MAKE is whatever 'make' program you have configured perl to
use.  Use "perl -V:make" to find out what this is.  Some extensions
may not provide a testsuite (so "$MAKE test" may not do anything or
fail), but most serious ones do.

It is important that you use a supported 'make' program, and
ensure Config.pm knows about it.  If you don't have nmake, you can
either get dmake from the location mentioned earlier or get an
old version of nmake reportedly available from:

 http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe

Another option is to use the make written in Perl, available from
CPAN.

    http://www.cpan.org/modules/by-module/Make/

You may also use dmake.  See L</"Make"> above on how to get it.

Note that MakeMaker actually emits makefiles with different syntax
depending on what 'make' it thinks you are using.  Therefore, it is
important that one of the following values appears in Config.pm:

    make='nmake'	# MakeMaker emits nmake syntax
    make='dmake'	# MakeMaker emits dmake syntax
    any other value	# MakeMaker emits generic make syntax
    			    (e.g GNU make, or Perl make)

If the value doesn't match the 'make' program you want to use,
edit Config.pm to fix it.

If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation.

If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.

=item Command-line Wildcard Expansion

The default command shells on DOS descendant operating systems (such
as they are) usually do not expand wildcard arguments supplied to
programs.  They consider it the application's job to handle that.
This is commonly achieved by linking the application (in our case,
perl) with startup code that the C runtime libraries usually provide.
However, doing that results in incompatible perl versions (since the
behavior of the argv expansion code differs depending on the
compiler, and it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary with an
alternate shell that *does* expand wildcards.

Instead, the following solution works rather well. The nice things
about it are 1) you can start using it right away; 2) it is more
powerful, because it will do the right thing with a pattern like
*/*/*.c; 3) you can decide whether you do/don't want to use it; and
4) you can extend the method to add any customizations (or even
entirely different kinds of wildcard expansion).

	C:\> copy con c:\perl\lib\Wild.pm
	# Wild.pm - emulate shell @@ARGV expansion on shells that don't
	use File::DosGlob;
	@@ARGV = map {
		      my @@g = File::DosGlob::glob($_) if /[*?]/;
		      @@g ? @@g : $_;
		    } @@ARGV;
	1;
	^Z
	C:\> set PERL5OPT=-MWild
	C:\> perl -le "for (@@ARGV) { print }" */*/perl*.c
	p4view/perl/perl.c
	p4view/perl/perlio.c
	p4view/perl/perly.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c
	perl5.005/win32/perlglob.c
	perl5.005/win32/perllib.c

Note there are two distinct steps there: 1) You'll have to create
Wild.pm and put it in your perl lib directory. 2) You'll need to
set the PERL5OPT environment variable.  If you want argv expansion
to be the default, just set PERL5OPT in your default startup
environment.

If you are using the Visual C compiler, you can get the C runtime's
command line wildcard expansion built into perl binary.  The resulting
binary will always expand unquoted command lines, which may not be
what you want if you use a shell that does that for you.  The expansion
done is also somewhat less powerful than the approach suggested above.

=item Win32 Specific Extensions

A number of extensions specific to the Win32 platform are available
from CPAN.  You may find that many of these extensions are meant to
be used under the Activeware port of Perl, which used to be the only
native port for the Win32 platform.  Since the Activeware port does not
have adequate support for Perl's extension building tools, these
extensions typically do not support those tools either and, therefore,
cannot be built using the generic steps shown in the previous section.

To ensure smooth transitioning of existing code that uses the
ActiveState port, there is a bundle of Win32 extensions that contains
all of the ActiveState extensions and several other Win32 extensions from
CPAN in source form, along with many added bugfixes, and with MakeMaker
support.  The latest version of this bundle is available at:

    http://search.cpan.org/dist/libwin32/

See the README in that distribution for building and installation
instructions.

=item Notes on 64-bit Windows

Windows .NET Server supports the LLP64 data model on the Intel Itanium
architecture.

The LLP64 data model is different from the LP64 data model that is the
norm on 64-bit Unix platforms.  In the former, C<int> and C<long> are
both 32-bit data types, while pointers are 64 bits wide.  In addition,
there is a separate 64-bit wide integral type, C<__int64>.  In contrast,
the LP64 data model that is pervasive on Unix platforms provides C<int>
as the 32-bit type, while both the C<long> type and pointers are of
64-bit precision.  Note that both models provide for 64-bits of
addressability.

64-bit Windows running on Itanium is capable of running 32-bit x86
binaries transparently.  This means that you could use a 32-bit build
of Perl on a 64-bit system.  Given this, why would one want to build
a 64-bit build of Perl?  Here are some reasons why you would bother:

=over

=item *

A 64-bit native application will run much more efficiently on
Itanium hardware.

=item *

There is no 2GB limit on process size.

=item *

Perl automatically provides large file support when built under
64-bit Windows.

=item *

Embedding Perl inside a 64-bit application.

=back

=back

=head2 Running Perl Scripts

Perl scripts on UNIX use the "#!" (a.k.a "shebang") line to
indicate to the OS that it should execute the file using perl.
Win32 has no comparable means to indicate arbitrary files are
executables.

Instead, all available methods to execute plain text files on
Win32 rely on the file "extension".  There are three methods
to use this to execute perl scripts:

=over 8

=item 1

There is a facility called "file extension associations" that will
work in Windows NT 4.0.  This can be manipulated via the two
commands "assoc" and "ftype" that come standard with Windows NT
4.0.  Type "ftype /?" for a complete example of how to set this
up for perl scripts (Say what?  You thought Windows NT wasn't
perl-ready? :).

=item 2

Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the OS, may be used.  The install process
makes available the "pl2bat.bat" script which can be used to wrap
perl scripts into batch files.  For example:

	pl2bat foo.pl

will create the file "FOO.BAT".  Note "pl2bat" strips any
.pl suffix and adds a .bat suffix to the generated file.

If you use the 4DOS/NT or similar command shell, note that
"pl2bat" uses the "%*" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a "ParameterChar = *" statement in their
4NT.INI file or will need to execute "setdos /p*" in the 4DOS/NT
startup file to enable this to work.

=item 3

Using "pl2bat" has a few problems:  the file name gets changed,
so scripts that rely on C<$0> to find what they must do may not
run properly; running "pl2bat" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.

A script called "runperl.bat" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it "foo.bat", it will run the file "foo" when it is
executed.  Since you can run batch files on Win32 platforms simply
by typing the name (without the extension), this effectively
runs the file "foo", when you type either "foo" or "foo.bat".
With this method, "foo.bat" can even be in a different location
than the file "foo", as long as "foo" is available somewhere on
the PATH.  If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying "runperl.bat".

Here's a diversion:  copy "runperl.bat" to "runperl", and type
"runperl".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,"lrepnur" eteled :tniH

=back

=head2 Miscellaneous Things

A full set of HTML documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.

C<perldoc> is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like C<less> (recent versions of which have Win32 support).  You may
have to set the PAGER environment variable to use a specific pager.
"perldoc -f foo" will print information about the perl operator
"foo".

One common mistake when using this port with a GUI library like C<Tk>
is assuming that Perl's normal behavior of opening a command-line
window will go away.  This isn't the case.  If you want to start a copy
of C<perl> without opening a command-line window, use the C<wperl>
executable built during the installation process.  Usage is exactly
the same as normal C<perl> on Win32, except that options like C<-h>
don't work (since they need a command-line window to print to).

If you find bugs in perl, you can run C<perlbug> to create a
bug report (you may have to send it manually if C<perlbug> cannot
find a mailer on your system).

=head1 BUGS AND CAVEATS

Norton AntiVirus interferes with the build process, particularly if
set to "AutoProtect, All Files, when Opened". Unlike large applications
the perl build process opens and modifies a lot of files. Having the
the AntiVirus scan each and every one slows build the process significantly.
Worse, with PERLIO=stdio the build process fails with peculiar messages
as the virus checker interacts badly with miniperl.exe writing configure
files (it seems to either catch file part written and treat it as suspicious,
or virus checker may have it "locked" in a way which inhibits miniperl
updating it). The build does complete with

   set PERLIO=perlio

but that may be just luck. Other AntiVirus software may have similar issues.

Some of the built-in functions do not act exactly as documented in
L<perlfunc>, and a few are not implemented at all.  To avoid
surprises, particularly if you have had prior exposure to Perl
in other operating environments or if you intend to write code
that will be portable to other environments, see L<perlport>
for a reasonably definitive list of these differences.

Not all extensions available from CPAN may build or work properly
in the Win32 environment.  See L</"Building Extensions">.

Most C<socket()> related calls are supported, but they may not
behave as on Unix platforms.  See L<perlport> for the full list.
Perl requires Winsock2 to be installed on the system. If you're
running Win95, you can download Winsock upgrade from here:

http://www.microsoft.com/windows95/downloads/contents/WUAdminTools/S_WUNetworkingTools/W95Sockets2/Default.asp

Later OS versions already include Winsock2 support.

Signal handling may not behave as on Unix platforms (where it
doesn't exactly "behave", either :).  For instance, calling C<die()>
or C<exit()> from signal handlers will cause an exception, since most
implementations of C<signal()> on Win32 are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.

Please send detailed descriptions of any problems and solutions that
you may find to E<lt>F<perlbug@@perl.org>E<gt>, along with the output
produced by C<perl -V>.

=head1 ACKNOWLEDGEMENTS

The use of a camel with the topic of Perl is a trademark
of O'Reilly and Associates, Inc. Used with permission.

=head1 AUTHORS

=over 4

=item Gary Ng E<lt>71564.1743@@CompuServe.COME<gt>

=item Gurusamy Sarathy E<lt>gsar@@activestate.comE<gt>

=item Nick Ing-Simmons E<lt>nick@@ing-simmons.netE<gt>

=item Jan Dubois E<lt>jand@@activestate.comE<gt>

=item Steve Hay E<lt>steve.hay@@uk.radan.comE<gt>

=back

This document is maintained by Jan Dubois.

=head1 SEE ALSO

L<perl>

=head1 HISTORY

This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.  Various people have made numerous and sundry hacks
since then.

Borland support was added in 5.004_01 (Gurusamy Sarathy).

GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).

Support for PERL_OBJECT was added in 5.005 (ActiveState Tool Corp).

Support for fork() emulation was added in 5.6 (ActiveState Tool Corp).

Win9x support was added in 5.6 (Benjamin Stuhl).

Support for 64-bit Windows added in 5.8 (ActiveState Corp).

Last updated: 29 August 2007

=cut
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d11 2
a12 1
These are instructions for building Perl under Windows 2000 and later.
d29 7
a35 6
You may also want to look at one other option for building a perl that
will work on Windows: the README.cygwin file, which give a different
set of rules to build a perl for Windows.  This method will probably
enable you to build a more Unix-compatible perl, but you will also
need to download and use various other build-time and run-time support
software described in that file.
d38 1
a38 1
port of Perl to the Windows platform.  This includes both 32-bit and
d44 4
a47 2
      Microsoft Visual C++    version 6.0 or later
      Gcc by mingw.org        gcc version 3.2 or later
d52 16
a67 21

=over 4

=item L<http://mingw.org>

Delivers gcc toolchain targeting 32-bit Windows platform.

=item L<http://mingw-w64.sf.net>

Delivers gcc toolchain targeting both 64-bit Windows and 32-bit Windows
platforms (despite the project name "mingw-w64" they are not only 64-bit
oriented). They deliver the native gcc compilers and cross-compilers
that are also supported by perl's makefile.

=back

The Microsoft Visual C++ compilers are also now being given away free. They are
available as "Visual C++ Toolkit 2003" or "Visual C++ 2005/2008/2010 Express
Edition" (and also as part of the ".NET Framework SDK") and are the same
compilers that ship with "Visual C++ .NET 2003 Professional" or "Visual C++
2005/2008/2010 Professional" respectively.
d74 2
a75 2
The Windows SDK can be downloaded from L<http://www.microsoft.com/>.
The MinGW64 compiler is available at L<http://sourceforge.net/projects/mingw-w64>.
d78 1
a78 1
L<http://strawberryperl.com/package/kmx/64_gcctoolchain/>
d88 1
a88 1
See L<Usage Hints for Perl on Windows> below for general hints about this.
d90 1
a90 1
=head2 Setting Up Perl on Windows
d97 2
a98 2
Visual C++ or the Windows SDK tools, nmake will work.  Builds using
the gcc need dmake.
d105 1
a105 1
L<http://search.cpan.org/dist/dmake/>
d109 10
d121 1
a121 1
Use the default "cmd" shell that comes with Windows.  Some versions of the
d126 6
d135 8
d147 1
a147 1
like C:\Program Files\Microsoft Visual Studio\VC98\Bin.
d157 1
a157 6
=item Microsoft Visual C++ 2008/2010 Express Edition

These free versions of Visual C++ 2008/2010 Professional contain the same
compilers and linkers that ship with the full versions, and also contain
everything necessary to build Perl, rather than requiring a separate download
of the Windows SDK like previous versions did.
d159 8
a166 2
These packages can be downloaded by searching in the Download Center at
L<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
d170 1
a170 1
Install Visual C++ 2008/2010 Express, then setup your environment using, e.g.
d172 1
a172 1
	C:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools\vsvars32.bat
d177 5
a181 1
file to set CCTYPE to MSVC90FREE or MSVC100FREE first.
d189 1
a189 1
You will also need to download the "Windows SDK" (the "Core SDK" and "MDAC
d193 1
a193 1
L<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
d197 1
a197 1
Try to obtain the latest version of the Windows SDK.  Sometimes these packages
d202 4
d245 1
a245 1
L<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
d249 1
a249 1
Try to obtain the latest version of the Windows SDK.  Sometimes these packages
d254 4
d344 2
a345 2
Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.2.x
and later).  It can be downloaded here:
d347 7
a353 1
L<http://www.mingw.org/>
d357 36
d403 1
a403 1
versions of nmake that come with Visual C++ or the Windows SDK, and
d421 3
a423 1
CCHOME points to wherever you installed your compiler.
d440 13
d463 1
a463 1
perl516.dll at the perl toplevel, and various other extension dll's
d469 1
a469 1
=head2 Testing Perl on Windows
d474 2
a475 1
There should be no test failures.
d484 14
d510 1
a510 1
=head2 Installation of Perl on Windows
d530 1
a530 1
=head2 Usage Hints for Perl on Windows
d564 1
a564 1
separated with semicolons, as usual on Windows.
d584 6
a589 5
First, your command shell (usually CMD.EXE) preprocesses the command
line, to handle redirection, environment variable expansion, and
location of the executable to run. Then, the perl executable splits
the remaining command line into individual arguments, using the
C runtime library upon which Perl was built.
d599 9
a607 12
The Windows documentation describes the shell parsing rules here:
L<http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true>
and the C runtime parsing rules here:
L<http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx>.

Here are some further observations based on experiments: The C runtime
breaks arguments at spaces and passes them to programs in argc/argv.
Double quotes can be used to prevent arguments with spaces in them from
being split up.  You can put a double quote in an argument by escaping
it with a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the argument will
be stripped by the C runtime.
d658 1
a658 1
Windows is that it (nearly) always treats a % character as indicating
d668 1
a668 1
Look in L<http://www.cpan.org/> for more information on CPAN.
d671 2
a672 2
in the Windows environment; you should check the information at
L<http://testers.cpan.org/> before investing too much effort into
d693 1
a693 1
L<http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe>
d698 1
a698 1
L<http://www.cpan.org/modules/by-module/Make/>
d777 21
d845 1
a845 1
Windows has no comparable means to indicate arbitrary files are
d849 1
a849 1
Windows rely on the file "extension".  There are three methods
d856 6
a861 5
There is a facility called "file extension associations".  This can be
manipulated via the two commands "assoc" and "ftype" that come
standard with Windows.  Type "ftype /?" for a complete example of how
to set this up for perl scripts (Say what?  You thought Windows
wasn't perl-ready? :).
d897 1
a897 1
executed.  Since you can run batch files on Windows platforms simply
d919 1
a919 1
like C<less> (recent versions of which have Windows support).  You may
d929 1
a929 1
the same as normal C<perl> on Windows, except that options like C<-h>
d960 1
a960 1
in the Windows environment.  See L</"Building Extensions">.
d964 6
d974 1
a974 1
implementations of C<signal()> on Windows are severely crippled.
d1000 1
a1000 1
=item Steve Hay E<lt>steve.m.hay@@googlemail.comE<gt>
d1017 2
d1029 1
a1029 1
Last updated: 10 September 2011
@


1.1.1.13
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d65 1
a65 1
available as "Visual C++ Toolkit 2003" or "Visual C++ 2005/2008/2010/2012 Express
d68 1
a68 1
2005/2008/2010/2012 Professional" respectively.
d134 1
a134 1
=item Microsoft Visual C++ 2008/2010/2012 Express Edition
d136 1
a136 1
These free versions of Visual C++ 2008/2010/2012 Professional contain the same
d146 1
a146 1
Install Visual C++ 2008/2010/2012 Express, then setup your environment using, e.g.
d148 1
a148 1
	C:\Program Files\Microsoft Visual Studio 11.0\Common7\Tools\vsvars32.bat
d370 1
a370 1
perl518.dll at the perl toplevel, and various other extension dll's
d893 1
a893 1
Last updated: 02 January 2012
@


1.1.1.14
log
@Import perl-5.20.1
@
text
@d43 1
a43 2
      Intel C++ Compiler      (experimental)
      Gcc by mingw.org        gcc version 3.4.5 or later
d65 1
a65 1
available as "Visual C++ Toolkit 2003" or "Visual C++ 2005-2013 Express
d68 1
a68 1
2005-2013 Professional" respectively.
d134 1
a134 1
=item Microsoft Visual C++ 2008-2013 Express Edition
d136 1
a136 1
These free versions of Visual C++ 2008-2013 Professional contain the same
d146 1
a146 1
Install Visual C++ 2008-2013 Express, then setup your environment using, e.g.
d148 1
a148 1
	C:\Program Files\Microsoft Visual Studio 12.0\Common7\Tools\vsvars32.bat
d153 1
a153 1
file to set CCTYPE to one of MSVC90FREE-MSVC120FREE first.
d308 1
a308 1
Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.4.5
a314 12
=item Intel C++ Compiler

Experimental support for using Intel C++ Compiler has been added. Edit
win32/Makefile and pick the correct CCTYPE for the Visual C that Intel C was
installed into. Also uncomment __ICC to enable Intel C on Visual C support.
To set up the build enviroment, from the Start Menu run
IA-32 Visual Studio 20__ mode or Intel 64 Visual Studio 20__ mode as
appropriate. Then run nmake as usually in that prompt box.

Only Intel C++ Compiler v12.1 has been tested. Other versions probably will
work.

a362 3
NOTE: The USE_64_BIT_INT build option is not supported with the 32-bit
Visual C++ 6.0 compiler.

d370 1
a370 1
perl520.dll at the perl toplevel, and various other extension dll's
a382 13
If you build with Visual C++ 2013 then three tests currently may fail with
Daylight Saving Time related problems: F<t/io/fs.t>,
F<cpan/HTTP-Tiny/t/110_mirror.t> and F<lib/File.Copy.t>. The failures are
caused by bugs in the CRT in VC++ 2013 which will be fixed in future releases
of VC++, as explained by Microsoft here:
L<https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013>. In the meantime,
if you need fixed C<stat> and C<utime> functions then have a look at the
CPAN distribution Win32::UTCFileTime.

If you build with certain versions (e.g. 4.8.1) of gcc from www.mingw.org then
F<ext/POSIX/t/time.t> may fail test 17 due to a known bug in those gcc builds:
see L<http://sourceforge.net/p/mingw/bugs/2152/>.

d390 4
d893 1
a893 1
Last updated: 22 October 2013
@


1.1.1.15
log
@Import perl-5.20.2
@
text
@d123 4
a126 14
The nmake that comes with Visual C++ will suffice for building. Visual C
requires that certain things be set up in the console before Visual C will
sucessfully run. To make a console box be able to run the C compiler, you will
need to beforehand, run the C<vcvars32.bat> file to compile for x86-32 and for
x86-64 C<vcvarsall.bat x64> or C<vcvarsamd64.bat>. On a typical install of a
Microsoft C compiler product, these batch files will already be in your C<PATH>
environment variable so you may just type them without an absolute path into
your console. If you need to find the absolute path to the batch file, it is
usually found somewhere like C:\Program Files\Microsoft Visual Studio\VC98\Bin.
With some newer Micrsoft C products (released after ~2004), the installer will
put a shortcut in the start menu to launch a new console window with the
console already set up for your target architecture (x86-32 or x86-64 or IA64).
With the newer compilers, you may also use the older batch files if you choose
so.
a389 7
If you are advanced enough with building C code, here is a suggestion to speed
up building perl, and the later C<make test>. Try to keep your PATH enviromental
variable with the least number of folders possible (remember to keep your C
compiler's folders there). C<C:\WINDOWS\system32> or C<C:\WINNT\system32>
depending on your OS version should be first folder in PATH, since "cmd.exe"
is the most commonly launched program during the build and later testing.

d591 1
a591 1
L<http://www.cpantesters.org/> before investing too much effort into
d635 1
a635 2
the compiler for command-line compilation before running C<perl Makefile.PL>
or any invocation of make.
a848 8
A git GUI shell extension for Windows such as TortoiseGit will cause the build
and later C<make test> to run much slower since every file is checked for its
git status as soon as it is created and/or modified. TortoiseGit doesn't cause
any test failures or build problems unlike the antivirus software described
above, but it does cause similar slowness. It is suggested to use Task Manager
to look for background processes which use high CPU amounts during the building
process.

d918 1
a918 1
Last updated: 07 October 2014
@


1.1.1.16
log
@Import perl-5.24.2
@
text
@d45 1
a45 1
      Gcc by mingw-w64.org    gcc version 4.4.3 or later
d56 1
a56 1
=item L<http://mingw-w64.org>
d77 1
a77 1
The MinGW64 compiler is available at L<http://mingw-w64.org>.
d99 5
a103 9
Visual C++ or the Windows SDK tools, you can use nmake supplied with Visual C++
or Windows SDK. You may also use, for Visual C++ or Windows SDK, dmake or gmake
instead of nmake.  dmake is open source software, but is not included with
Visual C++ or Windows SDK.  Builds using gcc need dmake or gmake.  nmake is not
supported for gcc builds.  Parallel building is only supported with dmake and
gmake, not nmake.  When using dmake it is recommended to use dmake 4.13 or newer
for parallel building.  Older dmakes, in parallel mode, have very high CPU usage
and pound the disk/filing system with duplicate I/O calls in an aggressive
polling loop.
d138 7
d159 1
a159 1
 C:\Program Files\Microsoft Visual Studio 12.0\Common7\Tools\vsvars32.bat
d188 1
a188 1
 SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK
d190 1
a190 1
 SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual Studio 8\Common7\IDE;C:\Program Files\Microsoft Visual Studio 8\VC\BIN;C:\Program Files\Microsoft Visual Studio 8\Common7\Tools;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\bin;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;C:\Program Files\Microsoft Visual Studio 8\VC\VCPackages;%PlatformSDKDir%\Bin
d192 1
a192 1
 SET INCLUDE=C:\Program Files\Microsoft Visual Studio 8\VC\INCLUDE;%PlatformSDKDir%\include
d194 1
a194 1
 SET LIB=C:\Program Files\Microsoft Visual Studio 8\VC\LIB;C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\lib;%PlatformSDKDir%\lib
d196 1
a196 1
 SET LIBPATH=C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727
d206 1
a206 1
 CCTYPE = MSVC80FREE
d237 1
a237 1
 SET PlatformSDKDir=C:\Program Files\Microsoft Platform SDK
d239 1
a239 1
 SET PATH=%SystemRoot%\system32;%SystemRoot%;C:\Program Files\Microsoft Visual C++ Toolkit 2003\bin;%PlatformSDKDir%\Bin;C:\Program Files\Microsoft.NET\SDK\v1.1\Bin
d241 1
a241 1
 SET INCLUDE=C:\Program Files\Microsoft Visual C++ Toolkit 2003\include;%PlatformSDKDir%\include;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include
d243 1
a243 1
 SET LIB=C:\Program Files\Microsoft Visual C++ Toolkit 2003\lib;%PlatformSDKDir%\lib;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib
d260 1
a260 1
 C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322
d336 1
a336 4
work. Using Intel C++ Compiler instead of Visual C has the benefit of C99
compatibility which is needed by some CPAN XS modules, while maintaining
compatibility with Visual C object code and Visual C debugging infrastructure
unlike GCC.
d369 1
a369 1
mingw-w64.org you'll need to uncomment the line that sets
d396 1
a396 1
perl524.dll at the perl toplevel, and various other extension dll's
a399 5
To try dmake's parallel mode, type "dmake -P2", where 2, is the maximum number
of parallel jobs you want to run. A number of things in the build process will
run in parallel, but there are serialization points where you will see just 1
CPU maxed out. This is normal.

d418 1
a418 1
F<cpan/HTTP-Tiny/t/110_mirror.t> and F<lib/File/Copy.t>. The failures are
d483 12
a494 16
values if you choose to put them there unless disabled at build time with
USE_NO_REGISTRY.  On Perl process start Perl checks if
C<HKEY_CURRENT_USER\Software\Perl> and C<HKEY_LOCAL_MACHINE\Software\Perl>
exist.  If the keys exists, they will be checked for remainder of the Perl
process's run life for certain entries.  Entries in
C<HKEY_CURRENT_USER\Software\Perl> override entries in
C<HKEY_LOCAL_MACHINE\Software\Perl>.  One or more of the following entries
(of type REG_SZ or REG_EXPAND_SZ) may be set in the keys:

 lib-$]        version-specific standard library path to add to @@INC
 lib           standard library path to add to @@INC
 sitelib-$]    version-specific site library path to add to @@INC
 sitelib       site library path to add to @@INC
 vendorlib-$]  version-specific vendor library path to add to @@INC
 vendorlib     vendor library path to add to @@INC
 PERL*         fallback for all %ENV lookups that begin with "PERL"
d681 20
a700 20
 C:\> copy con c:\perl\lib\Wild.pm
 # Wild.pm - emulate shell @@ARGV expansion on shells that don't
 use File::DosGlob;
 @@ARGV = map {
	      my @@g = File::DosGlob::glob($_) if /[*?]/;
	      @@g ? @@g : $_;
	    } @@ARGV;
 1;
 ^Z
 C:\> set PERL5OPT=-MWild
 C:\> perl -le "for (@@ARGV) { print }" */*/perl*.c
 p4view/perl/perl.c
 p4view/perl/perlio.c
 p4view/perl/perly.c
 perl5.005/win32/perlglob.c
 perl5.005/win32/perllib.c
 perl5.005/win32/perlglob.c
 perl5.005/win32/perllib.c
 perl5.005/win32/perlglob.c
 perl5.005/win32/perllib.c
@


