head	1.14;
access;
symbols
	PERL_5_24_2:1.1.1.13
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.12
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.6
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.8
	OPENBSD_5_8_BASE:1.13
	PERL_5_20_2:1.1.1.12
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	PERL_5_20_1:1.1.1.12
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	PERL_5_16_3:1.1.1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.14
date	2017.02.05.00.31.53;	author afresh1;	state Exp;
branches;
next	1.13;
commitid	cxJ08BvJA9Pt2PTM;

1.13
date	2014.03.24.15.05.13;	author afresh1;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.25.20.40.45;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.22;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.35.59;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.22.59;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.15.21.30.22;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.22;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.19;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.34.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.04.25;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.11;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.49.17;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.11.49;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.11.49;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.37.55;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.08.47;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.22.22;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.51;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.37;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.16.34;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.47.41;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.10;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.35;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.06.40;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.58.47;	author afresh1;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2017.08.14.13.45.30;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.14
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@/*    run.c
 *
 *    Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
 *    2000, 2001, 2004, 2005, 2006, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/* This file contains the main Perl opcode execution loop. It just
 * calls the pp_foo() function associated with each op, and expects that
 * function to return a pointer to the next op to be executed, or null if
 * it's the end of the sub or program or whatever.
 *
 * There is a similar loop in dump.c, Perl_runops_debug(), which does
 * the same, but also checks for various debug flags each time round the
 * loop.
 *
 * Why this function requires a file all of its own is anybody's guess.
 * DAPM.
 */

#include "EXTERN.h"
#define PERL_IN_RUN_C
#include "perl.h"

/*
 * 'Away now, Shadowfax!  Run, greatheart, run as you have never run before!
 *  Now we are come to the lands where you were foaled, and every stone you
 *  know.  Run now!  Hope is in speed!'                    --Gandalf
 *
 *     [p.600 of _The Lord of the Rings_, III/xi: "The PalantÃ­r"]
 */

int
Perl_runops_standard(pTHX)
{
    OP *op = PL_op;
    PERL_DTRACE_PROBE_OP(op);
    while ((PL_op = op = op->op_ppaddr(aTHX))) {
        PERL_DTRACE_PROBE_OP(op);
    }
    PERL_ASYNC_CHECK();

    TAINT_NOT;
    return 0;
}

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
@


1.13
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@a38 1
    dVAR;
d40 1
a40 1
    OP_ENTRY_PROBE(OP_NAME(op));
d42 1
a42 1
        OP_ENTRY_PROBE(OP_NAME(op));
a50 6
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
@


1.12
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d40 2
a41 1
    register OP *op = PL_op;
d43 1
d45 1
d55 1
a55 1
 * indent-tabs-mode: t
d58 1
a58 1
 * ex: set ts=8 sts=4 sw=4 noet:
@


1.11
log
@Merge in perl 5.10.1
@
text
@d33 1
a33 1
 *     [p.600 of _The Lord of the Rings_, III/xi: "The Palantír"]
d40 2
a41 2
    while ((PL_op = CALL_FPTR(PL_op->op_ppaddr)(aTHX))) {
	PERL_ASYNC_CHECK();
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d29 5
a33 3
 * "Away now, Shadowfax!  Run, greatheart, run as you have never run before!
 * Now we are come to the lands where you were foaled, and every stone you
 * know.  Run now!  Hope is in speed!"  --Gandalf
@


1.9
log
@merge in perl 5.8.8
@
text
@d4 1
a4 1
 *    2000, 2001, by Larry Wall and others
d37 1
@


1.8
log
@sync in-tree perl with 5.8.6
@
text
@d45 9
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d11 13
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 2
a4 1
 *    Copyright (c) 1991-2002, Larry Wall
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-2001, Larry Wall
a30 108
int
Perl_runops_debug(pTHX)
{
#ifdef DEBUGGING
    if (!PL_op) {
	if (ckWARN_d(WARN_DEBUGGING))
	    Perl_warner(aTHX_ WARN_DEBUGGING, "NULL OP IN RUN");
	return 0;
    }

    do {
	PERL_ASYNC_CHECK();
	if (PL_debug) {
	    if (PL_watchaddr != 0 && *PL_watchaddr != PL_watchok)
		PerlIO_printf(Perl_debug_log,
			      "WARNING: %"UVxf" changed from %"UVxf" to %"UVxf"\n",
			      PTR2UV(PL_watchaddr), PTR2UV(PL_watchok),
			      PTR2UV(*PL_watchaddr));
	    DEBUG_s(debstack());
	    DEBUG_t(debop(PL_op));
	    DEBUG_P(debprof(PL_op));
	}
    } while ((PL_op = CALL_FPTR(PL_op->op_ppaddr)(aTHX)));

    TAINT_NOT;
    return 0;
#else
    return runops_standard();
#endif	/* DEBUGGING */
}

I32
Perl_debop(pTHX_ OP *o)
{
#ifdef DEBUGGING
    SV *sv;
    SV **svp;
    STRLEN n_a;
    Perl_deb(aTHX_ "%s", PL_op_name[o->op_type]);
    switch (o->op_type) {
    case OP_CONST:
	PerlIO_printf(Perl_debug_log, "(%s)", SvPEEK(cSVOPo_sv));
	break;
    case OP_GVSV:
    case OP_GV:
	if (cGVOPo_gv) {
	    sv = NEWSV(0,0);
	    gv_fullname3(sv, cGVOPo_gv, Nullch);
	    PerlIO_printf(Perl_debug_log, "(%s)", SvPV(sv, n_a));
	    SvREFCNT_dec(sv);
	}
	else
	    PerlIO_printf(Perl_debug_log, "(NULL)");
	break;
    case OP_PADSV:
    case OP_PADAV:
    case OP_PADHV:
	/* print the lexical's name */
	svp = av_fetch(PL_comppad_name, o->op_targ, FALSE);
	if (svp)
	    PerlIO_printf(Perl_debug_log, "(%s)", SvPV(*svp,n_a));
	else
           PerlIO_printf(Perl_debug_log, "[%"UVuf"]", (UV)o->op_targ);
	break;
    default:
	break;
    }
    PerlIO_printf(Perl_debug_log, "\n");
#endif	/* DEBUGGING */
    return 0;
}

void
Perl_watch(pTHX_ char **addr)
{
#ifdef DEBUGGING
    PL_watchaddr = addr;
    PL_watchok = *addr;
    PerlIO_printf(Perl_debug_log, "WATCHING, %"UVxf" is currently %"UVxf"\n",
	PTR2UV(PL_watchaddr), PTR2UV(PL_watchok));
#endif	/* DEBUGGING */
}

STATIC void
S_debprof(pTHX_ OP *o)
{
#ifdef DEBUGGING
    if (!PL_profiledata)
	Newz(000, PL_profiledata, MAXO, U32);
    ++PL_profiledata[o->op_type];
#endif /* DEBUGGING */
}

void
Perl_debprofdump(pTHX)
{
#ifdef DEBUGGING
    unsigned i;
    if (!PL_profiledata)
	return;
    for (i = 0; i < MAXO; i++) {
	if (PL_profiledata[i])
	    PerlIO_printf(Perl_debug_log,
			  "%5lu %s\n", (unsigned long)PL_profiledata[i],
                                       PL_op_name[i]);
    }
#endif	/* DEBUGGING */
}
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-2000, Larry Wall
a22 2
    dTHR;

a34 1
    dTHR;
d67 1
d85 10
a106 1
    dTHR;
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-1999, Larry Wall
d11 1
a19 6
#ifdef PERL_OBJECT
#define CALLOP this->*PL_op
#else
#define CALLOP *PL_op
#endif

d21 1
a21 1
runops_standard(void)
d25 3
a27 1
    while ( PL_op = (CALLOP->op_ppaddr)(ARGS) ) ;
a32 11
#ifdef DEBUGGING

dEXT char **watchaddr = 0;
dEXT char *watchok;

#ifndef PERL_OBJECT
static void debprof _((OP*o));
#endif

#endif	/* DEBUGGING */

d34 1
a34 1
runops_debug(void)
d39 2
a40 1
	warn("NULL OP IN RUN");
d45 1
d47 5
a51 3
	    if (watchaddr != 0 && *watchaddr != watchok)
		PerlIO_printf(Perl_debug_log, "WARNING: %lx changed from %lx to %lx\n",
		    (long)watchaddr, (long)watchok, (long)*watchaddr);
d56 1
a56 1
    } while ( PL_op = (CALLOP->op_ppaddr)(ARGS) );
d66 1
a66 1
debop(OP *o)
d71 1
a71 1
    deb("%s", op_name[o->op_type]);
d74 1
a74 1
	PerlIO_printf(Perl_debug_log, "(%s)", SvPEEK(cSVOPo->op_sv));
d78 1
a78 1
	if (cGVOPo->op_gv) {
d80 1
a80 1
	    gv_fullname3(sv, cGVOPo->op_gv, Nullch);
d96 1
a96 1
watch(char **addr)
d99 5
a103 4
    watchaddr = addr;
    watchok = *addr;
    PerlIO_printf(Perl_debug_log, "WATCHING, %lx is currently %lx\n",
	(long)watchaddr, (long)watchok);
d108 1
a108 1
debprof(OP *o)
d118 1
a118 1
debprofdump(void)
d128 1
a128 1
                                       op_name[i]);
@


1.2
log
@perl 5.004_04
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-1997, Larry Wall
d19 5
a23 4
dEXT char **watchaddr = 0;
dEXT char *watchok;

#ifndef DEBUGGING
d26 3
a28 3
runops() {
    SAVEI32(runlevel);
    runlevel++;
d30 1
a30 1
    while ( op = (*op->op_ppaddr)() ) ;
d36 8
a43 1
#else
d45 1
a45 1
static void debprof _((OP*op));
d48 5
a52 2
runops() {
    if (!op) {
a56 3
    SAVEI32(runlevel);
    runlevel++;

d58 1
a58 1
	if (debug) {
d63 2
a64 2
	    DEBUG_t(debop(op));
	    DEBUG_P(debprof(op));
d66 1
a66 1
    } while ( op = (*op->op_ppaddr)() );
d70 3
d76 1
a76 2
debop(op)
OP *op;
d78 1
d80 3
a82 2
    deb("%s", op_name[op->op_type]);
    switch (op->op_type) {
d84 1
a84 1
	PerlIO_printf(Perl_debug_log, "(%s)", SvPEEK(cSVOP->op_sv));
d88 1
a88 1
	if (cGVOP->op_gv) {
d90 2
a91 2
	    gv_fullname3(sv, cGVOP->op_gv, Nullch);
	    PerlIO_printf(Perl_debug_log, "(%s)", SvPV(sv, na));
d101 1
d106 1
a106 2
watch(addr)
char **addr;
d108 1
d113 1
d116 8
a123 7
static void
debprof(op)
OP* op;
{
    if (!profiledata)
	New(000, profiledata, MAXO, U32);
    ++profiledata[op->op_type];
d127 1
a127 1
debprofdump()
d129 1
d131 1
a131 1
    if (!profiledata)
d134 1
a134 1
	if (profiledata[i])
d136 2
a137 1
			  "%u\t%lu\n", i, (unsigned long)profiledata[i]);
d139 1
a140 3

#endif

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-1994, Larry Wall
d30 2
d52 1
a52 1
		fprintf(stderr, "WARNING: %lx changed from %lx to %lx\n",
d59 2
d72 1
a72 1
	fprintf(stderr, "(%s)", SvPEEK(cSVOP->op_sv));
d78 2
a79 2
	    gv_fullname(sv, cGVOP->op_gv);
	    fprintf(stderr, "(%s)", SvPV(sv, na));
d83 1
a83 1
	    fprintf(stderr, "(NULL)");
d88 1
a88 1
    fprintf(stderr, "\n");
d98 1
a98 1
    fprintf(stderr, "WATCHING, %lx is currently %lx\n",
d114 1
a114 1
    U32 i;
d119 2
a120 1
	    fprintf(stderr, "%d\t%lu\n", i, profiledata[i]);
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-1999, Larry Wall
d19 4
a22 5
#ifdef PERL_OBJECT
#define CALLOP this->*PL_op
#else
#define CALLOP *PL_op
#endif
d25 3
a27 3
runops_standard(void)
{
    dTHR;
d29 1
a29 3
    while ( PL_op = (CALLOP->op_ppaddr)(ARGS) ) ;

    TAINT_NOT;
d33 1
a33 1
#ifdef DEBUGGING
d35 1
a35 8
dEXT char **watchaddr = 0;
dEXT char *watchok;

#ifndef PERL_OBJECT
static void debprof _((OP*o));
#endif

#endif	/* DEBUGGING */
d38 2
a39 5
runops_debug(void)
{
#ifdef DEBUGGING
    dTHR;
    if (!PL_op) {
d44 3
d48 1
a48 1
	if (PL_debug) {
d50 1
a50 1
		PerlIO_printf(Perl_debug_log, "WARNING: %lx changed from %lx to %lx\n",
d53 2
a54 2
	    DEBUG_t(debop(PL_op));
	    DEBUG_P(debprof(PL_op));
d56 1
a56 3
    } while ( PL_op = (CALLOP->op_ppaddr)(ARGS) );

    TAINT_NOT;
a57 3
#else
    return runops_standard();
#endif	/* DEBUGGING */
d61 2
a62 1
debop(OP *o)
a63 1
#ifdef DEBUGGING
d65 2
a66 3
    STRLEN n_a;
    deb("%s", op_name[o->op_type]);
    switch (o->op_type) {
d68 1
a68 1
	PerlIO_printf(Perl_debug_log, "(%s)", SvPEEK(cSVOPo->op_sv));
d72 1
a72 1
	if (cGVOPo->op_gv) {
d74 2
a75 2
	    gv_fullname3(sv, cGVOPo->op_gv, Nullch);
	    PerlIO_printf(Perl_debug_log, "(%s)", SvPV(sv, n_a));
d79 1
a79 1
	    PerlIO_printf(Perl_debug_log, "(NULL)");
d84 1
a84 2
    PerlIO_printf(Perl_debug_log, "\n");
#endif	/* DEBUGGING */
d89 2
a90 1
watch(char **addr)
a91 1
#ifdef DEBUGGING
d94 1
a94 1
    PerlIO_printf(Perl_debug_log, "WATCHING, %lx is currently %lx\n",
a95 1
#endif	/* DEBUGGING */
d98 7
a104 8
STATIC void
debprof(OP *o)
{
#ifdef DEBUGGING
    if (!PL_profiledata)
	Newz(000, PL_profiledata, MAXO, U32);
    ++PL_profiledata[o->op_type];
#endif /* DEBUGGING */
d108 1
a108 1
debprofdump(void)
d110 2
a111 3
#ifdef DEBUGGING
    unsigned i;
    if (!PL_profiledata)
d114 2
a115 4
	if (PL_profiledata[i])
	    PerlIO_printf(Perl_debug_log,
			  "%5lu %s\n", (unsigned long)PL_profiledata[i],
                                       op_name[i]);
a116 1
#endif	/* DEBUGGING */
d118 3
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-2000, Larry Wall
a10 1
#define PERL_IN_RUN_C
d19 6
d26 1
a26 1
Perl_runops_standard(pTHX)
d30 1
a30 3
    while ((PL_op = CALL_FPTR(PL_op->op_ppaddr)(aTHX))) {
	PERL_ASYNC_CHECK();
    }
d36 11
d48 1
a48 1
Perl_runops_debug(pTHX)
d53 1
a53 2
	if (ckWARN_d(WARN_DEBUGGING))
	    Perl_warner(aTHX_ WARN_DEBUGGING, "NULL OP IN RUN");
a57 1
	PERL_ASYNC_CHECK();
d59 3
a61 5
	    if (PL_watchaddr != 0 && *PL_watchaddr != PL_watchok)
		PerlIO_printf(Perl_debug_log,
			      "WARNING: %"UVxf" changed from %"UVxf" to %"UVxf"\n",
			      PTR2UV(PL_watchaddr), PTR2UV(PL_watchok),
			      PTR2UV(*PL_watchaddr));
d66 1
a66 1
    } while ((PL_op = CALL_FPTR(PL_op->op_ppaddr)(aTHX)));
d76 1
a76 1
Perl_debop(pTHX_ OP *o)
d81 1
a81 1
    Perl_deb(aTHX_ "%s", PL_op_name[o->op_type]);
d84 1
a84 1
	PerlIO_printf(Perl_debug_log, "(%s)", SvPEEK(cSVOPo_sv));
d88 1
a88 1
	if (cGVOPo_gv) {
d90 1
a90 1
	    gv_fullname3(sv, cGVOPo_gv, Nullch);
d106 1
a106 1
Perl_watch(pTHX_ char **addr)
d109 4
a112 5
    dTHR;
    PL_watchaddr = addr;
    PL_watchok = *addr;
    PerlIO_printf(Perl_debug_log, "WATCHING, %"UVxf" is currently %"UVxf"\n",
	PTR2UV(PL_watchaddr), PTR2UV(PL_watchok));
d117 1
a117 1
S_debprof(pTHX_ OP *o)
d127 1
a127 1
Perl_debprofdump(pTHX)
d137 1
a137 1
                                       PL_op_name[i]);
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-2001, Larry Wall
d23 2
d37 1
a69 1
    SV **svp;
a86 10
    case OP_PADSV:
    case OP_PADAV:
    case OP_PADHV:
	/* print the lexical's name */
	svp = av_fetch(PL_comppad_name, o->op_targ, FALSE);
	if (svp)
	    PerlIO_printf(Perl_debug_log, "(%s)", SvPV(*svp,n_a));
	else
           PerlIO_printf(Perl_debug_log, "[%"UVuf"]", (UV)o->op_targ);
	break;
d99 1
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-2002, Larry Wall
d31 108
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 2
 *    Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
 *    2000, 2001, by Larry Wall and others
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@a10 13
/* This file contains the main Perl opcode execution loop. It just
 * calls the pp_foo() function associated with each op, and expects that
 * function to return a pointer to the next op to be executed, or null if
 * it's the end of the sub or program or whatever.
 *
 * There is a similar loop in dump.c, Perl_runops_debug(), which does
 * the same, but also checks for various debug flags each time round the
 * loop.
 *
 * Why this function requires a file all of its own is anybody's guess.
 * DAPM.
 */

@


1.1.1.8
log
@perl 5.8.8 import
@
text
@a44 9
/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 *
 * ex: set ts=8 sts=4 sw=4 noet:
 */
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d4 1
a4 1
 *    2000, 2001, 2004, 2005, 2006, by Larry Wall and others
a36 1
    dVAR;
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d29 3
a31 5
 * 'Away now, Shadowfax!  Run, greatheart, run as you have never run before!
 *  Now we are come to the lands where you were foaled, and every stone you
 *  know.  Run now!  Hope is in speed!'                    --Gandalf
 *
 *     [p.600 of _The Lord of the Rings_, III/xi: "The Palantír"]
@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d33 1
a33 1
 *     [p.600 of _The Lord of the Rings_, III/xi: "The PalantÃ­r"]
d40 2
a41 2
    register OP *op = PL_op;
    while ((PL_op = op = op->op_ppaddr(aTHX))) {
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d40 1
a40 2
    OP *op = PL_op;
    OP_ENTRY_PROBE(OP_NAME(op));
a41 1
        OP_ENTRY_PROBE(OP_NAME(op));
a42 1
    PERL_ASYNC_CHECK();
d52 1
a52 1
 * indent-tabs-mode: nil
d55 1
a55 1
 * ex: set ts=8 sts=4 sw=4 et:
@


1.1.1.13
log
@Import perl-5.24.2
@
text
@d39 1
d41 1
a41 1
    PERL_DTRACE_PROBE_OP(op);
d43 1
a43 1
        PERL_DTRACE_PROBE_OP(op);
d52 6
@


