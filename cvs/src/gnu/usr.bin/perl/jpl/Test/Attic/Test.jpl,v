head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.1.0.36
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.34
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.32
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.30
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.28
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.26
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.24
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.22
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.20
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.18
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.16
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.14
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.12
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.10
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2008.09.29.17.36.08;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.09.32;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.32;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@import java.util.*;
 
public class Test {
 
    int myint = 123;
    double mydouble = 3.14159265;
    String mystring = "my string";
    static String ourstring = "our string";
    static boolean embedded = false;
    int array[] = {1,2,3};
    Vector v;

    public Test() {
 

	v = new Vector();
	v.addElement("Hello");
	printfields();
	Vector x = perlTryVec(v);
	x.addElement("World");
	Vector y = perlTryVec(x);
	if (!embedded) System.err.println("Thank you, perlTryVec!");

	if (!embedded) System.err.println(retchars());
	if (!embedded) System.err.println("Thank you, retchars!");

	String[] s = retstrings();
	if (!embedded) System.err.println(s[0] + s[1] + s[2] + s[3]);
	if (!embedded) System.err.println("Thank you, retstrings!");

	Object[] o = retobjects(v, x, y);
	if (!embedded) System.err.println(o[1]);
	if (!embedded) System.err.println(o[3]);
	if (!embedded) System.err.println(o[4]);
	if (!embedded) System.err.println("Thank you, retobjects!");

	passarray(s);

	if (!embedded) System.err.println(s[0] + s[1] + s[2] + s[3]);
	if (!embedded) System.err.println("Thank you, passarray!");

	printfields();
	if (!embedded) System.err.println("Thank you, printfields!");
	setfields();
	if (!embedded) System.err.println("Thank you, setfields!");
	printfields();
	if (!embedded) System.err.println("Thank you, printfields!");
    }
 
    perl Vector perlTryVec(Vector v) throws RuntimeException {{
	print "v is: $v\n";
	print "v isa: ", ref $v,"\n";

	print "In perlTryVec() - Vector size is: ", $v->size([],['int']), "\n";
	@@foo = times;
	$size ||= getmeth('size', [], ['int']);
	for ($i = 10000; $i; --$i) {
	    $x = $v->$size();
	}
	@@bar = times;
	printf "%5.2fu %5.2fs\n", $bar[0] - $foo[0], $bar[1] - $foo[1];
	return $v;
    }}

    perl char[] retchars() {{
	print "In retchars()\n";
	return [65,66,67];
    }}

    perl String[] retstrings() {{
	print "In retstrings()\n";
	return [1,2,3,"many"];
    }}
 
    perl Object[] retobjects(Vector v, Vector x, Vector y) {{
	print "In retstrings()\n";
	return [$v, $x, $y, "this is only a test", 123];
    }}

    perl void passarray(String[] s) {{
	print "In passarray()\n";
	print "s = $s\n";
	$t = GetObjectArrayElement($s,3);
	print "t = $t\n";
	$x = GetStringUTFChars($t);
	print "$x\n";
	$t = SetObjectArrayElement($s,3,NewStringUTF("infinity"));
    }}
 
    perl void printfields() {{

	$| = 1;
	eval {print $self->v->toString____s(), "\n";};
	print $@@ if $@@;

	print $self->myint, "\n";
	print $self->mydouble, "\n";
	print $self->mystring, "\n";
	print JPL::Test->ourstring, "\n";

	@@nums = GetIntArrayElements($self->array());
	print "@@nums\n";

	@@nums = unpack("i*", scalar GetIntArrayElements($self->array()));
	print "@@nums\n";
    }}

    perl void setfields() {{
	$self->myint(321);
	$self->mydouble(2.7182918);
	$self->mystring("MY STRING!!!");
	JPL::Test->ourstring("OUR STRING!!!");
    }}

    public static void main(String[] argv) {
	if (java.lang.reflect.Array.getLength(argv) > 0 &&
	  argv[0].equals("-nothanks"))
	    embedded = true;
	Test f = new Test();
	if (!embedded) System.err.println("Thank you, Test!");
    }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@
