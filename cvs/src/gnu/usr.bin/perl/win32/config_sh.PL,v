head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	PERL_5_20_1:1.1.1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2017.02.05.00.32.22;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	cxJ08BvJA9Pt2PTM;

1.12
date	2014.11.17.20.57.08;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	QP75iYx42Uo7mMxO;

1.11
date	2014.03.24.15.05.34;	author afresh1;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.25.20.41.01;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.24.15.07.11;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.22;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.15;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.03.03.02.52;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.09.03;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.52;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.38;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.13;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.13;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.44.37;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.49.58;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.19.05;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.11.08;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.48.45;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.09.44;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.59.12;	author afresh1;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.11.17.20.53.21;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.13
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl -w
use strict;
use FindExt;

# take a semicolon separated path list and turn it into a quoted
# list of paths that Text::Parsewords will grok
sub mungepath {
    my $p = shift;
    # remove leading/trailing semis/spaces
    $p =~ s/^[ ;]+//;
    $p =~ s/[ ;]+$//;
    $p =~ s/'/"/g;
    my @@p = map { $_ = "\"$_\"" if /\s/ and !/^".*"$/; $_ } split /;/, $p;
    return join(' ', @@p);
}

# generate an array of option strings from command-line args
# or an option file
#    -- added by BKS, 10-17-1999 to fix command-line overflow problems
sub loadopts {
    if ($ARGV[0] =~ /--cfgsh-option-file/) {
	shift @@ARGV;
	my $optfile = shift @@ARGV;
	local (*OPTF);
	open OPTF, $optfile or die "Can't open $optfile: $!\n";
	my @@opts;
	chomp(my $line = <OPTF>);
	my @@vars = split(/\t+~\t+/, $line);
	for (@@vars) {
	    push(@@opts, $_) unless (/^\s*$/);
	}
	close OPTF;
	return \@@opts;
    }
    else {
	return \@@ARGV;
    }
}

my %opt;

my $optref = loadopts();
while (@@{$optref} && $optref->[0] =~ /^([\w_]+)=(.*)$/) {
    $opt{$1}=$2;
    shift(@@{$optref});
}

FindExt::scan_ext("../cpan");
FindExt::scan_ext("../dist");
FindExt::scan_ext("../ext");
FindExt::set_static_extensions(split ' ', $opt{static_ext});

$opt{nonxs_ext}        = join(' ',FindExt::nonxs_ext()) || ' ';
$opt{static_ext}       = join(' ',FindExt::static_ext()) || ' ';
$opt{dynamic_ext}      = join(' ',FindExt::dynamic_ext()) || ' ';
$opt{extensions}       = join(' ',FindExt::extensions()) || ' ';
$opt{known_extensions} = join(' ',FindExt::known_extensions()) || ' ';

my $pl_h = '../patchlevel.h';

if (-e $pl_h) {
    open PL, "<$pl_h" or die "Can't open $pl_h: $!";
    while (<PL>) {
	if (/^#\s*define\s+(PERL_\w+)\s+([\d.]+)/) {
	    $opt{$1} = $2;
	}
    }
    close PL;
}
else {
    die "Can't find $pl_h: $!";
}

my $patch_file = '../.patch';

if (-e $patch_file) {
    open my $fh, "<", $patch_file or die "Can't open $patch_file: $!";
    chomp($opt{PERL_PATCHLEVEL} = <$fh>);
    close $fh;
}

$opt{version} = "$opt{PERL_REVISION}.$opt{PERL_VERSION}.$opt{PERL_SUBVERSION}";
$opt{version_patchlevel_string} = "version $opt{PERL_VERSION} subversion $opt{PERL_SUBVERSION}";
$opt{version_patchlevel_string} .= " patch $opt{PERL_PATCHLEVEL}" if exists $opt{PERL_PATCHLEVEL};

my $ver = `ver 2>nul`;
if ($ver =~ /Version (\d+\.\d+)/) {
    $opt{osvers} = $1;
}
else {
    $opt{osvers} = '4.0';
}

if (exists $opt{cc}) {
    # cl version detection borrowed from Test::Smoke's configsmoke.pl
    if ($opt{cc} =~ /\b(?:cl|icl)/) { #MSVC can come as clarm.exe, icl=Intel C
        my $output = `$opt{cc} --version 2>&1`;
        $opt{ccversion} = $output =~ /^.*Version\s+([\d.]+)/ ? $1 : '?';
    }
    elsif ($opt{cc} =~ /\bgcc\b/) {
        chomp($opt{gccversion} = `$opt{cc} -dumpversion`);
    }
}

$opt{cf_by} = $ENV{USERNAME} unless $opt{cf_by};
if (!$opt{cf_email}) {
    my $computername = eval{(gethostbyname('localhost'))[0]};
# gethostbyname might not be implemented in miniperl
    $computername = $ENV{COMPUTERNAME} if $@@;    
    $opt{cf_email} = $opt{cf_by} . '@@' . $computername;
}
$opt{usemymalloc} = 'y' if $opt{d_mymalloc} eq 'define';

$opt{libpth} = mungepath($opt{libpth}) if exists $opt{libpth};
$opt{incpath} = mungepath($opt{incpath}) if exists $opt{incpath};

my $int64;
if ($opt{cc} =~ /\b(?:cl|icl)/) {
    $int64  = '__int64';
}
elsif ($opt{cc} =~ /\bgcc\b/) {
    $int64  = 'long long';
}

# set large files options
if ($opt{uselargefiles} eq 'define') {
    $opt{lseeksize} = 8;
    $opt{lseektype} = $int64;
}
else {
    $opt{lseeksize} = 4;
    $opt{lseektype} = 'long';
}

# set 64-bit options
if ($opt{WIN64} eq 'define') {
    $opt{d_atoll} = 'define';
    $opt{d_strtoll} = 'define';
    $opt{d_strtoull} = 'define';
    $opt{ptrsize} = 8;
    $opt{sizesize} = 8;
    $opt{ssizetype} = $int64;
    $opt{st_ino_size} = 8;
}
else {
    $opt{d_atoll} = 'undef';
    $opt{d_strtoll} = 'undef';
    $opt{d_strtoull} = 'undef';
    $opt{ptrsize} = 4;
    $opt{sizesize} = 4;
    $opt{ssizetype} = 'int';
    $opt{st_ino_size} = 4;
}

# set 64-bit-int options
if ($opt{use64bitint} eq 'define') {
    if ($opt{uselongdouble} eq 'define') {
        $opt{d_nv_preserves_uv} = 'define';
        $opt{nv_preserves_uv_bits} = 64;
    }
    else {
        $opt{d_nv_preserves_uv} = 'undef';
        $opt{nv_preserves_uv_bits} = 53;
    }
    $opt{ivdformat} = qq{"I64d"};
    $opt{ivsize} = 8;
    $opt{ivtype} = $int64;
    $opt{sPRIXU64} = qq{"I64X"};
    $opt{sPRId64} = qq{"I64d"};
    $opt{sPRIi64} = qq{"I64i"};
    $opt{sPRIo64} = qq{"I64o"};
    $opt{sPRIu64} = qq{"I64u"};
    $opt{sPRIx64} = qq{"I64x"};
    $opt{uvXUformat} = qq{"I64X"};
    $opt{uvoformat} = qq{"I64o"};
    $opt{uvsize} = 8;
    $opt{uvtype} = qq{unsigned $int64};
    $opt{uvuformat} = qq{"I64u"};
    $opt{uvxformat} = qq{"I64x"};
}
else {
    $opt{d_nv_preserves_uv} = 'define';
    $opt{ivdformat} = '"ld"';
    $opt{ivsize} = 4;
    $opt{ivtype} = 'long';
    $opt{nv_preserves_uv_bits} = 32;
    $opt{sPRIXU64} = '"lX"';
    $opt{sPRId64} = '"ld"';
    $opt{sPRIi64} = '"li"';
    $opt{sPRIo64} = '"lo"';
    $opt{sPRIu64} = '"lu"';
    $opt{sPRIx64} = '"lx"';
    $opt{uvXUformat} = '"lX"';
    $opt{uvoformat} = '"lo"';
    $opt{uvsize} = 4;
    $opt{uvtype} = 'unsigned long';
    $opt{uvuformat} = '"lu"';
    $opt{uvxformat} = '"lx"';
}

unless ($opt{cc} =~ /\bcl/) {
    if ($opt{WIN64} eq 'define') {
        $opt{longdblsize} = 16;
        $opt{longdblinfbytes} = '0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00';
        $opt{longdblnanbytes} = '0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00';
    }
    else {
        $opt{longdblsize} = 12;
        $opt{longdblinfbytes} = '0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00';
        $opt{longdblnanbytes} = '0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00';
    }
}

# set long double options
if ($opt{uselongdouble} eq 'define') {
    $opt{d_Gconvert} = 'sprintf((b),"%.*""Lg",(n),(x))';
    $opt{d_PRIEUldbl} = 'define';
    $opt{d_PRIFUldbl} = 'define';
    $opt{d_PRIGUldbl} = 'define';
    $opt{d_frexpl} = 'define';
    $opt{d_isnanl} = 'define';
    $opt{d_modfl} = 'define';
    $opt{d_modflproto} = 'define';
    $opt{d_sqrtl} = 'define';
    $opt{d_strtold} = 'define';
    $opt{d_PRIeldbl} = 'define';
    $opt{d_PRIfldbl} = 'define';
    $opt{d_PRIgldbl} = 'define';
    $opt{d_SCNfldbl} = 'define';
    $opt{nvsize} = $opt{longdblsize};
    $opt{nvtype} = 'long double';
    $opt{nv_overflows_integers_at} = '256.0*256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0';
    $opt{nvEUformat} = '"LE"';
    $opt{nvFUformat} = '"LF"';
    $opt{nvGUformat} = '"LG"';
    $opt{nveformat} = '"Le"';
    $opt{nvfformat} = '"Lf"';
    $opt{nvgformat} = '"Lg"';
    $opt{longdblkind} = 3;
    $opt{longdblmantbits} = 64;
}
else {
    $opt{d_Gconvert} = 'sprintf((b),"%.*g",(n),(x))';
    $opt{d_PRIEUldbl} = 'undef';
    $opt{d_PRIFUldbl} = 'undef';
    $opt{d_PRIGUldbl} = 'undef';
    $opt{d_frexpl} = 'undef';
    $opt{d_isnanl} = 'undef';
    $opt{d_modfl} = 'undef';
    $opt{d_modflproto} = 'undef';
    $opt{d_sqrtl} = 'undef';
    $opt{d_strtold} = 'undef';
    $opt{d_PRIeldbl} = 'undef';
    $opt{d_PRIfldbl} = 'undef';
    $opt{d_PRIgldbl} = 'undef';
    $opt{d_SCNfldbl} = 'undef';
    $opt{nvsize} = 8;
    $opt{nvtype} = 'double';
    $opt{nv_overflows_integers_at} = '256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0';
    $opt{nvEUformat} = '"E"';
    $opt{nvFUformat} = '"F"';
    $opt{nvGUformat} = '"G"';
    $opt{nveformat} = '"e"';
    $opt{nvfformat} = '"f"';
    $opt{nvgformat} = '"g"';
}

# change the s{GM|LOCAL}TIME_{min|max} for VS2005 (aka VC 8) and
# VS2008 (aka VC 9) or higher (presuming that later versions will have
# at least the range of that).
if ($opt{cc} =~ /\bcl/ and $opt{ccversion} =~ /^(\d+)/) {
    my $ccversion = $1;
    if ($ccversion >= 14) {
	$opt{sGMTIME_max} = 32535291599;
	$opt{sLOCALTIME_max} = 32535244799;
    }
    if($ccversion < 13) { #VC6
	$opt{ar} ='lib';
    }
}
#find out which MSVC this ICC is using
elsif ($opt{cc} =~ /\bicl/) {
    my $output = `cl --version 2>&1`;
    my $num_ver = $output =~ /^.*Version\s+([\d.]+)/ ? $1 : '?';
    if($num_ver =~ /^(\d+)/ && $1 >= 14) {
	$opt{sGMTIME_max} = 32535291599;
	$opt{sLOCALTIME_max} = 32535244799;
    }
    $opt{ar} ='xilib';
}

if ($opt{useithreads} eq 'define' && $opt{ccflags} =~ /-DPERL_IMPLICIT_SYS\b/) {
    $opt{d_pseudofork} = 'define';
}

if ($opt{usecplusplus} eq 'define') {
    $opt{d_cplusplus} = 'define';
    $opt{extern_C} = 'extern "C"';
}

#if the fields above are defined, they override the defaults in the premade
#config file
while (<>) {
    s/~([\w_]+)~/exists $opt{$1} ? $opt{$1} : ''/eg;
    if (/^([\w_]+)=(.*)$/) {
	my($k,$v) = ($1,$2);
	# this depends on cf_time being empty in the template (or we'll
	# get a loop)
	if ($k eq 'cf_time') {
	    $_ = "$k='" . localtime(time) . "'\n" if $v =~ /^\s*'\s*'/;
	}
	elsif (exists $opt{$k}) {
	    $_ = "$k='$opt{$k}'\n";
	}
    }
    print;
}
@


1.12
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d117 1
a117 1
my($int64, $int64f);
a119 1
    $int64f = 'I64';
a122 1
    $int64f = 'I64';
d154 2
d157 9
a165 2
    $opt{d_nv_preserves_uv} = 'undef';
    $opt{ivdformat} = qq{"${int64f}d"};
d168 8
a175 9
    $opt{nv_preserves_uv_bits} = 53;
    $opt{sPRIXU64} = qq{"${int64f}X"};
    $opt{sPRId64} = qq{"${int64f}d"};
    $opt{sPRIi64} = qq{"${int64f}i"};
    $opt{sPRIo64} = qq{"${int64f}o"};
    $opt{sPRIu64} = qq{"${int64f}u"};
    $opt{sPRIx64} = qq{"${int64f}x"};
    $opt{uvXUformat} = qq{"${int64f}X"};
    $opt{uvoformat} = qq{"${int64f}o"};
d178 2
a179 2
    $opt{uvuformat} = qq{"${int64f}u"};
    $opt{uvxformat} = qq{"${int64f}x"};
d201 67
d294 5
@


1.11
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d96 2
a97 2
    if ($opt{cc} eq 'cl') {
        my $output = `cl --version 2>&1`;
d118 1
a118 1
if ($opt{cc} eq 'cl') {
d124 1
a124 1
    $int64f = 'll';
d198 1
a198 1
if ($opt{cc} eq 'cl' and $opt{ccversion} =~ /^(\d+)/) {
d204 13
d223 2
@


1.10
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 2
d4 1
d24 1
a24 1
	local (*F);
d51 1
a51 1
FindExt::set_static_extensions(split ' ', $opt{'static_ext'});
d53 5
a57 5
$opt{'nonxs_ext'}        = join(' ',FindExt::nonxs_ext()) || ' ';
$opt{'static_ext'}       = join(' ',FindExt::static_ext()) || ' ';
$opt{'dynamic_ext'}      = join(' ',FindExt::dynamic_ext()) || ' ';
$opt{'extensions'}       = join(' ',FindExt::extensions()) || ' ';
$opt{'known_extensions'} = join(' ',FindExt::known_extensions()) || ' ';
d82 3
a84 4
$opt{VERSION} = "$opt{PERL_REVISION}.$opt{PERL_VERSION}.$opt{PERL_SUBVERSION}";
$opt{INST_VER} =~ s|~VERSION~|$opt{VERSION}|g;
$opt{'version_patchlevel_string'} = "version $opt{PERL_VERSION} subversion $opt{PERL_SUBVERSION}";
$opt{'version_patchlevel_string'} .= " patch $opt{PERL_PATCHLEVEL}" if exists $opt{PERL_PATCHLEVEL};
d88 1
a88 1
    $opt{'osvers'} = $1;
d91 1
a91 1
    $opt{'osvers'} = '4.0';
d105 8
a112 4
$opt{'cf_by'} = $ENV{USERNAME} unless $opt{'cf_by'};
$opt{'cf_email'} = $opt{'cf_by'} . '@@' . (gethostbyname('localhost'))[0]
	unless $opt{'cf_email'};
$opt{'usemymalloc'} = 'y' if $opt{'d_mymalloc'} eq 'define';
d117 8
a124 4
# some functions are not available on Win9x
unless (defined $ENV{SYSTEMROOT}) { # SystemRoot has been introduced by WinNT
    $opt{d_flock} = 'undef';
    $opt{d_link} = 'undef';
d127 1
a127 3
# change the lseeksize and lseektype from their canned default values (which
# are set-up for a non-uselargefiles build) if we are building with
# uselargefiles.
d130 63
a192 6
    if ($opt{cc} eq 'cl') {
	$opt{lseektype} = '__int64';
    }
    elsif ($opt{cc} =~ /\bgcc\b/) {
	$opt{lseektype} = 'long long';
    }
d211 1
a211 1
    s/~([\w_]+)~/$opt{$1}/g;
@


1.9
log
@merge in perl 5.12.2 plus local changes
@
text
@d93 1
a93 1
    # cl and bcc32 version detection borrowed from Test::Smoke's configsmoke.pl
d98 2
a99 6
    elsif ($opt{cc} eq 'bcc32') {
        my $output = `bcc32 --version 2>&1`;
        $opt{ccversion} = $output =~ /([\d.]+)/ ? $1 : '?';
    }
    elsif ($opt{cc} eq 'gcc') {
        chomp($opt{gccversion} = `gcc -dumpversion`);
d119 2
a120 3
# uselargefiles. don't do this for bcc32: the code contains special handling
# for bcc32 and the lseeksize and lseektype should not be changed.
if ($opt{uselargefiles} eq 'define' and $opt{cc} ne 'bcc32') {
d125 1
a125 1
    elsif ($opt{cc} eq 'gcc') {
@


1.8
log
@Merge in perl 5.10.1; part two
@
text
@d45 2
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a45 1
FindExt::scan_ext("ext") if -d 'ext';  # also look in win32/ext/ if it exists
d80 1
a80 1
$opt{'version_patchlevel_string'} .= " patchlevel $opt{PERL_PATCHLEVEL}" if exists $opt{PERL_PATCHLEVEL};
d119 23
a141 3
if ($opt{uselargefiles} ne 'define') {
    $opt{lseeksize} = 4;
    $opt{lseektype} = 'off_t';
@


1.6
log
@merge in perl 5.8.8
@
text
@d46 1
a48 7
my @@dynamic_ext = FindExt::dynamic_ext();
my @@extensions  = FindExt::extensions();
if (!$opt{'use5005threads'} || $opt{'use5005threads'} eq 'undef')
 {
  @@dynamic_ext = grep(!/Thread/,@@dynamic_ext);
  @@extensions  = grep(!/Thread/,@@extensions);
 }
d51 2
a52 2
$opt{'dynamic_ext'}      = join(' ',@@dynamic_ext) || ' ';
$opt{'extensions'}       = join(' ',@@extensions) || ' ';
d69 9
d83 7
a89 1
$opt{'osvers'} = join '.', (Win32::GetOSVersion())[1,2];
d115 1
a115 1
if (defined(&Win32::IsWin95) && Win32::IsWin95()) {
d123 4
@


1.5
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a36 2
FindExt::scan_ext("../ext");

d45 2
a46 4
my @@dynamic = FindExt::dynamic_extensions();
my @@noxs    = FindExt::noxs_extensions();
my @@known   = sort(@@dynamic,split(/\s+/,$opt{'staticext'}),@@noxs);
$opt{'known_extensions'} = join(' ',@@known);
d48 2
d52 2
a53 2
  @@dynamic = grep(!/Thread/,@@dynamic);
  @@known   = grep(!/Thread/,@@dynamic);
d55 5
a59 5

$opt{'dynamic_ext'} = join(' ',@@dynamic);
$opt{'nonxs_ext'}   = join(' ',@@noxs);

$opt{'extensions'} = join(' ',@@known);
d79 17
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d96 5
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d1 1
d37 2
d40 1
d47 16
d79 2
d90 6
a110 1

@


1.2
log
@perl5.005_03 (stock)
@
text
@d13 23
d37 4
a40 11
while (@@ARGV && $ARGV[0] =~ /^([\w_]+)=(.*)$/)
 {
  $opt{$1}=$2;
  shift(@@ARGV);
 }

$opt{VERSION} = $];
$opt{INST_VER} =~ s|~VERSION~|$]|g;
if ($] =~ /\.(\d\d\d)?(\d\d)?$/) { # should always be true
  $opt{PATCHLEVEL} = int($1 || 0);
  $opt{SUBVERSION} = $2 || '00';
d43 17
d68 12
a79 7
while (<>)
 {
  s/~([\w_]+)~/$opt{$1}/g;
  if (/^([\w_]+)=(.*)$/) {
    # this depends on cf_time being empty in the template (or we'll get a loop)
    if ($1 eq 'cf_time') {
      $_ = "$1='" . localtime(time) . "'\n" if $2 =~ /^\s*'\s*'/;
d81 2
a82 6
    elsif (exists $opt{$1}) {
      $_ = "$1='$opt{$1}'\n";
    }
  }
  print;
 }
@


1.1
log
@perl 5.004_04
@
text
@d1 12
d20 2
d30 4
d38 9
a46 1
  $_ = "$1='$opt{$1}'\n" if (/^([\w_]+)=/ && exists($opt{$1}));
@


1.1.1.1
log
@perl5.005_03
@
text
@a0 12
# take a semicolon separated path list and turn it into a quoted
# list of paths that Text::Parsewords will grok
sub mungepath {
    my $p = shift;
    # remove leading/trailing semis/spaces
    $p =~ s/^[ ;]+//;
    $p =~ s/[ ;]+$//;
    $p =~ s/'/"/g;
    my @@p = map { $_ = "\"$_\"" if /\s/ and !/^".*"$/; $_ } split /;/, $p;
    return join(' ', @@p);
}

a7 2
$opt{VERSION} = $];
$opt{INST_VER} =~ s|~VERSION~|$]|g;
a15 4
$opt{'usemymalloc'} = 'y' if $opt{'d_mymalloc'} eq 'define';

$opt{libpth} = mungepath($opt{libpth}) if exists $opt{libpth};
$opt{incpath} = mungepath($opt{incpath}) if exists $opt{incpath};
d20 1
a20 9
  if (/^([\w_]+)=(.*)$/) {
    # this depends on cf_time being empty in the template (or we'll get a loop)
    if ($1 eq 'cf_time') {
      $_ = "$1='" . localtime(time) . "'\n" if $2 =~ /^\s*'\s*'/;
    }
    elsif (exists $opt{$1}) {
      $_ = "$1='$opt{$1}'\n";
    }
  }
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a12 23
# generate an array of option strings from command-line args
# or an option file
#    -- added by BKS, 10-17-1999 to fix command-line overflow problems
sub loadopts {
    if ($ARGV[0] =~ /--cfgsh-option-file/) {
	shift @@ARGV;
	my $optfile = shift @@ARGV;
	local (*F);
	open OPTF, $optfile or die "Can't open $optfile: $!\n";
	my @@opts;
	chomp(my $line = <OPTF>);
	my @@vars = split(/\t+~\t+/, $line);
	for (@@vars) {
	    push(@@opts, $_) unless (/^\s*$/);
	}
	close OPTF;
	return \@@opts;
    }
    else {
	return \@@ARGV;
    }
}

d14 11
a24 4
my $optref = loadopts();
while (@@{$optref} && $optref->[0] =~ /^([\w_]+)=(.*)$/) {
    $opt{$1}=$2;
    shift(@@{$optref});
a26 17
my $pl_h = '../patchlevel.h';

if (-e $pl_h) {
    open PL, "<$pl_h" or die "Can't open $pl_h: $!";
    while (<PL>) {
	if (/^#\s*define\s+(PERL_\w+)\s+([\d.]+)/) {
	    $opt{$1} = $2;
	}
    }
    close PL;
}
else {
    die "Can't find $pl_h: $!";
}
$opt{VERSION} = "$opt{PERL_REVISION}.$opt{PERL_VERSION}.$opt{PERL_SUBVERSION}";
$opt{INST_VER} =~ s|~VERSION~|$opt{VERSION}|g;

d35 7
a41 12
while (<>) {
    s/~([\w_]+)~/$opt{$1}/g;
    if (/^([\w_]+)=(.*)$/) {
	my($k,$v) = ($1,$2);
	# this depends on cf_time being empty in the template (or we'll
	# get a loop)
	if ($k eq 'cf_time') {
	    $_ = "$k='" . localtime(time) . "'\n" if $v =~ /^\s*'\s*'/;
	}
	elsif (exists $opt{$k}) {
	    $_ = "$k='$opt{$k}'\n";
	}
d43 6
a48 2
    print;
}
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@a0 1
use FindExt;
a35 2
FindExt::scan_ext("../ext");

a36 1

a42 16
my @@dynamic = FindExt::dynamic_extensions();
my @@noxs    = FindExt::noxs_extensions();
my @@known   = sort(@@dynamic,split(/\s+/,$opt{'staticext'}),@@noxs);
$opt{'known_extensions'} = join(' ',@@known);

if (!$opt{'use5005threads'} || $opt{'use5005threads'} eq 'undef')
 {
  @@dynamic = grep(!/Thread/,@@dynamic);
  @@known   = grep(!/Thread/,@@dynamic);
 }

$opt{'dynamic_ext'} = join(' ',@@dynamic);
$opt{'nonxs_ext'}   = join(' ',@@noxs);

$opt{'extensions'} = join(' ',@@known);

a58 2
$opt{'version_patchlevel_string'} = "version $opt{PERL_VERSION} subversion $opt{PERL_SUBVERSION}";
$opt{'version_patchlevel_string'} .= " patchlevel $opt{PERL_PATCHLEVEL}" if exists $opt{PERL_PATCHLEVEL};
a67 6
# some functions are not available on Win9x
if (defined(&Win32::IsWin95) && Win32::IsWin95()) {
    $opt{d_flock} = 'undef';
    $opt{d_link} = 'undef';
}

d83 1
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@a95 5
if ($opt{uselargefiles} ne 'define') {
    $opt{lseeksize} = 4;
    $opt{lseektype} = 'off_t';
}

@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d37 2
d47 4
a50 2
FindExt::scan_ext("../ext");
FindExt::set_static_extensions(split ' ', $opt{'static_ext'});
a51 2
my @@dynamic_ext = FindExt::dynamic_ext();
my @@extensions  = FindExt::extensions();
d54 2
a55 2
  @@dynamic_ext = grep(!/Thread/,@@dynamic_ext);
  @@extensions  = grep(!/Thread/,@@extensions);
d57 5
a61 5
$opt{'nonxs_ext'}        = join(' ',FindExt::nonxs_ext()) || ' ';
$opt{'static_ext'}       = join(' ',FindExt::static_ext()) || ' ';
$opt{'dynamic_ext'}      = join(' ',@@dynamic_ext) || ' ';
$opt{'extensions'}       = join(' ',@@extensions) || ' ';
$opt{'known_extensions'} = join(' ',FindExt::known_extensions()) || ' ';
a80 17

$opt{'osvers'} = join '.', (Win32::GetOSVersion())[1,2];

if (exists $opt{cc}) {
    # cl and bcc32 version detection borrowed from Test::Smoke's configsmoke.pl
    if ($opt{cc} eq 'cl') {
        my $output = `cl --version 2>&1`;
        $opt{ccversion} = $output =~ /^.*Version\s+([\d.]+)/ ? $1 : '?';
    }
    elsif ($opt{cc} eq 'bcc32') {
        my $output = `bcc32 --version 2>&1`;
        $opt{ccversion} = $output =~ /([\d.]+)/ ? $1 : '?';
    }
    elsif ($opt{cc} eq 'gcc') {
        chomp($opt{gccversion} = `gcc -dumpversion`);
    }
}
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@a45 1
FindExt::scan_ext("ext") if -d 'ext';  # also look in win32/ext/ if it exists
d48 7
d57 2
a58 2
$opt{'dynamic_ext'}      = join(' ',FindExt::dynamic_ext()) || ' ';
$opt{'extensions'}       = join(' ',FindExt::extensions()) || ' ';
a74 9

my $patch_file = '../.patch';

if (-e $patch_file) {
    open my $fh, "<", $patch_file or die "Can't open $patch_file: $!";
    chomp($opt{PERL_PATCHLEVEL} = <$fh>);
    close $fh;
}

d80 1
a80 7
my $ver = `ver 2>nul`;
if ($ver =~ /Version (\d+\.\d+)/) {
    $opt{'osvers'} = $1;
}
else {
    $opt{'osvers'} = '4.0';
}
d106 1
a106 1
unless (defined $ENV{SYSTEMROOT}) { # SystemRoot has been introduced by WinNT
a113 4
}

if ($opt{useithreads} eq 'define' && $opt{ccflags} =~ /-DPERL_IMPLICIT_SYS\b/) {
    $opt{d_pseudofork} = 'define';
@


1.1.1.7
log
@import perl 5.10.1
@
text
@d46 1
d81 1
a81 1
$opt{'version_patchlevel_string'} .= " patch $opt{PERL_PATCHLEVEL}" if exists $opt{PERL_PATCHLEVEL};
d120 3
a122 23
# change the lseeksize and lseektype from their canned default values (which
# are set-up for a non-uselargefiles build) if we are building with
# uselargefiles. don't do this for bcc32: the code contains special handling
# for bcc32 and the lseeksize and lseektype should not be changed.
if ($opt{uselargefiles} eq 'define' and $opt{cc} ne 'bcc32') {
    $opt{lseeksize} = 8;
    if ($opt{cc} eq 'cl') {
	$opt{lseektype} = '__int64';
    }
    elsif ($opt{cc} eq 'gcc') {
	$opt{lseektype} = 'long long';
    }
}

# change the s{GM|LOCAL}TIME_{min|max} for VS2005 (aka VC 8) and
# VS2008 (aka VC 9) or higher (presuming that later versions will have
# at least the range of that).
if ($opt{cc} eq 'cl' and $opt{ccversion} =~ /^(\d+)/) {
    my $ccversion = $1;
    if ($ccversion >= 14) {
	$opt{sGMTIME_max} = 32535291599;
	$opt{sLOCALTIME_max} = 32535244799;
    }
@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@a44 2
FindExt::scan_ext("../cpan");
FindExt::scan_ext("../dist");
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d93 1
a93 1
    # cl version detection borrowed from Test::Smoke's configsmoke.pl
d98 6
a103 2
    elsif ($opt{cc} =~ /\bgcc\b/) {
        chomp($opt{gccversion} = `$opt{cc} -dumpversion`);
d123 3
a125 2
# uselargefiles.
if ($opt{uselargefiles} eq 'define') {
d130 1
a130 1
    elsif ($opt{cc} =~ /\bgcc\b/) {
@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a0 2
#!perl -w
use strict;
a1 1

d21 1
a21 1
	local (*OPTF);
d48 1
a48 1
FindExt::set_static_extensions(split ' ', $opt{static_ext});
d50 5
a54 5
$opt{nonxs_ext}        = join(' ',FindExt::nonxs_ext()) || ' ';
$opt{static_ext}       = join(' ',FindExt::static_ext()) || ' ';
$opt{dynamic_ext}      = join(' ',FindExt::dynamic_ext()) || ' ';
$opt{extensions}       = join(' ',FindExt::extensions()) || ' ';
$opt{known_extensions} = join(' ',FindExt::known_extensions()) || ' ';
d79 4
a82 3
$opt{version} = "$opt{PERL_REVISION}.$opt{PERL_VERSION}.$opt{PERL_SUBVERSION}";
$opt{version_patchlevel_string} = "version $opt{PERL_VERSION} subversion $opt{PERL_SUBVERSION}";
$opt{version_patchlevel_string} .= " patch $opt{PERL_PATCHLEVEL}" if exists $opt{PERL_PATCHLEVEL};
d86 1
a86 1
    $opt{osvers} = $1;
d89 1
a89 1
    $opt{osvers} = '4.0';
d103 4
a106 8
$opt{cf_by} = $ENV{USERNAME} unless $opt{cf_by};
if (!$opt{cf_email}) {
    my $computername = eval{(gethostbyname('localhost'))[0]};
# gethostbyname might not be implemented in miniperl
    $computername = $ENV{COMPUTERNAME} if $@@;    
    $opt{cf_email} = $opt{cf_by} . '@@' . $computername;
}
$opt{usemymalloc} = 'y' if $opt{d_mymalloc} eq 'define';
d111 4
a114 8
my($int64, $int64f);
if ($opt{cc} eq 'cl') {
    $int64  = '__int64';
    $int64f = 'I64';
}
elsif ($opt{cc} =~ /\bgcc\b/) {
    $int64  = 'long long';
    $int64f = 'll';
d117 3
a119 1
# set large files options
d122 6
a127 63
    $opt{lseektype} = $int64;
}
else {
    $opt{lseeksize} = 4;
    $opt{lseektype} = 'long';
}

# set 64-bit options
if ($opt{WIN64} eq 'define') {
    $opt{d_atoll} = 'define';
    $opt{d_strtoll} = 'define';
    $opt{d_strtoull} = 'define';
    $opt{ptrsize} = 8;
    $opt{sizesize} = 8;
    $opt{ssizetype} = $int64;
    $opt{st_ino_size} = 8;
}
else {
    $opt{d_atoll} = 'undef';
    $opt{d_strtoll} = 'undef';
    $opt{d_strtoull} = 'undef';
    $opt{ptrsize} = 4;
    $opt{sizesize} = 4;
    $opt{ssizetype} = 'int';
    $opt{st_ino_size} = 4;
}
if ($opt{use64bitint} eq 'define') {
    $opt{d_nv_preserves_uv} = 'undef';
    $opt{ivdformat} = qq{"${int64f}d"};
    $opt{ivsize} = 8;
    $opt{ivtype} = $int64;
    $opt{nv_preserves_uv_bits} = 53;
    $opt{sPRIXU64} = qq{"${int64f}X"};
    $opt{sPRId64} = qq{"${int64f}d"};
    $opt{sPRIi64} = qq{"${int64f}i"};
    $opt{sPRIo64} = qq{"${int64f}o"};
    $opt{sPRIu64} = qq{"${int64f}u"};
    $opt{sPRIx64} = qq{"${int64f}x"};
    $opt{uvXUformat} = qq{"${int64f}X"};
    $opt{uvoformat} = qq{"${int64f}o"};
    $opt{uvsize} = 8;
    $opt{uvtype} = qq{unsigned $int64};
    $opt{uvuformat} = qq{"${int64f}u"};
    $opt{uvxformat} = qq{"${int64f}x"};
}
else {
    $opt{d_nv_preserves_uv} = 'define';
    $opt{ivdformat} = '"ld"';
    $opt{ivsize} = 4;
    $opt{ivtype} = 'long';
    $opt{nv_preserves_uv_bits} = 32;
    $opt{sPRIXU64} = '"lX"';
    $opt{sPRId64} = '"ld"';
    $opt{sPRIi64} = '"li"';
    $opt{sPRIo64} = '"lo"';
    $opt{sPRIu64} = '"lu"';
    $opt{sPRIx64} = '"lx"';
    $opt{uvXUformat} = '"lX"';
    $opt{uvoformat} = '"lo"';
    $opt{uvsize} = 4;
    $opt{uvtype} = 'unsigned long';
    $opt{uvuformat} = '"lu"';
    $opt{uvxformat} = '"lx"';
d146 1
a146 1
    s/~([\w_]+)~/exists $opt{$1} ? $opt{$1} : ''/eg;
@


1.1.1.11
log
@Import perl-5.20.1
@
text
@d96 2
a97 2
    if ($opt{cc} =~ /\b(?:cl|icl)/) { #MSVC can come as clarm.exe, icl=Intel C
        my $output = `$opt{cc} --version 2>&1`;
d118 1
a118 1
if ($opt{cc} =~ /\b(?:cl|icl)/) {
d124 1
a124 1
    $int64f = 'I64';
d198 1
a198 1
if ($opt{cc} =~ /\bcl/ and $opt{ccversion} =~ /^(\d+)/) {
a203 13
    if($ccversion < 13) { #VC6
	$opt{ar} ='lib';
    }
}
#find out which MSVC this ICC is using
elsif ($opt{cc} =~ /\bicl/) {
    my $output = `cl --version 2>&1`;
    my $num_ver = $output =~ /^.*Version\s+([\d.]+)/ ? $1 : '?';
    if($num_ver =~ /^(\d+)/ && $1 >= 14) {
	$opt{sGMTIME_max} = 32535291599;
	$opt{sLOCALTIME_max} = 32535244799;
    }
    $opt{ar} ='xilib';
a209 2
#if the fields above are defined, they override the defaults in the premade
#config file
@


