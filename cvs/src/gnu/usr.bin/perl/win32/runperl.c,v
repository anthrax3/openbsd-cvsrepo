head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.34
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.28
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.30
	OPENBSD_5_8_BASE:1.4
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.4.0.22
	OPENBSD_5_7_BASE:1.4
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.4.0.26
	OPENBSD_5_6_BASE:1.4
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.4.0.24
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.20
	OPENBSD_5_4_BASE:1.4
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.4.0.18
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.16
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.14
	OPENBSD_5_0:1.4.0.12
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.3.0.36
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.34
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.32
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.30
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.28
	OPENBSD_4_0_BASE:1.3
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.3.0.26
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.24
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.22
	OPENBSD_3_7_BASE:1.3
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2017.02.05.00.32.22;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	cxJ08BvJA9Pt2PTM;

1.4
date	2008.09.29.17.36.22;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.09.05;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.43;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.15;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.06;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.19.06;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2017.08.14.13.46.27;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.5
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#ifdef _MSC_VER
#include <crtdbg.h>
#endif

#include "EXTERN.h"
#include "perl.h"

#ifdef __GNUC__

/* Mingw32 defaults to globing command line 
 * This is inconsistent with other Win32 ports and 
 * seems to cause trouble with passing -DXSVERSION=\"1.6\" 
 * So we turn it off like this, but only when compiling
 * perlmain.c: perlmainst.c is linked into the same executable
 * as win32.c, which also does this, so we mustn't do it twice
 * otherwise we get a multiple definition error.
 */
#ifndef PERLDLL
int _CRT_glob = 0;
#endif

#endif

int
main(int argc, char **argv, char **env)
{
#ifdef _MSC_VER
    /* Arrange for _CrtDumpMemoryLeaks() to be called automatically at program
     * termination when built with CFG = DebugFull. */
    int currentFlag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
    currentFlag |= _CRTDBG_LEAK_CHECK_DF;
    _CrtSetDbgFlag(currentFlag);

    /* Change this -1 to the allocation number of any reported memory leaks to
     * break on the allocation call that was leaked. */
    _CrtSetBreakAlloc(-1L);
#endif

    return RunPerl(argc, argv, env);
}


@


1.4
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d1 4
d27 12
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d9 4
a12 1
 * So we turn it off like this:
d14 1
d16 1
@


1.2
log
@perl5.005_03 (stock)
@
text
@a3 60
#ifdef PERL_OBJECT

#define NO_XSLOCKS
#include "XSUB.H"
#include "win32iop.h"

#include <fcntl.h>
#include "perlhost.h"


char *staticlinkmodules[] = {
    "DynaLoader",
    NULL,
};

EXTERN_C void boot_DynaLoader _((CV* cv _CPERLarg));

static void
xs_init(CPERLarg)
{
    char *file = __FILE__;
    dXSUB_SYS;
    newXS("DynaLoader::boot_DynaLoader", boot_DynaLoader, file);
}

CPerlObj *pPerl;

#undef PERL_SYS_INIT
#define PERL_SYS_INIT(a, c)

int
main(int argc, char **argv, char **env)
{
    CPerlHost host;
    int exitstatus = 1;
#ifndef __BORLANDC__
    /* XXX this _may_ be a problem on some compilers (e.g. Borland) that
     * want to free() argv after main() returns.  As luck would have it,
     * Borland's CRT does the right thing to argv[0] already. */
    char szModuleName[MAX_PATH];

    GetModuleFileName(NULL, szModuleName, sizeof(szModuleName));
    argv[0] = szModuleName;
#endif

    if (!host.PerlCreate())
	exit(exitstatus);

    exitstatus = host.PerlParse(xs_init, argc, argv, NULL);

    if (!exitstatus)
	exitstatus = host.PerlRun();

    host.PerlDestroy();

    return exitstatus;
}

#else  /* PERL_OBJECT */

a4 4
/*
 * GNU C does not do __declspec()
 */
#define __declspec(foo) 
a14 3

__declspec(dllimport) int RunPerl(int argc, char **argv, char **env, void *ios);

d18 1
a18 9
#ifndef __BORLANDC__
    /* XXX this _may_ be a problem on some compilers (e.g. Borland) that
     * want to free() argv after main() returns.  As luck would have it,
     * Borland's CRT does the right thing to argv[0] already. */
    char szModuleName[MAX_PATH];
    GetModuleFileName(NULL, szModuleName, sizeof(szModuleName));
    argv[0] = szModuleName;
#endif
    return RunPerl(argc, argv, env, (void*)0);
d21 1
a21 1
#endif  /* PERL_OBJECT */
@


1.1
log
@perl 5.004_04
@
text
@d1 75
a75 2
#include <stdio.h>
#include <win32io.h>
a76 2
#ifndef _DLL
extern WIN32_IOSUBSYSTEM win32stdio;
d79 2
a80 1
extern int RunPerl(int argc, char **argv, char **env, void *iosubsystem);
d85 7
a91 4
#ifdef _DLL
    return (RunPerl(argc, argv, env, NULL));
#else
    return (RunPerl(argc, argv, env, &win32stdio));
d93 1
d95 2
@


1.1.1.1
log
@perl5.005_03
@
text
@d1 2
a2 75
#include "EXTERN.h"
#include "perl.h"

#ifdef PERL_OBJECT

#define NO_XSLOCKS
#include "XSUB.H"
#include "win32iop.h"

#include <fcntl.h>
#include "perlhost.h"


char *staticlinkmodules[] = {
    "DynaLoader",
    NULL,
};

EXTERN_C void boot_DynaLoader _((CV* cv _CPERLarg));

static void
xs_init(CPERLarg)
{
    char *file = __FILE__;
    dXSUB_SYS;
    newXS("DynaLoader::boot_DynaLoader", boot_DynaLoader, file);
}

CPerlObj *pPerl;

#undef PERL_SYS_INIT
#define PERL_SYS_INIT(a, c)

int
main(int argc, char **argv, char **env)
{
    CPerlHost host;
    int exitstatus = 1;
#ifndef __BORLANDC__
    /* XXX this _may_ be a problem on some compilers (e.g. Borland) that
     * want to free() argv after main() returns.  As luck would have it,
     * Borland's CRT does the right thing to argv[0] already. */
    char szModuleName[MAX_PATH];

    GetModuleFileName(NULL, szModuleName, sizeof(szModuleName));
    argv[0] = szModuleName;
#endif

    if (!host.PerlCreate())
	exit(exitstatus);

    exitstatus = host.PerlParse(xs_init, argc, argv, NULL);

    if (!exitstatus)
	exitstatus = host.PerlRun();

    host.PerlDestroy();

    return exitstatus;
}

#else  /* PERL_OBJECT */

#ifdef __GNUC__
/*
 * GNU C does not do __declspec()
 */
#define __declspec(foo) 

/* Mingw32 defaults to globing command line 
 * This is inconsistent with other Win32 ports and 
 * seems to cause trouble with passing -DXSVERSION=\"1.6\" 
 * So we turn it off like this:
 */
int _CRT_glob = 0;
d4 2
d8 1
a8 2

__declspec(dllimport) int RunPerl(int argc, char **argv, char **env, void *ios);
d13 4
a16 7
#ifndef __BORLANDC__
    /* XXX this _may_ be a problem on some compilers (e.g. Borland) that
     * want to free() argv after main() returns.  As luck would have it,
     * Borland's CRT does the right thing to argv[0] already. */
    char szModuleName[MAX_PATH];
    GetModuleFileName(NULL, szModuleName, sizeof(szModuleName));
    argv[0] = szModuleName;
a17 1
    return RunPerl(argc, argv, env, (void*)0);
a18 2

#endif  /* PERL_OBJECT */
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d4 60
d65 4
d79 3
d85 9
a93 1
    return RunPerl(argc, argv, env);
d96 1
a96 1

@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d9 1
a9 4
 * So we turn it off like this, but only when compiling
 * perlmain.c: perlmainst.c is linked into the same executable
 * as win32.c, which also does this, so we mustn't do it twice
 * otherwise we get a multiple definition error.
a10 1
#ifndef PERLDLL
a11 1
#endif
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@a0 4
#ifdef _MSC_VER
#include <crtdbg.h>
#endif

a22 12
#ifdef _MSC_VER
    /* Arrange for _CrtDumpMemoryLeaks() to be called automatically at program
     * termination when built with CFG = DebugFull. */
    int currentFlag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
    currentFlag |= _CRTDBG_LEAK_CHECK_DF;
    _CrtSetDbgFlag(currentFlag);

    /* Change this -1 to the allocation number of any reported memory leaks to
     * break on the allocation call that was leaked. */
    _CrtSetBreakAlloc(-1L);
#endif

@


