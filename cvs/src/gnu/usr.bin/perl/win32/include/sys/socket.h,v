head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.8
	OPENBSD_6_2_BASE:1.10
	PERL_5_24_2:1.1.1.9
	OPENBSD_6_1:1.10.0.12
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	PERL_5_20_2:1.1.1.9
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	PERL_5_20_1:1.1.1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.7.0.18
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.16
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.14
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.10
date	2014.11.17.20.57.08;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	QP75iYx42Uo7mMxO;

1.9
date	2014.03.24.15.05.34;	author afresh1;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.25.20.41.01;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.22;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.15;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.09.11;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.56;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.55;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.19;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.09;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.26.20;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.14;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.50.00;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.19.06;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.03.25.20.09.45;	author sthen;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.03.24.14.59.13;	author afresh1;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.11.17.20.53.21;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.10
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@/* sys/socket.h */

/* djl */
/* Provide UNIX compatibility */

#ifndef  _INC_SYS_SOCKET
#define  _INC_SYS_SOCKET

#define WIN32_LEAN_AND_MEAN
#ifdef __GNUC__
#  define Win32_Winsock
#endif
#include <windows.h>

/* Too late to include winsock2.h if winsock.h has already been loaded */
#ifndef _WINSOCKAPI_
#  if defined(UNDER_CE) && UNDER_CE <= 300
     /* winsock2 only for 4.00+ */
#    include <winsock.h>
#  else
#    include <winsock2.h>
     /* We need to include ws2tcpip.h to get the IPv6 definitions.
      * It will in turn include wspiapi.h.  Later versions of that
      * header in the Windows SDK generate C++ template code that
      * can't be compiled with VC6 anymore.  The _WSPIAPI_COUNTOF
      * definition below prevents wspiapi.h from generating this
      * incompatible code.
      */
#    define _WSPIAPI_COUNTOF(_Array) (sizeof(_Array) / sizeof(_Array[0]))
#    include <ws2tcpip.h>

#    ifndef SIO_GET_INTERFACE_LIST_EX

#      ifndef MSG_WAITALL
#        define MSG_WAITALL     0x8
#      endif

       /* The ws2tcpip.h header included in VC6 doesn't define the
        * sin6_scope_id member of sockaddr_in6.  We define our own
        * version and redefine sockaddr_in6 to point to this one
        * instead for compiling e.g. Socket.xs.
        */

       struct my_sockaddr_in6 {
           short   sin6_family;        /* AF_INET6 */
           u_short sin6_port;          /* Transport level port number */
           u_long  sin6_flowinfo;      /* IPv6 flow information */
           struct in_addr6 sin6_addr;  /* IPv6 address */
           u_long sin6_scope_id;       /* set of interfaces for a scope */
       };
#      define sockaddr_in6 my_sockaddr_in6

       /* Provide implementations of IN6ADDR_SETANY() and IN6ADDR_SETLOOPBACK
        * that also initialize the sin6_scope_id field.
        */
#      undef IN6ADDR_SETANY
#      define IN6ADDR_SETANY(x) {\
(x)->sin6_family = AF_INET6; \
(x)->sin6_port = 0; \
(x)->sin6_flowinfo = 0; \
*((u_long *)((x)->sin6_addr.s6_addr)    ) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 1) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 2) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 3) = 0; \
(x)->sin6_scope_id = 0; \
}

#      undef IN6ADDR_SETLOOPBACK
#      define IN6ADDR_SETLOOPBACK(x) {\
(x)->sin6_family = AF_INET6; \
(x)->sin6_port = 0; \
(x)->sin6_flowinfo = 0; \
*((u_long *)((x)->sin6_addr.s6_addr)    ) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 1) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 2) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 3) = 1; \
(x)->sin6_scope_id = 0; \
}

#      ifndef IPV6_HDRINCL
#        define IPV6_HDRINCL            2
#      endif
#      ifndef IPV6_UNICAST_HOPS
#        define IPV6_UNICAST_HOPS       4
#      endif
#      ifndef IPV6_MULTICAST_IF
#        define IPV6_MULTICAST_IF       9
#      endif
#      ifndef IPV6_MULTICAST_HOPS
#        define IPV6_MULTICAST_HOPS     10
#      endif
#      ifndef IPV6_MULTICAST_LOOP
#        define IPV6_MULTICAST_LOOP     11
#      endif
#      ifndef IPV6_ADD_MEMBERSHIP
#        define IPV6_ADD_MEMBERSHIP     12
#      endif
#      ifndef IPV6_DROP_MEMBERSHIP
#        define IPV6_DROP_MEMBERSHIP    13
#      endif
#      ifndef IPV6_JOIN_GROUP
#        define IPV6_JOIN_GROUP         IPV6_ADD_MEMBERSHIP
#      endif
#      ifndef IPV6_LEAVE_GROUP
#        define IPV6_LEAVE_GROUP        IPV6_DROP_MEMBERSHIP
#      endif
#      ifndef IPV6_PKTINFO
#        define IPV6_PKTINFO            19
#      endif
#      ifndef IPV6_HOPLIMIT
#        define IPV6_HOPLIMIT           21
#      endif
#      ifndef IPV6_PROTECTION_LEVEL
#        define IPV6_PROTECTION_LEVEL   23
#      endif

       /* The ws2tcpip.h header included in MinGW includes ipv6_mreq already */
#      ifndef __GNUC__
         typedef struct ipv6_mreq {
             struct in_addr6 ipv6mr_multiaddr;
             unsigned int    ipv6mr_interface;
         } IPV6_MREQ;
#      endif

#      ifndef EAI_AGAIN
#        define EAI_AGAIN       WSATRY_AGAIN
#      endif
#      ifndef EAI_BADFLAGS
#        define EAI_BADFLAGS    WSAEINVAL
#      endif
#      ifndef EAI_FAIL
#        define EAI_FAIL        WSANO_RECOVERY
#      endif
#      ifndef EAI_FAMILY
#        define EAI_FAMILY      WSAEAFNOSUPPORT
#      endif
#      ifndef EAI_MEMORY
#        define EAI_MEMORY      WSA_NOT_ENOUGH_MEMORY
#      endif
#      ifndef EAI_NODATA
#        define EAI_NODATA      WSANO_DATA
#      endif
#      ifndef EAI_NONAME
#        define EAI_NONAME      WSAHOST_NOT_FOUND
#      endif
#      ifndef EAI_SERVICE
#        define EAI_SERVICE     WSATYPE_NOT_FOUND
#      endif
#      ifndef EAI_SOCKTYPE
#        define EAI_SOCKTYPE    WSAESOCKTNOSUPPORT
#      endif

#      ifndef NI_NOFQDN
#        define NI_NOFQDN       0x01
#      endif
#      ifndef NI_NUMERICHOST
#        define NI_NUMERICHOST  0x02
#      endif
#      ifndef NI_NAMEREQD
#        define NI_NAMEREQD     0x04
#      endif
#      ifndef NI_NUMERICSERV
#        define NI_NUMERICSERV  0x08
#      endif
#      ifndef NI_DGRAM
#        define NI_DGRAM        0x10
#      endif

#    endif

#  endif
#endif

/* Early Platform SDKs have an incorrect definition of EAI_NODATA */
#if (EAI_NODATA == EAI_NONAME)
#  undef EAI_NODATA
#  define EAI_NODATA WSANO_DATA
#endif

#ifdef __cplusplus
extern "C" {
#endif

#include "errno2.h"

#ifndef PERL_FD_SETSIZE
#define PERL_FD_SETSIZE		64
#endif

#define PERL_BITS_PER_BYTE	8
#define	PERL_NFDBITS		(sizeof(Perl_fd_mask)*PERL_BITS_PER_BYTE)

typedef int			Perl_fd_mask;

typedef struct	Perl_fd_set {
    Perl_fd_mask bits[(PERL_FD_SETSIZE+PERL_NFDBITS-1)/PERL_NFDBITS];
}				Perl_fd_set;

#define PERL_FD_CLR(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] &= ~((unsigned)1 << ((n)%PERL_NFDBITS)))

#define PERL_FD_SET(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] |=  ((unsigned)1 << ((n)%PERL_NFDBITS)))

#define PERL_FD_ZERO(p) memset((char *)(p),0,sizeof(*(p)))

#define PERL_FD_ISSET(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] &   ((unsigned)1 << ((n)%PERL_NFDBITS)))

SOCKET win32_accept (SOCKET s, struct sockaddr *addr, int *addrlen);
int win32_bind (SOCKET s, const struct sockaddr *addr, int namelen);
int win32_closesocket (SOCKET s);
int win32_connect (SOCKET s, const struct sockaddr *name, int namelen);
int win32_ioctlsocket (SOCKET s, long cmd, u_long *argp);
int win32_getpeername (SOCKET s, struct sockaddr *name, int * namelen);
int win32_getsockname (SOCKET s, struct sockaddr *name, int * namelen);
int win32_getsockopt (SOCKET s, int level, int optname, char * optval, int *optlen);
u_long win32_htonl (u_long hostlong);
u_short win32_htons (u_short hostshort);
unsigned long win32_inet_addr (const char * cp);
char * win32_inet_ntoa (struct in_addr in);
int win32_listen (SOCKET s, int backlog);
u_long win32_ntohl (u_long netlong);
u_short win32_ntohs (u_short netshort);
int win32_recv (SOCKET s, char * buf, int len, int flags);
int win32_recvfrom (SOCKET s, char * buf, int len, int flags,
                         struct sockaddr *from, int * fromlen);
int win32_select (int nfds, Perl_fd_set *rfds, Perl_fd_set *wfds, Perl_fd_set *xfds,
		  const struct timeval *timeout);
int win32_send (SOCKET s, const char * buf, int len, int flags);
int win32_sendto (SOCKET s, const char * buf, int len, int flags,
                       const struct sockaddr *to, int tolen);
int win32_setsockopt (SOCKET s, int level, int optname,
                           const char * optval, int optlen);
SOCKET win32_socket (int af, int type, int protocol);
int win32_shutdown (SOCKET s, int how);

/* Database function prototypes */

struct hostent * win32_gethostbyaddr(const char * addr, int len, int type);
struct hostent * win32_gethostbyname(const char * name);
int win32_gethostname (char * name, int namelen);
struct servent * win32_getservbyport(int port, const char * proto);
struct servent * win32_getservbyname(const char * name, const char * proto);
struct protoent * win32_getprotobynumber(int proto);
struct protoent * win32_getprotobyname(const char * name);
struct protoent *win32_getprotoent(void);
struct servent *win32_getservent(void);
void win32_sethostent(int stayopen);
void win32_setnetent(int stayopen);
struct netent * win32_getnetent(void);
struct netent * win32_getnetbyname(char *name);
struct netent * win32_getnetbyaddr(long net, int type);
void win32_setprotoent(int stayopen);
void win32_setservent(int stayopen);
void win32_endhostent(void);
void win32_endnetent(void);
void win32_endprotoent(void);
void win32_endservent(void);

#ifndef WIN32SCK_IS_STDSCK

/* direct to our version */

#define htonl		win32_htonl
#define htons		win32_htons
#define ntohl		win32_ntohl
#define ntohs		win32_ntohs
#define inet_addr	win32_inet_addr
#define inet_ntoa	win32_inet_ntoa

#define socket		win32_socket
#define bind		win32_bind
#define listen		win32_listen
#define accept		win32_accept
#define connect		win32_connect
#define send		win32_send
#define sendto		win32_sendto
#define recv		win32_recv
#define recvfrom	win32_recvfrom
#define shutdown	win32_shutdown
#define closesocket	win32_closesocket
#define ioctlsocket	win32_ioctlsocket
#define setsockopt	win32_setsockopt
#define getsockopt	win32_getsockopt
#define getpeername	win32_getpeername
#define getsockname	win32_getsockname
#define gethostname	win32_gethostname
#define gethostbyname	win32_gethostbyname
#define gethostbyaddr	win32_gethostbyaddr
#define getprotobyname	win32_getprotobyname
#define getprotobynumber win32_getprotobynumber
#define getservbyname	win32_getservbyname
#define getservbyport	win32_getservbyport
#define select		win32_select
#define endhostent	win32_endhostent
#define endnetent	win32_endnetent
#define endprotoent	win32_endprotoent
#define endservent	win32_endservent
#define getnetent	win32_getnetent
#define getnetbyname	win32_getnetbyname
#define getnetbyaddr	win32_getnetbyaddr
#define getprotoent	win32_getprotoent
#define getservent	win32_getservent
#define sethostent	win32_sethostent
#define setnetent	win32_setnetent
#define setprotoent	win32_setprotoent
#define setservent	win32_setservent

#undef fd_set
#undef FD_SET
#undef FD_CLR
#undef FD_ISSET
#undef FD_ZERO
#define fd_set		Perl_fd_set
#define FD_SET(n,p)	PERL_FD_SET(n,p)
#define FD_CLR(n,p)	PERL_FD_CLR(n,p)
#define FD_ISSET(n,p)	PERL_FD_ISSET(n,p)
#define FD_ZERO(p)	PERL_FD_ZERO(p)

#endif	/* WIN32SCK_IS_STDSCK */

#ifdef __cplusplus
}
#endif

#endif	/* _INC_SYS_SOCKET */
@


1.9
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@a179 2
#include "win32.h"

d184 1
a184 11
#undef ENOTSOCK
#define ENOTSOCK       WSAENOTSOCK

#undef ECONNABORTED
#define ECONNABORTED WSAECONNABORTED

#undef ECONNRESET
#define ECONNRESET WSAECONNRESET

#undef EAFNOSUPPORT
#define EAFNOSUPPORT WSAEAFNOSUPPORT
@


1.8
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@a197 2
#ifdef USE_SOCKETS_AS_HANDLES

a221 10
#else	/* USE_SOCKETS_AS_HANDLES */

#define Perl_fd_set	fd_set
#define PERL_FD_SET(n,p)	FD_SET(n,p)
#define PERL_FD_CLR(n,p)	FD_CLR(n,p)
#define PERL_FD_ISSET(n,p)	FD_ISSET(n,p)
#define PERL_FD_ZERO(p)		FD_ZERO(p)

#endif	/* USE_SOCKETS_AS_HANDLES */

a321 1
#ifdef USE_SOCKETS_AS_HANDLES
a331 1
#endif	/* USE_SOCKETS_AS_HANDLES */
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a8 4
#ifdef __cplusplus
extern "C" {
#endif

a14 1

d21 151
a171 1
#  include <winsock2.h>
d173 5
d182 15
a196 1
#define  ENOTSOCK	WSAENOTSOCK
@


1.6
log
@merge in perl 5.8.8
@
text
@d19 1
d22 4
d27 1
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d18 5
a22 1
#include <winsock.h>
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d1 1
a1 1
// sys/socket.h
d3 2
a4 2
// djl
// Provide UNIX compatibility
d112 3
a114 3
//
// direct to our version
//
d179 1
a179 1
#endif	// _INC_SYS_SOCKET
@


1.3
log
@perl-5.6.0 + local changes
@
text
@a12 2
#ifndef  _WINDOWS_
#ifdef   __GNUC__
d15 1
a15 1
#define Win32_Winsock
d18 1
a18 16
#else
#define  _WINDOWS_

#define  FAR
#define  PASCAL     __stdcall
#define  WINAPI     __stdcall

#undef WORD
typedef  int        BOOL;
typedef  unsigned short WORD;
typedef  void*      HANDLE;
typedef  void*      HWND;
typedef  int (FAR WINAPI *FARPROC)();

typedef unsigned long       DWORD;
typedef void *PVOID;
d20 1
a20 16
#define IN
#define OUT

typedef struct _OVERLAPPED {
    DWORD   Internal;
    DWORD   InternalHigh;
    DWORD   Offset;
    DWORD   OffsetHigh;
    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

#endif
#endif //_WINDOWS_
// #ifndef __GNUC__
#include <winsock.h>
// #endif
a22 1
#undef   HOST_NOT_FOUND
@


1.2
log
@perl5.005_03 (stock)
@
text
@d50 1
a50 1
#ifndef __GNUC__
d52 1
a52 1
#endif
a144 1
#ifndef PERL_OBJECT
a205 1
#endif  /* PERL_OBJECT */
@


1.1
log
@perl 5.004_04
@
text
@d14 7
d48 1
d50 1
d52 1
d57 35
d111 2
a112 1
int win32_select (int nfds, int *readfds, int *writefds, int *exceptfds, const struct timeval *timeout);
d144 2
d166 1
d193 16
@


1.1.1.1
log
@perl5.005_03
@
text
@a13 7
#ifdef   __GNUC__
#define WIN32_LEAN_AND_MEAN
#ifdef __GNUC__
#define Win32_Winsock
#endif
#include <windows.h>
#else
a40 1
#endif
a41 1
#ifndef __GNUC__
a42 1
#endif
a46 35
#ifdef USE_SOCKETS_AS_HANDLES

#ifndef PERL_FD_SETSIZE
#define PERL_FD_SETSIZE		64
#endif

#define PERL_BITS_PER_BYTE	8
#define	PERL_NFDBITS		(sizeof(Perl_fd_mask)*PERL_BITS_PER_BYTE)

typedef int			Perl_fd_mask;

typedef struct	Perl_fd_set {
    Perl_fd_mask bits[(PERL_FD_SETSIZE+PERL_NFDBITS-1)/PERL_NFDBITS];
}				Perl_fd_set;

#define PERL_FD_CLR(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] &= ~((unsigned)1 << ((n)%PERL_NFDBITS)))

#define PERL_FD_SET(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] |=  ((unsigned)1 << ((n)%PERL_NFDBITS)))

#define PERL_FD_ZERO(p) memset((char *)(p),0,sizeof(*(p)))

#define PERL_FD_ISSET(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] &   ((unsigned)1 << ((n)%PERL_NFDBITS)))

#else	/* USE_SOCKETS_AS_HANDLES */

#define Perl_fd_set	fd_set
#define PERL_FD_SET(n,p)	FD_SET(n,p)
#define PERL_FD_CLR(n,p)	FD_CLR(n,p)
#define PERL_FD_ISSET(n,p)	FD_ISSET(n,p)
#define PERL_FD_ZERO(p)		FD_ZERO(p)

#endif	/* USE_SOCKETS_AS_HANDLES */
d66 1
a66 2
int win32_select (int nfds, Perl_fd_set *rfds, Perl_fd_set *wfds, Perl_fd_set *xfds,
		  const struct timeval *timeout);
a97 2
#ifndef WIN32SCK_IS_STDSCK
#ifndef PERL_OBJECT
a117 1
#define closesocket	win32_closesocket
a143 16

#ifdef USE_SOCKETS_AS_HANDLES
#undef fd_set
#undef FD_SET
#undef FD_CLR
#undef FD_ISSET
#undef FD_ZERO
#define fd_set		Perl_fd_set
#define FD_SET(n,p)	PERL_FD_SET(n,p)
#define FD_CLR(n,p)	PERL_FD_CLR(n,p)
#define FD_ISSET(n,p)	PERL_FD_ISSET(n,p)
#define FD_ZERO(p)	PERL_FD_ZERO(p)
#endif	/* USE_SOCKETS_AS_HANDLES */

#endif  /* PERL_OBJECT */
#endif	/* WIN32SCK_IS_STDSCK */
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d50 1
a50 1
// #ifndef __GNUC__
d52 1
a52 1
// #endif
d145 1
d207 1
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d13 2
d17 1
a17 1
#  define Win32_Winsock
d20 31
d52 1
a52 2

#include "win32.h"
d55 1
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 1
/* sys/socket.h */
d3 2
a4 2
/* djl */
/* Provide UNIX compatibility */
d112 3
a114 3

/* direct to our version */

d179 1
a179 1
#endif	/* _INC_SYS_SOCKET */
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d18 1
a18 5

/* Too late to include winsock2.h if winsock.h has already been loaded */
#ifndef _WINSOCKAPI_
#  include <winsock2.h>
#endif
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@a18 1

a20 4
#  if defined(UNDER_CE) && UNDER_CE <= 300
     /* winsock2 only for 4.00+ */
#    include <winsock.h>
#  else
a21 1
#endif
@


1.1.1.7
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 4
d19 1
d26 1
a26 151
#    include <winsock2.h>
     /* We need to include ws2tcpip.h to get the IPv6 definitions.
      * It will in turn include wspiapi.h.  Later versions of that
      * header in the Windows SDK generate C++ template code that
      * can't be compiled with VC6 anymore.  The _WSPIAPI_COUNTOF
      * definition below prevents wspiapi.h from generating this
      * incompatible code.
      */
#    define _WSPIAPI_COUNTOF(_Array) (sizeof(_Array) / sizeof(_Array[0]))
#    include <ws2tcpip.h>

#    ifndef SIO_GET_INTERFACE_LIST_EX

#      ifndef MSG_WAITALL
#        define MSG_WAITALL     0x8
#      endif

       /* The ws2tcpip.h header included in VC6 doesn't define the
        * sin6_scope_id member of sockaddr_in6.  We define our own
        * version and redefine sockaddr_in6 to point to this one
        * instead for compiling e.g. Socket.xs.
        */

       struct my_sockaddr_in6 {
           short   sin6_family;        /* AF_INET6 */
           u_short sin6_port;          /* Transport level port number */
           u_long  sin6_flowinfo;      /* IPv6 flow information */
           struct in_addr6 sin6_addr;  /* IPv6 address */
           u_long sin6_scope_id;       /* set of interfaces for a scope */
       };
#      define sockaddr_in6 my_sockaddr_in6

       /* Provide implementations of IN6ADDR_SETANY() and IN6ADDR_SETLOOPBACK
        * that also initialize the sin6_scope_id field.
        */
#      undef IN6ADDR_SETANY
#      define IN6ADDR_SETANY(x) {\
(x)->sin6_family = AF_INET6; \
(x)->sin6_port = 0; \
(x)->sin6_flowinfo = 0; \
*((u_long *)((x)->sin6_addr.s6_addr)    ) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 1) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 2) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 3) = 0; \
(x)->sin6_scope_id = 0; \
}

#      undef IN6ADDR_SETLOOPBACK
#      define IN6ADDR_SETLOOPBACK(x) {\
(x)->sin6_family = AF_INET6; \
(x)->sin6_port = 0; \
(x)->sin6_flowinfo = 0; \
*((u_long *)((x)->sin6_addr.s6_addr)    ) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 1) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 2) = 0; \
*((u_long *)((x)->sin6_addr.s6_addr) + 3) = 1; \
(x)->sin6_scope_id = 0; \
}

#      ifndef IPV6_HDRINCL
#        define IPV6_HDRINCL            2
#      endif
#      ifndef IPV6_UNICAST_HOPS
#        define IPV6_UNICAST_HOPS       4
#      endif
#      ifndef IPV6_MULTICAST_IF
#        define IPV6_MULTICAST_IF       9
#      endif
#      ifndef IPV6_MULTICAST_HOPS
#        define IPV6_MULTICAST_HOPS     10
#      endif
#      ifndef IPV6_MULTICAST_LOOP
#        define IPV6_MULTICAST_LOOP     11
#      endif
#      ifndef IPV6_ADD_MEMBERSHIP
#        define IPV6_ADD_MEMBERSHIP     12
#      endif
#      ifndef IPV6_DROP_MEMBERSHIP
#        define IPV6_DROP_MEMBERSHIP    13
#      endif
#      ifndef IPV6_JOIN_GROUP
#        define IPV6_JOIN_GROUP         IPV6_ADD_MEMBERSHIP
#      endif
#      ifndef IPV6_LEAVE_GROUP
#        define IPV6_LEAVE_GROUP        IPV6_DROP_MEMBERSHIP
#      endif
#      ifndef IPV6_PKTINFO
#        define IPV6_PKTINFO            19
#      endif
#      ifndef IPV6_HOPLIMIT
#        define IPV6_HOPLIMIT           21
#      endif
#      ifndef IPV6_PROTECTION_LEVEL
#        define IPV6_PROTECTION_LEVEL   23
#      endif

       /* The ws2tcpip.h header included in MinGW includes ipv6_mreq already */
#      ifndef __GNUC__
         typedef struct ipv6_mreq {
             struct in_addr6 ipv6mr_multiaddr;
             unsigned int    ipv6mr_interface;
         } IPV6_MREQ;
#      endif

#      ifndef EAI_AGAIN
#        define EAI_AGAIN       WSATRY_AGAIN
#      endif
#      ifndef EAI_BADFLAGS
#        define EAI_BADFLAGS    WSAEINVAL
#      endif
#      ifndef EAI_FAIL
#        define EAI_FAIL        WSANO_RECOVERY
#      endif
#      ifndef EAI_FAMILY
#        define EAI_FAMILY      WSAEAFNOSUPPORT
#      endif
#      ifndef EAI_MEMORY
#        define EAI_MEMORY      WSA_NOT_ENOUGH_MEMORY
#      endif
#      ifndef EAI_NODATA
#        define EAI_NODATA      WSANO_DATA
#      endif
#      ifndef EAI_NONAME
#        define EAI_NONAME      WSAHOST_NOT_FOUND
#      endif
#      ifndef EAI_SERVICE
#        define EAI_SERVICE     WSATYPE_NOT_FOUND
#      endif
#      ifndef EAI_SOCKTYPE
#        define EAI_SOCKTYPE    WSAESOCKTNOSUPPORT
#      endif

#      ifndef NI_NOFQDN
#        define NI_NOFQDN       0x01
#      endif
#      ifndef NI_NUMERICHOST
#        define NI_NUMERICHOST  0x02
#      endif
#      ifndef NI_NAMEREQD
#        define NI_NAMEREQD     0x04
#      endif
#      ifndef NI_NUMERICSERV
#        define NI_NUMERICSERV  0x08
#      endif
#      ifndef NI_DGRAM
#        define NI_DGRAM        0x10
#      endif

#    endif

#  endif
a27 5

/* Early Platform SDKs have an incorrect definition of EAI_NODATA */
#if (EAI_NODATA == EAI_NONAME)
#  undef EAI_NODATA
#  define EAI_NODATA WSANO_DATA
d32 1
a32 15
#ifdef __cplusplus
extern "C" {
#endif

#undef ENOTSOCK
#define ENOTSOCK       WSAENOTSOCK

#undef ECONNABORTED
#define ECONNABORTED WSAECONNABORTED

#undef ECONNRESET
#define ECONNRESET WSAECONNRESET

#undef EAFNOSUPPORT
#define EAFNOSUPPORT WSAEAFNOSUPPORT
@


1.1.1.8
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d198 2
d224 10
d334 1
d345 1
@


1.1.1.9
log
@Import perl-5.20.1
@
text
@d180 2
d186 11
a196 1
#include "errno2.h"
@


