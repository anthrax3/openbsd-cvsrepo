head	1.4;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.4.0.36
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.34
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.28
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.30
	OPENBSD_5_8_BASE:1.4
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.4.0.22
	OPENBSD_5_7_BASE:1.4
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.4.0.26
	OPENBSD_5_6_BASE:1.4
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.4.0.24
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.20
	OPENBSD_5_4_BASE:1.4
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.4.0.18
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.16
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.14
	OPENBSD_5_0:1.4.0.12
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.3.0.36
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.34
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.32
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.30
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.28
	OPENBSD_4_0_BASE:1.3
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.3.0.26
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.24
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.22
	OPENBSD_3_7_BASE:1.3
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.4
date	2008.09.29.17.36.22;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.09.10;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.55;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.53;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.18;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.08;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.19.06;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@/* dirent.h */

/* djl
 * Provide UNIX compatibility
 */

#ifndef  _INC_DIRENT
#define  _INC_DIRENT

/*
 * NT versions of readdir(), etc
 * From the MSDOS implementation
 */

/* Directory entry size */
#ifdef DIRSIZ
#undef DIRSIZ
#endif
#define DIRSIZ(rp)  (sizeof(struct direct))

/* needed to compile directory stuff */
#define DIRENT direct

/* structure of a directory entry */
typedef struct direct 
{
	long	d_ino;			/* inode number (not used by MS-DOS)  */
	long	d_namlen;		/* name length  */
	char	d_name[257];		/* file name  */
} _DIRECT;

/* structure for dir operations */
typedef struct _dir_struc
{
	char	*start;			/* starting position */
	char	*curr;			/* current position */
	long	size;			/* allocated size of string table */
	long	nfiles;			/* number of filenames in table */
	struct direct dirstr;		/* directory structure to return */
	void*	handle;			/* system handle */
	char	*end;			/* position after last filename */
} DIR;

#if 0		/* these have moved to win32iop.h */
DIR *		win32_opendir(const char *filename);
struct direct *	win32_readdir(DIR *dirp);
long		win32_telldir(DIR *dirp);
void		win32_seekdir(DIR *dirp,long loc);
void		win32_rewinddir(DIR *dirp);
int		win32_closedir(DIR *dirp);
#endif

#endif /* _INC_DIRENT */
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d45 1
a45 1
DIR *		win32_opendir(char *filename);
@


1.2
log
@perl5.005_03 (stock)
@
text
@d1 1
a1 1
// dirent.h
d3 3
a5 2
// djl
// Provide UNIX compatibility
d10 4
a13 4
//
// NT versions of readdir(), etc
// From the MSDOS implementation
//
d15 1
a15 1
// Directory entry size 
d21 1
a21 1
// needed to compile directory stuff
d24 1
a24 1
// structure of a directory entry
d27 3
a29 3
	long	d_ino;			// inode number (not used by MS-DOS) 
	int	d_namlen;		// Name length 
	char	d_name[257];		// file name 
d32 1
a32 1
// structure for dir operations 
d35 7
a41 5
	char	*start;			// Starting position
	char	*curr;			// Current position
	long	size;			// Size of string table
	long	nfiles;			// number if filenames in table
	struct direct dirstr;		// Directory structure to return
d44 1
d51 1
d53 1
a53 2

#endif //_INC_DIRENT
@


1.1
log
@perl 5.004_04
@
text
@d41 6
a46 6
DIR *opendir(char *filename);
struct direct *readdir(DIR *dirp);
long telldir(DIR *dirp);
void seekdir(DIR *dirp,long loc);
void rewinddir(DIR *dirp);
int closedir(DIR *dirp);
@


1.1.1.1
log
@perl5.005_03
@
text
@d41 6
a46 6
DIR *		win32_opendir(char *filename);
struct direct *	win32_readdir(DIR *dirp);
long		win32_telldir(DIR *dirp);
void		win32_seekdir(DIR *dirp,long loc);
void		win32_rewinddir(DIR *dirp);
int		win32_closedir(DIR *dirp);
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d1 1
a1 1
/* dirent.h */
d3 2
a4 3
/* djl
 * Provide UNIX compatibility
 */
d9 4
a12 4
/*
 * NT versions of readdir(), etc
 * From the MSDOS implementation
 */
d14 1
a14 1
/* Directory entry size */
d20 1
a20 1
/* needed to compile directory stuff */
d23 1
a23 1
/* structure of a directory entry */
d26 3
a28 3
	long	d_ino;			/* inode number (not used by MS-DOS)  */
	long	d_namlen;		/* name length  */
	char	d_name[257];		/* file name  */
d31 1
a31 1
/* structure for dir operations */
d34 5
a38 7
	char	*start;			/* starting position */
	char	*curr;			/* current position */
	long	size;			/* allocated size of string table */
	long	nfiles;			/* number of filenames in table */
	struct direct dirstr;		/* directory structure to return */
	void*	handle;			/* system handle */
	char	*end;			/* position after last filename */
a40 1
#if 0		/* these have moved to win32iop.h */
a46 1
#endif
d48 2
a49 1
#endif /* _INC_DIRENT */
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d45 1
a45 1
DIR *		win32_opendir(const char *filename);
@


