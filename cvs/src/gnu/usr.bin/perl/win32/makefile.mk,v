head	1.25;
access;
symbols
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	PERL_5_20_2:1.1.1.16
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.25
date	2017.02.05.00.34.36;	author afresh1;	state Exp;
branches;
next	1.24;
commitid	14g5t9TCF9ptuB8D;

1.24
date	2017.02.05.00.33.41;	author afresh1;	state Exp;
branches;
next	1.23;
commitid	7JLVNm1wwPgqSqTa;

1.23
date	2017.02.05.00.32.22;	author afresh1;	state Exp;
branches;
next	1.22;
commitid	cxJ08BvJA9Pt2PTM;

1.22
date	2016.07.03.01.08.05;	author afresh1;	state Exp;
branches;
next	1.21;
commitid	GzHqjSTnBjdF7Wcw;

1.21
date	2015.04.25.19.30.23;	author afresh1;	state Exp;
branches;
next	1.20;
commitid	j9Lvbog4oJBg7dIS;

1.20
date	2015.04.25.19.26.23;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	3qGYFVvfrExB70FB;

1.19
date	2015.04.25.19.14.49;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	XRK22kO4se3v2i2I;

1.18
date	2014.11.17.21.03.19;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	KQNGgR8uwAxYXWj8;

1.17
date	2014.11.17.21.01.01;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	LnErp1MFKSuew5Fr;

1.16
date	2014.11.17.20.57.08;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	QP75iYx42Uo7mMxO;

1.15
date	2014.03.24.15.05.34;	author afresh1;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.25.20.41.01;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.24.15.07.11;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.29.17.36.22;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.28.19.23.15;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.15.21.30.43;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.10.39;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.21.33.12;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.52;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.39;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.36;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.09.04;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.40;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.14;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.06;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.26.17;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.13;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.37;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.48;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.47;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.18.28;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.58;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.19.06;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.48.45;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.09.44;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.59.12;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.53.21;	author afresh1;	state Exp;
branches;
next	1.1.1.16;
commitid	B31cAbBIXiCqnL97;

1.1.1.16
date	2015.04.25.19.10.51;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.25
log
@Apply pre-built unicore patch - perl-5.24.1
@
text
@#
# Makefile to build perl on Windows using DMAKE.
# Supported compilers:
#	Microsoft Visual C++ 6.0 or later
#	MinGW with gcc-3.4.5 or later
#	Windows SDK 64-bit compiler and tools
#
# This is set up to build a perl.exe that runs off a shared library
# (perl524.dll).  Also makes individual DLLs for the XS extensions.
#

##
## Make sure you read README.win32 *before* you mess with anything here!
##

#
# Import everything from the environment like NMAKE does.
#
.IMPORT : .EVERYTHING

##
## Build configuration.  Edit the values below to suit your needs.
##

#
# Set these to wherever you want "dmake install" to put your
# newly built perl.
#
INST_DRV	*= c:
INST_TOP	*= $(INST_DRV)\perl

#
# Uncomment if you want to build a 32-bit Perl using a 32-bit compiler
# on a 64-bit version of Windows.
#
#WIN64		*= undef

#
# Comment this out if you DON'T want your perl installation to be versioned.
# This means that the new installation will overwrite any files from the
# old installation at the same INST_TOP location.  Leaving it enabled is
# the safest route, as perl adds the extra version directory to all the
# locations it installs files to.  If you disable it, an alternative
# versioned installation can be obtained by setting INST_TOP above to a
# path that includes an arbitrary version string.
#
#INST_VER	*= \5.24.1

#
# Comment this out if you DON'T want your perl installation to have
# architecture specific components.  This means that architecture-
# specific files will be installed along with the architecture-neutral
# files.  Leaving it enabled is safer and more flexible, in case you
# want to build multiple flavors of perl and install them together in
# the same location.  Commenting it out gives you a simpler
# installation that is easier to understand for beginners.
#
#INST_ARCH	*= \$(ARCHNAME)

#
# Uncomment this if you want perl to run
# 	$Config{sitelibexp}\sitecustomize.pl
# before anything else.  This script can then be set up, for example,
# to add additional entries to @@INC.
#
#USE_SITECUST	*= define

#
# uncomment to enable multiple interpreters.  This is needed for fork()
# emulation and for thread support, and is auto-enabled by USE_IMP_SYS
# and USE_ITHREADS below.
#
USE_MULTI	*= define

#
# Interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  This needs (and
# will auto-enable) USE_MULTI above.
#
USE_ITHREADS	*= define

#
# uncomment to enable the implicit "host" layer for all system calls
# made by perl.  This is also needed to get fork().  This needs (and
# will auto-enable) USE_MULTI above.
#
USE_IMP_SYS	*= define

#
# Comment this out if you don't want to enable large file support for
# some reason.  Should normally only be changed to maintain compatibility
# with an older release of perl.
#
USE_LARGE_FILES	*= define

#
# Uncomment this if you're building a 32-bit perl and want 64-bit integers.
# (If you're building a 64-bit perl then you will have 64-bit integers whether
# or not this is uncommented.)
# Note: This option is not supported in 32-bit MSVC60 builds.
#
#USE_64_BIT_INT	*= define

#
# Uncomment this if you want to support the use of long doubles in GCC builds.
# This option is not supported for MSVC builds.
#
#USE_LONG_DOUBLE *=define

#
# Uncomment this if you want to disable looking up values from
# HKEY_CURRENT_USER\Software\Perl and HKEY_LOCAL_MACHINE\Software\Perl in
# the Registry.
#
#USE_NO_REGISTRY *=define

#
# uncomment exactly one of the following
#
# Visual C++ 6.0 (aka Visual C++ 98)
#CCTYPE		*= MSVC60
# Visual C++ .NET 2002/2003 (aka Visual C++ 7.0/7.1) (full version)
#CCTYPE		*= MSVC70
# Visual C++ Toolkit 2003 (aka Visual C++ 7.1) (free command-line tools)
#CCTYPE		*= MSVC70FREE
# Windows Server 2003 SP1 Platform SDK (April 2005)
#CCTYPE		= SDK2003SP1
# Visual C++ 2005 (aka Visual C++ 8.0) (full version)
#CCTYPE		*= MSVC80
# Visual C++ 2005 Express Edition (aka Visual C++ 8.0) (free version)
#CCTYPE		*= MSVC80FREE
# Visual C++ 2008 (aka Visual C++ 9.0) (full version)
#CCTYPE		*= MSVC90
# Visual C++ 2008 Express Edition (aka Visual C++ 9.0) (free version)
#CCTYPE		*= MSVC90FREE
# Visual C++ 2010 (aka Visual C++ 10.0) (full version)
#CCTYPE		= MSVC100
# Visual C++ 2010 Express Edition (aka Visual C++ 10.0) (free version)
#CCTYPE		= MSVC100FREE
# Visual C++ 2012 (aka Visual C++ 11.0) (full version)
#CCTYPE		= MSVC110
# Visual C++ 2012 Express Edition (aka Visual C++ 11.0) (free version)
#CCTYPE		= MSVC110FREE
# Visual C++ 2013 (aka Visual C++ 12.0) (full version)
#CCTYPE		= MSVC120
# Visual C++ 2013 Express Edition (aka Visual C++ 12.0) (free version)
#CCTYPE		= MSVC120FREE
# MinGW or mingw-w64 with gcc-3.4.5 or later
CCTYPE		*= GCC

#
# If you are using GCC, 4.3 or later by default we add the -fwrapv option.
# See https://rt.perl.org/Ticket/Display.html?id=121505
#
#GCCWRAPV       *= define

#
# If you are using Intel C++ Compiler uncomment this
#
#__ICC		*= define

#
# Uncomment this if you want to build everything in C++ mode
#
#USE_CPLUSPLUS	*= define

#
# uncomment next line if you want debug version of perl (big/slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
# You can also set CFG = DebugSymbols for a slightly smaller/faster
# debug build without the special debugging code in perl which is
# enabled via -DDEBUGGING;
#
# or you can set CFG = DebugFull for an even fuller (bigger/slower)
# debug build using the debug version of the CRT, and enabling VC++
# debug features such as extra assertions and invalid parameter warnings
# in perl and CRT code via -D_DEBUG.  (Note that the invalid parameter
# handler does get triggered from time to time in this configuration,
# which causes warnings to be printed on STDERR, which in turn causes a
# few tests to fail.)  (This configuration is only available for VC++ builds.)
#
#CFG		*= Debug

#
# uncomment to enable linking with setargv.obj under the Visual C
# compiler. Setting this options enables perl to expand wildcards in
# arguments, but it may be harder to use alternate methods like
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
#
#USE_SETARGV	*= define

#
# set this if you wish to use perl's malloc
# WARNING: Turning this on/off WILL break binary compatibility with extensions
# you may have compiled with/without it.  Be prepared to recompile all
# extensions if you change the default.  Currently, this cannot be enabled
# if you ask for USE_IMP_SYS above.
#
#PERL_MALLOC	*= define

#
# set this to enable debugging mstats
# This must be enabled to use the Devel::Peek::mstat() function.  This cannot
# be enabled without PERL_MALLOC as well.
#
#DEBUG_MSTATS	*= define

#
# set this to additionally provide a statically linked perl-static.exe.
# Note that dynamic loading will not work with this perl, so you must
# include required modules statically using the STATIC_EXT or ALL_STATIC
# variables below. A static library perl524s.lib will also be created.
# Ordinary perl.exe is not affected by this option.
#
#BUILD_STATIC	*= define

#
# in addition to BUILD_STATIC the option ALL_STATIC makes *every*
# extension get statically built
# This will result in a very large perl executable, but the main purpose
# is to have proper linking set so as to be able to create miscellaneous
# executables with different built-in extensions
#
#ALL_STATIC	*= define

#
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
.IF "$(CCTYPE)" == "GCC"
CCHOME		*= C:\MinGW
.ELSE
CCHOME		*= $(MSVCDIR)
.ENDIF

#
# uncomment this if you are using x86_64-w64-mingw32 cross-compiler
# ie if your gcc executable is called 'x86_64-w64-mingw32-gcc'
# instead of the usual 'gcc'.
#
#GCCCROSS	*= define

#
# Following sets $Config{incpath} and $Config{libpth}
#

.IF "$(GCCCROSS)" == "define"
CCINCDIR *= $(CCHOME)\x86_64-w64-mingw32\include
CCLIBDIR *= $(CCHOME)\x86_64-w64-mingw32\lib
CCDLLDIR *= $(CCLIBDIR)
.ELSE
CCINCDIR *= $(CCHOME)\include
CCLIBDIR *= $(CCHOME)\lib
CCDLLDIR *= $(CCHOME)\bin
.ENDIF

#
# Additional compiler flags can be specified here.
#
BUILDOPT	*= $(BUILDOPTEXTRA)

#
# This should normally be disabled.  Enabling it will disable the File::Glob
# implementation of CORE::glob.
#
#BUILDOPT	+= -DPERL_EXTERNAL_GLOB

#
# Perl needs to read scripts in text mode so that the DATA filehandle
# works correctly with seek() and tell(), or around auto-flushes of
# all filehandles (e.g. by system(), backticks, fork(), etc).
#
# The current version on the ByteLoader module on CPAN however only
# works if scripts are read in binary mode.  But before you disable text
# mode script reading (and break some DATA filehandle functionality)
# please check first if an updated ByteLoader isn't available on CPAN.
#
BUILDOPT	+= -DPERL_TEXTMODE_SCRIPTS

#
# specify semicolon-separated list of extra directories that modules will
# look for libraries (spaces in path names need not be quoted)
#
EXTRALIBDIRS	*=

#
# set this to point to cmd.exe (only needed if you use some
# alternate shell that doesn't grok cmd.exe style commands)
#
#SHELL		*= g:\winnt\system32\cmd.exe

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#
#EMAIL		*=

##
## Build configuration ends.
##

##################### CHANGE THESE ONLY IF YOU MUST #####################

PERL_MALLOC	*= undef
DEBUG_MSTATS	*= undef

USE_SITECUST	*= undef
USE_MULTI	*= undef
USE_ITHREADS	*= undef
USE_IMP_SYS	*= undef
USE_LARGE_FILES	*= undef
USE_64_BIT_INT	*= undef
USE_LONG_DOUBLE	*= undef
USE_NO_REGISTRY	*= undef

.IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
.ENDIF

.IF "$(PERL_MALLOC)" == "undef"
DEBUG_MSTATS	= undef
.ENDIF

.IF "$(DEBUG_MSTATS)" == "define"
BUILDOPT	+= -DPERL_DEBUGGING_MSTATS
.ENDIF

.IF "$(USE_IMP_SYS) $(USE_MULTI)" == "define undef"
USE_MULTI	!= define
.ENDIF

.IF "$(USE_ITHREADS) $(USE_MULTI)" == "define undef"
USE_MULTI	!= define
.ENDIF

.IF "$(USE_SITECUST)" == "define"
BUILDOPT	+= -DUSE_SITECUSTOMIZE
.ENDIF

.IF "$(USE_MULTI)" != "undef"
BUILDOPT	+= -DPERL_IMPLICIT_CONTEXT
.ENDIF

.IF "$(USE_IMP_SYS)" != "undef"
BUILDOPT	+= -DPERL_IMPLICIT_SYS
.ENDIF

.IF "$(USE_NO_REGISTRY)" != "undef"
BUILDOPT	+= -DWIN32_NO_REGISTRY
.ENDIF

PROCESSOR_ARCHITECTURE *= x86

.IF "$(WIN64)" == "undef"
PROCESSOR_ARCHITECTURE	= x86
.ENDIF

.IF "$(WIN64)" == ""
# When we are running from a 32bit cmd.exe on AMD64 then
# PROCESSOR_ARCHITECTURE is set to x86 and PROCESSOR_ARCHITEW6432
# is set to AMD64
.IF "$(PROCESSOR_ARCHITEW6432)" != ""
PROCESSOR_ARCHITECTURE	!= $(PROCESSOR_ARCHITEW6432)
WIN64			= define
.ELIF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITECTURE)" == "IA64"
WIN64			= define
.ELSE
WIN64			= undef
.ENDIF
.ENDIF

.IF "$(WIN64)" == "define"
USE_64_BIT_INT	= define
.ENDIF

# Treat 64-bit MSVC60 (doesn't really exist) as SDK2003SP1 because
# both link against MSVCRT.dll (which is part of Windows itself) and
# not against a compiler specific versioned runtime.
.IF "$(WIN64)" == "define" && "$(CCTYPE)" == "MSVC60"
CCTYPE		= SDK2003SP1
.ENDIF

# Disable the 64-bit-int option for (32-bit) MSVC60 builds since that compiler
# does not support it.
.IF "$(CCTYPE)" == "MSVC60"
USE_64_BIT_INT	!= undef
.ENDIF

# Disable the long double option for MSVC builds since that compiler
# does not support it.
.IF "$(CCTYPE)" != "GCC"
USE_LONG_DOUBLE	!= undef
.ENDIF

ARCHITECTURE = $(PROCESSOR_ARCHITECTURE)
.IF "$(ARCHITECTURE)" == "AMD64"
ARCHITECTURE	= x64
.ENDIF
.IF "$(ARCHITECTURE)" == "IA64"
ARCHITECTURE	= ia64
.ENDIF

.IF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-multi
.ELSE
ARCHNAME	= MSWin32-$(ARCHITECTURE)-perlio
.ENDIF

.IF "$(USE_ITHREADS)" == "define"
ARCHNAME	!:= $(ARCHNAME)-thread
.ENDIF

.IF "$(WIN64)" != "define"
.IF "$(USE_64_BIT_INT)" == "define"
ARCHNAME	!:= $(ARCHNAME)-64int
.ENDIF
.ENDIF

.IF "$(USE_LONG_DOUBLE)" == "define"
ARCHNAME	!:= $(ARCHNAME)-ld
.ENDIF

ARCHDIR		= ..\lib\$(ARCHNAME)
COREDIR		= ..\lib\CORE
AUTODIR		= ..\lib\auto
LIBDIR		= ..\lib
EXTDIR		= ..\ext
DISTDIR		= ..\dist
CPANDIR		= ..\cpan
PODDIR		= ..\pod
HTMLDIR		= .\html

#
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_BIN	= $(INST_SCRIPT)$(INST_ARCH)
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_ARCHLIB	= $(INST_LIB)$(INST_ARCH)
INST_COREDIR	= $(INST_ARCHLIB)\CORE
INST_HTML	= $(INST_TOP)$(INST_VER)\html

#
# Programs to compile, build .lib files and link
#

.USESHELL :

MINIBUILDOPT    *=

.IF "$(CCTYPE)" == "GCC"

.IF "$(GCCCROSS)" == "define"
ARCHPREFIX      = x86_64-w64-mingw32-
.ENDIF

CC		= $(ARCHPREFIX)gcc
LINK32		= $(ARCHPREFIX)g++
LIB32		= $(ARCHPREFIX)ar rc
IMPLIB		= $(ARCHPREFIX)dlltool
RSC		= $(ARCHPREFIX)windres

.IF "$(USE_LONG_DOUBLE)" == "define"
BUILDOPT        += -D__USE_MINGW_ANSI_STDIO
MINIBUILDOPT    += -D__USE_MINGW_ANSI_STDIO
.ENDIF

GCCWRAPV *= $(shell for /f "delims=. tokens=1,2,3" %i in ('$(CC) -dumpversion') do @@if "%i"=="4" (if "%j" geq "3" echo define) else if "%i" geq "5" (echo define))

.IF "$(GCCWRAPV)" == "define"
BUILDOPT        += -fwrapv
MINIBUILDOPT    += -fwrapv
.ENDIF

i = .i
o = .o
a = .a

#
# Options
#

INCLUDES	= -I.\include -I. -I..
DEFINES		= -DWIN32
.IF "$(WIN64)" == "define"
DEFINES		+= -DWIN64 -DCONSERVATIVE
.ENDIF
LOCDEFS		= -DPERLDLL -DPERL_CORE
CXX_FLAG	= -xc++

# Current releases of MinGW 5.1.4 (as of 11-Aug-2009) will fail to link
# correctly if -lmsvcrt is specified explicitly.
LIBC		=
#LIBC		= -lmsvcrt

# same libs as MSVC
LIBFILES	= $(LIBC) -lmoldname -lkernel32 -luser32 -lgdi32 -lwinspool \
	-lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -lnetapi32 \
	-luuid -lws2_32 -lmpr -lwinmm -lversion -lodbc32 -lodbccp32 -lcomctl32

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -g -O2 -DDEBUGGING
LINK_DBG	= -g
.ELIF  "$(CFG)" == "DebugSymbols"
OPTIMIZE	= -g -O2
LINK_DBG	= -g
.ELSE
OPTIMIZE	= -s -O2
LINK_DBG	= -s
.ENDIF

EXTRACFLAGS	=
.IF "$(USE_CPLUSPLUS)" == "define"
EXTRACFLAGS	+= $(CXX_FLAG)
.ENDIF
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) $(OPTIMIZE)
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)" -L"$(CCLIBDIR)"
OBJOUT_FLAG	= -o
EXEOUT_FLAG	= -o
LIBOUT_FLAG	=
PDBOUT		=

BUILDOPT	+= -fno-strict-aliasing -mms-bitfields
MINIBUILDOPT	+= -fno-strict-aliasing

TESTPREPGCC	= test-prep-gcc

.ELSE

# All but the free version of VC++ 7.1 can load DLLs on demand.  Makes the test
# suite run in about 10% less time.
.IF "$(CCTYPE)" != "MSVC70FREE"
# If no registry, advapi32 is only used for Perl_pp_getlogin/getlogin/GetUserNameA
# which is rare to execute
.IF "$(USE_NO_REGISTRY)" != "undef"
DELAYLOAD	= -DELAYLOAD:ws2_32.dll -DELAYLOAD:advapi32.dll delayimp.lib
MINIDELAYLOAD	=
.ELSE
DELAYLOAD	= -DELAYLOAD:ws2_32.dll delayimp.lib
#miniperl never does any registry lookups
MINIDELAYLOAD	= -DELAYLOAD:advapi32.dll
.ENDIF
.ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.0 and 9.0) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest

# Most relevant compiler-specific options fall into two groups:
# either pre-MSVC80 or MSVC80 onwards, so define a macro for this.
.IF "$(CCTYPE)" == "MSVC60" || \
    "$(CCTYPE)" == "MSVC70" || "$(CCTYPE)" == "MSVC70FREE"
PREMSVC80	= define
.ELSE
PREMSVC80	= undef
.ENDIF

.IF "$(__ICC)" != "define"
CC		= cl
LINK32		= link
.ELSE
CC		= icl
LINK32		= xilink
.ENDIF
LIB32		= $(LINK32) -lib
RSC		= rc

#
# Options
#

INCLUDES	= -I.\include -I. -I..
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT
LOCDEFS		= -DPERLDLL -DPERL_CORE
CXX_FLAG	= -TP -EHsc

LIBC		= msvcrt.lib

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -Od -MD -Zi -DDEBUGGING
LINK_DBG	= -debug
.ELIF  "$(CFG)" == "DebugSymbols"
OPTIMIZE	= -Od -MD -Zi
LINK_DBG	= -debug
.ELIF  "$(CFG)" == "DebugFull"
LIBC		= msvcrtd.lib
OPTIMIZE	= -Od -MDd -Zi -D_DEBUG -DDEBUGGING
LINK_DBG	= -debug
.ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86 and x64
OPTIMIZE	= -O1 -MD -Zi -DNDEBUG
# we enable debug symbols in release builds also
LINK_DBG	= -debug -opt:ref,icf
# you may want to enable this if you want COFF symbols in the executables
# in addition to the PDB symbols.  The default Dr. Watson that ships with
# Windows can use the the former but not latter.  The free WinDbg can be
# installed to get better stack traces from just the PDB symbols, so we
# avoid the bloat of COFF symbols by default.
#LINK_DBG	= $(LINK_DBG) -debugtype:both
.IF "$(CCTYPE)" != "MSVC60"
# enable Whole Program Optimizations (WPO) and Link Time Code Generation (LTCG)
OPTIMIZE	+= -GL
LINK_DBG	+= -ltcg
LIB_FLAGS	= -ltcg
.ENDIF
.ENDIF

.IF "$(WIN64)" == "define"
DEFINES		+= -DWIN64 -DCONSERVATIVE
OPTIMIZE	+= -fp:precise
.ENDIF

# For now, silence warnings from VC++ 8.0 onwards about "unsafe" CRT functions
# and POSIX CRT function names being deprecated.
.IF "$(PREMSVC80)" == "undef"
DEFINES		+= -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
.ENDIF

# In VS 2005 (VC++ 8.0) Microsoft changes time_t from 32-bit to
# 64-bit, even in 32-bit mode.  It also provides the _USE_32BIT_TIME_T
# preprocessor option to revert back to the old functionality for
# backward compatibility.  We define this symbol here for older 32-bit
# compilers only (which aren't using it at all) for the sole purpose
# of getting it into $Config{ccflags}.  That way if someone builds
# Perl itself with e.g. VC6 but later installs an XS module using VC8
# the time_t types will still be compatible.
.IF "$(WIN64)" == "undef"
.IF "$(PREMSVC80)" == "define"
BUILDOPT	+= -D_USE_32BIT_TIME_T
.ENDIF
.ENDIF

LIBBASEFILES	= oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
	comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
	netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib version.lib \
	odbc32.lib odbccp32.lib comctl32.lib

# Avoid __intel_new_proc_init link error for libircmt.
# libmmd is /MD equivelent, other variants exist.
# libmmd is Intel C's math addon funcs to MS CRT, contains long doubles, C99,
# and optimized C89 funcs
.IF "$(__ICC)" == "define"
LIBBASEFILES	+= libircmt.lib libmmd.lib
.ENDIF

# The 64 bit Windows Server 2003 SP1 SDK compilers link against MSVCRT.dll, which
# doesn't include the buffer overrun verification code used by the /GS switch.
# Since the code links against libraries that are compiled with /GS, this
# "security cookie verification" code must be included via bufferoverflow.lib.
.IF "$(WIN64)" == "define" && "$(CCTYPE)" == "SDK2003SP1"
LIBBASEFILES    += bufferoverflowU.lib
.ENDIF

LIBFILES	= $(LIBBASEFILES) $(LIBC)

EXTRACFLAGS	= -nologo -GF -W3
.IF "$(__ICC)" == "define"
EXTRACFLAGS	+= -Qstd=c99
.ENDIF
.IF "$(USE_CPLUSPLUS)" == "define"
EXTRACFLAGS	+= $(CXX_FLAG)
.ENDIF
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) \
		-libpath:"$(INST_COREDIR)" \
		-machine:$(PROCESSOR_ARCHITECTURE)
LIB_FLAGS	+= -nologo
OBJOUT_FLAG	= -Fo
EXEOUT_FLAG	= -Fe
LIBOUT_FLAG	= /out:
PDBOUT		= -Fd$*.pdb
TESTPREPGCC	=

.ENDIF

CFLAGS_O	= $(CFLAGS) $(BUILDOPT)

.IF "$(PREMSVC80)" == "undef"
PRIV_LINK_FLAGS	+= "/manifestdependency:type='Win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'"
.ELSE
RSC_FLAGS	= -DINCLUDE_MANIFEST
.ENDIF


# For XP support in >= VS 2013 (VC++ 12.0), subsystem is always in Config.pm
# LINK_FLAGS else subsystem is only needed for EXE building, not XS DLL building
# Console vs GUI makes no difference for DLLs, so use default for cleaner
# building cmd lines
.IF "$(CCTYPE)" == "MSVC120" || "$(CCTYPE)" == "MSVC120FREE" \
    || "$(CCTYPE)" == "MSVC140" || "$(CCTYPE)" == "MSVC140FREE"
.IF "$(WIN64)" == "define"
LINK_FLAGS	+= -subsystem:console,"5.02"
.ELSE
LINK_FLAGS	+= -subsystem:console,"5.01"
.ENDIF

.ELIF "$(CCTYPE)" != "GCC"
PRIV_LINK_FLAGS	+= -subsystem:console
.ENDIF

BLINK_FLAGS	= $(PRIV_LINK_FLAGS) $(LINK_FLAGS)

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

# Some old dmakes (including Sarathy's one at
# http://search.cpan.org/CPAN/authors/id/G/GS/GSAR/dmake-4.1pl1-win32.zip)
# don't support logical OR (||) or logical AND (&&) in conditional
# expressions and hence don't process this makefile correctly. Determine
# whether this is the case so that we can give the user an error message.
.IF 1 == 1 || 1 == 1
NEWDMAKE = define
.ELSE
NEWDMAKE = undef
.ENDIF

o *= .obj
a *= .lib

LKPRE		= INPUT (
LKPOST		= )

#
# Rules
#

.SUFFIXES : .c .i $(o) .dll $(a) .exe .rc .res

.c$(o):
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $(PDBOUT) $<

.c.i:
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) -E $< >$@@

.y.c:
	$(NOOP)

$(o).dll:
.IF "$(CCTYPE)" == "GCC"
	$(LINK32) -o $@@ $(BLINK_FLAGS) $< $(LIBFILES)
	$(IMPLIB) --input-def $(*B).def --output-lib $(*B).a $@@
.ELSE
	$(LINK32) -dll -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(BLINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
	$(EMBED_DLL_MANI)
.ENDIF

.rc.res:
.IF "$(CCTYPE)" == "GCC"
	$(RSC) --use-temp-file --include-dir=. --include-dir=.. -O COFF -D INCLUDE_MANIFEST -i $< -o $@@
.ELSE
	$(RSC) -i.. -DINCLUDE_MANIFEST $<
.ENDIF

#
# various targets

#do not put $(MINIPERL) as a dep/prereq in a rule, instead put $(HAVEMINIPERL)
#$(MINIPERL) is not a buildable target, use "dmake mp" if you want to just build
#miniperl alone
MINIPERL	= ..\miniperl.exe
HAVEMINIPERL	= ..\lib\buildcustomize.pl
MINIDIR		= .\mini
PERLEXE		= ..\perl.exe
WPERLEXE	= ..\wperl.exe
PERLEXESTATIC	= ..\perl-static.exe
STATICDIR	= .\static.tmp
GLOBEXE		= ..\perlglob.exe
CONFIGPM	= ..\lib\Config.pm
GENUUDMAP	= ..\generate_uudmap.exe
.IF "$(BUILD_STATIC)" == "define" || "$(ALL_STATIC)" == "define"
PERLSTATIC	= static
.ELSE
PERLSTATIC	= 
.ENDIF

# Unicode data files generated by mktables
UNIDATAFILES	 = ..\lib\unicore\Decomposition.pl ..\lib\unicore\TestProp.pl \
		   ..\lib\unicore\CombiningClass.pl ..\lib\unicore\Name.pl \
		   ..\lib\unicore\UCD.pl ..\lib\unicore\Name.pm            \
		   ..\lib\unicore\Heavy.pl ..\lib\unicore\mktables.lst

# Directories of Unicode data files generated by mktables
UNIDATADIR1	= ..\lib\unicore\To
UNIDATADIR2	= ..\lib\unicore\lib

PERLEXE_MANIFEST= .\perlexe.manifest
PERLEXE_ICO	= .\perlexe.ico
PERLEXE_RES	= .\perlexe.res
PERLDLL_RES	=

# Nominate a target which causes extensions to be re-built
# This used to be $(PERLEXE), but at worst it is the .dll that they depend
# on and really only the interface - i.e. the .def file used to export symbols
# from the .dll
PERLDEP = $(PERLIMPLIB)


PL2BAT		= bin\pl2bat.pl

UTILS		=			\
		..\utils\h2ph		\
		..\utils\splain		\
		..\utils\perlbug	\
		..\utils\pl2pm 		\
		..\utils\c2ph		\
		..\utils\pstruct	\
		..\utils\h2xs		\
		..\utils\perldoc	\
		..\utils\perlivp	\
		..\utils\libnetcfg	\
		..\utils\enc2xs		\
		..\utils\encguess	\
		..\utils\piconv		\
		..\utils\corelist	\
		..\utils\cpan		\
		..\utils\xsubpp		\
		..\utils\pod2html	\
		..\utils\prove		\
		..\utils\ptar		\
		..\utils\ptardiff	\
		..\utils\ptargrep	\
		..\utils\zipdetails	\
		..\utils\shasum		\
		..\utils\instmodsh	\
		..\utils\json_pp	\
		bin\exetype.pl		\
		bin\runperl.pl		\
		bin\pl2bat.pl		\
		bin\perlglob.pl		\
		bin\search.pl

.IF "$(CCTYPE)" == "GCC"

CFGSH_TMPL	= config.gc
CFGH_TMPL	= config_H.gc
PERLIMPLIB	= $(COREDIR)\libperl524$(a)
PERLSTATICLIB	= ..\libperl524s$(a)
INT64		= long long

.ELSE

CFGSH_TMPL	= config.vc
CFGH_TMPL	= config_H.vc
INT64		= __int64

.ENDIF

# makedef.pl must be updated if this changes, and this should normally
# only change when there is an incompatible revision of the public API.
PERLIMPLIB	*= $(COREDIR)\perl524$(a)
PERLEXPLIB	*= $(COREDIR)\perl524.exp
PERLSTATICLIB	*= ..\perl524s$(a)
PERLDLL		= ..\perl524.dll

#EUMM on Win32 isn't ready for parallel make, so only allow this file to be parallel
#$(MAKE) will contain the -P that this makefile was called with, which is bad for
#make_ext.pl since upto jobs*jobs processes will run instead of jobs
#also any recipie containing $(MAKE) is special cased by dmake to execute recipes
#containing $(MAKE) when "dmake -n" is executed, which causes recursive calls
#to dmake, which means "dmake -n" is then broken as a diagnostic tool since
#"dmake -n" will invoke all the make_ext.pl scripts build things instead of
#showing what to build since $(MAKE) is an arg to make_ext.pl, not an invocation
#of the dmake process
PLMAKE		= dmake

XCOPY		= xcopy /f /r /i /d /y
RCOPY		= xcopy /f /r /i /e /d /y
NOOP		= @@rem

#first ones are arrange in compile time order for faster parallel building
#see #123867 for details
MICROCORE_SRC	=		\
		..\toke.c	\
		..\regcomp.c	\
		..\regexec.c	\
		..\op.c		\
		..\sv.c		\
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_sys.c	\
		..\pp_pack.c	\
		..\pp_hot.c	\
		..\gv.c		\
		..\perl.c	\
		..\utf8.c	\
		..\dump.c	\
		..\hv.c		\
		..\av.c		\
		..\caretx.c	\
		..\deb.c	\
		..\doio.c	\
		..\doop.c	\
		..\dquote.c	\
		..\globals.c	\
		..\mro_core.c	\
		..\locale.c	\
		..\keywords.c	\
		..\mathoms.c    \
		..\mg.c		\
		..\numeric.c	\
		..\pad.c	\
		..\perlapi.c	\
		..\perly.c	\
		..\pp_sort.c	\
		..\reentr.c	\
		..\run.c	\
		..\scope.c	\
		..\taint.c	\
		..\time64.c	\
		..\universal.c	\
		..\util.c

EXTRACORE_SRC	+= perllib.c

.IF "$(PERL_MALLOC)" == "define"
EXTRACORE_SRC	+= ..\malloc.c
.ENDIF

EXTRACORE_SRC	+= ..\perlio.c

WIN32_SRC	=		\
		.\win32.c	\
		.\win32io.c	\
		.\win32sck.c	\
		.\win32thread.c	\
		.\fcrypt.c

CORE_NOCFG_H	=		\
		..\av.h		\
		..\cop.h	\
		..\cv.h		\
		..\dosish.h	\
		..\embed.h	\
		..\form.h	\
		..\gv.h		\
		..\handy.h	\
		..\hv.h		\
		..\hv_func.h	\
		..\iperlsys.h	\
		..\mg.h		\
		..\nostdio.h	\
		..\op.h		\
		..\opcode.h	\
		..\perl.h	\
		..\perlapi.h	\
		..\perlsdio.h	\
		..\perly.h	\
		..\pp.h		\
		..\proto.h	\
		..\regcomp.h	\
		..\regexp.h	\
		..\scope.h	\
		..\sv.h		\
		..\thread.h	\
		..\unixish.h	\
		..\utf8.h	\
		..\util.h	\
		..\warnings.h	\
		..\XSUB.h	\
		..\EXTERN.h	\
		..\perlvars.h	\
		..\intrpvar.h	\
		.\include\dirent.h	\
		.\include\netdb.h	\
		.\include\sys\errno2.h	\
		.\include\sys\socket.h	\
		.\win32.h

CORE_H		= $(CORE_NOCFG_H) .\config.h ..\git_version.h

UUDMAP_H	= ..\uudmap.h
BITCOUNT_H	= ..\bitcount.h
MG_DATA_H	= ..\mg_data.h
GENERATED_HEADERS = $(UUDMAP_H) $(BITCOUNT_H) $(MG_DATA_H)
#a stub ppport.h must be generated so building XS modules, .c->.obj wise, will
#work, so this target also represents creating the COREDIR and filling it
HAVE_COREDIR	= $(COREDIR)\ppport.h

MICROCORE_OBJ	= $(MICROCORE_SRC:db:+$(o))
CORE_OBJ	= $(MICROCORE_OBJ) $(EXTRACORE_SRC:db:+$(o))
WIN32_OBJ	= $(WIN32_SRC:db:+$(o))
MINICORE_OBJ	= $(MINIDIR)\{$(MICROCORE_OBJ:f) miniperlmain$(o) perlio$(o)}
MINIWIN32_OBJ	= $(MINIDIR)\{$(WIN32_OBJ:f)}
MINI_OBJ	= $(MINICORE_OBJ) $(MINIWIN32_OBJ)
DLL_OBJ		= $(DYNALOADER)

PERLDLL_OBJ	= $(CORE_OBJ)
PERLEXE_OBJ	= perlmain$(o)
PERLEXEST_OBJ	= perlmainst$(o)

PERLDLL_OBJ	+= $(WIN32_OBJ) $(DLL_OBJ)

.IF "$(USE_SETARGV)" != ""
SETARGV_OBJ	= setargv$(o)
.ENDIF

.IF "$(ALL_STATIC)" == "define"
# some exclusions, unfortunately, until fixed:
#  - MakeMaker isn't capable enough for SDBM_File (small bug)
STATIC_EXT	= * !SDBM_File
.ELSE
# specify static extensions here, for example:
# (be sure to include Win32CORE to load Win32 on demand)
#STATIC_EXT	= Win32CORE Cwd Compress/Raw/Zlib
STATIC_EXT	= Win32CORE
.ENDIF

DYNALOADER	= ..\DynaLoader$(o)

# vars must be separated by "\t+~\t+", since we're using the tempfile
# version of config_sh.pl (we were overflowing someone's buffer by
# trying to fit them all on the command line)
#	-- BKS 10-17-1999
CFG_VARS	=					\
		INST_TOP=$(INST_TOP)	~	\
		INST_VER=$(INST_VER)	~	\
		INST_ARCH=$(INST_ARCH)		~	\
		archname=$(ARCHNAME)		~	\
		cc=$(CC)			~	\
		ld=$(LINK32)			~	\
		ccflags=$(EXTRACFLAGS) $(OPTIMIZE) $(DEFINES) $(BUILDOPT)	~	\
		usecplusplus=$(USE_CPLUSPLUS)	~	\
		cf_email=$(EMAIL)		~	\
		d_mymalloc=$(PERL_MALLOC)	~	\
		libs=$(LIBFILES:f)		~	\
		incpath=$(CCINCDIR)	~	\
		libperl=$(PERLIMPLIB:f)		~	\
		libpth=$(CCLIBDIR);$(EXTRALIBDIRS)	~	\
		libc=$(LIBC)			~	\
		make=$(PLMAKE)			~	\
		_o=$(o)				~	\
		obj_ext=$(o)			~	\
		_a=$(a)				~	\
		lib_ext=$(a)			~	\
		static_ext=$(STATIC_EXT)	~	\
		usethreads=$(USE_ITHREADS)	~	\
		useithreads=$(USE_ITHREADS)	~	\
		usemultiplicity=$(USE_MULTI)	~	\
		use64bitint=$(USE_64_BIT_INT)	~	\
		uselongdouble=$(USE_LONG_DOUBLE)	~	\
		uselargefiles=$(USE_LARGE_FILES)	~	\
		usesitecustomize=$(USE_SITECUST)	~	\
		LINK_FLAGS=$(LINK_FLAGS)	~	\
		optimize=$(OPTIMIZE)	~	\
		ARCHPREFIX=$(ARCHPREFIX)	~	\
		WIN64=$(WIN64)

#
# Top targets
#

all : CHECKDMAKE rebasePE Extensions_nonxs $(PERLSTATIC)

..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h

..\regexec$(o) : ..\regnodes.h ..\regcharclass.h

reonly : ..\regnodes.h $(UNIDATAFILES) Extensions_reonly

static: $(PERLEXESTATIC)

#----------------------------------------------------------------

CHECKDMAKE :
.IF "$(NEWDMAKE)" == "define"
	$(NOOP)
.ELSE
	@@echo Your dmake doesn't support ^|^| or ^&^& in conditional expressions.
	@@echo Please get the latest dmake from http://search.cpan.org/dist/dmake/
	@@exit 1
.ENDIF

$(GLOBEXE) : perlglob.c
.IF "$(CCTYPE)" == "GCC"
	$(LINK32) $(OPTIMIZE) $(BLINK_FLAGS) -mconsole -o $@@ perlglob.c $(LIBFILES)
.ELSE
	$(CC) $(OPTIMIZE) $(PDBOUT) -Fe$@@ perlglob.c -link $(BLINK_FLAGS) \
	setargv$(o) $(LIBFILES) && $(EMBED_EXE_MANI)
.ENDIF

..\git_version.h : $(HAVEMINIPERL) ..\make_patchnum.pl
	$(MINIPERL) -I..\lib ..\make_patchnum.pl

# make sure that we recompile perl.c if the git version changes
..\perl$(o) : ..\git_version.h

..\config.sh : $(CFGSH_TMPL) config_sh.PL FindExt.pm $(HAVEMINIPERL)
	$(MINIPERL) -I..\lib config_sh.PL --cfgsh-option-file \
	    $(mktmp $(CFG_VARS)) $(CFGSH_TMPL) > ..\config.sh

# This target is for when changes to the main config.sh happen.
# Edit config.gc, then make perl using GCC in a minimal configuration (i.e.
# with MULTI, ITHREADS, IMP_SYS and LARGE_FILES off), then make
# this target to regenerate config_H.gc.
regen_config_h:
	$(MINIPERL) -I..\lib config_sh.PL --cfgsh-option-file $(mktmp $(CFG_VARS)) \
	    $(CFGSH_TMPL) > ..\config.sh
	$(MINIPERL) -I..\lib ..\configpm --chdir=..
	-del /f $(CFGH_TMPL)
	-$(MINIPERL) -I..\lib config_h.PL "ARCHPREFIX=$(ARCHPREFIX)"
	rename config.h $(CFGH_TMPL)

$(CONFIGPM) .\config.h .UPDATEALL: ..\config.sh config_h.PL
	$(MINIPERL) -I..\lib ..\configpm --chdir=..
	-$(MINIPERL) -I..\lib config_h.PL "ARCHPREFIX=$(ARCHPREFIX)"

# See the comment in Makefile.SH explaining this seemingly cranky ordering
..\lib\buildcustomize.pl : $(MINI_OBJ) ..\write_buildcustomize.pl
.IF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -mconsole -o $(MINIPERL) $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(MINI_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -out:$(MINIPERL) $(BLINK_FLAGS) \
	    @@$(mktmp $(DELAYLOAD) $(MINIDELAYLOAD) $(LIBFILES) $(MINI_OBJ))
	$(EMBED_EXE_MANI:s/$@@/$(MINIPERL)/)
.ENDIF
	$(MINIPERL) -I..\lib -f ..\write_buildcustomize.pl ..

#convinence target, get a working miniperl
mp : $(CONFIGPM)

$(MINIDIR)\.exists : $(CFGH_TMPL)
	if not exist "$(MINIDIR)" mkdir "$(MINIDIR)"
#
# Copy the template config.h and set configurables at the end of it
# as per the options chosen and compiler used.
# Note: This config.h is only used to build miniperl.exe anyway, but
# it's as well to have its options correct to be sure that it builds
# and so that it's "-V" options are correct for use by makedef.pl. The
# real config.h used to build perl.exe is generated from the top-level
# config_h.SH by config_h.PL (run by miniperl.exe).
#
# MINIDIR generates config.h so miniperl.exe is not rebuilt when the 2nd
# config.h is generated in CONFIGPM target, see also the comments for $(MINI_OBJ).
	copy $(CFGH_TMPL) config.h
	@@(echo.&& \
	echo #ifndef _config_h_footer_&& \
	echo #define _config_h_footer_&& \
	echo #undef Off_t&& \
	echo #undef LSEEKSIZE&& \
	echo #undef Off_t_size&& \
	echo #undef PTRSIZE&& \
	echo #undef SSize_t&& \
	echo #undef HAS_ATOLL&& \
	echo #undef HAS_STRTOLL&& \
	echo #undef HAS_STRTOULL&& \
	echo #undef Size_t_size&& \
	echo #undef IVTYPE&& \
	echo #undef UVTYPE&& \
	echo #undef IVSIZE&& \
	echo #undef UVSIZE&& \
	echo #undef NV_PRESERVES_UV&& \
	echo #undef NV_PRESERVES_UV_BITS&& \
	echo #undef IVdf&& \
	echo #undef UVuf&& \
	echo #undef UVof&& \
	echo #undef UVxf&& \
	echo #undef UVXf&& \
	echo #undef USE_64_BIT_INT&& \
	echo #undef Gconvert&& \
	echo #undef HAS_FREXPL&& \
	echo #undef HAS_ISNANL&& \
	echo #undef HAS_MODFL&& \
	echo #undef HAS_MODFL_PROTO&& \
	echo #undef HAS_SQRTL&& \
	echo #undef HAS_STRTOLD&& \
	echo #undef PERL_PRIfldbl&& \
	echo #undef PERL_PRIgldbl&& \
	echo #undef PERL_PRIeldbl&& \
	echo #undef PERL_SCNfldbl&& \
	echo #undef NVTYPE&& \
	echo #undef NVSIZE&& \
	echo #undef LONG_DOUBLESIZE&& \
	echo #undef NV_OVERFLOWS_INTEGERS_AT&& \
	echo #undef NVef&& \
	echo #undef NVff&& \
	echo #undef NVgf&& \
	echo #undef USE_LONG_DOUBLE&& \
	echo #undef USE_CPLUSPLUS)>> config.h
.IF "$(USE_LARGE_FILES)"=="define"
	@@(echo #define Off_t $(INT64)&& \
	echo #define LSEEKSIZE ^8&& \
	echo #define Off_t_size ^8)>> config.h
.ELSE
	@@(echo #define Off_t long&& \
	echo #define LSEEKSIZE ^4&& \
	echo #define Off_t_size ^4)>> config.h
.ENDIF
.IF "$(WIN64)"=="define"
	@@(echo #define PTRSIZE ^8&& \
	echo #define SSize_t $(INT64)&& \
	echo #define HAS_ATOLL&& \
	echo #define HAS_STRTOLL&& \
	echo #define HAS_STRTOULL&& \
	echo #define Size_t_size ^8)>> config.h
.ELSE
	@@(echo #define PTRSIZE ^4&& \
	echo #define SSize_t int&& \
	echo #undef HAS_ATOLL&& \
	echo #undef HAS_STRTOLL&& \
	echo #undef HAS_STRTOULL&& \
	echo #define Size_t_size ^4)>> config.h
.ENDIF
.IF "$(USE_64_BIT_INT)"=="define"
	@@(echo #define IVTYPE $(INT64)&& \
	echo #define UVTYPE unsigned $(INT64)&& \
	echo #define IVSIZE ^8&& \
	echo #define UVSIZE ^8)>> config.h
.IF "$(USE_LONG_DOUBLE)"=="define"
	@@(echo #define NV_PRESERVES_UV&& \
	echo #define NV_PRESERVES_UV_BITS 64)>> config.h
.ELSE
	@@(echo #undef NV_PRESERVES_UV&& \
	echo #define NV_PRESERVES_UV_BITS 53)>> config.h
.ENDIF
	@@(echo #define IVdf "I64d"&& \
	echo #define UVuf "I64u"&& \
	echo #define UVof "I64o"&& \
	echo #define UVxf "I64x"&& \
	echo #define UVXf "I64X"&& \
	echo #define USE_64_BIT_INT)>> config.h
.ELSE
	@@(echo #define IVTYPE long&& \
	echo #define UVTYPE unsigned long&& \
	echo #define IVSIZE ^4&& \
	echo #define UVSIZE ^4&& \
	echo #define NV_PRESERVES_UV&& \
	echo #define NV_PRESERVES_UV_BITS 32&& \
	echo #define IVdf "ld"&& \
	echo #define UVuf "lu"&& \
	echo #define UVof "lo"&& \
	echo #define UVxf "lx"&& \
	echo #define UVXf "lX"&& \
	echo #undef USE_64_BIT_INT)>> config.h
.ENDIF
.IF "$(USE_LONG_DOUBLE)"=="define"
	@@(echo #define Gconvert^(x,n,t,b^) sprintf^(^(b^),"%.*""Lg",^(n^),^(x^)^)&& \
	echo #define HAS_FREXPL&& \
	echo #define HAS_ISNANL&& \
	echo #define HAS_MODFL&& \
	echo #define HAS_MODFL_PROTO&& \
	echo #define HAS_SQRTL&& \
	echo #define HAS_STRTOLD&& \
	echo #define PERL_PRIfldbl "Lf"&& \
	echo #define PERL_PRIgldbl "Lg"&& \
	echo #define PERL_PRIeldbl "Le"&& \
	echo #define PERL_SCNfldbl "Lf"&& \
	echo #define NVTYPE long double)>> config.h
.IF "$(WIN64)"=="define"
	@@(echo #define NVSIZE ^16&& \
	echo #define LONG_DOUBLESIZE ^16)>> config.h
.ELSE
	@@(echo #define NVSIZE ^12&& \
	echo #define LONG_DOUBLESIZE ^12)>> config.h
.ENDIF
	@@(echo #define NV_OVERFLOWS_INTEGERS_AT 256.0*256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0&& \
	echo #define NVef "Le"&& \
	echo #define NVff "Lf"&& \
	echo #define NVgf "Lg"&& \
	echo #define USE_LONG_DOUBLE)>> config.h
.ELSE
	@@(echo #define Gconvert^(x,n,t,b^) sprintf^(^(b^),"%.*g",^(n^),^(x^)^)&& \
	echo #undef HAS_FREXPL&& \
	echo #undef HAS_ISNANL&& \
	echo #undef HAS_MODFL&& \
	echo #undef HAS_MODFL_PROTO&& \
	echo #undef HAS_SQRTL&& \
	echo #undef HAS_STRTOLD&& \
	echo #undef PERL_PRIfldbl&& \
	echo #undef PERL_PRIgldbl&& \
	echo #undef PERL_PRIeldbl&& \
	echo #undef PERL_SCNfldbl&& \
	echo #define NVTYPE double&& \
	echo #define NVSIZE ^8&& \
	echo #define LONG_DOUBLESIZE ^8&& \
	echo #define NV_OVERFLOWS_INTEGERS_AT 256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0&& \
	echo #define NVef "e"&& \
	echo #define NVff "f"&& \
	echo #define NVgf "g"&& \
	echo #undef USE_LONG_DOUBLE)>> config.h
.ENDIF
.IF "$(USE_CPLUSPLUS)"=="define"
	@@(echo #define USE_CPLUSPLUS&& \
	echo #endif)>> config.h
.ELSE
	@@(echo #undef USE_CPLUSPLUS&& \
	echo #endif)>> config.h
.ENDIF
#separate line since this is sentinal that this target is done
	rem. > $(MINIDIR)\.exists

$(MINICORE_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(MINIBUILDOPT) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ $(PDBOUT) ..\$(*B).c

$(MINIWIN32_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(MINIBUILDOPT) -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ $(PDBOUT) $(*B).c

# -DPERL_IMPLICIT_SYS needs C++ for perllib.c
# rules wrapped in .IFs break Win9X build (we end up with unbalanced []s unless
# unless the .IF is true), so instead we use a .ELSE with the default.
# This is the only file that depends on perlhost.h, vmem.h, and vdir.h

perllib$(o)	: perllib.c perllibst.h .\perlhost.h .\vdir.h .\vmem.h
.IF "$(USE_IMP_SYS)" == "define"
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ $(PDBOUT) perllib.c
.ELSE
	$(CC) -c -I. $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $(PDBOUT) perllib.c
.ENDIF

# 1. we don't want to rebuild miniperl.exe when config.h changes
# 2. we don't want to rebuild miniperl.exe with non-default config.h
# 3. we can't have miniperl.exe depend on git_version.h, as miniperl creates it
$(MINI_OBJ)	: $(MINIDIR)\.exists $(CORE_NOCFG_H)

$(WIN32_OBJ)	: $(CORE_H)

$(CORE_OBJ)	: $(CORE_H)

$(DLL_OBJ)	: $(CORE_H)


perllibst.h : $(HAVEMINIPERL) $(CONFIGPM) create_perllibst_h.pl
	$(MINIPERL) -I..\lib create_perllibst_h.pl

perldll.def : $(HAVEMINIPERL) $(CONFIGPM) ..\embed.fnc ..\makedef.pl
	$(MINIPERL) -I..\lib -w ..\makedef.pl PLATFORM=win32 $(OPTIMIZE) $(DEFINES) \
	$(BUILDOPT) CCTYPE=$(CCTYPE) TARG_DIR=..\ > perldll.def

$(PERLEXPLIB) $(PERLIMPLIB) .UPDATEALL : perldll.def
.IF "$(CCTYPE)" == "GCC"
	$(IMPLIB) -k -d perldll.def -l $(PERLIMPLIB) -e $(PERLEXPLIB)
.ELSE #VC family
	lib -def:perldll.def -machine:$(ARCHITECTURE) /OUT:$(PERLIMPLIB)
.ENDIF

$(PERLDLL): $(PERLEXPLIB) $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
.IF "$(CCTYPE)" == "GCC"
	$(LINK32) -mdll -o $@@ $(BLINK_FLAGS) \
	   $(PERLDLL_OBJ) $(shell @@type Extensions_static) $(LIBFILES) $(PERLEXPLIB)
.ELSE
	$(LINK32) -dll -out:$@@ $(BLINK_FLAGS) \
	    @@Extensions_static \
	    @@$(mktmp -base:0x28000000 $(DELAYLOAD) $(LIBFILES) \
		$(PERLDLL_RES) $(PERLDLL_OBJ) $(PERLEXPLIB))
	$(EMBED_DLL_MANI)
.ENDIF

$(PERLSTATICLIB): $(PERLDLL_OBJ) Extensions_static
.IF "$(CCTYPE)" == "GCC"
	$(LIB32) $(LIB_FLAGS) $@@ $(PERLDLL_OBJ)
	if exist $(STATICDIR) rmdir /s /q $(STATICDIR)
	for %i in ($(shell @@type Extensions_static)) do \
		@@mkdir $(STATICDIR) && cd $(STATICDIR) && \
		$(ARCHPREFIX)ar x ..\%i && \
		$(ARCHPREFIX)ar q ..\$@@ *$(o) && \
		cd .. && rmdir /s /q $(STATICDIR)
.ELSE
	$(LIB32) $(LIB_FLAGS) -out:$@@ @@Extensions_static \
	    @@$(mktmp $(PERLDLL_OBJ))
.ENDIF
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)\$(NULL)

$(PERLEXE_RES): perlexe.rc $(PERLEXE_MANIFEST) $(PERLEXE_ICO)

$(MINIDIR)\globals$(o) : $(GENERATED_HEADERS)

$(GENUUDMAP) $(GENERATED_HEADERS) .UPDATEALL : ..\mg_raw.h
.IF "$(CCTYPE)" == "GCC"
	$(LINK32) $(CFLAGS_O) -o..\generate_uudmap.exe ..\generate_uudmap.c \
	$(BLINK_FLAGS) -x $(mktmp $(LKPRE) $(LIBFILES) $(LKPOST))
.ELSE
	$(CC) $(CFLAGS_O) $(PDBOUT) -Fe..\generate_uudmap.exe ..\generate_uudmap.c @@$(mktmp -link $(LIBFILES)) -link $(BLINK_FLAGS)
	$(EMBED_EXE_MANI:s/$@@/..\generate_uudmap.exe/)
.ENDIF
	$(GENUUDMAP) $(GENERATED_HEADERS)

#This generates a stub ppport.h & creates & fills /lib/CORE to allow for XS
#building .c->.obj wise (linking is a different thing). This target is AKA
#$(HAVE_COREDIR).
$(COREDIR)\ppport.h : $(CORE_H)
	$(XCOPY) *.h $(COREDIR)\*.* && $(RCOPY) include $(COREDIR)\*.* && $(XCOPY) ..\*.h $(COREDIR)\*.*
	rem. > $@@

perlmain$(o) : runperl.c $(CONFIGPM)
	$(CC) $(CFLAGS_O:s,-DPERLDLL,-UPERLDLL,) $(OBJOUT_FLAG)$@@ $(PDBOUT) -c runperl.c

perlmainst$(o) : runperl.c $(CONFIGPM)
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $(PDBOUT) -c runperl.c

$(PERLEXE): $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB)
.IF "$(CCTYPE)" == "GCC"
	$(LINK32) -mconsole -o $@@ $(BLINK_FLAGS)  \
	    $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB) $(LIBFILES)
.ELSE
	$(LINK32) -out:$@@ $(BLINK_FLAGS) \
	    $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB) $(LIBFILES) $(SETARGV_OBJ)
	$(EMBED_EXE_MANI)
.ENDIF
	copy $(PERLEXE) $(WPERLEXE)
	$(MINIPERL) -I..\lib bin\exetype.pl $(WPERLEXE) WINDOWS

$(PERLEXESTATIC): $(PERLSTATICLIB) $(CONFIGPM) $(PERLEXEST_OBJ) $(PERLEXE_RES)
.IF "$(CCTYPE)" == "GCC"
	$(LINK32) -mconsole -o $@@ $(BLINK_FLAGS) \
	    $(PERLEXEST_OBJ) $(PERLEXE_RES) $(PERLSTATICLIB) $(LIBFILES)
.ELSE
	$(LINK32) -out:$@@ $(BLINK_FLAGS) \
	    $(PERLEXEST_OBJ) $(PERLEXE_RES) $(PERLSTATICLIB) $(LIBFILES) $(SETARGV_OBJ)
	$(EMBED_EXE_MANI)
.ENDIF

#-------------------------------------------------------------------------------
# There's no direct way to mark a dependency on
# DynaLoader.pm, so this will have to do

#most of deps of this target are in DYNALOADER and therefore omitted here
Extensions : $(PERLDEP) $(DYNALOADER) $(GLOBEXE)
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(PLMAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic !Unicode/Normalize

Extensions_normalize : $(PERLDEP) $(DYNALOADER) $(GLOBEXE) $(UNIDATAFILES)
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(PLMAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic +Unicode/Normalize

Extensions_reonly : $(PERLDEP) $(DYNALOADER)
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(PLMAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic +re

Extensions_static : ..\make_ext.pl list_static_libs.pl $(CONFIGPM) $(GLOBEXE) $(HAVE_COREDIR)
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(PLMAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --static
	$(MINIPERL) -I..\lib list_static_libs.pl > Extensions_static

Extensions_nonxs : ..\make_ext.pl ..\pod\perlfunc.pod $(CONFIGPM) $(GLOBEXE)
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(PLMAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --nonxs !libs

#lib must be built, it can't be buildcustomize.pl-ed, and is required for XS building
$(DYNALOADER) : ..\make_ext.pl $(CONFIGPM) $(HAVE_COREDIR)
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(PLMAKE)" --dir=$(EXTDIR) --dir=$(DISTDIR) --dynaloader lib

Extensions_clean :
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(PLMAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=clean

Extensions_realclean :
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(PLMAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=realclean

# all PE files need to be built by the time this target runs, PP files can still
# be running in parallel like UNIDATAFILES, this target a placeholder for the
# future
.IF "$(BUILD_STATIC)"=="define"
rebasePE : Extensions $(PERLDLL) Extensions_normalize $(PERLEXE) $(PERLEXESTATIC)
.ELSE
rebasePE : Extensions $(PERLDLL) Extensions_normalize $(PERLEXE)
.ENDIF
	$(NOOP)

#-------------------------------------------------------------------------------


doc: $(PERLEXE) $(PERLDLL) ..\pod\perltoc.pod
	$(PERLEXE) ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
	    --podpath=pod:lib:utils --htmlroot="file://$(INST_HTML:s,:,|,)"\
	    --recurse

..\utils\Makefile: $(CONFIGPM) ..\utils\Makefile.PL
	$(MINIPERL) -I..\lib ..\utils\Makefile.PL ..

# Note that this next section is parsed (and regenerated) by pod/buildtoc
# so please check that script before making structural changes here
utils: $(HAVEMINIPERL) ..\utils\Makefile
	cd ..\utils && $(PLMAKE) PERL=$(MINIPERL)
	copy ..\README.aix      ..\pod\perlaix.pod
	copy ..\README.amiga    ..\pod\perlamiga.pod
	copy ..\README.android  ..\pod\perlandroid.pod
	copy ..\README.bs2000   ..\pod\perlbs2000.pod
	copy ..\README.ce       ..\pod\perlce.pod
	copy ..\README.cn       ..\pod\perlcn.pod
	copy ..\README.cygwin   ..\pod\perlcygwin.pod
	copy ..\README.dos      ..\pod\perldos.pod
	copy ..\README.freebsd  ..\pod\perlfreebsd.pod
	copy ..\README.haiku    ..\pod\perlhaiku.pod
	copy ..\README.hpux     ..\pod\perlhpux.pod
	copy ..\README.hurd     ..\pod\perlhurd.pod
	copy ..\README.irix     ..\pod\perlirix.pod
	copy ..\README.jp       ..\pod\perljp.pod
	copy ..\README.ko       ..\pod\perlko.pod
	copy ..\README.linux    ..\pod\perllinux.pod
	copy ..\README.macos    ..\pod\perlmacos.pod
	copy ..\README.macosx   ..\pod\perlmacosx.pod
	copy ..\README.netware  ..\pod\perlnetware.pod
	copy ..\README.openbsd  ..\pod\perlopenbsd.pod
	copy ..\README.os2      ..\pod\perlos2.pod
	copy ..\README.os390    ..\pod\perlos390.pod
	copy ..\README.os400    ..\pod\perlos400.pod
	copy ..\README.plan9    ..\pod\perlplan9.pod
	copy ..\README.qnx      ..\pod\perlqnx.pod
	copy ..\README.riscos   ..\pod\perlriscos.pod
	copy ..\README.solaris  ..\pod\perlsolaris.pod
	copy ..\README.symbian  ..\pod\perlsymbian.pod
	copy ..\README.synology ..\pod\perlsynology.pod
	copy ..\README.tru64    ..\pod\perltru64.pod
	copy ..\README.tw       ..\pod\perltw.pod
	copy ..\README.vos      ..\pod\perlvos.pod
	copy ..\README.win32    ..\pod\perlwin32.pod
	copy ..\pod\perldelta.pod ..\pod\perl5241delta.pod
	$(MINIPERL) -I..\lib $(PL2BAT) $(UTILS)
	$(MINIPERL) -I..\lib ..\autodoc.pl ..
	$(MINIPERL) -I..\lib ..\pod\perlmodlib.PL -q ..

..\pod\perltoc.pod: $(PERLEXE) $(PERLDLL) Extensions Extensions_nonxs Extensions_normalize utils
	$(PERLEXE) -f ..\pod\buildtoc -q

# Note that the pod cleanup in this next section is parsed (and regenerated
# by pod/buildtoc so please check that script before making changes here

distclean: realclean
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl$(a) $(PERLEXESTATIC) $(PERLSTATICLIB)
	-del /f $(LIBDIR)\Encode.pm $(LIBDIR)\encoding.pm $(LIBDIR)\Errno.pm
	-del /f $(LIBDIR)\Config.pod $(LIBDIR)\POSIX.pod $(LIBDIR)\threads.pm
	-del /f $(LIBDIR)\.exists $(LIBDIR)\attributes.pm $(LIBDIR)\DynaLoader.pm
	-del /f $(LIBDIR)\Fcntl.pm $(LIBDIR)\IO.pm $(LIBDIR)\Opcode.pm
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm
	-del /f $(LIBDIR)\SDBM_File.pm $(LIBDIR)\Socket.pm $(LIBDIR)\POSIX.pm
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
	-del /f $(LIBDIR)\File\Glob.pm
	-del /f $(LIBDIR)\Storable.pm
	-del /f $(LIBDIR)\Sys\Hostname.pm
	-del /f $(LIBDIR)\Time\HiRes.pm
	-del /f $(LIBDIR)\Unicode\Normalize.pm
	-del /f $(LIBDIR)\Math\BigInt\FastCalc.pm
	-del /f $(LIBDIR)\Win32.pm
	-del /f $(LIBDIR)\Win32CORE.pm
	-del /f $(LIBDIR)\Win32API\File.pm
	-del /f $(LIBDIR)\Win32API\File\cFile.pc
	-del /f $(LIBDIR)\buildcustomize.pl
	-del /f $(DISTDIR)\XSLoader\XSLoader.pm
	-del /f *.def *.map
	-if exist $(LIBDIR)\Amiga rmdir /s /q $(LIBDIR)\Amiga
	-if exist $(LIBDIR)\App rmdir /s /q $(LIBDIR)\App
	-if exist $(LIBDIR)\Archive rmdir /s /q $(LIBDIR)\Archive
	-if exist $(LIBDIR)\Attribute rmdir /s /q $(LIBDIR)\Attribute
	-if exist $(LIBDIR)\autodie rmdir /s /q $(LIBDIR)\autodie
	-if exist $(LIBDIR)\Carp rmdir /s /q $(LIBDIR)\Carp
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
	-if exist $(LIBDIR)\Config\Perl rmdir /s /q $(LIBDIR)\Config\Perl
	-if exist $(LIBDIR)\CPAN rmdir /s /q $(LIBDIR)\CPAN
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data
	-if exist $(LIBDIR)\Devel rmdir /s /q $(LIBDIR)\Devel
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest
	-if exist $(LIBDIR)\Encode rmdir /s /q $(LIBDIR)\Encode
	-if exist $(LIBDIR)\encoding rmdir /s /q $(LIBDIR)\encoding
	-if exist $(LIBDIR)\Exporter rmdir /s /q $(LIBDIR)\Exporter
	-if exist $(LIBDIR)\ExtUtils\CBuilder rmdir /s /q $(LIBDIR)\ExtUtils\CBuilder
	-if exist $(LIBDIR)\ExtUtils\Command rmdir /s /q $(LIBDIR)\ExtUtils\Command
	-if exist $(LIBDIR)\ExtUtils\Constant rmdir /s /q $(LIBDIR)\ExtUtils\Constant
	-if exist $(LIBDIR)\ExtUtils\Liblist rmdir /s /q $(LIBDIR)\ExtUtils\Liblist
	-if exist $(LIBDIR)\ExtUtils\MakeMaker rmdir /s /q $(LIBDIR)\ExtUtils\MakeMaker
	-if exist $(LIBDIR)\ExtUtils\ParseXS rmdir /s /q $(LIBDIR)\ExtUtils\ParseXS
	-if exist $(LIBDIR)\ExtUtils\Typemaps rmdir /s /q $(LIBDIR)\ExtUtils\Typemaps
	-if exist $(LIBDIR)\File\Spec rmdir /s /q $(LIBDIR)\File\Spec
	-if exist $(LIBDIR)\Filter rmdir /s /q $(LIBDIR)\Filter
	-if exist $(LIBDIR)\Hash rmdir /s /q $(LIBDIR)\Hash
	-if exist $(LIBDIR)\HTTP rmdir /s /q $(LIBDIR)\HTTP
	-if exist $(LIBDIR)\I18N rmdir /s /q $(LIBDIR)\I18N
	-if exist $(LIBDIR)\inc rmdir /s /q $(LIBDIR)\inc
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO
	-if exist $(LIBDIR)\IPC rmdir /s /q $(LIBDIR)\IPC
	-if exist $(LIBDIR)\JSON rmdir /s /q $(LIBDIR)\JSON
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\Locale rmdir /s /q $(LIBDIR)\Locale
	-if exist $(LIBDIR)\Math rmdir /s /q $(LIBDIR)\Math
	-if exist $(LIBDIR)\Memoize rmdir /s /q $(LIBDIR)\Memoize
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\Module rmdir /s /q $(LIBDIR)\Module
	-if exist $(LIBDIR)\Net\FTP rmdir /s /q $(LIBDIR)\Net\FTP
	-if exist $(LIBDIR)\OpenBSD rmdir /s /q $(LIBDIR)\OpenBSD
	-if exist $(LIBDIR)\Params rmdir /s /q $(LIBDIR)\Params
	-if exist $(LIBDIR)\Parse rmdir /s /q $(LIBDIR)\Parse
	-if exist $(LIBDIR)\Perl rmdir /s /q $(LIBDIR)\Perl
	-if exist $(LIBDIR)\PerlIO rmdir /s /q $(LIBDIR)\PerlIO
	-if exist $(LIBDIR)\Pod\Perldoc rmdir /s /q $(LIBDIR)\Pod\Perldoc
	-if exist $(LIBDIR)\Pod\Simple rmdir /s /q $(LIBDIR)\Pod\Simple
	-if exist $(LIBDIR)\Pod\Text rmdir /s /q $(LIBDIR)\Pod\Text
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\Search rmdir /s /q $(LIBDIR)\Search
	-if exist $(LIBDIR)\Sub rmdir /s /q $(LIBDIR)\Sub
	-if exist $(LIBDIR)\Sys rmdir /s /q $(LIBDIR)\Sys
	-if exist $(LIBDIR)\TAP rmdir /s /q $(LIBDIR)\TAP
	-if exist $(LIBDIR)\Term rmdir /s /q $(LIBDIR)\Term
	-if exist $(LIBDIR)\Test rmdir /s /q $(LIBDIR)\Test
	-if exist $(LIBDIR)\Text rmdir /s /q $(LIBDIR)\Text
	-if exist $(LIBDIR)\Thread rmdir /s /q $(LIBDIR)\Thread
	-if exist $(LIBDIR)\threads rmdir /s /q $(LIBDIR)\threads
	-if exist $(LIBDIR)\Tie\Hash rmdir /s /q $(LIBDIR)\Tie\Hash
	-if exist $(LIBDIR)\Unicode\Collate rmdir /s /q $(LIBDIR)\Unicode\Collate
	-if exist $(LIBDIR)\Unicode\Collate\Locale rmdir /s /q $(LIBDIR)\Unicode\Collate\Locale
	-if exist $(LIBDIR)\version rmdir /s /q $(LIBDIR)\version
	-if exist $(LIBDIR)\VMS rmdir /s /q $(LIBDIR)\VMS
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
	-cd $(PODDIR) && del /f *.html *.bat roffitall \
	    perl5241delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
	    perlapi.pod perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldos.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmacos.pod perlmacosx.pod perlmodlib.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perlsynology.pod perltoc.pod \
	    perltru64.pod perltw.pod perlvos.pod perlwin32.pod
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs \
	    perldoc perlivp libnetcfg enc2xs encguess piconv cpan *.bat \
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep shasum corelist zipdetails
	-del /f ..\config.sh perlmain.c dlutils.c config.h.new \
	    perlmainst.c
	-del /f $(CONFIGPM)
	-del /f ..\lib\Config_git.pl
	-del /f bin\*.bat
	-del /f perllibst.h
	-del /f $(PERLEXE_RES) perl.base
	-cd .. && del /s *$(a) *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib ppport.h
	-cd $(EXTDIR) && del /s *.def Makefile Makefile.old
	-cd $(DISTDIR) && del /s *.def Makefile Makefile.old
	-cd $(CPANDIR) && del /s *.def Makefile Makefile.old
	-del /s ..\utils\Makefile
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR)
	-if exist pod2htmd.tmp del pod2htmd.tmp
	-if exist $(HTMLDIR) rmdir /s /q $(HTMLDIR)
	-del /f ..\t\test_state

install : all installbare installhtml

installbare : utils ..\pod\perltoc.pod
	$(PERLEXE) ..\installperl
	attrib -r $(INST_COREDIR)\ppport.h && del $(INST_COREDIR)\ppport.h
	if exist $(WPERLEXE) $(XCOPY) $(WPERLEXE) $(INST_BIN)\*.*
	if exist $(PERLEXESTATIC) $(XCOPY) $(PERLEXESTATIC) $(INST_BIN)\*.*
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	if exist ..\perl*.pdb $(XCOPY) ..\perl*.pdb $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_SCRIPT)\*.*

installhtml : doc
	$(RCOPY) $(HTMLDIR)\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	$(RCOPY) ..\lib $(INST_LIB)\*.*

$(UNIDATAFILES) ..\pod\perluniprops.pod .UPDATEALL : ..\lib\unicore\mktables $(CONFIGPM)
	$(MINIPERL) -I..\lib ..\lib\unicore\mktables -C ..\lib\unicore -P ..\pod -maketest -makelist -p

minitest : .\config.h $(HAVEMINIPERL) ..\git_version.h $(GLOBEXE) $(CONFIGPM) $(UNIDATAFILES) $(TESTPREPGCC)
	$(XCOPY) $(MINIPERL) ..\t\$(NULL)
	if exist ..\t\perl.exe del /f ..\t\perl.exe
	rename ..\t\miniperl.exe perl.exe
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
# Note this perl.exe is miniperl
	cd ..\t && perl.exe TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t opbasic/*.t op/*.t uni/*.t perf/*.t pragma/*.t

test-prep : all utils ..\pod\perltoc.pod $(TESTPREPGCC)
	$(XCOPY) $(PERLEXE) ..\t\$(NULL) && $(XCOPY) $(PERLDLL) ..\t\$(NULL) \
	&& $(XCOPY) $(GLOBEXE) ..\t\$(NULL)

# If building with gcc versions 4.x.x or greater, then
# the GCC helper DLL will also need copied to the test directory.
# The name of the dll can change, depending upon which vendor has supplied
# your compiler, and upon the values of "x".
# libstdc++-6.dll is copied if it exists as it, too, may then be needed.
# Without this copying, the op/taint.t test script will fail.

.IF "$(CCTYPE)" == "GCC"

test-prep-gcc :
	if exist $(CCDLLDIR)\libgcc_s_seh-1.dll $(XCOPY) $(CCDLLDIR)\libgcc_s_seh-1.dll ..\t\$(NULL)
	if exist $(CCDLLDIR)\libgcc_s_sjlj-1.dll $(XCOPY) $(CCDLLDIR)\libgcc_s_sjlj-1.dll ..\t\$(NULL)
	if exist $(CCDLLDIR)\libgcc_s_dw2-1.dll $(XCOPY) $(CCDLLDIR)\libgcc_s_dw2-1.dll ..\t\$(NULL)
	if exist $(CCDLLDIR)\libstdc++-6.dll $(XCOPY) $(CCDLLDIR)\libstdc++-6.dll ..\t\$(NULL)
	if exist $(CCDLLDIR)\libwinpthread-1.dll $(XCOPY) $(CCDLLDIR)\libwinpthread-1.dll ..\t\$(NULL)

.ENDIF

test : test-prep
	set PERL_STATIC_EXT=$(STATIC_EXT) && \
	    cd ..\t && perl.exe harness $(TEST_SWITCHES) $(TEST_FILES)

test_porting : test-prep
	set PERL_STATIC_EXT=$(STATIC_EXT) && \
	    cd ..\t && perl.exe harness $(TEST_SWITCHES) porting\*.t ..\lib\diagnostics.t

test-reonly : reonly utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	cd ..\t && perl.exe harness $(OPT) -re \bpat\\/ $(EXTRA)

regen :
	cd .. && regen.pl

test-notty : test-prep
	set PERL_STATIC_EXT=$(STATIC_EXT) && \
	    set PERL_SKIP_TTY_TEST=1 && \
	    cd ..\t && perl.exe harness $(TEST_SWITCHES) $(TEST_FILES)

_test :
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	set PERL_STATIC_EXT=$(STATIC_EXT) && \
	    cd ..\t && perl.exe harness $(TEST_SWITCHES) $(TEST_FILES)

_clean :
	-@@erase miniperlmain$(o)
	-@@erase $(MINIPERL)
	-@@erase perlglob$(o)
	-@@erase perlmain$(o)
	-@@erase perlmainst$(o)
	-@@erase /f config.h
	-@@erase /f ..\git_version.h
	-@@erase $(GLOBEXE)
	-@@erase $(PERLEXE)
	-@@erase $(WPERLEXE)
	-@@erase $(PERLEXESTATIC)
	-@@erase $(PERLSTATICLIB)
	-@@erase $(PERLDLL)
	-@@erase $(CORE_OBJ)
	-@@erase $(GENUUDMAP) $(GENUUDMAP_OBJ) $(GENERATED_HEADERS)
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR)
	-if exist $(UNIDATADIR1) rmdir /s /q $(UNIDATADIR1)
	-if exist $(UNIDATADIR2) rmdir /s /q $(UNIDATADIR2)
	-@@erase $(UNIDATAFILES)
	-@@erase $(WIN32_OBJ)
	-@@erase $(DLL_OBJ)
	-@@erase ..\*$(o) ..\*$(a) ..\*.exp *$(o) *$(a) *.exp *.res
	-@@erase ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@erase *.ilk
	-@@erase *.pdb ..\*.pdb
	-@@erase Extensions_static

clean : Extensions_clean _clean

realclean : Extensions_realclean _clean

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "dmake nok" instead.
ok: utils $(PERLEXE) $(PERLDLL) Extensions_nonxs Extensions
	$(PERLEXE) ..\utils\perlbug -ok -s "(UNINSTALLED)"

okfile: utils $(PERLEXE) $(PERLDLL) Extensions_nonxs Extensions
	$(PERLEXE) ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok

nok: utils $(PERLEXE) $(PERLDLL) Extensions_nonxs Extensions
	$(PERLEXE) ..\utils\perlbug -nok -s "(UNINSTALLED)"

nokfile: utils $(PERLEXE) $(PERLDLL) Extensions_nonxs Extensions
	$(PERLEXE) ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok

@


1.24
log
@Apply local patches - perl-5.24.1
@
text
@d1620 1
a1620 2
	    perltru64.pod perltw.pod perluniprops.pod perlvos.pod \
	    perlwin32.pod
@


1.23
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d1586 1
@


1.22
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d9 1
a9 1
# (perl520.dll).  Also makes individual DLLs for the XS extensions.
d35 1
d47 1
a47 1
#INST_VER	*= \5.20.3
a89 8
# Comment out next assign to disable perl's I/O subsystem and use compiler's 
# stdio for IO - depending on your compiler vendor and run time library you may 
# then get a number of fails from make test i.e. bugs - complain to them not us ;-). 
# You will also be unable to take full advantage of perl5.8's support for multiple 
# encodings and may see lower IO performance. You have been warned.
USE_PERLIO	*= define

#
d93 1
d101 1
d105 13
d120 1
a120 1
# Visual C++ 6.x (aka Visual C++ 98)
d122 1
a122 1
# Visual C++ .NET 2002/2003 (aka Visual C++ 7.x) (full version)
d124 1
a124 1
# Visual C++ Toolkit 2003 (aka Visual C++ 7.x) (free command-line tools)
d128 1
a128 1
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
d130 1
a130 1
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
d132 1
a132 1
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
d134 1
a134 1
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
d136 1
a136 1
# Visual C++ 2010 (aka Visual C++ 10.x) (full version)
d138 1
a138 1
# Visual C++ 2010 Express Edition (aka Visual C++ 10.x) (free version)
d140 1
a140 1
# Visual C++ 2012 (aka Visual C++ 11.x) (full version)
d142 1
a142 1
# Visual C++ 2012 Express Edition (aka Visual C++ 11.x) (free version)
d144 1
a144 1
# Visual C++ 2013 (aka Visual C++ 12.x) (full version)
d146 1
a146 1
# Visual C++ 2013 Express Edition (aka Visual C++ 12.x) (free version)
d163 6
a168 1
# uncomment next line if you want debug version of perl (big,slow)
d172 12
d215 1
a215 1
# variables below. A static library perl520s.lib will also be created.
a316 1
USE_PERLIO	*= undef
d319 2
d354 4
d360 4
d395 6
a411 1
.IF "$(USE_PERLIO)" == "define"
a412 7
.ELSE
ARCHNAME	= MSWin32-$(ARCHITECTURE)
.ENDIF
.ENDIF

.IF "$(USE_PERLIO)" == "define"
BUILDOPT       += -DUSE_PERLIO
d425 4
d467 5
d487 1
a487 1
INCLUDES	= -I.\include -I. -I.. -I$(COREDIR)
a492 1
SUBSYS		= console
d501 3
a503 5
LIBFILES	= $(LIBC) \
		  -lmoldname -lkernel32 -luser32 -lgdi32 \
		  -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 \
		  -loleaut32 -lnetapi32 -luuid -lws2_32 -lmpr \
		  -lwinmm -lversion -lodbc32 -lodbccp32 -lcomctl32
d508 3
d517 3
d525 1
d530 2
d534 1
a534 1
# All but the free version of VC++ 7.x can load DLLs on demand.  Makes the test
d537 6
d544 3
d549 1
a549 1
# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
d582 1
a582 1
INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
a585 1
SUBSYS		= console
d588 1
a588 1
LIBC	= msvcrt.lib
d593 7
d624 1
a624 1
# For now, silence warnings from VC++ 8.x onwards about "unsafe" CRT functions
d644 4
a647 5
LIBBASEFILES	= \
		oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib comctl32.lib
d668 6
d679 1
a679 1
LIB_FLAGS	= $(LIB_FLAGS) -nologo
d683 2
d691 1
a691 1
LINK_FLAGS	+= "/manifestdependency:type='Win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'"
d697 16
a712 4
# used to allow local linking flags that are not propogated into Config.pm,
# currently unused
#   -- BKS, 12-12-1999
PRIV_LINK_FLAGS	*=
d742 1
a742 1
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $<
d755 1
a755 1
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
d769 4
d774 1
d781 1
a781 2
CONFIGPM	= ..\lib\Config.pm ..\lib\Config_heavy.pl
X2P		= ..\x2p\a2p.exe
d808 1
a808 1
PERLDEP = perldll.def
d825 1
a826 1
		..\utils\config_data	\
a838 3
		..\x2p\find2perl	\
		..\x2p\psed		\
		..\x2p\s2p		\
d849 2
a850 2
PERLIMPLIB	= ..\libperl520$(a)
PERLSTATICLIB	= ..\libperl520s$(a)
a851 1
INT64f		= ll
a857 1
INT64f		= I64
d863 15
a877 3
PERLIMPLIB	*= ..\perl520$(a)
PERLSTATICLIB	*= ..\perl520s$(a)
PERLDLL		= ..\perl520.dll
d883 2
d886 15
d906 1
a906 1
		..\dump.c	\
d908 1
a908 3
		..\gv.c		\
		..\mro.c	\
		..\hv.c		\
a913 1
		..\op.c		\
a914 1
		..\perl.c	\
a916 4
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_hot.c	\
		..\pp_pack.c	\
a917 1
		..\pp_sys.c	\
a918 2
		..\regcomp.c	\
		..\regexec.c	\
a920 1
		..\sv.c		\
d922 1
a922 1
		..\toke.c	\
a923 1
		..\utf8.c	\
d936 1
a940 13
# We need this for miniperl build unless we override canned 
# config.h #define building mini\*
#.IF "$(USE_PERLIO)" == "define"
WIN32_SRC	+= .\win32io.c
#.ENDIF

X2P_SRC		=		\
		..\x2p\a2p.c	\
		..\x2p\hash.c	\
		..\x2p\str.c	\
		..\x2p\util.c	\
		..\x2p\walk.c

d988 3
a998 2
X2P_OBJ		= $(X2P_SRC:db:+$(o))
GENUUDMAP_OBJ	= $(GENUUDMAP:db:+$(o))
d1035 1
d1043 1
a1043 1
		make=dmake			~	\
a1051 1
		useperlio=$(USE_PERLIO)		~	\
d1053 1
d1065 1
a1065 5
all : CHECKDMAKE .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL)	\
	$(CONFIGPM) $(UNIDATAFILES) MakePPPort				\
	$(PERLEXE) $(X2P) Extensions Extensions_nonxs $(PERLSTATIC)

regnodes : ..\regnodes.h
d1071 1
a1071 3
reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL)	\
	$(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)				\
	$(X2P) Extensions_reonly
d1086 1
a1086 1
$(GLOBEXE) : perlglob$(o)
d1088 1
a1088 1
	$(LINK32) $(BLINK_FLAGS) -mconsole -o $@@ perlglob$(o) $(LIBFILES)
d1090 2
a1091 96
	$(LINK32) $(BLINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
	    perlglob$(o) setargv$(o)
	$(EMBED_EXE_MANI)
.ENDIF

perlglob$(o)  : perlglob.c

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

#
# Copy the template config.h and set configurables at the end of it
# as per the options chosen and compiler used.
# Note: This config.h is only used to build miniperl.exe anyway, but
# it's as well to have its options correct to be sure that it builds
# and so that it's "-V" options are correct for use by makedef.pl. The
# real config.h used to build perl.exe is generated from the top-level
# config_h.SH by config_h.PL (run by miniperl.exe).
#
.\config.h : $(CFGH_TMPL) $(CORE_NOCFG_H)
	-del /f config.h
	copy $(CFGH_TMPL) config.h
	@@echo.>>$@@
	@@echo #ifndef _config_h_footer_>>$@@
	@@echo #define _config_h_footer_>>$@@
	@@echo #undef Off_t>>$@@
	@@echo #undef LSEEKSIZE>>$@@
	@@echo #undef Off_t_size>>$@@
	@@echo #undef PTRSIZE>>$@@
	@@echo #undef SSize_t>>$@@
	@@echo #undef HAS_ATOLL>>$@@
	@@echo #undef HAS_STRTOLL>>$@@
	@@echo #undef HAS_STRTOULL>>$@@
	@@echo #undef IVTYPE>>$@@
	@@echo #undef UVTYPE>>$@@
	@@echo #undef IVSIZE>>$@@
	@@echo #undef UVSIZE>>$@@
	@@echo #undef NV_PRESERVES_UV>>$@@
	@@echo #undef NV_PRESERVES_UV_BITS>>$@@
	@@echo #undef IVdf>>$@@
	@@echo #undef UVuf>>$@@
	@@echo #undef UVof>>$@@
	@@echo #undef UVxf>>$@@
	@@echo #undef UVXf>>$@@
	@@echo #undef USE_64_BIT_INT>>$@@
	@@echo #undef Size_t_size>>$@@
.IF "$(USE_LARGE_FILES)"=="define"
	@@echo #define Off_t $(INT64)>>$@@
	@@echo #define LSEEKSIZE ^8>>$@@
	@@echo #define Off_t_size ^8>>$@@
.ELSE
	@@echo #define Off_t long>>$@@
	@@echo #define LSEEKSIZE ^4>>$@@
	@@echo #define Off_t_size ^4>>$@@
.ENDIF
.IF "$(WIN64)"=="define"
	@@echo #define PTRSIZE ^8>>$@@
	@@echo #define SSize_t $(INT64)>>$@@
	@@echo #define HAS_ATOLL>>$@@
	@@echo #define HAS_STRTOLL>>$@@
	@@echo #define HAS_STRTOULL>>$@@
	@@echo #define Size_t_size ^8>>$@@
.ELSE
	@@echo #define PTRSIZE ^4>>$@@
	@@echo #define SSize_t int>>$@@
	@@echo #undef HAS_ATOLL>>$@@
	@@echo #undef HAS_STRTOLL>>$@@
	@@echo #undef HAS_STRTOULL>>$@@
	@@echo #define Size_t_size ^4>>$@@
.ENDIF
.IF "$(USE_64_BIT_INT)"=="define"
	@@echo #define IVTYPE $(INT64)>>$@@
	@@echo #define UVTYPE unsigned $(INT64)>>$@@
	@@echo #define IVSIZE ^8>>$@@
	@@echo #define UVSIZE ^8>>$@@
	@@echo #undef NV_PRESERVES_UV>>$@@
	@@echo #define NV_PRESERVES_UV_BITS 53>>$@@
	@@echo #define IVdf "$(INT64f)d">>$@@
	@@echo #define UVuf "$(INT64f)u">>$@@
	@@echo #define UVof "$(INT64f)o">>$@@
	@@echo #define UVxf "$(INT64f)x">>$@@
	@@echo #define UVXf "$(INT64f)X">>$@@
	@@echo #define USE_64_BIT_INT>>$@@
.ELSE
	@@echo #define IVTYPE long>>$@@
	@@echo #define UVTYPE unsigned long>>$@@
	@@echo #define IVSIZE ^4>>$@@
	@@echo #define UVSIZE ^4>>$@@
	@@echo #define NV_PRESERVES_UV>>$@@
	@@echo #define NV_PRESERVES_UV_BITS 32>>$@@
	@@echo #define IVdf "ld">>$@@
	@@echo #define UVuf "lu">>$@@
	@@echo #define UVof "lo">>$@@
	@@echo #define UVxf "lx">>$@@
	@@echo #define UVXf "lX">>$@@
	@@echo #undef USE_64_BIT_INT>>$@@
a1092 1
	@@echo #endif>>$@@
d1094 2
a1095 2
..\git_version.h : $(MINIPERL) ..\make_patchnum.pl
	cd .. && miniperl -Ilib make_patchnum.pl
d1100 1
a1100 1
..\config.sh : config.w32 $(MINIPERL) config_sh.PL FindExt.pm
d1102 1
a1102 1
	    $(mktmp $(CFG_VARS)) config.w32 > ..\config.sh
d1106 1
a1106 1
# with MULTI, ITHREADS, IMP_SYS, LARGE_FILES and PERLIO off), then make
d1116 1
a1116 1
$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL
d1118 1
a1118 6
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(XCOPY) *.h $(COREDIR)\*.*
	$(RCOPY) include $(COREDIR)\*.*
	$(MINIPERL) -I..\lib config_h.PL "ARCHPREFIX=$(ARCHPREFIX)" \
	    || $(MAKE) $(MAKEMACROS) $(CONFIGPM) $(MAKEFILE)
d1121 1
a1121 3
$(MINIPERL) : ..\lib\buildcustomize.pl

..\lib\buildcustomize.pl : $(MINIDIR) $(MINI_OBJ) $(CRTIPMLIBS) ..\write_buildcustomize.pl
d1126 2
a1127 2
	$(LINK32) -subsystem:console -out:$(MINIPERL) $(BLINK_FLAGS) \
	    @@$(mktmp $(DELAYLOAD) $(LIBFILES) $(MINI_OBJ))
d1132 4
a1135 1
$(MINIDIR) :
d1137 167
d1306 1
a1306 1
	$(CC) -c $(CFLAGS) $(MINIBUILDOPT) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*B).c
d1309 1
a1309 1
	$(CC) -c $(CFLAGS) $(MINIBUILDOPT) -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ $(*B).c
d1316 1
a1316 1
perllib$(o)	: perllib.c .\perlhost.h .\vdir.h .\vmem.h
d1318 1
a1318 1
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
d1320 1
a1320 1
	$(CC) -c -I. $(CFLAGS_O) $(OBJOUT_FLAG)$@@ perllib.c
d1326 1
a1326 1
$(MINI_OBJ)	: $(CORE_NOCFG_H)
a1333 1
$(X2P_OBJ)	: $(CORE_H)
d1335 1
a1335 1
perldll.def : $(MINIPERL) $(CONFIGPM) ..\embed.fnc ..\makedef.pl create_perllibst_h.pl
d1337 2
d1342 8
a1349 1
$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
a1350 9
	$(LINK32) -mdll -o $@@ -Wl,--base-file -Wl,perl.base $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ) \
		$(shell @@type Extensions_static) \
		$(LIBFILES) $(LKPOST))
	$(IMPLIB) --output-lib $(PERLIMPLIB) \
		--dllname $(PERLDLL:b).dll \
		--def perldll.def \
		--base-file perl.base \
		--output-exp perl.exp
d1352 1
a1352 3
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ) \
		$(shell @@type Extensions_static) \
		$(LIBFILES) perl.exp $(LKPOST))
d1354 1
a1354 1
	$(LINK32) -dll -def:perldll.def -out:$@@ $(BLINK_FLAGS) \
d1357 1
a1357 1
		$(PERLDLL_RES) $(PERLDLL_OBJ))
a1359 1
	$(XCOPY) $(PERLIMPLIB) $(COREDIR)
d1374 1
a1374 1
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)
d1378 1
a1378 11
..\x2p\a2p$(o) : ..\x2p\a2p.c
	$(CC) -I..\x2p $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\a2p.c

..\x2p\hash$(o) : ..\x2p\hash.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\hash.c

..\x2p\str$(o) : ..\x2p\str.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\str.c

..\x2p\util$(o) : ..\x2p\util.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\util.c
d1380 1
a1380 6
..\x2p\walk$(o) : ..\x2p\walk.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\walk.c

$(X2P) : $(MINIPERL) $(X2P_OBJ) Extensions
	$(MINIPERL) -I..\lib ..\x2p\find2perl.PL
	$(MINIPERL) -I..\lib ..\x2p\s2p.PL
d1382 2
a1383 2
	$(LINK32) -v -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(X2P_OBJ) $(LIBFILES) $(LKPOST))
d1385 2
a1386 3
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(X2P_OBJ))
	$(EMBED_EXE_MANI)
a1387 6

$(MINIDIR)\globals$(o) : $(GENERATED_HEADERS)

$(UUDMAP_H) $(MG_DATA_H) : $(BITCOUNT_H)

$(BITCOUNT_H) : $(GENUUDMAP)
d1390 6
a1395 17
$(GENUUDMAP_OBJ) : ..\mg_raw.h

$(GENUUDMAP) : $(GENUUDMAP_OBJ)
.IF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(GENUUDMAP_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(GENUUDMAP_OBJ))
	$(EMBED_EXE_MANI)
.ENDIF

perlmain.c : runperl.c
	copy runperl.c perlmain.c

perlmain$(o) : perlmain.c
	$(CC) $(CFLAGS_O:s,-DPERLDLL,-UPERLDLL,) $(OBJOUT_FLAG)$@@ -c perlmain.c
d1397 2
a1398 2
perlmainst.c : runperl.c
	copy runperl.c perlmainst.c
d1400 2
a1401 2
perlmainst$(o) : perlmainst.c
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ -c perlmainst.c
d1403 1
a1403 1
$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES)
d1408 1
a1408 1
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
d1420 1
a1420 1
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
a1424 3
MakePPPort: $(MINIPERL) $(CONFIGPM) Extensions_nonxs
	$(MINIPERL) -I..\lib ..\mkppport

d1428 13
a1440 11
Extensions : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic

Extensions_reonly : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic +re

Extensions_static : ..\make_ext.pl ..\lib\buildcustomize.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --static
d1443 6
a1448 7
Extensions_nonxs : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) ..\pod\perlfunc.pod
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --nonxs

$(DYNALOADER) : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynaloader
d1451 1
a1451 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=clean
d1454 11
a1464 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=realclean
d1469 2
a1470 2
doc: $(PERLEXE) ..\pod\perltoc.pod
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
d1479 2
a1480 2
utils: $(PERLEXE) $(X2P) ..\utils\Makefile
	cd ..\utils && $(MAKE) PERL=$(MINIPERL)
d1514 2
a1515 2
	copy ..\pod\perldelta.pod ..\pod\perl5203delta.pod
	$(PERLEXE) $(PL2BAT) $(UTILS)
d1519 1
a1519 1
..\pod\perltoc.pod: $(PERLEXE) Extensions Extensions_nonxs
d1548 1
a1553 1
	-if exist $(LIBDIR)\CGI rmdir /s /q $(LIBDIR)\CGI
a1585 2
	-if exist $(LIBDIR)\OpenBSD rmdir /s /q $(LIBDIR)\OpenBSD
	-if exist $(LIBDIR)\Package rmdir /s /q $(LIBDIR)\Package
d1595 1
d1611 1
a1611 1
	    perl5203delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
d1619 2
a1620 1
	    perltru64.pod perltw.pod perlvos.pod perlwin32.pod
d1622 2
a1623 3
	    perldoc perlivp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep shasum corelist config_data zipdetails
	-cd ..\x2p && del /f find2perl s2p psed *.bat
d1646 1
a1650 1
	if exist ..\x2p\a2p.pdb $(XCOPY) ..\x2p\a2p.pdb $(INST_BIN)\*.*
d1659 2
a1660 3
$(UNIDATAFILES) ..\pod\perluniprops.pod .UPDATEALL : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables Extensions_nonxs
	cd ..\lib\unicore && \
	..\$(MINIPERL) -I.. -I..\..\dist\Cwd\lib -I..\..\dist\Cwd mktables -P ..\..\pod -maketest -makelist -p
d1662 1
a1662 1
minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) $(UNIDATAFILES) utils
d1667 6
a1672 3
	attrib -r ..\t\*.*
	cd ..\t && \
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t opbasic/*.t op/*.t pragma/*.t
a1673 5
test-prep : all utils ..\pod\perltoc.pod
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.IF "$(CCTYPE)" == "GCC"
d1680 4
d1689 1
d1694 1
a1694 1
	    cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1698 1
a1698 1
	    cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) porting\*.t ..\lib\diagnostics.t
d1704 1
a1704 3
	cd ..\t && \
	$(PERLEXE) -I..\lib harness $(OPT) -re \bpat\\/ $(EXTRA) && \
	cd ..\win32
d1707 1
a1707 1
	cd .. && regen.pl && cd win32
d1712 1
a1712 1
	    cd ..\t && $(PERLEXE) -I.\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1719 1
a1719 1
	    cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
a1726 1
	-@@erase config.w32
a1742 1
	-@@erase $(X2P_OBJ)
a1744 1
	-@@erase ..\x2p\*.exe ..\x2p\*.bat
d1746 1
a1746 1
	-@@erase *.pdb
a1748 2


d1757 5
a1761 2
ok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)"
d1763 2
a1764 2
okfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok
d1766 2
a1767 2
nok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)"
a1768 2
nokfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.21
log
@Apply pre-built unicore patch, remove excess files - perl-5.20.2
@
text
@d46 1
a46 1
#INST_VER	*= \5.20.2
d483 1
d1395 1
a1395 1
	copy ..\pod\perldelta.pod ..\pod\perl5202delta.pod
d1493 1
a1493 1
	    perl5202delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
@


1.20
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d1500 1
a1500 2
	    perltru64.pod perltw.pod perluniprops.pod perlvos.pod \
	    perlwin32.pod
@


1.19
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d1466 1
@


1.18
log
@Regenerate unicore for perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d46 1
a46 1
#INST_VER	*= \5.20.1
d1394 1
a1394 1
	copy ..\pod\perldelta.pod ..\pod\perl5201delta.pod
a1465 1
	-if exist $(LIBDIR)\OpenBSD rmdir /s /q $(LIBDIR)\OpenBSD
d1491 1
a1491 1
	    perl5201delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
d1499 2
a1500 1
	    perltru64.pod perltw.pod perlvos.pod perlwin32.pod
@


1.17
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1500 1
a1500 2
	    perltru64.pod perltw.pod perluniprops.pod perlvos.pod \
	    perlwin32.pod
@


1.16
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1466 1
@


1.15
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d5 1
a5 1
#	MinGW with gcc-3.2 or later
d9 1
a9 1
# (perl518.dll).  Also makes individual DLLs for the XS extensions.
d16 5
d46 1
a46 1
#INST_VER	*= \5.18.2
d68 3
a70 2
# uncomment to enable multiple interpreters.  This is need for fork()
# emulation and for thread support.
d76 2
a77 2
# This should be enabled to get the fork() emulation.  
# This needs USE_MULTI above.
d83 2
a84 2
# made by perl.  This needs USE_MULTI above.  
# This is also needed to get fork().
d106 1
d136 5
a140 1
# MinGW or mingw-w64 with gcc-3.2 or later
d144 11
d190 1
a190 1
# variables below. A static library perl518s.lib will also be created.
a327 2
.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITEW6432 WIN64 CCHOME

d355 6
a400 1
EXTUTILSDIR	= $(LIBDIR)\ExtUtils
d417 2
d431 7
d511 1
d514 4
d548 1
a548 1
.IF "$(WIN64)" == "define"
d552 1
d587 8
d611 1
a611 1
LIB_FLAGS	= -nologo
d692 1
a694 1
MINIMOD		= ..\lib\ExtUtils\Miniperl.pm
d697 1
a697 1
.IF "$(BUILD_STATIC)" == "define"
a749 3
		..\utils\cpanp-run-perl	\
		..\utils\cpanp	\
		..\utils\cpan2dist	\
d766 2
a767 2
PERLIMPLIB	= ..\libperl518$(a)
PERLSTATICLIB	= ..\libperl518s$(a)
d782 3
a784 3
PERLIMPLIB	*= ..\perl518$(a)
PERLSTATICLIB	*= ..\perl518s$(a)
PERLDLL		= ..\perl518.dll
d792 1
d866 1
a874 1
		..\perlsfio.h	\
d893 1
d926 2
a927 4
#  - Win32 extension contains overlapped symbols with win32.c (BUG!)
#  - MakeMaker isn't capable enough for SDBM_File (smaller bug)
#  - Encode (encoding search algorithm relies on shared library?)
STATIC_EXT	= * !Win32 !SDBM_File !Encode
d930 2
a931 1
#STATIC_EXT	= Cwd Compress/Raw/Zlib
a973 2
ICWD = -I..\dist\Cwd -I..\dist\Cwd\lib

d979 1
a979 1
	$(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort		\
d989 1
a989 1
	$(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)		\
d1034 3
d1055 9
d1127 1
a1127 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL "ARCHPREFIX=$(ARCHPREFIX)"
d1130 1
a1130 1
$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
d1136 1
a1136 1
	$(MINIPERL) -I..\lib $(ICWD) config_h.PL "ARCHPREFIX=$(ARCHPREFIX)" \
d1139 2
a1140 3
..\lib\buildcustomize.pl: $(MINIPERL) ..\write_buildcustomize.pl
	$(MINIPERL) -I..\lib ..\write_buildcustomize.pl .. >..\lib\buildcustomize.pl

d1142 1
a1142 1
$(MINIPERL) : $(MINIDIR) $(MINI_OBJ) $(CRTIPMLIBS)
d1144 1
a1144 1
	$(LINK32) -v -mconsole -o $@@ $(BLINK_FLAGS) \
d1147 1
a1147 1
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
d1149 1
a1149 1
	$(EMBED_EXE_MANI)
d1151 1
d1157 1
a1157 1
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*B).c
d1160 1
a1160 1
	$(CC) -c $(CFLAGS) -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ $(*B).c
d1216 1
a1216 1
$(PERLSTATICLIB): Extensions_static
d1218 7
a1224 8
# XXX: It would be nice if MinGW's ar accepted a temporary file, but this
# doesn't seem to work:
#	$(LIB32) $(LIB_FLAGS) $@@ \
#	    $(mktmp $(LKPRE) $(shell @@type Extensions_static) \
#		$(PERLDLL_OBJ) $(LKPOST))
	$(LIB32) $(LIB_FLAGS) $@@ \
	    $(shell @@type Extensions_static) \
	    $(PERLDLL_OBJ)
a1232 3
$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd .. && miniperl minimod.pl > lib\ExtUtils\Miniperl.pm

d1297 1
a1297 1
	    $(LIBFILES) $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) $(PERLEXE_RES)
d1306 1
a1306 3
	    $(mktmp $(LKPRE) $(shell @@type Extensions_static) \
		$(PERLSTATICLIB) $(LIBFILES) $(PERLEXEST_OBJ) \
		$(PERLEXE_RES) $(LKPOST))
d1309 1
a1309 2
	    @@Extensions_static $(PERLSTATICLIB) /PDB:NONE \
	    $(LIBFILES) $(PERLEXEST_OBJ) $(SETARGV_OBJ) $(PERLEXE_RES)
d1314 1
a1314 1
	$(MINIPERL) -I..\lib $(ICWD) ..\mkppport
d1327 1
a1327 1
Extensions_static : ..\make_ext.pl ..\lib\buildcustomize.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
d1354 3
d1359 1
a1359 1
utils: $(PERLEXE) $(X2P)
d1363 1
a1367 1
	copy ..\README.dgux     ..\pod\perldgux.pod
d1389 1
d1394 1
a1394 1
	copy ..\pod\perldelta.pod ..\pod\perl5182delta.pod
d1396 2
a1397 2
	$(PERLEXE) $(ICWD) ..\autodoc.pl ..
	$(PERLEXE) $(ICWD) ..\pod\perlmodlib.pl -q
d1407 1
a1407 3
		$(PERLIMPLIB) ..\miniperl$(a) $(MINIMOD) \
		$(PERLEXESTATIC) $(PERLSTATICLIB)
	-del /f *.def *.map
d1427 1
d1432 1
a1432 1
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B
d1434 2
a1436 2
	-if exist $(LIBDIR)\CPANPLUS rmdir /s /q $(LIBDIR)\CPANPLUS
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
d1442 1
d1448 2
d1453 2
a1454 1
	-if exist $(LIBDIR)\I18N\LangTags rmdir /s /q $(LIBDIR)\I18N\LangTags
a1455 1
	-if exist $(LIBDIR)\Module\Pluggable rmdir /s /q $(LIBDIR)\Module\Pluggable
d1458 1
a1460 1
	-if exist $(LIBDIR)\Log rmdir /s /q $(LIBDIR)\Log
a1464 1
	-if exist $(LIBDIR)\mro rmdir /s /q $(LIBDIR)\mro
a1465 1
	-if exist $(LIBDIR)\Object rmdir /s /q $(LIBDIR)\Object
d1469 1
a1473 1
	-if exist $(LIBDIR)\re rmdir /s /q $(LIBDIR)\re
d1475 1
d1478 1
a1478 1
	-if exist $(LIBDIR)\Term\UI rmdir /s /q $(LIBDIR)\Term\UI
d1480 1
d1485 4
a1489 1
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
d1491 10
a1500 9
	    perl5182delta.pod perlaix.pod perlamiga.pod perlapi.pod \
	    perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldgux.pod perldos.pod perlfreebsd.pod perlhaiku.pod \
	    perlhpux.pod perlhurd.pod perlintern.pod perlirix.pod \
	    perljp.pod perlko.pod perllinux.pod perlmacos.pod \
	    perlmacosx.pod perlmodlib.pod perlnetware.pod perlopenbsd.pod \
	    perlos2.pod perlos390.pod perlos400.pod perlplan9.pod \
	    perlqnx.pod perlriscos.pod perlsolaris.pod perlsymbian.pod \
	    perltoc.pod perltru64.pod perltw.pod perlvos.pod perlwin32.pod
d1503 1
a1503 1
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep cpanp-run-perl cpanp cpan2dist shasum corelist config_data zipdetails
d1512 1
a1512 1
	-cd .. && del /s *$(a) *.map *.pdb *.ilk *.tds *.bs *$(o) .exists pm_to_blib ppport.h
d1516 1
d1564 1
d1568 1
a1630 1
	-@@erase *.tds
@


1.14
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d9 1
a9 1
# (perl516.dll).  Also makes individual DLLs for the XS extensions.
d41 1
a41 1
#INST_VER	*= \5.16.3
d97 6
d107 2
a110 2
# Visual C++ .NET 2003 (aka Visual C++ 7.x) (full version)
#CCTYPE		*= MSVC70
d113 2
d117 2
a118 2
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
#CCTYPE		*= MSVC80
d121 2
a122 2
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
#CCTYPE		*= MSVC90
d125 4
a128 2
# Visual C++ 2010 (aka Visual C++ 10.x) (full version)
#CCTYPE		= MSVC100
d168 1
a168 1
# variables below. A static library perl516s.lib will also be created.
d207 3
a209 2
CCINCDIR *= $(CCHOME)\mingw\include
CCLIBDIR *= $(CCHOME)\mingw\lib
d213 1
d272 1
d306 1
a306 1
.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITEW6432 WIN64
d324 4
d353 4
d361 4
a364 9
# Visual C++ 98, .NET 2003, 2005/2008/2010 specific.
# VC++ 6/7/8/9/10.x can load DLLs on demand.  Makes the test suite run
# in about 10% less time.  (The free version of 7.x can't do this, but the free
# versions of 8/9/10.x can.)
.IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"     || \
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
DELAYLOAD	*= -DELAYLOAD:ws2_32.dll delayimp.lib
a366 10
# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest

d442 1
a442 1
CFLAGS		= $(INCLUDES) $(DEFINES) $(LOCDEFS) $(OPTIMIZE)
d452 25
d499 2
a500 1
OPTIMIZE	= -MD -Zi -DNDEBUG
d511 1
a511 1
OPTIMIZE	+= -Ox -GL
a512 4
.ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86
OPTIMIZE	+= -O1
#OPTIMIZE	+= -O2
d521 1
a521 1
# For now, silence VC++ 8/9/10.x's warnings about "unsafe" CRT functions
d523 1
a523 3
.IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d536 1
a536 2
.IF "$(CCTYPE)" == "MSVC60" || \
    "$(CCTYPE)" == "MSVC70" || "$(CCTYPE)" == "MSVC70FREE"
d572 1
a572 3
.IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
a718 9
.IF "$(WIN64)" == "define"
.IF "$(GCCCROSS)" == "define"
CFGSH_TMPL	= config.gc64
CFGH_TMPL	= config_H.gc64
.ELSE
CFGSH_TMPL	= config.gc64nox
CFGH_TMPL	= config_H.gc64nox
.ENDIF
.ELSE
d721 4
a724 3
.ENDIF
PERLIMPLIB	= ..\libperl516$(a)
PERLSTATICLIB	= ..\libperl516s$(a)
a727 4
.IF "$(WIN64)" == "define"
CFGSH_TMPL	= config.vc64
CFGH_TMPL	= config_H.vc64
.ELSE
d730 2
a731 1
.ENDIF
d737 3
a739 3
PERLIMPLIB	*= ..\perl516$(a)
PERLSTATICLIB	*= ..\perl516s$(a)
PERLDLL		= ..\perl516.dll
a895 1
		INST_DRV=$(INST_DRV)		~	\
d920 1
d924 3
a926 1
		optimize=$(OPTIMIZE)
d975 9
d987 64
d1062 2
a1063 2
# this target is for when changes to the main config.sh happen.
# edit config.gc, then make perl using GCC in a minimal configuration (i.e.
a1065 5
# unfortunately, some further manual editing is also then required to restore all
# the special _MSC_VER handling that is otherwise lost.
# repeat for config.gc64 and config_H.gc64, and again for config.gc64nox and
# config_H.gc64nox, if you have suitable build environments, otherwise hand-edit
# them to maintain the same differences with config.gc and config_H.gc as before.
d1071 1
a1071 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL "INST_VER=$(INST_VER)"
d1080 1
a1080 1
	$(MINIPERL) -I..\lib $(ICWD) config_h.PL "INST_VER=$(INST_VER)" \
d1093 1
a1093 1
	    @@$(mktmp $(LIBFILES) $(MINI_OBJ))
d1104 1
a1104 1
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $(*B).c
d1302 1
a1302 1
	    --podpath=pod:lib:ext:utils --htmlroot="file://$(INST_HTML:s,:,|,)"\
a1310 1
	copy ..\README.beos     ..\pod\perlbeos.pod
a1316 1
	copy ..\README.epoc     ..\pod\perlepoc.pod
a1326 1
	copy ..\README.mpeix    ..\pod\perlmpeix.pod
a1338 2
	copy ..\README.uts      ..\pod\perluts.pod
	copy ..\README.vmesa    ..\pod\perlvmesa.pod
d1341 1
a1341 1
	copy ..\pod\perldelta.pod ..\pod\perl5163delta.pod
d1433 9
a1441 10
	    perl5163delta.pod perlaix.pod perlamiga.pod perlapi.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcn.pod \
	    perlcygwin.pod perldgux.pod perldos.pod perlepoc.pod \
	    perlfreebsd.pod perlhaiku.pod perlhpux.pod perlhurd.pod \
	    perlintern.pod perlirix.pod perljp.pod perlko.pod perllinux.pod \
	    perlmacos.pod perlmacosx.pod perlmodlib.pod perlmpeix.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perltoc.pod perltru64.pod \
	    perltw.pod perluts.pod perlvmesa.pod perlvos.pod perlwin32.pod
d1491 1
a1491 1
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t
a1496 1

d1504 3
a1506 5
	if exist $(CCHOME)\bin\libgcc_s_sjlj-1.dll $(XCOPY) $(CCHOME)\bin\libgcc_s_sjlj-1.dll ..\t\$(NULL)
	if exist $(CCHOME)\bin\libgcc_s_dw2-1.dll $(XCOPY) $(CCHOME)\bin\libgcc_s_dw2-1.dll ..\t\$(NULL)
	if exist $(CCHOME)\bin\libgcc_s_1.dll $(XCOPY) $(CCHOME)\bin\libgcc_s_1.dll ..\t\$(NULL)
	if exist $(CCHOME)\bin\w64gcc_s_sjlj-1.dll $(XCOPY) $(CCHOME)\bin\w64gcc_s_sjlj-1.dll ..\t\$(NULL)
	if exist $(CCHOME)\bin\libstdc++-6.dll $(XCOPY) $(CCHOME)\bin\libstdc++-6.dll ..\t\$(NULL)
@


1.13
log
@merge in perl 5.12.2 plus local changes
@
text
@d2 1
a2 1
# Makefile to build perl on Windows NT using DMAKE.
d4 3
a6 4
#	Visual C++ 2.0 or later
#	Borland C++ 5.02 or later
#	MinGW with gcc-2.95.2 or later
#	MS Platform SDK 64-bit compiler and tools **experimental**
d9 1
a9 1
# (perl512.dll).  Also makes individual DLLs for the XS extensions.
d41 1
a41 1
#INST_VER	*= \5.12.2
a98 4
# Visual C++ 2.x
#CCTYPE		*= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		*= MSVC
d105 2
d115 5
a119 3
# Borland 5.02 or later
#CCTYPE		*= BORLAND
# MinGW or mingw-w64 with gcc-2.95.2 or later
a122 12
# uncomment this if your Borland compiler is older than v5.4.
#BCCOLD		*= define
#
# uncomment this if you want to use Borland's VCL as your CRT
#BCCVCL		*= define

#
# uncomment this if you are compiling under Windows 95/98 and command.com
# (not needed if you're running under 4DOS/NT 6.01 or later)
#IS_WIN95	*= define

#
a129 11
# uncomment to enable use of PerlCRT.DLL when using the Visual C compiler.
# It has patches that fix known bugs in older versions of MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3 or later.
# Get it from CPAN at http://www.cpan.org/authors/id/D/DO/DOUGL/
# and follow the directions in the package to install.
#
# Not recommended if you have VC 6.x and you're not running Windows 9x.
#
#USE_PERLCRT	*= define

#
a138 14
# if you want to have the crypt() builtin function implemented, leave this or
# CRYPT_LIB uncommented.  The fcrypt.c file named here contains a suitable
# version of des_fcrypt().
#
CRYPT_SRC	*= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	*= fcrypt.lib

#
d158 1
a158 1
# variables below. A static library perl512s.lib will also be created.
d179 1
a179 3
.IF "$(CCTYPE)" == "BORLAND"
CCHOME		*= C:\Borland\BCC55
.ELIF "$(CCTYPE)" == "GCC"
a185 16
# If building with gcc-4.x.x (or x86_64-w64-mingw32-gcc-4.x.x), then
# uncomment  the following assignment to GCC_4XX, make sure that CCHOME
# has been set correctly above, and uncomment the appropriate
# GCCHELPERDLL line.
# The name of the dll can change, depending upon which vendor has supplied
# your 4.x.x compiler, and upon the values of "x".
# (The dll will be in your mingw/bin folder, so check there if you're
# unsure about the correct name.)
# Without these corrections, the op/taint.t test script will fail.
#
#GCC_4XX		*= define
#GCCHELPERDLL	*= $(CCHOME)\bin\libgcc_s_sjlj-1.dll
#GCCHELPERDLL	*= $(CCHOME)\bin\libgcc_s_dw2-1.dll
#GCCHELPERDLL	*= $(CCHOME)\bin\libgcc_s_1.dll

#
a209 20
# Adding -DPERL_HASH_SEED_EXPLICIT will disable randomization of Perl's
# internal hash function unless the PERL_HASH_SEED environment variable is set.
# Alternatively, adding -DNO_HASH_SEED will completely disable the
# randomization feature. 
# The latter is required to maintain binary compatibility with Perl 5.8.0.
#
#BUILDOPT	+= -DPERL_HASH_SEED_EXPLICIT
#BUILDOPT	+= -DNO_HASH_SEED

#
# This should normally be disabled.  Adding -DPERL_POLLUTE enables support
# for old symbols by default, at the expense of extreme pollution.  You most
# probably just want to build modules that won't compile with
#         perl Makefile.PL POLLUTE=1
# instead of enabling this.  Please report such modules to the respective
# authors.
#
#BUILDOPT	+= -DPERL_POLLUTE

#
d216 8
a223 2
# This should normally be disabled.  Enabling it causes perl to read scripts
# in text mode (which is the 5.005 behavior) and will break ByteLoader.
d225 1
a225 1
#BUILDOPT	+= -DPERL_TEXTMODE_SCRIPTS
a250 7
.IF "$(CRYPT_SRC)$(CRYPT_LIB)" == ""
D_CRYPT		= undef
.ELSE
D_CRYPT		= define
CRYPT_FLAG	= -DHAVE_DES_FCRYPT
.ENDIF

a259 1
USE_PERLCRT	*= undef
d311 7
d340 2
a341 2
# Visual C++ 98, .NET 2003, 2005 and 2008 specific.
# VC++ 6.x, 7.x, 8.x and 9.x can load DLL's on demand.  Makes the test suite run
d343 1
a343 1
# versions of 8.x and 9.x can.)
d345 3
a347 2
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" ||
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
d386 1
a386 59
.IF "$(CCTYPE)" == "BORLAND"

CC		= bcc32
.IF "$(BCCOLD)" != "define"
LINK32		= ilink32
.ELSE
LINK32		= tlink32
.ENDIF
LIB32		= tlib /a /P128
IMPLIB		= implib -c
RSC		= brcc32

#
# Options
#
INCLUDES	= -I$(COREDIR) -I.\include -I. -I.. -I"$(CCINCDIR)"
#PCHFLAGS	= -H -Hc -H=c:\temp\bcmoduls.pch
DEFINES		= -DWIN32 $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -P

LIBC		= cw32mti.lib

# same libs as MSVC, except Borland doesn't have oldnames.lib
LIBFILES	= $(CRYPT_LIB) \
		kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib comctl32.lib \
		import32.lib $(LIBC)

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -v -D_RTLDLL -DDEBUGGING
LINK_DBG	= -v
.ELSE
OPTIMIZE	= -O2 -D_RTLDLL
LINK_DBG	=
.ENDIF

EXTRACFLAGS	=
CFLAGS		= -w -g0 -tWM -tWD $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= $(LINK_DBG) -x -L"$(INST_COREDIR)" -L"$(CCLIBDIR)" \
		-L"$(CCLIBDIR)\PSDK"
OBJOUT_FLAG	= -o
EXEOUT_FLAG	= -e
LIBOUT_FLAG	=
.IF "$(BCCOLD)" != "define"
LINK_FLAGS	+= -Gn
DEFINES  += -D_MT -D__USELOCALES__ -D_WIN32_WINNT=0x0410
.END
.IF "$(BCCVCL)" == "define"
LIBC		= cp32mti.lib vcl.lib vcl50.lib vclx50.lib vcle50.lib
LINK_FLAGS	+= -L"$(CCLIBDIR)\Release"
.END


.ELIF "$(CCTYPE)" == "GCC"
d407 1
a407 1
DEFINES		= -DWIN32 $(CRYPT_FLAG)
d421 1
a421 1
LIBFILES	= $(CRYPT_LIB) $(LIBC) \
d442 1
a442 3
# NOTE: we assume that GCC uses MSVCRT.DLL
# See comments about PERL_MSVCRT_READFIX in the "cl" compiler section below.
BUILDOPT	+= -fno-strict-aliasing -mms-bitfields -DPERL_MSVCRT_READFIX
d457 1
a457 1
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG)
a461 1
.IF "$(USE_PERLCRT)" != "define"
a462 3
.ELSE
LIBC	= PerlCRT.lib
.ENDIF
d465 1
a465 5
.IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE	= -Od -MD -Z7 -DDEBUGGING
.ELSE
OPTIMIZE	= -O1 -MD -Zi -DDEBUGGING
.ENDIF
d490 1
a490 1
OPTIMIZE	+= -Wp64 -fp:precise
d493 1
a493 1
# For now, silence VC++ 8.x's and 9.x's warnings about "unsafe" CRT functions
d496 2
a497 1
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
d501 12
a512 6
# Use the MSVCRT read() fix if the PerlCRT was not chosen, but only when using
# VC++ 6.x or earlier. Later versions use MSVCR70.dll, MSVCR71.dll, etc, which
# do not require the fix.
.IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC" || "$(CCTYPE)" == "MSVC60" 
.IF "$(USE_PERLCRT)" != "define"
BUILDOPT	+= -DPERL_MSVCRT_READFIX
d516 1
a516 1
LIBBASEFILES	= $(CRYPT_LIB) \
d522 2
a523 2
# The 64 bit Platform SDK compilers contain a runtime library that doesn't
# include the buffer overrun verification code used by the /GS switch.
d525 2
a526 2
# "security cookie verification" must be included via bufferoverlow.lib.
.IF "$(WIN64)" == "define"
a529 1
# we add LIBC here, since we may be using PerlCRT.dll
d548 2
a549 1
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
d598 1
a598 4
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(BLINK_FLAGS) c0d32$(o) $<,$@@,,$(LIBFILES),$(*B).def
	$(IMPLIB) $(*B).lib $@@
.ELIF "$(CCTYPE)" == "GCC"
d635 1
a654 1
GLOBBAT		= bin\perlglob.bat
a658 1
		..\utils\dprofpp	\
d673 1
d677 2
d684 1
a684 7
		..\pod\pod2html		\
		..\pod\pod2latex	\
		..\pod\pod2man		\
		..\pod\pod2text		\
		..\pod\pod2usage	\
		..\pod\podchecker	\
		..\pod\podselect	\
d694 1
a694 6
.IF "$(CCTYPE)" == "BORLAND"

CFGSH_TMPL	= config.bc
CFGH_TMPL	= config_H.bc

.ELIF "$(CCTYPE)" == "GCC"
d708 2
a709 2
PERLIMPLIB	= ..\libperl512$(a)
PERLSTATICLIB	= ..\libperl512s$(a)
d725 3
a727 3
PERLIMPLIB	*= ..\perl512$(a)
PERLSTATICLIB	*= ..\perl512s$(a)
PERLDLL		= ..\perl512.dll
d744 1
d782 2
a783 1
		.\win32thread.c
a790 4
.IF "$(CRYPT_SRC)" != ""
WIN32_SRC	+= .\$(CRYPT_SRC)
.ENDIF

d842 2
a892 1
		d_crypt=$(D_CRYPT)		~	\
d914 1
a914 24
#
# set up targets varying between Win95 and WinNT builds
#

.IF "$(IS_WIN95)" == "define"
MK2 		= .\makefile.95
RIGHTMAKE	= __switch_makefiles
.ELSE
MK2		= __not_needed
RIGHTMAKE	=
.ENDIF

.IMPORT .IGNORE : SystemRoot windir

# Don't just .IMPORT OS from the environment because dmake sets OS itself.
ENV_OS=$(subst,OS=, $(shell @@set OS))

.IF "$(ENV_OS)" == "Windows_NT"
ODBCCP32_DLL = $(SystemRoot)\system32\odbccp32.dll
.ELSE
ODBCCP32_DLL = $(windir)\system\odbccp32.dll
.ENDIF

ICWD = -I..\cpan\Cwd -I..\cpan\Cwd\lib
d920 2
a921 2
all : CHECKDMAKE .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL) $(MK2)	\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort		\
d926 1
a926 1
..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h	
d930 2
a931 2
reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL) $(MK2)	\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)		\
a937 46
#-------------------- BEGIN Win95 SPECIFIC ----------------------

# this target is a jump-off point for Win95
#  1. it switches to the Win95-specific makefile if it exists
#     (__do_switch_makefiles)
#  2. it prints a message when the Win95-specific one finishes (__done)
#  3. it then kills this makefile by trying to make __no_such_target

__switch_makefiles: __do_switch_makefiles __done __no_such_target

__do_switch_makefiles:
.IF "$(NOTFIRST)" != "true"
	if exist $(MK2) $(MAKE:s/-S//) -f $(MK2) $(MAKETARGETS) NOTFIRST=true
.ELSE
	$(NOOP)
.ENDIF

.IF "$(NOTFIRST)" != "true"
__done:
	@@echo Build process complete. Ignore any errors after this message.
	@@echo Run "dmake test" to test and "dmake install" to install

.ELSE
# dummy targets for Win95-specific makefile

__done:
	$(NOOP)

__no_such_target:
	$(NOOP)

.ENDIF

# This target is used to generate the new makefile (.\makefile.95) for Win95

.\makefile.95: .\makefile.mk
	$(MINIPERL) genmk95.pl makefile.mk $(MK2)

#--------------------- END Win95 SPECIFIC ---------------------

# a blank target for when builds don't need to do certain things
# this target added for Win95 port but used to keep the WinNT port able to
# use this file
__not_needed:
	$(NOOP)

d948 1
a948 5
.IF "$(CCTYPE)" == "BORLAND"
	$(CC) -c -w -v -tWM -I"$(CCINCDIR)" perlglob.c
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) c0x32$(o) perlglob$(o) \
	    "$(CCLIBDIR)\32BIT\wildargs$(o)",$@@,,import32.lib cw32mt.lib,
.ELIF "$(CCTYPE)" == "GCC"
d977 1
a977 1
# with MULTI, ITHREADS, IMP_SYS, LARGE_FILES, PERLIO and CRYPT off), then make
d981 3
a983 2
# repeat for config.bc and config_H.bc (using BORLAND), except that there is no
# _MSC_VER stuff in that case.
a996 1
	$(XCOPY) ..\ext\re\re.pm $(LIBDIR)\*.*
d1001 4
d1006 1
a1006 6
.IF "$(CCTYPE)" == "BORLAND"
	if not exist $(CCLIBDIR)\PSDK\odbccp32.lib \
	    cd $(CCLIBDIR)\PSDK && implib odbccp32.lib $(ODBCCP32_DLL)
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(MINI_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
d1049 1
a1049 1
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl create_perllibst_h.pl
d1052 1
a1052 1
	$(BUILDOPT) CCTYPE=$(CCTYPE) > perldll.def
d1055 1
a1055 6
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0d32$(o) $(PERLDLL_OBJ),$@@,, \
	        $(shell @@type Extensions_static) $(LIBFILES),perldll.def)
	$(IMPLIB) $*.lib $@@
.ELIF "$(CCTYPE)" == "GCC"
d1079 1
a1079 5
.IF "$(CCTYPE)" == "BORLAND"
	$(LIB32) $(LIB_FLAGS) $@@ \
	    @@$(mktmp $(shell @@type Extensions_static) \
		$(PERLDLL_OBJ))
.ELIF "$(CCTYPE)" == "GCC"
d1117 1
a1117 4
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(X2P_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
d1126 3
a1128 1
$(MINIDIR)\globals$(o) : $(UUDMAP_H) $(BITCOUNT_H)
d1130 4
a1133 2
$(UUDMAP_H) $(BITCOUNT_H) : $(GENUUDMAP)
	$(GENUUDMAP) $(UUDMAP_H) $(BITCOUNT_H)
d1136 1
a1136 4
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(GENUUDMAP_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
d1158 1
a1158 5
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(PERLEXE_OBJ),$@@,, \
		$(PERLIMPLIB) $(LIBFILES),,$(PERLEXE_RES))
.ELIF "$(CCTYPE)" == "GCC"
d1162 1
a1162 1
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(BLINK_FLAGS) \
d1170 1
a1170 6
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(PERLEXEST_OBJ),$@@,, \
		$(shell @@type Extensions_static) $(PERLSTATICLIB) $(LIBFILES),, \
		$(PERLEXE_RES))
.ELIF "$(CCTYPE)" == "GCC"
d1176 1
a1176 1
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(BLINK_FLAGS) \
d1188 1
a1188 1
Extensions : ..\make_ext.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
d1192 1
a1192 1
Extensions_reonly : ..\make_ext.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
d1196 1
a1196 1
Extensions_static : ..\make_ext.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
d1201 1
a1201 1
Extensions_nonxs : ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
d1205 1
a1205 1
$(DYNALOADER) : ..\make_ext.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
d1221 1
a1221 1
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse
a1228 1
	copy ..\README.apollo   ..\pod\perlapollo.pod
d1264 1
a1264 2
	copy ..\pod\perl5122delta.pod ..\pod\perldelta.pod
	cd ..\pod && $(MAKE) -f ..\win32\pod.mak converters
d1270 1
a1270 1
	$(PERLEXE) -f ..\pod\buildtoc --build-toc -q
d1297 1
d1351 1
d1355 2
a1356 2
	-cd $(PODDIR) && del /f *.html *.bat \
	    perlaix.pod perlamiga.pod perlapi.pod perlapollo.pod \
d1358 8
a1365 11
	    perlcygwin.pod perldelta.pod perldgux.pod perldos.pod \
	    perlepoc.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmacos.pod perlmacosx.pod perlmodlib.pod \
	    perlmpeix.pod perlnetware.pod perlopenbsd.pod perlos2.pod \
	    perlos390.pod perlos400.pod perlplan9.pod perlqnx.pod \
	    perlriscos.pod perlsolaris.pod perlsymbian.pod perltoc.pod \
	    perltru64.pod perltw.pod perluniprops.pod perluts.pod \
	    perlvmesa.pod perlvos.pod perlwin32.pod \
	    pod2html pod2latex pod2man pod2text pod2usage \
	    podchecker podselect
d1367 2
a1368 2
	    perldoc perlivp dprofpp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove ptar ptardiff cpanp-run-perl cpanp cpan2dist shasum corelist config_data
a1383 1
	-if exist pod2htmi.tmp del pod2htmi.tmp
d1389 1
a1389 1
installbare : $(RIGHTMAKE) utils ..\pod\perltoc.pod
d1406 1
a1406 1
	..\$(MINIPERL) -I.. -I..\..\cpan\Cwd\lib -I..\..\cpan\Cwd mktables -P ..\..\pod -maketest -makelist -p
a1411 3
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
a1412 1
.ENDIF
d1417 1
a1417 1
test-prep : all utils
a1419 3
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
d1421 1
a1421 1
.ENDIF
d1423 20
a1442 7
.IF "$(GCC_4XX)" == "define"
	$(XCOPY) $(GCCHELPERDLL) ..\t\$(NULL)
.ENDIF
.ENDIF

test : $(RIGHTMAKE) test-prep
	cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1456 2
a1457 1
	set PERL_SKIP_TTY_TEST=1 && \
d1460 1
a1460 1
_test : $(RIGHTMAKE)
a1462 3
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
d1464 2
a1465 2
.ENDIF
	cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1483 1
a1483 1
	-@@erase $(GENUUDMAP) $(GENUUDMAP_OBJ) $(UUDMAP_H) $(BITCOUNT_H)
@


1.12
log
@Merge in perl 5.10.1; part two
@
text
@d1 1757
a1757 1695
#
# Makefile to build perl on Windows NT using DMAKE.
# Supported compilers:
#	Visual C++ 2.0 or later
#	Borland C++ 5.02 or later
#	MinGW with gcc-2.95.2 or later
#	MS Platform SDK 64-bit compiler and tools **experimental**
#
# This is set up to build a perl.exe that runs off a shared library
# (perl510.dll).  Also makes individual DLLs for the XS extensions.
#

##
## Make sure you read README.win32 *before* you mess with anything here!
##

##
## Build configuration.  Edit the values below to suit your needs.
##

#
# Set these to wherever you want "dmake install" to put your
# newly built perl.
#
INST_DRV	*= c:
INST_TOP	*= $(INST_DRV)\perl

#
# Comment this out if you DON'T want your perl installation to be versioned.
# This means that the new installation will overwrite any files from the
# old installation at the same INST_TOP location.  Leaving it enabled is
# the safest route, as perl adds the extra version directory to all the
# locations it installs files to.  If you disable it, an alternative
# versioned installation can be obtained by setting INST_TOP above to a
# path that includes an arbitrary version string.
#
#INST_VER	*= \5.10.1

#
# Comment this out if you DON'T want your perl installation to have
# architecture specific components.  This means that architecture-
# specific files will be installed along with the architecture-neutral
# files.  Leaving it enabled is safer and more flexible, in case you
# want to build multiple flavors of perl and install them together in
# the same location.  Commenting it out gives you a simpler
# installation that is easier to understand for beginners.
#
#INST_ARCH	*= \$(ARCHNAME)

#
# Uncomment this if you want perl to run
# 	$Config{sitelibexp}\sitecustomize.pl
# before anything else.  This script can then be set up, for example,
# to add additional entries to @@INC.
#
#USE_SITECUST	*= define

#
# uncomment to enable multiple interpreters.  This is need for fork()
# emulation and for thread support.
#
USE_MULTI	*= define

#
# Interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  
# This needs USE_MULTI above.
#
USE_ITHREADS	*= define

#
# uncomment to enable the implicit "host" layer for all system calls
# made by perl.  This needs USE_MULTI above.  
# This is also needed to get fork().
#
USE_IMP_SYS	*= define

#
# Comment out next assign to disable perl's I/O subsystem and use compiler's 
# stdio for IO - depending on your compiler vendor and run time library you may 
# then get a number of fails from make test i.e. bugs - complain to them not us ;-). 
# You will also be unable to take full advantage of perl5.8's support for multiple 
# encodings and may see lower IO performance. You have been warned.
USE_PERLIO	*= define

#
# Comment this out if you don't want to enable large file support for
# some reason.  Should normally only be changed to maintain compatibility
# with an older release of perl.
USE_LARGE_FILES	*= define

#
# uncomment exactly one of the following
#
# Visual C++ 2.x
#CCTYPE		*= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		*= MSVC
# Visual C++ 6.x (aka Visual C++ 98)
#CCTYPE		*= MSVC60
# Visual C++ Toolkit 2003 (aka Visual C++ 7.x) (free command-line tools)
#CCTYPE		*= MSVC70FREE
# Visual C++ .NET 2003 (aka Visual C++ 7.x) (full version)
#CCTYPE		*= MSVC70
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
#CCTYPE		*= MSVC80FREE
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
#CCTYPE		*= MSVC80
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
#CCTYPE		*= MSVC90FREE
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
#CCTYPE		*= MSVC90
# Borland 5.02 or later
#CCTYPE		*= BORLAND
# MinGW with gcc-2.95.2 or later
CCTYPE		*= GCC

#
# uncomment this if your Borland compiler is older than v5.4.
#BCCOLD		*= define
#
# uncomment this if you want to use Borland's VCL as your CRT
#BCCVCL		*= define

#
# uncomment this if you are compiling under Windows 95/98 and command.com
# (not needed if you're running under 4DOS/NT 6.01 or later)
#IS_WIN95	*= define

#
# uncomment next line if you want debug version of perl (big,slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		*= Debug

#
# uncomment to enable use of PerlCRT.DLL when using the Visual C compiler.
# It has patches that fix known bugs in older versions of MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3 or later.
# Get it from CPAN at http://www.cpan.org/authors/id/D/DO/DOUGL/
# and follow the directions in the package to install.
#
# Not recommended if you have VC 6.x and you're not running Windows 9x.
#
#USE_PERLCRT	*= define

#
# uncomment to enable linking with setargv.obj under the Visual C
# compiler. Setting this options enables perl to expand wildcards in
# arguments, but it may be harder to use alternate methods like
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
#
#USE_SETARGV	*= define

#
# if you want to have the crypt() builtin function implemented, leave this or
# CRYPT_LIB uncommented.  The fcrypt.c file named here contains a suitable
# version of des_fcrypt().
#
CRYPT_SRC	*= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	*= fcrypt.lib

#
# set this if you wish to use perl's malloc
# WARNING: Turning this on/off WILL break binary compatibility with extensions
# you may have compiled with/without it.  Be prepared to recompile all
# extensions if you change the default.  Currently, this cannot be enabled
# if you ask for USE_IMP_SYS above.
#
#PERL_MALLOC	*= define

#
# set this to enable debugging mstats
# This must be enabled to use the Devel::Peek::mstat() function.  This cannot
# be enabled without PERL_MALLOC as well.
#
#DEBUG_MSTATS	*= define

#
# set this to additionally provide a statically linked perl-static.exe.
# Note that dynamic loading will not work with this perl, so you must
# include required modules statically using the STATIC_EXT or ALL_STATIC
# variables below. A static library perl510s.lib will also be created.
# Ordinary perl.exe is not affected by this option.
#
#BUILD_STATIC	*= define

#
# in addition to BUILD_STATIC the option ALL_STATIC makes *every*
# extension get statically built
# This will result in a very large perl executable, but the main purpose
# is to have proper linking set so as to be able to create miscellaneous
# executables with different built-in extensions
#
#ALL_STATIC	*= define

#
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
.IF "$(CCTYPE)" == "BORLAND"
CCHOME		*= C:\Borland\BCC55
.ELIF "$(CCTYPE)" == "GCC"
CCHOME		*= C:\MinGW
.ELSE
CCHOME		*= $(MSVCDIR)
.ENDIF
CCINCDIR	*= $(CCHOME)\include
CCLIBDIR	*= $(CCHOME)\lib

#
# Additional compiler flags can be specified here.
#
BUILDOPT	*= $(BUILDOPTEXTRA)

#
# Adding -DPERL_HASH_SEED_EXPLICIT will disable randomization of Perl's
# internal hash function unless the PERL_HASH_SEED environment variable is set.
# Alternatively, adding -DNO_HASH_SEED will completely disable the
# randomization feature. 
# The latter is required to maintain binary compatibility with Perl 5.8.0.
#
#BUILDOPT	+= -DPERL_HASH_SEED_EXPLICIT
#BUILDOPT	+= -DNO_HASH_SEED

#
# This should normally be disabled.  Adding -DPERL_POLLUTE enables support
# for old symbols by default, at the expense of extreme pollution.  You most
# probably just want to build modules that won't compile with
#         perl Makefile.PL POLLUTE=1
# instead of enabling this.  Please report such modules to the respective
# authors.
#
#BUILDOPT	+= -DPERL_POLLUTE

#
# This should normally be disabled.  Enabling it will disable the File::Glob
# implementation of CORE::glob.
#
#BUILDOPT	+= -DPERL_EXTERNAL_GLOB

#
# This should normally be disabled.  Enabling it causes perl to read scripts
# in text mode (which is the 5.005 behavior) and will break ByteLoader.
#
#BUILDOPT	+= -DPERL_TEXTMODE_SCRIPTS

#
# specify semicolon-separated list of extra directories that modules will
# look for libraries (spaces in path names need not be quoted)
#
EXTRALIBDIRS	*=

#
# set this to point to cmd.exe (only needed if you use some
# alternate shell that doesn't grok cmd.exe style commands)
#
#SHELL		*= g:\winnt\system32\cmd.exe

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#
#EMAIL		*=

##
## Build configuration ends.
##

##################### CHANGE THESE ONLY IF YOU MUST #####################

.IF "$(CRYPT_SRC)$(CRYPT_LIB)" == ""
D_CRYPT		= undef
.ELSE
D_CRYPT		= define
CRYPT_FLAG	= -DHAVE_DES_FCRYPT
.ENDIF

PERL_MALLOC	*= undef
DEBUG_MSTATS	*= undef

USE_SITECUST	*= undef
USE_MULTI	*= undef
USE_ITHREADS	*= undef
USE_IMP_SYS	*= undef
USE_PERLIO	*= undef
USE_LARGE_FILES	*= undef
USE_PERLCRT	*= undef

.IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
.ENDIF

.IF "$(PERL_MALLOC)" == "undef"
DEBUG_MSTATS	= undef
.ENDIF

.IF "$(DEBUG_MSTATS)" == "define"
BUILDOPT	+= -DPERL_DEBUGGING_MSTATS
.ENDIF

.IF "$(USE_IMP_SYS) $(USE_MULTI)" == "define undef"
USE_MULTI	!= define
.ENDIF

.IF "$(USE_ITHREADS) $(USE_MULTI)" == "define undef"
USE_MULTI	!= define
.ENDIF

.IF "$(USE_SITECUST)" == "define"
BUILDOPT	+= -DUSE_SITECUSTOMIZE
.ENDIF

.IF "$(USE_MULTI)" != "undef"
BUILDOPT	+= -DPERL_IMPLICIT_CONTEXT
.ENDIF

.IF "$(USE_IMP_SYS)" != "undef"
BUILDOPT	+= -DPERL_IMPLICIT_SYS
.ENDIF

.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITEW6432 WIN64

PROCESSOR_ARCHITECTURE *= x86

.IF "$(WIN64)" == ""
# When we are running from a 32bit cmd.exe on AMD64 then
# PROCESSOR_ARCHITECTURE is set to x86 and PROCESSOR_ARCHITEW6432
# is set to AMD64
.IF "$(PROCESSOR_ARCHITEW6432)" != ""
PROCESSOR_ARCHITECTURE	!= $(PROCESSOR_ARCHITEW6432)
WIN64			= define
.ELIF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITECTURE)" == "IA64"
WIN64			= define
.ELSE
WIN64			= undef
.ENDIF
.ENDIF

ARCHITECTURE = $(PROCESSOR_ARCHITECTURE)
.IF "$(ARCHITECTURE)" == "AMD64"
ARCHITECTURE	= x64
.ENDIF
.IF "$(ARCHITECTURE)" == "IA64"
ARCHITECTURE	= ia64
.ENDIF

.IF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-multi
.ELSE
.IF "$(USE_PERLIO)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-perlio
.ELSE
ARCHNAME	= MSWin32-$(ARCHITECTURE)
.ENDIF
.ENDIF

.IF "$(USE_ITHREADS)" == "define"
ARCHNAME	!:= $(ARCHNAME)-thread
.ENDIF

# Visual C++ 98, .NET 2003, 2005 and 2008 specific.
# VC++ 6.x, 7.x, 8.x and 9.x can load DLL's on demand.  Makes the test suite run
# in about 10% less time.  (The free version of 7.x can't do this, but the free
# versions of 8.x and 9.x can.)
.IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"     || \
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" ||
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DELAYLOAD	*= -DELAYLOAD:ws2_32.dll delayimp.lib
.ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest

ARCHDIR		= ..\lib\$(ARCHNAME)
COREDIR		= ..\lib\CORE
AUTODIR		= ..\lib\auto
LIBDIR		= ..\lib
EXTDIR		= ..\ext
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\ExtUtils
HTMLDIR		= .\html

#
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_BIN	= $(INST_SCRIPT)$(INST_ARCH)
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_ARCHLIB	= $(INST_LIB)$(INST_ARCH)
INST_COREDIR	= $(INST_ARCHLIB)\CORE
INST_HTML	= $(INST_TOP)$(INST_VER)\html

#
# Programs to compile, build .lib files and link
#

.USESHELL :

.IF "$(CCTYPE)" == "BORLAND"

CC		= bcc32
.IF "$(BCCOLD)" != "define"
LINK32		= ilink32
.ELSE
LINK32		= tlink32
.ENDIF
LIB32		= tlib /a /P128
IMPLIB		= implib -c
RSC		= brcc32

#
# Options
#
INCLUDES	= -I$(COREDIR) -I.\include -I. -I.. -I"$(CCINCDIR)"
#PCHFLAGS	= -H -Hc -H=c:\temp\bcmoduls.pch
DEFINES		= -DWIN32 $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -P

LIBC		= cw32mti.lib

# same libs as MSVC, except Borland doesn't have oldnames.lib
LIBFILES	= $(CRYPT_LIB) \
		kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib \
		import32.lib $(LIBC)

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -v -D_RTLDLL -DDEBUGGING
LINK_DBG	= -v
.ELSE
OPTIMIZE	= -O2 -D_RTLDLL
LINK_DBG	=
.ENDIF

EXTRACFLAGS	=
CFLAGS		= -w -g0 -tWM -tWD $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= $(LINK_DBG) -x -L"$(INST_COREDIR)" -L"$(CCLIBDIR)" \
		-L"$(CCLIBDIR)\PSDK"
OBJOUT_FLAG	= -o
EXEOUT_FLAG	= -e
LIBOUT_FLAG	=
.IF "$(BCCOLD)" != "define"
LINK_FLAGS	+= -Gn
DEFINES  += -D_MT -D__USELOCALES__ -D_WIN32_WINNT=0x0410
.END
.IF "$(BCCVCL)" == "define"
LIBC		= cp32mti.lib vcl.lib vcl50.lib vclx50.lib vcle50.lib
LINK_FLAGS	+= -L"$(CCLIBDIR)\Release"
.END


.ELIF "$(CCTYPE)" == "GCC"

CC		= gcc
LINK32		= g++
LIB32		= ar rc
IMPLIB		= dlltool
RSC		= windres

i = .i
o = .o
a = .a

#
# Options
#

INCLUDES	= -I.\include -I. -I.. -I$(COREDIR)
DEFINES		= -DWIN32 $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -xc++

# Current releases of MinGW 5.1.4 (as of 11-Aug-2009) will fail to link
# correctly if -lmsvcrt is specified explicitly.
LIBC		=
#LIBC		= -lmsvcrt

# same libs as MSVC
LIBFILES	= $(CRYPT_LIB) $(LIBC) \
		  -lmoldname -lkernel32 -luser32 -lgdi32 \
		  -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 \
		  -loleaut32 -lnetapi32 -luuid -lws2_32 -lmpr \
		  -lwinmm -lversion -lodbc32 -lodbccp32

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -g -O2 -DDEBUGGING
LINK_DBG	= -g
.ELSE
OPTIMIZE	= -s -O2
LINK_DBG	= -s
.ENDIF

EXTRACFLAGS	=
CFLAGS		= $(INCLUDES) $(DEFINES) $(LOCDEFS) $(OPTIMIZE)
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)" -L"$(CCLIBDIR)"
OBJOUT_FLAG	= -o
EXEOUT_FLAG	= -o
LIBOUT_FLAG	=

# NOTE: we assume that GCC uses MSVCRT.DLL
# See comments about PERL_MSVCRT_READFIX in the "cl" compiler section below.
BUILDOPT	+= -fno-strict-aliasing -DPERL_MSVCRT_READFIX

.ELSE

CC		= cl
LINK32		= link
LIB32		= $(LINK32) -lib
RSC		= rc

#
# Options
#

INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -TP -EHsc

.IF "$(USE_PERLCRT)" != "define"
LIBC	= msvcrt.lib
.ELSE
LIBC	= PerlCRT.lib
.ENDIF

.IF  "$(CFG)" == "Debug"
.IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE	= -Od -MD -Z7 -DDEBUGGING
.ELSE
OPTIMIZE	= -O1 -MD -Zi -DDEBUGGING
.ENDIF
LINK_DBG	= -debug
.ELSE
OPTIMIZE	= -MD -Zi -DNDEBUG
# we enable debug symbols in release builds also
LINK_DBG	= -debug -opt:ref,icf
# you may want to enable this if you want COFF symbols in the executables
# in addition to the PDB symbols.  The default Dr. Watson that ships with
# Windows can use the the former but not latter.  The free WinDbg can be
# installed to get better stack traces from just the PDB symbols, so we
# avoid the bloat of COFF symbols by default.
#LINK_DBG	= $(LINK_DBG) -debugtype:both
.IF "$(WIN64)" == "define"
# enable Whole Program Optimizations (WPO) and Link Time Code Generation (LTCG)
OPTIMIZE	+= -Ox -GL
LINK_DBG	+= -ltcg
.ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86
OPTIMIZE	+= -O1
#OPTIMIZE	+= -O2
.ENDIF
.ENDIF

.IF "$(WIN64)" == "define"
DEFINES		+= -DWIN64 -DCONSERVATIVE
OPTIMIZE	+= -Wp64 -fp:precise
.ENDIF

# For now, silence VC++ 8.x's and 9.x's warnings about "unsafe" CRT functions
# and POSIX CRT function names being deprecated.
.IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DEFINES		+= -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
.ENDIF

# Use the MSVCRT read() fix if the PerlCRT was not chosen, but only when using
# VC++ 6.x or earlier. Later versions use MSVCR70.dll, MSVCR71.dll, etc, which
# do not require the fix.
.IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC" || "$(CCTYPE)" == "MSVC60" 
.IF "$(USE_PERLCRT)" != "define"
BUILDOPT	+= -DPERL_MSVCRT_READFIX
.ENDIF
.ENDIF

LIBBASEFILES	= $(CRYPT_LIB) \
		oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib

# The 64 bit Platform SDK compilers contain a runtime library that doesn't
# include the buffer overrun verification code used by the /GS switch.
# Since the code links against libraries that are compiled with /GS, this
# "security cookie verification" must be included via bufferoverlow.lib.
.IF "$(WIN64)" == "define"
LIBBASEFILES    = $(LIBBASEFILES) bufferoverflowU.lib
.ENDIF

# we add LIBC here, since we may be using PerlCRT.dll
LIBFILES	= $(LIBBASEFILES) $(LIBC)

EXTRACFLAGS	= -nologo -GF -W3
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) \
		-libpath:"$(INST_COREDIR)" \
		-machine:$(PROCESSOR_ARCHITECTURE)
LIB_FLAGS	= -nologo
OBJOUT_FLAG	= -Fo
EXEOUT_FLAG	= -Fe
LIBOUT_FLAG	= /out:

.ENDIF

CFLAGS_O	= $(CFLAGS) $(BUILDOPT)

# used to allow local linking flags that are not propogated into Config.pm,
# currently unused
#   -- BKS, 12-12-1999
PRIV_LINK_FLAGS	*=
BLINK_FLAGS	= $(PRIV_LINK_FLAGS) $(LINK_FLAGS)

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

# Some old dmakes (including Sarathy's one at
# http://search.cpan.org/CPAN/authors/id/G/GS/GSAR/dmake-4.1pl1-win32.zip)
# don't support logical OR (||) or logical AND (&&) in conditional
# expressions and hence don't process this makefile correctly. Determine
# whether this is the case so that we can give the user an error message.
.IF 1 == 1 || 1 == 1
NEWDMAKE = define
.ELSE
NEWDMAKE = undef
.ENDIF

o *= .obj
a *= .lib

LKPRE		= INPUT (
LKPOST		= )

#
# Rules
#

.SUFFIXES : .c .i $(o) .dll $(a) .exe .rc .res

.c$(o):
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $<

.c.i:
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) -E $< >$@@

.y.c:
	$(NOOP)

$(o).dll:
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(BLINK_FLAGS) c0d32$(o) $<,$@@,,$(LIBFILES),$(*B).def
	$(IMPLIB) $(*B).lib $@@
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -o $@@ $(BLINK_FLAGS) $< $(LIBFILES)
	$(IMPLIB) --input-def $(*B).def --output-lib $(*B).a $@@
.ELSE
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(BLINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
	$(EMBED_DLL_MANI)
.ENDIF

.rc.res:
.IF "$(CCTYPE)" == "GCC"
	$(RSC) --use-temp-file --include-dir=. --include-dir=.. -O COFF -i $< -o $@@
.ELSE
	$(RSC) -i.. $<
.ENDIF

#
# various targets
MINIPERL	= ..\miniperl.exe
MINIDIR		= .\mini
PERLEXE		= ..\perl.exe
WPERLEXE	= ..\wperl.exe
PERLEXESTATIC	= ..\perl-static.exe
GLOBEXE		= ..\perlglob.exe
CONFIGPM	= ..\lib\Config.pm ..\lib\Config_heavy.pl
MINIMOD		= ..\lib\ExtUtils\Miniperl.pm
X2P		= ..\x2p\a2p.exe
GENUUDMAP	= ..\generate_uudmap.exe
.IF "$(BUILD_STATIC)" == "define"
PERLSTATIC	= static
.ELSE
PERLSTATIC	= 
.ENDIF

# Unicode data files generated by mktables
UNIDATAFILES	 = ..\lib\unicore\Canonical.pl ..\lib\unicore\Exact.pl \
		   ..\lib\unicore\Properties ..\lib\unicore\Decomposition.pl \
		   ..\lib\unicore\CombiningClass.pl ..\lib\unicore\Name.pl \
		   ..\lib\unicore\PVA.pl

# Directories of Unicode data files generated by mktables
UNIDATADIR1	= ..\lib\unicore\To
UNIDATADIR2	= ..\lib\unicore\lib

PERLEXE_ICO	= .\perlexe.ico
PERLEXE_RES	= .\perlexe.res
PERLDLL_RES	=

# Nominate a target which causes extensions to be re-built
# This used to be $(PERLEXE), but at worst it is the .dll that they depend
# on and really only the interface - i.e. the .def file used to export symbols
# from the .dll
PERLDEP = perldll.def


PL2BAT		= bin\pl2bat.pl
GLOBBAT		= bin\perlglob.bat

UTILS		=			\
		..\utils\h2ph		\
		..\utils\splain		\
		..\utils\dprofpp	\
		..\utils\perlbug	\
		..\utils\pl2pm 		\
		..\utils\c2ph		\
		..\utils\pstruct	\
		..\utils\h2xs		\
		..\utils\perldoc	\
		..\utils\perlivp	\
		..\utils\libnetcfg	\
		..\utils\enc2xs		\
		..\utils\piconv		\
		..\utils\config_data	\
		..\utils\corelist	\
		..\utils\cpan		\
		..\utils\xsubpp		\
		..\utils\prove		\
		..\utils\ptar		\
		..\utils\ptardiff	\
		..\utils\cpanp-run-perl	\
		..\utils\cpanp	\
		..\utils\cpan2dist	\
		..\utils\shasum		\
		..\utils\instmodsh	\
		..\pod\pod2html		\
		..\pod\pod2latex	\
		..\pod\pod2man		\
		..\pod\pod2text		\
		..\pod\pod2usage	\
		..\pod\podchecker	\
		..\pod\podselect	\
		..\x2p\find2perl	\
		..\x2p\psed		\
		..\x2p\s2p		\
		bin\exetype.pl		\
		bin\runperl.pl		\
		bin\pl2bat.pl		\
		bin\perlglob.pl		\
		bin\search.pl

.IF "$(CCTYPE)" == "BORLAND"

CFGSH_TMPL	= config.bc
CFGH_TMPL	= config_H.bc

.ELIF "$(CCTYPE)" == "GCC"

CFGSH_TMPL	= config.gc
CFGH_TMPL	= config_H.gc
PERLIMPLIB	= ..\libperl510$(a)
PERLSTATICLIB	= ..\libperl510s$(a)

.ELSE

.IF "$(WIN64)" == "define"
CFGSH_TMPL	= config.vc64
CFGH_TMPL	= config_H.vc64
.ELSE
CFGSH_TMPL	= config.vc
CFGH_TMPL	= config_H.vc
.ENDIF

.ENDIF

# makedef.pl must be updated if this changes, and this should normally
# only change when there is an incompatible revision of the public API.
PERLIMPLIB	*= ..\perl510$(a)
PERLSTATICLIB	*= ..\perl510s$(a)
PERLDLL		= ..\perl510.dll

XCOPY		= xcopy /f /r /i /d /y
RCOPY		= xcopy /f /r /i /e /d /y
NOOP		= @@rem

#
# filenames given to xsubpp must have forward slashes (since it puts
# full pathnames in #line strings)
XSUBPP		= ..\$(MINIPERL) -I..\..\lib ..\$(EXTUTILSDIR)\xsubpp \
		-C++ -prototypes

MICROCORE_SRC	=		\
		..\av.c		\
		..\deb.c	\
		..\doio.c	\
		..\doop.c	\
		..\dump.c	\
		..\globals.c	\
		..\gv.c		\
		..\mro.c	\
		..\hv.c		\
		..\locale.c	\
		..\mathoms.c    \
		..\mg.c		\
		..\numeric.c	\
		..\op.c		\
		..\pad.c	\
		..\perl.c	\
		..\perlapi.c	\
		..\perly.c	\
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_hot.c	\
		..\pp_pack.c	\
		..\pp_sort.c	\
		..\pp_sys.c	\
		..\reentr.c	\
		..\regcomp.c	\
		..\regexec.c	\
		..\run.c	\
		..\scope.c	\
		..\sv.c		\
		..\taint.c	\
		..\toke.c	\
		..\universal.c	\
		..\utf8.c	\
		..\util.c	\
		..\xsutils.c

EXTRACORE_SRC	+= perllib.c

.IF "$(PERL_MALLOC)" == "define"
EXTRACORE_SRC	+= ..\malloc.c
.ENDIF

EXTRACORE_SRC	+= ..\perlio.c

WIN32_SRC	=		\
		.\win32.c	\
		.\win32sck.c	\
		.\win32thread.c

# We need this for miniperl build unless we override canned 
# config.h #define building mini\*
#.IF "$(USE_PERLIO)" == "define"
WIN32_SRC	+= .\win32io.c
#.ENDIF

.IF "$(CRYPT_SRC)" != ""
WIN32_SRC	+= .\$(CRYPT_SRC)
.ENDIF

DLL_SRC		= $(DYNALOADER).c

X2P_SRC		=		\
		..\x2p\a2p.c	\
		..\x2p\hash.c	\
		..\x2p\str.c	\
		..\x2p\util.c	\
		..\x2p\walk.c

CORE_NOCFG_H	=		\
		..\av.h		\
		..\cop.h	\
		..\cv.h		\
		..\dosish.h	\
		..\embed.h	\
		..\form.h	\
		..\gv.h		\
		..\handy.h	\
		..\hv.h		\
		..\iperlsys.h	\
		..\mg.h		\
		..\nostdio.h	\
		..\op.h		\
		..\opcode.h	\
		..\perl.h	\
		..\perlapi.h	\
		..\perlsdio.h	\
		..\perlsfio.h	\
		..\perly.h	\
		..\pp.h		\
		..\proto.h	\
		..\regcomp.h	\
		..\regexp.h	\
		..\scope.h	\
		..\sv.h		\
		..\thread.h	\
		..\unixish.h	\
		..\utf8.h	\
		..\util.h	\
		..\warnings.h	\
		..\XSUB.h	\
		..\EXTERN.h	\
		..\perlvars.h	\
		..\intrpvar.h	\
		.\include\dirent.h	\
		.\include\netdb.h	\
		.\include\sys\socket.h	\
		.\win32.h

CORE_H		= $(CORE_NOCFG_H) .\config.h ..\git_version.h

UUDMAP_H	= ..\uudmap.h

MICROCORE_OBJ	= $(MICROCORE_SRC:db:+$(o))
CORE_OBJ	= $(MICROCORE_OBJ) $(EXTRACORE_SRC:db:+$(o))
WIN32_OBJ	= $(WIN32_SRC:db:+$(o))
MINICORE_OBJ	= $(MINIDIR)\{$(MICROCORE_OBJ:f) miniperlmain$(o) perlio$(o)}
MINIWIN32_OBJ	= $(MINIDIR)\{$(WIN32_OBJ:f)}
MINI_OBJ	= $(MINICORE_OBJ) $(MINIWIN32_OBJ)
DLL_OBJ		= $(DLL_SRC:db:+$(o))
X2P_OBJ		= $(X2P_SRC:db:+$(o))
GENUUDMAP_OBJ	= $(GENUUDMAP:db:+$(o))

PERLDLL_OBJ	= $(CORE_OBJ)
PERLEXE_OBJ	= perlmain$(o)
PERLEXEST_OBJ	= perlmainst$(o)

PERLDLL_OBJ	+= $(WIN32_OBJ) $(DLL_OBJ)

.IF "$(USE_SETARGV)" != ""
SETARGV_OBJ	= setargv$(o)
.ENDIF

.IF "$(ALL_STATIC)" == "define"
# some exclusions, unfortunately, until fixed:
#  - Win32 extension contains overlapped symbols with win32.c (BUG!)
#  - MakeMaker isn't capable enough for SDBM_File (smaller bug)
#  - Encode (encoding search algorithm relies on shared library?)
STATIC_EXT	= * !Win32 !SDBM_File !Encode
.ELSE
# specify static extensions here, for example:
#STATIC_EXT	= Cwd Compress/Raw/Zlib
STATIC_EXT	= Win32CORE
.ENDIF

DYNALOADER	= $(EXTDIR)\DynaLoader\DynaLoader

# vars must be separated by "\t+~\t+", since we're using the tempfile
# version of config_sh.pl (we were overflowing someone's buffer by
# trying to fit them all on the command line)
#	-- BKS 10-17-1999
CFG_VARS	=					\
		INST_DRV=$(INST_DRV)		~	\
		INST_TOP=$(INST_TOP)	~	\
		INST_VER=$(INST_VER)	~	\
		INST_ARCH=$(INST_ARCH)		~	\
		archname=$(ARCHNAME)		~	\
		cc=$(CC)			~	\
		ld=$(LINK32)			~	\
		ccflags=$(EXTRACFLAGS) $(OPTIMIZE) $(DEFINES) $(BUILDOPT)	~	\
		cf_email=$(EMAIL)		~	\
		d_crypt=$(D_CRYPT)		~	\
		d_mymalloc=$(PERL_MALLOC)	~	\
		libs=$(LIBFILES:f)		~	\
		incpath=$(CCINCDIR)	~	\
		libperl=$(PERLIMPLIB:f)		~	\
		libpth=$(CCLIBDIR);$(EXTRALIBDIRS)	~	\
		libc=$(LIBC)			~	\
		make=dmake			~	\
		_o=$(o)				~	\
		obj_ext=$(o)			~	\
		_a=$(a)				~	\
		lib_ext=$(a)			~	\
		static_ext=$(STATIC_EXT)	~	\
		usethreads=$(USE_ITHREADS)	~	\
		useithreads=$(USE_ITHREADS)	~	\
		usemultiplicity=$(USE_MULTI)	~	\
		useperlio=$(USE_PERLIO)		~	\
		uselargefiles=$(USE_LARGE_FILES)	~	\
		usesitecustomize=$(USE_SITECUST)	~	\
		LINK_FLAGS=$(LINK_FLAGS)	~	\
		optimize=$(OPTIMIZE)

#
# set up targets varying between Win95 and WinNT builds
#

.IF "$(IS_WIN95)" == "define"
MK2 		= .\makefile.95
RIGHTMAKE	= __switch_makefiles
.ELSE
MK2		= __not_needed
RIGHTMAKE	=
.ENDIF

.IMPORT .IGNORE : SystemRoot windir

# Don't just .IMPORT OS from the environment because dmake sets OS itself.
ENV_OS=$(subst,OS=, $(shell @@set OS))

.IF "$(ENV_OS)" == "Windows_NT"
ODBCCP32_DLL = $(SystemRoot)\system32\odbccp32.dll
.ELSE
ODBCCP32_DLL = $(windir)\system\odbccp32.dll
.ENDIF

#
# Top targets
#

all : CHECKDMAKE .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL) $(MK2)	\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort		\
	$(PERLEXE) $(X2P) Extensions $(PERLSTATIC)

..\regcharclass.h : ..\Porting\regcharclass.pl
	cd .. && miniperl Porting\regcharclass.pl && cd win32

regnodes : ..\regnodes.h

..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h	

..\regexec$(o) : ..\regnodes.h ..\regcharclass.h

reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL) $(MK2)	\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)		\
	$(X2P) Extensions_reonly

$(DYNALOADER)$(o) : $(DYNALOADER).c $(CORE_H) $(EXTDIR)\DynaLoader\dlutils.c

static: $(PERLEXESTATIC)

#----------------------------------------------------------------

#-------------------- BEGIN Win95 SPECIFIC ----------------------

# this target is a jump-off point for Win95
#  1. it switches to the Win95-specific makefile if it exists
#     (__do_switch_makefiles)
#  2. it prints a message when the Win95-specific one finishes (__done)
#  3. it then kills this makefile by trying to make __no_such_target

__switch_makefiles: __do_switch_makefiles __done __no_such_target

__do_switch_makefiles:
.IF "$(NOTFIRST)" != "true"
	if exist $(MK2) $(MAKE:s/-S//) -f $(MK2) $(MAKETARGETS) NOTFIRST=true
.ELSE
	$(NOOP)
.ENDIF

.IF "$(NOTFIRST)" != "true"
__done:
	@@echo Build process complete. Ignore any errors after this message.
	@@echo Run "dmake test" to test and "dmake install" to install

.ELSE
# dummy targets for Win95-specific makefile

__done:
	$(NOOP)

__no_such_target:
	$(NOOP)

.ENDIF

# This target is used to generate the new makefile (.\makefile.95) for Win95

.\makefile.95: .\makefile.mk
	$(MINIPERL) genmk95.pl makefile.mk $(MK2)

#--------------------- END Win95 SPECIFIC ---------------------

# a blank target for when builds don't need to do certain things
# this target added for Win95 port but used to keep the WinNT port able to
# use this file
__not_needed:
	$(NOOP)

CHECKDMAKE :
.IF "$(NEWDMAKE)" == "define"
	$(NOOP)
.ELSE
	@@echo Your dmake doesn't support ^|^| or ^&^& in conditional expressions.
	@@echo Please get the latest dmake from http://search.cpan.org/dist/dmake/
	@@exit 1
.ENDIF

$(GLOBEXE) : perlglob$(o)
.IF "$(CCTYPE)" == "BORLAND"
	$(CC) -c -w -v -tWM -I"$(CCINCDIR)" perlglob.c
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) c0x32$(o) perlglob$(o) \
	    "$(CCLIBDIR)\32BIT\wildargs$(o)",$@@,,import32.lib cw32mt.lib,
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) $(BLINK_FLAGS) -mconsole -o $@@ perlglob$(o) $(LIBFILES)
.ELSE
	$(LINK32) $(BLINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
	    perlglob$(o) setargv$(o)
	$(EMBED_EXE_MANI)
.ENDIF

perlglob$(o)  : perlglob.c

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

.\config.h : $(CFGH_TMPL) $(CORE_NOCFG_H)
	-del /f config.h
	copy $(CFGH_TMPL) config.h

..\git_version.h : $(MINIPERL) ..\make_patchnum.pl
	cd .. && miniperl -Ilib make_patchnum.pl

# make sure that we recompile perl.c if the git version changes
..\perl$(o) : ..\git_version.h

..\config.sh : config.w32 $(MINIPERL) config_sh.PL FindExt.pm
	$(MINIPERL) -I..\lib config_sh.PL --cfgsh-option-file \
	    $(mktmp $(CFG_VARS)) config.w32 > ..\config.sh

# this target is for when changes to the main config.sh happen.
# edit config.gc, then make perl using GCC in a minimal configuration (i.e.
# with MULTI, ITHREADS, IMP_SYS, LARGE_FILES, PERLIO and CRYPT off), then make
# this target to regenerate config_H.gc.
# unfortunately, some further manual editing is also then required to restore all
# the special _MSC_VER handling that is otherwise lost.
# repeat for config.bc and config_H.bc (using BORLAND), except that there is no
# _MSC_VER stuff in that case.
regen_config_h:
	$(MINIPERL) -I..\lib config_sh.PL --cfgsh-option-file $(mktmp $(CFG_VARS)) \
	    $(CFGSH_TMPL) > ..\config.sh
	cd .. && miniperl configpm
	-del /f $(CFGH_TMPL)
	-$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)"
	rename config.h $(CFGH_TMPL)

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
	cd .. && miniperl configpm
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(XCOPY) *.h $(COREDIR)\*.*
	$(XCOPY) ..\ext\re\re.pm $(LIBDIR)\*.*
	$(RCOPY) include $(COREDIR)\*.*
	$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)" \
	    || $(MAKE) $(MAKEMACROS) $(CONFIGPM) $(MAKEFILE)

$(MINIPERL) : $(MINIDIR) $(MINI_OBJ) $(CRTIPMLIBS)
.IF "$(CCTYPE)" == "BORLAND"
	if not exist $(CCLIBDIR)\PSDK\odbccp32.lib \
	    cd $(CCLIBDIR)\PSDK && implib odbccp32.lib $(ODBCCP32_DLL)
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(MINI_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -mconsole -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(MINI_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(MINI_OBJ))
	$(EMBED_EXE_MANI)
.ENDIF

$(MINIDIR) :
	if not exist "$(MINIDIR)" mkdir "$(MINIDIR)"

$(MINICORE_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*B).c

$(MINIWIN32_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $(*B).c

# -DPERL_IMPLICIT_SYS needs C++ for perllib.c
# rules wrapped in .IFs break Win9X build (we end up with unbalanced []s unless
# unless the .IF is true), so instead we use a .ELSE with the default.
# This is the only file that depends on perlhost.h, vmem.h, and vdir.h

perllib$(o)	: perllib.c .\perlhost.h .\vdir.h .\vmem.h
.IF "$(USE_IMP_SYS)" == "define"
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
.ELSE
	$(CC) -c -I. $(CFLAGS_O) $(OBJOUT_FLAG)$@@ perllib.c
.ENDIF

# 1. we don't want to rebuild miniperl.exe when config.h changes
# 2. we don't want to rebuild miniperl.exe with non-default config.h
# 3. we can't have miniperl.exe depend on git_version.h, as miniperl creates it
$(MINI_OBJ)	: $(CORE_NOCFG_H)

$(WIN32_OBJ)	: $(CORE_H)

$(CORE_OBJ)	: $(CORE_H)

$(DLL_OBJ)	: $(CORE_H)

$(X2P_OBJ)	: $(CORE_H)

perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl create_perllibst_h.pl
	$(MINIPERL) -I..\lib create_perllibst_h.pl
	$(MINIPERL) -w ..\makedef.pl PLATFORM=win32 $(OPTIMIZE) $(DEFINES) \
	$(BUILDOPT) CCTYPE=$(CCTYPE) > perldll.def

$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0d32$(o) $(PERLDLL_OBJ),$@@,, \
	        $(shell @@type Extensions_static) $(LIBFILES),perldll.def)
	$(IMPLIB) $*.lib $@@
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -mdll -o $@@ -Wl,--base-file -Wl,perl.base $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ) \
		$(shell @@type Extensions_static) \
		$(LIBFILES) $(LKPOST))
	dlltool --output-lib $(PERLIMPLIB) \
		--dllname $(PERLDLL:b).dll \
		--def perldll.def \
		--base-file perl.base \
		--output-exp perl.exp
	$(LINK32) -mdll -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ) \
		$(shell @@type Extensions_static) \
		$(LIBFILES) perl.exp $(LKPOST))
.ELSE
	$(LINK32) -dll -def:perldll.def -out:$@@ $(BLINK_FLAGS) \
	    @@Extensions_static \
	    @@$(mktmp -base:0x28000000 $(DELAYLOAD) $(LIBFILES) \
		$(PERLDLL_RES) $(PERLDLL_OBJ))
	$(EMBED_DLL_MANI)
.ENDIF
	$(XCOPY) $(PERLIMPLIB) $(COREDIR)

$(PERLSTATICLIB): Extensions_static
.IF "$(CCTYPE)" == "BORLAND"
	$(LIB32) $(LIB_FLAGS) $@@ \
	    @@$(mktmp $(shell @@type Extensions_static) \
		$(PERLDLL_OBJ))
.ELIF "$(CCTYPE)" == "GCC"
# XXX: It would be nice if MinGW's ar accepted a temporary file, but this
# doesn't seem to work:
#	$(LIB32) $(LIB_FLAGS) $@@ \
#	    $(mktmp $(LKPRE) $(shell @@type Extensions_static) \
#		$(PERLDLL_OBJ) $(LKPOST))
	$(LIB32) $(LIB_FLAGS) $@@ \
	    $(shell @@type Extensions_static) \
	    $(PERLDLL_OBJ)
.ELSE
	$(LIB32) $(LIB_FLAGS) -out:$@@ @@Extensions_static \
	    @@$(mktmp $(PERLDLL_OBJ))
.ENDIF
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)

$(PERLEXE_ICO): $(MINIPERL) ..\uupacktool.pl $(PERLEXE_ICO).packd
	$(MINIPERL) -I..\lib ..\uupacktool.pl -u $(PERLEXE_ICO).packd $(PERLEXE_ICO)

$(PERLEXE_RES): perlexe.rc $(PERLEXE_ICO)

$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd .. && miniperl minimod.pl > lib\ExtUtils\Miniperl.pm

..\x2p\a2p$(o) : ..\x2p\a2p.c
	$(CC) -I..\x2p $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\a2p.c

..\x2p\hash$(o) : ..\x2p\hash.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\hash.c

..\x2p\str$(o) : ..\x2p\str.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\str.c

..\x2p\util$(o) : ..\x2p\util.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\util.c

..\x2p\walk$(o) : ..\x2p\walk.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\walk.c

$(X2P) : $(MINIPERL) $(X2P_OBJ)
	$(MINIPERL) ..\x2p\find2perl.PL
	$(MINIPERL) ..\x2p\s2p.PL
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(X2P_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(X2P_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(X2P_OBJ))
	$(EMBED_EXE_MANI)
.ENDIF

$(MINIDIR)\globals$(o) : $(UUDMAP_H)

$(UUDMAP_H) : $(GENUUDMAP)
	$(GENUUDMAP) >$(UUDMAP_H)

$(GENUUDMAP) : $(GENUUDMAP_OBJ)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(GENUUDMAP_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(GENUUDMAP_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(GENUUDMAP_OBJ))
	$(EMBED_EXE_MANI)
.ENDIF

perlmain.c : runperl.c
	copy runperl.c perlmain.c

perlmain$(o) : perlmain.c
	$(CC) $(CFLAGS_O:s,-DPERLDLL,-UPERLDLL,) $(OBJOUT_FLAG)$@@ -c perlmain.c

perlmainst.c : runperl.c
	copy runperl.c perlmainst.c

perlmainst$(o) : perlmainst.c
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ -c perlmainst.c

$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(PERLEXE_OBJ),$@@,, \
		$(PERLIMPLIB) $(LIBFILES),,$(PERLEXE_RES))
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -mconsole -o $@@ $(BLINK_FLAGS)  \
	    $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB) $(LIBFILES)
.ELSE
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(BLINK_FLAGS) \
	    $(LIBFILES) $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)
.ENDIF
	copy $(PERLEXE) $(WPERLEXE)
	$(MINIPERL) -I..\lib bin\exetype.pl $(WPERLEXE) WINDOWS
	copy splittree.pl ..
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" $(AUTODIR)

$(PERLEXESTATIC): $(PERLSTATICLIB) $(CONFIGPM) $(PERLEXEST_OBJ) $(PERLEXE_RES)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(PERLEXEST_OBJ),$@@,, \
		$(shell @@type Extensions_static) $(PERLSTATICLIB) $(LIBFILES),, \
		$(PERLEXE_RES))
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -mconsole -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(shell @@type Extensions_static) \
		$(PERLSTATICLIB) $(LIBFILES) $(PERLEXEST_OBJ) \
		$(PERLEXE_RES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(BLINK_FLAGS) \
	    @@Extensions_static $(PERLSTATICLIB) /PDB:NONE \
	    $(LIBFILES) $(PERLEXEST_OBJ) $(SETARGV_OBJ) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)
.ENDIF

$(DYNALOADER).c: $(MINIPERL) $(EXTDIR)\DynaLoader\dl_win32.xs $(CONFIGPM)
	if not exist $(AUTODIR) mkdir $(AUTODIR)
	cd $(EXTDIR)\$(*B) && ..\$(MINIPERL) -I..\..\lib $(*B)_pm.PL
	cd $(EXTDIR)\$(*B) && ..\$(MINIPERL) -I..\..\lib XSLoader_pm.PL
	$(XCOPY) $(EXTDIR)\$(*B)\$(*B).pm $(LIBDIR)\$(NULL)
	$(XCOPY) $(EXTDIR)\$(*B)\XSLoader.pm $(LIBDIR)\$(NULL)
	cd $(EXTDIR)\$(*B) && $(XSUBPP) dl_win32.xs > $(*B).c
	$(XCOPY) $(EXTDIR)\$(*B)\dlutils.c .

$(EXTDIR)\DynaLoader\dl_win32.xs: dl_win32.xs
	copy dl_win32.xs $(EXTDIR)\DynaLoader\dl_win32.xs

MakePPPort: $(MINIPERL) $(CONFIGPM)
	$(MINIPERL) -I..\lib ..\mkppport

MakePPPort_clean:
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\mkppport --clean

#-------------------------------------------------------------------------------
Extensions : ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynamic

Extensions_reonly : ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynamic +re

Extensions_static : ..\make_ext.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --static
	$(MINIPERL) -I..\lib list_static_libs.pl > Extensions_static

Extensions_clean :
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --all --target=clean

Extensions_realclean :
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --all --target=realclean

#-------------------------------------------------------------------------------


doc: $(PERLEXE)
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
	    --podpath=pod:lib:ext:utils --htmlroot="file://$(INST_HTML:s,:,|,)"\
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse

# Note that this next section is parsed (and regenerated) by pod/buildtoc
# so please check that script before making structural changes here
utils: $(PERLEXE) $(X2P)
	cd ..\utils && $(MAKE) PERL=$(MINIPERL)
	copy ..\README.aix      ..\pod\perlaix.pod
	copy ..\README.amiga    ..\pod\perlamiga.pod
	copy ..\README.apollo   ..\pod\perlapollo.pod
	copy ..\README.beos     ..\pod\perlbeos.pod
	copy ..\README.bs2000   ..\pod\perlbs2000.pod
	copy ..\README.ce       ..\pod\perlce.pod
	copy ..\README.cn       ..\pod\perlcn.pod
	copy ..\README.cygwin   ..\pod\perlcygwin.pod
	copy ..\README.dgux     ..\pod\perldgux.pod
	copy ..\README.dos      ..\pod\perldos.pod
	copy ..\README.epoc     ..\pod\perlepoc.pod
	copy ..\README.freebsd  ..\pod\perlfreebsd.pod
	copy ..\README.haiku    ..\pod\perlhaiku.pod
	copy ..\README.hpux     ..\pod\perlhpux.pod
	copy ..\README.hurd     ..\pod\perlhurd.pod
	copy ..\README.irix     ..\pod\perlirix.pod
	copy ..\README.jp       ..\pod\perljp.pod
	copy ..\README.ko       ..\pod\perlko.pod
	copy ..\README.linux    ..\pod\perllinux.pod
	copy ..\README.machten  ..\pod\perlmachten.pod
	copy ..\README.macos    ..\pod\perlmacos.pod
	copy ..\README.macosx   ..\pod\perlmacosx.pod
	copy ..\README.mint     ..\pod\perlmint.pod
	copy ..\README.mpeix    ..\pod\perlmpeix.pod
	copy ..\README.netware  ..\pod\perlnetware.pod
	copy ..\README.openbsd  ..\pod\perlopenbsd.pod
	copy ..\README.os2      ..\pod\perlos2.pod
	copy ..\README.os390    ..\pod\perlos390.pod
	copy ..\README.os400    ..\pod\perlos400.pod
	copy ..\README.plan9    ..\pod\perlplan9.pod
	copy ..\README.qnx      ..\pod\perlqnx.pod
	copy ..\README.riscos   ..\pod\perlriscos.pod
	copy ..\README.solaris  ..\pod\perlsolaris.pod
	copy ..\README.symbian  ..\pod\perlsymbian.pod
	copy ..\README.tru64    ..\pod\perltru64.pod
	copy ..\README.tw       ..\pod\perltw.pod
	copy ..\README.uts      ..\pod\perluts.pod
	copy ..\README.vmesa    ..\pod\perlvmesa.pod
	copy ..\README.vos      ..\pod\perlvos.pod
	copy ..\README.win32    ..\pod\perlwin32.pod
	copy ..\pod\perl5101delta.pod ..\pod\perldelta.pod
	cd ..\pod && $(MAKE) -f ..\win32\pod.mak converters
	cd ..\lib && $(PERLEXE) lib_pm.PL
	$(PERLEXE) $(PL2BAT) $(UTILS)
	$(PERLEXE) ..\autodoc.pl ..
	$(PERLEXE) ..\pod\perlmodlib.pl -q
	$(PERLEXE) ..\pod\buildtoc --build-toc -q

# Note that the pod cleanup in this next section is parsed (and regenerated
# by pod/buildtoc so please check that script before making changes here

distclean: realclean
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl$(a) $(MINIMOD) \
		$(PERLEXESTATIC) $(PERLSTATICLIB)
	-del /f *.def *.map
	-del /f $(DYNALOADER).c
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs
	-del /f $(EXTDIR)\DynaLoader\DynaLoader.pm
	-del /f $(EXTDIR)\DynaLoader\XSLoader.pm
	-del /f $(LIBDIR)\Encode.pm $(LIBDIR)\encoding.pm $(LIBDIR)\Errno.pm
	-del /f $(LIBDIR)\Config.pod $(LIBDIR)\POSIX.pod $(LIBDIR)\threads.pm
	-del /f $(LIBDIR)\.exists $(LIBDIR)\attrs.pm $(LIBDIR)\DynaLoader.pm
	-del /f $(LIBDIR)\XSLoader.pm $(LIBDIR)\lib.pm
	-del /f $(LIBDIR)\Fcntl.pm $(LIBDIR)\IO.pm $(LIBDIR)\Opcode.pm
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm
	-del /f $(LIBDIR)\SDBM_File.pm $(LIBDIR)\Socket.pm $(LIBDIR)\POSIX.pm
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
	-del /f $(LIBDIR)\Devel\Peek.pm $(LIBDIR)\Devel\DProf.pm
	-del /f $(LIBDIR)\Devel\PPPort.pm
	-del /f $(LIBDIR)\File\Glob.pm
	-del /f $(LIBDIR)\Storable.pm
	-del /f $(LIBDIR)\Digest\MD5.pm
	-del /f $(LIBDIR)\Digest\SHA.pm
	-del /f $(LIBDIR)\PerlIO\encoding.pm
	-del /f $(LIBDIR)\PerlIO\scalar.pm
	-del /f $(LIBDIR)\PerlIO\via.pm
	-del /f $(LIBDIR)\Sys\Hostname.pm
	-del /f $(LIBDIR)\threads\shared.pm
	-del /f $(LIBDIR)\Time\HiRes.pm
	-del /f $(LIBDIR)\Unicode\Normalize.pm
	-del /f $(LIBDIR)\Math\BigInt\FastCalc.pm
	-del /f $(LIBDIR)\Win32.pm
	-del /f $(LIBDIR)\Win32CORE.pm
	-del /f $(LIBDIR)\Win32API\File.pm
	-del /f $(LIBDIR)\Win32API\File\cFile.pc
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data
	-if exist $(LIBDIR)\Encode rmdir /s /q $(LIBDIR)\Encode
	-if exist $(LIBDIR)\Filter\Util rmdir /s /q $(LIBDIR)\Filter\Util
	-if exist $(LIBDIR)\Hash rmdir /s /q $(LIBDIR)\Hash
	-if exist $(LIBDIR)\App rmdir /s /q $(LIBDIR)\App
	-if exist $(LIBDIR)\Module\Pluggable rmdir /s /q $(LIBDIR)\Module\Pluggable
	-if exist $(LIBDIR)\TAP rmdir /s /q $(LIBDIR)\TAP
	-if exist $(LIBDIR)\mro rmdir /s /q $(LIBDIR)\mro
	-if exist $(LIBDIR)\IO\Compress rmdir /s /q $(LIBDIR)\IO\Compress
	-if exist $(LIBDIR)\IO\Socket rmdir /s /q $(LIBDIR)\IO\Socket
	-if exist $(LIBDIR)\IO\Uncompress rmdir /s /q $(LIBDIR)\IO\Uncompress
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\re rmdir /s /q $(LIBDIR)\re
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\Sys rmdir /s /q $(LIBDIR)\Sys
	-if exist $(LIBDIR)\threads rmdir /s /q $(LIBDIR)\threads
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
	-cd $(PODDIR) && del /f *.html *.bat podchecker \
	    perlaix.pod perlamiga.pod perlapi.pod perlapollo.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcn.pod \
	    perlcygwin.pod perldelta.pod perldgux.pod perldos.pod \
	    perlepoc.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmachten.pod perlmacos.pod perlmacosx.pod \
	    perlmint.pod perlmodlib.pod perlmpeix.pod perlnetware.pod \
	    perlopenbsd.pod perlos2.pod perlos390.pod perlos400.pod \
	    perlplan9.pod perlqnx.pod perlriscos.pod perlsolaris.pod \
	    perlsymbian.pod perltoc.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvos.pod perlwin32.pod \
	    pod2html pod2latex pod2man pod2text pod2usage \
	    podselect
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs \
	    perldoc perlivp dprofpp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove ptar ptardiff cpanp-run-perl cpanp cpan2dist shasum corelist config_data
	-cd ..\x2p && del /f find2perl s2p psed *.bat
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new \
	    perlmainst.c
	-del /f $(CONFIGPM)
	-del /f ..\lib\Config_git.pl
	-del /f bin\*.bat
	-del /f perllibst.h
	-del /f $(PERLEXE_ICO) perl.base
	-cd .. && del /s *$(a) *.map *.pdb *.ilk *.tds *.bs *$(o) .exists pm_to_blib
	-cd $(EXTDIR) && del /s *.def Makefile Makefile.old
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR)
	-if exist pod2htmd.tmp del pod2htmd.tmp
	-if exist pod2htmi.tmp del pod2htmi.tmp
	-if exist $(HTMLDIR) rmdir /s /q $(HTMLDIR)
	-del /f ..\t\test_state

install : all installbare installhtml

installbare : $(RIGHTMAKE) utils
	$(PERLEXE) ..\installperl
	if exist $(WPERLEXE) $(XCOPY) $(WPERLEXE) $(INST_BIN)\*.*
	if exist $(PERLEXESTATIC) $(XCOPY) $(PERLEXESTATIC) $(INST_BIN)\*.*
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	if exist ..\perl*.pdb $(XCOPY) ..\perl*.pdb $(INST_BIN)\*.*
	if exist ..\x2p\a2p.pdb $(XCOPY) ..\x2p\a2p.pdb $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_SCRIPT)\*.*

installhtml : doc
	$(RCOPY) $(HTMLDIR)\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	copy splittree.pl ..
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" $(AUTODIR)
	$(RCOPY) ..\lib $(INST_LIB)\*.*

$(UNIDATAFILES) .UPDATEALL : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables
	cd ..\lib\unicore && \
	..\$(MINIPERL) -I.. mktables

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) $(UNIDATAFILES) utils
	$(XCOPY) $(MINIPERL) ..\t\$(NULL)
	if exist ..\t\perl.exe del /f ..\t\perl.exe
	rename ..\t\miniperl.exe perl.exe
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
	attrib -r ..\t\*.*
	cd ..\t && \
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t

unpack_files:
	$(MINIPERL) -I..\lib ..\uupacktool.pl -u -d .. -m

cleanup_unpacked_files:
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\uupacktool.pl -c -d .. -m
	
test-prep : all utils unpack_files
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF

test : $(RIGHTMAKE) test-prep
	cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)

test-reonly : reonly utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	cd ..\t && \
	$(PERLEXE) -I..\lib harness $(OPT) -re \bpat\b \breg \bre\b \bsubst \brxcode $(EXTRA) && \
	cd ..\win32

regen :
	cd .. && regen.pl && cd win32

test-notty : test-prep
	set PERL_SKIP_TTY_TEST=1 && \
	    cd ..\t && $(PERLEXE) -I.\lib harness $(TEST_SWITCHES) $(TEST_FILES)

_test : $(RIGHTMAKE)
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
	cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)

_clean :
	-@@erase miniperlmain$(o)
	-@@erase $(MINIPERL)
	-@@erase perlglob$(o)
	-@@erase perlmain$(o)
	-@@erase perlmainst$(o)
	-@@erase config.w32
	-@@erase /f config.h
	-@@erase /f ..\git_version.h
	-@@erase $(GLOBEXE)
	-@@erase $(PERLEXE)
	-@@erase $(WPERLEXE)
	-@@erase $(PERLEXESTATIC)
	-@@erase $(PERLSTATICLIB)
	-@@erase $(PERLDLL)
	-@@erase $(CORE_OBJ)
	-@@erase $(GENUUDMAP) $(GENUUDMAP_OBJ) $(UUDMAP_H)
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR)
	-if exist $(UNIDATADIR1) rmdir /s /q $(UNIDATADIR1)
	-if exist $(UNIDATADIR2) rmdir /s /q $(UNIDATADIR2)
	-@@erase $(UNIDATAFILES)
	-@@erase $(WIN32_OBJ)
	-@@erase $(DLL_OBJ)
	-@@erase $(X2P_OBJ)
	-@@erase ..\*$(o) ..\*$(a) ..\*.exp *$(o) *$(a) *.exp *.res
	-@@erase ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@erase ..\x2p\*.exe ..\x2p\*.bat
	-@@erase *.ilk
	-@@erase *.pdb
	-@@erase *.tds
	-@@erase Extensions_static



_preclean : cleanup_unpacked_files
	
clean : _preclean Extensions_clean _clean

realclean : _preclean Extensions_realclean MakePPPort_clean _clean

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "dmake nok" instead.
ok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)"

okfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok

nok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)"

nokfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.11
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d37 1
a37 1
#INST_VER	*= \5.10.0
d333 1
a333 1
.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITEW6432
d385 7
a391 10
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. Embed
# them for simplicity, and delete them afterwards so that they don't get
# installed too.
.IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
EMBED_EXE_MANI	= mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  del $@@.manifest
EMBED_DLL_MANI	= mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  del $@@.manifest
.ENDIF
d496 4
a499 1
LIBC		= -lmsvcrt
a760 1
		..\pod\checkpods	\
d927 1
a927 1
CORE_H		= $(CORE_NOCFG_H) .\config.h
d1028 2
a1029 2
all : CHECKDMAKE .\config.h $(GLOBEXE) $(MINIPERL) $(MK2)		\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort	\
d1041 2
a1042 2
reonly : regnodes .\config.h $(GLOBEXE) $(MINIPERL) $(MK2)		\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)	\
d1128 6
d1138 8
a1145 3
# this target is for when changes to the main config.sh happen
# edit config.{b,v,g}c and make this target once for each supported
# compiler (e.g. `dmake CCTYPE=BORLAND regen_config_h`)
d1147 1
a1147 1
	perl config_sh.PL --cfgsh-option-file $(mktmp $(CFG_VARS)) \
d1149 1
a1149 3
	-cd .. && del /f perl.exe
	-cd .. && del /f perl*.dll
	cd .. && perl configpm
d1151 1
a1151 2
	-mkdir $(COREDIR)
	-perl config_h.PL "INST_VER=$(INST_VER)"
d1183 1
a1183 1
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB $(OBJOUT_FLAG)$@@ ..\$(*B).c
d1202 1
d1213 2
a1214 2
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl
	$(MINIPERL) -I..\lib buildext.pl --create-perllibst-h
d1390 1
a1390 1
Extensions : buildext.pl $(PERLDEP) $(CONFIGPM)
d1392 1
a1392 2
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --dynamic
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic
d1394 1
a1394 1
Extensions_reonly : buildext.pl $(PERLDEP) $(CONFIGPM)
d1396 1
a1396 2
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --dynamic +re
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic +re
d1398 1
a1398 1
Extensions_static : buildext.pl $(PERLDEP) $(CONFIGPM)
d1400 2
a1401 3
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --static
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
	$(MINIPERL) -I..\lib buildext.pl --list-static-libs > Extensions_static
d1404 1
a1404 2
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) clean
	-if exist $(MINIPERL) if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext clean
d1407 1
a1407 2
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) realclean
	-if exist $(MINIPERL) if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext realclean
a1420 1
	copy ..\vms\perlvms.pod	..\pod\perlvms.pod
d1433 1
a1458 1
	copy ..\README.vms      ..\pod\perlvms.pod
d1461 1
a1461 1
	copy ..\pod\perl5100delta.pod ..\pod\perldelta.pod
d1465 3
d1513 4
d1528 12
a1539 12
	-cd $(PODDIR) && del /f *.html *.bat checkpods \
	    perlaix.pod perlamiga.pod perlapollo.pod perlbeos.pod \
	    perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldelta.pod perldgux.pod perldos.pod perlepoc.pod \
	    perlfreebsd.pod perlhpux.pod perlhurd.pod perlirix.pod \
	    perljp.pod perlko.pod perllinux.pod perlmachten.pod \
	    perlmacos.pod perlmacosx.pod perlmint.pod perlmpeix.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvms.pod perlvms.pod perlvos.pod \
	    perlwin32.pod \
d1541 1
a1541 1
	    podchecker podselect
d1549 1
d1560 1
d1649 1
@


1.10
log
@merge in perl 5.8.8
@
text
@d4 3
a6 3
#	Visual C++ 2.0 through 7.0 (and possibly newer versions)
#	Borland C++ 5.02 or better
#	Mingw32 with gcc-2.95.2 or better
d10 1
a10 1
# (perl58.dll).  Also makes individual DLLs for the XS extensions.
d37 1
a37 1
#INST_VER	*= \5.8.8
a92 10
# WARNING! This option is deprecated and will eventually go away (enable
# USE_ITHREADS instead).
#
# uncomment to enable threads-capabilities.  This is incompatible with
# USE_ITHREADS, and is only here for people who may have come to rely
# on the experimental Thread support that was in 5.005.
#
#USE_5005THREADS	*= define

#
d99 1
a99 1
# Visual C++ 6.x (aka Visual Studio 98)
d101 1
a101 1
# Visual C++ Toolkit 2003 (free version of Visual C++ 7.x command-line tools)
d103 1
a103 1
# Visual C++ 7.x (aka Visual Studio .NET 2003) (full version)
d105 8
d188 18
a292 6
USE_5005THREADS	*= undef

.IF "$(USE_5005THREADS)" == "define"
USE_ITHREADS	!= undef
.ENDIF

d313 1
a313 1
.IF "$(USE_IMP_SYS) $(USE_MULTI) $(USE_5005THREADS)" == "define undef undef"
a318 1
USE_5005THREADS	!= undef
d325 1
a325 1
.IF "$(USE_MULTI) $(USE_5005THREADS)" != "undef undef"
d338 3
d344 1
a344 1
.ELIF "$(PROCESSOR_ARCHITECTURE)" == "IA64"
d351 10
a360 4
.IF "$(USE_5005THREADS)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-thread
.ELIF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-multi
d363 1
a363 1
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-perlio
d365 1
a365 1
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)
a366 1
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)
d373 21
a393 5
# Visual Studio 98 and .NET 2003 specific
# VC++ 6.x and 7.x can load DLL's on demand.  Makes the test suite run in
# about 10% less time.  (The free version of 7.x can't do this, however.)
.IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"
DELAYLOAD	*= -DELAYLOAD:ws2_32.dll -DELAYLOAD:shell32.dll delayimp.lib
d403 1
a410 1
INST_POD	= $(INST_LIB)\pod
d427 1
a427 1
LIB32		= tlib /P128
d462 1
a462 1
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)" -L"$(CCLIBDIR)" \
d524 1
d543 1
a543 1
CXX_FLAG	= -TP -GX
d581 1
a581 1
OPTIMIZE	+= -Wp64 -Op
d584 5
a588 6
# the string-pooling option -Gf is deprecated in VC++ 7.x and will be removed
# in later versions, so use read-only string-pooling (-GF) instead
.IF "$(CCTYPE)" == "MSVC70FREE" || "$(CCTYPE)" == "MSVC70"
STRPOOL		= -GF
.ELSE
STRPOOL		= -Gf
d591 4
d598 1
d604 1
a604 1
		version.lib
d606 6
a611 3
# win64 doesn't have some libs
.IF "$(WIN64)" != "define"
LIBBASEFILES	+= odbc32.lib odbccp32.lib
d617 1
a617 1
EXTRACFLAGS	= -nologo $(STRPOOL) -W3
d623 1
d641 7
a647 18
# Some dmake's built with Borland C++, including Sarathy's one at:
# http://search.cpan.org/CPAN/authors/id/G/GS/GSAR/dmake-4.1pl1-win32.zip
# require backslashes to be doubled-up when written to $(mktmp) files.
# Other dmake's do not require this and would actually output a double
# backslash if they were doubled-up.
.IF "$(shell @@type $(mktmp \\))"=="\\"
B=\\
.ELSE
B=\\\
.ENDIF

# There is a related issue with other escape sequences: Sarathy's old
# dmake automatically maps escape sequences like \n to their ASCII values
# when used in macros, while other dmake's only do so if this behaviour
# is explicitly requested with the :m modifier.
DONTUSETHIS=\n
.IF "$(shell @@type $(mktmp \n))"=="\n"
N=$(DONTUSETHIS:m)
d649 1
a649 1
N=$(DONTUSETHIS)
d683 1
d688 1
a688 1
	$(RSC) --use-temp-file -i $< -o $@@
d699 1
d704 6
a744 1
		..\utils\perlcc		\
d749 2
d754 6
d787 2
a788 1
PERLIMPLIB	= ..\libperl58$(a)
d804 3
a806 2
PERLIMPLIB	*= ..\perl58$(a)
PERLDLL		= ..\perl58.dll
d808 2
a809 2
XCOPY		= xcopy /f /r /i /d
RCOPY		= xcopy /f /r /i /e /d
d826 1
d829 1
a922 1
		..\thrdvar.h	\
d930 2
d940 1
d944 1
d952 11
a962 7
DYNAMIC_EXT	= Socket IO Fcntl Opcode SDBM_File POSIX attrs Thread B re \
		Data/Dumper Devel/Peek ByteLoader Devel/DProf File/Glob \
		Sys/Hostname Storable Filter/Util/Call Encode \
		Digest/MD5 PerlIO/scalar MIME/Base64 Time/HiRes \
		Unicode/Normalize Win32
STATIC_EXT	= 
NONXS_EXT	= Errno
a965 5
POD2HTML	= $(PODDIR)\pod2html
POD2MAN		= $(PODDIR)\pod2man
POD2LATEX	= $(PODDIR)\pod2latex
POD2TEXT	= $(PODDIR)\pod2text

d972 2
a973 2
		INST_TOP=$(INST_TOP:s,\,$B,)	~	\
		INST_VER=$(INST_VER:s,\,$B,)	~	\
d983 1
a983 1
		incpath=$(CCINCDIR:s,\,$B,)	~	\
d985 1
a985 1
		libpth=$(CCLIBDIR:s,\,$B,);$(EXTRALIBDIRS:s,\,$B,)	~	\
a993 1
		use5005threads=$(USE_5005THREADS)	~	\
d999 1
a999 1
		LINK_FLAGS=$(LINK_FLAGS:s,\,$B,)	~	\
d1029 14
a1042 1
all : .\config.h $(GLOBEXE) $(MINIPERL) $(MK2)		\
d1044 1
a1044 1
	$(X2P) Extensions
d1048 2
d1098 9
d1117 1
a1150 1
	$(XCOPY) ..\*.inc $(COREDIR)\*.*
d1162 1
a1162 1
	    @@$(mktmp c0x32$(o) $(MINI_OBJ:s,\,$B,),$(@@:s,\,$B,),,$(LIBFILES),)
d1165 1
a1165 1
	    $(mktmp $(LKPRE) $(MINI_OBJ:s,\,$B,) $(LIBFILES) $(LKPOST))
d1167 3
a1169 2
	$(LINK32) -subsystem:console -out:$@@ \
	    @@$(mktmp $(BLINK_FLAGS) $(LIBFILES) $(MINI_OBJ:s,\,$B,))
d1213 2
a1214 4
	    @@$(mktmp c0d32$(o) $(PERLDLL_OBJ:s,\,$B,)$N \
		$@@,$N \
	        $(subst,\,$B $(shell @@type Extensions_static)) $(LIBFILES)$N \
		perldll.def$N)
d1218 3
a1220 3
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ:s,\,$B,) \
	        $(subst,\,$B $(shell @@type Extensions_static)) \
	        $(LIBFILES) $(LKPOST))
d1227 3
a1229 3
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ:s,\,$B,) \
	        $(subst,\,$B $(shell @@type Extensions_static)) \
	        $(LIBFILES) perl.exp $(LKPOST))
d1231 1
a1231 1
	$(LINK32) -dll -def:perldll.def -out:$@@ \
d1233 3
a1235 2
	    @@$(mktmp -base:0x28000000 $(BLINK_FLAGS) $(DELAYLOAD) $(LIBFILES) \
	        $(PERLDLL_RES) $(PERLDLL_OBJ:s,\,$B,))
d1239 19
d1259 2
a1260 2
$(PERLEXE_ICO): $(MINIPERL) makeico.pl
	$(MINIPERL) makeico.pl > $@@
d1287 1
a1287 1
	    @@$(mktmp c0x32$(o) $(X2P_OBJ:s,\,$B,),$(@@:s,\,$B,),,$(LIBFILES),)
d1290 1
a1290 1
	    $(mktmp $(LKPRE) $(X2P_OBJ:s,\,$B,) $(LIBFILES) $(LKPOST))
d1292 21
a1312 2
	$(LINK32) -subsystem:console -out:$@@ \
	    @@$(mktmp $(BLINK_FLAGS) $(LIBFILES) $(X2P_OBJ:s,\,$B,))
d1319 7
a1325 1
	$(CC) $(CFLAGS_O) -UPERLDLL $(OBJOUT_FLAG)$@@ -c perlmain.c
d1330 2
a1331 3
	    @@$(mktmp c0x32$(o) $(PERLEXE_OBJ:s,\,$B,)$N \
	    $(@@:s,\,$B,),$N \
	    $(PERLIMPLIB) $(LIBFILES)$N)
d1334 1
a1334 1
	    $(PERLEXE_OBJ) $(PERLIMPLIB) $(LIBFILES)
d1338 1
d1345 18
d1375 6
d1383 1
d1385 6
a1390 1
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic
d1392 2
a1393 1
Extensions_static : buildext.pl
d1395 1
a1395 1
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
d1400 1
a1400 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext clean
d1404 1
a1404 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext realclean
d1410 1
a1410 1
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=./html \
d1449 1
d1451 1
d1459 1
a1459 1
	copy ..\pod\perl588delta.pod ..\pod\perldelta.pod
a1466 2
# the doubled rmdir calls are needed because older cmd shells
# don't understand /q
d1469 2
a1470 1
		$(PERLIMPLIB) ..\miniperl$(a) $(MINIMOD)
a1483 1
	-del /f $(LIBDIR)\ByteLoader.pm
d1489 1
a1493 1
	-del /f $(LIBDIR)\Thread\Signal.pm $(LIBDIR)\Thread\Specific.pm
d1497 1
d1499 3
a1501 2
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO
	-if exist $(LIBDIR)\IO rmdir /s $(LIBDIR)\IO
d1503 1
a1503 1
	-if exist $(LIBDIR)\B rmdir /s $(LIBDIR)\B
a1504 1
	-if exist $(LIBDIR)\Data rmdir /s $(LIBDIR)\Data
a1505 1
	-if exist $(LIBDIR)\Encode rmdir /s $(LIBDIR)\Encode
d1507 5
a1511 1
	-if exist $(LIBDIR)\Filter\Util rmdir /s $(LIBDIR)\Filter\Util
d1513 1
a1513 3
	-if exist $(LIBDIR)\MIME rmdir /s $(LIBDIR)\MIME
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\List rmdir /s $(LIBDIR)\List
a1514 1
	-if exist $(LIBDIR)\Scalar rmdir /s $(LIBDIR)\Scalar
a1515 1
	-if exist $(LIBDIR)\Sys rmdir /s $(LIBDIR)\Sys
a1516 1
	-if exist $(LIBDIR)\threads rmdir /s $(LIBDIR)\threads
d1518 1
a1518 1
	-if exist $(LIBDIR)\XS rmdir /s $(LIBDIR)\XS
d1527 4
a1530 3
	    perlos400.pod perlplan9.pod perlqnx.pod perlsolaris.pod \
	    perltru64.pod perltw.pod perluts.pod perlvmesa.pod perlvms.pod \
	    perlvms.pod perlvos.pod perlwin32.pod \
d1534 2
a1535 2
	    perldoc perlivp dprofpp perlcc libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove
d1537 2
a1538 1
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new
a1545 1
	-if exist $(AUTODIR) rmdir /s $(AUTODIR)
d1547 3
a1549 1
	-if exist $(COREDIR) rmdir /s $(COREDIR)
d1556 1
d1563 1
a1563 1
	$(RCOPY) html\*.* $(INST_HTML)\*.*
d1587 7
a1593 1
test-prep : all utils
d1605 11
a1629 2
# the doubled rmdir calls are needed because older cmd shells
# don't understand /q
d1635 1
d1641 2
d1645 1
a1646 1
	-if exist $(MINIDIR) rmdir /s $(MINIDIR)
a1647 1
	-if exist $(UNIDATADIR1) rmdir /s $(UNIDATADIR1)
a1648 1
	-if exist $(UNIDATADIR2) rmdir /s $(UNIDATADIR2)
a1660 1
clean : Extensions_clean _clean
d1662 6
a1667 1
realclean : Extensions_realclean _clean
@


1.9
log
@sync in-tree perl with 5.8.6
@
text
@d4 3
a6 3
#	Visual C++ 2.0 through 6.0 (and possibly newer versions)
#	Borland C++ 5.02
#	Mingw32 with gcc-2.95.2 or better  **experimental**
d37 1
a37 1
#INST_VER	*= \5.8.6
d51 8
d90 1
a90 1
USE_LARGE_FILES *= define
d109 1
a109 1
# Visual C++ >= 6.x
d111 4
d122 1
a122 1
#BCCOLD = define
d125 1
a125 1
#BCCVCL = define
d180 1
a180 1
PERL_MALLOC	*= define
d187 1
a187 1
DEBUG_MSTATS  = define
d197 1
a197 1
CCHOME		*= C:\borland\bcc55
d209 11
d240 1
d275 1
d283 1
d291 1
a291 1
.IF "$(PERL_MALLOC)" == "undef"
a292 1
DEBUG_MSTATS   = undef
d295 2
a296 2
.IF "$(DEBUG_MSTATS)" == "undef"
DEBUG_MSTATS   = undef
d300 1
a300 1
BUILDOPT       += -DPERL_DEBUGGING_MSTATS
d303 1
a303 1
.IF "$(USE_IMP_SYS)$(USE_MULTI)$(USE_5005THREADS)" == "defineundefundef"
d307 1
a307 1
.IF "$(USE_ITHREADS)$(USE_MULTI)" == "defineundef"
d312 5
a316 1
.IF "$(USE_MULTI)$(USE_5005THREADS)" != "undefundef"
d356 4
a359 5
# Visual Studio 98 specific
.IF "$(CCTYPE)" == "MSVC60"

# VC 6.0 can load the socket dll on demand.  Makes the test suite
# run in about 10% less time.
a360 7

.IF "$(CFG)" == "Debug"
.ELSE
# VC 6.0 seems capable of compiling perl correctly with optimizations
# enabled.  Anything earlier fails tests.
CFG		*= Optimize
.ENDIF
d396 1
a396 1
RSC		= rc
d409 8
a416 1
LIBFILES	= $(CRYPT_LIB) import32.lib $(LIBC)
d426 1
d429 2
a430 1
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)"  -L"$(CCLIBDIR)"
d473 1
a473 1
		  -lwinmm -lversion -lodbc32
d483 1
d550 8
d576 2
a577 1
CFLAGS		= -nologo -Gf -W3 $(INCLUDES) $(DEFINES) $(LOCDEFS) \
d599 22
d668 1
a668 1
CONFIGPM	= ..\lib\Config.pm
d762 1
a762 1
NOOP		= @@echo
d860 1
d904 1
a904 1
STATIC_EXT	= DynaLoader
d920 2
a921 2
		INST_TOP=$(INST_TOP:s/\/\\/)	~	\
		INST_VER=$(INST_VER:s/\/\\/)	~	\
d926 1
a926 1
		ccflags=$(OPTIMIZE) $(DEFINES) $(BUILDOPT)	~	\
d931 1
a931 1
		incpath=$(CCINCDIR:s/\/\\/)	~	\
d933 1
a933 1
		libpth=$(CCLIBDIR:s/\/\\/);$(EXTRALIBDIRS:s/\/\\/)	~	\
d947 2
a948 1
		LINK_FLAGS=$(LINK_FLAGS:s/\/\\/)	~	\
a957 1
NOOP		= @@rem
d963 11
d1084 2
d1087 1
a1087 1
	    @@$(mktmp c0x32$(o) $(MINI_OBJ:s,\,\\),$(@@:s,\,\\),,$(LIBFILES),)
d1090 1
a1090 1
	    $(mktmp $(LKPRE) $(MINI_OBJ:s,\,\\) $(LIBFILES) $(LKPOST))
d1093 1
a1093 1
	    @@$(mktmp $(BLINK_FLAGS) $(LIBFILES) $(MINI_OBJ:s,\,\\))
d1112 1
a1112 1
	$(CC) -c -I. -DWITH_STATIC $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
d1114 1
a1114 1
	$(CC) -c -I. -DWITH_STATIC $(CFLAGS_O) $(OBJOUT_FLAG)$@@ perllib.c
d1130 1
a1130 1
	$(MINIPERL) -I..\lib buildext.pl --create-perllibst-h $(STATIC_EXT)
d1137 4
a1140 4
	    @@$(mktmp c0d32$(o) $(PERLDLL_OBJ:s,\,\\)\n \
		$@@,\n \
		$(LIBFILES)\n \
		perldll.def\n)
d1144 3
a1146 1
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ:s,\,\\) $(LIBFILES) $(LKPOST))
d1153 3
a1155 2
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ:s,\,\\) $(LIBFILES) \
		perl.exp $(LKPOST))
d1158 1
a1158 1
	    $(shell $(MINIPERL) -I..\lib buildext.pl --list-static-libs) \
d1160 1
a1160 1
	        $(PERLDLL_RES) $(PERLDLL_OBJ:s,\,\\))
d1193 1
a1193 1
	    @@$(mktmp c0x32$(o) $(X2P_OBJ:s,\,\\),$(@@:s,\,\\),,$(LIBFILES),)
d1196 1
a1196 1
	    $(mktmp $(LKPRE) $(X2P_OBJ:s,\,\\) $(LIBFILES) $(LKPOST))
d1199 1
a1199 1
	    @@$(mktmp $(BLINK_FLAGS) $(LIBFILES) $(X2P_OBJ:s,\,\\))
d1211 3
a1213 3
	    @@$(mktmp c0x32$(o) $(PERLEXE_OBJ:s,\,\\)\n \
	    $(@@:s,\,\\),\n \
	    $(PERLIMPLIB) $(LIBFILES)\n)
d1238 1
a1238 1
#----------------------------------------------------------------------------------
d1244 1
d1246 1
a1246 4
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --static

# Note: The next two targets explicitly remove a "blibdirs.exists" file that
# currerntly gets left behind, until CPAN RT Ticket #5616 is resolved.
a1250 1
	-if exist $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists del /f $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists
a1254 1
	-if exist $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists del /f $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists
d1256 1
a1256 1
#----------------------------------------------------------------------------------
d1286 1
d1293 1
d1307 1
a1307 1
	copy ..\pod\perl586delta.pod ..\pod\perldelta.pod
d1364 4
d1375 6
a1380 6
	    perljp.pod perlko.pod perlmachten.pod perlmacos.pod \
	    perlmacosx.pod perlmint.pod perlmpeix.pod perlnetware.pod \
	    perlos2.pod perlos390.pod perlos400.pod perlplan9.pod \
	    perlqnx.pod perlsolaris.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvms.pod perlvms.pod perlvos.pod \
	    perlwin32.pod \
d1392 1
a1392 1
	-cd .. && del /s *$(a) *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib
d1417 1
a1417 6
# Move the rule for making $(UNIDATAFILES) into a separate target and leave the
# actual rule here blank because dmake runs the rule here once for each of the
# files listed in $(UNIDATAFILES)
$(UNIDATAFILES) : make_unidatafiles

make_unidatafiles : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables
d1444 1
a1444 1
	cd ..\t && $(PERLEXE) -I..\lib harness
d1448 1
a1448 1
	    cd ..\t && $(PERLEXE) -I.\lib harness
d1458 1
a1458 1
	cd ..\t && $(PERLEXE) -I..\lib harness
d1489 2
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d37 1
a37 1
#INST_VER	*= \5.8.5
d168 8
a175 1
#PERL_MALLOC	*= define
d265 13
d332 1
a332 1
DELAYLOAD	*= -DELAYLOAD:wsock32.dll -DELAYLOAD:shell32.dll delayimp.lib
d442 1
a442 1
		  -loleaut32 -lnetapi32 -luuid -lwsock32 -lmpr \
d526 1
a526 1
		netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
a880 1
		usethreads=$(USE_5005THREADS)	~	\
d1036 1
a1036 1
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
d1038 1
a1038 1
	$(CC) -c -I. $(CFLAGS_O) $(OBJOUT_FLAG)$@@ perllib.c
d1054 1
d1058 1
a1058 1
$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES)
d1079 1
d1085 1
d1161 6
a1166 2
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR)
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext
d1230 1
a1230 1
	copy ..\pod\perl585delta.pod ..\pod\perldelta.pod
d1309 1
@


1.7
log
@merge local changes into perl-5.8.3
@
text
@d37 1
a37 1
INST_VER	*= \5.8.3
d48 1
a48 1
INST_ARCH	*= \$(ARCHNAME)
d102 1
a102 1
CCTYPE		*= MSVC60
d105 2
a106 5
# mingw32+gcc-2.95.2 or better
#CCTYPE		*= GCC
# Uncomment this if you are using the latest MinGW release (2.0.0)
# with gcc3.2
#USE_GCC_V3_2	*= define
a397 3
.IF "$(USE_GCC_V3_2)" == "define"
LINK32		= g++
.END
d400 1
a400 1
RSC		= rc
d429 2
a430 2
OPTIMIZE	= -g -O2
LINK_DBG	= -g
a465 3
PERLEXE_RES	=
PERLDLL_RES	=

d474 9
a482 2
OPTIMIZE	= -MD -DNDEBUG
LINK_DBG	= -release
d573 3
d577 1
d590 14
d820 1
a820 1
		Unicode/Normalize
d886 1
a886 1
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(PERLEXE)	\
d1027 1
d1029 1
d1031 1
d1064 5
d1140 4
d1147 7
d1204 1
a1204 1
	copy ..\pod\perl583delta.pod ..\pod\perldelta.pod
d1212 3
a1214 1
distclean: clean
d1218 1
d1220 4
d1225 1
a1225 1
	-del /f $(LIBDIR)\XSLoader.pm
d1230 1
a1230 2
	-del /f $(LIBDIR)\Data\Dumper.pm $(LIBDIR)\ByteLoader.pm
	-del /f $(LIBDIR)\PerlIO\scalar.pm
d1232 1
a1234 1
	-del /f $(LIBDIR)\Filter\Util\Call.pm
d1236 6
a1241 2
	-del /f $(LIBDIR)\MIME\Base64.pm
	-del /f $(LIBDIR)\MIME\QuotedPrint.pm
a1242 2
	-del /f $(LIBDIR)\List\Util.pm
	-del /f $(LIBDIR)\Scalar\Util.pm
d1244 1
d1251 2
a1254 2
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest
	-if exist $(LIBDIR)\Digest rmdir /s $(LIBDIR)\Digest
d1283 1
d1297 2
d1309 13
a1321 2
minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) utils
	$(XCOPY) $(MINIPERL) ..\t\perl.exe
a1327 1
	copy test ..\t
d1329 1
a1329 1
	$(MINIPERL) -I..\lib test base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t
d1357 3
a1359 1
clean : Extensions_clean
d1373 5
d1386 4
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d37 1
a37 1
INST_VER	*= \5.8.2
d400 1
a400 1
LINK32		= gcc
d614 3
a627 1
		..\lib\ExtUtils\xsubpp	\
d1128 2
a1131 36
	copy ..\README.aix      .\perlaix.pod
	copy ..\README.amiga    .\perlamiga.pod
	copy ..\README.apollo   .\perlapollo.pod
	copy ..\README.beos     .\perlbeos.pod
	copy ..\README.bs2000   .\perlbs2000.pod
	copy ..\README.ce       .\perlce.pod
	copy ..\README.cn       .\perlcn.pod
	copy ..\README.cygwin   .\perlcygwin.pod
	copy ..\README.dgux     .\perldgux.pod
	copy ..\README.dos      .\perldos.pod
	copy ..\README.epoc     .\perlepoc.pod
	copy ..\README.freebsd  .\perlfreebsd.pod
	copy ..\README.hpux     .\perlhpux.pod
	copy ..\README.hurd     .\perlhurd.pod
	copy ..\README.irix     .\perlirix.pod
	copy ..\README.jp       .\perljp.pod
	copy ..\README.ko       .\perlko.pod
	copy ..\README.machten  .\perlmachten.pod
	copy ..\README.macos    .\perlmacos.pod
	copy ..\README.macosx   .\perlmacosx.pod
	copy ..\README.mint     .\perlmint.pod
	copy ..\README.mpeix    .\perlmpeix.pod
	copy ..\README.netware  .\perlnetware.pod
	copy ..\README.os2      .\perlos2.pod
	copy ..\README.os390    .\perlos390.pod
	copy ..\README.os400    .\perlos400.pod
	copy ..\README.plan9    .\perlplan9.pod
	copy ..\README.qnx      .\perlqnx.pod
	copy ..\README.solaris  .\perlsolaris.pod
	copy ..\README.tru64    .\perltru64.pod
	copy ..\README.tw       .\perltw.pod
	copy ..\README.uts      .\perluts.pod
	copy ..\README.vmesa    .\perlvmesa.pod
	copy ..\README.vms      .\perlvms.pod
	copy ..\README.vos      .\perlvos.pod
	copy ..\README.win32    .\perlwin32.pod
d1133 37
d1174 3
d1222 8
a1229 7
	    perldgux.pod perldos.pod perlepoc.pod perlfreebsd.pod \
	    perlhpux.pod perlhurd.pod perlirix.pod perljp.pod perlko.pod \
	    perlmachten.pod perlmacos.pod perlmacosx.pod perlmint.pod \
	    perlmpeix.pod perlnetware.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlsolaris.pod \
	    perltru64.pod perltw.pod perluts.pod perlvmesa.pod perlvms.pod \
	    perlvms.pod perlvos.pod perlwin32.pod \
d1233 2
a1234 1
	    perldoc perlivp dprofpp perlcc libnetcfg enc2xs piconv cpan *.bat
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d37 1
a37 1
INST_VER	*= \5.8.0
d76 7
a82 1
USE_PERLIO	= define
d107 3
d151 3
a153 3
# if you have the source for des_fcrypt(), uncomment this and make sure the
# file exists (see README.win32).  File should be located in the same
# directory as this file.
d155 1
a155 1
#CRYPT_SRC	*= fcrypt.c
d258 1
d401 3
d613 1
d683 1
d840 1
d846 2
a847 1
		LINK_FLAGS=$(LINK_FLAGS:s/\/\\/)		~	\
d964 1
d1128 36
a1163 27
	copy ..\README.aix	..\pod\perlaix.pod
	copy ..\README.amiga	..\pod\perlamiga.pod
	copy ..\README.apollo	..\pod\perlapollo.pod
	copy ..\README.beos	..\pod\perlbeos.pod
	copy ..\README.bs2000	..\pod\perlbs2000.pod
	copy ..\README.ce	..\pod\perlce.pod
	copy ..\README.cygwin	..\pod\perlcygwin.pod
	copy ..\README.dgux	..\pod\perldgux.pod
	copy ..\README.dos	..\pod\perldos.pod
	copy ..\README.epoc	..\pod\perlepoc.pod
	copy ..\README.freebsd	..\pod\perlfreebsd.pod
	copy ..\README.hpux	..\pod\perlhpux.pod
	copy ..\README.hurd	..\pod\perlhurd.pod
	copy ..\README.irix	..\pod\perlirix.pod
	copy ..\README.machten	..\pod\perlmachten.pod
	copy ..\README.macos	..\pod\perlmacos.pod
	copy ..\README.mint	..\pod\perlmint.pod
	copy ..\README.mpeix	..\pod\perlmpeix.pod
	copy ..\README.netware	..\pod\perlnetware.pod
	copy ..\README.os2	..\pod\perlos2.pod
	copy ..\README.os390	..\pod\perlos390.pod
	copy ..\README.plan9	..\pod\perlplan9.pod
	copy ..\README.qnx	..\pod\perlqnx.pod
	copy ..\README.solaris	..\pod\perlsolaris.pod
	copy ..\README.tru64	..\pod\perltru64.pod
	copy ..\README.uts	..\pod\perluts.pod
	copy ..\README.vmesa	..\pod\perlvmesa.pod
a1164 2
	copy ..\README.vos	..\pod\perlvos.pod
	copy ..\README.win32	..\pod\perlwin32.pod
d1193 18
a1210 9
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO || rmdir /s $(LIBDIR)\IO
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B || rmdir /s $(LIBDIR)\B
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data || rmdir /s $(LIBDIR)\Data
	-if exist $(LIBDIR)\Filter\Util\Call rmdir /s /q $(LIBDIR)\Filter\Util\Call || rmdir /s $(LIBDIR)\Filter
	-if exist $(LIBDIR)\Filter\Util rmdir /s /q $(LIBDIR)\Filter\Util || rmdir /s $(LIBDIR)\Filter
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest || rmdir /s $(LIBDIR)\Digest
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME || rmdir /s $(LIBDIR)\MIME
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List || rmdir /s $(LIBDIR)\List
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar || rmdir /s $(LIBDIR)\Scalar
d1212 10
a1221 10
	    perlaix.pod perlamiga.pod perlapollo.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcygwin.pod perldgux.pod \
	    perldos.pod perlepoc.pod perlfreebsd.pod perlhpux.pod perlhurd.pod \
	    perlirix.pod perlmachten.pod perlmint.pod \
	    perlmacos.pod perlmpeix.pod perlnetware.pod \
	    perlos2.pod perlos390.pod \
	    perlplan9.pod perlqnx.pod \
	    perlsolaris.pod perltru64.pod perluts.pod \
	    perlvmesa.pod perlvms.pod perlvos.pod \
	    perlwin32.pod pod2html pod2latex pod2man pod2text pod2usage \
d1224 1
a1224 1
	    perldoc perlivp dprofpp perlcc libnetcfg enc2xs piconv *.bat
d1231 4
a1234 2
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR) || rmdir /s $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR) || rmdir /s $(COREDIR)
a1279 9
test-wide : test-prep
	set HARNESS_PERL_SWITCHES=-C && \
	    cd ..\t && $(PERLEXE) -I..\lib harness

test-wide-notty : test-prep
	set PERL_SKIP_TTY_TEST=1 && \
	    set HARNESS_PERL_SWITCHES=-C && \
	    cd ..\t && $(PERLEXE) -I..\lib harness

d1302 2
a1303 1
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR) || rmdir /s $(MINIDIR)
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d4 1
a4 1
#	Visual C++ 2.0 thro 6.0
d7 4
a15 3
## If you want a configuration that is the same as ActivePerl (see
## www.ActiveState.com) make sure you set at least BUILD_FLAVOR below!
##
d22 2
a23 2
# Set these to wherever you want "dmake install" to put your newly
# built perl.  Setting it to a path with spaces is NOT recommended.
a28 78
# uncomment exactly one of the following
# 
# Visual C++ 2.x
#CCTYPE		*= MSVC20
# Visual C++ > 2.x and < 5.x SP3
#CCTYPE		*= MSVC_PRE_50SP3
# Visual C++ >= 5.x SP3
#CCTYPE		*= MSVC60
# Borland 5.02 or later
#CCTYPE		*= BORLAND
# mingw32+gcc-2.95.2 or better
CCTYPE		*= GCC

#
# uncomment this if your Borland compiler is older than v5.4.
#
#BCCOLD		= define

#
# uncomment this if you want to use Borland's VCL as your CRT.
#
#BCCVCL		= define

#
# set the install locations of the compiler include/libraries. Running
# VCVARS32.BAT is *required* when using Visual C.  Some versions of
# Visual C earlier than 5.x SP3 don't define MSVCDIR in the environment.
# If such is the case you may have to set CCHOME explicitly.  Spaces in
# the path name should not be quoted.
#
#CCHOME		*= F:\Borland\BC5
#CCHOME		*= $(MSVCDIR)
CCHOME		*= c:\gcc-2.95.2-msvcrt

CCINCDIR	*= $(CCHOME)\include
CCLIBDIR	*= $(CCHOME)\lib

#
# uncomment this if you are compiling under Windows 95/98 and command.com
# (not needed if you're running under 4DOS/NT 6.01 or later)
#IS_WIN95	*= define

#
# if you have the source for des_fcrypt(), uncomment CRYPT_SRC and make sure
# the file exists (see README.win32).  File should be located in the same
# directory as this makefile.
#
# If you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment CRYPT_LIB, and make sure the library exists (see
# README.win32).  Specify the full pathname of the library.
#
# If you don't enable one of these, the crypt() builtin will fail to work.
# (Generally not critical.)
#
#CRYPT_SRC	*= fcrypt.c
#CRYPT_LIB	*= fcrypt.lib

#
# uncomment this option if you want to bulk-enable all the options that
# ActiveState uses to build their ActivePerl distribution.  If you set this,
# there should be no need to set any of the other options that follow.
#
# If you don't enable this, the defaults below will get you the most
# efficient perl configuration possible that will also be compatible
# with the build defaults used on Unix platforms.  On the other hand,
# the ActivePerl configuration will get you fork() emulation at the
# cost of some added bloat.
#
#BUILD_FLAVOR	*= ActivePerl

#
# uncomment next line if you want debug version of perl (big and slow).
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		*= Debug

#
d37 1
a37 1
INST_VER	*= \5.6.1
d52 1
a52 1
# emulation.
d54 1
a54 1
#USE_MULTI	*= define
d57 3
a59 3
# Beginnings of interpreter cloning/threads; still very incomplete.
# This should be enabled to get the fork() emulation.  This needs
# USE_MULTI as well.
d61 1
a61 1
#USE_ITHREADS	*= define
d65 5
a69 2
# made by perl.  This needs USE_MULTI above.  This is also needed to
# get fork().
d71 6
a76 1
#USE_IMP_SYS	*= define
d89 25
a113 2
# WARNING! This option is deprecated and will eventually go away (enable
# USE_MULTI instead).
d115 3
a117 4
# uncomment next line if you want to use the PERL_OBJECT build option.
# DO NOT ENABLE unless you have legacy code that relies on the C++
# CPerlObj class that was available in 5.005.  This cannot be enabled
# if you ask for USE_5005THREADS or USE_MULTI above.
d119 1
a119 1
#USE_OBJECT	*= define
d125 1
a125 1
# Get it from CPAN at http://www.perl.com/CPAN/authors/id/D/DO/DOUGL/
d134 1
a134 1
# compiler. Setting this option enables perl to expand wildcards in
d136 2
a137 3
# File::DosGlob that are more powerful, or use perl inside shells
# that do the expansion for you.  This option is supported only
# with Visual C.
d142 14
d165 17
a229 13
.IF "$(BUILD_FLAVOR)" == "ActivePerl"
INST_VER	!= 
INST_ARCH	!= 
USE_MULTI	!= define
USE_ITHREADS	!= define
USE_IMP_SYS	!= define
USE_5005THREADS	!= undef
USE_OBJECT	!= undef
USE_PERLCRT	!= undef
USE_SETARGV	!=
PERL_MALLOC	!= undef
.ENDIF

a236 7
.IF "$(USE_OBJECT)" == "define"
PERL_MALLOC	!= undef
USE_5005THREADS	!= undef
USE_MULTI	!= undef
USE_IMP_SYS	!= define
.ENDIF

a244 4
.IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	!= undef
.ENDIF

a245 1
USE_OBJECT	*= undef
d248 1
d251 1
a251 1
.IF "$(USE_IMP_SYS)$(USE_MULTI)$(USE_5005THREADS)$(USE_OBJECT)" == "defineundefundefundef"
d255 1
a255 1
.IF "$(USE_ITHREADS)$(USE_MULTI)$(USE_OBJECT)" == "defineundefundef"
d260 1
a260 1
.IF "$(USE_MULTI)$(USE_5005THREADS)$(USE_OBJECT)" != "undefundefundef"
d268 1
a268 1
.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE
d272 12
a283 3
.IF "$(USE_OBJECT)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-object
.ELIF "$(USE_5005THREADS)" == "define"
d288 5
d305 1
a305 1
DELAYLOAD	*= -DELAYLOAD:wsock32.dll -DELAYLOAD:shell32.dll delayimp.lib 
d307 2
d313 1
d345 1
a345 1
.END
d354 1
a354 1
#PCHFLAGS	= -H -Hc -H=c:\temp\bcmoduls.pch 
d364 1
a364 1
OPTIMIZE	= -v -D_RTLDLL -DDEBUGGING -y -R
d368 1
a368 1
LINK_DBG	= 
d373 1
a373 1
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)" -L"$(CCLIBDIR)"
d376 1
a376 1
LIBOUT_FLAG	= 
d379 2
a380 1
DEFINES		+= -D_MT
d382 1
a382 1
LIBC		!= cp32mti.lib vcl.lib vcl50.lib vclx50.lib vcle50.lib
d385 1
a385 1
.END
d395 1
d403 1
a403 1
INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
d419 1
a419 1
OPTIMIZE	= -g -DDEBUGGING
d423 1
a423 1
LINK_DBG	= 
d430 1
a430 1
LIBOUT_FLAG	= 
d447 1
a447 1
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX 
d466 1
a466 1
OPTIMIZE	= -Od -MD -Zi -DDEBUGGING
d468 1
a468 1
LINK_DBG	= -debug -pdb:none
d470 6
a475 4
.IF "$(CFG)" == "Optimize"
# -O1 yields smaller code, which turns out to be faster than -O2
#OPTIMIZE	= -O2 -MD -DNDEBUG
OPTIMIZE	= -O1 -MD -DNDEBUG
d477 4
a480 1
OPTIMIZE	= -Od -MD -DNDEBUG
d482 8
a489 1
LINK_DBG	= -release
d496 6
a501 1
		version.lib odbc32.lib odbccp32.lib
a514 9
.IF "$(USE_PERLCRT)" != "define"
BUILDOPT	+= -DPERL_MSVCRT_READFIX
.ENDIF

.ENDIF

.IF "$(USE_OBJECT)" == "define"
OPTIMIZE	+= $(CXX_FLAG)
BUILDOPT	+= -DPERL_OBJECT
d536 1
a536 1
# 
d538 1
a538 1
.SUFFIXES : .c $(o) .dll $(a) .exe .rc .res
d543 3
d558 1
a558 1
	    -out:$@@ $(BLINK_FLAGS) $(LIBFILES) $< $(LIBPERL)  
d575 7
d592 1
d596 4
d609 1
d611 1
d627 1
a627 1
PERLIMPLIB	= ..\libperl56$(a)
d631 4
d637 1
d641 4
a644 2
PERLIMPLIB	*= ..\perl56$(a)
PERLDLL		= ..\perl56.dll
d665 1
d667 1
d675 2
d678 1
a696 1
.IF "$(USE_OBJECT)" != "define"
a697 1
.ENDIF
d702 7
a708 1
		.\win32thread.c 
d785 3
a787 1
		Sys/Hostname
a791 75
SOCKET		= $(EXTDIR)\Socket\Socket
FCNTL		= $(EXTDIR)\Fcntl\Fcntl
OPCODE		= $(EXTDIR)\Opcode\Opcode
SDBM_FILE	= $(EXTDIR)\SDBM_File\SDBM_File
IO		= $(EXTDIR)\IO\IO
POSIX		= $(EXTDIR)\POSIX\POSIX
ATTRS		= $(EXTDIR)\attrs\attrs
THREAD		= $(EXTDIR)\Thread\Thread
B		= $(EXTDIR)\B\B
RE		= $(EXTDIR)\re\re
DUMPER		= $(EXTDIR)\Data\Dumper\Dumper
ERRNO		= $(EXTDIR)\Errno\Errno
PEEK		= $(EXTDIR)\Devel\Peek\Peek
BYTELOADER	= $(EXTDIR)\ByteLoader\ByteLoader
DPROF		= $(EXTDIR)\Devel\DProf\DProf
GLOB		= $(EXTDIR)\File\Glob\Glob
HOSTNAME	= $(EXTDIR)\Sys\Hostname\Hostname

SOCKET_DLL	= $(AUTODIR)\Socket\Socket.dll
FCNTL_DLL	= $(AUTODIR)\Fcntl\Fcntl.dll
OPCODE_DLL	= $(AUTODIR)\Opcode\Opcode.dll
SDBM_FILE_DLL	= $(AUTODIR)\SDBM_File\SDBM_File.dll
IO_DLL		= $(AUTODIR)\IO\IO.dll
POSIX_DLL	= $(AUTODIR)\POSIX\POSIX.dll
ATTRS_DLL	= $(AUTODIR)\attrs\attrs.dll
THREAD_DLL	= $(AUTODIR)\Thread\Thread.dll
B_DLL		= $(AUTODIR)\B\B.dll
DUMPER_DLL	= $(AUTODIR)\Data\Dumper\Dumper.dll
PEEK_DLL	= $(AUTODIR)\Devel\Peek\Peek.dll
RE_DLL		= $(AUTODIR)\re\re.dll
BYTELOADER_DLL	= $(AUTODIR)\ByteLoader\ByteLoader.dll
DPROF_DLL	= $(AUTODIR)\Devel\DProf\DProf.dll
GLOB_DLL	= $(AUTODIR)\File\Glob\Glob.dll
HOSTNAME_DLL	= $(AUTODIR)\Sys\Hostname\Hostname.dll

ERRNO_PM	= $(LIBDIR)\Errno.pm

EXTENSION_C	=		\
		$(SOCKET).c	\
		$(FCNTL).c	\
		$(OPCODE).c	\
		$(SDBM_FILE).c	\
		$(IO).c		\
		$(POSIX).c	\
		$(ATTRS).c	\
		$(THREAD).c	\
		$(RE).c		\
		$(DUMPER).c	\
		$(PEEK).c	\
		$(B).c		\
		$(BYTELOADER).c	\
		$(DPROF).c	\
		$(GLOB).c	\
		$(HOSTNAME).c

EXTENSION_DLL	=		\
		$(SOCKET_DLL)	\
		$(FCNTL_DLL)	\
		$(OPCODE_DLL)	\
		$(SDBM_FILE_DLL)\
		$(IO_DLL)	\
		$(POSIX_DLL)	\
		$(ATTRS_DLL)	\
		$(DUMPER_DLL)	\
		$(PEEK_DLL)	\
		$(B_DLL)	\
		$(RE_DLL)	\
		$(THREAD_DLL)	\
		$(BYTELOADER_DLL)	\
		$(DPROF_DLL)	\
		$(GLOB_DLL)	\
		$(HOSTNAME_DLL)

EXTENSION_PM	=		\
		$(ERRNO_PM)
d820 4
a823 2
		_o=$(o)	obj_ext=$(o)		~	\
		_a=$(a)	lib_ext=$(a)		~	\
a824 2
		dynamic_ext=$(DYNAMIC_EXT)	~	\
		nonxs_ext=$(NONXS_EXT)		~	\
d829 1
d843 1
a843 1
RIGHTMAKE	= __not_needed
d852 1
a852 1
	$(X2P) $(EXTENSION_DLL) $(EXTENSION_PM)
d899 1
a899 1
# this target added for Win95 port but used to keep the WinNT port able to 
d913 1
a913 1
	    perlglob$(o) setargv$(o) 
d925 1
a925 1
..\config.sh : config.w32 $(MINIPERL) config_sh.PL
d936 1
d940 1
a940 1
	-perl -I..\lib config_h.PL "INST_VER=$(INST_VER)"
d959 1
a959 1
	    $(mktmp $(LKPRE) $(MINI_OBJ:s,\,\\) $(LIBFILES) $(LKPOST)) 
d980 1
a980 1
.IF "$(USE_IMP_SYS)$(USE_OBJECT)" == "defineundef"
d1057 1
a1057 1
perlmain.c : runperl.c 
d1078 1
a1078 1
	copy splittree.pl .. 
d1093 9
a1101 84
$(DUMPER_DLL): $(PERLEXE) $(DUMPER).xs
	cd $(EXTDIR)\Data\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\Data\$(*B) && $(MAKE)

$(DPROF_DLL): $(PERLEXE) $(DPROF).xs
	cd $(EXTDIR)\Devel\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\Devel\$(*B) && $(MAKE)

$(GLOB_DLL): $(PERLEXE) $(GLOB).xs
	cd $(EXTDIR)\File\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\File\$(*B) && $(MAKE)

$(PEEK_DLL): $(PERLEXE) $(PEEK).xs
	cd $(EXTDIR)\Devel\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\Devel\$(*B) && $(MAKE)

$(RE_DLL): $(PERLEXE) $(RE).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(B_DLL): $(PERLEXE) $(B).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(THREAD_DLL): $(PERLEXE) $(THREAD).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(ATTRS_DLL): $(PERLEXE) $(ATTRS).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(POSIX_DLL): $(PERLEXE) $(POSIX).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(IO_DLL): $(PERLEXE) $(IO).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(SDBM_FILE_DLL) : $(PERLEXE) $(SDBM_FILE).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(FCNTL_DLL): $(PERLEXE) $(FCNTL).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(OPCODE_DLL): $(PERLEXE) $(OPCODE).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(SOCKET_DLL): $(PERLEXE) $(SOCKET).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(HOSTNAME_DLL): $(PERLEXE) $(HOSTNAME).xs
	cd $(EXTDIR)\Sys\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\Sys\$(*B) && $(MAKE)

$(BYTELOADER_DLL): $(PERLEXE) $(BYTELOADER).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(ERRNO_PM): $(PERLEXE) $(ERRNO)_pm.PL
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)
d1112 2
d1115 1
d1117 1
d1120 1
d1122 2
d1126 1
d1128 1
d1131 2
d1134 2
d1141 1
d1148 1
a1148 3
	-del /f $(EXTENSION_DLL) $(EXTENSION_PM)
	-del /f $(EXTENSION_C) $(DYNALOADER).c $(ERRNO).pm
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs $(EXTDIR)\DynaLoader\DynaLoader.pm
d1150 1
a1150 2
	-del /f $(LIBDIR)\XSLoader.pm $(EXTDIR)\DynaLoader\XSLoader.pm
	-del /f $(LIBDIR)\Devel\.exists $(LIBDIR)\File\.exists $(LIBDIR)\Sys\.exists
d1152 1
a1152 1
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm $(LIBDIR)\Thread.pm
d1154 1
a1154 1
	-del /f $(LIBDIR)\B.pm $(EXTDIR)\B\defsubs.h $(LIBDIR)\O.pm $(LIBDIR)\re.pm
d1156 1
d1159 9
a1168 1
	-if exist $(LIBDIR)\Thread rmdir /s /q $(LIBDIR)\Thread || rmdir /s $(LIBDIR)\Thread
d1171 6
d1178 9
a1186 4
	    perlaix.pod perlamiga.pod perlbs2000.pod perlcygwin.pod \
	    perldos.pod perlepoc.pod perlhpux.pod perlmachten.pod \
	    perlmacos.pod perlmpeix.pod perlos2.pod perlos390.pod \
	    perlsolaris.pod perlvmesa.pod perlvms.pod perlvos.pod \
d1189 3
a1191 3
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph h2xs perldoc \
	    dprofpp *.bat perlcc pstruct
	-cd ..\x2p && del /f find2perl s2p *.bat
d1195 2
a1196 2
	-cd $(EXTDIR) && del /s *$(a) *.def *.map *.pdb *.bs Makefile *$(o) \
	    pm_to_blib
d1212 1
a1212 1
	copy splittree.pl .. 
d1253 11
a1263 1
clean : 
d1294 1
a1294 1
 
d1297 1
a1297 1
 
@


1.3
log
@perl-5.6.0 + local changes
@
text
@a7 3
# This is set up to build a perl.exe that runs off a shared library
# (perl56.dll).  Also makes individual DLLs for the XS extensions.
#
d12 3
d21 2
a22 2
# Set these to wherever you want "dmake install" to put your
# newly built perl.
d28 78
d114 1
a114 1
INST_VER	*= \5.6.0
d164 1
a164 1
# if you ask for USE_5005THREADS above.
a168 26
# uncomment exactly one of the following
# 
# Visual C++ 2.x
#CCTYPE		*= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		*= MSVC
# Visual C++ >= 6.x
#CCTYPE		*= MSVC60
# Borland 5.02 or later
#CCTYPE		*= BORLAND
# mingw32+gcc-2.95.2 or better
CCTYPE		*= GCC

#
# uncomment this if you are compiling under Windows 95/98 and command.com
# (not needed if you're running under 4DOS/NT 6.01 or later)
#IS_WIN95	*= define

#
# uncomment next line if you want debug version of perl (big,slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		*= Debug

#
d181 1
a181 1
# compiler. Setting this options enables perl to expand wildcards in
d183 3
a185 2
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
a189 14
# if you have the source for des_fcrypt(), uncomment this and make sure the
# file exists (see README.win32).  File should be located in the same
# directory as this file.
#
#CRYPT_SRC	*= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	*= fcrypt.lib

#
a198 13
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
#CCHOME		*= c:\bc5
#CCHOME		*= $(MSVCDIR)
CCHOME		*= c:\gcc-2.95.2-msvcrt
CCINCDIR	*= $(CCHOME)\include
CCLIBDIR	*= $(CCHOME)\lib

#
d247 13
d354 1
a354 1
INST_HTML	= $(INST_POD)\html
d365 3
d369 1
d385 1
a385 1
LIBFILES	= $(CRYPT_LIB) import32.lib $(LIBC) odbc32.lib odbccp32.lib
d388 1
a388 1
OPTIMIZE	= -v -D_RTLDLL -DDEBUGGING
d401 8
d863 1
d1125 1
a1125 1
	$(LINK32) -subsystem:console -out:$@@ -stack:0x8000000 $(BLINK_FLAGS) \
d1237 17
a1253 8
	copy ..\README.amiga ..\pod\perlamiga.pod
	copy ..\README.cygwin ..\pod\perlcygwin.pod
	copy ..\README.dos ..\pod\perldos.pod
	copy ..\README.hpux ..\pod\perlhpux.pod
	copy ..\README.machten ..\pod\perlmachten.pod
	copy ..\README.os2 ..\pod\perlos2.pod
	copy ..\README.os2 ..\pod\perlos2.pod
	copy ..\vms\perlvms.pod ..\pod\perlvms.pod
d1263 1
a1263 1
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs
d1265 2
a1266 1
	-del /f $(LIBDIR)\XSLoader.pm
d1270 1
a1270 1
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
d1274 11
a1284 6
	-rmdir /s /q $(LIBDIR)\IO || rmdir /s $(LIBDIR)\IO
	-rmdir /s /q $(LIBDIR)\Thread || rmdir /s $(LIBDIR)\Thread
	-rmdir /s /q $(LIBDIR)\B || rmdir /s $(LIBDIR)\B
	-rmdir /s /q $(LIBDIR)\Data || rmdir /s $(LIBDIR)\Data
	-del /f $(PODDIR)\*.html
	-del /f $(PODDIR)\*.bat
d1286 1
a1286 1
	    dprofpp *.bat
d1293 2
a1294 2
	-rmdir /s /q $(AUTODIR) || rmdir /s $(AUTODIR)
	-rmdir /s /q $(COREDIR) || rmdir /s $(COREDIR)
d1361 1
a1361 1
	-rmdir /s /q $(MINIDIR) || rmdir /s $(MINIDIR)
d1370 16
@


1.2
log
@perl5.005_03 (stock)
@
text
@d4 1
a4 1
#	Visual C++ 2.0 thro 5.0
d6 1
a6 1
#	Mingw32 with gcc-2.8.1 or egcs-1.0.2  **experimental**
d9 1
a9 1
# (perl.dll).  Also makes individual DLLs for the XS extensions.
d21 1
a21 1
# Set these to wherever you want "nmake install" to put your
d36 1
a36 1
INST_VER	*= \5.00503
d39 7
a45 1
# uncomment to enable threads-capabilities
d47 1
a47 1
#USE_THREADS	*= define
d50 2
a51 1
# uncomment to enable multiple interpreters
d56 3
a58 1
# uncomment one
d60 34
d95 1
d97 6
a102 2
CCTYPE		*= BORLAND
#CCTYPE		*= GCC
d105 3
a107 5
# uncomment next line if you want to use the perl object
# Currently, this cannot be enabled if you ask for threads above, or
# if you are using GCC or EGCS.
#
#OBJECT		*= -DPERL_OBJECT
d111 2
a116 12
# uncomment next option if you want to use the VC++ compiler optimization.
# This option is only relevant for the Microsoft compiler; we automatically
# use maximum optimization with the other compilers (unless you specify a
# DEBUGGING build).
# Warning: This is known to produce incorrect code for compiler versions
# earlier than VC++ 98 (Visual Studio 6.0). VC++ 98 generates code that
# successfully passes the Perl regression test suite. It hasn't yet been
# widely tested with real applications though.
#
#CFG		*= Optimize

#
d118 2
a119 2
# Highly recommended.  It has patches that fix known bugs in MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3.
d123 2
d155 1
a155 1
# if you ask for PERL_OBJECT above.
d166 3
a168 3
#CCHOME		*= f:\msdev\vc
CCHOME		*= C:\bc5
#CCHOME		*= D:\packages\mingw32
d173 25
d213 1
a213 1
#EMAIL		*= 
d228 1
a228 1
.IF "$(OBJECT)" != ""
d230 1
a230 1
USE_THREADS	!= undef
d232 1
d237 10
a246 1
USE_THREADS	*= undef
d248 17
d266 3
a268 2
#BUILDOPT	*= -DPERL_GLOBAL_STRUCT
# -DUSE_PERLIO -D__STDC__=1 -DUSE_SFIO -DI_SFIO -I\sfio97\include
d274 1
a274 1
.IF "$(OBJECT)" != ""
d276 1
a276 1
.ELIF "$(USE_THREADS)" == "define"
d278 2
d284 16
d303 13
d329 1
a333 1
RUNTIME		= -D_RTLDLL
d336 1
a336 1
DEFINES		= -DWIN32 $(BUILDOPT) $(CRYPT_FLAG)
d345 1
a345 1
OPTIMIZE	= -v $(RUNTIME) -DDEBUGGING
d348 1
a348 1
OPTIMIZE	= -O2 $(RUNTIME)
d354 1
a354 1
LINK_FLAGS	= $(LINK_DBG) -L"$(CCLIBDIR)"
d365 1
d373 1
a373 1
RUNTIME		=
d375 1
a375 1
DEFINES		= -DWIN32 $(BUILDOPT) $(CRYPT_FLAG)
d380 8
a387 3
LIBC		= -lcrtdll
LIBFILES	= $(CRYPT_LIB) -ladvapi32 -luser32 -lnetapi32 -lwsock32 \
		-lmingw32 -lgcc -lmoldname $(LIBC) -lkernel32
d390 1
a390 1
OPTIMIZE	= -g -O2 $(RUNTIME) -DDEBUGGING
d393 1
a393 1
OPTIMIZE	= -g -O2 $(RUNTIME)
d398 1
a398 1
LINK_FLAGS	= $(LINK_DBG) -L"$(CCLIBDIR)"
d403 3
d408 2
a409 2
CC		= cl.exe
LINK32		= link.exe
d411 1
a416 1
RUNTIME		= -MD
d419 1
a419 1
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(BUILDOPT) $(CRYPT_FLAG)
d424 2
a425 3
.IF "$(USE_PERLCRT)" == ""
.IF  "$(CFG)" == "Debug"
PERLCRTLIBC	= msvcrtd.lib
d427 1
a427 8
PERLCRTLIBC	= msvcrt.lib
.ENDIF
.ELSE
.IF  "$(CFG)" == "Debug"
PERLCRTLIBC	= PerlCRTD.lib
.ELSE
PERLCRTLIBC	= PerlCRT.lib
.ENDIF
d430 2
a431 5
.IF "$(RUNTIME)" == "-MD"
LIBC		= $(PERLCRTLIBC)
.ELSE
LIBC		= libcmt.lib
.ENDIF
d435 1
a435 1
OPTIMIZE	= -Od $(RUNTIME) -Z7 -D_DEBUG -DDEBUGGING
d437 1
a437 1
OPTIMIZE	= -Od $(RUNTIME)d -Zi -D_DEBUG -DDEBUGGING
d442 3
a444 1
OPTIMIZE	= -O2 $(RUNTIME) -DNDEBUG
d446 1
a446 1
OPTIMIZE	= -Od $(RUNTIME) -DNDEBUG
d451 4
a454 3
LIBBASEFILES	= $(CRYPT_LIB) oldnames.lib kernel32.lib user32.lib gdi32.lib \
		winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib \
		oleaut32.lib netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
d462 3
a464 1
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) -machine:$(PROCESSOR_ARCHITECTURE)
d469 2
d473 3
a475 1
.IF "$(OBJECT)" != ""
d477 1
d480 7
a486 1
CFLAGS_O	= $(CFLAGS) $(OBJECT)
d501 1
a501 1
.SUFFIXES : .c $(o) .dll $(a) .exe 
d511 1
a511 1
	$(LINK32) -Tpd -ap $(LINK_FLAGS) c0d32$(o) $<,$@@,,$(LIBFILES),$(*B).def
d514 2
a515 2
	$(LINK32) -o $@@ $(LINK_FLAGS) $< $(LIBFILES)
	$(IMPLIB) -def $(*B).def $(*B).a $@@
d518 1
a518 1
	    -out:$@@ $(LINK_FLAGS) $(LIBFILES) $< $(LIBPERL)  
d521 2
a522 10
#
INST_BIN	= $(INST_TOP)$(INST_VER)\bin\$(ARCHNAME)
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_POD	= $(INST_LIB)\pod
INST_HTML	= $(INST_POD)\html
LIBDIR		= ..\lib
EXTDIR		= ..\ext
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\extutils
d529 1
d541 1
a546 1
		..\utils\pstruct	\
d553 3
d558 1
a558 1
		bin\www.pl		\
d573 1
a573 5
.IF "$(OBJECT)" == "-DPERL_OBJECT"
PERLIMPLIB	= ..\libperlcore$(a)
.ELSE
PERLIMPLIB	= ..\libperl$(a)
.ENDIF
a578 3
.IF "$(USE_PERLCRT)" == ""
PERL95EXE	= ..\perl95.exe
.ENDIF
d582 2
a583 9
.IF "$(OBJECT)" == "-DPERL_OBJECT"
PERLIMPLIB	*= ..\perlcore$(a)
PERLDLL		= ..\perlcore.dll
CAPILIB		= $(COREDIR)\perlCAPI$(a)
.ELSE
PERLIMPLIB	*= ..\perl$(a)
PERLDLL		= ..\perl.dll
CAPILIB		=
.ENDIF
a596 1
		..\byterun.c	\
d607 1
d621 5
a625 1
		..\util.c
d631 1
a631 1
.IF "$(OBJECT)" == ""
d637 2
a638 5
		.\win32sck.c

.IF "$(USE_THREADS)" == "define"
WIN32_SRC	+= .\win32thread.c 
.ENDIF
a643 9
PERL95_SRC	=		\
		perl95.c	\
		win32mt.c	\
		win32sckmt.c

.IF "$(CRYPT_SRC)" != ""
PERL95_SRC	+= .\$(CRYPT_SRC)
.ENDIF

a645 5

.IF "$(OBJECT)" == ""
DLL_SRC		+= perllib.c
.ENDIF

a654 2
		..\byterun.h	\
		..\bytecode.h	\
d669 1
d680 1
d682 1
a700 1
PERL95_OBJ	= $(PERL95_SRC:db:+$(o))
a706 1
.IF "$(OBJECT)" == ""
a707 4
.ELSE
PERLEXE_OBJ	+= $(WIN32_OBJ) $(DLL_OBJ)
PERL95_OBJ	+= DynaLoadmt$(o)
.ENDIF
d714 2
a715 1
		Data/Dumper
d732 5
d748 1
d750 4
d768 6
a773 1
		$(B).c
d784 8
a791 1
		$(B_DLL)
a795 7
# re.dll doesn't build with PERL_OBJECT yet
.IF "$(OBJECT)" == ""
EXTENSION_DLL	+=		\
		$(THREAD_DLL)	\
		$(RE_DLL)
.ENDIF

d801 4
d806 40
a845 24
		"INST_DRV=$(INST_DRV)"			\
		"INST_TOP=$(INST_TOP)"			\
		"INST_VER=$(INST_VER)"			\
		"archname=$(ARCHNAME)"			\
		"cc=$(CC)"				\
		"ccflags=$(OPTIMIZE:s/"/\"/) $(DEFINES) $(OBJECT)"	\
		"cf_email=$(EMAIL)"			\
		"d_crypt=$(D_CRYPT)"			\
		"d_mymalloc=$(PERL_MALLOC)"		\
		"libs=$(LIBFILES:f)"			\
		"incpath=$(CCINCDIR:s/"/\"/)"		\
		"libperl=$(PERLIMPLIB:f)"		\
		"libpth=$(CCLIBDIR:s/"/\"/);$(EXTRALIBDIRS:s/"/\"/)"	\
		"libc=$(LIBC)"				\
		"make=dmake"				\
		"_o=$(o)" "obj_ext=$(o)"		\
		"_a=$(a)" "lib_ext=$(a)"		\
		"static_ext=$(STATIC_EXT)"		\
		"dynamic_ext=$(DYNAMIC_EXT)"		\
		"nonxs_ext=$(NONXS_EXT)"		\
		"usethreads=$(USE_THREADS)"		\
		"usemultiplicity=$(USE_MULTI)"		\
		"LINK_FLAGS=$(LINK_FLAGS:s/"/\"/)"		\
		"optimize=$(OPTIMIZE:s/"/\"/)"
d851 3
a853 2
all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(PERLEXE) $(PERL95EXE) \
	$(CAPILIB) $(X2P) $(EXTENSION_DLL) $(EXTENSION_PM)
d857 47
a903 1
#------------------------------------------------------------
d908 1
a908 1
	$(LINK32) -Tpe -ap $(LINK_FLAGS) c0x32$(o) perlglob$(o) \
d911 1
a911 1
	$(LINK32) $(LINK_FLAGS) -o $@@ perlglob$(o) $(LIBFILES)
d913 1
a913 1
	$(LINK32) $(LINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
d927 2
a928 1
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) config.w32 > ..\config.sh
d934 2
a935 1
	perl config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh
d951 1
a951 1
	    || $(MAKE) $(MAKEMACROS) $(CONFIGPM)
d953 1
a953 1
$(MINIPERL) : $(MINIDIR) $(MINI_OBJ)
d955 1
a955 1
	$(LINK32) -Tpe -ap $(LINK_FLAGS) \
d958 2
a959 2
	$(LINK32) -v -o $@@ $(LINK_FLAGS) \
	    $(mktmp $(LKPRE) $(MINI_OBJ:s,\,\\) $(LIBFILES) $(LKPOST))
d962 1
a962 1
	    @@$(mktmp $(LINK_FLAGS) $(LIBFILES) $(MINI_OBJ:s,\,\\))
d969 1
a969 1
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ ..\$(*B).c
d974 12
a992 1
$(PERL95_OBJ)	: $(CORE_H)
d995 3
a997 3
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym makedef.pl
	$(MINIPERL) -w makedef.pl $(OPTIMIZE) $(DEFINES) $(OBJECT) \
	    CCTYPE=$(CCTYPE) > perldll.def
d999 1
a999 1
$(PERLDLL): perldll.def $(PERLDLL_OBJ)
d1001 1
a1001 1
	$(LINK32) -Tpd -ap $(LINK_FLAGS) \
d1008 1
a1008 1
	$(LINK32) -mdll -o $@@ -Wl,--base-file -Wl,perl.base $(LINK_FLAGS) \
d1011 5
a1015 5
                --dllname perl.dll \
                --def perldll.def \
                --base-file perl.base \
                --output-exp perl.exp
	$(LINK32) -mdll -o $@@ $(LINK_FLAGS) \
d1020 2
a1021 1
	    @@$(mktmp $(LINK_FLAGS) $(LIBFILES) $(PERLDLL_OBJ:s,\,\\))
a1024 3
perl.def  : $(MINIPERL) makeperldef.pl
	$(MINIPERL) -I..\lib makeperldef.pl $(NULL) > perl.def

d1047 1
a1047 1
	$(LINK32) -Tpe -ap $(LINK_FLAGS) \
d1050 1
a1050 1
	$(LINK32) -v -o $@@ $(LINK_FLAGS) \
d1054 1
a1054 1
	    @@$(mktmp $(LINK_FLAGS) $(LIBFILES) $(X2P_OBJ:s,\,\\))
d1063 1
a1063 1
$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ)
d1065 1
a1065 1
	$(LINK32) -Tpe -ap $(LINK_FLAGS) \
d1070 1
a1070 1
	$(LINK32) -o $@@ $(LINK_FLAGS)  \
d1073 2
a1074 2
	$(LINK32) -subsystem:console -out:$@@ $(LINK_FLAGS) $(LIBFILES) \
	    $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) 
d1076 2
a1080 31
.IF "$(CCTYPE)" != "BORLAND"
.IF "$(CCTYPE)" != "GCC"
.IF "$(USE_PERLCRT)" == ""

perl95.c : runperl.c 
	copy runperl.c perl95.c

perl95$(o) : perl95.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c perl95.c

win32sckmt$(o) : win32sck.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)win32sckmt$(o) win32sck.c

win32mt$(o) : win32.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)win32mt$(o) win32.c

DynaLoadmt$(o) : $(DYNALOADER).c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)DynaLoadmt$(o) $(DYNALOADER).c

$(PERL95EXE): $(PERLDLL) $(CONFIGPM) $(PERL95_OBJ)
	$(LINK32) -subsystem:console -nodefaultlib -out:$@@ $(LINK_FLAGS) \
	    $(LIBBASEFILES) $(PERL95_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) \
	    libcmt.lib

.ENDIF
.ENDIF
.ENDIF

d1084 1
d1086 1
a1089 24
.IF "$(OBJECT)" == "-DPERL_OBJECT"

perlCAPI.cpp : $(MINIPERL)
	$(MINIPERL) GenCAPI.pl $(COREDIR)

perlCAPI$(o) : perlCAPI.cpp
.IF "$(CCTYPE)" == "BORLAND"
	$(CC) $(CFLAGS_O) -c $(OBJOUT_FLAG)perlCAPI$(o) perlCAPI.cpp
.ELIF "$(CCTYPE)" == "GCC"
	$(CC) $(CFLAGS_O) -c $(OBJOUT_FLAG)perlCAPI$(o) perlCAPI.cpp
.ELSE
	$(CC) $(CFLAGS_O) $(RUNTIME) -UPERLDLL -c \
	    $(OBJOUT_FLAG)perlCAPI$(o) perlCAPI.cpp
.ENDIF

$(CAPILIB) : perlCAPI.cpp perlCAPI$(o)
.IF "$(CCTYPE)" == "BORLAND"
	$(LIB32) $(LIBOUT_FLAG)$(CAPILIB) +perlCAPI$(o)
.ELSE
	$(LIB32) $(LIBOUT_FLAG)$(CAPILIB) perlCAPI$(o)
.ENDIF

.ENDIF

d1098 15
d1163 10
d1185 8
a1192 1
	copy ..\README.win32 ..\pod\perlwin32.pod
d1197 1
a1197 1
	-del /f $(MINIPERL) $(PERLEXE) $(PERL95EXE) $(PERLDLL) $(GLOBEXE) \
d1204 1
d1209 3
a1211 1
	-del /f $(LIBDIR)\Data\Dumper.pm
d1219 1
a1219 1
	    pstruct *.bat
a1222 3
.IF "$(PERL95EXE)" != ""
	-del /f perl95.c
.ENDIF
d1231 1
a1231 1
installbare : utils
d1233 1
a1233 3
.IF "$(PERL95EXE)" != ""
	$(XCOPY) $(PERL95EXE) $(INST_BIN)\*.*
.ENDIF
a1235 1
	$(XCOPY) bin\network.pl $(INST_LIB)\*.*
d1266 1
a1266 1
test : test-prep
d1271 10
a1280 1
	cd ..\t && $(PERLEXE) -I.\lib harness
a1286 1
	-@@erase perlCAPI.cpp
d1291 1
d1298 1
a1298 1
	-@@erase ..\*$(o) ..\*$(a) ..\*.exp ..\*.res *$(o) *$(a) *.exp *.res
@


1.1
log
@perl 5.004_04
@
text
@d1 1121
a1121 607
#
# Makefile to build perl on Windowns NT using Microsoft NMAKE.
#
#
# This is set up to build a perl.exe that runs off a shared library
# (perl.dll).  Also makes individual DLLs for the XS extensions.
#

#
# Set these to wherever you want "nmake install" to put your
# newly built perl.
INST_DRV=c:
INST_TOP=$(INST_DRV)\perl

#
# uncomment one if you are using Visual C++ 2.x or Borland
# comment out both if you are using Visual C++ 4.x and above
#CCTYPE=MSVC20
CCTYPE=BORLAND

#
# uncomment next line if you want debug version of perl (big,slow)
#CFG=Debug

#
# set the install locations of the compiler include/libraries
#CCHOME = f:\msdev\vc
CCHOME = D:\bc5
CCINCDIR = $(CCHOME)\include
CCLIBDIR = $(CCHOME)\lib

#
# set this to point to cmd.exe (only needed if you use some
# alternate shell that doesn't grok cmd.exe style commands)
SHELL = g:\winnt\system32\cmd.exe

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#EMAIL = 

##################### CHANGE THESE ONLY IF YOU MUST #####################

#
# Programs to compile, build .lib files and link
#

.USESHELL :

.IF "$(CCTYPE)" == "BORLAND"

CC = bcc32
LINK32 = tlink32
LIB32 = tlib
IMPLIB = implib

#
# Options
#
RUNTIME  = -D_RTLDLL
INCLUDES = -I.\include -I. -I.. -I$(CCINCDIR)
#PCHFLAGS = -H -H$(INTDIR)\bcmoduls.pch 
DEFINES  = -DWIN32 -DPERLDLL
SUBSYS   = console
LIBC = cw32mti.lib
LIBFILES = import32.lib $(LIBC) odbc32.lib odbccp32.lib

WINIOMAYBE =

.IF  "$(CFG)" == "Debug"
OPTIMIZE = -v $(RUNTIME)
LINK_DBG = -v
.ELSE
OPTIMIZE = -O $(RUNTIME)
LINK_DBG = 
.ENDIF

CFLAGS   = -w -tWM -tWD $(INCLUDES) $(DEFINES) $(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS  = $(LINK_DBG) -L$(CCLIBDIR)
OBJOUT_FLAG = -o

.ELSE

CC=cl.exe
LINK32=link.exe
LIB32=$(LINK32) -lib
#
# Options
#
.IF "$(RUNTIME)" == ""
RUNTIME  = -MD
.ENDIF
INCLUDES = -I.\include -I. -I..
#PCHFLAGS = -Fp$(INTDIR)\vcmoduls.pch -YX 
DEFINES  = -DWIN32 -D_CONSOLE -DPERLDLL
SUBSYS   = console

.IF "$(RUNTIME)" == "-MD"
LIBC = msvcrt.lib
WINIOMAYBE =
.ELSE
LIBC = libcmt.lib
WINIOMAYBE = win32io.obj
.ENDIF

.IF  "$(CFG)" == "Debug"
.IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE = -Od $(RUNTIME) -Z7 -D_DEBUG
.ELSE
OPTIMIZE = -Od $(RUNTIME)d -Z7 -D_DEBUG
.ENDIF
LINK_DBG = -debug -pdb:none
.ELSE
.IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE = -Od $(RUNTIME) -DNDEBUG
.ELSE
OPTIMIZE = -Od $(RUNTIME) -DNDEBUG
.ENDIF
LINK_DBG = -release
.ENDIF

# we don't add LIBC here, the compiler do it based on -MD/-MT
LIBFILES = oldnames.lib kernel32.lib user32.lib gdi32.lib \
	winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib \
	oleaut32.lib netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
	version.lib odbc32.lib odbccp32.lib

CFLAGS   = -nologo -W3 $(INCLUDES) $(DEFINES) $(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS  = -nologo $(LIBFILES) $(LINK_DBG) -machine:I386
OBJOUT_FLAG = -Fo

.ENDIF

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

#
# Rules
# 
.SUFFIXES : 
.SUFFIXES : .c .obj .dll .lib .exe

.c.obj:
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $<

.IF "$(CCTYPE)" == "BORLAND"

.obj.dll:
	$(LINK32) -Tpd -ap $(LINK_FLAGS) c0d32.obj $<,$@@,,$(LIBFILES),$(*B).def
	$(IMPLIB) $(*B).lib $@@
.ELSE

.obj.dll:
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(LINK_FLAGS) $< $(LIBPERL)  

.ENDIF

#
INST_BIN=$(INST_TOP)\bin
INST_LIB=$(INST_TOP)\lib
INST_POD=$(INST_LIB)\pod
INST_HTML=$(INST_POD)\html
LIBDIR=..\lib
EXTDIR=..\ext
PODDIR=..\pod
EXTUTILSDIR=$(LIBDIR)\extutils

#
# various targets
PERLIMPLIB=..\perl.lib
MINIPERL=..\miniperl.exe
PERLDLL=..\perl.dll
PERLEXE=..\perl.exe
GLOBEXE=..\perlglob.exe
CONFIGPM=..\lib\Config.pm
MINIMOD=..\lib\ExtUtils\Miniperl.pm

PL2BAT=bin\pl2bat.pl
GLOBBAT = bin\perlglob.bat

.IF "$(CCTYPE)" == "BORLAND"

# Borland wildargs is incompatible with MS setargv
CFGSH_TMPL = config.bc
CFGH_TMPL = config_H.bc
# Borland's perl.exe will work on W95, so we don't make this

.ELSE

MAKE = nmake -nologo
CFGSH_TMPL = config.vc
CFGH_TMPL = config_H.vc
PERL95EXE=..\perl95.exe

.ENDIF

XCOPY=xcopy /f /r /i /d
RCOPY=xcopy /f /r /i /e /d
#NULL=

#
# filenames given to xsubpp must have forward slashes (since it puts
# full pathnames in #line strings)
XSUBPP=..\$(MINIPERL) -I..\..\lib ..\$(EXTUTILSDIR)\xsubpp -C++ -prototypes

CORE_C=	..\av.c		\
	..\deb.c	\
	..\doio.c	\
	..\doop.c	\
	..\dump.c	\
	..\globals.c	\
	..\gv.c		\
	..\hv.c		\
	..\mg.c		\
	..\op.c		\
	..\perl.c	\
	..\perlio.c	\
	..\perly.c	\
	..\pp.c		\
	..\pp_ctl.c	\
	..\pp_hot.c	\
	..\pp_sys.c	\
	..\regcomp.c	\
	..\regexec.c	\
	..\run.c	\
	..\scope.c	\
	..\sv.c		\
	..\taint.c	\
	..\toke.c	\
	..\universal.c	\
	..\util.c

CORE_OBJ= ..\av.obj	\
	..\deb.obj	\
	..\doio.obj	\
	..\doop.obj	\
	..\dump.obj	\
	..\globals.obj	\
	..\gv.obj	\
	..\hv.obj	\
	..\mg.obj	\
	..\op.obj	\
	..\perl.obj	\
	..\perlio.obj	\
	..\perly.obj	\
	..\pp.obj	\
	..\pp_ctl.obj	\
	..\pp_hot.obj	\
	..\pp_sys.obj	\
	..\regcomp.obj	\
	..\regexec.obj	\
	..\run.obj	\
	..\scope.obj	\
	..\sv.obj	\
	..\taint.obj	\
	..\toke.obj	\
	..\universal.obj\
	..\util.obj

WIN32_C = perllib.c \
	win32.c \
	win32io.c \
	win32sck.c

WIN32_OBJ = win32.obj \
	win32io.obj \
	win32sck.obj

PERL95_OBJ = perl95.obj \
	win32mt.obj \
	win32iomt.obj \
	win32sckmt.obj

DLL_OBJ = perllib.obj $(DYNALOADER).obj

CORE_H = ..\av.h	\
	..\cop.h	\
	..\cv.h		\
	..\dosish.h	\
	..\embed.h	\
	..\form.h	\
	..\gv.h		\
	..\handy.h	\
	..\hv.h		\
	..\mg.h		\
	..\nostdio.h	\
	..\op.h		\
	..\opcode.h	\
	..\perl.h	\
	..\perlio.h	\
	..\perlsdio.h	\
	..\perlsfio.h	\
	..\perly.h	\
	..\pp.h		\
	..\proto.h	\
	..\regexp.h	\
	..\scope.h	\
	..\sv.h		\
	..\unixish.h	\
	..\util.h	\
	..\XSUB.h	\
	.\config.h	\
	..\EXTERN.h	\
	.\include\dirent.h	\
	.\include\netdb.h	\
	.\include\sys\socket.h	\
	.\win32.h


EXTENSIONS=DynaLoader Socket IO Fcntl Opcode SDBM_File

DYNALOADER=$(EXTDIR)\DynaLoader\DynaLoader
SOCKET=$(EXTDIR)\Socket\Socket
FCNTL=$(EXTDIR)\Fcntl\Fcntl
OPCODE=$(EXTDIR)\Opcode\Opcode
SDBM_FILE=$(EXTDIR)\SDBM_File\SDBM_File
IO=$(EXTDIR)\IO\IO

SOCKET_DLL=..\lib\auto\Socket\Socket.dll
FCNTL_DLL=..\lib\auto\Fcntl\Fcntl.dll
OPCODE_DLL=..\lib\auto\Opcode\Opcode.dll
SDBM_FILE_DLL=..\lib\auto\SDBM_File\SDBM_File.dll
IO_DLL=..\lib\auto\IO\IO.dll

STATICLINKMODULES=DynaLoader
DYNALOADMODULES=	\
	$(SOCKET_DLL)	\
	$(FCNTL_DLL)	\
	$(OPCODE_DLL)	\
	$(SDBM_FILE_DLL)\
	$(IO_DLL)

POD2HTML=$(PODDIR)\pod2html
POD2MAN=$(PODDIR)\pod2man
POD2LATEX=$(PODDIR)\pod2latex
POD2TEXT=$(PODDIR)\pod2text

#
# Top targets
#

all: $(PERLEXE) $(PERL95EXE) $(GLOBEXE) $(DYNALOADMODULES) $(MINIMOD) $(GLOBBAT)

$(DYNALOADER).obj : $(DYNALOADER).c $(CORE_H) $(EXTDIR)\DynaLoader\dlutils.c

#------------------------------------------------------------

$(GLOBEXE): perlglob.obj
.IF "$(CCTYPE)" == "BORLAND"
	$(CC) -c -w -v -tWM -I$(CCINCDIR) perlglob.c
	$(LINK32) -Tpe -ap $(LINK_FLAGS) c0x32.obj perlglob.obj \
	    $(CCLIBDIR)\32BIT\wildargs.obj,$@@,,import32.lib cw32mt.lib,
.ELSE
	$(LINK32) $(LINK_FLAGS) -out:$@@ -subsystem:$(SUBSYS) perlglob.obj setargv.obj 
.ENDIF

$(GLOBBAT) : ..\lib\File\DosGlob.pm $(MINIPERL)
	$(MINIPERL) $(PL2BAT) - < ..\lib\File\DosGlob.pm > $(GLOBBAT)

perlglob.obj  : perlglob.c

..\miniperlmain.obj : ..\miniperlmain.c $(CORE_H)

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

.\config.h : $(CFGSH_TMPL)
	-del /f config.h
	copy $(CFGH_TMPL) config.h

..\config.sh : config.w32 $(MINIPERL) config_sh.PL
	$(MINIPERL) -I..\lib config_sh.PL "INST_DRV=$(INST_DRV)" \
	    "INST_TOP=$(INST_TOP)" "cc=$(CC)" "ccflags=$(RUNTIME) -DWIN32" \
	    "cf_email=$(EMAIL)" "libs=$(LIBFILES:f)" "incpath=$(CCINCDIR)" \
	    "libpth=$(strip $(CCLIBDIR) $(LIBFILES:d))" "libc=$(LIBC)" \
	    config.w32 > ..\config.sh

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
	cd .. && miniperl configpm
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h ..\lib\CORE\*.*
	$(XCOPY) *.h ..\lib\CORE\*.*
	$(RCOPY) include ..\lib\CORE\*.*
	$(MINIPERL) -I..\lib config_h.PL || $(MAKE) CCTYPE=$(CCTYPE) \
	    RUNTIME=$(RUNTIME) CFG=$(CFG) $(CONFIGPM)

$(MINIPERL) : ..\miniperlmain.obj $(CORE_OBJ) $(WIN32_OBJ)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(LINK_FLAGS) \
	    @@$(mktmp c0x32.obj ..\miniperlmain.obj \
		$(CORE_OBJ:s,\,\\) $(WIN32_OBJ:s,\,\\),$@@,,$(LIBFILES),)
.ELSE
	$(LINK32) -subsystem:console -out:$@@ \
	    @@$(mktmp $(LINK_FLAGS) ..\miniperlmain.obj \
		$(CORE_OBJ:s,\,\\) $(WIN32_OBJ:s,\,\\))
.ENDIF

$(WIN32_OBJ) : $(CORE_H)
$(CORE_OBJ)  : $(CORE_H)
$(DLL_OBJ)   : $(CORE_H) 

perldll.def : $(MINIPERL) $(CONFIGPM)
	$(MINIPERL) -w makedef.pl $(CCTYPE) > perldll.def

$(PERLDLL): perldll.def $(CORE_OBJ) $(WIN32_OBJ) $(DLL_OBJ)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(LINK_FLAGS) \
	    @@$(mktmp c0d32.obj $(CORE_OBJ:s,\,\\) \
		$(WIN32_OBJ:s,\,\\) $(DLL_OBJ:s,\,\\)\n \
		$@@,\n \
		$(LIBFILES)\n \
		perldll.def\n)
	$(IMPLIB) $*.lib $@@
.ELSE
	$(LINK32) -dll -def:perldll.def -out:$@@ \
	    @@$(mktmp $(LINK_FLAGS) $(CORE_OBJ:s,\,\\) \
		$(WIN32_OBJ:s,\,\\) $(DLL_OBJ:s,\,\\))
.ENDIF
	$(XCOPY) $(PERLIMPLIB) ..\lib\CORE

perl.def  : $(MINIPERL) makeperldef.pl
	$(MINIPERL) -I..\lib makeperldef.pl $(NULL) > perl.def

$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd .. && miniperl minimod.pl > lib\ExtUtils\Miniperl.pm

perlmain.c : runperl.c 
	copy runperl.c perlmain.c

perlmain.obj : perlmain.c
	$(CC) $(CFLAGS) -UPERLDLL -c perlmain.c


$(PERLEXE): $(PERLDLL) $(CONFIGPM) perlmain.obj  
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(LINK_FLAGS) \
	    @@$(mktmp c0x32.obj perlmain.obj $(WINIOMAYBE)\n \
	    $@@,\n \
	    $(PERLIMPLIB) $(LIBFILES)\n)
.ELSE
	$(LINK32) -subsystem:console -out:perl.exe $(LINK_FLAGS) \
	    perlmain.obj $(WINIOMAYBE) $(PERLIMPLIB) 
	copy perl.exe $@@
	del perl.exe
.ENDIF
	copy splittree.pl .. 
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" "../LIB/auto"
	attrib -r ..\t\*.*
	copy test ..\t

.IF "$(CCTYPE)" != "BORLAND"

perl95.c : runperl.c 
	copy runperl.c perl95.c

perl95.obj : perl95.c
	$(CC) $(CFLAGS) -MT -UPERLDLL -c perl95.c

win32iomt.obj : win32io.c
	$(CC) $(CFLAGS) -MT -c $(OBJOUT_FLAG)win32iomt.obj win32io.c

win32sckmt.obj : win32sck.c
	$(CC) $(CFLAGS) -MT -c $(OBJOUT_FLAG)win32sckmt.obj win32sck.c

win32mt.obj : win32.c
	$(CC) $(CFLAGS) -MT -c $(OBJOUT_FLAG)win32mt.obj win32.c

$(PERL95EXE): $(PERLDLL) $(CONFIGPM) $(PERL95_OBJ)
	$(LINK32) -subsystem:console -out:perl95.exe $(LINK_FLAGS) \
	    $(PERL95_OBJ) $(PERLIMPLIB) 
	copy perl95.exe $@@
	del perl95.exe

.ENDIF

$(DYNALOADER).c: $(MINIPERL) $(EXTDIR)\DynaLoader\dl_win32.xs $(CONFIGPM)
	if not exist ..\lib\auto mkdir ..\lib\auto
	$(XCOPY) $(EXTDIR)\$(*B)\$(*B).pm $(LIBDIR)\$(NULL)
	cd $(EXTDIR)\$(*B) && $(XSUBPP) dl_win32.xs > $(*B).c
	$(XCOPY) $(EXTDIR)\$(*B)\dlutils.c .

$(EXTDIR)\DynaLoader\dl_win32.xs: dl_win32.xs
	copy dl_win32.xs $(EXTDIR)\DynaLoader\dl_win32.xs

$(IO_DLL): $(PERLEXE) $(CONFIGPM) $(IO).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(SDBM_FILE_DLL) : $(PERLEXE) $(SDBM_FILE).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(FCNTL_DLL): $(PERLEXE) $(FCNTL).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(OPCODE_DLL): $(PERLEXE) $(OPCODE).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(SOCKET_DLL): $(SOCKET).xs $(PERLEXE)
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

doc: $(PERLEXE)
	cd ..\pod && $(MAKE) -f ..\win32\pod.mak checkpods \
		pod2html pod2latex pod2man pod2text
	cd ..\pod && $(XCOPY) *.bat ..\win32\bin\*.*
	copy ..\README.win32 ..\pod\perlwin32.pod
	$(PERLEXE) ..\installhtml --podroot=.. --htmldir=./html \
	    --podpath=pod:lib:ext:utils --htmlroot="//$(INST_HTML:s,:,|,)" \
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse

utils: $(PERLEXE)
	cd ..\utils && $(MAKE) PERL=$(MINIPERL)
	cd ..\utils && $(PERLEXE) ..\win32\$(PL2BAT) h2ph splain perlbug \
		pl2pm c2ph h2xs perldoc pstruct
	$(XCOPY) ..\utils\*.bat bin\*.*
	$(PERLEXE) $(PL2BAT) bin\network.pl bin\www.pl bin\runperl.pl \
			bin\pl2bat.pl

distclean: clean
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl.lib $(MINIMOD)
	-del /f *.def *.map
	-del /f $(SOCKET_DLL) $(IO_DLL) $(SDBM_FILE_DLL) $(FCNTL_DLL) \
		$(OPCODE_DLL)
	-del /f $(SOCKET).c $(IO).c $(SDBM_FILE).c $(FCNTL).c $(OPCODE).c \
		$(DYNALOADER).c
	-del /f $(PODDIR)\*.html
	-del /f $(PODDIR)\*.bat
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new
.IF "$(PERL95EXE)" != ""
	-del /f perl95.c
.ENDIF
	-del /f bin\*.bat
	-cd $(EXTDIR) && del /s *.lib *.def *.map *.bs Makefile *.obj pm_to_blib
	-rmdir /s /q ..\lib\auto
	-rmdir /s /q ..\lib\CORE

install : all doc utils
	if not exist $(INST_TOP) mkdir $(INST_TOP)
	echo I $(INST_TOP) L $(LIBDIR)
	$(XCOPY) $(PERLEXE) $(INST_BIN)\*.*
.IF "$(PERL95EXE)" != ""
	$(XCOPY) $(PERL95EXE) $(INST_BIN)\*.*
.ENDIF
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	$(XCOPY) $(PERLDLL) $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_BIN)\*.*
	$(RCOPY) ..\lib $(INST_LIB)\*.*
	$(XCOPY) ..\pod\*.bat $(INST_BIN)\*.*
	$(XCOPY) ..\pod\*.pod $(INST_POD)\*.*
	$(RCOPY) html\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	copy splittree.pl .. 
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" "../LIB/auto"
	$(RCOPY) ..\lib $(INST_LIB)\*.*

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM)
	$(XCOPY) $(MINIPERL) ..\t\perl.exe
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
	attrib -r ..\t\*.*
	copy test ..\t
	cd ..\t && \
	$(MINIPERL) -I..\lib test base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t

test : all
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
	cd ..\t && $(PERLEXE) -I..\lib harness

clean : 
	-@@erase miniperlmain.obj
	-@@erase $(MINIPERL)
	-@@erase perlglob.obj
	-@@erase perlmain.obj
	-@@erase config.w32
	-@@erase /f config.h
	-@@erase $(GLOBEXE)
	-@@erase $(PERLEXE)
	-@@erase $(PERLDLL)
	-@@erase $(CORE_OBJ)
	-@@erase $(WIN32_OBJ)
	-@@erase $(DLL_OBJ)
	-@@erase ..\*.obj ..\*.lib ..\*.exp *.obj *.lib *.exp
	-@@erase ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@erase *.ilk
	-@@erase *.pdb


@


1.1.1.1
log
@perl5.005_03
@
text
@d1 607
a607 1121
#
# Makefile to build perl on Windows NT using DMAKE.
# Supported compilers:
#	Visual C++ 2.0 thro 5.0
#	Borland C++ 5.02
#	Mingw32 with gcc-2.8.1 or egcs-1.0.2  **experimental**
#
# This is set up to build a perl.exe that runs off a shared library
# (perl.dll).  Also makes individual DLLs for the XS extensions.
#

##
## Make sure you read README.win32 *before* you mess with anything here!
##

##
## Build configuration.  Edit the values below to suit your needs.
##

#
# Set these to wherever you want "nmake install" to put your
# newly built perl.
#
INST_DRV	*= c:
INST_TOP	*= $(INST_DRV)\perl

#
# Comment this out if you DON'T want your perl installation to be versioned.
# This means that the new installation will overwrite any files from the
# old installation at the same INST_TOP location.  Leaving it enabled is
# the safest route, as perl adds the extra version directory to all the
# locations it installs files to.  If you disable it, an alternative
# versioned installation can be obtained by setting INST_TOP above to a
# path that includes an arbitrary version string.
#
INST_VER	*= \5.00503

#
# uncomment to enable threads-capabilities
#
#USE_THREADS	*= define

#
# uncomment to enable multiple interpreters
#
#USE_MULTI	*= define

#
# uncomment one
#
#CCTYPE		*= MSVC20
#CCTYPE		*= MSVC
CCTYPE		*= BORLAND
#CCTYPE		*= GCC

#
# uncomment next line if you want to use the perl object
# Currently, this cannot be enabled if you ask for threads above, or
# if you are using GCC or EGCS.
#
#OBJECT		*= -DPERL_OBJECT

#
# uncomment next line if you want debug version of perl (big,slow)
#
#CFG		*= Debug

#
# uncomment next option if you want to use the VC++ compiler optimization.
# This option is only relevant for the Microsoft compiler; we automatically
# use maximum optimization with the other compilers (unless you specify a
# DEBUGGING build).
# Warning: This is known to produce incorrect code for compiler versions
# earlier than VC++ 98 (Visual Studio 6.0). VC++ 98 generates code that
# successfully passes the Perl regression test suite. It hasn't yet been
# widely tested with real applications though.
#
#CFG		*= Optimize

#
# uncomment to enable use of PerlCRT.DLL when using the Visual C compiler.
# Highly recommended.  It has patches that fix known bugs in MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3.
# Get it from CPAN at http://www.perl.com/CPAN/authors/id/D/DO/DOUGL/
# and follow the directions in the package to install.
#
#USE_PERLCRT	*= define

#
# uncomment to enable linking with setargv.obj under the Visual C
# compiler. Setting this options enables perl to expand wildcards in
# arguments, but it may be harder to use alternate methods like
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
#
#USE_SETARGV	*= define

#
# if you have the source for des_fcrypt(), uncomment this and make sure the
# file exists (see README.win32).  File should be located in the same
# directory as this file.
#
#CRYPT_SRC	*= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	*= fcrypt.lib

#
# set this if you wish to use perl's malloc
# WARNING: Turning this on/off WILL break binary compatibility with extensions
# you may have compiled with/without it.  Be prepared to recompile all
# extensions if you change the default.  Currently, this cannot be enabled
# if you ask for PERL_OBJECT above.
#
#PERL_MALLOC	*= define

#
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
#CCHOME		*= f:\msdev\vc
CCHOME		*= C:\bc5
#CCHOME		*= D:\packages\mingw32
CCINCDIR	*= $(CCHOME)\include
CCLIBDIR	*= $(CCHOME)\lib

#
# specify semicolon-separated list of extra directories that modules will
# look for libraries (spaces in path names need not be quoted)
#
EXTRALIBDIRS	*=

#
# set this to point to cmd.exe (only needed if you use some
# alternate shell that doesn't grok cmd.exe style commands)
#
#SHELL		*= g:\winnt\system32\cmd.exe

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#
#EMAIL		*= 

##
## Build configuration ends.
##

##################### CHANGE THESE ONLY IF YOU MUST #####################

.IF "$(CRYPT_SRC)$(CRYPT_LIB)" == ""
D_CRYPT		= undef
.ELSE
D_CRYPT		= define
CRYPT_FLAG	= -DHAVE_DES_FCRYPT
.ENDIF

.IF "$(OBJECT)" != ""
PERL_MALLOC	!= undef
USE_THREADS	!= undef
USE_MULTI	!= undef
.ENDIF

PERL_MALLOC	*= undef

USE_THREADS	*= undef
USE_MULTI	*= undef

#BUILDOPT	*= -DPERL_GLOBAL_STRUCT
# -DUSE_PERLIO -D__STDC__=1 -DUSE_SFIO -DI_SFIO -I\sfio97\include

.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE

PROCESSOR_ARCHITECTURE *= x86

.IF "$(OBJECT)" != ""
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-object
.ELIF "$(USE_THREADS)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-thread
.ELSE
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)
.ENDIF

ARCHDIR		= ..\lib\$(ARCHNAME)
COREDIR		= ..\lib\CORE
AUTODIR		= ..\lib\auto

#
# Programs to compile, build .lib files and link
#

.USESHELL :

.IF "$(CCTYPE)" == "BORLAND"

CC		= bcc32
LINK32		= tlink32
LIB32		= tlib /P128
IMPLIB		= implib -c

#
# Options
#
RUNTIME		= -D_RTLDLL
INCLUDES	= -I$(COREDIR) -I.\include -I. -I.. -I"$(CCINCDIR)"
#PCHFLAGS	= -H -Hc -H=c:\temp\bcmoduls.pch 
DEFINES		= -DWIN32 $(BUILDOPT) $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -P

LIBC		= cw32mti.lib
LIBFILES	= $(CRYPT_LIB) import32.lib $(LIBC) odbc32.lib odbccp32.lib

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -v $(RUNTIME) -DDEBUGGING
LINK_DBG	= -v
.ELSE
OPTIMIZE	= -O2 $(RUNTIME)
LINK_DBG	= 
.ENDIF

CFLAGS		= -w -g0 -tWM -tWD $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= $(LINK_DBG) -L"$(CCLIBDIR)"
OBJOUT_FLAG	= -o
EXEOUT_FLAG	= -e
LIBOUT_FLAG	= 

.ELIF "$(CCTYPE)" == "GCC"

CC		= gcc
LINK32		= gcc
LIB32		= ar rc
IMPLIB		= dlltool

o = .o
a = .a

#
# Options
#
RUNTIME		=
INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
DEFINES		= -DWIN32 $(BUILDOPT) $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -xc++

LIBC		= -lcrtdll
LIBFILES	= $(CRYPT_LIB) -ladvapi32 -luser32 -lnetapi32 -lwsock32 \
		-lmingw32 -lgcc -lmoldname $(LIBC) -lkernel32

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -g -O2 $(RUNTIME) -DDEBUGGING
LINK_DBG	= -g
.ELSE
OPTIMIZE	= -g -O2 $(RUNTIME)
LINK_DBG	= 
.ENDIF

CFLAGS		= $(INCLUDES) $(DEFINES) $(LOCDEFS) $(OPTIMIZE)
LINK_FLAGS	= $(LINK_DBG) -L"$(CCLIBDIR)"
OBJOUT_FLAG	= -o
EXEOUT_FLAG	= -o
LIBOUT_FLAG	= 

.ELSE

CC		= cl.exe
LINK32		= link.exe
LIB32		= $(LINK32) -lib

#
# Options
#

RUNTIME		= -MD
INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX 
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(BUILDOPT) $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -TP -GX

.IF "$(USE_PERLCRT)" == ""
.IF  "$(CFG)" == "Debug"
PERLCRTLIBC	= msvcrtd.lib
.ELSE
PERLCRTLIBC	= msvcrt.lib
.ENDIF
.ELSE
.IF  "$(CFG)" == "Debug"
PERLCRTLIBC	= PerlCRTD.lib
.ELSE
PERLCRTLIBC	= PerlCRT.lib
.ENDIF
.ENDIF

.IF "$(RUNTIME)" == "-MD"
LIBC		= $(PERLCRTLIBC)
.ELSE
LIBC		= libcmt.lib
.ENDIF

.IF  "$(CFG)" == "Debug"
.IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE	= -Od $(RUNTIME) -Z7 -D_DEBUG -DDEBUGGING
.ELSE
OPTIMIZE	= -Od $(RUNTIME)d -Zi -D_DEBUG -DDEBUGGING
.ENDIF
LINK_DBG	= -debug -pdb:none
.ELSE
.IF "$(CFG)" == "Optimize"
OPTIMIZE	= -O2 $(RUNTIME) -DNDEBUG
.ELSE
OPTIMIZE	= -Od $(RUNTIME) -DNDEBUG
.ENDIF
LINK_DBG	= -release
.ENDIF

LIBBASEFILES	= $(CRYPT_LIB) oldnames.lib kernel32.lib user32.lib gdi32.lib \
		winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib \
		oleaut32.lib netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib

# we add LIBC here, since we may be using PerlCRT.dll
LIBFILES	= $(LIBBASEFILES) $(LIBC)

CFLAGS		= -nologo -Gf -W3 $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) -machine:$(PROCESSOR_ARCHITECTURE)
OBJOUT_FLAG	= -Fo
EXEOUT_FLAG	= -Fe
LIBOUT_FLAG	= /out:

.ENDIF

.IF "$(OBJECT)" != ""
OPTIMIZE	+= $(CXX_FLAG)
.ENDIF

CFLAGS_O	= $(CFLAGS) $(OBJECT)

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

o *= .obj
a *= .lib

LKPRE		= INPUT (
LKPOST		= )

#
# Rules
# 

.SUFFIXES : .c $(o) .dll $(a) .exe 

.c$(o):
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $<

.y.c:
	$(NOOP)

$(o).dll:
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(LINK_FLAGS) c0d32$(o) $<,$@@,,$(LIBFILES),$(*B).def
	$(IMPLIB) $(*B).lib $@@
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -o $@@ $(LINK_FLAGS) $< $(LIBFILES)
	$(IMPLIB) -def $(*B).def $(*B).a $@@
.ELSE
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(LINK_FLAGS) $(LIBFILES) $< $(LIBPERL)  
.ENDIF

#
INST_BIN	= $(INST_TOP)$(INST_VER)\bin\$(ARCHNAME)
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_POD	= $(INST_LIB)\pod
INST_HTML	= $(INST_POD)\html
LIBDIR		= ..\lib
EXTDIR		= ..\ext
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\extutils

#
# various targets
MINIPERL	= ..\miniperl.exe
MINIDIR		= .\mini
PERLEXE		= ..\perl.exe
GLOBEXE		= ..\perlglob.exe
CONFIGPM	= ..\lib\Config.pm
MINIMOD		= ..\lib\ExtUtils\Miniperl.pm
X2P		= ..\x2p\a2p.exe

PL2BAT		= bin\pl2bat.pl
GLOBBAT		= bin\perlglob.bat

UTILS		=			\
		..\utils\h2ph		\
		..\utils\splain		\
		..\utils\perlbug	\
		..\utils\pl2pm 		\
		..\utils\c2ph		\
		..\utils\h2xs		\
		..\utils\perldoc	\
		..\utils\pstruct	\
		..\utils\perlcc		\
		..\pod\checkpods	\
		..\pod\pod2html		\
		..\pod\pod2latex	\
		..\pod\pod2man		\
		..\pod\pod2text		\
		..\x2p\find2perl	\
		..\x2p\s2p		\
		bin\www.pl		\
		bin\runperl.pl		\
		bin\pl2bat.pl		\
		bin\perlglob.pl		\
		bin\search.pl

.IF "$(CCTYPE)" == "BORLAND"

CFGSH_TMPL	= config.bc
CFGH_TMPL	= config_H.bc

.ELIF "$(CCTYPE)" == "GCC"

CFGSH_TMPL	= config.gc
CFGH_TMPL	= config_H.gc
.IF "$(OBJECT)" == "-DPERL_OBJECT"
PERLIMPLIB	= ..\libperlcore$(a)
.ELSE
PERLIMPLIB	= ..\libperl$(a)
.ENDIF

.ELSE

CFGSH_TMPL	= config.vc
CFGH_TMPL	= config_H.vc
.IF "$(USE_PERLCRT)" == ""
PERL95EXE	= ..\perl95.exe
.ENDIF

.ENDIF

.IF "$(OBJECT)" == "-DPERL_OBJECT"
PERLIMPLIB	*= ..\perlcore$(a)
PERLDLL		= ..\perlcore.dll
CAPILIB		= $(COREDIR)\perlCAPI$(a)
.ELSE
PERLIMPLIB	*= ..\perl$(a)
PERLDLL		= ..\perl.dll
CAPILIB		=
.ENDIF

XCOPY		= xcopy /f /r /i /d
RCOPY		= xcopy /f /r /i /e /d
NOOP		= @@echo

#
# filenames given to xsubpp must have forward slashes (since it puts
# full pathnames in #line strings)
XSUBPP		= ..\$(MINIPERL) -I..\..\lib ..\$(EXTUTILSDIR)\xsubpp \
		-C++ -prototypes

MICROCORE_SRC	=		\
		..\av.c		\
		..\byterun.c	\
		..\deb.c	\
		..\doio.c	\
		..\doop.c	\
		..\dump.c	\
		..\globals.c	\
		..\gv.c		\
		..\hv.c		\
		..\mg.c		\
		..\op.c		\
		..\perl.c	\
		..\perly.c	\
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_hot.c	\
		..\pp_sys.c	\
		..\regcomp.c	\
		..\regexec.c	\
		..\run.c	\
		..\scope.c	\
		..\sv.c		\
		..\taint.c	\
		..\toke.c	\
		..\universal.c	\
		..\util.c

.IF "$(PERL_MALLOC)" == "define"
EXTRACORE_SRC	+= ..\malloc.c
.ENDIF

.IF "$(OBJECT)" == ""
EXTRACORE_SRC	+= ..\perlio.c
.ENDIF

WIN32_SRC	=		\
		.\win32.c	\
		.\win32sck.c

.IF "$(USE_THREADS)" == "define"
WIN32_SRC	+= .\win32thread.c 
.ENDIF

.IF "$(CRYPT_SRC)" != ""
WIN32_SRC	+= .\$(CRYPT_SRC)
.ENDIF

PERL95_SRC	=		\
		perl95.c	\
		win32mt.c	\
		win32sckmt.c

.IF "$(CRYPT_SRC)" != ""
PERL95_SRC	+= .\$(CRYPT_SRC)
.ENDIF

DLL_SRC		= $(DYNALOADER).c


.IF "$(OBJECT)" == ""
DLL_SRC		+= perllib.c
.ENDIF

X2P_SRC		=		\
		..\x2p\a2p.c	\
		..\x2p\hash.c	\
		..\x2p\str.c	\
		..\x2p\util.c	\
		..\x2p\walk.c

CORE_NOCFG_H	=		\
		..\av.h		\
		..\byterun.h	\
		..\bytecode.h	\
		..\cop.h	\
		..\cv.h		\
		..\dosish.h	\
		..\embed.h	\
		..\form.h	\
		..\gv.h		\
		..\handy.h	\
		..\hv.h		\
		..\iperlsys.h	\
		..\mg.h		\
		..\nostdio.h	\
		..\op.h		\
		..\opcode.h	\
		..\perl.h	\
		..\perlsdio.h	\
		..\perlsfio.h	\
		..\perly.h	\
		..\pp.h		\
		..\proto.h	\
		..\regexp.h	\
		..\scope.h	\
		..\sv.h		\
		..\thread.h	\
		..\unixish.h	\
		..\util.h	\
		..\XSUB.h	\
		..\EXTERN.h	\
		..\perlvars.h	\
		..\intrpvar.h	\
		..\thrdvar.h	\
		.\include\dirent.h	\
		.\include\netdb.h	\
		.\include\sys\socket.h	\
		.\win32.h

CORE_H		= $(CORE_NOCFG_H) .\config.h

MICROCORE_OBJ	= $(MICROCORE_SRC:db:+$(o))
CORE_OBJ	= $(MICROCORE_OBJ) $(EXTRACORE_SRC:db:+$(o))
WIN32_OBJ	= $(WIN32_SRC:db:+$(o))
MINICORE_OBJ	= $(MINIDIR)\{$(MICROCORE_OBJ:f) miniperlmain$(o) perlio$(o)}
MINIWIN32_OBJ	= $(MINIDIR)\{$(WIN32_OBJ:f)}
MINI_OBJ	= $(MINICORE_OBJ) $(MINIWIN32_OBJ)
PERL95_OBJ	= $(PERL95_SRC:db:+$(o))
DLL_OBJ		= $(DLL_SRC:db:+$(o))
X2P_OBJ		= $(X2P_SRC:db:+$(o))

PERLDLL_OBJ	= $(CORE_OBJ)
PERLEXE_OBJ	= perlmain$(o)

.IF "$(OBJECT)" == ""
PERLDLL_OBJ	+= $(WIN32_OBJ) $(DLL_OBJ)
.ELSE
PERLEXE_OBJ	+= $(WIN32_OBJ) $(DLL_OBJ)
PERL95_OBJ	+= DynaLoadmt$(o)
.ENDIF

.IF "$(USE_SETARGV)" != ""
SETARGV_OBJ	= setargv$(o)
.ENDIF

DYNAMIC_EXT	= Socket IO Fcntl Opcode SDBM_File POSIX attrs Thread B re \
		Data/Dumper
STATIC_EXT	= DynaLoader
NONXS_EXT	= Errno

DYNALOADER	= $(EXTDIR)\DynaLoader\DynaLoader
SOCKET		= $(EXTDIR)\Socket\Socket
FCNTL		= $(EXTDIR)\Fcntl\Fcntl
OPCODE		= $(EXTDIR)\Opcode\Opcode
SDBM_FILE	= $(EXTDIR)\SDBM_File\SDBM_File
IO		= $(EXTDIR)\IO\IO
POSIX		= $(EXTDIR)\POSIX\POSIX
ATTRS		= $(EXTDIR)\attrs\attrs
THREAD		= $(EXTDIR)\Thread\Thread
B		= $(EXTDIR)\B\B
RE		= $(EXTDIR)\re\re
DUMPER		= $(EXTDIR)\Data\Dumper\Dumper
ERRNO		= $(EXTDIR)\Errno\Errno

SOCKET_DLL	= $(AUTODIR)\Socket\Socket.dll
FCNTL_DLL	= $(AUTODIR)\Fcntl\Fcntl.dll
OPCODE_DLL	= $(AUTODIR)\Opcode\Opcode.dll
SDBM_FILE_DLL	= $(AUTODIR)\SDBM_File\SDBM_File.dll
IO_DLL		= $(AUTODIR)\IO\IO.dll
POSIX_DLL	= $(AUTODIR)\POSIX\POSIX.dll
ATTRS_DLL	= $(AUTODIR)\attrs\attrs.dll
THREAD_DLL	= $(AUTODIR)\Thread\Thread.dll
B_DLL		= $(AUTODIR)\B\B.dll
DUMPER_DLL	= $(AUTODIR)\Data\Dumper\Dumper.dll
RE_DLL		= $(AUTODIR)\re\re.dll

ERRNO_PM	= $(LIBDIR)\Errno.pm

EXTENSION_C	=		\
		$(SOCKET).c	\
		$(FCNTL).c	\
		$(OPCODE).c	\
		$(SDBM_FILE).c	\
		$(IO).c		\
		$(POSIX).c	\
		$(ATTRS).c	\
		$(THREAD).c	\
		$(RE).c		\
		$(DUMPER).c	\
		$(B).c

EXTENSION_DLL	=		\
		$(SOCKET_DLL)	\
		$(FCNTL_DLL)	\
		$(OPCODE_DLL)	\
		$(SDBM_FILE_DLL)\
		$(IO_DLL)	\
		$(POSIX_DLL)	\
		$(ATTRS_DLL)	\
		$(DUMPER_DLL)	\
		$(B_DLL)

EXTENSION_PM	=		\
		$(ERRNO_PM)

# re.dll doesn't build with PERL_OBJECT yet
.IF "$(OBJECT)" == ""
EXTENSION_DLL	+=		\
		$(THREAD_DLL)	\
		$(RE_DLL)
.ENDIF

POD2HTML	= $(PODDIR)\pod2html
POD2MAN		= $(PODDIR)\pod2man
POD2LATEX	= $(PODDIR)\pod2latex
POD2TEXT	= $(PODDIR)\pod2text

CFG_VARS	=					\
		"INST_DRV=$(INST_DRV)"			\
		"INST_TOP=$(INST_TOP)"			\
		"INST_VER=$(INST_VER)"			\
		"archname=$(ARCHNAME)"			\
		"cc=$(CC)"				\
		"ccflags=$(OPTIMIZE:s/"/\"/) $(DEFINES) $(OBJECT)"	\
		"cf_email=$(EMAIL)"			\
		"d_crypt=$(D_CRYPT)"			\
		"d_mymalloc=$(PERL_MALLOC)"		\
		"libs=$(LIBFILES:f)"			\
		"incpath=$(CCINCDIR:s/"/\"/)"		\
		"libperl=$(PERLIMPLIB:f)"		\
		"libpth=$(CCLIBDIR:s/"/\"/);$(EXTRALIBDIRS:s/"/\"/)"	\
		"libc=$(LIBC)"				\
		"make=dmake"				\
		"_o=$(o)" "obj_ext=$(o)"		\
		"_a=$(a)" "lib_ext=$(a)"		\
		"static_ext=$(STATIC_EXT)"		\
		"dynamic_ext=$(DYNAMIC_EXT)"		\
		"nonxs_ext=$(NONXS_EXT)"		\
		"usethreads=$(USE_THREADS)"		\
		"usemultiplicity=$(USE_MULTI)"		\
		"LINK_FLAGS=$(LINK_FLAGS:s/"/\"/)"		\
		"optimize=$(OPTIMIZE:s/"/\"/)"

#
# Top targets
#

all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(PERLEXE) $(PERL95EXE) \
	$(CAPILIB) $(X2P) $(EXTENSION_DLL) $(EXTENSION_PM)

$(DYNALOADER)$(o) : $(DYNALOADER).c $(CORE_H) $(EXTDIR)\DynaLoader\dlutils.c

#------------------------------------------------------------

$(GLOBEXE) : perlglob$(o)
.IF "$(CCTYPE)" == "BORLAND"
	$(CC) -c -w -v -tWM -I"$(CCINCDIR)" perlglob.c
	$(LINK32) -Tpe -ap $(LINK_FLAGS) c0x32$(o) perlglob$(o) \
	    "$(CCLIBDIR)\32BIT\wildargs$(o)",$@@,,import32.lib cw32mt.lib,
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) $(LINK_FLAGS) -o $@@ perlglob$(o) $(LIBFILES)
.ELSE
	$(LINK32) $(LINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
	    perlglob$(o) setargv$(o) 
.ENDIF

perlglob$(o)  : perlglob.c

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

.\config.h : $(CFGH_TMPL) $(CORE_NOCFG_H)
	-del /f config.h
	copy $(CFGH_TMPL) config.h

..\config.sh : config.w32 $(MINIPERL) config_sh.PL
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) config.w32 > ..\config.sh

# this target is for when changes to the main config.sh happen
# edit config.{b,v,g}c and make this target once for each supported
# compiler (e.g. `dmake CCTYPE=BORLAND regen_config_h`)
regen_config_h:
	perl config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh
	-cd .. && del /f perl.exe
	cd .. && perl configpm
	-del /f $(CFGH_TMPL)
	-mkdir $(COREDIR)
	-perl -I..\lib config_h.PL "INST_VER=$(INST_VER)"
	rename config.h $(CFGH_TMPL)

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
	cd .. && miniperl configpm
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(XCOPY) *.h $(COREDIR)\*.*
	$(XCOPY) ..\ext\re\re.pm $(LIBDIR)\*.*
	$(RCOPY) include $(COREDIR)\*.*
	$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)" \
	    || $(MAKE) $(MAKEMACROS) $(CONFIGPM)

$(MINIPERL) : $(MINIDIR) $(MINI_OBJ)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(LINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(MINI_OBJ:s,\,\\),$(@@:s,\,\\),,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -o $@@ $(LINK_FLAGS) \
	    $(mktmp $(LKPRE) $(MINI_OBJ:s,\,\\) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ \
	    @@$(mktmp $(LINK_FLAGS) $(LIBFILES) $(MINI_OBJ:s,\,\\))
.ENDIF

$(MINIDIR) :
	if not exist "$(MINIDIR)" mkdir "$(MINIDIR)"

$(MINICORE_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ ..\$(*B).c

$(MINIWIN32_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $(*B).c

# 1. we don't want to rebuild miniperl.exe when config.h changes
# 2. we don't want to rebuild miniperl.exe with non-default config.h
$(MINI_OBJ)	: $(CORE_NOCFG_H)

$(WIN32_OBJ)	: $(CORE_H)
$(CORE_OBJ)	: $(CORE_H)
$(DLL_OBJ)	: $(CORE_H)
$(PERL95_OBJ)	: $(CORE_H)
$(X2P_OBJ)	: $(CORE_H)

perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym makedef.pl
	$(MINIPERL) -w makedef.pl $(OPTIMIZE) $(DEFINES) $(OBJECT) \
	    CCTYPE=$(CCTYPE) > perldll.def

$(PERLDLL): perldll.def $(PERLDLL_OBJ)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(LINK_FLAGS) \
	    @@$(mktmp c0d32$(o) $(PERLDLL_OBJ:s,\,\\)\n \
		$@@,\n \
		$(LIBFILES)\n \
		perldll.def\n)
	$(IMPLIB) $*.lib $@@
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -mdll -o $@@ -Wl,--base-file -Wl,perl.base $(LINK_FLAGS) \
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ:s,\,\\) $(LIBFILES) $(LKPOST))
	dlltool --output-lib $(PERLIMPLIB) \
                --dllname perl.dll \
                --def perldll.def \
                --base-file perl.base \
                --output-exp perl.exp
	$(LINK32) -mdll -o $@@ $(LINK_FLAGS) \
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ:s,\,\\) $(LIBFILES) \
		perl.exp $(LKPOST))
.ELSE
	$(LINK32) -dll -def:perldll.def -out:$@@ \
	    @@$(mktmp $(LINK_FLAGS) $(LIBFILES) $(PERLDLL_OBJ:s,\,\\))
.ENDIF
	$(XCOPY) $(PERLIMPLIB) $(COREDIR)

perl.def  : $(MINIPERL) makeperldef.pl
	$(MINIPERL) -I..\lib makeperldef.pl $(NULL) > perl.def

$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd .. && miniperl minimod.pl > lib\ExtUtils\Miniperl.pm

..\x2p\a2p$(o) : ..\x2p\a2p.c
	$(CC) -I..\x2p $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\a2p.c

..\x2p\hash$(o) : ..\x2p\hash.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\hash.c

..\x2p\str$(o) : ..\x2p\str.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\str.c

..\x2p\util$(o) : ..\x2p\util.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\util.c

..\x2p\walk$(o) : ..\x2p\walk.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\walk.c

$(X2P) : $(MINIPERL) $(X2P_OBJ)
	$(MINIPERL) ..\x2p\find2perl.PL
	$(MINIPERL) ..\x2p\s2p.PL
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(LINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(X2P_OBJ:s,\,\\),$(@@:s,\,\\),,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -o $@@ $(LINK_FLAGS) \
	    $(mktmp $(LKPRE) $(X2P_OBJ:s,\,\\) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ \
	    @@$(mktmp $(LINK_FLAGS) $(LIBFILES) $(X2P_OBJ:s,\,\\))
.ENDIF

perlmain.c : runperl.c 
	copy runperl.c perlmain.c

perlmain$(o) : perlmain.c
	$(CC) $(CFLAGS_O) -UPERLDLL $(OBJOUT_FLAG)$@@ -c perlmain.c

$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(LINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(PERLEXE_OBJ:s,\,\\)\n \
	    $(@@:s,\,\\),\n \
	    $(PERLIMPLIB) $(LIBFILES)\n)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -o $@@ $(LINK_FLAGS)  \
	    $(PERLEXE_OBJ) $(PERLIMPLIB) $(LIBFILES)
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(LINK_FLAGS) $(LIBFILES) \
	    $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) 
.ENDIF
	copy splittree.pl .. 
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" $(AUTODIR)

.IF "$(CCTYPE)" != "BORLAND"
.IF "$(CCTYPE)" != "GCC"
.IF "$(USE_PERLCRT)" == ""

perl95.c : runperl.c 
	copy runperl.c perl95.c

perl95$(o) : perl95.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c perl95.c

win32sckmt$(o) : win32sck.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)win32sckmt$(o) win32sck.c

win32mt$(o) : win32.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)win32mt$(o) win32.c

DynaLoadmt$(o) : $(DYNALOADER).c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)DynaLoadmt$(o) $(DYNALOADER).c

$(PERL95EXE): $(PERLDLL) $(CONFIGPM) $(PERL95_OBJ)
	$(LINK32) -subsystem:console -nodefaultlib -out:$@@ $(LINK_FLAGS) \
	    $(LIBBASEFILES) $(PERL95_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) \
	    libcmt.lib

.ENDIF
.ENDIF
.ENDIF

$(DYNALOADER).c: $(MINIPERL) $(EXTDIR)\DynaLoader\dl_win32.xs $(CONFIGPM)
	if not exist $(AUTODIR) mkdir $(AUTODIR)
	cd $(EXTDIR)\$(*B) && ..\$(MINIPERL) -I..\..\lib $(*B)_pm.PL
	$(XCOPY) $(EXTDIR)\$(*B)\$(*B).pm $(LIBDIR)\$(NULL)
	cd $(EXTDIR)\$(*B) && $(XSUBPP) dl_win32.xs > $(*B).c
	$(XCOPY) $(EXTDIR)\$(*B)\dlutils.c .

.IF "$(OBJECT)" == "-DPERL_OBJECT"

perlCAPI.cpp : $(MINIPERL)
	$(MINIPERL) GenCAPI.pl $(COREDIR)

perlCAPI$(o) : perlCAPI.cpp
.IF "$(CCTYPE)" == "BORLAND"
	$(CC) $(CFLAGS_O) -c $(OBJOUT_FLAG)perlCAPI$(o) perlCAPI.cpp
.ELIF "$(CCTYPE)" == "GCC"
	$(CC) $(CFLAGS_O) -c $(OBJOUT_FLAG)perlCAPI$(o) perlCAPI.cpp
.ELSE
	$(CC) $(CFLAGS_O) $(RUNTIME) -UPERLDLL -c \
	    $(OBJOUT_FLAG)perlCAPI$(o) perlCAPI.cpp
.ENDIF

$(CAPILIB) : perlCAPI.cpp perlCAPI$(o)
.IF "$(CCTYPE)" == "BORLAND"
	$(LIB32) $(LIBOUT_FLAG)$(CAPILIB) +perlCAPI$(o)
.ELSE
	$(LIB32) $(LIBOUT_FLAG)$(CAPILIB) perlCAPI$(o)
.ENDIF

.ENDIF

$(EXTDIR)\DynaLoader\dl_win32.xs: dl_win32.xs
	copy dl_win32.xs $(EXTDIR)\DynaLoader\dl_win32.xs

$(DUMPER_DLL): $(PERLEXE) $(DUMPER).xs
	cd $(EXTDIR)\Data\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\Data\$(*B) && $(MAKE)

$(RE_DLL): $(PERLEXE) $(RE).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(B_DLL): $(PERLEXE) $(B).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(THREAD_DLL): $(PERLEXE) $(THREAD).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(ATTRS_DLL): $(PERLEXE) $(ATTRS).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(POSIX_DLL): $(PERLEXE) $(POSIX).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(IO_DLL): $(PERLEXE) $(IO).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(SDBM_FILE_DLL) : $(PERLEXE) $(SDBM_FILE).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(FCNTL_DLL): $(PERLEXE) $(FCNTL).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(OPCODE_DLL): $(PERLEXE) $(OPCODE).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(SOCKET_DLL): $(PERLEXE) $(SOCKET).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

$(ERRNO_PM): $(PERLEXE) $(ERRNO)_pm.PL
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

doc: $(PERLEXE)
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=./html \
	    --podpath=pod:lib:ext:utils --htmlroot="file://$(INST_HTML:s,:,|,)"\
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse

utils: $(PERLEXE) $(X2P)
	cd ..\utils && $(MAKE) PERL=$(MINIPERL)
	copy ..\README.win32 ..\pod\perlwin32.pod
	cd ..\pod && $(MAKE) -f ..\win32\pod.mak converters
	$(PERLEXE) $(PL2BAT) $(UTILS)

distclean: clean
	-del /f $(MINIPERL) $(PERLEXE) $(PERL95EXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl$(a) $(MINIMOD)
	-del /f *.def *.map
	-del /f $(EXTENSION_DLL) $(EXTENSION_PM)
	-del /f $(EXTENSION_C) $(DYNALOADER).c $(ERRNO).pm
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs
	-del /f $(LIBDIR)\.exists $(LIBDIR)\attrs.pm $(LIBDIR)\DynaLoader.pm
	-del /f $(LIBDIR)\Fcntl.pm $(LIBDIR)\IO.pm $(LIBDIR)\Opcode.pm
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm $(LIBDIR)\Thread.pm
	-del /f $(LIBDIR)\SDBM_File.pm $(LIBDIR)\Socket.pm $(LIBDIR)\POSIX.pm
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
	-del /f $(LIBDIR)\Data\Dumper.pm
	-rmdir /s /q $(LIBDIR)\IO || rmdir /s $(LIBDIR)\IO
	-rmdir /s /q $(LIBDIR)\Thread || rmdir /s $(LIBDIR)\Thread
	-rmdir /s /q $(LIBDIR)\B || rmdir /s $(LIBDIR)\B
	-rmdir /s /q $(LIBDIR)\Data || rmdir /s $(LIBDIR)\Data
	-del /f $(PODDIR)\*.html
	-del /f $(PODDIR)\*.bat
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph h2xs perldoc \
	    pstruct *.bat
	-cd ..\x2p && del /f find2perl s2p *.bat
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new
	-del /f $(CONFIGPM)
.IF "$(PERL95EXE)" != ""
	-del /f perl95.c
.ENDIF
	-del /f bin\*.bat
	-cd $(EXTDIR) && del /s *$(a) *.def *.map *.pdb *.bs Makefile *$(o) \
	    pm_to_blib
	-rmdir /s /q $(AUTODIR) || rmdir /s $(AUTODIR)
	-rmdir /s /q $(COREDIR) || rmdir /s $(COREDIR)

install : all installbare installhtml

installbare : utils
	$(PERLEXE) ..\installperl
.IF "$(PERL95EXE)" != ""
	$(XCOPY) $(PERL95EXE) $(INST_BIN)\*.*
.ENDIF
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_SCRIPT)\*.*
	$(XCOPY) bin\network.pl $(INST_LIB)\*.*

installhtml : doc
	$(RCOPY) html\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	copy splittree.pl .. 
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" $(AUTODIR)
	$(RCOPY) ..\lib $(INST_LIB)\*.*

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) utils
	$(XCOPY) $(MINIPERL) ..\t\perl.exe
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
	attrib -r ..\t\*.*
	copy test ..\t
	cd ..\t && \
	$(MINIPERL) -I..\lib test base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t

test-prep : all utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF

test : test-prep
	cd ..\t && $(PERLEXE) -I..\lib harness

test-notty : test-prep
	set PERL_SKIP_TTY_TEST=1 && \
	cd ..\t && $(PERLEXE) -I.\lib harness

clean : 
	-@@erase miniperlmain$(o)
	-@@erase $(MINIPERL)
	-@@erase perlglob$(o)
	-@@erase perlmain$(o)
	-@@erase perlCAPI.cpp
	-@@erase config.w32
	-@@erase /f config.h
	-@@erase $(GLOBEXE)
	-@@erase $(PERLEXE)
	-@@erase $(PERLDLL)
	-@@erase $(CORE_OBJ)
	-rmdir /s /q $(MINIDIR) || rmdir /s $(MINIDIR)
	-@@erase $(WIN32_OBJ)
	-@@erase $(DLL_OBJ)
	-@@erase $(X2P_OBJ)
	-@@erase ..\*$(o) ..\*$(a) ..\*.exp ..\*.res *$(o) *$(a) *.exp *.res
	-@@erase ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@erase ..\x2p\*.exe ..\x2p\*.bat
	-@@erase *.ilk
	-@@erase *.pdb
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d4 1
a4 1
#	Visual C++ 2.0 thro 6.0
d6 1
a6 1
#	Mingw32 with gcc-2.95.2 or better  **experimental**
d9 1
a9 1
# (perl56.dll).  Also makes individual DLLs for the XS extensions.
d21 1
a21 1
# Set these to wherever you want "dmake install" to put your
d36 1
a36 1
INST_VER	*= \5.6.0
d39 1
a39 7
# Comment this out if you DON'T want your perl installation to have
# architecture specific components.  This means that architecture-
# specific files will be installed along with the architecture-neutral
# files.  Leaving it enabled is safer and more flexible, in case you
# want to build multiple flavors of perl and install them together in
# the same location.  Commenting it out gives you a simpler
# installation that is easier to understand for beginners.
d41 1
a41 1
INST_ARCH	*= \$(ARCHNAME)
d44 1
a44 2
# uncomment to enable multiple interpreters.  This is need for fork()
# emulation.
d49 1
a49 3
# Beginnings of interpreter cloning/threads; still very incomplete.
# This should be enabled to get the fork() emulation.  This needs
# USE_MULTI as well.
d51 4
a54 1
#USE_ITHREADS	*= define
d57 3
a59 3
# uncomment to enable the implicit "host" layer for all system calls
# made by perl.  This needs USE_MULTI above.  This is also needed to
# get fork().
d61 1
a61 1
#USE_IMP_SYS	*= define
d64 1
a64 2
# WARNING! This option is deprecated and will eventually go away (enable
# USE_ITHREADS instead).
d66 1
a66 5
# uncomment to enable threads-capabilities.  This is incompatible with
# USE_ITHREADS, and is only here for people who may have come to rely
# on the experimental Thread support that was in 5.005.
#
#USE_5005THREADS	*= define
d69 8
a76 7
# WARNING! This option is deprecated and will eventually go away (enable
# USE_MULTI instead).
#
# uncomment next line if you want to use the PERL_OBJECT build option.
# DO NOT ENABLE unless you have legacy code that relies on the C++
# CPerlObj class that was available in 5.005.  This cannot be enabled
# if you ask for USE_5005THREADS above.
d78 1
a78 27
#USE_OBJECT	*= define

#
# uncomment exactly one of the following
# 
# Visual C++ 2.x
#CCTYPE		*= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		*= MSVC
# Visual C++ >= 6.x
#CCTYPE		*= MSVC60
# Borland 5.02 or later
#CCTYPE		*= BORLAND
# mingw32+gcc-2.95.2 or better
CCTYPE		*= GCC

#
# uncomment this if you are compiling under Windows 95/98 and command.com
# (not needed if you're running under 4DOS/NT 6.01 or later)
#IS_WIN95	*= define

#
# uncomment next line if you want debug version of perl (big,slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		*= Debug
d82 2
a83 2
# It has patches that fix known bugs in older versions of MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3 or later.
a86 2
# Not recommended if you have VC 6.x and you're not running Windows 9x.
#
d117 1
a117 1
# if you ask for USE_IMP_SYS above.
d128 3
a130 3
#CCHOME		*= c:\bc5
#CCHOME		*= $(MSVCDIR)
CCHOME		*= c:\gcc-2.95.2-msvcrt
a134 25
# Additional compiler flags can be specified here.
#

#
# This should normally be disabled.  Adding -DPERL_POLLUTE enables support
# for old symbols by default, at the expense of extreme pollution.  You most
# probably just want to build modules that won't compile with
#         perl Makefile.PL POLLUTE=1
# instead of enabling this.  Please report such modules to the respective
# authors.
#
#BUILDOPT	+= -DPERL_POLLUTE

#
# This should normally be disabled.  Enabling it will disable the File::Glob
# implementation of CORE::glob.
#
#BUILDOPT	+= -DPERL_EXTERNAL_GLOB

#
# This should normally be disabled.  Enabling it causes perl to read scripts
# in text mode (which is the 5.005 behavior) and will break ByteLoader.
#BUILDOPT	+= -DPERL_TEXTMODE_SCRIPTS

#
d150 1
a150 1
#EMAIL		*=
d165 1
a165 1
.IF "$(USE_OBJECT)" == "define"
d167 1
a167 1
USE_5005THREADS	!= undef
a168 1
USE_IMP_SYS	!= define
d173 1
a173 10
USE_5005THREADS	*= undef

.IF "$(USE_5005THREADS)" == "define"
USE_ITHREADS	!= undef
.ENDIF

.IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	!= undef
.ENDIF

a174 17
USE_OBJECT	*= undef
USE_ITHREADS	*= undef
USE_IMP_SYS	*= undef
USE_PERLCRT	*= undef

.IF "$(USE_IMP_SYS)$(USE_MULTI)$(USE_5005THREADS)$(USE_OBJECT)" == "defineundefundefundef"
USE_MULTI	!= define
.ENDIF

.IF "$(USE_ITHREADS)$(USE_MULTI)$(USE_OBJECT)" == "defineundefundef"
USE_MULTI	!= define
USE_5005THREADS	!= undef
.ENDIF

.IF "$(USE_MULTI)$(USE_5005THREADS)$(USE_OBJECT)" != "undefundefundef"
BUILDOPT	+= -DPERL_IMPLICIT_CONTEXT
.ENDIF
d176 2
a177 3
.IF "$(USE_IMP_SYS)" != "undef"
BUILDOPT	+= -DPERL_IMPLICIT_SYS
.ENDIF
d183 1
a183 1
.IF "$(USE_OBJECT)" == "define"
d185 1
a185 1
.ELIF "$(USE_5005THREADS)" == "define"
a186 2
.ELIF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-multi
a190 16
.IF "$(USE_ITHREADS)" == "define"
ARCHNAME	!:= $(ARCHNAME)-thread
.ENDIF

# Visual Studio 98 specific
.IF "$(CCTYPE)" == "MSVC60"

# VC 6.0 can load the socket dll on demand.  Makes the test suite
# run in about 10% less time.
DELAYLOAD	*= -DELAYLOAD:wsock32.dll -DELAYLOAD:shell32.dll delayimp.lib 

# VC 6.0 seems capable of compiling perl correctly with optimizations
# enabled.  Anything earlier fails tests.
CFG		*= Optimize
.ENDIF

a193 13
LIBDIR		= ..\lib
EXTDIR		= ..\ext
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\ExtUtils

#
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_BIN	= $(INST_SCRIPT)$(INST_ARCH)
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_ARCHLIB	= $(INST_LIB)$(INST_ARCH)
INST_COREDIR	= $(INST_ARCHLIB)\CORE
INST_POD	= $(INST_LIB)\pod
INST_HTML	= $(INST_POD)\html
a206 1
RSC		= rc
d211 1
d214 1
a214 1
DEFINES		= -DWIN32 $(CRYPT_FLAG)
d223 1
a223 1
OPTIMIZE	= -v -D_RTLDLL -DDEBUGGING
d226 1
a226 1
OPTIMIZE	= -O2 -D_RTLDLL
d232 1
a232 1
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)" -L"$(CCLIBDIR)"
a242 1
RSC		= rc
d250 1
a250 1

d252 1
a252 1
DEFINES		= -DWIN32 $(CRYPT_FLAG)
d257 3
a259 8
LIBC		= -lmsvcrt

# same libs as MSVC
LIBFILES	= $(CRYPT_LIB) $(LIBC) \
		  -lmoldname -lkernel32 -luser32 -lgdi32 \
		  -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 \
		  -loleaut32 -lnetapi32 -luuid -lwsock32 -lmpr \
		  -lwinmm -lversion -lodbc32
d262 1
a262 1
OPTIMIZE	= -g -DDEBUGGING
d265 1
a265 1
OPTIMIZE	= -g -O2
d270 1
a270 1
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)" -L"$(CCLIBDIR)"
a274 3
# NOTE: we assume that GCC uses MSVCRT.DLL
BUILDOPT	+= -fno-strict-aliasing -DPERL_MSVCRT_READFIX

d277 2
a278 2
CC		= cl
LINK32		= link
a279 1
RSC		= rc
d285 1
d288 1
a288 1
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG)
d293 3
a295 2
.IF "$(USE_PERLCRT)" != "define"
LIBC	= msvcrt.lib
d297 8
a304 1
LIBC	= PerlCRT.lib
d307 5
a311 2
PERLEXE_RES	=
PERLDLL_RES	=
d315 1
a315 1
OPTIMIZE	= -Od -MD -Z7 -DDEBUGGING
d317 1
a317 1
OPTIMIZE	= -Od -MD -Zi -DDEBUGGING
d322 1
a322 3
# -O1 yields smaller code, which turns out to be faster than -O2
#OPTIMIZE	= -O2 -MD -DNDEBUG
OPTIMIZE	= -O1 -MD -DNDEBUG
d324 1
a324 1
OPTIMIZE	= -Od -MD -DNDEBUG
d329 3
a331 4
LIBBASEFILES	= $(CRYPT_LIB) \
		oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
d339 1
a339 3
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) \
		-libpath:"$(INST_COREDIR)" \
		-machine:$(PROCESSOR_ARCHITECTURE)
a343 2
.IF "$(USE_PERLCRT)" != "define"
BUILDOPT	+= -DPERL_MSVCRT_READFIX
d346 1
a346 3
.ENDIF

.IF "$(USE_OBJECT)" == "define"
a347 1
BUILDOPT	+= -DPERL_OBJECT
d350 1
a350 7
CFLAGS_O	= $(CFLAGS) $(BUILDOPT)

# used to allow local linking flags that are not propogated into Config.pm,
# currently unused
#   -- BKS, 12-12-1999
PRIV_LINK_FLAGS	*=
BLINK_FLAGS	= $(PRIV_LINK_FLAGS) $(LINK_FLAGS)
d365 1
a365 1
.SUFFIXES : .c $(o) .dll $(a) .exe .rc .res
d375 1
a375 1
	$(LINK32) -Tpd -ap $(BLINK_FLAGS) c0d32$(o) $<,$@@,,$(LIBFILES),$(*B).def
d378 2
a379 2
	$(LINK32) -o $@@ $(BLINK_FLAGS) $< $(LIBFILES)
	$(IMPLIB) --input-def $(*B).def --output-lib $(*B).a $@@
d382 1
a382 1
	    -out:$@@ $(BLINK_FLAGS) $(LIBFILES) $< $(LIBPERL)  
d385 10
a394 2
.rc.res:
	$(RSC) -i.. $<
a400 1
WPERLEXE	= ..\wperl.exe
a411 1
		..\utils\dprofpp	\
d417 1
a423 3
		..\pod\pod2usage	\
		..\pod\podchecker	\
		..\pod\podselect	\
d426 1
a426 1
		bin\exetype.pl		\
d441 5
a445 1
PERLIMPLIB	= ..\libperl56$(a)
d451 3
d457 9
a465 2
PERLIMPLIB	*= ..\perl56$(a)
PERLDLL		= ..\perl56.dll
d479 1
a489 1
		..\perlapi.c	\
d503 1
a503 5
		..\utf8.c	\
		..\util.c	\
		..\xsutils.c

EXTRACORE_SRC	+= perllib.c
d509 1
a509 1
.IF "$(USE_OBJECT)" != "define"
d515 5
a519 2
		.\win32sck.c	\
		.\win32thread.c 
d525 9
d536 5
d550 2
a565 1
		..\perlapi.h	\
a575 1
		..\utf8.h	\
a576 1
		..\warnings.h	\
d595 1
d602 1
d604 4
d614 1
a614 2
		Data/Dumper Devel/Peek ByteLoader Devel/DProf File/Glob \
		Sys/Hostname
a630 5
PEEK		= $(EXTDIR)\Devel\Peek\Peek
BYTELOADER	= $(EXTDIR)\ByteLoader\ByteLoader
DPROF		= $(EXTDIR)\Devel\DProf\DProf
GLOB		= $(EXTDIR)\File\Glob\Glob
HOSTNAME	= $(EXTDIR)\Sys\Hostname\Hostname
a641 1
PEEK_DLL	= $(AUTODIR)\Devel\Peek\Peek.dll
a642 4
BYTELOADER_DLL	= $(AUTODIR)\ByteLoader\ByteLoader.dll
DPROF_DLL	= $(AUTODIR)\Devel\DProf\DProf.dll
GLOB_DLL	= $(AUTODIR)\File\Glob\Glob.dll
HOSTNAME_DLL	= $(AUTODIR)\Sys\Hostname\Hostname.dll
d657 1
a657 6
		$(PEEK).c	\
		$(B).c		\
		$(BYTELOADER).c	\
		$(DPROF).c	\
		$(GLOB).c	\
		$(HOSTNAME).c
d668 1
a668 8
		$(PEEK_DLL)	\
		$(B_DLL)	\
		$(RE_DLL)	\
		$(THREAD_DLL)	\
		$(BYTELOADER_DLL)	\
		$(DPROF_DLL)	\
		$(GLOB_DLL)	\
		$(HOSTNAME_DLL)
d673 7
a684 4
# vars must be separated by "\t+~\t+", since we're using the tempfile
# version of config_sh.pl (we were overflowing someone's buffer by
# trying to fit them all on the command line)
#	-- BKS 10-17-1999
d686 24
a709 40
		INST_DRV=$(INST_DRV)		~	\
		INST_TOP=$(INST_TOP:s/\/\\/)	~	\
		INST_VER=$(INST_VER:s/\/\\/)	~	\
		INST_ARCH=$(INST_ARCH)		~	\
		archname=$(ARCHNAME)		~	\
		cc=$(CC)			~	\
		ccflags=$(OPTIMIZE) $(DEFINES) $(BUILDOPT)	~	\
		cf_email=$(EMAIL)		~	\
		d_crypt=$(D_CRYPT)		~	\
		d_mymalloc=$(PERL_MALLOC)	~	\
		libs=$(LIBFILES:f)		~	\
		incpath=$(CCINCDIR:s/\/\\/)	~	\
		libperl=$(PERLIMPLIB:f)		~	\
		libpth=$(CCLIBDIR:s/\/\\/);$(EXTRALIBDIRS:s/\/\\/)	~	\
		libc=$(LIBC)			~	\
		make=dmake			~	\
		_o=$(o)	obj_ext=$(o)		~	\
		_a=$(a)	lib_ext=$(a)		~	\
		static_ext=$(STATIC_EXT)	~	\
		dynamic_ext=$(DYNAMIC_EXT)	~	\
		nonxs_ext=$(NONXS_EXT)		~	\
		use5005threads=$(USE_5005THREADS)	~	\
		useithreads=$(USE_ITHREADS)	~	\
		usethreads=$(USE_5005THREADS)	~	\
		usemultiplicity=$(USE_MULTI)	~	\
		LINK_FLAGS=$(LINK_FLAGS:s/\/\\/)		~	\
		optimize=$(OPTIMIZE)

#
# set up targets varying between Win95 and WinNT builds
#

.IF "$(IS_WIN95)" == "define"
MK2 		= .\makefile.95
RIGHTMAKE	= __switch_makefiles
NOOP		= @@rem
.ELSE
MK2		= __not_needed
RIGHTMAKE	= __not_needed
.ENDIF
d715 2
a716 3
all : .\config.h $(GLOBEXE) $(MINIPERL) $(MK2)		\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(PERLEXE)	\
	$(X2P) $(EXTENSION_DLL) $(EXTENSION_PM)
d720 1
a720 47
#----------------------------------------------------------------

#-------------------- BEGIN Win95 SPECIFIC ----------------------

# this target is a jump-off point for Win95
#  1. it switches to the Win95-specific makefile if it exists
#     (__do_switch_makefiles)
#  2. it prints a message when the Win95-specific one finishes (__done)
#  3. it then kills this makefile by trying to make __no_such_target

__switch_makefiles: __do_switch_makefiles __done __no_such_target

__do_switch_makefiles:
.IF "$(NOTFIRST)" != "true"
	if exist $(MK2) $(MAKE:s/-S//) -f $(MK2) $(MAKETARGETS) NOTFIRST=true
.ELSE
	$(NOOP)
.ENDIF

.IF "$(NOTFIRST)" != "true"
__done:
	@@echo Build process complete. Ignore any errors after this message.
	@@echo Run "dmake test" to test and "dmake install" to install

.ELSE
# dummy targets for Win95-specific makefile

__done:
	$(NOOP)

__no_such_target:
	$(NOOP)

.ENDIF

# This target is used to generate the new makefile (.\makefile.95) for Win95

.\makefile.95: .\makefile.mk
	$(MINIPERL) genmk95.pl makefile.mk $(MK2)

#--------------------- END Win95 SPECIFIC ---------------------

# a blank target for when builds don't need to do certain things
# this target added for Win95 port but used to keep the WinNT port able to 
# use this file
__not_needed:
	$(NOOP)
d725 1
a725 1
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) c0x32$(o) perlglob$(o) \
d728 1
a728 1
	$(LINK32) $(BLINK_FLAGS) -mconsole -o $@@ perlglob$(o) $(LIBFILES)
d730 1
a730 1
	$(LINK32) $(BLINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
d744 1
a744 2
	$(MINIPERL) -I..\lib config_sh.PL --cfgsh-option-file \
	    $(mktmp $(CFG_VARS)) config.w32 > ..\config.sh
d750 1
a750 2
	perl config_sh.PL --cfgsh-option-file $(mktmp $(CFG_VARS)) \
	    $(CFGSH_TMPL) > ..\config.sh
d766 1
a766 1
	    || $(MAKE) $(MAKEMACROS) $(CONFIGPM) $(MAKEFILE)
d768 1
a768 1
$(MINIPERL) : $(MINIDIR) $(MINI_OBJ) $(CRTIPMLIBS)
d770 1
a770 1
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
d773 2
a774 2
	$(LINK32) -v -mconsole -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(MINI_OBJ:s,\,\\) $(LIBFILES) $(LKPOST)) 
d777 1
a777 1
	    @@$(mktmp $(BLINK_FLAGS) $(LIBFILES) $(MINI_OBJ:s,\,\\))
d784 1
a784 1
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB $(OBJOUT_FLAG)$@@ ..\$(*B).c
a788 12
# -DPERL_IMPLICIT_SYS needs C++ for perllib.c
# rules wrapped in .IFs break Win9X build (we end up with unbalanced []s unless
# unless the .IF is true), so instead we use a .ELSE with the default.
# This is the only file that depends on perlhost.h, vmem.h, and vdir.h

perllib$(o)	: perllib.c .\perlhost.h .\vdir.h .\vmem.h
.IF "$(USE_IMP_SYS)$(USE_OBJECT)" == "defineundef"
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
.ELSE
	$(CC) -c -I. $(CFLAGS_O) $(OBJOUT_FLAG)$@@ perllib.c
.ENDIF

d796 1
d799 3
a801 3
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl
	$(MINIPERL) -w ..\makedef.pl PLATFORM=win32 $(OPTIMIZE) $(DEFINES) \
	$(BUILDOPT) CCTYPE=$(CCTYPE) > perldll.def
d803 1
a803 1
$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES)
d805 1
a805 1
	$(LINK32) -Tpd -ap $(BLINK_FLAGS) \
d812 1
a812 1
	$(LINK32) -mdll -o $@@ -Wl,--base-file -Wl,perl.base $(BLINK_FLAGS) \
d815 5
a819 5
		--dllname $(PERLDLL:b).dll \
		--def perldll.def \
		--base-file perl.base \
		--output-exp perl.exp
	$(LINK32) -mdll -o $@@ $(BLINK_FLAGS) \
d824 1
a824 2
	    @@$(mktmp -base:0x28000000 $(BLINK_FLAGS) $(DELAYLOAD) $(LIBFILES) \
	        $(PERLDLL_RES) $(PERLDLL_OBJ:s,\,\\))
d828 3
d853 1
a853 1
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
d856 1
a856 1
	$(LINK32) -v -o $@@ $(BLINK_FLAGS) \
d860 1
a860 1
	    @@$(mktmp $(BLINK_FLAGS) $(LIBFILES) $(X2P_OBJ:s,\,\\))
d869 1
a869 1
$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES)
d871 1
a871 1
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
d876 1
a876 1
	$(LINK32) -mconsole -o $@@ $(BLINK_FLAGS)  \
d879 2
a880 2
	$(LINK32) -subsystem:console -out:$@@ -stack:0x8000000 $(BLINK_FLAGS) \
	    $(LIBFILES) $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) $(PERLEXE_RES)
a881 2
	copy $(PERLEXE) $(WPERLEXE)
	$(MINIPERL) -I..\lib bin\exetype.pl $(WPERLEXE) WINDOWS
d885 31
a918 1
	cd $(EXTDIR)\$(*B) && ..\$(MINIPERL) -I..\..\lib XSLoader_pm.PL
a919 1
	$(XCOPY) $(EXTDIR)\$(*B)\XSLoader.pm $(LIBDIR)\$(NULL)
d923 24
a954 15
$(DPROF_DLL): $(PERLEXE) $(DPROF).xs
	cd $(EXTDIR)\Devel\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\Devel\$(*B) && $(MAKE)

$(GLOB_DLL): $(PERLEXE) $(GLOB).xs
	cd $(EXTDIR)\File\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\File\$(*B) && $(MAKE)

$(PEEK_DLL): $(PERLEXE) $(PEEK).xs
	cd $(EXTDIR)\Devel\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\Devel\$(*B) && $(MAKE)

a1004 10
$(HOSTNAME_DLL): $(PERLEXE) $(HOSTNAME).xs
	cd $(EXTDIR)\Sys\$(*B) && \
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\Sys\$(*B) && $(MAKE)

$(BYTELOADER_DLL): $(PERLEXE) $(BYTELOADER).xs
	cd $(EXTDIR)\$(*B) && \
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	cd $(EXTDIR)\$(*B) && $(MAKE)

d1017 1
a1017 8
	copy ..\README.amiga ..\pod\perlamiga.pod
	copy ..\README.cygwin ..\pod\perlcygwin.pod
	copy ..\README.dos ..\pod\perldos.pod
	copy ..\README.hpux ..\pod\perlhpux.pod
	copy ..\README.machten ..\pod\perlmachten.pod
	copy ..\README.os2 ..\pod\perlos2.pod
	copy ..\README.os2 ..\pod\perlos2.pod
	copy ..\vms\perlvms.pod ..\pod\perlvms.pod
d1022 1
a1022 1
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
a1028 1
	-del /f $(LIBDIR)\XSLoader.pm
d1033 1
a1033 3
	-del /f $(LIBDIR)\Data\Dumper.pm $(LIBDIR)\ByteLoader.pm
	-del /f $(LIBDIR)\Devel\Peek.pm $(LIBDIR)\Devel\DProf.pm
	-del /f $(LIBDIR)\File\Glob.pm
d1041 1
a1041 1
	    dprofpp *.bat
d1045 3
d1056 1
a1056 1
installbare : $(RIGHTMAKE) utils
d1058 3
a1060 1
	if exist $(WPERLEXE) $(XCOPY) $(WPERLEXE) $(INST_BIN)\*.*
d1063 1
d1094 1
a1094 1
test : $(RIGHTMAKE) test-prep
d1099 1
a1099 10
	    cd ..\t && $(PERLEXE) -I.\lib harness

test-wide : test-prep
	set HARNESS_PERL_SWITCHES=-C && \
	    cd ..\t && $(PERLEXE) -I..\lib harness

test-wide-notty : test-prep
	set PERL_SKIP_TTY_TEST=1 && \
	    set HARNESS_PERL_SWITCHES=-C && \
	    cd ..\t && $(PERLEXE) -I..\lib harness
d1106 1
a1110 1
	-@@erase $(WPERLEXE)
d1117 1
a1117 1
	-@@erase ..\*$(o) ..\*$(a) ..\*.exp *$(o) *$(a) *.exp *.res
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d8 3
a14 3
## If you want a configuration that is the same as ActivePerl (see
## www.ActiveState.com) make sure you set at least BUILD_FLAVOR below!
##
d21 2
a22 2
# Set these to wherever you want "dmake install" to put your newly
# built perl.  Setting it to a path with spaces is NOT recommended.
a27 78
# uncomment exactly one of the following
# 
# Visual C++ 2.x
#CCTYPE		*= MSVC20
# Visual C++ > 2.x and < 5.x SP3
#CCTYPE		*= MSVC_PRE_50SP3
# Visual C++ >= 5.x SP3
#CCTYPE		*= MSVC60
# Borland 5.02 or later
#CCTYPE		*= BORLAND
# mingw32+gcc-2.95.2 or better
CCTYPE		*= GCC

#
# uncomment this if your Borland compiler is older than v5.4.
#
#BCCOLD		= define

#
# uncomment this if you want to use Borland's VCL as your CRT.
#
#BCCVCL		= define

#
# set the install locations of the compiler include/libraries. Running
# VCVARS32.BAT is *required* when using Visual C.  Some versions of
# Visual C earlier than 5.x SP3 don't define MSVCDIR in the environment.
# If such is the case you may have to set CCHOME explicitly.  Spaces in
# the path name should not be quoted.
#
#CCHOME		*= F:\Borland\BC5
#CCHOME		*= $(MSVCDIR)
CCHOME		*= c:\gcc-2.95.2-msvcrt

CCINCDIR	*= $(CCHOME)\include
CCLIBDIR	*= $(CCHOME)\lib

#
# uncomment this if you are compiling under Windows 95/98 and command.com
# (not needed if you're running under 4DOS/NT 6.01 or later)
#IS_WIN95	*= define

#
# if you have the source for des_fcrypt(), uncomment CRYPT_SRC and make sure
# the file exists (see README.win32).  File should be located in the same
# directory as this makefile.
#
# If you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment CRYPT_LIB, and make sure the library exists (see
# README.win32).  Specify the full pathname of the library.
#
# If you don't enable one of these, the crypt() builtin will fail to work.
# (Generally not critical.)
#
#CRYPT_SRC	*= fcrypt.c
#CRYPT_LIB	*= fcrypt.lib

#
# uncomment this option if you want to bulk-enable all the options that
# ActiveState uses to build their ActivePerl distribution.  If you set this,
# there should be no need to set any of the other options that follow.
#
# If you don't enable this, the defaults below will get you the most
# efficient perl configuration possible that will also be compatible
# with the build defaults used on Unix platforms.  On the other hand,
# the ActivePerl configuration will get you fork() emulation at the
# cost of some added bloat.
#
#BUILD_FLAVOR	*= ActivePerl

#
# uncomment next line if you want debug version of perl (big and slow).
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		*= Debug

#
d36 1
a36 1
INST_VER	*= \5.6.1
d86 1
a86 1
# if you ask for USE_5005THREADS or USE_MULTI above.
d91 26
d129 1
a129 1
# compiler. Setting this option enables perl to expand wildcards in
d131 2
a132 3
# File::DosGlob that are more powerful, or use perl inside shells
# that do the expansion for you.  This option is supported only
# with Visual C.
d137 14
d160 13
a220 13
.IF "$(BUILD_FLAVOR)" == "ActivePerl"
INST_VER	!= 
INST_ARCH	!= 
USE_MULTI	!= define
USE_ITHREADS	!= define
USE_IMP_SYS	!= define
USE_5005THREADS	!= undef
USE_OBJECT	!= undef
USE_PERLCRT	!= undef
USE_SETARGV	!=
PERL_MALLOC	!= undef
.ENDIF

d315 1
a315 1
INST_HTML	= $(INST_TOP)$(INST_VER)\html
a325 3
.IF "$(BCCOLD)" != "define"
LINK32		= ilink32
.ELSE
a326 1
.END
d342 1
a342 1
LIBFILES	= $(CRYPT_LIB) import32.lib $(LIBC)
d345 1
a345 1
OPTIMIZE	= -v -D_RTLDLL -DDEBUGGING -y -R
a357 8
.IF "$(BCCOLD)" != "define"
LINK_FLAGS	+= -Gn
DEFINES		+= -D_MT
.IF "$(BCCVCL)" == "define"
LIBC		!= cp32mti.lib vcl.lib vcl50.lib vclx50.lib vcle50.lib
LINK_FLAGS	+= -L"$(CCLIBDIR)\Release"
.END
.END
a811 1
		ld=$(LINK32)			~	\
d1073 1
a1073 1
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(BLINK_FLAGS) \
d1185 8
a1192 17
	copy ..\README.aix	..\pod\perlaix.pod
	copy ..\README.amiga	..\pod\perlamiga.pod
	copy ..\README.bs2000	..\pod\perlbs2000.pod
	copy ..\README.cygwin	..\pod\perlcygwin.pod
	copy ..\README.dos	..\pod\perldos.pod
	copy ..\README.epoc	..\pod\perlepoc.pod
	copy ..\README.hpux	..\pod\perlhpux.pod
	copy ..\README.machten	..\pod\perlmachten.pod
	copy ..\README.macos	..\pod\perlmacos.pod
	copy ..\README.mpeix	..\pod\perlmpeix.pod
	copy ..\README.os2	..\pod\perlos2.pod
	copy ..\README.os390	..\pod\perlos390.pod
	copy ..\README.solaris	..\pod\perlsolaris.pod
	copy ..\README.vmesa	..\pod\perlvmesa.pod
	copy ..\vms\perlvms.pod	..\pod\perlvms.pod
	copy ..\README.vos	..\pod\perlvos.pod
	copy ..\README.win32	..\pod\perlwin32.pod
d1202 1
a1202 1
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs $(EXTDIR)\DynaLoader\DynaLoader.pm
d1204 1
a1204 2
	-del /f $(LIBDIR)\XSLoader.pm $(EXTDIR)\DynaLoader\XSLoader.pm
	-del /f $(LIBDIR)\Devel\.exists $(LIBDIR)\File\.exists $(LIBDIR)\Sys\.exists
d1208 1
a1208 1
	-del /f $(LIBDIR)\B.pm $(EXTDIR)\B\defsubs.h $(LIBDIR)\O.pm $(LIBDIR)\re.pm
d1212 6
a1217 11
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO || rmdir /s $(LIBDIR)\IO
	-if exist $(LIBDIR)\Thread rmdir /s /q $(LIBDIR)\Thread || rmdir /s $(LIBDIR)\Thread
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B || rmdir /s $(LIBDIR)\B
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data || rmdir /s $(LIBDIR)\Data
	-cd $(PODDIR) && del /f *.html *.bat checkpods \
	    perlaix.pod perlamiga.pod perlbs2000.pod perlcygwin.pod \
	    perldos.pod perlepoc.pod perlhpux.pod perlmachten.pod \
	    perlmacos.pod perlmpeix.pod perlos2.pod perlos390.pod \
	    perlsolaris.pod perlvmesa.pod perlvms.pod perlvos.pod \
	    perlwin32.pod pod2html pod2latex pod2man pod2text pod2usage \
	    podchecker podselect
d1219 1
a1219 1
	    dprofpp *.bat perlcc pstruct
d1226 2
a1227 2
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR) || rmdir /s $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR) || rmdir /s $(COREDIR)
d1294 1
a1294 1
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR) || rmdir /s $(MINIDIR)
a1302 16

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "dmake nok" instead.
ok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)"

okfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok
 
nok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)"
 
nokfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d4 1
a4 1
#	Visual C++ 2.0 through 6.0 (and possibly newer versions)
a6 4
#	MS Platform SDK 64-bit compiler and tools **experimental**
#
# This is set up to build a perl.exe that runs off a shared library
# (perl58.dll).  Also makes individual DLLs for the XS extensions.
d12 3
d21 2
a22 2
# Set these to wherever you want "dmake install" to put your
# newly built perl.
d28 78
d114 1
a114 1
INST_VER	*= \5.8.0
d129 1
a129 1
# emulation and for thread support.
d131 1
a131 1
USE_MULTI	*= define
d134 3
a136 3
# Interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  
# This needs USE_MULTI above.
d138 1
a138 1
USE_ITHREADS	*= define
d142 2
a143 5
# made by perl.  This needs USE_MULTI above.  
# This is also needed to get fork().
#
USE_IMP_SYS	*= define

d145 1
a145 6
# Comment out next assign to disable perl's I/O subsystem and use compiler's 
# stdio for IO - depending on your compiler vendor and run time library you may 
# then get a number of fails from make test i.e. bugs - complain to them not us ;-). 
# You will also be unable to take full advantage of perl5.8's support for multiple 
# encodings and may see lower IO performance. You have been warned.
USE_PERLIO	= define
d158 2
a159 16
# uncomment exactly one of the following
#
# Visual C++ 2.x
#CCTYPE		*= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		*= MSVC
# Visual C++ >= 6.x
CCTYPE		*= MSVC60
# Borland 5.02 or later
#CCTYPE		*= BORLAND
# mingw32+gcc-2.95.2 or better
#CCTYPE		*= GCC

#
# uncomment this if your Borland compiler is older than v5.4.
#BCCOLD = define
d161 4
a164 8
# uncomment this if you want to use Borland's VCL as your CRT
#BCCVCL = define

#
# uncomment this if you are compiling under Windows 95/98 and command.com
# (not needed if you're running under 4DOS/NT 6.01 or later)
#IS_WIN95	*= define

d166 1
a166 5
# uncomment next line if you want debug version of perl (big,slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		*= Debug
d172 1
a172 1
# Get it from CPAN at http://www.cpan.org/authors/id/D/DO/DOUGL/
d181 1
a181 1
# compiler. Setting this options enables perl to expand wildcards in
d183 3
a185 2
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
a189 14
# if you have the source for des_fcrypt(), uncomment this and make sure the
# file exists (see README.win32).  File should be located in the same
# directory as this file.
#
#CRYPT_SRC	*= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	*= fcrypt.lib

#
a198 17
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
.IF "$(CCTYPE)" == "BORLAND"
CCHOME		*= C:\borland\bcc55
.ELIF "$(CCTYPE)" == "GCC"
CCHOME		*= C:\MinGW
.ELSE
CCHOME		*= $(MSVCDIR)
.ENDIF
CCINCDIR	*= $(CCHOME)\include
CCLIBDIR	*= $(CCHOME)\lib

#
d247 13
d267 7
d282 4
d287 1
a289 1
USE_PERLIO	*= undef
d292 1
a292 1
.IF "$(USE_IMP_SYS)$(USE_MULTI)$(USE_5005THREADS)" == "defineundefundef"
d296 1
a296 1
.IF "$(USE_ITHREADS)$(USE_MULTI)" == "defineundef"
d301 1
a301 1
.IF "$(USE_MULTI)$(USE_5005THREADS)" != "undefundef"
d309 1
a309 1
.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITEW6432
d313 3
a315 12
.IF "$(WIN64)" == ""
.IF "$(PROCESSOR_ARCHITEW6432)" != ""
PROCESSOR_ARCHITECTURE	!= $(PROCESSOR_ARCHITEW6432)
WIN64			= define
.ELIF "$(PROCESSOR_ARCHITECTURE)" == "IA64"
WIN64			= define
.ELSE
WIN64			= undef
.ENDIF
.ENDIF

.IF "$(USE_5005THREADS)" == "define"
a319 5
.IF "$(USE_PERLIO)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-perlio
.ELSE
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)
.ENDIF
d332 1
a332 1
DELAYLOAD	*= -DELAYLOAD:wsock32.dll -DELAYLOAD:shell32.dll delayimp.lib
a333 2
.IF "$(CFG)" == "Debug"
.ELSE
a337 1
.ENDIF
d369 1
a369 1
.ENDIF
d378 1
a378 1
#PCHFLAGS	= -H -Hc -H=c:\temp\bcmoduls.pch
d388 1
a388 1
OPTIMIZE	= -v -D_RTLDLL -DDEBUGGING
d392 1
a392 1
LINK_DBG	=
d397 1
a397 1
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)"  -L"$(CCLIBDIR)"
d400 1
a400 1
LIBOUT_FLAG	=
d403 1
a403 2
DEFINES  += -D_MT -D__USELOCALES__ -D_WIN32_WINNT=0x0410
.END
d405 1
a405 1
LIBC		= cp32mti.lib vcl.lib vcl50.lib vclx50.lib vcle50.lib
d408 1
a408 1

a417 1
i = .i
d425 1
a425 1
INCLUDES	= -I.\include -I. -I.. -I$(COREDIR)
d441 1
a441 1
OPTIMIZE	= -g -O2 -DDEBUGGING
d445 1
a445 1
LINK_DBG	= -g
d452 1
a452 1
LIBOUT_FLAG	=
d469 1
a469 1
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX
d488 1
a488 1
OPTIMIZE	= -O1 -MD -Zi -DDEBUGGING
d490 1
a490 1
LINK_DBG	= -debug
d492 4
a495 6
OPTIMIZE	= -MD -DNDEBUG
LINK_DBG	= -release
.IF "$(WIN64)" == "define"
# enable Whole Program Optimizations (WPO) and Link Time Code Generation (LTCG)
OPTIMIZE	+= -Ox -GL
LINK_DBG	+= -ltcg
d497 1
a497 3
# -O1 yields smaller code, which turns out to be faster than -O2 on x86
OPTIMIZE	+= -O1
#OPTIMIZE	+= -O2
d499 1
a499 9
.ENDIF

.IF "$(WIN64)" == "define"
DEFINES		+= -DWIN64 -DCONSERVATIVE
OPTIMIZE	+= -Wp64 -Op
.ENDIF

.IF "$(USE_PERLCRT)" != "define"
BUILDOPT	+= -DPERL_MSVCRT_READFIX
d506 1
a506 6
		version.lib

# win64 doesn't have some libs
.IF "$(WIN64)" != "define"
LIBBASEFILES	+= odbc32.lib odbccp32.lib
.ENDIF
d520 9
d550 1
a550 1
#
d552 1
a552 1
.SUFFIXES : .c .i $(o) .dll $(a) .exe .rc .res
a556 3
.c.i:
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) -E $< >$@@

d569 1
a569 1
	    -out:$@@ $(BLINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
a585 7
# Nominate a target which causes extensions to be re-built
# This used to be $(PERLEXE), but at worst it is the .dll that they depend
# on and really only the interface - i.e. the .def file used to export symbols
# from the .dll
PERLDEP = perldll.def


a595 1
		..\utils\pstruct	\
a598 4
		..\utils\perlivp	\
		..\utils\libnetcfg	\
		..\utils\enc2xs		\
		..\utils\piconv		\
a607 1
		..\x2p\psed		\
a608 1
		..\lib\ExtUtils\xsubpp	\
d624 1
a624 1
PERLIMPLIB	= ..\libperl58$(a)
a627 4
.IF "$(WIN64)" == "define"
CFGSH_TMPL	= config.vc64
CFGH_TMPL	= config_H.vc64
.ELSE
a629 1
.ENDIF
d633 2
a634 4
# makedef.pl must be updated if this changes, and this should normally
# only change when there is an incompatible revision of the public API.
PERLIMPLIB	*= ..\perl58$(a)
PERLDLL		= ..\perl58.dll
a654 1
		..\locale.c	\
a655 1
		..\numeric.c	\
a662 2
		..\pp_pack.c	\
		..\pp_sort.c	\
a663 1
		..\reentr.c	\
d682 1
d684 1
d689 1
a689 7
		.\win32thread.c

# We need this for miniperl build unless we override canned 
# config.h #define building mini\*
#.IF "$(USE_PERLIO)" == "define"
WIN32_SRC	+= .\win32io.c
#.ENDIF
d766 1
a766 3
		Sys/Hostname Storable Filter/Util/Call Encode \
		Digest/MD5 PerlIO/scalar MIME/Base64 Time/HiRes \
		Unicode/Normalize
d771 75
d874 2
a875 4
		_o=$(o)				~	\
		obj_ext=$(o)			~	\
		_a=$(a)				~	\
		lib_ext=$(a)			~	\
d877 2
a882 1
		useperlio=$(USE_PERLIO)		~	\
d896 1
a896 1
RIGHTMAKE	=
d905 1
a905 1
	$(X2P) Extensions
d952 1
a952 1
# this target added for Win95 port but used to keep the WinNT port able to
d966 1
a966 1
	    perlglob$(o) setargv$(o)
d978 1
a978 1
..\config.sh : config.w32 $(MINIPERL) config_sh.PL FindExt.pm
a988 1
	-cd .. && del /f perl*.dll
d992 1
a992 1
	-perl config_h.PL "INST_VER=$(INST_VER)"
d1011 1
a1011 1
	    $(mktmp $(LKPRE) $(MINI_OBJ:s,\,\\) $(LIBFILES) $(LKPOST))
d1032 1
a1032 1
.IF "$(USE_IMP_SYS)" == "define"
d1109 1
a1109 1
perlmain.c : runperl.c
d1130 1
a1130 1
	copy splittree.pl ..
d1145 84
a1228 9
#----------------------------------------------------------------------------------
Extensions : buildext.pl $(PERLDEP) $(CONFIGPM)
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR)

Extensions_clean :
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) clean

#----------------------------------------------------------------------------------

a1238 2
	copy ..\README.apollo	..\pod\perlapollo.pod
	copy ..\README.beos	..\pod\perlbeos.pod
a1239 1
	copy ..\README.ce	..\pod\perlce.pod
a1240 1
	copy ..\README.dgux	..\pod\perldgux.pod
a1242 1
	copy ..\README.freebsd	..\pod\perlfreebsd.pod
a1243 2
	copy ..\README.hurd	..\pod\perlhurd.pod
	copy ..\README.irix	..\pod\perlirix.pod
a1245 1
	copy ..\README.mint	..\pod\perlmint.pod
a1246 1
	copy ..\README.netware	..\pod\perlnetware.pod
a1248 2
	copy ..\README.plan9	..\pod\perlplan9.pod
	copy ..\README.qnx	..\pod\perlqnx.pod
a1249 2
	copy ..\README.tru64	..\pod\perltru64.pod
	copy ..\README.uts	..\pod\perluts.pod
a1254 1
	cd ..\lib && $(PERLEXE) lib_pm.PL
d1261 3
a1263 1
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs
d1265 2
a1266 1
	-del /f $(LIBDIR)\XSLoader.pm
d1268 1
a1268 1
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm
d1270 1
a1270 1
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
a1271 1
	-del /f $(LIBDIR)\PerlIO\scalar.pm
a1273 9
	-del /f $(LIBDIR)\Storable.pm
	-del /f $(LIBDIR)\Filter\Util\Call.pm
	-del /f $(LIBDIR)\Digest\MD5.pm
	-del /f $(LIBDIR)\MIME\Base64.pm
	-del /f $(LIBDIR)\MIME\QuotedPrint.pm
	-del /f $(LIBDIR)\Time\HiRes.pm
	-del /f $(LIBDIR)\List\Util.pm
	-del /f $(LIBDIR)\Scalar\Util.pm
	-del /f $(LIBDIR)\Unicode\Normalize.pm
d1275 1
a1277 6
	-if exist $(LIBDIR)\Filter\Util\Call rmdir /s /q $(LIBDIR)\Filter\Util\Call || rmdir /s $(LIBDIR)\Filter
	-if exist $(LIBDIR)\Filter\Util rmdir /s /q $(LIBDIR)\Filter\Util || rmdir /s $(LIBDIR)\Filter
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest || rmdir /s $(LIBDIR)\Digest
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME || rmdir /s $(LIBDIR)\MIME
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List || rmdir /s $(LIBDIR)\List
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar || rmdir /s $(LIBDIR)\Scalar
d1279 4
a1282 9
	    perlaix.pod perlamiga.pod perlapollo.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcygwin.pod perldgux.pod \
	    perldos.pod perlepoc.pod perlfreebsd.pod perlhpux.pod perlhurd.pod \
	    perlirix.pod perlmachten.pod perlmint.pod \
	    perlmacos.pod perlmpeix.pod perlnetware.pod \
	    perlos2.pod perlos390.pod \
	    perlplan9.pod perlqnx.pod \
	    perlsolaris.pod perltru64.pod perluts.pod \
	    perlvmesa.pod perlvms.pod perlvos.pod \
d1285 3
a1287 3
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs \
	    perldoc perlivp dprofpp perlcc libnetcfg enc2xs piconv *.bat
	-cd ..\x2p && del /f find2perl s2p psed *.bat
d1291 2
a1292 2
	-cd .. && del /s *$(a) *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib
	-cd $(EXTDIR) && del /s *.def Makefile Makefile.old
d1308 1
a1308 1
	copy splittree.pl ..
d1349 1
a1349 11
_test : $(RIGHTMAKE)
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
	cd ..\t && $(PERLEXE) -I..\lib harness

clean : Extensions_clean
d1380 1
a1380 1

d1383 1
a1383 1

@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d37 1
a37 1
INST_VER	*= \5.8.2
d76 1
a76 7
USE_PERLIO	*= define

#
# Comment this out if you don't want to enable large file support for
# some reason.  Should normally only be changed to maintain compatibility
# with an older release of perl.
USE_LARGE_FILES *= define
a100 3
# Uncomment this if you are using the latest MinGW release (2.0.0)
# with gcc3.2
#USE_GCC_V3_2	*= define
d142 3
a144 3
# if you want to have the crypt() builtin function implemented, leave this or
# CRYPT_LIB uncommented.  The fcrypt.c file named here contains a suitable
# version of des_fcrypt().
d146 1
a146 1
CRYPT_SRC	*= fcrypt.c
a248 1
USE_LARGE_FILES	*= undef
a390 3
.IF "$(USE_GCC_V3_2)" == "define"
LINK32		= g++
.END
a599 1
		..\utils\cpan		\
a668 1
		..\pad.c	\
a824 1
		usethreads=$(USE_ITHREADS)	~	\
d830 1
a830 2
		uselargefiles=$(USE_LARGE_FILES)	~	\
		LINK_FLAGS=$(LINK_FLAGS:s/\/\\/)	~	\
a946 1
	$(XCOPY) ..\*.inc $(COREDIR)\*.*
d1110 27
a1136 36
	copy ..\README.aix      .\perlaix.pod
	copy ..\README.amiga    .\perlamiga.pod
	copy ..\README.apollo   .\perlapollo.pod
	copy ..\README.beos     .\perlbeos.pod
	copy ..\README.bs2000   .\perlbs2000.pod
	copy ..\README.ce       .\perlce.pod
	copy ..\README.cn       .\perlcn.pod
	copy ..\README.cygwin   .\perlcygwin.pod
	copy ..\README.dgux     .\perldgux.pod
	copy ..\README.dos      .\perldos.pod
	copy ..\README.epoc     .\perlepoc.pod
	copy ..\README.freebsd  .\perlfreebsd.pod
	copy ..\README.hpux     .\perlhpux.pod
	copy ..\README.hurd     .\perlhurd.pod
	copy ..\README.irix     .\perlirix.pod
	copy ..\README.jp       .\perljp.pod
	copy ..\README.ko       .\perlko.pod
	copy ..\README.machten  .\perlmachten.pod
	copy ..\README.macos    .\perlmacos.pod
	copy ..\README.macosx   .\perlmacosx.pod
	copy ..\README.mint     .\perlmint.pod
	copy ..\README.mpeix    .\perlmpeix.pod
	copy ..\README.netware  .\perlnetware.pod
	copy ..\README.os2      .\perlos2.pod
	copy ..\README.os390    .\perlos390.pod
	copy ..\README.os400    .\perlos400.pod
	copy ..\README.plan9    .\perlplan9.pod
	copy ..\README.qnx      .\perlqnx.pod
	copy ..\README.solaris  .\perlsolaris.pod
	copy ..\README.tru64    .\perltru64.pod
	copy ..\README.tw       .\perltw.pod
	copy ..\README.uts      .\perluts.pod
	copy ..\README.vmesa    .\perlvmesa.pod
	copy ..\README.vms      .\perlvms.pod
	copy ..\README.vos      .\perlvos.pod
	copy ..\README.win32    .\perlwin32.pod
d1138 2
d1168 9
a1176 18
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO
	-if exist $(LIBDIR)\IO rmdir /s $(LIBDIR)\IO
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B
	-if exist $(LIBDIR)\B rmdir /s $(LIBDIR)\B
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data
	-if exist $(LIBDIR)\Data rmdir /s $(LIBDIR)\Data
	-if exist $(LIBDIR)\Filter\Util rmdir /s /q $(LIBDIR)\Filter\Util
	-if exist $(LIBDIR)\Filter\Util rmdir /s $(LIBDIR)\Filter\Util
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest
	-if exist $(LIBDIR)\Digest rmdir /s $(LIBDIR)\Digest
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\MIME rmdir /s $(LIBDIR)\MIME
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\List rmdir /s $(LIBDIR)\List
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\Scalar rmdir /s $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
	-if exist $(LIBDIR)\XS rmdir /s $(LIBDIR)\XS
d1178 10
a1187 10
	    perlaix.pod perlamiga.pod perlapollo.pod perlbeos.pod \
	    perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldgux.pod perldos.pod perlepoc.pod perlfreebsd.pod \
	    perlhpux.pod perlhurd.pod perlirix.pod perljp.pod perlko.pod \
	    perlmachten.pod perlmacos.pod perlmacosx.pod perlmint.pod \
	    perlmpeix.pod perlnetware.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlsolaris.pod \
	    perltru64.pod perltw.pod perluts.pod perlvmesa.pod perlvms.pod \
	    perlvms.pod perlvos.pod perlwin32.pod \
	    pod2html pod2latex pod2man pod2text pod2usage \
d1190 1
a1190 1
	    perldoc perlivp dprofpp perlcc libnetcfg enc2xs piconv cpan *.bat
d1197 2
a1198 4
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR)
	-if exist $(AUTODIR) rmdir /s $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR)
	-if exist $(COREDIR) rmdir /s $(COREDIR)
d1244 9
d1275 1
a1275 2
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR)
	-if exist $(MINIDIR) rmdir /s $(MINIDIR)
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d37 1
a37 1
INST_VER	*= \5.8.3
d400 1
a400 1
LINK32		= g++
a613 3
		..\utils\xsubpp		\
		..\utils\prove		\
		..\utils\instmodsh	\
d625 1
a1125 2
# Note that this next section is parsed (and regenerated) by pod/buildtoc
# so please check that script before making structural changes here
d1128 36
a1164 37
	copy ..\README.aix      ..\pod\perlaix.pod
	copy ..\README.amiga    ..\pod\perlamiga.pod
	copy ..\README.apollo   ..\pod\perlapollo.pod
	copy ..\README.beos     ..\pod\perlbeos.pod
	copy ..\README.bs2000   ..\pod\perlbs2000.pod
	copy ..\README.ce       ..\pod\perlce.pod
	copy ..\README.cn       ..\pod\perlcn.pod
	copy ..\README.cygwin   ..\pod\perlcygwin.pod
	copy ..\README.dgux     ..\pod\perldgux.pod
	copy ..\README.dos      ..\pod\perldos.pod
	copy ..\README.epoc     ..\pod\perlepoc.pod
	copy ..\README.freebsd  ..\pod\perlfreebsd.pod
	copy ..\README.hpux     ..\pod\perlhpux.pod
	copy ..\README.hurd     ..\pod\perlhurd.pod
	copy ..\README.irix     ..\pod\perlirix.pod
	copy ..\README.jp       ..\pod\perljp.pod
	copy ..\README.ko       ..\pod\perlko.pod
	copy ..\README.machten  ..\pod\perlmachten.pod
	copy ..\README.macos    ..\pod\perlmacos.pod
	copy ..\README.macosx   ..\pod\perlmacosx.pod
	copy ..\README.mint     ..\pod\perlmint.pod
	copy ..\README.mpeix    ..\pod\perlmpeix.pod
	copy ..\README.netware  ..\pod\perlnetware.pod
	copy ..\README.os2      ..\pod\perlos2.pod
	copy ..\README.os390    ..\pod\perlos390.pod
	copy ..\README.os400    ..\pod\perlos400.pod
	copy ..\README.plan9    ..\pod\perlplan9.pod
	copy ..\README.qnx      ..\pod\perlqnx.pod
	copy ..\README.solaris  ..\pod\perlsolaris.pod
	copy ..\README.tru64    ..\pod\perltru64.pod
	copy ..\README.tw       ..\pod\perltw.pod
	copy ..\README.uts      ..\pod\perluts.pod
	copy ..\README.vmesa    ..\pod\perlvmesa.pod
	copy ..\README.vms      ..\pod\perlvms.pod
	copy ..\README.vos      ..\pod\perlvos.pod
	copy ..\README.win32    ..\pod\perlwin32.pod
	copy ..\pod\perl583delta.pod ..\pod\perldelta.pod
a1168 3
# Note that the pod cleanup in this next section is parsed (and regenerated
# by pod/buildtoc so please check that script before making changes here

d1214 7
a1220 8
	    perldelta.pod perldgux.pod perldos.pod perlepoc.pod \
	    perlfreebsd.pod perlhpux.pod perlhurd.pod perlirix.pod \
	    perljp.pod perlko.pod perlmachten.pod perlmacos.pod \
	    perlmacosx.pod perlmint.pod perlmpeix.pod perlnetware.pod \
	    perlos2.pod perlos390.pod perlos400.pod perlplan9.pod \
	    perlqnx.pod perlsolaris.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvms.pod perlvms.pod perlvos.pod \
	    perlwin32.pod \
d1224 1
a1224 2
	    perldoc perlivp dprofpp perlcc libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d37 1
a37 1
#INST_VER	*= \5.8.5
d48 1
a48 1
#INST_ARCH	*= \$(ARCHNAME)
d102 1
a102 1
#CCTYPE		*= MSVC60
d105 5
a109 2
# MinGW with gcc-2.95.2 or later
CCTYPE		*= GCC
d401 3
d406 1
a406 1
RSC		= windres
d435 2
a436 2
OPTIMIZE	= -s -O2
LINK_DBG	= -s
d472 3
d483 2
a484 9
OPTIMIZE	= -MD -Zi -DNDEBUG
# we enable debug symbols in release builds also
LINK_DBG	= -debug -opt:ref,icf
# you may want to enable this if you want COFF symbols in the executables
# in addition to the PDB symbols.  The default Dr. Watson that ships with
# Windows can use the the former but not latter.  The free WinDbg can be
# installed to get better stack traces from just the PDB symbols, so we
# avoid the bloat of COFF symbols by default.
#LINK_DBG	= $(LINK_DBG) -debugtype:both
a574 3
.IF "$(CCTYPE)" == "GCC"
	$(RSC) --use-temp-file -i $< -o $@@
.ELSE
a575 1
.ENDIF
a587 14
# Unicode data files generated by mktables
UNIDATAFILES	 = ..\lib\unicore\Canonical.pl ..\lib\unicore\Exact.pl \
		   ..\lib\unicore\Properties ..\lib\unicore\Decomposition.pl \
		   ..\lib\unicore\CombiningClass.pl ..\lib\unicore\Name.pl \
		   ..\lib\unicore\PVA.pl

# Directories of Unicode data files generated by mktables
UNIDATADIR1	= ..\lib\unicore\To
UNIDATADIR2	= ..\lib\unicore\lib

PERLEXE_ICO	= .\perlexe.ico
PERLEXE_RES	= .\perlexe.res
PERLDLL_RES	=

d804 1
a804 1
		Unicode/Normalize Win32
d870 1
a870 1
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)	\
a1010 1

a1011 1

a1012 1

a1044 5
$(PERLEXE_ICO): $(MINIPERL) makeico.pl
	$(MINIPERL) makeico.pl > $@@

$(PERLEXE_RES): perlexe.rc $(PERLEXE_ICO)

a1115 4
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext

# Note: The next two targets explicitly remove a "blibdirs.exists" file that
# currerntly gets left behind, until CPAN RT Ticket #5616 is resolved.
a1118 7
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext clean
	-if exist $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists del /f $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists

Extensions_realclean :
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) realclean
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext realclean
	-if exist $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists del /f $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists
d1169 1
a1169 1
	copy ..\pod\perl585delta.pod ..\pod\perldelta.pod
d1177 1
a1177 3
# the doubled rmdir calls are needed because older cmd shells
# don't understand /q
distclean: realclean
a1180 1
	-del /f $(DYNALOADER).c
a1181 4
	-del /f $(EXTDIR)\DynaLoader\DynaLoader.pm
	-del /f $(EXTDIR)\DynaLoader\XSLoader.pm
	-del /f $(LIBDIR)\Encode.pm $(LIBDIR)\encoding.pm $(LIBDIR)\Errno.pm
	-del /f $(LIBDIR)\Config.pod $(LIBDIR)\POSIX.pod $(LIBDIR)\threads.pm
d1183 1
a1183 1
	-del /f $(LIBDIR)\XSLoader.pm $(LIBDIR)\lib.pm
d1188 2
a1189 1
	-del /f $(LIBDIR)\ByteLoader.pm
a1190 1
	-del /f $(LIBDIR)\Devel\PPPort.pm
d1193 1
d1195 2
a1196 6
	-del /f $(LIBDIR)\PerlIO\encoding.pm
	-del /f $(LIBDIR)\PerlIO\scalar.pm
	-del /f $(LIBDIR)\PerlIO\via.pm
	-del /f $(LIBDIR)\Sys\Hostname.pm
	-del /f $(LIBDIR)\Thread\Signal.pm $(LIBDIR)\Thread\Specific.pm
	-del /f $(LIBDIR)\threads\shared.pm
d1198 2
a1200 1
	-del /f $(LIBDIR)\Win32.pm
a1206 2
	-if exist $(LIBDIR)\Encode rmdir /s /q $(LIBDIR)\Encode
	-if exist $(LIBDIR)\Encode rmdir /s $(LIBDIR)\Encode
d1209 2
a1238 1
	-del /f $(PERLEXE_ICO) perl.base
a1251 2
	if exist ..\perl*.pdb $(XCOPY) ..\perl*.pdb $(INST_BIN)\*.*
	if exist ..\x2p\a2p.pdb $(XCOPY) ..\x2p\a2p.pdb $(INST_BIN)\*.*
d1262 2
a1263 13
# Move the rule for making $(UNIDATAFILES) into a separate target and leave the
# actual rule here blank because dmake runs the rule here once for each of the
# files listed in $(UNIDATAFILES)
$(UNIDATAFILES) : make_unidatafiles

make_unidatafiles : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables
	cd ..\lib\unicore && \
	..\$(MINIPERL) -I.. mktables

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) $(UNIDATAFILES) utils
	$(XCOPY) $(MINIPERL) ..\t\$(NULL)
	if exist ..\t\perl.exe del /f ..\t\perl.exe
	rename ..\t\miniperl.exe perl.exe
d1270 1
d1272 1
a1272 1
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t
d1300 1
a1300 3
# the doubled rmdir calls are needed because older cmd shells
# don't understand /q
_clean :
a1313 5
	-if exist $(UNIDATADIR1) rmdir /s /q $(UNIDATADIR1)
	-if exist $(UNIDATADIR1) rmdir /s $(UNIDATADIR1)
	-if exist $(UNIDATADIR2) rmdir /s /q $(UNIDATADIR2)
	-if exist $(UNIDATADIR2) rmdir /s $(UNIDATADIR2)
	-@@erase $(UNIDATAFILES)
a1321 4

clean : Extensions_clean _clean

realclean : Extensions_realclean _clean
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d37 1
a37 1
#INST_VER	*= \5.8.6
d168 1
a168 8
PERL_MALLOC	*= define

#
# set this to enable debugging mstats
# This must be enabled to use the Devel::Peek::mstat() function.  This cannot
# be enabled without PERL_MALLOC as well.
#
DEBUG_MSTATS  = define
a257 13
.IF "$(PERL_MALLOC)" == "undef"
PERL_MALLOC	= undef
DEBUG_MSTATS   = undef
.ENDIF

.IF "$(DEBUG_MSTATS)" == "undef"
DEBUG_MSTATS   = undef
.ENDIF

.IF "$(DEBUG_MSTATS)" == "define"
BUILDOPT       += -DPERL_DEBUGGING_MSTATS
.ENDIF

d312 1
a312 1
DELAYLOAD	*= -DELAYLOAD:ws2_32.dll -DELAYLOAD:shell32.dll delayimp.lib
d422 1
a422 1
		  -loleaut32 -lnetapi32 -luuid -lws2_32 -lmpr \
d506 1
a506 1
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
d861 1
d1017 1
a1017 1
	$(CC) -c -I. -DWITH_STATIC $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
d1019 1
a1019 1
	$(CC) -c -I. -DWITH_STATIC $(CFLAGS_O) $(OBJOUT_FLAG)$@@ perllib.c
a1034 1
	$(MINIPERL) -I..\lib buildext.pl --create-perllibst-h $(STATIC_EXT)
d1038 1
a1038 1
$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
a1058 1
	    $(shell $(MINIPERL) -I..\lib buildext.pl --list-static-libs) \
a1063 1

d1139 2
a1140 6
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --dynamic
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic

Extensions_static : buildext.pl
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --static
d1204 1
a1204 1
	copy ..\pod\perl586delta.pod ..\pod\perldelta.pod
a1282 1
	-del /f perllibst.h
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d4 3
a6 3
#	Visual C++ 2.0 through 7.0 (and possibly newer versions)
#	Borland C++ 5.02 or better
#	Mingw32 with gcc-2.95.2 or better
d37 1
a37 1
#INST_VER	*= \5.8.8
a50 8
# Uncomment this if you want perl to run
# 	$Config{sitelibexp}\sitecustomize.pl
# before anything else.  This script can then be set up, for example,
# to add additional entries to @@INC.
#
#USE_SITECUST	*= define

#
d82 1
a82 1
USE_LARGE_FILES	*= define
d101 1
a101 1
# Visual C++ 6.x (aka Visual Studio 98)
a102 4
# Visual C++ Toolkit 2003 (free version of Visual C++ 7.x command-line tools)
#CCTYPE		*= MSVC70FREE
# Visual C++ 7.x (aka Visual Studio .NET 2003) (full version)
#CCTYPE		*= MSVC70
d110 1
a110 1
#BCCOLD		*= define
d113 1
a113 1
#BCCVCL		*= define
d168 1
a168 1
#PERL_MALLOC	*= define
d175 1
a175 1
#DEBUG_MSTATS	*= define
d185 1
a185 1
CCHOME		*= C:\Borland\BCC55
a196 11
BUILDOPT	*= $(BUILDOPTEXTRA)

#
# Adding -DPERL_HASH_SEED_EXPLICIT will disable randomization of Perl's
# internal hash function unless the PERL_HASH_SEED environment variable is set.
# Alternatively, adding -DNO_HASH_SEED will completely disable the
# randomization feature. 
# The latter is required to maintain binary compatibility with Perl 5.8.0.
#
#BUILDOPT	+= -DPERL_HASH_SEED_EXPLICIT
#BUILDOPT	+= -DNO_HASH_SEED
a216 1
#
a250 1
DEBUG_MSTATS	*= undef
a257 1
USE_SITECUST	*= undef
d265 1
a265 1
.IF "$(USE_IMP_SYS)" == "define"
d267 1
d270 2
a271 2
.IF "$(PERL_MALLOC)" == "undef"
DEBUG_MSTATS	= undef
d275 1
a275 1
BUILDOPT	+= -DPERL_DEBUGGING_MSTATS
d278 1
a278 1
.IF "$(USE_IMP_SYS) $(USE_MULTI) $(USE_5005THREADS)" == "define undef undef"
d282 1
a282 1
.IF "$(USE_ITHREADS) $(USE_MULTI)" == "define undef"
d287 1
a287 5
.IF "$(USE_SITECUST)" == "define"
BUILDOPT	+= -DUSE_SITECUSTOMIZE
.ENDIF

.IF "$(USE_MULTI) $(USE_5005THREADS)" != "undef undef"
d327 5
a331 4
# Visual Studio 98 and .NET 2003 specific
# VC++ 6.x and 7.x can load DLL's on demand.  Makes the test suite run in
# about 10% less time.  (The free version of 7.x can't do this, however.)
.IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"
d333 7
d375 1
a375 1
RSC		= brcc32
d388 1
a388 8

# same libs as MSVC, except Borland doesn't have oldnames.lib
LIBFILES	= $(CRYPT_LIB) \
		kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib \
		import32.lib $(LIBC)
a397 1
EXTRACFLAGS	=
d400 1
a400 2
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)" -L"$(CCLIBDIR)" \
		-L"$(CCLIBDIR)\PSDK"
d443 1
a443 1
		  -lwinmm -lversion -lodbc32 -lodbccp32
a452 1
EXTRACFLAGS	=
a518 8
# the string-pooling option -Gf is deprecated in VC++ 7.x and will be removed
# in later versions, so use read-only string-pooling (-GF) instead
.IF "$(CCTYPE)" == "MSVC70FREE" || "$(CCTYPE)" == "MSVC70"
STRPOOL		= -GF
.ELSE
STRPOOL		= -Gf
.ENDIF

d537 1
a537 2
EXTRACFLAGS	= -nologo $(STRPOOL) -W3
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) \
a558 22
# Some dmake's built with Borland C++, including Sarathy's one at:
# http://search.cpan.org/CPAN/authors/id/G/GS/GSAR/dmake-4.1pl1-win32.zip
# require backslashes to be doubled-up when written to $(mktmp) files.
# Other dmake's do not require this and would actually output a double
# backslash if they were doubled-up.
.IF "$(shell @@type $(mktmp \\))"=="\\"
B=\\
.ELSE
B=\\\
.ENDIF

# There is a related issue with other escape sequences: Sarathy's old
# dmake automatically maps escape sequences like \n to their ASCII values
# when used in macros, while other dmake's only do so if this behaviour
# is explicitly requested with the :m modifier.
DONTUSETHIS=\n
.IF "$(shell @@type $(mktmp \n))"=="\n"
N=$(DONTUSETHIS:m)
.ELSE
N=$(DONTUSETHIS)
.ENDIF

d606 1
a606 1
CONFIGPM	= ..\lib\Config.pm ..\lib\Config_heavy.pl
d700 1
a700 1
NOOP		= @@rem
a797 1
		..\regcomp.h	\
d841 1
a841 1
STATIC_EXT	= 
d857 2
a858 2
		INST_TOP=$(INST_TOP:s,\,$B,)	~	\
		INST_VER=$(INST_VER:s,\,$B,)	~	\
d863 1
a863 1
		ccflags=$(EXTRACFLAGS) $(OPTIMIZE) $(DEFINES) $(BUILDOPT)	~	\
d868 1
a868 1
		incpath=$(CCINCDIR:s,\,$B,)	~	\
d870 1
a870 1
		libpth=$(CCLIBDIR:s,\,$B,);$(EXTRALIBDIRS:s,\,$B,)	~	\
d884 1
a884 2
		usesitecustomize=$(USE_SITECUST)	~	\
		LINK_FLAGS=$(LINK_FLAGS:s,\,$B,)	~	\
d894 1
a899 11
.IMPORT .IGNORE : SystemRoot windir

# Don't just .IMPORT OS from the environment because dmake sets OS itself.
ENV_OS=$(subst,OS=, $(shell @@set OS))

.IF "$(ENV_OS)" == "Windows_NT"
ODBCCP32_DLL = $(SystemRoot)\system32\odbccp32.dll
.ELSE
ODBCCP32_DLL = $(windir)\system\odbccp32.dll
.ENDIF

a1009 2
	if not exist $(CCLIBDIR)\PSDK\odbccp32.lib \
	    cd $(CCLIBDIR)\PSDK && implib odbccp32.lib $(ODBCCP32_DLL)
d1011 1
a1011 1
	    @@$(mktmp c0x32$(o) $(MINI_OBJ:s,\,$B,),$(@@:s,\,$B,),,$(LIBFILES),)
d1014 1
a1014 1
	    $(mktmp $(LKPRE) $(MINI_OBJ:s,\,$B,) $(LIBFILES) $(LKPOST))
d1017 1
a1017 1
	    @@$(mktmp $(BLINK_FLAGS) $(LIBFILES) $(MINI_OBJ:s,\,$B,))
d1036 1
a1036 1
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
d1038 1
a1038 1
	$(CC) -c -I. $(CFLAGS_O) $(OBJOUT_FLAG)$@@ perllib.c
d1054 1
a1054 1
	$(MINIPERL) -I..\lib buildext.pl --create-perllibst-h
d1061 4
a1064 4
	    @@$(mktmp c0d32$(o) $(PERLDLL_OBJ:s,\,$B,)$N \
		$@@,$N \
	        $(subst,\,$B $(shell @@type Extensions_static)) $(LIBFILES)$N \
		perldll.def$N)
d1068 1
a1068 3
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ:s,\,$B,) \
	        $(subst,\,$B $(shell @@type Extensions_static)) \
	        $(LIBFILES) $(LKPOST))
d1075 2
a1076 3
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ:s,\,$B,) \
	        $(subst,\,$B $(shell @@type Extensions_static)) \
	        $(LIBFILES) perl.exp $(LKPOST))
d1079 1
a1079 1
	    @@Extensions_static \
d1081 1
a1081 1
	        $(PERLDLL_RES) $(PERLDLL_OBJ:s,\,$B,))
d1114 1
a1114 1
	    @@$(mktmp c0x32$(o) $(X2P_OBJ:s,\,$B,),$(@@:s,\,$B,),,$(LIBFILES),)
d1117 1
a1117 1
	    $(mktmp $(LKPRE) $(X2P_OBJ:s,\,$B,) $(LIBFILES) $(LKPOST))
d1120 1
a1120 1
	    @@$(mktmp $(BLINK_FLAGS) $(LIBFILES) $(X2P_OBJ:s,\,$B,))
d1132 3
a1134 3
	    @@$(mktmp c0x32$(o) $(PERLEXE_OBJ:s,\,$B,)$N \
	    $(@@:s,\,$B,),$N \
	    $(PERLIMPLIB) $(LIBFILES)$N)
d1159 1
a1159 1
#-------------------------------------------------------------------------------
d1165 1
d1167 3
a1169 2
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
	$(MINIPERL) -I..\lib buildext.pl --list-static-libs > Extensions_static
d1174 1
d1179 1
d1181 1
a1181 1
#-------------------------------------------------------------------------------
a1210 1
	copy ..\README.linux    ..\pod\perllinux.pod
a1216 1
	copy ..\README.openbsd  ..\pod\perlopenbsd.pod
d1230 1
a1230 1
	copy ..\pod\perl588delta.pod ..\pod\perldelta.pod
a1286 4
	-if exist $(LIBDIR)\Sys rmdir /s /q $(LIBDIR)\Sys
	-if exist $(LIBDIR)\Sys rmdir /s $(LIBDIR)\Sys
	-if exist $(LIBDIR)\threads rmdir /s /q $(LIBDIR)\threads
	-if exist $(LIBDIR)\threads rmdir /s $(LIBDIR)\threads
d1294 6
a1299 6
	    perljp.pod perlko.pod perllinux.pod perlmachten.pod \
	    perlmacos.pod perlmacosx.pod perlmint.pod perlmpeix.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlsolaris.pod \
	    perltru64.pod perltw.pod perluts.pod perlvmesa.pod perlvms.pod \
	    perlvms.pod perlvos.pod perlwin32.pod \
d1311 1
a1311 1
	-cd .. && del /s *$(a) *.map *.pdb *.ilk *.tds *.bs *$(o) .exists pm_to_blib
d1336 6
a1341 1
$(UNIDATAFILES) .UPDATEALL : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables
d1368 1
a1368 1
	cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1372 1
a1372 1
	    cd ..\t && $(PERLEXE) -I.\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1382 1
a1382 1
	cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
a1412 2
	-@@erase *.tds
	-@@erase Extensions_static
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d4 3
a6 3
#	Visual C++ 2.0 or later
#	Borland C++ 5.02 or later
#	MinGW with gcc-2.95.2 or later
d10 1
a10 1
# (perl510.dll).  Also makes individual DLLs for the XS extensions.
d37 1
a37 1
#INST_VER	*= \5.10.0
d93 10
d109 1
a109 1
# Visual C++ 6.x (aka Visual C++ 98)
d111 1
a111 1
# Visual C++ Toolkit 2003 (aka Visual C++ 7.x) (free command-line tools)
d113 1
a113 1
# Visual C++ .NET 2003 (aka Visual C++ 7.x) (full version)
a114 8
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
#CCTYPE		*= MSVC80FREE
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
#CCTYPE		*= MSVC80
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
#CCTYPE		*= MSVC90FREE
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
#CCTYPE		*= MSVC90
a189 18
# set this to additionally provide a statically linked perl-static.exe.
# Note that dynamic loading will not work with this perl, so you must
# include required modules statically using the STATIC_EXT or ALL_STATIC
# variables below. A static library perl510s.lib will also be created.
# Ordinary perl.exe is not affected by this option.
#
#BUILD_STATIC	*= define

#
# in addition to BUILD_STATIC the option ALL_STATIC makes *every*
# extension get statically built
# This will result in a very large perl executable, but the main purpose
# is to have proper linking set so as to be able to create miscellaneous
# executables with different built-in extensions
#
#ALL_STATIC	*= define

#
d277 6
d303 1
a303 1
.IF "$(USE_IMP_SYS) $(USE_MULTI)" == "define undef"
d309 1
d316 1
a316 1
.IF "$(USE_MULTI)" != "undef"
a328 3
# When we are running from a 32bit cmd.exe on AMD64 then
# PROCESSOR_ARCHITECTURE is set to x86 and PROCESSOR_ARCHITEW6432
# is set to AMD64
d332 1
a332 1
.ELIF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITECTURE)" == "IA64"
d339 4
a342 10
ARCHITECTURE = $(PROCESSOR_ARCHITECTURE)
.IF "$(ARCHITECTURE)" == "AMD64"
ARCHITECTURE	= x64
.ENDIF
.IF "$(ARCHITECTURE)" == "IA64"
ARCHITECTURE	= ia64
.ENDIF

.IF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-multi
d345 1
a345 1
ARCHNAME	= MSWin32-$(ARCHITECTURE)-perlio
d347 1
a347 1
ARCHNAME	= MSWin32-$(ARCHITECTURE)
d349 1
d356 5
a360 21
# Visual C++ 98, .NET 2003, 2005 and 2008 specific.
# VC++ 6.x, 7.x, 8.x and 9.x can load DLL's on demand.  Makes the test suite run
# in about 10% less time.  (The free version of 7.x can't do this, but the free
# versions of 8.x and 9.x can.)
.IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"     || \
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" ||
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DELAYLOAD	*= -DELAYLOAD:ws2_32.dll delayimp.lib
.ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. Embed
# them for simplicity, and delete them afterwards so that they don't get
# installed too.
.IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
EMBED_EXE_MANI	= mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  del $@@.manifest
EMBED_DLL_MANI	= mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  del $@@.manifest
a369 1
HTMLDIR		= .\html
d377 1
d394 1
a394 1
LIB32		= tlib /a /P128
d429 1
a429 1
LINK_FLAGS	= $(LINK_DBG) -x -L"$(INST_COREDIR)" -L"$(CCLIBDIR)" \
a490 1
# See comments about PERL_MSVCRT_READFIX in the "cl" compiler section below.
d509 1
a509 1
CXX_FLAG	= -TP -EHsc
d547 1
a547 1
OPTIMIZE	+= -Wp64 -fp:precise
d550 6
a555 5
# For now, silence VC++ 8.x's and 9.x's warnings about "unsafe" CRT functions
# and POSIX CRT function names being deprecated.
.IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DEFINES		+= -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
a557 4
# Use the MSVCRT read() fix if the PerlCRT was not chosen, but only when using
# VC++ 6.x or earlier. Later versions use MSVCR70.dll, MSVCR71.dll, etc, which
# do not require the fix.
.IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC" || "$(CCTYPE)" == "MSVC60" 
a560 1
.ENDIF
d566 1
a566 1
		version.lib odbc32.lib odbccp32.lib
d568 3
a570 6
# The 64 bit Platform SDK compilers contain a runtime library that doesn't
# include the buffer overrun verification code used by the /GS switch.
# Since the code links against libraries that are compiled with /GS, this
# "security cookie verification" must be included via bufferoverlow.lib.
.IF "$(WIN64)" == "define"
LIBBASEFILES    = $(LIBBASEFILES) bufferoverflowU.lib
d576 1
a576 1
EXTRACFLAGS	= -nologo -GF -W3
a581 1
LIB_FLAGS	= -nologo
d599 18
a616 7
# Some old dmakes (including Sarathy's one at
# http://search.cpan.org/CPAN/authors/id/G/GS/GSAR/dmake-4.1pl1-win32.zip)
# don't support logical OR (||) or logical AND (&&) in conditional
# expressions and hence don't process this makefile correctly. Determine
# whether this is the case so that we can give the user an error message.
.IF 1 == 1 || 1 == 1
NEWDMAKE = define
d618 1
a618 1
NEWDMAKE = undef
a651 1
	$(EMBED_DLL_MANI)
d656 1
a656 1
	$(RSC) --use-temp-file --include-dir=. --include-dir=.. -O COFF -i $< -o $@@
a666 1
PERLEXESTATIC	= ..\perl-static.exe
a670 6
GENUUDMAP	= ..\generate_uudmap.exe
.IF "$(BUILD_STATIC)" == "define"
PERLSTATIC	= static
.ELSE
PERLSTATIC	= 
.ENDIF
d706 1
a710 2
		..\utils\config_data	\
		..\utils\corelist	\
a713 6
		..\utils\ptar		\
		..\utils\ptardiff	\
		..\utils\cpanp-run-perl	\
		..\utils\cpanp	\
		..\utils\cpan2dist	\
		..\utils\shasum		\
d741 1
a741 2
PERLIMPLIB	= ..\libperl510$(a)
PERLSTATICLIB	= ..\libperl510s$(a)
d757 2
a758 3
PERLIMPLIB	*= ..\perl510$(a)
PERLSTATICLIB	*= ..\perl510s$(a)
PERLDLL		= ..\perl510.dll
d760 2
a761 2
XCOPY		= xcopy /f /r /i /d /y
RCOPY		= xcopy /f /r /i /e /d /y
a777 1
		..\mro.c	\
a779 1
		..\mathoms.c    \
d873 1
a880 2
UUDMAP_H	= ..\uudmap.h

a888 1
GENUUDMAP_OBJ	= $(GENUUDMAP:db:+$(o))
a891 1
PERLEXEST_OBJ	= perlmainst$(o)
d899 7
a905 11
.IF "$(ALL_STATIC)" == "define"
# some exclusions, unfortunately, until fixed:
#  - Win32 extension contains overlapped symbols with win32.c (BUG!)
#  - MakeMaker isn't capable enough for SDBM_File (smaller bug)
#  - Encode (encoding search algorithm relies on shared library?)
STATIC_EXT	= * !Win32 !SDBM_File !Encode
.ELSE
# specify static extensions here, for example:
#STATIC_EXT	= Cwd Compress/Raw/Zlib
STATIC_EXT	= Win32CORE
.ENDIF
d909 5
d920 2
a921 2
		INST_TOP=$(INST_TOP)	~	\
		INST_VER=$(INST_VER)	~	\
d931 1
a931 1
		incpath=$(CCINCDIR)	~	\
d933 1
a933 1
		libpth=$(CCLIBDIR);$(EXTRALIBDIRS)	~	\
d942 1
d948 1
a948 1
		LINK_FLAGS=$(LINK_FLAGS)	~	\
d978 1
a978 14
all : CHECKDMAKE .\config.h $(GLOBEXE) $(MINIPERL) $(MK2)		\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort	\
	$(PERLEXE) $(X2P) Extensions $(PERLSTATIC)

..\regcharclass.h : ..\Porting\regcharclass.pl
	cd .. && miniperl Porting\regcharclass.pl && cd win32

regnodes : ..\regnodes.h

..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h	

..\regexec$(o) : ..\regnodes.h ..\regcharclass.h

reonly : regnodes .\config.h $(GLOBEXE) $(MINIPERL) $(MK2)		\
d980 1
a980 1
	$(X2P) Extensions_reonly
a983 2
static: $(PERLEXESTATIC)

a1031 9
CHECKDMAKE :
.IF "$(NEWDMAKE)" == "define"
	$(NOOP)
.ELSE
	@@echo Your dmake doesn't support ^|^| or ^&^& in conditional expressions.
	@@echo Please get the latest dmake from http://search.cpan.org/dist/dmake/
	@@exit 1
.ENDIF

a1041 1
	$(EMBED_EXE_MANI)
d1075 1
d1087 1
a1087 1
	    @@$(mktmp c0x32$(o) $(MINI_OBJ),$@@,,$(LIBFILES),)
d1090 1
a1090 1
	    $(mktmp $(LKPRE) $(MINI_OBJ) $(LIBFILES) $(LKPOST))
d1092 2
a1093 3
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(MINI_OBJ))
	$(EMBED_EXE_MANI)
d1137 4
a1140 2
	    @@$(mktmp c0d32$(o) $(PERLDLL_OBJ),$@@,, \
	        $(shell @@type Extensions_static) $(LIBFILES),perldll.def)
d1144 3
a1146 3
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ) \
		$(shell @@type Extensions_static) \
		$(LIBFILES) $(LKPOST))
d1153 3
a1155 3
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ) \
		$(shell @@type Extensions_static) \
		$(LIBFILES) perl.exp $(LKPOST))
d1157 1
a1157 1
	$(LINK32) -dll -def:perldll.def -out:$@@ $(BLINK_FLAGS) \
d1159 2
a1160 3
	    @@$(mktmp -base:0x28000000 $(DELAYLOAD) $(LIBFILES) \
		$(PERLDLL_RES) $(PERLDLL_OBJ))
	$(EMBED_DLL_MANI)
a1163 19
$(PERLSTATICLIB): Extensions_static
.IF "$(CCTYPE)" == "BORLAND"
	$(LIB32) $(LIB_FLAGS) $@@ \
	    @@$(mktmp $(shell @@type Extensions_static) \
		$(PERLDLL_OBJ))
.ELIF "$(CCTYPE)" == "GCC"
# XXX: It would be nice if MinGW's ar accepted a temporary file, but this
# doesn't seem to work:
#	$(LIB32) $(LIB_FLAGS) $@@ \
#	    $(mktmp $(LKPRE) $(shell @@type Extensions_static) \
#		$(PERLDLL_OBJ) $(LKPOST))
	$(LIB32) $(LIB_FLAGS) $@@ \
	    $(shell @@type Extensions_static) \
	    $(PERLDLL_OBJ)
.ELSE
	$(LIB32) $(LIB_FLAGS) -out:$@@ @@Extensions_static \
	    @@$(mktmp $(PERLDLL_OBJ))
.ENDIF
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)
d1165 2
a1166 2
$(PERLEXE_ICO): $(MINIPERL) ..\uupacktool.pl $(PERLEXE_ICO).packd
	$(MINIPERL) -I..\lib ..\uupacktool.pl -u $(PERLEXE_ICO).packd $(PERLEXE_ICO)
d1193 1
a1193 1
	    @@$(mktmp c0x32$(o) $(X2P_OBJ),$@@,,$(LIBFILES),)
d1196 1
a1196 1
	    $(mktmp $(LKPRE) $(X2P_OBJ) $(LIBFILES) $(LKPOST))
d1198 2
a1199 21
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(X2P_OBJ))
	$(EMBED_EXE_MANI)
.ENDIF

$(MINIDIR)\globals$(o) : $(UUDMAP_H)

$(UUDMAP_H) : $(GENUUDMAP)
	$(GENUUDMAP) >$(UUDMAP_H)

$(GENUUDMAP) : $(GENUUDMAP_OBJ)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(GENUUDMAP_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(GENUUDMAP_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(GENUUDMAP_OBJ))
	$(EMBED_EXE_MANI)
d1206 1
a1206 7
	$(CC) $(CFLAGS_O:s,-DPERLDLL,-UPERLDLL,) $(OBJOUT_FLAG)$@@ -c perlmain.c

perlmainst.c : runperl.c
	copy runperl.c perlmainst.c

perlmainst$(o) : perlmainst.c
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ -c perlmainst.c
d1211 3
a1213 2
	    @@$(mktmp c0x32$(o) $(PERLEXE_OBJ),$@@,, \
		$(PERLIMPLIB) $(LIBFILES),,$(PERLEXE_RES))
d1216 1
a1216 1
	    $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB) $(LIBFILES)
a1219 1
	$(EMBED_EXE_MANI)
a1225 18
$(PERLEXESTATIC): $(PERLSTATICLIB) $(CONFIGPM) $(PERLEXEST_OBJ) $(PERLEXE_RES)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(PERLEXEST_OBJ),$@@,, \
		$(shell @@type Extensions_static) $(PERLSTATICLIB) $(LIBFILES),, \
		$(PERLEXE_RES))
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -mconsole -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(shell @@type Extensions_static) \
		$(PERLSTATICLIB) $(LIBFILES) $(PERLEXEST_OBJ) \
		$(PERLEXE_RES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(BLINK_FLAGS) \
	    @@Extensions_static $(PERLSTATICLIB) /PDB:NONE \
	    $(LIBFILES) $(PERLEXEST_OBJ) $(SETARGV_OBJ) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)
.ENDIF

a1237 6
MakePPPort: $(MINIPERL) $(CONFIGPM)
	$(MINIPERL) -I..\lib ..\mkppport

MakePPPort_clean:
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\mkppport --clean

a1239 1
	$(XCOPY) ..\*.h $(COREDIR)\*.*
d1241 1
a1241 6
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic

Extensions_reonly : buildext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --dynamic +re
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic +re
d1243 1
a1243 2
Extensions_static : buildext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
d1245 1
a1245 1
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
d1250 1
a1250 1
	-if exist $(MINIPERL) if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext clean
d1254 1
a1254 1
	-if exist $(MINIPERL) if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext realclean
d1260 1
a1260 1
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
a1298 1
	copy ..\README.riscos   ..\pod\perlriscos.pod
a1299 1
	copy ..\README.symbian  ..\pod\perlsymbian.pod
d1307 1
a1307 1
	copy ..\pod\perl5100delta.pod ..\pod\perldelta.pod
d1315 2
d1319 1
a1319 2
		$(PERLIMPLIB) ..\miniperl$(a) $(MINIMOD) \
		$(PERLEXESTATIC) $(PERLSTATICLIB)
d1333 1
a1338 1
	-del /f $(LIBDIR)\Digest\SHA.pm
d1343 1
a1346 1
	-del /f $(LIBDIR)\Math\BigInt\FastCalc.pm
d1348 2
a1349 3
	-del /f $(LIBDIR)\Win32CORE.pm
	-del /f $(LIBDIR)\Win32API\File.pm
	-del /f $(LIBDIR)\Win32API\File\cFile.pc
d1351 1
a1351 1
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
d1353 1
d1355 1
d1357 3
a1359 4
	-if exist $(LIBDIR)\Hash rmdir /s /q $(LIBDIR)\Hash
	-if exist $(LIBDIR)\IO\Compress rmdir /s /q $(LIBDIR)\IO\Compress
	-if exist $(LIBDIR)\IO\Socket rmdir /s /q $(LIBDIR)\IO\Socket
	-if exist $(LIBDIR)\IO\Uncompress rmdir /s /q $(LIBDIR)\IO\Uncompress
d1361 1
a1361 2
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\re rmdir /s /q $(LIBDIR)\re
d1363 1
d1365 1
d1367 1
d1369 1
a1369 1
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
d1378 3
a1380 4
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvms.pod perlvms.pod perlvos.pod \
	    perlwin32.pod \
d1384 2
a1385 2
	    perldoc perlivp dprofpp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove ptar ptardiff cpanp-run-perl cpanp cpan2dist shasum corelist config_data
d1387 1
a1387 2
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new \
	    perlmainst.c
d1395 1
d1397 1
a1397 3
	-if exist pod2htmd.tmp del pod2htmd.tmp
	-if exist pod2htmi.tmp del pod2htmi.tmp
	-if exist $(HTMLDIR) rmdir /s /q $(HTMLDIR)
a1403 1
	if exist $(PERLEXESTATIC) $(XCOPY) $(PERLEXESTATIC) $(INST_BIN)\*.*
d1410 1
a1410 1
	$(RCOPY) $(HTMLDIR)\*.* $(INST_HTML)\*.*
d1434 1
a1434 7
unpack_files:
	$(MINIPERL) -I..\lib ..\uupacktool.pl -u -d .. -m

cleanup_unpacked_files:
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\uupacktool.pl -c -d .. -m
	
test-prep : all utils unpack_files
a1445 11
test-reonly : reonly utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	cd ..\t && \
	$(PERLEXE) -I..\lib harness $(OPT) -re \bpat\b \breg \bre\b \bsubst \brxcode $(EXTRA) && \
	cd ..\win32

regen :
	cd .. && regen.pl && cd win32

d1460 2
a1466 1
	-@@erase perlmainst$(o)
a1471 2
	-@@erase $(PERLEXESTATIC)
	-@@erase $(PERLSTATICLIB)
a1473 1
	-@@erase $(GENUUDMAP) $(GENUUDMAP_OBJ) $(UUDMAP_H)
d1475 1
d1477 1
d1479 1
d1492 1
d1494 1
a1494 6

_preclean : cleanup_unpacked_files
	
clean : _preclean Extensions_clean _clean

realclean : _preclean Extensions_realclean MakePPPort_clean _clean
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d37 1
a37 1
#INST_VER	*= \5.10.1
d333 1
a333 1
.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITEW6432 WIN64
d385 10
a394 7
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest
d499 1
a499 4
# Current releases of MinGW 5.1.4 (as of 11-Aug-2009) will fail to link
# correctly if -lmsvcrt is specified explicitly.
LIBC		=
#LIBC		= -lmsvcrt
d761 1
d928 1
a928 1
CORE_H		= $(CORE_NOCFG_H) .\config.h ..\git_version.h
d1029 2
a1030 2
all : CHECKDMAKE .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL) $(MK2)	\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort		\
d1042 2
a1043 2
reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL) $(MK2)	\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)		\
a1128 6
..\git_version.h : $(MINIPERL) ..\make_patchnum.pl
	cd .. && miniperl -Ilib make_patchnum.pl

# make sure that we recompile perl.c if the git version changes
..\perl$(o) : ..\git_version.h

d1133 3
a1135 8
# this target is for when changes to the main config.sh happen.
# edit config.gc, then make perl using GCC in a minimal configuration (i.e.
# with MULTI, ITHREADS, IMP_SYS, LARGE_FILES, PERLIO and CRYPT off), then make
# this target to regenerate config_H.gc.
# unfortunately, some further manual editing is also then required to restore all
# the special _MSC_VER handling that is otherwise lost.
# repeat for config.bc and config_H.bc (using BORLAND), except that there is no
# _MSC_VER stuff in that case.
d1137 1
a1137 1
	$(MINIPERL) -I..\lib config_sh.PL --cfgsh-option-file $(mktmp $(CFG_VARS)) \
d1139 3
a1141 1
	cd .. && miniperl configpm
d1143 2
a1144 1
	-$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)"
d1176 1
a1176 1
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*B).c
a1194 1
# 3. we can't have miniperl.exe depend on git_version.h, as miniperl creates it
d1205 2
a1206 2
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl create_perllibst_h.pl
	$(MINIPERL) -I..\lib create_perllibst_h.pl
d1382 1
a1382 1
Extensions : ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
d1384 2
a1385 1
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynamic
d1387 1
a1387 1
Extensions_reonly : ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
d1389 2
a1390 1
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynamic +re
d1392 1
a1392 1
Extensions_static : ..\make_ext.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
d1394 3
a1396 2
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --static
	$(MINIPERL) -I..\lib list_static_libs.pl > Extensions_static
d1399 2
a1400 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --all --target=clean
d1403 2
a1404 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --all --target=realclean
d1418 1
a1430 1
	copy ..\README.haiku    ..\pod\perlhaiku.pod
d1456 1
d1459 1
a1459 1
	copy ..\pod\perl5101delta.pod ..\pod\perldelta.pod
a1462 3
	$(PERLEXE) ..\autodoc.pl ..
	$(PERLEXE) ..\pod\perlmodlib.pl -q
	$(PERLEXE) ..\pod\buildtoc --build-toc -q
a1507 4
	-if exist $(LIBDIR)\App rmdir /s /q $(LIBDIR)\App
	-if exist $(LIBDIR)\Module\Pluggable rmdir /s /q $(LIBDIR)\Module\Pluggable
	-if exist $(LIBDIR)\TAP rmdir /s /q $(LIBDIR)\TAP
	-if exist $(LIBDIR)\mro rmdir /s /q $(LIBDIR)\mro
d1519 12
a1530 12
	-cd $(PODDIR) && del /f *.html *.bat podchecker \
	    perlaix.pod perlamiga.pod perlapi.pod perlapollo.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcn.pod \
	    perlcygwin.pod perldelta.pod perldgux.pod perldos.pod \
	    perlepoc.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmachten.pod perlmacos.pod perlmacosx.pod \
	    perlmint.pod perlmodlib.pod perlmpeix.pod perlnetware.pod \
	    perlopenbsd.pod perlos2.pod perlos390.pod perlos400.pod \
	    perlplan9.pod perlqnx.pod perlriscos.pod perlsolaris.pod \
	    perlsymbian.pod perltoc.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvos.pod perlwin32.pod \
d1532 1
a1532 1
	    podselect
a1539 1
	-del /f ..\lib\Config_git.pl
a1549 1
	-del /f ..\t\test_state
a1637 1
	-@@erase /f ..\git_version.h
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d1 1695
a1695 1757
#
# Makefile to build perl on Windows NT using DMAKE.
# Supported compilers:
#	Visual C++ 2.0 or later
#	Borland C++ 5.02 or later
#	MinGW with gcc-2.95.2 or later
#	MS Platform SDK 64-bit compiler and tools **experimental**
#
# This is set up to build a perl.exe that runs off a shared library
# (perl512.dll).  Also makes individual DLLs for the XS extensions.
#

##
## Make sure you read README.win32 *before* you mess with anything here!
##

##
## Build configuration.  Edit the values below to suit your needs.
##

#
# Set these to wherever you want "dmake install" to put your
# newly built perl.
#
INST_DRV	*= c:
INST_TOP	*= $(INST_DRV)\perl

#
# Uncomment if you want to build a 32-bit Perl using a 32-bit compiler
# on a 64-bit version of Windows.
#WIN64		*= undef

#
# Comment this out if you DON'T want your perl installation to be versioned.
# This means that the new installation will overwrite any files from the
# old installation at the same INST_TOP location.  Leaving it enabled is
# the safest route, as perl adds the extra version directory to all the
# locations it installs files to.  If you disable it, an alternative
# versioned installation can be obtained by setting INST_TOP above to a
# path that includes an arbitrary version string.
#
#INST_VER	*= \5.12.2

#
# Comment this out if you DON'T want your perl installation to have
# architecture specific components.  This means that architecture-
# specific files will be installed along with the architecture-neutral
# files.  Leaving it enabled is safer and more flexible, in case you
# want to build multiple flavors of perl and install them together in
# the same location.  Commenting it out gives you a simpler
# installation that is easier to understand for beginners.
#
#INST_ARCH	*= \$(ARCHNAME)

#
# Uncomment this if you want perl to run
# 	$Config{sitelibexp}\sitecustomize.pl
# before anything else.  This script can then be set up, for example,
# to add additional entries to @@INC.
#
#USE_SITECUST	*= define

#
# uncomment to enable multiple interpreters.  This is need for fork()
# emulation and for thread support.
#
USE_MULTI	*= define

#
# Interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  
# This needs USE_MULTI above.
#
USE_ITHREADS	*= define

#
# uncomment to enable the implicit "host" layer for all system calls
# made by perl.  This needs USE_MULTI above.  
# This is also needed to get fork().
#
USE_IMP_SYS	*= define

#
# Comment out next assign to disable perl's I/O subsystem and use compiler's 
# stdio for IO - depending on your compiler vendor and run time library you may 
# then get a number of fails from make test i.e. bugs - complain to them not us ;-). 
# You will also be unable to take full advantage of perl5.8's support for multiple 
# encodings and may see lower IO performance. You have been warned.
USE_PERLIO	*= define

#
# Comment this out if you don't want to enable large file support for
# some reason.  Should normally only be changed to maintain compatibility
# with an older release of perl.
USE_LARGE_FILES	*= define

#
# uncomment exactly one of the following
#
# Visual C++ 2.x
#CCTYPE		*= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		*= MSVC
# Visual C++ 6.x (aka Visual C++ 98)
#CCTYPE		*= MSVC60
# Visual C++ Toolkit 2003 (aka Visual C++ 7.x) (free command-line tools)
#CCTYPE		*= MSVC70FREE
# Visual C++ .NET 2003 (aka Visual C++ 7.x) (full version)
#CCTYPE		*= MSVC70
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
#CCTYPE		*= MSVC80FREE
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
#CCTYPE		*= MSVC80
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
#CCTYPE		*= MSVC90FREE
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
#CCTYPE		*= MSVC90
# Borland 5.02 or later
#CCTYPE		*= BORLAND
# MinGW or mingw-w64 with gcc-2.95.2 or later
CCTYPE		*= GCC

#
# uncomment this if your Borland compiler is older than v5.4.
#BCCOLD		*= define
#
# uncomment this if you want to use Borland's VCL as your CRT
#BCCVCL		*= define

#
# uncomment this if you are compiling under Windows 95/98 and command.com
# (not needed if you're running under 4DOS/NT 6.01 or later)
#IS_WIN95	*= define

#
# uncomment next line if you want debug version of perl (big,slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		*= Debug

#
# uncomment to enable use of PerlCRT.DLL when using the Visual C compiler.
# It has patches that fix known bugs in older versions of MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3 or later.
# Get it from CPAN at http://www.cpan.org/authors/id/D/DO/DOUGL/
# and follow the directions in the package to install.
#
# Not recommended if you have VC 6.x and you're not running Windows 9x.
#
#USE_PERLCRT	*= define

#
# uncomment to enable linking with setargv.obj under the Visual C
# compiler. Setting this options enables perl to expand wildcards in
# arguments, but it may be harder to use alternate methods like
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
#
#USE_SETARGV	*= define

#
# if you want to have the crypt() builtin function implemented, leave this or
# CRYPT_LIB uncommented.  The fcrypt.c file named here contains a suitable
# version of des_fcrypt().
#
CRYPT_SRC	*= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	*= fcrypt.lib

#
# set this if you wish to use perl's malloc
# WARNING: Turning this on/off WILL break binary compatibility with extensions
# you may have compiled with/without it.  Be prepared to recompile all
# extensions if you change the default.  Currently, this cannot be enabled
# if you ask for USE_IMP_SYS above.
#
#PERL_MALLOC	*= define

#
# set this to enable debugging mstats
# This must be enabled to use the Devel::Peek::mstat() function.  This cannot
# be enabled without PERL_MALLOC as well.
#
#DEBUG_MSTATS	*= define

#
# set this to additionally provide a statically linked perl-static.exe.
# Note that dynamic loading will not work with this perl, so you must
# include required modules statically using the STATIC_EXT or ALL_STATIC
# variables below. A static library perl512s.lib will also be created.
# Ordinary perl.exe is not affected by this option.
#
#BUILD_STATIC	*= define

#
# in addition to BUILD_STATIC the option ALL_STATIC makes *every*
# extension get statically built
# This will result in a very large perl executable, but the main purpose
# is to have proper linking set so as to be able to create miscellaneous
# executables with different built-in extensions
#
#ALL_STATIC	*= define

#
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
.IF "$(CCTYPE)" == "BORLAND"
CCHOME		*= C:\Borland\BCC55
.ELIF "$(CCTYPE)" == "GCC"
CCHOME		*= C:\MinGW
.ELSE
CCHOME		*= $(MSVCDIR)
.ENDIF

#
# If building with gcc-4.x.x (or x86_64-w64-mingw32-gcc-4.x.x), then
# uncomment  the following assignment to GCC_4XX, make sure that CCHOME
# has been set correctly above, and uncomment the appropriate
# GCCHELPERDLL line.
# The name of the dll can change, depending upon which vendor has supplied
# your 4.x.x compiler, and upon the values of "x".
# (The dll will be in your mingw/bin folder, so check there if you're
# unsure about the correct name.)
# Without these corrections, the op/taint.t test script will fail.
#
#GCC_4XX		*= define
#GCCHELPERDLL	*= $(CCHOME)\bin\libgcc_s_sjlj-1.dll
#GCCHELPERDLL	*= $(CCHOME)\bin\libgcc_s_dw2-1.dll
#GCCHELPERDLL	*= $(CCHOME)\bin\libgcc_s_1.dll

#
# uncomment this if you are using x86_64-w64-mingw32 cross-compiler
# ie if your gcc executable is called 'x86_64-w64-mingw32-gcc'
# instead of the usual 'gcc'.
#
#GCCCROSS	*= define

#
# Following sets $Config{incpath} and $Config{libpth}
#

.IF "$(GCCCROSS)" == "define"
CCINCDIR *= $(CCHOME)\mingw\include
CCLIBDIR *= $(CCHOME)\mingw\lib
.ELSE
CCINCDIR *= $(CCHOME)\include
CCLIBDIR *= $(CCHOME)\lib
.ENDIF

#
# Additional compiler flags can be specified here.
#
BUILDOPT	*= $(BUILDOPTEXTRA)

#
# Adding -DPERL_HASH_SEED_EXPLICIT will disable randomization of Perl's
# internal hash function unless the PERL_HASH_SEED environment variable is set.
# Alternatively, adding -DNO_HASH_SEED will completely disable the
# randomization feature. 
# The latter is required to maintain binary compatibility with Perl 5.8.0.
#
#BUILDOPT	+= -DPERL_HASH_SEED_EXPLICIT
#BUILDOPT	+= -DNO_HASH_SEED

#
# This should normally be disabled.  Adding -DPERL_POLLUTE enables support
# for old symbols by default, at the expense of extreme pollution.  You most
# probably just want to build modules that won't compile with
#         perl Makefile.PL POLLUTE=1
# instead of enabling this.  Please report such modules to the respective
# authors.
#
#BUILDOPT	+= -DPERL_POLLUTE

#
# This should normally be disabled.  Enabling it will disable the File::Glob
# implementation of CORE::glob.
#
#BUILDOPT	+= -DPERL_EXTERNAL_GLOB

#
# This should normally be disabled.  Enabling it causes perl to read scripts
# in text mode (which is the 5.005 behavior) and will break ByteLoader.
#
#BUILDOPT	+= -DPERL_TEXTMODE_SCRIPTS

#
# specify semicolon-separated list of extra directories that modules will
# look for libraries (spaces in path names need not be quoted)
#
EXTRALIBDIRS	*=

#
# set this to point to cmd.exe (only needed if you use some
# alternate shell that doesn't grok cmd.exe style commands)
#
#SHELL		*= g:\winnt\system32\cmd.exe

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#
#EMAIL		*=

##
## Build configuration ends.
##

##################### CHANGE THESE ONLY IF YOU MUST #####################

.IF "$(CRYPT_SRC)$(CRYPT_LIB)" == ""
D_CRYPT		= undef
.ELSE
D_CRYPT		= define
CRYPT_FLAG	= -DHAVE_DES_FCRYPT
.ENDIF

PERL_MALLOC	*= undef
DEBUG_MSTATS	*= undef

USE_SITECUST	*= undef
USE_MULTI	*= undef
USE_ITHREADS	*= undef
USE_IMP_SYS	*= undef
USE_PERLIO	*= undef
USE_LARGE_FILES	*= undef
USE_PERLCRT	*= undef

.IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
.ENDIF

.IF "$(PERL_MALLOC)" == "undef"
DEBUG_MSTATS	= undef
.ENDIF

.IF "$(DEBUG_MSTATS)" == "define"
BUILDOPT	+= -DPERL_DEBUGGING_MSTATS
.ENDIF

.IF "$(USE_IMP_SYS) $(USE_MULTI)" == "define undef"
USE_MULTI	!= define
.ENDIF

.IF "$(USE_ITHREADS) $(USE_MULTI)" == "define undef"
USE_MULTI	!= define
.ENDIF

.IF "$(USE_SITECUST)" == "define"
BUILDOPT	+= -DUSE_SITECUSTOMIZE
.ENDIF

.IF "$(USE_MULTI)" != "undef"
BUILDOPT	+= -DPERL_IMPLICIT_CONTEXT
.ENDIF

.IF "$(USE_IMP_SYS)" != "undef"
BUILDOPT	+= -DPERL_IMPLICIT_SYS
.ENDIF

.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITEW6432 WIN64

PROCESSOR_ARCHITECTURE *= x86

.IF "$(WIN64)" == ""
# When we are running from a 32bit cmd.exe on AMD64 then
# PROCESSOR_ARCHITECTURE is set to x86 and PROCESSOR_ARCHITEW6432
# is set to AMD64
.IF "$(PROCESSOR_ARCHITEW6432)" != ""
PROCESSOR_ARCHITECTURE	!= $(PROCESSOR_ARCHITEW6432)
WIN64			= define
.ELIF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITECTURE)" == "IA64"
WIN64			= define
.ELSE
WIN64			= undef
.ENDIF
.ENDIF

ARCHITECTURE = $(PROCESSOR_ARCHITECTURE)
.IF "$(ARCHITECTURE)" == "AMD64"
ARCHITECTURE	= x64
.ENDIF
.IF "$(ARCHITECTURE)" == "IA64"
ARCHITECTURE	= ia64
.ENDIF

.IF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-multi
.ELSE
.IF "$(USE_PERLIO)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-perlio
.ELSE
ARCHNAME	= MSWin32-$(ARCHITECTURE)
.ENDIF
.ENDIF

.IF "$(USE_ITHREADS)" == "define"
ARCHNAME	!:= $(ARCHNAME)-thread
.ENDIF

# Visual C++ 98, .NET 2003, 2005 and 2008 specific.
# VC++ 6.x, 7.x, 8.x and 9.x can load DLL's on demand.  Makes the test suite run
# in about 10% less time.  (The free version of 7.x can't do this, but the free
# versions of 8.x and 9.x can.)
.IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"     || \
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" ||
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DELAYLOAD	*= -DELAYLOAD:ws2_32.dll delayimp.lib
.ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest

ARCHDIR		= ..\lib\$(ARCHNAME)
COREDIR		= ..\lib\CORE
AUTODIR		= ..\lib\auto
LIBDIR		= ..\lib
EXTDIR		= ..\ext
DISTDIR		= ..\dist
CPANDIR		= ..\cpan
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\ExtUtils
HTMLDIR		= .\html

#
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_BIN	= $(INST_SCRIPT)$(INST_ARCH)
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_ARCHLIB	= $(INST_LIB)$(INST_ARCH)
INST_COREDIR	= $(INST_ARCHLIB)\CORE
INST_HTML	= $(INST_TOP)$(INST_VER)\html

#
# Programs to compile, build .lib files and link
#

.USESHELL :

.IF "$(CCTYPE)" == "BORLAND"

CC		= bcc32
.IF "$(BCCOLD)" != "define"
LINK32		= ilink32
.ELSE
LINK32		= tlink32
.ENDIF
LIB32		= tlib /a /P128
IMPLIB		= implib -c
RSC		= brcc32

#
# Options
#
INCLUDES	= -I$(COREDIR) -I.\include -I. -I.. -I"$(CCINCDIR)"
#PCHFLAGS	= -H -Hc -H=c:\temp\bcmoduls.pch
DEFINES		= -DWIN32 $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -P

LIBC		= cw32mti.lib

# same libs as MSVC, except Borland doesn't have oldnames.lib
LIBFILES	= $(CRYPT_LIB) \
		kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib comctl32.lib \
		import32.lib $(LIBC)

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -v -D_RTLDLL -DDEBUGGING
LINK_DBG	= -v
.ELSE
OPTIMIZE	= -O2 -D_RTLDLL
LINK_DBG	=
.ENDIF

EXTRACFLAGS	=
CFLAGS		= -w -g0 -tWM -tWD $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= $(LINK_DBG) -x -L"$(INST_COREDIR)" -L"$(CCLIBDIR)" \
		-L"$(CCLIBDIR)\PSDK"
OBJOUT_FLAG	= -o
EXEOUT_FLAG	= -e
LIBOUT_FLAG	=
.IF "$(BCCOLD)" != "define"
LINK_FLAGS	+= -Gn
DEFINES  += -D_MT -D__USELOCALES__ -D_WIN32_WINNT=0x0410
.END
.IF "$(BCCVCL)" == "define"
LIBC		= cp32mti.lib vcl.lib vcl50.lib vclx50.lib vcle50.lib
LINK_FLAGS	+= -L"$(CCLIBDIR)\Release"
.END


.ELIF "$(CCTYPE)" == "GCC"

.IF "$(GCCCROSS)" == "define"
ARCHPREFIX      = x86_64-w64-mingw32-
.ENDIF

CC		= $(ARCHPREFIX)gcc
LINK32		= $(ARCHPREFIX)g++
LIB32		= $(ARCHPREFIX)ar rc
IMPLIB		= $(ARCHPREFIX)dlltool
RSC		= $(ARCHPREFIX)windres

i = .i
o = .o
a = .a

#
# Options
#

INCLUDES	= -I.\include -I. -I.. -I$(COREDIR)
DEFINES		= -DWIN32 $(CRYPT_FLAG)
.IF "$(WIN64)" == "define"
DEFINES		+= -DWIN64 -DCONSERVATIVE
.ENDIF
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -xc++

# Current releases of MinGW 5.1.4 (as of 11-Aug-2009) will fail to link
# correctly if -lmsvcrt is specified explicitly.
LIBC		=
#LIBC		= -lmsvcrt

# same libs as MSVC
LIBFILES	= $(CRYPT_LIB) $(LIBC) \
		  -lmoldname -lkernel32 -luser32 -lgdi32 \
		  -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 \
		  -loleaut32 -lnetapi32 -luuid -lws2_32 -lmpr \
		  -lwinmm -lversion -lodbc32 -lodbccp32 -lcomctl32

.IF  "$(CFG)" == "Debug"
OPTIMIZE	= -g -O2 -DDEBUGGING
LINK_DBG	= -g
.ELSE
OPTIMIZE	= -s -O2
LINK_DBG	= -s
.ENDIF

EXTRACFLAGS	=
CFLAGS		= $(INCLUDES) $(DEFINES) $(LOCDEFS) $(OPTIMIZE)
LINK_FLAGS	= $(LINK_DBG) -L"$(INST_COREDIR)" -L"$(CCLIBDIR)"
OBJOUT_FLAG	= -o
EXEOUT_FLAG	= -o
LIBOUT_FLAG	=

# NOTE: we assume that GCC uses MSVCRT.DLL
# See comments about PERL_MSVCRT_READFIX in the "cl" compiler section below.
BUILDOPT	+= -fno-strict-aliasing -mms-bitfields -DPERL_MSVCRT_READFIX

.ELSE

CC		= cl
LINK32		= link
LIB32		= $(LINK32) -lib
RSC		= rc

#
# Options
#

INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -TP -EHsc

.IF "$(USE_PERLCRT)" != "define"
LIBC	= msvcrt.lib
.ELSE
LIBC	= PerlCRT.lib
.ENDIF

.IF  "$(CFG)" == "Debug"
.IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE	= -Od -MD -Z7 -DDEBUGGING
.ELSE
OPTIMIZE	= -O1 -MD -Zi -DDEBUGGING
.ENDIF
LINK_DBG	= -debug
.ELSE
OPTIMIZE	= -MD -Zi -DNDEBUG
# we enable debug symbols in release builds also
LINK_DBG	= -debug -opt:ref,icf
# you may want to enable this if you want COFF symbols in the executables
# in addition to the PDB symbols.  The default Dr. Watson that ships with
# Windows can use the the former but not latter.  The free WinDbg can be
# installed to get better stack traces from just the PDB symbols, so we
# avoid the bloat of COFF symbols by default.
#LINK_DBG	= $(LINK_DBG) -debugtype:both
.IF "$(WIN64)" == "define"
# enable Whole Program Optimizations (WPO) and Link Time Code Generation (LTCG)
OPTIMIZE	+= -Ox -GL
LINK_DBG	+= -ltcg
.ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86
OPTIMIZE	+= -O1
#OPTIMIZE	+= -O2
.ENDIF
.ENDIF

.IF "$(WIN64)" == "define"
DEFINES		+= -DWIN64 -DCONSERVATIVE
OPTIMIZE	+= -Wp64 -fp:precise
.ENDIF

# For now, silence VC++ 8.x's and 9.x's warnings about "unsafe" CRT functions
# and POSIX CRT function names being deprecated.
.IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DEFINES		+= -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
.ENDIF

# Use the MSVCRT read() fix if the PerlCRT was not chosen, but only when using
# VC++ 6.x or earlier. Later versions use MSVCR70.dll, MSVCR71.dll, etc, which
# do not require the fix.
.IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC" || "$(CCTYPE)" == "MSVC60" 
.IF "$(USE_PERLCRT)" != "define"
BUILDOPT	+= -DPERL_MSVCRT_READFIX
.ENDIF
.ENDIF

LIBBASEFILES	= $(CRYPT_LIB) \
		oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib comctl32.lib

# The 64 bit Platform SDK compilers contain a runtime library that doesn't
# include the buffer overrun verification code used by the /GS switch.
# Since the code links against libraries that are compiled with /GS, this
# "security cookie verification" must be included via bufferoverlow.lib.
.IF "$(WIN64)" == "define"
LIBBASEFILES    += bufferoverflowU.lib
.ENDIF

# we add LIBC here, since we may be using PerlCRT.dll
LIBFILES	= $(LIBBASEFILES) $(LIBC)

EXTRACFLAGS	= -nologo -GF -W3
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) \
		-libpath:"$(INST_COREDIR)" \
		-machine:$(PROCESSOR_ARCHITECTURE)
LIB_FLAGS	= -nologo
OBJOUT_FLAG	= -Fo
EXEOUT_FLAG	= -Fe
LIBOUT_FLAG	= /out:

.ENDIF

CFLAGS_O	= $(CFLAGS) $(BUILDOPT)

.IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
LINK_FLAGS	+= "/manifestdependency:type='Win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'"
.ELSE
RSC_FLAGS	= -DINCLUDE_MANIFEST
.ENDIF


# used to allow local linking flags that are not propogated into Config.pm,
# currently unused
#   -- BKS, 12-12-1999
PRIV_LINK_FLAGS	*=
BLINK_FLAGS	= $(PRIV_LINK_FLAGS) $(LINK_FLAGS)

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

# Some old dmakes (including Sarathy's one at
# http://search.cpan.org/CPAN/authors/id/G/GS/GSAR/dmake-4.1pl1-win32.zip)
# don't support logical OR (||) or logical AND (&&) in conditional
# expressions and hence don't process this makefile correctly. Determine
# whether this is the case so that we can give the user an error message.
.IF 1 == 1 || 1 == 1
NEWDMAKE = define
.ELSE
NEWDMAKE = undef
.ENDIF

o *= .obj
a *= .lib

LKPRE		= INPUT (
LKPOST		= )

#
# Rules
#

.SUFFIXES : .c .i $(o) .dll $(a) .exe .rc .res

.c$(o):
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $<

.c.i:
	$(CC) -c $(null,$(<:d) $(NULL) -I$(<:d)) $(CFLAGS_O) -E $< >$@@

.y.c:
	$(NOOP)

$(o).dll:
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(BLINK_FLAGS) c0d32$(o) $<,$@@,,$(LIBFILES),$(*B).def
	$(IMPLIB) $(*B).lib $@@
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -o $@@ $(BLINK_FLAGS) $< $(LIBFILES)
	$(IMPLIB) --input-def $(*B).def --output-lib $(*B).a $@@
.ELSE
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(BLINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
	$(EMBED_DLL_MANI)
.ENDIF

.rc.res:
.IF "$(CCTYPE)" == "GCC"
	$(RSC) --use-temp-file --include-dir=. --include-dir=.. -O COFF -D INCLUDE_MANIFEST -i $< -o $@@
.ELSE
	$(RSC) -i.. -DINCLUDE_MANIFEST $<
.ENDIF

#
# various targets
MINIPERL	= ..\miniperl.exe
MINIDIR		= .\mini
PERLEXE		= ..\perl.exe
WPERLEXE	= ..\wperl.exe
PERLEXESTATIC	= ..\perl-static.exe
GLOBEXE		= ..\perlglob.exe
CONFIGPM	= ..\lib\Config.pm ..\lib\Config_heavy.pl
MINIMOD		= ..\lib\ExtUtils\Miniperl.pm
X2P		= ..\x2p\a2p.exe
GENUUDMAP	= ..\generate_uudmap.exe
.IF "$(BUILD_STATIC)" == "define"
PERLSTATIC	= static
.ELSE
PERLSTATIC	= 
.ENDIF

# Unicode data files generated by mktables
UNIDATAFILES	 = ..\lib\unicore\Decomposition.pl ..\lib\unicore\TestProp.pl \
		   ..\lib\unicore\CombiningClass.pl ..\lib\unicore\Name.pl \
		   ..\lib\unicore\Heavy.pl ..\lib\unicore\mktables.lst

# Directories of Unicode data files generated by mktables
UNIDATADIR1	= ..\lib\unicore\To
UNIDATADIR2	= ..\lib\unicore\lib

PERLEXE_MANIFEST= .\perlexe.manifest
PERLEXE_ICO	= .\perlexe.ico
PERLEXE_RES	= .\perlexe.res
PERLDLL_RES	=

# Nominate a target which causes extensions to be re-built
# This used to be $(PERLEXE), but at worst it is the .dll that they depend
# on and really only the interface - i.e. the .def file used to export symbols
# from the .dll
PERLDEP = perldll.def


PL2BAT		= bin\pl2bat.pl
GLOBBAT		= bin\perlglob.bat

UTILS		=			\
		..\utils\h2ph		\
		..\utils\splain		\
		..\utils\dprofpp	\
		..\utils\perlbug	\
		..\utils\pl2pm 		\
		..\utils\c2ph		\
		..\utils\pstruct	\
		..\utils\h2xs		\
		..\utils\perldoc	\
		..\utils\perlivp	\
		..\utils\libnetcfg	\
		..\utils\enc2xs		\
		..\utils\piconv		\
		..\utils\config_data	\
		..\utils\corelist	\
		..\utils\cpan		\
		..\utils\xsubpp		\
		..\utils\prove		\
		..\utils\ptar		\
		..\utils\ptardiff	\
		..\utils\cpanp-run-perl	\
		..\utils\cpanp	\
		..\utils\cpan2dist	\
		..\utils\shasum		\
		..\utils\instmodsh	\
		..\pod\pod2html		\
		..\pod\pod2latex	\
		..\pod\pod2man		\
		..\pod\pod2text		\
		..\pod\pod2usage	\
		..\pod\podchecker	\
		..\pod\podselect	\
		..\x2p\find2perl	\
		..\x2p\psed		\
		..\x2p\s2p		\
		bin\exetype.pl		\
		bin\runperl.pl		\
		bin\pl2bat.pl		\
		bin\perlglob.pl		\
		bin\search.pl

.IF "$(CCTYPE)" == "BORLAND"

CFGSH_TMPL	= config.bc
CFGH_TMPL	= config_H.bc

.ELIF "$(CCTYPE)" == "GCC"

.IF "$(WIN64)" == "define"
.IF "$(GCCCROSS)" == "define"
CFGSH_TMPL	= config.gc64
CFGH_TMPL	= config_H.gc64
.ELSE
CFGSH_TMPL	= config.gc64nox
CFGH_TMPL	= config_H.gc64nox
.ENDIF
.ELSE
CFGSH_TMPL	= config.gc
CFGH_TMPL	= config_H.gc
.ENDIF
PERLIMPLIB	= ..\libperl512$(a)
PERLSTATICLIB	= ..\libperl512s$(a)

.ELSE

.IF "$(WIN64)" == "define"
CFGSH_TMPL	= config.vc64
CFGH_TMPL	= config_H.vc64
.ELSE
CFGSH_TMPL	= config.vc
CFGH_TMPL	= config_H.vc
.ENDIF

.ENDIF

# makedef.pl must be updated if this changes, and this should normally
# only change when there is an incompatible revision of the public API.
PERLIMPLIB	*= ..\perl512$(a)
PERLSTATICLIB	*= ..\perl512s$(a)
PERLDLL		= ..\perl512.dll

XCOPY		= xcopy /f /r /i /d /y
RCOPY		= xcopy /f /r /i /e /d /y
NOOP		= @@rem

MICROCORE_SRC	=		\
		..\av.c		\
		..\deb.c	\
		..\doio.c	\
		..\doop.c	\
		..\dump.c	\
		..\globals.c	\
		..\gv.c		\
		..\mro.c	\
		..\hv.c		\
		..\locale.c	\
		..\mathoms.c    \
		..\mg.c		\
		..\numeric.c	\
		..\op.c		\
		..\pad.c	\
		..\perl.c	\
		..\perlapi.c	\
		..\perly.c	\
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_hot.c	\
		..\pp_pack.c	\
		..\pp_sort.c	\
		..\pp_sys.c	\
		..\reentr.c	\
		..\regcomp.c	\
		..\regexec.c	\
		..\run.c	\
		..\scope.c	\
		..\sv.c		\
		..\taint.c	\
		..\toke.c	\
		..\universal.c	\
		..\utf8.c	\
		..\util.c

EXTRACORE_SRC	+= perllib.c

.IF "$(PERL_MALLOC)" == "define"
EXTRACORE_SRC	+= ..\malloc.c
.ENDIF

EXTRACORE_SRC	+= ..\perlio.c

WIN32_SRC	=		\
		.\win32.c	\
		.\win32sck.c	\
		.\win32thread.c

# We need this for miniperl build unless we override canned 
# config.h #define building mini\*
#.IF "$(USE_PERLIO)" == "define"
WIN32_SRC	+= .\win32io.c
#.ENDIF

.IF "$(CRYPT_SRC)" != ""
WIN32_SRC	+= .\$(CRYPT_SRC)
.ENDIF

X2P_SRC		=		\
		..\x2p\a2p.c	\
		..\x2p\hash.c	\
		..\x2p\str.c	\
		..\x2p\util.c	\
		..\x2p\walk.c

CORE_NOCFG_H	=		\
		..\av.h		\
		..\cop.h	\
		..\cv.h		\
		..\dosish.h	\
		..\embed.h	\
		..\form.h	\
		..\gv.h		\
		..\handy.h	\
		..\hv.h		\
		..\iperlsys.h	\
		..\mg.h		\
		..\nostdio.h	\
		..\op.h		\
		..\opcode.h	\
		..\perl.h	\
		..\perlapi.h	\
		..\perlsdio.h	\
		..\perlsfio.h	\
		..\perly.h	\
		..\pp.h		\
		..\proto.h	\
		..\regcomp.h	\
		..\regexp.h	\
		..\scope.h	\
		..\sv.h		\
		..\thread.h	\
		..\unixish.h	\
		..\utf8.h	\
		..\util.h	\
		..\warnings.h	\
		..\XSUB.h	\
		..\EXTERN.h	\
		..\perlvars.h	\
		..\intrpvar.h	\
		.\include\dirent.h	\
		.\include\netdb.h	\
		.\include\sys\socket.h	\
		.\win32.h

CORE_H		= $(CORE_NOCFG_H) .\config.h ..\git_version.h

UUDMAP_H	= ..\uudmap.h
BITCOUNT_H	= ..\bitcount.h

MICROCORE_OBJ	= $(MICROCORE_SRC:db:+$(o))
CORE_OBJ	= $(MICROCORE_OBJ) $(EXTRACORE_SRC:db:+$(o))
WIN32_OBJ	= $(WIN32_SRC:db:+$(o))
MINICORE_OBJ	= $(MINIDIR)\{$(MICROCORE_OBJ:f) miniperlmain$(o) perlio$(o)}
MINIWIN32_OBJ	= $(MINIDIR)\{$(WIN32_OBJ:f)}
MINI_OBJ	= $(MINICORE_OBJ) $(MINIWIN32_OBJ)
DLL_OBJ		= $(DYNALOADER)
X2P_OBJ		= $(X2P_SRC:db:+$(o))
GENUUDMAP_OBJ	= $(GENUUDMAP:db:+$(o))

PERLDLL_OBJ	= $(CORE_OBJ)
PERLEXE_OBJ	= perlmain$(o)
PERLEXEST_OBJ	= perlmainst$(o)

PERLDLL_OBJ	+= $(WIN32_OBJ) $(DLL_OBJ)

.IF "$(USE_SETARGV)" != ""
SETARGV_OBJ	= setargv$(o)
.ENDIF

.IF "$(ALL_STATIC)" == "define"
# some exclusions, unfortunately, until fixed:
#  - Win32 extension contains overlapped symbols with win32.c (BUG!)
#  - MakeMaker isn't capable enough for SDBM_File (smaller bug)
#  - Encode (encoding search algorithm relies on shared library?)
STATIC_EXT	= * !Win32 !SDBM_File !Encode
.ELSE
# specify static extensions here, for example:
#STATIC_EXT	= Cwd Compress/Raw/Zlib
STATIC_EXT	= Win32CORE
.ENDIF

DYNALOADER	= ..\DynaLoader$(o)

# vars must be separated by "\t+~\t+", since we're using the tempfile
# version of config_sh.pl (we were overflowing someone's buffer by
# trying to fit them all on the command line)
#	-- BKS 10-17-1999
CFG_VARS	=					\
		INST_DRV=$(INST_DRV)		~	\
		INST_TOP=$(INST_TOP)	~	\
		INST_VER=$(INST_VER)	~	\
		INST_ARCH=$(INST_ARCH)		~	\
		archname=$(ARCHNAME)		~	\
		cc=$(CC)			~	\
		ld=$(LINK32)			~	\
		ccflags=$(EXTRACFLAGS) $(OPTIMIZE) $(DEFINES) $(BUILDOPT)	~	\
		cf_email=$(EMAIL)		~	\
		d_crypt=$(D_CRYPT)		~	\
		d_mymalloc=$(PERL_MALLOC)	~	\
		libs=$(LIBFILES:f)		~	\
		incpath=$(CCINCDIR)	~	\
		libperl=$(PERLIMPLIB:f)		~	\
		libpth=$(CCLIBDIR);$(EXTRALIBDIRS)	~	\
		libc=$(LIBC)			~	\
		make=dmake			~	\
		_o=$(o)				~	\
		obj_ext=$(o)			~	\
		_a=$(a)				~	\
		lib_ext=$(a)			~	\
		static_ext=$(STATIC_EXT)	~	\
		usethreads=$(USE_ITHREADS)	~	\
		useithreads=$(USE_ITHREADS)	~	\
		usemultiplicity=$(USE_MULTI)	~	\
		useperlio=$(USE_PERLIO)		~	\
		uselargefiles=$(USE_LARGE_FILES)	~	\
		usesitecustomize=$(USE_SITECUST)	~	\
		LINK_FLAGS=$(LINK_FLAGS)	~	\
		optimize=$(OPTIMIZE)

#
# set up targets varying between Win95 and WinNT builds
#

.IF "$(IS_WIN95)" == "define"
MK2 		= .\makefile.95
RIGHTMAKE	= __switch_makefiles
.ELSE
MK2		= __not_needed
RIGHTMAKE	=
.ENDIF

.IMPORT .IGNORE : SystemRoot windir

# Don't just .IMPORT OS from the environment because dmake sets OS itself.
ENV_OS=$(subst,OS=, $(shell @@set OS))

.IF "$(ENV_OS)" == "Windows_NT"
ODBCCP32_DLL = $(SystemRoot)\system32\odbccp32.dll
.ELSE
ODBCCP32_DLL = $(windir)\system\odbccp32.dll
.ENDIF

ICWD = -I..\cpan\Cwd -I..\cpan\Cwd\lib

#
# Top targets
#

all : CHECKDMAKE .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL) $(MK2)	\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort		\
	$(PERLEXE) $(X2P) Extensions Extensions_nonxs $(PERLSTATIC)

regnodes : ..\regnodes.h

..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h	

..\regexec$(o) : ..\regnodes.h ..\regcharclass.h

reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL) $(MK2)	\
	$(RIGHTMAKE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)		\
	$(X2P) Extensions_reonly

static: $(PERLEXESTATIC)

#----------------------------------------------------------------

#-------------------- BEGIN Win95 SPECIFIC ----------------------

# this target is a jump-off point for Win95
#  1. it switches to the Win95-specific makefile if it exists
#     (__do_switch_makefiles)
#  2. it prints a message when the Win95-specific one finishes (__done)
#  3. it then kills this makefile by trying to make __no_such_target

__switch_makefiles: __do_switch_makefiles __done __no_such_target

__do_switch_makefiles:
.IF "$(NOTFIRST)" != "true"
	if exist $(MK2) $(MAKE:s/-S//) -f $(MK2) $(MAKETARGETS) NOTFIRST=true
.ELSE
	$(NOOP)
.ENDIF

.IF "$(NOTFIRST)" != "true"
__done:
	@@echo Build process complete. Ignore any errors after this message.
	@@echo Run "dmake test" to test and "dmake install" to install

.ELSE
# dummy targets for Win95-specific makefile

__done:
	$(NOOP)

__no_such_target:
	$(NOOP)

.ENDIF

# This target is used to generate the new makefile (.\makefile.95) for Win95

.\makefile.95: .\makefile.mk
	$(MINIPERL) genmk95.pl makefile.mk $(MK2)

#--------------------- END Win95 SPECIFIC ---------------------

# a blank target for when builds don't need to do certain things
# this target added for Win95 port but used to keep the WinNT port able to
# use this file
__not_needed:
	$(NOOP)

CHECKDMAKE :
.IF "$(NEWDMAKE)" == "define"
	$(NOOP)
.ELSE
	@@echo Your dmake doesn't support ^|^| or ^&^& in conditional expressions.
	@@echo Please get the latest dmake from http://search.cpan.org/dist/dmake/
	@@exit 1
.ENDIF

$(GLOBEXE) : perlglob$(o)
.IF "$(CCTYPE)" == "BORLAND"
	$(CC) -c -w -v -tWM -I"$(CCINCDIR)" perlglob.c
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) c0x32$(o) perlglob$(o) \
	    "$(CCLIBDIR)\32BIT\wildargs$(o)",$@@,,import32.lib cw32mt.lib,
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) $(BLINK_FLAGS) -mconsole -o $@@ perlglob$(o) $(LIBFILES)
.ELSE
	$(LINK32) $(BLINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
	    perlglob$(o) setargv$(o)
	$(EMBED_EXE_MANI)
.ENDIF

perlglob$(o)  : perlglob.c

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

.\config.h : $(CFGH_TMPL) $(CORE_NOCFG_H)
	-del /f config.h
	copy $(CFGH_TMPL) config.h

..\git_version.h : $(MINIPERL) ..\make_patchnum.pl
	cd .. && miniperl -Ilib make_patchnum.pl

# make sure that we recompile perl.c if the git version changes
..\perl$(o) : ..\git_version.h

..\config.sh : config.w32 $(MINIPERL) config_sh.PL FindExt.pm
	$(MINIPERL) -I..\lib config_sh.PL --cfgsh-option-file \
	    $(mktmp $(CFG_VARS)) config.w32 > ..\config.sh

# this target is for when changes to the main config.sh happen.
# edit config.gc, then make perl using GCC in a minimal configuration (i.e.
# with MULTI, ITHREADS, IMP_SYS, LARGE_FILES, PERLIO and CRYPT off), then make
# this target to regenerate config_H.gc.
# unfortunately, some further manual editing is also then required to restore all
# the special _MSC_VER handling that is otherwise lost.
# repeat for config.bc and config_H.bc (using BORLAND), except that there is no
# _MSC_VER stuff in that case.
regen_config_h:
	$(MINIPERL) -I..\lib config_sh.PL --cfgsh-option-file $(mktmp $(CFG_VARS)) \
	    $(CFGSH_TMPL) > ..\config.sh
	$(MINIPERL) -I..\lib ..\configpm --chdir=..
	-del /f $(CFGH_TMPL)
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL "INST_VER=$(INST_VER)"
	rename config.h $(CFGH_TMPL)

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
	$(MINIPERL) -I..\lib ..\configpm --chdir=..
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(XCOPY) *.h $(COREDIR)\*.*
	$(XCOPY) ..\ext\re\re.pm $(LIBDIR)\*.*
	$(RCOPY) include $(COREDIR)\*.*
	$(MINIPERL) -I..\lib $(ICWD) config_h.PL "INST_VER=$(INST_VER)" \
	    || $(MAKE) $(MAKEMACROS) $(CONFIGPM) $(MAKEFILE)

$(MINIPERL) : $(MINIDIR) $(MINI_OBJ) $(CRTIPMLIBS)
.IF "$(CCTYPE)" == "BORLAND"
	if not exist $(CCLIBDIR)\PSDK\odbccp32.lib \
	    cd $(CCLIBDIR)\PSDK && implib odbccp32.lib $(ODBCCP32_DLL)
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(MINI_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -mconsole -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(MINI_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(MINI_OBJ))
	$(EMBED_EXE_MANI)
.ENDIF

$(MINIDIR) :
	if not exist "$(MINIDIR)" mkdir "$(MINIDIR)"

$(MINICORE_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*B).c

$(MINIWIN32_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $(*B).c

# -DPERL_IMPLICIT_SYS needs C++ for perllib.c
# rules wrapped in .IFs break Win9X build (we end up with unbalanced []s unless
# unless the .IF is true), so instead we use a .ELSE with the default.
# This is the only file that depends on perlhost.h, vmem.h, and vdir.h

perllib$(o)	: perllib.c .\perlhost.h .\vdir.h .\vmem.h
.IF "$(USE_IMP_SYS)" == "define"
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
.ELSE
	$(CC) -c -I. $(CFLAGS_O) $(OBJOUT_FLAG)$@@ perllib.c
.ENDIF

# 1. we don't want to rebuild miniperl.exe when config.h changes
# 2. we don't want to rebuild miniperl.exe with non-default config.h
# 3. we can't have miniperl.exe depend on git_version.h, as miniperl creates it
$(MINI_OBJ)	: $(CORE_NOCFG_H)

$(WIN32_OBJ)	: $(CORE_H)

$(CORE_OBJ)	: $(CORE_H)

$(DLL_OBJ)	: $(CORE_H)

$(X2P_OBJ)	: $(CORE_H)

perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl create_perllibst_h.pl
	$(MINIPERL) -I..\lib create_perllibst_h.pl
	$(MINIPERL) -I..\lib -w ..\makedef.pl PLATFORM=win32 $(OPTIMIZE) $(DEFINES) \
	$(BUILDOPT) CCTYPE=$(CCTYPE) > perldll.def

$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpd -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0d32$(o) $(PERLDLL_OBJ),$@@,, \
	        $(shell @@type Extensions_static) $(LIBFILES),perldll.def)
	$(IMPLIB) $*.lib $@@
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -mdll -o $@@ -Wl,--base-file -Wl,perl.base $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ) \
		$(shell @@type Extensions_static) \
		$(LIBFILES) $(LKPOST))
	$(IMPLIB) --output-lib $(PERLIMPLIB) \
		--dllname $(PERLDLL:b).dll \
		--def perldll.def \
		--base-file perl.base \
		--output-exp perl.exp
	$(LINK32) -mdll -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(PERLDLL_OBJ) \
		$(shell @@type Extensions_static) \
		$(LIBFILES) perl.exp $(LKPOST))
.ELSE
	$(LINK32) -dll -def:perldll.def -out:$@@ $(BLINK_FLAGS) \
	    @@Extensions_static \
	    @@$(mktmp -base:0x28000000 $(DELAYLOAD) $(LIBFILES) \
		$(PERLDLL_RES) $(PERLDLL_OBJ))
	$(EMBED_DLL_MANI)
.ENDIF
	$(XCOPY) $(PERLIMPLIB) $(COREDIR)

$(PERLSTATICLIB): Extensions_static
.IF "$(CCTYPE)" == "BORLAND"
	$(LIB32) $(LIB_FLAGS) $@@ \
	    @@$(mktmp $(shell @@type Extensions_static) \
		$(PERLDLL_OBJ))
.ELIF "$(CCTYPE)" == "GCC"
# XXX: It would be nice if MinGW's ar accepted a temporary file, but this
# doesn't seem to work:
#	$(LIB32) $(LIB_FLAGS) $@@ \
#	    $(mktmp $(LKPRE) $(shell @@type Extensions_static) \
#		$(PERLDLL_OBJ) $(LKPOST))
	$(LIB32) $(LIB_FLAGS) $@@ \
	    $(shell @@type Extensions_static) \
	    $(PERLDLL_OBJ)
.ELSE
	$(LIB32) $(LIB_FLAGS) -out:$@@ @@Extensions_static \
	    @@$(mktmp $(PERLDLL_OBJ))
.ENDIF
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)

$(PERLEXE_RES): perlexe.rc $(PERLEXE_MANIFEST) $(PERLEXE_ICO)

$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd .. && miniperl minimod.pl > lib\ExtUtils\Miniperl.pm

..\x2p\a2p$(o) : ..\x2p\a2p.c
	$(CC) -I..\x2p $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\a2p.c

..\x2p\hash$(o) : ..\x2p\hash.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\hash.c

..\x2p\str$(o) : ..\x2p\str.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\str.c

..\x2p\util$(o) : ..\x2p\util.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\util.c

..\x2p\walk$(o) : ..\x2p\walk.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\walk.c

$(X2P) : $(MINIPERL) $(X2P_OBJ) Extensions
	$(MINIPERL) -I..\lib ..\x2p\find2perl.PL
	$(MINIPERL) -I..\lib ..\x2p\s2p.PL
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(X2P_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(X2P_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(X2P_OBJ))
	$(EMBED_EXE_MANI)
.ENDIF

$(MINIDIR)\globals$(o) : $(UUDMAP_H) $(BITCOUNT_H)

$(UUDMAP_H) $(BITCOUNT_H) : $(GENUUDMAP)
	$(GENUUDMAP) $(UUDMAP_H) $(BITCOUNT_H)

$(GENUUDMAP) : $(GENUUDMAP_OBJ)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(GENUUDMAP_OBJ),$@@,,$(LIBFILES),)
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -v -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(GENUUDMAP_OBJ) $(LIBFILES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
	    @@$(mktmp $(LIBFILES) $(GENUUDMAP_OBJ))
	$(EMBED_EXE_MANI)
.ENDIF

perlmain.c : runperl.c
	copy runperl.c perlmain.c

perlmain$(o) : perlmain.c
	$(CC) $(CFLAGS_O:s,-DPERLDLL,-UPERLDLL,) $(OBJOUT_FLAG)$@@ -c perlmain.c

perlmainst.c : runperl.c
	copy runperl.c perlmainst.c

perlmainst$(o) : perlmainst.c
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ -c perlmainst.c

$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(PERLEXE_OBJ),$@@,, \
		$(PERLIMPLIB) $(LIBFILES),,$(PERLEXE_RES))
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -mconsole -o $@@ $(BLINK_FLAGS)  \
	    $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB) $(LIBFILES)
.ELSE
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(BLINK_FLAGS) \
	    $(LIBFILES) $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)
.ENDIF
	copy $(PERLEXE) $(WPERLEXE)
	$(MINIPERL) -I..\lib bin\exetype.pl $(WPERLEXE) WINDOWS

$(PERLEXESTATIC): $(PERLSTATICLIB) $(CONFIGPM) $(PERLEXEST_OBJ) $(PERLEXE_RES)
.IF "$(CCTYPE)" == "BORLAND"
	$(LINK32) -Tpe -ap $(BLINK_FLAGS) \
	    @@$(mktmp c0x32$(o) $(PERLEXEST_OBJ),$@@,, \
		$(shell @@type Extensions_static) $(PERLSTATICLIB) $(LIBFILES),, \
		$(PERLEXE_RES))
.ELIF "$(CCTYPE)" == "GCC"
	$(LINK32) -mconsole -o $@@ $(BLINK_FLAGS) \
	    $(mktmp $(LKPRE) $(shell @@type Extensions_static) \
		$(PERLSTATICLIB) $(LIBFILES) $(PERLEXEST_OBJ) \
		$(PERLEXE_RES) $(LKPOST))
.ELSE
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(BLINK_FLAGS) \
	    @@Extensions_static $(PERLSTATICLIB) /PDB:NONE \
	    $(LIBFILES) $(PERLEXEST_OBJ) $(SETARGV_OBJ) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)
.ENDIF

MakePPPort: $(MINIPERL) $(CONFIGPM) Extensions_nonxs
	$(MINIPERL) -I..\lib $(ICWD) ..\mkppport

#-------------------------------------------------------------------------------
# There's no direct way to mark a dependency on
# DynaLoader.pm, so this will have to do
Extensions : ..\make_ext.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic

Extensions_reonly : ..\make_ext.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic +re

Extensions_static : ..\make_ext.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --static
	$(MINIPERL) -I..\lib list_static_libs.pl > Extensions_static

Extensions_nonxs : ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --nonxs

$(DYNALOADER) : ..\make_ext.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynaloader

Extensions_clean :
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=clean

Extensions_realclean :
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=realclean

#-------------------------------------------------------------------------------


doc: $(PERLEXE) ..\pod\perltoc.pod
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
	    --podpath=pod:lib:ext:utils --htmlroot="file://$(INST_HTML:s,:,|,)"\
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse

# Note that this next section is parsed (and regenerated) by pod/buildtoc
# so please check that script before making structural changes here
utils: $(PERLEXE) $(X2P)
	cd ..\utils && $(MAKE) PERL=$(MINIPERL)
	copy ..\README.aix      ..\pod\perlaix.pod
	copy ..\README.amiga    ..\pod\perlamiga.pod
	copy ..\README.apollo   ..\pod\perlapollo.pod
	copy ..\README.beos     ..\pod\perlbeos.pod
	copy ..\README.bs2000   ..\pod\perlbs2000.pod
	copy ..\README.ce       ..\pod\perlce.pod
	copy ..\README.cn       ..\pod\perlcn.pod
	copy ..\README.cygwin   ..\pod\perlcygwin.pod
	copy ..\README.dgux     ..\pod\perldgux.pod
	copy ..\README.dos      ..\pod\perldos.pod
	copy ..\README.epoc     ..\pod\perlepoc.pod
	copy ..\README.freebsd  ..\pod\perlfreebsd.pod
	copy ..\README.haiku    ..\pod\perlhaiku.pod
	copy ..\README.hpux     ..\pod\perlhpux.pod
	copy ..\README.hurd     ..\pod\perlhurd.pod
	copy ..\README.irix     ..\pod\perlirix.pod
	copy ..\README.jp       ..\pod\perljp.pod
	copy ..\README.ko       ..\pod\perlko.pod
	copy ..\README.linux    ..\pod\perllinux.pod
	copy ..\README.macos    ..\pod\perlmacos.pod
	copy ..\README.macosx   ..\pod\perlmacosx.pod
	copy ..\README.mpeix    ..\pod\perlmpeix.pod
	copy ..\README.netware  ..\pod\perlnetware.pod
	copy ..\README.openbsd  ..\pod\perlopenbsd.pod
	copy ..\README.os2      ..\pod\perlos2.pod
	copy ..\README.os390    ..\pod\perlos390.pod
	copy ..\README.os400    ..\pod\perlos400.pod
	copy ..\README.plan9    ..\pod\perlplan9.pod
	copy ..\README.qnx      ..\pod\perlqnx.pod
	copy ..\README.riscos   ..\pod\perlriscos.pod
	copy ..\README.solaris  ..\pod\perlsolaris.pod
	copy ..\README.symbian  ..\pod\perlsymbian.pod
	copy ..\README.tru64    ..\pod\perltru64.pod
	copy ..\README.tw       ..\pod\perltw.pod
	copy ..\README.uts      ..\pod\perluts.pod
	copy ..\README.vmesa    ..\pod\perlvmesa.pod
	copy ..\README.vos      ..\pod\perlvos.pod
	copy ..\README.win32    ..\pod\perlwin32.pod
	copy ..\pod\perl5122delta.pod ..\pod\perldelta.pod
	cd ..\pod && $(MAKE) -f ..\win32\pod.mak converters
	$(PERLEXE) $(PL2BAT) $(UTILS)
	$(PERLEXE) $(ICWD) ..\autodoc.pl ..
	$(PERLEXE) $(ICWD) ..\pod\perlmodlib.pl -q

..\pod\perltoc.pod: $(PERLEXE) Extensions Extensions_nonxs
	$(PERLEXE) -f ..\pod\buildtoc --build-toc -q

# Note that the pod cleanup in this next section is parsed (and regenerated
# by pod/buildtoc so please check that script before making changes here

distclean: realclean
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl$(a) $(MINIMOD) \
		$(PERLEXESTATIC) $(PERLSTATICLIB)
	-del /f *.def *.map
	-del /f $(LIBDIR)\Encode.pm $(LIBDIR)\encoding.pm $(LIBDIR)\Errno.pm
	-del /f $(LIBDIR)\Config.pod $(LIBDIR)\POSIX.pod $(LIBDIR)\threads.pm
	-del /f $(LIBDIR)\.exists $(LIBDIR)\attributes.pm $(LIBDIR)\DynaLoader.pm
	-del /f $(LIBDIR)\Fcntl.pm $(LIBDIR)\IO.pm $(LIBDIR)\Opcode.pm
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm
	-del /f $(LIBDIR)\SDBM_File.pm $(LIBDIR)\Socket.pm $(LIBDIR)\POSIX.pm
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
	-del /f $(LIBDIR)\File\Glob.pm
	-del /f $(LIBDIR)\Storable.pm
	-del /f $(LIBDIR)\Sys\Hostname.pm
	-del /f $(LIBDIR)\Time\HiRes.pm
	-del /f $(LIBDIR)\Unicode\Normalize.pm
	-del /f $(LIBDIR)\Math\BigInt\FastCalc.pm
	-del /f $(LIBDIR)\Win32.pm
	-del /f $(LIBDIR)\Win32CORE.pm
	-del /f $(LIBDIR)\Win32API\File.pm
	-del /f $(LIBDIR)\Win32API\File\cFile.pc
	-del /f $(DISTDIR)\XSLoader\XSLoader.pm
	-if exist $(LIBDIR)\App rmdir /s /q $(LIBDIR)\App
	-if exist $(LIBDIR)\Archive rmdir /s /q $(LIBDIR)\Archive
	-if exist $(LIBDIR)\Attribute rmdir /s /q $(LIBDIR)\Attribute
	-if exist $(LIBDIR)\autodie rmdir /s /q $(LIBDIR)\autodie
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B
	-if exist $(LIBDIR)\CGI rmdir /s /q $(LIBDIR)\CGI
	-if exist $(LIBDIR)\CPAN rmdir /s /q $(LIBDIR)\CPAN
	-if exist $(LIBDIR)\CPANPLUS rmdir /s /q $(LIBDIR)\CPANPLUS
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data
	-if exist $(LIBDIR)\Devel rmdir /s /q $(LIBDIR)\Devel
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest
	-if exist $(LIBDIR)\Encode rmdir /s /q $(LIBDIR)\Encode
	-if exist $(LIBDIR)\encoding rmdir /s /q $(LIBDIR)\encoding
	-if exist $(LIBDIR)\ExtUtils\CBuilder rmdir /s /q $(LIBDIR)\ExtUtils\CBuilder
	-if exist $(LIBDIR)\ExtUtils\Command rmdir /s /q $(LIBDIR)\ExtUtils\Command
	-if exist $(LIBDIR)\ExtUtils\Constant rmdir /s /q $(LIBDIR)\ExtUtils\Constant
	-if exist $(LIBDIR)\ExtUtils\Liblist rmdir /s /q $(LIBDIR)\ExtUtils\Liblist
	-if exist $(LIBDIR)\ExtUtils\MakeMaker rmdir /s /q $(LIBDIR)\ExtUtils\MakeMaker
	-if exist $(LIBDIR)\File\Spec rmdir /s /q $(LIBDIR)\File\Spec
	-if exist $(LIBDIR)\Filter rmdir /s /q $(LIBDIR)\Filter
	-if exist $(LIBDIR)\Hash rmdir /s /q $(LIBDIR)\Hash
	-if exist $(LIBDIR)\I18N\LangTags rmdir /s /q $(LIBDIR)\I18N\LangTags
	-if exist $(LIBDIR)\inc rmdir /s /q $(LIBDIR)\inc
	-if exist $(LIBDIR)\Module\Pluggable rmdir /s /q $(LIBDIR)\Module\Pluggable
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO
	-if exist $(LIBDIR)\IPC rmdir /s /q $(LIBDIR)\IPC
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\Locale rmdir /s /q $(LIBDIR)\Locale
	-if exist $(LIBDIR)\Log rmdir /s /q $(LIBDIR)\Log
	-if exist $(LIBDIR)\Math rmdir /s /q $(LIBDIR)\Math
	-if exist $(LIBDIR)\Memoize rmdir /s /q $(LIBDIR)\Memoize
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\Module rmdir /s /q $(LIBDIR)\Module
	-if exist $(LIBDIR)\mro rmdir /s /q $(LIBDIR)\mro
	-if exist $(LIBDIR)\Net\FTP rmdir /s /q $(LIBDIR)\Net\FTP
	-if exist $(LIBDIR)\Object rmdir /s /q $(LIBDIR)\Object
	-if exist $(LIBDIR)\Package rmdir /s /q $(LIBDIR)\Package
	-if exist $(LIBDIR)\Params rmdir /s /q $(LIBDIR)\Params
	-if exist $(LIBDIR)\Parse rmdir /s /q $(LIBDIR)\Parse
	-if exist $(LIBDIR)\PerlIO rmdir /s /q $(LIBDIR)\PerlIO
	-if exist $(LIBDIR)\Pod\Perldoc rmdir /s /q $(LIBDIR)\Pod\Perldoc
	-if exist $(LIBDIR)\Pod\Simple rmdir /s /q $(LIBDIR)\Pod\Simple
	-if exist $(LIBDIR)\Pod\Text rmdir /s /q $(LIBDIR)\Pod\Text
	-if exist $(LIBDIR)\re rmdir /s /q $(LIBDIR)\re
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\Sys rmdir /s /q $(LIBDIR)\Sys
	-if exist $(LIBDIR)\TAP rmdir /s /q $(LIBDIR)\TAP
	-if exist $(LIBDIR)\Term\UI rmdir /s /q $(LIBDIR)\Term\UI
	-if exist $(LIBDIR)\Test rmdir /s /q $(LIBDIR)\Test
	-if exist $(LIBDIR)\Thread rmdir /s /q $(LIBDIR)\Thread
	-if exist $(LIBDIR)\threads rmdir /s /q $(LIBDIR)\threads
	-if exist $(LIBDIR)\Unicode\Collate rmdir /s /q $(LIBDIR)\Unicode\Collate
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
	-cd $(PODDIR) && del /f *.html *.bat \
	    perlaix.pod perlamiga.pod perlapi.pod perlapollo.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcn.pod \
	    perlcygwin.pod perldelta.pod perldgux.pod perldos.pod \
	    perlepoc.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmacos.pod perlmacosx.pod perlmodlib.pod \
	    perlmpeix.pod perlnetware.pod perlopenbsd.pod perlos2.pod \
	    perlos390.pod perlos400.pod perlplan9.pod perlqnx.pod \
	    perlriscos.pod perlsolaris.pod perlsymbian.pod perltoc.pod \
	    perltru64.pod perltw.pod perluniprops.pod perluts.pod \
	    perlvmesa.pod perlvos.pod perlwin32.pod \
	    pod2html pod2latex pod2man pod2text pod2usage \
	    podchecker podselect
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs \
	    perldoc perlivp dprofpp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove ptar ptardiff cpanp-run-perl cpanp cpan2dist shasum corelist config_data
	-cd ..\x2p && del /f find2perl s2p psed *.bat
	-del /f ..\config.sh perlmain.c dlutils.c config.h.new \
	    perlmainst.c
	-del /f $(CONFIGPM)
	-del /f ..\lib\Config_git.pl
	-del /f bin\*.bat
	-del /f perllibst.h
	-del /f $(PERLEXE_RES) perl.base
	-cd .. && del /s *$(a) *.map *.pdb *.ilk *.tds *.bs *$(o) .exists pm_to_blib ppport.h
	-cd $(EXTDIR) && del /s *.def Makefile Makefile.old
	-cd $(DISTDIR) && del /s *.def Makefile Makefile.old
	-cd $(CPANDIR) && del /s *.def Makefile Makefile.old
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR)
	-if exist pod2htmd.tmp del pod2htmd.tmp
	-if exist pod2htmi.tmp del pod2htmi.tmp
	-if exist $(HTMLDIR) rmdir /s /q $(HTMLDIR)
	-del /f ..\t\test_state

install : all installbare installhtml

installbare : $(RIGHTMAKE) utils ..\pod\perltoc.pod
	$(PERLEXE) ..\installperl
	if exist $(WPERLEXE) $(XCOPY) $(WPERLEXE) $(INST_BIN)\*.*
	if exist $(PERLEXESTATIC) $(XCOPY) $(PERLEXESTATIC) $(INST_BIN)\*.*
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	if exist ..\perl*.pdb $(XCOPY) ..\perl*.pdb $(INST_BIN)\*.*
	if exist ..\x2p\a2p.pdb $(XCOPY) ..\x2p\a2p.pdb $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_SCRIPT)\*.*

installhtml : doc
	$(RCOPY) $(HTMLDIR)\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	$(RCOPY) ..\lib $(INST_LIB)\*.*

$(UNIDATAFILES) ..\pod\perluniprops.pod .UPDATEALL : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables Extensions_nonxs
	cd ..\lib\unicore && \
	..\$(MINIPERL) -I.. -I..\..\cpan\Cwd\lib -I..\..\cpan\Cwd mktables -P ..\..\pod -maketest -makelist -p

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) $(UNIDATAFILES) utils
	$(XCOPY) $(MINIPERL) ..\t\$(NULL)
	if exist ..\t\perl.exe del /f ..\t\perl.exe
	rename ..\t\miniperl.exe perl.exe
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
	attrib -r ..\t\*.*
	cd ..\t && \
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t

test-prep : all utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
.IF "$(CCTYPE)" == "GCC"
.IF "$(GCC_4XX)" == "define"
	$(XCOPY) $(GCCHELPERDLL) ..\t\$(NULL)
.ENDIF
.ENDIF

test : $(RIGHTMAKE) test-prep
	cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)

test-reonly : reonly utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	cd ..\t && \
	$(PERLEXE) -I..\lib harness $(OPT) -re \bpat\\/ $(EXTRA) && \
	cd ..\win32

regen :
	cd .. && regen.pl && cd win32

test-notty : test-prep
	set PERL_SKIP_TTY_TEST=1 && \
	    cd ..\t && $(PERLEXE) -I.\lib harness $(TEST_SWITCHES) $(TEST_FILES)

_test : $(RIGHTMAKE)
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
.IF "$(CCTYPE)" == "BORLAND"
	$(XCOPY) $(GLOBBAT) ..\t\$(NULL)
.ELSE
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
.ENDIF
	cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)

_clean :
	-@@erase miniperlmain$(o)
	-@@erase $(MINIPERL)
	-@@erase perlglob$(o)
	-@@erase perlmain$(o)
	-@@erase perlmainst$(o)
	-@@erase config.w32
	-@@erase /f config.h
	-@@erase /f ..\git_version.h
	-@@erase $(GLOBEXE)
	-@@erase $(PERLEXE)
	-@@erase $(WPERLEXE)
	-@@erase $(PERLEXESTATIC)
	-@@erase $(PERLSTATICLIB)
	-@@erase $(PERLDLL)
	-@@erase $(CORE_OBJ)
	-@@erase $(GENUUDMAP) $(GENUUDMAP_OBJ) $(UUDMAP_H) $(BITCOUNT_H)
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR)
	-if exist $(UNIDATADIR1) rmdir /s /q $(UNIDATADIR1)
	-if exist $(UNIDATADIR2) rmdir /s /q $(UNIDATADIR2)
	-@@erase $(UNIDATAFILES)
	-@@erase $(WIN32_OBJ)
	-@@erase $(DLL_OBJ)
	-@@erase $(X2P_OBJ)
	-@@erase ..\*$(o) ..\*$(a) ..\*.exp *$(o) *$(a) *.exp *.res
	-@@erase ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@erase ..\x2p\*.exe ..\x2p\*.bat
	-@@erase *.ilk
	-@@erase *.pdb
	-@@erase *.tds
	-@@erase Extensions_static



clean : Extensions_clean _clean

realclean : Extensions_realclean _clean

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "dmake nok" instead.
ok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)"

okfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok

nok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)"

nokfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d2 1
a2 1
# Makefile to build perl on Windows using DMAKE.
d4 4
a7 3
#	Microsoft Visual C++ 6.0 or later
#	MinGW with gcc-3.2 or later
#	Windows SDK 64-bit compiler and tools
d10 1
a10 1
# (perl516.dll).  Also makes individual DLLs for the XS extensions.
d42 1
a42 1
#INST_VER	*= \5.16.3
d100 4
a109 2
# Windows Server 2003 SP1 Platform SDK (April 2005)
#CCTYPE		= SDK2003SP1
d118 3
a120 5
# Visual C++ 2010 Express Edition (aka Visual C++ 10.x) (free version)
#CCTYPE		= MSVC100FREE
# Visual C++ 2010 (aka Visual C++ 10.x) (full version)
#CCTYPE		= MSVC100
# MinGW or mingw-w64 with gcc-3.2 or later
d124 12
d143 11
d163 14
d196 1
a196 1
# variables below. A static library perl516s.lib will also be created.
d217 3
a219 1
.IF "$(CCTYPE)" == "GCC"
d226 16
d266 20
d292 2
a293 8
# Perl needs to read scripts in text mode so that the DATA filehandle
# works correctly with seek() and tell(), or around auto-flushes of
# all filehandles (e.g. by system(), backticks, fork(), etc).
#
# The current version on the ByteLoader module on CPAN however only
# works if scripts are read in binary mode.  But before you disable text
# mode script reading (and break some DATA filehandle functionality)
# please check first if an updated ByteLoader isn't available on CPAN.
d295 1
a295 1
BUILDOPT	+= -DPERL_TEXTMODE_SCRIPTS
d321 7
d337 1
a388 7
# Treat 64-bit MSVC60 (doesn't really exist) as SDK2003SP1 because
# both link against MSVCRT.dll (which is part of Windows itself) and
# not against a compiler specific versioned runtime.
.IF "$(WIN64)" == "define" && "$(CCTYPE)" == "MSVC60"
CCTYPE		= SDK2003SP1
.ENDIF

d411 2
a412 2
# Visual C++ 98, .NET 2003, 2005/2008/2010 specific.
# VC++ 6/7/8/9/10.x can load DLLs on demand.  Makes the test suite run
d414 1
a414 1
# versions of 8/9/10.x can.)
d416 2
a417 3
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d456 59
a514 1
.IF "$(CCTYPE)" == "GCC"
d535 1
a535 1
DEFINES		= -DWIN32
d549 1
a549 1
LIBFILES	= $(LIBC) \
d570 3
a572 1
BUILDOPT	+= -fno-strict-aliasing -mms-bitfields
d587 1
a587 1
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT
d592 1
d594 3
d599 5
a603 1
OPTIMIZE	= -Od -MD -Zi -DDEBUGGING
d628 1
a628 1
OPTIMIZE	+= -fp:precise
d631 1
a631 1
# For now, silence VC++ 8/9/10.x's warnings about "unsafe" CRT functions
d634 1
a634 2
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d638 6
a643 12
# In VS 2005 (VC++ 8.0) Microsoft changes time_t from 32-bit to
# 64-bit, even in 32-bit mode.  It also provides the _USE_32BIT_TIME_T
# preprocessor option to revert back to the old functionality for
# backward compatibility.  We define this symbol here for older 32-bit
# compilers only (which aren't using it at all) for the sole purpose
# of getting it into $Config{ccflags}.  That way if someone builds
# Perl itself with e.g. VC6 but later installs an XS module using VC8
# the time_t types will still be compatible.
.IF "$(WIN64)" == "undef"
.IF "$(CCTYPE)" == "MSVC60" || \
    "$(CCTYPE)" == "MSVC70" || "$(CCTYPE)" == "MSVC70FREE"
BUILDOPT	+= -D_USE_32BIT_TIME_T
d647 1
a647 1
LIBBASEFILES	= \
d653 2
a654 2
# The 64 bit Windows Server 2003 SP1 SDK compilers link against MSVCRT.dll, which
# doesn't include the buffer overrun verification code used by the /GS switch.
d656 2
a657 2
# "security cookie verification" code must be included via bufferoverflow.lib.
.IF "$(WIN64)" == "define" && "$(CCTYPE)" == "SDK2003SP1"
d661 1
d680 1
a680 2
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d729 4
a732 1
.IF "$(CCTYPE)" == "GCC"
a768 1
		   ..\lib\unicore\UCD.pl ..\lib\unicore\Name.pm            \
d788 1
d793 1
a807 1
		..\utils\pod2html	\
a810 2
		..\utils\ptargrep	\
		..\utils\zipdetails	\
d816 7
a822 1
		..\utils\json_pp	\
d832 6
a837 1
.IF "$(CCTYPE)" == "GCC"
d851 2
a852 2
PERLIMPLIB	= ..\libperl516$(a)
PERLSTATICLIB	= ..\libperl516s$(a)
d868 3
a870 3
PERLIMPLIB	*= ..\perl516$(a)
PERLSTATICLIB	*= ..\perl516s$(a)
PERLDLL		= ..\perl516.dll
a886 1
		..\keywords.c	\
d924 1
a924 2
		.\win32thread.c	\
		.\fcrypt.c
d932 4
a986 2
MG_DATA_H	= ..\mg_data.h
GENERATED_HEADERS = $(UUDMAP_H) $(BITCOUNT_H) $(MG_DATA_H)
d1036 1
d1058 24
a1081 1
ICWD = -I..\dist\Cwd -I..\dist\Cwd\lib
d1087 2
a1088 2
all : CHECKDMAKE .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL)	\
	$(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort		\
d1093 1
a1093 1
..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h
d1097 2
a1098 2
reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIPERL)	\
	$(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)		\
d1105 46
d1161 5
a1165 1
.IF "$(CCTYPE)" == "GCC"
d1194 1
a1194 1
# with MULTI, ITHREADS, IMP_SYS, LARGE_FILES and PERLIO off), then make
d1198 2
a1199 3
# repeat for config.gc64 and config_H.gc64, and again for config.gc64nox and
# config_H.gc64nox, if you have suitable build environments, otherwise hand-edit
# them to maintain the same differences with config.gc and config_H.gc as before.
d1213 1
a1217 4
..\lib\buildcustomize.pl: $(MINIPERL) ..\write_buildcustomize.pl
	$(MINIPERL) -I..\lib ..\write_buildcustomize.pl .. >..\lib\buildcustomize.pl


d1219 6
a1224 1
.IF "$(CCTYPE)" == "GCC"
d1267 1
a1267 1
perldll.def : $(MINIPERL) $(CONFIGPM) ..\embed.fnc ..\makedef.pl create_perllibst_h.pl
d1270 1
a1270 1
	$(BUILDOPT) CCTYPE=$(CCTYPE) TARG_DIR=..\ > perldll.def
d1273 6
a1278 1
.IF "$(CCTYPE)" == "GCC"
d1302 5
a1306 1
.IF "$(CCTYPE)" == "GCC"
d1344 4
a1347 1
.IF "$(CCTYPE)" == "GCC"
d1356 1
a1356 3
$(MINIDIR)\globals$(o) : $(GENERATED_HEADERS)

$(UUDMAP_H) $(MG_DATA_H) : $(BITCOUNT_H)
d1358 2
a1359 4
$(BITCOUNT_H) : $(GENUUDMAP)
	$(GENUUDMAP) $(GENERATED_HEADERS)

$(GENUUDMAP_OBJ) : ..\mg_raw.h
d1362 4
a1365 1
.IF "$(CCTYPE)" == "GCC"
d1387 5
a1391 1
.IF "$(CCTYPE)" == "GCC"
d1395 1
a1395 1
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
d1403 6
a1408 1
.IF "$(CCTYPE)" == "GCC"
d1414 1
a1414 1
	$(LINK32) -subsystem:console -out:$@@ $(BLINK_FLAGS) \
d1426 1
a1426 1
Extensions : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
d1430 1
a1430 1
Extensions_reonly : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
d1434 1
a1434 1
Extensions_static : ..\make_ext.pl ..\lib\buildcustomize.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
d1439 1
a1439 1
Extensions_nonxs : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) ..\pod\perlfunc.pod
d1443 1
a1443 1
$(DYNALOADER) : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
d1459 1
a1459 1
	    --recurse
d1467 1
d1503 2
a1504 1
	copy ..\pod\perldelta.pod ..\pod\perl5163delta.pod
d1510 1
a1510 1
	$(PERLEXE) -f ..\pod\buildtoc -q
a1536 1
	-del /f $(LIBDIR)\buildcustomize.pl
a1589 1
	-if exist $(LIBDIR)\Tie\Hash rmdir /s /q $(LIBDIR)\Tie\Hash
d1593 2
a1594 2
	-cd $(PODDIR) && del /f *.html *.bat roffitall \
	    perl5163delta.pod perlaix.pod perlamiga.pod perlapi.pod \
d1596 11
a1606 9
	    perlcygwin.pod perldgux.pod perldos.pod perlepoc.pod \
	    perlfreebsd.pod perlhaiku.pod perlhpux.pod perlhurd.pod \
	    perlintern.pod perlirix.pod perljp.pod perlko.pod perllinux.pod \
	    perlmacos.pod perlmacosx.pod perlmodlib.pod perlmpeix.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perltoc.pod perltru64.pod \
	    perltw.pod perluniprops.pod perluts.pod perlvmesa.pod \
	    perlvos.pod perlwin32.pod
d1608 2
a1609 2
	    perldoc perlivp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep cpanp-run-perl cpanp cpan2dist shasum corelist config_data zipdetails
d1625 1
d1631 1
a1631 1
installbare : utils ..\pod\perltoc.pod
d1648 1
a1648 1
	..\$(MINIPERL) -I.. -I..\..\dist\Cwd\lib -I..\..\dist\Cwd mktables -P ..\..\pod -maketest -makelist -p
d1654 3
d1658 1
d1663 1
a1663 1
test-prep : all utils ..\pod\perltoc.pod
d1666 3
d1670 6
d1677 2
a1678 21
.IF "$(CCTYPE)" == "GCC"
# If building with gcc versions 4.x.x or greater, then
# the GCC helper DLL will also need copied to the test directory.
# The name of the dll can change, depending upon which vendor has supplied
# your compiler, and upon the values of "x".
# libstdc++-6.dll is copied if it exists as it, too, may then be needed.
# Without this copying, the op/taint.t test script will fail.
	if exist $(CCHOME)\bin\libgcc_s_sjlj-1.dll $(XCOPY) $(CCHOME)\bin\libgcc_s_sjlj-1.dll ..\t\$(NULL)
	if exist $(CCHOME)\bin\libgcc_s_dw2-1.dll $(XCOPY) $(CCHOME)\bin\libgcc_s_dw2-1.dll ..\t\$(NULL)
	if exist $(CCHOME)\bin\libgcc_s_1.dll $(XCOPY) $(CCHOME)\bin\libgcc_s_1.dll ..\t\$(NULL)
	if exist $(CCHOME)\bin\w64gcc_s_sjlj-1.dll $(XCOPY) $(CCHOME)\bin\w64gcc_s_sjlj-1.dll ..\t\$(NULL)
	if exist $(CCHOME)\bin\libstdc++-6.dll $(XCOPY) $(CCHOME)\bin\libstdc++-6.dll ..\t\$(NULL)
.ENDIF

test : test-prep
	set PERL_STATIC_EXT=$(STATIC_EXT) && \
	    cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)

test_porting : test-prep
	set PERL_STATIC_EXT=$(STATIC_EXT) && \
	    cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) porting\*.t ..\lib\diagnostics.t
d1692 1
a1692 2
	set PERL_STATIC_EXT=$(STATIC_EXT) && \
	    set PERL_SKIP_TTY_TEST=1 && \
d1695 1
a1695 1
_test :
d1698 3
d1702 2
a1703 2
	set PERL_STATIC_EXT=$(STATIC_EXT) && \
	    cd ..\t && $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1721 1
a1721 1
	-@@erase $(GENUUDMAP) $(GENUUDMAP_OBJ) $(GENERATED_HEADERS)
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d9 1
a9 1
# (perl518.dll).  Also makes individual DLLs for the XS extensions.
d41 1
a41 1
#INST_VER	*= \5.18.2
a96 6
# Uncomment this if you're building a 32-bit perl and want 64-bit integers.
# (If you're building a 64-bit perl then you will have 64-bit integers whether
# or not this is uncommented.)
#USE_64_BIT_INT	*= define

#
a100 2
# Visual C++ .NET 2002/2003 (aka Visual C++ 7.x) (full version)
#CCTYPE		*= MSVC70
d103 2
d107 2
d111 2
a112 2
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
#CCTYPE		*= MSVC80FREE
d115 2
a116 2
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
#CCTYPE		*= MSVC90FREE
a118 6
# Visual C++ 2010 Express Edition (aka Visual C++ 10.x) (free version)
#CCTYPE		= MSVC100FREE
# Visual C++ 2012 (aka Visual C++ 11.x) (full version)
#CCTYPE		= MSVC110
# Visual C++ 2012 Express Edition (aka Visual C++ 11.x) (free version)
#CCTYPE		= MSVC110FREE
d158 1
a158 1
# variables below. A static library perl518s.lib will also be created.
d197 2
a198 3
CCINCDIR *= $(CCHOME)\x86_64-w64-mingw32\include
CCLIBDIR *= $(CCHOME)\x86_64-w64-mingw32\lib
CCDLLDIR *= $(CCLIBDIR)
a201 1
CCDLLDIR *= $(CCHOME)\bin
a259 1
USE_64_BIT_INT	*= undef
d293 1
a293 1
.IMPORT .IGNORE : PROCESSOR_ARCHITECTURE PROCESSOR_ARCHITEW6432 WIN64 CCHOME
a310 4
.IF "$(WIN64)" == "define"
USE_64_BIT_INT	= define
.ENDIF

a335 4
.IF "$(USE_PERLIO)" == "define"
BUILDOPT       += -DUSE_PERLIO
.ENDIF

d340 9
a348 4
.IF "$(WIN64)" != "define"
.IF "$(USE_64_BIT_INT)" == "define"
ARCHNAME	!:= $(ARCHNAME)-64int
.ENDIF
d350 10
d436 1
a436 1
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) $(OPTIMIZE)
a445 25
# All but the free version of VC++ 7.x can load DLLs on demand.  Makes the test
# suite run in about 10% less time.
.IF "$(CCTYPE)" != "MSVC70FREE"
DELAYLOAD	= -DELAYLOAD:ws2_32.dll delayimp.lib
.ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest

# Most relevant compiler-specific options fall into two groups:
# either pre-MSVC80 or MSVC80 onwards, so define a macro for this.
.IF "$(CCTYPE)" == "MSVC60" || \
    "$(CCTYPE)" == "MSVC70" || "$(CCTYPE)" == "MSVC70FREE"
PREMSVC80	= define
.ELSE
PREMSVC80	= undef
.ENDIF

d468 1
a468 2
# -O1 yields smaller code, which turns out to be faster than -O2 on x86 and x64
OPTIMIZE	= -O1 -MD -Zi -DNDEBUG
d479 1
a479 1
OPTIMIZE	+= -GL
d481 4
d493 1
a493 1
# For now, silence warnings from VC++ 8.x onwards about "unsafe" CRT functions
d495 3
a497 1
.IF "$(PREMSVC80)" == "undef"
d510 2
a511 1
.IF "$(PREMSVC80)" == "define"
d547 3
a549 1
.IF "$(PREMSVC80)" == "undef"
d696 9
d707 3
a709 4
PERLIMPLIB	= ..\libperl518$(a)
PERLSTATICLIB	= ..\libperl518s$(a)
INT64		= long long
INT64f		= ll
d713 4
d719 1
a719 2
INT64		= __int64
INT64f		= I64
d725 3
a727 3
PERLIMPLIB	*= ..\perl518$(a)
PERLSTATICLIB	*= ..\perl518s$(a)
PERLDLL		= ..\perl518.dll
d884 1
a908 1
		use64bitint=$(USE_64_BIT_INT)	~	\
d912 1
a912 3
		optimize=$(OPTIMIZE)	~	\
		ARCHPREFIX=$(ARCHPREFIX)	~	\
		WIN64=$(WIN64)
a960 9
#
# Copy the template config.h and set configurables at the end of it
# as per the options chosen and compiler used.
# Note: This config.h is only used to build miniperl.exe anyway, but
# it's as well to have its options correct to be sure that it builds
# and so that it's "-V" options are correct for use by makedef.pl. The
# real config.h used to build perl.exe is generated from the top-level
# config_h.SH by config_h.PL (run by miniperl.exe).
#
a963 64
	@@echo.>>$@@
	@@echo #ifndef _config_h_footer_>>$@@
	@@echo #define _config_h_footer_>>$@@
	@@echo #undef PTRSIZE>>$@@
	@@echo #undef SSize_t>>$@@
	@@echo #undef HAS_ATOLL>>$@@
	@@echo #undef HAS_STRTOLL>>$@@
	@@echo #undef HAS_STRTOULL>>$@@
	@@echo #undef IVTYPE>>$@@
	@@echo #undef UVTYPE>>$@@
	@@echo #undef IVSIZE>>$@@
	@@echo #undef UVSIZE>>$@@
	@@echo #undef NV_PRESERVES_UV>>$@@
	@@echo #undef NV_PRESERVES_UV_BITS>>$@@
	@@echo #undef IVdf>>$@@
	@@echo #undef UVuf>>$@@
	@@echo #undef UVof>>$@@
	@@echo #undef UVxf>>$@@
	@@echo #undef UVXf>>$@@
	@@echo #undef USE_64_BIT_INT>>$@@
	@@echo #undef Size_t_size>>$@@
.IF "$(WIN64)"=="define"
	@@echo #define PTRSIZE ^8>>$@@
	@@echo #define SSize_t $(INT64)>>$@@
	@@echo #define HAS_ATOLL>>$@@
	@@echo #define HAS_STRTOLL>>$@@
	@@echo #define HAS_STRTOULL>>$@@
	@@echo #define Size_t_size ^8>>$@@
.ELSE
	@@echo #define PTRSIZE ^4>>$@@
	@@echo #define SSize_t int>>$@@
	@@echo #undef HAS_ATOLL>>$@@
	@@echo #undef HAS_STRTOLL>>$@@
	@@echo #undef HAS_STRTOULL>>$@@
	@@echo #define Size_t_size ^4>>$@@
.ENDIF
.IF "$(USE_64_BIT_INT)"=="define"
	@@echo #define IVTYPE $(INT64)>>$@@
	@@echo #define UVTYPE unsigned $(INT64)>>$@@
	@@echo #define IVSIZE ^8>>$@@
	@@echo #define UVSIZE ^8>>$@@
	@@echo #undef NV_PRESERVES_UV>>$@@
	@@echo #define NV_PRESERVES_UV_BITS 53>>$@@
	@@echo #define IVdf "$(INT64f)d">>$@@
	@@echo #define UVuf "$(INT64f)u">>$@@
	@@echo #define UVof "$(INT64f)o">>$@@
	@@echo #define UVxf "$(INT64f)x">>$@@
	@@echo #define UVXf "$(INT64f)X">>$@@
	@@echo #define USE_64_BIT_INT>>$@@
.ELSE
	@@echo #define IVTYPE long>>$@@
	@@echo #define UVTYPE unsigned long>>$@@
	@@echo #define IVSIZE ^4>>$@@
	@@echo #define UVSIZE ^4>>$@@
	@@echo #define NV_PRESERVES_UV>>$@@
	@@echo #define NV_PRESERVES_UV_BITS 32>>$@@
	@@echo #define IVdf "ld">>$@@
	@@echo #define UVuf "lu">>$@@
	@@echo #define UVof "lo">>$@@
	@@echo #define UVxf "lx">>$@@
	@@echo #define UVXf "lX">>$@@
	@@echo #undef USE_64_BIT_INT>>$@@
.ENDIF
	@@echo #endif>>$@@
d975 2
a976 2
# This target is for when changes to the main config.sh happen.
# Edit config.gc, then make perl using GCC in a minimal configuration (i.e.
d979 5
d989 1
a989 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL "ARCHPREFIX=$(ARCHPREFIX)"
d998 1
a998 1
	$(MINIPERL) -I..\lib $(ICWD) config_h.PL "ARCHPREFIX=$(ARCHPREFIX)" \
d1011 1
a1011 1
	    @@$(mktmp $(DELAYLOAD) $(LIBFILES) $(MINI_OBJ))
d1022 1
a1022 1
	$(CC) -c $(CFLAGS) -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ $(*B).c
d1220 1
a1220 1
	    --podpath=pod:lib:utils --htmlroot="file://$(INST_HTML:s,:,|,)"\
d1229 1
d1236 1
d1247 1
d1260 2
d1264 1
a1264 1
	copy ..\pod\perldelta.pod ..\pod\perl5182delta.pod
d1356 10
a1365 9
	    perl5182delta.pod perlaix.pod perlamiga.pod perlapi.pod \
	    perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldgux.pod perldos.pod perlfreebsd.pod perlhaiku.pod \
	    perlhpux.pod perlhurd.pod perlintern.pod perlirix.pod \
	    perljp.pod perlko.pod perllinux.pod perlmacos.pod \
	    perlmacosx.pod perlmodlib.pod perlnetware.pod perlopenbsd.pod \
	    perlos2.pod perlos390.pod perlos400.pod perlplan9.pod \
	    perlqnx.pod perlriscos.pod perlsolaris.pod perlsymbian.pod \
	    perltoc.pod perltru64.pod perltw.pod perluniprops.pod \
d1416 1
a1416 1
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t opbasic/*.t op/*.t pragma/*.t
d1422 1
d1430 5
a1434 3
	if exist $(CCDLLDIR)\libgcc_s_sjlj-1.dll $(XCOPY) $(CCDLLDIR)\libgcc_s_sjlj-1.dll ..\t\$(NULL)
	if exist $(CCDLLDIR)\libgcc_s_dw2-1.dll $(XCOPY) $(CCDLLDIR)\libgcc_s_dw2-1.dll ..\t\$(NULL)
	if exist $(CCDLLDIR)\libstdc++-6.dll $(XCOPY) $(CCDLLDIR)\libstdc++-6.dll ..\t\$(NULL)
@


1.1.1.15
log
@Import perl-5.20.1
@
text
@d5 1
a5 1
#	MinGW with gcc-3.4.5 or later
d9 1
a9 1
# (perl520.dll).  Also makes individual DLLs for the XS extensions.
a15 5
#
# Import everything from the environment like NMAKE does.
#
.IMPORT : .EVERYTHING

d41 1
a41 1
#INST_VER	*= \5.20.1
d63 2
a64 3
# uncomment to enable multiple interpreters.  This is needed for fork()
# emulation and for thread support, and is auto-enabled by USE_IMP_SYS
# and USE_ITHREADS below.
d70 2
a71 2
# This should be enabled to get the fork() emulation.  This needs (and
# will auto-enable) USE_MULTI above.
d77 2
a78 2
# made by perl.  This is also needed to get fork().  This needs (and
# will auto-enable) USE_MULTI above.
a99 1
# Note: This option is not supported in 32-bit MSVC60 builds.
d129 1
a129 5
# Visual C++ 2013 (aka Visual C++ 12.x) (full version)
#CCTYPE		= MSVC120
# Visual C++ 2013 Express Edition (aka Visual C++ 12.x) (free version)
#CCTYPE		= MSVC120FREE
# MinGW or mingw-w64 with gcc-3.4.5 or later
a132 11
# If you are using GCC, 4.3 or later by default we add the -fwrapv option.
# See https://rt.perl.org/Ticket/Display.html?id=121505
#
#GCCWRAPV       *= define

#
# If you are using Intel C++ Compiler uncomment this
#
#__ICC		*= define

#
d168 1
a168 1
# variables below. A static library perl520s.lib will also be created.
d306 2
a334 6
# Disable the 64-bit-int option for (32-bit) MSVC60 builds since that compiler
# does not support it.
.IF "$(CCTYPE)" == "MSVC60"
USE_64_BIT_INT	!= undef
.ENDIF

d375 1
a391 2
MINIBUILDOPT    *=

a403 7
GCCWRAPV *= $(shell for /f "delims=. tokens=1,2,3" %i in ('$(CC) -dumpversion') do @@if "%i"=="4" (if "%j" geq "3" echo define) else if "%i" geq "5" (echo define))

.IF "$(GCCWRAPV)" == "define"
BUILDOPT        += -fwrapv
MINIBUILDOPT    += -fwrapv
.ENDIF

a476 1
.IF "$(__ICC)" != "define"
a478 4
.ELSE
CC		= icl
LINK32		= xilink
.ENDIF
d509 1
a509 1
.IF "$(CCTYPE)" != "MSVC60"
a512 1
LIB_FLAGS	= -ltcg
a546 8
# Avoid __intel_new_proc_init link error for libircmt.
# libmmd is /MD equivelent, other variants exist.
# libmmd is Intel C's math addon funcs to MS CRT, contains long doubles, C99,
# and optimized C89 funcs
.IF "$(__ICC)" == "define"
LIBBASEFILES	+= libircmt.lib libmmd.lib
.ENDIF

d563 1
a563 1
LIB_FLAGS	= $(LIB_FLAGS) -nologo
a643 1
STATICDIR	= .\static.tmp
d646 1
d649 1
a649 1
.IF "$(BUILD_STATIC)" == "define" || "$(ALL_STATIC)" == "define"
d702 3
d721 2
a722 2
PERLIMPLIB	= ..\libperl520$(a)
PERLSTATICLIB	= ..\libperl520s$(a)
d737 3
a739 3
PERLIMPLIB	*= ..\perl520$(a)
PERLSTATICLIB	*= ..\perl520s$(a)
PERLDLL		= ..\perl520.dll
a746 1
		..\caretx.c	\
a819 1
		..\hv_func.h	\
d828 1
a846 1
		.\include\sys\errno2.h	\
d879 4
a882 2
#  - MakeMaker isn't capable enough for SDBM_File (small bug)
STATIC_EXT	= * !SDBM_File
d885 1
a885 2
# (be sure to include Win32CORE to load Win32 on demand)
#STATIC_EXT	= Win32CORE Cwd Compress/Raw/Zlib
d928 2
d935 1
a935 1
	$(CONFIGPM) $(UNIDATAFILES) MakePPPort				\
d945 1
a945 1
	$(CONFIGPM) $(UNIDATAFILES) $(PERLEXE)				\
a989 3
	@@echo #undef Off_t>>$@@
	@@echo #undef LSEEKSIZE>>$@@
	@@echo #undef Off_t_size>>$@@
a1007 9
.IF "$(USE_LARGE_FILES)"=="define"
	@@echo #define Off_t $(INT64)>>$@@
	@@echo #define LSEEKSIZE ^8>>$@@
	@@echo #define Off_t_size ^8>>$@@
.ELSE
	@@echo #define Off_t long>>$@@
	@@echo #define LSEEKSIZE ^4>>$@@
	@@echo #define Off_t_size ^4>>$@@
.ENDIF
d1071 1
a1071 1
	-$(MINIPERL) -I..\lib config_h.PL "ARCHPREFIX=$(ARCHPREFIX)"
d1074 1
a1074 1
$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL
d1080 1
a1080 1
	$(MINIPERL) -I..\lib config_h.PL "ARCHPREFIX=$(ARCHPREFIX)" \
d1083 3
a1085 2
# See the comment in Makefile.SH explaining this seemingly cranky ordering
$(MINIPERL) : ..\lib\buildcustomize.pl
d1087 1
a1087 1
..\lib\buildcustomize.pl : $(MINIDIR) $(MINI_OBJ) $(CRTIPMLIBS) ..\write_buildcustomize.pl
d1089 1
a1089 1
	$(LINK32) -v -mconsole -o $(MINIPERL) $(BLINK_FLAGS) \
d1092 1
a1092 1
	$(LINK32) -subsystem:console -out:$(MINIPERL) $(BLINK_FLAGS) \
d1094 1
a1094 1
	$(EMBED_EXE_MANI:s/$@@/$(MINIPERL)/)
a1095 1
	$(MINIPERL) -I..\lib -f ..\write_buildcustomize.pl ..
d1101 1
a1101 1
	$(CC) -c $(CFLAGS) $(MINIBUILDOPT) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*B).c
d1104 1
a1104 1
	$(CC) -c $(CFLAGS) $(MINIBUILDOPT) -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ $(*B).c
d1160 1
a1160 1
$(PERLSTATICLIB): $(PERLDLL_OBJ) Extensions_static
d1162 8
a1169 7
	$(LIB32) $(LIB_FLAGS) $@@ $(PERLDLL_OBJ)
	if exist $(STATICDIR) rmdir /s /q $(STATICDIR)
	for %i in ($(shell @@type Extensions_static)) do \
		@@mkdir $(STATICDIR) && cd $(STATICDIR) && \
		$(ARCHPREFIX)ar x ..\%i && \
		$(ARCHPREFIX)ar q ..\$@@ *$(o) && \
		cd .. && rmdir /s /q $(STATICDIR)
d1178 3
d1245 1
a1245 1
	    $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB) $(LIBFILES) $(SETARGV_OBJ)
d1254 3
a1256 1
	    $(PERLEXEST_OBJ) $(PERLEXE_RES) $(PERLSTATICLIB) $(LIBFILES)
d1259 2
a1260 1
	    $(PERLEXEST_OBJ) $(PERLEXE_RES) $(PERLSTATICLIB) $(LIBFILES) $(SETARGV_OBJ)
d1265 1
a1265 1
	$(MINIPERL) -I..\lib ..\mkppport
d1278 1
a1278 1
Extensions_static : ..\make_ext.pl ..\lib\buildcustomize.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
a1304 3
..\utils\Makefile: $(CONFIGPM) ..\utils\Makefile.PL
	$(MINIPERL) -I..\lib ..\utils\Makefile.PL ..

d1307 1
a1307 1
utils: $(PERLEXE) $(X2P) ..\utils\Makefile
a1310 1
	copy ..\README.android  ..\pod\perlandroid.pod
d1315 1
a1336 1
	copy ..\README.synology ..\pod\perlsynology.pod
d1341 1
a1341 1
	copy ..\pod\perldelta.pod ..\pod\perl5201delta.pod
d1343 2
a1344 2
	$(MINIPERL) -I..\lib ..\autodoc.pl ..
	$(MINIPERL) -I..\lib ..\pod\perlmodlib.PL -q ..
d1354 3
a1356 1
		$(PERLIMPLIB) ..\miniperl$(a) $(PERLEXESTATIC) $(PERLSTATICLIB)
a1375 1
	-del /f *.def *.map
d1380 1
a1380 1
	-if exist $(LIBDIR)\Carp rmdir /s /q $(LIBDIR)\Carp
d1382 2
a1384 2
	-if exist $(LIBDIR)\Config\Perl rmdir /s /q $(LIBDIR)\Config\Perl
	-if exist $(LIBDIR)\CPAN rmdir /s /q $(LIBDIR)\CPAN
a1389 1
	-if exist $(LIBDIR)\Exporter rmdir /s /q $(LIBDIR)\Exporter
a1394 2
	-if exist $(LIBDIR)\ExtUtils\ParseXS rmdir /s /q $(LIBDIR)\ExtUtils\ParseXS
	-if exist $(LIBDIR)\ExtUtils\Typemaps rmdir /s /q $(LIBDIR)\ExtUtils\Typemaps
d1398 1
a1398 2
	-if exist $(LIBDIR)\HTTP rmdir /s /q $(LIBDIR)\HTTP
	-if exist $(LIBDIR)\I18N rmdir /s /q $(LIBDIR)\I18N
d1400 1
a1402 1
	-if exist $(LIBDIR)\JSON rmdir /s /q $(LIBDIR)\JSON
d1405 1
d1410 1
d1412 1
a1415 1
	-if exist $(LIBDIR)\Perl rmdir /s /q $(LIBDIR)\Perl
d1420 1
a1421 1
	-if exist $(LIBDIR)\Search rmdir /s /q $(LIBDIR)\Search
d1424 1
a1424 1
	-if exist $(LIBDIR)\Term rmdir /s /q $(LIBDIR)\Term
a1425 1
	-if exist $(LIBDIR)\Text rmdir /s /q $(LIBDIR)\Text
d1430 1
a1430 3
	-if exist $(LIBDIR)\Unicode\Collate\Locale rmdir /s /q $(LIBDIR)\Unicode\Collate\Locale
	-if exist $(LIBDIR)\version rmdir /s /q $(LIBDIR)\version
	-if exist $(LIBDIR)\VMS rmdir /s /q $(LIBDIR)\VMS
a1431 1
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
d1433 10
a1442 10
	    perl5201delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
	    perlapi.pod perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldos.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmacos.pod perlmacosx.pod perlmodlib.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perlsynology.pod perltoc.pod \
	    perltru64.pod perltw.pod perluniprops.pod perlvos.pod \
	    perlwin32.pod
d1445 1
a1445 1
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep shasum corelist config_data zipdetails
d1454 1
a1454 1
	-cd .. && del /s *$(a) *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib ppport.h
a1457 1
	-del /s ..\utils\Makefile
a1504 1
	if exist $(CCDLLDIR)\libgcc_s_seh-1.dll $(XCOPY) $(CCDLLDIR)\libgcc_s_seh-1.dll ..\t\$(NULL)
a1507 1
	if exist $(CCDLLDIR)\libwinpthread-1.dll $(XCOPY) $(CCDLLDIR)\libwinpthread-1.dll ..\t\$(NULL)
d1570 1
@


1.1.1.16
log
@Import perl-5.20.2
@
text
@d46 1
a46 1
#INST_VER	*= \5.20.2
d1394 1
a1394 1
	copy ..\pod\perldelta.pod ..\pod\perl5202delta.pod
d1491 1
a1491 1
	    perl5202delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
@


