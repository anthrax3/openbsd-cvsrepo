head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.4
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	PERL_5_20_2:1.1.1.16
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.25
date	2017.02.05.00.34.36;	author afresh1;	state Exp;
branches;
next	1.24;
commitid	14g5t9TCF9ptuB8D;

1.24
date	2017.02.05.00.33.41;	author afresh1;	state Exp;
branches;
next	1.23;
commitid	7JLVNm1wwPgqSqTa;

1.23
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.22;
commitid	cxJ08BvJA9Pt2PTM;

1.22
date	2016.07.03.01.08.05;	author afresh1;	state Exp;
branches;
next	1.21;
commitid	GzHqjSTnBjdF7Wcw;

1.21
date	2015.04.25.19.30.23;	author afresh1;	state Exp;
branches;
next	1.20;
commitid	j9Lvbog4oJBg7dIS;

1.20
date	2015.04.25.19.26.23;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	3qGYFVvfrExB70FB;

1.19
date	2015.04.25.19.14.49;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	XRK22kO4se3v2i2I;

1.18
date	2014.11.17.21.03.19;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	KQNGgR8uwAxYXWj8;

1.17
date	2014.11.17.21.01.01;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	LnErp1MFKSuew5Fr;

1.16
date	2014.11.17.20.57.08;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	QP75iYx42Uo7mMxO;

1.15
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.25.20.41.00;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.24.15.07.10;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.29.17.36.21;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.28.19.23.14;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.15.21.30.42;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.10.38;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.21.33.11;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.51;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.39;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.34;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.58;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.50;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.33;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.11;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.04;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.26.14;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.13;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.37;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.48;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.45;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.18.28;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.58;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.19.04;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.48.42;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.09.44;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.59.12;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.53.21;	author afresh1;	state Exp;
branches;
next	1.1.1.16;
commitid	B31cAbBIXiCqnL97;

1.1.1.16
date	2015.04.25.19.10.51;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.25
log
@Apply pre-built unicore patch - perl-5.24.1
@
text
@#
# Makefile to build perl on Windows using Microsoft NMAKE.
# Supported compilers:
#	Microsoft Visual C++ 6.0 or later
#	Windows SDK 64-bit compiler and tools
#
# This is set up to build a perl.exe that runs off a shared library
# (perl524.dll).  Also makes individual DLLs for the XS extensions.
#

##
## Make sure you read README.win32 *before* you mess with anything here!
##

##
## Build configuration.  Edit the values below to suit your needs.
##

#
# Set these to wherever you want "nmake install" to put your
# newly built perl.
#
INST_DRV	= c:
INST_TOP	= $(INST_DRV)\perl

#
# Uncomment if you want to build a 32-bit Perl using a 32-bit compiler
# on a 64-bit version of Windows.
#
#WIN64		= undef

#
# Comment this out if you DON'T want your perl installation to be versioned.
# This means that the new installation will overwrite any files from the
# old installation at the same INST_TOP location.  Leaving it enabled is
# the safest route, as perl adds the extra version directory to all the
# locations it installs files to.  If you disable it, an alternative
# versioned installation can be obtained by setting INST_TOP above to a
# path that includes an arbitrary version string.
#
#INST_VER	= \5.24.1

#
# Comment this out if you DON'T want your perl installation to have
# architecture specific components.  This means that architecture-
# specific files will be installed along with the architecture-neutral
# files.  Leaving it enabled is safer and more flexible, in case you
# want to build multiple flavors of perl and install them together in
# the same location.  Commenting it out gives you a simpler
# installation that is easier to understand for beginners.
#
#INST_ARCH	= \$(ARCHNAME)

#
# Uncomment this if you want perl to run
# 	$Config{sitelibexp}\sitecustomize.pl
# before anything else.  This script can then be set up, for example,
# to add additional entries to @@INC.
#
#USE_SITECUST	= define

#
# uncomment to enable multiple interpreters.  This is needed for fork()
# emulation and for thread support, and is auto-enabled by USE_IMP_SYS
# and USE_ITHREADS below.
#
USE_MULTI	= define

#
# Interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  This needs (and
# will auto-enable) USE_MULTI above.
#
USE_ITHREADS	= define

#
# uncomment to enable the implicit "host" layer for all system calls
# made by perl.  This is also needed to get fork().  This needs (and
# will auto-enable) USE_MULTI above.
#
USE_IMP_SYS	= define

#
# Comment this out if you don't want to enable large file support for
# some reason.  Should normally only be changed to maintain compatibility
# with an older release of perl.
#
USE_LARGE_FILES	= define

#
# Uncomment this if you're building a 32-bit perl and want 64-bit integers.
# (If you're building a 64-bit perl then you will have 64-bit integers whether
# or not this is uncommented.)
# Note: This option is not supported in 32-bit MSVC60 builds.
#
#USE_64_BIT_INT	= define

#
# Uncomment this if you want to disable looking up values from
# HKEY_CURRENT_USER\Software\Perl and HKEY_LOCAL_MACHINE\Software\Perl in
# the Registry.
#
#USE_NO_REGISTRY = define

#
# uncomment exactly one of the following
#
# Visual C++ 6.0 (aka Visual C++ 98)
CCTYPE		= MSVC60
# Visual C++ .NET 2002/2003 (aka Visual C++ 7.0/7.1) (full version)
#CCTYPE		= MSVC70
# Visual C++ Toolkit 2003 (aka Visual C++ 7.1) (free command-line tools)
#CCTYPE		= MSVC70FREE
# Windows Server 2003 SP1 Platform SDK (April 2005)
#CCTYPE		= SDK2003SP1
# Visual C++ 2005 (aka Visual C++ 8.0) (full version)
#CCTYPE		= MSVC80
# Visual C++ 2005 Express Edition (aka Visual C++ 8.0) (free version)
#CCTYPE		= MSVC80FREE
# Visual C++ 2008 (aka Visual C++ 9.0) (full version)
#CCTYPE		= MSVC90
# Visual C++ 2008 Express Edition (aka Visual C++ 9.0) (free version)
#CCTYPE		= MSVC90FREE
# Visual C++ 2010 (aka Visual C++ 10.0) (full version)
#CCTYPE		= MSVC100
# Visual C++ 2010 Express Edition (aka Visual C++ 10.0) (free version)
#CCTYPE		= MSVC100FREE
# Visual C++ 2012 (aka Visual C++ 11.0) (full version)
#CCTYPE		= MSVC110
# Visual C++ 2012 Express Edition (aka Visual C++ 11.0) (free version)
#CCTYPE		= MSVC110FREE
# Visual C++ 2013 (aka Visual C++ 12.0) (full version)
#CCTYPE		= MSVC120
# Visual C++ 2013 Express Edition (aka Visual C++ 12.0) (free version)
#CCTYPE		= MSVC120FREE

#
# If you are using Intel C++ Compiler uncomment this
#
#__ICC		= define

#
# Uncomment this if you want to build everything in C++ mode
#
#USE_CPLUSPLUS	= define

#
# uncomment next line if you want debug version of perl (big/slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
# You can also set CFG = DebugSymbols for a slightly smaller/faster
# debug build without the special debugging code in perl which is
# enabled via -DDEBUGGING;
#
# or you can set CFG = DebugFull for an even fuller (bigger/slower)
# debug build using the debug version of the CRT, and enabling VC++
# debug features such as extra assertions and invalid parameter warnings
# in perl and CRT code via -D_DEBUG.  (Note that the invalid parameter
# handler does get triggered from time to time in this configuration,
# which causes warnings to be printed on STDERR, which in turn causes a
# few tests to fail.)
#
#CFG		= Debug

#
# uncomment to enable linking with setargv.obj under the Visual C
# compiler. Setting this options enables perl to expand wildcards in
# arguments, but it may be harder to use alternate methods like
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
#
#USE_SETARGV	= define

#
# set this if you wish to use perl's malloc
# WARNING: Turning this on/off WILL break binary compatibility with extensions
# you may have compiled with/without it.  Be prepared to recompile all
# extensions if you change the default.  Currently, this cannot be enabled
# if you ask for USE_IMP_SYS above.
#
#PERL_MALLOC	= define

#
# set this to enable debugging mstats
# This must be enabled to use the Devel::Peek::mstat() function.  This cannot
# be enabled without PERL_MALLOC as well.
#
#DEBUG_MSTATS	= define

#
# set this to additionally provide a statically linked perl-static.exe.
# Note that dynamic loading will not work with this perl, so you must
# include required modules statically using the STATIC_EXT or ALL_STATIC
# variables below. A static library perl524s.lib will also be created.
# Ordinary perl.exe is not affected by this option.
#
#BUILD_STATIC	= define

#
# in addition to BUILD_STATIC the option ALL_STATIC makes *every*
# extension get statically built
# This will result in a very large perl executable, but the main purpose
# is to have proper linking set so as to be able to create miscellaneous
# executables with different built-in extensions
#
#ALL_STATIC	= define

#
#
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
CCHOME		= $(MSVCDIR)
CCINCDIR	= $(CCHOME)\include
CCLIBDIR	= $(CCHOME)\lib

#
# Additional compiler flags can be specified here.
#
BUILDOPT	= $(BUILDOPTEXTRA)

#
# This should normally be disabled.  Enabling it will disable the File::Glob
# implementation of CORE::glob.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_EXTERNAL_GLOB

#
# Perl needs to read scripts in text mode so that the DATA filehandle
# works correctly with seek() and tell(), or around auto-flushes of
# all filehandles (e.g. by system(), backticks, fork(), etc).
#
# The current version on the ByteLoader module on CPAN however only
# works if scripts are read in binary mode.  But before you disable text
# mode script reading (and break some DATA filehandle functionality)
# please check first if an updated ByteLoader isn't available on CPAN.
#
BUILDOPT	= $(BUILDOPT) -DPERL_TEXTMODE_SCRIPTS

#
# specify semicolon-separated list of extra directories that modules will
# look for libraries (spaces in path names need not be quoted)
#
EXTRALIBDIRS	=

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#
#EMAIL		=

##
## Build configuration ends.
##

##################### CHANGE THESE ONLY IF YOU MUST #####################

!IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(PERL_MALLOC)" == ""
PERL_MALLOC	= undef
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(DEBUG_MSTATS)" == ""
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(DEBUG_MSTATS)" == "define"
BUILDOPT	= $(BUILDOPT) -DPERL_DEBUGGING_MSTATS
!ENDIF

!IF "$(USE_SITECUST)" == ""
USE_SITECUST	= undef
!ENDIF

!IF "$(USE_MULTI)" == ""
USE_MULTI	= undef
!ENDIF

!IF "$(USE_ITHREADS)" == ""
USE_ITHREADS	= undef
!ENDIF

!IF "$(USE_IMP_SYS)" == ""
USE_IMP_SYS	= undef
!ENDIF

!IF "$(USE_LARGE_FILES)" == ""
USE_LARGE_FILES	= undef
!ENDIF

!IF "$(USE_64_BIT_INT)" == ""
USE_64_BIT_INT	= undef
!ENDIF

!IF "$(USE_NO_REGISTRY)" == ""
USE_NO_REGISTRY	= undef
!ENDIF

!IF "$(USE_IMP_SYS)$(USE_MULTI)" == "defineundef"
USE_MULTI	= define
!ENDIF

!IF "$(USE_ITHREADS)$(USE_MULTI)" == "defineundef"
USE_MULTI	= define
!ENDIF

!IF "$(USE_SITECUST)" == "define"
BUILDOPT	= $(BUILDOPT) -DUSE_SITECUSTOMIZE
!ENDIF

!IF "$(USE_MULTI)" != "undef"
BUILDOPT	= $(BUILDOPT) -DPERL_IMPLICIT_CONTEXT
!ENDIF

!IF "$(USE_IMP_SYS)" != "undef"
BUILDOPT	= $(BUILDOPT) -DPERL_IMPLICIT_SYS
!ENDIF

!IF "$(USE_NO_REGISTRY)" != "undef"
BUILDOPT	= $(BUILDOPT) -DWIN32_NO_REGISTRY
!ENDIF

!IF "$(PROCESSOR_ARCHITECTURE)" == ""
PROCESSOR_ARCHITECTURE	= x86
!ENDIF

!IF "$(WIN64)" == ""
# When we are running from a 32bit cmd.exe on AMD64 then
# PROCESSOR_ARCHITECTURE is set to x86 and PROCESSOR_ARCHITEW6432
# is set to AMD64
!IF "$(PROCESSOR_ARCHITEW6432)" != ""
PROCESSOR_ARCHITECTURE	= $(PROCESSOR_ARCHITEW6432)
WIN64			= define
!ELSE
!IF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITECTURE)" == "IA64"
WIN64			= define
!ELSE
WIN64			= undef
!ENDIF
!ENDIF
!ENDIF

!IF "$(WIN64)" == "define"
USE_64_BIT_INT	= define
!ENDIF

# Treat 64-bit MSVC60 (doesn't really exist) as SDK2003SP1 because
# both link against MSVCRT.dll (which is part of Windows itself) and
# not against a compiler specific versioned runtime.
!IF "$(WIN64)" == "define" && "$(CCTYPE)" == "MSVC60"
CCTYPE		= SDK2003SP1
!ENDIF

# Disable the 64-bit-int option for (32-bit) MSVC60 builds since that compiler
# does not support it.
!IF "$(CCTYPE)" == "MSVC60"
!UNDEF USE_64_BIT_INT
USE_64_BIT_INT	= undef
!ENDIF

# Most relevant compiler-specific options fall into two groups:
# either pre-MSVC80 or MSVC80 onwards, so define a macro for this.
!IF "$(CCTYPE)" == "MSVC60" || \
    "$(CCTYPE)" == "MSVC70" || "$(CCTYPE)" == "MSVC70FREE"
PREMSVC80	= define
!ELSE
PREMSVC80	= undef
!ENDIF

ARCHITECTURE = $(PROCESSOR_ARCHITECTURE)
!IF "$(ARCHITECTURE)" == "AMD64"
ARCHITECTURE	= x64
!ENDIF
!IF "$(ARCHITECTURE)" == "IA64"
ARCHITECTURE	= ia64
!ENDIF

!IF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-multi
!ELSE
ARCHNAME	= MSWin32-$(ARCHITECTURE)-perlio
!ENDIF

!IF "$(USE_ITHREADS)" == "define"
ARCHNAME	= $(ARCHNAME)-thread
!ENDIF

!IF "$(WIN64)" != "define"
!IF "$(USE_64_BIT_INT)" == "define"
ARCHNAME	= $(ARCHNAME)-64int
!ENDIF
!ENDIF

# All but the free version of VC++ 7.1 can load DLLs on demand.  Makes the test
# suite run in about 10% less time.
!IF "$(CCTYPE)" != "MSVC70FREE"
# If no registry, advapi32 is only used for Perl_pp_getlogin/getlogin/GetUserNameA
# which is rare to execute
!IF "$(USE_NO_REGISTRY)" != "undef"
DELAYLOAD	= -DELAYLOAD:ws2_32.dll -DELAYLOAD:advapi32.dll delayimp.lib
MINIDELAYLOAD	=
!ELSE
DELAYLOAD	= -DELAYLOAD:ws2_32.dll delayimp.lib
#miniperl never does any registry lookups
MINIDELAYLOAD	= -DELAYLOAD:advapi32.dll
!ENDIF
!ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.0 and 9.0) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest

ARCHDIR		= ..\lib\$(ARCHNAME)
COREDIR		= ..\lib\CORE
AUTODIR		= ..\lib\auto
LIBDIR		= ..\lib
EXTDIR		= ..\ext
DISTDIR		= ..\dist
CPANDIR		= ..\cpan
PODDIR		= ..\pod
HTMLDIR		= .\html

#
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_BIN	= $(INST_SCRIPT)$(INST_ARCH)
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_ARCHLIB	= $(INST_LIB)$(INST_ARCH)
INST_COREDIR	= $(INST_ARCHLIB)\CORE
INST_HTML	= $(INST_TOP)$(INST_VER)\html

#
# Programs to compile, build .lib files and link
#

!IF "$(__ICC)" != "define"
CC		= cl
LINK32		= link
!ELSE
CC		= icl
LINK32		= xilink
!ENDIF
LIB32		= $(LINK32) -lib
RSC		= rc

#
# Options
#

INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT
LOCDEFS		= -DPERLDLL -DPERL_CORE
CXX_FLAG	= -TP -EHsc

LIBC		= msvcrt.lib

!IF  "$(CFG)" == "Debug"
OPTIMIZE	= -Od -MD -Zi -DDEBUGGING
LINK_DBG	= -debug
!ELSE
!IF  "$(CFG)" == "DebugSymbols"
OPTIMIZE	= -Od -MD -Zi
LINK_DBG	= -debug
!ELSE
!IF  "$(CFG)" == "DebugFull"
LIBC		= msvcrtd.lib
OPTIMIZE	= -Od -MDd -Zi -D_DEBUG -DDEBUGGING
LINK_DBG	= -debug
!ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86 and x64
OPTIMIZE	= -O1 -MD -Zi -DNDEBUG
# we enable debug symbols in release builds also
LINK_DBG	= -debug -opt:ref,icf
# you may want to enable this if you want COFF symbols in the executables
# in addition to the PDB symbols.  The default Dr. Watson that ships with
# Windows can use the the former but not latter.  The free WinDbg can be
# installed to get better stack traces from just the PDB symbols, so we
# avoid the bloat of COFF symbols by default.
#LINK_DBG	= $(LINK_DBG) -debugtype:both
!  IF "$(CCTYPE)" != "MSVC60"
# enable Whole Program Optimizations (WPO) and Link Time Code Generation (LTCG)
OPTIMIZE	= $(OPTIMIZE) -GL
LINK_DBG	= $(LINK_DBG) -ltcg
LIB_FLAGS	= -ltcg
!  ENDIF
!ENDIF
!ENDIF
!ENDIF

!IF "$(WIN64)" == "define"
DEFINES		= $(DEFINES) -DWIN64 -DCONSERVATIVE
OPTIMIZE	= $(OPTIMIZE) -fp:precise
!ENDIF

# For now, silence warnings from VC++ 8.0 onwards about "unsafe" CRT functions
# and POSIX CRT function names being deprecated.
!IF "$(PREMSVC80)" == "undef"
DEFINES		= $(DEFINES) -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
!ENDIF

# In VS 2005 (VC++ 8.0) Microsoft changes time_t from 32-bit to
# 64-bit, even in 32-bit mode.  It also provides the _USE_32BIT_TIME_T
# preprocessor option to revert back to the old functionality for
# backward compatibility.  We define this symbol here for older 32-bit
# compilers only (which aren't using it at all) for the sole purpose
# of getting it into $Config{ccflags}.  That way if someone builds
# Perl itself with e.g. VC6 but later installs an XS module using VC8
# the time_t types will still be compatible.
!IF "$(WIN64)" == "undef"
!  IF "$(PREMSVC80)" == "define"
BUILDOPT	= $(BUILDOPT) -D_USE_32BIT_TIME_T
!  ENDIF
!ENDIF

LIBBASEFILES	= \
		oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib comctl32.lib

# Avoid __intel_new_proc_init link error for libircmt.
# libmmd is /MD equivelent, other variants exist.
# libmmd is Intel C's math addon funcs to MS CRT, contains long doubles, C99,
# and optimized C89 funcs
!IF "$(__ICC)" == "define"
LIBBASEFILES	= $(LIBBASEFILES) libircmt.lib libmmd.lib
!ENDIF

# The 64 bit Windows Server 2003 SP1 SDK compilers link against MSVCRT.dll, which
# doesn't include the buffer overrun verification code used by the /GS switch.
# Since the code links against libraries that are compiled with /GS, this
# "security cookie verification" code must be included via bufferoverflow.lib.
!IF "$(WIN64)" == "define" && "$(CCTYPE)" == "SDK2003SP1"
LIBBASEFILES    = $(LIBBASEFILES) bufferoverflowU.lib
!ENDIF

LIBFILES	= $(LIBBASEFILES) $(LIBC)

#EXTRACFLAGS	= -nologo -GF -W4 -wd4127 -wd4706
EXTRACFLAGS	= -nologo -GF -W3
!IF "$(__ICC)" == "define"
EXTRACFLAGS	= $(EXTRACFLAGS) -Qstd=c99
!ENDIF
!IF "$(USE_CPLUSPLUS)" == "define"
EXTRACFLAGS	= $(EXTRACFLAGS) $(CXX_FLAG)
!ENDIF
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) \
		-libpath:"$(INST_COREDIR)" \
		-machine:$(PROCESSOR_ARCHITECTURE)
LIB_FLAGS	= $(LIB_FLAGS) -nologo
OBJOUT_FLAG	= -Fo
EXEOUT_FLAG	= -Fe

CFLAGS_O	= $(CFLAGS) $(BUILDOPT)

!IF "$(PREMSVC80)" == "undef"
PRIV_LINK_FLAGS	= $(PRIV_LINK_FLAGS) "/manifestdependency:type='Win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'"
!ELSE
RSC_FLAGS	= -DINCLUDE_MANIFEST
!ENDIF

# For XP support in >= VS 2013 (VC++ 12.0), subsystem is always in Config.pm
# LINK_FLAGS else subsystem is only needed for EXE building, not XS DLL building
# Console vs GUI makes no difference for DLLs, so use default for cleaner
# building cmd lines
!IF "$(CCTYPE)" == "MSVC120" || "$(CCTYPE)" == "MSVC120FREE" \
    || "$(CCTYPE)" == "MSVC140" || "$(CCTYPE)" == "MSVC140FREE"
!  IF "$(WIN64)" == "define"
LINK_FLAGS	= $(LINK_FLAGS) -subsystem:console,"5.02"
!  ELSE
LINK_FLAGS	= $(LINK_FLAGS) -subsystem:console,"5.01"
!  ENDIF

!ELSE
PRIV_LINK_FLAGS	= $(PRIV_LINK_FLAGS) -subsystem:console
!ENDIF

BLINK_FLAGS	= $(PRIV_LINK_FLAGS) $(LINK_FLAGS)

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

o = .obj

#
# Rules
#

#clear the list, we dont support .cxx .bas .cbl .for .pas .f .f90
# .asm .cpp are not currently used but they are included for completeness
.SUFFIXES :
.SUFFIXES : .c $(o) .cpp .asm .dll .lib .exe .rc .res

.c$(o):
	$(CC) -c -I$(<D) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $<

.c.i:
	$(CC) -c -I$(<D) $(CFLAGS_O) -P $(OBJOUT_FLAG)$@@ $<

.y.c:
	$(NOOP)

$(o).dll:
	$(LINK32) -dll -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(BLINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
	$(EMBED_DLL_MANI)

.rc.res:
	$(RSC) -i.. $(RSC_FLAGS) $<

#
# various targets

# makedef.pl must be updated if this changes, and this should normally
# only change when there is an incompatible revision of the public API.
PERLIMPLIB	= ..\perl524.lib
PERLSTATICLIB	= ..\perl524s.lib
PERLDLL		= ..\perl524.dll

MINIPERL	= ..\miniperl.exe
MINIDIR		= .\mini
PERLEXE		= ..\perl.exe
WPERLEXE	= ..\wperl.exe
PERLEXESTATIC	= ..\perl-static.exe
GLOBEXE		= ..\perlglob.exe
CONFIGPM	= ..\lib\Config.pm ..\lib\Config_heavy.pl
GENUUDMAP	= ..\generate_uudmap.exe
!IF "$(BUILD_STATIC)" == "define" || "$(ALL_STATIC)" == "define"
PERLSTATIC	= static
!ELSE
PERLSTATIC	= 
!ENDIF

# Unicode data files generated by mktables
FIRSTUNIFILE     = ..\lib\unicore\Decomposition.pl
UNIDATAFILES	 = ..\lib\unicore\Decomposition.pl \
		   ..\lib\unicore\CombiningClass.pl ..\lib\unicore\Name.pl \
		   ..\lib\unicore\Heavy.pl ..\lib\unicore\mktables.lst     \
		   ..\lib\unicore\UCD.pl ..\lib\unicore\Name.pm            \
		   ..\lib\unicore\TestProp.pl

# Directories of Unicode data files generated by mktables
UNIDATADIR1	= ..\lib\unicore\To
UNIDATADIR2	= ..\lib\unicore\lib

PERLEXE_MANIFEST= .\perlexe.manifest
PERLEXE_ICO	= .\perlexe.ico
PERLEXE_RES	= .\perlexe.res
PERLDLL_RES	=

# Nominate a target which causes extensions to be re-built
# This used to be $(PERLEXE), but at worst it is the .dll that they depend
# on and really only the interface - i.e. the .def file used to export symbols
# from the .dll
PERLDEP		= perldll.def

PL2BAT		= bin\pl2bat.pl
GLOBBAT		= bin\perlglob.bat

UTILS		=			\
		..\utils\h2ph		\
		..\utils\splain		\
		..\utils\perlbug	\
		..\utils\pl2pm 		\
		..\utils\c2ph		\
		..\utils\pstruct	\
		..\utils\h2xs		\
		..\utils\perldoc	\
		..\utils\perlivp	\
		..\utils\libnetcfg	\
		..\utils\enc2xs		\
		..\utils\encguess		\
		..\utils\piconv		\
		..\utils\corelist	\
		..\utils\cpan		\
		..\utils\xsubpp		\
		..\utils\prove		\
		..\utils\ptar		\
		..\utils\ptardiff	\
		..\utils\ptargrep	\
		..\utils\zipdetails	\
		..\utils\shasum		\
		..\utils\instmodsh	\
		..\utils\json_pp	\
		..\utils\pod2html	\
		bin\exetype.pl		\
		bin\runperl.pl		\
		bin\pl2bat.pl		\
		bin\perlglob.pl		\
		bin\search.pl

MAKE		= nmake -nologo
MAKE_BARE	= nmake

CFGSH_TMPL	= config.vc
CFGH_TMPL	= config_H.vc

XCOPY		= xcopy /f /r /i /d /y
RCOPY		= xcopy /f /r /i /e /d /y
NOOP		= @@rem
NULL		=

DEL		= del

MICROCORE_SRC	=		\
		..\av.c		\
		..\caretx.c	\
		..\deb.c	\
		..\doio.c	\
		..\doop.c	\
		..\dquote.c	\
		..\dump.c	\
		..\globals.c	\
		..\gv.c		\
		..\mro_core.c	\
		..\hv.c		\
		..\locale.c	\
		..\keywords.c	\
		..\mathoms.c    \
		..\mg.c		\
		..\numeric.c	\
		..\op.c		\
		..\pad.c	\
		..\perl.c	\
		..\perlapi.c	\
		..\perly.c	\
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_hot.c	\
		..\pp_pack.c	\
		..\pp_sort.c	\
		..\pp_sys.c	\
		..\reentr.c	\
		..\regcomp.c	\
		..\regexec.c	\
		..\run.c	\
		..\scope.c	\
		..\sv.c		\
		..\taint.c	\
		..\time64.c	\
		..\toke.c	\
		..\universal.c	\
		..\utf8.c	\
		..\util.c

EXTRACORE_SRC	= $(EXTRACORE_SRC) perllib.c

!IF "$(PERL_MALLOC)" == "define"
EXTRACORE_SRC	= $(EXTRACORE_SRC) ..\malloc.c
!ENDIF

EXTRACORE_SRC	= $(EXTRACORE_SRC) ..\perlio.c

WIN32_SRC	=		\
		.\win32.c	\
		.\win32io.c	\
		.\win32sck.c	\
		.\win32thread.c	\
		.\fcrypt.c

CORE_NOCFG_H	=		\
		..\av.h		\
		..\cop.h	\
		..\cv.h		\
		..\dosish.h	\
		..\embed.h	\
		..\form.h	\
		..\gv.h		\
		..\handy.h	\
		..\hv.h		\
		..\hv_func.h	\
		..\iperlsys.h	\
		..\mg.h		\
		..\nostdio.h	\
		..\op.h		\
		..\opcode.h	\
		..\perl.h	\
		..\perlapi.h	\
		..\perlsdio.h	\
		..\perly.h	\
		..\pp.h		\
		..\proto.h	\
		..\regcomp.h	\
		..\regexp.h	\
		..\scope.h	\
		..\sv.h		\
		..\thread.h	\
		..\unixish.h	\
		..\utf8.h	\
		..\util.h	\
		..\warnings.h	\
		..\XSUB.h	\
		..\EXTERN.h	\
		..\perlvars.h	\
		..\intrpvar.h	\
		.\include\dirent.h	\
		.\include\netdb.h	\
		.\include\sys\errno2.h	\
		.\include\sys\socket.h	\
		.\win32.h

CORE_H		= $(CORE_NOCFG_H) .\config.h ..\git_version.h

UUDMAP_H	= ..\uudmap.h
BITCOUNT_H	= ..\bitcount.h
MG_DATA_H	= ..\mg_data.h
GENERATED_HEADERS = $(UUDMAP_H) $(BITCOUNT_H) $(MG_DATA_H)

MICROCORE_OBJ	= $(MICROCORE_SRC:.c=.obj)
CORE_OBJ	= $(MICROCORE_OBJ) $(EXTRACORE_SRC:.c=.obj)
WIN32_OBJ	= $(WIN32_SRC:.c=.obj)
MINICORE_OBJ	= $(MICROCORE_OBJ:..\=.\mini\)	\
		  $(MINIDIR)\miniperlmain$(o)	\
		  $(MINIDIR)\perlio$(o)
MINIWIN32_OBJ	= $(WIN32_OBJ:.\=.\mini\)
MINI_OBJ	= $(MINICORE_OBJ) $(MINIWIN32_OBJ)
DLL_OBJ		= $(DYNALOADER)
GENUUDMAP_OBJ	= $(GENUUDMAP:.exe=.obj)

PERLDLL_OBJ	= $(CORE_OBJ)
PERLEXE_OBJ	= perlmain$(o)
PERLEXEST_OBJ	= perlmainst$(o)

PERLDLL_OBJ	= $(PERLDLL_OBJ) $(WIN32_OBJ) $(DLL_OBJ)

!IF "$(USE_SETARGV)" != ""
SETARGV_OBJ	= setargv$(o)
!ENDIF

!IF "$(ALL_STATIC)" == "define"
# some exclusions, unfortunately, until fixed:
#  - MakeMaker isn't capable enough for SDBM_File (small bug)
STATIC_EXT	= * !SDBM_File
!ELSE
# specify static extensions here, for example:
# (be sure to include Win32CORE to load Win32 on demand)
#STATIC_EXT	= Win32CORE Cwd Compress/Raw/Zlib
STATIC_EXT	= Win32CORE
!ENDIF

DYNALOADER	= ..\DynaLoader$(o)

CFG_VARS	=					\
		"INST_TOP=$(INST_TOP)"			\
		"INST_VER=$(INST_VER)"			\
		"INST_ARCH=$(INST_ARCH)"		\
		"archname=$(ARCHNAME)"			\
		"cc=$(CC)"				\
		"ld=$(LINK32)"				\
		"ccflags=$(EXTRACFLAGS) $(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
		"usecplusplus=$(USE_CPLUSPLUS)"		\
		"cf_email=$(EMAIL)"	 		\
		"d_mymalloc=$(PERL_MALLOC)"		\
		"libs=$(LIBFILES)"			\
		"incpath=$(CCINCDIR:"=\")"		\
		"libperl=$(PERLIMPLIB:..\=)"		\
		"libpth=$(CCLIBDIR:"=\");$(EXTRALIBDIRS:"=\")"	\
		"libc=$(LIBC)"				\
		"make=$(MAKE_BARE)"				\
		"static_ext=$(STATIC_EXT)"		\
		"usethreads=$(USE_ITHREADS)"		\
		"useithreads=$(USE_ITHREADS)"		\
		"usemultiplicity=$(USE_MULTI)"		\
		"use64bitint=$(USE_64_BIT_INT)"		\
		"uselongdouble=undef"			\
		"uselargefiles=$(USE_LARGE_FILES)"	\
		"usesitecustomize=$(USE_SITECUST)"	\
		"LINK_FLAGS=$(LINK_FLAGS:"=\")"		\
		"optimize=$(OPTIMIZE:"=\")"		\
		"WIN64=$(WIN64)"

#
# Top targets
#

all : .\config.h ..\git_version.h $(GLOBEXE) $(CONFIGPM) \
	$(UNIDATAFILES) MakePPPort $(PERLEXE) Extensions_nonxs Extensions $(PERLSTATIC)
	@@echo	Everything is up to date. '$(MAKE_BARE) test' to run test suite.

regnodes : ..\regnodes.h

..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h

..\regexec$(o) : ..\regnodes.h ..\regcharclass.h

reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(CONFIGPM) \
	$(UNIDATAFILES) $(PERLEXE) Extensions_reonly
	@@echo	Perl and 're' are up to date.

static: $(PERLEXESTATIC)

#------------------------------------------------------------

$(GLOBEXE) : perlglob$(o)
	$(LINK32) $(BLINK_FLAGS) $(LIBFILES) -out:$@@ \
	    perlglob$(o) setargv$(o)
	$(EMBED_EXE_MANI)

perlglob$(o)  : perlglob.c

#
# Copy the template config.h and set configurables at the end of it
# as per the options chosen and compiler used.
# Note: This config.h is only used to build miniperl.exe anyway, but
# it's as well to have its options correct to be sure that it builds
# and so that it's "-V" options are correct for use by makedef.pl. The
# real config.h used to build perl.exe is generated from the top-level
# config_h.SH by config_h.PL (run by miniperl.exe).
#
.\config.h : $(CFGH_TMPL)
	-del /f config.h
	copy $(CFGH_TMPL) config.h
	@@echo.>>$@@
	@@echo #ifndef _config_h_footer_>>$@@
	@@echo #define _config_h_footer_>>$@@
	@@echo #undef Off_t>>$@@
	@@echo #undef LSEEKSIZE>>$@@
	@@echo #undef Off_t_size>>$@@
	@@echo #undef PTRSIZE>>$@@
	@@echo #undef SSize_t>>$@@
	@@echo #undef HAS_ATOLL>>$@@
	@@echo #undef HAS_STRTOLL>>$@@
	@@echo #undef HAS_STRTOULL>>$@@
	@@echo #undef IVTYPE>>$@@
	@@echo #undef UVTYPE>>$@@
	@@echo #undef IVSIZE>>$@@
	@@echo #undef UVSIZE>>$@@
	@@echo #undef NV_PRESERVES_UV>>$@@
	@@echo #undef NV_PRESERVES_UV_BITS>>$@@
	@@echo #undef IVdf>>$@@
	@@echo #undef UVuf>>$@@
	@@echo #undef UVof>>$@@
	@@echo #undef UVxf>>$@@
	@@echo #undef UVXf>>$@@
	@@echo #undef USE_64_BIT_INT>>$@@
	@@echo #undef Size_t_size>>$@@
	@@echo #undef USE_CPLUSPLUS>>$@@
!IF "$(USE_LARGE_FILES)"=="define"
	@@echo #define Off_t __int64>>$@@
	@@echo #define LSEEKSIZE ^8>>$@@
	@@echo #define Off_t_size ^8>>$@@
!ELSE
	@@echo #define Off_t long>>$@@
	@@echo #define LSEEKSIZE ^4>>$@@
	@@echo #define Off_t_size ^4>>$@@
!ENDIF
!IF "$(WIN64)"=="define"
	@@echo #define PTRSIZE ^8>>$@@
	@@echo #define SSize_t __int64>>$@@
	@@echo #define HAS_ATOLL>>$@@
	@@echo #define HAS_STRTOLL>>$@@
	@@echo #define HAS_STRTOULL>>$@@
	@@echo #define Size_t_size ^8>>$@@
!ELSE
	@@echo #define PTRSIZE ^4>>$@@
	@@echo #define SSize_t int>>$@@
	@@echo #undef HAS_ATOLL>>$@@
	@@echo #undef HAS_STRTOLL>>$@@
	@@echo #undef HAS_STRTOULL>>$@@
	@@echo #define Size_t_size ^4>>$@@
!ENDIF
!IF "$(USE_64_BIT_INT)"=="define"
	@@echo #define IVTYPE __int64>>$@@
	@@echo #define UVTYPE unsigned __int64>>$@@
	@@echo #define IVSIZE ^8>>$@@
	@@echo #define UVSIZE ^8>>$@@
	@@echo #undef NV_PRESERVES_UV>>$@@
	@@echo #define NV_PRESERVES_UV_BITS 53>>$@@
	@@echo #define IVdf "I64d">>$@@
	@@echo #define UVuf "I64u">>$@@
	@@echo #define UVof "I64o">>$@@
	@@echo #define UVxf "I64x">>$@@
	@@echo #define UVXf "I64X">>$@@
	@@echo #define USE_64_BIT_INT>>$@@
!ELSE
	@@echo #define IVTYPE long>>$@@
	@@echo #define UVTYPE unsigned long>>$@@
	@@echo #define IVSIZE ^4>>$@@
	@@echo #define UVSIZE ^4>>$@@
	@@echo #define NV_PRESERVES_UV>>$@@
	@@echo #define NV_PRESERVES_UV_BITS 32>>$@@
	@@echo #define IVdf "ld">>$@@
	@@echo #define UVuf "lu">>$@@
	@@echo #define UVof "lo">>$@@
	@@echo #define UVxf "lx">>$@@
	@@echo #define UVXf "lX">>$@@
	@@echo #undef USE_64_BIT_INT>>$@@
!ENDIF
!IF "$(USE_CPLUSPLUS)"=="define"
	@@echo #define USE_CPLUSPLUS>>$@@
!ELSE
	@@echo #undef USE_CPLUSPLUS>>$@@
!ENDIF
	@@echo #endif>>$@@

..\git_version.h : $(MINIPERL) ..\make_patchnum.pl
	cd .. && miniperl -Ilib make_patchnum.pl && cd win32

# make sure that we recompile perl.c if the git version changes
..\perl$(o) : ..\git_version.h

..\config.sh : $(CFGSH_TMPL) config_sh.PL FindExt.pm $(MINIPERL)
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh

# This target is for when changes to the main config.sh happen.
# Edit config.vc, then make perl in a minimal configuration (i.e. with MULTI,
# ITHREADS, IMP_SYS and LARGE_FILES off), then make this target
# to regenerate config_H.vc.
regen_config_h:
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh
	$(MINIPERL) -I..\lib ..\configpm --chdir=..
	-del /f $(CFGH_TMPL)
	-$(MINIPERL) -I..\lib config_h.PL
	rename config.h $(CFGH_TMPL)

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL
	$(MINIPERL) -I..\lib ..\configpm --chdir=..
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(XCOPY) *.h $(COREDIR)\*.*
	$(RCOPY) include $(COREDIR)\*.*
	-$(MINIPERL) -I..\lib config_h.PL
	if errorlevel 1 $(MAKE) /$(MAKEFLAGS) $(CONFIGPM)

# See the comment in Makefile.SH explaining this seemingly cranky ordering
$(MINIPERL) : ..\lib\buildcustomize.pl 

..\lib\buildcustomize.pl : $(MINIDIR) $(MINI_OBJ) ..\write_buildcustomize.pl
	$(LINK32) -out:$(MINIPERL) @@<<
	$(BLINK_FLAGS) $(DELAYLOAD) $(MINIDELAYLOAD) $(LIBFILES) $(MINI_OBJ)
<<
	$(EMBED_EXE_MANI:..\lib\buildcustomize.pl=..\miniperl.exe)
	$(MINIPERL) -I..\lib -f ..\write_buildcustomize.pl ..

$(MINIDIR) :
	if not exist "$(MINIDIR)" mkdir "$(MINIDIR)"

$(MINICORE_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*F).c

$(MINIWIN32_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ $(*F).c

# -DPERL_IMPLICIT_SYS needs C++ for perllib.c
# This is the only file that depends on perlhost.h, vmem.h, and vdir.h
!IF "$(USE_IMP_SYS)" == "define"
perllib$(o)	: perllib.c .\perlhost.h .\vdir.h .\vmem.h
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
!ENDIF

# 1. we don't want to rebuild miniperl.exe when config.h changes
# 2. we don't want to rebuild miniperl.exe with non-default config.h
# 3. we can't have miniperl.exe depend on git_version.h, as miniperl creates it
$(MINI_OBJ)	: $(CORE_NOCFG_H)

$(WIN32_OBJ)	: $(CORE_H)
$(CORE_OBJ)	: $(CORE_H)
$(DLL_OBJ)	: $(CORE_H)

perldll.def : $(MINIPERL) $(CONFIGPM) ..\embed.fnc ..\makedef.pl create_perllibst_h.pl
	$(MINIPERL) -I..\lib create_perllibst_h.pl
	$(MINIPERL) -I..\lib -w ..\makedef.pl PLATFORM=win32 $(OPTIMIZE) $(DEFINES) $(BUILDOPT) \
	    CCTYPE=$(CCTYPE) TARG_DIR=..\ > perldll.def

$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
	$(LINK32) -dll -def:perldll.def -base:0x28000000 -out:$@@ @@Extensions_static @@<<
		$(BLINK_FLAGS) $(DELAYLOAD) $(LIBFILES) $(PERLDLL_OBJ) $(PERLDLL_RES)
<<
	$(EMBED_DLL_MANI)
	$(XCOPY) $(PERLIMPLIB) $(COREDIR)

$(PERLSTATICLIB): Extensions_static
	$(LIB32) $(LIB_FLAGS) -out:$@@ @@Extensions_static @@<<
		$(PERLDLL_OBJ)
<<
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)

$(PERLEXE_RES): perlexe.rc $(PERLEXE_MANIFEST) $(PERLEXE_ICO)

$(MINIDIR)\globals$(o) : $(GENERATED_HEADERS)

$(UUDMAP_H) $(MG_DATA_H) : $(BITCOUNT_H)

$(BITCOUNT_H) : $(GENUUDMAP)
	$(GENUUDMAP) $(GENERATED_HEADERS)

$(GENUUDMAP_OBJ) : ..\mg_raw.h

$(GENUUDMAP) : $(GENUUDMAP_OBJ)
	$(LINK32) -out:$@@ @@<<
		$(BLINK_FLAGS) $(LIBFILES) $(GENUUDMAP_OBJ)
<<
	$(EMBED_EXE_MANI)

perlmain.c : runperl.c
	copy runperl.c perlmain.c

perlmain$(o) : perlmain.c
	$(CC) $(CFLAGS_O:-DPERLDLL=-UPERLDLL) $(OBJOUT_FLAG)$@@ -c perlmain.c

perlmainst.c : runperl.c
	copy runperl.c perlmainst.c

perlmainst$(o) : perlmainst.c
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ -c perlmainst.c

$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES)
	$(LINK32) -out:$@@ $(BLINK_FLAGS) \
	    $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB) $(LIBFILES) $(SETARGV_OBJ)
	$(EMBED_EXE_MANI)
	copy $(PERLEXE) $(WPERLEXE)
	$(MINIPERL) -I..\lib bin\exetype.pl $(WPERLEXE) WINDOWS

$(PERLEXESTATIC): $(PERLSTATICLIB) $(CONFIGPM) $(PERLEXEST_OBJ) $(PERLEXE_RES)
	$(LINK32) -out:$@@ $(BLINK_FLAGS) \
	    $(PERLEXEST_OBJ) $(PERLEXE_RES) $(PERLSTATICLIB) $(LIBFILES) $(SETARGV_OBJ)
	$(EMBED_EXE_MANI)

MakePPPort: $(MINIPERL) $(CONFIGPM) Extensions_nonxs
	$(MINIPERL) -I..\lib ..\mkppport

#-------------------------------------------------------------------------------
# There's no direct way to mark a dependency on
# DynaLoader.pm, so this will have to do
Extensions: ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic

Extensions_reonly: ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic +re

Extensions_static : ..\make_ext.pl ..\lib\buildcustomize.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --static
	$(MINIPERL) -I..\lib list_static_libs.pl > Extensions_static

Extensions_nonxs: ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) ..\pod\perlfunc.pod
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --nonxs

$(DYNALOADER) : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynaloader

Extensions_clean: 
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=clean

Extensions_realclean: 
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=realclean

#-------------------------------------------------------------------------------

doc: $(PERLEXE) ..\pod\perltoc.pod
	$(PERLEXE) ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
	    --podpath=pod:lib:utils --htmlroot="file://$(INST_HTML::=|)" \
	    --recurse

..\utils\Makefile: $(CONFIGPM) ..\utils\Makefile.PL
	$(MINIPERL) -I..\lib ..\utils\Makefile.PL ..

# Note that this next section is parsed (and regenerated) by pod/buildtoc
# so please check that script before making structural changes here

utils: $(PERLEXE) ..\utils\Makefile
	cd ..\utils
	$(MAKE) PERL=$(MINIPERL)
	cd ..\pod
	copy ..\README.aix      ..\pod\perlaix.pod
	copy ..\README.amiga    ..\pod\perlamiga.pod
	copy ..\README.android  ..\pod\perlandroid.pod
	copy ..\README.bs2000   ..\pod\perlbs2000.pod
	copy ..\README.ce       ..\pod\perlce.pod
	copy ..\README.cn       ..\pod\perlcn.pod
	copy ..\README.cygwin   ..\pod\perlcygwin.pod
	copy ..\README.dos      ..\pod\perldos.pod
	copy ..\README.freebsd  ..\pod\perlfreebsd.pod
	copy ..\README.haiku    ..\pod\perlhaiku.pod
	copy ..\README.hpux     ..\pod\perlhpux.pod
	copy ..\README.hurd     ..\pod\perlhurd.pod
	copy ..\README.irix     ..\pod\perlirix.pod
	copy ..\README.jp       ..\pod\perljp.pod
	copy ..\README.ko       ..\pod\perlko.pod
	copy ..\README.linux    ..\pod\perllinux.pod
	copy ..\README.macos    ..\pod\perlmacos.pod
	copy ..\README.macosx   ..\pod\perlmacosx.pod
	copy ..\README.netware  ..\pod\perlnetware.pod
	copy ..\README.openbsd  ..\pod\perlopenbsd.pod
	copy ..\README.os2      ..\pod\perlos2.pod
	copy ..\README.os390    ..\pod\perlos390.pod
	copy ..\README.os400    ..\pod\perlos400.pod
	copy ..\README.plan9    ..\pod\perlplan9.pod
	copy ..\README.qnx      ..\pod\perlqnx.pod
	copy ..\README.riscos   ..\pod\perlriscos.pod
	copy ..\README.solaris  ..\pod\perlsolaris.pod
	copy ..\README.symbian  ..\pod\perlsymbian.pod
	copy ..\README.synology ..\pod\perlsynology.pod
	copy ..\README.tru64    ..\pod\perltru64.pod
	copy ..\README.tw       ..\pod\perltw.pod
	copy ..\README.vos      ..\pod\perlvos.pod
	copy ..\README.win32    ..\pod\perlwin32.pod
	copy ..\pod\perldelta.pod ..\pod\perl5241delta.pod
	cd ..\win32
	$(PERLEXE) $(PL2BAT) $(UTILS)
	$(MINIPERL) -I..\lib ..\autodoc.pl ..
	$(MINIPERL) -I..\lib ..\pod\perlmodlib.PL -q ..

..\pod\perltoc.pod: $(PERLEXE) Extensions Extensions_nonxs
	$(PERLEXE) -f ..\pod\buildtoc -q

# Note that the pod cleanup in this next section is parsed (and regenerated
# by pod/buildtoc so please check that script before making changes here

distclean: realclean
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl.lib $(PERLEXESTATIC) $(PERLSTATICLIB)
	-del /f $(LIBDIR)\Encode.pm $(LIBDIR)\encoding.pm $(LIBDIR)\Errno.pm
	-del /f $(LIBDIR)\Config.pod $(LIBDIR)\POSIX.pod $(LIBDIR)\threads.pm
	-del /f $(LIBDIR)\.exists $(LIBDIR)\attributes.pm $(LIBDIR)\DynaLoader.pm
	-del /f $(LIBDIR)\Fcntl.pm $(LIBDIR)\IO.pm $(LIBDIR)\Opcode.pm
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm
	-del /f $(LIBDIR)\SDBM_File.pm $(LIBDIR)\Socket.pm $(LIBDIR)\POSIX.pm
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
	-del /f $(LIBDIR)\File\Glob.pm
	-del /f $(LIBDIR)\Storable.pm
	-del /f $(LIBDIR)\Sys\Hostname.pm
	-del /f $(LIBDIR)\Time\HiRes.pm
	-del /f $(LIBDIR)\Unicode\Normalize.pm
	-del /f $(LIBDIR)\Math\BigInt\FastCalc.pm
	-del /f $(LIBDIR)\Win32.pm
	-del /f $(LIBDIR)\Win32CORE.pm
	-del /f $(LIBDIR)\Win32API\File.pm
	-del /f $(LIBDIR)\Win32API\File\cFile.pc
	-del /f $(LIBDIR)\buildcustomize.pl
	-del /f $(DISTDIR)\XSLoader\XSLoader.pm
	-del /f *.def *.map
	-if exist $(LIBDIR)\Amiga rmdir /s /q $(LIBDIR)\Amiga
	-if exist $(LIBDIR)\App rmdir /s /q $(LIBDIR)\App
	-if exist $(LIBDIR)\Archive rmdir /s /q $(LIBDIR)\Archive
	-if exist $(LIBDIR)\Attribute rmdir /s /q $(LIBDIR)\Attribute
	-if exist $(LIBDIR)\autodie rmdir /s /q $(LIBDIR)\autodie
	-if exist $(LIBDIR)\Carp rmdir /s /q $(LIBDIR)\Carp
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
	-if exist $(LIBDIR)\Config\Perl rmdir /s /q $(LIBDIR)\Config\Perl
	-if exist $(LIBDIR)\CPAN rmdir /s /q $(LIBDIR)\CPAN
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data
	-if exist $(LIBDIR)\Devel rmdir /s /q $(LIBDIR)\Devel
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest
	-if exist $(LIBDIR)\Encode rmdir /s /q $(LIBDIR)\Encode
	-if exist $(LIBDIR)\encoding rmdir /s /q $(LIBDIR)\encoding
	-if exist $(LIBDIR)\Exporter rmdir /s /q $(LIBDIR)\Exporter
	-if exist $(LIBDIR)\ExtUtils\CBuilder rmdir /s /q $(LIBDIR)\ExtUtils\CBuilder
	-if exist $(LIBDIR)\ExtUtils\Command rmdir /s /q $(LIBDIR)\ExtUtils\Command
	-if exist $(LIBDIR)\ExtUtils\Constant rmdir /s /q $(LIBDIR)\ExtUtils\Constant
	-if exist $(LIBDIR)\ExtUtils\Liblist rmdir /s /q $(LIBDIR)\ExtUtils\Liblist
	-if exist $(LIBDIR)\ExtUtils\MakeMaker rmdir /s /q $(LIBDIR)\ExtUtils\MakeMaker
	-if exist $(LIBDIR)\ExtUtils\ParseXS rmdir /s /q $(LIBDIR)\ExtUtils\ParseXS
	-if exist $(LIBDIR)\ExtUtils\Typemaps rmdir /s /q $(LIBDIR)\ExtUtils\Typemaps
	-if exist $(LIBDIR)\File\Spec rmdir /s /q $(LIBDIR)\File\Spec
	-if exist $(LIBDIR)\Filter rmdir /s /q $(LIBDIR)\Filter
	-if exist $(LIBDIR)\Hash rmdir /s /q $(LIBDIR)\Hash
	-if exist $(LIBDIR)\HTTP rmdir /s /q $(LIBDIR)\HTTP
	-if exist $(LIBDIR)\I18N rmdir /s /q $(LIBDIR)\I18N
	-if exist $(LIBDIR)\inc rmdir /s /q $(LIBDIR)\inc
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO
	-if exist $(LIBDIR)\IPC rmdir /s /q $(LIBDIR)\IPC
	-if exist $(LIBDIR)\JSON rmdir /s /q $(LIBDIR)\JSON
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\Locale rmdir /s /q $(LIBDIR)\Locale
	-if exist $(LIBDIR)\Math rmdir /s /q $(LIBDIR)\Math
	-if exist $(LIBDIR)\Memoize rmdir /s /q $(LIBDIR)\Memoize
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\Module rmdir /s /q $(LIBDIR)\Module
	-if exist $(LIBDIR)\Net\FTP rmdir /s /q $(LIBDIR)\Net\FTP
	-if exist $(LIBDIR)\OpenBSD rmdir /s /q $(LIBDIR)\OpenBSD
	-if exist $(LIBDIR)\Params rmdir /s /q $(LIBDIR)\Params
	-if exist $(LIBDIR)\Parse rmdir /s /q $(LIBDIR)\Parse
	-if exist $(LIBDIR)\Perl rmdir /s /q $(LIBDIR)\Perl
	-if exist $(LIBDIR)\PerlIO rmdir /s /q $(LIBDIR)\PerlIO
	-if exist $(LIBDIR)\Pod\Perldoc rmdir /s /q $(LIBDIR)\Pod\Perldoc
	-if exist $(LIBDIR)\Pod\Simple rmdir /s /q $(LIBDIR)\Pod\Simple
	-if exist $(LIBDIR)\Pod\Text rmdir /s /q $(LIBDIR)\Pod\Text
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\Search rmdir /s /q $(LIBDIR)\Search
	-if exist $(LIBDIR)\Sub rmdir /s /q $(LIBDIR)\Sub
	-if exist $(LIBDIR)\Sys rmdir /s /q $(LIBDIR)\Sys
	-if exist $(LIBDIR)\TAP rmdir /s /q $(LIBDIR)\TAP
	-if exist $(LIBDIR)\Term rmdir /s /q $(LIBDIR)\Term
	-if exist $(LIBDIR)\Test rmdir /s /q $(LIBDIR)\Test
	-if exist $(LIBDIR)\Text rmdir /s /q $(LIBDIR)\Text
	-if exist $(LIBDIR)\Thread rmdir /s /q $(LIBDIR)\Thread
	-if exist $(LIBDIR)\threads rmdir /s /q $(LIBDIR)\threads
	-if exist $(LIBDIR)\Tie\Hash rmdir /s /q $(LIBDIR)\Tie\Hash
	-if exist $(LIBDIR)\Unicode\Collate rmdir /s /q $(LIBDIR)\Unicode\Collate
	-if exist $(LIBDIR)\Unicode\Collate\Locale rmdir /s /q $(LIBDIR)\Unicode\Collate\Locale
	-if exist $(LIBDIR)\version rmdir /s /q $(LIBDIR)\version
	-if exist $(LIBDIR)\VMS rmdir /s /q $(LIBDIR)\VMS
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
	-cd $(PODDIR) && del /f *.html *.bat roffitall \
	    perl5241delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
	    perlapi.pod perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldos.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmacos.pod perlmacosx.pod perlmodlib.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perlsynology.pod perltoc.pod \
	    perltru64.pod perltw.pod perlvos.pod perlwin32.pod
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs \
	    perldoc perlivp libnetcfg enc2xs encguess piconv cpan *.bat \
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep shasum corelist zipdetails
	-del /f ..\config.sh perlmain.c dlutils.c config.h.new \
	        perlmainst.c
	-del /f $(CONFIGPM)
	-del /f ..\lib\Config_git.pl
	-del /f bin\*.bat
	-del /f perllibst.h
	-del /f $(PERLEXE_RES) perl.base
	-cd .. && del /s *.lib *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib ppport.h
	-cd $(EXTDIR) && del /s *.def Makefile Makefile.old
	-cd $(DISTDIR) && del /s *.def Makefile Makefile.old
	-cd $(CPANDIR) && del /s *.def Makefile Makefile.old
	-del /s ..\utils\Makefile
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR)
	-if exist pod2htmd.tmp del pod2htmd.tmp
	-if exist $(HTMLDIR) rmdir /s /q $(HTMLDIR)
	-del /f ..\t\test_state

install : all installbare installhtml

installbare : utils ..\pod\perltoc.pod
	$(PERLEXE) ..\installperl
	if exist $(WPERLEXE) $(XCOPY) $(WPERLEXE) $(INST_BIN)\*.*
	if exist $(PERLEXESTATIC) $(XCOPY) $(PERLEXESTATIC) $(INST_BIN)\*.*
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	if exist ..\perl*.pdb $(XCOPY) ..\perl*.pdb $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_SCRIPT)\*.*

installhtml : doc
	$(RCOPY) $(HTMLDIR)\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	$(RCOPY) ..\lib $(INST_LIB)\*.*

$(UNIDATAFILES) ..\pod\perluniprops.pod : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables Extensions_nonxs
	cd ..\lib\unicore && \
	..\$(MINIPERL) -I.. mktables -P ..\..\pod -maketest -makelist -p -check $@@ $(FIRSTUNIFILE)

minitest : .\config.h $(MINIPERL) ..\git_version.h $(GLOBEXE) $(CONFIGPM) $(UNIDATAFILES)
	$(XCOPY) $(MINIPERL) ..\t\$(NULL)
	if exist ..\t\perl.exe del /f ..\t\perl.exe
	rename ..\t\miniperl.exe perl.exe
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
# Note this perl.exe is miniperl
	cd ..\t && perl.exe TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t opbasic/*.t op/*.t uni/*.t perf/*.t pragma/*.t

test-prep : all utils ../pod/perltoc.pod
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	set PERL_STATIC_EXT=$(STATIC_EXT)

test : test-prep
	cd ..\t
	perl.exe harness $(TEST_SWITCHES) $(TEST_FILES)
	cd ..\win32

test_porting : test-prep
	cd ..\t
	perl.exe harness $(TEST_SWITCHES) porting\*.t ..\lib\diagnostics.t
	cd ..\win32

test-reonly : reonly utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	cd ..\t
	perl.exe harness $(OPT) -re \bre\\/ $(EXTRA)
	cd ..\win32

regen :
	cd ..
	regen.pl
	cd win32

test-notty : test-prep
	set PERL_SKIP_TTY_TEST=1
	cd ..\t
	perl.exe harness $(TEST_SWITCHES) $(TEST_FILES)
	cd ..\win32

_test : 
       $(XCOPY) $(PERLEXE) ..\t\$(NULL)
       $(XCOPY) $(PERLDLL) ..\t\$(NULL)
       $(XCOPY) $(GLOBEXE) ..\t\$(NULL)
       cd ..\t
       perl.exe harness $(TEST_SWITCHES) $(TEST_FILES)
       cd ..\win32

_clean :
	-@@$(DEL) miniperlmain$(o)
	-@@$(DEL) $(MINIPERL)
	-@@$(DEL) perlglob$(o)
	-@@$(DEL) perlmain$(o)
	-@@$(DEL) perlmainst$(o)
	-@@$(DEL) config.h
	-@@$(DEL) ..\git_version.h
	-@@$(DEL) $(GLOBEXE)
	-@@$(DEL) $(PERLEXE)
	-@@$(DEL) $(WPERLEXE)
	-@@$(DEL) $(PERLEXESTATIC)
	-@@$(DEL) $(PERLSTATICLIB)
	-@@$(DEL) $(PERLDLL)
	-@@$(DEL) $(CORE_OBJ)
	-@@$(DEL) $(GENUUDMAP) $(GENUUDMAP_OBJ) $(GENERATED_HEADERS)
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR)
	-if exist $(UNIDATADIR1) rmdir /s /q $(UNIDATADIR1)
	-if exist $(UNIDATADIR2) rmdir /s /q $(UNIDATADIR2)
	-@@$(DEL) $(UNIDATAFILES)
	-@@$(DEL) $(WIN32_OBJ)
	-@@$(DEL) $(DLL_OBJ)
	-@@$(DEL) ..\*$(o) ..\*.lib ..\*.exp *$(o) *.lib *.exp *.res
	-@@$(DEL) ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@$(DEL) *.ilk
	-@@$(DEL) *.pdb
	-@@$(DEL) Extensions_static

clean : Extensions_clean _clean

realclean : Extensions_realclean _clean

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "nmake nok" instead.
ok: utils
	$(PERLEXE) ..\utils\perlbug -ok -s "(UNINSTALLED)"

okfile: utils
	$(PERLEXE) ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok

nok: utils
	$(PERLEXE) ..\utils\perlbug -nok -s "(UNINSTALLED)"

nokfile: utils
	$(PERLEXE) ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.24
log
@Apply local patches - perl-5.24.1
@
text
@d1325 1
a1325 2
	    perltru64.pod perltw.pod perluniprops.pod perlvos.pod \
	    perlwin32.pod
@


1.23
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d1291 1
@


1.22
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d8 1
a8 1
# (perl520.dll).  Also makes individual DLLs for the XS extensions.
d29 1
d41 1
a41 1
#INST_VER	= \5.20.3
a83 8
# Comment out next assign to disable perl's I/O subsystem and use compiler's 
# stdio for IO - depending on your compiler vendor and run time library you may 
# then get a number of fails from make test i.e. bugs - complain to them not us ;-). 
# You will also be unable to take full advantage of perl5.8's support for multiple 
# encodings and may see lower IO performance. You have been warned.
USE_PERLIO	= define

#
d87 1
d95 1
d99 7
d108 1
a108 1
# Visual C++ 6.x (aka Visual C++ 98)
d110 1
a110 1
# Visual C++ .NET 2002/2003 (aka Visual C++ 7.x) (full version)
d112 1
a112 1
# Visual C++ Toolkit 2003 (aka Visual C++ 7.x) (free command-line tools)
d116 1
a116 1
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
d118 1
a118 1
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
d120 1
a120 1
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
d122 1
a122 1
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
d124 1
a124 1
# Visual C++ 2010 (aka Visual C++ 10.x) (full version)
d126 1
a126 1
# Visual C++ 2010 Express Edition (aka Visual C++ 10.x) (free version)
d128 1
a128 1
# Visual C++ 2012 (aka Visual C++ 11.x) (full version)
d130 1
a130 1
# Visual C++ 2012 Express Edition (aka Visual C++ 11.x) (free version)
d132 1
a132 1
# Visual C++ 2013 (aka Visual C++ 12.x) (full version)
d134 1
a134 1
# Visual C++ 2013 Express Edition (aka Visual C++ 12.x) (free version)
d143 6
a148 1
# uncomment next line if you want debug version of perl (big,slow)
d152 12
d195 1
a195 1
# variables below. A static library perl520s.lib will also be created.
a295 4
!IF "$(USE_PERLIO)" == ""
USE_PERLIO	= undef
!ENDIF

d304 4
d328 4
a389 1
!IF "$(USE_PERLIO)" == "define"
a390 7
!ELSE
ARCHNAME	= MSWin32-$(ARCHITECTURE)
!ENDIF
!ENDIF

!IF "$(USE_PERLIO)" == "define"
BUILDOPT	= $(BUILDOPT) -DUSE_PERLIO
d403 1
a403 1
# All but the free version of VC++ 7.x can load DLLs on demand.  Makes the test
d406 6
d413 3
d418 1
a418 1
# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
a467 1
SUBSYS		= console
d470 1
a470 1
LIBC	= msvcrt.lib
d476 9
d502 2
d510 1
a510 1
# For now, silence warnings from VC++ 8.x onwards about "unsafe" CRT functions
d556 6
d574 1
a574 1
LINK_FLAGS	= $(LINK_FLAGS) "/manifestdependency:type='Win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'"
d579 17
d606 4
a609 1
.SUFFIXES : .c $(o) .dll .lib .exe .rc .res
d621 2
a622 2
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(LINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
d633 3
a635 3
PERLIMPLIB	= ..\perl520.lib
PERLSTATICLIB	= ..\perl520s.lib
PERLDLL		= ..\perl520.dll
a643 1
X2P		= ..\x2p\a2p.exe
d689 1
a690 1
		..\utils\config_data	\
a702 3
		..\x2p\find2perl	\
		..\x2p\psed		\
		..\x2p\s2p		\
d728 1
d732 1
a732 1
		..\mro.c	\
d757 1
d773 1
a777 14
# We need this for miniperl build unless we override canned 
# config.h #define building mini\*
#!IF "$(USE_PERLIO)" == "define"
WIN32_SRC	= $(WIN32_SRC) .\win32io.c
#!ENDIF


X2P_SRC		=		\
		..\x2p\a2p.c	\
		..\x2p\hash.c	\
		..\x2p\str.c	\
		..\x2p\util.c	\
		..\x2p\walk.c

a834 1
X2P_OBJ		= $(X2P_SRC:.c=.obj)
d868 1
a880 1
		"useperlio=$(USE_PERLIO)"		\
d882 1
d894 1
a894 1
	$(UNIDATAFILES) MakePPPort $(PERLEXE) $(X2P) Extensions_nonxs Extensions $(PERLSTATIC)
d904 1
a904 1
	$(UNIDATAFILES) $(PERLEXE) $(X2P) Extensions_reonly
d912 1
a912 1
	$(LINK32) $(LINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
a917 3
config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

d954 1
d1006 5
d1019 2
a1020 2
..\config.sh : config.w32 $(MINIPERL) config_sh.PL FindExt.pm
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) config.w32 > ..\config.sh
d1024 1
a1024 1
# ITHREADS, IMP_SYS, LARGE_FILES and PERLIO off), then make this target
a1034 1
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
d1045 2
a1046 2
	$(LINK32) -subsystem:console -out:$(MINIPERL) @@<<
	$(LINK_FLAGS) $(DELAYLOAD) $(LIBFILES) $(MINI_OBJ)
a1074 1
$(X2P_OBJ)	: $(CORE_H)
d1083 1
a1083 1
		$(LINK_FLAGS) $(DELAYLOAD) $(LIBFILES) $(PERLDLL_OBJ) $(PERLDLL_RES)
a1095 23
..\x2p\a2p$(o) : ..\x2p\a2p.c
	$(CC) -I..\x2p $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\a2p.c

..\x2p\hash$(o) : ..\x2p\hash.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\hash.c

..\x2p\str$(o) : ..\x2p\str.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\str.c

..\x2p\util$(o) : ..\x2p\util.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\util.c

..\x2p\walk$(o) : ..\x2p\walk.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\walk.c

$(X2P) : $(MINIPERL) $(X2P_OBJ) Extensions
	$(MINIPERL) -I..\lib ..\x2p\find2perl.PL
	$(MINIPERL) -I..\lib ..\x2p\s2p.PL
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(X2P_OBJ)
<<
	$(EMBED_EXE_MANI)

d1106 2
a1107 2
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(GENUUDMAP_OBJ)
d1124 1
a1124 1
	$(LINK32) -subsystem:console -out:$@@ $(LINK_FLAGS) \
d1131 1
a1131 1
	$(LINK32) -subsystem:console -out:$@@ $(LINK_FLAGS) \
d1171 1
a1171 1
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
d1181 1
a1181 1
utils: $(PERLEXE) $(X2P) ..\utils\Makefile
d1218 1
a1218 1
	copy ..\pod\perldelta.pod ..\pod\perl5203delta.pod
d1253 1
a1258 1
	-if exist $(LIBDIR)\CGI rmdir /s /q $(LIBDIR)\CGI
a1290 2
	-if exist $(LIBDIR)\OpenBSD rmdir /s /q $(LIBDIR)\OpenBSD
	-if exist $(LIBDIR)\Package rmdir /s /q $(LIBDIR)\Package
d1300 1
d1316 1
a1316 1
	    perl5203delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
d1324 2
a1325 1
	    perltru64.pod perltw.pod perlvos.pod perlwin32.pod
d1327 2
a1328 3
	    perldoc perlivp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep shasum corelist config_data zipdetails
	-cd ..\x2p && del /f find2perl s2p psed *.bat
a1354 1
	if exist ..\x2p\a2p.pdb $(XCOPY) ..\x2p\a2p.pdb $(INST_BIN)\*.*
d1365 1
a1365 1
	..\$(MINIPERL) -I.. -I..\..\dist\Cwd\lib -I..\..\dist\Cwd mktables -P ..\..\pod -maketest -makelist -p -check $@@ $(FIRSTUNIFILE)
d1367 1
a1367 1
minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) utils $(UNIDATAFILES)
d1372 2
a1373 3
	attrib -r ..\t\*.*
	cd ..\t && \
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t opbasic/*.t op/*.t pragma/*.t
d1383 1
a1383 1
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1388 1
a1388 1
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) porting\*.t ..\lib\diagnostics.t
d1396 1
a1396 1
	$(PERLEXE) -I..\lib harness $(OPT) -re \bre\\/ $(EXTRA)
d1407 1
a1407 1
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1415 1
a1415 1
       $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
a1423 1
	-@@$(DEL) config.w32
a1439 1
	-@@$(DEL) $(X2P_OBJ)
a1441 1
	-@@$(DEL) ..\x2p\*.exe ..\x2p\*.bat
d1455 1
a1455 1
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)"
d1458 1
a1458 1
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok
d1461 1
a1461 1
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)"
d1464 1
a1464 1
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.21
log
@Apply pre-built unicore patch, remove excess files - perl-5.20.2
@
text
@d40 1
a40 1
#INST_VER	= \5.20.2
d1195 1
a1195 1
	copy ..\pod\perldelta.pod ..\pod\perl5202delta.pod
d1294 1
a1294 1
	    perl5202delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
@


1.20
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d1302 1
a1302 2
	    perltru64.pod perltw.pod perluniprops.pod perlvos.pod \
	    perlwin32.pod
@


1.19
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d1268 1
@


1.18
log
@Regenerate unicore for perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d40 1
a40 1
#INST_VER	= \5.20.1
d1195 1
a1195 1
	copy ..\pod\perldelta.pod ..\pod\perl5201delta.pod
a1267 1
	-if exist $(LIBDIR)\OpenBSD rmdir /s /q $(LIBDIR)\OpenBSD
d1293 1
a1293 1
	    perl5201delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
d1301 2
a1302 1
	    perltru64.pod perltw.pod perlvos.pod perlwin32.pod
@


1.17
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1302 1
a1302 2
	    perltru64.pod perltw.pod perluniprops.pod perlvos.pod \
	    perlwin32.pod
@


1.16
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1268 1
@


1.15
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d8 1
a8 1
# (perl518.dll).  Also makes individual DLLs for the XS extensions.
d40 1
a40 1
#INST_VER	= \5.18.2
d62 3
a64 2
# uncomment to enable multiple interpreters.  This is need for fork()
# emulation and for thread support.
d69 3
a71 3
# Beginnings of interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  This needs
# USE_MULTI as well.
d77 2
a78 2
# made by perl.  This needs USE_MULTI above.  This is also needed to
# get fork().
d100 1
d130 9
d176 1
a176 1
# variables below. A static library perl518s.lib will also be created.
d340 7
a411 1
EXTUTILSDIR	= $(LIBDIR)\ExtUtils
d426 1
d429 4
d463 1
a463 1
!  IF "$(WIN64)" == "define"
d467 1
d502 8
d527 1
a527 1
LIB_FLAGS	= -nologo
d573 3
a575 3
PERLIMPLIB	= ..\perl518.lib
PERLSTATICLIB	= ..\perl518s.lib
PERLDLL		= ..\perl518.dll
a583 1
MINIMOD		= ..\lib\ExtUtils\Miniperl.pm
d586 1
a586 1
!IF "$(BUILD_STATIC)" == "define"
a639 3
		..\utils\cpanp-run-perl	\
		..\utils\cpanp	\
		..\utils\cpan2dist	\
d668 1
a751 1
		..\perlsfio.h	\
d770 1
d805 2
a806 4
#  - Win32 extension contains overlapped symbols with win32.c (BUG!)
#  - MakeMaker isn't capable enough for SDBM_File (smaller bug)
#  - Encode (encoding search algorithm relies on shared library?)
STATIC_EXT	= * !Win32 !SDBM_File !Encode
d809 2
a810 1
#STATIC_EXT	= Cwd Compress/Raw/Zlib
a843 2
ICWD = -I..\dist\Cwd -I..\dist\Cwd\lib

d848 1
a848 1
all : .\config.h ..\git_version.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) \
d858 1
a858 1
reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) \
d891 3
d912 9
d966 1
a966 3
	cd ..
	miniperl -Ilib make_patchnum.pl
	cd win32
d982 1
a982 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL
d985 1
a985 1
$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
d991 1
a991 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL
d994 2
a995 2
..\lib\buildcustomize.pl: $(MINIPERL) ..\write_buildcustomize.pl
	$(MINIPERL) -I..\lib ..\write_buildcustomize.pl .. >..\lib\buildcustomize.pl
d997 2
a998 2
$(MINIPERL) : $(MINIDIR) $(MINI_OBJ)
	$(LINK32) -subsystem:console -out:$@@ @@<<
d1001 2
a1002 1
	$(EMBED_EXE_MANI)
a1049 5
$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd ..
	miniperl minimod.pl > lib\ExtUtils\Miniperl.pm
	cd win32

d1102 1
a1102 1
	    $(LIBFILES) $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) $(PERLEXE_RES)
d1109 1
a1109 2
	    @@Extensions_static $(PERLSTATICLIB) /PDB:NONE \
	    $(LIBFILES) $(PERLEXEST_OBJ) $(SETARGV_OBJ) $(PERLEXE_RES)
d1113 1
a1113 1
	$(MINIPERL) -I..\lib $(ICWD) ..\mkppport
d1126 1
a1126 1
Extensions_static : ..\make_ext.pl ..\lib\buildcustomize.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
d1152 3
d1158 1
a1158 1
utils: $(PERLEXE) $(X2P)
d1164 1
a1168 1
	copy ..\README.dgux     ..\pod\perldgux.pod
d1190 1
d1195 1
a1195 1
	copy ..\pod\perldelta.pod ..\pod\perl5182delta.pod
d1198 2
a1199 2
	$(PERLEXE) $(ICWD) ..\autodoc.pl ..
	$(PERLEXE) $(ICWD) ..\pod\perlmodlib.pl -q
d1209 1
a1209 3
		$(PERLIMPLIB) ..\miniperl.lib $(MINIMOD) \
		$(PERLEXESTATIC) $(PERLSTATICLIB)
	-del /f *.def *.map
d1229 1
d1234 1
a1234 1
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B
d1236 2
a1238 2
	-if exist $(LIBDIR)\CPANPLUS rmdir /s /q $(LIBDIR)\CPANPLUS
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
d1244 1
d1250 2
d1255 2
a1256 1
	-if exist $(LIBDIR)\I18N\LangTags rmdir /s /q $(LIBDIR)\I18N\LangTags
a1257 1
	-if exist $(LIBDIR)\Module\Pluggable rmdir /s /q $(LIBDIR)\Module\Pluggable
d1260 1
a1262 1
	-if exist $(LIBDIR)\Log rmdir /s /q $(LIBDIR)\Log
a1266 1
	-if exist $(LIBDIR)\mro rmdir /s /q $(LIBDIR)\mro
a1267 1
	-if exist $(LIBDIR)\Object rmdir /s /q $(LIBDIR)\Object
d1271 1
a1275 1
	-if exist $(LIBDIR)\re rmdir /s /q $(LIBDIR)\re
d1277 1
d1280 1
a1280 1
	-if exist $(LIBDIR)\Term\UI rmdir /s /q $(LIBDIR)\Term\UI
d1282 1
d1287 4
a1291 1
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
d1293 10
a1302 9
	    perl5182delta.pod perlaix.pod perlamiga.pod perlapi.pod \
	    perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldgux.pod perldos.pod perlfreebsd.pod perlhaiku.pod \
	    perlhpux.pod perlhurd.pod perlintern.pod perlirix.pod \
	    perljp.pod perlko.pod perllinux.pod perlmacos.pod \
	    perlmacosx.pod perlmodlib.pod perlnetware.pod perlopenbsd.pod \
	    perlos2.pod perlos390.pod perlos400.pod perlplan9.pod \
	    perlqnx.pod perlriscos.pod perlsolaris.pod perlsymbian.pod \
	    perltoc.pod perltru64.pod perltw.pod perlvos.pod perlwin32.pod
d1305 1
a1305 1
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep cpanp-run-perl cpanp cpan2dist shasum corelist config_data zipdetails
d1318 1
@


1.14
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d8 1
a8 1
# (perl516.dll).  Also makes individual DLLs for the XS extensions.
d40 1
a40 1
#INST_VER	= \5.16.3
d96 6
d106 2
a109 2
# Visual C++ .NET 2003 (aka Visual C++ 7.x) (full version)
#CCTYPE		= MSVC70
d112 2
d116 2
a117 2
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
#CCTYPE		= MSVC80
d120 2
a121 2
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
#CCTYPE		= MSVC90
d124 4
a127 2
# Visual C++ 2010 (aka Visual C++ 10.x) (full version)
#CCTYPE		= MSVC100
d165 1
a165 1
# variables below. A static library perl516s.lib will also be created.
d274 4
d318 4
d329 9
d364 9
a372 8
# Visual C++ 98, .NET 2003, 2005/2008/2010 specific.
# VC++ 6/7/8/9/10.x can load DLLs on demand.  Makes the test suite run
# in about 10% less time.  (The free version of 7.x can't do this, but the free
# versions of 8/9/10.x can.)
!IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"     || \
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d431 2
a432 1
OPTIMIZE	= -MD -Zi -DNDEBUG
d443 1
a443 1
OPTIMIZE	= $(OPTIMIZE) -Ox -GL
a444 4
!  ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86
OPTIMIZE	= $(OPTIMIZE) -O1
#OPTIMIZE	= $(OPTIMIZE) -O2
d453 1
a453 1
# For now, silence VC++ 8/9/10.x's warnings about "unsafe" CRT functions
d455 1
a455 3
!IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d468 1
a468 2
!  IF "$(CCTYPE)" == "MSVC60" || \
      "$(CCTYPE)" == "MSVC70" || "$(CCTYPE)" == "MSVC70FREE"
d502 1
a502 3
!IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d523 3
d542 3
a544 3
PERLIMPLIB	= ..\perl516.lib
PERLSTATICLIB	= ..\perl516s.lib
PERLDLL		= ..\perl516.dll
a628 4
!IF "$(WIN64)" == "define"
CFGSH_TMPL	= config.vc64
CFGH_TMPL	= config_H.vc64
!ELSE
a630 1
!ENDIF
d715 1
a789 1
		"INST_DRV=$(INST_DRV)"			\
d810 1
d814 2
a815 1
		"optimize=$(OPTIMIZE:"=\")"
d851 9
d863 64
d939 2
a940 2
# this target is for when changes to the main config.sh happen.
# edit config.vc, then make perl in a minimal configuration (i.e. with MULTI,
a942 5
# unfortunately, some further manual editing is also then required to restore all
# the special __GNUC__ handling that is otherwise lost.
# repeat for config.vc64 and config_H.vc64 if you have a suitable build
# environment, otherwise hand-edit them to maintain the same differences with
# config.vc and config_H.vc as before.
d947 1
a947 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL "INST_VER=$(INST_VER)"
d956 1
a956 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL "INST_VER=$(INST_VER)"
d964 1
a964 1
	$(LINK_FLAGS) $(LIBFILES) $(MINI_OBJ)
d975 1
a975 1
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $(*F).c
d1119 1
a1119 1
	    --podpath=pod:lib:ext:utils --htmlroot="file://$(INST_HTML::=|)" \
a1130 1
	copy ..\README.beos     ..\pod\perlbeos.pod
a1136 1
	copy ..\README.epoc     ..\pod\perlepoc.pod
a1146 1
	copy ..\README.mpeix    ..\pod\perlmpeix.pod
a1158 2
	copy ..\README.uts      ..\pod\perluts.pod
	copy ..\README.vmesa    ..\pod\perlvmesa.pod
d1161 1
a1161 1
	copy ..\pod\perldelta.pod ..\pod\perl5163delta.pod
d1254 9
a1262 10
	    perl5163delta.pod perlaix.pod perlamiga.pod perlapi.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcn.pod \
	    perlcygwin.pod perldgux.pod perldos.pod perlepoc.pod \
	    perlfreebsd.pod perlhaiku.pod perlhpux.pod perlhurd.pod \
	    perlintern.pod perlirix.pod perljp.pod perlko.pod perllinux.pod \
	    perlmacos.pod perlmacosx.pod perlmodlib.pod perlmpeix.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perltoc.pod perltru64.pod \
	    perltw.pod perluts.pod perlvmesa.pod perlvos.pod perlwin32.pod
d1312 1
a1312 1
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t
@


1.13
log
@merge in perl 5.12.2 plus local changes
@
text
@d2 1
a2 1
# Makefile to build perl on Windows NT using Microsoft NMAKE.
d4 1
a4 1
#	Visual C++ 2.0 or later
d8 1
a8 1
# (perl512.dll).  Also makes individual DLLs for the XS extensions.
d40 1
a40 1
#INST_VER	= \5.12.2
a97 4
# Visual C++ 2.x
#CCTYPE		= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		= MSVC
d114 4
a126 11
# uncomment to enable use of PerlCRT.DLL when using the Visual C compiler.
# It has patches that fix known bugs in older versions of MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3 or later.
# Get it from CPAN at http://www.cpan.org/authors/id/D/DO/DOUGL/
# and follow the directions in the package to install.
#
# Not recommended if you have VC 6.x and you're not running Windows 9x.
#
#USE_PERLCRT	= define

#
a135 14
# if you want to have the crypt() builtin function implemented, leave this or
# CRYPT_LIB uncommented.  The fcrypt.c file named here contains a suitable
# version of des_fcrypt().
#
CRYPT_SRC	= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	= fcrypt.lib

#
d155 1
a155 1
# variables below. A static library perl512s.lib will also be created.
a176 1
#CCHOME		= f:\msvc20
a186 20
# Adding -DPERL_HASH_SEED_EXPLICIT will disable randomization of Perl's
# internal hash function unless the PERL_HASH_SEED environment variable is set.
# Alternatively, adding -DNO_HASH_SEED will completely disable the
# randomization feature. 
# The latter is required to maintain binary compatibility with Perl 5.8.0.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_HASH_SEED_EXPLICIT
#BUILDOPT	= $(BUILDOPT) -DNO_HASH_SEED

#
# This should normally be disabled.  Adding -DPERL_POLLUTE enables support
# for old symbols by default, at the expense of extreme pollution.  You most
# probably just want to build modules that won't compile with
#         perl Makefile.PL POLLUTE=1
# instead of enabling this.  Please report such modules to the respective
# authors.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_POLLUTE

#
d193 8
a200 2
# This should normally be disabled.  Enabling it causes perl to read scripts
# in text mode (which is the 5.005 behavior) and will break ByteLoader.
d202 1
a202 1
#BUILDOPT	= $(BUILDOPT) -DPERL_TEXTMODE_SCRIPTS
a221 7
!IF "$(CRYPT_SRC)$(CRYPT_LIB)" == ""
D_CRYPT		= undef
!ELSE
D_CRYPT		= define
CRYPT_FLAG	= -DHAVE_DES_FCRYPT
!ENDIF

a263 4
!IF "$(USE_PERLCRT)" == ""
USE_PERLCRT	= undef
!ENDIF

d337 2
a338 2
# Visual C++ 98, .NET 2003, 2005 and 2008 specific.
# VC++ 6.x, 7.x, 8.x and 9.x can load DLL's on demand.  Makes the test suite run
d340 1
a340 1
# versions of 8.x and 9.x can.)
d343 2
a344 1
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
d392 1
a392 1
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG)
a396 1
!IF "$(USE_PERLCRT)" != "define"
a397 3
!ELSE
LIBC	= PerlCRT.lib
!ENDIF
a399 3
!  IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE	= -Od -MD -Z7 -DDEBUGGING
!  ELSE
a400 1
!  ENDIF
d428 1
a428 1
# For now, silence VC++ 8.x's and 9.x's warnings about "unsafe" CRT functions
d431 2
a432 1
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
d436 12
a447 6
# Use the MSVCRT read() fix if the PerlCRT was not chosen, but only when using
# VC++ 6.x or earlier. Later versions use MSVCR70.dll, MSVCR71.dll, etc, which
# do not require the fix.
!IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC" || "$(CCTYPE)" == "MSVC60" 
!  IF "$(USE_PERLCRT)" != "define"
BUILDOPT	= $(BUILDOPT) -DPERL_MSVCRT_READFIX
d451 1
a451 1
LIBBASEFILES	= $(CRYPT_LIB) \
a464 1
# we add LIBC here, since we may be using PerlCRT.dll
d481 2
a482 1
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
d519 3
a521 3
PERLIMPLIB	= ..\perl512.lib
PERLSTATICLIB	= ..\perl512s.lib
PERLDLL		= ..\perl512.dll
d538 1
a538 1
  
d543 2
a544 1
		   ..\lib\unicore\Heavy.pl ..\lib\unicore\mktables.lst \
a567 1
		..\utils\dprofpp	\
d585 2
d592 2
a593 7
		..\pod\pod2html		\
		..\pod\pod2latex	\
		..\pod\pod2man		\
		..\pod\pod2text		\
		..\pod\pod2usage	\
		..\pod\podchecker	\
		..\pod\podselect	\
d632 1
d670 2
a671 1
		.\win32thread.c
a678 3
!IF "$(CRYPT_SRC)" != ""
WIN32_SRC	= $(WIN32_SRC) .\$(CRYPT_SRC)
!ENDIF
d731 2
a779 1
		"d_crypt=$(D_CRYPT)"			\
d797 1
a797 1
ICWD = -I..\cpan\Cwd -I..\cpan\Cwd\lib
d809 1
a809 1
..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h	
d843 1
a843 1
..\config.sh : config.w32 $(MINIPERL) config_sh.PL
d848 1
a848 1
# ITHREADS, IMP_SYS, LARGE_FILES, PERLIO and CRYPT off), then make this target
d850 2
a854 2
# unfortunately, some further manual editing is also then required to restore all
# the special __GNUC__ handling that is otherwise lost.
a866 1
	$(XCOPY) ..\ext\re\re.pm $(LIBDIR)\*.*
d871 3
d906 1
a906 1
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl create_perllibst_h.pl
d909 1
a909 1
	    CCTYPE=$(CCTYPE) > perldll.def
d954 3
a956 1
$(MINIDIR)\globals$(o) : $(UUDMAP_H) $(BITCOUNT_H)
d958 4
a961 2
$(UUDMAP_H) $(BITCOUNT_H) : $(GENUUDMAP)
	$(GENUUDMAP) $(UUDMAP_H) $(BITCOUNT_H)
d982 1
a982 1
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(LINK_FLAGS) \
d989 1
a989 1
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(LINK_FLAGS) \
d1000 1
a1000 1
Extensions: ..\make_ext.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
d1004 1
a1004 1
Extensions_reonly: ..\make_ext.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
d1008 1
a1008 1
Extensions_static : ..\make_ext.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
d1013 1
a1013 1
Extensions_nonxs: ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
d1017 1
a1017 1
$(DYNALOADER) : ..\make_ext.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
d1032 1
a1032 1
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse
a1042 1
	copy ..\README.apollo   ..\pod\perlapollo.pod
d1078 1
a1078 2
	copy ..\pod\perl5122delta.pod ..\pod\perldelta.pod
	$(MAKE) -f ..\win32\pod.mak converters
d1085 1
a1085 1
	$(PERLEXE) -f ..\pod\buildtoc --build-toc -q
d1112 1
d1166 1
d1170 2
a1171 2
	-cd $(PODDIR) && del /f *.html *.bat \
	    perlaix.pod perlamiga.pod perlapi.pod perlapollo.pod \
d1173 8
a1180 11
	    perlcygwin.pod perldelta.pod perldgux.pod perldos.pod \
	    perlepoc.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmacos.pod perlmacosx.pod perlmodlib.pod \
	    perlmpeix.pod perlnetware.pod perlopenbsd.pod perlos2.pod \
	    perlos390.pod perlos400.pod perlplan9.pod perlqnx.pod \
	    perlriscos.pod perlsolaris.pod perlsymbian.pod perltoc.pod \
	    perltru64.pod perltw.pod perluniprops.pod perluts.pod \
	    perlvmesa.pod perlvos.pod perlwin32.pod \
	    pod2html pod2latex pod2man pod2text pod2usage \
	    podchecker podselect
d1182 2
a1183 2
	    perldoc perlivp dprofpp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove ptar ptardiff cpanp-run-perl cpanp cpan2dist shasum corelist config_data
a1198 1
	-if exist pod2htmi.tmp del pod2htmi.tmp
d1221 1
a1221 1
	..\$(MINIPERL) -I.. -I..\..\cpan\Cwd\lib -I..\..\cpan\Cwd mktables -P ..\..\pod -maketest -makelist -p -check $@@ $(FIRSTUNIFILE)
d1232 1
a1232 1
test-prep : all utils
d1236 1
d1243 5
d1291 1
a1291 1
	-@@$(DEL) $(GENUUDMAP) $(GENUUDMAP_OBJ) $(UUDMAP_H) $(BITCOUNT_H)
@


1.12
log
@Merge in perl 5.10.1; part two
@
text
@d1 1370
a1370 1363
#
# Makefile to build perl on Windows NT using Microsoft NMAKE.
# Supported compilers:
#	Visual C++ 2.0 or later
#	MS Platform SDK 64-bit compiler and tools
#
# This is set up to build a perl.exe that runs off a shared library
# (perl510.dll).  Also makes individual DLLs for the XS extensions.
#

##
## Make sure you read README.win32 *before* you mess with anything here!
##

##
## Build configuration.  Edit the values below to suit your needs.
##

#
# Set these to wherever you want "nmake install" to put your
# newly built perl.
#
INST_DRV	= c:
INST_TOP	= $(INST_DRV)\perl

#
# Comment this out if you DON'T want your perl installation to be versioned.
# This means that the new installation will overwrite any files from the
# old installation at the same INST_TOP location.  Leaving it enabled is
# the safest route, as perl adds the extra version directory to all the
# locations it installs files to.  If you disable it, an alternative
# versioned installation can be obtained by setting INST_TOP above to a
# path that includes an arbitrary version string.
#
#INST_VER	= \5.10.1

#
# Comment this out if you DON'T want your perl installation to have
# architecture specific components.  This means that architecture-
# specific files will be installed along with the architecture-neutral
# files.  Leaving it enabled is safer and more flexible, in case you
# want to build multiple flavors of perl and install them together in
# the same location.  Commenting it out gives you a simpler
# installation that is easier to understand for beginners.
#
#INST_ARCH	= \$(ARCHNAME)

#
# Uncomment this if you want perl to run
# 	$Config{sitelibexp}\sitecustomize.pl
# before anything else.  This script can then be set up, for example,
# to add additional entries to @@INC.
#
#USE_SITECUST	= define

#
# uncomment to enable multiple interpreters.  This is need for fork()
# emulation and for thread support.
#
USE_MULTI	= define

#
# Beginnings of interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  This needs
# USE_MULTI as well.
#
USE_ITHREADS	= define

#
# uncomment to enable the implicit "host" layer for all system calls
# made by perl.  This needs USE_MULTI above.  This is also needed to
# get fork().
#
USE_IMP_SYS	= define

#
# Comment out next assign to disable perl's I/O subsystem and use compiler's 
# stdio for IO - depending on your compiler vendor and run time library you may 
# then get a number of fails from make test i.e. bugs - complain to them not us ;-). 
# You will also be unable to take full advantage of perl5.8's support for multiple 
# encodings and may see lower IO performance. You have been warned.
USE_PERLIO	= define

#
# Comment this out if you don't want to enable large file support for
# some reason.  Should normally only be changed to maintain compatibility
# with an older release of perl.
USE_LARGE_FILES	= define

#
# uncomment exactly one of the following
#
# Visual C++ 2.x
#CCTYPE		= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		= MSVC
# Visual C++ 6.x (aka Visual C++ 98)
CCTYPE		= MSVC60
# Visual C++ Toolkit 2003 (aka Visual C++ 7.x) (free command-line tools)
#CCTYPE		= MSVC70FREE
# Visual C++ .NET 2003 (aka Visual C++ 7.x) (full version)
#CCTYPE		= MSVC70
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
#CCTYPE		= MSVC80FREE
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
#CCTYPE		= MSVC80
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
#CCTYPE		= MSVC90FREE
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
#CCTYPE		= MSVC90

#
# uncomment next line if you want debug version of perl (big,slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		= Debug

#
# uncomment to enable use of PerlCRT.DLL when using the Visual C compiler.
# It has patches that fix known bugs in older versions of MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3 or later.
# Get it from CPAN at http://www.cpan.org/authors/id/D/DO/DOUGL/
# and follow the directions in the package to install.
#
# Not recommended if you have VC 6.x and you're not running Windows 9x.
#
#USE_PERLCRT	= define

#
# uncomment to enable linking with setargv.obj under the Visual C
# compiler. Setting this options enables perl to expand wildcards in
# arguments, but it may be harder to use alternate methods like
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
#
#USE_SETARGV	= define

#
# if you want to have the crypt() builtin function implemented, leave this or
# CRYPT_LIB uncommented.  The fcrypt.c file named here contains a suitable
# version of des_fcrypt().
#
CRYPT_SRC	= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	= fcrypt.lib

#
# set this if you wish to use perl's malloc
# WARNING: Turning this on/off WILL break binary compatibility with extensions
# you may have compiled with/without it.  Be prepared to recompile all
# extensions if you change the default.  Currently, this cannot be enabled
# if you ask for USE_IMP_SYS above.
#
#PERL_MALLOC	= define

#
# set this to enable debugging mstats
# This must be enabled to use the Devel::Peek::mstat() function.  This cannot
# be enabled without PERL_MALLOC as well.
#
#DEBUG_MSTATS	= define

#
# set this to additionally provide a statically linked perl-static.exe.
# Note that dynamic loading will not work with this perl, so you must
# include required modules statically using the STATIC_EXT or ALL_STATIC
# variables below. A static library perl510s.lib will also be created.
# Ordinary perl.exe is not affected by this option.
#
#BUILD_STATIC	= define

#
# in addition to BUILD_STATIC the option ALL_STATIC makes *every*
# extension get statically built
# This will result in a very large perl executable, but the main purpose
# is to have proper linking set so as to be able to create miscellaneous
# executables with different built-in extensions
#
#ALL_STATIC	= define

#
#
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
#CCHOME		= f:\msvc20
CCHOME		= $(MSVCDIR)
CCINCDIR	= $(CCHOME)\include
CCLIBDIR	= $(CCHOME)\lib

#
# Additional compiler flags can be specified here.
#
BUILDOPT	= $(BUILDOPTEXTRA)

#
# Adding -DPERL_HASH_SEED_EXPLICIT will disable randomization of Perl's
# internal hash function unless the PERL_HASH_SEED environment variable is set.
# Alternatively, adding -DNO_HASH_SEED will completely disable the
# randomization feature. 
# The latter is required to maintain binary compatibility with Perl 5.8.0.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_HASH_SEED_EXPLICIT
#BUILDOPT	= $(BUILDOPT) -DNO_HASH_SEED

#
# This should normally be disabled.  Adding -DPERL_POLLUTE enables support
# for old symbols by default, at the expense of extreme pollution.  You most
# probably just want to build modules that won't compile with
#         perl Makefile.PL POLLUTE=1
# instead of enabling this.  Please report such modules to the respective
# authors.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_POLLUTE

#
# This should normally be disabled.  Enabling it will disable the File::Glob
# implementation of CORE::glob.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_EXTERNAL_GLOB

#
# This should normally be disabled.  Enabling it causes perl to read scripts
# in text mode (which is the 5.005 behavior) and will break ByteLoader.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_TEXTMODE_SCRIPTS

#
# specify semicolon-separated list of extra directories that modules will
# look for libraries (spaces in path names need not be quoted)
#
EXTRALIBDIRS	=

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#
#EMAIL		=

##
## Build configuration ends.
##

##################### CHANGE THESE ONLY IF YOU MUST #####################

!IF "$(CRYPT_SRC)$(CRYPT_LIB)" == ""
D_CRYPT		= undef
!ELSE
D_CRYPT		= define
CRYPT_FLAG	= -DHAVE_DES_FCRYPT
!ENDIF

!IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(PERL_MALLOC)" == ""
PERL_MALLOC	= undef
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(DEBUG_MSTATS)" == ""
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(DEBUG_MSTATS)" == "define"
BUILDOPT	= $(BUILDOPT) -DPERL_DEBUGGING_MSTATS
!ENDIF

!IF "$(USE_SITECUST)" == ""
USE_SITECUST	= undef
!ENDIF

!IF "$(USE_MULTI)" == ""
USE_MULTI	= undef
!ENDIF

!IF "$(USE_ITHREADS)" == ""
USE_ITHREADS	= undef
!ENDIF

!IF "$(USE_IMP_SYS)" == ""
USE_IMP_SYS	= undef
!ENDIF

!IF "$(USE_PERLIO)" == ""
USE_PERLIO	= undef
!ENDIF

!IF "$(USE_LARGE_FILES)" == ""
USE_LARGE_FILES	= undef
!ENDIF

!IF "$(USE_PERLCRT)" == ""
USE_PERLCRT	= undef
!ENDIF

!IF "$(USE_IMP_SYS)$(USE_MULTI)" == "defineundef"
USE_MULTI	= define
!ENDIF

!IF "$(USE_ITHREADS)$(USE_MULTI)" == "defineundef"
USE_MULTI	= define
!ENDIF

!IF "$(USE_SITECUST)" == "define"
BUILDOPT	= $(BUILDOPT) -DUSE_SITECUSTOMIZE
!ENDIF

!IF "$(USE_MULTI)" != "undef"
BUILDOPT	= $(BUILDOPT) -DPERL_IMPLICIT_CONTEXT
!ENDIF

!IF "$(USE_IMP_SYS)" != "undef"
BUILDOPT	= $(BUILDOPT) -DPERL_IMPLICIT_SYS
!ENDIF

!IF "$(PROCESSOR_ARCHITECTURE)" == ""
PROCESSOR_ARCHITECTURE	= x86
!ENDIF

!IF "$(WIN64)" == ""
# When we are running from a 32bit cmd.exe on AMD64 then
# PROCESSOR_ARCHITECTURE is set to x86 and PROCESSOR_ARCHITEW6432
# is set to AMD64
!IF "$(PROCESSOR_ARCHITEW6432)" != ""
PROCESSOR_ARCHITECTURE	= $(PROCESSOR_ARCHITEW6432)
WIN64			= define
!ELSE
!IF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITECTURE)" == "IA64"
WIN64			= define
!ELSE
WIN64			= undef
!ENDIF
!ENDIF
!ENDIF

ARCHITECTURE = $(PROCESSOR_ARCHITECTURE)
!IF "$(ARCHITECTURE)" == "AMD64"
ARCHITECTURE	= x64
!ENDIF
!IF "$(ARCHITECTURE)" == "IA64"
ARCHITECTURE	= ia64
!ENDIF

!IF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-multi
!ELSE
!IF "$(USE_PERLIO)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-perlio
!ELSE
ARCHNAME	= MSWin32-$(ARCHITECTURE)
!ENDIF
!ENDIF

!IF "$(USE_PERLIO)" == "define"
BUILDOPT	= $(BUILDOPT) -DUSE_PERLIO
!ENDIF

!IF "$(USE_ITHREADS)" == "define"
ARCHNAME	= $(ARCHNAME)-thread
!ENDIF

# Visual C++ 98, .NET 2003, 2005 and 2008 specific.
# VC++ 6.x, 7.x, 8.x and 9.x can load DLL's on demand.  Makes the test suite run
# in about 10% less time.  (The free version of 7.x can't do this, but the free
# versions of 8.x and 9.x can.)
!IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"     || \
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DELAYLOAD	= -DELAYLOAD:ws2_32.dll delayimp.lib
!ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest

ARCHDIR		= ..\lib\$(ARCHNAME)
COREDIR		= ..\lib\CORE
AUTODIR		= ..\lib\auto
LIBDIR		= ..\lib
EXTDIR		= ..\ext
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\ExtUtils
HTMLDIR		= .\html

#
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_BIN	= $(INST_SCRIPT)$(INST_ARCH)
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_ARCHLIB	= $(INST_LIB)$(INST_ARCH)
INST_COREDIR	= $(INST_ARCHLIB)\CORE
INST_HTML	= $(INST_TOP)$(INST_VER)\html

#
# Programs to compile, build .lib files and link
#

CC		= cl
LINK32		= link
LIB32		= $(LINK32) -lib
RSC		= rc

#
# Options
#

INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -TP -EHsc

!IF "$(USE_PERLCRT)" != "define"
LIBC	= msvcrt.lib
!ELSE
LIBC	= PerlCRT.lib
!ENDIF

!IF  "$(CFG)" == "Debug"
!  IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE	= -Od -MD -Z7 -DDEBUGGING
!  ELSE
OPTIMIZE	= -Od -MD -Zi -DDEBUGGING
!  ENDIF
LINK_DBG	= -debug
!ELSE
OPTIMIZE	= -MD -Zi -DNDEBUG
# we enable debug symbols in release builds also
LINK_DBG	= -debug -opt:ref,icf
# you may want to enable this if you want COFF symbols in the executables
# in addition to the PDB symbols.  The default Dr. Watson that ships with
# Windows can use the the former but not latter.  The free WinDbg can be
# installed to get better stack traces from just the PDB symbols, so we
# avoid the bloat of COFF symbols by default.
#LINK_DBG	= $(LINK_DBG) -debugtype:both
!  IF "$(WIN64)" == "define"
# enable Whole Program Optimizations (WPO) and Link Time Code Generation (LTCG)
OPTIMIZE	= $(OPTIMIZE) -Ox -GL
LINK_DBG	= $(LINK_DBG) -ltcg
!  ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86
OPTIMIZE	= $(OPTIMIZE) -O1
#OPTIMIZE	= $(OPTIMIZE) -O2
!  ENDIF
!ENDIF

!IF "$(WIN64)" == "define"
DEFINES		= $(DEFINES) -DWIN64 -DCONSERVATIVE
OPTIMIZE	= $(OPTIMIZE) -Wp64 -fp:precise
!ENDIF

# For now, silence VC++ 8.x's and 9.x's warnings about "unsafe" CRT functions
# and POSIX CRT function names being deprecated.
!IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DEFINES		= $(DEFINES) -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
!ENDIF

# Use the MSVCRT read() fix if the PerlCRT was not chosen, but only when using
# VC++ 6.x or earlier. Later versions use MSVCR70.dll, MSVCR71.dll, etc, which
# do not require the fix.
!IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC" || "$(CCTYPE)" == "MSVC60" 
!  IF "$(USE_PERLCRT)" != "define"
BUILDOPT	= $(BUILDOPT) -DPERL_MSVCRT_READFIX
!  ENDIF
!ENDIF

LIBBASEFILES	= $(CRYPT_LIB) \
		oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib

# The 64 bit Platform SDK compilers contain a runtime library that doesn't
# include the buffer overrun verification code used by the /GS switch.
# Since the code links against libraries that are compiled with /GS, this
# "security cookie verification" must be included via bufferoverlow.lib.
!IF "$(WIN64)" == "define"
LIBBASEFILES    = $(LIBBASEFILES) bufferoverflowU.lib
!ENDIF

# we add LIBC here, since we may be using PerlCRT.dll
LIBFILES	= $(LIBBASEFILES) $(LIBC)

#EXTRACFLAGS	= -nologo -GF -W4 -wd4127 -wd4706
EXTRACFLAGS	= -nologo -GF -W3
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) \
		-libpath:"$(INST_COREDIR)" \
		-machine:$(PROCESSOR_ARCHITECTURE)
LIB_FLAGS	= -nologo
OBJOUT_FLAG	= -Fo
EXEOUT_FLAG	= -Fe

CFLAGS_O	= $(CFLAGS) $(BUILDOPT)

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

o = .obj

#
# Rules
#

.SUFFIXES : .c $(o) .dll .lib .exe .rc .res

.c$(o):
	$(CC) -c -I$(<D) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $<

.y.c:
	$(NOOP)

$(o).dll:
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(LINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
	$(EMBED_DLL_MANI)

.rc.res:
	$(RSC) -i.. $<

#
# various targets

# makedef.pl must be updated if this changes, and this should normally
# only change when there is an incompatible revision of the public API.
PERLIMPLIB	= ..\perl510.lib
PERLSTATICLIB	= ..\perl510s.lib
PERLDLL		= ..\perl510.dll

MINIPERL	= ..\miniperl.exe
MINIDIR		= .\mini
PERLEXE		= ..\perl.exe
WPERLEXE	= ..\wperl.exe
PERLEXESTATIC	= ..\perl-static.exe
GLOBEXE		= ..\perlglob.exe
CONFIGPM	= ..\lib\Config.pm ..\lib\Config_heavy.pl
MINIMOD		= ..\lib\ExtUtils\Miniperl.pm
X2P		= ..\x2p\a2p.exe
GENUUDMAP	= ..\generate_uudmap.exe
!IF "$(BUILD_STATIC)" == "define"
PERLSTATIC	= static
!ELSE
PERLSTATIC	= 
!ENDIF
  
# Unicode data files generated by mktables
FIRSTUNIFILE     = ..\lib\unicore\Canonical.pl
UNIDATAFILES	 = ..\lib\unicore\Canonical.pl ..\lib\unicore\Exact.pl \
		   ..\lib\unicore\Properties ..\lib\unicore\Decomposition.pl \
		   ..\lib\unicore\CombiningClass.pl ..\lib\unicore\Name.pl \
		   ..\lib\unicore\PVA.pl

# Directories of Unicode data files generated by mktables
UNIDATADIR1	= ..\lib\unicore\To
UNIDATADIR2	= ..\lib\unicore\lib

PERLEXE_ICO	= .\perlexe.ico
PERLEXE_RES	= .\perlexe.res
PERLDLL_RES	=

# Nominate a target which causes extensions to be re-built
# This used to be $(PERLEXE), but at worst it is the .dll that they depend
# on and really only the interface - i.e. the .def file used to export symbols
# from the .dll
PERLDEP		= perldll.def

PL2BAT		= bin\pl2bat.pl
GLOBBAT		= bin\perlglob.bat

UTILS		=			\
		..\utils\h2ph		\
		..\utils\splain		\
		..\utils\dprofpp	\
		..\utils\perlbug	\
		..\utils\pl2pm 		\
		..\utils\c2ph		\
		..\utils\pstruct	\
		..\utils\h2xs		\
		..\utils\perldoc	\
		..\utils\perlivp	\
		..\utils\libnetcfg	\
		..\utils\enc2xs		\
		..\utils\piconv		\
		..\utils\config_data	\
		..\utils\corelist	\
		..\utils\cpan		\
		..\utils\xsubpp		\
		..\utils\prove		\
		..\utils\ptar		\
		..\utils\ptardiff	\
		..\utils\cpanp-run-perl	\
		..\utils\cpanp	\
		..\utils\cpan2dist	\
		..\utils\shasum		\
		..\utils\instmodsh	\
		..\pod\pod2html		\
		..\pod\pod2latex	\
		..\pod\pod2man		\
		..\pod\pod2text		\
		..\pod\pod2usage	\
		..\pod\podchecker	\
		..\pod\podselect	\
		..\x2p\find2perl	\
		..\x2p\psed		\
		..\x2p\s2p		\
		bin\exetype.pl		\
		bin\runperl.pl		\
		bin\pl2bat.pl		\
		bin\perlglob.pl		\
		bin\search.pl

MAKE		= nmake -nologo
MAKE_BARE	= nmake

!IF "$(WIN64)" == "define"
CFGSH_TMPL	= config.vc64
CFGH_TMPL	= config_H.vc64
!ELSE
CFGSH_TMPL	= config.vc
CFGH_TMPL	= config_H.vc
!ENDIF

XCOPY		= xcopy /f /r /i /d /y
RCOPY		= xcopy /f /r /i /e /d /y
NOOP		= @@rem
NULL		=

DEL		= del

#
# filenames given to xsubpp must have forward slashes (since it puts
# full pathnames in #line strings)
XSUBPP		= ..\$(MINIPERL) -I..\..\lib ..\$(EXTUTILSDIR)\xsubpp \
		-C++ -prototypes

MICROCORE_SRC	=		\
		..\av.c		\
		..\deb.c	\
		..\doio.c	\
		..\doop.c	\
		..\dump.c	\
		..\globals.c	\
		..\gv.c		\
		..\mro.c	\
		..\hv.c		\
		..\locale.c	\
		..\mathoms.c    \
		..\mg.c		\
		..\numeric.c	\
		..\op.c		\
		..\pad.c	\
		..\perl.c	\
		..\perlapi.c	\
		..\perly.c	\
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_hot.c	\
		..\pp_pack.c	\
		..\pp_sort.c	\
		..\pp_sys.c	\
		..\reentr.c	\
		..\regcomp.c	\
		..\regexec.c	\
		..\run.c	\
		..\scope.c	\
		..\sv.c		\
		..\taint.c	\
		..\toke.c	\
		..\universal.c	\
		..\utf8.c	\
		..\util.c	\
		..\xsutils.c

EXTRACORE_SRC	= $(EXTRACORE_SRC) perllib.c

!IF "$(PERL_MALLOC)" == "define"
EXTRACORE_SRC	= $(EXTRACORE_SRC) ..\malloc.c
!ENDIF

EXTRACORE_SRC	= $(EXTRACORE_SRC) ..\perlio.c

WIN32_SRC	=		\
		.\win32.c	\
		.\win32sck.c	\
		.\win32thread.c

# We need this for miniperl build unless we override canned 
# config.h #define building mini\*
#!IF "$(USE_PERLIO)" == "define"
WIN32_SRC	= $(WIN32_SRC) .\win32io.c
#!ENDIF

!IF "$(CRYPT_SRC)" != ""
WIN32_SRC	= $(WIN32_SRC) .\$(CRYPT_SRC)
!ENDIF

DLL_SRC		= $(DYNALOADER).c

X2P_SRC		=		\
		..\x2p\a2p.c	\
		..\x2p\hash.c	\
		..\x2p\str.c	\
		..\x2p\util.c	\
		..\x2p\walk.c

CORE_NOCFG_H	=		\
		..\av.h		\
		..\cop.h	\
		..\cv.h		\
		..\dosish.h	\
		..\embed.h	\
		..\form.h	\
		..\gv.h		\
		..\handy.h	\
		..\hv.h		\
		..\iperlsys.h	\
		..\mg.h		\
		..\nostdio.h	\
		..\op.h		\
		..\opcode.h	\
		..\perl.h	\
		..\perlapi.h	\
		..\perlsdio.h	\
		..\perlsfio.h	\
		..\perly.h	\
		..\pp.h		\
		..\proto.h	\
		..\regcomp.h	\
		..\regexp.h	\
		..\scope.h	\
		..\sv.h		\
		..\thread.h	\
		..\unixish.h	\
		..\utf8.h	\
		..\util.h	\
		..\warnings.h	\
		..\XSUB.h	\
		..\EXTERN.h	\
		..\perlvars.h	\
		..\intrpvar.h	\
		.\include\dirent.h	\
		.\include\netdb.h	\
		.\include\sys\socket.h	\
		.\win32.h

CORE_H		= $(CORE_NOCFG_H) .\config.h ..\git_version.h

UUDMAP_H	= ..\uudmap.h

MICROCORE_OBJ	= $(MICROCORE_SRC:.c=.obj)
CORE_OBJ	= $(MICROCORE_OBJ) $(EXTRACORE_SRC:.c=.obj)
WIN32_OBJ	= $(WIN32_SRC:.c=.obj)
MINICORE_OBJ	= $(MICROCORE_OBJ:..\=.\mini\)	\
		  $(MINIDIR)\miniperlmain$(o)	\
		  $(MINIDIR)\perlio$(o)
MINIWIN32_OBJ	= $(WIN32_OBJ:.\=.\mini\)
MINI_OBJ	= $(MINICORE_OBJ) $(MINIWIN32_OBJ)
DLL_OBJ		= $(DLL_SRC:.c=.obj)
X2P_OBJ		= $(X2P_SRC:.c=.obj)
GENUUDMAP_OBJ	= $(GENUUDMAP:.exe=.obj)

PERLDLL_OBJ	= $(CORE_OBJ)
PERLEXE_OBJ	= perlmain$(o)
PERLEXEST_OBJ	= perlmainst$(o)

PERLDLL_OBJ	= $(PERLDLL_OBJ) $(WIN32_OBJ) $(DLL_OBJ)

!IF "$(USE_SETARGV)" != ""
SETARGV_OBJ	= setargv$(o)
!ENDIF

!IF "$(ALL_STATIC)" == "define"
# some exclusions, unfortunately, until fixed:
#  - Win32 extension contains overlapped symbols with win32.c (BUG!)
#  - MakeMaker isn't capable enough for SDBM_File (smaller bug)
#  - Encode (encoding search algorithm relies on shared library?)
STATIC_EXT	= * !Win32 !SDBM_File !Encode
!ELSE
# specify static extensions here, for example:
#STATIC_EXT	= Cwd Compress/Raw/Zlib
STATIC_EXT	= Win32CORE
!ENDIF

DYNALOADER	= $(EXTDIR)\DynaLoader\DynaLoader

CFG_VARS	=					\
		"INST_DRV=$(INST_DRV)"			\
		"INST_TOP=$(INST_TOP)"			\
		"INST_VER=$(INST_VER)"			\
		"INST_ARCH=$(INST_ARCH)"		\
		"archname=$(ARCHNAME)"			\
		"cc=$(CC)"				\
		"ld=$(LINK32)"				\
		"ccflags=$(EXTRACFLAGS) $(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
		"cf_email=$(EMAIL)"	 		\
		"d_crypt=$(D_CRYPT)"			\
		"d_mymalloc=$(PERL_MALLOC)"		\
		"libs=$(LIBFILES)"			\
		"incpath=$(CCINCDIR:"=\")"		\
		"libperl=$(PERLIMPLIB:..\=)"		\
		"libpth=$(CCLIBDIR:"=\");$(EXTRALIBDIRS:"=\")"	\
		"libc=$(LIBC)"				\
		"make=$(MAKE_BARE)"				\
		"static_ext=$(STATIC_EXT)"		\
		"usethreads=$(USE_ITHREADS)"		\
		"useithreads=$(USE_ITHREADS)"		\
		"usemultiplicity=$(USE_MULTI)"		\
		"useperlio=$(USE_PERLIO)"		\
		"uselargefiles=$(USE_LARGE_FILES)"	\
		"usesitecustomize=$(USE_SITECUST)"	\
		"LINK_FLAGS=$(LINK_FLAGS:"=\")"		\
		"optimize=$(OPTIMIZE:"=\")"

#
# Top targets
#

all : .\config.h ..\git_version.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) \
	$(UNIDATAFILES) MakePPPort $(PERLEXE) $(X2P) Extensions $(PERLSTATIC)
	@@echo	Everything is up to date. '$(MAKE_BARE) test' to run test suite.

..\regcharclass.h : ..\Porting\regcharclass.pl
	cd ..
	miniperl Porting\regcharclass.pl
	cd win32

regnodes : ..\regnodes.h

..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h	

..\regexec$(o) : ..\regnodes.h ..\regcharclass.h

reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) \
	$(UNIDATAFILES) $(PERLEXE) $(X2P) Extensions_reonly
	@@echo	Perl and 're' are up to date.

$(DYNALOADER)$(o) : $(DYNALOADER).c $(CORE_H) $(EXTDIR)\DynaLoader\dlutils.c

static: $(PERLEXESTATIC)

#------------------------------------------------------------

$(GLOBEXE) : perlglob$(o)
	$(LINK32) $(LINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
	    perlglob$(o) setargv$(o)
	$(EMBED_EXE_MANI)

perlglob$(o)  : perlglob.c

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

.\config.h : $(CFGH_TMPL)
	-del /f config.h
	copy $(CFGH_TMPL) config.h

..\git_version.h : $(MINIPERL) ..\make_patchnum.pl
	cd ..
	miniperl -Ilib make_patchnum.pl
	cd win32

# make sure that we recompile perl.c if the git version changes
..\perl$(o) : ..\git_version.h

..\config.sh : config.w32 $(MINIPERL) config_sh.PL
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) config.w32 > ..\config.sh

# this target is for when changes to the main config.sh happen.
# edit config.vc, then make perl in a minimal configuration (i.e. with MULTI,
# ITHREADS, IMP_SYS, LARGE_FILES, PERLIO and CRYPT off), then make this target
# to regenerate config_H.vc.
# repeat for config.vc64 and config_H.vc64 if you have a suitable build
# environment, otherwise hand-edit them to maintain the same differences with
# config.vc and config_H.vc as before.
# unfortunately, some further manual editing is also then required to restore all
# the special __GNUC__ handling that is otherwise lost.
regen_config_h:
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh
	cd ..
	miniperl configpm
	cd win32
	-del /f $(CFGH_TMPL)
	-$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)"
	rename config.h $(CFGH_TMPL)

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
	cd ..
	miniperl configpm
	cd win32
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(XCOPY) *.h $(COREDIR)\*.*
	$(XCOPY) ..\ext\re\re.pm $(LIBDIR)\*.*
	$(RCOPY) include $(COREDIR)\*.*
	-$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)"
	if errorlevel 1 $(MAKE) /$(MAKEFLAGS) $(CONFIGPM)

$(MINIPERL) : $(MINIDIR) $(MINI_OBJ)
	$(LINK32) -subsystem:console -out:$@@ @@<<
	$(LINK_FLAGS) $(LIBFILES) $(MINI_OBJ)
<<
	$(EMBED_EXE_MANI)

$(MINIDIR) :
	if not exist "$(MINIDIR)" mkdir "$(MINIDIR)"

$(MINICORE_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*F).c

$(MINIWIN32_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $(*F).c

# -DPERL_IMPLICIT_SYS needs C++ for perllib.c
# This is the only file that depends on perlhost.h, vmem.h, and vdir.h
!IF "$(USE_IMP_SYS)" == "define"
perllib$(o)	: perllib.c .\perlhost.h .\vdir.h .\vmem.h
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
!ENDIF

# 1. we don't want to rebuild miniperl.exe when config.h changes
# 2. we don't want to rebuild miniperl.exe with non-default config.h
# 3. we can't have miniperl.exe depend on git_version.h, as miniperl creates it
$(MINI_OBJ)	: $(CORE_NOCFG_H)

$(WIN32_OBJ)	: $(CORE_H)
$(CORE_OBJ)	: $(CORE_H)
$(DLL_OBJ)	: $(CORE_H)
$(X2P_OBJ)	: $(CORE_H)

perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl create_perllibst_h.pl
	$(MINIPERL) -I..\lib create_perllibst_h.pl
	$(MINIPERL) -w ..\makedef.pl PLATFORM=win32 $(OPTIMIZE) $(DEFINES) $(BUILDOPT) \
	    CCTYPE=$(CCTYPE) > perldll.def

$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
	$(LINK32) -dll -def:perldll.def -base:0x28000000 -out:$@@ @@Extensions_static @@<<
		$(LINK_FLAGS) $(DELAYLOAD) $(LIBFILES) $(PERLDLL_OBJ) $(PERLDLL_RES)
<<
	$(EMBED_DLL_MANI)
	$(XCOPY) $(PERLIMPLIB) $(COREDIR)

$(PERLSTATICLIB): Extensions_static
	$(LIB32) $(LIB_FLAGS) -out:$@@ @@Extensions_static @@<<
		$(PERLDLL_OBJ)
<<
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)

$(PERLEXE_ICO): $(MINIPERL) ..\uupacktool.pl $(PERLEXE_ICO).packd
	$(MINIPERL) -I..\lib ..\uupacktool.pl -u $(PERLEXE_ICO).packd $(PERLEXE_ICO)

$(PERLEXE_RES): perlexe.rc $(PERLEXE_ICO)

$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd ..
	miniperl minimod.pl > lib\ExtUtils\Miniperl.pm
	cd win32

..\x2p\a2p$(o) : ..\x2p\a2p.c
	$(CC) -I..\x2p $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\a2p.c

..\x2p\hash$(o) : ..\x2p\hash.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\hash.c

..\x2p\str$(o) : ..\x2p\str.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\str.c

..\x2p\util$(o) : ..\x2p\util.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\util.c

..\x2p\walk$(o) : ..\x2p\walk.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\walk.c

$(X2P) : $(MINIPERL) $(X2P_OBJ)
	$(MINIPERL) ..\x2p\find2perl.PL
	$(MINIPERL) ..\x2p\s2p.PL
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(X2P_OBJ)
<<
	$(EMBED_EXE_MANI)

$(MINIDIR)\globals$(o) : $(UUDMAP_H)

$(UUDMAP_H) : $(GENUUDMAP)
	$(GENUUDMAP) >$(UUDMAP_H)

$(GENUUDMAP) : $(GENUUDMAP_OBJ)
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(GENUUDMAP_OBJ)
<<
	$(EMBED_EXE_MANI)

perlmain.c : runperl.c
	copy runperl.c perlmain.c

perlmain$(o) : perlmain.c
	$(CC) $(CFLAGS_O:-DPERLDLL=-UPERLDLL) $(OBJOUT_FLAG)$@@ -c perlmain.c

perlmainst.c : runperl.c
	copy runperl.c perlmainst.c

perlmainst$(o) : perlmainst.c
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ -c perlmainst.c

$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES)
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(LINK_FLAGS) \
	    $(LIBFILES) $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)
	copy $(PERLEXE) $(WPERLEXE)
	$(MINIPERL) -I..\lib bin\exetype.pl $(WPERLEXE) WINDOWS
	copy splittree.pl ..
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" $(AUTODIR)

$(PERLEXESTATIC): $(PERLSTATICLIB) $(CONFIGPM) $(PERLEXEST_OBJ) $(PERLEXE_RES)
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(LINK_FLAGS) \
	    @@Extensions_static $(PERLSTATICLIB) /PDB:NONE \
	    $(LIBFILES) $(PERLEXEST_OBJ) $(SETARGV_OBJ) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)

$(DYNALOADER).c: $(MINIPERL) $(EXTDIR)\DynaLoader\dl_win32.xs $(CONFIGPM)
	if not exist $(AUTODIR) mkdir $(AUTODIR)
	cd $(EXTDIR)\$(*B)
	..\$(MINIPERL) -I..\..\lib $(*B)_pm.PL
	..\$(MINIPERL) -I..\..\lib XSLoader_pm.PL
	cd ..\..\win32
	$(XCOPY) $(EXTDIR)\$(*B)\$(*B).pm $(LIBDIR)\$(NULL)
	$(XCOPY) $(EXTDIR)\$(*B)\XSLoader.pm $(LIBDIR)\$(NULL)
	cd $(EXTDIR)\$(*B)
	$(XSUBPP) dl_win32.xs > $(*B).c
	cd ..\..\win32

$(EXTDIR)\DynaLoader\dl_win32.xs: dl_win32.xs
	copy dl_win32.xs $(EXTDIR)\DynaLoader\dl_win32.xs

MakePPPort: $(MINIPERL) $(CONFIGPM)
	$(MINIPERL) -I..\lib ..\mkppport

MakePPPort_clean:
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\mkppport --clean

#-------------------------------------------------------------------------------
Extensions: ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynamic

Extensions_reonly: ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynamic +re

Extensions_static : ..\make_ext.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --static
	$(MINIPERL) -I..\lib list_static_libs.pl > Extensions_static

Extensions_clean: 
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --all --target=clean

Extensions_realclean: 
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --all --target=realclean

#-------------------------------------------------------------------------------

doc: $(PERLEXE)
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
	    --podpath=pod:lib:ext:utils --htmlroot="file://$(INST_HTML::=|)" \
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse

# Note that this next section is parsed (and regenerated) by pod/buildtoc
# so please check that script before making structural changes here

utils: $(PERLEXE) $(X2P)
	cd ..\utils
	$(MAKE) PERL=$(MINIPERL)
	cd ..\pod
	copy ..\README.aix      ..\pod\perlaix.pod
	copy ..\README.amiga    ..\pod\perlamiga.pod
	copy ..\README.apollo   ..\pod\perlapollo.pod
	copy ..\README.beos     ..\pod\perlbeos.pod
	copy ..\README.bs2000   ..\pod\perlbs2000.pod
	copy ..\README.ce       ..\pod\perlce.pod
	copy ..\README.cn       ..\pod\perlcn.pod
	copy ..\README.cygwin   ..\pod\perlcygwin.pod
	copy ..\README.dgux     ..\pod\perldgux.pod
	copy ..\README.dos      ..\pod\perldos.pod
	copy ..\README.epoc     ..\pod\perlepoc.pod
	copy ..\README.freebsd  ..\pod\perlfreebsd.pod
	copy ..\README.haiku    ..\pod\perlhaiku.pod
	copy ..\README.hpux     ..\pod\perlhpux.pod
	copy ..\README.hurd     ..\pod\perlhurd.pod
	copy ..\README.irix     ..\pod\perlirix.pod
	copy ..\README.jp       ..\pod\perljp.pod
	copy ..\README.ko       ..\pod\perlko.pod
	copy ..\README.linux    ..\pod\perllinux.pod
	copy ..\README.machten  ..\pod\perlmachten.pod
	copy ..\README.macos    ..\pod\perlmacos.pod
	copy ..\README.macosx   ..\pod\perlmacosx.pod
	copy ..\README.mint     ..\pod\perlmint.pod
	copy ..\README.mpeix    ..\pod\perlmpeix.pod
	copy ..\README.netware  ..\pod\perlnetware.pod
	copy ..\README.openbsd  ..\pod\perlopenbsd.pod
	copy ..\README.os2      ..\pod\perlos2.pod
	copy ..\README.os390    ..\pod\perlos390.pod
	copy ..\README.os400    ..\pod\perlos400.pod
	copy ..\README.plan9    ..\pod\perlplan9.pod
	copy ..\README.qnx      ..\pod\perlqnx.pod
	copy ..\README.riscos   ..\pod\perlriscos.pod
	copy ..\README.solaris  ..\pod\perlsolaris.pod
	copy ..\README.symbian  ..\pod\perlsymbian.pod
	copy ..\README.tru64    ..\pod\perltru64.pod
	copy ..\README.tw       ..\pod\perltw.pod
	copy ..\README.uts      ..\pod\perluts.pod
	copy ..\README.vmesa    ..\pod\perlvmesa.pod
	copy ..\README.vos      ..\pod\perlvos.pod
	copy ..\README.win32    ..\pod\perlwin32.pod
	copy ..\pod\perl5101delta.pod ..\pod\perldelta.pod
	$(MAKE) -f ..\win32\pod.mak converters
	cd ..\lib
	$(PERLEXE) lib_pm.PL
	cd ..\win32
	$(PERLEXE) $(PL2BAT) $(UTILS)
	$(PERLEXE) ..\autodoc.pl ..
	$(PERLEXE) ..\pod\perlmodlib.pl -q
	$(PERLEXE) ..\pod\buildtoc --build-toc -q

# Note that the pod cleanup in this next section is parsed (and regenerated
# by pod/buildtoc so please check that script before making changes here

distclean: realclean
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl.lib $(MINIMOD) \
		$(PERLEXESTATIC) $(PERLSTATICLIB)
	-del /f *.def *.map
	-del /f $(DYNALOADER).c
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs
	-del /f $(EXTDIR)\DynaLoader\DynaLoader.pm
	-del /f $(EXTDIR)\DynaLoader\XSLoader.pm
	-del /f $(LIBDIR)\Encode.pm $(LIBDIR)\encoding.pm $(LIBDIR)\Errno.pm
	-del /f $(LIBDIR)\Config.pod $(LIBDIR)\POSIX.pod $(LIBDIR)\threads.pm
	-del /f $(LIBDIR)\.exists $(LIBDIR)\attrs.pm $(LIBDIR)\DynaLoader.pm
	-del /f $(LIBDIR)\XSLoader.pm $(LIBDIR)\lib.pm
	-del /f $(LIBDIR)\Fcntl.pm $(LIBDIR)\IO.pm $(LIBDIR)\Opcode.pm
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm
	-del /f $(LIBDIR)\SDBM_File.pm $(LIBDIR)\Socket.pm $(LIBDIR)\POSIX.pm
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
	-del /f $(LIBDIR)\Devel\Peek.pm $(LIBDIR)\Devel\DProf.pm
	-del /f $(LIBDIR)\Devel\PPPort.pm
	-del /f $(LIBDIR)\File\Glob.pm
	-del /f $(LIBDIR)\Storable.pm
	-del /f $(LIBDIR)\Digest\MD5.pm
	-del /f $(LIBDIR)\Digest\SHA.pm
	-del /f $(LIBDIR)\PerlIO\encoding.pm
	-del /f $(LIBDIR)\PerlIO\scalar.pm
	-del /f $(LIBDIR)\PerlIO\via.pm
	-del /f $(LIBDIR)\Sys\Hostname.pm
	-del /f $(LIBDIR)\threads\shared.pm
	-del /f $(LIBDIR)\Time\HiRes.pm
	-del /f $(LIBDIR)\Unicode\Normalize.pm
	-del /f $(LIBDIR)\Math\BigInt\FastCalc.pm
	-del /f $(LIBDIR)\Win32.pm
	-del /f $(LIBDIR)\Win32CORE.pm
	-del /f $(LIBDIR)\Win32API\File.pm
	-del /f $(LIBDIR)\Win32API\File\cFile.pc
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data
	-if exist $(LIBDIR)\Encode rmdir /s /q $(LIBDIR)\Encode
	-if exist $(LIBDIR)\Filter\Util rmdir /s /q $(LIBDIR)\Filter\Util
	-if exist $(LIBDIR)\Hash rmdir /s /q $(LIBDIR)\Hash
	-if exist $(LIBDIR)\App rmdir /s /q $(LIBDIR)\App
	-if exist $(LIBDIR)\Module\Pluggable rmdir /s /q $(LIBDIR)\Module\Pluggable
	-if exist $(LIBDIR)\TAP rmdir /s /q $(LIBDIR)\TAP
	-if exist $(LIBDIR)\mro rmdir /s /q $(LIBDIR)\mro
	-if exist $(LIBDIR)\IO\Compress rmdir /s /q $(LIBDIR)\IO\Compress
	-if exist $(LIBDIR)\IO\Socket rmdir /s /q $(LIBDIR)\IO\Socket
	-if exist $(LIBDIR)\IO\Uncompress rmdir /s /q $(LIBDIR)\IO\Uncompress
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\re rmdir /s /q $(LIBDIR)\re
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\Sys rmdir /s /q $(LIBDIR)\Sys
	-if exist $(LIBDIR)\threads rmdir /s /q $(LIBDIR)\threads
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
	-cd $(PODDIR) && del /f *.html *.bat podchecker \
	    perlaix.pod perlamiga.pod perlapi.pod perlapollo.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcn.pod \
	    perlcygwin.pod perldelta.pod perldgux.pod perldos.pod \
	    perlepoc.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmachten.pod perlmacos.pod perlmacosx.pod \
	    perlmint.pod perlmodlib.pod perlmpeix.pod perlnetware.pod \
	    perlopenbsd.pod perlos2.pod perlos390.pod perlos400.pod \
	    perlplan9.pod perlqnx.pod perlriscos.pod perlsolaris.pod \
	    perlsymbian.pod perltoc.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvos.pod perlwin32.pod \
	    pod2html pod2latex pod2man pod2text pod2usage \
	    podchecker podselect
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs \
	    perldoc perlivp dprofpp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove ptar ptardiff cpanp-run-perl cpanp cpan2dist shasum corelist config_data
	-cd ..\x2p && del /f find2perl s2p psed *.bat
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new \
	        perlmainst.c
	-del /f $(CONFIGPM)
	-del /f ..\lib\Config_git.pl
	-del /f bin\*.bat
	-del /f perllibst.h
	-del /f $(PERLEXE_ICO) perl.base
	-cd .. && del /s *.lib *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib
	-cd $(EXTDIR) && del /s *.def Makefile Makefile.old
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR)
	-if exist pod2htmd.tmp del pod2htmd.tmp
	-if exist pod2htmi.tmp del pod2htmi.tmp
	-if exist $(HTMLDIR) rmdir /s /q $(HTMLDIR)
	-del /f ..\t\test_state

install : all installbare installhtml

installbare : utils
	$(PERLEXE) ..\installperl
	if exist $(WPERLEXE) $(XCOPY) $(WPERLEXE) $(INST_BIN)\*.*
	if exist $(PERLEXESTATIC) $(XCOPY) $(PERLEXESTATIC) $(INST_BIN)\*.*
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	if exist ..\perl*.pdb $(XCOPY) ..\perl*.pdb $(INST_BIN)\*.*
	if exist ..\x2p\a2p.pdb $(XCOPY) ..\x2p\a2p.pdb $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_SCRIPT)\*.*

installhtml : doc
	$(RCOPY) $(HTMLDIR)\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	copy splittree.pl ..
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" $(AUTODIR)
	$(RCOPY) ..\lib $(INST_LIB)\*.*

$(UNIDATAFILES) : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables
	cd ..\lib\unicore && \
	..\$(MINIPERL) -I.. mktables -check $@@ $(FIRSTUNIFILE)

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) utils $(UNIDATAFILES)
	$(XCOPY) $(MINIPERL) ..\t\$(NULL)
	if exist ..\t\perl.exe del /f ..\t\perl.exe
	rename ..\t\miniperl.exe perl.exe
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	attrib -r ..\t\*.*
	cd ..\t && \
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t

test-prep : all utils unpack_files
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)

test : test-prep
	cd ..\t
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
	cd ..\win32

unpack_files:
	$(MINIPERL) -I..\lib ..\uupacktool.pl -u -d .. -m

cleanup_unpacked_files:
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\uupacktool.pl -c -d .. -m

test-reonly : reonly utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	cd ..\t
	$(PERLEXE) -I..\lib harness $(OPT) -re \bpat\b \breg \bre\b \bsubst \brxcode $(EXTRA)
	cd ..\win32

regen :
	cd ..
	regen.pl
	cd win32

test-notty : test-prep
	set PERL_SKIP_TTY_TEST=1
	cd ..\t
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
	cd ..\win32

_test : 
       $(XCOPY) $(PERLEXE) ..\t\$(NULL)
       $(XCOPY) $(PERLDLL) ..\t\$(NULL)
       $(XCOPY) $(GLOBEXE) ..\t\$(NULL)
       cd ..\t
       $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
       cd ..\win32

_clean :
	-@@$(DEL) miniperlmain$(o)
	-@@$(DEL) $(MINIPERL)
	-@@$(DEL) perlglob$(o)
	-@@$(DEL) perlmain$(o)
	-@@$(DEL) perlmainst$(o)
	-@@$(DEL) config.w32
	-@@$(DEL) config.h
	-@@$(DEL) ..\git_version.h
	-@@$(DEL) $(GLOBEXE)
	-@@$(DEL) $(PERLEXE)
	-@@$(DEL) $(WPERLEXE)
	-@@$(DEL) $(PERLEXESTATIC)
	-@@$(DEL) $(PERLSTATICLIB)
	-@@$(DEL) $(PERLDLL)
	-@@$(DEL) $(CORE_OBJ)
	-@@$(DEL) $(GENUUDMAP) $(GENUUDMAP_OBJ) $(UUDMAP_H)
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR)
	-if exist $(UNIDATADIR1) rmdir /s /q $(UNIDATADIR1)
	-if exist $(UNIDATADIR2) rmdir /s /q $(UNIDATADIR2)
	-@@$(DEL) $(UNIDATAFILES)
	-@@$(DEL) $(WIN32_OBJ)
	-@@$(DEL) $(DLL_OBJ)
	-@@$(DEL) $(X2P_OBJ)
	-@@$(DEL) ..\*$(o) ..\*.lib ..\*.exp *$(o) *.lib *.exp *.res
	-@@$(DEL) ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@$(DEL) ..\x2p\*.exe ..\x2p\*.bat
	-@@$(DEL) *.ilk
	-@@$(DEL) *.pdb
	-@@$(DEL) Extensions_static

_preclean : cleanup_unpacked_files

clean : _preclean Extensions_clean _clean

realclean : _preclean Extensions_realclean MakePPPort_clean _clean

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "nmake nok" instead.
ok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)"

okfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok

nok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)"

nokfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.11
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d35 1
a35 1
#INST_VER	= \5.10.0
d386 7
a392 10
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. Embed
# them for simplicity, and delete them afterwards so that they don't get
# installed too.
!IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
EMBED_EXE_MANI	= mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  del $@@.manifest
EMBED_DLL_MANI	= mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  del $@@.manifest
!ENDIF
a615 1
		..\pod\checkpods	\
d766 1
a766 1
CORE_H		= $(CORE_NOCFG_H) .\config.h
d838 2
a839 2
all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort \
	$(PERLEXE) $(X2P) Extensions $(PERLSTATIC)
d853 2
a854 2
reonly : regnodes .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) \
	$(PERLEXE) $(X2P) Extensions_reonly
d877 8
d888 9
a896 3
# this target is for when changes to the main config.sh happen
# edit config.{b,v,g}c and make this target once for each supported
# compiler (e.g. `nmake CCTYPE=BORLAND regen_config_h`)
d898 1
a898 1
	perl config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh
d900 1
a900 2
	-del /f perl.exe perl*.dll
	perl configpm
d903 1
a903 2
	-mkdir $(COREDIR)
	-perl config_h.PL "INST_VER=$(INST_VER)"
d928 1
a928 1
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB $(OBJOUT_FLAG)$@@ ..\$(*F).c
d942 1
d950 2
a951 2
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl
	$(MINIPERL) -I..\lib buildext.pl --create-perllibst-h
d1061 1
a1061 1
Extensions: buildext.pl $(PERLDEP) $(CONFIGPM)
d1063 1
a1063 2
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --dynamic
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic
d1065 1
a1065 1
Extensions_reonly: buildext.pl $(PERLDEP) $(CONFIGPM)
d1067 1
a1067 2
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --dynamic +re
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic +re
d1069 1
a1069 1
Extensions_static : buildext.pl $(PERLDEP) $(CONFIGPM)
d1071 2
a1072 3
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --static
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
	$(MINIPERL) -I..\lib buildext.pl --list-static-libs > Extensions_static
d1075 1
a1075 2
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) clean
	-if exist $(MINIPERL) if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext clean
d1078 1
a1078 2
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) realclean
	-if exist $(MINIPERL) if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext realclean
a1093 1
	copy ..\vms\perlvms.pod .\perlvms.pod
d1106 1
a1131 1
	copy ..\README.vms      ..\pod\perlvms.pod
d1134 1
a1134 1
	copy ..\pod\perl5100delta.pod ..\pod\perldelta.pod
d1140 3
d1188 4
d1203 12
a1214 12
	-cd $(PODDIR) && del /f *.html *.bat checkpods \
	    perlaix.pod perlamiga.pod perlapollo.pod perlbeos.pod \
	    perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldelta.pod perldgux.pod perldos.pod perlepoc.pod \
	    perlfreebsd.pod perlhpux.pod perlhurd.pod perlirix.pod \
	    perljp.pod perlko.pod perllinux.pod perlmachten.pod \
	    perlmacos.pod perlmacosx.pod perlmint.pod perlmpeix.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvms.pod perlvms.pod perlvos.pod \
	    perlwin32.pod \
d1224 1
d1235 1
d1320 1
@


1.10
log
@merge in perl 5.8.8
@
text
@d4 2
a5 2
#	Visual C++ 2.0 through 7.0 (and possibly newer versions)
#	MS Platform SDK 64-bit compiler and tools **experimental**
d8 1
a8 1
# (perl58.dll).  Also makes individual DLLs for the XS extensions.
d35 1
a35 1
#INST_VER	= \5.8.8
a90 10
# WARNING! This option is deprecated and will eventually go away (enable
# USE_ITHREADS instead).
#
# uncomment to enable threads-capabilities.  This is incompatible with
# USE_ITHREADS, and is only here for people who may have come to rely
# on the experimental Thread support that was in 5.005.
#
#USE_5005THREADS	= define

#
d97 1
a97 1
# Visual C++ 6.x (aka Visual Studio 98)
d99 1
a99 1
# Visual C++ Toolkit 2003 (free version of Visual C++ 7.x command-line tools)
d101 1
a101 1
# Visual C++ 7.x (aka Visual Studio .NET 2003) (full version)
d103 8
d170 18
d205 1
a215 1
#
a279 8
!IF "$(USE_5005THREADS)" == ""
USE_5005THREADS	= undef
!ENDIF

!IF "$(USE_5005THREADS)" == "define"
USE_ITHREADS	= undef
!ENDIF

d308 1
a308 1
!IF "$(USE_IMP_SYS)$(USE_MULTI)$(USE_5005THREADS)" == "defineundefundef"
a313 1
USE_5005THREADS	= undef
d320 1
a320 1
!IF "$(USE_MULTI)$(USE_5005THREADS)" != "undefundef"
d333 3
d340 1
a340 1
!IF "$(PROCESSOR_ARCHITECTURE)" == "IA64"
d348 8
a355 3
!IF "$(USE_5005THREADS)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-thread
!ELSE
d357 1
a357 1
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-multi
d360 1
a360 1
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-perlio
d362 1
a362 2
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)
!ENDIF
d374 21
a394 5
# Visual Studio 98 and .NET 2003 specific
# VC++ 6.x and 7.x can load DLL's on demand.  Makes the test suite run in
# about 10% less time.  (The free version of 7.x can't do this, however.)
!IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"
DELAYLOAD	= -DELAYLOAD:ws2_32.dll -DELAYLOAD:shell32.dll delayimp.lib
d404 1
a411 1
INST_POD	= $(INST_LIB)\pod
d432 1
a432 1
CXX_FLAG	= -TP -GX
d470 1
a470 1
OPTIMIZE	= $(OPTIMIZE) -Wp64 -Op
d473 5
a477 6
# the string-pooling option -Gf is deprecated in VC++ 7.x and will be removed
# in later versions, so use read-only string-pooling (-GF) instead
!IF "$(CCTYPE)" == "MSVC70FREE" || "$(CCTYPE)" == "MSVC70"
STRPOOL		= -GF
!ELSE
STRPOOL		= -Gf
d480 5
a484 1
!IF "$(USE_PERLCRT)" != "define"
d486 1
d493 1
a493 1
		version.lib
d495 6
a500 3
# win64 doesn't have some libs
!IF "$(WIN64)" != "define"
LIBBASEFILES	= $(LIBBASEFILES) odbc32.lib odbccp32.lib
d506 2
a507 1
EXTRACFLAGS	= -nologo $(STRPOOL) -W3
d513 1
d539 1
d549 3
a551 2
PERLIMPLIB	= ..\perl58.lib
PERLDLL		= ..\perl58.dll
d557 1
d562 7
a568 1

d570 1
a602 1
		..\utils\perlcc		\
d607 2
d612 6
d647 2
a648 2
XCOPY		= xcopy /f /r /i /d
RCOPY		= xcopy /f /r /i /e /d
d668 1
d671 1
a764 1
		..\thrdvar.h	\
d772 2
d784 1
d788 1
a790 1
#PERLEXE_OBJ	= $(PERLEXE_OBJ) $(WIN32_OBJ) $(DLL_OBJ)
d796 13
a808 136
# specify static extensions here
#STATIC_EXT	= Cwd Compress/Zlib
STATIC_EXT	= 

DYNALOADER		= $(EXTDIR)\DynaLoader\DynaLoader
SOCKET			= $(EXTDIR)\Socket\Socket
FCNTL			= $(EXTDIR)\Fcntl\Fcntl
OPCODE			= $(EXTDIR)\Opcode\Opcode
SDBM_FILE		= $(EXTDIR)\SDBM_File\SDBM_File
IO			= $(EXTDIR)\IO\IO
POSIX			= $(EXTDIR)\POSIX\POSIX
ATTRS			= $(EXTDIR)\attrs\attrs
THREAD			= $(EXTDIR)\Thread\Thread
B			= $(EXTDIR)\B\B
RE			= $(EXTDIR)\re\re
DUMPER			= $(EXTDIR)\Data\Dumper\Dumper
ERRNO			= $(EXTDIR)\Errno\Errno
PEEK			= $(EXTDIR)\Devel\Peek\Peek
BYTELOADER		= $(EXTDIR)\ByteLoader\ByteLoader
DPROF			= $(EXTDIR)\Devel\DProf\DProf
GLOB			= $(EXTDIR)\File\Glob\Glob
HOSTNAME		= $(EXTDIR)\Sys\Hostname\Hostname
STORABLE		= $(EXTDIR)\Storable\Storable
FILTER			= $(EXTDIR)\Filter\Util\Call\Call
ENCODE			= $(EXTDIR)\Encode\Encode
MD5			= $(EXTDIR)\Digest\MD5\MD5
PERLIOSCALAR		= $(EXTDIR)\PerlIO\scalar\scalar
MIMEBASE64		= $(EXTDIR)\MIME\Base64\Base64
TIMEHIRES		= $(EXTDIR)\Time\HiRes\HiRes
CWD			= $(EXTDIR)\Cwd\Cwd
LISTUTIL  		= $(EXTDIR)\List\Util\Util
PERLIOVIA		= $(EXTDIR)\PerlIO\via\via
XSAPITEST		= $(EXTDIR)\XS\APItest\APItest
XSTYPEMAP		= $(EXTDIR)\XS\Typemap\Typemap
UNICODENORMALIZE	= $(EXTDIR)\Unicode\Normalize\Normalize
WIN32_DIR		= ext\Win32

SOCKET_DLL		= $(AUTODIR)\Socket\Socket.dll
FCNTL_DLL		= $(AUTODIR)\Fcntl\Fcntl.dll
OPCODE_DLL		= $(AUTODIR)\Opcode\Opcode.dll
SDBM_FILE_DLL		= $(AUTODIR)\SDBM_File\SDBM_File.dll
IO_DLL			= $(AUTODIR)\IO\IO.dll
POSIX_DLL		= $(AUTODIR)\POSIX\POSIX.dll
ATTRS_DLL		= $(AUTODIR)\attrs\attrs.dll
THREAD_DLL		= $(AUTODIR)\Thread\Thread.dll
B_DLL			= $(AUTODIR)\B\B.dll
DUMPER_DLL		= $(AUTODIR)\Data\Dumper\Dumper.dll
PEEK_DLL		= $(AUTODIR)\Devel\Peek\Peek.dll
RE_DLL			= $(AUTODIR)\re\re.dll
BYTELOADER_DLL		= $(AUTODIR)\ByteLoader\ByteLoader.dll
DPROF_DLL		= $(AUTODIR)\Devel\DProf\DProf.dll
GLOB_DLL		= $(AUTODIR)\File\Glob\Glob.dll
HOSTNAME_DLL		= $(AUTODIR)\Sys\Hostname\Hostname.dll
STORABLE_DLL		= $(AUTODIR)\Storable\Storable.dll
FILTER_DLL		= $(AUTODIR)\Filter\Util\Call\Call.dll
ENCODE_DLL		= $(AUTODIR)\Encode\Encode.dll
MD5_DLL			= $(AUTODIR)\Digest\MD5\MD5.dll
PERLIOSCALAR_DLL	= $(AUTODIR)\PerlIO\scalar\scalar.dll
MIMEBASE64_DLL		= $(AUTODIR)\MIME\Base64\Base64.dll
TIMEHIRES_DLL		= $(AUTODIR)\Time\HiRes\HiRes.dll
CWD_DLL			= $(AUTODIR)\Cwd\Cwd.dll
LISTUTIL_DLL		= $(AUTODIR)\List\Util\Util.dll
PERLIOVIA_DLL		= $(AUTODIR)\PerlIO\via\via.dll
XSAPITEST_DLL		= $(AUTODIR)\XS\APItest\APItest.dll
XSTYPEMAP_DLL		= $(AUTODIR)\XS\Typemap\Typemap.dll
UNICODENORMALIZE_DLL	= $(AUTODIR)\Unicode\Normalize\Normalize.dll
WIN32_DLL		= $(AUTODIR)\Win32\Win32.dll

EXTENSION_C	= 		\
		$(SOCKET).c	\
		$(FCNTL).c	\
		$(OPCODE).c	\
		$(SDBM_FILE).c	\
		$(IO).c		\
		$(POSIX).c	\
		$(ATTRS).c	\
		$(THREAD).c	\
		$(RE).c		\
		$(DUMPER).c	\
		$(PEEK).c	\
		$(B).c		\
		$(BYTELOADER).c	\
		$(DPROF).c	\
		$(GLOB).c	\
		$(HOSTNAME).c	\
		$(STORABLE).c	\
		$(FILTER).c	\
		$(ENCODE).c	\
		$(MD5).c	\
		$(PERLIOSCALAR).c	\
		$(MIMEBASE64).c	\
		$(TIMEHIRES).c	\
		$(CWD).c	\
		$(LISTUTIL).c	\
		$(PERLIOVIA).c	\
		$(XSAPITEST).c	\
		$(XSTYPEMAP).c	\
		$(UNICODENORMALIZE).c	\
		$(WIN32_DIR).c

EXTENSION_DLL	= 		\
		$(SOCKET_DLL)	\
		$(FCNTL_DLL)	\
		$(OPCODE_DLL)	\
		$(SDBM_FILE_DLL)\
		$(IO_DLL)	\
		$(POSIX_DLL)	\
		$(ATTRS_DLL)	\
		$(DUMPER_DLL)	\
		$(PEEK_DLL)	\
		$(B_DLL)	\
		$(RE_DLL)	\
		$(THREAD_DLL)	\
		$(BYTELOADER_DLL)	\
		$(DPROF_DLL)	\
		$(GLOB_DLL)	\
		$(HOSTNAME_DLL)	\
		$(STORABLE_DLL)	\
		$(FILTER_DLL)   \
		$(ENCODE_DLL)   \
		$(MD5_DLL)	\
		$(PERLIOSCALAR_DLL) \
		$(MIMEBASE64_DLL) \
		$(TIMEHIRES_DLL)  \
		$(CWD_DLL)	\
		$(LISTUTIL_DLL)	\
		$(PERLIOVIA_DLL)	\
		$(XSAPITEST_DLL)	\
		$(XSTYPEMAP_DLL)	\
		$(UNICODENORMALIZE_DLL)	\
		$(WIN32_DLL)

POD2HTML	= $(PODDIR)\pod2html
POD2MAN		= $(PODDIR)\pod2man
POD2LATEX	= $(PODDIR)\pod2latex
POD2TEXT	= $(PODDIR)\pod2text
a829 1
		"use5005threads=$(USE_5005THREADS)"	\
d842 2
a843 2
all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE) \
	$(X2P) Extensions
d846 15
d863 2
d870 1
a903 1
	$(XCOPY) ..\*.inc $(COREDIR)\*.*
d914 1
d950 1
d953 8
a960 2
$(PERLEXE_ICO): $(MINIPERL) makeico.pl
	$(MINIPERL) makeico.pl > $@@
d990 12
d1007 7
a1013 1
	$(CC) $(CFLAGS_O) -UPERLDLL $(OBJOUT_FLAG)$@@ -c perlmain.c
d1018 1
d1024 6
d1045 6
d1053 1
d1055 1
a1055 1
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic
d1057 7
a1063 1
Extensions_static : buildext.pl
d1065 1
a1065 1
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
d1070 1
a1070 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext clean
d1074 1
a1074 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext realclean
d1079 1
a1079 1
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=./html \
d1121 1
d1123 1
d1131 1
a1131 1
	copy ..\pod\perl588delta.pod ..\pod\perldelta.pod
a1140 2
# the doubled rmdir calls are needed because older cmd shells
# don't understand /q
d1143 2
a1144 1
		$(PERLIMPLIB) ..\miniperl.lib $(MINIMOD)
d1146 1
a1146 2
	-del /f $(EXTENSION_DLL)
	-del /f $(EXTENSION_C) $(DYNALOADER).c $(ERRNO).pm
a1157 1
	-del /f $(LIBDIR)\ByteLoader.pm
d1163 1
a1167 1
	-del /f $(LIBDIR)\Thread\Signal.pm $(LIBDIR)\Thread\Specific.pm
d1171 1
d1173 3
a1175 2
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO
	-if exist $(LIBDIR)\IO rmdir /s $(LIBDIR)\IO
d1177 1
a1177 1
	-if exist $(LIBDIR)\B rmdir /s $(LIBDIR)\B
a1178 1
	-if exist $(LIBDIR)\Data rmdir /s $(LIBDIR)\Data
a1179 1
	-if exist $(LIBDIR)\Encode rmdir /s $(LIBDIR)\Encode
d1181 5
a1185 1
	-if exist $(LIBDIR)\Filter\Util rmdir /s $(LIBDIR)\Filter\Util
d1187 1
a1187 3
	-if exist $(LIBDIR)\MIME rmdir /s $(LIBDIR)\MIME
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\List rmdir /s $(LIBDIR)\List
a1188 1
	-if exist $(LIBDIR)\Scalar rmdir /s $(LIBDIR)\Scalar
a1189 1
	-if exist $(LIBDIR)\Sys rmdir /s $(LIBDIR)\Sys
a1190 1
	-if exist $(LIBDIR)\threads rmdir /s $(LIBDIR)\threads
d1192 1
a1192 1
	-if exist $(LIBDIR)\XS rmdir /s $(LIBDIR)\XS
d1201 4
a1204 3
	    perlos400.pod perlplan9.pod perlqnx.pod perlsolaris.pod \
	    perltru64.pod perltw.pod perluts.pod perlvmesa.pod perlvms.pod \
	    perlvms.pod perlvos.pod perlwin32.pod \
d1208 2
a1209 2
	    perldoc perlivp dprofpp perlcc libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove
d1211 2
a1212 1
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new
a1219 1
	-if exist $(AUTODIR) rmdir /s $(AUTODIR)
d1221 3
a1223 1
	-if exist $(COREDIR) rmdir /s $(COREDIR)
d1230 1
d1237 1
a1237 1
	$(RCOPY) html\*.* $(INST_HTML)\*.*
d1246 1
a1246 1
	..\$(MINIPERL) -I.. mktables
d1257 1
a1257 1
test-prep : all utils
d1267 19
a1299 2
# the doubled rmdir calls are needed because older cmd shells
# don't understand /q
d1305 1
d1311 2
d1315 1
a1316 1
	-if exist $(MINIDIR) rmdir /s $(MINIDIR)
a1317 1
	-if exist $(UNIDATADIR1) rmdir /s $(UNIDATADIR1)
a1318 1
	-if exist $(UNIDATADIR2) rmdir /s $(UNIDATADIR2)
d1330 3
a1332 1
clean : Extensions_clean _clean
d1334 1
a1334 1
realclean : Extensions_realclean _clean
@


1.9
log
@sync in-tree perl with 5.8.6
@
text
@d4 1
a4 1
#	Visual C++ 2.0 through 6.0 (and possibly newer versions)
d35 1
a35 1
#INST_VER = \5.8.6
d46 9
a54 1
#INST_ARCH = \$(ARCHNAME)
d60 1
a60 1
USE_MULTI = define
d67 1
a67 1
USE_ITHREADS = define
d74 1
a74 1
USE_IMP_SYS = define
d88 1
a88 1
USE_LARGE_FILES = define
d101 1
a101 2
# uncomment one of the following lines if you are using either
# Visual C++ 2.x or Visual C++ 6.x (aka Visual Studio 98)
d103 1
d105 3
d109 4
d169 1
a169 1
#DEBUG_MSTATS  = define
d187 10
d199 1
d218 1
d246 5
d253 1
a253 1
DEBUG_MSTATS   = undef
d257 1
a257 1
DEBUG_MSTATS   = undef
d261 1
a261 1
BUILDOPT       = $(BUILDOPT) -DPERL_DEBUGGING_MSTATS
d272 2
a273 2
!IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
d309 4
d360 4
a363 5
# Visual Studio 98 specific
!IF "$(CCTYPE)" == "MSVC60"

# VC 6.0 can load the socket dll on demand.  Makes the test suite
# run in about 10% less time.
d443 8
d469 2
a470 1
CFLAGS		= -nologo -Gf -W3 $(INCLUDES) $(DEFINES) $(LOCDEFS) \
d517 1
a517 1
CONFIGPM	= ..\lib\Config.pm
d593 1
a593 1
NOOP		= @@echo
d694 1
d736 4
d881 1
a881 1
		"ccflags=-nologo -Gf -W3 $(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
d898 1
d988 1
d992 2
a993 2
$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES)
	$(LINK32) -dll -def:perldll.def -base:0x28000000 -out:$@@ @@<<
d1059 1
a1059 1
#----------------------------------------------------------------------------------
d1061 2
a1062 2
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR)
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext
d1064 4
a1067 2
# Note: The next two targets explicitly remove a "blibdirs.exists" file that
# currerntly gets left behind, until CPAN RT Ticket #5616 is resolved.
a1071 1
	-if exist $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists del /f $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists
a1075 1
	-if exist $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists del /f $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists
d1077 1
a1077 1
#----------------------------------------------------------------------------------
d1109 1
d1116 1
d1130 1
a1130 1
	copy ..\pod\perl586delta.pod ..\pod\perldelta.pod
d1190 4
d1201 6
a1206 6
	    perljp.pod perlko.pod perlmachten.pod perlmacos.pod \
	    perlmacosx.pod perlmint.pod perlmpeix.pod perlnetware.pod \
	    perlos2.pod perlos390.pod perlos400.pod perlplan9.pod \
	    perlqnx.pod perlsolaris.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvms.pod perlvms.pod perlvos.pod \
	    perlwin32.pod \
d1216 1
d1263 1
a1263 1
	$(PERLEXE) -I..\lib harness
d1269 1
a1269 1
	$(PERLEXE) -I..\lib harness
d1277 1
a1277 1
       $(PERLEXE) -I..\lib harness
d1309 1
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d35 1
a35 1
#INST_VER = \5.8.5
d329 1
a329 1
DELAYLOAD	= -DELAYLOAD:wsock32.dll -DELAYLOAD:shell32.dll delayimp.lib
d415 1
a415 1
		netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
d842 1
a845 1
		"usethreads=$(USE_5005THREADS)"		\
d1077 1
a1077 1
	copy ..\pod\perl585delta.pod ..\pod\perldelta.pod
@


1.7
log
@merge local changes into perl-5.8.3
@
text
@d35 1
a35 1
#INST_VER = \5.8.3
a374 3
PERLEXE_RES	=
PERLDLL_RES	=

d383 9
a391 2
OPTIMIZE	= -MD -DNDEBUG
LINK_DBG	= -release
d477 14
d722 1
d753 1
d784 2
a785 1
		$(UNICODENORMALIZE).c
d816 2
a817 1
		$(UNICODENORMALIZE_DLL)
d856 1
a856 1
all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(PERLEXE) \
d947 5
d1011 4
d1018 7
d1077 1
a1077 1
	copy ..\pod\perl583delta.pod ..\pod\perldelta.pod
d1089 1
a1089 1
distclean: clean
d1096 4
d1101 1
a1101 1
	-del /f $(LIBDIR)\XSLoader.pm
d1106 1
a1106 1
	-del /f $(LIBDIR)\Data\Dumper.pm $(LIBDIR)\ByteLoader.pm
d1108 1
a1110 1
	-del /f $(LIBDIR)\Filter\Util\Call.pm
d1112 1
d1115 3
a1117 4
	-del /f $(LIBDIR)\MIME\Base64.pm
	-del /f $(LIBDIR)\MIME\QuotedPrint.pm
	-del /f $(LIBDIR)\List\Util.pm
	-del /f $(LIBDIR)\Scalar\Util.pm
a1118 2
	-del /f $(LIBDIR)\XS\APItest.pm
	-del /f $(LIBDIR)\XS\Typemap.pm
d1120 1
d1127 2
a1130 2
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest
	-if exist $(LIBDIR)\Digest rmdir /s $(LIBDIR)\Digest
d1139 1
a1139 2
	cd $(PODDIR)
	-del /f *.html *.bat checkpods \
d1152 4
a1155 9
	cd ..\utils
	-del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs perldoc perlivp \
	    dprofpp perlcc libnetcfg enc2xs piconv cpan xsubpp instmodsh prove
	-del /f *.bat
	cd ..\win32
	cd ..\x2p
	-del /f find2perl s2p psed
	-del /f *.bat
	cd ..\win32
d1159 3
a1161 6
	cd ..
	-del /s *.lib *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib
	cd win32
	cd $(EXTDIR)
	-del /s *.def Makefile Makefile.old
	cd ..\win32
d1173 2
d1185 8
a1192 2
minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) utils
	$(XCOPY) $(MINIPERL) ..\t\perl.exe
d1195 2
a1196 4
	copy test ..\t
	cd ..\t
	$(MINIPERL) -I..\lib test base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t
	cd ..\win32
d1222 3
a1224 1
clean : Extensions_clean
d1238 5
d1251 4
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d35 1
a35 1
#INST_VER = \5.8.2
d498 3
a511 1
		..\lib\ExtUtils\xsubpp	\
d995 3
a1001 36
	copy ..\README.aix      .\perlaix.pod
	copy ..\README.amiga    .\perlamiga.pod
	copy ..\README.apollo   .\perlapollo.pod
	copy ..\README.beos     .\perlbeos.pod
	copy ..\README.bs2000   .\perlbs2000.pod
	copy ..\README.ce       .\perlce.pod
	copy ..\README.cn       .\perlcn.pod
	copy ..\README.cygwin   .\perlcygwin.pod
	copy ..\README.dgux     .\perldgux.pod
	copy ..\README.dos      .\perldos.pod
	copy ..\README.epoc     .\perlepoc.pod
	copy ..\README.freebsd  .\perlfreebsd.pod
	copy ..\README.hpux     .\perlhpux.pod
	copy ..\README.hurd     .\perlhurd.pod
	copy ..\README.irix     .\perlirix.pod
	copy ..\README.jp       .\perljp.pod
	copy ..\README.ko       .\perlko.pod
	copy ..\README.machten  .\perlmachten.pod
	copy ..\README.macos    .\perlmacos.pod
	copy ..\README.macosx   .\perlmacosx.pod
	copy ..\README.mint     .\perlmint.pod
	copy ..\README.mpeix    .\perlmpeix.pod
	copy ..\README.netware  .\perlnetware.pod
	copy ..\README.os2      .\perlos2.pod
	copy ..\README.os390    .\perlos390.pod
	copy ..\README.os400    .\perlos400.pod
	copy ..\README.plan9    .\perlplan9.pod
	copy ..\README.qnx      .\perlqnx.pod
	copy ..\README.solaris  .\perlsolaris.pod
	copy ..\README.tru64    .\perltru64.pod
	copy ..\README.tw       .\perltw.pod
	copy ..\README.uts      .\perluts.pod
	copy ..\README.vmesa    .\perlvmesa.pod
	copy ..\README.vms      .\perlvms.pod
	copy ..\README.vos      .\perlvos.pod
	copy ..\README.win32    .\perlwin32.pod
d1003 37
d1046 3
d1101 5
a1105 4
	    perlbs2000.pod perlce.pod perlcygwin.pod perldgux.pod \
	    perldos.pod perlepoc.pod perlfreebsd.pod perlhurd.pod \
	    perlhpux.pod perlirix.pod perlmachten.pod \
	    perlmacos.pod perlmint.pod perlmpeix.pod perlnetware.pod \
d1107 4
a1110 3
	    perlqnx.pod perlsolaris.pod perltru64.pod perluts.pod \
	    perlvmesa.pod perlvms.pod perlvos.pod \
	    perlwin32.pod pod2html pod2latex pod2man pod2text pod2usage \
d1114 1
a1114 1
	    dprofpp perlcc libnetcfg enc2xs piconv cpan
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d35 1
a35 1
#INST_VER = \5.8.0
d77 6
d97 1
a97 1
#CCTYPE		= MSVC60
d127 3
a129 3
# if you have the source for des_fcrypt(), uncomment this and make sure the
# file exists (see README.win32).  File should be located in the same
# directory as this file.
d131 1
a131 1
#CRYPT_SRC	= fcrypt.c
d150 8
d221 9
d260 4
d497 1
d553 1
d818 1
d824 1
d876 1
d1002 2
a1003 1
	copy ..\README.ce	.\perlce.pod
d1008 2
a1009 1
	copy ..\README.freebsd     .\perlfreebsd.pod
a1010 1
	copy ..\README.hpux     .\perlhpux.pod
d1012 2
d1016 1
d1022 1
d1027 1
d1030 1
a1030 1
	copy ..\vms\perlvms.pod .\perlvms.pod
d1033 1
d1040 2
d1072 1
a1072 1
	-rmdir /s $(LIBDIR)\IO
d1074 1
a1074 1
	-rmdir /s $(LIBDIR)\B
d1076 1
a1076 1
	-rmdir /s $(LIBDIR)\Data
d1078 1
d1080 1
a1080 1
	-rmdir /s $(LIBDIR)\Digest
d1082 1
a1082 1
	-rmdir /s $(LIBDIR)\MIME
d1084 1
a1084 1
	-rmdir /s $(LIBDIR)\List
d1086 1
a1086 1
	-rmdir /s $(LIBDIR)\Scalar
d1088 1
a1088 1
	-rmdir /s $(LIBDIR)\XS
d1096 2
a1097 2
	    perlos2.pod perlos390.pod perlplan9.pod perlqnx.pod \
	    perlsolaris.pod perltru64.pod perluts.pod \
d1103 1
a1103 1
	    dprofpp perlcc libnetcfg enc2xs piconv
d1120 1
a1120 1
	-rmdir /s $(AUTODIR)
d1122 1
a1122 1
	-rmdir /s $(COREDIR)
a1164 13
test-wide : test-prep
	set HARNESS_PERL_SWITCHES=-C
	cd ..\t
	$(PERLEXE) -I..\lib harness
	cd ..\win32

test-wide-notty : test-prep
	set PERL_SKIP_TTY_TEST=1
	set HARNESS_PERL_SWITCHES=-C
	cd ..\t
	$(PERLEXE) -I..\lib harness
	cd ..\win32

d1186 1
a1186 1
	-rmdir /s $(MINIDIR)
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 6
a13 3
## If you want a configuration that is the same as ActivePerl (see
## www.ActiveState.com) make sure you set at least BUILD_FLAVOR below!
##
d20 2
a21 2
# Set these to wherever you want "nmake install" to put your newly
# built perl.  Setting it to a path with spaces is NOT recommended.
a26 60
# uncomment one of the following lines if you are using either
# Visual C++ 2.x, or Visual C++ 5.x (aka Visual Studio 97) _without_
# service pack 3 applied.
#
# If you have 5.x SP3 or later, or 6.x, no change is required.
#
#CCTYPE		= MSVC20
#CCTYPE		= MSVC_PRE_50SP3

#
# set the install locations of the compiler include/libraries. Running
# VCVARS32.BAT is *required* when using Visual C.  Some versions of
# Visual C earlier than 5.x SP3 don't define MSVCDIR in the environment.
# If such is the case you may have to set CCHOME explicitly.  Spaces in
# the path name should not be quoted.
#
# If you have run VCVARS32.BAT and have VC 5.x SP3 or later, the defaults
# should just work.
#
#CCHOME		= f:\msvc20
CCHOME		= $(MSVCDIR)
CCINCDIR	= $(CCHOME)\include
CCLIBDIR	= $(CCHOME)\lib

#
# if you have the source for des_fcrypt(), uncomment CRYPT_SRC and make sure
# the file exists (see README.win32).  File should be located in the same
# directory as this makefile.
#
# If you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment CRYPT_LIB, and make sure the library exists (see
# README.win32).  Specify the full pathname of the library.
#
# If you don't enable one of these, the crypt() builtin will fail to work.
# (Generally not critical.)
#
#CRYPT_SRC	= fcrypt.c
#CRYPT_LIB	= fcrypt.lib

#
# uncomment this option if you want to bulk-enable all the options that
# ActiveState uses to build their ActivePerl distribution.  If you set this,
# there should be no need to set any of the other options that follow.
#
# If you don't enable this, the defaults below will get you the most
# efficient perl configuration possible that will also be compatible
# with the build defaults used on Unix platforms.  On the other hand,
# the ActivePerl configuration will get you fork() emulation at the
# cost of some added bloat.
#
#BUILD_FLAVOR	= ActivePerl

#
# uncomment next line if you want debug version of perl (big and slow).
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		= Debug

#
d35 1
a35 1
INST_VER = \5.6.1
d46 1
a46 1
INST_ARCH = \$(ARCHNAME)
d50 1
a50 1
# emulation.
d52 1
a52 1
#USE_MULTI = define
d55 1
a55 1
# Beginnings of interpreter cloning/threads; still very incomplete.
d59 1
a59 1
#USE_ITHREADS = define
d66 9
a74 1
#USE_IMP_SYS = define
d84 1
a84 1
#USE_5005THREADS= define
d87 6
a92 2
# WARNING! This option is deprecated and will eventually go away (enable
# USE_MULTI instead).
d94 3
a96 4
# uncomment next line if you want to use the PERL_OBJECT build option.
# DO NOT ENABLE unless you have legacy code that relies on the C++
# CPerlObj class that was available in 5.005.  This cannot be enabled
# if you ask for USE_5005THREADS or USE_MULTI above.
d98 1
a98 1
#USE_OBJECT	= define
d104 1
a104 1
# Get it from CPAN at http://www.perl.com/CPAN/authors/id/D/DO/DOUGL/
d113 1
a113 1
# compiler. Setting this option enables perl to expand wildcards in
d115 2
a116 3
# File::DosGlob that are more powerful, or use perl inside shells
# that do the expansion for you.  This option is supported only
# with Visual C.
d121 14
d144 12
a197 13
!IF "$(BUILD_FLAVOR)" == "ActivePerl"
INST_VER	= 
INST_ARCH	= 
USE_MULTI	= define
USE_ITHREADS	= define
USE_IMP_SYS	= define
USE_5005THREADS	= undef
USE_OBJECT	= undef
USE_PERLCRT	= undef
USE_SETARGV	=
PERL_MALLOC	= undef
!ENDIF

a204 7
!IF "$(USE_OBJECT)" == "define"
PERL_MALLOC	= undef
USE_5005THREADS	= undef
USE_MULTI	= undef
USE_IMP_SYS	= define
!ENDIF

a220 4
!IF "$(CCTYPE)" == ""
CCTYPE		= MSVC60
!ENDIF

a224 4
!IF "$(USE_OBJECT)" == ""
USE_OBJECT	= undef
!ENDIF

d233 4
d241 1
a241 1
!IF "$(USE_IMP_SYS)$(USE_MULTI)$(USE_5005THREADS)$(USE_OBJECT)" == "defineundefundefundef"
d245 1
a245 1
!IF "$(USE_ITHREADS)$(USE_MULTI)$(USE_OBJECT)" == "defineundefundef"
d250 1
a250 1
!IF "$(USE_MULTI)$(USE_5005THREADS)$(USE_OBJECT)" != "undefundefundef"
d262 7
a268 2
!IF "$(USE_OBJECT)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-object
d270 5
d281 3
d289 4
d299 1
d302 1
a302 1
DELAYLOAD	= -DELAYLOAD:wsock32.dll -DELAYLOAD:shell32.dll delayimp.lib 
a304 1

d336 1
a336 1
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX 
d357 1
a357 1
LINK_DBG	= -debug -pdb:none
d359 10
a368 6
# -O1 yields smaller code, which turns out to be faster than -O2
OPTIMIZE	= -O1 -MD -DNDEBUG
# VC 6.0 seems capable of compiling perl correctly with optimizations
# enabled.  Anything earlier fails tests.
!  IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC_PRE_50SP3"
OPTIMIZE	= -Od -MD -DNDEBUG
a369 1
LINK_DBG	= -release
d372 3
a374 4

!IF "$(USE_OBJECT)" == "define"
OPTIMIZE	= $(OPTIMIZE) $(CXX_FLAG)
BUILDOPT	= $(BUILDOPT) -DPERL_OBJECT
d385 6
a390 1
		version.lib odbc32.lib odbccp32.lib
d412 1
a412 1
# 
d424 1
a424 1
	    -out:$@@ $(LINK_FLAGS) $(LIBFILES) $< $(LIBPERL)  
d431 5
a435 2
PERLIMPLIB	= ..\perl56.lib
PERLDLL		= ..\perl56.dll
d446 6
d462 1
d466 4
d479 1
d481 1
d489 1
d491 4
d497 1
d504 2
d521 1
d523 1
d531 2
d534 1
a552 1
!IF "$(USE_OBJECT)" != "define"
a553 1
!ENDIF
d558 7
a564 1
		.\win32thread.c 
d642 61
a702 43
DYNAMIC_EXT	= Socket IO Fcntl Opcode SDBM_File POSIX attrs Thread B re \
		Data/Dumper Devel/Peek ByteLoader Devel/DProf File/Glob \
		Sys/Hostname
STATIC_EXT	= DynaLoader
NONXS_EXT	= Errno

DYNALOADER	= $(EXTDIR)\DynaLoader\DynaLoader
SOCKET		= $(EXTDIR)\Socket\Socket
FCNTL		= $(EXTDIR)\Fcntl\Fcntl
OPCODE		= $(EXTDIR)\Opcode\Opcode
SDBM_FILE	= $(EXTDIR)\SDBM_File\SDBM_File
IO		= $(EXTDIR)\IO\IO
POSIX		= $(EXTDIR)\POSIX\POSIX
ATTRS		= $(EXTDIR)\attrs\attrs
THREAD		= $(EXTDIR)\Thread\Thread
B		= $(EXTDIR)\B\B
RE		= $(EXTDIR)\re\re
DUMPER		= $(EXTDIR)\Data\Dumper\Dumper
ERRNO		= $(EXTDIR)\Errno\Errno
PEEK		= $(EXTDIR)\Devel\Peek\Peek
BYTELOADER	= $(EXTDIR)\ByteLoader\ByteLoader
DPROF		= $(EXTDIR)\Devel\DProf\DProf
GLOB		= $(EXTDIR)\File\Glob\Glob
HOSTNAME	= $(EXTDIR)\Sys\Hostname\Hostname

SOCKET_DLL	= $(AUTODIR)\Socket\Socket.dll
FCNTL_DLL	= $(AUTODIR)\Fcntl\Fcntl.dll
OPCODE_DLL	= $(AUTODIR)\Opcode\Opcode.dll
SDBM_FILE_DLL	= $(AUTODIR)\SDBM_File\SDBM_File.dll
IO_DLL		= $(AUTODIR)\IO\IO.dll
POSIX_DLL	= $(AUTODIR)\POSIX\POSIX.dll
ATTRS_DLL	= $(AUTODIR)\attrs\attrs.dll
THREAD_DLL	= $(AUTODIR)\Thread\Thread.dll
B_DLL		= $(AUTODIR)\B\B.dll
DUMPER_DLL	= $(AUTODIR)\Data\Dumper\Dumper.dll
PEEK_DLL	= $(AUTODIR)\Devel\Peek\Peek.dll
RE_DLL		= $(AUTODIR)\re\re.dll
BYTELOADER_DLL	= $(AUTODIR)\ByteLoader\ByteLoader.dll
DPROF_DLL	= $(AUTODIR)\Devel\DProf\DProf.dll
GLOB_DLL	= $(AUTODIR)\File\Glob\Glob.dll
HOSTNAME_DLL	= $(AUTODIR)\Sys\Hostname\Hostname.dll

ERRNO_PM	= $(LIBDIR)\Errno.pm
d720 14
a733 1
		$(HOSTNAME).c
d751 14
a764 4
		$(HOSTNAME_DLL)

EXTENSION_PM	=		\
		$(ERRNO_PM)
d778 3
a780 2
		"ccflags=-nologo $(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
		"cf_email=$(EMAIL)"			\
d788 1
a788 4
		"make=nmake"				\
		"static_ext=$(STATIC_EXT)"		\
		"dynamic_ext=$(DYNAMIC_EXT)"		\
		"nonxs_ext=$(NONXS_EXT)"		\
d793 1
d802 2
a803 1
	$(X2P) $(EXTENSION_DLL) $(EXTENSION_PM)
d811 1
a811 1
	    perlglob$(o) setargv$(o) 
d827 1
a827 1
# compiler (e.g. `dmake CCTYPE=BORLAND regen_config_h`)
d831 1
a831 1
	-del /f perl.exe
d836 1
a836 1
	-perl -I..\lib config_h.PL "INST_VER=$(INST_VER)"
d840 3
a842 1
	cd .. && miniperl configpm
d848 2
a849 2
	$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)" \
	    || $(MAKE) /$(MAKEFLAGS) $(CONFIGPM)
d867 1
a867 1
!IF "$(USE_IMP_SYS)$(USE_OBJECT)" == "defineundef"
d892 3
a894 1
	cd .. && miniperl minimod.pl > lib\ExtUtils\Miniperl.pm
d918 1
a918 1
perlmain.c : runperl.c 
d929 1
a929 1
	copy splittree.pl .. 
d947 3
a949 23
$(DUMPER_DLL): $(PERLEXE) $(DUMPER).xs
	cd $(EXTDIR)\Data\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

$(DPROF_DLL): $(PERLEXE) $(DPROF).xs
	cd $(EXTDIR)\Devel\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

$(GLOB_DLL): $(PERLEXE) $(GLOB).xs
	cd $(EXTDIR)\File\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

$(PEEK_DLL): $(PERLEXE) $(PEEK).xs
	cd $(EXTDIR)\Devel\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32
d951 2
a952 5
$(RE_DLL): $(PERLEXE) $(RE).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32
d954 1
a954 71
$(B_DLL): $(PERLEXE) $(B).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(THREAD_DLL): $(PERLEXE) $(THREAD).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(ATTRS_DLL): $(PERLEXE) $(ATTRS).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(POSIX_DLL): $(PERLEXE) $(POSIX).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(IO_DLL): $(PERLEXE) $(IO).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(SDBM_FILE_DLL) : $(PERLEXE) $(SDBM_FILE).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(FCNTL_DLL): $(PERLEXE) $(FCNTL).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(OPCODE_DLL): $(PERLEXE) $(OPCODE).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(SOCKET_DLL): $(PERLEXE) $(SOCKET).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(HOSTNAME_DLL): $(PERLEXE) $(HOSTNAME).xs
	cd $(EXTDIR)\Sys\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

$(BYTELOADER_DLL): $(PERLEXE) $(BYTELOADER).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(ERRNO_PM): $(PERLEXE) $(ERRNO)_pm.PL
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32
d965 30
a994 17
	copy ..\README.aix	.\perlaix.pod
	copy ..\README.amiga	.\perlamiga.pod
	copy ..\README.bs2000	.\perlbs2000.pod
	copy ..\README.cygwin	.\perlcygwin.pod
	copy ..\README.dos	.\perldos.pod
	copy ..\README.epoc	.\perlepoc.pod
	copy ..\README.hpux	.\perlhpux.pod
	copy ..\README.machten	.\perlmachten.pod
	copy ..\README.macos	.\perlmacos.pod
	copy ..\README.mpeix	.\perlmpeix.pod
	copy ..\README.os2	.\perlos2.pod
	copy ..\README.os390	.\perlos390.pod
	copy ..\README.solaris	.\perlsolaris.pod
	copy ..\README.vmesa	.\perlvmesa.pod
	copy ..\vms\perlvms.pod	.\perlvms.pod
	copy ..\README.vos	.\perlvos.pod
	copy ..\README.win32	.\perlwin32.pod
d996 2
d1005 1
a1005 1
	-del /f $(EXTENSION_DLL) $(EXTENSION_PM)
d1007 1
a1007 1
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs $(EXTDIR)\DynaLoader\DynaLoader.pm
d1009 1
a1009 2
	-del /f $(LIBDIR)\XSLoader.pm $(EXTDIR)\DynaLoader\XSLoader.pm
	-del /f $(LIBDIR)\Devel\.exists $(LIBDIR)\File\.exists $(LIBDIR)\Sys\.exists
d1011 1
a1011 1
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm $(LIBDIR)\Thread.pm
d1013 1
a1013 1
	-del /f $(LIBDIR)\B.pm $(EXTDIR)\B\defsubs.h $(LIBDIR)\O.pm $(LIBDIR)\re.pm
d1017 30
a1046 4
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO || rmdir /s $(LIBDIR)\IO
	-if exist $(LIBDIR)\Thread rmdir /s /q $(LIBDIR)\Thread || rmdir /s $(LIBDIR)\Thread
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B || rmdir /s $(LIBDIR)\B
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data || rmdir /s $(LIBDIR)\Data
d1049 8
a1056 4
	    perlaix.pod perlamiga.pod perlbs2000.pod perlcygwin.pod \
	    perldos.pod perlepoc.pod perlhpux.pod perlmachten.pod \
	    perlmacos.pod perlmpeix.pod perlos2.pod perlos390.pod \
	    perlsolaris.pod perlvmesa.pod perlvms.pod perlvos.pod \
d1060 3
a1062 2
	-del /f h2ph splain perlbug pl2pm c2ph h2xs perldoc dprofpp \
	    *.bat perlcc pstruct
d1065 1
a1065 1
	-del /f find2perl s2p
d1071 3
d1075 1
a1075 1
	-del /s *.lib *.def *.map *.pdb *.bs Makefile *$(o) pm_to_blib
d1077 4
a1080 2
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR) || rmdir /s $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR) || rmdir /s $(COREDIR)
d1094 1
a1094 1
	copy splittree.pl .. 
d1136 31
a1166 22
clean : 
	-@@erase miniperlmain$(o)
	-@@erase $(MINIPERL)
	-@@erase perlglob$(o)
	-@@erase perlmain$(o)
	-@@erase config.w32
	-@@erase /f config.h
	-@@erase $(GLOBEXE)
	-@@erase $(PERLEXE)
	-@@erase $(WPERLEXE)
	-@@erase $(PERLDLL)
	-@@erase $(CORE_OBJ)
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR) || rmdir /s $(MINIDIR)
	-@@erase $(WIN32_OBJ)
	-@@erase $(DLL_OBJ)
	-@@erase $(X2P_OBJ)
	-@@erase ..\*$(o) ..\*.lib ..\*.exp *$(o) *.lib *.exp *.res
	-@@erase ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@erase ..\x2p\*.exe ..\x2p\*.bat
	-@@erase *.ilk
	-@@erase *.pdb
 
d1176 1
a1176 1
 
d1179 1
a1179 1
 
@


1.3
log
@perl-5.6.0 + local changes
@
text
@a3 3
# This is set up to build a perl.exe that runs off a shared library
# (perl56.dll).  Also makes individual DLLs for the XS extensions.
#
d8 3
d17 2
a18 2
# Set these to wherever you want "nmake install" to put your
# newly built perl.
d24 60
d92 1
a92 1
INST_VER	= \5.6.0
d103 1
a103 1
INST_ARCH	= \$(ARCHNAME)
d109 1
a109 1
#USE_MULTI	= define
d116 1
a116 1
#USE_ITHREADS	= define
d123 1
a123 1
#USE_IMP_SYS	= define
d142 1
a142 1
# if you ask for USE_5005THREADS above.
a146 12
# uncomment one of the following lines if you are using either
# Visual C++ 2.x or Visual C++ 6.x (aka Visual Studio 98)
#
#CCTYPE		= MSVC20
#CCTYPE		= MSVC60

#
# uncomment next line if you want debug version of perl (big,slow)
#
#CFG		= Debug

#
d159 1
a159 1
# compiler. Setting this options enables perl to expand wildcards in
d161 3
a163 2
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
a167 14
# if you have the source for des_fcrypt(), uncomment this and make sure the
# file exists (see README.win32).  File should be located in the same
# directory as this file.
#
#CRYPT_SRC	= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	= fcrypt.lib

#
a176 12
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
#CCHOME		= f:\msvc20
CCHOME		= $(MSVCDIR)
CCINCDIR	= $(CCHOME)\include
CCLIBDIR	= $(CCHOME)\lib

#
d219 13
d262 4
a326 1

d330 1
a331 6
# VC 6.0 seems capable of compiling perl correctly with optimizations
# enabled.  Anything earlier fails tests.
!IF "$(CFG)" == ""
CFG		= Optimize
!ENDIF
!ENDIF
d348 1
a348 1
INST_HTML	= $(INST_POD)\html
a386 1
!  IF  "$(CFG)" == "Optimize"
a387 1
#OPTIMIZE	= -O2 -MD -DNDEBUG
d389 3
a391 1
!  ELSE
d397 1
d725 1
a725 1
		"ccflags=$(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
d868 1
a868 1
	$(LINK32) -subsystem:console -out:$@@ -stack:0x8000000 $(LINK_FLAGS) \
d1001 17
a1017 8
	copy ..\README.amiga .\perlamiga.pod
	copy ..\README.cygwin .\perlcygwin.pod
	copy ..\README.dos .\perldos.pod
	copy ..\README.hpux .\perlhpux.pod
	copy ..\README.machten .\perlmachten.pod
	copy ..\README.os2 .\perlos2.pod
	copy ..\vms\perlvms.pod .\perlvms.pod
	copy ..\README.win32 .\perlwin32.pod
d1028 1
a1028 1
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs
d1030 2
a1031 1
	-del /f $(LIBDIR)\XSLoader.pm
d1035 1
a1035 1
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
d1039 12
a1050 6
	-rmdir /s /q $(LIBDIR)\IO || rmdir /s $(LIBDIR)\IO
	-rmdir /s /q $(LIBDIR)\Thread || rmdir /s $(LIBDIR)\Thread
	-rmdir /s /q $(LIBDIR)\B || rmdir /s $(LIBDIR)\B
	-rmdir /s /q $(LIBDIR)\Data || rmdir /s $(LIBDIR)\Data
	-del /f $(PODDIR)\*.html
	-del /f $(PODDIR)\*.bat
d1052 2
a1053 2
	-del /f h2ph splain perlbug pl2pm c2ph h2xs perldoc dprofpp
	-del /f *.bat
d1065 2
a1066 2
	-rmdir /s /q $(AUTODIR) || rmdir /s $(AUTODIR)
	-rmdir /s /q $(COREDIR) || rmdir /s $(COREDIR)
d1134 1
a1134 1
	-rmdir /s /q $(MINIDIR) || rmdir /s $(MINIDIR)
d1143 16
@


1.2
log
@perl5.005_03 (stock)
@
text
@d5 1
a5 1
# (perl.dll).  Also makes individual DLLs for the XS extensions.
d32 1
a32 1
INST_VER	= \5.00503
d35 7
a41 1
# uncomment to enable threads-capabilities
d43 1
a43 1
#USE_THREADS	= define
d46 2
a47 1
# uncomment to enable multiple interpreters
d52 3
a54 1
# uncomment next line if you are using Visual C++ 2.x
d56 18
a73 1
#CCTYPE		= MSVC20
d76 2
a77 2
# uncomment next line if you want to use the perl object
# Currently, this cannot be enabled if you ask for threads above
d79 6
a84 1
#OBJECT		= -DPERL_OBJECT
d87 2
a88 1
# uncomment next line if you want debug version of perl (big,slow)
d90 2
a91 1
#CFG		= Debug
d94 1
a94 5
# uncomment next option if you want to use the VC++ compiler optimization.
# Warning: This is known to produce incorrect code for compiler versions
# earlier than VC++ 98 (Visual Studio 6.0). VC++ 98 generates code that
# successfully passes the Perl regression test suite. It hasn't yet been
# widely tested with real applications though.
d96 1
a96 1
#CFG		= Optimize
d100 2
a101 2
# Highly recommended.  It has patches that fix known bugs in MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3.
d105 2
d137 1
a137 1
# if you ask for PERL_OBJECT above.
d154 25
d188 1
a188 1
#EMAIL		= 
d203 1
a203 1
!IF "$(OBJECT)" != ""
d205 1
a205 1
USE_THREADS	= undef
d207 1
d214 10
a223 2
!IF "$(USE_THREADS)" == ""
USE_THREADS	= undef
d230 32
a261 2
#BUILDOPT	= -DPERL_GLOBAL_STRUCT
# -DUSE_PERLIO -D__STDC__=1 -DUSE_SFIO -DI_SFIO -I\sfio97\include
d267 1
a267 1
!IF "$(OBJECT)" != ""
d270 1
a270 1
!IF "$(USE_THREADS)" == "define"
d273 3
d279 19
d302 13
d320 2
a321 2
CC		= cl.exe
LINK32		= link.exe
d323 1
a328 1
RUNTIME		= -MD
d331 1
a331 1
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(BUILDOPT) $(CRYPT_FLAG)
d336 2
a337 6
!IF "$(USE_PERLCRT)" == ""
!   IF  "$(CFG)" == "Debug"
PERLCRTLIBC	= msvcrtd.lib
!   ELSE
PERLCRTLIBC	= msvcrt.lib
!   ENDIF
d339 1
a339 5
!   IF  "$(CFG)" == "Debug"
PERLCRTLIBC	= PerlCRTD.lib
!   ELSE
PERLCRTLIBC	= PerlCRT.lib
!   ENDIF
d342 2
a343 5
!IF "$(RUNTIME)" == "-MD"
LIBC		= $(PERLCRTLIBC)
!ELSE
LIBC		= libcmt.lib
!ENDIF
d347 1
a347 1
OPTIMIZE	= -Od $(RUNTIME) -Z7 -D_DEBUG -DDEBUGGING
d349 1
a349 1
OPTIMIZE	= -Od $(RUNTIME)d -Zi -D_DEBUG -DDEBUGGING
d354 3
a356 1
OPTIMIZE	= -O2 $(RUNTIME) -DNDEBUG
d358 1
a358 1
OPTIMIZE	= -Od $(RUNTIME) -DNDEBUG
d363 1
a363 1
!IF "$(OBJECT)" != ""
d365 1
d368 8
a375 3
LIBBASEFILES	= $(CRYPT_LIB) oldnames.lib kernel32.lib user32.lib gdi32.lib \
		winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib \
		oleaut32.lib netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
d383 3
a385 1
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) -machine:$(PROCESSOR_ARCHITECTURE)
d389 1
a389 1
CFLAGS_O	= $(CFLAGS) $(OBJECT)
d400 1
a400 1
.SUFFIXES : .c $(o) .dll .lib .exe
d412 2
a413 10
#
INST_BIN	= $(INST_TOP)$(INST_VER)\bin\$(ARCHNAME)
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_POD	= $(INST_LIB)\pod
INST_HTML	= $(INST_POD)\html
LIBDIR		= ..\lib
EXTDIR		= ..\ext
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\extutils
d417 2
a418 9
!IF "$(OBJECT)" == "-DPERL_OBJECT"
PERLIMPLIB	= ..\perlcore.lib
PERLDLL		= ..\perlcore.dll
CAPILIB		= $(COREDIR)\perlCAPI.lib
!ELSE
PERLIMPLIB	= ..\perl.lib
PERLDLL		= ..\perl.dll
CAPILIB		=
!ENDIF
d423 1
d435 1
a440 1
		..\utils\pstruct	\
d447 3
d452 1
a452 1
		bin\www.pl		\
a462 4
!IF "$(USE_PERLCRT)" == ""
PERL95EXE	= ..\perl95.exe
!ENDIF

a475 1
		..\byterun.c	\
d486 1
d500 5
a504 1
		..\util.c
d510 1
a510 1
!IF "$(OBJECT)" == ""
d516 2
a517 5
		.\win32sck.c

!IF "$(USE_THREADS)" == "define"
WIN32_SRC	= $(WIN32_SRC) .\win32thread.c 
!ENDIF
a522 9
PERL95_SRC	=		\
		perl95.c	\
		win32mt.c	\
		win32sckmt.c

!IF "$(CRYPT_SRC)" != ""
PERL95_SRC	= $(PERL95_SRC) .\$(CRYPT_SRC)
!ENDIF

a524 5

!IF "$(OBJECT)" == ""
DLL_SRC		= $(DLL_SRC) perllib.c
!ENDIF

a533 2
		..\byterun.h	\
		..\bytecode.h	\
d548 1
d559 1
d561 1
a581 1
PERL95_OBJ	= $(PERL95_SRC:.c=.obj)
a587 1
!IF "$(OBJECT)" == ""
d589 1
a589 4
!ELSE
PERLEXE_OBJ	= $(PERLEXE_OBJ) $(WIN32_OBJ) $(DLL_OBJ)
PERL95_OBJ	= $(PERL95_OBJ) DynaLoadmt$(o)
!ENDIF
d596 2
a597 1
		Data/Dumper
d614 5
d630 1
d632 4
d650 6
a655 1
		$(B).c
d666 8
a673 1
		$(B_DLL)
a677 7
!IF "$(OBJECT)" == ""
EXTENSION_DLL	= 		\
		$(EXTENSION_DLL)\
		$(THREAD_DLL)	\
		$(RE_DLL)
!ENDIF

d687 1
d690 1
a690 1
		"ccflags=$(OPTIMIZE:"=\") $(DEFINES) $(OBJECT)"	\
d703 3
a705 1
		"usethreads=$(USE_THREADS)"		\
d714 2
a715 2
all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(PERLEXE) $(PERL95EXE) \
	$(CAPILIB) $(X2P) $(EXTENSION_DLL) $(EXTENSION_PM)
d770 1
a770 1
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ ..\$(*F).c
d775 7
a788 1
$(PERL95_OBJ)	: $(CORE_H)
d791 2
a792 2
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym makedef.pl
	$(MINIPERL) -w makedef.pl $(OPTIMIZE) $(DEFINES) $(OBJECT) \
d795 3
a797 3
$(PERLDLL): perldll.def $(PERLDLL_OBJ)
	$(LINK32) -dll -def:perldll.def -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(PERLDLL_OBJ)
a800 3
perl.def  : $(MINIPERL) makeperldef.pl
	$(MINIPERL) -I..\lib makeperldef.pl $(NULL) > perl.def

d832 5
a836 3
$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ)
	$(LINK32) -subsystem:console -out:$@@ $(LINK_FLAGS) $(LIBFILES) \
	    $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) 
a839 27
!IF "$(USE_PERLCRT)" == ""

perl95.c : runperl.c 
	copy runperl.c perl95.c

perl95$(o) : perl95.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c perl95.c

win32sckmt$(o) : win32sck.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)win32sckmt$(o) win32sck.c

win32mt$(o) : win32.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)win32mt$(o) win32.c

DynaLoadmt$(o) : $(DYNALOADER).c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)DynaLoadmt$(o) $(DYNALOADER).c

$(PERL95EXE): $(PERLDLL) $(CONFIGPM) $(PERL95_OBJ)
	$(LINK32) -subsystem:console -nodefaultlib -out:$@@ $(LINK_FLAGS) \
	    $(LIBBASEFILES) $(PERL95_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) \
	    libcmt.lib

!ENDIF

d844 1
d847 1
a851 12
!IF "$(OBJECT)" == "-DPERL_OBJECT"
perlCAPI.cpp : $(MINIPERL)
	$(MINIPERL) GenCAPI.pl $(COREDIR)

perlCAPI$(o) : perlCAPI.cpp
	$(CC) $(CFLAGS_O) $(RUNTIME) -UPERLDLL -c \
	    $(OBJOUT_FLAG)perlCAPI$(o) perlCAPI.cpp

$(CAPILIB) : perlCAPI.cpp perlCAPI$(o)
	lib /OUT:$(CAPILIB) perlCAPI$(o)
!ENDIF

d861 18
d939 12
d966 7
d979 1
a979 1
	-del /f $(MINIPERL) $(PERLEXE) $(PERL95EXE) $(PERLDLL) $(GLOBEXE) \
d986 1
d991 3
a993 1
	-del /f $(LIBDIR)\Data\Dumper.pm
d1001 1
a1001 1
	-del /f h2ph splain perlbug pl2pm c2ph h2xs perldoc pstruct
a1009 1
	-del /f perl95.c
d1021 1
a1021 3
!IF "$(USE_PERLCRT)" == ""
	$(XCOPY) $(PERL95EXE) $(INST_BIN)\*.*
!ENDIF
a1023 1
	$(XCOPY) bin\network.pl $(INST_LIB)\*.*
d1058 13
a1077 1
	-@@erase perlCAPI.cpp
d1080 1
a1082 1
	-@@erase $(CAPILIB)
d1087 1
a1087 1
	-@@erase ..\*$(o) ..\*.lib ..\*.exp ..\*.res *$(o) *.lib *.exp *.res
@


1.1
log
@perl 5.004_04
@
text
@d1 959
a959 517
#
# Makefile to build perl on Windowns NT using Microsoft NMAKE.
#
#
# This is set up to build a perl.exe that runs off a shared library
# (perl.dll).  Also makes individual DLLs for the XS extensions.
#

#
# Set these to wherever you want "nmake install" to put your
# newly built perl.
INST_DRV=c:
INST_TOP=$(INST_DRV)\perl

#
# uncomment next line if you are using Visual C++ 2.x
#CCTYPE=MSVC20

#
# uncomment next line if you want debug version of perl (big,slow)
#CFG=Debug

#
# set the install locations of the compiler include/libraries
#CCHOME = f:\msvc20
CCHOME = $(MSVCDIR)
CCINCDIR = $(CCHOME)\include
CCLIBDIR = $(CCHOME)\lib

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#EMAIL = 

##################### CHANGE THESE ONLY IF YOU MUST #####################

#
# Programs to compile, build .lib files and link
#

CC=cl.exe
LINK32=link.exe
LIB32=$(LINK32) -lib
#
# Options
#
!IF "$(RUNTIME)" == ""
RUNTIME  = -MD
!ENDIF
INCLUDES = -I.\include -I. -I..
#PCHFLAGS = -Fp"$(INTDIR)/modules.pch" -YX 
DEFINES  = -DWIN32 -D_CONSOLE -DPERLDLL
SUBSYS   = console

!IF "$(RUNTIME)" == "-MD"
LIBC = msvcrt.lib
WINIOMAYBE =
!ELSE
LIBC = libcmt.lib
WINIOMAYBE = win32io.obj
!ENDIF

!IF  "$(CFG)" == "Debug"
!  IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE = -Od $(RUNTIME) -Z7 -D_DEBUG
!  ELSE
OPTIMIZE = -Od $(RUNTIME)d -Z7 -D_DEBUG
!  ENDIF
LINK_DBG = -debug -pdb:none
!ELSE
!  IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE = -Od $(RUNTIME) -DNDEBUG
!  ELSE
OPTIMIZE = -Od $(RUNTIME) -DNDEBUG
!  ENDIF
LINK_DBG = -release
!ENDIF

# we don't add LIBC here, the compiler do it based on -MD/-MT
LIBFILES = oldnames.lib kernel32.lib user32.lib gdi32.lib \
	winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib \
	oleaut32.lib netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
	version.lib odbc32.lib odbccp32.lib

CFLAGS   = -nologo -W3 $(INCLUDES) $(DEFINES) $(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS  = -nologo $(LIBFILES) $(LINK_DBG) -machine:I386
OBJOUT_FLAG = -Fo

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

#
# Rules
# 
.SUFFIXES : 
.SUFFIXES : .c .obj .dll .lib .exe

.c.obj:
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $<

.obj.dll:
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(LINK_FLAGS) $< $(LIBPERL)  

#
INST_BIN=$(INST_TOP)\bin
INST_LIB=$(INST_TOP)\lib
INST_POD=$(INST_LIB)\pod
INST_HTML=$(INST_POD)\html
LIBDIR=..\lib
EXTDIR=..\ext
PODDIR=..\pod
EXTUTILSDIR=$(LIBDIR)\extutils

#
# various targets
PERLIMPLIB=..\perl.lib
MINIPERL=..\miniperl.exe
PERLDLL=..\perl.dll
PERLEXE=..\perl.exe
GLOBEXE=..\perlglob.exe
CONFIGPM=..\lib\Config.pm
MINIMOD=..\lib\ExtUtils\Miniperl.pm

PL2BAT=bin\pl2bat.pl
GLOBBAT = bin\perlglob.bat

MAKE=nmake -nologo
CFGSH_TMPL = config.vc
CFGH_TMPL = config_H.vc
PERL95EXE=..\perl95.exe
XCOPY=xcopy /f /r /i /d
RCOPY=xcopy /f /r /i /e /d
NULL=

#
# filenames given to xsubpp must have forward slashes (since it puts
# full pathnames in #line strings)
XSUBPP=..\$(MINIPERL) -I..\..\lib ..\$(EXTUTILSDIR)\xsubpp -C++ -prototypes

CORE_C=	..\av.c		\
	..\deb.c	\
	..\doio.c	\
	..\doop.c	\
	..\dump.c	\
	..\globals.c	\
	..\gv.c		\
	..\hv.c		\
	..\mg.c		\
	..\op.c		\
	..\perl.c	\
	..\perlio.c	\
	..\perly.c	\
	..\pp.c		\
	..\pp_ctl.c	\
	..\pp_hot.c	\
	..\pp_sys.c	\
	..\regcomp.c	\
	..\regexec.c	\
	..\run.c	\
	..\scope.c	\
	..\sv.c		\
	..\taint.c	\
	..\toke.c	\
	..\universal.c	\
	..\util.c

CORE_OBJ= ..\av.obj	\
	..\deb.obj	\
	..\doio.obj	\
	..\doop.obj	\
	..\dump.obj	\
	..\globals.obj	\
	..\gv.obj	\
	..\hv.obj	\
	..\mg.obj	\
	..\op.obj	\
	..\perl.obj	\
	..\perlio.obj	\
	..\perly.obj	\
	..\pp.obj	\
	..\pp_ctl.obj	\
	..\pp_hot.obj	\
	..\pp_sys.obj	\
	..\regcomp.obj	\
	..\regexec.obj	\
	..\run.obj	\
	..\scope.obj	\
	..\sv.obj	\
	..\taint.obj	\
	..\toke.obj	\
	..\universal.obj\
	..\util.obj

WIN32_C = perllib.c \
	win32.c \
	win32io.c \
	win32sck.c

WIN32_OBJ = win32.obj \
	win32io.obj \
	win32sck.obj

PERL95_OBJ = perl95.obj \
	win32mt.obj \
	win32iomt.obj \
	win32sckmt.obj

DLL_OBJ = perllib.obj $(DYNALOADER).obj

CORE_H = ..\av.h	\
	..\cop.h	\
	..\cv.h		\
	..\dosish.h	\
	..\embed.h	\
	..\form.h	\
	..\gv.h		\
	..\handy.h	\
	..\hv.h		\
	..\mg.h		\
	..\nostdio.h	\
	..\op.h		\
	..\opcode.h	\
	..\perl.h	\
	..\perlio.h	\
	..\perlsdio.h	\
	..\perlsfio.h	\
	..\perly.h	\
	..\pp.h		\
	..\proto.h	\
	..\regexp.h	\
	..\scope.h	\
	..\sv.h		\
	..\unixish.h	\
	..\util.h	\
	..\XSUB.h	\
	.\config.h	\
	..\EXTERN.h	\
	.\include\dirent.h	\
	.\include\netdb.h	\
	.\include\sys\socket.h	\
	.\win32.h

EXTENSIONS=DynaLoader Socket IO Fcntl Opcode SDBM_File

DYNALOADER=$(EXTDIR)\DynaLoader\DynaLoader
SOCKET=$(EXTDIR)\Socket\Socket
FCNTL=$(EXTDIR)\Fcntl\Fcntl
OPCODE=$(EXTDIR)\Opcode\Opcode
SDBM_FILE=$(EXTDIR)\SDBM_File\SDBM_File
IO=$(EXTDIR)\IO\IO

SOCKET_DLL=..\lib\auto\Socket\Socket.dll
FCNTL_DLL=..\lib\auto\Fcntl\Fcntl.dll
OPCODE_DLL=..\lib\auto\Opcode\Opcode.dll
SDBM_FILE_DLL=..\lib\auto\SDBM_File\SDBM_File.dll
IO_DLL=..\lib\auto\IO\IO.dll

STATICLINKMODULES=DynaLoader
DYNALOADMODULES=	\
	$(SOCKET_DLL)	\
	$(FCNTL_DLL)	\
	$(OPCODE_DLL)	\
	$(SDBM_FILE_DLL)\
	$(IO_DLL)

POD2HTML=$(PODDIR)\pod2html
POD2MAN=$(PODDIR)\pod2man
POD2LATEX=$(PODDIR)\pod2latex
POD2TEXT=$(PODDIR)\pod2text

#
# Top targets
#

all: $(PERLEXE) $(PERL95EXE) $(GLOBEXE) $(DYNALOADMODULES) $(MINIMOD) $(GLOBBAT)

$(DYNALOADER).obj : $(DYNALOADER).c $(CORE_H) $(EXTDIR)\DynaLoader\dlutils.c

#------------------------------------------------------------

$(GLOBEXE): perlglob.obj
	$(LINK32) $(LINK_FLAGS) -out:$@@ -subsystem:$(SUBSYS) perlglob.obj setargv.obj 

$(GLOBBAT) : ..\lib\File\DosGlob.pm $(MINIPERL)
	$(MINIPERL) $(PL2BAT) - < ..\lib\File\DosGlob.pm > $(GLOBBAT)

perlglob.obj  : perlglob.c

..\miniperlmain.obj : ..\miniperlmain.c $(CORE_H)

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

.\config.h : $(CFGSH_TMPL)
	-del /f config.h
	copy $(CFGH_TMPL) config.h

..\config.sh : config.w32 $(MINIPERL) config_sh.PL
	$(MINIPERL) -I..\lib config_sh.PL "INST_DRV=$(INST_DRV)" \
	    "INST_TOP=$(INST_TOP)" "cc=$(CC)" "ccflags=$(RUNTIME) -DWIN32" \
	    "cf_email=$(EMAIL)" "libs=$(LIBFILES)" "incpath=$(CCINCDIR)" \
	    "libpth=$(CCLIBDIR)" "libc=$(LIBC)" \
	    config.w32 > ..\config.sh

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
	cd .. && miniperl configpm
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h ..\lib\CORE\*.*
	$(XCOPY) *.h ..\lib\CORE\*.*
	$(RCOPY) include ..\lib\CORE\*.*
	$(MINIPERL) -I..\lib config_h.PL || $(MAKE) CCTYPE=$(CCTYPE) \
	    RUNTIME=$(RUNTIME) CFG=$(CFG) $(CONFIGPM)

$(MINIPERL) : ..\miniperlmain.obj $(CORE_OBJ) $(WIN32_OBJ)
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) ..\miniperlmain.obj $(CORE_OBJ) $(WIN32_OBJ)
<<

$(WIN32_OBJ) : $(CORE_H)
$(CORE_OBJ)  : $(CORE_H)
$(DLL_OBJ)   : $(CORE_H) 

perldll.def : $(MINIPERL) $(CONFIGPM)
	$(MINIPERL) -w makedef.pl $(CCTYPE) > perldll.def

$(PERLDLL): perldll.def $(CORE_OBJ) $(WIN32_OBJ) $(DLL_OBJ)
	$(LINK32) -dll -def:perldll.def -out:$@@ @@<<
		$(LINK_FLAGS) $(CORE_OBJ) $(WIN32_OBJ) $(DLL_OBJ)
<<
	$(XCOPY) $(PERLIMPLIB) ..\lib\CORE

perl.def  : $(MINIPERL) makeperldef.pl
	$(MINIPERL) -I..\lib makeperldef.pl $(NULL) > perl.def

$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd .. && miniperl minimod.pl > lib\ExtUtils\Miniperl.pm

perlmain.c : runperl.c 
	copy runperl.c perlmain.c

perlmain.obj : perlmain.c
	$(CC) $(CFLAGS) -UPERLDLL -c perlmain.c

$(PERLEXE): $(PERLDLL) $(CONFIGPM) perlmain.obj  
	$(LINK32) -subsystem:console -out:perl.exe $(LINK_FLAGS) \
	    perlmain.obj $(WINIOMAYBE) $(PERLIMPLIB) 
	copy perl.exe $@@
	del perl.exe
	copy splittree.pl .. 
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" "../LIB/auto"
	attrib -r ..\t\*.*
	copy test ..\t

perl95.c : runperl.c 
	copy runperl.c perl95.c

perl95.obj : perl95.c
	$(CC) $(CFLAGS) -MT -UPERLDLL -c perl95.c

win32iomt.obj : win32io.c
	$(CC) $(CFLAGS) -MT -c $(OBJOUT_FLAG)win32iomt.obj win32io.c

win32sckmt.obj : win32sck.c
	$(CC) $(CFLAGS) -MT -c $(OBJOUT_FLAG)win32sckmt.obj win32sck.c

win32mt.obj : win32.c
	$(CC) $(CFLAGS) -MT -c $(OBJOUT_FLAG)win32mt.obj win32.c

$(PERL95EXE): $(PERLDLL) $(CONFIGPM) $(PERL95_OBJ)
	$(LINK32) -subsystem:console -out:perl95.exe $(LINK_FLAGS) \
	    $(PERL95_OBJ) $(PERLIMPLIB) 
	copy perl95.exe $@@
	del perl95.exe

$(DYNALOADER).c: $(MINIPERL) $(EXTDIR)\DynaLoader\dl_win32.xs $(CONFIGPM)
	if not exist ..\lib\auto md ..\lib\auto
	$(XCOPY) $(EXTDIR)\$(*B)\$(*B).pm $(LIBDIR)\$(NULL)
	cd $(EXTDIR)\$(*B)
	$(XSUBPP) dl_win32.xs > $(*B).c
	cd ..\..\win32

$(EXTDIR)\DynaLoader\dl_win32.xs: dl_win32.xs
	copy dl_win32.xs $(EXTDIR)\DynaLoader\dl_win32.xs

$(IO_DLL): $(PERLEXE) $(CONFIGPM) $(IO).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(SDBM_FILE_DLL) : $(PERLEXE) $(SDBM_FILE).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(FCNTL_DLL): $(PERLEXE) $(FCNTL).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(OPCODE_DLL): $(PERLEXE) $(OPCODE).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(SOCKET_DLL): $(SOCKET).xs $(PERLEXE)
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

doc: $(PERLEXE)
	cd ..\pod
	$(MAKE) -f ..\win32\pod.mak checkpods pod2html pod2latex \
		pod2man pod2text
	$(XCOPY) *.bat ..\win32\bin\*.*
	cd ..\win32
	copy ..\README.win32 ..\pod\perlwin32.pod
	$(PERLEXE) ..\installhtml --podroot=.. --htmldir=./html \
	    --podpath=pod:lib:ext:utils --htmlroot="//$(INST_HTML::=|)" \
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse

utils: $(PERLEXE)
	cd ..\utils
	nmake PERL=$(MINIPERL)
	$(PERLEXE) ..\win32\$(PL2BAT) h2ph splain perlbug pl2pm c2ph
	$(PERLEXE) ..\win32\$(PL2BAT) h2xs perldoc pstruct
	$(XCOPY) *.bat ..\win32\bin\*.*
	cd ..\win32
	$(PERLEXE) $(PL2BAT) bin\network.pl bin\www.pl bin\runperl.pl \
			bin\pl2bat.pl

distclean: clean
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl.lib $(MINIMOD)
	-del /f *.def *.map
	-del /f $(SOCKET_DLL) $(IO_DLL) $(SDBM_FILE_DLL) $(FCNTL_DLL) \
		$(OPCODE_DLL)
	-del /f $(SOCKET).c $(IO).c $(SDBM_FILE).c $(FCNTL).c $(OPCODE).c \
		$(DYNALOADER).c
	-del /f $(PODDIR)\*.html
	-del /f $(PODDIR)\*.bat
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c \
		config.h.new perl95.c
	-del /f bin\*.bat
	-rmdir /s /q ..\lib\auto
	-rmdir /s /q ..\lib\CORE
	cd $(EXTDIR)
	-del /s *.lib *.def *.map *.bs Makefile *.obj pm_to_blib
	cd ..\win32

install : all doc utils
	if not exist $(INST_TOP) mkdir $(INST_TOP)
	echo I $(INST_TOP) L $(LIBDIR)
	$(XCOPY) $(PERLEXE) $(INST_BIN)\*.*
	$(XCOPY) $(PERL95EXE) $(INST_BIN)\*.*
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	$(XCOPY) $(PERLDLL) $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_BIN)\*.*
	$(RCOPY) ..\lib $(INST_LIB)\*.*
	$(XCOPY) ..\pod\*.bat $(INST_BIN)\*.*
	$(XCOPY) ..\pod\*.pod $(INST_POD)\*.*
	$(RCOPY) html\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	copy splittree.pl .. 
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" "../LIB/auto"
	$(RCOPY) ..\lib $(INST_LIB)\*.*

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM)
	$(XCOPY) $(MINIPERL) ..\t\perl.exe
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	attrib -r ..\t\*.*
	copy test ..\t
	cd ..\t
	$(MINIPERL) -I..\lib test base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t
	cd ..\win32

test-prep : all
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)

test : test-prep
	cd ..\t
	$(PERLEXE) -I..\lib harness
	cd ..\win32

test-notty : test-prep
	set PERL_SKIP_TTY_TEST=1
	cd ..\t
	$(PERLEXE) -I..\lib harness
	cd ..\win32

clean : 
	-@@erase miniperlmain.obj
	-@@erase $(MINIPERL)
	-@@erase perlglob.obj
	-@@erase perlmain.obj
	-@@erase config.w32
	-@@erase /f config.h
	-@@erase $(GLOBEXE)
	-@@erase $(PERLEXE)
	-@@erase $(PERLDLL)
	-@@erase $(CORE_OBJ)
	-@@erase $(WIN32_OBJ)
	-@@erase $(DLL_OBJ)
	-@@erase ..\*.obj ..\*.lib ..\*.exp *.obj *.lib *.exp
	-@@erase ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@erase *.ilk
	-@@erase *.pdb


@


1.1.1.1
log
@perl5.005_03
@
text
@d1 517
a517 959
#
# Makefile to build perl on Windows NT using Microsoft NMAKE.
#
# This is set up to build a perl.exe that runs off a shared library
# (perl.dll).  Also makes individual DLLs for the XS extensions.
#

##
## Make sure you read README.win32 *before* you mess with anything here!
##

##
## Build configuration.  Edit the values below to suit your needs.
##

#
# Set these to wherever you want "nmake install" to put your
# newly built perl.
#
INST_DRV	= c:
INST_TOP	= $(INST_DRV)\perl

#
# Comment this out if you DON'T want your perl installation to be versioned.
# This means that the new installation will overwrite any files from the
# old installation at the same INST_TOP location.  Leaving it enabled is
# the safest route, as perl adds the extra version directory to all the
# locations it installs files to.  If you disable it, an alternative
# versioned installation can be obtained by setting INST_TOP above to a
# path that includes an arbitrary version string.
#
INST_VER	= \5.00503

#
# uncomment to enable threads-capabilities
#
#USE_THREADS	= define

#
# uncomment to enable multiple interpreters
#
#USE_MULTI	= define

#
# uncomment next line if you are using Visual C++ 2.x
#
#CCTYPE		= MSVC20

#
# uncomment next line if you want to use the perl object
# Currently, this cannot be enabled if you ask for threads above
#
#OBJECT		= -DPERL_OBJECT

#
# uncomment next line if you want debug version of perl (big,slow)
#
#CFG		= Debug

#
# uncomment next option if you want to use the VC++ compiler optimization.
# Warning: This is known to produce incorrect code for compiler versions
# earlier than VC++ 98 (Visual Studio 6.0). VC++ 98 generates code that
# successfully passes the Perl regression test suite. It hasn't yet been
# widely tested with real applications though.
#
#CFG		= Optimize

#
# uncomment to enable use of PerlCRT.DLL when using the Visual C compiler.
# Highly recommended.  It has patches that fix known bugs in MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3.
# Get it from CPAN at http://www.perl.com/CPAN/authors/id/D/DO/DOUGL/
# and follow the directions in the package to install.
#
#USE_PERLCRT	= define

#
# uncomment to enable linking with setargv.obj under the Visual C
# compiler. Setting this options enables perl to expand wildcards in
# arguments, but it may be harder to use alternate methods like
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
#
#USE_SETARGV	= define

#
# if you have the source for des_fcrypt(), uncomment this and make sure the
# file exists (see README.win32).  File should be located in the same
# directory as this file.
#
#CRYPT_SRC	= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	= fcrypt.lib

#
# set this if you wish to use perl's malloc
# WARNING: Turning this on/off WILL break binary compatibility with extensions
# you may have compiled with/without it.  Be prepared to recompile all
# extensions if you change the default.  Currently, this cannot be enabled
# if you ask for PERL_OBJECT above.
#
#PERL_MALLOC	= define

#
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
#CCHOME		= f:\msvc20
CCHOME		= $(MSVCDIR)
CCINCDIR	= $(CCHOME)\include
CCLIBDIR	= $(CCHOME)\lib

#
# specify semicolon-separated list of extra directories that modules will
# look for libraries (spaces in path names need not be quoted)
#
EXTRALIBDIRS	=

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#
#EMAIL		= 

##
## Build configuration ends.
##

##################### CHANGE THESE ONLY IF YOU MUST #####################

!IF "$(CRYPT_SRC)$(CRYPT_LIB)" == ""
D_CRYPT		= undef
!ELSE
D_CRYPT		= define
CRYPT_FLAG	= -DHAVE_DES_FCRYPT
!ENDIF

!IF "$(OBJECT)" != ""
PERL_MALLOC	= undef
USE_THREADS	= undef
USE_MULTI	= undef
!ENDIF

!IF "$(PERL_MALLOC)" == ""
PERL_MALLOC	= undef
!ENDIF

!IF "$(USE_THREADS)" == ""
USE_THREADS	= undef
!ENDIF

!IF "$(USE_MULTI)" == ""
USE_MULTI	= undef
!ENDIF

#BUILDOPT	= -DPERL_GLOBAL_STRUCT
# -DUSE_PERLIO -D__STDC__=1 -DUSE_SFIO -DI_SFIO -I\sfio97\include

!IF "$(PROCESSOR_ARCHITECTURE)" == ""
PROCESSOR_ARCHITECTURE	= x86
!ENDIF

!IF "$(OBJECT)" != ""
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-object
!ELSE
!IF "$(USE_THREADS)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-thread
!ELSE
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)
!ENDIF
!ENDIF

ARCHDIR		= ..\lib\$(ARCHNAME)
COREDIR		= ..\lib\CORE
AUTODIR		= ..\lib\auto

#
# Programs to compile, build .lib files and link
#

CC		= cl.exe
LINK32		= link.exe
LIB32		= $(LINK32) -lib

#
# Options
#

RUNTIME		= -MD
INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX 
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(BUILDOPT) $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -TP -GX

!IF "$(USE_PERLCRT)" == ""
!   IF  "$(CFG)" == "Debug"
PERLCRTLIBC	= msvcrtd.lib
!   ELSE
PERLCRTLIBC	= msvcrt.lib
!   ENDIF
!ELSE
!   IF  "$(CFG)" == "Debug"
PERLCRTLIBC	= PerlCRTD.lib
!   ELSE
PERLCRTLIBC	= PerlCRT.lib
!   ENDIF
!ENDIF

!IF "$(RUNTIME)" == "-MD"
LIBC		= $(PERLCRTLIBC)
!ELSE
LIBC		= libcmt.lib
!ENDIF

!IF  "$(CFG)" == "Debug"
!  IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE	= -Od $(RUNTIME) -Z7 -D_DEBUG -DDEBUGGING
!  ELSE
OPTIMIZE	= -Od $(RUNTIME)d -Zi -D_DEBUG -DDEBUGGING
!  ENDIF
LINK_DBG	= -debug -pdb:none
!ELSE
!  IF  "$(CFG)" == "Optimize"
OPTIMIZE	= -O2 $(RUNTIME) -DNDEBUG
!  ELSE
OPTIMIZE	= -Od $(RUNTIME) -DNDEBUG
!  ENDIF
LINK_DBG	= -release
!ENDIF

!IF "$(OBJECT)" != ""
OPTIMIZE	= $(OPTIMIZE) $(CXX_FLAG)
!ENDIF

LIBBASEFILES	= $(CRYPT_LIB) oldnames.lib kernel32.lib user32.lib gdi32.lib \
		winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib \
		oleaut32.lib netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib

# we add LIBC here, since we may be using PerlCRT.dll
LIBFILES	= $(LIBBASEFILES) $(LIBC)

CFLAGS		= -nologo -Gf -W3 $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) -machine:$(PROCESSOR_ARCHITECTURE)
OBJOUT_FLAG	= -Fo
EXEOUT_FLAG	= -Fe

CFLAGS_O	= $(CFLAGS) $(OBJECT)

#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

o = .obj

#
# Rules
# 

.SUFFIXES : .c $(o) .dll .lib .exe

.c$(o):
	$(CC) -c -I$(<D) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $<

.y.c:
	$(NOOP)

$(o).dll:
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(LINK_FLAGS) $(LIBFILES) $< $(LIBPERL)  

#
INST_BIN	= $(INST_TOP)$(INST_VER)\bin\$(ARCHNAME)
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_POD	= $(INST_LIB)\pod
INST_HTML	= $(INST_POD)\html
LIBDIR		= ..\lib
EXTDIR		= ..\ext
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\extutils

#
# various targets
!IF "$(OBJECT)" == "-DPERL_OBJECT"
PERLIMPLIB	= ..\perlcore.lib
PERLDLL		= ..\perlcore.dll
CAPILIB		= $(COREDIR)\perlCAPI.lib
!ELSE
PERLIMPLIB	= ..\perl.lib
PERLDLL		= ..\perl.dll
CAPILIB		=
!ENDIF

MINIPERL	= ..\miniperl.exe
MINIDIR		= .\mini
PERLEXE		= ..\perl.exe
GLOBEXE		= ..\perlglob.exe
CONFIGPM	= ..\lib\Config.pm
MINIMOD		= ..\lib\ExtUtils\Miniperl.pm
X2P		= ..\x2p\a2p.exe

PL2BAT		= bin\pl2bat.pl
GLOBBAT		= bin\perlglob.bat

UTILS		=			\
		..\utils\h2ph		\
		..\utils\splain		\
		..\utils\perlbug	\
		..\utils\pl2pm 		\
		..\utils\c2ph		\
		..\utils\h2xs		\
		..\utils\perldoc	\
		..\utils\pstruct	\
		..\utils\perlcc		\
		..\pod\checkpods	\
		..\pod\pod2html		\
		..\pod\pod2latex	\
		..\pod\pod2man		\
		..\pod\pod2text		\
		..\x2p\find2perl	\
		..\x2p\s2p		\
		bin\www.pl		\
		bin\runperl.pl		\
		bin\pl2bat.pl		\
		bin\perlglob.pl		\
		bin\search.pl

MAKE		= nmake -nologo

CFGSH_TMPL	= config.vc
CFGH_TMPL	= config_H.vc

!IF "$(USE_PERLCRT)" == ""
PERL95EXE	= ..\perl95.exe
!ENDIF

XCOPY		= xcopy /f /r /i /d
RCOPY		= xcopy /f /r /i /e /d
NOOP		= @@echo
NULL		=

#
# filenames given to xsubpp must have forward slashes (since it puts
# full pathnames in #line strings)
XSUBPP		= ..\$(MINIPERL) -I..\..\lib ..\$(EXTUTILSDIR)\xsubpp \
		-C++ -prototypes

MICROCORE_SRC	=		\
		..\av.c		\
		..\byterun.c	\
		..\deb.c	\
		..\doio.c	\
		..\doop.c	\
		..\dump.c	\
		..\globals.c	\
		..\gv.c		\
		..\hv.c		\
		..\mg.c		\
		..\op.c		\
		..\perl.c	\
		..\perly.c	\
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_hot.c	\
		..\pp_sys.c	\
		..\regcomp.c	\
		..\regexec.c	\
		..\run.c	\
		..\scope.c	\
		..\sv.c		\
		..\taint.c	\
		..\toke.c	\
		..\universal.c	\
		..\util.c

!IF "$(PERL_MALLOC)" == "define"
EXTRACORE_SRC	= $(EXTRACORE_SRC) ..\malloc.c
!ENDIF

!IF "$(OBJECT)" == ""
EXTRACORE_SRC	= $(EXTRACORE_SRC) ..\perlio.c
!ENDIF

WIN32_SRC	=		\
		.\win32.c	\
		.\win32sck.c

!IF "$(USE_THREADS)" == "define"
WIN32_SRC	= $(WIN32_SRC) .\win32thread.c 
!ENDIF

!IF "$(CRYPT_SRC)" != ""
WIN32_SRC	= $(WIN32_SRC) .\$(CRYPT_SRC)
!ENDIF

PERL95_SRC	=		\
		perl95.c	\
		win32mt.c	\
		win32sckmt.c

!IF "$(CRYPT_SRC)" != ""
PERL95_SRC	= $(PERL95_SRC) .\$(CRYPT_SRC)
!ENDIF

DLL_SRC		= $(DYNALOADER).c


!IF "$(OBJECT)" == ""
DLL_SRC		= $(DLL_SRC) perllib.c
!ENDIF

X2P_SRC		=		\
		..\x2p\a2p.c	\
		..\x2p\hash.c	\
		..\x2p\str.c	\
		..\x2p\util.c	\
		..\x2p\walk.c

CORE_NOCFG_H	=		\
		..\av.h		\
		..\byterun.h	\
		..\bytecode.h	\
		..\cop.h	\
		..\cv.h		\
		..\dosish.h	\
		..\embed.h	\
		..\form.h	\
		..\gv.h		\
		..\handy.h	\
		..\hv.h		\
		..\iperlsys.h	\
		..\mg.h		\
		..\nostdio.h	\
		..\op.h		\
		..\opcode.h	\
		..\perl.h	\
		..\perlsdio.h	\
		..\perlsfio.h	\
		..\perly.h	\
		..\pp.h		\
		..\proto.h	\
		..\regexp.h	\
		..\scope.h	\
		..\sv.h		\
		..\thread.h	\
		..\unixish.h	\
		..\util.h	\
		..\XSUB.h	\
		..\EXTERN.h	\
		..\perlvars.h	\
		..\intrpvar.h	\
		..\thrdvar.h	\
		.\include\dirent.h	\
		.\include\netdb.h	\
		.\include\sys\socket.h	\
		.\win32.h

CORE_H		= $(CORE_NOCFG_H) .\config.h

MICROCORE_OBJ	= $(MICROCORE_SRC:.c=.obj)
CORE_OBJ	= $(MICROCORE_OBJ) $(EXTRACORE_SRC:.c=.obj)
WIN32_OBJ	= $(WIN32_SRC:.c=.obj)
MINICORE_OBJ	= $(MICROCORE_OBJ:..\=.\mini\)	\
		  $(MINIDIR)\miniperlmain$(o)	\
		  $(MINIDIR)\perlio$(o)
MINIWIN32_OBJ	= $(WIN32_OBJ:.\=.\mini\)
MINI_OBJ	= $(MINICORE_OBJ) $(MINIWIN32_OBJ)
PERL95_OBJ	= $(PERL95_SRC:.c=.obj)
DLL_OBJ		= $(DLL_SRC:.c=.obj)
X2P_OBJ		= $(X2P_SRC:.c=.obj)

PERLDLL_OBJ	= $(CORE_OBJ)
PERLEXE_OBJ	= perlmain$(o)

!IF "$(OBJECT)" == ""
PERLDLL_OBJ	= $(PERLDLL_OBJ) $(WIN32_OBJ) $(DLL_OBJ)
!ELSE
PERLEXE_OBJ	= $(PERLEXE_OBJ) $(WIN32_OBJ) $(DLL_OBJ)
PERL95_OBJ	= $(PERL95_OBJ) DynaLoadmt$(o)
!ENDIF

!IF "$(USE_SETARGV)" != ""
SETARGV_OBJ	= setargv$(o)
!ENDIF

DYNAMIC_EXT	= Socket IO Fcntl Opcode SDBM_File POSIX attrs Thread B re \
		Data/Dumper
STATIC_EXT	= DynaLoader
NONXS_EXT	= Errno

DYNALOADER	= $(EXTDIR)\DynaLoader\DynaLoader
SOCKET		= $(EXTDIR)\Socket\Socket
FCNTL		= $(EXTDIR)\Fcntl\Fcntl
OPCODE		= $(EXTDIR)\Opcode\Opcode
SDBM_FILE	= $(EXTDIR)\SDBM_File\SDBM_File
IO		= $(EXTDIR)\IO\IO
POSIX		= $(EXTDIR)\POSIX\POSIX
ATTRS		= $(EXTDIR)\attrs\attrs
THREAD		= $(EXTDIR)\Thread\Thread
B		= $(EXTDIR)\B\B
RE		= $(EXTDIR)\re\re
DUMPER		= $(EXTDIR)\Data\Dumper\Dumper
ERRNO		= $(EXTDIR)\Errno\Errno

SOCKET_DLL	= $(AUTODIR)\Socket\Socket.dll
FCNTL_DLL	= $(AUTODIR)\Fcntl\Fcntl.dll
OPCODE_DLL	= $(AUTODIR)\Opcode\Opcode.dll
SDBM_FILE_DLL	= $(AUTODIR)\SDBM_File\SDBM_File.dll
IO_DLL		= $(AUTODIR)\IO\IO.dll
POSIX_DLL	= $(AUTODIR)\POSIX\POSIX.dll
ATTRS_DLL	= $(AUTODIR)\attrs\attrs.dll
THREAD_DLL	= $(AUTODIR)\Thread\Thread.dll
B_DLL		= $(AUTODIR)\B\B.dll
DUMPER_DLL	= $(AUTODIR)\Data\Dumper\Dumper.dll
RE_DLL		= $(AUTODIR)\re\re.dll

ERRNO_PM	= $(LIBDIR)\Errno.pm

EXTENSION_C	= 		\
		$(SOCKET).c	\
		$(FCNTL).c	\
		$(OPCODE).c	\
		$(SDBM_FILE).c	\
		$(IO).c		\
		$(POSIX).c	\
		$(ATTRS).c	\
		$(THREAD).c	\
		$(RE).c		\
		$(DUMPER).c	\
		$(B).c

EXTENSION_DLL	= 		\
		$(SOCKET_DLL)	\
		$(FCNTL_DLL)	\
		$(OPCODE_DLL)	\
		$(SDBM_FILE_DLL)\
		$(IO_DLL)	\
		$(POSIX_DLL)	\
		$(ATTRS_DLL)	\
		$(DUMPER_DLL)	\
		$(B_DLL)

EXTENSION_PM	=		\
		$(ERRNO_PM)

!IF "$(OBJECT)" == ""
EXTENSION_DLL	= 		\
		$(EXTENSION_DLL)\
		$(THREAD_DLL)	\
		$(RE_DLL)
!ENDIF

POD2HTML	= $(PODDIR)\pod2html
POD2MAN		= $(PODDIR)\pod2man
POD2LATEX	= $(PODDIR)\pod2latex
POD2TEXT	= $(PODDIR)\pod2text

CFG_VARS	=					\
		"INST_DRV=$(INST_DRV)"			\
		"INST_TOP=$(INST_TOP)"			\
		"INST_VER=$(INST_VER)"			\
		"archname=$(ARCHNAME)"			\
		"cc=$(CC)"				\
		"ccflags=$(OPTIMIZE:"=\") $(DEFINES) $(OBJECT)"	\
		"cf_email=$(EMAIL)"			\
		"d_crypt=$(D_CRYPT)"			\
		"d_mymalloc=$(PERL_MALLOC)"		\
		"libs=$(LIBFILES)"			\
		"incpath=$(CCINCDIR:"=\")"		\
		"libperl=$(PERLIMPLIB:..\=)"		\
		"libpth=$(CCLIBDIR:"=\");$(EXTRALIBDIRS:"=\")"	\
		"libc=$(LIBC)"				\
		"make=nmake"				\
		"static_ext=$(STATIC_EXT)"		\
		"dynamic_ext=$(DYNAMIC_EXT)"		\
		"nonxs_ext=$(NONXS_EXT)"		\
		"usethreads=$(USE_THREADS)"		\
		"usemultiplicity=$(USE_MULTI)"		\
		"LINK_FLAGS=$(LINK_FLAGS:"=\")"		\
		"optimize=$(OPTIMIZE:"=\")"

#
# Top targets
#

all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(PERLEXE) $(PERL95EXE) \
	$(CAPILIB) $(X2P) $(EXTENSION_DLL) $(EXTENSION_PM)

$(DYNALOADER)$(o) : $(DYNALOADER).c $(CORE_H) $(EXTDIR)\DynaLoader\dlutils.c

#------------------------------------------------------------

$(GLOBEXE) : perlglob$(o)
	$(LINK32) $(LINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
	    perlglob$(o) setargv$(o) 

perlglob$(o)  : perlglob.c

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

.\config.h : $(CFGH_TMPL)
	-del /f config.h
	copy $(CFGH_TMPL) config.h

..\config.sh : config.w32 $(MINIPERL) config_sh.PL
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) config.w32 > ..\config.sh

# this target is for when changes to the main config.sh happen
# edit config.{b,v,g}c and make this target once for each supported
# compiler (e.g. `dmake CCTYPE=BORLAND regen_config_h`)
regen_config_h:
	perl config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh
	cd ..
	-del /f perl.exe
	perl configpm
	cd win32
	-del /f $(CFGH_TMPL)
	-mkdir $(COREDIR)
	-perl -I..\lib config_h.PL "INST_VER=$(INST_VER)"
	rename config.h $(CFGH_TMPL)

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
	cd .. && miniperl configpm
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(XCOPY) *.h $(COREDIR)\*.*
	$(XCOPY) ..\ext\re\re.pm $(LIBDIR)\*.*
	$(RCOPY) include $(COREDIR)\*.*
	$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)" \
	    || $(MAKE) /$(MAKEFLAGS) $(CONFIGPM)

$(MINIPERL) : $(MINIDIR) $(MINI_OBJ)
	$(LINK32) -subsystem:console -out:$@@ @@<<
	$(LINK_FLAGS) $(LIBFILES) $(MINI_OBJ)
<<

$(MINIDIR) :
	if not exist "$(MINIDIR)" mkdir "$(MINIDIR)"

$(MINICORE_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ ..\$(*F).c

$(MINIWIN32_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $(*F).c

# 1. we don't want to rebuild miniperl.exe when config.h changes
# 2. we don't want to rebuild miniperl.exe with non-default config.h
$(MINI_OBJ)	: $(CORE_NOCFG_H)

$(WIN32_OBJ)	: $(CORE_H)
$(CORE_OBJ)	: $(CORE_H)
$(DLL_OBJ)	: $(CORE_H)
$(PERL95_OBJ)	: $(CORE_H)
$(X2P_OBJ)	: $(CORE_H)

perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym makedef.pl
	$(MINIPERL) -w makedef.pl $(OPTIMIZE) $(DEFINES) $(OBJECT) \
	    CCTYPE=$(CCTYPE) > perldll.def

$(PERLDLL): perldll.def $(PERLDLL_OBJ)
	$(LINK32) -dll -def:perldll.def -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(PERLDLL_OBJ)
<<
	$(XCOPY) $(PERLIMPLIB) $(COREDIR)

perl.def  : $(MINIPERL) makeperldef.pl
	$(MINIPERL) -I..\lib makeperldef.pl $(NULL) > perl.def

$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd .. && miniperl minimod.pl > lib\ExtUtils\Miniperl.pm

..\x2p\a2p$(o) : ..\x2p\a2p.c
	$(CC) -I..\x2p $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\a2p.c

..\x2p\hash$(o) : ..\x2p\hash.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\hash.c

..\x2p\str$(o) : ..\x2p\str.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\str.c

..\x2p\util$(o) : ..\x2p\util.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\util.c

..\x2p\walk$(o) : ..\x2p\walk.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\walk.c

$(X2P) : $(MINIPERL) $(X2P_OBJ)
	$(MINIPERL) ..\x2p\find2perl.PL
	$(MINIPERL) ..\x2p\s2p.PL
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(X2P_OBJ)
<<

perlmain.c : runperl.c 
	copy runperl.c perlmain.c

perlmain$(o) : perlmain.c
	$(CC) $(CFLAGS_O) -UPERLDLL $(OBJOUT_FLAG)$@@ -c perlmain.c

$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ)
	$(LINK32) -subsystem:console -out:$@@ $(LINK_FLAGS) $(LIBFILES) \
	    $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) 
	copy splittree.pl .. 
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" $(AUTODIR)

!IF "$(USE_PERLCRT)" == ""

perl95.c : runperl.c 
	copy runperl.c perl95.c

perl95$(o) : perl95.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c perl95.c

win32sckmt$(o) : win32sck.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)win32sckmt$(o) win32sck.c

win32mt$(o) : win32.c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)win32mt$(o) win32.c

DynaLoadmt$(o) : $(DYNALOADER).c
	$(CC) $(CFLAGS_O) -MT -UPERLDLL -DWIN95FIX -c \
	    $(OBJOUT_FLAG)DynaLoadmt$(o) $(DYNALOADER).c

$(PERL95EXE): $(PERLDLL) $(CONFIGPM) $(PERL95_OBJ)
	$(LINK32) -subsystem:console -nodefaultlib -out:$@@ $(LINK_FLAGS) \
	    $(LIBBASEFILES) $(PERL95_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) \
	    libcmt.lib

!ENDIF

$(DYNALOADER).c: $(MINIPERL) $(EXTDIR)\DynaLoader\dl_win32.xs $(CONFIGPM)
	if not exist $(AUTODIR) mkdir $(AUTODIR)
	cd $(EXTDIR)\$(*B)
	..\$(MINIPERL) -I..\..\lib $(*B)_pm.PL
	cd ..\..\win32
	$(XCOPY) $(EXTDIR)\$(*B)\$(*B).pm $(LIBDIR)\$(NULL)
	cd $(EXTDIR)\$(*B)
	$(XSUBPP) dl_win32.xs > $(*B).c
	cd ..\..\win32

!IF "$(OBJECT)" == "-DPERL_OBJECT"
perlCAPI.cpp : $(MINIPERL)
	$(MINIPERL) GenCAPI.pl $(COREDIR)

perlCAPI$(o) : perlCAPI.cpp
	$(CC) $(CFLAGS_O) $(RUNTIME) -UPERLDLL -c \
	    $(OBJOUT_FLAG)perlCAPI$(o) perlCAPI.cpp

$(CAPILIB) : perlCAPI.cpp perlCAPI$(o)
	lib /OUT:$(CAPILIB) perlCAPI$(o)
!ENDIF

$(EXTDIR)\DynaLoader\dl_win32.xs: dl_win32.xs
	copy dl_win32.xs $(EXTDIR)\DynaLoader\dl_win32.xs

$(DUMPER_DLL): $(PERLEXE) $(DUMPER).xs
	cd $(EXTDIR)\Data\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

$(RE_DLL): $(PERLEXE) $(RE).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(B_DLL): $(PERLEXE) $(B).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(THREAD_DLL): $(PERLEXE) $(THREAD).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(ATTRS_DLL): $(PERLEXE) $(ATTRS).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(POSIX_DLL): $(PERLEXE) $(POSIX).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(IO_DLL): $(PERLEXE) $(IO).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(SDBM_FILE_DLL) : $(PERLEXE) $(SDBM_FILE).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(FCNTL_DLL): $(PERLEXE) $(FCNTL).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(OPCODE_DLL): $(PERLEXE) $(OPCODE).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(SOCKET_DLL): $(PERLEXE) $(SOCKET).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

$(ERRNO_PM): $(PERLEXE) $(ERRNO)_pm.PL
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

doc: $(PERLEXE)
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=./html \
	    --podpath=pod:lib:ext:utils --htmlroot="file://$(INST_HTML::=|)" \
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse

utils: $(PERLEXE) $(X2P)
	cd ..\utils
	$(MAKE) PERL=$(MINIPERL)
	cd ..\pod
	copy ..\README.win32 .\perlwin32.pod
	$(MAKE) -f ..\win32\pod.mak converters
	cd ..\win32
	$(PERLEXE) $(PL2BAT) $(UTILS)

distclean: clean
	-del /f $(MINIPERL) $(PERLEXE) $(PERL95EXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl.lib $(MINIMOD)
	-del /f *.def *.map
	-del /f $(EXTENSION_DLL) $(EXTENSION_PM)
	-del /f $(EXTENSION_C) $(DYNALOADER).c $(ERRNO).pm
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs
	-del /f $(LIBDIR)\.exists $(LIBDIR)\attrs.pm $(LIBDIR)\DynaLoader.pm
	-del /f $(LIBDIR)\Fcntl.pm $(LIBDIR)\IO.pm $(LIBDIR)\Opcode.pm
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm $(LIBDIR)\Thread.pm
	-del /f $(LIBDIR)\SDBM_File.pm $(LIBDIR)\Socket.pm $(LIBDIR)\POSIX.pm
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
	-del /f $(LIBDIR)\Data\Dumper.pm
	-rmdir /s /q $(LIBDIR)\IO || rmdir /s $(LIBDIR)\IO
	-rmdir /s /q $(LIBDIR)\Thread || rmdir /s $(LIBDIR)\Thread
	-rmdir /s /q $(LIBDIR)\B || rmdir /s $(LIBDIR)\B
	-rmdir /s /q $(LIBDIR)\Data || rmdir /s $(LIBDIR)\Data
	-del /f $(PODDIR)\*.html
	-del /f $(PODDIR)\*.bat
	cd ..\utils
	-del /f h2ph splain perlbug pl2pm c2ph h2xs perldoc pstruct
	-del /f *.bat
	cd ..\win32
	cd ..\x2p
	-del /f find2perl s2p
	-del /f *.bat
	cd ..\win32
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new
	-del /f $(CONFIGPM)
	-del /f perl95.c
	-del /f bin\*.bat
	cd $(EXTDIR)
	-del /s *.lib *.def *.map *.pdb *.bs Makefile *$(o) pm_to_blib
	cd ..\win32
	-rmdir /s /q $(AUTODIR) || rmdir /s $(AUTODIR)
	-rmdir /s /q $(COREDIR) || rmdir /s $(COREDIR)

install : all installbare installhtml

installbare : utils
	$(PERLEXE) ..\installperl
!IF "$(USE_PERLCRT)" == ""
	$(XCOPY) $(PERL95EXE) $(INST_BIN)\*.*
!ENDIF
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_SCRIPT)\*.*
	$(XCOPY) bin\network.pl $(INST_LIB)\*.*

installhtml : doc
	$(RCOPY) html\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	copy splittree.pl .. 
	$(MINIPERL) -I..\lib ..\splittree.pl "../LIB" $(AUTODIR)
	$(RCOPY) ..\lib $(INST_LIB)\*.*

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) utils
	$(XCOPY) $(MINIPERL) ..\t\perl.exe
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	attrib -r ..\t\*.*
	copy test ..\t
	cd ..\t
	$(MINIPERL) -I..\lib test base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t
	cd ..\win32

test-prep : all utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)

test : test-prep
	cd ..\t
	$(PERLEXE) -I..\lib harness
	cd ..\win32

test-notty : test-prep
	set PERL_SKIP_TTY_TEST=1
	cd ..\t
	$(PERLEXE) -I..\lib harness
	cd ..\win32

clean : 
	-@@erase miniperlmain$(o)
	-@@erase $(MINIPERL)
	-@@erase perlglob$(o)
	-@@erase perlmain$(o)
	-@@erase config.w32
	-@@erase /f config.h
	-@@erase perlCAPI.cpp
	-@@erase $(GLOBEXE)
	-@@erase $(PERLEXE)
	-@@erase $(PERLDLL)
	-@@erase $(CORE_OBJ)
	-@@erase $(CAPILIB)
	-rmdir /s /q $(MINIDIR) || rmdir /s $(MINIDIR)
	-@@erase $(WIN32_OBJ)
	-@@erase $(DLL_OBJ)
	-@@erase $(X2P_OBJ)
	-@@erase ..\*$(o) ..\*.lib ..\*.exp ..\*.res *$(o) *.lib *.exp *.res
	-@@erase ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@erase ..\x2p\*.exe ..\x2p\*.bat
	-@@erase *.ilk
	-@@erase *.pdb
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
# (perl56.dll).  Also makes individual DLLs for the XS extensions.
d32 1
a32 1
INST_VER	= \5.6.0
d35 1
a35 7
# Comment this out if you DON'T want your perl installation to have
# architecture specific components.  This means that architecture-
# specific files will be installed along with the architecture-neutral
# files.  Leaving it enabled is safer and more flexible, in case you
# want to build multiple flavors of perl and install them together in
# the same location.  Commenting it out gives you a simpler
# installation that is easier to understand for beginners.
d37 1
a37 1
INST_ARCH	= \$(ARCHNAME)
d40 1
a40 2
# uncomment to enable multiple interpreters.  This is need for fork()
# emulation.
d45 1
a45 3
# Beginnings of interpreter cloning/threads; still very incomplete.
# This should be enabled to get the fork() emulation.  This needs
# USE_MULTI as well.
d47 1
a47 1
#USE_ITHREADS	= define
d50 2
a51 3
# uncomment to enable the implicit "host" layer for all system calls
# made by perl.  This needs USE_MULTI above.  This is also needed to
# get fork().
d53 1
a53 1
#USE_IMP_SYS	= define
d56 1
a56 2
# WARNING! This option is deprecated and will eventually go away (enable
# USE_ITHREADS instead).
d58 1
a58 16
# uncomment to enable threads-capabilities.  This is incompatible with
# USE_ITHREADS, and is only here for people who may have come to rely
# on the experimental Thread support that was in 5.005.
#
#USE_5005THREADS= define

#
# WARNING! This option is deprecated and will eventually go away (enable
# USE_MULTI instead).
#
# uncomment next line if you want to use the PERL_OBJECT build option.
# DO NOT ENABLE unless you have legacy code that relies on the C++
# CPerlObj class that was available in 5.005.  This cannot be enabled
# if you ask for USE_5005THREADS above.
#
#USE_OBJECT	= define
d61 5
a65 2
# uncomment one of the following lines if you are using either
# Visual C++ 2.x or Visual C++ 6.x (aka Visual Studio 98)
d67 1
a67 7
#CCTYPE		= MSVC20
#CCTYPE		= MSVC60

#
# uncomment next line if you want debug version of perl (big,slow)
#
#CFG		= Debug
d71 2
a72 2
# It has patches that fix known bugs in older versions of MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3 or later.
a75 2
# Not recommended if you have VC 6.x and you're not running Windows 9x.
#
d106 1
a106 1
# if you ask for USE_IMP_SYS above.
a122 25
# Additional compiler flags can be specified here.
#

#
# This should normally be disabled.  Adding -DPERL_POLLUTE enables support
# for old symbols by default, at the expense of extreme pollution.  You most
# probably just want to build modules that won't compile with
#         perl Makefile.PL POLLUTE=1
# instead of enabling this.  Please report such modules to the respective
# authors.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_POLLUTE

#
# This should normally be disabled.  Enabling it will disable the File::Glob
# implementation of CORE::glob.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_EXTERNAL_GLOB

#
# This should normally be disabled.  Enabling it causes perl to read scripts
# in text mode (which is the 5.005 behavior) and will break ByteLoader.
#BUILDOPT	= $(BUILDOPT) -DPERL_TEXTMODE_SCRIPTS

#
d132 1
a132 1
#EMAIL		=
d147 1
a147 1
!IF "$(USE_OBJECT)" == "define"
d149 1
a149 1
USE_5005THREADS	= undef
a150 1
USE_IMP_SYS	= define
d157 2
a158 10
!IF "$(USE_5005THREADS)" == ""
USE_5005THREADS	= undef
!ENDIF

!IF "$(USE_5005THREADS)" == "define"
USE_ITHREADS	= undef
!ENDIF

!IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
d165 2
a166 32
!IF "$(USE_OBJECT)" == ""
USE_OBJECT	= undef
!ENDIF

!IF "$(USE_ITHREADS)" == ""
USE_ITHREADS	= undef
!ENDIF

!IF "$(USE_IMP_SYS)" == ""
USE_IMP_SYS	= undef
!ENDIF

!IF "$(USE_PERLCRT)" == ""
USE_PERLCRT	= undef
!ENDIF

!IF "$(USE_IMP_SYS)$(USE_MULTI)$(USE_5005THREADS)$(USE_OBJECT)" == "defineundefundefundef"
USE_MULTI	= define
!ENDIF

!IF "$(USE_ITHREADS)$(USE_MULTI)$(USE_OBJECT)" == "defineundefundef"
USE_MULTI	= define
USE_5005THREADS	= undef
!ENDIF

!IF "$(USE_MULTI)$(USE_5005THREADS)$(USE_OBJECT)" != "undefundefundef"
BUILDOPT	= $(BUILDOPT) -DPERL_IMPLICIT_CONTEXT
!ENDIF

!IF "$(USE_IMP_SYS)" != "undef"
BUILDOPT	= $(BUILDOPT) -DPERL_IMPLICIT_SYS
!ENDIF
d172 1
a172 1
!IF "$(USE_OBJECT)" == "define"
d175 1
a175 1
!IF "$(USE_5005THREADS)" == "define"
a177 3
!IF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-multi
!ELSE
a180 19
!ENDIF

!IF "$(USE_ITHREADS)" == "define"
ARCHNAME	= $(ARCHNAME)-thread
!ENDIF

# Visual Studio 98 specific
!IF "$(CCTYPE)" == "MSVC60"

# VC 6.0 can load the socket dll on demand.  Makes the test suite
# run in about 10% less time.
DELAYLOAD	= -DELAYLOAD:wsock32.dll -DELAYLOAD:shell32.dll delayimp.lib 

# VC 6.0 seems capable of compiling perl correctly with optimizations
# enabled.  Anything earlier fails tests.
!IF "$(CFG)" == ""
CFG		= Optimize
!ENDIF
!ENDIF
a184 13
LIBDIR		= ..\lib
EXTDIR		= ..\ext
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\ExtUtils

#
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_BIN	= $(INST_SCRIPT)$(INST_ARCH)
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_ARCHLIB	= $(INST_LIB)$(INST_ARCH)
INST_COREDIR	= $(INST_ARCHLIB)\CORE
INST_POD	= $(INST_LIB)\pod
INST_HTML	= $(INST_POD)\html
d190 2
a191 2
CC		= cl
LINK32		= link
a192 1
RSC		= rc
d198 1
d201 1
a201 1
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG)
d206 6
a211 2
!IF "$(USE_PERLCRT)" != "define"
LIBC	= msvcrt.lib
d213 5
a217 1
LIBC	= PerlCRT.lib
d220 5
a224 2
PERLEXE_RES	=
PERLDLL_RES	=
d228 1
a228 1
OPTIMIZE	= -Od -MD -Z7 -DDEBUGGING
d230 1
a230 1
OPTIMIZE	= -Od -MD -Zi -DDEBUGGING
d235 1
a235 3
# -O1 yields smaller code, which turns out to be faster than -O2
#OPTIMIZE	= -O2 -MD -DNDEBUG
OPTIMIZE	= -O1 -MD -DNDEBUG
d237 1
a237 1
OPTIMIZE	= -Od -MD -DNDEBUG
d242 1
a242 1
!IF "$(USE_OBJECT)" == "define"
a243 1
BUILDOPT	= $(BUILDOPT) -DPERL_OBJECT
d246 3
a248 8
!IF "$(USE_PERLCRT)" != "define"
BUILDOPT	= $(BUILDOPT) -DPERL_MSVCRT_READFIX
!ENDIF

LIBBASEFILES	= $(CRYPT_LIB) \
		oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib wsock32.lib mpr.lib winmm.lib \
d256 1
a256 3
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) \
		-libpath:"$(INST_COREDIR)" \
		-machine:$(PROCESSOR_ARCHITECTURE)
d260 1
a260 1
CFLAGS_O	= $(CFLAGS) $(BUILDOPT)
d271 1
a271 1
.SUFFIXES : .c $(o) .dll .lib .exe .rc .res
d283 10
a292 2
.rc.res:
	$(RSC) -i.. $<
d296 9
a304 2
PERLIMPLIB	= ..\perl56.lib
PERLDLL		= ..\perl56.dll
a308 1
WPERLEXE	= ..\wperl.exe
a319 1
		..\utils\dprofpp	\
d325 1
a331 3
		..\pod\pod2usage	\
		..\pod\podchecker	\
		..\pod\podselect	\
d334 1
a334 1
		bin\exetype.pl		\
d345 4
d362 1
a372 1
		..\perlapi.c	\
d386 1
a386 5
		..\utf8.c	\
		..\util.c	\
		..\xsutils.c

EXTRACORE_SRC	= $(EXTRACORE_SRC) perllib.c
d392 1
a392 1
!IF "$(USE_OBJECT)" != "define"
d398 5
a402 2
		.\win32sck.c	\
		.\win32thread.c 
d408 9
d419 5
d433 2
a448 1
		..\perlapi.h	\
a458 1
		..\utf8.h	\
a459 1
		..\warnings.h	\
d480 1
d487 1
d489 4
a492 1
#PERLEXE_OBJ	= $(PERLEXE_OBJ) $(WIN32_OBJ) $(DLL_OBJ)
d499 1
a499 2
		Data/Dumper Devel/Peek ByteLoader Devel/DProf File/Glob \
		Sys/Hostname
a515 5
PEEK		= $(EXTDIR)\Devel\Peek\Peek
BYTELOADER	= $(EXTDIR)\ByteLoader\ByteLoader
DPROF		= $(EXTDIR)\Devel\DProf\DProf
GLOB		= $(EXTDIR)\File\Glob\Glob
HOSTNAME	= $(EXTDIR)\Sys\Hostname\Hostname
a526 1
PEEK_DLL	= $(AUTODIR)\Devel\Peek\Peek.dll
a527 4
BYTELOADER_DLL	= $(AUTODIR)\ByteLoader\ByteLoader.dll
DPROF_DLL	= $(AUTODIR)\Devel\DProf\DProf.dll
GLOB_DLL	= $(AUTODIR)\File\Glob\Glob.dll
HOSTNAME_DLL	= $(AUTODIR)\Sys\Hostname\Hostname.dll
d542 1
a542 6
		$(PEEK).c	\
		$(B).c		\
		$(BYTELOADER).c	\
		$(DPROF).c	\
		$(GLOB).c	\
		$(HOSTNAME).c
d553 1
a553 8
		$(PEEK_DLL)	\
		$(B_DLL)	\
		$(RE_DLL)	\
		$(THREAD_DLL)	\
		$(BYTELOADER_DLL)	\
		$(DPROF_DLL)	\
		$(GLOB_DLL)	\
		$(HOSTNAME_DLL)
d558 7
a573 1
		"INST_ARCH=$(INST_ARCH)"		\
d576 1
a576 1
		"ccflags=$(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
d589 1
a589 3
		"use5005threads=$(USE_5005THREADS)"	\
		"useithreads=$(USE_ITHREADS)"		\
		"usethreads=$(USE_5005THREADS)"		\
d598 2
a599 2
all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(PERLEXE) \
	$(X2P) $(EXTENSION_DLL) $(EXTENSION_PM)
d654 1
a654 1
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB $(OBJOUT_FLAG)$@@ ..\$(*F).c
a658 7
# -DPERL_IMPLICIT_SYS needs C++ for perllib.c
# This is the only file that depends on perlhost.h, vmem.h, and vdir.h
!IF "$(USE_IMP_SYS)$(USE_OBJECT)" == "defineundef"
perllib$(o)	: perllib.c .\perlhost.h .\vdir.h .\vmem.h
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
!ENDIF

d666 1
d669 2
a670 2
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl
	$(MINIPERL) -w ..\makedef.pl PLATFORM=win32 $(OPTIMIZE) $(DEFINES) $(BUILDOPT) \
d673 3
a675 3
$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES)
	$(LINK32) -dll -def:perldll.def -base:0x28000000 -out:$@@ @@<<
		$(LINK_FLAGS) $(DELAYLOAD) $(LIBFILES) $(PERLDLL_OBJ) $(PERLDLL_RES)
d679 3
d713 3
a715 5
$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES)
	$(LINK32) -subsystem:console -out:$@@ -stack:0x8000000 $(LINK_FLAGS) \
	    $(LIBFILES) $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) $(PERLEXE_RES)
	copy $(PERLEXE) $(WPERLEXE)
	$(MINIPERL) -I..\lib bin\exetype.pl $(WPERLEXE) WINDOWS
d719 27
a749 1
	..\$(MINIPERL) -I..\..\lib XSLoader_pm.PL
a751 1
	$(XCOPY) $(EXTDIR)\$(*B)\XSLoader.pm $(LIBDIR)\$(NULL)
d756 12
a776 18
$(DPROF_DLL): $(PERLEXE) $(DPROF).xs
	cd $(EXTDIR)\Devel\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

$(GLOB_DLL): $(PERLEXE) $(GLOB).xs
	cd $(EXTDIR)\File\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

$(PEEK_DLL): $(PERLEXE) $(PEEK).xs
	cd $(EXTDIR)\Devel\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

a836 12
$(HOSTNAME_DLL): $(PERLEXE) $(HOSTNAME).xs
	cd $(EXTDIR)\Sys\$(*B)
	..\..\..\miniperl -I..\..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\..\win32

$(BYTELOADER_DLL): $(PERLEXE) $(BYTELOADER).xs
	cd $(EXTDIR)\$(*B)
	..\..\miniperl -I..\..\lib Makefile.PL INSTALLDIRS=perl
	$(MAKE)
	cd ..\..\win32

a851 7
	copy ..\README.amiga .\perlamiga.pod
	copy ..\README.cygwin .\perlcygwin.pod
	copy ..\README.dos .\perldos.pod
	copy ..\README.hpux .\perlhpux.pod
	copy ..\README.machten .\perlmachten.pod
	copy ..\README.os2 .\perlos2.pod
	copy ..\vms\perlvms.pod .\perlvms.pod
d858 1
a858 1
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
a864 1
	-del /f $(LIBDIR)\XSLoader.pm
d869 1
a869 3
	-del /f $(LIBDIR)\Data\Dumper.pm $(LIBDIR)\ByteLoader.pm
	-del /f $(LIBDIR)\Devel\Peek.pm $(LIBDIR)\Devel\DProf.pm
	-del /f $(LIBDIR)\File\Glob.pm
d877 1
a877 1
	-del /f h2ph splain perlbug pl2pm c2ph h2xs perldoc dprofpp
d886 1
d898 3
a900 1
	if exist $(WPERLEXE) $(XCOPY) $(WPERLEXE) $(INST_BIN)\*.*
d903 1
a937 13
test-wide : test-prep
	set HARNESS_PERL_SWITCHES=-C
	cd ..\t
	$(PERLEXE) -I..\lib harness
	cd ..\win32

test-wide-notty : test-prep
	set PERL_SKIP_TTY_TEST=1
	set HARNESS_PERL_SWITCHES=-C
	cd ..\t
	$(PERLEXE) -I..\lib harness
	cd ..\win32

d945 1
a947 1
	-@@erase $(WPERLEXE)
d950 1
d955 1
a955 1
	-@@erase ..\*$(o) ..\*.lib ..\*.exp *$(o) *.lib *.exp *.res
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d4 3
a10 3
## If you want a configuration that is the same as ActivePerl (see
## www.ActiveState.com) make sure you set at least BUILD_FLAVOR below!
##
d17 2
a18 2
# Set these to wherever you want "nmake install" to put your newly
# built perl.  Setting it to a path with spaces is NOT recommended.
a23 60
# uncomment one of the following lines if you are using either
# Visual C++ 2.x, or Visual C++ 5.x (aka Visual Studio 97) _without_
# service pack 3 applied.
#
# If you have 5.x SP3 or later, or 6.x, no change is required.
#
#CCTYPE		= MSVC20
#CCTYPE		= MSVC_PRE_50SP3

#
# set the install locations of the compiler include/libraries. Running
# VCVARS32.BAT is *required* when using Visual C.  Some versions of
# Visual C earlier than 5.x SP3 don't define MSVCDIR in the environment.
# If such is the case you may have to set CCHOME explicitly.  Spaces in
# the path name should not be quoted.
#
# If you have run VCVARS32.BAT and have VC 5.x SP3 or later, the defaults
# should just work.
#
#CCHOME		= f:\msvc20
CCHOME		= $(MSVCDIR)
CCINCDIR	= $(CCHOME)\include
CCLIBDIR	= $(CCHOME)\lib

#
# if you have the source for des_fcrypt(), uncomment CRYPT_SRC and make sure
# the file exists (see README.win32).  File should be located in the same
# directory as this makefile.
#
# If you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment CRYPT_LIB, and make sure the library exists (see
# README.win32).  Specify the full pathname of the library.
#
# If you don't enable one of these, the crypt() builtin will fail to work.
# (Generally not critical.)
#
#CRYPT_SRC	= fcrypt.c
#CRYPT_LIB	= fcrypt.lib

#
# uncomment this option if you want to bulk-enable all the options that
# ActiveState uses to build their ActivePerl distribution.  If you set this,
# there should be no need to set any of the other options that follow.
#
# If you don't enable this, the defaults below will get you the most
# efficient perl configuration possible that will also be compatible
# with the build defaults used on Unix platforms.  On the other hand,
# the ActivePerl configuration will get you fork() emulation at the
# cost of some added bloat.
#
#BUILD_FLAVOR	= ActivePerl

#
# uncomment next line if you want debug version of perl (big and slow).
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		= Debug

#
d32 1
a32 1
INST_VER = \5.6.1
d43 1
a43 1
INST_ARCH = \$(ARCHNAME)
d49 1
a49 1
#USE_MULTI = define
d56 1
a56 1
#USE_ITHREADS = define
d63 1
a63 1
#USE_IMP_SYS = define
d82 1
a82 1
# if you ask for USE_5005THREADS or USE_MULTI above.
d87 12
d111 1
a111 1
# compiler. Setting this option enables perl to expand wildcards in
d113 2
a114 3
# File::DosGlob that are more powerful, or use perl inside shells
# that do the expansion for you.  This option is supported only
# with Visual C.
d119 14
d142 12
a195 13
!IF "$(BUILD_FLAVOR)" == "ActivePerl"
INST_VER	= 
INST_ARCH	= 
USE_MULTI	= define
USE_ITHREADS	= define
USE_IMP_SYS	= define
USE_5005THREADS	= undef
USE_OBJECT	= undef
USE_PERLCRT	= undef
USE_SETARGV	=
PERL_MALLOC	= undef
!ENDIF

a225 4
!IF "$(CCTYPE)" == ""
CCTYPE		= MSVC60
!ENDIF

d287 1
d291 6
a298 1

d314 1
a314 1
INST_HTML	= $(INST_TOP)$(INST_VER)\html
d353 1
d355 1
d357 1
a357 3
# VC 6.0 seems capable of compiling perl correctly with optimizations
# enabled.  Anything earlier fails tests.
!  IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC_PRE_50SP3"
a362 1

d690 1
a690 1
		"ccflags=-nologo $(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
d833 1
a833 1
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(LINK_FLAGS) \
d966 8
a973 17
	copy ..\README.aix	.\perlaix.pod
	copy ..\README.amiga	.\perlamiga.pod
	copy ..\README.bs2000	.\perlbs2000.pod
	copy ..\README.cygwin	.\perlcygwin.pod
	copy ..\README.dos	.\perldos.pod
	copy ..\README.epoc	.\perlepoc.pod
	copy ..\README.hpux	.\perlhpux.pod
	copy ..\README.machten	.\perlmachten.pod
	copy ..\README.macos	.\perlmacos.pod
	copy ..\README.mpeix	.\perlmpeix.pod
	copy ..\README.os2	.\perlos2.pod
	copy ..\README.os390	.\perlos390.pod
	copy ..\README.solaris	.\perlsolaris.pod
	copy ..\README.vmesa	.\perlvmesa.pod
	copy ..\vms\perlvms.pod	.\perlvms.pod
	copy ..\README.vos	.\perlvos.pod
	copy ..\README.win32	.\perlwin32.pod
d984 1
a984 1
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs $(EXTDIR)\DynaLoader\DynaLoader.pm
d986 1
a986 2
	-del /f $(LIBDIR)\XSLoader.pm $(EXTDIR)\DynaLoader\XSLoader.pm
	-del /f $(LIBDIR)\Devel\.exists $(LIBDIR)\File\.exists $(LIBDIR)\Sys\.exists
d990 1
a990 1
	-del /f $(LIBDIR)\B.pm $(EXTDIR)\B\defsubs.h $(LIBDIR)\O.pm $(LIBDIR)\re.pm
d994 6
a999 12
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO || rmdir /s $(LIBDIR)\IO
	-if exist $(LIBDIR)\Thread rmdir /s /q $(LIBDIR)\Thread || rmdir /s $(LIBDIR)\Thread
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B || rmdir /s $(LIBDIR)\B
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data || rmdir /s $(LIBDIR)\Data
	cd $(PODDIR)
	-del /f *.html *.bat checkpods \
	    perlaix.pod perlamiga.pod perlbs2000.pod perlcygwin.pod \
	    perldos.pod perlepoc.pod perlhpux.pod perlmachten.pod \
	    perlmacos.pod perlmpeix.pod perlos2.pod perlos390.pod \
	    perlsolaris.pod perlvmesa.pod perlvms.pod perlvos.pod \
	    perlwin32.pod pod2html pod2latex pod2man pod2text pod2usage \
	    podchecker podselect
d1001 2
a1002 2
	-del /f h2ph splain perlbug pl2pm c2ph h2xs perldoc dprofpp \
	    *.bat perlcc pstruct
d1014 2
a1015 2
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR) || rmdir /s $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR) || rmdir /s $(COREDIR)
d1083 1
a1083 1
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR) || rmdir /s $(MINIDIR)
a1091 16
 
# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "nmake nok" instead.
ok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)"

okfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok
 
nok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)"
 
nokfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@a2 6
# Supported compilers:
#	Visual C++ 2.0 through 6.0 (and possibly newer versions)
#	MS Platform SDK 64-bit compiler and tools **experimental**
#
# This is set up to build a perl.exe that runs off a shared library
# (perl58.dll).  Also makes individual DLLs for the XS extensions.
d8 3
d17 2
a18 2
# Set these to wherever you want "nmake install" to put your
# newly built perl.
d24 60
d92 1
a92 1
#INST_VER = \5.8.0
d103 1
a103 1
#INST_ARCH = \$(ARCHNAME)
d107 1
a107 1
# emulation and for thread support.
d109 1
a109 1
USE_MULTI = define
d112 1
a112 1
# Beginnings of interpreter cloning/threads; now reasonably complete.
d116 1
a116 1
USE_ITHREADS = define
d123 1
a123 9
USE_IMP_SYS = define

#
# Comment out next assign to disable perl's I/O subsystem and use compiler's 
# stdio for IO - depending on your compiler vendor and run time library you may 
# then get a number of fails from make test i.e. bugs - complain to them not us ;-). 
# You will also be unable to take full advantage of perl5.8's support for multiple 
# encodings and may see lower IO performance. You have been warned.
USE_PERLIO	= define
d133 1
a133 1
#USE_5005THREADS	= define
d136 2
a137 2
# uncomment one of the following lines if you are using either
# Visual C++ 2.x or Visual C++ 6.x (aka Visual Studio 98)
d139 4
a142 3
#CCTYPE		= MSVC20
#CCTYPE		= MSVC60

d144 1
a144 5
# uncomment next line if you want debug version of perl (big,slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		= Debug
d150 1
a150 1
# Get it from CPAN at http://www.cpan.org/authors/id/D/DO/DOUGL/
d159 1
a159 1
# compiler. Setting this options enables perl to expand wildcards in
d161 3
a163 2
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
a167 14
# if you have the source for des_fcrypt(), uncomment this and make sure the
# file exists (see README.win32).  File should be located in the same
# directory as this file.
#
#CRYPT_SRC	= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	= fcrypt.lib

#
a176 12
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
#CCHOME		= f:\msvc20
CCHOME		= $(MSVCDIR)
CCINCDIR	= $(CCHOME)\include
CCLIBDIR	= $(CCHOME)\lib

#
d219 13
d239 7
d262 4
d270 4
a281 4
!IF "$(USE_PERLIO)" == ""
USE_PERLIO	= undef
!ENDIF

d286 1
a286 1
!IF "$(USE_IMP_SYS)$(USE_MULTI)$(USE_5005THREADS)" == "defineundefundef"
d290 1
a290 1
!IF "$(USE_ITHREADS)$(USE_MULTI)" == "defineundef"
d295 1
a295 1
!IF "$(USE_MULTI)$(USE_5005THREADS)" != "undefundef"
d307 2
a308 7
!IF "$(WIN64)" == ""
!IF "$(PROCESSOR_ARCHITEW6432)" != ""
PROCESSOR_ARCHITECTURE	= $(PROCESSOR_ARCHITEW6432)
WIN64			= define
!ELSE
!IF "$(PROCESSOR_ARCHITECTURE)" == "IA64"
WIN64			= define
a309 5
WIN64			= undef
!ENDIF
!ENDIF
!ENDIF

a315 3
!IF "$(USE_PERLIO)" == "define"
ARCHNAME	= MSWin32-$(PROCESSOR_ARCHITECTURE)-perlio
!ELSE
a320 4
!IF "$(USE_PERLIO)" == "define"
BUILDOPT	= $(BUILDOPT) -DUSE_PERLIO
!ENDIF

a326 1

d329 1
a329 1
DELAYLOAD	= -DELAYLOAD:wsock32.dll -DELAYLOAD:shell32.dll delayimp.lib
d332 1
d364 1
a364 1
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX
d385 1
a385 1
LINK_DBG	= -debug
d387 7
a393 1
OPTIMIZE	= -MD -DNDEBUG
a394 9
!  IF "$(WIN64)" == "define"
# enable Whole Program Optimizations (WPO) and Link Time Code Generation (LTCG)
OPTIMIZE	= $(OPTIMIZE) -Ox -GL
LINK_DBG	= $(LINK_DBG) -ltcg
!  ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86
OPTIMIZE	= $(OPTIMIZE) -O1
#OPTIMIZE	= $(OPTIMIZE) -O2
!  ENDIF
d397 4
a400 3
!IF "$(WIN64)" == "define"
DEFINES		= $(DEFINES) -DWIN64 -DCONSERVATIVE
OPTIMIZE	= $(OPTIMIZE) -Wp64 -Op
d411 1
a411 6
		version.lib

# win64 doesn't have some libs
!IF "$(WIN64)" != "define"
LIBBASEFILES	= $(LIBBASEFILES) odbc32.lib odbccp32.lib
!ENDIF
d433 1
a433 1
#
d445 1
a445 1
	    -out:$@@ $(LINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
d452 2
a453 5

# makedef.pl must be updated if this changes, and this should normally
# only change when there is an incompatible revision of the public API.
PERLIMPLIB	= ..\perl58.lib
PERLDLL		= ..\perl58.dll
a463 6
# Nominate a target which causes extensions to be re-built
# This used to be $(PERLEXE), but at worst it is the .dll that they depend
# on and really only the interface - i.e. the .def file used to export symbols
# from the .dll
PERLDEP		= perldll.def

a473 1
		..\utils\pstruct	\
a476 4
		..\utils\perlivp	\
		..\utils\libnetcfg	\
		..\utils\enc2xs		\
		..\utils\piconv		\
a485 1
		..\x2p\psed		\
a486 1
		..\lib\ExtUtils\xsubpp	\
a493 1
MAKE_BARE	= nmake
a494 4
!IF "$(WIN64)" == "define"
CFGSH_TMPL	= config.vc64
CFGH_TMPL	= config_H.vc64
!ELSE
a496 1
!ENDIF
a502 2
DEL		= del

a517 1
		..\locale.c	\
a518 1
		..\numeric.c	\
a525 2
		..\pp_pack.c	\
		..\pp_sort.c	\
a526 1
		..\reentr.c	\
d545 1
d547 1
d552 1
a552 7
		.\win32thread.c

# We need this for miniperl build unless we override canned 
# config.h #define building mini\*
#!IF "$(USE_PERLIO)" == "define"
WIN32_SRC	= $(WIN32_SRC) .\win32io.c
#!ENDIF
d630 43
a672 61
DYNALOADER		= $(EXTDIR)\DynaLoader\DynaLoader
SOCKET			= $(EXTDIR)\Socket\Socket
FCNTL			= $(EXTDIR)\Fcntl\Fcntl
OPCODE			= $(EXTDIR)\Opcode\Opcode
SDBM_FILE		= $(EXTDIR)\SDBM_File\SDBM_File
IO			= $(EXTDIR)\IO\IO
POSIX			= $(EXTDIR)\POSIX\POSIX
ATTRS			= $(EXTDIR)\attrs\attrs
THREAD			= $(EXTDIR)\Thread\Thread
B			= $(EXTDIR)\B\B
RE			= $(EXTDIR)\re\re
DUMPER			= $(EXTDIR)\Data\Dumper\Dumper
ERRNO			= $(EXTDIR)\Errno\Errno
PEEK			= $(EXTDIR)\Devel\Peek\Peek
BYTELOADER		= $(EXTDIR)\ByteLoader\ByteLoader
DPROF			= $(EXTDIR)\Devel\DProf\DProf
GLOB			= $(EXTDIR)\File\Glob\Glob
HOSTNAME		= $(EXTDIR)\Sys\Hostname\Hostname
STORABLE		= $(EXTDIR)\Storable\Storable
FILTER			= $(EXTDIR)\Filter\Util\Call\Call
ENCODE			= $(EXTDIR)\Encode\Encode
MD5			= $(EXTDIR)\Digest\MD5\MD5
PERLIOSCALAR		= $(EXTDIR)\PerlIO\scalar\scalar
MIMEBASE64		= $(EXTDIR)\MIME\Base64\Base64
TIMEHIRES		= $(EXTDIR)\Time\HiRes\HiRes
CWD			= $(EXTDIR)\Cwd\Cwd
LISTUTIL  		= $(EXTDIR)\List\Util\Util
PERLIOVIA		= $(EXTDIR)\PerlIO\via\via
XSAPITEST		= $(EXTDIR)\XS\APItest\APItest
XSTYPEMAP		= $(EXTDIR)\XS\Typemap\Typemap
UNICODENORMALIZE	= $(EXTDIR)\Unicode\Normalize\Normalize

SOCKET_DLL		= $(AUTODIR)\Socket\Socket.dll
FCNTL_DLL		= $(AUTODIR)\Fcntl\Fcntl.dll
OPCODE_DLL		= $(AUTODIR)\Opcode\Opcode.dll
SDBM_FILE_DLL		= $(AUTODIR)\SDBM_File\SDBM_File.dll
IO_DLL			= $(AUTODIR)\IO\IO.dll
POSIX_DLL		= $(AUTODIR)\POSIX\POSIX.dll
ATTRS_DLL		= $(AUTODIR)\attrs\attrs.dll
THREAD_DLL		= $(AUTODIR)\Thread\Thread.dll
B_DLL			= $(AUTODIR)\B\B.dll
DUMPER_DLL		= $(AUTODIR)\Data\Dumper\Dumper.dll
PEEK_DLL		= $(AUTODIR)\Devel\Peek\Peek.dll
RE_DLL			= $(AUTODIR)\re\re.dll
BYTELOADER_DLL		= $(AUTODIR)\ByteLoader\ByteLoader.dll
DPROF_DLL		= $(AUTODIR)\Devel\DProf\DProf.dll
GLOB_DLL		= $(AUTODIR)\File\Glob\Glob.dll
HOSTNAME_DLL		= $(AUTODIR)\Sys\Hostname\Hostname.dll
STORABLE_DLL		= $(AUTODIR)\Storable\Storable.dll
FILTER_DLL		= $(AUTODIR)\Filter\Util\Call\Call.dll
ENCODE_DLL		= $(AUTODIR)\Encode\Encode.dll
MD5_DLL			= $(AUTODIR)\Digest\MD5\MD5.dll
PERLIOSCALAR_DLL	= $(AUTODIR)\PerlIO\scalar\scalar.dll
MIMEBASE64_DLL		= $(AUTODIR)\MIME\Base64\Base64.dll
TIMEHIRES_DLL		= $(AUTODIR)\Time\HiRes\HiRes.dll
CWD_DLL			= $(AUTODIR)\Cwd\Cwd.dll
LISTUTIL_DLL		= $(AUTODIR)\List\Util\Util.dll
PERLIOVIA_DLL		= $(AUTODIR)\PerlIO\via\via.dll
XSAPITEST_DLL		= $(AUTODIR)\XS\APItest\APItest.dll
XSTYPEMAP_DLL		= $(AUTODIR)\XS\Typemap\Typemap.dll
UNICODENORMALIZE_DLL	= $(AUTODIR)\Unicode\Normalize\Normalize.dll
d690 1
a690 14
		$(HOSTNAME).c	\
		$(STORABLE).c	\
		$(FILTER).c	\
		$(ENCODE).c	\
		$(MD5).c	\
		$(PERLIOSCALAR).c	\
		$(MIMEBASE64).c	\
		$(TIMEHIRES).c	\
		$(CWD).c	\
		$(LISTUTIL).c	\
		$(PERLIOVIA).c	\
		$(XSAPITEST).c	\
		$(XSTYPEMAP).c	\
		$(UNICODENORMALIZE).c
d708 4
a711 14
		$(HOSTNAME_DLL)	\
		$(STORABLE_DLL)	\
		$(FILTER_DLL)   \
		$(ENCODE_DLL)   \
		$(MD5_DLL)	\
		$(PERLIOSCALAR_DLL) \
		$(MIMEBASE64_DLL) \
		$(TIMEHIRES_DLL)  \
		$(CWD_DLL)	\
		$(LISTUTIL_DLL)	\
		$(PERLIOVIA_DLL)	\
		$(XSAPITEST_DLL)	\
		$(XSTYPEMAP_DLL)	\
		$(UNICODENORMALIZE_DLL)
d725 2
a726 3
		"ld=$(LINK32)"				\
		"ccflags=-nologo -Gf -W3 $(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
		"cf_email=$(EMAIL)"	 		\
d734 4
a737 1
		"make=$(MAKE_BARE)"				\
a741 1
		"useperlio=$(USE_PERLIO)"		\
d750 1
a750 2
	$(X2P) Extensions
	@@echo	Everything is up to date. '$(MAKE_BARE) test' to run test suite.
d758 1
a758 1
	    perlglob$(o) setargv$(o)
d774 1
a774 1
# compiler (e.g. `nmake CCTYPE=BORLAND regen_config_h`)
d778 1
a778 1
	-del /f perl.exe perl*.dll
d783 1
a783 1
	-perl config_h.PL "INST_VER=$(INST_VER)"
d787 1
a787 3
	cd ..
	miniperl configpm
	cd win32
d793 2
a794 2
	-$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)"
	if errorlevel 1 $(MAKE) /$(MAKEFLAGS) $(CONFIGPM)
d812 1
a812 1
!IF "$(USE_IMP_SYS)" == "define"
d837 1
a837 3
	cd ..
	miniperl minimod.pl > lib\ExtUtils\Miniperl.pm
	cd win32
d861 1
a861 1
perlmain.c : runperl.c
d872 1
a872 1
	copy splittree.pl ..
d890 23
a912 3
#----------------------------------------------------------------------------------
Extensions: buildext.pl $(PERLDEP) $(CONFIGPM)
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR)
d914 5
a918 2
Extensions_clean: 
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) clean
d920 71
a990 1
#----------------------------------------------------------------------------------
d1001 17
a1017 30
	copy ..\README.aix      .\perlaix.pod
	copy ..\README.amiga    .\perlamiga.pod
	copy ..\README.apollo   .\perlapollo.pod
	copy ..\README.beos     .\perlbeos.pod
	copy ..\README.bs2000   .\perlbs2000.pod
	copy ..\README.ce	.\perlce.pod
	copy ..\README.cygwin   .\perlcygwin.pod
	copy ..\README.dgux     .\perldgux.pod
	copy ..\README.dos      .\perldos.pod
	copy ..\README.epoc     .\perlepoc.pod
	copy ..\README.freebsd     .\perlfreebsd.pod
	copy ..\README.hurd     .\perlhurd.pod
	copy ..\README.hpux     .\perlhpux.pod
	copy ..\README.irix     .\perlirix.pod
	copy ..\README.machten  .\perlmachten.pod
	copy ..\README.macos    .\perlmacos.pod
	copy ..\README.mint     .\perlmint.pod
	copy ..\README.mpeix    .\perlmpeix.pod
	copy ..\README.netware  .\perlnetware.pod
	copy ..\README.os2      .\perlos2.pod
	copy ..\README.os390    .\perlos390.pod
	copy ..\README.plan9    .\perlplan9.pod
	copy ..\README.qnx      .\perlqnx.pod
	copy ..\README.solaris  .\perlsolaris.pod
	copy ..\README.tru64    .\perltru64.pod
	copy ..\README.uts      .\perluts.pod
	copy ..\README.vmesa    .\perlvmesa.pod
	copy ..\vms\perlvms.pod .\perlvms.pod
	copy ..\README.vos      .\perlvos.pod
	copy ..\README.win32    .\perlwin32.pod
a1018 2
	cd ..\lib
	$(PERLEXE) lib_pm.PL
d1026 1
a1026 1
	-del /f $(EXTENSION_DLL)
d1028 1
a1028 1
	-del /f $(EXTDIR)\DynaLoader\dl_win32.xs
d1030 2
a1031 1
	-del /f $(LIBDIR)\XSLoader.pm
d1033 1
a1033 1
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm
d1035 1
a1035 1
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
d1039 4
a1042 30
	-del /f $(LIBDIR)\Storable.pm
	-del /f $(LIBDIR)\Filter\Util\Call.pm
	-del /f $(LIBDIR)\Digest\MD5.pm
	-del /f $(LIBDIR)\PerlIO\scalar.pm
	-del /f $(LIBDIR)\PerlIO\via.pm
	-del /f $(LIBDIR)\MIME\Base64.pm
	-del /f $(LIBDIR)\MIME\QuotedPrint.pm
	-del /f $(LIBDIR)\List\Util.pm
	-del /f $(LIBDIR)\Scalar\Util.pm
	-del /f $(LIBDIR)\Time\HiRes.pm
	-del /f $(LIBDIR)\XS\APItest.pm
	-del /f $(LIBDIR)\XS\Typemap.pm
	-del /f $(LIBDIR)\Unicode\Normalize.pm
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO
	-rmdir /s $(LIBDIR)\IO
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B
	-rmdir /s $(LIBDIR)\B
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data
	-rmdir /s $(LIBDIR)\Data
	-if exist $(LIBDIR)\Filter\Util rmdir /s /q $(LIBDIR)\Filter\Util
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest
	-rmdir /s $(LIBDIR)\Digest
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-rmdir /s $(LIBDIR)\MIME
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-rmdir /s $(LIBDIR)\List
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar
	-rmdir /s $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
	-rmdir /s $(LIBDIR)\XS
d1045 4
a1048 8
	    perlaix.pod perlamiga.pod perlapollo.pod perlbeos.pod \
	    perlbs2000.pod perlce.pod perlcygwin.pod perldgux.pod \
	    perldos.pod perlepoc.pod perlfreebsd.pod perlhurd.pod \
	    perlhpux.pod perlirix.pod perlmachten.pod \
	    perlmacos.pod perlmint.pod perlmpeix.pod perlnetware.pod \
	    perlos2.pod perlos390.pod perlplan9.pod perlqnx.pod \
	    perlsolaris.pod perltru64.pod perluts.pod \
	    perlvmesa.pod perlvms.pod perlvos.pod \
d1052 2
a1053 3
	-del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs perldoc perlivp \
	    dprofpp perlcc libnetcfg enc2xs piconv
	-del /f *.bat
d1056 1
a1056 1
	-del /f find2perl s2p psed
a1061 3
	cd ..
	-del /s *.lib *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib
	cd win32
d1063 1
a1063 1
	-del /s *.def Makefile Makefile.old
d1065 2
a1066 4
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR)
	-rmdir /s $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR)
	-rmdir /s $(COREDIR)
d1080 1
a1080 1
	copy splittree.pl ..
d1122 22
a1143 31
_test : 
       $(XCOPY) $(PERLEXE) ..\t\$(NULL)
       $(XCOPY) $(PERLDLL) ..\t\$(NULL)
       $(XCOPY) $(GLOBEXE) ..\t\$(NULL)
       cd ..\t
       $(PERLEXE) -I..\lib harness
       cd ..\win32

clean : Extensions_clean
	-@@$(DEL) miniperlmain$(o)
	-@@$(DEL) $(MINIPERL)
	-@@$(DEL) perlglob$(o)
	-@@$(DEL) perlmain$(o)
	-@@$(DEL) config.w32
	-@@$(DEL) config.h
	-@@$(DEL) $(GLOBEXE)
	-@@$(DEL) $(PERLEXE)
	-@@$(DEL) $(WPERLEXE)
	-@@$(DEL) $(PERLDLL)
	-@@$(DEL) $(CORE_OBJ)
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR)
	-rmdir /s $(MINIDIR)
	-@@$(DEL) $(WIN32_OBJ)
	-@@$(DEL) $(DLL_OBJ)
	-@@$(DEL) $(X2P_OBJ)
	-@@$(DEL) ..\*$(o) ..\*.lib ..\*.exp *$(o) *.lib *.exp *.res
	-@@$(DEL) ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@$(DEL) ..\x2p\*.exe ..\x2p\*.bat
	-@@$(DEL) *.ilk
	-@@$(DEL) *.pdb

d1153 1
a1153 1

d1156 1
a1156 1

@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d35 1
a35 1
#INST_VER = \5.8.2
a76 6
# Comment this out if you don't want to enable large file support for
# some reason.  Should normally only be changed to maintain compatibility
# with an older release of perl.
USE_LARGE_FILES = define

#
d91 1
a91 1
CCTYPE		= MSVC60
d121 3
a123 3
# if you want to have the crypt() builtin function implemented, leave this or
# CRYPT_LIB uncommented.  The fcrypt.c file named here contains a suitable
# version of des_fcrypt().
d125 1
a125 1
CRYPT_SRC	= fcrypt.c
a143 8
# set this to enable debugging mstats
# This must be enabled to use the Devel::Peek::mstat() function.  This cannot
# be enabled without PERL_MALLOC as well.
#
#DEBUG_MSTATS  = define

#
#
a206 9
DEBUG_MSTATS   = undef
!ENDIF

!IF "$(DEBUG_MSTATS)" == ""
DEBUG_MSTATS   = undef
!ENDIF

!IF "$(DEBUG_MSTATS)" == "define"
BUILDOPT       = $(BUILDOPT) -DPERL_DEBUGGING_MSTATS
a236 4
!IF "$(USE_LARGE_FILES)" == ""
USE_LARGE_FILES	= undef
!ENDIF

a469 1
		..\utils\cpan		\
a524 1
		..\pad.c	\
a788 1
		"usethreads=$(USE_ITHREADS)"		\
a793 1
		"uselargefiles=$(USE_LARGE_FILES)"	\
a844 1
	$(XCOPY) ..\*.inc $(COREDIR)\*.*
d970 1
a970 2
	copy ..\README.ce       .\perlce.pod
	copy ..\README.cn       .\perlcn.pod
d975 2
a976 1
	copy ..\README.freebsd  .\perlfreebsd.pod
a977 1
	copy ..\README.hurd     .\perlhurd.pod
a978 2
	copy ..\README.jp       .\perljp.pod
	copy ..\README.ko       .\perlko.pod
a980 1
	copy ..\README.macosx   .\perlmacosx.pod
a985 1
	copy ..\README.os400    .\perlos400.pod
a989 1
	copy ..\README.tw       .\perltw.pod
d992 1
a992 1
	copy ..\README.vms      .\perlvms.pod
a994 1
	copy ..\vms\perlvms.pod .\perlvms.pod
a1000 2
# the doubled rmdir calls are needed because older cmd shells
# don't understand /q
d1031 1
a1031 1
	-if exist $(LIBDIR)\IO rmdir /s $(LIBDIR)\IO
d1033 1
a1033 1
	-if exist $(LIBDIR)\B rmdir /s $(LIBDIR)\B
d1035 1
a1035 1
	-if exist $(LIBDIR)\Data rmdir /s $(LIBDIR)\Data
a1036 1
	-if exist $(LIBDIR)\Filter\Util rmdir /s $(LIBDIR)\Filter\Util
d1038 1
a1038 1
	-if exist $(LIBDIR)\Digest rmdir /s $(LIBDIR)\Digest
d1040 1
a1040 1
	-if exist $(LIBDIR)\MIME rmdir /s $(LIBDIR)\MIME
d1042 1
a1042 1
	-if exist $(LIBDIR)\List rmdir /s $(LIBDIR)\List
d1044 1
a1044 1
	-if exist $(LIBDIR)\Scalar rmdir /s $(LIBDIR)\Scalar
d1046 1
a1046 1
	-if exist $(LIBDIR)\XS rmdir /s $(LIBDIR)\XS
d1054 2
a1055 2
	    perlos2.pod perlos390.pod perlos400.pod perlplan9.pod \
	    perlqnx.pod perlsolaris.pod perltru64.pod perluts.pod \
d1061 1
a1061 1
	    dprofpp perlcc libnetcfg enc2xs piconv cpan
d1078 1
a1078 1
	-if exist $(AUTODIR) rmdir /s $(AUTODIR)
d1080 1
a1080 1
	-if exist $(COREDIR) rmdir /s $(COREDIR)
d1123 13
d1157 1
a1157 1
	-if exist $(MINIDIR) rmdir /s $(MINIDIR)
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d35 1
a35 1
#INST_VER = \5.8.3
a497 3
		..\utils\xsubpp		\
		..\utils\prove		\
		..\utils\instmodsh	\
d509 1
a992 3
# Note that this next section is parsed (and regenerated) by pod/buildtoc
# so please check that script before making structural changes here

d997 36
a1033 37
	copy ..\README.aix      ..\pod\perlaix.pod
	copy ..\README.amiga    ..\pod\perlamiga.pod
	copy ..\README.apollo   ..\pod\perlapollo.pod
	copy ..\README.beos     ..\pod\perlbeos.pod
	copy ..\README.bs2000   ..\pod\perlbs2000.pod
	copy ..\README.ce       ..\pod\perlce.pod
	copy ..\README.cn       ..\pod\perlcn.pod
	copy ..\README.cygwin   ..\pod\perlcygwin.pod
	copy ..\README.dgux     ..\pod\perldgux.pod
	copy ..\README.dos      ..\pod\perldos.pod
	copy ..\README.epoc     ..\pod\perlepoc.pod
	copy ..\README.freebsd  ..\pod\perlfreebsd.pod
	copy ..\README.hpux     ..\pod\perlhpux.pod
	copy ..\README.hurd     ..\pod\perlhurd.pod
	copy ..\README.irix     ..\pod\perlirix.pod
	copy ..\README.jp       ..\pod\perljp.pod
	copy ..\README.ko       ..\pod\perlko.pod
	copy ..\README.machten  ..\pod\perlmachten.pod
	copy ..\README.macos    ..\pod\perlmacos.pod
	copy ..\README.macosx   ..\pod\perlmacosx.pod
	copy ..\README.mint     ..\pod\perlmint.pod
	copy ..\README.mpeix    ..\pod\perlmpeix.pod
	copy ..\README.netware  ..\pod\perlnetware.pod
	copy ..\README.os2      ..\pod\perlos2.pod
	copy ..\README.os390    ..\pod\perlos390.pod
	copy ..\README.os400    ..\pod\perlos400.pod
	copy ..\README.plan9    ..\pod\perlplan9.pod
	copy ..\README.qnx      ..\pod\perlqnx.pod
	copy ..\README.solaris  ..\pod\perlsolaris.pod
	copy ..\README.tru64    ..\pod\perltru64.pod
	copy ..\README.tw       ..\pod\perltw.pod
	copy ..\README.uts      ..\pod\perluts.pod
	copy ..\README.vmesa    ..\pod\perlvmesa.pod
	copy ..\README.vms      ..\pod\perlvms.pod
	copy ..\README.vos      ..\pod\perlvos.pod
	copy ..\README.win32    ..\pod\perlwin32.pod
	copy ..\pod\perl583delta.pod ..\pod\perldelta.pod
a1039 3
# Note that the pod cleanup in this next section is parsed (and regenerated
# by pod/buildtoc so please check that script before making changes here

d1092 4
a1095 5
	    perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldelta.pod perldgux.pod perldos.pod perlepoc.pod \
	    perlfreebsd.pod perlhpux.pod perlhurd.pod perlirix.pod \
	    perljp.pod perlko.pod perlmachten.pod perlmacos.pod \
	    perlmacosx.pod perlmint.pod perlmpeix.pod perlnetware.pod \
d1097 3
a1099 4
	    perlqnx.pod perlsolaris.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvms.pod perlvms.pod perlvos.pod \
	    perlwin32.pod \
	    pod2html pod2latex pod2man pod2text pod2usage \
d1103 1
a1103 1
	    dprofpp perlcc libnetcfg enc2xs piconv cpan xsubpp instmodsh prove
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d35 1
a35 1
#INST_VER = \5.8.5
d375 3
d386 2
a387 9
OPTIMIZE	= -MD -Zi -DNDEBUG
# we enable debug symbols in release builds also
LINK_DBG	= -debug -opt:ref,icf
# you may want to enable this if you want COFF symbols in the executables
# in addition to the PDB symbols.  The default Dr. Watson that ships with
# Windows can use the the former but not latter.  The free WinDbg can be
# installed to get better stack traces from just the PDB symbols, so we
# avoid the bloat of COFF symbols by default.
#LINK_DBG	= $(LINK_DBG) -debugtype:both
a472 14
# Unicode data files generated by mktables
UNIDATAFILES	 = ..\lib\unicore\Canonical.pl ..\lib\unicore\Exact.pl \
		   ..\lib\unicore\Properties ..\lib\unicore\Decomposition.pl \
		   ..\lib\unicore\CombiningClass.pl ..\lib\unicore\Name.pl \
		   ..\lib\unicore\PVA.pl

# Directories of Unicode data files generated by mktables
UNIDATADIR1	= ..\lib\unicore\To
UNIDATADIR2	= ..\lib\unicore\lib

PERLEXE_ICO	= .\perlexe.ico
PERLEXE_RES	= .\perlexe.res
PERLDLL_RES	=

a703 1
WIN32_DIR		= ext\Win32
a733 1
WIN32_DLL		= $(AUTODIR)\Win32\Win32.dll
d764 1
a764 2
		$(UNICODENORMALIZE).c	\
		$(WIN32_DIR).c
d795 1
a795 2
		$(UNICODENORMALIZE_DLL)	\
		$(WIN32_DLL)
d834 1
a834 1
all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) $(PERLEXE) \
a924 5
$(PERLEXE_ICO): $(MINIPERL) makeico.pl
	$(MINIPERL) makeico.pl > $@@

$(PERLEXE_RES): perlexe.rc $(PERLEXE_ICO)

a983 4
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext

# Note: The next two targets explicitly remove a "blibdirs.exists" file that
# currerntly gets left behind, until CPAN RT Ticket #5616 is resolved.
a986 7
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext clean
	-if exist $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists del /f $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists

Extensions_realclean: 
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) realclean
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext realclean
	-if exist $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists del /f $(EXTDIR)\SDBM_File\sdbm\blibdirs.exists
d1039 1
a1039 1
	copy ..\pod\perl585delta.pod ..\pod\perldelta.pod
d1051 1
a1051 1
distclean: realclean
a1057 4
	-del /f $(EXTDIR)\DynaLoader\DynaLoader.pm
	-del /f $(EXTDIR)\DynaLoader\XSLoader.pm
	-del /f $(LIBDIR)\Encode.pm $(LIBDIR)\encoding.pm $(LIBDIR)\Errno.pm
	-del /f $(LIBDIR)\Config.pod $(LIBDIR)\POSIX.pod $(LIBDIR)\threads.pm
d1059 1
a1059 1
	-del /f $(LIBDIR)\XSLoader.pm $(LIBDIR)\lib.pm
d1064 1
a1064 1
	-del /f $(LIBDIR)\ByteLoader.pm
a1065 1
	-del /f $(LIBDIR)\Devel\PPPort.pm
d1068 1
a1069 1
	-del /f $(LIBDIR)\PerlIO\encoding.pm
d1072 4
a1075 3
	-del /f $(LIBDIR)\Sys\Hostname.pm
	-del /f $(LIBDIR)\Thread\Signal.pm $(LIBDIR)\Thread\Specific.pm
	-del /f $(LIBDIR)\threads\shared.pm
d1077 2
a1079 1
	-del /f $(LIBDIR)\Win32.pm
a1085 2
	-if exist $(LIBDIR)\Encode rmdir /s /q $(LIBDIR)\Encode
	-if exist $(LIBDIR)\Encode rmdir /s $(LIBDIR)\Encode
d1088 2
d1098 2
a1099 1
	-cd $(PODDIR) && del /f *.html *.bat checkpods \
d1112 9
a1120 4
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs \
	    perldoc perlivp dprofpp perlcc libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove
	-cd ..\x2p && del /f find2perl s2p psed *.bat
d1124 6
a1129 3
	-del /f $(PERLEXE_ICO) perl.base
	-cd .. && del /s *.lib *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib
	-cd $(EXTDIR) && del /s *.def Makefile Makefile.old
a1140 2
	if exist ..\perl*.pdb $(XCOPY) ..\perl*.pdb $(INST_BIN)\*.*
	if exist ..\x2p\a2p.pdb $(XCOPY) ..\x2p\a2p.pdb $(INST_BIN)\*.*
d1151 2
a1152 8
$(UNIDATAFILES) : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables
	cd ..\lib\unicore && \
	..\$(MINIPERL) -I.. mktables

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) utils $(UNIDATAFILES)
	$(XCOPY) $(MINIPERL) ..\t\$(NULL)
	if exist ..\t\perl.exe del /f ..\t\perl.exe
	rename ..\t\miniperl.exe perl.exe
d1155 4
a1158 2
	cd ..\t && \
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t
d1184 1
a1184 3
# the doubled rmdir calls are needed because older cmd shells
# don't understand /q
_clean :
a1197 5
	-if exist $(UNIDATADIR1) rmdir /s /q $(UNIDATADIR1)
	-if exist $(UNIDATADIR1) rmdir /s $(UNIDATADIR1)
	-if exist $(UNIDATADIR2) rmdir /s /q $(UNIDATADIR2)
	-if exist $(UNIDATADIR2) rmdir /s $(UNIDATADIR2)
	-@@$(DEL) $(UNIDATAFILES)
a1205 4

clean : Extensions_clean _clean

realclean : Extensions_realclean _clean
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d35 1
a35 1
#INST_VER = \5.8.6
d329 1
a329 1
DELAYLOAD	= -DELAYLOAD:ws2_32.dll -DELAYLOAD:shell32.dll delayimp.lib
d415 1
a415 1
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
a841 1
		"static_ext=$(STATIC_EXT)"		\
d845 1
d1077 1
a1077 1
	copy ..\pod\perl586delta.pod ..\pod\perldelta.pod
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d4 1
a4 1
#	Visual C++ 2.0 through 7.0 (and possibly newer versions)
d35 1
a35 1
#INST_VER	= \5.8.8
d46 1
a46 9
#INST_ARCH	= \$(ARCHNAME)

#
# Uncomment this if you want perl to run
# 	$Config{sitelibexp}\sitecustomize.pl
# before anything else.  This script can then be set up, for example,
# to add additional entries to @@INC.
#
#USE_SITECUST	= define
d52 1
a52 1
USE_MULTI	= define
d59 1
a59 1
USE_ITHREADS	= define
d66 1
a66 1
USE_IMP_SYS	= define
d80 1
a80 1
USE_LARGE_FILES	= define
d93 2
a94 1
# uncomment exactly one of the following
a95 1
# Visual C++ 2.x
a96 3
# Visual C++ > 2.x and < 6.x
#CCTYPE		= MSVC
# Visual C++ 6.x (aka Visual Studio 98)
a97 4
# Visual C++ Toolkit 2003 (free version of Visual C++ 7.x command-line tools)
#CCTYPE		= MSVC70FREE
# Visual C++ 7.x (aka Visual Studio .NET 2003) (full version)
#CCTYPE		= MSVC70
d154 1
a154 1
#DEBUG_MSTATS	= define
a171 10
BUILDOPT	= $(BUILDOPTEXTRA)

# Adding -DPERL_HASH_SEED_EXPLICIT will disable randomization of Perl's
# internal hash function unless the PERL_HASH_SEED environment variable is set.
# Alternatively, adding -DNO_HASH_SEED will completely disable the
# randomization feature. 
# The latter is required to maintain binary compatibility with Perl 5.8.0.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_HASH_SEED_EXPLICIT
#BUILDOPT	= $(BUILDOPT) -DNO_HASH_SEED
a173 1
#
a191 1
#
a218 5
!IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
DEBUG_MSTATS	= undef
!ENDIF

d221 1
a221 1
DEBUG_MSTATS	= undef
d225 1
a225 1
DEBUG_MSTATS	= undef
d229 1
a229 1
BUILDOPT	= $(BUILDOPT) -DPERL_DEBUGGING_MSTATS
d240 2
a241 2
!IF "$(USE_SITECUST)" == ""
USE_SITECUST	= undef
a276 4
!IF "$(USE_SITECUST)" == "define"
BUILDOPT	= $(BUILDOPT) -DUSE_SITECUSTOMIZE
!ENDIF

d324 5
a328 4
# Visual Studio 98 and .NET 2003 specific
# VC++ 6.x and 7.x can load DLL's on demand.  Makes the test suite run in
# about 10% less time.  (The free version of 7.x can't do this, however.)
!IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"
a407 8
# the string-pooling option -Gf is deprecated in VC++ 7.x and will be removed
# in later versions, so use read-only string-pooling (-GF) instead
!IF "$(CCTYPE)" == "MSVC70FREE" || "$(CCTYPE)" == "MSVC70"
STRPOOL		= -GF
!ELSE
STRPOOL		= -Gf
!ENDIF

d426 1
a426 2
EXTRACFLAGS	= -nologo $(STRPOOL) -W3
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) \
d473 1
a473 1
CONFIGPM	= ..\lib\Config.pm ..\lib\Config_heavy.pl
d549 1
a549 1
NOOP		= @@rem
a649 1
		..\regcomp.h	\
a690 4
# specify static extensions here
#STATIC_EXT	= Cwd Compress/Zlib
STATIC_EXT	= 

d832 1
a832 1
		"ccflags=$(EXTRACFLAGS) $(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
a848 1
		"usesitecustomize=$(USE_SITECUST)"	\
a937 1
	$(MINIPERL) -I..\lib buildext.pl --create-perllibst-h
d941 2
a942 2
$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
	$(LINK32) -dll -def:perldll.def -base:0x28000000 -out:$@@ @@Extensions_static @@<<
d1008 1
a1008 1
#-------------------------------------------------------------------------------
d1010 2
a1011 2
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --dynamic
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic
d1013 2
a1014 4
Extensions_static : buildext.pl
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --static
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
	$(MINIPERL) -I..\lib buildext.pl --list-static-libs > Extensions_static
d1019 1
d1024 1
d1026 1
a1026 1
#-------------------------------------------------------------------------------
a1057 1
	copy ..\README.linux    ..\pod\perllinux.pod
a1063 1
	copy ..\README.openbsd  ..\pod\perlopenbsd.pod
d1077 1
a1077 1
	copy ..\pod\perl588delta.pod ..\pod\perldelta.pod
a1136 4
	-if exist $(LIBDIR)\Sys rmdir /s /q $(LIBDIR)\Sys
	-if exist $(LIBDIR)\Sys rmdir /s $(LIBDIR)\Sys
	-if exist $(LIBDIR)\threads rmdir /s /q $(LIBDIR)\threads
	-if exist $(LIBDIR)\threads rmdir /s $(LIBDIR)\threads
d1144 6
a1149 6
	    perljp.pod perlko.pod perllinux.pod perlmachten.pod \
	    perlmacos.pod perlmacosx.pod perlmint.pod perlmpeix.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlsolaris.pod \
	    perltru64.pod perltw.pod perluts.pod perlvmesa.pod perlvms.pod \
	    perlvms.pod perlvos.pod perlwin32.pod \
a1158 1
	-del /f perllibst.h
d1205 1
a1205 1
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1211 1
a1211 1
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
d1219 1
a1219 1
       $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
a1250 1
	-@@$(DEL) Extensions_static
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d4 2
a5 2
#	Visual C++ 2.0 or later
#	MS Platform SDK 64-bit compiler and tools
d8 1
a8 1
# (perl510.dll).  Also makes individual DLLs for the XS extensions.
d35 1
a35 1
#INST_VER	= \5.10.0
d91 10
d107 1
a107 1
# Visual C++ 6.x (aka Visual C++ 98)
d109 1
a109 1
# Visual C++ Toolkit 2003 (aka Visual C++ 7.x) (free command-line tools)
d111 1
a111 1
# Visual C++ .NET 2003 (aka Visual C++ 7.x) (full version)
a112 8
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
#CCTYPE		= MSVC80FREE
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
#CCTYPE		= MSVC80
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
#CCTYPE		= MSVC90FREE
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
#CCTYPE		= MSVC90
a171 18
# set this to additionally provide a statically linked perl-static.exe.
# Note that dynamic loading will not work with this perl, so you must
# include required modules statically using the STATIC_EXT or ALL_STATIC
# variables below. A static library perl510s.lib will also be created.
# Ordinary perl.exe is not affected by this option.
#
#BUILD_STATIC	= define

#
# in addition to BUILD_STATIC the option ALL_STATIC makes *every*
# extension get statically built
# This will result in a very large perl executable, but the main purpose
# is to have proper linking set so as to be able to create miscellaneous
# executables with different built-in extensions
#
#ALL_STATIC	= define

#
a188 1
#
d199 1
d264 8
d300 1
a300 1
!IF "$(USE_IMP_SYS)$(USE_MULTI)" == "defineundef"
d306 1
d313 1
a313 1
!IF "$(USE_MULTI)" != "undef"
a325 3
# When we are running from a 32bit cmd.exe on AMD64 then
# PROCESSOR_ARCHITECTURE is set to x86 and PROCESSOR_ARCHITEW6432
# is set to AMD64
d330 1
a330 1
!IF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITECTURE)" == "IA64"
d338 3
a340 8
ARCHITECTURE = $(PROCESSOR_ARCHITECTURE)
!IF "$(ARCHITECTURE)" == "AMD64"
ARCHITECTURE	= x64
!ENDIF
!IF "$(ARCHITECTURE)" == "IA64"
ARCHITECTURE	= ia64
!ENDIF

d342 1
a342 1
ARCHNAME	= MSWin32-$(ARCHITECTURE)-multi
d345 1
a345 1
ARCHNAME	= MSWin32-$(ARCHITECTURE)-perlio
d347 2
a348 1
ARCHNAME	= MSWin32-$(ARCHITECTURE)
d360 5
a364 21
# Visual C++ 98, .NET 2003, 2005 and 2008 specific.
# VC++ 6.x, 7.x, 8.x and 9.x can load DLL's on demand.  Makes the test suite run
# in about 10% less time.  (The free version of 7.x can't do this, but the free
# versions of 8.x and 9.x can.)
!IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"     || \
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DELAYLOAD	= -DELAYLOAD:ws2_32.dll delayimp.lib
!ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. Embed
# them for simplicity, and delete them afterwards so that they don't get
# installed too.
!IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
EMBED_EXE_MANI	= mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  del $@@.manifest
EMBED_DLL_MANI	= mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  del $@@.manifest
a373 1
HTMLDIR		= .\html
d381 1
d402 1
a402 1
CXX_FLAG	= -TP -EHsc
d440 1
a440 1
OPTIMIZE	= $(OPTIMIZE) -Wp64 -fp:precise
d443 6
a448 5
# For now, silence VC++ 8.x's and 9.x's warnings about "unsafe" CRT functions
# and POSIX CRT function names being deprecated.
!IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DEFINES		= $(DEFINES) -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
d451 1
a451 5
# Use the MSVCRT read() fix if the PerlCRT was not chosen, but only when using
# VC++ 6.x or earlier. Later versions use MSVCR70.dll, MSVCR71.dll, etc, which
# do not require the fix.
!IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC" || "$(CCTYPE)" == "MSVC60" 
!  IF "$(USE_PERLCRT)" != "define"
a452 1
!  ENDIF
d459 1
a459 1
		version.lib odbc32.lib odbccp32.lib
d461 3
a463 6
# The 64 bit Platform SDK compilers contain a runtime library that doesn't
# include the buffer overrun verification code used by the /GS switch.
# Since the code links against libraries that are compiled with /GS, this
# "security cookie verification" must be included via bufferoverlow.lib.
!IF "$(WIN64)" == "define"
LIBBASEFILES    = $(LIBBASEFILES) bufferoverflowU.lib
d469 1
a469 2
#EXTRACFLAGS	= -nologo -GF -W4 -wd4127 -wd4706
EXTRACFLAGS	= -nologo -GF -W3
a474 1
LIB_FLAGS	= -nologo
a499 1
	$(EMBED_DLL_MANI)
d509 2
a510 3
PERLIMPLIB	= ..\perl510.lib
PERLSTATICLIB	= ..\perl510s.lib
PERLDLL		= ..\perl510.dll
a515 1
PERLEXESTATIC	= ..\perl-static.exe
d520 1
a520 7
GENUUDMAP	= ..\generate_uudmap.exe
!IF "$(BUILD_STATIC)" == "define"
PERLSTATIC	= static
!ELSE
PERLSTATIC	= 
!ENDIF
  
a521 1
FIRSTUNIFILE     = ..\lib\unicore\Canonical.pl
d554 1
a558 2
		..\utils\config_data	\
		..\utils\corelist	\
a561 6
		..\utils\ptar		\
		..\utils\ptardiff	\
		..\utils\cpanp-run-perl	\
		..\utils\cpanp	\
		..\utils\cpan2dist	\
		..\utils\shasum		\
d591 2
a592 2
XCOPY		= xcopy /f /r /i /d /y
RCOPY		= xcopy /f /r /i /e /d /y
a611 1
		..\mro.c	\
a613 1
		..\mathoms.c    \
d707 1
a714 2
UUDMAP_H	= ..\uudmap.h

a724 1
GENUUDMAP_OBJ	= $(GENUUDMAP:.exe=.obj)
a727 1
PERLEXEST_OBJ	= perlmainst$(o)
d730 1
d736 136
a871 13
!IF "$(ALL_STATIC)" == "define"
# some exclusions, unfortunately, until fixed:
#  - Win32 extension contains overlapped symbols with win32.c (BUG!)
#  - MakeMaker isn't capable enough for SDBM_File (smaller bug)
#  - Encode (encoding search algorithm relies on shared library?)
STATIC_EXT	= * !Win32 !SDBM_File !Encode
!ELSE
# specify static extensions here, for example:
#STATIC_EXT	= Cwd Compress/Raw/Zlib
STATIC_EXT	= Win32CORE
!ENDIF

DYNALOADER	= $(EXTDIR)\DynaLoader\DynaLoader
d893 1
d906 2
a907 2
all : .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) MakePPPort \
	$(PERLEXE) $(X2P) Extensions $(PERLSTATIC)
a909 15
..\regcharclass.h : ..\Porting\regcharclass.pl
	cd ..
	miniperl Porting\regcharclass.pl
	cd win32

regnodes : ..\regnodes.h

..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h	

..\regexec$(o) : ..\regnodes.h ..\regcharclass.h

reonly : regnodes .\config.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) $(UNIDATAFILES) \
	$(PERLEXE) $(X2P) Extensions_reonly
	@@echo	Perl and 're' are up to date.

a911 2
static: $(PERLEXESTATIC)

a916 1
	$(EMBED_EXE_MANI)
d950 1
a960 1
	$(EMBED_EXE_MANI)
a995 1
	$(EMBED_DLL_MANI)
d998 2
a999 8
$(PERLSTATICLIB): Extensions_static
	$(LIB32) $(LIB_FLAGS) -out:$@@ @@Extensions_static @@<<
		$(PERLDLL_OBJ)
<<
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)

$(PERLEXE_ICO): $(MINIPERL) ..\uupacktool.pl $(PERLEXE_ICO).packd
	$(MINIPERL) -I..\lib ..\uupacktool.pl -u $(PERLEXE_ICO).packd $(PERLEXE_ICO)
a1028 12
	$(EMBED_EXE_MANI)

$(MINIDIR)\globals$(o) : $(UUDMAP_H)

$(UUDMAP_H) : $(GENUUDMAP)
	$(GENUUDMAP) >$(UUDMAP_H)

$(GENUUDMAP) : $(GENUUDMAP_OBJ)
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(GENUUDMAP_OBJ)
<<
	$(EMBED_EXE_MANI)
d1034 1
a1034 7
	$(CC) $(CFLAGS_O:-DPERLDLL=-UPERLDLL) $(OBJOUT_FLAG)$@@ -c perlmain.c

perlmainst.c : runperl.c
	copy runperl.c perlmainst.c

perlmainst$(o) : perlmainst.c
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ -c perlmainst.c
a1038 1
	$(EMBED_EXE_MANI)
a1043 6
$(PERLEXESTATIC): $(PERLSTATICLIB) $(CONFIGPM) $(PERLEXEST_OBJ) $(PERLEXE_RES)
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(LINK_FLAGS) \
	    @@Extensions_static $(PERLSTATICLIB) /PDB:NONE \
	    $(LIBFILES) $(PERLEXEST_OBJ) $(SETARGV_OBJ) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)

a1058 6
MakePPPort: $(MINIPERL) $(CONFIGPM)
	$(MINIPERL) -I..\lib ..\mkppport

MakePPPort_clean:
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\mkppport --clean

a1060 1
	$(XCOPY) ..\*.h $(COREDIR)\*.*
d1062 1
a1062 1
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic
d1064 1
a1064 7
Extensions_reonly: buildext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) $(EXTDIR) --dynamic +re
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --dynamic +re

Extensions_static : buildext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
d1066 1
a1066 1
	-if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext --static
d1071 1
a1071 1
	-if exist $(MINIPERL) if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext clean
d1075 1
a1075 1
	-if exist $(MINIPERL) if exist ext $(MINIPERL) -I..\lib buildext.pl $(MAKE) $(PERLDEP) ext realclean
d1080 1
a1080 1
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
a1121 1
	copy ..\README.riscos   ..\pod\perlriscos.pod
a1122 1
	copy ..\README.symbian  ..\pod\perlsymbian.pod
d1130 1
a1130 1
	copy ..\pod\perl5100delta.pod ..\pod\perldelta.pod
d1140 2
d1144 1
a1144 2
		$(PERLIMPLIB) ..\miniperl.lib $(MINIMOD) \
		$(PERLEXESTATIC) $(PERLSTATICLIB)
d1146 2
a1147 1
	-del /f $(DYNALOADER).c
d1159 1
a1164 1
	-del /f $(LIBDIR)\Digest\SHA.pm
d1169 1
a1172 1
	-del /f $(LIBDIR)\Math\BigInt\FastCalc.pm
d1174 2
a1175 3
	-del /f $(LIBDIR)\Win32CORE.pm
	-del /f $(LIBDIR)\Win32API\File.pm
	-del /f $(LIBDIR)\Win32API\File\cFile.pc
d1177 1
a1177 1
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
d1179 1
d1181 1
d1183 3
a1185 4
	-if exist $(LIBDIR)\Hash rmdir /s /q $(LIBDIR)\Hash
	-if exist $(LIBDIR)\IO\Compress rmdir /s /q $(LIBDIR)\IO\Compress
	-if exist $(LIBDIR)\IO\Socket rmdir /s /q $(LIBDIR)\IO\Socket
	-if exist $(LIBDIR)\IO\Uncompress rmdir /s /q $(LIBDIR)\IO\Uncompress
d1187 1
a1187 2
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\re rmdir /s /q $(LIBDIR)\re
d1189 1
d1191 1
d1193 1
d1195 1
a1195 1
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
d1204 3
a1206 4
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvms.pod perlvms.pod perlvos.pod \
	    perlwin32.pod \
d1210 2
a1211 2
	    perldoc perlivp dprofpp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove ptar ptardiff cpanp-run-perl cpanp cpan2dist shasum corelist config_data
d1213 1
a1213 2
	-del /f ..\config.sh ..\splittree.pl perlmain.c dlutils.c config.h.new \
	        perlmainst.c
d1221 1
d1223 1
a1223 3
	-if exist pod2htmd.tmp del pod2htmd.tmp
	-if exist pod2htmi.tmp del pod2htmi.tmp
	-if exist $(HTMLDIR) rmdir /s /q $(HTMLDIR)
a1229 1
	if exist $(PERLEXESTATIC) $(XCOPY) $(PERLEXESTATIC) $(INST_BIN)\*.*
d1236 1
a1236 1
	$(RCOPY) $(HTMLDIR)\*.* $(INST_HTML)\*.*
d1245 1
a1245 1
	..\$(MINIPERL) -I.. mktables -check $@@ $(FIRSTUNIFILE)
d1256 1
a1256 1
test-prep : all utils unpack_files
a1265 19
unpack_files:
	$(MINIPERL) -I..\lib ..\uupacktool.pl -u -d .. -m

cleanup_unpacked_files:
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\uupacktool.pl -c -d .. -m

test-reonly : reonly utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	cd ..\t
	$(PERLEXE) -I..\lib harness $(OPT) -re \bpat\b \breg \bre\b \bsubst \brxcode $(EXTRA)
	cd ..\win32

regen :
	cd ..
	regen.pl
	cd win32

d1280 2
a1286 1
	-@@$(DEL) perlmainst$(o)
a1291 2
	-@@$(DEL) $(PERLEXESTATIC)
	-@@$(DEL) $(PERLSTATICLIB)
a1293 1
	-@@$(DEL) $(GENUUDMAP) $(GENUUDMAP_OBJ) $(UUDMAP_H)
d1295 1
d1297 1
d1299 1
d1311 1
a1311 3
_preclean : cleanup_unpacked_files

clean : _preclean Extensions_clean _clean
d1313 1
a1313 1
realclean : _preclean Extensions_realclean MakePPPort_clean _clean
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d35 1
a35 1
#INST_VER	= \5.10.1
d386 10
a395 7
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest
d619 1
d770 1
a770 1
CORE_H		= $(CORE_NOCFG_H) .\config.h ..\git_version.h
d842 2
a843 2
all : .\config.h ..\git_version.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) \
	$(UNIDATAFILES) MakePPPort $(PERLEXE) $(X2P) Extensions $(PERLSTATIC)
d857 2
a858 2
reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) \
	$(UNIDATAFILES) $(PERLEXE) $(X2P) Extensions_reonly
a880 8
..\git_version.h : $(MINIPERL) ..\make_patchnum.pl
	cd ..
	miniperl -Ilib make_patchnum.pl
	cd win32

# make sure that we recompile perl.c if the git version changes
..\perl$(o) : ..\git_version.h

d884 3
a886 9
# this target is for when changes to the main config.sh happen.
# edit config.vc, then make perl in a minimal configuration (i.e. with MULTI,
# ITHREADS, IMP_SYS, LARGE_FILES, PERLIO and CRYPT off), then make this target
# to regenerate config_H.vc.
# repeat for config.vc64 and config_H.vc64 if you have a suitable build
# environment, otherwise hand-edit them to maintain the same differences with
# config.vc and config_H.vc as before.
# unfortunately, some further manual editing is also then required to restore all
# the special __GNUC__ handling that is otherwise lost.
d888 1
a888 1
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh
d890 2
a891 1
	miniperl configpm
d894 2
a895 1
	-$(MINIPERL) -I..\lib config_h.PL "INST_VER=$(INST_VER)"
d920 1
a920 1
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*F).c
a933 1
# 3. we can't have miniperl.exe depend on git_version.h, as miniperl creates it
d941 2
a942 2
perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl create_perllibst_h.pl
	$(MINIPERL) -I..\lib create_perllibst_h.pl
d1052 1
a1052 1
Extensions: ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
d1054 2
a1055 1
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynamic
d1057 1
a1057 1
Extensions_reonly: ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
d1059 2
a1060 1
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynamic +re
d1062 1
a1062 1
Extensions_static : ..\make_ext.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
d1064 3
a1066 2
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --static
	$(MINIPERL) -I..\lib list_static_libs.pl > Extensions_static
d1069 2
a1070 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --all --target=clean
d1073 2
a1074 1
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --all --target=realclean
d1090 1
a1102 1
	copy ..\README.haiku    ..\pod\perlhaiku.pod
d1128 1
d1131 1
a1131 1
	copy ..\pod\perl5101delta.pod ..\pod\perldelta.pod
a1136 3
	$(PERLEXE) ..\autodoc.pl ..
	$(PERLEXE) ..\pod\perlmodlib.pl -q
	$(PERLEXE) ..\pod\buildtoc --build-toc -q
a1181 4
	-if exist $(LIBDIR)\App rmdir /s /q $(LIBDIR)\App
	-if exist $(LIBDIR)\Module\Pluggable rmdir /s /q $(LIBDIR)\Module\Pluggable
	-if exist $(LIBDIR)\TAP rmdir /s /q $(LIBDIR)\TAP
	-if exist $(LIBDIR)\mro rmdir /s /q $(LIBDIR)\mro
d1193 12
a1204 12
	-cd $(PODDIR) && del /f *.html *.bat podchecker \
	    perlaix.pod perlamiga.pod perlapi.pod perlapollo.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcn.pod \
	    perlcygwin.pod perldelta.pod perldgux.pod perldos.pod \
	    perlepoc.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmachten.pod perlmacos.pod perlmacosx.pod \
	    perlmint.pod perlmodlib.pod perlmpeix.pod perlnetware.pod \
	    perlopenbsd.pod perlos2.pod perlos390.pod perlos400.pod \
	    perlplan9.pod perlqnx.pod perlriscos.pod perlsolaris.pod \
	    perlsymbian.pod perltoc.pod perltru64.pod perltw.pod \
	    perluts.pod perlvmesa.pod perlvos.pod perlwin32.pod \
a1213 1
	-del /f ..\lib\Config_git.pl
a1223 1
	-del /f ..\t\test_state
a1307 1
	-@@$(DEL) ..\git_version.h
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d1 1363
a1363 1370
#
# Makefile to build perl on Windows NT using Microsoft NMAKE.
# Supported compilers:
#	Visual C++ 2.0 or later
#	Windows SDK 64-bit compiler and tools
#
# This is set up to build a perl.exe that runs off a shared library
# (perl512.dll).  Also makes individual DLLs for the XS extensions.
#

##
## Make sure you read README.win32 *before* you mess with anything here!
##

##
## Build configuration.  Edit the values below to suit your needs.
##

#
# Set these to wherever you want "nmake install" to put your
# newly built perl.
#
INST_DRV	= c:
INST_TOP	= $(INST_DRV)\perl

#
# Uncomment if you want to build a 32-bit Perl using a 32-bit compiler
# on a 64-bit version of Windows.
#WIN64		= undef

#
# Comment this out if you DON'T want your perl installation to be versioned.
# This means that the new installation will overwrite any files from the
# old installation at the same INST_TOP location.  Leaving it enabled is
# the safest route, as perl adds the extra version directory to all the
# locations it installs files to.  If you disable it, an alternative
# versioned installation can be obtained by setting INST_TOP above to a
# path that includes an arbitrary version string.
#
#INST_VER	= \5.12.2

#
# Comment this out if you DON'T want your perl installation to have
# architecture specific components.  This means that architecture-
# specific files will be installed along with the architecture-neutral
# files.  Leaving it enabled is safer and more flexible, in case you
# want to build multiple flavors of perl and install them together in
# the same location.  Commenting it out gives you a simpler
# installation that is easier to understand for beginners.
#
#INST_ARCH	= \$(ARCHNAME)

#
# Uncomment this if you want perl to run
# 	$Config{sitelibexp}\sitecustomize.pl
# before anything else.  This script can then be set up, for example,
# to add additional entries to @@INC.
#
#USE_SITECUST	= define

#
# uncomment to enable multiple interpreters.  This is need for fork()
# emulation and for thread support.
#
USE_MULTI	= define

#
# Beginnings of interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  This needs
# USE_MULTI as well.
#
USE_ITHREADS	= define

#
# uncomment to enable the implicit "host" layer for all system calls
# made by perl.  This needs USE_MULTI above.  This is also needed to
# get fork().
#
USE_IMP_SYS	= define

#
# Comment out next assign to disable perl's I/O subsystem and use compiler's 
# stdio for IO - depending on your compiler vendor and run time library you may 
# then get a number of fails from make test i.e. bugs - complain to them not us ;-). 
# You will also be unable to take full advantage of perl5.8's support for multiple 
# encodings and may see lower IO performance. You have been warned.
USE_PERLIO	= define

#
# Comment this out if you don't want to enable large file support for
# some reason.  Should normally only be changed to maintain compatibility
# with an older release of perl.
USE_LARGE_FILES	= define

#
# uncomment exactly one of the following
#
# Visual C++ 2.x
#CCTYPE		= MSVC20
# Visual C++ > 2.x and < 6.x
#CCTYPE		= MSVC
# Visual C++ 6.x (aka Visual C++ 98)
CCTYPE		= MSVC60
# Visual C++ Toolkit 2003 (aka Visual C++ 7.x) (free command-line tools)
#CCTYPE		= MSVC70FREE
# Visual C++ .NET 2003 (aka Visual C++ 7.x) (full version)
#CCTYPE		= MSVC70
# Windows Server 2003 SP1 Platform SDK (April 2005)
#CCTYPE		= SDK2003SP1
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
#CCTYPE		= MSVC80FREE
# Visual C++ 2005 (aka Visual C++ 8.x) (full version)
#CCTYPE		= MSVC80
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
#CCTYPE		= MSVC90FREE
# Visual C++ 2008 (aka Visual C++ 9.x) (full version)
#CCTYPE		= MSVC90

#
# uncomment next line if you want debug version of perl (big,slow)
# If not enabled, we automatically try to use maximum optimization
# with all compilers that are known to have a working optimizer.
#
#CFG		= Debug

#
# uncomment to enable use of PerlCRT.DLL when using the Visual C compiler.
# It has patches that fix known bugs in older versions of MSVCRT.DLL.
# This currently requires VC 5.0 with Service Pack 3 or later.
# Get it from CPAN at http://www.cpan.org/authors/id/D/DO/DOUGL/
# and follow the directions in the package to install.
#
# Not recommended if you have VC 6.x and you're not running Windows 9x.
#
#USE_PERLCRT	= define

#
# uncomment to enable linking with setargv.obj under the Visual C
# compiler. Setting this options enables perl to expand wildcards in
# arguments, but it may be harder to use alternate methods like
# File::DosGlob that are more powerful.  This option is supported only with
# Visual C.
#
#USE_SETARGV	= define

#
# if you want to have the crypt() builtin function implemented, leave this or
# CRYPT_LIB uncommented.  The fcrypt.c file named here contains a suitable
# version of des_fcrypt().
#
CRYPT_SRC	= fcrypt.c

#
# if you didn't set CRYPT_SRC and if you have des_fcrypt() available in a
# library, uncomment this, and make sure the library exists (see README.win32)
# Specify the full pathname of the library.
#
#CRYPT_LIB	= fcrypt.lib

#
# set this if you wish to use perl's malloc
# WARNING: Turning this on/off WILL break binary compatibility with extensions
# you may have compiled with/without it.  Be prepared to recompile all
# extensions if you change the default.  Currently, this cannot be enabled
# if you ask for USE_IMP_SYS above.
#
#PERL_MALLOC	= define

#
# set this to enable debugging mstats
# This must be enabled to use the Devel::Peek::mstat() function.  This cannot
# be enabled without PERL_MALLOC as well.
#
#DEBUG_MSTATS	= define

#
# set this to additionally provide a statically linked perl-static.exe.
# Note that dynamic loading will not work with this perl, so you must
# include required modules statically using the STATIC_EXT or ALL_STATIC
# variables below. A static library perl512s.lib will also be created.
# Ordinary perl.exe is not affected by this option.
#
#BUILD_STATIC	= define

#
# in addition to BUILD_STATIC the option ALL_STATIC makes *every*
# extension get statically built
# This will result in a very large perl executable, but the main purpose
# is to have proper linking set so as to be able to create miscellaneous
# executables with different built-in extensions
#
#ALL_STATIC	= define

#
#
# set the install locations of the compiler include/libraries
# Running VCVARS32.BAT is *required* when using Visual C.
# Some versions of Visual C don't define MSVCDIR in the environment,
# so you may have to set CCHOME explicitly (spaces in the path name should
# not be quoted)
#
#CCHOME		= f:\msvc20
CCHOME		= $(MSVCDIR)
CCINCDIR	= $(CCHOME)\include
CCLIBDIR	= $(CCHOME)\lib

#
# Additional compiler flags can be specified here.
#
BUILDOPT	= $(BUILDOPTEXTRA)

#
# Adding -DPERL_HASH_SEED_EXPLICIT will disable randomization of Perl's
# internal hash function unless the PERL_HASH_SEED environment variable is set.
# Alternatively, adding -DNO_HASH_SEED will completely disable the
# randomization feature. 
# The latter is required to maintain binary compatibility with Perl 5.8.0.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_HASH_SEED_EXPLICIT
#BUILDOPT	= $(BUILDOPT) -DNO_HASH_SEED

#
# This should normally be disabled.  Adding -DPERL_POLLUTE enables support
# for old symbols by default, at the expense of extreme pollution.  You most
# probably just want to build modules that won't compile with
#         perl Makefile.PL POLLUTE=1
# instead of enabling this.  Please report such modules to the respective
# authors.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_POLLUTE

#
# This should normally be disabled.  Enabling it will disable the File::Glob
# implementation of CORE::glob.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_EXTERNAL_GLOB

#
# This should normally be disabled.  Enabling it causes perl to read scripts
# in text mode (which is the 5.005 behavior) and will break ByteLoader.
#
#BUILDOPT	= $(BUILDOPT) -DPERL_TEXTMODE_SCRIPTS

#
# specify semicolon-separated list of extra directories that modules will
# look for libraries (spaces in path names need not be quoted)
#
EXTRALIBDIRS	=

#
# set this to your email address (perl will guess a value from
# from your loginname and your hostname, which may not be right)
#
#EMAIL		=

##
## Build configuration ends.
##

##################### CHANGE THESE ONLY IF YOU MUST #####################

!IF "$(CRYPT_SRC)$(CRYPT_LIB)" == ""
D_CRYPT		= undef
!ELSE
D_CRYPT		= define
CRYPT_FLAG	= -DHAVE_DES_FCRYPT
!ENDIF

!IF "$(USE_IMP_SYS)" == "define"
PERL_MALLOC	= undef
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(PERL_MALLOC)" == ""
PERL_MALLOC	= undef
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(DEBUG_MSTATS)" == ""
DEBUG_MSTATS	= undef
!ENDIF

!IF "$(DEBUG_MSTATS)" == "define"
BUILDOPT	= $(BUILDOPT) -DPERL_DEBUGGING_MSTATS
!ENDIF

!IF "$(USE_SITECUST)" == ""
USE_SITECUST	= undef
!ENDIF

!IF "$(USE_MULTI)" == ""
USE_MULTI	= undef
!ENDIF

!IF "$(USE_ITHREADS)" == ""
USE_ITHREADS	= undef
!ENDIF

!IF "$(USE_IMP_SYS)" == ""
USE_IMP_SYS	= undef
!ENDIF

!IF "$(USE_PERLIO)" == ""
USE_PERLIO	= undef
!ENDIF

!IF "$(USE_LARGE_FILES)" == ""
USE_LARGE_FILES	= undef
!ENDIF

!IF "$(USE_PERLCRT)" == ""
USE_PERLCRT	= undef
!ENDIF

!IF "$(USE_IMP_SYS)$(USE_MULTI)" == "defineundef"
USE_MULTI	= define
!ENDIF

!IF "$(USE_ITHREADS)$(USE_MULTI)" == "defineundef"
USE_MULTI	= define
!ENDIF

!IF "$(USE_SITECUST)" == "define"
BUILDOPT	= $(BUILDOPT) -DUSE_SITECUSTOMIZE
!ENDIF

!IF "$(USE_MULTI)" != "undef"
BUILDOPT	= $(BUILDOPT) -DPERL_IMPLICIT_CONTEXT
!ENDIF

!IF "$(USE_IMP_SYS)" != "undef"
BUILDOPT	= $(BUILDOPT) -DPERL_IMPLICIT_SYS
!ENDIF

!IF "$(PROCESSOR_ARCHITECTURE)" == ""
PROCESSOR_ARCHITECTURE	= x86
!ENDIF

!IF "$(WIN64)" == ""
# When we are running from a 32bit cmd.exe on AMD64 then
# PROCESSOR_ARCHITECTURE is set to x86 and PROCESSOR_ARCHITEW6432
# is set to AMD64
!IF "$(PROCESSOR_ARCHITEW6432)" != ""
PROCESSOR_ARCHITECTURE	= $(PROCESSOR_ARCHITEW6432)
WIN64			= define
!ELSE
!IF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITECTURE)" == "IA64"
WIN64			= define
!ELSE
WIN64			= undef
!ENDIF
!ENDIF
!ENDIF

# Treat 64-bit MSVC60 (doesn't really exist) as SDK2003SP1 because
# both link against MSVCRT.dll (which is part of Windows itself) and
# not against a compiler specific versioned runtime.
!IF "$(WIN64)" == "define" && "$(CCTYPE)" == "MSVC60"
CCTYPE		= SDK2003SP1
!ENDIF

ARCHITECTURE = $(PROCESSOR_ARCHITECTURE)
!IF "$(ARCHITECTURE)" == "AMD64"
ARCHITECTURE	= x64
!ENDIF
!IF "$(ARCHITECTURE)" == "IA64"
ARCHITECTURE	= ia64
!ENDIF

!IF "$(USE_MULTI)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-multi
!ELSE
!IF "$(USE_PERLIO)" == "define"
ARCHNAME	= MSWin32-$(ARCHITECTURE)-perlio
!ELSE
ARCHNAME	= MSWin32-$(ARCHITECTURE)
!ENDIF
!ENDIF

!IF "$(USE_PERLIO)" == "define"
BUILDOPT	= $(BUILDOPT) -DUSE_PERLIO
!ENDIF

!IF "$(USE_ITHREADS)" == "define"
ARCHNAME	= $(ARCHNAME)-thread
!ENDIF

# Visual C++ 98, .NET 2003, 2005 and 2008 specific.
# VC++ 6.x, 7.x, 8.x and 9.x can load DLL's on demand.  Makes the test suite run
# in about 10% less time.  (The free version of 7.x can't do this, but the free
# versions of 8.x and 9.x can.)
!IF "$(CCTYPE)" == "MSVC60" || "$(CCTYPE)" == "MSVC70"     || \
    "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DELAYLOAD	= -DELAYLOAD:ws2_32.dll delayimp.lib
!ENDIF

# Visual C++ 2005 and 2008 (VC++ 8.x and 9.x) create manifest files for EXEs and
# DLLs. These either need copying everywhere with the binaries, or else need
# embedding in them otherwise MSVCR80.dll or MSVCR90.dll won't be found. For
# simplicity, embed them if they exist (and delete them afterwards so that they
# don't get installed too).
EMBED_EXE_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;1 && \
		  if exist $@@.manifest del $@@.manifest
EMBED_DLL_MANI	= if exist $@@.manifest mt -nologo -manifest $@@.manifest -outputresource:$@@;2 && \
		  if exist $@@.manifest del $@@.manifest

ARCHDIR		= ..\lib\$(ARCHNAME)
COREDIR		= ..\lib\CORE
AUTODIR		= ..\lib\auto
LIBDIR		= ..\lib
EXTDIR		= ..\ext
DISTDIR		= ..\dist
CPANDIR		= ..\cpan
PODDIR		= ..\pod
EXTUTILSDIR	= $(LIBDIR)\ExtUtils
HTMLDIR		= .\html

#
INST_SCRIPT	= $(INST_TOP)$(INST_VER)\bin
INST_BIN	= $(INST_SCRIPT)$(INST_ARCH)
INST_LIB	= $(INST_TOP)$(INST_VER)\lib
INST_ARCHLIB	= $(INST_LIB)$(INST_ARCH)
INST_COREDIR	= $(INST_ARCHLIB)\CORE
INST_HTML	= $(INST_TOP)$(INST_VER)\html

#
# Programs to compile, build .lib files and link
#

CC		= cl
LINK32		= link
LIB32		= $(LINK32) -lib
RSC		= rc

#
# Options
#

INCLUDES	= -I$(COREDIR) -I.\include -I. -I..
#PCHFLAGS	= -Fpc:\temp\vcmoduls.pch -YX
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG)
LOCDEFS		= -DPERLDLL -DPERL_CORE
SUBSYS		= console
CXX_FLAG	= -TP -EHsc

!IF "$(USE_PERLCRT)" != "define"
LIBC	= msvcrt.lib
!ELSE
LIBC	= PerlCRT.lib
!ENDIF

!IF  "$(CFG)" == "Debug"
!  IF "$(CCTYPE)" == "MSVC20"
OPTIMIZE	= -Od -MD -Z7 -DDEBUGGING
!  ELSE
OPTIMIZE	= -Od -MD -Zi -DDEBUGGING
!  ENDIF
LINK_DBG	= -debug
!ELSE
OPTIMIZE	= -MD -Zi -DNDEBUG
# we enable debug symbols in release builds also
LINK_DBG	= -debug -opt:ref,icf
# you may want to enable this if you want COFF symbols in the executables
# in addition to the PDB symbols.  The default Dr. Watson that ships with
# Windows can use the the former but not latter.  The free WinDbg can be
# installed to get better stack traces from just the PDB symbols, so we
# avoid the bloat of COFF symbols by default.
#LINK_DBG	= $(LINK_DBG) -debugtype:both
!  IF "$(WIN64)" == "define"
# enable Whole Program Optimizations (WPO) and Link Time Code Generation (LTCG)
OPTIMIZE	= $(OPTIMIZE) -Ox -GL
LINK_DBG	= $(LINK_DBG) -ltcg
!  ELSE
# -O1 yields smaller code, which turns out to be faster than -O2 on x86
OPTIMIZE	= $(OPTIMIZE) -O1
#OPTIMIZE	= $(OPTIMIZE) -O2
!  ENDIF
!ENDIF

!IF "$(WIN64)" == "define"
DEFINES		= $(DEFINES) -DWIN64 -DCONSERVATIVE
OPTIMIZE	= $(OPTIMIZE) -fp:precise
!ENDIF

# For now, silence VC++ 8.x's and 9.x's warnings about "unsafe" CRT functions
# and POSIX CRT function names being deprecated.
!IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
DEFINES		= $(DEFINES) -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
!ENDIF

# Use the MSVCRT read() fix if the PerlCRT was not chosen, but only when using
# VC++ 6.x or earlier. Later versions use MSVCR70.dll, MSVCR71.dll, etc, which
# do not require the fix.
!IF "$(CCTYPE)" == "MSVC20" || "$(CCTYPE)" == "MSVC" || "$(CCTYPE)" == "MSVC60" 
!  IF "$(USE_PERLCRT)" != "define"
BUILDOPT	= $(BUILDOPT) -DPERL_MSVCRT_READFIX
!  ENDIF
!ENDIF

LIBBASEFILES	= $(CRYPT_LIB) \
		oldnames.lib kernel32.lib user32.lib gdi32.lib winspool.lib \
		comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
		netapi32.lib uuid.lib ws2_32.lib mpr.lib winmm.lib \
		version.lib odbc32.lib odbccp32.lib comctl32.lib

# The 64 bit Windows Server 2003 SP1 SDK compilers link against MSVCRT.dll, which
# doesn't include the buffer overrun verification code used by the /GS switch.
# Since the code links against libraries that are compiled with /GS, this
# "security cookie verification" code must be included via bufferoverflow.lib.
!IF "$(WIN64)" == "define" && "$(CCTYPE)" == "SDK2003SP1"
LIBBASEFILES    = $(LIBBASEFILES) bufferoverflowU.lib
!ENDIF

# we add LIBC here, since we may be using PerlCRT.dll
LIBFILES	= $(LIBBASEFILES) $(LIBC)

#EXTRACFLAGS	= -nologo -GF -W4 -wd4127 -wd4706
EXTRACFLAGS	= -nologo -GF -W3
CFLAGS		= $(EXTRACFLAGS) $(INCLUDES) $(DEFINES) $(LOCDEFS) \
		$(PCHFLAGS) $(OPTIMIZE)
LINK_FLAGS	= -nologo -nodefaultlib $(LINK_DBG) \
		-libpath:"$(INST_COREDIR)" \
		-machine:$(PROCESSOR_ARCHITECTURE)
LIB_FLAGS	= -nologo
OBJOUT_FLAG	= -Fo
EXEOUT_FLAG	= -Fe

CFLAGS_O	= $(CFLAGS) $(BUILDOPT)

!IF "$(CCTYPE)" == "MSVC80" || "$(CCTYPE)" == "MSVC80FREE" || \
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE"
LINK_FLAGS	= $(LINK_FLAGS) "/manifestdependency:type='Win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'"
!ELSE
RSC_FLAGS	= -DINCLUDE_MANIFEST
!ENDIF


#################### do not edit below this line #######################
############# NO USER-SERVICEABLE PARTS BEYOND THIS POINT ##############

o = .obj

#
# Rules
#

.SUFFIXES : .c $(o) .dll .lib .exe .rc .res

.c$(o):
	$(CC) -c -I$(<D) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ $<

.y.c:
	$(NOOP)

$(o).dll:
	$(LINK32) -dll -subsystem:windows -implib:$(*B).lib -def:$(*B).def \
	    -out:$@@ $(LINK_FLAGS) $(LIBFILES) $< $(LIBPERL)
	$(EMBED_DLL_MANI)

.rc.res:
	$(RSC) -i.. $(RSC_FLAGS) $<

#
# various targets

# makedef.pl must be updated if this changes, and this should normally
# only change when there is an incompatible revision of the public API.
PERLIMPLIB	= ..\perl512.lib
PERLSTATICLIB	= ..\perl512s.lib
PERLDLL		= ..\perl512.dll

MINIPERL	= ..\miniperl.exe
MINIDIR		= .\mini
PERLEXE		= ..\perl.exe
WPERLEXE	= ..\wperl.exe
PERLEXESTATIC	= ..\perl-static.exe
GLOBEXE		= ..\perlglob.exe
CONFIGPM	= ..\lib\Config.pm ..\lib\Config_heavy.pl
MINIMOD		= ..\lib\ExtUtils\Miniperl.pm
X2P		= ..\x2p\a2p.exe
GENUUDMAP	= ..\generate_uudmap.exe
!IF "$(BUILD_STATIC)" == "define"
PERLSTATIC	= static
!ELSE
PERLSTATIC	= 
!ENDIF
  
# Unicode data files generated by mktables
FIRSTUNIFILE     = ..\lib\unicore\Decomposition.pl
UNIDATAFILES	 = ..\lib\unicore\Decomposition.pl \
		   ..\lib\unicore\CombiningClass.pl ..\lib\unicore\Name.pl \
		   ..\lib\unicore\Heavy.pl ..\lib\unicore\mktables.lst \
		   ..\lib\unicore\TestProp.pl

# Directories of Unicode data files generated by mktables
UNIDATADIR1	= ..\lib\unicore\To
UNIDATADIR2	= ..\lib\unicore\lib

PERLEXE_MANIFEST= .\perlexe.manifest
PERLEXE_ICO	= .\perlexe.ico
PERLEXE_RES	= .\perlexe.res
PERLDLL_RES	=

# Nominate a target which causes extensions to be re-built
# This used to be $(PERLEXE), but at worst it is the .dll that they depend
# on and really only the interface - i.e. the .def file used to export symbols
# from the .dll
PERLDEP		= perldll.def

PL2BAT		= bin\pl2bat.pl
GLOBBAT		= bin\perlglob.bat

UTILS		=			\
		..\utils\h2ph		\
		..\utils\splain		\
		..\utils\dprofpp	\
		..\utils\perlbug	\
		..\utils\pl2pm 		\
		..\utils\c2ph		\
		..\utils\pstruct	\
		..\utils\h2xs		\
		..\utils\perldoc	\
		..\utils\perlivp	\
		..\utils\libnetcfg	\
		..\utils\enc2xs		\
		..\utils\piconv		\
		..\utils\config_data	\
		..\utils\corelist	\
		..\utils\cpan		\
		..\utils\xsubpp		\
		..\utils\prove		\
		..\utils\ptar		\
		..\utils\ptardiff	\
		..\utils\cpanp-run-perl	\
		..\utils\cpanp	\
		..\utils\cpan2dist	\
		..\utils\shasum		\
		..\utils\instmodsh	\
		..\pod\pod2html		\
		..\pod\pod2latex	\
		..\pod\pod2man		\
		..\pod\pod2text		\
		..\pod\pod2usage	\
		..\pod\podchecker	\
		..\pod\podselect	\
		..\x2p\find2perl	\
		..\x2p\psed		\
		..\x2p\s2p		\
		bin\exetype.pl		\
		bin\runperl.pl		\
		bin\pl2bat.pl		\
		bin\perlglob.pl		\
		bin\search.pl

MAKE		= nmake -nologo
MAKE_BARE	= nmake

!IF "$(WIN64)" == "define"
CFGSH_TMPL	= config.vc64
CFGH_TMPL	= config_H.vc64
!ELSE
CFGSH_TMPL	= config.vc
CFGH_TMPL	= config_H.vc
!ENDIF

XCOPY		= xcopy /f /r /i /d /y
RCOPY		= xcopy /f /r /i /e /d /y
NOOP		= @@rem
NULL		=

DEL		= del

MICROCORE_SRC	=		\
		..\av.c		\
		..\deb.c	\
		..\doio.c	\
		..\doop.c	\
		..\dump.c	\
		..\globals.c	\
		..\gv.c		\
		..\mro.c	\
		..\hv.c		\
		..\locale.c	\
		..\mathoms.c    \
		..\mg.c		\
		..\numeric.c	\
		..\op.c		\
		..\pad.c	\
		..\perl.c	\
		..\perlapi.c	\
		..\perly.c	\
		..\pp.c		\
		..\pp_ctl.c	\
		..\pp_hot.c	\
		..\pp_pack.c	\
		..\pp_sort.c	\
		..\pp_sys.c	\
		..\reentr.c	\
		..\regcomp.c	\
		..\regexec.c	\
		..\run.c	\
		..\scope.c	\
		..\sv.c		\
		..\taint.c	\
		..\toke.c	\
		..\universal.c	\
		..\utf8.c	\
		..\util.c

EXTRACORE_SRC	= $(EXTRACORE_SRC) perllib.c

!IF "$(PERL_MALLOC)" == "define"
EXTRACORE_SRC	= $(EXTRACORE_SRC) ..\malloc.c
!ENDIF

EXTRACORE_SRC	= $(EXTRACORE_SRC) ..\perlio.c

WIN32_SRC	=		\
		.\win32.c	\
		.\win32sck.c	\
		.\win32thread.c

# We need this for miniperl build unless we override canned 
# config.h #define building mini\*
#!IF "$(USE_PERLIO)" == "define"
WIN32_SRC	= $(WIN32_SRC) .\win32io.c
#!ENDIF

!IF "$(CRYPT_SRC)" != ""
WIN32_SRC	= $(WIN32_SRC) .\$(CRYPT_SRC)
!ENDIF

X2P_SRC		=		\
		..\x2p\a2p.c	\
		..\x2p\hash.c	\
		..\x2p\str.c	\
		..\x2p\util.c	\
		..\x2p\walk.c

CORE_NOCFG_H	=		\
		..\av.h		\
		..\cop.h	\
		..\cv.h		\
		..\dosish.h	\
		..\embed.h	\
		..\form.h	\
		..\gv.h		\
		..\handy.h	\
		..\hv.h		\
		..\iperlsys.h	\
		..\mg.h		\
		..\nostdio.h	\
		..\op.h		\
		..\opcode.h	\
		..\perl.h	\
		..\perlapi.h	\
		..\perlsdio.h	\
		..\perlsfio.h	\
		..\perly.h	\
		..\pp.h		\
		..\proto.h	\
		..\regcomp.h	\
		..\regexp.h	\
		..\scope.h	\
		..\sv.h		\
		..\thread.h	\
		..\unixish.h	\
		..\utf8.h	\
		..\util.h	\
		..\warnings.h	\
		..\XSUB.h	\
		..\EXTERN.h	\
		..\perlvars.h	\
		..\intrpvar.h	\
		.\include\dirent.h	\
		.\include\netdb.h	\
		.\include\sys\socket.h	\
		.\win32.h

CORE_H		= $(CORE_NOCFG_H) .\config.h ..\git_version.h

UUDMAP_H	= ..\uudmap.h
BITCOUNT_H	= ..\bitcount.h

MICROCORE_OBJ	= $(MICROCORE_SRC:.c=.obj)
CORE_OBJ	= $(MICROCORE_OBJ) $(EXTRACORE_SRC:.c=.obj)
WIN32_OBJ	= $(WIN32_SRC:.c=.obj)
MINICORE_OBJ	= $(MICROCORE_OBJ:..\=.\mini\)	\
		  $(MINIDIR)\miniperlmain$(o)	\
		  $(MINIDIR)\perlio$(o)
MINIWIN32_OBJ	= $(WIN32_OBJ:.\=.\mini\)
MINI_OBJ	= $(MINICORE_OBJ) $(MINIWIN32_OBJ)
DLL_OBJ		= $(DYNALOADER)
X2P_OBJ		= $(X2P_SRC:.c=.obj)
GENUUDMAP_OBJ	= $(GENUUDMAP:.exe=.obj)

PERLDLL_OBJ	= $(CORE_OBJ)
PERLEXE_OBJ	= perlmain$(o)
PERLEXEST_OBJ	= perlmainst$(o)

PERLDLL_OBJ	= $(PERLDLL_OBJ) $(WIN32_OBJ) $(DLL_OBJ)

!IF "$(USE_SETARGV)" != ""
SETARGV_OBJ	= setargv$(o)
!ENDIF

!IF "$(ALL_STATIC)" == "define"
# some exclusions, unfortunately, until fixed:
#  - Win32 extension contains overlapped symbols with win32.c (BUG!)
#  - MakeMaker isn't capable enough for SDBM_File (smaller bug)
#  - Encode (encoding search algorithm relies on shared library?)
STATIC_EXT	= * !Win32 !SDBM_File !Encode
!ELSE
# specify static extensions here, for example:
#STATIC_EXT	= Cwd Compress/Raw/Zlib
STATIC_EXT	= Win32CORE
!ENDIF

DYNALOADER	= ..\DynaLoader$(o)

CFG_VARS	=					\
		"INST_DRV=$(INST_DRV)"			\
		"INST_TOP=$(INST_TOP)"			\
		"INST_VER=$(INST_VER)"			\
		"INST_ARCH=$(INST_ARCH)"		\
		"archname=$(ARCHNAME)"			\
		"cc=$(CC)"				\
		"ld=$(LINK32)"				\
		"ccflags=$(EXTRACFLAGS) $(OPTIMIZE:"=\") $(DEFINES) $(BUILDOPT)"	\
		"cf_email=$(EMAIL)"	 		\
		"d_crypt=$(D_CRYPT)"			\
		"d_mymalloc=$(PERL_MALLOC)"		\
		"libs=$(LIBFILES)"			\
		"incpath=$(CCINCDIR:"=\")"		\
		"libperl=$(PERLIMPLIB:..\=)"		\
		"libpth=$(CCLIBDIR:"=\");$(EXTRALIBDIRS:"=\")"	\
		"libc=$(LIBC)"				\
		"make=$(MAKE_BARE)"				\
		"static_ext=$(STATIC_EXT)"		\
		"usethreads=$(USE_ITHREADS)"		\
		"useithreads=$(USE_ITHREADS)"		\
		"usemultiplicity=$(USE_MULTI)"		\
		"useperlio=$(USE_PERLIO)"		\
		"uselargefiles=$(USE_LARGE_FILES)"	\
		"usesitecustomize=$(USE_SITECUST)"	\
		"LINK_FLAGS=$(LINK_FLAGS:"=\")"		\
		"optimize=$(OPTIMIZE:"=\")"

ICWD = -I..\cpan\Cwd -I..\cpan\Cwd\lib

#
# Top targets
#

all : .\config.h ..\git_version.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) \
	$(UNIDATAFILES) MakePPPort $(PERLEXE) $(X2P) Extensions_nonxs Extensions $(PERLSTATIC)
	@@echo	Everything is up to date. '$(MAKE_BARE) test' to run test suite.

regnodes : ..\regnodes.h

..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h	

..\regexec$(o) : ..\regnodes.h ..\regcharclass.h

reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(MINIMOD) $(CONFIGPM) \
	$(UNIDATAFILES) $(PERLEXE) $(X2P) Extensions_reonly
	@@echo	Perl and 're' are up to date.

static: $(PERLEXESTATIC)

#------------------------------------------------------------

$(GLOBEXE) : perlglob$(o)
	$(LINK32) $(LINK_FLAGS) $(LIBFILES) -out:$@@ -subsystem:$(SUBSYS) \
	    perlglob$(o) setargv$(o)
	$(EMBED_EXE_MANI)

perlglob$(o)  : perlglob.c

config.w32 : $(CFGSH_TMPL)
	copy $(CFGSH_TMPL) config.w32

.\config.h : $(CFGH_TMPL)
	-del /f config.h
	copy $(CFGH_TMPL) config.h

..\git_version.h : $(MINIPERL) ..\make_patchnum.pl
	cd ..
	miniperl -Ilib make_patchnum.pl
	cd win32

# make sure that we recompile perl.c if the git version changes
..\perl$(o) : ..\git_version.h

..\config.sh : config.w32 $(MINIPERL) config_sh.PL
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) config.w32 > ..\config.sh

# this target is for when changes to the main config.sh happen.
# edit config.vc, then make perl in a minimal configuration (i.e. with MULTI,
# ITHREADS, IMP_SYS, LARGE_FILES, PERLIO and CRYPT off), then make this target
# to regenerate config_H.vc.
# repeat for config.vc64 and config_H.vc64 if you have a suitable build
# environment, otherwise hand-edit them to maintain the same differences with
# config.vc and config_H.vc as before.
# unfortunately, some further manual editing is also then required to restore all
# the special __GNUC__ handling that is otherwise lost.
regen_config_h:
	$(MINIPERL) -I..\lib config_sh.PL $(CFG_VARS) $(CFGSH_TMPL) > ..\config.sh
	$(MINIPERL) -I..\lib ..\configpm --chdir=..
	-del /f $(CFGH_TMPL)
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL "INST_VER=$(INST_VER)"
	rename config.h $(CFGH_TMPL)

$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL ..\minimod.pl
	$(MINIPERL) -I..\lib ..\configpm --chdir=..
	if exist lib\* $(RCOPY) lib\*.* ..\lib\$(NULL)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(XCOPY) *.h $(COREDIR)\*.*
	$(XCOPY) ..\ext\re\re.pm $(LIBDIR)\*.*
	$(RCOPY) include $(COREDIR)\*.*
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL "INST_VER=$(INST_VER)"
	if errorlevel 1 $(MAKE) /$(MAKEFLAGS) $(CONFIGPM)

$(MINIPERL) : $(MINIDIR) $(MINI_OBJ)
	$(LINK32) -subsystem:console -out:$@@ @@<<
	$(LINK_FLAGS) $(LIBFILES) $(MINI_OBJ)
<<
	$(EMBED_EXE_MANI)

$(MINIDIR) :
	if not exist "$(MINIDIR)" mkdir "$(MINIDIR)"

$(MINICORE_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) -DPERL_EXTERNAL_GLOB -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ ..\$(*F).c

$(MINIWIN32_OBJ) : $(CORE_NOCFG_H)
	$(CC) -c $(CFLAGS) $(OBJOUT_FLAG)$@@ $(*F).c

# -DPERL_IMPLICIT_SYS needs C++ for perllib.c
# This is the only file that depends on perlhost.h, vmem.h, and vdir.h
!IF "$(USE_IMP_SYS)" == "define"
perllib$(o)	: perllib.c .\perlhost.h .\vdir.h .\vmem.h
	$(CC) -c -I. $(CFLAGS_O) $(CXX_FLAG) $(OBJOUT_FLAG)$@@ perllib.c
!ENDIF

# 1. we don't want to rebuild miniperl.exe when config.h changes
# 2. we don't want to rebuild miniperl.exe with non-default config.h
# 3. we can't have miniperl.exe depend on git_version.h, as miniperl creates it
$(MINI_OBJ)	: $(CORE_NOCFG_H)

$(WIN32_OBJ)	: $(CORE_H)
$(CORE_OBJ)	: $(CORE_H)
$(DLL_OBJ)	: $(CORE_H)
$(X2P_OBJ)	: $(CORE_H)

perldll.def : $(MINIPERL) $(CONFIGPM) ..\global.sym ..\pp.sym ..\makedef.pl create_perllibst_h.pl
	$(MINIPERL) -I..\lib create_perllibst_h.pl
	$(MINIPERL) -I..\lib -w ..\makedef.pl PLATFORM=win32 $(OPTIMIZE) $(DEFINES) $(BUILDOPT) \
	    CCTYPE=$(CCTYPE) > perldll.def

$(PERLDLL): perldll.def $(PERLDLL_OBJ) $(PERLDLL_RES) Extensions_static
	$(LINK32) -dll -def:perldll.def -base:0x28000000 -out:$@@ @@Extensions_static @@<<
		$(LINK_FLAGS) $(DELAYLOAD) $(LIBFILES) $(PERLDLL_OBJ) $(PERLDLL_RES)
<<
	$(EMBED_DLL_MANI)
	$(XCOPY) $(PERLIMPLIB) $(COREDIR)

$(PERLSTATICLIB): Extensions_static
	$(LIB32) $(LIB_FLAGS) -out:$@@ @@Extensions_static @@<<
		$(PERLDLL_OBJ)
<<
	$(XCOPY) $(PERLSTATICLIB) $(COREDIR)

$(PERLEXE_RES): perlexe.rc $(PERLEXE_MANIFEST) $(PERLEXE_ICO)

$(MINIMOD) : $(MINIPERL) ..\minimod.pl
	cd ..
	miniperl minimod.pl > lib\ExtUtils\Miniperl.pm
	cd win32

..\x2p\a2p$(o) : ..\x2p\a2p.c
	$(CC) -I..\x2p $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\a2p.c

..\x2p\hash$(o) : ..\x2p\hash.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\hash.c

..\x2p\str$(o) : ..\x2p\str.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\str.c

..\x2p\util$(o) : ..\x2p\util.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\util.c

..\x2p\walk$(o) : ..\x2p\walk.c
	$(CC) -I..\x2p  $(CFLAGS) $(OBJOUT_FLAG)$@@ -c ..\x2p\walk.c

$(X2P) : $(MINIPERL) $(X2P_OBJ) Extensions
	$(MINIPERL) -I..\lib ..\x2p\find2perl.PL
	$(MINIPERL) -I..\lib ..\x2p\s2p.PL
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(X2P_OBJ)
<<
	$(EMBED_EXE_MANI)

$(MINIDIR)\globals$(o) : $(UUDMAP_H) $(BITCOUNT_H)

$(UUDMAP_H) $(BITCOUNT_H) : $(GENUUDMAP)
	$(GENUUDMAP) $(UUDMAP_H) $(BITCOUNT_H)

$(GENUUDMAP) : $(GENUUDMAP_OBJ)
	$(LINK32) -subsystem:console -out:$@@ @@<<
		$(LINK_FLAGS) $(LIBFILES) $(GENUUDMAP_OBJ)
<<
	$(EMBED_EXE_MANI)

perlmain.c : runperl.c
	copy runperl.c perlmain.c

perlmain$(o) : perlmain.c
	$(CC) $(CFLAGS_O:-DPERLDLL=-UPERLDLL) $(OBJOUT_FLAG)$@@ -c perlmain.c

perlmainst.c : runperl.c
	copy runperl.c perlmainst.c

perlmainst$(o) : perlmainst.c
	$(CC) $(CFLAGS_O) $(OBJOUT_FLAG)$@@ -c perlmainst.c

$(PERLEXE): $(PERLDLL) $(CONFIGPM) $(PERLEXE_OBJ) $(PERLEXE_RES)
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(LINK_FLAGS) \
	    $(LIBFILES) $(PERLEXE_OBJ) $(SETARGV_OBJ) $(PERLIMPLIB) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)
	copy $(PERLEXE) $(WPERLEXE)
	$(MINIPERL) -I..\lib bin\exetype.pl $(WPERLEXE) WINDOWS

$(PERLEXESTATIC): $(PERLSTATICLIB) $(CONFIGPM) $(PERLEXEST_OBJ) $(PERLEXE_RES)
	$(LINK32) -subsystem:console -out:$@@ -stack:0x1000000 $(LINK_FLAGS) \
	    @@Extensions_static $(PERLSTATICLIB) /PDB:NONE \
	    $(LIBFILES) $(PERLEXEST_OBJ) $(SETARGV_OBJ) $(PERLEXE_RES)
	$(EMBED_EXE_MANI)

MakePPPort: $(MINIPERL) $(CONFIGPM) Extensions_nonxs
	$(MINIPERL) -I..\lib $(ICWD) ..\mkppport

#-------------------------------------------------------------------------------
# There's no direct way to mark a dependency on
# DynaLoader.pm, so this will have to do
Extensions: ..\make_ext.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic

Extensions_reonly: ..\make_ext.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --dynamic +re

Extensions_static : ..\make_ext.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --static
	$(MINIPERL) -I..\lib list_static_libs.pl > Extensions_static

Extensions_nonxs: ..\make_ext.pl $(PERLDEP) $(CONFIGPM)
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --nonxs

$(DYNALOADER) : ..\make_ext.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
	$(XCOPY) ..\*.h $(COREDIR)\*.*
	$(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(EXTDIR) --dynaloader

Extensions_clean: 
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=clean

Extensions_realclean: 
	-if exist $(MINIPERL) $(MINIPERL) -I..\lib ..\make_ext.pl "MAKE=$(MAKE)" --dir=$(CPANDIR) --dir=$(DISTDIR) --dir=$(EXTDIR) --all --target=realclean

#-------------------------------------------------------------------------------

doc: $(PERLEXE) ..\pod\perltoc.pod
	$(PERLEXE) -I..\lib ..\installhtml --podroot=.. --htmldir=$(HTMLDIR) \
	    --podpath=pod:lib:ext:utils --htmlroot="file://$(INST_HTML::=|)" \
	    --libpod=perlfunc:perlguts:perlvar:perlrun:perlop --recurse

# Note that this next section is parsed (and regenerated) by pod/buildtoc
# so please check that script before making structural changes here

utils: $(PERLEXE) $(X2P)
	cd ..\utils
	$(MAKE) PERL=$(MINIPERL)
	cd ..\pod
	copy ..\README.aix      ..\pod\perlaix.pod
	copy ..\README.amiga    ..\pod\perlamiga.pod
	copy ..\README.apollo   ..\pod\perlapollo.pod
	copy ..\README.beos     ..\pod\perlbeos.pod
	copy ..\README.bs2000   ..\pod\perlbs2000.pod
	copy ..\README.ce       ..\pod\perlce.pod
	copy ..\README.cn       ..\pod\perlcn.pod
	copy ..\README.cygwin   ..\pod\perlcygwin.pod
	copy ..\README.dgux     ..\pod\perldgux.pod
	copy ..\README.dos      ..\pod\perldos.pod
	copy ..\README.epoc     ..\pod\perlepoc.pod
	copy ..\README.freebsd  ..\pod\perlfreebsd.pod
	copy ..\README.haiku    ..\pod\perlhaiku.pod
	copy ..\README.hpux     ..\pod\perlhpux.pod
	copy ..\README.hurd     ..\pod\perlhurd.pod
	copy ..\README.irix     ..\pod\perlirix.pod
	copy ..\README.jp       ..\pod\perljp.pod
	copy ..\README.ko       ..\pod\perlko.pod
	copy ..\README.linux    ..\pod\perllinux.pod
	copy ..\README.macos    ..\pod\perlmacos.pod
	copy ..\README.macosx   ..\pod\perlmacosx.pod
	copy ..\README.mpeix    ..\pod\perlmpeix.pod
	copy ..\README.netware  ..\pod\perlnetware.pod
	copy ..\README.openbsd  ..\pod\perlopenbsd.pod
	copy ..\README.os2      ..\pod\perlos2.pod
	copy ..\README.os390    ..\pod\perlos390.pod
	copy ..\README.os400    ..\pod\perlos400.pod
	copy ..\README.plan9    ..\pod\perlplan9.pod
	copy ..\README.qnx      ..\pod\perlqnx.pod
	copy ..\README.riscos   ..\pod\perlriscos.pod
	copy ..\README.solaris  ..\pod\perlsolaris.pod
	copy ..\README.symbian  ..\pod\perlsymbian.pod
	copy ..\README.tru64    ..\pod\perltru64.pod
	copy ..\README.tw       ..\pod\perltw.pod
	copy ..\README.uts      ..\pod\perluts.pod
	copy ..\README.vmesa    ..\pod\perlvmesa.pod
	copy ..\README.vos      ..\pod\perlvos.pod
	copy ..\README.win32    ..\pod\perlwin32.pod
	copy ..\pod\perl5122delta.pod ..\pod\perldelta.pod
	$(MAKE) -f ..\win32\pod.mak converters
	cd ..\win32
	$(PERLEXE) $(PL2BAT) $(UTILS)
	$(PERLEXE) $(ICWD) ..\autodoc.pl ..
	$(PERLEXE) $(ICWD) ..\pod\perlmodlib.pl -q

..\pod\perltoc.pod: $(PERLEXE) Extensions Extensions_nonxs
	$(PERLEXE) -f ..\pod\buildtoc --build-toc -q

# Note that the pod cleanup in this next section is parsed (and regenerated
# by pod/buildtoc so please check that script before making changes here

distclean: realclean
	-del /f $(MINIPERL) $(PERLEXE) $(PERLDLL) $(GLOBEXE) \
		$(PERLIMPLIB) ..\miniperl.lib $(MINIMOD) \
		$(PERLEXESTATIC) $(PERLSTATICLIB)
	-del /f *.def *.map
	-del /f $(LIBDIR)\Encode.pm $(LIBDIR)\encoding.pm $(LIBDIR)\Errno.pm
	-del /f $(LIBDIR)\Config.pod $(LIBDIR)\POSIX.pod $(LIBDIR)\threads.pm
	-del /f $(LIBDIR)\.exists $(LIBDIR)\attributes.pm $(LIBDIR)\DynaLoader.pm
	-del /f $(LIBDIR)\Fcntl.pm $(LIBDIR)\IO.pm $(LIBDIR)\Opcode.pm
	-del /f $(LIBDIR)\ops.pm $(LIBDIR)\Safe.pm
	-del /f $(LIBDIR)\SDBM_File.pm $(LIBDIR)\Socket.pm $(LIBDIR)\POSIX.pm
	-del /f $(LIBDIR)\B.pm $(LIBDIR)\O.pm $(LIBDIR)\re.pm
	-del /f $(LIBDIR)\File\Glob.pm
	-del /f $(LIBDIR)\Storable.pm
	-del /f $(LIBDIR)\Sys\Hostname.pm
	-del /f $(LIBDIR)\Time\HiRes.pm
	-del /f $(LIBDIR)\Unicode\Normalize.pm
	-del /f $(LIBDIR)\Math\BigInt\FastCalc.pm
	-del /f $(LIBDIR)\Win32.pm
	-del /f $(LIBDIR)\Win32CORE.pm
	-del /f $(LIBDIR)\Win32API\File.pm
	-del /f $(LIBDIR)\Win32API\File\cFile.pc
	-del /f $(DISTDIR)\XSLoader\XSLoader.pm
	-if exist $(LIBDIR)\App rmdir /s /q $(LIBDIR)\App
	-if exist $(LIBDIR)\Archive rmdir /s /q $(LIBDIR)\Archive
	-if exist $(LIBDIR)\Attribute rmdir /s /q $(LIBDIR)\Attribute
	-if exist $(LIBDIR)\autodie rmdir /s /q $(LIBDIR)\autodie
	-if exist $(LIBDIR)\B rmdir /s /q $(LIBDIR)\B
	-if exist $(LIBDIR)\CGI rmdir /s /q $(LIBDIR)\CGI
	-if exist $(LIBDIR)\CPAN rmdir /s /q $(LIBDIR)\CPAN
	-if exist $(LIBDIR)\CPANPLUS rmdir /s /q $(LIBDIR)\CPANPLUS
	-if exist $(LIBDIR)\Compress rmdir /s /q $(LIBDIR)\Compress
	-if exist $(LIBDIR)\Data rmdir /s /q $(LIBDIR)\Data
	-if exist $(LIBDIR)\Devel rmdir /s /q $(LIBDIR)\Devel
	-if exist $(LIBDIR)\Digest rmdir /s /q $(LIBDIR)\Digest
	-if exist $(LIBDIR)\Encode rmdir /s /q $(LIBDIR)\Encode
	-if exist $(LIBDIR)\encoding rmdir /s /q $(LIBDIR)\encoding
	-if exist $(LIBDIR)\ExtUtils\CBuilder rmdir /s /q $(LIBDIR)\ExtUtils\CBuilder
	-if exist $(LIBDIR)\ExtUtils\Command rmdir /s /q $(LIBDIR)\ExtUtils\Command
	-if exist $(LIBDIR)\ExtUtils\Constant rmdir /s /q $(LIBDIR)\ExtUtils\Constant
	-if exist $(LIBDIR)\ExtUtils\Liblist rmdir /s /q $(LIBDIR)\ExtUtils\Liblist
	-if exist $(LIBDIR)\ExtUtils\MakeMaker rmdir /s /q $(LIBDIR)\ExtUtils\MakeMaker
	-if exist $(LIBDIR)\File\Spec rmdir /s /q $(LIBDIR)\File\Spec
	-if exist $(LIBDIR)\Filter rmdir /s /q $(LIBDIR)\Filter
	-if exist $(LIBDIR)\Hash rmdir /s /q $(LIBDIR)\Hash
	-if exist $(LIBDIR)\I18N\LangTags rmdir /s /q $(LIBDIR)\I18N\LangTags
	-if exist $(LIBDIR)\inc rmdir /s /q $(LIBDIR)\inc
	-if exist $(LIBDIR)\Module\Pluggable rmdir /s /q $(LIBDIR)\Module\Pluggable
	-if exist $(LIBDIR)\IO rmdir /s /q $(LIBDIR)\IO
	-if exist $(LIBDIR)\IPC rmdir /s /q $(LIBDIR)\IPC
	-if exist $(LIBDIR)\List rmdir /s /q $(LIBDIR)\List
	-if exist $(LIBDIR)\Locale rmdir /s /q $(LIBDIR)\Locale
	-if exist $(LIBDIR)\Log rmdir /s /q $(LIBDIR)\Log
	-if exist $(LIBDIR)\Math rmdir /s /q $(LIBDIR)\Math
	-if exist $(LIBDIR)\Memoize rmdir /s /q $(LIBDIR)\Memoize
	-if exist $(LIBDIR)\MIME rmdir /s /q $(LIBDIR)\MIME
	-if exist $(LIBDIR)\Module rmdir /s /q $(LIBDIR)\Module
	-if exist $(LIBDIR)\mro rmdir /s /q $(LIBDIR)\mro
	-if exist $(LIBDIR)\Net\FTP rmdir /s /q $(LIBDIR)\Net\FTP
	-if exist $(LIBDIR)\Object rmdir /s /q $(LIBDIR)\Object
	-if exist $(LIBDIR)\Package rmdir /s /q $(LIBDIR)\Package
	-if exist $(LIBDIR)\Params rmdir /s /q $(LIBDIR)\Params
	-if exist $(LIBDIR)\Parse rmdir /s /q $(LIBDIR)\Parse
	-if exist $(LIBDIR)\PerlIO rmdir /s /q $(LIBDIR)\PerlIO
	-if exist $(LIBDIR)\Pod\Perldoc rmdir /s /q $(LIBDIR)\Pod\Perldoc
	-if exist $(LIBDIR)\Pod\Simple rmdir /s /q $(LIBDIR)\Pod\Simple
	-if exist $(LIBDIR)\Pod\Text rmdir /s /q $(LIBDIR)\Pod\Text
	-if exist $(LIBDIR)\re rmdir /s /q $(LIBDIR)\re
	-if exist $(LIBDIR)\Scalar rmdir /s /q $(LIBDIR)\Scalar
	-if exist $(LIBDIR)\Sys rmdir /s /q $(LIBDIR)\Sys
	-if exist $(LIBDIR)\TAP rmdir /s /q $(LIBDIR)\TAP
	-if exist $(LIBDIR)\Term\UI rmdir /s /q $(LIBDIR)\Term\UI
	-if exist $(LIBDIR)\Test rmdir /s /q $(LIBDIR)\Test
	-if exist $(LIBDIR)\Thread rmdir /s /q $(LIBDIR)\Thread
	-if exist $(LIBDIR)\threads rmdir /s /q $(LIBDIR)\threads
	-if exist $(LIBDIR)\Unicode\Collate rmdir /s /q $(LIBDIR)\Unicode\Collate
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
	-if exist $(LIBDIR)\Win32API rmdir /s /q $(LIBDIR)\Win32API
	-cd $(PODDIR) && del /f *.html *.bat \
	    perlaix.pod perlamiga.pod perlapi.pod perlapollo.pod \
	    perlbeos.pod perlbs2000.pod perlce.pod perlcn.pod \
	    perlcygwin.pod perldelta.pod perldgux.pod perldos.pod \
	    perlepoc.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmacos.pod perlmacosx.pod perlmodlib.pod \
	    perlmpeix.pod perlnetware.pod perlopenbsd.pod perlos2.pod \
	    perlos390.pod perlos400.pod perlplan9.pod perlqnx.pod \
	    perlriscos.pod perlsolaris.pod perlsymbian.pod perltoc.pod \
	    perltru64.pod perltw.pod perluniprops.pod perluts.pod \
	    perlvmesa.pod perlvos.pod perlwin32.pod \
	    pod2html pod2latex pod2man pod2text pod2usage \
	    podchecker podselect
	-cd ..\utils && del /f h2ph splain perlbug pl2pm c2ph pstruct h2xs \
	    perldoc perlivp dprofpp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp instmodsh prove ptar ptardiff cpanp-run-perl cpanp cpan2dist shasum corelist config_data
	-cd ..\x2p && del /f find2perl s2p psed *.bat
	-del /f ..\config.sh perlmain.c dlutils.c config.h.new \
	        perlmainst.c
	-del /f $(CONFIGPM)
	-del /f ..\lib\Config_git.pl
	-del /f bin\*.bat
	-del /f perllibst.h
	-del /f $(PERLEXE_RES) perl.base
	-cd .. && del /s *.lib *.map *.pdb *.ilk *.bs *$(o) .exists pm_to_blib ppport.h
	-cd $(EXTDIR) && del /s *.def Makefile Makefile.old
	-cd $(DISTDIR) && del /s *.def Makefile Makefile.old
	-cd $(CPANDIR) && del /s *.def Makefile Makefile.old
	-if exist $(AUTODIR) rmdir /s /q $(AUTODIR)
	-if exist $(COREDIR) rmdir /s /q $(COREDIR)
	-if exist pod2htmd.tmp del pod2htmd.tmp
	-if exist pod2htmi.tmp del pod2htmi.tmp
	-if exist $(HTMLDIR) rmdir /s /q $(HTMLDIR)
	-del /f ..\t\test_state

install : all installbare installhtml

installbare : utils ..\pod\perltoc.pod
	$(PERLEXE) ..\installperl
	if exist $(WPERLEXE) $(XCOPY) $(WPERLEXE) $(INST_BIN)\*.*
	if exist $(PERLEXESTATIC) $(XCOPY) $(PERLEXESTATIC) $(INST_BIN)\*.*
	$(XCOPY) $(GLOBEXE) $(INST_BIN)\*.*
	if exist ..\perl*.pdb $(XCOPY) ..\perl*.pdb $(INST_BIN)\*.*
	if exist ..\x2p\a2p.pdb $(XCOPY) ..\x2p\a2p.pdb $(INST_BIN)\*.*
	$(XCOPY) bin\*.bat $(INST_SCRIPT)\*.*

installhtml : doc
	$(RCOPY) $(HTMLDIR)\*.* $(INST_HTML)\*.*

inst_lib : $(CONFIGPM)
	$(RCOPY) ..\lib $(INST_LIB)\*.*

$(UNIDATAFILES) ..\pod\perluniprops.pod : $(MINIPERL) $(CONFIGPM) ..\lib\unicore\mktables Extensions_nonxs
	cd ..\lib\unicore && \
	..\$(MINIPERL) -I.. -I..\..\cpan\Cwd\lib -I..\..\cpan\Cwd mktables -P ..\..\pod -maketest -makelist -p -check $@@ $(FIRSTUNIFILE)

minitest : $(MINIPERL) $(GLOBEXE) $(CONFIGPM) utils $(UNIDATAFILES)
	$(XCOPY) $(MINIPERL) ..\t\$(NULL)
	if exist ..\t\perl.exe del /f ..\t\perl.exe
	rename ..\t\miniperl.exe perl.exe
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	attrib -r ..\t\*.*
	cd ..\t && \
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t

test-prep : all utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)

test : test-prep
	cd ..\t
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
	cd ..\win32

test-reonly : reonly utils
	$(XCOPY) $(PERLEXE) ..\t\$(NULL)
	$(XCOPY) $(PERLDLL) ..\t\$(NULL)
	$(XCOPY) $(GLOBEXE) ..\t\$(NULL)
	cd ..\t
	$(PERLEXE) -I..\lib harness $(OPT) -re \bre\\/ $(EXTRA)
	cd ..\win32

regen :
	cd ..
	regen.pl
	cd win32

test-notty : test-prep
	set PERL_SKIP_TTY_TEST=1
	cd ..\t
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
	cd ..\win32

_test : 
       $(XCOPY) $(PERLEXE) ..\t\$(NULL)
       $(XCOPY) $(PERLDLL) ..\t\$(NULL)
       $(XCOPY) $(GLOBEXE) ..\t\$(NULL)
       cd ..\t
       $(PERLEXE) -I..\lib harness $(TEST_SWITCHES) $(TEST_FILES)
       cd ..\win32

_clean :
	-@@$(DEL) miniperlmain$(o)
	-@@$(DEL) $(MINIPERL)
	-@@$(DEL) perlglob$(o)
	-@@$(DEL) perlmain$(o)
	-@@$(DEL) perlmainst$(o)
	-@@$(DEL) config.w32
	-@@$(DEL) config.h
	-@@$(DEL) ..\git_version.h
	-@@$(DEL) $(GLOBEXE)
	-@@$(DEL) $(PERLEXE)
	-@@$(DEL) $(WPERLEXE)
	-@@$(DEL) $(PERLEXESTATIC)
	-@@$(DEL) $(PERLSTATICLIB)
	-@@$(DEL) $(PERLDLL)
	-@@$(DEL) $(CORE_OBJ)
	-@@$(DEL) $(GENUUDMAP) $(GENUUDMAP_OBJ) $(UUDMAP_H) $(BITCOUNT_H)
	-if exist $(MINIDIR) rmdir /s /q $(MINIDIR)
	-if exist $(UNIDATADIR1) rmdir /s /q $(UNIDATADIR1)
	-if exist $(UNIDATADIR2) rmdir /s /q $(UNIDATADIR2)
	-@@$(DEL) $(UNIDATAFILES)
	-@@$(DEL) $(WIN32_OBJ)
	-@@$(DEL) $(DLL_OBJ)
	-@@$(DEL) $(X2P_OBJ)
	-@@$(DEL) ..\*$(o) ..\*.lib ..\*.exp *$(o) *.lib *.exp *.res
	-@@$(DEL) ..\t\*.exe ..\t\*.dll ..\t\*.bat
	-@@$(DEL) ..\x2p\*.exe ..\x2p\*.bat
	-@@$(DEL) *.ilk
	-@@$(DEL) *.pdb
	-@@$(DEL) Extensions_static

clean : Extensions_clean _clean

realclean : Extensions_realclean _clean

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "nmake nok" instead.
ok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)"

okfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -ok -s "(UNINSTALLED)" -F perl.ok

nok: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)"

nokfile: utils
	$(PERLEXE) -I..\lib ..\utils\perlbug -nok -s "(UNINSTALLED)" -F perl.nok
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d2 1
a2 1
# Makefile to build perl on Windows using Microsoft NMAKE.
d4 1
a4 1
#	Microsoft Visual C++ 6.0 or later
d8 1
a8 1
# (perl516.dll).  Also makes individual DLLs for the XS extensions.
d40 1
a40 1
#INST_VER	= \5.16.3
d98 4
a117 4
# Visual C++ 2010 Express Edition (aka Visual C++ 10.x) (free version)
#CCTYPE		= MSVC100FREE
# Visual C++ 2010 (aka Visual C++ 10.x) (full version)
#CCTYPE		= MSVC100
d127 11
d147 14
d180 1
a180 1
# variables below. A static library perl516s.lib will also be created.
d202 1
d213 20
d239 2
a240 8
# Perl needs to read scripts in text mode so that the DATA filehandle
# works correctly with seek() and tell(), or around auto-flushes of
# all filehandles (e.g. by system(), backticks, fork(), etc).
#
# The current version on the ByteLoader module on CPAN however only
# works if scripts are read in binary mode.  But before you disable text
# mode script reading (and break some DATA filehandle functionality)
# please check first if an updated ByteLoader isn't available on CPAN.
d242 1
a242 1
BUILDOPT	= $(BUILDOPT) -DPERL_TEXTMODE_SCRIPTS
d262 7
d311 4
d388 2
a389 2
# Visual C++ 98, .NET 2003, 2005/2008/2010 specific.
# VC++ 6/7/8/9/10.x can load DLLs on demand.  Makes the test suite run
d391 1
a391 1
# versions of 8/9/10.x can.)
d394 1
a394 2
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d442 1
a442 1
DEFINES		= -DWIN32 -D_CONSOLE -DNO_STRICT
d447 1
d449 3
d454 3
d458 1
d486 1
a486 1
# For now, silence VC++ 8/9/10.x's warnings about "unsafe" CRT functions
d489 1
a489 2
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d493 6
a498 12
# In VS 2005 (VC++ 8.0) Microsoft changes time_t from 32-bit to
# 64-bit, even in 32-bit mode.  It also provides the _USE_32BIT_TIME_T
# preprocessor option to revert back to the old functionality for
# backward compatibility.  We define this symbol here for older 32-bit
# compilers only (which aren't using it at all) for the sole purpose
# of getting it into $Config{ccflags}.  That way if someone builds
# Perl itself with e.g. VC6 but later installs an XS module using VC8
# the time_t types will still be compatible.
!IF "$(WIN64)" == "undef"
!  IF "$(CCTYPE)" == "MSVC60" || \
      "$(CCTYPE)" == "MSVC70" || "$(CCTYPE)" == "MSVC70FREE"
BUILDOPT	= $(BUILDOPT) -D_USE_32BIT_TIME_T
d502 1
a502 1
LIBBASEFILES	= \
d516 1
d533 1
a533 2
    "$(CCTYPE)" == "MSVC90" || "$(CCTYPE)" == "MSVC90FREE" || \
    "$(CCTYPE)" == "MSVC100" || "$(CCTYPE)" == "MSVC100FREE"
d570 3
a572 3
PERLIMPLIB	= ..\perl516.lib
PERLSTATICLIB	= ..\perl516s.lib
PERLDLL		= ..\perl516.dll
d589 1
a589 1

d594 1
a594 2
		   ..\lib\unicore\Heavy.pl ..\lib\unicore\mktables.lst     \
		   ..\lib\unicore\UCD.pl ..\lib\unicore\Name.pm            \
d618 1
a635 2
		..\utils\ptargrep	\
		..\utils\zipdetails	\
d641 7
a647 2
		..\utils\json_pp	\
		..\utils\pod2html	\
a685 1
		..\keywords.c	\
d723 1
a723 2
		.\win32thread.c	\
		.\fcrypt.c
d731 3
a785 2
MG_DATA_H	= ..\mg_data.h
GENERATED_HEADERS = $(UUDMAP_H) $(BITCOUNT_H) $(MG_DATA_H)
d833 1
d851 1
a851 1
ICWD = -I..\dist\Cwd -I..\dist\Cwd\lib
d863 1
a863 1
..\regcomp$(o) : ..\regnodes.h ..\regcharclass.h
d897 1
a897 1
..\config.sh : config.w32 $(MINIPERL) config_sh.PL FindExt.pm
d902 1
a902 1
# ITHREADS, IMP_SYS, LARGE_FILES and PERLIO off), then make this target
a903 2
# unfortunately, some further manual editing is also then required to restore all
# the special __GNUC__ handling that is otherwise lost.
d907 2
d921 1
a925 3
..\lib\buildcustomize.pl: $(MINIPERL) ..\write_buildcustomize.pl
	$(MINIPERL) -I..\lib ..\write_buildcustomize.pl .. >..\lib\buildcustomize.pl

d958 1
a958 1
perldll.def : $(MINIPERL) $(CONFIGPM) ..\embed.fnc ..\makedef.pl create_perllibst_h.pl
d961 1
a961 1
	    CCTYPE=$(CCTYPE) TARG_DIR=..\ > perldll.def
d1006 1
a1006 3
$(MINIDIR)\globals$(o) : $(GENERATED_HEADERS)

$(UUDMAP_H) $(MG_DATA_H) : $(BITCOUNT_H)
d1008 2
a1009 4
$(BITCOUNT_H) : $(GENUUDMAP)
	$(GENUUDMAP) $(GENERATED_HEADERS)

$(GENUUDMAP_OBJ) : ..\mg_raw.h
d1030 1
a1030 1
	$(LINK32) -subsystem:console -out:$@@ $(LINK_FLAGS) \
d1037 1
a1037 1
	$(LINK32) -subsystem:console -out:$@@ $(LINK_FLAGS) \
d1048 1
a1048 1
Extensions: ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
d1052 1
a1052 1
Extensions_reonly: ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) $(DYNALOADER)
d1056 1
a1056 1
Extensions_static : ..\make_ext.pl ..\lib\buildcustomize.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM)
d1061 1
a1061 1
Extensions_nonxs: ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) ..\pod\perlfunc.pod
d1065 1
a1065 1
$(DYNALOADER) : ..\make_ext.pl ..\lib\buildcustomize.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
d1080 1
a1080 1
	    --recurse
d1091 1
d1127 2
a1128 1
	copy ..\pod\perldelta.pod ..\pod\perl5163delta.pod
d1135 1
a1135 1
	$(PERLEXE) -f ..\pod\buildtoc -q
a1161 1
	-del /f $(LIBDIR)\buildcustomize.pl
a1214 1
	-if exist $(LIBDIR)\Tie\Hash rmdir /s /q $(LIBDIR)\Tie\Hash
d1218 2
a1219 2
	-cd $(PODDIR) && del /f *.html *.bat roffitall \
	    perl5163delta.pod perlaix.pod perlamiga.pod perlapi.pod \
d1221 11
a1231 9
	    perlcygwin.pod perldgux.pod perldos.pod perlepoc.pod \
	    perlfreebsd.pod perlhaiku.pod perlhpux.pod perlhurd.pod \
	    perlintern.pod perlirix.pod perljp.pod perlko.pod perllinux.pod \
	    perlmacos.pod perlmacosx.pod perlmodlib.pod perlmpeix.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perltoc.pod perltru64.pod \
	    perltw.pod perluniprops.pod perluts.pod perlvmesa.pod \
	    perlvos.pod perlwin32.pod
d1233 2
a1234 2
	    perldoc perlivp libnetcfg enc2xs piconv cpan *.bat \
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep cpanp-run-perl cpanp cpan2dist shasum corelist config_data zipdetails
d1250 1
d1273 1
a1273 1
	..\$(MINIPERL) -I.. -I..\..\dist\Cwd\lib -I..\..\dist\Cwd mktables -P ..\..\pod -maketest -makelist -p -check $@@ $(FIRSTUNIFILE)
d1284 1
a1284 1
test-prep : all utils ../pod/perltoc.pod
a1287 1
	set PERL_STATIC_EXT=$(STATIC_EXT)
a1293 5
test_porting : test-prep
	cd ..\t
	$(PERLEXE) -I..\lib harness $(TEST_SWITCHES) porting\*.t ..\lib\diagnostics.t
	cd ..\win32

d1337 1
a1337 1
	-@@$(DEL) $(GENUUDMAP) $(GENUUDMAP_OBJ) $(GENERATED_HEADERS)
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d8 1
a8 1
# (perl518.dll).  Also makes individual DLLs for the XS extensions.
d40 1
a40 1
#INST_VER	= \5.18.2
a95 6
# Uncomment this if you're building a 32-bit perl and want 64-bit integers.
# (If you're building a 64-bit perl then you will have 64-bit integers whether
# or not this is uncommented.)
#USE_64_BIT_INT	= define

#
a99 2
# Visual C++ .NET 2002/2003 (aka Visual C++ 7.x) (full version)
#CCTYPE		= MSVC70
d102 2
d106 2
d110 2
a111 2
# Visual C++ 2005 Express Edition (aka Visual C++ 8.x) (free version)
#CCTYPE		= MSVC80FREE
d114 2
a115 2
# Visual C++ 2008 Express Edition (aka Visual C++ 9.x) (free version)
#CCTYPE		= MSVC90FREE
a117 6
# Visual C++ 2010 Express Edition (aka Visual C++ 10.x) (free version)
#CCTYPE		= MSVC100FREE
# Visual C++ 2012 (aka Visual C++ 11.x) (full version)
#CCTYPE		= MSVC110
# Visual C++ 2012 Express Edition (aka Visual C++ 11.x) (free version)
#CCTYPE		= MSVC110FREE
d155 1
a155 1
# variables below. A static library perl518s.lib will also be created.
a263 4
!IF "$(USE_64_BIT_INT)" == ""
USE_64_BIT_INT	= undef
!ENDIF

a303 4
!IF "$(WIN64)" == "define"
USE_64_BIT_INT	= define
!ENDIF

a310 9
# Most relevant compiler-specific options fall into two groups:
# either pre-MSVC80 or MSVC80 onwards, so define a macro for this.
!IF "$(CCTYPE)" == "MSVC60" || \
    "$(CCTYPE)" == "MSVC70" || "$(CCTYPE)" == "MSVC70FREE"
PREMSVC80	= define
!ELSE
PREMSVC80	= undef
!ENDIF

d337 8
a344 9
!IF "$(WIN64)" != "define"
!IF "$(USE_64_BIT_INT)" == "define"
ARCHNAME	= $(ARCHNAME)-64int
!ENDIF
!ENDIF

# All but the free version of VC++ 7.x can load DLLs on demand.  Makes the test
# suite run in about 10% less time.
!IF "$(CCTYPE)" != "MSVC70FREE"
d403 1
a403 2
# -O1 yields smaller code, which turns out to be faster than -O2 on x86 and x64
OPTIMIZE	= -O1 -MD -Zi -DNDEBUG
d414 1
a414 1
OPTIMIZE	= $(OPTIMIZE) -GL
d416 4
d428 1
a428 1
# For now, silence warnings from VC++ 8.x onwards about "unsafe" CRT functions
d430 3
a432 1
!IF "$(PREMSVC80)" == "undef"
d445 2
a446 1
!  IF "$(PREMSVC80)" == "define"
d480 3
a482 1
!IF "$(PREMSVC80)" == "undef"
a502 3
.c.i:
	$(CC) -c -I$(<D) $(CFLAGS_O) -P $(OBJOUT_FLAG)$@@ $<

d519 3
a521 3
PERLIMPLIB	= ..\perl518.lib
PERLSTATICLIB	= ..\perl518s.lib
PERLDLL		= ..\perl518.dll
d606 4
d612 1
a696 1
		..\hv_func.h	\
d771 1
a791 1
		"use64bitint=$(USE_64_BIT_INT)"		\
d795 1
a795 2
		"optimize=$(OPTIMIZE:"=\")"		\
		"WIN64=$(WIN64)"
a830 9
#
# Copy the template config.h and set configurables at the end of it
# as per the options chosen and compiler used.
# Note: This config.h is only used to build miniperl.exe anyway, but
# it's as well to have its options correct to be sure that it builds
# and so that it's "-V" options are correct for use by makedef.pl. The
# real config.h used to build perl.exe is generated from the top-level
# config_h.SH by config_h.PL (run by miniperl.exe).
#
a833 64
	@@echo.>>$@@
	@@echo #ifndef _config_h_footer_>>$@@
	@@echo #define _config_h_footer_>>$@@
	@@echo #undef PTRSIZE>>$@@
	@@echo #undef SSize_t>>$@@
	@@echo #undef HAS_ATOLL>>$@@
	@@echo #undef HAS_STRTOLL>>$@@
	@@echo #undef HAS_STRTOULL>>$@@
	@@echo #undef IVTYPE>>$@@
	@@echo #undef UVTYPE>>$@@
	@@echo #undef IVSIZE>>$@@
	@@echo #undef UVSIZE>>$@@
	@@echo #undef NV_PRESERVES_UV>>$@@
	@@echo #undef NV_PRESERVES_UV_BITS>>$@@
	@@echo #undef IVdf>>$@@
	@@echo #undef UVuf>>$@@
	@@echo #undef UVof>>$@@
	@@echo #undef UVxf>>$@@
	@@echo #undef UVXf>>$@@
	@@echo #undef USE_64_BIT_INT>>$@@
	@@echo #undef Size_t_size>>$@@
!IF "$(WIN64)"=="define"
	@@echo #define PTRSIZE ^8>>$@@
	@@echo #define SSize_t __int64>>$@@
	@@echo #define HAS_ATOLL>>$@@
	@@echo #define HAS_STRTOLL>>$@@
	@@echo #define HAS_STRTOULL>>$@@
	@@echo #define Size_t_size ^8>>$@@
!ELSE
	@@echo #define PTRSIZE ^4>>$@@
	@@echo #define SSize_t int>>$@@
	@@echo #undef HAS_ATOLL>>$@@
	@@echo #undef HAS_STRTOLL>>$@@
	@@echo #undef HAS_STRTOULL>>$@@
	@@echo #define Size_t_size ^4>>$@@
!ENDIF
!IF "$(USE_64_BIT_INT)"=="define"
	@@echo #define IVTYPE __int64>>$@@
	@@echo #define UVTYPE unsigned __int64>>$@@
	@@echo #define IVSIZE ^8>>$@@
	@@echo #define UVSIZE ^8>>$@@
	@@echo #undef NV_PRESERVES_UV>>$@@
	@@echo #define NV_PRESERVES_UV_BITS 53>>$@@
	@@echo #define IVdf "I64d">>$@@
	@@echo #define UVuf "I64u">>$@@
	@@echo #define UVof "I64o">>$@@
	@@echo #define UVxf "I64x">>$@@
	@@echo #define UVXf "I64X">>$@@
	@@echo #define USE_64_BIT_INT>>$@@
!ELSE
	@@echo #define IVTYPE long>>$@@
	@@echo #define UVTYPE unsigned long>>$@@
	@@echo #define IVSIZE ^4>>$@@
	@@echo #define UVSIZE ^4>>$@@
	@@echo #define NV_PRESERVES_UV>>$@@
	@@echo #define NV_PRESERVES_UV_BITS 32>>$@@
	@@echo #define IVdf "ld">>$@@
	@@echo #define UVuf "lu">>$@@
	@@echo #define UVof "lo">>$@@
	@@echo #define UVxf "lx">>$@@
	@@echo #define UVXf "lX">>$@@
	@@echo #undef USE_64_BIT_INT>>$@@
!ENDIF
	@@echo #endif>>$@@
d846 2
a847 2
# This target is for when changes to the main config.sh happen.
# Edit config.vc, then make perl in a minimal configuration (i.e. with MULTI,
d850 5
d859 1
a859 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL
d868 1
a868 1
	-$(MINIPERL) -I..\lib $(ICWD) config_h.PL
d876 1
a876 1
	$(LINK_FLAGS) $(DELAYLOAD) $(LIBFILES) $(MINI_OBJ)
d887 1
a887 1
	$(CC) -c $(CFLAGS) -DPERL_IS_MINIPERL $(OBJOUT_FLAG)$@@ $(*F).c
d1031 1
a1031 1
	    --podpath=pod:lib:utils --htmlroot="file://$(INST_HTML::=|)" \
d1043 1
d1050 1
d1061 1
d1074 2
d1078 1
a1078 1
	copy ..\pod\perldelta.pod ..\pod\perl5182delta.pod
d1171 10
a1180 9
	    perl5182delta.pod perlaix.pod perlamiga.pod perlapi.pod \
	    perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldgux.pod perldos.pod perlfreebsd.pod perlhaiku.pod \
	    perlhpux.pod perlhurd.pod perlintern.pod perlirix.pod \
	    perljp.pod perlko.pod perllinux.pod perlmacos.pod \
	    perlmacosx.pod perlmodlib.pod perlnetware.pod perlopenbsd.pod \
	    perlos2.pod perlos390.pod perlos400.pod perlplan9.pod \
	    perlqnx.pod perlriscos.pod perlsolaris.pod perlsymbian.pod \
	    perltoc.pod perltru64.pod perltw.pod perluniprops.pod \
d1231 1
a1231 1
	$(MINIPERL) -I..\lib harness base/*.t comp/*.t cmd/*.t io/*.t opbasic/*.t op/*.t pragma/*.t
@


1.1.1.15
log
@Import perl-5.20.1
@
text
@d8 1
a8 1
# (perl520.dll).  Also makes individual DLLs for the XS extensions.
d40 1
a40 1
#INST_VER	= \5.20.1
d62 2
a63 3
# uncomment to enable multiple interpreters.  This is needed for fork()
# emulation and for thread support, and is auto-enabled by USE_IMP_SYS
# and USE_ITHREADS below.
d68 3
a70 3
# Interpreter cloning/threads; now reasonably complete.
# This should be enabled to get the fork() emulation.  This needs (and
# will auto-enable) USE_MULTI above.
d76 2
a77 2
# made by perl.  This is also needed to get fork().  This needs (and
# will auto-enable) USE_MULTI above.
a98 1
# Note: This option is not supported in 32-bit MSVC60 builds.
a127 9
# Visual C++ 2013 (aka Visual C++ 12.x) (full version)
#CCTYPE		= MSVC120
# Visual C++ 2013 Express Edition (aka Visual C++ 12.x) (free version)
#CCTYPE		= MSVC120FREE

#
# If you are using Intel C++ Compiler uncomment this
#
#__ICC		= define
d165 1
a165 1
# variables below. A static library perl520s.lib will also be created.
a328 7
# Disable the 64-bit-int option for (32-bit) MSVC60 builds since that compiler
# does not support it.
!IF "$(CCTYPE)" == "MSVC60"
!UNDEF USE_64_BIT_INT
USE_64_BIT_INT	= undef
!ENDIF

d394 1
a408 1
!IF "$(__ICC)" != "define"
a410 4
!ELSE
CC		= icl
LINK32		= xilink
!ENDIF
d441 1
a441 1
!  IF "$(CCTYPE)" != "MSVC60"
a444 1
LIB_FLAGS	= -ltcg
a478 8
# Avoid __intel_new_proc_init link error for libircmt.
# libmmd is /MD equivelent, other variants exist.
# libmmd is Intel C's math addon funcs to MS CRT, contains long doubles, C99,
# and optimized C89 funcs
!IF "$(__ICC)" == "define"
LIBBASEFILES	= $(LIBBASEFILES) libircmt.lib libmmd.lib
!ENDIF

d496 1
a496 1
LIB_FLAGS	= $(LIB_FLAGS) -nologo
d542 3
a544 3
PERLIMPLIB	= ..\perl520.lib
PERLSTATICLIB	= ..\perl520s.lib
PERLDLL		= ..\perl520.dll
d553 1
d556 1
a556 1
!IF "$(BUILD_STATIC)" == "define" || "$(ALL_STATIC)" == "define"
d610 3
a640 1
		..\caretx.c	\
d724 1
a742 1
		.\include\sys\errno2.h	\
d777 4
a780 2
#  - MakeMaker isn't capable enough for SDBM_File (small bug)
STATIC_EXT	= * !SDBM_File
d783 1
a783 2
# (be sure to include Win32CORE to load Win32 on demand)
#STATIC_EXT	= Win32CORE Cwd Compress/Raw/Zlib
d817 2
d823 1
a823 1
all : .\config.h ..\git_version.h $(GLOBEXE) $(CONFIGPM) \
d833 1
a833 1
reonly : regnodes .\config.h ..\git_version.h $(GLOBEXE) $(CONFIGPM) \
a865 3
	@@echo #undef Off_t>>$@@
	@@echo #undef LSEEKSIZE>>$@@
	@@echo #undef Off_t_size>>$@@
a883 9
!IF "$(USE_LARGE_FILES)"=="define"
	@@echo #define Off_t __int64>>$@@
	@@echo #define LSEEKSIZE ^8>>$@@
	@@echo #define Off_t_size ^8>>$@@
!ELSE
	@@echo #define Off_t long>>$@@
	@@echo #define LSEEKSIZE ^4>>$@@
	@@echo #define Off_t_size ^4>>$@@
!ENDIF
d929 3
a931 1
	cd .. && miniperl -Ilib make_patchnum.pl && cd win32
d947 1
a947 1
	-$(MINIPERL) -I..\lib config_h.PL
d950 1
a950 1
$(CONFIGPM) : $(MINIPERL) ..\config.sh config_h.PL
d956 1
a956 1
	-$(MINIPERL) -I..\lib config_h.PL
d959 2
a960 2
# See the comment in Makefile.SH explaining this seemingly cranky ordering
$(MINIPERL) : ..\lib\buildcustomize.pl 
d962 2
a963 2
..\lib\buildcustomize.pl : $(MINIDIR) $(MINI_OBJ) ..\write_buildcustomize.pl
	$(LINK32) -subsystem:console -out:$(MINIPERL) @@<<
d966 1
a966 2
	$(EMBED_EXE_MANI:..\lib\buildcustomize.pl=..\miniperl.exe)
	$(MINIPERL) -I..\lib -f ..\write_buildcustomize.pl ..
d1014 5
d1071 1
a1071 1
	    $(PERLEXE_OBJ) $(PERLEXE_RES) $(PERLIMPLIB) $(LIBFILES) $(SETARGV_OBJ)
d1078 2
a1079 1
	    $(PERLEXEST_OBJ) $(PERLEXE_RES) $(PERLSTATICLIB) $(LIBFILES) $(SETARGV_OBJ)
d1083 1
a1083 1
	$(MINIPERL) -I..\lib ..\mkppport
d1096 1
a1096 1
Extensions_static : ..\make_ext.pl ..\lib\buildcustomize.pl list_static_libs.pl $(PERLDEP) $(CONFIGPM) Extensions_nonxs
a1121 3
..\utils\Makefile: $(CONFIGPM) ..\utils\Makefile.PL
	$(MINIPERL) -I..\lib ..\utils\Makefile.PL ..

d1125 1
a1125 1
utils: $(PERLEXE) $(X2P) ..\utils\Makefile
a1130 1
	copy ..\README.android  ..\pod\perlandroid.pod
d1135 1
a1156 1
	copy ..\README.synology ..\pod\perlsynology.pod
d1161 1
a1161 1
	copy ..\pod\perldelta.pod ..\pod\perl5201delta.pod
d1164 2
a1165 2
	$(MINIPERL) -I..\lib ..\autodoc.pl ..
	$(MINIPERL) -I..\lib ..\pod\perlmodlib.PL -q ..
d1175 3
a1177 1
		$(PERLIMPLIB) ..\miniperl.lib $(PERLEXESTATIC) $(PERLSTATICLIB)
a1196 1
	-del /f *.def *.map
d1201 1
a1201 1
	-if exist $(LIBDIR)\Carp rmdir /s /q $(LIBDIR)\Carp
d1203 2
a1205 2
	-if exist $(LIBDIR)\Config\Perl rmdir /s /q $(LIBDIR)\Config\Perl
	-if exist $(LIBDIR)\CPAN rmdir /s /q $(LIBDIR)\CPAN
a1210 1
	-if exist $(LIBDIR)\Exporter rmdir /s /q $(LIBDIR)\Exporter
a1215 2
	-if exist $(LIBDIR)\ExtUtils\ParseXS rmdir /s /q $(LIBDIR)\ExtUtils\ParseXS
	-if exist $(LIBDIR)\ExtUtils\Typemaps rmdir /s /q $(LIBDIR)\ExtUtils\Typemaps
d1219 1
a1219 2
	-if exist $(LIBDIR)\HTTP rmdir /s /q $(LIBDIR)\HTTP
	-if exist $(LIBDIR)\I18N rmdir /s /q $(LIBDIR)\I18N
d1221 1
a1223 1
	-if exist $(LIBDIR)\JSON rmdir /s /q $(LIBDIR)\JSON
d1226 1
d1231 1
d1233 1
a1236 1
	-if exist $(LIBDIR)\Perl rmdir /s /q $(LIBDIR)\Perl
d1241 1
a1242 1
	-if exist $(LIBDIR)\Search rmdir /s /q $(LIBDIR)\Search
d1245 1
a1245 1
	-if exist $(LIBDIR)\Term rmdir /s /q $(LIBDIR)\Term
a1246 1
	-if exist $(LIBDIR)\Text rmdir /s /q $(LIBDIR)\Text
d1251 1
a1251 3
	-if exist $(LIBDIR)\Unicode\Collate\Locale rmdir /s /q $(LIBDIR)\Unicode\Collate\Locale
	-if exist $(LIBDIR)\version rmdir /s /q $(LIBDIR)\version
	-if exist $(LIBDIR)\VMS rmdir /s /q $(LIBDIR)\VMS
a1252 1
	-if exist $(LIBDIR)\XS rmdir /s /q $(LIBDIR)\XS
d1254 10
a1263 10
	    perl5201delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
	    perlapi.pod perlbs2000.pod perlce.pod perlcn.pod perlcygwin.pod \
	    perldos.pod perlfreebsd.pod perlhaiku.pod perlhpux.pod \
	    perlhurd.pod perlintern.pod perlirix.pod perljp.pod perlko.pod \
	    perllinux.pod perlmacos.pod perlmacosx.pod perlmodlib.pod \
	    perlnetware.pod perlopenbsd.pod perlos2.pod perlos390.pod \
	    perlos400.pod perlplan9.pod perlqnx.pod perlriscos.pod \
	    perlsolaris.pod perlsymbian.pod perlsynology.pod perltoc.pod \
	    perltru64.pod perltw.pod perluniprops.pod perlvos.pod \
	    perlwin32.pod
d1266 1
a1266 1
	    xsubpp pod2html instmodsh json_pp prove ptar ptardiff ptargrep shasum corelist config_data zipdetails
a1278 1
	-del /s ..\utils\Makefile
@


1.1.1.16
log
@Import perl-5.20.2
@
text
@d40 1
a40 1
#INST_VER	= \5.20.2
d1195 1
a1195 1
	copy ..\pod\perldelta.pod ..\pod\perl5202delta.pod
d1293 1
a1293 1
	    perl5202delta.pod perlaix.pod perlamiga.pod perlandroid.pod \
@


