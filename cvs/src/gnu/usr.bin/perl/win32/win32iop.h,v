head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	PERL_5_20_1:1.1.1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.13
date	2017.02.05.00.32.22;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	cxJ08BvJA9Pt2PTM;

1.12
date	2014.11.17.20.57.08;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	QP75iYx42Uo7mMxO;

1.11
date	2014.03.24.15.05.34;	author afresh1;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.25.20.41.01;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.24.15.07.11;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.22;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.28.19.23.15;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.52;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.09.07;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.54;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.47;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.16;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.07;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.26.19;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.14;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.38;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.50.00;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.19.06;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.48.45;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.09.45;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.59.13;	author afresh1;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.11.17.20.53.21;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.13
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#ifndef WIN32IOP_H
#define WIN32IOP_H

#ifndef START_EXTERN_C
#ifdef __cplusplus
#  define START_EXTERN_C extern "C" {
#  define END_EXTERN_C }
#  define EXTERN_C extern "C"
#else
#  define START_EXTERN_C
#  define END_EXTERN_C
#  define EXTERN_C
#endif
#endif

#include <sys/utime.h>

/*
 * defines for flock emulation
 */
#define LOCK_SH 1
#define LOCK_EX 2
#define LOCK_NB 4
#define LOCK_UN 8

/*
 * Make this as close to original stdio as possible.
 */

/*
 * function prototypes for our own win32io layer
 */
START_EXTERN_C

DllExport  int * 	win32_errno(void);
DllExport  char *** 	win32_environ(void);
DllExport  FILE*	win32_stdin(void);
DllExport  FILE*	win32_stdout(void);
DllExport  FILE*	win32_stderr(void);
DllExport  int		win32_ferror(FILE *fp);
DllExport  int		win32_feof(FILE *fp);
DllExport  char*	win32_strerror(int e);

DllExport  int		win32_fprintf(FILE *pf, const char *format, ...);
DllExport  int		win32_printf(const char *format, ...);
DllExport  int		win32_vfprintf(FILE *pf, const char *format, va_list arg);
DllExport  int		win32_vprintf(const char *format, va_list arg);
DllExport  size_t	win32_fread(void *buf, size_t size, size_t count, FILE *pf);
DllExport  size_t	win32_fwrite(const void *buf, size_t size, size_t count, FILE *pf);
DllExport  FILE*	win32_fopen(const char *path, const char *mode);
DllExport  FILE*	win32_fdopen(int fh, const char *mode);
DllExport  FILE*	win32_freopen(const char *path, const char *mode, FILE *pf);
DllExport  int		win32_fclose(FILE *pf);
DllExport  int		win32_fputs(const char *s,FILE *pf);
DllExport  int		win32_fputc(int c,FILE *pf);
DllExport  int		win32_ungetc(int c,FILE *pf);
DllExport  int		win32_getc(FILE *pf);
DllExport  int		win32_fileno(FILE *pf);
DllExport  void		win32_clearerr(FILE *pf);
DllExport  int		win32_fflush(FILE *pf);
DllExport  Off_t	win32_ftell(FILE *pf);
DllExport  int		win32_fseek(FILE *pf,Off_t offset,int origin);
DllExport  int		win32_fgetpos(FILE *pf,fpos_t *p);
DllExport  int		win32_fsetpos(FILE *pf,const fpos_t *p);
DllExport  void		win32_rewind(FILE *pf);
DllExport  int		win32_tmpfd(void);
DllExport  FILE*	win32_tmpfile(void);
DllExport  void		win32_abort(void);
DllExport  int  	win32_fstat(int fd,Stat_t *sbufptr);
DllExport  int  	win32_stat(const char *name,Stat_t *sbufptr);
DllExport  int		win32_pipe( int *phandles, unsigned int psize, int textmode );
DllExport  PerlIO*	win32_popen( const char *command, const char *mode );
DllExport  PerlIO*	win32_popenlist(const char *mode, IV narg, SV **args);
DllExport  int		win32_pclose( PerlIO *pf);
DllExport  int		win32_rename( const char *oname, const char *newname);
DllExport  int		win32_setmode( int fd, int mode);
DllExport  int		win32_chsize(int fd, Off_t size);
DllExport  Off_t	win32_lseek( int fd, Off_t offset, int origin);
DllExport  Off_t	win32_tell( int fd);
DllExport  int		win32_dup( int fd);
DllExport  int		win32_dup2(int h1, int h2);
DllExport  int		win32_open(const char *path, int oflag,...);
DllExport  int		win32_close(int fd);
DllExport  int		win32_eof(int fd);
DllExport  int		win32_isatty(int fd);
DllExport  int		win32_read(int fd, void *buf, unsigned int cnt);
DllExport  int		win32_write(int fd, const void *buf, unsigned int cnt);
DllExport  int		win32_spawnvp(int mode, const char *cmdname,
			      const char *const *argv);
DllExport  int		win32_mkdir(const char *dir, int mode);
DllExport  int		win32_rmdir(const char *dir);
DllExport  int		win32_chdir(const char *dir);
DllExport  int		win32_flock(int fd, int oper);
DllExport  int		win32_execv(const char *cmdname, const char *const *argv);
DllExport  int		win32_execvp(const char *cmdname, const char *const *argv);
DllExport  void		win32_perror(const char *str);
DllExport  void		win32_setbuf(FILE *pf, char *buf);
DllExport  int		win32_setvbuf(FILE *pf, char *buf, int type, size_t size);
DllExport  int		win32_flushall(void);
DllExport  int		win32_fcloseall(void);
DllExport  char*	win32_fgets(char *s, int n, FILE *pf);
DllExport  char*	win32_gets(char *s);
DllExport  int		win32_fgetc(FILE *pf);
DllExport  int		win32_putc(int c, FILE *pf);
DllExport  int		win32_puts(const char *s);
DllExport  int		win32_getchar(void);
DllExport  int		win32_putchar(int c);
DllExport  void*	win32_malloc(size_t size);
DllExport  void*	win32_calloc(size_t numitems, size_t size);
DllExport  void*	win32_realloc(void *block, size_t size);
DllExport  void		win32_free(void *block);

DllExport  int		win32_open_osfhandle(intptr_t handle, int flags);
DllExport  intptr_t	win32_get_osfhandle(int fd);
DllExport  FILE*	win32_fdupopen(FILE *pf);

DllExport  DIR*		win32_opendir(const char *filename);
DllExport  struct direct*	win32_readdir(DIR *dirp);
DllExport  long		win32_telldir(DIR *dirp);
DllExport  void		win32_seekdir(DIR *dirp, long loc);
DllExport  void		win32_rewinddir(DIR *dirp);
DllExport  int		win32_closedir(DIR *dirp);
DllExport  DIR*		win32_dirp_dup(DIR *const dirp, CLONE_PARAMS *const param);

DllExport  char*        win32_getenvironmentstrings(void);
/* also see win32_freeenvironmentstrings macro */
DllExport  char*	win32_getenv(const char *name);
DllExport  int		win32_putenv(const char *name);

DllExport  unsigned 	win32_sleep(unsigned int);
DllExport  int		win32_times(struct tms *timebuf);
DllExport  unsigned 	win32_alarm(unsigned int sec);
DllExport  char*	win32_longpath(char *path);
DllExport  char*	win32_ansipath(const WCHAR *path);
DllExport  int		win32_ioctl(int i, unsigned int u, char *data);
DllExport  int          win32_link(const char *oldname, const char *newname);
DllExport  int		win32_unlink(const char *f);
DllExport  int		win32_utime(const char *f, struct utimbuf *t);
DllExport  int		win32_gettimeofday(struct timeval *tp, void *not_used);
DllExport  int		win32_uname(struct utsname *n);
DllExport  int		win32_wait(int *status);
DllExport  int		win32_waitpid(int pid, int *status, int flags);
DllExport  int		win32_kill(int pid, int sig);
DllExport  unsigned long	win32_os_id(void);
DllExport  void*	win32_dynaload(const char*filename);
DllExport  int		win32_access(const char *path, int mode);
DllExport  int		win32_chmod(const char *path, int mode);
DllExport  int		win32_getpid(void);

DllExport char *	win32_crypt(const char *txt, const char *salt);

DllExport void *	win32_get_childenv(void);
DllExport void		win32_free_childenv(void* d);
DllExport void		win32_clearenv(void);
DllExport char *	win32_get_childdir(void);
DllExport void		win32_free_childdir(char* d);
DllExport Sighandler_t	win32_signal(int sig, Sighandler_t subcode);


END_EXTERN_C

/* see comment in win32_getenvironmentstrings */
#define win32_freeenvironmentstrings(x) win32_free(x)
#undef alarm
#define alarm				win32_alarm
#undef strerror
#define strerror			win32_strerror

/*
 * the following six(6) is #define in stdio.h
 */
#ifndef WIN32IO_IS_STDIO
#undef errno
#undef environ
#undef stderr
#undef stdin
#undef stdout
#undef ferror
#undef feof
#undef fclose
#undef pipe
#undef pause
#undef sleep
#undef times
#undef ioctl
#undef unlink
#undef utime
#undef gettimeofday
#undef uname
#undef wait

#if defined(__MINGW32__)
#undef fileno
#endif

#define stderr				win32_stderr()
#define stdout				win32_stdout()
#define	stdin				win32_stdin()
#define feof(f)				win32_feof(f)
#define ferror(f)			win32_ferror(f)
#define errno 				(*win32_errno())
#define environ				(*win32_environ())

/*
 * redirect to our own version
 */
#undef fprintf
#define	fprintf			win32_fprintf
#ifdef UNDER_CE /* celib also makes these be macros to celib's x* symbols */
#  undef vfprintf
#endif
#define	vfprintf		win32_vfprintf
#ifdef UNDER_CE
#  undef printf
#endif
#define	printf			win32_printf
#ifdef UNDER_CE
#  undef vprintf
#endif
#define	vprintf			win32_vprintf
#ifdef UNDER_CE
#  undef fread
#endif
#define fread(buf,size,count,f)	win32_fread(buf,size,count,f)
#ifdef UNDER_CE
#  undef fwrite
#endif
#define fwrite(buf,size,count,f)	win32_fwrite(buf,size,count,f)
#ifdef UNDER_CE
#  undef fopen
#endif
#define fopen			win32_fopen
#undef fdopen
#define fdopen			win32_fdopen
#ifdef UNDER_CE
#  undef freopen
#endif
#define freopen			win32_freopen
#define	fclose(f)		win32_fclose(f)
#ifdef UNDER_CE
#  undef fputs
#endif
#define fputs(s,f)		win32_fputs(s,f)
#ifdef UNDER_CE
#  undef fputc
#endif
#define fputc(c,f)		win32_fputc(c,f)
#ifdef UNDER_CE
#  undef ungetc
#endif
#define ungetc(c,f)		win32_ungetc(c,f)
#undef getc
#define getc(f)			win32_getc(f)
#ifdef UNDER_CE
#  undef fileno
#endif
#define fileno(f)		win32_fileno(f)
#ifdef UNDER_CE
#  undef clearerr
#endif
#define clearerr(f)		win32_clearerr(f)
#ifdef UNDER_CE
#  undef fflush
#endif
#define fflush(f)		win32_fflush(f)
#ifdef UNDER_CE
#  undef ftell
#endif
#define ftell(f)		win32_ftell(f)
#ifdef UNDER_CE
#  undef fseek
#endif
#define fseek(f,o,w)		win32_fseek(f,o,w)
#ifdef UNDER_CE
#  undef fgetpos
#endif
#define fgetpos(f,p)		win32_fgetpos(f,p)
#ifdef UNDER_CE
#  undef fsetpos
#endif
#define fsetpos(f,p)		win32_fsetpos(f,p)
#ifdef UNDER_CE
#  undef rewind
#endif
#define rewind(f)		win32_rewind(f)
#define tmpfile()		win32_tmpfile()
#ifdef UNDER_CE
#  undef abort
#endif
#define abort()			win32_abort()
#if defined(UNDER_CE) || defined(__MINGW32__)
#  undef fstat
#endif
#define fstat(fd,bufptr)   	win32_fstat(fd,bufptr)
#if defined(UNDER_CE) || defined(__MINGW32__)
#  undef stat
#endif
#define stat(pth,bufptr)   	win32_stat(pth,bufptr)
#define longpath(pth)   	win32_longpath(pth)
#define ansipath(pth)   	win32_ansipath(pth)
#ifdef UNDER_CE
#  undef rename
#endif
#define rename(old,new)		win32_rename(old,new)
#ifdef UNDER_CE
#  undef setmode
#endif
#define setmode(fd,mode)	win32_setmode(fd,mode)
#define chsize(fd,sz)		win32_chsize(fd,sz)
#ifdef UNDER_CE
#  undef lseek
#endif
#define lseek(fd,offset,orig)	win32_lseek(fd,offset,orig)
#define tell(fd)		win32_tell(fd)
#ifdef UNDER_CE
#  undef dup
#endif
#define dup(fd)			win32_dup(fd)
#ifdef UNDER_CE
#  undef dup2
#endif
#define dup2(fd1,fd2)		win32_dup2(fd1,fd2)
#ifdef UNDER_CE
#  undef open
#endif
#define open			win32_open
#ifdef UNDER_CE
#  undef close
#endif
#define close(fd)		win32_close(fd)
#define eof(fd)			win32_eof(fd)
#ifdef UNDER_CE
#  undef isatty
#endif
#define isatty(fd)		win32_isatty(fd)
#ifdef UNDER_CE
#  undef read
#endif
#define read(fd,b,s)		win32_read(fd,b,s)
#ifdef UNDER_CE
#  undef write
#endif
#define write(fd,b,s)		win32_write(fd,b,s)
#define _open_osfhandle		win32_open_osfhandle
#ifdef UNDER_CE
#  undef _get_osfhandle
#endif
#define _get_osfhandle		win32_get_osfhandle
#define spawnvp			win32_spawnvp
#ifdef UNDER_CE
#  undef mkdir
#endif
#define mkdir			win32_mkdir
#ifdef UNDER_CE
#  undef rmdir
#endif
#define rmdir			win32_rmdir
#ifdef UNDER_CE
#  undef chdir
#endif
#define chdir			win32_chdir
#define flock(fd,o)		win32_flock(fd,o)
#ifdef UNDER_CE
#  undef execv
#endif
#define execv			win32_execv
#ifdef UNDER_CE
#  undef execvp
#endif
#define execvp			win32_execvp
#ifdef UNDER_CE
#  undef perror
#endif
#define perror			win32_perror
#define setbuf			win32_setbuf
#ifdef UNDER_CE
#  undef setvbuf
#endif
#define setvbuf			win32_setvbuf
#undef flushall
#define flushall		win32_flushall
#undef fcloseall
#define fcloseall		win32_fcloseall
#ifdef UNDER_CE
#  undef fgets
#endif
#define fgets			win32_fgets
#ifdef UNDER_CE
#  undef gets
#endif
#define gets			win32_gets
#ifdef UNDER_CE
#  undef fgetc
#endif
#define fgetc			win32_fgetc
#undef putc
#define putc			win32_putc
#ifdef UNDER_CE
#  undef puts
#endif
#define puts			win32_puts
#undef getchar
#define getchar			win32_getchar
#undef putchar
#define putchar			win32_putchar
#ifdef UNDER_CE
#  undef access
#endif
#define access(p,m)		win32_access(p,m)
#ifdef UNDER_CE
#  undef chmod
#endif
#define chmod(p,m)		win32_chmod(p,m)


#if !defined(MYMALLOC) || !defined(PERL_CORE)
#undef malloc
#undef calloc
#undef realloc
#undef free
#define malloc			win32_malloc
#define calloc			win32_calloc
#define realloc			win32_realloc
#define free			win32_free
#endif

/* XXX Why are APIs like sleep(), times() etc. inside a block
 * XXX guarded by "#ifndef WIN32IO_IS_STDIO"?
 */

#define pipe(fd)		win32_pipe((fd), 512, O_BINARY)
#define pause()			win32_sleep((32767L << 16) + 32767)
#define sleep			win32_sleep
#define times			win32_times
#define ioctl			win32_ioctl
#define link			win32_link
#define unlink			win32_unlink
#define utime			win32_utime
#ifdef UNDER_CE
#  undef gettimeofday
#endif
#define gettimeofday		win32_gettimeofday
#define uname			win32_uname
#define wait			win32_wait
#define waitpid			win32_waitpid
#ifdef UNDER_CE
#  undef kill
#endif
#define kill			win32_kill
#ifdef UNDER_CE
#  undef killpg
#endif
#define killpg(pid, sig)	win32_kill(pid, -(sig))


#ifdef UNDER_CE
#  undef opendir
#endif
#define opendir			win32_opendir
#ifdef UNDER_CE
#  undef readdir
#endif
#define readdir			win32_readdir
#define telldir			win32_telldir
#define seekdir			win32_seekdir
#define rewinddir		win32_rewinddir
#ifdef UNDER_CE
#  undef closedir
#endif
#define closedir		win32_closedir
#define os_id			win32_os_id
#ifdef UNDER_CE
#  undef getpid
#endif
#define getpid			win32_getpid

#undef crypt
#define crypt(t,s)		win32_crypt(t,s)

#undef get_childenv
#undef free_childenv
#undef clearenv
#undef get_childdir
#undef free_childdir
#define get_childenv()		win32_get_childenv()
#define free_childenv(d)	win32_free_childenv(d)
#define clearenv()		win32_clearenv()
#define get_childdir()		win32_get_childdir()
#define free_childdir(d)	win32_free_childdir(d)

#undef getenv
#define getenv win32_getenv
#undef putenv
#define putenv win32_putenv

#endif /* WIN32IO_IS_STDIO */
#endif /* WIN32IOP_H */
@


1.12
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@a132 1
DllExport  int		win32_stat(const char *path, Stat_t *buf);
d291 1
a291 1
#ifdef UNDER_CE
d295 1
a295 1
#ifdef UNDER_CE
@


1.11
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d210 3
d214 3
d218 3
d222 3
d226 3
d230 3
d236 3
d241 3
d245 3
d249 3
d255 3
d259 3
d263 3
d267 3
d271 3
d275 3
d279 3
d283 3
d288 3
d292 3
d296 3
d302 3
d306 3
d311 3
d316 3
d320 3
d324 3
d328 3
d333 3
d337 3
d341 3
d346 3
d351 3
d355 3
d359 3
d364 3
d368 3
d372 3
d377 3
d385 3
d389 3
d393 3
d399 3
d407 3
d411 3
d440 3
d447 3
d451 5
d457 3
d461 3
d468 3
d473 3
@


1.10
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d16 1
a16 5
#if defined(_MSC_VER) || defined(__MINGW32__)
#  include <sys/utime.h>
#else
#  include <utime.h>
#endif
d125 2
d163 2
@


1.9
log
@merge in perl 5.12.2 plus local changes
@
text
@d127 1
d193 1
a193 9
#ifdef __BORLANDC__
#undef ungetc
#undef getc
#undef putc
#undef getchar
#undef putchar
#endif

#if defined(__MINGW32__) || defined(__BORLANDC__)
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d89 1
d165 3
a167 1
#define alarm			win32_alarm
a210 1
#define strerror			win32_strerror
d256 1
d299 4
@


1.7
log
@merge in perl 5.8.8
@
text
@d120 1
a120 1
DllExport  DIR*		win32_opendir(char *filename);
d135 1
d243 1
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d194 3
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d70 1
d81 1
d241 1
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d10 2
a11 2
#  define START_EXTERN_C 
#  define END_EXTERN_C 
d65 2
a66 2
DllExport  long		win32_ftell(FILE *pf);
DllExport  int		win32_fseek(FILE *pf,long offset,int origin);
d72 2
a73 2
DllExport  int  	win32_fstat(int fd,struct stat *sbufptr);
DllExport  int  	win32_stat(const char *name,struct stat *sbufptr);
d75 3
a77 2
DllExport  FILE*	win32_popen( const char *command, const char *mode );
DllExport  int		win32_pclose( FILE *pf);
d80 2
a81 2
DllExport  long		win32_lseek( int fd, long offset, int origin);
DllExport  long		win32_tell( int fd);
d114 3
a116 2
DllExport  int		win32_open_osfhandle(long handle, int flags);
DllExport  long		win32_get_osfhandle(int fd);
d131 1
a131 1
DllExport  int		win32_stat(const char *path, struct stat *buf);
d137 1
d150 8
d160 3
a178 1
#undef alarm
d182 1
a292 1
#define alarm			win32_alarm
d297 1
d315 11
a332 1

@


1.3
log
@perl-5.6.0 + local changes
@
text
@a122 1
#ifndef USE_WIN32_RTL_ENV
a124 1
#endif
a300 1
#ifndef USE_WIN32_RTL_ENV
a304 1
#endif
@


1.2
log
@perl5.005_03 (stock)
@
text
@d116 7
d132 1
d134 2
d137 1
d141 5
a146 1
#if defined(HAVE_DES_FCRYPT) || defined(PERL_OBJECT)
a147 1
#endif
d169 1
d171 1
d224 1
d262 3
d283 2
d286 1
d297 2
a299 1
#ifdef HAVE_DES_FCRYPT
d301 1
a301 2
#define crypt			win32_crypt
#endif
@


1.1
log
@perl 5.004_04
@
text
@d4 25
d37 52
a88 49
EXT int * 	win32_errno(void);
EXT char *** 	win32_environ(void);
EXT FILE*	win32_stdin(void);
EXT FILE*	win32_stdout(void);
EXT FILE*	win32_stderr(void);
EXT int		win32_ferror(FILE *fp);
EXT int		win32_feof(FILE *fp);
EXT char*	win32_strerror(int e);

EXT int		win32_fprintf(FILE *pf, const char *format, ...);
EXT int		win32_printf(const char *format, ...);
EXT int		win32_vfprintf(FILE *pf, const char *format, va_list arg);
EXT int		win32_vprintf(const char *format, va_list arg);
EXT size_t	win32_fread(void *buf, size_t size, size_t count, FILE *pf);
EXT size_t	win32_fwrite(const void *buf, size_t size, size_t count, FILE *pf);
EXT FILE*	win32_fopen(const char *path, const char *mode);
EXT FILE*	win32_fdopen(int fh, const char *mode);
EXT FILE*	win32_freopen(const char *path, const char *mode, FILE *pf);
EXT int		win32_fclose(FILE *pf);
EXT int		win32_fputs(const char *s,FILE *pf);
EXT int		win32_fputc(int c,FILE *pf);
EXT int		win32_ungetc(int c,FILE *pf);
EXT int		win32_getc(FILE *pf);
EXT int		win32_fileno(FILE *pf);
EXT void	win32_clearerr(FILE *pf);
EXT int		win32_fflush(FILE *pf);
EXT long	win32_ftell(FILE *pf);
EXT int		win32_fseek(FILE *pf,long offset,int origin);
EXT int		win32_fgetpos(FILE *pf,fpos_t *p);
EXT int		win32_fsetpos(FILE *pf,const fpos_t *p);
EXT void	win32_rewind(FILE *pf);
EXT FILE*	win32_tmpfile(void);
EXT void	win32_abort(void);
EXT int  	win32_fstat(int fd,struct stat *bufptr);
EXT int  	win32_stat(const char *name,struct stat *bufptr);
EXT int		win32_pipe( int *phandles, unsigned int psize, int textmode );
EXT FILE*	win32_popen( const char *command, const char *mode );
EXT int		win32_pclose( FILE *pf);
EXT int		win32_setmode( int fd, int mode);
EXT long	win32_lseek( int fd, long offset, int origin);
EXT long	win32_tell( int fd);
EXT int		win32_dup( int fd);
EXT int		win32_dup2(int h1, int h2);
EXT int		win32_open(const char *path, int oflag,...);
EXT int		win32_close(int fd);
EXT int		win32_eof(int fd);
EXT int		win32_read(int fd, void *buf, unsigned int cnt);
EXT int		win32_write(int fd, const void *buf, unsigned int cnt);
EXT int		win32_spawnvp(int mode, const char *cmdname,
d90 30
a119 21
EXT int		win32_mkdir(const char *dir, int mode);
EXT int		win32_rmdir(const char *dir);
EXT int		win32_chdir(const char *dir);
EXT int		win32_flock(int fd, int oper);
EXT int		win32_execvp(const char *cmdname, const char *const *argv);
EXT void	win32_perror(const char *str);
EXT void	win32_setbuf(FILE *pf, char *buf);
EXT int		win32_setvbuf(FILE *pf, char *buf, int type, size_t size);
EXT int		win32_flushall(void);
EXT int		win32_fcloseall(void);
EXT char*	win32_fgets(char *s, int n, FILE *pf);
EXT char*	win32_gets(char *s);
EXT int		win32_fgetc(FILE *pf);
EXT int		win32_putc(int c, FILE *pf);
EXT int		win32_puts(const char *s);
EXT int		win32_getchar(void);
EXT int		win32_putchar(int c);
EXT void*	win32_malloc(size_t size);
EXT void*	win32_calloc(size_t numitems, size_t size);
EXT void*	win32_realloc(void *block, size_t size);
EXT void	win32_free(void *block);
d121 9
a129 5
/*
 * these two are win32 specific but still io related
 */
int		stolen_open_osfhandle(long handle, int flags);
long		stolen_get_osfhandle(int fd);
d131 3
a133 7
/*
 * defines for flock emulation
 */
#define LOCK_SH 1
#define LOCK_EX 2
#define LOCK_NB 4
#define LOCK_UN 8
d135 1
a135 4
#include <win32io.h>	/* pull in the io sub system structure */

EXT PWIN32_IOSUBSYSTEM	SetIOSubSystem(void	*piosubsystem);
EXT PWIN32_IOSUBSYSTEM	GetIOSubSystem(void);
d148 9
d179 1
d187 1
d194 1
d208 1
d219 2
a220 2
#define _open_osfhandle		stolen_open_osfhandle
#define _get_osfhandle		stolen_get_osfhandle
d226 1
d231 1
d233 1
d238 1
d241 1
d243 1
d245 6
a250 2
#define fscanf			(GetIOSubSystem()->pfnfscanf)
#define scanf			(GetIOSubSystem()->pfnscanf)
d255 32
d288 1
a289 1
#endif /* WIN32IOP_H */
@


1.1.1.1
log
@perl5.005_03
@
text
@a3 11
#ifndef START_EXTERN_C
#ifdef __cplusplus
#  define START_EXTERN_C extern "C" {
#  define END_EXTERN_C }
#  define EXTERN_C extern "C"
#else
#  define START_EXTERN_C 
#  define END_EXTERN_C 
#  define EXTERN_C
#endif
#endif
d5 3
a7 5
#if defined(_MSC_VER) || defined(__MINGW32__)
#  include <sys/utime.h>
#else
#  include <utime.h>
#endif
d10 1
a10 1
 * defines for flock emulation
d12 71
a82 4
#define LOCK_SH 1
#define LOCK_EX 2
#define LOCK_NB 4
#define LOCK_UN 8
d85 1
a85 1
 * Make this as close to original stdio as possible.
d87 2
d91 1
a91 1
 * function prototypes for our own win32io layer
d93 4
a96 93
START_EXTERN_C

DllExport  int * 	win32_errno(void);
DllExport  char *** 	win32_environ(void);
DllExport  FILE*	win32_stdin(void);
DllExport  FILE*	win32_stdout(void);
DllExport  FILE*	win32_stderr(void);
DllExport  int		win32_ferror(FILE *fp);
DllExport  int		win32_feof(FILE *fp);
DllExport  char*	win32_strerror(int e);

DllExport  int		win32_fprintf(FILE *pf, const char *format, ...);
DllExport  int		win32_printf(const char *format, ...);
DllExport  int		win32_vfprintf(FILE *pf, const char *format, va_list arg);
DllExport  int		win32_vprintf(const char *format, va_list arg);
DllExport  size_t	win32_fread(void *buf, size_t size, size_t count, FILE *pf);
DllExport  size_t	win32_fwrite(const void *buf, size_t size, size_t count, FILE *pf);
DllExport  FILE*	win32_fopen(const char *path, const char *mode);
DllExport  FILE*	win32_fdopen(int fh, const char *mode);
DllExport  FILE*	win32_freopen(const char *path, const char *mode, FILE *pf);
DllExport  int		win32_fclose(FILE *pf);
DllExport  int		win32_fputs(const char *s,FILE *pf);
DllExport  int		win32_fputc(int c,FILE *pf);
DllExport  int		win32_ungetc(int c,FILE *pf);
DllExport  int		win32_getc(FILE *pf);
DllExport  int		win32_fileno(FILE *pf);
DllExport  void		win32_clearerr(FILE *pf);
DllExport  int		win32_fflush(FILE *pf);
DllExport  long		win32_ftell(FILE *pf);
DllExport  int		win32_fseek(FILE *pf,long offset,int origin);
DllExport  int		win32_fgetpos(FILE *pf,fpos_t *p);
DllExport  int		win32_fsetpos(FILE *pf,const fpos_t *p);
DllExport  void		win32_rewind(FILE *pf);
DllExport  FILE*	win32_tmpfile(void);
DllExport  void		win32_abort(void);
DllExport  int  	win32_fstat(int fd,struct stat *sbufptr);
DllExport  int  	win32_stat(const char *name,struct stat *sbufptr);
DllExport  int		win32_pipe( int *phandles, unsigned int psize, int textmode );
DllExport  FILE*	win32_popen( const char *command, const char *mode );
DllExport  int		win32_pclose( FILE *pf);
DllExport  int		win32_rename( const char *oname, const char *newname);
DllExport  int		win32_setmode( int fd, int mode);
DllExport  long		win32_lseek( int fd, long offset, int origin);
DllExport  long		win32_tell( int fd);
DllExport  int		win32_dup( int fd);
DllExport  int		win32_dup2(int h1, int h2);
DllExport  int		win32_open(const char *path, int oflag,...);
DllExport  int		win32_close(int fd);
DllExport  int		win32_eof(int fd);
DllExport  int		win32_read(int fd, void *buf, unsigned int cnt);
DllExport  int		win32_write(int fd, const void *buf, unsigned int cnt);
DllExport  int		win32_spawnvp(int mode, const char *cmdname,
			      const char *const *argv);
DllExport  int		win32_mkdir(const char *dir, int mode);
DllExport  int		win32_rmdir(const char *dir);
DllExport  int		win32_chdir(const char *dir);
DllExport  int		win32_flock(int fd, int oper);
DllExport  int		win32_execv(const char *cmdname, const char *const *argv);
DllExport  int		win32_execvp(const char *cmdname, const char *const *argv);
DllExport  void		win32_perror(const char *str);
DllExport  void		win32_setbuf(FILE *pf, char *buf);
DllExport  int		win32_setvbuf(FILE *pf, char *buf, int type, size_t size);
DllExport  int		win32_flushall(void);
DllExport  int		win32_fcloseall(void);
DllExport  char*	win32_fgets(char *s, int n, FILE *pf);
DllExport  char*	win32_gets(char *s);
DllExport  int		win32_fgetc(FILE *pf);
DllExport  int		win32_putc(int c, FILE *pf);
DllExport  int		win32_puts(const char *s);
DllExport  int		win32_getchar(void);
DllExport  int		win32_putchar(int c);
DllExport  void*	win32_malloc(size_t size);
DllExport  void*	win32_calloc(size_t numitems, size_t size);
DllExport  void*	win32_realloc(void *block, size_t size);
DllExport  void		win32_free(void *block);

DllExport  int		win32_open_osfhandle(long handle, int flags);
DllExport  long		win32_get_osfhandle(int fd);

#ifndef USE_WIN32_RTL_ENV
DllExport  char*	win32_getenv(const char *name);
DllExport  int		win32_putenv(const char *name);
#endif

DllExport  unsigned 	win32_sleep(unsigned int);
DllExport  int		win32_times(struct tms *timebuf);
DllExport  unsigned 	win32_alarm(unsigned int sec);
DllExport  int		win32_stat(const char *path, struct stat *buf);
DllExport  int		win32_ioctl(int i, unsigned int u, char *data);
DllExport  int		win32_utime(const char *f, struct utimbuf *t);
DllExport  int		win32_wait(int *status);
DllExport  int		win32_waitpid(int pid, int *status, int flags);
DllExport  int		win32_kill(int pid, int sig);
d98 1
a98 3
#if defined(HAVE_DES_FCRYPT) || defined(PERL_OBJECT)
DllExport char *	win32_crypt(const char *txt, const char *salt);
#endif
d100 2
a101 1
END_EXTERN_C
a113 9
#undef fclose
#undef pipe
#undef pause
#undef sleep
#undef times
#undef alarm
#undef ioctl
#undef utime
#undef wait
a135 1
#undef fprintf
a142 1
#undef fdopen
a148 1
#undef getc
a161 1
#define rename(old,new)		win32_rename(old,new)
d172 2
a173 2
#define _open_osfhandle		win32_open_osfhandle
#define _get_osfhandle		win32_get_osfhandle
a178 1
#define execv			win32_execv
a182 1
#undef flushall
a183 1
#undef fcloseall
a187 1
#undef putc
a189 1
#undef getchar
a190 1
#undef putchar
d192 2
a193 6

#if !defined(MYMALLOC) || !defined(PERL_CORE)
#undef malloc
#undef calloc
#undef realloc
#undef free
d198 1
a198 24
#endif

#define pipe(fd)		win32_pipe((fd), 512, O_BINARY)
#define pause()			win32_sleep((32767L << 16) + 32767)
#define sleep			win32_sleep
#define times			win32_times
#define alarm			win32_alarm
#define ioctl			win32_ioctl
#define utime			win32_utime
#define wait			win32_wait
#define waitpid			win32_waitpid
#define kill			win32_kill

#define opendir			win32_opendir
#define readdir			win32_readdir
#define telldir			win32_telldir
#define seekdir			win32_seekdir
#define rewinddir		win32_rewinddir
#define closedir		win32_closedir

#ifdef HAVE_DES_FCRYPT
#undef crypt
#define crypt			win32_crypt
#endif
a199 8
#ifndef USE_WIN32_RTL_ENV
#undef getenv
#define getenv win32_getenv
#undef putenv
#define putenv win32_putenv
#endif

#endif /* WIN32IO_IS_STDIO */
a200 1

@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a115 7
DllExport  DIR*		win32_opendir(char *filename);
DllExport  struct direct*	win32_readdir(DIR *dirp);
DllExport  long		win32_telldir(DIR *dirp);
DllExport  void		win32_seekdir(DIR *dirp, long loc);
DllExport  void		win32_rewinddir(DIR *dirp);
DllExport  int		win32_closedir(DIR *dirp);

a124 1
DllExport  char*	win32_longpath(char *path);
a125 2
DllExport  int          win32_link(const char *oldname, const char *newname);
DllExport  int		win32_unlink(const char *f);
a126 1
DllExport  int		win32_uname(struct utsname *n);
a129 5
DllExport  unsigned long	win32_os_id(void);
DllExport  void*	win32_dynaload(const char*filename);
DllExport  int		win32_access(const char *path, int mode);
DllExport  int		win32_chmod(const char *path, int mode);
DllExport  int		win32_getpid(void);
d131 1
d133 1
a154 1
#undef unlink
a155 1
#undef uname
a207 1
#define longpath(pth)   	win32_longpath(pth)
a244 3
#define access(p,m)		win32_access(p,m)
#define chmod(p,m)		win32_chmod(p,m)

a262 2
#define link			win32_link
#define unlink			win32_unlink
a263 1
#define uname			win32_uname
a273 2
#define os_id			win32_os_id
#define getpid			win32_getpid
d275 1
d277 2
a278 1
#define crypt(t,s)		win32_crypt(t,s)
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d123 1
d126 1
d303 1
d308 1
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d10 2
a11 2
#  define START_EXTERN_C
#  define END_EXTERN_C
d65 2
a66 2
DllExport  Off_t	win32_ftell(FILE *pf);
DllExport  int		win32_fseek(FILE *pf,Off_t offset,int origin);
d72 2
a73 2
DllExport  int  	win32_fstat(int fd,Stat_t *sbufptr);
DllExport  int  	win32_stat(const char *name,Stat_t *sbufptr);
d75 2
a76 3
DllExport  PerlIO*	win32_popen( const char *command, const char *mode );
DllExport  PerlIO*	win32_popenlist(const char *mode, IV narg, SV **args);
DllExport  int		win32_pclose( PerlIO *pf);
d79 2
a80 2
DllExport  Off_t	win32_lseek( int fd, Off_t offset, int origin);
DllExport  Off_t	win32_tell( int fd);
d113 2
a114 3
DllExport  int		win32_open_osfhandle(intptr_t handle, int flags);
DllExport  intptr_t	win32_get_osfhandle(int fd);
DllExport  FILE*	win32_fdupopen(FILE *pf);
d129 1
a129 1
DllExport  int		win32_stat(const char *path, Stat_t *buf);
a134 1
DllExport  int		win32_gettimeofday(struct timeval *tp, void *not_used);
a146 8
DllExport void *	win32_get_childenv(void);
DllExport void		win32_free_childenv(void* d);
DllExport void		win32_clearenv(void);
DllExport char *	win32_get_childdir(void);
DllExport void		win32_free_childdir(char* d);
DllExport Sighandler_t	win32_signal(int sig, Sighandler_t subcode);


a148 3
#undef alarm
#define alarm			win32_alarm

d165 1
a168 1
#undef gettimeofday
d279 1
a283 1
#define gettimeofday		win32_gettimeofday
a300 11
#undef get_childenv
#undef free_childenv
#undef clearenv
#undef get_childdir
#undef free_childdir
#define get_childenv()		win32_get_childenv()
#define free_childenv(d)	win32_free_childenv(d)
#define clearenv()		win32_clearenv()
#define get_childdir()		win32_get_childdir()
#define free_childdir(d)	win32_free_childdir(d)

d308 1
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@a69 1
DllExport  int		win32_tmpfd(void);
a79 1
DllExport  int		win32_chsize(int fd, Off_t size);
a238 1
#define chsize(fd,sz)		win32_chsize(fd,sz)
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@a193 3
#endif

#if defined(__MINGW32__) || defined(__BORLANDC__)
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d120 1
a120 1
DllExport  DIR*		win32_opendir(const char *filename);
a134 1
DllExport  char*	win32_ansipath(const WCHAR *path);
a241 1
#define ansipath(pth)   	win32_ansipath(pth)
@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@a88 1
DllExport  int		win32_isatty(int fd);
d164 1
a164 3
#define alarm				win32_alarm
#undef strerror
#define strerror			win32_strerror
d208 1
a253 1
#define isatty(fd)		win32_isatty(fd)
a295 4

/* XXX Why are APIs like sleep(), times() etc. inside a block
 * XXX guarded by "#ifndef WIN32IO_IS_STDIO"?
 */
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a126 1
DllExport  DIR*		win32_dirp_dup(DIR *const dirp, CLONE_PARAMS *const param);
d192 9
a200 1
#if defined(__MINGW32__)
@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d16 5
a20 1
#include <sys/utime.h>
a128 2
DllExport  char*        win32_getenvironmentstrings(void);
/* also see win32_freeenvironmentstrings macro */
a164 2
/* see comment in win32_getenvironmentstrings */
#define win32_freeenvironmentstrings(x) win32_free(x)
@


1.1.1.11
log
@Import perl-5.20.1
@
text
@a209 3
#ifdef UNDER_CE /* celib also makes these be macros to celib's x* symbols */
#  undef vfprintf
#endif
a210 3
#ifdef UNDER_CE
#  undef printf
#endif
a211 3
#ifdef UNDER_CE
#  undef vprintf
#endif
a212 3
#ifdef UNDER_CE
#  undef fread
#endif
a213 3
#ifdef UNDER_CE
#  undef fwrite
#endif
a214 3
#ifdef UNDER_CE
#  undef fopen
#endif
a217 3
#ifdef UNDER_CE
#  undef freopen
#endif
a219 3
#ifdef UNDER_CE
#  undef fputs
#endif
a220 3
#ifdef UNDER_CE
#  undef fputc
#endif
a221 3
#ifdef UNDER_CE
#  undef ungetc
#endif
a224 3
#ifdef UNDER_CE
#  undef fileno
#endif
a225 3
#ifdef UNDER_CE
#  undef clearerr
#endif
a226 3
#ifdef UNDER_CE
#  undef fflush
#endif
a227 3
#ifdef UNDER_CE
#  undef ftell
#endif
a228 3
#ifdef UNDER_CE
#  undef fseek
#endif
a229 3
#ifdef UNDER_CE
#  undef fgetpos
#endif
a230 3
#ifdef UNDER_CE
#  undef fsetpos
#endif
a231 3
#ifdef UNDER_CE
#  undef rewind
#endif
a233 3
#ifdef UNDER_CE
#  undef abort
#endif
a234 3
#ifdef UNDER_CE
#  undef fstat
#endif
a235 3
#ifdef UNDER_CE
#  undef stat
#endif
a238 3
#ifdef UNDER_CE
#  undef rename
#endif
a239 3
#ifdef UNDER_CE
#  undef setmode
#endif
a241 3
#ifdef UNDER_CE
#  undef lseek
#endif
a243 3
#ifdef UNDER_CE
#  undef dup
#endif
a244 3
#ifdef UNDER_CE
#  undef dup2
#endif
a245 3
#ifdef UNDER_CE
#  undef open
#endif
a246 3
#ifdef UNDER_CE
#  undef close
#endif
a248 3
#ifdef UNDER_CE
#  undef isatty
#endif
a249 3
#ifdef UNDER_CE
#  undef read
#endif
a250 3
#ifdef UNDER_CE
#  undef write
#endif
a252 3
#ifdef UNDER_CE
#  undef _get_osfhandle
#endif
a254 3
#ifdef UNDER_CE
#  undef mkdir
#endif
a255 3
#ifdef UNDER_CE
#  undef rmdir
#endif
a256 3
#ifdef UNDER_CE
#  undef chdir
#endif
a258 3
#ifdef UNDER_CE
#  undef execv
#endif
a259 3
#ifdef UNDER_CE
#  undef execvp
#endif
a260 3
#ifdef UNDER_CE
#  undef perror
#endif
a262 3
#ifdef UNDER_CE
#  undef setvbuf
#endif
a267 3
#ifdef UNDER_CE
#  undef fgets
#endif
a268 3
#ifdef UNDER_CE
#  undef gets
#endif
a269 3
#ifdef UNDER_CE
#  undef fgetc
#endif
a272 3
#ifdef UNDER_CE
#  undef puts
#endif
a277 3
#ifdef UNDER_CE
#  undef access
#endif
a278 3
#ifdef UNDER_CE
#  undef chmod
#endif
a304 3
#ifdef UNDER_CE
#  undef gettimeofday
#endif
a308 3
#ifdef UNDER_CE
#  undef kill
#endif
a309 5
#ifdef UNDER_CE
#  undef killpg
#endif
#define killpg(pid, sig)	win32_kill(pid, -(sig))

a310 3
#ifdef UNDER_CE
#  undef opendir
#endif
a311 3
#ifdef UNDER_CE
#  undef readdir
#endif
a315 3
#ifdef UNDER_CE
#  undef closedir
#endif
a317 3
#ifdef UNDER_CE
#  undef getpid
#endif
@


