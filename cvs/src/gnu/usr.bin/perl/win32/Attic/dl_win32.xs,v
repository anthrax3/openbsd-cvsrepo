head	1.9;
access;
symbols
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.9
date	2010.09.24.15.00.02;	author millert;	state dead;
branches;
next	1.8;

1.8
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.22;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.15;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.15.21.30.43;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.09.03;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.06.39;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.42.14;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.11.06;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.13;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.15.21.18.27;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.49.58;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.19.05;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@/* dl_win32.xs
 * 
 * Platform:	Win32 (Windows NT/Windows 95)
 * Author:	Wei-Yuen Tan (wyt@@hip.com)
 * Created:	A warm day in June, 1995
 *
 * Modified:
 *    August 23rd 1995 - rewritten after losing everything when I
 *                       wiped off my NT partition (eek!)
 */

/* Porting notes:

I merely took Paul's dl_dlopen.xs, took out extraneous stuff and
replaced the appropriate SunOS calls with the corresponding Win32
calls.

*/

#define WIN32_LEAN_AND_MEAN
#ifdef __GNUC__
#define Win32_Winsock
#endif
#include <windows.h>
#include <string.h>

#define PERL_NO_GET_CONTEXT

#include "EXTERN.h"
#include "perl.h"
#include "win32.h"

#include "XSUB.h"

typedef struct {
    SV *	x_error_sv;
} my_cxtx_t;		/* this *must* be named my_cxtx_t */

#define DL_CXT_EXTRA	/* ask for dl_cxtx to be defined in dlutils.c */
#include "dlutils.c"	/* SaveError() etc	*/

#define dl_error_sv	(dl_cxtx.x_error_sv)

static char *
OS_Error_String(pTHX)
{
    dMY_CXT;
    DWORD err = GetLastError();
    STRLEN len;
    if (!dl_error_sv)
	dl_error_sv = newSVpvn("",0);
    PerlProc_GetOSError(dl_error_sv,err);
    return SvPV(dl_error_sv,len);
}

static void
dl_private_init(pTHX)
{
    (void)dl_generic_private_init(aTHX);
}

/* 
    This function assumes the list staticlinkmodules
    will be formed from package names with '::' replaced
    with '/'. Thus Win32::OLE is in the list as Win32/OLE
*/
static int
dl_static_linked(char *filename)
{
    char **p;
    char *ptr, *hptr;
    static char subStr[] = "/auto/";
    char szBuffer[MAX_PATH];

    /* change all the '\\' to '/' */
    strcpy(szBuffer, filename);
    for(ptr = szBuffer; ptr = strchr(ptr, '\\'); ++ptr)
	*ptr = '/';

    /* delete the file name */
    ptr = strrchr(szBuffer, '/');
    if(ptr != NULL)
	*ptr = '\0';

    /* remove leading lib path */
    ptr = strstr(szBuffer, subStr);
    if(ptr != NULL)
	ptr += sizeof(subStr)-1;
    else
	ptr = szBuffer;

    for (p = staticlinkmodules; *p;p++) {
	if (hptr = strstr(ptr, *p)) {
	    /* found substring, need more detailed check if module name match */
	    if (hptr==ptr) {
		return strcmp(ptr, *p)==0;
	    }
	    if (hptr[strlen(*p)] == 0)
		return hptr[-1]=='/';
	}
    };
    return 0;
}

MODULE = DynaLoader	PACKAGE = DynaLoader

BOOT:
    (void)dl_private_init(aTHX);

void *
dl_load_file(filename,flags=0)
    char *		filename
    int			flags
    PREINIT:
    CODE:
  {
    DLDEBUG(1,PerlIO_printf(Perl_debug_log,"dl_load_file(%s):\n", filename));
    if (dl_static_linked(filename) == 0) {
	RETVAL = PerlProc_DynaLoad(filename);
    }
    else
	RETVAL = (void*) Win_GetModuleHandle(NULL);
    DLDEBUG(2,PerlIO_printf(Perl_debug_log," libref=%x\n", RETVAL));
    ST(0) = sv_newmortal() ;
    if (RETVAL == NULL)
	SaveError(aTHX_ "load_file:%s",
		  OS_Error_String(aTHX)) ;
    else
	sv_setiv( ST(0), (IV)RETVAL);
  }

int
dl_unload_file(libref)
    void *	libref
  CODE:
    DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dl_unload_file(%lx):\n", PTR2ul(libref)));
    RETVAL = FreeLibrary(libref);
    if (!RETVAL)
        SaveError(aTHX_ "unload_file:%s", OS_Error_String(aTHX)) ;
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, " retval = %d\n", RETVAL));
  OUTPUT:
    RETVAL

void *
dl_find_symbol(libhandle, symbolname)
    void *	libhandle
    char *	symbolname
    CODE:
    DLDEBUG(2,PerlIO_printf(Perl_debug_log,"dl_find_symbol(handle=%x, symbol=%s)\n",
		      libhandle, symbolname));
    RETVAL = (void*) GetProcAddress((HINSTANCE) libhandle, symbolname);
    DLDEBUG(2,PerlIO_printf(Perl_debug_log,"  symbolref = %x\n", RETVAL));
    ST(0) = sv_newmortal() ;
    if (RETVAL == NULL)
	SaveError(aTHX_ "find_symbol:%s",
		  OS_Error_String(aTHX)) ;
    else
	sv_setiv( ST(0), (IV)RETVAL);


void
dl_undef_symbols()
    PPCODE:



# These functions should not need changing on any platform:

void
dl_install_xsub(perl_name, symref, filename="$Package")
    char *		perl_name
    void *		symref 
    char *		filename
    CODE:
    DLDEBUG(2,PerlIO_printf(Perl_debug_log,"dl_install_xsub(name=%s, symref=%x)\n",
		      perl_name, symref));
    ST(0) = sv_2mortal(newRV((SV*)newXS(perl_name,
					(void(*)(pTHX_ CV *))symref,
					filename)));


char *
dl_error()
    CODE:
    dMY_CXT;
    RETVAL = dl_last_error;
    OUTPUT:
    RETVAL

#if defined(USE_ITHREADS)

void
CLONE(...)
    CODE:
    MY_CXT_CLONE;

    /* MY_CXT_CLONE just does a memcpy on the whole structure, so to avoid
     * using Perl variables that belong to another thread, we create our 
     * own for this thread.
     */
    MY_CXT.x_dl_last_error = newSVpvn("", 0);

#endif

# end.
@


1.8
log
@Merge in perl 5.10.1; part two
@
text
@@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d190 15
@


1.6
log
@merge in perl 5.8.8
@
text
@d122 1
a122 1
	RETVAL = (void*) GetModuleHandle(NULL);
@


1.5
log
@sync in-tree perl with 5.8.6
@
text
@d132 12
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d71 1
a71 1
    char* ptr;
d93 8
a100 1
	if (strstr(ptr, *p)) return 1;
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d33 5
a37 3
#ifdef PERL_OBJECT
#define NO_XSLOCKS
#endif  /* PERL_OBJECT */
d39 2
a40 1
#include "XSUB.h"
d42 1
a42 1
static SV *error_sv;
d45 1
a45 1
OS_Error_String(pTHXo)
d47 7
a53 6
 DWORD err = GetLastError();
 STRLEN len;
 if (!error_sv)
  error_sv = newSVpvn("",0);
 PerlProc_GetOSError(error_sv,err);
 return SvPV(error_sv,len);
a55 2
#include "dlutils.c"	/* SaveError() etc	*/

d57 1
a57 1
dl_private_init(pTHXo)
d59 1
a59 1
    (void)dl_generic_private_init(aTHXo);
d101 1
a101 1
    (void)dl_private_init(aTHXo);
d119 2
a120 2
	SaveError(aTHXo_ "load_file:%s",
		  OS_Error_String(aTHXo)) ;
d136 2
a137 2
	SaveError(aTHXo_ "find_symbol:%s",
		  OS_Error_String(aTHXo)) ;
d159 1
a159 1
					(void(*)(pTHXo_ CV *))symref,
d166 2
a167 1
    RETVAL = LastError ;
@


1.2
log
@perl5.005_03 (stock)
@
text
@d27 2
d42 1
a42 1
OS_Error_String(CPERLarg)
d47 2
a48 2
  error_sv = newSVpv("",0);
 win32_str_os_error(error_sv,err);
d55 1
a55 1
dl_private_init(CPERLarg)
d57 1
a57 1
    (void)dl_generic_private_init(PERL_OBJECT_THIS);
d99 1
a99 1
    (void)dl_private_init(PERL_OBJECT_THIS);
d107 5
a111 3
    DLDEBUG(1,PerlIO_printf(PerlIO_stderr(),"dl_load_file(%s):\n", filename));
    if (dl_static_linked(filename) == 0)
	RETVAL = (void*) LoadLibraryEx(filename, NULL, LOAD_WITH_ALTERED_SEARCH_PATH ) ;
d114 1
a114 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr()," libref=%x\n", RETVAL));
d117 2
a118 2
	SaveError(PERL_OBJECT_THIS_ "load_file:%s",
		  OS_Error_String(PERL_OBJECT_THIS)) ;
d121 1
a121 1

d128 1
a128 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(),"dl_find_symbol(handle=%x, symbol=%s)\n",
d131 1
a131 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(),"  symbolref = %x\n", RETVAL));
d134 2
a135 2
	SaveError(PERL_OBJECT_THIS_ "find_symbol:%s",
		  OS_Error_String(PERL_OBJECT_THIS)) ;
d154 1
a154 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(),"dl_install_xsub(name=%s, symref=%x)\n",
d156 3
a158 1
    ST(0)=sv_2mortal(newRV((SV*)newXS(perl_name, (void(*)(CV* _CPERLarg))symref, filename)));
@


1.1
log
@perl 5.004_04
@
text
@d21 3
d29 6
d37 13
d53 1
a53 1
dl_private_init()
d55 1
a55 1
    (void)dl_generic_private_init();
d58 5
d67 21
d89 1
a89 1
	if (strstr(filename, *p)) return 1;
d97 1
a97 1
    (void)dl_private_init();
d105 1
a105 1
    DLDEBUG(1,fprintf(stderr,"dl_load_file(%s):\n", filename));
d110 1
a110 1
    DLDEBUG(2,fprintf(stderr," libref=%x\n", RETVAL));
d113 2
a114 1
	SaveError("%d",GetLastError()) ;
d124 1
a124 1
    DLDEBUG(2,fprintf(stderr,"dl_find_symbol(handle=%x, symbol=%s)\n",
d127 1
a127 1
    DLDEBUG(2,fprintf(stderr,"  symbolref = %x\n", RETVAL));
d130 2
a131 1
	SaveError("%d",GetLastError()) ;
d150 1
a150 1
    DLDEBUG(2,fprintf(stderr,"dl_install_xsub(name=%s, symref=%x)\n",
d152 1
a152 1
    ST(0)=sv_2mortal(newRV((SV*)newXS(perl_name, (void(*)(CV*))symref, filename)));
@


1.1.1.1
log
@perl5.005_03
@
text
@a20 3
#ifdef __GNUC__
#define Win32_Winsock
#endif
a25 6
#include "win32.h"

#ifdef PERL_OBJECT
#define NO_XSLOCKS
#endif  /* PERL_OBJECT */

a27 13
static SV *error_sv;

static char *
OS_Error_String(CPERLarg)
{
 DWORD err = GetLastError();
 STRLEN len;
 if (!error_sv)
  error_sv = newSVpv("",0);
 win32_str_os_error(error_sv,err);
 return SvPV(error_sv,len);
}

d31 1
a31 1
dl_private_init(CPERLarg)
d33 1
a33 1
    (void)dl_generic_private_init(PERL_OBJECT_THIS);
a35 5
/* 
    This function assumes the list staticlinkmodules
    will be formed from package names with '::' replaced
    with '/'. Thus Win32::OLE is in the list as Win32/OLE
*/
a39 21
    char* ptr;
    static char subStr[] = "/auto/";
    char szBuffer[MAX_PATH];

    /* change all the '\\' to '/' */
    strcpy(szBuffer, filename);
    for(ptr = szBuffer; ptr = strchr(ptr, '\\'); ++ptr)
	*ptr = '/';

    /* delete the file name */
    ptr = strrchr(szBuffer, '/');
    if(ptr != NULL)
	*ptr = '\0';

    /* remove leading lib path */
    ptr = strstr(szBuffer, subStr);
    if(ptr != NULL)
	ptr += sizeof(subStr)-1;
    else
	ptr = szBuffer;

d41 1
a41 1
	if (strstr(ptr, *p)) return 1;
d49 1
a49 1
    (void)dl_private_init(PERL_OBJECT_THIS);
d57 1
a57 1
    DLDEBUG(1,PerlIO_printf(PerlIO_stderr(),"dl_load_file(%s):\n", filename));
d62 1
a62 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr()," libref=%x\n", RETVAL));
d65 1
a65 2
	SaveError(PERL_OBJECT_THIS_ "load_file:%s",
		  OS_Error_String(PERL_OBJECT_THIS)) ;
d75 1
a75 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(),"dl_find_symbol(handle=%x, symbol=%s)\n",
d78 1
a78 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(),"  symbolref = %x\n", RETVAL));
d81 1
a81 2
	SaveError(PERL_OBJECT_THIS_ "find_symbol:%s",
		  OS_Error_String(PERL_OBJECT_THIS)) ;
d100 1
a100 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(),"dl_install_xsub(name=%s, symref=%x)\n",
d102 1
a102 1
    ST(0)=sv_2mortal(newRV((SV*)newXS(perl_name, (void(*)(CV* _CPERLarg))symref, filename)));
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a26 2
#define PERL_NO_GET_CONTEXT

d40 1
a40 1
OS_Error_String(pTHXo)
d45 2
a46 2
  error_sv = newSVpvn("",0);
 PerlProc_GetOSError(error_sv,err);
d53 1
a53 1
dl_private_init(pTHXo)
d55 1
a55 1
    (void)dl_generic_private_init(aTHXo);
d97 1
a97 1
    (void)dl_private_init(aTHXo);
d105 3
a107 5
  {
    DLDEBUG(1,PerlIO_printf(Perl_debug_log,"dl_load_file(%s):\n", filename));
    if (dl_static_linked(filename) == 0) {
	RETVAL = PerlProc_DynaLoad(filename);
    }
d110 1
a110 1
    DLDEBUG(2,PerlIO_printf(Perl_debug_log," libref=%x\n", RETVAL));
d113 2
a114 2
	SaveError(aTHXo_ "load_file:%s",
		  OS_Error_String(aTHXo)) ;
d117 1
a117 1
  }
d124 1
a124 1
    DLDEBUG(2,PerlIO_printf(Perl_debug_log,"dl_find_symbol(handle=%x, symbol=%s)\n",
d127 1
a127 1
    DLDEBUG(2,PerlIO_printf(Perl_debug_log,"  symbolref = %x\n", RETVAL));
d130 2
a131 2
	SaveError(aTHXo_ "find_symbol:%s",
		  OS_Error_String(aTHXo)) ;
d150 1
a150 1
    DLDEBUG(2,PerlIO_printf(Perl_debug_log,"dl_install_xsub(name=%s, symref=%x)\n",
d152 1
a152 3
    ST(0) = sv_2mortal(newRV((SV*)newXS(perl_name,
					(void(*)(pTHXo_ CV *))symref,
					filename)));
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d33 4
d39 1
a39 8
typedef struct {
    SV *	x_error_sv;
} my_cxtx_t;		/* this *must* be named my_cxtx_t */

#define DL_CXT_EXTRA	/* ask for dl_cxtx to be defined in dlutils.c */
#include "dlutils.c"	/* SaveError() etc	*/

#define dl_error_sv	(dl_cxtx.x_error_sv)
d42 1
a42 1
OS_Error_String(pTHX)
d44 6
a49 7
    dMY_CXT;
    DWORD err = GetLastError();
    STRLEN len;
    if (!dl_error_sv)
	dl_error_sv = newSVpvn("",0);
    PerlProc_GetOSError(dl_error_sv,err);
    return SvPV(dl_error_sv,len);
d52 2
d55 1
a55 1
dl_private_init(pTHX)
d57 1
a57 1
    (void)dl_generic_private_init(aTHX);
d99 1
a99 1
    (void)dl_private_init(aTHX);
d117 2
a118 2
	SaveError(aTHX_ "load_file:%s",
		  OS_Error_String(aTHX)) ;
d134 2
a135 2
	SaveError(aTHX_ "find_symbol:%s",
		  OS_Error_String(aTHX)) ;
d157 1
a157 1
					(void(*)(pTHX_ CV *))symref,
d164 1
a164 2
    dMY_CXT;
    RETVAL = dl_last_error;
@


1.1.1.4
log
@perl 5.8.6 from CPAN
@
text
@d71 1
a71 1
    char *ptr, *hptr;
d93 1
a93 8
	if (hptr = strstr(ptr, *p)) {
	    /* found substring, need more detailed check if module name match */
	    if (hptr==ptr) {
		return strcmp(ptr, *p)==0;
	    }
	    if (hptr[strlen(*p)] == 0)
		return hptr[-1]=='/';
	}
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@a131 12
int
dl_unload_file(libref)
    void *	libref
  CODE:
    DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dl_unload_file(%lx):\n", PTR2ul(libref)));
    RETVAL = FreeLibrary(libref);
    if (!RETVAL)
        SaveError(aTHX_ "unload_file:%s", OS_Error_String(aTHX)) ;
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, " retval = %d\n", RETVAL));
  OUTPUT:
    RETVAL

@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d122 1
a122 1
	RETVAL = (void*) Win_GetModuleHandle(NULL);
@


1.1.1.7
log
@import perl 5.10.1
@
text
@a189 15
#if defined(USE_ITHREADS)

void
CLONE(...)
    CODE:
    MY_CXT_CLONE;

    /* MY_CXT_CLONE just does a memcpy on the whole structure, so to avoid
     * using Perl variables that belong to another thread, we create our 
     * own for this thread.
     */
    MY_CXT.x_dl_last_error = newSVpvn("", 0);

#endif

@


