head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.9
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.12
date	2017.02.05.00.31.53;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	cxJ08BvJA9Pt2PTM;

1.11
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	QP75iYx42Uo7mMxO;

1.10
date	2014.03.24.15.05.13;	author afresh1;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.25.20.40.44;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.12.18.24.21;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.35.58;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.22.58;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.15.21.30.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.03.03.02.22;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.27.22.25.18;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.05;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.48.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.37.35;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.14.48;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.43.33;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.15.21.16.30;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.47.35;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.07;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.10.35;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.06.30;	author sthen;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.03.24.14.58.46;	author afresh1;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.11.17.20.52.38;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@perl 5.004_04
@


1.12
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@/*    perlio.h
 *
 *    Copyright (C) 1996, 1997, 1999, 2000, 2001, 2002, 2003,
 *    2004, 2005, 2006, 2007, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifndef _PERLIO_H
#define _PERLIO_H
/*
  Interface for perl to IO functions.
  There is a hierarchy of Configure determined #define controls:
   USE_STDIO   - No longer available via Configure.  Formerly forced
                 PerlIO_xxx() to be #define-d onto stdio functions.
                 Now generates compile-time error.

   USE_PERLIO  - The primary Configure variable that enables PerlIO.
                 PerlIO_xxx() are real functions
                 defined in perlio.c which implement extra functionality
                 required for utf8 support.

*/

#ifndef USE_PERLIO
# define USE_STDIO
#endif

#ifdef USE_STDIO
#  error "stdio is no longer supported as the default base layer -- use perlio."
#endif

/* --------------------  End of Configure controls ---------------------------- */

/*
 * Although we may not want stdio to be used including <stdio.h> here
 * avoids issues where stdio.h has strange side effects
 */
#include <stdio.h>

#if defined(USE_64_BIT_STDIO) && defined(HAS_FTELLO) && !defined(USE_FTELL64)
#define ftell ftello
#endif

#if defined(USE_64_BIT_STDIO) && defined(HAS_FSEEKO) && !defined(USE_FSEEK64)
#define fseek fseeko
#endif

/* BS2000 includes are sometimes a bit non standard :-( */
#if defined(POSIX_BC) && defined(O_BINARY) && !defined(O_TEXT)
#undef O_BINARY
#endif

#ifndef PerlIO
/* ----------- PerlIO implementation ---------- */
/* PerlIO not #define-d to something else - define the implementation */

typedef struct _PerlIO PerlIOl;
typedef struct _PerlIO_funcs PerlIO_funcs;
typedef PerlIOl *PerlIO;
#define PerlIO PerlIO
#define PERLIO_LAYERS 1

/* PERLIO_FUNCS_CONST is now on by default for efficiency, PERLIO_FUNCS_CONST
   can be removed 1 day once stable & then PerlIO vtables are permanently RO */
#ifdef PERLIO_FUNCS_CONST
#define PERLIO_FUNCS_DECL(funcs) const PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (PerlIO_funcs*)(funcs)
#else
#define PERLIO_FUNCS_DECL(funcs) PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (funcs)
#endif

PERL_CALLCONV void PerlIO_define_layer(pTHX_ PerlIO_funcs *tab);
PERL_CALLCONV PerlIO_funcs *PerlIO_find_layer(pTHX_ const char *name,
                                              STRLEN len,
				              int load);
PERL_CALLCONV PerlIO *PerlIO_push(pTHX_ PerlIO *f, PERLIO_FUNCS_DECL(*tab),
			          const char *mode, SV *arg);
PERL_CALLCONV void PerlIO_pop(pTHX_ PerlIO *f);
PERL_CALLCONV AV* PerlIO_get_layers(pTHX_ PerlIO *f);
PERL_CALLCONV void PerlIO_clone(pTHX_ PerlInterpreter *proto,
                                CLONE_PARAMS *param);

#endif				/* PerlIO */

/* ----------- End of implementation choices  ---------- */

/* We now need to determine  what happens if source trys to use stdio.
 * There are three cases based on PERLIO_NOT_STDIO which XS code
 * can set how it wants.
 */

#ifdef PERL_CORE
/* Make a choice for perl core code
   - currently this is set to try and catch lingering raw stdio calls.
     This is a known issue with some non UNIX ports which still use
     "native" stdio features.
*/
#  ifndef PERLIO_NOT_STDIO
#    define PERLIO_NOT_STDIO 1
#  endif
#else
#  ifndef PERLIO_NOT_STDIO
#    define PERLIO_NOT_STDIO 0
#  endif
#endif

#ifdef PERLIO_NOT_STDIO
#if PERLIO_NOT_STDIO
/*
 * PERLIO_NOT_STDIO #define'd as 1
 * Case 1: Strong denial of stdio - make all stdio calls (we can think of) errors
 */
#include "nostdio.h"
#else				/* if PERLIO_NOT_STDIO */
/*
 * PERLIO_NOT_STDIO #define'd as 0
 * Case 2: Declares that both PerlIO and stdio can be used
 */
#endif				/* if PERLIO_NOT_STDIO */
#else				/* ifdef PERLIO_NOT_STDIO */
/*
 * PERLIO_NOT_STDIO not defined
 * Case 3: Try and fake stdio calls as PerlIO calls
 */
#include "fakesdio.h"
#endif				/* ifndef PERLIO_NOT_STDIO */

/* ----------- fill in things that have not got #define'd  ---------- */

#ifndef Fpos_t
#define Fpos_t Off_t
#endif

#ifndef EOF
#define EOF (-1)
#endif

/* This is to catch case with no stdio */
#ifndef BUFSIZ
#define BUFSIZ 1024
#endif

/* The default buffer size for the perlio buffering layer */
#ifndef PERLIOBUF_DEFAULT_BUFSIZ
#define PERLIOBUF_DEFAULT_BUFSIZ (BUFSIZ > 8192 ? BUFSIZ : 8192)
#endif

#ifndef SEEK_SET
#define SEEK_SET 0
#endif

#ifndef SEEK_CUR
#define SEEK_CUR 1
#endif

#ifndef SEEK_END
#define SEEK_END 2
#endif

#define PERLIO_DUP_CLONE	1
#define PERLIO_DUP_FD		2

/* --------------------- Now prototypes for functions --------------- */

START_EXTERN_C
#ifndef __attribute__format__
#  ifdef HASATTRIBUTE_FORMAT
#    define __attribute__format__(x,y,z) __attribute__((format(x,y,z)))
#  else
#    define __attribute__format__(x,y,z)
#  endif
#endif
#ifndef PerlIO_init
PERL_CALLCONV void PerlIO_init(pTHX);
#endif
#ifndef PerlIO_stdoutf
PERL_CALLCONV int PerlIO_stdoutf(const char *, ...)
    __attribute__format__(__printf__, 1, 2);
#endif
#ifndef PerlIO_puts
PERL_CALLCONV int PerlIO_puts(PerlIO *, const char *);
#endif
#ifndef PerlIO_open
PERL_CALLCONV PerlIO *PerlIO_open(const char *, const char *);
#endif
#ifndef PerlIO_openn
PERL_CALLCONV PerlIO *PerlIO_openn(pTHX_ const char *layers, const char *mode,
				   int fd, int imode, int perm, PerlIO *old,
				   int narg, SV **arg);
#endif
#ifndef PerlIO_eof
PERL_CALLCONV int PerlIO_eof(PerlIO *);
#endif
#ifndef PerlIO_error
PERL_CALLCONV int PerlIO_error(PerlIO *);
#endif
#ifndef PerlIO_clearerr
PERL_CALLCONV void PerlIO_clearerr(PerlIO *);
#endif
#ifndef PerlIO_getc
PERL_CALLCONV int PerlIO_getc(PerlIO *);
#endif
#ifndef PerlIO_putc
PERL_CALLCONV int PerlIO_putc(PerlIO *, int);
#endif
#ifndef PerlIO_ungetc
PERL_CALLCONV int PerlIO_ungetc(PerlIO *, int);
#endif
#ifndef PerlIO_fdopen
PERL_CALLCONV PerlIO *PerlIO_fdopen(int, const char *);
#endif
#ifndef PerlIO_importFILE
PERL_CALLCONV PerlIO *PerlIO_importFILE(FILE *, const char *);
#endif
#ifndef PerlIO_exportFILE
PERL_CALLCONV FILE *PerlIO_exportFILE(PerlIO *, const char *);
#endif
#ifndef PerlIO_findFILE
PERL_CALLCONV FILE *PerlIO_findFILE(PerlIO *);
#endif
#ifndef PerlIO_releaseFILE
PERL_CALLCONV void PerlIO_releaseFILE(PerlIO *, FILE *);
#endif
#ifndef PerlIO_read
PERL_CALLCONV SSize_t PerlIO_read(PerlIO *, void *, Size_t);
#endif
#ifndef PerlIO_unread
PERL_CALLCONV SSize_t PerlIO_unread(PerlIO *, const void *, Size_t);
#endif
#ifndef PerlIO_write
PERL_CALLCONV SSize_t PerlIO_write(PerlIO *, const void *, Size_t);
#endif
#ifndef PerlIO_setlinebuf
PERL_CALLCONV void PerlIO_setlinebuf(PerlIO *);
#endif
#ifndef PerlIO_printf
PERL_CALLCONV int PerlIO_printf(PerlIO *, const char *, ...)
    __attribute__format__(__printf__, 2, 3);
#endif
#ifndef PerlIO_vprintf
PERL_CALLCONV int PerlIO_vprintf(PerlIO *, const char *, va_list);
#endif
#ifndef PerlIO_tell
PERL_CALLCONV Off_t PerlIO_tell(PerlIO *);
#endif
#ifndef PerlIO_seek
PERL_CALLCONV int PerlIO_seek(PerlIO *, Off_t, int);
#endif
#ifndef PerlIO_rewind
PERL_CALLCONV void PerlIO_rewind(PerlIO *);
#endif
#ifndef PerlIO_has_base
PERL_CALLCONV int PerlIO_has_base(PerlIO *);
#endif
#ifndef PerlIO_has_cntptr
PERL_CALLCONV int PerlIO_has_cntptr(PerlIO *);
#endif
#ifndef PerlIO_fast_gets
PERL_CALLCONV int PerlIO_fast_gets(PerlIO *);
#endif
#ifndef PerlIO_canset_cnt
PERL_CALLCONV int PerlIO_canset_cnt(PerlIO *);
#endif
#ifndef PerlIO_get_ptr
PERL_CALLCONV STDCHAR *PerlIO_get_ptr(PerlIO *);
#endif
#ifndef PerlIO_get_cnt
PERL_CALLCONV SSize_t PerlIO_get_cnt(PerlIO *);
#endif
#ifndef PerlIO_set_cnt
PERL_CALLCONV void PerlIO_set_cnt(PerlIO *, SSize_t);
#endif
#ifndef PerlIO_set_ptrcnt
PERL_CALLCONV void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, SSize_t);
#endif
#ifndef PerlIO_get_base
PERL_CALLCONV STDCHAR *PerlIO_get_base(PerlIO *);
#endif
#ifndef PerlIO_get_bufsiz
PERL_CALLCONV SSize_t PerlIO_get_bufsiz(PerlIO *);
#endif
#ifndef PerlIO_tmpfile
PERL_CALLCONV PerlIO *PerlIO_tmpfile(void);
#endif
#ifndef PerlIO_stdin
PERL_CALLCONV PerlIO *PerlIO_stdin(void);
#endif
#ifndef PerlIO_stdout
PERL_CALLCONV PerlIO *PerlIO_stdout(void);
#endif
#ifndef PerlIO_stderr
PERL_CALLCONV PerlIO *PerlIO_stderr(void);
#endif
#ifndef PerlIO_getpos
PERL_CALLCONV int PerlIO_getpos(PerlIO *, SV *);
#endif
#ifndef PerlIO_setpos
PERL_CALLCONV int PerlIO_setpos(PerlIO *, SV *);
#endif
#ifndef PerlIO_fdupopen
PERL_CALLCONV PerlIO *PerlIO_fdupopen(pTHX_ PerlIO *, CLONE_PARAMS *, int);
#endif
#if !defined(PerlIO_modestr)
PERL_CALLCONV char *PerlIO_modestr(PerlIO *, char *buf);
#endif
#ifndef PerlIO_isutf8
PERL_CALLCONV int PerlIO_isutf8(PerlIO *);
#endif
#ifndef PerlIO_apply_layers
PERL_CALLCONV int PerlIO_apply_layers(pTHX_ PerlIO *f, const char *mode,
				      const char *names);
#endif
#ifndef PerlIO_binmode
PERL_CALLCONV int PerlIO_binmode(pTHX_ PerlIO *f, int iotype, int omode,
			  	 const char *names);
#endif
#ifndef PerlIO_getname
PERL_CALLCONV char *PerlIO_getname(PerlIO *, char *);
#endif

PERL_CALLCONV void PerlIO_destruct(pTHX);

PERL_CALLCONV int PerlIO_intmode2str(int rawmode, char *mode, int *writing);

#ifdef PERLIO_LAYERS
PERL_CALLCONV void PerlIO_cleanup(pTHX);

PERL_CALLCONV void PerlIO_debug(const char *fmt, ...)
    __attribute__format__(__printf__, 1, 2);
typedef struct PerlIO_list_s PerlIO_list_t;

#endif

END_EXTERN_C
#endif				/* _PERLIO_H */

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
@


1.11
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d16 3
a18 4
   USE_STDIO   - forces PerlIO_xxx() to be #define-d onto stdio functions.
                 This is used for x2p subdirectory and for conservative
                 builds - "just like perl5.00X used to be".
                 This dominates over the others.
a20 2
                 If USE_PERLIO is _NOT_ set
                   then USE_STDIO above will be set to be conservative.
a24 5
   One further note - the table-of-functions scheme controlled
   by PERL_IMPLICIT_SYS turns on USE_PERLIO so that iperlsys.h can
   #define PerlIO_xxx() to go via the function table, without having
   to #undef them from (say) stdio forms.

a26 8
#if defined(PERL_IMPLICIT_SYS)
#ifndef USE_PERLIO
#ifndef NETWARE
/* # define USE_PERLIO */
#endif
#endif
#endif

d32 1
a32 3
#  ifndef PERLIO_IS_STDIO
#      define PERLIO_IS_STDIO
#  endif
a55 5
#ifdef PERLIO_IS_STDIO
/* #define PerlIO_xxxx() as equivalent stdio function */
#include "perlsdio.h"
#endif				/* PERLIO_IS_STDIO */

d66 2
a67 4
/* Making the big PerlIO_funcs vtables const is good (enables placing
 * them in the const section which is good for speed, security, and
 * embeddability) but this cannot be done by default because of
 * backward compatibility. */
d76 2
a77 2
PERL_EXPORT_C void PerlIO_define_layer(pTHX_ PerlIO_funcs *tab);
PERL_EXPORT_C PerlIO_funcs *PerlIO_find_layer(pTHX_ const char *name,
d80 1
a80 1
PERL_EXPORT_C PerlIO *PerlIO_push(pTHX_ PerlIO *f, PERLIO_FUNCS_DECL(*tab),
d82 3
a84 3
PERL_EXPORT_C void PerlIO_pop(pTHX_ PerlIO *f);
PERL_EXPORT_C AV* PerlIO_get_layers(pTHX_ PerlIO *f);
PERL_EXPORT_C void PerlIO_clone(pTHX_ PerlInterpreter *proto,
a90 3
#ifndef PERLIO_IS_STDIO
/* Not using stdio _directly_ as PerlIO */

d96 1
a96 1
#   ifdef PERL_CORE
d102 7
a108 7
#       ifndef PERLIO_NOT_STDIO
#           define PERLIO_NOT_STDIO 1
#       endif
    #else
#   ifndef PERLIO_NOT_STDIO
#       define PERLIO_NOT_STDIO 0
#   endif
a130 1
#endif				/* PERLIO_IS_STDIO */
d178 1
a178 1
PERL_EXPORT_C void PerlIO_init(pTHX);
d181 1
a181 1
PERL_EXPORT_C int PerlIO_stdoutf(const char *, ...)
d185 1
a185 1
PERL_EXPORT_C int PerlIO_puts(PerlIO *, const char *);
d188 1
a188 1
PERL_EXPORT_C PerlIO *PerlIO_open(const char *, const char *);
d191 1
a191 1
PERL_EXPORT_C PerlIO *PerlIO_openn(pTHX_ const char *layers, const char *mode,
d196 1
a196 1
PERL_EXPORT_C int PerlIO_eof(PerlIO *);
d199 1
a199 1
PERL_EXPORT_C int PerlIO_error(PerlIO *);
d202 1
a202 1
PERL_EXPORT_C void PerlIO_clearerr(PerlIO *);
d205 1
a205 1
PERL_EXPORT_C int PerlIO_getc(PerlIO *);
d208 1
a208 1
PERL_EXPORT_C int PerlIO_putc(PerlIO *, int);
d211 1
a211 1
PERL_EXPORT_C int PerlIO_ungetc(PerlIO *, int);
d214 1
a214 1
PERL_EXPORT_C PerlIO *PerlIO_fdopen(int, const char *);
d217 1
a217 1
PERL_EXPORT_C PerlIO *PerlIO_importFILE(FILE *, const char *);
d220 1
a220 1
PERL_EXPORT_C FILE *PerlIO_exportFILE(PerlIO *, const char *);
d223 1
a223 1
PERL_EXPORT_C FILE *PerlIO_findFILE(PerlIO *);
d226 1
a226 1
PERL_EXPORT_C void PerlIO_releaseFILE(PerlIO *, FILE *);
d229 1
a229 1
PERL_EXPORT_C SSize_t PerlIO_read(PerlIO *, void *, Size_t);
d232 1
a232 1
PERL_EXPORT_C SSize_t PerlIO_unread(PerlIO *, const void *, Size_t);
d235 1
a235 1
PERL_EXPORT_C SSize_t PerlIO_write(PerlIO *, const void *, Size_t);
d238 1
a238 1
PERL_EXPORT_C void PerlIO_setlinebuf(PerlIO *);
d241 1
a241 1
PERL_EXPORT_C int PerlIO_printf(PerlIO *, const char *, ...)
d245 1
a245 1
PERL_EXPORT_C int PerlIO_vprintf(PerlIO *, const char *, va_list);
d248 1
a248 1
PERL_EXPORT_C Off_t PerlIO_tell(PerlIO *);
d251 1
a251 1
PERL_EXPORT_C int PerlIO_seek(PerlIO *, Off_t, int);
d254 1
a254 1
PERL_EXPORT_C void PerlIO_rewind(PerlIO *);
d257 1
a257 1
PERL_EXPORT_C int PerlIO_has_base(PerlIO *);
d260 1
a260 1
PERL_EXPORT_C int PerlIO_has_cntptr(PerlIO *);
d263 1
a263 1
PERL_EXPORT_C int PerlIO_fast_gets(PerlIO *);
d266 1
a266 1
PERL_EXPORT_C int PerlIO_canset_cnt(PerlIO *);
d269 1
a269 1
PERL_EXPORT_C STDCHAR *PerlIO_get_ptr(PerlIO *);
d272 1
a272 1
PERL_EXPORT_C SSize_t PerlIO_get_cnt(PerlIO *);
d275 1
a275 1
PERL_EXPORT_C void PerlIO_set_cnt(PerlIO *, SSize_t);
d278 1
a278 1
PERL_EXPORT_C void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, SSize_t);
d281 1
a281 1
PERL_EXPORT_C STDCHAR *PerlIO_get_base(PerlIO *);
d284 1
a284 1
PERL_EXPORT_C SSize_t PerlIO_get_bufsiz(PerlIO *);
d287 1
a287 1
PERL_EXPORT_C PerlIO *PerlIO_tmpfile(void);
d290 1
a290 1
PERL_EXPORT_C PerlIO *PerlIO_stdin(void);
d293 1
a293 1
PERL_EXPORT_C PerlIO *PerlIO_stdout(void);
d296 1
a296 1
PERL_EXPORT_C PerlIO *PerlIO_stderr(void);
d299 1
a299 1
PERL_EXPORT_C int PerlIO_getpos(PerlIO *, SV *);
d302 1
a302 1
PERL_EXPORT_C int PerlIO_setpos(PerlIO *, SV *);
d305 1
a305 1
PERL_EXPORT_C PerlIO *PerlIO_fdupopen(pTHX_ PerlIO *, CLONE_PARAMS *, int);
d307 2
a308 2
#if !defined(PerlIO_modestr) && !defined(PERLIO_IS_STDIO)
PERL_EXPORT_C char *PerlIO_modestr(PerlIO *, char *buf);
d311 1
a311 1
PERL_EXPORT_C int PerlIO_isutf8(PerlIO *);
d314 1
a314 1
PERL_EXPORT_C int PerlIO_apply_layers(pTHX_ PerlIO *f, const char *mode,
d318 1
a318 1
PERL_EXPORT_C int PerlIO_binmode(pTHX_ PerlIO *f, int iotype, int omode,
d322 1
a322 1
PERL_EXPORT_C char *PerlIO_getname(PerlIO *, char *);
d325 1
a325 1
PERL_EXPORT_C void PerlIO_destruct(pTHX);
d327 1
a327 1
PERL_EXPORT_C int PerlIO_intmode2str(int rawmode, char *mode, int *writing);
d330 1
a330 1
PERL_EXPORT_C void PerlIO_cleanup(pTHX);
d332 1
a332 1
PERL_EXPORT_C void PerlIO_debug(const char *fmt, ...)
a335 1

a341 6
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
@


1.10
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d24 1
a24 7
                 If USE_PERLIO is set
                   then there are two modes determined by USE_SFIO:

   USE_SFIO    - If set causes PerlIO_xxx() to be #define-d onto sfio functions.
                 A backward compatibility mode for some specialist applications.

                 If USE_SFIO is not set then PerlIO_xxx() are real functions
a76 5
#else				/* PERLIO_IS_STDIO */
#ifdef USE_SFIO
/* #define PerlIO_xxxx() as equivalent sfio function */
#include "perlsfio.h"
#endif				/* USE_SFIO */
d124 1
a124 1
#ifdef PERL_CORE
d130 7
a136 7
#ifndef PERLIO_NOT_STDIO
#define PERLIO_NOT_STDIO 1
#endif
#else
#ifndef PERLIO_NOT_STDIO
#define PERLIO_NOT_STDIO 0
#endif
a272 4
#ifndef PerlIO_sprintf
PERL_EXPORT_C int PerlIO_sprintf(char *, int, const char *, ...)
    __attribute__format__(__printf__, 3, 4);
#endif
d301 1
a301 1
PERL_EXPORT_C int PerlIO_get_cnt(PerlIO *);
d304 1
a304 1
PERL_EXPORT_C void PerlIO_set_cnt(PerlIO *, int);
d307 1
a307 1
PERL_EXPORT_C void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, int);
d313 1
a313 1
PERL_EXPORT_C int PerlIO_get_bufsiz(PerlIO *);
@


1.9
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@a66 5
#ifdef __BEOS__
int fseeko(FILE *stream, off_t offset, int whence);
off_t ftello(FILE *stream);
#endif

d390 1
a390 1
 * indent-tabs-mode: t
d393 1
a393 1
 * ex: set ts=8 sts=4 sw=4 noet:
@


1.8
log
@Merge in perl 5.10.1
@
text
@d28 1
a28 1
                 A backward compatability mode for some specialist applications.
d190 5
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d385 10
@


1.6
log
@merge in perl 5.8.8
@
text
@d4 1
a4 1
 *    by Larry Wall and others
a175 2

#define specialCopIO(sv) ((sv) == Nullsv)
@


1.5
log
@sync in-tree perl with 5.8.6
@
text
@d105 22
a126 8
extern void PerlIO_define_layer(pTHX_ PerlIO_funcs *tab);
extern PerlIO_funcs *PerlIO_find_layer(pTHX_ const char *name, STRLEN len,
				       int load);
extern PerlIO *PerlIO_push(pTHX_ PerlIO *f, PerlIO_funcs *tab,
			   const char *mode, SV *arg);
extern void PerlIO_pop(pTHX_ PerlIO *f);
extern AV* PerlIO_get_layers(pTHX_ PerlIO *f);
extern void PerlIO_clone(pTHX_ PerlInterpreter *proto, CLONE_PARAMS *param);
d213 5
a217 13
#ifdef CHECK_FORMAT
#define __attribute__format__(x,y,z) __attribute__((__format__(x,y,z)))
#else
#define __attribute__format__(x,y,z)
#endif
#endif
#ifndef NEXT30_NO_ATTRIBUTE
#ifndef HASATTRIBUTE		/* disable GNU-cc attribute checking? */
#ifdef  __attribute__		/* Avoid possible redefinition errors */
#undef  __attribute__
#endif
#define __attribute__(attr)
#endif
d220 1
a220 1
extern void PerlIO_init(pTHX);
d223 1
a223 1
extern int PerlIO_stdoutf(const char *, ...)
d227 1
a227 1
extern int PerlIO_puts(PerlIO *, const char *);
d230 1
a230 1
extern PerlIO *PerlIO_open(const char *, const char *);
d233 3
a235 3
extern PerlIO *PerlIO_openn(pTHX_ const char *layers, const char *mode,
			    int fd, int imode, int perm, PerlIO *old,
			    int narg, SV **arg);
d238 1
a238 1
extern int PerlIO_eof(PerlIO *);
d241 1
a241 1
extern int PerlIO_error(PerlIO *);
d244 1
a244 1
extern void PerlIO_clearerr(PerlIO *);
d247 1
a247 1
extern int PerlIO_getc(PerlIO *);
d250 1
a250 1
extern int PerlIO_putc(PerlIO *, int);
d253 1
a253 1
extern int PerlIO_ungetc(PerlIO *, int);
d256 1
a256 1
extern PerlIO *PerlIO_fdopen(int, const char *);
d259 1
a259 1
extern PerlIO *PerlIO_importFILE(FILE *, const char *);
d262 1
a262 1
extern FILE *PerlIO_exportFILE(PerlIO *, const char *);
d265 1
a265 1
extern FILE *PerlIO_findFILE(PerlIO *);
d268 1
a268 1
extern void PerlIO_releaseFILE(PerlIO *, FILE *);
d271 1
a271 1
extern SSize_t PerlIO_read(PerlIO *, void *, Size_t);
d274 1
a274 1
extern SSize_t PerlIO_unread(PerlIO *, const void *, Size_t);
d277 1
a277 1
extern SSize_t PerlIO_write(PerlIO *, const void *, Size_t);
d280 1
a280 1
extern void PerlIO_setlinebuf(PerlIO *);
d283 1
a283 1
extern int PerlIO_printf(PerlIO *, const char *, ...)
d287 1
a287 1
extern int PerlIO_sprintf(char *, int, const char *, ...)
d291 1
a291 1
extern int PerlIO_vprintf(PerlIO *, const char *, va_list);
d294 1
a294 1
extern Off_t PerlIO_tell(PerlIO *);
d297 1
a297 1
extern int PerlIO_seek(PerlIO *, Off_t, int);
d300 1
a300 1
extern void PerlIO_rewind(PerlIO *);
d303 1
a303 1
extern int PerlIO_has_base(PerlIO *);
d306 1
a306 1
extern int PerlIO_has_cntptr(PerlIO *);
d309 1
a309 1
extern int PerlIO_fast_gets(PerlIO *);
d312 1
a312 1
extern int PerlIO_canset_cnt(PerlIO *);
d315 1
a315 1
extern STDCHAR *PerlIO_get_ptr(PerlIO *);
d318 1
a318 1
extern int PerlIO_get_cnt(PerlIO *);
d321 1
a321 1
extern void PerlIO_set_cnt(PerlIO *, int);
d324 1
a324 1
extern void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, int);
d327 1
a327 1
extern STDCHAR *PerlIO_get_base(PerlIO *);
d330 1
a330 1
extern int PerlIO_get_bufsiz(PerlIO *);
d333 1
a333 1
extern PerlIO *PerlIO_tmpfile(void);
d336 1
a336 1
extern PerlIO *PerlIO_stdin(void);
d339 1
a339 1
extern PerlIO *PerlIO_stdout(void);
d342 1
a342 1
extern PerlIO *PerlIO_stderr(void);
d345 1
a345 1
extern int PerlIO_getpos(PerlIO *, SV *);
d348 1
a348 1
extern int PerlIO_setpos(PerlIO *, SV *);
d351 1
a351 1
extern PerlIO *PerlIO_fdupopen(pTHX_ PerlIO *, CLONE_PARAMS *, int);
d354 1
a354 1
extern char *PerlIO_modestr(PerlIO *, char *buf);
d357 1
a357 1
extern int PerlIO_isutf8(PerlIO *);
d360 2
a361 2
extern int PerlIO_apply_layers(pTHX_ PerlIO *f, const char *mode,
			       const char *names);
d364 2
a365 2
extern int PerlIO_binmode(pTHX_ PerlIO *f, int iotype, int omode,
			  const char *names);
d368 1
a368 1
extern char *PerlIO_getname(PerlIO *, char *);
d371 1
a371 1
extern void PerlIO_destruct(pTHX);
d373 1
a373 1
extern int PerlIO_intmode2str(int rawmode, char *mode, int *writing);
d376 1
a376 1
extern void PerlIO_cleanup(pTHX);
d378 2
a379 1
extern void PerlIO_debug(const char *fmt, ...);
@


1.4
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d15 1
a15 1
  There is a hierachy of Configure determined #define controls:
@


1.3
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 2
a4 1
 *    Copyright (c) 1997-2002, Larry Wall
d111 1
d198 7
d218 1
a218 1
    __attribute__ ((__format__(__printf__, 1, 2)));
d278 1
a278 1
    __attribute__ ((__format__(__printf__, 2, 3)));
d282 1
a282 1
    __attribute__ ((__format__(__printf__, 3, 4)));
@


1.2
log
@perl5.005_03 (stock)
@
text
@d1 370
a370 1
#include "iperlsys.h"
@


1.1
log
@perl 5.004_04
@
text
@d1 1
a1 199
#ifndef H_PERLIO
#define H_PERLIO 1

/* Clean up (or at least document) the various possible #defines.
   This section attempts to match the 5.003_03 Configure variables
   onto the 5.003_02 header file values.
   I can't figure out where USE_STDIO was supposed to be set.
   --AD
*/
#ifndef USE_PERLIO
# define PERLIO_IS_STDIO
#endif

/* Below is the 5.003_02 stuff. */
#ifdef USE_STDIO
#  ifndef PERLIO_IS_STDIO
#      define PERLIO_IS_STDIO
#  endif
#else
extern void PerlIO_init _((void));
#endif

#include "perlsdio.h"

#ifndef PERLIO_IS_STDIO
#ifdef USE_SFIO
#include "perlsfio.h"
#endif /* USE_SFIO */
#endif /* PERLIO_IS_STDIO */

#ifndef EOF
#define EOF (-1)
#endif

/* This is to catch case with no stdio */
#ifndef BUFSIZ
#define BUFSIZ 1024
#endif

#ifndef SEEK_SET
#define SEEK_SET 0
#endif

#ifndef SEEK_CUR
#define SEEK_CUR 1
#endif

#ifndef SEEK_END
#define SEEK_END 2
#endif

#ifndef PerlIO
struct _PerlIO;
#define PerlIO struct _PerlIO
#endif /* No PerlIO */

#ifndef Fpos_t
#define Fpos_t long
#endif

#ifndef NEXT30_NO_ATTRIBUTE
#ifndef HASATTRIBUTE       /* disable GNU-cc attribute checking? */
#ifdef  __attribute__      /* Avoid possible redefinition errors */
#undef  __attribute__
#endif
#define __attribute__(attr)
#endif
#endif

#ifndef PerlIO_stdoutf
extern int	PerlIO_stdoutf		_((const char *,...))
					__attribute__((format (printf, 1, 2)));
#endif
#ifndef PerlIO_puts
extern int	PerlIO_puts		_((PerlIO *,const char *));
#endif
#ifndef PerlIO_open
extern PerlIO *	PerlIO_open		_((const char *,const char *));
#endif
#ifndef PerlIO_close
extern int	PerlIO_close		_((PerlIO *));
#endif
#ifndef PerlIO_eof
extern int	PerlIO_eof		_((PerlIO *));
#endif
#ifndef PerlIO_error
extern int	PerlIO_error		_((PerlIO *));
#endif
#ifndef PerlIO_clearerr
extern void	PerlIO_clearerr		_((PerlIO *));
#endif
#ifndef PerlIO_getc
extern int	PerlIO_getc		_((PerlIO *));
#endif
#ifndef PerlIO_putc
extern int	PerlIO_putc		_((PerlIO *,int));
#endif
#ifndef PerlIO_flush
extern int	PerlIO_flush		_((PerlIO *));
#endif
#ifndef PerlIO_ungetc
extern int	PerlIO_ungetc		_((PerlIO *,int));
#endif
#ifndef PerlIO_fileno
extern int	PerlIO_fileno		_((PerlIO *));
#endif
#ifndef PerlIO_fdopen
extern PerlIO *	PerlIO_fdopen		_((int, const char *));
#endif
#ifndef PerlIO_importFILE
extern PerlIO *	PerlIO_importFILE	_((FILE *,int));
#endif
#ifndef PerlIO_exportFILE
extern FILE *	PerlIO_exportFILE	_((PerlIO *,int));
#endif
#ifndef PerlIO_findFILE
extern FILE *	PerlIO_findFILE		_((PerlIO *));
#endif
#ifndef PerlIO_releaseFILE
extern void	PerlIO_releaseFILE	_((PerlIO *,FILE *));
#endif
#ifndef PerlIO_read
extern SSize_t	PerlIO_read		_((PerlIO *,void *,Size_t));
#endif
#ifndef PerlIO_write
extern SSize_t	PerlIO_write		_((PerlIO *,const void *,Size_t));
#endif
#ifndef PerlIO_setlinebuf
extern void	PerlIO_setlinebuf	_((PerlIO *));
#endif
#ifndef PerlIO_printf
extern int	PerlIO_printf		_((PerlIO *, const char *,...))
					__attribute__((format (printf, 2, 3)));
#endif
#ifndef PerlIO_sprintf
extern int	PerlIO_sprintf		_((char *, int, const char *,...))
					__attribute__((format (printf, 3, 4)));
#endif
#ifndef PerlIO_vprintf
extern int	PerlIO_vprintf		_((PerlIO *, const char *, va_list));
#endif
#ifndef PerlIO_tell
extern long	PerlIO_tell		_((PerlIO *));
#endif
#ifndef PerlIO_seek
extern int	PerlIO_seek		_((PerlIO *,off_t,int));
#endif
#ifndef PerlIO_rewind
extern void	PerlIO_rewind		_((PerlIO *));
#endif
#ifndef PerlIO_has_base
extern int	PerlIO_has_base		_((PerlIO *));
#endif
#ifndef PerlIO_has_cntptr
extern int	PerlIO_has_cntptr	_((PerlIO *));
#endif
#ifndef PerlIO_fast_gets
extern int	PerlIO_fast_gets	_((PerlIO *));
#endif
#ifndef PerlIO_canset_cnt
extern int	PerlIO_canset_cnt	_((PerlIO *));
#endif
#ifndef PerlIO_get_ptr
extern STDCHAR * PerlIO_get_ptr		_((PerlIO *));
#endif
#ifndef PerlIO_get_cnt
extern int	PerlIO_get_cnt		_((PerlIO *));
#endif
#ifndef PerlIO_set_cnt
extern void	PerlIO_set_cnt		_((PerlIO *,int));
#endif
#ifndef PerlIO_set_ptrcnt
extern void	PerlIO_set_ptrcnt	_((PerlIO *,STDCHAR *,int));
#endif
#ifndef PerlIO_get_base
extern STDCHAR * PerlIO_get_base	_((PerlIO *));
#endif
#ifndef PerlIO_get_bufsiz
extern int	PerlIO_get_bufsiz	_((PerlIO *));
#endif
#ifndef PerlIO_tmpfile
extern PerlIO *	PerlIO_tmpfile		_((void));
#endif
#ifndef PerlIO_stdin
extern PerlIO *	PerlIO_stdin	_((void));
#endif
#ifndef PerlIO_stdout
extern PerlIO *	PerlIO_stdout	_((void));
#endif
#ifndef PerlIO_stderr
extern PerlIO *	PerlIO_stderr	_((void));
#endif
#ifndef PerlIO_getpos
extern int	PerlIO_getpos		_((PerlIO *,Fpos_t *));
#endif
#ifndef PerlIO_setpos
extern int	PerlIO_setpos		_((PerlIO *,const Fpos_t *));
#endif
#endif /* Include guard */
@


1.1.1.1
log
@perl5.005_03
@
text
@d1 199
a199 1
#include "iperlsys.h"
@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 370
/*    perlio.h
 *
 *    Copyright (c) 1997-2002, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifndef _PERLIO_H
#define _PERLIO_H
/*
  Interface for perl to IO functions.
  There is a hierachy of Configure determined #define controls:
   USE_STDIO   - forces PerlIO_xxx() to be #define-d onto stdio functions.
                 This is used for x2p subdirectory and for conservative
                 builds - "just like perl5.00X used to be".
                 This dominates over the others.

   USE_PERLIO  - The primary Configure variable that enables PerlIO.
                 If USE_PERLIO is _NOT_ set
                   then USE_STDIO above will be set to be conservative.
                 If USE_PERLIO is set
                   then there are two modes determined by USE_SFIO:

   USE_SFIO    - If set causes PerlIO_xxx() to be #define-d onto sfio functions.
                 A backward compatability mode for some specialist applications.

                 If USE_SFIO is not set then PerlIO_xxx() are real functions
                 defined in perlio.c which implement extra functionality
                 required for utf8 support.

   One further note - the table-of-functions scheme controlled
   by PERL_IMPLICIT_SYS turns on USE_PERLIO so that iperlsys.h can
   #define PerlIO_xxx() to go via the function table, without having
   to #undef them from (say) stdio forms.

*/

#if defined(PERL_IMPLICIT_SYS)
#ifndef USE_PERLIO
#ifndef NETWARE
/* # define USE_PERLIO */
#endif
#endif
#endif

#ifndef USE_PERLIO
# define USE_STDIO
#endif

#ifdef USE_STDIO
#  ifndef PERLIO_IS_STDIO
#      define PERLIO_IS_STDIO
#  endif
#endif

/* --------------------  End of Configure controls ---------------------------- */

/*
 * Although we may not want stdio to be used including <stdio.h> here
 * avoids issues where stdio.h has strange side effects
 */
#include <stdio.h>

#ifdef __BEOS__
int fseeko(FILE *stream, off_t offset, int whence);
off_t ftello(FILE *stream);
#endif

#if defined(USE_64_BIT_STDIO) && defined(HAS_FTELLO) && !defined(USE_FTELL64)
#define ftell ftello
#endif

#if defined(USE_64_BIT_STDIO) && defined(HAS_FSEEKO) && !defined(USE_FSEEK64)
#define fseek fseeko
#endif

/* BS2000 includes are sometimes a bit non standard :-( */
#if defined(POSIX_BC) && defined(O_BINARY) && !defined(O_TEXT)
#undef O_BINARY
#endif

#ifdef PERLIO_IS_STDIO
/* #define PerlIO_xxxx() as equivalent stdio function */
#include "perlsdio.h"
#else				/* PERLIO_IS_STDIO */
#ifdef USE_SFIO
/* #define PerlIO_xxxx() as equivalent sfio function */
#include "perlsfio.h"
#endif				/* USE_SFIO */
#endif				/* PERLIO_IS_STDIO */

#ifndef PerlIO
/* ----------- PerlIO implementation ---------- */
/* PerlIO not #define-d to something else - define the implementation */

typedef struct _PerlIO PerlIOl;
typedef struct _PerlIO_funcs PerlIO_funcs;
typedef PerlIOl *PerlIO;
#define PerlIO PerlIO
#define PERLIO_LAYERS 1

extern void PerlIO_define_layer(pTHX_ PerlIO_funcs *tab);
extern PerlIO_funcs *PerlIO_find_layer(pTHX_ const char *name, STRLEN len,
				       int load);
extern PerlIO *PerlIO_push(pTHX_ PerlIO *f, PerlIO_funcs *tab,
			   const char *mode, SV *arg);
extern void PerlIO_pop(pTHX_ PerlIO *f);
extern void PerlIO_clone(pTHX_ PerlInterpreter *proto, CLONE_PARAMS *param);

#endif				/* PerlIO */

/* ----------- End of implementation choices  ---------- */

#ifndef PERLIO_IS_STDIO
/* Not using stdio _directly_ as PerlIO */

/* We now need to determine  what happens if source trys to use stdio.
 * There are three cases based on PERLIO_NOT_STDIO which XS code
 * can set how it wants.
 */

#ifdef PERL_CORE
/* Make a choice for perl core code
   - currently this is set to try and catch lingering raw stdio calls.
     This is a known issue with some non UNIX ports which still use
     "native" stdio features.
*/
#ifndef PERLIO_NOT_STDIO
#define PERLIO_NOT_STDIO 1
#endif
#else
#ifndef PERLIO_NOT_STDIO
#define PERLIO_NOT_STDIO 0
#endif
#endif

#ifdef PERLIO_NOT_STDIO
#if PERLIO_NOT_STDIO
/*
 * PERLIO_NOT_STDIO #define'd as 1
 * Case 1: Strong denial of stdio - make all stdio calls (we can think of) errors
 */
#include "nostdio.h"
#else				/* if PERLIO_NOT_STDIO */
/*
 * PERLIO_NOT_STDIO #define'd as 0
 * Case 2: Declares that both PerlIO and stdio can be used
 */
#endif				/* if PERLIO_NOT_STDIO */
#else				/* ifdef PERLIO_NOT_STDIO */
/*
 * PERLIO_NOT_STDIO not defined
 * Case 3: Try and fake stdio calls as PerlIO calls
 */
#include "fakesdio.h"
#endif				/* ifndef PERLIO_NOT_STDIO */
#endif				/* PERLIO_IS_STDIO */

#define specialCopIO(sv) ((sv) == Nullsv)

/* ----------- fill in things that have not got #define'd  ---------- */

#ifndef Fpos_t
#define Fpos_t Off_t
#endif

#ifndef EOF
#define EOF (-1)
#endif

/* This is to catch case with no stdio */
#ifndef BUFSIZ
#define BUFSIZ 1024
#endif

#ifndef SEEK_SET
#define SEEK_SET 0
#endif

#ifndef SEEK_CUR
#define SEEK_CUR 1
#endif

#ifndef SEEK_END
#define SEEK_END 2
#endif

#define PERLIO_DUP_CLONE	1
#define PERLIO_DUP_FD		2

/* --------------------- Now prototypes for functions --------------- */

START_EXTERN_C
#ifndef NEXT30_NO_ATTRIBUTE
#ifndef HASATTRIBUTE		/* disable GNU-cc attribute checking? */
#ifdef  __attribute__		/* Avoid possible redefinition errors */
#undef  __attribute__
#endif
#define __attribute__(attr)
#endif
#endif
#ifndef PerlIO_init
extern void PerlIO_init(pTHX);
#endif
#ifndef PerlIO_stdoutf
extern int PerlIO_stdoutf(const char *, ...)
    __attribute__ ((__format__(__printf__, 1, 2)));
#endif
#ifndef PerlIO_puts
extern int PerlIO_puts(PerlIO *, const char *);
#endif
#ifndef PerlIO_open
extern PerlIO *PerlIO_open(const char *, const char *);
#endif
#ifndef PerlIO_openn
extern PerlIO *PerlIO_openn(pTHX_ const char *layers, const char *mode,
			    int fd, int imode, int perm, PerlIO *old,
			    int narg, SV **arg);
#endif
#ifndef PerlIO_eof
extern int PerlIO_eof(PerlIO *);
#endif
#ifndef PerlIO_error
extern int PerlIO_error(PerlIO *);
#endif
#ifndef PerlIO_clearerr
extern void PerlIO_clearerr(PerlIO *);
#endif
#ifndef PerlIO_getc
extern int PerlIO_getc(PerlIO *);
#endif
#ifndef PerlIO_putc
extern int PerlIO_putc(PerlIO *, int);
#endif
#ifndef PerlIO_ungetc
extern int PerlIO_ungetc(PerlIO *, int);
#endif
#ifndef PerlIO_fdopen
extern PerlIO *PerlIO_fdopen(int, const char *);
#endif
#ifndef PerlIO_importFILE
extern PerlIO *PerlIO_importFILE(FILE *, const char *);
#endif
#ifndef PerlIO_exportFILE
extern FILE *PerlIO_exportFILE(PerlIO *, const char *);
#endif
#ifndef PerlIO_findFILE
extern FILE *PerlIO_findFILE(PerlIO *);
#endif
#ifndef PerlIO_releaseFILE
extern void PerlIO_releaseFILE(PerlIO *, FILE *);
#endif
#ifndef PerlIO_read
extern SSize_t PerlIO_read(PerlIO *, void *, Size_t);
#endif
#ifndef PerlIO_unread
extern SSize_t PerlIO_unread(PerlIO *, const void *, Size_t);
#endif
#ifndef PerlIO_write
extern SSize_t PerlIO_write(PerlIO *, const void *, Size_t);
#endif
#ifndef PerlIO_setlinebuf
extern void PerlIO_setlinebuf(PerlIO *);
#endif
#ifndef PerlIO_printf
extern int PerlIO_printf(PerlIO *, const char *, ...)
    __attribute__ ((__format__(__printf__, 2, 3)));
#endif
#ifndef PerlIO_sprintf
extern int PerlIO_sprintf(char *, int, const char *, ...)
    __attribute__ ((__format__(__printf__, 3, 4)));
#endif
#ifndef PerlIO_vprintf
extern int PerlIO_vprintf(PerlIO *, const char *, va_list);
#endif
#ifndef PerlIO_tell
extern Off_t PerlIO_tell(PerlIO *);
#endif
#ifndef PerlIO_seek
extern int PerlIO_seek(PerlIO *, Off_t, int);
#endif
#ifndef PerlIO_rewind
extern void PerlIO_rewind(PerlIO *);
#endif
#ifndef PerlIO_has_base
extern int PerlIO_has_base(PerlIO *);
#endif
#ifndef PerlIO_has_cntptr
extern int PerlIO_has_cntptr(PerlIO *);
#endif
#ifndef PerlIO_fast_gets
extern int PerlIO_fast_gets(PerlIO *);
#endif
#ifndef PerlIO_canset_cnt
extern int PerlIO_canset_cnt(PerlIO *);
#endif
#ifndef PerlIO_get_ptr
extern STDCHAR *PerlIO_get_ptr(PerlIO *);
#endif
#ifndef PerlIO_get_cnt
extern int PerlIO_get_cnt(PerlIO *);
#endif
#ifndef PerlIO_set_cnt
extern void PerlIO_set_cnt(PerlIO *, int);
#endif
#ifndef PerlIO_set_ptrcnt
extern void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, int);
#endif
#ifndef PerlIO_get_base
extern STDCHAR *PerlIO_get_base(PerlIO *);
#endif
#ifndef PerlIO_get_bufsiz
extern int PerlIO_get_bufsiz(PerlIO *);
#endif
#ifndef PerlIO_tmpfile
extern PerlIO *PerlIO_tmpfile(void);
#endif
#ifndef PerlIO_stdin
extern PerlIO *PerlIO_stdin(void);
#endif
#ifndef PerlIO_stdout
extern PerlIO *PerlIO_stdout(void);
#endif
#ifndef PerlIO_stderr
extern PerlIO *PerlIO_stderr(void);
#endif
#ifndef PerlIO_getpos
extern int PerlIO_getpos(PerlIO *, SV *);
#endif
#ifndef PerlIO_setpos
extern int PerlIO_setpos(PerlIO *, SV *);
#endif
#ifndef PerlIO_fdupopen
extern PerlIO *PerlIO_fdupopen(pTHX_ PerlIO *, CLONE_PARAMS *, int);
#endif
#if !defined(PerlIO_modestr) && !defined(PERLIO_IS_STDIO)
extern char *PerlIO_modestr(PerlIO *, char *buf);
#endif
#ifndef PerlIO_isutf8
extern int PerlIO_isutf8(PerlIO *);
#endif
#ifndef PerlIO_apply_layers
extern int PerlIO_apply_layers(pTHX_ PerlIO *f, const char *mode,
			       const char *names);
#endif
#ifndef PerlIO_binmode
extern int PerlIO_binmode(pTHX_ PerlIO *f, int iotype, int omode,
			  const char *names);
#endif
#ifndef PerlIO_getname
extern char *PerlIO_getname(PerlIO *, char *);
#endif

extern void PerlIO_destruct(pTHX);

extern int PerlIO_intmode2str(int rawmode, char *mode, int *writing);

#ifdef PERLIO_LAYERS
extern void PerlIO_cleanup(pTHX);

extern void PerlIO_debug(const char *fmt, ...);
typedef struct PerlIO_list_s PerlIO_list_t;


#endif

END_EXTERN_C
#endif				/* _PERLIO_H */
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 2
 *    Copyright (C) 1996, 1997, 1999, 2000, 2001, 2002, 2003,
 *    by Larry Wall and others
a109 1
extern AV* PerlIO_get_layers(pTHX_ PerlIO *f);
a195 7
#ifndef __attribute__format__
#ifdef CHECK_FORMAT
#define __attribute__format__(x,y,z) __attribute__((__format__(x,y,z)))
#else
#define __attribute__format__(x,y,z)
#endif
#endif
d209 1
a209 1
    __attribute__format__(__printf__, 1, 2);
d269 1
a269 1
    __attribute__format__(__printf__, 2, 3);
d273 1
a273 1
    __attribute__format__(__printf__, 3, 4);
@


1.1.1.4
log
@perl 5.8.6 from CPAN
@
text
@d15 1
a15 1
  There is a hierarchy of Configure determined #define controls:
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d105 8
a112 22
/* Making the big PerlIO_funcs vtables const is good (enables placing
 * them in the const section which is good for speed, security, and
 * embeddability) but this cannot be done by default because of
 * backward compatibility. */
#ifdef PERLIO_FUNCS_CONST
#define PERLIO_FUNCS_DECL(funcs) const PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (PerlIO_funcs*)(funcs)
#else
#define PERLIO_FUNCS_DECL(funcs) PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (funcs)
#endif

PERL_EXPORT_C void PerlIO_define_layer(pTHX_ PerlIO_funcs *tab);
PERL_EXPORT_C PerlIO_funcs *PerlIO_find_layer(pTHX_ const char *name,
                                              STRLEN len,
				              int load);
PERL_EXPORT_C PerlIO *PerlIO_push(pTHX_ PerlIO *f, PERLIO_FUNCS_DECL(*tab),
			          const char *mode, SV *arg);
PERL_EXPORT_C void PerlIO_pop(pTHX_ PerlIO *f);
PERL_EXPORT_C AV* PerlIO_get_layers(pTHX_ PerlIO *f);
PERL_EXPORT_C void PerlIO_clone(pTHX_ PerlInterpreter *proto,
                                CLONE_PARAMS *param);
d199 13
a211 5
#  ifdef HASATTRIBUTE_FORMAT
#    define __attribute__format__(x,y,z) __attribute__((format(x,y,z)))
#  else
#    define __attribute__format__(x,y,z)
#  endif
d214 1
a214 1
PERL_EXPORT_C void PerlIO_init(pTHX);
d217 1
a217 1
PERL_EXPORT_C int PerlIO_stdoutf(const char *, ...)
d221 1
a221 1
PERL_EXPORT_C int PerlIO_puts(PerlIO *, const char *);
d224 1
a224 1
PERL_EXPORT_C PerlIO *PerlIO_open(const char *, const char *);
d227 3
a229 3
PERL_EXPORT_C PerlIO *PerlIO_openn(pTHX_ const char *layers, const char *mode,
				   int fd, int imode, int perm, PerlIO *old,
				   int narg, SV **arg);
d232 1
a232 1
PERL_EXPORT_C int PerlIO_eof(PerlIO *);
d235 1
a235 1
PERL_EXPORT_C int PerlIO_error(PerlIO *);
d238 1
a238 1
PERL_EXPORT_C void PerlIO_clearerr(PerlIO *);
d241 1
a241 1
PERL_EXPORT_C int PerlIO_getc(PerlIO *);
d244 1
a244 1
PERL_EXPORT_C int PerlIO_putc(PerlIO *, int);
d247 1
a247 1
PERL_EXPORT_C int PerlIO_ungetc(PerlIO *, int);
d250 1
a250 1
PERL_EXPORT_C PerlIO *PerlIO_fdopen(int, const char *);
d253 1
a253 1
PERL_EXPORT_C PerlIO *PerlIO_importFILE(FILE *, const char *);
d256 1
a256 1
PERL_EXPORT_C FILE *PerlIO_exportFILE(PerlIO *, const char *);
d259 1
a259 1
PERL_EXPORT_C FILE *PerlIO_findFILE(PerlIO *);
d262 1
a262 1
PERL_EXPORT_C void PerlIO_releaseFILE(PerlIO *, FILE *);
d265 1
a265 1
PERL_EXPORT_C SSize_t PerlIO_read(PerlIO *, void *, Size_t);
d268 1
a268 1
PERL_EXPORT_C SSize_t PerlIO_unread(PerlIO *, const void *, Size_t);
d271 1
a271 1
PERL_EXPORT_C SSize_t PerlIO_write(PerlIO *, const void *, Size_t);
d274 1
a274 1
PERL_EXPORT_C void PerlIO_setlinebuf(PerlIO *);
d277 1
a277 1
PERL_EXPORT_C int PerlIO_printf(PerlIO *, const char *, ...)
d281 1
a281 1
PERL_EXPORT_C int PerlIO_sprintf(char *, int, const char *, ...)
d285 1
a285 1
PERL_EXPORT_C int PerlIO_vprintf(PerlIO *, const char *, va_list);
d288 1
a288 1
PERL_EXPORT_C Off_t PerlIO_tell(PerlIO *);
d291 1
a291 1
PERL_EXPORT_C int PerlIO_seek(PerlIO *, Off_t, int);
d294 1
a294 1
PERL_EXPORT_C void PerlIO_rewind(PerlIO *);
d297 1
a297 1
PERL_EXPORT_C int PerlIO_has_base(PerlIO *);
d300 1
a300 1
PERL_EXPORT_C int PerlIO_has_cntptr(PerlIO *);
d303 1
a303 1
PERL_EXPORT_C int PerlIO_fast_gets(PerlIO *);
d306 1
a306 1
PERL_EXPORT_C int PerlIO_canset_cnt(PerlIO *);
d309 1
a309 1
PERL_EXPORT_C STDCHAR *PerlIO_get_ptr(PerlIO *);
d312 1
a312 1
PERL_EXPORT_C int PerlIO_get_cnt(PerlIO *);
d315 1
a315 1
PERL_EXPORT_C void PerlIO_set_cnt(PerlIO *, int);
d318 1
a318 1
PERL_EXPORT_C void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, int);
d321 1
a321 1
PERL_EXPORT_C STDCHAR *PerlIO_get_base(PerlIO *);
d324 1
a324 1
PERL_EXPORT_C int PerlIO_get_bufsiz(PerlIO *);
d327 1
a327 1
PERL_EXPORT_C PerlIO *PerlIO_tmpfile(void);
d330 1
a330 1
PERL_EXPORT_C PerlIO *PerlIO_stdin(void);
d333 1
a333 1
PERL_EXPORT_C PerlIO *PerlIO_stdout(void);
d336 1
a336 1
PERL_EXPORT_C PerlIO *PerlIO_stderr(void);
d339 1
a339 1
PERL_EXPORT_C int PerlIO_getpos(PerlIO *, SV *);
d342 1
a342 1
PERL_EXPORT_C int PerlIO_setpos(PerlIO *, SV *);
d345 1
a345 1
PERL_EXPORT_C PerlIO *PerlIO_fdupopen(pTHX_ PerlIO *, CLONE_PARAMS *, int);
d348 1
a348 1
PERL_EXPORT_C char *PerlIO_modestr(PerlIO *, char *buf);
d351 1
a351 1
PERL_EXPORT_C int PerlIO_isutf8(PerlIO *);
d354 2
a355 2
PERL_EXPORT_C int PerlIO_apply_layers(pTHX_ PerlIO *f, const char *mode,
				      const char *names);
d358 2
a359 2
PERL_EXPORT_C int PerlIO_binmode(pTHX_ PerlIO *f, int iotype, int omode,
			  	 const char *names);
d362 1
a362 1
PERL_EXPORT_C char *PerlIO_getname(PerlIO *, char *);
d365 1
a365 1
PERL_EXPORT_C void PerlIO_destruct(pTHX);
d367 1
a367 1
PERL_EXPORT_C int PerlIO_intmode2str(int rawmode, char *mode, int *writing);
d370 1
a370 1
PERL_EXPORT_C void PerlIO_cleanup(pTHX);
d372 1
a372 2
PERL_EXPORT_C void PerlIO_debug(const char *fmt, ...)
    __attribute__format__(__printf__, 1, 2);
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d4 1
a4 1
 *    2004, 2005, 2006, 2007, by Larry Wall and others
d176 2
@


1.1.1.7
log
@import perl 5.10.1
@
text
@a384 10

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 *
 * ex: set ts=8 sts=4 sw=4 noet:
 */
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d28 1
a28 1
                 A backward compatibility mode for some specialist applications.
a189 5
#endif

/* The default buffer size for the perlio buffering layer */
#ifndef PERLIOBUF_DEFAULT_BUFSIZ
#define PERLIOBUF_DEFAULT_BUFSIZ (BUFSIZ > 8192 ? BUFSIZ : 8192)
@


1.1.1.9
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d67 5
d395 1
a395 1
 * indent-tabs-mode: nil
d398 1
a398 1
 * ex: set ts=8 sts=4 sw=4 et:
@


1.1.1.10
log
@Import perl-5.20.1
@
text
@d24 7
a30 1
                 PerlIO_xxx() are real functions
d83 5
d135 1
a135 1
#   ifdef PERL_CORE
d141 7
a147 7
#       ifndef PERLIO_NOT_STDIO
#           define PERLIO_NOT_STDIO 1
#       endif
    #else
#   ifndef PERLIO_NOT_STDIO
#       define PERLIO_NOT_STDIO 0
#   endif
d284 4
d316 1
a316 1
PERL_EXPORT_C SSize_t PerlIO_get_cnt(PerlIO *);
d319 1
a319 1
PERL_EXPORT_C void PerlIO_set_cnt(PerlIO *, SSize_t);
d322 1
a322 1
PERL_EXPORT_C void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, SSize_t);
d328 1
a328 1
PERL_EXPORT_C SSize_t PerlIO_get_bufsiz(PerlIO *);
@


