head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.6.0.10
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.4
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.6
	OPENBSD_5_8_BASE:1.1.1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.2
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.53;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2008.09.29.17.18.07;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.07;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.10.33;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.48.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.06.30;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.58.46;	author afresh1;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.17.20.52.38;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@/* -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 115 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 3:
#line 119 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			}
    break;

  case 4:
#line 125 "perly.y"
    {
			  parser->expect = XTERM;
			}
    break;

  case 5:
#line 129 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 6:
#line 134 "perly.y"
    {
			  parser->expect = XBLOCK;
			}
    break;

  case 7:
#line 138 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 8:
#line 146 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 9:
#line 150 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 10:
#line 158 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 11:
#line 162 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 12:
#line 170 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 13:
#line 174 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 14:
#line 182 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 15:
#line 190 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			}
    break;

  case 16:
#line 197 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; }
    break;

  case 17:
#line 202 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 18:
#line 209 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; }
    break;

  case 19:
#line 215 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 20:
#line 217 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 21:
#line 226 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 22:
#line 228 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 23:
#line 237 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval) ? newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval)) : NULL;
			}
    break;

  case 24:
#line 241 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 25:
#line 245 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 26:
#line 249 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 27:
#line 256 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 28:
#line 258 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv))) {
			      pad_add_weakref(fmtcv);
			  }
			  parser->parsed_sub = 1;
			}
    break;

  case 29:
#line 268 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}
    break;

  case 30:
#line 290 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (7)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			  ;
			  (yyval.opval) = (OP*)NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 31:
#line 301 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}
    break;

  case 32:
#line 323 "perly.y"
    {
			  OP *body;
			  if (parser->copline > (line_t)(ps[(8) - (10)].val.ival))
			      parser->copline = (line_t)(ps[(8) - (10)].val.ival);
			  body = block_end((ps[(5) - (10)].val.ival),
				op_append_list(OP_LINESEQ, (ps[(6) - (10)].val.opval), (ps[(9) - (10)].val.opval)));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (10)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			      : newMYSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			  ;
			  (yyval.opval) = (OP*)NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 33:
#line 340 "perly.y"
    {
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
			}
    break;

  case 34:
#line 347 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
    break;

  case 35:
#line 349 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[(1) - (7)].val.ival), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = (OP*)NULL;
			}
    break;

  case 36:
#line 356 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 37:
#line 362 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
                              newCONDOP(0, (ps[(4) - (7)].val.opval), (ps[(7) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval))));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 38:
#line 368 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)), 0));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			}
    break;

  case 39:
#line 373 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
    break;

  case 40:
#line 375 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
    break;

  case 41:
#line 377 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 42:
#line 384 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 43:
#line 391 "perly.y"
    { parser->expect = XTERM; }
    break;

  case 44:
#line 393 "perly.y"
    { parser->expect = XTERM; }
    break;

  case 45:
#line 396 "perly.y"
    {
			  OP *initop = (ps[(4) - (13)].val.opval);
			  OP *forop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      scalar((ps[(7) - (13)].val.opval)), (ps[(13) - (13)].val.opval), (ps[(11) - (13)].val.opval), (ps[(10) - (13)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[(3) - (13)].val.ival), forop);
			  parser->copline = (line_t)(ps[(1) - (13)].val.ival);
			}
    break;

  case 46:
#line 411 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (9)].val.ival), newFOROP(0, (ps[(4) - (9)].val.opval), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 47:
#line 416 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(4) - (8)].val.ival), newFOROP(0,
				      op_lvalue((ps[(2) - (8)].val.opval), OP_ENTERLOOP), (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 48:
#line 422 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(5) - (5)].val.opval)); }
    break;

  case 49:
#line 424 "perly.y"
    {
			  (yyval.opval) = block_end(
				(ps[(4) - (11)].val.ival),
				newFOROP(0,
					 op_lvalue(
					    newUNOP(OP_REFGEN, 0,
						    (ps[(6) - (11)].val.opval)),
					    OP_ENTERLOOP),
					 (ps[(8) - (11)].val.opval), (ps[(10) - (11)].val.opval), (ps[(11) - (11)].val.opval))
			  );
			  parser->copline = (line_t)(ps[(1) - (11)].val.ival);
			}
    break;

  case 50:
#line 437 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(5) - (9)].val.ival), newFOROP(
				0, op_lvalue(newUNOP(OP_REFGEN, 0,
						     (ps[(3) - (9)].val.opval)),
					     OP_ENTERLOOP), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 51:
#line 445 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 52:
#line 451 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			}
    break;

  case 53:
#line 457 "perly.y"
    {
			  package((ps[(3) - (5)].val.opval));
			  if ((ps[(2) - (5)].val.opval)) {
			      package_version((ps[(2) - (5)].val.opval));
			  }
			}
    break;

  case 54:
#line 464 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), (OP*)NULL, 0);
			  if (parser->copline > (line_t)(ps[(4) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(4) - (8)].val.ival);
			}
    break;

  case 55:
#line 472 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			}
    break;

  case 56:
#line 476 "perly.y"
    {
			  (yyval.opval) = (OP*)NULL;
			  parser->copline = NOLINE;
			}
    break;

  case 57:
#line 484 "perly.y"
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
			      list = (ps[(1) - (2)].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			}
    break;

  case 58:
#line 501 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 59:
#line 503 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
    break;

  case 60:
#line 508 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 61:
#line 510 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 62:
#line 512 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 63:
#line 514 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 64:
#line 516 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); }
    break;

  case 65:
#line 518 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

  case 66:
#line 520 "perly.y"
    { (yyval.opval) = newFOROP(0, (OP*)NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), (OP*)NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); }
    break;

  case 67:
#line 523 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
    break;

  case 68:
#line 528 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 69:
#line 530 "perly.y"
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			}
    break;

  case 70:
#line 535 "perly.y"
    { parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 71:
#line 545 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 72:
#line 547 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); }
    break;

  case 73:
#line 552 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }
    break;

  case 74:
#line 558 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 76:
#line 564 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; }
    break;

  case 78:
#line 572 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 79:
#line 577 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

  case 80:
#line 581 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

  case 81:
#line 584 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 82:
#line 585 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 83:
#line 589 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

  case 84:
#line 595 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); }
    break;

  case 85:
#line 600 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

  case 88:
#line 611 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 90:
#line 617 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 91:
#line 619 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 92:
#line 621 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 93:
#line 626 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 94:
#line 628 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 95:
#line 633 "perly.y"
    {
			  /* We shouldn't get here otherwise */
			  assert(FEATURE_SIGNATURES_IS_ENABLED);

			  Perl_ck_warner_d(aTHX_
				packWARN(WARN_EXPERIMENTAL__SIGNATURES),
				"The signatures feature is experimental");
			  (yyval.opval) = parse_subsignature();
			}
    break;

  case 96:
#line 643 "perly.y"
    {
			  (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(2) - (3)].val.opval),
				newSTATEOP(0, NULL, sawparens(newNULLLIST())));
			  parser->expect = XATTRBLOCK;
			}
    break;

  case 98:
#line 652 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 99:
#line 657 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 100:
#line 659 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 101:
#line 661 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 103:
#line 667 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
    break;

  case 104:
#line 669 "perly.y"
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			}
    break;

  case 106:
#line 678 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			}
    break;

  case 107:
#line 682 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			}
    break;

  case 108:
#line 686 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			}
    break;

  case 109:
#line 692 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			}
    break;

  case 110:
#line 697 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			}
    break;

  case 111:
#line 703 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			}
    break;

  case 112:
#line 709 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 113:
#line 711 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

  case 114:
#line 713 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, (OP*)NULL, (ps[(3) - (3)].val.opval)); }
    break;

  case 115:
#line 716 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			}
    break;

  case 118:
#line 731 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); }
    break;

  case 119:
#line 733 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			}
    break;

  case 120:
#line 736 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			}
    break;

  case 121:
#line 741 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			}
    break;

  case 122:
#line 746 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			}
    break;

  case 123:
#line 749 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); }
    break;

  case 124:
#line 753 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); }
    break;

  case 125:
#line 757 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval)))); }
    break;

  case 126:
#line 760 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval))))); }
    break;

  case 127:
#line 765 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval))))); }
    break;

  case 128:
#line 769 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval)))); }
    break;

  case 129:
#line 772 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); }
    break;

  case 130:
#line 774 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); }
    break;

  case 131:
#line 776 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), (OP*)NULL); }
    break;

  case 132:
#line 781 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); }
    break;

  case 133:
#line 783 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 134:
#line 785 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			}
    break;

  case 135:
#line 790 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 136:
#line 792 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 137:
#line 794 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 138:
#line 796 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 139:
#line 798 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 140:
#line 800 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 141:
#line 802 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

  case 142:
#line 804 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 143:
#line 806 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 144:
#line 808 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 145:
#line 810 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

  case 146:
#line 815 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 147:
#line 817 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 148:
#line 820 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 149:
#line 822 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 150:
#line 824 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); }
    break;

  case 151:
#line 827 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));}
    break;

  case 152:
#line 830 "perly.y"
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
			}
    break;

  case 153:
#line 841 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); }
    break;

  case 154:
#line 844 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); }
    break;

  case 155:
#line 851 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); }
    break;

  case 156:
#line 853 "perly.y"
    { (yyval.opval) = newANONLIST((OP*)NULL);}
    break;

  case 157:
#line 855 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); }
    break;

  case 158:
#line 857 "perly.y"
    { (yyval.opval) = newANONHASH((OP*)NULL); }
    break;

  case 159:
#line 859 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

  case 160:
#line 862 "perly.y"
    {
			  OP *body;
			  if (parser->copline > (line_t)(ps[(6) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(6) - (8)].val.ival);
			  body = block_end((ps[(3) - (8)].val.ival),
				op_append_list(OP_LINESEQ, (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval)));
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (8)].val.ival), NULL, (ps[(5) - (8)].val.opval), body);
			}
    break;

  case 161:
#line 876 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));}
    break;

  case 162:
#line 878 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));}
    break;

  case 167:
#line 886 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

  case 168:
#line 888 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 169:
#line 890 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 170:
#line 892 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
    break;

  case 171:
#line 894 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
    break;

  case 172:
#line 896 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 173:
#line 898 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
    break;

  case 174:
#line 900 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 175:
#line 902 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 176:
#line 904 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 177:
#line 906 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 178:
#line 908 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
    break;

  case 179:
#line 910 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 180:
#line 912 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 181:
#line 922 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 182:
#line 932 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 183:
#line 942 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

  case 184:
#line 952 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 185:
#line 954 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 186:
#line 956 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			}
    break;

  case 187:
#line 959 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			}
    break;

  case 188:
#line 964 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			}
    break;

  case 189:
#line 968 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 190:
#line 970 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 191:
#line 972 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 192:
#line 974 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); }
    break;

  case 193:
#line 977 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); }
    break;

  case 194:
#line 979 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }
    break;

  case 195:
#line 982 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
    break;

  case 196:
#line 984 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

  case 197:
#line 986 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
    break;

  case 198:
#line 988 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 199:
#line 990 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 200:
#line 992 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); }
    break;

  case 201:
#line 994 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); }
    break;

  case 202:
#line 996 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 203:
#line 998 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
    break;

  case 204:
#line 1001 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
    break;

  case 205:
#line 1003 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);}
    break;

  case 206:
#line 1005 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 207:
#line 1007 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); }
    break;

  case 208:
#line 1009 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
    break;

  case 209:
#line 1011 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); }
    break;

  case 210:
#line 1015 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

  case 211:
#line 1017 "perly.y"
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			}
    break;

  case 212:
#line 1028 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); }
    break;

  case 215:
#line 1032 "perly.y"
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			}
    break;

  case 217:
#line 1041 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
    break;

  case 218:
#line 1043 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
    break;

  case 219:
#line 1048 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
    break;

  case 220:
#line 1050 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
    break;

  case 221:
#line 1053 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 222:
#line 1055 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 223:
#line 1057 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 224:
#line 1062 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 225:
#line 1064 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 226:
#line 1068 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 227:
#line 1070 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 228:
#line 1074 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 229:
#line 1076 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

  case 230:
#line 1082 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
    break;

  case 236:
#line 1095 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
    break;

  case 237:
#line 1099 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); }
    break;

  case 238:
#line 1103 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

  case 239:
#line 1109 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

  case 240:
#line 1115 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); }
    break;

  case 241:
#line 1117 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
    break;

  case 242:
#line 1121 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); }
    break;

  case 244:
#line 1126 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); }
    break;

  case 246:
#line 1131 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); }
    break;

  case 248:
#line 1136 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); }
    break;

  case 249:
#line 1141 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
    break;

  case 250:
#line 1143 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
    break;

  case 251:
#line 1145 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
    break;

  case 252:
#line 1148 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

      default: break;
    

/* Generated from:
 * 703ebd267cf8ca45f9dee9bc0f4b21511117a0c1dca1c8bc9438ce91950217ae perly.y
 * a4923588f219644801577c514014847e1e5240f49413fa3b89d3306fa4874d07 regen_perly.pl
 * ex: set ro: */
@


1.1
log
@Initial revision
@
text
@d1 6
d8 4
a11 2
#line 137 "perly.y"
    { (yyval.ival) = (ps[(1) - (2)].val.ival); newPROG(block_end((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval))); ;}
d15 6
a20 7
#line 142 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (4)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (4)].val.i_tkval));
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
d24 4
a27 2
#line 151 "perly.y"
    { (yyval.ival) = block_start(TRUE); ;}
d31 5
a35 2
#line 155 "perly.y"
    { (yyval.ival) = (I32) allocmy("$_"); ;}
d39 1
a39 1
#line 159 "perly.y"
d41 2
a42 2
		    PL_parser->expect = XSTATE; (yyval.ival) = block_start(TRUE);
		;}
d46 8
a53 7
#line 166 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (4)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (4)].val.i_tkval));
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
d57 4
a60 2
#line 175 "perly.y"
    { (yyval.ival) = block_start(FALSE); ;}
d64 8
a71 2
#line 180 "perly.y"
    { (yyval.opval) = Nullop; ;}
d75 1
a75 1
#line 182 "perly.y"
d77 2
a78 5
			(yyval.opval) = IF_MAD(
				append_list(OP_LINESEQ,
			    	    (LISTOP*)(ps[(1) - (2)].val.opval), (LISTOP*)(ps[(2) - (2)].val.opval)),
				(ps[(1) - (2)].val.opval));
			;}
d82 8
a89 7
#line 189 "perly.y"
    {   (yyval.opval) = append_list(OP_LINESEQ,
				(LISTOP*)(ps[(1) - (2)].val.opval), (LISTOP*)(ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
d93 12
a104 3
#line 199 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((ps[(1) - (2)].val.p_tkval)), (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.p_tkval),((LISTOP*)(yyval.opval))->op_first,'L'); ;}
d108 5
a112 2
#line 203 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d116 5
a120 2
#line 205 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((ps[(1) - (2)].val.p_tkval)), (ps[(2) - (2)].val.opval)); ;}
d124 3
a126 17
#line 207 "perly.y"
    {
			  if (PVAL((ps[(1) - (2)].val.p_tkval))) {
			      (yyval.opval) = newSTATEOP(0, PVAL((ps[(1) - (2)].val.p_tkval)), newOP(OP_NULL, 0));
			      TOKEN_GETMAD((ps[(1) - (2)].val.p_tkval),(yyval.opval),'L');
			      TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),((LISTOP*)(yyval.opval))->op_first,';');
			  }
			  else {
			      (yyval.opval) = IF_MAD(
					newOP(OP_NULL, 0),
					Nullop);
                              PL_parser->copline = NOLINE;
			      TOKEN_FREE((ps[(1) - (2)].val.p_tkval));
			      TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),';');
			  }
			  PL_parser->expect = XSTATE;
			;}
d130 5
a134 16
#line 224 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(0, PVAL((ps[(1) - (3)].val.p_tkval)), (ps[(2) - (3)].val.opval));
			  PL_parser->expect = XSTATE;
			  DO_MAD({
			      /* sideff might already have a nexstate */
			      OP* op = ((LISTOP*)(yyval.opval))->op_first;
			      if (op) {
				  while (op->op_sibling &&
				     op->op_sibling->op_type == OP_NEXTSTATE)
					op = op->op_sibling;
				  token_getmad((ps[(1) - (3)].val.p_tkval),op,'L');
				  token_getmad((ps[(3) - (3)].val.i_tkval),op,';');
			      }
			  })
			;}
d138 3
a140 2
#line 243 "perly.y"
    { (yyval.opval) = Nullop; ;}
d144 2
a145 2
#line 245 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d149 6
a154 4
#line 247 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'i');
			;}
d158 2
a159 4
#line 251 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'i');
			;}
d163 6
a168 4
#line 255 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			;}
d172 4
a175 4
#line 259 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			;}
d179 2
a180 5
#line 263 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (line_t)IVAL((ps[(2) - (3)].val.i_tkval)),
					Nullop, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), Nullop);
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),((LISTOP*)(yyval.opval))->op_first->op_sibling,'w');
			;}
d184 4
a187 2
#line 271 "perly.y"
    { (yyval.opval) = Nullop; ;}
d191 4
a194 4
#line 273 "perly.y"
    { ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS; (yyval.opval) = scope((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d198 2
a199 8
#line 277 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[(1) - (6)].val.i_tkval));
			    (yyval.opval) = newCONDOP(0, (ps[(3) - (6)].val.opval), scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((ps[(1) - (6)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),')');
			;}
d203 10
a212 8
#line 288 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			    (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				   newCONDOP(0, (ps[(4) - (7)].val.opval), scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
			;}
d216 22
a237 8
#line 296 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			    (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				   newCONDOP(0, (ps[(4) - (7)].val.opval), scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
			;}
d241 11
a251 3
#line 307 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival),
		newWHENOP((ps[(4) - (6)].val.opval), scope((ps[(6) - (6)].val.opval)))); ;}
d255 22
a276 2
#line 310 "perly.y"
    { (yyval.opval) = newWHENOP(0, scope((ps[(2) - (2)].val.opval))); ;}
d280 17
a296 2
#line 315 "perly.y"
    { (yyval.opval) = Nullop; ;}
d300 7
a306 4
#line 317 "perly.y"
    { (yyval.opval) = scope((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d310 2
a311 12
#line 324 "perly.y"
    { OP *innerop;
			  PL_parser->copline = (line_t)(ps[(2) - (9)].val.i_tkval);
			    (yyval.opval) = block_end((ps[(4) - (9)].val.ival),
				   newSTATEOP(0, PVAL((ps[(1) - (9)].val.p_tkval)),
				     innerop = newWHILEOP(0, 1, (LOOP*)Nullop,
						IVAL((ps[(2) - (9)].val.i_tkval)), (ps[(5) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval), (ps[(7) - (9)].val.ival))));
			  TOKEN_GETMAD((ps[(1) - (9)].val.p_tkval),innerop,'L');
			  TOKEN_GETMAD((ps[(2) - (9)].val.i_tkval),innerop,'W');
			  TOKEN_GETMAD((ps[(3) - (9)].val.i_tkval),innerop,'(');
			  TOKEN_GETMAD((ps[(6) - (9)].val.i_tkval),innerop,')');
			;}
d315 7
a321 12
#line 337 "perly.y"
    { OP *innerop;
			  PL_parser->copline = (line_t)(ps[(2) - (9)].val.i_tkval);
			    (yyval.opval) = block_end((ps[(4) - (9)].val.ival),
				   newSTATEOP(0, PVAL((ps[(1) - (9)].val.p_tkval)),
				     innerop = newWHILEOP(0, 1, (LOOP*)Nullop,
						IVAL((ps[(2) - (9)].val.i_tkval)), (ps[(5) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval), (ps[(7) - (9)].val.ival))));
			  TOKEN_GETMAD((ps[(1) - (9)].val.p_tkval),innerop,'L');
			  TOKEN_GETMAD((ps[(2) - (9)].val.i_tkval),innerop,'W');
			  TOKEN_GETMAD((ps[(3) - (9)].val.i_tkval),innerop,'(');
			  TOKEN_GETMAD((ps[(6) - (9)].val.i_tkval),innerop,')');
			;}
d325 6
a330 11
#line 349 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((ps[(4) - (10)].val.ival),
			     innerop = newFOROP(0, PVAL((ps[(1) - (10)].val.p_tkval)), (line_t)IVAL((ps[(2) - (10)].val.i_tkval)),
					    (ps[(5) - (10)].val.opval), (ps[(7) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (10)].val.p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((ps[(2) - (10)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((ps[(3) - (10)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'d');
			  TOKEN_GETMAD((ps[(6) - (10)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((ps[(8) - (10)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
d334 6
a339 10
#line 360 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((ps[(5) - (9)].val.ival),
			     innerop = newFOROP(0, PVAL((ps[(1) - (9)].val.p_tkval)), (line_t)IVAL((ps[(2) - (9)].val.i_tkval)),
				    mod((ps[(3) - (9)].val.opval), OP_ENTERLOOP), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (9)].val.p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((ps[(2) - (9)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((ps[(4) - (9)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((ps[(7) - (9)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
d343 5
a347 10
#line 370 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((ps[(4) - (8)].val.ival),
			     innerop = newFOROP(0, PVAL((ps[(1) - (8)].val.p_tkval)), (line_t)IVAL((ps[(2) - (8)].val.i_tkval)),
						    Nullop, (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (8)].val.p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((ps[(2) - (8)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((ps[(3) - (8)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((ps[(6) - (8)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
d351 2
a352 30
#line 382 "perly.y"
    { OP *forop;
			  PL_parser->copline = (line_t)IVAL((ps[(2) - (12)].val.i_tkval));
			  forop = newSTATEOP(0, PVAL((ps[(1) - (12)].val.p_tkval)),
					    newWHILEOP(0, 1, (LOOP*)Nullop,
						IVAL((ps[(2) - (12)].val.i_tkval)), scalar((ps[(7) - (12)].val.opval)),
						(ps[(12) - (12)].val.opval), (ps[(10) - (12)].val.opval), (ps[(9) - (12)].val.ival)));
#ifdef MAD
			  forop = newUNOP(OP_NULL, 0, append_elem(OP_LINESEQ,
				newSTATEOP(0,
					   CopLABEL_alloc(((ps[(1) - (12)].val.p_tkval))->tk_lval.pval),
					   ((ps[(5) - (12)].val.opval) ? (ps[(5) - (12)].val.opval) : newOP(OP_NULL, 0)) ),
				forop));

			  token_getmad((ps[(2) - (12)].val.i_tkval),forop,'3');
			  token_getmad((ps[(3) - (12)].val.i_tkval),forop,'(');
			  token_getmad((ps[(6) - (12)].val.i_tkval),forop,'1');
			  token_getmad((ps[(8) - (12)].val.i_tkval),forop,'2');
			  token_getmad((ps[(11) - (12)].val.i_tkval),forop,')');
			  token_getmad((ps[(1) - (12)].val.p_tkval),forop,'L');
#else
			  if ((ps[(5) - (12)].val.opval)) {
				forop = append_elem(OP_LINESEQ,
                                        newSTATEOP(0, CopLABEL_alloc((ps[(1) - (12)].val.p_tkval)), (ps[(5) - (12)].val.opval)),
					forop);
			  }


#endif
			  (yyval.opval) = block_end((ps[(4) - (12)].val.ival), forop); ;}
d356 2
a357 5
#line 412 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((ps[(1) - (3)].val.p_tkval)),
				 newWHILEOP(0, 1, (LOOP*)Nullop,
					    NOLINE, Nullop, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval), 0));
			  TOKEN_GETMAD((ps[(1) - (3)].val.p_tkval),((LISTOP*)(yyval.opval))->op_first,'L'); ;}
d361 7
a367 6
#line 420 "perly.y"
    { PL_parser->copline = (line_t) (ps[(2) - (8)].val.i_tkval);
			    (yyval.opval) = block_end((ps[(4) - (8)].val.ival),
				newSTATEOP(0, PVAL((ps[(1) - (8)].val.p_tkval)),
				    newGIVENOP((ps[(6) - (8)].val.opval), scope((ps[(8) - (8)].val.opval)),
					(PADOFFSET) (ps[(5) - (8)].val.ival)) )); ;}
d371 7
a377 4
#line 429 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); ;}
d381 7
a387 2
#line 435 "perly.y"
    { (yyval.opval) = Nullop; ;}
d391 23
a413 4
#line 441 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; ;}
d417 6
a422 2
#line 449 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); ;}
d426 2
a427 2
#line 454 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
d431 13
a443 2
#line 458 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
d447 8
a454 2
#line 462 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
d458 1
a458 1
#line 467 "perly.y"
d460 13
a472 8
#ifdef MAD
			  YYSTYPE tmplval;
			  tmplval.pval = NULL;
			  (yyval.p_tkval) = newTOKEN(OP_NULL, tmplval, 0);
#else
			  (yyval.p_tkval) = NULL;
#endif
			;}
d476 7
a482 2
#line 481 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d486 8
a493 2
#line 483 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d497 4
a500 2
#line 485 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d504 5
a508 2
#line 487 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d512 15
a526 2
#line 489 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d530 2
a531 2
#line 494 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d535 2
a536 4
#line 498 "perly.y"
    { (yyval.opval) = newOP(OP_NULL,0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'p');
			;}
d540 2
a541 12
#line 504 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  prepend_madprops((ps[(1) - (4)].val.i_tkval)->tk_mad, (yyval.opval), 'F');
			  (ps[(1) - (4)].val.i_tkval)->tk_mad = 0;
			  token_free((ps[(1) - (4)].val.i_tkval));
#else
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = Nullop;
#endif
			;}
d545 2
a546 2
#line 517 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d550 2
a551 2
#line 518 "perly.y"
    { (yyval.opval) = Nullop; ;}
d555 2
a556 10
#line 523 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newMYSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  token_getmad((ps[(1) - (6)].val.i_tkval),(yyval.opval),'d');
#else
			  newMYSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  (yyval.opval) = Nullop;
#endif
			;}
d560 2
a561 20
#line 536 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  {
			      OP* o = newSVOP(OP_ANONCODE, 0,
				(SV*)newATTRSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval)));
			      (yyval.opval) = newOP(OP_NULL,0);
			      op_getmad(o,(yyval.opval),'&');
			      op_getmad((ps[(3) - (6)].val.opval),(yyval.opval),'n');
			      op_getmad((ps[(4) - (6)].val.opval),(yyval.opval),'s');
			      op_getmad((ps[(5) - (6)].val.opval),(yyval.opval),'a');
			      token_getmad((ps[(1) - (6)].val.i_tkval),(yyval.opval),'d');
			      append_madprops((ps[(6) - (6)].val.opval)->op_madprop, (yyval.opval), 0);
			      (ps[(6) - (6)].val.opval)->op_madprop = 0;
			    }
#else
			  newATTRSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  (yyval.opval) = Nullop;
#endif
			;}
d565 2
a566 3
#line 558 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); ;}
d570 3
a572 3
#line 564 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); ;}
d576 2
a577 3
#line 569 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); ;}
d581 2
a582 7
#line 574 "perly.y"
    { const char *const name = SvPV_nolen_const(((SVOP*)(ps[(1) - (1)].val.opval))->op_sv);
			  if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d586 15
a600 2
#line 584 "perly.y"
    { (yyval.opval) = Nullop; ;}
d604 2
a605 2
#line 590 "perly.y"
    { (yyval.opval) = Nullop; ;}
d609 2
a610 4
#line 592 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),':');
			;}
d614 4
a617 7
#line 596 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL, 0),
				    Nullop
				);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),':');
			;}
d621 2
a622 14
#line 606 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),':');
			;}
    break;

  case 75:
#line 610 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL, 0),
				    Nullop
				);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),':');
			;}
d626 4
a629 13
#line 619 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 77:
#line 620 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL,0),
				    Nullop
				);
			  PL_parser->expect = XSTATE;
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),';');
			;}
d633 2
a634 11
#line 630 "perly.y"
    {
#ifdef MAD
			  (yyval.opval) = package((ps[(2) - (3)].val.opval));
			  token_getmad((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			  token_getmad((ps[(3) - (3)].val.i_tkval),(yyval.opval),';');
#else
			  package((ps[(2) - (3)].val.opval));
			  (yyval.opval) = Nullop;
#endif
			;}
d638 2
a639 2
#line 643 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ ;}
d643 2
a644 14
#line 645 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = utilize(IVAL((ps[(1) - (7)].val.i_tkval)), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  token_getmad((ps[(1) - (7)].val.i_tkval),(yyval.opval),'o');
			  token_getmad((ps[(7) - (7)].val.i_tkval),(yyval.opval),';');
			  if (PL_parser->rsfp_filters &&
				      AvFILLp(PL_parser->rsfp_filters) >= 0)
			      append_madprops(newMADPROP('!', MAD_PV, "", 0), (yyval.opval), 0);
#else
			  utilize(IVAL((ps[(1) - (7)].val.i_tkval)), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  (yyval.opval) = Nullop;
#endif
			;}
d648 2
a649 4
#line 662 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d653 2
a654 4
#line 666 "perly.y"
    { (yyval.opval) = newLOGOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d658 3
a660 4
#line 670 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d663 4
a666 11
  case 85:
#line 678 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  token_getmad((ps[(2) - (2)].val.i_tkval),op,',');
			  (yyval.opval) = append_elem(OP_LIST, (ps[(1) - (2)].val.opval), op);
#else
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
#endif
			;}
d669 4
a672 10
  case 86:
#line 688 "perly.y"
    { 
			  OP* term = (ps[(3) - (3)].val.opval);
			  DO_MAD(
			      term = newUNOP(OP_NULL, 0, term);
			      token_getmad((ps[(2) - (3)].val.i_tkval),term,',');
			  )
			  (yyval.opval) = append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			;}
d676 2
a677 15
#line 701 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (3)].val.i_tkval)), OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(IVAL((ps[(1) - (3)].val.i_tkval)),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 89:
#line 706 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (5)].val.i_tkval)), OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(IVAL((ps[(1) - (5)].val.i_tkval)),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
d681 2
a682 9
#line 713 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'A');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),')');
			;}
d686 2
a687 6
#line 722 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'A');
			;}
d691 2
a692 6
#line 728 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			;}
d696 2
a697 8
#line 734 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
d701 2
a702 4
#line 742 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d706 10
a715 6
#line 746 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (4)].val.i_tkval)), 0, (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
d719 11
a729 3
#line 752 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, Nullop, (ps[(3) - (3)].val.opval)); ;}
d732 3
a734 6
  case 97:
#line 755 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 append_elem(OP_LIST,
				   prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			;}
d738 2
a739 7
#line 770 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
d743 2
a744 16
#line 777 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 102:
#line 782 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),']');
			;}
d748 2
a749 7
#line 790 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
d753 5
a757 20
#line 797 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 105:
#line 804 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (6)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(5) - (6)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),'}');
			;}
d761 4
a764 9
#line 814 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
d768 4
a771 7
#line 823 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval))));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
d775 6
a780 8
#line 830 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval)))));
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
d784 5
a788 7
#line 839 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval)))));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
d792 6
a797 6
#line 846 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval))));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
d801 6
a806 7
#line 852 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (6)].val.i_tkval),(yyval.opval),')');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),']');
			;}
d810 2
a811 7
#line 859 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), Nullop);
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),')');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),']');
			;}
d815 2
a816 4
#line 869 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), IVAL((ps[(2) - (3)].val.i_tkval)), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d820 3
a822 4
#line 873 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d826 5
a830 20
#line 877 "perly.y"
    {   if (IVAL((ps[(2) - (3)].val.i_tkval)) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 116:
#line 883 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 117:
#line 887 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d834 2
a835 4
#line 891 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d839 3
a841 4
#line 895 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d845 5
a849 4
#line 899 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d853 5
a857 4
#line 903 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d861 3
a863 12
#line 907 "perly.y"
    {
			  (yyval.opval) = newRANGE(IVAL((ps[(2) - (3)].val.i_tkval)), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  DO_MAD({
			      UNOP *op;
			      op = (UNOP*)(yyval.opval);
			      op = (UNOP*)op->op_first;	/* get to flop */
			      op = (UNOP*)op->op_first;	/* get to flip */
			      op = (UNOP*)op->op_first;	/* get to range */
			      token_getmad((ps[(2) - (3)].val.i_tkval),(OP*)op,'o');
			    })
			;}
d867 4
a870 4
#line 919 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d874 4
a877 4
#line 923 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d881 3
a883 4
#line 927 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d887 4
a890 7
#line 931 "perly.y"
    { (yyval.opval) = bind_match(IVAL((ps[(2) - (3)].val.i_tkval)), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),
				((yyval.opval)->op_type == OP_NOT
				    ? ((UNOP*)(yyval.opval))->op_first : (yyval.opval)),
				'~');
			;}
d894 4
a897 4
#line 941 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d901 3
a903 7
#line 945 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newUNOP(OP_NULL, 0, (ps[(2) - (2)].val.opval)),
				    (ps[(2) - (2)].val.opval)
				);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'+');
			;}
d907 2
a908 4
#line 952 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d912 2
a913 4
#line 956 "perly.y"
    { (yyval.opval) = newUNOP(OP_COMPLEMENT, 0, scalar((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d917 2
a918 5
#line 960 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					mod(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC));
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d922 2
a923 5
#line 965 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					mod(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d927 2
a928 5
#line 970 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					mod(scalar((ps[(2) - (2)].val.opval)), OP_PREINC));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d932 5
a936 5
#line 975 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					mod(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d940 2
a941 5
#line 984 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),']');
			;}
d945 2
a946 5
#line 989 "perly.y"
    { (yyval.opval) = newANONLIST(Nullop);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),']');
			;}
d950 2
a951 6
#line 994 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
d955 2
a956 6
#line 1000 "perly.y"
    { (yyval.opval) = newANONHASH(Nullop);
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),'}');
			;}
d960 2
a961 7
#line 1006 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  OP_GETMAD((ps[(3) - (5)].val.opval),(yyval.opval),'s');
			  OP_GETMAD((ps[(4) - (5)].val.opval),(yyval.opval),'a');
			;}
d965 2
a966 4
#line 1017 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), IVAL((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d970 2
a971 4
#line 1021 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, scope((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'D');
			;}
d975 2
a976 12
#line 1025 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar((ps[(2) - (4)].val.opval))
				)),Nullop)); dep();
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
d980 2
a981 13
#line 1037 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    append_elem(OP_LIST,
				(ps[(4) - (5)].val.opval),
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar((ps[(2) - (5)].val.opval))
				)))); dep();
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
d985 2
a986 8
#line 1050 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(0,scalar((ps[(2) - (4)].val.opval)))), Nullop)); dep();
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
d990 22
a1011 9
#line 1058 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				(ps[(4) - (5)].val.opval),
				scalar(newCVREF(0,scalar((ps[(2) - (5)].val.opval)))))); dep();
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
d1015 3
a1017 5
#line 1074 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'?');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),':');
			;}
d1021 3
a1023 4
#line 1079 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, mod((ps[(2) - (2)].val.opval),OP_REFGEN));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d1027 11
a1037 2
#line 1083 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1041 3
a1043 4
#line 1085 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),IVAL((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'k');
			;}
d1047 3
a1049 5
#line 1089 "perly.y"
    { (yyval.opval) = sawparens(IF_MAD(newUNOP(OP_NULL,0,(ps[(2) - (3)].val.opval)), (ps[(2) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
d1053 2
a1054 5
#line 1094 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),')');
			;}
d1058 2
a1059 2
#line 1099 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1063 2
a1064 2
#line 1101 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1068 2
a1069 2
#line 1103 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1073 3
a1075 2
#line 1105 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1079 10
a1088 2
#line 1107 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));;}
d1092 2
a1093 2
#line 1109 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1097 2
a1098 41
#line 1111 "perly.y"
    { (yyval.opval) = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 163:
#line 1120 "perly.y"
    { (yyval.opval) = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 164:
#line 1131 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 165:
#line 1133 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 166:
#line 1135 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
d1102 2
a1103 13
#line 1140 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			  DO_MAD({
			      OP* op = (yyval.opval);
			      if (op->op_type == OP_CONST) { /* defeat const fold */
				op = (OP*)op->op_madprop->mad_val;
			      }
			      token_getmad((ps[(2) - (4)].val.i_tkval),op,'(');
			      token_getmad((ps[(4) - (4)].val.i_tkval),op,')');
			  })
			;}
d1107 2
a1108 5
#line 1153 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
d1112 2
a1113 5
#line 1158 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
d1117 2
a1118 4
#line 1163 "perly.y"
    { (yyval.opval) = newLOOPEX(IVAL((ps[(1) - (2)].val.i_tkval)),(ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d1122 2
a1123 4
#line 1167 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d1127 2
a1128 4
#line 1171 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
d1132 2
a1133 4
#line 1175 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d1137 2
a1138 4
#line 1179 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d1142 2
a1143 4
#line 1183 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.i_tkval) ? OPf_SPECIAL : 0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
d1147 2
a1148 4
#line 1187 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.i_tkval) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d1152 2
a1153 2
#line 1191 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); ;}
d1157 2
a1158 3
#line 1193 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); ;}
d1162 2
a1163 4
#line 1196 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
d1167 10
a1176 6
#line 1200 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[(1) - (3)].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
d1180 10
a1189 3
#line 1206 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				scalar((ps[(1) - (1)].val.opval))); ;}
d1193 10
a1202 9
#line 1209 "perly.y"
    { (yyval.opval) = (IVAL((ps[(1) - (3)].val.i_tkval)) == OP_NOT)
			    ? newUNOP(IVAL((ps[(1) - (3)].val.i_tkval)), 0, newSVOP(OP_CONST, 0, newSViv(0)))
			    : newOP(IVAL((ps[(1) - (3)].val.i_tkval)), OPf_SPECIAL);

			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
d1206 10
a1215 6
#line 1218 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[(1) - (4)].val.i_tkval)), 0, (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
d1219 13
a1231 5
#line 1224 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (4)].val.opval), (ps[(3) - (4)].val.opval), 1);
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
d1235 5
a1239 8
#line 1234 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval));
			  DO_MAD(
			      token_getmad((ps[(1) - (3)].val.i_tkval),(yyval.opval),'d');
			      append_madprops((ps[(3) - (3)].val.opval)->op_madprop, (yyval.opval), 'a');
			      (ps[(3) - (3)].val.opval)->op_madprop = 0;
			  )
			;}
d1243 4
a1246 4
#line 1242 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),IVAL((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'d');
			;}
d1250 2
a1251 5
#line 1249 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
d1255 2
a1256 5
#line 1254 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),')');
			;}
d1260 2
a1261 2
#line 1259 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1265 3
a1267 2
#line 1261 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1271 2
a1272 2
#line 1263 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1276 3
a1278 2
#line 1268 "perly.y"
    { (yyval.opval) = Nullop; ;}
d1282 2
a1283 2
#line 1270 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1287 2
a1288 2
#line 1274 "perly.y"
    { (yyval.opval) = Nullop; ;}
d1292 2
a1293 2
#line 1276 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1297 2
a1298 11
#line 1278 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  token_getmad((ps[(2) - (2)].val.i_tkval),op,',');
			  (yyval.opval) = append_elem(OP_LIST, (ps[(1) - (2)].val.opval), op);
#else
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
#endif

			;}
d1302 2
a1303 2
#line 1293 "perly.y"
    { PL_parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); ;}
d1307 2
a1308 4
#line 1297 "perly.y"
    { (yyval.opval) = newCVREF(IVAL((ps[(1) - (2)].val.i_tkval)),(ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'&');
			;}
d1312 2
a1313 4
#line 1303 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'$');
			;}
d1317 2
a1318 4
#line 1309 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'@@');
			;}
d1322 3
a1324 4
#line 1315 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'%');
			;}
d1328 2
a1329 4
#line 1321 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'l');
			;}
d1333 2
a1334 4
#line 1327 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'*');
			;}
d1338 2
a1339 2
#line 1334 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
d1343 2
a1344 2
#line 1336 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
d1348 2
a1349 2
#line 1338 "perly.y"
    { (yyval.opval) = scope((ps[(1) - (1)].val.opval)); ;}
d1353 4
a1356 2
#line 1341 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d1359 4
d1364 170
a1533 1
/* Line 1267 of yacc.c.  */
d1537 5
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d2 1
a2 1
#line 142 "perly.y"
d7 1
a7 1
#line 147 "perly.y"
d17 1
a17 1
#line 156 "perly.y"
d22 1
a22 1
#line 160 "perly.y"
d27 1
a27 1
#line 164 "perly.y"
d34 1
a34 1
#line 171 "perly.y"
d44 1
a44 1
#line 180 "perly.y"
d49 2
a50 2
#line 185 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d54 1
a54 1
#line 187 "perly.y"
d64 1
a64 1
#line 194 "perly.y"
d74 1
a74 1
#line 204 "perly.y"
d80 1
a80 1
#line 208 "perly.y"
d85 1
a85 1
#line 210 "perly.y"
d90 1
a90 1
#line 212 "perly.y"
d100 1
a100 1
					(OP*)NULL);
d110 1
a110 1
#line 229 "perly.y"
d129 2
a130 2
#line 248 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d134 1
a134 1
#line 250 "perly.y"
d139 1
a139 1
#line 252 "perly.y"
d146 1
a146 1
#line 256 "perly.y"
d153 1
a153 1
#line 260 "perly.y"
d160 1
a160 1
#line 264 "perly.y"
d167 1
a167 1
#line 268 "perly.y"
d169 1
a169 1
					(OP*)NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), (OP*)NULL);
d175 2
a176 2
#line 276 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d180 1
a180 1
#line 278 "perly.y"
d187 1
a187 1
#line 282 "perly.y"
d189 1
a189 1
			    (yyval.opval) = newCONDOP(0, newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)), scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
d198 1
a198 1
#line 293 "perly.y"
d209 1
a209 1
#line 301 "perly.y"
d220 1
a220 1
#line 312 "perly.y"
d226 1
a226 1
#line 315 "perly.y"
d231 2
a232 2
#line 320 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d236 1
a236 1
#line 322 "perly.y"
d243 1
a243 1
#line 329 "perly.y"
d248 1
a248 1
				     innerop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
d258 1
a258 1
#line 342 "perly.y"
d263 1
a263 1
				     innerop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
d273 1
a273 1
#line 354 "perly.y"
d287 1
a287 1
#line 365 "perly.y"
d300 1
a300 1
#line 375 "perly.y"
d304 1
a304 1
						    (OP*)NULL, (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
d313 1
a313 1
#line 387 "perly.y"
d317 1
a317 1
					    newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
d346 1
a346 1
#line 417 "perly.y"
d348 2
a349 2
				 newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
					    NOLINE, (OP*)NULL, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval), 0));
d354 1
a354 1
#line 425 "perly.y"
d363 1
a363 1
#line 434 "perly.y"
d370 2
a371 2
#line 440 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d375 1
a375 1
#line 446 "perly.y"
d382 1
a382 1
#line 454 "perly.y"
d387 1
a387 1
#line 459 "perly.y"
d392 1
a392 1
#line 463 "perly.y"
d397 1
a397 1
#line 467 "perly.y"
d402 1
a402 1
#line 472 "perly.y"
d415 1
a415 1
#line 486 "perly.y"
d420 1
a420 1
#line 488 "perly.y"
d425 1
a425 1
#line 490 "perly.y"
d430 1
a430 1
#line 492 "perly.y"
d435 1
a435 1
#line 494 "perly.y"
d440 1
a440 1
#line 499 "perly.y"
d445 1
a445 1
#line 503 "perly.y"
d452 1
a452 1
#line 509 "perly.y"
d461 1
a461 1
			  (yyval.opval) = (OP*)NULL;
d467 1
a467 1
#line 522 "perly.y"
d472 2
a473 2
#line 523 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d477 1
a477 1
#line 528 "perly.y"
d484 1
a484 1
			  (yyval.opval) = (OP*)NULL;
d490 1
a490 1
#line 541 "perly.y"
d507 1
a507 1
			  (yyval.opval) = (OP*)NULL;
d513 1
a513 1
#line 563 "perly.y"
d519 1
a519 1
#line 569 "perly.y"
d525 1
a525 1
#line 574 "perly.y"
d531 1
a531 1
#line 579 "perly.y"
d541 2
a542 2
#line 589 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d546 2
a547 2
#line 595 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d551 1
a551 1
#line 597 "perly.y"
d558 1
a558 1
#line 601 "perly.y"
d561 1
a561 1
				    (OP*)NULL
d568 1
a568 1
#line 611 "perly.y"
d575 1
a575 1
#line 615 "perly.y"
d578 1
a578 1
				    (OP*)NULL
d585 1
a585 1
#line 624 "perly.y"
d590 1
a590 1
#line 625 "perly.y"
d593 1
a593 1
				    (OP*)NULL
d601 1
a601 1
#line 635 "perly.y"
d609 1
a609 1
			  (yyval.opval) = (OP*)NULL;
d615 1
a615 1
#line 648 "perly.y"
d620 1
a620 1
#line 650 "perly.y"
d631 1
a631 1
			  (yyval.opval) = (OP*)NULL;
d637 1
a637 1
#line 667 "perly.y"
d644 1
a644 1
#line 671 "perly.y"
d651 1
a651 1
#line 675 "perly.y"
d658 1
a658 1
#line 683 "perly.y"
d671 1
a671 1
#line 693 "perly.y"
d683 1
a683 1
#line 706 "perly.y"
d691 1
a691 1
#line 711 "perly.y"
d701 1
a701 1
#line 718 "perly.y"
d713 1
a713 1
#line 727 "perly.y"
d722 1
a722 1
#line 733 "perly.y"
d731 1
a731 1
#line 739 "perly.y"
d742 1
a742 1
#line 747 "perly.y"
d749 1
a749 1
#line 751 "perly.y"
d758 1
a758 1
#line 757 "perly.y"
d760 1
a760 1
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, (OP*)NULL, (ps[(3) - (3)].val.opval)); ;}
d764 1
a764 1
#line 760 "perly.y"
d772 1
a772 1
#line 775 "perly.y"
d782 1
a782 1
#line 782 "perly.y"
d790 1
a790 1
#line 787 "perly.y"
d801 1
a801 1
#line 795 "perly.y"
d811 1
a811 1
#line 802 "perly.y"
d821 1
a821 1
#line 809 "perly.y"
d834 1
a834 1
#line 819 "perly.y"
d846 1
a846 1
#line 828 "perly.y"
d856 1
a856 1
#line 835 "perly.y"
d867 1
a867 1
#line 844 "perly.y"
d877 1
a877 1
#line 851 "perly.y"
d886 1
a886 1
#line 857 "perly.y"
d896 2
a897 2
#line 864 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), (OP*)NULL);
d906 1
a906 1
#line 874 "perly.y"
d913 1
a913 1
#line 878 "perly.y"
d920 1
a920 1
#line 882 "perly.y"
d929 1
a929 1
#line 888 "perly.y"
d936 1
a936 1
#line 892 "perly.y"
d943 1
a943 1
#line 896 "perly.y"
d950 1
a950 1
#line 900 "perly.y"
d957 1
a957 1
#line 904 "perly.y"
d964 1
a964 1
#line 908 "perly.y"
d971 1
a971 1
#line 912 "perly.y"
d986 1
a986 1
#line 924 "perly.y"
d993 1
a993 1
#line 928 "perly.y"
d1000 1
a1000 1
#line 932 "perly.y"
d1007 1
a1007 1
#line 936 "perly.y"
d1017 1
a1017 1
#line 946 "perly.y"
d1024 1
a1024 1
#line 950 "perly.y"
d1034 1
a1034 1
#line 957 "perly.y"
d1041 1
a1041 1
#line 961 "perly.y"
d1048 1
a1048 1
#line 965 "perly.y"
d1056 1
a1056 1
#line 970 "perly.y"
d1064 1
a1064 1
#line 975 "perly.y"
d1072 1
a1072 1
#line 980 "perly.y"
d1080 1
a1080 1
#line 989 "perly.y"
d1088 2
a1089 2
#line 994 "perly.y"
    { (yyval.opval) = newANONLIST((OP*)NULL);
d1096 1
a1096 1
#line 999 "perly.y"
d1105 2
a1106 2
#line 1005 "perly.y"
    { (yyval.opval) = newANONHASH((OP*)NULL);
d1114 1
a1114 1
#line 1011 "perly.y"
d1124 1
a1124 1
#line 1022 "perly.y"
d1131 1
a1131 1
#line 1026 "perly.y"
d1138 1
a1138 1
#line 1030 "perly.y"
d1145 1
a1145 1
				)),(OP*)NULL)); dep();
d1153 1
a1153 1
#line 1042 "perly.y"
d1169 1
a1169 1
#line 1055 "perly.y"
d1172 1
a1172 1
				scalar(newCVREF(0,scalar((ps[(2) - (4)].val.opval)))), (OP*)NULL)); dep();
d1180 1
a1180 1
#line 1063 "perly.y"
d1192 1
a1192 1
#line 1079 "perly.y"
d1200 1
a1200 1
#line 1084 "perly.y"
d1207 1
a1207 1
#line 1088 "perly.y"
d1212 1
a1212 1
#line 1090 "perly.y"
d1219 1
a1219 1
#line 1094 "perly.y"
d1227 1
a1227 1
#line 1099 "perly.y"
d1235 1
a1235 1
#line 1104 "perly.y"
d1240 1
a1240 1
#line 1106 "perly.y"
d1245 1
a1245 1
#line 1108 "perly.y"
d1250 1
a1250 1
#line 1110 "perly.y"
d1255 1
a1255 1
#line 1112 "perly.y"
d1260 1
a1260 1
#line 1114 "perly.y"
d1265 1
a1265 1
#line 1116 "perly.y"
d1277 1
a1277 1
#line 1125 "perly.y"
d1291 1
a1291 1
#line 1136 "perly.y"
d1296 1
a1296 1
#line 1138 "perly.y"
d1301 1
a1301 1
#line 1140 "perly.y"
d1309 1
a1309 1
#line 1145 "perly.y"
d1325 1
a1325 1
#line 1158 "perly.y"
d1333 1
a1333 1
#line 1163 "perly.y"
d1341 1
a1341 1
#line 1168 "perly.y"
d1348 1
a1348 1
#line 1172 "perly.y"
d1355 1
a1355 1
#line 1176 "perly.y"
d1362 1
a1362 1
#line 1180 "perly.y"
d1369 1
a1369 1
#line 1184 "perly.y"
d1376 1
a1376 1
#line 1188 "perly.y"
d1383 1
a1383 1
#line 1192 "perly.y"
d1390 1
a1390 1
#line 1196 "perly.y"
d1395 1
a1395 1
#line 1198 "perly.y"
d1401 1
a1401 1
#line 1201 "perly.y"
d1408 1
a1408 1
#line 1205 "perly.y"
d1417 1
a1417 1
#line 1211 "perly.y"
d1423 1
a1423 1
#line 1214 "perly.y"
d1435 1
a1435 1
#line 1223 "perly.y"
d1444 1
a1444 1
#line 1229 "perly.y"
d1452 1
a1452 1
#line 1239 "perly.y"
d1463 1
a1463 1
#line 1247 "perly.y"
d1470 1
a1470 1
#line 1254 "perly.y"
d1478 1
a1478 1
#line 1259 "perly.y"
d1486 1
a1486 1
#line 1264 "perly.y"
d1491 1
a1491 1
#line 1266 "perly.y"
d1496 1
a1496 1
#line 1268 "perly.y"
d1501 2
a1502 2
#line 1273 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d1506 1
a1506 1
#line 1275 "perly.y"
d1511 2
a1512 2
#line 1279 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d1516 1
a1516 1
#line 1281 "perly.y"
d1521 1
a1521 1
#line 1283 "perly.y"
d1535 1
a1535 1
#line 1298 "perly.y"
d1540 1
a1540 1
#line 1302 "perly.y"
d1547 1
a1547 1
#line 1308 "perly.y"
d1554 1
a1554 1
#line 1314 "perly.y"
d1561 1
a1561 1
#line 1320 "perly.y"
d1568 1
a1568 1
#line 1326 "perly.y"
d1575 1
a1575 1
#line 1332 "perly.y"
d1582 1
a1582 1
#line 1339 "perly.y"
d1587 1
a1587 1
#line 1341 "perly.y"
d1592 1
a1592 1
#line 1343 "perly.y"
d1597 1
a1597 1
#line 1346 "perly.y"
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@d2 1
a2 1
#line 143 "perly.y"
d7 1
a7 1
#line 148 "perly.y"
d17 1
a17 1
#line 157 "perly.y"
d22 2
a23 2
#line 161 "perly.y"
    { (yyval.ival) = (I32) Perl_allocmy(aTHX_ STR_WITH_LEN("$_"), 0); ;}
d27 1
a27 1
#line 165 "perly.y"
d34 1
a34 1
#line 172 "perly.y"
d44 1
a44 1
#line 181 "perly.y"
d49 1
a49 1
#line 186 "perly.y"
d54 1
a54 1
#line 188 "perly.y"
d64 1
a64 1
#line 195 "perly.y"
d74 1
a74 1
#line 205 "perly.y"
d80 1
a80 1
#line 209 "perly.y"
d85 1
a85 1
#line 211 "perly.y"
d90 1
a90 1
#line 213 "perly.y"
d110 1
a110 1
#line 230 "perly.y"
d129 2
a130 2
#line 246 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((ps[(1) - (2)].val.p_tkval)), (ps[(2) - (2)].val.opval)); ;}
d134 2
a135 2
#line 251 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d139 1
a139 6
#line 253 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 21:
#line 255 "perly.y"
d145 2
a146 2
  case 22:
#line 259 "perly.y"
d152 2
a153 2
  case 23:
#line 263 "perly.y"
d159 2
a160 2
  case 24:
#line 267 "perly.y"
d166 2
a167 2
  case 25:
#line 271 "perly.y"
d174 1
a174 1
  case 26:
a175 5
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), scope((ps[(1) - (3)].val.opval))); ;}
    break;

  case 27:
#line 281 "perly.y"
d179 2
a180 2
  case 28:
#line 283 "perly.y"
d186 2
a187 2
  case 29:
#line 287 "perly.y"
d197 2
a198 2
  case 30:
#line 298 "perly.y"
d208 2
a209 2
  case 31:
#line 306 "perly.y"
d219 2
a220 2
  case 32:
#line 317 "perly.y"
d225 2
a226 2
  case 33:
#line 320 "perly.y"
d230 2
a231 2
  case 34:
#line 325 "perly.y"
d235 2
a236 2
  case 35:
#line 327 "perly.y"
d242 2
a243 2
  case 36:
#line 334 "perly.y"
d245 1
a245 1
			  PL_parser->copline = (line_t)IVAL((ps[(2) - (9)].val.i_tkval));
d257 2
a258 2
  case 37:
#line 347 "perly.y"
d260 1
a260 1
			  PL_parser->copline = (line_t)IVAL((ps[(2) - (9)].val.i_tkval));
d272 2
a273 2
  case 38:
#line 359 "perly.y"
d286 2
a287 2
  case 39:
#line 370 "perly.y"
d299 2
a300 2
  case 40:
#line 380 "perly.y"
d312 2
a313 2
  case 41:
#line 392 "perly.y"
d345 2
a346 2
  case 42:
#line 422 "perly.y"
d353 3
a355 3
  case 43:
#line 430 "perly.y"
    { PL_parser->copline = (line_t) IVAL((ps[(2) - (8)].val.i_tkval));
d362 2
a363 2
  case 44:
#line 439 "perly.y"
d369 2
a370 2
  case 45:
#line 445 "perly.y"
d374 2
a375 2
  case 47:
#line 451 "perly.y"
d381 2
a382 2
  case 49:
#line 459 "perly.y"
d386 2
a387 2
  case 50:
#line 464 "perly.y"
d391 2
a392 2
  case 51:
#line 468 "perly.y"
d396 2
a397 2
  case 52:
#line 472 "perly.y"
d401 2
a402 2
  case 53:
#line 477 "perly.y"
d414 2
a415 2
  case 55:
#line 491 "perly.y"
d419 2
a420 2
  case 56:
#line 493 "perly.y"
d424 2
a425 2
  case 57:
#line 495 "perly.y"
d429 2
a430 2
  case 58:
#line 497 "perly.y"
d434 2
a435 2
  case 59:
#line 499 "perly.y"
d439 2
a440 2
  case 60:
#line 504 "perly.y"
d444 2
a445 2
  case 61:
#line 508 "perly.y"
d451 3
a453 5
  case 62:
#line 514 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  SvREFCNT_inc_simple_void(PL_compcv);
a462 4
			  if (CvOUTSIDE(fmtcv) && !CvUNIQUE(CvOUTSIDE(fmtcv))) {
			    SvREFCNT_inc_simple_void(fmtcv);
			    pad_add_anon((SV*)fmtcv, OP_NULL);
			  }
d466 2
a467 2
  case 63:
#line 533 "perly.y"
d471 2
a472 2
  case 64:
#line 534 "perly.y"
d476 2
a477 2
  case 65:
#line 539 "perly.y"
d489 2
a490 2
  case 66:
#line 552 "perly.y"
d512 2
a513 2
  case 67:
#line 574 "perly.y"
d518 2
a519 2
  case 68:
#line 580 "perly.y"
d524 2
a525 2
  case 69:
#line 585 "perly.y"
d530 2
a531 2
  case 70:
#line 590 "perly.y"
d540 2
a541 2
  case 71:
#line 600 "perly.y"
d545 2
a546 2
  case 73:
#line 606 "perly.y"
d550 2
a551 2
  case 74:
#line 608 "perly.y"
d557 2
a558 2
  case 75:
#line 612 "perly.y"
d567 2
a568 2
  case 76:
#line 622 "perly.y"
d574 2
a575 2
  case 77:
#line 626 "perly.y"
d584 2
a585 2
  case 78:
#line 635 "perly.y"
d589 2
a590 2
  case 79:
#line 636 "perly.y"
d600 2
a601 2
  case 80:
#line 646 "perly.y"
d604 3
a606 5
			  (yyval.opval) = package((ps[(3) - (4)].val.opval));
			  token_getmad((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  token_getmad((ps[(4) - (4)].val.i_tkval),(yyval.opval),';');
d608 1
a608 3
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
d614 2
a615 2
  case 81:
#line 663 "perly.y"
d619 2
a620 2
  case 82:
#line 665 "perly.y"
d628 1
a628 1
			      append_madprops(newMADPROP('!', MAD_NULL, NULL, 0), (yyval.opval), 0);
d636 2
a637 2
  case 83:
#line 682 "perly.y"
d643 2
a644 2
  case 84:
#line 686 "perly.y"
d650 2
a651 2
  case 85:
#line 690 "perly.y"
d657 2
a658 2
  case 87:
#line 698 "perly.y"
d670 2
a671 2
  case 88:
#line 708 "perly.y"
d682 2
a683 2
  case 90:
#line 721 "perly.y"
d690 2
a691 2
  case 91:
#line 726 "perly.y"
d700 2
a701 2
  case 92:
#line 733 "perly.y"
d712 2
a713 2
  case 93:
#line 742 "perly.y"
d721 2
a722 2
  case 94:
#line 748 "perly.y"
d730 2
a731 2
  case 95:
#line 754 "perly.y"
d741 2
a742 2
  case 96:
#line 762 "perly.y"
d748 2
a749 2
  case 97:
#line 766 "perly.y"
d757 2
a758 2
  case 98:
#line 772 "perly.y"
d763 2
a764 2
  case 99:
#line 775 "perly.y"
d771 2
a772 2
  case 102:
#line 790 "perly.y"
d781 2
a782 2
  case 103:
#line 797 "perly.y"
d789 2
a790 2
  case 104:
#line 802 "perly.y"
d800 2
a801 2
  case 105:
#line 810 "perly.y"
d810 2
a811 2
  case 106:
#line 817 "perly.y"
d820 2
a821 2
  case 107:
#line 824 "perly.y"
d833 2
a834 2
  case 108:
#line 834 "perly.y"
d845 2
a846 2
  case 109:
#line 843 "perly.y"
d855 2
a856 2
  case 110:
#line 850 "perly.y"
d866 2
a867 2
  case 111:
#line 859 "perly.y"
d876 2
a877 2
  case 112:
#line 866 "perly.y"
d885 2
a886 2
  case 113:
#line 872 "perly.y"
d895 2
a896 2
  case 114:
#line 879 "perly.y"
d905 2
a906 2
  case 115:
#line 889 "perly.y"
d912 2
a913 2
  case 116:
#line 893 "perly.y"
d919 2
a920 2
  case 117:
#line 897 "perly.y"
d928 2
a929 2
  case 118:
#line 903 "perly.y"
d935 2
a936 2
  case 119:
#line 907 "perly.y"
d942 2
a943 2
  case 120:
#line 911 "perly.y"
d949 2
a950 2
  case 121:
#line 915 "perly.y"
d956 2
a957 2
  case 122:
#line 919 "perly.y"
d963 2
a964 2
  case 123:
#line 923 "perly.y"
d970 2
a971 2
  case 124:
#line 927 "perly.y"
d985 2
a986 2
  case 125:
#line 939 "perly.y"
d992 2
a993 2
  case 126:
#line 943 "perly.y"
d999 2
a1000 2
  case 127:
#line 947 "perly.y"
d1006 2
a1007 2
  case 128:
#line 951 "perly.y"
d1016 2
a1017 2
  case 129:
#line 961 "perly.y"
d1023 2
a1024 2
  case 130:
#line 965 "perly.y"
d1033 2
a1034 2
  case 131:
#line 972 "perly.y"
d1040 2
a1041 2
  case 132:
#line 976 "perly.y"
d1047 2
a1048 2
  case 133:
#line 980 "perly.y"
d1055 2
a1056 2
  case 134:
#line 985 "perly.y"
d1063 2
a1064 2
  case 135:
#line 990 "perly.y"
d1071 2
a1072 2
  case 136:
#line 995 "perly.y"
d1079 2
a1080 2
  case 137:
#line 1004 "perly.y"
d1087 2
a1088 2
  case 138:
#line 1009 "perly.y"
d1095 2
a1096 2
  case 139:
#line 1014 "perly.y"
d1104 2
a1105 2
  case 140:
#line 1020 "perly.y"
d1113 2
a1114 2
  case 141:
#line 1026 "perly.y"
d1123 2
a1124 2
  case 142:
#line 1037 "perly.y"
d1130 2
a1131 2
  case 143:
#line 1041 "perly.y"
d1137 2
a1138 2
  case 144:
#line 1045 "perly.y"
d1152 2
a1153 2
  case 145:
#line 1057 "perly.y"
d1168 2
a1169 2
  case 146:
#line 1070 "perly.y"
d1179 2
a1180 2
  case 147:
#line 1078 "perly.y"
d1191 2
a1192 2
  case 152:
#line 1094 "perly.y"
d1199 2
a1200 2
  case 153:
#line 1099 "perly.y"
d1206 2
a1207 2
  case 154:
#line 1103 "perly.y"
d1211 2
a1212 2
  case 155:
#line 1105 "perly.y"
d1218 2
a1219 2
  case 156:
#line 1109 "perly.y"
d1226 2
a1227 2
  case 157:
#line 1114 "perly.y"
d1234 2
a1235 2
  case 158:
#line 1119 "perly.y"
d1239 2
a1240 2
  case 159:
#line 1121 "perly.y"
d1244 2
a1245 2
  case 160:
#line 1123 "perly.y"
d1249 2
a1250 2
  case 161:
#line 1125 "perly.y"
d1254 2
a1255 2
  case 162:
#line 1127 "perly.y"
d1259 2
a1260 2
  case 163:
#line 1129 "perly.y"
d1264 2
a1265 2
  case 164:
#line 1131 "perly.y"
d1276 2
a1277 2
  case 165:
#line 1140 "perly.y"
d1290 2
a1291 2
  case 166:
#line 1151 "perly.y"
d1295 2
a1296 2
  case 167:
#line 1153 "perly.y"
d1300 2
a1301 2
  case 168:
#line 1155 "perly.y"
d1308 2
a1309 2
  case 169:
#line 1160 "perly.y"
d1324 2
a1325 2
  case 170:
#line 1173 "perly.y"
d1332 2
a1333 2
  case 171:
#line 1178 "perly.y"
d1340 2
a1341 2
  case 172:
#line 1183 "perly.y"
d1347 2
a1348 2
  case 173:
#line 1187 "perly.y"
d1354 2
a1355 2
  case 174:
#line 1191 "perly.y"
d1361 2
a1362 2
  case 175:
#line 1195 "perly.y"
d1368 2
a1369 2
  case 176:
#line 1199 "perly.y"
d1375 2
a1376 2
  case 177:
#line 1203 "perly.y"
d1382 2
a1383 2
  case 178:
#line 1207 "perly.y"
d1389 2
a1390 2
  case 179:
#line 1211 "perly.y"
d1394 2
a1395 2
  case 180:
#line 1213 "perly.y"
d1400 2
a1401 2
  case 181:
#line 1216 "perly.y"
d1407 2
a1408 2
  case 182:
#line 1220 "perly.y"
d1416 2
a1417 2
  case 183:
#line 1226 "perly.y"
d1422 2
a1423 2
  case 184:
#line 1229 "perly.y"
d1434 2
a1435 2
  case 185:
#line 1238 "perly.y"
d1443 2
a1444 2
  case 186:
#line 1244 "perly.y"
d1451 2
a1452 11
  case 189:
#line 1251 "perly.y"
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'X');
			;}
    break;

  case 191:
#line 1261 "perly.y"
d1462 2
a1463 2
  case 192:
#line 1269 "perly.y"
d1469 2
a1470 2
  case 193:
#line 1276 "perly.y"
d1477 2
a1478 2
  case 194:
#line 1281 "perly.y"
d1485 2
a1486 2
  case 195:
#line 1286 "perly.y"
d1490 2
a1491 2
  case 196:
#line 1288 "perly.y"
d1495 2
a1496 2
  case 197:
#line 1290 "perly.y"
d1500 2
a1501 2
  case 198:
#line 1295 "perly.y"
d1505 2
a1506 2
  case 199:
#line 1297 "perly.y"
d1510 2
a1511 2
  case 200:
#line 1301 "perly.y"
d1515 2
a1516 2
  case 201:
#line 1303 "perly.y"
d1520 2
a1521 2
  case 202:
#line 1305 "perly.y"
d1534 2
a1535 2
  case 203:
#line 1320 "perly.y"
d1539 2
a1540 2
  case 204:
#line 1324 "perly.y"
d1546 2
a1547 2
  case 205:
#line 1330 "perly.y"
d1553 2
a1554 2
  case 206:
#line 1336 "perly.y"
d1560 2
a1561 2
  case 207:
#line 1342 "perly.y"
d1567 2
a1568 2
  case 208:
#line 1348 "perly.y"
d1574 2
a1575 2
  case 209:
#line 1354 "perly.y"
d1581 2
a1582 2
  case 210:
#line 1361 "perly.y"
d1586 2
a1587 2
  case 211:
#line 1363 "perly.y"
d1591 2
a1592 2
  case 212:
#line 1365 "perly.y"
d1596 2
a1597 2
  case 213:
#line 1368 "perly.y"
d1600 3
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a0 6
/* -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

d2 2
a3 4
#line 142 "perly.y"
    {
			  PL_parser->expect = XSTATE;
			;}
d7 6
a12 4
#line 146 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  (yyval.ival) = 0;
d17 2
a18 4
#line 151 "perly.y"
    {
			  parser->expect = XTERM;
			;}
d22 2
a23 5
#line 155 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			;}
d27 1
a27 1
#line 160 "perly.y"
d29 2
a30 2
			  parser->expect = XBLOCK;
			;}
d34 6
a39 7
#line 164 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
d44 2
a45 4
#line 172 "perly.y"
    {
			  parser->expect = XSTATE;
			;}
d49 2
a50 8
#line 176 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			;}
d54 1
a54 1
#line 184 "perly.y"
d56 4
a59 1
			  parser->expect = XSTATE;
d64 6
a69 7
#line 188 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
d74 3
a76 12
#line 196 "perly.y"
    {
			  parser->expect = XSTATE;
			;}
    break;

  case 13:
#line 200 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			;}
d80 2
a81 7
#line 208 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (4)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (4)].val.i_tkval));
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
d85 2
a86 2
#line 217 "perly.y"
    { (yyval.ival) = block_start(TRUE); ;}
d90 17
a106 2
#line 221 "perly.y"
    { (yyval.ival) = (I32) Perl_allocmy(aTHX_ STR_WITH_LEN("$_"), 0); ;}
d110 15
a124 6
#line 225 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (4)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (4)].val.i_tkval));
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
d129 2
a130 2
#line 234 "perly.y"
    { (yyval.ival) = block_start(FALSE); ;}
d134 1
a134 1
#line 239 "perly.y"
d139 2
a140 6
#line 241 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
d144 3
a146 7
#line 250 "perly.y"
    {
			  if((ps[(1) - (1)].val.opval)) {
			      (yyval.opval) = newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval));
			  } else {
			      (yyval.opval) = IF_MAD(newOP(OP_NULL, 0), NULL);
			  }
d151 4
a154 2
#line 258 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d158 3
a160 6
#line 262 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SvUTF8(((SVOP*)(ps[(1) - (2)].val.p_tkval))->op_sv),
                                        savepv(SvPVX(((SVOP*)(ps[(1) - (2)].val.p_tkval))->op_sv)), (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.p_tkval),
			      (ps[(2) - (2)].val.opval) ? cLISTOPx((yyval.opval))->op_first : (yyval.opval), 'L');
d165 3
a167 5
#line 269 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SvUTF8(((SVOP*)(ps[(1) - (2)].val.p_tkval))->op_sv),
                                        savepv(SvPVX(((SVOP*)(ps[(1) - (2)].val.p_tkval))->op_sv)), (ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.p_tkval), cLISTOPx((yyval.opval))->op_first, 'L');
d172 5
a176 2
#line 278 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d180 2
a181 5
#line 280 "perly.y"
    {
			  (yyval.opval) = newOP(OP_NULL,0);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'p');
			;}
d185 2
a186 18
#line 285 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  prepend_madprops((ps[(1) - (4)].val.i_tkval)->tk_mad, (yyval.opval), 'F');
			  (ps[(1) - (4)].val.i_tkval)->tk_mad = 0;
			  token_free((ps[(1) - (4)].val.i_tkval));
#else
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			  if (CvOUTSIDE(fmtcv) && !CvUNIQUE(CvOUTSIDE(fmtcv))) {
			      SvREFCNT_inc_simple_void(fmtcv);
			      pad_add_anon(fmtcv, OP_NULL);
			  }
			;}
d190 3
a192 20
#line 303 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  {
			      OP* o = newSVOP(OP_ANONCODE, 0,
				(SV*)newATTRSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval)));
			      (yyval.opval) = newOP(OP_NULL,0);
			      op_getmad(o,(yyval.opval),'&');
			      op_getmad((ps[(3) - (6)].val.opval),(yyval.opval),'n');
			      op_getmad((ps[(4) - (6)].val.opval),(yyval.opval),'s');
			      op_getmad((ps[(5) - (6)].val.opval),(yyval.opval),'a');
			      token_getmad((ps[(1) - (6)].val.i_tkval),(yyval.opval),'d');
			      append_madprops((ps[(6) - (6)].val.opval)->op_madprop, (yyval.opval), 0);
			      (ps[(6) - (6)].val.opval)->op_madprop = 0;
			  }
#else
			  newATTRSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
d197 7
a203 11
#line 324 "perly.y"
    {
			  /* Unimplemented "my sub foo { }" */
			  SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newMYSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  token_getmad((ps[(1) - (6)].val.i_tkval),(yyval.opval),'d');
#else
			  newMYSUB((ps[(2) - (6)].val.ival), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
d208 7
a214 14
#line 336 "perly.y"
    {
#ifdef MAD
			  (yyval.opval) = package((ps[(3) - (4)].val.opval));
			  token_getmad((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  token_getmad((ps[(4) - (4)].val.i_tkval),(yyval.opval),';');
#else
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
d219 8
a226 2
#line 351 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ ;}
d230 3
a232 15
#line 353 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = utilize(IVAL((ps[(1) - (7)].val.i_tkval)), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  token_getmad((ps[(1) - (7)].val.i_tkval),(yyval.opval),'o');
			  token_getmad((ps[(7) - (7)].val.i_tkval),(yyval.opval),';');
			  if (PL_parser->rsfp_filters &&
				      AvFILLp(PL_parser->rsfp_filters) >= 0)
			      append_madprops(newMADPROP('!', MAD_NULL, NULL, 0), (yyval.opval), 0);
#else
			  utilize(IVAL((ps[(1) - (7)].val.i_tkval)), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
d236 2
a237 9
#line 368 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			;}
d241 2
a242 9
#line 377 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			;}
d246 3
a248 5
#line 386 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newGIVENOP((ps[(5) - (7)].val.opval), op_scope((ps[(7) - (7)].val.opval)), (PADOFFSET)(ps[(4) - (7)].val.ival)));
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
d253 12
a264 2
#line 392 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); ;}
d268 12
a279 2
#line 394 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); ;}
d283 10
a292 9
#line 396 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  TOKEN_GETMAD((ps[(1) - (8)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(2) - (8)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (8)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (8)].val.i_tkval));
d297 9
a305 9
#line 406 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  TOKEN_GETMAD((ps[(1) - (8)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(2) - (8)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (8)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (8)].val.i_tkval));
d310 9
a318 19
#line 417 "perly.y"
    {
			  OP *initop = IF_MAD((ps[(4) - (11)].val.opval) ? (ps[(4) - (11)].val.opval) : newOP(OP_NULL, 0), (ps[(4) - (11)].val.opval));
			  OP *forop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      scalar((ps[(6) - (11)].val.opval)), (ps[(11) - (11)].val.opval), (ps[(9) - (11)].val.opval), (ps[(8) - (11)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  DO_MAD({ forop = newUNOP(OP_NULL, 0, forop); })
			  (yyval.opval) = block_end((ps[(3) - (11)].val.ival), forop);
			  TOKEN_GETMAD((ps[(1) - (11)].val.i_tkval),(yyval.opval),'3');
			  TOKEN_GETMAD((ps[(2) - (11)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (11)].val.i_tkval),(yyval.opval),'1');
			  TOKEN_GETMAD((ps[(7) - (11)].val.i_tkval),(yyval.opval),'2');
			  TOKEN_GETMAD((ps[(10) - (11)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (11)].val.i_tkval));
d323 30
a352 9
#line 437 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (9)].val.ival), newFOROP(0, (ps[(4) - (9)].val.opval), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (9)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(2) - (9)].val.i_tkval),(yyval.opval),'d');
			  TOKEN_GETMAD((ps[(5) - (9)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(7) - (9)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (9)].val.i_tkval));
			;}
d356 5
a360 9
#line 446 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(4) - (8)].val.ival), newFOROP(0,
				      op_lvalue((ps[(2) - (8)].val.opval), OP_ENTERLOOP), (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (8)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(3) - (8)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(6) - (8)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (8)].val.i_tkval));
			;}
d364 6
a369 9
#line 455 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'W');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			;}
d373 4
a376 6
#line 464 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			;}
d380 2
a381 29
#line 470 "perly.y"
    {
			  int save_3_latefree = (ps[(3) - (5)].val.opval)->op_latefree;
			  (ps[(3) - (5)].val.opval)->op_latefree = 1;
			  package((ps[(3) - (5)].val.opval));
			  (ps[(3) - (5)].val.opval)->op_latefree = save_3_latefree;
			  if ((ps[(2) - (5)].val.opval)) {
			      int save_2_latefree = (ps[(2) - (5)].val.opval)->op_latefree;
			      (ps[(2) - (5)].val.opval)->op_latefree = 1;
			      package_version((ps[(2) - (5)].val.opval));
			      (ps[(2) - (5)].val.opval)->op_latefree = save_2_latefree;
			  }
			;}
    break;

  case 46:
#line 483 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), (OP*)NULL, 0);
			  op_free((ps[(3) - (8)].val.opval));
			  if ((ps[(2) - (8)].val.opval))
			      op_free((ps[(2) - (8)].val.opval));
			  TOKEN_GETMAD((ps[(4) - (8)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(8) - (8)].val.i_tkval),(yyval.opval),'}');
			  if (PL_parser->copline > (line_t)IVAL((ps[(4) - (8)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(4) - (8)].val.i_tkval));
			;}
d385 4
a388 16
#line 496 "perly.y"
    {
			  PL_parser->expect = XSTATE;
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),';');
			;}
    break;

  case 48:
#line 502 "perly.y"
    {
			  PL_parser->expect = XSTATE;
			  (yyval.opval) = IF_MAD(newOP(OP_NULL, 0), (OP*)NULL);
			  TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),';');
			  PL_parser->copline = NOLINE;
			;}
d392 2
a393 2
#line 512 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d397 2
a398 2
#line 514 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
d402 2
a403 4
#line 516 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'i');
			;}
d407 2
a408 4
#line 520 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'i');
			;}
d412 9
a420 10
#line 524 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			;}
    break;

  case 54:
#line 528 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
d425 2
a426 5
#line 532 "perly.y"
    { (yyval.opval) = newFOROP(0, (OP*)NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), (OP*)NULL);
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			  PL_parser->copline = (line_t)IVAL((ps[(2) - (3)].val.i_tkval));
			;}
d430 2
a431 2
#line 537 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); ;}
d435 2
a436 2
#line 542 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d440 2
a441 6
#line 544 "perly.y"
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
d445 2
a446 10
#line 550 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[(1) - (6)].val.i_tkval));
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((ps[(1) - (6)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),')');
			;}
d450 2
a451 2
#line 563 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
d455 3
a457 4
#line 565 "perly.y"
    {
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
d462 18
a479 4
#line 573 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); ;}
d483 6
a488 1
#line 579 "perly.y"
d493 10
a502 4
#line 585 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; ;}
d505 21
a525 3
  case 67:
#line 593 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); ;}
d528 2
a529 27
  case 68:
#line 598 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 69:
#line 602 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 70:
#line 606 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 71:
#line 609 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 72:
#line 610 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 73:
#line 614 "perly.y"
d534 2
a535 2
  case 74:
#line 620 "perly.y"
d540 2
a541 2
  case 75:
#line 625 "perly.y"
d546 2
a547 2
  case 76:
#line 630 "perly.y"
d556 2
a557 2
  case 77:
#line 640 "perly.y"
d561 2
a562 2
  case 79:
#line 646 "perly.y"
d566 2
a567 2
  case 80:
#line 648 "perly.y"
d573 2
a574 2
  case 81:
#line 652 "perly.y"
d583 2
a584 2
  case 82:
#line 662 "perly.y"
d590 2
a591 2
  case 83:
#line 666 "perly.y"
d600 2
a601 2
  case 84:
#line 675 "perly.y"
d605 2
a606 2
  case 85:
#line 676 "perly.y"
d616 42
a657 2
  case 86:
#line 687 "perly.y"
d663 2
a664 2
  case 87:
#line 691 "perly.y"
d670 2
a671 2
  case 88:
#line 695 "perly.y"
d677 2
a678 2
  case 90:
#line 703 "perly.y"
d683 1
a683 1
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), op);
d690 2
a691 2
  case 91:
#line 713 "perly.y"
d698 1
a698 1
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
d702 2
a703 2
  case 93:
#line 726 "perly.y"
d705 1
a705 1
				op_prepend_elem(OP_LIST, newGVREF(IVAL((ps[(1) - (3)].val.i_tkval)),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
d710 2
a711 2
  case 94:
#line 731 "perly.y"
d713 1
a713 1
				op_prepend_elem(OP_LIST, newGVREF(IVAL((ps[(1) - (5)].val.i_tkval)),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
d720 2
a721 2
  case 95:
#line 738 "perly.y"
d723 2
a724 2
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
d732 2
a733 2
  case 96:
#line 747 "perly.y"
d735 1
a735 1
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
d741 2
a742 2
  case 97:
#line 753 "perly.y"
d744 2
a745 2
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
d750 2
a751 2
  case 98:
#line 759 "perly.y"
d753 2
a754 2
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
d761 2
a762 2
  case 99:
#line 767 "perly.y"
d768 2
a769 2
  case 100:
#line 771 "perly.y"
d777 2
a778 2
  case 101:
#line 777 "perly.y"
d783 2
a784 2
  case 102:
#line 780 "perly.y"
d786 2
a787 2
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
d791 2
a792 2
  case 105:
#line 795 "perly.y"
d801 2
a802 2
  case 106:
#line 802 "perly.y"
d809 2
a810 2
  case 107:
#line 807 "perly.y"
d820 2
a821 2
  case 108:
#line 815 "perly.y"
d830 2
a831 2
  case 109:
#line 822 "perly.y"
d840 2
a841 2
  case 110:
#line 829 "perly.y"
d853 2
a854 2
  case 111:
#line 839 "perly.y"
d865 2
a866 2
  case 112:
#line 848 "perly.y"
d875 2
a876 2
  case 113:
#line 855 "perly.y"
d878 1
a878 1
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
d886 2
a887 2
  case 114:
#line 864 "perly.y"
d889 1
a889 1
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
d896 2
a897 2
  case 115:
#line 871 "perly.y"
d905 2
a906 2
  case 116:
#line 877 "perly.y"
d915 2
a916 10
  case 117:
#line 884 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 118:
#line 889 "perly.y"
d925 2
a926 2
  case 119:
#line 899 "perly.y"
d932 2
a933 2
  case 120:
#line 903 "perly.y"
d939 2
a940 2
  case 121:
#line 907 "perly.y"
d948 2
a949 2
  case 122:
#line 913 "perly.y"
d955 2
a956 2
  case 123:
#line 917 "perly.y"
d962 2
a963 2
  case 124:
#line 921 "perly.y"
d969 2
a970 2
  case 125:
#line 925 "perly.y"
d976 2
a977 2
  case 126:
#line 929 "perly.y"
d983 2
a984 2
  case 127:
#line 933 "perly.y"
d990 2
a991 2
  case 128:
#line 937 "perly.y"
d1005 2
a1006 2
  case 129:
#line 949 "perly.y"
d1012 2
a1013 2
  case 130:
#line 953 "perly.y"
d1019 2
a1020 2
  case 131:
#line 957 "perly.y"
d1026 2
a1027 2
  case 132:
#line 961 "perly.y"
d1036 2
a1037 2
  case 133:
#line 971 "perly.y"
d1043 2
a1044 2
  case 134:
#line 975 "perly.y"
d1053 2
a1054 2
  case 135:
#line 982 "perly.y"
d1060 2
a1061 2
  case 136:
#line 986 "perly.y"
d1067 2
a1068 2
  case 137:
#line 990 "perly.y"
d1070 1
a1070 1
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC));
d1075 2
a1076 2
  case 138:
#line 995 "perly.y"
d1078 1
a1078 1
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));
d1083 2
a1084 2
  case 139:
#line 1000 "perly.y"
d1086 1
a1086 1
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC));
d1091 2
a1092 2
  case 140:
#line 1005 "perly.y"
d1094 1
a1094 1
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC));
d1099 2
a1100 2
  case 141:
#line 1014 "perly.y"
d1107 2
a1108 2
  case 142:
#line 1019 "perly.y"
d1115 2
a1116 2
  case 143:
#line 1024 "perly.y"
d1124 2
a1125 2
  case 144:
#line 1030 "perly.y"
d1133 2
a1134 2
  case 145:
#line 1036 "perly.y"
d1143 2
a1144 2
  case 146:
#line 1047 "perly.y"
d1150 3
a1152 3
  case 147:
#line 1051 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));
d1157 2
a1158 2
  case 148:
#line 1055 "perly.y"
d1161 1
a1161 1
			    op_prepend_elem(OP_LIST,
d1172 2
a1173 2
  case 149:
#line 1067 "perly.y"
d1176 1
a1176 1
			    op_append_elem(OP_LIST,
d1188 2
a1189 2
  case 150:
#line 1080 "perly.y"
d1191 1
a1191 1
			    op_prepend_elem(OP_LIST,
d1199 2
a1200 2
  case 151:
#line 1088 "perly.y"
d1202 1
a1202 1
			    op_prepend_elem(OP_LIST,
d1211 2
a1212 2
  case 156:
#line 1104 "perly.y"
d1219 3
a1221 3
  case 157:
#line 1109 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, op_lvalue((ps[(2) - (2)].val.opval),OP_REFGEN));
d1226 2
a1227 2
  case 158:
#line 1113 "perly.y"
d1231 2
a1232 2
  case 159:
#line 1115 "perly.y"
d1238 2
a1239 2
  case 160:
#line 1119 "perly.y"
d1246 2
a1247 7
  case 161:
#line 1124 "perly.y"
    { (yyval.opval) = IF_MAD(newUNOP(OP_NULL,0,(ps[(1) - (1)].val.opval)), (ps[(1) - (1)].val.opval)); ;}
    break;

  case 162:
#line 1126 "perly.y"
d1254 2
a1255 2
  case 163:
#line 1131 "perly.y"
d1259 2
a1260 2
  case 164:
#line 1133 "perly.y"
d1264 2
a1265 2
  case 165:
#line 1135 "perly.y"
d1269 2
a1270 2
  case 166:
#line 1137 "perly.y"
d1274 2
a1275 2
  case 167:
#line 1139 "perly.y"
d1279 2
a1280 2
  case 168:
#line 1141 "perly.y"
d1284 3
a1286 3
  case 169:
#line 1143 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
d1296 3
a1298 3
  case 170:
#line 1152 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
d1310 2
a1311 2
  case 171:
#line 1163 "perly.y"
d1315 2
a1316 2
  case 172:
#line 1165 "perly.y"
d1320 2
a1321 2
  case 173:
#line 1167 "perly.y"
d1328 2
a1329 2
  case 174:
#line 1172 "perly.y"
d1332 1
a1332 1
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
d1344 2
a1345 2
  case 175:
#line 1185 "perly.y"
d1347 1
a1347 1
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
d1352 2
a1353 2
  case 176:
#line 1190 "perly.y"
d1360 2
a1361 2
  case 177:
#line 1195 "perly.y"
d1367 2
a1368 2
  case 178:
#line 1199 "perly.y"
d1374 2
a1375 2
  case 179:
#line 1203 "perly.y"
d1381 2
a1382 2
  case 180:
#line 1207 "perly.y"
d1388 2
a1389 2
  case 181:
#line 1211 "perly.y"
d1395 2
a1396 2
  case 182:
#line 1215 "perly.y"
d1402 2
a1403 2
  case 183:
#line 1219 "perly.y"
d1409 2
a1410 2
  case 184:
#line 1223 "perly.y"
d1414 2
a1415 2
  case 185:
#line 1225 "perly.y"
d1417 1
a1417 1
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); ;}
d1420 2
a1421 2
  case 186:
#line 1228 "perly.y"
d1427 2
a1428 2
  case 187:
#line 1232 "perly.y"
d1436 2
a1437 15
  case 188:
#line 1238 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 189:
#line 1240 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval);
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 190:
#line 1245 "perly.y"
d1442 2
a1443 2
  case 191:
#line 1248 "perly.y"
d1454 2
a1455 2
  case 192:
#line 1257 "perly.y"
d1463 2
a1464 2
  case 193:
#line 1263 "perly.y"
d1471 2
a1472 2
  case 196:
#line 1270 "perly.y"
d1480 2
a1481 2
  case 198:
#line 1280 "perly.y"
d1491 2
a1492 2
  case 199:
#line 1288 "perly.y"
d1498 2
a1499 2
  case 200:
#line 1295 "perly.y"
d1506 2
a1507 2
  case 201:
#line 1300 "perly.y"
d1514 2
a1515 2
  case 202:
#line 1305 "perly.y"
d1519 2
a1520 2
  case 203:
#line 1307 "perly.y"
d1524 2
a1525 2
  case 204:
#line 1309 "perly.y"
d1529 2
a1530 2
  case 205:
#line 1314 "perly.y"
d1534 2
a1535 2
  case 206:
#line 1316 "perly.y"
d1539 2
a1540 2
  case 207:
#line 1320 "perly.y"
d1544 2
a1545 2
  case 208:
#line 1322 "perly.y"
d1549 10
a1558 4
  case 209:
#line 1326 "perly.y"
    { (yyval.i_tkval) = (ps[(1) - (1)].val.i_tkval); ;}
    break;
d1560 1
a1560 3
  case 210:
#line 1328 "perly.y"
    { munge_qwlist_to_paren_list((ps[(1) - (1)].val.opval)); ;}
d1563 2
a1564 7
  case 211:
#line 1330 "perly.y"
    { (yyval.i_tkval) = (ps[(3) - (3)].val.i_tkval); ;}
    break;

  case 212:
#line 1336 "perly.y"
d1568 2
a1569 2
  case 213:
#line 1340 "perly.y"
d1575 2
a1576 2
  case 214:
#line 1346 "perly.y"
d1582 2
a1583 2
  case 215:
#line 1352 "perly.y"
d1589 2
a1590 2
  case 216:
#line 1358 "perly.y"
d1596 2
a1597 2
  case 217:
#line 1364 "perly.y"
d1603 2
a1604 2
  case 218:
#line 1370 "perly.y"
d1610 2
a1611 2
  case 219:
#line 1377 "perly.y"
d1615 2
a1616 2
  case 220:
#line 1379 "perly.y"
d1620 3
a1622 3
  case 221:
#line 1381 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); ;}
d1625 2
a1626 2
  case 222:
#line 1384 "perly.y"
a1629 3

/* Line 1267 of yacc.c.  */

a1631 5

/* Generated from:
 * 047d7d5048e78a17bc586b7bb9a0f0e9dedd5cd43b30e486482b1ff8f955ddcb perly.y
 * 53f57d7143a42b3c008841a14d158bcf9cab64b2904b07ef5e95051fe9a8a875 regen_perly.pl
 * ex: set ro: */
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d8 1
a8 1
#line 141 "perly.y"
d11 1
a11 1
			}
d15 1
a15 1
#line 145 "perly.y"
d19 1
a19 1
			}
d23 1
a23 1
#line 150 "perly.y"
d26 1
a26 1
			}
d30 1
a30 1
#line 154 "perly.y"
d34 1
a34 1
			}
d38 1
a38 1
#line 159 "perly.y"
d41 1
a41 1
			}
d45 1
a45 1
#line 163 "perly.y"
d52 1
a52 1
			}
d56 1
a56 1
#line 171 "perly.y"
d59 1
a59 1
			}
d63 1
a63 1
#line 175 "perly.y"
d70 1
a70 1
			}
d74 1
a74 1
#line 183 "perly.y"
d77 1
a77 1
			}
d81 1
a81 1
#line 187 "perly.y"
d88 1
a88 1
			}
d92 1
a92 1
#line 195 "perly.y"
d95 1
a95 1
			}
d99 1
a99 1
#line 199 "perly.y"
d103 1
a103 1
			}
d107 1
a107 1
#line 207 "perly.y"
d113 1
a113 1
			}
d118 1
a118 6
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (7)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(7) - (7)].val.i_tkval),(yyval.opval),'}');
			}
d122 2
a123 2
#line 226 "perly.y"
    { (yyval.ival) = block_start(TRUE); }
d127 1
a127 1
#line 230 "perly.y"
d133 1
a133 1
			}
d137 2
a138 2
#line 239 "perly.y"
    { (yyval.ival) = block_start(FALSE); }
d142 2
a143 2
#line 244 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d147 1
a147 1
#line 246 "perly.y"
d152 1
a152 1
			}
d156 1
a156 15
#line 255 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 22:
#line 257 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 23:
#line 266 "perly.y"
d163 1
a163 1
			}
d166 3
a168 3
  case 24:
#line 274 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d171 2
a172 2
  case 25:
#line 278 "perly.y"
d174 2
a175 3
			  (yyval.opval) = newSTATEOP(SVf_UTF8
					   * PVAL((ps[(1) - (2)].val.p_tkval))[strlen(PVAL((ps[(1) - (2)].val.p_tkval)))+1],
					  PVAL((ps[(1) - (2)].val.p_tkval)), (ps[(2) - (2)].val.opval));
d178 1
a178 1
			}
d181 2
a182 2
  case 26:
#line 286 "perly.y"
d184 2
a185 3
			  (yyval.opval) = newSTATEOP(SVf_UTF8
					   * PVAL((ps[(1) - (2)].val.p_tkval))[strlen(PVAL((ps[(1) - (2)].val.p_tkval)))+1],
					  PVAL((ps[(1) - (2)].val.p_tkval)), (ps[(2) - (2)].val.opval));
d187 1
a187 1
			}
d190 3
a192 3
  case 27:
#line 296 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d195 2
a196 2
  case 28:
#line 298 "perly.y"
d200 1
a200 1
			}
d203 2
a204 2
  case 29:
#line 303 "perly.y"
d207 1
d217 1
a217 1
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv))) {
d221 1
a221 1
			}
d224 2
a225 27
  case 30:
#line 320 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  PL_parser->in_my = 0;
			  PL_parser->in_my_stash = NULL;
			}
    break;

  case 31:
#line 342 "perly.y"
d231 1
a231 7
				(SV*)(
#endif
			  (ps[(2) - (7)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
#ifdef MAD
				));
d234 6
a239 6
			      op_getmad((ps[(2) - (7)].val.opval),(yyval.opval),'n');
			      op_getmad((ps[(5) - (7)].val.opval),(yyval.opval),'s');
			      op_getmad((ps[(6) - (7)].val.opval),(yyval.opval),'a');
			      token_getmad((ps[(1) - (7)].val.i_tkval),(yyval.opval),'d');
			      append_madprops((ps[(7) - (7)].val.opval)->op_madprop, (yyval.opval), 0);
			      (ps[(7) - (7)].val.opval)->op_madprop = 0;
d242 1
a242 1
			  ;
d245 1
a245 2
			  intro_my();
			}
d248 17
a264 2
  case 32:
#line 370 "perly.y"
d278 1
a278 1
			}
d281 3
a283 3
  case 33:
#line 385 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
d286 2
a287 2
  case 34:
#line 387 "perly.y"
d301 1
a301 1
			}
d304 2
a305 2
  case 35:
#line 402 "perly.y"
d313 1
a313 1
			}
d316 2
a317 2
  case 36:
#line 411 "perly.y"
d325 1
a325 1
			}
d328 2
a329 2
  case 37:
#line 420 "perly.y"
d331 4
a334 9
			  const PADOFFSET offset = pad_findmy_pvs("$_", 0);
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival),
				  newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)),
				    offset == NOT_IN_PAD
				    || PAD_COMPNAME_FLAGS_isOUR(offset)
				      ? 0
				      : offset));
			  PL_parser->copline = (line_t)IVAL((ps[(1) - (6)].val.i_tkval));
			}
d337 3
a339 3
  case 38:
#line 431 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
d342 3
a344 3
  case 39:
#line 433 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
d347 2
a348 2
  case 40:
#line 435 "perly.y"
d357 1
a357 1
			}
d360 2
a361 2
  case 41:
#line 445 "perly.y"
d370 1
a370 1
			}
d373 2
a374 2
  case 42:
#line 456 "perly.y"
d393 1
a393 1
			}
d396 2
a397 2
  case 43:
#line 476 "perly.y"
d405 1
a405 1
			}
d408 2
a409 2
  case 44:
#line 485 "perly.y"
d417 1
a417 1
			}
d420 2
a421 2
  case 45:
#line 494 "perly.y"
d429 1
a429 1
			}
d432 2
a433 2
  case 46:
#line 503 "perly.y"
d438 1
a438 1
			}
d441 2
a442 2
  case 47:
#line 509 "perly.y"
d444 2
d447 1
d449 2
d452 1
d454 1
a454 1
			}
d457 2
a458 2
  case 48:
#line 516 "perly.y"
d463 3
d470 1
a470 1
			}
d473 2
a474 2
  case 49:
#line 526 "perly.y"
d479 1
a479 1
			}
d482 2
a483 2
  case 50:
#line 532 "perly.y"
d489 1
a489 1
			}
d492 3
a494 22
  case 51:
#line 542 "perly.y"
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      DO_MAD(term = newUNOP(OP_NULL, 0, term));
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
#ifdef MAD
			      OP *op = newNULLLIST();
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), op);
#else
			      list = (ps[(1) - (2)].val.opval);
#endif
			  }
			  if (PL_parser->copline == NOLINE)
			       PL_parser->copline = CopLINE(PL_curcop)-1;
			  else PL_parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  convert(OP_FORMLINE, 0, list));
			}
d497 3
a499 3
  case 52:
#line 565 "perly.y"
    { (yyval.opval) = NULL; }
d502 2
a503 17
  case 53:
#line 567 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
    break;

  case 54:
#line 572 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 55:
#line 574 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 56:
#line 576 "perly.y"
d506 1
a506 1
			}
d509 2
a510 2
  case 57:
#line 580 "perly.y"
d513 1
a513 1
			}
d516 2
a517 2
  case 58:
#line 584 "perly.y"
d520 1
a520 1
			}
d523 2
a524 2
  case 59:
#line 588 "perly.y"
d527 1
a527 1
			}
d530 2
a531 2
  case 60:
#line 592 "perly.y"
d535 1
a535 1
			}
d538 3
a540 3
  case 61:
#line 597 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
d543 3
a545 3
  case 62:
#line 602 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d548 2
a549 2
  case 63:
#line 604 "perly.y"
d554 1
a554 1
			}
d557 2
a558 2
  case 64:
#line 610 "perly.y"
d567 1
a567 1
			}
d570 3
a572 3
  case 65:
#line 623 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d575 2
a576 2
  case 66:
#line 625 "perly.y"
d580 1
a580 1
			}
d583 2
a584 2
  case 67:
#line 633 "perly.y"
d587 1
a587 1
			  intro_my(); }
d590 3
a592 3
  case 68:
#line 639 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d595 2
a596 2
  case 70:
#line 645 "perly.y"
d599 1
a599 1
			  (yyval.opval) = tmplval.opval; }
d602 3
a604 3
  case 72:
#line 653 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
d607 3
a609 3
  case 73:
#line 658 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
d612 3
a614 3
  case 74:
#line 662 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
d617 3
a619 3
  case 75:
#line 666 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
d622 3
a624 3
  case 76:
#line 669 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d627 3
a629 3
  case 77:
#line 670 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d632 2
a633 2
  case 78:
#line 674 "perly.y"
d635 1
a635 1
			    SAVEFREESV(PL_compcv); }
d638 2
a639 2
  case 79:
#line 680 "perly.y"
d641 1
a641 1
			    SAVEFREESV(PL_compcv); }
d644 2
a645 2
  case 80:
#line 685 "perly.y"
d647 11
a657 1
			    SAVEFREESV(PL_compcv); }
d660 3
a662 3
  case 83:
#line 696 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d665 3
a667 3
  case 85:
#line 702 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d670 2
a671 2
  case 86:
#line 704 "perly.y"
d674 1
a674 1
			}
d677 2
a678 2
  case 87:
#line 708 "perly.y"
d684 1
a684 1
			}
d687 2
a688 2
  case 88:
#line 718 "perly.y"
d691 1
a691 1
			}
d694 2
a695 2
  case 89:
#line 722 "perly.y"
d701 1
a701 1
			}
d704 3
a706 3
  case 90:
#line 731 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d709 2
a710 2
  case 91:
#line 732 "perly.y"
d717 1
a717 1
			}
d720 2
a721 2
  case 92:
#line 743 "perly.y"
d724 1
a724 1
			}
d727 2
a728 2
  case 93:
#line 747 "perly.y"
d731 1
a731 1
			}
d734 2
a735 2
  case 94:
#line 751 "perly.y"
d738 1
a738 1
			}
d741 2
a742 2
  case 96:
#line 759 "perly.y"
d751 1
a751 1
			}
d754 2
a755 2
  case 97:
#line 769 "perly.y"
d763 1
a763 1
			}
d766 2
a767 2
  case 99:
#line 782 "perly.y"
d771 1
a771 1
			}
d774 2
a775 2
  case 100:
#line 787 "perly.y"
d781 1
a781 1
			}
d784 2
a785 2
  case 101:
#line 794 "perly.y"
d793 1
a793 1
			}
d796 2
a797 2
  case 102:
#line 803 "perly.y"
d802 1
a802 1
			}
d805 2
a806 2
  case 103:
#line 809 "perly.y"
d811 1
a811 1
			}
d814 2
a815 2
  case 104:
#line 815 "perly.y"
d822 1
a822 1
			}
d825 2
a826 2
  case 105:
#line 823 "perly.y"
d829 1
a829 1
			}
d832 2
a833 2
  case 106:
#line 827 "perly.y"
d838 1
a838 1
			}
d841 2
a842 2
  case 107:
#line 833 "perly.y"
d844 1
a844 1
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, (OP*)NULL, (ps[(3) - (3)].val.opval)); }
d847 2
a848 2
  case 108:
#line 836 "perly.y"
d852 1
a852 1
			}
d855 2
a856 2
  case 111:
#line 851 "perly.y"
d862 1
a862 1
			}
d865 2
a866 2
  case 112:
#line 858 "perly.y"
d870 1
a870 1
			}
d873 2
a874 2
  case 113:
#line 863 "perly.y"
d881 1
a881 1
			}
d884 2
a885 2
  case 114:
#line 871 "perly.y"
d891 1
a891 1
			}
d894 2
a895 2
  case 115:
#line 878 "perly.y"
d901 1
a901 1
			}
d904 2
a905 2
  case 116:
#line 885 "perly.y"
d914 1
a914 1
			}
d917 2
a918 2
  case 117:
#line 895 "perly.y"
d926 1
a926 1
			}
d929 2
a930 2
  case 118:
#line 904 "perly.y"
d936 1
a936 1
			}
d939 2
a940 2
  case 119:
#line 911 "perly.y"
d947 1
a947 1
			}
d950 2
a951 2
  case 120:
#line 920 "perly.y"
d957 1
a957 1
			}
d960 2
a961 2
  case 121:
#line 927 "perly.y"
d966 1
a966 1
			}
d969 2
a970 2
  case 122:
#line 933 "perly.y"
d976 1
a976 1
			}
d979 2
a980 2
  case 123:
#line 940 "perly.y"
d984 1
a984 1
			}
d987 2
a988 2
  case 124:
#line 945 "perly.y"
d994 1
a994 1
			}
d997 2
a998 2
  case 125:
#line 955 "perly.y"
d1001 1
a1001 1
			}
d1004 2
a1005 2
  case 126:
#line 959 "perly.y"
d1008 1
a1008 1
			}
d1011 2
a1012 2
  case 127:
#line 963 "perly.y"
d1017 1
a1017 1
			}
d1020 2
a1021 2
  case 128:
#line 969 "perly.y"
d1024 1
a1024 1
			}
d1027 2
a1028 2
  case 129:
#line 973 "perly.y"
d1031 1
a1031 1
			}
d1034 2
a1035 2
  case 130:
#line 977 "perly.y"
d1038 1
a1038 1
			}
d1041 2
a1042 2
  case 131:
#line 981 "perly.y"
d1045 1
a1045 1
			}
d1048 2
a1049 2
  case 132:
#line 985 "perly.y"
d1052 1
a1052 1
			}
d1055 2
a1056 2
  case 133:
#line 989 "perly.y"
d1059 1
a1059 1
			}
d1062 2
a1063 2
  case 134:
#line 993 "perly.y"
d1073 2
a1074 2
			    });
			}
d1077 2
a1078 2
  case 135:
#line 1005 "perly.y"
d1081 1
a1081 1
			}
d1084 2
a1085 2
  case 136:
#line 1009 "perly.y"
d1088 1
a1088 1
			}
d1091 2
a1092 2
  case 137:
#line 1013 "perly.y"
d1095 1
a1095 1
			}
d1098 2
a1099 2
  case 138:
#line 1017 "perly.y"
d1105 1
a1105 1
			}
d1108 2
a1109 2
  case 139:
#line 1027 "perly.y"
d1112 1
a1112 1
			}
d1115 2
a1116 2
  case 140:
#line 1031 "perly.y"
d1122 1
a1122 1
			}
d1125 2
a1126 2
  case 141:
#line 1038 "perly.y"
d1129 1
a1129 1
			}
d1132 2
a1133 2
  case 142:
#line 1042 "perly.y"
d1136 1
a1136 1
			}
d1139 2
a1140 2
  case 143:
#line 1046 "perly.y"
d1144 1
a1144 1
			}
d1147 2
a1148 2
  case 144:
#line 1051 "perly.y"
d1152 1
a1152 1
			}
d1155 2
a1156 2
  case 145:
#line 1056 "perly.y"
d1160 1
a1160 1
			}
d1163 2
a1164 2
  case 146:
#line 1061 "perly.y"
d1168 1
a1168 1
			}
d1171 2
a1172 2
  case 147:
#line 1070 "perly.y"
d1176 1
a1176 1
			}
d1179 2
a1180 2
  case 148:
#line 1075 "perly.y"
d1184 1
a1184 1
			}
d1187 2
a1188 2
  case 149:
#line 1080 "perly.y"
d1193 1
a1193 1
			}
d1196 2
a1197 2
  case 150:
#line 1086 "perly.y"
d1202 1
a1202 1
			}
d1205 2
a1206 2
  case 151:
#line 1092 "perly.y"
d1212 1
a1212 1
			}
d1215 2
a1216 2
  case 152:
#line 1103 "perly.y"
d1219 1
a1219 1
			}
d1222 2
a1223 2
  case 153:
#line 1107 "perly.y"
d1226 1
a1226 1
			}
d1229 2
a1230 2
  case 154:
#line 1111 "perly.y"
d1241 1
a1241 1
			}
d1244 2
a1245 2
  case 155:
#line 1123 "perly.y"
d1257 1
a1257 1
			}
d1260 2
a1261 2
  case 156:
#line 1136 "perly.y"
d1268 1
a1268 1
			}
d1271 2
a1272 2
  case 157:
#line 1144 "perly.y"
d1280 1
a1280 1
			}
d1283 2
a1284 2
  case 162:
#line 1160 "perly.y"
d1288 1
a1288 1
			}
d1291 2
a1292 2
  case 163:
#line 1165 "perly.y"
d1295 1
a1295 1
			}
d1298 3
a1300 3
  case 164:
#line 1169 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1303 2
a1304 2
  case 165:
#line 1171 "perly.y"
d1307 1
a1307 1
			}
d1310 2
a1311 2
  case 166:
#line 1175 "perly.y"
d1315 1
a1315 1
			}
d1318 3
a1320 3
  case 167:
#line 1180 "perly.y"
    { (yyval.opval) = IF_MAD(newUNOP(OP_NULL,0,(ps[(1) - (1)].val.opval)), (ps[(1) - (1)].val.opval)); }
d1323 2
a1324 2
  case 168:
#line 1182 "perly.y"
d1328 1
a1328 1
			}
d1331 3
a1333 3
  case 169:
#line 1187 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1336 3
a1338 3
  case 170:
#line 1189 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1341 3
a1343 3
  case 171:
#line 1191 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1346 3
a1348 3
  case 172:
#line 1193 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1351 3
a1353 3
  case 173:
#line 1195 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
d1356 3
a1358 3
  case 174:
#line 1197 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1361 2
a1362 2
  case 175:
#line 1199 "perly.y"
d1370 1
a1370 1
			}
d1373 2
a1374 2
  case 176:
#line 1208 "perly.y"
d1384 1
a1384 1
			}
d1387 3
a1389 3
  case 177:
#line 1219 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1392 3
a1394 3
  case 178:
#line 1221 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
d1397 2
a1398 2
  case 179:
#line 1223 "perly.y"
d1402 1
a1402 1
			}
d1405 2
a1406 2
  case 180:
#line 1228 "perly.y"
d1417 2
a1418 2
			  });
			}
d1421 2
a1422 2
  case 181:
#line 1241 "perly.y"
d1426 1
a1426 1
			}
d1429 2
a1430 2
  case 182:
#line 1246 "perly.y"
d1434 1
a1434 1
			}
d1437 2
a1438 2
  case 183:
#line 1251 "perly.y"
d1441 1
a1441 1
			}
d1444 2
a1445 2
  case 184:
#line 1255 "perly.y"
d1448 1
a1448 1
			}
d1451 2
a1452 2
  case 185:
#line 1259 "perly.y"
d1455 1
a1455 1
			}
d1458 2
a1459 2
  case 186:
#line 1263 "perly.y"
d1462 1
a1462 1
			}
d1465 2
a1466 2
  case 187:
#line 1267 "perly.y"
d1469 1
a1469 1
			}
d1472 2
a1473 2
  case 188:
#line 1271 "perly.y"
d1476 1
a1476 1
			}
d1479 2
a1480 2
  case 189:
#line 1275 "perly.y"
d1483 1
a1483 1
			}
d1486 3
a1488 3
  case 190:
#line 1279 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
d1491 2
a1492 2
  case 191:
#line 1281 "perly.y"
d1494 1
a1494 1
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
d1497 2
a1498 2
  case 192:
#line 1284 "perly.y"
d1501 1
a1501 1
			}
d1504 2
a1505 2
  case 193:
#line 1288 "perly.y"
d1510 1
a1510 1
			}
d1513 3
a1515 3
  case 194:
#line 1294 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1518 2
a1519 2
  case 195:
#line 1296 "perly.y"
d1523 1
a1523 1
			}
d1526 2
a1527 2
  case 196:
#line 1301 "perly.y"
d1529 1
a1529 1
				scalar((ps[(1) - (1)].val.opval))); }
d1532 2
a1533 2
  case 197:
#line 1304 "perly.y"
d1541 1
a1541 1
			}
d1544 2
a1545 2
  case 198:
#line 1313 "perly.y"
d1550 1
a1550 1
			}
d1553 6
a1558 12
  case 199:
#line 1319 "perly.y"
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			}
d1561 2
a1562 10
  case 200:
#line 1330 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (5)].val.opval), (ps[(4) - (5)].val.opval), 1, (ps[(2) - (5)].val.ival));
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			}
    break;

  case 203:
#line 1337 "perly.y"
d1567 1
a1567 1
			}
d1570 2
a1571 2
  case 205:
#line 1347 "perly.y"
d1577 2
a1578 2
			  );
			}
d1581 2
a1582 2
  case 206:
#line 1355 "perly.y"
d1585 1
a1585 1
			}
d1588 2
a1589 2
  case 207:
#line 1362 "perly.y"
d1593 1
a1593 1
			}
d1596 2
a1597 2
  case 208:
#line 1367 "perly.y"
d1601 1
a1601 1
			}
d1604 18
a1621 3
  case 209:
#line 1372 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1624 3
a1626 3
  case 210:
#line 1374 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1629 3
a1631 3
  case 211:
#line 1376 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1634 3
a1636 3
  case 212:
#line 1381 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d1639 3
a1641 3
  case 213:
#line 1383 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1644 3
a1646 3
  case 214:
#line 1387 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d1649 3
a1651 3
  case 215:
#line 1389 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1654 3
a1656 3
  case 216:
#line 1395 "perly.y"
    { PL_parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
d1659 2
a1660 2
  case 217:
#line 1399 "perly.y"
d1663 1
a1663 1
			}
d1666 2
a1667 2
  case 218:
#line 1405 "perly.y"
d1670 1
a1670 1
			}
d1673 2
a1674 2
  case 219:
#line 1411 "perly.y"
d1677 1
a1677 1
			}
d1680 2
a1681 2
  case 220:
#line 1417 "perly.y"
d1684 1
a1684 1
			}
d1687 2
a1688 2
  case 221:
#line 1423 "perly.y"
d1691 1
a1691 1
			}
d1694 2
a1695 2
  case 222:
#line 1429 "perly.y"
d1698 1
a1698 1
			}
d1701 3
a1703 3
  case 223:
#line 1436 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
d1706 3
a1708 3
  case 224:
#line 1438 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
d1711 3
a1713 3
  case 225:
#line 1440 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
d1716 3
a1718 3
  case 226:
#line 1443 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1721 3
d1728 2
a1729 2
 * 28c2c7738eefc00762e227af0363c729186c992e9127e0c935684cccbf3a3b4f perly.y
 * 5c9d2a0262457fe9b70073fc8ad6c188f812f38ad57712b7e2f53daa01b297cc regen_perly.pl
@


1.1.1.6
log
@Import perl-5.20.1
@
text
@d8 1
a8 1
#line 142 "perly.y"
d15 1
a15 1
#line 146 "perly.y"
d23 1
a23 1
#line 151 "perly.y"
d30 1
a30 1
#line 155 "perly.y"
d38 1
a38 1
#line 160 "perly.y"
d45 1
a45 1
#line 164 "perly.y"
d56 1
a56 1
#line 172 "perly.y"
d63 1
a63 1
#line 176 "perly.y"
d74 1
a74 1
#line 184 "perly.y"
d81 1
a81 1
#line 188 "perly.y"
d92 1
a92 1
#line 196 "perly.y"
d99 1
a99 1
#line 200 "perly.y"
d107 1
a107 1
#line 208 "perly.y"
d117 1
a117 1
#line 218 "perly.y"
d127 1
a127 1
#line 227 "perly.y"
d132 1
a132 1
#line 231 "perly.y"
d142 1
a142 1
#line 240 "perly.y"
d147 1
a147 1
#line 245 "perly.y"
d152 1
a152 1
#line 247 "perly.y"
d161 1
a161 1
#line 256 "perly.y"
d166 1
a166 1
#line 258 "perly.y"
d175 1
a175 1
#line 267 "perly.y"
d186 1
a186 1
#line 275 "perly.y"
d191 1
a191 1
#line 279 "perly.y"
d202 1
a202 1
#line 287 "perly.y"
d212 1
a212 1
#line 297 "perly.y"
d217 1
a217 1
#line 299 "perly.y"
d225 1
a225 1
#line 304 "perly.y"
d245 1
a245 1
#line 321 "perly.y"
d270 1
a270 1
#line 343 "perly.y"
d301 1
a301 1
#line 371 "perly.y"
d319 1
a319 1
#line 386 "perly.y"
d324 1
a324 1
#line 388 "perly.y"
d342 1
a342 1
#line 403 "perly.y"
d354 1
a354 1
#line 412 "perly.y"
d366 1
a366 1
#line 421 "perly.y"
d380 1
a380 1
#line 432 "perly.y"
d385 1
a385 1
#line 434 "perly.y"
d390 1
a390 1
#line 436 "perly.y"
d403 1
a403 1
#line 446 "perly.y"
d416 1
a416 1
#line 457 "perly.y"
d439 1
a439 1
#line 477 "perly.y"
d451 1
a451 1
#line 486 "perly.y"
d463 1
a463 1
#line 495 "perly.y"
d475 1
a475 1
#line 504 "perly.y"
d484 1
a484 1
#line 510 "perly.y"
d494 1
a494 1
#line 517 "perly.y"
d507 1
a507 1
#line 527 "perly.y"
d516 1
a516 1
#line 533 "perly.y"
d526 1
a526 1
#line 543 "perly.y"
d550 1
a550 1
#line 566 "perly.y"
d555 1
a555 1
#line 568 "perly.y"
d560 1
a560 1
#line 573 "perly.y"
d565 1
a565 1
#line 575 "perly.y"
d570 1
a570 1
#line 577 "perly.y"
d577 1
a577 1
#line 581 "perly.y"
d584 1
a584 1
#line 585 "perly.y"
d591 1
a591 1
#line 589 "perly.y"
d598 1
a598 1
#line 593 "perly.y"
d606 1
a606 1
#line 598 "perly.y"
d611 1
a611 1
#line 603 "perly.y"
d616 1
a616 1
#line 605 "perly.y"
d625 1
a625 1
#line 611 "perly.y"
d638 1
a638 1
#line 624 "perly.y"
d643 1
a643 1
#line 626 "perly.y"
d651 1
a651 1
#line 634 "perly.y"
d658 1
a658 1
#line 640 "perly.y"
d663 1
a663 1
#line 646 "perly.y"
d670 1
a670 1
#line 654 "perly.y"
d675 1
a675 1
#line 659 "perly.y"
d680 1
a680 1
#line 663 "perly.y"
d685 1
a685 1
#line 667 "perly.y"
d690 1
a690 1
#line 670 "perly.y"
d695 1
a695 1
#line 671 "perly.y"
d700 1
a700 1
#line 675 "perly.y"
d706 1
a706 1
#line 681 "perly.y"
d712 1
a712 1
#line 686 "perly.y"
d718 1
a718 1
#line 697 "perly.y"
d723 1
a723 1
#line 703 "perly.y"
d728 1
a728 1
#line 705 "perly.y"
d735 1
a735 1
#line 709 "perly.y"
d745 1
a745 1
#line 719 "perly.y"
d752 1
a752 1
#line 723 "perly.y"
d762 2
a763 2
#line 732 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
d767 1
a767 40
#line 734 "perly.y"
    {
			  if (!FEATURE_SIGNATURES_IS_ENABLED)
			    Perl_croak(aTHX_ "Experimental "
				"subroutine signatures not enabled");
			  Perl_ck_warner_d(aTHX_
				packWARN(WARN_EXPERIMENTAL__SIGNATURES),
				"The signatures feature is experimental");
			  (yyval.opval) = parse_subsignature();
			}
    break;

  case 92:
#line 744 "perly.y"
    {
			  (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(2) - (3)].val.opval),
				newSTATEOP(0, NULL, sawparens(newNULLLIST())));
			  PL_parser->expect = XBLOCK;
			}
    break;

  case 93:
#line 753 "perly.y"
    {
			  if (PL_parser->copline > (line_t)IVAL((ps[(3) - (5)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(3) - (5)].val.i_tkval));
			  (yyval.opval) = block_end((ps[(1) - (5)].val.ival),
				op_append_list(OP_LINESEQ, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)));
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			}
    break;

  case 94:
#line 764 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 95:
#line 765 "perly.y"
d777 2
a778 2
  case 96:
#line 776 "perly.y"
d784 2
a785 2
  case 97:
#line 780 "perly.y"
d791 2
a792 2
  case 98:
#line 784 "perly.y"
d798 2
a799 2
  case 100:
#line 792 "perly.y"
d811 2
a812 2
  case 101:
#line 802 "perly.y"
d823 2
a824 2
  case 103:
#line 815 "perly.y"
d831 2
a832 2
  case 104:
#line 820 "perly.y"
d841 2
a842 2
  case 105:
#line 827 "perly.y"
d853 2
a854 2
  case 106:
#line 836 "perly.y"
d862 2
a863 2
  case 107:
#line 842 "perly.y"
d871 2
a872 2
  case 108:
#line 848 "perly.y"
d882 2
a883 2
  case 109:
#line 856 "perly.y"
d889 2
a890 2
  case 110:
#line 860 "perly.y"
d898 2
a899 2
  case 111:
#line 866 "perly.y"
d904 2
a905 2
  case 112:
#line 869 "perly.y"
d912 2
a913 2
  case 115:
#line 884 "perly.y"
d922 2
a923 2
  case 116:
#line 891 "perly.y"
d930 2
a931 2
  case 117:
#line 896 "perly.y"
d941 2
a942 2
  case 118:
#line 904 "perly.y"
d951 2
a952 2
  case 119:
#line 911 "perly.y"
d961 2
a962 2
  case 120:
#line 918 "perly.y"
d974 2
a975 2
  case 121:
#line 928 "perly.y"
d986 2
a987 2
  case 122:
#line 937 "perly.y"
d996 2
a997 2
  case 123:
#line 944 "perly.y"
d1007 2
a1008 2
  case 124:
#line 953 "perly.y"
d1017 2
a1018 2
  case 125:
#line 960 "perly.y"
d1026 2
a1027 2
  case 126:
#line 966 "perly.y"
d1036 2
a1037 2
  case 127:
#line 973 "perly.y"
d1044 2
a1045 2
  case 128:
#line 978 "perly.y"
d1054 2
a1055 2
  case 129:
#line 988 "perly.y"
d1061 2
a1062 2
  case 130:
#line 992 "perly.y"
d1068 2
a1069 2
  case 131:
#line 996 "perly.y"
d1077 2
a1078 2
  case 132:
#line 1002 "perly.y"
d1084 2
a1085 2
  case 133:
#line 1006 "perly.y"
d1091 2
a1092 2
  case 134:
#line 1010 "perly.y"
d1098 2
a1099 2
  case 135:
#line 1014 "perly.y"
d1105 2
a1106 2
  case 136:
#line 1018 "perly.y"
d1112 2
a1113 2
  case 137:
#line 1022 "perly.y"
d1119 2
a1120 2
  case 138:
#line 1026 "perly.y"
d1134 2
a1135 2
  case 139:
#line 1038 "perly.y"
d1141 2
a1142 2
  case 140:
#line 1042 "perly.y"
d1148 2
a1149 2
  case 141:
#line 1046 "perly.y"
d1155 2
a1156 2
  case 142:
#line 1050 "perly.y"
d1165 2
a1166 2
  case 143:
#line 1060 "perly.y"
d1172 2
a1173 2
  case 144:
#line 1064 "perly.y"
d1182 2
a1183 2
  case 145:
#line 1071 "perly.y"
d1189 2
a1190 2
  case 146:
#line 1075 "perly.y"
d1196 2
a1197 2
  case 147:
#line 1079 "perly.y"
d1204 2
a1205 2
  case 148:
#line 1084 "perly.y"
d1212 2
a1213 17
  case 149:
#line 1089 "perly.y"
    { (yyval.opval) = convert(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'o');
			}
    break;

  case 150:
#line 1101 "perly.y"
d1220 2
a1221 2
  case 151:
#line 1106 "perly.y"
d1228 2
a1229 2
  case 152:
#line 1115 "perly.y"
d1236 2
a1237 2
  case 153:
#line 1120 "perly.y"
d1244 2
a1245 2
  case 154:
#line 1125 "perly.y"
d1253 2
a1254 2
  case 155:
#line 1131 "perly.y"
d1262 2
a1263 2
  case 156:
#line 1137 "perly.y"
d1272 2
a1273 2
  case 157:
#line 1148 "perly.y"
d1279 2
a1280 2
  case 158:
#line 1152 "perly.y"
d1286 56
a1341 2
  case 163:
#line 1162 "perly.y"
d1348 2
a1349 2
  case 164:
#line 1167 "perly.y"
d1355 2
a1356 2
  case 165:
#line 1171 "perly.y"
d1360 2
a1361 2
  case 166:
#line 1173 "perly.y"
d1367 2
a1368 2
  case 167:
#line 1177 "perly.y"
d1375 2
a1376 2
  case 168:
#line 1182 "perly.y"
d1380 2
a1381 2
  case 169:
#line 1184 "perly.y"
d1388 5
d1410 1
a1410 1
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
d1415 1
a1415 1
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
a1419 5
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 176:
#line 1201 "perly.y"
a1424 3
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
d1430 2
a1431 17
  case 177:
#line 1213 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			}
    break;

  case 178:
#line 1225 "perly.y"
a1436 3
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
d1444 2
a1445 19
  case 179:
#line 1239 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			}
    break;

  case 180:
#line 1253 "perly.y"
d1449 2
a1450 2
  case 181:
#line 1255 "perly.y"
d1454 2
a1455 2
  case 182:
#line 1257 "perly.y"
d1462 2
a1463 2
  case 183:
#line 1262 "perly.y"
d1478 2
a1479 2
  case 184:
#line 1275 "perly.y"
d1486 2
a1487 38
  case 185:
#line 1280 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'$');
			}
    break;

  case 186:
#line 1284 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'@@');
			}
    break;

  case 187:
#line 1288 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'%');
			}
    break;

  case 188:
#line 1292 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF(IVAL((ps[(3) - (4)].val.i_tkval)),(ps[(1) - (4)].val.opval))));
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'&');
			}
    break;

  case 189:
#line 1297 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'*');
			}
    break;

  case 190:
#line 1301 "perly.y"
d1494 2
a1495 2
  case 191:
#line 1306 "perly.y"
d1501 2
a1502 2
  case 192:
#line 1310 "perly.y"
d1508 2
a1509 2
  case 193:
#line 1314 "perly.y"
d1515 2
a1516 2
  case 194:
#line 1318 "perly.y"
d1522 2
a1523 2
  case 195:
#line 1322 "perly.y"
d1529 2
a1530 2
  case 196:
#line 1326 "perly.y"
d1536 2
a1537 2
  case 197:
#line 1330 "perly.y"
d1543 2
a1544 2
  case 198:
#line 1334 "perly.y"
d1548 2
a1549 2
  case 199:
#line 1336 "perly.y"
d1554 2
a1555 2
  case 200:
#line 1339 "perly.y"
d1561 2
a1562 2
  case 201:
#line 1343 "perly.y"
d1570 2
a1571 2
  case 202:
#line 1349 "perly.y"
d1575 2
a1576 2
  case 203:
#line 1351 "perly.y"
d1583 2
a1584 2
  case 204:
#line 1356 "perly.y"
d1589 2
a1590 2
  case 205:
#line 1359 "perly.y"
d1601 2
a1602 2
  case 206:
#line 1368 "perly.y"
d1610 2
a1611 2
  case 207:
#line 1374 "perly.y"
d1624 2
a1625 2
  case 208:
#line 1385 "perly.y"
d1632 2
a1633 2
  case 211:
#line 1392 "perly.y"
d1641 2
a1642 2
  case 213:
#line 1402 "perly.y"
d1652 2
a1653 2
  case 214:
#line 1410 "perly.y"
d1659 2
a1660 2
  case 215:
#line 1417 "perly.y"
d1667 2
a1668 2
  case 216:
#line 1422 "perly.y"
d1675 2
a1676 2
  case 217:
#line 1427 "perly.y"
d1680 2
a1681 2
  case 218:
#line 1429 "perly.y"
d1685 2
a1686 2
  case 219:
#line 1431 "perly.y"
d1690 2
a1691 2
  case 220:
#line 1436 "perly.y"
d1695 2
a1696 2
  case 221:
#line 1438 "perly.y"
d1700 2
a1701 2
  case 222:
#line 1442 "perly.y"
d1705 2
a1706 2
  case 223:
#line 1444 "perly.y"
d1710 2
a1711 2
  case 224:
#line 1450 "perly.y"
d1715 2
a1716 2
  case 225:
#line 1454 "perly.y"
d1722 2
a1723 2
  case 226:
#line 1460 "perly.y"
d1729 2
a1730 2
  case 227:
#line 1466 "perly.y"
a1731 1
			  if ((yyval.opval)) (yyval.opval)->op_private |= IVAL((ps[(1) - (2)].val.i_tkval));
d1736 2
a1737 2
  case 228:
#line 1473 "perly.y"
a1738 1
			  if ((yyval.opval)) (yyval.opval)->op_private |= IVAL((ps[(1) - (2)].val.i_tkval));
d1743 2
a1744 2
  case 229:
#line 1480 "perly.y"
d1750 2
a1751 9
  case 230:
#line 1484 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'l');
			}
    break;

  case 231:
#line 1490 "perly.y"
d1757 2
a1758 23
  case 233:
#line 1497 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),'@@');
			}
    break;

  case 235:
#line 1504 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),'@@');
			}
    break;

  case 237:
#line 1511 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),'*');
			}
    break;

  case 238:
#line 1518 "perly.y"
d1762 2
a1763 2
  case 239:
#line 1520 "perly.y"
d1767 2
a1768 2
  case 240:
#line 1522 "perly.y"
d1772 2
a1773 2
  case 241:
#line 1525 "perly.y"
d1781 1
a1781 1
 * bb8245a1a537b2afb2445b3973f63b210f9ec346a1955071aef7d05ba97196ae perly.y
@


