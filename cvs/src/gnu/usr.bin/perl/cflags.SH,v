head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.6
	OPENBSD_6_2_BASE:1.15
	PERL_5_24_2:1.1.1.14
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	PERL_5_20_2:1.1.1.13
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	PERL_5_20_1:1.1.1.13
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	PERL_5_16_3:1.1.1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.15
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	cxJ08BvJA9Pt2PTM;

1.14
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.13;
commitid	QP75iYx42Uo7mMxO;

1.13
date	2014.03.24.15.05.13;	author afresh1;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.25.20.40.43;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2010.09.24.15.06.39;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.20;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.35.56;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.22.56;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.19;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.34.46;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.03.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.50.55;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.48.19;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.11.36;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.11.36;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.37.04;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.08.32;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.21.56;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.39;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.04;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.46.11;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.04;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.33;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.09.24.14.48.28;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.06.16;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.58.42;	author afresh1;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.11.17.20.52.31;	author afresh1;	state Exp;
branches;
next	1.1.1.14;
commitid	B31cAbBIXiCqnL97;

1.1.1.14
date	2017.08.14.13.45.22;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.15
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/bin/sh

# Generate the cflags script, which is used to determine what cflags
# to pass to the compiler for compiling the core perl.
#
# This does NOT affect the XS compilation (ext, dist, cpan)
# since that uses %Config values directly.
#
# For example, since -Wall adds -Wunused-*, a bare -Wall (without
# amending that with -Wno-unused-..., or with the PERL_UNUSED_...)
# would be too much for XS code because there are too many generated
# but often unused things.
#
# We create a temporary test C program and repeatedly compile it with
# various candidate flags, and from the compiler output, determine what
# flags are supported.
#
# From this we initialise the following variables in the cflags script:
#
#   $myccflags (possibly edited version of $Config{ccflags})
#   $warn
#   $stdflags
#   $extra
#   $_exe

case $PERL_CONFIG_SH in
'')
	if test -f config.sh; then TOP=.;
	elif test -f ../config.sh; then TOP=..;
	elif test -f ../../config.sh; then TOP=../..;
	elif test -f ../../../config.sh; then TOP=../../..;
	elif test -f ../../../../config.sh; then TOP=../../../..;
	else
		echo "Can't find config.sh."; exit 1
	fi
	. $TOP/config.sh
	;;
esac
# This forces SH files to create target in same directory as SH file.
# This is so that make depend always knows where to find SH derivatives.
case "$0" in
*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
esac

if test -f config_h.SH -a ! -f config.h; then
    . ./config_h.SH
    CONFIG_H=already-done
fi

warn=''

# Add -Wall for the core modules iff gcc and not already -Wall
case "$gccversion" in
'') ;;
Intel*) ;; # The Intel C++ plays gcc on TV but is not really it.
*)  case "$ccflags" in
    *-Wall*) ;;
    *) warn="$warn -Wall" ;;
    esac
    ;;
esac

# Create a test source file for testing what options can be fed to
# gcc in this system; include a selection of most common and commonly
# hairy include files.

cat >_cflags.c <<__EOT__
#include "EXTERN.h"
#include "perl.h"
/* The stdio.h, errno.h, and setjmp.h should be there in any ANSI C89. */
#include <stdio.h>
#include <errno.h>
#include <setjmp.h>
/* Just in case the inclusion of perl.h did not
 * pull in enough system headers, let's try again. */
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef I_STDDEF
#include <stddef.h>
#endif
#ifdef I_STDARG
#include <stdarg.h>
#endif
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_DIRENT
#include <dirent.h>
#endif
#ifdef I_UNISTD
#include <unistd.h>
#endif
#ifdef I_SYS_TYPES
#include <sys/types.h>
#endif
#ifdef I_SYS_PARAM
#include <sys/param.h>
#endif
#ifdef I_SYS_RESOURCE
#include <sys/resource.h>
#endif
#ifdef I_SYS_SELECT
#include <sys/select.h>
#endif
#if defined(HAS_SOCKET) && !defined(VMS) && !defined(WIN32) /* See perl.h. */
#include <sys/socket.h>
#endif
#ifdef I_SYS_STAT
#include <sys/stat.h>
#endif
#ifdef I_SYS_TIME
#include <sys/time.h>
#endif
#ifdef I_SYS_TIMES
#include <sys/times.h>
#endif
#ifdef I_SYS_WAIT
#include <sys/wait.h>
#endif
/* The gcc -ansi can cause a lot of noise in Solaris because of:
 /usr/include/sys/resource.h:148: warning: 'struct rlimit64' declared inside parameter list
 */
int main(int argc, char *argv[]) {

/* Add here test code found to be problematic in some gcc platform. */

/* Off_t/off_t is a struct in Solaris with largefiles, and with gcc -ansi
 * that struct cannot be compared in some gcc releases with a flat
 * integer, such as a STRLEN. */

  IV iv;
  Off_t t0a = 2;
  STRLEN t0b = 3;
  int t0c = (STRLEN)t0a == t0b;

  printf("%s: %d\n", argv[0], argc);

/* In FreeBSD 6.2 (and probably other releases too), with -Duse64bitint,
   perl will use atoll(3).  However, that declaration is hidden in <stdlib.h>
   if we force the compiler to use -std=c89 mode.
*/
  iv = Atol("42");

  return (!t0c && (iv == 42)) ? 0 : -1; /* Try to avoid 'unused' warnings. */
}
__EOT__

stdflags=''

# Further gcc warning options.  Build up a list of options that work.
# Note that some problems may only show up with combinations of options,
# e.g. a warning might show up only with -Wall -ansi, not with either
# one individually.
# TODO:  Ponder whether to migrate this back to Configure so hints files can
# tweak it.  Also, be paranoid about whether results we've deduced in Configure
# (especially about things like long long, which are not in C89) will still be
# valid if we now add flags like -std=c89.

pedantic=''
case "$gccansipedantic" in
define) pedantic='-pedantic' ;;
esac

case "$gccversion" in
'') ;;
[12]*) ;; # gcc versions 1 (gasp!) and 2 are not good for this.
Intel*) ;; # # Is that you, Intel C++?
#
# NOTE 1: the -std=c89 without -pedantic is a bit pointless.
# Just -std=c89 means "if there is room for interpretation,
# interpret the C89 way."  It does NOT mean "strict C89" on its own.
# You need to add the -pedantic for that.  To do this with Configure,
# do -Dgccansipedantic (note that the -ansi is included in any case,
# the option is a bit oddly named, for historical reasons.)
#
# NOTE 2: -pedantic necessitates adding a couple of flags:
# * -PERL_GCC_PEDANTIC so that the perl code can adapt: there's nothing
#   added by gcc itself to indicate pedanticness.
# * -Wno-overlength-strings under -DDEBUGGING because quite many of
#   the LEAVE_with_name() and assert() calls generate string literals
#   longer then the ANSI minimum of 509 bytes.
#
# NOTE 3: the relative order of these options matters:
# -Wextra before -W
# -std=c89 before -ansi
# -pedantic* before -Werror=d-a-s
#
*)  for opt in -std=c89 -ansi $pedantic \
		-Werror=declaration-after-statement \
		-Wextra -W \
		-Wc++-compat -Wwrite-strings
    do
       case " $ccflags " in
       *" $opt "*) ;; # Skip if already there.
       *) rm -f _cflags$_exe
	  flags="-DPERL_NO_INLINE_FUNCTIONS $ccflags $warn $stdflags $opt"
	  case "$opt" in
	  *-pedantic*) flags="$flags -DPERL_GCC_PEDANTIC" ;;
	  esac
          # echo "opt = $opt, flags = $flags"
          cmd="$cc $flags _cflags.c -o _cflags$_exe"
          out="`$cmd 2>&1`"
          # echo "$cmd --> $out"
          case "$out" in
          *"unrecognized"*) ;;
          *"unknown"*) ;;
          *"implicit declaration"*) ;; # Was something useful hidden?
          *"Invalid"*) ;;
          *"is valid for C"*) ;;
          *) if test -x _cflags$_exe
             then
               case "$opt" in
               -std*)
                 echo "cflags.SH: Adding $opt."
                 stdflags="$stdflags $opt"
                 ;;
               -ansi)
                 # -std=c89 is the modern form of -ansi, so add
                 # -ansi only if -std=c89 is not there already.
                 case " $stdflags " in
                 *-std=c89*) ;;
                 *)
                   echo "cflags.SH: Adding $opt."
                   stdflags="$stdflags $opt"
                   ;;
                 esac
                 ;;
               *) case "$opt" in
                  -W)
                    # -Wextra is the modern form of -W, so add
                    # -W only if -Wextra is not there already.
                    case " $warn " in
                    *-Wextra*) ;;
                    *)
                      echo "cflags.SH: Adding $opt."
                      warn="$warn $opt"
                      ;;
                    esac
                    ;;
		  -Werror=declaration-after-statement)
                    # -pedantic* (with -std=c89) covers -Werror=d-a-s.
                    case "$stdflags$warn" in
                    *-std=c89*-pedantic*|*-pedantic*-std=c89*) ;;
                    *)
                      echo "cflags.SH: Adding $opt."
                      warn="$warn $opt"
                      ;;
                    esac
		    ;;
                  *)
                     echo "cflags.SH: Adding $opt."
                     warn="$warn $opt"
                     ;;
                  esac
               esac
             fi
             ;;
          esac
          ;;
       esac
       case "$ccflags$warn" in
       *-pedantic*)
         overlength=''
         case "$ccflags$optimize" in
         *-DDEBUGGING*) overlength='-Wno-overlength-strings' ;;
         esac
         for opt2 in -DPERL_GCC_PEDANTIC $overlength
         do
	   case "$ccflags$warn" in
	   *"$opt2"*) ;;
	   *) echo "cflags.SH: Adding $opt2 because of -pedantic."
	      warn="$warn $opt2" ;;
           esac
         done
         ;;
       esac
    done
    ;;
esac
rm -f _cflags.c _cflags$_exe

case "$gccversion" in
'') ;;
*)
  case "$warn$ccflags" in
  *-pedantic*)
    # If we have -Duse64bitint (or equivalent) in effect and the quadtype
    # has become 'long long', gcc -pedantic* becomes unbearable
    # (moreso when combined with -Wall) because long long and LL and %lld|%Ld
    # become warn-worthy.  So let's drop the -pedantic in that case.
    #
    # Similarly, since 'long long' isn't part of C89, FreeBSD 6.2 headers
    # don't declare atoll() under -std=c89, but we need it.  In general,
    # insisting on -std=c89 is inconsistent with insisting on using
    # 'long long'. So drop -std=c89 and -ansi as well if we're using
    # 'long long' as our main integral type.
    #
    # usedtrace (DTrace) uses unportable features (dollars in identifiers,
    # and gcc statement expressions), it is just easier to turn off pedantic.
    remove=''
    case "$quadtype:$ivtype:$sPRId64:$usedtrace" in
    *"long long"*|*lld*|*Ld*) remove='long long' ;;
    *) case "$usedtrace" in
       define) remove='usedtrace' ;;
       esac
       ;;
    esac
    case "$remove" in
    '') ;;
    *) echo "cflags.SH: Removing -pedantic*, -std=c89, and -ansi because of $remove."
      ccflags=`echo $ccflags|sed -e 's/-pedantic-errors/ /' -e 's/-pedantic/ /' -e 's/-std=c89/ /' -e 's/-ansi/ /' -e 's/-DPERL_GCC_PEDANTIC/ /'`
      warn=`echo $warn|sed -e 's/-pedantic-errors/ /' -e 's/-pedantic/ /' -e 's/-ansi/ /' -e 's/-DPERL_GCC_PEDANTIC/ /'`
      stdflags=`echo $stdflags|sed -e 's/-std=c89/ /'`
      ;;
    esac
    ;;
  esac
  ;;
esac

# Older clang releases are not wise enough for -Wunused-value.
case "$gccversion" in
*"Apple LLVM "[34]*|*"Apple LLVM version "[34]*)
  for f in -Wno-unused-value
  do
    echo "cflags.SH: Adding $f because clang version '$gccversion'" 
    warn="$warn $f"
  done
  ;;
esac

# The quadmath Q format specifier will cause -Wformat to whine.
case "$gccversion" in
'') ;;
*) case "$usequadmath" in
   define)
     for f in -Wno-format
     do
       echo "cflags.SH: Adding $f because of usequadmath."
       warn="$warn $f"
     done
    ;;
  esac
  ;;
esac

case "$cc" in
*g++*)
  # Extra paranoia in case people have bad canned ccflags:
  # bad in the sense that the flags are accepted by g++,
  # but then whined about.
  #
  # -Werror=d-a-s option is valid for g++, by definition,
  # but we remove it just for cleanliness and shorter command lines.
  for f in -Wdeclaration-after-statement \
		-Werror=declaration-after-statement \
		-Wc++-compat \
		-std=c89
  do
    case "$ccflags$warn" in
    *"$f"*)
      echo "cflags.SH: Removing $f because of g++."
      ccflags=`echo $ccflags|sed 's/$f/ /'`
      warn=`echo $warn|sed 's/$f/ /'`
      ;;
    esac
  done
  ;;
esac

for f in -Wdeclaration-after-statement -Werror=declaration-after-statement
do
  case "$cppflags" in
  *"$f"*)
    echo "cflags.SH: Removing $f from cppflags."
    cppflags=`echo $cppflags|sed 's/$f/ /'` ;;
  esac
done

# If usethreads and clang, add -Wthread-safety for clang 3.6 or later.
# gccversion is defined also for clang, because compat, use that for matching.
# Apple overwrites clang version with XCode version, see hints/darwin.sh
# for the gory details.  Aggressively forward-proofing.
case "$usethreads" in
define)
case "$gccversion" in
*" Clang 3."[56789]*|*" Clang "[456]*|*"Apple LLVM 6.1"*|*"Apple LLVM "[789]*)
  for f in -Wthread-safety
  do
    case " $warn " in
    *" $f "*) ;; # Skip if already there.
    *)
      echo "cflags.SH: Adding $f because usethreads and clang and gccversion '$gccversion'"
      warn="$warn $f"
      ;;
    esac
  done
;;
esac
;;
esac

echo "cflags.SH: cc       = $cc"
echo "cflags.SH: ccflags  = $ccflags"
echo "cflags.SH: stdflags = $stdflags"
echo "cflags.SH: optimize = $optimize"
echo "cflags.SH: warn     = $warn"

# Code to set any extra flags here.
extra=''

# Protect double or single quotes for better restoring of ccflags.
myccflags=`echo $ccflags | sed -e 's/"/\\\"/g' -e "s/'/\\\'/g"`

echo "Extracting cflags (with variable substitutions)"
# This section of the file will have variable substitutions done on it.
# Move anything that needs config subs from !NO!SUBS! section to !GROK!THIS!.
# Protect any dollar signs and backticks that you do not want interpreted
# by putting a backslash in front.  You may delete these comments.
rm -f cflags
$spitshell >cflags <<!GROK!THIS!
$startsh

# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!

# This file is generated by cflags.SH

# Used to restore possible edits by cflags.SH.
myccflags="$myccflags"

# Extra warnings, used e.g. for gcc.
warn="$warn"
# Extra standardness.
stdflags="$stdflags"
# Extra extra.
extra="$extra"
# what do executables look like?
_exe="$_exe"

!GROK!THIS!

# In the following dollars and backticks do not need the extra backslash.
$spitshell >>cflags <<'!NO!SUBS!'
case $PERL_CONFIG_SH in
'')
	if test -f config.sh; then TOP=.;
	elif test -f ../config.sh; then TOP=..;
	elif test -f ../../config.sh; then TOP=../..;
	elif test -f ../../../config.sh; then TOP=../../..;
	elif test -f ../../../../config.sh; then TOP=../../../..;
	else
		echo "Can't find config.sh."; exit 1
	fi
	. $TOP/config.sh
        ccflags="$myccflags"  # Restore possible edits by cflags.SH.
	;;
esac

# syntax: cflags [optimize=XXX] [file[.suffix]] ...
#   displays the proposed compiler command line for each 'file'
#
#   with no file, dispalys it for all *.c files.
#   The optimise=XXX arg (if present) is evalled, setting the default
#   value of the $optimise variable, which is output on the command line
#   (but which may be overridden for specific files below)

case "X$1" in
Xoptimize=*|X"optimize=*")
	eval "$1"
	shift
	;;
esac

case $# in
0) set *.c; echo "The current C flags are:" ;;
esac

set `echo "$* " | sed -e 's/\.[oc] / /g' -e 's/\.obj / /g' -e "s/\\$obj_ext / /g"`

for file do

    case "$#" in
    1) ;;
    *) echo $n "    $file.c	$c" ;;
    esac

    # allow variables like toke_cflags to be evaluated

    if echo $file | grep -v / >/dev/null
    then
      eval 'eval ${'"${file}_cflags"'-""}'
    fi

    # or customize here

    case "$file" in
    regcomp) : work around http://bugs.debian.org/754054
        case $archname in
        mips-*|mipsel-*)
            optimize="$optimize -fno-tree-vrp";;
        esac;;
    *) ;;

    # Customization examples follow.
    #
    # The examples are intentionally unreachable as the '*)' case above always
    # matches. To use them, move before the '*)' and edit as appropriate.
    # It is not a good idea to set ccflags to an absolute value here, as it
    # often contains general -D defines which are needed for correct
    # compilation. It is better to edit ccflags as shown, using interpolation
    # to add flags, or sed to remove flags.

    av) ccflags=`echo $ccflags | sed -e s/-pipe//` ;;
    deb) ccflags="$ccflags -fno-jump-tables" ;;
    hv) warn=`echo $warn | sed -e s/-Wextra//` ;;
    toke) optimize=-O0 ;;
    esac

    # Can we perhaps use $ansi2knr here
    echo "$cc -c -DPERL_CORE $ccflags $stdflags $optimize $warn $extra"

    . $TOP/config.sh

    # end per file behaviour
done
!NO!SUBS!
chmod 755 cflags
$eunicefix cflags
@


1.14
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d4 11
a14 2
# to pass to the compiler.
# We create a temporary test c program and repeatedly compile it with
d17 1
d20 1
d135 3
a137 1
  int t0c = t0a == t0b;
d155 1
a155 1
# TODO:  Ponder whether to migrate this back to Configure so hints files can 
d157 1
a157 1
# (especially about things like long long, which are not in C89) will still be 
d160 5
d169 24
a192 2
*)  for opt in -ansi -std=c89 -W -Wextra -Wdeclaration-after-statement \
		-Wendif-labels -Wc++-compat -Wwrite-strings
d197 9
a205 1
          case "`$cc -DPERL_NO_INLINE_FUNCTIONS $ccflags $warn $stdflags $opt _cflags.c -o _cflags$_exe 2>&1`" in
d207 1
d214 42
a255 2
               -std*) stdflags="$stdflags $opt" ;;
               *) warn="$warn $opt" ;;
d262 16
d286 2
a287 1
  if [ "$gccansipedantic" = "" ]; then
d289 2
a290 2
    # has become 'long long', gcc -pedantic becomes unbearable (moreso
    # when combined with -Wall) because long long and LL and %lld|%Ld
d292 1
a292 6
    case "$quadtype:$sPRId64" in
    "long long"*|*lld*|*Ld*)
      ccflags="`echo $ccflags|sed 's/-pedantic/ /'`"
      warn="`echo $warn|sed 's/-pedantic/ /'`"
      ;;
    esac
d296 1
a296 1
    # 'long long'. So drop -std=c89 and -ansi as well if we're using 
d298 18
a315 6
    case "$ivtype" in
    "long long")
	ccflags=`echo $ccflags|sed -e 's/-pedantic/ /' -e 's/-std=c89/ /' -e 's/-ansi/ /'`
	warn=`echo $warn|sed -e 's/-pedantic/ /' -e 's/-ansi/ /'`
	stdflags=`echo $stdflags|sed -e 's/-std=c89/ /'`
	;;
d317 27
a343 5
  fi
  # Using certain features (like the gcc statement expressions)
  # requires knowing whether -pedantic has been specified.
  case "$warn$ccflags" in
  *-pedantic*) warn="$warn -DPERL_GCC_PEDANTIC" ;;
d348 62
d413 3
d429 2
d456 1
d498 5
d505 3
a507 8
    # Customization examples follow:
    av) ccflags=`echo $ccflags | sed -e s/-pipe//` ;;
    deb) ccflags="$ccflags -fno-jump-tables" ;;
    hv) warn=`echo $warn | sed -e s/-Wextra//` ;;
    toke) optimize=-O0 ;;
    esac

    # The examples are intentionally unreachable as the '*)' case always
d514 4
a517 45

    case "$cc" in
    *g++*)
      # Extra paranoia in case people have bad canned ccflags:
      # bad in the sense that the flags are accepted by g++,
      # but then whined about.
      for f in -Wdeclaration-after-statement -std=c89
      do
        ccflags=`echo $ccflags|sed 's/$f/ /'`
      done
      ;;
    esac
    cppflags=`echo $cppflags|sed 's/-Wdeclaration-after-statement/ /'`

    case "$cc" in
    *clang*)
      # clang complains a lot about -Wunused-value which are not fixable
      warn="$warn -Wno-unused-value"
      ;;
    *g++*)
      # Without -Wno-unused-variable g++ 4.x compiles are rather unwatchable
      # because of all the warnings about Perl___notused, and g++ doesn't do
      # __attribute__((unused)) (and even if at some stage it may, people do
      # have older gcc installations), and ((void)x) isn't enough to silence
      # the noises about XS functions not using their cv parameter, so we need
      # the -Wno-unused-parameter too.
      # Yes, we lose some valid warnings, but hopefully other compilers
      # (like gcc) will still pick up those warnings.
      for o in -Wno-unused-variable -Wno-unused-parameter
      do
        case "$warn" in
        *$o*) ;;
        *) warn="$warn $o" ;;
        esac
      done
      ;;
    *)
      # clang may not be called clang
      case "`$cc -v 2>&1`" in
      *clang*)
        case "$warn" in
        *-Wno-unused-value) ;;
        *) warn="$warn -Wno-unused-value"
        esac
      esac
a518 1

@


1.13
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d3 12
d28 2
a29 2
: This forces SH files to create target in same directory as SH file.
: This is so that make depend always knows where to find SH derivatives.
d157 1
a157 1
          case "`$cc -DPERL_NO_INLINE_FUNCTIONS $cflags $warn $stdflags $opt _cflags.c -o _cflags$_exe 2>&1`" in
d217 4
a220 4
: This section of the file will have variable substitutions done on it.
: Move anything that needs config subs from !NO!SUBS! section to !GROK!THIS!.
: Protect any dollar signs and backticks that you do not want interpreted
: by putting a backslash in front.  You may delete these comments.
d225 5
d241 1
a241 1
: In the following dollars and backticks do not need the extra backslash.
d257 7
a263 2
: syntax: cflags [optimize=XXX] [file[.suffix]]
: displays the compiler command line for file
a271 5
also=': '
case $# in
1) also='echo 1>&2 "	  CCCMD = "'
esac

d285 1
a285 1
    : allow variables like toke_cflags to be evaluated
d292 1
a292 1
    : or customize here
d297 1
a297 1
    *) : Customization examples follow: ;;
d304 6
a309 6
    : The examples are intentionally unreachable as the '*)' case always
    : matches. To use them, move before the '*)' and edit as appropriate.
    : It is not a good idea to set ccflags to an absolute value here, as it
    : often contains general -D defines which are needed for correct
    : compilation. It is better to edit ccflags as shown, using interpolation
    : to add flags, or sed to remove flags.
d326 1
a326 1
    *clang)
d347 9
d359 1
a359 1
    : Can we perhaps use $ansi2knr here
a360 1
    eval "$also "'"$cc -DPERL_CORE -c $ccflags $stdflags $optimize $warn $extra"'
@


1.12
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 2
d145 1
a145 1
          case "`$cc $cflags $warn $stdflags $opt _cflags.c -o _cflags$_exe 2>&1`" in
a277 47
    DB_File) ;;
    GDBM_File) ;;
    NDBM_File) ;;
    ODBM_File) ;;
    POSIX) ;;
    SDBM_File) ;;
    av) ;;
    byterun) ;;
    deb) ;;
    dl) ;;
    doio) ;;
    doop) ;;
    dump) ;;
    globals) ;;
    gv) ;;
    hv) ;;
    locale) ;;
    madly) ;;
    main) ;;
    malloc) ;;
    mg) ;;
    miniperlmain) ;;
    numeric) ;;
    op) ;;
    opmini) ;;
    pad) ;;
    perl) ;;
    perlapi) ;;
    perlmain) ;;
    perly) ;;
    pp) ;;
    pp_ctl) ;;
    pp_hot) ;;
    pp_pack) ;;
    pp_sort) ;;
    pp_sys) ;;
    regcomp) ;;
    regexec) ;;
    run) ;;
    scope) ;;
    sv) ;;
    taint) ;;
    toke) ;;
    universal) ;;
    usersub) ;;
    utf8) ;;
    util) ;;
d279 6
d287 8
d309 4
@


1.11
log
@merge in perl 5.12.2 plus local changes
@
text
@d137 2
a138 1
*)  for opt in -ansi -std=c89 -W -Wextra -Wdeclaration-after-statement -Wendif-labels -Wc++-compat
@


1.10
log
@Merge in perl 5.10.1
@
text
@a321 1
    xsutils) ;;
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d137 1
a137 1
*)  for opt in -ansi -pedantic -std=c89 -W -Wextra -Wdeclaration-after-statement -Wendif-labels -Wc++-compat
d216 2
d326 12
a337 12
case "$cc" in
*g++*)
  # Extra paranoia in case people have bad canned ccflags:
  # bad in the sense that the flags are accepted by g++,
  # but then whined about.
  for f in -Wdeclaration-after-statement -std=c89
  do
    ccflags=`echo $ccflags|sed 's/$f/ /'`
  done
  ;;
esac
cppflags=`echo $cppflags|sed 's/-Wdeclaration-after-statement/ /'`
d339 18
a356 15
case "$cc" in
*g++*)
  # Without -Wno-unused-variable g++ 4.x compiles are rather unwatchable
  # because of all the warnings about Perl___notused, and g++ doesn't do
  # __attribute__((unused)) (and even if at some stage it may, people do
  # have older gcc installations), and ((void)x) isn't enough to silence
  # the noises about XS functions not using their cv parameter, so we need
  # the -Wno-unused-parameter too.
  # Yes, we lose some valid warnings, but hopefully other compilers
  # (like gcc) will still pick up those warnings.
  for o in -Wno-unused-variable -Wno-unused-parameter
  do
    case "$warn" in
    *$o*) ;;
    *) warn="$warn $o" ;;
a357 3
  done
  ;;
esac
a358 3
if test -f .patch; then
  ccflags="-DPERL_PATCHNUM=`cat .patch` $ccflags"
fi
d366 1
@


1.8
log
@merge in perl 5.8.8
@
text
@d19 182
d209 8
d286 1
d290 1
d297 2
d307 1
d316 1
d318 1
d320 1
d324 28
a351 38
# Add -Wall for the core modules iff gcc and not already -Wall
warn=''
case "$gccversion" in
'') ;;
Intel*) ;;
*)  case "$ccflags" in
    *-Wall*) ;;
    *) warn="$warn -Wall" ;;
    esac
    case "$gccansipedantic" in
    define)
	case "$gccversion" in
	[12]*) ;; # gcc versions 1 (gasp!) and 2 are not good for this.
	*)  case "$osname" in
	    # Add -ansi -pedantic only for known platforms.
	    aix|dec_osf|freebsd|hpux|irix|linux)
		ansipedantic="-ansi -pedantic" ;;
	    solaris)
# Can't add -ansi for Solaris.
# Off_t/off_t is a struct in Solaris with largefiles, and with -ansi
# that struct cannot be compared with a flat integer, such as a STRLEN.
# The -ansi will also cause a lot of noise in Solaris because of:
# /usr/include/sys/resource.h:148: warning: `struct rlimit64' declared inside parameter list
		ansipedantic="-pedantic" ;;
	    esac
	    for i in $ansipedantic
	    do
		case "$ccflags" in
		*$i*) ;;
		*) warn="$warn $i" ;;
		esac
	    done
	    case "$warn$ccflags" in
	    *-pedantic*) warn="$warn -DPERL_GCC_PEDANTIC" ;;
	    esac
	    ;;
	esac
	;;
d353 2
a354 1
    ;;
d357 4
d362 2
a363 2
    echo "$cc -c -DPERL_CORE $ccflags $optimize $warn"
    eval "$also "'"$cc -DPERL_CORE -c $ccflags $optimize $warn"'
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d130 1
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d126 1
a126 1
# Add -Wall for the core and core modules iff gcc and not already -Wall
d132 12
a143 1
# Can't add -ansi here because it will fail e.g. in Solaris.
d148 15
a162 1
    *) warn='-Wall' ;;
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d1 1
a1 1
case $CONFIG in
d31 1
a31 1
case $CONFIGDOTSH in
d45 8
a52 12
perltype=''
optdebug=''	# ensure -g used if building a -DDEBUGGING libperl
case $# in
2) case $1 in
    *perl.*)    perltype='';;
    *perld.*)   perltype='-DDEBUGGING'; optdebug='-g' ;;
    *perle.*)   perltype='-DEMBED';;
    *perlde.*)  perltype='-DDEBUGGING -DEMBED'; optdebug='-g' ;;
    *perlm.*)   perltype='-DEMBED -DMULTIPLICITY';;
    *perldm.*)  perltype='-DDEBUGGING -DEMBED -DMULTIPLICITY'; optdebug='-g' ;;
    esac
    shift ;;
d98 1
d103 1
d112 1
d126 15
a140 3
	if test "X$optdebug" != "X"; then
		optimize="$optdebug"
	fi
d143 2
a144 2
    echo "$cc -c -DPERL_CORE $ccflags $optimize $perltype"
    eval "$also "'"$cc -DPERL_CORE -c $ccflags $optimize $perltype"'
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d132 2
a133 2
    echo "$cc -c -DPERL_CORE $ccflags $optimize $perltype $large $split"
    eval "$also "'"$cc -DPERL_CORE -c $ccflags $optimize $perltype $large $split"'
@


1.3
log
@perl5.005_03 (stock)
@
text
@d31 1
a31 1
case $CONFIG in
d68 1
a68 1
set `echo "$* " | sed -e 's/\.[oc] / /g' -e 's/\.obj / /g'`
d79 4
a82 1
    eval 'eval ${'"${file}_cflags"'-""}'
d108 1
@


1.2
log
@perl 5.004_04
@
text
@d91 1
d127 1
@


1.1
log
@Initial revision
@
text
@d24 1
d126 2
a127 2
    echo "$cc -c $ccflags $optimize $perltype $large $split"
    eval "$also "'"$cc -c $ccflags $optimize $perltype $large $split"'
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a23 1
rm -f cflags
a89 1
    byterun) ;;
d125 2
a126 3
    : Can we perhaps use $ansi2knr here
    echo "$cc -c -DPERL_CORE $ccflags $optimize $perltype $large $split"
    eval "$also "'"$cc -DPERL_CORE -c $ccflags $optimize $perltype $large $split"'
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d31 1
a31 1
case $CONFIGDOTSH in
d68 1
a68 1
set `echo "$* " | sed -e 's/\.[oc] / /g' -e 's/\.obj / /g' -e "s/\\$obj_ext / /g"`
d79 1
a79 4
    if echo $file | grep -v / >/dev/null
    then
      eval 'eval ${'"${file}_cflags"'-""}'
    fi
a104 1
    perlapi) ;;
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d132 2
a133 2
    echo "$cc -c -DPERL_CORE $ccflags $optimize $perltype"
    eval "$also "'"$cc -DPERL_CORE -c $ccflags $optimize $perltype"'
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 1
case $PERL_CONFIG_SH in
d31 1
a31 1
case $PERL_CONFIG_SH in
d45 12
a56 8
: syntax: cflags [optimize=XXX] [file[.suffix]]
: displays the compiler command line for file

case "X$1" in
Xoptimize=*|X"optimize=*")
	eval "$1"
	shift
	;;
a101 1
    locale) ;;
a105 1
    numeric) ;;
a113 1
    pp_pack) ;;
d127 3
a129 15
# Add -Wall for the core and core modules iff gcc and not already -Wall
warn=''
case "$gccversion" in
'') ;;
*)  case "$ccflags" in
    *-Wall*) ;;
# Can't add -ansi here because it will fail e.g. in Solaris.
# Off_t/off_t is a struct in Solaris with largefiles, and with -ansi
# that struct cannot be compared with a flat integer, such as a STRLEN.
# The -ansi will also cause a lot of noise in Solaris because of:
# /usr/include/sys/resource.h:148: warning: `struct rlimit64' declared inside parameter list
    *) warn='-Wall' ;;
    esac
    ;;
esac
d132 2
a133 2
    echo "$cc -c -DPERL_CORE $ccflags $optimize $warn"
    eval "$also "'"$cc -DPERL_CORE -c $ccflags $optimize $warn"'
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d126 1
a126 1
# Add -Wall for the core modules iff gcc and not already -Wall
d132 1
a132 12
    *) warn="$warn -Wall" ;;
    esac
    case "$gccansipedantic" in
    define)
	case "$gccversion" in
	[12]*) ;; # gcc versions 1 (gasp!) and 2 are not good for this.
	*)  case "$osname" in
	    # Add -ansi -pedantic only for known platforms.
	    aix|dec_osf|freebsd|hpux|irix|linux)
		ansipedantic="-ansi -pedantic" ;;
	    solaris)
# Can't add -ansi for Solaris.
d137 1
a137 15
		ansipedantic="-pedantic" ;;
	    esac
	    for i in $ansipedantic
	    do
		case "$ccflags" in
		*$i*) ;;
		*) warn="$warn $i" ;;
		esac
	    done
	    case "$warn$ccflags" in
	    *-pedantic*) warn="$warn -DPERL_GCC_PEDANTIC" ;;
	    esac
	    ;;
	esac
	;;
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@a129 1
Intel*) ;;
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@a18 182

if test -f config_h.SH -a ! -f config.h; then
    . ./config_h.SH
    CONFIG_H=already-done
fi

warn=''

# Add -Wall for the core modules iff gcc and not already -Wall
case "$gccversion" in
'') ;;
Intel*) ;; # The Intel C++ plays gcc on TV but is not really it.
*)  case "$ccflags" in
    *-Wall*) ;;
    *) warn="$warn -Wall" ;;
    esac
    ;;
esac

# Create a test source file for testing what options can be fed to
# gcc in this system; include a selection of most common and commonly
# hairy include files.

cat >_cflags.c <<__EOT__
#include "EXTERN.h"
#include "perl.h"
/* The stdio.h, errno.h, and setjmp.h should be there in any ANSI C89. */
#include <stdio.h>
#include <errno.h>
#include <setjmp.h>
/* Just in case the inclusion of perl.h did not
 * pull in enough system headers, let's try again. */
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef I_STDDEF
#include <stddef.h>
#endif
#ifdef I_STDARG
#include <stdarg.h>
#endif
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_DIRENT
#include <dirent.h>
#endif
#ifdef I_UNISTD
#include <unistd.h>
#endif
#ifdef I_SYS_TYPES
#include <sys/types.h>
#endif
#ifdef I_SYS_PARAM
#include <sys/param.h>
#endif
#ifdef I_SYS_RESOURCE
#include <sys/resource.h>
#endif
#ifdef I_SYS_SELECT
#include <sys/select.h>
#endif
#if defined(HAS_SOCKET) && !defined(VMS) && !defined(WIN32) /* See perl.h. */
#include <sys/socket.h>
#endif
#ifdef I_SYS_STAT
#include <sys/stat.h>
#endif
#ifdef I_SYS_TIME
#include <sys/time.h>
#endif
#ifdef I_SYS_TIMES
#include <sys/times.h>
#endif
#ifdef I_SYS_WAIT
#include <sys/wait.h>
#endif
/* The gcc -ansi can cause a lot of noise in Solaris because of:
 /usr/include/sys/resource.h:148: warning: 'struct rlimit64' declared inside parameter list
 */
int main(int argc, char *argv[]) {

/* Add here test code found to be problematic in some gcc platform. */

/* Off_t/off_t is a struct in Solaris with largefiles, and with gcc -ansi
 * that struct cannot be compared in some gcc releases with a flat
 * integer, such as a STRLEN. */

  IV iv;
  Off_t t0a = 2;
  STRLEN t0b = 3;
  int t0c = t0a == t0b;

/* In FreeBSD 6.2 (and probably other releases too), with -Duse64bitint,
   perl will use atoll(3).  However, that declaration is hidden in <stdlib.h>
   if we force the compiler to use -std=c89 mode.
*/
  iv = Atol("42");

  return (!t0c && (iv == 42)) ? 0 : -1; /* Try to avoid 'unused' warnings. */
}
__EOT__

stdflags=''

# Further gcc warning options.  Build up a list of options that work.
# Note that some problems may only show up with combinations of options,
# e.g. a warning might show up only with -Wall -ansi, not with either
# one individually.
# TODO:  Ponder whether to migrate this back to Configure so hints files can 
# tweak it.  Also, be paranoid about whether results we've deduced in Configure
# (especially about things like long long, which are not in C89) will still be 
# valid if we now add flags like -std=c89.

case "$gccversion" in
'') ;;
[12]*) ;; # gcc versions 1 (gasp!) and 2 are not good for this.
Intel*) ;; # # Is that you, Intel C++?
*)  for opt in -ansi -pedantic -std=c89 -W -Wextra -Wdeclaration-after-statement -Wendif-labels -Wc++-compat
    do
       case " $ccflags " in
       *" $opt "*) ;; # Skip if already there.
       *) rm -f _cflags$_exe
          case "`$cc $cflags $warn $stdflags $opt _cflags.c -o _cflags$_exe 2>&1`" in
          *"unrecognized"*) ;;
          *"implicit declaration"*) ;; # Was something useful hidden?
          *"Invalid"*) ;;
          *"is valid for C"*) ;;
          *) if test -x _cflags$_exe
             then
               case "$opt" in
               -std*) stdflags="$stdflags $opt" ;;
               *) warn="$warn $opt" ;;
               esac
             fi
             ;;
          esac
          ;;
       esac
    done
    ;;
esac
rm -f _cflags.c _cflags$_exe

case "$gccversion" in
'') ;;
*)
  if [ "$gccansipedantic" = "" ]; then
    # If we have -Duse64bitint (or equivalent) in effect and the quadtype
    # has become 'long long', gcc -pedantic becomes unbearable (moreso
    # when combined with -Wall) because long long and LL and %lld|%Ld
    # become warn-worthy.  So let's drop the -pedantic in that case.
    case "$quadtype:$sPRId64" in
    "long long"*|*lld*|*Ld*)
      ccflags="`echo $ccflags|sed 's/-pedantic/ /'`"
      warn="`echo $warn|sed 's/-pedantic/ /'`"
      ;;
    esac
    # Similarly, since 'long long' isn't part of C89, FreeBSD 6.2 headers
    # don't declare atoll() under -std=c89, but we need it.  In general,
    # insisting on -std=c89 is inconsistent with insisting on using
    # 'long long'. So drop -std=c89 and -ansi as well if we're using 
    # 'long long' as our main integral type.
    case "$ivtype" in
    "long long")
	ccflags=`echo $ccflags|sed -e 's/-pedantic/ /' -e 's/-std=c89/ /' -e 's/-ansi/ /'`
	warn=`echo $warn|sed -e 's/-pedantic/ /' -e 's/-ansi/ /'`
	stdflags=`echo $stdflags|sed -e 's/-std=c89/ /'`
	;;
    esac
  fi
  # Using certain features (like the gcc statement expressions)
  # requires knowing whether -pedantic has been specified.
  case "$warn$ccflags" in
  *-pedantic*) warn="$warn -DPERL_GCC_PEDANTIC" ;;
  esac
  ;;
esac

# Code to set any extra flags here.
extra=''

a26 8

# Extra warnings, used e.g. for gcc.
warn="$warn"
# Extra standardness.
stdflags="$stdflags"
# Extra extra.
extra="$extra"

a95 1
    globals) ;;
a98 1
    madly) ;;
a104 2
    opmini) ;;
    pad) ;;
a112 1
    pp_sort) ;;
a120 1
    universal) ;;
a121 1
    utf8) ;;
a122 1
    xsutils) ;;
d126 38
a163 28
case "$cc" in
*g++*)
  # Extra paranoia in case people have bad canned ccflags:
  # bad in the sense that the flags are accepted by g++,
  # but then whined about.
  for f in -Wdeclaration-after-statement -std=c89
  do
    ccflags=`echo $ccflags|sed 's/$f/ /'`
  done
  ;;
esac
cppflags=`echo $cppflags|sed 's/-Wdeclaration-after-statement/ /'`

case "$cc" in
*g++*)
  # Without -Wno-unused-variable g++ 4.x compiles are rather unwatchable
  # because of all the warnings about Perl___notused, and g++ doesn't do
  # __attribute__((unused)) (and even if at some stage it may, people do
  # have older gcc installations), and ((void)x) isn't enough to silence
  # the noises about XS functions not using their cv parameter, so we need
  # the -Wno-unused-parameter too.
  # Yes, we lose some valid warnings, but hopefully other compilers
  # (like gcc) will still pick up those warnings.
  for o in -Wno-unused-variable -Wno-unused-parameter
  do
    case "$warn" in
    *$o*) ;;
    *) warn="$warn $o" ;;
d165 1
a165 2
  done
  ;;
a167 4
if test -f .patch; then
  ccflags="-DPERL_PATCHNUM=`cat .patch` $ccflags"
fi

d169 2
a170 2
    echo "$cc -c -DPERL_CORE $ccflags $stdflags $optimize $warn $extra"
    eval "$also "'"$cc -DPERL_CORE -c $ccflags $stdflags $optimize $warn $extra"'
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d137 1
a137 1
*)  for opt in -ansi -std=c89 -W -Wextra -Wdeclaration-after-statement -Wendif-labels -Wc++-compat
a215 2
# what do executables look like?
_exe="$_exe"
d324 12
a335 12
    case "$cc" in
    *g++*)
      # Extra paranoia in case people have bad canned ccflags:
      # bad in the sense that the flags are accepted by g++,
      # but then whined about.
      for f in -Wdeclaration-after-statement -std=c89
      do
        ccflags=`echo $ccflags|sed 's/$f/ /'`
      done
      ;;
    esac
    cppflags=`echo $cppflags|sed 's/-Wdeclaration-after-statement/ /'`
d337 15
a351 18
    case "$cc" in
    *g++*)
      # Without -Wno-unused-variable g++ 4.x compiles are rather unwatchable
      # because of all the warnings about Perl___notused, and g++ doesn't do
      # __attribute__((unused)) (and even if at some stage it may, people do
      # have older gcc installations), and ((void)x) isn't enough to silence
      # the noises about XS functions not using their cv parameter, so we need
      # the -Wno-unused-parameter too.
      # Yes, we lose some valid warnings, but hopefully other compilers
      # (like gcc) will still pick up those warnings.
      for o in -Wno-unused-variable -Wno-unused-parameter
      do
        case "$warn" in
        *$o*) ;;
        *) warn="$warn $o" ;;
        esac
      done
      ;;
d353 3
d357 3
a366 1
    # end per file behaviour
@


1.1.1.10
log
@Perl 5.12.2 from CPAN
@
text
@d322 1
@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d137 1
a137 2
*)  for opt in -ansi -std=c89 -W -Wextra -Wdeclaration-after-statement \
		-Wendif-labels -Wc++-compat -Wwrite-strings
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a0 2
#!/bin/sh

d143 1
a143 1
          case "`$cc -DPERL_NO_INLINE_FUNCTIONS $cflags $warn $stdflags $opt _cflags.c -o _cflags$_exe 2>&1`" in
d276 47
a323 6

    *) : Customization examples follow: ;;
    av) ccflags=`echo $ccflags | sed -e s/-pipe//` ;;
    deb) ccflags="$ccflags -fno-jump-tables" ;;
    hv) warn=`echo $warn | sed -e s/-Wextra//` ;;
    toke) optimize=-O0 ;;
a325 8
    : The examples are intentionally unreachable as the '*)' case always
    : matches. To use them, move before the '*)' and edit as appropriate.
    : It is not a good idea to set ccflags to an absolute value here, as it
    : often contains general -D defines which are needed for correct
    : compilation. It is better to edit ccflags as shown, using interpolation
    : to add flags, or sed to remove flags.


a339 4
    *clang)
      # clang complains a lot about -Wunused-value which are not fixable
      warn="$warn -Wno-unused-value"
      ;;
@


1.1.1.13
log
@Import perl-5.20.1
@
text
@a2 12
# Generate the cflags script, which is used to determine what cflags
# to pass to the compiler.
# We create a temporary test c program and repeatedly compile it with
# various candidate flags, and from the compiler output, determine what
# flags are supported.
# From this we initialise the following variables in the cflags script:
#
#   $warn
#   $stdflags
#   $extra
#   $_exe

d16 2
a17 2
# This forces SH files to create target in same directory as SH file.
# This is so that make depend always knows where to find SH derivatives.
d145 1
a145 1
          case "`$cc -DPERL_NO_INLINE_FUNCTIONS $ccflags $warn $stdflags $opt _cflags.c -o _cflags$_exe 2>&1`" in
d205 4
a208 4
# This section of the file will have variable substitutions done on it.
# Move anything that needs config subs from !NO!SUBS! section to !GROK!THIS!.
# Protect any dollar signs and backticks that you do not want interpreted
# by putting a backslash in front.  You may delete these comments.
a212 5
# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!

# This file is generated by cflags.SH


d224 1
a224 1
# In the following dollars and backticks do not need the extra backslash.
d240 2
a241 7
# syntax: cflags [optimize=XXX] [file[.suffix]] ...
#   displays the proposed compiler command line for each 'file'
#
#   with no file, dispalys it for all *.c files.
#   The optimise=XXX arg (if present) is evalled, setting the default
#   value of the $optimise variable, which is output on the command line
#   (but which may be overridden for specific files below)
d250 5
d268 1
a268 1
    # allow variables like toke_cflags to be evaluated
d275 1
a275 1
    # or customize here
d280 1
a280 1
    # Customization examples follow:
d287 6
a292 6
    # The examples are intentionally unreachable as the '*)' case always
    # matches. To use them, move before the '*)' and edit as appropriate.
    # It is not a good idea to set ccflags to an absolute value here, as it
    # often contains general -D defines which are needed for correct
    # compilation. It is better to edit ccflags as shown, using interpolation
    # to add flags, or sed to remove flags.
d309 1
a309 1
    *clang*)
a329 9
    *)
      # clang may not be called clang
      case "`$cc -v 2>&1`" in
      *clang*)
        case "$warn" in
        *-Wno-unused-value) ;;
        *) warn="$warn -Wno-unused-value"
        esac
      esac
d333 1
a333 1
    # Can we perhaps use $ansi2knr here
d335 1
@


1.1.1.14
log
@Import perl-5.24.2
@
text
@d4 2
a5 11
# to pass to the compiler for compiling the core perl.
#
# This does NOT affect the XS compilation (ext, dist, cpan)
# since that uses %Config values directly.
#
# For example, since -Wall adds -Wunused-*, a bare -Wall (without
# amending that with -Wno-unused-..., or with the PERL_UNUSED_...)
# would be too much for XS code because there are too many generated
# but often unused things.
#
# We create a temporary test C program and repeatedly compile it with
a7 1
#
a9 1
#   $myccflags (possibly edited version of $Config{ccflags})
d124 1
a124 3
  int t0c = (STRLEN)t0a == t0b;

  printf("%s: %d\n", argv[0], argc);
d142 1
a142 1
# TODO:  Ponder whether to migrate this back to Configure so hints files can
d144 1
a144 1
# (especially about things like long long, which are not in C89) will still be
a146 5
pedantic=''
case "$gccansipedantic" in
define) pedantic='-pedantic' ;;
esac

d151 2
a152 24
#
# NOTE 1: the -std=c89 without -pedantic is a bit pointless.
# Just -std=c89 means "if there is room for interpretation,
# interpret the C89 way."  It does NOT mean "strict C89" on its own.
# You need to add the -pedantic for that.  To do this with Configure,
# do -Dgccansipedantic (note that the -ansi is included in any case,
# the option is a bit oddly named, for historical reasons.)
#
# NOTE 2: -pedantic necessitates adding a couple of flags:
# * -PERL_GCC_PEDANTIC so that the perl code can adapt: there's nothing
#   added by gcc itself to indicate pedanticness.
# * -Wno-overlength-strings under -DDEBUGGING because quite many of
#   the LEAVE_with_name() and assert() calls generate string literals
#   longer then the ANSI minimum of 509 bytes.
#
# NOTE 3: the relative order of these options matters:
# -Wextra before -W
# -std=c89 before -ansi
# -pedantic* before -Werror=d-a-s
#
*)  for opt in -std=c89 -ansi $pedantic \
		-Werror=declaration-after-statement \
		-Wextra -W \
		-Wc++-compat -Wwrite-strings
d157 1
a157 9
	  flags="-DPERL_NO_INLINE_FUNCTIONS $ccflags $warn $stdflags $opt"
	  case "$opt" in
	  *-pedantic*) flags="$flags -DPERL_GCC_PEDANTIC" ;;
	  esac
          # echo "opt = $opt, flags = $flags"
          cmd="$cc $flags _cflags.c -o _cflags$_exe"
          out="`$cmd 2>&1`"
          # echo "$cmd --> $out"
          case "$out" in
a158 1
          *"unknown"*) ;;
d165 2
a166 42
               -std*)
                 echo "cflags.SH: Adding $opt."
                 stdflags="$stdflags $opt"
                 ;;
               -ansi)
                 # -std=c89 is the modern form of -ansi, so add
                 # -ansi only if -std=c89 is not there already.
                 case " $stdflags " in
                 *-std=c89*) ;;
                 *)
                   echo "cflags.SH: Adding $opt."
                   stdflags="$stdflags $opt"
                   ;;
                 esac
                 ;;
               *) case "$opt" in
                  -W)
                    # -Wextra is the modern form of -W, so add
                    # -W only if -Wextra is not there already.
                    case " $warn " in
                    *-Wextra*) ;;
                    *)
                      echo "cflags.SH: Adding $opt."
                      warn="$warn $opt"
                      ;;
                    esac
                    ;;
		  -Werror=declaration-after-statement)
                    # -pedantic* (with -std=c89) covers -Werror=d-a-s.
                    case "$stdflags$warn" in
                    *-std=c89*-pedantic*|*-pedantic*-std=c89*) ;;
                    *)
                      echo "cflags.SH: Adding $opt."
                      warn="$warn $opt"
                      ;;
                    esac
		    ;;
                  *)
                     echo "cflags.SH: Adding $opt."
                     warn="$warn $opt"
                     ;;
                  esac
a172 16
       case "$ccflags$warn" in
       *-pedantic*)
         overlength=''
         case "$ccflags$optimize" in
         *-DDEBUGGING*) overlength='-Wno-overlength-strings' ;;
         esac
         for opt2 in -DPERL_GCC_PEDANTIC $overlength
         do
	   case "$ccflags$warn" in
	   *"$opt2"*) ;;
	   *) echo "cflags.SH: Adding $opt2 because of -pedantic."
	      warn="$warn $opt2" ;;
           esac
         done
         ;;
       esac
d181 1
a181 2
  case "$warn$ccflags" in
  *-pedantic*)
d183 2
a184 2
    # has become 'long long', gcc -pedantic* becomes unbearable
    # (moreso when combined with -Wall) because long long and LL and %lld|%Ld
d186 6
a191 1
    #
d195 1
a195 1
    # 'long long'. So drop -std=c89 and -ansi as well if we're using
d197 6
a202 10
    #
    # usedtrace (DTrace) uses unportable features (dollars in identifiers,
    # and gcc statement expressions), it is just easier to turn off pedantic.
    remove=''
    case "$quadtype:$ivtype:$sPRId64:$usedtrace" in
    *"long long"*|*lld*|*Ld*) remove='long long' ;;
    *) case "$usedtrace" in
       define) remove='usedtrace' ;;
       esac
       ;;
d204 5
a208 35
    case "$remove" in
    '') ;;
    *) echo "cflags.SH: Removing -pedantic*, -std=c89, and -ansi because of $remove."
      ccflags=`echo $ccflags|sed -e 's/-pedantic-errors/ /' -e 's/-pedantic/ /' -e 's/-std=c89/ /' -e 's/-ansi/ /' -e 's/-DPERL_GCC_PEDANTIC/ /'`
      warn=`echo $warn|sed -e 's/-pedantic-errors/ /' -e 's/-pedantic/ /' -e 's/-ansi/ /' -e 's/-DPERL_GCC_PEDANTIC/ /'`
      stdflags=`echo $stdflags|sed -e 's/-std=c89/ /'`
      ;;
    esac
    ;;
  esac
  ;;
esac

# Older clang releases are not wise enough for -Wunused-value.
case "$gccversion" in
*"Apple LLVM "[34]*|*"Apple LLVM version "[34]*)
  for f in -Wno-unused-value
  do
    echo "cflags.SH: Adding $f because clang version '$gccversion'" 
    warn="$warn $f"
  done
  ;;
esac

# The quadmath Q format specifier will cause -Wformat to whine.
case "$gccversion" in
'') ;;
*) case "$usequadmath" in
   define)
     for f in -Wno-format
     do
       echo "cflags.SH: Adding $f because of usequadmath."
       warn="$warn $f"
     done
    ;;
a212 62
case "$cc" in
*g++*)
  # Extra paranoia in case people have bad canned ccflags:
  # bad in the sense that the flags are accepted by g++,
  # but then whined about.
  #
  # -Werror=d-a-s option is valid for g++, by definition,
  # but we remove it just for cleanliness and shorter command lines.
  for f in -Wdeclaration-after-statement \
		-Werror=declaration-after-statement \
		-Wc++-compat \
		-std=c89
  do
    case "$ccflags$warn" in
    *"$f"*)
      echo "cflags.SH: Removing $f because of g++."
      ccflags=`echo $ccflags|sed 's/$f/ /'`
      warn=`echo $warn|sed 's/$f/ /'`
      ;;
    esac
  done
  ;;
esac

for f in -Wdeclaration-after-statement -Werror=declaration-after-statement
do
  case "$cppflags" in
  *"$f"*)
    echo "cflags.SH: Removing $f from cppflags."
    cppflags=`echo $cppflags|sed 's/$f/ /'` ;;
  esac
done

# If usethreads and clang, add -Wthread-safety for clang 3.6 or later.
# gccversion is defined also for clang, because compat, use that for matching.
# Apple overwrites clang version with XCode version, see hints/darwin.sh
# for the gory details.  Aggressively forward-proofing.
case "$usethreads" in
define)
case "$gccversion" in
*" Clang 3."[56789]*|*" Clang "[456]*|*"Apple LLVM 6.1"*|*"Apple LLVM "[789]*)
  for f in -Wthread-safety
  do
    case " $warn " in
    *" $f "*) ;; # Skip if already there.
    *)
      echo "cflags.SH: Adding $f because usethreads and clang and gccversion '$gccversion'"
      warn="$warn $f"
      ;;
    esac
  done
;;
esac
;;
esac

echo "cflags.SH: cc       = $cc"
echo "cflags.SH: ccflags  = $ccflags"
echo "cflags.SH: stdflags = $stdflags"
echo "cflags.SH: optimize = $optimize"
echo "cflags.SH: warn     = $warn"

a215 3
# Protect double or single quotes for better restoring of ccflags.
myccflags=`echo $ccflags | sed -e 's/"/\\\"/g' -e "s/'/\\\'/g"`

a228 2
# Used to restore possible edits by cflags.SH.
myccflags="$myccflags"
a253 1
        ccflags="$myccflags"  # Restore possible edits by cflags.SH.
a294 5
    regcomp) : work around http://bugs.debian.org/754054
        case $archname in
        mips-*|mipsel-*)
            optimize="$optimize -fno-tree-vrp";;
        esac;;
d297 8
a304 3
    # Customization examples follow.
    #
    # The examples are intentionally unreachable as the '*)' case above always
d311 45
a355 4
    av) ccflags=`echo $ccflags | sed -e s/-pipe//` ;;
    deb) ccflags="$ccflags -fno-jump-tables" ;;
    hv) warn=`echo $warn | sed -e s/-Wextra//` ;;
    toke) optimize=-O0 ;;
d357 1
@


