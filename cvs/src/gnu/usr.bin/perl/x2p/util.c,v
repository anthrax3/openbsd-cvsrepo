head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	PERL_5_20_1:1.1.1.11
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	PERL_5_18_2:1.1.1.11
	PERL:1.1.1
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	PERL_5_16_3:1.1.1.10
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.12
date	2014.03.24.15.05.34;	author afresh1;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.24;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.03.03.02.53;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.27.22.25.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.05.22.32.30;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.41;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.09.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.59;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.07.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.37;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.37;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.42.27;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.11.10;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.26.23;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.14;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.40;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.50;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.18.33;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.50.03;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.40;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.03.24.14.59.13;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@/*    util.c
 *
 *    Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1999,
 *    2000, 2001, 2005 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 */

#include "EXTERN.h"
#include "a2p.h"
#include "INTERN.h"
#include "util.h"

#include <stdarg.h>
#define FLUSH

static const char nomem[] = "Out of memory!\n";

/* paranoid version of malloc */


Malloc_t
safemalloc(MEM_SIZE size)
{
    Malloc_t ptr;

    /* malloc(0) is NASTY on some systems */
    ptr = malloc(size ? size : 1);
#ifdef DEBUGGING
    if (debug & 128)
	fprintf(stderr,"0x%lx: (%05d) malloc %ld bytes\n",(unsigned long)ptr,
    	    	an++,(long)size);
#endif
    if (ptr != NULL)
	return ptr;
    else {
	fputs(nomem,stdout) FLUSH;
	exit(1);
    }
    /*NOTREACHED*/
    return 0;
}

/* paranoid version of realloc */

Malloc_t
saferealloc(Malloc_t where, MEM_SIZE size)
{
    Malloc_t ptr;

    /* realloc(0) is NASTY on some systems */
    ptr = realloc(where, size ? size : 1);
#ifdef DEBUGGING
    if (debug & 128) {
	fprintf(stderr,"0x%lx: (%05d) rfree\n",(unsigned long)where,an++);
	fprintf(stderr,"0x%lx: (%05d) realloc %ld bytes\n",(unsigned long)ptr,an++,(long)size);
    }
#endif
    if (ptr != NULL)
	return ptr;
    else {
	fputs(nomem,stdout) FLUSH;
	exit(1);
    }
    /*NOTREACHED*/
    return 0;
}

/* safe version of free */

Free_t
safefree(Malloc_t where)
{
#ifdef DEBUGGING
    if (debug & 128)
	fprintf(stderr,"0x%lx: (%05d) free\n",(unsigned long)where,an++);
#endif
    free(where);
}

/* copy a string up to some (non-backslashed) delimiter, if any */

char *
cpytill(char *to, char *from, int delim)
{
    for (; *from; from++,to++) {
	if (*from == '\\') {
	    if (from[1] == delim)
		from++;
	    else if (from[1] == '\\')
		*to++ = *from++;
	}
	else if (*from == delim)
	    break;
	*to = *from;
    }
    *to = '\0';
    return from;
}


char *
cpy2(char *to, char *from, int delim)
{
    for (; *from; from++,to++) {
	if (*from == '\\')
	    *to++ = *from++;
	else if (*from == '$')
	    *to++ = '\\';
	else if (*from == delim)
	    break;
	*to = *from;
    }
    *to = '\0';
    return from;
}

/* return ptr to little string in big string, NULL if not found */

char *
instr(char *big, const char *little)
{
    char *t, *x;
    const char *s;

    for (t = big; *t; t++) {
	for (x=t,s=little; *s; x++,s++) {
	    if (!*x)
		return NULL;
	    if (*s != *x)
		break;
	}
	if (!*s)
	    return t;
    }
    return NULL;
}

/* copy a string to a safe spot */

char *
savestr(const char *str)
{
    char * const newaddr = (char *) safemalloc((MEM_SIZE)(strlen(str)+1));

    (void)strcpy(newaddr,str);
    return newaddr;
}

/* grow a static string to at least a certain length */

void
growstr(char **strptr, int *curlen, int newlen)
{
    if (newlen > *curlen) {		/* need more room? */
	if (*curlen)
	    *strptr = (char *) saferealloc(*strptr,(MEM_SIZE)newlen);
	else
	    *strptr = (char *) safemalloc((MEM_SIZE)newlen);
	*curlen = newlen;
    }
}

void
fatal(const char *pat,...)
{
#if defined(HAS_VPRINTF)
    va_list args;

    va_start(args, pat);
    vfprintf(stderr,pat,args);
    va_end(args);
#else
    fprintf(stderr,pat,a1,a2,a3,a4);
#endif
    exit(1);
}

#if defined(DARWIN)
__private_extern__	/* warn() conflicts with libc */
#endif
void
warn(const char *pat,...)
{
#if defined(HAS_VPRINTF)
    va_list args;

    va_start(args, pat);
    vfprintf(stderr,pat,args);
    va_end(args);
#else
    fprintf(stderr,pat,a1,a2,a3,a4);
#endif
}

@


1.11
log
@Merge in perl 5.10.1; part two
@
text
@d85 1
a85 1
cpytill(register char *to, register char *from, register int delim)
d104 1
a104 1
cpy2(register char *to, register char *from, register int delim)
d124 2
a125 2
    register char *t, *x;
    register const char *s;
d145 1
a145 1
    register char * const newaddr = (char *) safemalloc((MEM_SIZE)(strlen(str)+1));
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d35 1
a35 1
    if (ptr != Nullch)
d60 1
a60 1
    if (ptr != Nullch)
d122 1
a122 1
instr(char *big, char *little)
d124 2
a125 1
    register char *t, *s, *x;
d130 1
a130 1
		return Nullch;
d137 1
a137 1
    return Nullch;
d143 1
a143 1
savestr(char *str)
@


1.9
log
@merge in perl 5.8.8
@
text
@d4 1
a4 1
 *    2000, 2001, by Larry Wall and others
@


1.8
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d1 1
a1 1
/* $RCSfile: util.c,v $$Revision: 4.1 $$Date: 92/08/07 18:29:29 $
a7 2
 *
 * $Log:	util.c,v $
d18 1
a18 1
static char nomem[] = "Out of memory!\n";
a81 13
/* safe version of string copy */

char *
safecpy(char *to, register char *from, register int len)
{
    register char *dest = to;

    if (from != Nullch) 
	for (len--; len && (*dest++ = *from++); len--) ;
    *dest = '\0';
    return to;
}

d144 1
a144 1
    register char *newaddr = (char *) safemalloc((MEM_SIZE)(strlen(str)+1));
d165 1
a165 16
croak(char *pat,...)
{
#if defined(HAS_VPRINTF)
    va_list args;

    va_start(args, pat);
    vfprintf(stderr,pat,args);
    va_end(args);
#else
    fprintf(stderr,pat,a1,a2,a3,a4);
#endif
    exit(1);
}

void
fatal(char *pat,...)
d183 1
a183 1
warn(char *pat,...)
@


1.7
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 2
a4 1
 *    Copyright (c) 1991-2002, Larry Wall
d209 1
a209 1
#if defined(__APPLE_CC__)
@


1.6
log
@make sure that va_start() has matching va_end()
@
text
@d1 1
a1 1
/* $RCSfile: util.c,v $$Revision: 1.5 $$Date: 2001/05/24 18:36:41 $
d3 1
a3 1
 *    Copyright (c) 1991-2001, Larry Wall
d8 1
a8 4
 * $Log: util.c,v $
 * Revision 1.5  2001/05/24 18:36:41  millert
 * merge in perl 5.6.1 with our local changes
 *
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d1 1
a1 1
/* $RCSfile: util.c,v $$Revision: 4.1 $$Date: 92/08/07 18:29:29 $
d8 4
a11 1
 * $Log:	util.c,v $
d189 1
d204 1
d222 1
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-1997, Larry Wall
@


1.3
log
@perl5.005_03 (stock)
@
text
@d206 3
@


1.2
log
@perl 5.004_04
@
text
@d16 1
a16 3
#ifdef I_STDARG
#  include <stdarg.h>
#endif
d25 1
a25 2
safemalloc(size)
MEM_SIZE size;
d43 1
d49 1
a49 3
saferealloc(where,size)
Malloc_t where;
MEM_SIZE size;
d68 1
d74 1
a74 2
safefree(where)
Malloc_t where;
d86 1
a86 4
safecpy(to,from,len)
char *to;
register char *from;
register int len;
d99 1
a99 3
cpytill(to,from,delim)
register char *to, *from;
register int delim;
d118 1
a118 3
cpy2(to,from,delim)
register char *to, *from;
register int delim;
d136 1
a136 3
instr(big, little)
char *big, *little;

d156 1
a156 2
savestr(str)
char *str;
d158 1
a158 1
    register char *newaddr = safemalloc((MEM_SIZE)(strlen(str)+1));
d167 1
a167 4
growstr(strptr,curlen,newlen)
char **strptr;
int *curlen;
int newlen;
d171 1
a171 1
	    *strptr = saferealloc(*strptr,(MEM_SIZE)newlen);
d173 1
a173 1
	    *strptr = safemalloc((MEM_SIZE)newlen);
a178 1
#if defined(I_STDARG) && defined(HAS_VPRINTF)
a179 6
#else /* I_STDARG */
/*VARARGS1*/
croak(pat,a1,a2,a3,a4)
    char *pat;
    int a1,a2,a3,a4;
#endif /* I_STDARG */
d181 1
a181 1
#if defined(I_STDARG) && defined(HAS_VPRINTF)
a192 1
#if defined(I_STDARG) && defined(HAS_VPRINTF)
a193 6
#else /* I_STDARG */
/*VARARGS1*/
fatal(pat,a1,a2,a3,a4)
    char *pat;
    int a1,a2,a3,a4;
#endif /* I_STDARG */
d195 1
a195 1
#if defined(I_STDARG) && defined(HAS_VPRINTF)
a206 1
#if defined(I_STDARG) && defined(HAS_VPRINTF)
a207 6
#else /* I_STDARG */
/*VARARGS1*/
warn(pat,a1,a2,a3,a4)
    char *pat;
    int a1,a2,a3,a4;
#endif /* I_STDARG */
d209 1
a209 1
#if defined(I_STDARG) && defined(HAS_VPRINTF)
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 *    Copyright (c) 1991, Larry Wall
d16 3
d30 1
a30 2
    char *ptr;
    Malloc_t malloc();
d32 2
a33 1
    ptr = (char *) malloc(size?size:1);	/* malloc(0) is NASTY on our system */
d36 2
a37 1
	fprintf(stderr,"0x%x: (%05d) malloc %d bytes\n",ptr,an++,size);
d52 1
a52 1
char *where;
d55 1
a55 2
    char *ptr;
    Malloc_t realloc();
d57 2
a58 2
    ptr = (char *)
		realloc(where,size?size:1);	/* realloc(0) is NASTY on our system */
d61 2
a62 2
	fprintf(stderr,"0x%x: (%05d) rfree\n",where,an++);
	fprintf(stderr,"0x%x: (%05d) realloc %d bytes\n",ptr,an++,size);
d76 1
a76 1
void
d78 1
a78 1
char *where;
d82 1
a82 1
	fprintf(stderr,"0x%x: (%05d) free\n",where,an++);
d195 4
a199 1
void
d201 10
a210 3
char *pat;
int a1,a2,a3,a4;
{
d212 1
d216 4
a220 1
void
d222 10
a231 3
char *pat;
int a1,a2,a3,a4;
{
d233 1
d237 4
a241 1
void
d243 10
a252 3
char *pat;
int a1,a2,a3,a4;
{
d254 1
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-1997, Larry Wall
a15 1
#include <stdarg.h>
d24 2
a25 1
safemalloc(MEM_SIZE size)
d27 2
a28 1
    Malloc_t ptr;
d30 1
a30 2
    /* malloc(0) is NASTY on some systems */
    ptr = malloc(size ? size : 1);
d33 1
a33 2
	fprintf(stderr,"0x%lx: (%05d) malloc %ld bytes\n",(unsigned long)ptr,
    	    	an++,(long)size);
a41 1
    return 0;
d47 3
a49 1
saferealloc(Malloc_t where, MEM_SIZE size)
d51 2
a52 1
    Malloc_t ptr;
d54 2
a55 2
    /* realloc(0) is NASTY on some systems */
    ptr = realloc(where, size ? size : 1);
d58 2
a59 2
	fprintf(stderr,"0x%lx: (%05d) rfree\n",(unsigned long)where,an++);
	fprintf(stderr,"0x%lx: (%05d) realloc %ld bytes\n",(unsigned long)ptr,an++,(long)size);
a68 1
    return 0;
d73 3
a75 2
Free_t
safefree(Malloc_t where)
d79 1
a79 1
	fprintf(stderr,"0x%lx: (%05d) free\n",(unsigned long)where,an++);
d87 4
a90 1
safecpy(char *to, register char *from, register int len)
d103 3
a105 1
cpytill(register char *to, register char *from, register int delim)
d124 3
a126 1
cpy2(register char *to, register char *from, register int delim)
d144 3
a146 1
instr(char *big, char *little)
d166 2
a167 1
savestr(char *str)
d169 1
a169 1
    register char *newaddr = (char *) safemalloc((MEM_SIZE)(strlen(str)+1));
d178 4
a181 1
growstr(char **strptr, int *curlen, int newlen)
d185 1
a185 1
	    *strptr = (char *) saferealloc(*strptr,(MEM_SIZE)newlen);
d187 1
a187 1
	    *strptr = (char *) safemalloc((MEM_SIZE)newlen);
d192 1
d194 3
a196 1
croak(char *pat,...)
a197 6
#if defined(HAS_VPRINTF)
    va_list args;

    va_start(args, pat);
    vfprintf(stderr,pat,args);
#else
a198 1
#endif
d202 1
d204 3
a206 1
fatal(char *pat,...)
a207 6
#if defined(HAS_VPRINTF)
    va_list args;

    va_start(args, pat);
    vfprintf(stderr,pat,args);
#else
a208 1
#endif
d212 1
d214 3
a216 1
warn(char *pat,...)
a217 6
#if defined(HAS_VPRINTF)
    va_list args;

    va_start(args, pat);
    vfprintf(stderr,pat,args);
#else
a218 1
#endif
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a205 3
#if defined(__APPLE_CC__)
__private_extern__	/* warn() conflicts with libc */
#endif
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-2001, Larry Wall
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
 *    Copyright (c) 1991-2002, Larry Wall
a185 1
    va_end(args);
a199 1
    va_end(args);
a216 1
    va_end(args);
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 2
 *    Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1999,
 *    2000, 2001, by Larry Wall and others
d208 1
a208 1
#if defined(DARWIN)
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d1 1
a1 1
/* $RCSfile: util.c,v $$Revision: 1.8 $$Date: 2003/12/03 03:02:53 $
d9 1
a9 4
 * $Log: util.c,v $
 * Revision 1.8  2003/12/03 03:02:53  millert
 * Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
 *
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d1 1
a1 1
/* $RCSfile: util.c,v $$Revision: 4.1 $$Date: 92/08/07 18:29:29 $
d9 4
a12 1
 * $Log:	util.c,v $
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d1 1
a1 1
/*    util.c
d4 1
a4 1
 *    2000, 2001, 2005 by Larry Wall and others
d8 2
d20 1
a20 1
static const char nomem[] = "Out of memory!\n";
d84 13
d159 1
a159 1
    register char * const newaddr = (char *) safemalloc((MEM_SIZE)(strlen(str)+1));
d180 16
a195 1
fatal(const char *pat,...)
d213 1
a213 1
warn(const char *pat,...)
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d35 1
a35 1
    if (ptr != NULL)
d60 1
a60 1
    if (ptr != NULL)
d122 1
a122 1
instr(char *big, const char *little)
d124 1
a124 2
    register char *t, *x;
    register const char *s;
d129 1
a129 1
		return NULL;
d136 1
a136 1
    return NULL;
d142 1
a142 1
savestr(const char *str)
@


1.1.1.11
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d85 1
a85 1
cpytill(char *to, char *from, int delim)
d104 1
a104 1
cpy2(char *to, char *from, int delim)
d124 2
a125 2
    char *t, *x;
    const char *s;
d145 1
a145 1
    char * const newaddr = (char *) safemalloc((MEM_SIZE)(strlen(str)+1));
@


