head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.82
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.84
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.78
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.80
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.72
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.76
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.74
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.70
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.68
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.66
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.64
	OPENBSD_5_0:1.1.1.1.0.62
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.60
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.58
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.54
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.56
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.52
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.50
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.48
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.46
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.44
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.42
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.40
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.38
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.36
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.34
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.32
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.30
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.28
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.26
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.24
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.22
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	96.08.19.10.12.17;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.17;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@[This file of Tom Christiansen's has been edited to change makelib to h2ph
and .h to .ph where appropriate--law.]

This directory contains files to help you convert the *.ph files generated my
h2ph out of the perl source directory into *.pl files with all the
indirection of the subroutine calls removed.  The .ph version will be more
safely portable, because if something isn't defined on the new system, like
&TIOCGETP, then you'll get a fatal run-time error on the system lacking that
function.  Using the .pl version means that the subsequent scripts will give
you a 0 $TIOCGETP and God only knows what may then happen.   Still, I like the
.pl stuff because they're faster to load.

FIrst, you need to run h2ph on things like sys/ioctl.h to get stuff
into the perl library directory, often /usr/local/lib/perl.  For example,
    # h2ph sys/ioctl.h
takes /usr/include/sys/ioctl.h as input and writes (without i/o redirection)
the file /usr/local/lib/perl/sys/ioctl.ph, which looks like this

    eval 'sub TIOCM_RTS {0004;}';
    eval 'sub TIOCM_ST {0010;}';
    eval 'sub TIOCM_SR {0020;}';
    eval 'sub TIOCM_CTS {0040;}';
    eval 'sub TIOCM_CAR {0100;}';

and much worse, rather than what Larry's ioctl.pl from the perl source dir has, 
which is:

    $TIOCM_RTS = 0004;
    $TIOCM_ST = 0010;
    $TIOCM_SR = 0020;
    $TIOCM_CTS = 0040;
    $TIOCM_CAR = 0100;

[Workaround for fixed bug in makedir/h2ph deleted--law.]

The more complicated ioctl subs look like this:

    eval 'sub TIOCGSIZE {&TIOCGWINSZ;}';
    eval 'sub TIOCGWINSZ {&_IOR("t", 104, \'struct winsize\');}';
    eval 'sub TIOCSETD {&_IOW("t", 1, \'int\');}';
    eval 'sub TIOCGETP {&_IOR("t", 8,\'struct sgttyb\');}';

The _IO[RW] routines use a %sizeof array, which (presumably) 
is keyed on the type name with the value being the size in bytes.  

To build %sizeof, try running this in this directory:

    % ./getioctlsizes 

Which will tell you which things the %sizeof array needs
to hold.  You can try to build a sizeof.ph file with:

    % ./getioctlsizes | ./mksizes > sizeof.ph

Note that mksizes hardcodes the #include files for all the types, so it will
probably require customization.  Once you have sizeof.ph, install it in the
perl library directory.  Run my tcbreak script to see whether you can do
ioctls in perl now.  You'll get some kind of fatal run-time error if you
can't.  That script should be included in this directory.

If this works well, now you can try to convert the *.ph files into
*.pl files.  Try this:

    foreach file ( sysexits.ph sys/{errno.ph,ioctl.ph} )
	./mkvars $file > t/$file:r.pl
    end

The last one will be the hardest.  If it works, should be able to 
run tcbreak2 and have it work the same as tcbreak.

Good luck.
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@
