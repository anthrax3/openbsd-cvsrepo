head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.54;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.06.43;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.06.43;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.40;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./miniperl -w

use strict;

my $osname = $^O;
my $file = 'lib/buildcustomize.pl';

if ( @@ARGV % 2 ) {
    my $dir = shift;
    chdir $dir or die "Can't chdir '$dir': $!";
    unshift @@INC, 'lib';
}

if ( @@ARGV ) {
    # Used during cross-compilation.
    $osname = $ARGV[1];
}

# To clarify, this isn't the entire suite of modules considered "toolchain"
# It's not even all modules needed to build ext/
# It's just the source paths of the (minimum complete set of) modules in ext/
# needed to build the nonxs modules
# After which, all nonxs modules are in lib, which was always sufficient to
# allow miniperl to build everything else.
# Term::ReadLine is not here for building but for allowing the debugger to
# run under miniperl when nothing but miniperl will build :-(.

my @@toolchain = qw(cpan/AutoLoader/lib
		   dist/Carp/lib
		   dist/PathTools dist/PathTools/lib
		   cpan/ExtUtils-Install/lib
		   cpan/ExtUtils-MakeMaker/lib
		   cpan/ExtUtils-Manifest/lib
		   cpan/File-Path/lib
		   ext/re
		   dist/Term-ReadLine/lib
                   dist/Exporter/lib
                   ext/File-Find/lib
                   cpan/Text-Tabs/lib
		   dist/constant/lib
		   cpan/version/lib
		   );

# Text-ParseWords used only in ExtUtils::Liblist::Kid::_win32_ext()
# the rest are for XS building on Win32, since nonxs and xs build simultaneously
# on Win32 if parallel building
push @@toolchain, qw(
	cpan/Text-ParseWords/lib
	dist/ExtUtils-ParseXS/lib
	cpan/Getopt-Long/lib
	cpan/parent/lib
	cpan/ExtUtils-Constant/lib
) if $^O eq 'MSWin32';
push @@toolchain, 'ext/VMS-Filespec/lib' if $^O eq 'VMS';

unshift @@INC, @@toolchain;
require File::Spec::Functions;
require Cwd;

my $cwd  = Cwd::getcwd();

# lib must be last, as the toolchain modules write themselves into it
# as they build, and it's important that @@INC order ensures that the partially
# written files are always masked by the complete versions.

my $inc = join ",\n        ",
    map { "q\0$_\0" }
    (map {File::Spec::Functions::rel2abs($_, $cwd)} (
# faster build on the non-parallel Win32 build process
        $^O eq 'MSWin32' ? ('lib', @@toolchain ) : (@@toolchain, 'lib')
    ));

open my $fh, '>', $file
    or die "Can't open $file: $!";

my $error;

# If any of the system's build tools are written in Perl, then this module
# may well be loaded by a much older version than we are building. So keep it
# as backwards compatible as is easy.
print $fh <<"EOT" or $error = "Can't print to $file: $!";
#!perl

#   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
#   This file is generated by write_buildcustomize.pl.
#   Any changes made here will be lost!

# We are miniperl, building extensions
# Replace the first entry of \@@INC ("lib") with the list of
# directories we need.
splice(\@@INC, 0, 1, $inc);
\$^O = '$osname';
__END__
EOT

if ($error) {
    close $fh
        or warn "Can't unlink $file after error: $!";
} else {
    if (close $fh) {
        do $file and exit;
        $error = "Can't load generated $file: $@@";
    } else {
        $error = "Can't close $file: $!";
    }
}

# It's going very wrong, so try to remove the botched file.

unlink $file
    or warn "Can't unlink $file after error: $!";
die $error;

# ex: set ts=8 sts=4 sw=4 et:
@


1.1
log
@Initial revision
@
text
@d4 5
a8 1
if (@@ARGV) {
d14 4
a17 2
unshift @@INC, ('dist/Cwd', 'dist/Cwd/lib');
require File::Spec::Functions;
d30 2
a31 3
		   dist/Cwd dist/Cwd/lib
		   dist/ExtUtils-Command/lib
		   dist/ExtUtils-Install/lib
d33 1
a33 1
		   dist/ExtUtils-Manifest/lib
d37 5
d44 11
a54 2
# Used only in ExtUtils::Liblist::Kid::_win32_ext()
push @@toolchain, 'cpan/Text-ParseWords/lib' if $^O eq 'MSWin32';
d56 7
a62 1
# lib must be last, as the the toolchain modules write themselves into it
d68 9
a76 1
    (map {File::Spec::Functions::rel2abs($_)} @@toolchain, 'lib'), '.';
d81 1
a81 1
print <<"EOT";
d84 4
d89 5
a93 3
# Reset \@@INC completely, adding the directories we need, and removing the
# installed directories (which we don't need to read, and may confuse us)
\@@INC = ($inc);
d95 20
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d4 1
a4 5

my $osname = $^O;
my $file = 'lib/buildcustomize.pl';

if ( @@ARGV % 2 ) {
d10 2
a11 4
if ( @@ARGV ) {
    # Used during cross-compilation.
    $osname = $ARGV[1];
}
d24 1
a24 1
		   dist/PathTools dist/PathTools/lib
a31 4
                   dist/Exporter/lib
                   ext/File-Find/lib
                   cpan/Text-Tabs/lib
		   dist/constant/lib
a35 1
push @@toolchain, 'ext/VMS-Filespec/lib' if $^O eq 'VMS';
d37 1
a37 4
unshift @@INC, @@toolchain;
require File::Spec::Functions;

# lib must be last, as the toolchain modules write themselves into it
d43 1
a43 9
    (map {File::Spec::Functions::rel2abs($_)} (
# faster build on the non-parallel Win32 build process
        $^O eq 'MSWin32' ? ('lib', @@toolchain ) : (@@toolchain, 'lib')
    ));

open my $fh, '>', $file
    or die "Can't open $file: $!";

my $error;
d48 1
a48 1
print $fh <<"EOT" or $error = "Can't print to $file: $!";
a50 4
#   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
#   This file is generated by write_buildcustomize.pl.
#   Any changes made here will be lost!

d52 3
a54 5
# Replace the first entry of \@@INC ("lib") with the list of
# directories we need.
${\($^O eq 'MSWin32' ? '${^WIN32_SLOPPY_STAT} = 1;':'')}
splice(\@@INC, 0, 1, $inc);
\$^O = '$osname';
a55 25

if ($error) {
    close $fh
        or warn "Can't unlink $file after error: $!";
} else {
    if (close $fh) {
        do $file and exit;
        $error = "Can't load generated $file: $@@";
    } else {
        $error = "Can't close $file: $!";
    }
}

# It's going very wrong, so try to remove the botched file.

unlink $file
    or warn "Can't unlink $file after error: $!";
die $error;

# Local variables:
# cperl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# ex: set ts=8 sts=4 sw=4 et:
@

