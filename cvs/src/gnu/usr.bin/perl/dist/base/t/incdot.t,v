head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.4
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_6_1:1.1.0.4
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.08.14.13.48.47;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	CrMEpTqBUsxCMTjx;

1.1
date	2017.02.05.00.33.40;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;
commitid	7JLVNm1wwPgqSqTa;

1.1.1.1
date	2017.08.14.13.46.06;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.2 dist

OK bluhm@@, Reads ok sthen@@
@
text
@#!/usr/bin/perl -w

use strict;

#######################################################################

sub array_diff {
    my ( $got, $expected ) = @@_;
    push @@$got,      ( '(missing)' )          x ( @@$expected - @@$got ) if @@$got < @@$expected;
    push @@$expected, ( '(should not exist)' ) x ( @@$got - @@$expected ) if @@$got > @@$expected;
    join "\n    ", '  All differences:', (
        map +( "got  [$_] " . $got->[$_], 'expected'.(' ' x length).$expected->[$_] ),
        grep $got->[$_] ne $expected->[$_],
        0 .. $#$got
    );
}

#######################################################################

use Test::More tests => 8;  # some extra tests in t/lib/BaseInc*

use lib 't/lib', sub {()};

# make it look like an older perl
BEGIN { push @@INC, '.' if $INC[-1] ne '.' }

BEGIN {
	my $x = sub { CORE::require $_[0] };
	my $y = sub { &$x };
	my $z = sub { &$y };
	*CORE::GLOBAL::require = $z;
}

my @@expected; BEGIN { @@expected = @@INC }

use base 'BaseIncMandatory';

BEGIN {
    @@t::lib::Dummy::ISA = (); # make it look like an optional load
    my $success = eval q{use base 't::lib::Dummy'}, my $err = $@@;
    ok !$success, 'loading optional modules from . using base.pm fails';
    is_deeply \@@INC, \@@expected, '... without changes to @@INC'
        or diag array_diff [@@INC], [@@expected];
    like $err, qr!Base class package "t::lib::Dummy" is not empty but "t/lib/Dummy\.pm" exists in the current directory\.!,
        '... and the proper error message';
}

BEGIN { @@BaseIncOptional::ISA = () } # make it look like an optional load
use base 'BaseIncOptional';

BEGIN {
    @@expected = ( 't/lib/on-head', @@expected, 't/lib/on-tail' );
    is_deeply \@@INC, \@@expected, 'modules loaded by base can extend @@INC at both ends'
        or diag array_diff [@@INC], [@@expected];
}
@


1.1
log
@Apply local patches - perl-5.24.1
@
text
@d5 1
a5 1
use base ();
d7 10
a16 1
use Test::More tests => 2;
d18 1
a18 1
if ($INC[-1] ne '.') { push @@INC, '.' }
d20 1
a20 1
my $inc = quotemeta "@@INC[0..$#INC-1]";
d22 34
a55 7
eval { 'base'->import("foo") };
like $@@, qr/\@@INC contains: $inc\).\)/,
    'Error does not list final dot in @@INC (or mention use lib)';
eval { 'base'->import('t::lib::Dummy') };
like $@@, qr<\@@INC contains: $inc\).\n(?x:
           )    The file t/lib/Dummy\.pm does exist in the current direct>,
    'special cur dir message for existing files in . that are ignored';
@


1.1.1.1
log
@Import perl-5.24.2
@
text
@d5 1
a5 1
#######################################################################
d7 1
a7 10
sub array_diff {
    my ( $got, $expected ) = @@_;
    push @@$got,      ( '(missing)' )          x ( @@$expected - @@$got ) if @@$got < @@$expected;
    push @@$expected, ( '(should not exist)' ) x ( @@$got - @@$expected ) if @@$got > @@$expected;
    join "\n    ", '  All differences:', (
        map +( "got  [$_] " . $got->[$_], 'expected'.(' ' x length).$expected->[$_] ),
        grep $got->[$_] ne $expected->[$_],
        0 .. $#$got
    );
}
d9 1
a9 1
#######################################################################
d11 1
a11 1
use Test::More tests => 8;  # some extra tests in t/lib/BaseInc*
d13 7
a19 34
use lib 't/lib', sub {()};

# make it look like an older perl
BEGIN { push @@INC, '.' if $INC[-1] ne '.' }

BEGIN {
	my $x = sub { CORE::require $_[0] };
	my $y = sub { &$x };
	my $z = sub { &$y };
	*CORE::GLOBAL::require = $z;
}

my @@expected; BEGIN { @@expected = @@INC }

use base 'BaseIncMandatory';

BEGIN {
    @@t::lib::Dummy::ISA = (); # make it look like an optional load
    my $success = eval q{use base 't::lib::Dummy'}, my $err = $@@;
    ok !$success, 'loading optional modules from . using base.pm fails';
    is_deeply \@@INC, \@@expected, '... without changes to @@INC'
        or diag array_diff [@@INC], [@@expected];
    like $err, qr!Base class package "t::lib::Dummy" is not empty but "t/lib/Dummy\.pm" exists in the current directory\.!,
        '... and the proper error message';
}

BEGIN { @@BaseIncOptional::ISA = () } # make it look like an optional load
use base 'BaseIncOptional';

BEGIN {
    @@expected = ( 't/lib/on-head', @@expected, 't/lib/on-tail' );
    is_deeply \@@INC, \@@expected, 'modules loaded by base can extend @@INC at both ends'
        or diag array_diff [@@INC], [@@expected];
}
@

