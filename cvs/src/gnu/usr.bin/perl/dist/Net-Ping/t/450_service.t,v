head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.10;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.38;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.08;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# Testing service_check method using tcp and syn protocols.

use Config;

BEGIN {
  unless (eval "require IO::Socket") {
    print "1..0 \# Skip: no IO::Socket\n";
    exit;
  }
  unless (getservbyname('echo', 'tcp')) {
    print "1..0 \# Skip: no echo port\n";
    exit;
  }
  unless ($Config{d_getpbyname}) {
    print "1..0 \# Skip: no getprotobyname\n";
    exit;
  }
}

use strict;
use Test::More tests => 26;
BEGIN {use_ok('Net::Ping')};

# I'm lazy so I'll just use IO::Socket
# for the TCP Server stuff instead of doing
# all that direct socket() junk manually.

my $sock1 = new IO::Socket::INET
  LocalAddr => "127.0.0.1",
  Proto => "tcp",
  Listen => 8,
  or warn "bind: $!";

isa_ok($sock1, 'IO::Socket::INET',
       'Start a TCP listen server on ephemeral port');

# Start listening on another ephemeral port
my $sock2 = new IO::Socket::INET
  LocalAddr => "127.0.0.1",
  Proto => "tcp",
  Listen => 8,
  or warn "bind: $!";

isa_ok($sock2, 'IO::Socket::INET',
       'Start a second TCP listen server on ephemeral port');

my $port1 = $sock1->sockport;
cmp_ok($port1, '>', 0);

my $port2 = $sock2->sockport;
cmp_ok($port2, '>', 0);

# 
isnt($port1, $port2, 'Make sure the servers are listening on different ports');

$sock2->close;

# This is how it should be:
# 127.0.0.1:$port1 - service ON
# 127.0.0.1:$port2 - service OFF

#####
# First, we test using the "tcp" protocol.
# (2 seconds should be long enough to connect to loopback.)
my $p = new Net::Ping "tcp", 2;

isa_ok($p, 'Net::Ping', 'new() worked');

# Disable service checking
$p->service_check(0);

# Try on the first port
$p->{port_num} = $port1;

is($p->ping("127.0.0.1"), 1, 'first port is reachable');

# Try on the other port
$p->{port_num} = $port2;

{
    local $TODO;
    $TODO = "Believed not to work on $^O" if $^O eq 'hpux' || $^O eq 'os390';
    is($p->ping("127.0.0.1"), 1, 'second port is reachable');
}

# Enable service checking
$p->service_check(1);

# Try on the first port
$p->{port_num} = $port1;

is($p->ping("127.0.0.1"), 1, 'first service is on');

# Try on the other port
$p->{port_num} = $port2;

isnt($p->ping("127.0.0.1"), 2, 'second service is off');

# test 11 just finished.

#####
# Lastly, we test using the "syn" protocol.
$p = new Net::Ping "syn", 2;

isa_ok($p, 'Net::Ping', 'new() worked');

# Disable service checking
$p->service_check(0);

# Try on the first port
$p->{port_num} = $port1;

is($p->ping("127.0.0.1"), 1, "send SYN to first port") or diag ("ERRNO: $!");

is($p->ack(), '127.0.0.1', 'IP should be reachable');
is($p->ack(), undef, 'No more sockets');

###
# Get a fresh object
$p = new Net::Ping "syn", 2;

isa_ok($p, 'Net::Ping', 'new() worked');

# Disable service checking
$p->service_check(0);

# Try on the other port
$p->{port_num} = $port2;

is($p->ping("127.0.0.1"), 1, "send SYN to second port") or diag ("ERRNO: $!");

{
    local $TODO;
    $TODO = "Believed not to work on $^O" if $^O eq 'hpux' || $^O eq 'MSWin32' || $^O eq 'os390';
    is($p->ack(), '127.0.0.1', 'IP should be reachable');
}
is($p->ack(), undef, 'No more sockets');


###
# Get a fresh object
$p = new Net::Ping "syn", 2;

isa_ok($p, 'Net::Ping', 'new() worked');

# Enable service checking
$p->service_check(1);

# Try on the first port
$p->{port_num} = $port1;

is($p->ping("127.0.0.1"), 1, "send SYN to first port") or diag ("ERRNO: $!");

is($p->ack(), '127.0.0.1', 'IP should be reachable');
is($p->ack(), undef, 'No more sockets');


###
# Get a fresh object
$p = new Net::Ping "syn", 2;

isa_ok($p, 'Net::Ping', 'new() worked');

# Enable service checking
$p->service_check(1);

# Try on the other port
$p->{port_num} = $port2;

is($p->ping("127.0.0.1"), 1, "send SYN to second port") or diag ("ERRNO: $!");

is($p->ack(), undef, 'No sockets should have service on');
@


1.1
log
@Initial revision
@
text
@d3 2
d14 4
d21 2
a22 2
use Test;
use Net::Ping;
a27 7
plan tests => 26, ($^O eq 'MSWin32' ? (todo => [18]) :
		   $^O eq "hpux"    ? (todo => [9, 18]) : ());

# Everything loaded fine
ok 1;

# Start a tcp listen server on ephemeral port
d34 2
a35 2
# Make sure it worked.
ok !!$sock1;
d44 2
a45 2
# Make sure it worked too.
ok !!$sock2;
d48 1
a48 1
ok $port1;
d51 1
a51 1
ok $port2;
d53 2
a54 2
# Make sure the sockets are listening on different ports.
ok ($port1 != $port2);
d67 1
a67 2
# new() worked?
ok !!$p;
d75 1
a75 2
# Make sure it is reachable
ok $p -> ping("127.0.0.1");
d80 5
a84 4
# Make sure it is reachable
ok $p -> ping("127.0.0.1");


d92 1
a92 2
# Make sure service is on
ok $p -> ping("127.0.0.1");
d97 1
a97 2
# Make sure service is off
ok !$p -> ping("127.0.0.1");
d105 1
a105 2
# new() worked?
ok !!$p;
d113 1
a113 2
# Send SYN
if (!ok $p -> ping("127.0.0.1")) {warn "ERRNO: $!";}
d115 2
a116 4
# IP should be reachable
ok $p -> ack();
# No more sockets?
ok !$p -> ack();
d122 1
a122 2
# new() worked?
ok !!$p;
d130 1
a130 2
# Send SYN
if (!ok $p -> ping("127.0.0.1")) {warn "ERRNO: $!";}
d132 6
a137 4
# IP should still be reachable
ok $p -> ack();
# No more sockets?
ok !$p -> ack();
d144 1
a144 2
# new() worked?
ok !!$p;
d152 1
a152 2
# Send SYN
ok $p -> ping("127.0.0.1");
d154 2
a155 4
# Should have service on
ok ($p -> ack(),"127.0.0.1");
# No more good sockets?
ok !$p -> ack();
d162 1
a162 2
# new() worked?
ok !!$p;
d170 1
a170 2
# Send SYN
if (!ok $p -> ping("127.0.0.1")) {warn "ERRNO: $!";}
d172 1
a172 2
# No sockets should have service on
ok !$p -> ack();
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d15 2
a16 2
use Test::More tests => 26;
BEGIN {use_ok('Net::Ping')};
d22 7
d35 2
a36 2
isa_ok($sock1, 'IO::Socket::INET',
       'Start a TCP listen server on ephemeral port');
d45 2
a46 2
isa_ok($sock2, 'IO::Socket::INET',
       'Start a second TCP listen server on ephemeral port');
d49 1
a49 1
cmp_ok($port1, '>', 0);
d52 1
a52 1
cmp_ok($port2, '>', 0);
d54 2
a55 2
# 
isnt($port1, $port2, 'Make sure the servers are listening on different ports');
d68 2
a69 1
isa_ok($p, 'Net::Ping', 'new() worked');
d77 2
a78 1
is($p->ping("127.0.0.1"), 1, 'first port is reachable');
d83 4
a86 5
{
    local $TODO;
    $TODO = "Believed not to work on $^O" if $^O eq 'hpux';
    is($p->ping("127.0.0.1"), 1, 'second port is reachable');
}
d94 2
a95 1
is($p->ping("127.0.0.1"), 1, 'first service is on');
d100 2
a101 1
isnt($p->ping("127.0.0.1"), 2, 'second service is off');
d109 2
a110 1
isa_ok($p, 'Net::Ping', 'new() worked');
d118 2
a119 1
is($p->ping("127.0.0.1"), 1, "send SYN to first port") or diag ("ERRNO: $!");
d121 4
a124 2
is($p->ack(), '127.0.0.1', 'IP should be reachable');
is($p->ack(), undef, 'No more sockets');
d130 2
a131 1
isa_ok($p, 'Net::Ping', 'new() worked');
d139 2
a140 1
is($p->ping("127.0.0.1"), 1, "send SYN to second port") or diag ("ERRNO: $!");
d142 4
a145 6
{
    local $TODO;
    $TODO = "Believed not to work on $^O" if $^O eq 'hpux' || $^O eq 'MSWin32';
    is($p->ack(), '127.0.0.1', 'IP should be reachable');
}
is($p->ack(), undef, 'No more sockets');
d152 2
a153 1
isa_ok($p, 'Net::Ping', 'new() worked');
d161 2
a162 1
is($p->ping("127.0.0.1"), 1, "send SYN to first port") or diag ("ERRNO: $!");
d164 4
a167 2
is($p->ack(), '127.0.0.1', 'IP should be reachable');
is($p->ack(), undef, 'No more sockets');
d174 2
a175 1
isa_ok($p, 'Net::Ping', 'new() worked');
d183 2
a184 1
is($p->ping("127.0.0.1"), 1, "send SYN to second port") or diag ("ERRNO: $!");
d186 2
a187 1
is($p->ack(), undef, 'No sockets should have service on');
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@a2 2
use Config;

a9 4
    exit;
  }
  unless ($Config{d_getpbyname}) {
    print "1..0 \# Skip: no getprotobyname\n";
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d82 1
a82 1
    $TODO = "Believed not to work on $^O" if $^O eq 'hpux' || $^O eq 'os390';
d134 1
a134 1
    $TODO = "Believed not to work on $^O" if $^O eq 'hpux' || $^O eq 'MSWin32' || $^O eq 'os390';
@


