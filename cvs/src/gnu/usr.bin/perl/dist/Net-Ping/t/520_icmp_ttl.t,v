head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.14
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.03.24.14.59.00;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.59.00;	author afresh1;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@# Test to perform icmp protocol testing.
# Root access is required.

BEGIN {
  unless (eval "require Socket") {
    print "1..0 \# Skip: no Socket\n";
    exit;
  }
}

use Test::More qw(no_plan);
BEGIN {use_ok('Net::Ping')};

SKIP: {
  skip "icmp ping requires root privileges.", 1
    if ($> and $^O ne 'VMS' and $^O ne 'cygwin')
      or (($^O eq 'MSWin32' or $^O eq 'cygwin')
    and !IsAdminUser())
  or ($^O eq 'VMS'
      and (`write sys\$output f\$privilege("SYSPRV")` =~ m/FALSE/));
  my $p = new Net::Ping ("icmp",undef,undef,undef,undef,undef);
  isa_ok($p, 'Net::Ping');
  ok $p->ping("127.0.0.1");
  $p->close();
  $p = new Net::Ping ("icmp",undef,undef,undef,undef,0);
  ok $p->ping("127.0.0.1");
  $p->close();
  $p = undef();
  $p = new Net::Ping ("icmp",undef,undef,undef,undef,1);
  isa_ok($p, 'Net::Ping');
  $p = undef();
  $p = eval 'new Net::Ping ("icmp",undef,undef,undef,undef,-1)';
  ok(!defined($p));
  $p = undef();
  $p = eval 'new Net::Ping ("icmp",undef,undef,undef,undef,256)';
  ok(!defined($p));
  $p = new Net::Ping ("icmp",undef,undef,undef,undef,10);
  ok $p->ping("127.0.0.1");
  $p->close();
}

sub IsAdminUser {
  return unless $^O eq 'MSWin32' or $^O eq "cygwin";
  return unless eval { require Win32 };
  return unless defined &Win32::IsAdminUser;
  return Win32::IsAdminUser();
}
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@a3 2
use Config;

a6 4
    exit;
  }
  unless ($Config{d_getpbyname}) {
    print "1..0 \# Skip: no getprotobyname\n";
@

