head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.18
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.39;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl
#
#  Copyright (c) 1995-2000, Raphael Manfredi
#  
#  You may redistribute only under the same terms as Perl 5, as specified
#  in the README file that comes with the distribution.
#

BEGIN {
    unshift @@INC, 't';
    require Config; import Config;
    if ($ENV{PERL_CORE} and $Config{'extensions'} !~ /\bStorable\b/) {
        print "1..0 # Skip: Storable was not built\n";
        exit 0;
    }
    require 'st-dump.pl';
}

sub ok;

print "1..8\n";

use Storable qw(freeze nfreeze thaw);

package TIED_HASH;

sub TIEHASH {
	my $self = bless {}, shift;
	return $self;
}

sub FETCH {
	my $self = shift;
	my ($key) = @@_;
	$main::hash_fetch++;
	return $self->{$key};
}

sub STORE {
	my $self = shift;
	my ($key, $val) = @@_;
	$self->{$key} = $val;
}

package SIMPLE;

sub make {
	my $self = bless [], shift;
	my ($x) = @@_;
	$self->[0] = $x;
	return $self;
}

package ROOT;

sub make {
	my $self = bless {}, shift;
	my $h = tie %hash, TIED_HASH;
	$self->{h} = $h;
	$self->{ref} = \%hash;
	my @@pool;
	for (my $i = 0; $i < 5; $i++) {
		push(@@pool, SIMPLE->make($i));
	}
	$self->{obj} = \@@pool;
	my @@a = ('string', $h, $self);
	$self->{a} = \@@a;
	$self->{num} = [1, 0, -3, -3.14159, 456, 4.5];
	$h->{key1} = 'val1';
	$h->{key2} = 'val2';
	return $self;
};

sub num { $_[0]->{num} }
sub h   { $_[0]->{h} }
sub ref { $_[0]->{ref} }
sub obj { $_[0]->{obj} }

package main;

my $is_EBCDIC = (ord('A') == 193) ? 1 : 0;
 
my $r = ROOT->make;

my $data = '';
if (!$is_EBCDIC) {			# ASCII machine
	while (<DATA>) {
		next if /^#/;
	    $data .= unpack("u", $_);
	}
} else {
	while (<DATA>) {
		next if /^#$/;		# skip comments
		next if /^#\s+/;	# skip comments
		next if /^[^#]/;	# skip uuencoding for ASCII machines
		s/^#//;				# prepare uuencoded data for EBCDIC machines
		$data .= unpack("u", $_);
	}
}

my $expected_length = $is_EBCDIC ? 217 : 278;
ok 1, length $data == $expected_length;
  
my $y = thaw($data);
ok 2, 1;
ok 3, ref $y eq 'ROOT';

$Storable::canonical = 1;		# Prevent "used once" warning
$Storable::canonical = 1;
# Allow for long double string conversions.
$y->{num}->[3] += 0;
$r->{num}->[3] += 0;
ok 4, nfreeze($y) eq nfreeze($r);

ok 5, $y->ref->{key1} eq 'val1';
ok 6, $y->ref->{key2} eq 'val2';
ok 7, $hash_fetch == 2;

my $num = $r->num;
my $ok = 1;
for (my $i = 0; $i < @@$num; $i++) {
	do { $ok = 0; last } unless $num->[$i] == $y->num->[$i];
}
ok 8, $ok;

__END__
#
# using Storable-0.6@@11, output of: print pack("u", nfreeze(ROOT->make));
# original size: 278 bytes
#
M`P,````%!`(````&"(%8"(!8"'U8"@@@@M,RXQ-#$U.5@@)```!R%@@*`S0N-5A8
M6`````-N=6T$`P````(*!'9A;#%8````!&ME>3$*!'9A;#)8````!&ME>3)B
M"51)141?2$%32%A8`````6@@$`@@````,*!G-T<FEN9U@@$``````I8!```````
M6%A8`````6$$`@@````4$`@@````$(@@%AB!E-)35!,15A8!`(````!"(%88@@93
M24U03$586`0"`````0B"6&(&4TE-4$Q%6%@@$`@@````$(@@UAB!E-)35!,15A8
M!`(````!"(188@@9324U03$586%A8`````V]B:@@0,!``````*6%A8`````W)E
(9F($4D]/5%@@`
#
# using Storable-0.6@@11, output of: print '#' . pack("u", nfreeze(ROOT->make));
# on OS/390 (cp 1047) original size: 217 bytes
#
#M!0,1!-G6UN,#````!00,!!$)X\G%Q&W(P>+(`P````(*!*6!D_$````$DH6H
#M\0H$I8&3\@@````22A:CR`````YF%A@@0"````!@@B!"(`(?0H(8/-+\?3Q]?D)
#M```!R`H#]$OU`````Y6DE`0"````!001!N+)U-?3Q0(````!"(`$$@@("````
#M`0B!!!("`@@````$(@@@@02`@@(````!"(,$$@@("`````0B$`````Y:"D00`````
#E!`````&(!`(````#"@@:BHYF)E8<$``````0$```````````!@@0``
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a10 1
    unshift @@INC, 't/compat' if $] < 5.006002;
d16 1
d19 3
a21 1
use Test::More tests => 8;
d102 1
a102 1
is(length $data, $expected_length);
d105 2
a106 2
isnt($y, undef);
is(ref $y, 'ROOT');
d113 1
a113 1
is(nfreeze($y), nfreeze($r));
d115 3
a117 3
is($y->ref->{key1}, 'val1');
is($y->ref->{key2}, 'val2');
is($hash_fetch, 2);
d124 1
a124 1
is($ok, 1);
@

