head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.14
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.39;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl
#
#  Copyright (c) 1995-2000, Raphael Manfredi
#  
#  You may redistribute only under the same terms as Perl 5, as specified
#  in the README file that comes with the distribution.
#

sub BEGIN {
    unshift @@INC, 't';
    require Config; import Config;
    if ($ENV{PERL_CORE} and $Config{'extensions'} !~ /\bStorable\b/) {
        print "1..0 # Skip: Storable was not built\n";
        exit 0;
    }
    require 'st-dump.pl';
}


use Storable qw(dclone);

print "1..12\n";

$a = 'toto';
$b = \$a;
$c = bless {}, CLASS;
$c->{attribute} = 'attrval';
%a = ('key', 'value', 1, 0, $a, $b, 'cvar', \$c);
@@a = ('first', undef, 3, -4, -3.14159, 456, 4.5,
	$b, \$a, $a, $c, \$c, \%a);

print "not " unless defined ($aref = dclone(\@@a));
print "ok 1\n";

$dumped = &dump(\@@a);
print "ok 2\n";

$got = &dump($aref);
print "ok 3\n";

print "not " unless $got eq $dumped; 
print "ok 4\n";

package FOO; @@ISA = qw(Storable);

sub make {
	my $self = bless {};
	$self->{key} = \%main::a;
	return $self;
};

package main;

$foo = FOO->make;
print "not " unless defined($r = $foo->dclone);
print "ok 5\n";

print "not " unless &dump($foo) eq &dump($r);
print "ok 6\n";

# Ensure refs to "undef" values are properly shared during cloning
my $hash;
push @@{$$hash{''}}, \$$hash{a};
print "not " unless $$hash{''}[0] == \$$hash{a};
print "ok 7\n";

my $cloned = dclone(dclone($hash));
print "not " unless $$cloned{''}[0] == \$$cloned{a};
print "ok 8\n";

$$cloned{a} = "blah";
print "not " unless $$cloned{''}[0] == \$$cloned{a};
print "ok 9\n";

# [ID 20020221.007] SEGV in Storable with empty string scalar object
package TestString;
sub new {
    my ($type, $string) = @@_;
    return bless(\$string, $type);
}
package main;
my $empty_string_obj = TestString->new('');
my $clone = dclone($empty_string_obj);
# If still here after the dclone the fix (#17543) worked.
print ref $clone eq ref $empty_string_obj &&
      $$clone eq $$empty_string_obj &&
      $$clone eq '' ? "ok 10\n" : "not ok 10\n";


# Do not fail if Tie::Hash and/or Tie::StdHash is not available
if (eval { require Tie::Hash; scalar keys %Tie::StdHash:: }) {
    tie my %tie, "Tie::StdHash" or die $!;
    $tie{array} = [1,2,3,4];
    $tie{hash} = {1,2,3,4};
    my $clone_array = dclone $tie{array};
    print "not " unless "@@$clone_array" eq "@@{$tie{array}}";
    print "ok 11\n";
    my $clone_hash = dclone $tie{hash};
    print "not " unless $clone_hash->{1} eq $tie{hash}{1};
    print "ok 12\n";
} else {
    print <<EOF;
ok 11 # skip No Tie::StdHash available
ok 12 # skip No Tie::StdHash available
EOF
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a10 1
    unshift @@INC, 't/compat' if $] < 5.006002;
d22 1
a22 1
use Test::More tests => 14;
d32 2
a33 2
my $aref = dclone(\@@a);
isnt($aref, undef);
d36 1
a36 1
isnt($dumped, undef);
d39 1
a39 1
isnt($got, undef);
d41 2
a42 1
is($got, $dumped);
d55 2
a56 2
my $r = $foo->dclone;
isnt($r, undef);
d58 2
a59 1
is(&dump($foo), &dump($r));
d64 2
a65 1
is($$hash{''}[0], \$$hash{a});
d68 2
a69 1
is($$cloned{''}[0], \$$cloned{a});
d72 2
a73 1
is($$cloned{''}[0], \$$cloned{a});
d85 3
a87 3
is(ref $clone, ref $empty_string_obj);
is($$clone, $$empty_string_obj);
is($$clone, '');
a89 1
SKIP: {
d91 1
a91 2
    skip 'No Tie::StdHash available', 2
	unless eval { require Tie::Hash; scalar keys %Tie::StdHash:: };
d96 2
a97 1
    is("@@$clone_array", "@@{$tie{array}}");
d99 7
a105 1
    is($clone_hash->{1}, $tie{hash}{1});
@

