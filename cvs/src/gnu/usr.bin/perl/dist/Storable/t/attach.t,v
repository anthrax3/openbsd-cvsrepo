head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.12
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;
commitid	B31cAbBIXiCqnL97;

1.1.1.1
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w
#
# This file tests that Storable correctly uses STORABLE_attach hooks

sub BEGIN {
	unshift @@INC, 't';
	unshift @@INC, 't/compat' if $] < 5.006002;
	require Config; import Config;
	if ($ENV{PERL_CORE} and $Config{'extensions'} !~ /\bStorable\b/) {
		print "1..0 # Skip: Storable was not built\n";
		exit 0;
	}
}

use Test::More tests => 3;
use Storable ();

{
	my $destruct_cnt = 0;
	my $obj = bless {data => 'ok'}, 'My::WithDestructor';
	my $target = Storable::thaw( Storable::freeze( $obj ) );
	is( $target->{data}, 'ok', 'We got correct object after freeze/thaw' );
	is( $destruct_cnt, 0, 'No tmp objects created by Storable' );
	undef $obj;
	undef $target;
	is( $destruct_cnt, 2, 'Only right objects destroyed at the end' );

	package My::WithDestructor;

	sub STORABLE_freeze {
		my ($self, $clone) = @@_;
		return $self->{data};
	}

	sub STORABLE_attach {
		my ($class, $clone, $string) = @@_;
		return bless {data => $string}, 'My::WithDestructor';
	}

	sub DESTROY { $destruct_cnt++; }
}

@


1.1.1.1
log
@Import perl-5.20.1
@
text
@@
