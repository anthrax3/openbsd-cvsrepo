head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.10;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.39;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.09;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl
#
#  Copyright (c) 1995-2000, Raphael Manfredi
#  
#  You may redistribute only under the same terms as Perl 5, as specified
#  in the README file that comes with the distribution.
#  

sub BEGIN {
    unshift @@INC, 't';
    unshift @@INC, 't/compat' if $] < 5.006002;
    require Config; import Config;
    if ($ENV{PERL_CORE} and $Config{'extensions'} !~ /\bStorable\b/) {
        print "1..0 # Skip: Storable was not built\n";
        exit 0;
    }
}


use Storable qw(freeze thaw dclone);
use vars qw($debugging $verbose);

use Test::More tests => 8;

# Uncomment the following line to get a dump of the constructed data structure
# (you may want to reduce the size of the hashes too)
# $debugging = 1;

$hashsize = 100;
$maxhash2size = 100;
$maxarraysize = 100;

# Use Digest::MD5 if its available to make random string keys

eval { require Digest::MD5; };
$gotmd5 = !$@@;
note "Will use Digest::MD5" if $gotmd5;

# Use Data::Dumper if debugging and it is available to create an ASCII dump

if ($debugging) {
    eval { require "Data/Dumper.pm" };
    $gotdd  = !$@@;
}

@@fixed_strings = ("January", "February", "March", "April", "May", "June",
		  "July", "August", "September", "October", "November", "December" );

# Build some arbitrarily complex data structure starting with a top level hash
# (deeper levels contain scalars, references to hashes or references to arrays);

for (my $i = 0; $i < $hashsize; $i++) {
	my($k) = int(rand(1_000_000));
	$k = Digest::MD5::md5_hex($k) if $gotmd5 and int(rand(2));
	$a1{$k} = { key => "$k", "value" => $i };

	# A third of the elements are references to further hashes

	if (int(rand(1.5))) {
		my($hash2) = {};
		my($hash2size) = int(rand($maxhash2size));
		while ($hash2size--) {
			my($k2) = $k . $i . int(rand(100));
			$hash2->{$k2} = $fixed_strings[rand(int(@@fixed_strings))];
		}
		$a1{$k}->{value} = $hash2;
	}

	# A further third are references to arrays

	elsif (int(rand(2))) {
		my($arr_ref) = [];
		my($arraysize) = int(rand($maxarraysize));
		while ($arraysize--) {
			push(@@$arr_ref, $fixed_strings[rand(int(@@fixed_strings))]);
		}
		$a1{$k}->{value} = $arr_ref;
	}	
}


print STDERR Data::Dumper::Dumper(\%a1) if ($verbose and $gotdd);


# Copy the hash, element by element in order of the keys

foreach $k (sort keys %a1) {
    $a2{$k} = { key => "$k", "value" => $a1{$k}->{value} };
}

# Deep clone the hash

$a3 = dclone(\%a1);

# In canonical mode the frozen representation of each of the hashes
# should be identical

$Storable::canonical = 1;

$x1 = freeze(\%a1);
$x2 = freeze(\%a2);
$x3 = freeze($a3);

cmp_ok(length $x1, '>', $hashsize);	# sanity check
is(length $x1, length $x2);		# idem
is($x1, $x2);
is($x1, $x3);

# In normal mode it is exceedingly unlikely that the frozen
# representations of all the hashes will be the same (normally the hash
# elements are frozen in the order they are stored internally,
# i.e. pseudo-randomly).

$Storable::canonical = 0;

$x1 = freeze(\%a1);
$x2 = freeze(\%a2);
$x3 = freeze($a3);


# Two out of three the same may be a coincidence, all three the same
# is much, much more unlikely.  Still it could happen, so this test
# may report a false negative.

ok(($x1 ne $x2) || ($x1 ne $x3));


# Ensure refs to "undef" values are properly shared
# Same test as in t/dclone.t to ensure the "canonical" code is also correct

my $hash;
push @@{$$hash{''}}, \$$hash{a};
is($$hash{''}[0], \$$hash{a});

my $cloned = dclone(dclone($hash));
is($$cloned{''}[0], \$$cloned{a});

$$cloned{a} = "blah";
is($$cloned{''}[0], \$$cloned{a});
@


1.1
log
@Initial revision
@
text
@d11 1
d23 1
a23 1
print "1..8\n";
d25 1
a25 8
sub ok {
    my($testno, $ok) = @@_;
    print "not " unless $ok;
    print "ok $testno\n";
}


# Uncomment the folowing line to get a dump of the constructed data structure
d33 1
a33 1
# Use MD5 if its available to make random string keys
d35 1
a35 1
eval { require "MD5.pm" };
d37 1
d54 1
a54 1
	$k = MD5->hexhash($k) if $gotmd5 and int(rand(2));
d104 4
a107 4
ok 1, (length($x1) > $hashsize);	# sanity check
ok 2, length($x1) == length($x2);	# idem
ok 3, $x1 eq $x2;
ok 4, $x1 eq $x3;
d110 1
a110 1
# representaions of all the hashes will be the same (normally the hash
d125 1
a125 1
ok 5, ($x1 ne $x2) || ($x1 ne $x3);    
d133 1
a133 1
ok 6, $$hash{''}[0] == \$$hash{a};
d136 1
a136 1
ok 7, $$cloned{''}[0] == \$$cloned{a};
d139 1
a139 1
ok 8, $$cloned{''}[0] == \$$cloned{a};
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a10 1
    unshift @@INC, 't/compat' if $] < 5.006002;
d22 1
a22 1
use Test::More tests => 8;
d24 8
a31 1
# Uncomment the following line to get a dump of the constructed data structure
d109 4
a112 4
cmp_ok(length $x1, '>', $hashsize);	# sanity check
is(length $x1, length $x2);		# idem
is($x1, $x2);
is($x1, $x3);
d115 1
a115 1
# representations of all the hashes will be the same (normally the hash
d130 1
a130 1
ok(($x1 ne $x2) || ($x1 ne $x3));
d138 1
a138 1
is($$hash{''}[0], \$$hash{a});
d141 1
a141 1
is($$cloned{''}[0], \$$cloned{a});
d144 1
a144 1
is($$cloned{''}[0], \$$cloned{a});
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d33 1
a33 1
# Use Digest::MD5 if its available to make random string keys
d35 1
a35 1
eval { require Digest::MD5; };
a36 1
diag "Will use Digest::MD5" if $gotmd5;
d53 1
a53 1
	$k = Digest::MD5::md5_hex($k) if $gotmd5 and int(rand(2));
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d37 1
a37 1
note "Will use Digest::MD5" if $gotmd5;
@


