head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.16
	OPENBSD_6_2_BASE:1.1.1.3
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.14
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.12
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.6
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.8
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.40;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.59.01;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w
#
#  Copyright 2002, Larry Wall.
#  
#  You may redistribute only under the same terms as Perl 5, as specified
#  in the README file that comes with the distribution.
#

sub BEGIN {
    unshift @@INC, 't';
    if ($ENV{PERL_CORE}){
        require Config;
        if ($Config::Config{'extensions'} !~ /\bStorable\b/) {
            print "1..0 # Skip: Storable was not built\n";
            exit 0;
        }
    } else {
	if ($] < 5.005) {
	    print "1..0 # Skip: No Hash::Util pre 5.005\n";
	    exit 0;
	    # And doing this seems on 5.004 seems to create bogus warnings about
	    # unitialized variables, or coredumps in Perl_pp_padsv
	} elsif (!eval "require Hash::Util") {
            if ($@@ =~ /Can\'t locate Hash\/Util\.pm in \@@INC/s) {
                print "1..0 # Skip: No Hash::Util:\n";
                exit 0;
            } else {
                die;
            }
        }
	unshift @@INC, 't';
    }
    require 'st-dump.pl';
}


use Storable qw(dclone freeze thaw);
use Hash::Util qw(lock_hash unlock_value);

print "1..100\n";

my %hash = (question => '?', answer => 42, extra => 'junk', undef => undef);
lock_hash %hash;
unlock_value %hash, 'answer';
unlock_value %hash, 'extra';
delete $hash{'extra'};

my $test;

package Restrict_Test;

sub me_second {
  return (undef, $_[0]);
}

package main;

sub freeze_thaw {
  my $temp = freeze $_[0];
  return thaw $temp;
}

sub testit {
  my $hash = shift;
  my $cloner = shift;
  my $copy = &$cloner($hash);

  my @@in_keys = sort keys %$hash;
  my @@out_keys = sort keys %$copy;
  unless (ok ++$test, "@@in_keys" eq "@@out_keys") {
    print "# Failed: keys mis-match after deep clone.\n";
    print "# Original keys: @@in_keys\n";
    print "# Copy's keys: @@out_keys\n";
  }

  # $copy = $hash;	# used in initial debug of the tests

  ok ++$test, Internals::SvREADONLY(%$copy), "cloned hash restricted?";

  ok ++$test, Internals::SvREADONLY($copy->{question}),
    "key 'question' not locked in copy?";

  ok ++$test, !Internals::SvREADONLY($copy->{answer}),
    "key 'answer' not locked in copy?";

  eval { $copy->{extra} = 15 } ;
  unless (ok ++$test, !$@@, "Can assign to reserved key 'extra'?") {
    my $diag = $@@;
    $diag =~ s/\n.*\z//s;
    print "# \$\@@: $diag\n";
  }

  eval { $copy->{nono} = 7 } ;
  ok ++$test, $@@, "Can not assign to invalid key 'nono'?";

  ok ++$test, exists $copy->{undef},
    "key 'undef' exists";

  ok ++$test, !defined $copy->{undef},
    "value for key 'undef' is undefined";
}

for $Storable::canonical (0, 1) {
  for my $cloner (\&dclone, \&freeze_thaw) {
    print "# \$Storable::canonical = $Storable::canonical\n";
    testit (\%hash, $cloner);
    my $object = \%hash;
    # bless {}, "Restrict_Test";

    my %hash2;
    $hash2{"k$_"} = "v$_" for 0..16;
    lock_hash %hash2;
    for (0..16) {
      unlock_value %hash2, "k$_";
      delete $hash2{"k$_"};
    }
    my $copy = &$cloner(\%hash2);

    for (0..16) {
      my $k = "k$_";
      eval { $copy->{$k} = undef } ;
      unless (ok ++$test, !$@@, "Can assign to reserved key '$k'?") {
	my $diag = $@@;
	$diag =~ s/\n.*\z//s;
	print "# \$\@@: $diag\n";
      }
    }
  }
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a10 1
    unshift @@INC, 't/compat' if $] < 5.006002;
d22 1
a22 1
	    # uninitialized variables, or coredumps in Perl_pp_padsv
d33 1
d38 3
a40 2
use Hash::Util qw(lock_hash unlock_value lock_keys);
use Test::More tests => 104;
d70 5
a74 1
  is("@@in_keys", "@@out_keys", "keys match after deep clone");
d78 1
a78 1
  is(Internals::SvREADONLY(%$copy), 1, "cloned hash restricted?");
d80 2
a81 2
  is(Internals::SvREADONLY($copy->{question}), 1,
     "key 'question' not locked in copy?");
d83 2
a84 2
  is(Internals::SvREADONLY($copy->{answer}), '',
     "key 'answer' not locked in copy?");
d87 5
a91 1
  is($@@, '', "Can assign to reserved key 'extra'?");
d94 1
a94 1
  isnt($@@, '', "Can not assign to invalid key 'nono'?");
d96 2
a97 1
  is(exists $copy->{undef}, 1, "key 'undef' exists");
d99 2
a100 1
  is($copy->{undef}, undef, "value for key 'undef' is undefined");
d122 5
a126 1
      is($@@, '', "Can assign to reserved key '$k'?");
a127 6

    my %hv;
    $hv{a} = __PACKAGE__;
    lock_keys %hv;
    my $hv2 = &$cloner(\%hv);
    ok eval { $$hv2{a} = 70 }, 'COWs do not become read-only';
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d39 1
a39 1
use Test::More tests => 304;
a119 21
}

# [perl #73972]
{
    for my $n (1..100) {
        my @@keys = map { "FOO$_" } (1..$n);

        my $hash1 = {};
        lock_keys(%$hash1, @@keys);
        my $hash2 = dclone($hash1);

        my $success;

        $success = eval { $hash2->{$_} = 'test' for @@keys; 1 };
        my $err = $@@;
        ok($success, "can store in all of the $n restricted slots")
            || diag("failed with $@@");

        $success = !eval { $hash2->{a} = 'test'; 1 };
        ok($success, "the hash is still restricted");
    }
@


