head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	PERL_5_20_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;
expand	@b@;


1.3
date	2014.11.17.21.00.59;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	LnErp1MFKSuew5Fr;

1.2
date	2014.11.17.20.57.05;	author afresh1;	state dead;
branches;
next	1.1;
commitid	QP75iYx42Uo7mMxO;

1.1
date	2014.10.26.22.04.16;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	kVoteutXh2Ohmymx;

1.1.1.1
date	2015.04.25.19.10.33;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.3
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@#!perl

# Test the Maxrecurse option

use strict;
use Test::More tests => 32;
use Data::Dumper;

SKIP: {
    skip "no XS available", 16
      if $Data::Dumper::Useperl;
    local $Data::Dumper::Useperl = 1;
    test_recursion();
}

test_recursion();

sub test_recursion {
    my $pp = $Data::Dumper::Useperl ? "pure perl" : "XS";
    $Data::Dumper::Purity = 1; # make sure this has no effect
    $Data::Dumper::Indent = 0;
    $Data::Dumper::Maxrecurse = 1;
    is(eval { Dumper([]) }, '$VAR1 = [];', "$pp: maxrecurse 1, []");
    is(eval { Dumper([[]]) }, undef, "$pp: maxrecurse 1, [[]]");
    ok($@@, "exception thrown");
    is(eval { Dumper({}) }, '$VAR1 = {};', "$pp: maxrecurse 1, {}");
    is(eval { Dumper({ a => 1 }) }, q($VAR1 = {'a' => 1};),
       "$pp: maxrecurse 1, { a => 1 }");
    is(eval { Dumper({ a => {} }) }, undef, "$pp: maxrecurse 1, { a => {} }");
    ok($@@, "exception thrown");
    is(eval { Dumper(\1) }, "\$VAR1 = \\1;", "$pp: maxrecurse 1, \\1");
    is(eval { Dumper(\\1) }, undef, "$pp: maxrecurse 1, \\1");
    ok($@@, "exception thrown");
    $Data::Dumper::Maxrecurse = 3;
    is(eval { Dumper(\1) }, "\$VAR1 = \\1;", "$pp: maxrecurse 3, \\1");
    is(eval { Dumper(\(my $s = {})) }, "\$VAR1 = \\{};", "$pp: maxrecurse 3, \\{}");
    is(eval { Dumper(\(my $s = { a => [] })) }, "\$VAR1 = \\{'a' => []};",
       "$pp: maxrecurse 3, \\{ a => [] }");
    is(eval { Dumper(\(my $s = { a => [{}] })) }, undef,
       "$pp: maxrecurse 3, \\{ a => [{}] }");
    ok($@@, "exception thrown");
    $Data::Dumper::Maxrecurse = 0;
    is(eval { Dumper([[[[[]]]]]) }, q($VAR1 = [[[[[]]]]];),
       "$pp: check Maxrecurse doesn't set limit to 0 recursion");
}
@


1.2
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@@


1.1
log
@Fix a possibly infinite recursion in Perl Data::Dumper.

Derived from Perl git commit http://perl5.git.perl.org/perl.git
19be3be6968e2337bcdfe480693fff795ecd1304
Add a configuration variable/option to limit recursion when dumping
deep data structures.
Defaults the limit to 1000, which can be reduced or increase, or
eliminated by setting it to 0.
This patch addresses CVE-2014-4330.  This bug was found and
reported by: LSE Leading Security Experts GmbH employee Markus
Vervier.

From Maximilian Pascher;  OK schwarze@@ afresh1@@
@
text
@@


1.1.1.1
log
@Import perl-5.20.2
@
text
@@


