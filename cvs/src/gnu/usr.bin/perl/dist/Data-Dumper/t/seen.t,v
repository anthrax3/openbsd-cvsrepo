head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.10
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w
# t/seen.t - Test Seen()

BEGIN {
    if ($ENV{PERL_CORE}){
        require Config; import Config;
        no warnings 'once';
        if ($Config{'extensions'} !~ /\bData\/Dumper\b/) {
            print "1..0 # Skip: Data::Dumper was not built\n";
            exit 0;
        }
    }
}

use strict;

use Data::Dumper;
use Test::More tests => 10;
use lib qw( ./t/lib );
use Testing qw( _dumptostr );

my ($obj, %dumps);

my (@@e, %f, @@rv, @@g, %h, $k);
@@e = ( qw| alpha beta gamma | );
%f = ( epsilon => 'zeta', eta => 'theta' );
@@g = ( qw| iota kappa lambda | );
%h = ( mu => 'nu', omicron => 'pi' );
sub j { print "Hello world\n"; }
$k = 'just another scalar';

{
    my $warning = '';
    local $SIG{__WARN__} = sub { $warning = $_[0] };

    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( { mark => 'snark' } );
    like($warning,
        qr/^Only refs supported, ignoring non-ref item \$mark/,
        "Got expected warning for non-ref item");
}

{
    my $warning = '';
    local $SIG{__WARN__} = sub { $warning = $_[0] };

    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( { mark => undef } );
    like($warning,
        qr/^Value of ref must be defined; ignoring undefined item \$mark/,
        "Got expected warning for undefined value of item");
}

{
    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( undef );
    is(@@rv, 0, "Seen(undef) returned empty array");
}

{
    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( [ qw| mark snark | ] );
    is(@@rv, 0, "Seen(ref other than hashref) returned empty array");
}

{
    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( { '*samba' => \@@g } );
    is_deeply($rv[0], $obj, "Got the object back: value array ref");
}

{
    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( { '*canasta' => \%h } );
    is_deeply($rv[0], $obj, "Got the object back: value hash ref");
}

{
    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( { '*pinochle' => \&j } );
    is_deeply($rv[0], $obj, "Got the object back: value code ref");
}

{
    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( { '*poker' => \$k } );
    is_deeply($rv[0], $obj, "Got the object back: value ref to scalar");
}

{
    my $l = 'loo';
    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( { $l => \$k } );
    is_deeply($rv[0], $obj, "Got the object back: value ref to scalar");
}

{
    my $l = '$loo';
    $obj = Data::Dumper->new( [ \@@e, \%f ]);
    @@rv = $obj->Seen( { $l => \$k } );
    is_deeply($rv[0], $obj, "Got the object back: value ref to scalar");
}

@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@
