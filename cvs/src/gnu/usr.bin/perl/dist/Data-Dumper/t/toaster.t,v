head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.14
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w
# t/toaster.t - Test Toaster()

BEGIN {
    if ($ENV{PERL_CORE}){
        require Config; import Config;
        no warnings 'once';
        if ($Config{'extensions'} !~ /\bData\/Dumper\b/) {
            print "1..0 # Skip: Data::Dumper was not built\n";
            exit 0;
        }
    }
}

use strict;

use Data::Dumper;
use Test::More tests =>  8;
use lib qw( ./t/lib );
use Testing qw( _dumptostr );

my %d = (
    delta   => 'd',
    beta    => 'b',
    gamma   => 'c',
    alpha   => 'a',
);

run_tests_for_toaster();
SKIP: {
    skip "XS version was unavailable, so we already ran with pure Perl", 4
        if $Data::Dumper::Useperl;
    local $Data::Dumper::Useperl = 1;
    run_tests_for_toaster();
}

sub run_tests_for_toaster {
    note("\$Data::Dumper::Useperl = $Data::Dumper::Useperl");

    my ($obj, %dumps, $toaster, $starting);

    note("\$Data::Dumper::Toaster and Toaster() set to true value");

    $starting = $Data::Dumper::Toaster;
    $toaster = 1;
    local $Data::Dumper::Toaster = $toaster;
    $obj = Data::Dumper->new( [ \%d ] );
    $dumps{'ddtoasterone'} = _dumptostr($obj);
    local $Data::Dumper::Toaster = $starting;

    $obj = Data::Dumper->new( [ \%d ] );
    $obj->Toaster($toaster);
    $dumps{'objtoasterone'} = _dumptostr($obj);

    is($dumps{'ddtoasterone'}, $dumps{'objtoasterone'},
        "\$Data::Dumper::Toaster = 1 and Toaster(1) are equivalent");
    %dumps = ();

    $toaster = 0;
    local $Data::Dumper::Toaster = $toaster;
    $obj = Data::Dumper->new( [ \%d ] );
    $dumps{'ddtoasterzero'} = _dumptostr($obj);
    local $Data::Dumper::Toaster = $starting;

    $obj = Data::Dumper->new( [ \%d ] );
    $obj->Toaster($toaster);
    $dumps{'objtoasterzero'} = _dumptostr($obj);

    is($dumps{'ddtoasterzero'}, $dumps{'objtoasterzero'},
        "\$Data::Dumper::Toaster = 0 and Toaster(0) are equivalent");

    $toaster = undef;
    local $Data::Dumper::Toaster = $toaster;
    $obj = Data::Dumper->new( [ \%d ] );
    $dumps{'ddtoasterundef'} = _dumptostr($obj);
    local $Data::Dumper::Toaster = $starting;

    $obj = Data::Dumper->new( [ \%d ] );
    $obj->Toaster($toaster);
    $dumps{'objtoasterundef'} = _dumptostr($obj);

    is($dumps{'ddtoasterundef'}, $dumps{'objtoasterundef'},
        "\$Data::Dumper::Toaster = undef and Toaster(undef) are equivalent");
    is($dumps{'ddtoasterzero'}, $dumps{'objtoasterundef'},
        "\$Data::Dumper::Toaster = undef and = 0 are equivalent");
    %dumps = ();
}

@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@
