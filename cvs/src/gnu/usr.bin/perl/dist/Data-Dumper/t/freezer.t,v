head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.14
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.12
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.6
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.8
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.33;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w
#
# test a few problems with the Freezer option, not a complete Freezer
# test suite yet

BEGIN {
    require Config; import Config;
    no warnings 'once';
    if ($Config{'extensions'} !~ /\bData\/Dumper\b/) {
	print "1..0 # Skip: Data::Dumper was not built\n";
	exit 0;
    }
}

use strict;
use Test::More qw(no_plan);
use Data::Dumper;
$Data::Dumper::Freezer = 'freeze';

# test for seg-fault bug when freeze() returns a non-ref
my $foo = Test1->new("foo");
my $dumped_foo = Dumper($foo);
ok($dumped_foo, 
   "Use of freezer sub which returns non-ref worked.");
like($dumped_foo, qr/frozed/, 
     "Dumped string has the key added by Freezer.");

# run the same tests with useperl.  this always worked
{
    local $Data::Dumper::Useperl = 1;
    my $foo = Test1->new("foo");
    my $dumped_foo = Dumper($foo);
    ok($dumped_foo, 
       "Use of freezer sub which returns non-ref worked with useperl");
    like($dumped_foo, qr/frozed/, 
         "Dumped string has the key added by Freezer with useperl.");
}

# test for warning when an object doesn't have a freeze()
{
    my $warned = 0;
    local $SIG{__WARN__} = sub { $warned++ };
    my $bar = Test2->new("bar");
    my $dumped_bar = Dumper($bar);
    is($warned, 0, "A missing freeze() shouldn't warn.");
}


# run the same test with useperl, which always worked
{
    local $Data::Dumper::Useperl = 1;
    my $warned = 0;
    local $SIG{__WARN__} = sub { $warned++ };
    my $bar = Test2->new("bar");
    my $dumped_bar = Dumper($bar);
    is($warned, 0, "A missing freeze() shouldn't warn with useperl");
}

# a freeze() which die()s should still trigger the warning
{
    my $warned = 0;
    local $SIG{__WARN__} = sub { $warned++; };
    my $bar = Test3->new("bar");
    my $dumped_bar = Dumper($bar);
    is($warned, 1, "A freeze() which die()s should warn.");
}

# the same should work in useperl
{
    local $Data::Dumper::Useperl = 1;
    my $warned = 0;
    local $SIG{__WARN__} = sub { $warned++; };
    my $bar = Test3->new("bar");
    my $dumped_bar = Dumper($bar);
    is($warned, 1, "A freeze() which die()s should warn with useperl.");
}

# a package with a freeze() which returns a non-ref
package Test1;
sub new { bless({name => $_[1]}, $_[0]) }
sub freeze {
    my $self = shift;
    $self->{frozed} = 1;
}

# a package without a freeze()
package Test2;
sub new { bless({name => $_[1]}, $_[0]) }

# a package with a freeze() which dies
package Test3;
sub new { bless({name => $_[1]}, $_[0]) }
sub freeze { die "freeze() is broked" }
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d93 1
a93 1
sub freeze { die "freeze() is broken" }
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d10 2
a11 2
        print "1..0 # Skip: Data::Dumper was not built\n";
        exit 0;
d16 1
a16 1
use Test::More tests =>  8;
d18 1
a18 2
use lib qw( ./t/lib );
use Testing qw( _dumptostr );
d20 9
d30 7
a36 34
    local $Data::Dumper::Freezer = 'freeze';

    # test for seg-fault bug when freeze() returns a non-ref
    {
        my $foo = Test1->new("foo");
        my $dumped_foo = Dumper($foo);
        ok($dumped_foo,
           "Use of freezer sub which returns non-ref worked.");
        like($dumped_foo, qr/frozed/,
             "Dumped string has the key added by Freezer with useperl.");
        like(join(" ", Dumper($foo)), qr/\A\$VAR1 = /,
             "Dumped list doesn't begin with Freezer's return value with useperl");
    }


    # test for warning when an object does not have a freeze()
    {
        my $warned = 0;
        local $SIG{__WARN__} = sub { $warned++ };
        my $bar = Test2->new("bar");
        my $dumped_bar = Dumper($bar);
        is($warned, 0, "A missing freeze() shouldn't warn.");
    }


    # a freeze() which die()s should still trigger the warning
    {
        my $warned = 0;
        local $SIG{__WARN__} = sub { $warned++; };
        my $bar = Test3->new("bar");
        my $dumped_bar = Dumper($bar);
        is($warned, 1, "A freeze() which die()s should warn.");
    }

d39 1
d41 6
a46 2
    my ($obj, %dumps);
    my $foo = Test1->new("foo");
a47 8
    local $Data::Dumper::Freezer = 'freeze';
    $obj = Data::Dumper->new( [ $foo ] );
    $dumps{'ddftrue'} = _dumptostr($obj);
    local $Data::Dumper::Freezer = '';

    $obj = Data::Dumper->new( [ $foo ] );
    $obj->Freezer('freeze');
    $dumps{'objset'} = _dumptostr($obj);
d49 8
a56 2
    is($dumps{'ddftrue'}, $dumps{'objset'},
        "\$Data::Dumper::Freezer and Freezer() are equivalent");
d59 1
d61 5
a65 13
    my ($obj, %dumps);
    my $foo = Test1->new("foo");

    local $Data::Dumper::Freezer = '';
    $obj = Data::Dumper->new( [ $foo ] );
    $dumps{'ddfemptystr'} = _dumptostr($obj);

    local $Data::Dumper::Freezer = undef;
    $obj = Data::Dumper->new( [ $foo ] );
    $dumps{'ddfundef'} = _dumptostr($obj);

    is($dumps{'ddfundef'}, $dumps{'ddfemptystr'},
        "\$Data::Dumper::Freezer same with empty string or undef");
d68 1
d70 6
a75 13
    my ($obj, %dumps);
    my $foo = Test1->new("foo");

    $obj = Data::Dumper->new( [ $foo ] );
    $obj->Freezer('');
    $dumps{'objemptystr'} = _dumptostr($obj);

    $obj = Data::Dumper->new( [ $foo ] );
    $obj->Freezer(undef);
    $dumps{'objundef'} = _dumptostr($obj);

    is($dumps{'objundef'}, $dumps{'objemptystr'},
        "Freezer() same with empty string or undef");
a76 1

@


