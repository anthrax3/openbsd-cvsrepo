head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w

BEGIN {
    if ($ENV{PERL_CORE}){
        require Config; import Config;
        no warnings 'once';
        if ($Config{'extensions'} !~ /\bData\/Dumper\b/) {
            print "1..0 # Skip: Data::Dumper was not built\n";
            exit 0;
        }
    }
}

use strict;
use Data::Dumper;
use Test::More tests => 4;

my ($a, $b, $obj);
my (@@values, @@names);
my (@@newvalues, $objagain, %newvalues);
$a = 'alpha';
$b = 'beta';

$obj = Data::Dumper->new([$a,$b], [qw(a b)]);
@@values = $obj->Values;
is_deeply(\@@values, [$a,$b], "Values() returned expected list");

@@newvalues = ( qw| gamma delta epsilon | );
$objagain = $obj->Values(\@@newvalues);
is($objagain, $obj, "Values returned same object");
is_deeply($objagain->{todump}, \@@newvalues,
    "Able to use Values() to set values to be dumped");

$obj = Data::Dumper->new([$a,$b], [qw(a b)]);
%newvalues = ( gamma => 'delta', epsilon => 'zeta' );
eval { @@values = $obj->Values(\%newvalues); };
like($@@, qr/Argument to Values, if provided, must be array ref/,
    "Got expected error message: bad argument to Values()");


@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@
