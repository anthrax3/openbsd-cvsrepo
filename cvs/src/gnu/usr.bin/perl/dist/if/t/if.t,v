head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.11;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

use strict;
use Test::More tests => 10;

my $v_plus = $] + 1;
my $v_minus = $] - 1;

unless (eval 'use open ":std"; 1') {
  # pretend that open.pm is present
  $INC{'open.pm'} = 'open.pm';
  eval 'sub open::foo{}';		# Just in case...
}

no strict;

is( eval "use if ($v_minus > \$]), strict => 'subs'; \${'f'} = 12", 12,
    '"use if" with a false condition, fake pragma');
is( eval "use if ($v_minus > \$]), strict => 'refs'; \${'f'} = 12", 12,
    '"use if" with a false condition and a pragma');

is( eval "use if ($v_plus > \$]), strict => 'subs'; \${'f'} = 12", 12,
    '"use if" with a true condition, fake pragma');

is( eval "use if ($v_plus > \$]), strict => 'refs'; \${'f'} = 12", undef,
    '"use if" with a true condition and a pragma');
like( $@@, qr/while "strict refs" in use/, 'expected error message'),

# Old version had problems with the module name 'open', which is a keyword too
# Use 'open' =>, since pre-5.6.0 could interpret differently
is( (eval "use if ($v_plus > \$]), 'open' => IN => ':crlf'; 12" || 0), 12,
    '"use if" with open');

is(eval "use if ($v_plus > \$])", undef,
   "Too few args to 'use if' returns <undef>");
like($@@, qr/Too few arguments to 'use if'/, "  ... and returns correct error");

is(eval "no if ($v_plus > \$])", undef,
   "Too few args to 'no if' returns <undef>");
like($@@, qr/Too few arguments to 'no if'/, "  ... and returns correct error");
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
use Test::More tests => 6;
d33 8
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
