head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.08;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.08.33;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.33;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.03;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.07;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package ExtUtils::CBuilder::Platform::Windows::BCC;
$ExtUtils::CBuilder::Platform::Windows::BCC::VERSION = '0.280225';
use strict;
use warnings;

sub format_compiler_cmd {
  my ($self, %spec) = @@_;

  foreach my $path ( @@{ $spec{includes} || [] },
                     @@{ $spec{perlinc}  || [] } ) {
    $path = '-I' . $path;
  }

  %spec = $self->write_compiler_script(%spec)
    if $spec{use_scripts};

  return [ grep {defined && length} (
    $spec{cc}, '-c'         ,
    @@{$spec{includes}}      ,
    @@{$spec{cflags}}        ,
    @@{$spec{optimize}}      ,
    @@{$spec{defines}}       ,
    @@{$spec{perlinc}}       ,
    "-o$spec{output}"       ,
    $spec{source}           ,
  ) ];
}

sub write_compiler_script {
  my ($self, %spec) = @@_;

  my $script = File::Spec->catfile( $spec{srcdir},
                                    $spec{basename} . '.ccs' );

  $self->add_to_cleanup($script);

  print "Generating script '$script'\n" if !$self->{quiet};

  my $SCRIPT = IO::File->new( ">$script" )
    or die( "Could not create script '$script': $!" );

  # XXX Borland "response files" seem to be unable to accept macro
  # definitions containing quoted strings. Escaping strings with
  # backslash doesn't work, and any level of quotes are stripped. The
  # result is a floating point number in the source file where a
  # string is expected. So we leave the macros on the command line.
  print $SCRIPT join( "\n",
    map { ref $_ ? @@{$_} : $_ }
    grep defined,
    delete(
      @@spec{ qw(includes cflags optimize perlinc) } )
  );

  push @@{$spec{includes}}, '@@"' . $script . '"';

  return %spec;
}

sub format_linker_cmd {
  my ($self, %spec) = @@_;

  foreach my $path ( @@{$spec{libpath}} ) {
    $path = "-L$path";
  }

  push( @@{$spec{startup}}, 'c0d32.obj' )
    unless ( $spec{startup} && @@{$spec{startup}} );

  %spec = $self->write_linker_script(%spec)
    if $spec{use_scripts};

  return [ grep {defined && length} (
    $spec{ld}               ,
    @@{$spec{lddlflags}}     ,
    @@{$spec{libpath}}       ,
    @@{$spec{other_ldflags}} ,
    @@{$spec{startup}}       ,
    @@{$spec{objects}}       , ',',
    $spec{output}           , ',',
    $spec{map_file}         , ',',
    $spec{libperl}          ,
    @@{$spec{perllibs}}      , ',',
    $spec{def_file}
  ) ];
}

sub write_linker_script {
  my ($self, %spec) = @@_;

  # To work around Borlands "unique" commandline syntax,
  # two scripts are used:

  my $ld_script = File::Spec->catfile( $spec{srcdir},
                                       $spec{basename} . '.lds' );
  my $ld_libs   = File::Spec->catfile( $spec{srcdir},
                                       $spec{basename} . '.lbs' );

  $self->add_to_cleanup($ld_script, $ld_libs);

  print "Generating scripts '$ld_script' and '$ld_libs'.\n" if !$self->{quiet};

  # Script 1: contains options & names of object files.
  my $LD_SCRIPT = IO::File->new( ">$ld_script" )
    or die( "Could not create linker script '$ld_script': $!" );

  print $LD_SCRIPT join( " +\n",
    map { @@{$_} }
    grep defined,
    delete(
      @@spec{ qw(lddlflags libpath other_ldflags startup objects) } )
  );

  # Script 2: contains name of libs to link against.
  my $LD_LIBS = IO::File->new( ">$ld_libs" )
    or die( "Could not create linker script '$ld_libs': $!" );

  print $LD_LIBS join( " +\n",
     (delete $spec{libperl}  || ''),
    @@{delete $spec{perllibs} || []},
  );

  push @@{$spec{lddlflags}}, '@@"' . $ld_script  . '"';
  push @@{$spec{perllibs}},  '@@"' . $ld_libs    . '"';

  return %spec;
}

1;


@


1.1
log
@Initial revision
@
text
@d2 3
a4 3

use vars qw($VERSION);
$VERSION = '0.280206';
d45 1
a45 1
  # result is is a floating point number in the source file where a
d67 1
a67 1
    unless ( $spec{starup} && @@{$spec{startup}} );
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d4 1
a4 1
$VERSION = '0.280209';
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d4 1
a4 1
$VERSION = '0.280217';
d45 1
a45 1
  # result is a floating point number in the source file where a
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d2 3
a4 3
$ExtUtils::CBuilder::Platform::Windows::BCC::VERSION = '0.280225';
use strict;
use warnings;
d67 1
a67 1
    unless ( $spec{startup} && @@{$spec{startup}} );
@


