head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.08;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.08.33;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.33;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.03;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#! perl -w

use File::Spec;
my $perl;
BEGIN {
  $perl = File::Spec->rel2abs($^X);
  $perl = qq{"$perl"}; # So it doesn't fail when there are spaces.
}

use strict;
use Test::More;
BEGIN { 
  if ($^O eq 'VMS') {
    # So we can get the return value of system()
    require vmsish;
    import vmsish;
  }
}

plan tests => 7;

require_ok "ExtUtils::CBuilder";

my $b = eval { ExtUtils::CBuilder->new(quiet => 1) };
ok( $b, "got CBuilder object" ) or diag $@@;

# test missing compiler
{

    my $b1 = ExtUtils::CBuilder->new(quiet => 1);

    configure_fake_missing_compilers($b1);

    # This will fork a child that will print
    #    'Can't exec "djaadjfkadjkfajdf"'
    # or similar on STDERR; so make sure fd2 is temporarily closed before
    # the fork
    open(my $orig_err, ">&", \*STDERR) or die "Can't dup STDERR: $!";
    close(STDERR);
    my $res = $b1->have_compiler;
    open(STDERR, ">&", $orig_err) or die "Can't dup \$orig_err $!";
    close($orig_err);

    is($res, 0, "have_compiler: fake missing cc" );
}
{
    my $b2 = ExtUtils::CBuilder->new(quiet => 1);
    configure_fake_missing_compilers($b2);

    open(my $orig_err, ">&", \*STDERR) or die "Can't dup STDERR: $!";
    close(STDERR);
    my $res = $b2->have_cplusplus;
    open(STDERR, ">&", $orig_err) or die "Can't dup \$orig_err $!";
    close($orig_err);

    is($res, 0, "have_cplusplus: fake missing c++" );
}

# test found compiler
{
my $b3 = ExtUtils::CBuilder->new(quiet => 1);
configure_fake_present_compilers($b3);
is( $b3->have_compiler, 1, "have_compiler: fake present cc" );
}
{
my $b4 = ExtUtils::CBuilder->new(quiet => 1);
configure_fake_present_compilers($b4);
is( $b4->have_cplusplus, 1, "have_cpp_compiler: fake present c++" );
}

# test missing cpp compiler

# test one non-exported subroutine
{
    my $type = ExtUtils::CBuilder::os_type();
    if ($type) {
        pass( "OS type $type located for $^O" );
    }
    else {
        pass( "OS type not yet listed for $^O" );
    }
}

sub configure_fake_missing_compilers {
    my $b = shift;
    my $bogus_path = 'djaadjfkadjkfajdf';
    $b->{config}{cc} = $bogus_path;
    $b->{config}{ld} = $bogus_path;
    $b->{have_cc} = undef;
    $b->{have_cxx} = undef;
}

sub configure_fake_present_compilers {
    my $b = shift;
    my $run_perl = "$perl -e1 --";
    $b->{config}{cc} = $run_perl;
    $b->{config}{ld} = $run_perl;
    $b->{config}{cxx} = $run_perl;
    $b->{have_cc} = undef;
    $b->{have_cxx} = undef;
}
@


1.1
log
@Initial revision
@
text
@d7 1
a26 2
my $bogus_path = 'djaadjfkadjkfajdf';
my $run_perl = "$perl -e1 --";
d28 5
a32 2
$b->{config}{cc} = $bogus_path;
$b->{config}{ld} = $bogus_path;
d34 24
a57 4
$b->{have_cc} = undef;
is( $b->have_compiler, 0, "have_compiler: fake missing cc" );
$b->{have_cxx} = undef;
is( $b->have_cplusplus, 0, "have_cplusplus: fake missing c++" );
d60 10
a69 7
$b->{config}{cc} = $run_perl;
$b->{config}{ld} = $run_perl;
$b->{config}{cxx} = $run_perl;
$b->{have_cc} = undef;
is( $b->have_compiler, 1, "have_compiler: fake present cc" );
$b->{have_cxx} = undef;
is( $b->have_cplusplus, 1, "have_cpp_compiler: fake present c++" );
d82 19
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d26 2
d29 7
a35 10
{
my $b1 = ExtUtils::CBuilder->new(quiet => 1);
configure_fake_missing_compilers($b1);
is( $b1->have_compiler, 0, "have_compiler: fake missing cc" );
}
{
my $b2 = ExtUtils::CBuilder->new(quiet => 1);
configure_fake_missing_compilers($b2);
is( $b2->have_cplusplus, 0, "have_cplusplus: fake missing c++" );
}
d38 7
a44 10
{
my $b3 = ExtUtils::CBuilder->new(quiet => 1);
configure_fake_present_compilers($b3);
is( $b3->have_compiler, 1, "have_compiler: fake present cc" );
}
{
my $b4 = ExtUtils::CBuilder->new(quiet => 1);
configure_fake_present_compilers($b4);
is( $b4->have_cplusplus, 1, "have_cpp_compiler: fake present c++" );
}
a56 19
}

sub configure_fake_missing_compilers {
    my $b = shift;
    my $bogus_path = 'djaadjfkadjkfajdf';
    $b->{config}{cc} = $bogus_path;
    $b->{config}{ld} = $bogus_path;
    $b->{have_cc} = undef;
    $b->{have_cxx} = undef;
}

sub configure_fake_present_compilers {
    my $b = shift;
    my $run_perl = "$perl -e1 --";
    $b->{config}{cc} = $run_perl;
    $b->{config}{ld} = $run_perl;
    $b->{config}{cxx} = $run_perl;
    $b->{have_cc} = undef;
    $b->{have_cxx} = undef;
@

