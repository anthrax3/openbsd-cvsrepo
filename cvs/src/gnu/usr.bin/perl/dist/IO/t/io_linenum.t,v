head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.09;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

# test added 29th April 1999 by Paul Johnson (pjcj@@transeda.com)
# updated    28th May   1999 by Paul Johnson

my $File;

BEGIN {
    $File = __FILE__;
    require strict; import strict;
}

use Test::More tests => 12;

use IO::File;

sub lineno
{
  my ($f) = @@_;
  my $l;
  $l .= "$. ";
  $l .= $f->input_line_number;
  $l .= " $.";                     # check $. before and after input_line_number
  $l;
}

my $t;

open (F, $File) or die $!;
my $io = IO::File->new($File) or die $!;

<F> for (1 .. 10);
is(lineno($io), "10 0 10");

$io->getline for (1 .. 5);
is(lineno($io), "5 5 5");

<F>;
is(lineno($io), "11 5 11");

$io->getline;
is(lineno($io), "6 6 6");

$t = tell F;                                        # tell F; provokes a warning
is(lineno($io), "11 6 11");

<F>;
is(lineno($io), "12 6 12");

select F;
is(lineno($io), "12 6 12");

<F> for (1 .. 10);
is(lineno($io), "22 6 22");

$io->getline for (1 .. 5);
is(lineno($io), "11 11 11");

$t = tell F;
# We used to have problems here before local $. worked.
# input_line_number() used to use select and tell.  When we did the
# same, that mechanism brise.  It should work now.
is(lineno($io), "22 11 22");

{
  local $.;
  $io->getline for (1 .. 5);
  is(lineno($io), "16 16 16");
}

is(lineno($io), "22 16 22");
@


1.1
log
@Initial revision
@
text
@d13 1
a13 3
use Test;

BEGIN { plan tests => 12 }
d33 1
a33 1
ok(lineno($io), "10 0 10");
d36 1
a36 1
ok(lineno($io), "5 5 5");
d39 1
a39 1
ok(lineno($io), "11 5 11");
d42 1
a42 1
ok(lineno($io), "6 6 6");
d45 1
a45 1
ok(lineno($io), "11 6 11");
d48 1
a48 1
ok(lineno($io), "12 6 12");
d51 1
a51 1
ok(lineno($io), "12 6 12");
d54 1
a54 1
ok(lineno($io), "22 6 22");
d57 1
a57 1
ok(lineno($io), "11 11 11");
d62 2
a63 2
# same, that mechanism broke.  It should work now.
ok(lineno($io), "22 11 22");
d68 1
a68 1
  ok(lineno($io), "16 16 16");
d71 1
a71 1
ok(lineno($io), "22 16 22");
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
