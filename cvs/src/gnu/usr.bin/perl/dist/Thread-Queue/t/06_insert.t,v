head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.24
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

BEGIN {
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # SKIP Perl not compiled with 'useithreads'\n");
        exit(0);
    }
}

use threads;
use Thread::Queue;

if ($] == 5.008) {
    require 't/test.pl';   # Test::More work-alike for Perl 5.8.0
} else {
    require Test::More;
}
Test::More->import();
plan('tests' => 16);

my $q = Thread::Queue->new(1..10);
ok($q, 'New queue');

threads->create(sub {
    $q->insert(5);
    $q->insert(-5);
    $q->insert(100);
    $q->insert(-100);
})->join();

my @@x = $q->dequeue_nb(100);
is_deeply(\@@x, [1..10], 'No-op inserts');


$q = Thread::Queue->new(1..10);
ok($q, 'New queue');

threads->create(sub {
    $q->insert(10, qw/tail/);
    $q->insert(0, qw/head/);
})->join();

@@x = $q->dequeue_nb(100);
is_deeply(\@@x, ['head',1..10,'tail'], 'Edge inserts');


$q = Thread::Queue->new(1..10);
ok($q, 'New queue');

threads->create(sub {
    $q->insert(5, qw/foo bar/);
    $q->insert(-2, qw/qux/);
})->join();

@@x = $q->dequeue_nb(100);
is_deeply(\@@x, [1..5,'foo','bar',6..8,'qux',9,10], 'Middle inserts');


$q = Thread::Queue->new(1..10);
ok($q, 'New queue');

threads->create(sub {
    $q->insert(20, qw/tail/);
    $q->insert(-20, qw/head/);
})->join();

@@x = $q->dequeue_nb(100);
is_deeply(\@@x, ['head',1..10,'tail'], 'Extreme inserts');


$q = Thread::Queue->new();
ok($q, 'New queue');
threads->create(sub { $q->insert(0, 1..3); })->join();
@@x = $q->dequeue_nb(100);
is_deeply(\@@x, [1..3], 'Empty queue insert');

$q = Thread::Queue->new();
ok($q, 'New queue');
threads->create(sub { $q->insert(20, 1..3); })->join();
@@x = $q->dequeue_nb(100);
is_deeply(\@@x, [1..3], 'Empty queue insert');

$q = Thread::Queue->new();
ok($q, 'New queue');
threads->create(sub { $q->insert(-1, 1..3); })->join();
@@x = $q->dequeue_nb(100);
is_deeply(\@@x, [1..3], 'Empty queue insert');

$q = Thread::Queue->new();
ok($q, 'New queue');
threads->create(sub {
    $q->insert(2, 1..3);
    $q->insert(1, 'foo');
})->join();
@@x = $q->dequeue_nb(100);
is_deeply(\@@x, [1,'foo',2,3], 'Empty queue insert');

exit(0);

# EOF
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
