head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

BEGIN {
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # SKIP Perl not compiled with 'useithreads'\n");
        exit(0);
    }
}

use threads;
use Thread::Queue;

if ($] == 5.008) {
    require 't/test.pl';   # Test::More work-alike for Perl 5.8.0
} else {
    require Test::More;
}
Test::More->import();
plan('tests' => 20);

my $q = Thread::Queue->new(1..10);
ok($q, 'New queue');

threads->create(sub {
    # Default count = 1
    is($q->extract(),   1, 'No args');          # 2..10 left
    is($q->extract(0),  2, 'Head');             # 3..10 left
    is($q->extract(5),  8, 'Pos index');        # 3..7,9,10 left
    is($q->extract(-3), 7, 'Neg index');        # 3..6,9,10 left
    my $x = $q->extract(20);                    # unchanged
    ok(! defined($x), 'Big index');
    $x = $q->extract(-20);                      # unchanged
    ok(! defined($x), 'Big neg index');
})->join();

$q = Thread::Queue->new(1..10);
ok($q, 'New queue');

threads->create(sub {
    my @@x = $q->extract(0, 2);                  # 3..10 left
    is_deeply(\@@x, [1,2], '2 from head');
    @@x = $q->extract(6, 2);                     # 3..8 left
    is_deeply(\@@x, [9,10], '2 from tail');
    @@x = $q->extract(2, 2);                     # 3,4,7,8 left
    is_deeply(\@@x, [5,6], '2 from middle');
    @@x = $q->extract(2, 4);                     # 3,4 left
    is_deeply(\@@x, [7,8], 'Lots from tail');
    @@x = $q->extract(3, 4);                     # unchanged
    is_deeply(\@@x, [], 'Too far');
})->join();

$q = Thread::Queue->new(1..10);
ok($q, 'New queue');

threads->create(sub {
    my @@x = $q->extract(-4, 2);                 # 1..6,9,10 left
    is_deeply(\@@x, [7,8], 'Neg index');
    @@x = $q->extract(-2, 4);                    # 1..6 left
    is_deeply(\@@x, [9,10], 'Lots from tail');
    @@x = $q->extract(-6, 2);                    # 3..6 left
    is_deeply(\@@x, [1,2], 'Max neg index');
    @@x = $q->extract(-10, 3);                   # unchanged
    is_deeply(\@@x, [], 'Too far');
    @@x = $q->extract(-6, 3);                    # 4..6 left
    is_deeply(\@@x, [3], 'Neg overlap');
    @@x = $q->extract(-5, 10);                   # empty
    is_deeply(\@@x, [4..6], 'Neg big overlap');
})->join();

exit(0);

# EOF
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
