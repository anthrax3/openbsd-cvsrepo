head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.14
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.03.24.14.59.00;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.59.00;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!perl -w

BEGIN {
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bOpcode\b/) {
        print "1..0\n";
        exit 0;
    }
}

use Test::More tests => 3;
use Safe;

my $c; my $r;
my $snippet = q{
    my $foo = qr/foo/;
    ref $foo;
};
$c = new Safe;
$r = $c->reval($snippet);
is( $r, "Safe::Root0::Regexp" );
$r or diag $@@;

# once more with the same compartment
# (where DESTROY has been cleaned up)
$r = $c->reval($snippet);
is( $r, "Safe::Root0::Regexp" );
$r or diag $@@;

# try with a new compartment
$c = new Safe;
$r = $c->reval($snippet);
is( $r, "Safe::Root1::Regexp" );
$r or diag $@@;
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@
