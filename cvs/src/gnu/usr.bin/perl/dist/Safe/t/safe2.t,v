head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.10;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.39;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2017.08.14.13.46.08;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w
$|=1;
BEGIN {
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bOpcode\b/ && $Config{'osname'} ne 'VMS') {
        print "1..0\n";
        exit 0;
    }
}

# Tests Todo:
#	'main' as root

use vars qw($bar);

use Opcode 1.00, qw(opdesc opset opset_to_ops opset_to_hex
	opmask_add full_opset empty_opset opcodes opmask define_optag);

use Safe 1.00;

use Test::More;
my $TB = Test::Builder->new();

# Set up a package namespace of things to be visible to the unsafe code
$Root::foo = "visible";
$bar = "invisible";

# Stop perl from moaning about identifies which are apparently only used once
$Root::foo .= "";

my $cpt;
# create and destroy a couple of automatic Safe compartments first
$cpt = new Safe or die;
$cpt = new Safe or die;

$cpt = new Safe "Root";

$cpt->permit(qw(:base_io));

$cpt->reval(q{ system("echo not ok 1"); });
like($@@, qr/^'?system'? trapped by operation mask/);

$cpt->reval(q{
    print $foo eq 'visible'		? "ok 2\n" : "not ok 2\n";
    print $main::foo  eq 'visible'	? "ok 3\n" : "not ok 3\n";
    print defined($bar)			? "not ok 4\n" : "ok 4\n";
    print defined($::bar)		? "not ok 5\n" : "ok 5\n";
    print defined($main::bar)		? "not ok 6\n" : "ok 6\n";
});
$TB->current_test(6);
is($@@, '');

$foo = "ok 8\n";
%bar = (key => "ok 9\n");
@@baz = (); push(@@baz, "o", "10");
$glob = "ok 11\n";
@@glob = qw(not ok 16);

sub sayok { print "ok @@_\n" }

$cpt->share(qw($foo %bar @@baz *glob sayok));
$cpt->share('$"') unless $Config{use5005threads};

{
    $" = 'k ';
    $cpt->reval(q{
    package other;
    sub other_sayok { print "ok @@_\n" }
    package main;
    print $foo ? $foo : "not ok 8\n";
    print $bar{key} ? $bar{key} : "not ok 9\n";
    (@@baz) ? print "@@baz\n" : print "not ok 10\n";
    print $glob;
    other::other_sayok(12);
    $foo =~ s/8/14/;
    $bar{new} = "ok 15\n";
    @@glob = qw(ok 16);
    $" = ' ';
});
}
$TB->current_test(12);
is($@@, '');
is($foo, "ok 14\n");
is($bar{new}, "ok 15\n");
is("@@glob", "ok 16");

$Root::foo = "not ok 17";
@@{$cpt->varglob('bar')} = qw(not ok 18);
${$cpt->varglob('foo')} = "ok 17";
@@Root::bar = "ok";
push(@@Root::bar, "18"); # Two steps to prevent "Identifier used only once..."

is($Root::foo, 'ok 17');
is("@@{$cpt->varglob('bar')}", 'ok 18');

use strict;

my $m1 = $cpt->mask;
$cpt->trap("negate");
my $m2 = $cpt->mask;
my @@masked = opset_to_ops($m1);
is(opset("negate", @@masked), $m2);

is(eval { $cpt->mask("a bad mask") }, undef);
isnt($@@, '');

is($cpt->reval("2 + 2"), 4);

my $test = $TB->current_test() + 1;
$cpt->reval("
    my \$todo = \$] < 5.021007 ? ' # TODO' : '';
    print defined wantarray
	? qq'not ok $test\$todo\n'
	: qq'ok $test\$todo\n'
");
++$test;
my $t_scalar = $cpt->reval("print wantarray ? 'not ok $test\n' : 'ok $test\n'");
++$test;
my @@t_array  = $cpt->reval("print wantarray ? 'ok $test\n' : 'not ok $test\n'; (2,3,4)");
$TB->current_test($test);

is($t_array[2], 4);

is($cpt->reval('@@ary=(6,7,8);@@ary'), 3);

my $t_scalar2 = $cpt->reval('die "foo bar"; 1');
is($t_scalar2, undef);
like($@@, qr/foo bar/);

# --- rdo
  
$! = 0;
my $nosuch = '/non/existent/file.name';
open(NOSUCH, $nosuch);
if ($@@) {
    my $errno = $!;
    die "Eek! Attempting to open $nosuch failed, but \$! is still 0" unless $!;
    $! = 0;
    $cpt->rdo($nosuch);
    is($!, $errno);
} else {
    die "Eek! Didn't expect $nosuch to be there.";
}
close(NOSUCH);

#my $rdo_file = "tmp_rdo.tpl";
#if (open X,">$rdo_file") {
#    print X "999\n";
#    close X;
#    $cpt->permit_only('const', 'leaveeval');
#    $cpt->rdo($rdo_file) == 999 ? "ok $t\n" : "not ok $t\n"; $t++;
#    unlink $rdo_file;
#}
#else {
#    print "# test $t skipped, can't open file: $!\nok $t\n"; $t++;
#}

done_testing();
@


1.1
log
@Initial revision
@
text
@d21 2
a22 2
my $last_test; # initalised at end
print "1..$last_test\n";
d41 1
a41 6
if ($@@ =~ /^'?system'? trapped by operation mask/) {
    print "ok 1\n";
} else {
    print "#$@@" if $@@;
    print "not ok 1\n";
}
d50 2
a51 1
print $@@ ? "not ok 7\n#$@@" : "ok 7\n";
d55 1
a55 1
@@baz = (); push(@@baz, "o", "10"); $" = 'k ';
d64 3
a66 1
$cpt->reval(q{
d78 1
d80 6
a85 3
print $@@ ? "not ok 13\n#$@@" : "ok 13\n";
$" = ' ';
print $foo, $bar{new}, "@@glob\n";
d93 2
a94 2
print "$Root::foo\n";
print "@@{$cpt->varglob('bar')}\n";
a97 3
print 1 ? "ok 19\n" : "not ok 19\n";
print 1 ? "ok 20\n" : "not ok 20\n";

d102 1
a102 1
print $m2 eq opset("negate", @@masked) ? "ok 21\n" : "not ok 21\n";
d104 2
a105 1
print eval { $cpt->mask("a bad mask") } ? "not ok 22\n" : "ok 22\n";
d107 1
a107 1
print $cpt->reval("2 + 2") == 4 ? "ok 23\n" : "not ok 23\n";
d109 16
a124 5
$cpt->mask(empty_opset);
my $t_scalar = $cpt->reval('print wantarray ? "not ok 24\n" : "ok 24\n"');
print $cpt->reval('@@ary=(6,7,8);@@ary') == 3 ? "ok 25\n" : "not ok 25\n";
my @@t_array  = $cpt->reval('print wantarray ? "ok 26\n" : "not ok 26\n"; (2,3,4)');
print $t_array[2] == 4 ? "ok 27\n" : "not ok 27\n";
d127 2
a128 2
print defined $t_scalar2 ? "not ok 28\n" : "ok 28\n";
print $@@ =~ /foo bar/ ? "ok 29\n" : "not ok 29\n";
a131 1
my $t = 30;
d133 1
a133 1
my $nosuch = '/non/existant/file.name';
d136 1
a136 1
    my $errno  = $!;
d140 1
a140 1
    print $! == $errno ? "ok $t\n" : sprintf "not ok $t # \"$!\" is %d (expected %d)\n", $!, $errno; $t++;
a145 3
# test #31 is gone.
print "ok $t\n"; $t++;
  
d151 1
a151 1
#    print  $cpt->rdo($rdo_file) == 999 ? "ok $t\n" : "not ok $t\n"; $t++;
d158 1
a158 3

print "ok $last_test\n";
BEGIN { $last_test = 32 }
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d21 2
a22 2
use Test::More;
my $TB = Test::Builder->new();
d41 6
a46 1
like($@@, qr/^'?system'? trapped by operation mask/);
d55 1
a55 2
$TB->current_test(6);
is($@@, '');
d59 1
a59 1
@@baz = (); push(@@baz, "o", "10");
d68 1
a68 3
{
    $" = 'k ';
    $cpt->reval(q{
a79 1
    $" = ' ';
d81 3
a83 6
}
$TB->current_test(12);
is($@@, '');
is($foo, "ok 14\n");
is($bar{new}, "ok 15\n");
is("@@glob", "ok 16");
d91 2
a92 2
is($Root::foo, 'ok 17');
is("@@{$cpt->varglob('bar')}", 'ok 18');
d96 3
d103 1
a103 1
is(opset("negate", @@masked), $m2);
d105 1
a105 2
is(eval { $cpt->mask("a bad mask") }, undef);
isnt($@@, '');
d107 1
a107 1
is($cpt->reval("2 + 2"), 4);
d109 5
a113 9
my $test = $TB->current_test() + 1;
my $t_scalar = $cpt->reval("print wantarray ? 'not ok $test\n' : 'ok $test\n'");
++$test;
my @@t_array  = $cpt->reval("print wantarray ? 'ok $test\n' : 'not ok $test\n'; (2,3,4)");
$TB->current_test($test);

is($t_array[2], 4);

is($cpt->reval('@@ary=(6,7,8);@@ary'), 3);
d116 2
a117 2
is($t_scalar2, undef);
like($@@, qr/foo bar/);
d121 1
d123 1
a123 1
my $nosuch = '/non/existent/file.name';
d126 1
a126 1
    my $errno = $!;
d130 1
a130 1
    is($!, $errno);
d136 3
d144 1
a144 1
#    $cpt->rdo($rdo_file) == 999 ? "ok $t\n" : "not ok $t\n"; $t++;
d151 3
a153 1
done_testing();
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@a109 7
$cpt->reval("
    my \$todo = \$] < 5.021007 ? ' # TODO' : '';
    print defined wantarray
	? qq'not ok $test\$todo\n'
	: qq'ok $test\$todo\n'
");
++$test;
@


