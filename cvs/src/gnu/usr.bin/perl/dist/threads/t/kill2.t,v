head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.40;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.40;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.05;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

BEGIN {
    require($ENV{PERL_CORE} ? '../../t/test.pl' : './t/test.pl');

    use Config;
    if (! $Config{'useithreads'}) {
        skip_all(q/Perl not compiled with 'useithreads'/);
    }
}

use ExtUtils::testlib;

use threads;

BEGIN {
    if (! eval 'use threads::shared; 1') {
        skip_all('threads::shared not available');
    }

    local $SIG{'HUP'} = sub {};
    my $thr = threads->create(sub {});
    eval { $thr->kill('HUP') };
    $thr->join();
    if ($@@ && $@@ =~ /safe signals/) {
        skip_all('Not using safe signals');
    }

    plan(3);
};

fresh_perl_is(<<'EOI', 'ok', { }, 'No signal handler in thread');
    use threads;
    use Thread::Semaphore;
    my $sema = Thread::Semaphore->new(0);
    my $test = sub {
        my $sema = shift;
        $sema->up();
        while(1) { sleep(1); }
    };
    my $thr = threads->create($test, $sema);
    $sema->down();
    $thr->detach();
    eval {
        $thr->kill('STOP');
    };
    print(($@@ =~ /no signal handler set/) ? 'ok' : 'not ok');
EOI

fresh_perl_is(<<'EOI', 'ok', { }, 'Handler to signal mismatch');
    use threads;
    use Thread::Semaphore;
    my $sema = Thread::Semaphore->new(0);
    my $test = sub {
        my $sema = shift;
        $SIG{'TERM'} = sub { threads->exit() };
        $sema->up();
        while(1) { sleep(1); }
    };
    my $thr = threads->create($test, $sema);
    $sema->down();
    $thr->detach();
    eval {
        $thr->kill('STOP');
    };
    print(($@@ =~ /no signal handler set/) ? 'ok' : 'not ok');
EOI

fresh_perl_is(<<'EOI', 'ok', { }, 'Handler and signal match');
    use threads;
    use Thread::Semaphore;
    my $sema = Thread::Semaphore->new(0);
    my $test = sub {
        my $sema = shift;
        $SIG{'STOP'} = sub { threads->exit() };
        $sema->up();
        while(1) { sleep(1); }
    };
    my $thr = threads->create($test, $sema);
    $sema->down();
    $thr->detach();
    eval {
        $thr->kill('STOP');
    };
    print((! $@@) ? 'ok' : 'not ok');
EOI

exit(0);

# EOF
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d30 1
a30 1
    plan(4);
a85 19
    print((! $@@) ? 'ok' : 'not ok');
EOI

fresh_perl_is(<<'EOI', 'ok', { }, 'Ignore signal after thread finishes');
    use threads;

    my $thr = threads->create(sub {
        $SIG{KILL} = sub {
            threads->exit();
        };
        return 0;
    });

    until ($thr->is_joinable()) {
        threads->yield();
    }

    $thr->kill('SIGKILL');
    $thr->join();
@

