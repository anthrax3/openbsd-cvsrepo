head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.24
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.28
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -Tw

require 5;

use strict;

use Test::More tests => 1;

BEGIN {
    use_ok( 'Locale::Maketext' );
}

my @@out;
push @@out,
    "\n\nPerl v",
    defined($^V) ? sprintf('%vd', $^V) : $],
    " under $^O ",
    (defined(&Win32::BuildNumber) and defined &Win32::BuildNumber())
    ? ('(Win32::BuildNumber ', &Win32::BuildNumber(), ')') : (),
    (defined $MacPerl::Version)
    ? ("(MacPerl version $MacPerl::Version)") : (),
    "\n"
;

# Ugly code to walk the symbol tables:
my %v;
my @@stack = ('');  # start out in %::
my $this;
my $count = 0;
my $pref;
while(@@stack) {
    $this = shift @@stack;
    die 'Too many packages?' if ++$count > 1000;
    next if exists $v{$this};
    next if $this eq 'main'; # %main:: is %::

    no strict 'refs';
    if ( defined ${$this . '::VERSION'} ) {
        $v{$this} = ${$this . '::VERSION'}
    }
    elsif (
        defined *{$this . '::ISA'} or defined &{$this . '::import'}
            or ($this ne '' and grep defined *{$_}{'CODE'}, values %{$this . '::'})
        # If it has an ISA, an import, or any subs...
    ) {
        # It's a class/module with no version.
        $v{$this} = undef;
    }
    else {
        # It's probably an unpopulated package.
        ## $v{$this} = '...';
    }

    $pref = length($this) ? "$this\::" : '';
    push @@stack, map m/^(.+)::$/ ? "$pref$1" : (), keys %{$this . '::'};
}
push @@out, " Modules in memory:\n";
delete @@v{'', '[none]'};
foreach my $p (sort {lc($a) cmp lc($b)} keys %v) {
    my $indent = ' ' x (2 + ($p =~ tr/:/:/));
    push @@out,  '  ', $indent, $p, defined($v{$p}) ? " v$v{$p};\n" : ";\n";
}
push @@out, sprintf "[at %s (local) / %s (GMT)]\n", scalar(gmtime), scalar(localtime);
my $x = join '', @@out;
$x =~ s/^/#/mg;
print $x;

my $ascii = (chr(65) eq 'A') ? 'an ASCII' : 'a non-ASCII';
print "# Running in $ascii world.\n";

print "# \@@INC:\n", map("#   [$_]\n", @@INC), "#\n#\n";

print "# \%INC:\n";
foreach my $x (sort {lc($a) cmp lc($b)} keys %INC) {
    print "#   [$x] = [", $INC{$x} || '', "]\n";
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
