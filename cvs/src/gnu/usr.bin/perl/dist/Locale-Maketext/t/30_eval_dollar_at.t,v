head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.14
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.03;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

{
    package TEST;
    use base 'Locale::Maketext';
}

{
    package TEST::en;
    use base 'TEST';
    our %Lexicon = (
        _AUTO => 1,
    );
}

package main;
use strict;
use warnings;
use Test::More tests => 12;

my $lh = TEST->get_handle('en');
$@@ = "foo";
is($lh->maketext("This works fine"), "This works fine", "straight forward _AUTO string test");
is($@@, "foo", q{$@@ isn't altered during calls to maketext});

my $err = eval {
   $lh->maketext('this is ] an error');
};
is($err, undef, "no return from eval");
like("$@@", qr/Unbalanced\s'\]',\sin/ms, '$@@ shows that ] was unbalanced');  

# _try_use doesn't pollute $@@
$@@ = 'foo2';
is(Locale::Maketext::_try_use("This::module::does::not::exist"), 0, "0 return if module is missing when _try_use is called");
is($@@, 'foo2', '$@@ is unmodified by a failed _try_use');

# _try_use doesn't pollute $@@ for valid call
$@@ = '';
is(Locale::Maketext::_try_use("Locale::Maketext::Guts"), 1, "1 return using valid module Locale::Maketext::Guts");
is($@@, '', '$@@ is clean after failed _try_use');

# failure_handler_auto handles $@@ locally.
{
    $@@ = '';
    my $err = '';
    $lh->{failure_lex}->{"foo_fail"} = sub {die("fail message");};
    $err = eval {$lh->failure_handler_auto("foo_fail")};
    is($err, undef, "die event calling failure_handler on bad code");
    like($@@, qr/^Error in maketexting "foo_fail":/ms, "\$@@ is re-written as expected.");
}

$@@ = 'foo';
is($lh->maketext('Eval error: [_1]', $@@), 'Eval error: foo', "Make sure \$@@ is localized when passed to maketext");
is($@@, 'foo', "\$@@ wasn't modified during call");
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d6 1
a6 1
    use parent qw(Locale::Maketext);
d11 1
a11 1
    use parent -norequire, qw(TEST);
@

