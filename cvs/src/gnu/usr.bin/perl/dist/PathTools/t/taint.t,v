head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.2.0.8
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2016.01.11.17.43.30;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	pycjl4BSJNuooifU;

1.1
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;
commitid	B31cAbBIXiCqnL97;

1.1.1.1
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches
	1.1.1.1.2.1
	1.1.1.1.6.1;
next	1.1.1.2;
commitid	B31cAbBIXiCqnL97;

1.1.1.2
date	2017.08.14.13.46.08;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;

1.1.1.1.2.1
date	2016.01.11.17.48.11;	author afresh1;	state Exp;
branches;
next	;
commitid	KhtKIPZZNUpgk8Qf;

1.1.1.1.6.1
date	2016.01.11.17.45.10;	author afresh1;	state Exp;
branches;
next	;
commitid	SDd4h0mC2K03SoA9;


desc
@@


1.2
log
@Fix perl CVE-2015-8607 - XS File::Spec::canonpath loses taint

https://rt.perl.org/Ticket/Display.html?id=126862
@
text
@#!./perl -Tw
# Testing Cwd under taint mode.

use strict;

use Cwd;
chdir 't' unless $ENV{PERL_CORE};

use File::Spec;
use lib File::Spec->catdir('t', 'lib');
use Test::More;
BEGIN {
    plan(
        ${^TAINT}
        ? (tests => 21)
        : (skip_all => "A perl without taint support")
    );
}

use Scalar::Util qw/tainted/;

my @@Functions = qw(getcwd cwd fastcwd fastgetcwd
                   abs_path fast_abs_path
                   realpath fast_realpath
                  );

foreach my $func (@@Functions) {
    no strict 'refs';
    my $cwd;
    eval { $cwd = &{'Cwd::'.$func} };
    is( $@@, '',		"$func() should not explode under taint mode" );
    ok( tainted($cwd),	"its return value should be tainted" );
}

# Previous versions of Cwd tainted $^O
is !tainted($^O), 1, "\$^O should not be tainted";

{
    # [perl #126862] canonpath() loses taint
    my $tainted = substr($ENV{PATH}, 0, 0);
    # yes, getcwd()'s result should be tainted, and is tested above
    # but be sure
    ok tainted(File::Spec->canonpath($tainted . Cwd::getcwd)),
        "canonpath() keeps taint on non-empty string";
    ok tainted(File::Spec->canonpath($tainted)),
        "canonpath() keeps taint on empty string";

    (Cwd::getcwd() =~ /^(.*)/);
    my $untainted = $1;
    ok !tainted($untainted), "make sure our untainted value is untainted";
    ok !tainted(File::Spec->canonpath($untainted)),
        "canonpath() doesn't add taint to untainted string";
}
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
        ? (tests => 17)
d37 17
@


1.1.1.1
log
@Import perl-5.20.1
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d15 1
a15 1
        ? (tests => 21)
a36 17

{
    # [perl #126862] canonpath() loses taint
    my $tainted = substr($ENV{PATH}, 0, 0);
    # yes, getcwd()'s result should be tainted, and is tested above
    # but be sure
    ok tainted(File::Spec->canonpath($tainted . Cwd::getcwd)),
        "canonpath() keeps taint on non-empty string";
    ok tainted(File::Spec->canonpath($tainted)),
        "canonpath() keeps taint on empty string";

    (Cwd::getcwd() =~ /^(.*)/);
    my $untainted = $1;
    ok !tainted($untainted), "make sure our untainted value is untainted";
    ok !tainted(File::Spec->canonpath($untainted)),
        "canonpath() doesn't add taint to untainted string";
}
@


1.1.1.1.2.1
log
@Fix perl CVE-2015-8607 - XS File::Spec::canonpath loses taint

https://rt.perl.org/Ticket/Display.html?id=126862

Also minor changes from perl 5.20.2
@
text
@d15 1
a15 1
        ? (tests => 21)
a36 17

{
    # [perl #126862] canonpath() loses taint
    my $tainted = substr($ENV{PATH}, 0, 0);
    # yes, getcwd()'s result should be tainted, and is tested above
    # but be sure
    ok tainted(File::Spec->canonpath($tainted . Cwd::getcwd)),
        "canonpath() keeps taint on non-empty string";
    ok tainted(File::Spec->canonpath($tainted)),
        "canonpath() keeps taint on empty string";

    (Cwd::getcwd() =~ /^(.*)/);
    my $untainted = $1;
    ok !tainted($untainted), "make sure our untainted value is untainted";
    ok !tainted(File::Spec->canonpath($untainted)),
        "canonpath() doesn't add taint to untainted string";
}
@


1.1.1.1.6.1
log
@Fix perl CVE-2015-8607 - XS File::Spec::canonpath loses taint

https://rt.perl.org/Ticket/Display.html?id=126862
@
text
@d15 1
a15 1
        ? (tests => 21)
a36 17

{
    # [perl #126862] canonpath() loses taint
    my $tainted = substr($ENV{PATH}, 0, 0);
    # yes, getcwd()'s result should be tainted, and is tested above
    # but be sure
    ok tainted(File::Spec->canonpath($tainted . Cwd::getcwd)),
        "canonpath() keeps taint on non-empty string";
    ok tainted(File::Spec->canonpath($tainted)),
        "canonpath() keeps taint on empty string";

    (Cwd::getcwd() =~ /^(.*)/);
    my $untainted = $1;
    ok !tainted($untainted), "make sure our untainted value is untainted";
    ok !tainted(File::Spec->canonpath($untainted)),
        "canonpath() doesn't add taint to untainted string";
}
@

