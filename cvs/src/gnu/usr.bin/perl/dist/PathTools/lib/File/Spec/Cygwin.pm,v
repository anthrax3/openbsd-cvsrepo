head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.1.2.0.4
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.4
date	2017.02.05.00.32.10;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	cxJ08BvJA9Pt2PTM;

1.3
date	2016.07.25.10.53.03;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	FHUgABTHZQuYQh2B;

1.2
date	2016.01.11.17.43.30;	author afresh1;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	pycjl4BSJNuooifU;

1.1
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;
commitid	B31cAbBIXiCqnL97;

1.1.1.1
date	2014.11.17.20.53.04;	author afresh1;	state Exp;
branches
	1.1.1.1.2.1;
next	1.1.1.2;
commitid	B31cAbBIXiCqnL97;

1.1.1.2
date	2015.04.25.19.10.35;	author afresh1;	state Exp;
branches
	1.1.1.2.4.1;
next	;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.2.4.1
date	2016.01.11.17.45.10;	author afresh1;	state Exp;
branches;
next	1.1.1.2.4.2;
commitid	SDd4h0mC2K03SoA9;

1.1.1.2.4.2
date	2016.08.05.01.00.56;	author afresh1;	state Exp;
branches;
next	;
commitid	wK3bUiy9jNch0Key;

1.1.1.1.2.1
date	2016.01.11.17.48.11;	author afresh1;	state Exp;
branches;
next	;
commitid	KhtKIPZZNUpgk8Qf;

1.2.2.1
date	2016.08.05.01.01.40;	author afresh1;	state Exp;
branches;
next	;
commitid	HjAJx2yjL4A8HWon;


desc
@@


1.4
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package File::Spec::Cygwin;

use strict;
use vars qw(@@ISA $VERSION);
require File::Spec::Unix;

$VERSION = '3.63_01';
$VERSION =~ tr/_//d;

@@ISA = qw(File::Spec::Unix);

=head1 NAME

File::Spec::Cygwin - methods for Cygwin file specs

=head1 SYNOPSIS

 require File::Spec::Cygwin; # Done internally by File::Spec if needed

=head1 DESCRIPTION

See L<File::Spec> and L<File::Spec::Unix>.  This package overrides the
implementation of these methods, not the semantics.

This module is still in beta.  Cygwin-knowledgeable folks are invited
to offer patches and suggestions.

=cut

=pod

=over 4

=item canonpath

Any C<\> (backslashes) are converted to C</> (forward slashes),
and then File::Spec::Unix canonpath() is called on the result.

=cut

sub canonpath {
    my($self,$path) = @@_;
    return unless defined $path;

    $path =~ s|\\|/|g;

    # Handle network path names beginning with double slash
    my $node = '';
    if ( $path =~ s@@^(//[^/]+)(?:/|\z)@@/@@s ) {
        $node = $1;
    }
    return $node . $self->SUPER::canonpath($path);
}

sub catdir {
    my $self = shift;
    return unless @@_;

    # Don't create something that looks like a //network/path
    if ($_[0] and ($_[0] eq '/' or $_[0] eq '\\')) {
        shift;
        return $self->SUPER::catdir('', @@_);
    }

    $self->SUPER::catdir(@@_);
}

=pod

=item file_name_is_absolute

True is returned if the file name begins with C<drive_letter:>,
and if not, File::Spec::Unix file_name_is_absolute() is called.

=cut


sub file_name_is_absolute {
    my ($self,$file) = @@_;
    return 1 if $file =~ m{^([a-z]:)?[\\/]}is; # C:/test
    return $self->SUPER::file_name_is_absolute($file);
}

=item tmpdir (override)

Returns a string representation of the first existing directory
from the following list:

    $ENV{TMPDIR}
    /tmp
    $ENV{'TMP'}
    $ENV{'TEMP'}
    C:/temp

If running under taint mode, and if the environment
variables are tainted, they are not used.

=cut

sub tmpdir {
    my $cached = $_[0]->_cached_tmpdir(qw 'TMPDIR TMP TEMP');
    return $cached if defined $cached;
    $_[0]->_cache_tmpdir(
        $_[0]->_tmpdir(
            $ENV{TMPDIR}, "/tmp", $ENV{'TMP'}, $ENV{'TEMP'}, 'C:/temp'
        ),
        qw 'TMPDIR TMP TEMP'
    );
}

=item case_tolerant

Override Unix. Cygwin case-tolerance depends on managed mount settings and
as with MsWin32 on GetVolumeInformation() $ouFsFlags == FS_CASE_SENSITIVE,
indicating the case significance when comparing file specifications.
Default: 1

=cut

sub case_tolerant {
  return 1 unless $^O eq 'cygwin'
    and defined &Cygwin::mount_flags;

  my $drive = shift;
  if (! $drive) {
      my @@flags = split(/,/, Cygwin::mount_flags('/cygwin'));
      my $prefix = pop(@@flags);
      if (! $prefix || $prefix eq 'cygdrive') {
          $drive = '/cygdrive/c';
      } elsif ($prefix eq '/') {
          $drive = '/c';
      } else {
          $drive = "$prefix/c";
      }
  }
  my $mntopts = Cygwin::mount_flags($drive);
  if ($mntopts and ($mntopts =~ /,managed/)) {
    return 0;
  }
  eval {
      local @@INC = @@INC;
      pop @@INC if $INC[-1] eq '.';
      require Win32API::File;
  } or return 1;
  my $osFsType = "\0"x256;
  my $osVolName = "\0"x256;
  my $ouFsFlags = 0;
  Win32API::File::GetVolumeInformation($drive, $osVolName, 256, [], [], $ouFsFlags, $osFsType, 256 );
  if ($ouFsFlags & Win32API::File::FS_CASE_SENSITIVE()) { return 0; }
  else { return 1; }
}

=back

=head1 COPYRIGHT

Copyright (c) 2004,2007 by the Perl 5 Porters.  All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
@


1.3
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.


ok deraadt@@
@
text
@d7 2
a8 2
$VERSION = '3.48_03';
$VERSION =~ tr/_//;
@


1.2
log
@Fix perl CVE-2015-8607 - XS File::Spec::canonpath loses taint

https://rt.perl.org/Ticket/Display.html?id=126862
@
text
@d7 1
a7 1
$VERSION = '3.48_02';
d140 5
a144 1
  eval { require Win32API::File; } or return 1;
@


1.2.2.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@d7 1
a7 1
$VERSION = '3.48_03';
d140 1
a140 5
  eval {
      local @@INC = @@INC;
      pop @@INC if $INC[-1] eq '.';
      require Win32API::File;
  } or return 1;
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
$VERSION = '3.48';
@


1.1.1.1
log
@Import perl-5.20.1
@
text
@@


1.1.1.1.2.1
log
@Fix perl CVE-2015-8607 - XS File::Spec::canonpath loses taint

https://rt.perl.org/Ticket/Display.html?id=126862

Also minor changes from perl 5.20.2
@
text
@d7 1
a7 1
$VERSION = '3.48_02';
@


1.1.1.2
log
@Import perl-5.20.2
@
text
@d7 1
a7 1
$VERSION = '3.48_01';
@


1.1.1.2.4.1
log
@Fix perl CVE-2015-8607 - XS File::Spec::canonpath loses taint

https://rt.perl.org/Ticket/Display.html?id=126862
@
text
@d7 1
a7 1
$VERSION = '3.48_02';
@


1.1.1.2.4.2
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@d7 1
a7 1
$VERSION = '3.48_03';
d140 1
a140 5
  eval {
      local @@INC = @@INC;
      pop @@INC if $INC[-1] eq '.';
      require Win32API::File;
  } or return 1;
@


