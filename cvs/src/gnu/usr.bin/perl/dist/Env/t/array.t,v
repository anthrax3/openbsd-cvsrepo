head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.16
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.14
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.33;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.33;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

$| = 1;

use strict;
use Test::More;

plan(skip_all => "skipped for VMS") if $^O eq 'VMS';
plan(tests => 11);

use Env  qw(@@FOO);
use vars qw(@@BAR);

sub array_equal
{
    my ($a, $b) = @@_;
    return 0 unless scalar(@@$a) == scalar(@@$b);
    for my $i (0..scalar(@@$a) - 1) {
	return 0 unless $a->[$i] eq $b->[$i];
    }
    return 1;
}

@@FOO = qw(a B c);
@@BAR = qw(a B c);
is_deeply(\@@FOO, \@@BAR, "Assignment");

$FOO[1] = 'b';
$BAR[1] = 'b';
is_deeply(\@@FOO, \@@BAR, "Storing");

$#FOO = 0;
$#BAR = 0;
is_deeply(\@@FOO, \@@BAR, "Truncation");

push @@FOO, 'b', 'c';
push @@BAR, 'b', 'c';
is_deeply(\@@FOO, \@@BAR, "Push");

pop @@FOO;
pop @@BAR;
is_deeply(\@@FOO, \@@BAR, "Pop");

shift @@FOO;
shift @@BAR;
is_deeply(\@@FOO, \@@BAR, "Shift");

push @@FOO, 'c';
push @@BAR, 'c';
is_deeply(\@@FOO, \@@BAR, "Push");

unshift @@FOO, 'a';
unshift @@BAR, 'a';
is_deeply(\@@FOO, \@@BAR, "Unshift");

@@FOO = reverse @@FOO;
@@BAR = reverse @@BAR;
is_deeply(\@@FOO, \@@BAR, "Reverse");

@@FOO = sort @@FOO;
@@BAR = sort @@BAR;
is_deeply(\@@FOO, \@@BAR, "Sort");

splice @@FOO, 1, 1, 'B';
splice @@BAR, 1, 1, 'B';
is_deeply(\@@FOO, \@@BAR, "Splice");
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d9 1
a9 1
plan(tests => 12);
a66 4

my $foo = $ENV{FOO};
() = splice @@FOO, 0, 0;
is $ENV{FOO}, $foo, 'Splice in list context';
@

