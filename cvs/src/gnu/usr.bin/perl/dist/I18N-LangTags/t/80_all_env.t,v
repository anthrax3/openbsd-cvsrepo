head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
require 5;
use Test;
# Time-stamp: "2004-07-01 14:33:50 ADT"
BEGIN { plan tests => 20; }
use I18N::LangTags::Detect 1.01;
print "# Hi there...\n";
ok 1;

print "# Using I18N::LangTags::Detect v$I18N::LangTags::Detect::VERSION\n";

print "# Make sure we can assign to ENV entries\n",
      "# (Otherwise we can't run the subsequent tests)...\n";
$ENV{'MYORP'}   = 'Zing';          ok $ENV{'MYORP'}, 'Zing';
$ENV{'SWUZ'}   = 'KLORTHO HOOBOY'; ok $ENV{'SWUZ'}, 'KLORTHO HOOBOY';

delete $ENV{'MYORP'};
delete $ENV{'SWUZ'};

sub j { "[" . join(' ', map "\"$_\"", @@_) . "]" ;}

sub show {
  print "#  (Seeing {", join(' ',
    map(qq{<$_>}, @@_)), "} at line ", (caller)[2], ")\n";
  printenv();
  return $_[0] || '';
}
sub printenv {
  print "# ENV:\n";
  foreach my $k (sort keys %ENV) {
    my $p = $ENV{$k};  $p =~ s/\n/\n#/g;
    print "#   [$k] = [$p]\n"; }
  print "# [end of ENV]\n#\n";
}

$ENV{'IGNORE_WIN32_LOCALE'} = 1; # a hack, just for testing's sake.


print "# Test LANGUAGE...\n";
$ENV{'REQUEST_METHOD'} = '';
$ENV{'LANGUAGE'}       = 'Eu-MT';
$ENV{'LC_ALL'}         = '';
$ENV{'LC_MESSAGES'}    = '';
$ENV{'LANG'}           = '';
ok show( scalar I18N::LangTags::Detect::detect()),    "eu-mt";
ok show( j      I18N::LangTags::Detect::detect()), q{["eu-mt"]};


print "# Test LC_ALL...\n";
$ENV{'REQUEST_METHOD'} = '';
$ENV{'LANGUAGE'}       = '';
$ENV{'LC_ALL'}         = 'Eu-MT';
$ENV{'LC_MESSAGES'}    = '';
$ENV{'LANG'}           = '';

ok show( scalar I18N::LangTags::Detect::detect()),    "eu-mt";
ok show( j      I18N::LangTags::Detect::detect()), q{["eu-mt"]};

print "# Test LC_MESSAGES...\n";
$ENV{'REQUEST_METHOD'} = '';
$ENV{'LANGUAGE'}       = '';
$ENV{'LC_ALL'}         = '';
$ENV{'LC_MESSAGES'}    = 'Eu-MT';
$ENV{'LANG'}           = '';

ok show( scalar I18N::LangTags::Detect::detect()),    "eu-mt";
ok show( j      I18N::LangTags::Detect::detect()), q{["eu-mt"]};


print "# Test LANG...\n";
$ENV{'REQUEST_METHOD'} = '';
$ENV{'LANGUAGE'}       = '';
$ENV{'LC_ALL'}         = '';
$ENV{'LC_MESSAGES'}    = '';
$ENV{'LANG'}           = 'Eu_MT';

ok show( scalar I18N::LangTags::Detect::detect()),    "eu-mt";
ok show( j      I18N::LangTags::Detect::detect()), q{["eu-mt"]};



print "# Test LANG...\n";
$ENV{'LANGUAGE'} = '';
$ENV{'REQUEST_METHOD'} = '';
$ENV{'LC_ALL'} = '';
$ENV{'LC_MESSAGES'} = '';
$ENV{'LANG'}     = 'Eu_MT';

ok show( scalar I18N::LangTags::Detect::detect()),    "eu-mt";
ok show( j      I18N::LangTags::Detect::detect()), q{["eu-mt"]};




print "# Test HTTP_ACCEPT_LANGUAGE...\n";
$ENV{'REQUEST_METHOD'}       = 'GET';
$ENV{'HTTP_ACCEPT_LANGUAGE'} = 'eu-MT';
ok show( scalar I18N::LangTags::Detect::detect()),    "eu-mt";
ok show( j      I18N::LangTags::Detect::detect()), q{["eu-mt"]};


$ENV{'HTTP_ACCEPT_LANGUAGE'} = 'x-plorp, zaz, eu-MT, i-klung';
ok show( scalar I18N::LangTags::Detect::detect()), "x-plorp";
ok show( j      I18N::LangTags::Detect::detect()), qq{["x-plorp" "i-plorp" "zaz" "eu-mt" "i-klung" "x-klung"]};

$ENV{'HTTP_ACCEPT_LANGUAGE'} = 'x-plorp, zaz, eU-Mt, i-klung';
ok show( scalar I18N::LangTags::Detect::detect()), "x-plorp";
ok show( j      I18N::LangTags::Detect::detect()), qq{["x-plorp" "i-plorp" "zaz" "eu-mt" "i-klung" "x-klung"]};




print "# Byebye!\n";
ok 1;

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 15
a15 10
use strict;
use Test::More tests => 17;
BEGIN {use_ok('I18N::LangTags::Detect', 1.01);}

note("Using I18N::LangTags::Detect v$I18N::LangTags::Detect::VERSION");

note("Make sure we can assign to ENV entries");
note("Otherwise we can't run the subsequent tests");
$ENV{'MYORP'}   = 'Zing';          is($ENV{'MYORP'}, 'Zing');
$ENV{'SWUZ'}   = 'KLORTHO HOOBOY'; is($ENV{'SWUZ'}, 'KLORTHO HOOBOY');
d20 8
a37 9
foreach my $test_var (qw (LANGUAGE LC_ALL LC_MESSAGES LANG)) {
    $ENV{$_} = '' foreach qw(REQUEST_METHOD LANGUAGE LC_ALL LC_MESSAGES LANG);
    $ENV{$test_var} = 'Eu-MT';
    my $what = "I18N::LangTags::Detect::detect() for \$ENV{$test_var} = 'Eu-MT'";
    printenv();
    is(scalar I18N::LangTags::Detect::detect(), "eu-mt",
       "scalar $what");
    is_deeply([I18N::LangTags::Detect::detect()], ["eu-mt"], $what);
}
d39 57
a95 1
note("Test HTTP_ACCEPT_LANGUAGE");
d97 18
a115 13
foreach(['eu-MT', "eu-mt"],
	['x-plorp, zaz, eu-MT, i-klung', 
	 'x-plorp', 'i-plorp', 'zaz', 'eu-mt', 'i-klung', 'x-klung'],
	['x-plorp, zaz, eU-Mt, i-klung',
	 'x-plorp', 'i-plorp', 'zaz', 'eu-mt', 'i-klung', 'x-klung'],
       ) {
    my ($val, @@expect) = @@$_;
    my $what = "I18N::LangTags::Detect::detect() for \$ENV{HTTP_ACCEPT_LANGUAGE} = '$val'";
    $ENV{'HTTP_ACCEPT_LANGUAGE'} = $val;
    printenv();
    is(scalar I18N::LangTags::Detect::detect(), $expect[0], "scalar $what");
    is_deeply([I18N::LangTags::Detect::detect()], \@@expect, $what);
}
@

