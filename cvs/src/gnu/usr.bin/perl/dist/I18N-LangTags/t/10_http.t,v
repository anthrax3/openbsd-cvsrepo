head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.18
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
# Time-stamp: "2004-06-17 23:06:22 PDT"

use I18N::LangTags::Detect;

use Test;
BEGIN { plan tests => 87 };

my @@in = grep m/\S/, split /\n/, q{

[ sv      ]  sv
[ en      ]  en
[ en fi   ]  en, fi
[ en-us   ]  en-us
[ en-us   ]  en-US
[ en-us   ]  EN-US

[ en-au en i-klingon x-klingon en-gb en-us mt-mt mt ja ]  EN-au, JA;q=0.14, i-klingon;q=0.83, en-gb;q=0.71, en-us;q=0.57, mt-mt;q=0.43, mt;q=0.29, en;q=0.86
[ en-au en i-klingon x-klingon en-gb en-us mt-mt mt tli ja ]  EN-au, tli;q=0.201, JA;q=0.14, i-klingon;q=0.83, en-gb;q=0.71, en-us;q=0.57, mt-mt;q=0.43, mt;q=0.29, en;q=0.86
[ en-au en en-gb en-us ja  ]  en-au, ja;q=0.20, en-gb;q=0.60, en-us;q=0.40, en;q=0.80

[ en-au en en-gb en-us mt-mt mt ja ]  EN-au, JA;q=0.14, en-gb;q=0.71, en-us;q=0.57, mt-mt;q=0.43, mt;q=0.29, en;q=0.86
[ en-au en en-gb en-us ja  ]  en-au, ja;q=0.20, en-gb;q=0.60, en-us;q=0.40, en;q=0.80
[ en fr           ]  en;q=1,fr;q=.5
[ en fr           ]  en;q=1,fr;q=.99
[ en ru ko        ]  en, ru;q=0.7, ko;q=0.3
[ en ru ko        ]  en, ru;q=0.7, KO;q=0.3
[ en-us en        ]  en-us, en;q=0.50
[ en fr           ]  fr ; q = 0.9, en
[ en fr           ]  en,fr;q=.90
[ ru en-uk en fr  ]  ru, en-UK;q=0.5, en;q=0.3, fr;q=0.1
[ en-us fr es-mx  ]  en-us,fr;q=0.7,es-mx;q=0.3 
[ en-us en        ]  en-us, en;q=0.50 

[ da en-gb en       ]  da, en-gb;q=0.8, en;q=0.7
[ da en-gb en       ]  da, en;q=0.7, en-gb;q=0.8
[ da en-gb en       ]  da, en-gb;q=0.8, en;q=0.7
[ da en-gb en       ]  da,en;q=0.7,en-gb;q=0.8
[ da en-gb en       ]  da, en-gb ; q=0.8, en ; q=0.7
[ da en-gb en       ]  da , en-gb ; q = 0.8 , en ; q  =0.7
[ da en-gb en       ]  da (yup, Danish) , en-gb ; q = 0.8 , en ; q  =0.7

[ no dk en-uk en-us ]  en-UK;q=0.7, en-US;q=0.6, no;q=1.0, dk;q=0.8
[ no dk en-uk en-us ]  en-US;q=0.6, en-UK;q=0.7, no;q=1.0, dk;q=0.8
[ no dk en-uk en-us ]  en-UK;q=0.7, no;q=1.0, en-US;q=0.6, dk;q=0.8
[ no dk en-uk en-us ]  en-UK;q=0.7, no;q=1.0, dk;q=0.8, en-US;q=0.6

[ fi en ]  fi;q=1, en;q=0.2
[ de-de de en en-us en-gb ]  de-DE, de;q=0.80, en;q=0.60, en-US;q=0.40, en-GB;q=0.20
[ ru          ]  ru; q=1, *; q=0.1
[ ru en       ]  ru, en; q=0.1
[ ja en       ]  ja,en;q=0.5
[ en          ]  en; q=1.0
[ ja          ]  ja; q=1.0
[ ja          ]  ja; q=1.0
[ en ja       ]  en; q=0.5, ja; q=0.5
[ fr-ca fr en ]  fr-ca, fr;q=0.8, en;q=0.7
[ NIX ] NIX
};

foreach my $in (@@in) {
  $in =~ s/^\s*\[([^\]]+)\]\s*//s or die "Bad input: $in";
  my @@should = do { my $x = $1; $x =~ m/(\S+)/g };

  if($in eq 'NIX') { $in = ''; @@should = (); }

  local $ENV{'HTTP_ACCEPT_LANGUAGE'};
  
  foreach my $modus (
    sub {
      print "# Testing with arg...\n";
      $ENV{'HTTP_ACCEPT_LANGUAGE'} = 'PLORK';
      return $_[0];
    },
    sub {
      print "# Testing wath HTTP_ACCEPT_LANGUAGE...\n";
      $ENV{'HTTP_ACCEPT_LANGUAGE'} = $_[0];
     return();
    },
  ) {
    my @@args = &$modus($in);

    # ////////////////////////////////////////////////////
    my @@out = I18N::LangTags::Detect->http_accept_langs(@@args);
    # \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

    if(
     @@out == @@should
       and lc( join "\e", @@out ) eq lc( join "\e", @@should )
    ) {
      print "# Happily got [@@out] from [$in]\n";
      ok 1;
    } else {
      ok 0;
      print "#Got:         [@@out]\n",
            "# but wanted: [@@should]\n",
            "# < \"$in\"\n#\n";
    }
  }
}

print "#\n#\n# Bye-bye!\n";
ok 1;

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 2
a2 1
use strict;
d6 2
a7 1
use Test::More;
a60 1
plan(tests => 2 * @@in);
d69 2
a70 2
  foreach (
	   ['arg', sub {
d74 2
a75 2
  }],
	   ['HTTP_ACCEPT_LANGUAGE', sub {
d79 2
a80 3
  }],
	  ) {
    my ($type, $modus) = @@$_;
d87 12
a98 1
    is_deeply(\@@out, \@@should, "Testing [$in] with $type");
d101 4
@

