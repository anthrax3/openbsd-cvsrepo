head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.14
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 15;

use Carp;

{
    my $sub = eval <<'EVAL';
package Die;
sub {
#line 1 foo
    die "blah";
}
EVAL
    ok(!$@@);
    eval { $sub->() };
    like($@@, qr/^blah at foo line 1/);
    {
        no strict 'refs';
        delete ${'::'}{'Die::'};
    }
    eval { $sub->() };
    like($@@, qr/^blah at foo line 1/);
}

{
    my $sub = eval <<'EVAL';
package Confess;
sub {
#line 1 foo
    Carp::confess("blah");
}
EVAL
    ok(!$@@);
    eval { $sub->() };
    like($@@, qr/^blah at foo line 1/);
    {
        no strict 'refs';
        delete ${'::'}{'Confess::'};
    }
    eval { $sub->() };
    like($@@, qr/^blah at foo line 1/);
}

{
    my $sub = eval <<'EVAL';
package CroakHelper;
sub x {
    Carp::croak("blah");
}
package Croak;
sub {
#line 1 foo
    CroakHelper::x();
}
EVAL
    ok(!$@@);
    eval { $sub->() };
    like($@@, qr/^blah at foo line 1/);
    {
        no strict 'refs';
        delete ${'::'}{'Croak::'};
    }
    eval { $sub->() };
    like($@@, qr/^blah at foo line 1/);
    {
        no strict 'refs';
        delete ${'::'}{'CroakHelper::'};
    }
    eval { $sub->() };
    like($@@, qr/^blah at foo line 1/);
}

{
    # the amount of information available and how it is displayed varies quite
    # a bit depending on the version of perl (specifically, what caller returns
    # in that version), so there is a bit of fiddling around required to handle
    # that
    my $unknown_pat = qr/__ANON__::/;
    $unknown_pat = qr/$unknown_pat|\(unknown\)/
        if $] < 5.014;

    my $sub = eval <<'EVAL';
package SubHelper;
sub x {
    Carp::confess("blah");
}
package Sub;
sub {
#line 1 foo
    SubHelper::x();
}
EVAL
    ok(!$@@);
    eval { $sub->() };
    unlike($@@, qr/$unknown_pat/);
    {
        no strict 'refs';
        delete ${'::'}{'Sub::'};
    }
    eval { $sub->() };
    like($@@, qr/$unknown_pat|Sub::/);
    unlike($@@, qr/$unknown_pat.*$unknown_pat/s);
    {
        no strict 'refs';
        delete ${'::'}{'SubHelper::'};
    }
    eval { $sub->() };
    like($@@, qr/(?:$unknown_pat|SubHelper::).*(?:$unknown_pat|Sub::)/s);
}
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@
