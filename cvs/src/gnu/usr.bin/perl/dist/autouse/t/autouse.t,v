head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.10;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.08.32;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.32;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.02;	author afresh1;	state Exp;
branches;
next	1.1.1.3;
commitid	B31cAbBIXiCqnL97;

1.1.1.3
date	2017.08.14.13.46.06;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    require Config;
    if ($Config::Config{'extensions'} !~ m!\bList/Util\b!){
	print "1..0 # Skip -- Perl configured without List::Util module\n";
	exit 0;
    }
}

my ($ok1, $ok2);
BEGIN {
    require autouse;
    eval {
        "autouse"->import('Scalar::Util' => 'Scalar::Util::set_prototype(&$)');
    };
    $ok1 = !$@@;

    eval {
        "autouse"->import('Scalar::Util' => 'Foo::min');
    };
    $ok2 = $@@;

    "autouse"->import('Scalar::Util' => qw(isdual set_prototype(&$)));
}

use Test::More tests => 15;

ok( $ok1, "Function from package with custom 'import()' correctly imported" );
like( $ok2, qr/^autouse into different package attempted/, "Catch autouse into different package" );

ok( isdual($!),
    "Function imported via 'autouse' performs as expected");


# set_prototype() has a prototype of &$.  Make sure that's preserved.
sub sum { return $_[0] + $_[1] };
is( (set_prototype \&sum, '$$'), \&sum,
    "Subroutine prototype preserved after import via 'autouse'");


# Example from the docs.
use autouse 'Carp' => qw(carp croak);

{
    my @@warning;
    local $SIG{__WARN__} = sub { push @@warning, @@_ };
    carp "this carp was predeclared and autoused\n";
    is( scalar @@warning, 1, "Expected number of warnings received" );
    like( $warning[0], qr/^this carp was predeclared and autoused\n/,
        "Warning received as expected" );

    eval { croak "It is but a scratch!" };
    like( $@@, qr/^It is but a scratch!/,
        "Failure message received as expected" );
}


# Test that autouse's lazy module loading works.
use autouse 'Errno' => qw(EPERM);

my $mod_file = 'Errno.pm';   # just fine and portable for %INC
ok( !exists $INC{$mod_file}, "Module not yet loaded" );
ok( EPERM, "Access a constant from that module" ); # test if non-zero
ok( exists $INC{$mod_file}, "Module has been lazily loaded" );

use autouse Env => "something";
eval { something() };
like( $@@, qr/^\Qautoused module Env has unique import() method/,
    "Module with unique import() method detected and error reported" );

# Check that UNIVERSAL.pm doesn't interfere with modules that don't use
# Exporter and have no import() of their own.
require UNIVERSAL;
require File::Spec;
unshift @@INC, File::Spec->catdir('t', 'lib'), 'lib';
autouse->import("MyTestModule" => 'test_function');
my $ret = test_function();
is( $ret, 'works', "No interference from UNIVERSAL.pm" );

# Test that autouse is exempt from all methods of triggering the subroutine
# redefinition warning.
SKIP: {
    skip "Fails in 5.15.5 and below (perl bug)", 2 if $] < 5.0150051;
    use warnings; local $^W = 1; no warnings 'once';
    my $w;
    local $SIG{__WARN__} = sub { $w .= shift };
    use autouse MyTestModule2 => 'test_function2';
    *MyTestModule2::test_function2 = \&test_function2;
    require MyTestModule2;
    is $w, undef,
       'no redefinition warning when clobbering autouse stub with new sub';
    undef $w;
    import MyTestModule2 'test_function2';
    is $w, undef,
       'no redefinition warning when clobbering autouse stub via *a=\&b';
}
SKIP: {
    skip "Fails in 5.15.5 and below (perl bug)", 1 if $] < 5.0150051;
    use Config;
    skip "no B", 1 unless $Config{extensions} =~ /\bB\b/;
    use warnings; local $^W = 1; no warnings 'once';
    my $w;
    local $SIG{__WARN__} = sub { $w .= shift };
    use autouse B => "sv_undef";
    *B::sv_undef = \&sv_undef;
    require B;
    is $w, undef,
      'no redefinition warning when clobbering autouse stub with new XSUB';
}
@


1.1
log
@Initial revision
@
text
@d11 1
a11 2
use Test::More tests => 15;

d15 1
a15 1
        "autouse"->import('List::Util' => 'List::Util::first(&@@)');
d17 1
a17 1
    ok( !$@@ );
d20 1
a20 1
        "autouse"->import('List::Util' => 'Foo::min');
d22 1
a22 1
    ok( $@@, qr/^autouse into different package attempted/ );
d24 1
a24 1
    "autouse"->import('List::Util' => qw(max first(&@@)));
d27 7
a33 2
my @@a = (1,2,3,4,5.5);
is( max(@@a), 5.5);
d36 4
a39 2
# first() has a prototype of &@@.  Make sure that's preserved.
is( (first { $_ > 3 } @@a), 4);
d49 3
a51 2
    is( scalar @@warning, 1 );
    like( $warning[0], qr/^this carp was predeclared and autoused\n/ );
d54 2
a55 1
    like( $@@, qr/^It is but a scratch!/);
d63 3
a65 3
ok( !exists $INC{$mod_file} );
ok( EPERM ); # test if non-zero
ok( exists $INC{$mod_file} );
d69 2
a70 1
like( $@@, qr/^\Qautoused module Env has unique import() method/ );
d79 1
a79 1
is( $ret, 'works' );
d99 1
a99 2
    skip "Fails from 5.10 to 5.15.5 (perl bug)", 1
	if $] < 5.0150051 and $] > 5.0099;
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d16 1
a16 1
        "autouse"->import('Scalar::Util' => 'Scalar::Util::set_prototype(&$)');
d18 1
a18 1
    ok( !$@@, "Function from package with custom 'import()' correctly imported" );
d21 1
a21 1
        "autouse"->import('Scalar::Util' => 'Foo::min');
d25 1
a25 1
    "autouse"->import('Scalar::Util' => qw(isdual set_prototype(&$)));
d28 2
a29 2
ok( isdual($!),
    "Function imported via 'autouse' performs as expected");
d32 2
a33 4
# set_prototype() has a prototype of &$.  Make sure that's preserved.
sub sum { return $_[0] + $_[1] };
is( (set_prototype \&sum, '$$'), \&sum,
    "Subroutine prototype preserved after import via 'autouse'");
d43 2
a44 3
    is( scalar @@warning, 1, "Expected number of warnings received" );
    like( $warning[0], qr/^this carp was predeclared and autoused\n/,
        "Warning received as expected" );
d47 1
a47 2
    like( $@@, qr/^It is but a scratch!/,
        "Failure message received as expected" );
d55 3
a57 3
ok( !exists $INC{$mod_file}, "Module not yet loaded" );
ok( EPERM, "Access a constant from that module" ); # test if non-zero
ok( exists $INC{$mod_file}, "Module has been lazily loaded" );
d61 1
a61 2
like( $@@, qr/^\Qautoused module Env has unique import() method/,
    "Module with unique import() method detected and error reported" );
d70 1
a70 1
is( $ret, 'works', "No interference from UNIVERSAL.pm" );
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@d11 2
a12 1
my ($ok1, $ok2);
d18 1
a18 1
    $ok1 = !$@@;
d23 1
a23 1
    $ok2 = $@@;
a27 5
use Test::More tests => 15;

ok( $ok1, "Function from package with custom 'import()' correctly imported" );
like( $ok2, qr/^autouse into different package attempted/, "Catch autouse into different package" );

d95 2
a96 1
    skip "Fails in 5.15.5 and below (perl bug)", 1 if $] < 5.0150051;
@


