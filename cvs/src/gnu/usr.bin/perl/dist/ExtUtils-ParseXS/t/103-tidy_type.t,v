head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.14
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.03;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl
use strict;
use warnings;
use Test::More tests =>  3;
use lib qw( lib );
use ExtUtils::ParseXS::Utilities qw(
  tidy_type
);

my $input;

$input = ' *  ** ';
is( tidy_type($input), '***',
    "Got expected value for '$input'" );

$input = ' *     ** ';
is( tidy_type($input), '***',
    "Got expected value for '$input'" );

$input = ' *     ** foobar  *  ';
is( tidy_type($input), '*** foobar *',
    "Got expected value for '$input'" );

@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d4 7
a10 2
use Test::More;
use ExtUtils::Typemaps;
d12 3
a14 10
my @@tests = (
  [' *  ** ', '***'],
  [' *     ** ', '***'],
  [' *     ** foobar  *   ', '*** foobar *'],
  ['unsigned int', 'unsigned int'],
  ['std::vector<int>', 'std::vector<int>'],
  ['std::vector< unsigned int >', 'std::vector<unsigned int>'],
  ['std::vector< vector<unsigned int> >', 'std::vector<vector<unsigned int> >'],
  ['std::map< map <unsigned int, int>, int>', 'std::map<map<unsigned int, int>, int>'],
);
d16 3
a18 1
plan tests => scalar(@@tests);
d20 3
a22 3
foreach my $test (@@tests) {
  is(ExtUtils::Typemaps::tidy_type($test->[0]), $test->[1], "Tidying '$test->[0]'");
}
@

