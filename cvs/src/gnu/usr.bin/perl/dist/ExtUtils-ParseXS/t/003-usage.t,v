head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.8
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.03;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl

use strict;
use Test::More;
use Config;
use DynaLoader;
use ExtUtils::CBuilder;

if ( $] < 5.008 ) {
  plan skip_all => "INTERFACE keyword support broken before 5.8";
}
else {
  plan tests => 24;
}

my ($source_file, $obj_file, $lib_file, $module);

require_ok( 'ExtUtils::ParseXS' );
ExtUtils::ParseXS->import('process_file');

chdir 't' or die "Can't chdir to t/, $!";

use Carp; $SIG{__WARN__} = \&Carp::cluck;

#########################

$source_file = 'XSUsage.c';

# Try sending to file
process_file(filename => 'XSUsage.xs', output => $source_file);
ok -e $source_file, "Create an output file";

# TEST doesn't like extraneous output
my $quiet = $ENV{PERL_CORE} && !$ENV{HARNESS_ACTIVE};

# Try to compile the file!  Don't get too fancy, though.
my $b = ExtUtils::CBuilder->new(quiet => $quiet);

SKIP: {
  skip "no compiler available", 2
    if ! $b->have_compiler;
  $module = 'XSUsage';

  $obj_file = $b->compile( source => $source_file );
  ok $obj_file;
  ok -e $obj_file, "Make sure $obj_file exists";
}
SKIP: {
  skip "no dynamic loading", 20 
    if !$b->have_compiler || !$Config{usedl};

  $lib_file = $b->link( objects => $obj_file, module_name => $module );
  ok $lib_file;
  ok -e $lib_file, "Make sure $lib_file exists";

  eval {require XSUsage};
  is $@@, '';

  # The real tests here - for each way of calling the functions, call with the
  # wrong number of arguments and check the Usage line is what we expect

  eval { XSUsage::one(1) };
  ok $@@;
  ok $@@ =~ /^Usage: XSUsage::one/;

  eval { XSUsage::two(1) };
  ok $@@;
  ok $@@ =~ /^Usage: XSUsage::two/;

  eval { XSUsage::two_x(1) };
  ok $@@;
  ok $@@ =~ /^Usage: XSUsage::two_x/;

  eval { FOO::two(1) };
  ok $@@;
  ok $@@ =~ /^Usage: FOO::two/;

  eval { XSUsage::three(1) };
  ok $@@;
  ok $@@ =~ /^Usage: XSUsage::three/;

  eval { XSUsage::four(1) };
  ok !$@@;

  eval { XSUsage::five() };
  ok $@@;
  ok $@@ =~ /^Usage: XSUsage::five/;

  eval { XSUsage::six() };
  ok !$@@;

  eval { XSUsage::six(1) };
  ok !$@@;

  eval { XSUsage::six(1,2) };
  ok $@@;
  ok $@@ =~ /^Usage: XSUsage::six/;

  # Win32 needs to close the DLL before it can unlink it, but unfortunately
  # dl_unload_file was missing on Win32 prior to perl change #24679!
  if ($^O eq 'MSWin32' and defined &DynaLoader::dl_unload_file) {
    for (my $i = 0; $i < @@DynaLoader::dl_modules; $i++) {
      if ($DynaLoader::dl_modules[$i] eq $module) {
        DynaLoader::dl_unload_file($DynaLoader::dl_librefs[$i]);
        last;
      }
    }
  }
}

unless ($ENV{PERL_NO_CLEANUP}) {
  for ( $obj_file, $lib_file, $source_file) {
    next unless defined $_;
    1 while unlink $_;
  }
}

@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d19 1
d21 1
a21 1
chdir('t') if -d 't';
a24 4
# See the comments about this in 001-basics.t
@@INC = map { File::Spec->rel2abs($_) } @@INC
    if $^O =~ /android/;

d30 1
a30 1
ExtUtils::ParseXS->process_file(filename => 'XSUsage.xs', output => $source_file);
@

