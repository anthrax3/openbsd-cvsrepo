head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.36;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@package PrimitiveCapture;
use strict;
use warnings;

if ("$]" >= 5.008000) {
  eval "#line @@{[__LINE__+1]} ".q{"lib/PrimitiveCapture.pm"
    sub capture_stdout {
      my $sub = shift;
      my $stdout;
      open my $oldout, ">&STDOUT" or die "Can't dup STDOUT: $!";
      close STDOUT;
      open STDOUT, '>', \$stdout or die "Can't open STDOUT: $!";
      $sub->();
      close STDOUT;
      open STDOUT, ">&", $oldout or die "Can't dup \$oldout: $!";
      return $stdout;
    }
    sub capture_stderr {
      my $sub = shift;
      my $stderr;
      open my $olderr, ">&STDERR" or die "Can't dup STDERR: $!";
      close STDERR;
      open STDERR, '>', \$stderr or die "Can't open STDERR: $!";
      $sub->();
      close STDERR;
      open STDERR, ">&", $olderr or die "Can't dup \$olderr: $!";
      return $stderr;
    }
  }; die $@@ unless $@@ eq "";
} else {
  eval "#line @@{[__LINE__+1]} ".q{"lib/PrimitiveCapture.pm"
    use File::Spec;
    use File::Temp;
    my $tmpdir;
    my $i = 0;
    sub _tmpfile {
      $tmpdir ||= File::Temp::tempdir(CLEANUP => 1, TMPDIR => 1);
      return File::Spec->catfile($tmpdir, $i++);
    }
    sub _slurp {
      my $filename = shift;
      open my $fh, "<", $filename or die "Can't read $filename: $!";
      local $/ = undef;
      my $content = <$fh>;
      defined $content or die "Can't read $filename: $!";
      return $content;
    }
    sub capture_stdout {
      my $sub = shift;
      my $tmpfile = _tmpfile();
      local *OLDSTDOUT;
      open OLDSTDOUT, ">&STDOUT" or die "Can't dup STDOUT: $!";
      close STDOUT;
      open STDOUT, '>', $tmpfile or die "Can't open STDOUT: $!";
      $sub->();
      close STDOUT;
      open STDOUT, ">&OLDSTDOUT" or die "Can't dup OLDSTDOUT: $!";
      close OLDSTDOUT;
      return _slurp($tmpfile);
    }
    sub capture_stderr {
      my $sub = shift;
      my $tmpfile = _tmpfile();
      local *OLDSTDERR;
      open OLDSTDERR, ">&STDERR" or die "Can't dup STDERR: $!";
      close STDERR;
      open STDERR, '>', $tmpfile or die "Can't open STDERR: $!";
      $sub->();
      close STDERR;
      open STDERR, ">&OLDSTDERR" or die "Can't dup OLDSTDERR: $!";
      close OLDSTDERR;
      return _slurp($tmpfile);
    }
  }; die $@@ unless $@@ eq "";
}

1;
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
