head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.40;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.40;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!perl

use Test::More;

eval "use AnyEvent; 1" or
    plan skip_all => "AnyEvent is not installed.";

# seeing as the entire point of this test is to test the event handler,
# we need to mock as little as possible.  To keep things tightly controlled,
# we'll use the Stub directly.
BEGIN {
    $ENV{PERL_RL} = 'Stub o=0';
}
plan tests => 3;

# need to delay this so that AE is loaded first.
require Term::ReadLine;
use File::Spec;

my $t = Term::ReadLine->new('AE');
ok($t, "Created object");
is($t->ReadLine, 'Term::ReadLine::Stub', 'Correct type');

my ($cv, $fe);
$t->event_loop(
               sub {
                   $cv = AE::cv();
                   $cv->recv();
               }, sub {
                   my $fh = shift;
                   $fe ||= AE::io($fh, 0, sub { $cv->send() });
               }
              );

my $text = 'some text';
my $T = $text . "\n";
my $w = AE::timer(0,1,sub { 
pass("Event loop called");
exit 0;
});

my $result = $t->readline('Do not press enter>');
fail("Should not get here.");
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
