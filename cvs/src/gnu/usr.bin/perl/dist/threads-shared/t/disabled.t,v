head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.18
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.47;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.47;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.41;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

use Test;
plan tests => 31;

use threads::shared;

### Start of Testing ###

# Make sure threads are really off
ok( !$INC{"threads.pm"} );

# Check each faked function.
foreach my $func (qw(share cond_wait cond_signal cond_broadcast)) {
    ok( my $func_ref = __PACKAGE__->can($func) ? 1 : 0 );

    eval qq{$func()};
    ok( $@@, qr/^Not enough arguments / );

    my %hash = (foo => 42, bar => 23);
    eval qq{$func(\%hash)};
    ok( $@@, '' );
    ok( $hash{foo}, 42 );
    ok( $hash{bar}, 23 );
}

# These all have no return value.
foreach my $func (qw(cond_wait cond_signal cond_broadcast)) {
    my @@array = qw(1 2 3 4);
    ok( eval qq{$func(\@@array)}, undef );
    ok( "@@array", "1 2 3 4" );
}

# share() is supposed to return back it's argument as a ref.
{
    my @@array = qw(1 2 3 4);
    ok( share(@@array), \@@array );
    ok( ref &share({}), 'HASH' );
    ok( "@@array", "1 2 3 4" );
}

# lock() should be a no-op.  The return value is currently undefined.
{
    my @@array = qw(1 2 3 4);
    lock(@@array);
    ok( "@@array", "1 2 3 4" );
}

exit(0);

# EOF
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d4 2
a5 1
use Test::More tests => 27;
d11 2
a12 1
ok( !$INC{"threads.pm"}, 'make sure threads are really off' );
d16 1
a16 1
    isnt( __PACKAGE__->can($func), 0, "Have $func" );
d19 1
a19 1
    like( $@@, qr/^Not enough arguments /, 'Expected error with no arguments');
d23 3
a25 2
    is( $@@, '', 'no error' );
    is_deeply( \%hash, {foo => 42, bar => 23}, 'argument is unchanged' );
d31 2
a32 2
    is( eval qq{$func(\@@array)}, undef, "$func has no return value" );
    is_deeply( \@@array, [1, 2, 3, 4], 'argument is unchanged' );
d35 1
d38 3
a40 4
    is_deeply( share(@@array), \@@array,
	'share() is supposed to return back its argument as a ref' );
    is( ref &share({}), 'HASH' );
    is_deeply( \@@array, [1, 2, 3, 4], 'argument is unchanged' );
d47 1
a47 1
    is_deeply( \@@array, [1, 2, 3, 4], 'lock() should be a no-op' );
@

