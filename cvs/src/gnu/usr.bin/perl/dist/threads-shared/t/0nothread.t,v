head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.28
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.47;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.47;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

use Test::More (tests => 53);

### Start of Testing ###

my @@array;
my %hash;

sub hash
{
    my @@val = @@_;
    is(keys %hash, 0, "hash empty");
    $hash{0} = $val[0];
    is(keys %hash,1, "Assign grows hash");
    is($hash{0},$val[0],"Value correct");
    $hash{2} = $val[2];
    is(keys %hash,2, "Assign grows hash");
    is($hash{0},$val[0],"Value correct");
    is($hash{2},$val[2],"Value correct");
    $hash{1} = $val[1];
    is(keys %hash,3,"Size correct");
    my @@keys = keys %hash;
    is(join(',',sort @@keys),'0,1,2',"Keys correct");
    my @@hval = @@hash{0,1,2};
    is(join(',',@@hval),join(',',@@val),"Values correct");
    my $val = delete $hash{1};
    is($val,$val[1],"Delete value correct");
    is(keys %hash,2,"Size correct");
    while (my ($k,$v) = each %hash) {
        is($v,$val[$k],"each works");
    }
    %hash = ();
    is(keys %hash,0,"Clear hash");
}

sub array
{
    my @@val = @@_;
    is(@@array, 0, "array empty");
    $array[0] = $val[0];
    is(@@array,1, "Assign grows array");
    is($array[0],$val[0],"Value correct");
    unshift(@@array,$val[2]);
    is($array[0],$val[2],"Unshift worked");
    is($array[-1],$val[0],"-ve index");
    push(@@array,$val[1]);
    is($array[-1],$val[1],"Push worked");
    is(@@array,3,"Size correct");
    is(shift(@@array),$val[2],"Shift worked");
    is(@@array,2,"Size correct");
    is(pop(@@array),$val[1],"Pop worked");
    is(@@array,1,"Size correct");
    @@array = ();
    is(@@array,0,"Clear array");
}

ok((require threads::shared),"Require module");

if ($threads::shared::VERSION && ! $ENV{'PERL_CORE'}) {
    diag('Testing threads::shared ' . $threads::shared::VERSION);
}

array(24, [], 'Thing');
hash(24, [], 'Thing');

threads::shared->import();

share(\@@array);
array(24, 42, 'Thing');

share(\%hash);
hash(24, 42, 'Thing');

exit(0);

# EOF
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
