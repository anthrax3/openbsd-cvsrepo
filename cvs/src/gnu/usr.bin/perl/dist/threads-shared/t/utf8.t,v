head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.28
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.47;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.47;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

BEGIN {
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # SKIP Perl not compiled with 'useithreads'\n");
        exit(0);
    }
}

use ExtUtils::testlib;

my $TEST = 1;

sub is {
    my ($got, $exp, $name) = @@_;

    my $ok = ($got eq $exp);

    # You have to do it this way or VMS will get confused.
    if ($ok) {
        print("ok $TEST - $name\n");
    } else {
        print("not ok $TEST - $name\n");
        printf("# Failed test at line %d\n", (caller)[2]);
        print("#   Got:      $got\n");
        print("#   Expected: $exp\n");
    }

    $TEST++;

    return ($ok);
}

BEGIN {
    $| = 1;
    print("1..12\n");   ### Number of tests that will be run ###
};

use threads;
use threads::shared;

### Start of Testing ###

binmode STDOUT, ":utf8";

my $plain = 'foo';
my $utf8 = "\x{123}\x{84}\x{20F}\x{2C1}";
my $code = \&is;

my %a :shared;
$a{$plain} = $plain;
$a{$utf8} = $utf8;
$a{$code} = 'code';

is(exists($a{$plain}), 1, 'Found plain key in shared hash');
is(exists($a{$utf8}), 1, 'Found UTF-8 key in shared hash');
is(exists($a{$code}), 1, 'Found code ref key in shared hash');

while (my ($key, $value) = each (%a)) {
    if ($key eq $plain) {
        is($key, $plain, 'Plain key in shared hash');
    } elsif ($key eq $utf8) {
        is($key, $utf8, 'UTF-8 key in shared hash');
    } elsif ($key eq "$code") {
        is($key, "$code", 'Code ref key in shared hash');
    } else {
        is($key, "???", 'Bad key');
    }
}

my $a = &share({});
$$a{$plain} = $plain;
$$a{$utf8} = $utf8;
$$a{$code} = 'code';

is(exists($$a{$plain}), 1, 'Found plain key in shared hash ref');
is(exists($$a{$utf8}), 1, 'Found UTF-8 key in shared hash ref');
is(exists($$a{$code}), 1, 'Found code ref key in shared hash ref');

while (my ($key, $value) = each (%$a)) {
    if ($key eq $plain) {
        is($key, $plain, 'Plain key in shared hash ref');
    } elsif ($key eq $utf8) {
        is($key, $utf8, 'UTF-8 key in shared hash ref');
    } elsif ($key eq "$code") {
        is($key, "$code", 'Code ref key in shared hash ref');
    } else {
        is($key, "???", 'Bad key');
    }
}

exit(0);

# EOF
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
