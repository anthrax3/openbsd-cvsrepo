head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.48.25;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.25;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.06.41;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# This is a replacement for the old BEGIN preamble which heads (or
# should head) up every core test program to prepare it for running.
# Now instead of:
#
# BEGIN {
#   chdir 't' if -d 't';
#   @@INC = '../lib';
# }
#
# Its primary purpose is to clear @@INC so core tests don't pick up
# modules from an installed Perl.
#
# t/TEST will use -MTestInit.  You may "use TestInit" in the test
# programs but it is not required.
#
# P.S. This documentation is not in POD format in order to avoid
# problems when there are fundamental bugs in perl.

package TestInit;

$VERSION = 1.04;

# Let tests know they're running in the perl core.  Useful for modules
# which live dual lives on CPAN.
# Don't interfere with the taintedness of %ENV, this could perturbate tests.
# This feels like a better solution than the original, from
# http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2003-07/msg00154.html
$ENV{PERL_CORE} = $^X;

$0 =~ s/\.dp$//; # for the test.deparse make target

sub import {
    my $self = shift;
    my @@up_2_t = ('../../lib', '../../t');
    my ($abs, $chdir, $setopt);
    foreach (@@_) {
	if ($_ eq 'U2T') {
	    @@INC = @@up_2_t;
	    $setopt = 1;
	} elsif ($_ eq 'U1') {
	    @@INC = '../lib';
	    $setopt = 1;
	} elsif ($_ eq 'NC') {
	    delete $ENV{PERL_CORE}
	} elsif ($_ eq 'A') {
	    $abs = 1;
	} elsif ($_ eq 'T') {
	    $chdir = '..'
		unless -f 't/TEST' && -f 'MANIFEST' && -d 'lib' && -d 'ext';
	    @@INC = 'lib';
	    $setopt = 1;
	} else {
	    die "Unknown option '$_'";
	}
    }

    # Need to default. This behaviour is consistent with previous behaviour,
    # as the equivalent of this code used to be run at the top level, hence
    # would happen (unconditionally) before import() was called.
    unless ($setopt) {
	if (-f 't/TEST' && -f 'MANIFEST' && -d 'lib' && -d 'ext') {
	    # We're being run from the top level. Try to change directory, and
	    # set things up correctly. This is a 90% solution, but for
	    # hand-running tests, that's good enough
	    if ($0 =~ s!^((?:ext|dist|cpan)[\\/][^\\/]+)[\\/](.*\.t)$!$2!) {
		# Looks like a test in ext.
		$chdir = $1;
		@@INC = @@up_2_t;
		$setopt = 1;
		$^X =~ s!^\.([\\/])!..$1..$1!;
	    } else {
		$chdir = 't';
		@@INC = '../lib';
		$setopt = $0 =~ m!^lib/!;
	    }
	} else {
	    # (likely) we're being run by t/TEST or t/harness, and we're a test
	    # in t/
	    if (defined &DynaLoader::boot_DynaLoader) {
		@@INC = '../lib';
	    }
	    else {
		# miniperl/minitest
		# t/TEST does not supply -I../lib, so buildcustomize.pl is
		# not automatically included.
		unshift @@INC, '../lib';
		do "../lib/buildcustomize.pl";
	    }
	}
    }

    if (defined $chdir) {
	chdir $chdir or die "Can't chdir '$chdir': $!";
    }

    if ($abs) {
	require File::Spec::Functions;
	# Forcibly untaint this.
	@@INC = map { $_ = File::Spec::Functions::rel2abs($_); /(.*)/; $1 } @@INC;
	$^X = File::Spec::Functions::rel2abs($^X);
    }

    if ($setopt) {
	my $sep;
	if ($^O eq 'VMS') {
	    $sep = '|';
	} elsif ($^O eq 'MSWin32') {
	    $sep = ';';
	} else {
	    $sep = ':';
	}

	my $lib = join $sep, @@INC;
	if (exists $ENV{PERL5LIB}) {
	    $ENV{PERL5LIB} = $lib . substr $ENV{PERL5LIB}, 0, 0;
	} else {
	    $ENV{PERL5LIB} = $lib;
	}
    }

    push @@INC, '.' unless ${^TAINT};
}

1;
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
$VERSION = 1.02;
d30 1
a30 46
sub new_inc {
    if (${^TAINT}) {
	@@INC = @@_;
    } else {
	@@INC = (@@_, '.');
    }
}

sub set_opt {
    my $sep;
    if ($^O eq 'VMS') {
	$sep = '|';
    } elsif ($^O eq 'MSWin32') {
	$sep = ';';
    } else {
	$sep = ':';
    }

    my $lib = join $sep, @@_;
    if (exists $ENV{PERL5LIB}) {
	$ENV{PERL5LIB} = $lib . substr $ENV{PERL5LIB}, 0, 0;
    } else {
	$ENV{PERL5LIB} = $lib;
    }
}

my @@up_2_t = ('../../lib', '../../t');
# This is incompatible with the import options.
if (-f 't/TEST' && -f 'MANIFEST' && -d 'lib' && -d 'ext') {
    # We're being run from the top level. Try to change directory, and set
    # things up correctly. This is a 90% solution, but for hand-running tests,
    # that's good enough
    if ($0 =~ s!^((?:ext|dist|cpan)[\\/][^\\/]+)[\//](.*\.t)$!$2!) {
	# Looks like a test in ext.
	chdir $1 or die "Can't chdir '$1': $!";
	new_inc(@@up_2_t);
	set_opt(@@up_2_t);
	$^X =~ s!^\./!../../!;
	$^X =~ s!^\.\\!..\\..\\!;
    } else {
	chdir 't' or die "Can't chdir 't': $!";
	new_inc('../lib');
    }
} else {
    new_inc('../lib');
}
d34 2
a35 1
    my $abs;
d38 5
a42 1
	    @@new_inc = @@up_2_t;
d47 5
d57 39
a96 4
	if(!@@new_inc) {
	    @@new_inc = '../lib';
	}
	@@INC = @@new_inc;
d99 1
a99 2
	@@new_inc = map { $_ = File::Spec::Functions::rel2abs($_); /(.*)/; $1 }
	    @@new_inc;
d103 16
a118 3
    if (@@new_inc) {
	new_inc(@@new_inc);
	set_opt(@@new_inc);
d120 2
a123 1
$0 =~ s/\.dp$//; # for the test.deparse make target
a124 1

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d21 1
a21 1
$VERSION = 1.04;
d30 46
a75 1
$0 =~ s/\.dp$//; # for the test.deparse make target
d79 1
a79 2
    my @@up_2_t = ('../../lib', '../../t');
    my ($abs, $chdir, $setopt);
d82 1
a82 5
	    @@INC = @@up_2_t;
	    $setopt = 1;
	} elsif ($_ eq 'U1') {
	    @@INC = '../lib';
	    $setopt = 1;
a86 5
	} elsif ($_ eq 'T') {
	    $chdir = '..'
		unless -f 't/TEST' && -f 'MANIFEST' && -d 'lib' && -d 'ext';
	    @@INC = 'lib';
	    $setopt = 1;
d92 3
a94 23
    # Need to default. This behaviour is consistent with previous behaviour,
    # as the equivalent of this code used to be run at the top level, hence
    # would happen (unconditionally) before import() was called.
    unless ($setopt) {
	if (-f 't/TEST' && -f 'MANIFEST' && -d 'lib' && -d 'ext') {
	    # We're being run from the top level. Try to change directory, and
	    # set things up correctly. This is a 90% solution, but for
	    # hand-running tests, that's good enough
	    if ($0 =~ s!^((?:ext|dist|cpan)[\\/][^\\/]+)[\\/](.*\.t)$!$2!) {
		# Looks like a test in ext.
		$chdir = $1;
		@@INC = @@up_2_t;
		$setopt = 1;
		$^X =~ s!^\.([\\/])!..$1..$1!;
	    } else {
		$chdir = 't';
		@@INC = '../lib';
		$setopt = $0 =~ m!^lib/!;
	    }
	} else {
	    # (likely) we're being run by t/TEST or t/harness, and we're a test
	    # in t/
	    @@INC = '../lib';
d96 1
a96 7
    }

    if (defined $chdir) {
	chdir $chdir or die "Can't chdir '$chdir': $!";
    }

    if ($abs) {
d99 2
a100 1
	@@INC = map { $_ = File::Spec::Functions::rel2abs($_); /(.*)/; $1 } @@INC;
d104 3
a106 16
    if ($setopt) {
	my $sep;
	if ($^O eq 'VMS') {
	    $sep = '|';
	} elsif ($^O eq 'MSWin32') {
	    $sep = ';';
	} else {
	    $sep = ':';
	}

	my $lib = join $sep, @@INC;
	if (exists $ENV{PERL5LIB}) {
	    $ENV{PERL5LIB} = $lib . substr $ENV{PERL5LIB}, 0, 0;
	} else {
	    $ENV{PERL5LIB} = $lib;
	}
a107 2

    push @@INC, '.' unless ${^TAINT};
d110 1
d112 1
@

