head	1.2;
access;
symbols
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.14
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.12
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.10
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.8
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.6
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.4
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.2
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2014.03.24.15.05.13;	author afresh1;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.36.55;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.36.55;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.47.40;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.06.35;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@Notes on building perl under BeOS:

GENERAL ISSUES
--------------
how to compile perl:

To compile perl under BeOS R4 x86:

`./Configure -d` and hit ^C when it asks you if you want to make changes
to config.sh;

edit config.sh and do the following:
change d_socket='define' to ='undef';
remove SDBM, Errno, and Socket from dynamic_ext= and nonxs_ext=;

add '#define bool short' to x2p/a2p.h;

../Configure -S; make; make install

cd ~/config/lib; ln -s 5.00502/BeOS-BePC/CORE/libperl.so .
(substitute 5.00502 with the appropriate filename)

OS RELEASE-SPECIFIC NOTES
-------------------------
R4 x86 - dynamic loading finally works! Yay! This means you can compile
your own modules into perl. However, Sockets and Errno still don't work.
(Hopefully, sockets will at least work by R5, if not sooner.)

R4 PPC - I have not tested this. I rather severely doubt that dynamic
loading will work. (My BeBox is in pieces right now, following a nasty
disk crash.) You may have to disable dynamic loading to get the thing
to compile at all. (use `./Configure` without -d, and say 'no' to
'Build a shared libperl.so'.)

CONTACT INFORMATION
-------------------
If you have comments, problem reports, or even patches or bugfixes (gasp!)
please email me.

28 Jan 1999
Tom Spindler
dogcow@@isi.net

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 3
If you read this file _as_is_, just ignore the funny characters you see.
It is written in the POD format (see pod/perlpod.pod) which is specially
designed to be readable as is.
d3 3
a5 9
=head1 NAME

README.beos - Perl version 5 on BeOS

=head1 DESCRIPTION

Notes for building Perl under BeOS.

=head2 General Issues with Perl on BeOS
d9 2
a10 1
	./Configure -d
a11 1
and hit ^C when it asks you if you want to make changes to config.sh;
d15 1
d18 1
a18 3
	../Configure -S; make; make install

	cd ~/config/lib; ln -s 5.00502/BeOS-BePC/CORE/libperl.so .
d20 1
d23 4
a26 8
=head2 BeOS Release-specific Notes

=over 4

=item R4 x86

Dynamic loading finally works! Yay! This means you can compile your
own modules into perl. However, Sockets and Errno still don't work.
d29 5
a33 11
=item R4 PPC

I have not tested this. I rather severely doubt that dynamic loading
will work. (My BeBox is in pieces right now, following a nasty disk
crash.) You may have to disable dynamic loading to get the thing to
compile at all. (use `./Configure` without -d, and say 'no' to 'Build
a shared libperl.so'.)

=back

=head2 Contact Information
d35 2
a43 54
=head2 Update 2002-05-30

The following tests fail on 5.8.0 Perl in BeOS Personal 5.03:

 t/op/lfs............................FAILED at test 17
 t/op/magic..........................FAILED at test 24
 ext/Fcntl/t/syslfs..................FAILED at test 17
 ext/File/Glob/t/basic...............FAILED at test 3
 ext/POSIX/t/sigaction...............FAILED at test 13
 ext/POSIX/t/waitpid.................FAILED at test 1

The reasons for the failures are as follows: 

=over 4

=item *

The t/op/lfs and ext/Fcntl/t/syslfs failures indicate that the
LFS (large file support, files larger than 2 gigabytes) doesn't
work from Perl (BeFS itself is well capable of supporting large
files).  What fails is that trying to position the file pointer
past 2 gigabytes doesn't work right, the position gets truncated
to its lower 32 bits.

=item *

The op/magic failures look like something funny going on with $0 and
$^X that I can't now figure out: none of the generated pathnames are
wrong as such, they just seem to accumulate "./" prefixes and infixes
in ways that define logic.

=item *

The Glob/t/basic indicates a bug in the getpw*() functions:
they do not always return the correct user db entries.

=item *

The sigaction #13 means that signal mask doesn't get properly restored
if sigaction returns early.

=item *

The waitpid failure means that after there are no more child
processes, waitpid is supposed to start returning -1 (and set
errno to ECHILD).  In BeOS, it doesn't seem to.

=back

Disclaimer: I just installed BeOS Personal Edition 5.0 and the
Developer Tools, that is the whole extent of my BeOS expertise,
so please don't ask me for further help in BeOS Perl problems.

jhi@@iki.fi
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d7 1
a7 1
README.beos - Perl version 5.8+ on BeOS
d11 1
a11 2
This file contains instructions how to build Perl under BeOS and lists
known problems.
d13 1
a13 1
=head1 BUILD AND INSTALL
d15 1
a15 1
=head2 Requirements
d17 1
a17 7
I have built and tested Perl 5.8.6 and 5.9.1 under BeOS R5 x86 net server.
I can't say anything with regard to PPC. Since Perl 5.8.0 had been released
for BeOS BONE, I suspect, there is a good chance, that it still compiles on
a BONE system. The only change I've made, that affects BONE systems is the
recognition of whether it is a BONE system or not in C<hints/beos.sh>. Now
network socket support should remain enabled on BONE systems. This might
as well break the build, though.
d19 5
a23 2
As more recent versions of autoconf require flock() support, I wrote a flock()
emulation (flock_server) and released it on BeBits:
d25 1
a25 1
	http://www.bebits.com/app/4030
d27 1
a27 2
If you want to build a Perl with flock() support, you have to install this
package first.
d29 1
a29 1
=head2 Configure
d31 1
a31 1
With flock() support:
d33 1
a33 2
	CFLAGS=-I/path/to/flock/server/headers ./configure.gnu \
		--prefix=/boot/home/config
d35 1
a35 2
Replace C</path/to/flock/server/headers> with the path to the directory
containing the C<flock.h> header.
d37 11
a47 1
Without flock() support:
d49 1
a49 1
	./configure.gnu --prefix=/boot/home/config
d51 1
a51 1
=head2 Build
d53 2
a54 1
With flock() support:
d56 3
a58 1
	make LDLOADLIBS="-lnet -lflock"
d60 1
a60 1
Without flock() support:
d62 1
a62 1
	make LDLOADLIBS="-lnet"
d64 6
a69 2
C<-lnet> is needed on net server systems only and if the compiler doesn't
add it automatically (Be's R5 gcc does, Oliver Tappe's gcc 2.95.3 does not).
d71 1
a71 1
=head2 Install
d73 1
a73 1
Install all perl files:
d75 1
a75 3
	make install

Create a symlink for libperl:
d77 6
a82 7
	cd ~/config/lib; ln -s perl5/5.8.6/BePC-beos/CORE/libperl.so .

Replace C<5.8.6> with your respective version of Perl.

=head1 KNOWN PROBLEMS

=over 4
d86 4
a89 2
Network socket support is disabled for BeOS R5 net server. I didn't dare yet
to try enabling it and see what problems occur.
d93 2
a94 4
The LFS (large file support) tests (C<t/op/lfs> and C<xt/Fcntl/t/syslfs>) are
disabled as seeking beyond 2 GB is broken according to jhi@@iki.fi who was the
last one checking the BeOS port and updating this file before me. Haven't
checked this myself.
d98 2
a99 4
The C<t/io/fflush> test fails at #6. As far as I can tell, this is caused by
a bug in the BeOS pipes implementation that occurs when starting other child
processes. In the particular test case a C<system("perl -e 0")> flushes the
stdout pipe of another child process.
d103 3
a105 3
The C<ext/POSIX/t/waitpid> test fails at #1. After all child processes are
gone BeOS' waitpid(-1,...) returns 0 instead of -1 (as it should). No idea
how to fix this.
d109 3
a111 4
=head1 CONTACT

For BeOS specifics problems feel free to mail to:
Ingo Weinhold <bonefish@@cs.tu-berlin.de>
d113 1
a113 1
Last update: 2004-12-16
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
perlbeos - Perl version 5.8+ on BeOS
d22 1
a22 1
recognition of whether it is a BONE system or not in F<hints/beos.sh>. Now
d84 1
a84 1
The LFS (large file support) tests (F<t/op/lfs> and F<xt/Fcntl/t/syslfs>) are
d91 1
a91 1
The F<t/io/fflush> test fails at #6. As far as I can tell, this is caused by
d98 1
a98 1
The F<ext/POSIX/t/waitpid> test fails at #1. After all child processes are
@


