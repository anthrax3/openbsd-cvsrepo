head	1.36;
access;
symbols
	OPENBSD_6_0:1.33.0.4
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.31.0.4
	OPENBSD_5_8_BASE:1.31
	PERL_5_20_2:1.1.1.17
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	PERL_5_20_1:1.1.1.16
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	PERL_5_18_2:1.1.1.15
	PERL:1.1.1
	OPENBSD_5_5:1.23.0.6
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	PERL_5_16_3:1.1.1.14
	OPENBSD_5_3:1.21.0.10
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.8
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.6
	OPENBSD_5_0:1.21.0.4
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	PERL_5_12_2:1.1.1.13
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.16.0.6
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.15.0.4
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.36
date	2017.02.05.00.34.32;	author afresh1;	state Exp;
branches;
next	1.35;
commitid	14g5t9TCF9ptuB8D;

1.35
date	2017.02.05.00.33.38;	author afresh1;	state Exp;
branches;
next	1.34;
commitid	7JLVNm1wwPgqSqTa;

1.34
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.33;
commitid	cxJ08BvJA9Pt2PTM;

1.33
date	2016.07.03.01.07.47;	author afresh1;	state Exp;
branches;
next	1.32;
commitid	GzHqjSTnBjdF7Wcw;

1.32
date	2016.06.28.04.30.02;	author afresh1;	state Exp;
branches;
next	1.31;
commitid	vv8tLsiJABJyIK8M;

1.31
date	2015.04.25.19.30.14;	author afresh1;	state Exp;
branches;
next	1.30;
commitid	j9Lvbog4oJBg7dIS;

1.30
date	2015.04.25.19.26.15;	author afresh1;	state Exp;
branches;
next	1.29;
commitid	3qGYFVvfrExB70FB;

1.29
date	2015.04.25.19.14.37;	author afresh1;	state Exp;
branches;
next	1.28;
commitid	XRK22kO4se3v2i2I;

1.28
date	2014.11.29.21.47.12;	author afresh1;	state Exp;
branches;
next	1.27;
commitid	fVbfZyuP13De5YUW;

1.27
date	2014.11.17.21.03.08;	author afresh1;	state Exp;
branches;
next	1.26;
commitid	KQNGgR8uwAxYXWj8;

1.26
date	2014.11.17.21.00.55;	author afresh1;	state Exp;
branches;
next	1.25;
commitid	LnErp1MFKSuew5Fr;

1.25
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.24;
commitid	QP75iYx42Uo7mMxO;

1.24
date	2014.03.24.15.05.12;	author afresh1;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.29.20.59.46;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.25.20.20.35;	author sthen;	state Exp;
branches;
next	1.21;

1.21
date	2010.09.28.16.25.02;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2010.09.24.15.06.39;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.20.19.26.32;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2010.01.05.13.46.39;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.12.18.24.20;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.29.17.35.56;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.25.18.43.31;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.24.16.03.37;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.28.19.22.55;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2005.01.15.21.30.17;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2004.08.09.18.08.53;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.07.21.32.58;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.03.03.02.19;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.27.22.25.16;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.24.18.34.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.06.17.03.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.30.00.31.42;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.08.20.09.58.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.50.52;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.48.00;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.11.35;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.11.35;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.36.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.08.30;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.21.50;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.47;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.30;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.12.50;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.45.30;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.16.26;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.47.29;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.03;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.36;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2010.09.24.14.48.32;	author millert;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2013.03.25.20.06.26;	author sthen;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.03.24.14.58.45;	author afresh1;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2014.11.17.20.52.36;	author afresh1;	state Exp;
branches;
next	1.1.1.17;
commitid	B31cAbBIXiCqnL97;

1.1.1.17
date	2015.04.25.19.10.09;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.36
log
@Apply pre-built unicore patch - perl-5.24.1
@
text
@#!/bin/sh

# quote() - Creates a shell literal
# Usage:  echo "...` quote "..." `..."
quote() {
	case "$1" in
	'') echo "''" ;;
	*)  echo "$1" | sed 's/\([^a-zA-Z0-9.:_/-]\)/\\\1/g' ;;
	esac
}

case $PERL_CONFIG_SH in
'')
	if test -f config.sh
		then TOP=.
	else
		echo "Can't find config.sh."; exit 1
	fi
	. $TOP/config.sh
	;;
esac

case "$osname" in
amigaos)
	devtty=CONSOLE:
	;;
*)
	devtty=/dev/tty
	;;
esac

Makefile=Makefile

: This forces SH files to create target in same directory as SH file.
: This is so that make depend always knows where to find SH derivatives.
case "$0" in
*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
esac

pwd="`pwd`"
linklibperl='$(LIBPERL)'
linklibperl_nonshr=''
shrpldflags='$(LDDLFLAGS)'
ldlibpth=''
DPERL_EXTERNAL_GLOB='-DPERL_EXTERNAL_GLOB'
DPERL_IS_MINIPERL='-DPERL_IS_MINIPERL'
case "$useshrplib" in
true)
	# Prefix all runs of 'miniperl' and 'perl' with
	# $ldlibpth so that ./perl finds *this* shared libperl.
	case "$LD_LIBRARY_PATH" in
	'')  ldlibpth="LD_LIBRARY_PATH=` quote "$pwd" `" ;;
	*)   ldlibpth="LD_LIBRARY_PATH=` quote "$pwd" `:` quote "$LD_LIBRARY_PATH" `" ;;
	esac

	pldlflags="$cccdlflags"
	static_ldflags=''
	case "${osname}${osvers}" in
	next4*)
		ld=libtool
		lddlflags="-dynamic -undefined warning -framework System \
		-compatibility_version 1 -current_version $patchlevel \
		-prebind -seg1addr 0x27000000 -install_name \$(shrpdir)/\$@@"
		;;
	darwin*)
		shrpldflags="${ldflags} -dynamiclib \
                            -compatibility_version \
				${api_revision}.${api_version}.${api_subversion} \
			     -current_version \
				${revision}.${patchlevel}.${subversion} \
			     -install_name \$(shrpdir)/\$@@"
		;;
	cygwin*)
		shrpldflags="$shrpldflags -Wl,--out-implib=libperl.dll.a -Wl,--image-base,0x52000000"
		linklibperl="-L. -lperl"
		;;
	sunos*)
		linklibperl="-lperl"
		;;
	netbsd*|freebsd[234]*|openbsd*|dragonfly*|bitrig*)
		linklibperl="-L. -lperl"
		;;
	interix*)
		linklibperl="-L. -lperl"
		shrpldflags="$shrpldflags -Wl,--image-base,0x57000000"
		;;
	aix*)
		case "$cc" in
		gcc*)
			shrpldflags="-shared -Wl,-H512 -Wl,-T512 -Wl,-bhalt:4 -Wl,-bM:SRE -Wl,-bE:perl.exp"
			case "$osvers" in
			3*)	shrpldflags="$shrpldflags -e _nostart"
				;;
			*)	shrpldflags="$shrpldflags -Wl,-bnoentry"
				;;
			esac
			shrpldflags="$shrpldflags $ldflags $perllibs $cryptlib"
			linklibperl="-L $archlibexp/CORE -L `pwd | sed 's/\/UU$//'` -lperl"
			linklibperl_nonshr='-lperl_nonshr'
			;;
		*)
			shrpldflags="-H512 -T512 -bhalt:4 -bM:SRE -bE:perl.exp"
			case "$osvers" in
			3*)	shrpldflags="$shrpldflags -e _nostart"
				;;
			*)	shrpldflags="$shrpldflags -b noentry"
				;;
			esac
			shrpldflags="$shrpldflags $ldflags $perllibs $cryptlib"
			linklibperl="-L $archlibexp/CORE -L `pwd | sed 's/\/UU$//'` -lperl"
			linklibperl_nonshr='-lperl_nonshr'
			;;
		esac
		;;
	hpux*)
		linklibperl="-L `pwd | sed 's/\/UU$//'` -Wl,+s -Wl,+b$archlibexp/CORE -lperl"
		;;
	os390*)
            shrpldflags='-W l,XPLINK,dll'
	    linklibperl='libperl.x'
	    DPERL_EXTERNAL_GLOB=''
	    ;;
	esac
	case "$ldlibpthname" in
	'') ;;
	*)
	    case "$osname" in
	    os2)
	        ldlibpth=''
	        ;;
	    *)
		eval "ldlibpthval=\"\$$ldlibpthname\""

		case "$ldlibpthval" in
		'')  ldlibpth="$ldlibpthname=` quote "$pwd" `" ;;
		*)   ldlibpth="$ldlibpthname=` quote "$pwd" `:` quote "$ldlibpthval" `" ;;
		esac

		;;
	    esac

	    ;;
        esac

	case "$osname" in
	linux)
	    # If there is a pre-existing $libperl from a previous
	    # installation, Linux needs to use LD_PRELOAD to
	    # override the LD_LIBRARY_PATH setting.  See the
	    # INSTALL file, under "Building a shared perl library".
	    # If there is no pre-existing $libperl, we don't need
	    # to do anything further.
	    if test -f $archlib/CORE/$libperl; then
		rm -f preload
		cat <<'EOT' > preload
#! /bin/sh
lib=$1
shift
test -r $lib && export LD_PRELOAD="$lib $LD_PRELOAD"
exec "$@@"
EOT
		chmod 755 preload
		ldlibpth="$ldlibpth `pwd`/preload `pwd`/$libperl"
	    fi
	    ;;
	os390)	test -f /bin/env && ldlibpth="/bin/env $ldlibpth"
		;;
	esac

	;;

*)	pldlflags=''
	static_ldflags='CCCDLFLAGS='
	;;
esac

: is Cwd static or dynamic
static_cwd='define'
list_util_dep='$(PERL_EXE)'
for f in $dynamic_ext; do
   case $f in
       Cwd) static_cwd='undef' ;;
       List/Util) list_util_dep=lib/auto/List/Util/Util.$dlext
   esac
done

: Prepare dependency lists for Makefile.
dynamic_list=' '
dynamic_ext_re="lib/auto/re/re.$dlext"
extra_dep='
ext/Pod-Functions/pm_to_blib: cpan/Pod-Simple/pm_to_blib cpan/Pod-Escapes/pm_to_blib pod/perlfunc.pod
'
for f in $dynamic_ext; do
    : the dependency named here will never exist
      base=`echo "$f" | sed 's/.*\///'`
    this_target="lib/auto/$f/$base.$dlext"  
    dynamic_list="$dynamic_list $this_target"

    : Parallel makes reveal that we have some interdependencies
    case $f in
	Math/BigInt/FastCalc|Devel/NYTProf) extra_dep="$extra_dep
$this_target: $list_util_dep" ;;
	Unicode/Normalize) extra_dep="$extra_dep
$this_target: uni.data" ;;
    esac
done

static_list=' '
for f in $static_ext; do
	base=`echo "$f" | sed 's/.*\///'`
	static_list="$static_list lib/auto/$f/$base\$(LIB_EXT)"
    : Parallel makes reveal that we have some interdependencies
    this_target="lib/auto/$f/$base\$(LIB_EXT)"
    case $f in
	Math/BigInt/FastCalc|Devel/NYTProf) extra_dep="$extra_dep
$this_target: lib/auto/List/Util/Util\$(LIB_EXT)" ;;
	Unicode/Normalize) extra_dep="$extra_dep
$this_target: uni.data" ;;
    esac
done

nonxs_list=' '
for f in $nonxs_ext; do
    p=`echo "$f" | tr / -`
    for d in ext dist cpan; do
	if test -d $d/$p; then
	    nonxs_list="$nonxs_list $d/$p/pm_to_blib"
	fi
    done
done

dtrace_h=''

# three object files generated by 'dtrace -G' when dtrace is enabled
dtrace_perllib_o=''
dtrace_mini_o=''
dtrace_main_o=''

case "$usedtrace" in
define|true)
	dtrace_h='perldtrace.h'
	case "$dtraceobject" in
	define)
		dtrace_perllib_o='dtrace_perllib$(OBJ_EXT)'
		dtrace_mini_o='dtrace_mini$(OBJ_EXT)'
		dtrace_main_o='dtrace_main$(OBJ_EXT)'
		;;
	esac
	;;
esac

echo "Extracting $Makefile (with variable substitutions)"
$spitshell >$Makefile <<!GROK!THIS!
# $Makefile
# This file is derived from Makefile.SH.  Any changes made here will
# be lost the next time you run Configure.
#  Makefile is used to generate $firstmakefile.  The only difference
#  is that $firstmakefile has the dependencies filled in at the end.

CC = $cc
LD = $ld

LDFLAGS = $ldflags
CLDFLAGS = $ldflags

mallocsrc = $mallocsrc
mallocobj = $mallocobj
LNS = $lns
# NOTE: some systems don't grok "cp -f". XXX Configure test needed?
CPS = $cp
RMS = rm -f
ranlib = $ranlib

# The following are mentioned only to make metaconfig include the
# appropriate questions in Configure.  If you want to change these,
# edit config.sh instead, or specify --man1dir=/wherever on
# installman commandline.
bin = $installbin
scriptdir = $scriptdir
shrpdir = $archlibexp/CORE
privlib = $installprivlib
man1dir = $man1dir
man1ext = $man1ext
man3dir = $man3dir
man3ext = $man3ext

# The following are used to build and install shared libraries for
# dynamic loading.
LDDLFLAGS = $lddlflags
SHRPLDFLAGS = $shrpldflags
CCDLFLAGS = $ccdlflags
DLSUFFIX = .$dlext
PLDLFLAGS = $pldlflags
LIBPERL = $libperl
LLIBPERL= $linklibperl
LLIBPERL_NONSHR= $linklibperl_nonshr
SHRPENV = $shrpenv

# Static targets are ordinarily built without CCCDLFLAGS.  However,
# if building a shared libperl.so that might later be linked into
# another application, then it might be appropriate to also build static
# extensions (usually just DynaLoader) with relocatable code (e.g. -fPIC
# for GNU cc).
STATIC_LDFLAGS = $static_ldflags

# The following is used to include the current directory in
# the dynamic loader path you are building a shared libperl.
LDLIBPTH = $ldlibpth

# Sometimes running an executable is an adventure.
RUN = 

# When cross-compiling we want to use a (mini)perl built for the host, not the target
HOST_PERL = $hostperl
HOST_GENERATE = $hostgenerate
SYSTEM_PERL = $perl

# These variables may need to be manually set for non-Unix systems.
AR = $full_ar
HOST_EXE_EXT = $_exe
EXE_EXT = $_exe
LIB_EXT = $_a
OBJ_EXT = $_o
PATH_SEP = $p_

# Macros to invoke a copy of miniperl during the build.  Targets which
# are built using these macros should depend on \$(MINIPERL_EXE)
MINIPERL_EXE = miniperl\$(EXE_EXT)
MINIPERL = \$(LDLIBPTH) ./miniperl\$(EXE_EXT) -Ilib

# Macros to invoke sort the MANIFEST during build
MANIFEST_SRT = MANIFEST.srt

!GROK!THIS!

case "$usecrosscompile$perl" in
define?*)
	$spitshell >>$Makefile <<!GROK!THIS!
# Macros to invoke a copy of our fully operational perl during the build.
PERL_EXE = perl\$(EXE_EXT)
RUN_PERL = \$(LDLIBPTH) \$(RUN) $perl\$(EXE_EXT)
!GROK!THIS!
	;;
*)
	$spitshell >>$Makefile <<!GROK!THIS!
# Macros to invoke a copy of our fully operational perl during the build.
PERL_EXE = perl\$(EXE_EXT)
RUN_PERL = \$(LDLIBPTH) \$(RUN) ./perl\$(EXE_EXT) -Ilib
!GROK!THIS!
	;;
esac

$spitshell >>$Makefile <<!GROK!THIS!
# Macros to run our tests
RUN_TESTS = \$(LDLIBPTH) ./runtests

dynamic_ext = $dynamic_list
dynamic_ext_re = $dynamic_ext_re
static_ext = $static_list
nonxs_ext = $nonxs_list
ext = \$(dynamic_ext) \$(static_ext) \$(nonxs_ext)
DYNALOADER = DynaLoader\$(OBJ_EXT)

libs = $perllibs $cryptlib

public = \$(PERL_EXE) utilities

shellflags = $shellflags

# The /dev/tty or the moral equivalent.
devtty = $devtty

# This is set to  MAKE=$make if your $make command doesn't
# do it for you.
$make_set_make

# Mention $gmake here so it gets probed for by Configure.

!GROK!THIS!

case "${osname}" in
linux*|darwin)
$spitshell >>$Makefile <<!GROK!THIS!
# If you're going to use valgrind and it can't be invoked as plain valgrind
# then you'll need to change this, or override it on the make command line.
VALGRIND ?= valgrind
VG_TEST  ?= ./perl -e 1 2>/dev/null

!GROK!THIS!
	;;
esac

$spitshell >>$Makefile <<!GROK!THIS!
DTRACE = $dtrace
DTRACE_H = $dtrace_h

DTRACE_PERLLIB_O = $dtrace_perllib_o # "dtrace -G" output for perllib_objs
DTRACE_MINI_O    = $dtrace_mini_o    # "dtrace -G" output for common and mini
DTRACE_MAIN_O    = $dtrace_main_o    # "dtrace -G" output for perlmain.o

FIRSTMAKEFILE = $firstmakefile

# Any special object files needed by this architecture, e.g. os2/os2.obj
ARCHOBJS = $archobjs

.SUFFIXES: .c \$(OBJ_EXT) .i .s

# grrr
SHELL = $sh

# how to tr(anslate) newlines
TRNL = '$trnl'

OPTIMIZE = $optimize

EXTRAS = $extras

INSTALLPREFIXEXP = $prefix

!GROK!THIS!
# not used by Makefile but by installperl;
# mentioned here so that metaconfig picks these up
# $installusrbinperl
# $versiononly

case "${osname}:${osvers}" in
darwin:*)
$spitshell >>$Makefile <<EOF

# Your locales are broken (osname $osname, osvers $osvers)
# and to avoid the numerous
# perl: warning: Setting locale failed.
# warnings during the build process we reset the locale variables.

LC_ALL=C
LANG=C
LANGUAGE=C
EOF
	;;
esac

## In the following dollars and backticks do not need the extra backslash.
$spitshell >>$Makefile <<'!NO!SUBS!'

CCCMD    = sh $(shellflags) cflags "optimize='$(OPTIMIZE)'" $@@

CCCMDSRC = sh $(shellflags) cflags "optimize='$(OPTIMIZE)'" $<

CONFIGPM_FROM_CONFIG_SH = lib/Config.pm lib/Config_heavy.pl
CONFIGPM = $(CONFIGPM_FROM_CONFIG_SH) lib/Config_git.pl

CONFIGPOD = lib/Config.pod

CONFIGH = config.h
!NO!SUBS!

SH_to_target() {
    echo $@@ | sed -e s/\\\.SH//g -e s/_/./g
}

SH='Makefile.SH cflags.SH config_h.SH makedepend.SH myconfig.SH runtests.SH pod/Makefile.SH'
shextract=`SH_to_target $SH`

## In the following dollars and backticks do not need the extra backslash.
$spitshell >>$Makefile <<!GROK!THIS!

private = preplibrary \$(CONFIGPM) \$(CONFIGPOD) lib/buildcustomize.pl

# Files to be built with variable substitution before miniperl
# is available.
sh = $SH

shextract = $shextract
!GROK!THIS!

## In the following dollars and backticks do not need the extra backslash.
$spitshell >>$Makefile <<'!NO!SUBS!'

addedbyconf = UU $(shextract) pstruct

# Unicode data files generated by mktables
unidatafiles = lib/unicore/Decomposition.pl lib/unicore/TestProp.pl \
	lib/unicore/CombiningClass.pl lib/unicore/Name.pl \
	lib/unicore/UCD.pl lib/unicore/Name.pm \
	lib/unicore/Heavy.pl lib/unicore/mktables.lst

# Directories of Unicode data files generated by mktables
unidatadirs = lib/unicore/To lib/unicore/lib

h1 = EXTERN.h INTERN.h XSUB.h av.h $(CONFIGH) cop.h cv.h dosish.h
h2 = embed.h form.h gv.h handy.h hv.h hv_func.h keywords.h mg.h op.h opcode.h
h3 = pad.h patchlevel.h perl.h perlapi.h perly.h pp.h proto.h regcomp.h
h4 = regexp.h scope.h sv.h unixish.h util.h iperlsys.h thread.h
h5 = utf8.h warnings.h mydtrace.h op_reg_common.h l1_char_class_tab.h
h6 = charclass_invlists.h
h = $(h1) $(h2) $(h3) $(h4) $(h5) $(h6)

c1 = av.c scope.c op.c doop.c doio.c dump.c gv.c hv.c mg.c reentr.c mro_core.c perl.c
c2 = perly.c pp.c pp_hot.c pp_ctl.c pp_sys.c regcomp.c regexec.c utf8.c sv.c
c3 = taint.c toke.c util.c deb.c run.c universal.c pad.c globals.c keywords.c
c4 = perlio.c perlapi.c numeric.c mathoms.c locale.c pp_pack.c pp_sort.c caretx.c dquote.c time64.c
c5 = $(mallocsrc)

c = $(c1) $(c2) $(c3) $(c4) $(c5) miniperlmain.c opmini.c perlmini.c

obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT) mro_core$(OBJ_EXT) keywords$(OBJ_EXT)
obj2 = hv$(OBJ_EXT) av$(OBJ_EXT) run$(OBJ_EXT) pp_hot$(OBJ_EXT) sv$(OBJ_EXT) pp$(OBJ_EXT) scope$(OBJ_EXT) pp_ctl$(OBJ_EXT) pp_sys$(OBJ_EXT)
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) mathoms$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT) caretx$(OBJ_EXT) dquote$(OBJ_EXT) time64$(OBJ_EXT)

# split the objects into 3 exclusive sets: those used by both miniperl and
# perl, and those used by just one or the other. Doesn't include the
# actual perl(mini)main.o, nor any dtrace objects.

common_objs    = $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
mini_only_objs = opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
main_only_objs = op$(OBJ_EXT)     perl$(OBJ_EXT)

miniperl_objs_nodt = $(mini_only_objs) $(common_objs) miniperlmain$(OBJ_EXT)
perllib_objs_nodt  = $(main_only_objs) $(common_objs)

miniperl_objs = $(miniperl_objs_nodt) $(DTRACE_MINI_O)
perllib_objs  = $(perllib_objs_nodt) $(DTRACE_PERLLIB_O)
perlmain_objs = perlmain$(OBJ_EXT) $(DTRACE_MAIN_O)

perltoc_pod_prereqs = extra.pods pod/perl5241delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod
generated_pods = pod/perltoc.pod $(perltoc_pod_prereqs)
generated_headers = uudmap.h bitcount.h mg_data.h

lintflags = \
    -b \
    -n \
    -p \
    -Ncheck=%all \
    -Nlevel=4 \
    -errchk=parentheses \
    -errhdr=%all \
    -errfmt=src \
    -errtags \
    -erroff=E_ASSIGN_NARROW_CONV \
    -erroff=E_BAD_PTR_CAST \
    -erroff=E_BAD_PTR_CAST_ALIGN \
    -erroff=E_BAD_PTR_INT_COMBINATION \
    -erroff=E_BAD_SIGN_EXTEND \
    -erroff=E_BLOCK_DECL_UNUSED \
    -erroff=E_CASE_FALLTHRU \
    -erroff=E_CONST_EXPR \
    -erroff=E_CONSTANT_CONDITION \
    -erroff=E_END_OF_LOOP_CODE_NOT_REACHED \
    -erroff=E_EQUALITY_NOT_ASSIGNMENT \
    -erroff=E_EXPR_NULL_EFFECT \
    -erroff=E_FALSE_LOGICAL_EXPR \
    -erroff=E_INCL_NUSD \
    -erroff=E_LOOP_EMPTY \
    -erroff=E_MAIN_PARAM \
    -erroff=E_POINTER_TO_OBJECT \
    -erroff=E_PTRDIFF_OVERFLOW \
    -erroff=E_SHIFT_CNT_NEG_TOO_BIG_L \
    -erroff=E_STATIC_UNUSED \
    -erroff=E_TRUE_LOGICAL_EXPR

splintflags = \
    -I/usr/lib/gcc/i486-linux-gnu/4.0.2/include/ \
    -D__builtin_va_list=va_list \
    -Dsigjmp_buf=jmp_buf \
    -warnposix \
    \
    +boolint \
    +charintliteral \
    -fixedformalarray \
    -mustfreefresh \
    -nestedextern \
    -predboolint \
    -predboolothers \
    -preproc \
    -boolops \
    -shadow \
    -nullstate \
    +longintegral \
    +matchanyintegral \
    -type \
    \
    +line-len 999 \
    +weak

splintfiles = $(c1)

.c$(OBJ_EXT): 
	@@echo `$(CCCMD)` $(PLDLFLAGS) $*.c
	@@`$(CCCMD)` $(PLDLFLAGS) $*.c

.c.i:	perl.h config.h
	@@echo `$(CCCMDSRC)` -E $*.c \> $*.i
	@@`$(CCCMDSRC)` -E $*.c > $*.i

.c.s:	perl.h config.h
	@@echo `$(CCCMDSRC)` -S $*.c
	@@`$(CCCMDSRC)` -S $*.c

all: $(FIRSTMAKEFILE) $(MINIPERL_EXE) $(generated_pods) $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make $(MANIFEST_SRT)
	@@echo " ";
	@@echo "	Everything is up to date. Type '$(MAKE) test' to run test suite."

$(MANIFEST_SRT):	MANIFEST $(PERL_EXE)
	@@$(RUN_PERL) Porting/manisort -q || (echo "WARNING: re-sorting MANIFEST"; \
	    $(RUN_PERL) Porting/manisort -q -o MANIFEST; sh -c true)
	@@touch $(MANIFEST_SRT)

.PHONY: all utilities

# OpenBSD uses pre-generated lib/Config_git.pl and git_version.h files
# Both git_version.h and lib/Config_git.pl are built
# by make_patchnum.pl.
#git_version.h: lib/Config_git.pl
#
#lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
#	$(MINIPERL) make_patchnum.pl
#
## make sure that we recompile perl.c if the git version changes
#perl$(OBJ_EXT): git_version.h

!NO!SUBS!

# Making utilities requires Cwd.  If we have dynamic
# loading, we only need miniperl and Cwd.$dlext.  If we have static
# loading, we need to build perl first.
case "$usedl$static_cwd" in
defineundef)
    util_deps='$(MINIPERL_EXE) $(CONFIGPM) lib/auto/Cwd/Cwd$(DLSUFFIX) FORCE'
    ;;
definedefine)
    util_deps='$(PERL_EXE) $(CONFIGPM) FORCE'
    ;;
*)  util_deps='$(PERL_EXE) $(CONFIGPM) FORCE'
    ;;
esac

$spitshell >>$Makefile <<!GROK!THIS!
utils/Makefile: \$(MINIPERL_EXE) \$(CONFIGPM) utils/Makefile.PL
	\$(MINIPERL) -Ilib utils/Makefile.PL

utilities:	utils/Makefile $util_deps
	@@echo " "; echo "	Making utilities"; cd utils; \$(LDLIBPTH) \$(MAKE) all

!GROK!THIS!

$spitshell >>$Makefile <<'!NO!SUBS!'

# This is now done by installman only if you actually want the man pages.
#	@@echo " "; echo "	Making docs"; cd pod; $(MAKE) all;

# Phony target to force checking subdirectories.
# Apparently some makes require an action for the FORCE target.
.PHONY: FORCE
FORCE:
	@@sh -c true
!NO!SUBS!

for file in op perl; do
    if $issymlink $file.c; then
        $spitshell >>$Makefile <<!GROK!THIS!

# We do a copy of the $file.c instead of a symlink because gcc gets huffy
# if we have a symlink forest to another disk (it complains about too many
# levels of symbolic links, even if we have only two)

${file}mini.c: $file.c
	\$(RMS) ${file}mini.c
	\$(CPS) ${file}.c ${file}mini.c
!GROK!THIS!
    else
        $spitshell >>$Makefile <<!GROK!THIS!

${file}mini.c: $file.c
	\$(RMS) ${file}mini.c
	\$(LNS) ${file}.c ${file}mini.c
!GROK!THIS!
    fi

    $spitshell >>$Makefile <<!GROK!THIS!

${file}mini\$(OBJ_EXT): ${file}mini.c
	echo @@\`\$(CCCMD)\` \$(PLDLFLAGS) $DPERL_IS_MINIPERL $DPERL_EXTERNAL_GLOB ${file}mini.c
	@@\`\$(CCCMD)\` \$(PLDLFLAGS) $DPERL_IS_MINIPERL $DPERL_EXTERNAL_GLOB ${file}mini.c
!GROK!THIS!
done

$spitshell >>$Makefile <<'!NO!SUBS!'

globals$(OBJ_EXT): $(generated_headers)

uudmap.h mg_data.h: bitcount.h

generate_uudmap$(OBJ_EXT): mg_raw.h

!NO!SUBS!

# If hostgerenate isn't defined, then we have to build
# generate_uudmap and run it. This can potentially mean running
# it on the target system if we're cross-compiling.
# If it is defined, then we just run it locally.
case "$hostgenerate" in
''|'undef')
$spitshell >>$Makefile <<!GROK!THIS!
bitcount.h: generate_uudmap\$(HOST_EXE_EXT)
	$run ./generate_uudmap\$(HOST_EXE_EXT) \$(generated_headers)
	-@@for f in \$(generated_headers); do \\
	    $from \$\$f; \\
	done

!GROK!THIS!

$spitshell >>$Makefile <<'!NO!SUBS!'
generate_uudmap$(HOST_EXE_EXT): generate_uudmap$(OBJ_EXT)
	$(CC) -o generate_uudmap$(EXE_EXT) $(LDFLAGS) generate_uudmap$(OBJ_EXT) $(libs)

!NO!SUBS!
;;
*)
$spitshell >>$Makefile <<'!NO!SUBS!'
bitcount.h: generate_uudmap$(HOST_EXE_EXT)
	./generate_uudmap$(HOST_EXE_EXT) $(generated_headers)

generate_uudmap$(HOST_EXE_EXT): generate_uudmap$(OBJ_EXT)
	-@@rm generate_uudmap$(HOST_EXE_EXT)
	$(LNS) $(HOST_GENERATE) generate_uudmap$(HOST_EXE_EXT)

!NO!SUBS!
;;
esac

case "$osname" in
amigaos*)
$spitshell >>$Makefile <<'!NO!SUBS!'
perlmain.c: $(MINIPERL_EXE) ext/ExtUtils-Miniperl/pm_to_blib
	$(MINIPERL) -Ilib -MExtUtils::Miniperl -e 'writemain(\\"perlmain.c", @@ARGV)' DynaLoader $(static_ext)

# The file ext.libs is a list of libraries that must be linked in
# for static extensions, e.g. -lm -lgdbm, etc.  The individual
# static extension Makefile's add to it.
ext.libs: $(static_ext)
	-@@test -f ext.libs || touch ext.libs

!NO!SUBS!
;;
*)
$spitshell >>$Makefile <<'!NO!SUBS!'
perlmain.c: $(MINIPERL_EXE) ext/ExtUtils-Miniperl/pm_to_blib
	$(MINIPERL) -Ilib -MExtUtils::Miniperl -e 'writemain(\"perlmain.c", @@ARGV)' DynaLoader $(static_ext)

# The file ext.libs is a list of libraries that must be linked in
# for static extensions, e.g. -lm -lgdbm, etc.  The individual
# static extension Makefile's add to it.
ext.libs: $(static_ext)
	-@@test -f ext.libs || touch ext.libs

!NO!SUBS!
;;
esac

# How to build libperl.  This is still rather convoluted.
# Load up custom Makefile.SH fragment for shared loading and executables:
case "$osname" in
*)
	Makefile_s="$osname/Makefile.SHs"
	;;
esac

case "$osname" in
aix)
	$spitshell >>$Makefile <<!GROK!THIS!
LIBS			= $perllibs
# In AIX we need to change this for building Perl itself from
# its earlier definition (which is for building external
# extensions *after* Perl has been built and installed)
CCDLFLAGS		= `echo $ccdlflags|sed -e 's@@-bE:.*/perl\.exp@@-bE:perl.exp@@'`

!GROK!THIS!
	case "$useshrplib" in
	define|true|[yY]*)
		$spitshell >>$Makefile <<'!NO!SUBS!'

LIBPERL_NONSHR		= libperl_nonshr$(LIB_EXT)
MINIPERL_NONSHR		= miniperl_nonshr$(EXE_EXT)

#$(LIBPERL_NONSHR): $(perllib_objs)
#	$(RMS) $(LIBPERL_NONSHR)
#	$(AR) rc $(LIBPERL_NONSHR) $(perllib_objs)

$(MINIPERL_NONSHR): miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
	$(CC) $(LDFLAGS) -o $(MINIPERL_NONSHR) miniperlmain$(OBJ_EXT) \
	    opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(LIBPERL_NONSHR) $(LIBS)

MINIPERLEXP		= $(MINIPERL_NONSHR)

LIBPERLEXPORT		= perl.exp

!NO!SUBS!
		
		;;
	*)	
		$spitshell >>$Makefile <<'!NO!SUBS!'
MINIPERLEXP		= $(MINIPERL_EXE)

PERLEXPORT		= perl.exp

!NO!SUBS!
	;;
	esac
	$spitshell >>$Makefile <<'!NO!SUBS!'
perl.exp: $(MINIPERLEXP) makedef.pl $(CONFIGPM) $(SYM) $(SYMH)
	./$(MINIPERLEXP) makedef.pl --sort-fold PLATFORM=aix CC_FLAGS="$(OPTIMIZE)" > perl.exp

!NO!SUBS!
	;;
os2)
	$spitshell >>$Makefile <<'!NO!SUBS!'
MINIPERLEXP		= miniperl

perl5.def: $(MINIPERLEXP) makedef.pl $(CONFIGPM) $(SYM) $(SYMH) miniperl.map
	./$(MINIPERLEXP) makedef.pl PLATFORM=os2 -DPERL_DLL=$(PERL_DLL) CC_FLAGS="$(OPTIMIZE)" > perl5.def

!NO!SUBS!
	;;
cygwin)
	$spitshell >>$Makefile <<'!NO!SUBS!'
cygwin.c: cygwin/cygwin.c
	$(LNS) cygwin/cygwin.c

LIBPERL_NONSHR		= libperl$(LIB_EXT)

$(LIBPERL_NONSHR): $(perllib_objs)
	$(RMS) $(LIBPERL_NONSHR)
	$(AR) rc $(LIBPERL_NONSHR) $(perllib_objs)

!NO!SUBS!
	;;
esac

if test -s $Makefile_s ; then
	. $Makefile_s
	$spitshell >>$Makefile <<!GROK!THIS!

Makefile: $Makefile_s
!GROK!THIS!
else
	case "$dtrace_h" in
	?*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
# dtrace dicards const qualifiers from arguments, put them back
$(DTRACE_H): perldtrace.d
	$(DTRACE) -h -s perldtrace.d -o $(DTRACE_H).in
	sed -e '/const/!s/char \*/const char */g' $(DTRACE_H).in >$(DTRACE_H)
	$(RMS) $(DTRACE_H).in

mydtrace.h: $(DTRACE_H)

!NO!SUBS!
		;;
	esac
	case "$dtraceobject" in
	define)
		$spitshell >>$Makefile <<'!NO!SUBS!'
$(DTRACE_MINI_O): perldtrace.d $(miniperl_objs_nodt)
	$(DTRACE) -G -s perldtrace.d -o $(DTRACE_MINI_O) $(miniperl_objs_nodt)

$(DTRACE_PERLLIB_O): perldtrace.d $(perllib_objs_nodt)
	$(DTRACE) -G -s perldtrace.d -o $(DTRACE_PERLLIB_O) $(perllib_objs_nodt)

$(DTRACE_MAIN_O): perldtrace.d perlmain$(OBJ_EXT)
	$(DTRACE) -G -s perldtrace.d -o $(DTRACE_MAIN_O) perlmain$(OBJ_EXT)

!NO!SUBS!
		;;
    esac
	$spitshell >>$Makefile <<'!NO!SUBS!'
#$(LIBPERL): $& $(perllib_objs) $(DYNALOADER) $(LIBPERLEXPORT)
#!NO!SUBS!
#	case "$useshrplib" in
#	true)
#		$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f $@@
#	$(LD) -o $@@ $(SHRPLDFLAGS) $(perllib_objs) $(DYNALOADER) $(libs)
#!NO!SUBS!
#		case "$osname" in
#		aix)
#			$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f libperl$(OBJ_EXT)
#	mv $@@ libperl$(OBJ_EXT)
#	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
#!NO!SUBS!
#			;;
#		esac
#		;;
#	*)
#		$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f $(LIBPERL)
#	$(AR) rc $(LIBPERL) $(perllib_objs) $(DYNALOADER)
#	@@$(ranlib) $(LIBPERL)
#!NO!SUBS!
#		;;
#	esac
#	$spitshell >>$Makefile <<'!NO!SUBS!'

# How to build executables.

# The $& notation tells Sequent machines that it can do a parallel make,
# and is harmless otherwise.
# The miniperl -w -MExporter line is a basic cheap test to catch errors
# before make goes on to run preplibrary and then MakeMaker on extensions.
# This is very handy because later errors are often caused by miniperl
# build problems but that's not obvious to the novice.
# The Module used here must not depend on Config or any extensions.

# The seemingly cranky ordering of having $(MINIPERL_EXE) depend on
# lib/buildcustomize.pl despite the reality that lib/buildcustomize.pl needs
# miniperl to exist first permits us to
# a) have one rule generate both miniperl and lib/buildcustomize.pl
#    (so that lib/buildcustomize.pl is always available. This simplifies things)
# b) have the rest of the Makefile depend on the more obvious $(MINIPERL_EXE)

$(MINIPERL_EXE): lib/buildcustomize.pl

!NO!SUBS!

	case "${osname}${osvers}" in
	amigaos*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
lib/buildcustomize.pl: $& $(miniperl_objs) write_buildcustomize.pl
	-@@rm -f miniperl.xok
	$(CC) $(CLDFLAGS) -o $(MINIPERL_EXE) \
	    $(miniperl_objs) $(libs)
#	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	$(MINIPERL) -f write_buildcustomize.pl
!NO!SUBS!
		;;
	aix*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
lib/buildcustomize.pl: $& $(miniperl_objs)
	$(CC) -o $(MINIPERL_EXE) $(CLDFLAGS) $(miniperl_objs) $(libs)
	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	$(MINIPERL) -f write_buildcustomize.pl
!NO!SUBS!
		;;
	next4*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
lib/buildcustomize.pl: $& $(miniperl_objs) write    ldcustomize.pl
	$(CC) -o $(MINIPERL_EXE) $(miniperl_objs    libs)
	$(LDLIBPTH) ./miniperl$(HOST    _EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	$(MINIPERL) -f write_buildcustomize.pl    
!NO!SUBS!
		;;
	darwin*)
		case "$osvers" in
		[1-6].*) ;;
		*) case "$ldflags" in
		    *"-flat_namespace"*) ;;
		    *) # to allow opmini.o to override stuff in libperl.dylib
		$spitshell >>$Makefile <<!NO!SUBS!
NAMESPACEFLAGS = -force_flat_namespace
!NO!SUBS!
		       ;;
		    esac
		    ;;
		esac
		$spitshell >>$Makefile <<'!NO!SUBS!'
lib/buildcustomize.pl: $& $(miniperl_objs) write_buildcustomize.pl
	$(MINIPERL) -f write_buildcustomize.pl
!NO!SUBS!
		;;
	*)
		if test "X$hostperl" != X; then
			$spitshell >>$Makefile <<!GROK!THIS!
lib/buildcustomize.pl: \$& \$(miniperl_objs) write_buildcustomize.pl
	-@@rm -f miniperl.xok
	-@@rm \$(MINIPERL_EXE)
	\$(LNS) \$(HOST_PERL) \$(MINIPERL_EXE)
	\$(LDLIBPTH) ./miniperl\$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	\$(MINIPERL) -f write_buildcustomize.pl 'osname' "$osname"
!GROK!THIS!
		else
			$spitshell >>$Makefile <<'!NO!SUBS!'
lib/buildcustomize.pl: $& $(miniperl_objs) write_buildcustomize.pl
	-@@rm -f miniperl.xok
	$(CC) $(CLDFLAGS) -o $(MINIPERL_EXE) \
	    $(miniperl_objs) $(libs)
	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	$(MINIPERL) -f write_buildcustomize.pl
!NO!SUBS!
		fi
		;;
	esac

	$spitshell >>$Makefile <<'!NO!SUBS!'

$(PERL_EXE): $& $(perlmain_objs) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT) write_buildcustomize.pl
	-@@rm -f miniperl.xok
!NO!SUBS!

        case $osname in
	# In AmigaOS the Perl executable needs to be linked with -ldl,
	# but none of the other executables should be.
        amigaos) $spitshell >>$Makefile <<'!NO!SUBS!'
	$(SHRPENV) $(CC) -o perl $(CLDFLAGS) $(CCDLFLAGS) $(perlmain_objs) $(LLIBPERL) $(static_ext) `cat ext.libs` $(libs) -ldl
!NO!SUBS!
        ;;
        os390) $spitshell >>$Makefile <<'!NO!SUBS!'
	$(SHRPENV) $(CC) -o perl $(CLDFLAGS) $(CCDLFLAGS) $(perlmain_objs) $(LLIBPERL) $(static_ext) `cat ext.libs` $(libs)
!NO!SUBS!
        ;;
        *) $spitshell >>$Makefile <<'!NO!SUBS!'
	$(SHRPENV) $(CC) -o perl $(CLDFLAGS) $(CCDLFLAGS) $(perlmain_objs) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
!NO!SUBS!
        ;;
        esac

	$spitshell >>$Makefile <<'!NO!SUBS!'

# Microperl.  This is just a convenience thing if one happens to
# build also the full Perl and therefore the real big Makefile:
# usually one should manually explicitly issue the below command.

.PHONY: microperl
microperl:
	$(MAKE) -f Makefile.micro

!NO!SUBS!

fi

# Some environment have no system(), which mkpport uses.
# Let's try running the commands with shell.
case "${osname}" in
catamount)
$spitshell >>$Makefile <<!GROK!THIS!
.PHONY: makeppport
makeppport: \$(MINIPERL_EXE) \$(CONFIGPM)
	-@@for f in Makefile.PL PPPort_pm.PL PPPort_xs.PL ppport_h.PL; do \
	(cd ext/Devel-PPPort && `pwd`/run.sh ../../$(MINIPERL_EXE) -I../../lib \$\$f); \
	done

!GROK!THIS!
;;
*)
$spitshell >>$Makefile <<'!NO!SUBS!'
.PHONY: makeppport
makeppport: $(MINIPERL_EXE) $(CONFIGPM) $(nonxs_ext)
	$(MINIPERL) mkppport

!NO!SUBS!
;;
esac

$spitshell >>$Makefile <<'!NO!SUBS!'

.PHONY: preplibrary
preplibrary: $(MINIPERL_EXE) $(CONFIGPM) $(PREPLIBRARY_LIBPERL)

$(CONFIGPM_FROM_CONFIG_SH): $(CONFIGPOD)

$(CONFIGPOD): config.sh $(MINIPERL_EXE) configpm Porting/Glossary lib/Config_git.pl
	$(MINIPERL) configpm

unidatafiles $(unidatafiles) pod/perluniprops.pod: uni.data

uni.data: $(MINIPERL_EXE) $(CONFIGPM) lib/unicore/mktables $(nonxs_ext)
	touch uni.data

# $(PERL_EXE) and ext because pod_lib.pl needs Digest::MD5
# But also this ensures that all extensions are built before we try to scan
# them, which picks up Devel::PPPort's documentation.
pod/perltoc.pod: $(perltoc_pod_prereqs)  $(PERL_EXE) $(ext) pod/buildtoc
	$(RUN_PERL) -f pod/buildtoc -q

pod/perlapi.pod: pod/perlintern.pod

pod/perlintern.pod: $(MINIPERL_EXE) autodoc.pl embed.fnc
	$(MINIPERL) autodoc.pl

pod/perlmodlib.pod: $(MINIPERL_EXE) pod/perlmodlib.PL MANIFEST
	$(MINIPERL) pod/perlmodlib.PL -q

pod/perl5241delta.pod: pod/perldelta.pod
	$(RMS) pod/perl5241delta.pod
	$(LNS) perldelta.pod pod/perl5241delta.pod

extra.pods: $(MINIPERL_EXE)
	-@@test ! -f extra.pods || rm -f `cat extra.pods`
	-@@rm -f extra.pods
	-@@for x in `grep -l '^=[a-z]' README.* | grep -v README.vms` ; do \
	    nx=`echo $$x | sed -e "s/README\.//"`; \
	    $(LNS) ../$$x "pod/perl"$$nx".pod" ; \
	    echo "pod/perl"$$nx".pod" >> extra.pods ; \
	done

extras.make: $(PERL_EXE)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`

extras.test: $(PERL_EXE)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`

extras.install: $(PERL_EXE)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`

.PHONY: install install-strip install-all install-verbose install-silent \
	no-install install.perl install.man install.html

# Set this to an empty string to avoid an attempt of rebuild before install
INSTALL_DEPENDENCE = all

no_install no-install: install-notify

install: install-all
!NO!SUBS!


for name in all notify silent strip verbose; do
    flags="--$name";
    flags=`echo $flags | sed -e 's/--all//'`
    if test "X$hostperl" != X; then
        $spitshell >>$Makefile <<EOT

install_$name install-$name: \$(INSTALL_DEPENDENCE) installperl all installman
	\$(HOST_PERL) installperl --destdir=\$(DESTDIR) $flags \$(INSTALLFLAGS) \$(STRIPFLAGS)
	\$(HOST_PERL) installman --destdir=\$(DESTDIR) $flags
EOT
    else
        $spitshell >>$Makefile <<EOT

install_$name install-$name: \$(INSTALL_DEPENDENCE) installperl all installman
	\$(RUN_PERL) installperl --destdir=\$(DESTDIR) $flags \$(INSTALLFLAGS) \$(STRIPFLAGS)
	\$(RUN_PERL) installman --destdir=\$(DESTDIR) $flags
EOT
    fi

    test $name = notify || echo '	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib -MCPAN -e '\''@@ARGV&&install(@@ARGV)'\'' `cat extras.lst`' >>$Makefile
done

if test "X$hostperl" != X; then
	$spitshell >>$Makefile <<'!NO!SUBS!'
install.perl:	$(INSTALL_DEPENDENCE) installperl
	$(HOST_PERL) installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
	-@@test ! -s extras.lst || $(MAKE) extras.install

install.man:	all installman
	$(HOST_PERL) installman --destdir=$(DESTDIR) $(INSTALLFLAGS)

# XXX Experimental. Hardwired values, but useful for testing.
# Eventually Configure could ask for some of these values.
install.html: all installhtml
	-@@test -f README.vms && cd vms && $(LNS) ../README.vms README_vms.pod && cd ..
	$(HOST_PERL) installhtml   \
      --podroot=. --podpath=. --recurse  \
      --htmldir=$(privlib)/html   \
      --htmlroot=$(privlib)/html  \
      --splithead=pod/perlipc     \
      --splititem=pod/perlfunc    \
      --ignore=Porting/Maintainers.pm,Porting/pumpkin.pod,Porting/repository.pod \
      --verbose
!NO!SUBS!
else
	$spitshell >>$Makefile <<'!NO!SUBS!'
install.perl:	$(INSTALL_DEPENDENCE) installperl
	$(RUN_PERL) installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
	-@@test ! -s extras.lst || PATH="`pwd`:\${PATH}" PERL5LIB="`pwd`/lib" \$(RUN_PERL) -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`

install.man:	all installman
	$(RUN_PERL) installman --destdir=$(DESTDIR) $(INSTALLFLAGS)

# XXX Experimental. Hardwired values, but useful for testing.
# Eventually Configure could ask for some of these values.
install.html: all installhtml
	-@@test -f README.vms && cd vms && $(LNS) ../README.vms README_vms.pod && cd ..
	$(RUN_PERL) installhtml   \
      --podroot=. --podpath=. --recurse  \
      --htmldir=$(privlib)/html   \
      --htmlroot=$(privlib)/html  \
      --splithead=pod/perlipc     \
      --splititem=pod/perlfunc    \
      --ignore=Porting/Maintainers.pm,Porting/pumpkin.pod,Porting/repository.pod \
      --verbose
!NO!SUBS!
fi

$spitshell >>$Makefile <<'!NO!SUBS!'

# I now supply perly.c with the kits, so the following section is
# used only if you force bison to run by saying
# 	make regen_perly
# You normally shouldn't remake perly.[ch].

.PHONY: regen_perly

run_byacc run-byacc:
	@@echo "run_byacc is obsolete; try 'make regen_perly' instead"

# this outputs perly.h, perly.act and perly.tab
regen_perly regen-perly:
	perl regen_perly.pl

# We don't want to regenerate perly.c and perly.h, but they might
# appear out-of-date after a patch is applied or a new distribution is
# made.
perly.c: perly.y
	-@@sh -c true

perly.h: perly.y
	-@@sh -c true

SYM  = globvar.sym perlio.sym

SYMH = perlvars.h intrpvar.h

CHMOD_W = chmod +w

# The following files are generated automatically
#	embed.pl:	proto.h embed.h embedvar.h perlapi.h perlapi.c
#	opcode.pl:	opcode.h opnames.h pp_proto.h
#	regcomp.pl:	regnodes.h
#	warnings.pl:	warnings.h lib/warnings.pm
#	feature.pl:	feature.h lib/feature.pm
# The correct versions should be already supplied with the perl kit,
# in case you don't have perl available.
# To force them to be regenerated, run
#       perl regen.pl
# with your existing copy of perl
# (make regen_headers is kept for backwards compatibility)

AUTOGEN_FILES = opcode.h opnames.h pp_proto.h proto.h embed.h embedvar.h \
		perlapi.h perlapi.c regnodes.h warnings.h lib/warnings.pm \
		lib/feature.pm feature.h

.PHONY: regen_headers regen_all

regen:	FORCE
	-perl regen.pl
	-perl regen/uconfig_h.pl

regen_headers regen-headers:	FORCE
	-perl regen.pl -v
	-perl regen/uconfig_h.pl -v

regen_meta regen-meta:  META.yml META.json

META.yml:   FORCE
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) Porting/makemeta -y

META.json:   FORCE
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) Porting/makemeta -j


regen_all regen-all: regen regen_meta

.PHONY:	manisort manicheck

manisort:	FORCE
	@@perl Porting/manisort -q || (echo "WARNING: re-sorting MANIFEST"; \
		perl Porting/manisort -q -o MANIFEST; sh -c true)

manicheck:	FORCE
	perl Porting/manicheck

# Extensions:
# Names added to $(dynamic_ext) or $(static_ext) or $(nonxs_ext) will
# automatically get built.  There should ordinarily be no need to change
# any of this part of makefile.
#
# The dummy dependency is a place holder in case $(dynamic_ext) or
# $(static_ext) is empty.
#
# DynaLoader may be needed for extensions that use Makefile.PL.

$(DYNALOADER):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary FORCE $(nonxs_ext)
	$(MINIPERL) make_ext.pl $@@ $(MAKE_EXT_ARGS) MAKE="$(MAKE)" LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)

d_dummy $(dynamic_ext):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary makeppport $(DYNALOADER) FORCE $(PERLEXPORT) $(LIBPERL)
	$(MINIPERL) make_ext.pl $@@ $(MAKE_EXT_ARGS) MAKE="$(MAKE)" LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic

s_dummy $(static_ext):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary makeppport $(DYNALOADER) FORCE
	$(MINIPERL) make_ext.pl $@@ $(MAKE_EXT_ARGS) MAKE="$(MAKE)" LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)

n_dummy $(nonxs_ext):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary FORCE
	$(MINIPERL) make_ext.pl $@@ $(MAKE_EXT_ARGS) MAKE="$(MAKE)" LIBPERL_A=$(LIBPERL)
!NO!SUBS!

$spitshell >>$Makefile <<EOF
$extra_dep
EOF

$spitshell >>$Makefile <<'!NO!SUBS!'

.PHONY: printconfig
printconfig:
	@@eval `$(RUN_PERL) -V:$(CONFIGVAR)`; echo $$$(CONFIGVAR)

.PHONY: clean _tidy _mopup _cleaner1 _cleaner2 \
	realclean _realcleaner clobber _clobber \
	distclean veryclean _verycleaner

clean:		realclean

realclean:	_realcleaner _mopup
	@@echo "Note that '$(MAKE) realclean' does not delete config.sh or Policy.sh"

_clobber:
	-@@rm -f Cross/run-* Cross/to-* Cross/from-* Cross/mkdir
	-rm -rf host
	rm -f t/test_state
	rm -f config.sh cppstdin Policy.sh extras.lst
	rm -f $(MANIFEST_SRT)

clobber:	_realcleaner _mopup _clobber

distclean:	clobber

# Like distclean but also removes emacs backups and *.orig.
veryclean:	_verycleaner _mopup _clobber
	-@@rm -f Obsolete Wanted

# Do not 'make _mopup' directly.
_mopup:
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c perlmini.c generate_uudmap$(EXE_EXT) $(generated_headers)
	-rmdir .depending
	-@@test -f extra.pods && rm -f `cat extra.pods`
	-@@test -f vms/README_vms.pod && rm -f vms/README_vms.pod
	-rm -f perl.exp ext.libs $(generated_pods) uni.data opmini.o perlmini.o pod/roffitall
	-rm -f perl.export perl.dll perl.libexp perl.map perl.def
	-rm -f *perl.xok
	-rm -f cygwin.c libperl*.def libperl*.dll cygperl*.dll *.exe.stackdump
	-rm -f $(PERL_EXE) $(MINIPERL_EXE) $(LIBPERL) libperl.* microperl
	-rm -f $(DTRACE_H)

_cleaner1:
	-cd os2; rm -f Makefile
	-cd pod; $(LDLIBPTH) $(MAKE) $(CLEAN)
	-cd utils; $(LDLIBPTH) $(MAKE) $(CLEAN)
	-@@if test -f $(MINIPERL_EXE) ; then \
	for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) $(nonxs_ext) ; do \
	$(MINIPERL) make_ext.pl --target=$(CLEAN) $$x MAKE="$(MAKE)" ; \
	done ; \
	else \
	sh $(CLEAN).sh ; \
	fi
	rm -f realclean.sh veryclean.sh
	-rm -f `grep -v ^# mkppport.lst | grep . | sed -e 's/$$/\/ppport.h/'`

# Dear POSIX, thanks for making the default to xargs to be
# run once if nothhing is passed in. It is such a great help.

# Some systems do not support "?", so keep these files separate.
_cleaner2:
	-rm -f core.*perl.*.? t/core.perl.*.? .?*.c
	rm -f core *perl.core t/core t/*perl.core core.* t/core.*
	rm -f t/$(PERL_EXE) t/rantests
	rm -rf t/tmp*
	rm -rf $(addedbyconf)
	rm -f $(FIRSTMAKEFILE) $(FIRSTMAKEFILE).old makefile.old utils/Makefile
	rm -f $(private)
	rm -rf $(unidatafiles) $(unidatadirs)
	rm -rf lib/auto
	rm -f lib/.exists lib/*/.exists lib/*/*/.exists
	rm -f h2ph.man pstruct
	rm -rf .config
	rm -f preload
	rm -f pod2htmd.tmp
	rm -rf pod/perlfunc pod/perlipc
	-rmdir ext/B/lib
	rm -f so_locations $(LIBPERL_NONSHR) $(MINIPERL_NONSHR)
	-rmdir lib/version lib/threads lib/inc/ExtUtils lib/inc lib/encoding
	-rmdir lib/autodie/exception lib/autodie/Scope lib/autodie lib/XS
	-rmdir lib/Win32API lib/VMS lib/Unicode/Collate/Locale
	-rmdir lib/Unicode/Collate/CJK lib/Unicode/Collate lib/Tie/Hash
	-rmdir lib/Thread lib/Text lib/Test/use lib/Test/Tester
	-rmdir lib/Test/Builder/Tester lib/Test/Builder/IO lib/Test/Builder
	-rmdir lib/Test lib/Term lib/TAP/Parser/YAMLish
	-rmdir lib/TAP/Parser/SourceHandler lib/TAP/Parser/Scheduler
	-rmdir lib/TAP/Parser/Result lib/TAP/Parser/Iterator lib/TAP/Parser
	-rmdir lib/TAP/Harness lib/TAP/Formatter/File
	-rmdir lib/TAP/Formatter/Console lib/TAP/Formatter lib/TAP
	-rmdir lib/Sys/Syslog lib/Sys lib/Sub lib/Search lib/Scalar
	-rmdir lib/Pod/Text lib/Pod/Simple lib/Pod/Perldoc lib/PerlIO/via
	-rmdir lib/PerlIO lib/Perl lib/Parse/CPAN lib/Parse lib/Params
	-rmdir lib/OpenBSD lib/Net/FTP lib/Module/Load lib/Module/CoreList
	-rmdir lib/Module lib/Memoize lib/Math/BigInt lib/Math/BigFloat
	-rmdir lib/Math lib/MIME lib/Locale/Maketext lib/Locale/Codes
	-rmdir lib/Locale lib/List/Util lib/List lib/JSON/PP lib/JSON lib/IPC
	-rmdir lib/IO/Uncompress/Adapter lib/IO/Uncompress lib/IO/Socket
	-rmdir lib/IO/Compress/Zlib lib/IO/Compress/Zip lib/IO/Compress/Gzip
	-rmdir lib/IO/Compress/Base lib/IO/Compress/Adapter lib/IO/Compress
	-rmdir lib/IO lib/I18N/LangTags lib/I18N lib/Hash/Util lib/Hash
	-rmdir lib/HTTP lib/Filter/Util lib/Filter lib/File/Spec
	-rmdir lib/ExtUtils/Typemaps lib/ExtUtils/ParseXS
	-rmdir lib/ExtUtils/MakeMaker/version lib/ExtUtils/MakeMaker
	-rmdir lib/ExtUtils/Liblist lib/ExtUtils/Constant lib/ExtUtils/Command
	-rmdir lib/ExtUtils/CBuilder/Platform/Windows
	-rmdir lib/ExtUtils/CBuilder/Platform lib/ExtUtils/CBuilder
	-rmdir lib/Exporter lib/Encode/Unicode lib/Encode/MIME/Header
	-rmdir lib/Encode/MIME lib/Encode/KR lib/Encode/JP lib/Encode/CN
	-rmdir lib/Encode lib/Digest lib/Devel lib/Data lib/Config/Perl
	-rmdir lib/Compress/Raw lib/Compress lib/Carp lib/CPAN/Plugin
	-rmdir lib/CPAN/Meta/History lib/CPAN/Meta lib/CPAN/LWP
	-rmdir lib/CPAN/Kwalify lib/CPAN/HTTP lib/CPAN/FTP lib/CPAN/Exception
	-rmdir lib/CPAN/API lib/CPAN lib/Attribute lib/Archive/Tar lib/Archive
	-rmdir lib/App/Prove/State/Result lib/App/Prove/State lib/App/Prove
	-rmdir lib/App lib/Amiga

_realcleaner:
	@@$(LDLIBPTH) $(MAKE) _cleaner1 CLEAN=distclean
	@@$(LDLIBPTH) $(MAKE) _cleaner2

_verycleaner:
	@@$(LDLIBPTH) $(MAKE) _cleaner1 CLEAN=veryclean
	@@$(LDLIBPTH) $(MAKE) _cleaner2
	-rm -f *~ *.orig */*~ */*.orig */*/*~ */*/*.orig

.PHONY: lint
lint: $(c)
	rm -f *.ln
	lint $(lintflags) -DPERL_CORE -D_REENTRANT -DDEBUGGING -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 $(c)

.PHONY: splint
splint: $(c)
	splint $(splintflags) -DPERL_CORE -D_REENTRANT -DDEBUGGING -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 $(splintfiles)

cscopeflags = -Rb  # Recursive, build-only.

.PHONY:	cscope
# To query the cscope.out "cscope -dLnsymbol" where n = 0 means uses,
# 1 = definitions, 2 = callees, 3 = callers, for example
# "cscope -dL1Perl_mg_set" or run cscope interactively (no arguments).
cscope.out cscope: $(c) $(h)
	cscope $(cscopeflags)

# Need to unset during recursion to go out of loop.
# The README below ensures that the dependency list is never empty and
# that when MAKEDEPEND is empty $(FIRSTMAKEFILE) doesn't need rebuilding.

MAKEDEPEND = Makefile makedepend

$(FIRSTMAKEFILE):	README $(MAKEDEPEND)
	$(MAKE) depend MAKEDEPEND=
!NO!SUBS!

for f in $SH; do
    file=`SH_to_target $f`
    $spitshell >>$Makefile <<!GROK!THIS!

$file: $f config.sh
	\$(SHELL) $f
!GROK!THIS!
done

$spitshell >>$Makefile <<'!NO!SUBS!'

.PHONY: depend
depend: makedepend $(DTRACE_H) $(generated_headers)
	sh ./makedepend MAKE="$(MAKE)" cflags

.PHONY: test check test_prep test_prep_nodll test_prep_pre \
	test_prep_reonly test_tty test-tty test_notty test-notty \
	test_harness test_harness_notty minitest test-reonly _test

_test:
	echo >&2 The _test target is deprecated. Please upgrade your smoker
	$(RUN_TESTS) choose

# Cannot delegate rebuilding of t/perl to make
# to allow interlaced test and minitest

# Architecture-neutral stuff:

test_prep_pre: preplibrary utilities $(nonxs_ext)
!NO!SUBS!

case "$targethost" in
'') $spitshell >>$Makefile <<'!NO!SUBS!'
test_prep test-prep: test_prep_pre $(MINIPERL_EXE) $(unidatafiles) $(PERL_EXE) \
	$(dynamic_ext) $(TEST_PERL_DLL) runtests $(generated_pods)
	cd t && (rm -f $(PERL_EXE); $(LNS) ../$(PERL_EXE) $(PERL_EXE))

!NO!SUBS!
;;
*) $spitshell >>$Makefile <<!GROK!THIS!
test_prep test-prep: test_prep_pre \$(MINIPERL_EXE) \$(unidatafiles) \$(PERL_EXE) \
	\$(dynamic_ext) \$(TEST_PERL_DLL) runtests \
	\$(generated_pods)
	$to libperl.*
	$to t/*
	$to lib/*
	$to TestInit.pm
	$to win32/FindExt.pm
	$to regen/*
	$to pod/*
	$to MANIFEST
	$to Porting/*
	$to cpan/*/t
	$to dist/*/t
	$to ext/*/t
	$to cpan/Archive-Tar/*
	$to cpan/Module-Metadata/*
	$to cpan/Term-Cap/test.pl
	$to cpan/Pod-Usage/*
	$to cpan/Pod-Parser/*
	$to cpan/IO-Compress/*
	$to cpan/HTTP-Tiny/lib/*
	$to cpan/Filter-Util-Call/filter-util.pl
	$to cpan/Digest-MD5/*
	$to cpan/Digest-SHA/*
	$to cpan/Test-Simple/*
	$to cpan/Pod-Parser/lib/*
	$to cpan/Test-Harness/*
	$to cpan/Scalar-List-Utils/*
	$to ext/IPC-Open3/*
	$to ext/Tie-Memoize/*
	$to ext/POSIX/*
	$to dist/IO/*
# --- These three are needed by ExtUtils::MM_Unix to verify PERL_CORE
	$to config_h.SH
	$to perl.h
	$to cflags
	$to *.h
# --- For t/porting/customized.t
	$to vutil.c
	$to vxs.inc
# --- For t/TEST
	$to config.sh
# --- For lib/diagnostics.t with -Duseshrplib
	$to \$(PERL_EXE)
	cd t && (rm -f \$(PERL_EXE); \$(LNS) ../\$(PERL_EXE) \$(PERL_EXE)) && cd ..
	$to t/\$(PERL_EXE)

!GROK!THIS!
;;
esac

$spitshell >>$Makefile <<'!NO!SUBS!'
test_prep_reonly: $(MINIPERL_EXE) $(PERL_EXE) $(dynamic_ext_re) $(TEST_PERL_DLL)
	$(MINIPERL) make_ext.pl $(dynamic_ext_re) MAKE="$(MAKE)" LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
	cd t && (rm -f $(PERL_EXE); $(LNS) ../$(PERL_EXE) $(PERL_EXE))
!NO!SUBS!

case "$targethost" in
'') $spitshell >>$Makefile <<'!NO!SUBS!'

test check: test_prep
	$(RUN_TESTS) choose

!NO!SUBS!
;;
*) $spitshell >>$Makefile <<!GROK!THIS!

test check: test_prep
	$run -cwd $targetdir/t -env "$targetenv LD_LIBRARY_PATH=$targetdir:$targetdir/lib:$targetdir/lib/auto:\$\$LD_LIBRARY_PATH" ./TEST

!GROK!THIS!
;;
esac

$spitshell >>$Makefile <<'!NO!SUBS!'
test_tty test-tty: test_prep
	$(RUN_TESTS) tty

test_notty test-notty: test_prep
	$(RUN_TESTS) no-tty

!NO!SUBS!

case "${osname}${osvers}" in
linux*|darwin*)
	$spitshell >>$Makefile <<'!NO!SUBS!'
# Targets for valgrind testing:

test.valgrind check.valgrind:	test_prep
	@@echo "Checking usemymalloc='n' in config.sh..."
	@@grep "^usemymalloc="    config.sh
	@@grep "^usemymalloc='n'" config.sh >/dev/null || exit 1
	@@echo "And of course you have to have valgrind..."
	$(VALGRIND) $(VG_TEST) || exit 1
	PERL_VALGRIND=1 VALGRIND='$(VALGRIND)' TESTFILE=harness $(RUN_TESTS) choose
!NO!SUBS!
	;;
esac

$spitshell >>$Makefile <<'!NO!SUBS!'

# minitest can't depend on lib/Config.pm because that might be where miniperl
# is crashing.
minitest_prep:
	-@@test -f lib/Config.pm || $(MAKE) lib/Config.pm $(unidatafiles)
	@@echo " "
	@@echo "You may see some irrelevant test failures if you have been unable"
	@@echo "to build lib/Config.pm, or the Unicode data files."
	@@echo " "
	- cd t && (rm -f $(PERL_EXE); $(LNS) ../$(MINIPERL_EXE) $(PERL_EXE))

MINITEST_TESTS = base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t opbasic/*.t op/*.t uni/*.t perf/*.t

minitest: $(MINIPERL_EXE) minitest_prep
	- cd t && $(RUN_PERL) TEST $(MINITEST_TESTS) <$(devtty)

minitest-notty minitest_notty: $(MINIPERL_EXE) minitest_prep
	- cd t && PERL_SKIP_TTY_TEST=1 $(RUN_PERL) TEST $(MINITEST_TESTS)

# Test via harness

test_harness test-harness: test_prep
	TESTFILE=harness $(RUN_TESTS) choose

test_harness_notty: test_prep
	HARNESS_NOTTY=1 TESTFILE=harness $(RUN_TESTS) choose

test_reonly test-reonly: test_prep_reonly
	TEST_ARGS='-re \bre\/' TESTFILE=harness $(RUN_TESTS) choose


# Porting tests (well-formedness of pod, manifest, etc)

test_porting test-porting: test_prep
	cd t && $(RUN_PERL) harness porting/*.t ../lib/diagnostics.t

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "make nok" instead.

.PHONY: ok okfile oknack okfilenack nok nokfile noknack nokfilenack

ok:	utilities
	$(RUN_PERL) utils/perlbug -ok -s '(UNINSTALLED)'

okfile:	utilities
	$(RUN_PERL) utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok

oknack:	utilities
	$(RUN_PERL) utils/perlbug -ok -s '(UNINSTALLED)' -A

okfilenack:	utilities
	$(RUN_PERL) utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A

nok:	utilities
	$(RUN_PERL) utils/perlbug -nok -s '(UNINSTALLED)'

nokfile:	utilities
	$(RUN_PERL) utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok

noknack:	utilities
	$(RUN_PERL) utils/perlbug -nok -s '(UNINSTALLED)' -A

nokfilenack:	utilities
	$(RUN_PERL) utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A

.PHONY: clist hlist

clist:	$(c)
	echo $(c) | tr ' ' $(TRNL) >.clist

hlist:  $(h)
	echo $(h) | tr ' ' $(TRNL) >.hlist

.PHONY: distcheck
distcheck: FORCE
	perl '-MExtUtils::Manifest=&fullcheck' -e 'fullcheck()'

.PHONY: ctags

TAGS: $(c1) $(c2) $(c3) $(c4) $(c5) $(h)
	etags $(c1) $(c2) $(c3) $(c4) $(c5) $(h)

ctags:
	ctags -f Tags -N --totals --languages=c --langmap=c:+.h --exclude=opmini.c --exclude=perlmini.c *.c *.h

# AUTOMATICALLY GENERATED MAKE DEPENDENCIES--PUT NOTHING BELOW THIS LINE
# If this runs make out of memory, delete /usr/include lines.
!NO!SUBS!

$eunicefix Makefile
$rm -f $firstmakefile

# Now do any special processing required before building.

case "$ebcdic" in
define)
    xxx=''
    echo "This is an EBCDIC system, checking if any parser files need regenerating." >&2
case "$osname" in
os390|posix-bc)
    ;;
*)
    echo "'$osname' is an EBCDIC system I don't know that well." >&4
    ;;
esac
    case "$xxx" in
    '') echo "No parser files were regenerated.  That's okay." >&2 ;;
    esac
    ;;
esac

# ex: set ts=8 sts=4 sw=4 noet:
@


1.35
log
@Apply local patches - perl-5.24.1
@
text
@d525 1
a525 1
perltoc_pod_prereqs = extra.pods pod/perl5241delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
@


1.34
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d467 1
a467 1
private = preplibrary \$(CONFIGPM) \$(CONFIGPOD) git_version.h lib/buildcustomize.pl
d610 1
d613 7
a619 7
git_version.h: lib/Config_git.pl

lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
	$(MINIPERL) make_patchnum.pl

# make sure that we recompile perl.c if the git version changes
perl$(OBJ_EXT): git_version.h
d785 3
a787 3
$(LIBPERL_NONSHR): $(perllib_objs)
	$(RMS) $(LIBPERL_NONSHR)
	$(AR) rc $(LIBPERL_NONSHR) $(perllib_objs)
d789 1
a789 1
$(MINIPERL_NONSHR): $(LIBPERL_NONSHR) miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
d876 27
a902 27
$(LIBPERL): $& $(perllib_objs) $(DYNALOADER) $(LIBPERLEXPORT)
!NO!SUBS!
	case "$useshrplib" in
	true)
		$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f $@@
	$(LD) -o $@@ $(SHRPLDFLAGS) $(perllib_objs) $(DYNALOADER) $(libs)
!NO!SUBS!
		case "$osname" in
		aix)
			$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f libperl$(OBJ_EXT)
	mv $@@ libperl$(OBJ_EXT)
	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
!NO!SUBS!
			;;
		esac
		;;
	*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f $(LIBPERL)
	$(AR) rc $(LIBPERL) $(perllib_objs) $(DYNALOADER)
	@@$(ranlib) $(LIBPERL)
!NO!SUBS!
		;;
	esac
	$spitshell >>$Makefile <<'!NO!SUBS!'
a966 4
	-@@rm -f miniperl.xok
	$(CC) $(CLDFLAGS) $(NAMESPACEFLAGS) -o $(MINIPERL_EXE) \
	    $(miniperl_objs) $(libs)
	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
d1066 1
a1066 4
	$(MINIPERL) lib/unicore/mktables -C lib/unicore -P pod -maketest -makelist -p
#	Commented out so always runs, mktables looks at far more files than we
#	can in this makefile to decide if needs to run or not
#	touch uni.data
d1330 1
a1330 1
	-rm -f config.arch config.over $(DTRACE_H)
d1382 12
a1393 12
	-rmdir lib/Net/FTP lib/Module/Load lib/Module/CoreList lib/Module
	-rmdir lib/Memoize lib/Math/BigInt lib/Math/BigFloat lib/Math lib/MIME
	-rmdir lib/Locale/Maketext lib/Locale/Codes lib/Locale lib/List/Util
	-rmdir lib/List lib/JSON/PP lib/JSON lib/IPC lib/IO/Uncompress/Adapter
	-rmdir lib/IO/Uncompress lib/IO/Socket lib/IO/Compress/Zlib
	-rmdir lib/IO/Compress/Zip lib/IO/Compress/Gzip lib/IO/Compress/Base
	-rmdir lib/IO/Compress/Adapter lib/IO/Compress lib/IO
	-rmdir lib/I18N/LangTags lib/I18N lib/Hash/Util lib/Hash lib/HTTP
	-rmdir lib/Filter/Util lib/Filter lib/File/Spec lib/ExtUtils/Typemaps
	-rmdir lib/ExtUtils/ParseXS lib/ExtUtils/MakeMaker/version
	-rmdir lib/ExtUtils/MakeMaker lib/ExtUtils/Liblist
	-rmdir lib/ExtUtils/Constant lib/ExtUtils/Command
@


1.33
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d8 1
a8 1
	*)  echo "$1" | sed 's/\([^a-zA-Z0-9.:_\-\/]\)/\\\1/g' ;;
d23 9
d233 6
a238 2
dtrace_o=''
minidtrace_o=''
d241 8
a248 4
	dtrace_h='perldtrace.h' 
	$dtrace -G -s perldtrace.d -o perldtrace.tmp >/dev/null 2>&1 \
		&& rm -f perldtrace.tmp && dtrace_o='perldtrace$(OBJ_EXT)' \
		&& minidtrace_o='miniperldtrace$(OBJ_EXT)'
a267 2
madlysrc = $madlysrc
madlyobj = $madlyobj
d331 3
d366 1
a366 1
public = \$(PERL_EXE) utilities translators
d370 3
d396 4
a399 2
DTRACE_O = $dtrace_o
MINIDTRACE_O = $minidtrace_o
d461 1
a461 1
SH='Makefile.SH cflags.SH config_h.SH makedepend.SH myconfig.SH runtests.SH pod/Makefile.SH x2p/Makefile.SH'
d498 1
a498 1
c1 = av.c scope.c op.c doop.c doio.c dump.c gv.c hv.c mg.c reentr.c mro.c perl.c
d501 2
a502 2
c4 = perlio.c perlapi.c numeric.c mathoms.c locale.c pp_pack.c pp_sort.c caretx.c
c5 = $(madlysrc) $(mallocsrc)
d506 1
a506 3
obj0 = op$(OBJ_EXT) perl$(OBJ_EXT)
obj0mini = perlmini$(OBJ_EXT) opmini$(OBJ_EXT) miniperlmain$(OBJ_EXT)
obj1 = $(madlyobj) $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT) mro$(OBJ_EXT) keywords$(OBJ_EXT)
d508 9
a516 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) mathoms$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT) caretx$(OBJ_EXT)
d518 2
a519 4
minindt_obj = $(obj0mini) $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
mini_obj = $(minindt_obj) $(MINIDTRACE_O)
ndt_obj = $(obj0) $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
obj = $(ndt_obj) $(DTRACE_O)
d521 5
a525 1
perltoc_pod_prereqs = extra.pods pod/perl5203delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod
d591 1
a591 1
.c.i: 
d595 1
a595 1
.c.s:
d599 1
a599 1
all: $(FIRSTMAKEFILE) $(MINIPERL_EXE) $(generated_pods) $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
d603 6
a608 1
.PHONY: all translators utilities
a609 1
# OpenBSD uses pre-generated lib/Config_git.pl and git_version.h files
d612 4
a615 4
#git_version.h: lib/Config_git.pl
#
#lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
#	$(MINIPERL) make_patchnum.pl
d622 1
a622 1
# Making utilities and translators require Cwd.  If we have dynamic
a627 1
     x2p_deps="\$(MINIPERL_EXE) \$(CONFIGPM) \$(dynamic_ext) x2p/$firstmakefile FORCE"
a630 1
     x2p_deps="\$(PERL_EXE) \$(CONFIGPM) \$(dynamic_ext) x2p/$firstmakefile FORCE"
a632 1
     x2p_deps="\$(PERL_EXE) \$(CONFIGPM) x2p/$firstmakefile FORCE"
a636 12
x2p/$firstmakefile:	makedepend
	cd x2p; \$(MAKE) depend

translators:	$x2p_deps
	@@echo " "; echo "	Making x2p stuff"; cd x2p; \$(LDLIBPTH) \$(MAKE) all

x2p/s2p: $x2p_deps
	cd x2p; \$(LDLIBPTH) \$(MAKE) s2p

x2p/find2perl: $x2p_deps
	cd x2p; \$(LDLIBPTH) \$(MAKE) find2perl

d730 5
d736 9
d756 2
d784 3
a786 3
#$(LIBPERL_NONSHR): $(obj)
#	$(RMS) $(LIBPERL_NONSHR)
#	$(AR) rcu $(LIBPERL_NONSHR) $(obj)
d788 1
a788 1
$(MINIPERL_NONSHR): miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
d830 1
a830 1
$(LIBPERL_NONSHR): $(obj)
d832 1
a832 1
	$(AR) rcu $(LIBPERL_NONSHR) $(obj)
d859 2
a860 2
	case "$dtrace_o" in
	?*)
d862 2
a863 2
$(DTRACE_O): perldtrace.d $(ndt_obj)
	$(DTRACE) -G -s perldtrace.d -o $(DTRACE_O) $(ndt_obj)
d865 5
a869 2
$(MINIDTRACE_O): perldtrace.d $(minindt_obj) perlmini$(OBJ_EXT)
	$(DTRACE) -G -s perldtrace.d -o $(MINIDTRACE_O) $(minindt_obj) perlmini$(OBJ_EXT)
d875 27
a901 27
#$(LIBPERL): $& $(obj) $(DYNALOADER) $(LIBPERLEXPORT)
#!NO!SUBS!
#	case "$useshrplib" in
#	true)
#		$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f $@@
#	$(LD) -o $@@ $(SHRPLDFLAGS) $(obj) $(DYNALOADER) $(libs)
#!NO!SUBS!
#		case "$osname" in
#		aix)
#			$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f libperl$(OBJ_EXT)
#	mv $@@ libperl$(OBJ_EXT)
#	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
#!NO!SUBS!
#			;;
#		esac
#		;;
#	*)
#		$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f $(LIBPERL)
#	$(AR) rcu $(LIBPERL) $(obj) $(DYNALOADER)
#	@@$(ranlib) $(LIBPERL)
#!NO!SUBS!
#		;;
#	esac
#	$spitshell >>$Makefile <<'!NO!SUBS!'
d917 1
a917 1
#    (so that lib/buildcustomise.pl is always available. This simplifies things)
d925 10
d937 2
a938 2
lib/buildcustomize.pl: $& $(mini_obj)
	$(CC) -o $(MINIPERL_EXE) $(CLDFLAGS) $(mini_obj) $(libs)
d945 2
a946 2
lib/buildcustomize.pl: $& $(mini_obj) write    ldcustomize.pl
	$(CC) -o $(MINIPERL_EXE) $(mini_obj    libs)
d965 1
a965 1
lib/buildcustomize.pl: $& $(mini_obj) write_buildcustomize.pl
d968 1
a968 1
	    $(mini_obj) $(libs)
d976 1
a976 1
lib/buildcustomize.pl: \$& \$(mini_obj) write_buildcustomize.pl
d985 5
a989 1
lib/buildcustomize.pl: $& $(mini_obj) write_buildcustomize.pl
d998 1
a998 1
$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT) write_buildcustomize.pl
d1000 20
a1019 1
	$(SHRPENV) $(CC) -o perl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d1069 4
a1072 1
	touch uni.data
d1088 3
a1090 3
pod/perl5203delta.pod: pod/perldelta.pod
	$(RMS) pod/perl5203delta.pod
	$(LNS) perldelta.pod pod/perl5203delta.pod
d1279 1
a1279 1
	$(MINIPERL) make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
d1282 1
a1282 1
	$(MINIPERL) make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
d1285 1
a1285 1
	$(MINIPERL) make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
d1288 1
a1288 1
	$(MINIPERL) make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d1305 1
a1305 1
clean:		_tidy _mopup 
d1315 1
d1336 1
a1336 10
	-rm -f $(DTRACE_H)

# Do not 'make _tidy' directly.
_tidy:
	-cd pod; $(LDLIBPTH) $(MAKE) clean
	-cd utils; $(LDLIBPTH) $(MAKE) clean
	-cd x2p; $(LDLIBPTH) $(MAKE) clean
	-@@for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) $(nonxs_ext) ; do \
	$(MINIPERL) make_ext.pl --target=clean $$x MAKE=$(MAKE) ; \
	done
a1341 1
	-cd x2p; $(LDLIBPTH) $(MAKE) $(CLEAN)
d1344 1
a1344 1
	$(MINIPERL) make_ext.pl --target=$(CLEAN) $$x MAKE=$(MAKE) ; \
d1374 24
a1397 23
	-rmdir lib/version lib/threads lib/inc/latest lib/inc lib/encoding
	-rmdir lib/autodie/exception lib/autodie lib/XS lib/Win32API lib/VMS
	-rmdir lib/Unicode/Collate/Locale lib/Unicode/Collate/CJK
	-rmdir lib/Unicode/Collate lib/Tie/Hash lib/Thread lib/Text
	-rmdir lib/Test/Builder/Tester lib/Test/Builder lib/Test lib/Term
	-rmdir lib/TAP/Parser/YAMLish lib/TAP/Parser/SourceHandler
	-rmdir lib/TAP/Parser/Scheduler lib/TAP/Parser/Result
	-rmdir lib/TAP/Parser/Iterator lib/TAP/Parser lib/TAP/Harness
	-rmdir lib/TAP/Formatter/File lib/TAP/Formatter/Console
	-rmdir lib/TAP/Formatter lib/TAP lib/Sys/Syslog lib/Sys lib/Search
	-rmdir lib/Scalar lib/Pod/Text lib/Pod/Simple lib/Pod/Perldoc
	-rmdir lib/PerlIO/via lib/PerlIO lib/Perl lib/Parse/CPAN lib/Parse
	-rmdir lib/Params lib/Package lib/OpenBSD lib/Net/FTP lib/Module/Load
	-rmdir lib/Module/CoreList lib/Module/Build/Platform lib/Module/Build
	-rmdir lib/Module lib/Memoize lib/Math/BigInt lib/Math/BigFloat
	-rmdir lib/Math lib/MIME lib/Locale/Maketext lib/Locale/Codes
	-rmdir lib/Locale lib/List/Util lib/List lib/JSON/PP lib/JSON lib/IPC
	-rmdir lib/IO/Uncompress/Adapter lib/IO/Uncompress lib/IO/Socket
	-rmdir lib/IO/Compress/Zlib lib/IO/Compress/Zip lib/IO/Compress/Gzip
	-rmdir lib/IO/Compress/Base lib/IO/Compress/Adapter lib/IO/Compress
	-rmdir lib/IO lib/I18N/LangTags lib/I18N lib/Hash/Util lib/Hash
	-rmdir lib/HTTP lib/Filter/Util lib/Filter lib/File/Spec
	-rmdir lib/ExtUtils/Typemaps lib/ExtUtils/ParseXS
d1405 6
a1410 5
	-rmdir lib/Compress/Raw lib/Compress lib/Carp lib/CPAN/Meta
	-rmdir lib/CPAN/LWP lib/CPAN/Kwalify lib/CPAN/HTTP lib/CPAN/FTP
	-rmdir lib/CPAN/Exception lib/CPAN/API lib/CPAN lib/CGI lib/Attribute
	-rmdir lib/Archive/Tar lib/Archive lib/App/Prove/State/Result
	-rmdir lib/App/Prove/State lib/App/Prove lib/App
d1430 9
d1461 2
a1462 2
depend: makedepend
	sh ./makedepend MAKE=$(MAKE) cflags
d1483 1
a1483 2
	$(dynamic_ext) $(TEST_PERL_DLL) runtests x2p/s2p x2p/find2perl \
	$(generated_pods)
d1490 1
a1490 1
	\$(dynamic_ext) \$(TEST_PERL_DLL) runtests x2p/s2p x2p/find2perl \
a1525 2
# --- For Module::Build
	$to cpan/Module-Build/lib/*
a1526 2
# --- For t/x2p/s2p.t
	$to x2p
d1543 1
a1543 1
	$(MINIPERL) make_ext.pl $(dynamic_ext_re) MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
d1584 1
a1584 1
	PERL_VALGRIND=1 VALGRIND='$(VALGRIND)' $(RUN_TESTS) choose
d1591 1
a1591 1
# Can't depend on lib/Config.pm because that might be where miniperl
d1593 1
a1593 1
minitest: $(MINIPERL_EXE)
d1599 9
a1607 2
	- cd t && (rm -f $(PERL_EXE); $(LNS) ../$(MINIPERL_EXE) $(PERL_EXE)) \
		&& $(RUN_PERL) TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t opbasic/*.t op/*.t uni/*.t </dev/tty
d1671 3
a1691 38
    if cd x2p
    then
        rm -f y.tab.c y.tab.h
        case "$osname" in
        posix-bc)
           # we are using two different yaccs in BS2000 Posix!
           byacc a2p.y >/dev/null 2>&1
           ;;
        *) # e.g. os390
           yacc  a2p.y >/dev/null 2>&1
           ;;
        esac
        if cmp -s y.tab.c a2p.c
        then
            rm -f y.tab.c
        else
            echo "a2p.y -> a2p.c" >&2
            mv -f y.tab.c a2p.c
            chmod u+w a2p.c
            sed -e 's/fprintf *( *stderr *,/PerlIO_printf(Perl_debug_log,/g' \
		-e 's|^static void __YY_YACC_MAIN.*BS2000.*|/*static main deleted*/|' \
                -e 's/y\.tab/a2p/g' a2p.c >a2p.tmp && mv a2p.tmp a2p.c
            xxx="$xxx a2p.c"
        fi
        # In case somebody yacc -d:ed the a2p.y.
        if test -f y.tab.h
        then
            if cmp -s y.tab.h a2p.h
            then
                rm -f y.tab.h
            else
                echo "a2p.h -> a2p.h" >&2
                mv -f y.tab.h a2p.h
                xxx="$xxx a2p.h"
            fi
        fi
        cd ..
    fi
@


1.32
log
@Stop linking perl to libpthread

No longer necessary with TIB work

from guenther@@ ok sthen@@
@
text
@d494 1
a494 1
perltoc_pod_prereqs = extra.pods pod/perl5202delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod
d1013 3
a1015 3
pod/perl5202delta.pod: pod/perldelta.pod
	$(RMS) pod/perl5202delta.pod
	$(LNS) perldelta.pod pod/perl5202delta.pod
@


1.31
log
@Apply pre-built unicore patch, remove excess files - perl-5.20.2
@
text
@a731 8
openbsd)
	$spitshell >>$Makefile <<!GROK!THIS!
# When building Perl itself, link with the thread library,
# so that extensions can use thread functions even though Perl
# is not threaded
CCDLFLAGS = $ccdlflags -lpthread
!GROK!THIS!
	;;
@


1.30
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d494 1
a494 1
perltoc_pod_prereqs = extra.pods pod/perl5202delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
@


1.29
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d574 1
d577 4
a580 4
git_version.h: lib/Config_git.pl

lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
	$(MINIPERL) make_patchnum.pl
d732 8
d756 3
a758 3
$(LIBPERL_NONSHR): $(obj)
	$(RMS) $(LIBPERL_NONSHR)
	$(AR) rcu $(LIBPERL_NONSHR) $(obj)
d760 1
a760 1
$(MINIPERL_NONSHR): $(LIBPERL_NONSHR) miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
d844 27
a870 27
$(LIBPERL): $& $(obj) $(DYNALOADER) $(LIBPERLEXPORT)
!NO!SUBS!
	case "$useshrplib" in
	true)
		$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f $@@
	$(LD) -o $@@ $(SHRPLDFLAGS) $(obj) $(DYNALOADER) $(libs)
!NO!SUBS!
		case "$osname" in
		aix)
			$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f libperl$(OBJ_EXT)
	mv $@@ libperl$(OBJ_EXT)
	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
!NO!SUBS!
			;;
		esac
		;;
	*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f $(LIBPERL)
	$(AR) rcu $(LIBPERL) $(obj) $(DYNALOADER)
	@@$(ranlib) $(LIBPERL)
!NO!SUBS!
		;;
	esac
	$spitshell >>$Makefile <<'!NO!SUBS!'
a944 4
	-@@rm -f miniperl.xok
	$(CC) $(CLDFLAGS) -o $(MINIPERL_EXE) \
	    $(mini_obj) $(libs)
	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
d1005 1
a1005 4
	$(MINIPERL) lib/unicore/mktables -C lib/unicore -P pod -maketest -makelist -p
#	Commented out so always runs, mktables looks at far more files than we
#	can in this makefile to decide if needs to run or not
#	touch uni.data
d1268 1
a1268 1
	-rm -f config.arch config.over $(DTRACE_H)
a1274 1
	-rm -f lib/Config_git.pl git_version.h
d1328 1
a1328 1
	-rmdir lib/Params lib/Package lib/Net/FTP lib/Module/Load
@


1.28
log
@Reapply a patch to stop rebuilding libperl with incorrect flags

Help from miod@@ and kettenis@@

OK kettenis@@ millert@@
@
text
@d494 1
a494 1
perltoc_pod_prereqs = extra.pods pod/perl5201delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod
a573 1
# OpenBSD uses pre-generated lib/Config_git.pl and git_version.h files
d576 4
a579 4
#git_version.h: lib/Config_git.pl
#
#lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
#	$(MINIPERL) make_patchnum.pl
a730 8
openbsd)
	$spitshell >>$Makefile <<!GROK!THIS!
# When building Perl itself, link with the thread library,
# so that extensions can use thread functions even though Perl
# is not threaded
CCDLFLAGS = $ccdlflags -lpthread
!GROK!THIS!
	;;
d747 3
a749 3
#$(LIBPERL_NONSHR): $(obj)
#	$(RMS) $(LIBPERL_NONSHR)
#	$(AR) rcu $(LIBPERL_NONSHR) $(obj)
d751 1
a751 1
$(MINIPERL_NONSHR): miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
d835 27
a861 27
#$(LIBPERL): $& $(obj) $(DYNALOADER) $(LIBPERLEXPORT)
#!NO!SUBS!
#	case "$useshrplib" in
#	true)
#		$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f $@@
#	$(LD) -o $@@ $(SHRPLDFLAGS) $(obj) $(DYNALOADER) $(libs)
#!NO!SUBS!
#		case "$osname" in
#		aix)
#			$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f libperl$(OBJ_EXT)
#	mv $@@ libperl$(OBJ_EXT)
#	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
#!NO!SUBS!
#			;;
#		esac
#		;;
#	*)
#		$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f $(LIBPERL)
#	$(AR) rcu $(LIBPERL) $(obj) $(DYNALOADER)
#	@@$(ranlib) $(LIBPERL)
#!NO!SUBS!
#		;;
#	esac
#	$spitshell >>$Makefile <<'!NO!SUBS!'
d936 4
d1000 4
a1003 1
	touch uni.data
d1019 3
a1021 3
pod/perl5201delta.pod: pod/perldelta.pod
	$(RMS) pod/perl5201delta.pod
	$(LNS) perldelta.pod pod/perl5201delta.pod
d1266 1
a1266 1
	-rm -f $(DTRACE_H)
d1273 1
d1327 1
a1327 1
	-rmdir lib/Params lib/Package lib/OpenBSD lib/Net/FTP lib/Module/Load
@


1.27
log
@Regenerate unicore for perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d756 3
a758 3
$(LIBPERL_NONSHR): $(obj)
	$(RMS) $(LIBPERL_NONSHR)
	$(AR) rcu $(LIBPERL_NONSHR) $(obj)
d760 1
a760 1
$(MINIPERL_NONSHR): $(LIBPERL_NONSHR) miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
d844 27
a870 27
$(LIBPERL): $& $(obj) $(DYNALOADER) $(LIBPERLEXPORT)
!NO!SUBS!
	case "$useshrplib" in
	true)
		$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f $@@
	$(LD) -o $@@ $(SHRPLDFLAGS) $(obj) $(DYNALOADER) $(libs)
!NO!SUBS!
		case "$osname" in
		aix)
			$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f libperl$(OBJ_EXT)
	mv $@@ libperl$(OBJ_EXT)
	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
!NO!SUBS!
			;;
		esac
		;;
	*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
	rm -f $(LIBPERL)
	$(AR) rcu $(LIBPERL) $(obj) $(DYNALOADER)
	@@$(ranlib) $(LIBPERL)
!NO!SUBS!
		;;
	esac
	$spitshell >>$Makefile <<'!NO!SUBS!'
@


1.26
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d494 1
a494 1
perltoc_pod_prereqs = extra.pods pod/perl5201delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
@


1.25
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d574 1
d577 4
a580 4
git_version.h: lib/Config_git.pl

lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
	$(MINIPERL) make_patchnum.pl
d732 8
a944 4
	-@@rm -f miniperl.xok
	$(CC) $(CLDFLAGS) -o $(MINIPERL_EXE) \
	    $(mini_obj) $(libs)
	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
d1005 1
a1005 4
	$(MINIPERL) lib/unicore/mktables -C lib/unicore -P pod -maketest -makelist -p
#	Commented out so always runs, mktables looks at far more files than we
#	can in this makefile to decide if needs to run or not
#	touch uni.data
d1268 1
a1268 1
	-rm -f config.arch config.over $(DTRACE_H)
a1274 1
	-rm -f lib/Config_git.pl git_version.h
d1328 1
a1328 1
	-rmdir lib/Params lib/Package lib/Net/FTP lib/Module/Load
@


1.24
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d23 1
a23 10
case $CROSS_NAME in
'')
	Makefile=Makefile
	;;
*)
	# if cross-compilation, the Makefile named accordingly
	Makefile=Makefile-cross-$CROSS_NAME
	. Cross/config-${CROSS_NAME}.sh
	;;
esac
d71 1
a71 1
	netbsd*|freebsd[234]*|openbsd*|dragonfly*)
d296 6
a301 1
RUN = $run
d314 3
a316 1
MINIPERL = \$(LDLIBPTH) \$(RUN) ./miniperl\$(EXE_EXT) -Ilib
d318 10
d330 4
a333 1
RUN_PERL = \$(LDLIBPTH) \$(RUN) ./perl\$(EXE_EXT)
d335 1
a418 2
case $CROSS_NAME in
'')
d422 1
a422 1
CCCMD    = `sh $(shellflags) cflags "optimize='$(OPTIMIZE)'" $@@`
d424 1
a424 1
CCCMDSRC = `sh $(shellflags) cflags "optimize='$(OPTIMIZE)'" $<`
a432 6
	;;
*)
	# if cross-compilation
$spitshell >>$Makefile <<!GROK!THIS!
CROSS_NAME = $CROSS_NAME
CROSS_LIB = xlib/$CROSS_NAME
d434 3
a436 11
CCCMD    = \`sh \$(shellflags) cflags-cross-$CROSS_NAME "optimize='\$(OPTIMIZE)'" \$@@\` -I\$(CROSS_LIB)
CCCMDSRC = \`sh \$(shellflags) cflags-cross-$CROSS_NAME "optimize='\$(OPTIMIZE)'" \$<\` -I\$(CROSS_LIB)
CONFIGPM = xlib/\$(CROSS_NAME)/Config.pm
CONFIGPOD = xlib/\$(CROSS_NAME)/Config.pod
CONFIGH = xconfig.h

xconfig.h: config_h.SH Cross/config-\$(CROSS_NAME).sh
	CONFIG_SH=Cross/config-\$(CROSS_NAME).sh CONFIG_H=xconfig.h \$(SHELL) config_h.SH
	#TODO \$(LDLIBPTH) ./miniperl$(EXE_EXT) -Ilib -MCross=\$(CROSS_NAME) config_h.PL "INST_VER=\$(INST_VER)" "CORE_DIR=\$(CROSS_LIB)" "CONFIG_H=xconfig.h"
	cp xconfig.h \$(CROSS_LIB)/
	cp xconfig.h \$(CROSS_LIB)/config.h
d438 2
a439 3
!GROK!THIS!
	;;
esac
d442 1
a442 1
$spitshell >>$Makefile <<'!NO!SUBS!'
d444 1
a444 1
private = preplibrary $(CONFIGPM) $(CONFIGPOD) lib/ExtUtils/Miniperl.pm git_version.h lib/buildcustomize.pl
d448 4
a451 1
sh = Makefile.SH cflags.SH config_h.SH makedepend.SH myconfig.SH pod/Makefile.SH
d453 2
a454 1
shextract = Makefile cflags config.h makedepend makedir myconfig pod/Makefile
d478 1
a478 1
c4 = perlio.c perlapi.c numeric.c mathoms.c locale.c pp_pack.c pp_sort.c
d487 1
a487 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) mathoms$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT)
d494 1
a494 1
perltoc_pod_prereqs = extra.pods pod/perl5182delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod
a497 2
Icwd = -Idist/Cwd -Idist/Cwd/lib -Idist/Carp/lib

d557 2
a558 1
	$(CCCMD) $(PLDLFLAGS) $*.c
d561 2
a562 1
	$(CCCMDSRC) -E $*.c > $*.i
d565 2
a566 1
	$(CCCMDSRC) -S $*.c
a573 1
# OpenBSD uses pre-generated lib/Config_git.pl and git_version.h files
d576 4
a579 4
#git_version.h: lib/Config_git.pl
#
#lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
#	$(MINIPERL) make_patchnum.pl
d592 1
a592 1
     x2p_deps='$(MINIPERL_EXE) $(CONFIGPM) $(dynamic_ext) FORCE'
d596 1
a596 1
     x2p_deps='$(PERL_EXE) $(CONFIGPM) $(dynamic_ext) FORCE'
d599 1
a599 1
     x2p_deps='$(PERL_EXE) $(CONFIGPM) FORCE'
d604 3
d616 4
a619 1
utilities:	$util_deps
d660 2
a661 1
	\$(CCCMD) \$(PLDLFLAGS) $DPERL_IS_MINIPERL $DPERL_EXTERNAL_GLOB ${file}mini.c
d671 16
a686 2
bitcount.h: generate_uudmap$(HOST_EXE_EXT)
	$(RUN) ./generate_uudmap$(HOST_EXE_EXT) $(generated_headers)
d688 1
a688 1
generate_uudmap$(OBJ_EXT): mg_raw.h
d690 1
d694 14
a707 2
miniperlmain$(OBJ_EXT): miniperlmain.c patchlevel.h
	$(CCCMD) $(PLDLFLAGS) $*.c
a708 2
perlmain.c: $(MINIPERL_EXE) lib/ExtUtils/Miniperl.pm
	$(MINIPERL) -Ilib -MExtUtils::Miniperl -e 'writemain(@@ARGV)' DynaLoader $(static_ext) > perlmain.c
d710 3
a712 2
perlmain$(OBJ_EXT): perlmain.c
	$(CCCMD) $(PLDLFLAGS) $*.c
a730 8
openbsd)
	$spitshell >>$Makefile <<!GROK!THIS!
# When building Perl itself, link with the thread library,
# so that extensions can use thread functions even though Perl
# is not threaded
CCDLFLAGS = $ccdlflags -lpthread
!GROK!THIS!
	;;
d747 3
a749 3
#$(LIBPERL_NONSHR): $(obj)
#	$(RMS) $(LIBPERL_NONSHR)
#	$(AR) rcu $(LIBPERL_NONSHR) $(obj)
d751 1
a751 1
$(MINIPERL_NONSHR): miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
d835 27
a861 27
#$(LIBPERL): $& $(obj) $(DYNALOADER) $(LIBPERLEXPORT)
#!NO!SUBS!
#	case "$useshrplib" in
#	true)
#		$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f $@@
#	$(LD) -o $@@ $(SHRPLDFLAGS) $(obj) $(DYNALOADER) $(libs)
#!NO!SUBS!
#		case "$osname" in
#		aix)
#			$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f libperl$(OBJ_EXT)
#	mv $@@ libperl$(OBJ_EXT)
#	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
#!NO!SUBS!
#			;;
#		esac
#		;;
#	*)
#		$spitshell >>$Makefile <<'!NO!SUBS!'
#	rm -f $(LIBPERL)
#	$(AR) rcu $(LIBPERL) $(obj) $(DYNALOADER)
#	@@$(ranlib) $(LIBPERL)
#!NO!SUBS!
#		;;
#	esac
#	$spitshell >>$Makefile <<'!NO!SUBS!'
d873 9
d887 1
a887 1
$(MINIPERL_EXE): $& $(mini_obj)
d889 2
a890 1
	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d895 4
a898 3
$(MINIPERL_EXE): $& $(mini_obj)
	$(CC) -o $(MINIPERL_EXE) $(mini_obj) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d915 1
a915 1
$(MINIPERL_EXE): $& $(mini_obj)
d919 2
a920 1
	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d924 12
a935 2
		$spitshell >>$Makefile <<'!NO!SUBS!'
$(MINIPERL_EXE): $& $(mini_obj)
d937 1
a937 1
	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o $(MINIPERL_EXE) \
d939 2
a940 1
	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d942 1
d948 1
a948 1
$(PERL_EXE): $& perlmain$(OBJ_EXT) $(static_ext) ext.libs $(PERLEXPORT)
d950 1
a950 104
	$(SHRPENV) $(LDLIBPTH) $(CC) -o perl$(PERL_SUFFIX) $(PERL_PROFILE_LDFLAGS) $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

# Purify/Quantify Perls.

pure$(PERL_EXE): $& perlmain$(OBJ_EXT) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) purify $(CC) -o pureperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

purecov$(PERL_EXE): $& perlmain$(OBJ_EXT) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) purecov $(CC) -o purecovperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

quant$(PERL_EXE): $& perlmain$(OBJ_EXT) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) quantify $(CC) -o quantperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

!NO!SUBS!

case "${osname}${osvers}" in
linux*|darwin*)
	$spitshell >>$Makefile <<'!NO!SUBS!'
# Valgrind perl (currently Linux, Darwin only)

perl.valgrind.config: config.sh
	@@echo "To build perl.valgrind you must Configure -Doptimize=-g -Uusemymalloc, checking..."
	@@$(MAKE) perl.config.dashg
	@@echo "Checking usemymalloc='n' in config.sh..."
	@@grep "^usemymalloc="    config.sh
	@@grep "^usemymalloc='n'" config.sh >/dev/null || exit 1
	@@echo "And of course you have to have valgrind..."
	$(VALGRIND) $(VG_TEST) || exit 1
!NO!SUBS!
	;;
esac	

$spitshell >>$Makefile <<'!NO!SUBS!'

# Third Degree Perl (Tru64 only)

perl.config.dashg:
	@@echo "Checking optimize='-g' in config.sh..."
	@@grep "^optimize=" config.sh
	@@egrep "^optimize='(.*-g.*)'" config.sh >/dev/null || exit 1

perl.third.config: config.sh
	@@echo "To build perl.third you must Configure -Doptimize=-g -Uusemymalloc, checking..."
	@@$(MAKE) perl.config.dashg
	@@echo "Checking usemymalloc='n' in config.sh..."
	@@grep "^usemymalloc="    config.sh
	@@grep "^usemymalloc='n'" config.sh >/dev/null || exit 1

perl.third: /usr/bin/atom perl.third.config perl
	atom -tool third -L. -all -gp -toolargs="-invalid -uninit heap+stack+copy -min 0" perl
	@@echo "Now you may run perl.third and then study perl.3log."

# Pixie Perls (Tru64 and IRIX only)

perl.pixie.config: config.sh
	@@echo "To build perl.pixie you must Configure -Doptimize=-g, checking..."
	@@$(MAKE) perl.config.dashg

perl.pixie.atom: /usr/bin/atom perl
	atom -tool pixie -L. -all -toolargs="-quiet" perl

perl.pixie.irix: perl
	pixie perl

perl.pixie: /usr/bin/pixie perl.pixie.config perl
	if test -x /usr/bin/atom; then \
	  $(MAKE) perl.pixie.atom; \
	else \
	  $(MAKE) perl.pixie.irix; \
	fi
	@@echo "Now you may run perl.pixie and then run pixie."

# Gprof Perl

perl.config.dashpg:
	@@echo "Checking optimize='-pg' in config.sh..."
	@@grep "^optimize="      config.sh
	@@grep "^optimize='.*-pg.*'" config.sh >/dev/null || exit 1

perl.gprof.config: config.sh
	@@echo "To build perl.gprof you must Configure -Doptimize=-pg, checking..."
	@@$(MAKE) perl.config.dashpg

perl.gprof: /usr/bin/gprof perl.gprof.config
	@@-rm -f perl
	$(MAKE) PERL_SUFFIX=.gprof PERL_PROFILE_LDFLAGS=-pg perl
	@@echo "Now you may run perl.gprof and then run gprof perl.gprof."

# Gcov Perl

perl.config.gcov:
	@@echo "To build perl.gcov you must use gcc 3.0 or newer, checking..."
	@@echo "Checking gccversion in config.sh..."
	@@grep "^gccversion="      config.sh
	@@grep "^gccversion='[3-9]\." config.sh >/dev/null || exit 1
	@@echo "To build perl.gcov you must Configure -Dccflags=-fprofile-arcs -ftest-coverage, checking..."
	@@echo "Checking ccflags='-fprofile-arcs -ftest-coverage' in config.sh..."
	@@grep "^ccflags="      config.sh
	@@grep "^ccflags='.*-fprofile-arcs -ftest-coverage.*'" config.sh >/dev/null || exit 1

perl.gcov: perl.config.gcov
	@@-rm -f perl
	$(MAKE) PERL_SUFFIX=.gcov PERL_PROFILE_LDFLAGS='' perl
	@@echo "Now you may run perl.gcov and then run gcov some.c."
d981 1
a981 1
	$(MINIPERL) $(Icwd) mkppport
a996 6
lib/ExtUtils/Miniperl.pm: miniperlmain.c $(MINIPERL_EXE) minimod.pl $(CONFIGPM)
	$(MINIPERL) minimod.pl > lib/ExtUtils/Miniperl.pm

lib/buildcustomize.pl: $(MINIPERL_EXE) write_buildcustomize.pl
	$(MINIPERL) write_buildcustomize.pl >lib/buildcustomize.pl

d1000 4
a1003 2
#	$(MINIPERL) $(Icwd) lib/unicore/mktables -C lib/unicore -P pod -maketest -makelist -p
	touch uni.data
d1005 1
a1005 1
# $(PERL_EXE) and ext because buildtoc uses Text::Wrap uses re
d1009 1
a1009 1
	$(RUN_PERL) -f -Ilib pod/buildtoc -q
d1017 1
a1017 1
	$(MINIPERL) $(Icwd) pod/perlmodlib.PL -q
d1019 3
a1021 3
pod/perl5182delta.pod: pod/perldelta.pod
	$(RMS) pod/perl5182delta.pod
	$(LNS) perldelta.pod pod/perl5182delta.pod
d1033 1
a1033 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d1036 1
a1036 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d1039 1
a1039 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d1044 14
a1057 2
install_strip install-strip:
	$(MAKE) STRIPFLAGS=-s install DESTDIR="$(DESTDIR)"
d1059 6
a1064 2
install install_all install-all:
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) DESTDIR="$(DESTDIR)"
d1066 5
a1070 2
install_verbose install-verbose:
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-V DESTDIR="$(DESTDIR)"
d1072 2
a1073 2
install_silent install-silent:
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-S DESTDIR="$(DESTDIR)"
d1075 5
a1079 2
no_install no-install:
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-n DESTDIR="$(DESTDIR)"
d1081 2
a1082 2
# Set this to an empty string to avoid an attempt of rebuild before install
INSTALL_DEPENDENCE = all
d1084 15
d1101 1
a1101 1
	-@@test ! -s extras.lst || $(MAKE) extras.install
d1118 2
d1121 1
d1182 1
a1182 1
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib Porting/makemeta -y
d1185 1
a1185 1
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib Porting/makemeta -j
d1230 1
a1230 1
	@@eval `$(RUN_PERL) -Ilib -V:$(CONFIGVAR)`; echo $$$(CONFIGVAR)
d1242 2
a1243 1
	-@@rm -f Cross/run-* Cross/to-* Cross/from-*
d1263 1
a1263 4
	-rm -f perl.loadmap miniperl.loadmap perl.prelmap miniperl.prelmap
	-rm -f perl.third lib*.so.perl.third perl.3log t/perl.third t/perl.3log
	-rm -f perl.pixie lib*.so.perl.pixie lib*.so.Addrs
	-rm -f perl.Addrs perl.Counts t/perl.Addrs t/perl.Counts *perl.xok
d1266 1
a1266 1
	-rm -f $(DTRACE_H) runtests
d1273 1
d1291 1
a1291 1
	-for file in `find cpan dist ext -name ppport.h` ; do rm -f $$file; done
a1301 1
	rm -f so_locations $(LIBPERL_NONSHR) $(MINIPERL_NONSHR)
d1303 1
a1303 1
	rm -f $(FIRSTMAKEFILE) $(FIRSTMAKEFILE).old makefile.old
a1310 10
	rm -rf lib/Encode lib/Compress lib/Hash lib/re
	rm -rf lib/TAP lib/Module/Pluggable lib/App
	rm -rf lib/mro
	rm -rf lib/IO/Compress lib/IO/Uncompress
	rm -f lib/ExtUtils/ParseXS/t/XSTest.c
	rm -f lib/ExtUtils/ParseXS/t/XSTest$(OBJ_EXT)
	rm -f lib/ExtUtils/ParseXS/t/XSTest$(DLSUFFIX)
	rm -fr lib/B
	rm -fr lib/CPAN lib/CPANPLUS
	rm -fr lib/ExtUtils/CBuilder
a1312 1
	-rmdir cpan/CPANPLUS-Dist-Build/t/dummy-cpanplus cpan/CPANPLUS/t/dummy-cpanplus cpan/CPANPLUS/t/dummy-localmirror
d1314 36
a1349 26
	-rmdir lib/Archive/Tar lib/Archive lib/Attribute
	-rmdir lib/CGI lib/Carp
	-rmdir lib/Data lib/Devel lib/Digest
	-rmdir lib/ExtUtils/Command lib/ExtUtils/Constant lib/ExtUtils/Liblist lib/ExtUtils/MakeMaker
	-rmdir lib/File/Spec lib/Filter/Util lib/Filter
	-rmdir lib/I18N/LangTags lib/IO/Socket lib/IO lib/IPC
	-rmdir lib/List/Util lib/List
	-rmdir lib/Locale/Maketext lib/Locale
	-rmdir lib/Log/Message lib/Log
	-rmdir lib/Math/Big* lib/Math
	-rmdir lib/Memoize lib/MIME
	-rmdir lib/Module/Build/Platform lib/Module/Build lib/Module/Load lib/Module
	-rmdir lib/Net/FTP lib/Object
	-rmdir lib/Parse/CPAN lib/Parse
	-rmdir lib/PerlIO/via lib/PerlIO
	-rmdir lib/Package lib/Params
	-rmdir lib/Pod/Perldoc lib/Pod/Simple lib/Pod/Text
	-rmdir lib/Sys lib/Scalar/Util lib/Scalar
	-rmdir lib/Term/UI lib/Thread lib/Tie/Hash
	-rmdir lib/Test/Builder/Tester lib/Test/Builder lib/Test
	-rmdir lib/Unicode/Collate
	-rmdir lib/XS/APItest lib/XS
	-rmdir lib/inc/latest lib/inc
	-rmdir lib/autodie/exception lib/autodie lib/encoding lib/threads
	-rm -f lib/ExtUtils/CBuilder/t/libcompilet.dll.a
	-rm -f lib/ExtUtils/ParseXS/t/libXSTest.dll.a
d1377 10
d1388 1
a1388 2
config.h: config_h.SH config.sh
	$(SHELL) config_h.SH
d1392 1
a1392 9
	sh ./makedepend MAKE=$(MAKE)
	cd x2p; $(MAKE) depend

# Cannot postpone this until $firstmakefile is ready ;-)
makedepend: makedepend.SH config.sh
	sh ./makedepend.SH

runtests: runtests.SH config.sh
	sh ./runtests.SH
d1396 1
a1396 5
	utest ucheck test.utf8 check.utf8 test.torture torturetest \
	test.utf16 check.utf16 utest.utf16 ucheck.utf16 \
	test.third check.third utest.third ucheck.third test_notty.third \
	test.deparse test_notty.deparse test_harness test_harness_notty \
	minitest coretest test.taintwarn test-reonly _test
d1400 1
a1400 1
	PERL=./perl $(RUN_TESTS) choose
d1408 1
d1410 2
d1417 60
d1480 4
d1488 12
a1505 23
utest ucheck test.utf8 check.utf8: test_prep
	TEST_ARGS=-utf8 $(RUN_TESTS) choose

coretest: test_prep
	TEST_ARGS=-core $(RUN_TESTS) choose

# Torture testing

test.torture torturetest:	test_prep
	TEST_ARGS=-torture $(RUN_TESTS) choose

# Targets for UTF16 testing:

minitest.utf16: minitest.prep
	- cd t && (rm -f $(PERL_EXE); $(LNS) ../$(MINIPERL_EXE) $(PERL_EXE)) \
		&& $(RUN_PERL) TEST -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t opbasic/*.t op/*.t uni/*.t </dev/tty

test.utf16 check.utf16: test_prep
	TEST_ARGS=-utf16 $(RUN_TESTS) choose

utest.utf16 ucheck.utf16: test_prep
	TEST_ARGS="-utf8 -utf16" $(RUN_TESTS) choose

d1513 6
a1518 3
test_prep.valgrind: test_prep perl.valgrind

test.valgrind check.valgrind:	test_prep perl.valgrind.config
a1519 6

utest.valgrind ucheck.valgrind: test_prep.valgrind perl.valgrind.config
	PERL_VALGRIND=1 TEST_ARGS=-utf8 $(RUN_TESTS) choose

test_notty.valgrind: test_prep.valgrind perl.valgrind.config
	PERL_VALGRIND=1 $(RUN_TESTS) no-tty
d1526 3
a1528 28
# Targets for Third Degree testing.

test_prep.third: test_prep perl.third
	cd t && (rm -f ./perl.third$(EXE_EXT); $(LNS) ../perl.third$(EXE_EXT) perl.third(EXE_EXT))

test.third check.third:	test_prep.third perl.third
	PERL=./perl.third PERL_3LOG=1 $(RUN_TESTS) choose

utest.third ucheck.third: test_prep.third perl.third
	PERL=./perl.third PERL_3LOG=1 TEST_ARGS=-utf8 $(RUN_TESTS) choose

test_notty.third: test_prep.third perl.third
	PERL=./perl.third PERL_3LOG=1 $(RUN_TESTS) choose

# Targets for Deparse testing.

test.deparse:	test_prep
	TEST_ARGS=-deparse $(RUN_TESTS) choose

test_notty.deparse:	test_prep
	TEST_ARGS=-deparse $(RUN_TESTS) no-tty

# Targets to run the test suite with -t

test.taintwarn:	test_prep
	TEST_ARGS=-taintwarn $(RUN_TESTS) choose

minitest.prep:
a1533 4

# Can't depend on lib/Config.pm because that might be where miniperl
# is crashing.
minitest: $(MINIPERL_EXE) minitest.prep
d1562 1
a1562 1
	$(RUN_PERL) -Ilib utils/perlbug -ok -s '(UNINSTALLED)'
d1565 1
a1565 1
	$(RUN_PERL) -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok
d1568 1
a1568 1
	$(RUN_PERL) -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -A
d1571 1
a1571 1
	$(RUN_PERL) -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A
d1574 1
a1574 1
	$(RUN_PERL) -Ilib utils/perlbug -nok -s '(UNINSTALLED)'
d1577 1
a1577 1
	$(RUN_PERL) -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok
d1580 1
a1580 1
	$(RUN_PERL) -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -A
d1583 1
a1583 1
	$(RUN_PERL) -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A
d1585 1
a1585 1
.PHONY: clist hlist shlist
a1592 6
shlist: $(sh)
	echo $(sh) | tr ' ' $(TRNL) >.shlist

Makefile: Makefile.SH ./config.sh
	$(SHELL) Makefile.SH

a1606 6
case `pwd` in
*SH)
    $rm -f ../Makefile
    $ln Makefile ../Makefile
    ;;
esac
@


1.23
log
@Add an explicit Pod-Escapes dependency to Pod-Functions, in addition to the
existing Pod-Simple dependency. Fixes build with -j2 for real.
@
text
@d1 11
d40 1
d52 2
a53 4
	'')
		ldlibpth="LD_LIBRARY_PATH=`pwd`";;
	*)
		ldlibpth="LD_LIBRARY_PATH=`pwd`:${LD_LIBRARY_PATH}";;
d65 1
a65 1
	rhapsody*|darwin*)
d132 7
a138 1
		eval "ldlibpth=\"$ldlibpthname=`pwd`:\$$ldlibpthname\""
d141 1
a141 2
	    # Strip off any trailing :'s
	    ldlibpth=`echo $ldlibpth | sed 's/:*$//'`
a144 5
	case "$ldlibpth" in
	# Protect any spaces
	*" "*) ldlibpth=`echo $ldlibpth|sed 's/ /\\\\ /g'` ;;
	esac

d191 1
a191 1
ext/Pod-Functions/pm_to_blib: cpan/Pod-Escapes/pm_to_blib cpan/Pod-Simple/pm_to_blib pod/perlfunc.pod
d309 1
a309 1
HOST_EXE_EXT = 
d469 1
a469 1
h2 = embed.h form.h gv.h handy.h hv.h keywords.h mg.h op.h opcode.h
d495 1
a495 1
perltoc_pod_prereqs = extra.pods pod/perl5163delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod
d574 1
d577 4
a580 4
git_version.h: lib/Config_git.pl

lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
	$(MINIPERL) make_patchnum.pl
d703 1
a703 1
# is not threaded.
d852 1
a852 1
	aix*|beos*)
d1078 3
a1080 2
pod/perl5163delta.pod: pod/perldelta.pod
	$(LNS) perldelta.pod pod/perl5163delta.pod
d1198 1
a1198 1
regen_meta regen-meta:  META.yml
d1201 4
a1204 1
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib Porting/makemeta
d1231 1
a1231 1
d_dummy $(dynamic_ext):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary makeppport $(DYNALOADER) FORCE $(PERLEXPORT)
d1467 1
a1467 1
		&& $(RUN_PERL) TEST -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
d1536 1
a1536 1
		&& $(RUN_PERL) TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t op/*.t uni/*.t </dev/tty
a1667 3
    ;;
vmesa)
    # Do nothing in VM/ESA.
@


1.22
log
@merge 5.16.3 / link main binary with pthread
@
text
@d181 1
a181 1
ext/Pod-Functions/pm_to_blib: cpan/Pod-Simple/pm_to_blib pod/perlfunc.pod
@


1.21
log
@pregenerate unicode files; mktables uses too much memory for some platforms
@
text
@a22 14
# H.Merijn Brand [17 Feb 2004]
# This comment is just to ensure that Configure will find variables that
# are removed/replaced in patches on blead, but are still needed in the
# 5.8.x, 5.6.x and 5.005.x maintainance tracks.
# metaconfig -m will scan all .SH files on this level (not deeper), and
# not in x2p and other subfolders. This file is as good as any .SH
# patch   references
# #22227 $baserev
# #22302 $yacc $byacc

# H.Merijn Brand [30 Oct 2004]
# Mentioned for the same reason for future reference
# #23434 $d_strlcat $d_strlcpy

d167 10
d180 3
a182 1
extra_dep=''
a190 2
	Encode|POSIX|SDBM_File) extra_dep="$extra_dep
$this_target: lib/auto/Cwd/Cwd.$dlext" ;;
d192 1
a192 1
$this_target: lib/auto/List/Util/Util.$dlext" ;;
a194 2
	Text/ParseWords) extra_dep="$extra_dep
$this_target: lib/auto/Scalar/Util.$dlext" ;;
d224 1
d229 2
a230 1
		&& rm -f perldtrace.tmp && dtrace_o='perldtrace$(OBJ_EXT)'
d336 5
d343 2
a344 1
VALGRIND=valgrind
d346 5
d354 1
d407 1
a407 1
CONFIGPM = $(CONFIGPM_FROM_CONFIG_SH)
d439 1
a439 1
private = preplibrary $(CONFIGPM) $(CONFIGPOD) lib/ExtUtils/Miniperl.pm
d443 1
a443 8
sh = Makefile.SH cflags.SH config_h.SH makeaperl.SH makedepend.SH \
	myconfig.SH writemain.SH pod/Makefile.SH

shextract = Makefile cflags config.h makeaperl makedepend \
	makedir myconfig writemain pod/Makefile

# Files to be built with variable substitution after miniperl is
# available.  Dependencies handled manually below (for now).
d445 1
a445 2
pl = pod/pod2html.PL pod/pod2latex.PL pod/pod2man.PL pod/pod2text.PL \
	pod/pod2usage.PL pod/podchecker.PL pod/podselect.PL
d447 1
a447 4
plextract = pod/pod2html pod/pod2latex pod/pod2man pod/pod2text \
	pod/pod2usage pod/podchecker pod/podselect

addedbyconf = UU $(shextract) $(plextract) pstruct
d452 1
d462 3
a464 2
h5 = utf8.h warnings.h mydtrace.h
h = $(h1) $(h2) $(h3) $(h4) $(h5)
d468 1
a468 1
c3 = taint.c toke.c util.c deb.c run.c universal.c pad.c globals.c
d472 1
a472 1
c = $(c1) $(c2) $(c3) $(c4) $(c5) miniperlmain.c perlmain.c opmini.c perlmini.c
d475 2
a476 1
obj1 = $(madlyobj) $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT) mro$(OBJ_EXT)
d480 2
a481 1
mini_obj =  $(obj1) $(obj2) $(obj3) $(ARCHOBJS) $(DTRACE_O)
d485 1
a485 1
perltoc_pod_prereqs = extra.pods pod/perlapi.pod pod/perldelta.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
d487 1
d489 1
a489 1
Icwd = -Icpan/Cwd -Icpan/Cwd/lib
d558 1
a558 1
all: $(FIRSTMAKEFILE) $(MINIPERL_EXE) miniperl $(generated_pods) $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
a563 1
# OpenBSD uses pre-generated lib/Config_git.pl and git_version.h files
d566 4
a569 4
#git_version.h: lib/Config_git.pl
#
#lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
#	$(MINIPERL) make_patchnum.pl
d574 1
a574 2
translators:	$(MINIPERL_EXE) $(CONFIGPM) $(dynamic_ext) FORCE
	@@echo " "; echo "	Making x2p stuff"; cd x2p; $(LDLIBPTH) $(MAKE) all
d576 26
a601 2
utilities:	$(MINIPERL_EXE) $(CONFIGPM) $(plextract) FORCE
	@@echo " "; echo "	Making utilities"; cd utils; $(LDLIBPTH) $(MAKE) all
d603 6
a618 1
$spitshell >>$Makefile <<!GROK!THIS!
d620 5
a624 1
# We do a copy of the op.c instead of a symlink because gcc gets huffy
d628 12
a639 3
opmini.c: op.c
	\$(RMS) opmini.c
	\$(CPS) op.c opmini.c
d641 1
a641 2
opmini\$(OBJ_EXT): opmini.c
	\$(CCCMD) \$(PLDLFLAGS) $DPERL_EXTERNAL_GLOB opmini.c
d643 6
a648 3
perlmini.c: perl.c
	\$(RMS) perlmini.c
	\$(CPS) perl.c perlmini.c
d650 1
a650 2
perlmini\$(OBJ_EXT): perlmini.c
	\$(CCCMD) \$(PLDLFLAGS) $DPERL_IS_MINIPERL perlmini.c
d652 1
a652 1
globals\$(OBJ_EXT): uudmap.h bitcount.h
d654 2
a655 1
uudmap.h: bitcount.h
d657 1
a657 2
bitcount.h: generate_uudmap\$(HOST_EXE_EXT)
	\$(RUN) ./generate_uudmap\$(HOST_EXE_EXT) uudmap.h bitcount.h
d659 2
a660 2
generate_uudmap\$(HOST_EXE_EXT): generate_uudmap\$(OBJ_EXT)
	\$(CC) -o generate_uudmap\$(EXE_EXT) \$(LDFLAGS) generate_uudmap\$(OBJ_EXT) \$(libs)
a661 2
!GROK!THIS!
$spitshell >>$Makefile <<'!NO!SUBS!'
d665 2
a666 2
perlmain.c: miniperlmain.c config.sh $(FIRSTMAKEFILE)
	sh writemain $(DYNALOADER) $(static_ext) > perlmain.c
d688 8
d716 1
a716 1
$(MINIPERL_NONSHR): $(LIBPERL_NONSHR) miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
d737 2
a738 2
perl.exp: $(MINIPERLEXP) makedef.pl config.sh $(SYM) $(SYMH)
	./$(MINIPERLEXP) makedef.pl PLATFORM=aix CC_FLAGS="$(OPTIMIZE)" | sort -u | sort -f > perl.exp
d746 1
a746 1
perl5.def: $(MINIPERLEXP) makedef.pl config.sh $(SYM) $(SYMH) miniperl.map
d776 1
d778 3
a780 1
	$(DTRACE) -h -s perldtrace.d -o $(DTRACE_H)
d790 1
a790 1
$(DTRACE_O): perldtrace.d
d793 3
d843 2
a844 4
$(MINIPERL_EXE): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
	$(CC) -o $(MINIPERL_EXE) $(CLDFLAGS) \
	    $(mini_obj) \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
d850 2
a851 3
$(MINIPERL_EXE): $& miniperlmain$(OBJ_EXT) $(mini_obj) perlmini$(OBJ_EXT) opmini$(OBJ_EXT)
	$(CC) -o $(MINIPERL_EXE) $(mini_obj) \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
d869 1
a869 1
$(MINIPERL_EXE): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
d872 1
a872 2
	    $(mini_obj) \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
d878 1
a878 1
$(MINIPERL_EXE): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
d881 1
a881 2
	    $(mini_obj) \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
d889 1
a889 1
$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d895 1
a895 1
pure$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d898 1
a898 1
purecov$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d901 1
a901 1
quant$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d904 6
a909 1
# Valgrind perl (currently Linux only)
d918 6
a923 1
	$(VALGRIND) ./perl -e 1 2>/dev/null || exit 1
d1034 1
a1034 1
preplibrary: $(MINIPERL_EXE) $(CONFIGPM) lib/re.pm $(PREPLIBRARY_LIBPERL)
d1044 2
a1045 10
lib/re.pm: ext/re/re.pm
	@@-rm -f $@@
	cp ext/re/re.pm lib/re.pm

$(plextract):	$(MINIPERL_EXE) $(CONFIGPM) x2p/s2p $(dynamic_ext)
	@@-rm -f $@@
	$(MINIPERL) $@@.PL

x2p/s2p: $(MINIPERL_EXE) $(CONFIGPM) $(dynamic_ext) x2p/s2p.PL
	cd x2p; $(LDLIBPTH) $(MAKE) s2p
d1057 1
a1057 1
	$(RUN_PERL) -f -Ilib pod/buildtoc --build-toc -q
d1067 2
a1068 2
pod/perldelta.pod: pod/perl5122delta.pod
	$(LNS) perl5122delta.pod pod/perldelta.pod
d1091 1
a1091 4
META.yml:	Porting/makemeta Porting/Maintainers.pl Porting/Maintainers.pm
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib Porting/makemeta

install-strip:
d1094 1
a1094 1
install install-all:
d1097 1
a1097 1
install-verbose:
d1100 1
a1100 1
install-silent:
d1103 1
a1103 1
no-install:
a1125 1
      --libpods=perlfunc:perlguts:perlvar:perlrun:perlop \
d1137 1
a1137 1
run_byacc:
d1141 1
a1141 1
regen_perly:
d1153 1
a1153 3
# No compat3.sym here since and including the 5.004_50.
# No interp.sym since 5.005_03.
SYM  = global.sym globvar.sym perlio.sym pp.sym
d1160 2
a1161 5
#	embed.pl:	proto.h embed.h embedvar.h global.sym
#			perlapi.h perlapi.c 
# [* embed.pl needs pp.sym generated by opcode.pl! *]
#	keywords.pl:	keywords.h
#	opcode.pl:	opcode.h opnames.h pp_proto.h pp.sym
d1164 1
d1172 3
a1174 4
AUTOGEN_FILES = keywords.h opcode.h opnames.h pp_proto.h pp.sym proto.h \
		embed.h embedvar.h global.sym \
		perlapi.h perlapi.c regnodes.h \
		warnings.h lib/warnings.pm
d1180 1
d1182 1
a1182 1
regen_headers:	FORCE
d1184 6
d1191 2
a1192 1
regen_all: regen
d1213 1
a1213 1
$(DYNALOADER):	$(MINIPERL_EXE) preplibrary FORCE $(nonxs_ext)
d1216 1
a1216 1
d_dummy $(dynamic_ext):	$(MINIPERL_EXE) preplibrary makeppport $(DYNALOADER) FORCE $(PERLEXPORT)
d1219 1
a1219 1
s_dummy $(static_ext):	$(MINIPERL_EXE) preplibrary makeppport $(DYNALOADER) FORCE
d1222 1
a1222 1
n_dummy $(nonxs_ext):	$(MINIPERL_EXE) preplibrary FORCE
d1260 1
a1260 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c perlmini.c uudmap.h generate_uudmap$(EXE_EXT) bitcount.h
d1264 1
a1264 1
	-rm -f perl.exp ext.libs $(generated_pods) uni.data opmini.o perlmini.o
a1271 1
	-rm -f opcode.h-old opnames.h-old pp.sym-old pp_proto.h-old
d1305 2
a1306 1
	rm -f t/misctmp* t/forktmp* t/tmp* t/c t/$(PERL_EXE) t/rantests
d1316 1
a1316 1
	rm -f preload lib/re.pm
d1327 2
d1332 1
a1332 1
	-rmdir lib/CGI
d1349 1
a1349 1
	-rmdir lib/Term/UI lib/Thread
a1387 1
# When done, touch perlmain.c so that it doesn't get remade each time.
a1390 1
	- test -s perlmain.c && touch perlmain.c
d1419 3
a1421 1
test_prep: test_prep_pre $(MINIPERL_EXE) $(unidatafiles) $(PERL_EXE) $(dynamic_ext) $(TEST_PERL_DLL) runtests
d1431 1
a1431 1
test_tty: test_prep
d1434 1
a1434 1
test_notty: test_prep
a1442 6
test-prep:	test_prep

test-tty:	test_tty

test-notty:	test_notty

d1452 1
a1452 1
		&& $(RUN_PERL) TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
d1460 5
d1477 5
d1519 1
a1519 1
minitest: $(MINIPERL_EXE) lib/re.pm minitest.prep
d1521 1
a1521 1
		&& $(RUN_PERL) TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t op/*.t uni/*.t </dev/tty
d1525 1
a1525 1
test_harness: test_prep
d1531 1
a1531 1
test-reonly: test_prep_reonly
d1537 2
a1538 2
test_porting: test_prep
	cd t && $(RUN_PERL) harness porting/*.t
d1571 1
a1571 1
.PHONY: clist hlist shlist pllist
a1581 3
pllist: $(pl)
	echo $(pl) | tr ' ' $(TRNL) >.pllist

d1589 1
a1589 18
.PHONY: elc
elc:	emacs/cperl-mode.elc

emacs/cperl-mode.elc: emacs/cperl-mode.el
	-cd emacs; emacs -batch -q -no-site-file -f batch-byte-compile cperl-mode.el

.PHONY: etags ctags tags

etags:	TAGS

TAGS: emacs/cperl-mode.elc
	sh emacs/ptags

# Let's hope make will not go into an infinite loop on case-unsensitive systems
# This may also fail if . is in the head of the path, since perl will
# require -Ilib
tags:	TAGS
	perl emacs/e2ctags.pl TAGS > tags
@


1.20
log
@merge in perl 5.12.2 plus local changes
@
text
@d998 2
a999 4
	$(MINIPERL) $(Icwd) lib/unicore/mktables -C lib/unicore -P pod -maketest -makelist -p
#	Commented out so always runs, mktables looks at far more files than we
#	can in this makefile to decide if needs to run or not
#	touch uni.data
@


1.19
log
@We have a copy of git_version.h in src so that we can build libperl
with out own rules but apparently this causes problems after
git_version.h is generated in the obj dir.  This will only ever be
a stub as we build from a release, not a git checkout.  Add a
pre-generated lib/Config_git.pl and prevent git_version.h and
Config_git.pl from being removed by the clean target.
Appears to fix parallel make issues.  OK oga@@
@
text
@a0 1
#! /bin/sh
a42 5
case "$d_dosuid" in
*define*) suidperl='suidperl' ;;
*) suidperl='';;
esac

d183 1
d193 2
d199 2
d221 5
a225 1
    nonxs_list="$nonxs_list ext/$p/pm_to_blib"
d309 12
a320 1
#
d322 1
d330 1
a330 1
public = perl\$(EXE_EXT) $suidperl utilities translators
d436 1
a436 1
	makedir.SH myconfig.SH writemain.SH pod/Makefile.SH
a446 1
# lib/lib.pm is not listed here because it has a rule of its own.
d450 1
a450 1
addedbyconf = UU $(shextract) $(plextract) lib/lib.pm pstruct
d453 3
a455 3
unidatafiles = lib/unicore/Canonical.pl lib/unicore/Exact.pl \
	lib/unicore/Properties lib/unicore/Decomposition.pl \
	lib/unicore/CombiningClass.pl lib/unicore/Name.pl lib/unicore/PVA.pl
d469 1
a469 1
c3 = taint.c toke.c util.c deb.c run.c universal.c xsutils.c pad.c globals.c
d478 1
a478 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) xsutils$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) mathoms$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT)
d480 1
a480 1
mini_obj =  $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
d484 1
a484 1
perltoc_pod_prereqs = extra.pods pod/perlapi.pod pod/perldelta.pod pod/perlintern.pod pod/perlmodlib.pod
d487 2
d556 1
a556 1
all: $(FIRSTMAKEFILE) miniperl$(EXE_EXT) miniperl $(generated_pods) $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
a559 9
sperl$(OBJ_EXT): perl.c $(h)
	$(RMS) sperl.c
	$(LNS) perl.c sperl.c
	$(CCCMD) -DIAMSUID sperl.c
	$(RMS) sperl.c

sperl.i: perl.c $(h)
	$(CCCMDSRC) -DIAMSUID -E perl.c > sperl.i

d562 7
a568 3
# We use pre-generated lib/Config_git.pl and git_version.h files
#lib/Config_git.pl git_version.h: miniperl$(EXE_EXT) make_patchnum.pl
#	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_patchnum.pl
a571 1
sperl$(OBJ_EXT): git_version.h
d573 1
a573 1
translators:	miniperl$(EXE_EXT) $(CONFIGPM) FORCE
d576 1
a576 1
utilities:	miniperl$(EXE_EXT) $(CONFIGPM) $(plextract) lib/lib.pm FORCE
d609 3
a611 1
globals\$(OBJ_EXT): uudmap.h
d613 2
a614 2
uudmap.h: generate_uudmap\$(HOST_EXE_EXT)
	\$(RUN) ./generate_uudmap\$(HOST_EXE_EXT) >uudmap.h
d680 1
a680 1
MINIPERLEXP		= miniperl$(EXE_EXT)
d788 2
a789 2
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
	$(CC) -o miniperl$(EXE_EXT) $(CLDFLAGS) \
d797 2
a798 2
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) perlmini$(OBJ_EXT) opmini$(OBJ_EXT)
	$(CC) -o miniperl$(EXE_EXT) $(mini_obj) \
d817 1
a817 1
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
d819 1
a819 1
	$(CC) $(CLDFLAGS) $(NAMESPACEFLAGS) -o miniperl$(EXE_EXT) \
d827 1
a827 1
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
d829 1
a829 1
	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o miniperl$(EXE_EXT) \
d839 1
a839 1
perl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d845 1
a845 1
pureperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d848 1
a848 1
purecovperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d851 1
a851 1
quantperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
a943 20
# This version, if specified in Configure, does ONLY those scripts which need
# set-id emulation.  Suidperl must be setuid root.  It contains the "taint"
# checks as well as the special code to validate that the script in question
# has been invoked correctly.

!NO!SUBS!

case "${osname}" in
aix*)
$spitshell >>$Makefile <<'!NO!SUBS!'
suidperl$(EXE_EXT): $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) $(CC) -o suidperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(static_ext) $(LLIBPERL_NONSHR) $(LLIBPERL) `cat ext.libs` $(libs)

!NO!SUBS!
;;
*)
$spitshell >>$Makefile <<'!NO!SUBS!'
suidperl$(EXE_EXT): $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) $(CC) -o suidperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

a944 2
;;
esac
d954 1
a954 1
makeppport: miniperl\$(EXE_EXT) \$(CONFIGPM)
d956 1
a956 1
	(cd ext/Devel-PPPort && `pwd`/run.sh ../../miniperl$(EXE_EXT) -I../../lib \$\$f); \
d964 2
a965 2
makeppport: miniperl$(EXE_EXT) $(CONFIGPM)
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib mkppport
a972 4
# We have to call our ./makedir because Ultrix 4.3 make can't handle the line
#	test -d lib/auto || mkdir lib/auto
# We need to autosplit in two steps because VOS can't handle so many args
#
d974 1
a974 5
preplibrary: miniperl$(EXE_EXT) $(CONFIGPM) lib/lib.pm $(PREPLIBRARY_LIBPERL)
	@@sh ./makedir lib/auto
	@@echo "	AutoSplitting perl library"
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib -MAutoSplit -MFile::Find -e 'find ({no_chdir=>1, wanted => sub {autosplit_lib_modules($$_) if /\.pm$$/}}, "lib")'
	$(MAKE) lib/re.pm
d976 1
a976 2
$(CONFIGPM_FROM_CONFIG_SH) $(CONFIGPOD): config.sh miniperl$(EXE_EXT) configpm Porting/Glossary lib/Config_git.pl
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib configpm
d978 5
a982 2
lib/ExtUtils/Miniperl.pm: miniperlmain.c miniperl$(EXE_EXT) minimod.pl $(CONFIGPM)
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) minimod.pl > lib/ExtUtils/Miniperl.pm
d988 1
a988 1
$(plextract):	miniperl$(EXE_EXT) $(CONFIGPM) x2p/s2p
d990 1
a990 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -I"`pwd`/lib" $@@.PL
d992 1
a992 1
x2p/s2p: miniperl$(EXE_EXT) $(CONFIGPM) x2p/s2p.PL
d995 1
a995 5
lib/lib.pm:	miniperl$(EXE_EXT) $(CONFIGPM)
	@@-rm -f $@@
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib lib/lib_pm.PL

unidatafiles $(unidatafiles): uni.data
d997 5
a1001 3
uni.data: miniperl$(EXE_EXT) $(CONFIGPM) lib/unicore/mktables
	cd lib/unicore && $(LDLIBPTH) $(RUN) ../../miniperl$(EXE_EXT) -I../../lib mktables -w
	touch uni.data
d1003 1
a1003 1
# perl$(EXE_EXT) and ext because buildtoc uses Text::Wrap uses re
d1006 2
a1007 2
pod/perltoc.pod: $(perltoc_pod_prereqs) perl$(EXE_EXT) $(ext) pod/buildtoc
	$(LDLIBPTH) $(RUN) ./perl$(EXE_EXT) -Ilib pod/buildtoc --build-toc -q
d1009 1
a1009 2
pod/perlapi.pod pod/perlintern.pod: miniperl$(EXE_EXT) autodoc.pl embed.fnc
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib autodoc.pl
d1011 2
a1012 2
pod/perlmodlib.pod: miniperl$(EXE_EXT) pod/perlmodlib.PL MANIFEST
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib pod/perlmodlib.PL -q
d1014 2
a1015 2
pod/perldelta.pod: pod/perl5101delta.pod
	$(LNS) perl5101delta.pod pod/perldelta.pod
d1017 4
a1020 1
extra.pods: miniperl$(EXE_EXT)
d1029 2
a1030 2
extras.make: perl$(EXE_EXT)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d1032 2
a1033 2
extras.test: perl$(EXE_EXT)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d1035 2
a1036 2
extras.install: perl$(EXE_EXT)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d1042 1
a1042 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib Porting/makemeta
d1063 1
a1063 1
	$(LDLIBPTH) $(RUN) ./perl installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
d1067 1
a1067 1
	$(LDLIBPTH) $(RUN) ./perl installman --destdir=$(DESTDIR) $(INSTALLFLAGS)
d1073 1
a1073 1
	$(LDLIBPTH) $(RUN) ./perl installhtml   \
d1080 1
a1080 1
      --ignore=Porting/Maintainers.pm,Porting/patching.pod,Porting/pumpkin.pod,Porting/repository.pod \
d1164 2
a1165 2
$(DYNALOADER):	miniperl$(EXE_EXT) preplibrary FORCE
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
d1167 2
a1168 2
d_dummy $(dynamic_ext):	miniperl$(EXE_EXT) preplibrary makeppport $(DYNALOADER) FORCE
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
d1170 2
a1171 2
s_dummy $(static_ext):	miniperl$(EXE_EXT) preplibrary makeppport $(DYNALOADER) FORCE
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
d1173 2
a1174 2
n_dummy $(nonxs_ext):	miniperl$(EXE_EXT) preplibrary FORCE
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d1185 1
a1185 1
	@@eval `$(LDLIBPTH) $(RUN) ./perl -Ilib -V:$(CONFIGVAR)`; echo $$$(CONFIGVAR)
d1189 1
a1189 2
	distclean veryclean _verycleaner \
	cleanup_unpacked_files unpack_files
d1191 1
a1191 1
clean:		cleanup_unpacked_files _tidy _mopup 
d1193 1
a1193 1
realclean:	cleanup_unpacked_files _realcleaner _mopup
a1199 1
	rm -f ext/Test-Harness/t/ext/Test-Harness/t/source_tests/harness
d1201 1
a1201 1
clobber:	cleanup_unpacked_files _realcleaner _mopup _clobber
d1206 1
a1206 1
veryclean:	cleanup_unpacked_files _verycleaner _mopup _clobber
d1211 1
a1211 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c perlmini.c uudmap.h generate_uudmap$(EXE_EXT)
d1222 1
a1222 1
	-rm -f perl$(EXE_EXT) suidperl$(EXE_EXT) miniperl$(EXE_EXT) $(LIBPERL) libperl.* microperl
d1224 1
a1224 1
	-rm -f $(DTRACE_H)
d1232 1
a1232 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl --target=clean $$x MAKE=$(MAKE) ; \
d1240 1
a1240 1
	-@@if test -f miniperl$(EXE_EXT) ; then \
d1242 1
a1242 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl --target=$(CLEAN) $$x MAKE=$(MAKE) ; \
d1248 4
a1251 1
	-@@test ! -f ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib mkppport --clean
d1257 1
a1257 1
	rm -f t/misctmp* t/forktmp* t/tmp* t/c t/perl$(EXE_EXT) t/rantests
d1276 28
a1303 6
	-rmdir lib/Data
	-rmdir lib/Filter/Util lib/IO/Socket
	-rmdir lib/List lib/MIME lib/Scalar lib/Sys
	-rmdir lib/threads lib/XS
	-rmdir lib/CPANPLUS/Dist/Build/t/dummy-*
	-rmdir lib/CPANPLUS/t/dummy-cpanplus lib/CPANPLUS/t/dummy-localmirror
d1308 1
a1308 1
	@@$(LDLIBPTH) $(MAKE) _cleaner1 CLEAN=realclean
d1348 5
a1352 2
.PHONY: test check test_prep test_prep_nodll test_prep_pre _test_prep \
	test_tty test-tty _test_tty test_notty test-notty _test_notty \
d1357 5
a1361 1
	minitest coretest test.taintwarn test-reonly
a1365 5
TESTFILE=TEST

_test_prep: unpack_files
	cd t && (rm -f $(PERL)$(EXE_EXT); $(LNS) ../$(PERL)$(EXE_EXT) $(PERL)$(EXE_EXT))

d1370 2
a1371 8
test_prep: test_prep_pre miniperl$(EXE_EXT) $(unidatafiles) perl$(EXE_EXT) $(dynamic_ext) $(TEST_PERL_DLL)
	PERL=./perl $(MAKE) _test_prep

_test_tty:
	cd t && $(PERL_DEBUG) $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS) $(TEST_FILES) </dev/tty

_test_notty:
	cd t && $(PERL_DEBUG) PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS) $(TEST_FILES)
d1373 3
a1375 15
unpack_files:
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib uupacktool.pl -u -m

cleanup_unpacked_files:
	-@@test ! -f ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib uupacktool.pl -c

# The second branch is for testing without a tty or controlling terminal,
# see t/op/stat.t
_test:
	if (true </dev/tty) >/dev/null 2>&1; then \
	  $(MAKE) TEST_ARGS='$(TEST_ARGS)' TESTFILE=$(TESTFILE) _test_tty   ; \
	else \
	  $(MAKE) TEST_ARGS='$(TEST_ARGS)' TESTFILE=$(TESTFILE) _test_notty ; \
	fi
	@@echo "Ran tests" > t/rantests
d1378 1
a1378 1
	PERL=./perl $(MAKE) _test
d1381 1
a1381 1
	PERL=./perl $(MAKE) _test_tty
d1384 1
a1384 1
	PERL=./perl $(MAKE) _test_notty
d1387 1
a1387 1
	PERL=./perl TEST_ARGS=-utf8 $(MAKE) _test
d1390 1
a1390 1
	PERL=./perl TEST_ARGS=-core $(MAKE) _test
d1401 1
a1401 1
	PERL=./perl TEST_ARGS=-torture $(MAKE) _test
d1406 2
a1407 2
	- cd t && (rm -f perl$(EXE_EXT); $(LNS) ../miniperl$(EXE_EXT) perl$(EXE_EXT)) \
		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
d1410 1
a1410 1
	PERL=./perl $(MAKE) TEST_ARGS=-utf16 _test
d1413 1
a1413 1
	PERL=./perl $(MAKE) TEST_ARGS="-utf8 -utf16" _test
a1417 1
	PERL=./perl $(MAKE) _test_prep
d1420 1
a1420 1
	PERL=./perl PERL_DEBUG=PERL_VALGRIND=1 VALGRIND='$(VALGRIND)' $(MAKE) _test
d1423 1
a1423 1
	PERL=./perl PERL_DEBUG=PERL_VALGRIND=1 TEST_ARGS=-utf8 $(MAKE) _test
d1426 1
a1426 1
	PERL=./perl $(MAKE) PERL_DEBUG=PERL_VALGRIND=1 _test_notty
d1431 1
a1431 1
	PERL=./perl.third $(MAKE) _test_prep
d1434 1
a1434 1
	PERL=./perl.third PERL_DEBUG=PERL_3LOG=1 $(MAKE) _test
d1437 1
a1437 1
	PERL=./perl.third PERL_DEBUG=PERL_3LOG=1 TEST_ARGS=-utf8 $(MAKE) _test
d1440 1
a1440 1
	PERL=./perl.third $(MAKE) PERL_DEBUG=PERL_3LOG=1 _test_notty
d1445 1
a1445 1
	PERL=./perl TEST_ARGS=-deparse $(MAKE) _test
d1448 1
a1448 1
	PERL=./perl TEST_ARGS=-deparse $(MAKE) _test_notty
d1453 1
a1453 1
	PERL=./perl TEST_ARGS=-taintwarn $(MAKE) _test
d1456 1
a1456 2
	-@@test -f lib/lib.pm && test -f lib/Config.pm || \
	  $(MAKE) lib/Config.pm lib/lib.pm $(unidatafiles)
d1459 1
a1459 1
	@@echo "to build lib/Config.pm, lib/lib.pm or the Unicode data files."
d1464 3
a1466 3
minitest: miniperl$(EXE_EXT) lib/re.pm minitest.prep
	- cd t && (rm -f perl$(EXE_EXT); $(LNS) ../miniperl$(EXE_EXT) perl$(EXE_EXT)) \
		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
d1471 1
a1471 1
	PERL=./perl $(MAKE) TESTFILE=harness _test
d1474 7
a1480 1
	PERL=./perl HARNESS_NOTTY=1 $(MAKE) TESTFILE=harness _test
d1482 2
a1483 2
test-reonly: test_prep
	PERL=./perl TEST_ARGS='-re \\bpat\\b \\breg \\bre\b \\bsubst \\brxcode' $(MAKE) TESTFILE=harness _test
d1493 1
a1493 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)'
d1496 1
a1496 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok
d1499 1
a1499 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -A
d1502 1
a1502 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A
d1505 1
a1505 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)'
d1508 1
a1508 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok
d1511 1
a1511 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -A
d1514 1
a1514 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A
@


1.18
log
@When cleaning, remove generated file and avoid removing some files that
are checked in.
@
text
@d384 1
a384 1
CONFIGPM = $(CONFIGPM_FROM_CONFIG_SH) lib/Config_git.pl
d416 1
a416 1
private = preplibrary $(CONFIGPM) $(CONFIGPOD) lib/ExtUtils/Miniperl.pm git_version.h
d555 3
a557 2
lib/Config_git.pl git_version.h: miniperl$(EXE_EXT) make_patchnum.pl
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_patchnum.pl
a1248 1
	-rm -f lib/Config_git.pl
@


1.17
log
@Merge in perl 5.10.1
@
text
@d1241 1
a1241 1
	-rm -f config.arch config.over $(DTRACE_H)
d1248 1
a1248 1
	-rm -f lib/Config_git.pl git_version.h
@


1.16
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d13 11
d50 1
d54 1
d67 1
a67 1
	static_target='static_pic'
d84 2
a85 1
		linklibperl="-lperl"
d98 12
a109 3
		shrpldflags="-H512 -T512 -bhalt:4 -bM:SRE -bE:perl.exp"
		case "$osvers" in
		3*)	shrpldflags="$shrpldflags -e _nostart"
d111 11
a121 1
		*)	shrpldflags="$shrpldflags -bnoentry"
a123 2
	        shrpldflags="$shrpldflags $ldflags $perllibs $cryptlib"
		linklibperl="-L $archlibexp/CORE -L `pwd | sed 's/\/UU$//'` -lperl"
d183 1
a183 1
	static_target='static'
d198 1
a198 1
	Math/BigInt/FastCalc) extra_dep="$extra_dep
d209 8
d221 2
a222 2
    base=`echo "$f" | sed 's/.*\///'`
    nonxs_list="$nonxs_list ext/$f/pm_to_blib"
d225 13
a237 3
echo "Extracting Makefile (with variable substitutions)"
$spitshell >Makefile <<!GROK!THIS!
# Makefile.SH
d281 1
d288 2
a289 2
# for GNU cc).  This is handled by ext/util/make_ext.
STATIC = $static_target
d298 9
a324 7
# These variables may need to be manually set for non-Unix systems.
AR = $full_ar
EXE_EXT = $_exe
LIB_EXT = $_a
OBJ_EXT = $_o
PATH_SEP = $p_

d329 4
d360 1
a360 1
$spitshell >>Makefile <<EOF
d374 2
d377 1
a377 1
$spitshell >>Makefile <<'!NO!SUBS!'
d383 34
a416 2
CONFIGPM = lib/Config.pm lib/Config_heavy.pl
private = preplibrary $(CONFIGPM) lib/Config.pod lib/ExtUtils/Miniperl.pm
d446 1
a446 1
h1 = EXTERN.h INTERN.h XSUB.h av.h config.h cop.h cv.h dosish.h
d450 1
a450 1
h5 = utf8.h warnings.h
d459 1
a459 1
c = $(c1) $(c2) $(c3) $(c4) $(c5) miniperlmain.c perlmain.c opmini.c
d461 3
a463 2
obj1 = $(madlyobj) $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT) mro$(OBJ_EXT)
obj2 = hv$(OBJ_EXT) av$(OBJ_EXT) perl$(OBJ_EXT) run$(OBJ_EXT) pp_hot$(OBJ_EXT) sv$(OBJ_EXT) pp$(OBJ_EXT) scope$(OBJ_EXT) pp_ctl$(OBJ_EXT) pp_sys$(OBJ_EXT)
d466 6
a471 1
obj = $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
d531 1
a531 1
.c$(OBJ_EXT):
d534 1
a534 1
.c.i:
d540 1
a540 1
all: $(FIRSTMAKEFILE) miniperl$(EXE_EXT) extra.pods $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
d544 9
d555 7
d578 1
a578 1
$spitshell >>Makefile <<!GROK!THIS!
d591 7
d600 2
a601 2
uudmap.h: generate_uudmap\$(EXE_EXT)
	\$(RUN) ./generate_uudmap\$(EXE_EXT) >uudmap.h
d603 2
a604 2
generate_uudmap\$(EXE_EXT): generate_uudmap\$(OBJ_EXT)
	\$(CC) -o generate_uudmap \$(LDFLAGS) generate_uudmap\$(OBJ_EXT) \$(libs)
d607 1
a607 1
$spitshell >>Makefile <<'!NO!SUBS!'
a613 6
!NO!SUBS!
case "$osname" in
cygwin)
	;; # Let cygwin/Makefile.SHs do its work.
*)
	$spitshell >>Makefile <<'!NO!SUBS!'
a616 4
!NO!SUBS!
	;;
esac
$spitshell >>Makefile <<'!NO!SUBS!'
d635 1
a635 1
	$spitshell >>Makefile <<!GROK!THIS!
d645 1
a645 1
		$spitshell >>Makefile <<'!NO!SUBS!'
d654 1
a654 1
$(MINIPERL_NONSHR): $(LIBPERL_NONSHR) miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)
d656 1
a656 1
	    opmini$(OBJ_EXT) $(LIBPERL_NONSHR) $(LIBS)
d666 1
a666 1
		$spitshell >>Makefile <<'!NO!SUBS!'
d674 1
a674 1
	$spitshell >>Makefile <<'!NO!SUBS!'
d681 1
a681 1
	$spitshell >>Makefile <<'!NO!SUBS!'
d689 13
d704 1
a704 1
if test -r $Makefile_s ; then
d706 1
a706 1
	$spitshell >>Makefile <<!GROK!THIS!
d711 21
a731 1
	$spitshell >>Makefile <<'!NO!SUBS!'
d736 1
a736 1
#		$spitshell >>Makefile <<'!NO!SUBS!'
d742 1
a742 1
#			$spitshell >>Makefile <<'!NO!SUBS!'
d751 1
a751 1
#		$spitshell >>Makefile <<'!NO!SUBS!'
d758 2
a759 2
#	$spitshell >>Makefile <<'!NO!SUBS!'
#
d774 6
a779 6
		$spitshell >>Makefile <<'!NO!SUBS!'
miniperl: $& miniperlmain$(OBJ_EXT) $(obj) opmini$(OBJ_EXT)
	$(CC) -o miniperl $(CLDFLAGS) \
	    `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d783 5
a787 5
		$spitshell >>Makefile <<'!NO!SUBS!'
miniperl: $& miniperlmain$(OBJ_EXT) $(obj) opmini$(OBJ_EXT)
	$(CC) -o miniperl `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d796 1
a796 1
		$spitshell >>Makefile <<!NO!SUBS!
d803 2
a804 2
		$spitshell >>Makefile <<'!NO!SUBS!'
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(obj) opmini$(OBJ_EXT)
d806 4
a809 4
	$(CC) $(CLDFLAGS) $(NAMESPACEFLAGS) -o miniperl \
	    `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d813 2
a814 2
		$spitshell >>Makefile <<'!NO!SUBS!'
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(obj) opmini$(OBJ_EXT)
d816 4
a819 4
	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o miniperl \
	    `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d824 1
a824 1
	$spitshell >>Makefile <<'!NO!SUBS!'
d936 12
d952 2
d961 1
a961 1
$spitshell >>Makefile <<!GROK!THIS!
d965 1
a965 1
	(cd ext/Devel/PPPort && `pwd`/run.sh ../../../miniperl -I../../../lib \$\$f); \
d971 1
a971 1
$spitshell >>Makefile <<'!NO!SUBS!'
d980 1
a980 7
$spitshell >>Makefile <<'!NO!SUBS!'

sperl$(OBJ_EXT): perl.c $(h)
	$(RMS) sperl.c
	$(LNS) perl.c sperl.c
	$(CCCMD) -DIAMSUID sperl.c
	$(RMS) sperl.c
d990 1
a990 4
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib -e 'use AutoSplit; \
		autosplit_lib_modules(@@ARGV)' lib/*.pm
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib -e 'use AutoSplit; \
		autosplit_lib_modules(@@ARGV)' lib/*/*.pm
d993 2
a994 4
lib/Config.pod: config.sh miniperl$(EXE_EXT) configpm Porting/Glossary
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib configpm

$(CONFIGPM): lib/Config.pod
d997 1
a997 1
	$(LDLIBPTH) $(RUN) ./miniperl minimod.pl > lib/ExtUtils/Miniperl.pm
d1005 1
a1005 1
	$(LDLIBPTH) $(RUN) ./miniperl -I`pwd`/lib $@@.PL
d1012 1
a1012 1
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib lib/lib_pm.PL
d1017 1
a1017 1
	cd lib/unicore && $(LDLIBPTH) $(RUN) ../../miniperl -I../../lib mktables -w
d1020 15
d1040 1
a1040 1
	    cd pod ; $(LNS) ../$$x "perl"$$nx".pod" ; cd .. ; \
a1042 4
	-@@rm -f pod/perlvms.pod
	-@@test -f vms/perlvms.pod && cd pod && $(LNS) ../vms/perlvms.pod perlvms.pod && cd .. && echo "pod/perlvms.pod" >> extra.pods
	-@@rm -f pod/perldelta.pod
	-@@test -f pod/perl5100delta.pod && cd pod && $(LNS) perl5100delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods # See buildtoc
d1057 1
a1057 1
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib Porting/makemeta
a1130 1
#	autodoc.pl:	pod/perlapi.pod pod/perlintern.pod
a1146 1
		pod/perlintern.pod pod/perlapi.pod \
d1150 1
a1150 1
.PHONY: regen_headers regen_pods regen_all
d1152 1
a1152 1
regen regen_headers:	FORCE
d1155 2
a1156 2
regen_pods:	FORCE
	-cd pod; $(LDLIBPTH) $(MAKE) regen_pods
d1158 1
a1158 1
regen_all: regen regen_pods
d1163 2
a1164 2
	LC_ALL=C sort -fdc MANIFEST || (echo "WARNING: re-sorting MANIFEST"; \
		LC_ALL=C sort -fdo MANIFEST MANIFEST)
d1180 1
a1180 1
	@@$(LDLIBPTH) sh ext/util/make_ext $(STATIC) $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d1183 1
a1183 1
	@@$(LDLIBPTH) sh ext/util/make_ext dynamic $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d1186 1
a1186 1
	@@$(LDLIBPTH) sh ext/util/make_ext $(STATIC) $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d1188 2
a1189 2
n_dummy $(nonxs_ext):	miniperl$(EXE_EXT) preplibrary $(DYNALOADER) FORCE
	@@$(LDLIBPTH) sh ext/util/make_ext nonxs $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d1192 1
a1192 1
$spitshell >>Makefile <<EOF
d1196 1
a1196 1
$spitshell >>Makefile <<'!NO!SUBS!'
d1214 1
d1216 1
d1228 1
a1228 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c uudmap.h generate_uudmap$(EXE_EXT)
d1232 1
a1232 1
	-rm -f perl.exp ext.libs extra.pods uni.data opmini.o
d1241 1
a1241 1
	-rm -f config.over
d1248 1
d1250 1
a1250 1
	$(LDLIBPTH) sh ext/util/make_ext clean $$x MAKE=$(MAKE) ; \
d1258 9
a1266 4
	-@@for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) $(nonxs_ext) ; do \
	$(LDLIBPTH) sh ext/util/make_ext $(CLEAN) $$x MAKE=$(MAKE) ; \
	done
	-@@test ! -f $(RUN) ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib mkppport --clean
d1284 2
d1290 2
a1291 1
	-rmdir lib/B lib/Data
a1296 1
	-rm -f cygcrypt-0.dll cygwin1.dll
d1347 1
a1347 1
	minitest coretest test.taintwarn
d1374 1
a1374 1
	-@@test ! -f $(RUN) ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib uupacktool.pl -c
d1380 1
a1380 1
	  $(MAKE) TEST_ARGS=$(TEST_ARGS) TESTFILE=$(TESTFILE) _test_tty   ; \
d1382 1
a1382 1
	  $(MAKE) TEST_ARGS=$(TEST_ARGS) TESTFILE=$(TESTFILE) _test_notty ; \
d1416 1
a1416 1
		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t mro/*.t </dev/tty
d1477 1
a1477 1
		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t mro/*.t </dev/tty
d1487 3
d1562 1
a1562 1
	ctags -f Tags -N --totals --languages=c --langmap=c:+.h --exclude=opmini.c *.c *.h
@


1.15
log
@espie broke the make install codepath (and I think not just for DESTDIR), so back it out
@
text
@d76 1
a76 1
	netbsd*|freebsd[234]*|openbsd*)
d88 1
a88 1
		*)	shrpldflags="$shrpldflags -b noentry"
d98 1
a98 1
            shrpldflags='-W l,dll'
d158 1
d162 10
a171 1
    dynamic_list="$dynamic_list lib/auto/$f/$base.$dlext"
a185 9
# Handle the usage of different yaccs in posix-bc (During Configure we
# us yacc for perly.y and byacc for a2p.y.  The makefiles must use the
# same configuration for run_byacc!):
case "$osname" in
    posix-bc)
	byacc=$yacc
	;;
esac

d193 1
a193 4
#
#
# I now supply perly.c with the kits, so don't remake perly.c without byacc
BYACC = $byacc
d202 2
d245 3
d252 1
a252 1
DYNALOADER = lib/auto/DynaLoader/DynaLoader\$(LIB_EXT)
d273 4
d363 11
a373 10
c1 = $(mallocsrc) av.c scope.c op.c doop.c doio.c dump.c hv.c mg.c reentr.c
c2 = perl.c perly.c pp.c pp_hot.c pp_ctl.c pp_sys.c regcomp.c regexec.c utf8.c
c3 = gv.c sv.c taint.c toke.c util.c deb.c run.c universal.c xsutils.c pad.c
c4 = globals.c perlio.c perlapi.c numeric.c locale.c pp_pack.c pp_sort.c

c = $(c1) $(c2) $(c3) $(c4) miniperlmain.c perlmain.c opmini.c

obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT)
obj2 = hv$(OBJ_EXT) av$(OBJ_EXT) run$(OBJ_EXT) pp_hot$(OBJ_EXT) sv$(OBJ_EXT) pp$(OBJ_EXT) scope$(OBJ_EXT) pp_ctl$(OBJ_EXT) pp_sys$(OBJ_EXT)
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) xsutils$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT)
d378 2
a379 1
    -bhn \
a380 1
    -s \
d383 2
d387 1
d389 3
d393 2
d396 2
a397 2
    -erroff=E_BAD_PTR_CAST_ALIGN \
    -erroff=E_PTRDIFF_OVERFLOW \
a398 3
    -erroff=E_BAD_PTR_INT_COMBINATION \
    -erroff=E_LOOP_EMPTY \
    -erroff=E_TRUE_LOGICAL_EXPR \
a399 4
    -erroff=E_INDISTING_FROM_TRUNC \
    -erroff=E_POINTER_TO_OBJECT \
    -erroff=E_ASSIGN_NARROW_CONV \
    -erroff=E_BAD_SIGN_EXTEND \
d401 1
d403 31
a433 1
    -Wfoo.flow
d448 1
a448 7
.PHONY: all compile translators utilities

compile: all
	echo "testing compilation" > testcompile;
	cd utils;  $(MAKE) compile;
	cd x2p; $(MAKE) compile;
	cd pod; $(MAKE) compile;
d479 8
d541 3
a543 3
$(LIBPERL_NONSHR): perl$(OBJ_EXT) $(obj)
	$(RMS) $(LIBPERL_NONSHR)
	$(AR) rcu $(LIBPERL_NONSHR) perl$(OBJ_EXT) $(obj)
d576 1
a576 1
	./$(MINIPERLEXP) makedef.pl PLATFORM=os2 -DPERL_DLL=$(PERL_DLL) CC_FLAGS="$(OPTIMIZE)" > perl.exp
d590 28
a617 27
$(LIBPERL): $& perl$(OBJ_EXT) $(obj) $(LIBPERLEXPORT)
!NO!SUBS!
	case "$useshrplib" in
	true)
		$spitshell >>Makefile <<'!NO!SUBS!'
	$(LD) -o $@@ $(SHRPLDFLAGS) perl$(OBJ_EXT) $(obj) $(libs)
!NO!SUBS!
		case "$osname" in
		aix)
			$spitshell >>Makefile <<'!NO!SUBS!'
	rm -f libperl$(OBJ_EXT)
	mv $@@ libperl$(OBJ_EXT)
	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
!NO!SUBS!
			;;
		esac
		;;
	*)
		$spitshell >>Makefile <<'!NO!SUBS!'
	rm -f $(LIBPERL)
	$(AR) rcu $(LIBPERL) perl$(OBJ_EXT) $(obj)
	@@$(ranlib) $(LIBPERL)
!NO!SUBS!
		;;
	esac
	$spitshell >>Makefile <<'!NO!SUBS!'

d633 1
a633 1
miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
d636 2
a637 2
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perl$(OBJ_EXT) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d642 1
a642 1
miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
d644 2
a645 2
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perl$(OBJ_EXT) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d662 1
a662 1
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
d665 3
a667 2
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(LLIBPERL) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d672 1
a672 1
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
d675 3
a677 2
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(LLIBPERL) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d684 1
a684 1
perl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d686 1
a686 1
	$(SHRPENV) $(LDLIBPTH) $(CC) -o perl$(PERL_SUFFIX) $(PERL_PROFILE_LDFLAGS) $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d690 2
a691 2
pureperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) purify $(CC) -o pureperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d693 2
a694 2
purecovperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) purecov $(CC) -o purecovperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d696 2
a697 2
quantperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) quantify $(CC) -o quantperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d708 1
a708 1
	valgrind ./perl -e 1 2>/dev/null || exit 1
d714 2
a715 2
	@@grep "^optimize="     config.sh
	@@egrep "^optimize='(-g|.*-g[1-3].*)'" config.sh >/dev/null || exit 1
d794 2
a795 2
suidperl$(EXE_EXT): $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) $(CC) -o suidperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d801 23
d840 1
a840 1
	$(LDLIBPTH) ./miniperl -Ilib -e 'use AutoSplit; \
d842 1
a842 1
	$(LDLIBPTH) ./miniperl -Ilib -e 'use AutoSplit; \
d847 1
a847 1
	$(LDLIBPTH) ./miniperl -Ilib configpm --heavy=lib/Config_heavy.pl lib/Config.pm
d852 1
a852 1
	$(LDLIBPTH) ./miniperl minimod.pl > lib/ExtUtils/Miniperl.pm
d855 1
d860 1
a860 1
	$(LDLIBPTH) ./miniperl -I`pwd`/lib $@@.PL
d867 1
a867 1
	$(LDLIBPTH) ./miniperl -Ilib lib/lib_pm.PL
d872 1
a872 1
	cd lib/unicore && $(LDLIBPTH) ../../miniperl -I../../lib mktables -w
d876 1
a876 1
	-@@test -f extra.pods && rm -f `cat extra.pods`
d886 1
a886 1
	-@@test -f pod/perl588delta.pod && cd pod && $(LNS) perl588delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods # See buildtoc
d889 1
a889 1
	-@@test -s extras.lst && PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d892 1
a892 1
	-@@test -s extras.lst && PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d895 1
a895 1
	-@@test -s extras.lst && PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d901 1
a901 1
	$(LDLIBPTH) ./miniperl -Ilib Porting/makemeta
d922 2
a923 9
	if [ -n "$(COMPILE)" ]; \
	then \
		cd utils; $(MAKE) compile; \
		cd ../x2p; $(MAKE) compile; \
		cd ../pod; $(MAKE) compile; \
	else :; \
	fi
	$(LDLIBPTH) ./perl installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
	$(MAKE) extras.install
d926 1
a926 1
	$(LDLIBPTH) ./perl installman --destdir=$(DESTDIR) $(INSTALLFLAGS)
d932 1
a932 1
	$(LDLIBPTH) ./perl installhtml   \
d944 12
a955 22
# used only if you force byacc to run by saying
# 	make run_byacc
# Since we patch up the byacc output, the perly.fixer script needs
# to run with precisely the same version of byacc as I use.  You
# normally shouldn't remake perly.[ch].

.PHONY: check_byacc run_byacc

check_byacc:
	@@$(BYACC) -V 2>&1 | grep 'version 1\.8\.2'

run_byacc:	FORCE check_byacc
	$(BYACC) -d perly.y
	-chmod 664 perly.c perly.h
	sh $(shellflags) ./perly.fixer y.tab.c perly.c
	sed -e 's/fprintf *( *stderr *,/PerlIO_printf(Perl_debug_log,/g' \
	    -e 's/y\.tab/perly/g' perly.c >perly.tmp && mv perly.tmp perly.c
	sed -e '/^extern YYSTYPE yy/D' y.tab.h >yh.tmp && mv yh.tmp y.tab.h
	cmp -s y.tab.h perly.h && rm -f y.tab.h || mv y.tab.h perly.h
	perl -i.old perlyline.pl perly.c
	chmod 664 vms/perly_c.vms vms/perly_h.vms
	perl vms/vms_yfix.pl perly.c perly.h vms/perly_c.vms vms/perly_h.vms
a965 5
PERLYVMS = vms/perly_c.vms vms/perly_h.vms

$(PERLYVMS):	perly.c perly.h vms/vms_yfix.pl
	perl vms/vms_yfix.pl perly.c perly.h vms/perly_c.vms vms/perly_h.vms

d970 1
a970 1
SYMH = perlvars.h intrpvar.h thrdvar.h
a975 2
#	bytecode.pl:	ext/ByteLoader/byterun.h ext/ByteLoader/byterun.c
#			ext/B/B/Asmdata.pm
d993 1
a993 2
		perlapi.h perlapi.c ext/ByteLoader/byterun.h \
		ext/ByteLoader/byterun.c ext/B/B/Asmdata.pm regnodes.h \
d1004 1
a1004 1
regen_all: $(PERLYVMS) regen regen_pods
d1028 1
a1028 1
d_dummy $(dynamic_ext):	miniperl$(EXE_EXT) preplibrary $(DYNALOADER) FORCE
d1031 1
a1031 1
s_dummy $(static_ext):	miniperl$(EXE_EXT) preplibrary $(DYNALOADER) FORCE
d1036 11
d1050 2
a1051 1
	distclean veryclean _verycleaner
d1053 1
a1053 1
clean:		_tidy _mopup
d1055 1
a1055 1
realclean:	_realcleaner _mopup
d1062 1
a1062 1
clobber:	_realcleaner _mopup _clobber
d1067 1
a1067 1
veryclean:	_verycleaner _mopup _clobber
d1072 1
a1072 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c
d1082 1
a1082 1
	-rm -f perlld cygwin.c ld2 libperl*.def libperl*.dll cygperl*.dll *.exe.stackdump
d1085 1
a1094 1
	rm -f testcompile compilelog
d1104 1
d1120 6
a1125 3
	rm -f preload
	rm -f testcompile compilelog
	rm -rf lib/Encode
d1127 2
a1128 2
	-rmdir lib/Filter/Util lib/IO/Socket lib/IO
	-rmdir lib/List lib/MIME lib/Scalar lib/Sys 
d1130 5
d1150 4
d1183 1
a1183 1
	test.bytecompile minitest coretest test.taintwarn
d1190 1
a1190 1
_test_prep:
d1201 1
a1201 1
	cd t && $(PERL_DEBUG) $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS) </dev/tty
d1204 7
a1210 1
	cd t && $(PERL_DEBUG) PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS)
d1252 1
a1252 1
		&& $(LDLIBPTH) ./perl TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
d1266 1
a1266 1
	PERL=./perl PERL_DEBUG=PERL_VALGRIND=1 $(MAKE) _test
d1268 1
a1268 1
utest.valgrind ucheck.valgrind: test_prep.valgrind perl.valgrind
d1271 1
a1271 1
test_notty.valgrind: test_prep.valgrind perl.valgrind
a1287 5
# Targets for Bytecode/ByteLoader testing.

test.bytecompile:	test_prep
	PERL=./perl TEST_ARGS=-bytecompile $(MAKE) _test

d1313 1
a1313 1
		&& $(LDLIBPTH) ./perl TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
d1331 1
a1331 1
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)'
d1334 1
a1334 1
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok
d1337 1
a1337 1
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -A
d1340 1
a1340 1
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A
d1343 1
a1343 1
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)'
d1346 1
a1346 1
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok
d1349 1
a1349 1
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -A
d1352 1
a1352 1
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A
d1395 1
a1395 1
	ctags -f Tags -N --totals --languages=c --langmap=c:+.h *.c *.h
a1417 38
    rm -f y.tab.c y.tab.h
    # yacc must be a reentrant ("pure") Bison in BS2000 Posix!
    yacc -d perly.y >/dev/null 2>&1
    if cmp -s y.tab.c perly.c; then
        rm -f y.tab.c
    else
        echo "perly.y -> perly.c" >&2
        mv -f y.tab.c perly.c
        chmod u+w perly.c
        sed -e '/^#include "perl\.h"/a\
\
#define yydebug    PL_yydebug\
#define yynerrs    PL_yynerrs\
#define yyerrflag  PL_yyerrflag\
#define yychar     PL_yychar\
#define yyval      PL_yyval\
#define yylval     PL_yylval'				\
            -e '/YYSTYPE *yyval;/D'			\
            -e '/YYSTYPE *yylval;/D'			\
            -e '/int  yychar,/,/yynerrs;/D'		\
            -e 's/int yydebug = 0;/yydebug = 0;/'	\
            -e 's/[^_]realloc(/PerlMem_realloc(/g'	\
            -e 's/fprintf *( *stderr *,/PerlIO_printf(Perl_debug_log,/g' \
            -e 's/y\.tab/perly/g' perly.c >perly.tmp && mv perly.tmp perly.c
        xxx="$xxx perly.c"
    fi
    case "$osname:$usethreads" in
    os390:define)
	sed -e 's@@^extern int yychar, yyerrflag;@@/* extern int yychar, yyerrflag; */@@' perly.c > perly.tmp && mv perly.tmp perly.c
	;;
    esac
    if cmp -s y.tab.h perly.h; then
        rm -f y.tab.h
    else
        echo "perly.y -> perly.h" >&2
        mv -f y.tab.h perly.h
        xxx="$xxx perly.h"
    fi
@


1.14
log
@some make -j fixes.
- put the man pages in a separate Makefile, they need main build to be
finished for dependencies to resolve correctly.
- run perl's make depend before we run build. We can probably get rid
of most of it, but one of Todd's remarks made me realize we still want
to depend perlmain.
@
text
@d270 1
a270 1
FIRSTMAKEFILE = #$firstmakefile
@


1.13
log
@merge in perl 5.8.8
@
text
@d270 1
a270 1
FIRSTMAKEFILE = $firstmakefile
@


1.12
log
@sync in-tree perl with 5.8.6
@
text
@d23 4
d79 4
d318 2
a319 1
private = preplibrary lib/Config.pm lib/ExtUtils/Miniperl.pm
d369 25
a393 1
lintflags = -hbvxac
d416 1
a416 1
translators:	miniperl$(EXE_EXT) lib/Config.pm FORCE
d419 1
a419 1
utilities:	miniperl$(EXE_EXT) lib/Config.pm $(plextract) lib/lib.pm FORCE
d439 2
a440 2
	\$(CPS) op.c opmini.tmp
	sh mv-if-diff opmini.tmp opmini.c
d451 1
a451 2
	sh writemain $(DYNALOADER) $(static_ext) > writemain.tmp
	sh mv-if-diff writemain.tmp perlmain.c
d525 1
a525 2
	./$(MINIPERLEXP) makedef.pl PLATFORM=aix CC_FLAGS="$(OPTIMIZE)" | sort -u | sort -f > perl.exp.tmp
	sh mv-if-diff perl.exp.tmp perl.exp
d534 1
a534 2
	./$(MINIPERLEXP) makedef.pl PLATFORM=os2 -DPERL_DLL=$(PERL_DLL) CC_FLAGS="$(OPTIMIZE)" > perl.exp.tmp
	sh mv-if-diff perl.exp.tmp perl5.def
d588 1
a588 1
	aix*)
d597 1
a597 1
	beos*|next4*)
d670 1
a670 1
	@@grep "^optimize='-g'" config.sh >/dev/null || exit 1
d769 1
a769 1
preplibrary: miniperl$(EXE_EXT) lib/Config.pm lib/lib.pm $(PREPLIBRARY_LIBPERL)
d778 7
a784 11
# Take care to avoid modifying lib/Config.pm without reason
# (If trying to create a new port and having problems with the configpm script,
# try 'make minitest' and/or commenting out the tests at the end of configpm.)
lib/Config.pm: config.sh miniperl$(EXE_EXT) configpm Porting/Glossary
	$(LDLIBPTH) ./miniperl -Ilib configpm configpm.tmp
	sh mv-if-diff configpm.tmp $@@

lib/ExtUtils/Miniperl.pm: miniperlmain.c miniperl$(EXE_EXT) minimod.pl lib/Config.pm
	$(LDLIBPTH) ./miniperl minimod.pl > minimod.tmp
	sh mv-if-diff minimod.tmp $@@
	-touch lib/ExtUtils/Miniperl.pm
d787 1
a787 1
	cp ext/re/re.pm ext/re/re.tmp && sh mv-if-diff ext/re/re.tmp lib/re.pm
d789 1
a789 1
$(plextract):	miniperl$(EXE_EXT) lib/Config.pm x2p/s2p
d791 1
a791 1
	$(LDLIBPTH) ./miniperl -Ilib $@@.PL
d793 1
a793 1
x2p/s2p: miniperl$(EXE_EXT) lib/Config.pm x2p/s2p.PL
d796 1
a796 1
lib/lib.pm:	miniperl$(EXE_EXT) lib/Config.pm
d800 3
a802 1
$(unidatafiles): miniperl$(EXE_EXT) lib/Config.pm lib/unicore/mktables
d804 1
d817 1
a817 1
	-@@test -f pod/perl586delta.pod && cd pod && $(LNS) perl586delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods # See buildtoc
d870 1
a870 1
	$(LDLIBPTH) ./perl installhtml                   \
d872 2
a873 2
      --htmldir=$(privlib)/html     \
      --htmlroot=$(privlib)/html    \
d877 1
d1020 1
a1020 1
	-rm -f perl.exp ext.libs extra.pods opmini.o
d1052 1
a1052 1
	rm -f core *perl.core t/core t/*perl.core
d1057 1
a1057 1
	rm -f $(private) lib/Config.pod
a1064 1
	-rmdir lib/B lib/Data lib/Digest
d1066 1
a1079 5
# The following lint has practically everything turned on.  Unfortunately,
# you have to wade through a lot of mumbo jumbo that can't be suppressed.
# If the source file has a /*NOSTRICT*/ somewhere, ignore the lint message
# for that spot.

d1082 2
a1083 1
	lint $(lintflags) $(defs) perly.c $(c) > perl.fuzz
a1317 2
ctags:	tags

d1324 3
d1438 1
@


1.11
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d352 1
a352 1
c = $(c1) $(c2) $(c3) $(c4) miniperlmain.c perlmain.c
d405 5
a409 3
opmini\$(OBJ_EXT): op.c config.h
	\$(RMS) opmini.c
	\$(CPS) op.c opmini.c
a410 1
	\$(RMS) opmini.c
d788 1
a788 1
	-@@test -f pod/perl585delta.pod && cd pod && $(LNS) perl585delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods
d986 1
a986 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c
d1085 1
d1147 12
d1205 1
a1205 3
# Can't depend on lib/Config.pm because that might be where miniperl
# is crashing.
minitest: miniperl$(EXE_EXT) lib/re.pm
d1212 4
@


1.10
log
@merge local changes into perl-5.8.3
@
text
@d12 11
d332 8
d371 1
a371 1
all: $(FIRSTMAKEFILE) miniperl$(EXE_EXT) extra.pods $(private) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
d773 3
d787 1
a787 1
	-@@test -f pod/perl583delta.pod && cd pod && $(LNS) perl583delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods
d1027 1
d1100 1
a1100 1
test_prep: test_prep_pre miniperl$(EXE_EXT) perl$(EXE_EXT) $(dynamic_ext) $(TEST_PERL_DLL)
d1195 1
a1195 1
	  $(MAKE) lib/Config.pm lib/lib.pm
d1198 1
a1198 1
	@@echo "to build lib/Config.pm or lib/lib.pm."
d1201 1
a1201 1
		&& $(LDLIBPTH) ./perl TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
@


1.9
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d764 2
d768 1
a768 1
	-@@test -s extras.lst && PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d771 1
a771 1
	-@@test -s extras.lst && PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d774 1
a774 1
	-@@test -s extras.lst && PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d783 1
a783 1
	$(MAKE) STRIPFLAGS=-s install
d786 1
a786 1
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS)
d789 1
a789 1
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-V
d792 1
a792 1
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-S
d795 1
a795 1
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-n
d797 4
a800 1
install.perl:	all installperl
@


1.8
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d99 31
d131 1
a136 10
case "$ldlibpth" in
# Protect any spaces
*" "*) ldlibpth=`echo $ldlibpth|sed 's/ /\\\\ /g'` ;;
esac

case "$osname" in
os390)	test -f /bin/env && ldlibpth="/bin/env $ldlibpth"
	;;
esac

d313 1
a313 2
	pod/pod2usage.PL pod/podchecker.PL pod/podselect.PL \
	pod/buildtoc.PL
d317 1
a317 2
	pod/pod2usage pod/podchecker pod/podselect \
	pod/buildtoc
d322 2
a323 2
h2 = embed.h form.h gv.h handy.h hv.h keywords.h mg.h op.h
h3 = opcode.h patchlevel.h perl.h perlapi.h perly.h pp.h proto.h regcomp.h
d330 1
a330 1
c3 = gv.c sv.c taint.c toke.c util.c deb.c run.c universal.c xsutils.c
d335 1
a335 1
obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT)
d473 1
a473 1
	./$(MINIPERLEXP) makedef.pl PLATFORM=aix | sort -u | sort -f > perl.exp.tmp
d483 1
a483 1
	./$(MINIPERLEXP) makedef.pl PLATFORM=os2 -DPERL_DLL=$(PERL_DLL) > perl.exp.tmp
d503 1
a503 1
	$(LD) -o $@@ $(SHRPLDFLAGS) perl$(OBJ_EXT) $(obj)
d555 21
d604 11
d766 1
a766 1
	-@@test -s extras.lst && $(LDLIBPTH) PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib ./perl -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d769 1
a769 1
	-@@test -s extras.lst && $(LDLIBPTH) PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib ./perl -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d772 1
a772 1
	-@@test -s extras.lst && $(LDLIBPTH) PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib ./perl -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d777 3
d803 1
a803 1
	$(LDLIBPTH) ./perl installperl $(INSTALLFLAGS) $(STRIPFLAGS)
d807 1
a807 1
	$(LDLIBPTH) ./perl installman $(INSTALLFLAGS)
d870 6
a877 6
# [* embed.pl needs pp.sym generated by opcode.pl! *]
#	embed.pl:	proto.h embed.h embedvar.h global.sym
#			perlapi.h perlapi.c pod/perlintern.pod
#			pod/perlapi.pod
#	bytecode.pl:	ext/ByteLoader/byterun.h ext/ByteLoader/byterun.c
#			ext/B/B/Asmdata.pm
d882 4
a885 2
# To force them to be regenerated, type
#	make regen_headers
d896 2
a897 9
regen_headers:	FORCE
	-$(CHMOD_W) $(AUTOGEN_FILES)
	-perl keywords.pl
	-perl opcode.pl
	-perl embed.pl
	-perl bytecode.pl
	-perl regcomp.pl
	-perl warnings.pl
	-perl autodoc.pl
d902 10
a911 1
regen_all: $(PERLYVMS) regen_headers regen_pods
d998 2
a999 2
	rm -f $(FIRSTMAKEFILE) $(FIRSTMAKEFILE).old
	rm -f $(private)
d1004 1
d1008 3
a1010 3
	-rmdir lib/IO/Socket lib/IO/t lib/IO
	-rmdir lib/Filter/Util lib/List lib/MIME lib/PerlIO lib/Scalar lib/Sys
	-rmdir lib/Thread lib/XS lib/threads/shared lib/threads t/lib/B
d1057 2
a1058 2
	test.deparse test_notty.deparse \
	minitest coretest
d1076 1
a1076 1
	cd t && $(LDLIBPTH) $(PERL_DEBUG) $(PERL) $(TESTFILE) $(TEST_ARGS) </dev/tty
d1079 1
a1079 1
	cd t && $(LDLIBPTH) $(PERL_DEBUG) PERL_SKIP_TTY_TEST=1 $(PERL) $(TESTFILE) $(TEST_ARGS)
d1117 14
d1145 5
d1158 5
d1180 3
d1272 1
a1272 1
$define)
d1274 1
a1274 1
    echo "This is an EBCDIC system, checking if any parser files need regenerating." >&4
d1303 5
@


1.7
log
@merge in perl 5.6.1 with our local changes
@
text
@d2 1
a2 1
case $CONFIGDOTSH in
d4 2
a5 5
	if test -f config.sh; then TOP=.;
	elif test -f ../config.sh; then TOP=..;
	elif test -f ../../config.sh; then TOP=../..;
	elif test -f ../../../config.sh; then TOP=../../..;
	elif test -f ../../../../config.sh; then TOP=../../../..;
d29 1
a29 1
	# Prefix all runs of 'miniperl' and 'perl' with 
d39 1
d49 2
a50 1
			     -compatibility_version 1 \
d52 1
a52 2
				${api_version}.${api_subversion} \
			     -image_base 0x4be00000 \
d101 11
a143 9
# Handle the usage of different yaccs in posix-bc (During Configure we
# us yacc for perly.y and byacc for a2p.y.  The makefiles must use the
# same configuration for run_byacc!):
case "$osname" in
    posix-bc)
	byacc=$yacc
	;;
esac

d193 7
d212 1
a212 1
public = perl $suidperl utilities translators
d220 2
d234 1
a234 1
.SUFFIXES: .c \$(OBJ_EXT)
d242 6
d254 15
d273 3
a275 1
CCCMD = `sh $(shellflags) cflags $(LIBPERL) $@@`
d277 1
a277 1
private = preplibrary lib/ExtUtils/Miniperl.pm lib/Config.pm
d294 1
d299 1
a299 1
addedbyconf = UU $(shextract) $(plextract) pstruct
d308 1
a308 1
c1 = $(mallocsrc) av.c scope.c op.c doop.c doio.c dump.c hv.c mg.c
d311 1
a311 1
c4 = globals.c perlio.c perlapi.c
d315 1
a315 1
obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT)
d317 1
a317 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) xsutils$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT)
a320 10
# Once perl has been Configure'd and built ok you build different
# perl variants (Debugging, Embedded, Multiplicity etc) by saying:
#	make clean; make LIBPERL=libperl<type>.a
# where <type> is some combination of 'd' and(or) 'e' or 'm'.
# See cflags to understand how this works.
#
# This mechanism is getting clunky and might not even work any more.
# EMBEDDING is on by default, and MULTIPLICITY doesn't work.
#

d326 7
a332 1
all: $(FIRSTMAKEFILE) miniperl extra.pods $(private) $(public) $(dynamic_ext) $(nonxs_ext)
d334 3
a336 1
	@@echo "	Everything is up to date. 'make test' to run test suite."
d341 1
a341 1
	cd x2p; $(MAKE) compile; 
d344 1
a344 1
translators:	miniperl lib/Config.pm FORCE
d347 1
a347 1
utilities:	miniperl lib/Config.pm $(plextract) FORCE
d356 1
d360 5
a365 1
$spitshell >>Makefile <<!GROK!THIS!
d381 6
d390 4
d518 1
a518 1
	next4*)
d521 2
a522 1
	$(CC) -o miniperl `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
d527 1
a527 1
	aix*)
d530 1
a530 2
	$(CC) -o miniperl $(CLDFLAGS) \
	    `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
d537 2
a538 1
miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
d548 3
a550 2
perl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) $(CC) -o perl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d552 3
a554 1
pureperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d557 1
a557 1
purecovperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d560 1
a560 1
quantperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d563 79
d647 1
a647 1
suidperl: $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d664 1
d666 2
a667 1
preplibrary: miniperl lib/Config.pm
d671 4
a674 1
		autosplit_lib_modules(@@ARGV)' lib/*.pm lib/*/*.pm
d677 1
a677 1
# (If trying to create a new port and having problems with the configpm script, 
d679 2
a680 2
lib/Config.pm: config.sh miniperl configpm lib/re.pm
	$(LDLIBPTH) ./miniperl configpm configpm.tmp
d683 1
a683 1
lib/ExtUtils/Miniperl.pm: miniperlmain.c miniperl minimod.pl lib/Config.pm
d686 1
d689 1
a689 2
	rm -f $@@
	cat ext/re/re.pm > $@@
d691 2
a692 1
$(plextract):	miniperl lib/Config.pm
d695 8
a702 1
extra.pods: miniperl
d710 1
d713 12
d728 1
a728 1
install:
d749 1
d775 6
a780 1
run_byacc:	FORCE
d788 1
d801 5
d818 1
a818 1
#	embed.pl:	proto.h embed.h embedvar.h global.sym objXSUB.h
d833 1
a833 1
		objXSUB.h perlapi.h perlapi.c ext/ByteLoader/byterun.h \
d835 3
a837 2
		warnings.h lib/warnings.pm \
		vms/perly_c.vms vms/perly_h.vms
d847 1
d850 1
a850 4
	-cd pod; $(LDLIBPTH) make regen_pods

regen_vms:	FORCE
	-perl vms/vms_yfix.pl perly.c perly.h vms/perly_c.vms vms/perly_h.vms
d852 1
a852 1
regen_all: regen_headers regen_pods regen_vms
d864 2
a865 2
$(DYNALOADER):	miniperl preplibrary FORCE
	@@$(LDLIBPTH) sh ext/util/make_ext static $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d867 1
a867 1
d_dummy $(dynamic_ext):	miniperl preplibrary $(DYNALOADER) FORCE
d870 2
a871 2
s_dummy $(static_ext):	miniperl preplibrary $(DYNALOADER) FORCE
	@@$(LDLIBPTH) sh ext/util/make_ext static $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d873 1
a873 1
n_dummy $(nonxs_ext):	miniperl preplibrary $(DYNALOADER) FORCE
d876 4
d883 1
a883 1
	@@echo "Note that make realclean does not delete config.sh or Policy.sh"
d886 2
a887 1
	rm -f config.sh cppstdin Policy.sh
d900 1
d906 6
a911 1
	rm -f perl suidperl miniperl $(LIBPERL) libperl.* microperl
d932 1
d934 4
a937 1
	rm -f core core.*perl.*.? *perl.core t/core t/core.perl.*.? t/*perl.core t/misctmp* t/forktmp* t/tmp* t/c t/perl t/rantests .?*.c so_locations $(LIBPERL_NONSHR) $(MINIPERL_NONSHR)
d942 1
a942 1
	rm -f lib/.exists lib/*/.exists
d946 5
a950 1
	-rmdir lib/B lib/Data lib/IO/Socket lib/IO lib/Sys lib/Thread
d952 1
a952 1
_realcleaner: 
d956 1
a956 1
_verycleaner: 
d966 1
d983 1
d993 31
a1023 8
# Cannot delegate rebuilding of t/perl to make to allow interlaced
# test and minitest
test-prep: miniperl perl preplibrary utilities $(dynamic_ext) $(nonxs_ext) $(TEST_PERL_DLL)
	cd t && (rm -f perl$(EXE_EXT); $(LNS) ../perl$(EXE_EXT) perl$(EXE_EXT))

# Second branch is for testing without a tty or controling terminal.
# See t/op/stat.t
test check: test-prep
d1025 1
a1025 1
	  cd t && $(LDLIBPTH) ./perl TEST </dev/tty; \
d1027 1
a1027 1
	  cd t && PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) ./perl TEST; \
d1031 44
a1074 6
utest ucheck: test-prep
	if (true </dev/tty) >/dev/null 2>&1; then \
	  cd t && $(LDLIBPTH) ./perl UTEST </dev/tty; \
	else \
	  cd t && PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) ./perl UTEST; \
	fi
d1076 2
a1077 3
# For testing without a tty or controling terminal. See t/op/stat.t
test-notty: test-prep
	cd t && PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) ./perl TEST
d1081 4
a1084 1
minitest: miniperl lib/re.pm
d1086 2
a1087 1
	@@echo "to build lib/Config.pm."
d1089 6
a1094 1
		&& $(LDLIBPTH) ./perl TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t pragma/*.t </dev/tty
d1100 3
d1127 2
d1144 1
d1148 1
d1153 2
@


1.6
log
@perl-5.6.0 + local changes
@
text
@d29 1
d74 1
a74 1
	        shrpldflags="$shrpldflags $ldflags $libs $cryptlib"
d80 5
d126 18
a160 2
SMALL = $small
LARGE = $large $split
d164 2
d203 1
a203 1
libs = $libs $cryptlib
d233 1
d235 3
a237 2
# mentioned here so that metaconfig picks it up
INSTALL_USR_BIN_PERL = $installusrbinperl
a238 1
!GROK!THIS!
d250 1
a250 1
	makedir.SH myconfig.SH writemain.SH
d253 1
a253 1
	makedir myconfig writemain
d259 2
a260 1
	pod/pod2usage.PL pod/podchecker.PL pod/podselect.PL
d263 2
a264 1
	pod/pod2usage pod/podchecker pod/podselect
d327 1
d329 6
a334 5
opmini$(OBJ_EXT): op.c
	$(RMS) opmini.c
	$(LNS) op.c opmini.c
	$(CCCMD) $(PLDLFLAGS) -DPERL_EXTERNAL_GLOB opmini.c
	$(RMS) opmini.c
d336 3
a338 1
miniperlmain$(OBJ_EXT): miniperlmain.c
d367 1
a367 1
LIBS			= $libs
d437 1
a437 1
	$(LD) $(SHRPLDFLAGS) -o $@@ perl$(OBJ_EXT) $(obj)
d492 1
a492 1
	$(LDLIBPTH) $(CC) $(LARGE) $(CLDFLAGS) -o miniperl \
d502 1
a502 1
	$(SHRPENV) $(LDLIBPTH) $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o perl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d505 1
a505 1
	$(SHRPENV) $(LDLIBPTH) purify $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o pureperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d508 1
a508 1
	$(SHRPENV) $(LDLIBPTH) purecov $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o purecovperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d511 1
a511 1
	$(SHRPENV) $(LDLIBPTH) quantify $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o quantperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d519 1
a519 1
	$(SHRPENV) $(LDLIBPTH) $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o suidperl perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d527 1
a527 1
sperl$(OBJ_EXT): perl.c perly.h patchlevel.h $(h)
d565 1
a565 1
	    $(LNS) ../$$x "pod/perl"$$nx".pod" ; \
d568 1
a568 1
	-@@test -f vms/perlvms.pod && $(LNS) ../vms/perlvms.pod pod/perlvms.pod && echo "pod/perlvms.pod" >> extra.pods
d573 11
a583 1
install: all install.perl install.man
d593 1
a593 1
	$(LDLIBPTH) ./perl installperl $(STRIPFLAGS)
d596 1
a596 1
	$(LDLIBPTH) ./perl installman
d601 1
a601 1
	-@@test -f README.vms && $(LNS) ../README.vms vms/README_vms.pod
d621 1
a621 1
	-chmod 664 perly.c
d668 2
a669 1
		warnings.h lib/warnings.pm
d680 8
d712 1
a712 1
realclean:	_cleaner _mopup
d715 1
a715 1
clobber:	_cleaner _mopup
d718 2
d722 4
d731 1
a731 1
	-rm -f perl.exp ext.libs extra.pods
d734 1
a734 1
	rm -f perl suidperl miniperl $(LIBPERL)
d746 1
a746 2
# Do not 'make _cleaner' directly.
_cleaner:
d748 3
a750 3
	-cd pod; $(LDLIBPTH) $(MAKE) realclean
	-cd utils; $(LDLIBPTH) $(MAKE) realclean
	-cd x2p; $(LDLIBPTH) $(MAKE) realclean
d752 1
a752 1
	$(LDLIBPTH) sh ext/util/make_ext realclean $$x MAKE=$(MAKE) ; \
d754 3
a756 1
	rm -f *.orig */*.orig *~ */*~ core core.*perl.*.? *perl.core t/core t/core.perl.*.? t/*perl.core t/misctmp* t/tmp* t/c t/perl .?*.c so_locations $(LIBPERL_NONSHR) $(MINIPERL_NONSHR)
d765 10
a774 1
	-rmdir lib/B lib/Data lib/IO/Socket lib/IO
d781 1
a781 1
lint: perly.c $(c)
d819 1
d838 1
a838 1
		&& $(LDLIBPTH) ./perl TEST base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t </dev/tty
d850 6
d862 6
d978 1
@


1.5
log
@Remove perly.c dependency on perly.y; should not be needed but...
@
text
@d2 1
a2 1
case $CONFIG in
d32 7
a38 2
	# $ldlibpth so that ./perl finds *this* libperl.so.
	ldlibpth="LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH"
a40 1
	# NeXT-4 specific stuff.  Can't we do this in the hint file?
a46 2
		# NeXT uses a different name.
		ldlibpth="DYLD_LIBRARY_PATH=`pwd`:$DYLD_LIBRARY_PATH"
d48 7
a54 1
	beos*)	ldlibpth="LIBRARY_PATH=`pwd`:$LIBRARY_PATH"
d56 2
a57 2
	os2*)	# OS/2 doesn't need anything special for LD_LIBRARY_PATH.
		ldlibpth=''
d68 1
a68 2
		3*)
			shrpldflags="$shrpldflags -e _nostart $ldflags $libs $cryptlib"
d70 1
a70 2
		*)
			shrpldflags="$shrpldflags -b noentry $ldflags $libs $cryptlib"
d73 2
a74 2
		aixinstdir=`pwd | sed 's/\/UU$//'`
		linklibperl="-L $archlibexp/CORE -L $aixinstdir -lperl"
d76 2
a77 2
	hpux10*)
		linklibperl="-L `pwd | sed 's/\/UU$//'` -Wl,+b$archlibexp/CORE -lperl"
d80 15
d170 1
a170 1
# LD_LIBRARY_PATH if you are building a shared libperl.so.
d209 4
d225 1
a225 1
	makedir.SH perl_exp.SH writemain.SH
d228 1
a228 1
	makedir perl.exp writemain
d233 2
a234 1
pl = pod/pod2html.PL pod/pod2latex.PL pod/pod2man.PL pod/pod2text.PL
d236 2
a237 1
plextract = pod/pod2html pod/pod2latex pod/pod2man pod/pod2text
d243 1
a243 1
h3 = opcode.h patchlevel.h perl.h perly.h pp.h proto.h regcomp.h
d245 1
a245 1
h5 = bytecode.h byterun.h
d248 4
a251 3
c1 = $(mallocsrc) av.c scope.c op.c doop.c doio.c dump.c hv.c mg.c byterun.c
c2 = perl.c perly.c pp.c pp_hot.c pp_ctl.c pp_sys.c regcomp.c regexec.c
c3 = gv.c sv.c taint.c toke.c util.c deb.c run.c universal.c globals.c perlio.c
d253 1
a253 1
c = $(c1) $(c2) $(c3) miniperlmain.c perlmain.c
d255 1
a255 1
obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) byterun$(OBJ_EXT)
d257 1
a257 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT)
d276 1
a276 1
all: $(FIRSTMAKEFILE) miniperl $(private) $(plextract) $(public) $(dynamic_ext) $(nonxs_ext)
d289 1
a289 1
utilities:	miniperl lib/Config.pm FORCE
d301 6
d311 2
a312 2
	sh writemain $(DYNALOADER) $(static_ext) > tmp
	sh mv-if-diff tmp perlmain.c
d327 68
a394 2
if test -r $osname/Makefile.SHs ; then
	. $osname/Makefile.SHs
d397 1
a397 1
Makefile: $osname/Makefile.SHs
d401 1
a401 1
$(LIBPERL): $& perl$(OBJ_EXT) $(obj)
d438 31
a468 3
miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL)
	$(LDLIBPTH) $(CC) $(LARGE) $(CLDFLAGS) -o miniperl miniperlmain$(OBJ_EXT) $(LLIBPERL) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e 0 || $(MAKE) minitest
d470 1
a470 1
perl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
d473 1
a473 1
pureperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
d476 1
a476 1
purecovperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
d479 1
a479 1
quantperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
d487 1
a487 1
suidperl: $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
d505 1
a505 1
preplibrary: miniperl lib/Config.pm $(plextract)
d514 3
a516 3
lib/Config.pm: config.sh miniperl configpm
	$(LDLIBPTH) ./miniperl configpm tmp
	sh mv-if-diff tmp $@@
d519 2
a520 2
	$(LDLIBPTH) ./miniperl minimod.pl > tmp
	sh mv-if-diff tmp $@@
d526 1
a526 1
$(plextract):	miniperl lib/Config.pm lib/re.pm
d528 14
a541 1
	
d552 1
a552 1
	$(LDLIBPTH) ./perl installperl
d560 1
a578 1
	@@ echo 'Expect' 113 shift/reduce and 1 reduce/reduce conflict
d580 1
a580 1
	chmod 664 perly.c
d584 1
a584 1
	echo 'extern YYSTYPE yylval;' >>y.tab.h
d592 1
a592 1
perly.c:
d595 1
a595 1
perly.h:
d600 1
a600 1
SYM  = global.sym perlio.sym thread.sym
d602 3
a604 1
SYMH = perlvars.h thrdvar.h
d607 10
a616 7
#	keywords.h:	keywords.pl
#	opcode.h:	opcode.pl
#	embed.h:  	embed.pl global.sym
#	byterun.h:	bytecode.pl
#	byterun.c:	bytecode.pl
#	lib/B/Asmdata.pm:	bytecode.pl
#	regnodes.h:	regcomp.pl
d619 1
a619 1
# To force them to run, type
d621 8
d630 7
a636 5
	perl keywords.pl
	perl opcode.pl
	perl embed.pl
	perl bytecode.pl
	perl regcomp.pl
d673 3
a675 1
	rm -f perl.exp ext.libs
d677 1
d682 3
a684 3
	-cd pod; $(MAKE) clean
	-cd utils; $(MAKE) clean
	-cd x2p; $(MAKE) clean
d686 1
a686 1
	sh ext/util/make_ext clean $$x MAKE=$(MAKE) ; \
d693 3
a695 3
	-cd pod; $(MAKE) realclean
	-cd utils; $(MAKE) realclean
	-cd x2p; $(MAKE) realclean
d697 1
a697 1
	sh ext/util/make_ext realclean $$x MAKE=$(MAKE) ; \
d699 1
a699 1
	rm -f *.orig */*.orig *~ */*~ core t/core t/c t/perl
d704 1
a704 1
	rm -f lib/.exists
d708 1
a729 4
# This is an AIXism.
perl.exp: perl_exp.SH config.sh $(SYM) $(SYMH)
	$(SHELL) perl_exp.SH

d740 3
a742 1
test-prep: miniperl perl preplibrary utilities $(dynamic_ext) $(nonxs_ext)
d745 2
d748 12
a759 1
	cd t && $(LDLIBPTH) ./perl TEST </dev/tty
d786 3
d812 3
a814 1
etags:	emacs/cperl-mode.elc
d817 8
d845 1
a845 1
os390)
d847 1
d855 15
a869 2
	sed -e 's/fprintf *( *stderr *,/PerlIO_printf(Perl_debug_log,/g' \
	    -e 's/y\.tab/perly/g' perly.c >perly.tmp && mv perly.tmp perly.c
d882 9
a890 1
        yacc a2p.y >/dev/null 2>&1
d917 3
d929 1
@


1.4
log
@Link with "-L. -lperl" if building a shrared libperl on OpenBSD
@
text
@d451 1
a451 1
perly.c: perly.y
d454 1
a454 1
perly.h: perly.y
@


1.3
log
@perl5.005_03 (stock)
@
text
@d54 1
a54 1
	netbsd*|freebsd[234]*)
@


1.2
log
@perl 5.004_04
@
text
@d28 1
d31 4
d43 4
d48 4
a51 1
	sunos*|freebsd[23]*|netbsd*)
d54 3
d93 6
d148 4
d154 2
a155 1
ext = \$(dynamic_ext) \$(static_ext)
d168 6
a173 7
# These variables will be used in a future version to make
# the make file more portable to non-unix systems.
AR = $ar
EXE_EXT = $exe_ext
LIB_EXT = $lib_ext
OBJ_EXT = $obj_ext
PATH_SEP = $path_sep
d185 3
d217 3
a219 2
h4 = regexp.h scope.h sv.h unixish.h util.h perlio.h
h = $(h1) $(h2) $(h3) $(h4)
d221 1
a221 1
c1 = $(mallocsrc) av.c scope.c op.c doop.c doio.c dump.c hv.c mg.c
d227 1
a227 1
obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT)
d248 9
a256 2
all: $(FIRSTMAKEFILE) miniperl $(private) $(plextract) $(public) $(dynamic_ext)
	@@echo " "; echo "	Everything is up to date."
d259 1
a259 1
	@@echo " "; echo "	Making x2p stuff"; cd x2p; $(MAKE) all
d262 1
a262 1
	@@echo " "; echo "	Making utilities"; cd utils; $(MAKE) all
d311 1
d339 2
a340 2
	$(CC) $(LARGE) $(CLDFLAGS) -o miniperl miniperlmain$(OBJ_EXT) $(LLIBPERL) $(libs)
	@@./miniperl -w -Ilib -MExporter -e 0 || $(MAKE) minitest
d343 1
a343 1
	$(SHRPENV) $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o perl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d346 1
a346 1
	$(SHRPENV) purify $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o pureperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d349 1
a349 1
	$(SHRPENV) purecov $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o purecovperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d352 1
a352 1
	$(SHRPENV) quantify $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o quantperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d360 1
a360 1
	$(SHRPENV) $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o suidperl perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d380 1
a380 1
	@@./miniperl -Ilib -e 'use AutoSplit; \
d387 2
a388 2
	./miniperl configpm tmp
	sh mv-if-diff tmp lib/Config.pm
d391 2
a392 4
	./miniperl minimod.pl > tmp && mv tmp $@@

$(plextract):	miniperl lib/Config.pm
	./miniperl -Ilib $@@.PL
d394 7
d404 8
a411 1
	./perl installperl
d414 1
a414 1
	./perl installman
d419 1
a419 1
	./perl installhtml                   \
d457 7
a463 1
# The following three header files are generated automatically
d466 5
a470 1
#	embed.h:  	embed.pl global.sym interp.sym
d479 2
d483 3
a485 3
# Names added to $(dynamic_ext) or $(static_ext) will automatically
# get built.  There should ordinarily be no need to change any of
# this part of makefile.
d493 1
a493 1
	@@sh ext/util/make_ext static $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d496 1
a496 1
	@@sh ext/util/make_ext dynamic $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d499 4
a502 1
	@@sh ext/util/make_ext static $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d507 1
a507 1
	@@echo "Note that make realclean does not delete config.sh"
d510 1
a510 1
	rm -f config.sh cppstdin
d526 1
a526 1
	-@@for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) ; do \
d529 1
d537 1
a537 1
	-@@for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) ; do \
d548 1
d570 2
a571 1
perl.exp: perl_exp.SH config.sh
d584 1
a584 1
test-prep: miniperl perl preplibrary $(dynamic_ext)
d588 1
a588 1
	cd t && ./perl TEST </dev/tty
d592 1
a592 1
	cd t && PERL_SKIP_TTY_TEST=1 ./perl TEST
d596 1
a596 1
minitest: miniperl
d600 1
a600 1
		&& ./perl TEST base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t </dev/tty
d605 9
a613 3
# If you want to report test failures, just use "perlbug -Ilib".
ok:
	./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)'
d616 1
a616 1
	echo $(c) | tr ' ' '\012' >.clist
d619 1
a619 1
	echo $(h) | tr ' ' '\012' >.hlist
d622 1
a622 1
	echo $(sh) | tr ' ' '\012' >.shlist
d625 1
a625 1
	echo $(pl) | tr ' ' '\012' >.pllist
d633 8
d653 67
@


1.1
log
@Initial revision
@
text
@d1 1
d26 36
a61 18
shrpenv=""
case "$d_shrplib" in
*define*)
    patchlevel=`egrep '^#define[ 	]+PATCHLEVEL' patchlevel.h \
	| awk '{print $3}'`
    case "$patchlevel" in
     *[0-9]) plibsuf=.$so.$patchlevel;;
     *)	    plibsuf=.$so;;
    esac
    if test "x$plibext" != "x" ; then  plibsuf=$plibext d_shrplib=custom ; fi
    case "$shrpdir" in
     /usr/lib)	;;
     "")	;;
     *)		shrpenv="env LD_RUN_PATH=$shrpdir";;
    esac
    pldlflags="$cccdlflags";;
*)  plibsuf=$lib_ext
    pldlflags="";;
a72 1
static_ai_list=' '
a75 6
	if test -f ext/$f/AutoInit.c; then
	    static_ai_list="$static_ai_list ext/$f/AutoInit.c"
	fi
	if test -f ext/$f/AutoInit.pl; then
	    static_ai_list="$static_ai_list ext/$f/AutoInit.pl"
	fi
d79 1
a79 1
$spitshell >Makefile <<'!NO!SUBS!'
d83 2
a84 2
#  Makefile is used to generate makefile.  The only difference
#  is that makefile has the dependencies filled in at the end.
a86 3
!NO!SUBS!

$spitshell >>Makefile <<!GROK!THIS!
d109 1
d119 1
d123 2
a124 1
PLIBSUF = $plibsuf
a129 1
static_ext_autoinit = $static_ai_list
d138 3
a140 2
## To use an alternate make, set \$altmake in config.sh.
MAKE = ${altmake-make}
d157 3
d165 1
a165 1
CCCMD = `sh $(shellflags) cflags $(perllib) $@@`
d175 1
a175 1
	makedir perl_exp writemain
d189 1
a189 1
h4 = regexp.h scope.h sv.h unixish.h util.h
d194 1
a194 1
c3 = gv.c sv.c taint.c toke.c util.c deb.c run.c globals.c
d200 2
a201 2
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) globals$(OBJ_EXT)
  
d206 1
a206 1
#	make clean; make perllib=libperl<type>.a
d210 3
a212 4
# Eventually some form of 'make-a-perl' script will automate this
# together with linking a perl executable with any desired
# static modules.
perllib = libperl$(PLIBSUF)
a215 3
# grrr
SHELL = /bin/sh

d219 1
a219 1
all: makefile miniperl $(private) $(plextract) $(public) $(dynamic_ext)
a236 12
# The $& notation tells Sequent machines that it can do a parallel make,
# and is harmless otherwise.
# The miniperl -w -MExporter line is a basic cheap test to catch errors
# before make goes on to run preplibrary and then MakeMaker on extensions.
# This is very handy because later errors are often caused by miniperl
# build problems but that's not obvious to the novice.
# The Module used here must not depend on Config or any extensions.

miniperl: $& miniperlmain$(OBJ_EXT) $(perllib)
	$(CC) $(LARGE) $(CLDFLAGS) -o miniperl miniperlmain$(OBJ_EXT) $(perllib) $(libs)
	@@./miniperl -w -Ilib -MExporter -e 0 || $(MAKE) minitest

d240 1
a240 1
perlmain.c: miniperlmain.c config.sh makefile $(static_ext_autoinit)
a252 10
perl: $& perlmain$(OBJ_EXT) $(perllib) $(DYNALOADER) $(static_ext) ext.libs
	$(SHRPENV) $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o perl perlmain$(OBJ_EXT) $(perllib) $(DYNALOADER) $(static_ext) `cat ext.libs` $(libs)

pureperl: $& perlmain$(OBJ_EXT) $(perllib) $(DYNALOADER) $(static_ext) ext.libs
	purify $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o pureperl perlmain$(OBJ_EXT) $(perllib) $(DYNALOADER) $(static_ext) `cat ext.libs` $(libs)

quantperl: $& perlmain$(OBJ_EXT) $(perllib) $(DYNALOADER) $(static_ext) ext.libs
	quantify $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o quantperl perlmain$(OBJ_EXT) $(perllib) $(DYNALOADER) $(static_ext) `cat ext.libs` $(libs)

$(perllib): $& perl$(OBJ_EXT) $(obj)
d255 5
a259 10
case "$d_shrplib" in
*define*)
$spitshell >>Makefile <<'!NO!SUBS!'
	$(LD) $(LDDLFLAGS) -o $@@ perl$(OBJ_EXT) $(obj)
!NO!SUBS!
;;
custom)
if test -r $osname/Makefile.SHs ; then 
  . $osname/Makefile.SHs
  $spitshell >>Makefile <<!GROK!THIS!
a261 1

d264 22
a285 8
  echo "Could not find $osname/Makefile.SH! Skipping target \$(perllib) in Makefile!"
fi
;;
*)
$spitshell >>Makefile <<'!NO!SUBS!'
	rm -f $(perllib)
	$(AR) rcu $(perllib) perl$(OBJ_EXT) $(obj)
	@@$(ranlib) $(perllib)
d287 26
a312 2
;;
esac
d314 2
a315 1
$spitshell >>Makefile <<'!NO!SUBS!'
d322 8
a329 2
suidperl: $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(perllib) $(DYNALOADER) $(static_ext) ext.libs
	$(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o suidperl perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(perllib) $(DYNALOADER) $(static_ext) `cat ext.libs` $(libs)
d347 3
a349 1
lib/Config.pm: config.sh miniperl
d367 12
a378 3
# Not implemented yet.
#install.html:	all installhtml
#	./perl installhtml
d388 1
a388 1
	@@ echo 'Expect' 130 shift/reduce and 1 reduce/reduce conflict
d390 1
d392 6
a397 3
	mv y.tab.h perly.h
	echo 'extern YYSTYPE yylval;' >>perly.h
	- perl vms/vms_yfix.pl perly.c perly.h vms/perly_c.vms vms/perly_h.vms
d432 1
a432 1
	@@sh ext/util/make_ext static $@@ LIBPERL_A=$(perllib)
d435 1
a435 1
	@@sh ext/util/make_ext dynamic $@@ LIBPERL_A=$(perllib)
d438 3
a440 1
	@@sh ext/util/make_ext static $@@ LIBPERL_A=$(perllib)
d442 10
a451 1
clean:
d454 5
a458 1
	-rm perl.export perl.dll perl.libexp perl.map perl.def
d463 1
a463 1
	sh ext/util/make_ext clean $$x ; \
a464 1
	rm -f perl suidperl miniperl $(perllib)
d466 2
a467 1
realclean: clean
d473 1
a473 1
	sh ext/util/make_ext realclean $$x ; \
a482 6
	@@echo "Note that make realclean does not delete config.sh"

clobber:	realclean
	rm -f config.sh cppstdin

distclean:	clobber
d492 3
a494 1
# Need to unset during recursion to go out of loop
d496 1
a496 1
MAKEDEPEND = makedepend
d498 1
a498 1
$(FIRSTMAKEFILE):	Makefile $(MAKEDEPEND)
d501 5
a505 2
config.h: config.sh
	/bin/sh config_h.SH
d509 1
a509 1
	sh ./makedepend
d517 5
a521 3
test: miniperl perl preplibrary $(dynamic_ext)
	- cd t && chmod +x TEST */*.t
	- cd t && (rm -f perl$(EXE_EXT); $(LNS) ../perl$(EXE_EXT) perl$(EXE_EXT)) && ./perl TEST </dev/tty
d523 6
d530 2
a531 1
	- cd t && chmod +x TEST */*.t
d533 8
a540 1
		&& ./perl TEST base/*.t comp/*.t cmd/*.t io/*.t op/*.t </dev/tty
d553 6
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a0 1
#! /bin/sh
d25 18
a42 51
linklibperl='$(LIBPERL)'
shrpldflags='$(LDDLFLAGS)'
ldlibpth=''
case "$useshrplib" in
true)
	# Prefix all runs of 'miniperl' and 'perl' with 
	# $ldlibpth so that ./perl finds *this* libperl.so.
	ldlibpth="LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH"

	pldlflags="$cccdlflags"
	# NeXT-4 specific stuff.  Can't we do this in the hint file?
	case "${osname}${osvers}" in
	next4*)
		ld=libtool
		lddlflags="-dynamic -undefined warning -framework System \
		-compatibility_version 1 -current_version $patchlevel \
		-prebind -seg1addr 0x27000000 -install_name \$(shrpdir)/\$@@"
		# NeXT uses a different name.
		ldlibpth="DYLD_LIBRARY_PATH=`pwd`:$DYLD_LIBRARY_PATH"
		;;
	beos*)	ldlibpth="LIBRARY_PATH=`pwd`:$LIBRARY_PATH"
		;;
	os2*)	# OS/2 doesn't need anything special for LD_LIBRARY_PATH.
		ldlibpth=''
		;;
	sunos*)
		linklibperl="-lperl"
		;;
	netbsd*|freebsd[234]*)
		linklibperl="-L. -lperl"
		;;
	aix*)
		shrpldflags="-H512 -T512 -bhalt:4 -bM:SRE -bE:perl.exp"
		case "$osvers" in
		3*)
			shrpldflags="$shrpldflags -e _nostart $ldflags $libs $cryptlib"
			;;
		*)
			shrpldflags="$shrpldflags -b noentry $ldflags $libs $cryptlib"
			;;
		esac
		aixinstdir=`pwd | sed 's/\/UU$//'`
		linklibperl="-L $archlibexp/CORE -L $aixinstdir -lperl"
		;;
	hpux10*)
		linklibperl="-L `pwd | sed 's/\/UU$//'` -Wl,+b$archlibexp/CORE -lperl"
		;;
	esac
	;;
*)	pldlflags=''
	;;
d54 1
d58 6
a63 6
done

nonxs_list=' '
for f in $nonxs_ext; do
    base=`echo "$f" | sed 's/.*\///'`
    nonxs_list="$nonxs_list ext/$f/pm_to_blib"
d67 1
a67 1
$spitshell >Makefile <<!GROK!THIS!
d71 2
a72 2
#  Makefile is used to generate $firstmakefile.  The only difference
#  is that $firstmakefile has the dependencies filled in at the end.
d75 3
a99 1
shrpdir = $archlibexp/CORE
a108 1
SHRPLDFLAGS = $shrpldflags
d112 1
a112 2
LIBPERL = $libperl
LLIBPERL= $linklibperl
a114 4
# The following is used to include the current directory in
# LD_LIBRARY_PATH if you are building a shared libperl.so.
LDLIBPTH = $ldlibpth

d117 2
a118 2
nonxs_ext = $nonxs_list
ext = \$(dynamic_ext) \$(static_ext) \$(nonxs_ext)
d127 10
a136 10
# This is set to  MAKE=$make if your $make command doesn't
# do it for you.
$make_set_make

# These variables may need to be manually set for non-Unix systems.
AR = $full_ar
EXE_EXT = $_exe
LIB_EXT = $_a
OBJ_EXT = $_o
PATH_SEP = $p_
a144 6
# grrr
SHELL = $sh

# how to tr(anslate) newlines
TRNL = '$trnl'

d150 1
a150 1
CCCMD = `sh $(shellflags) cflags $(LIBPERL) $@@`
d160 1
a160 1
	makedir perl.exp writemain
d174 2
a175 3
h4 = regexp.h scope.h sv.h unixish.h util.h iperlsys.h thread.h
h5 = bytecode.h byterun.h
h = $(h1) $(h2) $(h3) $(h4) $(h5)
d177 1
a177 1
c1 = $(mallocsrc) av.c scope.c op.c doop.c doio.c dump.c hv.c mg.c byterun.c
d179 1
a179 1
c3 = gv.c sv.c taint.c toke.c util.c deb.c run.c universal.c globals.c perlio.c
d183 1
a183 1
obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) byterun$(OBJ_EXT)
d185 2
a186 2
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT)

d191 1
a191 1
#	make clean; make LIBPERL=libperl<type>.a
d195 4
a198 3
# This mechanism is getting clunky and might not even work any more.
# EMBEDDING is on by default, and MULTIPLICITY doesn't work.
#
d202 3
d208 2
a209 9
all: $(FIRSTMAKEFILE) miniperl $(private) $(plextract) $(public) $(dynamic_ext) $(nonxs_ext)
	@@echo " ";
	@@echo "	Everything is up to date. 'make test' to run test suite."

compile: all
	echo "testing compilation" > testcompile;
	cd utils;  $(MAKE) compile;
	cd x2p; $(MAKE) compile; 
	cd pod; $(MAKE) compile;
d212 1
a212 1
	@@echo " "; echo "	Making x2p stuff"; cd x2p; $(LDLIBPTH) $(MAKE) all
d215 1
a215 1
	@@echo " "; echo "	Making utilities"; cd utils; $(LDLIBPTH) $(MAKE) all
d226 12
d241 1
a241 1
perlmain.c: miniperlmain.c config.sh $(FIRSTMAKEFILE)
d254 10
d266 10
a275 5
# How to build libperl.  This is still rather convoluted.
# Load up custom Makefile.SH fragment for shared loading and executables:
if test -r $osname/Makefile.SHs ; then
	. $osname/Makefile.SHs
	$spitshell >>Makefile <<!GROK!THIS!
d278 1
d281 8
a288 2
	$spitshell >>Makefile <<'!NO!SUBS!'
$(LIBPERL): $& perl$(OBJ_EXT) $(obj)
d290 2
a291 24
	case "$useshrplib" in
	true)
		$spitshell >>Makefile <<'!NO!SUBS!'
	$(LD) $(SHRPLDFLAGS) -o $@@ perl$(OBJ_EXT) $(obj)
!NO!SUBS!
		case "$osname" in
		aix)
			$spitshell >>Makefile <<'!NO!SUBS!'
	rm -f libperl$(OBJ_EXT)
	mv $@@ libperl$(OBJ_EXT)
	$(AR) qv $(LIBPERL) libperl$(OBJ_EXT)
!NO!SUBS!
			;;
		esac
		;;
	*)
		$spitshell >>Makefile <<'!NO!SUBS!'
	rm -f $(LIBPERL)
	$(AR) rcu $(LIBPERL) perl$(OBJ_EXT) $(obj)
	@@$(ranlib) $(LIBPERL)
!NO!SUBS!
		;;
	esac
	$spitshell >>Makefile <<'!NO!SUBS!'
d293 1
a293 25
# How to build executables.

# The $& notation tells Sequent machines that it can do a parallel make,
# and is harmless otherwise.
# The miniperl -w -MExporter line is a basic cheap test to catch errors
# before make goes on to run preplibrary and then MakeMaker on extensions.
# This is very handy because later errors are often caused by miniperl
# build problems but that's not obvious to the novice.
# The Module used here must not depend on Config or any extensions.

miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL)
	$(LDLIBPTH) $(CC) $(LARGE) $(CLDFLAGS) -o miniperl miniperlmain$(OBJ_EXT) $(LLIBPERL) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e 0 || $(MAKE) minitest

perl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
	$(SHRPENV) $(LDLIBPTH) $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o perl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

pureperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
	$(SHRPENV) $(LDLIBPTH) purify $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o pureperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

purecovperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
	$(SHRPENV) $(LDLIBPTH) purecov $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o purecovperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

quantperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
	$(SHRPENV) $(LDLIBPTH) quantify $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o quantperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d300 2
a301 8
suidperl: $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs
	$(SHRPENV) $(LDLIBPTH) $(CC) $(LARGE) $(CLDFLAGS) $(CCDLFLAGS) -o suidperl perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)

!NO!SUBS!

fi

$spitshell >>Makefile <<'!NO!SUBS!'
d315 1
a315 1
	$(LDLIBPTH) ./miniperl -Ilib -e 'use AutoSplit; \
d319 3
a321 5
# (If trying to create a new port and having problems with the configpm script, 
# try 'make minitest' and/or commenting out the tests at the end of configpm.)
lib/Config.pm: config.sh miniperl configpm
	$(LDLIBPTH) ./miniperl configpm tmp
	sh mv-if-diff tmp $@@
d324 4
a327 2
	$(LDLIBPTH) ./miniperl minimod.pl > tmp
	sh mv-if-diff tmp $@@
a328 7
lib/re.pm: ext/re/re.pm
	rm -f $@@
	cat ext/re/re.pm > $@@

$(plextract):	miniperl lib/Config.pm lib/re.pm
	$(LDLIBPTH) ./miniperl -Ilib $@@.PL
	
d332 1
a332 8
	if [ -n "$(COMPILE)" ]; \
	then \
		cd utils; $(MAKE) compile; \
		cd ../x2p; $(MAKE) compile; \
		cd ../pod; $(MAKE) compile; \
	else :; \
	fi
	$(LDLIBPTH) ./perl installperl
d335 1
a335 13
	$(LDLIBPTH) ./perl installman

# XXX Experimental. Hardwired values, but useful for testing.
# Eventually Configure could ask for some of these values.
install.html: all installhtml
	$(LDLIBPTH) ./perl installhtml                   \
      --podroot=. --podpath=. --recurse  \
      --htmldir=$(privlib)/html     \
      --htmlroot=$(privlib)/html    \
      --splithead=pod/perlipc     \
      --splititem=pod/perlfunc    \
      --libpods=perlfunc:perlguts:perlvar:perlrun:perlop \
      --verbose
d337 3
d349 1
a349 1
	@@ echo 'Expect' 113 shift/reduce and 1 reduce/reduce conflict
a350 1
	chmod 664 perly.c
d352 3
a354 6
	sed -e 's/fprintf *( *stderr *,/PerlIO_printf(Perl_debug_log,/g' \
	    -e 's/y\.tab/perly/g' perly.c >perly.tmp && mv perly.tmp perly.c
	echo 'extern YYSTYPE yylval;' >>y.tab.h
	cmp -s y.tab.h perly.h && rm -f y.tab.h || mv y.tab.h perly.h
	chmod 664 vms/perly_c.vms vms/perly_h.vms
	perl vms/vms_yfix.pl perly.c perly.h vms/perly_c.vms vms/perly_h.vms
d365 1
a365 7
# No compat3.sym here since and including the 5.004_50.
# No interp.sym since 5.005_03.
SYM  = global.sym perlio.sym thread.sym

SYMH = perlvars.h thrdvar.h

# The following files are generated automatically
d368 1
a368 5
#	embed.h:  	embed.pl global.sym
#	byterun.h:	bytecode.pl
#	byterun.c:	bytecode.pl
#	lib/B/Asmdata.pm:	bytecode.pl
#	regnodes.h:	regcomp.pl
a376 2
	perl bytecode.pl
	perl regcomp.pl
d379 3
a381 3
# Names added to $(dynamic_ext) or $(static_ext) or $(nonxs_ext) will
# automatically get built.  There should ordinarily be no need to change
# any of this part of makefile.
d389 1
a389 1
	@@$(LDLIBPTH) sh ext/util/make_ext static $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d392 1
a392 1
	@@$(LDLIBPTH) sh ext/util/make_ext dynamic $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d395 1
a395 14
	@@$(LDLIBPTH) sh ext/util/make_ext static $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)

n_dummy $(nonxs_ext):	miniperl preplibrary $(DYNALOADER) FORCE
	@@$(LDLIBPTH) sh ext/util/make_ext nonxs $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)

clean:		_tidy _mopup

realclean:	_cleaner _mopup
	@@echo "Note that make realclean does not delete config.sh or Policy.sh"

clobber:	_cleaner _mopup
	rm -f config.sh cppstdin Policy.sh

distclean:	clobber
d397 1
a397 2
# Do not 'make _mopup' directly.
_mopup:
d400 1
a400 5
	-rm -f perl.export perl.dll perl.libexp perl.map perl.def
	rm -f perl suidperl miniperl $(LIBPERL)

# Do not 'make _tidy' directly.
_tidy:
d404 2
a405 2
	-@@for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) $(nonxs_ext) ; do \
	sh ext/util/make_ext clean $$x MAKE=$(MAKE) ; \
d407 1
a407 1
	rm -f testcompile compilelog
d409 1
a409 2
# Do not 'make _cleaner' directly.
_cleaner:
d414 2
a415 2
	-@@for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) $(nonxs_ext) ; do \
	sh ext/util/make_ext realclean $$x MAKE=$(MAKE) ; \
d425 6
a430 1
	rm -f testcompile compilelog
d440 1
a440 3
# Need to unset during recursion to go out of loop.
# The README below ensures that the dependency list is never empty and
# that when MAKEDEPEND is empty $(FIRSTMAKEFILE) doesn't need rebuilding.
d442 1
a442 1
MAKEDEPEND = Makefile makedepend
d444 1
a444 1
$(FIRSTMAKEFILE):	README $(MAKEDEPEND)
d447 2
a448 6
config.h: config_h.SH config.sh
	$(SHELL) config_h.SH

# This is an AIXism.
perl.exp: perl_exp.SH config.sh $(SYM) $(SYMH)
	$(SHELL) perl_exp.SH
d452 1
a452 1
	sh ./makedepend MAKE=$(MAKE)
d460 3
a462 5
test-prep: miniperl perl preplibrary utilities $(dynamic_ext) $(nonxs_ext)
	cd t && (rm -f perl$(EXE_EXT); $(LNS) ../perl$(EXE_EXT) perl$(EXE_EXT))

test check: test-prep
	cd t && $(LDLIBPTH) ./perl TEST </dev/tty
d464 2
a465 9
# For testing without a tty or controling terminal. See t/op/stat.t
test-notty: test-prep
	cd t && PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) ./perl TEST

# Can't depend on lib/Config.pm because that might be where miniperl
# is crashing.
minitest: miniperl lib/re.pm
	@@echo "You may see some irrelevant test failures if you have been unable"
	@@echo "to build lib/Config.pm."
d467 1
a467 14
		&& $(LDLIBPTH) ./perl TEST base/*.t comp/*.t cmd/*.t io/*.t op/*.t pragma/*.t </dev/tty

# Handy way to run perlbug -ok without having to install and run the
# installed perlbug. We don't re-run the tests here - we trust the user.
# Please *don't* use this unless all tests pass.
# If you want to report test failures, use "make nok" instead.
ok:	utilities
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)'

okfile:	utilities
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok

nok:	utilities
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)'
d470 1
a470 1
	echo $(c) | tr ' ' $(TRNL) >.clist
d473 1
a473 1
	echo $(h) | tr ' ' $(TRNL) >.hlist
d476 1
a476 1
	echo $(sh) | tr ' ' $(TRNL) >.shlist
d479 1
a479 15
	echo $(pl) | tr ' ' $(TRNL) >.pllist

Makefile: Makefile.SH ./config.sh
	$(SHELL) Makefile.SH

distcheck: FORCE
	perl '-MExtUtils::Manifest=&fullcheck' -e 'fullcheck()'

elc:	emacs/cperl-mode.elc

emacs/cperl-mode.elc: emacs/cperl-mode.el
	-cd emacs; emacs -batch -q -no-site-file -f batch-byte-compile cperl-mode.el

etags:	emacs/cperl-mode.elc
	sh emacs/ptags
a492 67

# Now do any special processing required before building.

case "$ebcdic" in
$define)
    xxx=''
    echo "This is an EBCDIC system, checking if any parser files need regenerating." >&4
case "$osname" in
os390)
    rm -f y.tab.c y.tab.h
    yacc -d perly.y >/dev/null 2>&1
    if cmp -s y.tab.c perly.c; then
        rm -f y.tab.c
    else
        echo "perly.y -> perly.c" >&2
        mv -f y.tab.c perly.c
        chmod u+w perly.c
	sed -e 's/fprintf *( *stderr *,/PerlIO_printf(Perl_debug_log,/g' \
	    -e 's/y\.tab/perly/g' perly.c >perly.tmp && mv perly.tmp perly.c
        xxx="$xxx perly.c"
    fi
    if cmp -s y.tab.h perly.h; then
        rm -f y.tab.h
    else
        echo "perly.y -> perly.h" >&2
        mv -f y.tab.h perly.h
        xxx="$xxx perly.h"
    fi
    if cd x2p
    then
        rm -f y.tab.c y.tab.h
        yacc a2p.y >/dev/null 2>&1
        if cmp -s y.tab.c a2p.c
        then
            rm -f y.tab.c
        else
            echo "a2p.y -> a2p.c" >&2
            mv -f y.tab.c a2p.c
            chmod u+w a2p.c
            sed -e 's/fprintf *( *stderr *,/PerlIO_printf(Perl_debug_log,/g' \
                -e 's/y\.tab/a2p/g' a2p.c >a2p.tmp && mv a2p.tmp a2p.c
            xxx="$xxx a2p.c"
        fi
        # In case somebody yacc -d:ed the a2p.y.
        if test -f y.tab.h
        then
            if cmp -s y.tab.h a2p.h
            then
                rm -f y.tab.h
            else
                echo "a2p.h -> a2p.h" >&2
                mv -f y.tab.h a2p.h
                xxx="$xxx a2p.h"
            fi
        fi
        cd ..
    fi
    ;;
*)
    echo "'$osname' is an EBCDIC system I don't know that well." >&4
    ;;
esac
    case "$xxx" in
    '') echo "No parser files were regenerated.  That's okay." >&2 ;;
    esac
    ;;
esac
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d2 1
a2 1
case $CONFIGDOTSH in
d32 2
a33 7
	# $ldlibpth so that ./perl finds *this* shared libperl.
	case "$LD_LIBRARY_PATH" in
	'')
		ldlibpth="LD_LIBRARY_PATH=`pwd`";;
	*)
		ldlibpth="LD_LIBRARY_PATH=`pwd`:${LD_LIBRARY_PATH}";;
	esac
d36 1
d43 2
d46 1
a46 7
	rhapsody*|darwin*)
		shrpldflags="${ldflags} -dynamiclib \
			     -compatibility_version 1 \
			     -current_version \
				${api_version}.${api_subversion} \
			     -image_base 0x4be00000 \
			     -install_name \$(shrpdir)/\$@@"
d48 2
a49 2
	cygwin*)
		linklibperl="-lperl"
d54 1
a54 1
	netbsd*|freebsd[234]*|openbsd*)
d60 2
a61 1
		3*)	shrpldflags="$shrpldflags -e _nostart"
d63 2
a64 1
		*)	shrpldflags="$shrpldflags -b noentry"
d67 2
a68 2
	        shrpldflags="$shrpldflags $ldflags $libs $cryptlib"
		linklibperl="-L $archlibexp/CORE -L `pwd | sed 's/\/UU$//'` -lperl"
d70 2
a71 2
	hpux*)
		linklibperl="-L `pwd | sed 's/\/UU$//'` -Wl,+s -Wl,+b$archlibexp/CORE -lperl"
a73 15
	case "$ldlibpthname" in
	'') ;;
	*)
	    case "$osname" in
	    os2)
	        ldlibpth=''
	        ;;
	    *)
		eval "ldlibpth=\"$ldlibpthname=`pwd`:\$$ldlibpthname\""
		;;
	    esac
	    # Strip off any trailing :'s
	    ldlibpth=`echo $ldlibpth | sed 's/:*$//'`
	    ;;
        esac
d149 1
a149 1
# the dynamic loader path you are building a shared libperl.
a187 4
# not used by Makefile but by installperl;
# mentioned here so that metaconfig picks it up
INSTALL_USR_BIN_PERL = $installusrbinperl

d200 1
a200 1
	makedir.SH myconfig.SH writemain.SH
d203 1
a203 1
	makedir myconfig writemain
d208 1
a208 2
pl = pod/pod2html.PL pod/pod2latex.PL pod/pod2man.PL pod/pod2text.PL \
	pod/pod2usage.PL pod/podchecker.PL pod/podselect.PL
d210 1
a210 2
plextract = pod/pod2html pod/pod2latex pod/pod2man pod/pod2text \
	pod/pod2usage pod/podchecker pod/podselect
d216 1
a216 1
h3 = opcode.h patchlevel.h perl.h perlapi.h perly.h pp.h proto.h regcomp.h
d218 1
a218 1
h5 = utf8.h warnings.h
d221 3
a223 4
c1 = $(mallocsrc) av.c scope.c op.c doop.c doio.c dump.c hv.c mg.c
c2 = perl.c perly.c pp.c pp_hot.c pp_ctl.c pp_sys.c regcomp.c regexec.c utf8.c
c3 = gv.c sv.c taint.c toke.c util.c deb.c run.c universal.c xsutils.c
c4 = globals.c perlio.c perlapi.c
d225 1
a225 1
c = $(c1) $(c2) $(c3) $(c4) miniperlmain.c perlmain.c
d227 1
a227 1
obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT)
d229 1
a229 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) xsutils$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT)
d248 1
a248 1
all: $(FIRSTMAKEFILE) miniperl extra.pods $(private) $(public) $(dynamic_ext) $(nonxs_ext)
d261 1
a261 1
utilities:	miniperl lib/Config.pm $(plextract) FORCE
a272 6
opmini$(OBJ_EXT): op.c
	$(RMS) opmini.c
	$(LNS) op.c opmini.c
	$(CCCMD) $(PLDLFLAGS) -DPERL_EXTERNAL_GLOB opmini.c
	$(RMS) opmini.c

d277 2
a278 2
	sh writemain $(DYNALOADER) $(static_ext) > writemain.tmp
	sh mv-if-diff writemain.tmp perlmain.c
d293 2
a294 68
case "$osname" in
*)
	Makefile_s="$osname/Makefile.SHs"
	;;
esac

case "$osname" in
aix)
	$spitshell >>Makefile <<!GROK!THIS!
LIBS			= $libs
# In AIX we need to change this for building Perl itself from
# its earlier definition (which is for building external
# extensions *after* Perl has been built and installed)
CCDLFLAGS		= `echo $ccdlflags|sed -e 's@@-bE:.*/perl\.exp@@-bE:perl.exp@@'`

!GROK!THIS!
	case "$useshrplib" in
	define|true|[yY]*)
		$spitshell >>Makefile <<'!NO!SUBS!'

LIBPERL_NONSHR		= libperl_nonshr$(LIB_EXT)
MINIPERL_NONSHR		= miniperl_nonshr$(EXE_EXT)

$(LIBPERL_NONSHR): perl$(OBJ_EXT) $(obj)
	$(RMS) $(LIBPERL_NONSHR)
	$(AR) rcu $(LIBPERL_NONSHR) perl$(OBJ_EXT) $(obj)

$(MINIPERL_NONSHR): $(LIBPERL_NONSHR) miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)
	$(CC) $(LDFLAGS) -o $(MINIPERL_NONSHR) miniperlmain$(OBJ_EXT) \
	    opmini$(OBJ_EXT) $(LIBPERL_NONSHR) $(LIBS)

MINIPERLEXP		= $(MINIPERL_NONSHR)

LIBPERLEXPORT		= perl.exp

!NO!SUBS!
		
		;;
	*)	
		$spitshell >>Makefile <<'!NO!SUBS!'
MINIPERLEXP		= miniperl$(EXE_EXT)

PERLEXPORT		= perl.exp

!NO!SUBS!
	;;
	esac
	$spitshell >>Makefile <<'!NO!SUBS!'
perl.exp: $(MINIPERLEXP) makedef.pl config.sh $(SYM) $(SYMH)
	./$(MINIPERLEXP) makedef.pl PLATFORM=aix | sort -u | sort -f > perl.exp.tmp
	sh mv-if-diff perl.exp.tmp perl.exp

!NO!SUBS!
	;;
os2)
	$spitshell >>Makefile <<'!NO!SUBS!'
MINIPERLEXP		= miniperl

perl5.def: $(MINIPERLEXP) makedef.pl config.sh $(SYM) $(SYMH) miniperl.map
	./$(MINIPERLEXP) makedef.pl PLATFORM=os2 -DPERL_DLL=$(PERL_DLL) > perl.exp.tmp
	sh mv-if-diff perl.exp.tmp perl5.def

!NO!SUBS!
	;;
esac

if test -r $Makefile_s ; then
	. $Makefile_s
d297 1
a297 1
Makefile: $Makefile_s
d301 1
a301 1
$(LIBPERL): $& perl$(OBJ_EXT) $(obj) $(LIBPERLEXPORT)
d338 3
a340 31
!NO!SUBS!

	case "${osname}${osvers}" in
	next4*)
		$spitshell >>Makefile <<'!NO!SUBS!'
miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
	$(CC) -o miniperl `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perl$(OBJ_EXT) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
!NO!SUBS!
		;;
	aix*)
		$spitshell >>Makefile <<'!NO!SUBS!'
miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
	$(CC) -o miniperl $(CLDFLAGS) \
	    `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perl$(OBJ_EXT) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
!NO!SUBS!
		;;
	*)
		$spitshell >>Makefile <<'!NO!SUBS!'
miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
	$(LDLIBPTH) $(CC) $(LARGE) $(CLDFLAGS) -o miniperl \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(LLIBPERL) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
!NO!SUBS!
		;;
	esac

	$spitshell >>Makefile <<'!NO!SUBS!'
d342 1
a342 1
perl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d345 1
a345 1
pureperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d348 1
a348 1
purecovperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d351 1
a351 1
quantperl: $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d359 1
a359 1
suidperl: $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d377 1
a377 1
preplibrary: miniperl lib/Config.pm
d386 3
a388 3
lib/Config.pm: config.sh miniperl configpm lib/re.pm
	$(LDLIBPTH) ./miniperl configpm configpm.tmp
	sh mv-if-diff configpm.tmp $@@
d391 2
a392 2
	$(LDLIBPTH) ./miniperl minimod.pl > minimod.tmp
	sh mv-if-diff minimod.tmp $@@
d398 1
a398 1
$(plextract):	miniperl lib/Config.pm
d400 1
a400 14

extra.pods: miniperl
	-@@test -f extra.pods && rm -f `cat extra.pods`
	-@@rm -f extra.pods
	-@@for x in `grep -l '^=[a-z]' README.* | grep -v README.vms` ; do \
	    nx=`echo $$x | sed -e "s/README\.//"`; \
	    $(LNS) ../$$x "pod/perl"$$nx".pod" ; \
	    echo "pod/perl"$$nx".pod" >> extra.pods ; \
	done
	-@@test -f vms/perlvms.pod && $(LNS) ../vms/perlvms.pod pod/perlvms.pod && echo "pod/perlvms.pod" >> extra.pods

install-strip:
	$(MAKE) STRIPFLAGS=-s install

d411 1
a411 1
	$(LDLIBPTH) ./perl installperl $(STRIPFLAGS)
a418 1
	-@@test -f README.vms && $(LNS) ../README.vms vms/README_vms.pod
d437 1
d439 1
a439 1
	-chmod 664 perly.c
d443 1
a443 1
	sed -e '/^extern YYSTYPE yy/D' y.tab.h >yh.tmp && mv yh.tmp y.tab.h
d459 1
a459 1
SYM  = global.sym globvar.sym perlio.sym pp.sym
d461 1
a461 3
SYMH = perlvars.h intrpvar.h thrdvar.h

CHMOD_W = chmod +w
d464 7
a470 10
#	keywords.pl:	keywords.h
#	opcode.pl:	opcode.h opnames.h pp_proto.h pp.sym
# [* embed.pl needs pp.sym generated by opcode.pl! *]
#	embed.pl:	proto.h embed.h embedvar.h global.sym objXSUB.h
#			perlapi.h perlapi.c pod/perlintern.pod
#			pod/perlapi.pod
#	bytecode.pl:	ext/ByteLoader/byterun.h ext/ByteLoader/byterun.c
#			ext/B/B/Asmdata.pm
#	regcomp.pl:	regnodes.h
#	warnings.pl:	warnings.h lib/warnings.pm
d473 1
a473 1
# To force them to be regenerated, type
a474 8

AUTOGEN_FILES = keywords.h opcode.h opnames.h pp_proto.h pp.sym proto.h \
		embed.h embedvar.h global.sym \
		pod/perlintern.pod pod/perlapi.pod \
		objXSUB.h perlapi.h perlapi.c ext/ByteLoader/byterun.h \
		ext/ByteLoader/byterun.c ext/B/B/Asmdata.pm regnodes.h \
		warnings.h lib/warnings.pm

d476 5
a480 7
	-$(CHMOD_W) $(AUTOGEN_FILES)
	-perl keywords.pl
	-perl opcode.pl
	-perl embed.pl
	-perl bytecode.pl
	-perl regcomp.pl
	-perl warnings.pl
d517 1
a517 3
	-@@test -f extra.pods && rm -f `cat extra.pods`
	-@@test -f vms/README_vms.pod && rm -f vms/README_vms.pod
	-rm -f perl.exp ext.libs extra.pods
a518 1
	-rm -f perl.loadmap miniperl.loadmap perl.prelmap miniperl.prelmap
d523 3
a525 3
	-cd pod; $(LDLIBPTH) $(MAKE) clean
	-cd utils; $(LDLIBPTH) $(MAKE) clean
	-cd x2p; $(LDLIBPTH) $(MAKE) clean
d527 1
a527 1
	$(LDLIBPTH) sh ext/util/make_ext clean $$x MAKE=$(MAKE) ; \
d534 3
a536 3
	-cd pod; $(LDLIBPTH) $(MAKE) realclean
	-cd utils; $(LDLIBPTH) $(MAKE) realclean
	-cd x2p; $(LDLIBPTH) $(MAKE) realclean
d538 1
a538 1
	$(LDLIBPTH) sh ext/util/make_ext realclean $$x MAKE=$(MAKE) ; \
d540 1
a540 1
	rm -f *.orig */*.orig *~ */*~ core core.*perl.*.? *perl.core t/core t/core.perl.*.? t/*perl.core t/misctmp* t/tmp* t/c t/perl .?*.c so_locations $(LIBPERL_NONSHR) $(MINIPERL_NONSHR)
d545 1
a545 1
	rm -f lib/.exists lib/*/.exists
a548 1
	-rmdir lib/B lib/Data lib/IO/Socket lib/IO
d570 4
d584 1
a584 3
# Cannot delegate rebuilding of t/perl to make to allow interlaced
# test and minitest
test-prep: miniperl perl preplibrary utilities $(dynamic_ext) $(nonxs_ext) $(TEST_PERL_DLL)
a586 2
# Second branch is for testing without a tty or controling terminal.
# See t/op/stat.t
d588 1
a588 12
	if (true </dev/tty) >/dev/null 2>&1; then \
	  cd t && $(LDLIBPTH) ./perl TEST </dev/tty; \
	else \
	  cd t && PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) ./perl TEST; \
	fi

utest ucheck: test-prep
	if (true </dev/tty) >/dev/null 2>&1; then \
	  cd t && $(LDLIBPTH) ./perl UTEST </dev/tty; \
	else \
	  cd t && PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) ./perl UTEST; \
	fi
a614 3
nokfile:	utilities
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok

d638 1
a638 3
etags:	TAGS

TAGS: emacs/cperl-mode.elc
a640 8
ctags:	tags

# Let's hope make will not go into an infinite loop on case-unsensitive systems
# This may also fail if . is in the head of the path, since perl will
# require -Ilib
tags:	TAGS
	perl emacs/e2ctags.pl TAGS > tags

d661 1
a661 1
os390|posix-bc)
a662 1
    # yacc must be a reentrant ("pure") Bison in BS2000 Posix!
d670 2
a671 15
        sed -e '/^#include "perl\.h"/a\
\
#define yydebug    PL_yydebug\
#define yynerrs    PL_yynerrs\
#define yyerrflag  PL_yyerrflag\
#define yychar     PL_yychar\
#define yyval      PL_yyval\
#define yylval     PL_yylval'				\
            -e '/YYSTYPE *yyval;/D'			\
            -e '/YYSTYPE *yylval;/D'			\
            -e '/int  yychar,/,/yynerrs;/D'		\
            -e 's/int yydebug = 0;/yydebug = 0;/'	\
            -e 's/[^_]realloc(/PerlMem_realloc(/g'	\
            -e 's/fprintf *( *stderr *,/PerlIO_printf(Perl_debug_log,/g' \
            -e 's/y\.tab/perly/g' perly.c >perly.tmp && mv perly.tmp perly.c
d684 1
a684 9
        case "$osname" in
        posix-bc)
           # we are using two different yaccs in BS2000 Posix!
           byacc a2p.y >/dev/null 2>&1
           ;;
        *) # e.g. os390
           yacc  a2p.y >/dev/null 2>&1
           ;;
        esac
a710 3
vmesa)
    # Do nothing in VM/ESA.
    ;;
a719 1

@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a28 1
DPERL_EXTERNAL_GLOB='-DPERL_EXTERNAL_GLOB'
d73 1
a73 1
	        shrpldflags="$shrpldflags $ldflags $perllibs $cryptlib"
a78 5
	os390*)
            shrpldflags='-W l,dll'
	    linklibperl='libperl.x'
	    DPERL_EXTERNAL_GLOB=''
	    ;;
a119 18
# Handle the usage of different yaccs in posix-bc (During Configure we
# us yacc for perly.y and byacc for a2p.y.  The makefiles must use the
# same configuration for run_byacc!):
case "$osname" in
    posix-bc)
	byacc=$yacc
	;;
esac

# Handle the usage of different yaccs in posix-bc (During Configure we
# us yacc for perly.y and byacc for a2p.y.  The makefiles must use the
# same configuration for run_byacc!):
case "$osname" in
    posix-bc)
	byacc=$yacc
	;;
esac

d137 2
a141 2
# NOTE: some systems don't grok "cp -f". XXX Configure test needed?
CPS = $cp
d179 1
a179 1
libs = $perllibs $cryptlib
a208 1
!GROK!THIS!
d210 2
a211 3
# mentioned here so that metaconfig picks these up
# $installusrbinperl
# $versiononly
d213 1
d225 1
a225 1
	makedir.SH myconfig.SH writemain.SH pod/Makefile.SH
d228 1
a228 1
	makedir myconfig writemain pod/Makefile
d234 1
a234 2
	pod/pod2usage.PL pod/podchecker.PL pod/podselect.PL \
	pod/buildtoc.PL
d237 1
a237 2
	pod/pod2usage pod/podchecker pod/podselect \
	pod/buildtoc
a299 1
!NO!SUBS!
d301 5
a305 6
$spitshell >>Makefile <<!GROK!THIS!
opmini\$(OBJ_EXT): op.c config.h
	\$(RMS) opmini.c
	\$(CPS) op.c opmini.c
	\$(CCCMD) \$(PLDLFLAGS) $DPERL_EXTERNAL_GLOB opmini.c
	\$(RMS) opmini.c
d307 1
a307 3
!GROK!THIS!
$spitshell >>Makefile <<'!NO!SUBS!'
miniperlmain$(OBJ_EXT): miniperlmain.c patchlevel.h
d336 1
a336 1
LIBS			= $perllibs
d406 1
a406 1
	$(LD) -o $@@ $(SHRPLDFLAGS) perl$(OBJ_EXT) $(obj)
d461 1
a461 1
	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o miniperl \
d471 1
a471 1
	$(SHRPENV) $(LDLIBPTH) $(CC) -o perl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d474 1
a474 1
	$(SHRPENV) $(LDLIBPTH) purify $(CC) -o pureperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d477 1
a477 1
	$(SHRPENV) $(LDLIBPTH) purecov $(CC) -o purecovperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d480 1
a480 1
	$(SHRPENV) $(LDLIBPTH) quantify $(CC) -o quantperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d488 1
a488 1
	$(SHRPENV) $(LDLIBPTH) $(CC) -o suidperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d496 1
a496 1
sperl$(OBJ_EXT): perl.c $(h)
d534 1
a534 1
	    cd pod ; $(LNS) ../$$x "perl"$$nx".pod" ; cd .. ; \
d537 1
a537 1
	-@@test -f vms/perlvms.pod && cd pod && $(LNS) ../vms/perlvms.pod perlvms.pod && cd .. && echo "pod/perlvms.pod" >> extra.pods
d542 1
a542 11
install:
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS)

install-verbose:
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-V

install-silent:
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-S

no-install:
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-n
d552 1
a552 1
	$(LDLIBPTH) ./perl installperl $(INSTALLFLAGS) $(STRIPFLAGS)
d555 1
a555 1
	$(LDLIBPTH) ./perl installman $(INSTALLFLAGS)
d560 1
a560 1
	-@@test -f README.vms && cd vms && $(LNS) ../README.vms README_vms.pod && cd ..
d580 1
a580 1
	-chmod 664 perly.c perly.h
d627 1
a627 2
		warnings.h lib/warnings.pm \
		vms/perly_c.vms vms/perly_h.vms
a637 8
regen_pods:	FORCE
	-cd pod; $(LDLIBPTH) make regen_pods

regen_vms:	FORCE
	-perl vms/vms_yfix.pl perly.c perly.h vms/perly_c.vms vms/perly_h.vms

regen_all: regen_headers regen_pods regen_vms

d662 1
a662 1
realclean:	_realcleaner _mopup
d665 1
a665 1
_clobber:
a667 2
clobber:	_realcleaner _mopup _clobber

a669 4
# Like distclean but also removes emacs backups and *.orig.
veryclean:	_verycleaner _mopup _clobber
	-@@rm -f Obsolete Wanted

d675 1
a675 1
	-rm -f perl.exp ext.libs extra.pods opmini.o
d678 1
a678 1
	rm -f perl suidperl miniperl $(LIBPERL) libperl.* microperl
d690 2
a691 1
_cleaner1:
d693 3
a695 3
	-cd pod; $(LDLIBPTH) $(MAKE) $(CLEAN)
	-cd utils; $(LDLIBPTH) $(MAKE) $(CLEAN)
	-cd x2p; $(LDLIBPTH) $(MAKE) $(CLEAN)
d697 1
a697 1
	$(LDLIBPTH) sh ext/util/make_ext $(CLEAN) $$x MAKE=$(MAKE) ; \
d699 1
a699 3

_cleaner2:
	rm -f core core.*perl.*.? *perl.core t/core t/core.perl.*.? t/*perl.core t/misctmp* t/forktmp* t/tmp* t/c t/perl t/rantests .?*.c so_locations $(LIBPERL_NONSHR) $(MINIPERL_NONSHR)
d708 1
a708 10
	-rmdir lib/B lib/Data lib/IO/Socket lib/IO lib/Sys lib/Thread

_realcleaner: 
	@@$(LDLIBPTH) $(MAKE) _cleaner1 CLEAN=realclean
	@@$(LDLIBPTH) $(MAKE) _cleaner2

_verycleaner: 
	@@$(LDLIBPTH) $(MAKE) _cleaner1 CLEAN=veryclean
	@@$(LDLIBPTH) $(MAKE) _cleaner2
	-rm -f *~ *.orig */*~ */*.orig */*/*~ */*/*.orig
d715 1
a715 1
lint: $(c)
a752 1
	@@echo "Ran tests" > t/rantests
d771 1
a771 1
		&& $(LDLIBPTH) ./perl TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t pragma/*.t </dev/tty
a782 6
oknack:	utilities
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -A

okfilenack:	utilities
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A

a788 6
noknack:	utilities
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -A

nokfilenack:	utilities
	$(LDLIBPTH) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A

a898 1
		-e 's|^static void __YY_YACC_MAIN.*BS2000.*|/*static main deleted*/|' \
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d2 1
a2 1
case $PERL_CONFIG_SH in
d4 5
a8 2
	if test -f config.sh
		then TOP=.
d32 1
a32 1
	# Prefix all runs of 'miniperl' and 'perl' with
a41 1
	static_target='static_pic'
d51 1
a51 2
                            -compatibility_version \
				${api_revision}.${api_version}.${api_subversion} \
d53 2
a54 1
				${revision}.${patchlevel}.${subversion} \
a102 11
	static_target='static'
	;;
esac

case "$ldlibpth" in
# Protect any spaces
*" "*) ldlibpth=`echo $ldlibpth|sed 's/ /\\\\ /g'` ;;
esac

case "$osname" in
os390)	test -f /bin/env && ldlibpth="/bin/env $ldlibpth"
d135 9
a192 7
# Static targets are ordinarily built without CCCDLFLAGS.  However,
# if building a shared libperl.so that might later be linked into
# another application, then it might be appropriate to also build static
# extensions (usually just DynaLoader) with relocatable code (e.g. -fPIC
# for GNU cc).  This is handled by ext/util/make_ext.
STATIC = $static_target

d205 1
a205 1
public = perl\$(EXE_EXT) $suidperl utilities translators
a212 2
# Mention $gmake here so it gets probed for by Configure.

d225 1
a225 1
.SUFFIXES: .c \$(OBJ_EXT) .i .s
a232 6
OPTIMIZE = $optimize

EXTRAS = $extras

INSTALLPREFIXEXP = $prefix

a238 15
case "${osname}:${osvers}" in
darwin:*)
$spitshell >>Makefile <<EOF

# Your locales are broken (osname $osname, osvers $osvers)
# and to avoid the numerous
# perl: warning: Setting locale failed.
# warnings during the build process we reset the locale variables.

LC_ALL=C
LANG=C
LANGUAGE=C
EOF
	;;
esac
d243 1
a243 3
CCCMD    = `sh $(shellflags) cflags "optimize='$(OPTIMIZE)'" $@@`

CCCMDSRC = `sh $(shellflags) cflags "optimize='$(OPTIMIZE)'" $<`
d245 1
a245 1
private = preplibrary lib/Config.pm lib/ExtUtils/Miniperl.pm
a261 1
# lib/lib.pm is not listed here because it has a rule of its own.
d266 1
a266 1
addedbyconf = UU $(shextract) $(plextract) lib/lib.pm pstruct
d275 1
a275 1
c1 = $(mallocsrc) av.c scope.c op.c doop.c doio.c dump.c hv.c mg.c reentr.c
d278 1
a278 1
c4 = globals.c perlio.c perlapi.c numeric.c locale.c pp_pack.c pp_sort.c
d282 1
a282 1
obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT)
d284 1
a284 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) xsutils$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT)
d288 10
d303 1
a303 7
.c.i:
	$(CCCMDSRC) -E $*.c > $*.i

.c.s:
	$(CCCMDSRC) -S $*.c

all: $(FIRSTMAKEFILE) miniperl$(EXE_EXT) extra.pods $(private) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
d305 1
a305 3
	@@echo "	Everything is up to date. Type '$(MAKE) test' to run test suite."

.PHONY: all compile translators utilities
d310 1
a310 1
	cd x2p; $(MAKE) compile;
d313 1
a313 1
translators:	miniperl$(EXE_EXT) lib/Config.pm FORCE
d316 1
a316 1
utilities:	miniperl$(EXE_EXT) lib/Config.pm $(plextract) lib/lib.pm FORCE
a324 1
.PHONY: FORCE
d328 1
a329 5

# We do a copy of the op.c instead of a symlink because gcc gets huffy
# if we have a symlink forest to another disk (it complains about too many
# levels of symbolic links, even if we have only two)

a344 6
!NO!SUBS!
case "$osname" in
cygwin)
	;; # Let cygwin/Makefile.SHs do its work.
*)
	$spitshell >>Makefile <<'!NO!SUBS!'
a347 4
!NO!SUBS!
	;;
esac
$spitshell >>Makefile <<'!NO!SUBS!'
d472 1
a472 1
	aix*)
d475 1
a475 2
	$(CC) -o miniperl $(CLDFLAGS) \
	    `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
d480 1
a480 1
	beos*|next4*)
d483 2
a484 1
	$(CC) -o miniperl `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
d491 1
a491 2
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
	-@@rm -f miniperl.xok
d501 2
a502 3
perl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
	-@@rm -f miniperl.xok
	$(SHRPENV) $(LDLIBPTH) $(CC) -o perl$(PERL_SUFFIX) $(PERL_PROFILE_LDFLAGS) $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d504 1
a504 3
# Purify/Quantify Perls.

pureperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d507 1
a507 1
purecovperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
d510 1
a510 1
quantperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
a512 79
# Third Degree Perl (Tru64 only)

perl.config.dashg:
	@@echo "Checking optimize='-g' in config.sh..."
	@@grep "^optimize="     config.sh
	@@grep "^optimize='-g'" config.sh >/dev/null || exit 1

perl.third.config: config.sh
	@@echo "To build perl.third you must Configure -Doptimize=-g -Uusemymalloc, checking..."
	@@$(MAKE) perl.config.dashg
	@@echo "Checking usemymalloc='n' in config.sh..."
	@@grep "^usemymalloc="    config.sh
	@@grep "^usemymalloc='n'" config.sh >/dev/null || exit 1

perl.third: /usr/bin/atom perl.third.config perl
	atom -tool third -L. -all -gp -toolargs="-invalid -uninit heap+stack+copy -min 0" perl
	@@echo "Now you may run perl.third and then study perl.3log."

# Pixie Perls (Tru64 and IRIX only)

perl.pixie.config: config.sh
	@@echo "To build perl.pixie you must Configure -Doptimize=-g, checking..."
	@@$(MAKE) perl.config.dashg

perl.pixie.atom: /usr/bin/atom perl
	atom -tool pixie -L. -all -toolargs="-quiet" perl

perl.pixie.irix: perl
	pixie perl

perl.pixie: /usr/bin/pixie perl.pixie.config perl
	if test -x /usr/bin/atom; then \
	  $(MAKE) perl.pixie.atom; \
	else \
	  $(MAKE) perl.pixie.irix; \
	fi
	@@echo "Now you may run perl.pixie and then run pixie."

# Gprof Perl

perl.config.dashpg:
	@@echo "Checking optimize='-pg' in config.sh..."
	@@grep "^optimize="      config.sh
	@@grep "^optimize='.*-pg.*'" config.sh >/dev/null || exit 1

perl.gprof.config: config.sh
	@@echo "To build perl.gprof you must Configure -Doptimize=-pg, checking..."
	@@$(MAKE) perl.config.dashpg

perl.gprof: /usr/bin/gprof perl.gprof.config
	@@-rm -f perl
	$(MAKE) PERL_SUFFIX=.gprof PERL_PROFILE_LDFLAGS=-pg perl
	@@echo "Now you may run perl.gprof and then run gprof perl.gprof."

# Gcov Perl

perl.config.gcov:
	@@echo "To build perl.gcov you must use gcc 3.0 or newer, checking..."
	@@echo "Checking gccversion in config.sh..."
	@@grep "^gccversion="      config.sh
	@@grep "^gccversion='[3-9]\." config.sh >/dev/null || exit 1
	@@echo "To build perl.gcov you must Configure -Dccflags=-fprofile-arcs -ftest-coverage, checking..."
	@@echo "Checking ccflags='-fprofile-arcs -ftest-coverage' in config.sh..."
	@@grep "^ccflags="      config.sh
	@@grep "^ccflags='.*-fprofile-arcs -ftest-coverage.*'" config.sh >/dev/null || exit 1

perl.gcov: perl.config.gcov
	@@-rm -f perl
	$(MAKE) PERL_SUFFIX=.gcov PERL_PROFILE_LDFLAGS='' perl
	@@echo "Now you may run perl.gcov and then run gcov some.c."

# Microperl.  This is just a convenience thing if one happens to
# build also the full Perl and therefore the real big Makefile:
# usually one should manually explicitly issue the below command.

.PHONY: microperl
microperl:
	$(MAKE) -f Makefile.micro

d518 1
a518 1
suidperl$(EXE_EXT): $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(DYNALOADER) $(static_ext) ext.libs $(PERLEXPORT)
a534 1
# We need to autosplit in two steps because VOS can't handle so many args
d536 1
a536 2
.PHONY: preplibrary
preplibrary: miniperl$(EXE_EXT) lib/Config.pm lib/lib.pm $(PREPLIBRARY_LIBPERL)
d540 1
a540 4
		autosplit_lib_modules(@@ARGV)' lib/*.pm
	$(LDLIBPTH) ./miniperl -Ilib -e 'use AutoSplit; \
		autosplit_lib_modules(@@ARGV)' lib/*/*.pm
	$(MAKE) lib/re.pm
d543 1
a543 1
# (If trying to create a new port and having problems with the configpm script,
d545 2
a546 2
lib/Config.pm: config.sh miniperl$(EXE_EXT) configpm Porting/Glossary
	$(LDLIBPTH) ./miniperl -Ilib configpm configpm.tmp
d549 1
a549 1
lib/ExtUtils/Miniperl.pm: miniperlmain.c miniperl$(EXE_EXT) minimod.pl lib/Config.pm
a551 1
	-touch lib/ExtUtils/Miniperl.pm
d554 2
a555 1
	cp ext/re/re.pm ext/re/re.tmp && sh mv-if-diff ext/re/re.tmp lib/re.pm
d557 1
a557 2
$(plextract):	miniperl$(EXE_EXT) lib/Config.pm x2p/s2p
	@@-rm -f $@@
d560 1
a560 8
x2p/s2p: miniperl$(EXE_EXT) lib/Config.pm x2p/s2p.PL
	cd x2p; $(LDLIBPTH) $(MAKE) s2p

lib/lib.pm:	miniperl$(EXE_EXT) lib/Config.pm
	@@-rm -f $@@
	$(LDLIBPTH) ./miniperl -Ilib lib/lib_pm.PL

extra.pods: miniperl$(EXE_EXT)
a567 1
	-@@rm -f pod/perlvms.pod
a569 12
extras.make: perl$(EXE_EXT)
	-@@test -s extras.lst && $(LDLIBPTH) PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib ./perl -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`

extras.test: perl$(EXE_EXT)
	-@@test -s extras.lst && $(LDLIBPTH) PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib ./perl -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`

extras.install: perl$(EXE_EXT)
	-@@test -s extras.lst && $(LDLIBPTH) PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib ./perl -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`

.PHONY: install install-strip install-all install-verbose install-silent \
	no-install install.perl install.man install.html

d573 1
a573 1
install install-all:
a593 1
	$(MAKE) extras.install
d619 1
a619 6
.PHONY: check_byacc run_byacc

check_byacc:
	@@$(BYACC) -V 2>&1 | grep 'version 1\.8\.2'

run_byacc:	FORCE check_byacc
a626 1
	perl -i.old perlyline.pl perly.c
a638 5
PERLYVMS = vms/perly_c.vms vms/perly_h.vms

$(PERLYVMS):	perly.c perly.h vms/vms_yfix.pl
	perl vms/vms_yfix.pl perly.c perly.h vms/perly_c.vms vms/perly_h.vms

d651 1
a651 1
#	embed.pl:	proto.h embed.h embedvar.h global.sym
d666 1
a666 1
		perlapi.h perlapi.c ext/ByteLoader/byterun.h \
d668 2
a669 3
		warnings.h lib/warnings.pm

.PHONY: regen_headers regen_pods regen_all
a678 1
	-perl autodoc.pl
d681 4
a684 1
	-cd pod; $(LDLIBPTH) $(MAKE) regen_pods
d686 1
a686 1
regen_all: $(PERLYVMS) regen_headers regen_pods
d698 2
a699 2
$(DYNALOADER):	miniperl$(EXE_EXT) preplibrary FORCE
	@@$(LDLIBPTH) sh ext/util/make_ext $(STATIC) $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d701 1
a701 1
d_dummy $(dynamic_ext):	miniperl$(EXE_EXT) preplibrary $(DYNALOADER) FORCE
d704 2
a705 2
s_dummy $(static_ext):	miniperl$(EXE_EXT) preplibrary $(DYNALOADER) FORCE
	@@$(LDLIBPTH) sh ext/util/make_ext $(STATIC) $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d707 1
a707 1
n_dummy $(nonxs_ext):	miniperl$(EXE_EXT) preplibrary $(DYNALOADER) FORCE
a709 4
.PHONY: clean _tidy _mopup _cleaner1 _cleaner2 \
	realclean _realcleaner clobber _clobber \
	distclean veryclean _verycleaner

d713 1
a713 1
	@@echo "Note that '$(MAKE) realclean' does not delete config.sh or Policy.sh"
d716 1
a716 2
	-@@rm -f Cross/run-* Cross/to-* Cross/from-*
	rm -f config.sh cppstdin Policy.sh extras.lst
a728 1
	-rmdir .depending
d734 1
a734 6
	-rm -f perl.third lib*.so.perl.third perl.3log t/perl.third t/perl.3log
	-rm -f perl.pixie lib*.so.perl.pixie lib*.so.Addrs
	-rm -f perl.Addrs perl.Counts t/perl.Addrs t/perl.Counts *perl.xok
	-rm -f perlld cygwin.c ld2 libperl*.def libperl*.dll cygperl*.dll *.exe.stackdump
	-rm -f perl$(EXE_EXT) suidperl$(EXE_EXT) miniperl$(EXE_EXT) $(LIBPERL) libperl.* microperl
	-rm -f opcode.h-old opnames.h-old pp.sym-old pp_proto.h-old
a754 1
# Some systems do not support "?", so keep these files separate.
d756 1
a756 4
	-rm -f core.*perl.*.? t/core.perl.*.? .?*.c
	rm -f core *perl.core t/core t/*perl.core
	rm -f t/misctmp* t/forktmp* t/tmp* t/c t/perl$(EXE_EXT) t/rantests
	rm -f so_locations $(LIBPERL_NONSHR) $(MINIPERL_NONSHR)
d761 1
a761 1
	rm -f lib/.exists lib/*/.exists lib/*/*/.exists
d765 1
a765 5
	-rmdir lib/B lib/Data lib/Digest
	rm -rf lib/Encode
	-rmdir lib/IO/Socket lib/IO/t lib/IO
	-rmdir lib/Filter/Util lib/List lib/MIME lib/PerlIO lib/Scalar lib/Sys
	-rmdir lib/Thread lib/XS lib/threads/shared lib/threads t/lib/B
d767 1
a767 1
_realcleaner:
d771 1
a771 1
_verycleaner:
a780 1
.PHONY: lint
a796 1
.PHONY: depend
d806 8
a813 31
.PHONY: test check test_prep test_prep_nodll test_prep_pre _test_prep \
	test_tty test-tty _test_tty test_notty test-notty _test_notty \
	utest ucheck test.utf8 check.utf8 test.torture torturetest \
	test.third check.third utest.third ucheck.third test_notty.third \
	test.deparse test_notty.deparse \
	minitest coretest

# Cannot delegate rebuilding of t/perl to make
# to allow interlaced test and minitest

TESTFILE=TEST

_test_prep:
	cd t && (rm -f $(PERL)$(EXE_EXT); $(LNS) ../$(PERL)$(EXE_EXT) $(PERL)$(EXE_EXT))

# Architecture-neutral stuff:

test_prep_pre: preplibrary utilities $(nonxs_ext)

test_prep: test_prep_pre miniperl$(EXE_EXT) perl$(EXE_EXT) $(dynamic_ext) $(TEST_PERL_DLL)
	PERL=./perl $(MAKE) _test_prep

_test_tty:
	cd t && $(LDLIBPTH) $(PERL_DEBUG) $(PERL) $(TESTFILE) $(TEST_ARGS) </dev/tty

_test_notty:
	cd t && $(LDLIBPTH) $(PERL_DEBUG) PERL_SKIP_TTY_TEST=1 $(PERL) $(TESTFILE) $(TEST_ARGS)

# The second branch is for testing without a tty or controlling terminal,
# see t/op/stat.t
_test:
d815 1
a815 1
	  $(MAKE) TEST_ARGS=$(TEST_ARGS) TESTFILE=$(TESTFILE) _test_tty   ; \
d817 1
a817 1
	  $(MAKE) TEST_ARGS=$(TEST_ARGS) TESTFILE=$(TESTFILE) _test_notty ; \
d821 6
a826 25
test check: test_prep
	PERL=./perl $(MAKE) _test

test_tty: test_prep
	PERL=./perl $(MAKE) _test_tty

test_notty: test_prep
	PERL=./perl $(MAKE) _test_notty

utest ucheck test.utf8 check.utf8: test_prep
	PERL=./perl TEST_ARGS=-utf8 $(MAKE) _test

coretest: test_prep
	PERL=./perl TEST_ARGS=-core $(MAKE) _test

test-prep:	test_prep

test-tty:	test_tty

test-notty:	test_notty

# Torture testing

test.torture torturetest:	test_prep
	PERL=./perl TEST_ARGS=-torture $(MAKE) _test
d828 3
a830 21
# Targets for Third Degree testing.

test_prep.third: test_prep perl.third
	PERL=./perl.third $(MAKE) _test_prep

test.third check.third:	test_prep.third perl.third
	PERL=./perl.third PERL_DEBUG=PERL_3LOG=1 $(MAKE) _test

utest.third ucheck.third: test_prep.third perl.third
	PERL=./perl.third PERL_DEBUG=PERL_3LOG=1 TEST_ARGS=-utf8 $(MAKE) _test

test_notty.third: test_prep.third perl.third
	PERL=./perl.third $(MAKE) PERL_DEBUG=PERL_3LOG=1 _test_notty

# Targets for Deparse testing.

test.deparse:	test_prep
	PERL=./perl TEST_ARGS=-deparse $(MAKE) _test

test_notty.deparse:	test_prep
	PERL=./perl TEST_ARGS=-deparse $(MAKE) _test_notty
d834 1
a834 4
minitest: miniperl$(EXE_EXT) lib/re.pm
	-@@test -f lib/lib.pm && test -f lib/Config.pm || \
	  $(MAKE) lib/Config.pm lib/lib.pm
	@@echo " "
d836 1
a836 2
	@@echo "to build lib/Config.pm or lib/lib.pm."
	@@echo " "
d838 1
a838 6
		&& $(LDLIBPTH) ./perl TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty

# Test via harness

test_harness: test_prep
	PERL=./perl $(MAKE) TESTFILE=harness _test
a843 3

.PHONY: ok okfile oknack okfilenack nok nokfile noknack nokfilenack

a867 2
.PHONY: clist hlist shlist pllist

a882 1
.PHONY: distcheck
a885 1
.PHONY: elc
a889 2

.PHONY: etags ctags tags
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@a98 31

	case "$ldlibpth" in
	# Protect any spaces
	*" "*) ldlibpth=`echo $ldlibpth|sed 's/ /\\\\ /g'` ;;
	esac

	case "$osname" in
	linux)
	    # If there is a pre-existing $libperl from a previous
	    # installation, Linux needs to use LD_PRELOAD to
	    # override the LD_LIBRARY_PATH setting.  See the
	    # INSTALL file, under "Building a shared perl library".
	    # If there is no pre-existing $libperl, we don't need
	    # to do anything further.
	    if test -f $archlib/CORE/$libperl; then
		rm -f preload
		cat <<'EOT' > preload
#! /bin/sh
lib=$1
shift
test -r $lib && export LD_PRELOAD="$lib $LD_PRELOAD"
exec "$@@"
EOT
		chmod 755 preload
		ldlibpth="$ldlibpth `pwd`/preload `pwd`/$libperl"
	    fi
	    ;;
	os390)	test -f /bin/env && ldlibpth="/bin/env $ldlibpth"
		;;
	esac

a99 1

d105 10
d291 2
a292 1
	pod/pod2usage.PL pod/podchecker.PL pod/podselect.PL
d296 2
a297 1
	pod/pod2usage pod/podchecker pod/podselect
d302 2
a303 2
h2 = embed.h form.h gv.h handy.h hv.h keywords.h mg.h op.h opcode.h
h3 = pad.h patchlevel.h perl.h perlapi.h perly.h pp.h proto.h regcomp.h
d310 1
a310 1
c3 = gv.c sv.c taint.c toke.c util.c deb.c run.c universal.c xsutils.c pad.c
d315 1
a315 1
obj1 = $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT)
d453 1
a453 1
	./$(MINIPERLEXP) makedef.pl PLATFORM=aix CC_FLAGS="$(OPTIMIZE)" | sort -u | sort -f > perl.exp.tmp
d463 1
a463 1
	./$(MINIPERLEXP) makedef.pl PLATFORM=os2 -DPERL_DLL=$(PERL_DLL) CC_FLAGS="$(OPTIMIZE)" > perl.exp.tmp
d483 1
a483 1
	$(LD) -o $@@ $(SHRPLDFLAGS) perl$(OBJ_EXT) $(obj) $(libs)
a534 21
	darwin*)
		case "$osvers" in
		[1-6].*) ;;
		*) case "$ldflags" in
		    *"-flat_namespace"*) ;;
		    *) # to allow opmini.o to override stuff in libperl.dylib
		$spitshell >>Makefile <<!NO!SUBS!
NAMESPACEFLAGS = -force_flat_namespace
!NO!SUBS!
		       ;;
		    esac
		    ;;
		esac
		$spitshell >>Makefile <<'!NO!SUBS!'
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(LIBPERL) opmini$(OBJ_EXT)
	-@@rm -f miniperl.xok
	$(CC) $(CLDFLAGS) $(NAMESPACEFLAGS) -o miniperl \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(LLIBPERL) $(libs)
	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
!NO!SUBS!
		;;
a562 11
# Valgrind perl (currently Linux only)

perl.valgrind.config: config.sh
	@@echo "To build perl.valgrind you must Configure -Doptimize=-g -Uusemymalloc, checking..."
	@@$(MAKE) perl.config.dashg
	@@echo "Checking usemymalloc='n' in config.sh..."
	@@grep "^usemymalloc="    config.sh
	@@grep "^usemymalloc='n'" config.sh >/dev/null || exit 1
	@@echo "And of course you have to have valgrind..."
	valgrind ./perl -e 1 2>/dev/null || exit 1

d714 1
a714 1
	-@@test -s extras.lst && PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d717 1
a717 1
	-@@test -s extras.lst && PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d720 1
a720 1
	-@@test -s extras.lst && PATH=`pwd`:${PATH} PERL5LIB=`pwd`/lib $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
a724 3
META.yml:	Porting/makemeta Porting/Maintainers.pl Porting/Maintainers.pm
	$(LDLIBPTH) ./miniperl -Ilib Porting/makemeta

d748 1
a748 1
	$(LDLIBPTH) ./perl installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
d752 1
a752 1
	$(LDLIBPTH) ./perl installman --destdir=$(DESTDIR) $(INSTALLFLAGS)
d815 6
a820 1
#	autodoc.pl:	pod/perlapi.pod pod/perlintern.pod
a822 5
#	embed.pl:	proto.h embed.h embedvar.h global.sym
#			perlapi.h perlapi.c 
# [* embed.pl needs pp.sym generated by opcode.pl! *]
#	keywords.pl:	keywords.h
#	opcode.pl:	opcode.h opnames.h pp_proto.h pp.sym
d827 2
a828 4
# To force them to be regenerated, run
#       perl regen.pl
# with your existing copy of perl
# (make regen_headers is kept for backwards compatibility)
d839 9
a847 2
regen regen_headers:	FORCE
	-perl regen.pl
d852 1
a852 10
regen_all: $(PERLYVMS) regen regen_pods

.PHONY:	manisort manicheck

manisort:	FORCE
	LC_ALL=C sort -fdc MANIFEST || (echo "WARNING: re-sorting MANIFEST"; \
		LC_ALL=C sort -fdo MANIFEST MANIFEST)

manicheck:	FORCE
	perl Porting/manicheck
d939 2
a940 2
	rm -f $(FIRSTMAKEFILE) $(FIRSTMAKEFILE).old makefile.old
	rm -f $(private) lib/Config.pod
a944 1
	rm -f preload
d948 3
a950 3
	-rmdir lib/Filter/Util lib/IO/Socket lib/IO
	-rmdir lib/List lib/MIME lib/Scalar lib/Sys 
	-rmdir lib/threads lib/XS
d997 2
a998 2
	test.deparse test_notty.deparse test_harness test_harness_notty \
	test.bytecompile minitest coretest test.taintwarn
d1016 1
a1016 1
	cd t && $(PERL_DEBUG) $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS) </dev/tty
d1019 1
a1019 1
	cd t && $(PERL_DEBUG) PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS)
a1056 14
# Targets for valgrind testing:

test_prep.valgrind: test_prep perl.valgrind
	PERL=./perl $(MAKE) _test_prep

test.valgrind check.valgrind:	test_prep perl.valgrind.config
	PERL=./perl PERL_DEBUG=PERL_VALGRIND=1 $(MAKE) _test

utest.valgrind ucheck.valgrind: test_prep.valgrind perl.valgrind
	PERL=./perl PERL_DEBUG=PERL_VALGRIND=1 TEST_ARGS=-utf8 $(MAKE) _test

test_notty.valgrind: test_prep.valgrind perl.valgrind
	PERL=./perl $(MAKE) PERL_DEBUG=PERL_VALGRIND=1 _test_notty

a1070 5
# Targets for Bytecode/ByteLoader testing.

test.bytecompile:	test_prep
	PERL=./perl TEST_ARGS=-bytecompile $(MAKE) _test

a1078 5
# Targets to run the test suite with -t

test.taintwarn:	test_prep
	PERL=./perl TEST_ARGS=-taintwarn $(MAKE) _test

a1095 3
test_harness_notty: test_prep
	PERL=./perl HARNESS_NOTTY=1 $(MAKE) TESTFILE=harness _test

d1185 1
a1185 1
define)
d1187 1
a1187 1
    echo "This is an EBCDIC system, checking if any parser files need regenerating." >&2
a1215 5
    case "$osname:$usethreads" in
    os390:define)
	sed -e 's@@^extern int yychar, yyerrflag;@@/* extern int yychar, yyerrflag; */@@' perly.c > perly.tmp && mv perly.tmp perly.c
	;;
    esac
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@a763 2
	-@@rm -f pod/perldelta.pod
	-@@test -f pod/perl583delta.pod && cd pod && $(LNS) perl583delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods
d766 1
a766 1
	-@@test -s extras.lst && PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d769 1
a769 1
	-@@test -s extras.lst && PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d772 1
a772 1
	-@@test -s extras.lst && PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) ./perl -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d781 1
a781 1
	$(MAKE) STRIPFLAGS=-s install DESTDIR="$(DESTDIR)"
d784 1
a784 1
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) DESTDIR="$(DESTDIR)"
d787 1
a787 1
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-V DESTDIR="$(DESTDIR)"
d790 1
a790 1
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-S DESTDIR="$(DESTDIR)"
d793 1
a793 1
	$(MAKE) install.perl install.man STRIPFLAGS=$(STRIPFLAGS) INSTALLFLAGS=-n DESTDIR="$(DESTDIR)"
d795 1
a795 4
# Set this to an empty string to avoid an attempt of rebuild before install
INSTALL_DEPENDENCE = all

install.perl:	$(INSTALL_DEPENDENCE) installperl
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@a11 11

# H.Merijn Brand [17 Feb 2004]
# This comment is just to ensure that Configure will find variables that
# are removed/replaced in patches on blead, but are still needed in the
# 5.8.x, 5.6.x and 5.005.x maintainance tracks.
# metaconfig -m will scan all .SH files on this level (not deeper), and
# not in x2p and other subfolders. This file is as good as any .SH
# patch   references
# #22227 $baserev
# #22302 $yacc $byacc

a320 8
# Unicode data files generated by mktables
unidatafiles = lib/unicore/Canonical.pl lib/unicore/Exact.pl \
	lib/unicore/Properties lib/unicore/Decomposition.pl \
	lib/unicore/CombiningClass.pl lib/unicore/Name.pl lib/unicore/PVA.pl

# Directories of Unicode data files generated by mktables
unidatadirs = lib/unicore/To lib/unicore/lib

d352 1
a352 1
all: $(FIRSTMAKEFILE) miniperl$(EXE_EXT) extra.pods $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
a753 3
$(unidatafiles): miniperl$(EXE_EXT) lib/Config.pm lib/unicore/mktables
	cd lib/unicore && $(LDLIBPTH) ../../miniperl -I../../lib mktables -w

d765 1
a765 1
	-@@test -f pod/perl585delta.pod && cd pod && $(LNS) perl585delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods
a1004 1
	rm -rf $(unidatafiles) $(unidatadirs)
d1077 1
a1077 1
test_prep: test_prep_pre miniperl$(EXE_EXT) $(unidatafiles) perl$(EXE_EXT) $(dynamic_ext) $(TEST_PERL_DLL)
d1172 1
a1172 1
	  $(MAKE) lib/Config.pm lib/lib.pm $(unidatafiles)
d1175 1
a1175 1
	@@echo "to build lib/Config.pm, lib/lib.pm or the Unicode data files."
d1178 1
a1178 1
		&& $(LDLIBPTH) ./perl TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@d352 1
a352 1
c = $(c1) $(c2) $(c3) $(c4) miniperlmain.c perlmain.c opmini.c
d405 3
a407 5
opmini.c: op.c
	\$(CPS) op.c opmini.tmp
	sh mv-if-diff opmini.tmp opmini.c

opmini\$(OBJ_EXT): opmini.c
d409 1
d787 1
a787 1
	-@@test -f pod/perl586delta.pod && cd pod && $(LNS) perl586delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods # See buildtoc
d985 1
a985 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c
a1083 1
	test.utf16 check.utf16 utest.utf16 ucheck.utf16 \
a1144 12
# Targets for UTF16 testing:

minitest.utf16: minitest.prep
	- cd t && (rm -f perl$(EXE_EXT); $(LNS) ../miniperl$(EXE_EXT) perl$(EXE_EXT)) \
		&& $(LDLIBPTH) ./perl TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty

test.utf16 check.utf16: test_prep
	PERL=./perl $(MAKE) TEST_ARGS=-utf16 _test

utest.utf16 ucheck.utf16: test_prep
	PERL=./perl $(MAKE) TEST_ARGS="-utf8 -utf16" _test

d1191 3
a1193 1
minitest.prep:
a1199 4

# Can't depend on lib/Config.pm because that might be where miniperl
# is crashing.
minitest: miniperl$(EXE_EXT) lib/re.pm minitest.prep
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@a22 4
# H.Merijn Brand [30 Oct 2004]
# Mentioned for the same reason for future reference
# #23434 $d_strlcat $d_strlcpy

a74 4
	interix*)
		linklibperl="-L. -lperl"
		shrpldflags="$shrpldflags -Wl,--image-base,0x57000000"
		;;
d310 1
a310 2
CONFIGPM = lib/Config.pm lib/Config_heavy.pl
private = preplibrary $(CONFIGPM) lib/Config.pod lib/ExtUtils/Miniperl.pm
d360 1
a360 25
lintflags = \
    -bhn \
    -p \
    -s \
    -Ncheck=%all \
    -Nlevel=4 \
    -errfmt=src \
    -errtags \
    -erroff=E_BAD_PTR_CAST \
    -erroff=E_BLOCK_DECL_UNUSED \
    -erroff=E_CONSTANT_CONDITION \
    -erroff=E_BAD_PTR_CAST_ALIGN \
    -erroff=E_PTRDIFF_OVERFLOW \
    -erroff=E_EXPR_NULL_EFFECT \
    -erroff=E_BAD_PTR_INT_COMBINATION \
    -erroff=E_LOOP_EMPTY \
    -erroff=E_TRUE_LOGICAL_EXPR \
    -erroff=E_FALSE_LOGICAL_EXPR \
    -erroff=E_INDISTING_FROM_TRUNC \
    -erroff=E_POINTER_TO_OBJECT \
    -erroff=E_ASSIGN_NARROW_CONV \
    -erroff=E_BAD_SIGN_EXTEND \
    -erroff=E_INCL_NUSD \
    -erroff=E_MAIN_PARAM \
    -Wfoo.flow
d383 1
a383 1
translators:	miniperl$(EXE_EXT) $(CONFIGPM) FORCE
d386 1
a386 1
utilities:	miniperl$(EXE_EXT) $(CONFIGPM) $(plextract) lib/lib.pm FORCE
d406 2
a407 2
	\$(RMS) opmini.c
	\$(CPS) op.c opmini.c
d418 2
a419 1
	sh writemain $(DYNALOADER) $(static_ext) > perlmain.c
d493 2
a494 1
	./$(MINIPERLEXP) makedef.pl PLATFORM=aix CC_FLAGS="$(OPTIMIZE)" | sort -u | sort -f > perl.exp
d503 2
a504 1
	./$(MINIPERLEXP) makedef.pl PLATFORM=os2 -DPERL_DLL=$(PERL_DLL) CC_FLAGS="$(OPTIMIZE)" > perl.exp
d558 1
a558 1
	aix*|beos*)
d567 1
a567 1
	next4*)
d640 1
a640 1
	@@egrep "^optimize='(-g|.*-g[1-3].*)'" config.sh >/dev/null || exit 1
d739 1
a739 1
preplibrary: miniperl$(EXE_EXT) $(CONFIGPM) lib/lib.pm $(PREPLIBRARY_LIBPERL)
d748 11
a758 7
lib/Config.pod: config.sh miniperl$(EXE_EXT) configpm Porting/Glossary
	$(LDLIBPTH) ./miniperl -Ilib configpm --heavy=lib/Config_heavy.pl lib/Config.pm

$(CONFIGPM): lib/Config.pod

lib/ExtUtils/Miniperl.pm: miniperlmain.c miniperl$(EXE_EXT) minimod.pl $(CONFIGPM)
	$(LDLIBPTH) ./miniperl minimod.pl > lib/ExtUtils/Miniperl.pm
d761 1
a761 1
	cp ext/re/re.pm lib/re.pm
d763 1
a763 1
$(plextract):	miniperl$(EXE_EXT) $(CONFIGPM) x2p/s2p
d765 1
a765 1
	$(LDLIBPTH) ./miniperl -I`pwd`/lib $@@.PL
d767 1
a767 1
x2p/s2p: miniperl$(EXE_EXT) $(CONFIGPM) x2p/s2p.PL
d770 1
a770 1
lib/lib.pm:	miniperl$(EXE_EXT) $(CONFIGPM)
d774 1
a774 3
unidatafiles $(unidatafiles): uni.data

uni.data: miniperl$(EXE_EXT) $(CONFIGPM) lib/unicore/mktables
a775 1
	touch uni.data
d788 1
a788 1
	-@@test -f pod/perl588delta.pod && cd pod && $(LNS) perl588delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods # See buildtoc
d841 1
a841 1
	$(LDLIBPTH) ./perl installhtml   \
d843 2
a844 2
      --htmldir=$(privlib)/html   \
      --htmlroot=$(privlib)/html  \
a847 1
      --ignore=Porting/Maintainers.pm,Porting/patching.pod,Porting/pumpkin.pod,Porting/repository.pod \
d990 1
a990 1
	-rm -f perl.exp ext.libs extra.pods uni.data opmini.o
d1022 1
a1022 1
	rm -f core *perl.core t/core t/*perl.core core.* t/core.*
d1027 1
a1027 1
	rm -f $(private)
d1035 1
a1036 1
	-rmdir lib/B lib/Data
d1050 5
d1057 1
a1057 2
	rm -f *.ln
	lint $(lintflags) -DPERL_CORE -D_REENTRANT -DDEBUGGING -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 $(c)
d1292 2
a1299 3
ctags:
	ctags -f Tags -N --totals --languages=c --langmap=c:+.h *.c *.h

a1410 1
# ex: set ts=8 sts=4 sw=4 noet:
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d76 1
a76 1
	netbsd*|freebsd[234]*|openbsd*|dragonfly*)
d88 1
a88 1
		*)	shrpldflags="$shrpldflags -bnoentry"
d98 1
a98 1
            shrpldflags='-W l,XPLINK,dll'
a157 1
extra_dep=''
d161 1
a161 10
    this_target="lib/auto/$f/$base.$dlext"  
    dynamic_list="$dynamic_list $this_target"

    : Parallel makes reveal that we have some interdependencies
    case $f in
	Math/BigInt/FastCalc) extra_dep="$extra_dep
$this_target: lib/auto/List/Util/Util.$dlext" ;;
	Unicode/Normalize) extra_dep="$extra_dep
$this_target: uni.data" ;;
    esac
d176 9
d192 4
a195 1

a203 2
madlysrc = $madlysrc
madlyobj = $madlyobj
a244 3
# Sometimes running an executable is an adventure.
RUN = $run

d249 1
a249 1
DYNALOADER = DynaLoader\$(OBJ_EXT)
a269 4
# If you're going to use valgrind and it can't be invoked as plain valgrind
# then you'll need to change this, or override it on the make command line.
VALGRIND=valgrind

d356 10
a365 11
c1 = av.c scope.c op.c doop.c doio.c dump.c gv.c hv.c mg.c reentr.c mro.c perl.c
c2 = perly.c pp.c pp_hot.c pp_ctl.c pp_sys.c regcomp.c regexec.c utf8.c sv.c
c3 = taint.c toke.c util.c deb.c run.c universal.c xsutils.c pad.c globals.c
c4 = perlio.c perlapi.c numeric.c mathoms.c locale.c pp_pack.c pp_sort.c
c5 = $(madlysrc) $(mallocsrc)

c = $(c1) $(c2) $(c3) $(c4) $(c5) miniperlmain.c perlmain.c opmini.c

obj1 = $(madlyobj) $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) op$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT) mro$(OBJ_EXT)
obj2 = hv$(OBJ_EXT) av$(OBJ_EXT) perl$(OBJ_EXT) run$(OBJ_EXT) pp_hot$(OBJ_EXT) sv$(OBJ_EXT) pp$(OBJ_EXT) scope$(OBJ_EXT) pp_ctl$(OBJ_EXT) pp_sys$(OBJ_EXT)
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) xsutils$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) mathoms$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT)
d370 1
a370 2
    -b \
    -n \
d372 1
a374 2
    -errchk=parentheses \
    -errhdr=%all \
a376 1
    -erroff=E_ASSIGN_NARROW_CONV \
a377 3
    -erroff=E_BAD_PTR_CAST_ALIGN \
    -erroff=E_BAD_PTR_INT_COMBINATION \
    -erroff=E_BAD_SIGN_EXTEND \
a378 2
    -erroff=E_CASE_FALLTHRU \
    -erroff=E_CONST_EXPR \
d380 2
a381 2
    -erroff=E_END_OF_LOOP_CODE_NOT_REACHED \
    -erroff=E_EQUALITY_NOT_ASSIGNMENT \
d383 3
d387 4
a391 1
    -erroff=E_LOOP_EMPTY \
d393 1
a393 31
    -erroff=E_POINTER_TO_OBJECT \
    -erroff=E_PTRDIFF_OVERFLOW \
    -erroff=E_SHIFT_CNT_NEG_TOO_BIG_L \
    -erroff=E_STATIC_UNUSED \
    -erroff=E_TRUE_LOGICAL_EXPR

splintflags = \
    -I/usr/lib/gcc/i486-linux-gnu/4.0.2/include/ \
    -D__builtin_va_list=va_list \
    -Dsigjmp_buf=jmp_buf \
    -warnposix \
    \
    +boolint \
    +charintliteral \
    -fixedformalarray \
    -mustfreefresh \
    -nestedextern \
    -predboolint \
    -predboolothers \
    -preproc \
    -boolops \
    -shadow \
    -nullstate \
    +longintegral \
    +matchanyintegral \
    -type \
    \
    +line-len 999 \
    +weak

splintfiles = $(c1)
d408 7
a414 1
.PHONY: all translators utilities
a444 8
globals\$(OBJ_EXT): uudmap.h

uudmap.h: generate_uudmap\$(EXE_EXT)
	\$(RUN) ./generate_uudmap\$(EXE_EXT) >uudmap.h

generate_uudmap\$(EXE_EXT): generate_uudmap\$(OBJ_EXT)
	\$(CC) -o generate_uudmap \$(LDFLAGS) generate_uudmap\$(OBJ_EXT) \$(libs)

d499 1
a499 1
$(LIBPERL_NONSHR): $(obj)
d501 1
a501 1
	$(AR) rcu $(LIBPERL_NONSHR) $(obj)
d534 1
a534 1
	./$(MINIPERLEXP) makedef.pl PLATFORM=os2 -DPERL_DLL=$(PERL_DLL) CC_FLAGS="$(OPTIMIZE)" > perl5.def
d548 1
a548 1
$(LIBPERL): $& $(obj) $(DYNALOADER) $(LIBPERLEXPORT)
d553 1
a553 2
	rm -f $@@
	$(LD) -o $@@ $(SHRPLDFLAGS) $(obj) $(DYNALOADER) $(libs)
d568 1
a568 1
	$(AR) rcu $(LIBPERL) $(obj) $(DYNALOADER)
d590 1
a590 1
miniperl: $& miniperlmain$(OBJ_EXT) $(obj) opmini$(OBJ_EXT)
d593 2
a594 2
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d599 1
a599 1
miniperl: $& miniperlmain$(OBJ_EXT) $(obj) opmini$(OBJ_EXT)
d601 2
a602 2
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d619 1
a619 1
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(obj) opmini$(OBJ_EXT)
d622 2
a623 3
	    `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d628 1
a628 1
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(obj) opmini$(OBJ_EXT)
d631 2
a632 3
	    `echo $(obj) | sed 's/ op$(OBJ_EXT) / /'` \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d639 1
a639 1
perl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d641 1
a641 1
	$(SHRPENV) $(LDLIBPTH) $(CC) -o perl$(PERL_SUFFIX) $(PERL_PROFILE_LDFLAGS) $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d645 2
a646 2
pureperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) purify $(CC) -o pureperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d648 2
a649 2
purecovperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) purecov $(CC) -o purecovperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d651 2
a652 2
quantperl$(EXE_EXT): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) quantify $(CC) -o quantperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d663 1
a663 1
	$(VALGRIND) ./perl -e 1 2>/dev/null || exit 1
d669 2
a670 2
	@@grep "^optimize=" config.sh
	@@egrep "^optimize='(.*-g.*)'" config.sh >/dev/null || exit 1
d749 2
a750 2
suidperl$(EXE_EXT): $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) $(CC) -o suidperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
a755 23
# Some environment have no system(), which mkpport uses.
# Let's try running the commands with shell.
case "${osname}" in
catamount)
$spitshell >>Makefile <<!GROK!THIS!
.PHONY: makeppport
makeppport: miniperl\$(EXE_EXT) \$(CONFIGPM)
	-@@for f in Makefile.PL PPPort_pm.PL PPPort_xs.PL ppport_h.PL; do \
	(cd ext/Devel/PPPort && `pwd`/run.sh ../../../miniperl -I../../../lib \$\$f); \
	done

!GROK!THIS!
;;
*)
$spitshell >>Makefile <<'!NO!SUBS!'
.PHONY: makeppport
makeppport: miniperl$(EXE_EXT) $(CONFIGPM)
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib mkppport

!NO!SUBS!
;;
esac

d772 1
a772 1
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib -e 'use AutoSplit; \
d774 1
a774 1
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib -e 'use AutoSplit; \
d779 1
a779 1
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib configpm
d784 1
a784 1
	$(LDLIBPTH) $(RUN) ./miniperl minimod.pl > lib/ExtUtils/Miniperl.pm
a786 1
	@@-rm -f $@@
d791 1
a791 1
	$(LDLIBPTH) $(RUN) ./miniperl -I`pwd`/lib $@@.PL
d798 1
a798 1
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib lib/lib_pm.PL
d803 1
a803 1
	cd lib/unicore && $(LDLIBPTH) $(RUN) ../../miniperl -I../../lib mktables -w
d807 1
a807 1
	-@@test ! -f extra.pods || rm -f `cat extra.pods`
d817 1
a817 1
	-@@test -f pod/perl5100delta.pod && cd pod && $(LNS) perl5100delta.pod perldelta.pod && cd .. && echo "pod/perldelta.pod" >> extra.pods # See buildtoc
d820 1
a820 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d823 1
a823 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d826 1
a826 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d832 1
a832 1
	$(LDLIBPTH) $(RUN) ./miniperl -Ilib Porting/makemeta
d853 9
a861 2
	$(LDLIBPTH) $(RUN) ./perl installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
	-@@test ! -s extras.lst || $(MAKE) extras.install
d864 1
a864 1
	$(LDLIBPTH) $(RUN) ./perl installman --destdir=$(DESTDIR) $(INSTALLFLAGS)
d870 1
a870 1
	$(LDLIBPTH) $(RUN) ./perl installhtml   \
d882 22
a903 12
# used only if you force bison to run by saying
# 	make regen_perly
# You normally shouldn't remake perly.[ch].

.PHONY: regen_perly

run_byacc:
	@@echo "run_byacc is obsolete; try 'make regen_perly' instead"

# this outputs perly.h, perly.act and perly.tab
regen_perly:
	perl regen_perly.pl
d914 5
d923 1
a923 1
SYMH = perlvars.h intrpvar.h
d929 2
d948 2
a949 1
		perlapi.h perlapi.c regnodes.h \
d960 1
a960 1
regen_all: regen regen_pods
d984 1
a984 1
d_dummy $(dynamic_ext):	miniperl$(EXE_EXT) preplibrary makeppport $(DYNALOADER) FORCE
d987 1
a987 1
s_dummy $(static_ext):	miniperl$(EXE_EXT) preplibrary makeppport $(DYNALOADER) FORCE
a991 11
!NO!SUBS!

$spitshell >>Makefile <<EOF
$extra_dep
EOF

$spitshell >>Makefile <<'!NO!SUBS!'

.PHONY: printconfig
printconfig:
	@@eval `$(LDLIBPTH) $(RUN) ./perl -Ilib -V:$(CONFIGVAR)`; echo $$$(CONFIGVAR)
d995 1
a995 2
	distclean veryclean _verycleaner \
	cleanup_unpacked_files unpack_files
d997 1
a997 1
clean:		cleanup_unpacked_files _tidy _mopup 
d999 1
a999 1
realclean:	cleanup_unpacked_files _realcleaner _mopup
d1006 1
a1006 1
clobber:	cleanup_unpacked_files _realcleaner _mopup _clobber
d1011 1
a1011 1
veryclean:	cleanup_unpacked_files _verycleaner _mopup _clobber
d1016 1
a1016 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c uudmap.h generate_uudmap$(EXE_EXT)
d1026 1
a1026 1
	-rm -f cygwin.c libperl*.def libperl*.dll cygperl*.dll *.exe.stackdump
a1028 1
	-rm -f config.over
d1038 1
a1047 1
	-@@test ! -f $(RUN) ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib mkppport --clean
d1063 3
a1065 6
	rm -f preload lib/re.pm
	rm -rf lib/Encode lib/Compress lib/Hash lib/re
	rm -rf lib/IO/Compress lib/IO/Uncompress
	rm -f lib/ExtUtils/ParseXS/t/XSTest.c
	rm -f lib/ExtUtils/ParseXS/t/XSTest$(OBJ_EXT)
	rm -f lib/ExtUtils/ParseXS/t/XSTest$(DLSUFFIX)
d1067 2
a1068 2
	-rmdir lib/Filter/Util lib/IO/Socket
	-rmdir lib/List lib/MIME lib/Scalar lib/Sys
a1069 5
	-rmdir lib/CPANPLUS/Dist/Build/t/dummy-*
	-rmdir lib/CPANPLUS/t/dummy-cpanplus lib/CPANPLUS/t/dummy-localmirror
	-rm -f cygcrypt-0.dll cygwin1.dll
	-rm -f lib/ExtUtils/CBuilder/t/libcompilet.dll.a
	-rm -f lib/ExtUtils/ParseXS/t/libXSTest.dll.a
a1084 4
.PHONY: splint
splint: $(c)
	splint $(splintflags) -DPERL_CORE -D_REENTRANT -DDEBUGGING -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 $(splintfiles)

d1114 1
a1114 1
	minitest coretest test.taintwarn
d1121 1
a1121 1
_test_prep: unpack_files
d1132 1
a1132 1
	cd t && $(PERL_DEBUG) $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS) $(TEST_FILES) </dev/tty
d1135 1
a1135 7
	cd t && $(PERL_DEBUG) PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS) $(TEST_FILES)

unpack_files:
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib uupacktool.pl -u -m

cleanup_unpacked_files:
	-@@test ! -f $(RUN) ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib uupacktool.pl -c
d1177 1
a1177 1
		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t mro/*.t </dev/tty
d1191 1
a1191 1
	PERL=./perl PERL_DEBUG=PERL_VALGRIND=1 VALGRIND='$(VALGRIND)' $(MAKE) _test
d1193 1
a1193 1
utest.valgrind ucheck.valgrind: test_prep.valgrind perl.valgrind.config
d1196 1
a1196 1
test_notty.valgrind: test_prep.valgrind perl.valgrind.config
d1213 5
d1243 1
a1243 1
		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t mro/*.t </dev/tty
d1261 1
a1261 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)'
d1264 1
a1264 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok
d1267 1
a1267 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -A
d1270 1
a1270 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A
d1273 1
a1273 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)'
d1276 1
a1276 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok
d1279 1
a1279 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -A
d1282 1
a1282 1
	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A
d1325 1
a1325 1
	ctags -f Tags -N --totals --languages=c --langmap=c:+.h --exclude=opmini.c *.c *.h
d1348 38
@


1.1.1.12
log
@import perl 5.10.1
@
text
@a12 11
case $CROSS_NAME in
'')
	Makefile=Makefile
	;;
*)
	# if cross-compilation, the Makefile named accordingly
	Makefile=Makefile-cross-$CROSS_NAME
	. Cross/config-${CROSS_NAME}.sh
	;;
esac

a38 1
linklibperl_nonshr=''
a41 1
DPERL_IS_MINIPERL='-DPERL_IS_MINIPERL'
d54 1
a54 1
	static_ldflags=''
d71 1
a71 2
		shrpldflags="$shrpldflags -Wl,--out-implib=libperl.dll.a -Wl,--image-base,0x52000000"
		linklibperl="-L. -lperl"
d84 3
a86 12
		case "$cc" in
		gcc*)
			shrpldflags="-shared -Wl,-H512 -Wl,-T512 -Wl,-bhalt:4 -Wl,-bM:SRE -Wl,-bE:perl.exp"
			case "$osvers" in
			3*)	shrpldflags="$shrpldflags -e _nostart"
				;;
			*)	shrpldflags="$shrpldflags -Wl,-bnoentry"
				;;
			esac
			shrpldflags="$shrpldflags $ldflags $perllibs $cryptlib"
			linklibperl="-L $archlibexp/CORE -L `pwd | sed 's/\/UU$//'` -lperl"
			linklibperl_nonshr='-lperl_nonshr'
d88 1
a88 11
		*)
			shrpldflags="-H512 -T512 -bhalt:4 -bM:SRE -bE:perl.exp"
			case "$osvers" in
			3*)	shrpldflags="$shrpldflags -e _nostart"
				;;
			*)	shrpldflags="$shrpldflags -b noentry"
				;;
			esac
			shrpldflags="$shrpldflags $ldflags $perllibs $cryptlib"
			linklibperl="-L $archlibexp/CORE -L `pwd | sed 's/\/UU$//'` -lperl"
			linklibperl_nonshr='-lperl_nonshr'
d91 2
d152 1
a152 1
	static_ldflags='CCCDLFLAGS='
d167 1
a167 1
	Math/BigInt/FastCalc|Devel/NYTProf) extra_dep="$extra_dep
a177 8
    : Parallel makes reveal that we have some interdependencies
    this_target="lib/auto/$f/$base\$(LIB_EXT)"
    case $f in
	Math/BigInt/FastCalc|Devel/NYTProf) extra_dep="$extra_dep
$this_target: lib/auto/List/Util/Util\$(LIB_EXT)" ;;
	Unicode/Normalize) extra_dep="$extra_dep
$this_target: uni.data" ;;
    esac
d182 2
a183 2
    p=`echo "$f" | tr / -`
    nonxs_list="$nonxs_list ext/$p/pm_to_blib"
d186 3
a188 13
dtrace_h=''
dtrace_o=''
case "$usedtrace" in
define|true)
	dtrace_h='perldtrace.h' 
	$dtrace -G -s perldtrace.d -o perldtrace.tmp >/dev/null 2>&1 \
		&& rm -f perldtrace.tmp && dtrace_o='perldtrace$(OBJ_EXT)'
	;;
esac

echo "Extracting $Makefile (with variable substitutions)"
$spitshell >$Makefile <<!GROK!THIS!
# $Makefile
a231 1
LLIBPERL_NONSHR= $linklibperl_nonshr
d238 2
a239 2
# for GNU cc).
STATIC_LDFLAGS = $static_ldflags
a247 9
# These variables may need to be manually set for non-Unix systems.
AR = $full_ar
HOST_EXE_EXT = 
EXE_EXT = $_exe
LIB_EXT = $_a
OBJ_EXT = $_o
PATH_SEP = $p_

#
d266 7
a276 4
DTRACE = $dtrace
DTRACE_H = $dtrace_h
DTRACE_O = $dtrace_o

d304 1
a304 1
$spitshell >>$Makefile <<EOF
a317 2
case $CROSS_NAME in
'')
d319 1
a319 1
$spitshell >>$Makefile <<'!NO!SUBS!'
d325 2
a326 34
CONFIGPM_FROM_CONFIG_SH = lib/Config.pm lib/Config_heavy.pl
CONFIGPM = $(CONFIGPM_FROM_CONFIG_SH) lib/Config_git.pl

CONFIGPOD = lib/Config.pod

CONFIGH = config.h
!NO!SUBS!
	;;
*)
	# if cross-compilation
$spitshell >>$Makefile <<!GROK!THIS!
CROSS_NAME = $CROSS_NAME
CROSS_LIB = xlib/$CROSS_NAME

CCCMD    = \`sh \$(shellflags) cflags-cross-$CROSS_NAME "optimize='\$(OPTIMIZE)'" \$@@\` -I\$(CROSS_LIB)
CCCMDSRC = \`sh \$(shellflags) cflags-cross-$CROSS_NAME "optimize='\$(OPTIMIZE)'" \$<\` -I\$(CROSS_LIB)
CONFIGPM = xlib/\$(CROSS_NAME)/Config.pm
CONFIGPOD = xlib/\$(CROSS_NAME)/Config.pod
CONFIGH = xconfig.h

xconfig.h: config_h.SH Cross/config-\$(CROSS_NAME).sh
	CONFIG_SH=Cross/config-\$(CROSS_NAME).sh CONFIG_H=xconfig.h \$(SHELL) config_h.SH
	#TODO \$(LDLIBPTH) ./miniperl$(EXE_EXT) -Ilib -MCross=\$(CROSS_NAME) config_h.PL "INST_VER=\$(INST_VER)" "CORE_DIR=\$(CROSS_LIB)" "CONFIG_H=xconfig.h"
	cp xconfig.h \$(CROSS_LIB)/
	cp xconfig.h \$(CROSS_LIB)/config.h

!GROK!THIS!
	;;
esac

## In the following dollars and backticks do not need the extra backslash.
$spitshell >>$Makefile <<'!NO!SUBS!'

private = preplibrary $(CONFIGPM) $(CONFIGPOD) lib/ExtUtils/Miniperl.pm git_version.h
d356 1
a356 1
h1 = EXTERN.h INTERN.h XSUB.h av.h $(CONFIGH) cop.h cv.h dosish.h
d360 1
a360 1
h5 = utf8.h warnings.h mydtrace.h
d369 1
a369 1
c = $(c1) $(c2) $(c3) $(c4) $(c5) miniperlmain.c perlmain.c opmini.c perlmini.c
d371 2
a372 3
obj0 = op$(OBJ_EXT) perl$(OBJ_EXT)
obj1 = $(madlyobj) $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT) mro$(OBJ_EXT)
obj2 = hv$(OBJ_EXT) av$(OBJ_EXT) run$(OBJ_EXT) pp_hot$(OBJ_EXT) sv$(OBJ_EXT) pp$(OBJ_EXT) scope$(OBJ_EXT) pp_ctl$(OBJ_EXT) pp_sys$(OBJ_EXT)
d375 1
a375 6
mini_obj =  $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
ndt_obj = $(obj0) $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
obj = $(ndt_obj) $(DTRACE_O)

perltoc_pod_prereqs = extra.pods pod/perlapi.pod pod/perldelta.pod pod/perlintern.pod pod/perlmodlib.pod
generated_pods = pod/perltoc.pod $(perltoc_pod_prereqs)
d435 1
a435 1
.c$(OBJ_EXT): 
d438 1
a438 1
.c.i: 
d444 1
a444 1
all: $(FIRSTMAKEFILE) miniperl$(EXE_EXT) miniperl $(generated_pods) $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
a447 9
sperl$(OBJ_EXT): perl.c $(h)
	$(RMS) sperl.c
	$(LNS) perl.c sperl.c
	$(CCCMD) -DIAMSUID sperl.c
	$(RMS) sperl.c

sperl.i: perl.c $(h)
	$(CCCMDSRC) -DIAMSUID -E perl.c > sperl.i

a449 7
lib/Config_git.pl git_version.h: miniperl$(EXE_EXT) make_patchnum.pl
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_patchnum.pl

# make sure that we recompile perl.c if the git version changes
perl$(OBJ_EXT): git_version.h
sperl$(OBJ_EXT): git_version.h

d466 1
a466 1
$spitshell >>$Makefile <<!GROK!THIS!
a478 7
perlmini.c: perl.c
	\$(RMS) perlmini.c
	\$(CPS) perl.c perlmini.c

perlmini\$(OBJ_EXT): perlmini.c
	\$(CCCMD) \$(PLDLFLAGS) $DPERL_IS_MINIPERL perlmini.c

d481 2
a482 2
uudmap.h: generate_uudmap\$(HOST_EXE_EXT)
	\$(RUN) ./generate_uudmap\$(HOST_EXE_EXT) >uudmap.h
d484 2
a485 2
generate_uudmap\$(HOST_EXE_EXT): generate_uudmap\$(OBJ_EXT)
	\$(CC) -o generate_uudmap\$(EXE_EXT) \$(LDFLAGS) generate_uudmap\$(OBJ_EXT) \$(libs)
d488 1
a488 1
$spitshell >>$Makefile <<'!NO!SUBS!'
d495 6
d504 4
d526 1
a526 1
	$spitshell >>$Makefile <<!GROK!THIS!
d536 1
a536 1
		$spitshell >>$Makefile <<'!NO!SUBS!'
d545 1
a545 1
$(MINIPERL_NONSHR): $(LIBPERL_NONSHR) miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)  perlmini$(OBJ_EXT)
d547 1
a547 1
	    opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(LIBPERL_NONSHR) $(LIBS)
d557 1
a557 1
		$spitshell >>$Makefile <<'!NO!SUBS!'
d565 1
a565 1
	$spitshell >>$Makefile <<'!NO!SUBS!'
d572 1
a572 1
	$spitshell >>$Makefile <<'!NO!SUBS!'
a579 13
cygwin)
	$spitshell >>$Makefile <<'!NO!SUBS!'
cygwin.c: cygwin/cygwin.c
	$(LNS) cygwin/cygwin.c

LIBPERL_NONSHR		= libperl$(LIB_EXT)

$(LIBPERL_NONSHR): $(obj)
	$(RMS) $(LIBPERL_NONSHR)
	$(AR) rcu $(LIBPERL_NONSHR) $(obj)

!NO!SUBS!
	;;
d582 1
a582 1
if test -s $Makefile_s ; then
d584 1
a584 1
	$spitshell >>$Makefile <<!GROK!THIS!
d589 1
a589 21
	case "$dtrace_h" in
	?*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
$(DTRACE_H): perldtrace.d
	$(DTRACE) -h -s perldtrace.d -o $(DTRACE_H)

mydtrace.h: $(DTRACE_H)

!NO!SUBS!
		;;
	esac
	case "$dtrace_o" in
	?*)
		$spitshell >>$Makefile <<'!NO!SUBS!'
$(DTRACE_O): perldtrace.d
	$(DTRACE) -G -s perldtrace.d -o $(DTRACE_O) $(ndt_obj)

!NO!SUBS!
		;;
    esac
	$spitshell >>$Makefile <<'!NO!SUBS!'
d594 1
a594 1
		$spitshell >>$Makefile <<'!NO!SUBS!'
d600 1
a600 1
			$spitshell >>$Makefile <<'!NO!SUBS!'
d609 1
a609 1
		$spitshell >>$Makefile <<'!NO!SUBS!'
d616 1
a616 1
	$spitshell >>$Makefile <<'!NO!SUBS!'
d632 6
a637 6
		$spitshell >>$Makefile <<'!NO!SUBS!'
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
	$(CC) -o miniperl$(EXE_EXT) $(CLDFLAGS) \
	    $(mini_obj) \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d641 5
a645 5
		$spitshell >>$Makefile <<'!NO!SUBS!'
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) perlmini$(OBJ_EXT) opmini$(OBJ_EXT)
	$(CC) -o miniperl$(EXE_EXT) $(mini_obj) \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d654 1
a654 1
		$spitshell >>$Makefile <<!NO!SUBS!
d661 2
a662 2
		$spitshell >>$Makefile <<'!NO!SUBS!'
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
d664 4
a667 4
	$(CC) $(CLDFLAGS) $(NAMESPACEFLAGS) -o miniperl$(EXE_EXT) \
	    $(mini_obj) \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d671 2
a672 2
		$spitshell >>$Makefile <<'!NO!SUBS!'
miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
d674 4
a677 4
	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o miniperl$(EXE_EXT) \
	    $(mini_obj) \
	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
d682 1
a682 1
	$spitshell >>$Makefile <<'!NO!SUBS!'
a793 12
!NO!SUBS!

case "${osname}" in
aix*)
$spitshell >>$Makefile <<'!NO!SUBS!'
suidperl$(EXE_EXT): $& sperl$(OBJ_EXT) perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
	$(SHRPENV) $(LDLIBPTH) $(CC) -o suidperl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) sperl$(OBJ_EXT) $(static_ext) $(LLIBPERL_NONSHR) $(LLIBPERL) `cat ext.libs` $(libs)

!NO!SUBS!
;;
*)
$spitshell >>$Makefile <<'!NO!SUBS!'
a797 2
;;
esac
d805 1
a805 1
$spitshell >>$Makefile <<!GROK!THIS!
d809 1
a809 1
	(cd ext/Devel-PPPort && `pwd`/run.sh ../../miniperl$(EXE_EXT) -I../../lib \$\$f); \
d815 1
a815 1
$spitshell >>$Makefile <<'!NO!SUBS!'
d824 7
a830 1
$spitshell >>$Makefile <<'!NO!SUBS!'
d840 4
a843 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib -MAutoSplit -MFile::Find -e 'find ({no_chdir=>1, wanted => sub {autosplit_lib_modules($$_) if /\.pm$$/}}, "lib")'
d846 4
a849 2
$(CONFIGPM_FROM_CONFIG_SH) $(CONFIGPOD): config.sh miniperl$(EXE_EXT) configpm Porting/Glossary lib/Config_git.pl
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib configpm
d852 1
a852 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) minimod.pl > lib/ExtUtils/Miniperl.pm
d860 1
a860 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -I"`pwd`/lib" $@@.PL
d867 1
a867 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib lib/lib_pm.PL
d872 1
a872 1
	cd lib/unicore && $(LDLIBPTH) $(RUN) ../../miniperl$(EXE_EXT) -I../../lib mktables -w
a874 15
# perl$(EXE_EXT) and ext because buildtoc uses Text::Wrap uses re
# But also this ensures that all extensions are built before we try to scan
# them, which picks up Devel::PPPort's documentation.
pod/perltoc.pod: $(perltoc_pod_prereqs) perl$(EXE_EXT) $(ext) pod/buildtoc
	$(LDLIBPTH) $(RUN) ./perl$(EXE_EXT) -Ilib pod/buildtoc --build-toc -q

pod/perlapi.pod pod/perlintern.pod: miniperl$(EXE_EXT) autodoc.pl embed.fnc
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib autodoc.pl

pod/perlmodlib.pod: miniperl$(EXE_EXT) pod/perlmodlib.PL MANIFEST
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib pod/perlmodlib.PL -q

pod/perldelta.pod: pod/perl5101delta.pod
	$(LNS) perl5101delta.pod pod/perldelta.pod

d880 1
a880 1
	    $(LNS) ../$$x "pod/perl"$$nx".pod" ; \
d883 4
d901 1
a901 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib Porting/makemeta
d975 1
d992 1
d996 1
a996 1
.PHONY: regen_headers regen_all
d998 1
a998 1
regen:	FORCE
d1001 2
a1002 2
regen_headers:	FORCE
	-perl regen.pl -v
d1004 1
a1004 1
regen_all: regen
d1009 2
a1010 2
	@@perl Porting/manisort -q || (echo "WARNING: re-sorting MANIFEST"; \
		perl Porting/manisort -q -o MANIFEST; sh -c true)
d1026 1
a1026 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
d1029 1
a1029 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
d1032 1
a1032 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
d1034 2
a1035 2
n_dummy $(nonxs_ext):	miniperl$(EXE_EXT) preplibrary FORCE
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d1038 1
a1038 1
$spitshell >>$Makefile <<EOF
d1042 1
a1042 1
$spitshell >>$Makefile <<'!NO!SUBS!'
a1059 1
	rm -f t/test_state
a1060 1
	rm -f ext/Test-Harness/t/ext/Test-Harness/t/source_tests/harness
d1072 1
a1072 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c perlmini.c uudmap.h generate_uudmap$(EXE_EXT)
d1076 1
a1076 1
	-rm -f perl.exp ext.libs $(generated_pods) uni.data opmini.o perlmini.o
d1085 1
a1085 1
	-rm -f config.arch config.over $(DTRACE_H)
a1091 1
	-rm -f lib/Config_git.pl git_version.h
d1093 1
a1093 1
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl --target=clean $$x MAKE=$(MAKE) ; \
d1101 4
a1104 9
	-@@if test -f miniperl$(EXE_EXT) ; then \
	for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) $(nonxs_ext) ; do \
	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl --target=$(CLEAN) $$x MAKE=$(MAKE) ; \
	done ; \
	else \
	sh $(CLEAN).sh ; \
	fi
	rm -f realclean.sh veryclean.sh
	-@@test ! -f ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib mkppport --clean
a1121 2
	rm -rf lib/TAP lib/Module/Pluggable lib/App
	rm -rf lib/mro
d1126 1
a1126 2
	rm -fr lib/B
	-rmdir lib/Data
d1132 1
d1183 1
a1183 1
	minitest coretest test.taintwarn test-reonly
d1210 1
a1210 1
	-@@test ! -f ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib uupacktool.pl -c
d1216 1
a1216 1
	  $(MAKE) TEST_ARGS='$(TEST_ARGS)' TESTFILE=$(TESTFILE) _test_tty   ; \
d1218 1
a1218 1
	  $(MAKE) TEST_ARGS='$(TEST_ARGS)' TESTFILE=$(TESTFILE) _test_notty ; \
d1252 1
a1252 1
		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
d1313 1
a1313 1
		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
a1322 3
test-reonly: test_prep
	PERL=./perl TEST_ARGS='-re \\bpat\\b \\breg \\bre\b \\bsubst \\brxcode' $(MAKE) TESTFILE=harness _test

d1395 1
a1395 1
	ctags -f Tags -N --totals --languages=c --langmap=c:+.h --exclude=opmini.c --exclude=perlmini.c *.c *.h
@


1.1.1.13
log
@Perl 5.12.2 from CPAN
@
text
@d1 1
d44 5
a188 1
dynamic_ext_re="lib/auto/re/re.$dlext"
a197 2
	Encode) extra_dep="$extra_dep
$this_target: lib/auto/Cwd/Cwd.$dlext" ;;
a201 2
	Text/ParseWords) extra_dep="$extra_dep
$this_target: lib/auto/Scalar/Util.$dlext" ;;
d222 1
a222 5
    for d in ext dist cpan; do
	if test -d $d/$p; then
	    nonxs_list="$nonxs_list $d/$p/pm_to_blib"
	fi
    done
d306 1
a306 12
# Macros to invoke a copy of miniperl during the build.  Targets which
# are built using these macros should depend on \$(MINIPERL_EXE)
MINIPERL_EXE = miniperl\$(EXE_EXT)
MINIPERL = \$(LDLIBPTH) \$(RUN) ./miniperl\$(EXE_EXT) -Ilib

# Macros to invoke a copy of our fully operational perl during the build.
PERL_EXE = perl\$(EXE_EXT)
RUN_PERL = \$(LDLIBPTH) \$(RUN) ./perl\$(EXE_EXT)

# Macros to run our tests
RUN_TESTS = \$(LDLIBPTH) ./runtests

a307 1
dynamic_ext_re = $dynamic_ext_re
d315 1
a315 1
public = \$(PERL_EXE) utilities translators
d421 1
a421 1
	myconfig.SH writemain.SH pod/Makefile.SH
d432 1
d436 1
a436 1
addedbyconf = UU $(shextract) $(plextract) pstruct
d439 3
a441 3
unidatafiles = lib/unicore/Decomposition.pl lib/unicore/TestProp.pl \
	lib/unicore/CombiningClass.pl lib/unicore/Name.pl \
	lib/unicore/Heavy.pl lib/unicore/mktables.lst
d455 1
a455 1
c3 = taint.c toke.c util.c deb.c run.c universal.c pad.c globals.c
d464 1
a464 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) mathoms$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT)
d466 1
a466 1
mini_obj =  $(obj1) $(obj2) $(obj3) $(ARCHOBJS) $(DTRACE_O)
d470 1
a470 1
perltoc_pod_prereqs = extra.pods pod/perlapi.pod pod/perldelta.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
a472 2
Icwd = -Icpan/Cwd -Icpan/Cwd/lib

d540 1
a540 1
all: $(FIRSTMAKEFILE) $(MINIPERL_EXE) miniperl $(generated_pods) $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
d544 9
d555 2
a556 6
# Both git_version.h and lib/Config_git.pl are built
# by make_patchnum.pl.
git_version.h: lib/Config_git.pl

lib/Config_git.pl: $(MINIPERL_EXE) make_patchnum.pl
	$(MINIPERL) make_patchnum.pl
d560 1
d562 1
a562 1
translators:	$(MINIPERL_EXE) $(CONFIGPM) $(dynamic_ext) FORCE
d565 1
a565 1
utilities:	$(MINIPERL_EXE) $(CONFIGPM) $(plextract) FORCE
d598 1
a598 3
globals\$(OBJ_EXT): uudmap.h bitcount.h

uudmap.h: bitcount.h
d600 2
a601 2
bitcount.h: generate_uudmap\$(HOST_EXE_EXT)
	\$(RUN) ./generate_uudmap\$(HOST_EXE_EXT) uudmap.h bitcount.h
d667 1
a667 1
MINIPERLEXP		= $(MINIPERL_EXE)
d775 2
a776 2
$(MINIPERL_EXE): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
	$(CC) -o $(MINIPERL_EXE) $(CLDFLAGS) \
d784 2
a785 2
$(MINIPERL_EXE): $& miniperlmain$(OBJ_EXT) $(mini_obj) perlmini$(OBJ_EXT) opmini$(OBJ_EXT)
	$(CC) -o $(MINIPERL_EXE) $(mini_obj) \
d804 1
a804 1
$(MINIPERL_EXE): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
d806 1
a806 1
	$(CC) $(CLDFLAGS) $(NAMESPACEFLAGS) -o $(MINIPERL_EXE) \
d814 1
a814 1
$(MINIPERL_EXE): $& miniperlmain$(OBJ_EXT) $(mini_obj) opmini$(OBJ_EXT) perlmini$(OBJ_EXT)
d816 1
a816 1
	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o $(MINIPERL_EXE) \
d826 1
a826 1
$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d832 1
a832 1
pure$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d835 1
a835 1
purecov$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d838 1
a838 1
quant$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
d931 20
d952 2
d963 1
a963 1
makeppport: \$(MINIPERL_EXE) \$(CONFIGPM)
d965 1
a965 1
	(cd ext/Devel-PPPort && `pwd`/run.sh ../../$(MINIPERL_EXE) -I../../lib \$\$f); \
d973 2
a974 2
makeppport: $(MINIPERL_EXE) $(CONFIGPM) $(nonxs_ext)
	$(MINIPERL) $(Icwd) mkppport
d982 4
d987 5
a991 1
preplibrary: $(MINIPERL_EXE) $(CONFIGPM) lib/re.pm $(PREPLIBRARY_LIBPERL)
d993 2
a994 1
$(CONFIGPM_FROM_CONFIG_SH): $(CONFIGPOD)
d996 2
a997 5
$(CONFIGPOD): config.sh $(MINIPERL_EXE) configpm Porting/Glossary lib/Config_git.pl
	$(MINIPERL) configpm

lib/ExtUtils/Miniperl.pm: miniperlmain.c $(MINIPERL_EXE) minimod.pl $(CONFIGPM)
	$(MINIPERL) minimod.pl > lib/ExtUtils/Miniperl.pm
d1003 1
a1003 1
$(plextract):	$(MINIPERL_EXE) $(CONFIGPM) x2p/s2p $(dynamic_ext)
d1005 1
a1005 1
	$(MINIPERL) $@@.PL
d1007 1
a1007 1
x2p/s2p: $(MINIPERL_EXE) $(CONFIGPM) $(dynamic_ext) x2p/s2p.PL
d1010 5
a1014 1
unidatafiles $(unidatafiles) pod/perluniprops.pod: uni.data
d1016 3
a1018 5
uni.data: $(MINIPERL_EXE) $(CONFIGPM) lib/unicore/mktables $(nonxs_ext)
	$(MINIPERL) $(Icwd) lib/unicore/mktables -C lib/unicore -P pod -maketest -makelist -p
#	Commented out so always runs, mktables looks at far more files than we
#	can in this makefile to decide if needs to run or not
#	touch uni.data
d1020 1
a1020 1
# $(PERL_EXE) and ext because buildtoc uses Text::Wrap uses re
d1023 2
a1024 2
pod/perltoc.pod: $(perltoc_pod_prereqs)  $(PERL_EXE) $(ext) pod/buildtoc
	$(RUN_PERL) -f -Ilib pod/buildtoc --build-toc -q
d1026 2
a1027 1
pod/perlapi.pod: pod/perlintern.pod
d1029 2
a1030 2
pod/perlintern.pod: $(MINIPERL_EXE) autodoc.pl embed.fnc
	$(MINIPERL) autodoc.pl
d1032 2
a1033 2
pod/perlmodlib.pod: $(MINIPERL_EXE) pod/perlmodlib.PL MANIFEST
	$(MINIPERL) $(Icwd) pod/perlmodlib.PL -q
d1035 1
a1035 4
pod/perldelta.pod: pod/perl5122delta.pod
	$(LNS) perl5122delta.pod pod/perldelta.pod

extra.pods: $(MINIPERL_EXE)
d1044 2
a1045 2
extras.make: $(PERL_EXE)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d1047 2
a1048 2
extras.test: $(PERL_EXE)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d1050 2
a1051 2
extras.install: $(PERL_EXE)
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d1057 1
a1057 1
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib Porting/makemeta
d1078 1
a1078 1
	$(RUN_PERL) installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
d1082 1
a1082 1
	$(RUN_PERL) installman --destdir=$(DESTDIR) $(INSTALLFLAGS)
d1088 1
a1088 1
	$(RUN_PERL) installhtml   \
d1095 1
a1095 1
      --ignore=Porting/Maintainers.pm,Porting/pumpkin.pod,Porting/repository.pod \
d1179 2
a1180 2
$(DYNALOADER):	$(MINIPERL_EXE) preplibrary FORCE $(nonxs_ext)
	$(MINIPERL) make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
d1182 2
a1183 2
d_dummy $(dynamic_ext):	$(MINIPERL_EXE) preplibrary makeppport $(DYNALOADER) FORCE $(PERLEXPORT)
	$(MINIPERL) make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
d1185 2
a1186 2
s_dummy $(static_ext):	$(MINIPERL_EXE) preplibrary makeppport $(DYNALOADER) FORCE
	$(MINIPERL) make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
d1188 2
a1189 2
n_dummy $(nonxs_ext):	$(MINIPERL_EXE) preplibrary FORCE
	$(MINIPERL) make_ext.pl $@@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
d1200 1
a1200 1
	@@eval `$(RUN_PERL) -Ilib -V:$(CONFIGVAR)`; echo $$$(CONFIGVAR)
d1204 2
a1205 1
	distclean veryclean _verycleaner
d1207 1
a1207 1
clean:		_tidy _mopup 
d1209 1
a1209 1
realclean:	_realcleaner _mopup
d1216 1
d1218 1
a1218 1
clobber:	_realcleaner _mopup _clobber
d1223 1
a1223 1
veryclean:	_verycleaner _mopup _clobber
d1228 1
a1228 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c perlmini.c uudmap.h generate_uudmap$(EXE_EXT) bitcount.h
d1239 1
a1239 1
	-rm -f $(PERL_EXE) $(MINIPERL_EXE) $(LIBPERL) libperl.* microperl
d1241 1
a1241 1
	-rm -f config.arch config.over $(DTRACE_H) runtests
d1250 1
a1250 1
	$(MINIPERL) make_ext.pl --target=clean $$x MAKE=$(MAKE) ; \
d1258 1
a1258 1
	-@@if test -f $(MINIPERL_EXE) ; then \
d1260 1
a1260 1
	$(MINIPERL) make_ext.pl --target=$(CLEAN) $$x MAKE=$(MAKE) ; \
d1266 1
a1266 4
	-for file in `find cpan dist ext -name ppport.h` ; do rm -f $$file; done

# Dear POSIX, thanks for making the default to xargs to be
# run once if nothhing is passed in. It is such a great help.
d1272 1
a1272 1
	rm -f t/misctmp* t/forktmp* t/tmp* t/c t/$(PERL_EXE) t/rantests
d1291 6
a1296 28
	rm -fr lib/CPAN lib/CPANPLUS
	rm -fr lib/ExtUtils/CBuilder
	-rmdir cpan/CPANPLUS-Dist-Build/t/dummy-cpanplus cpan/CPANPLUS/t/dummy-cpanplus cpan/CPANPLUS/t/dummy-localmirror
	-rmdir ext/B/lib
	-rmdir lib/Archive/Tar lib/Archive lib/Attribute
	-rmdir lib/CGI
	-rmdir lib/Data lib/Devel lib/Digest
	-rmdir lib/ExtUtils/Command lib/ExtUtils/Constant lib/ExtUtils/Liblist lib/ExtUtils/MakeMaker
	-rmdir lib/File/Spec lib/Filter/Util lib/Filter
	-rmdir lib/I18N/LangTags lib/IO/Socket lib/IO lib/IPC
	-rmdir lib/List/Util lib/List
	-rmdir lib/Locale/Maketext lib/Locale
	-rmdir lib/Log/Message lib/Log
	-rmdir lib/Math/Big* lib/Math
	-rmdir lib/Memoize lib/MIME
	-rmdir lib/Module/Build/Platform lib/Module/Build lib/Module/Load lib/Module
	-rmdir lib/Net/FTP lib/Object
	-rmdir lib/Parse/CPAN lib/Parse
	-rmdir lib/PerlIO/via lib/PerlIO
	-rmdir lib/Package lib/Params
	-rmdir lib/Pod/Perldoc lib/Pod/Simple lib/Pod/Text
	-rmdir lib/Sys lib/Scalar/Util lib/Scalar
	-rmdir lib/Term/UI lib/Thread
	-rmdir lib/Test/Builder/Tester lib/Test/Builder lib/Test
	-rmdir lib/Unicode/Collate
	-rmdir lib/XS/APItest lib/XS
	-rmdir lib/inc/latest lib/inc
	-rmdir lib/autodie/exception lib/autodie lib/encoding lib/threads
d1301 1
a1301 1
	@@$(LDLIBPTH) $(MAKE) _cleaner1 CLEAN=distclean
d1341 2
a1342 5
runtests: runtests.SH config.sh
	sh ./runtests.SH

.PHONY: test check test_prep test_prep_nodll test_prep_pre \
	test_prep_reonly test_tty test-tty test_notty test-notty \
d1347 1
a1347 5
	minitest coretest test.taintwarn test-reonly _test

_test:
	echo >&2 The _test target is deprecated. Please upgrade your smoker
	PERL=./perl $(RUN_TESTS) choose
d1352 5
d1361 8
a1368 2
test_prep: test_prep_pre $(MINIPERL_EXE) $(unidatafiles) $(PERL_EXE) $(dynamic_ext) $(TEST_PERL_DLL) runtests
	cd t && (rm -f $(PERL_EXE); $(LNS) ../$(PERL_EXE) $(PERL_EXE))
d1370 15
a1384 3
test_prep_reonly: $(MINIPERL_EXE) $(PERL_EXE) $(dynamic_ext_re) $(TEST_PERL_DLL)
	$(MINIPERL) make_ext.pl $(dynamic_ext_re) MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
	cd t && (rm -f $(PERL_EXE); $(LNS) ../$(PERL_EXE) $(PERL_EXE))
d1387 1
a1387 1
	$(RUN_TESTS) choose
d1390 1
a1390 1
	$(RUN_TESTS) tty
d1393 1
a1393 1
	$(RUN_TESTS) no-tty
d1396 1
a1396 1
	TEST_ARGS=-utf8 $(RUN_TESTS) choose
d1399 1
a1399 1
	TEST_ARGS=-core $(RUN_TESTS) choose
d1410 1
a1410 1
	TEST_ARGS=-torture $(RUN_TESTS) choose
d1415 2
a1416 2
	- cd t && (rm -f $(PERL_EXE); $(LNS) ../$(MINIPERL_EXE) $(PERL_EXE)) \
		&& $(RUN_PERL) TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
d1419 1
a1419 1
	TEST_ARGS=-utf16 $(RUN_TESTS) choose
d1422 1
a1422 1
	TEST_ARGS="-utf8 -utf16" $(RUN_TESTS) choose
d1427 1
d1430 1
a1430 1
	PERL_VALGRIND=1 VALGRIND='$(VALGRIND)' $(RUN_TESTS) choose
d1433 1
a1433 1
	PERL_VALGRIND=1 TEST_ARGS=-utf8 $(RUN_TESTS) choose
d1436 1
a1436 1
	PERL_VALGRIND=1 $(RUN_TESTS) no-tty
d1441 1
a1441 1
	cd t && (rm -f ./perl.third$(EXE_EXT); $(LNS) ../perl.third$(EXE_EXT) perl.third(EXE_EXT))
d1444 1
a1444 1
	PERL=./perl.third PERL_3LOG=1 $(RUN_TESTS) choose
d1447 1
a1447 1
	PERL=./perl.third PERL_3LOG=1 TEST_ARGS=-utf8 $(RUN_TESTS) choose
d1450 1
a1450 1
	PERL=./perl.third PERL_3LOG=1 $(RUN_TESTS) choose
d1455 1
a1455 1
	TEST_ARGS=-deparse $(RUN_TESTS) choose
d1458 1
a1458 1
	TEST_ARGS=-deparse $(RUN_TESTS) no-tty
d1463 1
a1463 1
	TEST_ARGS=-taintwarn $(RUN_TESTS) choose
d1466 2
a1467 1
	-@@test -f lib/Config.pm || $(MAKE) lib/Config.pm $(unidatafiles)
d1470 1
a1470 1
	@@echo "to build lib/Config.pm, or the Unicode data files."
d1475 3
a1477 3
minitest: $(MINIPERL_EXE) lib/re.pm minitest.prep
	- cd t && (rm -f $(PERL_EXE); $(LNS) ../$(MINIPERL_EXE) $(PERL_EXE)) \
		&& $(RUN_PERL) TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t op/*.t uni/*.t </dev/tty
d1482 1
a1482 1
	TESTFILE=harness $(RUN_TESTS) choose
d1485 1
a1485 7
	HARNESS_NOTTY=1 TESTFILE=harness $(RUN_TESTS) choose

test-reonly: test_prep_reonly
	TEST_ARGS='-re \bre\/' TESTFILE=harness $(RUN_TESTS) choose


# Porting tests (well-formedness of pod, manifest, etc)
d1487 2
a1488 2
test_porting: test_prep
	cd t && $(RUN_PERL) harness porting/*.t
d1498 1
a1498 1
	$(RUN_PERL) -Ilib utils/perlbug -ok -s '(UNINSTALLED)'
d1501 1
a1501 1
	$(RUN_PERL) -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok
d1504 1
a1504 1
	$(RUN_PERL) -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -A
d1507 1
a1507 1
	$(RUN_PERL) -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A
d1510 1
a1510 1
	$(RUN_PERL) -Ilib utils/perlbug -nok -s '(UNINSTALLED)'
d1513 1
a1513 1
	$(RUN_PERL) -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok
d1516 1
a1516 1
	$(RUN_PERL) -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -A
d1519 1
a1519 1
	$(RUN_PERL) -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A
@


1.1.1.14
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d23 14
a180 10
: is Cwd static or dynamic
static_cwd='define'
list_util_dep='$(PERL_EXE)'
for f in $dynamic_ext; do
   case $f in
       Cwd) static_cwd='undef' ;;
       List/Util) list_util_dep=lib/auto/List/Util/Util.$dlext
   esac
done

d184 1
a184 3
extra_dep='
ext/Pod-Functions/pm_to_blib: cpan/Pod-Simple/pm_to_blib pod/perlfunc.pod
'
d193 2
d196 1
a196 1
$this_target: $list_util_dep" ;;
d199 2
a229 1
minidtrace_o=''
d234 1
a234 2
		&& rm -f perldtrace.tmp && dtrace_o='perldtrace$(OBJ_EXT)' \
		&& minidtrace_o='miniperldtrace$(OBJ_EXT)'
a339 5
!GROK!THIS!

case "${osname}" in
linux*|darwin)
$spitshell >>$Makefile <<!GROK!THIS!
d342 1
a342 6
VALGRIND ?= valgrind
VG_TEST  ?= ./perl -e 1 2>/dev/null

!GROK!THIS!
	;;
esac
a343 1
$spitshell >>$Makefile <<!GROK!THIS!
a346 1
MINIDTRACE_O = $minidtrace_o
d431 1
a431 1
private = preplibrary $(CONFIGPM) $(CONFIGPOD) lib/ExtUtils/Miniperl.pm git_version.h lib/buildcustomize.pl
d435 5
a439 1
sh = Makefile.SH cflags.SH config_h.SH makedepend.SH myconfig.SH pod/Makefile.SH
d441 2
a442 1
shextract = Makefile cflags config.h makedepend makedir myconfig pod/Makefile
d444 7
a450 1
addedbyconf = UU $(shextract) pstruct
a454 1
	lib/unicore/UCD.pl lib/unicore/Name.pm \
d464 2
a465 3
h5 = utf8.h warnings.h mydtrace.h op_reg_common.h l1_char_class_tab.h
h6 = charclass_invlists.h
h = $(h1) $(h2) $(h3) $(h4) $(h5) $(h6)
d469 1
a469 1
c3 = taint.c toke.c util.c deb.c run.c universal.c pad.c globals.c keywords.c
d473 1
a473 1
c = $(c1) $(c2) $(c3) $(c4) $(c5) miniperlmain.c opmini.c perlmini.c
d476 1
a476 2
obj0mini = perlmini$(OBJ_EXT) opmini$(OBJ_EXT) miniperlmain$(OBJ_EXT)
obj1 = $(madlyobj) $(mallocobj) gv$(OBJ_EXT) toke$(OBJ_EXT) perly$(OBJ_EXT) pad$(OBJ_EXT) regcomp$(OBJ_EXT) dump$(OBJ_EXT) util$(OBJ_EXT) mg$(OBJ_EXT) reentr$(OBJ_EXT) mro$(OBJ_EXT) keywords$(OBJ_EXT)
d480 1
a480 2
minindt_obj = $(obj0mini) $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
mini_obj = $(minindt_obj) $(MINIDTRACE_O)
d484 1
a484 1
perltoc_pod_prereqs = extra.pods pod/perl5163delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
a485 1
generated_headers = uudmap.h bitcount.h mg_data.h
d487 1
a487 1
Icwd = -Idist/Cwd -Idist/Cwd/lib -Idist/Carp/lib
d556 1
a556 1
all: $(FIRSTMAKEFILE) $(MINIPERL_EXE) $(generated_pods) $(private) $(unidatafiles) $(public) $(dynamic_ext) $(nonxs_ext) extras.make
d572 2
a573 1
!NO!SUBS!
d575 2
a576 16
# Making utilities and translators require Cwd.  If we have dynamic
# loading, we only need miniperl and Cwd.$dlext.  If we have static
# loading, we need to build perl first.
case "$usedl$static_cwd" in
defineundef)
    util_deps='$(MINIPERL_EXE) $(CONFIGPM) lib/auto/Cwd/Cwd$(DLSUFFIX) FORCE'
     x2p_deps='$(MINIPERL_EXE) $(CONFIGPM) $(dynamic_ext) FORCE'
    ;;
definedefine)
    util_deps='$(PERL_EXE) $(CONFIGPM) FORCE'
     x2p_deps='$(PERL_EXE) $(CONFIGPM) $(dynamic_ext) FORCE'
    ;;
*)  util_deps='$(PERL_EXE) $(CONFIGPM) FORCE'
     x2p_deps='$(PERL_EXE) $(CONFIGPM) FORCE'
    ;;
esac
a577 16
$spitshell >>$Makefile <<!GROK!THIS!
translators:	$x2p_deps
	@@echo " "; echo "	Making x2p stuff"; cd x2p; \$(LDLIBPTH) \$(MAKE) all

x2p/s2p: $x2p_deps
	cd x2p; \$(LDLIBPTH) \$(MAKE) s2p

x2p/find2perl: $x2p_deps
	cd x2p; \$(LDLIBPTH) \$(MAKE) find2perl

utilities:	$util_deps
	@@echo " "; echo "	Making utilities"; cd utils; \$(LDLIBPTH) \$(MAKE) all

!GROK!THIS!

$spitshell >>$Makefile <<'!NO!SUBS!'
d588 1
d590 1
a590 5
for file in op perl; do
    if $issymlink $file.c; then
        $spitshell >>$Makefile <<!GROK!THIS!

# We do a copy of the $file.c instead of a symlink because gcc gets huffy
d594 3
a596 6
${file}mini.c: $file.c
	\$(RMS) ${file}mini.c
	\$(CPS) ${file}.c ${file}mini.c
!GROK!THIS!
    else
        $spitshell >>$Makefile <<!GROK!THIS!
d598 2
a599 5
${file}mini.c: $file.c
	\$(RMS) ${file}mini.c
	\$(LNS) ${file}.c ${file}mini.c
!GROK!THIS!
    fi
d601 3
a603 1
    $spitshell >>$Makefile <<!GROK!THIS!
d605 2
a606 4
${file}mini\$(OBJ_EXT): ${file}mini.c
	\$(CCCMD) \$(PLDLFLAGS) $DPERL_IS_MINIPERL $DPERL_EXTERNAL_GLOB ${file}mini.c
!GROK!THIS!
done
d608 1
a608 1
$spitshell >>$Makefile <<'!NO!SUBS!'
d610 1
a610 1
globals$(OBJ_EXT): $(generated_headers)
d612 2
a613 1
uudmap.h mg_data.h: bitcount.h
d615 2
a616 7
bitcount.h: generate_uudmap$(HOST_EXE_EXT)
	$(RUN) ./generate_uudmap$(HOST_EXE_EXT) $(generated_headers)

generate_uudmap$(OBJ_EXT): mg_raw.h

generate_uudmap$(HOST_EXE_EXT): generate_uudmap$(OBJ_EXT)
	$(CC) -o generate_uudmap$(EXE_EXT) $(LDFLAGS) generate_uudmap$(OBJ_EXT) $(libs)
d618 2
d623 2
a624 2
perlmain.c: $(MINIPERL_EXE) lib/ExtUtils/Miniperl.pm
	$(MINIPERL) -Ilib -MExtUtils::Miniperl -e 'writemain(@@ARGV)' DynaLoader $(static_ext) > perlmain.c
d687 2
a688 2
perl.exp: $(MINIPERLEXP) makedef.pl $(CONFIGPM) $(SYM) $(SYMH)
	./$(MINIPERLEXP) makedef.pl --sort-fold PLATFORM=aix CC_FLAGS="$(OPTIMIZE)" > perl.exp
d696 1
a696 1
perl5.def: $(MINIPERLEXP) makedef.pl $(CONFIGPM) $(SYM) $(SYMH) miniperl.map
a725 1
# dtrace dicards const qualifiers from arguments, put them back
d727 1
a727 3
	$(DTRACE) -h -s perldtrace.d -o $(DTRACE_H).in
	sed -e '/const/!s/char \*/const char */g' $(DTRACE_H).in >$(DTRACE_H)
	$(RMS) $(DTRACE_H).in
d737 1
a737 1
$(DTRACE_O): perldtrace.d $(ndt_obj)
a739 3
$(MINIDTRACE_O): perldtrace.d $(minindt_obj) perlmini$(OBJ_EXT)
	$(DTRACE) -G -s perldtrace.d -o $(MINIDTRACE_O) $(minindt_obj) perlmini$(OBJ_EXT)

d787 4
a790 2
$(MINIPERL_EXE): $& $(mini_obj)
	$(CC) -o $(MINIPERL_EXE) $(CLDFLAGS) $(mini_obj) $(libs)
d796 3
a798 2
$(MINIPERL_EXE): $& $(mini_obj)
	$(CC) -o $(MINIPERL_EXE) $(mini_obj) $(libs)
d816 1
a816 1
$(MINIPERL_EXE): $& $(mini_obj)
d819 2
a820 1
	    $(mini_obj) $(libs)
d826 1
a826 1
$(MINIPERL_EXE): $& $(mini_obj)
d829 2
a830 1
	    $(mini_obj) $(libs)
d853 1
a853 6
!NO!SUBS!

case "${osname}${osvers}" in
linux*|darwin*)
	$spitshell >>$Makefile <<'!NO!SUBS!'
# Valgrind perl (currently Linux, Darwin only)
d862 1
a862 6
	$(VALGRIND) $(VG_TEST) || exit 1
!NO!SUBS!
	;;
esac	

$spitshell >>$Makefile <<'!NO!SUBS!'
d973 1
a973 1
preplibrary: $(MINIPERL_EXE) $(CONFIGPM) $(PREPLIBRARY_LIBPERL)
d983 10
a992 2
lib/buildcustomize.pl: $(MINIPERL_EXE) write_buildcustomize.pl
	$(MINIPERL) write_buildcustomize.pl >lib/buildcustomize.pl
d1006 1
a1006 1
	$(RUN_PERL) -f -Ilib pod/buildtoc -q
d1016 2
a1017 2
pod/perl5163delta.pod: pod/perldelta.pod
	$(LNS) perldelta.pod pod/perl5163delta.pod
d1040 4
a1043 1
install_strip install-strip:
d1046 1
a1046 1
install install_all install-all:
d1049 1
a1049 1
install_verbose install-verbose:
d1052 1
a1052 1
install_silent install-silent:
d1055 1
a1055 1
no_install no-install:
d1078 1
d1090 1
a1090 1
run_byacc run-byacc:
d1094 1
a1094 1
regen_perly regen-perly:
d1106 3
a1108 1
SYM  = globvar.sym perlio.sym
d1115 5
a1119 2
#	embed.pl:	proto.h embed.h embedvar.h perlapi.h perlapi.c
#	opcode.pl:	opcode.h opnames.h pp_proto.h
a1121 1
#	feature.pl:	feature.h lib/feature.pm
d1129 4
a1132 3
AUTOGEN_FILES = opcode.h opnames.h pp_proto.h proto.h embed.h embedvar.h \
		perlapi.h perlapi.c regnodes.h warnings.h lib/warnings.pm \
		lib/feature.pm feature.h
a1137 1
	-perl regen/uconfig_h.pl
d1139 1
a1139 1
regen_headers regen-headers:	FORCE
a1140 7
	-perl regen/uconfig_h.pl -v

regen_meta regen-meta:  META.yml

META.yml:   FORCE
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib Porting/makemeta

d1142 1
a1142 1
regen_all regen-all: regen regen_meta
d1163 1
a1163 1
$(DYNALOADER):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary FORCE $(nonxs_ext)
d1166 1
a1166 1
d_dummy $(dynamic_ext):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary makeppport $(DYNALOADER) FORCE $(PERLEXPORT)
d1169 1
a1169 1
s_dummy $(static_ext):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary makeppport $(DYNALOADER) FORCE
d1172 1
a1172 1
n_dummy $(nonxs_ext):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary FORCE
d1210 1
a1210 1
	rm -f *$(OBJ_EXT) *$(LIB_EXT) all perlmain.c opmini.c perlmini.c generate_uudmap$(EXE_EXT) $(generated_headers)
d1214 1
a1214 1
	-rm -f perl.exp ext.libs $(generated_pods) uni.data opmini.o perlmini.o pod/roffitall
d1222 1
d1257 1
a1257 2
	rm -f t/$(PERL_EXE) t/rantests
	rm -rf t/tmp*
d1267 1
a1267 1
	rm -f preload
a1277 2
	rm -f pod2htmd.tmp
	rm -rf pod/perlfunc pod/perlipc
d1281 1
a1281 1
	-rmdir lib/CGI lib/Carp
d1298 1
a1298 1
	-rmdir lib/Term/UI lib/Thread lib/Tie/Hash
d1337 1
d1341 1
d1370 1
a1370 3
test_prep test-prep: test_prep_pre $(MINIPERL_EXE) $(unidatafiles) $(PERL_EXE) \
	$(dynamic_ext) $(TEST_PERL_DLL) runtests x2p/s2p x2p/find2perl \
	$(generated_pods)
d1380 1
a1380 1
test_tty test-tty: test_prep
d1383 1
a1383 1
test_notty test-notty: test_prep
d1392 6
d1407 1
a1407 1
		&& $(RUN_PERL) TEST -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
a1414 5
!NO!SUBS!

case "${osname}${osvers}" in
linux*|darwin*)
	$spitshell >>$Makefile <<'!NO!SUBS!'
a1426 5
!NO!SUBS!
	;;
esac

$spitshell >>$Makefile <<'!NO!SUBS!'
d1464 1
a1464 1
minitest: $(MINIPERL_EXE) minitest.prep
d1466 1
a1466 1
		&& $(RUN_PERL) TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t op/*.t uni/*.t </dev/tty
d1470 1
a1470 1
test_harness test-harness: test_prep
d1476 1
a1476 1
test_reonly test-reonly: test_prep_reonly
d1482 2
a1483 2
test_porting test-porting: test_prep
	cd t && $(RUN_PERL) harness porting/*.t ../lib/diagnostics.t
d1516 1
a1516 1
.PHONY: clist hlist shlist
d1527 3
d1537 18
a1554 1
.PHONY: ctags
@


1.1.1.15
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a0 11
#!/bin/sh

# quote() - Creates a shell literal
# Usage:  echo "...` quote "..." `..."
quote() {
	case "$1" in
	'') echo "''" ;;
	*)  echo "$1" | sed 's/\([^a-zA-Z0-9.:_\-\/]\)/\\\1/g' ;;
	esac
}

a28 1
pwd="`pwd`"
d40 4
a43 2
	'')  ldlibpth="LD_LIBRARY_PATH=` quote "$pwd" `" ;;
	*)   ldlibpth="LD_LIBRARY_PATH=` quote "$pwd" `:` quote "$LD_LIBRARY_PATH" `" ;;
d55 1
a55 1
	darwin*)
d122 1
a122 7
		eval "ldlibpthval=\"\$$ldlibpthname\""

		case "$ldlibpthval" in
		'')  ldlibpth="$ldlibpthname=` quote "$pwd" `" ;;
		*)   ldlibpth="$ldlibpthname=` quote "$pwd" `:` quote "$ldlibpthval" `" ;;
		esac

d125 2
a126 1

d130 5
d181 1
a181 1
ext/Pod-Functions/pm_to_blib: cpan/Pod-Simple/pm_to_blib cpan/Pod-Escapes/pm_to_blib pod/perlfunc.pod
d299 1
a299 1
HOST_EXE_EXT = $_exe
d459 1
a459 1
h2 = embed.h form.h gv.h handy.h hv.h hv_func.h keywords.h mg.h op.h opcode.h
d485 1
a485 1
perltoc_pod_prereqs = extra.pods pod/perl5182delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
d833 1
a833 1
	aix*)
d1061 2
a1062 3
pod/perl5182delta.pod: pod/perldelta.pod
	$(RMS) pod/perl5182delta.pod
	$(LNS) perldelta.pod pod/perl5182delta.pod
d1180 1
a1180 1
regen_meta regen-meta:  META.yml META.json
d1183 1
a1183 4
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib Porting/makemeta -y

META.json:   FORCE
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib Porting/makemeta -j
d1210 1
a1210 1
d_dummy $(dynamic_ext):	$(MINIPERL_EXE) lib/buildcustomize.pl preplibrary makeppport $(DYNALOADER) FORCE $(PERLEXPORT) $(LIBPERL)
d1447 1
a1447 1
		&& $(RUN_PERL) TEST -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t opbasic/*.t op/*.t uni/*.t </dev/tty
d1516 1
a1516 1
		&& $(RUN_PERL) TEST base/*.t comp/*.t cmd/*.t run/*.t io/*.t re/*.t opbasic/*.t op/*.t uni/*.t </dev/tty
d1648 3
@


1.1.1.16
log
@Import perl-5.20.1
@
text
@d23 10
a32 1
Makefile=Makefile
d80 1
a80 1
	netbsd*|freebsd[234]*|openbsd*|dragonfly*|bitrig*)
d305 1
a305 6
RUN = 

# When cross-compiling we want to use a (mini)perl built for the host, not the target
HOST_PERL = $hostperl
HOST_GENERATE = $hostgenerate
SYSTEM_PERL = $perl
d318 1
a318 3
MINIPERL = \$(LDLIBPTH) ./miniperl\$(EXE_EXT) -Ilib

!GROK!THIS!
a319 10
case "$usecrosscompile$perl" in
define?*)
	$spitshell >>$Makefile <<!GROK!THIS!
# Macros to invoke a copy of our fully operational perl during the build.
PERL_EXE = perl\$(EXE_EXT)
RUN_PERL = \$(LDLIBPTH) \$(RUN) $perl\$(EXE_EXT)
!GROK!THIS!
	;;
*)
	$spitshell >>$Makefile <<!GROK!THIS!
d322 1
a322 4
RUN_PERL = \$(LDLIBPTH) \$(RUN) ./perl\$(EXE_EXT) -Ilib
!GROK!THIS!
	;;
esac
a323 1
$spitshell >>$Makefile <<!GROK!THIS!
d407 2
d412 1
a412 1
CCCMD    = sh $(shellflags) cflags "optimize='$(OPTIMIZE)'" $@@
d414 1
a414 1
CCCMDSRC = sh $(shellflags) cflags "optimize='$(OPTIMIZE)'" $<
d423 6
d430 11
a440 3
SH_to_target() {
    echo $@@ | sed -e s/\\\.SH//g -e s/_/./g
}
d442 3
a444 2
SH='Makefile.SH cflags.SH config_h.SH makedepend.SH myconfig.SH runtests.SH pod/Makefile.SH x2p/Makefile.SH'
shextract=`SH_to_target $SH`
d447 1
a447 1
$spitshell >>$Makefile <<!GROK!THIS!
d449 1
a449 1
private = preplibrary \$(CONFIGPM) \$(CONFIGPOD) git_version.h lib/buildcustomize.pl
d453 1
a453 1
sh = $SH
d455 1
a455 5
shextract = $shextract
!GROK!THIS!

## In the following dollars and backticks do not need the extra backslash.
$spitshell >>$Makefile <<'!NO!SUBS!'
d479 1
a479 1
c4 = perlio.c perlapi.c numeric.c mathoms.c locale.c pp_pack.c pp_sort.c caretx.c
d488 1
a488 1
obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ_EXT) deb$(OBJ_EXT) universal$(OBJ_EXT) globals$(OBJ_EXT) perlio$(OBJ_EXT) perlapi$(OBJ_EXT) numeric$(OBJ_EXT) mathoms$(OBJ_EXT) locale$(OBJ_EXT) pp_pack$(OBJ_EXT) pp_sort$(OBJ_EXT) caretx$(OBJ_EXT)
d495 1
a495 1
perltoc_pod_prereqs = extra.pods pod/perl5201delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
d499 2
d560 1
a560 2
	@@echo `$(CCCMD)` $(PLDLFLAGS) $*.c
	@@`$(CCCMD)` $(PLDLFLAGS) $*.c
d563 1
a563 2
	@@echo `$(CCCMDSRC)` -E $*.c \> $*.i
	@@`$(CCCMDSRC)` -E $*.c > $*.i
d566 1
a566 2
	@@echo `$(CCCMDSRC)` -S $*.c
	@@`$(CCCMDSRC)` -S $*.c
d592 1
a592 1
     x2p_deps="\$(MINIPERL_EXE) \$(CONFIGPM) \$(dynamic_ext) x2p/$firstmakefile FORCE"
d596 1
a596 1
     x2p_deps="\$(PERL_EXE) \$(CONFIGPM) \$(dynamic_ext) x2p/$firstmakefile FORCE"
d599 1
a599 1
     x2p_deps="\$(PERL_EXE) \$(CONFIGPM) x2p/$firstmakefile FORCE"
a603 3
x2p/$firstmakefile:	makedepend
	cd x2p; \$(MAKE) depend

d613 1
a613 4
utils/Makefile: \$(MINIPERL_EXE) \$(CONFIGPM) utils/Makefile.PL
	\$(MINIPERL) -Ilib utils/Makefile.PL

utilities:	utils/Makefile $util_deps
d654 1
a654 2
	echo @@\`\$(CCCMD)\` \$(PLDLFLAGS) $DPERL_IS_MINIPERL $DPERL_EXTERNAL_GLOB ${file}mini.c
	@@\`\$(CCCMD)\` \$(PLDLFLAGS) $DPERL_IS_MINIPERL $DPERL_EXTERNAL_GLOB ${file}mini.c
d664 3
a668 18
!NO!SUBS!

# If hostgerenate isn't defined, then we have to build
# generate_uudmap and run it. This can potentially mean running
# it on the target system if we're cross-compiling.
# If it is defined, then we just run it locally.
case "$hostgenerate" in
''|'undef')
$spitshell >>$Makefile <<!GROK!THIS!
bitcount.h: generate_uudmap\$(HOST_EXE_EXT)
	$run ./generate_uudmap\$(HOST_EXE_EXT) \$(generated_headers)
	-@@for f in \$(generated_headers); do \\
	    $from \$\$f; \\
	done

!GROK!THIS!

$spitshell >>$Makefile <<'!NO!SUBS!'
d672 2
a673 14
!NO!SUBS!
;;
*)
$spitshell >>$Makefile <<'!NO!SUBS!'
bitcount.h: generate_uudmap$(HOST_EXE_EXT)
	./generate_uudmap$(HOST_EXE_EXT) $(generated_headers)

generate_uudmap$(HOST_EXE_EXT): generate_uudmap$(OBJ_EXT)
	-@@rm generate_uudmap$(HOST_EXE_EXT)
	$(LNS) $(HOST_GENERATE) generate_uudmap$(HOST_EXE_EXT)

!NO!SUBS!
;;
esac
d675 2
d678 2
a679 3
$spitshell >>$Makefile <<'!NO!SUBS!'
perlmain.c: $(MINIPERL_EXE) ext/ExtUtils-Miniperl/pm_to_blib
	$(MINIPERL) -Ilib -MExtUtils::Miniperl -e 'writemain(\"perlmain.c", @@ARGV)' DynaLoader $(static_ext)
a839 9
# The seemingly cranky ordering of having $(MINIPERL_EXE) depend on
# lib/buildcustomize.pl despite the reality that lib/buildcustomize.pl needs
# miniperl to exist first permits us to
# a) have one rule generate both miniperl and lib/buildcustomize.pl
#    (so that lib/buildcustomise.pl is always available. This simplifies things)
# b) have the rest of the Makefile depend on the more obvious $(MINIPERL_EXE)

$(MINIPERL_EXE): lib/buildcustomize.pl

d845 1
a845 1
lib/buildcustomize.pl: $& $(mini_obj)
d847 1
a847 2
	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	$(MINIPERL) -f write_buildcustomize.pl
d852 3
a854 4
lib/buildcustomize.pl: $& $(mini_obj) write    ldcustomize.pl
	$(CC) -o $(MINIPERL_EXE) $(mini_obj    libs)
	$(LDLIBPTH) ./miniperl$(HOST    _EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	$(MINIPERL) -f write_buildcustomize.pl    
d871 1
a871 1
lib/buildcustomize.pl: $& $(mini_obj) write_buildcustomize.pl
d875 1
a875 2
	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	$(MINIPERL) -f write_buildcustomize.pl
d879 2
a880 3
		if test "X$hostperl" != X; then
			$spitshell >>$Makefile <<!GROK!THIS!
lib/buildcustomize.pl: \$& \$(mini_obj) write_buildcustomize.pl
d882 1
a882 10
	-@@rm \$(MINIPERL_EXE)
	\$(LNS) \$(HOST_PERL) \$(MINIPERL_EXE)
	\$(LDLIBPTH) ./miniperl\$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	\$(MINIPERL) -f write_buildcustomize.pl 'osname' "$osname"
!GROK!THIS!
		else
			$spitshell >>$Makefile <<'!NO!SUBS!'
lib/buildcustomize.pl: $& $(mini_obj) write_buildcustomize.pl
	-@@rm -f miniperl.xok
	$(CC) $(CLDFLAGS) -o $(MINIPERL_EXE) \
d884 1
a884 2
	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
	$(MINIPERL) -f write_buildcustomize.pl
a885 1
		fi
d891 1
a891 1
$(PERL_EXE): $& perlmain$(OBJ_EXT) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT) write_buildcustomize.pl
d893 104
a996 1
	$(SHRPENV) $(CC) -o perl $(CLDFLAGS) $(CCDLFLAGS) perlmain$(OBJ_EXT) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
d1027 1
a1027 1
	$(MINIPERL) mkppport
d1043 6
d1052 1
a1052 1
	$(MINIPERL) lib/unicore/mktables -C lib/unicore -P pod -maketest -makelist -p
d1057 1
a1057 1
# $(PERL_EXE) and ext because pod_lib.pl needs Digest::MD5
d1061 1
a1061 1
	$(RUN_PERL) -f pod/buildtoc -q
d1069 1
a1069 1
	$(MINIPERL) pod/perlmodlib.PL -q
d1071 3
a1073 3
pod/perl5201delta.pod: pod/perldelta.pod
	$(RMS) pod/perl5201delta.pod
	$(LNS) perldelta.pod pod/perl5201delta.pod
d1085 1
a1085 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -MCPAN -e '@@ARGV&&make(@@ARGV)' `cat extras.lst`
d1088 1
a1088 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -MCPAN -e '@@ARGV&&test(@@ARGV)' `cat extras.lst`
d1091 1
a1091 1
	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`
d1096 2
a1097 2
# Set this to an empty string to avoid an attempt of rebuild before install
INSTALL_DEPENDENCE = all
d1099 2
a1100 1
no_install no-install: install-notify
d1102 2
a1103 2
install: install-all
!NO!SUBS!
d1105 2
d1108 2
a1109 5
for name in all notify silent strip verbose; do
    flags="--$name";
    flags=`echo $flags | sed -e 's/--all//'`
    if test "X$hostperl" != X; then
        $spitshell >>$Makefile <<EOT
d1111 2
a1112 6
install_$name install-$name: \$(INSTALL_DEPENDENCE) installperl all installman
	\$(HOST_PERL) installperl --destdir=\$(DESTDIR) $flags \$(INSTALLFLAGS) \$(STRIPFLAGS)
	\$(HOST_PERL) installman --destdir=\$(DESTDIR) $flags
EOT
    else
        $spitshell >>$Makefile <<EOT
a1113 11
install_$name install-$name: \$(INSTALL_DEPENDENCE) installperl all installman
	\$(RUN_PERL) installperl --destdir=\$(DESTDIR) $flags \$(INSTALLFLAGS) \$(STRIPFLAGS)
	\$(RUN_PERL) installman --destdir=\$(DESTDIR) $flags
EOT
    fi

    test $name = notify || echo '	-@@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) -Ilib -MCPAN -e '\''@@ARGV&&install(@@ARGV)'\'' `cat extras.lst`' >>$Makefile
done

if test "X$hostperl" != X; then
	$spitshell >>$Makefile <<'!NO!SUBS!'
d1115 1
a1115 1
	$(HOST_PERL) installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
a1118 22
	$(HOST_PERL) installman --destdir=$(DESTDIR) $(INSTALLFLAGS)

# XXX Experimental. Hardwired values, but useful for testing.
# Eventually Configure could ask for some of these values.
install.html: all installhtml
	-@@test -f README.vms && cd vms && $(LNS) ../README.vms README_vms.pod && cd ..
	$(HOST_PERL) installhtml   \
      --podroot=. --podpath=. --recurse  \
      --htmldir=$(privlib)/html   \
      --htmlroot=$(privlib)/html  \
      --splithead=pod/perlipc     \
      --splititem=pod/perlfunc    \
      --ignore=Porting/Maintainers.pm,Porting/pumpkin.pod,Porting/repository.pod \
      --verbose
!NO!SUBS!
else
	$spitshell >>$Makefile <<'!NO!SUBS!'
install.perl:	$(INSTALL_DEPENDENCE) installperl
	$(RUN_PERL) installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
	-@@test ! -s extras.lst || PATH="`pwd`:\${PATH}" PERL5LIB="`pwd`/lib" \$(RUN_PERL) -Ilib -MCPAN -e '@@ARGV&&install(@@ARGV)' `cat extras.lst`

install.man:	all installman
a1132 2
!NO!SUBS!
fi
a1133 1
$spitshell >>$Makefile <<'!NO!SUBS!'
d1194 1
a1194 1
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) Porting/makemeta -y
d1197 1
a1197 1
	PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib" $(RUN_PERL) Porting/makemeta -j
d1242 1
a1242 1
	@@eval `$(RUN_PERL) -V:$(CONFIGVAR)`; echo $$$(CONFIGVAR)
d1254 1
a1254 2
	-@@rm -f Cross/run-* Cross/to-* Cross/from-* Cross/mkdir
	-rm -rf host
d1274 4
a1277 1
	-rm -f *perl.xok
d1280 1
a1280 1
	-rm -f config.arch config.over $(DTRACE_H)
d1305 1
a1305 1
	-rm -f `grep -v ^# mkppport.lst | grep . | sed -e 's/$$/\/ppport.h/'`
d1316 1
d1318 1
a1318 1
	rm -f $(FIRSTMAKEFILE) $(FIRSTMAKEFILE).old makefile.old utils/Makefile
d1326 10
d1338 1
d1340 26
a1365 36
	rm -f so_locations $(LIBPERL_NONSHR) $(MINIPERL_NONSHR)
	-rmdir lib/version lib/threads lib/inc/latest lib/inc lib/encoding
	-rmdir lib/autodie/exception lib/autodie lib/XS lib/Win32API lib/VMS
	-rmdir lib/Unicode/Collate/Locale lib/Unicode/Collate/CJK
	-rmdir lib/Unicode/Collate lib/Tie/Hash lib/Thread lib/Text
	-rmdir lib/Test/Builder/Tester lib/Test/Builder lib/Test lib/Term
	-rmdir lib/TAP/Parser/YAMLish lib/TAP/Parser/SourceHandler
	-rmdir lib/TAP/Parser/Scheduler lib/TAP/Parser/Result
	-rmdir lib/TAP/Parser/Iterator lib/TAP/Parser lib/TAP/Harness
	-rmdir lib/TAP/Formatter/File lib/TAP/Formatter/Console
	-rmdir lib/TAP/Formatter lib/TAP lib/Sys/Syslog lib/Sys lib/Search
	-rmdir lib/Scalar lib/Pod/Text lib/Pod/Simple lib/Pod/Perldoc
	-rmdir lib/PerlIO/via lib/PerlIO lib/Perl lib/Parse/CPAN lib/Parse
	-rmdir lib/Params lib/Package lib/Net/FTP lib/Module/Load
	-rmdir lib/Module/CoreList lib/Module/Build/Platform lib/Module/Build
	-rmdir lib/Module lib/Memoize lib/Math/BigInt lib/Math/BigFloat
	-rmdir lib/Math lib/MIME lib/Locale/Maketext lib/Locale/Codes
	-rmdir lib/Locale lib/List/Util lib/List lib/JSON/PP lib/JSON lib/IPC
	-rmdir lib/IO/Uncompress/Adapter lib/IO/Uncompress lib/IO/Socket
	-rmdir lib/IO/Compress/Zlib lib/IO/Compress/Zip lib/IO/Compress/Gzip
	-rmdir lib/IO/Compress/Base lib/IO/Compress/Adapter lib/IO/Compress
	-rmdir lib/IO lib/I18N/LangTags lib/I18N lib/Hash/Util lib/Hash
	-rmdir lib/HTTP lib/Filter/Util lib/Filter lib/File/Spec
	-rmdir lib/ExtUtils/Typemaps lib/ExtUtils/ParseXS
	-rmdir lib/ExtUtils/MakeMaker lib/ExtUtils/Liblist
	-rmdir lib/ExtUtils/Constant lib/ExtUtils/Command
	-rmdir lib/ExtUtils/CBuilder/Platform/Windows
	-rmdir lib/ExtUtils/CBuilder/Platform lib/ExtUtils/CBuilder
	-rmdir lib/Exporter lib/Encode/Unicode lib/Encode/MIME/Header
	-rmdir lib/Encode/MIME lib/Encode/KR lib/Encode/JP lib/Encode/CN
	-rmdir lib/Encode lib/Digest lib/Devel lib/Data lib/Config/Perl
	-rmdir lib/Compress/Raw lib/Compress lib/Carp lib/CPAN/Meta
	-rmdir lib/CPAN/LWP lib/CPAN/Kwalify lib/CPAN/HTTP lib/CPAN/FTP
	-rmdir lib/CPAN/Exception lib/CPAN/API lib/CPAN lib/CGI lib/Attribute
	-rmdir lib/Archive/Tar lib/Archive lib/App/Prove/State/Result
	-rmdir lib/App/Prove/State lib/App/Prove lib/App
a1392 1
!NO!SUBS!
d1394 2
a1395 3
for f in $SH; do
    file=`SH_to_target $f`
    $spitshell >>$Makefile <<!GROK!THIS!
d1397 4
a1400 4
$file: $f config.sh
	\$(SHELL) $f
!GROK!THIS!
done
d1402 3
a1404 1
$spitshell >>$Makefile <<'!NO!SUBS!'
d1406 2
a1407 3
.PHONY: depend
depend: makedepend
	sh ./makedepend MAKE=$(MAKE) cflags
d1411 5
a1415 1
	test_harness test_harness_notty minitest test-reonly _test
d1419 1
a1419 1
	$(RUN_TESTS) choose
a1426 1
!NO!SUBS!
a1427 2
case "$targethost" in
'') $spitshell >>$Makefile <<'!NO!SUBS!'
a1432 60
!NO!SUBS!
;;
*) $spitshell >>$Makefile <<!GROK!THIS!
test_prep test-prep: test_prep_pre \$(MINIPERL_EXE) \$(unidatafiles) \$(PERL_EXE) \
	\$(dynamic_ext) \$(TEST_PERL_DLL) runtests x2p/s2p x2p/find2perl \
	\$(generated_pods)
	$to libperl.*
	$to t/*
	$to lib/*
	$to TestInit.pm
	$to win32/FindExt.pm
	$to regen/*
	$to pod/*
	$to MANIFEST
	$to Porting/*
	$to cpan/*/t
	$to dist/*/t
	$to ext/*/t
	$to cpan/Archive-Tar/*
	$to cpan/Module-Metadata/*
	$to cpan/Term-Cap/test.pl
	$to cpan/Pod-Usage/*
	$to cpan/Pod-Parser/*
	$to cpan/IO-Compress/*
	$to cpan/HTTP-Tiny/lib/*
	$to cpan/Filter-Util-Call/filter-util.pl
	$to cpan/Digest-MD5/*
	$to cpan/Digest-SHA/*
	$to cpan/Test-Simple/*
	$to cpan/Pod-Parser/lib/*
	$to cpan/Test-Harness/*
	$to cpan/Scalar-List-Utils/*
	$to ext/IPC-Open3/*
	$to ext/Tie-Memoize/*
	$to ext/POSIX/*
	$to dist/IO/*
# --- These three are needed by ExtUtils::MM_Unix to verify PERL_CORE
	$to config_h.SH
	$to perl.h
	$to cflags
# --- For Module::Build
	$to cpan/Module-Build/lib/*
	$to *.h
# --- For t/x2p/s2p.t
	$to x2p
# --- For t/porting/customized.t
	$to vutil.c
	$to vxs.inc
# --- For t/TEST
	$to config.sh
# --- For lib/diagnostics.t with -Duseshrplib
	$to \$(PERL_EXE)
	cd t && (rm -f \$(PERL_EXE); \$(LNS) ../\$(PERL_EXE) \$(PERL_EXE)) && cd ..
	$to t/\$(PERL_EXE)

!GROK!THIS!
;;
esac

$spitshell >>$Makefile <<'!NO!SUBS!'
a1435 4
!NO!SUBS!

case "$targethost" in
'') $spitshell >>$Makefile <<'!NO!SUBS!'
a1439 12
!NO!SUBS!
;;
*) $spitshell >>$Makefile <<!GROK!THIS!

test check: test_prep
	$run -cwd $targetdir/t -env "$targetenv LD_LIBRARY_PATH=$targetdir:$targetdir/lib:$targetdir/lib/auto:\$\$LD_LIBRARY_PATH" ./TEST

!GROK!THIS!
;;
esac

$spitshell >>$Makefile <<'!NO!SUBS!'
d1446 23
d1476 3
a1478 6
test.valgrind check.valgrind:	test_prep
	@@echo "Checking usemymalloc='n' in config.sh..."
	@@grep "^usemymalloc="    config.sh
	@@grep "^usemymalloc='n'" config.sh >/dev/null || exit 1
	@@echo "And of course you have to have valgrind..."
	$(VALGRIND) $(VG_TEST) || exit 1
d1480 6
d1492 28
a1519 3
# Can't depend on lib/Config.pm because that might be where miniperl
# is crashing.
minitest: $(MINIPERL_EXE)
d1525 4
d1557 1
a1557 1
	$(RUN_PERL) utils/perlbug -ok -s '(UNINSTALLED)'
d1560 1
a1560 1
	$(RUN_PERL) utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok
d1563 1
a1563 1
	$(RUN_PERL) utils/perlbug -ok -s '(UNINSTALLED)' -A
d1566 1
a1566 1
	$(RUN_PERL) utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A
d1569 1
a1569 1
	$(RUN_PERL) utils/perlbug -nok -s '(UNINSTALLED)'
d1572 1
a1572 1
	$(RUN_PERL) utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok
d1575 1
a1575 1
	$(RUN_PERL) utils/perlbug -nok -s '(UNINSTALLED)' -A
d1578 1
a1578 1
	$(RUN_PERL) utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A
d1580 1
a1580 1
.PHONY: clist hlist
d1588 6
d1608 6
@


1.1.1.17
log
@Import perl-5.20.2
@
text
@d494 1
a494 1
perltoc_pod_prereqs = extra.pods pod/perl5202delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
d1019 3
a1021 3
pod/perl5202delta.pod: pod/perldelta.pod
	$(RMS) pod/perl5202delta.pod
	$(LNS) perldelta.pod pod/perl5202delta.pod
@


