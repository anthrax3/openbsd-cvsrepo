head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.19;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.25;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl -w
use v5.15.8;
use strict;
use warnings;
require 'regen/regen_lib.pl';
require 'regen/charset_translations.pl';

# This program outputs l1_charclass_tab.h, which defines the guts of the
# PL_charclass table.  Each line is a bit map of properties that the Unicode
# code point at the corresponding position in the table array has.  The first
# line corresponds to code point U+0000, NULL, the last line to U+00FF.  For
# an application to see if the code point "i" has a particular property, it
# just does
#    'PL_charclass[i] & BIT'
# The bit names are of the form '_CC_property_suffix', where 'CC' stands for
# character class, and 'property' is the corresponding property, and 'suffix'
# is one of '_A' to mean the property is true only if the corresponding code
# point is ASCII, and '_L1' means that the range includes any Latin1
# character (ISO-8859-1 including the C0 and C1 controls).  A property without
# these suffixes does not have different forms for both ranges.

# This program need be run only when adding new properties to it, or upon a
# new Unicode release, to make sure things haven't been changed by it.

my @@properties = qw(
    NONLATIN1_SIMPLE_FOLD
    NONLATIN1_FOLD
    ALPHANUMERIC
    ALPHA
    ASCII
    BLANK
    CASED
    CHARNAME_CONT
    CNTRL
    DIGIT
    GRAPH
    IDFIRST
    LOWER
    NON_FINAL_FOLD
    PRINT
    PUNCT
    QUOTEMETA
    SPACE
    UPPER
    WORDCHAR
    XDIGIT
    VERTSPACE
    IS_IN_SOME_FOLD
    MNEMONIC_CNTRL
);

# Read in the case fold mappings.
my %folded_closure;
my %simple_folded_closure;
my @@hex_non_final_folds;
my @@non_latin1_simple_folds;
my @@folds;
use Unicode::UCD;

BEGIN { # Have to do this at compile time because using user-defined \p{property}

    # Use the Unicode data file if we are on an ASCII platform (which its data
    # is for), and it is in the modern format (starting in Unicode 3.1.0) and
    # it is available.  This avoids being affected by potential bugs
    # introduced by other layers of Perl
    my $file="lib/unicore/CaseFolding.txt";

    if (ord('A') == 65
        && pack("C*", split /\./, Unicode::UCD::UnicodeVersion()) ge v3.1.0
        && open my $fh, "<", $file)
    {
        @@folds = <$fh>;
    }
    else {
        my ($invlist_ref, $invmap_ref, undef, $default)
                                    = Unicode::UCD::prop_invmap('Case_Folding');
        for my $i (0 .. @@$invlist_ref - 1 - 1) {
            next if $invmap_ref->[$i] == $default;
            my $adjust = -1;
            for my $j ($invlist_ref->[$i] .. $invlist_ref->[$i+1] -1) {
                $adjust++;

                # Single-code point maps go to a 'C' type
                if (! ref $invmap_ref->[$i]) {
                    push @@folds, sprintf("%04X; C; %04X\n",
                                        $j,
                                        $invmap_ref->[$i] + $adjust);
                }
                else {  # Multi-code point maps go to 'F'.  prop_invmap()
                        # guarantees that no adjustment is needed for these,
                        # as the range will contain just one element
                    push @@folds, sprintf("%04X; F; %s\n",
                                        $j,
                                        join " ", map { sprintf "%04X", $_ }
                                                        @@{$invmap_ref->[$i]});
                }
            }
        }
    }

    for (@@folds) {
        chomp;

        # Lines look like (without the initial '#'
        #0130; F; 0069 0307; # LATIN CAPITAL LETTER I WITH DOT ABOVE
        # Get rid of comments, ignore blank or comment-only lines
        my $line = $_ =~ s/ (?: \s* \# .* )? $ //rx;
        next unless length $line;
        my ($hex_from, $fold_type, @@folded) = split /[\s;]+/, $line;

        my $from = hex $hex_from;

        # Perl only deals with S, C, and F folds
        next if $fold_type ne 'C' and $fold_type ne 'F' and $fold_type ne 'S';

        # Get each code point in the range that participates in this line's fold.
        # The hash has keys of each code point in the range, and values of what it
        # folds to and what folds to it
        for my $i (0 .. @@folded - 1) {
            my $hex_fold = $folded[$i];
            my $fold = hex $hex_fold;
            if ($fold < 256) {
                push @@{$folded_closure{$fold}}, $from;
                push @@{$simple_folded_closure{$fold}}, $from if $fold_type ne 'F';
            }
            if ($from < 256) {
                push @@{$folded_closure{$from}}, $fold;
                push @@{$simple_folded_closure{$from}}, $fold if $fold_type ne 'F';
            }

            if (($fold_type eq 'C' || $fold_type eq 'S')
                && ($fold < 256 != $from < 256))
            {
                # Fold is simple (hence can't be a non-final fold, so the 'if'
                # above is mutualy exclusive from the 'if below) and crosses
                # 255/256 boundary.  We keep track of the Latin1 code points
                # in such folds.
                push @@non_latin1_simple_folds, ($fold < 256)
                                                ? $fold
                                                : $from;
            }
            elsif ($i < @@folded-1
                   && $fold < 256
                   && ! grep { $_ eq $hex_fold } @@hex_non_final_folds)
            {
                push @@hex_non_final_folds, $hex_fold;

                # Also add the upper case, which in the latin1 range folds to
                # $fold
                push @@hex_non_final_folds, sprintf "%04X", ord uc chr $fold;
            }
        }
    }

    # Now having read all the lines, combine them into the full closure of each
    # code point in the range by adding lists together that share a common
    # element
    foreach my $folded (keys %folded_closure) {
        foreach my $from (grep { $_ < 256 } @@{$folded_closure{$folded}}) {
            push @@{$folded_closure{$from}}, @@{$folded_closure{$folded}};
        }
    }
    foreach my $folded (keys %simple_folded_closure) {
        foreach my $from (grep { $_ < 256 } @@{$simple_folded_closure{$folded}}) {
            push @@{$simple_folded_closure{$from}}, @@{$simple_folded_closure{$folded}};
        }
    }

    # We have the single-character folds that cross the 255/256, like KELVIN
    # SIGN => 'k', but we need the closure, so add like 'K' to it
    foreach my $folded (@@non_latin1_simple_folds) {
        foreach my $fold (@@{$simple_folded_closure{$folded}}) {
            if ($fold < 256 && ! grep { $fold == $_ } @@non_latin1_simple_folds) {
                push @@non_latin1_simple_folds, $fold;
            }
        }
    }
}

sub Is_Non_Latin1_Fold {
    my @@return;

    foreach my $folded (keys %folded_closure) {
        push @@return, sprintf("%X", $folded), if grep { $_ > 255 }
                                                     @@{$folded_closure{$folded}};
    }
    return join("\n", @@return) . "\n";
}

sub Is_Non_Latin1_Simple_Fold { # Latin1 code points that are folded to by
                                # non-Latin1 code points as single character
                                # folds
    return join("\n", map { sprintf "%X", $_ } @@non_latin1_simple_folds) . "\n";
}

sub Is_Non_Final_Fold {
    return join("\n", @@hex_non_final_folds) . "\n";
}

my @@bits;   # Bit map for each code point

# For each character, calculate which properties it matches.
for my $ord (0..255) {
    my $char = chr($ord);
    utf8::upgrade($char);   # Important to use Unicode rules!

    # Look at all the properties we care about here.
    for my $property (@@properties) {
        my $name = $property;

        # Remove the suffix to get the actual property name.
        # Currently the suffixes are '_L1', '_A', and none.
        # If is a latin1 version, no further checking is needed.
        if (! ($name =~ s/_L1$//)) {

            # Here, isn't an _L1.  If its _A, it's automatically false for
            # non-ascii.  The only current ones (besides ASCII) without a
            # suffix are valid over the whole range.
            next if $name =~ s/_A$// && $char !~ /\p{ASCII}/;
        }
        my $re;
        if ($name eq 'PUNCT') {;

            # Sadly, this is inconsistent: \pP and \pS for the ascii range,
            # just \pP outside it.
            $re = qr/\p{Punct}|[^\P{Symbol}\P{ASCII}]/;
        } elsif ($name eq 'CHARNAME_CONT') {;
            $re = qr/\p{_Perl_Charname_Continue}/,
        } elsif ($name eq 'SPACE') {;
            $re = qr/\p{XPerlSpace}/;
        } elsif ($name eq 'IDFIRST') {
            $re = qr/[_\p{XPosixAlpha}]/;
        } elsif ($name eq 'WORDCHAR') {
            $re = qr/\p{XPosixWord}/;
        } elsif ($name eq 'LOWER') {
            $re = qr/\p{XPosixLower}/;
        } elsif ($name eq 'UPPER') {
            $re = qr/\p{XPosixUpper}/;
        } elsif ($name eq 'ALPHANUMERIC') {
            # Like \w, but no underscore
            $re = qr/\p{Alnum}/;
        } elsif ($name eq 'ALPHA') {
            $re = qr/\p{XPosixAlpha}/;
        } elsif ($name eq 'QUOTEMETA') {
            $re = qr/\p{_Perl_Quotemeta}/;
        } elsif ($name eq 'NONLATIN1_FOLD') {
            $re = qr/\p{Is_Non_Latin1_Fold}/;
        } elsif ($name eq 'NONLATIN1_SIMPLE_FOLD') {
            $re = qr/\p{Is_Non_Latin1_Simple_Fold}/;
        } elsif ($name eq 'NON_FINAL_FOLD') {
            $re = qr/\p{Is_Non_Final_Fold}/;
        } elsif ($name eq 'IS_IN_SOME_FOLD') {
            $re = qr/\p{_Perl_Any_Folds}/;
        } elsif ($name eq 'MNEMONIC_CNTRL') {
            # These are the control characters that there are mnemonics for
            $re = qr/[\a\b\e\f\n\r\t]/;
        } else {    # The remainder have the same name and values as Unicode
            $re = eval "qr/\\p{$name}/";
            use Carp;
            carp $@@ if ! defined $re;
        }
        #print STDERR __LINE__, ": $ord, $name $property, $re\n";
        if ($char =~ $re) {  # Add this property if matches
            $bits[$ord] .= '|' if $bits[$ord];
            $bits[$ord] .= "(1U<<_CC_$property)";
        }
    }
    #print __LINE__, " $ord $char $bits[$ord]\n";
}

my $out_fh = open_new('l1_char_class_tab.h', '>',
		      {style => '*', by => $0,
                      from => "property definitions"});

print $out_fh <<END;
/* For code points whose position is not the same as Unicode,  both are shown
 * in the comment*/
END

# Output the table using fairly short names for each char.
my $is_for_ascii = 1;   # get_supported_code_pages() returns the ASCII
                        # character set first
foreach my $charset (get_supported_code_pages()) {
    my @@a2n = @@{get_a2n($charset)};
    my @@out;
    my @@utf_to_i8;

    if ($is_for_ascii) {
        $is_for_ascii = 0;
    }
    else {  # EBCDIC.  Calculate mapping from UTF-EBCDIC bytes to I8
        my $i8_to_utf_ref = get_I8_2_utf($charset);
        for my $i (0..255) {
            $utf_to_i8[$i8_to_utf_ref->[$i]] = $i;
        }
    }

    print $out_fh "\n" . get_conditional_compile_line_start($charset);
    for my $ord (0..255) {
        my $name;
        my $char = chr $ord;
        if ($char =~ /\p{PosixGraph}/) {
            my $quote = $char eq "'" ? '"' : "'";
            $name = $quote . chr($ord) . $quote;
        }
        elsif ($char =~ /\p{XPosixGraph}/) {
            use charnames();
            $name = charnames::viacode($ord);
            $name =~ s/LATIN CAPITAL LETTER //
                    or $name =~ s/LATIN SMALL LETTER (.*)/\L$1/
                    or $name =~ s/ SIGN\b//
                    or $name =~ s/EXCLAMATION MARK/'!'/
                    or $name =~ s/QUESTION MARK/'?'/
                    or $name =~ s/QUOTATION MARK/QUOTE/
                    or $name =~ s/ INDICATOR//;
            $name =~ s/\bWITH\b/\L$&/;
            $name =~ s/\bONE\b/1/;
            $name =~ s/\b(TWO|HALF)\b/2/;
            $name =~ s/\bTHREE\b/3/;
            $name =~ s/\b QUARTER S? \b/4/x;
            $name =~ s/VULGAR FRACTION (.) (.)/$1\/$2/;
            $name =~ s/\bTILDE\b/'~'/i
                    or $name =~ s/\bCIRCUMFLEX\b/'^'/i
                    or $name =~ s/\bSTROKE\b/'\/'/i
                    or $name =~ s/ ABOVE\b//i;
        }
        else {
            use Unicode::UCD qw(prop_invmap);
            my ($list_ref, $map_ref, $format)
                   = prop_invmap("_Perl_Name_Alias", '_perl_core_internal_ok');
            if ($format !~ /^s/) {
                use Carp;
                carp "Unexpected format '$format' for '_Perl_Name_Alias";
                last;
            }
            my $which = Unicode::UCD::search_invlist($list_ref, $ord);
            if (! defined $which) {
                use Carp;
                carp "No name found for code pont $ord";
            }
            else {
                my $map = $map_ref->[$which];
                if (! ref $map) {
                    $name = $map;
                }
                else {
                    # Just pick the first abbreviation if more than one
                    my @@names = grep { $_ =~ /abbreviation/ } @@$map;
                    $name = $names[0];
                }
                $name =~ s/:.*//;
            }
        }

        my $index = $a2n[$ord];
        my $i8;
        $i8 = $utf_to_i8[$index] if @@utf_to_i8;

        $out[$index] = "/* ";
        $out[$index] .= sprintf "0x%02X ", $index if $ord != $index;
        $out[$index] .= sprintf "U+%02X ", $ord;
        $out[$index] .= sprintf "I8=%02X ", $i8 if defined $i8 && $i8 != $ord;
        $out[$index] .= "$name */ ";
        $out[$index] .= $bits[$ord];

        # For EBCDIC character sets, we also add some data for when the bytes
        # are in UTF-EBCDIC; these are based on the fundamental
        # characteristics of UTF-EBCDIC.
        if (@@utf_to_i8) {
            if ($i8 >= 0xC5 && $i8 != 0xE0) {
                $out[$index] .= '|(1U<<_CC_UTF8_IS_START)';
                if ($i8 <= 0xC7) {
                    $out[$index] .= '|(1U<<_CC_UTF8_IS_DOWNGRADEABLE_START)';
                }
            }
            if (($i8 & 0xE0) == 0xA0) {
                $out[$index] .= '|(1U<<_CC_UTF8_IS_CONTINUATION)';
            }
            if ($i8 >= 0xF1) {
                $out[$index] .=
                          '|(1U<<_CC_UTF8_START_BYTE_IS_FOR_AT_LEAST_SURROGATE)';
            }
        }

        $out[$index] .= ",\n";
    }
    $out[-1] =~ s/,$//;     # No trailing comma in the final entry

    print $out_fh join "", @@out;
    print $out_fh "\n" . get_conditional_compile_line_end();
}

read_only_bottom_close_and_rename($out_fh)
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
use 5.012;
d6 1
d26 7
a32 6
    ALNUMC_A
    ALNUMC_L1
    ALPHA_A
    ALPHA_L1
    BLANK_A
    BLANK_L1
d34 8
a41 23
    CNTRL_A
    CNTRL_L1
    DIGIT_A
    GRAPH_A
    GRAPH_L1
    IDFIRST_A
    IDFIRST_L1
    LOWER_A
    LOWER_L1
    OCTAL_A
    PRINT_A
    PRINT_L1
    PSXSPC_A
    PSXSPC_L1
    PUNCT_A
    PUNCT_L1
    SPACE_A
    SPACE_L1
    UPPER_A
    UPPER_L1
    WORDCHAR_A
    WORDCHAR_L1
    XDIGIT_A
d43 7
d54 123
a176 24
my $file="lib/unicore/CaseFolding.txt";
open my $fh, "<", $file or die "Failed to read '$file': $!";
while (<$fh>) {
    chomp;

    # Lines look like (without the initial '#'
    #0130; F; 0069 0307; # LATIN CAPITAL LETTER I WITH DOT ABOVE
    # Get rid of comments, ignore blank or comment-only lines
    my $line = $_ =~ s/ (?: \s* \# .* )? $ //rx;
    next unless length $line;
    my ($hex_from, $fold_type, @@folded) = split /[\s;]+/, $line;

    my $from = hex $hex_from;

    # Perl only deals with C and F folds
    next if $fold_type ne 'C' and $fold_type ne 'F';

    # Get each code point in the range that participates in this line's fold.
    # The hash has keys of each code point in the range, and values of what it
    # folds to and what folds to it
    foreach my $hex_fold (@@folded) {
        my $fold = hex $hex_fold;
        push @@{$folded_closure{$fold}}, $from if $fold < 256;
        push @@{$folded_closure{$from}}, $fold if $from < 256;
d180 6
a185 5
# Now having read all the lines, combine them into the full closure of each
# code point in the range by adding lists together that share a common element
foreach my $folded (keys %folded_closure) {
    foreach my $from (grep { $_ < 256 } @@{$folded_closure{$folded}}) {
        push @@{$folded_closure{$from}}, @@{$folded_closure{$folded}};
d187 1
d190 5
a194 1
my @@bits;   # Bit map for each code point
d196 2
a197 3
foreach my $folded (keys %folded_closure) {
    $bits[$folded] = "_CC_NONLATIN1_FOLD" if grep { $_ > 255 }
                                                @@{$folded_closure{$folded}};
d200 2
d205 1
a205 1
    utf8::upgrade($char);   # Important to use Unicode semantics!
d217 3
a219 4
            # non-ascii.  The only one current one without a suffix is valid
            # over the whole range.
            next if $name =~ s/_A$// && $ord >= 128;

d228 1
a228 1
            $re = qr/[-\w ():\xa0]/;
d230 1
a230 1
            $re = qr/\s/;
d232 1
a232 3
            $re = qr/[_\p{Alpha}]/;
        } elsif ($name eq 'PSXSPC') {
            $re = qr/[\v\p{Space}]/;
d234 6
a239 2
            $re = qr/\w/;
        } elsif ($name eq 'ALNUMC') {
d242 2
a243 2
        } elsif ($name eq 'OCTAL') {
            $re = qr/[0-7]/;
d246 11
d262 1
a262 1
        #print "$ord, $name $property, $re\n";
d265 1
a265 1
            $bits[$ord] .= "_CC_$property";
a270 73
# Names of C0 controls
my @@C0 = qw (
                NUL
                SOH
                STX
                ETX
                EOT
                ENQ
                ACK
                BEL
                BS
                HT
                LF
                VT
                FF
                CR
                SO
                SI
                DLE
                DC1
                DC2
                DC3
                DC4
                NAK
                SYN
                ETB
                CAN
                EOM
                SUB
                ESC
                FS
                GS
                RS
                US
            );

# Names of C1 controls, plus the adjacent DEL
my @@C1 = qw(
                DEL
                PAD
                HOP
                BPH
                NBH
                IND
                NEL
                SSA
                ESA
                HTS
                HTJ
                VTS
                PLD
                PLU
                RI 
                SS2
                SS3
                DCS
                PU1
                PU2
                STS
                CCH
                MW 
                SPA
                EPA
                SOS
                SGC
                SCI
                CSI
                ST 
                OSC
                PM 
                APC
            );

d273 6
a278 1
                      from => "property definitions and $file"});
d281 105
a385 13
for my $ord (0..255) {
    my $name;
    if ($ord < 32) {    # A C0 control
        $name = $C0[$ord];
    } elsif ($ord > 32 && $ord < 127) { # Graphic
        $name = "'" . chr($ord) . "'";
    } elsif ($ord >= 127 && $ord <= 0x9f) {
        $name = $C1[$ord - 127];    # A C1 control + DEL
    } else {    # SPACE, or, if Latin1, shorten the name */
        use charnames();
        $name = charnames::viacode($ord);
        $name =~ s/LATIN CAPITAL LETTER //
        || $name =~ s/LATIN SMALL LETTER (.*)/\L$1/;
d387 4
a390 1
    printf $out_fh "/* U+%02X %s */ %s,\n", $ord, $name, $bits[$ord];
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d2 1
a2 1
use v5.15.8;
d25 6
a30 6
    NONLATIN1_FOLD
    ALPHANUMERIC
    ALPHA
    ASCII
    BLANK
    CASED
d32 23
a54 9
    CNTRL
    DIGIT
    GRAPH
    IDFIRST
    LOWER
    NON_FINAL_FOLD
    PRINT
    PSXSPC
    PUNCT
a55 7
    SPACE
    UPPER
    WORDCHAR
    XDIGIT
    VERTSPACE
    IS_IN_SOME_FOLD
    BACKSLASH_FOO_LBRACE_IS_META
d60 24
a83 80
my @@hex_non_final_folds;
my @@folds;
use Unicode::UCD;

BEGIN { # Have to do this at compile time because using user-defined \p{property}

    # Use the Unicode data file if we are on an ASCII platform (which its data
    # is for), and it is in the modern format (starting in Unicode 3.1.0) and
    # it is available.  This avoids being affected by potential bugs
    # introduced by other layers of Perl
    my $file="lib/unicore/CaseFolding.txt";

    if (ord('A') == 65
        && pack("C*", split /\./, Unicode::UCD::UnicodeVersion()) ge v3.1.0
        && open my $fh, "<", $file)
    {
        @@folds = <$fh>;
    }
    else {
        my ($invlist_ref, $invmap_ref, undef, $default)
                                    = Unicode::UCD::prop_invmap('Case_Folding');
        for my $i (0 .. @@$invlist_ref - 1 - 1) {
            next if $invmap_ref->[$i] == $default;
            my $adjust = -1;
            for my $j ($invlist_ref->[$i] .. $invlist_ref->[$i+1] -1) {
                $adjust++;

                # Single-code point maps go to a 'C' type
                if (! ref $invmap_ref->[$i]) {
                    push @@folds, sprintf("%04X; C; %04X\n",
                                        $j,
                                        $invmap_ref->[$i] + $adjust);
                }
                else {  # Multi-code point maps go to 'F'.  prop_invmap()
                        # guarantees that no adjustment is needed for these,
                        # as the range will contain just one element
                    push @@folds, sprintf("%04X; F; %s\n",
                                        $j,
                                        join " ", map { sprintf "%04X", $_ }
                                                        @@{$invmap_ref->[$i]});
                }
            }
        }
    }

    for (@@folds) {
        chomp;

        # Lines look like (without the initial '#'
        #0130; F; 0069 0307; # LATIN CAPITAL LETTER I WITH DOT ABOVE
        # Get rid of comments, ignore blank or comment-only lines
        my $line = $_ =~ s/ (?: \s* \# .* )? $ //rx;
        next unless length $line;
        my ($hex_from, $fold_type, @@folded) = split /[\s;]+/, $line;

        my $from = hex $hex_from;

        # Perl only deals with C and F folds
        next if $fold_type ne 'C' and $fold_type ne 'F';

        # Get each code point in the range that participates in this line's fold.
        # The hash has keys of each code point in the range, and values of what it
        # folds to and what folds to it
        for my $i (0 .. @@folded - 1) {
            my $hex_fold = $folded[$i];
            my $fold = hex $hex_fold;
            push @@{$folded_closure{$fold}}, $from if $fold < 256;
            push @@{$folded_closure{$from}}, $fold if $from < 256;

            if ($i < @@folded-1
                && $fold < 256
                && ! grep { $_ eq $hex_fold } @@hex_non_final_folds)
            {
                push @@hex_non_final_folds, $hex_fold;

                # Also add the upper case, which in the latin1 range folds to
                # $fold
                push @@hex_non_final_folds, sprintf "%04X", ord uc chr $fold;
            }
        }
d85 1
d87 5
a91 7
    # Now having read all the lines, combine them into the full closure of each
    # code point in the range by adding lists together that share a common
    # element
    foreach my $folded (keys %folded_closure) {
        foreach my $from (grep { $_ < 256 } @@{$folded_closure{$folded}}) {
            push @@{$folded_closure{$from}}, @@{$folded_closure{$folded}};
        }
d95 1
a95 2
sub Is_Non_Latin1_Fold {
    my @@return;
d97 3
a99 5
    foreach my $folded (keys %folded_closure) {
        push @@return, sprintf("%X", $folded), if grep { $_ > 255 }
                                                     @@{$folded_closure{$folded}};
    }
    return join("\n", @@return) . "\n";
a101 6
sub Is_Non_Final_Fold {
    return join("\n", @@hex_non_final_folds) . "\n";
}

my @@bits;   # Bit map for each code point

d117 2
a118 2
            # non-ascii.  The only current ones (besides ASCII) without a
            # suffix are valid over the whole range.
d129 1
a129 1
            $re = qr/\p{_Perl_Charname_Continue}/,
d131 1
a131 1
            $re = qr/\p{XPerlSpace}/;
d137 2
a138 2
            $re = qr/\p{XPosixWord}/;
        } elsif ($name eq 'ALPHANUMERIC') {
d141 2
a144 13
        } elsif ($name eq 'NONLATIN1_FOLD') {
            $re = qr/\p{Is_Non_Latin1_Fold}/;
        } elsif ($name eq 'NON_FINAL_FOLD') {
            $re = qr/\p{Is_Non_Final_Fold}/;
        } elsif ($name eq 'IS_IN_SOME_FOLD') {
            $re = qr/\p{_Perl_Any_Folds}/;
        } elsif ($name eq 'BACKSLASH_FOO_LBRACE_IS_META') {

            # This is true for FOO where FOO is the varying character in:
            # \a{, \b{, \c{, ...
            # and the sequence has non-literal meaning to Perl; so it is true
            # for 'x' because \x{ is special, but not 'a' because \a{ isn't.
            $re = qr/[gkNopPx]/;
d153 1
a153 1
            $bits[$ord] .= "(1U<<_CC_$property)";
d234 1
a234 1
                      from => "property definitions"});
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d164 1
a164 1
    utf8::upgrade($char);   # Important to use Unicode rules!
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@a5 1
require 'regen/charset_translations.pl';
a24 1
    NONLATIN1_SIMPLE_FOLD
d39 1
d48 1
a48 1
    MNEMONIC_CNTRL
a52 1
my %simple_folded_closure;
a53 1
my @@non_latin1_simple_folds;
d110 2
a111 2
        # Perl only deals with S, C, and F folds
        next if $fold_type ne 'C' and $fold_type ne 'F' and $fold_type ne 'S';
d119 2
a120 8
            if ($fold < 256) {
                push @@{$folded_closure{$fold}}, $from;
                push @@{$simple_folded_closure{$fold}}, $from if $fold_type ne 'F';
            }
            if ($from < 256) {
                push @@{$folded_closure{$from}}, $fold;
                push @@{$simple_folded_closure{$from}}, $fold if $fold_type ne 'F';
            }
d122 3
a124 14
            if (($fold_type eq 'C' || $fold_type eq 'S')
                && ($fold < 256 != $from < 256))
            {
                # Fold is simple (hence can't be a non-final fold, so the 'if'
                # above is mutualy exclusive from the 'if below) and crosses
                # 255/256 boundary.  We keep track of the Latin1 code points
                # in such folds.
                push @@non_latin1_simple_folds, ($fold < 256)
                                                ? $fold
                                                : $from;
            }
            elsif ($i < @@folded-1
                   && $fold < 256
                   && ! grep { $_ eq $hex_fold } @@hex_non_final_folds)
a142 15
    foreach my $folded (keys %simple_folded_closure) {
        foreach my $from (grep { $_ < 256 } @@{$simple_folded_closure{$folded}}) {
            push @@{$simple_folded_closure{$from}}, @@{$simple_folded_closure{$folded}};
        }
    }

    # We have the single-character folds that cross the 255/256, like KELVIN
    # SIGN => 'k', but we need the closure, so add like 'K' to it
    foreach my $folded (@@non_latin1_simple_folds) {
        foreach my $fold (@@{$simple_folded_closure{$folded}}) {
            if ($fold < 256 && ! grep { $fold == $_ } @@non_latin1_simple_folds) {
                push @@non_latin1_simple_folds, $fold;
            }
        }
    }
a154 6
sub Is_Non_Latin1_Simple_Fold { # Latin1 code points that are folded to by
                                # non-Latin1 code points as single character
                                # folds
    return join("\n", map { sprintf "%X", $_ } @@non_latin1_simple_folds) . "\n";
}

d178 2
a179 1
            next if $name =~ s/_A$// && $char !~ /\p{ASCII}/;
d192 3
a194 1
            $re = qr/[_\p{XPosixAlpha}]/;
a196 4
        } elsif ($name eq 'LOWER') {
            $re = qr/\p{XPosixLower}/;
        } elsif ($name eq 'UPPER') {
            $re = qr/\p{XPosixUpper}/;
a199 2
        } elsif ($name eq 'ALPHA') {
            $re = qr/\p{XPosixAlpha}/;
a203 2
        } elsif ($name eq 'NONLATIN1_SIMPLE_FOLD') {
            $re = qr/\p{Is_Non_Latin1_Simple_Fold}/;
d208 7
a214 3
        } elsif ($name eq 'MNEMONIC_CNTRL') {
            # These are the control characters that there are mnemonics for
            $re = qr/[\a\b\e\f\n\r\t]/;
d220 1
a220 1
        #print STDERR __LINE__, ": $ord, $name $property, $re\n";
d229 73
a305 5
print $out_fh <<END;
/* For code points whose position is not the same as Unicode,  both are shown
 * in the comment*/
END

d307 13
a319 15
my $is_for_ascii = 1;   # get_supported_code_pages() returns the ASCII
                        # character set first
foreach my $charset (get_supported_code_pages()) {
    my @@a2n = @@{get_a2n($charset)};
    my @@out;
    my @@utf_to_i8;

    if ($is_for_ascii) {
        $is_for_ascii = 0;
    }
    else {  # EBCDIC.  Calculate mapping from UTF-EBCDIC bytes to I8
        my $i8_to_utf_ref = get_I8_2_utf($charset);
        for my $i (0..255) {
            $utf_to_i8[$i8_to_utf_ref->[$i]] = $i;
        }
d321 1
a321 94

    print $out_fh "\n" . get_conditional_compile_line_start($charset);
    for my $ord (0..255) {
        my $name;
        my $char = chr $ord;
        if ($char =~ /\p{PosixGraph}/) {
            my $quote = $char eq "'" ? '"' : "'";
            $name = $quote . chr($ord) . $quote;
        }
        elsif ($char =~ /\p{XPosixGraph}/) {
            use charnames();
            $name = charnames::viacode($ord);
            $name =~ s/LATIN CAPITAL LETTER //
                    or $name =~ s/LATIN SMALL LETTER (.*)/\L$1/
                    or $name =~ s/ SIGN\b//
                    or $name =~ s/EXCLAMATION MARK/'!'/
                    or $name =~ s/QUESTION MARK/'?'/
                    or $name =~ s/QUOTATION MARK/QUOTE/
                    or $name =~ s/ INDICATOR//;
            $name =~ s/\bWITH\b/\L$&/;
            $name =~ s/\bONE\b/1/;
            $name =~ s/\b(TWO|HALF)\b/2/;
            $name =~ s/\bTHREE\b/3/;
            $name =~ s/\b QUARTER S? \b/4/x;
            $name =~ s/VULGAR FRACTION (.) (.)/$1\/$2/;
            $name =~ s/\bTILDE\b/'~'/i
                    or $name =~ s/\bCIRCUMFLEX\b/'^'/i
                    or $name =~ s/\bSTROKE\b/'\/'/i
                    or $name =~ s/ ABOVE\b//i;
        }
        else {
            use Unicode::UCD qw(prop_invmap);
            my ($list_ref, $map_ref, $format)
                   = prop_invmap("_Perl_Name_Alias", '_perl_core_internal_ok');
            if ($format !~ /^s/) {
                use Carp;
                carp "Unexpected format '$format' for '_Perl_Name_Alias";
                last;
            }
            my $which = Unicode::UCD::search_invlist($list_ref, $ord);
            if (! defined $which) {
                use Carp;
                carp "No name found for code pont $ord";
            }
            else {
                my $map = $map_ref->[$which];
                if (! ref $map) {
                    $name = $map;
                }
                else {
                    # Just pick the first abbreviation if more than one
                    my @@names = grep { $_ =~ /abbreviation/ } @@$map;
                    $name = $names[0];
                }
                $name =~ s/:.*//;
            }
        }

        my $index = $a2n[$ord];
        my $i8;
        $i8 = $utf_to_i8[$index] if @@utf_to_i8;

        $out[$index] = "/* ";
        $out[$index] .= sprintf "0x%02X ", $index if $ord != $index;
        $out[$index] .= sprintf "U+%02X ", $ord;
        $out[$index] .= sprintf "I8=%02X ", $i8 if defined $i8 && $i8 != $ord;
        $out[$index] .= "$name */ ";
        $out[$index] .= $bits[$ord];

        # For EBCDIC character sets, we also add some data for when the bytes
        # are in UTF-EBCDIC; these are based on the fundamental
        # characteristics of UTF-EBCDIC.
        if (@@utf_to_i8) {
            if ($i8 >= 0xC5 && $i8 != 0xE0) {
                $out[$index] .= '|(1U<<_CC_UTF8_IS_START)';
                if ($i8 <= 0xC7) {
                    $out[$index] .= '|(1U<<_CC_UTF8_IS_DOWNGRADEABLE_START)';
                }
            }
            if (($i8 & 0xE0) == 0xA0) {
                $out[$index] .= '|(1U<<_CC_UTF8_IS_CONTINUATION)';
            }
            if ($i8 >= 0xF1) {
                $out[$index] .=
                          '|(1U<<_CC_UTF8_START_BYTE_IS_FOR_AT_LEAST_SURROGATE)';
            }
        }

        $out[$index] .= ",\n";
    }
    $out[-1] =~ s/,$//;     # No trailing comma in the final entry

    print $out_fh join "", @@out;
    print $out_fh "\n" . get_conditional_compile_line_end();
@


