head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.38
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.36
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.34
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.28
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.30
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.22
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.26
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.24
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.20
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.16
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.14
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2008.09.29.17.18.57;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.57;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

use strict;

die "$0: EPOCROOT unset\n" unless exists $ENV{EPOCROOT};
die "$0: EPOCROOT directory does exists\n" unless -d $ENV{EPOCROOT};

my $EPOC32 = "$ENV{EPOCROOT}epoc32";
my $EXE = "$EPOC32\\release\\thumb\\urel\\perlapp.app";
my $RSC = "$EPOC32\\data\\z\\system\\apps\\perlapp\\perlapp.rsc";

use Fcntl qw(O_RDONLY);

my %new = ($EXE => 'perlappmin.hex',
	   $RSC => 'perlrscmin.hex');

for my $fn ($EXE, $RSC) {
    if (sysopen(my $fh, $fn, O_RDONLY)) {
	my $buffer;
	my $size = -s $fn;
	my $read;
	my $newfn = $new{$fn};
	unlink($newfn);
	if (($read = sysread($fh, $buffer, $size)) == $size) {
	    if (open(my $newfh, ">$newfn")) {
		binmode($newfh);
		print $newfh unpack("H*", $buffer);
		close($newfh);
		print "Created $newfn\n";
	    } else {
		die qq[$0: open ">$newfn" failed: $!\n];
	    }
	} else {
	    die qq[$0: sysread $size returned $read\n];
	}
	close($fh);
    } else {
	die qq[$0: sysopen "$fn": $!\n];
    }
}

@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@
