head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.36
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.34
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.28
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.30
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.22
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.26
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.24
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.20
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.16
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.14
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2008.09.29.17.18.57;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.57;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@=head1 NAME

CPerlBase - a C++ base class encapsulating a Perl interpreter in Symbian

=head1 SYNOPSIS

	// in your App.mmp
	USERINCLUDE	\symbian\perl\x.y.z\include
	LIBRARY		perlXYZ.lib

	// in your App
	#include "PerlBase.h" // includes also EXTERN.h and perl.h
	CPerlBase* perl = CPerlBase::NewInterpreterLC();
	...
	delete perl;

=head1 DESCRIPTION

CPerlBase is a simple Symbian C++ class that wraps a Perl
interpreter; its creation, use, and destroying.  To understand
what this is doing, and how to use the interpreter, a fair knowledge
of L<perlapi>, L<perlguts>, and L<perlembed> is recommended.

One useful thing CPerlBase does compared with just using the raw
Perl C API is that it redirects the "std streams" (STDOUT et alia)
to a text console implementation which while being very basic
is marginally more usable than the Symbian basic text console.

=head2 The Basics

=over 4

=item *

CPerlBase* NewInterpreterL();

The constructor that does not keep the object in the Symbian "cleanup stack".
perl_alloc() and perl_construct() are called behind the curtains.

Accepts the same arguments as NewInterpreterLC().

=item *

CPerlBase* NewInterpreterLC();

The constructor that keeps the object in the Symbian "cleanup stack".
perl_alloc() and perl_construct() are called behind the curtains.

Can have three arguments:

=over 8

=item *

TBool aCloseStdlib = ETrue

Should a CPerlBase close the Symbian POSIX STDLIB when closing down.
Good for one-shot script execution, probably less good for longer term
embedded interpreter.

=item *

void (*aStdioInitFunc)(void*) = NULL

If set, called with aStdioInitCookie, and the default console is
not created.  You may want to set the iReadFunc() and iWriteFunc().

=item *

void *aStdioInitCookie = NULL

Used as the argument for aStdioInitFunc().

=back

=item *

void Destroy();

The destructor of the interpreter.  The class destructor calls
first this and then the Symbian CloseSTDLIB().

perl_destruct(), perl_free(), and PERL_SYS_TERM() are called
behind the curtains.

=back

=head2 Utility functions

=over 4

=item *

int Parse(int argc = 0, char *argv[] = 0, char *envp[] = 0);

Prepare an interpreter for executing by parsing input as if a C main()
had been called.  For example to parse a script, use argc of 2 and argv
of { "perl", script_name }.

All arguments are optional: in case either argc or argv are zero,
argc of 3 and argv of { "perl", "-e", "0" } is assumed.

PERL_SYS_INIT() and perl_parse() are called behind the curtains.

Note that a call to Parse() is required before Run().

Returns zero if parsing was successful, non-zero if not (and the stderr
will get the error).

=item *

int Run()

Start executing an interpreter.  A Parse() must have been called before
a Run(): use 3 and { "", "-e", 0 } if you do not have an argv.

Note that a call to Parse() is required before Run().

perl_run() is called behind the curtains.

Returns zero if execution was successful, non-zero if not (and the stderr
will get the error).

=item *

int ParseAndRun(int argc, char *argv[], char *envp[]);

Combined Parse() and Run().  The Run() is not run if the Parse() fails.

Returns zero if parsing and execution were successful, non-zero if not.

=item *

TInt RunScriptL(TDesC& aFileName, int argc, char **argv, char *envp[])

Like ParseAndRun() but works for Symbian filenames (UTF-16LE).
The UTF-8 version of aFileName is always argv[argc-1], and argv[0]
is always "perl".

=back

=head2 Macros

=over 4

=item *

diTHX

Set up my_perl from the current object (like dTHX).

=item *

diVAR

Set up my_vars from the current object (like dVAR).

=back

=head2 Extending CPerlBase (subclassing, deriving from)

Note that it probably isn't worth the trouble to try to wrap the
whole, rather large, Perl C API into a C++ API.  Just use the C API.

The protected members of the class are:

=over 4

=item *

PerlInterpreter* iPerl

The Perl interpreter.

=item *

struct perl_vars* iVars

The global variables of the interpreter.

=item *

TPerlState iState

The state of the Perl interpreter. TPerlState is one of EPerlNone,
EPerlAllocated, EPerlConstructed, EPerlParsed, EPerlRunning,
EPerlTerminated, EPerlPaused (these two are currently unused
but in the future they might be used to indicate that the interpreter
was stopped either non-resumably or resumably for some reason),
EPerlSuccess (perl_run() succeeded), EPerlFailure (perl_run() failed),
EPerlDestroying.

=back

=head1 COPYRIGHT

Copyright (c) 2004-2005 Nokia.  All rights reserved.

=head1 LICENSE

The CPerlBase class is licensed under the same terms as Perl itself.

=cut

@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@
