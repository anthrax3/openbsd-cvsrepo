head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.8
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.7.0.10
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.4
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.6
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.2
	OPENBSD_5_7_BASE:1.1.1.7
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.1.1.6.0.8
	OPENBSD_5_6_BASE:1.1.1.6
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.6
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.2
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.5.0.10
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.8
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.6
	OPENBSD_5_0:1.1.1.5.0.4
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.2
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.4.0.8
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.4
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.18
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.16
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.14
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.12
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.10
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.8
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.6
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.4
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.35;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.21.12.54;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.03;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.09.24.14.48.32;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.06.36;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.11.17.20.52.38;	author afresh1;	state Exp;
branches;
next	1.1.1.8;
commitid	B31cAbBIXiCqnL97;

1.1.1.8
date	2017.08.14.13.45.28;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@If you read this file _as_is_, just ignore the funny characters you
see.  It is written in the POD format (see pod/perlpod.pod) which is
specifically designed to be readable as is.

=head1 NAME

perlce - Perl for WinCE

=head1 Building Perl for WinCE

=head2 WARNING

B<< Much of this document has become very out of date and needs updating,
rewriting or deleting. The build process was overhauled during the 5.19
development track and the current instructions as of that time are given
in L</CURRENT BUILD INSTRUCTIONS>; the previous build instructions, which
are largely superseded but may still contain some useful information, are
left in L</OLD BUILD INSTRUCTIONS> but really need removing after anything
of use has been extracted from them. >>

=head2 DESCRIPTION

This file gives the instructions for building Perl5.8 and above for
WinCE.  Please read and understand the terms under which this
software is distributed.

=head2 General explanations on cross-compiling WinCE

=over

=item *

F<miniperl> is built. This is a single executable (without DLL), intended
to run on Win32, and it will facilitate remaining build process; all binaries
built after it are foreign and should not run locally.

F<miniperl> is built using F<./win32/Makefile>; this is part of normal
build process invoked as dependency from wince/Makefile.ce

=item *

After F<miniperl> is built, F<configpm> is invoked to create right F<Config.pm>
in right place and its corresponding Cross.pm.

Unlike Win32 build, miniperl will not have F<Config.pm> of host within reach;
it rather will use F<Config.pm> from within cross-compilation directories.

File F<Cross.pm> is dead simple: for given cross-architecture places in @@INC
a path where perl modules are, and right F<Config.pm> in that place.

That said, C<miniperl -Ilib -MConfig -we 1> should report an error, because
it can not find F<Config.pm>. If it does not give an error -- wrong F<Config.pm>
is substituted, and resulting binaries will be a mess.

C<miniperl -MCross -MConfig -we 1> should run okay, and it will provide right
F<Config.pm> for further compilations.

=item *

During extensions build phase, a script F<./win32/buildext.pl> is invoked,
which in turn steps in F<./ext> subdirectories and performs a build of
each extension in turn.

All invokes of F<Makefile.PL> are provided with C<-MCross> so to enable cross-
compile.

=back

=head2 CURRENT BUILD INSTRUCTIONS

(These instructions assume the host is 32-bit Windows. If you're on 64-bit
Windows then change "C:\Program Files" to "C:\Program Files (x86)" throughout.)

1. Install EVC4 from

 http://download.microsoft.com/download/c/3/f/c3f8b58b-9753-4c2e-8b96-2dfe3476a2f7/eVC4.exe

Use the key mentioned at 

 http://download.cnet.com/Microsoft-eMbedded-Visual-C/3000-2212_4-10108490.html?tag=bc

The installer is ancient and has a few bugs on the paths it uses. You 
will have to fix them later. Basically, some things go into "C:/Program 
Files/Windows CE Tools", others go into "C:/Windows CE Tools" regardless 
of the path you gave to the installer (the default will be "C:/Windows 
CE Tools"). Reboots will be required for the installer to proceed. Also 
.c and .h associations with Visual Studio might get overridden when 
installing EVC4. You have been warned.

2. Download celib from GitHub (using "Download ZIP") at

    https://github.com/bulk88/celib 

Extract it to a spaceless path but not into the perl build source.
I call this directory "celib-palm-3.0" but in the GitHub 
snapshot it will be called "celib-master". Make a copy of the 
"wince-arm-pocket-wce300-release" folder and rename the copy to 
"wince-arm-pocket-wce400". This is a hack so we can build a CE 4.0 
binary by linking in CE 3.0 ARM asm; the linker doesn't care. Windows 
Mobile/WinCE are backwards compatible with machine code like Desktop Windows.

3. Download console-1.3-src.tar.gz from 

 http://sourceforge.net/projects/perlce/files/PerlCE%20support%20files/console/

Extract it to a spaceless path but not into the perl build source. 
Don't extract it into the same directory as celib. Make a copy of the 
"wince-arm-pocket-wce300" folder and rename the copy to 
"wince-arm-pocket-wce400". This is a hack so we can build a CE 4.0 
binary by linking in CE 3.0 ARM asm; the linker doesn't care. Windows 
Mobile/WinCE are backwards compatible with machine code like Desktop Windows.

4. Open a command prompt, run your regular batch file to set the environment
for desktop Visual C building, goto the perl source directory, cd into win32/,
fill out Makefile, and do a "nmake all" to build a Desktop Perl.

5. Open win32/Makefile.ce in a text editor and do something similar to the 
following patch.

    -CELIBDLLDIR  = h:\src\wince\celib-palm-3.0
    -CECONSOLEDIR = h:\src\wince\w32console
    +CELIBDLLDIR  = C:\sources\celib-palm-3.0
    +CECONSOLEDIR = C:\sources\w32console

Also change

    !if "$(MACHINE)" == ""
    MACHINE=wince-arm-hpc-wce300
    #MACHINE=wince-arm-hpc-wce211
    #MACHINE=wince-sh3-hpc-wce211
    #MACHINE=wince-mips-hpc-wce211
    #MACHINE=wince-sh3-hpc-wce200
    #MACHINE=wince-mips-hpc-wce200
    #MACHINE=wince-arm-pocket-wce300
    #MACHINE=wince-mips-pocket-wce300
    #MACHINE=wince-sh3-pocket-wce300
    #MACHINE=wince-x86em-pocket-wce300
    #MACHINE=wince-mips-palm-wce211
    #MACHINE=wince-sh3-palm-wce211
    #MACHINE=wince-x86em-palm-wce211
    #MACHINE=wince-x86-hpc-wce300
    #MACHINE=wince-arm-pocket-wce400
    !endif

to

    !if "$(MACHINE)" == ""
    #MACHINE=wince-arm-hpc-wce300
    #MACHINE=wince-arm-hpc-wce211
    #MACHINE=wince-sh3-hpc-wce211
    #MACHINE=wince-mips-hpc-wce211
    #MACHINE=wince-sh3-hpc-wce200
    #MACHINE=wince-mips-hpc-wce200
    #MACHINE=wince-arm-pocket-wce300
    #MACHINE=wince-mips-pocket-wce300
    #MACHINE=wince-sh3-pocket-wce300
    #MACHINE=wince-x86em-pocket-wce300
    #MACHINE=wince-mips-palm-wce211
    #MACHINE=wince-sh3-palm-wce211
    #MACHINE=wince-x86em-palm-wce211
    #MACHINE=wince-x86-hpc-wce300
    MACHINE=wince-arm-pocket-wce400
    !endif

so wince-arm-pocket-wce400 is the MACHINE type.

6. Use a text editor to open "C:\Program Files\Microsoft eMbedded C++ 
4.0\EVC\WCE400\BIN\WCEARMV4.BAT". Look for

    if "%SDKROOT%"=="" set SDKROOT=...

On a new install it is "C:\Windows CE Tools". Goto 
"C:\Windows CE Tools" in a file manager and see if "C:\Windows CE 
Tools\wce400\STANDARDSDK\Include\Armv4" exists on your disk. If not
the SDKROOT need to be changed to "C:\Program Files\Windows CE Tools".

Goto celib-palm-3.0\inc\cewin32.h, search for

    typedef struct _ABC {

and uncomment the struct.

7. Open another command prompt, ensure PLATFORM is not set to anything
already unless you know what you're doing (so that the correct default
value is set by the next command), and run "C:\Program Files\Microsoft
eMbedded C++ 4.0\EVC\WCE400\BIN\WCEARMV4.BAT"

8. In the WinCE command prompt you made with WCEARMV4.BAT, goto the perl 
source directory, cd into win32/ and run "nmake -f Makefile.ce".

9. The ARM perl interpreter (perl519.dll and perl.exe) will be in something
like "C:\perl519\src\win32\wince-arm-pocket-wce400", with the XS DLLs in
"C:\perl519\src\xlib\wince-arm-hpc-wce400\auto".

To prove success on the host machine, run
"dumpbin /headers wince-arm-pocket-wce400\perl.exe" from the win32/ folder
and look for "machine (ARM)" in the FILE HEADER VALUES and
"subsystem (Windows CE GUI)" in the OPTIONAL HEADER VALUES.

=head2 OLD BUILD INSTRUCTIONS

This section describes the steps to be performed to build PerlCE.
You may find additional information about building perl for WinCE
at L<http://perlce.sourceforge.net> and some pre-built binaries.

=head3 Tools & SDK

For compiling, you need following:

=over 4

=item * Microsoft Embedded Visual Tools

=item * Microsoft Visual C++

=item * Rainer Keuchel's celib-sources

=item * Rainer Keuchel's console-sources

=back

Needed source files can be downloaded at
L<http://perlce.sourceforge.net>

=head3 Make

Normally you only need to edit F<./win32/ce-helpers/compile.bat>
to reflect your system and run it.

File F<./win32/ce-helpers/compile.bat> is actually a wrapper to call
C<nmake -f makefile.ce> with appropriate parameters and it accepts extra
parameters and forwards them to C<nmake> command as additional
arguments. You should pass target this way.

To prepare distribution you need to do following:

=over 4

=item * go to F<./win32> subdirectory

=item * edit file F<./win32/ce-helpers/compile.bat>

=item * run 
  compile.bat

=item * run 
  compile.bat dist

=back

F<Makefile.ce> has C<CROSS_NAME> macro, and it is used further to refer to
your cross-compilation scheme. You could assign a name to it, but this
is not necessary, because by default it is assigned after your machine
configuration name, such as "wince-sh3-hpc-wce211", and this is enough
to distinguish different builds at the same time. This option could be
handy for several different builds on same platform to perform, say,
threaded build. In a following example we assume that all required
environment variables are set properly for C cross-compiler (a special
*.bat file could fit perfectly to this purpose) and your F<compile.bat>
has proper "MACHINE" parameter set, to, say, C<wince-mips-pocket-wce300>.

  compile.bat
  compile.bat dist
  compile.bat CROSS_NAME=mips-wce300-thr "USE_ITHREADS=define" ^
    "USE_IMP_SYS=define" "USE_MULTI=define"
  compile.bat CROSS_NAME=mips-wce300-thr "USE_ITHREADS=define" ^
    "USE_IMP_SYS=define" "USE_MULTI=define" dist

If all goes okay and no errors during a build, you'll get two independent
distributions: C<wince-mips-pocket-wce300> and C<mips-wce300-thr>.

Target C<dist> prepares distribution file set. Target C<zipdist> performs
same as C<dist> but additionally compresses distribution files into zip
archive.

NOTE: during a build there could be created a number (or one) of F<Config.pm>
for cross-compilation ("foreign" F<Config.pm>) and those are hidden inside
F<../xlib/$(CROSS_NAME)> with other auxiliary files, but, and this is important to
note, there should be B<no> F<Config.pm> for host miniperl.
If you'll get an error that perl could not find Config.pm somewhere in building
process this means something went wrong. Most probably you forgot to
specify a cross-compilation when invoking miniperl.exe to Makefile.PL
When building an extension for cross-compilation your command line should
look like

  ..\miniperl.exe -I..\lib -MCross=mips-wce300-thr Makefile.PL

or just

  ..\miniperl.exe -I..\lib -MCross Makefile.PL

to refer a cross-compilation that was created last time.

All questions related to building for WinCE devices could be asked in
F<perlce-user@@lists.sourceforge.net> mailing list.

=head1 Using Perl on WinCE

=head2 DESCRIPTION

PerlCE is currently linked with a simple console window, so it also
works on non-hpc devices.

The simple stdio implementation creates the files F<stdin.txt>,
F<stdout.txt> and F<stderr.txt>, so you might examine them if your
console has only a limited number of cols.

When exitcode is non-zero, a message box appears, otherwise the
console closes, so you might have to catch an exit with
status 0 in your program to see any output.

stdout/stderr now go into the files F</perl-stdout.txt> and
F</perl-stderr.txt.>

PerlIDE is handy to deal with perlce.

=head2 LIMITATIONS

No fork(), pipe(), popen() etc.

=head2 ENVIRONMENT

All environment vars must be stored in HKLM\Environment as
strings. They are read at process startup.

=over

=item PERL5LIB

Usual perl lib path (semi-list).

=item PATH

Semi-list for executables.

=item TMP

- Tempdir.

=item UNIXROOTPATH

- Root for accessing some special files, i.e. F</dev/null>, F</etc/services>.

=item ROWS/COLS

- Rows/cols for console.

=item HOME

- Home directory.

=item CONSOLEFONTSIZE

- Size for console font.

=back

You can set these with cereg.exe, a (remote) registry editor
or via the PerlIDE.

=head2 REGISTRY

To start perl by clicking on a perl source file, you have
to make the according entries in HKCR (see F<ce-helpers/wince-reg.bat>).
cereg.exe (which must be executed on a desktop pc with
ActiveSync) is reported not to work on some devices.
You have to create the registry entries by hand using a 
registry editor.

=head2 XS

The following Win32-Methods are built-in:

	newXS("Win32::GetCwd", w32_GetCwd, file);
	newXS("Win32::SetCwd", w32_SetCwd, file);
	newXS("Win32::GetTickCount", w32_GetTickCount, file);
	newXS("Win32::GetOSVersion", w32_GetOSVersion, file);
	newXS("Win32::IsWinNT", w32_IsWinNT, file);
	newXS("Win32::IsWin95", w32_IsWin95, file);
	newXS("Win32::IsWinCE", w32_IsWinCE, file);
	newXS("Win32::CopyFile", w32_CopyFile, file);
	newXS("Win32::Sleep", w32_Sleep, file);
	newXS("Win32::MessageBox", w32_MessageBox, file);
	newXS("Win32::GetPowerStatus", w32_GetPowerStatus, file);
	newXS("Win32::GetOemInfo", w32_GetOemInfo, file);
	newXS("Win32::ShellEx", w32_ShellEx, file);

=head2 BUGS

Opening files for read-write is currently not supported if
they use stdio (normal perl file handles).

If you find bugs or if it does not work at all on your
device, send mail to the address below. Please report
the details of your device (processor, ceversion, 
devicetype (hpc/palm/pocket)) and the date of the downloaded
files. 

=head2 INSTALLATION

Currently installation instructions are at L<http://perlce.sourceforge.net/>.

After installation & testing processes will stabilize, information will
be more precise.

=head1 ACKNOWLEDGEMENTS

The port for Win32 was used as a reference.

=head1 History of WinCE port

=over

=item 5.6.0

Initial port of perl to WinCE. It was performed in separate directory
named F<wince>. This port was based on contents of F<./win32> directory.
F<miniperl> was not built, user must have HOST perl and properly edit
F<makefile.ce> to reflect this.

=item 5.8.0

wince port was kept in the same F<./wince> directory, and F<wince/Makefile.ce>
was used to invoke native compiler to create HOST miniperl, which then
facilitates cross-compiling process.
Extension building support was added.

=item 5.9.4

Two directories F<./win32> and F<./wince> were merged, so perlce build
process comes in F<./win32> directory.

=back

=head1 AUTHORS

=over

=item Rainer Keuchel <coyxc@@rainer-keuchel.de>

provided initial port of Perl, which appears to be most essential work, as
it was a breakthrough on having Perl ported at all.
Many thanks and obligations to Rainer!

=item Vadim Konovalov

made further support of WinCE port.

=item Daniel Dragan

updated the build process during the 5.19 development track.

=back
@


1.1
log
@Initial revision
@
text
@d1 453
a453 59
If you read this file _as_is_, just ignore the funny characters you
see.  It is written in the POD format (see pod/perlpod.pod) which is
specifically designed to be readable as is.

=head1 Name

Perl for WinCE

=head1 Description

This file gives the instructions for building Perl5.6 and above for
WinCE.  Please read and understand the terms under which this
software is distributed.

=head1 Build

This section describes the steps to be performed to build PerlCE.

=head2 Tools & SDK

For compiling, you need Microsoft Embedded Visual Tools, my
celib-sources, my console-sources and a perl for win32.

Needed source files can be downloaded via:
www.rainer-keuchel.de/wince/dirlist.html

Some portions of the makefile need a shell for win32, rm, cp, mv,
xmkdir (mkdir with a -p option).  It also uses my cecopy program for
copying files to the ce device.

=head2 Make

Miniperl is not built. A pre-existent win32 perl is used.

The paths for tools and additional libraries have to be changed in
wince/makefile.ce.

Different ce targets can be specified with the TARGET macro.

Before you start, you need to build celib.dll and w32console.
See instructions in these packages for building.

In the wince directory, type "nmake -f makefile.ce". This should
build perl.exe and perl.dll. For building extension dlls,
type "nmake -f makefile.ce dlls"

When building ext dlls, you get lots of macro redefinition
errors. Just ignore them.

For further information, look in the text files in the wince
sub-directory.

=head1 Acknowledgements

The port for Win32 was used as a reference.

=head1 Author

Rainer Keuchel (keuchel@@netwave.de)
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d11 1
a11 1
This file gives the instructions for building Perl5.8 and above for
a17 10
You may find additional and newer information about building perl
for WinCE using following URL:

  http://perlce.sourceforge.net

There should also be pre-built binaries there.

Don't be confused by large size of downloaded distribution or constructed
binaries: entire distribution could be large for WinCE ideology, but
you may strip it at your wish and use only required parts.
d21 2
a22 13
For compiling, you need following:

=over 4

=item * Microsoft Embedded Visual Tools

=item * Microsoft Visual C++

=item * Rainer Keuchel's celib-sources

=item * Rainer Keuchel's console-sources

=back
d27 4
d33 1
a33 15
Please pay attention that starting from 5.8.0 miniperl *is* built
and it facilitates in further building process. This means that
in addition to compiler installation for mobile device you also need
to have Microsoft Visual C++ installed as well.

On the bright side, you do not need to edit any files from ./win32
subdirectory. Normally you only need to edit ./wince/compile.bat
to reflect your system and run it.

File ./wince/compile.bat is actually a wrapper to call
nmake -f makefile.ce with appropriate parameters and it accepts extra
parameters and forwards them to "nmake" command as additional
arguments. You should pass target this way.

To prepare distribution you need to do following:
d35 2
a36 1
=over 4
d38 1
a38 1
=item * go to ./wince subdirectory
d40 2
a41 1
=item * edit file compile.bat
d43 3
a45 2
=item * run 
  compile.bat
d47 2
a48 2
=item * run 
  compile.bat dist
d50 2
a51 50
=back

makefile.ce has CROSS_NAME macro, and it is used further to refer to
your cross-compilation scheme. You could assign a name to it, but this
is not necessary, because by default it is assigned after your machine
configuration name, such as "wince-sh3-hpc-wce211", and this is enough
to distinguish different builds at the same time. This option could be
handy for several different builds on same platform to perform, say,
threaded build. In a following example we assume that all required
environment variables are set properly for C cross-compiler (a special
*.bat file could fit perfectly to this purpose) and your compile.bat
has proper "MACHINE" parameter set, to, say, "wince-mips-pocket-wce300".

  compile.bat
  compile.bat dist
  compile.bat CROSS_NAME=mips-wce300-thr "USE_ITHREADS=define" "USE_IMP_SYS=define" "USE_MULTI=define"
  compile.bat CROSS_NAME=mips-wce300-thr "USE_ITHREADS=define" "USE_IMP_SYS=define" "USE_MULTI=define" dist

If all goes okay and no errors during a build, you'll get two independent
distributions: "wince-mips-pocket-wce300" and "mips-wce300-thr".

Target 'dist' prepares distribution file set. Target 'zipdist' performs
same as 'dist' but additionally compresses distribution files into zip
archive.

NOTE: during a build there could be created a number (or one) of Config.pm
for cross-compilation ("foreign" Config.pm) and those are hidden inside
../xlib/$(CROSS_NAME) with other auxilary files, but, and this is important to
note, there should be *no* Config.pm for host miniperl.
If you'll get an error that perl could not find Config.pm somewhere in building
process this means something went wrong. Most probably you forgot to
specify a cross-compilation when invoking miniperl.exe to Makefile.PL
When building an extension for cross-compilation your command line should
look like

  ..\miniperl.exe -I..\lib -MCross=mips-wce300-thr Makefile.PL

or just

  ..\miniperl.exe -I..\lib -MCross Makefile.PL

to refer a cross-compilation that was created last time.


If you decided to build with fcrypt.c file, please refer to README.win32
file, as long as all legal considerations and steps to do are exactly same 
in this case.

All questions related to building for WinCE devices could be asked in
perlce-users@@lists.sourceforge.net mailing list.
d57 1
a57 1
=head1 AUTHORS
a59 2
Vadim Konovalov (vkonovalov@@spb.lucent.com)

@


1.1.1.3
log
@perl 5.8.3 from CPAN
@
text
@d5 1
a5 1
=head1 NAME
d7 1
a7 1
perlce - Perl for WinCE
d9 1
a9 1
=head1 DESCRIPTION
d15 1
a15 1
=head1 BUILD
d129 1
a129 1
=head1 ACKNOWLEDGEMENTS
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d9 1
a9 3
=head1 Building Perl for WinCE

=head2 DESCRIPTION
d15 1
a15 1
=head2 General explanations on cross-compiling WinCE
d17 3
a19 21
=over

=item *

C<miniperl> is built. This is a single executable (without DLL), intended
to run on Win32, and it will facilitate remaining build process; all binaries
built after it are foreign and should not run locally.

C<miniperl> is built using C<./win32/Makefile>; this is part of normal
build process invoked as dependency from wince/Makefile.ce

=item *

After C<miniperl> is built, C<configpm> is invoked to create right C<Config.pm>
in right place and its corresponding Cross.pm.

Unlike Win32 build, miniperl will not have C<Config.pm> of host within reach;
it rather will use C<Config.pm> from within cross-compilation directories.

File C<Cross.pm> is dead simple: for given cross-architecture places in @@INC
a path where perl modules are, and right C<Config.pm> in that place.
d21 1
a21 3
That said, C<miniperl -Ilib -MConfig -we 1> should report an error, because
it can not find C<Config.pm>. If it does not give an error -- wrong C<Config.pm>
is substituted, and resulting binaries will be a mess.
d23 1
a23 2
C<miniperl -MCross -MConfig -we 1> should run okay, and it will provide right
C<Config.pm> for further compilations.
d25 3
a27 1
=item *
d29 1
a29 16
During extensions build phase, a script C<./win32/buldext.pl> is invoked,
which in turn steps in C<./ext> subdirectories and performs a build of
each extension in turn.

All invokes of C<Makefile.PL> are provided with C<-MCross> so to enable cross-
compile.

=back

=head2 BUILD

This section describes the steps to be performed to build PerlCE.
You may find additional information about building perl for WinCE
at L<http://perlce.sourceforge.net> and some pre-built binaries.

=head3 Tools & SDK
d45 4
a48 2
Needed source files can be downloaded at
L<http://www.rainer-keuchel.de/wince/dirlist.html>
d50 4
a53 1
=head3 Make
d55 2
a56 1
Normally you only need to edit C<./win32/ce-helpers/compile.bat>
d59 3
a61 3
File C<./win32/ce-helpers/compile.bat> is actually a wrapper to call
C<nmake -f makefile.ce> with appropriate parameters and it accepts extra
parameters and forwards them to C<nmake> command as additional
d68 1
a68 1
=item * go to C<./win32> subdirectory
d70 1
a70 1
=item * edit file C<./win32/ce-helpers/compile.bat>
d80 1
a80 1
C<Makefile.ce> has C<CROSS_NAME> macro, and it is used further to refer to
d88 2
a89 2
*.bat file could fit perfectly to this purpose) and your C<compile.bat>
has proper "MACHINE" parameter set, to, say, C<wince-mips-pocket-wce300>.
d97 1
a97 1
distributions: C<wince-mips-pocket-wce300> and C<mips-wce300-thr>.
d99 2
a100 2
Target C<dist> prepares distribution file set. Target C<zipdist> performs
same as C<dist> but additionally compresses distribution files into zip
d103 4
a106 4
NOTE: during a build there could be created a number (or one) of C<Config.pm>
for cross-compilation ("foreign" C<Config.pm>) and those are hidden inside
C<../xlib/$(CROSS_NAME)> with other auxilary files, but, and this is important to
note, there should be B<no> C<Config.pm> for host miniperl.
a120 2
All questions related to building for WinCE devices could be asked in
F<perlce-user@@lists.sourceforge.net> mailing list.
d122 3
a124 1
=head1 Using Perl on WinCE
d126 2
a127 106
=head2 DESCRIPTION

PerlCE is currently linked with a simple console window, so it also
works on non-hpc devices.

The simple stdio implementation creates the files C<stdin.txt>,
C<stdout.txt> and C<stderr.txt>, so you might examine them if your
console has only a liminted number of cols.

When exitcode is non-zero, a message box appears, otherwise the
console closes, so you might have to catch an exit with
status 0 in your program to see any output.

stdout/stderr now go into the files C</perl-stdout.txt> and
C</perl-stderr.txt.>

PerlIDE is handy to deal with perlce.

=head2 LIMITATIONS

No fork(), pipe(), popen() etc.

=head2 ENVIRONMENT

All environment vars must be stored in HKLM\Environment as
strings. They are read at process startup.

=over

=item PERL5LIB

Usual perl lib path (semi-list).

=item PATH

Semi-list for executables.

=item TMP

- Tempdir.

=item UNIXROOTPATH

- Root for accessing some special files, i.e. C</dev/null>, C</etc/services>.

=item ROWS/COLS

- Rows/cols for console.

=item HOME

- Home directory.

=item CONSOLEFONTSIZE

- Size for console font.

=back

You can set these with cereg.exe, a (remote) registry editor
or via the PerlIDE.

=head2 REGISTRY

To start perl by clicking on a perl source file, you have
to make the according entries in HKCR (see C<ce-helpers/wince-reg.bat>).
cereg.exe (which must be executed on a desktop pc with
ActiveSync) is reported not to work on some devices.
You have to create the registry entries by hand using a 
registry editor.

=head2 XS

The following Win32-Methods are built-in:

	newXS("Win32::GetCwd", w32_GetCwd, file);
	newXS("Win32::SetCwd", w32_SetCwd, file);
	newXS("Win32::GetTickCount", w32_GetTickCount, file);
	newXS("Win32::GetOSVersion", w32_GetOSVersion, file);
	newXS("Win32::IsWinNT", w32_IsWinNT, file);
	newXS("Win32::IsWin95", w32_IsWin95, file);
	newXS("Win32::IsWinCE", w32_IsWinCE, file);
	newXS("Win32::CopyFile", w32_CopyFile, file);
	newXS("Win32::Sleep", w32_Sleep, file);
	newXS("Win32::MessageBox", w32_MessageBox, file);
	newXS("Win32::GetPowerStatus", w32_GetPowerStatus, file);
	newXS("Win32::GetOemInfo", w32_GetOemInfo, file);
	newXS("Win32::ShellEx", w32_ShellEx, file);

=head2 BUGS

Opening files for read-write is currently not supported if
they use stdio (normal perl file handles).

If you find bugs or if it does not work at all on your
device, send mail to the address below. Please report
the details of your device (processor, ceversion, 
devicetype (hpc/palm/pocket)) and the date of the downloaded
files. 

=head2 INSTALLATION

Currently installation instructions are at L<http://perlce.sourceforge.net/>.

After installation & testing processes will stabilize, information will
be more precise.
a132 25
=head1 History of WinCE port

=over

=item 5.6.0

Initial port of perl to WinCE. It was performed in separate directory
named C<wince>. This port was based on contents of C<./win32> directory.
C<miniperl> was not built, user must have HOST perl and properly edit 
C<makefile.ce> to reflect this.

=item 5.8.0

wince port was kept in the same C<./wince> directory, and C<wince/Makefile.ce>
was used to invoke native compiler to create HOST miniperl, which then
facilitates cross-compiling process.
Extension building support was added.

=item 5.9.4

Two directories C<./win32> and C<./wince> were merged, so perlce build
process comes in C<./win32> directory.

=back

d135 2
a136 3
=over

=item Rainer Keuchel <coyxc@@rainer-keuchel.de>
a137 9
provided initial port of Perl, which appears to be most essential work, as
it was a breakthrough on having Perl ported at all.
Many thanks and obligations to Rainer!

=item Vadim Konovalov

made further support of WinCE port.

=back
@


1.1.1.5
log
@Perl 5.12.2 from CPAN
@
text
@d1 306
a306 306
If you read this file _as_is_, just ignore the funny characters you
see.  It is written in the POD format (see pod/perlpod.pod) which is
specifically designed to be readable as is.

=head1 NAME

perlce - Perl for WinCE

=head1 Building Perl for WinCE

=head2 DESCRIPTION

This file gives the instructions for building Perl5.8 and above for
WinCE.  Please read and understand the terms under which this
software is distributed.

=head2 General explanations on cross-compiling WinCE

=over

=item *

C<miniperl> is built. This is a single executable (without DLL), intended
to run on Win32, and it will facilitate remaining build process; all binaries
built after it are foreign and should not run locally.

C<miniperl> is built using C<./win32/Makefile>; this is part of normal
build process invoked as dependency from wince/Makefile.ce

=item *

After C<miniperl> is built, C<configpm> is invoked to create right C<Config.pm>
in right place and its corresponding Cross.pm.

Unlike Win32 build, miniperl will not have C<Config.pm> of host within reach;
it rather will use C<Config.pm> from within cross-compilation directories.

File C<Cross.pm> is dead simple: for given cross-architecture places in @@INC
a path where perl modules are, and right C<Config.pm> in that place.

That said, C<miniperl -Ilib -MConfig -we 1> should report an error, because
it can not find C<Config.pm>. If it does not give an error -- wrong C<Config.pm>
is substituted, and resulting binaries will be a mess.

C<miniperl -MCross -MConfig -we 1> should run okay, and it will provide right
C<Config.pm> for further compilations.

=item *

During extensions build phase, a script C<./win32/buldext.pl> is invoked,
which in turn steps in C<./ext> subdirectories and performs a build of
each extension in turn.

All invokes of C<Makefile.PL> are provided with C<-MCross> so to enable cross-
compile.

=back

=head2 BUILD

This section describes the steps to be performed to build PerlCE.
You may find additional information about building perl for WinCE
at L<http://perlce.sourceforge.net> and some pre-built binaries.

=head3 Tools & SDK

For compiling, you need following:

=over 4

=item * Microsoft Embedded Visual Tools

=item * Microsoft Visual C++

=item * Rainer Keuchel's celib-sources

=item * Rainer Keuchel's console-sources

=back

Needed source files can be downloaded at
L<http://www.rainer-keuchel.de/wince/dirlist.html>

=head3 Make

Normally you only need to edit C<./win32/ce-helpers/compile.bat>
to reflect your system and run it.

File C<./win32/ce-helpers/compile.bat> is actually a wrapper to call
C<nmake -f makefile.ce> with appropriate parameters and it accepts extra
parameters and forwards them to C<nmake> command as additional
arguments. You should pass target this way.

To prepare distribution you need to do following:

=over 4

=item * go to C<./win32> subdirectory

=item * edit file C<./win32/ce-helpers/compile.bat>

=item * run 
  compile.bat

=item * run 
  compile.bat dist

=back

C<Makefile.ce> has C<CROSS_NAME> macro, and it is used further to refer to
your cross-compilation scheme. You could assign a name to it, but this
is not necessary, because by default it is assigned after your machine
configuration name, such as "wince-sh3-hpc-wce211", and this is enough
to distinguish different builds at the same time. This option could be
handy for several different builds on same platform to perform, say,
threaded build. In a following example we assume that all required
environment variables are set properly for C cross-compiler (a special
*.bat file could fit perfectly to this purpose) and your C<compile.bat>
has proper "MACHINE" parameter set, to, say, C<wince-mips-pocket-wce300>.

  compile.bat
  compile.bat dist
  compile.bat CROSS_NAME=mips-wce300-thr "USE_ITHREADS=define" "USE_IMP_SYS=define" "USE_MULTI=define"
  compile.bat CROSS_NAME=mips-wce300-thr "USE_ITHREADS=define" "USE_IMP_SYS=define" "USE_MULTI=define" dist

If all goes okay and no errors during a build, you'll get two independent
distributions: C<wince-mips-pocket-wce300> and C<mips-wce300-thr>.

Target C<dist> prepares distribution file set. Target C<zipdist> performs
same as C<dist> but additionally compresses distribution files into zip
archive.

NOTE: during a build there could be created a number (or one) of C<Config.pm>
for cross-compilation ("foreign" C<Config.pm>) and those are hidden inside
C<../xlib/$(CROSS_NAME)> with other auxilary files, but, and this is important to
note, there should be B<no> C<Config.pm> for host miniperl.
If you'll get an error that perl could not find Config.pm somewhere in building
process this means something went wrong. Most probably you forgot to
specify a cross-compilation when invoking miniperl.exe to Makefile.PL
When building an extension for cross-compilation your command line should
look like

  ..\miniperl.exe -I..\lib -MCross=mips-wce300-thr Makefile.PL

or just

  ..\miniperl.exe -I..\lib -MCross Makefile.PL

to refer a cross-compilation that was created last time.

All questions related to building for WinCE devices could be asked in
F<perlce-user@@lists.sourceforge.net> mailing list.

=head1 Using Perl on WinCE

=head2 DESCRIPTION

PerlCE is currently linked with a simple console window, so it also
works on non-hpc devices.

The simple stdio implementation creates the files C<stdin.txt>,
C<stdout.txt> and C<stderr.txt>, so you might examine them if your
console has only a liminted number of cols.

When exitcode is non-zero, a message box appears, otherwise the
console closes, so you might have to catch an exit with
status 0 in your program to see any output.

stdout/stderr now go into the files C</perl-stdout.txt> and
C</perl-stderr.txt.>

PerlIDE is handy to deal with perlce.

=head2 LIMITATIONS

No fork(), pipe(), popen() etc.

=head2 ENVIRONMENT

All environment vars must be stored in HKLM\Environment as
strings. They are read at process startup.

=over

=item PERL5LIB

Usual perl lib path (semi-list).

=item PATH

Semi-list for executables.

=item TMP

- Tempdir.

=item UNIXROOTPATH

- Root for accessing some special files, i.e. C</dev/null>, C</etc/services>.

=item ROWS/COLS

- Rows/cols for console.

=item HOME

- Home directory.

=item CONSOLEFONTSIZE

- Size for console font.

=back

You can set these with cereg.exe, a (remote) registry editor
or via the PerlIDE.

=head2 REGISTRY

To start perl by clicking on a perl source file, you have
to make the according entries in HKCR (see C<ce-helpers/wince-reg.bat>).
cereg.exe (which must be executed on a desktop pc with
ActiveSync) is reported not to work on some devices.
You have to create the registry entries by hand using a 
registry editor.

=head2 XS

The following Win32-Methods are built-in:

	newXS("Win32::GetCwd", w32_GetCwd, file);
	newXS("Win32::SetCwd", w32_SetCwd, file);
	newXS("Win32::GetTickCount", w32_GetTickCount, file);
	newXS("Win32::GetOSVersion", w32_GetOSVersion, file);
	newXS("Win32::IsWinNT", w32_IsWinNT, file);
	newXS("Win32::IsWin95", w32_IsWin95, file);
	newXS("Win32::IsWinCE", w32_IsWinCE, file);
	newXS("Win32::CopyFile", w32_CopyFile, file);
	newXS("Win32::Sleep", w32_Sleep, file);
	newXS("Win32::MessageBox", w32_MessageBox, file);
	newXS("Win32::GetPowerStatus", w32_GetPowerStatus, file);
	newXS("Win32::GetOemInfo", w32_GetOemInfo, file);
	newXS("Win32::ShellEx", w32_ShellEx, file);

=head2 BUGS

Opening files for read-write is currently not supported if
they use stdio (normal perl file handles).

If you find bugs or if it does not work at all on your
device, send mail to the address below. Please report
the details of your device (processor, ceversion, 
devicetype (hpc/palm/pocket)) and the date of the downloaded
files. 

=head2 INSTALLATION

Currently installation instructions are at L<http://perlce.sourceforge.net/>.

After installation & testing processes will stabilize, information will
be more precise.

=head1 ACKNOWLEDGEMENTS

The port for Win32 was used as a reference.

=head1 History of WinCE port

=over

=item 5.6.0

Initial port of perl to WinCE. It was performed in separate directory
named C<wince>. This port was based on contents of C<./win32> directory.
C<miniperl> was not built, user must have HOST perl and properly edit 
C<makefile.ce> to reflect this.

=item 5.8.0

wince port was kept in the same C<./wince> directory, and C<wince/Makefile.ce>
was used to invoke native compiler to create HOST miniperl, which then
facilitates cross-compiling process.
Extension building support was added.

=item 5.9.4

Two directories C<./win32> and C<./wince> were merged, so perlce build
process comes in C<./win32> directory.

=back

=head1 AUTHORS

=over

=item Rainer Keuchel <coyxc@@rainer-keuchel.de>

provided initial port of Perl, which appears to be most essential work, as
it was a breakthrough on having Perl ported at all.
Many thanks and obligations to Rainer!

=item Vadim Konovalov

made further support of WinCE port.

=back
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d23 1
a23 1
F<miniperl> is built. This is a single executable (without DLL), intended
d27 1
a27 1
F<miniperl> is built using F<./win32/Makefile>; this is part of normal
d32 1
a32 1
After F<miniperl> is built, F<configpm> is invoked to create right F<Config.pm>
d35 2
a36 2
Unlike Win32 build, miniperl will not have F<Config.pm> of host within reach;
it rather will use F<Config.pm> from within cross-compilation directories.
d38 2
a39 2
File F<Cross.pm> is dead simple: for given cross-architecture places in @@INC
a path where perl modules are, and right F<Config.pm> in that place.
d42 1
a42 1
it can not find F<Config.pm>. If it does not give an error -- wrong F<Config.pm>
d46 1
a46 1
F<Config.pm> for further compilations.
d50 2
a51 2
During extensions build phase, a script F<./win32/buldext.pl> is invoked,
which in turn steps in F<./ext> subdirectories and performs a build of
d54 1
a54 1
All invokes of F<Makefile.PL> are provided with C<-MCross> so to enable cross-
d82 1
a82 1
L<http://perlce.sourceforge.net>
d86 1
a86 1
Normally you only need to edit F<./win32/ce-helpers/compile.bat>
d89 1
a89 1
File F<./win32/ce-helpers/compile.bat> is actually a wrapper to call
d98 1
a98 1
=item * go to F<./win32> subdirectory
d100 1
a100 1
=item * edit file F<./win32/ce-helpers/compile.bat>
d110 1
a110 1
F<Makefile.ce> has C<CROSS_NAME> macro, and it is used further to refer to
d118 1
a118 1
*.bat file could fit perfectly to this purpose) and your F<compile.bat>
d133 4
a136 4
NOTE: during a build there could be created a number (or one) of F<Config.pm>
for cross-compilation ("foreign" F<Config.pm>) and those are hidden inside
F<../xlib/$(CROSS_NAME)> with other auxiliary files, but, and this is important to
note, there should be B<no> F<Config.pm> for host miniperl.
d161 3
a163 3
The simple stdio implementation creates the files F<stdin.txt>,
F<stdout.txt> and F<stderr.txt>, so you might examine them if your
console has only a limited number of cols.
d169 2
a170 2
stdout/stderr now go into the files F</perl-stdout.txt> and
F</perl-stderr.txt.>
d199 1
a199 1
- Root for accessing some special files, i.e. F</dev/null>, F</etc/services>.
d221 1
a221 1
to make the according entries in HKCR (see F<ce-helpers/wince-reg.bat>).
d274 3
a276 3
named F<wince>. This port was based on contents of F<./win32> directory.
F<miniperl> was not built, user must have HOST perl and properly edit
F<makefile.ce> to reflect this.
d280 1
a280 1
wince port was kept in the same F<./wince> directory, and F<wince/Makefile.ce>
d287 2
a288 2
Two directories F<./win32> and F<./wince> were merged, so perlce build
process comes in F<./win32> directory.
@


1.1.1.7
log
@Import perl-5.20.1
@
text
@a10 10
=head2 WARNING

B<< Much of this document has become very out of date and needs updating,
rewriting or deleting. The build process was overhauled during the 5.19
development track and the current instructions as of that time are given
in L</CURRENT BUILD INSTRUCTIONS>; the previous build instructions, which
are largely superseded but may still contain some useful information, are
left in L</OLD BUILD INSTRUCTIONS> but really need removing after anything
of use has been extracted from them. >>

d59 1
a59 132
=head2 CURRENT BUILD INSTRUCTIONS

(These instructions assume the host is 32-bit Windows. If you're on 64-bit
Windows then change "C:\Program Files" to "C:\Program Files (x86)" throughout.)

1. Install EVC4 from

    http://download.microsoft.com/download/c/3/f/c3f8b58b-9753-4c2e-8b96-2dfe3476a2f7/eVC4.exe 

Use the key mentioned at 

    http://download.cnet.com/Microsoft-eMbedded-Visual-C/3000-2212_4-10108490.html?tag=bc 

The installer is ancient and has a few bugs on the paths it uses. You 
will have to fix them later. Basically, some things go into "C:/Program 
Files/Windows CE Tools", others go into "C:/Windows CE Tools" regardless 
of the path you gave to the installer (the default will be "C:/Windows 
CE Tools"). Reboots will be required for the installer to proceed. Also 
.c and .h associations with Visual Studio might get overridden when 
installing EVC4. You have been warned.

2. Download celib from GitHub (using "Download ZIP") at

    https://github.com/bulk88/celib 

Extract it to a spaceless path but not into the perl build source.
I call this directory "celib-palm-3.0" but in the GitHub 
snapshot it will be called "celib-master". Make a copy of the 
"wince-arm-pocket-wce300-release" folder and rename the copy to 
"wince-arm-pocket-wce400". This is a hack so we can build a CE 4.0 
binary by linking in CE 3.0 ARM asm; the linker doesn't care. Windows 
Mobile/WinCE are backwards compatible with machine code like Desktop Windows.

3. Download console-1.3-src.tar.gz from 

    http://sourceforge.net/projects/perlce/files/PerlCE%20support%20files/console/ 

Extract it to a spaceless path but not into the perl build source. 
Don't extract it into the same directory as celib. Make a copy of the 
"wince-arm-pocket-wce300" folder and rename the copy to 
"wince-arm-pocket-wce400". This is a hack so we can build a CE 4.0 
binary by linking in CE 3.0 ARM asm; the linker doesn't care. Windows 
Mobile/WinCE are backwards compatible with machine code like Desktop Windows.

4. Open a command prompt, run your regular batch file to set the environment
for desktop Visual C building, goto the perl source directory, cd into win32/,
fill out Makefile, and do a "nmake all" to build a Desktop Perl.

5. Open win32/Makefile.ce in a text editor and do something similar to the 
following patch.

    -CELIBDLLDIR  = h:\src\wince\celib-palm-3.0
    -CECONSOLEDIR = h:\src\wince\w32console
    +CELIBDLLDIR  = C:\sources\celib-palm-3.0
    +CECONSOLEDIR = C:\sources\w32console

Also change

    !if "$(MACHINE)" == ""
    MACHINE=wince-arm-hpc-wce300
    #MACHINE=wince-arm-hpc-wce211
    #MACHINE=wince-sh3-hpc-wce211
    #MACHINE=wince-mips-hpc-wce211
    #MACHINE=wince-sh3-hpc-wce200
    #MACHINE=wince-mips-hpc-wce200
    #MACHINE=wince-arm-pocket-wce300
    #MACHINE=wince-mips-pocket-wce300
    #MACHINE=wince-sh3-pocket-wce300
    #MACHINE=wince-x86em-pocket-wce300
    #MACHINE=wince-mips-palm-wce211
    #MACHINE=wince-sh3-palm-wce211
    #MACHINE=wince-x86em-palm-wce211
    #MACHINE=wince-x86-hpc-wce300
    #MACHINE=wince-arm-pocket-wce400
    !endif

to

    !if "$(MACHINE)" == ""
    #MACHINE=wince-arm-hpc-wce300
    #MACHINE=wince-arm-hpc-wce211
    #MACHINE=wince-sh3-hpc-wce211
    #MACHINE=wince-mips-hpc-wce211
    #MACHINE=wince-sh3-hpc-wce200
    #MACHINE=wince-mips-hpc-wce200
    #MACHINE=wince-arm-pocket-wce300
    #MACHINE=wince-mips-pocket-wce300
    #MACHINE=wince-sh3-pocket-wce300
    #MACHINE=wince-x86em-pocket-wce300
    #MACHINE=wince-mips-palm-wce211
    #MACHINE=wince-sh3-palm-wce211
    #MACHINE=wince-x86em-palm-wce211
    #MACHINE=wince-x86-hpc-wce300
    MACHINE=wince-arm-pocket-wce400
    !endif

so wince-arm-pocket-wce400 is the MACHINE type.

6. Use a text editor to open "C:\Program Files\Microsoft eMbedded C++ 
4.0\EVC\WCE400\BIN\WCEARMV4.BAT". Look for

    if "%SDKROOT%"=="" set SDKROOT=...

On a new install it is "C:\Windows CE Tools". Goto 
"C:\Windows CE Tools" in a file manager and see if "C:\Windows CE 
Tools\wce400\STANDARDSDK\Include\Armv4" exists on your disk. If not
the SDKROOT need to be changed to "C:\Program Files\Windows CE Tools".

Goto celib-palm-3.0\inc\cewin32.h, search for

    typedef struct _ABC {

and uncomment the struct.

7. Open another command prompt, ensure PLATFORM is not set to anything
already unless you know what you're doing (so that the correct default
value is set by the next command), and run "C:\Program Files\Microsoft
eMbedded C++ 4.0\EVC\WCE400\BIN\WCEARMV4.BAT"

8. In the WinCE command prompt you made with WCEARMV4.BAT, goto the perl 
source directory, cd into win32/ and run "nmake -f Makefile.ce".

9. The ARM perl interpreter (perl519.dll and perl.exe) will be in something
like "C:\perl519\src\win32\wince-arm-pocket-wce400", with the XS DLLs in
"C:\perl519\src\xlib\wince-arm-hpc-wce400\auto".

To prove success on the host machine, run
"dumpbin /headers wince-arm-pocket-wce400\perl.exe" from the win32/ folder
and look for "machine (ARM)" in the FILE HEADER VALUES and
"subsystem (Windows CE GUI)" in the OPTIONAL HEADER VALUES.

=head2 OLD BUILD INSTRUCTIONS
d123 2
a124 4
  compile.bat CROSS_NAME=mips-wce300-thr "USE_ITHREADS=define" ^
    "USE_IMP_SYS=define" "USE_MULTI=define"
  compile.bat CROSS_NAME=mips-wce300-thr "USE_ITHREADS=define" ^
    "USE_IMP_SYS=define" "USE_MULTI=define" dist
a304 4

=item Daniel Dragan

updated the build process during the 5.19 development track.
@


1.1.1.8
log
@Import perl-5.24.2
@
text
@d60 1
a60 1
During extensions build phase, a script F<./win32/buildext.pl> is invoked,
d76 1
a76 1
 http://download.microsoft.com/download/c/3/f/c3f8b58b-9753-4c2e-8b96-2dfe3476a2f7/eVC4.exe
d80 1
a80 1
 http://download.cnet.com/Microsoft-eMbedded-Visual-C/3000-2212_4-10108490.html?tag=bc
d104 1
a104 1
 http://sourceforge.net/projects/perlce/files/PerlCE%20support%20files/console/
@


