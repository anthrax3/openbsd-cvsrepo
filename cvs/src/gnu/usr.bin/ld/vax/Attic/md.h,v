head	1.10;
access;
symbols
	OPENBSD_5_3:1.9.0.44
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.42
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.40
	OPENBSD_5_0:1.9.0.38
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.36
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.34
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.30
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.32
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.28
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.26
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.24
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.22
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.20
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.18
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.16
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.14
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.12
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.10
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.8
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.10
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.8
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2013.07.05.21.31.47;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2002.07.17.20.33.29;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.15.21.05.57;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.30.03.53.35;	author bjc;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.01.21.01.43;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	98.05.16.07.44.26;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.05.14.13.51.50;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.05.11.20.27.19;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.09.30.22.29.32;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.07.27.10.40.01;	author maja;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/*	$OpenBSD: md.h,v 1.9 2002/07/17 20:33:29 marc Exp $	*/
/*	$NetBSD: md.h,v 1.1 1995/10/19 13:10:20 ragge Exp $	*/
/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */


#if defined(CROSS_LINKER) 
#include <sys/endian.h>
#if BYTE_ORDER != LITTLE_ENDIAN
#define NEED_SWAP
#endif

#endif

/* Remove definitions from the host exec.h */
#include <machine/exec.h>

#define	MAX_ALIGNMENT		4	/* (sizeof (long)) */

#if defined(__NetBSD__) || defined(__OpenBSD__)
#define PAGSIZ			__LDPGSZ
#else
#define PAGSIZ			1024
#endif

#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(CROSS_LINKER)

#define N_SET_FLAG(ex,f)	(oldmagic || N_GETMAGIC(ex)==QMAGIC ? (0) : \
					N_SETMAGIC(ex,			\
						   N_GETMAGIC(ex),	\
						   MID_VAX,		\
						   N_GETFLAG(ex)|(f)))

#define N_IS_DYNAMIC(ex)	((N_GETFLAG(ex) & EX_DYNAMIC))

#define N_BADMID(ex) \
	(N_GETMID(ex) != 0 && N_GETMID(ex) != MID_VAX)

#endif

/*
 * FreeBSD does it differently
 */
#ifdef FreeBSD
#define N_SET_FLAG(ex,f)	(oldmagic ? (0) :			\
				  (netzmagic == 0 ?			\
					N_SETMAGIC(ex,			\
						   N_GETMAGIC(ex),	\
						   MID_VAX,		\
						   N_GETFLAG(ex)|(f)) :	\
					N_SETMAGIC_NET(ex,		\
						   N_GETMAGIC_NET(ex),	\
						   MID_VAX,		\
						   N_GETFLAG_NET(ex)|(f)) ))

#define N_IS_DYNAMIC(ex)	((N_GETMAGIC_NET(ex) == ZMAGIC) ?	\
				((N_GETFLAG_NET(ex) & EX_DYNAMIC)) :	\
				((N_GETFLAG(ex) & EX_DYNAMIC) ))
#define N_BADMID(ex) 0
#endif

/*
 * Should be handled by a.out.h ?
 */
#define N_ADJUST(ex)		(((ex).a_entry < PAGSIZ) ? -PAGSIZ : 0)
#define TEXT_START(ex)		(N_TXTADDR(ex) + N_ADJUST(ex))
#define DATA_START(ex)		(N_DATADDR(ex) + N_ADJUST(ex))

#define RELOC_STATICS_THROUGH_GOT_P(r)	(0)
#define JMPSLOT_NEEDS_RELOC		(0)

#define md_got_reloc(r)			(0)

#define md_get_rt_segment_addend(r,a)	md_get_addend(r,a)

/* Width of a Global Offset Table entry */
#define GOT_ENTRY_SIZE	4
typedef long	got_t;

typedef struct jmpslot {
	u_short	opcode;
	u_short	addr[2];
	u_short	reloc_index;
#define JMPSLOT_RELOC_MASK		0xffff
} jmpslot_t;

/*
 * following defines are untested since VAX doesn't support PIC (yet?)
 */
#define JMPABS	0x8F17		/* JMP + immediate mode for address */
#define JMPREL	0x8F11		/* BRB + immediate mode for displacement */
#define TRAP	0x00BC		/* how to trap ??? CHMK ??? */

/*
 * Byte swap defs for cross linking
 */

#if !defined(NEED_SWAP)

#define md_swapin_exec_hdr(h)
#define md_swapout_exec_hdr(h)
#define md_swapin_symbols(s,n)
#define md_swapout_symbols(s,n)
#define md_swapin_zsymbols(s,n)
#define md_swapout_zsymbols(s,n)
#define md_swapin_reloc(r,n)
#define md_swapout_reloc(r,n)
#define md_swapin__dynamic(l)
#define md_swapout__dynamic(l)
#define md_swapin_section_dispatch_table(l)
#define md_swapout_section_dispatch_table(l)
#define md_swapin_so_debug(d)
#define md_swapout_so_debug(d)
#define md_swapin_rrs_hash(f,n)
#define md_swapout_rrs_hash(f,n)
#define md_swapin_sod(l,n)
#define md_swapout_sod(l,n)
#define md_swapout_jmpslot(j,n)
#define md_swapout_got(g,n)
#define md_swapin_ranlib_hdr(h,n)
#define md_swapout_ranlib_hdr(h,n)

#endif /* NEED_SWAP */

#ifdef CROSS_LINKER

#define get_byte(p)	( ((unsigned char *)(p))[0] )

#define get_short(p)	( ( ((unsigned char *)(p))[0]	  ) | \
			  ( ((unsigned char *)(p))[1] << 8)   \
			)

#define get_long(p)	( ( ((unsigned char *)(p))[0]	   ) | \
			  ( ((unsigned char *)(p))[1] << 8 ) | \
			  ( ((unsigned char *)(p))[2] << 16) | \
			  ( ((unsigned char *)(p))[3] << 24)   \
			)

#define put_byte(p, v)	{ ((unsigned char *)(p))[0] = ((unsigned long)(v)); }

#define put_short(p, v)	{ ((unsigned char *)(p))[0] =			\
				((((unsigned long)(v))	   ) & 0xff); 	\
			  ((unsigned char *)(p))[1] =			\
				((((unsigned long)(v)) >> 8) & 0xff); }

#define put_long(p, v)	{ ((unsigned char *)(p))[0] =			\
				((((unsigned long)(v))	    ) & 0xff); 	\
			  ((unsigned char *)(p))[1] =			\
				((((unsigned long)(v)) >>  8) & 0xff); 	\
			  ((unsigned char *)(p))[2] =			\
				((((unsigned long)(v)) >> 16) & 0xff); 	\
			  ((unsigned char *)(p))[3] =			\
				((((unsigned long)(v)) >> 24) & 0xff); }

#ifdef NEED_SWAP

/* Define IO byte swapping routines */

void	md_swapin_exec_hdr(struct exec *);
void	md_swapout_exec_hdr(struct exec *);
void	md_swapin_reloc(struct relocation_info *, int);
void	md_swapout_reloc(struct relocation_info *, int);
void	md_swapout_jmpslot(jmpslot_t *, int);

#define md_swapin_symbols(s,n)			swap_symbols(s,n)
#define md_swapout_symbols(s,n)			swap_symbols(s,n)
#define md_swapin_zsymbols(s,n)			swap_zsymbols(s,n)
#define md_swapout_zsymbols(s,n)		swap_zsymbols(s,n)
#define md_swapin__dynamic(l)			swap__dynamic(l)
#define md_swapout__dynamic(l)			swap__dynamic(l)
#define md_swapin_section_dispatch_table(l)	swap_section_dispatch_table(l)
#define md_swapout_section_dispatch_table(l)	swap_section_dispatch_table(l)
#define md_swapin_so_debug(d)			swap_so_debug(d)
#define md_swapout_so_debug(d)			swap_so_debug(d)
#define md_swapin_rrs_hash(f,n)			swap_rrs_hash(f,n)
#define md_swapout_rrs_hash(f,n)		swap_rrs_hash(f,n)
#define md_swapin_sod(l,n)			swapin_sod(l,n)
#define md_swapout_sod(l,n)			swapout_sod(l,n)
#define md_swapout_got(g,n)			swap_longs((long*)(g),n)
#define md_swapin_ranlib_hdr(h,n)		swap_ranlib_hdr(h,n)
#define md_swapout_ranlib_hdr(h,n)		swap_ranlib_hdr(h,n)

#define md_swap_short(x) ( (((x) >> 8) & 0xff) | (((x) & 0xff) << 8) )

#define md_swap_long(x) ( (((x) >> 24) & 0xff	 ) | (((x) >> 8 ) & 0xff00   ) | \
			(((x) << 8 ) & 0xff0000) | (((x) << 24) & 0xff000000))

#else	/* We need not swap, but must pay attention to alignment: */

#define md_swap_short(x)	(x)
#define md_swap_long(x)		(x)

#endif /* NEED_SWAP */

#else	/* Not a cross linker: use native */

#define md_swap_short(x)		(x)
#define md_swap_long(x)			(x)

#define get_byte(where)			(*(char *)(where))
#define get_short(where)		(*(short *)(where))
#define get_long(where)			(*(long *)(where))

#define put_byte(where,what)		(*(char *)(where) = (what))
#define put_short(where,what)		(*(short *)(where) = (what))
#define put_long(where,what)		(*(long *)(where) = (what))

#endif /* CROSS_LINKER */
@


1.9
log
@un-__P the code.   fgs says "looks ok."
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.8 2002/07/15 21:05:57 marc Exp $	*/
@


1.8
log
@
space to tab cleanup.   Nothing but whitespace changes in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.7 2000/04/30 03:53:35 bjc Exp $	*/
d187 5
a191 5
void	md_swapin_exec_hdr __P((struct exec *));
void	md_swapout_exec_hdr __P((struct exec *));
void	md_swapin_reloc __P((struct relocation_info *, int));
void	md_swapout_reloc __P((struct relocation_info *, int));
void	md_swapout_jmpslot __P((jmpslot_t *, int));
@


1.7
log
@misc header reordering, remove #undef of relocation_info
ok espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.6 2000/02/01 21:01:43 espie Exp $	*/
d17 1
a17 1
 *      This product includes software developed by Paul Kranenburg.
d157 1
a157 1
#define get_short(p)	( ( ((unsigned char *)(p))[0]     ) | \
d161 1
a161 1
#define get_long(p)	( ( ((unsigned char *)(p))[0]      ) | \
d170 1
a170 1
				((((unsigned long)(v))     ) & 0xff); 	\
d175 1
a175 1
				((((unsigned long)(v))      ) & 0xff); 	\
d213 1
a213 1
#define md_swap_long(x) ( (((x) >> 24) & 0xff    ) | (((x) >> 8 ) & 0xff00   ) | \
@


1.6
log
@Cross-tools fixes:

* Rely on BYTE_ORDER instead of specific values of XHOST to determine
cross-endianness,

* Link necessary cross-includes to the right location,

* Add some necessary stubs for cross-endian sparc and cross-endian m68k.

This does let i386->m68k work, and probably brings i386->sparc most of the
way there...

Approved by mickey@@, niklas@@ is to busy to answer email as usual...
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.5 1998/05/16 07:44:26 niklas Exp $	*/
d44 1
a44 5
#undef __LDPGSZ
#ifdef relocation_info
#undef relocation_info
#endif
#include <sys/arch/vax/include/exec.h>
@


1.5
log
@remove host defs when getting target ones
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.4 1998/05/14 13:51:50 niklas Exp $	*/
d35 3
a37 1
#if defined(CROSS_LINKER) && defined(XHOST) && XHOST==sparc
d39 2
@


1.4
log
@Hey, vax is LE!
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.3 1998/05/11 20:27:19 niklas Exp $	*/
d39 1
d41 3
@


1.3
log
@Make usable as a cross-linker
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.2 1996/09/30 22:29:32 deraadt Exp $	*/
d153 2
a154 2
#define get_short(p)	( ( ((unsigned char *)(p))[0] << 8) | \
			  ( ((unsigned char *)(p))[1]     )   \
d157 4
a160 4
#define get_long(p)	( ( ((unsigned char *)(p))[0] << 24) | \
			  ( ((unsigned char *)(p))[1] << 16) | \
			  ( ((unsigned char *)(p))[2] << 8 ) | \
			  ( ((unsigned char *)(p))[3]      )   \
d166 1
a166 1
				((((unsigned long)(v)) >> 8) & 0xff); 	\
d168 1
a168 1
				((((unsigned long)(v))     ) & 0xff); }
d171 1
a171 1
				((((unsigned long)(v)) >> 24) & 0xff); 	\
d173 2
a175 2
			  ((unsigned char *)(p))[2] =			\
				((((unsigned long)(v)) >>  8) & 0xff); 	\
d177 1
a177 1
				((((unsigned long)(v))      ) & 0xff); }
@


1.2
log
@openbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.1 1996/07/27 10:40:01 maja Exp $	*/
d39 4
a42 1
#define	MAX_ALIGNMENT		(sizeof (long))
d55 1
a55 1
						   MID_MACHINE,		\
d61 1
a61 1
	(N_GETMID(ex) != 0 && N_GETMID(ex) != MID_MACHINE)
d73 1
a73 1
						   MID_MACHINE,		\
d77 1
a77 1
						   MID_MACHINE,		\
@


1.1
log
@Added support for vax, all code from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: md.h,v 1.0 1995/10/19 13:10:20 ragge Exp $	*/
d41 1
a41 1
#ifdef NetBSD
d47 1
a47 1
#if defined(NetBSD) || defined(CROSS_LINKER)
@
