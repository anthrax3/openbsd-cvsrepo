head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.44
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.42
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.40
	OPENBSD_5_0:1.5.0.38
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.36
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.34
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.30
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.32
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.28
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.16
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.14
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2013.07.05.21.31.47;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2002.07.19.19.28.12;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.15.21.05.57;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	98.05.11.20.27.17;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.09.30.22.29.32;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.07.27.10.40.00;	author maja;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/*	$OpenBSD: md.c,v 1.5 2002/07/19 19:28:12 marc Exp $	*/
/*	$NetBSD: md.c,v 1.1 1995/10/19 13:10:19 ragge Exp $	*/
/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <err.h>
#include <fcntl.h>
#include <ranlib.h>
#include <a.out.h>
#include <stab.h>
#include <string.h>

#include "ld.h"

/*
 * Get relocation addend corresponding to relocation record RP
 * from address ADDR
 */
long
md_get_addend(struct relocation_info *rp, unsigned char *addr)
{
	switch (RELOC_TARGET_SIZE(rp)) {
	case 0:
		return get_byte(addr);
	case 1:
		return get_short(addr);
	case 2:
		return get_long(addr);
	default:
		errx(1, "Unsupported relocation size: %x",
		    RELOC_TARGET_SIZE(rp));
	}
}

/*
 * Put RELOCATION at ADDR according to relocation record RP.
 */
void
md_relocate(struct relocation_info *rp, long relocation, unsigned char *addr,
	    int relocatable_output)
{
	switch (RELOC_TARGET_SIZE(rp)) {
	case 0:
		put_byte(addr, relocation);
		break;
	case 1:
		put_short(addr, relocation);
		break;
	case 2:
		put_long(addr, relocation);
		break;
	default:
		errx(1, "Unsupported relocation size: %x",
		    RELOC_TARGET_SIZE(rp));
	}
}

/*
 * Machine dependent part of claim_rrs_reloc().
 * Set RRS relocation type.
 */
int
md_make_reloc(struct relocation_info *rp, struct relocation_info *r, int type)
{
	/* Relocation size */
	r->r_length = rp->r_length;

	if (RELOC_PCREL_P(rp))
		r->r_pcrel = 1;

	if (type & RELTYPE_RELATIVE)
		r->r_relative = 1;

	if (type & RELTYPE_COPY)
		r->r_copy = 1;

	return 0;
}

/*
 * Set up a transfer from jmpslot at OFFSET (relative to the PLT table)
 * to the binder slot (which is at offset 0 of the PLT).
 */
void
md_make_jmpslot(jmpslot_t *sp, long offset, long index)
{
	/*
	 * On VAX a branch offset given in immediate mode is relative to
	 * the end of the address itself.
	 */
	u_long	fudge = - (sizeof(sp->opcode) + sizeof(sp->addr) + offset);

	sp->opcode = JMPREL;		/* XXX !!! untested !!! XXX */
#if 0
	sp->addr =  fudge;
#else
	sp->addr[0] = fudge & 0xffff;
	sp->addr[1] = fudge >> 16;
#endif
	sp->reloc_index = index;
}

/*
 * Set up a "direct" transfer (ie. not through the run-time binder) from
 * jmpslot at OFFSET to ADDR. Used by `ld' when the SYMBOLIC flag is on,
 * and by `ld.so' after resolving the symbol.
 * On the i386, we use the JMP instruction which is PC relative, so no
 * further RRS relocations will be necessary for such a jmpslot.
 */
void
md_fix_jmpslot(jmpslot_t *sp, long offset, u_long addr)
{
	u_long	fudge = addr - (sizeof(sp->opcode) + sizeof(sp->addr) + offset);

	sp->opcode = JMPABS;		/* XXX !!! untested !!! XXX */
#if 0
	sp->addr = fudge;
#else
	sp->addr[0] = fudge & 0xffff;
	sp->addr[1] = fudge >> 16;
#endif
	sp->reloc_index = 0;
}

/*
 * Update the relocation record for a RRS jmpslot.
 */
void
md_make_jmpreloc(struct relocation_info *rp, struct relocation_info *r,
		 int type)
{
	jmpslot_t	*sp;

	/*
	 * Fix relocation address to point to the correct
	 * location within this jmpslot.
	 */
	r->r_address += sizeof(sp->opcode);

	/* Relocation size */
	r->r_length = 2;

	/* Set relocation type */
	r->r_jmptable = 1;
	if (type & RELTYPE_RELATIVE)
		r->r_relative = 1;

}

/*
 * Set relocation type for a RRS GOT relocation.
 */
void
md_make_gotreloc(struct relocation_info *rp, struct relocation_info *r,
		 int type)
{
	r->r_baserel = 1;
	if (type & RELTYPE_RELATIVE)
		r->r_relative = 1;

	/* Relocation size */
	r->r_length = 2;
}

/*
 * Set relocation type for a RRS copy operation.
 */
void
md_make_cpyreloc(struct relocation_info *rp, struct relocation_info *r)
{
	/* Relocation size */
	r->r_length = 2;

	r->r_copy = 1;
}

void
md_set_breakpoint(long where, long *savep)
{
	*savep = *(long *)where;
	*(char *)where = TRAP;		/* !!! fixit !!! */
}

#ifndef RTLD

#ifdef FreeBSD
int	netzmagic;
#endif

/*
 * Initialize (output) exec header such that useful values are
 * obtained from subsequent N_*() macro evaluations.
 */
void
md_init_header(struct exec *hp, int magic, int flags)
{
#if defined(__NetBSD__) || defined(__OpenBSD__)
	if (oldmagic || magic == QMAGIC)
		hp->a_midmag = magic;
	else
		N_SETMAGIC((*hp), magic, MID_VAX, flags);
#endif
#ifdef FreeBSD
	if (oldmagic)
		hp->a_midmag = magic;
	else if (netzmagic)
		N_SETMAGIC_NET((*hp), magic, MID_VAX, flags);
	else
		N_SETMAGIC((*hp), magic, MID_VAX, flags);
#endif

	/* TEXT_START depends on the value of outheader.a_entry.  */
	if (!(link_mode & SHAREABLE))
		hp->a_entry = PAGSIZ;
}
#endif /* RTLD */


#ifdef NEED_SWAP
/*
 * Byte swap routines for cross-linking.
 */

void
md_swapin_exec_hdr(struct exec *h)
{
	int skip = 0;

	if (!N_BADMAG(*h))
		skip = 1;

	swap_longs((long *)h + skip, sizeof(*h)/sizeof(long) - skip);
}

void
md_swapout_exec_hdr(struct exec *h)
{
	/* NetBSD/OpenBSD: Always leave magic alone */
	int skip = 1;
#if 0
	if (N_GETMAGIC(*h) == OMAGIC)
		skip = 0;
#endif

	swap_longs((long *)h + skip, sizeof(*h)/sizeof(long) - skip);
}


void
md_swapin_reloc(struct relocation_info *r, int n)
{
	int	bits;

	for (; n; n--, r++) {
		r->r_address = md_swap_long(r->r_address);
		bits = ((int *)r)[1];
		r->r_symbolnum = md_swap_long(bits) & 0x00ffffff;
		r->r_pcrel = (bits & 1);
		r->r_length = (bits >> 1) & 3;
		r->r_extern = (bits >> 3) & 1;
		r->r_baserel = (bits >> 4) & 1;
		r->r_jmptable = (bits >> 5) & 1;
		r->r_relative = (bits >> 6) & 1;
#ifdef N_SIZE
		r->r_copy = (bits >> 7) & 1;
#endif
	}
}

void
md_swapout_reloc(struct relocation_info *r, int n)
{
	int	bits;

	for (; n; n--, r++) {
		r->r_address = md_swap_long(r->r_address);
		bits = md_swap_long(r->r_symbolnum) & 0xffffff00;
		bits |= (r->r_pcrel & 1);
		bits |= (r->r_length & 3) << 1;
		bits |= (r->r_extern & 1) << 3;
		bits |= (r->r_baserel & 1) << 4;
		bits |= (r->r_jmptable & 1) << 5;
		bits |= (r->r_relative & 1) << 6;
#ifdef N_SIZE
		bits |= (r->r_copy & 1) << 7;
#endif
		((int *)r)[1] = bits;
	}
}

void
md_swapout_jmpslot(jmpslot_t *j, int n)
{
	for (; n; n--, j++) {
		j->opcode = md_swap_short(j->opcode);
		j->addr[0] = md_swap_short(j->addr[0]);
		j->addr[1] = md_swap_short(j->addr[1]);
		j->reloc_index = md_swap_short(j->reloc_index);
	}
}

#endif /* NEED_SWAP */
@


1.5
log
@convert functions from K&R style to prototype style.
Function arg types have not yet been fixed.  OK fgs@@, espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md.c,v 1.4 2002/07/15 21:05:57 marc Exp $	*/
@


1.4
log
@
space to tab cleanup.   Nothing but whitespace changes in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: md.c,v 1.3 1998/05/11 20:27:17 niklas Exp $	*/
d52 1
a52 3
md_get_addend(rp, addr)
struct relocation_info	*rp;
unsigned char		*addr;
d71 2
a72 5
md_relocate(rp, relocation, addr, relocatable_output)
struct relocation_info	*rp;
long			relocation;
unsigned char		*addr;
int			relocatable_output;
d95 1
a95 3
md_make_reloc(rp, r, type)
struct relocation_info	*rp, *r;
int			type;
d117 1
a117 4
md_make_jmpslot(sp, offset, index)
jmpslot_t	*sp;
long		offset;
long		index;
d143 1
a143 4
md_fix_jmpslot(sp, offset, addr)
jmpslot_t	*sp;
long		offset;
u_long		addr;
d161 2
a162 3
md_make_jmpreloc(rp, r, type)
struct relocation_info	*rp, *r;
int			type;
d186 2
a187 3
md_make_gotreloc(rp, r, type)
struct relocation_info	*rp, *r;
int			type;
d201 1
a201 2
md_make_cpyreloc(rp, r)
struct relocation_info	*rp, *r;
d210 1
a210 3
md_set_breakpoint(where, savep)
long	where;
long	*savep;
d227 1
a227 3
md_init_header(hp, magic, flags)
struct exec	*hp;
int		magic, flags;
d257 1
a257 2
md_swapin_exec_hdr(h)
struct exec *h;
d268 1
a268 2
md_swapout_exec_hdr(h)
struct exec *h;
d282 1
a282 3
md_swapin_reloc(r, n)
struct relocation_info *r;
int n;
d303 1
a303 3
md_swapout_reloc(r, n)
struct relocation_info *r;
int n;
d324 1
a324 3
md_swapout_jmpslot(j, n)
jmpslot_t	*j;
int		n;
@


1.3
log
@Make usable as a cross-linker
@
text
@d1 1
a1 1
/*	$OpenBSD: md.c,v 1.2 1996/09/30 22:29:32 deraadt Exp $	*/
d17 1
a17 1
 *      This product includes software developed by Paul Kranenburg.
@


1.2
log
@openbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: md.c,v 1.1 1996/07/27 10:40:00 maja Exp $	*/
d40 1
d253 1
a253 1
		N_SETMAGIC((*hp), magic, MID_I386, flags);
d259 1
a259 1
		N_SETMAGIC_NET((*hp), magic, MID_I386, flags);
d261 1
a261 1
		N_SETMAGIC((*hp), magic, MID_I386, flags);
@


1.1
log
@Added support for vax, all code from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: md.c,v 1.0 1995/10/19 13:10:19 ragge Exp $	*/
d248 1
a248 1
#ifdef NetBSD
d291 1
a291 1
	/* NetBSD: Always leave magic alone */
@
