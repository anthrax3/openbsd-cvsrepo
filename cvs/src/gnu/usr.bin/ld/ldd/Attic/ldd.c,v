head	1.14;
access;
symbols
	OPENBSD_5_3:1.13.0.42
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.40
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.38
	OPENBSD_5_0:1.13.0.36
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.34
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.32
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.28
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.30
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.26
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.24
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.22
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.20
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.18
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.16
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.14
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.12
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.10
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.8
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.6
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.4
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2013.07.05.21.31.47;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2002.12.08.16.26.58;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.09.07.01.25.34;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.19.19.28.12;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.15.21.05.57;	author marc;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.25.22.22.22;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.09.07.04.36;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.17.21.44.38;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.15.07.13.44;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.05.21.01.20.45;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	98.03.26.19.46.55;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.09.14.03.11.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.07.14.57.40;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.40.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.40.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/*	$OpenBSD: ldd.c,v 1.13 2002/12/08 16:26:58 millert Exp $	*/
/*	$NetBSD: ldd.c,v 1.12 1995/10/09 00:14:41 pk Exp $	*/
/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/file.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <a.out.h>
#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

extern void scan_library(int, struct exec *, const char *, const char *,
			 const char *); 

static void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "Usage: %s <filename> ...\n", __progname);
	exit(1);
}

int
main(int argc, char *argv[])
{
	char		*fmt1 = NULL, *fmt2 = NULL;
	int		rval;
	int		c;

	while ((c = getopt(argc, argv, "f:")) != -1) {
		switch (c) {
		case 'f':
			if (fmt1) {
				if (fmt2)
					errx(1, "Too many formats");
				fmt2 = optarg;
			} else
				fmt1 = optarg;
			break;
		default:
			usage();
			/*NOTREACHED*/
		}
	}
	argc -= optind;
	argv += optind;

	if (argc <= 0) {
		usage();
		/*NOTREACHED*/
	}

	/* ld.so magic */
	if (setenv("LD_TRACE_LOADED_OBJECTS", "", 1) == -1)
		err(1, "cannot setenv LD_TRACE_LOADED_OBJECTS");
	if (fmt1)
		if (setenv("LD_TRACE_LOADED_OBJECTS_FMT1", fmt1, 1) == -1)
			err(1, "cannot setenv LD_TRACE_LOADED_OBJECTS_FMT1");
	if (fmt2)
		if (setenv("LD_TRACE_LOADED_OBJECTS_FMT2", fmt2, 1) == -1)
			err(1, "cannot setenv LD_TRACE_LOADED_OBJECTS_FMT2");

	rval = 0;
	while (argc--) {
		int	fd;
		struct exec hdr;
		int	status;

		if ((fd = open(*argv, O_RDONLY, 0)) < 0) {
			warn("%s", *argv);
			rval |= 1;
			argv++;
			continue;
		}
		if (read(fd, &hdr, sizeof hdr) != sizeof hdr) {
			warnx("%s: not a dynamic executable", *argv);
			(void)close(fd);
			rval |= 1;
			argv++;
			continue;
		}
		if ((N_GETFLAG(hdr) & EX_DPMASK) == (EX_DYNAMIC | EX_PIC)) {
			scan_library(fd, &hdr, *argv, fmt1, fmt2);
			(void)close(fd);
			argv++;
			continue;
		}
		if ((N_GETFLAG(hdr) & EX_DPMASK) != EX_DYNAMIC
#if 1 /* Compatibility */
		    || hdr.a_entry < N_PAGSIZ(hdr)
#endif
		    ) {

			warnx("%s: not a dynamic executable", *argv);
			(void)close(fd);
			rval |= 1;
			argv++;
			continue;
		}
		(void)close(fd);

		if (setenv("LD_TRACE_LOADED_OBJECTS_PROGNAME", *argv, 1) == -1)
			err(1, "cannot setenv LD_TRACE_LOADED_OBJECTS_PROGNAME");
		if (fmt1 == NULL && fmt2 == NULL)
			/* Default formats */
			printf("%s:\n", *argv);
		fflush(stdout);

		switch (fork()) {
		case -1:
			err(1, "fork");
			break;
		default:
			if (wait(&status) <= 0) {
				warn("wait");
				rval |= 1;
			} else if (WIFSIGNALED(status)) {
				fprintf(stderr, "%s: signal %d\n",
						*argv, WTERMSIG(status));
				rval |= 1;
			} else if (WIFEXITED(status) && WEXITSTATUS(status)) {
				fprintf(stderr, "%s: exit status %d\n",
						*argv, WEXITSTATUS(status));
				rval |= 1;
			}
			break;
		case 0:
			rval |= execl(*argv, *argv, (char *)NULL) != 0;
			perror(*argv);
			_exit(1);
		}
		argv++;
	}

	return (rval ? 1 : 0);
}
@


1.13
log
@getopt returns -1, not EOF
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.12 2002/09/07 01:25:34 marc Exp $	*/
@


1.12
log
@
ansification of ld

* normalized the signatures of the functions passed to each_file()
   and each_full_file().  In most cases that meant adding a void *dummy.
   In one case it changed an int to a void*, but the arg was only checked
   for zero/not-zero so the change was not significant.

 * removes unused code and structures.

 * makes sure printf args match their format.

 * got rid of some of the gcc -Wall warnings

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.11 2002/07/19 19:28:12 marc Exp $	*/
d67 1
a67 1
	while ((c = getopt(argc, argv, "f:")) != EOF) {
@


1.11
log
@convert functions from K&R style to prototype style.
Function arg types have not yet been fixed.  OK fgs@@, espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.10 2002/07/15 21:05:57 marc Exp $	*/
d48 2
a49 1
extern void scan_library(int, struct exec *, const char *, const char *, const char *);
d51 1
a51 1
void
@


1.10
log
@
space to tab cleanup.   Nothing but whitespace changes in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.9 2001/10/25 22:22:22 espie Exp $	*/
d51 1
a51 1
usage()
d60 1
a60 3
main(argc, argv)
int	argc;
char	*argv[];
@


1.9
log
@Code in scanlib similar to main ldd, to recognize fmt1 and fmt2 and use
them.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.8 2001/07/09 07:04:36 deraadt Exp $	*/
d17 1
a17 1
 *      This product includes software developed by Paul Kranenburg.
@


1.8
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.7 2001/04/17 21:44:38 espie Exp $	*/
d48 1
a48 1
extern void scan_library(int, struct exec *, const char *);
d121 1
a121 1
			scan_library(fd, &hdr, *argv);
@


1.7
log
@Let ldd scan shared libraries. Since it doesn't load them, it doesn't
use the hint cache nor anything, but at least it shows what dependencies
exist.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.6 2000/09/15 07:13:44 deraadt Exp $	*/
d166 1
a166 1
			rval |= execl(*argv, *argv, NULL) != 0;
@


1.6
log
@check return value for setenv(3) for failure, and deal appropriately
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.5 1999/05/21 01:20:45 espie Exp $	*/
d48 2
d121 1
a121 1
			warnx("%s: no support for dynamic libraries", *argv);
@


1.5
log
@Be more specific about dynamic libraries: ldd does not know how to handle
them, but they should be `reasonable' objects to pass to it.

Otherwise, collect2 will get confused if the gcc driver is used to build
dynamic libraries.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.4 1998/03/26 19:46:55 niklas Exp $	*/
d90 2
a91 1
	setenv("LD_TRACE_LOADED_OBJECTS", "", 1);
d93 2
a94 1
		setenv("LD_TRACE_LOADED_OBJECTS_FMT1", fmt1, 1);
d96 2
a97 1
		setenv("LD_TRACE_LOADED_OBJECTS_FMT2", fmt2, 1);
d138 2
a139 1
		setenv("LD_TRACE_LOADED_OBJECTS_PROGNAME", *argv, 1);
@


1.4
log
@RCS id cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.12 1995/10/09 00:14:41 pk Exp $	*/
d108 14
a121 2
		if (read(fd, &hdr, sizeof hdr) != sizeof hdr
		    || (N_GETFLAG(hdr) & EX_DPMASK) != EX_DYNAMIC
@


1.3
log
@exit 1, not count, because if count > 127... or if count == 255+1
@
text
@d1 1
@


1.2
log
@avoid __LDPGSZ
@
text
@d154 1
a154 1
	return rval;
@


1.1
log
@Initial revision
@
text
@d110 1
a110 1
		    || hdr.a_entry < __LDPGSZ
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
