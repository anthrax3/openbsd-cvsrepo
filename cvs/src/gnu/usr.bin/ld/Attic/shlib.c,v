head	1.16;
access;
symbols
	OPENBSD_5_3:1.15.0.40
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.38
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.36
	OPENBSD_5_0:1.15.0.34
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.32
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.30
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.26
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.28
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.24
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.22
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.20
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.18
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.16
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.14
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.10.0.8
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.6
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2013.07.05.21.31.47;	author miod;	state dead;
branches;
next	1.15;

1.15
date	2003.04.16.02.15.10;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.07.01.25.34;	author marc;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.19.19.28.12;	author marc;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.15.21.05.56;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.10.17.28.16;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.28.15.32.40;	author form;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.24.03.33.27;	author form;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.16.14.31.26;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.16.14.28.22;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.02.06.18.41;	author assar;	state Exp;
branches;
next	1.5;

1.5
date	99.02.20.05.53.31;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	98.05.11.20.27.15;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.04.26.17.57.44;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.03.26.19.46.24;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.40.55;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.40.55;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/*	$OpenBSD: shlib.c,v 1.15 2003/04/16 02:15:10 deraadt Exp $	*/
/*	$NetBSD: shlib.c,v 1.13 1998/04/04 01:00:29 fvdl Exp $	*/

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifdef sun
char	*strsep();
int	isdigit();
#endif

#include <sys/param.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/file.h>
#include <sys/time.h>
#include <ranlib.h>
#include <a.out.h>
#include <ctype.h>
#include <dirent.h>
#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ld.h"

/*
 * Standard directories to search for files specified by -l.
 */
#ifndef STANDARD_SEARCH_DIRS
#define	STANDARD_SEARCH_DIRS	"/usr/lib"
#endif

/*
 * Actual vector of library search directories,
 * including `-L'ed and LD_LIBRARY_PATH spec'd ones.
 */
char	 **search_dirs;
int	n_search_dirs;

char	*standard_search_dirs[] = {
	STANDARD_SEARCH_DIRS
};


void
add_search_dir(char *name)
{
	int i, len;

	len = strlen(name);

	while (len > 1 && name[len - 1] == '/')
		--len;

	for (i = 0; i < n_search_dirs; i++)
		if (strlen(search_dirs[i]) == len &&
			!strncmp(search_dirs[i], name, len))
				return;
	n_search_dirs++;
	search_dirs = (char **)
		xrealloc(search_dirs, n_search_dirs * sizeof search_dirs[0]);
	search_dirs[n_search_dirs - 1] = xmalloc(++len);
	(void)strlcpy(search_dirs[n_search_dirs - 1], name, len);
}

void
remove_search_dir(char *name)
{
	int	i, len;

	len = strlen(name);

	while (len > 1 && name[len - 1] == '/')
		--len;

	for (i = 0; i < n_search_dirs; i++) {
		if (strlen(search_dirs[i]) != len ||
		    strncmp(search_dirs[i], name, len))
			continue;
		free(search_dirs[i]);
		if (i < (n_search_dirs - 1))
			bcopy(&search_dirs[i+1], &search_dirs[i],
			      (n_search_dirs - i - 1) * sizeof search_dirs[0]);
		n_search_dirs--;
		search_dirs = (char **)xrealloc(search_dirs,
			n_search_dirs * sizeof search_dirs[0]);
		break;
	}
}

void
add_search_path(char *path)
{
	char	*cp, *dup;

	if (path == NULL)
		return;

	/* Add search directories from `path' */
	path = dup = strdup(path);
	while ((cp = strsep(&path, ":")) != NULL)
		add_search_dir(cp);
	free(dup);
}

void
remove_search_path(char *path)
{
	char    *cp, *dup;
  
	if (path == NULL)  
		return;
        
	/* Remove search directories from `path' */
	path = dup = strdup(path);
	while ((cp = strsep(&path, ":")) != NULL)
		remove_search_dir(cp);
	free(dup);
}
                
void
std_search_path(void)
{
	int	i, n;

	/* Append standard search directories */
	n = sizeof standard_search_dirs / sizeof standard_search_dirs[0];
	for (i = 0; i < n; i++)
		add_search_dir(standard_search_dirs[i]);
}

/*
 * Return true if CP points to a valid dewey number.
 * Decode and leave the result in the array DEWEY.
 * Return the number of decoded entries in DEWEY.
 */

int
getdewey(int dewey[], char *cp)
{
	int	i, n;

	for (n = 0, i = 0; i < MAXDEWEY; i++) {
		if (*cp == '\0')
			break;

		if (*cp == '.') cp++;
#ifdef SUNOS_LIB_COMPAT
		if (!(isdigit)(*cp))
#else
		if (!isdigit(*cp))
#endif
			return 0;

		dewey[n++] = strtol(cp, &cp, 10);
	}

	return n;
}

/*
 * Compare two dewey arrays.
 * Return -1 if `d1' represents a smaller value than `d2'.
 * Return  1 if `d1' represents a greater value than `d2'.
 * Return  0 if equal.
 */
int
cmpndewey(int d1[], int n1, int d2[], int n2)
{
	int	i;

	for (i = 0; i < n1 && i < n2; i++) {
		if (d1[i] < d2[i])
			return -1;
		if (d1[i] > d2[i])
			return 1;
	}

	if (n1 == n2)
		return 0;

	if (i == n1)
		return -1;

	if (i == n2)
		return 1;

	errx(1, "cmpndewey: cant happen");
	return 0;
}

/*
 * Search directories for a shared library matching the given
 * major and minor version numbers.
 *
 * MAJOR == -1 && MINOR == -1	--> find highest version
 * MAJOR != -1 && MINOR == -1	--> find highest minor version
 * MAJOR == -1 && MINOR != -1	--> invalid
 * MAJOR != -1 && MINOR != -1	--> find highest micro version
 */

/* Not interested in devices right now... */
#undef major
#undef minor

char *
findshlib(char *name, int *majorp, int *minorp, int do_dot_a)
{
	int		dewey[MAXDEWEY];
	int		ndewey;
	int		tmp[MAXDEWEY];
	int		i;
	int		len;
	char		*lname;
	int		major = *majorp, minor = *minorp;

	len = strlen(name);
	lname = (char *)alloca(len + sizeof("lib"));
	snprintf(lname, len + sizeof("lib"), "lib%s", name);
	len += 3;

	ndewey = 0;

	for (i = 0; i < n_search_dirs; i++) {
		DIR		*dd = opendir(search_dirs[i]);
		struct dirent	*dp;
		char		*path = NULL;

		if (dd == NULL)
			continue;

		while ((dp = readdir(dd)) != NULL) {
			int	n;

			if (do_dot_a && path == NULL &&
					dp->d_namlen == len + 2 &&
					strncmp(dp->d_name, lname, len) == 0 &&
					(dp->d_name+len)[0] == '.' &&
					(dp->d_name+len)[1] == 'a') {

				path = concat(search_dirs[i], "/", dp->d_name);
			}

			if (dp->d_namlen < len + 4)
				continue;
			if (strncmp(dp->d_name, lname, len) != 0)
				continue;
			if (strncmp(dp->d_name+len, ".so.", 4) != 0)
				continue;

			if ((n = getdewey(tmp, dp->d_name+len+4)) == 0)
				continue;

			/* skip inappropriate versions. */
			if (major != -1) {
				if (tmp[0] != major)
					continue;
				if (n != 1 && minor != -1 && tmp[1] < minor)
					continue;
			} 

			if (cmpndewey(tmp, n, dewey, ndewey) <= 0)
				continue;

			/* We have a better version */
			if (path)
				free(path);
			path = concat(search_dirs[i], "/", dp->d_name);
			bcopy(tmp, dewey, sizeof(dewey));
			ndewey = n;
			*majorp = dewey[0];
			*minorp = dewey[1];
		}
		closedir(dd);

		if (path != NULL)
			/*
			 * There's a lib in this dir; take it.
			 */
			return path;
	}

	return NULL;
}
@


1.15
log
@string cleanup; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.14 2002/09/07 01:25:34 marc Exp $	*/
@


1.14
log
@
ansification of ld

* normalized the signatures of the functions passed to each_file()
   and each_full_file().  In most cases that meant adding a void *dummy.
   In one case it changed an int to a void*, but the arg was only checked
   for zero/not-zero so the change was not significant.

 * removes unused code and structures.

 * makes sure printf args match their format.

 * got rid of some of the gcc -Wall warnings

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.13 2002/07/19 19:28:12 marc Exp $	*/
d250 1
a250 1
	sprintf(lname, "lib%s", name);
@


1.13
log
@convert functions from K&R style to prototype style.
Function arg types have not yet been fixed.  OK fgs@@, espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.12 2002/07/15 21:05:56 marc Exp $	*/
d140 3
a142 3
	char	*cp, *dup;

	if (path == NULL)
d144 1
a144 1

d151 1
a151 1

@


1.12
log
@
space to tab cleanup.   Nothing but whitespace changes in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.11 2002/07/10 17:28:16 marc Exp $	*/
d77 1
a77 2
add_search_dir(name)
	char	*name;
d98 1
a98 2
remove_search_dir(name)
	char	*name;
d123 1
a123 2
add_search_path(path)
char	*path;
d138 1
a138 2
remove_search_path(path)
char	*path;
d153 1
a153 1
std_search_path()
d170 1
a170 3
getdewey(dewey, cp)
int	dewey[];
char	*cp;
d199 1
a199 3
cmpndewey(d1, n1, d2, n2)
int	d1[], d2[];
int	n1, n2;
d238 1
a238 4
findshlib(name, majorp, minorp, do_dot_a)
char	*name;
int	*majorp, *minorp;
int	do_dot_a;
@


1.11
log
@
First of some clean-up commits.  This one only removes use of
register variables.   clean-up concept ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.10 2000/06/28 15:32:40 form Exp $	*/
d18 1
a18 1
 *      This product includes software developed by Paul Kranenburg.
d236 3
a238 3
 * MAJOR != -1 && MINOR == -1   --> find highest minor version
 * MAJOR == -1 && MINOR != -1   --> invalid
 * MAJOR != -1 && MINOR != -1   --> find highest micro version
d269 1
a269 1
		char 		*path = NULL;
@


1.10
log
@Improve remove_search_dir(), avoid memory leak.
Add support for -U option:
  Unconfigure directories specified on the command line or remove
  inaccessible directories from search path if no directories spec-
  ified. This option cannot be used with -m.
- this option helps to correctly pkg_delete packages like postgresql,
mysql (with shared libs in package's own directory).
ok espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.9 2000/04/24 03:33:27 form Exp $	*/
d128 1
a128 1
	register char	*cp, *dup;
d144 1
a144 1
	register char	*cp, *dup;
d209 1
a209 1
	register int	i;
@


1.9
log
@Add xstrdup() - like strdup but get fatal error if memory is exhausted.
Avoid duplicates in search path.
ok espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.8 2000/01/16 14:31:26 espie Exp $	*/
d102 1
a102 1
	int	n;
d104 8
a111 2
	for (n = 0; n < n_search_dirs; n++) {
		if (strcmp(search_dirs[n], name))
d113 4
a116 4
		free(search_dirs[n]);
		if (n < (n_search_dirs - 1))
			bcopy(&search_dirs[n+1], &search_dirs[n],
			      (n_search_dirs - n - 1) * sizeof search_dirs[0]);
d118 3
@


1.8
log
@Kill XXX code which is bogus and unused anyway (no call with dodotpath==1
and major !=-1 anywhere).

Simplify test logic: it's enough to check path != NULL to know whether
we found something.  cmpdewey() code is enough to ensure we get the best
one (libfoo.a doesn't change n, any appropriate libfoo.so will take
precedence).
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.6 2000/01/02 06:18:41 assar Exp $	*/
d80 11
d94 2
a95 1
	search_dirs[n_search_dirs - 1] = strdup(name);
@


1.7
log
@Bug-fix: skipping inappropriate versions is independent of whether
we found something correct or not.
@
text
@d235 1
a235 1
	char		*lname, *path = NULL;
d248 1
a248 2
		int		found_dot_a = 0;
		int		found_match = 0;
a262 1
				found_dot_a = 1;
a274 6
			if (major != -1 && found_dot_a) { /* XXX */
				free(path);
				path = NULL;
				found_dot_a = 0;
			}

a289 2
			found_dot_a = 0;
			found_match = 1;
d297 1
a297 1
		if (found_dot_a || found_match)
d304 1
a304 1
	return path;
@


1.6
log
@revert back 1.4->1.5.
ld (and ld.so) should take the shared library of the highest version
in the first directory that it founds.  this is the way ld/ld.so has
traditionally worked since SunOS 4 and this is the way it should work.

before changing this back - please make sure you understand the
semantics of this and that you are not just hiding some other bug but
toggling this change.  also verify the example in the PR.

see PR/972
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.5 1999/02/20 05:53:31 marc Exp $	*/
d249 1
a249 1
		int		might_take_it;
a253 1
		might_take_it = 0;
d283 7
a289 13
			if (major == -1 && minor == -1) {
				might_take_it = 1;
			} else if (major != -1 && minor == -1) {
				if (tmp[0] == major)
					might_take_it = 1;
			} else if (major != -1 && minor != -1) {
				if (tmp[0] == major)
					if (n == 1 || tmp[1] >= minor)
						might_take_it = 1;
			}

			if (!might_take_it)
				continue;
d299 1
d307 1
a307 1
		if (found_dot_a || might_take_it)
@


1.5
log
@fix library search problem; the linker would stop searching
for shared libs when the first was found... thus it would miss a
newer version found later in the search path
@
text
@d1 1
a1 1
/*	$OpenBSD$
d249 1
d254 1
d256 1
a256 1
			int	n, might_take_it = 0;
d313 1
a313 1
		if (found_dot_a)
d315 1
a315 1
			 * There's a .a archive here.
@


1.4
log
@Make usable as a cross-linker
@
text
@d1 1
a248 1
		int		might_take_it;
a252 1
		might_take_it = 0;
d254 1
a254 1
			int	n;
d311 1
a311 1
		if (found_dot_a || might_take_it)
d313 1
a313 1
			 * There's a lib in this dir; take it.
@


1.3
log
@If a good matching shared library is found, don't look in the next
directories. This is compatible with the SunOS behaviour. Also,
it fixes a problem where it was not possible for some 3rd party
package to have a library with the same name as a library already
in the system, and a lower version number. The highest version
would always be picked. This particular problem shows up with Mozilla,
which has a libutil.so.1.0; fvdl
@
text
@d44 1
@


1.2
log
@RCS id cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: shlib.c,v 1.1.1.1 1995/10/18 08:40:55 deraadt Exp $*/
d247 1
d252 1
d254 1
a254 1
			int	n, might_take_it = 0;
d311 1
a311 1
		if (found_dot_a)
d313 1
a313 1
			 * There's a .a archive here.
@


1.1
log
@Initial revision
@
text
@d1 2
a31 1
 *	$Id: shlib.c,v 1.11 1995/06/04 21:56:30 pk Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
