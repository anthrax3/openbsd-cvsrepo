head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.44
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.42
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.40
	OPENBSD_5_0:1.5.0.38
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.36
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.34
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.30
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.32
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.28
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.07.05.21.31.46;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2002.09.07.01.25.34;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.24.06.08.52;	author ericj;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.03.33.27;	author form;	state Exp;
branches;
next	1.2;

1.2
date	98.03.26.19.46.18;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.40.55;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.40.55;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/* $OpenBSD: etc.c,v 1.5 2002/09/07 01:25:34 marc Exp $ */

/* Public Domain */

#include <sys/types.h>

#include <a.out.h>
#include <err.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "ld.h"

#define	OOM_MSG	"Out of memory"

char *
xstrdup(const char *s)
{
	char *ptr;

	if ((ptr = strdup(s)) == NULL)
		err(1, OOM_MSG);
	return (ptr);
}

void *
xmalloc(size_t size)
{
	void *ptr;

	if ((ptr = malloc(size)) == NULL)
		err(1, OOM_MSG);
	return (ptr);
}

void *
xrealloc(void *ptr, size_t size)
{
	void *nptr;

	if ((nptr = realloc(ptr, size)) == NULL)
		err(1, OOM_MSG);
	return (nptr);
}

char *
concat(const char *s1, const char *s2, const char *s3)
{
	char *str;
	size_t len;

	len = strlen(s1) + strlen(s2) + strlen(s3) + 1;
	str = xmalloc(len);

	strlcpy(str, s1, len);
	strlcat(str, s2, len);
	strlcat(str, s3, len);

	return (str);
}
@


1.5
log
@
ansification of ld

* normalized the signatures of the functions passed to each_file()
   and each_full_file().  In most cases that meant adding a void *dummy.
   In one case it changed an int to a void*, but the arg was only checked
   for zero/not-zero so the change was not significant.

 * removes unused code and structures.

 * makes sure printf args match their format.

 * got rid of some of the gcc -Wall warnings

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: etc.c,v 1.4 2002/05/24 06:08:52 ericj Exp $ */
@


1.4
log
@
replace code w/ no license w/ public domain code
deraadt@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d7 1
d10 1
d12 2
@


1.3
log
@Add xstrdup() - like strdup but get fatal error if memory is exhausted.
Avoid duplicates in search path.
ok espie@@
@
text
@d1 5
a5 3
/* * $OpenBSD: etc.c,v 1.2 1998/03/26 19:46:18 niklas Exp $*/
/*
 */
d11 2
a12 3
/*
 * Like strdup but get fatal error if memory is exhausted.
 */
d14 1
a14 2
xstrdup(s)
	char *s;
d16 1
a16 1
	char *result = strdup(s);
d18 3
a20 4
	if (!result)
		errx(1, "virtual memory exhausted");

	return result;
a22 3
/*
 * Like malloc but get fatal error if memory is exhausted.
 */
d24 1
a24 2
xmalloc(size)
	size_t size;
d26 1
a26 4
	register void	*result = (void *)malloc(size);

	if (!result)
		errx(1, "virtual memory exhausted");
d28 3
a30 1
	return result;
a32 3
/*
 * Like realloc but get fatal error if memory is exhausted.
 */
d34 1
a34 3
xrealloc(ptr, size)
	void *ptr;
	size_t size;
d36 1
a36 9
	register void	*result;

	if (ptr == NULL)
		result = (void *)malloc(size);
	else
		result = (void *)realloc(ptr, size);

	if (!result)
		errx(1, "virtual memory exhausted");
d38 3
a40 1
	return result;
a42 4
/*
 * Return a newly-allocated string whose contents concatenate
 * the strings S1, S2, S3.
 */
d44 1
a44 2
concat(s1, s2, s3)
	const char *s1, *s2, *s3;
d46 2
a47 10
	register int	len1 = strlen(s1),
			len2 = strlen(s2),
			len3 = strlen(s3);

	register char *result = (char *)xmalloc(len1 + len2 + len3 + 1);

	strcpy(result, s1);
	strcpy(result + len1, s2);
	strcpy(result + len1 + len2, s3);
	result[len1 + len2 + len3] = 0;
d49 8
a56 1
	return result;
a57 1

@


1.2
log
@RCS id cleanup
@
text
@d1 1
a1 1
/* * $OpenBSD: etc.c,v 1.1.1.1 1995/10/18 08:40:55 deraadt Exp $*/
d8 15
@


1.1
log
@Initial revision
@
text
@d1 1
a2 1
 * $Id: etc.c,v 1.7 1994/06/10 15:16:04 pk Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
