head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.44
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.42
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.40
	OPENBSD_5_0:1.4.0.38
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.36
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.34
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.30
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.32
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.28
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.16
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.14
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.12
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.10
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.07.05.21.31.47;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2002.07.19.19.28.12;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.15.21.05.56;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	98.03.26.19.46.31;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.40.56;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.40.56;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/* *	$OpenBSD: xbits.c,v 1.4 2002/07/19 19:28:12 marc Exp $*/
/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * "Generic" byte-swap routines.
 */

#include <sys/param.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/file.h>
#include <fcntl.h>
#include <ar.h>
#include <ranlib.h>
#include <a.out.h>
#include <stab.h>
#include <string.h>

#include "ld.h"

void
swap_longs(long *lp, int n)
{
	for (; n > 0; n--, lp++)
		*lp = md_swap_long(*lp);
}

void
swap_symbols(struct nlist *s, int n)
{
	for (; n; n--, s++) {
		s->n_un.n_strx = md_swap_long(s->n_un.n_strx);
		s->n_desc = md_swap_short(s->n_desc);
		s->n_value = md_swap_long(s->n_value);
	}
}

void
swap_zsymbols(struct nzlist *s, int n)
{
	for (; n; n--, s++) {
		s->nz_strx = md_swap_long(s->nz_strx);
		s->nz_desc = md_swap_short(s->nz_desc);
		s->nz_value = md_swap_long(s->nz_value);
		s->nz_size = md_swap_long(s->nz_size);
	}
}


void
swap_ranlib_hdr(struct ranlib *rlp, int n)
{
	for (; n; n--, rlp++) {
		rlp->ran_un.ran_strx = md_swap_long(rlp->ran_un.ran_strx);
		rlp->ran_off = md_swap_long(rlp->ran_off);
	}
}

void
swap__dynamic(struct _dynamic *dp)
{
	dp->d_version = md_swap_long(dp->d_version);
	dp->d_debug = (struct so_debug *)md_swap_long((long)dp->d_debug);
	dp->d_un.d_sdt = (struct section_dispatch_table *)
				md_swap_long((long)dp->d_un.d_sdt);
	dp->d_entry = (struct ld_entry *)md_swap_long((long)dp->d_entry);
}

void
swap_section_dispatch_table(struct section_dispatch_table *sdp)
{
	swap_longs((long *)sdp, sizeof(*sdp)/sizeof(long));
}

void
swap_so_debug(struct so_debug *ddp)
{
	swap_longs((long *)ddp, sizeof(*ddp)/sizeof(long));
}

void
swapin_sod(struct sod *sodp, int n)
{
	unsigned long	bits;

	for (; n; n--, sodp++) {
		sodp->sod_name = md_swap_long(sodp->sod_name);
		sodp->sod_major = md_swap_short(sodp->sod_major);
		sodp->sod_minor = md_swap_short(sodp->sod_minor);
		sodp->sod_next = md_swap_long(sodp->sod_next);
		bits = ((unsigned long *)sodp)[1];
		sodp->sod_library = ((bits >> 24) & 1);
	}
}

void
swapout_sod(struct sod *sodp, int n)
{
	unsigned long	bits;

	for (; n; n--, sodp++) {
		sodp->sod_name = md_swap_long(sodp->sod_name);
		sodp->sod_major = md_swap_short(sodp->sod_major);
		sodp->sod_minor = md_swap_short(sodp->sod_minor);
		sodp->sod_next = md_swap_long(sodp->sod_next);
		bits = (unsigned long)(sodp->sod_library) << 24;
		((unsigned long *)sodp)[1] = bits;
	}
}

void
swap_rrs_hash(struct rrs_hash *fsp, int n)
{
	for (; n; n--, fsp++) {
		fsp->rh_symbolnum = md_swap_long(fsp->rh_symbolnum);
		fsp->rh_next = md_swap_long(fsp->rh_next);
	}
}

@


1.4
log
@convert functions from K&R style to prototype style.
Function arg types have not yet been fixed.  OK fgs@@, espie@@
@
text
@d1 1
a1 1
/* *	$OpenBSD: xbits.c,v 1.3 2002/07/15 21:05:56 marc Exp $*/
@


1.3
log
@
space to tab cleanup.   Nothing but whitespace changes in this commit.
@
text
@d1 1
a1 1
/* *	$OpenBSD: xbits.c,v 1.2 1998/03/26 19:46:31 niklas Exp $*/
d53 1
a53 3
swap_longs(lp, n)
int	n;
long	*lp;
d60 1
a60 3
swap_symbols(s, n)
struct nlist *s;
int n;
d70 1
a70 3
swap_zsymbols(s, n)
struct nzlist *s;
int n;
d82 1
a82 3
swap_ranlib_hdr(rlp, n)
struct ranlib *rlp;
int n;
d91 1
a91 2
swap__dynamic(dp)
struct _dynamic *dp;
d101 1
a101 2
swap_section_dispatch_table(sdp)
struct section_dispatch_table *sdp;
d107 1
a107 2
swap_so_debug(ddp)
struct so_debug	*ddp;
d113 1
a113 3
swapin_sod(sodp, n)
struct sod *sodp;
int n;
d128 1
a128 3
swapout_sod(sodp, n)
struct sod *sodp;
int n;
d143 1
a143 3
swap_rrs_hash(fsp, n)
struct rrs_hash	*fsp;
int n;
@


1.2
log
@RCS id cleanup
@
text
@d1 1
a1 1
/* *	$OpenBSD: xbits.c,v 1.1.1.1 1995/10/18 08:40:56 deraadt Exp $*/
d16 1
a16 1
 *      This product includes software developed by Paul Kranenburg.
@


1.1
log
@Initial revision
@
text
@d1 1
a30 1
 *	$Id: xbits.c,v 1.4 1994/01/29 02:03:18 jtc Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
