head	1.11;
access;
symbols
	OPENBSD_5_3:1.10.0.44
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.42
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.40
	OPENBSD_5_0:1.10.0.38
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.36
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.34
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.30
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.32
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.28
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.26
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.24
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.22
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.20
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.18
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.16
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.14
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.12
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.10
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.8
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.6
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.7.0.12
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.10
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.6
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2013.07.05.21.31.47;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2002.07.19.19.28.12;	author marc;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.15.21.05.57;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.10.17.28.16;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	99.05.10.16.20.47;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	98.03.26.19.47.33;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.11.05.10.32.52;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.22.01.24.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.12.30.08.13.58;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.40.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.40.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.40.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/* *	$OpenBSD: md.c,v 1.10 2002/07/19 19:28:12 marc Exp $*/
/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/types.h>
#include <a.out.h>
#include <stdio.h>
#include <stdlib.h>
#include <err.h>
#include <fcntl.h>
#include <stab.h>
#include <string.h>

#include "ld.h"

/*
 * Relocation masks and sizes for the Sparc architecture.
 *
 * Note that these are very dependent on the order of the enums in
 * enum reloc_type (in a.out.h); if they change the following must be
 * changed.
 * Also, note that RELOC_RELATIVE is handled as if it were a RELOC_HI22.
 * This should work provided that relocations values have zeroes in their
 * least significant 10 bits. As RELOC_RELATIVE is used only to relocate
 * with load address values - which are page aligned - this condition is
 * fulfilled as long as the system's page size is > 1024 (and a power of 2).
 */
static int reloc_target_rightshift[] = {
	0, 0, 0,	/* RELOC_8, _16, _32 */
	0, 0, 0, 2, 2,	/* DISP8, DISP16, DISP32, WDISP30, WDISP22 */
	10, 0,		/* HI22, _22 */
	0, 0,		/* RELOC_13, _LO10 */
	0, 0,		/* _SFA_BASE, _SFA_OFF13 */
	0, 0, 10,	/* _BASE10, _BASE13, _BASE22 */
	0, 10,		/* _PC10, _PC22 */
	2, 0,		/* _JMP_TBL, _SEGOFF16 */
	0, 0, 0		/* _GLOB_DAT, JMP_SLOT, _RELATIVE */
};
static int reloc_target_size[] = {
	0, 1, 2,	/* RELOC_8, _16, _32 */
	0, 1, 2, 2, 2,	/* DISP8, DISP16, DISP32, WDISP30, WDISP22 */
	2, 2,		/* HI22, _22 */
	2, 2,		/* RELOC_13, _LO10 */
	2, 2,		/* _SFA_BASE, _SFA_OFF13 */
	2, 2, 2,	/* _BASE10, _BASE13, _BASE22 */
	2, 2,		/* _PC10, _PC22 */
	2, 0,		/* _JMP_TBL, _SEGOFF16 */
	2, 0, 2		/* _GLOB_DAT, JMP_SLOT, _RELATIVE */
};
static int reloc_target_bitsize[] = {
	8, 16, 32,	/* RELOC_8, _16, _32 */
	8, 16, 32, 30, 22,	/* DISP8, DISP16, DISP32, WDISP30, WDISP22 */
	22, 22,		/* HI22, _22 */
	13, 10,		/* RELOC_13, _LO10 */
	32, 32,		/* _SFA_BASE, _SFA_OFF13 */
	10, 13, 22,	/* _BASE10, _BASE13, _BASE22 */
	10, 22,		/* _PC10, _PC22 */
	30, 0,		/* _JMP_TBL, _SEGOFF16 */
	32, 0, 22	/* _GLOB_DAT, JMP_SLOT, _RELATIVE */
};

static __inline void
iflush(jmpslot_t *sp)
{
/* for a CROSS_LINKER, no rtld, so iflush is a nop, which is fortunate */
#ifndef CROSS_LINKER
	__asm __volatile("iflush %0+0" : : "r" (sp));
	__asm __volatile("iflush %0+4" : : "r" (sp));
	__asm __volatile("iflush %0+8" : : "r" (sp));
#endif
}

/*
 * Get relocation addend corresponding to relocation record RP
 * ADDR unused by SPARC impl.
 */
long
md_get_addend(struct relocation_info *r, unsigned char *addr)
{
	return r->r_addend;
}

void
md_relocate(struct relocation_info *r, long relocation, unsigned char *addr,
	    int relocatable_output)
{
	unsigned long	mask;

	if (relocatable_output) {
		/*
		 * Store relocation where the next link-edit run
		 * will look for it.
		 */
		r->r_addend = relocation;
		return;
	}

	relocation >>= RELOC_VALUE_RIGHTSHIFT(r);

	/* Unshifted mask for relocation */
	mask = 1 << RELOC_TARGET_BITSIZE(r) - 1;
	mask |= mask - 1;
	relocation &= mask;

	/* Shift everything up to where it's going to be used */
	relocation <<= RELOC_TARGET_BITPOS(r);
	mask <<= RELOC_TARGET_BITPOS(r);

#define RELOCATE(type)					\
	{						\
		type ad;				\
		(void)memcpy(&ad, addr, sizeof(ad));	\
		if (RELOC_MEMORY_ADD_P(r))		\
			relocation += (mask & ad);	\
		ad &= ~mask;				\
		ad |= relocation;			\
		(void)memcpy(addr, &ad, sizeof(ad));	\
	}

	switch (RELOC_TARGET_SIZE(r)) {
	case 0:
		RELOCATE(u_char)
		break;

	case 1:
		RELOCATE(u_short)
		break;

	case 2:
		RELOCATE(u_long)
		break;
	default:
		errx(1, "Unimplemented relocation field length: %d",
			RELOC_TARGET_SIZE(r));
	}
}

#ifndef RTLD
/*
 * Machine dependent part of claim_rrs_reloc().
 * On the Sparc the relocation offsets are stored in the r_addend member.
 */
int
md_make_reloc(struct relocation_info *rp, struct relocation_info *r, int type)
{
	r->r_type = rp->r_type;
	r->r_addend = rp->r_addend;

#if 1
	/*
	 * This wouldn't be strictly necessary - we could record the
	 * relocation value "in situ" in stead of in the r_addend field -
	 * but we are being Sun compatible here. Besides, Sun's ld.so
	 * has a bug that prevents it from handling this alternate method.
	 *
	 * IT WOULD BE REALLY NICE TO HAVE CONSISTENCY THROUGHOUT THE ENTIRE
	 * RELOCATION PROCESS, ie. using `r_addend' for storing all partially
	 * completed relocations, in stead of mixing them in both relocation
	 * records and in the segment data.
	 */
	if (RELOC_PCREL_P(rp))
		r->r_addend -= pc_relocation;
#endif

	return 1;
}
#endif

/*
 * Set up a transfer from jmpslot at OFFSET (relative to the PLT table)
 * to the binder slot (which is at offset 0 of the PLT).
 */
void
md_make_jmpslot(jmpslot_t *sp, long offset, long index)
{
	u_long	fudge = (u_long) -(sizeof(sp->opcode1) + offset);
	sp->opcode1 = SAVE;
	/* The following is a RELOC_WDISP30 relocation */
	sp->opcode2 = CALL | ((fudge >> 2) & 0x3fffffff);
	sp->reloc_index = NOP | index;
	iflush(sp);
}

/*
 * Set up a "direct" transfer (ie. not through the run-time binder) from
 * jmpslot at OFFSET to ADDR. Used by `ld' when the SYMBOLIC flag is on,
 * and by `ld.so' after resolving the symbol.
 * On the i386, we use the JMP instruction which is PC relative, so no
 * further RRS relocations will be necessary for such a jmpslot.
 *
 * OFFSET unused on Sparc.
 */
void
md_fix_jmpslot(jmpslot_t *sp, long offset, u_long addr)
{
	/*
	 * Here comes a RELOC_{LO10,HI22} relocation pair
	 * The resulting code is:
	 *	sethi	%hi(addr), %g1
	 *	jmp	%g1+%lo(addr)
	 *	nop	! delay slot
	 */
	sp->opcode1 = SETHI | ((addr >> 10) & 0x003fffff);
	sp->opcode2 = JMP | (addr & 0x000003ff);
	sp->reloc_index = NOP;
	iflush(sp);
}

/*
 * Update the relocation record for a jmpslot.
 */
void
md_make_jmpreloc(struct relocation_info *rp, struct relocation_info *r,
		 int type)
{
	if (type & RELTYPE_RELATIVE)
		r->r_type = RELOC_RELATIVE;
	else
		r->r_type = RELOC_JMP_SLOT;

	r->r_addend = rp->r_addend;
}

/*
 * Set relocation type for a GOT RRS relocation.
 */
void
md_make_gotreloc(struct relocation_info *rp, struct relocation_info *r,
		 int type)
{
	/*
	 * GOT value resolved (symbolic or entry point): R_32
	 * GOT not resolved: GLOB_DAT
	 *
	 * NOTE: I don't think it makes a difference.
	 */
	if (type & RELTYPE_RELATIVE)
		r->r_type = RELOC_32;
	else
		r->r_type = RELOC_GLOB_DAT;

	r->r_addend = 0;
}

/*
 * Set relocation type for a RRS copy operation.
 */
void
md_make_cpyreloc(struct relocation_info *rp, struct relocation_info *r)
{
	r->r_type = RELOC_COPY_DAT;
	r->r_addend = 0;
}

void
md_set_breakpoint(long where, long *savep)
{
	*savep = *(long *)where;
	*(long *)where = TRAP;
}

#ifndef RTLD
/*
 * Initialize (output) exec header such that useful values are
 * obtained from subsequent N_*() macro evaluations.
 */
void
md_init_header(struct exec *hp, int magic, int flags)
{
#if defined(__NetBSD__) || defined(__OpenBSD__)
	N_SETMAGIC((*hp), magic, MID_MACHINE, flags);

	/* TEXT_START depends on the value of outheader.a_entry.  */
	if (!(link_mode & SHAREABLE)) /*WAS: if (entry_symbol) */
		hp->a_entry = PAGSIZ;
#else
	hp->a_magic = magic;
	hp->a_machtype = M_SPARC;
	hp->a_toolversion = 1;
	hp->a_dynamic = ((flags) & EX_DYNAMIC);

	/* SunOS 4.1 N_TXTADDR depends on the value of outheader.a_entry.  */
	if (!(link_mode & SHAREABLE)) /*WAS: if (entry_symbol) */
		hp->a_entry = N_PAGSIZ(*hp);
#endif
}

/*
 * Check for acceptable foreign machine Ids
 */
int
md_midcompat(struct exec *hp)
{
#if defined(__NetBSD__) || defined(__OpenBSD__)
#define SUN_M_SPARC	3
	return (((md_swap_long(hp->a_midmag)&0x00ff0000) >> 16) == SUN_M_SPARC);
#else
	return hp->a_machtype == M_SPARC;
#endif
}
#endif /* RTLD */

#ifdef NEED_SWAP
/*
 * Byte swap routines for cross-linking.
 */

void
md_swapin_exec_hdr(struct exec *h)
{
	int skip = 0;

	if (!N_BADMAG(*h))
		skip = 1;

	swap_longs((long *)h + skip, sizeof(*h)/sizeof(long) - skip);
}

void
md_swapout_exec_hdr(struct exec *h)
{
	/* NetBSD/OpenBSD: Always leave magic alone */
	int skip = 1;
#if 0
	if (N_GETMAGIC(*h) == OMAGIC)
		skip = 0;
#endif

	swap_longs((long *)h + skip, sizeof(*h)/sizeof(long) - skip);
}

void 
md_swapin_reloc(struct relocation_info *r, int n)
{
	int bits;

	for (; n; n--, r++) {
		r->r_address = md_swap_long(r->r_address);
		bits = md_swap_long(((int *)r)[1]);
		r->r_symbolnum = (bits>>8) & 0x00ffffff ;
		r->r_extern = (bits>> 7) & 1;
		r->r_type = bits & 31;
		r->r_addend = md_swap_long(r->r_addend);
	}
}

void 
md_swapout_reloc(struct relocation_info *r, int n)
{
	int bits;

	for (; n; n--, r++) {
		r->r_address = md_swap_long(r->r_address);
		bits = (r->r_symbolnum & 0x00ffffff) << 8;
		bits |= (r->r_extern & 1)<< 7;
		bits |= (r->r_type & 31);
		((int *)r)[1] = md_swap_long(bits);
		r->r_addend = md_swap_long(r->r_addend);
	}
}

void
md_swapout_jmpslot(jmpslot_t *j, int n)
{
	for (; n; n--, j++) {
		j->opcode1 = md_swap_long(j->opcode1);
		j->opcode2 = md_swap_long(j->opcode2);
		j->reloc_index = md_swap_long(j->reloc_index);
	}
}

#endif

@


1.10
log
@convert functions from K&R style to prototype style.
Function arg types have not yet been fixed.  OK fgs@@, espie@@
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.c,v 1.9 2002/07/15 21:05:57 marc Exp $*/
@


1.9
log
@
space to tab cleanup.   Nothing but whitespace changes in this commit.
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.c,v 1.8 2002/07/10 17:28:16 marc Exp $*/
d92 1
a92 2
iflush(sp)
	jmpslot_t		*sp;
d107 1
a107 3
md_get_addend(r, addr)
	struct relocation_info	*r;
	unsigned char		*addr;
d113 2
a114 5
md_relocate(r, relocation, addr, relocatable_output)
	struct relocation_info	*r;
	long			relocation;
	unsigned char		*addr;
	int			relocatable_output;
d173 1
a173 3
md_make_reloc(rp, r, type)
	struct relocation_info	*rp, *r;
	int			type;
d203 1
a203 4
md_make_jmpslot(sp, offset, index)
	jmpslot_t		*sp;
	long			offset;
	long			index;
d223 1
a223 4
md_fix_jmpslot(sp, offset, addr)
	jmpslot_t	*sp;
	long		offset;
	u_long		addr;
d242 2
a243 3
md_make_jmpreloc(rp, r, type)
	struct relocation_info	*rp, *r;
	int			type;
d257 2
a258 3
md_make_gotreloc(rp, r, type)
	struct relocation_info	*rp, *r;
	int			type;
d278 1
a278 2
md_make_cpyreloc(rp, r)
	struct relocation_info	*rp, *r;
d285 1
a285 3
md_set_breakpoint(where, savep)
	long	where;
	long	*savep;
d297 1
a297 3
md_init_header(hp, magic, flags)
	struct exec	*hp;
	int		magic, flags;
d321 1
a321 2
md_midcompat(hp)
	struct exec *hp;
d338 1
a338 2
md_swapin_exec_hdr(h)
struct exec *h;
d349 1
a349 2
md_swapout_exec_hdr(h)
struct exec *h;
d362 1
a362 3
md_swapin_reloc(r, n)
struct relocation_info *r;
int n;
d377 1
a377 3
md_swapout_reloc(r, n)
struct relocation_info *r;
int n;
d392 1
a392 3
md_swapout_jmpslot(j, n)
jmpslot_t	*j;
int		n;
@


1.8
log
@
First of some clean-up commits.  This one only removes use of
register variables.   clean-up concept ok deraadt@@
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.c,v 1.7 1999/05/10 16:20:47 espie Exp $*/
d16 1
a16 1
 *      This product includes software developed by Paul Kranenburg.
@


1.7
log
@cross-ld for sparc: iflush as nop, since it won't compile on non-sparc,
and is only needed for rtld anyway.

and missing md_swap routines as well.
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.c,v 1.6 1998/03/26 19:47:33 niklas Exp $*/
d122 1
a122 1
	register unsigned long	mask;
@


1.6
log
@RCS id cleanup
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.c,v 1.5 1997/11/05 10:32:52 deraadt Exp $*/
d95 2
d100 1
d353 80
@


1.5
log
@Handle relocation of misaligned symbols. Handle all three cases by the same
macro for clarity; pk
@
text
@d1 1
a30 1
 *	$Id: md.c,v 1.4 1996/08/22 01:24:21 deraadt Exp $
@


1.4
log
@__OpenBSD__
@
text
@d30 1
a30 1
 *	$Id: md.c,v 1.3 1995/12/30 08:13:58 deraadt Exp $
d141 11
d154 1
a154 4
		if (RELOC_MEMORY_ADD_P(r))
			relocation += (mask & *(u_char *) (addr));
		*(u_char *) (addr) &= ~mask;
		*(u_char *) (addr) |= relocation;
d158 1
a158 4
		if (RELOC_MEMORY_ADD_P(r))
			relocation += (mask & *(u_short *) (addr));
		*(u_short *) (addr) &= ~mask;
		*(u_short *) (addr) |= relocation;
d162 1
a162 4
		if (RELOC_MEMORY_ADD_P(r))
			relocation += (mask & *(u_long *) (addr));
		*(u_long *) (addr) &= ~mask;
		*(u_long *) (addr) |= relocation;
@


1.3
log
@from netbsd:
Simplify update of r_addend field in relocation record if `-r' is on.
The old quirky code did strange things.
@
text
@d30 1
a30 1
 *	$Id: md.c,v 1.12 1995/12/28 18:05:10 pk Exp $
d315 1
a315 1
#ifdef __NetBSD__
d340 1
a340 1
#ifdef __NetBSD__
@


1.2
log
@from netbsd; add cache flushing
@
text
@d30 1
a30 1
 *	$Id: md.c,v 1.11 1995/11/28 19:29:45 pk Exp $
d106 2
a107 2
struct relocation_info	*r;
unsigned char		*addr;
d114 4
a117 4
struct relocation_info	*r;
long			relocation;
unsigned char		*addr;
int			relocatable_output;
a120 1
#ifndef RTLD
d123 2
a124 4
		 * Non-PC relative relocations which are absolute or
		 * which have become non-external now have fixed
		 * relocations.  Set the ADD_EXTRA of this relocation
		 * to be the relocation we have now determined.
d126 1
a126 11
		if (!RELOC_PCREL_P(r)) {
			if ((int) r->r_type <= RELOC_32
					    || RELOC_EXTERN_P(r) == 0)
				RELOC_ADD_EXTRA(r) = relocation;
		} else if (RELOC_EXTERN_P(r))
			/*
			 * External PC-relative relocations continue
			 * to move around; update their relocations
			 * by the amount they have moved so far.
			 */
			RELOC_ADD_EXTRA(r) -= pc_relocation;
a128 1
#endif
d175 2
a176 2
struct relocation_info	*rp, *r;
int			type;
d207 3
a209 3
jmpslot_t		*sp;
long			offset;
long			index;
d230 3
a232 3
jmpslot_t	*sp;
long		offset;
u_long		addr;
d252 2
a253 2
struct relocation_info	*rp, *r;
int			type;
d268 2
a269 2
struct relocation_info	*rp, *r;
int			type;
d290 1
a290 1
struct relocation_info	*rp, *r;
d298 2
a299 2
long	where;
long	*savep;
d312 2
a313 2
struct exec	*hp;
int		magic, flags;
d315 1
a315 1
#ifdef NetBSD
d338 1
a338 1
struct exec *hp;
d340 1
a340 1
#ifdef NetBSD
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *	$Id: md.c,v 1.10 1994/06/10 15:17:34 pk Exp $
d91 8
d230 1
d258 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
