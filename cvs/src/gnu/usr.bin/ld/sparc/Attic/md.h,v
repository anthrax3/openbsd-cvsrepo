head	1.9;
access;
symbols
	OPENBSD_5_3:1.8.0.44
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.42
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.40
	OPENBSD_5_0:1.8.0.38
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.36
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.34
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.30
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.32
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.28
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.26
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.24
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.22
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.20
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.18
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.16
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.14
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.12
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.6.0.10
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2013.07.05.21.31.47;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2002.07.17.20.33.29;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.15.21.05.57;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.01.21.01.42;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	99.05.24.23.22.02;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	99.05.10.16.20.47;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	98.03.26.19.47.35;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.09.30.22.29.31;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.40.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.40.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/* *	$OpenBSD: md.h,v 1.8 2002/07/17 20:33:29 marc Exp $*/
/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * SPARC machine dependent definitions
 */

#if defined(CROSS_LINKER)

#include <sys/endian.h>
#if BYTE_ORDER != BIG_ENDIAN 
#define NEED_SWAP
#endif

#undef __LDPGSZ
#undef ELF_TARG_DATA
#undef ELF_TARG_MACH
#undef relocation_info
#undef MID_MACHINE
#define MID_MACHINE MID_SPARC
#include <sparc/exec.h>
#endif

#define	MAX_ALIGNMENT	(sizeof (double))

#if defined(__NetBSD__) || defined(__OpenBSD__)
#define PAGSIZ			__LDPGSZ

#define N_SET_FLAG(ex,f)	N_SETMAGIC(ex,N_GETMAGIC(ex), \
					MID_MACHINE, N_GETFLAG(ex)|(f))
#define N_IS_DYNAMIC(ex)	((N_GETFLAG(ex) & EX_DYNAMIC))

/*
 * Should be handled by a.out.h ?
 */
#define N_ADJUST(ex)		(((ex).a_entry < PAGSIZ) ? -PAGSIZ : 0)
#define TEXT_START(ex)		(N_TXTADDR(ex) + N_ADJUST(ex))
#define DATA_START(ex)		(N_DATADDR(ex) + N_ADJUST(ex))

#else

/* Get the SunOS a.out and relocation nomenclature */
#define EX_DYNAMIC		1

#define N_IS_DYNAMIC(ex)	((ex).a_dynamic)

#define N_SET_FLAG(ex, f) {			\
	(ex).a_dynamic = ((f) & EX_DYNAMIC);	\
}

#undef  relocation_info
#define relocation_info			reloc_info_sparc
#define r_symbolnum			r_index
#endif /* __NetBSD__ || __OpenBSD__ */

#define N_BADMID(ex) \
	(N_GETMID(ex) != 0 && N_GETMID(ex) != MID_MACHINE && \
						!md_midcompat(&(ex)))

/* Sparc (Sun 4) macros */
#define RELOC_ADDRESS(r)		((r)->r_address)
#define RELOC_EXTERN_P(r)		((r)->r_extern)
#define RELOC_TYPE(r)			((r)->r_symbolnum)
#define RELOC_SYMBOL(r)			((r)->r_symbolnum)
#define RELOC_MEMORY_SUB_P(r)		0
#ifdef RTLD
/* XXX - consider this making SUN_COMPAT --> repercussions on rrs.c */
#define RELOC_MEMORY_ADD_P(r)		1
#else
#define RELOC_MEMORY_ADD_P(r)		0
#endif
#define RELOC_ADD_EXTRA(r)		((r)->r_addend)
#define RELOC_PCREL_P(r) \
	(((r)->r_type >= RELOC_DISP8 && (r)->r_type <= RELOC_WDISP22) \
	 || ((r)->r_type == RELOC_PC10 || (r)->r_type == RELOC_PC22)  \
	 || (r)->r_type == RELOC_JMP_TBL)
#define RELOC_VALUE_RIGHTSHIFT(r)	(reloc_target_rightshift[(r)->r_type])
#define RELOC_TARGET_SIZE(r)		(reloc_target_size[(r)->r_type])
#define RELOC_TARGET_BITPOS(r)		0
#define RELOC_TARGET_BITSIZE(r)		(reloc_target_bitsize[(r)->r_type])

#define RELOC_JMPTAB_P(r)		((r)->r_type == RELOC_JMP_TBL)

#define RELOC_BASEREL_P(r) \
	((r)->r_type >= RELOC_BASE10 && (r)->r_type <= RELOC_BASE22)

#define RELOC_RELATIVE_P(r)		((r)->r_type == RELOC_RELATIVE)
#define RELOC_COPY_DAT (RELOC_RELATIVE+1)	/*XXX*/
#define RELOC_COPY_P(r)			((r)->r_type == RELOC_COPY_DAT)
#define RELOC_LAZY_P(r)			((r)->r_type == RELOC_JMP_SLOT)

#define RELOC_STATICS_THROUGH_GOT_P(r)	(1)
#define JMPSLOT_NEEDS_RELOC		(1)

/*
 * Define the range of usable Global Offset Table offsets
 * when using sparc 13 bit relocation types (-4096 - 4092);
 * this is the case if the object files are compiles with `-fpic'.
 * IF a "large" model is used (i.e. `-fPIC'), pairs of
 * <RELOC_BASE10,RELOC_BASE22> relocations are used which establish
 * 32-bit addressability of the GOT table.
 */
#define MAX_GOTOFF(t)		((t)==PIC_TYPE_SMALL?4092:LONG_MAX)
#define MIN_GOTOFF(t)		((t)==PIC_TYPE_SMALL?-4096:LONG_MIN)

#define RELOC_PIC_TYPE(r) ( \
	((r)->r_type == RELOC_BASE10 || (r)->r_type == RELOC_BASE22) \
		? PIC_TYPE_LARGE \
		: ((r)->r_type==RELOC_BASE13 ? \
			PIC_TYPE_SMALL : \
			PIC_TYPE_NONE) )

#define ALLOW_SPARC_MIX
#define CHECK_GOT_RELOC(r) \
	((r)->r_type == RELOC_PC10 || (r)->r_type == RELOC_PC22)

#define md_got_reloc(r)			(-(r)->r_address)

#define RELOC_INIT_SEGMENT_RELOC(r)	((r)->r_type = RELOC_32)

#ifdef SUN_COMPAT
/*
 * Sun plays games with `r_addend'
 */
#define md_get_rt_segment_addend(r,a)	(0)
#endif

/* Width of a Global Offset Table entry */
typedef long	got_t;

typedef struct jmpslot {
	u_long	opcode1;
	u_long	opcode2;
	u_long	reloc_index;
#define JMPSLOT_RELOC_MASK		(0x003fffff)	/* 22 bits */
} jmpslot_t;

#define SAVE	0x9de3bfa0	/* Build stack frame (opcode1) */
#define SETHI	0x03000000	/* %hi(addr) -> %g1 (opcode1) */
#define CALL	0x40000000	/* Call instruction (opcode2) */
#define JMP	0x81c06000	/* Jump %g1 instruction (opcode2) */
#define NOP	0x01000000	/* Delay slot NOP for (reloc_index) */
#define TRAP	0x91d02001	/* ta 0x1 */


/*
 * Byte swap defs for cross linking
 */

#if !defined(NEED_SWAP)

#define md_swapin_exec_hdr(h)
#define md_swapout_exec_hdr(h)
#define md_swapin_symbols(s,n)
#define md_swapout_symbols(s,n)
#define md_swapin_zsymbols(s,n)
#define md_swapout_zsymbols(s,n)
#define md_swapin_reloc(r,n)
#define md_swapout_reloc(r,n)
#define md_swapin__dynamic(l)
#define md_swapout__dynamic(l)
#define md_swapin_section_dispatch_table(l)
#define md_swapout_section_dispatch_table(l)
#define md_swapin_so_debug(d)
#define md_swapout_so_debug(d)
#define md_swapin_rrs_hash(f,n)
#define md_swapout_rrs_hash(f,n)
#define md_swapin_sod(l,n)
#define md_swapout_sod(l,n)
#define md_swapout_jmpslot(j,n)
#define md_swapout_got(g,n)
#define md_swapin_ranlib_hdr(h,n)
#define md_swapout_ranlib_hdr(h,n)

#endif /* NEED_SWAP */

#ifdef CROSS_LINKER

#ifdef NEED_SWAP

/* Define IO byte swapping routines */

void	md_swapin_exec_hdr(struct exec *);
void	md_swapout_exec_hdr(struct exec *);
void	md_swapin_reloc(struct relocation_info *, int);
void	md_swapout_reloc(struct relocation_info *, int);
void	md_swapout_jmpslot(jmpslot_t *, int);

#define md_swapin_symbols(s,n)			swap_symbols(s,n)
#define md_swapout_symbols(s,n)			swap_symbols(s,n)
#define md_swapin_zsymbols(s,n)			swap_zsymbols(s,n)
#define md_swapout_zsymbols(s,n)		swap_zsymbols(s,n)
#define md_swapin__dynamic(l)			swap__dynamic(l)
#define md_swapout__dynamic(l)			swap__dynamic(l)
#define md_swapin_section_dispatch_table(l)	swap_section_dispatch_table(l)
#define md_swapout_section_dispatch_table(l)	swap_section_dispatch_table(l)
#define md_swapin_so_debug(d)			swap_so_debug(d)
#define md_swapout_so_debug(d)			swap_so_debug(d)
#define md_swapin_rrs_hash(f,n)			swap_rrs_hash(f,n)
#define md_swapout_rrs_hash(f,n)		swap_rrs_hash(f,n)
#define md_swapin_sod(l,n)			swapin_sod(l,n)
#define md_swapout_sod(l,n)			swapout_sod(l,n)
#define md_swapout_got(g,n)			swap_longs((long*)(g),n)
#define md_swapin_ranlib_hdr(h,n)		swap_ranlib_hdr(h,n)
#define md_swapout_ranlib_hdr(h,n)		swap_ranlib_hdr(h,n)

#define md_swap_short(x) ( (((x) >> 8) & 0xff) | (((x) & 0xff) << 8) )

#define md_swap_long(x) ( (((x) >> 24) & 0xff	 ) | (((x) >> 8 ) & 0xff00   ) | \
			(((x) << 8 ) & 0xff0000) | (((x) << 24) & 0xff000000))

#define get_byte(p)	( ((unsigned char *)(p))[0] )

#define get_short(p)	( ( ((unsigned char *)(p))[1] << 8) | \
			  ( ((unsigned char *)(p))[0]	  )   \
			)
#define get_long(p)	( ( ((unsigned char *)(p))[3] << 24) | \
			  ( ((unsigned char *)(p))[2] << 16) | \
			  ( ((unsigned char *)(p))[1] << 8 ) | \
			  ( ((unsigned char *)(p))[0]	   )   \
			)

#define put_byte(p, v)	{ ((unsigned char *)(p))[0] = ((unsigned long)(v)); }

#define put_short(p, v)	{ ((unsigned char *)(p))[1] =			\
				((((unsigned long)(v)) >> 8) & 0xff); 	\
			  ((unsigned char *)(p))[0] =			\
				((((unsigned long)(v))	   ) & 0xff); }

#define put_long(p, v)	{ ((unsigned char *)(p))[3] =			\
				((((unsigned long)(v)) >> 24) & 0xff); 	\
			  ((unsigned char *)(p))[2] =			\
				((((unsigned long)(v)) >> 16) & 0xff); 	\
			  ((unsigned char *)(p))[1] =			\
				((((unsigned long)(v)) >>  8) & 0xff); 	\
			  ((unsigned char *)(p))[0] =			\
				((((unsigned long)(v))	    ) & 0xff); }

#else	/* We need not swap, but must pay attention to alignment: */

#define md_swap_short(x)	(x)
#define md_swap_long(x)		(x)

#define get_byte(p)	( ((unsigned char *)(p))[0] )

#define get_short(p)	( ( ((unsigned char *)(p))[0] << 8) | \
			  ( ((unsigned char *)(p))[1]	  )   \
			)

#define get_long(p)	( ( ((unsigned char *)(p))[0] << 24) | \
			  ( ((unsigned char *)(p))[1] << 16) | \
			  ( ((unsigned char *)(p))[2] << 8 ) | \
			  ( ((unsigned char *)(p))[3]	   )   \
			)


#define put_byte(p, v)	{ ((unsigned char *)(p))[0] = ((unsigned long)(v)); }

#define put_short(p, v)	{ ((unsigned char *)(p))[0] =			\
				((((unsigned long)(v)) >> 8) & 0xff); 	\
			  ((unsigned char *)(p))[1] =			\
				((((unsigned long)(v))	   ) & 0xff); }

#define put_long(p, v)	{ ((unsigned char *)(p))[0] =			\
				((((unsigned long)(v)) >> 24) & 0xff); 	\
			  ((unsigned char *)(p))[1] =			\
				((((unsigned long)(v)) >> 16) & 0xff); 	\
			  ((unsigned char *)(p))[2] =			\
				((((unsigned long)(v)) >>  8) & 0xff); 	\
			  ((unsigned char *)(p))[3] =			\
				((((unsigned long)(v))	    ) & 0xff); }

#endif /* NEED_SWAP */

#else	/* Not a cross linker: use native */

#define md_swap_short(x)		(x)
#define md_swap_long(x)			(x)

#define get_byte(where)			(*(char *)(where))
#define get_short(where)		(*(short *)(where))
#define get_long(where)			(*(long *)(where))

#define put_byte(where,what)		(*(char *)(where) = (what))
#define put_short(where,what)		(*(short *)(where) = (what))
#define put_long(where,what)		(*(long *)(where) = (what))

#endif /* CROSS_LINKER */

@


1.8
log
@un-__P the code.   fgs says "looks ok."
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.h,v 1.7 2002/07/15 21:05:57 marc Exp $*/
@


1.7
log
@
space to tab cleanup.   Nothing but whitespace changes in this commit.
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.h,v 1.6 2000/02/01 21:01:42 espie Exp $*/
d212 5
a216 5
void	md_swapin_exec_hdr __P((struct exec *));
void	md_swapout_exec_hdr __P((struct exec *));
void	md_swapin_reloc __P((struct relocation_info *, int));
void	md_swapout_reloc __P((struct relocation_info *, int));
void	md_swapout_jmpslot __P((jmpslot_t *, int));
@


1.6
log
@Cross-tools fixes:

* Rely on BYTE_ORDER instead of specific values of XHOST to determine
cross-endianness,

* Link necessary cross-includes to the right location,

* Add some necessary stubs for cross-endian sparc and cross-endian m68k.

This does let i386->m68k work, and probably brings i386->sparc most of the
way there...

Approved by mickey@@, niklas@@ is to busy to answer email as usual...
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.h,v 1.5 1999/05/24 23:22:02 espie Exp $*/
d16 1
a16 1
 *      This product includes software developed by Paul Kranenburg.
d81 1
a81 1
#define relocation_info	                reloc_info_sparc
d238 1
a238 1
#define md_swap_long(x) ( (((x) >> 24) & 0xff    ) | (((x) >> 8 ) & 0xff00   ) | \
d244 1
a244 1
			  ( ((unsigned char *)(p))[0]     )   \
d249 1
a249 1
			  ( ((unsigned char *)(p))[0]      )   \
d257 1
a257 1
				((((unsigned long)(v))     ) & 0xff); }
d266 1
a266 1
				((((unsigned long)(v))      ) & 0xff); }
d276 1
a276 1
			  ( ((unsigned char *)(p))[1]     )   \
d282 1
a282 1
			  ( ((unsigned char *)(p))[3]      )   \
d291 1
a291 1
				((((unsigned long)(v))     ) & 0xff); }
d300 1
a300 1
				((((unsigned long)(v))      ) & 0xff); }
@


1.5
log
@This patch lets sparc ld handle pic/PIC relocations mix, by simply forcing
everything to fit into pic mode.

More extensive changes (like tagging relocs with pic/PIC, sorting, and
putting pic nearest the beginning of the GOT) would be needed for full
handling pic relocs with a sizeable number of PIC relocs.
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.h,v 1.4 1999/05/10 16:20:47 espie Exp $*/
d37 4
a40 1
#if defined(CROSS_LINKER) && defined(XHOST) && XHOST==i386
d42 9
@


1.4
log
@cross-ld for sparc: iflush as nop, since it won't compile on non-sparc,
and is only needed for rtld anyway.

and missing md_swap routines as well.
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.h,v 1.3 1998/03/26 19:47:35 niklas Exp $*/
d130 1
@


1.3
log
@RCS id cleanup
@
text
@d1 1
a1 1
/* *	$OpenBSD: md.h,v 1.2 1996/09/30 22:29:31 deraadt Exp $*/
d37 3
@


1.2
log
@openbsd
@
text
@d1 1
a30 1
 *	$Id: md.h,v 1.1.1.1 1995/10/18 08:40:58 deraadt Exp $
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *	$Id: md.h,v 1.12 1995/08/04 21:32:15 pk Exp $
d40 1
a40 1
#ifdef NetBSD
d68 1
a68 1
#endif /* NetBSD */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
