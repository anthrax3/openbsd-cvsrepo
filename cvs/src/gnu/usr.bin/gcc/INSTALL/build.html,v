head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.22
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.20
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.16
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.12
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.14
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.6
	OPENBSD_5_7_BASE:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.10
	OPENBSD_5_6_BASE:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.8
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.4
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.2
	OPENBSD_5_3_BASE:1.1.1.3
	gcc-3_3_6:1.1.1.3
	OPENBSD_5_2:1.1.1.2.0.32
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.30
	OPENBSD_5_0:1.1.1.2.0.28
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.26
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.24
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.20
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.22
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.18
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.16
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.14
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.11.29.12.38.11;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.38.11;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.23.51.24;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.11.28.20.42.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Installing GCC: Building</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name=description content="Installing GCC: Building">
<meta name=generator content="makeinfo 4.2">
<link href="http://www.gnu.org/software/texinfo/" rel=generator-home>
<!--
Copyright &copy; 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
<br><p>
<p>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, the Front-Cover texts being (a) (see below), and
with the Back-Cover Texts being (b) (see below).  A copy of the
license is included in the section entitled "<a href="./gfdl.html">GNU Free Documentation License</a>".

<p>(a) The FSF's Front-Cover Text is:

<p>A GNU Manual

<p>(b) The FSF's Back-Cover Text is:

<p>You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
</head>
<body>
<h1>Installing GCC: Building</h1>
Now that GCC is configured, you are ready to build the compiler and
runtime libraries.

<p>We <strong>highly</strong> recommend that GCC be built using GNU make;
other versions may work, then again they might not. 
GNU make is required for compiling GNAT (the Ada compiler) and the Java
runtime library.

<p>(For example, many broken versions of make will fail if you use the
recommended setup where <var>objdir</var> is different from <var>srcdir</var>. 
Other broken versions may recompile parts of the compiler when
installing the compiler.)

<p>Some commands executed when making the compiler may fail (return a
nonzero status) and be ignored by <code>make</code>.  These failures, which
are often due to files that were not found, are expected, and can safely
be ignored.

<p>It is normal to have compiler warnings when compiling certain files. 
Unless you are a GCC developer, you can generally ignore these warnings
unless they cause compilation to fail.

<p>On certain old systems, defining certain environment variables such as
<code>CC</code> can interfere with the functioning of <code>make</code>.

<p>If you encounter seemingly strange errors when trying to build the
compiler in a directory other than the source directory, it could be
because you have previously configured the compiler in the source
directory.  Make sure you have done all the necessary preparations.

<p>If you build GCC on a BSD system using a directory stored in an old System
V file system, problems may occur in running <code>fixincludes</code> if the
System V file system doesn't support symbolic links.  These problems
result in a failure to fix the declaration of <code>size_t</code> in
<code>sys/types.h</code>.  If you find that <code>size_t</code> is a signed type and
that type mismatches occur, this could be the cause.

<p>The solution is not to use such a directory for building GCC.

<p>When building from CVS or snapshots, or if you modify parser sources,
you need the Bison parser generator installed.  Any version 1.25 or
later should work; older versions may also work.  If you do not modify
parser sources, releases contain the Bison-generated files and you do
not need Bison installed to build them.

<p>When building from CVS or snapshots, or if you modify Texinfo
documentation, you need version 4.2 or later of Texinfo installed if you
want Info documentation to be regenerated.  Releases contain Info
documentation pre-built for the unmodified documentation in the release.

<h3><a name="TOC0"></a>Building a native compiler</h3>

<p>For a native build issue the command <code>make bootstrap</code>.  This
will build the entire GCC system, which includes the following steps:

<ul>
<li>Build host tools necessary to build the compiler such as texinfo, bison,
gperf.

<li>Build target tools for use by the compiler such as binutils (bfd,
binutils, gas, gprof, ld, and opcodes)
if they have been individually linked
or moved into the top level GCC source tree before configuring.

<li>Perform a 3-stage bootstrap of the compiler.

<li>Perform a comparison test of the stage2 and stage3 compilers.

<li>Build runtime libraries using the stage3 compiler from the previous step.

</ul>

<p>If you are short on disk space you might consider <code>make
bootstrap-lean</code> instead.  This is identical to <code>make
bootstrap</code> except that object files from the stage1 and
stage2 of the 3-stage bootstrap of the compiler are deleted as
soon as they are no longer needed.

<p>If you want to save additional space during the bootstrap and in
the final installation as well, you can build the compiler binaries
without debugging information as in the following example.  This will save
roughly 40% of disk space both for the bootstrap and the final installation. 
(Libraries will still contain debugging information.)

<br><pre>     make CFLAGS='-O' LIBCFLAGS='-g -O2' \
       LIBCXXFLAGS='-g -O2 -fno-implicit-templates' bootstrap
</pre>

<p>If you wish to use non-default GCC flags when compiling the stage2 and
stage3 compilers, set <code>BOOT_CFLAGS</code> on the command line when doing
<code>make bootstrap</code>.  Non-default optimization flags are less well
tested here than the default of <code>-g -O2</code>, but should still work. 
In a few cases, you may find that you need to specify special flags such
as <code>-msoft-float</code> here to complete the bootstrap; or, if the
native compiler miscompiles the stage1 compiler, you may need to work
around this, by choosing <code>BOOT_CFLAGS</code> to avoid the parts of the
stage1 compiler that were miscompiled, or by using <code>make
bootstrap4</code> to increase the number of stages of bootstrap.

<p>If you used the flag <code>--enable-languages=<small>...</small></code> to restrict
the compilers to be built, only those you've actually enabled will be
built.  This will of course only build those runtime libraries, for
which the particular compiler has been built.  Please note,
that re-defining <code>LANGUAGES</code> when calling <code>make bootstrap</code>
<strong>does not</strong> work anymore!

<p>If the comparison of stage2 and stage3 fails, this normally indicates
that the stage2 compiler has compiled GCC incorrectly, and is therefore
a potentially serious bug which you should investigate and report.  (On
a few systems, meaningful comparison of object files is impossible; they
always appear "different".  If you encounter this problem, you will
need to disable comparison in the <code>Makefile</code>.)

<h3><a name="TOC1"></a>Building a cross compiler</h3>

<p>We recommend reading the
<a href="http://www.objsw.com/CrossGCC/">crossgcc FAQ</a>
for information about building cross compilers.

<p>When building a cross compiler, it is not generally possible to do a
3-stage bootstrap of the compiler.  This makes for an interesting problem
as parts of GCC can only be built with GCC.

<p>To build a cross compiler, we first recommend building and installing a
native compiler.  You can then use the native GCC compiler to build the
cross compiler.  The installed native compiler needs to be GCC version
2.95 or later.

<p>Assuming you have already installed a native copy of GCC and configured
your cross compiler, issue the command <code>make</code>, which performs the
following steps:

<ul>
<li>Build host tools necessary to build the compiler such as texinfo, bison,
gperf.

<li>Build target tools for use by the compiler such as binutils (bfd,
binutils, gas, gprof, ld, and opcodes)
if they have been individually linked or moved into the top level GCC source
tree before configuring.

<li>Build the compiler (single stage only).

<li>Build runtime libraries using the compiler from the previous step. 
</ul>

<p>Note that if an error occurs in any step the make process will exit.

<h3><a name="TOC2"></a>Building in parallel</h3>

<p>You can use <code>make bootstrap MAKE="make -j 2" -j 2</code>, or just
<code>make -j 2 bootstrap</code> for GNU Make 3.79 and above, instead of
<code>make bootstrap</code> to build GCC in parallel. 
You can also specify a bigger number, and in most cases using a value
greater than the number of processors in your machine will result in
fewer and shorter I/O latency hits, thus improving overall throughput;
this is especially true for slow drives and network filesystems.

<h3><a name="TOC3"></a>Building the Ada compiler</h3>

<p>In order to build GNAT, the Ada compiler, you need a working GNAT
compiler (GNAT version 3.13 or later, or GCC version 3.1 or later),
since the Ada front end is written in Ada (with some
GNAT-specific extensions), and GNU make.

<p>However, you do not need a full installation of GNAT, just the GNAT
binary <code>gnat1</code>, a copy of <code>gnatbind</code>, and a compiler driver
which can deal with Ada input (by invoking the <code>gnat1</code> binary). 
You can specify this compiler driver by setting the <code>ADAC</code>
environment variable at the configure step.  <code>configure</code> can
detect the driver automatically if it has got a common name such as
<code>gcc</code> or <code>gnatgcc</code>.  Of course, you still need a working
C compiler (the compiler driver can be different or not). 
<code>configure</code> does not test whether the GNAT installation works
and has a sufficiently recent version; if too old a GNAT version is
installed, the build will fail unless <code>--enable-languages</code> is
used to disable building the Ada front end.

<p>Additional build tools (such as <code>gnatmake</code>) or a working GNAT
run-time library installation are usually <em>not</em> required.  However,
if you want to bootstrap the compiler using a minimal version of GNAT,
you have to issue the following commands before invoking <code>make
bootstrap</code> (this assumes that you start with an unmodified and consistent
source distribution):

<br><pre>    cd <var>srcdir</var>/gcc/ada
    touch treeprs.ads [es]info.h nmake.ad[bs]
</pre>

<p>At the moment, the GNAT library and several tools for GNAT are not built
by <code>make bootstrap</code>.  You have to invoke
<code>make gnatlib_and_tools</code> in the <code><var>objdir</var>/gcc</code>
subdirectory before proceeding with the next steps.

<p>For example, you can build a native Ada compiler by issuing the
following commands (assuming <code>make</code> is GNU make):

<br><pre>    cd <var>objdir</var>
    <var>srcdir</var>/configure --enable-languages=c,ada
    cd <var>srcdir</var>/gcc/ada
    touch treeprs.ads [es]info.h nmake.ad[bs]
    cd <var>objdir</var>
    make bootstrap
    cd gcc
    make gnatlib_and_tools
    cd ..
</pre>

<p>Currently, when compiling the Ada front end, you cannot use the parallel
build feature described in the previous section.

<hr />
<p>
<a href="./index.html">Return to the GCC Installation page</a>

</body></html>

@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@


1.1.1.2
log
@gcc 3.3.5
@
text
@d1 1
a1 1
   <html lang="en">
d5 3
a7 3
<meta name="description" content="Installing GCC: Building">
<meta name="generator" content="makeinfo 4.5">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home">
d12 1
a12 1
   <p>Permission is granted to copy, distribute and/or modify this document
d19 1
a19 1
   <p>(a) The FSF's Front-Cover Text is:
d21 1
a21 1
   <p>A GNU Manual
d23 1
a23 1
   <p>(b) The FSF's Back-Cover Text is:
d25 1
a25 1
   <p>You have freedom to copy and modify this GNU Manual, like GNU
d30 1
a30 1
<h1 class="settitle">Installing GCC: Building</h1>
d34 1
a34 1
   <p>We <strong>highly</strong> recommend that GCC be built using GNU make;
d39 1
a39 1
   <p>(For example, many broken versions of make will fail if you use the
d44 1
a44 1
   <p>Some commands executed when making the compiler may fail (return a
d49 1
a49 1
   <p>It is normal to have compiler warnings when compiling certain files. 
d53 1
a53 1
   <p>On certain old systems, defining certain environment variables such as
d56 1
a56 1
   <p>If you encounter seemingly strange errors when trying to build the
d61 1
a61 1
   <p>If you build GCC on a BSD system using a directory stored in an old System
d68 1
a68 1
   <p>The solution is not to use such a directory for building GCC.
d70 1
a70 1
   <p>When building from CVS or snapshots, or if you modify parser sources,
d76 1
a76 1
   <p>When building from CVS or snapshots, or if you modify Texinfo
d81 1
a81 1
<h3 class="section"><a name="TOC0"></a>Building a native compiler</h3>
d83 1
a83 1
   <p>For a native build issue the command <code>make bootstrap</code>.  This
d86 1
a86 1
     <ul>
d90 1
a90 1
     <li>Build target tools for use by the compiler such as binutils (bfd,
d95 1
a95 1
     <li>Perform a 3-stage bootstrap of the compiler.
d97 1
a97 1
     <li>Perform a comparison test of the stage2 and stage3 compilers.
d99 1
a99 1
     <li>Build runtime libraries using the stage3 compiler from the previous step.
d101 1
a101 1
   </ul>
d103 1
a103 1
   <p>If you are short on disk space you might consider <code>make
d109 1
a109 1
   <p>If you want to save additional space during the bootstrap and in
d115 3
a117 3
<pre class="example">          make CFLAGS='-O' LIBCFLAGS='-g -O2' \
            LIBCXXFLAGS='-g -O2 -fno-implicit-templates' bootstrap
     </pre>
d119 1
a119 1
   <p>If you wish to use non-default GCC flags when compiling the stage2 and
d130 1
a130 1
   <p>If you used the flag <code>--enable-languages=...</code> to restrict
d137 1
a137 1
   <p>If the comparison of stage2 and stage3 fails, this normally indicates
d144 1
a144 1
<h3 class="section"><a name="TOC1"></a>Building a cross compiler</h3>
d146 1
a146 1
   <p>We recommend reading the
d150 1
a150 1
   <p>When building a cross compiler, it is not generally possible to do a
d154 1
a154 1
   <p>To build a cross compiler, we first recommend building and installing a
d159 1
a159 1
   <p>Assuming you have already installed a native copy of GCC and configured
d163 1
a163 1
     <ul>
d167 1
a167 1
     <li>Build target tools for use by the compiler such as binutils (bfd,
d172 1
a172 1
     <li>Build the compiler (single stage only).
d174 1
a174 1
     <li>Build runtime libraries using the compiler from the previous step. 
d177 1
a177 1
   <p>Note that if an error occurs in any step the make process will exit.
d179 1
a179 1
<h3 class="section"><a name="TOC2"></a>Building in parallel</h3>
d181 1
a181 1
   <p>You can use <code>make bootstrap MAKE="make -j 2" -j 2</code>, or just
d189 1
a189 1
<h3 class="section"><a name="TOC3"></a>Building the Ada compiler</h3>
d191 1
a191 1
   <p>In order to build GNAT, the Ada compiler, you need a working GNAT
d196 1
a196 1
   <p>However, you do not need a full installation of GNAT, just the GNAT
d209 1
a209 1
   <p>Additional build tools (such as <code>gnatmake</code>) or a working GNAT
d216 3
a218 3
<pre class="example">         cd <var>srcdir</var>/gcc/ada
         touch treeprs.ads [es]info.h nmake.ad[bs]
     </pre>
d220 1
a220 1
   <p>At the moment, the GNAT library and several tools for GNAT are not built
d222 1
a222 1
<code>make gnatlib_and_tools</code> in the <code></code><var>objdir</var><code>/gcc</code>
d225 1
a225 1
   <p>For example, you can build a native Ada compiler by issuing the
d228 10
a237 10
<pre class="example">         cd <var>objdir</var>
         <var>srcdir</var>/configure --enable-languages=c,ada
         cd <var>srcdir</var>/gcc/ada
         touch treeprs.ads [es]info.h nmake.ad[bs]
         cd <var>objdir</var>
         make bootstrap
         cd gcc
         make gnatlib_and_tools
         cd ..
     </pre>
d239 1
a239 1
   <p>Currently, when compiling the Ada front end, you cannot use the parallel
d242 1
a242 1
   <hr />
d246 1
a246 1
   </body></html>
@


1.1.1.3
log
@gcc 3.3.6
@
text
@d1 1
a1 1
<html lang="en">
d6 2
a7 3
<meta name="generator" content="makeinfo 4.7">
<link title="Top" rel="top" href="#Top">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
d9 1
a9 1
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
d11 2
a12 2

   Permission is granted to copy, distribute and/or modify this document
d17 1
a17 1
license is included in the section entitled "GNU Free Documentation License".
d19 1
a19 1
(a) The FSF's Front-Cover Text is:
d21 1
a21 1
     A GNU Manual
d23 1
a23 1
(b) The FSF's Back-Cover Text is:
d25 1
a25 1
     You have freedom to copy and modify this GNU Manual, like GNU
a27 11
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc { font-variant:small-caps }
  span.roman { font-family: serif; font-weight: normal; } 
--></style>
a30 1
<a name="index-Installing-GCC_003a-Building-1"></a>
d45 1
a45 1
nonzero status) and be ignored by <span class="command">make</span>.  These failures, which
d54 1
a54 1
<span class="env">CC</span> can interfere with the functioning of <span class="command">make</span>.
d62 1
a62 1
V file system, problems may occur in running <span class="command">fixincludes</span> if the
d65 1
a65 1
<span class="file">sys/types.h</span>.  If you find that <code>size_t</code> is a signed type and
d81 1
a81 1
<h3 class="section"><a name="TOC0"></a>0.1 Building a native compiler</h3>
d83 1
a83 1
<p>For a native build issue the command <span class="samp">make bootstrap</span>.  This
d103 3
a105 3
   <p>If you are short on disk space you might consider <span class="samp">make
bootstrap-lean</span> instead.  This is identical to <span class="samp">make
bootstrap</span> except that object files from the stage1 and
d117 2
a118 1
</pre>
d121 2
a122 2
<span class="samp">make bootstrap</span>.  Non-default optimization flags are less well
tested here than the default of <span class="samp">-g -O2</span>, but should still work. 
d124 1
a124 1
as <span class="option">-msoft-float</span> here to complete the bootstrap; or, if the
d127 2
a128 2
stage1 compiler that were miscompiled, or by using <span class="samp">make
bootstrap4</span> to increase the number of stages of bootstrap.
d130 1
a130 1
   <p>If you used the flag <span class="option">--enable-languages=...</span> to restrict
d134 1
a134 1
that re-defining <span class="env">LANGUAGES</span> when calling <span class="samp">make bootstrap</span>
d141 2
a142 2
always appear &ldquo;different&rdquo;.  If you encounter this problem, you will
need to disable comparison in the <span class="file">Makefile</span>.)
d144 1
a144 1
<h3 class="section"><a name="TOC1"></a>0.2 Building a cross compiler</h3>
d146 1
a146 1
<p>We recommend reading the
d160 1
a160 1
your cross compiler, issue the command <span class="command">make</span>, which performs the
d179 1
a179 1
<h3 class="section"><a name="TOC2"></a>0.3 Building in parallel</h3>
d181 3
a183 3
<p>You can use <span class="samp">make bootstrap MAKE="make -j 2" -j 2</span>, or just
<span class="samp">make -j 2 bootstrap</span> for GNU Make 3.79 and above, instead of
<span class="samp">make bootstrap</span> to build GCC in parallel. 
d189 1
a189 1
<h3 class="section"><a name="TOC3"></a>0.4 Building the Ada compiler</h3>
d191 1
a191 1
<p>In order to build GNAT, the Ada compiler, you need a working GNAT
d197 4
a200 4
binary <span class="file">gnat1</span>, a copy of <span class="file">gnatbind</span>, and a compiler driver
which can deal with Ada input (by invoking the <span class="file">gnat1</span> binary). 
You can specify this compiler driver by setting the <span class="env">ADAC</span>
environment variable at the configure step.  <span class="command">configure</span> can
d202 1
a202 1
<span class="command">gcc</span> or <span class="command">gnatgcc</span>.  Of course, you still need a working
d204 1
a204 1
<span class="command">configure</span> does not test whether the GNAT installation works
d206 1
a206 1
installed, the build will fail unless <span class="option">--enable-languages</span> is
d209 1
a209 1
   <p>Additional build tools (such as <span class="command">gnatmake</span>) or a working GNAT
d212 2
a213 2
you have to issue the following commands before invoking <span class="samp">make
bootstrap</span> (this assumes that you start with an unmodified and consistent
d218 2
a219 1
</pre>
d221 2
a222 2
by <span class="samp">make bootstrap</span>.  You have to invoke
<span class="samp">make gnatlib_and_tools</span> in the <var>objdir</var><span class="file">/gcc</span>
d226 1
a226 1
following commands (assuming <span class="command">make</span> is GNU make):
d237 2
a238 1
</pre>
d242 3
a244 2
   <p><hr />
<p><a href="./index.html">Return to the GCC Installation page</a>
d246 1
a246 9
<!-- ***Testing***************************************************************** -->
<!-- ***Final install*********************************************************** -->
<!-- ***Binaries**************************************************************** -->
<!-- ***Specific**************************************************************** -->
<!-- ***Old documentation****************************************************** -->
<!-- ***GFDL******************************************************************** -->
<!-- *************************************************************************** -->
<!-- Part 6 The End of the Document -->
</body></html>
@


