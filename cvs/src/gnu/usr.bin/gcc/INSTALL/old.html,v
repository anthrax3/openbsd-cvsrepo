head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.18
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.16
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.12
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.14
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.6
	OPENBSD_5_7_BASE:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.10
	OPENBSD_5_6_BASE:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.8
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.4
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.2
	OPENBSD_5_3_BASE:1.1.1.3
	gcc-3_3_6:1.1.1.3
	OPENBSD_5_2:1.1.1.2.0.32
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.30
	OPENBSD_5_0:1.1.1.2.0.28
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.26
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.24
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.20
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.22
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.18
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.16
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.14
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.11.29.12.38.11;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.38.11;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.23.51.24;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.11.28.20.42.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Installing GCC: Old documentation</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name=description content="Installing GCC: Old documentation">
<meta name=generator content="makeinfo 4.2">
<link href="http://www.gnu.org/software/texinfo/" rel=generator-home>
<!--
Copyright &copy; 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
<br><p>
<p>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, the Front-Cover texts being (a) (see below), and
with the Back-Cover Texts being (b) (see below).  A copy of the
license is included in the section entitled "<a href="./gfdl.html">GNU Free Documentation License</a>".

<p>(a) The FSF's Front-Cover Text is:

<p>A GNU Manual

<p>(b) The FSF's Back-Cover Text is:

<p>You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
</head>
<body>
<h1>Installing GCC: Old documentation</h1>
<h1 align="center">Old installation documentation</h1>

<p>Note most of this information is out of date and superseded by the
previous chapters of this manual.  It is provided for historical
reference only, because of a lack of volunteers to merge it into the
main manual.

<p>Here is the procedure for installing GNU CC on a GNU or Unix system. 
See <a href="#VMS%20Install">VMS Install</a>, for VMS systems.

<ol type=1 start=1>
</p><li>If you have chosen a configuration for GNU CC which requires other GNU
tools (such as GAS or the GNU linker) instead of the standard system
tools, install the required tools in the build directory under the names
<code>as</code>, <code>ld</code> or whatever is appropriate.

<p>Alternatively, you can do subsequent compilation using a value of the
<code>PATH</code> environment variable such that the necessary GNU tools come
before the standard system tools.

</p><li>Specify the host, build and target machine configurations.  You do this
when you run the <code>configure</code> script.

<p>The <dfn>build</dfn> machine is the system which you are using, the
<dfn>host</dfn> machine is the system where you want to run the resulting
compiler (normally the build machine), and the <dfn>target</dfn> machine is
the system for which you want the compiler to generate code.

<p>If you are building a compiler to produce code for the machine it runs
on (a native compiler), you normally do not need to specify any operands
to <code>configure</code>; it will try to guess the type of machine you are on
and use that as the build, host and target machines.  So you don't need
to specify a configuration when building a native compiler unless
<code>configure</code> cannot figure out what your configuration is or guesses
wrong.

<p>In those cases, specify the build machine's <dfn>configuration name</dfn>
with the <code>--host</code> option; the host and target will default to be
the same as the host machine.  (If you are building a cross-compiler,
see <a href="#Cross-Compiler">Cross-Compiler</a>.)

<p>Here is an example:

<br><pre>./configure --host=sparc-sun-sunos4.1
</pre>

<p>A configuration name may be canonical or it may be more or less
abbreviated.

<p>A canonical configuration name has three parts, separated by dashes. 
It looks like this: <code><var>cpu</var>-<var>company</var>-<var>system</var></code>. 
(The three parts may themselves contain dashes; <code>configure</code>
can figure out which dashes serve which purpose.)  For example,
<code>m68k-sun-sunos4.1</code> specifies a Sun 3.

<p>You can also replace parts of the configuration by nicknames or aliases. 
For example, <code>sun3</code> stands for <code>m68k-sun</code>, so
<code>sun3-sunos4.1</code> is another way to specify a Sun 3.

<p>You can specify a version number after any of the system types, and some
of the CPU types.  In most cases, the version is irrelevant, and will be
ignored.  So you might as well specify the version if you know it.

<p>See <a href="#Configurations">Configurations</a>, for a list of supported configuration names and
notes on many of the configurations.  You should check the notes in that
section before proceeding any further with the installation of GNU CC.

</ol>

<h2><a name="Configurations"></a>Configurations Supported by GNU CC</h2>

<p>Here are the possible CPU types:

<blockquote>
1750a, a29k, alpha, arm, avr, c<var>n</var>, clipper, dsp16xx, elxsi, fr30, h8300,
hppa1.0, hppa1.1, i370, i386, i486, i586, i686, i786, i860, i960, ip2k, m32r,
m68000, m68k, m6811, m6812, m88k, mcore, mips, mipsel, mips64, mips64el,
mn10200, mn10300, ns32k, pdp11, powerpc, powerpcle, romp, rs6000, sh, sparc,
sparclite, sparc64, v850, vax, we32k. 
</blockquote>

<p>Here are the recognized company names.  As you can see, customary
abbreviations are used rather than the longer official names.

<blockquote>
acorn, alliant, altos, apollo, apple, att, bull,
cbm, convergent, convex, crds, dec, dg, dolphin,
elxsi, encore, harris, hitachi, hp, ibm, intergraph, isi,
mips, motorola, ncr, next, ns, omron, plexus,
sequent, sgi, sony, sun, tti, unicom, wrs. 
</blockquote>

<p>The company name is meaningful only to disambiguate when the rest of
the information supplied is insufficient.  You can omit it, writing
just <code><var>cpu</var>-<var>system</var></code>, if it is not needed.  For example,
<code>vax-ultrix4.2</code> is equivalent to <code>vax-dec-ultrix4.2</code>.

<p>Here is a list of system types:

<blockquote>
386bsd, aix, acis, amigaos, aos, aout, aux, bosx, bsd, clix, coff, ctix, cxux,
dgux, dynix, ebmon, ecoff, elf, esix, freebsd, hms, genix, gnu, linux,
linux-gnu, hiux, hpux, iris, irix, isc, luna, lynxos, mach, minix, msdos, mvs,
netbsd, newsos, nindy, ns, osf, osfrose, ptx, riscix, riscos, rtu, sco, sim,
solaris, sunos, sym, sysv, udi, ultrix, unicos, uniplus, unos, vms, vsta,
vxworks, winnt, xenix. 
</blockquote>

<p>You can omit the system type; then <code>configure</code> guesses the
operating system from the CPU and company.

<p>You can add a version number to the system type; this may or may not
make a difference.  For example, you can write <code>bsd4.3</code> or
<code>bsd4.4</code> to distinguish versions of BSD.  In practice, the version
number is most needed for <code>sysv3</code> and <code>sysv4</code>, which are often
treated differently.

<p><code>linux-gnu</code> is the canonical name for the GNU/Linux target; however
GNU CC will also accept <code>linux</code>.  The version of the kernel in use is
not relevant on these systems.  A suffix such as <code>libc1</code> or <code>aout</code>
distinguishes major versions of the C library; all of the suffixed versions
are obsolete.

<p>If you specify an impossible combination such as <code>i860-dg-vms</code>,
then you may get an error message from <code>configure</code>, or it may
ignore part of the information and do the best it can with the rest. 
<code>configure</code> always prints the canonical name for the alternative
that it used.  GNU CC does not support all possible alternatives.

<p>Often a particular model of machine has a name.  Many machine names are
recognized as aliases for CPU/company combinations.  Thus, the machine
name <code>sun3</code>, mentioned above, is an alias for <code>m68k-sun</code>. 
Sometimes we accept a company name as a machine name, when the name is
popularly used for a particular machine.  Here is a table of the known
machine names:

<blockquote>
3300, 3b1, 3b<var>n</var>, 7300, altos3068, altos,
apollo68, att-7300, balance,
convex-c<var>n</var>, crds, decstation-3100,
decstation, delta, encore,
fx2800, gmicro, hp7<var>nn</var>, hp8<var>nn</var>,
hp9k2<var>nn</var>, hp9k3<var>nn</var>, hp9k7<var>nn</var>,
hp9k8<var>nn</var>, iris4d, iris, isi68,
m3230, magnum, merlin, miniframe,
mmax, news-3600, news800, news, next,
pbd, pc532, pmax, powerpc, powerpcle, ps2, risc-news,
rtpc, sun2, sun386i, sun386, sun3,
sun4, symmetry, tower-32, tower. 
</blockquote>

<p>Remember that a machine name specifies both the cpu type and the company
name. 
If you want to install your own homemade configuration files, you can
use <code>local</code> as the company name to access them.  If you use
configuration <code><var>cpu</var>-local</code>, the configuration name
without the cpu prefix
is used to form the configuration file names.

<p>Thus, if you specify <code>m68k-local</code>, configuration uses
files <code>m68k.md</code>, <code>local.h</code>, <code>m68k.c</code>,
<code>xm-local.h</code>, <code>t-local</code>, and <code>x-local</code>, all in the
directory <code>config/m68k</code>.

<p>Here is a list of configurations that have special treatment or special
things you must know:

<dl>
<dt><code>vax-dec-vms</code>
<dd>See <a href="#VMS%20Install">VMS Install</a>, for details on how to install GNU CC on VMS. 
</dl>

<h2><a name="Cross-Compiler"></a>Building and Installing a Cross-Compiler</h2>

<p>GNU CC can function as a cross-compiler for many machines, but not all.

<ul>
<li>Cross-compilers for the Mips as target using the Mips assembler
currently do not work, because the auxiliary programs
<code>mips-tdump.c</code> and <code>mips-tfile.c</code> can't be compiled on
anything but a Mips.  It does work to cross compile for a Mips
if you use the GNU assembler and linker.

<li>Cross-compilers between machines with different floating point formats
have not all been made to work.  GNU CC now has a floating point
emulator with which these can work, but each target machine description
needs to be updated to take advantage of it.

<li>Cross-compilation between machines of different word sizes is
somewhat problematic and sometimes does not work. 
</ul>

<p>Since GNU CC generates assembler code, you probably need a
cross-assembler that GNU CC can run, in order to produce object files. 
If you want to link on other than the target machine, you need a
cross-linker as well.  You also need header files and libraries suitable
for the target machine that you can install on the host machine.

<h2>Steps of Cross-Compilation</h2>

<p>To compile and run a program using a cross-compiler involves several
steps:

<ul>
<li>Run the cross-compiler on the host machine to produce assembler files
for the target machine.  This requires header files for the target
machine.

<li>Assemble the files produced by the cross-compiler.  You can do this
either with an assembler on the target machine, or with a
cross-assembler on the host machine.

<li>Link those files to make an executable.  You can do this either with a
linker on the target machine, or with a cross-linker on the host
machine.  Whichever machine you use, you need libraries and certain
startup files (typically <code>crt<small>...</small>.o</code>) for the target machine. 
</ul>

<p>It is most convenient to do all of these steps on the same host machine,
since then you can do it all with a single invocation of GNU CC.  This
requires a suitable cross-assembler and cross-linker.  For some targets,
the GNU assembler and linker are available.

<h2>Configuring a Cross-Compiler</h2>

<p>To build GNU CC as a cross-compiler, you start out by running
<code>configure</code>.  Use the <code>--target=<var>target</var></code> to specify the
target type.  If <code>configure</code> was unable to correctly identify the
system you are running on, also specify the <code>--build=<var>build</var></code>
option.  For example, here is how to configure for a cross-compiler that
produces code for an HP 68030 system running BSD on a system that
<code>configure</code> can correctly identify:

<br><pre>./configure --target=m68k-hp-bsd4.3
</pre>

<h2>Tools and Libraries for a Cross-Compiler</h2>

<p>If you have a cross-assembler and cross-linker available, you should
install them now.  Put them in the directory
<code>/usr/local/<var>target</var>/bin</code>.  Here is a table of the tools
you should put in this directory:

<dl>
<dt><code>as</code>
<dd>This should be the cross-assembler.

<br><dt><code>ld</code>
<dd>This should be the cross-linker.

<br><dt><code>ar</code>
<dd>This should be the cross-archiver: a program which can manipulate
archive files (linker libraries) in the target machine's format.

<br><dt><code>ranlib</code>
<dd>This should be a program to construct a symbol table in an archive file. 
</dl>

<p>The installation of GNU CC will find these programs in that directory,
and copy or link them to the proper place to for the cross-compiler to
find them when run later.

<p>The easiest way to provide these files is to build the Binutils package
and GAS.  Configure them with the same <code>--host</code> and <code>--target</code>
options that you use for configuring GNU CC, then build and install
them.  They install their executables automatically into the proper
directory.  Alas, they do not support all the targets that GNU CC
supports.

<p>If you want to install libraries to use with the cross-compiler, such as
a standard C library, put them in the directory
<code>/usr/local/<var>target</var>/lib</code>; installation of GNU CC copies
all the files in that subdirectory into the proper place for GNU CC to
find them and link with them.  Here's an example of copying some
libraries from a target machine:

<br><pre>ftp <var>target-machine</var>
lcd /usr/local/<var>target</var>/lib
cd /lib
get libc.a
cd /usr/lib
get libg.a
get libm.a
quit
</pre>

<p>The precise set of libraries you'll need, and their locations on
the target machine, vary depending on its operating system.

<p>Many targets require "start files" such as <code>crt0.o</code> and
<code>crtn.o</code> which are linked into each executable; these too should be
placed in <code>/usr/local/<var>target</var>/lib</code>.  There may be several
alternatives for <code>crt0.o</code>, for use with profiling or other
compilation options.  Check your target's definition of
<code>STARTFILE_SPEC</code> to find out what start files it uses. 
Here's an example of copying these files from a target machine:

<br><pre>ftp <var>target-machine</var>
lcd /usr/local/<var>target</var>/lib
prompt
cd /lib
mget *crt*.o
cd /usr/lib
mget *crt*.o
quit
</pre>

<h2>Cross-Compilers and Header Files</h2>

<p>If you are cross-compiling a standalone program or a program for an
embedded system, then you may not need any header files except the few
that are part of GNU CC (and those of your program).  However, if you
intend to link your program with a standard C library such as
<code>libc.a</code>, then you probably need to compile with the header files
that go with the library you use.

<p>The GNU C compiler does not come with these files, because (1) they are
system-specific, and (2) they belong in a C library, not in a compiler.

<p>If the GNU C library supports your target machine, then you can get the
header files from there (assuming you actually use the GNU library when
you link your program).

<p>If your target machine comes with a C compiler, it probably comes with
suitable header files also.  If you make these files accessible from the host
machine, the cross-compiler can use them also.

<p>Otherwise, you're on your own in finding header files to use when
cross-compiling.

<p>When you have found suitable header files, you should put them in the
directory <code>/usr/local/<var>target</var>/include</code>, before building the
cross compiler.  Then installation will run fixincludes properly and
install the corrected versions of the header files where the compiler
will use them.

<p>Provide the header files before you build the cross-compiler, because
the build stage actually runs the cross-compiler to produce parts of
<code>libgcc.a</code>.  (These are the parts that <em>can</em> be compiled with
GNU CC.)  Some of them need suitable header files.

<p>Here's an example showing how to copy the header files from a target
machine.  On the target machine, do this:

<br><pre>(cd /usr/include; tar cf - .) &gt; tarfile
</pre>

<p>Then, on the host machine, do this:

<br><pre>ftp <var>target-machine</var>
lcd /usr/local/<var>target</var>/include
get tarfile
quit
tar xf tarfile
</pre>

<h2>Actually Building the Cross-Compiler</h2>

<p>Now you can proceed just as for compiling a single-machine compiler
through the step of building stage 1.

<p>Do not try to build stage 2 for a cross-compiler.  It doesn't work to
rebuild GNU CC as a cross-compiler using the cross-compiler, because
that would produce a program that runs on the target machine, not on the
host.  For example, if you compile a 386-to-68030 cross-compiler with
itself, the result will not be right either for the 386 (because it was
compiled into 68030 code) or for the 68030 (because it was configured
for a 386 as the host).  If you want to compile GNU CC into 68030 code,
whether you compile it on a 68030 or with a cross-compiler on a 386, you
must specify a 68030 as the host when you configure it.

<p>To install the cross-compiler, use <code>make install</code>, as usual.

<h2><a name="VMS%20Install"></a>Installing GNU CC on VMS</h2>

<p>The VMS version of GNU CC is distributed in a backup saveset containing
both source code and precompiled binaries.

<p>To install the <code>gcc</code> command so you can use the compiler easily, in
the same manner as you use the VMS C compiler, you must install the VMS CLD
file for GNU CC as follows:

<ol type=1 start=1>
</p><li>Define the VMS logical names <code>GNU_CC</code> and <code>GNU_CC_INCLUDE</code>
to point to the directories where the GNU CC executables
(<code>gcc-cpp.exe</code>, <code>gcc-cc1.exe</code>, etc.) and the C include files are
kept respectively.  This should be done with the commands:

<br><pre>$ assign /system /translation=concealed -
  disk:[gcc.] gnu_cc
$ assign /system /translation=concealed -
  disk:[gcc.include.] gnu_cc_include
</pre>

<p>with the appropriate disk and directory names.  These commands can be
placed in your system startup file so they will be executed whenever
the machine is rebooted.  You may, if you choose, do this via the
<code>GCC_INSTALL.COM</code> script in the <code>[GCC]</code> directory.

</p><li>Install the <code>GCC</code> command with the command line:

<br><pre>$ set command /table=sys$common:[syslib]dcltables -
  /output=sys$common:[syslib]dcltables gnu_cc:[000000]gcc
$ install replace sys$common:[syslib]dcltables
</pre>

<li>To install the help file, do the following:

<br><pre>$ library/help sys$library:helplib.hlb gcc.hlp
</pre>

<p>Now you can invoke the compiler with a command like <code>gcc /verbose
file.c</code>, which is equivalent to the command <code>gcc -v -c file.c</code> in
Unix.
</ol>

<p>If you wish to use GNU C++ you must first install GNU CC, and then
perform the following steps:

<ol type=1 start=1>
</p><li>Define the VMS logical name <code>GNU_GXX_INCLUDE</code> to point to the
directory where the preprocessor will search for the C++ header files. 
This can be done with the command:

<br><pre>$ assign /system /translation=concealed -
  disk:[gcc.gxx_include.] gnu_gxx_include
</pre>

<p>with the appropriate disk and directory name.  If you are going to be
using a C++ runtime library, this is where its install procedure will install
its header files.

</p><li>Obtain the file <code>gcc-cc1plus.exe</code>, and place this in the same
directory that <code>gcc-cc1.exe</code> is kept.

<p>The GNU C++ compiler can be invoked with a command like <code>gcc /plus
/verbose file.cc</code>, which is equivalent to the command <code>g++ -v -c
file.cc</code> in Unix.
</ol>

<p>We try to put corresponding binaries and sources on the VMS distribution
tape.  But sometimes the binaries will be from an older version than the
sources, because we don't always have time to update them.  (Use the
<code>/version</code> option to determine the version number of the binaries and
compare it with the source file <code>version.c</code> to tell whether this is
so.)  In this case, you should use the binaries you get to recompile the
sources.  If you must recompile, here is how:

<ol type=1 start=1>
</p><li>Execute the command procedure <code>vmsconfig.com</code> to set up the files
<code>tm.h</code>, <code>config.h</code>, <code>aux-output.c</code>, and <code>md.</code>, and
to create files <code>tconfig.h</code> and <code>hconfig.h</code>.  This procedure
also creates several linker option files used by <code>make-cc1.com</code> and
a data file used by <code>make-l2.com</code>.

<br><pre>$ @@vmsconfig.com
</pre>

<li>Setup the logical names and command tables as defined above.  In
addition, define the VMS logical name <code>GNU_BISON</code> to point at the
to the directories where the Bison executable is kept.  This should be
done with the command:

<br><pre>$ assign /system /translation=concealed -
  disk:[bison.] gnu_bison
</pre>

<p>You may, if you choose, use the <code>INSTALL_BISON.COM</code> script in the
<code>[BISON]</code> directory.

</p><li>Install the <code>BISON</code> command with the command line:

<br><pre>$ set command /table=sys$common:[syslib]dcltables -
  /output=sys$common:[syslib]dcltables -
  gnu_bison:[000000]bison
$ install replace sys$common:[syslib]dcltables
</pre>

<li>Type <code>@@make-gcc</code> to recompile everything, or submit the file
<code>make-gcc.com</code> to a batch queue.  If you wish to build the GNU C++
compiler as well as the GNU CC compiler, you must first edit
<code>make-gcc.com</code> and follow the instructions that appear in the
comments.

<li>In order to use GCC, you need a library of functions which GCC compiled code
will call to perform certain tasks, and these functions are defined in the
file <code>libgcc2.c</code>.  To compile this you should use the command procedure
<code>make-l2.com</code>, which will generate the library <code>libgcc2.olb</code>. 
<code>libgcc2.olb</code> should be built using the compiler built from
the same distribution that <code>libgcc2.c</code> came from, and
<code>make-gcc.com</code> will automatically do all of this for you.

<p>To install the library, use the following commands:

<br><pre>$ library gnu_cc:[000000]gcclib/delete=(new,eprintf)
$ library gnu_cc:[000000]gcclib/delete=L_*
$ library libgcc2/extract=*/output=libgcc2.obj
$ library gnu_cc:[000000]gcclib libgcc2.obj
</pre>

<p>The first command simply removes old modules that will be replaced with
modules from <code>libgcc2</code> under different module names.  The modules
<code>new</code> and <code>eprintf</code> may not actually be present in your
<code>gcclib.olb</code>--if the VMS librarian complains about those modules
not being present, simply ignore the message and continue on with the
next command.  The second command removes the modules that came from the
previous version of the library <code>libgcc2.c</code>.

<p>Whenever you update the compiler on your system, you should also update the
library with the above procedure.

</p><li>You may wish to build GCC in such a way that no files are written to the
directory where the source files reside.  An example would be the when
the source files are on a read-only disk.  In these cases, execute the
following DCL commands (substituting your actual path names):

<br><pre>$ assign dua0:[gcc.build_dir.]/translation=concealed, -
         dua1:[gcc.source_dir.]/translation=concealed  gcc_build
$ set default gcc_build:[000000]
</pre>

<p>where the directory <code>dua1:[gcc.source_dir]</code> contains the source
code, and the directory <code>dua0:[gcc.build_dir]</code> is meant to contain
all of the generated object files and executables.  Once you have done
this, you can proceed building GCC as described above.  (Keep in mind
that <code>gcc_build</code> is a rooted logical name, and thus the device
names in each element of the search list must be an actual physical
device name rather than another rooted logical name).

</p><li><strong>If you are building GNU CC with a previous version of GNU CC,
you also should check to see that you have the newest version of the
assembler</strong>.  In particular, GNU CC version 2 treats global constant
variables slightly differently from GNU CC version 1, and GAS version
1.38.1 does not have the patches required to work with GCC version 2. 
If you use GAS 1.38.1, then <code>extern const</code> variables will not have
the read-only bit set, and the linker will generate warning messages
about mismatched psect attributes for these variables.  These warning
messages are merely a nuisance, and can safely be ignored.

<li>If you want to build GNU CC with the VAX C compiler, you will need to
make minor changes in <code>make-cccp.com</code> and <code>make-cc1.com</code>
to choose alternate definitions of <code>CC</code>, <code>CFLAGS</code>, and
<code>LIBS</code>.  See comments in those files.  However, you must
also have a working version of the GNU assembler (GNU as, aka GAS) as
it is used as the back end for GNU CC to produce binary object modules
and is not included in the GNU CC sources.  GAS is also needed to
compile <code>libgcc2</code> in order to build <code>gcclib</code> (see above);
<code>make-l2.com</code> expects to be able to find it operational in
<code>gnu_cc:[000000]gnu-as.exe</code>.

<p>To use GNU CC on VMS, you need the VMS driver programs
<code>gcc.exe</code>, <code>gcc.com</code>, and <code>gcc.cld</code>.  They are
distributed with the VMS binaries (<code>gcc-vms</code>) rather than the
GNU CC sources.  GAS is also included in <code>gcc-vms</code>, as is Bison.

<p>Once you have successfully built GNU CC with VAX C, you should use the
resulting compiler to rebuild itself.  Before doing this, be sure to
restore the <code>CC</code>, <code>CFLAGS</code>, and <code>LIBS</code> definitions in
<code>make-cccp.com</code> and <code>make-cc1.com</code>.  The second generation
compiler will be able to take advantage of many optimizations that must
be suppressed when building with other compilers.
</ol>

<p>Under previous versions of GNU CC, the generated code would occasionally
give strange results when linked with the sharable <code>VAXCRTL</code> library. 
Now this should work.

<p>Even with this version, however, GNU CC itself should not be linked with
the sharable <code>VAXCRTL</code>.  The version of <code>qsort</code> in
<code>VAXCRTL</code> has a bug (known to be present in VMS versions V4.6
through V5.5) which causes the compiler to fail.

<p>The executables are generated by <code>make-cc1.com</code> and
<code>make-cccp.com</code> use the object library version of <code>VAXCRTL</code> in
order to make use of the <code>qsort</code> routine in <code>gcclib.olb</code>.  If
you wish to link the compiler executables with the shareable image
version of <code>VAXCRTL</code>, you should edit the file <code>tm.h</code> (created
by <code>vmsconfig.com</code>) to define the macro <code>QSORT_WORKAROUND</code>.

<p><code>QSORT_WORKAROUND</code> is always defined when GNU CC is compiled with
VAX C, to avoid a problem in case <code>gcclib.olb</code> is not yet
available. 
<hr />
<p>
<a href="./index.html">Return to the GCC Installation page</a>

</body></html>

@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@


1.1.1.2
log
@gcc 3.3.5
@
text
@d1 1
a1 1
   <html lang="en">
d5 3
a7 3
<meta name="description" content="Installing GCC: Old documentation">
<meta name="generator" content="makeinfo 4.5">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home">
d12 1
a12 1
   <p>Permission is granted to copy, distribute and/or modify this document
d19 1
a19 1
   <p>(a) The FSF's Front-Cover Text is:
d21 1
a21 1
   <p>A GNU Manual
d23 1
a23 1
   <p>(b) The FSF's Back-Cover Text is:
d25 1
a25 1
   <p>You have freedom to copy and modify this GNU Manual, like GNU
d30 1
a30 1
<h1 class="settitle">Installing GCC: Old documentation</h1>
d33 1
a33 1
   <p>Note most of this information is out of date and superseded by the
d38 1
a38 1
   <p>Here is the procedure for installing GNU CC on a GNU or Unix system. 
d41 2
a42 2
     <ol type=1 start=1>
<li>If you have chosen a configuration for GNU CC which requires other GNU
d47 1
a47 1
     <p>Alternatively, you can do subsequent compilation using a value of the
d51 1
a51 1
     </p><li>Specify the host, build and target machine configurations.  You do this
d54 1
a54 1
     <p>The <dfn>build</dfn> machine is the system which you are using, the
d59 1
a59 1
     <p>If you are building a compiler to produce code for the machine it runs
d67 1
a67 1
     <p>In those cases, specify the build machine's <dfn>configuration name</dfn>
d72 1
a72 1
     <p>Here is an example:
d74 2
a75 2
     <pre class="smallexample">          ./configure --host=sparc-sun-sunos4.1
          </pre>
d77 1
a77 1
     <p>A configuration name may be canonical or it may be more or less
d80 2
a81 2
     <p>A canonical configuration name has three parts, separated by dashes. 
It looks like this: <code></code><var>cpu</var><code>-</code><var>company</var><code>-</code><var>system</var><code></code>. 
d86 1
a86 1
     <p>You can also replace parts of the configuration by nicknames or aliases. 
d90 1
a90 1
     <p>You can specify a version number after any of the system types, and some
d94 1
a94 1
     <p>See <a href="#Configurations">Configurations</a>, for a list of supported configuration names and
d98 1
a98 1
        </ol>
d100 1
a100 1
   <h2><a name="Configurations"></a>Configurations Supported by GNU CC</h2>
d102 1
a102 1
   <p>Here are the possible CPU types:
d104 1
a104 1
   <blockquote>
d112 1
a112 1
   <p>Here are the recognized company names.  As you can see, customary
d115 1
a115 1
   <blockquote>
d123 1
a123 1
   <p>The company name is meaningful only to disambiguate when the rest of
d125 1
a125 1
just <code></code><var>cpu</var><code>-</code><var>system</var><code></code>, if it is not needed.  For example,
d128 1
a128 1
   <p>Here is a list of system types:
d130 1
a130 1
   <blockquote>
d142 1
a142 1
   <p>You can add a version number to the system type; this may or may not
d148 1
a148 1
   <p><code>linux-gnu</code> is the canonical name for the GNU/Linux target; however
d154 1
a154 1
   <p>If you specify an impossible combination such as <code>i860-dg-vms</code>,
d160 1
a160 1
   <p>Often a particular model of machine has a name.  Many machine names are
d167 1
a167 1
   <blockquote>
d186 1
a186 1
configuration <code></code><var>cpu</var><code>-local</code>, the configuration name
d190 1
a190 1
   <p>Thus, if you specify <code>m68k-local</code>, configuration uses
d195 1
a195 1
   <p>Here is a list of configurations that have special treatment or special
d198 1
a198 1
     <dl>
d200 1
a200 1
     <dd>See <a href="#VMS%20Install">VMS Install</a>, for details on how to install GNU CC on VMS. 
d203 1
a203 1
   <h2><a name="Cross-Compiler"></a>Building and Installing a Cross-Compiler</h2>
d205 1
a205 1
   <p>GNU CC can function as a cross-compiler for many machines, but not all.
d207 1
a207 1
     <ul>
d214 1
a214 1
     <li>Cross-compilers between machines with different floating point formats
d219 1
a219 1
     <li>Cross-compilation between machines of different word sizes is
d223 1
a223 1
   <p>Since GNU CC generates assembler code, you probably need a
d229 1
a229 1
   <h2>Steps of Cross-Compilation</h2>
d231 1
a231 1
   <p>To compile and run a program using a cross-compiler involves several
d234 1
a234 1
     <ul>
d239 1
a239 1
     <li>Assemble the files produced by the cross-compiler.  You can do this
d243 1
a243 1
     <li>Link those files to make an executable.  You can do this either with a
d246 1
a246 1
startup files (typically <code>crt....o</code>) for the target machine. 
d249 1
a249 1
   <p>It is most convenient to do all of these steps on the same host machine,
d254 1
a254 1
   <h2>Configuring a Cross-Compiler</h2>
d256 2
a257 2
   <p>To build GNU CC as a cross-compiler, you start out by running
<code>configure</code>.  Use the <code>--target=</code><var>target</var><code></code> to specify the
d259 1
a259 1
system you are running on, also specify the <code>--build=</code><var>build</var><code></code>
d264 2
a265 2
<pre class="smallexample">     ./configure --target=m68k-hp-bsd4.3
     </pre>
d267 1
a267 1
   <h2>Tools and Libraries for a Cross-Compiler</h2>
d269 1
a269 1
   <p>If you have a cross-assembler and cross-linker available, you should
d271 1
a271 1
<code>/usr/local/</code><var>target</var><code>/bin</code>.  Here is a table of the tools
d274 1
a274 1
     <dl>
d276 1
a276 1
     <dd>This should be the cross-assembler.
d278 2
a279 2
     <br><dt><code>ld</code>
     <dd>This should be the cross-linker.
d281 2
a282 2
     <br><dt><code>ar</code>
     <dd>This should be the cross-archiver: a program which can manipulate
d285 2
a286 2
     <br><dt><code>ranlib</code>
     <dd>This should be a program to construct a symbol table in an archive file. 
d289 1
a289 1
   <p>The installation of GNU CC will find these programs in that directory,
d293 1
a293 1
   <p>The easiest way to provide these files is to build the Binutils package
d300 1
a300 1
   <p>If you want to install libraries to use with the cross-compiler, such as
d302 1
a302 1
<code>/usr/local/</code><var>target</var><code>/lib</code>; installation of GNU CC copies
d307 9
a315 9
<pre class="example">     ftp <var>target-machine</var>
     lcd /usr/local/<var>target</var>/lib
     cd /lib
     get libc.a
     cd /usr/lib
     get libg.a
     get libm.a
     quit
     </pre>
d320 1
a320 1
   <p>Many targets require "start files" such as <code>crt0.o</code> and
d322 1
a322 1
placed in <code>/usr/local/</code><var>target</var><code>/lib</code>.  There may be several
d328 9
a336 9
<pre class="example">     ftp <var>target-machine</var>
     lcd /usr/local/<var>target</var>/lib
     prompt
     cd /lib
     mget *crt*.o
     cd /usr/lib
     mget *crt*.o
     quit
     </pre>
d338 1
a338 1
   <h2>Cross-Compilers and Header Files</h2>
d340 1
a340 1
   <p>If you are cross-compiling a standalone program or a program for an
d347 1
a347 1
   <p>The GNU C compiler does not come with these files, because (1) they are
d350 1
a350 1
   <p>If the GNU C library supports your target machine, then you can get the
d354 1
a354 1
   <p>If your target machine comes with a C compiler, it probably comes with
d358 1
a358 1
   <p>Otherwise, you're on your own in finding header files to use when
d361 2
a362 2
   <p>When you have found suitable header files, you should put them in the
directory <code>/usr/local/</code><var>target</var><code>/include</code>, before building the
d367 1
a367 1
   <p>Provide the header files before you build the cross-compiler, because
d372 1
a372 1
   <p>Here's an example showing how to copy the header files from a target
d375 2
a376 2
<pre class="example">     (cd /usr/include; tar cf - .) &gt; tarfile
     </pre>
d378 1
a378 1
   <p>Then, on the host machine, do this:
d380 6
a385 6
<pre class="example">     ftp <var>target-machine</var>
     lcd /usr/local/<var>target</var>/include
     get tarfile
     quit
     tar xf tarfile
     </pre>
d387 1
a387 1
   <h2>Actually Building the Cross-Compiler</h2>
d389 1
a389 1
   <p>Now you can proceed just as for compiling a single-machine compiler
d392 1
a392 1
   <p>Do not try to build stage 2 for a cross-compiler.  It doesn't work to
d402 1
a402 1
   <p>To install the cross-compiler, use <code>make install</code>, as usual.
d404 1
a404 1
   <h2><a name="VMS%20Install"></a>Installing GNU CC on VMS</h2>
d406 1
a406 1
   <p>The VMS version of GNU CC is distributed in a backup saveset containing
d409 1
a409 1
   <p>To install the <code>gcc</code> command so you can use the compiler easily, in
d413 2
a414 2
     <ol type=1 start=1>
<li>Define the VMS logical names <code>GNU_CC</code> and <code>GNU_CC_INCLUDE</code>
d419 5
a423 5
     <pre class="smallexample">          $ assign /system /translation=concealed -
            disk:[gcc.] gnu_cc
          $ assign /system /translation=concealed -
            disk:[gcc.include.] gnu_cc_include
          </pre>
d425 1
a425 1
     <p>with the appropriate disk and directory names.  These commands can be
d430 1
a430 1
     </p><li>Install the <code>GCC</code> command with the command line:
d432 4
a435 4
     <pre class="smallexample">          $ set command /table=sys$common:[syslib]dcltables -
            /output=sys$common:[syslib]dcltables gnu_cc:[000000]gcc
          $ install replace sys$common:[syslib]dcltables
          </pre>
d437 1
a437 1
     <li>To install the help file, do the following:
d439 2
a440 2
     <pre class="smallexample">          $ library/help sys$library:helplib.hlb gcc.hlp
          </pre>
d442 1
a442 1
     <p>Now you can invoke the compiler with a command like <code>gcc /verbose
d445 1
a445 1
        </ol>
d447 1
a447 1
   <p>If you wish to use GNU C++ you must first install GNU CC, and then
d450 2
a451 2
     <ol type=1 start=1>
<li>Define the VMS logical name <code>GNU_GXX_INCLUDE</code> to point to the
d455 3
a457 3
     <pre class="smallexample">          $ assign /system /translation=concealed -
            disk:[gcc.gxx_include.] gnu_gxx_include
          </pre>
d459 1
a459 1
     <p>with the appropriate disk and directory name.  If you are going to be
d463 1
a463 1
     </p><li>Obtain the file <code>gcc-cc1plus.exe</code>, and place this in the same
d466 1
a466 1
     <p>The GNU C++ compiler can be invoked with a command like <code>gcc /plus
d469 1
a469 1
        </ol>
d471 1
a471 1
   <p>We try to put corresponding binaries and sources on the VMS distribution
d479 2
a480 2
     <ol type=1 start=1>
<li>Execute the command procedure <code>vmsconfig.com</code> to set up the files
d486 2
a487 2
     <pre class="smallexample">          $ @@vmsconfig.com
          </pre>
d489 1
a489 1
     <li>Setup the logical names and command tables as defined above.  In
d494 3
a496 3
     <pre class="smallexample">          $ assign /system /translation=concealed -
            disk:[bison.] gnu_bison
          </pre>
d498 1
a498 1
     <p>You may, if you choose, use the <code>INSTALL_BISON.COM</code> script in the
d501 1
a501 1
     </p><li>Install the <code>BISON</code> command with the command line:
d503 5
a507 5
     <pre class="smallexample">          $ set command /table=sys$common:[syslib]dcltables -
            /output=sys$common:[syslib]dcltables -
            gnu_bison:[000000]bison
          $ install replace sys$common:[syslib]dcltables
          </pre>
d509 1
a509 1
     <li>Type <code>@@make-gcc</code> to recompile everything, or submit the file
d515 1
a515 1
     <li>In order to use GCC, you need a library of functions which GCC compiled code
d523 1
a523 1
     <p>To install the library, use the following commands:
d525 5
a529 5
     <pre class="smallexample">          $ library gnu_cc:[000000]gcclib/delete=(new,eprintf)
          $ library gnu_cc:[000000]gcclib/delete=L_*
          $ library libgcc2/extract=*/output=libgcc2.obj
          $ library gnu_cc:[000000]gcclib libgcc2.obj
          </pre>
d531 1
a531 1
     <p>The first command simply removes old modules that will be replaced with
d539 1
a539 1
     <p>Whenever you update the compiler on your system, you should also update the
d542 1
a542 1
     </p><li>You may wish to build GCC in such a way that no files are written to the
d547 4
a550 4
     <pre class="smallexample">          $ assign dua0:[gcc.build_dir.]/translation=concealed, -
                   dua1:[gcc.source_dir.]/translation=concealed  gcc_build
          $ set default gcc_build:[000000]
          </pre>
d552 1
a552 1
     <p>where the directory <code>dua1:[gcc.source_dir]</code> contains the source
d560 1
a560 1
     </p><li><strong>If you are building GNU CC with a previous version of GNU CC,
d570 1
a570 1
     <li>If you want to build GNU CC with the VAX C compiler, you will need to
d581 1
a581 1
     <p>To use GNU CC on VMS, you need the VMS driver programs
d586 1
a586 1
     <p>Once you have successfully built GNU CC with VAX C, you should use the
d592 1
a592 1
        </ol>
d594 1
a594 1
   <p>Under previous versions of GNU CC, the generated code would occasionally
d598 1
a598 1
   <p>Even with this version, however, GNU CC itself should not be linked with
d603 1
a603 1
   <p>The executables are generated by <code>make-cc1.com</code> and
d610 1
a610 1
   <p><code>QSORT_WORKAROUND</code> is always defined when GNU CC is compiled with
d617 1
a617 1
   </body></html>
@


1.1.1.3
log
@gcc 3.3.6
@
text
@d1 1
a1 1
<html lang="en">
d6 2
a7 3
<meta name="generator" content="makeinfo 4.7">
<link title="Top" rel="top" href="#Top">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
d9 1
a9 1
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
d11 2
a12 2

   Permission is granted to copy, distribute and/or modify this document
d17 1
a17 1
license is included in the section entitled "GNU Free Documentation License".
d19 1
a19 1
(a) The FSF's Front-Cover Text is:
d21 1
a21 1
     A GNU Manual
d23 1
a23 1
(b) The FSF's Back-Cover Text is:
d25 1
a25 1
     You have freedom to copy and modify this GNU Manual, like GNU
a27 11
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc { font-variant:small-caps }
  span.roman { font-family: serif; font-weight: normal; } 
--></style>
d39 1
a39 1
See <a href="#VMS-Install">VMS Install</a>, for VMS systems.
d45 1
a45 1
<span class="file">as</span>, <span class="file">ld</span> or whatever is appropriate.
d51 2
a52 2
     <li>Specify the host, build and target machine configurations.  You do this
when you run the <span class="file">configure</span> script.
d61 1
a61 1
to <span class="file">configure</span>; it will try to guess the type of machine you are on
d64 1
a64 1
<span class="file">configure</span> cannot figure out what your configuration is or guesses
d68 1
a68 1
with the <span class="option">--host</span> option; the host and target will default to be
d70 1
a70 1
see <a href="#Cross_002dCompiler">Cross-Compiler</a>.)
d75 2
a76 1
     </pre>
d81 2
a82 2
It looks like this: <var>cpu</var><span class="samp">-</span><var>company</var><span class="samp">-</span><var>system</var>. 
(The three parts may themselves contain dashes; <span class="file">configure</span>
d84 1
a84 1
<span class="samp">m68k-sun-sunos4.1</span> specifies a Sun 3.
d87 2
a88 2
For example, <span class="samp">sun3</span> stands for <span class="samp">m68k-sun</span>, so
<span class="samp">sun3-sunos4.1</span> is another way to specify a Sun 3.
d100 3
a102 2
   <p><h2><a name="Configurations"></a>Configurations Supported by GNU CC</h2><a name="index-configurations-supported-by-GNU-CC-1"></a>
Here are the possible CPU types:
a104 1
<!-- gmicro, fx80, spur and tahoe omitted since they don't work. -->
d115 1
a115 2
<!-- What should be done about merlin, tek*, dolphin? -->
<blockquote>
d125 2
a126 2
just <var>cpu</var><span class="samp">-</span><var>system</var>, if it is not needed.  For example,
<span class="samp">vax-ultrix4.2</span> is equivalent to <span class="samp">vax-dec-ultrix4.2</span>.
d139 1
a139 1
<p class="noindent">You can omit the system type; then <span class="file">configure</span> guesses the
d143 3
a145 3
make a difference.  For example, you can write <span class="samp">bsd4.3</span> or
<span class="samp">bsd4.4</span> to distinguish versions of BSD.  In practice, the version
number is most needed for <span class="samp">sysv3</span> and <span class="samp">sysv4</span>, which are often
d148 3
a150 3
   <p><span class="samp">linux-gnu</span> is the canonical name for the GNU/Linux target; however
GNU CC will also accept <span class="samp">linux</span>.  The version of the kernel in use is
not relevant on these systems.  A suffix such as <span class="samp">libc1</span> or <span class="samp">aout</span>
d154 2
a155 2
   <p>If you specify an impossible combination such as <span class="samp">i860-dg-vms</span>,
then you may get an error message from <span class="file">configure</span>, or it may
d157 1
a157 1
<span class="file">configure</span> always prints the canonical name for the alternative
d162 1
a162 1
name <span class="samp">sun3</span>, mentioned above, is an alias for <span class="samp">m68k-sun</span>. 
d182 1
a182 1
<p class="noindent">Remember that a machine name specifies both the cpu type and the company
d185 2
a186 2
use <span class="samp">local</span> as the company name to access them.  If you use
configuration <var>cpu</var><span class="samp">-local</span>, the configuration name
d190 4
a193 4
   <p>Thus, if you specify <span class="samp">m68k-local</span>, configuration uses
files <span class="file">m68k.md</span>, <span class="file">local.h</span>, <span class="file">m68k.c</span>,
<span class="file">xm-local.h</span>, <span class="file">t-local</span>, and <span class="file">x-local</span>, all in the
directory <span class="file">config/m68k</span>.
d199 2
a200 1
<dt><span class="samp">vax-dec-vms</span><dd>See <a href="#VMS-Install">VMS Install</a>, for details on how to install GNU CC on VMS. 
d203 3
a205 2
   <p><h2><a name="Cross_002dCompiler"></a>Building and Installing a Cross-Compiler</h2><a name="index-cross_002dcompiler_002c-installation-2"></a>
GNU CC can function as a cross-compiler for many machines, but not all.
d210 1
a210 1
<span class="file">mips-tdump.c</span> and <span class="file">mips-tfile.c</span> can't be compiled on
d229 1
a229 1
   <p><h2>Steps of Cross-Compilation</h2>
d246 1
a246 1
startup files (typically <span class="file">crt....o</span>) for the target machine. 
d254 1
a254 1
   <p><h2>Configuring a Cross-Compiler</h2>
d257 3
a259 3
<span class="file">configure</span>.  Use the <span class="option">--target=</span><var>target</var> to specify the
target type.  If <span class="file">configure</span> was unable to correctly identify the
system you are running on, also specify the <span class="option">--build=</span><var>build</var>
d262 1
a262 1
<span class="file">configure</span> can correctly identify:
d265 3
a267 2
</pre>
   <p><h2>Tools and Libraries for a Cross-Compiler</h2>
d271 1
a271 1
<span class="file">/usr/local/</span><var>target</var><span class="file">/bin</span>.  Here is a table of the tools
d275 2
a276 1
<dt><span class="file">as</span><dd>This should be the cross-assembler.
d278 2
a279 1
     <br><dt><span class="file">ld</span><dd>This should be the cross-linker.
d281 2
a282 1
     <br><dt><span class="file">ar</span><dd>This should be the cross-archiver: a program which can manipulate
d285 2
a286 1
     <br><dt><span class="file">ranlib</span><dd>This should be a program to construct a symbol table in an archive file. 
d294 1
a294 1
and GAS.  Configure them with the same <span class="option">--host</span> and <span class="option">--target</span>
d302 1
a302 1
<span class="file">/usr/local/</span><var>target</var><span class="file">/lib</span>; installation of GNU CC copies
d315 3
a317 2
</pre>
   <p class="noindent">The precise set of libraries you'll need, and their locations on
d320 4
a323 4
   <p><a name="index-start-files-3"></a>Many targets require &ldquo;start files&rdquo; such as <span class="file">crt0.o</span> and
<span class="file">crtn.o</span> which are linked into each executable; these too should be
placed in <span class="file">/usr/local/</span><var>target</var><span class="file">/lib</span>.  There may be several
alternatives for <span class="file">crt0.o</span>, for use with profiling or other
d336 3
a338 2
</pre>
   <p><h2>Cross-Compilers and Header Files</h2>
d344 1
a344 1
<span class="file">libc.a</span>, then you probably need to compile with the header files
d362 1
a362 1
directory <span class="file">/usr/local/</span><var>target</var><span class="file">/include</span>, before building the
d369 1
a369 1
<span class="file">libgcc.a</span>.  (These are the parts that <em>can</em> be compiled with
d376 2
a377 1
</pre>
d385 3
a387 2
</pre>
   <p><h2>Actually Building the Cross-Compiler</h2>
d402 1
a402 1
   <p>To install the cross-compiler, use <span class="samp">make install</span>, as usual.
d404 3
a406 2
   <p><h2><a name="VMS-Install"></a>Installing GNU CC on VMS</h2><a name="index-VMS-installation-4"></a><a name="index-installing-GNU-CC-on-VMS-5"></a>
The VMS version of GNU CC is distributed in a backup saveset containing
d409 1
a409 1
   <p>To install the <span class="file">gcc</span> command so you can use the compiler easily, in
d414 1
a414 1
<li>Define the VMS logical names <span class="samp">GNU_CC</span> and <span class="samp">GNU_CC_INCLUDE</span>
d416 1
a416 1
(<span class="file">gcc-cpp.exe</span>, <span class="file">gcc-cc1.exe</span>, etc.) and the C include files are
d423 3
a425 2
     </pre>
     <p class="noindent">with the appropriate disk and directory names.  These commands can be
d428 1
a428 1
<span class="file">GCC_INSTALL.COM</span> script in the <span class="file">[GCC]</span> directory.
d430 1
a430 1
     <li>Install the <span class="file">GCC</span> command with the command line:
d435 2
a436 1
     </pre>
d440 4
a443 3
     </pre>
     <p class="noindent">Now you can invoke the compiler with a command like <span class="samp">gcc /verbose
file.c</span>, which is equivalent to the command <span class="samp">gcc -v -c file.c</span> in
d451 1
a451 1
<li>Define the VMS logical name <span class="samp">GNU_GXX_INCLUDE</span> to point to the
d457 3
a459 2
     </pre>
     <p class="noindent">with the appropriate disk and directory name.  If you are going to be
d463 2
a464 2
     <li>Obtain the file <span class="file">gcc-cc1plus.exe</span>, and place this in the same
directory that <span class="file">gcc-cc1.exe</span> is kept.
d466 3
a468 3
     <p>The GNU C++ compiler can be invoked with a command like <span class="samp">gcc /plus
/verbose file.cc</span>, which is equivalent to the command <span class="samp">g++ -v -c
file.cc</span> in Unix.
d474 2
a475 2
<span class="samp">/version</span> option to determine the version number of the binaries and
compare it with the source file <span class="file">version.c</span> to tell whether this is
d480 5
a484 5
<li>Execute the command procedure <span class="file">vmsconfig.com</span> to set up the files
<span class="file">tm.h</span>, <span class="file">config.h</span>, <span class="file">aux-output.c</span>, and <span class="file">md.</span>, and
to create files <span class="file">tconfig.h</span> and <span class="file">hconfig.h</span>.  This procedure
also creates several linker option files used by <span class="file">make-cc1.com</span> and
a data file used by <span class="file">make-l2.com</span>.
d487 2
a488 1
     </pre>
d490 1
a490 1
addition, define the VMS logical name <span class="samp">GNU_BISON</span> to point at the
d496 4
a499 3
     </pre>
     <p>You may, if you choose, use the <span class="file">INSTALL_BISON.COM</span> script in the
<span class="file">[BISON]</span> directory.
d501 1
a501 1
     <li>Install the <span class="samp">BISON</span> command with the command line:
d507 4
a510 3
     </pre>
     <li>Type <span class="samp">@@make-gcc</span> to recompile everything, or submit the file
<span class="file">make-gcc.com</span> to a batch queue.  If you wish to build the GNU C++
d512 1
a512 1
<span class="file">make-gcc.com</span> and follow the instructions that appear in the
d517 5
a521 5
file <span class="file">libgcc2.c</span>.  To compile this you should use the command procedure
<span class="file">make-l2.com</span>, which will generate the library <span class="file">libgcc2.olb</span>. 
<span class="file">libgcc2.olb</span> should be built using the compiler built from
the same distribution that <span class="file">libgcc2.c</span> came from, and
<span class="file">make-gcc.com</span> will automatically do all of this for you.
d529 2
a530 1
     </pre>
d532 1
a532 1
modules from <span class="file">libgcc2</span> under different module names.  The modules
d534 1
a534 1
<span class="file">gcclib.olb</span>&mdash;if the VMS librarian complains about those modules
d537 1
a537 1
previous version of the library <span class="file">libgcc2.c</span>.
d542 1
a542 1
     <li>You may wish to build GCC in such a way that no files are written to the
d550 4
a553 3
     </pre>
     <p class="noindent">where the directory <span class="file">dua1:[gcc.source_dir]</span> contains the source
code, and the directory <span class="file">dua0:[gcc.build_dir]</span> is meant to contain
d556 1
a556 1
that <span class="file">gcc_build</span> is a rooted logical name, and thus the device
d560 1
a560 1
     <li><strong>If you are building GNU CC with a previous version of GNU CC,
d571 1
a571 1
make minor changes in <span class="file">make-cccp.com</span> and <span class="file">make-cc1.com</span>
d577 3
a579 3
compile <span class="file">libgcc2</span> in order to build <span class="file">gcclib</span> (see above);
<span class="file">make-l2.com</span> expects to be able to find it operational in
<span class="file">gnu_cc:[000000]gnu-as.exe</span>.
d582 3
a584 3
<span class="file">gcc.exe</span>, <span class="file">gcc.com</span>, and <span class="file">gcc.cld</span>.  They are
distributed with the VMS binaries (<span class="file">gcc-vms</span>) rather than the
GNU CC sources.  GAS is also included in <span class="file">gcc-vms</span>, as is Bison.
d589 1
a589 1
<span class="file">make-cccp.com</span> and <span class="file">make-cc1.com</span>.  The second generation
d595 1
a595 1
give strange results when linked with the sharable <span class="file">VAXCRTL</span> library. 
d599 2
a600 2
the sharable <span class="file">VAXCRTL</span>.  The version of <code>qsort</code> in
<span class="file">VAXCRTL</span> has a bug (known to be present in VMS versions V4.6
d603 3
a605 3
   <p>The executables are generated by <span class="file">make-cc1.com</span> and
<span class="file">make-cccp.com</span> use the object library version of <span class="file">VAXCRTL</span> in
order to make use of the <code>qsort</code> routine in <span class="file">gcclib.olb</span>.  If
d607 2
a608 2
version of <span class="file">VAXCRTL</span>, you should edit the file <span class="file">tm.h</span> (created
by <span class="file">vmsconfig.com</span>) to define the macro <code>QSORT_WORKAROUND</code>.
d611 1
a611 1
VAX C, to avoid a problem in case <span class="file">gcclib.olb</span> is not yet
d614 2
a615 1
<p><a href="./index.html">Return to the GCC Installation page</a>
d617 1
a617 4
<!-- ***GFDL******************************************************************** -->
<!-- *************************************************************************** -->
<!-- Part 6 The End of the Document -->
</body></html>
@


