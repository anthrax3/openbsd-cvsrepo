head	1.4;
access;
symbols
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	FSF_2_8_1:1.1.1.1
	FSF_2_8_0:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.4
date	99.05.26.16.28.35;	author espie;	state dead;
branches;
next	1.3;

1.3
date	98.03.03.21.35.50;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.02.15.07.57.56;	author niklas;	state dead;
branches;
next	1.1;

1.1
date	98.02.14.19.26.43;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.14.19.26.43;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@So long, and thanks for all the bugs.
@
text
@// RTTI support for -*- C++ -*-
// Copyright (C) 1994, 1995, 1996 Free Software Foundation

#ifndef __TYPEINFO__
#define __TYPEINFO__

#include <exception>

extern "C++" {

#if 0
namespace std {
#endif

class type_info {
private:
  // assigning type_info is not supported.  made private.
  type_info& operator= (const type_info&);
  type_info (const type_info&);

protected:
  type_info (const char *n): _name (n) { }

  const char *_name;

public:
  // destructor
  virtual ~type_info ();
    
  bool before (const type_info& arg) const;
  const char* name () const
    { return _name; }
  bool operator== (const type_info& arg) const;
  bool operator!= (const type_info& arg) const;
};

// We can't rely on common symbols being shared between translation units
// under Windows.  Sigh.

#ifndef _WIN32
inline bool type_info::
operator== (const type_info& arg) const
{
  return &arg == this;
}

inline bool type_info::
operator!= (const type_info& arg) const
{
  return &arg != this;
}
#endif

class bad_cast : public exception {
public:
  bad_cast() { }
  virtual ~bad_cast() { }
};

class bad_typeid : public exception {
 public:
  bad_typeid () { }
  virtual ~bad_typeid () { }
};

#if 0
} // namespace std
#endif

} // extern "C++"
#endif
@


1.3
log
@GCC 2.8.0 merge
@
text
@@


1.2
log
@These files were new in the 2.8 import (into the FSF branch) and cvs is stupid
enough to think my branch import want s the new files to end up in the trunk
as well.  Maybe cvs know how to do what I want, but I could not find it in
the manpage
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@
@
text
@@

