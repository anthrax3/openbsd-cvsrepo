head	1.3;
access;
symbols
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	FSF_2_8_1:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	99.05.26.16.28.04;	author espie;	state dead;
branches;
next	1.2;

1.2
date	98.03.03.21.34.32;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.06.08;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.06.08;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.25.32;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@So long, and thanks for all the bugs.
@
text
@/* Language-level data type conversion for GNU C++.
   Copyright (C) 1987, 88, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
   Hacked by Michael Tiemann (tiemann@@cygnus.com)

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */


/* This file contains the functions for converting C expressions
   to different data types.  The only entry point is `convert'.
   Every language front end must have a `convert' function
   but what kind of conversions it does will depend on the language.  */

#include "config.h"
#include <stdio.h>
#include "tree.h"
#include "flags.h"
#include "cp-tree.h"
#include "class.h"
#include "convert.h"

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

extern tree static_aggregates;

static tree build_thunk PROTO((tree, tree));
static tree convert_fn_ptr PROTO((tree, tree));
static tree cp_convert_to_pointer PROTO((tree, tree));
static tree convert_to_pointer_force PROTO((tree, tree));
static tree build_up_reference PROTO((tree, tree, int, int));
static tree build_type_conversion_1 PROTO((tree, tree, tree, tree,
					   int));

/* Change of width--truncation and extension of integers or reals--
   is represented with NOP_EXPR.  Proper functioning of many things
   assumes that no other conversions can be NOP_EXPRs.

   Conversion between integer and pointer is represented with CONVERT_EXPR.
   Converting integer to real uses FLOAT_EXPR
   and real to integer uses FIX_TRUNC_EXPR.

   Here is a list of all the functions that assume that widening and
   narrowing is always done with a NOP_EXPR:
     In convert.c, convert_to_integer.
     In c-typeck.c, build_binary_op_nodefault (boolean ops),
        and truthvalue_conversion.
     In expr.c: expand_expr, for operands of a MULT_EXPR.
     In fold-const.c: fold.
     In tree.c: get_narrower and get_unwidened.

   C++: in multiple-inheritance, converting between pointers may involve
   adjusting them by a delta stored within the class definition.  */

/* Subroutines of `convert'.  */

/* Build a thunk.  What it is, is an entry point that when called will
   adjust the this pointer (the first argument) by offset, and then
   goto the real address of the function given by REAL_ADDR that we
   would like called.  What we return is the address of the thunk.  */

static tree
build_thunk (offset, real_addr)
     tree offset, real_addr;
{
  if (TREE_CODE (real_addr) != ADDR_EXPR
      || TREE_CODE (TREE_OPERAND (real_addr, 0)) != FUNCTION_DECL)
    {
      sorry ("MI pointer to member conversion too complex");
      return error_mark_node;
    }
  sorry ("MI pointer to member conversion too complex");
  return error_mark_node;
}

/* Convert a `pointer to member' (POINTER_TYPE to METHOD_TYPE) into
   another `pointer to method'.  This may involved the creation of
   a thunk to handle the this offset calculation.  */

static tree
convert_fn_ptr (type, expr)
     tree type, expr;
{
#if 0				/* We don't use thunks for pmfs.  */
  if (flag_vtable_thunks)
    {
      tree intype = TREE_TYPE (expr);
      tree binfo = get_binfo (TYPE_METHOD_BASETYPE (TREE_TYPE (intype)),
			      TYPE_METHOD_BASETYPE (TREE_TYPE (type)), 1);
      if (binfo == error_mark_node)
	{
	  error ("  in pointer to member conversion");
	  return error_mark_node;
	}
      if (binfo == NULL_TREE)
	{
	  /* ARM 4.8 restriction.  */
	  error ("invalid pointer to member conversion");
	  return error_mark_node;
	}

      if (BINFO_OFFSET_ZEROP (binfo))
	return build1 (NOP_EXPR, type, expr);
      return build1 (NOP_EXPR, type, build_thunk (BINFO_OFFSET (binfo), expr));
    }
  else
#endif
    return build_ptrmemfunc (type, expr, 1);
}

/* if converting pointer to pointer
     if dealing with classes, check for derived->base or vice versa
     else if dealing with method pointers, delegate
     else convert blindly
   else if converting class, pass off to build_type_conversion
   else try C-style pointer conversion  */

static tree
cp_convert_to_pointer (type, expr)
     tree type, expr;
{
  register tree intype = TREE_TYPE (expr);
  register enum tree_code form;

  if (IS_AGGR_TYPE (intype))
    {
      tree rval;

      intype = complete_type (intype);
      if (TYPE_SIZE (intype) == NULL_TREE)
	{
	  cp_error ("can't convert from incomplete type `%T' to `%T'",
		    intype, type);
	  return error_mark_node;
	}

      rval = build_type_conversion (CONVERT_EXPR, type, expr, 1);
      if (rval)
	{
	  if (rval == error_mark_node)
	    cp_error ("conversion of `%E' from `%T' to `%T' is ambiguous",
		      expr, intype, type);
	  return rval;
	}
    }

  if (TYPE_PTRMEMFUNC_P (type))
    type = TYPE_PTRMEMFUNC_FN_TYPE (type);

  /* Handle anachronistic conversions from (::*)() to cv void* or (*)().  */
  if (TREE_CODE (type) == POINTER_TYPE
      && (TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE
	  || TYPE_MAIN_VARIANT (TREE_TYPE (type)) == void_type_node))
    {
      /* Allow an implicit this pointer for pointer to member
	 functions.  */
      if (TYPE_PTRMEMFUNC_P (intype))
	{
	  tree decl, basebinfo;
	  tree fntype = TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (intype));
	  tree t = TYPE_METHOD_BASETYPE (fntype);

	  if (current_class_type == 0
	      || get_base_distance (t, current_class_type, 0, &basebinfo)
	      == -1)
	    {
	      decl = build1 (NOP_EXPR, t, error_mark_node);
	    }
	  else if (current_class_ptr == 0)
	    decl = build1 (NOP_EXPR, t, error_mark_node);
	  else
	    decl = current_class_ref;

	  expr = build (OFFSET_REF, fntype, decl, expr);
	}

      if (TREE_CODE (expr) == OFFSET_REF
	  && TREE_CODE (TREE_TYPE (expr)) == METHOD_TYPE)
	expr = resolve_offset_ref (expr);
      if (TREE_CODE (TREE_TYPE (expr)) == METHOD_TYPE)
	expr = build_addr_func (expr);
      if (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE)
	{
	  if (TREE_CODE (TREE_TYPE (TREE_TYPE (expr))) == METHOD_TYPE)
	    if (pedantic || warn_pmf2ptr)
	      cp_pedwarn ("converting from `%T' to `%T'", TREE_TYPE (expr),
			  type);
	  return build1 (NOP_EXPR, type, expr);
	}
      intype = TREE_TYPE (expr);
    }

  if (TYPE_PTRMEMFUNC_P (intype))
    intype = TYPE_PTRMEMFUNC_FN_TYPE (intype);

  form = TREE_CODE (intype);

  if (form == POINTER_TYPE || form == REFERENCE_TYPE)
    {
      intype = TYPE_MAIN_VARIANT (intype);

      if (TYPE_MAIN_VARIANT (type) != intype
	  && TREE_CODE (TREE_TYPE (type)) == RECORD_TYPE
	  && IS_AGGR_TYPE (TREE_TYPE (type))
	  && IS_AGGR_TYPE (TREE_TYPE (intype))
	  && TREE_CODE (TREE_TYPE (intype)) == RECORD_TYPE)
	{
	  enum tree_code code = PLUS_EXPR;
	  tree binfo = get_binfo (TREE_TYPE (type), TREE_TYPE (intype), 1);
	  if (binfo == error_mark_node)
	    return error_mark_node;
	  if (binfo == NULL_TREE)
	    {
	      binfo = get_binfo (TREE_TYPE (intype), TREE_TYPE (type), 1);
	      if (binfo == error_mark_node)
		return error_mark_node;
	      code = MINUS_EXPR;
	    }
	  if (binfo)
	    {
	      if (TYPE_USES_VIRTUAL_BASECLASSES (TREE_TYPE (type))
		  || TYPE_USES_VIRTUAL_BASECLASSES (TREE_TYPE (intype))
		  || ! BINFO_OFFSET_ZEROP (binfo))
		{
		  /* Need to get the path we took.  */
		  tree path;

		  if (code == PLUS_EXPR)
		    get_base_distance (TREE_TYPE (type), TREE_TYPE (intype), 0, &path);
		  else
		    get_base_distance (TREE_TYPE (intype), TREE_TYPE (type), 0, &path);
		  return build_vbase_path (code, type, expr, path, 0);
		}
	    }
	}
      if (TREE_CODE (TREE_TYPE (intype)) == METHOD_TYPE
	  && TREE_CODE (type) == POINTER_TYPE
	  && TREE_CODE (TREE_TYPE (type)) == METHOD_TYPE)
	return convert_fn_ptr (type, expr);

      if (TREE_CODE (TREE_TYPE (type)) == OFFSET_TYPE
	  && TREE_CODE (TREE_TYPE (intype)) == OFFSET_TYPE)
	{
	  tree b1 = TYPE_OFFSET_BASETYPE (TREE_TYPE (type));
	  tree b2 = TYPE_OFFSET_BASETYPE (TREE_TYPE (intype));
	  tree binfo = get_binfo (b1, b2, 1);
	  if (binfo == NULL_TREE)
	    binfo = get_binfo (b2, b1, 1);
	  if (binfo == error_mark_node)
	    return error_mark_node;
	}

      if (TREE_CODE (TREE_TYPE (intype)) == METHOD_TYPE
	  || (TREE_CODE (type) == POINTER_TYPE
	      && TREE_CODE (TREE_TYPE (type)) == METHOD_TYPE))
	{
	  cp_error ("cannot convert `%E' from type `%T' to type `%T'",
		    expr, intype, type);
	  return error_mark_node;
	}

      return build1 (NOP_EXPR, type, expr);
    }

  my_friendly_assert (form != OFFSET_TYPE, 186);

  if (TYPE_LANG_SPECIFIC (intype)
      && (IS_SIGNATURE_POINTER (intype) || IS_SIGNATURE_REFERENCE (intype)))
    return convert_to_pointer (type, build_optr_ref (expr));

  if (integer_zerop (expr))
    {
      if (TREE_CODE (TREE_TYPE (type)) == METHOD_TYPE)
	return build_ptrmemfunc (type, expr, 0);
      expr = build_int_2 (0, 0);
      TREE_TYPE (expr) = type;
      return expr;
    }

  if (INTEGRAL_CODE_P (form))
    {
      if (type_precision (intype) == POINTER_SIZE)
	return build1 (CONVERT_EXPR, type, expr);
      expr = cp_convert (type_for_size (POINTER_SIZE, 0), expr);
      /* Modes may be different but sizes should be the same.  */
      if (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (expr)))
	  != GET_MODE_SIZE (TYPE_MODE (type)))
	/* There is supposed to be some integral type
	   that is the same width as a pointer.  */
	abort ();
      return convert_to_pointer (type, expr);
    }

  cp_error ("cannot convert `%E' from type `%T' to type `%T'",
	    expr, intype, type);
  return error_mark_node;
}

/* Like convert, except permit conversions to take place which
   are not normally allowed due to access restrictions
   (such as conversion from sub-type to private super-type).  */

static tree
convert_to_pointer_force (type, expr)
     tree type, expr;
{
  register tree intype = TREE_TYPE (expr);
  register enum tree_code form = TREE_CODE (intype);
  
  if (integer_zerop (expr))
    {
      expr = build_int_2 (0, 0);
      TREE_TYPE (expr) = type;
      return expr;
    }

  /* Convert signature pointer/reference to `void *' first.  */
  if (form == RECORD_TYPE
      && (IS_SIGNATURE_POINTER (intype) || IS_SIGNATURE_REFERENCE (intype)))
    {
      expr = build_optr_ref (expr);
      intype = TREE_TYPE (expr);
      form = TREE_CODE (intype);
    }

  if (form == POINTER_TYPE)
    {
      intype = TYPE_MAIN_VARIANT (intype);

      if (TYPE_MAIN_VARIANT (type) != intype
	  && TREE_CODE (TREE_TYPE (type)) == RECORD_TYPE
	  && IS_AGGR_TYPE (TREE_TYPE (type))
	  && IS_AGGR_TYPE (TREE_TYPE (intype))
	  && TREE_CODE (TREE_TYPE (intype)) == RECORD_TYPE)
	{
	  enum tree_code code = PLUS_EXPR;
	  tree path;
	  int distance = get_base_distance (TREE_TYPE (type),
					    TREE_TYPE (intype), 0, &path);
	  if (distance == -2)
	    {
	    ambig:
	      cp_error ("type `%T' is ambiguous baseclass of `%s'",
			TREE_TYPE (type),
			TYPE_NAME_STRING (TREE_TYPE (intype)));
	      return error_mark_node;
	    }
	  if (distance == -1)
	    {
	      distance = get_base_distance (TREE_TYPE (intype),
					    TREE_TYPE (type), 0, &path);
	      if (distance == -2)
		goto ambig;
	      if (distance < 0)
		/* Doesn't need any special help from us.  */
		return build1 (NOP_EXPR, type, expr);

	      code = MINUS_EXPR;
	    }
	  return build_vbase_path (code, type, expr, path, 0);
	}
    }

  return cp_convert_to_pointer (type, expr);
}

/* We are passing something to a function which requires a reference.
   The type we are interested in is in TYPE. The initial
   value we have to begin with is in ARG.

   FLAGS controls how we manage access checking.
   DIRECT_BIND in FLAGS controls how any temporaries are generated.  */

static tree
build_up_reference (type, arg, flags, checkconst)
     tree type, arg;
     int flags, checkconst;
{
  tree rval;
  tree argtype = TREE_TYPE (arg);
  tree target_type = TREE_TYPE (type);

  my_friendly_assert (TREE_CODE (type) == REFERENCE_TYPE, 187);

  if ((flags & DIRECT_BIND) && ! real_lvalue_p (arg))
    {
      tree targ = arg;
      if (toplevel_bindings_p ())
	arg = get_temp_name (argtype, 1);
      else
	{
	  arg = pushdecl (build_decl (VAR_DECL, NULL_TREE, argtype));
	  DECL_ARTIFICIAL (arg) = 1;
	}
      DECL_INITIAL (arg) = targ;
      cp_finish_decl (arg, targ, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);
    }
  else if (!(flags & DIRECT_BIND) && ! lvalue_p (arg))
    {
      tree slot = build_decl (VAR_DECL, NULL_TREE, argtype);
      arg = build (TARGET_EXPR, argtype, slot, arg, NULL_TREE, NULL_TREE);
    }

  /* If we had a way to wrap this up, and say, if we ever needed it's
     address, transform all occurrences of the register, into a memory
     reference we could win better.  */
  rval = build_unary_op (ADDR_EXPR, arg, 1);
  if ((flags & LOOKUP_PROTECT)
      && TYPE_MAIN_VARIANT (argtype) != TYPE_MAIN_VARIANT (target_type)
      && IS_AGGR_TYPE (argtype)
      && IS_AGGR_TYPE (target_type))
    {
      /* We go through get_binfo for the access control.  */
      tree binfo = get_binfo (target_type, argtype, 1);
      if (binfo == error_mark_node)
	return error_mark_node;
      if (binfo == NULL_TREE)
	return error_not_base_type (target_type, argtype);
      rval = convert_pointer_to_real (binfo, rval);
    }
  else
    rval
      = convert_to_pointer_force (build_pointer_type (target_type), rval);
  rval = build1 (NOP_EXPR, type, rval);
  TREE_CONSTANT (rval) = TREE_CONSTANT (TREE_OPERAND (rval, 0));
  return rval;
}

/* For C++: Only need to do one-level references, but cannot
   get tripped up on signed/unsigned differences.

   DECL is either NULL_TREE or the _DECL node for a reference that is being
   initialized.  It can be error_mark_node if we don't know the _DECL but
   we know it's an initialization.  */

tree
convert_to_reference (reftype, expr, convtype, flags, decl)
     tree reftype, expr;
     int convtype, flags;
     tree decl;
{
  register tree type = TYPE_MAIN_VARIANT (TREE_TYPE (reftype));
  register tree intype = TREE_TYPE (expr);
  tree rval = NULL_TREE;
  tree rval_as_conversion = NULL_TREE;
  int i;

  if (TREE_CODE (intype) == REFERENCE_TYPE)
    my_friendly_abort (364);

  intype = TYPE_MAIN_VARIANT (intype);

  i = comp_target_types (type, intype, 0);

  if (i <= 0 && (convtype & CONV_IMPLICIT) && IS_AGGR_TYPE (intype)
      && ! (flags & LOOKUP_NO_CONVERSION))
    {
      /* Look for a user-defined conversion to lvalue that we can use.  */

      if (flag_ansi_overloading)
	rval_as_conversion
	  = build_type_conversion (CONVERT_EXPR, reftype, expr, 1);
      else
	rval_as_conversion = build_type_conversion (CONVERT_EXPR, type, expr, 1);

      if (rval_as_conversion && rval_as_conversion != error_mark_node
	  && real_lvalue_p (rval_as_conversion))
	{
	  expr = rval_as_conversion;
	  rval_as_conversion = NULL_TREE;
	  intype = type;
	  i = 1;
	}
    }

  if (((convtype & CONV_STATIC) && i == -1)
      || ((convtype & CONV_IMPLICIT) && i == 1))
    {
      if (flags & LOOKUP_COMPLAIN)
	{
	  tree ttl = TREE_TYPE (reftype);
	  tree ttr;
	  
	  {
	    int r = TREE_READONLY (expr);
	    int v = TREE_THIS_VOLATILE (expr);
	    ttr = cp_build_type_variant (TREE_TYPE (expr), r, v);
	  }

	  if (! real_lvalue_p (expr) && ! TYPE_READONLY (ttl))
	    {
	      if (decl)
		/* Ensure semantics of [dcl.init.ref] */
		cp_pedwarn ("initialization of non-const reference `%#T' from rvalue `%T'",
			    reftype, intype);
	      else
		cp_pedwarn ("conversion to non-const `%T' from rvalue `%T'",
			    reftype, intype);
	    }
	  else if (! (convtype & CONV_CONST))
	    {
	      if (! TYPE_READONLY (ttl) && TYPE_READONLY (ttr))
		cp_pedwarn ("conversion from `%T' to `%T' discards const",
			    ttr, reftype);
	      else if (! TYPE_VOLATILE (ttl) && TYPE_VOLATILE (ttr))
		cp_pedwarn ("conversion from `%T' to `%T' discards volatile",
			    ttr, reftype);
	    }
	}

      return build_up_reference (reftype, expr, flags,
				 ! (convtype & CONV_CONST));
    }
  else if ((convtype & CONV_REINTERPRET) && lvalue_p (expr))
    {
      /* When casting an lvalue to a reference type, just convert into
	 a pointer to the new type and deference it.  This is allowed
	 by San Diego WP section 5.2.9 paragraph 12, though perhaps it
	 should be done directly (jason).  (int &)ri ---> *(int*)&ri */

      /* B* bp; A& ar = (A&)bp; is valid, but it's probably not what they
         meant.  */
      if (TREE_CODE (intype) == POINTER_TYPE
	  && (comptypes (TREE_TYPE (intype), type, -1)))
	cp_warning ("casting `%T' to `%T' does not dereference pointer",
		    intype, reftype);
	  
      rval = build_unary_op (ADDR_EXPR, expr, 0);
      if (rval != error_mark_node)
	rval = convert_force (build_pointer_type (TREE_TYPE (reftype)), rval, 0);
      if (rval != error_mark_node)
	rval = build1 (NOP_EXPR, reftype, rval);
    }
  else if (flag_ansi_overloading)
    {
      rval = convert_for_initialization (NULL_TREE, type, expr, flags,
					 "converting", 0, 0);
      if (rval == error_mark_node)
	return error_mark_node;
      rval = build_up_reference (reftype, rval, flags, 1);

      if (rval && ! TYPE_READONLY (TREE_TYPE (reftype)))
	cp_pedwarn ("initializing non-const `%T' with `%T' will use a temporary",
		    reftype, intype);
    }
  else
    {
      tree rval_as_ctor = NULL_TREE;
      
      if (rval_as_conversion)
	{
	  if (rval_as_conversion == error_mark_node)
	    {
	      cp_error ("conversion from `%T' to `%T' is ambiguous",
			intype, reftype);
	      return error_mark_node;
	    }
	  rval_as_conversion = build_up_reference (reftype, rval_as_conversion,
						   flags, 1);
	}
      
      /* Definitely need to go through a constructor here.  */
      if (TYPE_HAS_CONSTRUCTOR (type)
	  && ! CLASSTYPE_ABSTRACT_VIRTUALS (type)
	  && (rval = build_method_call
	      (NULL_TREE, ctor_identifier,
	       build_expr_list (NULL_TREE, expr), TYPE_BINFO (type),
	       LOOKUP_NO_CONVERSION|LOOKUP_SPECULATIVELY
	       | LOOKUP_ONLYCONVERTING)))
	{
	  tree init;

	  if (toplevel_bindings_p ())
	    {
	      tree t = get_temp_name (type, toplevel_bindings_p ());
	      init = build_method_call (t, ctor_identifier,
					build_expr_list (NULL_TREE, expr),
					TYPE_BINFO (type),
					LOOKUP_NORMAL|LOOKUP_NO_CONVERSION
					| LOOKUP_ONLYCONVERTING);

	      if (init == error_mark_node)
		return error_mark_node;

	      make_decl_rtl (t, NULL_PTR, 1);
	      static_aggregates = perm_tree_cons (expr, t, static_aggregates);
	      rval = build_unary_op (ADDR_EXPR, t, 0);
	    }
	  else
	    {
	      init = build_method_call (NULL_TREE, ctor_identifier,
					build_expr_list (NULL_TREE, expr),
					TYPE_BINFO (type),
					LOOKUP_NORMAL|LOOKUP_NO_CONVERSION
					|LOOKUP_ONLYCONVERTING);

	      if (init == error_mark_node)
		return error_mark_node;

	      rval = build_cplus_new (type, init);
	      rval = build_up_reference (reftype, rval, flags, 1);
	    }
	  rval_as_ctor = rval;
	}

      if (rval_as_ctor && rval_as_conversion)
	{
	  cp_error ("ambiguous conversion from `%T' to `%T'; both user-defined conversion and constructor apply",
		    intype, reftype);
	  return error_mark_node;
	}
      else if (rval_as_ctor)
	rval = rval_as_ctor;
      else if (rval_as_conversion)
	rval = rval_as_conversion;
      else if (! IS_AGGR_TYPE (type) && ! IS_AGGR_TYPE (intype))
	{
	  rval = cp_convert (type, expr);
	  if (rval == error_mark_node)
	    return error_mark_node;
	  
	  rval = build_up_reference (reftype, rval, flags, 1);
	}

      if (rval && ! TYPE_READONLY (TREE_TYPE (reftype)))
	cp_pedwarn ("initializing non-const `%T' with `%T' will use a temporary",
		    reftype, intype);
    }

  if (rval)
    {
      /* If we found a way to convert earlier, then use it.  */
      return rval;
    }

  my_friendly_assert (TREE_CODE (intype) != OFFSET_TYPE, 189);

  if (flags & LOOKUP_COMPLAIN)
    cp_error ("cannot convert type `%T' to type `%T'", intype, reftype);

  if (flags & LOOKUP_SPECULATIVELY)
    return NULL_TREE;

  return error_mark_node;
}

/* We are using a reference VAL for its value. Bash that reference all the
   way down to its lowest form.  */

tree
convert_from_reference (val)
     tree val;
{
  tree type = TREE_TYPE (val);

  if (TREE_CODE (type) == OFFSET_TYPE)
    type = TREE_TYPE (type);
  if (TREE_CODE (type) == REFERENCE_TYPE)
    return build_indirect_ref (val, NULL_PTR);
  return val;
}

/* See if there is a constructor of type TYPE which will convert
   EXPR.  The reference manual seems to suggest (8.5.6) that we need
   not worry about finding constructors for base classes, then converting
   to the derived class.

   MSGP is a pointer to a message that would be an appropriate error
   string.  If MSGP is NULL, then we are not interested in reporting
   errors.  */

tree
convert_to_aggr (type, expr, msgp, protect)
     tree type, expr;
     char **msgp;
     int protect;
{
  tree basetype = type;
  tree name = TYPE_IDENTIFIER (basetype);
  tree function, fndecl, fntype, parmtypes, parmlist, result;
#if 0
  /* See code below that used this.  */
  tree method_name;
#endif
  tree access;
  int can_be_private, can_be_protected;

  if (! TYPE_HAS_CONSTRUCTOR (basetype))
    {
      if (msgp)
	*msgp = "type `%s' does not have a constructor";
      return error_mark_node;
    }

  access = access_public_node;
  can_be_private = 0;
  can_be_protected = IDENTIFIER_CLASS_VALUE (name) || name == current_class_name;

  parmlist = build_expr_list (NULL_TREE, expr);
  parmtypes = scratch_tree_cons (NULL_TREE, TREE_TYPE (expr), void_list_node);

  if (TYPE_USES_VIRTUAL_BASECLASSES (basetype))
    {
      parmtypes = expr_tree_cons (NULL_TREE, integer_type_node, parmtypes);
      parmlist = scratch_tree_cons (NULL_TREE, integer_one_node, parmlist);
    }

  /* The type of the first argument will be filled in inside the loop.  */
  parmlist = expr_tree_cons (NULL_TREE, integer_zero_node, parmlist);
  parmtypes = scratch_tree_cons (NULL_TREE, build_pointer_type (basetype), parmtypes);

  /* No exact conversion was found.  See if an approximate
     one will do.  */
  fndecl = TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (basetype), 0);

  {
    int saw_private = 0;
    int saw_protected = 0;
    struct candidate *candidates
      = (struct candidate *) alloca ((decl_list_length (fndecl)+1) * sizeof (struct candidate));
    struct candidate *cp = candidates;

    while (fndecl)
      {
	function = fndecl;
	cp->h_len = 2;
	cp->harshness = (struct harshness_code *)
	  alloca (3 * sizeof (struct harshness_code));

	compute_conversion_costs (fndecl, parmlist, cp, 2);
	if ((cp->h.code & EVIL_CODE) == 0)
	  {
	    cp->u.field = fndecl;
	    if (protect)
	      {
		if (TREE_PRIVATE (fndecl))
		  access = access_private_node;
		else if (TREE_PROTECTED (fndecl))
		  access = access_protected_node;
		else
		  access = access_public_node;
	      }
	    else
	      access = access_public_node;

	    if (access == access_private_node
		? (basetype == current_class_type
		   || is_friend (basetype, cp->function)
		   || purpose_member (basetype, DECL_ACCESS (fndecl)))
		: access == access_protected_node
		? (can_be_protected
		   || purpose_member (basetype, DECL_ACCESS (fndecl)))
		: 1)
	      {
		if (cp->h.code <= TRIVIAL_CODE)
		  goto found_and_ok;
		cp++;
	      }
	    else
	      {
		if (access == access_private_node)
		  saw_private = 1;
		else
		  saw_protected = 1;
	      }
	  }
	fndecl = DECL_CHAIN (fndecl);
      }
    if (cp - candidates)
      {
	/* Rank from worst to best.  Then cp will point to best one.
	   Private fields have their bits flipped.  For unsigned
	   numbers, this should make them look very large.
	   If the best alternate has a (signed) negative value,
	   then all we ever saw were private members.  */
	if (cp - candidates > 1)
	  qsort (candidates,	/* char *base */
		 cp - candidates, /* int nel */
		 sizeof (struct candidate), /* int width */
		 (int (*) PROTO((const void *, const void *))) rank_for_overload); /* int (*compar)() */

	--cp;
	if (cp->h.code & EVIL_CODE)
	  {
	    if (msgp)
	      *msgp = "ambiguous type conversion possible for `%s'";
	    return error_mark_node;
	  }

	function = cp->function;
	fndecl = cp->u.field;
	goto found_and_ok;
      }
    else if (msgp)
      {
	if (saw_private)
	  if (saw_protected)
	    *msgp = "only private and protected conversions apply";
	  else
	    *msgp = "only private conversions apply";
	else if (saw_protected)
	  *msgp = "only protected conversions apply";
	else
	  *msgp = "no appropriate conversion to type `%s'";
      }
    return error_mark_node;
  }
  /* NOTREACHED */

 found:
  if (access == access_private_node)
    if (! can_be_private)
      {
	if (msgp)
	  *msgp = TREE_PRIVATE (fndecl)
	    ? "conversion to type `%s' is private"
	    : "conversion to type `%s' is from private base class";
	return error_mark_node;
      }
  if (access == access_protected_node)
    if (! can_be_protected)
      {
	if (msgp)
	  *msgp = TREE_PRIVATE (fndecl)
	    ? "conversion to type `%s' is protected"
	    : "conversion to type `%s' is from protected base class";
	return error_mark_node;
      }
  function = fndecl;
 found_and_ok:

  /* It will convert, but we don't do anything about it yet.  */
  if (msgp == 0)
    return NULL_TREE;

  fntype = TREE_TYPE (function);

  parmlist = convert_arguments (NULL_TREE, TYPE_ARG_TYPES (fntype),
				parmlist, NULL_TREE, LOOKUP_NORMAL);

  result = build_call (function, TREE_TYPE (fntype), parmlist);
  return result;
}

/* Call this when we know (for any reason) that expr is not, in fact,
   zero.  This routine is like convert_pointer_to, but it pays
   attention to which specific instance of what type we want to
   convert to.  This routine should eventually become
   convert_to_pointer after all references to convert_to_pointer
   are removed.  */

tree
convert_pointer_to_real (binfo, expr)
     tree binfo, expr;
{
  register tree intype = TREE_TYPE (expr);
  tree ptr_type;
  tree type, rval;

  if (TREE_CODE (binfo) == TREE_VEC)
    type = BINFO_TYPE (binfo);
  else if (IS_AGGR_TYPE (binfo))
    {
      type = binfo;
    }
  else
    {
      type = binfo;
      binfo = NULL_TREE;
    }

  ptr_type = cp_build_type_variant (type, TYPE_READONLY (TREE_TYPE (intype)),
				    TYPE_VOLATILE (TREE_TYPE (intype)));
  ptr_type = build_pointer_type (ptr_type);
  if (ptr_type == TYPE_MAIN_VARIANT (intype))
    return expr;

  if (intype == error_mark_node)
    return error_mark_node;

  my_friendly_assert (!integer_zerop (expr), 191);

  if (TREE_CODE (type) == RECORD_TYPE
      && TREE_CODE (TREE_TYPE (intype)) == RECORD_TYPE
      && type != TYPE_MAIN_VARIANT (TREE_TYPE (intype)))
    {
      tree path;
      int distance
	= get_base_distance (binfo, TYPE_MAIN_VARIANT (TREE_TYPE (intype)),
			     0, &path);

      /* This function shouldn't be called with unqualified arguments
	 but if it is, give them an error message that they can read.  */
      if (distance < 0)
	{
	  cp_error ("cannot convert a pointer of type `%T' to a pointer of type `%T'",
		    TREE_TYPE (intype), type);

	  if (distance == -2)
	    cp_error ("because `%T' is an ambiguous base class", type);
	  return error_mark_node;
	}

      return build_vbase_path (PLUS_EXPR, ptr_type, expr, path, 1);
    }
  rval = build1 (NOP_EXPR, ptr_type,
		 TREE_CODE (expr) == NOP_EXPR ? TREE_OPERAND (expr, 0) : expr);
  TREE_CONSTANT (rval) = TREE_CONSTANT (expr);
  return rval;
}

/* Call this when we know (for any reason) that expr is
   not, in fact, zero.  This routine gets a type out of the first
   argument and uses it to search for the type to convert to.  If there
   is more than one instance of that type in the expr, the conversion is
   ambiguous.  This routine should eventually go away, and all
   callers should use convert_to_pointer_real.  */

tree
convert_pointer_to (binfo, expr)
     tree binfo, expr;
{
  tree type;

  if (TREE_CODE (binfo) == TREE_VEC)
    type = BINFO_TYPE (binfo);
  else if (IS_AGGR_TYPE (binfo))
      type = binfo;
  else
      type = binfo;
  return convert_pointer_to_real (type, expr);
}

/* C++ conversions, preference to static cast conversions.  */

tree
cp_convert (type, expr)
     tree type, expr;
{
  return ocp_convert (type, expr, CONV_OLD_CONVERT, LOOKUP_NORMAL);
}

/* Conversion...

   FLAGS indicates how we should behave.  */

tree
ocp_convert (type, expr, convtype, flags)
     tree type, expr;
     int convtype, flags;
{
  register tree e = expr;
  register enum tree_code code = TREE_CODE (type);

  if (e == error_mark_node
      || TREE_TYPE (e) == error_mark_node)
    return error_mark_node;

  if (IS_AGGR_TYPE (type) && (convtype & CONV_FORCE_TEMP))
    /* We need a new temporary; don't take this shortcut.  */;
  else if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (TREE_TYPE (e)))
    /* Trivial conversion: cv-qualifiers do not matter on rvalues.  */
    return fold (build1 (NOP_EXPR, type, e));
  
  if (code == VOID_TYPE && (convtype & CONV_STATIC))
    return build1 (CONVERT_EXPR, type, e);

#if 0
  /* This is incorrect.  A truncation can't be stripped this way.
     Extensions will be stripped by the use of get_unwidened.  */
  if (TREE_CODE (e) == NOP_EXPR)
    return cp_convert (type, TREE_OPERAND (e, 0));
#endif

  /* Just convert to the type of the member.  */
  if (code == OFFSET_TYPE)
    {
      type = TREE_TYPE (type);
      code = TREE_CODE (type);
    }

#if 0
  if (code == REFERENCE_TYPE)
    return fold (convert_to_reference (type, e, convtype, flags, NULL_TREE));
  else if (TREE_CODE (TREE_TYPE (e)) == REFERENCE_TYPE)
    e = convert_from_reference (e);
#endif

  if (TREE_CODE (e) == OFFSET_REF)
    e = resolve_offset_ref (e);

  if (TREE_READONLY_DECL_P (e))
    e = decl_constant_value (e);

  if (INTEGRAL_CODE_P (code))
    {
      tree intype = TREE_TYPE (e);
      /* enum = enum, enum = int, enum = float, (enum)pointer are all
         errors.  */
      if (flag_int_enum_equivalence == 0
	  && TREE_CODE (type) == ENUMERAL_TYPE
	  && ((ARITHMETIC_TYPE_P (intype) && ! (convtype & CONV_STATIC))
	      || (TREE_CODE (intype) == POINTER_TYPE)))
	{
	  cp_pedwarn ("conversion from `%#T' to `%#T'", intype, type);

	  if (flag_pedantic_errors)
	    return error_mark_node;
	}
      if (IS_AGGR_TYPE (intype))
	{
	  tree rval;
	  rval = build_type_conversion (CONVERT_EXPR, type, e, 1);
	  if (rval)
	    return rval;
	  if (flags & LOOKUP_COMPLAIN)
	    cp_error ("`%#T' used where a `%T' was expected", intype, type);
	  if (flags & LOOKUP_SPECULATIVELY)
	    return NULL_TREE;
	  return error_mark_node;
	}
      if (code == BOOLEAN_TYPE)
	{
	  /* Common Ada/Pascal programmer's mistake.  We always warn
             about this since it is so bad.  */
	  if (TREE_CODE (expr) == FUNCTION_DECL)
	    cp_warning ("the address of `%D', will always be `true'", expr);
	  return truthvalue_conversion (e);
	}
      return fold (convert_to_integer (type, e));
    }
  if (code == POINTER_TYPE || code == REFERENCE_TYPE
      || TYPE_PTRMEMFUNC_P (type))
    return fold (cp_convert_to_pointer (type, e));
  if (code == REAL_TYPE || code == COMPLEX_TYPE)
    {
      if (IS_AGGR_TYPE (TREE_TYPE (e)))
	{
	  tree rval;
	  rval = build_type_conversion (CONVERT_EXPR, type, e, 1);
	  if (rval)
	    return rval;
	  else
	    if (flags & LOOKUP_COMPLAIN)
	      cp_error ("`%#T' used where a floating point value was expected",
			TREE_TYPE (e));
	}
      if (code == REAL_TYPE)
	return fold (convert_to_real (type, e));
      else if (code == COMPLEX_TYPE)
	return fold (convert_to_complex (type, e));
    }

  /* New C++ semantics:  since assignment is now based on
     memberwise copying,  if the rhs type is derived from the
     lhs type, then we may still do a conversion.  */
  if (IS_AGGR_TYPE_CODE (code))
    {
      tree dtype = TREE_TYPE (e);
      tree ctor = NULL_TREE;
      tree conversion = NULL_TREE;

      dtype = TYPE_MAIN_VARIANT (dtype);

      /* Conversion of object pointers or signature pointers/references
	 to signature pointers/references.  */

      if (TYPE_LANG_SPECIFIC (type)
	  && (IS_SIGNATURE_POINTER (type) || IS_SIGNATURE_REFERENCE (type)))
	{
	  tree constructor = build_signature_pointer_constructor (type, expr);
	  tree sig_ty = SIGNATURE_TYPE (type);
	  tree sig_ptr;

	  if (constructor == error_mark_node)
	    return error_mark_node;

	  sig_ptr = get_temp_name (type, 1);
	  DECL_INITIAL (sig_ptr) = constructor;
	  CLEAR_SIGNATURE (sig_ty);
	  cp_finish_decl (sig_ptr, constructor, NULL_TREE, 0, 0);
	  SET_SIGNATURE (sig_ty);
	  TREE_READONLY (sig_ptr) = 1;

	  return sig_ptr;
	}

      /* Conversion between aggregate types.  New C++ semantics allow
	 objects of derived type to be cast to objects of base type.
	 Old semantics only allowed this between pointers.

	 There may be some ambiguity between using a constructor
	 vs. using a type conversion operator when both apply.  */

      if (flag_ansi_overloading)
	{
	  ctor = e;
	  
	  if ((flags & LOOKUP_ONLYCONVERTING)
	      && ! (IS_AGGR_TYPE (dtype) && DERIVED_FROM_P (type, dtype)))
	    {
	      ctor = build_user_type_conversion (type, ctor, flags);
	      flags |= LOOKUP_NO_CONVERSION;
	    }
	  if (ctor)
	    ctor = build_method_call (NULL_TREE, ctor_identifier,
				      build_expr_list (NULL_TREE, ctor),
				      TYPE_BINFO (type), flags);
	  if (ctor)
	    return build_cplus_new (type, ctor);
	}
      else
	{
	  if (IS_AGGR_TYPE (dtype) && ! DERIVED_FROM_P (type, dtype)
	      && TYPE_HAS_CONVERSION (dtype))
	    conversion = build_type_conversion (CONVERT_EXPR, type, e, 1);

	  if (conversion == error_mark_node)
	    {
	      if (flags & LOOKUP_COMPLAIN)
		error ("ambiguous pointer conversion");
	      return conversion;
	    }

	  if (TYPE_HAS_CONSTRUCTOR (complete_type (type)))
	    ctor = build_method_call (NULL_TREE, ctor_identifier,
				      build_expr_list (NULL_TREE, e),
				      TYPE_BINFO (type),
				      (flags & LOOKUP_NORMAL)
				      | LOOKUP_SPECULATIVELY
				      | (flags & LOOKUP_ONLYCONVERTING)
				      | (flags & LOOKUP_NO_CONVERSION)
				      | (conversion ? LOOKUP_NO_CONVERSION : 0));

	  if (ctor == error_mark_node)
	    {
	      if (flags & LOOKUP_COMPLAIN)
		cp_error ("in conversion to type `%T'", type);
	      if (flags & LOOKUP_SPECULATIVELY)
		return NULL_TREE;
	      return error_mark_node;
	    }
      
	  if (conversion && ctor)
	    {
	      if (flags & LOOKUP_COMPLAIN)
		error ("both constructor and type conversion operator apply");
	      if (flags & LOOKUP_SPECULATIVELY)
		return NULL_TREE;
	      return error_mark_node;
	    }
	  else if (conversion)
	    return conversion;
	  else if (ctor)
	    {
	      ctor = build_cplus_new (type, ctor);
	      return ctor;
	    }
	}
    }

  /* If TYPE or TREE_TYPE (E) is not on the permanent_obstack,
     then the it won't be hashed and hence compare as not equal,
     even when it is.  */
  if (code == ARRAY_TYPE
      && TREE_TYPE (TREE_TYPE (e)) == TREE_TYPE (type)
      && index_type_equal (TYPE_DOMAIN (TREE_TYPE (e)), TYPE_DOMAIN (type)))
    return e;

  if (flags & LOOKUP_COMPLAIN)
    cp_error ("conversion from `%T' to non-scalar type `%T' requested",
	      TREE_TYPE (expr), type);
  if (flags & LOOKUP_SPECULATIVELY)
    return NULL_TREE;
  return error_mark_node;
}

/* Create an expression whose value is that of EXPR,
   converted to type TYPE.  The TREE_TYPE of the value
   is always TYPE.  This function implements all reasonable
   conversions; callers should filter out those that are
   not permitted by the language being compiled.

   Most of this routine is from build_reinterpret_cast.

   The backend cannot call cp_convert (what was convert) because
   conversions to/from basetypes may involve memory references
   (vbases) and adding or subtracting small values (multiple
   inheritance), but it calls convert from the constant folding code
   on subtrees of already build trees after it has ripped them apart.

   Also, if we ever support range variables, we'll probably also have to
   do a little bit more work.  */

tree
convert (type, expr)
     tree type, expr;
{
  tree intype;

  if (type == error_mark_node || expr == error_mark_node)
    return error_mark_node;

  intype = TREE_TYPE (expr);

  if (POINTER_TYPE_P (type) && POINTER_TYPE_P (intype))
    {
      if (TREE_READONLY_DECL_P (expr))
	expr = decl_constant_value (expr);
      return fold (build1 (NOP_EXPR, type, expr));
    }

  return ocp_convert (type, expr, CONV_OLD_CONVERT,
		      LOOKUP_NORMAL|LOOKUP_NO_CONVERSION);
}

/* Like cp_convert, except permit conversions to take place which
   are not normally allowed due to access restrictions
   (such as conversion from sub-type to private super-type).  */

tree
convert_force (type, expr, convtype)
     tree type;
     tree expr;
     int convtype;
{
  register tree e = expr;
  register enum tree_code code = TREE_CODE (type);

  if (code == REFERENCE_TYPE)
    return fold (convert_to_reference (type, e, CONV_C_CAST, LOOKUP_COMPLAIN,
				       NULL_TREE));
  else if (TREE_CODE (TREE_TYPE (e)) == REFERENCE_TYPE)
    e = convert_from_reference (e);

  if (code == POINTER_TYPE)
    return fold (convert_to_pointer_force (type, e));

  /* From typeck.c convert_for_assignment */
  if (((TREE_CODE (TREE_TYPE (e)) == POINTER_TYPE && TREE_CODE (e) == ADDR_EXPR
	&& TREE_CODE (TREE_TYPE (e)) == POINTER_TYPE
	&& TREE_CODE (TREE_TYPE (TREE_TYPE (e))) == METHOD_TYPE)
       || integer_zerop (e)
       || TYPE_PTRMEMFUNC_P (TREE_TYPE (e)))
      && TYPE_PTRMEMFUNC_P (type))
    {
      /* compatible pointer to member functions.  */
      return build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), e, 1);
    }

  return ocp_convert (type, e, CONV_C_CAST|convtype, LOOKUP_NORMAL);
}

/* Subroutine of build_type_conversion.  */

static tree
build_type_conversion_1 (xtype, basetype, expr, typename, for_sure)
     tree xtype, basetype;
     tree expr;
     tree typename;
     int for_sure;
{
  tree rval;
  int flags;

  if (for_sure == 0)
    flags = LOOKUP_PROTECT|LOOKUP_ONLYCONVERTING;
  else
    flags = LOOKUP_NORMAL|LOOKUP_ONLYCONVERTING;

  rval = build_method_call (expr, typename, NULL_TREE, NULL_TREE, flags);
  if (rval == error_mark_node)
    {
      if (for_sure == 0)
	return NULL_TREE;
      return error_mark_node;
    }

  if (IS_AGGR_TYPE (TREE_TYPE (rval)))
    return rval;

  if (warn_cast_qual
      && TREE_TYPE (xtype)
      && (TREE_READONLY (TREE_TYPE (TREE_TYPE (rval)))
	  > TREE_READONLY (TREE_TYPE (xtype))))
    warning ("user-defined conversion casting away `const'");
  return cp_convert (xtype, rval);
}

/* Convert an aggregate EXPR to type XTYPE.  If a conversion
   exists, return the attempted conversion.  This may
   return ERROR_MARK_NODE if the conversion is not
   allowed (references private members, etc).
   If no conversion exists, NULL_TREE is returned.

   If (FOR_SURE & 1) is non-zero, then we allow this type conversion
   to take place immediately.  Otherwise, we build a SAVE_EXPR
   which can be evaluated if the results are ever needed.

   Changes to this functions should be mirrored in user_harshness.

   FIXME: Ambiguity checking is wrong.  Should choose one by the implicit
   object parameter, or by the second standard conversion sequence if
   that doesn't do it.  This will probably wait for an overloading rewrite.
   (jason 8/9/95)  */

tree
build_type_conversion (code, xtype, expr, for_sure)
     enum tree_code code;
     tree xtype, expr;
     int for_sure;
{
  /* C++: check to see if we can convert this aggregate type
     into the required type.  */
  tree basetype;
  tree conv;
  tree winner = NULL_TREE;

  if (flag_ansi_overloading)
    return build_user_type_conversion
      (xtype, expr, for_sure ? LOOKUP_NORMAL : 0);

  if (expr == error_mark_node)
    return error_mark_node;

  basetype = TREE_TYPE (expr);
  if (TREE_CODE (basetype) == REFERENCE_TYPE)
    basetype = TREE_TYPE (basetype);

  basetype = TYPE_MAIN_VARIANT (basetype);
  if (! TYPE_LANG_SPECIFIC (basetype) || ! TYPE_HAS_CONVERSION (basetype))
    return NULL_TREE;

  /* Do we have an exact match?  */
  {
    tree typename = build_typename_overload (xtype);
    if (lookup_fnfields (TYPE_BINFO (basetype), typename, 0))
      return build_type_conversion_1 (xtype, basetype, expr, typename,
				      for_sure);
  }

  /* Nope; try looking for others.  */
  for (conv = lookup_conversions (basetype); conv; conv = TREE_CHAIN (conv))
    {
      tree cand = TREE_VALUE (conv);

      if (winner && winner == cand)
	continue;

      if (can_convert (xtype, TREE_TYPE (TREE_TYPE (cand))))
	{
	  if (winner)
	    {
	      if (for_sure)
		{
		  cp_error ("ambiguous conversion from `%T' to `%T'", basetype,
			    xtype);
		  cp_error ("  candidate conversions include `%D' and `%D'",
			    winner, cand);
		}
	      return NULL_TREE;
	    }
	  else
	    winner = cand;
	}
    }

  if (winner)
    return build_type_conversion_1 (xtype, basetype, expr,
				    DECL_NAME (winner), for_sure);

  return NULL_TREE;
}

/* Convert the given EXPR to one of a group of types suitable for use in an
   expression.  DESIRES is a combination of various WANT_* flags (q.v.)
   which indicates which types are suitable.  If COMPLAIN is 1, complain
   about ambiguity; otherwise, the caller will deal with it.  */

tree
build_expr_type_conversion (desires, expr, complain)
     int desires;
     tree expr;
     int complain;
{
  tree basetype = TREE_TYPE (expr);
  tree conv;
  tree winner = NULL_TREE;

  if (TREE_CODE (basetype) == OFFSET_TYPE)
    expr = resolve_offset_ref (expr);
  expr = convert_from_reference (expr);
  basetype = TREE_TYPE (expr);

  if (! IS_AGGR_TYPE (basetype))
    switch (TREE_CODE (basetype))
      {
      case INTEGER_TYPE:
	if ((desires & WANT_NULL) && TREE_CODE (expr) == INTEGER_CST
	    && integer_zerop (expr))
	  return expr;
	/* else fall through...  */

      case BOOLEAN_TYPE:
	return (desires & WANT_INT) ? expr : NULL_TREE;
      case ENUMERAL_TYPE:
	return (desires & WANT_ENUM) ? expr : NULL_TREE;
      case REAL_TYPE:
	return (desires & WANT_FLOAT) ? expr : NULL_TREE;
      case POINTER_TYPE:
	return (desires & WANT_POINTER) ? expr : NULL_TREE;
	
      case FUNCTION_TYPE:
      case ARRAY_TYPE:
	return (desires & WANT_POINTER) ? default_conversion (expr)
     	                                : NULL_TREE;
      default:
	return NULL_TREE;
      }

  if (! TYPE_HAS_CONVERSION (basetype))
    return NULL_TREE;

  for (conv = lookup_conversions (basetype); conv; conv = TREE_CHAIN (conv))
    {
      int win = 0;
      tree candidate;
      tree cand = TREE_VALUE (conv);

      if (winner && winner == cand)
	continue;

      candidate = TREE_TYPE (TREE_TYPE (cand));
      if (TREE_CODE (candidate) == REFERENCE_TYPE)
	candidate = TREE_TYPE (candidate);

      switch (TREE_CODE (candidate))
	{
	case BOOLEAN_TYPE:
	case INTEGER_TYPE:
	  win = (desires & WANT_INT); break;
	case ENUMERAL_TYPE:
	  win = (desires & WANT_ENUM); break;
	case REAL_TYPE:
	  win = (desires & WANT_FLOAT); break;
	case POINTER_TYPE:
	  win = (desires & WANT_POINTER); break;
	}

      if (win)
	{
	  if (winner)
	    {
	      if (complain)
		{
		  cp_error ("ambiguous default type conversion from `%T'",
			    basetype);
		  cp_error ("  candidate conversions include `%D' and `%D'",
			    winner, cand);
		}
	      return error_mark_node;
	    }
	  else
	    winner = cand;
	}
    }

  if (winner)
    {
      tree type = TREE_TYPE (TREE_TYPE (winner));
      if (TREE_CODE (type) == REFERENCE_TYPE)
	type = TREE_TYPE (type);
      return build_type_conversion_1 (type, basetype, expr,
				      DECL_NAME (winner), 1);
    }

  return NULL_TREE;
}

/* Must convert two aggregate types to non-aggregate type.
   Attempts to find a non-ambiguous, "best" type conversion.

   Return 1 on success, 0 on failure.

   @@@@ What are the real semantics of this supposed to be??? */

int
build_default_binary_type_conversion (code, arg1, arg2)
     enum tree_code code;
     tree *arg1, *arg2;
{
  switch (code)
    {
    case MULT_EXPR:
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case EXACT_DIV_EXPR:
      *arg1 = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, *arg1, 0);
      *arg2 = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, *arg2, 0);
      break;

    case TRUNC_MOD_EXPR:
    case FLOOR_MOD_EXPR:
    case LSHIFT_EXPR:
    case RSHIFT_EXPR:
    case BIT_AND_EXPR:
    case BIT_XOR_EXPR:
    case BIT_IOR_EXPR:
      *arg1 = build_expr_type_conversion (WANT_INT | WANT_ENUM, *arg1, 0);
      *arg2 = build_expr_type_conversion (WANT_INT | WANT_ENUM, *arg2, 0);
      break;

    case PLUS_EXPR:
      {
	tree a1, a2, p1, p2;
	int wins;

	a1 = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, *arg1, 0);
	a2 = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, *arg2, 0);
	p1 = build_expr_type_conversion (WANT_POINTER, *arg1, 0);
	p2 = build_expr_type_conversion (WANT_POINTER, *arg2, 0);

	wins = (a1 && a2) + (a1 && p2) + (p1 && a2);

	if (wins > 1)
	  error ("ambiguous default type conversion for `operator +'");

	if (a1 && a2)
	  *arg1 = a1, *arg2 = a2;
	else if (a1 && p2)
	  *arg1 = a1, *arg2 = p2;
	else
	  *arg1 = p1, *arg2 = a2;
	break;
      }

    case MINUS_EXPR:
      {
	tree a1, a2, p1, p2;
	int wins;

	a1 = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, *arg1, 0);
	a2 = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, *arg2, 0);
	p1 = build_expr_type_conversion (WANT_POINTER, *arg1, 0);
	p2 = build_expr_type_conversion (WANT_POINTER, *arg2, 0);

	wins = (a1 && a2) + (p1 && p2) + (p1 && a2);

	if (wins > 1)
	  error ("ambiguous default type conversion for `operator -'");

	if (a1 && a2)
	  *arg1 = a1, *arg2 = a2;
	else if (p1 && p2)
	  *arg1 = p1, *arg2 = p2;
	else
	  *arg1 = p1, *arg2 = a2;
	break;
      }

    case GT_EXPR:
    case LT_EXPR:
    case GE_EXPR:
    case LE_EXPR:
    case EQ_EXPR:
    case NE_EXPR:
      {
	tree a1, a2, p1, p2;
	int wins;

	a1 = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, *arg1, 0);
	a2 = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, *arg2, 0);
	p1 = build_expr_type_conversion (WANT_POINTER | WANT_NULL, *arg1, 0);
	p2 = build_expr_type_conversion (WANT_POINTER | WANT_NULL, *arg2, 0);

	wins = (a1 && a2) + (p1 && p2);

	if (wins > 1)
	  cp_error ("ambiguous default type conversion for `%O'", code);

	if (a1 && a2)
	  *arg1 = a1, *arg2 = a2;
	else
	  *arg1 = p1, *arg2 = p2;
	break;
      }

    case TRUTH_ANDIF_EXPR:
    case TRUTH_ORIF_EXPR:
      *arg1 = cp_convert (boolean_type_node, *arg1);
      *arg2 = cp_convert (boolean_type_node, *arg2);
      break;

    default:
      *arg1 = NULL_TREE;
      *arg2 = NULL_TREE;
    }

  if (*arg1 == error_mark_node || *arg2 == error_mark_node)
    cp_error ("ambiguous default type conversion for `%O'", code);

  if (*arg1 && *arg2)
    return 1;

  return 0;
}

/* Implements integral promotion (4.1) and float->double promotion.  */

tree
type_promotes_to (type)
     tree type;
{
  int constp, volatilep;

  if (type == error_mark_node)
    return error_mark_node;

  constp = TYPE_READONLY (type);
  volatilep = TYPE_VOLATILE (type);
  type = TYPE_MAIN_VARIANT (type);

  /* bool always promotes to int (not unsigned), even if it's the same
     size.  */
  if (type == boolean_type_node)
    type = integer_type_node;

  /* Normally convert enums to int, but convert wide enums to something
     wider.  */
  else if (TREE_CODE (type) == ENUMERAL_TYPE
	   || type == wchar_type_node)
    {
      int precision = MAX (TYPE_PRECISION (type),
			   TYPE_PRECISION (integer_type_node));
      tree totype = type_for_size (precision, 0);
      if (TREE_UNSIGNED (type)
	  && ! int_fits_type_p (TYPE_MAX_VALUE (type), totype))
	type = type_for_size (precision, 1);
      else
	type = totype;
    }
  else if (C_PROMOTING_INTEGER_TYPE_P (type))
    {
      /* Retain unsignedness if really not getting bigger.  */
      if (TREE_UNSIGNED (type)
	  && TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node))
	type = unsigned_type_node;
      else
	type = integer_type_node;
    }
  else if (type == float_type_node)
    type = double_type_node;

  return cp_build_type_variant (type, constp, volatilep);
}
@


1.2
log
@GCC 2.8.0 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1987, 88, 92, 93, 94, 1995 Free Software Foundation, Inc.
d29 1
d36 13
a48 2
#undef NULL
#define NULL (char *)0
d76 1
d94 1
d99 1
d112 1
a112 1
	  /* ARM 4.8 restriction. */
d122 1
d132 1
d140 22
d164 44
d219 2
a285 13
  if (IS_AGGR_TYPE (intype))
    {
      tree rval;
      rval = build_type_conversion (CONVERT_EXPR, type, expr, 1);
      if (rval)
	{
	  if (rval == error_mark_node)
	    cp_error ("conversion of `%E' from `%T' to `%T' is ambiguous",
		      expr, intype, type);
	  return rval;
	}
    }

d288 2
a289 2
      if (type == TREE_TYPE (null_pointer_node))
	return null_pointer_node;
d299 1
a299 1
      expr = convert (type_for_size (POINTER_SIZE, 0), expr);
d317 1
a326 2
      if (type == TREE_TYPE (null_pointer_node))
	return null_pointer_node;
d347 2
d358 3
a360 2
	      cp_error ("type `%T' is ambiguous baseclass of `%s'", TREE_TYPE (type),
				    TYPE_NAME_STRING (TREE_TYPE (intype)));
a376 1
      return build1 (NOP_EXPR, type, expr);
d387 2
a388 1
   CHECKCONST controls if we report error messages on const subversion.  */
d394 1
a394 2
  tree rval, targ;
  int literal_flag = 0;
a396 1
  tree binfo = NULL_TREE;
d399 24
d428 2
a429 1
      binfo = get_binfo (target_type, argtype, 1);
d434 1
a434 294
    }

  /* Pass along const and volatile down into the type. */
  if (TYPE_READONLY (type) || TYPE_VOLATILE (type))
    target_type = cp_build_type_variant (target_type, TYPE_READONLY (type),
					TYPE_VOLATILE (type));
  targ = arg;
  if (TREE_CODE (targ) == SAVE_EXPR)
    targ = TREE_OPERAND (targ, 0);
  while (TREE_CODE (targ) == NOP_EXPR
	 && (TYPE_MAIN_VARIANT (argtype)
	     == TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (targ, 0)))))
    targ = TREE_OPERAND (targ, 0);

  switch (TREE_CODE (targ))
    {
    case INDIRECT_REF:
      /* This is a call to a constructor which did not know what it was
	 initializing until now: it needs to initialize a temporary.  */
      if (TREE_HAS_CONSTRUCTOR (targ))
	{
	  tree temp = build_cplus_new (argtype, TREE_OPERAND (targ, 0), 1);
	  TREE_HAS_CONSTRUCTOR (targ) = 0;
	  return build_up_reference (type, temp, flags, 1);
	}
      /* Let &* cancel out to simplify resulting code.
         Also, throw away intervening NOP_EXPRs.  */
      arg = TREE_OPERAND (targ, 0);
      if (TREE_CODE (arg) == NOP_EXPR || TREE_CODE (arg) == NON_LVALUE_EXPR
	  || (TREE_CODE (arg) == CONVERT_EXPR && TREE_REFERENCE_EXPR (arg)))
	arg = TREE_OPERAND (arg, 0);

      /* in doing a &*, we have to get rid of the const'ness on the pointer
	 value.  Haven't thought about volatile here.  Pointers come to mind
	 here.  */
      if (TREE_READONLY (arg))
	{
	  arg = copy_node (arg);
	  TREE_READONLY (arg) = 0;
	}

      rval = build1 (CONVERT_EXPR, type, arg);
      TREE_REFERENCE_EXPR (rval) = 1;

      /* propagate the const flag on something like:

	 class Base {
	 public:
	   int foo;
	 };

      class Derived : public Base {
      public:
	int bar;
      };

      void func(Base&);

      void func2(const Derived& d) {
	func(d);
      }

        on the d parameter.  The below could have been avoided, if the flags
        were down in the tree, not sure why they are not.  (mrs) */
      /* The below code may have to be propagated to other parts of this
	 switch.  */
      if (TREE_READONLY (targ) && !TREE_READONLY (arg)
	  && (TREE_CODE (arg) == PARM_DECL || TREE_CODE (arg) == VAR_DECL)
	  && TREE_CODE (TREE_TYPE (arg)) == REFERENCE_TYPE
	  && (TYPE_READONLY (target_type) && checkconst))
	{
	  arg = copy_node (arg);
	  TREE_READONLY (arg) = TREE_READONLY (targ);
	}
      literal_flag = TREE_CONSTANT (arg);

      goto done;

      /* Get this out of a register if we happened to be in one by accident.
	 Also, build up references to non-lvalues it we must.  */
      /* For &x[y], return (&) x+y */
    case ARRAY_REF:
      if (mark_addressable (TREE_OPERAND (targ, 0)) == 0)
	return error_mark_node;
      rval = build_binary_op (PLUS_EXPR, TREE_OPERAND (targ, 0),
			      TREE_OPERAND (targ, 1), 1);
      TREE_TYPE (rval) = type;
      if (TREE_CONSTANT (TREE_OPERAND (targ, 1))
	  && staticp (TREE_OPERAND (targ, 0)))
	TREE_CONSTANT (rval) = 1;
      goto done;

    case SCOPE_REF:
      /* Could be a reference to a static member.  */
      {
	tree field = TREE_OPERAND (targ, 1);
	if (TREE_STATIC (field))
	  {
	    rval = build1 (ADDR_EXPR, type, field);
	    literal_flag = 1;
	    goto done;
	  }
      }

      /* We should have farmed out member pointers above.  */
      my_friendly_abort (188);

    case COMPONENT_REF:
      rval = build_component_addr (targ, build_pointer_type (argtype),
				   "attempt to make a reference to bit-field structure member `%s'");
      TREE_TYPE (rval) = type;
      literal_flag = staticp (TREE_OPERAND (targ, 0));

      goto done;

      /* Anything not already handled and not a true memory reference
	 needs to have a reference built up.  Do so silently for
	 things like integers and return values from function,
	 but complain if we need a reference to something declared
	 as `register'.  */

    case RESULT_DECL:
      if (staticp (targ))
	literal_flag = 1;
      TREE_ADDRESSABLE (targ) = 1;
      put_var_into_stack (targ);
      break;

    case PARM_DECL:
#if 0
      if (targ == current_class_decl)
	{
	  error ("address of `this' not available");
/* #if 0 */	  
	  /* This code makes the following core dump the compiler on a sun4,
	     if the code below is used.

	     class e_decl;
	     class a_decl;
	     typedef a_decl* a_ref;

	     class a_s {
	     public:
	       a_s();
	       void* append(a_ref& item);
	     };
	     class a_decl {
	     public:
	       a_decl (e_decl *parent);
	       a_s  generic_s;
	       a_s  decls;
	       e_decl* parent;
	     };

	     class e_decl {
	     public:
	       e_decl();
	       a_s implementations;
	     };

	     void foobar(void *);

	     a_decl::a_decl(e_decl *parent) {
	       parent->implementations.append(this);
	     }
	   */

	  TREE_ADDRESSABLE (targ) = 1; /* so compiler doesn't die later */
	  put_var_into_stack (targ);
	  break;
/* #else */
	  return error_mark_node;
/* #endif */	  
	}
#endif
      /* Fall through.  */
    case VAR_DECL:
    case CONST_DECL:
      if (DECL_REGISTER (targ) && !TREE_ADDRESSABLE (targ)
	  && !DECL_ARTIFICIAL (targ))
	cp_warning ("address needed to build reference for `%D', which is declared `register'",
		    targ);
      else if (staticp (targ))
	literal_flag = 1;

      TREE_ADDRESSABLE (targ) = 1;
      put_var_into_stack (targ);
      break;

    case COMPOUND_EXPR:
      {
	tree real_reference = build_up_reference (type, TREE_OPERAND (targ, 1),
						  LOOKUP_PROTECT, checkconst);
	rval = build (COMPOUND_EXPR, type, TREE_OPERAND (targ, 0), real_reference);
	TREE_CONSTANT (rval) = staticp (TREE_OPERAND (targ, 1));
	return rval;
      }

    case PREINCREMENT_EXPR:
    case PREDECREMENT_EXPR:
    case MODIFY_EXPR:
    case INIT_EXPR:
      {
	tree real_reference = build_up_reference (type, TREE_OPERAND (targ, 0),
						  LOOKUP_PROTECT, checkconst);
	rval = build (COMPOUND_EXPR, type, arg, real_reference);
	TREE_CONSTANT (rval) = staticp (TREE_OPERAND (targ, 0));
	return rval;
      }

    case COND_EXPR:
      return build (COND_EXPR, type,
		    TREE_OPERAND (targ, 0),
		    build_up_reference (type, TREE_OPERAND (targ, 1),
					LOOKUP_PROTECT, checkconst),
		    build_up_reference (type, TREE_OPERAND (targ, 2),
					LOOKUP_PROTECT, checkconst));

      /* Undo the folding... */
    case MIN_EXPR:
    case MAX_EXPR:
      return build (COND_EXPR, type,
		    build (TREE_CODE (targ) == MIN_EXPR ? LT_EXPR : GT_EXPR,
			   boolean_type_node, TREE_OPERAND (targ, 0),
			   TREE_OPERAND (targ, 1)),
		    build_up_reference (type, TREE_OPERAND (targ, 0),
					LOOKUP_PROTECT, checkconst),
		    build_up_reference (type, TREE_OPERAND (targ, 1),
					LOOKUP_PROTECT, checkconst));

    case WITH_CLEANUP_EXPR:
      return build (WITH_CLEANUP_EXPR, type,
		    build_up_reference (type, TREE_OPERAND (targ, 0),
					LOOKUP_PROTECT, checkconst),
		    0, TREE_OPERAND (targ, 2));

    case BIND_EXPR:
      arg = TREE_OPERAND (targ, 1);
      if (arg == NULL_TREE)
	{
	  compiler_error ("({ ... }) expression not expanded when needed for reference");
	  return error_mark_node;
	}
      rval = build1 (ADDR_EXPR, type, arg);
      TREE_REFERENCE_EXPR (rval) = 1;
      return rval;

    default:
      break;
    }

  if (TREE_ADDRESSABLE (targ) == 0)
    {
      tree temp;

      if (TREE_CODE (targ) == CALL_EXPR && IS_AGGR_TYPE (argtype))
	{
	  temp = build_cplus_new (argtype, targ, 1);
	  if (TREE_CODE (temp) == WITH_CLEANUP_EXPR)
	    rval = build (WITH_CLEANUP_EXPR, type,
			  build1 (ADDR_EXPR, type, TREE_OPERAND (temp, 0)),
			  0, TREE_OPERAND (temp, 2));
	  else
	    rval = build1 (ADDR_EXPR, type, temp);
	  goto done;
	}
      else
	{
	  temp = get_temp_name (argtype, 0);
	  if (toplevel_bindings_p ())
	    {
	      /* Give this new temp some rtl and initialize it.  */
	      DECL_INITIAL (temp) = targ;
	      TREE_STATIC (temp) = 1;
	      cp_finish_decl (temp, targ, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);
	      /* Do this after declaring it static.  */
	      rval = build_unary_op (ADDR_EXPR, temp, 0);
	      TREE_TYPE (rval) = type;
	      literal_flag = TREE_CONSTANT (rval);
	      goto done;
	    }
	  else
	    {
	      rval = build_unary_op (ADDR_EXPR, temp, 0);
	      if (binfo && !BINFO_OFFSET_ZEROP (binfo))
		rval = convert_pointer_to (target_type, rval);
	      else
		TREE_TYPE (rval) = type;

	      temp = build (MODIFY_EXPR, argtype, temp, arg);
	      TREE_SIDE_EFFECTS (temp) = 1;
	      return build (COMPOUND_EXPR, type, temp, rval);
	    }
	}
d437 4
a440 18
    rval = build1 (ADDR_EXPR, type, arg);

 done:
  if (TYPE_USES_COMPLEX_INHERITANCE (argtype)
      || TYPE_USES_COMPLEX_INHERITANCE (target_type))
    {
      TREE_TYPE (rval) = build_pointer_type (argtype);
      if (flags & LOOKUP_PROTECT)
	rval = convert_pointer_to (target_type, rval);
      else
	rval
	  = convert_to_pointer_force (build_pointer_type (target_type), rval);
      TREE_TYPE (rval) = type;
      if (TREE_CODE (rval) == PLUS_EXPR || TREE_CODE (rval) == MINUS_EXPR)
	TREE_TYPE (TREE_OPERAND (rval, 0))
	  = TREE_TYPE (TREE_OPERAND (rval, 1)) = type;
    }
  TREE_CONSTANT (rval) = literal_flag;
d475 5
a479 1
      rval_as_conversion = build_type_conversion (CONVERT_EXPR, type, expr, 1);
d505 1
a505 2
	  if (! real_lvalue_p (expr) &&
	      (decl == NULL_TREE || ! TYPE_READONLY (ttl)))
d509 1
a509 1
		cp_pedwarn ("initialization of non-const `%T' from rvalue `%T'",
d512 1
a512 1
		cp_pedwarn ("conversion to `%T' from rvalue `%T'",
d549 13
a561 1
  else if (decl)
d581 2
a582 2
	      (NULL_TREE, constructor_name_full (type),
	       build_tree_list (NULL_TREE, expr), TYPE_BINFO (type),
a589 1
	      extern tree static_aggregates;
d591 2
a592 2
	      init = build_method_call (t, constructor_name_full (type),
					build_tree_list (NULL_TREE, expr),
d606 2
a607 2
	      init = build_method_call (NULL_TREE, constructor_name_full (type),
					build_tree_list (NULL_TREE, expr),
d615 1
a615 1
	      rval = build_cplus_new (type, init, 1);
d633 1
a633 1
	  rval = convert (type, expr);
d647 1
a647 1
      /* If we found a way to convert earlier, then use it. */
d663 2
a664 1
   way down to its lowest form. */
d686 1
d696 2
d699 2
a700 1
  enum access_type access;
d710 1
a710 1
  access = access_public;
d714 2
a715 2
  parmlist = build_tree_list (NULL_TREE, expr);
  parmtypes = tree_cons (NULL_TREE, TREE_TYPE (expr), void_list_node);
d719 2
a720 2
      parmtypes = tree_cons (NULL_TREE, integer_type_node, parmtypes);
      parmlist = tree_cons (NULL_TREE, integer_one_node, parmlist);
d724 2
a725 38
  parmlist = tree_cons (NULL_TREE, integer_zero_node, parmlist);
  parmtypes = tree_cons (NULL_TREE, build_pointer_type (basetype), parmtypes);

#if 0
  method_name = build_decl_overload (name, parmtypes, 1);

  /* constructors are up front.  */
  fndecl = TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (basetype), 0);
  if (TYPE_HAS_DESTRUCTOR (basetype))
    fndecl = DECL_CHAIN (fndecl);

  while (fndecl)
    {
      if (DECL_ASSEMBLER_NAME (fndecl) == method_name)
	{
	  function = fndecl;
	  if (protect)
	    {
	      if (TREE_PRIVATE (fndecl))
		{
		  can_be_private =
		    (basetype == current_class_type
		     || is_friend (basetype, current_function_decl)
		     || purpose_member (basetype, DECL_ACCESS (fndecl)));
		  if (! can_be_private)
		    goto found;
		}
	      else if (TREE_PROTECTED (fndecl))
		{
		  if (! can_be_protected)
		    goto found;
		}
	    }
	  goto found_and_ok;
	}
      fndecl = DECL_CHAIN (fndecl);
    }
#endif
a729 2
  if (TYPE_HAS_DESTRUCTOR (basetype))
    fndecl = DECL_CHAIN (fndecl);
d734 2
a735 2
    struct candidate *candidates =
      (struct candidate *) alloca ((decl_list_length (fndecl)+1) * sizeof (struct candidate));
d752 1
a752 1
		  access = access_private;
d754 1
a754 1
		  access = access_protected;
d756 1
a756 1
		  access = access_public;
d759 1
a759 1
	      access = access_public;
d761 1
a761 1
	    if (access == access_private
d765 1
a765 1
		: access == access_protected
d776 1
a776 1
		if (access == access_private)
d795 1
a795 1
		 rank_for_overload); /* int (*compar)() */
d826 1
a826 1
  if (access == access_private)
d835 1
a835 1
  if (access == access_protected)
a851 1
  function = default_conversion (function);
d853 4
a856 6
  result = build_nt (CALL_EXPR, function,
		     convert_arguments (NULL_TREE, TYPE_ARG_TYPES (fntype),
					parmlist, NULL_TREE, LOOKUP_NORMAL),
		     NULL_TREE);
  TREE_TYPE (result) = TREE_TYPE (fntype);
  TREE_SIDE_EFFECTS (result) = 1;
d866 1
d887 3
a889 1
  ptr_type = build_pointer_type (type);
d933 1
d949 9
d963 1
a963 1
cp_convert (type, expr, convtype, flags)
d970 2
a971 2
  if (TREE_CODE (e) == ERROR_MARK
      || TREE_CODE (TREE_TYPE (e)) == ERROR_MARK)
d987 1
a987 1
    return convert (type, TREE_OPERAND (e, 0));
d1013 2
a1014 2
      enum tree_code form = TREE_CODE (intype);
      /* enum = enum, enum = int, enum = float are all errors. */
d1017 2
a1018 2
	  && ARITHMETIC_TYPE_P (intype)
	  && ! (convtype & CONV_STATIC))
d1038 7
a1044 1
	return truthvalue_conversion (e);
d1050 1
a1050 1
  if (code == REAL_TYPE)
d1063 4
a1066 1
      return fold (convert_to_real (type, e));
d1110 1
a1110 5
      if (IS_AGGR_TYPE (dtype) && ! DERIVED_FROM_P (type, dtype)
	  && TYPE_HAS_CONVERSION (dtype))
	conversion = build_type_conversion (CONVERT_EXPR, type, e, 1);

      if (conversion == error_mark_node)
d1112 14
a1125 3
	  if (flags & LOOKUP_COMPLAIN)
	    error ("ambiguous pointer conversion");
	  return conversion;
d1127 12
d1140 9
a1148 7
      if (TYPE_HAS_CONSTRUCTOR (type))
	ctor = build_method_call (NULL_TREE, constructor_name_full (type),
				  build_tree_list (NULL_TREE, e),
				  TYPE_BINFO (type),
				  (flags & LOOKUP_NORMAL) | LOOKUP_SPECULATIVELY
				  | (convtype&CONV_NONCONVERTING ? 0 : LOOKUP_ONLYCONVERTING)
				  | (conversion ? LOOKUP_NO_CONVERSION : 0));
d1150 8
a1157 8
      if (ctor == error_mark_node)
	{
	  if (flags & LOOKUP_COMPLAIN)
	    cp_error ("in conversion to type `%T'", type);
	  if (flags & LOOKUP_SPECULATIVELY)
	    return NULL_TREE;
	  return error_mark_node;
	}
d1159 15
a1173 14
      if (conversion && ctor)
	{
	  if (flags & LOOKUP_COMPLAIN)
	    error ("both constructor and type conversion operator apply");
	  if (flags & LOOKUP_SPECULATIVELY)
	    return NULL_TREE;
	  return error_mark_node;
	}
      else if (conversion)
	return conversion;
      else if (ctor)
	{
	  ctor = build_cplus_new (type, ctor, 0);
	  return ctor;
d1197 12
a1208 1
   not permitted by the language being compiled.  */
d1214 16
a1229 1
  return cp_convert (type, expr, CONV_OLD_CONVERT, LOOKUP_NORMAL);
d1232 1
a1232 1
/* Like convert, except permit conversions to take place which
d1235 1
d1262 1
a1262 1
      /* compatible pointer to member functions. */
d1266 1
a1266 1
  return cp_convert (type, e, CONV_C_CAST|convtype, LOOKUP_NORMAL);
d1270 1
d1302 1
a1302 1
  return convert (xtype, rval);
d1334 4
d1360 3
a1362 1
      if (winner && TREE_PURPOSE (winner) == TREE_PURPOSE (conv))
d1365 1
a1365 1
      if (can_convert (xtype, TREE_VALUE (conv)))
d1373 2
a1374 2
		  cp_error ("  candidate conversions include `%T' and `%T'",
			    TREE_VALUE (winner), TREE_VALUE (conv));
d1379 1
a1379 1
	    winner = conv;
d1385 1
a1385 1
				    TREE_PURPOSE (winner), for_sure);
d1417 1
a1417 1
	/* else fall through... */
d1443 1
d1445 1
a1445 1
      if (winner && TREE_PURPOSE (winner) == TREE_PURPOSE (conv))
d1448 1
a1448 1
      candidate = TREE_VALUE (conv);
d1473 2
a1474 2
		  cp_error ("  candidate conversions include `%T' and `%T'",
			    TREE_VALUE (winner), TREE_VALUE (conv));
d1479 1
a1479 1
	    winner = conv;
d1484 7
a1490 2
    return build_type_conversion_1 (TREE_VALUE (winner), basetype, expr,
				    TREE_PURPOSE (winner), 1);
d1501 1
d1607 2
a1608 2
      *arg1 = convert (boolean_type_node, *arg1);
      *arg2 = convert (boolean_type_node, *arg2);
d1625 2
a1626 1
/* Implements integral promotion (4.1) and float->double promotion. */
d1661 1
a1661 2
      /* Traditionally, unsignedness is preserved in default promotions.
         Otherwise, retain unsignedness if really not getting bigger.  */
d1663 1
a1663 2
	  && (flag_traditional
	      || TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)))
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
   Copyright (C) 1987, 88, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
a28 1
#include <stdio.h>
d35 2
a36 13
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

extern tree static_aggregates;

static tree build_thunk PROTO((tree, tree));
static tree convert_fn_ptr PROTO((tree, tree));
static tree cp_convert_to_pointer PROTO((tree, tree));
static tree convert_to_pointer_force PROTO((tree, tree));
static tree build_up_reference PROTO((tree, tree, int, int));
static tree build_type_conversion_1 PROTO((tree, tree, tree, tree,
					   int));
a63 1

a80 1

a84 1
#if 0				/* We don't use thunks for pmfs.  */
d97 1
a97 1
	  /* ARM 4.8 restriction.  */
a106 1
#endif
a115 1

a122 22
  if (IS_AGGR_TYPE (intype))
    {
      tree rval;

      intype = complete_type (intype);
      if (TYPE_SIZE (intype) == NULL_TREE)
	{
	  cp_error ("can't convert from incomplete type `%T' to `%T'",
		    intype, type);
	  return error_mark_node;
	}

      rval = build_type_conversion (CONVERT_EXPR, type, expr, 1);
      if (rval)
	{
	  if (rval == error_mark_node)
	    cp_error ("conversion of `%E' from `%T' to `%T' is ambiguous",
		      expr, intype, type);
	  return rval;
	}
    }

a124 44

  /* Handle anachronistic conversions from (::*)() to cv void* or (*)().  */
  if (TREE_CODE (type) == POINTER_TYPE
      && (TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE
	  || TYPE_MAIN_VARIANT (TREE_TYPE (type)) == void_type_node))
    {
      /* Allow an implicit this pointer for pointer to member
	 functions.  */
      if (TYPE_PTRMEMFUNC_P (intype))
	{
	  tree decl, basebinfo;
	  tree fntype = TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (intype));
	  tree t = TYPE_METHOD_BASETYPE (fntype);

	  if (current_class_type == 0
	      || get_base_distance (t, current_class_type, 0, &basebinfo)
	      == -1)
	    {
	      decl = build1 (NOP_EXPR, t, error_mark_node);
	    }
	  else if (current_class_ptr == 0)
	    decl = build1 (NOP_EXPR, t, error_mark_node);
	  else
	    decl = current_class_ref;

	  expr = build (OFFSET_REF, fntype, decl, expr);
	}

      if (TREE_CODE (expr) == OFFSET_REF
	  && TREE_CODE (TREE_TYPE (expr)) == METHOD_TYPE)
	expr = resolve_offset_ref (expr);
      if (TREE_CODE (TREE_TYPE (expr)) == METHOD_TYPE)
	expr = build_addr_func (expr);
      if (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE)
	{
	  if (TREE_CODE (TREE_TYPE (TREE_TYPE (expr))) == METHOD_TYPE)
	    if (pedantic || warn_pmf2ptr)
	      cp_pedwarn ("converting from `%T' to `%T'", TREE_TYPE (expr),
			  type);
	  return build1 (NOP_EXPR, type, expr);
	}
      intype = TREE_TYPE (expr);
    }

a135 2
	  && IS_AGGR_TYPE (TREE_TYPE (type))
	  && IS_AGGR_TYPE (TREE_TYPE (intype))
d201 13
d216 2
a217 2
      if (TREE_CODE (TREE_TYPE (type)) == METHOD_TYPE)
	return build_ptrmemfunc (type, expr, 0);
d227 1
a227 1
      expr = cp_convert (type_for_size (POINTER_SIZE, 0), expr);
a244 1

d254 2
a275 2
	  && IS_AGGR_TYPE (TREE_TYPE (type))
	  && IS_AGGR_TYPE (TREE_TYPE (intype))
d285 2
a286 3
	      cp_error ("type `%T' is ambiguous baseclass of `%s'",
			TREE_TYPE (type),
			TYPE_NAME_STRING (TREE_TYPE (intype)));
d303 1
d314 1
a314 2
   DIRECT_BIND in FLAGS controls how any temporaries are generated.  */

d320 2
a321 1
  tree rval;
d324 1
a326 24

  if ((flags & DIRECT_BIND) && ! real_lvalue_p (arg))
    {
      tree targ = arg;
      if (toplevel_bindings_p ())
	arg = get_temp_name (argtype, 1);
      else
	{
	  arg = pushdecl (build_decl (VAR_DECL, NULL_TREE, argtype));
	  DECL_ARTIFICIAL (arg) = 1;
	}
      DECL_INITIAL (arg) = targ;
      cp_finish_decl (arg, targ, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);
    }
  else if (!(flags & DIRECT_BIND) && ! lvalue_p (arg))
    {
      tree slot = build_decl (VAR_DECL, NULL_TREE, argtype);
      arg = build (TARGET_EXPR, argtype, slot, arg, NULL_TREE, NULL_TREE);
    }

  /* If we had a way to wrap this up, and say, if we ever needed it's
     address, transform all occurrences of the register, into a memory
     reference we could win better.  */
  rval = build_unary_op (ADDR_EXPR, arg, 1);
d332 1
a332 2
      /* We go through get_binfo for the access control.  */
      tree binfo = get_binfo (target_type, argtype, 1);
d337 294
a630 1
      rval = convert_pointer_to_real (binfo, rval);
d633 18
a650 4
    rval
      = convert_to_pointer_force (build_pointer_type (target_type), rval);
  rval = build1 (NOP_EXPR, type, rval);
  TREE_CONSTANT (rval) = TREE_CONSTANT (TREE_OPERAND (rval, 0));
d685 1
a685 5
      if (flag_ansi_overloading)
	rval_as_conversion
	  = build_type_conversion (CONVERT_EXPR, reftype, expr, 1);
      else
	rval_as_conversion = build_type_conversion (CONVERT_EXPR, type, expr, 1);
d711 2
a712 1
	  if (! real_lvalue_p (expr) && ! TYPE_READONLY (ttl))
d716 1
a716 1
		cp_pedwarn ("initialization of non-const reference `%#T' from rvalue `%T'",
d719 1
a719 1
		cp_pedwarn ("conversion to non-const `%T' from rvalue `%T'",
d756 1
a756 13
  else if (flag_ansi_overloading)
    {
      rval = convert_for_initialization (NULL_TREE, type, expr, flags,
					 "converting", 0, 0);
      if (rval == error_mark_node)
	return error_mark_node;
      rval = build_up_reference (reftype, rval, flags, 1);

      if (rval && ! TYPE_READONLY (TREE_TYPE (reftype)))
	cp_pedwarn ("initializing non-const `%T' with `%T' will use a temporary",
		    reftype, intype);
    }
  else
d776 2
a777 2
	      (NULL_TREE, ctor_identifier,
	       build_expr_list (NULL_TREE, expr), TYPE_BINFO (type),
d785 1
d787 2
a788 2
	      init = build_method_call (t, ctor_identifier,
					build_expr_list (NULL_TREE, expr),
d802 2
a803 2
	      init = build_method_call (NULL_TREE, ctor_identifier,
					build_expr_list (NULL_TREE, expr),
d811 1
a811 1
	      rval = build_cplus_new (type, init);
d829 1
a829 1
	  rval = cp_convert (type, expr);
d843 1
a843 1
      /* If we found a way to convert earlier, then use it.  */
d859 1
a859 2
   way down to its lowest form.  */

a880 1

a889 2
#if 0
  /* See code below that used this.  */
d891 1
a891 2
#endif
  tree access;
d901 1
a901 1
  access = access_public_node;
d905 2
a906 2
  parmlist = build_expr_list (NULL_TREE, expr);
  parmtypes = scratch_tree_cons (NULL_TREE, TREE_TYPE (expr), void_list_node);
d910 2
a911 2
      parmtypes = expr_tree_cons (NULL_TREE, integer_type_node, parmtypes);
      parmlist = scratch_tree_cons (NULL_TREE, integer_one_node, parmlist);
d915 38
a952 2
  parmlist = expr_tree_cons (NULL_TREE, integer_zero_node, parmlist);
  parmtypes = scratch_tree_cons (NULL_TREE, build_pointer_type (basetype), parmtypes);
d957 2
d963 2
a964 2
    struct candidate *candidates
      = (struct candidate *) alloca ((decl_list_length (fndecl)+1) * sizeof (struct candidate));
d981 1
a981 1
		  access = access_private_node;
d983 1
a983 1
		  access = access_protected_node;
d985 1
a985 1
		  access = access_public_node;
d988 1
a988 1
	      access = access_public_node;
d990 1
a990 1
	    if (access == access_private_node
d994 1
a994 1
		: access == access_protected_node
d1005 1
a1005 1
		if (access == access_private_node)
d1024 1
a1024 1
		 (int (*) PROTO((const void *, const void *))) rank_for_overload); /* int (*compar)() */
d1055 1
a1055 1
  if (access == access_private_node)
d1064 1
a1064 1
  if (access == access_protected_node)
d1081 1
d1083 6
a1088 4
  parmlist = convert_arguments (NULL_TREE, TYPE_ARG_TYPES (fntype),
				parmlist, NULL_TREE, LOOKUP_NORMAL);

  result = build_call (function, TREE_TYPE (fntype), parmlist);
a1097 1

d1118 1
a1118 3
  ptr_type = cp_build_type_variant (type, TYPE_READONLY (TREE_TYPE (intype)),
				    TYPE_VOLATILE (TREE_TYPE (intype)));
  ptr_type = build_pointer_type (ptr_type);
a1161 1

a1176 9
/* C++ conversions, preference to static cast conversions.  */

tree
cp_convert (type, expr)
     tree type, expr;
{
  return ocp_convert (type, expr, CONV_OLD_CONVERT, LOOKUP_NORMAL);
}

d1182 1
a1182 1
ocp_convert (type, expr, convtype, flags)
d1189 2
a1190 2
  if (e == error_mark_node
      || TREE_TYPE (e) == error_mark_node)
d1206 1
a1206 1
    return cp_convert (type, TREE_OPERAND (e, 0));
d1232 2
a1233 2
      /* enum = enum, enum = int, enum = float, (enum)pointer are all
         errors.  */
d1236 2
a1237 2
	  && ((ARITHMETIC_TYPE_P (intype) && ! (convtype & CONV_STATIC))
	      || (TREE_CODE (intype) == POINTER_TYPE)))
d1257 1
a1257 7
	{
	  /* Common Ada/Pascal programmer's mistake.  We always warn
             about this since it is so bad.  */
	  if (TREE_CODE (expr) == FUNCTION_DECL)
	    cp_warning ("the address of `%D', will always be `true'", expr);
	  return truthvalue_conversion (e);
	}
d1263 1
a1263 1
  if (code == REAL_TYPE || code == COMPLEX_TYPE)
d1276 1
a1276 4
      if (code == REAL_TYPE)
	return fold (convert_to_real (type, e));
      else if (code == COMPLEX_TYPE)
	return fold (convert_to_complex (type, e));
d1320 5
a1324 1
      if (flag_ansi_overloading)
d1326 3
a1328 14
	  ctor = e;
	  
	  if ((flags & LOOKUP_ONLYCONVERTING)
	      && ! (IS_AGGR_TYPE (dtype) && DERIVED_FROM_P (type, dtype)))
	    {
	      ctor = build_user_type_conversion (type, ctor, flags);
	      flags |= LOOKUP_NO_CONVERSION;
	    }
	  if (ctor)
	    ctor = build_method_call (NULL_TREE, ctor_identifier,
				      build_expr_list (NULL_TREE, ctor),
				      TYPE_BINFO (type), flags);
	  if (ctor)
	    return build_cplus_new (type, ctor);
a1329 5
      else
	{
	  if (IS_AGGR_TYPE (dtype) && ! DERIVED_FROM_P (type, dtype)
	      && TYPE_HAS_CONVERSION (dtype))
	    conversion = build_type_conversion (CONVERT_EXPR, type, e, 1);
d1331 7
a1337 6
	  if (conversion == error_mark_node)
	    {
	      if (flags & LOOKUP_COMPLAIN)
		error ("ambiguous pointer conversion");
	      return conversion;
	    }
d1339 8
a1346 18
	  if (TYPE_HAS_CONSTRUCTOR (complete_type (type)))
	    ctor = build_method_call (NULL_TREE, ctor_identifier,
				      build_expr_list (NULL_TREE, e),
				      TYPE_BINFO (type),
				      (flags & LOOKUP_NORMAL)
				      | LOOKUP_SPECULATIVELY
				      | (flags & LOOKUP_ONLYCONVERTING)
				      | (flags & LOOKUP_NO_CONVERSION)
				      | (conversion ? LOOKUP_NO_CONVERSION : 0));

	  if (ctor == error_mark_node)
	    {
	      if (flags & LOOKUP_COMPLAIN)
		cp_error ("in conversion to type `%T'", type);
	      if (flags & LOOKUP_SPECULATIVELY)
		return NULL_TREE;
	      return error_mark_node;
	    }
d1348 14
a1361 15
	  if (conversion && ctor)
	    {
	      if (flags & LOOKUP_COMPLAIN)
		error ("both constructor and type conversion operator apply");
	      if (flags & LOOKUP_SPECULATIVELY)
		return NULL_TREE;
	      return error_mark_node;
	    }
	  else if (conversion)
	    return conversion;
	  else if (ctor)
	    {
	      ctor = build_cplus_new (type, ctor);
	      return ctor;
	    }
d1385 1
a1385 12
   not permitted by the language being compiled.

   Most of this routine is from build_reinterpret_cast.

   The backend cannot call cp_convert (what was convert) because
   conversions to/from basetypes may involve memory references
   (vbases) and adding or subtracting small values (multiple
   inheritance), but it calls convert from the constant folding code
   on subtrees of already build trees after it has ripped them apart.

   Also, if we ever support range variables, we'll probably also have to
   do a little bit more work.  */
d1391 1
a1391 16
  tree intype;

  if (type == error_mark_node || expr == error_mark_node)
    return error_mark_node;

  intype = TREE_TYPE (expr);

  if (POINTER_TYPE_P (type) && POINTER_TYPE_P (intype))
    {
      if (TREE_READONLY_DECL_P (expr))
	expr = decl_constant_value (expr);
      return fold (build1 (NOP_EXPR, type, expr));
    }

  return ocp_convert (type, expr, CONV_OLD_CONVERT,
		      LOOKUP_NORMAL|LOOKUP_NO_CONVERSION);
d1394 1
a1394 1
/* Like cp_convert, except permit conversions to take place which
a1396 1

d1423 1
a1423 1
      /* compatible pointer to member functions.  */
d1427 1
a1427 1
  return ocp_convert (type, e, CONV_C_CAST|convtype, LOOKUP_NORMAL);
a1430 1

d1462 1
a1462 1
  return cp_convert (xtype, rval);
a1493 4
  if (flag_ansi_overloading)
    return build_user_type_conversion
      (xtype, expr, for_sure ? LOOKUP_NORMAL : 0);

d1516 1
a1516 3
      tree cand = TREE_VALUE (conv);

      if (winner && winner == cand)
d1519 1
a1519 1
      if (can_convert (xtype, TREE_TYPE (TREE_TYPE (cand))))
d1527 2
a1528 2
		  cp_error ("  candidate conversions include `%D' and `%D'",
			    winner, cand);
d1533 1
a1533 1
	    winner = cand;
d1539 1
a1539 1
				    DECL_NAME (winner), for_sure);
d1571 1
a1571 1
	/* else fall through...  */
a1596 1
      tree cand = TREE_VALUE (conv);
d1598 1
a1598 1
      if (winner && winner == cand)
d1601 1
a1601 1
      candidate = TREE_TYPE (TREE_TYPE (cand));
d1626 2
a1627 2
		  cp_error ("  candidate conversions include `%D' and `%D'",
			    winner, cand);
d1632 1
a1632 1
	    winner = cand;
d1637 2
a1638 7
    {
      tree type = TREE_TYPE (TREE_TYPE (winner));
      if (TREE_CODE (type) == REFERENCE_TYPE)
	type = TREE_TYPE (type);
      return build_type_conversion_1 (type, basetype, expr,
				      DECL_NAME (winner), 1);
    }
a1648 1

d1754 2
a1755 2
      *arg1 = cp_convert (boolean_type_node, *arg1);
      *arg2 = cp_convert (boolean_type_node, *arg2);
d1772 1
a1772 2
/* Implements integral promotion (4.1) and float->double promotion.  */

d1807 2
a1808 1
      /* Retain unsignedness if really not getting bigger.  */
d1810 2
a1811 1
	  && TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node))
@

