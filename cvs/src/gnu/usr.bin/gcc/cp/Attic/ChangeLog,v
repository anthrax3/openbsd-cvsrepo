head	1.4;
access;
symbols
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	FSF_2_8_1:1.1.1.3
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.4
date	99.05.26.16.27.52;	author espie;	state dead;
branches;
next	1.3;

1.3
date	98.03.08.18.30.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.03.03.21.34.07;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.06.03;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.06.03;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.25.10;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	98.03.08.18.09.32;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@So long, and thanks for all the bugs.
@
text
@Mon Nov 24 12:15:55 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (mark_addressable): Don't assume a FUNCTION_DECL
	has DECL_LANG_SPECIFIC.

Mon Dec  8 23:17:13 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (copy_args_p): Handle copy elision for types with virtual
 	bases.
  	* call.c (build_over_call): Likewise.

Tue Dec  2 01:37:19 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* exception.cc (__cp_pop_exception): Lose handler arg.
	* except.c (do_pop_exception): Likewise.
	(push_eh_cleanup): Let the cleanup mechanism supply the handler.
	(expand_end_catch_block): Likewise.

Sun Feb  8 23:47:38 1998  scott snyder  <sss@@d0linux01.fnal.gov>

	* method.c (make_thunk): Avoid name buffer overflow.

Fri Feb  6 21:32:25 1998  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>

	* config-lang.in (diff_excludes): Use basename only.

Sun Jan 25 13:20:00 1998  Jason Merrill  <jason@@rhino.cygnus.com>

	* decl.c (cp_finish_decl): When bailing on a comdat variable, also
	unset DECL_NOT_REALLY_EXTERN.

Mon Dec 22 17:46:17 1997  Mark Mitchell  <mmitchell@@usa.net>

	* method.c (build_overload_name): Fix mangling for __null.

Sat Dec 20 13:00:30 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_decl): Defer all templates but inline functions.

Fri Dec 19 09:37:26 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h (struct lang_decl_flags): Add comdat.
	(DECL_COMDAT): New macro.
	* decl.c (duplicate_decls): Propagate it.
	(cp_finish_decl): Handle it.
	* decl2.c (import_export_decl): Just set DECL_COMDAT on VAR_DECLs.

	* except.c (expand_start_catch_block): suspend_momentary for the
	terminate handler.

Sat Dec 13 09:23:54 1997  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>

	* Make-lang.in (g++.c, cxxmain.o): Use $(LN).

Wed Dec  3 08:47:27 1997  Paul Eggert  <eggert@@twinsun.com>

	* pt.c (check_explicit_specialization): Fix misspelling in
	diagnostic: `preceeded'.
	* typeck.c (get_delta_difference): Fix misspelling in diagnostic:
	`conversiona'.

Fri Nov 28 12:35:19 1997  Scott Christley  <scottc@@net-community.com>

	* repo.c: Prototype rindex only if needed.
	* xref.c: Likewise.

Thu Nov 27 09:39:31 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c: Call terminate without caching so many bits.

	* class.c: Remove static pending_hard_virtuals.
	(add_virtual_function): Take pointers to pending_virtuals
	and pending_hard_virtuals.
	(finish_struct_1): Pass them.  Declare pending_hard_virtuals.

1997-11-26  Mark Mitchell  <mmitchell@@usa.net>

	* pt.c (unify): Handle `void' template parameters in
	specializations.

Wed Nov 26 20:28:49 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (build_dynamic_cast): Handle template case here.
	(build_dynamic_cast_1): Not here.

	* typeck2.c (digest_init): Make copies where appropriate.

	* decl2.c (delete_sanity): resolve_offset_ref.

	* except.c (expand_throw): Call mark_used on the destructor.

	* except.c (expand_start_catch_block): Fix catching a reference
	to pointer.

Tue Nov 25 11:28:21 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Copy size to the saveable obstack.

Wed Nov 26 15:13:48 1997  Jeffrey A Law  (law@@cygnus.com)

	* lex.c (lang_init): Enable flag_exceptions by default if no
	command line switch was specified.

Mon Nov 24 12:15:55 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Stick a CLEANUP_POINT_EXPR inside the
 	TRY_CATCH_EXPR for now.

	* exception.cc (struct cp_eh_info): Add handlers field.
	(__cp_push_exception): Initialize it.
	(__cp_pop_exception): Decrement it.  Don't pop unless it's 0.
	(__throw_bad_exception): Remove.
	* except.c (call_eh_info): Add handlers field.
	(get_eh_handlers): New fn.
	(push_eh_cleanup): Increment handlers.

Fri Nov 21 12:22:07 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (expand_start_catch_block): We only need the rethrow
 	region for non-sjlj exceptions.
	(expand_end_catch_block): Likewise.  Use outer_context_label_stack.

Thu Nov 20 14:40:17 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (build_decl_overload_real): Don't mess with global 
	placement delete.

	* init.c (build_new): Check for null throw spec, not nothrow_t.

	* decl.c (duplicate_decls): Don't complain about different exceptions
	from an internal declaration.

	* call.c (build_op_delete_call): Fix check for member fns again.

	* decl2.c (import_export_decl): Interface hackery affects
	virtual synthesized methods.

Wed Nov 19 18:24:14 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (start_decl): Don't just complain about a mismatched 
	scope, fix it.

	* decl.c (make_implicit_typename): Handle case where t is not
 	actually from context.
	* tree.c (get_type_decl): Lose identifier case.
	* spew.c (yylex): Lose useless call to identifer_typedecl_value.
	* parse.y (nonnested_type): Just use lookup_name.
	(complex_type_name): Just use IDENTIFIER_GLOBAL_VALUE.

Wed Nov 19 10:39:27 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (make_implicit_typename): New fn.
	(lookup_name_real): Use it.  Use current_class_type as the context.

Mon Nov 17 23:42:03 1997  Bruno Haible <haible@@ilog.fr>

	* pt.c (do_poplevel): Don't prohibit jumps into this contour.

Mon Nov 17 02:01:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* friend.c (do_friend): Warn about non-template friends in templates.

	* call.c (build_op_delete_call): Fix handling of inherited delete.

	* search.c (dfs_record_inheritance): Ignore template type parms.

Sat Nov 15 00:30:51 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_op): Fix copy error.
	(build_op_new_call): New fn.
	(build_op_delete_call): New fn.
	* cp-tree.h: Declare them.
	* init.c (build_new): Use them.  Support placement delete.
	(build_x_delete): Use build_op_delete_call.
	(build_delete): Likewise.
	* decl2.c (delete_sanity): Likewise.
	(coerce_delete_type): Don't complain about placement delete.

Thu Nov 13 01:52:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_function_call): Remove unused 'obj' parm.
	* cp-tree.h, typeck.c: Adjust.

	* init.c (build_new): Make the cleanup last longer.
	(expand_vec_init): Call do_pending_stack_adjust.

Wed Nov 12 11:04:33 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (do_type_instantiation): Fix typo.
	(mark_class_instantiated): If we support one_only but not weak 
	symbols, don't mark this as known.

	* init.c (build_new): Handle vec delete in EH cleanup.

Wed Nov 12 08:11:55 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>

	* call.c (build_method_call): Call complete_type before checking
 	for destructor.

Wed Nov 12 00:48:16 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Handle freeing allocated memory when the
	constructor throws.

	* call.c (build_new_method_call): Fix flags arg.

	* pt.c (do_type_instantiation): Don't try to instantiate
	member templates.
	(mark_decl_instantiated): If we support one_only but not
	weak symbols, mark this one_only.
	* decl2.c (import_export_vtable): Don't defer handling of vtables
	if MULTIPLE_SYMBOL_SPACES.

Tue Nov 11 12:02:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (expand_end_catch_block): Lose call to __sjpopnthrow.

Tue Nov 11 02:53:44 1997  Jason Merrill  <jason@@lasher.cygnus.com>

	* except.c (do_pop_exception): Return a value.

Mon Nov 10 20:25:31 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_method_call): Handle getting a
 	TEMPLATE_ID_EXPR around a TEMPLATE_DECL.  Don't look for a field
 	if we got template parms.
	* typeck.c (build_x_function_call): Remember the TEMPLATE_ID_EXPR,
 	not just the args.
	* decl2.c (build_expr_from_tree): Tweak last change.
	* pt.c (tsubst_copy): Use get_first_fn instead of TREE_VALUE.
	(maybe_fold_nontype_arg): Split out from tsubst_copy.
	* tree.c (get_first_fn): Just return a TEMPLATE_ID_EXPR.

Mon Nov 10 20:08:38 1997  Kriang Lerdsuwanakij <lerdsuwa@@scf-fs.usc.edu>

	* pt.c (tsubst_copy): Handle explicit template arguments in 
	function calls.
	* typeck.c (build_x_function_call): Likewise.
	* decl2.c (build_expr_from_tree): Lookup function name if it 
	hasn't been done.

	* pt.c (tsubst): Instantiate template functions properly when 
	template parameter does not appear in function arguments and return 
	type.
	(comp_template_args): Handle member templates required by tsubst.

Mon Nov 10 20:08:29 1997  Bruno Haible  <bruno@@linuix.mathematik.uni-karlsruhe.de>

	* pt.c (coerce_template_parms): Tweak error message.

Mon Nov 10 03:04:20 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	Complete nested exception support.
	* except.c (do_pop_exception): Split out...
	(push_eh_cleanup): From here.  Handle the EH region by hand.
	(expand_start_catch_block): Add a new level for the catch parm.
	Move the rethrow region outside the two cleanup regions.
	Protect the initializer for the catch parm with terminate.
	(expand_end_catch_block): Likewise.  End the region for the eh_cleanup.
	* exception.cc (__cp_pop_exception): Now takes two parms.  Handle
	popping off the middle of the stack.
	* tree.c (lvalue_p, real_lvalue_p): Handle TRY_CATCH_EXPR, 
	WITH_CLEANUP_EXPR, and UNSAVE_EXPR.
	(build_cplus_new): Only wrap CALL_EXPRs.
	* init.c (expand_default_init): Handle a TRY_CATCH_EXPR around 
	the constructor call.

Sun Nov  9 18:00:26 1997  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>

	* Make-lang.in (c++.distdir): Make inc subdirectory.

Fri Nov  7 11:57:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Put back some code.

Thu Nov  6 11:28:14 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Remove redundant code.
	* method.c (emit_thunk): Don't let the backend defer generic thunks.

Wed Nov  5 23:52:50 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (call_eh_info): Split out...
	(push_eh_info): From here.
	(expand_builtin_throw): Use it.
	(expand_start_catch_block): Move region start back.

Tue Nov  4 13:45:10 1997  Doug Evans  <devans@@canuck.cygnus.com>

	* lex.c (MULTIBYTE_CHARS): #undef if cross compiling.
	(real_yylex): Record wide strings using target endianness, not host.

1997-11-03  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* repo.c (rindex): Add decl unconditionally.
	(get_base_filename, open_repo_file): Don't cast rindex.
	* xref.c (rindex): Add decl unconditionally.
	(index): Remove unused decl.
	(open_xref_file): Don't cast rindex.

Sun Nov  2 15:04:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (build_vbase_path): Propagate the result type properly.

1997-11-01  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* lex.c (FILE_NAME_NONDIRECTORY): Delete macro.
	(file_name_nondirectory): New function, doing the same as the macro.
	(set_typedecl_interface_info): Use it instead of the macro.
	(check_newline): Likewise.
	(handle_cp_pragma): Likewise.

	* repo.c (get_base_filename): Cast result of rindex to char*.
	(open_repo_file): Likewise.
	* xref.c (open_xref_file): Likewise.
	* error.c (dump_char): Make its arg int, not char.

	* except.c (expand_builtin_throw) [!DWARF2_UNWIND_INFO]: Replace
	remaining use of saved_throw_type with a call to get_eh_type.

1997-10-31  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* except.c (push_eh_info): Pass the number of fields - 1 down, not
	the exact number of fields.

Fri Oct 31 01:47:57 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	Support for nested exceptions.
	* tinfo2.cc (__is_pointer): New fn.
	* exception.cc (struct cp_eh_info): Define.
	(__cp_exception_info, __uncatch_exception): New fns.
	(__cp_push_exception, __cp_pop_exception): New fns.
	* except.c: Lose saved_throw_{type,value,cleanup,in_catch}.
 	Lose empty_fndecl.
	(init_exception_processing): Likewise.  __eh_pc is now external.
	(push_eh_info): New fn.
	(get_eh_{info,value,type,caught}): New fns.
	(push_eh_cleanup): Just call __cp_pop_exception.
	(expand_start_catch_block): Use push_eh_info.  Start the eh region
	sooner.
	(expand_end_eh_spec): Use push_eh_info.
	(expand_throw): Call __cp_push_exception to set up the exception info.
	Just pass the destructor or 0 as the cleanup.  Call __uncatch_exception
	when we rethrow.
	(expand_builtin_throw): Don't refer to empty_fndecl.

Sun Oct 26 01:28:29 1997  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>

	* typeck.c (rationalize_conditional_expr): Handle {MIN,MAX}_EXPR.
	(unary_complex_lvalue): Call it for {MIN,MAX}_EXPR.

	* decl.c (init_decl_processing): Call using_eh_for_cleanups.

Sun Oct 26 01:52:52 1997  Jeffrey A Law  (law@@cygnus.com)

	* Makefile.in (g++): Depend on prefix.o.  Link in prefix.o.

Thu Oct 23 02:01:30 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_decl): SET_DECL_IMPLICIT_INSTANTIATION on new decl.

1997-10-22  Brendan Kehoe  <brendan@@cygnus.com>

	* method.c (build_template_parm_names, build_decl_overload_real):
	Add static to definitions.
	* pt.c (add_to_template_args, note_template_header,
	processing_explicit_specialization, type_unification_real): Likewise.
	({determine,check}_explicit_specialization): Use a single string for
	error messages.

Mon Oct 20 12:06:34 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (expand_exception_blocks): Call do_pending_stack_adust.
	(expand_end_catch_block): Likewise.
	(expand_end_eh_spec): Likewise.

Mon Oct 20 11:44:20 1997  Mark Mitchell  <mmitchell@@usa.net>

	* decl.c (duplicate_decls): Handle template specializations
	correctly. 
	* error.c (dump_function_name): Fix printing of specializations of
	member functions that are not member templates.
	* cp-tree.h (processing_specialization): Make global.
	* pt.c (processing_specialization): Likewise.
	* lex.c (cons_up_default_function): Save and restore
	processing_specialization to avoid confusion.
	
Mon Oct 20 10:52:22 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (init_decl_processing): Give null_node unknown* type.
	* typeck.c (comp_target_types): Handle UNKNOWN_TYPE.
	(common_type): Likewise.
	* error.c (args_as_string): Recognize null_node.

Thu Oct 16 15:31:09 1997  Judy Goldberg <judygold@@sanwafp.com>

	* pt.c (determine_explicit_specialization): Initialize "dummy"
	to keep Purify quiet.

Thu Oct 16 00:14:48 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (build_overload_value): Handle TEMPLATE_CONST_PARMs here.
	(build_overload_int): Not here.

Wed Oct 15 00:35:28 1997  Mike Stump  <mrs@@wrs.com>

	* class.c (build_type_pathname): Remove.
	(prepare_fresh_vtable): Fix problem with complex MI vtable names.

1997-10-14  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* parse.y (unary_expr): Give a pedwarn if someone tries to use the
	&&label GNU extension.

Tue Oct 14 12:01:00 1997  Mark Mitchell  <mmitchell@@usa.net>

	* decl.c (pushtag): Unset DECL_ASSEMBLER_NAME before setting it,
	so as to avoid incorrect manglings.
	* method.c (build_decl_overload_real): Don't mangle return types
	for constructors.
	
Tue Oct 14 11:46:14 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h (scratchalloc, build_scratch_list, make_scratch_vec,
	scratch_tree_cons): Define as macros for now.
	* call.c, class.c, cvt.c, decl.c, decl2.c, except.c, expr.c, init.c, 
	lex.c, method.c, parse.y, pt.c, rtti.c, search.c, tree.c, typeck.c,
	typeck2.c: Use them and the expression_obstack variants.

Mon Oct 13 17:41:26 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>

	* decl.c (store_return_init): Allow classes with explicit ctors to
 	be used with the named return values extension.

Fri Oct 10 12:21:11 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_decl): Fix previous change.

Thu Oct  9 12:08:21 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst): Fix thinko.
	(instantiate_decl): Really use the original template.

	* call.c (build_new_method_call): Use simple constructor_name for
	error messages.

Wed Oct  8 22:44:42 1997  Jeffrey A Law  (law@@cygnus.com)

	* method.c (build_underscore_int): Don't use ANSI specific
	features.

Wed Oct  8 00:18:22 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_prevtable_vardecl): Check DECL_REALLY_EXTERN
	for our key method; it might have been inlined by -O3.

Tue Oct  7 23:00:12 1997  Mark Mitchell  <mmitchell@@usa.net>

	* decl.c (make_typename_type): Do not try to call lookup_field for
	non-aggregate types.

Tue Oct  7 22:52:10 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_reinterpret_cast): Tweak.

Tue Oct  7 22:45:31 1997  Alexandre Oliva  <oliva@@dcc.unicamp.br>

	* typeck.c (build_reinterpret_cast): converting a void pointer
	to function pointer with a reinterpret_cast produces a warning
	if -pedantic is issued

Tue Oct  7 22:43:43 1997  Bruno Haible  <bruno@@linuix.mathematik.uni-karlsruhe.de>

	* typeck.c (c_expand_return): Don't warn about returning a
	reference-type variable as a reference.

Tue Oct  7 21:11:22 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (build_static_name): Fix typo.

1997-10-07  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (duplicate_decls): Make sure DECL_LANG_SPECIFIC is set on
	OLDDECL before we try to do DECL_USE_TEMPLATE.

Tue Oct  7 00:48:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (duplicate_decls): Don't warn about template instances.

	* typeck.c (mark_addressable): Lose ancient code that unsets
	DECL_EXTERNAL.

	* pt.c (do_decl_instantiation): Lose support for instantiating
	non-templates.

	* call.c (build_new_function_call): Fix handling of null explicit
 	template args.
	(build_new_method_call): Likewise.

Mon Oct  6 23:44:34 1997  Mark Mitchell  <mmitchell@@usa.net>

	* method.c (build_underscore_int): Fix typo.

1997-10-06  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* tree.c (print_lang_statistics): #if 0 call to
	print_inline_obstack_statistics until its definition is checked in.

Mon Oct  6 09:27:29 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Move dump_tree_statistics to end.

	* pt.c (instantiate_decl): Look for the original template.
	(tsubst): Set DECL_IMPLICIT_INSTANTIATION on partial instantiations
	of member templates.

Wed Oct  1 08:41:38 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* Makefile.in (g++FAQ.*): New rules.
	(CONFLICTS): Update.
	* g++FAQ.texi: Moved from libg++.

	* parse.y (PFUNCNAME): Only specify the type once.

1997-10-01  Brendan Kehoe  <brendan@@lasher.cygnus.com>

	* lex.c (real_yylex): Clean up the code to fully behave the way
	the c-lex.c parser does for complex and real numbers.

Tue Sep 30 08:51:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (build_decl_overload_real): Reformat.

Tue Sep 30 00:18:26 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (synthesize_method): If at_eof, determine our linkage.

1997-09-29  Paul Eggert  <eggert@@twinsun.com>

	* lex.c (real_yylex): Treat `$' just like `_', except issue a
	diagnostic if !dollars_in_ident or if pedantic.

	* lang-specs.h (@@c++): -ansi no longer implies -$.

	* decl2.c (lang_decode_option):
	-traditional and -ansi now do not mess with
	dollars_in_ident.

Mon Sep 29 19:57:51 1997  H.J. Lu  (hjl@@gnu.ai.mit.edu)

	* Makefile.in (parse.o, decl.o): Also depend on
	$(srcdir)/../except.h $(srcdir)/../output.h.
	(decl2.o): Also depend on $(srcdir)/../expr.h ../insn-codes.h
	$(srcdir)/../except.h $(srcdir)/../output.h.
	(typeck.o, init.o): Also depend on $(srcdir)/../expr.h
	../insn-codes.h.

	* call.c, cp-tree.h, decl.c, tree.c: Finish prototyping.

	* expr.c (cplus_expand_expr): Make it static. 

	* decl2.c, init.c, typeck.c: Include "expr.h".
	(expand_expr): Use proper values when calling the function.

Mon Sep 29 11:05:54 1997  Alexandre Oliva  <oliva@@dcc.unicamp.br>

	* lang-options.h: new -Wold-style-cast flag.
	* cp-tree.h (warn_old_style_cast): new variable.
	* decl2.c (warn_old_style_cast): ditto.
	(lang_decode_option): support -Wold-style-cast.
	(reparse_absdcl_as_casts): produce old-style-cast warning.

Mon Sep 29 09:20:53 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>

	* decl.c (cp_finish_decl): Allow expand_aggr_init to set
 	TREE_USED, reset value based on already_used.

	* init.c (expand_member_init): Revert change.
	
Mon Sep 29 08:57:53 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h, decl.c, decl2.c, pt.c:
 	Lose DECL_C_STATIC and DECL_PUBLIC.  Don't pretend statics are public.

	* decl2.c (lang_decode_option): Add missing ;.

Sat Sep 27 16:22:48 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* friend.c (do_friend): Disable injection for all template-derived
 	decls.
	* decl2.c (lang_decode_option): Handle -fguiding-decls.
	* parse.y (notype_template_declarator): New nonterminal.
	(direct_notype_declarator): Use it.
	(complex_direct_notype_declarator): Likewise.
	(object_template_id): Accept any kind of identifier after TEMPLATE.
	(notype_qualified_id): Don't add template declarators here.

Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@@usa.net>

        * call.c (add_template_candidate): Add explicit_targs parameter.
        (build_scoped_method_call): Use it.
        (build_overload_call_real): Likewise.
        (build_user_type_conversion_1): Likewise.
        (build_new_function_call): Likewise.
        (build_object_call): Likewise.
        (build_new_op): Likewise.
        (build_new_method_call): Likewise.
        (build_new_function_call): Handle TEMPLATE_ID_EXPR.
        (build_new_method_call): Likewise.

        * class.c (finish_struct_methods): Add specialization pass to
        determine which methods were specializing which other methods.
        (instantiate_type): Handle TEMPLATE_ID_EXPR.

        * cp-tree.def (TEMPLATE_ID_EXPR): New tree code.

        * cp-tree.h (name_mangling_version): New variable.
	(flag_guiding_decls): Likewise.
        (build_template_decl_overload): New function.
        (begin_specialization): Likewise.
        (reset_specialization): Likewise.
        (end_specialization): Likewise.
        (determine_explicit_specialization): Likewise.
        (check_explicit_specialization): Likewise.
        (lookup_template_function): Likewise.
        (fn_type_unification): Add explicit_targs parameter.
        (type_unification): Likewise.

        * decl.c (duplicate_decls): Add smarts for explicit
        specializations.
        (grokdeclarator): Handle TEMPLATE_ID_EXPR, and function
        specializations.
        (grokfndecl): Call check_explicit_specialization.

        * decl2.c (lang_decode_option): Handle -fname-mangling-version.
        (build_expr_from_tree): Handle TEMPLATE_ID_EXPR.
        (check_classfn): Handle specializations.

        * error.c (dump_function_name): Print specialization arguments.

	* friend.c (do_friend): Don't call pushdecl for template 
        instantiations. 

        * init.c (build_member_call): Handle TEMPLATE_ID_EXPR.

        * lang-options.h: Add -fname-mangling-version, -fguiding-decls, 
	and -fno-guiding-decls.

        * lex.c (identifier_type): Return PFUNCNAME for template function
        names.

        * method.c (build_decl_overload_real): New function.
        (build_template_parm_names): New function.
        (build_overload_identifier): Use it.
        (build_underscore_int): New function.
        (build_overload_int): Use it.  Add levels for template
        parameters.
        (build_overload_name): Likewise.  Also, handle TYPENAME_TYPEs.
        (build_overload_nested_names): Handle template type parameters.
        (build_template_decl_overload): New function.

        * parse.y (YYSTYPE): New ntype member.
        (nested_name_specifier): Use it.
        (nested_name_specifier_1): Likewise.
        (PFUNCNAME): New token.
        (template_id, object_template_id): New non-terminals.
        (template_parm_list): Note specializations.
        (template_def): Likewise.
        (structsp): Likewise.
        (fn.def2): Handle member template specializations.
        (component_decl_1): Likewise.
        (direct_notype_declarator): Handle template-ids.
        (component_decl_1): Likewise.
        (direct_notype_declarator): Handle template-ids.
        (primary): Handle TEMPLATE_ID_EXPR, and template-ids.

        * pt.c (processing_specializations): New variable.
        (template_header_count): Likewise.
        (type_unification_real): New function.
        (processing_explicit_specialization): Likewise.
        (note_template_header): Likewise.
        (is_member_template): Handle specializations.
        (end_template_decl): Call reset_specialization.
        (push_template_decl): Handle member template specializations.
        (tsubst): Likewise.
        (tsubst_copy): Handle TEMPLATE_ID_EXPR.
        (instantiate_template): Handle specializations.
        (instantiate_decl): Likewise.
        (fn_type_unification): Handle explicit_targs.
        (type_unification): Likewise.  Allow incomplete unification
        without an error message, if allow_incomplete.
        (get_bindings): Use new calling sequence for fn_type_unification.

        * spew.c (yylex): Handle PFUNCNAME.

        * tree.c (is_overloaded_fn): Handle TEMPLATE_ID_EXPR.
        (really_overloaded_fn): Likewise.
        (get_first_fn): Handle function templates.

        * typeck.c (build_x_function_call): Use really_overloaded_fn.
        Handle TEMPLATE_ID_EXPR.
        (build_x_unary_op): Likewise.
        (build_unary_op): Likewise.
        (mark_addressable): Templates whose address is taken are marked  
        as used. 

1997-09-25  Andreas Schwab  <schwab@@issan.informatik.uni-dortmund.de>

	* decl.c (init_decl_processing): Declare __builtin_constant_p as
	accepting any kind of type, not only int.

Fri Sep 26 00:22:56 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* search.c (get_matching_virtual): Notice virtual bases when sorrying
	about covariant returns.

	* parse.y (member_init): Also imply typename here.  Remove ancient
	extension for initializing base members.

Thu Sep 25 11:11:13 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	Handle multi-level typenames and implicit typename in base list.
	* parse.y (typename_sub{,[0-2]}): New rules.
	(structsp, rule TYPENAME_KEYWORD): Use typename_sub.
	(nonnested_type): New rule.
	(complete_type_name): Use it.
	(base_class.1): Use typename_sub and nonnested_type.
	(nested_name_specifier): Don't elide std:: here.
	* decl.c (make_typename_type): Handle getting a type for NAME.
	(lookup_name_real): Turn std:: into :: here.

	Rvalue conversions were removed in London.
	* call.c (is_subseq): Don't consider lvalue transformations.
	(build_conv): LVALUE_CONV and RVALUE_CONV get IDENTITY_RANK.
	(joust): Reenable ?: kludge.

1997-09-22  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (start_function): Up warning of no return type to be a
	pedwarn.

Mon Sep 22 14:15:34 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>

        * init.c (expand_member_init): Don't set TREE_USED.
        * decl.c (cp_finish_decl): Mark decls used if type has TREE_USED
        set,don't clear TREE_USED wholesale.

Sat Sep 20 15:31:00 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): Do require_complete_type before
	build_cplus_new.

Thu Sep 18 16:47:52 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* search.c (lookup_field): Call complete_type in all cases.

	* decl.c (finish_function): Just warn about flowing off the end.

Wed Sep 17 10:31:25 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grokparms): Don't bash a permanent list node if we're
	in a function.

1997-09-17  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* Makefile.in (CONFLICTS): Fix s/r conflict count to 18.

Tue Sep 16 14:06:56 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_op): Give better error for syntactically
 	correct, but semantically invalid, use of undeclared template.

	* call.c (compare_qual): Handle pmfs.

	* decl.c (store_parm_decls): last_parm_cleanup_insn is the insn
 	after the exception spec.

Mon Sep 15 11:52:13 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (null_ptr_cst_p): Integer type, not integral type.

	* call.c (joust): Disable warnings until they can be moved to the
	right place.

Fri Sep 12 16:11:13 1997  Per Bothner  <bothner@@cygnus.com>

	* Makefile.in, config-lang.in:  Convert to autoconf.

Thu Sep 11 17:14:55 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (lookup_name_real): Add implicit 'typename' to types from
	base classes.

	* pt.c (most_specialized_class): Fix typo.
	(tsubst): Move constant folding to TREE_VEC case.

Thu Sep 11 10:08:45 1997  Mark Mitchell  <mmitchell@@usa.net>

	* pt.c (do_poplevel): Don't warn about unused local variables
	while processing_template_decl since we don't always know whether
	or not they will need constructing/destructing.

	* pt.c (uses_template_parms): Check the values of an enumeration
	type to make sure they don't depend on template parms.

	* decl.c (make_typename_type): Don't lookup the field if the
	context uses template parms, even if we're not
	processing_template_decl at the moment.

	* pt.c (coerce_template_parms): Avoid looking at the
	TYPE_LANG_DECL portion of a typename type, since there won't be
	one. 
	(tsubst): Do constant folding as necessary to make sure that
	arguments passed to lookup_template_class really are constants. 

Wed Sep 10 11:21:55 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (expand_builtin_throw): #ifndef DWARF2_UNWIND_INFO.
	* decl2.c (finish_file): Only register exception tables if we
	need to.

	* decl.c (init_decl_processing): Add __builtin_[fs]p.

Tue Sep  9 19:49:38 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (unify): Just return 0 for a TYPENAME_TYPE.

Tue Sep  9 17:57:25 1997  Mark Mitchell  <mmitchell@@usa.net>

	* error.c (dump_decl): Avoid crashing when presented with a
 	uninitialized constant, as can occur with a template parameter.
	(dump_expr): Make sure that there are enough levels of
 	current_template_parms before we start diving through them.

1997-09-09  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* typeck.c (build_indirect_ref): Heed FLAG_VOLATILE similar to
	c-typeck.c.

Tue Sep  9 09:36:39 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>

	* except.c (expand_throw): Call build_delete for all 
	exception types, not just objects with destructors.

Mon Sep  8 02:33:20 1997  Jody Goldberg  <jodyg@@idt.net>

	* decl.c (current_local_enum): Remove static.
	* pt.c (tsubst_enum): Save and restore value of current_local_enum
	in case template is expanded in enum decl.
	(instantiate_class_template) : Use new tsubst_enum signature.
	(tsubst_expr): Likewise.

Mon Sep  8 01:21:43 1997  Mark Mitchell  <mmitchell@@usa.net>

	* pt.c (begin_member_template_processing): Take a function as
	argument, not a set of template arguments.  Use the template
	parameters, rather than the arguments.  Handle non-type parameters
	correctly.  Push a binding level for the parameters so that multiple
	member templates using the same parameter names can be declared.
	(end_member_template_processing): Pop the binding level.
	(push_template_decl): Mark member templates as static when
	appropriate. 

	* lex.c (do_pending_inlines): Pass the function, not its template
	arguments, to begin_member_template_processing.
	(process_next_inline): Likewise.
	(do_pending_defargs): Likewise.

	* error.c (dump_expr): Obtain the correct declaration for a
	TEMPLATE_CONST_PARM. 

	* call.c (add_template_conv_candidate): New function.
	(build_object_call): Handle member templates, as done in the other
	build_ functions.
	
Sat Sep  6 10:20:27 1997  Mark Mitchell  <mmitchell@@usa.net>

	* decl.c (replace_defag): Undo previous change.
	* lex.c (do_pending_defargs): Deal with member templates.
	
	* pt.c (is_member_template): Avoid crashing when passed a
	non-function argument.

Fri Sep  5 17:27:38 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (grow_method): Remove check for redeclaration.

Fri Sep  5 01:37:17 1997  Mark Mitchell  <mmitchell@@usa.net>

	* cp-tree.h (INNERMOST_TEMPLATE_PARMS): New macro.
	(DECL_INNERMOST_TEMPLATE_PARMS): Likewise.
	(PRIMARY_TEMPLATE_P): Use it.
	* call.c (build_overload_call_real): Use it.
	* class.c (instantiate_type): Likewise.
	* decl.c (decls_match): Likewise.
	* method.c (build_overload_identifier): Likewise.
	* pt.c (push_template_decl): Likewise.
	(classtype_mangled_name): Likewise.
	(lookup_template_class): Likewise.
	
	* cp-tree.h (DECL_NTPARMS): Change name from DECL_NT_PARMS to
	DECL_NTPARMS to conform to usage elsewhere.
	* call.c (add_template_candidate): Likewise.
	* class.c (instantiate_type): Likewise.
	* pt.c (instantiate_template): Likewise.
	(get_bindings): Likewise.
	
	* class.c (grow_method): Use DECL_FUNCTION_TEMPLATE_P instead of
	is_member_template.

	* pt.c (unify): Undo changes to allow multiple levels of template
	parameters. 
	(type_unification): Likewise.
	(fn_type_unification): Likewise.
	(get_class_bindings): Likewise.
	* cp-tree.h (Likewise).
	
	* decl.c (replace_defarg): Check that the type of the default
	parameter does not invlove a template type before complaining
	about the initialization.

	* error.c (dump_expr): Deal with template constant parameters in
	member templates correctly.

	* pt.c (is_member_template): Deal with class specializations
	correctly. 
	(tsubst): Handle "partial instantiation" of member templates
	correctly. 

Wed Sep  3 12:30:24 1997  Mark Mitchell  <mmitchell@@usa.net>

	* pt.c (type_unification): Change calling squence to allow for
	multiple levels of template parameters.
	(tsubst_expr): Likewise.
	(tsubst): Likewise.
	(tsubst_copy): Likewise.
	(instantiate_template): Likewise.
	(unify): Likewise.
	* call.c (build_overload_call_real): Use it.
	(add_builtin_candidate): Use it.
	(build_new_method_call): Use it.
	* class.c (instantiate_type): Use it.
	* decl.c (grokdeclarator): Use it.
	* decl2.c (finish_file): Use it.
	* method.c (build_overload_identifier): Use it.
	
	* call.c (add_template_candidate):  Add additional parameter for
	the function return type.  Call fn_type_unification istead of
	type_unification.
	(build_user_type_conversion_1): Handle member templates.
	(build_new_function_call): Likewise.
	(build_new_op): Likewise.
	(build_new_method_call): Likewise.
	
	* class.c (grow_method): Don't give an error message indicating
 	that two member templates with the same name are ambiguous.
	(finish_struct): Treat member template functions just like member
 	functions.
	
	* cp-tree.h (check_member_template): Add declaration.
	(begin_member_template_processing): Likewise.
	(end_member_template_processing): Likewise.
	(fn_type_unification): Likewise.
	(is_member_template): Likewise.
	(tsubst): Change prototype.
	(tsubst_expr): Likewise.
	(tsubst_copy): Likewise.
	(instantiate_template): Likewise.
	(get_bindings): Likewise.

	* decl.c (decls_match): Handle multiple levels of template
	parameters. 
	(pushdecl): Handle template type params just like other type
	declarations. 
	(push_class_level_binding): Return immediately if the
	class_binding_level is NULL.
	(grokfndecl): If check_classfn() returns a member_template, use
	the result of the template, not the template itself.
	
	* decl2.c (check_member_template): New function.  Check to see
	that the entity declared to be a member template can be one.
	(check_classfn): Allow redeclaration of member template functions
	with different types; the new functions can be specializations or
	explicit instantiations.
	
	* error.c (dump_decl): Handle multiple levels of template
	parameters. 
	(dump_function_decl): Update to handle function	templates.

	* lex.c (do_pending_inlines): Set up template parameter context
	for member templates.
	(process_next_inline): Likewise.

	* method. (build_overload_identifier): Adjust for multiple levels
	of template parameters.
	
	* parse.y (fn.def2): Add member templates.
	(component_decl_1): Likewise.

	* pt.c (begin_member_template_processing): New function.
	(end_member_template_processing): Likewise.
	(is_member_template): Likewise.
	(fn_type_unification): Likewise.
	(current_template_parms): Return a vector of all the template
	parms, not just the innermost level of parms.
	(push_template_decl): Deal with the possibility of member
	templates. 
	(lookup_template_class): Likewise.
	(uses_template_parms): Likewise.
	(tsubst): Modify processing to TEMPLATE_TYPE_PARM and
	TEMPLATE_CONST_PARM to deal with multiple levels of template
	arguments.   Add processing of TEMPLATE_DECL to produce new
	TEMPLATE_DECLs from old ones.
	(do_decl_instantiation): Handle member templates.

	* search.c (lookup_fnfields_1): Handle member template conversion
	operators. 

	* tree.c (cp_tree_equal): Check the levels, as well as the
	indices, of TEMPLATE_CONST_PARMs.

	* typeck.c (comptypes): Check the levels, as well as the indices,
	fo TEMPLATE_TYPE_PARMs.
	(build_x_function_call): Treat member templates like member
	functions. 
	
Wed Sep  3 11:09:25 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (c_expand_return): Always convert_for_initialization
 	before checking for returning a pointer to local.

	* pt.c (type_unification): If strict and the function parm doesn't
	use template parms, just compare types.

Wed Sep  3 10:35:49 1997  Klaus Espenlaub  <kespenla@@student.informatik.uni-ulm.de>

	* method.c (build_overloaded_value): Replace direct call
	to the floating point emulator with REAL_VALUE_TO_DECIMAL macro.

Wed Sep  3 00:02:53 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (convert_arguments): Don't arbitrarily choose the first
 	of a set of overloaded functions.

Tue Sep  2 12:09:13 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (real_yylex): Don't elide __FUNCTION__.

	* method.c (build_overload_value): Add in_template parm.
	(build_overload_int): Likewise.
	(build_overload_identifier): Pass it.

	* decl.c (duplicate_decls): Don't bash a previous template
 	definition with a redeclaration.

	* pt.c (unify): float doesn't match double.

	* pt.c (do_type_instantiation): Handle getting a _TYPE or a
 	TYPE_DECL.  Handle getting non-template types.
	* parse.y (explicit_instantiation): Use typespec instead of
	aggr template_type.

Tue Sep  2 10:27:08 1997  Richard Henderson  <rth@@cygnus.com>

	* typeck.c (build_ptrmemfunc1): Clean up ptr->int cast warnings.

Mon Sep  1 13:19:04 1997  Eugene Mamchits <eugin@@ips.ras.ru>

	* call.c (add_builtin_candidate): Add missing TREE_TYPE.
	(compare_ics): Likewise.

Mon Sep  1 13:19:04 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (joust): Warn about choosing one conversion op over
 	another because of 'this' argument when the other return type is
 	better.
	(source_type): New fn.

	* call.c (build_new_op): Strip leading REF_BIND from first operand
	to builtin operator.

	* decl2.c (mark_vtable_entries): Mark abort_fndecl as used when we
	use its RTL.

Thu Aug 28 09:45:23 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (null_ptr_cst_p): Remove support for (void*)0.

Wed Aug 27 02:03:34 1997  Jeffrey A Law  (law@@cygnus.com)

	* typeck.c (expand_target_expr): Make definition match declaration.

	* class.c (get_basefndecls): Make definition match declaration.

Mon Aug 25 14:30:02 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* input.c (sub_getch): Eventually give up and release the input file.

	* decl.c (cp_finish_decl): If #p i/i, put inline statics in the
	right place.

	* call.c (joust): Tweak message.

Sat Aug 23 18:02:59 1997  Mark Mitchell  <mmitchell@@usa.net>

	* error.c (type_as_string): Put const/volatile on template type
	parameters where appropriate.

Sat Aug 23 17:47:22 1997  Jeffrey A Law  (law@@cygnus.com)

	* call.c (strictly_better): Make arguments unsigned ints.

Thu Aug 21 18:48:44 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (real_yylex): Refer to __complex instead of complex.

Thu Aug 21 22:25:46 1997  J"orn Rennecke <amylaar@@cygnus.co.uk>

	* lex.c (real_yylex): Don't use getc directly.

Wed Aug 20 17:25:08 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (is_subseq): Don't try to be clever.

Wed Aug 20 03:13:36 1997  H.J. Lu  (hjl@@gnu.ai.mit.edu)

	* parse.y, pt.c: Include "except.h".
	* call.c, class.c, class.h, cp-tree.h, cvt.c, decl.c, decl2.c,
 	error.c, except.c, expr.c, friend.c, g++spec.c, init.c, input.c,
 	lex.c, lex.h, method.c, parse.y, pt.c, repo.c, rtti.c, search.c,
 	sig.c, spew.c, tree.c, typeck.c, typeck2.c, xref.c: Finish
 	prototyping.

Wed Aug 20 01:34:40 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (mark_vtable_entries): Instead of replacing pure
	virtuals with a reference to __pure_virtual, copy the decl and
	change the RTL.

Tue Aug 19 02:26:07 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (lookup_nested_type_by_name): Handle typedef wierdness.

	* pt.c (instantiate_class_template): Call repo_template_used
	before finish_prevtable_vardecl.

	* call.c (is_subseq): New fn.
	(compare_ics): Use it.

	* repo.c (finish_repo): Don't crash on no args.

	* parse.y (named_complex_class_head_sans_basetype): Handle
 	explicit global scope.
	* decl2.c (handle_class_head): New fn.

	* Makefile.in (BISON): Add -L flag.

	* pt.c (unify): Add CONST_DECL case.

Thu Aug 14 10:05:13 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* rtti.c (permanent_obstack): Fix decl to not be a pointer.

	* cp-tree.h (report_type_mismatch): Add prototype.
	* call.c (build_overload_call_real): Remove erroneous fourth
	argument to report_type_mismatch.
	(build_user_type_conversion_1): Remove erroneous second arg to
	tourney.
	(build_new_function_call): Likewise.
	(build_object_call): Likewise.
	(build_new_op): Likewise.
	(build_new_method_call): Likewise.

Wed Aug 13 19:19:25 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* error.c (dump_decl): Don't bother processing a function with no
	DECL_LANG_SPECIFIC.

	* method.c (emit_thunk): Call init_function_start in the macro case.

Wed Aug 13 10:46:19 1997  H.J. Lu  (hjl@@gnu.ai.mit.edu)

	* decl2.c (DEFAULT_VTABLE_THUNKS): Define to be 0 if not
	defined and used to set flag_vtable_thunks.

Tue Aug 12 20:13:57 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y: Don't clear the inlines from their obstack until they've 
	all been processed.

	* decl.c (duplicate_decls): Don't complain about exception
 	specification mismatch if flag_exceptions is off.

	* Makefile.in (BISON): bison, not byacc or bison -y.
	(parse.c): Use bison flags.

Mon Aug 11 15:01:56  1997  Marc Lehmann <pcg@@goof.com>

	* Make-lang.in (c++.distclean): Remove g++.c on make distclean.

Sun Aug 10 12:06:09 1997  Paul Eggert  <eggert@@twinsun.com>

	* cp-tree.h: Replace STDIO_PROTO with PROTO in include files.
	* cvt.c, error.c, except.c, expr.c, friend.c, init.c, rtti.c:
	Include <stdio.h> before include files that formerly used STDIO_PROTO. 

	* decl.c, g++spec.c, lex.c, method.c, repo.c:
	Include	"config.h" first, as per autoconf manual.

Fri Aug  8 11:47:48 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (duplicate_decls): Tweak wording.
	* lex.c (do_pending_defargs): Don't die if we see a default arg
	that isn't a DEFAULT_ARG.
	* error.c (dump_expr): Handle DEFAULT_ARG.

	* decl2.c (lang_decode_option): Handle -fhandle-exceptions.
	* lang-options.h: Add -fhandle-exceptions.

	* class.c (build_vtable): vtables are artificial.
	(prepare_fresh_vtable): Likewise.

Wed Aug  6 11:02:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (ocp_convert): After converting to the target type, set
 	LOOKUP_NO_CONVERSION.

	* call.c (joust): Warn about potentially confusing promotion rules
	with -Wsign-promo.
	* cp-tree.h, lang-options.h, decl2.c: Support -Wsign-promo.

Tue Aug  5 15:15:07 1997  Michael Meissner  <meissner@@cygnus.com>

	* exception.cc: Declare __terminate_func with noreturn attribute.

Fri Aug  1 03:18:15 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y: Break out eat_saved_input, handle errors.
	(function_try_block): Use compstmt instead of compstmt_or_error.

Thu Jul 31 17:14:04 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (build_cplus_new): Don't set TREE_ADDRESSABLE.

Fri Jul  4 01:45:16 1997  Andreas Schwab  <schwab@@issan.informatik.uni-dortmund.de>

	* Make-lang.in (cplib2.txt, cplib2.ready): Instead of checking for
	existence of cc1plus check whether $(LANGUAGES) contains C++.

Wed Jul 30 13:04:21 1997  Andreas Schwab  <schwab@@issan.informatik.uni-dortmund.de>

	* method.c (do_build_copy_constructor): When copying an anonymous
	union member loop around to handle nested anonymous unions.  Use
	the offset of the member relative to the outer structure, not the
	union.

Tue Jul 29 21:17:29 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (resolve_args): New fn.
	(build_new_function_call): Use it.
	(build_object_call): Likewise.
	(build_new_method_call): Likewise.

Mon Jul 28 16:02:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): tsubst all default parms from templates.

Wed Jul 23 13:36:25 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (struct cp_function): Add static_labelno.
	(push_cp_function_context): Save it.
	(pop_cp_function_context): Restore it.

Tue Jul 22 14:43:29 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_component_ref_1): Convert from reference.

Tue Jul 22 11:06:23 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* parse.y (current_declspecs, prefix_attributes): Initialize to
	NULL_TREE.

	* parse.y (initdcl0): Make sure CURRENT_DECLSPECS is non-nil
	before we try to force it to be a TREE_LIST.
	(decl): Make sure $1.t is non-nil.

Sun Jul 20 11:53:07 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (uses_template_parms): Handle template first-parse codes.

	* decl.c (cp_finish_decl): Only warn about user-defined statics.

Fri Jul 18 17:56:08 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (unify): Handle BOOLEAN_TYPE.

	* cp-tree.h: Lose PARM_DEFAULT_FROM_TEMPLATE.
	* pt.c (tsubst): Don't set it.
	* call.c (build_over_call): Use uses_template_parms.

Thu Jul 17 18:06:30 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (build_overload_nested_name): Use static_labelno
 	instead of var_labelno.
	(build_qualified_name): New fn.
	(build_overload_name): Split out from here.
	(build_static_name): Use build_qualified_name.
	* decl.c (cp_finish_decl): Statics in extern inline functions 
	have comdat linkage.
	(start_function): Initialize static_labelno.

Thu Jul 17 11:20:17 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>

	* class.c (finish_struct_methods): add check of warn_ctor_dtor_privacy
	before "all member functions in class [] are private"

Wed Jul 16 23:47:08 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (do_scoped_id): convert_from_reference.
	* init.c (build_offset_ref): Likewise.

Wed Jul 16 12:34:29 1997  Benjamin Kosnik  <bkoz@@lisa.cygnus.com>

	* error.c (dump_expr): Check TREE_OPERAND before dump_expr_list.

Mon Jul 14 03:23:46 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (get_member_function_from_ptrfunc): Promote index
 	before saving it.

Sun Jul 13 00:11:52 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (layout_basetypes): Move non-virtual destructor warning.
	* decl.c (xref_basetypes): Remove non-virtual destructor warning.

Sat Jul 12 12:47:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grokdeclarator): Call add_defarg_fn for the function
	type, too.
	* lex.c (add_defarg_fn): Adjust.
	(do_pending_defargs): Adjust.  Don't skip the first parm.

Fri Jul 11 01:39:50 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (build_enumerator): Global enumerators are also readonly.

	* rtti.c (build_dynamic_cast_1): Renamed from build_dynamic_cast.
	(build_dynamic_cast): Call it and convert_from_reference.

	* lex.c (add_defarg_fn): New fn.
	(snarf_defarg): Don't add to defarg_types.
	(do_pending_defargs): Lose defarg_types.  All fns we process now
	have defargs.
	* decl.c (grokfndecl): Call add_defarg_fn.

	* Makefile.in (CONFLICTS): Expect 18 s/r conflicts.
	* cp-tree.def: Add DEFAULT_ARG.
	* spew.c (yylex): Call snarf_defarg as appropriate.
	* parse.y: New tokens DEFARG and DEFARG_MARKER.
	(defarg_again, pending_defargs, defarg, defarg1): New rules.
	(structsp): Use pending_defargs.
	(parms, full_parm): Use defarg.
	* lex.c (init_lex): Initialize inline_text_firstobj.
	(do_pending_inlines): Never pass the obstack to feed_input.
	(process_next_inline): Call end_input instead of restore_pending_input.
	(clear_inline_text_obstack, reinit_parse_for_expr, do_pending_defargs,
	finish_defarg, feed_defarg, snarf_defarg, maybe_snarf_defarg): New fns.
	* input.c (end_input): New fn.
	(sub_getch): At the end of some fed input, just keep returning EOF
	until someone calls end_input.
	Remove 'obstack' field from struct input_source.
	* decl.c (grokparms): Handle DEFAULT_ARG.
	(replace_defarg): New fn.
	* cp-tree.h (DEFARG_LENGTH, DEFARG_POINTER): New macros.

Wed Jul  9 13:44:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (implicit_conversion): If nothing else works, try binding
	an rvalue to a reference.

Wed Jul  9 13:04:38 1997  Geoffrey Noer  <noer@@cygnus.com>

	* decl.c (init_decl_processing): fix Jun 30 patch -- move
	ifndef for Cygwin32 to include SIGSEGV.

Thu Jul  3 01:44:05 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (finish_struct_1): Only complain about pointers without
	copy stuff if there are any constructors.

	* rtti.c (build_dynamic_cast): Call complete_type on the types.

	* decl.c (grokfndecl): If the function we chose doesn't actually
 	match, die.

	* decl2.c (grokclassfn): Don't specify 'const int' for the
 	artificial destructor parm.

	* pt.c (type_unification): If we are called recursively, nothing 
	decays.

Mon Jun 30 17:53:21 1997  Geoffrey Noer  <noer@@cygnus.com>

        * decl.c (init_decl_processing): Stop trying to catch signals
	other than SIGABRT since the Cygwin32 library doesn't support
	them correctly yet.  This fixes a situation in which g++ causes
	a hang on SIGSEGVs and other such signals in our Win32-hosted
	tools.

Mon Jun 30 14:50:01 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (mapcar, case CALL_EXPR): Handle all the parse node data.

Fri Jun 27 15:18:49 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck2.c (store_init_value): Always return the value if our 
	type needs constructing.

	* method.c (hack_identifier): Convert class statics from
 	reference, too.

Thu Jun 26 11:44:46 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* Make-lang.in (cplib2.ready): Add $(LANGUAGES) dependency.

Thu Jun 19 16:49:28 1997  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (c_expand_return): Make sure we clean up temporaries at
	the end of return x;

Thu Jun 19 12:28:43 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* lex.c (check_for_missing_semicolon): Also check for CV_QUALIFIER.

Tue Jun 17 18:35:57 1997  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_builtin_throw): Add support
 	-fno-sjlj-exceptions -fPIC exception handling on the SPARC.

Mon Jun 16 01:24:37 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* repo.c (extract_string): Null-terminate.

	* cp-tree.h (TI_SPEC_INFO): New macro.
	(CLASSTYPE_TI_SPEC_INFO): New macro.
	* pt.c (push_template_decl): Correctly determine # of template parms 
	for partial specs.

	* call.c (compare_ics): Really fix 'this' conversions.

	* pt.c (do_decl_instantiation): Don't crash on explicit inst of
	non-template fn.

	* pt.c (push_template_decl): Complain about mismatch in # of
 	template parms between a class template and a member template.

Sun Jun 15 02:38:20 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (synthesize_method): You can't call
 	function_cannot_inline_p after finish_function.
	* decl.c (finish_function): Turn on flag_inline_functions and turn
 	off DECL_INLINE before handing a synthesized method to the
 	backend.

Thu Jun 12 17:35:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (synthesize_method): Remove July 30 change to never set
 	DECL_INLINE if at_eof.

Thu Jun 12 15:25:08 1997  Mike Stump  <mrs@@cygnus.com>

	* xref.c (GNU_xref_member): Ensure that the node has a
	decl_lang_specific part before checking DECL_FRIEND_P.

Thu Jun 12 12:36:05 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Diagnose non-class types used
	as bases.

Wed Jun 11 17:33:40 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_conditional_expr): Use convert_for_initialization
	instead of convert_and_check.

Wed Jun 11 12:31:33 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* parse.y (typespec): Don't pedwarn for typeof.

Tue Jun 10 00:22:09 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* repo.c (finish_repo): Only check changes if we would write a
	repo file.

	* call.c (compare_ics): Fix handling of 'this' conversions.

	* pt.c (do_decl_instantiation): Support static data too.  Rename
	from do_function_instantiation.
	* cp-tree.h: Adjust.
	* parse.y: Adjust.

	* repo.c (extract_string): New fn.
	(get_base_filename): Use it.
	(init_repo): Compare old args with current args.

Mon Jun  9 14:25:30 1997  Mike Stump  <mrs@@cygnus.com>

	* Makefile.in, Make-lang.in: Protect C-ls with a comment
 	character, idea from Paul Eggert <eggert@@twinsun.com>.

Mon Jun  9 01:52:03 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (c_expand_return): Be more persistent in looking for
 	returned temps.

	* cvt.c (build_up_reference): Use NOP_EXPR for switching from
 	pointer to reference.

	* class.c (build_vbase_path): Don't do anything if PATH has no steps.

Sun Jun  8 03:07:05 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_member_call, build_offset_ref):
 	Use do_scoped_id instead of do_identifier.

	* cvt.c (convert): Remove bogosity.

Sat Jun  7 20:50:17 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cvt.c (build_up_reference): Do checks of ARGTYPE and
	TARGET_TYPE before trying to use get_binfo.

Fri Jun  6 17:36:39 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (build_up_reference): Call get_binfo to get access control.

	* decl2.c (import_export_decl): If we don't support weaks, leave
 	statics undefined.

Fri Jun  6 15:55:49 1997  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_builtin_throw): Add support for machines that
 	cannot access globals after throw's epilogue when
 	-fno-sjlj-exceptions is used.

Thu Jun  5 16:28:43 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y: 'std::' becomes '::'.
	* lex.c (real_yylex): Remove 'namespace' warning.
	* init.c (build_member_call): Ignore 'std::'.
	(build_offset_ref): Likewise.
	* decl2.c (do_using_directive): Ignore 'using namespace std;'.
	(do_toplevel_using_decl): Ignore 'using std::whatever'.
	* decl.c (push_namespace): Just sorry.
	(pop_namespace): Nop.
	(init_decl_processing): Declare std namespace.

Tue Jun  3 18:08:23 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* search.c (push_class_decls): A name which ambiguously refers to
 	several instantiations of the same template just refers to the
 	template.

Tue Jun  3 12:30:40 1997  Benjamin Kosnik  <bkoz@@cirdan.cygnus.com>

	* decl.c (build_enumerator): fix problem with unsigned long
	enumerated values being smashed to ints, causing overflow
	when computing next enumerated value. (for enum values around
	MAX_VAL).

Mon Jun  2 17:40:56 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_component_ref): Only call mark_used on a decl.

Thu May 29 15:54:17 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* typeck.c (build_c_cast): Make the check for a ptr to function
	more specific before possible default_conversion call.

Thu May 29 13:02:06 1997  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_exception_blocks): Simplify and fix and make
	sure we don't end a region in a sequence, as expand_end_bindings
	doesn't like it.

Wed May 28 17:08:03 1997  Mike Stump  <mrs@@cygnus.com>

	* except.c (init_exception_processing): Mark terminate as not
	returning so that the optimizer can optimize better.

Tue May 27 19:49:19 1997  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (convert): Don't do any extra work, if we can avoid it
	easily.

Tue May 27 18:21:47 1997  Mike Stump  <mrs@@cygnus.com>

	* *.[chy]: Change cp_convert to ocp_convert, change convert to
	cp_convert.  convert is now reserved for the backend, and doesn't
	have the semantics a frontend person should ever want.

Fri May 23 10:58:31 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* lang-specs.h: Define __EXCEPTIONS if exceptions are enabled.
	Lose -traditional support.

Thu May 22 15:41:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (get_tinfo_var): Use TYPE_PRECISION (sizetype).

	* parse.y (self_reference): Do it for templates, too.
	* class.c (pushclass): Don't overload_template_name; the alias
	generated by build_self_reference serves the same purpose.

	* tree.c (list_hash): Make static, take more args.
	(list_hash_lookup): Likewise.
	(list_hash_add): Make static.
	(list_hash_canon): Lose.
	(hash_tree_cons): Only build a new node if one isn't already in the
	hashtable.
	(hash_tree_chain): Use hash_tree_cons.
	* cp-tree.h: Adjust.
	* decl.c (grokfndecl): Just check IDENTIFIER_GLOBAL_VALUE instead
	of calling lookup_name.

Wed May 21 18:24:19 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): TYPE_VALUES for an enum
	doesn't refer to the CONST_DECLs.

Tue May 20 21:09:32 1997  Bob Manson  <manson@@charmed.cygnus.com>

	* rtti.c (get_tinfo_var): Either INT_TYPE_SIZE or 32, whichever
	is bigger.
	(expand_class_desc): Convert the last argument to a sizetype.

Tue May 20 13:55:57 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* gxx.gperf (__complex, __complex__, __imag, __imag__, __real,
	__real__): Add reswords.
	* hash.h: Regenerate.
	* lex.h (rid): Add RID_COMPLEX.
	(RID_LAST_MODIFIER): Set to RID_COMPLEX.
	* lex.c (init_lex): Add building of RID_COMPLEX.
	(real_yylex): General cleanup in line with what c-lex.c also has,
	sans the cruft for traditional; add handling of SPEC_IMAG, complex
	types, and imaginary numeric constants.
	* parse.y (REALPART, IMAGPART): Add tokens.
	(unary_expr): Add REALPART and IMAGPART rules.
	* cp-tree.h (complex_{integer,float,double,long}_type_node): Declare.
	* decl.c (complex_{integer,float,double,long}_type_node): Define
	types.
	(init_decl_processing): Set up the types.
	(grokdeclarator): Add handling of RID_COMPLEX.  Set and use
	DEFAULTED_INT instead of EXPLICIT_INT when we default to int type.
	* call.c (build_new_op): Add REALPART_EXPR and IMAGPART_EXPR cases.
	* cvt.c (cp_convert): Handle COMPLEX_TYPE.
	* error.c (dump_type_prefix, dump_type, dump_type_suffix): Add
	COMPLEX_TYPE case.
	* method.c (build_overload_name): Add handling of the different
	COMPLEX_TYPEs, prefixing them with `J'.
	* pt.c (process_template_parm): Don't let them use a COMPLEX_TYPE
	as a template parm.
	(uses_template_parms, tsubst, unify): Add COMPLEX_TYPE case.
	* tree.c (lvalue_p): Add REALPART_EXPR and IMAGPART_EXPR cases.
	(mapcar): Handle COMPLEX_CST.
	* typeck.c (build_binary_op_nodefault): Handle COMPLEX_TYPE.
	(common_type): Add code for complex types.
	(build_unary_op): Add REALPART_EXPR and IMAGPART_EXPR cases.
	(convert_for_assignment): Likewise.
	(mark_addressable): Add REALPART_EXPR and IMAGPART_EXPR cases.

Mon May 19 12:26:27 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst): Don't pass the MINUS_EXPR for an array domain to
	tsubst_expr, as it might try to do overload resolution.

Sat May 17 10:48:31 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Oops.

Fri May 16 14:23:57 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.def: Add TAG_DEFN.
	* pt.c (tsubst_enum): New fn.
	(instantiate_class_template): Use it.
	(tsubst_expr): Support TAG_DEFN.
	(tsubst): Support local enums.
	(tsubst_copy): Likewise.
	* decl.c (finish_enum): Likewise.
	(start_enum): If this is a local enum, switch to permanent_obstack.

Wed May 14 19:08:28 1997  Mike Stump  <mrs@@cygnus.com>

	* decl.c (store_parm_decls): Set last_parm_cleanup_insn here.
	(finish_function): Put the base init code for constructors just
	after the parm cleanup insns.
	(struct cp_function): Add last_parm_cleanup_insn.
	(push_cp_function_context): Likewise.
	(pop_cp_function_context): Likewise.
	
Tue May 13 15:51:20 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst_copy): Handle BIT_NOT_EXPR.

Wed May  7 11:17:59 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* method.c (emit_thunk) [ASM_OUTPUT_MI_THUNK]: Build up the RTL
	for THUNK_FNDECL before we switch to temporary allocation.

Mon May  5 14:46:53 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_op): Handle null arg2 for ?:.

Thu May  1 18:26:37 1997  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_exception_blocks): Ensure that we flow through
	the end of the exception region for the exception specification.
	Move exception region for the exception specification in, so that
	it doesn't protect the parm cleanup.  Remove some obsolete code.
	* decl.c (store_parm_decls): Likewise.
	(finish_function): Likewise.

Tue Apr 29 15:38:54 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Fix nothrow handling.

Tue Apr 29 14:29:50 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* init.c (emit_base_init): Don't warn about the initialization
	list for an artificial member.

Fri Apr 25 17:47:59 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* expr.c (do_case): Handle !START case for the error msg.

Fri Apr 25 11:55:23 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c, lang-options.h: New option -Weffc++.
	* class.c, decl.c, init.c, typeck.c: Move Effective C++ warnings
	to -Weffc++.

	* decl2.c (finish_prevtable_vardecl): Change NO_LINKAGE_HEURISTICS
	to MULTIPLE_SYMBOL_SPACES.

Wed Apr 23 18:06:50 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (emit_thunk, generic case): Set current_function_is_thunk.

	* method.c (emit_thunk, macro case): Set up DECL_RESULT.

	* typeck.c (c_expand_return): Don't complain about returning void
	to void in an artificial function.
	* method.c (make_thunk): Change settings of READONLY/VOLATILE, 
	don't set DECL_RESULT, set DECL_ARTIFICIAL.
	(emit_thunk, generic code): Also set up DECL_LANG_SPECIFIC. 

Wed Apr 23 14:43:06 1997  Mike Stump  <mrs@@cygnus.com>

	* init.c (init_decl_processing): Add supoprt for setjmp/longjmp based
	exception handling.
	* except.c (init_exception_processing): Likewise.
	(expand_end_catch_block): Likewise.
	(expand_exception_blocks): Likewise.
	(expand_throw): Likewise.
	* exception.cc (__default_terminate): Likewise.

	* init.c (perform_member_init): Use new method of expr level
	cleanups, instead of cleanups_this_call and friends.
	(emit_base_init): Likewise.
	(expand_aggr_vbase_init_1): Likewise.
	(expand_vec_init): Likewise.
	* decl.c (cp_finish_decl): Likewise.
	(expand_static_init): Likewise.
	(store_parm_decls): Likewise.
	(cplus_expand_expr_stmt): Likewise.
	* decl2.c (finish_file): Likewise.
	
	* Make-lang.in (exception.o): Ok to compile with -O now.

	* decl.c (maybe_build_cleanup_1): We no longer have to unsave, as
	we know it will be done later by the backend.

	* decl2.c (lang_f_options): Remove support for short temps.
	* lang-options.h: Likewise.
	
Wed Apr 23 04:12:06 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (varargs_function_p): New fn.
	* method.c (emit_thunk): Replace broken generic code with code to
	generate a heavyweight thunk function.

Tue Apr 22 02:45:18 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (process_template_parm): pedwarn about floating-point parms.

	* decl.c (grokdeclarator): inline no longer implies static.

	* spew.c (yylex): Always return the TYPE_DECL if we got a scope.

Mon Apr 21 15:42:27 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (check_for_override): The signature of an overriding
	function is not changed.

	* call.c (build_over_call): Move setting of conv into the loop.
	Note: this change, along with the related changes of the 18th thru
	the 20th of April, fix an infinite loop problem in conversions.

Sun Apr 20 16:24:29 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_user_type_conversion_1): Really ignore rvalue
	conversions when looking for a REFERENCE_TYPE.

	* cvt.c (build_up_reference): Eviscerate, use build_unary_op.
	* cp-tree.h (TREE_REFERENCE_EXPR): #if 0.
	* typeck.c (decay_conversion): Don't set TREE_REFERENCE_EXPR.
	(build_unary_op): Likewise.
	* call.c (build_over_call): See through a CONVERT_EXPR around the
	ADDR_EXPR for on a temporary.
	* typeck.c (c_expand_return): See through a CONVERT_EXPR around
	the ADDR_EXPR for a local variable.

Fri Apr 18 12:11:33 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_user_type_conversion_1): If we're trying to
	convert to a REFERENCE_TYPE, only consider lvalue conversions.
	(build_new_function_call): Print candidates.
	(implicit_conversion): Try a temp binding if the lvalue conv is BAD.
	(reference_binding): Binding a temporary of a reference-related type
	is BAD.

Thu Apr 17 14:37:22 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* inc/typeinfo (type_info::before): Add cv-qualifier-seq.
	* tinfo2.cc (type_info::before): Likewise.

Mon Apr 14 12:38:17 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (implicit_conversion): Oops.

Fri Apr 11 02:18:30 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (implicit_conversion): Try to find a reference conversion
	before binding a const reference to a temporary.

Wed Apr  2 12:51:36 1997  Mike Stump  <mrs@@cygnus.com>

	* exception.cc (__default_unexpected): Call terminate by default,
	so that if the user overrides terminate, the correct function will
	be called.
	
Wed Mar 19 14:14:45 1997  Mike Stump  <mrs@@cygnus.com>

	* parse.y (left_curly): Avoid trying to use any fields of
	error_mark_node, as there aren't any.

Thu Mar 13 16:33:22 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (do_identifier): Avoid breaking on overloaded methods
	as default arguments.

Wed Mar 12 13:55:10 1997  Hans-Peter Nilsson  <Hans-Peter.Nilsson@@axis.se>

	* call.c (add_template_candidate): Initialize the variable "dummy".

Mon Mar 10 15:13:14 1997  Brendan Kehoe  <brendan@@canuck.cygnus.com>

	* decl.c (start_decl): Make sure TYPE isn't an error_mark_node
	before we try to use TYPE_SIZE and TREE_CONSTANT on it.

Fri Mar  7 13:19:36 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cp-tree.h (comp_ptr_ttypes, more_specialized): Add decl.
	(debug_binfo): Delete decl, not needed.

	* tree.c (fnaddr_from_vtable_entry, function_arg_chain,
	promotes_to_aggr_type): Delete fns.
	* cp-tree.h (FNADDR_FROM_VTABLE_ENTRY,
	SET_FNADDR_FROM_VTABLE_ENTRY, FUNCTION_ARG_CHAIN,
	PROMOTES_TO_AGGR_TYPE): Delete alternates to #if 1.

	* decl.c (pending_invalid_xref{,_file,_line}): Delete unused vars.

	* friend.c (is_friend_type): Delete fn.
	* cp-tree.h (is_friend_type): Delete decl.

	* decl.c (original_result_rtx, double_ftype_double,
	double_ftype_double_double, int_ftype_int, long_ftype_long,
	float_ftype_float, ldouble_ftype_ldouble, last_dtor_insn): Make static.
	* typeck.c (original_result_rtx, warn_synth): Delete extern decls.

	* decl.c (push_overloaded_decl{,_top_level}): Make static, adding
	fwd decls.
	* cp-tree.h (push_overloaded_decl{,_top_level}): Delete decls.

	* decl.c (pushdecl_nonclass_level): #if 0, unused.
	* cp-tree.h (pushdecl_nonclass_level): #if 0 decl.

	* lex.c (reinit_lang_specific): #if 0, unused.
	* cp-tree.h (reinit_lang_specific): #if 0 decl.

	* decl.c (revert_static_member_fn): Make static, adding fwd decl.
	* cp-tree.h (revert_static_member_fn): Delete decl.

	* class.c (root_lang_context_p): Delete fn.
	* cp-tree.h (root_lang_context_p): Delete decl.

	* decl.c (set_current_level_tags_transparency): #if 0, unused.
	* cp-tree.h (set_current_level_tags_transparency): #if 0 decl.

	* lex.c (set_vardecl_interface_info): Make static.
	* cp-tree.h (set_vardecl_interface_info): Delete decl.

	* call.c (find_scoped_type): Make static.
	* cp-tree.h (find_scoped_type): Delete decl.

	* search.c (convert_pointer_to_vbase): Make static.
	* cp-tree.h (convert_pointer_to_vbase): Delete decl.

	* decl.c (const_ptr_type_node): Likewise.
	* cp-tree.h (const_ptr_type_node): Delete decl.

	* typeck.c (common_base_type): Make static.
	* cp-tree.h (common_base_types): Delete erroneous decl.

	* pt.c (classtype_mangled_name): Make static.
	* cp-tree.h (classtype_mangled_name): Delete decl.

	* lex.c (check_newline): Make static.
	* cp-tree.h (check_newline): Delete decl.

	* typeck.c (build_x_array_ref): Delete fn, same idea as
	grok_array_decl.
	* cp-tree.h (build_x_array_ref): Delete decl.

	* lex.c (copy_decl_lang_specific): Delete fn, same idea as
	copy_lang_decl.
	* cp-tree.h (copy_decl_lang_specific): #if 0 decl.

	* class.c (build_vtable_entry): Make static.
	* cp-tree.h (build_vtable_entry): Delete decl.

	* class.c (build_vbase_pointer): Make static.
	* cp-tree.h (build_vbase_pointer): Delete decl.

	* sig.c (build_sptr_ref): Add forward decl and make static.
	* cp-tree.h (build_sptr_ref): Delete decl.

	* call.c (build_new_method_call): Add forward decl and make static.
	* cp-tree.h (build_new_method_call): Delete decl.

	* call.c (build_object_call): Make static.
	* class.c (check_for_override, complete_type_p, mark_overriders):
	Likewise.
	* decl.c (cp_function_chain): Likewise.
	* lex.c (set_typedecl_interface_info, reinit_parse_for_block):
	Likewise.
	* pt.c (comp_template_args, get_class_bindings, push_tinst_level):
	Likewise.
	* tree.c (build_cplus_array_type_1): Likewise.
	* typeck.c (comp_ptr_ttypes_{const,real,reinterpret}): Likewise.
	(comp_target_parms): Likewise.

	* init.c (build_builtin_call): Make static.
	* cp-tree.h (build_builtin_call): Delete decl.

	* typeck.c (binary_op_error): Delete decl.
	* cp-tree.h (binary_op_error): Likewise.

Thu Mar  6 16:13:52 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* call.c (build_method_call): Compare against error_mark_node
	directly, rather than the ERROR_MARK tree code.
	* cvt.c (cp_convert): Likewise.
	* decl.c (print_binding_level): Likewise.
	(duplicate_decls): Likewise.
	(grokdeclarator): Likewise.
	(grokdeclarator): Likewise.
	* init.c (expand_aggr_init_1): Likewise.
	(decl_constant_value): Likewise.
	* method.c (build_opfncall): Likewise.
	(hack_identifier): Likewise.
	* typeck.c (build_modify_expr): Likewise.

	* typeck.c (build_c_cast): Don't decl TYPE as register tree.

Sun Mar  2 02:54:36 1997  Bruno Haible  <bruno@@linuix.mathematik.uni-karlsruhe.de>

	* pt.c (unify): Strip NOP_EXPR wrappers before unifying integer values.

	* pt.c (coerce_template_parms): Add new error message.

	* method.c (build_overload_value): Implement name mangling for
	floating-point template arguments.

	* method.c (build_overload_int, icat, dicat): Fix mangling of template
	arguments whose absolute value doesn't fit in a signed word.

Mon Mar  3 12:14:54 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* friend.c: New file; put all of the friend stuff in here.
	* init.c: Instead of here.
	* Makefile.in (CXX_OBJS): Add friend.o.
	(friend.o): Add dependencies.
	* Make-lang.in (CXX_SRCS): Add $(srcdir)/cp/friend.c.

Sun Mar  2 11:04:43 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_scoped_method_call): Complain if the scope isn't a
	base.

Wed Feb 26 11:31:06 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y (left_curly): Don't crash on erroneous type.

	* init.c (build_delete): Fix type of ref.

Tue Feb 25 12:41:48 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* search.c (get_vbase_1): Renamed from get_vbase.
	(get_vbase): Wrapper, now non-static.
	(convert_pointer_to_vbase): Now static.

	* call.c (build_scoped_method_call): Accept a binfo for BASETYPE.
	* init.c (build_delete): Pass one.
	(build_partial_cleanup_for): Use build_scoped_method_call.
	* decl.c (finish_function): Pass a binfo.

Mon Feb 24 15:00:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): Only synthesize non-trivial copy ctors.

	* typeck.c (build_c_cast): Lose other reference to flag.

	* call.c (build_field_call): Don't look for [cd]tor_identifier.
	* decl2.c (delete_sanity): Remove meaningless use of
	LOOKUP_HAS_IN_CHARGE.
	* decl.c (finish_function): Use build_scoped_method_call instead
	of build_delete for running vbase dtors.
	* init.c (build_delete): Call overload resolution code instead of
	duplicating it badly.

Thu Feb 20 15:12:15 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): Call mark_used before trying to elide
	the call.

	* decl.c (implicitly_declare): Don't set DECL_ARTIFICIAL.

Wed Feb 19 11:18:53 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* typeck.c (build_modify_expr): Always pedwarn for a cast to
	non-reference used as an lvalue.

Wed Feb 19 10:35:37 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (cp_convert_to_pointer): Convert from 0 to a pmf properly.

Tue Feb 18 15:40:57 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y (handler): Fix template typo.

Sun Feb 16 02:12:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* error.c (lang_decl_name): New fn.
	* tree.c (lang_printable_name): Use it.

Fri Feb 14 16:57:05 1997  Mike Stump  <mrs@@cygnus.com>

	* g++spec.c: Include config.h so that we can catch bzero #defines
	from the config file.

Tue Feb 11 13:50:48 1997  Mike Stump  <mrs@@cygnus.com>

	* new1.cc: Include a declaration for malloc, to avoid warning, and
	avoid lossing on systems that require one (ones that define malloc
	in xm.h).

Mon Feb 10 22:51:13 1997  Bruno Haible	<bruno@@linuix.mathematik.uni-karlsruhe.de>

	* decl2.c (max_tinst_depth): New variable.
	(lang_decode_option): Parse "-ftemplate-depth-NN" command line
	option.
	* pt.c (max_tinst_depth): Variable moved.
	* lang-options.h: Declare "-ftemplate-depth-NN" command line option
	as legal.

Fri Feb  7 15:43:34 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (xref_basetypes): Allow a base class that depends on
	template parms to be incomplete.

	* decl2.c (build_expr_from_tree): Support typeid(type).
	* rtti.c (get_typeid): Support templates.
	(expand_si_desc, expand_class_desc): Fix string length.
	(expand_ptr_desc, expand_attr_desc, expand_generic_desc): Likewise.

Tue Feb  4 11:28:24 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (unify, case TEMPLATE_CONST_PARM): Use cp_tree_equal.

	* pt.c (tsubst): Put it back for -fno-ansi-overloading.

Mon Feb  3 18:41:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst, case FUNCTION_DECL): Lose obsolete code that
	smashes together template and non-template decls of the same
	signature.

Thu Jan 30 19:18:00 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst): Don't recurse for the type of a TYPENAME_TYPE.

Wed Jan 29 11:40:35 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (duplicate_decls): Next route, pedwarn about different
	exceptions if -pedantic *or* olddecl !DECL_IN_SYSTEM_HEADER.

Tue Jan 28 20:43:29 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cp-tree.h (HAS_DEFAULT_IMPLEMENTATION): Delete macro.
	(struct lang_type): Delete has_default_implementation member.
	Increase dummy to 21.
	* decl.c (start_method): Delete usage.

	* cp-tree.h (build_call, null_ptr_cst_p, in_function_p,
	store_after_parms, start_decl_1, auto_function): Add decls.
	(get_arglist_len_in_bytes, declare_implicit_exception,
	have_exceptions_p, make_type_decl, typedecl_for_tag,
	store_in_parms, pop_implicit_try_blocks, push_exception_cleanup,
	build_component_type_expr, cplus_exception_name,
	{make,clear}_anon_parm_name, dont_see_typename): Removed decls.
	* call.c (build_this): Make static.
	(is_complete): Likewise.
	(implicit_conversion): Likewise.
	(reference_binding): Likewise.
	(standard_conversion): Likewise.
	(strip_top_quals): Likewise.
	(non_reference): Likewise.
	(build_conv): Likewise.
	(user_harshness): Likewise.
	(rank_for_ideal): Likewise.
	* decl.c (start_decl_1): Delete forward decl.
	(push_decl_level): Make static.
	(resume_binding_level): Make static.
	(namespace_bindings_p): Make static.
	(declare_namespace_level): Make static.
	(lookup_name_real): Make static.
	(duplicate_decls): Make static.  Take register off NEWDECL and
	OLDDECL parm decls.
	* decl2.c (get_sentry): Make static.
	(temp_name_p): Delete fn.
	* except.c (auto_function): Delete decl.
	* lex.c (handle_{cp,sysv}_pragma): Make static.
	(handle_sysv_pragma) [HANDLE_SYSV_PRAGMA]: Add forward decl.
	* method.c (do_build_{copy_constructor,assign_ref}): Make static.
	* pt.c (tsubst_expr_values): Make static.
	* rtti.c (combine_strings): Delete decl.

Tue Jan 28 16:40:40 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (push_template_decl): Handle getting a typedef.

	* call.c (build_new_function_call): Complain about void arg.

Tue Jan 28 15:25:09 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (duplicate_decls): Give pedwarn of different exceptions
	if -pedantic, instead of olddecl !DECL_IN_SYSTEM_HEADER.

Mon Jan 27 19:21:29 1997  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_throw): Don't expand the cleanup tree here,
	since we are not going to write the rtl out.  Fixes problem with
	-g -O on SPARC.

Mon Jan 27 16:24:35 1997  Sean McNeil  <sean@@mcneil.com>

	* Make-lang.in: Add $(exeext) as necessary.

Mon Jan 27 13:20:39 1997  Mike Stump  <mrs@@cygnus.com>

	* parse.y (handler_seq): Must have at least one catch clause.

Sat Jan 25 12:00:05 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (add_builtin_candidate): Restore ?: hack.

	* decl.c (grok_op_properties): More warnings.

Sat Jan 25 08:50:03 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (duplicate_decls): On second thought, do it as a pedwarn
	still but only if !DECL_IN_SYSTEM_HEADER (olddecl).

	* decl.c (duplicate_decls): Scale back to a warning, and only do
	'em if -pedantic.

Fri Jan 24 17:52:54 1997  Mike Stump  <mrs@@cygnus.com>

	* decl.c (duplicate_decls): pedwarn mismatched exception
	specifications.

Thu Jan 23 18:18:54 1997  Mike Stump  <mrs@@cygnus.com>

	* call.c (build_new_method_call): Don't display the invisible
	argument for controlling virtual bases.

Thu Jan 23 16:48:10 1997  Mike Stump  <mrs@@cygnus.com>

	* new: Add nothrow new and delete, bad_alloc and throw specifications
	for delete.
	* decl.c (init_decl_processing): Add throw specification for delete.
	* new.cc (nothrow): Define.
	* lex.c (real_yylex): Removing warning that throw and friends are
	keywords.
	* new1.cc (operator new (size_t sz, const nothrow_t&)): Define.
	* new2.cc (operator new[] (size_t sz, const nothrow_t&): Define.
	* Make-lang.in: Add new{1,2}.{cc,o}.

Thu Jan 23 16:39:06 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (cons_up_default_function): Fix return type of synth op=.

	* init.c (emit_base_init): Add warnings for uninitialized members
	and bases.

	* decl.c (xref_basetypes): Add warning for non-polymorphic type
	with destructor used as base type.

	* decl.c (grok_op_properties): Add warning for op= returning void.
	* typeck.c (c_expand_return): Add warning for op= returning anything
	other than *this.

	* class.c (finish_struct_1): Add warning for class with pointers
	but not copy ctor or copy op=.

	* cp-tree.h (TI_PENDING_TEMPLATE_FLAG): New macro.
	* pt.c (add_pending_template): Use it instead of LANG_FLAG_0.
	(instantiate_template): If -fexternal-templates, add this
	instantiation to pending_templates.

	* decl2.c (copy_assignment_arg_p): Disable old hack to support
	Booch components.

Tue Jan 21 18:32:04 1997  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (cp_convert): Pedwarn enum to pointer conversions.

Mon Jan 20 17:59:51 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (standard_conversion): Handle getting references.  Tack
	on RVALUE_CONV here.  Do it for non-class types, too.
	(reference_binding): Pass references to standard_conversion.
	(implicit_conversion): Likewise.
	(add_builtin_candidate): Disable one ?: kludge.
	(convert_like): Handle RVALUE_CONVs for non-class types.
	(joust): Disable the other ?: kludge.

Mon Jan 20 14:53:13 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (init_decl_processing): Add code to build up common
	function types beforehand, to avoid creation then removal of
	things already in the hash table.

Mon Jan 20 14:43:49 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (finish_function): Also zero out DECL_INCOMING_RTL for
	the arguments.

	* error.c (dump_expr, TEMPLATE_CONST_PARM): Don't require
	current_template_parms.

Fri Jan 17 10:25:42 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* search.c (lookup_field): Don't return a function, check want_type.

Thu Jan 16 18:14:35 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* init.c (build_new): Make sure PLACEMENT has a type.

Thu Jan 16 17:40:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Support new (nothrow).

Wed Jan 15 12:38:14 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_decl): Also do push_to_top_level before setting
	up DECL_INITIAL.

	* cp-tree.h (PARM_DEFAULT_FROM_TEMPLATE): New macro.
	* pt.c (tsubst): Defer instantiation of default args.
	* call.c (build_over_call): Until here.

Wed Jan 15 10:08:10 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* search.c (lookup_field): Make sure we have an
	IDENTIFIER_CLASS_VALUE before we try to return it.

Thu Jan  9 07:19:01 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* call.c (build_method_call): Delete unused var PARM.
	(build_overload_call_real): Likewise.
	(build_object_call): Delete unused var P.
	(build_new_op): Likewise.
	* decl.c (builtin_type_tdescs_{arr, len, max}): #if 0 out static
	var definitions, which are never used.
	(shadow_tag): Delete unused var FN.
	* expr.c (cplus_expand_expr): Delete unused var ORIGINAL_TARGET.
	* init.c (build_new): Delete unused var ALLOC_TEMP.
	* method.c (hack_identifier): Delete unused var CONTEXT.
	(do_build_copy_constructor): Delete unused var NAME.
	(synthesize_method): Delete unused var BASE.
	* pt.c (lookup_template_class): Delete unused var CODE_TYPE_NODE.
	* rtti.c (build_headof): Delete unused var VPTR.
	(get_typeid): Delete unused var T.
	* typeck.c (build_conditional_expr): Delete unused vars ORIG_OP1
	and ORIG_OP2.
	(build_ptrmemfunc): Delete unused vars U and NINDEX.
	* typeck2.c (build_functional_cast): Delete unused var BINFO.

Wed Jan  8 13:09:54 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* search.c (lookup_field): Use IDENTIFIER_CLASS_VALUE to look up
	things in a type being defined.
	* decl.c (finish_enum): Reverse the values so that they are in
	the correct order.

	* pt.c (instantiate_class_template): Don't initialize
	BINFO_BASETYPES until the vector is filled out.
	(unify): Don't abort on conflicting bindings, just fail.
	(instantiate_decl): Do push_tinst_level before any tsubsting.

	* method.c (build_overload_value): Handle getting a
	TEMPLATE_CONST_PARM for a pointer.

Tue Jan  7 14:00:58 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (expand_member_init): Don't give 'not a base' error for
	templates.

	* pt.c (instantiate_decl): Call import_export_decl later.

	* pt.c (instantiate_class_template): Return a value.

	* parse.y (extension): New rule for __extension__.
	(extdef, unary_expr, decl, component_decl): Use it.

Tue Jan  7 09:20:28 1997  Mike Stump  <mrs@@cygnus.com>

	* class.c (base_binfo): Remove unused base_has_virtual member.
	(finish_base_struct): Likewise.
	(finish_struct_1): Likewise.

Tue Dec 31 20:25:50 1996  Mike Stump  <mrs@@cygnus.com>

	* search.c (expand_upcast_fixups): Fix bogus code generation
	problem where the generated code uses the wrong index into the
	runtime built vtable on the stack.  Old code could clobber random
	stack values.

Tue Dec 31 15:16:56 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (perform_member_init): Make sure the partial EH cleanups
	live on the function_obstack.

Fri Dec 27 10:31:40 1996  Paul Eggert  <eggert@@twinsun.com>

	* Make-lang.in (g++spec.o): Don't use $< with an explicit target;
	this isn't portable to some versions of `make' (e.g. Solaris 2.5.1).

Tue Dec 24 10:24:03 1996  Jeffrey A Law  (law@@cygnus.com)

	* decl.c (grokvardecl): Avoid ANSI style initialization.

Sun Dec 22 04:22:06 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst): Tweak arg types for a FUNCTION_TYPE.

Fri Dec 20 17:09:25 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Call grok_{ctor,op}_properties.

Fri Dec 20 12:17:12 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* g++spec.c (lang_specific_driver): Put missing hyphen in front of
	arguments we compare against.  Start the count of I at 1, not 0,
	since argv[0] is still the command.

Thu Dec 19 11:53:57 1996  Stan Shebs  <shebs@@andros.cygnus.com>

	* lang-specs.h: Accept .cp as an C++ extension.

Mon Dec 16 22:43:31 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cp-tree.h (ptr_reasonably_similar): Add decl.

Thu Dec 12 15:00:35 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (grokvardecl): Change SPECBITS parm to be the SPECBITS_IN
	pointer.  New local SPECBITS with the parm's value.
	(grokdeclarator): Pass &specbits down.

	* parse.y (expr_no_commas): Make sure $$ is not an error_mark_node
	before we try to do C_SET_EXP_ORIGINAL_CODE on it.

	* search.c (envelope_add_decl): Check that the CLASSTYPE_CID of
	CONTEXT is not 0 before we try to use TYPE_DERIVES_FROM.

	* decl.c (cplus_expand_expr_stmt): Only expand the expr if EXP is
	not an error_mark_node.

Sat Dec  7 17:20:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h (TYPE_MAIN_DECL): Use TYPE_STUB_DECL.
	* *.c: Use TYPE_MAIN_DECL instead of TYPE_NAME where appropriate.
	
Fri Dec  6 14:40:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grokdeclarator): When giving an anonymous struct a name,
	replace TYPE_NAME instead of TYPE_IDENTIFIER (so TYPE_STUB_DECL is
	not affected).

	* typeck2.c (build_m_component_ref): If component is a pointer
	to data member, resolve the OFFSET_REF now.

	* call.c (convert_like): Don't go into infinite recursion.

	* pt.c (coerce_template_parms): Use tsubst_expr for non-type args.

	* class.c (finish_struct_1): Set DECL_ARTIFICIAL on the vptr.
	* tree.c (layout_basetypes): And on the vbase ptr.

Thu Dec  5 02:11:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (BOOL_TYPE_SIZE): Define in terms of POINTER_SIZE or
	CHAR_TYPE_SIZE so bool is always the same size as another type.

	* decl.c (pushtag): Set DECL_IGNORED_P for DWARF, too.

Tue Dec  3 23:18:37 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (grok_x_components): Remove synthesized methods from
	TYPE_METHODS of an anonymous union, complain about member
	functions.
	* decl.c (shadow_tag): Wipe out memory of synthesized methods in
	anonymous unions.
	(finish_function): Just clear the DECL_RTL of our arguments.

Fri Nov 29 21:54:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Emit DWARF debugging info for static data
	members.

	* pt.c (tsubst): If t is a stub decl, return the stub decl for type.

Wed Nov 27 14:47:15 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (build_component_ref): Don't die if COMPONENT isn't a
	IDENTIFIER_NODE.

Wed Nov 27 16:05:19 1996  Michael Meissner  <meissner@@tiktok.cygnus.com>

	* Make-lang.in (g++-cross$(exeext)): Fix typo.

Wed Nov 27 08:14:00 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	Make the g++ driver now be a standalone program, rather than one
	that tries to run the gcc driver after munging up the options.
	* Make-lang.in (g++.c, g++spec.o): New rules.
	(g++.o): New rule, based on gcc.o with -DLANG_SPECIFIC_DRIVER
	added.
	(g++$(exeext)): New rule, based on xgcc rule.
	(g++-cross$(exeext)): Now just copies g++$(exeext) over.
	* g++spec.c: New file.
	* g++.c: Removed file.

Tue Nov 26 19:01:09 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (build_up_reference): Arrange for any temporary values
	that have been keep in registers until now to be put into memory.

Mon Nov 25 15:16:41 1996  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	* Make-lang.in (c++.stage[1234]): Depend upon stage[1-4]-start, so
	that make -j3 bootstrap works better.

Sun Nov 24 02:09:39 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (pushtag): Do pushdecl for anon tags.

Thu Nov 21 16:30:24 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (c_expand_return): Fix logic.
	(unary_complex_lvalue): Avoid unused warning on address of INIT_EXPR.

Wed Nov 20 18:47:31 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* g++.c (main): Make sure arglist has a final NULL entry.  Add
	PEXECUTE_LAST to the flags passed to pexecute, as otherwise
	stdin/stdout of the invoked program are redirected to
	nowheresville.

Tue Nov 19 16:12:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (implicitly_declare): Set DECL_ARTIFICIAL.

Tue Nov 19 15:48:19 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (resolve_offset_ref): Handle obj.vfn better.
	* typeck.c (build_component_ref): Set TREE_TYPE on result from
	build_vfn_ref.

Tue Nov 19 13:14:33 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (convert_for_assignment): Also handle anachronistic
	implicit conversions from (::*)() to cv void*.
	* cvt.c (cp_convert_to_pointer): Likewise.

Mon Nov 18 17:05:26 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (handle_cp_pragma): Fix bogus warning.

Mon Nov 18 16:10:43 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (cp_convert_to_pointer): Avoid thinking a POINTER_TYPE
	(METHOD_TYPE) is a TYPE_PTRMEMFUNC_P.

Thu Nov 14 23:18:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (finish_struct_1): Support DWARF2_DEBUG.
	* search.c (dfs_debug_mark): Likewise.
	* decl2.c (finish_vtable_vardecl): Likewise.
	* decl.c (pushtag, finish_enum): Likewise.
	* lex.c (check_newline): Use debug_* instead of calling *out
	functions directly.

Thu Nov 14 15:21:46 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* Make-lang.in (cplib2.ready): Add else clause to avoid problems
	on some picky hosts.

Wed Nov 13 12:32:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (finish_struct_1): A class has a non-trivial copy
	constructor if it has virtual functions.

	* cvt.c (cp_convert): Always call a constructor.

	* call.c (reference_binding): Still tack on a REF_BIND
	for bad conversions.
	(build_user_type_conversion_1): Propagate ICS_BAD_FLAG.

	* typeck.c (convert_arguments): Pass LOOKUP_ONLYCONVERTING.
	(c_expand_return): Likewise.
	* typeck2.c (digest_init): Likewise for { }.
	* init.c (expand_aggr_init_1): Keep the CONSTRUCTOR handling.
	* cvt.c (cp_convert): Handle failure better.

Wed Nov 13 11:51:20 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* g++.c (main): Also set PEXECUTE_SEARCH, to make the invocation
	of GCC be path-relative. 

Wed Nov 13 11:27:16 1996  Michael Meissner  <meissner@@tiktok.cygnus.com>

	* Make-lang.in (g++-cross): G++-cross doesn't need version.o, but
	it does need choose-temp.o and pexecute.o.

Wed Nov 13 07:53:38 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* g++.c (error) [!HAVE_VPRINTF]: Put error back for the only time
	that we still use it.
	(P_tmpdir, R_OK, W_OK, X_OK) [__MSDOS__]: Delete unnecessary macros.

Wed Nov 13 02:00:26 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (expand_default_init): Avoid calling constructors to 
	initialize reference temps.

	* cvt.c (convert_to_reference): Fix.

Tue Nov 12 19:10:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (cp_convert): Simplify for flag_ansi_overloading.
	(convert_to_reference): Likewise.
	* typeck.c (convert_for_initialization): Likewise.
	* init.c (expand_default_init): Likewise.
	(expand_aggr_init_1): Likewise.
	* cp-tree.h (CONV_NONCONVERTING): Lose.
	* typeck.c (build_c_cast): Lose allow_nonconverting parm.
	* *.c: Adjust.
	* call.c (build_user_type_conversion_1): Assume LOOKUP_ONLYCONVERTING.

Tue Nov 12 16:29:04 1996  Brendan Kehoe  <brendan@@canuck.cygnus.com>

	* pt.c (tsubst_expr): Reverse args to expand_start_catch_block.

Tue Nov 12 15:26:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (expand_aggr_init_1): Don't crash on non-constructor
	TARGET_EXPR.

Tue Nov 12 14:00:50 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* g++.c: Include gansidecl.h.
	(VPROTO, PVPROTO, VA_START): Delete.
	(choose_temp_base_try, choose_temp_base, perror_exec,
	run_dos) [__MSDOS__]: Delete fns.
	(pfatal_with_name): Delete fn.
	(temp_filename): Declare like in gcc.c.
	(pexecute, pwait, choose_temp_base): Declare from gcc.c.
	(error_count, signal_count): Define.
	(error): Delete both definitions.
	(PEXECUTE_{FIRST,LAST,SEARCH,VERBOSE}): Define from gcc.c.
	(pfatal_pexecute): Add fn from gcc.c.
	(main): Rename local VERBOSE var to VERBOSE_FLAG.  Rewrite the
	code to use the pexecute stuff also used by gcc.c.
	(MIN_FATAL_STATUS): Define.
	* Make-lang.in (g++): Add dependency on and linking with
	choose-temp.o and pexecute.o.

	* cp-tree.h: Include gansidecl.h.
	(STDIO_PROTO): Delete #undef/#define.
	* cvt.c (NULL): Delete #undef/#define.
	* expr.c (NULL): Likewise.
	* init.c (NULL): Likewise.
	* rtti.c (NULL): Likewise.
	* xref.c (NULL): Likewise.

	* cp-tree.h (build_user_type_conversion): Add prototype.
	* call.c (build_user_type_conversion): Delete prototype.  Correct
	decl of FLAGS arg to be an int.
	* cvt.c (build_user_type_conversion): Likewise.

Tue Nov 12 12:16:20 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.def: Add TRY_BLOCK and HANDLER.
	* except.c (expand_start_catch_block): Support templates.
	* parse.y (try_block, handler_seq): Likewise.
	* pt.c (tsubst_expr): Support TRY_BLOCK and HANDLER.

Mon Nov 11 13:57:31 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (current_template_args): New fn.
	(push_template_decl): Use it.
	* decl.c (grokdeclarator): Use it.

	* decl2.c (build_expr_from_tree): Dereference ref vars.

	* decl.c (grokdeclarator): Generalize handling of TYPENAME_TYPEs in
	the decl-specifier-seq.

	* decl.c (grok_op_properties): Don't force the type of a conversion
	op to be complete.  Don't warn about converting to the same type
	for template instantiations.

	* decl2.c (finish_file): Don't call instantiate_decl on synthesized
	methods.

Mon Nov 11 13:20:34 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (get_delta_difference): Remove previous bogusness.
	Don't give errors if force is set.

Fri Nov  8 17:38:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Don't emit debug info.
	* decl.c (pushdecl): Lose obsolete code.
	(grokdeclarator): Still do the long long thing after complaining.
	* search.c (note_debug_info_needed): Don't do anything if we're in a 
	template.
	* method.c (synthesize_method): For non-local classes,
	push_to_top_level first.

Fri Nov  8 11:52:28 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (get_delta_difference): Add no_error parameter.
	(build_ptrmemfunc): Call get_delta_difference with no_error set;
	we don't want error messages when converting unrelated
	pointer-to-member functions.

Thu Nov  7 11:16:24 1996  Mike Stump  <mrs@@cygnus.com>

	* error.c (dump_expr): Improve the wording on error messages that
	involve pointer to member functions.

Tue Nov  5 17:12:05 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (cp_convert_to_pointer): Move code for conversions from
	(::*)() to void* or (*)() up a bit, so that we can convert from
	METHOD_TYPEs as well.

Tue Nov  5 14:54:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (get_tinfo_fn): Make sure 'type' is permanent.
	There are no 'member' types.
	(get_tinfo_fn_dynamic): Diagnose typeid of overloaded fn.
	(build_x_typeid): Handle errors.

Mon Nov  4 17:43:12 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (convert_for_assignment): Handle anachronistic implicit
	conversions from (::*)() to void* or (*)().
	* cvt.c (cp_convert_to_pointer): Likewise.
	(cp_convert_to_pointer_force): Remove cp_convert_to_pointer
	conversions from here.
	* decl2.c (lang_decode_option): Add -W{no-,}pmf-conversions.
	* lang-options.h: Likewise.
	* decl2.c (warn_pmf2ptr): Define.
	* cp-tree.h: Declare it.
	* typeck2.c (digest_init): Allow pmfs down into
	convert_for_initialization.

Sun Nov  3 09:43:00 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (c_expand_return): Fix for returning overloaded fn.

Fri Nov  1 08:53:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h (DIRECT_BIND): Change from INDIRECT_BIND.
	* decl.c (grok_reference_init): Pass DIRECT_BIND.
	* cvt.c (build_up_reference): Don't mark 'this' addressable.  Use
	DIRECT_BIND.
	* call.c (convert_like): Don't pass INDIRECT_BIND.
	* typeck.c (convert_arguments): Likewise.
	* typeck.c (mark_addressable): Allow &this if flag_this_is_variable.

Thu Oct 31 17:08:49 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (mark_addressable): Support TARGET_EXPR, unify with
	similar code in build_up_ref.
	* cvt.c (build_up_reference): Drastically simplify.

Mon Oct 28 12:45:05 1996  Jeffrey A Law  (law@@cygnus.com)

	* typeck.c (signed_or_unsigned_type): If the given type already
	as the correct signedness, then just return it.

	* typeck.c ({un,}signed_type): If can't do anything, call
	signed_or_unsigned_type.

Thu Oct 24 14:21:59 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* decl2.c (copy_assignment_arg_p): Don't buy the farm if
	current_class_type is NULL.

Wed Oct 23 00:43:10 1996  Jason Merrill  <jason@@gerbil.cygnus.com>

	* class.c (finish_struct_1): Avoid empty structs by adding a field
	so layout_type gets the mode right.

	* typeck.c (c_expand_return): Drastically simplify.

Mon Oct 21 22:34:02 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (decay_conversion): Handle overloaded methods.

Fri Oct 18 16:03:48 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): A TARGET_EXPR has side-effects.

Thu Oct 17 11:31:59 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (convert_to_pointer_force): Add code to support pointer to
	member function to pointer to function conversions.
	* init.c (resolve_offset_ref): Add code to allow faked up objects,
	ignoring them if they are not used, and giving an error, if they
	are needed.
	* typeck.c (get_member_function_from_ptrfunc): Fold e1 to improve
	code, and so that we can give an error, if we needed an object,
	and one was not provided.
	(build_c_cast): Don't call default_conversion when we want to
	convert to pointer to function from a METHOD_TYPE.

Mon Oct 14 00:28:51 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* Make-lang.in (cplib2.ready): Fix logic.

	* decl.c (shadow_tag): Only complain about non-artificial function
	members.

	* class.c (finish_struct_1): Add synthesized methods to TYPE_METHODS.

Fri Oct 11 16:12:40 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* expr.c (cplus_expand_expr): Pre-tweak call_target like
	expand_inline_function would.

	* pt.c (mark_decl_instantiated): If extern_p, call
	mark_inline_for_output.

Thu Oct 10 15:58:08 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (unary_complex_lvalue): Add code to handle intermediate
	pmd conversions.

	* typeck.c (get_delta_difference): Fix wording, as we can be used
	for pointer to data members.

Tue Oct  8 12:43:51 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* pt.c (tsubst): If the function decl isn't a member of this
	template, return a copy of the decl (including copying the
	lang-specific part) so we don't hose ourselves later.

Thu Oct  3 16:24:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (finish_struct): Remove DWARF-specific tag handling.
	* decl.c (pushtag): Likewise.
	(finish_function): Always clear DECL_ARGUMENTS on function decls with
	no saved RTX.
	* decl2.c (finish_file): Emit DWARF debugging info for static data
	members.

Wed Oct  2 21:58:01 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* decl.c (duplicate_decls): Make sure the old DECL_LANG_SPECIFIC
	isn't the same as the new one before we whack it.

Mon Sep 30 13:38:24 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c, cp-tree.h, cvt.c, decl.c, decl2.c, gxx.gperf, hash.h,
	lex.c, method.c, parse.y, typeck.c, typeck2.c: Remove
	warn_traditional and warn_strict_prototypes; remove ancient
	'overload' code; remove references to flag_traditional.

Mon Sep 30 12:58:40 1996  Mike Stump  <mrs@@cygnus.com>

	* input.c (sub_getch): Handle 8-bit characters in string literals.

Sun Sep 29 03:12:01 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (mapcar): Handle CONSTRUCTORs.
	(copy_to_permanent): Handle expression_obstack properly.

	* Make-lang.in (cplib2.txt): Also depend on the headers.

	* rtti.c (get_tinfo_var): Don't assume that POINTER_SIZE ==
	INT_TYPE_SIZE.
	(expand_class_desc): Use USItype for offset field.
	* tinfo.h (struct __class_type_info): Likewise.

	* method.c (build_overload_int): TYPE_PRECISION should be applied
	to types.

Sat Sep 28 14:44:50 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_op): A COND_EXPR involving void must be a
	builtin.

Fri Sep 27 16:40:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_x_component_ref): New fn.
	(build_object_ref): Use it.
	* parse.y (primary): Use it.
	* decl2.c (build_expr_from_tree): Use it.
	* cp-tree.h: Declare it.

	* decl.c (start_decl): variable-sized arrays cannot be initialized.
	* error.c (dump_type_suffix): Handle variable arrays.

Fri Sep 27 13:14:05 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* Make-lang.in (exception.o): Put back compiling it with -fPIC.

Fri Sep 27 03:00:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (lookup_name_real): Don't try to look up anything in a
	TYPENAME_TYPE.

	* tinfo2.cc (__throw_type_match_rtti): Oops.

Thu Sep 26 22:11:05 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* Make-lang.in (exception.o): Use -fno-PIC for now.

Thu Sep 26 10:59:00 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (build_dynamic_cast): Pass tinfo fns rather than
	calling them.
	(get_tinfo_fn_dynamic): Extracted from build_typeid.
	* tinfo2.cc (__dynamic_cast): Adjust.
	
	* rtti.c (build_typeid): Use resolves_to_fixed_type_p.
	(build_x_typeid): Likewise.

	* parse.y: Call build_x_typeid instead of build_typeid.
	* cp-tree.def: Add TYPEID_EXPR.
	* pt.c (tsubst_copy): Handle typeid.
	* decl2.c (build_expr_from_tree): Likewise.
	* rtti.c (build_x_typeid): Throw bad_typeid from here.
	(build_typeid): Not here.
	* cp-tree.h: Declare build_x_typeid.

Wed Sep 25 17:26:16 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (convert_like): Pull out constant values.

	* tree.c (mapcar): Use build_cplus_array_type, not build_array_type.

Wed Sep 25 17:28:53 1996  Michael Meissner  <meissner@@tiktok.cygnus.com>

	* decl.c (init_decl_processing): Create short int types before
	creating size_t in case a machine description needs to use
	unsigned short for size_t.

Tue Sep 24 18:18:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* Make-lang.in (exception.o): Turn off pic.

	* tinfo2.cc (__throw_type_match_rtti): Fix cv-variants of the same
	type, multi-level ptr conversions.

	* rtti.c (call_void_fn): Renamed and genericized from throw_bad_cast.
	(throw_bad_cast): Use it.
	(throw_bad_typeid): New fn.
	(build_typeid): Throw bad_typeid as needed.
	Use build_call.
	(synthesize_tinfo_fn): Handle functions and arrays before checking
	for cv-quals.

	* Remove .h from standard C++ headers, add new.h, move into inc
	subdirectory.

	* exception*: Remove pointer from object, constructors.  Add
	default exception::what that uses type_info::name.  Add
	__throw_bad_typeid.

	* init.c (build_new): Don't add a cookie to new (void *) T[2].

Mon Sep 23 15:21:53 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* Make-lang.in: Building C++ code depends on cc1plus.

Mon Sep 23 12:38:40 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (struct saved_scope): Declare PROCESSING_TEMPLATE_DECL as
	a HOST_WIDE_INT, not a tree.

Mon Sep 23 12:36:02 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* exception.cc: Don't include <stdlib.h>.

	* Make-lang.in (c++.clean): Remove cplib2.*.

Mon Sep 23 09:42:19 1996  Doug Evans  <dje@@canuck.cygnus.com>

	* parse.y (component_decl_1, component_costructor_declarator case):
	Pass attributes/prefix_attributes in tree list.

Mon Sep 23 01:18:50 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tinfo{,2}.cc: #include <stddef.h> instead of <stdlib.h>.

Sun Sep 22 05:31:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (do_identifier): Don't do deferred lookup in a template
	header.

	* typeck2.c (store_init_value): Oops.

	* new.{h,cc}, exception.{h,cc}, typeinfo.h, tinfo{2.cc,.cc,.h}: 
	New files for C++ lang-support library.
	* Make-lang.in (CXX_EXTRA_HEADERS): Define.
	(CXX_LIB2FUNCS): Define.
	And rules for building the C++ lang-support code.
	* config-lang.in (headers): Define.
	(lib2funcs): Define.

Sat Sep 21 19:17:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (build_expr_from_tree): If CONSTRUCTOR has a type, call
	digest_init.
	* pt.c (tsubst_copy): Compute type for CONSTRUCTOR.
	* typeck2.c (store_init_value): Check for initializing pmf with { }
	here.
	(process_init_constructor): Not here.

Thu Sep 19 16:41:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (begin_template_parm_list): Increment
	processing_template_decl here.
	(end_template_parm_list): Not here.
	(process_template_parm): No need to add 1 to it now.
	* *.c: Use processing_template_decl instead of current_template_parms
	to check for being in a template.

	* pt.c (uses_template_parms): Handle SCOPE_REF.  Fix CONSTRUCTOR.
	(tsubst_copy): Handle CONSTRUCTOR.
	(instantiate_decl): Set up context properly for variables.
	* decl2.c (build_expr_from_tree): Handle CONSTRUCTOR.
	* class.c (finish_struct): Reverse CLASSTYPE_TAGS.

Wed Sep 18 13:30:20 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* lex.c (enum tree_node_kind) [GATHER_STATISTICS]: Put the enum back.

Wed Sep 18 04:24:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (make_thunk): Call comdat_linkage before setting the
	TREE_CODE.

	* decl2.c (comdat_linkage): Use make_decl_one_only.
	(import_export_decl): Likewise.
	* decl.c (init_decl_processing): Check supports_one_only instead of
	SUPPORTS_WEAK.

Sat Sep 14 08:34:41 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (grokfield): Tighten checking for access decls.

	* decl.c (make_typename_type): Resolve references to
	current_class_type.  Set CLASSTYPE_GOT_SEMICOLON.
	(lookup_name_real): Types that depend on a template parameter get
	an implicit 'typename' unless they're in the current scope.
	(start_decl_1): We don't care about incomplete types that depend
	on a template parm.
	(grokdeclarator): Resolve 'typename's in the type specifier that
	refer to members of the current scope.

	* call.c (build_over_call): Remove 'inline called before
	definition' diagnostic.
	(build_method_call): Likewise.
	* decl.c (duplicate_decls): Downgrade 'used before declared
	inline' to a warning, only with -Winline.

Fri Sep 13 17:31:40 1996  Stan Shebs  <shebs@@andros.cygnus.com>

	* mpw-make.sed: Fix include paths, add @@DASH_C_FLAG@@ to compile.

Wed Sep 11 22:38:13 1996  Gerald Baumgartner  <gb@@cs.purdue.edu>

	* call.c (build_method_call): When calling a signature
	default implementation, as in other cases, let instance_ptr simply
	be instance.

Wed Sep 11 22:14:44 1996  Mike Stump  <mrs@@cygnus.com>

	* parse.y (simple_stmt): Cleanup and use do_poplevel ().

Wed Sep 11 22:10:48 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_start_catch_block): Add a pushlevel so that -g
	works on hppa and SPARC.

Wed Sep 11 10:18:06 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* typeck.c (build_indirect_ref): Catch PTR being an error_mark_node.

Mon Sep  9 19:51:14 1996  Gerald Baumgartner  <gb@@cs.purdue.edu>

	* call.c (build_over_call): Check first whether DECL_CONTEXT exists
	before testing whether it's a signature.

Sun Sep  8 16:06:57 1996  Gerald Baumgartner  <gb@@cs.purdue.edu>

	* call.c (build_new_method_call): Don't complain about signature
	pointers and references not being an aggr type.
	(build_this): If a signature pointer or reference was passed in,
	just return it.
	(build_new_method_call): If instance is a signature pointer, set
	basetype to the signature type of instance.
	* sig.c (build_signature_method_call): Deleted basetype and
	instance parameters, they can be found as the DECL_CONTEXT of
	function and as the first argument passed in.
	* cp-tree.h: Changed declaration of build_signature_method_call.
	* call.c (build_method_call): Deleted first two arguments in call
	of build_signature_method_call.
	(build_over_call): Added call to build_signature_method_call.

Thu Sep  5 16:51:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_c_cast): Don't tack a non_lvalue_expr onto a
	target_expr.

Thu Sep  5 10:05:38 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cvt.c (convert_to_reference): Use %#T, not %#D, for error.

Wed Sep  4 17:16:09 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* except.c (expand_start_try_stmts): Move to except.c in the backend.
	(expand_end_try_stmts): Remove.

	* init.c (perform_member_init): Use add_partial_entry () instead
	of directly manipulating lists.
	(emit_base_init): Ditto.

Wed Sep  4 12:14:36 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_exception_blocks): Always make sure USE and
	CLOBBER insns that came at the end still do, the backend relies
	upon this.

Wed Sep  4 07:44:48 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): We can only use a TARGET_EXPR of the
	right type.

Tue Sep  3 19:26:05 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (convert_to_reference): Revert last change, don't complain
	about temp without target decl.

Tue Sep  3 10:22:56 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (grokdeclarator): Don't core dump when void() is given.

Tue Sep  3 02:38:56 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (copy_args_p): Don't crash.

Fri Aug 30 14:26:57 1996  Mike Stump  <mrs@@cygnus.com>

	* pt.c (tsubst): And support template args inside the exception
	specification.

	* pt.c (tsubst): Add support for exception specifications in
	template functions.

Fri Aug 30 10:01:55 1996  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.def (DECL_STMT): Eliminate the throw spec field, only 3
	fields now.
	* cp-tree.h (start_decl): Eliminate the throw spec parameter.
	(start_function): Likewise.
	(start_method): Likewise.
	(grokfield): Likewise.
	(make_call_declarator): Add throw spec parameter.
	(set_quals_and_spec): Add routine.
	* lex.c (set_quals_and_spec): Likewise.
	* decl.h (grokdeclarator): Eliminate the throw spec parameter.
	* decl.c (shadow_tag): Eliminate the throw spec parameter to
	grokdeclarator.
	(groktypename): Likewise.
	(start_decl): Eliminate the throw spec parameter.  Eliminate the
	throw spec parameter to grokdeclarator.  Eliminate the throw spec
	field in DECL_STMT.
	(cp_finish_decl): Eliminate the throw spec field in DECL_STMT.
	(grokfndecl): Remove useless set of raises.
	(grokdeclarator): Eliminate the throw spec parameter.  Eliminate
	the throw spec parameter to start_decl.  Pull the throw spec out
	of the call declarator.
	(grokparms): Eliminate the throw spec parameter to grokdeclarator.
	(start_function): Eliminate the throw spec parameter.  Eliminate
	the throw spec parameter to grokdeclarator.
	(start_method): Likewise.
	* decl2.c (grokfield): Likewise.
	(grokbitfield): Eliminate the throw spec parameter to grokdeclarator.
	(grokoptypename): Likewise.
	(finish_file): Eliminate the throw spec parameter to
	start_function.  Add throw spec to make_call_declarator.
	* except.c (init_exception_processing): Add throw spec to
	make_call_declarator.  Eliminate the throw spec parameter to
	start_decl.
	(expand_start_catch_block): Eliminate the throw spec parameter to
	grokdeclarator.
	(expand_builtin_throw): Add throw spec to make_call_declarator.
	Eliminate the throw spec parameter to start_function.
	(start_anon_func): Likewise.
	* lex.c (make_call_declarator): Add throw spec parameter.
	(set_quals_and_spec): New routine.
	(cons_up_default_function): Add throw spec to make_call_declarator.
	Eliminate the throw spec parameter to grokfield.
	* method.c (synthesize_method): Eliminate the throw spec parameter
	to start_function.
	* pt.c (process_template_parm): Eliminate the throw spec parameter
	to grokdeclarator.
	(tsubst): Add throw spec to make_call_declarator.
	(tsubst_expr): Eliminate the throw spec parameter to start_decl.
	(do_function_instantiation): Eliminate the throw spec parameter to
	grokdeclarator.  Eliminate the throw spec parameter to
	start_function.
	* rtti.c (synthesize_tinfo_fn): Eliminate the throw spec parameter
	to start_function.
	* parse.y (datadef): Remove non-winning optimization.
	(decl): Likewise.
	(fndef): Remove ambiguous error productions uncovered by grammer
	fixing.
	(constructor_declarator): Add exception_specification_opt here.
	(component_constructor_declarator): Likewise.
	(direct_after_type_declarator): Likewise.
	(complex_direct_notype_declarator): Likewise.
	(direct_abstract_declarator): Likewise.
	(fn.def1): Remove exception_specification_opt.
	(fn.def2): Likewise.
	(condition): Likewise.
	(initdcl0): Likewise.
	(initdcl): Likewise.
	(notype_initdcl0): Likewise.
	(nomods_initdcl0): Likewise.
	(component_decl_1): Likewise.
	(component_declarator): Likewise.
	(after_type_component_declarator0): Likewise.
	(after_type_component_declarator): Likewise.
	(notype_component_declarator): Likewise.

Wed Aug 28 01:40:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): Also use an INIT_EXPR when
	initializing anything from an rvalue.

	* call.c (build_over_call): Call stabilize_reference when building
	an INIT_EXPR instead of calling the copy ctor.

	* call.c (joust): Extend the previous change to all comparisons.

	* decl2.c, method.c, lex.c: Use MAKE_DECL_ONE_ONLY and 
	NO_LINKAGE_HEURISTICS.

	* decl2.c (finish_file): Emit any statics that weren't already.

	* typeck.c (build_static_cast): Implement.
	* tree.c (build_cplus_new): Handle getting a TARGET_EXPR.
	* decl.c (grokparms): Use can_convert_arg instead of
	implicit_conversion directly.
	(copy_args_p): New fn.
	* cvt.c (convert_to_reference): Don't complain about temp with
	static_cast.
	(build_up_reference): Handle TARGET_EXPRs.
	* call.c (build_over_call): Elide unnecessary temps.
	(can_convert*): Use new overloading code.

Tue Aug 27 13:12:21 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c: Move TYPE_PTR*_MACROS ...
	* cp-tree.h: To here.
	* typeck.c (build_reinterpret_cast): Implement.

	* call.c (add_builtin_candidate): Use TYPE_PTROB_P instead of
	ptr_complete_ob.
	(joust): If we're comparing a function to a builtin and the worst
	conversion for the builtin is worse than the worst conversion for the
	function, take the function.

	* typeck.c (build_const_cast): Implement.
	(comp_ptr_ttypes_const): Like comp_ptr_ttypes, for const_cast.
	(comp_ptr_ttypes_reinterpret): Like cpt, for reinterpret_cast.

Tue Aug 27 13:14:58 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* rtti.c (build_dynamic_cast): Don't try to dereference exprtype
	too early. Make sure we explode if exprtype turns out to be a
	NULL_TREE when it shouldn't be.

Tue Aug 27 10:56:21 1996  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h: New routine make_call_declarator.
	* lex.c (make_call_declarator): Define it.
	* except.c (init_exception_processing): Use it.
	(expand_builtin_throw): Likewise.
	(start_anon_func): Likewise.
	* decl2.c (finish_file): Likewise.
	* lex.c (cons_up_default_function): Likewise.
	* parse.y: Likewise.
	* pt.c (tsubst): Likewise.
	
Mon Aug 26 17:40:03 1996  Mike Stump  <mrs@@cygnus.com>

	* decl2.c (groktypefield): Remove unused code.

Mon Aug 26 17:00:33 1996  Mike Stump  <mrs@@cygnus.com>

	* gxx.gperf: Change TYPE_QUAL into CV_QUALIFIER.
	* parse.y: Likewise.  Change maybe_type_qual into maybe_cv_qualifier.
	Change type_quals into cv_qualifiers.  Change nonempty_type_quals into
	nonempty_cv_qualifiers.
	* hash.h: Rebuild.
	
	* lex.c (make_pointer_declarator): Change type_quals into
	cv_qualifiers.
	(make_reference_declarator): Likewise.
	
Thu Aug 22 01:09:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (start_function): Only check interface_* for templates
	with flag_alt_external_templates.

	* call.c (build_new_op): Check for comparison of different enum types.
	(build_over_call): Fix arg # output.

	* typeck.c (build_component_ref): Handle pre-found TYPE_DECL.

Wed Aug 21 00:13:15 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_op): Check for erroneous args.

	* call.c (build_new_method_call): Add missing args to cp_error.

	* tree.c (error_type): Dont print reference-to-array.

	* typeck.c (convert_for_assignment): Don't say contravariance for
	removing const.

Tue Aug 20 13:23:00 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): Diagnose bad convs for `this'.

	* lex.c (cons_up_default_function): Set DECL_ARTIFICIAL
	on _ctor_arg.

	* call.c (convert_like): Handle bad convs.
	(build_over_call): Handle bad convs better.

	* decl2.c: -fansi-overloading is now the default.

	* call.c (build_new_method_call): Check for erroneous args.

	* pt.c (instantiate_class_template): Propagate
	TYPE_USES_MULTIPLE_INHERITANCE.

Tue Aug 20 13:09:57 1996  Mike Stump  <mrs@@cygnus.com>

	* call.c (enforce_access): Add static to routine.

Sun Aug 18 14:35:54 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_user_type_conversion_1): Fix bad handling.
	(compare_ics): Likewise.

Sat Aug 17 21:54:11 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (standard_conversion): Oops.

Sat Aug 17 16:28:11 1996  Geoffrey Noer  <noer@@cygnus.com>

	* g++.c: Update test for win32 (&& ! cygwin32).

Sat Aug 17 03:45:31 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (comp_ptr_ttypes_real): Handle OFFSET_TYPEs properly.
	(ptr_reasonably_similar): New fn.
	* call.c (BAD_RANK): New rank.
	(ICS_BAD_FLAG): New macro.
	(standard_conversion): Handle almost-right pointer conversions.
	(reference_binding): Handle bad rvalue bindings.
	(add_*_candidate): Stuff.
	(build_over_call): Pass bad conversions to convert_for_initialization.
	(compare_ics): Handle bad convs.
	(joust): Likewise.

Fri Aug 16 15:02:19 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* init.c (expand_vec_init): Use ptrdiff_type_node instead of
	integer_type_node when computing pointer offsets.

Fri Aug 16 01:28:32 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (lvalue_type): New fn.
	(error_type): New fn.
	* call.c (op_error): Use error_type.
	(add_conv_candidate): Use lvalue_type.
	(add_builtin_candidates): Likewise.
	* error.c (args_as_string): Use error_type.

Thu Aug 15 17:27:13 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_decl): Evaluate DECL_INITIAL of a VAR_DECL here.
	(tsubst): Not here.

	* decl.c (init_decl_processing): With -ansi, __null's type is the
	signed integral type with the same number of bits as a pointer.
	Introduce a new variable null_node for it.
	* cp-tree.h: Adjust.
	* call.c (null_ptr_cst_p): Adjust.

Thu Aug 15 17:09:54 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (do_unwind): Mark %i7 as used on the SPARC so we can
	optimize.

Thu Aug 15 01:36:49 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (import_export_decl): Ignore #pragma interface for tinfo
	fns of classes without virtual functions.

	* call.c (add_function_candidate): Handle `this' specially.
	(compare_ics): Likewise.

Tue Aug 13 12:16:10 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_conditional_expr): Fix handling of __null.

	* decl2.c (comdat_linkage): New fn.
	(import_export_vtable): Use it.
	(import_export_decl): Use it.
	* method.c (make_thunk): Use it.

Mon Aug 12 00:09:18 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (end_template_decl): If we don't actually have parms, return.
	* parse.y (template_header): Accept 'template <>'.

	* errfn.c: Allow 5 args.

Sun Aug 11 15:20:58 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (make_temp_vec): New fn.
	* pt.c (push_template_decl): Handle partial specs.
	(instantiate_class_template): Likewise.
	(more_specialized): Use get_bindings.
	(more_specialized_class): New fn.
	(get_class_bindings): New fn.
	(most_specialized_class): New fn.
	(do_function_instantiation): List candidates for ambiguous case.
	* decl.c (duplicate_decls): Lose reference to DECL_TEMPLATE_MEMBERS.
	(shadow_tag): Call push_template_decl for partial specializations.
	* parse.y: Likewise.
	* cp-tree.h (DECL_TEMPLATE_SPECIALIZATIONS): Replaces
	DECL_TEMPLATE_MEMBERS.
	* call.c (print_z_candidates): Reduce duplication.

Fri Aug  9 14:36:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (lang_decode_option): Allow -fansi-overloading.

Thu Aug  8 17:04:18 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (get_bindings): New fn.
	(most_specialized): Likewise.
	(do_function_instantiation): Use them.
	(add_maybe_template): New fn.
	* cp-tree.h (DECL_MAYBE_TEMPLATE): New macro.
	* call.c (build_new_op): Handle guiding decls.
	(build_new_function_call): Likewise.
	* decl2.c (finish_file): Likewise.

	* decl2.c (mark_used): Do synthesis here.
	* call.c (build_method_call): Not here.
	(build_over_call): Or here.
	* typeck.c (build_function_call_real): Or here.
	* tree.c (bot_manip): Call mark_used on functions used in default
	args.

Thu Aug  8 17:48:16 1996  Michael Meissner  <meissner@@tiktok.cygnus.com>

	* decl2.c (import_export_vtable): Delete code that disabled vtable
	heuristic on systems with ASM_OUTPUT_EXTERNAL.

Wed Aug  7 12:44:11 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_x_function_call): Handle static call context
	better.

	* decl.c (finish_function): Set the DECL_CONTEXT of the result to
	the function, not its outer block.

	* call.c (build_field_call): Pass fields on to build_opfncall
	regardless of TYPE_OVERLOADS_CALL_EXPR.
	(build_method_call): Pass on to build_new_method_call sooner.

	* typeck.c (build_ptrmemfunc): Just return what instantiate_type
	gives us.
	* class.c (instantiate_type): Don't put a POINTER_TYPE to
	METHOD_TYPE on an expression.  Also make a copy of rhs instead of
	modifying it.

Tue Aug  6 12:58:46 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (compare_ics): Handle qual_conv after lvalue_conv.
	(add_builtin_candidate): Don't take enums for ++.
	(build_new_method_call): Handle non-aggregates and field calls.
	Move new overloading code from...
	* cvt.c: Here.

	* decl.c (grokparms): Don't check default args in templates.

Mon Aug  5 17:17:06 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (build_new_op): Fix args to build_unary_op.
	(add_builtin_candidates): Don't call type_promotes_to on float.

	* decl.c (grokparms): Check the type of the default arg.

	* cvt.c (build_new_op): Pass non-overloaded cases on rather than
	returning NULL_TREE.

	* typeck.c (build_x_binary_op): Avoid doing extra work.
	(build_x_unary_op): Likewise.
	(build_x_conditional_expr): Likewise.
	* cvt.c (build_over_call): Return.
	(add_builtin_candidate): Fix MEMBER_REF.
	(build_new_op): Likewise.

Mon Aug  5 17:07:47 1996  Mike Stump  <mrs@@cygnus.com>

	* method.c (build_overload_name): Put bug fix into code but leave
	disabled for now so we can be bug compatible with older releases
	that do repeats incorrectly.  In the future, we can enable it.

Mon Aug  5 13:46:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (convert_like): Don't call build_cplus_new twice.

	* call.c, cp-tree.h, cvt.c, decl2.c, init.c, method.c, pt.c, typeck.c:
	Control new overloading code with -fansi-overloading.

Sun Aug  4 15:29:11 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (build_over_call): Call build_cplus_new.
	* call.c (build_method_call): Likewise.
	* typeck.c (build_function_call_real): Likewise.
	(build_conditional_expr): If both operands are TARGET_EXPRs, wrap
	the COND_EXPR in a TARGET_EXPR so they use the same slot.

	* cvt.c (build_up_reference): Propagate INDIRECT_BIND to 
	recursive calls.
	* typeck.c (complete_type): Propagate
	TYPE_NEEDS_{CONSTRUCTING,DESTRUCTOR}.

Sat Aug  3 14:05:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (joust): More ?: kludging.  Sigh.
	(build_over_call): Don't try to synthesize global fns.

	* search.c (lookup_conversions): Use binfo marking.

Sat Aug  3 12:33:42 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* search.c (build_mi_matrix): Use the correct value of cid
	when determining the new mi_size.

Sat Aug  3 01:27:41 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (add_builtin_candidates): Do consider type conversion ops
	for the first parms of += et al.
	(strip_top_quals): New fn.
	(reference_binding): Use it instead of TYPE_MAIN_VARIANT.
	(implicit_conversion): Likewise.
	(add_builtin_candidates): Be careful about arrays.
	(build_new_method_call): Handle vtable optimization.

Fri Aug  2 01:26:59 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h (LOOKUP_NO_TEMP_BIND): New flag.
	* cvt.c (reference_binding): Use it.
	(implicit_conversion): Use it.
	(add_builtin_candidate, COND_EXPR): Use it.

	* cvt.c (build_new_function_call): Check for error args.

	* typeck.c (comptypes): Just check DERIVED_FROM_P, not UNIQUELY.

	* gxx.gperf: Add __null.
	* hash.h: Regenerate.
	* lex.h: Add RID_NULL.
	* lex.c (init_lex): Create null_pointer_node here, stick it in
	RID_NULL.
	* decl.c (init_decl_processing): Still set its type here.
	* cvt.c (cp_convert_to_pointer): Don't produce null_pointer_node.
	(convert_to_pointer_force): Likewise.
	(null_ptr_cst_p): Check for null_pointer_node; only accept (void*)0
	if (! pedantic).
	* call.c (convert_harshness): Use null_ptr_cst_p.
	* typeck.c (convert_for_assignment): Likewise.  Don't produce
	null_pointer_node.

	* error.c (args_as_string): Handle lists of actual args, too.
	* cvt.c (null_ptr_cst): Support (void*)0 for now.
	(build_user_type_conversion_1): Improve diagnostics.
	(build_new_function_call): Likewise.
	(build_object_call): Likewise.
	(build_new_method_call): Likewise.  Move call before def diagnostic...
	(build_over_call): Here.

	* cvt.c (build_new_method_call): Don't complain about no match if
	LOOKUP_SPECULATIVELY.
	(build_over_call): Fix 'this' for virtual fn.
	(build_new_method_call): Add diagnostic.

Thu Aug  1 16:45:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (add_function_candidate): Expect 'this' and 'in_chrg' for
	constructors to be passed in.
	(build_over_call): Likewise.
	(build_user_type_conversion_1): Pass them in.
	(convert_like): Likewise.
	(build_object_call): Handle overloaded conversions.
	(build_over_call): Pass the right args to build_vfn_ref.
	(standard_conversion): Fix pmf convs.
	(joust): Handle comparing statics and non-statics.
	(build_new_method_call): New fn.
	* call.c (build_method_call): Call it if NEW_OVER.

Thu Aug  1 16:06:14 1996  Mike Stump  <mrs@@cygnus.com>

	* lex.c (do_identifier): Don't use %O on IDENTIFIER_OPNAME_Ps, use
	%D instead.

Thu Aug  1 15:24:02 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_throw): Use maybe_build_cleanup_and_delete
	instead of just maybe_build_cleanup so that we deallocate the
	thrown object.

Thu Aug  1 15:18:00 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl2.c (finish_prevtable_vardecl): Make non-static for pt.c's use.
	* cp-tree.h (finish_prevtable_vardecl): Add decl.

Thu Aug  1 11:53:51 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* pt.c (instantiate_class_template): Call complete_type. Also, if
	we're at the end of the file and we just instantiated a template
	class with a vtable, call finish_prevtable_vardecl.

	* error.c (dump_decl): Don't explode (or explode more gracefully
	as appropriate) if the object being dumped has a null type.
	(dump_expr): Likewise.

	* search.c (build_mi_matrix): Ensure that mi_size is large enough,
	by counting the number of nodes that we'll need before allocating
	the array.
	(lookup_fnfields): Fix comment.
	(breadth_first_search): Fix comment.

Wed Jul 31 09:57:05 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Propagate TYPE_PACKED and
	TYPE_ALIGN.
	* class.c (finish_struct): Call cplus_decl_attributes here.
	(finish_struct_1): Not here.
	* cp-tree.h: Adjust.

	* pt.c (type_unification): New parameter STRICT.
	(unify): If STRICT, don't allow cv addition or base deduction.
	* call.c, class.c, cvt.c, cp-tree.h: Adjust.

Tue Jul 30 13:06:13 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* search.c (get_template_base{_recursive}): New fns.
	* pt.c (more_specialized): New fn.
	(do_function_instantiation): Use it.
	(unify): Handle base deduction.
	* cvt.c (joust): Use more_specialized.
	Don't arbitrarily choose between non-builtin candidates.
	(build_over_call): Call require_complete_type.

	* decl.c (start_function): Statics are static even in a #pragma
	interface file.

	* decl2.c (import_export_vtable): Disable vtable heuristic on
	systems with ASM_OUTPUT_EXTERNAL.

	* cvt.c (compare_ics): Fix comparison of PMEM_CONV and BASE_CONV.
	(standard_conversion): No std conv to enum type.

	* cvt.c (standard_conversion): Fix order of args to DERIVED_FROM_P
	for ptm's.

	* cvt.c (reference_binding): Bind directly to a base subobject of
	a class rvalue.

	* cvt.c (build_new_op): Enforce access control.

Tue Jul 30 09:22:53 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck2.c (process_init_constructor): When scanning the
	union for a named field, skip things that aren't FIELD_DECLs.

	* method.c (synthesize_method): Don't scan fndecl's rtl if
	we're at the end of the file; just assume the function can't
	be inlined.

Mon Jul 29 15:48:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (build_builtin_candidate): Stick a dummy conversion in if
	it failed.

	* cvt.c (build_user_type_conversion_1): Handle overloaded
	conversion ops.

	* cvt.c (add_builtin_candidates): Don't consider type conversion
	operators for the first parameter of operator=.

Mon Jul 29 15:33:55 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (complete_type): Only call layout_type if we're not
	expanding a template.

Mon Jul 29 14:40:38 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (compare_ics): Oops.

	* cvt.c (op_error): Oops.

	* cp-tree.def: Add RVALUE_CONV, rename EXACT_CONV to IDENTITY_CONV.
	* cvt.c: Add IDENTITY_RANK before others.  Use real_lvalue_p.
	(build_conv): Use them.
	(implicit_conversion): Use them.
	(convert_like): Handle them.
	(build_new_op): Handle builtin COND_EXPR again.
	(add_builtin_candidates): Strip cv-quals.  Fix oops.  Include enums
	in lists of types for COND_EXPR.
	(add_builtin_candidate): Add enum candidates for COND_EXPR.

Mon Jul 29 12:05:40 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (build_modify_expr): Always attempt to build a call to
	the assignment operator, even if we're using a default one.
	(convert_for_initialization): Call complete_type.

Mon Jul 29 11:25:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (reference_binding): A REF_BIND gets the reference type.
	(implicit_conversion): Likewise.
	(convert_like): Likewise.
	(compare_ics): Likewise.
	(compare_qual): Likewise.
	(print_z_candidates): Handle no candidates.
	(build_new_op): Don't handle builtin COND_EXPR for now.

Sat Jul 27 11:27:47 1996  Stan Shebs  <shebs@@andros.cygnus.com>

	* cvt.c (build_builtin_candidate): Init local var in an ANSI way.

Fri Jul 26 01:07:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (joust): If the candidates are the same, arbitrarily pick one.

	* cvt.c (build_builtin_candidate): Oops.
	(build_new_op): Oops.

	* method.c (build_opfncall): Pass COND_EXPR on.
	* cvt.c (build_builtin_candidate): Reorganize, support COND_EXPR.
	(add_builtin_candidate{,s}): Likewise.
	(add_builtin_candidates): Likewise.
	(print_z_candidates, op_error, build_new_op): Likewise.
	(type_decays_to): New fn.
	* lex.c (init_lex): Just say ?: for COND_EXPR.

Thu Jul 25 09:33:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (complete_type): Call layout_type rather than building
	a new array type.

	* cvt.c (add_builtin_candidate): Pointer arithmetic candidates
	only use ptrdiff_t.

Wed Jul 24 12:45:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c: Always compile the new overloading code (but don't use it).
	(implicit_conversion): Add a BASE_CONV when converting to
	the same class type.
	(convert_like): Handle BASE_CONV.

Tue Jul 23 12:46:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (build_new_op): Support {MAX,MIN}_EXPR.
	(add_builtin_candidate): Likewise.

	NEW_OVER changes:
	* typeck.c (build_x_function_call): Try an operator function
	whenever we call an object of class type.
	* method.c (build_opfncall): Pass CALL_EXPRs through.
	* cvt.c (implicit_conversion): Do const-ref case first.
	(add_conv_candidate, build_object_call, op_error): New fns.
	(ptr_complete_ob, TYPE_PTROB_P): void is not an object type.
	({add,build}_builtin_candidate{,s}, print_z_candidates): Display 
	builtin candidates.
	(build_new_op): Handle CALL_EXPR.  Don't try to decay void.
	Fall back on preincrement handling.  Use op_error.  
	Handle warn_synth.
	(convert_like): Pass INDIRECT_BIND.  Don't try to do anything with 
	an error_mark_node.
	(build_over_call): Handle PROMOTE_PROTOTYPES and ellipsis promotions
	properly.

Mon Jul 22 16:21:55 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* pt.c (tsubst_expr): Handle CONTINUE_STMT.

Mon Jul 22 15:38:58 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_component_ref_1): Use build_component_ref
	instead of open coding it here.

Mon Jul 22 12:18:54 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* g++.c (main): Don't link with -lg++.

	NEW_OVER changes:
	* cvt.c (convert_to_reference): Don't use convert_from_refeence on
	result of build_type_conversion.
	(cp_convert): Only call build_method_call for ctors if
	build_type_conversion failed.
	(ptr_complete_ob): New function.
	(TYPE_PTR{,OB,MEM}_P): New macros.
	({add,build}_builtin_candidate{,s}): New functions.
	(print_z_candidates): Handle builtins.
	(build_user_type_conversion_1): Don't use conversion fns for 
	converting to a base type.
	(build_user_type_conversion_1): Set ICS_USER_FLAG on AMBIG_CONVs.
	(build_user_type_conversion): Use convert_from_reference.
	(build_new_op): New function.
	(build_over_call): Fix handling of methods.
	(compare_ics): Handle AMBIG_CONV properly.
	* typeck2.c: Increment abort count.
	* method.c (build_opfncall): Forward most requests to build_new_op.
	* cp-tree.h (IS_OVERLOAD_TYPE): Tweak.

Fri Jul 19 17:59:29 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* error.c (dump_expr, case CONSTRUCTOR, case CAST_EXPR): Take out
	invalid second argument to dump_expr_list.

Fri Jul 19 14:04:05 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (lookup_name_real): Make sure we do obj->X::i correctly.

Thu Jul 18 14:48:23 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* decl2.c (import_export_vtable): ASM_OUTPUT_EXTERNAL, not
	ASSEMBLE_EXTERNAL.

Mon Jul 15 17:48:43 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck2.c (process_init_constructor): New pedwarn for using { }
	to initialize a pointer to member function.
	* typeck.c (build_ptrmemfunc1): Avoid use of digest_init so that
	we can avoid the new error.

Mon Jul 15 15:42:03 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_ptrmemfunc1): New function to hide details of
	pointer to member functions better.

Mon Jul 15 14:23:02 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (resolve_offset_ref): Resolve OFFSET_REFs that are
	methods into the actual method, as we know the implied object is
	not used.

Mon Jul 15 13:08:29 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* parse.y (maybecomma_warn): Only emit the pedwarn if we're not
	inside a system header.

Fri Jul 12 16:30:05 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* call.c (build_method_call): Call complete_type on the
	instance type.

Thu Jul 11 17:16:40 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_component_ref): Always build up an OFFSET_REF
	for obj_ptr->func so that we can know which object to use in a
	method call.

Wed Jul 10 19:36:37 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_ptrmemfunc): Remove sorry, now we can cast
	around things.  Also improve maintainability.

Wed Jul 10 18:20:11 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* decl.c (grokdeclarator): Check for overflow when evaluating an
	array dimension.

Wed Jul 10 17:26:19 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (cp_convert): Don't check for ambiguity with constructor
	if NEW_OVER.

	* typeck.c (build_x_function_call): Pass function overload
	questions to new overloading code if NEW_OVER.
	* init.c (expand_aggr_init_1): Only check for type conversion ops
	if we're doing copy-initialization (i.e. LOOKUP_ONLYCONVERTING).
	Don't check for ambiguity with constructor if NEW_OVER.
	* cvt.c (convert_to_reference): Dereference the result of a type
	conversion operator.
	(build_conv): Propagate ICS_USER_FLAG.
	(implicit_conversion): Call instantiate_type.
	Pass LOOKUP_ONLYCONVERTING instead of LOOKUP_NORMAL.
	(add_function_candidate): Fix cv-quals on argtype.
	(print_z_candidates): New function.
	(build_new_function_call): Call it.
	(build_user_type_conversion_1): If LOOKUP_ONLYCONVERTING, don't
	consider non-converting constructors.
	Call print_z_candidates.
	Return an AMBIG_CONV for an ambiguous conversion.
	(build_user_type_conversion): Handle AMBIG_CONV.
	(convert_like): Fix test for building TARGET_EXPR.
	Call instantiate_type.
	Handle AMBIG_CONV and LVALUE_CONV.
	(build_over_call): Handle 0 args and ellipsis.
	* cp-tree.def: Add AMBIG_CONV.

Tue Jul  9 17:48:48 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (lookup_name_real): If we find mem in obj when parsing
	`obj->mem', make sure we return the right value.

Tue Jul  9 16:11:28 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* search.c (get_base_distance): Call complete_type.

Tue Jul  9 12:46:34 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (store_bindings): Make static.

Mon Jul  8 16:42:31 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (expand_aggr_init_1): Don't check type conversions if
	NEW_OVER.

	* cvt.c (z_candidate): Put back template field.
	(add_function_candidate): Set it.
	(add_template_candidate): Likewise.
	(joust): Use it.
	(compare_qual): Handle references and pointers to members.
	(compare_ics): Handle reference bindings.

	* decl.c (duplicate_decls): Propagate DECL_ONE_ONLY.

Mon Jul  8 16:18:56 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* call.c (compute_conversion_costs): Call complete_type.

	* tree.c (vec_binfo_member): Use comptypes instead of comparing
	pointers, so we can handle template parameters.

Fri Jul  5 16:51:53 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* cvt.c (cp_convert_to_pointer): We have to call complete_type
	here; let's make it explicit instead of a side effect of an
	error check.

Wed Jul  3 16:29:51 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (z_candidate): Remove template field.
	(reference_binding): Handle binding to temporary.
	(implicit_conversion): Likewise.
	(add_function_candidate): Handle artificial constructor parms.
	Handle functions with too few parms.
	(add_template_candidate): New function.
	(build_user_type_conversion_1): Handle constructors.
	(convert_like): Likewise.
	(build_over_call): Likewise.
	(build_new_function_call): Support templates.
	(compare_ics): Fix reference, inheritance handling.

Mon Jul  1 22:58:18 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* decl.c: Add signed_size_zero_node.
	(init_decl_processing): Build it.
	* class.c (prepare_fresh_vtable): Use it instead of size_zero_node
	when we're trying to make a negative delta.

Mon Jul  1 17:56:19 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	Stop doing this damn index==strchr variable name confusion.
	* class.c (add_virtual_function): Change local var INDEX to be
	named IDX.
	(add_method): Likewise.
	* lex.c (print_parse_statistics): Likewise.
	* search.c (make_memoized_table_entry): Likewise.
	(lookup_fnfields_here): Likewise.
	(lookup_field): Likewise.
	(lookup_fnfields): Likewise.
	(get_baselinks): Likewise.
	* sig.c (build_signature_table_constructor): Likewise.
	(build_signature_method_call): Likewise.
	* typeck.c (build_x_array_ref): Change INDEX parm to be named IDX.
	(get_member_function_from_ptrfunc): Likewise.
	(build_ptrmemfunc): Change local var INDEX to be IDX.
	(c_expand_start_case): Likewise.

Sat Jun 29 14:05:46 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (cp_convert_to_pointer): Move user-defined type conversion
	handling to before extraction of TYPE_PTRMEMFUNC_FN_TYPE.
	(convert_to_reference): Use build_type_conversion to convert to
	the reference type directly.
	(standard_conversion): Fix void* case, non-conversions.
	(reference_binding): Fix expr == 0 case, non-conversions.
	(convert_like): Support REF_BIND.
	(compare_qual): Split out from compare_ics.
	(compare_ics): Use it, handle icses with only a qual_conv.

	* init.c (expand_vec_init): Don't crash if decl is NULL.

Fri Jun 28 11:52:51 1996  Stan Shebs  <shebs@@andros.cygnus.com>

	* mpw-config.in: New file, configury for Mac MPW.
	* mpw-make.sed: New file, makefile editing for MPW.

Thu Jun 27 15:18:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Call repo_template_used.

	* search.c (lookup_conversions): Only lookup conversions in
	complete types.

Thu Jun 27 12:59:53 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cp-tree.def: Renamed from tree.def, to avoid confusion with
	gcc's tree.def.
	* cp-tree.h, lex.c: Include cp-tree.def.
	* Makefile.in (CXX_TREE_H): Reference cp-tree.def.

Wed Jun 26 18:29:47 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* init.c (build_vec_delete_1): Call complete_type.

Mon Jun 24 17:17:32 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (start_anon_func): Make sure anonymous functions are
	never external.

Fri Jun 21 15:10:58 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (finish_function): If function_depth > 1, set nested.

	* decl2.c (grokbitfield): Revert Bob's change.
	* class.c (finish_struct_1): Fix handling of named bitfield widths.

Thu Jun 20 23:35:38 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (add_pending_template): Handle types.
	(lookup_template_class): With -fexternal-templates, just add the class
	to pending_templates instead of instantiating it now.
	* decl2.c (finish_file): Handle types in pending_templates.

Thu Jun 20 14:08:40 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* decl2.c (grokbitfield): Handle constant decls appropriately.
	Give an appropriate error message now instead of spewing core
	later.

Thu Jun 20 13:01:51 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c: Don't turn on thunks by default for now.

Wed Jun 19 11:37:04 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (complete_type): Handle error_mark_node.
	(common_type, OFFSET_TYPE): Handle template_type_parms.

Tue Jun 18 10:02:15 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_decl): If at_eof, call import_export_decl
	regardless of DECL_INLINE.

	* typeck.c (mark_addressable): Set TREE_ADDRESSABLE on CONSTRUCTORs.

	* class.c (finish_struct_bits): Copy TYPE_SIZE.

	* rtti.c (build_dynamic_cast): Support templates.
	* tree.def: Support DYNAMIC_CAST_EXPR.
	* pt.c (tsubst_copy): Likewise.
	* decl2.c (build_expr_from_tree): Likewise.

Mon Jun 17 15:23:36 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_static_cast): Support templates.
	(build_const_cast): Likewise.
	* tree.def: Support CONST/STATIC_CAST_EXPR.
	* pt.c (tsubst_copy): Likewise.
	* decl2.c (build_expr_from_tree): Likewise.

Sun Jun 16 12:33:57 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_vtable_vardecl): Don't trust
	TREE_SYMBOL_REFERENCED for vtables of local classes.

Fri Jun 14 18:13:36 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst_copy): Handle operator T.

Wed Jun 12 17:52:40 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* init.c (build_delete): Move creation of PARMS inside test of
	TYPE_HAS_DESTRUCTOR, since it's never used outside of that block.

Tue Jun 11 15:09:18 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (build_conditional_expr): Don't assume that
	the arguments to ?: are always pointers or records.

Tue Jun 11 13:56:23 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (import_export_decl): Still emit static/weak/comdat
	copies of inline template functions with -fno-implicit-templates.

Tue Jun 11 11:42:13 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* init.c (build_delete): Determine the complete basetype
	path to the destructor we're calling.

Fri Jun  7 15:30:10 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* decl.c (build_enumerator): Always copy the INTEGER_CST used to
	initialize the enum, because we really and truly don't know where
	it came from.
	(start_enum): Don't copy integer_zero_node because
	build_enumerator will do it.

Fri Jun  7 11:11:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (finish_function): Do access control on base destructors.

	* pt.c (tsubst, case FUNCTION_DECL): Set up
	IDENTIFIER_GLOBAL_VALUE for member functions so pushdecl doesn't
	hose us.

Fri Jun  7 10:37:33 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (build_up_reference): If we have already extended the
	lifetime of the temporary, don't try it again.
	* typeck.c (c_expand_return): Don't try and convert the return
	value twice when we want a reference, once is enough.
	
Tue Jun  4 15:41:45 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst_expr, case DECL_STMT): Don't pass
	LOOKUP_ONLYCONVERTING at all for now.

	* search.c (add_conversions): Put the conversion function in
	TREE_VALUE, the basetype in TREE_PURPOSE.
	* cvt.c (build_type_conversion): Adjust.
	* cvt.c (build_expr_type_conversion): Adjust.
	* call.c (user_harshness): Adjust.

Mon Jun  3 15:30:52 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (emit_thunk): Pretend this is a FUNCTION_DECL for the
	backend's benefit.

Mon Jun 10 18:58:19 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_start_catch_block): Add a dummy region, if we
	get an error, so that we can avoid core dumping later.

Fri May 31 14:56:13 1996  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h (OFFSET_REF): Remove.
	* tree.def (CP_OFFSET_REF): Rename to OFFSET_REF.
	* expr.c (cplus_expand_expr): Cleanup callers of expand_expr.
	* init.c (expand_aggr_init_1): Likewise.
	(build_new): Likewise.
	* typeck.c (expand_target_expr): Likewise.

Fri May 31 14:22:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_modify_expr): Don't use TREE_VALUE on a
	TARGET_EXPR.

Wed May 29 17:04:33 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (build_up_reference): Redo how and when temporaries are
	created.
	* decl.c (grok_reference_init): Don't try and be smart about
	running cleanups.

Wed May 29 16:02:08 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (build_up_reference): Add NULL_TREE to all calls to build
	(TARGET_EXPR...), now that it has 4 arguments.
	* tree.c (build_cplus_new): Likewise.

Thu May 23 16:40:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* error.c (dump_expr, case CAST_EXPR): Handle T() properly.

	* pt.c (instantiate_decl): Don't call push/pop_cp_function_context.
	* decl.c (struct saved_scope): Remove named_labels,
	{base,member}_init_list.
	(maybe_push_to_top_level): Don't set them.  Call
	push_cp_function_context if appropriate.
	(pop_from_top_level): Likewise.

	* method.c (do_build_assign_ref): Remove obsolete check of
	TYPE_HAS_ASSIGN_REF (basetype).

	* decl.c (grokfndecl): Diagnose user definition of
	implicitly-declared methods.

Thu May 23 12:13:08 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* method.c (do_build_copy_constructor): Add code to give
	meaningful error messages instead of crashing.
	(do_build_assign_ref): Don't synthesize assignment operators for
	classes containing reference or const members.

	* class.c (struct base_info): Remove cant_synth_copy_ctor
	and cant_synth_asn_ref.
	(finish_base_struct): Remove the code that tries to conditionalize
	synthesis of copy constructors & assignment operators based on
	access permissions. Instead, let it fail when it tries to
	synthesize the copy constructor. This will give meaningful error
	messages instead of silently generating code to perform a bitcopy.

Wed May 22 11:45:19 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* lex.c (real_yylex): Remove old-n-crufty #if 0 code for
	determining types for constant values.

	* decl.c (struct named_label_list): Use instead of stuffing
	random items into a TREE_LIST node.
	(named_label_uses): Use the new struct.
	(poplevel): Likewise.
	(lookup_label): Likewise.
	(define_label): Add an error message to tell the user the line
	where the goto is located in addition to the destination of the
	goto.
	(init_decl_processing): Use NULL instead of NULL_TREE to initialize
	named_label_uses.
	(finish_function): Likewise.
	
	(start_decl): Complain about defining a static data member
	in a different type from which it was declared.

Wed May 22 09:33:23 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (build_expr_type_conversion): Adjust.

Tue May 21 11:21:56 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_method_call): Always convert 'this' to the
	appropriate type.

	* search.c (add_conversions): Put the conversion function in
	TREE_VALUE, the type in TREE_PURPOSE.
	* cvt.c (build_type_conversion): Adjust.
	* call.c (user_harshness): Adjust.

	* method.c (emit_thunk): Call temporary_allocation and
	permanent_allocation around the ASM_OUTPUT_MI_THUNK case, too.

	* tree.c (build_cplus_array_type): Handle tweaking of
	TYPE_MAIN_VARIANT here.
	* typeck.c (common_type): Not here.

	* typeck.c (complete_type): Only try to complete an array type if
	it has a domain.

Mon May 20 14:55:59 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grokvardecl): Call complete_type.
	(grokdeclarator): Call complete_type for PARM_DECLs.

Fri May 17 16:41:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Re-set
	CLASSTYPE_GOT_SEMICOLON after calling finish_struct_1.

Fri May 17 14:56:55 1996  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h (cp_expand_decl_cleanup): Remove, the backend is now
	smart enough to do it right.
	* tree.c (cp_expand_decl_cleanup): Likewise.
	* decl.c (cp_finish_decl): Use expand_decl_cleanup instead of
	cp_expand_decl_cleanup.
	(store_parm_decls): Likewise.
	(hack_incomplete_structures): Likewise.
	* except.c (push_eh_cleanup): Likewise.

Fri May 17 13:13:51 1996  Mike Stump  <mrs@@cygnus.com>

	* expr.c (expand_expr, cond UNSAVE_EXPR): Move from the C++
	frontend to the backend where it belongs.
	* tree.c (unsave_expr): Likewise.
	(unsave_expr_now): Likewise.
	* tree.def (UNSAVE_EXPR): Likewise.
	* cp-tree.h (unsave_expr): Likewise.
	(unsave_expr_now): Likewise.

Fri May 17 11:02:41 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (emit_base_init): Make sure the partial EH cleanups live
	on the function_obstack.

Thu May 16 15:29:33 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* expr.c (do_case): Don't try to dereference null TREE_TYPEs
	when checking for pointer types.

Thu May 16 13:38:58 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Remove obsolete check for
	access declarations.

Thu May 16 13:34:15 1996  Mike Stump  <mrs@@cygnus.com>

	* call.c (build_overload_call): Simplify calls to
	build_overload_call by removing last parameter.
	(build_method_call): Likewise.
	* cp-tree.h: Likewise.
	* method.c (build_opfncall): Likewise.
	* typeck.c (build_x_function_call): Likewise.

Thu May 16 13:15:43 1996  Mike Stump  <mrs@@cygnus.com>

	* call.c (default_parm_conversions): Factor out common code.
	(build_method_call): Use it.
	(build_overload_call_real): Use it.

Wed May 15 14:46:14 1996  Mike Stump  <mrs@@cygnus.com>

	* call.c (build_method_call): Allow implicit & on METHOD_TYPEs,
	but pedwarn as the code is bogus.
	* typeck.c (decay_conversion): Likewise.
	(build_function_call_real): Use build_addr_func instead of
	default_conversion.  Don't allow pointer-to-method functions down
	here.
	(build_unary_op): Use real pointer-to-member functions instead of
	fake ones.
	(build_ptrmemfunc): Use build_addr_func instead of build_unary_op.
	(convert_for_assignment): Removed some obsolete code.
	* decl2.c (reparse_absdcl_as_expr): Pass current_class_ref to
	build_x_function_call instead of current_class_ptr.  Only call
	digest_init once on an initializer, we do this just checking
	TREE_TYPE.
	(build_expr_from_tree): Pass current_class_ref to
	build_x_function_call instead of current_class_ptr.
	* init.c (build_member_call): Likewise.
	* pase.y: Likewise.
	* error.c (dump_expr): Handle OFFSET_REFs better.
	* pt.c (unify): Handle pointer-to-member functions better.
	* decl.c (finish_function): Clear out current_class_ref just like
	we do for current_class_ptr.

	* typeck.c (get_delta_difference): Handle virtual bases better.

Tue May 14 16:37:37 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* sig.c (build_signature_table_constructor): Use the delta for
	the original basetype for this virtual function with thunks.
	(build_signature_method_call): We still need to adjust 'this'
	with thunks.

Tue May 14 16:27:25 1996  Mike Stump  <mrs@@cygnus.com>

	* call.c (build_addr_func): New routine.  Used to get the `real'
	address of a function or a method.  Needed to avoid getting a
	pointer-to-member function.
	(build_call): New routine to build CALL_EXPRs.
	(build_method_call): Use it.
	* cvt.c (convert_to_aggr): Likewise.
	* typeck.c (build_function_call_real): Likewise.
	* sig.c (build_signature_table_constructor): Use build_addr_func.
	* cp-tree.h (build_call, build_addr_func): Declare them.

Tue May 14 12:47:47 1996  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h (LOOKUP_AGGR): Remove, unused.
	* parse.y: Remove uses of LOOKUP_AGGR.

Tue May 14 12:07:51 1996  Mike Stump  <mrs@@cygnus.com>

	* *.[chy]: Rename current_class_decl to current_class_ptr, and
	C_C_D to current_class_ref.

Mon May 13 16:55:23 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (convert_harshness): Tighten up pointer conversions.

Sat May 11 04:33:50 1996  Doug Evans  <dje@@canuck.cygnus.com>

	* decl2.c (finish_vtable_vardecl): Surround DECL_ONE_ONLY with ifdef.
	(finish_file): Likewise.

Fri May 10 11:09:57 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (convert_fn_ptr): We don't use thunks for pmfs.

	* method.c (emit_thunk): Set flag_omit_frame_pointer in default
	code.

Thu May  9 18:18:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c: Turn on thunks by default where supported.

Tue May  7 20:39:57 1996  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h (build_overload_call_maybe): Removed.
	* call.c (build_overload_call_real): Invert meaning of last arg to
	be require_complete.
	(build_overload_call): Likewise.
	* typeck.c (build_x_function_call): Use build_overload_call_real
	instead of build_overload_call_maybe.

Mon May  6 01:23:32 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Don't try to emit functions that haven't
	been compiled.

Fri May  3 09:30:13 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_vtable_vardecl): Oops.

	* decl.c (maybe_push_to_top_level): Do save previous_class_*.
	Also store the bindings from previous_class_values.
	(pop_from_top_level): Restore them.

Thu May  2 21:56:49 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_vtable_vardecl): Only write out vtable if its
	symbol has been referenced.
	(finish_file): Re-join synthesis/vtable loop with inline emission
	loop, disable inlining when an inline is output.

Thu May  2 17:20:02 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (init_exception_processing): Setup saved_in_catch.
	(push_eh_cleanup): Reset __eh_in_catch.
	(expand_start_catch_block): Set __eh_in_catch.

Thu May  2 16:21:17 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (push_eh_cleanup): Add tracking for whether or not we
	have an active exception object.
	(expand_builtin_throw): Use it to make sure a rethrow without an
	exception object is caught.

Thu May  2 11:26:41 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (maybe_push_to_top_level): Clear out class-level bindings
	cache.

Wed May  1 11:26:52 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Also use sentries for vars with
	DECL_ONE_ONLY or DECL_WEAK set (should any such happen to be
	created).

	* lex.c (handle_cp_pragma): Disable #pragma
	interface/implementation if SUPPORTS_ONE_ONLY > 1.

Tue Apr 30 11:25:46 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (emit_thunk): Wrap default case in
	temporary/permanent_allocation.

	* method.c (make_thunk): Use DECL_ONE_ONLY.
	(emit_thunk): Call assemble_end_function.

Mon Apr 29 15:38:29 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (import_export_vtable): Use DECL_ONE_ONLY.
	(import_export_decl): Likewise.
	(finish_prevtable_vardecl): Disable vtable hack if
	SUPPORTS_ONE_ONLY > 1.

Mon Apr 29 14:32:47 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_modify_expr): PREINCREMENT_EXPR and
	PREDECREMENT_EXPRs take two arguments, not one.

Mon Apr 29 00:27:53 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (build_vtable_entry): Don't build thunks for abstract
	virtuals.

	* lex.c (real_yylex): Fix handling of __PRETTY_FUNCTION__ like C
	frontend.

Sat Apr 27 16:45:35 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (set_rtti_entry): Use size_zero_node.
	(build_vtable): Likewise.

Sat Apr 27 14:48:57 1996  Jason Merrill  <jason@@phydeaux.cygnus.com>

	* class.c (finish_struct_1): Pass size_zero_node to set_rtti_entry.
	(prepare_fresh_vtable): Likewise.

Fri Apr 26 13:14:14 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (emit_thunk): Call mark_used on the target function.

	* call.c (build_method_call): Don't warn about pending templates.

Thu Apr 25 14:55:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Fix list walking logic.

	* typeck2.c (check_for_new_type): Only warn if -pedantic.

Wed Apr 24 15:41:15 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* class.c (finish_struct_1): Remove old code for
	dont_allow_type_definitions.
	* cp-tree.h: Likewise.
	* spew.c: Make sure cp-tree.h is included before parse.h, so the
	definition of flagged_type_tree is found before it is used.
	* lex.c: Likewise.
	* parse.y: Added the ftype member to the type union, and changed a
	number of rules to use it instead of ttype. Added calls to
	check_for_new_type() as appropriate.
	* typeck2.c (check_for_new_type): New function for checking
	if a newly defined type appears in the specified tree.
	* cp-tree.h: Add new type flagged_type_tree. Add a prototype
	for check_for_new_type().

Wed Apr 24 00:36:21 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Only use a sentry if the decl is public.

	* pt.c (tsubst_expr, DECL_STMT): If we don't have an initializer,
	don't pass LOOKUP_ONLYCONVERTING.

Tue Apr 23 17:18:47 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (common_type): Fix the ARRAY_TYPE case so it
	properly keeps track of const and volatile type modifiers.

Tue Apr 23 10:52:56 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (cp_tree_equal): C++ version of simple_cst_equal.
	* pt.c (comp_template_args): Use it.

	* rtti.c (get_tinfo_fn, build_dynamic_cast, expand_*_desc): Call
	assemble_external for artificial function decls.

	* decl.c (cp_finish_decl): Oops.

Mon Apr 22 17:28:27 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (import_export_decl): Put static data member templates
	into common storage, or make them weak, depending on whether they
	are dynamically or statically initialized.
	(get_sentry): New function.
	(finish_file): Do import_export_decl for static data members before
	building the init/fini functions.  Don't init/fini a variable that's
	EXTERNAL.  Use a sentry for variables in common.  Fix mismatching
	push/pop_temp_slots.
	* decl.c (cp_finish_decl): If DECL_NOT_REALLY_EXTERN, do the
	expand_static_init thang.
	* method.c (get_id_2): New function.

Mon Apr 22 15:32:45 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* parse.y (empty_parms): Make sure we use C++-style prototypes
	when we're declaring member functions.

Sun Apr 21 10:08:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* Makefile.in (CONFLICTS): 16 s/r conflicts.
	* parse.y (self_template_type): New nonterminal.

Thu Apr 18 08:56:54 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (make_typename_type): Handle getting a TYPE_DECL for a
	name.
	* parse.y (base_class.1): Allow 'typename foo::bar'.

	* lex.c (check_newline): Remove #pragma code that plays with the
	input stream, since we now deal with tokens.  Clear nextchar when
	we're done.
	(handle_cp_pragma): Use real_yylex.
	(handle_sysv_pragma): Don't do skipline here.  Only call real_yylex
	in one place.

	* lex.c (check_for_missing_semicolon): Handle SELFNAME.

	* lex.c (handle_cp_pragma): Fix "#pragma implementation".

Wed Apr 17 16:51:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y: New token SELFNAME for potential constructor.
	* spew.c (yylex): Handle it.
	* lex.c (identifier_type): Produce it.

	* parse.y (complete_type_name): In :: case, don't push class binding.
	(complex_type_name): Likewise.

Wed Apr 17 15:02:40 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_reinterpret_cast): Handle pointer to member
	functions.

Wed Apr 17 12:28:26 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* lex.c (handle_cp_pragma): New function, with decl, doing the cc1plus
	pragmas.
	(check_newline): Put the vtable/unit/implementation/interface pragma
	code into handle_cp_pragma, replacing it with a call.
	(handle_sysv_pragma): Give int return type, and take FINPUT and TOKEN
	args.  Get the next token after handling the pragma token.

Wed Apr 17 10:28:34 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (cp_convert_to_pointer): Avoid doing base analysis on pmfs.
	(convert_to_pointer_force): Likewise.

	* init.c (build_new): Fix array new without -fcheck-new.

Tue Apr 16 13:44:58 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h, call.c, class.c, decl.c, parse.y, pt.c, rtti.c,
	tree.c: Lose TYPE_NESTED_NAME.

	* parse.y (nested_name_specifier_1): Don't treat non-identifiers
	as identifiers.

	* tree.def: Add VEC_INIT_EXPR.
	* expr.c (cplus_expand_expr): Handle it.
	* init.c (build_new): Use it instead of the RTL_EXPR nastiness and
	the extra file-scope symbol nastiness.

Mon Apr 15 16:21:29 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (make_thunk): Thunks are static.
	(emit_thunk): Use ASM_OUTPUT_MI_THUNK if it's defined.

	* decl2.c (mark_vtable_entries): Emit thunks as needed.
	(finish_file): Don't emit them here.

Sun Apr 14 11:34:39 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (build_dynamic_cast): Handle null pointers.
	(ifnonnull): New function.

Fri Apr 12 09:08:27 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* call.c (build_method_call): Remember the original basetype we
	were called with. Give an error message instead of trying
	(incorrectly) to call a non-static member function through a
	non-inherited class.

	* search.c (expand_upcast_fixups): Mark the new fixup as
	DECL_ARTIFICIAL.

Thu Apr 11 03:57:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Use a TARGET_EXPR for alloc_expr.

	* class.c (set_rtti_entry): Fix for thunks.

	* decl2.c (import_export_decl): Still emit typeinfo fns for
	cv-variants of builtin types.

	* rtti.c (expand_class_desc): Set up base_info_type_node here.
	(init_rtti_processing): Instead of here.

Wed Apr 10 14:17:13 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (init_rtti_processing): Do init regardless of -frtti.
	(build_typeid): Only complain about taking dynamic typeid without
	-frtti.

	* decl2.c: flag_rtti defaults to 1.

	* rtti.c (get_tinfo_var): The general class case is now smaller.
	(init_rtti_processing): Pack the latter three fields of base_info
	into 32 bits.

Wed Apr 10 13:50:14 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (expand_member_init): Don't dump if name is NULL_TREE.

Wed Apr 10 12:56:02 1996  Mike Stump  <mrs@@cygnus.com>

	* search.c (make_memoized_table_entry): Undefer the pop, if necessary.
	(push_memoized_context): Split out code to undefer pop_type_level to
	(clear_memoized_cache): here.
	(pop_memoized_context): We can only handle one layer of deferral of
	pop_type_level so clear the cache, if there was a previous level.

Tue Apr  9 23:06:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (init_rtti_processing): Build up base_info_type_node.
	(expand_class_desc): Use one pointer to an array of base_info
	structs, passed using a CONSTRUCTOR.

Tue Apr  9 14:20:57 1996  Mike Stump  <mrs@@cygnus.com>

	* class.c (build_vbase_path): Remove block extern for
	flag_assume_nonnull_objects here.
	(build_vfn_ref): Split out functionality into build_vtbl_ref.
	(build_vtbl_ref): New routine.
	(build_vtable): Set up rtti info here.
	(add_virtual_function): Note in CLASSTYPE_RTTI the best
	place where we can get the rtti pointers from to avoid having to
	search around for a place.
	(finish_base_struct): Likewise.
	(finish_struct_1): Likewise.  Never create totally new vtables
	with totally new vtable pointers for rtti.  Disable code to layout
	vtable pointers better until we want to break binary
	compatibility.
	* rtti.c (build_headof_sub): New routine to convert down to a
	sub-object that has an rtti pointer in the vtable.
	(build_headof): Use it.  Also, use build_vtbl_ref now to be more
	maintainable.
	(build_dynamic_cast): Make sure we have saved it, if we need to.
	* search.c (dfs_init_vbase_pointers): Disable code that deals with
	a more efficient vtable layout, enable later.
	* call.c (flag_assume_nonnull_objects): Moved declaration to
	* cp-tree.h: here.  Declare build_vtbl_ref.
	* pt.c (instantiate_class_template): Use NULL_TREE instead of 0 in
	function calls that want a tree.

Tue Apr  9 12:10:26 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (build_dynamic_cast): Handle downcasting to X* given
	other X subobjects in the most derived type.  Ack.

	* rtti.c (build_dynamic_cast): No need to strip cv-quals here,
	get_typeid will do it for us.
	(get_typeid_1): Break out call-building for expand_*_desc to use.
	(get_typeid): Call it.
	(expand_*_desc): Likewise.
	* decl.c (init_decl_processing): Don't set TYPE_BUILT_IN on char *
	and void *.
	(init_decl_processing): Lose builtin_type_tdescs lossage.
	* decl2.c (finish_vtable_vardecl): Remove obsolete code.

Mon Apr  8 17:23:23 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* pt.c (tsubst): When calling set_nested_typename, use
	TYPE_NESTED_NAME (current_class_type) instead of
	current_class_name.

	* decl.c (pushdecl): Likewise.
	(pushdecl_class_level): Likewise.
	(grokdeclarator): Use NULL_TREE instead of 0 in the call to
	set_nested_typename.

Sun Apr  7 10:44:31 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (synthesize_tinfo_fn): Handle arrays.

	* cp-tree.h (DECL_REALLY_EXTERN): New macro.

Sat Apr  6 13:56:27 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (throw_bad_cast): Use entry point __throw_bad_cast.
	(init_rtti_processing): Lose bad_cast_type.
	(build_dynamic_cast): Use throw_bad_cast.

	* rtti.c (synthesize_tinfo_fn): Handle enums and pmfs.

	* decl2.c (finish_file): Don't synthesize artificial functions
	that are external and not inline.

	* rtti.c (get_tinfo_fn): If at_eof, call import_export_decl.

	* decl2.c (finish_file): Handle having new inlines added to
	saved_inlines by synthesis.

	* rtti.c (get_bad_cast_node): Don't require <typeinfo>.

Fri Apr  5 17:02:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	RTTI rewrite to initialize nodes as needed, not require that
	users #include <typeinfo>, complete functionality and reduce wasted 
	space.
	* rtti.c (init_rtti_processing): New fn.
	(build_typeid): The vtable entry is now a function.
	(get_tinfo_var): New fn.
	(get_tinfo_fn): Likewise.
	(get_typeid): Use it.
	(build_dynamic_cast): Declare and use entry point __dynamic_cast.
	(build_*_desc): Rename to expand_*_desc and rewrite to use entry
	points __rtti_*.
	(add_uninstantiated_desc, get_def_to_follow, build_t_desc): Lose.
	(synthesize_tinfo_fn): New fn.
	* method.c (build_t_desc_overload): Lose.
	(build_overload_with_type): More generic.
	* decl.c (init_decl_processing): Call init_rtti_processing.
	* class.c (set_rtti_entry): Use get_tinfo_fn.
	* decl2.c (mark_vtable_entries): Mark the rtti function.
	(finish_prevtable_vardecl): Don't build_t_desc.
	(import_export_decl): Handle tinfo functions.
	(finish_file): Likewise.
	* typeck.c (inline_conversion): New fn.
	(build_function_call_real): Use it.
	* cp-tree.h: Add decls.

	* method.c (hack_identifier): Also convert component_refs from
	references.

	* lex.c (cons_up_default_function): Use the type, not the name, in
	declspecs.

	* decl2.c (import_export_vtable): Fix weak vtables.

Fri Apr  5 13:30:17 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* search.c (get_base_distance_recursive): Fix access checks for
	protected bases.

Fri Apr  5 11:02:06 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* call.c (unary_complex_lvalue): Delete unneeded decl, it's in
	cp-tree.h.
	(convert_harshness): Add prototypes wrapped by PROTO.
	* decl2.c (grok_function_init): Likewise.
	(do_toplevel_using_decl): Change to void return type.
	* class.c (build_vtable_entry): Remove decl of make_thunk.
	(merge_overrides): Fix order of arg definitions.
	(finish_vtbls): Likewise.
	(fixup_vtable_deltas): Likewise.
	(modify_all_direct_vtables): Likewise.
	(modify_all_indirect_vtables): Likewise.
	* search.c (get_base_distance_recursive): Likewise.
	(get_abstract_virtuals_1): Likewise.
	(fixup_virtual_upcast_offsets): Likewise.
	(lookup_fnfields_1): Add prototypes wrapped by PROTO.
	* init.c (perform_member_init): Fix order of arg definitions.
	(expand_aggr_init_1): Add prototypes wrapped by PROTO.
	* cp-tree.h (make_thunk): Add decl.
	(overload_template_name, push_template_decl): Add decls.
	(do_toplevel_using_decl): Change to void return type.
	(vec_binfo_member): Add decl.

Thu Apr  4 13:33:10 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* typeck.c (mark_addressable, convert_for_assignment,
	convert_for_initialization, pointer_int_sum, pointer_diff,
	unary_complex_lvalue): Add prototypes wrapped by PROTO.
	(convert_sequence): #if 0 fn decl, since definition also is.

Thu Apr  4 11:00:53 1996  Mike Stump  <mrs@@cygnus.com>

	* rtti.c (build_dynamic_cast): Make sure we strip qualifiers on
	cast to pointer types for type searching.

Wed Apr  3 17:10:57 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* typeck.c (get_delta_difference): Use cp_error, not error, in the
	case where BINFO == 0.

Wed Apr  3 12:01:02 1996  Mike Stump  <mrs@@cygnus.com>

	* call.c (build_method_call): Fix wording of error messages so
	constructors come out right.

Tue Apr  2 16:06:59 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* decl.c (push_overloaded_decl): Don't warn about hidden
	constructors when both the type and the function are declared
	in a system header file.

Mon Apr  1 09:03:13 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* class.c (finish_struct_1): Propagate the TYPE_PACKED
	flag for the type to the type's fields.

Sat Mar 30 12:14:33 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* parse.y (complex_parmlist, ELLIPSES): Take out ARM-based warning.

Fri Mar 29 15:51:36 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* class.c (base_info, finish_base_struct): Replace 
	needs_virtual_dtor with base_has_virtual.

	(finish_struct_1): Remove the old code that tried to make default
	destructors virtual. Use base_has_virtual when checking if we need
	to add a vtable entry for the rtti code.

Fri Mar 29 14:02:36 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (push_template_decl): Complain about template decl with
	inappropriate declaration.

Fri Mar 29 12:15:35 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (build_x_unary_op): Remove bogus check for taking
	the address of a member function.

Fri Mar 29 11:56:02 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y (constructor_declarator): Only push the class if
	we are not already in the class.

Fri Mar 29 09:41:02 1996  Jeffrey A. Law  <law@@cygnus.com>

	* method.c (emit_thunk): Remove current_call_is_indirect nonsense.
	Add additional argument to INIT_CUMULATIVE_ARGS.

Thu Mar 28 16:41:39 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (shadow_tag): Fix error about anon union with methods.

	* parse.y (self_reference): Only generate a self-reference if this
	is a non-template class.
	(opt.component_decl_list): Only use it if it was generated.

	* parse.y (component_decl_1): Use constructor_declarator.
	(fn.def2): Likewise.
	(notype_component_declarator0): Likewise.

Thu Mar 28 15:11:35 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (build_x_unary_op): Add checks for taking the address
	of a TARGET_EXPR or of a member function, and give appropriate
	warnings.

Thu Mar 28 14:49:26 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (process_template_parm): Allow template type parms to be
	used as types for template const parms.

Wed Mar 27 15:51:19 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (expand_vec_init): Ensure the eh cleanups are on the
	function_obstack.

Wed Mar 27 10:14:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (lookup_name_real): Be even more picky about the
	ambiguous lookup warning.
	(grokdeclarator): Tweak SCOPE_REF constructor declarators here.
	* parse.y (constructor_declarator): Rather than here.

	* parse.y (constructor_declarator): New nonterminal.
	(fn.def1): Use it.
	(explicit_instantiation): Likewise.

Tue Mar 26 13:41:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	Add implicit declaration of class name at class scope.
	* decl.c (lookup_name_real): Restrict pedwarn about ambiguous lookup.
	* parse.y (self_reference): New nonterminal.
	(opt.component_decl_list): Use it.
	(fn.def1): Add nested_name_specifier type_name cases.
	* class.c (build_self_reference): New function.
	(finish_struct): Handle access_default later, move self-reference
	decl to the end.
	* pt.c (lookup_template_class): Handle getting a TYPE_DECL.
	* cp-tree.h: Adjust.

	* pt.c (do_function_instantiation): Separate handling of member
	functions and non-member functions properly.

Mon Mar 25 14:23:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (process_template_parm): Improve error for 'volatile class K'.

	* class.c (finish_struct_1): Check the right slot for destructors.

	* decl.c (start_enum): Complain about enum templates.

Mon Mar 25 13:25:31 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (resolve_offset_ref): Offset pointers to member data by one.
	* typeck.c (unary_complex_lvalue): Likewise.

Mon Mar 25 13:30:42 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* typeck.c (c_expand_return): Check for a returned local
	array name, similar to the check for an ADDR_EXPR.

Mon Mar 25 13:07:19 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (cp_finish_decl): Don't build cleanups for static
	variables here.

Fri Mar 22 17:57:55 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_modify_expr): Fix error messages to be more
	accurate.
	* cp-tree.h (assop_as_string): Parallel to op_as_string, but for
	assignment operators.
	* error.c (assop_as_string): Likewise.  Add support for `%Q' for
	assignment operators.

Fri Mar 22 13:48:29 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grokdeclarator): Call bad_specifiers for typedefs.  Also
	give an error if initialized.  Pedwarn about nested type with the
	same name as its enclosing class.

	* pt.c (tsubst, case TYPE_DECL): Set DECL_CONTEXT.

	* typeck.c (require_complete_type): Be sure to instantiate the
	MAIN_VARIANT of the type.

	* decl2.c (finish_file): Instantiate pending templates before
	processing static constructors and destructors.

	* pt.c (instantiate_decl): Don't instantiate functions at toplevel
	unless at_eof.

Fri Mar 22 09:30:17 1996  Bob Manson  <manson@@beauty.cygnus.com>

	* decl2.c (delete_sanity): If error_mark_node is passed
	in as an expression, quit while we're ahead.

	* decl.c (grokdeclarator): Give an error message if `friend'
	is combined with any storage class specifiers.

Wed Mar 20 14:51:55 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y (named_complex_class_head_sans_basetype): Don't crash on
	definition of nonexistent nested type.

	* error.c (dump_decl, case TYPE_DECL): Fix decision for whether or
	not to say 'typedef'.

Wed Mar 20 00:11:47 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cp-tree.h (struct lang_type): Make search_slot a tree, not a char*.
	* search.c (dfs_walk, dfs_init_vbase_pointers,
	expand_upcast_fixups): Remove cast of CLASSTYPE_SEARCH_SLOT.
	(dfs_find_vbases): Remove cast for CLASSTYPE_SEARCH_SLOT init.

Tue Mar 19 17:56:03 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (build_throw): Support minimal parse.
	* pt.c (tsubst_copy): Support THROW_EXPR.
	* decl2.c (build_expr_from_tree): Likewise.

	* pt.c (mangle_class_name_for_template): Always allocate
	scratch_firstobj.

Tue Mar 19 16:34:31 1996  Bob Manson  <manson@@beauty.cygnus.com>

	* cvt.c (cp_convert_to_pointer): Give an appropriate error
	when trying to cast from an incomplete type.

Tue Mar 19 16:00:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Don't bother setting up
	CLASSTYPE_TAGS explicitly, as the nested types will add
	themselves.

Tue Mar 19 15:48:43 1996  Bob Manson  <manson@@beauty.cygnus.com>

	* decl.c (shadow_tag): Remove old error check for usage of
	an enum without a previous declaration.
	(xref_tag): Add error message about usage of enums without a
	previous declaration.

Tue Mar 19 09:21:35 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (do_identifier): Only do name consistency check if we're
	parsing.

	* pt.c (push_template_decl): Don't crash if we get a member defn
	that doesn't match.

	* decl.c (xref_tag_from_type): New function to do an xref without
	always having to figure out code_type_node.
	* cp-tree.h: Declare it.
	* pt.c (instantiate_class_template): Use it for friend classes.
	(lookup_template_class): Use it.

	* typeck2.c (build_functional_cast): Pull out a single parm before
	passing it to build_c_cast.

Tue Mar 19 09:07:15 1996  Bob Manson  <manson@@beauty.cygnus.com>

	* expr.c (do_case): Give an error message if a pointer is
	given as a case value.

Mon Mar 18 21:57:54 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_c_cast): Don't pull single TEMPLATE_DECL out of
	an overload list.

	* lex.c (cons_up_default_function): Really, now, interface hackery
	does not apply to synthesized methods.

Mon Mar 18 18:20:57 1996  Mike Stump  <mrs@@cygnus.com>

	* call.c (build_method_call): Ctors and dtors now have special names
	with respect to lookups.
	* class.c (add_method): Likewise.
	(grow_method): Likewise.
	(finish_struct_methods): Likewise.
	(warn_hidden): Likewise.
	(finish_struct_1): Likewise.
	* cvt.c (convert_to_reference): Likewise.
	(convert_to_aggr): Likewise.
	(cp_convert): Likewise.
	* decl2.c (check_classfn): Likewise.
	* init.c (expand_member_init): Likewise.
	(expand_default_init): Likewise.
	(expand_aggr_init_1): Likewise.
	(build_offset_ref): Likewise.
	(build_new): Likewise.
	(build_delete): Likewise.
	* lex.c (do_inline_function_hair): Likewise.
	* search.c (lookup_field_1): Likewise.
	(lookup_fnfields_here): Likewise.
	(lookup_field): Likewise.
	(lookup_fnfields): Likewise.
	(get_virtual_destructor): Likewise.
	(dfs_debug_mark): Likewise.
	(dfs_pushdecls): Likewise.
	(dfs_compress_decls): Likewise.
	* tree.c (layout_basetypes): Likewise.
	* typeck.c (build_component_ref): Likewise.
	(build_x_function_call): Likewise.
	(build_modify_expr): Likewise.
	(convert_for_initialization): Likewise.
	(build_functional_cast): Likewise.
	* cp-tree.h (CLASSTYPE_FIRST_CONVERSION): Likewise.
	(CTOR_NAME): New.
	(DTOR_NAME): New.
	* decl.c (ctor_identifier): New.
	(dtor_identifier): New.
	(init_decl_processing): Set them.

Mon Mar 18 18:00:51 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_component_ref): Don't get confused by fields whose
	context has no type name, like pointer to member functions.

Mon Mar 18 13:19:03 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grokdeclarator): Handle typedef without declarator.

	* pt.c (tsubst): Handle SCOPE_REF in declarator.

	* parse.y (bad_parm): Catch another case of missing `typename'.

	* lex.c (yyprint): Handle TYPE_DECLs.

	* decl.c (start_function): Don't try to be clever.

	* lex.c: Lose compiler_error_with_decl.
	* typeck2.c: Lose error_with_aggr_type.
	(incomplete_type_error): Use cp_* instead of old functions.
	(readonly_error): Likewise.
	* typeck.c (convert_arguments): Likewise.
	* search.c (lookup_nested_field): Likewise.
	* method.c (make_thunk): Likewise.
	* decl.c (grokparms): Likewise.
	* cp-tree.h: Update.

	* tree.c (min_tree_cons): Call copy_to_permanent for the purpose
	and value.

Mon Mar 18 11:25:52 1996  Bob Manson  <manson@@beauty.cygnus.com>

	* method.c (build_opfncall): When deleting a pointer to an
	array, build a new pointer to the tree past any ARRAY_TYPE
	nodes.

Mon Mar 18 10:11:46 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (lookup_name_real): Initialize local var TYPE to NULL_TREE.

Fri Mar 15 11:03:57 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_decl): Only call import_export_decl if at_eof
	and ! DECL_INLINE.

	* decl.c (finish_function): Don't set nested based on
	hack_decl_function_context.
	* parse.y (function_try_block): Check for nested function.
	(pending_inlines): Likewise.

	* decl2.c (build_expr_from_tree): If a unary op already has a
	type, just return it.

	* decl2.c (finish_prevtable_vardecl): Use ADJUST_VTABLE_LINKAGE.

	* decl2.c (walk_vtables): vardecl_fn returns int; return 1 if it does.
	(finish_file): Check the return value of walk_vtables.
	(finish_prevtable_vardecl): Return int.
	(finish_vtable_vardecl): Likewise.
	(prune_vtable_vardecl): Likewise.
	* lex.c (set_vardecl_interface_info): Likewise.
	* cp-tree.h: Adjust return types.

	* class.c (delete_duplicate_fields_1): Don't complain about
	duplicate nested types if they're the same type.
	(finish_struct): Remove check for duplicate.
	* decl2.c (grokfield): Don't check for typedef of anonymous type.

Thu Mar 14 10:00:19 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h: Lose SIGNATURE_GROKKING_TYPEDEF.

	* decl.c (grokdeclarator): Lose special handling of class-level
	typedef.  Lose SIGNATURE_GROKKING_TYPEDEF.  Set
	SIGNATURE_HAS_OPAQUE_TYPEDECLS later.

	* cvt.c (convert_pointer_to_real): Retain cv-quals in conversion.

	* pt.c (tsubst_copy): Strip cv-quals from destructor name types.

	* search.c (compute_access): Fix handling of anonymous union
	members.
	* class.c (finish_struct_anon): Propagate TREE_{PRIVATE,PROTECTED}
	from anonymous unions to their members.

	* typeck.c (build_x_function_call): For static member functions,
	hand off to build_member_call.

Wed Mar 13 14:03:34 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_component_ref): Handle OFFSET_REFs.

	* init.c (expand_vec_init): Fix init == 0 case.

Tue Mar 12 14:36:02 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Pedwarn about init and array new.
	(expand_vec_init): Handle lists, use convert_for_initialization

	* typeck.c (convert_for_initialization): Pass LOOKUP_NO_CONVERSION
	when converting to an aggregate type.
	* cvt.c (cp_convert): Pass it through.

	* typeck.c (build_conditional_expr): Handle user-defined
	conversions to slightly different types.

	* decl.c (grokdeclarator): Force an array type in a parm to be
	permanent.

	* decl2.c (do_using_directive): Sorry.
	(do_namespace_alias): Likewise.
	* lex.c (real_yylex): Warn about using the `namespace' keyword.

Sun Mar 10 22:26:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y (datadef): Move call to note_list_got_semicolon up.

Fri Mar  8 11:47:26 1996  Mike Stump  <mrs@@cygnus.com>

	* tree.c (unsave_expr): Don't unsave, UNSAVE_EXPRs.

Fri Mar  8 11:29:06 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (cp_finish_decl): The exception regions have to be
	nested, not overlapping.  We start the exception region for a
	decl, after it has been fully built, and all temporaries for it
	have been cleaned up.

Thu Mar  7 17:46:06 1996  Mike Stump  <mrs@@cygnus.com>

	* tree.c (vec_binfo_member): Don't core dump if we have no bases.

Thu Mar  7 14:11:49 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.def: Add RETURN_INIT.
	* pt.c (instantiate_decl): Handle RETURN_INIT.
	* decl.c (store_return_init): Handle minimal_parse_mode.

	* tree.c (cp_build_type_variant): Just return an error_mark_node.
	* decl.c (make_typename_type): Don't try to get the file and line
	of an identifier.
	* typeck.c (comptypes): Handle TYPENAME_TYPE.

Wed Mar  6 18:47:50 1996  Per Bothner  <bothner@@kalessin.cygnus.com>

	* decl.c (poplevel): Make sure we clear out and restore old local
	non-VAR_DECL values by default when they go out of scope.

Wed Mar  6 09:57:36 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (build_overload_value): Use DECL_ASSEMBLER_NAME in
	referring to addresses of variables and functions.

	* error.c (dump_expr): Support SIZEOF_EXPR.

	* init.c (do_friend): Use the return value of check_classfn.

	* typeck.c (convert_arguments): Call complete_type.

	* method.c (hack_identifier): After giving an error, set value to
	error_mark_node.

Tue Mar  5 16:00:15 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (hack_decl_function_context): Kludge around DECL_CONTEXT
	lossage for local classes.
	* cp-tree.h: Declare it.
	* decl.c (lookup_name_real): Evil, painful hack for local classes.
	(grokfndecl): Set DECL_CLASS_CONTEXT and DECL_NO_STATIC_CHAIN here.
	Use hack_decl_function_context.
	(grokdeclarator): Don't set DECL_NO_STATIC_CHAIN here.
	(start_function): Use hack_decl_function_context.
	(finish_function): Likewise.
	* method.c (synthesize_method): Likewise.
	* lex.c (process_next_inline): Likewise.
	(do_pending_inlines): Likewise.
	* decl2.c (finish_file): Unset DECL_STATIC_FUNCTION_P when we're
	done with it.

Mon Mar  4 22:38:39 1996  Gerald Baumgartner  <gb@@alexander.cs.purdue.edu>

	* sig.c (build_signature_pointer_or_reference_type): Align
	signature pointers/references on 8-byte boundaries so they can be
	grabbed 2 words at a time on a Sparc.

Tue Mar  5 10:21:01 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (hack_identifier): Requiring a static chain is now a
	hard error.
	* decl.c (grokdeclarator): Set DECL_NO_STATIC_CHAIN on nested
	functions.

Mon Mar  4 20:03:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_offset_ref): Call complete_type.

	* decl.c (pop_from_top_level): Always pop previous_class_type.

	* parse.y: Handle multiple decls in a for-init-statement.
	* pt.c (tsubst_expr): Likewise.

	* pt.c (tsubst): Use tsubst_expr for the second operand of an
	ARRAY_REF.

	* decl.c (maybe_push_to_top_level): Don't save previous_class_type.
	(poplevel_class): Set it here.
	(pop_from_top_level): Pop it here if we're returning to class scope.
	* class.c (pushclass): Don't set it here.

	* decl.c (maybe_push_to_top_level): Save current_template_parms,
	and clear it if !pseudo.
	(pop_from_top_level): Restore it.

	* decl2.c (finish_file): Push the dummy each time we walk the list
	of vtables.

	* error.c (dump_expr): Support LOOKUP_EXPR and actually do
	something for CAST_EXPR.
	
Mon Feb 19 14:49:18 1996  Rusty Russell  <rusty@@adelaide.maptek.com.au>

	* cvt.c (cp_convert): Warn about implicit conversion of the
	address of a function to bool, as it is always true.

Fri Feb 23 23:06:01 1996  Rusty Russell  <rusty@@adelaide.maptek.com.au>

	* typeck.c (c_expand_return): Fix warning for local externs returned.

Mon Mar  4 15:03:11 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (mapcar): Propagate const and volatile properly.

	* typeck.c (complete_type): Be sure to instantiate the
	MAIN_VARIANT of the type.

	* method.c (synthesize_method): Class interface hackery does not
	apply to synthesized methods.

Mon Mar  4 14:05:23 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (comp_template_args): Use comptypes rather than just
	checking for TEMPLATE_TYPE_PARM equivalence.

	* typeck.c (build_x_function_call): Call complete_type before
	checking TYPE_OVERLOADS_CALL_EXPR.

Mon Mar  4 18:48:30 1996  Manfred Hollstein   <manfred@@lts.sel.alcatel.de>

	* g++.c (main): Check also for new define ALT_LIBM.

Fri Mar  1 13:09:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): If we don't have a pattern
	yet, that's OK.
	(coerce_template_parms): If we see a local class, bail.

	* decl.c (grok_reference_init): Make sure there's a type before
	checking its code.

	* pt.c (do_function_instantiation): Avoid crashing on invalid decls.
	(push_template_decl): Likewise.

	* parse.y (named_class_head): Set
	CLASSTYPE_TEMPLATE_SPECIALIZATION here if we have basetypes.

	* decl.c (xref_tag): Diagnose redeclaration of template
	type-parameter name.

	* error.c (dump_type): Handle anonymous template type parms.

	* pt.c (instantiate_template): Use TYPE_MAIN_DECL instead of
	TYPE_STUB_DECL.
	(coerce_template_parms): Likewise.

Thu Feb 29 16:26:01 1996  Mike Stump  <mrs@@cygnus.com>

	* class.c (instantiate_type, case {ARRAY,INDIRECT}_REF,
	case ADDR_EXPR): Don't modify rhs if a subinstantiation fails.

Thu Feb 29 08:20:25 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_template): Take the MAIN_VARIANT of the type
	before trying to get its STUB_DECL.
	(coerce_template_parms): Likewise.

	* parse.y (template_type_parm): If they didn't use 'class',
	pretend they did after giving an error.

	* pt.c (coerce_template_parms): Diagnose use of local class.

	* decl.c (grok_reference_init): Use instantiate_type.

	* error.c (dump_expr): Handle TEMPLATE_DECLs.

	* parse.y (named_class_head): Diagnose mismatching types and tags.

	* decl.c (pushdecl): Type decls and class templates clash with
	artificial type decls, not hide them.

	* decl.c (redeclaration_error_message): Diagnose redefinition of
	templates properly.
	(duplicate_decls): Diagnose disallowed overloads for template
	functions, too.

	* decl.c (start_decl): Call complete_type before checking for a
	destructor.

	* pt.c (tsubst): Use tsubst_expr on the elts of a VEC.

	* decl.c (xref_tag): A TEMPLATE_TYPE_PARM is a match.

Wed Feb 28 09:28:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grok_op_properties): Don't check for operator++(int) in
	a template.

	* tree.c (perm_manip): Return a copy of variable and function
	decls with external linkage.

	* tree.def: Change some of the min tree codes to type "1".
	* pt.c (uses_template_parms): Handle 'e's, return 1 for LOOKUP_EXPRs.
	* method.c (build_overload_int): Emit something arbitrary for
	anything but an INTEGER_CST if we're in a template.

	* decl.c (cp_finish_decl): Call complete_type before deciding
	whether or not to lay out the decl.

	* lex.c (do_identifier): Check for DECL_INITIAL before using it.

Tue Feb 27 16:35:32 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck2.c (build_x_arrow): Call complete_type.

	* pt.c (add_pending_template): Broken out.
	(lookup_template_class): If -fexternal-templates, call it for all
	the methods of implemented types.
	(instantiate_class_template): Instead of instantiating them here.
	(instantiate_decl): Handle -fexternal-templates earlier.

Tue Feb 27 15:51:32 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* search.c, lex.c, decl.c, class.c, cp-tree.h: Don't wrap the
	memoized lookup stuff inside GATHER_STATISTICS.

Tue Feb 27 10:38:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (start_decl): Complain about array of incomplete type
	here.
	(grokdeclarator): Not here.

	* parse.y (template_parm): Expand full_parm inline so we can set
	the rule's precedence.

	* pt.c (tsubst_expr): If we're in a template, just do tsubst_copy.
	(tsubst): tsubst_expr the DECL_INITIAL of FIELD_DECLs.
	* decl2.c (grokbitfield): Don't check for integer constant here.
	* class.c (finish_struct_1): Check here.

	* decl.c (define_label): Make the min decl go on permanent_obstack.

	* pt.c (unify): Don't handle CONST_DECLs.
	(uses_template_parms): Don't check DECL_INITIAL on a CONST_DECL.
	(tsubst_copy): Likewise.

	* lex.c (do_identifier): Do pull the DECL_INITIAL out of a
	CONST_DECL for a template parm.

Mon Feb 26 12:48:18 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grokdeclarator): Complain about array of incomplete type
	here.
	(start_decl_1): Not here.

	* pt.c (tsubst): Handle pointer-to-function declarators.

	* method.c (hack_identifier): If pedantic, diagnose local class
	methods that require a static chain.

	* decl.c (grok_op_properties): No longer static.
	* cp-tree.h: Declare it.
	* pt.c (tsubst): Call it for operators.
	Use tsubst_copy for TREE_VECs.

	* parse.y (template_arg): The expr has precedence like '>'.

Fri Feb 23 14:51:52 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (coerce_template_parms): Don't coerce an expression using
	template parms.
	(uses_template_parms): Also check DECL_INITIAL in CONST_DECLs.
	(tsubst): Don't use build_index_2_type if the max_value uses template
	parms.
	* method.c (build_overload_int): Emit something arbitrary for an
	expression using template parms.

	* parse.y (template_close_bracket): New non-terminal to catch use
	of '>>' instead of '> >' in template class names.
	(template_type): Use it.
	* Makefile.in (CONFLICTS): Causes one more r/r conflict.

	* tree.def: Add CAST_EXPR.
	* typeck2.c (build_functional_cast): Use CAST_EXPR instead of
	CONVERT_EXPR for minimal_parse_mode.
	* typeck.c (build_c_cast): Likewise.
	* pt.c (tsubst_copy): Likewise.
	* decl2.c (build_expr_from_tree): Likewise.
	* error.c (dump_expr): Likewise.

Fri Feb 23 10:36:46 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* except.c (SetTerminate, SetUnexpected): Put back global vars.
	(init_exception_processing): Put back decl/init of
	set_unexpected_fndecl and set_terminate_fndecl, needed to get the
	fns from libstdc++.

	* decl.c (struct binding_level): Delete ACCEPT_ANY bitfield.
	(declare_uninstantiated_type_level, uninstantiated_type_level_p):
	Delete unused fns.
	* cp-tree.h (declare_uninstantiated_type_level,
	uninstantiated_type_level_p): Delete prototypes.

Thu Feb 22 19:36:15 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst_expr): Add default return.

Thu Feb 22 16:47:24 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* error.c (fndecl_as_string): Delete unused arg CNAME.
	* sig.c (build_signature_table_constructor,
	build_signature_method_call): Fix calls.

	* class.c (the_null_vtable_entry): Delete var definition.
	(init_class_processing): Delete tree the_null_vtable_entry init.
	* decl.c (no_print_{functions, builtins}): Declare as static.
	(__tp_desc_type_node): #if 0 var definition.
	(init_type_desc): #if 0 init of __tp_desc_type_node.
	(vb_off_identifier): Move var decl into init_decl_processing.
	(current_function_assigns_this): Declare as static.
	(int_ftype_ptr_ptr_int, void_ftype_ptr_int_int): Delete var decls.
	(init_decl_processing): Delete init of void_ftype_ptr_ptr_int.
	Move decls of string_ftype_ptr_ptr and int_ftype_string_string here.
	* decl2.c (delete_sanity): Delete definition/mod of local var ELT_SIZE.
	* init.c (BI_header_type, BI_header_size): Declare as static.
	* pt.c (template_classes): Delete unused var.
	(add_pending_template): Delete decl for non-existent fn.
	(lookup_template_class): Delete vars CODE and TAG_CODE.
	(instantiate_template): Delete unused var TARGS.
	* cp-tree.h (vb_off_identifier, current_function_assigns_this):
	Delete decls.
	(__tp_desc_type_node): #if 0 var decl.
	(fndecl_as_string): Fix prototype.

Thu Feb 22 15:56:19 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.def: Add GOTO_STMT.
	* pt.c (tsubst_expr): Support goto and labels.
	* decl.c (define_label): Support minimal parsing.
	* parse.y (simple_stmt): Likewise.

Thu Feb 22 15:30:12 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* xref.c (GNU_xref_member): Only define/set var I if
	XREF_SHORT_MEMBER_NAMES is defined, to match when it's actually
	used.
	(GNU_xref_end_scope): Delete unused fifth arg TRNS.
	(GNU_xref_end): Fix call.
	* decl.c (poplevel, poplevel_class, finish_method): Fix calls.
	* cp-tree.h (GNU_xref_end_scope): Fix prototype.

	* tree.c (build_exception_variant): Delete unused vars I, A, T,
	T2, and CNAME.
	(layout_vbasetypes): Delete unused var NONVIRTUAL_VAR_SIZE.
	(mapcar): Delete unused var CODE.
	(build_cplus_new): Delete unused arg WITH_CLEANUP_P.
	(break_out_cleanups): Fix call.
	(bot_manip): Likewise.
	* call.c (build_method_call): Likewise.
	* cvt.c (build_up_reference, convert_to_reference, cp_convert):
	Likewise.
	* typeck.c (unary_complex_lvalue, build_modify_expr,
	convert_for_initialization): Likewise.
	* typeck2.c (build_functional_cast): Likewise.
	* cp-tree.h (build_cplus_new): Fix prototype.

	* repo.c (open_repo_file): Delete unused var Q.
	(repo_compile_flags, repo_template_declared,
	repo_template_defined, repo_class_defined, repo_inline_used,
	repo_vtable_used, repo_tinfo_used): #if 0 unused fns.
	(repo_get_id, repo_vtable_used): Declare as static. 
	* cp-tree.h (mark_{decl,class}_instantiated, finish_repo): Add
	prototypes.

Thu Feb 22 14:53:35 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y (pending_inlines): Add function_try_block case.

	* pt.c (unify): Fix for template const parms.

Thu Feb 22 13:24:15 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* lex.c (extract_interface_info): Delete forward decl.
	(default_copy_constructor_body, default_assign_ref_body): Delete
	decls for non-existent functions.
	(synth_firstobj, inline_text_firstobjs): Delete unused vars.
	(init_lex): Delete setting them.
	(cons_up_default_function): Delete unused vars FUNC_BUF,
	FUNC_LEN, and COMPLEX.  Delete code setting COMPLEX.  Delete old
	#if 0'd synth code.
	(toplevel, expression_obstack): Delete unused extern decls.
	(tree_node_kind): Delete unused enum.
	(tree_node_counts, tree_node_sizes): Wrap with #ifdef
	GATHER_STATISTICS.
	(tree_node_kind_names): Delete unused extern decl.
	(synth_obstack): Delete unused var.
	(init_lex): Don't set it.
	(init_parse): Add decl before use.
	(reduce_count): Only define #ifdef GATHER_STATISTICS && REDUCE_LENGTH.
	(current_unit_{name, language}): Delete unused vars. 
	(check_newline): Don't bother setting them, just accept the #pragma.
	* cp-tree.h (init_repo, peek_yylex): Add prototypes.
	(current_unit_{name, language}): Delete decls.

	* search.c: Wrap all of the memoized functions, macros, and
	variables inside #ifdef GATHER_STATISTICS.
	(lookup_field, lookup_fnfields): Likewise.
	(init_search_processing): Likewise.
	(reinit_search_statistics): Wrap whole function.
	* lex.c (reinit_lang_specific): Wrap call to reinit_search_statistics.

	* decl.c (finish_function): Only call pop_memoized_context if
	GATHER_STATISTICS is defined.
	(start_function): Likewise for push_memoized_context.
	* class.c (pushclass, popclass): Likewise.

	* cp-tree.h (CLASSTYPE_MTABLE_ENTRY): Move definition from here...
	* search.c (CLASSTYPE_MTABLE_ENTRY): ... to here.

	* cvt.c (cp_convert): Delete unused local var FORM.
	* cp-tree.h (can_convert, can_convert_arg, real_lvalue_p): Add
	prototypes.

Thu Feb 22 13:19:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (do_poplevel): Oops; really return what we get from
	poplevel this time.

Thu Feb 22 11:41:44 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cp-tree.h (is_aggr_type): Add prototype.

	* cp-tree.h ({push,pop}_cp_function_context): Add decls.
	* method.c ({push,pop}_cp_function_context): Delete decls.
	* except.c (start_eh_unwinder, end_eh_unwinder): Declare as void.
	(SetUnexpected, SetTerminate): Delete unused vars.
	(init_exception_processing): Don't set SetUnexpected or
	SetTerminate.  Don't set SET_UNEXPECTED_FNDECL or SET_TERMINATE_FNDECL.
	(output_exception_table_entry): Delete unused array LABEL.
	(expand_internal_throw): Delete unused var PARAMS.
	(expand_start_catch_block): Delete unused var CLEANUP.
	(emit_exception_table): Delete unused var EH_NODE_DECL.
	(expand_builtin_throw): Delete unused vars UNWIND_AND_THROW and
	GOTO_UNWIND_AND_THROW.  Don't set them.
	(end_eh_unwinder): Add top decl.
	(pop_rtl_from_perm): Delete unused decl of PERMANENT_OBSTACK.
	(exception_section, push_rtl_perm, do_function_call,
	lang_interim_eh, push_eh_cleanup, eh_outer_context,
	expand_end_eh_spec, end_eh_unwinder): Declare as static.
	(saved_pc, saved_throw_type, saved_throw_value, saved_cleanup,
	throw_used): Likewise.
	* cp-tree.h (expand_end_eh_spec): Delete prototype.

	* search.c (dfs_mark, dfs_mark_vtable_path,
	dfs_unmark_vtable_path, dfs_mark_new_vtable,
	dfs_unmark_new_vtable, dfs_clear_search_slot,
	dfs_search_slot_nonempty_p, bfs_markedp, bfs_unmarkedp,
	bfs_marked_vtable_pathp, bfs_unmarked_vtable_pathp,
	bfs_marked_new_vtablep, bfs_unmarked_new_vtablep): #if 0 unused
	functions.
	(n_fields_searched, n_calls_lookup_field, n_calls_lookup_field_1,
	n_calls_lookup_fnfields, n_calls_lookup_fnfields_1,
	n_calls_get_base_type, n_outer_fields_searched, n_contexts_saved):
	Only define #ifdef GATHER_STATISTICS.
	(reinit_search_statistics): Only init some vars if GATHER_STATISTICS
	is defined.
	(vbase_decl): Delete var definition.
	(init_search): Delete old decl.
	(init_vbase_pointers): Delete building of VBASE_DECL, since it's
	never actually used.
	(expand_indirect_vtbls_init): Delete init of VBASE_DECL.
	(get_base_distance_recursive): Delete unused fourth arg
	BASETYPE_PATH.  Fix call .
	(get_base_distance): Fix call.
	(push_class_decls): Delete unused var ID.
	(make_memoized_table_entry): Declare as static.
	(breadth_first_search): Declare as static.
	(tree_has_any_destructor_p): Declare as static.
	(pop_class_decls): Delete unused arg pop_class_decls.
	* class.c (popclass): Fix call to pop_class_decls.
	* cp-tree.h (make_memoized_table_entry, breadth_first_search,
	tree_has_any_destructor_p): Delete prototypes.

	* rtti.c (build_ptmf_desc): Delete unused arg TYPE.
	(build_t_desc): Fix call.  Delete unused vars ELEMS and TT.
	(build_dynamic_cast): Delete unused local vars TMP1 and RETVAL.
	(build_user_desc): Delete unused var T.
	(build_class_desc): Delete unused vars T and OFF.
	(build_t_desc): Delete unused var NAME_STRING.
	(build_headof): Make static.
	(get_bad_cast_node): Likewise.
	(get_def_to_follow): Likewise.
	* cp-tree.h (init_type_desc): Add prototype.
	(build_headof): Remove prototype.

Thu Feb 22 00:54:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst): Only look for matching decls at file scope for
	non-member functions.

	* call.c (build_scoped_method_call): Handle scoped destructor
	calls in templates.

	* decl.c (*_top_level): Also save previous_class_values.

	* pt.c (tsubst_expr): Support do {} while loops.
	* parse.y (simple_stmt): Likewise.
	* tree.def: Likewise.

	* method.c (build_overload_identifier): For a class nested in a
	template class, don't mangle in the template parms from our
	context.

	* lex.c, cp-tree.h: Remove support for template instantiations in
	the pending_inlines code.
	* pt.c: Remove dead functions and unused arguments.
	(uses_template_parms): TYPENAME_TYPEs always use template parms.
	* parse.y: Stop passing anything to end_template_decl.
	* tree.c (print_lang_statistics): Only print tinst info #ifdef
	GATHER_STATISTICS.

Wed Feb 21 16:57:33 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* init.c (expand_recursive_init{,_1}): Delete decls. 
	(sort_member_init): Delete unused var INIT.
	(emit_base_init): Delete unused var X.
	(build_offset_ref): Delete unused var CNAME.
	(sort_member_init): Delete unused var FIELDS_TO_UNMARK.
	(emit_base_init): Delete unused local var BASE.  Delete extern
	decl of IN_CHARGE_IDENTIFIER.
	(build_delete): Delete unused local var VIRTUAL_SIZE.

	* init.c (build_vec_delete): Delete unused third arg ELT_SIZE.
	(build_delete): Fix call.
	* decl2.c (delete_sanity): Likewise.
	* cp-tree.h (build_vec_delete): Update prototype.

	* typeck.c (common_base_type): Delete unused var TMP.
	(build_binary_op): Delete local var ARGS_SAVE.
	(build_array_ref): Delete unused var ITYPE.
	(c_expand_return): Delete unused var USE_TEMP.

	* typeck.c (compexcepttypes): Delete unused arg STRICT.
	(comptypes): Fix calls.
	* decl.c (duplicate_decls): Likewise.
	* cp-tree.h (compexcepttypes): Delete extra arg.

	* decl2.c (check_classfn): Delete unused second arg CNAME.
	* decl.c (start_decl, grokfndecl): Fix calls.
	* init.c (do_friend): Likewise.
	* cp-tree.h (check_classfn): Update prototype.

	* cp-tree.h (signature_error, import_export_vtable,
	append_signature_fields, id_in_current_class, mark_used,
	copy_assignment_arg_p): Add decls.
	* decl2.c (mark_used): Delete decl.

	* class.c (n_*): Wrap with #ifdef GATHER_STATISTICS.

	* class.c (get_vtable_entry): Diable unused function.
	(doing_hard_virtuals): Delete unused static global var.
	(finish_struct_1): Don't init DOING_HARD_VIRTUALS.
	(prepare_fresh_vtable): Delete unused vars PATH and RESULT.
	(overrides): Delete unused vars RETTYPE and BASE_RETTYPE.
	(modify_one_vtable): Delete unused var OLD_RTTI.
	(finish_struct_anon): Delete unused vars OFFSET and X.
	(finish_struct_bits): Delete unused var METHOD_VEC.
	(get_basefndecls): Delete unused var PURPOSE.  Delete unused
	for-scope local variable METHODS.

	* call.c (user_harshness): Delete unused/unneeded arg PARM.
	(ideal_candidate): Delete unused args BASETYPE and PARMS.
	(build_method_call): Delete unused args passed into ideal_candidate.
	(build_overload_call_real): Likewise.  Delete unused var OVERLOAD_NAME.
	* cp-tree.h (synthesize_method): Add decl.

	* decl.c (note_level_for_for): Give void return type.
	(pushdecl_nonclass_level): Likewise.
	(finish_function): Delete unused vars VFIELDS and ALLOCATED_THIS.
	(poplevel): Delete unused var IMPLICIT_TRY_BLOCK.
	(suspend_binding_level): Delete unused var LEVEL.
	(duplicate_decls): Delete unused var CTYPE.
	(duplicate_decls): Delete unused var PREVIOUS_C_DECL.
	(init_decl_processing): Delete unused vars FLOAT_ENDLINK and
	PTR_ENDLINK.
	(grokdeclarator): Delete unused var C.
	(grokdeclarator): Delete unused var SIZE_VARIES.
	(grokparms): Delete unused var SAW_VOID.
	(start_function): Delete unused var OLDDECL.
	(cplus_expand_expr_stmt): Delete unused var
	REMOVE_IMPLICIT_IMMEDIATELY. 

	* cp-tree.h (pushdecl_nonclass_level): Fix prototype.

	* Makefile.in (CONFLICTS): Update to 12 shift/reduce.

Wed Feb 21 00:06:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (build_min): Set TREE_COMPLEXITY to lineno.
	(build_min_nt): Likewise.
	* pt.c (do_pushlevel): Emit line note.
	(do_poplevel): Return what we get from poplevel.
	(tsubst_expr): Set lineno from TREE_COMPLEXITY in stmt nodes.
	* parse.y: Use do_pushlevel and do_poplevel.
	* cp-tree.h: Declare do_poplevel.
	
	* cp-tree.h: Declare at_eof.
	* decl.c (cp_finish_decl): Pass it to rest_of_decl_compilation.
	* decl2.c (import_export_decl): Renamed from import_export_inline.
	(finish_file): Call it to do interface handling for statics.
	* pt.c (tsubst_copy): Call mark_used on variables and functions
	used here.

	* decl2.c (finish_file): Don't emit statics we can't generate.
	* pt.c (instantiate_decl): Don't set interface on instantiations
	we can't generate.

	* cp-tree.h (struct tinst_level): Change 'classname' to 'decl'.
	* tree.c (print_lang_statistics): Print max template depth.
	* pt.c (push_tinst_level): Dump entire instantiation context.
	(instantiate_class_template): Use it and pop_tinst_level.
	(instantiate_decl): Likewise.

	* call.c class.c cp-tree.h decl.c decl2.c error.c lex.c method.c
	pt.c ptree.c tree.def: Remove all traces of UNINSTANTIATED_P_TYPE.

Tue Feb 20 18:21:51 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c class.c cp-tree.h cvt.c decl.c decl2.c error.c expr.c
	init.c lex.c method.c parse.y pt.c repo.c search.c spew.c tree.c
	tree.def typeck.c typeck2.c xref.c: Massive, systemic changes for
	the new template implementation.

Tue Feb 20 17:14:29 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl2.c (check_cp_case_value): Use STRIP_TYPE_NOPS.

Thu Feb 15 18:44:42 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (cp_finish_decl): Delay emitting the debug information for
	a typedef that has been installed as the canonical typedef, if the
	type has not yet been defined.

Thu Feb 15 09:39:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (grokfield): Still call pop_nested_class for access decls.

Wed Feb 14 17:30:04 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (lookup_label): Call label_rtx.

	* decl.c (make_binding_level): New function.
	(pushlevel, pushlevel_class): Call it instead of explicit
	duplicate calls to xmalloc.

	* decl.c (init_decl_processing): Delete useless build_pointer_type
	call.

	* decl.c (float_ftype_float, ldouble_ftype_ldouble): Add definitions.
	(sizet_ftype_string): Delete variable.
	(init_decl_processing): Add built-in functions fabsf, fabsl,
	sqrtf, sqrtl, sinf, sin, sinl, cosf, cos, cosl.  New local
	variable strlen_ftype, used for strlen.

Wed Feb 14 16:21:25 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (push_to_top_level): Start from current_binding_level
	again for now; the stl hacks depend on g++ being broken in this
	way, and it'll be fixed in the template rewrite.

	* tree.def: Add USING_DECL.
	* decl2.c (do_class_using_decl): Implement.
	(grokfield): Pass access decls off to do_class_using_decl instead of
	grokdeclarator.
	* error.c (dump_decl): Handle USING_DECLs.
	* decl.c (grokdeclarator): Remove code for handling access decls.
	* class.c (finish_struct_1): Adjust accordingly, treat using-decls
	as access decls for now.
	(finish_struct): Don't check USING_DECLs for other uses of the name.

	* search.c (get_matching_virtual): Use cp_error_at.

Wed Feb 14 10:36:58 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* typeck.c (comptypes): Default COMP_TYPE_ATTRIBUTES to 1, to
	match c-typeck.c.
	(self_promoting_args_p): Move the check that TYPE is non-nil
	before trying to look at its main variant.
	(unsigned_type, signed_type): Add checking of DI/SI/HI/QI nodes.

	* cp-tree.h (DECL_WAITING_FRIENDS, SET_DECL_WAITING_FRIENDS):
	Delete macros.
	* init.c (xref_friend, embrace_waiting_friends): Delete functions.
	(do_friend): Delete call to xref_friend.
	* class.c (finish_struct_1): Delete call to embrace_waiting_friends.

	* typeck.c (convert_sequence): #if 0 unused function.

	* cp-tree.h (DECL_IN_MEMORY_P): New macro w/ the check that used to
	be in decl_in_memory_p.
	(decl_in_memory_p): Delete decl.
	* expr.c (decl_in_memory_p): Delete fn.
	* typeck.c (mark_addressable): Use DECL_IN_MEMORY_P.

	* decl.c (cp_finish_decl): Use DECL_IN_MEMORY_P.

Tue Feb 13 12:51:21 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (finish_struct_1): Check for a pure-specifier on a
	non-virtual function here.

	* decl2.c (grok_function_init): Don't check whether the function
	is virtual here.
	(grokfield): Don't call check_for_override here.

	* decl.c (push_to_top_level): Start from inner_binding_level,
	check class_shadowed in class levels.

Mon Feb 12 17:46:59 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (resume_level): Ignore things that don't have names, instead
	of core dumping.

Mon Feb 12 15:47:44 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl2.c (grokfield): Set DECL_VINDEX properly for FUNCTION_DECLs.

Sat Feb 10 17:59:45 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (finish_struct_1): Set DECL_VINDEX properly on a
	synthesized dtor.

	* parse.y (complete_type_name): Bind global_scope earlier.
	(complex_type_name): Likewise.
	(qualified_type_name): Remove.

Thu Feb  8 15:15:14 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (grokfndecl): Move code that looks for virtuals in base
	classes...
	* class.c (check_for_override): ... to a new function.
	(finish_struct_1): Call it.

	* cp-tree.h: Declare warn_sign_compare.

	* typeck.c (build_binary_op_nodefault): Check warn_sign_compare
	rather than extra_warnings to decide whether to warn about
	comparison of signed and unsigned.

	* decl2.c (lang_decode_option): Handle warn_sign_compare.  -Wall
	implies -Wsign-compare.  -Wall doesn't imply -W.

Wed Feb  7 15:27:57 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_component_ref): Fix to handle anon unions in base
	classes as well.

Wed Feb  7 14:29:12 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* class.c (resolves_to_fixed_type_p): Delete code dealing with
	a WITH_CLEANUP_EXPR, since we don't generate them any more.
	* cvt.c (build_up_reference): Likewise.
	* decl.c (grok_reference_init): Likewise.
	(cp_finish_decl): Likewise.
	* error.c (dump_expr): Likewise.
	* tree.c (real_lvalue_p): Likewise.
	(lvalue_p): Likewise.
	(build_cplus_new): Likewise.
	(unsave_expr_now): Likewise.
	* typeck.c (unary_complex_lvalue, build_modify_expr,
	c_expand_return): Likewise.

Tue Feb  6 13:39:22 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	Make the C++ front-end pay attention to attributes for structures.
	* class.c (finish_struct): New argument ATTRIBUTES, passed down into
	finish_struct_1.
	(finish_struct_1): New argument ATTRIBUTES; call cplus_decl_attributes.
	Take out old round_up_size use and setting the DECL_ALIGN possibly
	using it.  Take out setting of TYPE_ALIGN to round_up_size, which
	can override what the attribute set.
	* cp-tree.h (finish_struct): Update prototype.
	* parse.y (template_instantiate_once): Pass a NULL_TREE for the
	attributes to finish_struct.
	(structsp): For a CLASS decl, add maybe_attribute to rule and pass that
	value down into finish_struct.
	* Makefile.in (CONFLICTS): Switch to 7 shift/reduce conflicts.

Tue Feb  6 13:12:15 1996  Per Bothner  <bothner@@kalessin.cygnus.com>

	* decl.c (poplevel):  Re-word dead for local handling.
	(pushdecl):  Remove useless DECL_DEAD_FOR_LOCAL test.
	(cp_finish_decl):  If is_for_scope, check for duplicates so
	we can disable is_for_scope.  Otherwise, preserve_temp_slots.

	* lex.c (do_identifier):  Use global binding in preference of
	dead for local variable.

Mon Feb  5 17:46:46 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (initializing_context): Handle anon union changes, the
	context where fields of anon unions can be initialized now has to be
	found by walking up the TYPE_CONTEXT chain.

Fri Feb  2 14:54:04 1996  Doug Evans  <dje@@charmed.cygnus.com>

	* decl.c (start_decl): #ifdef out code to set DECL_COMMON
	if ASM_OUTPUT{,_ALIGNED}_BSS is defined.
	(obscure_complex_init): If bss is supported, always set
	DECL_INITIAL to error_mark_node.

Thu Feb  1 16:19:56 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* init.c (is_friend): Make sure there's a context before we see if
	it's an aggr type.

Thu Feb  1 15:44:53 1996  Mike Stump  <mrs@@cygnus.com>

	* init.c (is_friend): Classes are not friendly with nested classes.

Thu Feb  1 15:27:37 1996  Doug Evans  <dje@@charmed.cygnus.com>

	* lex.c (check_newline): Pass last character read to HANDLE_PRAGMA,
	and record its result.

Thu Feb  1 09:27:01 1996  Mike Stump  <mrs@@cygnus.com>

	* class.c (finish_struct_anon): Switch around code to not move anon
	union elements around, nor mess up their contexts, nor offsets,
	instead we now build up the right number of COMPONENT_REFs for all
	the anon unions that may be present at build_component_ref time.
	* typeck.c (lookup_anon_field): New routine to handle field lookup
	on fields without names.  We find them, based upon their unique type
	instead.
	* typeck.c (build_component_ref): Allow FIELD_DECL components.
	Handle finding components in anonymous unions, and ensure that a
	COMPONENT_REF is built for each level as necessary.

Tue Jan 30 18:18:23 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (build_up_reference): Make the INDIRECT_BIND case come after
	code that ensures that copy ctors are used if appropriate.

Tue Jan 30 17:35:14 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* init.c (build_vec_delete): Only give an error if base isn't an
	error_mark_node.

Mon Jan 29 17:09:06 1996  Mike Stump  <mrs@@cygnus.com>

	* spew.c (do_aggr): `new struct S;' isn't a forward declaration.
	(yylex): If we see `new', keep slurping.

Thu Jan 25 18:31:36 1996  Mike Stump  <mrs@@cygnus.com>

	* class.c (finish_struct_1): Move code for handling anon unions...
	(finish_struct_anon): to here.  Fixup so that we do the offset
	calculations right, and so that the fields are physically moved to
	the containers's chain.

Thu Jan 25 18:27:37 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (grokdeclarator): Avoid trying to get an operand off an
	identifier node.

Wed Jan 24 11:25:30 1996  Jim Wilson  <wilson@@chestnut.cygnus.com>

	* typeck.c (pointer_int_sum): Use TYPE_PRECISION (sizetype) not
	POINTER_SIZE to agree with expr.c.

Thu Jan 25 13:01:23 1996  Mike Stump  <mrs@@cygnus.com>

	* search.c (lookup_field): Don't report ambiguities if protect is 0,
	instead return NULL_TREE.

Wed Jan 24 13:01:26 1996  Mike Stump  <mrs@@cygnus.com>

	* class.c (finish_struct_1): Call warn_hidden if we want warnings
	about overloaded virtual functions.
	(warn_hidden): New routine to warn of virtual functions that are
	hidden by other virtual functions, that are not overridden.
	(get_basefndecls): New routine, used by warn_hidden.
	(mark_overriders): New routine, used by warn_hidden.
	* search.c (get_matching_virtual): Remove old warning that just
	isn't very useful.

Tue Jan 23 12:26:10 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (output_builtin_tdesc_entries): #if 0 the function definition.

	* typeck.c (null_ptr_cst_p): Delete unused fn.
	(build_function_call_maybe): Delete unused fn.

	* expr.c (extract_init): #if 0 the code after unconditional return 0
	for now.

	Delete old cadillac code.
	* edsel.c: Remove file.
	* Make-lang.in (CXX_SRCS): Take edsel.c off the list.
	* Makefile.in (CXX_OBJS): Delete edsel.o.
	(edsel.o): Delete rule.
	* cp-tree.h (flag_cadillac): Delete var decl.
	* lang-options.h: Delete "-fcadillac" and "-fno-cadillac".
	* decl2.c (flag_cadillac): Delete var definition.
	(lang_decode_option): Delete handling of -fcadillac and -fno-cadillac.
	(grokfield): Delete code depending on flag_cadillac.
	(finish_anon_union): Likewise.
	* class.c (finish_struct_1): Likewise.
	(pushclass): Likewise.
	(popclass): Likewise.
	(push_lang_context): Likewise.
	(pop_lang_context): Likewise.
	* decl.c (init_decl_processing): Likewise.
	(start_decl): Likewise.
	(cp_finish_decl): Likewise.
	(xref_tag): Likewise.
	(finish_enum): Likewise.
	(start_function): Likewise.
	(finish_function): Likewise.
	(finish_stmt): Likewise.
	* lex.c (lang_init): Likewise.
	(check_newline): Likewise.

	* lex.c (do_pending_inlines): Delete synthesized method kludge.

	Delete defunct, ancient garbage collection implementation.
	* rtti.c: New file with the RTTI stuff from gc.c.
	* gc.c: Removed file (moved the remaining stuff into rtti.c).
	* Makefile.in (CXX_OBJS): Replace gc.o with rtti.o.
	(rtti.o): New rule, replacing gc.o.
	* Make-lang.in (CXX_SRCS): Replace gc.c with rtti.c.
	* cp-tree.h: Delete gc-related fn decls.
	(DECL_GC_OFFSET): Delete macro.
	(flag_gc): Delete extern decl.
	* decl.c (current_function_obstack_index): Delete var decl.
	(current_function_obstack_usage): Delete var decl.
	(start_function): Delete clearing of current_function_obstack_index
	and current_function_obstack_usage.
	(init_decl_processing): Delete code relying on -fgc.
	Delete call to init_gc_processing.
	(cp_finish_decl): Delete calls to build_static_gc_entry and
	type_needs_gc_entry.  Delete gc code setting DECL_GC_OFFSET.
	(store_parm_decls): Delete -fgc calls to cp_expand_decl_cleanup
	and to expand_expr of a __gc_main call.
	(maybe_gc_cleanup): Delete var decl.
	(finish_function): Delete call to expand_gc_prologue_and_epilogue.
	* decl2.c (flag_gc): Delete var decl.
	(lang_f_options): Delete offering of -fgc.
	(lang_decode_option): Delete -fgc and -fno-gc handling.
	(get_temp_regvar): Delete gc code.
	* init.c (build_new): Delete gc code.
	* lex.c (init_lex): Delete checking of flag_gc.

	* typeck.c (convert_arguments): Delete gc code.
	(build_component_addr): Delete -fgc warning.
	(build_modify_expr): Delete gc code.

	* decl2.c (build_push_scope): Delete fn.
	* cp-tree.h (build_push_scope): Delete decl.

	* search.c (clear_search_slots): Delete fn.
	* cp-tree.h (clear_search_slots): Delete decl.

	* search.c (tree_needs_constructor_p): Delete fn.
	* cp-tree.h (tree_needs_constructor_p): Delete decl.

	* tree.c (id_cmp): Delete fn.

	* tree.c (set_fnaddr_from_vtable_entry): Delete fn.
	* cp-tree.h (set_fnaddr_from_vtable_entry): Delete decl.

	* tree.c (decl_value_member): Delete fn.
	* cp-tree.h (decl_value_member): Delete decl.

	* tree.c (list_hash_lookup_or_cons): Delete fn.
	* cp-tree.h (list_hash_lookup_or_cons): Delete decl.

	* method.c (cplus_exception_name): Delete fn.
	(EXCEPTION_NAME_{PREFIX, LENGTH}): Delete macros.

	* spew.c (shift_tokens): Delete fn.

Mon Jan 22 17:49:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (init_exception_processing): Pass 1 to needs_pop in calls
	to cp_finish_decl.
	* parse.y: Likewise.

Mon Jan 22 17:34:29 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* tree.c (build_cplus_staticfn_type): Delete function definition;
	never used.
	* cp-tree.h (build_cplus_staticfn_type): Delete decl.

	* tree.c (virtual_member): Delete function definition; never used.
	* cp-tree.h (virtual_member): Delete decl.

Fri Jan 19 18:03:14 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_component_ref): Handle getting vbase pointers
	out of complex multiple inheritance better.

Fri Jan 19 16:27:40 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_object_ref): Make sure we use the real type, not
	any reference type.

Fri Jan 19 16:01:47 1996  Mike Stump  <mrs@@cygnus.com>

	* tree.c (build_exception_variant): Don't create new types if we
	don't have to, also build new types on the right obstack.

Fri Jan 19 14:09:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (store_bindings): Split out from push_to_top_level.
	(push_to_top_level): Call it for b->type_shadowed on class binding
	levels.

Fri Jan 19 13:53:14 1996  Mike Stump  <mrs@@cygnus.com>

	* search.c (expand_upcast_fixups): Fix so that offsets stored in
	vbase_offsets are always right.  Fixes a problem where virtual base
	upcasting and downcasting could be wrong during conversions on this
	during virtual function dispatch at ctor/dtor time when dynamic
	vtable fixups for deltas are needed.  This only sounds easier than
	it is.  :-)
	(fixup_virtual_upcast_offsets): Change to reflect new calling
	convention for expand_upcast_fixups.

Fri Jan 19 12:23:08 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl2.c (grokbitfield): Strip the NOPs from WIDTH before we
	check that it's usable as the bitfield width.

Wed Jan 17 21:22:40 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl2.c (grokfield): Call cplus_decl_attributes with the attrlist.
	Pass a null tree to grokdeclarator for its ATTRLIST arg, since it's
	only ever used for functions in it.

Wed Jan 17 12:10:38 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y (qualified_type_name): Use the TYPE_DECL, not the type.
	(nested_type): Likewise.
	(nested_name_specifier): Use lastiddecl.

	* decl.c (grokdeclarator): Adjust accordingly.
	* init.c (expand_member_init): Likewise.
	* parse.y (base_class): Likewise.
	* typeck2.c (build_functional_cast): Likewise.

	* typeck2.c (build_functional_cast): Fill in name after we've
	checked for non-aggr type.

Wed Jan 17 10:18:01 1996  Mike Stump  <mrs@@cygnus.com>

	* decl2.c (warn_pointer_arith): Default to on.

Tue Jan 16 12:45:38 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (is_rid): New function.
	* decl.c (grokdeclarator): Diagnose reserved words used as
	declarator-ids.

Tue Jan 16 11:39:40 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (get_decl_list): Don't lose cv-quals.

	* decl.c (grokdeclarator): Fix SCOPE_REF handling and diagnose
	typespecs used as declarator-ids.

Tue Jan 16 11:09:42 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (poplevel): When poping a level, don't give a warning for
	any subblocks that already exist.

Tue Jan 16 00:25:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_object_ref): Finish what I started.

	* parse.y (qualified_type_name): Don't check TYPE_BUILT_IN.

	* decl2.c (constructor_name_full): Handle TEMPLATE_TYPE_PARMs.

	* decl.c (grokdeclarator): Also accept TEMPLATE_TYPE_PARM as a
	scope.

Mon Jan 15 16:19:32 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (xref_tag): Handle passing a type in directly.

	* parse.y (qualified_type_name): Pull out the type.
	(nested_type): Likewise.
	Take types directly instead of as identifiers.
	* call.c (build_scoped_method_call): Take types directly instead of
	as identifiers.
	* decl.c (xref_basetypes): Likewise.
	* init.c (expand_member_init): Likewise.
	(build_member_call): Likewise.
	(build_offset_ref): Likewise.
	* typeck2.c (build_scoped_ref): Likewise, remove bogus code.
	* method.c (do_build_assign_ref): Likewise.
	* decl.c (grokdeclarator): Handle a type appearing as the
	declarator-id for constructors.
	* method.c (do_build_copy_constructor): current_base_init_list now
	uses the types directly, not their names.
	* init.c (sort_base_init): Likewise.
	(expand_member_init): Likewise.
	* init.c (is_aggr_type): New function, like is_aggr_typedef.

Mon Jan 15 08:45:01 1996  Jeffrey A Law  <law@@cygnus.com>

	* tree.c (layout_basetypes): Call build_lang_field_decl instead
	of build_lang_decl if first arg is a FIELD_DECL.

Thu Jan 11 14:55:07 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (cp_finish_decl): Only clear TREE_USED if DECL_NAME is
	non-empty.
	* except.c (expand_start_catch_block): Set TREE_USED to avoid
	warnings about the catch handler.

Mon Jan  8 17:35:12 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_modify_expr): Use a COMPOUND_EXPR instead of
	expand_target_expr.

Thu Jan  4 12:30:32 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	Fix access control to use trees rather than integers.
	* class.c (access_{default, public, protected, private,
	default_virtual, public_virtual, private_virtual}_node): Add
	definitions.
	(init_class_processing): Do creation of those nodes.
	* cp-tree.h (access_type): Delete enum decl.
	(access_{default, public, protected, private, default_virtual,
	public_virtual, private_virtual}_node): Add decls.
	(compute_access): Change return type.
	* search.c (compute_access): Have tree return type, instead of enum.
	(lookup_field): Declare THIS_V and NEW_V to be tree nodes.
	* lex.c (real_yylex): Use yylval.ttype for giving the value of the
	access_* node for each of RID_{PUBLIC, PRIVATE, PROTECTED}.
	* parse.y (VISSPEC): Make ttype rather than itype.
	(base_class_access_list): Likewise.
	* *.[cy]: Change all refs of `access_public' to `access_public_node',
	etc.
	* call.c (build_method_call): Make ACCESS be a tree.
	* class.c (alter_access, finish_struct_1, filter_struct): Likewise.
	* cvt.c (convert_to_aggr): Likewise.
	* init.c (build_offset_ref, resolve_offset_ref, build_delete):
	Likewise.
	* method.c (hack_identifier): Likewise.
	* typeck.c (build_component_ref_1, build_component_ref): ): Likewise.

Thu Jan  4 11:02:20 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (pointer_int_sum, pointer_diff): Make code agree with C
	frontend, and make it more consistent with respect to
	warn_pointer_arith.

Tue Jan  2 00:13:38 1996  Rusty Russell  <rusty@@adelaide.maptek.com.au>

	* decl.c (pushdecl): Check for duplicate parameter names.

Wed Jan  3 09:25:48 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (expand_static_init): Call assemble_external for atexit.

Wed Jan  3 07:55:19 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (do_unwind): Remove some generated dead code.
	(eh_outer_context): New routine, factor out some common code from
	expand_builtin_throw and end_eh_unwinder.  Add code to do return
	address masking for the PA.
	(expand_builtin_throw): Use eh_outer_context instead of open coding
	it here.
	(end_eh_unwinder): Likewise.

Tue Jan  2 17:00:56 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_throw): Call assemble_external for __empty, if we
	use it.

Thu Dec 28 11:13:15 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_builtin_throw): Use RETURN_ADDR_OFFSET instead of
	NORMAL_RETURN_ADDR_OFFSET.
	(end_eh_unwinder): Likewise.

Wed Dec 27 22:18:16 1995  Mike Stump  <mrs@@cygnus.com>

	* gc.c (build_dynamic_cast): Make sure we don't cast away const
	when dealing with references, and make sure we handle dynamic
	casting to a cv qualified reference.

Thu Dec 21 23:50:35 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (struct eh_context): New structure top hold eh context
	information.
	(push_eh_context): New routine.
	(pop_eh_context): Likewise.
	* decl.c (push_cp_function_context): Use them.
	(pop_cp_function_context): Likewise.

Wed Dec 20 12:42:51 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Also prune uninteresting functions in the
	inline emission loop.

Wed Dec 20 02:32:07 1995  Jeffrey A Law  <law@@cygnus.com>

	* sig.c (build_signature_table_constructor): Mark functions
	in the signature as referenced.

Tue Dec 19 22:36:56 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (finish_file): Do all the vtable/synthesis stuff before
	the inline emission stuff.

Mon Dec 18 15:51:33 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h, decl2.c (flag_weak): New flag to control the use of
	weak symbols.	
	* lang-options.h: Add -f{no-,}weak.
	* decl.c (init_decl_processing): If the target does not support weak
	symbols, don't use them.
	* decl2.c, pt.c: s/SUPPORTS_WEAK/flag_weak/.

Sun Dec 17 21:13:23 1995  Rusty Russell  <rusty@@adelaide.maptek.com.au>

	* init.c (expand_member_init): warning for base init after members.

Fri Dec 15 15:32:18 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (build_expr_type_conversion): Don't convert to a reference
	type.

Thu Dec 14 16:05:58 1995  Mike Stump  <mrs@@cygnus.com>

	* method.c (report_type_mismatch): Improve wording for volatile
	mismatches.

Thu Dec 14 14:16:26 1995  Mike Stump  <mrs@@cygnus.com>

	* init.c (expand_aggr_init_1): Use expand_aggr_init_1 instead of
	expand_assignment, as the later doesn't handle things that have
	copy constructors well.  The compiler would do bitwise copying,
	instead of ctor calling in some cases.

Wed Dec 13 17:05:54 PST 1995  Paul Eggert  <eggert@@twinsun.com>

	* g++.c (my_strerror): Return "cannot access" if errno is 0.
	(pfatal_with_name, perror_exec): Don't assume that
	the returned value from my_strerror contains no '%'s.
	(concat): Remove.
	(sys_nerror): Declare only if HAVE_STRERROR is not defined.

Wed Dec 13 16:22:38 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	Lose CLASSTYPE_METHODS/DECL_NEXT_METHOD chain; make
	TYPE_METHODS/TREE_CHAIN mean what they used to.	
	* decl2.c (constructor_name_full): Refer to CLASSTYPE_METHOD_VEC
	instead of TYPE_METHODS.
	* decl.c (duplicate_decls): Lose references to DECL_NEXT_METHOD.
	* tree.c (tree_copy_lang_decl_for_deferred_output): Likewise.
	* cp-tree.h (CLASSTYPE_METHODS): Lose.
	(CLASSTYPE_METHOD_VEC): Point to lang_spec->methods instead of
	TYPE_METHODS.
	(struct lang_decl): Lose next_method field.
	(DECL_NEXT_METHOD): Lose.
	* class.c (finish_struct_methods): Don't mess with TYPE_METHODS.
	(finish_struct): Just use TYPE_METHODS; we don't need fn_fields
	anymore.
	(finish_struct_methods): Don't mess with the TREE_CHAINs in
	fn_fields.

	* search.c (add_conversions): Don't use TREE_CHAIN to traverse method
	vector.

	* call.c (build_method_call): Synthesize here even when not inlining.
	* typeck.c (build_function_call_real): Likewise.

Wed Dec 13 15:02:39 1995  Ian Lance Taylor  <ian@@cygnus.com>

	* cp/lex.c (check_newline): If DBX_DEBUGGING_INFO and write_symbols
	== DBX_DEBUG, call dbxout_start_new_source_file and
	dbxout_resume_previous_source_file when appropriate.

Tue Dec 12 20:38:55 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (start_anon_func): Push to the top level.
	(end_anon_func): Pop from the top level.

Mon Dec 11 18:56:14 1995  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h (build_cleanup): New routine to build cleanups.
	* decl.c (expand_static_init): Use build_cleanup to build a cleanup
	call at ctor time and use atexit to run it later.
	* decl2.c (build_cleanup): New routine, taken from finish_file.
	(finish_file): Use build_cleanup instead, and don't put function
	local statics in global dtor list.
	
Wed Dec  6 14:34:29 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_throw): Ensure that we have cleanups, if we try
	and expand cleanups.

Wed Dec  6 11:48:21 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_throw): Add logic to manage dynamic cleanups for
	the EH object.
	(expand_end_catch_block): Use the magic of expand_goto, instead of
	emit_jump so that we get the cleanup for any catch clause parameter
	and the cleanup for the exception object.  Update to reflect label
	changes.
	(push_eh_cleanup): New routine to register a cleanup for an
	exception object.
	(empty_fndecl): Used to default cleanup actions to
	nothing.
	(init_exception_processing): Setup empty_fndecl.  Setup
	saved_cleanup.
	(expand_start_catch_block): Update to reflect label changes.  Call
	push_eh_object to register the cleanup for the EH object.
	(start_anon_func): New routine to start building lambda expressions
	from trees.
	(end_anon_func): New routine to end them.
	(struct labelNode): Change so that we can use tree labels, or rtx
	labels.
	(saved_cleanup): Object to check for dynamic cleanups for the
	exception handling object.
	(push_label_entry): Change so that we can use tree labels, or rtx
	labels.
	(pop_label_entry): Likewise.
	(top_label_entry): Likewise.
	(expand_start_all_catch): Use tree label instead of rtx label, so
	that we can get the magic of expand_goto.
	(expand_end_all_catch): Update to reflect label changes.

	* class.c (build_vfn_ref): Remove building_cleanup logic, as we now
	use UNSAVE_EXPRs.
	typeck.c (get_member_function_from_ptrfunc): Remove remnants of
	building_cleanup logic, as we now use UNSAVE_EXPRs.
	* cp-tree.h (unsave_expr): Declare it.
	* decl.c (building_cleanup): Remove.
	(maybe_build_cleanup): Remove building_cleanup logic, and use
	UNSAVE_EXPR instead.

Sun Dec  3 01:34:58 1995  Mike Stump  <mrs@@cygnus.com>

	* gc.c (build_t_desc): Update error message to say <typeinfo>.

Thu Nov 30 12:30:05 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (pushdecl): Only warn about shadowing a local variable if
	warn_shadow is true.

Sun Nov 26 16:06:55 1995  Rusty Russell  <rusty@@adelaide.maptek.com.au>

	* typeck.c (build_binary_op_nodefault): Added warning about
	comparisons between different enum types with -Wall, unless
	-fenum-int-equiv set.

Wed Nov 22 15:44:02 1995  Mike Stump  <mrs@@cygnus.com>

	* class.c (finish_struct_1): Skip down to the inner type in
	multidimensional arrays.  Ensures ctors will be made for types that
	need constructing.

Wed Nov 22 14:19:22 1995  Mike Stump  <mrs@@cygnus.com>

	* decl.c (last_dtor_insn): New to track the last compiler generated
	insn in a dtor.
	(store_parm_decls): Set it.
	(finish_function): Use it to see if the dtor is empty.  Avoid doing
	vtable setup all the time, if we can.
	(struct cp_function): Add last_dtor_insn.
	(push_cp_function_context): Save it.
	(pop_cp_function_context): Restore it.

Wed Nov 22 11:52:19 1995  Paul Russell  <Rusty.Russell@@adelaide.maptek.com.au>

	* typeck.c (build_unary_op): Set TREE_NO_UNUSED_WARNING to avoid
	warnings.

Tue Nov 21 17:15:23 1995  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (expand_target_expr): Make sure targets get put into the
	current temp_slot_level, so that the free_temp_slots call will reuse
	them.

Tue Nov 21 13:32:03 1995  Mike Stump  <mrs@@cygnus.com>

	* class.c (finish_struct_1): Delay delta fixups for virtual bases
	until after we have done the hard virtuals, to avoid a bogus `every
	virtual function must have a unique final overrider' for virtual
	functions that are only overridden by hard virtuals.

Thu Nov  9 13:35:30 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (do_function_instantiation): Don't try to find a file-scope
	template for a member function.

Tue Nov 14 06:20:35 1995  Mike Stump  <mrs@@cygnus.com>

	* g++.c (main): Add handling of -nodefaultlibs.

Mon Nov 13 15:45:34 1995  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h (INDIRECT_BIND): Add a way for the frontend to
	distinguish between direct bindings of reference variables, and
	indirect bindings of reference variables.
	* cvt.c (build_up_reference): Use it.
	* typeck.c (convert_arguments): Use it to indicate this is an
	indirect binding.
	* decl.c (cp_finish_decl): Ensure that we reuse stack slots as fast
	as they are unused.
	(expand_static_init): Likewise.
	(cplus_expand_expr_stmt): Likewise.
	* decl2.c (finish_file): Likewise.
	* init.c (perform_member_init): Likewise.
	(emit_base_init): Likewise.
	(expand_aggr_vbase_init_1): Likewise.

Fri Nov 10 09:18:09 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (push_namespace): Rewrite to use build_lang_decl, so we
	get a DECL_LANG_SPECIFIC node.
	* cp-tree.h (lang_decl_flags): Add new member `level'.
	(NAMESPACE_LEVEL): Don't use decl.arguments, instead use the
	decl_flags level member.

Mon Nov  6 18:36:13 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* call.c (build_method_call): Make sure instance has a
	TYPE_LANG_SPECIFIC node before we dive into it.  

Sat Nov  4 20:01:52 1995  Jason Molenda  <crash@@phydeaux.cygnus.com>

	* method.c (make_thunk): use TREE_SET_CODE to set thunk's tree code.

Thu Nov  2 17:56:57 1995  Mike Stump  <mrs@@cygnus.com>

	* decl.c (duplicate_decls): When smashing decls, smash staticness in
	the usual way.

Thu Nov  2 16:44:02 1995  Mike Stump  <mrs@@cygnus.com>

	* decl.c (poplevel): Handle the merging of subblocks of cleanups
	when finishing blocks that have already been created (usually due to
	the fixup goto code).  Fixes bad debugging information.

Wed Nov  1 12:33:53 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (hack_identifier): Don't abort when we get a TREE_LIST
	that's not a list of overloaded functions.

Wed Nov  1 11:38:58 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl2.c (mark_vtable_entries): Check DECL_LANG_SPECIFIC on fn
	before trying to use DECL_ABSTRACT_VIRTUAL_P.

Tue Oct 31 11:56:55 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (mark_used): New function for hooking into setting of
	TREE_USED on decls.
	* call.c (build_method_call): Use it.
	* class.c (instantiate_type): Likewise.
	* init.c (build_offset_ref): Likewise.  Don't call assemble_external
	for all like-named functions.
	* method.c (hack_identifier): Likewise.
	(emit_thunk): Don't call assemble_external.
	(make_thunk): Create thunk as a FUNCTION_DECL so that it
	gets the right mode and ENCODE_SECTION_INFO works.
	
	* parse.y: Use mark_used.  Pass operator names to do_identifier.
	* lex.c (do_identifier): Handle operator names.

	* decl2.c (grokclassfn): Tweak __in_chrg attributes.

Thu Oct 26 16:45:58 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* errfn.c: Include stdio.h.
	(cp_sprintf): Take out decl of sprintf, and cast sprintf to errorfn*.

Wed Oct 25 18:58:41 1995  Mike Stump  <mrs@@cygnus.com>

	* typeck2.c (digest_init): Always convert initializers to the
	right type.

Wed Oct 25 13:25:24 1995  Mike Stump  <mrs@@cygnus.com>

	* init.c (member_init_ok_or_else): Don't allow member initializers
	for indirect members, as it is invalid.

Wed Oct 25 11:35:28 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (grokdeclarator): Don't allow `friend signed ()'.

Fri Oct 20 10:30:59 1995  Mike Stump  <mrs@@cygnus.com>

	* parse.y (for.init.statement): Catch compound statements inside for
	initializations, if we're being pedantic.

Fri Oct 20 10:03:42 1995  Mike Stump  <mrs@@cygnus.com>

	* decl.c (lookup_tag): Return NULL_TREE if we don't find what we are
	looking for.

Thu Oct 19 14:26:10 1995  Mike Stump  <mrs@@cygnus.com>

	* error.c (dump_expr): Don't core dump when a boolean expression is
	used as a default argument.

Thu Oct 19 10:36:30 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (finish_struct_bits): Check aggregate_value_p instead of
	RETURN_IN_MEMORY.

Wed Oct 18 18:12:32 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* class.c (finish_struct_bits): Also set TREE_ADDRESSABLE on a
	BLKmode type that would otherwise be returned in registers.

Mon Oct 16 12:32:19 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* g++.c (WITHLIBC): New macro.
	(main): Declare saw_libc.  Use WITHLIBC if `-lc' was used; set
	saw_libc and pass it at the end if it was set.

Wed Oct 11 16:30:34 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* parse.y (fn.def1): Call split_specs_attrs in
	declmods notype_declarator case.

Use a consistent time stamp format in ChangeLog entries.
Not everyone has Emacs 20 yet, so stick with Emacs 19 format for now.

Local Variables:
add-log-time-format: current-time-string
End:
@


1.3
log
@update to gcc 2.8.1
@
text
@@


1.2
log
@GCC 2.8.0 merge
@
text
@d1 31
d36 15
a61 4
Sun Nov 30 08:42:29 1997  Bruno Haible  <bruno@@linuix.mathematik.uni-karlsruhe.de>

	* pt.c (do_poplevel): Allow jumps into the block.

d67 1
a67 1
Thu Nov 27 08:26:56 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d69 29
a97 3
	* except.c (expand_start_catch_block): We only need the rethrow
 	region for non-sjlj exceptions.
	(expand_end_catch_block): Likewise.  Use outer_context_label_stack.
d106 3
d117 42
d163 2
d167 28
d200 14
d222 29
a306 5
	* except.c (expand_builtin_throw) [!DWARF2_UNWIND_INFO]: Replace
	remaining use of saved_throw_type with a call to get_eh_type.

1997-10-31  Brendan Kehoe  <brendan@@lisa.cygnus.com>

d317 5
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
Mon Nov 20 14:06:28 1995  Mike Stump  <mrs@@cygnus.com>
d3 1
a3 1
	* Version 2.7.2 released.
d5 1
a5 1
Mon Nov 20 14:05:00 1995  Mike Stump  <mrs@@cygnus.com>
d7 1
a7 1
	* g++.c (pfatal_with_name): Add missing third argument to concat.
d9 1
a9 1
Thu Oct 26 13:59:54 1995  Mike Stump  <mrs@@cygnus.com>
d11 4
a14 8
	* init.c (expand_aggr_init): Handle cv qualifiers on the object's
	type.

Sun Nov 12 18:09:35 1995  Mike Stump  <mrs@@cygnus.com>

	* Version 2.7.1 released.

Thu Nov  2 17:02:47 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d16 1
a16 1
	* call.c (convert_harshness): Handle references to arrays.
d18 1
a18 1
Fri Oct 27 14:20:21 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d20 1
a20 2
	* typeck.c (comp_target_types): Check multi-level pointer
	conversions in both directions.
d22 2
a23 1
Tue Oct 17 21:39:05 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d25 1
a25 2
	* parse.y (explicit_instantiation): Fix 'extern template' with no
	return type.
d27 3
a29 1
Mon Oct 16 14:35:20 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d31 1
a31 4
	* parse.y (explicit_instantiation): Support automatic instantiation
	of constructors.
	(named_class_head_*): Support out-of-class definition of nested
	types.
d33 2
a34 1
Wed Oct 11 12:20:56 1995  Mike Stump  <mrs@@cygnus.com>
d36 1
a36 4
	* search.c (envelope_add_decl): New routine.  Fix so that
	methods are hidden in the same way that other members are.
	(dfs_pushdecls): Cleanup and move functionality out of line,
	into envelope_add_decl. 
d38 7
a44 1
Tue Oct 10 15:46:01 1995  Mike Stump  <mrs@@cygnus.com>
d46 1
a46 2
	* typeck.c (mark_addressable): Only call assemble_external if we
	have started the output file.
d48 1
a48 1
Tue Oct 10 11:27:18 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d50 1
a50 1
	* decl.c (start_function): Fix earlier cv-quals change.
d52 1
a52 1
Mon Oct  9 23:53:05 1995  Mike Stump  <mrs@@cygnus.com>
d54 2
a55 2
	* parse.y (complex_direct_notype_declarator): Only push the class if
	we are not already in the class.
d57 1
a57 1
Mon Oct  9 11:22:03 1995  Doug Evans  <dje@@canuck.cygnus.com>
d59 1
a59 47
	* decl.c (duplicate_decls): Call merge_machine_decl_attributes.
	Update olddecl's attributes too.
	(grokdeclarator): #if 0 out call to build_decl_attribute_variant.
	* typeck.c (common_type): Call merge_machine_type_attributes.

Fri Oct  6 14:44:27 1995  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (mark_addressable): Add missing call to
	assemble_external.

Wed Oct  4 22:05:23 1995  Jeff Law  (law@@hurl.cygnus.com

	* cp/decl.c (deplicate_decls): Merge in deferred output
	status for variables.
	* cp/tree.c (tree_copy_lang_decl_for_deferred_output): New
	function to copy the g++ specific parts of a DECL node.
	(tree_copy_lang_type_for_deferred_output): Similarly for
	TYPE nodes.

Wed Oct  4 15:06:39 1995  Mike Stump  <mrs@@cygnus.com>

	* decl.c (store_parm_decls): Make sure the unwinder start comes
	before the exception specification start.
	* except.c (expand_exception_blocks): Make sure the unwinder end
	comes after the terminate protected catch clause region and after
	the end of the exception specification region.

Wed Oct  4 12:47:02 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	* lex.c (real_yylex): Fix identifier case for linemode.
	(handle_sysv_pragma): Don't abort when we see a pragma we don't
	recognize.

Tue Oct  3 14:09:46 1995  Mike Stump  <mrs@@cygnus.com>

	* decl.c (store_parm_decls): Add a call to start_eh_unwinder.
	* except.c (init_exception_processing): __throw doesn't take any
	arguments.
	(expand_builtin_throw): Ditto.  Always use Pmode, instead of SImode
	for all pointers.  Use expand_builtin_return_addr to unwind the
	first level off the stack.
	(do_unwind): Always use Pmode, instead of SImode for all pointers.
	(expand_exception_blocks): Add a call to end_eh_unwinder.
	(start_eh_unwinder, end_eh_unwinder): New routines to build machine
	independent stack unwinders for function/method calls.
	
Mon Oct  2 17:20:42 1995  Mike Stump  <mrs@@cygnus.com>
d61 1
a61 3
	* tree.c (unsave_expr_now): Make sure we process the argument list
	of any called functions.  Fixes incorrect code generation for
	cleanups.
d63 1
a63 1
Mon Oct  2 13:04:16 1995  Mike Stump  <mrs@@cygnus.com>
d65 1
a65 2
	* typeck.c (get_member_function_from_ptrfunc): Save function if it
	needs it.  Cures core dump on things like (this->*(f()))().
d67 14
a80 1
Sat Sep 23 22:51:25 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d82 1
a82 3
	* decl.c (start_function): Conform to gcc cv-quals convention (no
	expression has a cv-qualified type) in RESULT_DECLs.
	* method.c (make_thunk): Ditto.
d84 1
a84 1
Fri Sep 22 10:21:13 1995  Mike Stump  <mrs@@cygnus.com>
d86 1
a86 1
	* decl.c (pushtag): Add in the namespace name for the tag.
d88 1
a88 1
Thu Sep 21 13:11:13 1995  Mike Stump  <mrs@@cygnus.com>
d90 1
a90 5
	* parse.y (maybe_base_class_list, base_class_list, base_class,
	base_class_access_list): Make sure we see the typenames for base
	classes.
	* lex.c (see_typename): Instead of failing to see a typename when
	there is no next token, perfer a typename, and get the next token.
d92 2
a93 1
Wed Sep 20 12:35:27 1995  Michael Meissner  <meissner@@cygnus.com>
d95 1
a95 1
	* decl.c (init_decl_processing): Add __builtin_expect.
d97 4
a100 1
Tue Sep 19 16:48:11 1995  Mike Stump  <mrs@@cygnus.com>
d102 1
a102 3
	* cvt.c (cp_convert_to_pointer): Don't allow leftover conversions to
	or from pointer to member functions, they must all be handled before
	this point.
d104 2
a105 1
Fri Sep 15 17:14:47 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d107 1
a107 2
	* init.c (resolve_offset_ref): Fix wording of non-static member
	being referenced as a static.
d109 5
a113 1
Fri Sep 15 12:39:11 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d115 1
a115 2
	* typeck.c (build_indirect_ref): Only bash pointer if we actually
	call build_expr_type_conversion.
d117 1
a117 1
Thu Sep 14 18:24:56 1995  Jason Merrill  <jason@@deneb.cygnus.com>
d119 1
a119 3
	* cvt.c (build_expr_type_conversion): Handle conversion from
	reference.
	* typeck.c (build_indirect_ref): Avoid infinite recursion.
d121 2
a122 1
Thu Sep 14 17:23:28 1995  Mike Stump  <mrs@@cygnus.com>
d124 1
a124 6
	* decl.c (expand_start_early_try_stmts): New routine to start a try
	block at the start of the function, for function-try-blocks.
	* cp-tree.h (expand_start_early_try_stmts): Declare it.
	* parse.y (function_try_block): Use it, instead of doing it here, as
	we don't want to include rtl.h here, as that conflicts with RETURN
	in the parser.
d126 5
a130 1
Wed Sep 13 18:32:24 1995  Mike Stump  <mrs@@cygnus.com>
d132 4
a135 8
	* lex.c (reinit_parse_for_block): Support saving inline
	function-try-blocks, uses peekyylex.
	* parse.y (eat_saved_input): New rule, permit the parser to see that
	END_OF_SAVED_INPUT is ok, as it can see this when parsing the
	handlers of a function-try-block.
	(fndef): Use it.
	(component_decl): Make sure TRY and RETURN can come after fn.def2.
	* spew.c (peekyylex): New routine to peek at what will come next.
d137 2
a138 1
Wed Sep 13 16:52:06 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d140 1
a140 2
	* typeck.c (comptypes): Tighten up comparisons of template type
 	parms.
d142 18
a159 2
	* decl.c (duplicate_decls): Turn off whining about virtual functions
	redeclared inline for now.
d161 1
a161 1
Wed Sep 13 11:13:40 1995  Mike Stump  <mrs@@cygnus.com>
d163 2
a164 10
	* decl.c (store_in_parms): New routine to put things before we
	put base inits.
	* cp-tree.h (store_in_parms): Declare it.
	* decl.c (store_parm_decls): Use it to makr sure the starting of the
	eh spec comes before base inits.
	(finish_function): Use sequences instead of the obsolete
	reorder_insns.
	* parse.y (fndef): Enhance readability and maintainability.  Update
	to include function_try_block syntax.
	(function_try_block): Add.
d166 1
a166 1
Tue Sep 12 17:43:07 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d168 1
a168 2
	* call.c (convert_harshness): Use comptypes, not ==, to check if
	TYPE and PARMTYPE are equivalent on a function type.
d170 1
a170 1
Tue Sep 12 17:31:33 1995  Douglas Rupp  (drupp@@cs.washington.edu)
d172 1
a172 1
	* Make-lang.in (cc1plus) : Removed unnecessary $(exeext).
d174 1
a174 1
Mon Sep 11 23:24:07 1995  Mike Stump  <mrs@@cygnus.com>
d176 1
a176 2
	* except.c (expand_throw): Never allocate storage for thrown pointer
	to objects.
d178 6
a183 1
Mon Sep 11 19:36:45 1995  Mike Stump  <mrs@@cygnus.com>
d185 1
a185 3
	* except.c (expand_start_catch_block): Pointers to objects come
	back from catch matching already dereferenced, don't dereference
	again.
d187 3
a189 1
Mon Sep 11 15:46:28 1995  Mike Stump  <mrs@@cygnus.com>
d191 1
a191 3
	* except.c (expand_throw): Only decay the throw expression, don't do
	any default conversions.  This is so that one can throw and catch
	characters, and not have them match integers.
d193 10
a202 1
Mon Sep 11 13:46:45 1995  Mike Stump  <mrs@@cygnus.com>
d204 4
a207 2
	* error.c (dump_aggr_type): Deal with anonymous unions that don't
	have a TYPE_NAME.
d209 1
a209 1
Fri Sep  8 20:40:27 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d211 2
a212 1
	* lex.c (handle_sysv_pragma): Deal with getting a comma from yylex.
d214 1
a214 1
Fri Sep  8 15:51:41 1995  Mike Stump  <mrs@@cygnus.com>
d216 2
a217 1
	* except.c (expand_end_eh_spec): Handle empty EH specifications.
d219 1
a219 1
Fri Sep  8 15:27:22 1995  Mike Stump  <mrs@@cygnus.com>
d221 2
a222 13
	* cp-tree.h (expand_start_eh_spec): Declare new routine.
	(expand_end_eh_spec): Ditto.
	* decl.c (store_parm_decls): Call expand_start_eh_spec to process
	exception specifications.
	* except.c (expand_leftover_cleanups): Remove unused parameter.
	(expand_end_catch_block): Ditto.
	(expand_exception_blocks): Ditto.
	(expand_start_eh_spec): New routine to mark the start of an
	exception specification region.
	(expand_end_eh_spec): New routine to mark the end of an exception
	specification region.
	(expand_exception_blocks): Call expand_end_eh_spec to process
	exception specifications.
d224 1
a224 1
Fri Sep  8 14:40:48 1995  Per Bothner  <bothner@@kalessin.cygnus.com>
d226 2
a227 2
	* lex.c (do_identifier):  Use global binding in preference of
	dead for local variable.
d229 1
a229 1
Wed Sep  6 19:32:59 1995  Mike Stump  <mrs@@cygnus.com>
d231 4
a234 19
	* cp-tree.h (build_exception_variant): Remove used first argument.
	* decl.c (duplicate_decls): Ditto.
	(grokfndecl): Ditto.
	(revert_static_member_fn): Ditto.
	* decl2.c (grok_method_quals): Ditto.
	* tree.c (build_exception_variant): Ditto.
	* typeck.c (common_type): Ditto.
	* decl2.c (grokclassfn): After changing the type, call
	build_exception_variant, if necessary.

Tue Sep  5 15:56:27 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_throw): Run cleanups for the throw expression.

Wed Aug 30 15:24:38 1995  Stephen L. Favor  (sfavor@@tigger.intecom.com)

	* except.c (expand_builtin_throw): Moved gen_label_rtx calls beyond
	the store_parm_decls call which does initialization in the emit_*
	code concerning label numbering.
d236 1
a236 1
Thu Aug 31 09:01:07 1995  Mike Stump  <mrs@@cygnus.com>
d238 5
a242 13
	* except.c (expand_internal_throw): Let the frontend be responsible
	for managing all frontend EH parameters, the backend routine only
	needs to deal with backend values.  type and value are no longer
	passed to __throw.
	(init_exception_processing): Ditto.
	(expand_start_all_catch): Ditto.
	(expand_end_all_catch): Ditto.
	(expand_leftover_cleanups): Ditto.
	(expand_end_catch_block): Ditto.
	(expand_builtin_throw): Ditto.
	(expand_throw): Ditto.
	
Tue Aug 29 15:04:36 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d244 1
a244 77
	* cp-tree.h (DECL_REAL_CONTEXT): Give the real declaration context
	for a decl.
	* decl.c (cp_finish_decl): Use it.

Tue Aug 29 10:30:27 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_internal_throw): Oops, almost forgot type and
	value are now trees.

Mon Aug 28 17:57:45 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	Fix the attribute handling to make sure they get noted before we
	create the function's RTL, in case they can affect that.
	* decl.c (grokfndecl): New arg ATTRLIST.  Run
	cplus_decl_attributes before creating the decl's rtl.
	(grokdeclarator): New arg ATTRLIST, passed down into grokfndecl.
	(shadow_tag, groktypename, start_decl, start_method): Pass a
	NULL_TREE to grokdeclarator's new last arg.
	* decl2.c (grokfield): New arg ATTRLIST, passed into grokdeclarator.
	(grokbitfield, grokoptypename): Pass a NULL_TREE to
	grokdeclarator's new last arg.
	* except.c (expand_start_catch_block): Likewise.
	* pt.c (process_template_parm, end_template_decl,
	do_function_instantiation): Likewise.
	* cp-tree.h (grokfield): Add arg.
	(grokdeclarator): Move the prototype from here...
	* decl.h: ...to here.
	* lex.c (cons_up_default_function): Pass NULL_TREE to grokfield
	ATTRLIST argument.
	* parse.y: Create a list for the grokfield arg where appropriate,
	and pass it down instead of calling cplus_decl_attributes.

Mon Aug 28 15:07:24 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c: Always allow turning on exception handling.  Allow cross
	compilations to use EH.

Thu Aug 24 17:39:24 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (saved_pc, saved_throw_type, saved_throw_value): Use
	trees, instead of rtxs, and don't depend on using special machine
	dependent registers.
	(expand_internal_throw): Ditto.
	(init_exception_processing): Ditto.
	(expand_start_all_catch): Ditto.
	(expand_end_all_catch): Ditto.
	(expand_start_catch_block): Ditto.
	(expand_leftover_cleanups): Ditto.
	(expand_end_catch_block): Ditto.
	(expand_builtin_throw): Ditto.
	(expand_throw): Ditto.

Wed Aug 23 17:25:51 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>

	* cvt.c (build_expr_type_conversion): Handle conversions to
	reference types.

Wed Aug 23 15:33:59 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (do_unwind): Work around backend bug with -fpic.

Tue Aug 22 17:20:07 1995  Per Bothner  <bothner@@kalessin.cygnus.com>

	* decl2.c (flag_new_for_scope):  Add a new mode that follows ANSI
	for-scoping, but supports (and warns about) old programs.
	Make the new mode (with value 1) the default.
	(lang_f_options):  The on-value for flag_new_for_scope is now 2.
	* cp-tree.h (DECL_DEAD_FOR_LOCAL, DECL_ERROR_REPORTED): New macros
	(DECL_SHADOWED_FOR_VAR):  Likewise.
	* decl.c (struct binding_level):  New fields dead_vars_from_for
	and is_for_scope.
	(note_level_for_for):  New function.
	(poplevel):  Special processing if is_for_scope.
	(pushdecl):  Warn if for-scope variable shadows local.
	* lex.c (do_identifier):  Handle old (non-ANSI) for scoping,
	and warn if conflicts.
	* parse.y (FOR):  Call note_level_for_for.
d246 2
a247 1
Mon Aug 21 10:28:31 1995  Jason Merrill  <jason@@deneb.cygnus.com>
d249 1
a249 2
	* decl2.c (import_export_inline): Class interface hackery does not
	apply to synthesized methods.
d251 1
a251 1
Sun Aug 20 16:29:00 1995  Mike Stump  <mrs@@cygnus.com>
d253 1
a253 22
	* search.c (virtual_context): Find the right context more often.
	Solves a `recoverable compiler error, fixups for virtual function'
	problem.

Sun Aug 20 13:53:24 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_start_all_catch): Ensure that we always transfer
	control to the right EH handler, by rethrowing the end label on the
	region, instead of hoping we are nested and falling through.
	(expand_leftover_cleanups): Ditto.
	(end_protect): Since we now rethrow the end label, put a
	nop after it, so that outer regions are recognized.
	* init.c (build_vec_delete_1): New routine to handle most of vector
	deleting, all code moved here from build_vec_delete.
	(build_array_eh_cleanup): Use build_vec_delete_1 to do all the real
	work.
	(expand_vec_init): If the array needs partial destructing, setup an
	EH region to handle it.
	(build_vec_delete): Move lots of code to build_vec_delete_1, use
	build_vec_delete_1 to do the grunt work.
	
Sat Aug 19 14:25:33 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d255 2
a256 12
	Handle decl attributes properly for function definitions without
	previous attribute-loaded declarations.
	* decl.c (start_function): New arg ATTRS.  Add a call to
	cplus_decl_attributes with it before we create the RTL.
	* cp-tree.h (start_function): Update prototype.
	* parse.y (fn.def1): Pass ATTRS into start_function instead of
	trying to call cplus_decl_attributes too late.  Pass a NULL_TREE
	for other use.
	* decl2.c (finish_file): Pass NULL_TREE as fourth arg to
	start_function.
	* method.c (synthesize_method): Likewise.
	* except.c (expand_builtin_throw): Likewise for start on __throw.
d258 2
a259 1
Sat Aug 19 13:36:08 1995  Mike Stump  <mrs@@cygnus.com>
d261 1
a261 88
	* class.c (set_rtti_entry): Turn on -fvtable-thunk -frtti support.
	This changes -fvtable-thunks vtable layout, so a recompile will be
	necessary, if you use -fvtable-thunks.
	(get_vtable_entry): Use n, instead of i to be consistent with the
	rest of the compiler.
	(get_vtable_entry_n): Ditto.
	(add_virtual_function): Add a slot for the tdesc, if -fvtable-thunks
	are being used.
	(finish_struct_1): Ditto.
	(skip_rtti_stuff): New routine to collapse similar code from many
	different parts of the compiler.  I think I got them all.
	(modify_one_vtable): Use it.
	(fixup_vtable_deltas1): Ditto.
	(override_one_vtable): Ditto.
	* decl2.c (mark_vtable_entries): Ditto.
	* tree.c (debug_binfo): Ditto.
	* search.c (expand_upcast_fixups): Ditto.
	(get_abstract_virtuals_1): Ditto.  Use virtuals, instead of tmp to
	consistent with the rest of the compiler.
	(get_abstract_virtuals): Ditto.
	* cp-tree.h (skip_rtti_stuff): New routine, declare it.
	* gc.c (build_headof): Support -fvtable-thunk and -frtti together.
	(build_typeid): Ditto.
	(build_classof): Remove old style way of doing rtti.  Remove support
	for `classof' and `headof'.
	* gxx.gperf: Ditto.
	* hash.h: Ditto.
	* parse.y: Ditto.

Fri Aug 18 17:31:58 1995  Jason Merrill  <jason@@deneb.cygnus.com>

	* decl.c (start_function): Clear ctor_label and dtor_label.

	* class.c (finish_struct_1): Fix handling of access decls.

Tue Aug 15 19:21:54 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>

	* class.c (finish_struct): Only do minimal processing here, so it
	can be used for class template definitions, as well.
	(finish_struct_1): New function with the rest of the code.

Tue Aug 15 09:46:16 1995  Mike Stump  <mrs@@cygnus.com>

	* class.c (prepare_fresh_vtable): On second though, always build the
	offset (see Aug 10 change), unless -fvtable-thunks is given.  It
	does this by calling the new routine set_rtti_entry.
	(finish_struct): Ditto.
	(set_rtti_entry): New routine to update the rtti information at the
	start of the vtable.

Mon Aug 14 12:21:22 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* error.c (dump_decl, case IDENTIFIER_NODE): Only work on a dtor
	if it's declared in the C++ language spec.
	(dump_function_decl): Likewise.
	(dump_function_name): Likewise.
	(ident_fndecl): Make sure we got something back from lookup_name.
	* decl.c (start_function): Likewise.

Fri Aug 11 16:52:15 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>

	* call.c (build_method_call): Don't call build_new when calling a
	constructor without an instance.

Thu Aug 10 20:00:17 1995  Mike Stump  <mrs@@cygnus.com>

	* class.c (prepare_fresh_vtable): Always build the offset to the
	complete object, as it doesn't cost much.  This allows dynamic_cast
	to void * to work when -frtti isn't given.
	(finish_struct): Ditto.

Thu Aug 10 16:31:28 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (build_eh_type): Split out some functionality to new
	routine named build_eh_type_type.
	(build_eh_type_type): New routine.
	(expand_start_catch_block): Use build_eh_type_type, as we never want
	the dynamic type of the catch parameter, just the static type.
	Fixes core dumps when -frtti is used and one catchs pointers to
	classes.

Thu Aug 10 14:55:29 1995  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_builtin_throw): Since we now use normal calling
	conventions for __throw, we have to remove the first layer off the
	stack, so that the next context we search for handlers is the outer
	context instead of the context that had the call to __throw, if we
	don't immediately find the desired context.
d263 2
a264 1
Tue Aug  8 17:44:23 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d266 1
a266 2
	* tree.c (cp_expand_decl_cleanup): Returns int, not tree.
	* cp-tree.h: Update.
d268 2
a269 1
	* parse.y (template_type_parm): Add support for `typename'.
d271 1
a271 1
Tue Aug  8 12:06:31 1995  Mike Stump  <mrs@@cygnus.com>
d273 2
a274 9
	* except.c (expand_internal_throw): New internal routine to throw a
	value.
	(expand_end_all_catch, expand_leftover_cleanups): All throwers
	changed to use `expand_internal_throw' instead of jumping to throw
	label.
	(expand_end_catch_block, expand_throw): Ditto.
	(throw_label): Removed.
	(expand_builtin_throw): Changed so that EH parameters are passed by
	normal function call conventions.  Completes Aug 4th work.
d276 1
a276 1
Fri Aug  4 17:17:08 1995  Mike Stump  <mrs@@cygnus.com>
d278 1
a278 18
	* cp-tree.h (expand_builtin_throw): Declare it.
	* decl2.c (finish_file): Call expand_builtin_throw.
	* except.c (make_first_label): Remove.
	(init_exception_processing): Don't use a LABEL_REF for throw_label,
	instead use a SYMBOL_REF, this is so that we don't use LABEL_REFs in
	other functions that don't really appear in those functions.  This
	solves a problem where cc1plus consumed exponential amounts of
	memory when -Wall was used.
	(expand_end_all_catch, expand_leftover_cleanups,
	expand_end_catch_block, expand_throw): Change all uses of
	throw_label to match new style.
	(do_unwind): Rename parameter to inner_throw_label, as it is now
	different from throw_label.  Also, assume that our caller will wrap
	the passed label with a LABEL_REF, if needed.
	(expand_builtin_throw): Make external, change so that the generated
	throw is now a real function.
	(expand_exception_blocks): Never generate throw code inside another
	function.
d280 1
a280 1
Fri Aug  4 12:20:02 1995  Mike Stump  <mrs@@cygnus.com>
d282 3
a284 4
	* decl.c (grokdeclarator): Move checking of mutable const objects
	and mutable static objects down, as we might decide during parsing
	to unset staticp or constp (for example, when const is part of the
	object being pointed to).
d286 1
a286 1
Thu Aug  3 17:13:43 1995  Mike Stump  <mrs@@cygnus.com>
d288 2
a289 3
	* except.c (output_exception_table_entry): Enhance portability to
	weird machines.
	(emit_exception_table): Ditto.
d291 1
a291 1
Thu Aug  3 16:41:38 1995  Mike Stump  <mrs@@cygnus.com>
d293 1
a293 2
	* typeck.c (build_ptrmemfunc): Handle casting of pointer to
	non-virtual member functions.
d295 1
a295 1
Wed Aug  2 11:58:25 1995  Mike Stump  <mrs@@cygnus.com>
d297 2
a298 2
	* gc.c (build_typeid): Strip cv qualifiers so that const T&, T&, T
	and const T all match.
d300 1
a300 1
Wed Aug  2 11:25:33 1995  Mike Stump  <mrs@@cygnus.com>
d302 1
a302 2
	* except.c (build_eh_type): Strip cv qualifiers so that const T&,
	T&, T and const T all match.
d304 2
a305 1
Tue Aug  1 14:20:16 1995  Mike Stump  <mrs@@cygnus.com>
d307 2
a308 16
	* except.c: Fix up comments, cleanup code and eliminate	exceptNode,
	exceptStack, exceptstack, push_except_stmts, pop_except_stmts,
	new_except_stack, push_last_insn, pop_last_insn, insn_save_node and
	InsnSave.  Also, numerous speed improvements, and correctness
	improvements.  Double faulting in all situations should now be
	handled correctly.
	(expand_start_all_catch): Instead of having many terminate protected
	regions, just have one.
	(expand_start_catch_block): No longer have to protect
	false_label_rtx, as it isn't used for EH region marking.
	(expand_end_catch_block): Expand out EH cleanups here by using
	expand_leftover_cleanups.
	(expand_end_all_catch): Use sequences instead of playing with insn
	links directly.
	(expand_exception_blocks): Ditto.  Also protect all catch clauses
	with one terminate region.
d310 3
a312 1
Mon Jul 31 13:24:30 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d314 1
a314 2
	* method.c (report_type_mismatch): Don't talk about an object
	parameter for non-methods.
d316 1
a316 1
Sun Jul 30 13:13:02 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d318 1
a318 4
	* class.c (finish_struct): Catch private and protected members of
	anonymous unions here.
	* decl2.c (finish_anon_union): And here.
	* parse.y: Instead of here.
d320 2
a321 4
	* errfn.c (ARGSLIST): Support passing four args.
	* error.c (cv_as_string): New function.
	(cp_printers): Add it.
	* call.c (build_method_call): Report 'const' at end of pseudo-decl.
d323 1
a323 1
	* method.c (report_type_mismatch): Deal with a bad_arg of 0.
d325 1
a325 1
	* init.c (expand_aggr_init): Handle volatile objects, too.
d327 3
a329 1
Sat Jul 29 13:42:03 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d331 1
a331 4
	* decl.c (struct binding_level): Keep list of incomplete decls.
	(print_binding_level): Use list_length to count them.
	(pushdecl): Build up the list.
	(hack_incomplete_structures): Walk it and prune completed decls.
d333 3
a335 1
Fri Jul 28 15:26:44 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d337 1
a337 3
	* typeck.c (comp_target_types): Don't check const and volatile for
	function types.
	(comp_ptr_ttypes_real): Ditto.
d339 1
a339 1
Thu Jul 27 15:40:48 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d341 2
a342 1
	* typeck.c (comp_target_types): Fix.
d344 1
a344 1
Thu Jul 27 15:10:48 1995  Mike Stump  <mrs@@cygnus.com>
d346 1
a346 17
	* cp-tree.h (unsave_expr_now, build_unsave_expr,
	cp_expand_decl_cleanup): Declare new routines.
	* decl.c (cp_finish_decl, store_parm_decls,
	hack_incomplete_structures): Change all cals from
	expand_decl_cleanup to cp_expand_decl_cleanup.
	* gc.c (protect_value_from_gc): Ditto.
	* expr.c (cplus_expand_expr): Handle UNSAVE_EXPRs.
	* tree.c (unsave_expr): New routine to build an UNSAVE_EXPR.
	(unsave_expr_now): Backend routine used by tree expander.
	(cp_expand_decl_cleanup): Wrap second argument in an UNSAVE_EXPR to
	work around a limitation in the backend.  The backend uses the
	cleanups multiple times, on disjoint control flows, so we cannot
	pass unsaved SAVE_EXPRs to the backend.
	* tree.def (UNSAVE_EXPR): New tree code.
	* typeck.c (c_expand_return): Move goto/return code up inside
	conditional, as we don't always want to do this, we only want to do
	this when we don't otherwise finish with this control flow.
d348 1
a348 1
Thu Jul 27 10:38:43 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d350 1
a350 2
	* parse.y (typespec): Only complain about typeof if we're not
	getting it from a system header.
d352 1
a352 1
Thu Jul 27 10:26:23 1995  Doug Evans  <dje@@canuck.cygnus.com>
d354 2
a355 15
	Clean up prefix attribute handling.
	* parse.y (reserved_declspecs): Link prefix attributes with declspecs.
	(declmods): Likewise.
	(all rules that reference typed_declspecs and declmods): Call
	split_specs_attrs or strip_attrs to separate declspecs and attrs.
	(lang_extdef): Delete resetting of prefix_attributes.
	(template_def, notype_declarator rule): Use NULL_TREE for
	prefix_attributes.
	(condition): Use NULL_TREE for prefix_attributes.
	(setattrs): Deleted.
	(nomods_initdcl0): Set prefix_attributes to NULL_TREE.
	(component_decl): Delete resetting of prefix_attributes.
	(component_decl_1, notype_components rule): Use NULL_TREE for
	prefix_attributes.
	(simple_stmt): Delete resetting of prefix_attributes.
d357 1
a357 1
Mon Jul 24 13:37:53 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d359 3
a361 3
	* call.c (convert_harshness): Deal with reference conversions before
	others.  Actually do array->pointer decay.  Call comp_target_types
	with pointer types rather than their targets.
d363 1
a363 1
	* typeck.c (comp_target_types): Avoid assigning D const * to B *.
d365 6
a370 1
Mon Jul 24 08:54:46 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d372 1
a372 1
	* pt.c (to_be_restored): Move decl to global scope.
d374 1
a374 1
Sat Jul 22 12:22:11 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d376 2
a377 1
	* decl.c (start_decl): Put back clearing of DECL_IN_AGGR_P.
d379 1
a379 1
Fri Jul 21 17:09:02 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d381 5
a385 2
	* decl.c (grokdeclarator): Downgrade error about 'extern int A::i'
	to pedwarn.
d387 1
a387 2
	* pt.c (instantiate_template): Also avoid instantiation if the
	function has already been declared to be a specialization.
d389 2
a390 2
	* decl2.c (check_classfn): Ignore cname argument, and return the
	matching function.
d392 3
a394 2
	* decl.c (start_decl): Handle declarations of member functions
	outside of the class (i.e. specialization declarations).
d396 2
a397 1
Thu Jul 20 10:34:48 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d399 1
a399 1
	* class.c (finish_struct): Don't mess with the type of bitfields.
d401 1
a401 1
	* various.c: s/TYPE_POINTER_TO/build_pointer_type/.
d403 158
a560 1
Thu Jul 20 01:43:10 1995  Mike Stump  <mrs@@cygnus.com>
d562 1
a562 5
	* init.c (expand_aggr_init): Assume LOOKUP_ONLYCONVERTING if init
	is not a parameter list (TREE_LIST).
	(expand_default_init): If LOOKUP_ONLYCONVERTING is set, then set
	LOOKUP_NO_CONVERSION so that we don't allow two-level conversions,
	but don't set it otherwise.
d564 2
a565 1
Wed Jul 19 20:32:01 1995  Mike Stump  <mrs@@cygnus.com>
d567 1
a567 2
	* init.c (expand_default_init): Don't allow two-level conversions
	during construction.
d569 1
a569 1
Wed Jul 19 18:06:37 1995  Mike Stump  <mrs@@cygnus.com>
d571 1
a571 2
	* gc.c (build_headof): The type of dyncasting to a pointer to cv
	void, should be pointer to cv void.
d573 1
a573 1
Wed Jul 19 17:25:43 1995  Mike Stump  <mrs@@cygnus.com>
d575 2
a576 1
	* gc.c (build_dynamic_cast): Allow casting in const.
d578 1
a578 1
Wed Jul 19 16:34:27 1995  Mike Stump  <mrs@@cygnus.com>
d580 1
a580 2
	* typeck.c (build_const_cast): If we are passed error_mark_node,
	return it.
d582 1
a582 1
Wed Jul 19 15:24:48 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d584 2
a585 1
	* class.c (push_nested_class): Make sure TYPE is non-nil.
d587 1
a587 2
	* cvt.c (type_promotes_to): Watch for error_mark_node on the
	incoming TYPE.
d589 2
a590 1
Wed Jul 19 13:23:12 1995  Gerald Baumgartner  <gb@@alexander.cs.purdue.edu>
d592 1
a592 4
	* cp-tree.h (SIGTABLE_VT_OFF_NAME): Renamed from SIGTABLE_OFFSET_NAME.
	(SIGTABLE_VB_OFF_NAME): New macro.
	(vt_off_identifier): Renamed from offset_identifier.
	(vb_off_identifier): Added extern declaration.
d594 1
a594 8
	* decl.c (vt_off_identifier): Renamed from offset identifier.
	(vb_off_identifier): New variable to hold the identifier for the
	sigtable field vb_off.
	(init_decl_processing): Initialize vb_off_identifier.
	Renamed vt_off_identifier from offset_identifier.
	* sig.c (build_signature_method_call): Renamed offset_identifier and
	local variable offset to vt_off_identifer and vt_off, respecitively.
	* sig.c (build_signature_table_constructor): Renamed offset to vt_off.
d596 2
a597 5
	* decl.c (init_decl_processing): Add vb_off field to
	sigtable_entry_type.  Reorder fields so that pfn gets properly
	aligned at a 64 bit boundary on the Alpha.
	* sig.c (build_signature_table_constructor): Build the constructor
	according to the new layout.  Set the vb_off field to -1 for now.
d599 1
a599 2
	* decl.c (init_decl_processing): Align sigtable_entry_type on word
	boundaries instead of double word boundaries to save space.
d601 1
a601 1
Tue Jul 18 16:58:37 1995  Mike Stump  <mrs@@cygnus.com>
d603 1
a603 1
	* cvt.c (cp_convert): Always call build_cplus_new for a ctor.
d605 2
a606 1
Tue Jul 18 14:24:53 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d608 2
a609 3
	* parse.y (opt.component_decl_list): Only forbid private/protected
	in anonymous unions.  We need to make this know when the type is
	defined for an object, to not give the error.
d611 1
a611 1
Mon Jul 17 14:22:44 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d613 3
a615 2
	* parse.y (opt.component_decl_list): Don't allow access control
	as private or protected for union members.
d617 2
a618 1
Sun Jul 16 14:01:00 1995  Jim Wilson  <wilson@@chestnut.cygnus.com>
d620 3
a622 2
	* lex.c (check_newline): For 'p' case, move goto skipline line to
	before end brace for 'pragma'.
d624 5
a628 1
Fri Jul  7 13:55:58 1995  Mike Stump  <mrs@@cygnus.com>
d630 1
a630 1
	* g++.1: Tiny updates.
d632 3
a634 1
Fri Jul  7 13:05:20 1995  Mike Stump  <mrs@@cygnus.com>
d636 1
a636 5
	* decl.c (cp_finish_decl): Only destruct local static variables if
	they are constructed, and only construct the first time control
	passes completely through its declaration (if not initialized with a
	constant-expression).
	(expand_static_init): Ditto.
d638 1
a638 1
Wed Jul  5 14:05:04 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d640 1
a640 2
	* typeck.c (comptypes, case OFFSET_REF): If either offset basetype
	is a TEMPLATE_TYPE_PARM, give a match.
d642 1
a642 1
Mon Jul  3 15:17:20 1995  Steve Chamberlain  <sac@@slash.cygnus.com>
d644 4
a647 1
	* g++.c (sys/file.h): Remove change of Jun 28.
d649 1
a649 1
Fri Jun 30 15:42:57 1995  Mike Stump  <mrs@@cygnus.com>
d651 2
a652 3
	* method.c (build_overload_value): Handle encoding of null pointer
	constants (or any pointer with a constant numeric value) for
	templates.
d654 1
a654 1
Fri Jun 30 13:45:51 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d656 2
a657 2
	* call.c (convert_harshness): Add QUAL_CODE when we're faced with
	const vs non-const for void conversions.
d659 1
a659 1
Fri Jun 30 10:19:52 1995  Mike Stump  <mrs@@cygnus.com>
d661 5
a665 3
	* except.c (expand_start_all_catch): Fix problem with finding an
	outer nested try block when there is no code to separate it from an
	inner try block.
d667 1
a667 1
Fri Jun 30 02:22:26 1995  Mike Stump  <mrs@@cygnus.com>
d669 8
a676 2
	* search.c (dfs_pushdecls): Consume 2 or 3 orders of magnitude less
	memory please when virtual bases are used.
d678 4
a681 1
Thu Jun 29 19:03:47 1995  Mike Stump  <mrs@@cygnus.com>
d683 2
a684 9
	* class.c (build_vbase_path): Avoid testing things that cannot be
	null to see if they are null.
	* cvt.c (convert_pointer_to_vbase): Remove code that doesn't work.
	* decl.c (finish_function): Pass a type into the new
	convert_pointer_to_vbase instead of a binfo.
	* search.c (convert_pointer_to_vbase): Rewritten to use get_vbase
	and convert_pointer_to_real.
	(expand_indirect_vtbls_init): Use convert_pointer_to_vbase instead
	of the more cryptic call to get_vbase.
d686 5
a690 1
Thu Jun 29 09:35:05 1995  Mike Stump  <mrs@@cygnus.com>
d692 5
a696 1
	* decl.c (BOOL_TYPE_SIZE): Fix broken SLOW_BYTE_ACCESS check.
d698 1
a698 1
Thu Jun 29 03:43:55 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d700 1
a700 1
	* pt.c (instantiate_template): Don't strip 'this' twice.
d702 1
a702 1
	* pt.c (coerce_template_parms): Allow null pointer constants.
d704 20
a723 2
	* decl.c (revert_static_member_fn): But only if DECL_ARGUMENTS is
	set.
d725 82
a806 1
Wed Jun 28 23:34:58 1995  Steve Chamberlain  <sac@@slash.cygnus.com>
d808 5
a812 3
	* g++.c (pfatal_with_name):  Use my_strerror to get error
	string.
	(sys/file.h): Include if HAVE_FILE_H defined.
d814 28
a841 1
Wed Jun 28 18:39:03 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d843 2
a844 4
	* decl.c (revert_static_member_fn): Also remove 'this' from
	DECL_ARGUMENTS.
	* decl2.c (check_classfn): Don't revert this function until we get a
	match.
d846 2
a847 1
Wed Jun 28 14:07:27 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d849 1
a849 1
	* parse.y (component_decl): Clear PREFIX_ATTRIBUTES here.
d851 2
a852 1
Wed Jun 28 11:05:13 1995  Mike Stump  <mrs@@cygnus.com>
d854 1
a854 3
	* decl2.c (finish_file): Handle global vector news.
	* init.c (build_new): Encode vector news so that later we will know
	how many elements there are.
d856 2
a857 1
Mon Jun 26 13:38:06 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d859 1
a859 1
	* expr.c (cplus_expand_expr): Don't mess with temp slots.
d861 1
a861 2
	* decl2.c (warn_if_unknown_interface): Don't crash if tinst_for_decl
	returns null.
d863 3
a865 3
	* decl2.c (check_classfn): Use revert_static_member_fn.
	* decl.c (revert_static_member_fn): Diagnose static member functions
	declared const or volatile.
d867 2
a868 3
	* decl2.c (grokfield): Check for missing default args here, too.
	(check_default_args): Function to do the checking.
	* decl.c (pushdecl): Use it.
d870 1
a870 2
	* decl.c (pushdecl): Don't warn about shadowing a member of `this'
	if there is no `this'.
d872 4
a875 1
Sun Jun 25 11:34:25 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d877 1
a877 2
	* call.c (build_method_call): Downgrade 'called before definition'
	to a warning, as it ought to go away after Monterey.
d879 1
a879 1
Sat Jun 24 14:18:42 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d881 1
a881 2
	* pt.c (coerce_template_parms): Don't do extra checking on pointer
	to member arguments.
d883 2
a884 2
	* class.c (finish_struct): const and reference members don't prevent
	a class from being an aggregate.
d886 1
a886 1
	* class.c (finish_struct): Signatures are always aggregates.
d888 4
a891 1
Fri Jun 23 17:20:29 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d893 2
a894 1
	* decl2.c (check_classfn): Improve error message.
d896 2
a897 1
	* pt.c (tsubst): Handle PROMOTE_PROTOTYPES.
d899 1
a899 1
Thu Jun 22 01:50:42 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d901 1
a901 1
	* typeck.c (comptypes): Don't ignore method quals.
d903 1
a903 1
	* class.c (finish_struct): Non-abstract virtuals are always USED.
d905 1
a905 4
	* decl.c (build_ptrmemfunc_type): The underlying union type isn't
	IS_AGGR_TYPE, either.
	* class.c (finish_struct): Use CLASSTYPE_NON_AGGREGATE instead.
	* cp-tree.h: Ditto.
d907 1
a907 9
	* cp-tree.h (lang_type): Add aggregate.
	(CLASSTYPE_AGGREGATE): New macro.
	(TYPE_NON_AGGREGATE_CLASS): Ditto.
	* class.c (finish_struct): Determine whether a class is an
	aggregate.
	* decl.c (cp_finish_decl): Check TYPE_NON_AGGREGATE_CLASS instead of
	TYPE_NEEDS_CONSTRUCTING.
	* typeck2.c (digest_init): Check TYPE_NON_AGGREGATE_CLASS for
	subobjects, too.
d909 1
a909 1
	* pt.c (tsubst, PARM_TYPE): Propagate DECL_ARTIFICIAL.
d911 1
a911 4
	* decl.c (start_function): For pre-parsed functions, layout all of
	the parm decls again.
	(grokvardecl): TREE_PUBLIC depends on DECL_THIS_EXTERN, not
	DECL_EXTERNAL.
d913 2
a914 2
	* pt.c (coerce_template_parms): Improve checking for invalid
	template parms.
d916 1
a916 1
Wed Jun 21 12:01:16 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d918 1
a918 2
	* decl.c (grokdeclarator): Forbid declaration of a static member
	with the same name as its enclosing class.
d920 2
a921 1
Mon Jun 19 10:28:14 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d923 1
a923 1
	* decl.c (finish_function): Clear current_class_decl.
d925 1
a925 2
	* typeck.c (build_conditional_expr): Use convert (boolean_type_node
	instead of truthvalue_conversion.
d927 1
a927 2
	* class.c (finish_struct): A data member with the same name as the
	class doesn't suppress constructors.
d929 1
a929 1
Fri Jun 16 18:11:39 1995  Gerald Baumgartner  (gb@@alexander.cs.purdue.edu)
d931 1
a931 2
	* decl.c (start_function): If current_class_decl is a signature
	pointer, don't dereference it but set C_C_D to current_class_decl.
d933 1
a933 1
Fri Jun 16 17:06:28 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d935 1
a935 2
	* decl.c (duplicate_decls): Complain about virtual functions
	redeclared to be inline.
d937 1
a937 1
Fri Jun 16 13:20:38 1995  Mike Stump  <mrs@@cygnus.com>
d939 1
a939 2
	* decl.c (get_unique_name): New routine to name unnamed namespaces.
	(push_namespace): Use get_unique_name for naming unnamed namespaces.
d941 6
a946 1
Fri Jun 16 15:07:29 1995  Richard Kenner  (kenner@@vlsi1.ultra.nyu.edu)
d948 1
a948 1
	* Make-lang.in (DEMANGLER_PROG): Add LIBS.
d950 3
a952 1
Thu Jun 15 15:00:41 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d954 1
a954 1
	* decl.c (define_function): Don't set DECL_INTERFACE_KNOWN.
d956 1
a956 2
	* parse.y: Call cplus_decl_attributes with prefix_attributes where
	appropriate.
d958 2
a959 1
Wed Jun 14 19:24:49 1995  Mike Stump  <mrs@@cygnus.com>
d961 2
a962 4
	* search.c (get_vbase): New routine to switch hierarchies from the
	CLASSTYPE_VBASECLASSES to the normal one.
	(expand_indirect_vtbls_init): Use get_vbase to figure out how we
	want to convert to a vbase pointer.
d964 1
a964 1
Mon Jun 12 17:50:30 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d966 3
a968 4
	* pt.c (instantiate_class_template): Add the new instantiation to
	template_classes.
	(do_pending_expansions): Call instantiate_member_templates on all of
	the classes in template_classes.
d970 1
a970 1
Mon Jun 12 12:36:59 1995  Mike Stump  <mrs@@cygnus.com>
d972 1
a972 4
	* decl.c (complete_array_type): Fill in the TYPE_DOMAIN of our
	TYPE_MAIN_VARIANT if it is not filled in.
	* init.c (build_delete): If the TYPE_DOMAIN is not set, give an
	error instead of core dumping.
d974 1
a974 1
Mon Jun 12 10:41:40 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d976 1
a976 3
	* call.c (can_convert): Also check for distance > 0.
	(can_convert_arg): Ditto.
	(user_harshness): Ditto.
d978 9
a986 1
Fri Jun  9 19:17:21 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d988 1
a988 2
	* g++.c (MATH_LIBRARY): Provide default.
	(main): Always link with the math library if we link with libstdc++.
d990 2
a991 3
	* decl.c (start_function): Complain about redefinition of a function
	even when the pending_inline version is compiled after the other
	version.
d993 1
a993 1
Thu Jun  8 15:44:38 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d995 1
a995 2
	* gc.c (build_dynamic_cast): Build up a reference to a parameter of
	aggregate type.
d997 2
a998 1
Wed Jun  7 20:00:31 1995  Mike Stump  <mrs@@cygnus.com>
d1000 1
a1000 3
	* *.[chy]: Change all callers of finish_decl to cp_finish_decl.
	* decl.c (finish_decl): New routine to handle call backs from the
	mid end (declare_hidden_char_array).
d1002 2
a1003 1
Wed Jun  7 19:02:50 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1005 2
a1006 8
	* decl.c (start_function): Handle setting C_C_D here.
	(set_C_C_D): Removed.
	(struct saved_scope): Remove class_decl.
	(push_to_top_level): Don't save current_class_decl.
	(pop_from_top_level): Don't restore current_class_decl or C_C_D.
	(struct cp_function): Add C_C_D.
	(push_cp_function_context): Save C_C_D.
	(pop_cp_function_context): Restore C_C_D.
d1008 2
a1009 1
Wed Jun  7 15:31:57 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d1011 1
a1011 2
	* init.c (build_vec_delete): Resolve an offset ref before we try to
	use it.
d1013 1
a1013 1
Wed Jun  7 14:19:32 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1015 1
a1015 3
	* typeck.c (build_modify_expr): If the class lacks a constructor or
	assignment operator, return error_mark_node.
	(common_type): Use build_cplus_array_type.
d1017 3
a1019 1
Tue Jun  6 09:41:27 1995  Mike Stump  <mrs@@cygnus.com>
d1021 2
a1022 5
	* class.c (dont_allow_type_definitions): New variable set when types
	cannot be defined.
	(finish_struct): Use it.
	* cp-tree.h (dont_allow_type_definitions): Define it.
	* parse.y (primary, handler_seq): Set it.
d1024 1
a1024 1
Mon Jun  5 18:49:38 1995  Mike Stump  <mrs@@cygnus.com>
d1026 4
a1029 3
	* method.c (build_opfncall): Use DECL_CHAIN, not TREE_CHAIN for
	results from lookup_fnfields.  Always give warning/error on bad
	code.
d1031 2
a1032 1
Mon Jun  5 11:39:37 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d1034 2
a1035 2
	* init.c (member_init_ok_or_else): Don't allow initialization of
	an ancestor's member from within a constructor.
d1037 1
a1037 1
Mon Jun  5 11:20:34 1995  Gerald Baumgartner  (gb@@alexander.cs.purdue.edu)
d1039 2
a1040 3
	* sig.c (build_signature_table_constructor): Use DECL_CONTEXT
	instead of DECL_CLASS_CONTEXT for calculating the vfield offset so
	abstract virtual functions are handled correctly.
d1042 3
a1044 5
	* sig.c (build_signature_table_constructor): Store the correct
	delta in signature table entries.  It does not yet work for
	classes with virtual base classes as implementations of signatures.
	(build_signature_method_call): Add the delta to the object_ptr
	before generating the function call.
d1046 1
a1046 4
	* call.c (build_method_call): Make instance_ptr the signature
	pointer itself instead of dereferencing the optr.
	* sig.c (build_signature_method_call): Dereference the optr for the
	direct and virtual calls.
d1048 1
a1048 4
	* sig.c (build_signature_table_constructor): Make the tag for
	default implementations -1 instead of 2.
	(build_signature_method_call): Change the generated conditional
	expression correspondingly.
d1050 1
a1050 6
	* sig.c (build_signature_pointer_constructor): Deleted the sorry
	message that said we can't handle multiple inheritance for
	implementations of signatures
	(build_signature_method_call): Use the offset from the sigtable
	entry instead of the vptr field from the signature pointer for
	building a virtual function call.
d1052 2
a1053 2
	* class.c (build_vfn_ref): Deleted signature specific code, we don't
	call this function anymore from build_signature_method_call.
d1055 1
a1055 8
	* cp-tree.h (SIGNATURE_VPTR_NAME): Deleted.  We use the right vptr
	field in the object now instead of in the signature pointer/ref. 
	(build_vptr_ref): Deleted extern declaration.
	* sig.c (build_vptr_ref): Deleted.
	(build_signature_pointer_or_reference_type): Deleted construction of
	the vptr field.
	(build_signature_pointer_constructor): Deleted initialization of/
	assignment to the vptr field.
d1057 1
a1057 2
	* sig.c (build_signature_table_constructor): Convert the signature
	table entry fields to their correct types.
d1059 1
a1059 2
	* sig.c (build_signature_table_constructor): Don't call digest_init
	for the fields of a sigtable entry, it's wasted time.
d1061 2
a1062 6
	* sig.c (build_signature_table_constructor): Correctly set the
	offset and index fields of a sigtable entry.  Build the constructor
	the way digest_init does, digest_init can't handle initializing an
	anonymous union inside a struct.
	(build_signature_method_call): Use the index field instead of the
	delta field to get the vtable index.
d1064 1
a1064 2
	* decl.c (init_decl_processing): Fix number of fields for building
	sigtable_entry_type.
d1066 4
a1069 13
	* cp-tree.h (tag_identifier, offset_identifier): Added extern decls.
	(SIGTABLE_CODE_NAME): Renamed to SIGTABLE_TAG_NAME.
	(SIGTABLE_PFN_NAME): Deleted, we'll use VTABLE_PFN_NAME instead.
	* decl.c (tag_identifier, offset_identifier): New variables to
	hold the identifiers for the sigtable fields tag and offset.
	(init_decl_processing): Initialize these variables.
	(init_decl_processing): Use these variables to build the
	sigtable_entry_type structure.  Rename the code and offset fields
	to tag and delta, respectively; add offset and index fields. Changed
	types of fields from short_integer_type_node to delta_type_node.
	* sig.c (build_signature_table_constructor): Rename code and offset
	to tag and delta, respectively.
	(build_signature_method_call): Ditto.  Use above variables.
d1071 1
a1071 1
Fri Jun  2 11:05:58 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1073 4
a1076 5
	* decl.c (set_C_C_D): New function.  suspend_momentary before
	building C_C_D.
	(pop_from_top_level): Call it.
	(start_function): Ditto.
	(pop_cp_function_context): Ditto.
d1078 1
a1078 2
	* class.c, cp-tree.h, decl.c, decl2.c, parse.y: Lose all references
	to current_vtable_decl, CLASSTYPE_INST_VAR and CLASSTYPE_VTBL_PTR.
d1080 1
a1080 4
	* decl.c (push_cp_function_context): Save current_class_decl.
	(pop_cp_function_context): Restore current_class_decl and set C_C_D.
	(pop_from_top_level): Don't use CLASSTYPE_INST_VAR to set C_C_D.
	(start_function): Ditto.
d1082 1
a1082 2
	* class.c (popclass): Don't mess with current_class_decl,
	current_vtable_decl, or C_C_D.
d1084 3
a1086 1
Mon May 29 12:45:10 1995  Paul Eggert  <eggert@@twinsun.com>
d1088 1
a1088 1
	* Make-lang.in (c++.mostlyclean): Remove $(DEMANGLER_PROG).
d1090 1
a1090 1
Thu Jun  1 17:03:51 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1092 1
a1092 2
	* decl.c (lookup_name_real): Don't try to look anything up in an
	erroneous object.
d1094 2
a1095 1
Fri Jun  2 10:30:14 1995  Mike Stump  <mrs@@cygnus.com>
d1097 3
a1099 11
	* method.c (build_overload_int): New routine.  Break out
	functionality from build_overload_value so we can reuse it.
	(build_overload_value): Handle pointer to member functions as value
	parameters for templates.
	(build_overload_identifier): Since template parameters are shared
	among all instantiations, we have to substitute in the real types
	in TREE_TYPE (parm).
	pt.c (coerce_template_parms): Ditto.
	(push_template_decls): Ditto.
	(grok_template_type): Deleted as template parameters are shared
	among all instantiations.
d1101 1
a1101 1
Wed May 31 19:10:32 1995  Mike Stump  <mrs@@cygnus.com>
d1103 1
a1103 2
	* decl.c (grokdeclarator): Always give errors on constant overflow
	for array indices.
d1105 1
a1105 1
Wed May 31 11:39:43 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1107 1
a1107 4
	* typeck.c (commonparms): Don't abort if simple_cst_equal returns < 0.
	(build_c_cast): Don't tack on a NON_LVALUE_EXPR when casting to
	reference type.
	(build_indirect_ref): Fix check for *&.
d1109 1
a1109 1
Wed May 24 15:55:18 1995  Richard Kenner  (kenner@@vlsi1.ultra.nyu.edu)
d1111 3
a1113 3
	* decl.c (duplicate_decls): Check simple_cst_equal result against 0.
	* decl2.c (finish_anon_union): Likewise.
	* method.c (largest_union_member): Likewise.
d1115 1
a1115 1
Wed May 24 14:41:11 1995  H.J. Lu  (hjl@@nynexst.com)
d1117 8
a1124 1
	* Make-lang.in (cxxmain.o): Replace single quotes with backslashes.
d1126 1
a1126 1
Mon May 22 17:38:48 1995  Richard Kenner  (kenner@@vlsi1.ultra.nyu.edu)
d1128 2
a1129 6
	* Make-lang.in (g++, g++-cross, cc1plus, DEMANGLER_PROG):
	Use $@@ instead of output name so works even if have .exe.
	(cxxmain.o): Use cp if ln -s fails.
	(c++.install-man): Use $(exeext) in executable names.
	(c++.mostlyclean, stage[1-4]): Use $(objext) in object file names.
	* Makefile.in (../cc1plus): Use $(exeext) in name of executable.
d1131 1
a1131 1
Wed May 24 01:39:03 1995  Jason Merrill  <jason@@deneb.cygnus.com>
d1133 2
a1134 1
	* call.c (build_method_call): parms can be null, duh.
d1136 1
a1136 1
Tue May 23 01:32:09 1995  Jason Merrill  <jason@@deneb.cygnus.com>
d1138 1
a1138 1
	* call.c (build_method_call): If convert_arguments failed, just bail.
d1140 1
a1140 1
Fri May 19 10:31:11 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1142 2
a1143 1
	* cvt.c (convert_force): Pass LOOKUP_NORMAL to cp_convert.
d1145 1
a1145 1
	* tree.c (copy_to_permanent): Oops.
d1147 2
a1148 1
Fri May 19 10:01:07 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d1150 1
a1150 1
	* cp-tree.h (break_out_target_exprs): Add decl.
d1152 4
a1155 1
Thu May 18 13:02:30 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1157 1
a1157 2
	* decl.c (start_function): Move *all* interface handling stuff after
	the pushdecl.
d1159 1
a1159 5
	* tree.c (mapcar): Renamed from make_deep_copy and generalized.
	(perm_manip): Return t if permanent, otherwise 0.
	(copy_to_permanent): Use them.
	(bot_manip): Helper for break_out_target_exprs.
	(break_out_target_exprs): New function.  Uses mapcar.
d1161 2
a1162 1
	* typeck.c (convert_arguments): Use it.
d1164 5
a1168 2
	* method.c (hack_identifier): Use convert_from_reference to
	dereference a reference.
d1170 19
a1188 1
Wed May 17 17:54:54 1995  Mike Stump  <mrs@@cygnus.com>
d1190 1
a1190 2
	* call.c (convert_harshness): Move reference bashing before pointer
	to member bashing.
d1192 2
a1193 1
Wed May 17 16:57:53 1995  Mike Stump  <mrs@@cygnus.com>
d1195 1
a1195 12
	* cvt.c (convert_to_reference): Only complain, if complaints are
	wanted.
	* typeck.c (build_function_call_real): Ditto.  If LOOKUP_SPECULATIVELY
	is set and something won't work, return NULL_TREE.
	* cvt.c (cp_convert): Ditto.  Pass flags down to build_method_call.
	(convert): Pass LOOKUP_NORMAL to cp_convert.
	* typeck.c (convert_for_assignment): Ditto.
	(convert_force): Pass LOOKUP_COMPLAIN to cp_convert.
	(convert_arguments): Get out early if we get an error_mark_node.
	(convert_for_initialization): Use cp_convert instead of convert so
	that we can pass flags down.
	* cp-tree.h (LOOKUP_SPECULATIVELY): Added documentation.
d1197 2
a1198 1
Wed May 17 01:43:58 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1200 1
a1200 2
	* typeck2.c (store_init_value): Don't take the MAIN_VARIANT of the
	decl type.
d1202 2
a1203 3
	* class.c (finish_struct): Don't complain about a class with no
	user-defined constructors but with a member that has no default
	constructor, as this is OK for aggregates.
d1205 1
a1205 2
	* expr.c (cplus_expand_expr, NEW_EXPR): If this is an explicit
	constructor call, mark slot addressable.
d1207 2
a1208 1
Tue May 16 18:37:51 1995  Douglas Rupp  (drupp@@cs.washington.edu)
d1210 2
a1211 1
	* g++.c: Changed WINNT to _WIN32.
d1213 2
a1214 1
Tue May 16 12:40:16 1995  Jason Merrill  <jason@@lisa.cygnus.com>
d1216 1
a1216 1
	* lex.c (handle_sysv_pragma): Don't use token_buffer.
d1218 5
a1222 1
Tue May 16 12:05:26 1995  Mike Stump  <mrs@@cygnus.com>
d1224 1
a1224 25
	* call.c (resolve_scope_to_name): Add initial semantic support for
	namespaces.
	* class.c (finish_struct): Ditto.
	* cp-tree.h (NAMESPACE_LEVEL): Ditto.
	* cvt.c (build_up_reference, convert_to_reference): Ditto. 
	* decl.c (binding_level::namespace_p, suspend_binding_level): Ditto.
	(resume_binding_level, toplevel_bindings_p): Ditto
	(namespace_bindings_p, declare_namespace_level): Ditto.
	(resume_level, push_namespace, pop_namespace): Ditto.
	(pop_everything, pushtag, duplicate_decls, pushdecl): Ditto.
	(implicitly_declare, lookup_namespace_name, lookup_name_real): Ditto.
	(start_decl, make_temporary_for_reference), Ditto.
	(obscure_complex_init, finish_decl, expand_static_init): Ditto.
	(grokvardecl, grokdeclarator, parmlist_is_exprlist): Ditto.
	(store_parm_decls, hack_incomplete_structures): Ditto.
	* decl2.c (get_temp_name, finish_anon_union, current_namespace): Ditto.
	(push_namespace, pop_namespace, do_namespace_alias): Ditto.
	(do_toplevel_using_decl, do_class_using_decl): Ditto.
	* error.c (dump_decl): Ditto.
	* init.c (build_member_call, build_offset_ref): Ditto.
	* lex.c (identifier_type): Ditto.
	* parse.y (lang_extdef, using_decl, extdef, component_decl_1): Ditto.
	(nested_name_specifier_1): Ditto.
	* spew.c (yylex): Ditto.
	* tree.def (NAMESPACE_DECL): Ditto.
d1226 1
a1226 1
Tue May 16 11:55:35 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1228 1
a1228 2
	* decl.c (push_overloaded_decl): Return the new decl even if it
	can't be pushed.
d1230 2
a1231 1
Tue May 16 11:00:37 1995  Jason Merrill  <jason@@lisa.cygnus.com>
d1233 2
a1234 4
	* typeck.c (decay_conversion): Split out from default_conversion.
	(default_conversion): Call it.
	(build_binary_op): Ditto.
	(build_binary_op_nodefault): Use decay_conversion for truth ops.
d1236 1
a1236 1
Mon May 15 12:47:56 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1238 1
a1238 11
	* decl.c (warn_extern_redeclared_static): This is a pedwarn.
	(duplicate_decls): Always use the old decl's linkage info.  Don't
	play with linkage of consts.
	(pushdecl): Don't play with linkage of consts.
	(redeclaration_error_message): Don't complain about an old public
	decl and a new non-public decl here.
	(grokvardecl): Handle linkage of consts here.
	(grokdeclarator): An 'extern inline' is public.  Pass constp to
	grokvardecl.
	(start_function): Wait until after the pushdecl to do some linkage
	stuff.
d1240 1
a1240 4
	* decl2.c (import_export_vtable): Make duplicates weak rather than
	static if supported.
	(import_export_inline): Ditto.
	* pt.c (do_pending_expansions): Ditto.
d1242 2
a1243 2
	* class.c (build_vbase_path): flag_assume_nonnull_objects only
	affects reference conversion.
d1245 1
a1245 3
	* init.c (emit_base_init): Build up an RTL_EXPR and add it to
	rtl_expr_chain.
	* decl.c, decl2.c: s/base_init_insns/base_init_expr/.
d1247 1
a1247 1
Tue May 16 07:06:28 1995  Paul Eggert  <eggert@@twinsun.com>
d1249 1
a1249 1
	* method.c (numeric_output_need_bar): Renamed from misspelling.
d1251 2
a1252 1
	* typeck.c (build_ptrmemfunc): Fix misspellings in messages.
d1254 1
a1254 1
Sun May 14 10:26:22 1995  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>
d1256 1
a1256 1
	* lang-options.h, lang-specs.h: New files.
d1258 4
a1261 1
Thu May 11 00:31:48 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1263 1
a1263 2
	* typeck.c (default_conversion): Don't check for BLKmode before
	pulling out the decl_constant_value.
d1265 2
a1266 1
	* decl.c (start_function): Clear named_labels and shadowed_labels.
d1268 2
a1269 1
	* typeck.c (build_function_call_real): Also synthesize methods here.
d1271 1
a1271 1
Wed May 10 00:55:59 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1273 5
a1277 2
	* decl2.c (finish_file): Synthesize exported methods before the
	reconsider loop.
d1279 1
a1279 1
	* parse.y: Move declaration of flag_new_for_scope to file scope.
d1281 2
a1282 1
Tue May  9 19:10:33 1995  Mike Stump  <mrs@@cygnus.com>
d1284 1
a1284 4
	* decl2.c: Add flag_new_for_scope for new -ffor-scope flag.
	* parse.y (FOR): Conditionalize the pushing and poping of scope for
	the for-init-statement upon the new flag_new_for_scope.
	* parse.y (try_block): Simplify and use compstmt.
d1286 2
a1287 1
Mon May  8 12:41:52 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1289 1
a1289 1
	* decl.c (define_function): Mark function decl artificial.
d1291 2
a1292 1
Sun May  7 00:51:28 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1294 1
a1294 1
	* parse.y (simple_stmt, FOR): Put back push/pop for condition scope.
d1296 2
a1297 2
	* decl2.c (grokclassfn): DECLs don't have cv-qualified types.
	* tree.c (build_cplus_method_type): Ditto.
d1299 1
a1299 1
	* cp-tree.h (SET_DECL_ARTIFICIAL): Just set DECL_ARTIFICIAL to 1.
d1301 1
a1301 4
	* typeck.c (build_function_call_real): If convert_arguments failed,
	just bail.
	(convert_arguments): If one of the arguments is error_mark_node,
	just bail.
d1303 1
a1303 1
Sat May  6 02:39:41 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1305 2
a1306 2
	* decl.c (duplicate_decls): Don't check DECL_NOT_REALLY_EXTERN for
	decls that don't include it.
d1308 1
a1308 1
Fri May  5 14:23:30 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1310 4
a1313 2
	* decl.c (duplicate_decls): Decls that have DECL_INTERFACE_KNOWN or
	DECL_NOT_REALLY_EXTERN set aren't extern decls.
d1315 3
a1317 3
	* typeck.c (build_indirect_ref): Don't call default_conversion for a
	parameter of reference_type.
	* cvt.c (convert_from_reference): Just use build_indirect_ref.
d1319 1
a1319 2
	* pt.c (do_type_instantiation): Only instantiate member functions
	that actually come from templates.
d1321 2
a1322 1
Fri May  5 09:46:05 1995  Mike Stump  <mrs@@cygnus.com>
d1324 1
a1324 5
	* parse.y: Generalized cleanup of poplevels, and compound statements
	and compound statements in try blocks.  Rewritten `for' rule so that
	the scope of variables declared in the for clause is shortened to
	span just to the end of the statement, instead of the whole
	containing block.
d1326 2
a1327 1
Fri May  5 00:37:14 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1329 2
a1330 1
	* call.c (convert_harshness): Handle pointers to members better.
d1332 1
a1332 1
Thu May  4 16:00:26 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1334 1
a1334 2
	* decl2.c (delete_sanity): Do access control here.
	* init.c (build_delete): Instead of here.
d1336 2
a1337 1
	* Make-lang.in: Build c++filt.
d1339 1
a1339 1
Wed May  3 02:59:53 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1341 1
a1341 2
	* decl2.c (cplus_decl_attributes): If we just modified a TYPE_DECL,
	update our IDENTIFIER_TYPE_VALUE.
d1343 2
a1344 1
Fri Apr 28 07:58:41 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1346 1
a1346 2
	* lex.c (cons_up_default_function): Fix linkage of #pragma
	implemented functions.
d1348 1
a1348 1
Thu Apr 27 16:56:24 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1350 2
a1351 2
	* method.c (build_overload_name): Simplify and fix repeated type
	folding.
d1353 1
a1353 2
	* decl.c (grokdeclarator): Prohibit pointers to void or reference
	members.
d1355 3
a1357 1
Thu Apr 27 09:49:07 1995  Mike Stump  <mrs@@cygnus.com>
d1359 1
a1359 2
	* typeck2.c (process_init_constructor): Make sure initializers are
	fully digested.
d1361 9
a1369 1
Thu Apr 27 01:11:55 1995  Jason Merrill  <jason@@python.cygnus.com>
d1371 1
a1371 1
	* lex.c (cons_up_default_function): Always defer synthesis.
d1373 3
a1375 1
Thu Apr 27 00:20:37 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1377 1
a1377 2
	* decl2.c (mark_inline_for_output): Don't play with pending_inline
	stuff.
d1379 4
a1382 1
Wed Apr 26 17:48:24 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1384 1
a1384 3
	* call.c (user_harshness): New function; like build_type_conversion,
	but doesn't actually build anything.
	(compute_conversion_costs): Use it instead of build_type_conversion.
d1386 1
a1386 1
Wed Apr 26 17:11:25 1995  Jason Merrill  <jason@@deneb.cygnus.com>
d1388 1
a1388 2
	* typeck.c (build_function_call_real): Improve error message for
	calling a non-function.
d1390 2
a1391 1
	* method.c (hack_identifier): Lose check for calling a data member.
d1393 1
a1393 1
Wed Apr 26 16:59:13 1995  Mike Stump  <mrs@@cygnus.com>
d1395 3
a1397 2
	* typeck2.c (build_functional_cast): Remove very old cruft.
	Seems like good code is generated without it.
d1399 1
a1399 1
Wed Apr 26 00:47:16 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1401 2
a1402 2
	* method.c (do_build_assign_ref): Fix handling of anonymous unions.
	(do_build_copy_constructor): Ditto.
d1404 1
a1404 1
	* parse.y (simple_stmt, SWITCH): Call {push,pop}_switch.
d1406 2
a1407 3
	* decl.c (push_switch): New function.
	(pop_switch): Ditto.
	(define_case_label): Check for jumping over initialization.
d1409 1
a1409 3
	* call.c (build_method_call): Check for an inline function being
	called before its definition has been seen.
	* typeck.c (build_function_call_real): Ditto.
d1411 3
a1413 2
	* decl.c (duplicate_decls): Check for a function being redeclared
	inline after its address has been taken.
d1415 1
a1415 1
	* typeck.c (build_conditional_expr): Handle related class lvalues.
d1417 2
a1418 1
Tue Apr 25 13:20:45 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1420 1
a1420 1
	* pt.c (do_pending_expansions): Don't expand unused templates.
d1422 1
a1422 1
	* parse.y (component_decl): Accept a lone semicolon.
d1424 3
a1426 1
Tue Apr 25 00:25:56 1995  Jason Merrill  <jason@@rtl.cygnus.com>
d1428 10
a1437 2
	* call.c (build_method_call): Don't allow an RTL_EXPR to serve as the
	object parameter anymore.
d1439 1
a1439 1
	* expr.c (cplus_expand_expr): Don't create RTL_EXPRs with no insns.
d1441 2
a1442 1
Mon Apr 24 12:35:48 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1444 1
a1444 2
	* parse.y (simple_stmt, decl case): Clear prefix_attributes.
	(lang_extdef): Ditto.
d1446 3
a1448 5
	* parse.y (maybe_parmlist): New rule for use in declarators where
	this could either be a list of expressions or parameters.  Calls
	suspend_momentary before deciding which.
	(direct_after_type_declarator): Use it.
	(complex_direct_notype_declarator): Use it.
d1450 1
a1450 1
	* pt.c (tsubst): Propagate attributes const and noreturn.
d1452 64
a1515 2
	* typeck.c (build_modify_expr): If warn_synth, call build_opfncall
	before doing the default thing.
d1517 1
a1517 1
Thu Apr 27 21:49:36 1995  Doug Evans  <dje@@cygnus.com>
d1519 1
a1519 2
	* typeck.c (common_type): Call lookup_attribute instead of
	value_member.
d1521 2
a1522 1
Tue Apr 25 18:07:43 1995  Richard Kenner  (kenner@@vlsi1.ultra.nyu.edu)
d1524 1
a1524 1
	* Make-lang.in: Change "realclean" to "maintainer-clean".
d1526 1
a1526 1
Sun Apr 23 12:32:38 1995  Mike Stump  <mrs@@cygnus.com>
d1528 1
a1528 1
	* decl2.c (finish_file): Fix broken linked list handling.
d1530 6
a1535 1
Fri Apr 21 18:08:43 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1537 1
a1537 3
	* class.c (finish_base_struct): Don't set TYPE_HAS_COMPLEX_*_REF
	as often.
	(finish_struct): Ditto.
d1539 1
a1539 1
	* various: Use TYPE_HAS_TRIVIAL_* instead of TYPE_HAS_COMPLEX_*.
d1541 1
a1541 2
	* cp-tree.h (TYPE_HAS_TRIVIAL_INIT_REF): New macro.
	(TYPE_HAS_TRIVIAL_ASSIGN_REF): New macro.
d1543 2
a1544 1
Fri Apr 21 15:52:22 1995  Jason Merrill  <jason@@python.cygnus.com>
d1546 1
a1546 2
	* typeck.c (c_expand_return): Only expand a returned TARGET_EXPR if
	it is of the same type as the return value.
d1548 1
a1548 1
Fri Apr 21 03:01:46 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1550 1
a1550 2
	* decl2.c (finish_file): Reconsider if synthesizing a method wrote
	out its assembly.
d1552 3
a1554 2
	* typeck.c (convert_for_initialization): Don't call a trivial copy
	constructor.
d1556 2
a1557 2
	* typeck2.c (store_init_value): Only abort if the type has a
	non-trivial copy constructor.
d1559 1
a1559 5
	* typeck.c (c_expand_return): If we're returning in a register and
	the return value is a TARGET_EXPR, expand it.  Only do
	expand_aggr_init if we're returning in memory.
	(expand_target_expr): Function to expand a TARGET_EXPR.
	(build_modify_expr): Use it.
d1561 1
a1561 1
	* tree.c (build_cplus_new): Layout the slot.
d1563 1
a1563 2
	* expr.c (cplus_expand_expr): Use expand_call to expand the call
	under a NEW_EXPR, so the target is not discarded.
d1565 5
a1569 1
Thu Apr 20 14:59:31 1995  Mike Stump  <mrs@@cygnus.com>
d1571 1
a1571 1
	* gc.c (build_dynamic_cast): Tighten error checking.
d1573 7
a1579 1
Thu Apr 20 11:23:54 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1581 12
a1592 3
	* expr.c (cplus_expand_expr): Only abort if the returned target is
	different from what we expected if the type has a non-trivial copy
	constructor.
d1594 2
a1595 2
	* decl2.c (cplus_decl_attributes): Attributes applied to a template
	really apply to the template's result.
d1597 4
a1600 2
	* tree.c (lvalue_p): Check IS_AGGR_TYPE instead of TREE_ADDRESSABLE
	to decide whether to consider a CALL_EXPR an lvalue.
d1602 3
a1604 2
	* class.c (finish_struct_bits): Only set TREE_ADDRESSABLE if the
	type has a non-trivial copy constructor.
d1606 1
a1606 2
	* decl.c (start_function): If interface_known, unset
	DECL_NOT_REALLY_EXTERN on the function.
d1608 1
a1608 1
Wed Apr 19 16:53:13 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1610 1
a1610 4
	* pt.c (do_function_instantiation): Handle explicit instantiation of
	member functions.
	(do_type_instantiation): Handle 'inline template class foo<int>',
	meaning just spit out the vtable.
d1612 1
a1612 2
	* lex.c (cons_up_default_function): Set DECL_NOT_REALLY_EXTERN on
	the consed functions.
d1614 1
a1614 1
	* decl2.c (import_export_inline): Set DECL_INTERFACE_KNOWN.
d1616 2
a1617 1
Wed Apr 19 16:28:17 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d1619 3
a1621 2
	* call.c, class.c, decl2.c, gc.c, init.c, parse.y, pt.c, search.c,
	typeck.c: Include output.h.
d1623 1
a1623 1
Wed Apr 19 14:57:21 1995  Gerald Baumgartner  (gb@@alexander.cs.purdue.edu)
d1625 2
a1626 2
	* call.c (build_method_call): Allow a signature member functions to
	be called from a default implementation.
d1628 8
a1635 1
Wed Apr 19 10:21:17 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1637 1
a1637 1
	* repo.c (finish_repo): Remember what directory we are in.
d1639 6
a1644 1
	* search.c (expand_upcast_fixups): Don't mess with abort_fndecl.
d1646 1
a1646 2
	* repo.c: Use obstacks instead of fixed-size buffers.  Don't spit
	out the second copy of the symbol name.  Don't remember COLLECT_GCC.
d1648 2
a1649 1
Wed Apr 19 02:32:40 1995  Mike Stump  <mrs@@cygnus.com>
d1651 1
a1651 12
	* search.c (virtual_context): New function to get the virtual
	context of a function.
	(expand_upcast_fixups): New function to generate runtime vtables.
	(fixup_virtual_upcast_offsets): Ditto.
	(expand_indirect_vtbls_init): Use fixup_virtual_upcast_offsets to
	ensure that the this offsets for upcasts from virtual bases into
	other virtual bases or non-virtual bases are correct at construction
	time and destruction time.
	* class.c (fixup_vtable_deltas): Modify to fixup all offsets in all
	vtables in all virtual bases, instead of just one vtable in each
	virtual base.
	(fixup_vtable_deltas1): Ditto.
d1653 1
a1653 1
Tue Apr 18 03:57:35 1995  Michael Meissner  (meissner@@cygnus.com)
d1655 1
a1655 1
	* Makefile.in (lex.o): Add dependency on c-pragma.h.
d1657 2
a1658 2
	* lex.c (handle_sysv_pragma): Use NULL_PTR and NULL_TREE as
	appropriate, instead of 0.
d1660 1
a1660 1
Mon Apr 17 12:28:42 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1662 5
a1666 7
	* decl.c (pushdecl): Use decls_match, not duplicate_decls, for
	comparing local and global decls.

Fri Apr 14 01:46:52 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>

	* typeck.c (convert_arguments): Only prohibit passing to ... of
	types with non-trivial copy constructors.
d1668 2
a1669 1
	* repo.c (repo_template_used): Don't try to mess with no id.
d1671 1
a1671 1
Fri Apr 14 23:32:50 1995  Per Bothner  <bothner@@rtl.cygnus.com>
d1673 2
a1674 1
	* decl.c (duplicate_decls):  Use cp_warning_at for redundant-decls.
d1676 1
a1676 1
Thu Apr 13 15:37:42 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d1678 1
a1678 2
	* cp-tree.h (current_tinst_level): Delete declaration, since it's
	static inside pt.c.
d1680 1
a1680 1
	* typeck.c (build_modify_expr): Catch incompatible array assignment.
d1682 2
a1683 2
	* parse.y (attribute_list, attrib): Rewrite actions to feed the
	right stuff to decl_attributes.
d1685 1
a1685 1
Thu Apr 13 11:24:10 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1687 2
a1688 2
	* search.c (dfs_debug_mark): Check for magic virtual like
	import_export_vtable.
d1690 5
a1694 2
	* typeck.c (build_binary_op_nodefault): Don't call cp_pedwarn with
	four args.
d1696 1
a1696 1
Wed Apr 12 12:02:57 1995  Jason Merrill  <jason@@deneb.cygnus.com>
d1698 2
a1699 2
	* decl2.c (finish_file): Move prevtable pass before needs_messing_up
	decision.
d1701 4
a1704 1
Tue Apr 11 11:20:27 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1706 3
a1708 2
	* decl.c (finish_decl): If we're writing out a static data member of
	a class, we want the debug info for that class.
d1710 2
a1711 1
	* gc.c (build_t_desc): Check linkage of a class properly.
d1713 2
a1714 4
	* class.c (finish_struct): Set the 'headof' offset for the main
	vtable properly.
	(prepare_fresh_vtable): Fix typeinfo pointer here.
	(modify_one_vtable): Instead of here.
d1716 2
a1717 1
Mon Apr 10 12:15:59 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1719 2
a1720 6
	* repo.c (repo_get_id): New function to return the interesting
	identifier for a repo entity.
	(repo_template_used): Use it.
	(repo_template_instantiated): Mark the id as chosen.
	(init_repo): Record whether or not the id was chosen.
	(finish_repo): Note if an id was newly chosen.
d1722 2
a1723 3
	* pt.c (do_function_instantiation): Call repo_template_instantiated.
	(do_type_instantiation): Ditto.  Don't diagnose multiple
	instantiation.
d1725 2
a1726 2
	* decl2.c (finish_file): Use DECL_NOT_REALLY_EXTERN when deciding
	whether or not to synthesize a method.
d1728 2
a1729 5
	Undo these changes:
	* class.c (finish_vtbls): build more vtables if flag_rtti is on.
	* class.c (modify_all_direct_vtables): ditto.
	* init.c (expand_direct_vtbls_init): expand more vtables if
	flag_rtti is on.
d1731 2
a1732 1
Sat Apr  8 17:45:41 1995  Mike Stump  <mrs@@cygnus.com>
d1734 2
a1735 2
	* gc.c (build_headof): Use ptrdiff_type_node instead of
	integer_type_node on pointer arithmetic.
d1737 2
a1738 1
Sat Apr  8 11:57:04 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1740 2
a1741 1
	* typeck.c (build_modify_expr): Undo previous change.
d1743 2
a1744 1
Thu Apr  6 01:23:50 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1746 3
a1748 1
	* Makefile.in (compiler): Remove ../cc1plus before rebuilding it.
d1750 3
a1752 2
	* repo.c (get_base_filename): Put the .rpo file in the directory
	with the object file, not the source.
d1754 2
a1755 1
	* typeck.c (build_conditional_expr): Handle pmf's better.
d1757 2
a1758 2
	* repo.c (finish_repo): Also use ASM_OUTPUT_LABELREF to print out
	the name of the symbol.
d1760 2
a1761 1
Wed Apr  5 15:24:12 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1763 2
a1764 3
	* repo.c (open_repo_file): Make repo filename DOS-compliant.
	(*): Also write a new repo file if some previously-used
	templates are no longer used.  Only remember the identifier.
d1766 11
a1776 2
	* lex.c (cons_up_default_function): If this function belongs to a
	template class, call repo_template_used for it.
d1778 2
a1779 3
	* repo.c (repo_template_used): Using a class means using its vtable,
	if any.
	(finish_repo): Ditto.
d1781 2
a1782 2
	* typeck.c (build_modify_expr): Only wrap TARGET_EXPRs in RTL_EXPRs
	if the type has a complex copy constructor.
d1784 1
a1784 2
	* decl2.c (lang_decode_option): -frepo implies
	-fno-implicit-templates.
d1786 12
a1797 1
	* decl.c (start_function): Clear current_{base,member}_init_list.
d1799 1
a1799 1
	* lex.c (init_lex): Also unset *_eq if ! flag_operator_names.
d1801 1
a1801 1
Tue Apr  4 16:11:08 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1803 1
a1803 3
	* decl.c (struct cp_function): Add {base,member}_init_list.
	(push_cp_function_context): Save current_{base,member}_init_list.
	(pop_cp_function_context): Restore them.
d1805 1
a1805 1
Mon Apr  3 16:55:08 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1807 2
a1808 1
	* repo.c (get_base_filename): Take filename parm, fix logic bug.
d1810 2
a1811 5
	* typeck.c (build_compound_expr): Do not warn about a compound expr
	in which the first expression has no side effects.
	(build_x_compound_expr): Warn here instead.
	(build_conditional_expr): Don't warn about a conditional expression
	between an enum and the type it promotes to.
d1813 1
a1813 2
	* init.c (build_new): Handle initialization of arrays of builtins
	properly.
d1815 5
a1819 1
Mon Apr  3 15:08:04 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d1821 1
a1821 2
	* repo.c: Include config.h to get definitions of bcopy and rindex
	on systems that don't have them (e.g., SVR4).
d1823 2
a1824 1
Mon Apr  3 14:41:55 1995  Mike Stump  <mrs@@cygnus.com>
d1826 1
a1826 3
	* decl2.c (finish_table): Pass NULL_TREE instead of init to
	finish_decl so that it won't try and do error checking on the
	initializer.
d1828 1
a1828 1
Mon Apr  3 10:45:50 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1830 1
a1830 5
	* repo.c (get_base_filename): Analyze COLLECT_GCC_OPTIONS to
	determine whether this compile used -c -o.
	(open_repo_file): Use get_base_filename.  Remove the extension.
	(finish_repo): Spit out the values of main_input_filename,
	COLLECT_GCC and COLLECT_GCC_OPTIONS.
d1832 1
a1832 1
	* parse.y (structsp): Add TYPENAME_KEYWORD complex_type_name.
d1834 3
a1836 1
Sun Apr  2 23:43:51 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1838 4
a1841 2
	* search.c (compute_access): Don't try to do access control on
	nested types.
d1843 1
a1843 1
Fri Mar 31 10:14:23 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1845 1
a1845 1
	* repo.c: New file to handle things repo.
d1847 1
a1847 5
	* pt.c (instantiate_template): Call repo_template_used if the
	definition is accessible.
	(mark_function_instantiated): Split out from
	do_function_instantiation.
	(mark_class_instantiated): Split out from do_type_instantiation.
d1849 7
a1855 1
	* parse.y (template_instantiate_once): Call repo_template_used.
d1857 1
a1857 1
	* lex.c (lang_init): Call init_repo.
d1859 2
a1860 2
	* decl2.c: Handle flag_use_repository.
	(finish_file): Call finish_repo.
d1862 1
a1862 2
	* decl.c (start_method): Call repo_template_used if this is a
	template method.
d1864 1
a1864 2
	* Makefile.in (CXX_OBJS): Add repo.o.
	(repo.o): Add dependencies.
d1866 2
a1867 1
	* Make-lang.in (CXX_SRCS): Add repo.c.
d1869 1
a1869 2
	* decl.c (start_function): If DECL_INTERFACE_KNOWN and
	DECL_NOT_REALLY_EXTERN are both set, unset DECL_EXTERNAL.
d1871 1
a1871 2
	* typeck.c (build_binary_op_nodefault): Identify the invalid operand
	types used.
d1873 1
a1873 1
	* decl.c (duplicate_decls): Propagate DECL_NOT_REALLY_EXTERN.
d1875 1
a1875 1
Thu Mar 30 17:54:42 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1877 1
a1877 6
	* typeck.c (build_binary_op_nodefault): Tidy up use of build_type
	and result_type.  When checking for comparison between signed
	and unsigned, use result_type rather than the (possibly shortened)
	type of op0.  Also, don't warn about equality comparison of a
	signed operand to an unsigned constant that fits in the signed
	type.
d1879 2
a1880 2
	* method.c (do_build_copy_constructor): Reverse
	current_base_init_list after we've built it up.
d1882 1
a1882 1
Thu Mar 30 14:35:18 1995  Mike Stump  <mrs@@cygnus.com>
d1884 2
a1885 2
	* except.c (build_throw): Never warn about the value of throw not
	being used.
d1887 1
a1887 1
Thu Mar 30 13:16:54 1995  Mike Stump  <mrs@@cygnus.com>
d1889 3
a1891 2
	* except.c (expand_start_catch_block): Check for bad catch parameter
	declarations.
d1893 1
a1893 1
Thu Mar 30 13:06:11 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1895 6
a1900 2
	* decl.c (finish_function): Only set DECL_NOT_REALLY_EXTERN if
	DECL_EXTERNAL is not already set.
d1902 1
a1902 1
Thu Mar 30 11:26:24 1995  Mike Stump  <mrs@@cygnus.com>
d1904 2
a1905 2
	* method.c (emit_thunk): Let poplevel know that the last level is
	for a function so it can create a BLOCK_NODE and set DECL_INITIAL.
d1907 4
a1910 1
Thu Mar 30 11:15:06 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1912 1
a1912 2
	* decl2.c (import_export_inline): Don't set DECL_NOT_REALLY_EXTERN
	here.
d1914 1
a1914 4
	* decl.c (grokdeclarator): OK, don't abort if we see a decl with
	METHOD_TYPE.
	(finish_function): Set DECL_EXTERNAL and DECL_NOT_REALLY_EXTERN on
	all deferred inlines.
d1916 1
a1916 1
Wed Mar 29 19:35:02 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1918 1
a1918 3
	* cp-tree.h (DECL_THIS_INLINE): New macro.
	(DECL_NOT_REALLY_EXTERN): New macro.
	(DECL_THIS_STATIC): New macro.
d1920 3
a1922 8
	* decl.c: Lose all references to current_extern_inline.  Break
	inline semantics into DECL_INLINE for actual inlining and
	DECL_THIS_INLINE for the linkage wierdness.  Use DECL_THIS_STATIC.
	* decl2.c: Use DECL_NOT_REALLY_EXTERN to indicate that we want to
	emit an inline here.  Associated changes.
	* lex.c: Ditto.
	* pt.c: Ditto.
	* typeck.c: Ditto.
d1924 1
a1924 3
	* call.c (build_method_call): Don't bother trying to handle inlines
	specially.
	* cvt.c (convert_to_aggr): Ditto.
d1926 1
a1926 2
	* pt.c (do_function_instantiation): Handle instantiation of
	public inlines, too.
d1928 1
a1928 1
Wed Mar 29 16:04:25 1995  Mike Stump  <mrs@@cygnus.com>
d1930 2
a1931 8
	* except.c (init_exception_processing): Change the interface for
	__throw_type_match and add decl for new rtti matching routine
	__throw_type_match_rtti.
	(build_eh_type): New routine to build a run time descriptor for the
	expression given. 
	(expand_start_catch_block): Update to use new calling convention for
	the matcher.
	(expand_throw): Update to use build_eh_type.
d1933 1
a1933 1
Mon Mar 27 07:14:33 1995  Warner Losh	<imp@@village.org>
d1935 4
a1938 4
	* g++.c: Removed __NetBSD__ from conditional.
	Declare strerror if HAVE_STRERROR is defined; otherwise
	declare sys_errlist and sys_nerr.
	(my_strerror): New function.
d1940 33
a1972 1
Tue Mar 28 14:16:35 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1974 1
a1974 1
	* search.c (get_binfo): Don't try to be so clever.
d1976 1
a1976 1
	* tree.c (copy_to_permanent): Also suspend_momentary().
d1978 1
a1978 2
	* cvt.c (cp_convert_to_pointer): Hand off to convert_fn_pointer even
	if the types are the same.
d1980 1
a1980 2
	* decl.c (start_function): Handle extern inlines more like C++ says
	we should.
d1982 2
a1983 2
	* init.c (build_member_call): Hand constructor calls off to
	build_functional_cast.
d1985 1
a1985 2
	* typeck2.c (build_functional_cast): Use DECL_NESTED_TYPENAME to get
	the name of the type.
d1987 3
a1989 1
Tue Mar 28 13:13:56 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d1991 1
a1991 2
	* decl.c (grokdeclarator): Check for the decl returned by
	grokfndecl to be null before using build_decl_attribute_variant.
d1993 1
a1993 1
Mon Mar 27 18:04:41 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d1995 1
a1995 2
	* init.c (build_new): Use build_pointer_type instead of
	TYPE_POINTER_TO.
d1997 1
a1997 1
Fri Mar 24 12:11:24 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d1999 1
a1999 2
	* typeck.c (build_conditional_expr): Handle pmfs.
	(convert_for_assignment): Fix pmf support.
d2001 1
a2001 3
	* cvt.c (convert_fn_ptr): Support !flag_vtable_thunks.
	(cp_convert_to_pointer): Handle pmfs.
	(cp_convert): Pass pmfs to cp_convert_to_pointer.
d2003 1
a2003 1
	* typeck.c (common_type): Handle inheritance for pmfs.
d2005 1
a2005 1
	* typeck2.c (build_m_component_ref): Do access control.
d2007 2
a2008 2
	* typeck.c (comp_target_types): Check for conversion to void *
	before checking trickier conversions.
d2010 2
a2011 1
	* decl.c (duplicate_decls): Propagate DECL_ABSTRACT_VIRTUAL_P.
d2013 1
a2013 2
	* pt.c (push_tinst_level): Complain if template instantiation depth
	is greater than max_tinst_depth.
d2015 2
a2016 2
	* typeck.c (common_type): Assume that we can call common_type to
	unify the target type of a pointer.
d2018 1
a2018 1
Thu Mar 23 00:48:44 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2020 2
a2021 3
	* decl2.c (finish_file): Don't synthesize methods at
	finish_vtable_prevardecl time.  Do synthesize methods that are not
	used, but are public and not external.
d2023 1
a2023 1
	* cvt.c (build_type_conversion): Only give an error if for_sure.
d2025 9
a2033 2
	* typeck.c (comp_target_types): Only support pointer conversions if
	nptrs > 0.
d2035 1
a2035 1
Wed Mar 22 19:30:15 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2037 1
a2037 2
	* init.c (build_new): Catch use of an initializer list where it
	shouldn't be.
d2039 2
a2040 1
Wed Mar 22 16:21:07 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2042 2
a2043 2
	* init.c (build_new): Wrap alloc_expr in an RTL_EXPR if nelts is
	non-constant.
d2045 3
a2047 1
	* decl2.c: temp_name_counter is now public.
d2049 2
a2050 3
	* decl.c (struct cp_function): Add temp_name_counter field.
	(push_cp_function_context): Save it.
	(pop_cp_function_context): Restore it.
d2052 4
a2055 3
	* typeck.c (common_type): Handle unifying function types, and unify
	unmatched things to void* with a compiler_error, rather than
	silently like before.
d2057 2
a2058 1
Wed Mar 22 15:10:34 1995  Mike Stump  <mrs@@cygnus.com>
d2060 1
a2060 4
	* decl2.c (finish_prevtable_vardecl, finish_vtable_vardecl): Revert
	Brendan's last change and fix latent problem that causes TD entries
	to not come out when the things that need them has yet to be
	expanded.
d2062 1
a2062 1
Wed Mar 22 15:12:00 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2064 1
a2064 2
	* typeck.c (build_binary_op_nodefault, comparison ops): Update type0
	and type1, since we might have changed op0 or op1.
d2066 7
a2072 1
Wed Mar 22 13:33:45 1995  Jason Merrill  <jason@@python.cygnus.com>
d2074 1
a2074 1
	* typeck.c (common_type): Don't mess up templates.
d2076 3
a2078 1
Wed Mar 22 04:56:00 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2080 1
a2080 6
	* typeck.c (common_type): Handle ptms properly.  Also handle 
	T* -> void*.
	(build_binary_op_nodefault): New variable build_type controls what
	type is given to the expression when it is created.  Set this to
	boolean_type_node for comparison ops instead of using result_type.
	(comp_target_types): Allow T * -> void *.
d2082 2
a2083 2
	* cvt.c (cp_convert_to_pointer): Do access control when converting
	ptms, too.
d2085 2
a2086 1
Tue Mar 21 17:25:06 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2088 1
a2088 2
	* parse.y (extern_lang_string): Catch use of linkage specs that
	aren't all naming the same language.
d2090 1
a2090 1
	* class.c (finish_struct): Delete accidental duplicate code.
d2092 1
a2092 1
Tue Mar 21 14:00:57 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2094 1
a2094 2
	* typeck.c (build_binary_op_nodefault): Disable pedwarns about
	comparing functions and incomplete types.
d2096 1
a2096 4
	* decl.c (finish_function): Only unset current_function_decl if
	!nested.
	(duplicate_decls): Last change went too far; we only want to stop
	checking for value/reference ambiguity.
d2098 1
a2098 1
Tue Mar 21 01:26:39 1995  Mike Stump  <mrs@@cygnus.com>
d2100 1
a2100 2
	* gc.c (build_generic_desc): Zap the DECL_SIZE so that we can lay it
	out fresh, as the new type may be larger.
d2102 2
a2103 1
Mon Mar 20 19:01:10 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2105 3
a2107 5
	* expr.c (extract_init): Try to expand the RTL for the
	initialization and figure out what it will look like so we can avoid
	run-time initialization.  Disabled for now.
	(extract_scalar_init): Helper for scalar initialization.
	(extract_aggr_init): Helper for aggregate initialization.
d2109 1
a2109 5
	* decl.c (duplicate_decls): Don't complain about ambiguous
	declarations.
	(obscure_complex_init): Now returns a tree.  Call extract_init if
	we're optimizing and this is a toplevel decl.
	(finish_decl): Update accordingly.
d2111 2
a2112 2
	* lex.c (check_newline): If we're just changing files (not pushing
	or popping), update input_file_stack->name.
d2114 1
a2114 1
Mon Mar 20 17:55:04 1995  Mike Stump  <mrs@@cygnus.com>
d2116 19
a2134 2
	* pt.c (type_unification): Only TEMPLATE_DECLs are handled right now
	in the transitive unification code.
d2136 1
a2136 1
Mon Mar 20 16:07:50 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2138 4
a2141 3
	* decl.c (shadow_tag): Don't allow inline, virtual, or explicit on
	non-functions.
	(grokdeclarator): Don't allow friends to be defined in local classes.
d2143 4
a2146 1
Sat Mar 18 04:03:33 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2148 2
a2149 3
	* decl2.c (finish_prevtable_vardecl): Use DECL_DECLARED_STATIC
	rather than DECL_SAVED_INSNS to decide whether or not this method
	was declared inline.
d2151 1
a2151 2
	* method.c (synthesize_method): Turn off DECL_INLINE if
	function_cannot_inline_p thinks we're too large.
d2153 2
a2154 3
	* typeck.c (build_indirect_ref): Use build_expr_type_conversion.

Fri Mar 17 17:47:36 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2156 1
a2156 1
	* class.c (instantiate_type): Handle pmfs.
d2158 1
a2158 2
	* typeck.c (convert_for_assignment): Check types when assigning one
	pmf to another.
d2160 2
a2161 2
	* decl.c (define_label): Fix logic for printing out the name of the
	label in an error message.
d2163 1
a2163 1
	* error.c (dump_expr): Support ARRAY_REF.
d2165 3
a2167 1
Fri Mar 17 17:43:02 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2169 1
a2169 2
	* decl2.c (finish_vtable_vardecl): Call build_t_desc here.
	(finish_prevtable_vardecl): Instead of here.
d2171 4
a2174 1
Fri Mar 17 14:40:45 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2176 1
a2176 3
	* decl.c (expand_static_init): Also use expand_aggr_init if the
	initializer is a TREE_LIST.	
	(grokdeclarator): Only pedwarn about extra qualification if -pedantic.
d2178 2
a2179 1
	* pt.c (unify): Fix unification of return type.
d2181 1
a2181 3
	* expr.c (fixup_result_decl): Use store_expr, rather than
	emit_move_insn, to move the return value into the place where
	callers will expect it.
d2183 2
a2184 1
Thu Mar 16 22:05:25 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2186 1
a2186 2
	* init.c (build_offset_ref): Call assmble_external on functions.
	* typeck.c (build_component_ref): Ditto.
d2188 1
a2188 1
Thu Mar 16 20:28:16 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2190 1
a2190 5
	* decl.c (struct saved_scope): Add members base_init_list and
	member_init_list.
	(push_to_top_level): Save current_base_init_list and
	current_member_init_list to them.
	(pop_from_top_level): Put it back.
d2192 1
a2192 1
Thu Mar 16 19:21:14 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2194 1
a2194 1
	* pt.c (instantiate_template): Call assemble_external.	
d2196 1
a2196 1
Thu Mar 16 18:07:54 1995  Brendan Kehoe  (brendan@@phydeaux.cygnus.com)
d2198 1
a2198 5
	* class.c: Include rtl.h, to get NULL_RTX.
	(finish_struct): Also zero out DECL_SAVED_INSNS, to avoid problems
	on hosts with different sizes for each part of the union.
	* tree.c: Also include rtl.h.
	(layout_basetypes): Same change for DECL_SAVED_INSNS.
d2200 3
a2202 1
Thu Mar 16 13:57:36 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2204 1
a2204 1
	* pt.c (unify): Fix array domain unification for 64-bit targets.
d2206 1
a2206 4
	* decl2.c (finish_file): Push bizarre type decl before walking the
	vtables the first time.
	(walk_vtables): OK, don't set prev to vars if the vardecl_fn messed
	with TREE_CHAIN (prev).
d2208 1
a2208 2
	* init.c (emit_base_init): Use convert_pointer_to_real instead of
	convert_pointer_to when converting to a direct base.
d2210 1
a2210 1
Wed Mar 15 20:26:29 1995  Mike Stump  <mrs@@cygnus.com>
d2212 1
a2212 1
	* pt.c (type_unification): Handle transitive unification better.
d2214 3
a2216 1
Wed Mar 15 13:56:16 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2218 2
a2219 2
	* decl2.c (walk_vtables): Always set prev to vars.
	(mark_vtable_entries): Call assemble_external on the vtable entries.
d2221 2
a2222 2
	* class.c (finish_struct): Set the vtable's size to NULL_TREE before
	calling layout_decl, so that it gets updated properly.
d2224 2
a2225 7
	Finally re-enable dynamic synthesis.  This time it works.
	* method.c (synthesize_method): Pass decl_function_context (fndecl)
	to {push,pop}_cp_function_context.
	* decl.c (push_cp_function_context): Now takes a tree argument.
	(pop_cp_function_context): Ditto.
	* call.c (build_method_call): Enable synthesis.
	* lex.c (cons_up_default_function): Ditto.
d2227 1
a2227 1
Tue Mar 14 19:14:19 1995  Doug Evans  <dje@@chestnut.cygnus.com>
d2229 2
a2230 19
	* parse.y (setattrs): Chain onto prefix_attributes rather than
	setting it.

Wed Mar 15 13:00:00 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* decl.c (pushdecl): Check if the type of the VAR_DECL is an
	error_mark_node before trying to read TYPE_LANG_SPECIFIC. 

Mon Mar 13 21:00:28 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* decl.c (grokdeclarator, case ARRAY_REF): Wrap the exp with fold,
	and convert the size and integer_one_node to the index type.

Mon Mar 13 08:01:02 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>

	* typeck.c (get_member_function_from_ptrfunc): Save the instance
	argument, and tack it onto the front of the COND_EXPR to make the
	semantics come out right.  Grab the instance argument from
	'*instance_ptrptr', rather than having it passed in separately.
d2232 1
a2232 3
	* various: Change various consed-up comparison operations to have
	boolean type.  Remove the instance argument in calls to
	get_member_function_from_ptrfunc.
d2234 3
a2236 1
	* error.c (dump_expr): Dump true and false as "true" and "false".
d2238 2
a2239 2
	* decl2.c (finish_file): Also set DECL_STATIC_FUNCTION_P on the
	global init function.
d2241 1
a2241 2
	* decl.c (finish_function): Only set DECL_EXTERNAL here if the
	inline function is public.
d2243 1
a2243 1
Sat Mar 11 00:58:03 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2245 2
a2246 2
	* init.c (is_friend): Be more careful about checking
	DECL_CLASS_CONTEXT on non-member functions.
d2248 1
a2248 7
	* decl2.c (finish_vtable_vardecl): Don't bother calling
	assemble_external here.
	(prune_vtable_vardecl): New function that just splices out the
	vtable decl from the top-level decls.
	(import_export_inline): Unset DECL_EXTERNAL at first.
	(finish_file): Don't bother calling assemble_external here.  Do
	splice out all of the vtables.
d2250 2
a2251 1
Fri Mar 10 14:42:29 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2253 1
a2253 2
	* decl.c (finish_function): If we're not emitting the function yet,
	call assemble_external for it.
d2255 1
a2255 7
	* decl2.c (finish_prevtable_vardecl): Don't call mark_vtable_entries
	here.
	(finish_vtable_vardecl): Don't do the linkage deduction thing here.
	Also don't splice out the current vtable if it is unused.
	(finish_file): Move the second walk_vtables and the synthesis check
	inside the 'reconsider' loop.  Move thunk emission after the
	'reconsider' loop.
d2257 6
a2262 1
Thu Mar  9 16:28:16 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2264 1
a2264 3
	* pt.c (tsubst): Don't bother calling cp_build_type_variant, since it
	was passing bogus values for readonly and volatile from the original
	template decl, not the resultant type of the tsubst call.
d2266 2
a2267 2
	* class.c (duplicate_tag_error): Use cp_error_at to point out the
	previous definition of the tag.
d2269 1
a2269 1
Thu Mar  9 10:46:17 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2271 1
a2271 4
	* decl.c (start_function): Clear base_init_insns and protect_list.
	(struct cp_function): Add base_init_insns field.
	(push_cp_function_context): Also save base_init_insns.
	(pop_cp_function_context): Also restore base_init_insns.
d2273 2
a2274 1
Wed Mar  8 13:31:44 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2276 1
a2276 3
	* init.c (member_init_ok_or_else): Check for initializing a static
	member here.
	(emit_base_init): Instead of here.
d2278 1
a2278 1
Tue Mar  7 16:03:26 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2280 1
a2280 2
	* call.c (build_method_call): Disable synthesis as needed.
	* lex.c (cons_up_default_function): Ditto.
d2282 9
a2290 1
Tue Mar  7 10:14:29 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2292 1
a2292 9
	* parse.y: New rules to allow attributes in a prefix position.
	(prefix_attributes): New variable.  Pass it into cplus_decl_attributes.
	(setattr): New rule.
	(reserved_declspecs, declmods): Catch attributes here.
	* decl2.c (cplus_decl_attributes): Add PREFIX_ATTRIBUTES argument.
	* decl.c (duplicate_decls): Pass DECL_MACHINE_ATTRIBUTES to
	descendent typedef.
	(grokdeclarator): Added code to support machine attributes.
	* Makefile.in (stamp-parse): Expect 5 shift/reduce failures.
d2294 2
a2295 1
Mon Mar  6 15:07:02 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2297 1
a2297 2
	* call.c (build_method_call): Don't synthesize methods outside of a
	function.
d2299 2
a2300 16
	Make base initialization more re-entrant so that synthesis on the
	fly will work (and, eventually, template instantation on the fly).
	* init.c (sort_member_init): Don't bother with members that can't be
	initialized.  Reorganize a bit.  Don't initialize base members here.
	(sort_base_init): New function, like sort_member_init, but for base
	classes.  Steals some code from emit_base_init.
	(emit_base_init): Simplify.  Call sort_{member,base}_init before
	doing any initialization, so we don't have to save
	current_{member,base}_init_list in push_cp_function_context.
	(expand_aggr_vbase_init_1): Adjust for sort_base_init.
	(expand_aggr_vbase_init): Simplify.
	* decl.c (struct cp_function): Add protect_list field.
	(push_cp_function_context): Also save protect_list.
	(pop_cp_function_context): Also restore protect_list.
	* call.c (build_method_call): Enable synthesis at point of call.
	* lex.c (cons_up_default_function): Ditto.
d2302 1
a2302 1
	* parse.y: Turn -ansi checks back into -pedantic checks.
d2304 1
a2304 1
	* init.c (build_new): Fix -fcheck-new for array new.
d2306 1
a2306 1
Sat Mar  4 15:55:42 1995  Fergus Henderson  <fjh@@cs.mu.oz.au>
d2308 2
a2309 2
	* typeck.c (build_compound_expr): warn if left-hand operand of
	comma expression has no side-effects.
d2311 1
a2311 1
Fri Mar  3 15:16:45 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2313 4
a2316 2
	* parse.y (primary): Change 'object qualified_id *' rules to 'object
	overqualified_id *'.
d2318 1
a2318 1
Fri Mar  3 12:48:17 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2320 1
a2320 2
	* parse.y (unary_expr): Catch doing sizeof an overloaded function.
	Make the error look the same as the one we issue in c_sizeof.
d2322 1
a2322 2
	* typeck.c (build_binary_op_nodefault): Give an error for trying
	to compare a pointer-to-member to `void *'.
d2324 3
a2326 1
Fri Mar  3 11:28:50 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2328 1
a2328 3
	* typeck.c (build_unary_op): Handle bool increment with smoke and
	mirrors here, rather than in expand_increment where it belongs,
	because Kenner doesn't agree with me.
d2330 3
a2332 1
Fri Mar  3 00:08:10 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2334 1
a2334 2
	* decl.c (grokparms): Catch a PARM_DECL being used for a default
	argument as well.
d2336 1
a2336 1
Thu Mar  2 20:05:54 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2338 1
a2338 1
	* init.c (build_new): Don't allow new on a function type.
d2340 2
a2341 2
	* parse.y (primary): Avoid a crash when seeing if the arg is of
	the same type as that given for the typespec in an explicit dtor call.
d2343 1
a2343 1
Thu Mar  2 00:49:38 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2345 6
a2350 2
	* decl.c (finish_function): Change test for calling
	mark_inline_for_output.
d2352 1
a2352 1
Wed Mar  1 11:23:46 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2354 2
a2355 2
	* typeck.c (build_modify_expr): Complain if
	build_default_binary_type_conversion fails.
d2357 1
a2357 2
	* init.c (expand_default_init): Handle arguments of unknown type
	properly.
d2359 2
a2360 3
	* cvt.c (build_expr_type_conversion): Only complain about ambiguity
	if 'complain'.
	* various: Pass 'complain'.
d2362 1
a2362 1
	* typeck.c (comptypes): Be more picky about comparing UPTs.
d2364 3
a2366 1
Wed Mar  1 11:03:41 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2368 5
a2372 2
	* decl.c (grokdeclarator): If declarator is null, say that the
	type used has an incomplete type.
d2374 1
a2374 1
Wed Mar  1 10:06:20 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2376 2
a2377 3
	* pt.c (instantiate_template): Copy the template arguments to the
	permanent_obstack.  Also use simple_cst_equal to compare them when
	looking for a previous instantiation.
d2379 1
a2379 2
	* tree.c (make_deep_copy): Support copying INTEGER_TYPEs (assuming
	they are array domain types).
d2381 2
a2382 1
Tue Feb 28 23:24:55 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2384 1
a2384 9
	* cp-tree.h: Define WANT_* constants for passing to
	build_expr_type_conversion.
	* cvt.c (build_expr_type_conversion): New function to build
	conversion to one of a group of suitable types.
	(build_default_binary_type_conversion): Use it.
	* decl2.c (grok_array_decl): Ditto.
	* typeck.c (build_unary_op): Ditto.
	(build_array_ref): Tidy up a bit.
	(build_binary_op): Ditto.
d2386 3
a2388 1
Tue Feb 28 19:57:31 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2390 1
a2390 1
	* decl.c (grokdeclarator): Don't allow decl of an argument as `void'.
d2392 2
a2393 1
Tue Feb 28 17:23:36 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2395 1
a2395 2
	* parse.y (typed_declspecs1): Add 'typespec reserved_typespecquals
	reserved_declspecs' rule.
d2397 1
a2397 3
	* parse.y (expr_or_declarator): Remove notype_qualified_id rule.
	(direct_notype_declarator): Ditto.
	(complex_direct_notype_declarator): Add notype_qualified_id rule.
d2399 9
a2407 1
	* lex.c (real_yylex): Handle :> digraph properly.
d2409 1
a2409 1
Tue Feb 28 12:26:29 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2411 1
a2411 6
	* decl.c (grokdeclarator): Check if it's a friend, not if it's
	non-virtual, that's being initialized.  Move the check up to
	before FRIENDP would get cleared.  Catch an unnamed var/field
	being declared void.  Say just `field' instead of `structure field'
	in the error message.  Only go for the operator name if DECLARATOR
	is non-null.
d2413 1
a2413 1
Tue Feb 28 00:08:01 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2415 2
a2416 4
	* decl.c (start_function): Complain about abstract return type.
	(grokdeclarator): Complain about declaring constructors and
	destructors to be const or volatile.  Complain about declaring
	destructors to be static.
d2418 1
a2418 1
	* pt.c (uses_template_parms): Handle pmfs.
d2420 16
a2435 2
	* decl.c (grokdeclarator): Don't call variable_size for array bounds
	that only depend on template constant parameters.
d2437 7
a2443 1
Mon Feb 27 15:38:16 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2445 4
a2448 2
	* error.c (dump_decl): Only look to see if it's a vtable if we
	actually have a name to check out.
d2450 1
a2450 1
Mon Feb 27 13:37:53 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2452 4
a2455 1
	* cvt.c (convert_to_aggr): Lose misleading shortcut.
d2457 1
a2457 1
Sun Feb 26 17:27:32 1995  Doug Evans  <dje@@canuck.cygnus.com>
d2459 3
a2461 2
	* decl.c (set_nested_typename): Always set DECL_IGNORED_P,
	not just for dwarf.
d2463 1
a2463 1
Sun Feb 26 00:10:18 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2465 2
a2466 2
	* decl.c (grokdeclarator): Don't allow a static member to be
	declared `register'.
d2468 3
a2470 2
	* init.c (make_friend_class): Move up to a pedwarn for the warning
	about a class declaring friends with itself.
d2472 2
a2473 3
	* decl.c (grokdeclarator): You can't do `volatile friend class foo'
	or `inline friend class foo'.  Only try to make a friend out of
	TYPE if we didn't already reset it to integer_type_node.
d2475 1
a2475 1
Sat Feb 25 22:32:03 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2477 2
a2478 2
	* decl.c (grokdeclarator): Don't allow initialization of a
	non-virtual function.
d2480 1
a2480 2
	* decl.c (start_function): Do a pedwarn if we're changing `main'
	to have an int return type.
d2482 7
a2488 1
Sat Feb 25 00:02:05 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2490 1
a2490 2
	* typeck.c (build_modify_expr): Handle simple assignment from
	TARGET_EXPRs by building up an RTL_EXPR to force expansion.  Whew.
d2492 36
a2527 4
Fri Feb 24 18:27:14 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* decl.c (grokdeclarator): Also don't allow virtual outside of a
	class decl for a scope method definition performed at global binding.
d2529 1
a2529 2
	* init.c (build_offset_ref): Don't allow creation of an OFFSET_REF
	of a bitfield.
d2531 1
a2531 1
	* decl.c (grokdeclarator): Don't allow a const to be declared mutable.
d2533 1
a2533 3
	* typeck.c (build_binary_op): Return an error_mark_node if either
	one of the args turned into an error_mark_node when we tried to
	use default_conversion.
d2535 7
a2541 1
	* typeck.c (build_unary_op): Forbid using postfix -- on a bool.
d2543 1
a2543 2
	* decl.c (grokdeclarator): Allow `signed' and `unsigned' to be
	used on `__wchar_t'.
d2545 3
a2547 1
Fri Feb 24 13:59:53 1995  Mike Stump  <mrs@@cygnus.com>
d2549 1
a2549 1
	* except.c (end_protect_partials): Do it the right way.
d2551 2
a2552 1
Wed Feb 22 15:42:56 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2554 2
a2555 2
	* typeck.c (build_binary_op_nodefault): Upgrade warning about
	comparing distinct pointer types to pedwarn.
d2557 1
a2557 1
	* typeck2.c (digest_init): Cope with extra braces.
d2559 2
a2560 2
	* typeck.c (build_binary_op_nodefault): Use tree_int_cst_sgn instead
	of INT_CST_LT (..., interger_zero_node).
d2562 1
a2562 1
Wed Feb 22 14:45:52 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2564 2
a2565 2
	* except.c [!TRY_NEW_EH] (end_protect_partials): Define dummy
	function for systems that don't have EH.
d2567 1
a2567 1
Tue Feb 21 19:18:31 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2569 1
a2569 2
	* call.c (can_convert_arg): Like can_convert, but takes an arg as
	well.
d2571 1
a2571 2
	* pt.c (type_unification): Allow implicit conversions for parameters
	that do not depend on template parameters.
d2573 1
a2573 1
Tue Feb 21 18:43:48 1995  Douglas Rupp  (drupp@@cs.washington.edu)
d2575 1
a2575 6
	* Make-lang.in, config-lang.in: ($exeext): New macro.
	* Make-lang.in: Try a "cp" if "ln" fails.
	* cp-tree.h (decl_attributes): Added argument.
	* decl2.c (cplus_decl_attribute): Add arg to decl_attributes.
	* cp/g++.c: Added #ifdefs for sys/file.h and process.h for NT.
	Modified spawnvp to have to correct number of arguments for OS/2, NT.
d2577 1
a2577 1
Tue Feb 21 18:36:55 1995  Mike Stump  <mrs@@cygnus.com>
d2579 10
a2588 16
	* decl.c (finish_function): Add calls to end_protect_partials to end
	the exception region that protects constructors so that partially
	constructed objects can be partially destructed when the constructor
	throws an exception.
	* init.c (perform_member_init, sort_member_init, emit_base_init):
	Added support for partially constructed objects.
	* init.c (build_partial_cleanup_for): New routine to do partial
	cleanups of a base class.
	* decl2.c (finish_file): Move the emitting of the exception table
	down, after we emit all code that might have exception regions in
	them.
	* except.c (end_protect_partials, might_have_exceptions_p): New
	routines.
	(emit_exception_table): Always output table if called.
	* cp-tree.h (protect_list, end_protect_partials,
	might_have_exceptions_p, emit_exception_table): Added.
d2590 1
a2590 1
Tue Feb 21 16:05:59 1995  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d2592 1
a2592 4
	* gc.c (build_typeid): Pass a NULL_TREE, not the bogus, unused
	address of a local variable.
	* class.c (build_vfn_ref): Only try to build the PLUS_EXPR if we
	were given a non-null PTR_TO_INSTPTR.
d2594 2
a2595 1
Tue Feb 21 01:53:18 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2597 1
a2597 1
	* decl.c (duplicate_decls): Always lay out the merged decl.
d2599 1
a2599 2
	* decl2.c (finish_vtable_vardecl): Don't do vtable hack on templates.
	(finish_prevtable_vardecl): Ditto.
d2601 2
a2602 3
	* method.c (synthesize_method): Set interface_{unknown,only}
	according to the settings for our class, not the file where it comes
	from.
d2604 2
a2605 1
Sat Feb 18 12:26:48 1995  Mike Stump  <mrs@@cygnus.com>
d2607 1
a2607 1
	* except.c: Handle systems that define __i386__ but not __i386.
d2609 2
a2610 1
Fri Feb 17 15:31:31 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2612 2
a2613 2
	* decl2.c (reparse_decl_as_expr): Support being called without a
	type argument.
d2615 1
a2615 2
	* parse.y (primary): Add '(' expr_or_declarator ')'.  Adds 4 r/r
	conflicts.  Sigh.
d2617 3
a2619 1
Fri Feb 17 12:02:06 1995  Mike Stump  <mrs@@cygnus.com>
d2621 1
a2621 10
	* parse.y (template_def, fndef, fn.def1, return_init, condition,
	initdcl0, initdcl, notype_initdcl0, nomods_initdcl0,
	component_decl_1, after_type_component_declarator0,
	notype_component_declarator0, after_type_component_declarator,
	notype_component_declarator, after_type_component_declarator,
	full_parm, maybe_raises, exception_specification_opt): Fix up,
	include exception_specification_opt maybeasm maybe_attribute and
	maybe_init if missing.  Rename maybe_raises to
	exception_specification_opt to match draft wording.  Use maybe_init
	to simplify rules.
d2623 6
a2628 1
Fri Feb 17 01:54:46 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2630 1
a2630 2
	* init.c (build_new): Set TREE_NO_UNUSED_WARNING on COMPOUND_EXPRs
	built for news of scalar types.
d2632 2
a2633 1
Thu Feb 16 17:48:28 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2635 1
a2635 4
	* typeck.c (build_binary_op_nodefault): Update code for warning
	about signed/unsigned comparisons from C frontend.  Realize that the
	code in the C frontend is, if anything, even more bogus.  Fix it.
	(build_binary_op): Undo default_conversion if it wasn't useful.
d2637 4
a2640 2
	* typeck.c (build_unary_op, ADDR_EXPR): Lose bogus special case for
	PRE*CREMENT_EXPR.
d2642 1
a2642 5
	* decl2.c (import_export_vtable): Don't try the vtable hack
	if the class doesn't have any real non-inline virtual functions.
	(finish_vtable_vardecl): Don't bother trying to find a non-inline
	virtual function in a non-polymorphic class.
	(finish_prevtable_vardecl): Ditto.
d2644 1
a2644 1
	* decl2.c (import_export_vtable): Use and set DECL_INTERFACE_KNOWN.
d2646 1
a2646 1
	* cp-tree.h (DECL_INTERFACE_KNOWN): Use DECL_LANG_FLAG_5.
d2648 2
a2649 1
	* init.c (expand_virtual_init): Always call assemble_external.
d2651 1
a2651 4
	* class.c (build_vfn_ref): Always call assemble_external.
	(build_vtable): Always call import_export_vtable.
	(prepare_fresh_vtable): Ditto.
	(add_virtual_function): Don't bother setting TREE_ADDRESSABLE.
d2653 4
a2656 1
Thu Feb 16 03:28:49 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2658 2
a2659 2
	* class.c (finish_struct): Use TYPE_{MIN,MAX}_VALUE to determine
	whether an enumerated type fits in a bitfield.
d2661 1
a2661 1
Wed Feb 15 15:38:12 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2663 2
a2664 2
	* class.c (grow_method): Update method_vec after growing the class
	obstack.
d2666 1
a2666 1
Wed Feb 15 13:42:59 1995  Mike Stump  <mrs@@cygnus.com>
d2668 5
a2672 1
	* parse.y (handler_seq): Push a level for the catch parameters.
d2674 2
a2675 1
Wed Feb 15 12:42:57 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2677 1
a2677 2
	* init.c (emit_base_init): Update BINFO_INHERITANCE_CHAIN on my
	bases, in case they've been clobbered.
d2679 1
a2679 1
Wed Feb 15 12:07:29 1995  Mike Stump  <mrs@@cygnus.com>
d2681 1
a2681 3
	* class.c (finish_base_struct): Set up BINFO_INHERITANCE_CHAIN here,
	so that one day it will always be valid.
	* tree.c (propagate_binfo_offsets, layout_vbasetypes): Ditto.
d2683 2
a2684 2
	* cp-tree.h (copy_binfo): Removed, unused.
	* tree.c (copy_binfo): Ditto.
d2686 1
a2686 1
Wed Feb 15 00:05:30 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2688 1
a2688 2
	* init.c (build_new): Save the allocation before calling
	expand_vec_init on it.
d2690 1
a2690 3
	* decl.c (finish_enum): The TYPE_PRECISION of the enum type mush
	match the TYPE_PRECISION of the underlying type for constant folding
	to work.
d2692 1
a2692 1
Tue Feb 14 15:31:25 1995  Mike Stump  <mrs@@cygnus.com>
d2694 7
a2700 5
	* except.c (push_eh_entry, expand_start_all_catch,
	expand_leftover_cleanups, expand_end_catch_block): Keep track of
	the context in which the exception region occurs.
	(build_exception_table): If the region was not output, don't output
	the entry in the eh table for it.
d2702 7
a2708 1
Tue Feb 14 02:15:43 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2710 1
a2710 3
	* init.c (expand_default_init): Only use a previous constructor call
	if it's a call to our constructor.  Does the word "Duh" mean
	anything to you?
d2712 1
a2712 2
	* decl.c (grokparms): Fine, just don't call
	convert_for_initialization at all.  OK?  Happy now?
d2714 1
a2714 1
Mon Feb 13 02:23:44 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2716 1
a2716 2
	* cp-tree.h (CLASSTYPE_FIRST_CONVERSION): Make sure that the class
	method vector has a second element before returning it.
d2718 3
a2720 2
	* decl.c (grokparms): Don't strip REFERENCE_TYPE before calling
	convert_for_initialization.
d2722 1
a2722 1
Sun Feb 12 03:57:06 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2724 1
a2724 2
	* typeck.c (build_modify_expr): Compare function name to
	constructor_name (current_class_type) instead of current_class_name.
d2726 2
a2727 2
	* decl.c (grokparms): Don't do anything with the return value of
	convert_for_initialization.
d2729 7
a2735 1
	* error.c (dump_decl): Also dump_readonly_or_volatile on the decl.
d2737 2
a2738 1
	* decl.c (duplicate_decls): Tweak error message.
d2740 3
a2742 2
	* typeck.c (build_const_cast): Implement checking.
	(build_reinterpret_cast): Implement some checking.
d2744 1
a2744 6
	* cp-tree.h (CONV_FORCE_TEMP): Require a new temporary when
	converting to the same aggregate type.
	(CONV_STATIC_CAST): Include it.
	(CONV_C_CAST): Ditto.
	* cvt.c (convert_force): Use CONV_C_CAST instead of CONV_OLD_CONVERT.
	(cp_convert): Only force a new temporary if CONV_FORCE_TEMP.
d2746 1
a2746 1
Fri Feb 10 16:18:52 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2748 1
a2748 2
	* typeck.c (build_c_cast): Use non_lvalue to tack something on
	where necessary.
d2750 1
a2750 3
	* decl.c (auto_function): Now a function.
	* except.c (init_exception_processing): terminate, unexpected,
	set_terminate, and set_unexpected have C++ linkage.
d2752 2
a2753 4
	* typeck.c (build_unary_op, TRUTH_NOT_EXPR): Use convert instead of
	truthvalue_conversion for converting to bool, as it handles
	user-defined conversions properly.
	(condition_conversion): Ditto.
d2755 1
a2755 2
	* except.c (expand_throw): Don't call convert_to_reference.
	Pass the correct parameters to build_new.
d2757 1
a2757 3
	* method.c (do_build_assign_ref): Don't use access control when
	converting to a base reference here.
	(do_build_copy_constructor): Or here.
d2759 1
a2759 2
	* init.c (build_new): Unset TREE_READONLY on the dereferenced
	pointer before assigning to it.
d2761 1
a2761 1
	* decl.c (maybe_build_cleanup): Don't bother stripping const here.
d2763 2
a2764 1
	* decl2.c (delete_sanity): You can now delete pointer to const.
d2766 1
a2766 1
Fri Feb 10 13:28:38 1995  Jason Merrill  <jason@@python.cygnus.com>
d2768 1
a2768 3
	* decl.c (finish_function): Don't rely on actual parameters being
	evaluated left-to-right.
	* except.c (expand_end_catch_block): Ditto.
d2770 1
a2770 1
Fri Feb 10 00:52:04 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d2772 2
a2773 4
	* tree.c (real_lvalue_p): Like lvalue_p, but class temps aren't
	considered lvalues.
	* cvt.c (convert_to_reference): Use real_lvalue_p instead of
	lvalue_p.
d2775 1
a2775 3
	* cvt.c (build_type_conversion_1): Don't call convert on aggregate
	types.
	(convert_to_reference): Fix erroneous text substitution.
d2777 7
a2783 2
	* typeck2.c (initializer_constant_valid_p): Update from C frontend.
	Add new argument to all callers.
d2785 1
a2785 2
	* typeck.c (convert_arguments): Check for error_mark_node before
	trying to do anything with the actual parameter.
d2787 6
a2792 5
	* typeck.c (condition_conversion): Build up a CLEANUP_POINT_EXPR and
	fold it.
	(bool_truthvalue_conversion): Remove.  Fix all callers to call
	truthvalue_conversion instead.
	(various): Fold CLEANUP_POINT_EXPRs.
d2794 1
a2794 2
	* parse.y (conditions): Call condition_conversion rather than
	building up a CLEANUP_POINT_EXPR.
d2796 278
a3073 2
	* pt.c (end_template_decl): Don't warn_if_unknown_interface here
	under -falt-external-templates.
d3075 1
a3075 1
Thu Feb  9 05:24:10 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3077 1
a3077 2
	* init.c (build_new): Complain about new of const type without
	initializer.  Other cleanup.
d3079 11
a3089 4
	* call.c (compute_conversion_costs): Don't call
	build_type_conversion with a reference type; convert to the target
	type and check its lvaluetude.
	* cvt.c (convert_to_reference): Ditto.
d3091 2
a3092 2
	* cvt.c (build_type_conversion_1): There will never be any need to
	dereference references here now.
d3094 2
a3095 1
Thu Feb  9 00:37:47 1995  Mike Stump  <mrs@@cygnus.com>
d3097 1
a3097 2
	* except.c (expand_builtin_throw): Make sure we only `use' the
	value of return_val_rtx.
d3099 1
a3099 1
Wed Feb  8 15:45:55 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3101 1
a3101 2
	* parse.y (structsp): Don't complain about declaring a type being
	defined to be a friend.
d3103 1
a3103 6
	* decl2.c (warn_if_unknown_interface): Note the template in question
	and the point of instantiation, for -falt-external-templates.
	* lex.c (reinit_parse_for_method): Pass the decl to
	warn_if_unknown_interface.
	* pt.c (instantiate_template): Ditto.
	(end_template_decl): Ditto.
d3105 1
a3105 2
	* decl.c (set_nested_typename): Set IDENTIFIER_TYPE_VALUE on the
	nested name again, to make local classes work a bit better.
d3107 2
a3108 2
	* typeck.c (build_function_call_real): Dereference reference after
	checking for incomplete type.
d3110 1
a3110 1
	* init.c (build_new): Accept new of const and volatile types.
d3112 1
a3112 1
Wed Feb  8 14:04:16 1995  Jason Merrill  <jason@@deneb.cygnus.com>
d3114 2
a3115 1
	* decl.c (grokdeclarator): Fix error message.
d3117 2
a3118 1
Wed Feb  8 03:16:15 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3120 1
a3120 2
	* typeck.c (convert_for_initialization): Do bash arrays when
	converting to a reference to non-array.
d3122 1
a3122 1
Tue Feb  7 15:50:33 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3124 2
a3125 4
	* cvt.c (cp_convert): Don't call convert_to_reference, or
	automatically dereference references.  Do pass reference conversions
	to cp_convert_to_pointer.
	(cp_convert_to_pointer): Support references.
d3127 1
a3127 2
	* call.c (build_method_call): Don't build up a reference to the
	parameter here; let build_overload_call handle that.
d3129 1
a3129 5
	* typeck.c (build_c_cast): Call convert_to_reference directly if
	converting to a reference type.
	* method.c (do_build_copy_constructor): Ditto.
	* method.c (do_build_copy_constructor): Ditto.
	(do_build_assign_ref): Ditto.
d3131 1
a3131 2
	* call.c (build_method_call): Dereference a returned reference.
	* typeck.c (build_function_call_real): Ditto.
d3133 2
a3134 2
	* decl.c (xref_basetypes): Check for unions with basetypes here.
	(xref_tag): Instead of here.
d3136 1
a3136 2
	* pt.c (process_template_parm): Template type parm decls are
	artificial.
d3138 1
a3138 1
Mon Feb  6 04:32:09 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3140 1
a3140 4
	* parse.y (typed_declspecs): Add missing semicolon.
	(do_xref_defn): Resurrect.
	(named_class_head_sans_basetype): Move template specialization
	definition cases to named_class_head_sans_basetype_defn.
d3142 1
a3142 2
	* decl2.c (grokfield): Call pushdecl_class_level after setting the
	TYPE_NAME, not before.
d3144 1
a3144 1
Sun Feb  5 02:50:45 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3146 10
a3155 2
	* call.c (convert_harshness): Don't call sorry here.  Don't allow
	conversions between function pointer types if pedantic.
d3157 1
a3157 1
	* pt.c (overload_template_name): Pass globalize=1 to xref_tag.
d3159 2
a3160 2
	* lex.c (cons_up_default_function): Use the full name for the return
	type of op=.
d3162 1
a3162 4
	* decl.c (set_nested_typename): Don't worry about anonymous types,
	as they already have a unique name.
	(pushdecl): Remove redundant set_nested_typename
	(xref_tag): Split out base handling into xref_basetypes.
d3164 6
a3169 2
	* cp-tree.h (TYPE_INCOMPLETE): New macro; TEMPLATE_TYPE_PARMs are
	not considered incomplete even though their definition is unknown.
d3171 1
a3171 8
	* decl.c (xref_defn_tag): Lose.
	(xref_tag): xref_next_defn = ! globalize.
	(pushdecl): Don't set DECL_NESTED_TYPENAME on artificial decls.  The
	ones that should have it set will have it set by pushtag.
	(pushdecl_class_level): Ditto.
	(pushtag): Tidy up a bit.
	(set_nested_typename): Push a decl for the nested typename from
	here, rather than from xref_defn_tag.
d3173 2
a3174 3
	* parse.y (do_xref): Lose.
	(named_class_head): If we see 'class foo:' we know it's a
	definition, so don't worry about base lists for non-definitions.
d3176 5
a3180 1
	* pt.c (push_template_decls): Template parm decls are artificial.
d3182 1
a3182 3
	* decl.c (duplicate_decls): Restore check for qualifier
	disagreement for non-functions.
	(decls_match): Remove check for qualifier disagreement.
d3184 2
a3185 1
Fri Feb  3 14:58:58 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3187 1
a3187 3
	* decl.c (grok_reference_init): Convert initializer from
	reference.
	* typeck.c (convert_for_initialization): Ditto.
d3189 2
a3190 1
	* decl.c (duplicate_decls): Propagate DECL_NESTED_TYPENAME.
d3192 2
a3193 4
	* cvt.c (cp_convert): Don't convert to the same class type by just
	tacking on a NOP_EXPR.
	(convert_to_reference): Use comp_target_types instead of comptypes
	so that we don't allow conversions two levels down.
d3195 1
a3195 1
Thu Feb  2 15:07:58 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3197 1
a3197 4
	* class.c (build_vbase_path): Bash types to make the backend happy.
	* cvt.c (build_up_reference): Bash the types bashed by
	build_vbase_path to be reference types instead of pointer types.
	(convert_to_reference): Ditto.
d3199 4
a3202 2
	* typeck.c (build_c_cast): Don't strip NOPs if we're converting to a
	reference type.
d3204 1
a3204 1
	* parse.y (structsp): Put back error for 'struct B: public A;'.
d3206 2
a3207 1
Wed Feb  1 23:02:06 1995  Mike Stump  <mrs@@cygnus.com>
d3209 1
a3209 2
	* except.c: Add support for mips systems that don't define __mips
	but do define mips, like Ultrix.
d3211 1
a3211 1
Wed Feb  1 22:39:07 1995  Mike Stump  <mrs@@cygnus.com>
d3213 14
a3226 1
	* except.c: Add support for exception handling on the Alpha.
d3228 1
a3228 1
Wed Feb  1 10:12:14 1995  Mike Stump  <mrs@@cygnus.com>
d3230 1
a3230 1
	* decl2.c (finish_file): Fix bug in Jan 31st change.
d3232 1
a3232 1
Tue Jan 31 16:59:15 1995  Gerald Baumgartner  (gb@@lorenzo.cs.purdue.edu)
d3234 8
a3241 5
	* sig.c (build_signature_pointer_or_reference_type): Don't set
	IS_AGGR_TYPE for signature pointers/reference so expand_default_init
	doesn't expect to find a copy constructor.
	* call.c (build_method_call): Treat signature pointers/reference
	as if IS_AGGR_TYPE were set.
d3243 6
a3248 1
Tue Jan 31 13:28:56 1995  Mike Stump  <mrs@@cygnus.com>
d3250 1
a3250 3
	* gc.c (get_typeid): Pawn off error messages to build_t_desc.
	(build_t_desc): Inform the user here if they try and build
	with -frtti and don't include <typeinfo.h>.
d3252 2
a3253 5
	* decl2.c (finish_prevtable_vardecl): Support rescanning.
	(finish_file): Move finish_prevtable_vardecl up to before the global
	initializers are done as tdecls are initialized in the global
	initializer.  Also Pick up any new tdecls or vtables needed by
	synthesized methods.
d3255 1
a3255 2
	* class.c (finish_struct): Simplify.  We have to do rtti scanning at
	end, so we might as well do all of it there.
d3257 2
a3258 1
Tue Jan 31 05:35:02 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3260 2
a3261 2
	* call.c (build_method_call): Fix -fthis-is-variable for 32-bit
	targets, too.
d3263 3
a3265 1
Tue Jan 31 00:11:04 1995  Mike Stump  <mrs@@cygnus.com>
d3267 5
a3271 13
	* decl2.c (finish_prevtable_vardecl): New routine, mostly split from
	finish_vtable_vardecl.  It has the first half functionality from
	that routine.
	* decl2.c (finish_vtable_vardecl): Update to not include stuff not
	in  finish_prevtable_vardecl.
	* decl2.c (finish_file): Call finish_prevtable_vardecl.
	* gc.c (build_generic_desc): Allow it to be called when not at the
	global binding layer, but behave as if we were.
	(build_t_desc): Rearrange a bit so that it really works and is
	easier to follow.
	* class.c (finish_struct): Don't decide on tdecls here, as we have
	to wait until the end of the file in general to decide whether or
	not they come out.
d3273 1
a3273 1
Mon Jan 30 01:00:40 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3275 5
a3279 6
	* init.c (build_delete): Check access to operator delete before
	calling the destructor.
	* method.c (build_opfncall, DELETE_EXPR): build_method is allowed to
	return error_mark_node.
	* call.c (build_method_call): Use the one-argument op delete even if
	it's an error.
d3281 1
a3281 2
	* init.c (build_new): Fix -fthis-is-variable support.
	* call.c (build_method_call): Ditto.
d3283 1
a3283 2
	* call.c (convert_harshness): Make conversion from a pointer to bool
	worse than conversion to another pointer.
d3285 2
a3286 1
Sat Jan 28 16:46:10 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3288 1
a3288 1
	* init.c (build_new): Check new return value if -fcheck-new.
d3290 2
a3291 1
	* lex.c (check_newline): Clear end_of_file when we're done, too.
d3293 6
a3298 1
Sat Jan 28 10:38:39 1995  Mike Stump  <mrs@@cygnus.com>
d3300 1
a3300 2
	* decl2.c (finish_vtable_vardecl): Make rtti TD tables follow
	vtables whereever they go.
d3302 3
a3304 2
	* gc.c (build_t_desc): Remove old way of setting it up, as it wasn't
	right.
d3306 1
a3306 1
Sat Jan 28 09:10:44 1995  Mike Stump  <mrs@@cygnus.com>
d3308 1
a3308 7
	* decl2.c (finish_vtable_vardecl): Now set the
	interface/implementation of vtables on the first virtual function,
	if one exists, otherwise we use the old method.  This is a major win
	in terms of cutting down the size of objects and executables in
	terms of text space and data space.  Now most of the savings that
	#pragma interface/implementation gives is automatic in a fair number
	of cases.
d3310 2
a3311 1
Sat Jan 28 04:57:33 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3313 1
a3313 3
	* decl.c (grokdeclarator): Discard the template parameters in a
	template constructor declaration so that the function is always
	named constructor_name (ctype).
d3315 5
a3319 2
	* lex.c (check_newline): Use ungetc to put back the character before
	calling HANDLE_PRAGMA.
d3321 4
a3324 1
Fri Jan 27 17:23:47 1995  Mike Stump  <mrs@@cygnus.com>
d3326 1
a3326 2
	* decl2.c (check_classfn): If the cname is T<int> and fn_name is T,
	make sure we still match them.
d3328 2
a3329 1
Fri Jan 27 16:32:10 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3331 1
a3331 1
	* parse.y: Add END_OF_LINE token.
d3333 1
a3333 7
	* lex.c (check_newline): Set linemode when we see a # directive, and
	unset it when we're done.  Turn all 'return's into 'goto skipline'.
	Fix all uses of '\n', since we won't see it anymore.  Put back the
	character we read before checking for a sysv or target pragma.
	(real_yylex): If we see an EOF in linemode, return END_OF_LINE.
	(handle_sysv_pragma): Don't look at the input stream; quit when we
	see an END_OF_LINE token.
d3335 2
a3336 3
	* input.c (getch): Return EOF if we're in line mode and at the end
	of a line.
	(put_back): Don't put back an EOF.
d3338 1
a3338 1
Thu Jan 26 19:26:34 1995  Mike Stump  <mrs@@cygnus.com>
d3340 7
a3346 3
	* except.c (expand_throw): Do the newing of the exception object
	before we load the type descriptor or the address so that we don't
	wipe any of the values out.
d3348 1
a3348 1
Thu Jan 26 19:20:00 1995  Mike Stump  <mrs@@cygnus.com>
d3350 4
a3353 1
	* except.c (init_exception_processing): Don't use r12 on the rs6000.
d3355 1
a3355 1
Tue Jan 24 16:36:31 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3357 1
a3357 1
	* decl.c (grokparms): Don't try to build up a reference at this point.
d3359 13
a3371 2
	* typeck2.c (build_functional_cast): Don't assume that a NOP_EXPR
	will suffice to convert from integer_zero_node.
d3373 7
a3379 1
Wed Jan 25 15:02:09 1995  David S. Miller  (davem@@nadzieja.rutgers.edu)
d3381 4
a3384 2
	* class.c (instantiate_type): Change error message text.
	* typeck2.c (store_init_value): Likewise.
d3386 1
a3386 1
Mon Jan 23 21:57:14 1995  Mike Stump  <mrs@@cygnus.com>
d3388 11
a3398 2
	* pt.c (tsubst): When we copy a node, don't forget to copy
	TREE_CHAIN, we use it later.
d3400 1
a3400 1
Mon Jan 23 03:33:47 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3402 2
a3403 1
	* typeck.c (convert_for_assignment): Initialize variable before use.
d3405 1
a3405 1
Fri Jan 20 01:17:59 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3407 3
a3409 3
	* g++.c (main): Link with both libstdc++ and libg++ if called as
	something ending with "g++", otherwise only libstdc++.  Move -lm to
	the end of the line.
d3411 1
a3411 1
Thu Jan 19 15:43:11 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3413 2
a3414 2
	* call.c (build_method_call): Don't mess with 'this' before calling
	compute_conversion_costs.
d3416 1
a3416 1
Wed Jan 18 15:40:55 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3418 3
a3420 2
	* search.c (get_matching_virtual): Give line number for previous
	declaration.
d3422 3
a3424 2
	* call.c (convert_harshness): Handle conversions to references
	better.
d3426 5
a3430 1
	* cvt.c (build_up_reference): OK, handle {MIN,MAX}_EXPR *properly*.
d3432 1
a3432 1
Wed Jan 18 15:21:38 1995  Mike Stump  <mrs@@cygnus.com>
d3434 5
a3438 3
	* class.c (instantiate_type): Use DECL_CHAIN to walk lists instead,
	as the TREE_CHAIN for methods will take us to the next differently
	named function, DECL_CHAIN won't.
d3440 3
a3442 1
Wed Jan 18 14:26:59 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3444 1
a3444 1
	* tree.c (lvalue_p): Handle {MIN,MAX}_EXPR.
d3446 7
a3452 2
	* decl2.c (lang_decode_option): -Wall implies -Wparentheses.
	warn_parentheses defaults to 0.
d3454 2
a3455 1
	* decl.c (grokparms): Put back call to require_instantiated_type.
d3457 2
a3458 1
Tue Jan 17 19:56:15 1995  Mike Stump  <mrs@@cygnus.com>
d3460 2
a3461 2
	* except.c (exception_section): Use the data section on the rs6000.
	Change calling convention for named_section.
d3463 2
a3464 1
Wed Jan 17 18:20:57 1994  Fergus Henderson <fjh@@munta.cs.mu.oz.au>
d3466 2
a3467 2
	* cp-tree.h : Make if (x=0) warn with wall
	* parse.y : Make if (x=0) warn with wall
d3469 1
a3469 1
Tue Jan 17 14:12:00 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3471 1
a3471 2
	* decl.c (BOOL_TYPE_SIZE): BITS_PER_WORD if SLOW_BYTE_ACCESS,
	BITS_PER_UNIT otherwise.
d3473 2
a3474 2
	* search.c (get_matching_virtual): Don't check the binfo if the
	types are the same.
d3476 3
a3478 2
	* cvt.c (cp_convert): Just call truthvalue_conversion to convert to
	bool.
d3480 1
a3480 1
Mon Jan 16 13:28:48 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3482 2
a3483 2
	* various: Use boolean_type_node, boolean_true_node,
	boolean_false_node.
d3485 2
a3486 2
	* search.c (get_matching_virtual): Allow covariant returns that
	don't require pointer adjustment.
d3488 2
a3489 2
	* typeck.c (build_conditional_expr): Don't call default_conversion
	on ifexp.
d3491 1
a3491 1
	* cvt.c (build_up_reference): Handle MIN_EXPR and MAX_EXPR.
d3493 2
a3494 1
	* decl.c (grokdeclarator): Upgrade warning about &const to pedwarn.
d3496 1
a3496 1
Sun Jan 15 22:17:32 1995  dcb@@lovat.fmrco.COM (David Binderman)
d3498 1
a3498 1
	* pt.c (do_function_instantiation): Free targs once we're done.
d3500 1
a3500 1
Sun Jan 15 22:17:32 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3502 9
a3510 3
	* decl.c (BOOL_TYPE_SIZE): Defaults to BITS_PER_WORD.
	(init_decl_processing): Use BOOL_TYPE_SIZE instead of CHAR_TYPE_SIZE
	for bool.
d3512 1
a3512 1
Sat Jan 14 05:33:55 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3514 3
a3516 2
	* decl2.c (finish_file): We need to mess up if there are any
	variables in the list, not just if there is one with a constructor.
d3518 1
a3518 1
Fri Jan 13 14:42:55 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3520 7
a3526 3
	* decl.c (duplicate_decls): Propagate DECL_STATIC_{CON,DE}STRUCTOR.
	(finish_function): Handle DECL_STATIC_{CON,DE}STRUCTOR.
	(finish_function): Trust rest_of_compilation.
d3528 1
a3528 2
	* decl2.c (finish_file): Also call functions designated as static
	constructors/destructors.
d3530 1
a3530 4
	* decl.c (grokdeclarator): Allow access decls of operator functions.
	(grokparms): Only do convert_for_initialization if the initializer
	has a type.
	(duplicate_decls): Put back push_obstacks_nochange call.
d3532 1
a3532 2
	* lex.c (real_yylex): Downgrade complaint about the escape sequence
	being too large from pedwarn to warning.
d3534 1
a3534 2
	* decl.c (grokdeclarator): Don't complain about long long in system
	headers.
d3536 2
a3537 1
	* lex.c (real_yylex): Handle digraphs.
d3539 7
a3545 1
Thu Jan 12 12:17:24 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3547 1
a3547 2
	* decl.c (init_decl_processing): -f{no-,}strict-prototype only
	affects C linkage declarations now.
d3549 2
a3550 2
	* typeck.c (comp_target_types): Grok simple contravariant conversions.
	(common_type): t1 and t2 are interchangeable.
d3552 2
a3553 3
	* various: Test return value of comp_target_types differently in
	different places; it now returns -1 for a contravariant conversion
	(which is fine in symmetric cases).
d3555 1
a3555 2
	(common_type): Prefer long double to double even when
	they have the same precision.
d3557 4
a3560 2
	* decl.c (grokparms): Call convert_for_initialization to check
	default arguments.
d3562 1
a3562 1
	* init.c (build_new): void_type_node has a size (of 0).
d3564 2
a3565 4
	* decl.c (decls_match): Also check for agreement of TREE_READONLY
	and TREE_THIS_VOLATILE.
	(push_class_level_binding): Properly handle shadowing of
	nested tags by fields.
d3567 16
a3582 1
	* search.c (dfs_pushdecls): Ditto.
d3584 1
a3584 1
	* decl2.c (finish_file): Don't second-guess self-initialization.
d3586 1
a3586 2
	* cvt.c (convert_to_reference): Work with expr directly, rather than
	a copy.
d3588 1
a3588 1
	* decl.c (push_overloaded_decl): Only shadow artificial TYPE_DECLs.
d3590 2
a3591 2
	* init.c (add_friend): Downgrade duplicate friend message from
	pedwarn to warning.
d3593 1
a3593 1
	* decl.c (duplicate_decls): Push obstacks before calling common_type.
d3595 1
a3595 1
Thu Jan 12 17:15:21 1995  Michael Ben-Gershon  <mybg@@cs.huji.ac.il>
d3597 19
a3615 14
	* except.c (push_eh_entry): set LABEL_PRESERVE_P flag for
	exception table labels.
	(expand_start_all_catch): Ditto.
	(expand_leftover_cleanups): Ditto.
	(expand_end_catch_block): Ditto.
	* except.c (make_first_label): new function.
	(expand_start_all_catch): add a call to make_first_label() before
	using a label as a jump destination.
	(expand_end_all_catch): Ditto.
	(expand_leftover_cleanups): Ditto.
	(expand_end_catch_block): Ditto.
	(expand_builtin_throw): Ditto.
	(expand_throw): Ditto.
	* except.c: Add ARM processor support for exception handling.
d3617 1
a3617 1
Thu Jan 12 12:17:24 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3619 2
a3620 1
	(complete_array_type): Copy code from C frontend.
d3622 1
a3622 2
	* lex.c (real_yylex): Don't multiply the length of a wide string
	literal by WCHAR_BYTES.
d3624 1
a3624 5
	* decl.c (pushdecl): Check for redeclaration of wchar_t here.
	(duplicate_decls): Instead of here.
	(define_label): Complain about a label named wchar_t.
	(grokdeclarator): Complain about declarations of
	operator-function-ids as non-functions.
d3626 1
a3626 3
	* typeck.c (unary_complex_lvalue): Also wrap prefix -- and ++ in
	COMPOUND_EXPRs.
	(build_unary_op): Wrap unary plus in a NON_LVALUE_EXPR.
d3628 2
a3629 2
	* lex.c (real_yylex): Don't skip whitespace when reading the next
	character after ->.
d3631 1
a3631 1
Wed Jan 11 16:32:49 1995  Mike Stump  <mrs@@cygnus.com>
d3633 4
a3636 7
	* except.c: Allow cc1plus to be built with native compiler on rs6000.
	(expand_start_all_catch): Add assemble_external calls for various
	routines we call.
	(expand_leftover_cleanups): Ditto.
	(expand_start_catch_block): Ditto.
	(do_unwind): Ditto.
	(expand_builtin_throw): Ditto.
d3638 1
a3638 1
Wed Jan 11 01:05:42 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3640 2
a3641 2
	* decl.c (pushtag): Only look for a previous decl in the current
	binding level.  Use explicit global scope in DECL_NESTED_TYPENAME.
d3643 1
a3643 1
	* gxx.gperf: Add __signature__ and __sigof__ keywords.
d3645 3
a3647 2
	* decl2.c (lang_decode_option): -ansi does not set flag_no_asm.  It
	does set flag_no_gnu_keywords and flag_operator_names.
d3649 1
a3649 4
	* lex.c (init_lex): 'overload' is not a keyword unless -traditional.
	Unset extension keywords if -fno-gnu-keywords.
	Allow operator names ('bitand') if -foperator-names.
	Never unset 'asm'; -fno-asm only affects 'typeof'.
d3651 2
a3652 2
	* decl.c (lookup_name_real): The got_object special lookup only
	applies to types.
d3654 1
a3654 1
Tue Jan 10 18:07:51 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3656 2
a3657 1
	* spew.c (yylex): Also use DECL_NESTED_TYPENAME if got_object is set.
d3659 1
a3659 3
	* parse.y (primary): Unset got_object after all rules that use the
	'object' nonterminal.
	(object): Set got_object.
d3661 3
a3663 1
	* lex.h: Declare got_object.
d3665 1
a3665 2
	* decl.c (lookup_name_real): Also lookup names in the context of an
	object specified.
d3667 2
a3668 1
Tue Jan 10 14:30:30 1995  Mike Stump  <mrs@@cygnus.com>
d3670 1
a3670 6
	* typeck.c (get_member_function_from_ptrfunc): Use ptrdiff_type_node
	for things that have to be added to pointers, not size_type.  Cures
	problems with pointer to members on Alphas.
	(build_binary_op_nodefault): Ditto.
	(get_delta_difference_: Ditto.
	(build_ptrmemfunc): Ditto.
d3672 2
a3673 1
Tue Jan 10 01:49:25 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3675 1
a3675 2
	* decl.c (pushtag): Stick the new decl in TYPE_NAME before pushing
	it.
d3677 2
a3678 4
	* typeck.c (build_component_ref): Don't build up a COMPONENT_REF
	when dealing with overloaded member functions; just act like
	build_offset_ref.
	(commonparms): Remove misleading comment.
d3680 23
a3702 8
	* decl.c (duplicate_decls): Complain about repeated default
	arguments here.
	(redeclaration_error_message): Instead of here.
	(pushdecl): Complain about missing default arguments here.
	(grokparms): Instead of here.
	(lookup_name_current_level): Also match on DECL_ASSEMBLER_NAME.
	(grok_reference_init): Do not complain about missing initializer if
	declared 'extern'.
d3704 1
a3704 2
	* search.c (lookup_field): Don't return a TYPE_DECL if there is a
	function alternative and want_type is not set.
d3706 2
a3707 1
Mon Jan  9 18:16:23 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3709 1
a3709 5
	* decl.c (pushtag): Don't set TYPE_NAME to an identifier.  Do push
	the decl when the type has no TYPE_NAME.
	(lookup_nested_type): Don't assume that type has TYPE_NAME set.
	(lookup_name_real): Call lookup_field with want_type =
	prefer_type.
d3711 1
a3711 2
	* search.c (lookup_field): Handle want_type properly in the presence
	of fields with the same name.
d3713 1
a3713 4
	* decl.c (set_nested_typename): Set nested name for file-scope types
	to include leading ::.
	(pushdecl): Set the nested typename if the decl doesn't have one,
	rather than if the type's canonical decl doesn't have one.
d3715 1
a3715 1
Mon Jan  9 16:48:16 1995  Steve Chamberlain  (sac@@jonny.cygnus.com)
d3717 1
a3717 2
	* typeck.c (pointer_int_sum):  Use offset size when calculating
	index expression.
d3719 2
a3720 1
Mon Jan  9 03:44:33 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3722 6
a3727 5
	* typeck.c (convert_for_assignment): Complain about contravariance
	violation here.
	(comp_target_types): Instead of here.
	(build_unary_op): resolve_offset_ref before checking for a valid
	type.
d3729 1
a3729 2
	* spew.c (yylex): Decrement looking_for_typename after we see a
	_DEFN.
d3731 1
a3731 2
	* decl.c (pushdecl): Don't install an artificial TYPE_DECL in
	IDENTIFIER_LOCAL_VALUE if we already have a decl with that name.
d3733 1
a3733 2
	* typeck.c (convert_for_assignment): Converting pointers to bool
	does not need a cast.
d3735 2
a3736 1
Sun Jan  8 18:16:45 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3738 1
a3738 1
	* class.c (instantiate_type): Initialize nsubsts parm.
d3740 3
a3742 1
	* pt.c (do_function_instantiation): Ditto.
d3744 1
a3744 1
Sat Jan  7 14:37:05 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3746 11
a3756 4
	* pt.c (tsubst): Use TREE_STATIC instead of DECL_INLINE &&
	DECL_SAVED_INSNS to determine whether or not we've seen a definition
	of this function.
	(instantiate_template): Ditto.
d3758 1
a3758 4
	* call.c (convert_harshness): Allow const reference binding when
	called from the overloading code, but not when called from
	can_convert (since it isn't a conversion).
	(convert_harshness): Put back some disabled code.
d3760 4
a3763 1
Fri Jan  6 14:10:57 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3765 1
a3765 3
	* call.c (convert_harshness): There is no implicit conversion from
	void* to other pointer types (unless the parameter is (void*)0).
	(convert_harshness): Non-lvalues do not convert to reference types.
d3767 16
a3782 2
	* class.c (finish_struct_methods): Still set
	TYPE_HAS_{INT,REAL}_CONVERSION.
d3784 1
a3784 1
	* call.c (can_convert): Don't use aggregate initialization.
d3786 9
a3794 1
	* cp-tree.h: Declare lookup_conversions.
d3796 1
a3796 1
Thu Jan  5 21:08:00 1995  Mike Stump  <mrs@@cygnus.com>
d3798 1
a3798 2
	* parse.y (simple_stmt): Fix duplicate case value error messages to
	be more readable.
d3800 2
a3801 1
Wed Jan  4 16:44:19 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3803 1
a3803 3
	* cvt.c (build_type_conversion): Total rewrite to use
	convert_harshness instead of reproducing conversion logic here.  Now
	much shorter.
d3805 1
a3805 3
	* call.c (convert_harshness): Support conversions to bool.
	(can_convert): Checks whether a conversion is less harsh
	than USER_CODE, for build_type_conversion.
d3807 2
a3808 5
	* search.c (add_conversions): Function for passing to dfs_walk which
	adds all the type conversion operators in the current type to a list.
	(lookup_conversions): Calls dfs_walk with add_conversions and return
	the list.
	(dfs_walk): Don't require a qfn.
d3810 1
a3810 2
	* cp-tree.h: Lose CLASSTYPE_CONVERSIONS hackery.
	(CLASSTYPE_FIRST_CONVERSION): Points to elt 1 of CLASSTYPE_METHOD_VEC.
d3812 4
a3815 6
	* class.c (finish_struct_bits): Lose CLASSTYPE_CONVERSIONS hackery.
	(grow_method): A separate function for building onto the growing
	method vector.
	(finish_struct_methods): Use it.  Put all type conversion operators
	right after the constructors.  Perhaps we should sort the methods
	alphabetically?
d3817 1
a3817 1
Mon Jan  2 14:42:58 1995  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3819 1
a3819 1
	* call.c (build_method_call): Lose another misleading shortcut.
d3821 1
a3821 1
Fri Dec 30 17:57:30 1994  Mike Stump  <mrs@@cygnus.com>
d3823 2
a3824 1
	* gc.c (build_bltn_desc): Handle bool as a built-in type.
d3826 1
a3826 1
Fri Dec 30 14:20:21 1994  Mike Stump  <mrs@@cygnus.com>
d3828 1
a3828 2
	* tree.c (layout_vbasetypes): Ensure that we don't loose alignment
	on the complete type because of small virtual bases.
d3830 2
a3831 1
Fri Dec 30 12:22:29 1994  Mike Stump  <mrs@@cygnus.com>
d3833 1
a3833 7
	* decl.c (n_incomplete): Bump n_incomplete up to int to match C
	front end.
	(pushdecl): Also count decls pushed that are of a type being defined
	as incomplete things.
	* class.c (finish_struct): Move hack_incomplete_structures up to
	just after we set it as not being defined, so that the decls we
	build for RTTI don't count as incomplete.
d3835 4
a3838 1
Thu Dec 29 18:20:57 1994  Mike Stump  <mrs@@cygnus.com>
d3840 1
a3840 2
	* pt.c (tsubst): Fix problem with defining constructors in templated
	classes with virtual bases.
d3842 3
a3844 1
Wed Dec 28 08:31:00 1994  Mike Stump  <mrs@@cygnus.com>
d3846 1
a3846 3
	* parse.y (TYPEID): Strip top-level cv-qualifiers on typeid
	expressions.
	* gc.c (build_typeid): Ditto.
d3848 1
a3848 1
Thu Dec 22 17:26:33 1994  Mike Stump  <mrs@@cygnus.com>
d3850 1
a3850 2
	* cvt.c (build_up_reference): Fix breakage introduced on Nov 29,
	don't assert on complex AGGR inits.
d3852 2
a3853 1
Thu Dec 22 14:32:31 1994  Mike Stump  <mrs@@cygnus.com>
d3855 1
a3855 2
	* method.c (build_overload_value): Handle pointer to members as
	template arguments.
d3857 2
a3858 1
Thu Dec 22 13:09:07 1994  Mike Stump  <mrs@@cygnus.com>
d3860 1
a3860 3
	* typeck.c (unary_complex_lvalue): Don't call sorry if we know how
	to do take the address of a data member for a pointer to data
	member.
d3862 1
a3862 1
Thu Dec 22 10:04:19 1994  Mike Stump  <mrs@@cygnus.com>
d3864 4
a3867 2
	* decl.c (grokdeclarator): Use the typedef name for linkage if the
	type doesn't otherwise have a name.
d3869 1
a3869 1
	* decl2.c (grokfield): Ditto.
d3871 5
a3875 3
	* class.c (finish_struct): Since we reuse the TYPE_DECL for the
	DECL_NAME of enums, structs and classes, we have to avoid trying to
	put it in the TYPE_FIELDS again.
d3877 1
a3877 1
Wed Dec 21 11:07:05 1994  Mike Stump  <mrs@@cygnus.com>
d3879 2
a3880 2
	* decl2.c (check_classfn): Ignore this parameter on static functions
	when checking to see if we match.
d3882 1
a3882 1
Tue Dec 20 17:47:02 1994  Mike Stump  <mrs@@cygnus.com>
d3884 1
a3884 2
	* typeck.c (unary_complex_lvalue): Handle address of non-left most
	pointers to members by calling get_delta_difference.
d3886 1
a3886 1
Mon Dec 19 22:40:53 1994  Mike Stump  <mrs@@cygnus.com>
d3888 2
a3889 2
	* decl2.c (check_classfn): Don't use decls_match yet, as it modifies
	static functions to early.
d3891 1
a3891 1
Thu Dec 19 22:37:48 1994  Mike Stump  <mrs@@cygnus.com>
d3893 2
a3894 1
	* method.c (make_thunk): Handle encoding of positive thunk offsets.
d3896 1
a3896 1
Sat Dec 17 13:29:50 1994  Doug Evans  <dje@@canuck.cygnus.com>
d3898 2
a3899 1
	* Make-lang.in (.PHONY): Tell GNU make C++ and c++ are phony targets.
d3901 1
a3901 1
Thu Dec 15 16:32:12 1994  Mike Stump  <mrs@@cygnus.com>
d3903 2
a3904 4
	* decl2.c (check_classfn): Use decls_match to check if this has
	already been declared, as the DECL_ASSEMBLER_NAME may have been
	changed via asm("new_name").
	* decl.c (decls_match): Make public.
d3906 1
a3906 1
Thu Dec 15 15:17:55 1994  Mike Stump  <mrs@@cygnus.com>
d3908 5
a3912 4
	* *.[chy] (expand_aggr_init) Add fourth argument to handle
	distinction between = init and (init) style of initializations.
	* *.[chy] (finish_decl): Add fifth argument to to handle
	distinction between = init and (init) style of initializations.
d3914 1
a3914 1
Tue Dec 13 19:16:05 1994  Mike Stump  <mrs@@cygnus.com>
d3916 1
a3916 1
	Fix some random `explicit' bugs.
d3918 3
a3920 32
	* cvt.c (convert_to_reference): Add third parameter to
	convert_force.
	(convert_force): Ditto.
	* call.c (build_method_call): Ditto.
	* decl2.c (setup_vtbl_ptr): Ditto.
	* init.c (expand_virtual_init): Ditto.
	(build_member_call): Ditto.
	(build_delete): Ditto.
	(build_vbase_delete): Ditto.
	* typeck.c (build_component_addr): Ditto.
	(build_c_cast): Ditto.
	(build_modify_expr): Ditto.
	* cp-tree.h (CONV_NONCONVERTING): Ditto. Add so that we can
	distinguish the context in which the conversion appears.  Add thrid
	argument to build_c_cast.
	* cvt.c (cp_convert): Pass whether or not we want to consider
	non-converting constructors down to build_method_call.
	* decl2.c (reparse_absdcl_as_casts): Add third argument to
	build_c_cast.
	* gc.c (build_m_desc): Ditto.
	* init.c (build_new): Ditto.
	* parse.y (expr_no_commas): Ditto.
	(primary): Ditto.
	* typeck.c (build_x_function_call): Ditto.
	(build_static_cast): Ditto.
	(build_reinterpret_cast): Ditto.
	(build_const_cast): Ditto.
	(build_c_cast): Ditto.
	(build_ptrmemfunc): Ditto.
	* typeck2.c (build_functional_cast): Ditto.
	* init.c (expand_aggr_init): Added LOOKUP_ONLYCONVERTING to
	expand_aggr_init_1 as inits are converted to the destination type.
d3922 1
a3922 1
Tue Dec 13 16:18:57 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3924 6
a3929 1
	* Make-lang.in (cc1plus): Depends on c-pragma.o.
d3931 2
a3932 1
	* Makefile.in (OBJ{DEP,}S): Add ../c-pragma.o.
d3934 5
a3938 3
	* lex.c (check_newline): If the #pragma is not recognized by g++,
	try machine-specific ones too.
	(handle_sysv_pragma): Copied from c-lex.c.
d3940 1
a3940 1
Mon Dec 12 23:53:06 1994  Mike Stump  <mrs@@cygnus.com>
d3942 2
a3943 2
	* except.c (expand_throw): Fix Dec 6th change, build_new likes a
	reference better.
d3945 1
a3945 1
Mon Dec 12 18:01:00 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3947 2
a3948 2
	* typeck.c (build_binary_op): Lose checks on TYPE_PTRMEMFUNC_P with
	IS_AGGR_TYPE, since now they will not both be set on the same type.
d3950 1
a3950 2
	* pt.c (do_pending_expansions): Don't clear TREE_PUBLIC on
	instantiations controlled by -fexternal-templates.
d3952 6
a3957 2
	* decl.c (duplicate_decls): Don't complain about different values of
	__attribute__ ((const)) and ((noreturn)).
d3959 1
a3959 1
Fri Dec  9 18:17:37 1994  Doug Evans  <dje@@cygnus.com>
d3961 2
a3962 3
	* Makefile.in (BISONFLAGS): Delete --yacc.
	(PARSE_H): Depend on $(PARSE_C), for parallel makes.
	(PARSE_C): Undo last patch.
d3964 1
a3964 1
Fri Dec  2 10:44:36 1994  Mike Stump  (mrs@@wombat.gnu.ai.mit.edu)
d3966 4
a3969 2
	* Makefile.in (BISONFLAGS): Add --yacc so that output winds up in
	y.tab.c.
d3971 1
a3971 1
Thu Dec  8 17:39:46 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3973 3
a3975 2
	* decl.c (finish_decl): Don't call obscure_complex_init for decls
	of indeterminate size.
d3977 1
a3977 1
Wed Dec  7 16:49:22 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d3979 1
a3979 4
	* decl.c (obscure_complex_init): Function to tweak the decl to
	prevent expand_decl from tring to initialize it.
	(finish_decl): Use it rather than writing the same code in three
	different places.
d3981 6
a3986 1
	* parse.y (bad_parm): Stop trying to support parms without types.
d3988 2
a3989 1
Wed Dec  7 12:06:56 1994  Mike Stump  <mrs@@cygnus.com>
d3991 2
a3992 2
	* decl2.c (grokfield): Make asm specs on static member functions
	work.
d3994 1
a3994 1
Tue Dec  6 15:43:20 1994  Mike Stump  <mrs@@cygnus.com>
d3996 4
a3999 1
	* except.c (expand_throw): Make a copy of the thrown object.
d4001 7
a4007 1
Tue Dec  6 14:16:34 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4009 1
a4009 1
	* parse.y: : has lower precedence than =.
d4011 2
a4012 1
Tue Dec  6 12:46:17 1994  Mike Stump  <mrs@@cygnus.com>
d4014 14
a4027 5
	* decl.c (pushdecl): Use DECL_NAME of VAR_DECLs to avoid namespace
	manglings.
	(grokvardecl): Add namespace into variable name.

Tue Dec  6 11:26:55 1994  Mike Stump  <mrs@@cygnus.com>
d4029 1
a4029 7
	* decl2.c (current_namespace_id): New routine to transform a simple
	name into a name in a namespace.
	* decl.c (grokdeclarator): Use it.
	* decl2.c (get_namespace_id): Find the name of the current
	namespace.
	(push_namespace, pop_namespace): Complete out missing
	functionality.
d4031 1
a4031 1
Mon Dec  5 17:11:51 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4033 1
a4033 3
	* class.c (finish_struct): Don't use LONG_LONG_TYPE_SIZE, as it may
	not be defined.  Fix warning message for enums and restore warning
	for non-enums.
d4035 2
a4036 5
	* decl2.c (push_namespace): Dummy function.
	(pop_namespace): Ditto.
	(do_namespace_alias): Ditto.
	(do_using_decl): Ditto.
	(do_using_directive): Ditto.
d4038 4
a4041 8
	* parse.y: New token NSNAME for namespace names.
	(extdef): Add namespace, using definitions.
	(using_decl): New rule for using declarations.
	(any_id): New rule for identifiers with any degree of scoping.
	(identifier): Add NSNAME.
	(notype_identifier): Ditto.
	(component_decl): Add using_decl.
	(nested_name_specifier): Add NSNAME SCOPE.
d4043 2
a4044 2
	* typeck.c (convert_for_assignment): Handle conversions between
	enums and bool.
d4046 3
a4048 2
	* decl.c (duplicate_decls): Only propagate DECL_MAIN_VARIANT on
	FUNCTION_DECLs.
d4050 2
a4051 1
Mon Dec  5 13:03:16 1994  Mike Stump  <mrs@@cygnus.com>
d4053 1
a4053 5
	* class.c (finish_struct): Give an error if one tries to declare a
	bit-field's size greater than a long long, as the backend will dump.
	It is not an error to declare an enum bit-field greater than its
	precision.  Warn if an enum bit-field is too small to hold all
	its values.
d4055 2
a4056 1
Mon Dec  5 11:41:50 1994  Mike Stump  <mrs@@cygnus.com>
d4058 1
a4058 2
	* typeck.c (convert_for_assignment): Use cp_convert instead of
	convert so that we don't get static casts.
d4060 2
a4061 1
Sun Dec  4 11:59:01 1994  Mike Stump  <mrs@@cygnus.com>
d4063 1
a4063 2
	* cvt.c (cp_convert): Don't complain about int->enum conversion if
	we are doing static casts.
d4065 8
a4072 1
Fri Dec  2 18:32:41 1994  Mike Stump  <mrs@@cygnus.com>
d4074 1
a4074 2
	* error.c (dump_expr): Do something more intelligent with SAVE_EXPRs
	when dumping expressions in error messages.
d4076 7
a4082 1
Fri Dec  2 17:04:27 1994  Mike Stump  <mrs@@cygnus.com>
d4084 1
a4084 2
	* gc.c (build_dynamic_cast): Change interface to libg++, ensure that
	the return type is the right type, and make references work.
d4086 2
a4087 1
Fri Dec  2 16:36:43 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4089 1
a4089 5
	* decl.c (poplevel): Don't be confused by function-scope
	declarations of non-nested functions.
	(duplicate_decls): Propagate DECL_MAIN_VARIANT.
	(pushdecl): Use duplicate_decls to copy info from old decl into new
	function-scope one rather than doing it here.
d4091 2
a4092 2
	* decl2.c (mark_inline_for_output): Deal with the DECL_MAIN_VARIANT
	of this decl, in case this is a function-scope declaration.
d4094 1
a4094 2
	* decl.c (finish_enum): Make sure that the type has the right
	precision when we call fixup_*_type.
d4096 2
a4097 1
Tue Nov 29 19:12:07 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4099 1
a4099 3
	* cvt.c (build_up_reference): Strip superfluous NOP_EXPRs; we do
	want to build up references to rvalues if possible.
	(cp_convert): Stick on a NOP_EXPR when converting to the same type.
d4101 6
a4106 1
Tue Nov 29 11:28:59 1994  Mike Stump  <mrs@@cygnus.com>
d4108 1
a4108 11
	* parse.y (maybe_raises): Handle throw ().
	* parse.y (ansi_raise_identifier): grok type-ids in exception
	specifications.
	* tree.c (build_exception_variant): Use list compare to check if
	two exception specifications match.
	* decl.c (duplicate_decls, bad_specifiers): Enhance wording on error
	messages.
	* call.c (build_method_call): Remove TREE_RAISES.
	* cvt.c (convert_to_aggr): Ditto.
	* typeck.c (build_function_call_real, convert_arguments): Ditto.
	* init.c (expand_aggr_init_1): Ditto.
d4110 3
a4112 1
Tue Nov 29 09:50:39 1994  Mike Stump  <mrs@@cygnus.com>
d4114 1
a4114 2
	* except.c: Add support for m68k and mips exception handling
	support.
d4116 22
a4137 1
Tue Nov 29 08:48:33 1994  Mike Stump  <mrs@@cygnus.com>
d4139 1
a4139 2
	* except.c (expand_end_all_catch): Throw into outer context, if we
	fall off end of catch handlers.
d4141 1
a4141 1
Mon Nov 28 16:44:41 1994  Mike Stump  <mrs@@cygnus.com>
d4143 4
a4146 2
	* Makefile.in: Make is easier to decide where parse.[ch] will be
	built.
d4148 1
a4148 1
Thu Nov 17 20:11:24 1994  Doug Evans  <dje@@cygnus.com>
d4150 9
a4158 6
	* cp/Make-lang.in (CXX_INSTALL_NAME) Use program_transform_name.
	(GXX_INSTALL_NAME) Likewise.
	(CXX_CROSS_NAME) Use program_transform_cross_name.
	(GXX_CROSS_NAME) Likewise.
	(c++.install-man): Use program_transform_name on g++.1.
	(c++.uninstall): Likewise.
d4160 1
a4160 1
Thu Nov  3 18:48:19 1994  Paul Eggert  <eggert@@twinsun.com>
d4162 2
a4163 2
	* Makefile.in (spew.o, lex.o, pt.o):
	Depend on $(srcdir)/parse.h, not parse.h.
d4165 1
a4165 1
Mon Nov 28 13:53:03 1994  Mike Stump  <mrs@@cygnus.com>
d4167 2
a4168 1
	* parse.y (THROW): Fix precedence of throw expressions.
d4170 1
a4170 1
Mon Nov 28 13:15:16 1994  Mike Stump  <mrs@@cygnus.com>
d4172 1
a4172 2
	* typeck.c (build_unary_op): Allow promotions from bool to int on
	unary ~.
d4174 1
a4174 1
Sun Nov 27 00:16:21 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4176 2
a4177 5
	* method.c (build_overload_name): Use DECL_ASSEMBLER_NAME for
	classes when appropriate.
	(build_overload_nested_name): When dealing with a function context,
	use ASM_FORMAT_PRIVATE_NAME to tweak the name of the function to
	avoid conflicts between local classes of the same name.
d4179 1
a4179 1
Wed Nov 23 17:59:42 1994  Mike Stump  <mrs@@cygnus.com>
d4181 1
a4181 8
	* gxx.gperf, parse.y, lex.h, hash.h, lex.c (init_lex), delc.c
	(duplicate_decls, grokdeclarator), cp-tree.h: Add support for
	`explicit'.
	* cvt.c (convert_to_reference, cp_convert, build_type_conversion_1,
	build_type_conversion): Use LOOKUP_ONLYCONVERTING in
	build_method_calls so that non-converting constructors are not used.
	* call.c (build_method_call): If we shouldn't use a non-converting
	constructor, then don't.
d4183 2
a4184 1
Wed Nov 23 14:46:56 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4186 1
a4186 1
	* call.c (build_method_call): Don't try to synthesize methods yet.
d4188 1
a4188 1
Tue Nov 22 12:45:21 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4190 1
a4190 2
	* pt.c (push_template_decls): Create CONST_DECLs for template
	constant parameters, not VAR_DECLs.
d4192 6
a4197 1
Sat Nov 19 15:28:31 1994  Jim Wilson  (wilson@@chestnut.cygnus.com)
d4199 1
a4199 2
	* typeck.c (build_binary_op_nodefault): Can shorten shift only if
	shift count is less than size in bits of arg0.
d4201 2
a4202 1
Thu Nov 17 15:30:50 1994  Mike Stump  <mrs@@cygnus.com>
d4204 1
a4204 5
	* gxx.gperf, hash.h, lex.c (init_lex, real_yylex), parse.y: Add new
	ANSI keywords and, and_eq, bitand, bitor, explicit, namespace, not,
	not_eq, or, or_eq, typename, using, xor, xor_eq to g++.  Still need
	to add support for explicit, namespace, typename, and using, support
	for the rest is already in.
d4206 1
a4206 1
Thu Nov 17 10:56:50 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4208 3
a4210 2
	* typeck2.c (build_m_component_ref): Check the basetype of the
	member pointer against the main variant of the object type.
d4212 1
a4212 1
Mon Nov 14 14:21:52 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4214 4
a4217 2
	* cvt.c (convert_to_reference): Make sure that the original expr
	gets its type back when converting a reference.
d4219 1
a4219 2
	* method.c (build_overload_name): Clear numeric_outputed_need_bar here.
	(build_decl_overload): Instead of here.
d4221 3
a4223 1
Tue Nov  8 17:11:24 1994  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4225 1
a4225 2
	* cvt.c (cp_convert): Don't build a TARGET_EXPR if we're not in a
	function.
d4227 4
a4230 2
	* typeck.c (convert_for_initialization): Handle initialization from
	a TARGET_EXPR.
d4232 1
a4232 1
Sun Nov  6 01:34:24 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4234 2
a4235 7
	* pt.c (lookup_nested_type_by_name): Fix list-walking logic.
	(tsubst): When replacing a TEMPLATE_TYPE_PARM, propagate
	TYPE_READONLY and TYPE_VOLATILE from the argument.
	(unify): When unifying with a TEMPLATE_TYPE_PARM, remove cv-quals
	present in parm from arg.
	(type_unification): Strip REFERENCE_TYPE from the argument type.
	(unify): Don't strip REFERENCE_TYPE from the argument type.
d4237 1
a4237 1
Sat Nov  5 22:42:15 1994  Greg McGary  (gkm@@magilla.cichlid.com)
d4239 3
a4241 3
	* pt.c (do_type_instantiation): Check to see if there's a
	IDENTIFIER_TEMPLATE on a class before calling
	instantiate_member_templates().
d4243 2
a4244 1
Fri Nov  4 19:04:18 1994  Mike Stump  <mrs@@cygnus.com>
d4246 1
a4246 4
	* gc.c (get_bad_cast_node): New routine to support compile time
	throws of bad_cast.
	* gc.c (build_dynamic_cast): Support throwing of bad_cast at compile
	time.
d4248 2
a4249 1
Fri Nov  4 11:12:00 1994  Mike Stump  <mrs@@cygnus.com>
d4251 2
a4252 1
	* except.c: Add hppa support.
d4254 1
a4254 1
Fri Nov  4 10:50:50 1994  Mike Stump  <mrs@@cygnus.com>
d4256 4
a4259 1
	* except.c: Add rs6000 support.
d4261 1
a4261 1
Thu Nov  3 14:24:23 1994  Mike Stump  <mrs@@cygnus.com>
d4263 2
a4264 1
	* except.c (do_unwind): Add i[34]86 support.
d4266 1
a4266 1
Thu Nov  3 00:10:46 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4268 2
a4269 2
	* pt.c (do_pending_expansions): Unset TREE_PUBLIC on implicit
	instantiations.
d4271 2
a4272 1
Wed Nov  2 15:08:24 1994  Kung Hsu  (kung@@mexican.cygnus.com)
d4274 1
a4274 2
	* decl.c (finish_function): emit types used in method parameters
	into symbol table.
d4276 2
a4277 1
Wed Nov  2 15:05:47 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4279 1
a4279 4
	* pt.c (process_template_parm): Allow pointer to member function
	template parameter types.
	(uses_template_parms): Handle pointer to member function
	CONSTRUCTORs.
d4281 2
a4282 2
	* g++.c (main): Cast first argument of bzero to (char *).
	Pass -lstdc++ instead of -lg++ unless we are invoked as 'g++'.
d4284 1
a4284 1
Mon Oct 31 14:50:48 1994  Kung Hsu  (kung@@mexican.cygnus.com)
d4286 1
a4286 6
	* gc.c (build_dynamic_cast): rewrite to make it work.
	* class.c (finish_vtbls): build more vtables if flag_rtti is on.
	* class.c (modify_all_direct_vtables): ditto.
	* init.c (expand_direct_vtbls_init): expand more vtables if
	flag_rtti is on.
	* decl.c (init_type_desc): add default return.
d4288 1
a4288 1
Tue Oct 25 17:13:09 1994  Kung Hsu  (kung@@mexican.cygnus.com)
d4290 1
a4290 38
	* tree.c (debug_binfo): get rid of the initial size entry of
	vtable.
	* cp-tree.h: change flag_dossier to flag rtti, define type
	descriptor type nodes.
	* decl.c (init_type_desc): new function to initialize type
	descriptor type nodes.
	* decl.c (record_builtin_type): change flag_dossier to flag_rtti.
	* lex.c (init_lex): ditto.
	* decl.c : change variable flag_dossier to flag_rtti.
	* decl.c (duplicate_decls): get rid initial size entry of vtable.
	* decl.c (hack_incomplete_structures): take out assert 164.
	* search.c (get_abstract_virtuals_1): ditto.
	* search.c (dfs_init_vbase_pointers): change CLASSTYPE_DOSSIER to
	CLASSTYPE_RTTI.
	* parse.y: ditto.
	* class.c (prepare_fresh_vtable): for virtual bases, get right
	offset.
	* class.c (add_virtual_function): change flag_dossier to
	flag_rtti.
	* class.c (modify_one_vtable): modify the right rtti entry.
	* class.c (override_one_vtable): get rid of size entry.
	* class.c (finish_struct): change flag_dossier to flag_rtti, and
	build extra vtables, build type descriptors for polymorphic
	classes.
	* gc.c (build_headof): make headof() works correctly with new
	rtti.
	* gc.c (build_typeid): make this function work with new rtti.
	* gc.c (get_typeid): make this function work with new rtti.
	* gc.c (build_bltn_desc): new function for new rtti.
	* gc.c (build_user_desc): ditto.
	* gc.c (build_class_desc): ditto.
	* gc.c (build_ptr_desc): ditto.
	* gc.c (build_attr_desc): ditto.
	* gc.c (build_func_desc): ditto.
	* gc.c (build_ptmf_desc): ditto.
	* gc.c (build_ptmd_desc): ditto.
	* gc.c (build_t_desc): ditto.
	* gc.c : comment out old build_t_desc, build_i_desc, build_m_desc.
d4292 1
a4292 1
Tue Oct 25 13:37:41 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4294 1
a4294 2
	* call.c (convert_harshness): Check for TREE_UNSIGNED differences
	after checking for integral conversions.
d4296 1
a4296 1
Sun Oct 23 13:19:55 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4298 13
a4310 7
	* decl2.c: Declare flag_access_control.
	(struct lang_f_options): Add access-control.
	* expr.c (cplus_expand_expr, NEW_EXPR): Unset flag_access_control
	for the call to expand_aggr_init to copy the object out of the
	pcc_struct_return slot.
	* search.c (compute_access): if (!flag_access_control) return
	access_public.
d4312 1
a4312 1
Fri Oct 21 00:32:54 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4314 1
a4314 2
	* lex.c (cons_up_default_function): Don't try to defer method
	synthesis now.
d4316 2
a4317 3
	* decl.c (init_decl_processing): Use __pure_virtual for abort_fndecl
	instead of abort, since the OSF/1 dynamic linker doesn't like to see
	relocation entries for abort.
d4319 1
a4319 3
	* tree.c (array_type_nelts_total): Use sizetype, not
	integer_type_node.
	(array_type_nelts_top): Ditto.
d4321 2
a4322 1
Thu Oct 20 15:48:27 1994  Mike Stump  <mrs@@cygnus.com>
d4324 1
a4324 6
	* decl.c (grokdeclarator): Added handling for catch parameters
	(CATCHPARM).
	* except.c (expand_start_catch_block): Use the new CATCHPARM context
	instead of NORMAL.
	* except.c (expand_throw): Don't let convert_to_reference complain
	about what we are doing.
d4326 2
a4327 1
Thu Oct 20 12:55:24 1994  Jim Wilson  (wilson@@cygnus.com)
d4329 2
a4330 1
	* method.c (emit_thunk): Call instantiate_virtual_regs.
d4332 1
a4332 1
Wed Oct 19 14:15:33 1994  Mike Stump  <mrs@@cygnus.com>
d4334 1
a4334 2
	* except.c (expand_exception_blocks): Make sure throw code doesn't
	get put in function that won't be output.
d4336 11
a4346 1
Mon Oct 17 18:03:15 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4348 1
a4348 1
	* decl.c (init_decl_processing): Make alloca a builtin.
d4350 2
a4351 1
Thu Oct 27 21:10:25 1994  Craig Burley  (craig@@burley)
d4353 1
a4353 2
	* g++.c (main): Only decrement "added" and set "library" to
	NULL when "library" != NULL (just like 940829 fix).
d4355 2
a4356 1
Mon Oct 17 15:56:11 1994  Mike Stump  <mrs@@cygnus.com>
d4358 1
a4358 3
	* except.c (expand_start_catch_block): Make sure the false label
	gets onto the permanent obstack, as it is used for the exception
	table.
d4360 3
a4362 1
Fri Oct 14 18:54:48 1994  Mike Stump  <mrs@@cygnus.com>
d4364 6
a4369 2
	* class.c (modify_one_vtable): Since the DECL_CONTEXT of fndecl can
	be set just below, use current_fndecl instead.
d4371 1
a4371 1
Fri Oct 14 15:12:22 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4373 1
a4373 3
	* init.c (expand_aggr_vbase_init_1): Don't call expand_aggr_init_1
	with LOOKUP_SPECULATIVELY.
	(expand_default_init): Abort if build_method_call returns NULL_TREE.
d4375 1
a4375 2
	* typeck.c (build_modify_expr): Don't just build a MODIFY_EXPR if
	the rhs is a TARGET_EXPR.
d4377 3
a4379 2
	* parse.y (left_curly): Anonymous types are not affected by #pragma
	interface/implementation.
d4381 2
a4382 2
	* method.c (synthesize_method): Don't call setup_vtbl_ptr for the
	default constructor if it isn't needed.
d4384 1
a4384 2
	* lex.c (cons_up_default_function): Do synthesize methods for
	anonymous types if necessary.
d4386 2
a4387 1
Thu Oct 13 17:44:55 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4389 1
a4389 1
	* method.c (build_decl_overload): Set numeric_outputed_need_bar to 0.
d4391 6
a4396 1
Wed Oct 12 13:27:57 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4398 1
a4398 1
	* typeck.c (build_modify_expr): Understand how to copy an aggregate.
d4400 2
a4401 2
	* init.c (expand_default_init): Ditto.  Also remove some of the
	crufty code that assumes methods will not be synthesized properly.
d4403 1
a4403 3
	* lex.c (cons_up_default_function): If the containing type has no
	name, these functions should never need to be called, so just
	declare them.
d4405 1
a4405 2
	* lex.c (real_yylex): Use HOST_BITS_PER_WIDE_INT to determine the
	bitmask for lexing character constants.
d4407 2
a4408 3
	* call.c (build_method_call): Disable code that tries to do tricky
	stuff with a default parameter that is a constructor call, but
	actually does other tricky stuff that breaks things.
d4410 2
a4411 1
Wed Oct 12 16:14:01 1994  Benoit Belley  <belley@@cae.ca>
d4413 4
a4416 4
	* decl.c (finish_enum): Disable code which forces enums to be signed,
	since this conflicts with their use as bitfields. type_promotes_to
	handles promotion of enums of underlying unsigned types to signed
	integer types.
d4418 1
a4418 1
Wed Oct 12 13:24:03 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4420 2
a4421 2
	* cvt.c (type_promotes_to): Also promote enums to long if
	appropriate.
d4423 2
a4424 2
	* typeck.c (default_conversion): Don't expect type_promotes_to to
	return a main variant.
d4426 1
a4426 1
Wed Oct 12 12:19:45 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4428 2
a4429 2
	* call.c (build_scoped_method_call): Don't lose side effects in the
	object expression when calling a non-existent destructor.
d4431 1
a4431 1
Fri Sep  2 19:05:21 1994  Rohan Lenard  (rjl@@iassf.easams.com.au)
d4433 4
a4436 2
	* call.c (build_scoped_method_call): Remove erroneous error message
	when destructor call is written as a scoped call.
d4438 2
a4439 1
Tue Oct 11 23:48:31 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4441 1
a4441 1
	* various: Cast pointer arguments to bzero and bcopy to char *.
d4443 1
a4443 1
Tue Oct 11 19:34:32 1994  Mike Stump  <mrs@@cygnus.com>
d4445 1
a4445 5
	* class.c (get_derived_offset): Added a type parameter to limit how
	far up the CLASSTYPE_VFIELD_PARENT chain we search.
	* class.c (modify_one_vtable, fixup_vtable_deltas): When forming the
	offset to put into the vtable for the this parameter, make sure we
	don't offset from a parent of the DECL_CONTEXT of the function.
d4447 2
a4448 1
Tue Oct 11 16:10:52 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4450 2
a4451 3
	* pt.c (do_function_instantiation): Set DECL_EXTERNAL and
	TREE_STATIC when setting DECL_INTERFACE_KNOWN.
	(do_type_instantiation): Ditto.
d4453 1
a4453 2
	* lex.c (cons_up_default_function): Set DECL_INTERFACE_KNOWN,
	DECL_EXTERNAL and TREE_STATIC as appropriate.
d4455 3
a4457 2
	* decl2.c (finish_file): Also synthesize methods that don't have
	DECL_EXTERNAL set.  Set interface_unknown before doing so.
d4459 1
a4459 2
	* decl.c (start_function): If DECL_INTERFACE_KNOWN is set on the
	function decl, don't muck with TREE_PUBLIC and DECL_EXTERNAL.
d4461 3
a4463 1
Mon Oct 10 00:56:53 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4465 1
a4465 4
	* lex.c (cons_up_default_function): Mark methods in a template class
	as template instances.  Store the values of interface_unknown and
	interface_only for do_pending_inlines.
	(do_pending_inlines): Use them.
d4467 1
a4467 3
	* decl2.c (finish_file): If we haven't seen a definition of a
	function declared static, make the decl non-PUBLIC so compile_file
	can give an error.
d4469 1
a4469 1
Sun Oct  9 02:42:29 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4471 5
a4475 3
	* method.c (do_build_copy_constructor): Handle anonymous unions.
	(do_build_assign_ref): Ditto.
	(largest_union_member): Move from lex.c.
d4477 1
a4477 1
Sat Oct  8 14:59:43 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4479 3
a4481 34
	Re-implement g++'s vague linkage independent of TREE_PUBLIC.
	* pt.c (instantiate_member_templates): Lose redundant
	-fexternal-templates handling.
	(tsubst): Set TREE_PUBLIC and DECL_EXTERNAL on new decls.  Don't set
	TREE_STATIC or DECL_INTERFACE_KNOWN.
	(do_pending_expansions): Predicate on DECL_INTERFACE_KNOWN instead
	of DECL_EXTERNAL for explicit instantiations.
	(do_function_instantiation): Do the new thing.
	(do_type_instantiation): Ditto.
	(instantiate_template): Deal with member templates defined in a .cc
	file with -fexternal-templates.
	* except.c (expand_exception_blocks): Use DECL_LINKAGE_KNOWN to
	decide whether to stick builtin_throw here.
	* decl2.c (import_export_inline): Predicate on DECL_INTERFACE_KNOWN
	rather than TREE_PUBLIC.  Generally fix rules.
	(finish_file): Use DECL_INITIAL to determine whether or not a method
	has been synthesized, rather than TREE_ASM_WRITTEN.
	* decl.c (warn_extern_redeclared_static): Use DECL_PUBLIC instead of
	TREE_PUBLIC.
	(pushdecl): Ditto.
	(duplicate_decls): Ditto.  Deal with DECL_DECLARED_STATIC and
	DECL_INTERFACE_KNOWN. 
	(redeclaration_error_message): Fix checking for conflicting linkage.
	(define_function): Set DECL_INTERFACE_KNOWN.
	(grokfndecl): Function decls are PUBLIC until we are sure about
	their linkage.  Set DECL_DECLARED_STATIC as needed.
	(start_function): Deal with linkage.  Move pushdecl after linkage
	magic.
	(finish_function): Don't set TREE_ASM_WRITTEN on discarded inlines.
	* cp-tree.h (lang_decl_flags): Add interface_known and
	declared_static.
	(DECL_INTERFACE_KNOWN): New macro.
	(DECL_DECLARED_STATIC): New macro.
	(DECL_PUBLIC): New macro.
d4483 1
a4483 4
	Clean up bogus use of TREE_PUBLIC.
	* class.c (alter_access): Fix mistaken use of TREE_PUBLIC (it
	doesn't correspond to TREE_PROTECTED and TREE_PRIVATE).
	* init.c (do_friend): Don't arbitrarily set TREE_PUBLIC.
d4485 24
a4508 1
Wed Oct  5 13:44:41 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4510 1
a4510 2
	* call.c (build_overload_call_real): Don't immediately do
	array->pointer conversion.
d4512 2
a4513 2
	* pt.c (type_unification): If not passing to a reference, strip
	cv-quals.  Also handle array->pointer conversion.
d4515 9
a4523 1
Tue Oct  4 17:45:37 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4525 1
a4525 2
	* decl.c (grokdeclarator): Don't warn about applying const to a
	const typedef or template type parameter.
d4527 3
a4529 2
	* decl2.c (finish_file): Also synthesize methods after walking the
	vtables.  Ugly ugly ugly.
d4531 4
a4534 1
Mon Oct  3 15:02:41 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4536 1
a4536 1
	* various: Remove lingering remnants of old exception handling code.
d4538 1
a4538 2
	* decl2.c (finish_file): Synthesize methods before walking the
	vtables, so that the vtables get emitted as needed.
d4540 1
a4540 2
	* decl.c (shadow_tag): Remove obsolete code for pushing tags and
	dealing with exceptions.
d4542 1
a4542 1
Mon Oct  3 13:05:27 1994  Ian Lance Taylor  <ian@@sanguine.cygnus.com>
d4544 3
a4546 1
	* Make-lang.in (g++-cross): Depend upon version.o and $(LIBDEPS).
d4548 1
a4548 1
Mon Oct  3 02:59:28 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4550 2
a4551 1
	* decl2.c (finish_file): Fix inline handling.
d4553 1
a4553 1
Sun Oct  2 00:21:56 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4555 2
a4556 2
	* decl.c (grokdeclarator): Handle redundant scope even better.
	({push,pop}_cp_function_context): Take toplev parameter.
d4558 1
a4558 3
	* method.c (synthesize_method): Pass toplev parameter to
	{push,pop}_cp_function_context depending on decl_function_context
	(fndecl).
d4560 1
a4560 2
	* typeck.c (build_x_unary_op): Unary & on OFFSET_REFs is always the
	built-in version.
d4562 24
a4585 2
	* method.c (synthesize_method): Don't be confused by __in_chrg
	parameter.
d4587 2
a4588 1
	* class.c (popclass): Set C_C_D like start_function does.
d4590 2
a4591 1
	* decl.c (grokdeclarator): Handle redundant scope better.
d4593 1
a4593 3
	* parse.y (expr_or_declarator): Add '(' expr_or_declarator ')' rule.
	(direct_notype_declarator): Ditto.
	(complex_direct_notype_declarator): Remove it here.
d4595 1
a4595 1
Sat Oct  1 21:42:18 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4597 2
a4598 2
	* init.c (resolve_offset_ref): Fix types used in resolving .*
	expressions.
d4600 1
a4600 1
Sat Oct  1 15:18:49 1994  Jason Merrill  (jason@@phydeaux.cygnus.com)
d4602 21
a4622 28
	Beginnings of work to synthesize methods only when needed.
	* call.c (build_method_call): Synthesize methods as necessary
	(currently never necessary).
	* class.c (popclass): Don't try to set C_C_D here, as it'll end up
	on the wrong obstack.
	* decl.c (push_cp_function_context): Mostly copied from
	push_c_function_context.
	(pop_cp_function_context): Similarly.
	(finish_function): Reverse order of poplevel and pop_nested_class so
	that current_class_decl is restored properly.  
	(start_function): Ditto.
	(finish_function): Add parameter 'nested'.  Don't call
	permanent_allocation if (nested).
	* various: Pass extra parameter to finish_function.	
	* decl2.c (finish_file): Reorganize end-of-file inline handling,
	synthesizing methods as necessary.
	* lex.c (cons_up_default_function): Call mark_inline_for_output.
	Only synthesize methods immediately if #pragma implementation
	(currently disabled).
	(do_pending_inlines): Call synthesize_method.
	* method.c (synthesize_method): New function; all method synthesis
	goes through here.  Calls do_build_assign_ref and
	do_build_copy_constructor.
	(build_default_constructor): Remove.
	(build_dtor): Ditto.
	(build_assign_ref): Rename to do_build_assign_ref and remove stuff
	done by synthesize_method.
	(build_copy_constructor): Similarly.
d4624 1
a4624 1
Thu Sep 29 16:58:52 1994  Mike Stump  <mrs@@cygnus.com>
d4626 4
a4629 2
	* typeck.c (c_expand_return): Use magic so the backend can fixup the
	assignment into the return register, so cleanups won't clobber it.
d4631 1
a4631 1
Thu Sep 29 13:08:50 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4633 2
a4634 2
	* method.c (hack_identifier): Don't call assemble_external for
	template decls.
d4636 1
a4636 2
	* decl.c (finish_decl): Also end temporary allocation if the decl in
	question has a type of error_mark_node.
d4638 2
a4639 1
Wed Sep 28 21:45:00 1994  Mike Stump  <mrs@@cygnus.com>
d4641 1
a4641 2
	* typeck.c (build_modify_expr): When optimizing ?: on lhs, make sure
	that if the ?: was a reference type, that the subparts will be also.
d4643 2
a4644 1
Wed Sep 28 16:14:04 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d4646 1
a4646 1
	* except.c (register_exception_table): Use Pmode, not PTRmode.
d4648 3
a4650 1
Fri Sep 23 13:54:27 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4652 1
a4652 2
	* lex.c (do_pending_inlines): Do method synthesis after the
	pending_inlines have been reversed.
d4654 2
a4655 1
Thu Sep 22 12:53:03 1994  Per Bothner  (bothner@@kalessin.cygnus.com)
d4657 1
a4657 2
	* decl2.c (finish_file):  Fix Brendan's fix:  Only call
	register_exception_table if there is a non-empty exception table.
d4659 1
a4659 1
Thu Sep 22 12:03:46 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d4661 1
a4661 2
	* decl2.c (finish_file): Only do register_exception_table if
	-fhandle-exceptions is being used.
d4663 2
a4664 1
Wed Sep 21 19:01:51 1994  Per Bothner  (bothner@@kalessin.cygnus.com)
d4666 3
a4668 8
	* except.c (output_exception_table_entry):  Simplify
	by using assemble_integer.
	(build_exception_table):  Change to return a count.
	Cleanup to use standard macros, instead of hard-wired
	sparc asm format.  Don't make __EXCEPTION_TABLE__ global.
	(register_exception_table):  New function.  Generate call to builtin.
	* decl2.c (finish_file):  Call register_exception_table.
	* cp-tree.h (build_exception_table):  Fix prototype.
d4670 1
a4670 1
Wed Sep 21 13:20:42 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d4672 2
a4673 1
	* tree.c (break_out_calls): Don't try to duplicate the DECL_INITIAL.
d4675 1
a4675 2
	* decl2.c (delete_sanity): Give an error at trying to delete a
	function.
d4677 2
a4678 1
Wed Sep 21 11:47:10 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4680 1
a4680 2
	* lex.c (cons_up_default_function): Mark synthesized destructors
	inline.
d4682 2
a4683 5
	* decl.c (duplicate_decls): Ignore redeclarations of wchar_t as
	something other than __wchar_t, complaining if -pedantic and not in
	a system header.

Tue Sep 20 09:43:28 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4685 1
a4685 2
	* decl.c (xref_tag): Set up BINFO_INHERITANCE_CHAIN on base binfos
	here.
d4687 2
a4688 2
	* typeck.c (build_modify_expr): Require complete type after checking
	for error_mark_node.
d4690 1
a4690 2
	* call.c (build_method_call): Print parmtypes when complaining of
	ambiguous call.
d4692 1
a4692 2
	* typeck.c (build_modify_expr): Handle assignment to array from
	non-array.
d4694 3
a4696 1
	* decl.c (lookup_name_real): Deal with got_scope == error_mark_node.
d4698 3
a4700 1
	* call.c (build_method_call): Don't bother with the exact match.
d4702 1
a4702 1
Mon Sep 19 00:51:39 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4704 3
a4706 16
	* init.c (expand_aggr_init): If we munge the type of the variable,
	also munge the type of the initializer.

	* decl.c (grokdeclarator): Use <= when comparing to RID_LAST_MODIFIER.
	(init_decl_processing): Push artificial declaration of wchar_t so
	people don't have to declare it before they can use it.

	* error.c (cp_line_of): return lineno in lieu of 0.

	* typeck.c (convert_for_assignment): Handle conversion of pmfs to
	int and bool.
	(build_component_ref): Fold the COMPONENT_REF in case it can be
	reduced.

	* typeck2.c (store_init_value): Don't pedwarn about non-constant
	bracketed initializers for automatic variables.
d4708 1
a4708 1
Sun Sep 18 10:12:12 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4710 2
a4711 1
	* error.c (dump_decl): Don't say `typedef enum foo foo'.
d4713 1
a4713 3
	* decl.c (start_decl): Don't set TREE_PUBLIC on template decls just
	because they're affected by #pragma i/i.  We'll deal with that when
	they get instantiated.
d4715 2
a4716 1
	* typeck.c (build_unary_op): Clean up cruft in ADDR_EXPR case.
d4718 1
a4718 2
	* class.c (instantiate_type): Set TREE_CONSTANT on instantiated
	ADDR_EXPRs if appropriate.
d4720 4
a4723 1
	* decl.c (build_ptrmemfunc_type): Unset IS_AGGR_TYPE on pmf types.
d4725 3
a4727 3
	* typeck.c (build_ptrmemfunc): Handle &overloaded_method as an
	initializer properly.
	* typeck2.c (digest_init): Ditto.
d4729 1
a4729 3
	* tree.c (cp_build_type_variant): Like c_build_type_variant, except
	it uses build_cplus_array_type.
	* *.c: Use cp_build_type_variant instead of c_build_type_variant.
d4731 10
a4740 2
	* pt.c (do_type_instantiation): Don't try to instantiate nested
	enums.
d4742 2
a4743 1
Tue Sep 13 10:56:58 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4745 1
a4745 2
	* cvt.c (build_up_reference): Handle preincrement and predecrement
	properly.
d4747 1
a4747 1
Tue Sep 13 09:51:59 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d4749 1
a4749 2
	* decl.c (finish_decl): Only lay out the rtl for DECL if it is, in
	fact, static.
d4751 1
a4751 1
Mon Sep 12 14:40:30 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d4753 1
a4753 2
	* decl.c (finish_decl): Lay out the rtl for DECL before doing
	grok_reference_init, in case it's static.
d4755 2
a4756 1
Mon Sep 12 12:45:38 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4758 1
a4758 4
	* class.c (finish_struct): Don't synthesize constructors if the
	class has a field with the same name as the class.  Don't die on
	classes with no constructors or destructors.  Don't die if the head
	and tail of the class are in different files.
d4760 2
a4761 2
	* decl.c (grokdeclarator): Don't treat a function pointer field
	with the same name as the class as a constructor.
d4763 1
a4763 1
Fri Sep  9 13:17:00 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4765 1
a4765 1
	* typeck.c (build_c_cast): Pull constant values out of their
d4768 1
a4768 2
	* decl.c (duplicate_decls): Only propagate DECL_CHAIN in
	FUNCTION_DECLs and TEMPLATE_DECLs.
d4770 6
a4775 1
Thu Sep  8 10:07:48 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4777 1
a4777 2
	* decl.c (duplicate_decls): Propagate DECL_CHAIN in all DECLs that
	have it.
d4779 3
a4781 3
	* pt.c (unify): REALs and INTEGERs only unify with their own genus.
	(instantiate_member_templates): Don't muck with DECL_EXTERNAL and
	TREE_PUBLIC unless -fexternal-templates.
d4783 1
a4783 1
Wed Sep  7 13:17:10 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4785 2
a4786 4
	* pt.c (do_type_instantiation): Call instantiate_member_templates.
	Deal with specializations.
	(tsubst): Don't stick the mangled name in DECL_NAME for function
	instantiations.  Don't push them, either.
d4788 2
a4789 5
	* decl2.c (grokfield): Move code for generating the
	DECL_ASSEMBLER_NAME for static members from here.
	* method.c (build_static_name): To here.
	* decl.c (grokvardecl): Call build_static_name.
	(duplicate_decls): Keep old DECL_ASSEMBLER_NAME.
d4791 2
a4792 1
Mon Sep  5 12:49:18 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4794 1
a4794 3
	* call.c (build_method_call): if -Wsynth, warn when selecting
	synthesized op= over user-supplied one cfront would select.
	* decl2.c (lang_decode_option): Handle -Wsynth.
d4796 2
a4797 1
Fri Sep  2 15:11:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4799 2
a4800 2
	* decl.c (finish_enum): Overhaul to fix several bugs.
	(start_enum): Disable useless code.
d4802 1
a4802 1
Thu Sep  1 16:04:54 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4804 2
a4805 4
	* typeck.c (c_expand_return): Warn about returning a reference to a
	temporary.
	(convert_arguments): Increment argument counter when using default
	arguments, too.
d4807 2
a4808 1
Wed Aug 31 14:29:22 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4810 1
a4810 2
	* decl.c (finish_decl): If the type of decl is error_mark_node,
	don't bother trying to do anything.
d4812 4
a4815 2
	* typeck.c (convert_for_initialization): If the rhs contains a
	constructor call, pretend the lhs type needs to be constructed.
d4817 1
a4817 2
	* init.c (expand_default_init): If we stick the object inside the
	initializer, mark the initializer used.
d4819 3
a4821 1
Tue Aug 30 13:50:18 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4823 2
a4824 3
	* method.c (build_assign_ref): return *this;
	(build_assign_ref): Fix base assignment order.
	(build_copy_constructor): Fix member init order.
d4826 1
a4826 1
Mon Aug 29 13:54:39 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d4828 2
a4829 2
	* g++.c (main): Remember to clear out SAW_SPECLANG after we see
	its argument.
d4831 1
a4831 1
Sat Aug 27 09:36:03 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4833 3
a4835 1
	* method.c (build_copy_constructor): Also copy virtual bases.
d4837 1
a4837 1
Fri Aug 26 17:05:15 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4839 4
a4842 2
	* lex.c (do_pending_inlines): Clear out pending_inlines before doing
	any synthesis.  Also first set deja_vu on all pending_inlines.
d4844 1
a4844 5
	* method.c (build_assign_ref): Use build_member_call to invoke base
	operator=, rather than build_modify_expr.  And use
	build_reference_type instead of TYPE_REFERENCE_TO.
	(build_copy_constructor): Use TYPE_NESTED_NAME to identify the
	basetype.
d4846 2
a4847 2
	* decl2.c (grokfield): Don't complain about undefined local class
	methods.
d4849 2
a4850 5
	* class.c (finish_struct): Don't try to synthesize methods here.
	* lex.c (do_pending_inlines): Instead, synthesize them here.
	(init_lex): Initialize synth_obstack.
	(cons_up_default_function): Stick synthesis request on
	pending_inlines.
d4852 5
a4856 1
Fri Aug 26 12:24:14 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d4858 2
a4859 4
	* call.c (build_method_call) [PCC_STATIC_STRUCT_RETURN]: Also
	accept an RTL_EXPR in what we're about to use for the instance,
	since anything which would end up with pcc_struct_return set
	inside cplus_expand_expr.
d4861 1
a4861 1
	* cp-tree.h (cons_up_default_function): Note change of prototype.
d4863 2
a4864 1
Thu Aug 25 23:05:30 1994  Gerald Baumgartner  (gb@@cs.purdue.edu)
d4866 1
a4866 5
	* class.c (finish_struct): Undid change from Aug 21 testing
	CLASSTYPE_INTERFACE and CLASSTYPE_VTABLE_NEEDS_WRITING.
	* parse.y (left_curly): Ditto, undid change from Aug 21.
	* decl.c (xref_tag): Undid change from Aug 21, set
	CLASSTYPE_INTERFACE correctly, and added comments.
d4868 2
a4869 1
Thu Aug 25 00:36:31 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4871 2
a4872 12
	Rework approach to synthesized methods; don't go through the parser
	anymore.
	* class.c (finish_struct): Use new synthesis approach.
	* lex.c (cons_up_default_function): Now just creates declaration,
	not code.
	(largest_union_member): #if 0 out.
	(default_assign_ref_body): Ditto.
	(default_copy_constructor_body): Ditto.
	* method.c (build_default_constructor): New function to synthesize X().
	(build_copy_constructor): Synthesize X(X&).
	(build_assign_ref): Synthesize X::operator=(X&).
	(build_dtor): Synthesize ~X().
d4874 1
a4874 2
	* error.c (cp_line_of): If we're dealing with an artificial
	TYPE_DECL, look at the type instead.
d4876 38
a4913 1
Wed Aug 24 11:11:50 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4915 1
a4915 2
	* init.c (sort_member_init): Check warn_reorder.
	* decl2.c (lang_decode_option): Handle -W{no-,}reorder.
d4917 2
a4918 3
	* cp-tree.h (CLASSTYPE_SOURCE_LINE): New macro.
	* error.c (cp_line_of): Use CLASSTYPE_SOURCE_LINE for aggregates.
	* class.c (finish_struct): Set CLASSTYPE_SOURCE_LINE.
d4920 1
a4920 1
Tue Aug 23 09:28:35 1994  Mike Stump  <mrs@@cygnus.com>
d4922 1
a4922 2
	* error.c (dump_decl): Improve wording, so that error messages
	dont't read template<, class foo>...
d4924 1
a4924 1
Mon Aug 22 15:30:51 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d4926 1
a4926 3
	* parse.y (label_colon): Also match a TYPENAME as a label name,
	since they may have declared a class by that name but have also
	tried to have a local label under the same name.
d4928 1
a4928 2
	* pt.c (coerce_template_parms): Call cp_error, not cp_error_at,
	for the message so they know at what point it was instantiated.
d4930 1
a4930 1
Sun Aug 21 23:07:35 1994  Gerald Baumgartner  (gb@@cs.purdue.edu)
d4932 9
a4940 6
	* class.c (finish_struct): Move setting of CLASSTYPE_INTERFACE and
	CLASSTYPE_VTABLE_NEEDS_WRITING for signatures up to left_curly time.
	* decl.c (xref_tag): Move setting of CLASSTYPE_INTERFACE and
	CLASSTYPE_VTABLE_NEEDS_WRITING for signatures down to left_curly time.
	* parse.y (left_curly): New final resting place for setting
	CLASSTYPE_INTERFACE and CLASSTYPE_VTABLE_NEEDS_WRITING for signatures.
d4942 2
a4943 2
	* class.c (finish_struct): Don't test for function/field name
	conflicts in signatures, since all the fields are compiler-constructed.
d4945 1
a4945 1
Fri Aug 19 14:04:47 1994  Kung Hsu  (kung@@mexican.cygnus.com)
d4947 3
a4949 6
	* method.c (build_overload_nested_name): in qualified name
	mangling, the template with value instantiation will have numeric
	at end and may mixed with the name length of next nested level.
	Add a '_' in between.
	* method.c (build_overload_name): ditto.
	* method.c (build_overload_identifier): ditto.
d4951 1
a4951 1
Thu Aug 18 16:24:43 1994  Mike Stump  <mrs@@cygnus.com>
d4953 1
a4953 1
	* error.c (dump_decl): Handle NULL args.
d4955 1
a4955 1
Thu Sep 29 16:15:36 1994  Michael I Bushnell  <mib@@churchy.gnu.ai.mit.edu>
d4957 2
a4958 2
	* g++.c: Rework last change so it's done like collect.c (and 
	gcc.c).
d4960 4
a4963 1
Wed Sep 14 10:17:27 1994  Michael I Bushnell  <mib@@churchy.gnu.ai.mit.edu>
d4965 2
a4966 2
	* g++.c: Include <sys/errno.h> in case `errno' is a macro
	as permitted by ANSI C.
d4968 1
a4968 1
Thu Aug 18 12:48:09 1994  Mike Stump  <mrs@@cygnus.com>
d4970 7
a4976 6
	* class.c (finish_struct): Move setting of CLASSTYPE_INTERFACE and
	CLASSTYPE_VTABLE_NEEDS_WRITING up to left_curly time.
	* decl.c (xref_tag): Move setting of CLASSTYPE_INTERFACE and
	CLASSTYPE_VTABLE_NEEDS_WRITING down to left_curly time.
	* parse.y (left_curly): New final resting place for setting
	CLASSTYPE_INTERFACE and CLASSTYPE_VTABLE_NEEDS_WRITING.
d4978 4
a4981 1
Thu Aug 11 11:32:42 1994  H.J. Lu  (hjl@@nynexst.com)
d4983 1
a4983 2
	* g++.c (main): Only decrement "added" and set "library" to
	  NULL when "library" != NULL.
d4985 1
a4985 1
Sat Aug 13 00:14:52 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4987 3
a4989 3
	* decl.c (grokdeclarator): Don't set TREE_PUBLIC on a function decl
	just because its class has a known interface.
	(decls_match): Deal with new format of template parms.
d4991 1
a4991 2
	* lex.c (cons_up_default_function): Don't play with TREE_PUBLIC and
	DECL_EXTERNAL here.
d4993 1
a4993 1
Fri Aug 12 01:55:15 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d4995 4
a4998 3
	* decl.c (pushtag): SET_DECL_ARTIFICIAL on gratuitous typedefs.
	(xref_defn_tag): Ditto.
	(pushdecl): Only allow artificial typedefs to be shadowed.
d5000 2
a5001 2
	* init.c (emit_base_init): Pass the right binfos to
	expand_aggr_init_1.
d5003 1
a5003 2
	* class.c (delete_duplicate_fields_1): Make it work right.
	(finish_struct): Catch function/field name conflict.
d5005 1
a5005 2
	* decl2.c (check_classfn): Pass the function to cp_error, not just
	the name.
d5007 1
a5007 3
	* init.c (sort_member_init): Warn when order of member initializers
	does not match order of member declarations.
	(emit_base_init): Call expand_aggr_init_1 with LOOKUP_PROTECT.
d5009 1
a5009 1
	* error.c (dump_expr): Handle lists of functions.
d5011 2
a5012 5
	* decl.c (start_function): #pragma interface only affects functions
	that would otherwise be static.
	(finish_decl): Don't warn about an unused variable if it has both
	constructor and destructor, since the 'resource allocation is
	initialization' idiom is relatively common.
d5014 3
a5016 7
	* typeck.c (comp_target_types): Don't handle TEMPLATE_TYPE_PARMs.
	(comp_target_parms): Ditto.
	(compparms): Never consider default parms.
	(common_base_type): Don't choose a virtual baseclass if there is a
	more derived class in common.
	(build_conditional_expr): If pedantic, pedwarn about conversion to
	common base in conditional expr.
d5018 2
a5019 1
	* class.c (instantiate_type): Handle template instantiation better.
d5021 2
a5022 3
	* typeck.c (convert_arguments): Don't try to get tricky and convert
	to int directly when PROMOTE_PROTOTYPES is set, as it breaks
	user-defined conversions.
d5024 3
a5026 2
	* lex.c (check_for_missing_semicolon): Also give error at end of
	file.
d5028 1
a5028 1
	* call.c (build_method_call): Don't promote arrays to pointers here.
d5030 1
a5030 2
	* typeck.c (convert_arguments): Don't require the actual parameter
	to be of a complete type if the formal parameter is a reference.
d5032 1
a5032 1
Thu Aug 11 15:21:40 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5034 1
a5034 2
	* decl.c (grokdeclarator): Soften 'static' on member function error
	to pedwarn.
d5036 1
a5036 2
	* init.c (build_new): Don't automatically save rval.
	(build_offset_ref): Do field lookup with proper basetype_path.
d5038 4
a5041 1
Thu Aug 11 12:46:54 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d5043 1
a5043 11
	* errfn.c (cp_silent): Declare to mark when we should avoid
	emitting warnings and errors.
	(cp_error): Check it.
	(cp_warning): Likewise.
	(cp_pedwarn): Likewise.
	(cp_compiler_error): Likewise.
	(cp_error_at): Likewise.
	(cp_warning_at): Likewise.
	(cp_pedwarn_at): Likewise.
	* call.c (compute_conversion_costs): Set CP_SILENT when we start
	out, and make sure we turn it off before we leave.
d5045 1
a5045 1
Thu Aug 11 00:02:54 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5047 1
a5047 2
	* decl2.c (grok_array_decl): Try computing *(A+B) if neither
	argument is obviously an array.
d5049 3
a5051 1
Wed Aug 10 15:32:04 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5053 4
a5056 1
	* typeck.c (c_expand_start_case): Do cleanups here.
d5058 1
a5058 2
	* parse.y (xcond): Do bool conversion here, too.
	(simple_stmt, SWITCH case): Don't do cleanups here.
d5060 2
a5061 2
	* decl.c (duplicate_decls): Don't treat builtins that have been
	explicitly declared specially.
d5063 1
a5063 1
Tue Aug  9 01:16:09 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5065 2
a5066 2
	* tree.c (make_deep_copy): Support copying pointer, reference,
	function, array, offset and method types.
d5068 1
a5068 5
	* decl.c (init_decl_processing): Mark exit and abort as
	BUILT_IN_NONANSI so that duplicate_decls is kinder about
	redeclaration.
	(duplicate_decls): Don't give two errors for redeclaring a C
	function with the same parms but a different return type.
d5070 1
a5070 3
	* parse.y (paren_cond_or_null): Do cleanup and bool conversion here.
	(condition): Instead of here.
	(simple_stmt, SWITCH case): Also do cleanup here.
d5072 1
a5072 1
	* decl2.c (finish_anon_union): Only break out FIELD_DECLs.
d5074 2
a5075 3
	* call.c (build_method_call): Don't throw away the side effects of
	the object in a call to a non-existent constructor.
	* parse.y (primary): Ditto.
d5077 1
a5077 1
	* method.c (build_decl_overload): Oop.
d5079 27
a5105 2
	* decl2.c (lang_decode_option): Deal with flag_no_nonansi_builtin,
	warn about uselessness of specifying -fansi-overloading.
d5107 1
a5107 2
	* method.c (build_decl_overload): Treat any non-member new with one
	parameter as __builtin_new.
d5109 1
a5109 2
	* decl.c (init_decl_processing): Setup built-in meanings of exit,
	_exit and abort.
d5111 1
a5111 1
Mon Aug  8 15:03:30 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5113 2
a5114 2
	* error.c (dump_readonly_or_volatile): Put a space between const and
	volatile if both apply.
d5116 2
a5117 4
	* init.c (perform_member_init): Clean up after this initialization.
	(emit_base_init): Clean up after each base init, not after all have
	been done.
	(expand_aggr_vbase_init_1): Clean up after this init.
d5119 4
a5122 1
Sun Aug  7 14:55:05 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5124 3
a5126 1
	* call.c (build_method_call): Deal with destroying references.
d5128 2
a5129 4
	* parse.y (condition): Do bool_truthvalue_conversion here.
	(paren_expr_or_null): And here.
	(simple_if): Not here.
	(simple_stmt): Or here.
d5131 4
a5134 1
Sat Aug  6 22:29:45 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5136 2
a5137 3
	* parse.y (paren_expr_or_null): Wrap the expression in a
	CLEANUP_POINT_EXPR.
	(condition): Ditto.
d5139 1
a5139 1
Sat Aug  6 19:46:37 1994  Rohan Lenard  (rjl@@easams.com.au)
d5141 1
a5141 2
	* call.c (build_scoped_method_call): Fix error message when
	destructor call refers to a nonexistent type.
d5143 1
a5143 1
Sat Apr 16 22:43:30 1993  Gerald Baumgartner  (gb@@cs.purdue.edu)
d5145 1
a5145 5
	* lex.h (rid): Deleted RID_RAISES, it's never used.
	Moved RID_PUBLIC, RID_PRIVATE, RID_PROTECTED, RID_EXCEPTION,
	RID_TEMPLATE and RID_SIGNATURE to the end of the enumeration,
	they don't need to be touched in `grokdeclarator.'
	(RID_LAST_MODIFIER): Defined macro to be RID_MUTABLE.
d5147 2
a5148 2
	* decl.c (grokdeclarator): Use RID_LAST_MODIFIER instead of
	RID_MAX as loop limit for finding declaration specifiers.
d5150 2
a5151 1
Sat Apr  3 21:59:07 1993  Gerald Baumgartner  (gb@@cs.purdue.edu)
d5153 1
a5153 2
	* lex.c (debug_yytranslate): Moved to parse.y since it needs to
	access `yytname,' which is static in parse.c.
d5155 2
a5156 1
Fri Apr  2 23:36:57 1993  Gerald Baumgarnter  (gb@@cs.purdue.edu)
d5158 2
a5159 2
	* cp-tree.h (GNU_xref_ref): Fixed typo in extern declaration, it
	was `GNU_xref_def' instead of `GNU_xref_ref.'
d5161 1
a5161 1
Fri Aug  5 14:20:16 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5163 1
a5163 3
	* pt.c (do_function_instantiation): Don't set TREE_PUBLIC and
	DECL_EXTERNAL on 'extern' instantiations; wait until EOF to do that.
	(do_type_instantiation): Ditto.
d5165 1
a5165 3
	* decl2.c (import_export_inline): Decides at EOF what an inline's
	linkage should be.
	(finish_file): Call it.
d5167 3
a5169 5
	* decl.c (start_function): Don't rely on the settings of TREE_PUBLIC
	and DECL_EXTERNAL from do_*_instantiation.  Only set
	DECL_DEFER_OUTPUT on inlines whose linkage might actually change.
	(finish_function): Use DECL_DEFER_OUTPUT to decide which inlines to
	mark for later consideration, rather than DECL_FUNCTION_MEMBER_P.
d5171 2
a5172 1
Fri Aug  5 01:12:20 1994  Mike Stump  <mrs@@cygnus.com>
d5174 2
a5175 8
	* class.c (get_class_offset_1, get_class_offset): New routine to
	find the offset of the class where a virtual function is defined,
	from the complete type.
	* class.c (modify_one_vtable, fixup_vtable_deltas): Use
	get_class_offset instead of virtual_offset as get_class_offset will
	always provide the right answer.
	* tree.c (virtual_offset): Remove.  It only ever worked some of the
	time.
d5177 2
a5178 1
Tue Aug  2 12:44:21 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5180 2
a5181 2
	* call.c (build_method_call): Put back unary_complex_lvalue call
	that I thought was redundant.
d5183 1
a5183 1
	* typeck.c (c_expand_return): Fix a case I missed before.
d5185 3
a5187 1
Sun Jul 31 17:54:02 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5189 1
a5189 3
	* pt.c (unify): Strip cv-quals from template type arguments (when
	'const T*' is matched to 'const char*', that does not mean that T is
	'const char').
d5191 2
a5192 1
Fri Jul 29 01:03:06 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5194 1
a5194 2
	* pt.c (do_type_instantiation): Instantiate nested TAGS, not
	typedefs.  Third time's the charm?
d5196 3
a5198 9
	* parse.y (template_parm): Support default template parms.
	* pt.c (process_template_parm): Ditto.
	(end_template_parm_list): Ditto.
	(coerce_template_parms): Ditto.
	(mangle_class_name_for_template): Ditto.
	(push_template_decls): Ditto.
	(unify): Ditto.
	* method.c (build_overload_identifier): Ditto.
	* error.c (dump_decl): Ditto.
d5200 2
a5201 1
Wed Jul 27 17:47:00 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5203 1
a5203 1
	* pt.c (do_type_instantiation): Only instantiate nested *classes*.
d5205 1
a5205 1
Tue Jul 26 13:22:40 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5207 1
a5207 2
	* search.c (note_debug_info_needed): Also emit debugging information
	for the types of fields.
d5209 1
a5209 1
Mon Jul 25 00:34:44 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5211 2
a5212 3
	* pt.c (lookup_template_class): Pass 'template' to
	coerce_template_parms instead of 'in_decl', since it's a more
	meaningful context.
d5214 4
a5217 3
	* typeck.c (c_expand_return): Make sure any cleanups for the return
	expression get run.
	(build_c_cast): Use CONVERT_EXPR for conversion to void.
d5219 2
a5220 4
	* pt.c (do_type_instantiation): Also instantiate nested types.

	* typeck.c (convert_for_assignment): Don't die when comparing
	pointers with different levels of indirection.
d5222 1
a5222 3
	* decl.c (grokdeclarator): The sub-call to grokdeclarator for
	class-local typedefs sets DECL_ARGUMENTS, so we need to clear it
	out.
d5224 1
a5224 2
	* decl2.c (finish_anon_union): Don't die if the union has no
	members.
d5226 1
a5226 2
	* decl.c (grokdeclarator): Undo changes to declspecs when we're done
	so that 'typedef int foo, bar;' will work.
d5228 2
a5229 2
	* decl2.c (finish_file): Don't call expand_aggr_init for
	non-aggregates.
d5231 2
a5232 1
Mon Jul 25 00:03:10 1994  Teemu Torma  (tot@@trema.fi)
d5234 4
a5237 3
	* decl.c (finish_function): We can't inline constructors and
	destructors under some conditions with -fpic, but don't unset
	DECL_INLINE.
d5239 2
a5240 1
Mon Jul 25 00:03:10 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5242 1
a5242 1
	* typeck.c (build_object_ref): Make sure 'datum' is a valid object.
d5244 1
a5244 1
Sun Jul 24 14:19:31 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5246 1
a5246 3
	* class.c (finish_struct): Don't set DECL_FIELD_BITPOS on
	non-fields.
	(finish_struct_methods): Use copy_assignment_arg_p.
d5248 5
a5252 2
	* cvt.c (cp_convert): If expr is an OFFSET_REF, resolve it instead
	of giving an error.
d5254 1
a5254 2
	* typeck.c (build_binary_op_nodefault): Don't set result_type if we
	don't know how to compare the operands.
d5256 2
a5257 3
	* decl.c (grokdeclarator): Avoid seg fault when someone uses '__op'
	as a declarator-id in their program.  Like the Linux headers do.
	Arrgh.
d5259 1
a5259 2
	* tree.c (lvalue_p): Treat calls to functions returning objects by
	value as lvalues again.
d5261 3
a5263 2
	* typeck.c (build_component_addr): Use convert_force to convert the
	pointer in case the component type is also a private base class.
d5265 2
a5266 2
	* search.c (get_matching_virtual): Fix bogus warning of overloaded
	virtual.
d5268 4
a5271 2
	* pt.c (overload_template_name): Set DECL_ARTIFICIAL on the created
	TYPE_DECL to fix bogus shadowing warnings.
d5273 1
a5273 1
Fri Jul 22 01:15:32 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5275 3
a5277 2
	* init.c (expand_aggr_init_1): const and volatile mismatches do not
	prevent a TARGET_EXPR from initializing an object directly.
d5279 2
a5280 1
Tue Jul 19 17:55:37 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5282 1
a5282 3
	* cvt.c (build_up_reference): Allow building up references to
	`this', don't warn about making references to artificial variables
	(like `this').
d5284 3
a5286 1
	* tree.c (lvalue_p): `this' is not an lvalue.
d5288 1
a5288 2
	* call.c (build_method_call): Accept using a typedef name (or
	template type parameter) for explicit destructor calls.
d5290 2
a5291 1
Wed Jul 13 03:57:54 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5293 4
a5296 2
	* method.c (hack_identifier): Put back old code so lists of
	non-functions will be handled properly.
d5298 1
a5298 2
	* cp-tree.h (TYPE_NEEDS_CONSTRUCTING): #if 0 out; this macro is now
	defined in the language-independent tree.h.
d5300 1
a5300 2
	* tree.c (count_functions): Avoid bogus warning when compiling this
	function.
d5302 190
a5491 88
Mon Jul 11 18:37:20 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grok_reference_init): Always save the initializer of a
	reference.

Fri Jul  8 17:41:46 1994  Mike Stump  <mrs@@cygnus.com>

	* decl.c (cplus_expand_expr_stmt): Wrap statement expressions inside
	CLEANUP_POINT_EXPRs so that the stack slots can be reused.
	(disabled for now)

Fri Jul  8 12:59:38 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* method.c (hack_identifier): Fix for new overloading.

	* typeck.c (build_binary_op_nodefault): Don't mess with division by
	zero.

Fri Jul  8 13:20:28 1994  Gerald Baumgartner  (gb@@cs.purdue.edu)

	* decl2.c (finish_file): Only call walk_sigtables, if
	flag_handle_signatures is turned on, don't waste time otherwise.

Fri Jul  8 02:27:41 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (push_overloaded_decl): Don't create overloads of one when
	shadowing a class type.
	* typeck.c (build_x_function_call): Complain about overloads of one.

	* decl.c (grokdeclarator): Don't try to treat a char* as a tree.
	(grokdeclarator): Fix setting of TREE_STATIC.
	(start_decl): Clear DECL_IN_AGGR_P after calling duplicate_decls.

Thu Jul  7 22:20:46 1994  Gerald Baumgartner  (gb@@andros.cygnus.com)

	* cp-tree.h (walk_sigtables): Created extern declaration.
	* decl2.c (walk_sigtables): Created function, patterned after
	walk_vtables, even though we only need it to write out sigtables.
	(finish_sigtable_vardecl): Created function.
	(finish_vtable_vardecl): Changed 0 to NULL_PTR.
	(finish_file): Call walk_sigtables.

	* sig.c (build_signature_table_constructor): Mark class member
	function pointed to from signature table entry as addressable.

Thu Jul  7 13:39:37 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (start_decl): Check new decl of static member variable
	against the declaration in the class here.
	(grokvardecl): Instead of here.

	* class.c (prepare_fresh_vtable): Call import_export_vtable if not
	-fvtable-thunks.
	(build_vtable): Ditto.

	* decl2.c (import_export_vtable): Move logic for deciding the
	interface of a template class from here.
	(import_export_template): To here.
	(finish_vtable_vardecl): Call import_export_template before
	import_export_vtable.

Wed Jul  6 20:25:48 1994  Mike Stump  <mrs@@cygnus.com>

	* except.c (init_exception_processing): Setup interim_eh_hook to
	call lang_interim_eh. 
	* except.c (do_unwind): Propagate throw object value across
	stack unwinding.
	* except.c (saved_throw_value): Used to hold the value of the object
	being thrown.  It is always a reference to the real value.
	* except.c (expand_start_catch_block): Add handling for the
	value of the exception object.
	* except.c (expand_start_catch_block): Add handler for the handler,
	so that throws inside the handler go to the outer block.
	* except.c (expand_end_catch_block): Ditto.
	* parse.y (handler_args): Use parm instead, as the other doesn't yet
	handle references correctly.

Wed Jul  6 17:55:32 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* decl2.c (mark_vtable_entries):  If -ftable-thunks, set the
	vtable entry properly to abort.

Tue Jul  5 14:07:54 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (build_binary_op_nodefault): Downgrade division by zero
	errors to warnings.

	* call.c (build_overload_call_real): Handle fnname being a list of
d5493 34
a5526 4
	* typeck.c (build_x_function_call): Pass list of functions to
	build_overload_call, not just the name.
	* tree.c (count_functions): Complain when called for invalid
	argument.
d5528 1
a5528 3
	* decl.c (grokdeclarator): Fix settings of TREE_STATIC, TREE_PUBLIC
	and DECL_EXTERNAL on static members and initialized const members.
	* decl2.c (grokfield): Reflect this change.
d5530 2
a5531 1
Fri Jul  1 09:35:51 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5533 2
a5534 1
	* parse.y (init): ANSI C++ does not forbid { }.
d5536 1
a5536 1
Thu Jun 30 00:35:22 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5538 3
a5540 2
	* decl2.c (lang_decode_option): Set warn_nonvdtor along with -Wall.
	warn_nonvdtor defaults to off.
d5542 3
a5544 2
	* class.c (instantiate_type): Use comptypes rather than relying on 
	types to satisfy ==.
d5546 99
a5644 2
	* decl.c (start_function): Set DECL_DEFER_OUTPUT on all inlines that
	might be static.
d5646 3
a5648 1
	* tree.c (build_cplus_new): Never build WITH_CLEANUP_EXPRs.
d5650 5
a5654 1
	* decl.c (grok_reference_init): Deal with ADDR_EXPRs of TARGET_EXPRs.
d5656 2
a5657 2
	* cvt.c (cp_convert): Pass 0 to with_cleanup_p arg of
	build_cplus_new.
d5659 1
a5659 1
Wed Jun 29 22:31:09 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5661 4
a5664 2
	* decl2.c (finish_file): Maybe consider static inlines multiple
	times, in case they reference each other.
d5666 1
a5666 1
Tue Jun 28 11:58:38 1994  Gerald Baumgartner  (gb@@cs.purdue.edu)
d5668 1
a5668 3
	* class.c (finish_struct): Don't `cons_up_default_function's
	for signatures.
	(finish_struct): Handle an empty method_vec correctly.
d5670 1
a5670 4
	* decl.c (grokdeclarator): Don't warn about a signature being
	empty in a signature pointer declaration if we only saw a
	forward declaration of the signature.  Changed `warning's into
	`cp_warning's.
d5672 3
a5674 7
	* sig.c (build_sigtable): Don't die if a null signature table
	constructor is returned.
	(build_signature_pointer_constructor): If the signature table
	constructor is null, the _sptr field is set to a null pointer
	and cast to the appropriate type.  Make copies of all null
	pointers so that the type null_pointer_node doesn't get changed.
	(build_signature_table_constructor): Added comments.
d5676 1
a5676 3
	* sig.c (build_signature_pointer_constructor): Complain if we
	try to assign to/initialize a signature pointer/reference of
	an undefined signature.
d5678 1
a5678 1
Mon Jun 27 14:05:16 1994  Gerald Baumgartner  (gb@@cs.purdue.edu)
d5680 1
a5680 2
	* typeck2.c (store_init_value): Don't be pedantic about
	non-constant initializers of signature tables/pointers/references.
d5682 1
a5682 1
Fri Jun 24 16:49:41 1994  Gerald Baumgartner  (gb@@cs.purdue.edu)
d5684 3
a5686 2
	* decl.c (grokdeclarator): If we are grokking an opaque typedef
	in a signature, don't complain about it begin static.
d5688 2
a5689 1
Wed Jun 29 16:44:45 1994  Mike Stump  <mrs@@cygnus.com>
d5691 5
a5695 2
	Fixes a problem of the this pointer being wrong in virtual calls to
	methods that are not overridden in more derived classes.
d5697 1
a5697 5
	* class.c (fixup_vtable_delta): New routine.  It will fixup the
	delta entries in vtables, wheever they need updating.
	* class.c (finish_struct): Call the new routine for all virtual
	bases, as they can have different offsets, than those used in base
	classes that we derive our vtable from.
d5699 3
a5701 1
Tue Jun 28 23:49:28 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5703 9
a5711 2
	* typeck.c (build_binary_op): Use the types before default
	conversions in the error message.
d5713 1
a5713 2
	* *.c: Use c_build_type_variant instead of build_type_variant where
	the type might be an array.
d5715 1
a5715 3
	* call.c (build_method_call): Call build_type_variant and
	build_reference_type in the right order.
	* decl.c (record_builtin_type): Ditto.
d5717 5
a5721 1
Wed Jun 29 16:58:53 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5723 5
a5727 3
	* call.c (build_method_call): Call build_type_variant and
	build_reference_type in the right order.
	* decl.c (record_builtin_type): Ditto.
d5729 1
a5729 1
Tue Jun 28 23:49:28 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5731 5
a5735 2
	* typeck.c (build_binary_op): Use the types before default
	conversions in the error message.
d5737 1
a5737 2
	* *.c: Use c_build_type_variant instead of build_type_variant where
	the type might be an array.
d5739 1
a5739 1
Sat Jun 25 11:50:54 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5741 2
a5742 2
	* cvt.c (convert_to_reference): Try UDC's before doing the
	reinterpret_cast thang, though.
d5744 3
a5746 1
Fri Jun 24 01:24:01 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5748 2
a5749 2
	* typeck.c (c_expand_return): Don't USE the return value location
	after we've expanded the jump.
d5751 1
a5751 2
	* decl2.c (finish_file): Make sure DECL_SAVED_INSNS is not 0 before
	trying to write out an inline.
d5753 2
a5754 6
	* cvt.c (build_up_reference): Also do address adjustment when the
	target type uses MI.
	(convert_to_reference): Try UDCs only after built-in conversions.
	(build_type_conversion_1): Don't play games with the argument to the
	method.
	(build_type_conversion): #if 0 out code for binding to reference.
d5756 1
a5756 1
Thu Jun 23 00:22:28 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5758 1
a5758 2
	* decl2.c (finish_file): Use TREE_SYMBOL_REFERENCED to decide
	whether to emit inlines.
d5760 1
a5760 2
	* decl.c (grokdeclarator): Set explicit_int for decls that just
	specify, say, 'long'.
d5762 2
a5763 2
	* init.c (do_friend): Do overload C functions (or call pushdecl,
	anyaway).
d5765 3
a5767 1
Wed Jun 22 13:40:49 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5769 1
a5769 3
	* cvt.c (build_up_reference): Don't call readonly_error.
	(convert_to_reference): Propagate const and volatile from expr to
	its type.
d5771 4
a5774 1
	* tree.c (lvalue_p): Random CALL_EXPRs are not lvalues.
d5776 1
a5776 4
	* cvt.c (build_up_reference): Break out WITH_CLEANUP_EXPR when
	creating a temporary.
	(convert_to_reference): Lose excessive and incorrect trickiness.
	(cp_convert): Call build_cplus_new with with_cleanup_p set.
d5778 3
a5780 1
	* typeck2.c (build_functional_cast): Ditto.
d5782 2
a5783 1
Tue Jun 21 17:38:38 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5785 1
a5785 2
	* decl.c (grokdeclarator): signed, unsigned, long and short all
	imply 'int'.
d5787 2
a5788 2
	* decl.c (grokdeclarator): Allow "this is a type" syntax.
	(grok_reference_init): Simplify and fix.
d5790 1
a5790 1
Sun Jun 19 17:08:48 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5792 12
a5803 2
	* decl.c (grokdeclarator): pedwarn about a typedef that specifies no
	type.
d5805 1
a5805 1
Sat Jun 18 04:16:50 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5807 13
a5819 2
	* decl.c (start_function): Move TREE_PUBLIC and DECL_EXTERNAL
	tinkering to after call to pushdecl.
d5821 1
a5821 1
Fri Jun 17 14:48:28 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5823 4
a5826 2
	* call.c (build_method_call): Handle destructors for non-aggregate
	types properly.
d5828 2
a5829 1
Thu Jun 16 16:48:05 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5831 1
a5831 2
	* call.c (build_method_call): Make sure that the name given for the
	destructor matches the constructor_name of the instance.
d5833 3
a5835 3
	* pt.c (do_function_instantiation): A non-extern instantiation
	overrides a later extern one.
	(do_type_instantiation): Ditto.
d5837 1
a5837 1
Wed Jun 15 19:34:54 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5839 4
a5842 2
	* init.c (expand_aggr_init): Use TYPE_MAIN_VARIANT to get the
	unqualified array type.
d5844 1
a5844 2
	* cp-tree.h (EMPTY_CONSTRUCTOR_P): Tests whether NODE is a
	CONSTRUCTOR with no elements.
d5846 2
a5847 6
	* decl.c (various): Lose empty_init_node.
	(finish_decl): Use EMPTY_CONSTRUCTOR_P, do the empty CONSTRUCTOR
	thing depending on the value of DECL_COMMON instead of
	flag_conserve_space, do the empty CONSTRUCTOR thing for types that
	don't have constructors, don't treat a real empty CONSTRUCTOR
	specially.
d5849 1
a5849 2
	* typeck2.c (process_init_constructor): Don't treat empty_init_node
	specially.
d5851 1
a5851 1
Wed Jun 15 19:05:25 1994  Mike Stump  <mrs@@cygnus.com>
d5853 1
a5853 2
	* class.c (override_one_vtable): Don't forget to merge in an old
	overrider when we wanted to reuse a vtable, but couldn't.
d5855 2
a5856 1
Wed Jun 15 15:03:16 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5858 1
a5858 1
	* decl.c (start_decl): Put statics in common again.
d5860 10
a5869 2
	* decl.c (grokdeclarator): Return NULL_TREE for an error rather than
	setting the type to error_mark_node.
d5871 1
a5871 2
	* typeck.c (build_modify_expr): Build up a COMPOUND_EXPR for enum
	bitfield assignments.
d5873 2
a5874 1
Tue Jun 14 12:23:38 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5876 1
a5876 1
	* decl.c (grok_op_properties): Const objects can be passed by value.
d5878 2
a5879 1
Mon Jun 13 03:10:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d5881 1
a5881 2
	* decl2.c (import_export_vtable): Force implicit instantiations to
	be interface_only when -fno-implicit-templates.
d5883 2
a5884 2
	* decl.c (duplicate_decls): Redeclaring a class template name is an
	error.
d5886 1
a5886 2
	* pt.c (end_template_decl): Call GNU_xref_decl for class templates.
	* xref.c (GNU_xref_decl): Support templates.
d5888 153
a6040 1
Sat Jun 11 17:09:05 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6042 2
a6043 6
	* decl.c (grok_op_properties): Split out checking for whether this
	function should suppress the default assignment operator.
	* decl2.c (grok_function_init): Ditto.
	(copy_assignment_arg_p): New function do do just that.
	Now considers virtual assignment operators that take a base as an
	argument to count as copy assignment operators.
d6045 1
a6045 2
	* search.c (dfs_debug_mark): Lose checks for DWARF_DEBUG and
	TREE_ASM_WRITTEN, as they are redundant.
d6047 3
a6049 4
	* pt.c (end_template_decl): Don't try to set DECL_CLASS_CONTEXT on a
	decl that has no LANG_SPECIFIC part.
	(do_type_instantiation): Force the debugging information for this
	type to be emitted.
d6051 1
a6051 4
	* decl.c (start_decl): Clear up uses of various types of templates
	(say sorry for static data members, rather than "invalid template"). 
	(expand_static_init): Fix initialization of static data members of
	template classes.
d6053 8
a6060 1
Fri Jun 10 00:41:19 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6062 1
a6062 1
	* decl.c (grokdeclarator): Set DECL_CONTEXT on static data members.
d6064 2
a6065 1
	* g++.c (main): Use -xc++-cpp-output for .i files.
d6067 1
a6067 5
	* pt.c (tsubst): Give meaningful error about declaring template for
	a copy constructor which was not declared in the class template.
	(do_type_instantiation): Explicit instantiation before the class
	template is an error.
	(instantiate_template): Don't die if tsubst returns error_mark_node.
d6069 3
a6071 1
Thu Jun  9 19:04:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6073 1
a6073 10
	Don't synthesize the copy assignment operator if the one in a base
	class is pure virtual.
	* cp-tree.h (TYPE_HAS_ABSTRACT_ASSIGN_REF): New macro to indicate
	whether the type has a pure virtual copy assignment operator.
	* class.c (finish_base_struct): Don't generate the copy assignment
	operator if a base class has a pure virtual one.
	* decl.c (grok_op_properties): Add disabled code to set
	TYPE_HAS_ABSTRACT_ASSIGN_REF with comment pointing to where it is
	actually set.
	* decl2.c (grok_function_init): Set TYPE_HAS_ABSTRACT_ASSIGN_REF.
d6075 3
a6077 5
	* decl2.c (import_export_vtable): Always treat template
	instantiations as if write_virtuals >= 2, and treat implicit
	instantiations as external if -fno-implicit-templates.
	(finish_file): Output all pending inlines if
	flag_keep_inline_functions.
d6079 4
a6082 1
Wed Jun  8 20:48:02 1994  Mike Stump  <mrs@@cygnus.com>
d6084 2
a6085 5
	* tree.c (layout_vbasetypes): Align virtual base classes inside
	complete objects, so that we don't core dump on machines such as
	SPARCs when we access members that require larger than normal
	alignments, such as a double.  Also, we bump up the total alignment
	on the complete type, as necessary.
d6087 1
a6087 1
Wed Jun  8 16:18:14 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6089 1
a6089 4
	* gxxint.texi (Free Store): New section with code for examining
	cookie.
	(Limitations of g++): Remove operator delete entry, since it is no
	longer accurate.  Fix access control entry.
d6091 1
a6091 3
	* typeck.c (build_unary_op): Pedwarn about taking the address of or
	incrementing a cast to non-reference type.
	(build_modify_expr): Use convert instead of convert_force again.
d6093 3
a6095 2
	* search.c (get_base_distance): Use IS_AGGR_TYPE_CODE to check for
	class type, not == RECORD_TYPE.
d6097 1
a6097 1
	* decl.c (grokdeclarator): Cope with grokfndecl returning NULL_TREE.
d6099 1
a6099 3
	* typeck2.c (report_case_error): #if 0 out.
	* lex.c (real_yylex): Lose RANGE.
	* parse.y: Ditto.
d6101 2
a6102 1
Tue Jun  7 18:17:35 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6104 1
a6104 1
	* parse.y (simple_stmt, case ranges): Use ELLIPSIS instead of RANGE.
d6106 2
a6107 1
Mon Jun  6 19:39:57 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6109 1
a6109 3
	* typeck.c (build_c_cast): Don't shortcut conversions to the same
	type.  Don't replace consts with their values here, since that's now
	done in cp_convert.
d6111 1
a6111 5
	* cvt.c (cp_convert): When converting to bool, take
	integer_zero_node to false_node and all other INTEGER_CSTs to
	true_node.
	(build_type_conversion): Don't complain about multiple conversions
	to float if we're not really converting.
d6113 1
a6113 1
Fri Jun  3 02:10:56 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6115 1
a6115 12
	Implement 'extern template class A<int>;' syntax for suppressing
	specific implicit instantiations.
	* cp-tree.h: Update prototypes for do_*_instantiation.
	* pt.c (do_pending_expansions): Don't compile 'extern' explicit
	instantiations.
	(do_function_instantiation): Set DECL_EXTERNAL on 'extern' explicit
	instantiations.
	(do_type_instantiation): Ditto.
	* parse.y (explicit_instantiation): Support 'extern template class
	A<int>;' syntax.
	* decl.c (start_function): Don't modify the settings of TREE_PUBLIC
	and DECL_EXTERNAL on explicit instantiations.
d6117 2
a6118 3
	* cvt.c (cp_convert): Replace constants with their values before
	converting.
	(cp_convert): Consistently use 'e' instead of 'expr'.
d6120 1
a6120 1
Thu Jun  2 03:53:30 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6122 1
a6122 1
	* typeck2.c (build_x_arrow): Resolve OFFSET_REFs first.
d6124 18
a6141 1
Wed Jun  1 18:57:35 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6143 1
a6143 3
	* typeck2.c (digest_init): Handle initializing a pmf with an
	overloaded method.
	* typeck.c (build_ptrmemfunc): Handle overloaded methods.
d6145 2
a6146 9
	* decl.c (pushtag): Use build_decl to make TYPE_DECLs.
	(xref_defn_tag): Ditto.
	* pt.c (process_template_parm): Ditto.
	(lookup_template_class): Ditto.
	(push_template_decls): Ditto.
	(instantiate_class_template): Ditto.
	(create_nested_upt): Ditto.
	* class.c (finish_struct): Don't try to set DECL_CLASS_CONTEXT on
	TYPE_DECLs.
d6148 1
a6148 2
	* typeck.c (convert_arguments): Make sure type is not NULL before
	checking its TREE_CODE.
d6150 4
a6153 1
Wed Jun  1 17:40:39 1994  Mike Stump  <mrs@@cygnus.com>
d6155 1
a6155 9
	* class.c (get_derived_offset): New routine.
	* class.c (finish_base_struct): Make sure we set BINFO_VTABLE and
	BINFO_VIRTUALS when we choose a new base class to inherit from.
	* class.c (modify_one_vtable): Use get_derived_offset to get the
	offset to the most base class subobject that we derived this binfo
	from.
	* class.c (finish_struct): Move code to calculate the
	DECL_FIELD_BITPOS of the vfield up, as we need might need it for
	new calls to get_derived_offset in modify_one_vtable.
d6157 2
a6158 1
Wed Jun  1 16:50:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6160 1
a6160 2
	* init.c (build_member_call): Use build_pointer_type instead of
	TYPE_POINTER_TO.
d6162 24
a6185 1
Wed Jun  1 11:11:15 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)
d6187 1
a6187 2
	* decl.c (grokdeclarator): Make sure we have a DNAME set before we
	try to use it in an error.
d6189 3
a6191 1
Wed Jun  1 09:48:49 1994  Mike Stump  <mrs@@cygnus.com>
d6193 1
a6193 2
	* typeck.c (convert_arguments, convert_for_initialization): Don't
	strip NOP_EXPRs, when we are converting to a reference.
d6195 1
a6195 1
Wed Jun  1 01:11:38 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6197 1
a6197 2
	* typeck.c (build_modify_expr): Don't dereference references when
	initializing them.
d6199 1
a6199 2
	* decl2.c (grokfield): Don't check for grokdeclarator returning
	error_mark_node any more.
d6201 1
a6201 2
	* decl.c (grokfndecl): Return NULL_TREE instead of error_mark_node.
	(start_method): Return void_type_node instead of error_mark_node.
d6203 7
a6209 1
	* typeck.c (build_modify_expr): Resolve offset refs earlier.
d6211 1
a6211 1
Tue May 31 16:06:58 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6213 2
a6214 1
	* call.c (build_method_call): Resolve OFFSET_REFs in the object.
d6216 1
a6216 2
	* typeck.c (build_modify_expr): Dereference references before trying
	to assign to them.
d6218 3
a6220 13
	* call.c (build_method_call): Don't confuse type conversion
	operators with constructors.
	* typeck2.c (build_functional_cast): Just call build_c_cast if there
	was only one parameter.
	* method.c (build_typename_overload): Don't set
	IDENTIFIER_GLOBAL_VALUE on these identifiers.
	* decl.c (grok_op_properties): Warn about defining a type conversion
	operator that converts to a base class (or reference to it).
	* cvt.c (cp_convert): Don't try to use a type conversion operator
	when converting to a base class.
	(build_type_conversion_1): Don't call constructor_name_full on an
	identifier.
	* cp-tree.h (DERIVED_FROM_P): Should be self-explanatory.
d6222 1
a6222 3
	* decl.c (start_decl): Don't complain that error_mark_node is an
	incomplete type.
	(finish_decl): Check for type == error_mark_node.
d6224 3
a6226 1
Mon May 30 23:38:55 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6228 1
a6228 2
	* decl.c (start_function): Set DECL_DEFER_OUTPUT on implicit
	instantiations and inline members.
d6230 6
a6235 1
	* spew.c (yylex): Set looking_for_template if the next token is a '<'.
d6237 1
a6237 1
	* lex.h: Declare looking_for_template.
d6239 2
a6240 2
	* decl.c (lookup_name_real): Use looking_for_template to arbitrate
	between type and template interpretations of an identifier.
d6242 1
a6242 1
Sat May 28 04:07:40 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6244 2
a6245 2
	* pt.c (instantiate_template): Zero out p if we found a
	specialization.
d6247 1
a6247 2
	* decl.c (grokdeclarator): Elucidate warning.
	(grokdeclarator): If pedantic AND -ansi, complain about long long.
d6249 2
a6250 27
	Make explicit instantiation work reasonably.  It is now appropriate
	to deprecate the use of -fexternal-templates.
	* pt.c (instantiate_template): Set DECL_TEMPLATE_SPECIALIZATION or
	DECL_IMPLICIT_INSTANTIATION on fndecl as appropriate.
	(end_template_instantiation): Reflect changes in USE_TEMPLATE
	semantics.
	(do_pending_expansions): if (!flag_implicit_templates) DECIDE(0);
	(do_function_instantiation): Don't set EXPLICIT_INST if
	flag_external_templates is set.  Do set TREE_PUBLIC and DECL_EXTERN
	appropriately otherwise.
	(do_type_instantiation): Set interface info for class.  Set
	TREE_PUBLIC and DECL_EXTERN for methods.  Do none of this if
	flag_external_templates is set.
	* parse.y: Reflect changes in USE_TEMPLATE semantics.
	* decl2.c: New flag flag_implicit_templates determines whether or
	not implicit instantiations get emitted.  This flag currently
	defaults to true, and must be true for -fexternal-templates to work.
	(finish_file): Consider flag_implement_inlines when
	setting DECL_EXTERNAL.  Consider flag_implicit_templates when
	deciding whether or not to emit a static copy.
	* decl.c (start_function): Set TREE_PUBLIC and DECL_EXTERNAL
	properly for template instantiations.
	(start_method): Set DECL_IMPLICIT_INSTANTIATION on methods of a
	template class.
	* cp-tree.h (CLASSTYPE_USE_TEMPLATE): Change semantics.
	(DECL_USE_TEMPLATE): Parallel macro for FUNCTION and VAR_DECLs.
	(various others): Accessor macros for the above.
d6252 1
a6252 1
Fri May 27 13:57:40 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6254 6
a6259 2
	* typeck.c (build_binary_op_nodefault): Division by constant zero is
	an error.
d6261 1
a6261 1
Fri May 27 13:50:15 1994  Mike Stump  <mrs@@cygnus.com>
d6263 1
a6263 1
	* class.c (override_one_vtable): Don't modify things we don't own.
d6265 1
a6265 1
Fri May 27 01:42:58 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6267 2
a6268 5
	* decl.c (finish_decl): Don't postpone processing the initializer of
	a decl with DECL_EXTERNAL set, and do call rest_of_compilation for a
	PUBLIC const at toplevel.
	(grokdeclarator): pedwarn about initializing non-const or
	non-integral statics in the class body.
d6270 1
a6270 2
	* decl.c (pushtag): Don't try to set DECL_CLASS_CONTEXT on a
	TYPE_DECL.
d6272 2
a6273 3
	* call.c (convert_harshness): Dereference reference on rhs before
	proceeding, properly grok passing const things to non-const
	references.
d6275 1
a6275 2
	* typeck.c (build_unary_op): Soften error about taking the address
	of main() to a pedwarn.
d6277 31
a6307 3
	* lex.c (default_copy_constructor_body): Unambiguously specify base
	classes (i.e. A((const class ::A&)_ctor_arg) ).
	(default_assign_ref_body): Ditto.
d6309 2
a6310 1
Thu May 26 13:13:55 1994  Gerald Baumgartner  (gb@@mexican.cygnus.com)
d6312 2
a6313 2
	* decl2.c (grokfield): Don't complain about local signature
	method declaration without definition.
d6315 1
a6315 4
	* call.c (convert_harshness): If `type' is a signature pointer
	and `parmtype' is a pointer to a signature, just return 0.  We
	don't really convert in this case; it's a result of making the
	`this' parameter of a signature method a signature pointer.
d6317 3
a6319 3
	* call.c (build_method_call): Distinguish calling the default copy
	constructor of a signature pointer/reference from a signature
	member function call.
d6321 1
a6321 1
Thu May 26 12:56:25 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6323 2
a6324 2
	* decl2.c (grokfield): Don't set TREE_PUBLIC on member function
	declarations.
d6326 1
a6326 4
	* decl.c (duplicate_decls): A previous function declaration as
	static overrides a subsequent non-static definition.
	(grokdeclarator): Don't set TREE_PUBLIC on inline method
	declarations.
d6328 8
a6335 1
Wed May 25 14:36:38 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6337 2
a6338 3
	* decl.c (grokdeclarator): Handle initialization of static const
	members.
	(finish_decl): Ditto.
d6340 1
a6340 2
	* decl2.c (grokfield): Allow initialization of static const members
	even when pedantic.
d6342 69
a6410 13
	* decl2.c (grokfield): Deal with grokdeclarator returning
	error_mark_node.

	* decl.c (grok_ctor_properties): Return 0 for A(A) constructor.
	(grokfndecl): Check the return value of grok_ctor_properties.
	(start_method): Ditto.

	* parse.y (absdcl): Expand type_quals inline.

Tue May 24 19:10:32 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (pushtag): Use IS_AGGR_TYPE rather than checking for a
	RECORD_TYPE.
d6412 1
a6412 1
Tue May 24 18:09:16 1994  Per Bothner  (bothner@@kalessin.cygnus.com)
d6414 1
a6414 47
	* cp-tree.h (VTABLE_NAME_FORMAT):  If flag_vtable_thunks,
	always use "__vt_%s".
	* decl2.c (finish_vtable_vardecl):  Don't consider abstract virtuals
	when looking for a "sentinal" method (to decide on emitting vtables).
	* decl2.c (finish_file):  Scan all decls for thunks that need
	to be emitted.
	* decl2.c (finish_vtable_vardecl):  Don't bother calling emit_thunk.
	* method.c (make_thunk):  Use a more meaningful label.  If there
	exists a matching top-level THUNK_DECL re-use it;  otherwise
	create a new THUNK_DECL (and declare it).
	* method.c (emit_thunk):  Make thunk external/public depending
	on the underlying method.

Tue May 24 00:22:04 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* pt.c (tsubst): Use lookup_name_nonclass to find guiding decls, not
	lookup_name.

	* call.c (build_overload_call_real): Don't immediately pick a
	function which matches perfectly.

	* decl.c (grokdeclarator): Use c_build_type_variant for arrays.
	(grokdeclarator): Warn about, and throw away, cv-quals attached to a
	reference (like 'int &const j').

	* typeck.c (convert_arguments): Don't mess with i for methods.
	* call.c (build_method_call): Pass the function decl to
	convert_arguments.

	* typeck.c (comp_ptr_ttypes_real): New function.  Implements the
	checking for which multi-level pointer conversions are allowed.
	(comp_target_types): Call it.
	(convert_for_assignment): Check const parity on the ultimate target
	type, too.  And make those warnings pedwarns.

Mon May 23 14:11:24 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* error.c (dump_char): Use TARGET_* for character constants.

Mon May 23 13:03:03 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* tree.c (debug_no_list_hash): Make static.

	* decl.c (decls_match): Say the types don't match if newdecl ends up
	with a null type, after we've checked if olddecl does.
	(pushdecl): Check if the decls themselves match before looking for
	an extern redeclared as static, to avoid inappropriate and incorrect
d6417 1
a6417 1
Fri May 20 14:04:34 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6419 3
a6421 2
	* decl.c (grokdeclarator): Make warning about duplicate short, etc.
	a pedwarn.
d6423 1
a6423 2
	* typeck.c (build_c_cast): Casting to function or method type is an
	error.
d6425 4
a6428 2
	* class.c (finish_struct): Make warning for anonymous class with no
	instances a pedwarn.
d6430 1
a6430 1
	* Makefile.in (stamp-parse): Expect a s/r conflict.
d6432 2
a6433 2
	* typeck.c (build_modify_expr): pedwarn about using a non-lvalue
	cast as an lvalue.
d6435 1
a6435 1
Thu May 19 12:08:48 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6437 1
a6437 2
	* cvt.c (type_promotes_to): Make sure bool promotes to int rather
	than unsigned on platforms where sizeof(char)==sizeof(int).
d6439 1
a6439 1
Wed May 18 14:27:06 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6441 14
a6454 4
	* typeck.c (build_c_cast): Tack on a NOP_EXPR when casting to
	another variant.
	(build_modify_expr): Don't strip NOP_EXPRs, and don't get tricky
	and treat them as lvalues.
d6456 1
a6456 4
	* decl.c (shadow_tag): Do complain about forward declarations of
	enums and empty declarations.
	* parse.y: Don't complain about forward declarations of enums and
	empty declarations.
d6458 5
a6462 2
	* typeck.c (convert_for_assignment): Complain about changing
	the signedness of a pointer's target type.
d6464 1
a6464 4
	* parse.y (stmt): Move duplicated code for checking case values from
	here.
	* decl2.c (check_cp_case_value): To here.  And add a call to
	constant_expression_warning.
d6466 2
a6467 2
	* typeck.c (convert_for_assignment): Don't complain about assigning
	a negative value to bool.
d6469 1
a6469 1
	* decl.c (init_decl_processing): Make bool unsigned.
d6471 1
a6471 1
	* class.c (finish_struct): Allow bool bitfields.
d6473 1
a6473 1
Wed May 18 12:35:27 1994  Ian Lance Taylor  (ian@@tweedledumb.cygnus.com)
d6475 2
a6476 1
	* Make-lang.in (c++.install-man): Get g++.1 from $(srcdir)/cp.
d6478 1
a6478 1
Wed May 18 03:28:35 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6480 3
a6482 2
	* cvt.c (build_type_conversion): Lose special handling of
	truthvalues.
d6484 1
a6484 1
	* search.c (dfs_pushdecls): Improve shadowing warning.
d6486 2
a6487 1
Tue May 17 13:34:46 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6489 1
a6489 1
	* init.c (build_delete): Throw away const and volatile on `this'.
d6491 2
a6492 3
	* decl.c (finish_enum): Put the constants in TYPE_VALUES again,
	rather than the enumerators.
	(pushtag): s/cdecl/c_decl/g
d6494 1
a6494 1
Mon May 16 23:04:01 1994  Stephen R. van den Berg  (berg@@pool.informatik.rwth-aachen.de)
d6496 13
a6508 6
	* cp/typeck.c (common_type): Attribute merging.
	(comp_types): Utilise COMP_TYPE_ATTRIBUTES macro.

	* cp/parse.y: Revamp attribute parsing.

Mon May 16 01:40:34 1994  Jason Merrill  (jason@@deneb.cygnus.com)
d6510 1
a6510 2
	* decl.c (shadow_tag): Also check for inappropriate use of auto and
	register.
d6512 1
a6512 2
	* method.c (build_overload_name): Clarify that the illegal case is a
	pointer or reference to array of unknown bound.
d6514 2
a6515 1
	* error.c (dump_type_prefix): Print references to arrays properly.
d6517 1
a6517 3655
	* typeck.c (various): Be more helpful in pointer
	comparison diagnostics.

	* tree.c (lvalue_p): MODIFY_EXPRs are lvalues again.  Isn't this
	fun?

	* parse.y: Also catch an error after valid stmts.

	* search.c (dfs_init_vbase_pointers): Don't abort because `this' is
	const.

	* typeck.c (convert_for_initialization): If call to
	convert_to_reference generated a diagnostic, print out the parm
	number and function decl if any.

	* errfn.c (cp_thing): Check atarg1 to determine whether or not we're
	specifying a line, not atarg.

	* tree.c (build_cplus_method_type): Always make `this' const.

	* decl2.c (grokclassfn): If -fthis-is-variable and this function is
	a constructor or destructor, make `this' non-const.

	* typeck.c (build_modify_expr): Don't warn specially about
	assignment to `this' here anymore, since it will be caught by the
	usual machinery.

	* various: Disallow specific GNU extensions (variable-size arrays,
	etc.) when flag_ansi is set, not necessarily when pedantic is set,
	so that people can compile with -pedantic-errors for tighter const
	checking and such without losing desirable extensions.

	* typeck2.c (build_functional_cast): Call build_method_call with
	LOOKUP_PROTECT.
	(process_init_constructor): Only process FIELD_DECLs.

	* decl.c (finish_decl): Also force static consts with no explicit
	initializer that need constructing into the data segment.

	* init.c (build_delete): Undo last patch, as it interferes with
	automatic cleanups.

Sat May 14 01:59:31 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* call.c, class.h, cp-tree.h, cvt.c, decl2.c: Lose old overloading
	code.

	* init.c (build_delete): pedwarn about using plain delete to delete
	an array.

Fri May 13 16:45:07 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (comp_target_types): Be more helpful in contravariance
	warnings, and make them pedwarns.

	* decl.c (grokdeclarator): Use decl_context to decide whether or not
	this is an access declaration.

	* class.c (finish_struct_bits): Set TYPE_HAS_INT_CONVERSION if it
	has a conversion to enum or bool, too.

Fri May 13 16:31:27 1994  Mike Stump  <mrs@@cygnus.com>

	* method.c (emit_thunk):  Make declaration for
	current_call_is_indirect local (needed for hppa).

Fri May 13 16:16:37 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* pt.c (uses_template_parms): Grok BOOLEAN_TYPE.
	(tsubst): Ditto.

Fri May 13 16:23:32 1994  Mike Stump  <mrs@@cygnus.com>

	* pt.c (tsubst): If there is already a function for this expansion,
	use it.
	* pt.c (instantiate_template): Ditto.

Fri May 13 10:30:42 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* parse.y (implicitly_scoped_stmt, simple_stmt case): Use
	kept_level_p for MARK_ENDS argument to expand_end_bindings, to avoid
	generating debug info for unemitted symbols on some systems.

	* cp-tree.h (build_static_cast, build_reinterpret_cast,
	build_const_cast): Add declarations.

Fri May 13 09:50:31 1994  Mike Stump  <mrs@@cygnus.com>

	* search.c (expand_indirect_vtbls_init): Fix breakage from Apr 27
	fix.  We now try get_binfo, and if that doesn't find what we want,
	we go back to the old method, which still sometimes fails.

Fri May 13 01:43:18 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (initdcl): Call cplus_decl_attributes on the right
	variable.
	* decl2.c (cplus_decl_attributes): Don't call decl_attributes for
	void_type_node.

	* typeck.c (build_binary_op_nodefault): Change result_type for
	comparison ops to bool.
	(build_binary_op): Convert args of && and || to bool.
	* cvt.c (build_default_binary_type_conversion): Convert args of &&
	and || to bool.
	(build_default_unary_type_conversion): Convert arg of ! to bool.
	(type_promotes_to): bool promotes to int.

Fri May 13 01:43:18 1994  Mike Stump  <mrs@@cygnus.com>

	Implement the new builtin `bool' type.
	* typeck.c (build_binary_op_nodefault): Convert args of && and || to
	bool.
	(build_unary_op): Convert arg of ! to bool.
	* parse.y: Know true and false.  Use bool_truthvalue_conversion.
	* method.c (build_overload_value): Know bool.
	(build_overload_name): Ditto.
	* lex.c (init_lex): Set up RID_BOOL.
	* gxx.gperf: Add bool, true, false.
	* error.c (*): Know bool.
	* decl.c (init_decl_processing): Set up bool, true, false.
	* cvt.c (cp_convert): Handle conversion to bool.
	(build_type_conversion): Ditto.
	* *.c: Accept bool where integers and enums are accepted (use
	INTEGRAL_CODE_P macro).

Thu May 12 19:13:54 1994  Richard Earnshaw  (rwe11@@cl.cam.ac.uk)

	* g++.c: Use #ifdef for __MSDOS__, not #if.

Thu May 12 18:05:18 1994  Mike Stump  <mrs@@cygnus.com>

	* decl2.c (lang_f_options): Handle -fshort-temps.  -fshort-temps
	gives old behavior , and destroys temporaries earlier.  Default
	behavior now conforms to the ANSI working paper.

Thu May 12 14:45:35 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (build_modify_expr): Understand MODIFY_EXPR as an lvalue.
	Use convert_force to convert the result of a recursive call when we
	are dealing with a NOP_EXPR.  Don't automatically wrap MODIFY_EXPRs
	in COMPOUND_EXPRs any more.
	(various): Lose pedantic_lvalue_warning.
	(unary_complex_lvalue): Understand MODIFY_EXPR.

	* cvt.c (convert_to_reference): Allow DECL to be error_mark_node if
	we don't know what we're initializing.

Wed May 11 01:59:36 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cvt.c (convert_to_reference): Modify to use convtype parameter.
	Only create temporaries when initializing a reference, not when
	casting.
	(cp_convert): New main function.
	(convert): Call cp_convert.
	* cvt.c, decl.c, typeck.c: Fix calls to convert_to_reference.
	* cp-tree.h (CONV_*): New constants used by conversion code for
	selecting conversions to perform.

	* tree.c (lvalue_p): MODIFY_EXPRs are no longer lvalues.

	* typeck.c (build_{static,reinterpret,const_cast): Stubs that just
	call build_c_cast.
	* parse.y: Add {static,reinterpret,const}_cast.
	* gxx.gperf: Ditto.

	* typeck.c (common_type): Allow methods with basetypes of different
	UPTs.
	(comptypes): Deal with UPTs.
	(build_modify_expr): Wrap all MODIFY_EXPRs in a COMPOUND_EXPR.

	* pt.c (end_template_decl): Check for multiple definitions of member
	templates.

	* call.c (build_method_call): Complain about calling an abstract
	virtual from a constructor.

	* typeck.c (pointer_int_sum): Check for the integer operand being 0
	after checking the validity of the pointer operand.

	* typeck2.c (digest_init): Pedwarn about string initializer being
	too long.

Tue May 10 12:10:28 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (push_overloaded_decl): Only throw away a builtin if the
	decl in question is the artificial one.

	* parse.y (simple_stmt, switch): Use implicitly_scoped_stmt because
	expand_{start,end}_case cannot happen in the middle of a block.

	* cvt.c (build_type_conversion_1): Use convert again.

Tue May 10 11:52:04 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* typeck2.c (digest_init): Make sure we check for signed and
	unsigned chars as well when warning about string initializers.

	* init.c (emit_base_init): Check if there's a DECL_NAME on the
	member before trying to do an initialization for it.

Tue May 10 11:34:37 1994  Mike Stump  <mrs@@cygnus.com>

	* except.c: Don't do anything useful when cross compiling.

Tue May 10 03:04:13 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (duplicate_decls): Fix up handling of builtins yet again.
	(push_overloaded_decl): Ditto.

	* cvt.c (convert): Don't look for void type conversion.

Mon May  9 18:05:41 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* init.c (do_friend): Only do a pushdecl for friends, not
	pushdecl_top_level.

Mon May  9 13:36:34 1994  Jim Wilson  (wilson@@sphagnum.cygnus.com)

	* decl.c (lookup_name_current_level): Put empty statement after
	the label OUT to make the code valid C.

Mon May  9 12:20:57 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (build_binary_op_nodefault): Only complain about
	comparing void * and a function pointer if void * is smaller.

Sun May  8 01:29:13 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (lookup_name_current_level): Move through temporary binding
	levels.

	* parse.y (already_scoped_stmt): Revive.
	(simple_stmt): Use it again.

	* decl.c (poplevel): Always call poplevel recursively if we're
	dealing with a temporary binding level.

Sat May  7 10:52:28 1994  Mike Stump  <mrs@@cygnus.com>

	* decl.c (finish_decl): Make sure we run cleanups for initial values
	of decls.  Cures memory leak.
	* decl.c (expand_static_init): Ditto for static variables.
	* decl2.c (finish_file): Ditto for globals.

Sat May  7 03:57:44 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (commonparms): Don't complain about redefining default
	args.

	* decl.c (duplicate_decls): Don't complain twice about conflicting
	function decls.
	(decls_match): Don't look at default args.
	(redeclaration_error_message): Complain about redefining default
	args.

	* call.c (build_overload_call_real): Also deal with guiding
	declarations coming BEFORE the template decl.

	* pt.c (unify): Allow different parms to have different
	cv-qualifiers.
	(unify): Allow trivial conversions on non-template parms.

Fri May  6 03:53:23 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* pt.c (tsubst): Support OFFSET_TYPEs.
	(unify): Ditto.

	* decl2.c (finish_decl_parsing): Call push_nested_class with a type.

	* init.c (build_offset_ref): Fix error message.
	* search.c (lookup_field): Ditto.

	* call.c (build_scoped_method_call): Pass binfo to
	build_method_call.
	* typeck.c (build_object_ref): Ditto.

	* typeck2.c (binfo_or_else): Don't return a _TYPE.

	* class.c (finish_struct): Don't complain about re-use of inherited
	names or shadowing of type decls.
	* decl.c (pushdecl_class_level): Ditto.

	* decl.c (finish_enum): Set the type of all the enums.

	* class.c (finish_struct): Don't get confused by access decls.

	* cp-tree.h (TYPE_MAIN_DECL): New macro to get the _DECL for a
	_TYPE.  You can stop using TYPE_NAME for that now.

	* parse.y: Lose doing_explicit (check $0 instead).
	* gxx.gperf: 'template' now has a RID.
	* lex.h (rid): Ditto.
	* lex.c (init_lex): Set up the RID for 'template'.

	* parse.y (type_specifier_seq): typed_typespecs or
	nonempty_type_quals.  Use it.
	(handler_args): Fix bogus syntax.
	(raise_identifier{,s}, optional_identifier): Lose.
	* except.c (expand_start_catch_block): Use grokdeclarator to parse
	the catch variable.
	(init_exception_processing): The second argument to
	__throw_type_match is ptr_type_node.

	Fri May  6 07:18:54 1994  Chip Salzenberg  (chip@@fin)

	[ change propagated from c-decl.c of snapshot 940429 ]
	* cp/decl.c (finish_decl): Setting asmspec_tree should not
	zero out the old RTL.

Fri May  6 01:25:38 1994  Mike Stump  <mrs@@cygnus.com>

	Add alpha exception handling support to the compiler.
	Quick and dirty backend in except.c.

	* cp/*:  Remove most remnants of old exception handling support.
	* decl.c (finish_function): Call expand_exception_blocks to put
	the exception hanlding blocks at the end of the function.
	* dec.c (hack_incomplete_structures): Make sure expand_decl_cleanup
	comes after expand_decl_init.
	* except.c: Reimplementation.
	* expr.c (cplus_expand_expr): Handle THROW_EXPRs.
	* lex.c (init_lex): Always have catch, try and throw be reserved
	words, so that we may always parse exception handling.
	* parse.y: Cleanup to support new interface into exception handling.
	* tree.def (THROW_EXPR): Add.

Thu May  5 17:35:37 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (simple_stmt, for loops): Use implicitly_scoped_stmt.
	(various): Lose .kindof_pushlevel and partially_scoped_stmt.

Thu May  5 16:17:27 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* parse.y (already_scoped_stmt): move expand_end_binding() to
	fix the unmatched LBB/LBE in stabs.

Thu May  5 14:36:17 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (set_nested_typename): Set TREE_MANGLED on the new
	identifiers.
	(pushdecl): Check TREE_MANGLED.
	(xref_tag): Ditto.
	* cp-tree.h (TREE_MANGLED): This identifier is a
	DECL_NESTED_TYPENAME (named to allow for future use to denote
	mangled function names as well).

	Implement inconsistency checking specified in [class.scope0].
	* decl.c (lookup_name_real): Don't set ICV here after all.
	(finish_enum): Also set the type of the enumerators themselves.
	(build_enumerator): Put the CONST_DECL in the list instead of its
	initial value.
	(pushdecl_class_level): Check inconsistent use of a name in the
	class body.
	* class.c (finish_struct): Check inconsistent use of a name in the
	class body.  Don't set DECL_CONTEXT on types here anymore.
	* parse.y (qualified_type_name): Note that the identifier has now
	been used (as a type) in the class body.
	* lex.c (do_identifier): Note that the identifier has now been used
	(as a constant) in the class body.
	* error.c (dump_decl): Print type and enum decls better.

Thu May  5 09:35:35 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* typeck.c (build_modify_expr): Warn about assignment to `this'.

Wed May  4 15:55:49 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* init.c (build_delete): Use the global operator delete when
	requested.

	* decl.c (lookup_name_real): If we find the type we're looking in a
	base class while defining a class, set IDENTIFIER_CLASS_VALUE for
	the type.

	* class.c (finish_struct): Remove a couple of dependencies on
	language linkage.

	* decl.c (pushtag): Classes do nest in extern "C" blocks.
	(pushdecl): Only set DECL_NESTED_TYPENAME on the canonical one for
	the type.
	(pushtag): Remove another dependency on the language linkage.

	* lex.c (cons_up_default_function): Don't set DECL_CLASS_CONTEXT to
	a const-qualified type.

	* decl.c (push_overloaded_decl): Throw away built-in decls here.
	(duplicate_decls): Instead of here.

Wed May  4 15:27:40 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* typeck.c (get_member_function_from_ptrfunc):  Do The Right
	Thing (I hope) if we're using thunks.

Wed May  4 13:52:38 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (specialization): aggr template_type_name ';'.
	(named_class_head_sans_basetype): Use it.
	(explicit_instantiation): Ditto.
	(tmpl.2): Revert.

	* cvt.c (build_type_conversion_1): Use convert_for_initialization,
	rather than convert, to do conversions after the UDC.

	* cp-tree.h (SHARED_MEMBER_P): This member is shared between all
	instances of the class.

	* search.c (lookup_field): If the entity found by two routes is the
	same, it's not ambiguous.

Wed May  4 12:10:00 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* decl.c (lookup_name_real):  Check for a NULL TREE_VALUE,
	to prevent the compiler from crashing ...

Wed May  4 11:19:45 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* call.c (build_method_call): If we don't have an object, check
	basetype_path to figure out where to look up the function.

	* typeck.c (convert_for_initialization): Pass TYPE_BINFO (type) to
	build_method_call in case exp is NULL_TREE.

Tue May  3 16:02:53 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	Give a vtable entries a unique named type, for the sake of gdb.
	* class.c (build_vtable_entry):  The addres of a thunk now has
	type vtable_entry_type, not ptr_type_node.
	* method.c (make_thunk):  Fix type of THUNK_DECL.
	* class.c (add_virtual_function, override_one_vtable):  Use
	vfunc_ptr_type_node, instead of ptr_type_node.
	* cp-tree.h (vfunc_ptr_type_node):  New macro.
	* decl.c (init_decl_processing):  Make vtable_entry_type
	be a unique type of pointer to a unique function type.

Tue May  3 09:20:44 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (do_explicit): Sets doing_explicit to 1.
	(explicit_instantiation): Use do_explicit rather than TEMPLATE
	directly, add "do_explicit error" rule.
	(datadef): Set doing_explicit to 0 after an explicit instantiation.
	(tmpl.2): Don't instantiate if we see a ';' unless we're doing an
	explicit instantiation.
	(named_class_head_sans_basetype): Remove aggr template_type_name
	';' again.

Mon May  2 23:17:21 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* search.c (lookup_nested_tag): Lose.

	* decl2.c (grokfield): Set DECL_CONTEXT on TYPE_DECLs.
	(lookup_name_nonclass): Lose.

	* decl.c (poplevel_class): Add force parameter.
	(lookup_name_real): Fix handling of explicit scoping which specifies
	a class currently being defined.  Add 'nonclass' argument.
	(lookup_name, lookup_name_nonclass): Shells for lookup_name_real.

	* class.c (finish_struct): Don't unset IDENTIFIER_CLASS_VALUEs here.
	(popclass): Force clearing of IDENTIFIER_CLASS_VALUEs if we're being
	called from finish_struct.

Mon May  2 19:06:21 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* decl.c (init_decl_processing), cp-tree.h:  Removed memptr_type.
	(It seeems redundant, given build_ptrmemfunc_type.)
	* typeck.c (get_member_function_from_ptrfunc), gc.c (build_headof,
	build_classof):  Use vtable_entry_type instead of memptr_type.
	* method.c (emit_thunk):  Call poplevel with functionbody==0
	to prevent DECL_INITIAL being set to a BLOCK.

Mon May  2 15:02:11 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (named_class_head_sans_basetype): Add "aggr
	template_type_name ';'" rule for forward declaration of
	specializations.

Mon May  2 15:02:11 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (instantiate_type): Deal with pmf's.

	* Make-lang.in (cc1plus): Don't depend on OBJS or BC_OBJS, since
	stamp-objlist does.

	* Makefile.in (../cc1plus): Depend on OBJDEPS.
	(OBJDEPS): Dependency version of OBJS.

Mon May  2 12:51:31 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* search.c (dfs_debug_mark): unmark TYPE_DECL_SUPPRESS_DEBUG, not
	DECL_IGNORED_P.

Fri Apr 29 12:29:56 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct): Clear out memory of local tags.  And
	typedefs.

	* decl2.c (grokclassfn): Don't set DECL_CONTEXT to a cv-qualified
	type.
	* search.c (get_matching_virtual): Be more helpful in error message.

	* *: Use DECL_ARTIFICIAL (renamed from DECL_SYNTHESIZED).

	* lex.c (default_assign_ref_body): Expect TYPE_NESTED_NAME to work.
	(default_copy_constructor_body): Ditto.

	* class.c (finish_struct): Don't gratuitously create multiple decls
	for nested classes.

Thu Apr 28 23:39:38 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	Avoid clobbering the arg types of other functions when reverting
	static member functions.
	* decl.c (revert_static_member_fn): Rearrange arguments, don't
	require values for 'fn' and 'argtypes', add warning to comment
	above.
	(decls_match): Rearrange arguments in call to rsmf.
	(grok_op_properties): Don't pass values for fn and argtypes.
	* pt.c (instantiate_template): Don't pass values for fn and argtypes.

Thu Apr 28 16:29:11 1994  Doug Evans  (dje@@canuck.cygnus.com)

	* Make-lang.in (cc1plus): Depend on stamp-objlist.
	* Makefile.in (BC_OBJS): Delete.
	(OBJS): Cat ../stamp-objlist to get language independent files.
	Include ../c-common.o.
	(../cc1plus): Delete reference to BC_OBJS.

Thu Apr 28 02:12:08 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* search.c (compute_access): No really, deal with static members
	properly.  Would I lie to you?

	Implement lexical hiding of function declarations.
	* pt.c (tsubst): Use lookup_name to look for function decls to guide
	instantiation.
	* method.c (build_opfncall): Use lookup_name_nonclass to look for
	non-member functions.
	* init.c (do_friend): Use lookup_name_nonclass to look for
	functions.
	* error.c (ident_fndecl): Use lookup_name to look for functions.
	* decl2.c (lookup_name_nonclass): New function, skips over
	CLASS_VALUE.
	* decl.c (struct binding_level): Lose overloads_shadowed field.
	(poplevel): Don't deal with overloads_shadowed.
	(push_overloaded_decl): Do lexical hiding for functions.
	* class.c (instantiate_type): Don't check non-members if we have
	members with the same name.
	* call.c (build_method_call): Use lookup_name_nonclass instead of
	IDENTIFIER_GLOBAL_VALUE to check for non-member functions.
	(build_overload_call_real): Ditto.

	* decl.c (duplicate_decls): Check for ambiguous overloads here.
	(push_overloaded_decl): Instead of here.
	
	* decl.c (pushdecl): Back out Chip's last change.

	* decl.c (grok_op_properties): operators cannot be static members.

	* cp-tree.h (DECL_SYNTHESIZED): DECL_SOURCE_LINE == 0
	(SET_DECL_SYNTHESIZED): DECL_SOURCE_LINE = 0
	* lex.c (cons_up_default_function): Use SET_DECL_SYNTHESIZED.

	* method.c (do_inline_function_hair): Don't put friends of local
	classes into global scope, either.

	* typeck2.c (build_functional_cast): Don't look for a function call
	interpretation.

Thu Apr 28 15:19:46 1994  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h: disable use of backend EH.

Wed Apr 27 21:01:24 1994  Doug Evans  (dje@@canuck.cygnus.com)

	* Make-lang.in (c++.distdir): mkdir tmp/cp first.
	* Makefile.in (INCLUDES): Move definition to same place as
	parent makefile.
	(ALLOCA): Define.
	(OLDAR_FLAGS): Delete.
	(OLDCC): Define.
	(DIR): Delete.
	(CLIB): Define.
	(####site): Delete.
	(SUBDIR_USE_ALLOCA): Don't use ALLOCA if compiling with gcc.

Wed Apr 27 19:10:04 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* decl.c (xref_tag): not to use strstr(), it's not available on
	all platforms.

Wed Apr 27 18:10:12 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct): Resolve yet another class/pmf confusion.

	* call.c (build_overload_call_real): Don't take the single-function
	shortcut if we're dealing with an overloaded operator.

Wed Apr 27 17:35:37 1994  Mike Stump  <mrs@@cygnus.com>

	* search.c (get_base_distance): Search the virtual base class
	binfos, incase someone wants to convert to a real virtual base
	class.
	* search.c (expand_indirect_vtbls_init): Use convert_pointer_to_real
	instead of convert_pointer_to, as it now will work.

Wed Apr 27 15:36:49 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cvt.c (convert_to_reference): Don't complain about casting away
	const and volatile.

	* typeck.c (build_unary_op): References are too lvalues.

Wed Apr 27 13:58:05 1994  Mike Stump  <mrs@@cygnus.com>

	* class.c (override_one_vtable): We have to prepare_fresh_vtable
	before we modify it, not after, also, we cannot reuse an old vtable,
	once we commit to a new vtable.  Implement ambiguous overrides in
	virtual bases as abstract.  Hack until we make the class
	ill-formed.

Wed Apr 27 01:17:08 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (unary_expr): Expand new_placement[opt] and
	new_initializer[opt] inline.

	* search.c (lookup_fnfields): Don't throw away the inheritance
	information here, either.
	(compute_access): Handle static members properly.

	* init.c (build_member_call): Always set basetype_path, and pass it
	to lookup_fnfields.

	* search.c (lookup_field): Deal properly with the case where
	xbasetype is a chain of binfos; don't throw away the inheritance
	information.
	(compute_access): protected_ok always starts out at 0.

	* init.c (resolve_offset_ref): Don't cast `this' to the base type
	until we've got our basetype_path.

	* cp-tree.h (IS_OVERLOAD_TYPE): aggregate or enum.

	* cvt.c (build_up_reference): Use build_pointer_type rather than
	TYPE_POINTER_TO.

	* call.c (convert_harshness_ansi): Call type_promotes_to for reals
	as well.

	* cvt.c (type_promotes_to): Retain const and volatile, add
	float->double promotion.

	* decl.c (grokdeclarator): Don't bash references to arrays into
	references to pointers in function parms.  Use type_promotes_to.

Tue Apr 26 23:44:36 1994  Mike Stump  <mrs@@cygnus.com>

	Finish off Apr 19th work.

	* class.c (finish_struct_bits): Rename has_abstract_virtuals to
	might_have_abstract_virtuals.
	* class.c (strictly_overrides, override_one_vtable,
	merge_overrides): New routines to handle virtual base overrides.
	* class.c (finish_struct): Call merge_overrides to handle overrides
	in virtual bases.

Tue Apr 26 12:45:53 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (build_function_call): Call build_function_call_real with
	LOOKUP_NORMAL.

	* *: Don't deal with TYPE_EXPRs.

	* tree.c (lvalue_p): If the type of the expression is a reference,
	it's an lvalue.

	* cvt.c (convert_to_reference): Complain about passing const
	lvalues to non-const references.
	(convert_from_reference): Don't arbitrarily throw away const and
	volatile on the target type.

	* parse.y: Simplify and fix rules for `new'.

	* decl.c (grok_op_properties): operator void is illegal.

Mon Apr 25 02:36:28 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (components): Anonymous bitfields can still have declspecs.

	* decl.c (pushdecl): Postpone handling of function templates like we
	do C functions.

	* search.c (expand_indirect_vtbls_init): Fix infinite loop when
	convert_pointer_to fails.

	* call.c (compute_conversion_costs_ansi): A user-defined conversion
	by itself is better than that UDC followed by standard conversions.
	Don't treat integers and reals specially.

	* cp-tree.h: Declare flag_ansi.

	* typeck.c (c_expand_return): pedwarn on return in void function
	even if the expression is of type void.
	(build_c_cast): Don't do as much checking for casts to void.
	(build_modify_expr): pedwarn about array assignment if this code
	wasn't generated by the compiler.

	* tree.c (lvalue_p): A comma expression is an lvalue if its second
	operand is.

	* typeck.c (default_conversion): Move code for promoting enums and
	ints from here.
	* cvt.c (type_promotes_to): To here.
	* call.c (convert_harshness_ansi): Use type_promotes_to.  Also fix
	promotion semantics for reals.

Sun Apr 24 16:52:51 1994  Doug Evans  (dje@@canuck.cygnus.com)

	* Make-lang.in (c++.install-common): Check for g++-cross.
	* Makefile.in: Remove Cygnus cruft.
	(config.status): Delete.
	(RTL_H): Define.
	(TREE_H): Use complete pathname, some native makes have minimal
	VPATH support.
	(*.o): Use complete pathname to headers in parent dir.
	(doc, info, dvi): Delete.

Sun Apr 24 16:52:51 1994  Doug Evans  (dje@@canuck.cygnus.com)

	* Make-lang.in (c++.install-common): Check for g++-cross.
	* Makefile.in: Remove Cygnus cruft.
	(config.status): Delete.
	(RTL_H): Define.
	(TREE_H): Use complete pathname, some native makes have minimal
	VPATH support.
	(*.o): Use complete pathname to headers in parent dir.
	(doc, info, dvi): Delete.

Sun Apr 24 00:47:49 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (pushdecl): Avoid redundant warning on redeclaring function
	with different return type.
	(decls_match): Compare return types strictly.

Fri Apr 22 12:55:42 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cvt.c (build_type_conversion): Do try to convert through other
	pointers.  This will fail if the class defines multiple pointer
	conversions.

	* error.c (dump_type_prefix): Print out pointers to arrays properly.
	(dump_type_suffix): Ditto.  (was 'int *[]', now 'int (*)[]')

	* typeck.c (build_unary_op): Disallow ++/-- on pointers to
	incomplete type.

	* decl.c (duplicate_decls): Check mismatched TREE_CODES after
	checking for shadowing a builtin.  If we're redeclaring a builtin
	function, bash the old decl to avoid an ambiguous overload.

	* cvt.c (convert_to_reference): Don't force arrays to decay here.

	* tree.c (lvalue_p): A MODIFY_EXPR is an lvalue.

	* decl.c (duplicate_decls): Don't assume that the decls will have
	types.

	Mon Apr 18 11:35:32 1994  Chip Salzenberg  (chip@@fin.uucp)

	[ cp/* changes propagated from c-* changes in 940318 snapshot ]
	* c-decl.c (pushdecl): Warn if type mismatch with another external decl
	in a global scope.

	Fri Apr 22 06:38:56 1994  Chip Salzenberg  (chip@@fin.uucp)

	* cp/typeck2.c (signature_error): Use cp_error for "%T".

	Mon Apr 18 11:59:59 1994  Chip Salzenberg  (chip@@fin.uucp)

	[ cp/* changes propagated from c-* changes in 940415 snapshot ]
	* cp/decl.c (duplicate_decls, pushdecl, builtin_function):
	Use DECL_FUNCTION_CODE instead of DECL_SET_FUNCTION_CODE.

	Mon Apr 18 11:55:18 1994  Chip Salzenberg  (chip@@fin.uucp)

	[ cp/* changes propagated from c-* changes in 940409 snapshot ]
	* cp/decl.c (duplicate_decls): Put new type in same obstack as
	old ones, or permanent if old ones in different obstacks.

	Mon Apr 18 11:48:49 1994  Chip Salzenberg  (chip@@fin.uucp)

	[ cp/* changes propagated from c-* changes in 940401 snapshot ]
	* cp/parse.y (attrib): Handle string args as expressions,
	merging the two rules.  `mode' attribute now takes a string arg.
	Delete the rule for an identifier as arg.

	Mon Apr 18 11:24:00 1994  Chip Salzenberg  (chip@@fin.uucp)

	[ cp/* changes propagated from c-* changes in 940312 snapshot ]
	* cp/typeck.c (pointer_int_sum): Multiplication should be done signed.
	(pointer_diff): Likewise the division.

	Sun Mar  6 19:43:39 1994  Chip Salzenberg  (chip@@fin.uucp)

	[ cp/* changes propagated from c-* changes in 940304 snapshot ]
	* cp/decl.c (finish_decl): Issue warning for large objects,
	if requested.

	Sat Feb 19 22:20:32 1994  Chip Salzenberg  (chip@@fin.uucp)

	[ cp/* changes propagated from c-* changes in 940218 snapshot ]
	* cp/parse.y (attrib): Handle attribute ((section ("string"))).
	* cp/decl.c (duplicate_decls): Merge section name into new decl.

	Tue Feb  8 09:49:17 1994  Chip Salzenberg  (chip@@fin.uucp)

	[ cp/* changes propagated from c-* changes in 940206 snapshot ]
	* cp/typeck.c (signed_or_unsigned_type): Check for any
	INTEGRAL_TYPE_P not just INTEGER_TYPE.

	Mon Dec  6 13:35:31 1993  Norbert Kiesel  (norbert@@i3.INformatik.rwth-aachen.DE)

	* cp/decl.c (finish_enum): Start from 0 when determining precision
	for short enums.

	Fri Dec  3 17:07:58 1993  Ralph Campbell  (ralphc@@pyramid.COM)

	* cp/parse.y (unary_expr): Look at $1 for tree_code rather than
	casting $$.

	Wed Nov 17 19:22:09 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp/typeck.c (build_binary_op_nodefault): Propagate code
	from C front-end to optimize unsigned short division.
	(build_conditional_expr): Fix bug in "1 ? 42 : (void *) 8".

	Wed Nov 17 19:17:18 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp/call.c (convert_harshness_ansi): Given an (e.g.) char
	constant, prefer 'const char &' to 'int'.

	Wed Feb  3 13:11:48 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp/class.c (finish_struct_methods):  Handle multiple
	constructors in fn_fields list.

Fri Apr 22 12:48:10 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* class.c (finish_struct): use TYPE_DECL_SUPPRESS_DEBUG to flag
	types not to be dumped in stabs, like types in #pragma interface.
	* decl.c (init_decl_processing): use TYPE_DECL_SUPPRESS_DEBUG to
	mark unknown type.

Fri Apr 22 03:27:26 1994  Doug Evans  (dje@@cygnus.com)

	* Language directory reorganization.
	See parent makefile.

Thu Apr 21 18:27:57 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* cp-tree.h (THUNK_DELTA):  It is normally negative, so
	use signed .i variant of frame_size rather than unsigned .u.
	* cp-tree.h (VTABLE_NAME_FORMAT):  If flag_vtable_thunks,
	use "VT" rather than "vt" due to binary incompatibility.
	* class.c (get_vtable_name):  Use strlen of VTABLE_NAME_FORMAT,
	rather than sizeof, since it is now an expression.
	* class.c (modify_one_vtable):  Modify to skip initial element
	containing a count of the vtable.

Thu Apr 21 00:09:02 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* lex.c (check_newline): Force interface_unknown on main input file.

	* pt.c (do_pending_expansions): Always emit functions that have been
	explicitly instantiated.
	(do_function_instantiation): Set DECL_EXPLICITLY_INSTANTIATED.
	(do_type_instantiation): Set CLASSTYPE_VTABLE_NEEDS_WRITING and
	DECL_EXPLICITLY_INSTANTIATED on all my methods.
	* parse.y (explicit_instantiation): Call do_type_instantiation for
	types.
	* decl2.c (finish_vtable_vardecl): Call import_export_vtable.
	* decl.c (start_function): Don't set DECL_EXTERNAL on a function
	that has been explicitly instantiated.
	* cp-tree.h (DECL_EXPLICITLY_INSTANTIATED): Alias for
	DECL_LANG_FLAG_4.
	* class.c: Move import_export_vtable to decl2.c, and comment out all
	uses.

Wed Apr 20 16:51:06 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* lex.c (process_next_inline): Don't muck with DECL_INLINE.
	(do_pending_inlines): Ditto.

Tue Apr 19 22:25:41 1994  Mike Stump  <mrs@@cygnus.com>

	Reimplement vtable building, and most vtable pointer setting.
	Allows for earier maintenance, easier understandability, and most
	importantly, correct semantics.

	* class.c (build_vtable): Removed unneeded
	SET_BINFO_VTABLE_PATH_MARKED.
	* class.c (prepare_fresh_vtable): Ditto.  Added argument.
	* class.c (modify_vtable_entry): General cleanup.
	* class.c (related_vslot, is_normal, modify_other_vtable_entries,
	modify_vtable_entries): Removed.
	* class.c (add_virtual_function): General cleanup.
	* class.c (finish_base_struct): Setup BINFO_VTABLE and
	BINFO_VIRTUALS as early as we can, so that modify_all_vtables can
	work.
	* class.c (finish_vtbls): New routine, mostly from
	unmark_finished_struct.
	* class.c (overrides): New routine.
	* class.c (modify_one_vtable): New routine, mostly from
	modify_other_vtable_entries and modify_vtable_entries.
	* class.c (modify_all_direct_vtables, modify_all_indirect_vtables,
	modify_all_vtables): New routines.
	* class.c (finish_struct): Added arguemnt to prepare_fresh_vtable
	call.  General cleanup on how pending_hard_virtuals are handled.
	General cleanup on modifying vtables.  Use finish_vtbls, instead of
	unmark_finished_struct.
	* cp-tree.h (init_vtbl_ptrs, expand_direct_vtbls_init,
	get_first_matching_virtual, get_matching_virtual,
	expand_vbase_vtables_init,  expand_indirect_vtbls_init): Update.
	* cvt.c (convert_pointer_to_real): cleanup error message.
	* decl.c (grokfndecl): General cleanup.
	* decl.c (finish_function): Change init_vtbl_ptrs call to
	expand_direct_vtbls_init.  Change expand_vbase_vtables_init call to
	expand_indirect_vtbls_init.
	* init.c (expand_virtual_init): Remove unneeded argument.
	* init.c (init_vtbl_ptrs): Rename to expand_direct_vtbls_init, added
	two arguments to make more general.  Made more general.  Now can be
	used for vtable pointer initialization from virtual bases.
	* init.c (emit_base_init): Change expand_vbase_vtables_init call to
	expand_indirect_vtbls_init.  Change init_vtbl_ptrs call to
	expand_direct_vtbls_init.
	* init.c (expand_virtual_init): General cleanup.
	* init.c (expand_default_init): Change expand_vbase_vtables_init
	call to expand_indirect_vtbls_init.
	* init.c (expand_recursive_init_1): Change expand_vbase_vtables_init
	call to expand_indirect_vtbls_init.
	* init.c (expand_recursive_init): Change expand_vbase_vtables_init
	call to expand_indirect_vtbls_init.
	* search.c (get_first_matching_virtual): Rename to
	get_matching_virtual.  General cleanup and remove setting of
	DECL_CONTEXT.  That is now done in a cleaner way in
	modify_vtable_entry and add_virtual_function.
	* search.c (expand_vbase_vtables_init): Rename to
	expand_indirect_vtbls_init.  General cleanup.  Use
	expand_direct_vtbls_init to do hard work.  Ensures that _all_ vtable
	pointers from virtual bases are set up.
	* search.c (bfs_unmark_finished_struct, unmark_finished_struct):
	Removed.

	* *.[chy]: Remove support for VTABLE_USES_MASK.

Tue Apr 19 12:51:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cvt.c (convert_to_reference): Use NOP_EXPRs to switch between
	reference and pointer types instead of bashing the types directly.

	* call.c (build_overload_call_real): Use the TREE_CODE to determine
	whether the function is overloaded or not, rather than
	TREE_OVERLOADED.
	* *: Remove all uses of TREE_OVERLOADED.

	* decl.c (grokdeclarator): Only complain about initializing const
	fields when -ansi or -pedantic.

Tue Apr 19 12:42:42 1994  Doug Evans  (dje@@canuck.cygnus.com)

	* cp-tree.h (THUNK_DELTA): frame_size is now a union.

Mon Apr 18 00:17:13 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	Do overloading on a block-by-block basis, not function-by-function.
	* decl.c: Lose overloads_to_forget.
	(struct binding_level): Add overloads_shadowed field.
	(poplevel): Restore overloads_shadowed.
	(push_overloaded_decl): Use overloads_shadowed instead of
	overloads_to_forget.
	(finish_function): Don't look at overloads_to_forget.

	Copy enum_overflow logic from c-decl.c.
	* decl.c (start_enum): Initialize enum_overflow.
	(build_enumerator): Use enum_overflow.  Also use current_scope().

	* search.c (current_scope): Move Brendan's comment from
	build_enumerator here.

	* typeck.c (convert_for_assignment): Change warnings to pedwarns for
	discarding const/volatile.

Sat Apr 16 01:18:21 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (comp_target_parms): Accept TEMPLATE_TYPE_PARMs on the rhs.
	(comp_target_types): Ditto.

	* decl.c (lookup_name): Don't unset got_scope here.

	* spew.c (yylex): Only replace yylval with the TYPE_NESTED_NAME if
	got_scope != NULL_TREE.

Fri Apr 15 16:36:33 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	Horrible kludge to prevent templates from being	instantiated by
	their base classes.
	* parse.y (template_instantiate_once): Unset TYPE_BEING_DEFINED
	before we get to left_curly.
	* pt.c (instantiate_class_template): Set TYPE_BEING_DEFINED.

	* error.c (dump_decl): If it's a typedef, print out the name of the
	decl, not just the underlying type.

	* decl.c (pushdecl): If the old duplicate decl was a TYPE_DECL,
	update the IDENTIFIER_TYPE_VALUE of its name.

	* decl2.c (finish_file): When processing the initializer for a
	static member, pretend that the dummy function is a member of the
	same class.

Fri Apr 15 15:56:35 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* class.c (build_vtable_entry): revert Apr 4 change.
	* decl2.c (mark_vtable_entries): replace pure virtual function
	decl with abort's.

Fri Apr 15 13:49:33 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (build_conditional_expr): Pedwarn on pointer/integer
	mismatch, and don't pedwarn on 0/function pointer mismatch.

	* typeck2.c (digest_init): Lose code for special handling of unions.
	(process_init_constructor): Since they're handled just fine here.
	Pedwarn on excess elements.

	* decl2.c (grokfield): Complain about local class method declaration
	without definition.

Fri Apr 15 13:19:40 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* method.c (emit_thunk):  Add extern declaration for
	current_call_is_indirect (needed for hppa).

Thu Apr 14 16:12:31 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	Improve local class support; allow classes in different blocks to
	have the same name.
	* decl.c (pushtag): Support local classes better.
	(pushdecl_nonclass_level): New function for pushing mangled decls of
	nested types into the appropriate scope.
	(xref_defn_tag): Use pushdecl_nonclass_level instead of
	pushdecl_top_level. 
	(grokfndecl): Don't mess with IDENTIFIER_GLOBAL_VALUE for local
	class methods.
	* method.c (do_inline_function_hair): Ditto.

	* class.c (finish_struct): It is legal for a class with no
	constructors to have nonstatic const and reference members.

Thu Apr 14 07:15:11 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* decl.c (push_overloaded_decl): Avoid giving errors about
	built-ins, since duplicate_decls will have given warnings/errors
	for them.

Thu Apr 14 03:45:12 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cvt.c (convert_to_reference): Warn about casting pointer type to
	reference type when this is probably not what they wanted.

Wed Apr 13 13:12:35 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* decl.c (finish_decl):  Don't mindlessly set TREE_USED for
	static consts any more (toplev.c has now been modified to
	not emit warnings if they are unused).

Wed Apr 13 00:22:35 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grok_op_properties): If op new/delete get here with
	METHOD_TYPEs, do a revert_static_member_fn.

	* cp-tree.h (IDENTIFIER_CLASS_TYPE_VALUE): Lose.
	* init.c (is_aggr_typedef): Don't look at
	IDENTIFIER_CLASS_TYPE_VALUE.
	(get_aggr_from_typedef): Ditto.
	(get_type_value): Ditto.
	* call.c (build_scoped_method_call): Don't rely on overloaded
	template names having IDENTIFIER_CLASS_VALUE set.

	* parse.y (component_decl_1, fn.def2): Revert rules for
	constructors.
	(component_decl_1, fn.def2): Use $1 instead of $$, since $$ is being
	clobbered.

	* decl.c (start_function): Only warn about `void main()' if pedantic
	|| warn_return_type.

Tue Apr 12 02:14:17 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	Clean up overloading of the template name.
	* class.c (pushclass): overload the template name whenever pushing
	into the scope of a template class, not just if it is
	uninstantiated.
	(popclass): Correspondingly.
	* search.c (push_class_decls): Don't overload_template_name.
	* pt.c (overload_template_name): Don't set IDENTIFIER_LOCAL_VALUE or
	DECL_CONTEXT on things.
	* parse.y (left_curly): Don't overload_template_name.
	* class.c (finish_struct): Don't undo_template_name_overload.

	* method.c (build_opfncall): Only pass one argument to global op
	delete.

	* call.c (build_method_call): Use TYPE_VEC_DELETE_TAKES_SIZE to
	decide how many arguments to use for vec delete.

	* decl.c (grok_op_properties): Be consistent in modifying
	current_class_type.
	(grokdeclarator): Only complain about function decls with no return
	type if we're being pedantic.

Mon Apr 11 00:10:53 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	Add support for operator new [] and operator delete [].

	* tree.def: Add VEC_NEW_EXPR and VEC_DELETE_EXPR.
	* ptree.c (print_lang_type): Indicate vec new/delete.
	* parse.y: Support vec new/delete.
	* method.c (build_decl_overload): Deal with vec new/delete.
	(build_opfncall): Ditto.
	* lex.c (init_lex): Set up values of ansi_opname and opname_tab for
	vec new/delete.  vec new uses "__vn", and vec delete uses "__vd".
	* init.c (init_init_processing): Set up BIVN and BIVD.
	(do_friend): Don't clean up after mistaken setting of TREE_GETS_NEW,
	since it doesn't happen any more.
	(build_new): Support vec new.  Always call something.
	(build_x_delete): Support vec delete.
	(build_vec_delete): Lose dtor_dummy argument, add use_global_delete,
	and pass it to build_x_delete.
	* decl2.c (delete_sanity): Don't change behavior by whether or not
	the type has a destructor.  Pass use_global_delete to
	build_vec_delete.
	(coerce_delete_type): Make sure that the type returned has a first
	argument of ptr_type_node.
	* decl.c (init_decl_processing): Also declare the global vec
	new/delete.
	(grokdeclarator): Also force vec new/delete to be static.
	(grok_op_properties): Note presence of vec new/delete, and play with
	their args.  If vec delete takes the optional size_t argument, set
	TYPE_VEC_DELETE_TAKES_SIZE.
	* cp-tree.h (TYPE_GETS_{REG,VEC}_DELETE): New macros to simplify
	checking for one delete or the other.
	(lang_type): gets_new and gets_delete are now two bits long.  The
	low bit is for the non-array version.  Lose gets_placed_new.
	(TYPE_VEC_DELETE_TAKES_SIZE): New macro indicating that the vec
	delete defined by this class wants to know how much space it is
	deleting.
	(TYPE_VEC_NEW_USES_COOKIE): New macro to indicate when vec new must
	add a header containing the number of elements in the vector; i.e.
	when the elements need to be destroyed or vec delete wants to know
	the size.
	* class.c (finish_struct_methods): Also check for overloading vec
	delete.
	* call.c (build_method_call): Also delete second argument for vec
	delete.

	* decl.c (grokdeclarator): Correct complaints again.
	(grokdeclarator): Fix segfault on null declarator.
	(decls_match): Also accept redeclaration with no arguments if both
	declarations were in C context.  Bash TREE_TYPE (newdecl) here.
	(duplicate_decls): Instead of here.

	* parse.y (nested_name_specifier_1): Lose rules for dealing with
	syntax errors nicely, since they break parsing of 'const i;'.

	* decl.c (lookup_name): if (got_scope == current_class_type)
	val = IDENTIFIER_CLASS_VALUE (name).

	* search.c (lookup_nested_tag): Look in enclosing classes, too.

	* spew.c (yylex): Only look one character ahead when checking for a
	SCOPE.

	* lex.c (check_newline): Read first nonwhite char before
	incrementing lineno.

	* decl.c (grokdeclarator): Don't claim that typedefs are variables
	in warning.

	* parse.y: Divide up uses of unqualified_id into
	notype_unqualified_id and unqualified_id, so that TYPENAME can be
	used as an identifier after an object.

	* class.c (push_nested_class): Don't push into non-class scope.

	* decl.c (grokdeclarator): If an identifier could be a type
	conversion operator, but has no associated type, it's not a type
	conversion operator.

	* pt.c (unify): Check for equality of constants better.

	* decl.c (grokdeclarator): Don't complain about access decls.

Sun Apr 10 02:39:55 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grokdeclarator): pedwarn about data definitions without
	types here.

	* parse.y (datadef): Don't pedwarn about decls without types here,
	since that is valid for functions.
	(fn.def2, component_decl): Support constructors with declmods again.
	(nomods_initdecls): For decls without any mods, so that we don't try
	to get declspecs from some arbitrary $0.

	* search.c (lookup_field): Use cp_error.

	* parse.y (nested_name_specifier_1): Don't check aggr/non-aggr type
	here; it breaks destructors for non-aggr types.

	* decl.c (lookup_name): Only look for TYPE_DECLs in base classes of
	a type being defined, like the comment says.
	If got_scope is not an aggregate, just return NULL_TREE.

	* pt.c (create_nested_upt): Kung's code for creating types nested
	within uninstantiated templates now lives here (it used to live in
	hack_more_ids).  It needs to be expanded.

	* parse.y: Stop calling see_typename so much.

	* decl.c (lookup_name): Deal with TTPs and UPTs.

	* lex.c (real_yylex): Don't set looking_for_typename just because we
	saw a 'new'.
	(dont_see_typename): #if 0 out.

	* spew.c (yylex): Increment looking_for_typename if the next
	character is SCOPE, rather than setting it to 1; this way, the value
	from seeing an aggr specifier will not be lost.  This kinda relies
	on looking_for_typename never being < 0, which is now true.

	* parse.y (nested_name_specifier_1): Accept TEMPLATE_TYPE_PARMs,
	too.
	(named_class_head_sans_basetype): Accept template types, too.  Oops.

Fri Apr  8 16:39:35 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl2.c (reparse_decl_as_expr1): Handle SCOPE_REFs.

	* parse.y: Lose START_DECLARATOR.

	* search.c (lookup_nested_tag): New function to scan CLASSTYPE_TAGS
	for a class.

	* parse.y: Simplify fn.def2 and component_decl.  Support 'enum
	A::foo' syntax.  Catch invalid scopes better.

	* parse.y, lex.c: lose TYPENAME_COLON.

	* decl2.c (groktypefield): #if 0 out.

	* decl.c (lookup_name): If the type denoted by got_scope is
	currently being defined, look in CLASSTYPE_TAGS rather than FIELDS.

	* class.c (push_nested_class): Don't try to push into
	error_mark_node.

Fri Apr  8 07:26:36 1994  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* Makefile.in (stamp-parse): Update count of conflicts to 33.

Thu Apr  7 17:47:53 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	A saner implementation of nested types that treats template types
	no differently from non-template types.  There are still some
	shortcomings of our system; most notably, it is difficult to look
	for a nested type that is hidden by another name, because of the way
	we keep track of hidden types.  But this shouldn't be a problem for
	just about anyone.  Perhaps lookup_field should be fixed up a bit.

	* spew.c: Moved handling of nested types/scoping from the lexer
	into the parser.  Removed variable template_type_seen_before_scope.
	Removed functions frob_identifier, hack_more_ids, and various cruft
	that was #if 0'd out in the past, reducing the size of the file from
	1146 lines to 450 lines.  We can't quite do away with spew.c yet,
	though; we still need it for do_aggr () and checking for SCOPE after
	the current identifier.  And setting lastiddecl.

	* parse.y: Moved handling of nested types/scoping from the lexer
	into the parser, using a new global variable `got_scope'.  Reduced
	the number of states by 53.  Implemented all uses of explicit global
	scope.  Removed terminals SCOPED_TYPENAME and SCOPED_NAME.  Removed
	nonterminals tmpl.1, scoped_base_class, id_scope, typename_scope,
	scoped_typename.  Added nonterminals nested_type,
	qualified_type_name, complete_type_name, qualified_id, ptr_to_mem,
	nested_name_specifier, global_scope, overqualified_id, type_name.
	Changed many others.  Added 9 new reduce/reduce conflicts, which are
	nested type parallels of 9 that were already in the grammar for
	non-nested types.  Eight of the now 33 conflicts should be removed
	in the process of resolving the late binding between variable and
	function decls.

	* gxxint.texi (Parser): Update.

	* cp-tree.h (IS_AGGR_TYPE_CODE): Add UNINSTANTIATED_P_TYPE.

	* lex.h: Add decl for got_scope.

	* lex.c (see_typename): Claim to be the lexer when calling
	lookup_name.

	* decl.c (lookup_name): When called from the lexer, look at
	got_scope and looking_at_typename; otherwise don't.

Thu Apr  7 22:05:47 1994  Mike Stump  <mrs@@cygnus.com>

	31th Cygnus<->FSF merge.

Thu Apr  7 17:47:53 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl2.c (mark_vtable_entries): Call this to mark all the
	entries in the vtable addressable.
	(finish_decl_parsing): Handle SCOPE_REFs.

	* decl.c (decls_match): Always call compparms with strict == 1.
	Handle the special case of C function redecl here.
	(duplicate_decls): Only keep the old type if the new decl takes no
	arguments.

	* typeck.c (compparms): Also allow t1 to be ... if strict == 0.

Thu Apr  7 16:17:50 1994  Mike Stump  <mrs@@cygnus.com>

	* class.c (build_vtable_entry): Fix breakage introduced Apr 5
	17:48:41.

Wed Apr  6 16:05:10 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* init.c (build_virtual_init), search.c (build_vbase_vtables_init),
	ch-tree.h:  Every place these functions were called, the result was
	immediately passed to expand_expr_stmt.  Reduce redundancy by
	calling expand_expr_init *inside* these functions.  These
	makes for a simpler interface, and we don't have to build
	compound expressions.  Hence, rename these function to:
	expand_virtual_init and expand_vbase_vtables_init respectively.
	* init.c, decl.c:  Change callers of these functions.
	* init.c, cp-tree.h (expand_virtual_init):  Make static.

	* decl2.c (finish_file): Check TREE_PUBLIC||TREE_ADDRESSABLE
	rather than DECL_SAVED_INSNS before emitting inlines.

Wed Apr  6 13:06:39 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* spew.c (init_spew): #if 0 out stuff used by arbitrate_lookup.

	* decl.c (duplicate_decls): If this is a new declaration of an
	extern "C" function, keep the type (for the argtypes).
	(redeclaration_error_message): Don't check DECL_LANGUAGE here.
	(decls_match): Call compparms with a value of strict dependent on
	the value of strict_prototypes for DECL_LANGUAGE (oldecl).

	* typeck.c (compparms): ... is only equivalent to non-promoting
	parms if we're not being strict.

	* parse.y (empty_parms): Don't check flag_ansi || pedantic here.

	* decl.c (init_decl_processing): if (flag_ansi || pedantic)
	strict_prototypes_lang_c = strict_prototypes_lang_cplusplus;

	* decl2.c (grok_function_init): Don't set DECL_INITIAL on pure
	virtuals.

Tue Apr  5 17:48:41 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	Support for implementing vtables with thunks.
	* tree.def (THUNK_DECL):  New TREE_CODE.
	* cp-tree.h (FNADDR_FROM_VTABLE_ENTRY), tree.c
	(fnaddr_from_vtable_entry):  Handle flag_vtable_thunks case.
	* cp-tree.h (memptr_type):  New variable.
	* class.c (build_vtable_entry):  Build thunk if necessary.
	* class.c (build_vfn_ref):  If using thunks, don't need
	to add delta field from vtable (there is none!).
	* decl.c: Add memptr_type as well as vtable_entry_type.
	If using thunks, the latter is just ptr_type_node.
	* gc.c, typeck.c:  Use memptr_typeChange, not vtable_entry_type.
	* decl2.c (finish_vtable_vardecl):  Handle thunks.
	* expr.c (cplus_expand_expr):  Support THUNK_DECL.

	* decl.c (grokdeclarator):  Set DECL_THIS_EXTERN if "extern".
	* decl.c (start_function):  Set current_extern_inline based on
	DECL_THIS_EXTERN, not TREE_PUBLIC.
	* decl.c (finish_function):  Call mark_inline_for_output if needed,

	Improve intelligence about when to emit inlines.
	* cp-tree.h (lang_decl_flags):  New field saved_inline.
	* cp-tree.h (DECL_SAVED_INLINE):  New macro.
	* class.c (add_virtual_function):  Don't set TREE_ADDRESSABLE.
	* decl.h, decl.c (pending_addressable_inlines):  Removed.
	* decl2.c (pending_addressable_inlines):  Renamed to saved_inlines.
	* decl2.c (mark_inline_for_output):  Do nothing if
	DECL_SAVED_INLINE;  otherwise set it (and add to saved_inlines list).
	* decl2.c (finish_vtable_vardecl):  SET_CLASSTYPE_INTERFACE_KNOWN
	and set CLASSTYPE_INTERFACE_ONLY if there is a non-inline virtual.
	* decl2.c (finish_file):  Writing out inlines later, so we can
	also handle the ones needed for vtbales.
	* decl2.c (write_vtable_entries, finish_vtable_typedecl):  Removed.

	* cp-tree.h, class.c, decl2.c, search.c:  Remove -fvtable-hack
	and flag_vtable_hack.  	Use -fvtable-thunks and flag_vtable_thunks
	instead.  (The rationale is that these optimizations both break binary
	compatibility, but should become the default in a future release.)

Wed Apr  6 10:53:56 1994  Mike Stump  <mrs@@cygnus.com>

	* class.c (modify_vtable_entries): Never reset the DECL_CONTEXT
	of a fndecl, as we might not be from that vfield.

Tue Apr  5 17:43:35 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* class.c (add_virtual_function): fix bug for pure virtual, so
	that DECL_VINDEX of the dummy decl copied won't be error.
	(see also Apr 4 change)

Tue Apr  5 17:23:45 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* typeck.c (c_expand_return):  Before checking that we're not
	returning the address of a local, make sure it's a VAR_DECL.
	(And don't worry about it being a TREE_LIST.)

Tue Apr  5 13:26:42 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (YYDEBUG): Always define.
	* lex.c (YYDEBUG): Ditto.

Mon Apr  4 11:28:17 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* class.c (finish_struct): backup out the change below, put the
	new change for the same purpose. The change below breaks code.

	* class.c (finish_struct): if pure virtual, copy node and make
	RTL point to abort, then put in virtual table.
	* decl2.c (grok_function_iit): reinstate Mar 31 change.

Sat Apr  2 03:12:58 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* init.c (build_new): pedwarn about newing const and volatile
	types.

	* tree.c (get_identifier_list): Only do the special handling
	thing if we're dealing with the main variant of the record type.

	* cvt.c (convert_to_reference): When converting between
	compatible reference types, use the pointer conversion machinery.
	Don't just blindly overwrite the old type.

Fri Apr  1 17:14:42 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* call.c (build_method_call): When looking at global functions,
	be sure to use instance_ptr for the first argument, not some version
	of it that has been cast to a base class.  Also do this before
	comparing candidates.

Thu Mar 31 19:50:35 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* call.c (build_method_call): Constructors can be called for
	const objects.

Thu Mar 31 16:20:16 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* decl2.c (grok_func_init): do not abort as rtl for pur virtual
	fucntions. They can be defined somewhere else.

Sat Jan 23 23:23:26 1994  Stephen R. van den Berg  (berg@@pool.informatik.rwth-aachen.de)

	* decl.c (init_decl_processing): Declare __builtin_return_address
	and __builtin_frame_address for C++ as well.

Thu Mar 31 12:35:49 1994  Mike Stump  <mrs@@cygnus.com>

	* typeck2.c (store_init_value): Integral constant variables are
	always constant, even when doing -fpic.

Sat Jan 23 23:23:26 1994  Stephen R. van den Berg  (berg@@pool.informatik.rwth-aachen.de)

	* decl.c (redeclaration_error_message): Pass the types to
	comptypes.

Wed Mar 30 21:29:25 1994  Mike Stump  <mrs@@cygnus.com>

	Cures incorrect errors about pure virtuals in a class, when they
	have been overridden in a derived class.

	* search.c (get_abstract_virtuals): Reimplement.
	* search.c (get_abstract_virtuals_1): New routine.

Wed Mar 30 14:10:04 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* pt.c (push_template_decls): Make the pushed level pseudo
	global.

	* parse.y (extdefs): Don't pop everything if the current binding
	level is pseudo_global.

	* decl.c (pop_everything): Stop on reaching a pseudo-global
	binding level.

	* cp-tree.h (DECL_FUNCTION_MEMBER_P): Change to more reliable test.

	* decl.c (duplicate_decls): Only copy DECL_SOURCE_{FILE_LINE} if
	the old decl actually had an initializer.

	* {various}: Clean up gcc -W complaints.

	* cp-tree.h (DECL_FUNCTION_MEMBER_P): Currently defined to be
	(DECL_CONTEXT (NODE) != NULL_TREE).

	* parse.y (lang_extdef): Call pop_everything if necessary.

	* decl.c (pop_everything): New function for popping binding
	levels left over after a syntax error.
	(pushdecl): Use DECL_FUNCTION_MEMBER_P to decide whether or not
	a function is a member.

Wed Mar 30 14:20:50 1994  Mike Stump  <mrs@@cygnus.com>

	Cures calling a more base base class function, when a more derived
	base class member should be called in some MI situations.

	* search.c (make_binfo): Use more the more specialized base
	binfos from the binfo given as the second argument to make_binfo,
	instead of the unspecialized ones from the TYPE_BINFO.
	* class.c (finish_base_struct): Ditto, update callers.
	* search.c (dfs_get_vbase_types): Ditto.
	* tree.c (propagate_binfo_offsets, layout_vbasetypes): Ditto.
	* decl.c (xref_tag): Use NULL_TREE instead of 0.
	* lex.c (make_lang_type): Ditto.

Wed Mar 30 14:10:04 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (pushdecl): If pushing a C-linkage function, only do a
	push_overloaded_decl.
	(duplicate_decls): Standard overloading does not shadow built-ins.

Tue Mar 29 00:54:18 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* pt.c (end_template_decl): Don't call push_overloaded_decl.

	* init.c (do_friend): Don't call push_overloaded_decl.

	* decl.c (pushdecl): Call push_overloaded_decl for functions and
	function templates.
	(duplicate_decls): functions and function templates are not
	duplicates, but don't complain about calling this function to
	compare them.
	(push_overloaded_decl): Don't deal with linkage.  Call
	duplicate_decls.
	(redeclaration_error_message): Deal with linkage.

	* decl.c (start_function): If push_overloaded_decl returns an
	older version of the function, deal with it.

	* decl.c (start_function): Be sure only to push_overloaded_decl
	for non-members.

	* decl.c (grokfndecl): Put back clearing of DECL_CHAIN for
	methods.
	(start_function): Lose broken and redundant code for checking old
	decl.

	* init.c (add_friend): Give line numbers of both friend decls
	when warning about re-friending.

	* pt.c (tsubst): Use comptypes rather than == to compare the
	types of the method as declared and as defined, since default
	parameters may be different.

	* call.c (build_method_call): Use brendan's candidate printing
	routine.

	* decl.c (start_method): Methods defined in the class body are
	inline whether or not it's a template class.

Mon Mar 28 16:39:26 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (initdcl0): Add "extern" to current_declspecs if
	have_extern_spec && ! used_extern_spcec.

	* tree.c (really_overloaded_fn): A fn with more than one
	overload.

	* pt.c (end_template_decl): Use really_overloaded_fn.

	* decl.c (duplicate_decls): When smashing a decl into a previous
	definition, keep the old file and line.
	Don't deal with overloaded functions.
	Lose old code for checking arg types of functions.
	Check for overloaded C functions.
	(pushdecl): Deal with overloaded functions.
	(start_decl): Expect pushdecl to return an appropriate function decl.
	(start_function): Ditto.
	(push_overloaded_decl): Don't check for overloaded C functions.

	* *.c: Stop using DECL_OVERLOADED, it being archaic.
	TREE_OVERLOADED should probably go, too.

Mon Mar 28 14:00:45 1994  Ron Guilmette  (rfg@@netcom.com)

	* typeck.c (comp_target_types): Call comp_target_parms with
	strict == 1.

Sun Mar 27 00:07:45 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (empty_parms): Don't parse () as (...) in extern "C"
	sections if we're compiling with -ansi or -pedantic.

	* decl.c (decls_match): Don't treat (int) and (int&) as matching.

	* decl2.c (grokfield): Don't pedwarn twice about initializing
	field.

	* decl.c (push_overloaded_decl): Warn about shadowing
	constructor.
	(redeclaration_error_message): Don't allow 'int a; int a;'

	* cvt.c (build_up_reference): Only check for valid upcast if
	LOOKUP_PROTECT is set, not just any flag.

Fri Mar 25 01:22:31 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* lex.c (check_newline): When we see a #pragma implementation,
	also set it for the main input file.

	* init.c (build_new): Convert array size argument to size_t.

	* parse.y (primary): If we're doing a parenthesized type-id, call
	groktypename before passing it to build_new.

	* call.c (build_method_call): Deal properly with const and
	volatile for instances of reference type.

	* decl.c (store_return_init): Change 'if (pedantic) error' to 'if
	(pedantic) pedwarn'.

	* decl.c (grokdeclarator): Don't complain about putting `static'
	and `inline' on template function decls.

Thu Mar 24 23:18:19 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* call.c (build_method_call): Preserve const & volatile on
	`this'.

Thu Mar 24 16:21:52 1994  Mike Stump  <mrs@@cygnus.com>

	* init.c (build_new, build_vec_delete): Use global new and delete
	for arrays. 
	* decl2.c (delete_sanity): Ditto.

Thu Mar 24 02:10:46 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cvt.c (convert_to_reference): If i is an lvalue,
	(int &)i -> *(int*)&i, as per 5.2.8p9 of the latest WP.
	(convert_force): Call convert_to_reference with LOOKUP_COMPLAIN.

Wed Mar 23 17:45:37 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (duplicate_decls): Also propagate DECL_TEMPLATE_MEMBERS
	and DECL_TEMPLATE_INSTANTIATIONS.

	* init.c (build_new): Handle array typedefs properly.

Wed Mar 23 18:23:33 1994  Mike Stump  <mrs@@cygnus.com>

	30th Cygnus<->FSF merge.

Wed Mar 23 00:46:24 1994  Mike Stump  <mrs@@cygnus.com>

	* class.c (modify_vtable_entries): Avoid running off the end of the
	virtuals list when processing a virtual destructor.
	* class.c (get_vtable_entry): Ditto.

Wed Mar 23 00:23:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (duplicate_decls): If two template decls don't match,
	just return 0.

Tue Mar 22 23:49:41 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (convert_for_assignment): Don't pedwarn about
	converting function pointer to void *.

Tue Mar 22 22:23:19 1994  Mike Stump  <mrs@@cygnus.com>

	Major revamp of pointer to member functions.  Cures major
	nonfunctionality when used in casts, and MI situations.

	* cvt.c (convert_force): Update call site of build_ptrmemfunc.
	* typeck.c (convert_for_assignment): Ditto.
	* typeck2.c (digest_init): Ditto.
	* typeck2.c (process_init_constructor): Simplify by moving code into
	digest_init.
	* typeck2.c (digest_init): Do default_conversions on init value, if
	we are processing pointer to member functions.
	* class.c (get_vfield_offset): Now non-static.  Convert bit offset
	into byte offset.
	* cp-tree.h (get_vfield_offset): Ditto.
	* typeck.c (get_member_function_from_ptrfunc): Convert down to right
	instance, before fetching vtable pointer.
	* typeck.c (get_delta_difference): New routine.
	* typeck.c (build_ptrmemfunc): Revamp to handle casting better, also
	get vtable pointer out of right subobject.

Tue Mar 22 17:56:48 1994  Mike Stump  <mrs@@cygnus.com>

	* search.c (get_binfo): Return NULL instead of aborting, when
	passed a UNION_TYPE.

Tue Mar 22 12:44:54 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	These patches implement handling of redefinition/redeclaration of
	templates.

	* typeck.c (comptypes): Simplify.  All TEMPLATE_TYPE_PARMs are
	considered compatible.

	* parse.y (template_def): Pass defn argument to end_template_decl.

	* pt.c (end_template_decl): Add defn argument.  Check for
	redefinition.  Simplify.

	* error.c (OB_UNPUT): New macro, to remove mistakes.
	(aggr_variety): Subroutine of dump_aggr_type.

	* decl.c (decls_match): Support templates.
	(duplicate_decls): No longer static.  Don't try to lay out template
	decls.
	(pushdecl): Simplify.

	* cp-tree.h (DECL_TEMPLATE_MEMBERS): Use DECL_SIZE instead of
	DECL_INITIAL.

Mon Mar 21 11:46:55 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* error.c (dump_decl): Support class template decls.
	(dump_type): Don't adorn template type parms.

	* decl.c (duplicate_decls): Save DECL_TEMPLATE_INFO from old decl
	if it was a definition.
	(redeclaration_error_message): Do the cp_error thang, and reject
	redefinition of templates.

Mon Mar 21 19:36:06 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* decl.c (grokdeclarator):  Set TREE_PUBLIC for METHOD_TYPE
	in FIELD context, when appropriate.  Also,
	CLASSTYPE_INTERFACE_ONLY is irrelevant to setting TREE_PUBLIC.
	Also, simplify check for bogus return specifiers.

Mon Mar 21 11:46:55 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (after_type_declarator1): Expand type_quals.
	(notype_declarator1): Ditto.
	(absdcl1): Ditto.

Sat Mar 19 01:05:17 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grokdeclarator): Treat class-local typedefs like static
	members; i.e. 'typedef int f();' means that f is a function type,
	not a method type.

	* parse.y (decl): Change direct_* back to *.
	(type_id): Change direct_abstract_declarator to absdcl.
	(direct_declarator, direct_initdecls, direct_initdcl0): Remove again.

Fri Mar 18 12:47:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	These two patches fix crashes on instantiating a template inside a
	function with C linkage or containing labels.

	* class.c (current_lang_stacksize): No longer static.

	* decl.c (struct saved_scope): Add lang_base, lang_stack,
	lang_name, lang_stacksize, and named_labels.
	(push_to_top_level): Save them.
	(pop_from_top_level): Restore them.

	* gxxint.texi (Parser): Update.

	These two patches finish moving the task of expr/declarator
	ambiguity resolution from the lexer to the parser, and add one more
	r/r conflict.  START_DECLARATOR can now be nuked.

	* parse.y (decl): Add "direct_" in typespec X rules.
	(direct_declarator): New nonterminal for
	direct_after_type_declarator and direct_notype_declarator.
	(direct_initdecls): Like initdecls, but uses direct_initdcl0.
	(direct_initdcl0): Like initdcl0, but uses direct_declarator.
	(named_parm): Add typespec direct_declarator rule.

	* spew.c (yylex): #if 0 out START_DECLARATOR insertion.

	These two patches disable some excessive cleverness on the part of
	g++; a non-class declaration always hides a class declaration in the
	same scope, and g++ was trying to unhide it depending on the
	enclosing expression.

	* spew.c (arbitrate_lookup): #if 0 out.

	* decl.c (lookup_name): Never call arbitrate_lookup.

	* parse.y (complex_notype_declarator1): Add '*'
	complex_notype_declarator1 and '&' complex_notype_declarator1 rules.

	* parse.y (complex_direct_notype_declarator): Restore id_scope
	see_typename TYPENAME rule, remove all other rules beginning with
	those tokens.
	(notype_unqualified_id): Add '~' see_typename IDENTIFIER rule.

Thu Mar 17 17:30:01 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	These changes fix the compiler's handling of the functional cast/
	object declaration ambiguities in section 6.8 of the ARM.  They also
	add 11 reduce/reduce conflicts.  Sigh.

	* parse.y: Add precedence decls for OPERATOR and '~'.
	(notype_unqualified_id): New nonterminal, encompasses all of the
	ANSI unqualified-id nonterminal except TYPENAMEs.
	(expr_or_declarator): New nonterminal to delay parsing of code like
	`int (*a)'.
	(primary): Use notype_unqualified_id.
	(decl): Add typespec initdecls ';' and typespec declarator ';'
	rules.
	(initdcl0): Deal with the above.
	(complex_notype_declarator1): A notype_declarator that is not also
	an expr_or_declarator.
	(complex_direct_notype_declarator): A direct_notype_declarator that
	doesn't conflict with expr_or_declarator.  Use
	notype_unqualified_id.  Remove id_scope see_typename TYPENAME rule.
	(functional_cast): New nonterminal, for the three functional cast
	rules.  So that they can be moved after
	complex_direct_notype_declarator.
	(see_typename): Don't accept type_quals any more.

	* decl2.c (reparse_decl_as_expr): New function to deal with parse
	nodes for code like `int (*a)++;'.	
	(reparse_decl_as_expr1): Recursive subroutine of the above.
	(finish_decl_parsing): New function to deal with parse nodes for
	code like `int (*a);'.  See the difference?

Thu Mar 17 12:16:10 1994  Mike Stump  <mrs@@cygnus.com>

	These changes break binary compatibility in code with classes
	that use virtual bases.

	* search.c (dfs_get_vbase_types): Simplify and correct to make
	sure virtual bases are initialized in dfs ordering.
	* search.c (get_vbase_types): Simplify and make readable.

Thu Mar 17 12:01:10 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y: s/ typename / type_id /g

Wed Mar 16 17:42:52 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* parse.y (typespec): add SCOPE TYPENAME for global scoped 
	type. e.g. ::B x.

	* decl.c (complete_array_type): fix a bug that in -pendantic
	mode even there's no initializer, it will continue to build
	default index.

Wed Mar 16 17:43:07 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (direct_notype_declarator): Add PTYPENAME rule, remove
	all of the scoped PTYPENAME rules.

Wed Mar 16 16:39:02 1994  Mike Stump  <mrs@@cygnus.com>

	* init.c (build_offset_ref): The value of A::typedef_name is
	always the TYPE_DECL, and never an error.

Tue Mar 15 20:02:35 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* search.c (get_base_distance_recursive): Two binfos can only
	represent the same object if they are both via_virtual.

	* class.c (finish_base_struct): Check vbases for ambiguity, too.

	* search.c (get_vbase_types): Accept binfo argument, too.

Tue Mar 15 19:22:05 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* decl.c (complete_array_type): complete TYPE_DOMAIN of the 
	initializer also, because back-end requires it.

Tue Mar 15 15:33:31 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* error.c (dump_expr): Support member functions (which show up as
	OFFSET_REFs).

Mon Mar 14 16:24:36 1994  Mike Stump  <mrs@@cygnus.com>

	* init.c (build_new): Set the return type of multidimensional
	news correctly.

Fri Mar 11 15:35:39 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* call.c (build_method_call): if basetype not equal to type
	of the instance, use the type of the instance in building
	destructor.

Thu Mar 10 17:07:10 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* parse.y (direct_notype_declarator): add push_nested_type for
	'template_type SCOPED_NAME' rule.

Tue Mar  8 00:19:58 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (parm): Add typed_declspec1 {absdcl, epsilon} rules.

Sat Mar  5 04:47:48 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (regcast_or_absdcl): New nonterminal to implement late
	reduction of constructs like `int ((int)(int)(int))'.
	(cast_expr): Use it.
	(sub_cast_expr): Everything that can come after a cast.
	(typed_declspecs1): typed_declspecs that are not typed_typespecs.
	(direct_after_type_declarator): Lose PAREN_STAR_PAREN rule.
	(direct_abstract_declarator): Replace '(' parmlist ')' rule with
	'(' complex_parmlist ')' and regcast_or_absdcl.
	(parmlist): Split
	(complex_parmlist): Parmlists that are not also typenames.
	(parms_comma): Enabler.
	(named_parm): A parm that is not also a typename.  Use declarator
	rather than dont_see_typename abs_or_notype_decl.  Expand
	typed_declspecs inline.
	(abs_or_notype_decl): Lose.
	(dont_see_typename): Comment out.
	(bad_parm): Break out abs_or_notype_decl into two rules.

Fri Mar  4 18:22:39 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl2.c (reparse_decl_as_casts): New function to change parse
	nodes for `(int)(int)(int)' from "function taking int and returning
	function taking int and returning function taking int" to "... cast
	to int, cast to int, cast to int".

	* decl2.c (reparse_decl_as_expr): Recursive function to change
	parse nodes for `A()()' from "function returning function returning
	A" to "A().operator()".

	* parse.y (primary): Replace `typespec LEFT_RIGHT' rule with
	`typespec fcast_or_absdcl' rule.
	(fcast_or_absdcl): New nonterminal to implement late reduction of
	constructs like `A()()()()'.
	(typename): Replace `typespec absdcl1' rule with
	`typespec direct_abstract_declarator' rule.
	(direct_abstract_declarator): Replace `LEFT_RIGHT type_quals' rule
	with `fcast_or_absdcl type_quals' rule.

Fri Mar  4 16:18:03 1994  Mike Stump  <mrs@@cygnus.com>

	* tree.c (lvalue_p): Improve OFFSET_REF handling, so that it
	matches Section 5.5.

Fri Mar  4 14:01:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* error.c (dump_type_prefix): Don't print basetype twice for
	pmfs.

Fri Mar  4 13:24:33 1994  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (convert_arguments): Handle setHandler(A::handlerFn)
	so that it is like setHandler(&A::handlerFn).  Cures an `invalid
	lvalue in unary `&''.

Fri Mar  4 11:15:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* gxxint.texi (Copying Objects): New section discussing default
	op= problems with virtual inheritance.

	* decl2.c (grokoptypename): Just does grokdeclarator and
	build_typename_overload, since the parser can't call grokdeclarator
	directly.

	* method.c (build_typename_overload): Set IDENTIFIER_GLOBAL_VALUE
	and TREE_TYPE on generated identifiers.

	* decl.c (grokdeclarator): Don't deal with TYPE_EXPRs anymore.

	* parse.y (parm): Convert `const char *' to `__opPCc' here.

	* error.c (dump_decl): Say sorry rather than my_friendly_aborting
	if we can't figure out what to do.
	(dump_type*): Ditto.

	* typeck2.c (build_m_component_ref): 'component' is an expr, not
	a decl.  Also move the IS_AGGR_TYPE check after the stripping of
	REFERENCE_TYPE.

Fri Mar  4 04:46:05 1994  Mike Stump  <mrs@@cygnus.com>

	* call.c (build_method_call): Handle b->setHandler(A::handlerFn)
	so that it is like b->setHandler(&A::handlerFn).  Cures an `invalid
	lvalue in unary `&''.

Thu Mar  3 12:38:15 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y: Add precedence specification for START_DECLARATOR.
	(type_quals): Move before primary.
	(typename): Move before typed_declspecs, add 'typespec absdcl1' rule.

	* decl2.c (grokoptypename): Lose.

	* decl.c (grokdeclarator): Parse TYPE_EXPRs in the initial scan,
	rather than waiting until later.

Wed Mar  2 14:12:23 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (unary_expr): Use 'typename' in 'new' rules, rather
	than expanding it inline.
	(typename): Expand empty option of (former) absdcl inline.
	(abs_or_notype_decl): Ditto.
	(absdcl): Lose empty rule.
	(conversion_declarator): New nonterminal for 'typename' of 'operator
	typename'.
	(operator_name): Use it instead of absdcl.

	* parse.y: Add precedence declarations for SCOPED_TYPENAME,
	TYPEOF, and SIGOF.
	(typed_declspecs): Accept typed_typespecs, rather than typespec
	directly.  Add rules with reserved_typespecquals.
	(reserved_declspecs): Don't accept typespecqual_reserved at the
	beginning of the list.  The typed_declspecs rule will deal with this
	omission.
	(declmods): Accept nonempty_type_quals, rather than TYPE_QUAL
	directly.

	* parse.y (direct_notype_declarator,
	direct_after_type_declarator, direct_abstract_declarator): Split up
	the declarator1 nonterminals to match the draft standard and avoid
	ambiguities.
	(new_type_id, new_declarator, direct_new_declarator,
	new_member_declarator): New nonterminals to implement the subset of
	'typename' allowed in new expressions.
	(unary_expr): Use new_type_id instead of typename.
	(after_type_declarator1, absdcl1): Fix semantics of member pointers.
	(abs_member_declarator, after_type_member_declarator): Lose.

	* parse.y (absdcl1): Don't require parens around
	abs_member_declarator.
	(abs_member_declarator): Lose see_typename from rules.
	(after_type_member_declarator): Ditto.

	* tree.c (get_identifier_list): New function, containing code
	previously duplicated in get_decl_list and list_hash_lookup_or_cons.
	(get_decl_list): Use it.
	(list_hash_lookup_or_cons): Ditto.

	* parse.y (typed_declspecs, declmods): It's not necessary to hash
	the declspecs on class_obstack, so don't.  This way typed_typespecs
	can reduce to typed_declspecs.

Wed Mar  2 14:29:18 1994  Jason Merrill (jason@@cygnus.com)

	* cvt.c (build_up_reference): If we aren't checking visibility,
	also allow base->derived conversions.

Mon Feb 28 15:14:29 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* typeck.c (build_c_cast): Remove bogus hack when converting
	to a reference type.

	* cp-tree.h (lang_decl::vbase_init_list, DECL_VBASE_INIT_LIST):
	Removed, not used.
	(lang_stype::methods, lang_decl::next_method): New fields.
	(CLASSTYPE_METHODS, DECL_NEXT_METHOD):  New macros.
	* decl.c (duplicate_decls):  Preserve DECL_NEXT_METHOD.

	* cp-tree.h, decl2.c (flag_vtable_hack):  New flag.
	* decl2.c (finish_vtable_vardecl):  If flag_vtable_hack,
	and  !CLASSTYPE_INTERFACE_KNOWN, try to use the presence of
	a non-inline virtual function to control emitting of vtables.
	* class.c (finish_struct):  Build CLASSTYPE_METHODS list.
	* search.c (build_vbase_vtables_init):  Don't assemble_external
	(yet) if flag_vtable_hack.
	* class.c (build_vfn_ref):  Ditto.

Mon Feb 28 14:54:13 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (component_decl): Don't include "typed_declspecs
	declarator ';'" speedup, since it breaks enums.

Fri Feb 25 15:43:44 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* class.c (finish_struct):  Minor optimization for building
	fn_fields list.

Fri Feb 25 15:23:42 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (start_function): Fix detection of function overloading.

Thu Feb 24 22:26:19 1994  Mike Stump  <mrs@@cygnus.com>

	* lex.c (check_newline): #pragma interface can take a string
	argument, just like #pragma implementation.  #pragma implementation
	checks for garbage on the line, line #pragma interface does.  Main
	input files do not auto implement like named files, #pragma
	implementation must be used explicitly.

Thu Feb 24 17:09:01 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y (components): Handle list of one again.
	(notype_components): Ditto.
	(after_type_declarator1): Take maybe_raises out again.

	* gxxint.texi (Parser): Document additional r/r conflict.

Wed Feb 23 14:42:55 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* gxxint.texi (Parser): Add node.

	* Makefile.in (stamp-parse): Update expected conflict count.

	* parse.y (various): Replace "declmods declarator" with "declmods
	notype_declarator".  The comment saying that "declmods declarator ';'"
	corresponds to "int i;" was wrong; it corresponds to "const i;".
	(component_decl): Add "typed_declspecs declarator ';'" rule; this
	*does* correspond to "int i;".  Change "declmods components" to
	"declmods notype_components".
	(components): Don't deal with a list of one anymore.
	(notype_components): New nonterminal, corresponds to notype_declarator.
	({after_,no}type_component_decl{,0}): More new nonterminals.
	({after_,no}type_declarator): Fold in START_DECLARATOR token.
	Eliminates four reduce/reduce conflicts.

	(expr): Depend on nontrivial_exprlist instead of nonnull_exprlist.
	(nontrivial_exprlist): New nonterminal: A list of at least two
	expr_no_commas's.
	(nonnull_exprlist): Depend on nontrival_exprlist.
	Eliminates four reduce/reduce conflicts.

	(named_class_head): Move intermediate code block into separate
	nonterminal so that we can stick %prec EMPTY on it.

	Add more %prec EMPTY's to eliminate remaining shift/reduce
	conflicts.

	(after_type_declarator): Add maybe_raises to fndecl rules.
	(after_type_declarator_no_typename): Remove.
	For correctness.

	Document remaining reduce/reduce conflicts.

Tue Feb 22 12:10:32 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* search.c (get_base_distance): Only bash BINFO_INHERITANCE_CHAIN
	(TYPE_BINFO (type)) if we care about the path.

	* tree.c (lvalue_p): A COND_EXPR is an lvalue if both of the
	options are.

Mon Feb 21 19:59:40 1994  Mike Stump  <mrs@@cygnus.com>

	* Makefile.in (mostlyclean): lex.c is a source file, don't
	remove.

Sat Feb 19 01:27:14 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* parse.y: Eliminate 20 shift/reduce conflicts.

Fri Feb 18 11:49:42 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* pt.c (type_unification): Add subr argument; if set, it means
	that we are calling ourselves recursively, so a partial match is OK.
	(unify): Support pointers to methods and functions.
	(tsubst): Support method pointers.
	* decl.c (build_ptrmemfunc_type): No longer static, so that
	tsubst can get at it.

	* init.c (is_aggr_typedef): Pretend template type parms are
	aggregates.
	* decl2.c (build_push_scope): If cname refers to a template type
	parm, just grin and nod.	

	* call.c (build_overload_call_real): Pass subr argument to
	type_unification.
	* pt.c (do_function_instantiation): Ditto.
	* class.c (instantiate_type): Ditto.

	* search.c (get_base_distance): If BINFO is a binfo, use it and
	don't mess with its BINFO_INHERITANCE_CHAIN.

	* cvt.c (convert_to_reference): Fix temporary generation.
	If ambiguous, return error_mark_node.

	* init.c (build_new): Put back some necessary code.

Thu Feb 17 15:39:47 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* init.c (build_new): Deal with array types properly.

	* search.c (get_binfo): Become a shell for get_base_distance.
	(get_binfo_recursive): Lose.
	(get_base_distance_recursive): Find the path to the via_virtual base
	that provides the most access.
	(get_base_distance): Ditto.

	* parse.y (explicit_instantiation): Syntax is 'template class
	A<int>', not 'template A<int>'.

	* typeck.c (convert_for_initialization): Remove bogus warning.

	* parse.y (datadef): Revert patch of Oct 27.

Thu Feb 17 15:12:29 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* class.c (build_vfn_ref):  Cast delta field to ptrdiff_type_node,
	rather than integer_type_node.  Does wonders for the Alpha.

Thu Feb 17 13:36:21 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (build_ptrmemfunc_type): Make sure that the pmf type
	goes onto the same obstack as its target type.

Wed Feb 16 00:34:46 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cvt.c (convert_to_reference): If converting via constructor
	on local level, go back to build_cplus_new approach.

	* tree.c (build_cplus_new): If with_cleanup_p, set cleanup slot
	to error_mark_node to prevent expand_expr from building a cleanup
	for this variable.

	* lex.c (default_assign_ref_body): Return *this from the memcpy
	version, too.

	* decl.c (grok_reference_init): Just return if called with
	error_mark_node, don't worry about initializing non-const reference
	with temporary.

	* cvt.c (convert_to_reference): Do the right thing for
	non-aggregate reference conversions, pedwarn when generating a
	non-const reference to a temporary.

	* class.c (finish_struct): TYPE_HAS_COMPLEX_{INIT,ASSIGN}_REF and
	TYPE_NEEDS_CONSTRUCTING all depend on TYPE_USES_VIRTUAL_BASECLASSES
	again.

Tue Feb 15 19:47:19 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grok_reference_init): Pawn off a lot of the work on
	convert_to_reference.  Generally do the right thing.

	* cvt.c (convert_to_reference): Conform to the initial comment;
	i.e. don't create temps if decl != error_mark_node.  Handle
	cleanups better for temps that do get created.  Don't pretend
	that we can use an 'A' to initialize a 'const double &' just by
	tacking on a NOP_EXPR.  Support LOOKUP_SPECULATIVELY.

	* call.c (build_method_call): Set TREE_HAS_CONSTRUCTOR on
	constructor calls.	

Mon Feb 14 14:50:17 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grok_reference_init): Make a temporary for initializing
	const reference from constant expression.

Mon Feb 14 11:31:31 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* cp-tree.h, decl.c (set_identifier_local_value):  Deleted function.
	* decl.c (pushdecl):  Define decl in correct binding_level
	(which isn't always the inner_binding_level).

	* cvt.c (build_up_reference):  Don't ever call expand_aggr_init.
	It's ugly, and I don't think it's the right thing to do.

	* cp-tree.h, class.c, decl.c, decl2.c, sp/search.c: 
	Remove NEW_CLASS_SCOPING, assuming it is always 1.
	* decl.c (pop_decl_level):  Removed; manually inlined.

Sun Feb 13 19:04:56 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.h (candidate): Add basetypes field.

	* call.c (build_method_call): Do access checking after choosing a
	function, not before.

	* Makefile.in (cvt.o, call.o, method.o): Depend on class.h.
	(mostlyclean): Remove ../cc1plus.

Fri Feb 11 11:52:26 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct): Don't allow adjusting access to a field
	of a base class if a local field has the same name.

	* error.c (dump_type_prefix): Output basetype for METHOD_TYPEs.

hu Jan 13 17:55:51 EST 1994 Gnanasekaran Swaminathan (gs4t@@virginia.edu)

	    * cp-tree.h (DESTRUCTOR_NAME_P): do not confuse AUTO_TEMP names
	    with destructor names when either NO_DOLLAR_IN_LABEL or
	    NO_DOT_IN_LABEL are not defined.

	    Now `template <class T, T f(T&), const T*> class A {...}' works.

	    * pt.c (grok_template_type): substitute template parm types
	    with actual types in complex type as well.
	    (coerce_template_parms): update the grok_template_type ()
	    function call.

	* pt.c (tsubst): Traverse method list using DECL_CHAIN.

	* decl.c (grok_op_properties): Allow operator++/-- to have
	default arguments.

	* typeck2.c (store_init_value): Don't abort when called to
	initialize a type that needs constructing with a CONSTRUCTOR.

	* init.c (expand_aggr_init_1, CONSTRUCTOR case): If
	store_init_value fails, build and expand an INIT_EXPR.  If
	store_init_value succeeds, call expand_decl_init.

Fri Feb 11 02:49:23 1994  Mike Stump  <mrs@@cygnus.com>

	* class.c (build_vbase_path): Use complete_type_p instead of
	resolves_to_fixed_type_p to determine if the virtual bases are in
	their right place for the type of expr.  Cures problem of thinking a
	virtual base class is one place, when it is in fact someplace else.

Fri Feb 11 00:26:46 1994  Mike Stump  <mrs@@cygnus.com>

	* init.c (resolve_offset_ref): Make sure we first convert to
	intermediate type, if given, when dealing with members off `this'.
	Solves an incorrrect `type `foo' is not a base type for type
	`multiple'' when it is infact, a base type.

Thu Feb 10 21:49:35 1994  Mike Stump  <mrs@@cygnus.com>

	* class.c (modify_other_vtable_entries): Use get_binfo, instead
	of binfo_value.  Solves problem with compiler giving a `base class
	`B' ambiguous in binfo_value (compiler error)' on complex MI
	herarchies, when a virtual function is first defied in a virtual
	base class.

Thu Feb 10 17:19:32 1994  Mike Stump  <mrs@@cygnus.com>

	* class.c (build_vbase_path): Don't complain about ambiguous
	intermediate conversion when converting down to a virtual base
	class, even if they might seem to be ambiguous.

Thu Feb 10 12:18:26 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck2.c (build_functional_cast): #if 0 out constructor
	inheritance code, improve error messages.

	* class.c (finish_base_struct): Complain about base with only
	non-default constructors in derived class with no constructors.

	* decl.c (grokdeclarator): Fix detection of virtual new/delete.

Wed Feb  9 22:02:32 1994  Mike Stump  <mrs@@cygnus.com>

	* search.c (build_mi_virtuals, add_mi_virtuals,
	report_ambiguous_mi_virtuals): Removed unneeded code.
	* class.c (finish_struct_bits): Ditto.

Wed Feb  9 11:27:17 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* pt.c (end_template_instantiation): Push decl before
	pop_from_top_level.

	* typeck2.c (build_m_component_ref): Make sure datum is of
	aggregate type.

	* init.c (get_type_value): New function, returns
	IDENTIFIER_TYPE_VALUE or IDENTIFIER_CLASS_TYPE_VALUE or NULL_TREE.

	* call.c (build_method_call): Don't die on call to destructor for
	non-type.

	* decl.c (grokdeclarator): Complain about virtual op new and op
	delete, make static virtuals unvirtual instead of unstatic.

	* typeck.c (build_c_cast): Also call default_conversion on
	methods.

	* decl.c (grokdeclarator): Don't complain about anonymous
	bitfields.

	* parse.y (simple_stmt, for loops): Move the continue point after
	the cleanups.

	* class.c (finish_struct): Fix setting of
	TYPE_HAS_COMPLEX_INIT_REF.

Tue Feb  8 13:21:40 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* init.c (build_new): Deal with `new double (1)'.

	* class.c (finish_struct): TYPE_HAS_COMPLEX_*_REF are supersets of
	TYPE_HAS_REAL_*_REF, but TYPE_HAS_COMPLEX_INIT_REF is independent of
	TYPE_NEEDS_CONSTRUCTING.

	* decl.c (duplicate_decls): Propagate access decls.

	* typeck2.c (process_init_constructor): Accept empty_init_node
	for initializing unions.

	* class.c, lex.c, cp-tree.h: Use
	TYPE_HAS_COMPLEX_ASSIGN_REF where TYPE_HAS_REAL_ASSIGN_REF was used
	before, use TYPE_HAS_COMPLEX_INIT_REF for TYPE_NEEDS_CONSTRUCTING in
	some places.

	* decl.c (finish_decl): Don't complain about uninitialized const
	if it was initialized before.

Mon Feb  7 18:12:34 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* lex.c (default_assign_ref_body): Don't deal with vbases for
	now.

	* decl.c (finish_decl): Fix reversed logic for objects and other
	things that need to be constructed but have no initializer.

	* class.c (finish_struct): Don't set TYPE_HAS_* flags that are
	set by grok_op_properties or finish_decl.

	* decl.c: Don't warn about extern redeclared inline unless
	-Wextern-inline is given.
	* decl2.c (lang_decode_option): Ditto.
	* cp-tree.h: Ditto.

Mon Feb  7 17:29:24 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* decl.c (pushdecl_with_scope): Fix thinko.  Add forward
	declaration.

	* decl.c (pushdecl_with_scope):  New function.
	* decl.c (pushdecl_top_level):  Use new function.
	* decl.c (pushtag):  Initialize newdecl.
	* decl.c (pushtag):  Push new type decl into correct scope.

Mon Feb  7 14:42:03 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* call.c, cvt.c, init.c, search.c, cp-tree.h:
	Eradicate LOOKUP_PROTECTED_OK.

Mon Feb  7 13:57:19 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* decl.c (pushtag, xref_tag), cp-tree.h:  Add extra parameter
	 'globalize' to signify implicit declarations.
	* decl.c (globalize_nested_type, maybe_globalize_type):  Removed.
	* decl.c (set_identifier_type_value_with_scope):  New function.
	* decl.c (set_identifier_local_value):  Simplify.
	* spew.c (yylex, do_addr):  Modify to return a _DEFN if a
	forward declaration (followed by ';' and not preceded by 'friend').
	* class.c, decl.c, except.c, init.c, parse.y,
	pt.c, search.c: Add new argument to calls to xref_tag and
	pushtag.

Mon Feb  7 00:22:59 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-tree.h (ACCESSIBLY_UNIQUELY_DERIVED_P): New macro, means what
	ACCESSIBLY_DERIVED_FROM_P meant before.
	(ACCESSIBLY_DERIVED_FROM_P): Now disregards ambiguity.

	* cvt.c (build_up_reference): Call get_binfo with PROTECT == 1.

	* search.c (get_base_distance_recursive): Members and friends of
	a class X can implicitly convert an X* to a pointer to a private or
	protected immediate base class of X.
	(get_binfo_recursive): Ditto.
	(get_base_distance): Ignore ambiguity if PROTECT < 0.
	(get_binfo): Lose multiple values of PROTECT.
	(compute_access): Protected is OK if the start of the
	search is an accessible base class of current_class_type.

	* method.c (build_opfncall): Do check access on operator new here.

	* decl.c (finish_function): Don't check access on operator new
	here.

Sun Feb  6 14:06:58 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (xref_tag): The base of a derived struct is NOT always
	public.  Duh.

	* pt.c (do_explicit_instantiation): New function, called from
	parser to do explicit function instantiation.
	(type_unification): Allow the args list to be terminated with
	void_list_node.
	(do_pending_expansions): Look at i->interface for non-member
	templates.

	* parse.y (datadef): Move explicit_instantiation here.
	(structsp): From here.
	(datadef): Complain about `int;'.

Sun Feb  6 12:33:18 1994  Per Bothner  (bothner@@kalessin.cygnus.com)

	* pt.c (end_template_instantiation), cp-tree.h:  Remove unused
	second parameter, and simplify first from a TREE_LIST where
	we only care about its TREE_VALUE to just the value (an IDENTIFIER).
	* pt.c (instantiate_member_templates):  Simplify argument list
	from a TREE_LIST to just an IDENTIFIER.
	* lex.c (yyprint):  PRE_PARSED_CLASS_DECL is now just an IDENTIFIER.
	* parse.y (template_instantiate_once):  Simplify accordingly.
	* decl.c (inner_binding_level): New.  Use various places to
	simplify.

Sun Feb  6 02:49:37 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck2.c (build_functional_cast): int() -> int(0).

Sat Feb  5 00:53:21 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct): Don't do a bitwise copy for op= if the
	class has a virtual function table.

	* typeck.c (convert_for_initialization): Restore warnings about
	not using defined op=.  Should really be my_friendly_aborts, I
	s'pose.

Fri Feb  4 14:21:00 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct): Tidy up conditions for doing bitwise
	copies of objects.

	* decl.c (build_default_constructor): #if 0 out.

	* *: Eradicate TYPE_GETS_{ASSIGNMENT,ASSIGN_REF,CONST_ASSIGN_REF,
	CONST_INIT_REF}, TYPE_HAS_REAL_CONSTRUCTOR.

	* decl.c (grokdeclarator): Don't return void_type_node for
	friends being defined here.

	* init.c (perform_member_init): Only do the init if it's useful.

	* lex.c (default_copy_constructor_body): If we don't need to do
	memberwise init, just call __builtin_memcpy.
	(default_assign_ref_body): Ditto.

	* decl.c (grokdeclarator): If friendp && virtualp, friendp = 0.

Fri Feb  4 13:02:56 1994  Mike Stump  <mrs@@cygnus.com>

	* lex.c (reinit_parse_for_method, cons_up_default_function):
	Don't give warn_if_unknown_interface warning when it came from a
	system header file.
	* pt.c (end_template_decl, instantiate_template): Ditto.
	* decl.c (start_decl): Ditto.

Fri Feb  4 00:41:21 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grokdeclarator): Don't try to set TYPE_WAS_ANONYMOUS on
	enums.

	* decl2.c (constructor_name_full): Use IS_AGGR_TYPE_CODE instead of
	IS_AGGR_TYPE, since we don't know it's a type.

Thu Feb  3 11:36:46 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grokdeclarator): Don't complain about anonymous unions.

	* cp-tree.h (TYPE_WAS_ANONYMOUS): This struct was originally
	anonymous, but had a name given to it by a typedef.

	* decl.c (grokdeclarator): When renaming an anonymous struct, set
	TYPE_WAS_ANONYMOUS.

	* decl2.c (constructor_name_full): Use TYPE_WAS_ANONYMOUS.

	* cp-tree.h (DECL_UNDEFINED_FRIENDS): #if 0 out.

	* init.c (xref_friend): Don't set up DECL_UNDEFINED_FRIENDS.
	(embrace_waiting_friends): Don't use DECL_UNDEFINED_FRIENDS.
	
	* decl.c (grokdeclarator): Set TYPE_NESTED_NAME properly on nested
	anonymous structs that get typedef'd.

	* decl.c (grokdeclarator): Always return void_type_node for
	friends.

	* error.c (dump_function_decl): Don't use DECL_CLASS_CONTEXT for
	friends.
	(dump_function_decl): Don't print out default args for
	a function used in an expression.

	* decl.c (grokdeclarator): Give error on abstract declarator used
	in an invalid context (i.e. `void (*)();').

	* error.c (cp_line_of): Support _TYPE nodes.
	(cp_file_of): Ditto.

	* cvt.c (build_up_reference): Don't abort if passed a SAVE_EXPR;
	it can happen for the RHS of an assignment stmt where the LHS is
	a COND_EXPR.

	* init.c (expand_aggr_init_1): Deal with bracketed initializer
	lists properly.

	* class.c (finish_struct): Deal with enumerators and typedefs
	again.

Wed Feb  2 11:30:22 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct): Tidy up loop over fields.

	* errfn.c (cp_thing): Don't advance twice after a format.

	* class.c (finish_struct): Complain about needing a constructor
	if a member has only non-default constructors, and don't try to
	generate a default constructor.

	* decl.c (finish_decl): Also do the constructor thing if
	TYPE_NEEDS_CONSTRUCTING is set (for arrays).

	* search.c (unuse_fields): New function: mark all fields in this
	type unused.
	(dfs_unuse_fields): Helper function.

	* class.c (pushclass): If the new class is the same as the old
	class, still unuse the fields.
	(unuse_fields): Move to search.c.

	* decl.c (grok_op_properties): Add friendp argument.
	(grokfndecl): Pass it.
	(start_method): Ditto.

	* decl2.c (delete_sanity): Add use_global_delete parameter to catch
	::delete calls.

	* parse.y (unary_expr): Pass new parameter to delete_sanity.

	* lex.c (default_copy_constructor_body): Don't choke if the union
	has no fields.
	(default_assign_ref_body): Ditto.

	* call.c (compute_conversion_costs_ansi): Do the right thing for
	ellipsis matches.

	* decl.c (push_to_top_level): Optimize.

	* decl.c (start_function): Look for the lexical scope of a friend
	in DECL_CLASS_CONTEXT.

	* init.c (do_friend): Set DECL_CLASS_CONTEXT on global friends.

Tue Feb  1 15:59:24 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-tree.h (TREE_GETS_PLACED_NEW): New macro.

	* init.c (init_init_processing): Don't assign BIN/BID to the
	IDENTIFIER_GLOBAL_VALUEs of their respective operators.
	(build_new): Check TREE_GETS_PLACED_NEW.

	* decl.c (grok_op_properties): Don't set TREE_GETS_NEW for a decl of
	op new with placement, set TREE_GETS_PLACED_NEW.

	* cp-tree.h (ANON_UNION_P): New macro.  Applies to decls.

	* class.c (finish_struct): Don't treat anonymous unions like
	other aggregate members.  Do synthesize methods for unions without
	a name, since they may or may not be "anonymous unions".

	* decl2.c (grok_x_components): Wipe out memory of synthesized methods
	in anonymous unions.

	* lex.c (default_copy_constructor_body): Support unions.
	(default_assign_ref_body): Ditto.

Mon Jan 31 12:07:30 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-tree.h: Fix documentation of LOOKUP_GLOBAL, add prototypes.

	* error.c (args_as_string): New function (%A), like type_as_string
	except NULL_TREE -> "..."

	* call.c (build_overload_call_real): Fix for new overloading.

	* decl.c (grok_op_properties): Set all of the TYPE_OVERLOADS_* flags
	here.

	* parse.y (operator_name): Instead of here.

	* typeck2.c (build_functional_cast): Treat a TREE_LIST as a list
	of functions.

	* call.c (build_overload_call_real): Support LOOKUP_SPECULATIVELY.

	* method.c (build_opfncall): Don't need to massage return value
	any more, call build_overload_call with all flags.

	* typeck.c (build_x_binary_op): Put back speculative call to
	build_opfncall.
	(build_x_unary_op): Ditto.
	(build_x_conditional_expr): Ditto.

Mon Jan 31 10:00:30 1994  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (build_type_conversion_1): Change call to pedwarn into
	warning, and conditionalize upon warn_cast_qual.

Fri Jan 28 11:48:15 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* search.c (lookup_field): If xbasetype is a binfo, copy it to
	avoid clobbering its inheritance info.

	* call.c (build_method_call): Don't overwrite basetype_path with
	TYPE_BINFO (inst_ptr_basetype) if they have the same type.

	* search.c (compute_access): Fix handling of protected inheritance
	and friendship with the enclosing class.

	* typeck2.c (store_init_value): Allow passing of TREE_CHAIN for
	initialization of arbitrary variable.

	* typeck2.c (build_functional_cast): Only try calling a method if
	one exists.

	* decl.c (grokdeclarator): Move handling of constructor syntax
	initialization into first loop for generality.
	(parmlist_is_random): Lose.

	* lex.c (cons_up_default_function): Set TREE_PARMLIST on arguments
	to default function.

Thu Jan 27 19:26:51 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (grokparms): Abort if we get called with something we don't
	expect.

Thu Jan 27 17:37:25 1994  Mike Stump  <mrs@@cygnus.com>

	* call.c (build_overload_call_real): Change argument complain to
	flags to match style of rest of code.  Pass it down to
	build_function_call_real as necessary.
	* call.c (build_overload_call, build_overload_call_maybe): Change
	argument complain to flags to match style of rest of code.
	* cp-tree.h (build_function_call_real): Added fourth flags
	argument.
	* cvt.c (convert_to_reference): Only give warning messages, if
	LOOKUP_COMPLAIN is set.
	* typeck.c (build_x_function_call): Change simple complain
	argument to build_overload_call_maybe and build_overload_call, to
	LOOKUP_COMPLAIN to match style of rest of code.
	* typeck2.c (build_functional_cast): Ditto.
	* typeck.c (build_function_call_real): Add flags, so that we can
	not complain, if we don't want to complain.  Complain about
	arguments, if we are complaining, otherwise don't.
	* typeck.c (build_function_call, build_function_call_maybe):
	Stick in flags argument.
	* typeck.c (build_x_binary_op, build_x_unary_op,
	build_x_conditional_expr, build_x_compound_expr): Follow style of
	build_x_indirect_ref, as it is more correct and more common.

Thu Jan 27 14:36:20 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* call.c (build_method_call): Don't check for being called with
	a pointer.

	* decl2.c (finish_file): Don't play with DECL_CLASS_CONTEXT for the
	static initializer function.

	* init.c (build_member_call): Use convert_force here, too.

	* search.c (compute_access): Only treat static members specially
	if they are referenced directly.

Wed Jan 26 18:28:14 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* gxxint.texi (Access Control): New node.

	* search.c (current_scope): New function; returns whichever of
	current_class_type and current_function_decl is the most nested.
	(compute_access): Total overhaul to make it clearer and more
	correct.  Don't use the cache for now; in the only situation where
	it was used before, it gained nothing.  This frees up three of the
	DECL_LANG_FLAGs for possible other use!

	* cp-tree.h: #if 0 out DECL_PUBLIC & friends.

	* typeck.c (build_component_ref_1): Don't check DECL_PUBLIC.

	* call.c (build_method_call): Use convert_force to cast `this' --
	rely on the access checking for the method itself.

	* init.c (is_friend): Do the nesting thing, handle types.  I am
	my own friend.
	(is_friend_type): Become a shell for is_friend.
	(add_friend): Never stick in ctype.
	Why are the friendship functions in init.c, anyway?

Wed Jan 26 17:50:00 1994  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (build_type_conversion_1): Don't conditionalize call to
	pedwarn upon pedantic.

Wed Jan 26 17:20:46 1994  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (convert_to_reference): Add 8.4.3 checking so that one
	gets a warning if one tries to initialize a non-const & from a
	non-lvalue.
	* cvt.c (convert_to_reference): Use %P format for argument
	numbers in warnings.

Wed Jan 26 14:35:06 1994  Mike Stump  <mrs@@cygnus.com>

	* init.c (build_delete): Follow style in call.c to construct the
	virtual call to the desctructor, as that code is right.  Fixes a
	problem of the compiler saying a pointer conversion is ambiguous.

Wed Jan 26 11:28:14 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-tree.h (VTABLE_NAME_P): Change other occurrence of
	VTABLE_NAME_FORMAT to VTABLE_NAME.

	* *: s/visibility/access/g

Tue Jan 25 18:39:12 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (build_modify_expr): Don't smash references if INIT_EXPR.

Tue Jan 25 13:54:29 1994  Mike Stump  <mrs@@cygnus.com>

	* init.c (build_delete): Back out Jan 17th & 18th pacthes, as
	they break libg++.

Tue Jan 25 13:11:45 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* decl.c (duplicate_decls): Fix pointer arithmetic.

Mon Jan 24 15:50:06 1994  Chip Salzenberg  (chip@@fin.uucp)

	    [ cp-* changes propagated from c-* changes in 940114 snapshot ]
	    * cp-parse.y (maybe_attribute): Allow multiple __attribute__
	    clauses on a declaration.

Mon Jan 24 17:06:23 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct): Do synthesize methods for anon
	structs, just not unions.

Mon Jan 24 13:50:13 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* decl.c (xref_tag): handle anonymous nested type.
	* decl.c (globalize_nested_type): add no globalize bit check.
	* spew.c (hack_more_ids) : templated nested decl not push top
	level.

	* parse.y : get rid of 'goto do_components'. It is much better
	for debugging.

	* decl.c (is_anon_name): get rid of the function and use the
	macro ANON_AGGRNAME_P.
	* pt.c : ditto.

Fri Jan 21 14:06:02 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct): Don't synthesize any methods for
	anonymous structs/unions.

	* typeck.c (build_modify_expr): Don't treat pmf's as class objects.

Thu Jan 20 18:56:46 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* method.c (build_opfncall): Call build_indirect_ref on
	synthesized instance for operator delete.

	* pt.c (type_unification): Don't abort if called with a list of
	types in ARGS.

	* class.c (instantiate_type): Deal with function templates.

Thu Jan 20 16:55:35 1994  Jim Wilson  (wilson@@sphagnum.cygnus.com)

	* Makefile.in (CC): Default to cc not gcc.

Thu Jan 20 13:47:54 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (build_modify_expr): Call constructor if appropriate.

	* decl.c (push_to_top_level): Clear out class-level bindings cache.

Wed Jan 19 13:51:22 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* call.c (resolve_scope_to_name): Work recursively (previously only
	looked down one level).

	* lex.c (do_pending_inlines): If we're still dealing with the last
	batch of inlines, don't start working on a new one.

	* Makefile.in (stamp-parse): Update conflict count.
	(TAGS): Fix.

	* parse.y (explicit_instantiation): New rule; implements
	'template A<int>' syntax (though not 'template foo(int)' yet).
	(structsp): Add explicit_instantiation.

Tue Jan 18 13:53:05 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* class.c (finish_struct, etc.): Simplify decision to synthesize
	a destructor.

	* call.c, class.c, cp-tree.h, decl.c, init.c,
	ptree.c, search.c, typeck.c, typeck2.c: Nuke
	TYPE_NEEDS_CONSTRUCTOR (change all calls to TYPE_NEEDS_CONSTRUCTING).
	* init.c (expand_aggr_init_1): Don't try non-constructor methods
	of initializing objects.
	(build_new): Don't try other methods if the constructor lookup fails.

	* class.c (finish_base_struct): Set cant_have_default_ctor and
	cant_synth_copy_ctor properly.
	(finish_struct): Ditto.

Mon Jan 17 13:58:18 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* typeck.c (build_modify_expr_1): #if 0 out again.
	(build_modify_expr): #if 0 out memberwise init code again.

	* lex.c (default_copy_constructor_body): Be const-correct.
	(default_assign_ref_body): Ditto.

	* init.c (perform_member_init): Use TYPE_HAS_CONSTRUCTOR to decide
	whether or not to use it, rather than TYPE_NEEDS_CONSTRUCTING.
	(expand_aggr_init): Disable silent conversion from initializer list
	to list of args for a constructor.

	* class.c (base_info): Lose needs_default_ctor.
	(finish_base_struct): Ditto.
	(finish_struct): Ditto.

	* decl.c (init_decl_processing): Don't turn off flag_default_inline
	just because flag_no_inline is on.
	(finish_decl): Use TYPE_HAS_CONSTRUCTOR to decide to use
	constructor.

	* class.c (finish_struct): Synthesize default ctor whenever
	allowed.

	* Makefile.in (TAGS): Don't try to run etags on cp-parse.y.

Sat Jan 15 18:34:33 1994  Mike Stump  <mrs@@cygnus.com>

	* Makefile.in, configure: Handle the C++ front-end in a
	subdirectory.
	* cp-*: Move C++ front-end to cp/*.

Fri Jan 14 14:09:37 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-typeck.c (build_function_call_real): Modify to match other
	instances of taking the address of the function.

	* cp-class.c (finish_struct): Set TYPE_HAS_REAL_CONSTRUCTOR to 1 if
	there are non-synthesized constructors.
	Only set TYPE_NEEDS_CONSTRUCTOR if TYPE_HAS_REAL_CONSTRUCTOR.
	Always generate copy constructor if possible.

	* cp-tree.h (lang_type): Add has_real_constructor bitfield.
	(TYPE_HAS_REAL_CONSTRUCTOR): Define.

	* cp-lex.c (default_copy_constructor_body): Use init syntax
	for all bases.

	* cp-type2.c (store_init_value): Only give error for initializer list
	if TYPE_HAS_REAL_CONSTRUCTOR.

Thu Jan 13 15:38:29 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-tree.h (DECL_SYNTHESIZED): Add defn.
	(lang_decl): Add synthesized bitfield to decl_flags.

	* cp-lex.c (cons_up_default_function): Use DECL_SYNTHESIZED to mark
	artificial methods, rather than a line # of 0.

Fri Jan 14 18:25:29 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* cp-decl (xref_tag): fix a bug in conflict type.
	* cp-parse.y : add SCOPED_NAME for uninstantiated template nested
	type reference.
	* cp-spew.c (yylex) : generated SCOPED_NAME token.
	* cp-lex.c (yyprint): handle SCOPED_NAME.

Fri Jan 14 17:00:29 1994  Mike Stump  <mrs@@cygnus.com>

	* cp-decl.c (pushdecl): Revert patch from Jan 11 19:33:03, as it is
	not right.

Thu Jan 13 14:00:35 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* cp-decl2.c (grok_x_components): fix a bug that enum type does not
	have type_flags.

Thu Jan 13 11:39:34 1994  Mike Stump  <mrs@@cygnus.com>

	Ensure that all vtable pointers are initialized with all the right
	values.

	* cp-class.c (is_normal): Changed to reflect new meaning of
	CLASSTYPE_VFIELD_PARENT.
	* cp-class.c (maybe_fixup_vptrs): Use of
	CLASSTYPE_NEEDS_VIRTUAL_REINIT here is misguided.  Use
	BINFO_MODIFIED instead.
	* cp-class.c (finish_struct): Changed to reflect new meaning of
	CLASSTYPE_VFIELD_PARENT.
	* cp-decl.c (get_binfo_from_vfield): Removed, unneeded now.
	* cp-decl.c (finish_function): Use init_vtbl_ptrs, instead of open
	coding it here.
	* cp-init.c (init_vfields): Changed name to init_vtbl_ptrs, and
	re-implement.
	* cp-init.c (emit_base_init): Use new name init_vtbl_ptrs.
	* cp-tree.h (vfield_parent): Changed to integer.
	* cp-tree.h (CLASSTYPE_VFIELD_PARENT): Changed docs to reflect new
	meaning.
	* cp-tree.h (init_vtbl_ptrs): Added init_vtbl_ptrs.

Wed Jan 12 18:24:16 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* cp-decl.c (xref_tag): re-implement globalize nested type.
	* cp-decl2.c (grok_x_components): ditto.
	* cp-parse.y: ditto.
	* cp-tree.h (lang_type): add no_globalize bit in type_flags.

Wed Jan 12 14:08:09 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-decl.c (grokdeclarator): Don't set TREE_PUBLIC on friend
	decls with a definition attached.

	* cp-typeck.c (build_modify_expr): Undo previous change in the case
	of INIT_EXPRs.

Tue Jan 11 19:33:03 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-typeck.c (build_modify_expr): Replace code for generating
	assignment semantics for classes with an error.
	(build_modify_expr_1): #if 0 out.

	* cp-decl.c (pushdecl): Patch bogus design of pushdecl
	behavior for overloaded functions (it doesn't push anything).

	* cp-class.c (finish_struct): When generating default op=,
	set TYPE_HAS_ASSIGNMENT.

Mon Jan 10 18:48:06 1994  Mike Stump  <mrs@@cygnus.com>

	* cp-cvt.c (convert): Make {double, clashing enum} -> enum
	invalid.
	* cp-typeck.c (convert_for_assignment): Simplify.
	* cp-decl2.c (warn_enum_clash): Removed.
	* invoke.texi (-Wenum-clash): Removed.
	* toplev.c (-Wenum-clash): Removed.

Mon Jan 10 17:48:37 1994  Kung Hsu  (kung@@mexican.cygnus.com)

	* cp-decl.c (finish_decl): fix incorrect popclass call.

	* cp-decl.c (is_anon_name): new function, check whether the name
	is anonymous name generated by compiler.
	* cp-decl.c (grokdeclarator): allow nested SCOPE_REF
	* cp-spew.c (hack_more_ids): handle nested type in template.
	* cp-parse.y : handle nested type reference in uninstantiated
	template.
	* cp-call.c (build_method_call): handle uninstantiated template
	case.
	* cp-pt.c (search_nested_type_in_tmpl): new function, search nested 
	type in	template.
	* cp-pt.c (lookup_nested_type_by_name): new function, lookup nested 
	type by name.
	* cp-pt.c (tsubst): handle nested type search by name.

Mon Jan 10 14:32:18 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-init.c (build_member_call): Propagate qualifiers to new type.

	* cp-call.c (build_method_call): Count functions the new way.

Fri Jan  7 19:03:26 1994  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-decl.c (pushtag): Set DECL_ASSEMBLER_NAME for nested classes,
	too.

Tue Jan  4 16:45:51 1994  Kung Hsu  (kung@@cirdan.cygnus.com)

	* cp-parse.y: change to handle whether to globalize nested class.
	* cp-decl.c(xref_tag, maybe_globalize_type): Ditto.

Mon Jan  3 22:22:32 1994  Gerald Baumgartner  (gb@@cygnus.com)

	* Makefile.in cp-call.c cp-class.c cp-cvt.c cp-decl.c cp-decl2.c
	cp-error.c cp-init.c cp-lex.c cp-lex.h cp-method.c cp-parse.y
	cp-spew.c cp-tree.c cp-tree.h cp-type2.c cp-typeck.c cp-xref.c
	gplus.gperf toplev.c: Incorporated C++ signature extension.
	* cp-sig.c: New file, contains most of signature processing.
	* cp-hash.h: Regenerated from gplus.gperf.

	* gcc.1 g++.1: Added explanation for  the `-fhandle-signatures'
	and `-fno-handle-signatures' command line flags.

	* gcc.texi: Changed the last-modification date.
	* invoke.texi: Added `-fhandle-signatures' in the list of
	C++ language options.  Added explanation for this option.

Tue Dec 28 21:10:03 1993  Mike Stump  <mrs@@cygnus.com>

	* cp-init.c (expand_vec_init): Remove comptypes test, as it is too
	harsh here.

Tue Dec 28 13:42:22 1993  Mike Stump  <mrs@@cygnus.com>

	* cp-pt.c (do_pending_expansions): Decide to expand a template
	member function, based upon it's class type, not the class type of
	the first place it was declared.

Tue Dec 28 05:42:31 1993  Mike Stump  <mrs@@cygnus.com>

	* cp-class.c (is_normal): New routine, use to determine when the
	given binfo is the normal one.  (The one that should have the simple
	vtable name.)
	* cp-class.c (modify_other_vtable_entries): Use DECL_ASSEMBLER_NAME
	to check if two fndecls are `the same'.  Sometimes this routine can
	modify the main vtable, and normal should be 1, in that case, so use
	is_normal() to determine if this is the main vtable for the class.
	Don't recurse down virtual bases, as they are shared, and we take
	care of them elsewhere.
	* cp-class.c (modify_vtable_entries): If we have already updated the
	vtable with the new virtual, don't do it again.
	* cp-class.c (finish_struct): Set CLASSTYPE_VFIELD_PARENT as
	appropriate.  Do virtual function overriding in virtual bases, after
	normal overriding, so that the base function list in DECL_VINDEX is
	not overridden, before we have a chance to run through the list.
	Use DECL_ASSEMBLER_NAME to check if two fndecls are `the same'.
	Make sure we pass the right address into modify_vtable_entries.
	* cp-tree.h (CLASSTYPE_VFIELD_PARENT): New field to indicate which
	binfo is the one that has the vtable that we based our vtable on.

Fri Dec 24 09:40:52 1993  Michael Tiemann  (tiemann@@blues.cygnus.com)

	* cp-typeck.c (c_expand_start_case): Use default_conversion to
	convert expression from reference type if necessary.

Wed Dec 22 17:58:43 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-typeck.c (build_unary_op): Make sure that it's a TREE_LIST before
	trying to read its TREE_VALUE.

	* cp-class.c (finish_struct_methods): Clear DECL_IN_AGGR_P here.
	(finish_struct): Instead of here.

Tue Dec 21 14:34:25 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-tree.c (list_hash_lookup_or_cons): Make sure the type doesn't
	have TYPE_PTRMEMFUNC_P set before we try to build its
	CLASSTYPE_ID_AS_LIST.
	(get_decl_list): Likewise, when trying to read it.

	* cp-tree.h (VTABLE_NAME): No def with NO_{DOLLAR,DOT} defined.
	(VTABLE_NAME_P): Use it instead of VTABLE_NAME_FORMAT.

Mon Dec 20 13:35:03 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-typeck.c (rationalize_conditional_expr): New function.
	(unary_complex_lvalue): Use it.
	(build_modify_expr): Use it, since trying to do an ADDR_EXPR of it
	with build_unary_op won't cut it.  Don't wrap the COND_EXPR with a
	SAVE_EXPR either.

	* cp-decl2.c (explicit_warn_return_type): Deleted variable.
	(lang_decode_option): Set warn_return_type, not explicit_*, for
	-Wreturn-type and -Wall.  This is what rest_of_compilation uses to
	decide if it should go into jump_optimize or not.
	* cp-tree.h (explicit_warn_return_type): Deleted.
	* cp-decl.c (grokdeclarator): Use warn_return_type, not explicit_*.
	(finish_function): Also complain about no return in a non-void fn if
	we're being pedantic (don't rely on use of -Wreturn-type).

Fri Dec 17 15:45:46 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-decl.c (grokdeclarator): Forbid declaration of a function as
	static if it's being done inside another function.

	* cp-search.c (compute_visibility): Check for friendship both ways.

Fri Dec 17 14:28:25 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-cvt.c (build_default_binary_type_conversion): Make error
	messages more helpful.

	* cp-error.c (op_as_string): New function, returns "operator =="
	given EQ_EXPR or suchlike.

Fri Dec 17 13:28:11 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-call.c (print_n_candidates): New function.
	(build_overload_call_real): Use it when we complain about a call
	being ambiguous.

Fri Dec 17 12:41:17 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-call.c (build_method_call): Fix checking for static call
	context.

	* cp-method.c (build_opfncall): Call build_indirect_ref on argument
	to operator new.

	* cp-init.c (build_new): Don't mess with rval when building
	indirect ref.

Thu Dec 16 16:48:05 1993  Kung Hsu  (kung@@cirdan.cygnus.com)

	* cp-lex.c (default_assign_ref_body): add check when TYPE_NESTED_
	NAME(type) may not be exist. It's not a problem for old compiler.

Thu Dec 16 14:46:06 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-tree.h (CLASSTYPE_ALTERS_VISIBILITIES_P): Delete macro, it's
	never used for anything.
	(struct lang_type, member type_flags): Delete field
	`alters_visibility', and up `dummy' by 1.
	* cp-class.c (finish_base_struct): Delete code that copies the
	setting of CLASSTYPE_ALTERS_VISIBILITIES_P.
	(finish_struct): Delete code that sets it.

Thu Dec 16 14:44:39 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-decl.c, cp-init.c, cp-typeck.c: Fix arguments to
	build_method_call that I messed up before.

	* cp-search.c (get_base_distance): If protect > 1, allow immediate
	private base.

	* cp-class.c (finish_base_struct): Set cant_synth_* correctly.
	(finish_struct): Ditto.  Well, nigh-correctly; it won't deal
	properly with the case where a class contains an object of an
	ambiguous base class which has a protected op=.  Should be fixed
	when the access control code gets overhauled.
	(finish_struct_methods): Set TYPE_HAS_NONPUBLIC_* correctly.

Thu Dec 16 12:17:06 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-lex.c (real_yylex): Turn the code back on that deals with
	__FUNCTION__ and __PRETTY_FUNCTION__.  Don't use lookup_name, to
	avoid the ambiguity problems that led to it being turned off in the
	first place.

	* cp-method.c (hack_identifier): Also check for a TYPE_PTRMEMFUNC_P
	to see if something is a method.

Wed Dec 15 18:35:58 1993  Mike Stump  <mrs@@cygnus.com>

	* cp-typeck.c (build_modify_expr): Avoid error messages on small
	enum bit fields.
	* cp-typeck.c (convert_for_assignment): Add missing argument to
	cp_warning and cp_pedwarn calls.

Wed Dec 15 18:25:32 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-parse.y (member_init): ANSI C++ doesn't forbid old-style base
	initializers; it's just anachronistic.

	* cp-decl.c (finish_decl): Don't require external-linkage arrays
	to have a complete type at declaration time when pedantic.

Tue Dec 14 11:37:23 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-decl.c (pushdecl): Don't set DECL_CONTEXT if it's already set.

	* cp-call.c (build_method_call): Don't dereference pointer given
	as instance.

	* cp-decl.c (finish_function): Don't pass pointer to
	build_method_call.
	(finish_function): Ditto.

	* cp-typeck.c (build_x_function_call): Ditto.

	* cp-method.c (build_component_type_expr): Ditto.

	* cp-init.c (build_member_call): Ditto.
	(build_new): Ditto.

Mon Dec 13 18:04:33 1993  Kung Hsu  (kung@@cirdan.cygnus.com)

	* cp-decl.c (xref_tag): fix regression created by changes made 
	in Dec. 7 1993.
	* cp-decl.c (xref_defn_tag): fix parallel nested class problem.

Fri Dec 10 12:40:25 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-call.c (compute_conversion_costs_ansi) [DEBUG_MATCHING]: Print
	out the final evaluation of the function, so we can see if ELLIPSIS,
	USER, and EVIL were set at the end.

	* cp-call.c (convert_harshness_ansi): When the parm isn't an lvalue,
	only go for setting TRIVIAL_CODE if we are dealing with types that
	are compatible.

Thu Dec  9 18:27:22 1993  Mike Stump  <mrs@@cygnus.com>

	* cp-decl.c (flag_huge_objects): New flag to allow large objects.
	* toplev.c (lang_options): Ditto.
	* cp-decl2.c (flag_huge_objects, lang_f_options): Ditto.
	* cp-decl.c (delta_type_node): New type for delta entries.
	* cp-tree.h (delta_type_node): Ditto.
	* cp-decl.c (init_decl_processing): Setup delta_type_node.
	* cp-decl.c (init_decl_processing, build_ptrmemfunc_type): Use
	delta_type_node instead of short_integer_type_node. 
	* cp-class.c (build_vtable_entry): Ditto.

Thu Dec  9 16:19:05 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-tree.h (OPERATOR_TYPENAME_P): Define outside of
	NO_{DOLLAR,DOT} macro checks, so it always gets defined.
	(VTABLE_NAME_P): Define for NO_DOT && NO_DOLLAR_IN_LABEL.

Wed Dec  8 17:38:06 1993  Mike Stump  <mrs@@cygnus.com>

	* cp-decl.c (finish_decl): Make sure things that can go into
	"common", do go into common, if -fcommon is given.

Wed Dec  8 13:01:54 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-call.c (print_harshness) [DEBUG_MATCHING]: New function.
	(compute_conversion_costs_ansi) [DEBUG_MATCHING]: Print out
	argument matching diagnostics to make instantly clear what the
	compiler is doing.

	* cp-call.c (convert_harshness_ansi): If the parm isn't an lvalue,
	then check to see if the penalty was increased due to
	signed/unsigned mismatch, and use a TRIVIAL_CODE if it wasn't.

Tue Dec  7 18:29:14 1993  Kung Hsu  (kung@@cirdan.cygnus.com)

	* cp-decl.c (xref_tag, pushtag): Fix nested class search/resolution
	problem.

Tue Dec  7 16:09:34 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-class.c (finish_struct): Before synthesizing methods, if no
	methods have yet been declared then set nonprivate_method.  Don't
	set non_private method after synthesizing a method.

	* cp-lex.c (extract_interface_info): If flag_alt_external_templates
	is set, tie emitted code to the location of template instantiation,
	rather than definition.

	* cp-tree.h: Declare flag_alt_external_templates.

	* cp-decl2.c (lang_decode_option): Support -falt-external-templates.

	* toplev.c (lang_options): Ditto.

       Mon Oct  4 12:50:02 1993  Chip Salzenberg  (chip@@fin.uucp)

	[changes propagated from 930810 snapshot]
	* cp-decl.c (init_decl_processing): Make long long available for use
	as SIZE_TYPE and PTRDIFF_TYPE.
	(finish_decl): Allow file-scope static incomplete array.
	(grokdeclarator): Don't pass on const and volatile fron function
	value type to function type.
	Warn here for volatile fn returning non-void type.
	* cp-parse.y (attrib): Accept attributes `volatile' with alias
	`noreturn', and `const'.
	* cp-typeck.c (default_conversion): Don't lose const and volatile.
	(build_binary_op_nodefault): Generate pedantic warning for comparison
	of complete pointer type with incomplete pointer type.
	(build_c_cast): Be careful that null pointer constant be INTEGER_CST.

Tue Dec  7 10:46:48 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-init.c (expand_vec_init): When creating a temporary for copying
	arrays, use the type of the source, not the target.

	* cp-cvt.c (convert): Pass an argument for errtype to
	convert_to_reference.

	* cp-error.c (dump_expr, COMPONENT_REF & CALL_EXPR): Deal with
	methods, -> and `this'.

Mon Dec  6 17:12:33 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-error.c (parm_as_string): New function; returns `this' or arg
	number.  Corresponds to %P.
	(dump_expr): Deal with method calls.

	* cp-cvt.c (convert_to_reference): Stop using warn_for_assignment.
	* cp-typeck.c (convert_for_assignment): Ditto.
	(warn_for_assignment): Lose.

Mon Dec  6 11:33:35 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-call.c (ideal_candidate_ansi): Delete code that was never
	doing anything useful.  Instead, sort once, and DO NOT wipe
	out any codes with EVIL_CODE, since that's what we use as a
	marker for the end of the list of candidates.

	* cp-cvt.c (convert_to_aggr): Make sure to always set H_LEN.

Mon Dec  6 12:49:17 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-init.c (get_aggr_from_typedef): New function, like
	is_aggr_typedef but returns the _TYPE.

	* cp-call.c, cp-init.c, cp-method.c: Eradicate err_name.

Sun Dec  5 18:12:48 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-lex.c (readescape): Pedwarn when a hex escape is out of range.

Thu Nov 25 23:50:19 1993  Chip Salzenberg  (chip@@fin.uucp)

	Delay language context change until beginning of next decl.

	* cp-lex.h (c_header_level): Removed.
	(pending_lang_change): Declared.
	* cp-lex.c (c_header_level): Renamed from in_c_header, made static.
	(pending_lang_change): Defined.
	(check_newline): Rework code that recognizes line number and
	filename changes.  Instead of pushing and popping lang context,
	increment and decrement pending_lang_change.
	(do_pending_lang_change):  Push and pop lang context according
	to value of pending_lang_change.
	* cp-parse.y (extdefs): Use lang_extdef instead of extdef.
	(extdef): Same as extdef, but call do_pending_lang_change() first.

Mon Nov 15 15:39:15 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp-typeck.c (build_binary_op_nodefault): Warn for ordered
	compare of ptr with 0 only if pedantic in both cases.

Thu Nov 25 13:31:37 1993  Chip Salzenberg  (chip@@fin.uucp)

	Reinstate the below patch, which got lost in the Cygnus merge:
	Tue Nov 23 13:59:24 1993  Hallvard B Furuseth  (hbf@@durin.uio.no)
	* cp-parse.y (maybe_type_qual): Don't fail to set $$.

Wed Nov 17 19:03:30 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp-parse.y (attrib): Allow "ident(ident)" like the C front end.

Fri Oct 22 20:43:37 1993  Paul Eggert  (eggert@@twinsun.com)

	* cp-lex.c (real_yylex): Diagnose floating point constants
	that are too large.

Wed Nov 17 19:10:37 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp-type2.c (build_functional_cast): ARM page 16: When a class
	and an object, function or enumerator are declared in the same
	scope with the same name, the class name is hidden.

Wed Nov 17 19:07:18 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp-call.c (convert_harshness_ansi): Distinguish float, double,
	and long double from each other when overloading.
	(compute_conversion_costs_{ansi,old}, build_method_call,
	build_overlay_call_real, convert_to_aggr): Always set and
	always use H_LEN member of candidate structure.

Mon Oct 11 23:10:53 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp-decl.c (duplicate_decls): Note redeclarations of library
	functions, and generate distinct warnings for them.

Mon Oct  4 12:26:49 1993  Chip Salzenberg  (chip@@fin.uucp)

	Support format warnings in G++.

	* cp-tree.h: Protect against multiple inclusion.
	Declare all public functions in c-common.c (copy from c-tree.h).
	(STDIO_PROTO): Define.
	(warn_format): Declare.
	(record_format_info): Remove declaration.
	* cp-decl.c (init_decl_processing): Call init_function_format_info.
	* cp-decl2.c (lang_decode_option): Make "-Wall" include warn_format.
	* cp-typeck.c (build_function_call_real): Call check_function_format.
	(record_format_info): Remove -- obsolete stub.

Sat Jul 24 12:04:29 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp-decl.c (duplicate_decls): Don't warn for non-extern var decl
	following an extern one (for -Wredundant-decls).
	* cp-parse.y (primary): In statement expression case, if compstmt
	returns something other than a BLOCK, return it unchanged.

Thu Dec  2 20:44:58 1993  Chip Salzenberg  (chip@@fin.uucp)

	* cp-decl.c (warn_extern_redeclared_static): New function made
	from code extracted from pushdecl.
	(duplicate_decls, pushdecl): Call new function.
	(lookup_name_current_level): Allow for IDENTIFIER_GLOBAL_VALUE
	to be a TREE_LIST when function is declared in 'extern "C" {}'.

Fri Dec  3 16:01:10 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-class.c (duplicate_tag_error): Use cp_error.
	(finish_base_struct): Check for ambiguity with direct base, and don't
	generate op= or copy ctor if it exists.

Fri Dec  3 15:32:34 1993  Kung Hsu  (kung@@cirdan.cygnus.com)

	* cp-init.c (expand_member_init): when initializer name is null,
	don't try to build it now because emit_base_init will handle it.

Fri Dec  3 12:28:59 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-lex.c (init_lex): Initialize input_filename to "<internal>" for
	code such as ExceptionHandler::operator=.

Fri Dec  3 10:32:08 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-decl.c (grokdeclarator): Don't try to print out dname when
	complaining about arrays of references if decl_context==TYPENAME,
	since it will be null.

	* cp-decl2.c: Default to flag_ansi_overloading.

Thu Dec  2 18:05:56 1993  Kung Hsu  (kung@@cirdan.cygnus.com)

	* cp-call.c (build_method_call): use binfo from instance if it's
	different from binfo (basetype_path) passed from above.

Thu Dec  2 12:48:36 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

Wed Nov 17 19:14:29 1993  Chip Salzenberg  (chip@@fin.uucp)

	cp-error.c (dump_expr): Use unsigned chars to output a
	TREE_REAL_CST in hex.

Thu Dec  2 11:05:48 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-class.c (finish_struct): Fix typo in setting
	cant_synth_asn_ref.

	* cp-tree.h (TYPE_NESTED_NAME): New macro, does
	DECL_NESTED_TYPENAME (TYPE_NAME (NODE)).

	* cp-lex.c (default_copy_constructor_body): Change
	DECL_NAME (TYPE_NAME (btype)) to TYPE_NESTED_NAME (btype).
	(default_assign_ref_body): Ditto.
	(default_copy_constructor_body): Call operator= explicitly for
	base classes that have no constructor.

Thu Dec  2 10:47:15 1993  Michael Tiemann  (tiemann@@blues.cygnus.com)

	* cp-call.c (build_method_call): If the instance variable is
	converted to error_mark_node when we're trying to convert it to the
	base type of a method we're looking up, return error_mark_node.

Thu Dec  2 10:41:16 1993  Torbjorn Granlund  (tege@@cygnus.com)

	* cp-typeck.c (build_binary_op_nodefault): In *_DIV_EXPR *_MOD_EXPR
	cases, tests for unsigned operands by peeking inside a NOP_EXPR.

Wed Dec  1 13:33:34 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-call.c (compute_conversion_costs_ansi): Use the size of struct
	harshness_code, not the size of short, for clearing out the
	ansi_harshness.

	* cp-call.c (print_candidates): New function.
	(build_method_call): When we had some candidates, but didn't get a
	usable match, don't report that we got an error with the first
	candidate.  Instead, say there were no matches, and list the
	candidates with print_candidates.  In the second pass, make sure we
	clear out ever_seen, so we can accurately count the number of
	functions that qualified.

Wed Dec  1 09:53:59 1993  Torbjorn Granlund  (tege@@cygnus.com)

	* cp-typeck.c (build_binary_op_nodefault): Shorten for *_MOD_EXPR
	only if op1 is known to be != -1.
	(build_binary_op_nodefault): Handle *_DIV_EXPR likewise.

Tue Nov 30 14:07:26 1993  Brendan Kehoe  (brendan@@lisa.cygnus.com)

	* cp-method.c (hack_identifier): If the field itself is private, and
	not from a private base class, say so.

Mon Nov 29 03:00:56 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-decl.c (grokdeclarator): Always warn on initialization of
	const member.

Wed Nov 24 00:49:35 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-class.c (finish_struct): Set TYPE_GETS_CONST_* properly.
	(finish_base_struct): Set cant_synth_asn_ref properly.

	* cp-lex.c (cons_up_default_function): Add section for operator=.
	(default_assign_ref_body): New function, mostly cribbed from
	default_copy_constructor_body.

	* cp-class.c (base_info): Add members cant_synth_copy_ctor,
	cant_synth_asn_ref, no_const_asn_ref.
	(finish_base_struct): Update no_const_asn_ref, note that you should
	update cant_synth_*, propagate TYPE_GETS_ASSIGN_REF.
	(finish_struct): Add decls for cant_synth_*, no_const_asn_ref, and
	initialize them properly.  Set no_const_asn_ref properly.  Set
	cant_synth_* in some of the situations where they should be set.
	Propagate TYPE_GETS_ASSIGN_REF.  Use cant_synth_copy_ctor.  Add call
	to cons_up_default_function for operator=.

Tue Nov 23 20:24:58 1993  Mike Stump  <mrs@@cygnus.com>

	* cp-cvt.c (convert_force): Add code to perform casting of pointer
	to member function types.
	* cp-typeck.c (build_ptrmemfunc): Add FORCE parameter to indicate
	when the conversion should be done, regardless.
	* cp-tree.h (build_ptrmemfunc): Ditto.
	* cp-type2.c (digest_init): Ditto.
	* cp-typeck.c (convert_for_assignment): Ditto.

Tue Nov 23 18:06:58 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-error.c (dump_expr): Do the right thing for variables of
	reference type.

	* cp-decl.c (grok_op_properties): Set TYPE_HAS_ASSIGN_REF
	and its kin properly.
	(xref_tag): Propagate TYPE_GETS_ASSIGN_REF.

Tue Nov 23 12:26:13 1993  Mike Stump  <mrs@@cygnus.com>

	* cp-method.c (build_opfncall): Don't count pointer to member
	functions as aggregates here, as we don't want to look up methods in
	them.  The compiler would core dump if we did, as they don't have
	normal names.
	* cp-typeck.c (build_indirect_ref): Improve wording on error
	message.

Mon Nov 22 14:22:23 1993  Jason Merrill  (jason@@deneb.cygnus.com)

	* cp-decl.c (grok_op_properties): Allow operator?: with pedwarn
	(since it's supported in other compiler bits).

	* cp-method.c (report_type_mismatch): Use cp_error; ignore err_name
	argument.

	* cp-error.c (dump_function_decl): Don't print return type for
	constructors and destructors.

	* cp-cvt.c (cp_convert_to_pointer): Import code from
	convert_to_pointer so we can return error_mark_node in the case of an
	error, and to allow more meaningful error messages.
	(build_type_conversion): Don't go through void* when trying
	to convert to a pointer type.

	* cp-decl.c (grokfndecl): Move call to grok_op_properties back
	after grokclassfn so that it's dealing with the right decl.
	(grok_op_properties): Don't assert !methodp for op new and op delete.

	* cp-init.c (build_delete): Don't use TYPE_BUILT_IN (there are now
	no uses of it in the compiler).

	* cp-call.c (build_scoped_method_call): Fix for destructors of simple
	types.
	(build_method_call): Ditto.
d6519 2
a6520 1
Fri Nov 19 12:59:38 1993  Jason Merrill  (jason@@deneb.cygnus.com)
d6522 1
a6522 1
	* cp-tree.c (count_functions): Abstraction function.
d6524 2
a6525 2
	* cp-call.c (build_overload_call_real): Deal with new overloading
	properly, remove dead code.
d6527 1
a6527 2
	* gcc.c (default_compilers): Generate and use .ii files in the
	intermediate stage of compiling C++ source.
d6529 1
a6529 1
Fri Nov 19 11:26:09 1993  Jim Wilson  (wilson@@sphagnum.cygnus.com)
d6531 1
a6531 2
	* cp-expr.c (cplus_expand_expr): Make call_target a valid memory
	address before using it, so it can be later safely compared.
d6533 2
a6534 1
Fri Nov 12 15:30:27 1993  Jason Merrill  (jason@@deneb.cygnus.com)
d6536 1
a6536 1
	* cp-pt.c (tsubst): Deal with new overloading.
d6538 2
a6539 3
	* cp-typeck.c (fntype_p): is the arg function type?
	(comp_target_parms): pedwarn on conversion from (anything) to (...).
	(build_x_function_call): Deal with new overloading.
d6541 1
a6541 2
	* cp-tree.c (decl_list_length): Deal with new overloading.
	(decl_value_member): Like value_member, but for DECL_CHAINs.
d6543 2
a6544 2
	* cp-decl.c (duplicate_decls): Deal with new overloading.
	(start_decl): Ditto.
d6546 1
a6546 1
	* cp-class.c (instantiate_type): Deal with new overloading.
d6548 2
a6549 3
	* cp-call.c (convert_harshness_ansi): Deal with new overloading.
	(convert_harshness_old): Deal with new overloading.
	(build_overload_call_real): Ditto.
d6551 1
a6551 1
Mon Nov  8 13:50:49 1993  Jason Merrill  (jason@@deneb.cygnus.com)
d6553 2
a6554 5
	* cp-tree.c (get_unique_fn): New function; returns FUNCTION_DECL
	if unambiguous, NULL_TREE otherwise.
	(get_first_fn): Returns the first appropriate FUNCTION_DECL.
	(is_overloaded_fn): Returns whether or not the passed tree is
	a function or list of functions.
d6556 1
a6556 2
	* cp-init.c (init_init_processing): use `get_first_fn' to find
	the FUNCTION_DEFN for new and delete.
d6558 3
a6560 2
	* cp-decl.c (push_overloaded_decl): Use new overloading strategy, cut
	code size in half (I spit on special cases).
d6562 1
a6562 1
Tue Sep  7 20:03:33 1993  Jason Merrill  (jason@@deneb.cygnus.com)
d6564 5
a6568 1
	* cp-decl.c: Allow references and template type parameters as well
d6571 1
a6571 3
eval: (auto-fill-mode)
left-margin: 8
fill-column: 76
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
Mon Dec 22 17:46:17 1997  Mark Mitchell  <mmitchell@@usa.net>
d3 1
a3 1
	* method.c (build_overload_name): Fix mangling for __null.
d5 1
a5 1
Sat Dec 13 09:23:54 1997  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>
d7 1
a7 1
	* Make-lang.in (g++.c, cxxmain.o): Use $(LN).
d9 1
a9 1
Wed Dec  3 08:47:27 1997  Paul Eggert  <eggert@@twinsun.com>
d11 17
a27 4
	* pt.c (check_explicit_specialization): Fix misspelling in
	diagnostic: `preceeded'.
	* typeck.c (get_delta_difference): Fix misspelling in diagnostic:
	`conversiona'.
d29 2
a30 1
Sun Nov 30 08:42:29 1997  Bruno Haible  <bruno@@linuix.mathematik.uni-karlsruhe.de>
d32 1
a32 1
	* pt.c (do_poplevel): Allow jumps into the block.
d34 6
a39 1
Fri Nov 28 12:35:19 1997  Scott Christley  <scottc@@net-community.com>
d41 4
a44 2
	* repo.c: Prototype rindex only if needed.
	* xref.c: Likewise.
d46 1
a46 1
Thu Nov 27 08:26:56 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d48 2
a49 3
	* except.c (expand_start_catch_block): We only need the rethrow
 	region for non-sjlj exceptions.
	(expand_end_catch_block): Likewise.  Use outer_context_label_stack.
d51 1
a51 1
Wed Nov 26 15:13:48 1997  Jeffrey A Law  (law@@cygnus.com)
d53 1
a53 2
	* lex.c (lang_init): Enable flag_exceptions by default if no
	command line switch was specified.
d55 4
a58 1
Mon Nov 24 12:15:55 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d60 1
a60 7
	* exception.cc (struct cp_eh_info): Add handlers field.
	(__cp_push_exception): Initialize it.
	(__cp_pop_exception): Decrement it.  Don't pop unless it's 0.
	(__throw_bad_exception): Remove.
	* except.c (call_eh_info): Add handlers field.
	(get_eh_handlers): New fn.
	(push_eh_cleanup): Increment handlers.
d62 47
a108 1
Mon Nov 17 02:01:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d110 3
a112 1
	* friend.c (do_friend): Warn about non-template friends in templates.
d114 1
a114 1
	* search.c (dfs_record_inheritance): Ignore template type parms.
d116 2
a117 1
Wed Nov 12 08:11:55 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>
d119 1
a119 2
	* call.c (build_method_call): Call complete_type before checking
 	for destructor.
d121 3
a123 1
Tue Nov 11 12:02:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d125 1
a125 1
	* except.c (expand_end_catch_block): Lose call to __sjpopnthrow.
d127 1
a127 1
Tue Nov 11 02:53:44 1997  Jason Merrill  <jason@@lasher.cygnus.com>
d129 1
a129 1
	* except.c (do_pop_exception): Return a value.
d131 5
a135 1
Mon Nov 10 03:04:20 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d137 1
a137 14
	Complete nested exception support.
	* except.c (do_pop_exception): Split out...
	(push_eh_cleanup): From here.  Handle the EH region by hand.
	(expand_start_catch_block): Add a new level for the catch parm.
	Move the rethrow region outside the two cleanup regions.
	Protect the initializer for the catch parm with terminate.
	(expand_end_catch_block): Likewise.  End the region for the eh_cleanup.
	* exception.cc (__cp_pop_exception): Now takes two parms.  Handle
	popping off the middle of the stack.
	* tree.c (lvalue_p, real_lvalue_p): Handle TRY_CATCH_EXPR, 
	WITH_CLEANUP_EXPR, and UNSAVE_EXPR.
	(build_cplus_new): Only wrap CALL_EXPRs.
	* init.c (expand_default_init): Handle a TRY_CATCH_EXPR around 
	the constructor call.
d139 1
a139 1
Sun Nov  9 18:00:26 1997  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>
d141 1
a141 1
	* Make-lang.in (c++.distdir): Make inc subdirectory.
d143 3
a145 1
Fri Nov  7 11:57:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d147 1
a147 1
	* decl2.c (finish_file): Put back some code.
d149 2
a150 1
Thu Nov  6 11:28:14 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d152 1
a152 2
	* decl2.c (finish_file): Remove redundant code.
	* method.c (emit_thunk): Don't let the backend defer generic thunks.
d154 2
a155 1
Wed Nov  5 23:52:50 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d157 1
a157 4
	* except.c (call_eh_info): Split out...
	(push_eh_info): From here.
	(expand_builtin_throw): Use it.
	(expand_start_catch_block): Move region start back.
d159 3
a161 1
Tue Nov  4 13:45:10 1997  Doug Evans  <devans@@canuck.cygnus.com>
d163 1
a163 2
	* lex.c (MULTIBYTE_CHARS): #undef if cross compiling.
	(real_yylex): Record wide strings using target endianness, not host.
d165 6
a170 1
1997-11-03  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d172 1
a172 5
	* repo.c (rindex): Add decl unconditionally.
	(get_base_filename, open_repo_file): Don't cast rindex.
	* xref.c (rindex): Add decl unconditionally.
	(index): Remove unused decl.
	(open_xref_file): Don't cast rindex.
d174 8
a181 1
Sun Nov  2 15:04:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d183 1
a183 1
	* class.c (build_vbase_path): Propagate the result type properly.
d185 2
a186 1
1997-11-01  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d188 2
a189 2
	* except.c (expand_builtin_throw) [!DWARF2_UNWIND_INFO]: Replace
	remaining use of saved_throw_type with a call to get_eh_type.
d191 1
a191 1
1997-10-31  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d193 10
a202 5
	* lex.c (FILE_NAME_NONDIRECTORY): Delete macro.
	(file_name_nondirectory): New function, doing the same as the macro.
	(set_typedecl_interface_info): Use it instead of the macro.
	(check_newline): Likewise.
	(handle_cp_pragma): Likewise.
d204 1
a204 4
	* repo.c (get_base_filename): Cast result of rindex to char*.
	(open_repo_file): Likewise.
	* xref.c (open_xref_file): Likewise.
	* error.c (dump_char): Make its arg int, not char.
d206 2
a207 2
	* except.c (push_eh_info): Pass the number of fields - 1 down, not
	the exact number of fields.
d209 1
a209 1
Fri Oct 31 01:47:57 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d211 1
a211 18
	Support for nested exceptions.
	* tinfo2.cc (__is_pointer): New fn.
	* exception.cc (struct cp_eh_info): Define.
	(__cp_exception_info, __uncatch_exception): New fns.
	(__cp_push_exception, __cp_pop_exception): New fns.
	* except.c: Lose saved_throw_{type,value,cleanup,in_catch}.
 	Lose empty_fndecl.
	(init_exception_processing): Likewise.  __eh_pc is now external.
	(push_eh_info): New fn.
	(get_eh_{info,value,type,caught}): New fns.
	(push_eh_cleanup): Just call __cp_pop_exception.
	(expand_start_catch_block): Use push_eh_info.  Start the eh region
	sooner.
	(expand_end_eh_spec): Use push_eh_info.
	(expand_throw): Call __cp_push_exception to set up the exception info.
	Just pass the destructor or 0 as the cleanup.  Call __uncatch_exception
	when we rethrow.
	(expand_builtin_throw): Don't refer to empty_fndecl.
d213 1
a213 1
Sun Oct 26 01:28:29 1997  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>
d215 2
a216 2
	* typeck.c (rationalize_conditional_expr): Handle {MIN,MAX}_EXPR.
	(unary_complex_lvalue): Call it for {MIN,MAX}_EXPR.
d218 1
a218 1
	* decl.c (init_decl_processing): Call using_eh_for_cleanups.
d220 3
a222 1
Sun Oct 26 01:52:52 1997  Jeffrey A Law  (law@@cygnus.com)
d224 1
a224 1
	* Makefile.in (g++): Depend on prefix.o.  Link in prefix.o.
d226 3
a228 1
Thu Oct 23 02:01:30 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d230 1
a230 1
	* pt.c (instantiate_decl): SET_DECL_IMPLICIT_INSTANTIATION on new decl.
d232 2
a233 1
1997-10-22  Brendan Kehoe  <brendan@@cygnus.com>
d235 1
a235 6
	* method.c (build_template_parm_names, build_decl_overload_real):
	Add static to definitions.
	* pt.c (add_to_template_args, note_template_header,
	processing_explicit_specialization, type_unification_real): Likewise.
	({determine,check}_explicit_specialization): Use a single string for
	error messages.
d237 1
a237 1
Mon Oct 20 12:06:34 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d239 1
a239 3
	* except.c (expand_exception_blocks): Call do_pending_stack_adust.
	(expand_end_catch_block): Likewise.
	(expand_end_eh_spec): Likewise.
d241 1
a241 1
Mon Oct 20 11:44:20 1997  Mark Mitchell  <mmitchell@@usa.net>
d243 1
a243 10
	* decl.c (duplicate_decls): Handle template specializations
	correctly. 
	* error.c (dump_function_name): Fix printing of specializations of
	member functions that are not member templates.
	* cp-tree.h (processing_specialization): Make global.
	* pt.c (processing_specialization): Likewise.
	* lex.c (cons_up_default_function): Save and restore
	processing_specialization to avoid confusion.
	
Mon Oct 20 10:52:22 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d245 13
a257 4
	* decl.c (init_decl_processing): Give null_node unknown* type.
	* typeck.c (comp_target_types): Handle UNKNOWN_TYPE.
	(common_type): Likewise.
	* error.c (args_as_string): Recognize null_node.
d259 1
a259 1
Thu Oct 16 15:31:09 1997  Judy Goldberg <judygold@@sanwafp.com>
d261 2
a262 2
	* pt.c (determine_explicit_specialization): Initialize "dummy"
	to keep Purify quiet.
d264 1
a264 1
Thu Oct 16 00:14:48 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d266 21
a286 2
	* method.c (build_overload_value): Handle TEMPLATE_CONST_PARMs here.
	(build_overload_int): Not here.
d288 13
a300 1
Wed Oct 15 00:35:28 1997  Mike Stump  <mrs@@wrs.com>
d302 77
a378 2
	* class.c (build_type_pathname): Remove.
	(prepare_fresh_vtable): Fix problem with complex MI vtable names.
d380 1
a380 1
1997-10-14  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d382 2
a383 2
	* parse.y (unary_expr): Give a pedwarn if someone tries to use the
	&&label GNU extension.
d385 1
a385 1
Tue Oct 14 12:01:00 1997  Mark Mitchell  <mmitchell@@usa.net>
d387 20
a406 4
	* decl.c (pushtag): Unset DECL_ASSEMBLER_NAME before setting it,
	so as to avoid incorrect manglings.
	* method.c (build_decl_overload_real): Don't mangle return types
	for constructors.
d408 105
a512 1
Tue Oct 14 11:46:14 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d514 1
a514 5
	* cp-tree.h (scratchalloc, build_scratch_list, make_scratch_vec,
	scratch_tree_cons): Define as macros for now.
	* call.c, class.c, cvt.c, decl.c, decl2.c, except.c, expr.c, init.c, 
	lex.c, method.c, parse.y, pt.c, rtti.c, search.c, tree.c, typeck.c,
	typeck2.c: Use them and the expression_obstack variants.
d516 2
a517 1
Mon Oct 13 17:41:26 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>
d519 1
a519 2
	* decl.c (store_return_init): Allow classes with explicit ctors to
 	be used with the named return values extension.
d521 1
a521 1
Fri Oct 10 12:21:11 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d523 9
a531 1
	* pt.c (instantiate_decl): Fix previous change.
d533 1
a533 1
Thu Oct  9 12:08:21 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d535 18
a552 2
	* pt.c (tsubst): Fix thinko.
	(instantiate_decl): Really use the original template.
d554 1
a554 2
	* call.c (build_new_method_call): Use simple constructor_name for
	error messages.
d556 4
a559 1
Wed Oct  8 22:44:42 1997  Jeffrey A Law  (law@@cygnus.com)
d561 1
a561 2
	* method.c (build_underscore_int): Don't use ANSI specific
	features.
d563 3
a565 1
Wed Oct  8 00:18:22 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d567 1
a567 2
	* decl2.c (finish_prevtable_vardecl): Check DECL_REALLY_EXTERN
	for our key method; it might have been inlined by -O3.
d569 2
a570 1
Tue Oct  7 23:00:12 1997  Mark Mitchell  <mmitchell@@usa.net>
d572 1
a572 2
	* decl.c (make_typename_type): Do not try to call lookup_field for
	non-aggregate types.
d574 2
a575 1
Tue Oct  7 22:52:10 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d577 1
a577 1
	* typeck.c (build_reinterpret_cast): Tweak.
d579 2
a580 1
Tue Oct  7 22:45:31 1997  Alexandre Oliva  <oliva@@dcc.unicamp.br>
d582 1
a582 3
	* typeck.c (build_reinterpret_cast): converting a void pointer
	to function pointer with a reinterpret_cast produces a warning
	if -pedantic is issued
d584 16
a599 1
Tue Oct  7 22:43:43 1997  Bruno Haible  <bruno@@linuix.mathematik.uni-karlsruhe.de>
d601 1
a601 2
	* typeck.c (c_expand_return): Don't warn about returning a
	reference-type variable as a reference.
d603 2
a604 1
Tue Oct  7 21:11:22 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d606 1
a606 1
	* method.c (build_static_name): Fix typo.
d608 4
a611 1
1997-10-07  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d613 4
a616 2
	* decl.c (duplicate_decls): Make sure DECL_LANG_SPECIFIC is set on
	OLDDECL before we try to do DECL_USE_TEMPLATE.
d618 1
a618 1
Tue Oct  7 00:48:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d620 1
a620 1
	* decl.c (duplicate_decls): Don't warn about template instances.
d622 1
a622 2
	* typeck.c (mark_addressable): Lose ancient code that unsets
	DECL_EXTERNAL.
d624 4
a627 2
	* pt.c (do_decl_instantiation): Lose support for instantiating
	non-templates.
d629 1
a629 3
	* call.c (build_new_function_call): Fix handling of null explicit
 	template args.
	(build_new_method_call): Likewise.
d631 3
a633 1
Mon Oct  6 23:44:34 1997  Mark Mitchell  <mmitchell@@usa.net>
d635 1
a635 1
	* method.c (build_underscore_int): Fix typo.
d637 1
a637 1
1997-10-06  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d639 1
a639 2
	* tree.c (print_lang_statistics): #if 0 call to
	print_inline_obstack_statistics until its definition is checked in.
d641 17
a657 1
Mon Oct  6 09:27:29 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d659 1
a659 1
	* decl2.c (finish_file): Move dump_tree_statistics to end.
d661 2
a662 3
	* pt.c (instantiate_decl): Look for the original template.
	(tsubst): Set DECL_IMPLICIT_INSTANTIATION on partial instantiations
	of member templates.
d664 1
a664 1
Wed Oct  1 08:41:38 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d666 15
a680 3
	* Makefile.in (g++FAQ.*): New rules.
	(CONFLICTS): Update.
	* g++FAQ.texi: Moved from libg++.
d682 1
a682 1
	* parse.y (PFUNCNAME): Only specify the type once.
d684 3
a686 1
1997-10-01  Brendan Kehoe  <brendan@@lasher.cygnus.com>
d688 1
a688 2
	* lex.c (real_yylex): Clean up the code to fully behave the way
	the c-lex.c parser does for complex and real numbers.
d690 1
a690 1
Tue Sep 30 08:51:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d692 1
a692 1
	* method.c (build_decl_overload_real): Reformat.
d694 1
a694 1
Tue Sep 30 00:18:26 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d696 1
a696 1
	* method.c (synthesize_method): If at_eof, determine our linkage.
d698 1
a698 1
1997-09-29  Paul Eggert  <eggert@@twinsun.com>
d700 2
a701 2
	* lex.c (real_yylex): Treat `$' just like `_', except issue a
	diagnostic if !dollars_in_ident or if pedantic.
d703 2
a704 1
	* lang-specs.h (@@c++): -ansi no longer implies -$.
d706 2
a707 3
	* decl2.c (lang_decode_option):
	-traditional and -ansi now do not mess with
	dollars_in_ident.
d709 2
a710 1
Mon Sep 29 19:57:51 1997  H.J. Lu  (hjl@@gnu.ai.mit.edu)
d712 1
a712 6
	* Makefile.in (parse.o, decl.o): Also depend on
	$(srcdir)/../except.h $(srcdir)/../output.h.
	(decl2.o): Also depend on $(srcdir)/../expr.h ../insn-codes.h
	$(srcdir)/../except.h $(srcdir)/../output.h.
	(typeck.o, init.o): Also depend on $(srcdir)/../expr.h
	../insn-codes.h.
d714 1
a714 1
	* call.c, cp-tree.h, decl.c, tree.c: Finish prototyping.
d716 1
a716 1
	* expr.c (cplus_expand_expr): Make it static. 
d718 1
a718 2
	* decl2.c, init.c, typeck.c: Include "expr.h".
	(expand_expr): Use proper values when calling the function.
d720 5
a724 1
Mon Sep 29 11:05:54 1997  Alexandre Oliva  <oliva@@dcc.unicamp.br>
d726 1
a726 5
	* lang-options.h: new -Wold-style-cast flag.
	* cp-tree.h (warn_old_style_cast): new variable.
	* decl2.c (warn_old_style_cast): ditto.
	(lang_decode_option): support -Wold-style-cast.
	(reparse_absdcl_as_casts): produce old-style-cast warning.
d728 2
a729 1
Mon Sep 29 09:20:53 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>
d731 1
a731 2
	* decl.c (cp_finish_decl): Allow expand_aggr_init to set
 	TREE_USED, reset value based on already_used.
d733 2
a734 3
	* init.c (expand_member_init): Revert change.
	
Mon Sep 29 08:57:53 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d736 1
a736 2
	* cp-tree.h, decl.c, decl2.c, pt.c:
 	Lose DECL_C_STATIC and DECL_PUBLIC.  Don't pretend statics are public.
d738 1
a738 1
	* decl2.c (lang_decode_option): Add missing ;.
d740 1
a740 1
Sat Sep 27 16:22:48 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d742 2
a743 158
	* friend.c (do_friend): Disable injection for all template-derived
 	decls.
	* decl2.c (lang_decode_option): Handle -fguiding-decls.
	* parse.y (notype_template_declarator): New nonterminal.
	(direct_notype_declarator): Use it.
	(complex_direct_notype_declarator): Likewise.
	(object_template_id): Accept any kind of identifier after TEMPLATE.
	(notype_qualified_id): Don't add template declarators here.

Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@@usa.net>

        * call.c (add_template_candidate): Add explicit_targs parameter.
        (build_scoped_method_call): Use it.
        (build_overload_call_real): Likewise.
        (build_user_type_conversion_1): Likewise.
        (build_new_function_call): Likewise.
        (build_object_call): Likewise.
        (build_new_op): Likewise.
        (build_new_method_call): Likewise.
        (build_new_function_call): Handle TEMPLATE_ID_EXPR.
        (build_new_method_call): Likewise.

        * class.c (finish_struct_methods): Add specialization pass to
        determine which methods were specializing which other methods.
        (instantiate_type): Handle TEMPLATE_ID_EXPR.

        * cp-tree.def (TEMPLATE_ID_EXPR): New tree code.

        * cp-tree.h (name_mangling_version): New variable.
	(flag_guiding_decls): Likewise.
        (build_template_decl_overload): New function.
        (begin_specialization): Likewise.
        (reset_specialization): Likewise.
        (end_specialization): Likewise.
        (determine_explicit_specialization): Likewise.
        (check_explicit_specialization): Likewise.
        (lookup_template_function): Likewise.
        (fn_type_unification): Add explicit_targs parameter.
        (type_unification): Likewise.

        * decl.c (duplicate_decls): Add smarts for explicit
        specializations.
        (grokdeclarator): Handle TEMPLATE_ID_EXPR, and function
        specializations.
        (grokfndecl): Call check_explicit_specialization.

        * decl2.c (lang_decode_option): Handle -fname-mangling-version.
        (build_expr_from_tree): Handle TEMPLATE_ID_EXPR.
        (check_classfn): Handle specializations.

        * error.c (dump_function_name): Print specialization arguments.

	* friend.c (do_friend): Don't call pushdecl for template 
        instantiations. 

        * init.c (build_member_call): Handle TEMPLATE_ID_EXPR.

        * lang-options.h: Add -fname-mangling-version, -fguiding-decls, 
	and -fno-guiding-decls.

        * lex.c (identifier_type): Return PFUNCNAME for template function
        names.

        * method.c (build_decl_overload_real): New function.
        (build_template_parm_names): New function.
        (build_overload_identifier): Use it.
        (build_underscore_int): New function.
        (build_overload_int): Use it.  Add levels for template
        parameters.
        (build_overload_name): Likewise.  Also, handle TYPENAME_TYPEs.
        (build_overload_nested_names): Handle template type parameters.
        (build_template_decl_overload): New function.

        * parse.y (YYSTYPE): New ntype member.
        (nested_name_specifier): Use it.
        (nested_name_specifier_1): Likewise.
        (PFUNCNAME): New token.
        (template_id, object_template_id): New non-terminals.
        (template_parm_list): Note specializations.
        (template_def): Likewise.
        (structsp): Likewise.
        (fn.def2): Handle member template specializations.
        (component_decl_1): Likewise.
        (direct_notype_declarator): Handle template-ids.
        (component_decl_1): Likewise.
        (direct_notype_declarator): Handle template-ids.
        (primary): Handle TEMPLATE_ID_EXPR, and template-ids.

        * pt.c (processing_specializations): New variable.
        (template_header_count): Likewise.
        (type_unification_real): New function.
        (processing_explicit_specialization): Likewise.
        (note_template_header): Likewise.
        (is_member_template): Handle specializations.
        (end_template_decl): Call reset_specialization.
        (push_template_decl): Handle member template specializations.
        (tsubst): Likewise.
        (tsubst_copy): Handle TEMPLATE_ID_EXPR.
        (instantiate_template): Handle specializations.
        (instantiate_decl): Likewise.
        (fn_type_unification): Handle explicit_targs.
        (type_unification): Likewise.  Allow incomplete unification
        without an error message, if allow_incomplete.
        (get_bindings): Use new calling sequence for fn_type_unification.

        * spew.c (yylex): Handle PFUNCNAME.

        * tree.c (is_overloaded_fn): Handle TEMPLATE_ID_EXPR.
        (really_overloaded_fn): Likewise.
        (get_first_fn): Handle function templates.

        * typeck.c (build_x_function_call): Use really_overloaded_fn.
        Handle TEMPLATE_ID_EXPR.
        (build_x_unary_op): Likewise.
        (build_unary_op): Likewise.
        (mark_addressable): Templates whose address is taken are marked  
        as used. 

1997-09-25  Andreas Schwab  <schwab@@issan.informatik.uni-dortmund.de>

	* decl.c (init_decl_processing): Declare __builtin_constant_p as
	accepting any kind of type, not only int.

Fri Sep 26 00:22:56 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* search.c (get_matching_virtual): Notice virtual bases when sorrying
	about covariant returns.

	* parse.y (member_init): Also imply typename here.  Remove ancient
	extension for initializing base members.

Thu Sep 25 11:11:13 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	Handle multi-level typenames and implicit typename in base list.
	* parse.y (typename_sub{,[0-2]}): New rules.
	(structsp, rule TYPENAME_KEYWORD): Use typename_sub.
	(nonnested_type): New rule.
	(complete_type_name): Use it.
	(base_class.1): Use typename_sub and nonnested_type.
	(nested_name_specifier): Don't elide std:: here.
	* decl.c (make_typename_type): Handle getting a type for NAME.
	(lookup_name_real): Turn std:: into :: here.

	Rvalue conversions were removed in London.
	* call.c (is_subseq): Don't consider lvalue transformations.
	(build_conv): LVALUE_CONV and RVALUE_CONV get IDENTITY_RANK.
	(joust): Reenable ?: kludge.

1997-09-22  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (start_function): Up warning of no return type to be a
	pedwarn.

Mon Sep 22 14:15:34 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>

        * init.c (expand_member_init): Don't set TREE_USED.
        * decl.c (cp_finish_decl): Mark decls used if type has TREE_USED
        set,don't clear TREE_USED wholesale.
d745 1
a745 1
Sat Sep 20 15:31:00 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d747 1
a747 2
	* call.c (build_over_call): Do require_complete_type before
	build_cplus_new.
d749 2
a750 1
Thu Sep 18 16:47:52 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d752 1
a752 1
	* search.c (lookup_field): Call complete_type in all cases.
d754 4
a757 1
	* decl.c (finish_function): Just warn about flowing off the end.
d759 8
a766 1
Wed Sep 17 10:31:25 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d768 5
a772 2
	* decl.c (grokparms): Don't bash a permanent list node if we're
	in a function.
d774 2
a775 1
1997-09-17  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d777 1
a777 1
	* Makefile.in (CONFLICTS): Fix s/r conflict count to 18.
d779 1
a779 1
Tue Sep 16 14:06:56 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d781 1
a781 2
	* call.c (build_new_op): Give better error for syntactically
 	correct, but semantically invalid, use of undeclared template.
d783 3
a785 1
	* call.c (compare_qual): Handle pmfs.
d787 1
a787 2
	* decl.c (store_parm_decls): last_parm_cleanup_insn is the insn
 	after the exception spec.
d789 2
a790 1
Mon Sep 15 11:52:13 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d792 1
a792 1
	* call.c (null_ptr_cst_p): Integer type, not integral type.
d794 2
a795 2
	* call.c (joust): Disable warnings until they can be moved to the
	right place.
d797 1
a797 1
Fri Sep 12 16:11:13 1997  Per Bothner  <bothner@@cygnus.com>
d799 1
a799 1
	* Makefile.in, config-lang.in:  Convert to autoconf.
d801 1
a801 1
Thu Sep 11 17:14:55 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d803 5
a807 2
	* decl.c (lookup_name_real): Add implicit 'typename' to types from
	base classes.
d809 1
a809 2
	* pt.c (most_specialized_class): Fix typo.
	(tsubst): Move constant folding to TREE_VEC case.
d811 2
a812 1
Thu Sep 11 10:08:45 1997  Mark Mitchell  <mmitchell@@usa.net>
d814 1
a814 3
	* pt.c (do_poplevel): Don't warn about unused local variables
	while processing_template_decl since we don't always know whether
	or not they will need constructing/destructing.
d816 1
a816 2
	* pt.c (uses_template_parms): Check the values of an enumeration
	type to make sure they don't depend on template parms.
d818 1
a818 3
	* decl.c (make_typename_type): Don't lookup the field if the
	context uses template parms, even if we're not
	processing_template_decl at the moment.
d820 3
a822 5
	* pt.c (coerce_template_parms): Avoid looking at the
	TYPE_LANG_DECL portion of a typename type, since there won't be
	one. 
	(tsubst): Do constant folding as necessary to make sure that
	arguments passed to lookup_template_class really are constants. 
d824 1
a824 1
Wed Sep 10 11:21:55 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d826 2
a827 3
	* except.c (expand_builtin_throw): #ifndef DWARF2_UNWIND_INFO.
	* decl2.c (finish_file): Only register exception tables if we
	need to.
d829 1
a829 1
	* decl.c (init_decl_processing): Add __builtin_[fs]p.
d831 3
a833 1
Tue Sep  9 19:49:38 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d835 1
a835 1
	* pt.c (unify): Just return 0 for a TYPENAME_TYPE.
d837 2
a838 1
Tue Sep  9 17:57:25 1997  Mark Mitchell  <mmitchell@@usa.net>
d840 1
a840 4
	* error.c (dump_decl): Avoid crashing when presented with a
 	uninitialized constant, as can occur with a template parameter.
	(dump_expr): Make sure that there are enough levels of
 	current_template_parms before we start diving through them.
d842 9
a850 1
1997-09-09  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d852 1
a852 2
	* typeck.c (build_indirect_ref): Heed FLAG_VOLATILE similar to
	c-typeck.c.
d854 1
a854 1
Tue Sep  9 09:36:39 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>
d856 1
a856 2
	* except.c (expand_throw): Call build_delete for all 
	exception types, not just objects with destructors.
d858 1
a858 1
Mon Sep  8 02:33:20 1997  Jody Goldberg  <jodyg@@idt.net>
d860 1
a860 5
	* decl.c (current_local_enum): Remove static.
	* pt.c (tsubst_enum): Save and restore value of current_local_enum
	in case template is expanded in enum decl.
	(instantiate_class_template) : Use new tsubst_enum signature.
	(tsubst_expr): Likewise.
d862 2
a863 1
Mon Sep  8 01:21:43 1997  Mark Mitchell  <mmitchell@@usa.net>
d865 1
a865 8
	* pt.c (begin_member_template_processing): Take a function as
	argument, not a set of template arguments.  Use the template
	parameters, rather than the arguments.  Handle non-type parameters
	correctly.  Push a binding level for the parameters so that multiple
	member templates using the same parameter names can be declared.
	(end_member_template_processing): Pop the binding level.
	(push_template_decl): Mark member templates as static when
	appropriate. 
d867 3
a869 4
	* lex.c (do_pending_inlines): Pass the function, not its template
	arguments, to begin_member_template_processing.
	(process_next_inline): Likewise.
	(do_pending_defargs): Likewise.
d871 1
a871 2
	* error.c (dump_expr): Obtain the correct declaration for a
	TEMPLATE_CONST_PARM. 
d873 4
a876 5
	* call.c (add_template_conv_candidate): New function.
	(build_object_call): Handle member templates, as done in the other
	build_ functions.
	
Sat Sep  6 10:20:27 1997  Mark Mitchell  <mmitchell@@usa.net>
d878 1
a878 5
	* decl.c (replace_defag): Undo previous change.
	* lex.c (do_pending_defargs): Deal with member templates.
	
	* pt.c (is_member_template): Avoid crashing when passed a
	non-function argument.
d880 1
a880 1
Fri Sep  5 17:27:38 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d882 1
a882 1
	* class.c (grow_method): Remove check for redeclaration.
d884 3
a886 1
Fri Sep  5 01:37:17 1997  Mark Mitchell  <mmitchell@@usa.net>
d888 1
a888 20
	* cp-tree.h (INNERMOST_TEMPLATE_PARMS): New macro.
	(DECL_INNERMOST_TEMPLATE_PARMS): Likewise.
	(PRIMARY_TEMPLATE_P): Use it.
	* call.c (build_overload_call_real): Use it.
	* class.c (instantiate_type): Likewise.
	* decl.c (decls_match): Likewise.
	* method.c (build_overload_identifier): Likewise.
	* pt.c (push_template_decl): Likewise.
	(classtype_mangled_name): Likewise.
	(lookup_template_class): Likewise.
	
	* cp-tree.h (DECL_NTPARMS): Change name from DECL_NT_PARMS to
	DECL_NTPARMS to conform to usage elsewhere.
	* call.c (add_template_candidate): Likewise.
	* class.c (instantiate_type): Likewise.
	* pt.c (instantiate_template): Likewise.
	(get_bindings): Likewise.
	
	* class.c (grow_method): Use DECL_FUNCTION_TEMPLATE_P instead of
	is_member_template.
d890 1
a890 82
	* pt.c (unify): Undo changes to allow multiple levels of template
	parameters. 
	(type_unification): Likewise.
	(fn_type_unification): Likewise.
	(get_class_bindings): Likewise.
	* cp-tree.h (Likewise).
	
	* decl.c (replace_defarg): Check that the type of the default
	parameter does not invlove a template type before complaining
	about the initialization.

	* error.c (dump_expr): Deal with template constant parameters in
	member templates correctly.

	* pt.c (is_member_template): Deal with class specializations
	correctly. 
	(tsubst): Handle "partial instantiation" of member templates
	correctly. 

Wed Sep  3 12:30:24 1997  Mark Mitchell  <mmitchell@@usa.net>

	* pt.c (type_unification): Change calling squence to allow for
	multiple levels of template parameters.
	(tsubst_expr): Likewise.
	(tsubst): Likewise.
	(tsubst_copy): Likewise.
	(instantiate_template): Likewise.
	(unify): Likewise.
	* call.c (build_overload_call_real): Use it.
	(add_builtin_candidate): Use it.
	(build_new_method_call): Use it.
	* class.c (instantiate_type): Use it.
	* decl.c (grokdeclarator): Use it.
	* decl2.c (finish_file): Use it.
	* method.c (build_overload_identifier): Use it.
	
	* call.c (add_template_candidate):  Add additional parameter for
	the function return type.  Call fn_type_unification istead of
	type_unification.
	(build_user_type_conversion_1): Handle member templates.
	(build_new_function_call): Likewise.
	(build_new_op): Likewise.
	(build_new_method_call): Likewise.
	
	* class.c (grow_method): Don't give an error message indicating
 	that two member templates with the same name are ambiguous.
	(finish_struct): Treat member template functions just like member
 	functions.
	
	* cp-tree.h (check_member_template): Add declaration.
	(begin_member_template_processing): Likewise.
	(end_member_template_processing): Likewise.
	(fn_type_unification): Likewise.
	(is_member_template): Likewise.
	(tsubst): Change prototype.
	(tsubst_expr): Likewise.
	(tsubst_copy): Likewise.
	(instantiate_template): Likewise.
	(get_bindings): Likewise.

	* decl.c (decls_match): Handle multiple levels of template
	parameters. 
	(pushdecl): Handle template type params just like other type
	declarations. 
	(push_class_level_binding): Return immediately if the
	class_binding_level is NULL.
	(grokfndecl): If check_classfn() returns a member_template, use
	the result of the template, not the template itself.
	
	* decl2.c (check_member_template): New function.  Check to see
	that the entity declared to be a member template can be one.
	(check_classfn): Allow redeclaration of member template functions
	with different types; the new functions can be specializations or
	explicit instantiations.
	
	* error.c (dump_decl): Handle multiple levels of template
	parameters. 
	(dump_function_decl): Update to handle function	templates.

	* lex.c (do_pending_inlines): Set up template parameter context
	for member templates.
	(process_next_inline): Likewise.
d892 2
a893 5
	* method. (build_overload_identifier): Adjust for multiple levels
	of template parameters.
	
	* parse.y (fn.def2): Add member templates.
	(component_decl_1): Likewise.
d895 3
a897 28
	* pt.c (begin_member_template_processing): New function.
	(end_member_template_processing): Likewise.
	(is_member_template): Likewise.
	(fn_type_unification): Likewise.
	(current_template_parms): Return a vector of all the template
	parms, not just the innermost level of parms.
	(push_template_decl): Deal with the possibility of member
	templates. 
	(lookup_template_class): Likewise.
	(uses_template_parms): Likewise.
	(tsubst): Modify processing to TEMPLATE_TYPE_PARM and
	TEMPLATE_CONST_PARM to deal with multiple levels of template
	arguments.   Add processing of TEMPLATE_DECL to produce new
	TEMPLATE_DECLs from old ones.
	(do_decl_instantiation): Handle member templates.

	* search.c (lookup_fnfields_1): Handle member template conversion
	operators. 

	* tree.c (cp_tree_equal): Check the levels, as well as the
	indices, of TEMPLATE_CONST_PARMs.

	* typeck.c (comptypes): Check the levels, as well as the indices,
	fo TEMPLATE_TYPE_PARMs.
	(build_x_function_call): Treat member templates like member
	functions. 
	
Wed Sep  3 11:09:25 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d899 3
a901 2
	* typeck.c (c_expand_return): Always convert_for_initialization
 	before checking for returning a pointer to local.
d903 2
a904 2
	* pt.c (type_unification): If strict and the function parm doesn't
	use template parms, just compare types.
d906 1
a906 1
Wed Sep  3 10:35:49 1997  Klaus Espenlaub  <kespenla@@student.informatik.uni-ulm.de>
d908 2
a909 2
	* method.c (build_overloaded_value): Replace direct call
	to the floating point emulator with REAL_VALUE_TO_DECIMAL macro.
d911 1
a911 1
Wed Sep  3 00:02:53 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d913 2
a914 2
	* typeck.c (convert_arguments): Don't arbitrarily choose the first
 	of a set of overloaded functions.
d916 2
a917 1
Tue Sep  2 12:09:13 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d919 1
a919 1
	* lex.c (real_yylex): Don't elide __FUNCTION__.
d921 1
a921 3
	* method.c (build_overload_value): Add in_template parm.
	(build_overload_int): Likewise.
	(build_overload_identifier): Pass it.
d923 1
a923 2
	* decl.c (duplicate_decls): Don't bash a previous template
 	definition with a redeclaration.
d925 1
a925 1
	* pt.c (unify): float doesn't match double.
d927 1
a927 4
	* pt.c (do_type_instantiation): Handle getting a _TYPE or a
 	TYPE_DECL.  Handle getting non-template types.
	* parse.y (explicit_instantiation): Use typespec instead of
	aggr template_type.
d929 1
a929 1
Tue Sep  2 10:27:08 1997  Richard Henderson  <rth@@cygnus.com>
d931 1
a931 1
	* typeck.c (build_ptrmemfunc1): Clean up ptr->int cast warnings.
d933 4
a936 1
Mon Sep  1 13:19:04 1997  Eugene Mamchits <eugin@@ips.ras.ru>
d938 9
a946 2
	* call.c (add_builtin_candidate): Add missing TREE_TYPE.
	(compare_ics): Likewise.
d948 1
a948 1
Mon Sep  1 13:19:04 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d950 4
a953 4
	* call.c (joust): Warn about choosing one conversion op over
 	another because of 'this' argument when the other return type is
 	better.
	(source_type): New fn.
d955 2
a956 2
	* call.c (build_new_op): Strip leading REF_BIND from first operand
	to builtin operator.
d958 1
a958 2
	* decl2.c (mark_vtable_entries): Mark abort_fndecl as used when we
	use its RTL.
d960 2
a961 1
Thu Aug 28 09:45:23 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d963 1
a963 1
	* call.c (null_ptr_cst_p): Remove support for (void*)0.
d965 1
a965 1
Wed Aug 27 02:03:34 1997  Jeffrey A Law  (law@@cygnus.com)
d967 2
a968 1
	* typeck.c (expand_target_expr): Make definition match declaration.
d970 2
a971 1
	* class.c (get_basefndecls): Make definition match declaration.
d973 1
a973 1
Mon Aug 25 14:30:02 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d975 2
a976 1
	* input.c (sub_getch): Eventually give up and release the input file.
d978 1
a978 2
	* decl.c (cp_finish_decl): If #p i/i, put inline statics in the
	right place.
d980 2
a981 1
	* call.c (joust): Tweak message.
d983 1
a983 1
Sat Aug 23 18:02:59 1997  Mark Mitchell  <mmitchell@@usa.net>
d985 2
a986 2
	* error.c (type_as_string): Put const/volatile on template type
	parameters where appropriate.
d988 1
a988 1
Sat Aug 23 17:47:22 1997  Jeffrey A Law  (law@@cygnus.com)
d990 1
a990 1
	* call.c (strictly_better): Make arguments unsigned ints.
d992 1
a992 1
Thu Aug 21 18:48:44 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d994 1
a994 1
	* lex.c (real_yylex): Refer to __complex instead of complex.
d996 2
a997 1
Thu Aug 21 22:25:46 1997  J"orn Rennecke <amylaar@@cygnus.co.uk>
d999 1
a999 1
	* lex.c (real_yylex): Don't use getc directly.
d1001 4
a1004 1
Wed Aug 20 17:25:08 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1006 1
a1006 1
	* call.c (is_subseq): Don't try to be clever.
d1008 4
a1011 1
Wed Aug 20 03:13:36 1997  H.J. Lu  (hjl@@gnu.ai.mit.edu)
d1013 1
a1013 6
	* parse.y, pt.c: Include "except.h".
	* call.c, class.c, class.h, cp-tree.h, cvt.c, decl.c, decl2.c,
 	error.c, except.c, expr.c, friend.c, g++spec.c, init.c, input.c,
 	lex.c, lex.h, method.c, parse.y, pt.c, repo.c, rtti.c, search.c,
 	sig.c, spew.c, tree.c, typeck.c, typeck2.c, xref.c: Finish
 	prototyping.
d1015 4
a1018 1
Wed Aug 20 01:34:40 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1020 1
a1020 3
	* decl2.c (mark_vtable_entries): Instead of replacing pure
	virtuals with a reference to __pure_virtual, copy the decl and
	change the RTL.
d1022 3
a1024 1
Tue Aug 19 02:26:07 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1026 1
a1026 1
	* pt.c (lookup_nested_type_by_name): Handle typedef wierdness.
d1028 2
a1029 2
	* pt.c (instantiate_class_template): Call repo_template_used
	before finish_prevtable_vardecl.
d1031 3
a1033 2
	* call.c (is_subseq): New fn.
	(compare_ics): Use it.
d1035 1
a1035 1
	* repo.c (finish_repo): Don't crash on no args.
d1037 2
a1038 3
	* parse.y (named_complex_class_head_sans_basetype): Handle
 	explicit global scope.
	* decl2.c (handle_class_head): New fn.
d1040 1
a1040 1
	* Makefile.in (BISON): Add -L flag.
d1042 3
a1044 1
	* pt.c (unify): Add CONST_DECL case.
d1046 1
a1046 1
Thu Aug 14 10:05:13 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1048 8
a1055 1
	* rtti.c (permanent_obstack): Fix decl to not be a pointer.
d1057 1
a1057 9
	* cp-tree.h (report_type_mismatch): Add prototype.
	* call.c (build_overload_call_real): Remove erroneous fourth
	argument to report_type_mismatch.
	(build_user_type_conversion_1): Remove erroneous second arg to
	tourney.
	(build_new_function_call): Likewise.
	(build_object_call): Likewise.
	(build_new_op): Likewise.
	(build_new_method_call): Likewise.
d1059 2
a1060 1
Wed Aug 13 19:19:25 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1062 1
a1062 2
	* error.c (dump_decl): Don't bother processing a function with no
	DECL_LANG_SPECIFIC.
d1064 3
a1066 1
	* method.c (emit_thunk): Call init_function_start in the macro case.
d1068 1
a1068 1
Wed Aug 13 10:46:19 1997  H.J. Lu  (hjl@@gnu.ai.mit.edu)
d1070 5
a1074 2
	* decl2.c (DEFAULT_VTABLE_THUNKS): Define to be 0 if not
	defined and used to set flag_vtable_thunks.
d1076 1
a1076 1
Tue Aug 12 20:13:57 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1078 3
a1080 2
	* parse.y: Don't clear the inlines from their obstack until they've 
	all been processed.
d1082 1
a1082 2
	* decl.c (duplicate_decls): Don't complain about exception
 	specification mismatch if flag_exceptions is off.
d1084 2
a1085 2
	* Makefile.in (BISON): bison, not byacc or bison -y.
	(parse.c): Use bison flags.
d1087 1
a1087 1
Mon Aug 11 15:01:56  1997  Marc Lehmann <pcg@@goof.com>
d1089 3
a1091 1
	* Make-lang.in (c++.distclean): Remove g++.c on make distclean.
d1093 5
a1097 1
Sun Aug 10 12:06:09 1997  Paul Eggert  <eggert@@twinsun.com>
d1099 4
a1102 3
	* cp-tree.h: Replace STDIO_PROTO with PROTO in include files.
	* cvt.c, error.c, except.c, expr.c, friend.c, init.c, rtti.c:
	Include <stdio.h> before include files that formerly used STDIO_PROTO. 
d1104 4
a1107 2
	* decl.c, g++spec.c, lex.c, method.c, repo.c:
	Include	"config.h" first, as per autoconf manual.
d1109 6
a1114 1
Fri Aug  8 11:47:48 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1116 2
a1117 4
	* decl.c (duplicate_decls): Tweak wording.
	* lex.c (do_pending_defargs): Don't die if we see a default arg
	that isn't a DEFAULT_ARG.
	* error.c (dump_expr): Handle DEFAULT_ARG.
d1119 8
a1126 2
	* decl2.c (lang_decode_option): Handle -fhandle-exceptions.
	* lang-options.h: Add -fhandle-exceptions.
d1128 2
a1129 2
	* class.c (build_vtable): vtables are artificial.
	(prepare_fresh_vtable): Likewise.
d1131 2
a1132 1
Wed Aug  6 11:02:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1134 6
a1139 2
	* cvt.c (ocp_convert): After converting to the target type, set
 	LOOKUP_NO_CONVERSION.
d1141 2
a1142 3
	* call.c (joust): Warn about potentially confusing promotion rules
	with -Wsign-promo.
	* cp-tree.h, lang-options.h, decl2.c: Support -Wsign-promo.
d1144 13
a1156 1
Tue Aug  5 15:15:07 1997  Michael Meissner  <meissner@@cygnus.com>
d1158 1
a1158 1
	* exception.cc: Declare __terminate_func with noreturn attribute.
d1160 5
a1164 1
Fri Aug  1 03:18:15 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1166 2
a1167 2
	* parse.y: Break out eat_saved_input, handle errors.
	(function_try_block): Use compstmt instead of compstmt_or_error.
d1169 4
a1172 1
Thu Jul 31 17:14:04 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1174 2
a1175 1
	* tree.c (build_cplus_new): Don't set TREE_ADDRESSABLE.
d1177 1
a1177 1
Fri Jul  4 01:45:16 1997  Andreas Schwab  <schwab@@issan.informatik.uni-dortmund.de>
d1179 1
a1179 2
	* Make-lang.in (cplib2.txt, cplib2.ready): Instead of checking for
	existence of cc1plus check whether $(LANGUAGES) contains C++.
d1181 1
a1181 1
Wed Jul 30 13:04:21 1997  Andreas Schwab  <schwab@@issan.informatik.uni-dortmund.de>
d1183 2
a1184 4
	* method.c (do_build_copy_constructor): When copying an anonymous
	union member loop around to handle nested anonymous unions.  Use
	the offset of the member relative to the outer structure, not the
	union.
d1186 1
a1186 1
Tue Jul 29 21:17:29 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1188 11
a1198 4
	* call.c (resolve_args): New fn.
	(build_new_function_call): Use it.
	(build_object_call): Likewise.
	(build_new_method_call): Likewise.
d1200 1
a1200 1
Mon Jul 28 16:02:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1202 2
a1203 1
	* call.c (build_over_call): tsubst all default parms from templates.
d1205 1
a1205 1
Wed Jul 23 13:36:25 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1207 4
a1210 3
	* decl.c (struct cp_function): Add static_labelno.
	(push_cp_function_context): Save it.
	(pop_cp_function_context): Restore it.
d1212 1
a1212 1
Tue Jul 22 14:43:29 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1214 3
a1216 1
	* typeck.c (build_component_ref_1): Convert from reference.
d1218 1
a1218 1
Tue Jul 22 11:06:23 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1220 1
a1220 2
	* parse.y (current_declspecs, prefix_attributes): Initialize to
	NULL_TREE.
d1222 1
a1222 3
	* parse.y (initdcl0): Make sure CURRENT_DECLSPECS is non-nil
	before we try to force it to be a TREE_LIST.
	(decl): Make sure $1.t is non-nil.
d1224 6
a1229 1
Sun Jul 20 11:53:07 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1231 1
a1231 1
	* pt.c (uses_template_parms): Handle template first-parse codes.
d1233 1
a1233 1
	* decl.c (cp_finish_decl): Only warn about user-defined statics.
d1235 1
a1235 1
Fri Jul 18 17:56:08 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1237 1
a1237 1
	* pt.c (unify): Handle BOOLEAN_TYPE.
d1239 1
a1239 3
	* cp-tree.h: Lose PARM_DEFAULT_FROM_TEMPLATE.
	* pt.c (tsubst): Don't set it.
	* call.c (build_over_call): Use uses_template_parms.
d1241 1
a1241 1
Thu Jul 17 18:06:30 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1243 1
a1243 8
	* method.c (build_overload_nested_name): Use static_labelno
 	instead of var_labelno.
	(build_qualified_name): New fn.
	(build_overload_name): Split out from here.
	(build_static_name): Use build_qualified_name.
	* decl.c (cp_finish_decl): Statics in extern inline functions 
	have comdat linkage.
	(start_function): Initialize static_labelno.
d1245 1
a1245 1
Thu Jul 17 11:20:17 1997  Benjamin Kosnik  <bkoz@@rhino.cygnus.com>
d1247 1
a1247 2
	* class.c (finish_struct_methods): add check of warn_ctor_dtor_privacy
	before "all member functions in class [] are private"
d1249 1
a1249 1
Wed Jul 16 23:47:08 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1251 2
a1252 2
	* lex.c (do_scoped_id): convert_from_reference.
	* init.c (build_offset_ref): Likewise.
d1254 5
a1258 1
Wed Jul 16 12:34:29 1997  Benjamin Kosnik  <bkoz@@lisa.cygnus.com>
d1260 1
a1260 1
	* error.c (dump_expr): Check TREE_OPERAND before dump_expr_list.
d1262 2
a1263 1
Mon Jul 14 03:23:46 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1265 1
a1265 2
	* typeck.c (get_member_function_from_ptrfunc): Promote index
 	before saving it.
d1267 2
a1268 1
Sun Jul 13 00:11:52 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1270 1
a1270 2
	* tree.c (layout_basetypes): Move non-virtual destructor warning.
	* decl.c (xref_basetypes): Remove non-virtual destructor warning.
d1272 12
a1283 1
Sat Jul 12 12:47:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1285 1
a1285 4
	* decl.c (grokdeclarator): Call add_defarg_fn for the function
	type, too.
	* lex.c (add_defarg_fn): Adjust.
	(do_pending_defargs): Adjust.  Don't skip the first parm.
d1287 2
a1288 1
Fri Jul 11 01:39:50 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1290 3
a1292 1
	* decl.c (build_enumerator): Global enumerators are also readonly.
d1294 2
a1295 2
	* rtti.c (build_dynamic_cast_1): Renamed from build_dynamic_cast.
	(build_dynamic_cast): Call it and convert_from_reference.
d1297 1
a1297 5
	* lex.c (add_defarg_fn): New fn.
	(snarf_defarg): Don't add to defarg_types.
	(do_pending_defargs): Lose defarg_types.  All fns we process now
	have defargs.
	* decl.c (grokfndecl): Call add_defarg_fn.
d1299 1
a1299 19
	* Makefile.in (CONFLICTS): Expect 18 s/r conflicts.
	* cp-tree.def: Add DEFAULT_ARG.
	* spew.c (yylex): Call snarf_defarg as appropriate.
	* parse.y: New tokens DEFARG and DEFARG_MARKER.
	(defarg_again, pending_defargs, defarg, defarg1): New rules.
	(structsp): Use pending_defargs.
	(parms, full_parm): Use defarg.
	* lex.c (init_lex): Initialize inline_text_firstobj.
	(do_pending_inlines): Never pass the obstack to feed_input.
	(process_next_inline): Call end_input instead of restore_pending_input.
	(clear_inline_text_obstack, reinit_parse_for_expr, do_pending_defargs,
	finish_defarg, feed_defarg, snarf_defarg, maybe_snarf_defarg): New fns.
	* input.c (end_input): New fn.
	(sub_getch): At the end of some fed input, just keep returning EOF
	until someone calls end_input.
	Remove 'obstack' field from struct input_source.
	* decl.c (grokparms): Handle DEFAULT_ARG.
	(replace_defarg): New fn.
	* cp-tree.h (DEFARG_LENGTH, DEFARG_POINTER): New macros.
d1301 1
a1301 1
Wed Jul  9 13:44:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1303 1
a1303 2
	* call.c (implicit_conversion): If nothing else works, try binding
	an rvalue to a reference.
d1305 1
a1305 1
Wed Jul  9 13:04:38 1997  Geoffrey Noer  <noer@@cygnus.com>
d1307 25
a1331 2
	* decl.c (init_decl_processing): fix Jun 30 patch -- move
	ifndef for Cygwin32 to include SIGSEGV.
d1333 1
a1333 1
Thu Jul  3 01:44:05 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1335 2
a1336 2
	* class.c (finish_struct_1): Only complain about pointers without
	copy stuff if there are any constructors.
d1338 1
a1338 1
	* rtti.c (build_dynamic_cast): Call complete_type on the types.
d1340 4
a1343 2
	* decl.c (grokfndecl): If the function we chose doesn't actually
 	match, die.
d1345 1
a1345 2
	* decl2.c (grokclassfn): Don't specify 'const int' for the
 	artificial destructor parm.
d1347 11
a1357 2
	* pt.c (type_unification): If we are called recursively, nothing 
	decays.
d1359 4
a1362 1
Mon Jun 30 17:53:21 1997  Geoffrey Noer  <noer@@cygnus.com>
d1364 2
a1365 5
        * decl.c (init_decl_processing): Stop trying to catch signals
	other than SIGABRT since the Cygwin32 library doesn't support
	them correctly yet.  This fixes a situation in which g++ causes
	a hang on SIGSEGVs and other such signals in our Win32-hosted
	tools.
d1367 3
a1369 1
Mon Jun 30 14:50:01 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1371 1
a1371 1
	* tree.c (mapcar, case CALL_EXPR): Handle all the parse node data.
d1373 1
a1373 1
Fri Jun 27 15:18:49 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1375 1
a1375 2
	* typeck2.c (store_init_value): Always return the value if our 
	type needs constructing.
d1377 1
a1377 2
	* method.c (hack_identifier): Convert class statics from
 	reference, too.
d1379 1
a1379 1
Thu Jun 26 11:44:46 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1381 1
a1381 1
	* Make-lang.in (cplib2.ready): Add $(LANGUAGES) dependency.
d1383 2
a1384 1
Thu Jun 19 16:49:28 1997  Mike Stump  <mrs@@cygnus.com>
d1386 1
a1386 2
	* typeck.c (c_expand_return): Make sure we clean up temporaries at
	the end of return x;
d1388 1
a1388 1
Thu Jun 19 12:28:43 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1390 1
a1390 1
	* lex.c (check_for_missing_semicolon): Also check for CV_QUALIFIER.
d1392 2
a1393 1
Tue Jun 17 18:35:57 1997  Mike Stump  <mrs@@cygnus.com>
d1395 1
a1395 2
	* except.c (expand_builtin_throw): Add support
 	-fno-sjlj-exceptions -fPIC exception handling on the SPARC.
d1397 1
a1397 1
Mon Jun 16 01:24:37 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1399 4
a1402 1
	* repo.c (extract_string): Null-terminate.
d1404 1
a1404 4
	* cp-tree.h (TI_SPEC_INFO): New macro.
	(CLASSTYPE_TI_SPEC_INFO): New macro.
	* pt.c (push_template_decl): Correctly determine # of template parms 
	for partial specs.
d1406 1
a1406 1
	* call.c (compare_ics): Really fix 'this' conversions.
d1408 1
a1408 2
	* pt.c (do_decl_instantiation): Don't crash on explicit inst of
	non-template fn.
d1410 1
a1410 2
	* pt.c (push_template_decl): Complain about mismatch in # of
 	template parms between a class template and a member template.
d1412 2
a1413 1
Sun Jun 15 02:38:20 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1415 1
a1415 5
	* method.c (synthesize_method): You can't call
 	function_cannot_inline_p after finish_function.
	* decl.c (finish_function): Turn on flag_inline_functions and turn
 	off DECL_INLINE before handing a synthesized method to the
 	backend.
d1417 4
a1420 1
Thu Jun 12 17:35:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1422 1
a1422 2
	* method.c (synthesize_method): Remove July 30 change to never set
 	DECL_INLINE if at_eof.
d1424 2
a1425 1
Thu Jun 12 15:25:08 1997  Mike Stump  <mrs@@cygnus.com>
d1427 1
a1427 2
	* xref.c (GNU_xref_member): Ensure that the node has a
	decl_lang_specific part before checking DECL_FRIEND_P.
d1429 2
a1430 1
Thu Jun 12 12:36:05 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1432 3
a1434 2
	* pt.c (instantiate_class_template): Diagnose non-class types used
	as bases.
d1436 2
a1437 1
Wed Jun 11 17:33:40 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1439 1
a1439 2
	* typeck.c (build_conditional_expr): Use convert_for_initialization
	instead of convert_and_check.
d1441 5
a1445 1
Wed Jun 11 12:31:33 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1447 1
a1447 1
	* parse.y (typespec): Don't pedwarn for typeof.
d1449 1
a1449 1
Tue Jun 10 00:22:09 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1451 1
a1451 2
	* repo.c (finish_repo): Only check changes if we would write a
	repo file.
d1453 2
a1454 1
	* call.c (compare_ics): Fix handling of 'this' conversions.
d1456 1
a1456 4
	* pt.c (do_decl_instantiation): Support static data too.  Rename
	from do_function_instantiation.
	* cp-tree.h: Adjust.
	* parse.y: Adjust.
d1458 1
a1458 3
	* repo.c (extract_string): New fn.
	(get_base_filename): Use it.
	(init_repo): Compare old args with current args.
d1460 2
a1461 1
Mon Jun  9 14:25:30 1997  Mike Stump  <mrs@@cygnus.com>
d1463 1
a1463 2
	* Makefile.in, Make-lang.in: Protect C-ls with a comment
 	character, idea from Paul Eggert <eggert@@twinsun.com>.
d1465 2
a1466 1
Mon Jun  9 01:52:03 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1468 1
a1468 2
	* typeck.c (c_expand_return): Be more persistent in looking for
 	returned temps.
d1470 2
a1471 2
	* cvt.c (build_up_reference): Use NOP_EXPR for switching from
 	pointer to reference.
d1473 2
a1474 1
	* class.c (build_vbase_path): Don't do anything if PATH has no steps.
d1476 1
a1476 1
Sun Jun  8 03:07:05 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1478 2
a1479 2
	* init.c (build_member_call, build_offset_ref):
 	Use do_scoped_id instead of do_identifier.
d1481 1
a1481 1
	* cvt.c (convert): Remove bogosity.
d1483 1
a1483 1
Sat Jun  7 20:50:17 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1485 1
a1485 2
	* cvt.c (build_up_reference): Do checks of ARGTYPE and
	TARGET_TYPE before trying to use get_binfo.
d1487 2
a1488 1
Fri Jun  6 17:36:39 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1490 1
a1490 1
	* cvt.c (build_up_reference): Call get_binfo to get access control.
d1492 3
a1494 2
	* decl2.c (import_export_decl): If we don't support weaks, leave
 	statics undefined.
d1496 1
a1496 1
Fri Jun  6 15:55:49 1997  Mike Stump  <mrs@@cygnus.com>
d1498 2
a1499 3
	* except.c (expand_builtin_throw): Add support for machines that
 	cannot access globals after throw's epilogue when
 	-fno-sjlj-exceptions is used.
d1501 1
a1501 1
Thu Jun  5 16:28:43 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1503 1
a1503 9
	* parse.y: 'std::' becomes '::'.
	* lex.c (real_yylex): Remove 'namespace' warning.
	* init.c (build_member_call): Ignore 'std::'.
	(build_offset_ref): Likewise.
	* decl2.c (do_using_directive): Ignore 'using namespace std;'.
	(do_toplevel_using_decl): Ignore 'using std::whatever'.
	* decl.c (push_namespace): Just sorry.
	(pop_namespace): Nop.
	(init_decl_processing): Declare std namespace.
d1505 2
a1506 1
Tue Jun  3 18:08:23 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1508 1
a1508 3
	* search.c (push_class_decls): A name which ambiguously refers to
 	several instantiations of the same template just refers to the
 	template.
d1510 2
a1511 1
Tue Jun  3 12:30:40 1997  Benjamin Kosnik  <bkoz@@cirdan.cygnus.com>
d1513 1
a1513 4
	* decl.c (build_enumerator): fix problem with unsigned long
	enumerated values being smashed to ints, causing overflow
	when computing next enumerated value. (for enum values around
	MAX_VAL).
d1515 3
a1517 1
Mon Jun  2 17:40:56 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1519 3
a1521 1
	* typeck.c (build_component_ref): Only call mark_used on a decl.
d1523 2
a1524 1
Thu May 29 15:54:17 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1526 1
a1526 2
	* typeck.c (build_c_cast): Make the check for a ptr to function
	more specific before possible default_conversion call.
d1528 1
a1528 1
Thu May 29 13:02:06 1997  Mike Stump  <mrs@@cygnus.com>
d1530 1
a1530 3
	* except.c (expand_exception_blocks): Simplify and fix and make
	sure we don't end a region in a sequence, as expand_end_bindings
	doesn't like it.
d1532 1
a1532 1
Wed May 28 17:08:03 1997  Mike Stump  <mrs@@cygnus.com>
d1534 1
a1534 2
	* except.c (init_exception_processing): Mark terminate as not
	returning so that the optimizer can optimize better.
d1536 2
a1537 1
Tue May 27 19:49:19 1997  Mike Stump  <mrs@@cygnus.com>
d1539 1
a1539 2
	* cvt.c (convert): Don't do any extra work, if we can avoid it
	easily.
d1541 1
a1541 1
Tue May 27 18:21:47 1997  Mike Stump  <mrs@@cygnus.com>
d1543 2
a1544 3
	* *.[chy]: Change cp_convert to ocp_convert, change convert to
	cp_convert.  convert is now reserved for the backend, and doesn't
	have the semantics a frontend person should ever want.
d1546 5
a1550 1
Fri May 23 10:58:31 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1552 1
a1552 2
	* lang-specs.h: Define __EXCEPTIONS if exceptions are enabled.
	Lose -traditional support.
d1554 2
a1555 1
Thu May 22 15:41:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1557 1
a1557 1
	* rtti.c (get_tinfo_var): Use TYPE_PRECISION (sizetype).
d1559 2
a1560 3
	* parse.y (self_reference): Do it for templates, too.
	* class.c (pushclass): Don't overload_template_name; the alias
	generated by build_self_reference serves the same purpose.
d1562 1
a1562 10
	* tree.c (list_hash): Make static, take more args.
	(list_hash_lookup): Likewise.
	(list_hash_add): Make static.
	(list_hash_canon): Lose.
	(hash_tree_cons): Only build a new node if one isn't already in the
	hashtable.
	(hash_tree_chain): Use hash_tree_cons.
	* cp-tree.h: Adjust.
	* decl.c (grokfndecl): Just check IDENTIFIER_GLOBAL_VALUE instead
	of calling lookup_name.
d1564 1
a1564 1
Wed May 21 18:24:19 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1566 1
a1566 2
	* pt.c (instantiate_class_template): TYPE_VALUES for an enum
	doesn't refer to the CONST_DECLs.
d1568 1
a1568 1
Tue May 20 21:09:32 1997  Bob Manson  <manson@@charmed.cygnus.com>
d1570 1
a1570 3
	* rtti.c (get_tinfo_var): Either INT_TYPE_SIZE or 32, whichever
	is bigger.
	(expand_class_desc): Convert the last argument to a sizetype.
d1572 3
a1574 1
Tue May 20 13:55:57 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1576 1
a1576 64
	* gxx.gperf (__complex, __complex__, __imag, __imag__, __real,
	__real__): Add reswords.
	* hash.h: Regenerate.
	* lex.h (rid): Add RID_COMPLEX.
	(RID_LAST_MODIFIER): Set to RID_COMPLEX.
	* lex.c (init_lex): Add building of RID_COMPLEX.
	(real_yylex): General cleanup in line with what c-lex.c also has,
	sans the cruft for traditional; add handling of SPEC_IMAG, complex
	types, and imaginary numeric constants.
	* parse.y (REALPART, IMAGPART): Add tokens.
	(unary_expr): Add REALPART and IMAGPART rules.
	* cp-tree.h (complex_{integer,float,double,long}_type_node): Declare.
	* decl.c (complex_{integer,float,double,long}_type_node): Define
	types.
	(init_decl_processing): Set up the types.
	(grokdeclarator): Add handling of RID_COMPLEX.  Set and use
	DEFAULTED_INT instead of EXPLICIT_INT when we default to int type.
	* call.c (build_new_op): Add REALPART_EXPR and IMAGPART_EXPR cases.
	* cvt.c (cp_convert): Handle COMPLEX_TYPE.
	* error.c (dump_type_prefix, dump_type, dump_type_suffix): Add
	COMPLEX_TYPE case.
	* method.c (build_overload_name): Add handling of the different
	COMPLEX_TYPEs, prefixing them with `J'.
	* pt.c (process_template_parm): Don't let them use a COMPLEX_TYPE
	as a template parm.
	(uses_template_parms, tsubst, unify): Add COMPLEX_TYPE case.
	* tree.c (lvalue_p): Add REALPART_EXPR and IMAGPART_EXPR cases.
	(mapcar): Handle COMPLEX_CST.
	* typeck.c (build_binary_op_nodefault): Handle COMPLEX_TYPE.
	(common_type): Add code for complex types.
	(build_unary_op): Add REALPART_EXPR and IMAGPART_EXPR cases.
	(convert_for_assignment): Likewise.
	(mark_addressable): Add REALPART_EXPR and IMAGPART_EXPR cases.

Mon May 19 12:26:27 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst): Don't pass the MINUS_EXPR for an array domain to
	tsubst_expr, as it might try to do overload resolution.

Sat May 17 10:48:31 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_class_template): Oops.

Fri May 16 14:23:57 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.def: Add TAG_DEFN.
	* pt.c (tsubst_enum): New fn.
	(instantiate_class_template): Use it.
	(tsubst_expr): Support TAG_DEFN.
	(tsubst): Support local enums.
	(tsubst_copy): Likewise.
	* decl.c (finish_enum): Likewise.
	(start_enum): If this is a local enum, switch to permanent_obstack.

Wed May 14 19:08:28 1997  Mike Stump  <mrs@@cygnus.com>

	* decl.c (store_parm_decls): Set last_parm_cleanup_insn here.
	(finish_function): Put the base init code for constructors just
	after the parm cleanup insns.
	(struct cp_function): Add last_parm_cleanup_insn.
	(push_cp_function_context): Likewise.
	(pop_cp_function_context): Likewise.
	
Tue May 13 15:51:20 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1578 2
a1579 1
	* pt.c (tsubst_copy): Handle BIT_NOT_EXPR.
d1581 1
a1581 1
Wed May  7 11:17:59 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1583 2
a1584 2
	* method.c (emit_thunk) [ASM_OUTPUT_MI_THUNK]: Build up the RTL
	for THUNK_FNDECL before we switch to temporary allocation.
d1586 1
a1586 1
Mon May  5 14:46:53 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1588 2
a1589 1
	* call.c (build_new_op): Handle null arg2 for ?:.
d1591 2
a1592 1
Thu May  1 18:26:37 1997  Mike Stump  <mrs@@cygnus.com>
d1594 2
a1595 6
	* except.c (expand_exception_blocks): Ensure that we flow through
	the end of the exception region for the exception specification.
	Move exception region for the exception specification in, so that
	it doesn't protect the parm cleanup.  Remove some obsolete code.
	* decl.c (store_parm_decls): Likewise.
	(finish_function): Likewise.
d1597 5
a1601 1
Tue Apr 29 15:38:54 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1603 1
a1603 1
	* init.c (build_new): Fix nothrow handling.
d1605 2
a1606 1
Tue Apr 29 14:29:50 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1608 1
a1608 2
	* init.c (emit_base_init): Don't warn about the initialization
	list for an artificial member.
d1610 1
a1610 1
Fri Apr 25 17:47:59 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1612 1
a1612 1
	* expr.c (do_case): Handle !START case for the error msg.
d1614 3
a1616 1
Fri Apr 25 11:55:23 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1618 2
a1619 3
	* decl2.c, lang-options.h: New option -Weffc++.
	* class.c, decl.c, init.c, typeck.c: Move Effective C++ warnings
	to -Weffc++.
d1621 2
a1622 2
	* decl2.c (finish_prevtable_vardecl): Change NO_LINKAGE_HEURISTICS
	to MULTIPLE_SYMBOL_SPACES.
d1624 2
a1625 1
Wed Apr 23 18:06:50 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1627 2
a1628 1
	* method.c (emit_thunk, generic case): Set current_function_is_thunk.
d1630 1
a1630 1
	* method.c (emit_thunk, macro case): Set up DECL_RESULT.
d1632 4
a1635 5
	* typeck.c (c_expand_return): Don't complain about returning void
	to void in an artificial function.
	* method.c (make_thunk): Change settings of READONLY/VOLATILE, 
	don't set DECL_RESULT, set DECL_ARTIFICIAL.
	(emit_thunk, generic code): Also set up DECL_LANG_SPECIFIC. 
d1637 2
a1638 1
Wed Apr 23 14:43:06 1997  Mike Stump  <mrs@@cygnus.com>
d1640 1
a1640 7
	* init.c (init_decl_processing): Add supoprt for setjmp/longjmp based
	exception handling.
	* except.c (init_exception_processing): Likewise.
	(expand_end_catch_block): Likewise.
	(expand_exception_blocks): Likewise.
	(expand_throw): Likewise.
	* exception.cc (__default_terminate): Likewise.
d1642 1
a1642 12
	* init.c (perform_member_init): Use new method of expr level
	cleanups, instead of cleanups_this_call and friends.
	(emit_base_init): Likewise.
	(expand_aggr_vbase_init_1): Likewise.
	(expand_vec_init): Likewise.
	* decl.c (cp_finish_decl): Likewise.
	(expand_static_init): Likewise.
	(store_parm_decls): Likewise.
	(cplus_expand_expr_stmt): Likewise.
	* decl2.c (finish_file): Likewise.
	
	* Make-lang.in (exception.o): Ok to compile with -O now.
d1644 2
a1645 2
	* decl.c (maybe_build_cleanup_1): We no longer have to unsave, as
	we know it will be done later by the backend.
d1647 1
a1647 4
	* decl2.c (lang_f_options): Remove support for short temps.
	* lang-options.h: Likewise.
	
Wed Apr 23 04:12:06 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1649 2
a1650 3
	* tree.c (varargs_function_p): New fn.
	* method.c (emit_thunk): Replace broken generic code with code to
	generate a heavyweight thunk function.
d1652 1
a1652 1
Tue Apr 22 02:45:18 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1654 1
a1654 1
	* pt.c (process_template_parm): pedwarn about floating-point parms.
d1656 1
a1656 1
	* decl.c (grokdeclarator): inline no longer implies static.
d1658 2
a1659 1
	* spew.c (yylex): Always return the TYPE_DECL if we got a scope.
d1661 1
a1661 1
Mon Apr 21 15:42:27 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1663 12
a1674 2
	* class.c (check_for_override): The signature of an overriding
	function is not changed.
d1676 1
a1676 3
	* call.c (build_over_call): Move setting of conv into the loop.
	Note: this change, along with the related changes of the 18th thru
	the 20th of April, fix an infinite loop problem in conversions.
d1678 1
a1678 1
Sun Apr 20 16:24:29 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1680 2
a1681 2
	* call.c (build_user_type_conversion_1): Really ignore rvalue
	conversions when looking for a REFERENCE_TYPE.
d1683 1
a1683 8
	* cvt.c (build_up_reference): Eviscerate, use build_unary_op.
	* cp-tree.h (TREE_REFERENCE_EXPR): #if 0.
	* typeck.c (decay_conversion): Don't set TREE_REFERENCE_EXPR.
	(build_unary_op): Likewise.
	* call.c (build_over_call): See through a CONVERT_EXPR around the
	ADDR_EXPR for on a temporary.
	* typeck.c (c_expand_return): See through a CONVERT_EXPR around
	the ADDR_EXPR for a local variable.
d1685 2
a1686 1
Fri Apr 18 12:11:33 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1688 1
a1688 6
	* call.c (build_user_type_conversion_1): If we're trying to
	convert to a REFERENCE_TYPE, only consider lvalue conversions.
	(build_new_function_call): Print candidates.
	(implicit_conversion): Try a temp binding if the lvalue conv is BAD.
	(reference_binding): Binding a temporary of a reference-related type
	is BAD.
d1690 2
a1691 1
Thu Apr 17 14:37:22 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1693 1
a1693 2
	* inc/typeinfo (type_info::before): Add cv-qualifier-seq.
	* tinfo2.cc (type_info::before): Likewise.
d1695 1
a1695 1
Mon Apr 14 12:38:17 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1697 1
a1697 1
	* call.c (implicit_conversion): Oops.
d1699 1
a1699 1
Fri Apr 11 02:18:30 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1701 2
a1702 2
	* call.c (implicit_conversion): Try to find a reference conversion
	before binding a const reference to a temporary.
d1704 1
a1704 1
Wed Apr  2 12:51:36 1997  Mike Stump  <mrs@@cygnus.com>
d1706 2
a1707 5
	* exception.cc (__default_unexpected): Call terminate by default,
	so that if the user overrides terminate, the correct function will
	be called.
	
Wed Mar 19 14:14:45 1997  Mike Stump  <mrs@@cygnus.com>
d1709 1
a1709 2
	* parse.y (left_curly): Avoid trying to use any fields of
	error_mark_node, as there aren't any.
d1711 2
a1712 1
Thu Mar 13 16:33:22 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1714 2
a1715 2
	* lex.c (do_identifier): Avoid breaking on overloaded methods
	as default arguments.
d1717 1
a1717 1
Wed Mar 12 13:55:10 1997  Hans-Peter Nilsson  <Hans-Peter.Nilsson@@axis.se>
d1719 2
a1720 1
	* call.c (add_template_candidate): Initialize the variable "dummy".
d1722 1
a1722 1
Mon Mar 10 15:13:14 1997  Brendan Kehoe  <brendan@@canuck.cygnus.com>
d1724 2
a1725 2
	* decl.c (start_decl): Make sure TYPE isn't an error_mark_node
	before we try to use TYPE_SIZE and TREE_CONSTANT on it.
d1727 1
a1727 1
Fri Mar  7 13:19:36 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1729 4
a1732 2
	* cp-tree.h (comp_ptr_ttypes, more_specialized): Add decl.
	(debug_binfo): Delete decl, not needed.
d1734 1
a1734 5
	* tree.c (fnaddr_from_vtable_entry, function_arg_chain,
	promotes_to_aggr_type): Delete fns.
	* cp-tree.h (FNADDR_FROM_VTABLE_ENTRY,
	SET_FNADDR_FROM_VTABLE_ENTRY, FUNCTION_ARG_CHAIN,
	PROMOTES_TO_AGGR_TYPE): Delete alternates to #if 1.
d1736 6
a1741 1
	* decl.c (pending_invalid_xref{,_file,_line}): Delete unused vars.
d1743 3
a1745 2
	* friend.c (is_friend_type): Delete fn.
	* cp-tree.h (is_friend_type): Delete decl.
d1747 2
a1748 4
	* decl.c (original_result_rtx, double_ftype_double,
	double_ftype_double_double, int_ftype_int, long_ftype_long,
	float_ftype_float, ldouble_ftype_ldouble, last_dtor_insn): Make static.
	* typeck.c (original_result_rtx, warn_synth): Delete extern decls.
d1750 5
a1754 3
	* decl.c (push_overloaded_decl{,_top_level}): Make static, adding
	fwd decls.
	* cp-tree.h (push_overloaded_decl{,_top_level}): Delete decls.
d1756 1
a1756 2
	* decl.c (pushdecl_nonclass_level): #if 0, unused.
	* cp-tree.h (pushdecl_nonclass_level): #if 0 decl.
d1758 2
a1759 2
	* lex.c (reinit_lang_specific): #if 0, unused.
	* cp-tree.h (reinit_lang_specific): #if 0 decl.
d1761 1
a1761 2
	* decl.c (revert_static_member_fn): Make static, adding fwd decl.
	* cp-tree.h (revert_static_member_fn): Delete decl.
d1763 1
a1763 2
	* class.c (root_lang_context_p): Delete fn.
	* cp-tree.h (root_lang_context_p): Delete decl.
d1765 1
a1765 2
	* decl.c (set_current_level_tags_transparency): #if 0, unused.
	* cp-tree.h (set_current_level_tags_transparency): #if 0 decl.
d1767 1
a1767 2
	* lex.c (set_vardecl_interface_info): Make static.
	* cp-tree.h (set_vardecl_interface_info): Delete decl.
d1769 2
a1770 2
	* call.c (find_scoped_type): Make static.
	* cp-tree.h (find_scoped_type): Delete decl.
d1772 1
a1772 2
	* search.c (convert_pointer_to_vbase): Make static.
	* cp-tree.h (convert_pointer_to_vbase): Delete decl.
d1774 2
a1775 2
	* decl.c (const_ptr_type_node): Likewise.
	* cp-tree.h (const_ptr_type_node): Delete decl.
d1777 1
a1777 2
	* typeck.c (common_base_type): Make static.
	* cp-tree.h (common_base_types): Delete erroneous decl.
d1779 3
a1781 2
	* pt.c (classtype_mangled_name): Make static.
	* cp-tree.h (classtype_mangled_name): Delete decl.
d1783 2
a1784 2
	* lex.c (check_newline): Make static.
	* cp-tree.h (check_newline): Delete decl.
d1786 3
a1788 3
	* typeck.c (build_x_array_ref): Delete fn, same idea as
	grok_array_decl.
	* cp-tree.h (build_x_array_ref): Delete decl.
d1790 2
a1791 3
	* lex.c (copy_decl_lang_specific): Delete fn, same idea as
	copy_lang_decl.
	* cp-tree.h (copy_decl_lang_specific): #if 0 decl.
d1793 2
a1794 2
	* class.c (build_vtable_entry): Make static.
	* cp-tree.h (build_vtable_entry): Delete decl.
d1796 1
a1796 2
	* class.c (build_vbase_pointer): Make static.
	* cp-tree.h (build_vbase_pointer): Delete decl.
d1798 1
a1798 2
	* sig.c (build_sptr_ref): Add forward decl and make static.
	* cp-tree.h (build_sptr_ref): Delete decl.
d1800 1
a1800 2
	* call.c (build_new_method_call): Add forward decl and make static.
	* cp-tree.h (build_new_method_call): Delete decl.
d1802 3
a1804 11
	* call.c (build_object_call): Make static.
	* class.c (check_for_override, complete_type_p, mark_overriders):
	Likewise.
	* decl.c (cp_function_chain): Likewise.
	* lex.c (set_typedecl_interface_info, reinit_parse_for_block):
	Likewise.
	* pt.c (comp_template_args, get_class_bindings, push_tinst_level):
	Likewise.
	* tree.c (build_cplus_array_type_1): Likewise.
	* typeck.c (comp_ptr_ttypes_{const,real,reinterpret}): Likewise.
	(comp_target_parms): Likewise.
d1806 1
a1806 2
	* init.c (build_builtin_call): Make static.
	* cp-tree.h (build_builtin_call): Delete decl.
d1808 1
a1808 2
	* typeck.c (binary_op_error): Delete decl.
	* cp-tree.h (binary_op_error): Likewise.
d1810 5
a1814 1
Thu Mar  6 16:13:52 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1816 2
a1817 12
	* call.c (build_method_call): Compare against error_mark_node
	directly, rather than the ERROR_MARK tree code.
	* cvt.c (cp_convert): Likewise.
	* decl.c (print_binding_level): Likewise.
	(duplicate_decls): Likewise.
	(grokdeclarator): Likewise.
	(grokdeclarator): Likewise.
	* init.c (expand_aggr_init_1): Likewise.
	(decl_constant_value): Likewise.
	* method.c (build_opfncall): Likewise.
	(hack_identifier): Likewise.
	* typeck.c (build_modify_expr): Likewise.
d1819 1
a1819 1
	* typeck.c (build_c_cast): Don't decl TYPE as register tree.
d1821 2
a1822 1
Sun Mar  2 02:54:36 1997  Bruno Haible  <bruno@@linuix.mathematik.uni-karlsruhe.de>
d1824 1
a1824 1
	* pt.c (unify): Strip NOP_EXPR wrappers before unifying integer values.
d1826 3
a1828 1
	* pt.c (coerce_template_parms): Add new error message.
d1830 1
a1830 2
	* method.c (build_overload_value): Implement name mangling for
	floating-point template arguments.
d1832 5
a1836 2
	* method.c (build_overload_int, icat, dicat): Fix mangling of template
	arguments whose absolute value doesn't fit in a signed word.
d1838 1
a1838 1
Mon Mar  3 12:14:54 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1840 1
a1840 5
	* friend.c: New file; put all of the friend stuff in here.
	* init.c: Instead of here.
	* Makefile.in (CXX_OBJS): Add friend.o.
	(friend.o): Add dependencies.
	* Make-lang.in (CXX_SRCS): Add $(srcdir)/cp/friend.c.
d1842 2
a1843 1
Sun Mar  2 11:04:43 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1845 1
a1845 2
	* call.c (build_scoped_method_call): Complain if the scope isn't a
	base.
d1847 1
a1847 1
Wed Feb 26 11:31:06 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1849 5
a1853 1
	* parse.y (left_curly): Don't crash on erroneous type.
d1855 1
a1855 1
	* init.c (build_delete): Fix type of ref.
d1857 1
a1857 1
Tue Feb 25 12:41:48 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1859 2
a1860 3
	* search.c (get_vbase_1): Renamed from get_vbase.
	(get_vbase): Wrapper, now non-static.
	(convert_pointer_to_vbase): Now static.
d1862 2
a1863 4
	* call.c (build_scoped_method_call): Accept a binfo for BASETYPE.
	* init.c (build_delete): Pass one.
	(build_partial_cleanup_for): Use build_scoped_method_call.
	* decl.c (finish_function): Pass a binfo.
d1865 2
a1866 1
Mon Feb 24 15:00:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1868 1
a1868 1
	* call.c (build_over_call): Only synthesize non-trivial copy ctors.
d1870 2
a1871 1
	* typeck.c (build_c_cast): Lose other reference to flag.
d1873 2
a1874 7
	* call.c (build_field_call): Don't look for [cd]tor_identifier.
	* decl2.c (delete_sanity): Remove meaningless use of
	LOOKUP_HAS_IN_CHARGE.
	* decl.c (finish_function): Use build_scoped_method_call instead
	of build_delete for running vbase dtors.
	* init.c (build_delete): Call overload resolution code instead of
	duplicating it badly.
d1876 1
a1876 1
Thu Feb 20 15:12:15 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1878 1
a1878 2
	* call.c (build_over_call): Call mark_used before trying to elide
	the call.
d1880 6
a1885 1
	* decl.c (implicitly_declare): Don't set DECL_ARTIFICIAL.
d1887 2
a1888 1
Wed Feb 19 11:18:53 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1890 1
a1890 2
	* typeck.c (build_modify_expr): Always pedwarn for a cast to
	non-reference used as an lvalue.
d1892 2
a1893 1
Wed Feb 19 10:35:37 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1895 1
a1895 1
	* cvt.c (cp_convert_to_pointer): Convert from 0 to a pmf properly.
d1897 2
a1898 1
Tue Feb 18 15:40:57 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1900 1
a1900 1
	* parse.y (handler): Fix template typo.
d1902 2
a1903 1
Sun Feb 16 02:12:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1905 1
a1905 2
	* error.c (lang_decl_name): New fn.
	* tree.c (lang_printable_name): Use it.
d1907 2
a1908 1
Fri Feb 14 16:57:05 1997  Mike Stump  <mrs@@cygnus.com>
d1910 1
a1910 2
	* g++spec.c: Include config.h so that we can catch bzero #defines
	from the config file.
d1912 2
a1913 1
Tue Feb 11 13:50:48 1997  Mike Stump  <mrs@@cygnus.com>
d1915 4
a1918 3
	* new1.cc: Include a declaration for malloc, to avoid warning, and
	avoid lossing on systems that require one (ones that define malloc
	in xm.h).
d1920 1
a1920 1
Mon Feb 10 22:51:13 1997  Bruno Haible	<bruno@@linuix.mathematik.uni-karlsruhe.de>
d1922 3
a1924 6
	* decl2.c (max_tinst_depth): New variable.
	(lang_decode_option): Parse "-ftemplate-depth-NN" command line
	option.
	* pt.c (max_tinst_depth): Variable moved.
	* lang-options.h: Declare "-ftemplate-depth-NN" command line option
	as legal.
d1926 8
a1933 1
Fri Feb  7 15:43:34 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1935 3
a1937 2
	* decl.c (xref_basetypes): Allow a base class that depends on
	template parms to be incomplete.
d1939 2
a1940 4
	* decl2.c (build_expr_from_tree): Support typeid(type).
	* rtti.c (get_typeid): Support templates.
	(expand_si_desc, expand_class_desc): Fix string length.
	(expand_ptr_desc, expand_attr_desc, expand_generic_desc): Likewise.
d1942 1
a1942 1
Tue Feb  4 11:28:24 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1944 8
a1951 1
	* pt.c (unify, case TEMPLATE_CONST_PARM): Use cp_tree_equal.
d1953 1
a1953 1
	* pt.c (tsubst): Put it back for -fno-ansi-overloading.
d1955 4
a1958 1
Mon Feb  3 18:41:12 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1960 1
a1960 3
	* pt.c (tsubst, case FUNCTION_DECL): Lose obsolete code that
	smashes together template and non-template decls of the same
	signature.
d1962 1
a1962 1
Thu Jan 30 19:18:00 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1964 1
a1964 1
	* pt.c (tsubst): Don't recurse for the type of a TYPENAME_TYPE.
d1966 2
a1967 1
Wed Jan 29 11:40:35 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1969 2
a1970 2
	* decl.c (duplicate_decls): Next route, pedwarn about different
	exceptions if -pedantic *or* olddecl !DECL_IN_SYSTEM_HEADER.
d1972 2
a1973 1
Tue Jan 28 20:43:29 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1975 2
a1976 4
	* cp-tree.h (HAS_DEFAULT_IMPLEMENTATION): Delete macro.
	(struct lang_type): Delete has_default_implementation member.
	Increase dummy to 21.
	* decl.c (start_method): Delete usage.
d1978 1
a1978 33
	* cp-tree.h (build_call, null_ptr_cst_p, in_function_p,
	store_after_parms, start_decl_1, auto_function): Add decls.
	(get_arglist_len_in_bytes, declare_implicit_exception,
	have_exceptions_p, make_type_decl, typedecl_for_tag,
	store_in_parms, pop_implicit_try_blocks, push_exception_cleanup,
	build_component_type_expr, cplus_exception_name,
	{make,clear}_anon_parm_name, dont_see_typename): Removed decls.
	* call.c (build_this): Make static.
	(is_complete): Likewise.
	(implicit_conversion): Likewise.
	(reference_binding): Likewise.
	(standard_conversion): Likewise.
	(strip_top_quals): Likewise.
	(non_reference): Likewise.
	(build_conv): Likewise.
	(user_harshness): Likewise.
	(rank_for_ideal): Likewise.
	* decl.c (start_decl_1): Delete forward decl.
	(push_decl_level): Make static.
	(resume_binding_level): Make static.
	(namespace_bindings_p): Make static.
	(declare_namespace_level): Make static.
	(lookup_name_real): Make static.
	(duplicate_decls): Make static.  Take register off NEWDECL and
	OLDDECL parm decls.
	* decl2.c (get_sentry): Make static.
	(temp_name_p): Delete fn.
	* except.c (auto_function): Delete decl.
	* lex.c (handle_{cp,sysv}_pragma): Make static.
	(handle_sysv_pragma) [HANDLE_SYSV_PRAGMA]: Add forward decl.
	* method.c (do_build_{copy_constructor,assign_ref}): Make static.
	* pt.c (tsubst_expr_values): Make static.
	* rtti.c (combine_strings): Delete decl.
d1980 2
a1981 1
Tue Jan 28 16:40:40 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d1983 1
a1983 1
	* pt.c (push_template_decl): Handle getting a typedef.
d1985 2
a1986 1
	* call.c (build_new_function_call): Complain about void arg.
d1988 1
a1988 1
Tue Jan 28 15:25:09 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d1990 2
a1991 2
	* decl.c (duplicate_decls): Give pedwarn of different exceptions
	if -pedantic, instead of olddecl !DECL_IN_SYSTEM_HEADER.
d1993 3
a1995 1
Mon Jan 27 19:21:29 1997  Mike Stump  <mrs@@cygnus.com>
d1997 1
a1997 3
	* except.c (expand_throw): Don't expand the cleanup tree here,
	since we are not going to write the rtl out.  Fixes problem with
	-g -O on SPARC.
d1999 1
a1999 1
Mon Jan 27 16:24:35 1997  Sean McNeil  <sean@@mcneil.com>
d2001 2
a2002 1
	* Make-lang.in: Add $(exeext) as necessary.
d2004 1
a2004 1
Mon Jan 27 13:20:39 1997  Mike Stump  <mrs@@cygnus.com>
d2006 2
a2007 1
	* parse.y (handler_seq): Must have at least one catch clause.
d2009 2
a2010 1
Sat Jan 25 12:00:05 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2012 1
a2012 1
	* call.c (add_builtin_candidate): Restore ?: hack.
d2014 3
a2016 1
	* decl.c (grok_op_properties): More warnings.
d2018 1
a2018 1
Sat Jan 25 08:50:03 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2020 2
a2021 2
	* decl.c (duplicate_decls): On second thought, do it as a pedwarn
	still but only if !DECL_IN_SYSTEM_HEADER (olddecl).
d2023 1
a2023 2
	* decl.c (duplicate_decls): Scale back to a warning, and only do
	'em if -pedantic.
d2025 2
a2026 1
Fri Jan 24 17:52:54 1997  Mike Stump  <mrs@@cygnus.com>
d2028 1
a2028 2
	* decl.c (duplicate_decls): pedwarn mismatched exception
	specifications.
d2030 2
a2031 1
Thu Jan 23 18:18:54 1997  Mike Stump  <mrs@@cygnus.com>
d2033 1
a2033 2
	* call.c (build_new_method_call): Don't display the invisible
	argument for controlling virtual bases.
d2035 3
a2037 1
Thu Jan 23 16:48:10 1997  Mike Stump  <mrs@@cygnus.com>
d2039 3
a2041 9
	* new: Add nothrow new and delete, bad_alloc and throw specifications
	for delete.
	* decl.c (init_decl_processing): Add throw specification for delete.
	* new.cc (nothrow): Define.
	* lex.c (real_yylex): Removing warning that throw and friends are
	keywords.
	* new1.cc (operator new (size_t sz, const nothrow_t&)): Define.
	* new2.cc (operator new[] (size_t sz, const nothrow_t&): Define.
	* Make-lang.in: Add new{1,2}.{cc,o}.
d2043 1
a2043 1
Thu Jan 23 16:39:06 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2045 4
a2048 1
	* lex.c (cons_up_default_function): Fix return type of synth op=.
d2050 1
a2050 2
	* init.c (emit_base_init): Add warnings for uninitialized members
	and bases.
d2052 2
a2053 2
	* decl.c (xref_basetypes): Add warning for non-polymorphic type
	with destructor used as base type.
d2055 1
a2055 3
	* decl.c (grok_op_properties): Add warning for op= returning void.
	* typeck.c (c_expand_return): Add warning for op= returning anything
	other than *this.
d2057 1
a2057 2
	* class.c (finish_struct_1): Add warning for class with pointers
	but not copy ctor or copy op=.
d2059 1
a2059 4
	* cp-tree.h (TI_PENDING_TEMPLATE_FLAG): New macro.
	* pt.c (add_pending_template): Use it instead of LANG_FLAG_0.
	(instantiate_template): If -fexternal-templates, add this
	instantiation to pending_templates.
d2061 6
a2066 2
	* decl2.c (copy_assignment_arg_p): Disable old hack to support
	Booch components.
d2068 2
a2069 1
Tue Jan 21 18:32:04 1997  Mike Stump  <mrs@@cygnus.com>
d2071 1
a2071 1
	* cvt.c (cp_convert): Pedwarn enum to pointer conversions.
d2073 2
a2074 1
Mon Jan 20 17:59:51 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2076 1
a2076 7
	* call.c (standard_conversion): Handle getting references.  Tack
	on RVALUE_CONV here.  Do it for non-class types, too.
	(reference_binding): Pass references to standard_conversion.
	(implicit_conversion): Likewise.
	(add_builtin_candidate): Disable one ?: kludge.
	(convert_like): Handle RVALUE_CONVs for non-class types.
	(joust): Disable the other ?: kludge.
d2078 1
a2078 1
Mon Jan 20 14:53:13 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2080 2
a2081 3
	* decl.c (init_decl_processing): Add code to build up common
	function types beforehand, to avoid creation then removal of
	things already in the hash table.
d2083 4
a2086 1
Mon Jan 20 14:43:49 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2088 1
a2088 2
	* decl.c (finish_function): Also zero out DECL_INCOMING_RTL for
	the arguments.
d2090 2
a2091 2
	* error.c (dump_expr, TEMPLATE_CONST_PARM): Don't require
	current_template_parms.
d2093 1
a2093 1
Fri Jan 17 10:25:42 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2095 5
a2099 1
	* search.c (lookup_field): Don't return a function, check want_type.
d2101 5
a2105 1
Thu Jan 16 18:14:35 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2107 2
a2108 1
	* init.c (build_new): Make sure PLACEMENT has a type.
d2110 1
a2110 1
Thu Jan 16 17:40:28 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2112 2
a2113 1
	* init.c (build_new): Support new (nothrow).
d2115 1
a2115 1
Wed Jan 15 12:38:14 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2117 3
a2119 2
	* pt.c (instantiate_decl): Also do push_to_top_level before setting
	up DECL_INITIAL.
d2121 1
a2121 3
	* cp-tree.h (PARM_DEFAULT_FROM_TEMPLATE): New macro.
	* pt.c (tsubst): Defer instantiation of default args.
	* call.c (build_over_call): Until here.
d2123 3
a2125 1
Wed Jan 15 10:08:10 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2127 2
a2128 2
	* search.c (lookup_field): Make sure we have an
	IDENTIFIER_CLASS_VALUE before we try to return it.
d2130 1
a2130 1
Thu Jan  9 07:19:01 1997  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2132 1
a2132 19
	* call.c (build_method_call): Delete unused var PARM.
	(build_overload_call_real): Likewise.
	(build_object_call): Delete unused var P.
	(build_new_op): Likewise.
	* decl.c (builtin_type_tdescs_{arr, len, max}): #if 0 out static
	var definitions, which are never used.
	(shadow_tag): Delete unused var FN.
	* expr.c (cplus_expand_expr): Delete unused var ORIGINAL_TARGET.
	* init.c (build_new): Delete unused var ALLOC_TEMP.
	* method.c (hack_identifier): Delete unused var CONTEXT.
	(do_build_copy_constructor): Delete unused var NAME.
	(synthesize_method): Delete unused var BASE.
	* pt.c (lookup_template_class): Delete unused var CODE_TYPE_NODE.
	* rtti.c (build_headof): Delete unused var VPTR.
	(get_typeid): Delete unused var T.
	* typeck.c (build_conditional_expr): Delete unused vars ORIG_OP1
	and ORIG_OP2.
	(build_ptrmemfunc): Delete unused vars U and NINDEX.
	* typeck2.c (build_functional_cast): Delete unused var BINFO.
d2134 1
a2134 1
Wed Jan  8 13:09:54 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2136 2
a2137 4
	* search.c (lookup_field): Use IDENTIFIER_CLASS_VALUE to look up
	things in a type being defined.
	* decl.c (finish_enum): Reverse the values so that they are in
	the correct order.
d2139 2
a2140 4
	* pt.c (instantiate_class_template): Don't initialize
	BINFO_BASETYPES until the vector is filled out.
	(unify): Don't abort on conflicting bindings, just fail.
	(instantiate_decl): Do push_tinst_level before any tsubsting.
d2142 1
a2142 2
	* method.c (build_overload_value): Handle getting a
	TEMPLATE_CONST_PARM for a pointer.
d2144 1
a2144 1
Tue Jan  7 14:00:58 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d2146 2
a2147 2
	* init.c (expand_member_init): Don't give 'not a base' error for
	templates.
d2149 1
a2149 1
	* pt.c (instantiate_decl): Call import_export_decl later.
d2151 3
a2153 1
	* pt.c (instantiate_class_template): Return a value.
d2155 1
a2155 2
	* parse.y (extension): New rule for __extension__.
	(extdef, unary_expr, decl, component_decl): Use it.
d2157 3
a2159 1
Tue Jan  7 09:20:28 1997  Mike Stump  <mrs@@cygnus.com>
d2161 1
a2161 3
	* class.c (base_binfo): Remove unused base_has_virtual member.
	(finish_base_struct): Likewise.
	(finish_struct_1): Likewise.
d2163 2
a2164 1
Tue Dec 31 20:25:50 1996  Mike Stump  <mrs@@cygnus.com>
d2166 1
a2166 4
	* search.c (expand_upcast_fixups): Fix bogus code generation
	problem where the generated code uses the wrong index into the
	runtime built vtable on the stack.  Old code could clobber random
	stack values.
d2168 5
a2172 1
Tue Dec 31 15:16:56 1996  Mike Stump  <mrs@@cygnus.com>
d2174 1
a2174 2
	* init.c (perform_member_init): Make sure the partial EH cleanups
	live on the function_obstack.
d2176 1
a2176 1
Fri Dec 27 10:31:40 1996  Paul Eggert  <eggert@@twinsun.com>
d2178 1
a2178 2
	* Make-lang.in (g++spec.o): Don't use $< with an explicit target;
	this isn't portable to some versions of `make' (e.g. Solaris 2.5.1).
d2180 5
a2184 1
Tue Dec 24 10:24:03 1996  Jeffrey A Law  (law@@cygnus.com)
d2186 1
a2186 1
	* decl.c (grokvardecl): Avoid ANSI style initialization.
d2188 1
a2188 1
Sun Dec 22 04:22:06 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2190 4
a2193 1
	* pt.c (tsubst): Tweak arg types for a FUNCTION_TYPE.
d2195 2
a2196 1
Fri Dec 20 17:09:25 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2198 1
a2198 1
	* pt.c (instantiate_class_template): Call grok_{ctor,op}_properties.
d2200 1
a2200 1
Fri Dec 20 12:17:12 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2202 1
a2202 3
	* g++spec.c (lang_specific_driver): Put missing hyphen in front of
	arguments we compare against.  Start the count of I at 1, not 0,
	since argv[0] is still the command.
d2204 2
a2205 1
Thu Dec 19 11:53:57 1996  Stan Shebs  <shebs@@andros.cygnus.com>
d2207 2
a2208 1
	* lang-specs.h: Accept .cp as an C++ extension.
d2210 7
a2216 1
Mon Dec 16 22:43:31 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2218 1
a2218 1
	* cp-tree.h (ptr_reasonably_similar): Add decl.
d2220 2
a2221 1
Thu Dec 12 15:00:35 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2223 1
a2223 3
	* decl.c (grokvardecl): Change SPECBITS parm to be the SPECBITS_IN
	pointer.  New local SPECBITS with the parm's value.
	(grokdeclarator): Pass &specbits down.
d2225 2
a2226 2
	* parse.y (expr_no_commas): Make sure $$ is not an error_mark_node
	before we try to do C_SET_EXP_ORIGINAL_CODE on it.
d2228 1
a2228 2
	* search.c (envelope_add_decl): Check that the CLASSTYPE_CID of
	CONTEXT is not 0 before we try to use TYPE_DERIVES_FROM.
d2230 2
a2231 2
	* decl.c (cplus_expand_expr_stmt): Only expand the expr if EXP is
	not an error_mark_node.
d2233 1
a2233 1
Sat Dec  7 17:20:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2235 4
a2238 2
	* cp-tree.h (TYPE_MAIN_DECL): Use TYPE_STUB_DECL.
	* *.c: Use TYPE_MAIN_DECL instead of TYPE_NAME where appropriate.
d2240 214
a2453 1
Fri Dec  6 14:40:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2455 1
a2455 3
	* decl.c (grokdeclarator): When giving an anonymous struct a name,
	replace TYPE_NAME instead of TYPE_IDENTIFIER (so TYPE_STUB_DECL is
	not affected).
d2457 2
a2458 2
	* typeck2.c (build_m_component_ref): If component is a pointer
	to data member, resolve the OFFSET_REF now.
d2460 1
a2460 1
	* call.c (convert_like): Don't go into infinite recursion.
d2462 2
a2463 1
	* pt.c (coerce_template_parms): Use tsubst_expr for non-type args.
d2465 1
a2465 2
	* class.c (finish_struct_1): Set DECL_ARTIFICIAL on the vptr.
	* tree.c (layout_basetypes): And on the vbase ptr.
d2467 1
a2467 1
Thu Dec  5 02:11:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2469 1
a2469 2
	* decl.c (BOOL_TYPE_SIZE): Define in terms of POINTER_SIZE or
	CHAR_TYPE_SIZE so bool is always the same size as another type.
d2471 2
a2472 1
	* decl.c (pushtag): Set DECL_IGNORED_P for DWARF, too.
d2474 1
a2474 1
Tue Dec  3 23:18:37 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2476 19
a2494 6
	* decl2.c (grok_x_components): Remove synthesized methods from
	TYPE_METHODS of an anonymous union, complain about member
	functions.
	* decl.c (shadow_tag): Wipe out memory of synthesized methods in
	anonymous unions.
	(finish_function): Just clear the DECL_RTL of our arguments.
d2496 2
a2497 1
Fri Nov 29 21:54:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2499 1
a2499 2
	* decl2.c (finish_file): Emit DWARF debugging info for static data
	members.
d2501 2
a2502 1
	* pt.c (tsubst): If t is a stub decl, return the stub decl for type.
d2504 2
a2505 1
Wed Nov 27 14:47:15 1996  Bob Manson  <manson@@charmed.cygnus.com>
d2507 1
a2507 2
	* typeck.c (build_component_ref): Don't die if COMPONENT isn't a
	IDENTIFIER_NODE.
d2509 3
a2511 1
Wed Nov 27 16:05:19 1996  Michael Meissner  <meissner@@tiktok.cygnus.com>
d2513 1
a2513 1
	* Make-lang.in (g++-cross$(exeext)): Fix typo.
d2515 2
a2516 1
Wed Nov 27 08:14:00 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2518 1
a2518 9
	Make the g++ driver now be a standalone program, rather than one
	that tries to run the gcc driver after munging up the options.
	* Make-lang.in (g++.c, g++spec.o): New rules.
	(g++.o): New rule, based on gcc.o with -DLANG_SPECIFIC_DRIVER
	added.
	(g++$(exeext)): New rule, based on xgcc rule.
	(g++-cross$(exeext)): Now just copies g++$(exeext) over.
	* g++spec.c: New file.
	* g++.c: Removed file.
d2520 1
a2520 1
Tue Nov 26 19:01:09 1996  Mike Stump  <mrs@@cygnus.com>
d2522 1
a2522 2
	* cvt.c (build_up_reference): Arrange for any temporary values
	that have been keep in registers until now to be put into memory.
d2524 2
a2525 1
Mon Nov 25 15:16:41 1996  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>
d2527 1
a2527 2
	* Make-lang.in (c++.stage[1234]): Depend upon stage[1-4]-start, so
	that make -j3 bootstrap works better.
d2529 2
a2530 1
Sun Nov 24 02:09:39 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2532 1
a2532 1
	* decl.c (pushtag): Do pushdecl for anon tags.
d2534 2
a2535 1
Thu Nov 21 16:30:24 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2537 1
a2537 2
	* typeck.c (c_expand_return): Fix logic.
	(unary_complex_lvalue): Avoid unused warning on address of INIT_EXPR.
d2539 2
a2540 1
Wed Nov 20 18:47:31 1996  Bob Manson  <manson@@charmed.cygnus.com>
d2542 2
a2543 4
	* g++.c (main): Make sure arglist has a final NULL entry.  Add
	PEXECUTE_LAST to the flags passed to pexecute, as otherwise
	stdin/stdout of the invoked program are redirected to
	nowheresville.
d2545 1
a2545 1
Tue Nov 19 16:12:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2547 6
a2552 1
	* decl.c (implicitly_declare): Set DECL_ARTIFICIAL.
d2554 1
a2554 1
Tue Nov 19 15:48:19 1996  Mike Stump  <mrs@@cygnus.com>
d2556 16
a2571 3
	* init.c (resolve_offset_ref): Handle obj.vfn better.
	* typeck.c (build_component_ref): Set TREE_TYPE on result from
	build_vfn_ref.
d2573 1
a2573 1
Tue Nov 19 13:14:33 1996  Mike Stump  <mrs@@cygnus.com>
d2575 4
a2578 3
	* typeck.c (convert_for_assignment): Also handle anachronistic
	implicit conversions from (::*)() to cv void*.
	* cvt.c (cp_convert_to_pointer): Likewise.
d2580 1
a2580 1
Mon Nov 18 17:05:26 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2582 1
a2582 1
	* lex.c (handle_cp_pragma): Fix bogus warning.
d2584 2
a2585 1
Mon Nov 18 16:10:43 1996  Mike Stump  <mrs@@cygnus.com>
d2587 3
a2589 2
	* cvt.c (cp_convert_to_pointer): Avoid thinking a POINTER_TYPE
	(METHOD_TYPE) is a TYPE_PTRMEMFUNC_P.
d2591 1
a2591 1
Thu Nov 14 23:18:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2593 1
a2593 6
	* class.c (finish_struct_1): Support DWARF2_DEBUG.
	* search.c (dfs_debug_mark): Likewise.
	* decl2.c (finish_vtable_vardecl): Likewise.
	* decl.c (pushtag, finish_enum): Likewise.
	* lex.c (check_newline): Use debug_* instead of calling *out
	functions directly.
d2595 1
a2595 1
Thu Nov 14 15:21:46 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2597 2
a2598 2
	* Make-lang.in (cplib2.ready): Add else clause to avoid problems
	on some picky hosts.
d2600 2
a2601 1
Wed Nov 13 12:32:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2603 1
a2603 2
	* class.c (finish_struct_1): A class has a non-trivial copy
	constructor if it has virtual functions.
d2605 10
a2614 1
	* cvt.c (cp_convert): Always call a constructor.
d2616 1
a2616 3
	* call.c (reference_binding): Still tack on a REF_BIND
	for bad conversions.
	(build_user_type_conversion_1): Propagate ICS_BAD_FLAG.
d2618 2
a2619 5
	* typeck.c (convert_arguments): Pass LOOKUP_ONLYCONVERTING.
	(c_expand_return): Likewise.
	* typeck2.c (digest_init): Likewise for { }.
	* init.c (expand_aggr_init_1): Keep the CONSTRUCTOR handling.
	* cvt.c (cp_convert): Handle failure better.
d2621 1
a2621 1
Wed Nov 13 11:51:20 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2623 4
a2626 2
	* g++.c (main): Also set PEXECUTE_SEARCH, to make the invocation
	of GCC be path-relative. 
d2628 2
a2629 1
Wed Nov 13 11:27:16 1996  Michael Meissner  <meissner@@tiktok.cygnus.com>
d2631 5
a2635 2
	* Make-lang.in (g++-cross): G++-cross doesn't need version.o, but
	it does need choose-temp.o and pexecute.o.
d2637 1
a2637 1
Wed Nov 13 07:53:38 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2639 1
a2639 3
	* g++.c (error) [!HAVE_VPRINTF]: Put error back for the only time
	that we still use it.
	(P_tmpdir, R_OK, W_OK, X_OK) [__MSDOS__]: Delete unnecessary macros.
d2641 1
a2641 1
Wed Nov 13 02:00:26 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2643 4
a2646 2
	* init.c (expand_default_init): Avoid calling constructors to 
	initialize reference temps.
d2648 1
a2648 1
	* cvt.c (convert_to_reference): Fix.
d2650 2
a2651 1
Tue Nov 12 19:10:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2653 1
a2653 9
	* cvt.c (cp_convert): Simplify for flag_ansi_overloading.
	(convert_to_reference): Likewise.
	* typeck.c (convert_for_initialization): Likewise.
	* init.c (expand_default_init): Likewise.
	(expand_aggr_init_1): Likewise.
	* cp-tree.h (CONV_NONCONVERTING): Lose.
	* typeck.c (build_c_cast): Lose allow_nonconverting parm.
	* *.c: Adjust.
	* call.c (build_user_type_conversion_1): Assume LOOKUP_ONLYCONVERTING.
d2655 2
a2656 1
Tue Nov 12 16:29:04 1996  Brendan Kehoe  <brendan@@canuck.cygnus.com>
d2658 1
a2658 1
	* pt.c (tsubst_expr): Reverse args to expand_start_catch_block.
d2660 1
a2660 1
Tue Nov 12 15:26:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2662 1
a2662 2
	* init.c (expand_aggr_init_1): Don't crash on non-constructor
	TARGET_EXPR.
d2664 2
a2665 1
Tue Nov 12 14:00:50 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2667 1
a2667 16
	* g++.c: Include gansidecl.h.
	(VPROTO, PVPROTO, VA_START): Delete.
	(choose_temp_base_try, choose_temp_base, perror_exec,
	run_dos) [__MSDOS__]: Delete fns.
	(pfatal_with_name): Delete fn.
	(temp_filename): Declare like in gcc.c.
	(pexecute, pwait, choose_temp_base): Declare from gcc.c.
	(error_count, signal_count): Define.
	(error): Delete both definitions.
	(PEXECUTE_{FIRST,LAST,SEARCH,VERBOSE}): Define from gcc.c.
	(pfatal_pexecute): Add fn from gcc.c.
	(main): Rename local VERBOSE var to VERBOSE_FLAG.  Rewrite the
	code to use the pexecute stuff also used by gcc.c.
	(MIN_FATAL_STATUS): Define.
	* Make-lang.in (g++): Add dependency on and linking with
	choose-temp.o and pexecute.o.
d2669 3
a2671 7
	* cp-tree.h: Include gansidecl.h.
	(STDIO_PROTO): Delete #undef/#define.
	* cvt.c (NULL): Delete #undef/#define.
	* expr.c (NULL): Likewise.
	* init.c (NULL): Likewise.
	* rtti.c (NULL): Likewise.
	* xref.c (NULL): Likewise.
d2673 2
a2674 4
	* cp-tree.h (build_user_type_conversion): Add prototype.
	* call.c (build_user_type_conversion): Delete prototype.  Correct
	decl of FLAGS arg to be an int.
	* cvt.c (build_user_type_conversion): Likewise.
d2676 1
a2676 1
Tue Nov 12 12:16:20 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2678 2
a2679 4
	* cp-tree.def: Add TRY_BLOCK and HANDLER.
	* except.c (expand_start_catch_block): Support templates.
	* parse.y (try_block, handler_seq): Likewise.
	* pt.c (tsubst_expr): Support TRY_BLOCK and HANDLER.
d2681 3
a2683 1
Mon Nov 11 13:57:31 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2685 1
a2685 3
	* pt.c (current_template_args): New fn.
	(push_template_decl): Use it.
	* decl.c (grokdeclarator): Use it.
d2687 5
a2691 1
	* decl2.c (build_expr_from_tree): Dereference ref vars.
d2693 1
a2693 2
	* decl.c (grokdeclarator): Generalize handling of TYPENAME_TYPEs in
	the decl-specifier-seq.
d2695 3
a2697 3
	* decl.c (grok_op_properties): Don't force the type of a conversion
	op to be complete.  Don't warn about converting to the same type
	for template instantiations.
d2699 2
a2700 2
	* decl2.c (finish_file): Don't call instantiate_decl on synthesized
	methods.
d2702 1
a2702 1
Mon Nov 11 13:20:34 1996  Bob Manson  <manson@@charmed.cygnus.com>
d2704 2
a2705 2
	* typeck.c (get_delta_difference): Remove previous bogusness.
	Don't give errors if force is set.
d2707 2
a2708 1
Fri Nov  8 17:38:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2710 1
a2710 7
	* decl2.c (finish_file): Don't emit debug info.
	* decl.c (pushdecl): Lose obsolete code.
	(grokdeclarator): Still do the long long thing after complaining.
	* search.c (note_debug_info_needed): Don't do anything if we're in a 
	template.
	* method.c (synthesize_method): For non-local classes,
	push_to_top_level first.
d2712 2
a2713 1
Fri Nov  8 11:52:28 1996  Bob Manson  <manson@@charmed.cygnus.com>
d2715 1
a2715 35
	* typeck.c (get_delta_difference): Add no_error parameter.
	(build_ptrmemfunc): Call get_delta_difference with no_error set;
	we don't want error messages when converting unrelated
	pointer-to-member functions.

Thu Nov  7 11:16:24 1996  Mike Stump  <mrs@@cygnus.com>

	* error.c (dump_expr): Improve the wording on error messages that
	involve pointer to member functions.

Tue Nov  5 17:12:05 1996  Mike Stump  <mrs@@cygnus.com>

	* cvt.c (cp_convert_to_pointer): Move code for conversions from
	(::*)() to void* or (*)() up a bit, so that we can convert from
	METHOD_TYPEs as well.

Tue Nov  5 14:54:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (get_tinfo_fn): Make sure 'type' is permanent.
	There are no 'member' types.
	(get_tinfo_fn_dynamic): Diagnose typeid of overloaded fn.
	(build_x_typeid): Handle errors.

Mon Nov  4 17:43:12 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (convert_for_assignment): Handle anachronistic implicit
	conversions from (::*)() to void* or (*)().
	* cvt.c (cp_convert_to_pointer): Likewise.
	(cp_convert_to_pointer_force): Remove cp_convert_to_pointer
	conversions from here.
	* decl2.c (lang_decode_option): Add -W{no-,}pmf-conversions.
	* lang-options.h: Likewise.
	* decl2.c (warn_pmf2ptr): Define.
	* cp-tree.h: Declare it.
	* typeck2.c (digest_init): Allow pmfs down into
d2718 13
a2730 1
Sun Nov  3 09:43:00 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2732 1
a2732 1
	* typeck.c (c_expand_return): Fix for returning overloaded fn.
d2734 2
a2735 1
Fri Nov  1 08:53:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2737 3
a2739 7
	* cp-tree.h (DIRECT_BIND): Change from INDIRECT_BIND.
	* decl.c (grok_reference_init): Pass DIRECT_BIND.
	* cvt.c (build_up_reference): Don't mark 'this' addressable.  Use
	DIRECT_BIND.
	* call.c (convert_like): Don't pass INDIRECT_BIND.
	* typeck.c (convert_arguments): Likewise.
	* typeck.c (mark_addressable): Allow &this if flag_this_is_variable.
d2741 4
a2744 1
Thu Oct 31 17:08:49 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2746 2
a2747 3
	* typeck.c (mark_addressable): Support TARGET_EXPR, unify with
	similar code in build_up_ref.
	* cvt.c (build_up_reference): Drastically simplify.
d2749 3
a2751 1
Mon Oct 28 12:45:05 1996  Jeffrey A Law  (law@@cygnus.com)
d2753 2
a2754 2
	* typeck.c (signed_or_unsigned_type): If the given type already
	as the correct signedness, then just return it.
d2756 1
a2756 2
	* typeck.c ({un,}signed_type): If can't do anything, call
	signed_or_unsigned_type.
d2758 1
a2758 1
Thu Oct 24 14:21:59 1996  Bob Manson  <manson@@charmed.cygnus.com>
d2760 1
a2760 2
	* decl2.c (copy_assignment_arg_p): Don't buy the farm if
	current_class_type is NULL.
d2762 3
a2764 1
Wed Oct 23 00:43:10 1996  Jason Merrill  <jason@@gerbil.cygnus.com>
d2766 1
a2766 2
	* class.c (finish_struct_1): Avoid empty structs by adding a field
	so layout_type gets the mode right.
d2768 4
a2771 1
	* typeck.c (c_expand_return): Drastically simplify.
d2773 26
a2798 1
Mon Oct 21 22:34:02 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2800 4
a2803 1
	* typeck.c (decay_conversion): Handle overloaded methods.
d2805 2
a2806 1
Fri Oct 18 16:03:48 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2808 1
a2808 1
	* call.c (build_over_call): A TARGET_EXPR has side-effects.
d2810 2
a2811 1
Thu Oct 17 11:31:59 1996  Mike Stump  <mrs@@cygnus.com>
d2813 1
a2813 10
	* cvt.c (convert_to_pointer_force): Add code to support pointer to
	member function to pointer to function conversions.
	* init.c (resolve_offset_ref): Add code to allow faked up objects,
	ignoring them if they are not used, and giving an error, if they
	are needed.
	* typeck.c (get_member_function_from_ptrfunc): Fold e1 to improve
	code, and so that we can give an error, if we needed an object,
	and one was not provided.
	(build_c_cast): Don't call default_conversion when we want to
	convert to pointer to function from a METHOD_TYPE.
d2815 2
a2816 1
Mon Oct 14 00:28:51 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2818 6
a2823 1
	* Make-lang.in (cplib2.ready): Fix logic.
d2825 9
a2833 2
	* decl.c (shadow_tag): Only complain about non-artificial function
	members.
d2835 1
a2835 1
	* class.c (finish_struct_1): Add synthesized methods to TYPE_METHODS.
d2837 1
a2837 1
Fri Oct 11 16:12:40 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2839 2
a2840 2
	* expr.c (cplus_expand_expr): Pre-tweak call_target like
	expand_inline_function would.
d2842 1
a2842 2
	* pt.c (mark_decl_instantiated): If extern_p, call
	mark_inline_for_output.
d2844 4
a2847 1
Thu Oct 10 15:58:08 1996  Mike Stump  <mrs@@cygnus.com>
d2849 2
a2850 2
	* typeck.c (unary_complex_lvalue): Add code to handle intermediate
	pmd conversions.
d2852 5
a2856 2
	* typeck.c (get_delta_difference): Fix wording, as we can be used
	for pointer to data members.
d2858 2
a2859 1
Tue Oct  8 12:43:51 1996  Bob Manson  <manson@@charmed.cygnus.com>
d2861 2
a2862 3
	* pt.c (tsubst): If the function decl isn't a member of this
	template, return a copy of the decl (including copying the
	lang-specific part) so we don't hose ourselves later.
d2864 2
a2865 1
Thu Oct  3 16:24:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2867 1
a2867 6
	* class.c (finish_struct): Remove DWARF-specific tag handling.
	* decl.c (pushtag): Likewise.
	(finish_function): Always clear DECL_ARGUMENTS on function decls with
	no saved RTX.
	* decl2.c (finish_file): Emit DWARF debugging info for static data
	members.
d2869 4
a2872 1
Wed Oct  2 21:58:01 1996  Bob Manson  <manson@@charmed.cygnus.com>
d2874 2
a2875 2
	* decl.c (duplicate_decls): Make sure the old DECL_LANG_SPECIFIC
	isn't the same as the new one before we whack it.
d2877 1
a2877 1
Mon Sep 30 13:38:24 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2879 2
a2880 4
	* class.c, cp-tree.h, cvt.c, decl.c, decl2.c, gxx.gperf, hash.h,
	lex.c, method.c, parse.y, typeck.c, typeck2.c: Remove
	warn_traditional and warn_strict_prototypes; remove ancient
	'overload' code; remove references to flag_traditional.
d2882 1
a2882 1
Mon Sep 30 12:58:40 1996  Mike Stump  <mrs@@cygnus.com>
d2884 2
a2885 1
	* input.c (sub_getch): Handle 8-bit characters in string literals.
d2887 4
a2890 1
Sun Sep 29 03:12:01 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2892 2
a2893 2
	* tree.c (mapcar): Handle CONSTRUCTORs.
	(copy_to_permanent): Handle expression_obstack properly.
d2895 8
a2902 1
	* Make-lang.in (cplib2.txt): Also depend on the headers.
d2904 3
a2906 4
	* rtti.c (get_tinfo_var): Don't assume that POINTER_SIZE ==
	INT_TYPE_SIZE.
	(expand_class_desc): Use USItype for offset field.
	* tinfo.h (struct __class_type_info): Likewise.
d2908 1
a2908 2
	* method.c (build_overload_int): TYPE_PRECISION should be applied
	to types.
d2910 3
a2912 1
Sat Sep 28 14:44:50 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2914 1
a2914 2
	* call.c (build_new_op): A COND_EXPR involving void must be a
	builtin.
d2916 3
a2918 1
Fri Sep 27 16:40:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2920 1
a2920 5
	* typeck.c (build_x_component_ref): New fn.
	(build_object_ref): Use it.
	* parse.y (primary): Use it.
	* decl2.c (build_expr_from_tree): Use it.
	* cp-tree.h: Declare it.
d2922 4
a2925 2
	* decl.c (start_decl): variable-sized arrays cannot be initialized.
	* error.c (dump_type_suffix): Handle variable arrays.
d2927 1
a2927 1
Fri Sep 27 13:14:05 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2929 4
a2932 1
	* Make-lang.in (exception.o): Put back compiling it with -fPIC.
d2934 2
a2935 1
Fri Sep 27 03:00:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2937 1
a2937 2
	* decl.c (lookup_name_real): Don't try to look up anything in a
	TYPENAME_TYPE.
d2939 1
a2939 1
	* tinfo2.cc (__throw_type_match_rtti): Oops.
d2941 2
a2942 1
Thu Sep 26 22:11:05 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d2944 1
a2944 1
	* Make-lang.in (exception.o): Use -fno-PIC for now.
d2946 1
a2946 1
Thu Sep 26 10:59:00 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2948 1
a2948 7
	* rtti.c (build_dynamic_cast): Pass tinfo fns rather than
	calling them.
	(get_tinfo_fn_dynamic): Extracted from build_typeid.
	* tinfo2.cc (__dynamic_cast): Adjust.
	
	* rtti.c (build_typeid): Use resolves_to_fixed_type_p.
	(build_x_typeid): Likewise.
d2950 1
a2950 7
	* parse.y: Call build_x_typeid instead of build_typeid.
	* cp-tree.def: Add TYPEID_EXPR.
	* pt.c (tsubst_copy): Handle typeid.
	* decl2.c (build_expr_from_tree): Likewise.
	* rtti.c (build_x_typeid): Throw bad_typeid from here.
	(build_typeid): Not here.
	* cp-tree.h: Declare build_x_typeid.
d2952 1
a2952 1
Wed Sep 25 17:26:16 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2954 5
a2958 1
	* call.c (convert_like): Pull out constant values.
d2960 1
a2960 1
	* tree.c (mapcar): Use build_cplus_array_type, not build_array_type.
d2962 3
a2964 1
Wed Sep 25 17:28:53 1996  Michael Meissner  <meissner@@tiktok.cygnus.com>
d2966 5
a2970 3
	* decl.c (init_decl_processing): Create short int types before
	creating size_t in case a machine description needs to use
	unsigned short for size_t.
d2972 2
a2973 1
Tue Sep 24 18:18:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d2975 1
a2975 1
	* Make-lang.in (exception.o): Turn off pic.
d2977 2
a2978 2
	* tinfo2.cc (__throw_type_match_rtti): Fix cv-variants of the same
	type, multi-level ptr conversions.
d2980 1
a2980 7
	* rtti.c (call_void_fn): Renamed and genericized from throw_bad_cast.
	(throw_bad_cast): Use it.
	(throw_bad_typeid): New fn.
	(build_typeid): Throw bad_typeid as needed.
	Use build_call.
	(synthesize_tinfo_fn): Handle functions and arrays before checking
	for cv-quals.
d2982 13
a2994 2
	* Remove .h from standard C++ headers, add new.h, move into inc
	subdirectory.
d2996 1
a2996 3
	* exception*: Remove pointer from object, constructors.  Add
	default exception::what that uses type_info::name.  Add
	__throw_bad_typeid.
d2998 6
a3003 1
	* init.c (build_new): Don't add a cookie to new (void *) T[2].
d3005 2
a3006 1
Mon Sep 23 15:21:53 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3008 2
a3009 1
	* Make-lang.in: Building C++ code depends on cc1plus.
d3011 1
a3011 1
Mon Sep 23 12:38:40 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d3013 1
a3013 2
	* decl.c (struct saved_scope): Declare PROCESSING_TEMPLATE_DECL as
	a HOST_WIDE_INT, not a tree.
d3015 1
a3015 1
Mon Sep 23 12:36:02 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3017 1
a3017 1
	* exception.cc: Don't include <stdlib.h>.
d3019 2
a3020 1
	* Make-lang.in (c++.clean): Remove cplib2.*.
d3022 2
a3023 1
Mon Sep 23 09:42:19 1996  Doug Evans  <dje@@canuck.cygnus.com>
d3025 1
a3025 2
	* parse.y (component_decl_1, component_costructor_declarator case):
	Pass attributes/prefix_attributes in tree list.
d3027 7
a3033 1
Mon Sep 23 01:18:50 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3035 1
a3035 1
	* tinfo{,2}.cc: #include <stddef.h> instead of <stdlib.h>.
d3037 3
a3039 1
Sun Sep 22 05:31:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3041 2
a3042 2
	* lex.c (do_identifier): Don't do deferred lookup in a template
	header.
d3044 1
a3044 1
	* typeck2.c (store_init_value): Oops.
d3046 2
a3047 7
	* new.{h,cc}, exception.{h,cc}, typeinfo.h, tinfo{2.cc,.cc,.h}: 
	New files for C++ lang-support library.
	* Make-lang.in (CXX_EXTRA_HEADERS): Define.
	(CXX_LIB2FUNCS): Define.
	And rules for building the C++ lang-support code.
	* config-lang.in (headers): Define.
	(lib2funcs): Define.
d3049 1
a3049 1
Sat Sep 21 19:17:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3051 1
a3051 6
	* decl2.c (build_expr_from_tree): If CONSTRUCTOR has a type, call
	digest_init.
	* pt.c (tsubst_copy): Compute type for CONSTRUCTOR.
	* typeck2.c (store_init_value): Check for initializing pmf with { }
	here.
	(process_init_constructor): Not here.
d3053 7
a3059 1
Thu Sep 19 16:41:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3061 3
a3063 278
	* pt.c (begin_template_parm_list): Increment
	processing_template_decl here.
	(end_template_parm_list): Not here.
	(process_template_parm): No need to add 1 to it now.
	* *.c: Use processing_template_decl instead of current_template_parms
	to check for being in a template.

	* pt.c (uses_template_parms): Handle SCOPE_REF.  Fix CONSTRUCTOR.
	(tsubst_copy): Handle CONSTRUCTOR.
	(instantiate_decl): Set up context properly for variables.
	* decl2.c (build_expr_from_tree): Handle CONSTRUCTOR.
	* class.c (finish_struct): Reverse CLASSTYPE_TAGS.

Wed Sep 18 13:30:20 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* lex.c (enum tree_node_kind) [GATHER_STATISTICS]: Put the enum back.

Wed Sep 18 04:24:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (make_thunk): Call comdat_linkage before setting the
	TREE_CODE.

	* decl2.c (comdat_linkage): Use make_decl_one_only.
	(import_export_decl): Likewise.
	* decl.c (init_decl_processing): Check supports_one_only instead of
	SUPPORTS_WEAK.

Sat Sep 14 08:34:41 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl2.c (grokfield): Tighten checking for access decls.

	* decl.c (make_typename_type): Resolve references to
	current_class_type.  Set CLASSTYPE_GOT_SEMICOLON.
	(lookup_name_real): Types that depend on a template parameter get
	an implicit 'typename' unless they're in the current scope.
	(start_decl_1): We don't care about incomplete types that depend
	on a template parm.
	(grokdeclarator): Resolve 'typename's in the type specifier that
	refer to members of the current scope.

	* call.c (build_over_call): Remove 'inline called before
	definition' diagnostic.
	(build_method_call): Likewise.
	* decl.c (duplicate_decls): Downgrade 'used before declared
	inline' to a warning, only with -Winline.

Fri Sep 13 17:31:40 1996  Stan Shebs  <shebs@@andros.cygnus.com>

	* mpw-make.sed: Fix include paths, add @@DASH_C_FLAG@@ to compile.

Wed Sep 11 22:38:13 1996  Gerald Baumgartner  <gb@@cs.purdue.edu>

	* call.c (build_method_call): When calling a signature
	default implementation, as in other cases, let instance_ptr simply
	be instance.

Wed Sep 11 22:14:44 1996  Mike Stump  <mrs@@cygnus.com>

	* parse.y (simple_stmt): Cleanup and use do_poplevel ().

Wed Sep 11 22:10:48 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_start_catch_block): Add a pushlevel so that -g
	works on hppa and SPARC.

Wed Sep 11 10:18:06 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* typeck.c (build_indirect_ref): Catch PTR being an error_mark_node.

Mon Sep  9 19:51:14 1996  Gerald Baumgartner  <gb@@cs.purdue.edu>

	* call.c (build_over_call): Check first whether DECL_CONTEXT exists
	before testing whether it's a signature.

Sun Sep  8 16:06:57 1996  Gerald Baumgartner  <gb@@cs.purdue.edu>

	* call.c (build_new_method_call): Don't complain about signature
	pointers and references not being an aggr type.
	(build_this): If a signature pointer or reference was passed in,
	just return it.
	(build_new_method_call): If instance is a signature pointer, set
	basetype to the signature type of instance.
	* sig.c (build_signature_method_call): Deleted basetype and
	instance parameters, they can be found as the DECL_CONTEXT of
	function and as the first argument passed in.
	* cp-tree.h: Changed declaration of build_signature_method_call.
	* call.c (build_method_call): Deleted first two arguments in call
	of build_signature_method_call.
	(build_over_call): Added call to build_signature_method_call.

Thu Sep  5 16:51:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (build_c_cast): Don't tack a non_lvalue_expr onto a
	target_expr.

Thu Sep  5 10:05:38 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cvt.c (convert_to_reference): Use %#T, not %#D, for error.

Wed Sep  4 17:16:09 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* except.c (expand_start_try_stmts): Move to except.c in the backend.
	(expand_end_try_stmts): Remove.

	* init.c (perform_member_init): Use add_partial_entry () instead
	of directly manipulating lists.
	(emit_base_init): Ditto.

Wed Sep  4 12:14:36 1996  Mike Stump  <mrs@@cygnus.com>

	* except.c (expand_exception_blocks): Always make sure USE and
	CLOBBER insns that came at the end still do, the backend relies
	upon this.

Wed Sep  4 07:44:48 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): We can only use a TARGET_EXPR of the
	right type.

Tue Sep  3 19:26:05 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* cvt.c (convert_to_reference): Revert last change, don't complain
	about temp without target decl.

Tue Sep  3 10:22:56 1996  Mike Stump  <mrs@@cygnus.com>

	* decl.c (grokdeclarator): Don't core dump when void() is given.

Tue Sep  3 02:38:56 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (copy_args_p): Don't crash.

Fri Aug 30 14:26:57 1996  Mike Stump  <mrs@@cygnus.com>

	* pt.c (tsubst): And support template args inside the exception
	specification.

	* pt.c (tsubst): Add support for exception specifications in
	template functions.

Fri Aug 30 10:01:55 1996  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.def (DECL_STMT): Eliminate the throw spec field, only 3
	fields now.
	* cp-tree.h (start_decl): Eliminate the throw spec parameter.
	(start_function): Likewise.
	(start_method): Likewise.
	(grokfield): Likewise.
	(make_call_declarator): Add throw spec parameter.
	(set_quals_and_spec): Add routine.
	* lex.c (set_quals_and_spec): Likewise.
	* decl.h (grokdeclarator): Eliminate the throw spec parameter.
	* decl.c (shadow_tag): Eliminate the throw spec parameter to
	grokdeclarator.
	(groktypename): Likewise.
	(start_decl): Eliminate the throw spec parameter.  Eliminate the
	throw spec parameter to grokdeclarator.  Eliminate the throw spec
	field in DECL_STMT.
	(cp_finish_decl): Eliminate the throw spec field in DECL_STMT.
	(grokfndecl): Remove useless set of raises.
	(grokdeclarator): Eliminate the throw spec parameter.  Eliminate
	the throw spec parameter to start_decl.  Pull the throw spec out
	of the call declarator.
	(grokparms): Eliminate the throw spec parameter to grokdeclarator.
	(start_function): Eliminate the throw spec parameter.  Eliminate
	the throw spec parameter to grokdeclarator.
	(start_method): Likewise.
	* decl2.c (grokfield): Likewise.
	(grokbitfield): Eliminate the throw spec parameter to grokdeclarator.
	(grokoptypename): Likewise.
	(finish_file): Eliminate the throw spec parameter to
	start_function.  Add throw spec to make_call_declarator.
	* except.c (init_exception_processing): Add throw spec to
	make_call_declarator.  Eliminate the throw spec parameter to
	start_decl.
	(expand_start_catch_block): Eliminate the throw spec parameter to
	grokdeclarator.
	(expand_builtin_throw): Add throw spec to make_call_declarator.
	Eliminate the throw spec parameter to start_function.
	(start_anon_func): Likewise.
	* lex.c (make_call_declarator): Add throw spec parameter.
	(set_quals_and_spec): New routine.
	(cons_up_default_function): Add throw spec to make_call_declarator.
	Eliminate the throw spec parameter to grokfield.
	* method.c (synthesize_method): Eliminate the throw spec parameter
	to start_function.
	* pt.c (process_template_parm): Eliminate the throw spec parameter
	to grokdeclarator.
	(tsubst): Add throw spec to make_call_declarator.
	(tsubst_expr): Eliminate the throw spec parameter to start_decl.
	(do_function_instantiation): Eliminate the throw spec parameter to
	grokdeclarator.  Eliminate the throw spec parameter to
	start_function.
	* rtti.c (synthesize_tinfo_fn): Eliminate the throw spec parameter
	to start_function.
	* parse.y (datadef): Remove non-winning optimization.
	(decl): Likewise.
	(fndef): Remove ambiguous error productions uncovered by grammer
	fixing.
	(constructor_declarator): Add exception_specification_opt here.
	(component_constructor_declarator): Likewise.
	(direct_after_type_declarator): Likewise.
	(complex_direct_notype_declarator): Likewise.
	(direct_abstract_declarator): Likewise.
	(fn.def1): Remove exception_specification_opt.
	(fn.def2): Likewise.
	(condition): Likewise.
	(initdcl0): Likewise.
	(initdcl): Likewise.
	(notype_initdcl0): Likewise.
	(nomods_initdcl0): Likewise.
	(component_decl_1): Likewise.
	(component_declarator): Likewise.
	(after_type_component_declarator0): Likewise.
	(after_type_component_declarator): Likewise.
	(notype_component_declarator): Likewise.

Wed Aug 28 01:40:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_over_call): Also use an INIT_EXPR when
	initializing anything from an rvalue.

	* call.c (build_over_call): Call stabilize_reference when building
	an INIT_EXPR instead of calling the copy ctor.

	* call.c (joust): Extend the previous change to all comparisons.

	* decl2.c, method.c, lex.c: Use MAKE_DECL_ONE_ONLY and 
	NO_LINKAGE_HEURISTICS.

	* decl2.c (finish_file): Emit any statics that weren't already.

	* typeck.c (build_static_cast): Implement.
	* tree.c (build_cplus_new): Handle getting a TARGET_EXPR.
	* decl.c (grokparms): Use can_convert_arg instead of
	implicit_conversion directly.
	(copy_args_p): New fn.
	* cvt.c (convert_to_reference): Don't complain about temp with
	static_cast.
	(build_up_reference): Handle TARGET_EXPRs.
	* call.c (build_over_call): Elide unnecessary temps.
	(can_convert*): Use new overloading code.

Tue Aug 27 13:12:21 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c: Move TYPE_PTR*_MACROS ...
	* cp-tree.h: To here.
	* typeck.c (build_reinterpret_cast): Implement.

	* call.c (add_builtin_candidate): Use TYPE_PTROB_P instead of
	ptr_complete_ob.
	(joust): If we're comparing a function to a builtin and the worst
	conversion for the builtin is worse than the worst conversion for the
	function, take the function.

	* typeck.c (build_const_cast): Implement.
	(comp_ptr_ttypes_const): Like comp_ptr_ttypes, for const_cast.
	(comp_ptr_ttypes_reinterpret): Like cpt, for reinterpret_cast.

Tue Aug 27 13:14:58 1996  Bob Manson  <manson@@charmed.cygnus.com>

	* rtti.c (build_dynamic_cast): Don't try to dereference exprtype
	too early. Make sure we explode if exprtype turns out to be a
	NULL_TREE when it shouldn't be.

Tue Aug 27 10:56:21 1996  Mike Stump  <mrs@@cygnus.com>

	* cp-tree.h: New routine make_call_declarator.
	* lex.c (make_call_declarator): Define it.
	* except.c (init_exception_processing): Use it.
	(expand_builtin_throw): Likewise.
	(start_anon_func): Likewise.
	* decl2.c (finish_file): Likewise.
	* lex.c (cons_up_default_function): Likewise.
	* parse.y: Likewise.
	* pt.c (tsubst): Likewise.
	
Mon Aug 26 17:40:03 1996  Mike Stump  <mrs@@cygnus.com>
d3065 1
a3065 1
	* decl2.c (groktypefield): Remove unused code.
d3067 3
a3069 1
Mon Aug 26 17:00:33 1996  Mike Stump  <mrs@@cygnus.com>
d3071 1
a3071 11
	* gxx.gperf: Change TYPE_QUAL into CV_QUALIFIER.
	* parse.y: Likewise.  Change maybe_type_qual into maybe_cv_qualifier.
	Change type_quals into cv_qualifiers.  Change nonempty_type_quals into
	nonempty_cv_qualifiers.
	* hash.h: Rebuild.
	
	* lex.c (make_pointer_declarator): Change type_quals into
	cv_qualifiers.
	(make_reference_declarator): Likewise.
	
Thu Aug 22 01:09:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3073 1
a3073 2
	* decl.c (start_function): Only check interface_* for templates
	with flag_alt_external_templates.
d3075 1
a3075 2
	* call.c (build_new_op): Check for comparison of different enum types.
	(build_over_call): Fix arg # output.
d3077 1
a3077 1
	* typeck.c (build_component_ref): Handle pre-found TYPE_DECL.
d3079 2
a3080 1
Wed Aug 21 00:13:15 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3082 1
a3082 1
	* call.c (build_new_op): Check for erroneous args.
d3084 2
a3085 1
	* call.c (build_new_method_call): Add missing args to cp_error.
d3087 1
a3087 1
	* tree.c (error_type): Dont print reference-to-array.
d3089 2
a3090 2
	* typeck.c (convert_for_assignment): Don't say contravariance for
	removing const.
d3092 1
a3092 1
Tue Aug 20 13:23:00 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3094 1
a3094 1
	* call.c (build_over_call): Diagnose bad convs for `this'.
d3096 1
a3096 2
	* lex.c (cons_up_default_function): Set DECL_ARTIFICIAL
	on _ctor_arg.
d3098 3
a3100 2
	* call.c (convert_like): Handle bad convs.
	(build_over_call): Handle bad convs better.
d3102 1
a3102 1
	* decl2.c: -fansi-overloading is now the default.
d3104 2
a3105 1
	* call.c (build_new_method_call): Check for erroneous args.
d3107 1
a3107 2
	* pt.c (instantiate_class_template): Propagate
	TYPE_USES_MULTIPLE_INHERITANCE.
d3109 2
a3110 1
Tue Aug 20 13:09:57 1996  Mike Stump  <mrs@@cygnus.com>
d3112 2
a3113 1
	* call.c (enforce_access): Add static to routine.
d3115 1
a3115 1
Sun Aug 18 14:35:54 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3117 1
a3117 2
	* call.c (build_user_type_conversion_1): Fix bad handling.
	(compare_ics): Likewise.
d3119 3
a3121 1
Sat Aug 17 21:54:11 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3123 1
a3123 1
	* call.c (standard_conversion): Oops.
d3125 1
a3125 1
Sat Aug 17 16:28:11 1996  Geoffrey Noer  <noer@@cygnus.com>
d3127 2
a3128 1
	* g++.c: Update test for win32 (&& ! cygwin32).
d3130 1
a3130 1
Sat Aug 17 03:45:31 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3132 1
a3132 10
	* typeck.c (comp_ptr_ttypes_real): Handle OFFSET_TYPEs properly.
	(ptr_reasonably_similar): New fn.
	* call.c (BAD_RANK): New rank.
	(ICS_BAD_FLAG): New macro.
	(standard_conversion): Handle almost-right pointer conversions.
	(reference_binding): Handle bad rvalue bindings.
	(add_*_candidate): Stuff.
	(build_over_call): Pass bad conversions to convert_for_initialization.
	(compare_ics): Handle bad convs.
	(joust): Likewise.
d3134 2
a3135 1
Fri Aug 16 15:02:19 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3137 1
a3137 2
	* init.c (expand_vec_init): Use ptrdiff_type_node instead of
	integer_type_node when computing pointer offsets.
d3139 2
a3140 1
Fri Aug 16 01:28:32 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3142 1
a3142 6
	* tree.c (lvalue_type): New fn.
	(error_type): New fn.
	* call.c (op_error): Use error_type.
	(add_conv_candidate): Use lvalue_type.
	(add_builtin_candidates): Likewise.
	* error.c (args_as_string): Use error_type.
d3144 2
a3145 1
Thu Aug 15 17:27:13 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3147 2
a3148 2
	* pt.c (instantiate_decl): Evaluate DECL_INITIAL of a VAR_DECL here.
	(tsubst): Not here.
d3150 2
a3151 5
	* decl.c (init_decl_processing): With -ansi, __null's type is the
	signed integral type with the same number of bits as a pointer.
	Introduce a new variable null_node for it.
	* cp-tree.h: Adjust.
	* call.c (null_ptr_cst_p): Adjust.
d3153 1
a3153 1
Thu Aug 15 17:09:54 1996  Mike Stump  <mrs@@cygnus.com>
d3155 2
a3156 2
	* except.c (do_unwind): Mark %i7 as used on the SPARC so we can
	optimize.
d3158 2
a3159 1
Thu Aug 15 01:36:49 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3161 2
a3162 2
	* decl2.c (import_export_decl): Ignore #pragma interface for tinfo
	fns of classes without virtual functions.
d3164 1
a3164 2
	* call.c (add_function_candidate): Handle `this' specially.
	(compare_ics): Likewise.
d3166 1
a3166 1
Tue Aug 13 12:16:10 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3168 1
a3168 1
	* typeck.c (build_conditional_expr): Fix handling of __null.
d3170 1
a3170 4
	* decl2.c (comdat_linkage): New fn.
	(import_export_vtable): Use it.
	(import_export_decl): Use it.
	* method.c (make_thunk): Use it.
d3172 1
a3172 1
Mon Aug 12 00:09:18 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3174 3
a3176 2
	* pt.c (end_template_decl): If we don't actually have parms, return.
	* parse.y (template_header): Accept 'template <>'.
d3178 1
a3178 1
	* errfn.c: Allow 5 args.
d3180 2
a3181 1
Sun Aug 11 15:20:58 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3183 1
a3183 14
	* tree.c (make_temp_vec): New fn.
	* pt.c (push_template_decl): Handle partial specs.
	(instantiate_class_template): Likewise.
	(more_specialized): Use get_bindings.
	(more_specialized_class): New fn.
	(get_class_bindings): New fn.
	(most_specialized_class): New fn.
	(do_function_instantiation): List candidates for ambiguous case.
	* decl.c (duplicate_decls): Lose reference to DECL_TEMPLATE_MEMBERS.
	(shadow_tag): Call push_template_decl for partial specializations.
	* parse.y: Likewise.
	* cp-tree.h (DECL_TEMPLATE_SPECIALIZATIONS): Replaces
	DECL_TEMPLATE_MEMBERS.
	* call.c (print_z_candidates): Reduce duplication.
d3185 3
a3187 1
Fri Aug  9 14:36:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3189 2
a3190 1
	* decl2.c (lang_decode_option): Allow -fansi-overloading.
d3192 4
a3195 1
Thu Aug  8 17:04:18 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3197 2
a3198 8
	* pt.c (get_bindings): New fn.
	(most_specialized): Likewise.
	(do_function_instantiation): Use them.
	(add_maybe_template): New fn.
	* cp-tree.h (DECL_MAYBE_TEMPLATE): New macro.
	* call.c (build_new_op): Handle guiding decls.
	(build_new_function_call): Likewise.
	* decl2.c (finish_file): Likewise.
d3200 2
a3201 6
	* decl2.c (mark_used): Do synthesis here.
	* call.c (build_method_call): Not here.
	(build_over_call): Or here.
	* typeck.c (build_function_call_real): Or here.
	* tree.c (bot_manip): Call mark_used on functions used in default
	args.
d3203 1
a3203 1
Thu Aug  8 17:48:16 1996  Michael Meissner  <meissner@@tiktok.cygnus.com>
d3205 1
a3205 2
	* decl2.c (import_export_vtable): Delete code that disabled vtable
	heuristic on systems with ASM_OUTPUT_EXTERNAL.
d3207 2
a3208 1
Wed Aug  7 12:44:11 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3210 2
a3211 2
	* typeck.c (build_x_function_call): Handle static call context
	better.
d3213 3
a3215 2
	* decl.c (finish_function): Set the DECL_CONTEXT of the result to
	the function, not its outer block.
d3217 2
a3218 3
	* call.c (build_field_call): Pass fields on to build_opfncall
	regardless of TYPE_OVERLOADS_CALL_EXPR.
	(build_method_call): Pass on to build_new_method_call sooner.
d3220 2
a3221 5
	* typeck.c (build_ptrmemfunc): Just return what instantiate_type
	gives us.
	* class.c (instantiate_type): Don't put a POINTER_TYPE to
	METHOD_TYPE on an expression.  Also make a copy of rhs instead of
	modifying it.
d3223 1
a3223 1
Tue Aug  6 12:58:46 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3225 4
a3228 5
	* call.c (compare_ics): Handle qual_conv after lvalue_conv.
	(add_builtin_candidate): Don't take enums for ++.
	(build_new_method_call): Handle non-aggregates and field calls.
	Move new overloading code from...
	* cvt.c: Here.
d3230 1
a3230 1
	* decl.c (grokparms): Don't check default args in templates.
d3232 1
a3232 1
Mon Aug  5 17:17:06 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3234 2
a3235 2
	* cvt.c (build_new_op): Fix args to build_unary_op.
	(add_builtin_candidates): Don't call type_promotes_to on float.
d3237 1
a3237 1
	* decl.c (grokparms): Check the type of the default arg.
d3239 2
a3240 2
	* cvt.c (build_new_op): Pass non-overloaded cases on rather than
	returning NULL_TREE.
d3242 1
a3242 6
	* typeck.c (build_x_binary_op): Avoid doing extra work.
	(build_x_unary_op): Likewise.
	(build_x_conditional_expr): Likewise.
	* cvt.c (build_over_call): Return.
	(add_builtin_candidate): Fix MEMBER_REF.
	(build_new_op): Likewise.
d3244 1
a3244 1
Mon Aug  5 17:07:47 1996  Mike Stump  <mrs@@cygnus.com>
d3246 14
a3259 3
	* method.c (build_overload_name): Put bug fix into code but leave
	disabled for now so we can be bug compatible with older releases
	that do repeats incorrectly.  In the future, we can enable it.
d3261 1
a3261 1
Mon Aug  5 13:46:28 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3263 1
a3263 1
	* cvt.c (convert_like): Don't call build_cplus_new twice.
d3265 2
a3266 2
	* call.c, cp-tree.h, cvt.c, decl2.c, init.c, method.c, pt.c, typeck.c:
	Control new overloading code with -fansi-overloading.
d3268 5
a3272 1
Sun Aug  4 15:29:11 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3274 3
a3276 5
	* cvt.c (build_over_call): Call build_cplus_new.
	* call.c (build_method_call): Likewise.
	* typeck.c (build_function_call_real): Likewise.
	(build_conditional_expr): If both operands are TARGET_EXPRs, wrap
	the COND_EXPR in a TARGET_EXPR so they use the same slot.
d3278 2
a3279 4
	* cvt.c (build_up_reference): Propagate INDIRECT_BIND to 
	recursive calls.
	* typeck.c (complete_type): Propagate
	TYPE_NEEDS_{CONSTRUCTING,DESTRUCTOR}.
d3281 1
a3281 1
Sat Aug  3 14:05:07 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3283 7
a3289 2
	* cvt.c (joust): More ?: kludging.  Sigh.
	(build_over_call): Don't try to synthesize global fns.
d3291 1
a3291 1
	* search.c (lookup_conversions): Use binfo marking.
d3293 2
a3294 1
Sat Aug  3 12:33:42 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3296 1
a3296 2
	* search.c (build_mi_matrix): Use the correct value of cid
	when determining the new mi_size.
d3298 2
a3299 1
Sat Aug  3 01:27:41 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3301 4
a3304 7
	* cvt.c (add_builtin_candidates): Do consider type conversion ops
	for the first parms of += et al.
	(strip_top_quals): New fn.
	(reference_binding): Use it instead of TYPE_MAIN_VARIANT.
	(implicit_conversion): Likewise.
	(add_builtin_candidates): Be careful about arrays.
	(build_new_method_call): Handle vtable optimization.
d3306 2
a3307 1
Fri Aug  2 01:26:59 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3309 1
a3309 4
	* cp-tree.h (LOOKUP_NO_TEMP_BIND): New flag.
	* cvt.c (reference_binding): Use it.
	(implicit_conversion): Use it.
	(add_builtin_candidate, COND_EXPR): Use it.
d3311 1
a3311 1
	* cvt.c (build_new_function_call): Check for error args.
d3313 3
a3315 1
	* typeck.c (comptypes): Just check DERIVED_FROM_P, not UNIQUELY.
d3317 1
a3317 13
	* gxx.gperf: Add __null.
	* hash.h: Regenerate.
	* lex.h: Add RID_NULL.
	* lex.c (init_lex): Create null_pointer_node here, stick it in
	RID_NULL.
	* decl.c (init_decl_processing): Still set its type here.
	* cvt.c (cp_convert_to_pointer): Don't produce null_pointer_node.
	(convert_to_pointer_force): Likewise.
	(null_ptr_cst_p): Check for null_pointer_node; only accept (void*)0
	if (! pedantic).
	* call.c (convert_harshness): Use null_ptr_cst_p.
	* typeck.c (convert_for_assignment): Likewise.  Don't produce
	null_pointer_node.
d3319 2
a3320 7
	* error.c (args_as_string): Handle lists of actual args, too.
	* cvt.c (null_ptr_cst): Support (void*)0 for now.
	(build_user_type_conversion_1): Improve diagnostics.
	(build_new_function_call): Likewise.
	(build_object_call): Likewise.
	(build_new_method_call): Likewise.  Move call before def diagnostic...
	(build_over_call): Here.
d3322 1
a3322 4
	* cvt.c (build_new_method_call): Don't complain about no match if
	LOOKUP_SPECULATIVELY.
	(build_over_call): Fix 'this' for virtual fn.
	(build_new_method_call): Add diagnostic.
d3324 6
a3329 1
Thu Aug  1 16:45:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3331 1
a3331 11
	* cvt.c (add_function_candidate): Expect 'this' and 'in_chrg' for
	constructors to be passed in.
	(build_over_call): Likewise.
	(build_user_type_conversion_1): Pass them in.
	(convert_like): Likewise.
	(build_object_call): Handle overloaded conversions.
	(build_over_call): Pass the right args to build_vfn_ref.
	(standard_conversion): Fix pmf convs.
	(joust): Handle comparing statics and non-statics.
	(build_new_method_call): New fn.
	* call.c (build_method_call): Call it if NEW_OVER.
d3333 2
a3334 1
Thu Aug  1 16:06:14 1996  Mike Stump  <mrs@@cygnus.com>
d3336 4
a3339 2
	* lex.c (do_identifier): Don't use %O on IDENTIFIER_OPNAME_Ps, use
	%D instead.
d3341 8
a3348 1
Thu Aug  1 15:24:02 1996  Mike Stump  <mrs@@cygnus.com>
d3350 2
a3351 3
	* except.c (expand_throw): Use maybe_build_cleanup_and_delete
	instead of just maybe_build_cleanup so that we deallocate the
	thrown object.
d3353 1
a3353 1
Thu Aug  1 15:18:00 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d3355 5
a3359 2
	* decl2.c (finish_prevtable_vardecl): Make non-static for pt.c's use.
	* cp-tree.h (finish_prevtable_vardecl): Add decl.
d3361 2
a3362 1
Thu Aug  1 11:53:51 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3364 4
a3367 3
	* pt.c (instantiate_class_template): Call complete_type. Also, if
	we're at the end of the file and we just instantiated a template
	class with a vtable, call finish_prevtable_vardecl.
d3369 1
a3369 3
	* error.c (dump_decl): Don't explode (or explode more gracefully
	as appropriate) if the object being dumped has a null type.
	(dump_expr): Likewise.
d3371 2
a3372 5
	* search.c (build_mi_matrix): Ensure that mi_size is large enough,
	by counting the number of nodes that we'll need before allocating
	the array.
	(lookup_fnfields): Fix comment.
	(breadth_first_search): Fix comment.
d3374 1
a3374 1
Wed Jul 31 09:57:05 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3376 5
a3380 5
	* pt.c (instantiate_class_template): Propagate TYPE_PACKED and
	TYPE_ALIGN.
	* class.c (finish_struct): Call cplus_decl_attributes here.
	(finish_struct_1): Not here.
	* cp-tree.h: Adjust.
d3382 2
a3383 3
	* pt.c (type_unification): New parameter STRICT.
	(unify): If STRICT, don't allow cv addition or base deduction.
	* call.c, class.c, cvt.c, cp-tree.h: Adjust.
d3385 2
a3386 1
Tue Jul 30 13:06:13 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3388 2
a3389 7
	* search.c (get_template_base{_recursive}): New fns.
	* pt.c (more_specialized): New fn.
	(do_function_instantiation): Use it.
	(unify): Handle base deduction.
	* cvt.c (joust): Use more_specialized.
	Don't arbitrarily choose between non-builtin candidates.
	(build_over_call): Call require_complete_type.
d3391 1
a3391 2
	* decl.c (start_function): Statics are static even in a #pragma
	interface file.
d3393 1
a3393 2
	* decl2.c (import_export_vtable): Disable vtable heuristic on
	systems with ASM_OUTPUT_EXTERNAL.
d3395 1
a3395 2
	* cvt.c (compare_ics): Fix comparison of PMEM_CONV and BASE_CONV.
	(standard_conversion): No std conv to enum type.
d3397 1
a3397 2
	* cvt.c (standard_conversion): Fix order of args to DERIVED_FROM_P
	for ptm's.
d3399 4
a3402 2
	* cvt.c (reference_binding): Bind directly to a base subobject of
	a class rvalue.
d3404 4
a3407 1
	* cvt.c (build_new_op): Enforce access control.
d3409 1
a3409 1
Tue Jul 30 09:22:53 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3411 3
a3413 2
	* typeck2.c (process_init_constructor): When scanning the
	union for a named field, skip things that aren't FIELD_DECLs.
d3415 2
a3416 3
	* method.c (synthesize_method): Don't scan fndecl's rtl if
	we're at the end of the file; just assume the function can't
	be inlined.
d3418 1
a3418 1
Mon Jul 29 15:48:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3420 1
a3420 2
	* cvt.c (build_builtin_candidate): Stick a dummy conversion in if
	it failed.
d3422 1
a3422 2
	* cvt.c (build_user_type_conversion_1): Handle overloaded
	conversion ops.
d3424 2
a3425 2
	* cvt.c (add_builtin_candidates): Don't consider type conversion
	operators for the first parameter of operator=.
d3427 1
a3427 1
Mon Jul 29 15:33:55 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3429 3
a3431 2
	* typeck.c (complete_type): Only call layout_type if we're not
	expanding a template.
d3433 3
a3435 1
Mon Jul 29 14:40:38 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3437 5
a3441 1
	* cvt.c (compare_ics): Oops.
d3443 2
a3444 1
	* cvt.c (op_error): Oops.
d3446 6
a3451 9
	* cp-tree.def: Add RVALUE_CONV, rename EXACT_CONV to IDENTITY_CONV.
	* cvt.c: Add IDENTITY_RANK before others.  Use real_lvalue_p.
	(build_conv): Use them.
	(implicit_conversion): Use them.
	(convert_like): Handle them.
	(build_new_op): Handle builtin COND_EXPR again.
	(add_builtin_candidates): Strip cv-quals.  Fix oops.  Include enums
	in lists of types for COND_EXPR.
	(add_builtin_candidate): Add enum candidates for COND_EXPR.
d3453 1
a3453 1
Mon Jul 29 12:05:40 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3455 1
a3455 3
	* typeck.c (build_modify_expr): Always attempt to build a call to
	the assignment operator, even if we're using a default one.
	(convert_for_initialization): Call complete_type.
d3457 1
a3457 1
Mon Jul 29 11:25:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3459 1
a3459 7
	* cvt.c (reference_binding): A REF_BIND gets the reference type.
	(implicit_conversion): Likewise.
	(convert_like): Likewise.
	(compare_ics): Likewise.
	(compare_qual): Likewise.
	(print_z_candidates): Handle no candidates.
	(build_new_op): Don't handle builtin COND_EXPR for now.
d3461 1
a3461 1
Sat Jul 27 11:27:47 1996  Stan Shebs  <shebs@@andros.cygnus.com>
d3463 2
a3464 1
	* cvt.c (build_builtin_candidate): Init local var in an ANSI way.
d3466 1
a3466 1
Fri Jul 26 01:07:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3468 7
a3474 1
	* cvt.c (joust): If the candidates are the same, arbitrarily pick one.
d3476 1
a3476 2
	* cvt.c (build_builtin_candidate): Oops.
	(build_new_op): Oops.
d3478 2
a3479 7
	* method.c (build_opfncall): Pass COND_EXPR on.
	* cvt.c (build_builtin_candidate): Reorganize, support COND_EXPR.
	(add_builtin_candidate{,s}): Likewise.
	(add_builtin_candidates): Likewise.
	(print_z_candidates, op_error, build_new_op): Likewise.
	(type_decays_to): New fn.
	* lex.c (init_lex): Just say ?: for COND_EXPR.
d3481 1
a3481 1
Thu Jul 25 09:33:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3483 3
a3485 2
	* typeck.c (complete_type): Call layout_type rather than building
	a new array type.
d3487 1
a3487 2
	* cvt.c (add_builtin_candidate): Pointer arithmetic candidates
	only use ptrdiff_t.
d3489 2
a3490 1
Wed Jul 24 12:45:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3492 1
a3492 4
	* cvt.c: Always compile the new overloading code (but don't use it).
	(implicit_conversion): Add a BASE_CONV when converting to
	the same class type.
	(convert_like): Handle BASE_CONV.
d3494 2
a3495 1
Tue Jul 23 12:46:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3497 1
a3497 2
	* cvt.c (build_new_op): Support {MAX,MIN}_EXPR.
	(add_builtin_candidate): Likewise.
d3499 3
a3501 16
	NEW_OVER changes:
	* typeck.c (build_x_function_call): Try an operator function
	whenever we call an object of class type.
	* method.c (build_opfncall): Pass CALL_EXPRs through.
	* cvt.c (implicit_conversion): Do const-ref case first.
	(add_conv_candidate, build_object_call, op_error): New fns.
	(ptr_complete_ob, TYPE_PTROB_P): void is not an object type.
	({add,build}_builtin_candidate{,s}, print_z_candidates): Display 
	builtin candidates.
	(build_new_op): Handle CALL_EXPR.  Don't try to decay void.
	Fall back on preincrement handling.  Use op_error.  
	Handle warn_synth.
	(convert_like): Pass INDIRECT_BIND.  Don't try to do anything with 
	an error_mark_node.
	(build_over_call): Handle PROMOTE_PROTOTYPES and ellipsis promotions
	properly.
d3503 1
a3503 1
Mon Jul 22 16:21:55 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3505 2
a3506 1
	* pt.c (tsubst_expr): Handle CONTINUE_STMT.
d3508 1
a3508 1
Mon Jul 22 15:38:58 1996  Mike Stump  <mrs@@cygnus.com>
d3510 3
a3512 2
	* typeck.c (build_component_ref_1): Use build_component_ref
	instead of open coding it here.
d3514 1
a3514 1
Mon Jul 22 12:18:54 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3516 2
a3517 1
	* g++.c (main): Don't link with -lg++.
d3519 1
a3519 19
	NEW_OVER changes:
	* cvt.c (convert_to_reference): Don't use convert_from_refeence on
	result of build_type_conversion.
	(cp_convert): Only call build_method_call for ctors if
	build_type_conversion failed.
	(ptr_complete_ob): New function.
	(TYPE_PTR{,OB,MEM}_P): New macros.
	({add,build}_builtin_candidate{,s}): New functions.
	(print_z_candidates): Handle builtins.
	(build_user_type_conversion_1): Don't use conversion fns for 
	converting to a base type.
	(build_user_type_conversion_1): Set ICS_USER_FLAG on AMBIG_CONVs.
	(build_user_type_conversion): Use convert_from_reference.
	(build_new_op): New function.
	(build_over_call): Fix handling of methods.
	(compare_ics): Handle AMBIG_CONV properly.
	* typeck2.c: Increment abort count.
	* method.c (build_opfncall): Forward most requests to build_new_op.
	* cp-tree.h (IS_OVERLOAD_TYPE): Tweak.
d3521 2
a3522 1
Fri Jul 19 17:59:29 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d3524 1
a3524 2
	* error.c (dump_expr, case CONSTRUCTOR, case CAST_EXPR): Take out
	invalid second argument to dump_expr_list.
d3526 2
a3527 1
Fri Jul 19 14:04:05 1996  Mike Stump  <mrs@@cygnus.com>
d3529 1
a3529 1
	* decl.c (lookup_name_real): Make sure we do obj->X::i correctly.
d3531 1
a3531 1
Thu Jul 18 14:48:23 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3533 1
a3533 2
	* decl2.c (import_export_vtable): ASM_OUTPUT_EXTERNAL, not
	ASSEMBLE_EXTERNAL.
d3535 1
a3535 1
Mon Jul 15 17:48:43 1996  Mike Stump  <mrs@@cygnus.com>
d3537 1
a3537 4
	* typeck2.c (process_init_constructor): New pedwarn for using { }
	to initialize a pointer to member function.
	* typeck.c (build_ptrmemfunc1): Avoid use of digest_init so that
	we can avoid the new error.
d3539 4
a3542 1
Mon Jul 15 15:42:03 1996  Mike Stump  <mrs@@cygnus.com>
d3544 1
a3544 2
	* typeck.c (build_ptrmemfunc1): New function to hide details of
	pointer to member functions better.
d3546 4
a3549 1
Mon Jul 15 14:23:02 1996  Mike Stump  <mrs@@cygnus.com>
d3551 1
a3551 3
	* init.c (resolve_offset_ref): Resolve OFFSET_REFs that are
	methods into the actual method, as we know the implied object is
	not used.
d3553 1
a3553 1
Mon Jul 15 13:08:29 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d3555 32
a3586 2
	* parse.y (maybecomma_warn): Only emit the pedwarn if we're not
	inside a system header.
d3588 1
a3588 1
Fri Jul 12 16:30:05 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3590 1
a3590 2
	* call.c (build_method_call): Call complete_type on the
	instance type.
d3592 1
a3592 1
Thu Jul 11 17:16:40 1996  Mike Stump  <mrs@@cygnus.com>
d3594 3
a3596 3
	* typeck.c (build_component_ref): Always build up an OFFSET_REF
	for obj_ptr->func so that we can know which object to use in a
	method call.
d3598 1
a3598 1
Wed Jul 10 19:36:37 1996  Mike Stump  <mrs@@cygnus.com>
d3600 2
a3601 2
	* typeck.c (build_ptrmemfunc): Remove sorry, now we can cast
	around things.  Also improve maintainability.
d3603 1
a3603 1
Wed Jul 10 18:20:11 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3605 2
a3606 2
	* decl.c (grokdeclarator): Check for overflow when evaluating an
	array dimension.
d3608 2
a3609 1
Wed Jul 10 17:26:19 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3611 2
a3612 2
	* cvt.c (cp_convert): Don't check for ambiguity with constructor
	if NEW_OVER.
d3614 1
a3614 23
	* typeck.c (build_x_function_call): Pass function overload
	questions to new overloading code if NEW_OVER.
	* init.c (expand_aggr_init_1): Only check for type conversion ops
	if we're doing copy-initialization (i.e. LOOKUP_ONLYCONVERTING).
	Don't check for ambiguity with constructor if NEW_OVER.
	* cvt.c (convert_to_reference): Dereference the result of a type
	conversion operator.
	(build_conv): Propagate ICS_USER_FLAG.
	(implicit_conversion): Call instantiate_type.
	Pass LOOKUP_ONLYCONVERTING instead of LOOKUP_NORMAL.
	(add_function_candidate): Fix cv-quals on argtype.
	(print_z_candidates): New function.
	(build_new_function_call): Call it.
	(build_user_type_conversion_1): If LOOKUP_ONLYCONVERTING, don't
	consider non-converting constructors.
	Call print_z_candidates.
	Return an AMBIG_CONV for an ambiguous conversion.
	(build_user_type_conversion): Handle AMBIG_CONV.
	(convert_like): Fix test for building TARGET_EXPR.
	Call instantiate_type.
	Handle AMBIG_CONV and LVALUE_CONV.
	(build_over_call): Handle 0 args and ellipsis.
	* cp-tree.def: Add AMBIG_CONV.
d3616 3
a3618 1
Tue Jul  9 17:48:48 1996  Mike Stump  <mrs@@cygnus.com>
d3620 1
a3620 2
	* decl.c (lookup_name_real): If we find mem in obj when parsing
	`obj->mem', make sure we return the right value.
d3622 2
a3623 1
Tue Jul  9 16:11:28 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3625 1
a3625 1
	* search.c (get_base_distance): Call complete_type.
d3627 2
a3628 1
Tue Jul  9 12:46:34 1996  Mike Stump  <mrs@@cygnus.com>
d3630 1
a3630 1
	* decl.c (store_bindings): Make static.
d3632 4
a3635 1
Mon Jul  8 16:42:31 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3637 1
a3637 2
	* init.c (expand_aggr_init_1): Don't check type conversions if
	NEW_OVER.
d3639 1
a3639 6
	* cvt.c (z_candidate): Put back template field.
	(add_function_candidate): Set it.
	(add_template_candidate): Likewise.
	(joust): Use it.
	(compare_qual): Handle references and pointers to members.
	(compare_ics): Handle reference bindings.
d3641 2
a3642 1
	* decl.c (duplicate_decls): Propagate DECL_ONE_ONLY.
d3644 1
a3644 1
Mon Jul  8 16:18:56 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3646 1
a3646 1
	* call.c (compute_conversion_costs): Call complete_type.
d3648 1
a3648 2
	* tree.c (vec_binfo_member): Use comptypes instead of comparing
	pointers, so we can handle template parameters.
d3650 1
a3650 1
Fri Jul  5 16:51:53 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3652 1
a3652 3
	* cvt.c (cp_convert_to_pointer): We have to call complete_type
	here; let's make it explicit instead of a side effect of an
	error check.
d3654 3
a3656 1
Wed Jul  3 16:29:51 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3658 1
a3658 11
	* cvt.c (z_candidate): Remove template field.
	(reference_binding): Handle binding to temporary.
	(implicit_conversion): Likewise.
	(add_function_candidate): Handle artificial constructor parms.
	Handle functions with too few parms.
	(add_template_candidate): New function.
	(build_user_type_conversion_1): Handle constructors.
	(convert_like): Likewise.
	(build_over_call): Likewise.
	(build_new_function_call): Support templates.
	(compare_ics): Fix reference, inheritance handling.
d3660 7
a3666 1
Mon Jul  1 22:58:18 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3668 1
a3668 4
	* decl.c: Add signed_size_zero_node.
	(init_decl_processing): Build it.
	* class.c (prepare_fresh_vtable): Use it instead of size_zero_node
	when we're trying to make a negative delta.
d3670 3
a3672 1
Mon Jul  1 17:56:19 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d3674 5
a3678 16
	Stop doing this damn index==strchr variable name confusion.
	* class.c (add_virtual_function): Change local var INDEX to be
	named IDX.
	(add_method): Likewise.
	* lex.c (print_parse_statistics): Likewise.
	* search.c (make_memoized_table_entry): Likewise.
	(lookup_fnfields_here): Likewise.
	(lookup_field): Likewise.
	(lookup_fnfields): Likewise.
	(get_baselinks): Likewise.
	* sig.c (build_signature_table_constructor): Likewise.
	(build_signature_method_call): Likewise.
	* typeck.c (build_x_array_ref): Change INDEX parm to be named IDX.
	(get_member_function_from_ptrfunc): Likewise.
	(build_ptrmemfunc): Change local var INDEX to be IDX.
	(c_expand_start_case): Likewise.
d3680 8
a3687 1
Sat Jun 29 14:05:46 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3689 2
a3690 9
	* cvt.c (cp_convert_to_pointer): Move user-defined type conversion
	handling to before extraction of TYPE_PTRMEMFUNC_FN_TYPE.
	(convert_to_reference): Use build_type_conversion to convert to
	the reference type directly.
	(standard_conversion): Fix void* case, non-conversions.
	(reference_binding): Fix expr == 0 case, non-conversions.
	(convert_like): Support REF_BIND.
	(compare_qual): Split out from compare_ics.
	(compare_ics): Use it, handle icses with only a qual_conv.
d3692 2
a3693 1
	* init.c (expand_vec_init): Don't crash if decl is NULL.
d3695 1
a3695 1
Fri Jun 28 11:52:51 1996  Stan Shebs  <shebs@@andros.cygnus.com>
d3697 5
a3701 2
	* mpw-config.in: New file, configury for Mac MPW.
	* mpw-make.sed: New file, makefile editing for MPW.
d3703 1
a3703 1
Thu Jun 27 15:18:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3705 2
a3706 1
	* pt.c (instantiate_class_template): Call repo_template_used.
d3708 1
a3708 2
	* search.c (lookup_conversions): Only lookup conversions in
	complete types.
d3710 2
a3711 1
Thu Jun 27 12:59:53 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d3713 1
a3713 4
	* cp-tree.def: Renamed from tree.def, to avoid confusion with
	gcc's tree.def.
	* cp-tree.h, lex.c: Include cp-tree.def.
	* Makefile.in (CXX_TREE_H): Reference cp-tree.def.
d3715 2
a3716 1
Wed Jun 26 18:29:47 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3718 1
a3718 1
	* init.c (build_vec_delete_1): Call complete_type.
d3720 2
a3721 1
Mon Jun 24 17:17:32 1996  Mike Stump  <mrs@@cygnus.com>
d3723 1
a3723 2
	* except.c (start_anon_func): Make sure anonymous functions are
	never external.
d3725 5
a3729 1
Fri Jun 21 15:10:58 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3731 2
a3732 1
	* decl.c (finish_function): If function_depth > 1, set nested.
d3734 2
a3735 2
	* decl2.c (grokbitfield): Revert Bob's change.
	* class.c (finish_struct_1): Fix handling of named bitfield widths.
d3737 1
a3737 1
Thu Jun 20 23:35:38 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3739 3
a3741 4
	* pt.c (add_pending_template): Handle types.
	(lookup_template_class): With -fexternal-templates, just add the class
	to pending_templates instead of instantiating it now.
	* decl2.c (finish_file): Handle types in pending_templates.
d3743 1
a3743 1
Thu Jun 20 14:08:40 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3745 11
a3755 3
	* decl2.c (grokbitfield): Handle constant decls appropriately.
	Give an appropriate error message now instead of spewing core
	later.
d3757 1
a3757 1
Thu Jun 20 13:01:51 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3759 2
a3760 1
	* decl2.c: Don't turn on thunks by default for now.
d3762 1
a3762 1
Wed Jun 19 11:37:04 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3764 2
a3765 2
	* typeck.c (complete_type): Handle error_mark_node.
	(common_type, OFFSET_TYPE): Handle template_type_parms.
d3767 1
a3767 1
Tue Jun 18 10:02:15 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3769 2
a3770 2
	* pt.c (instantiate_decl): If at_eof, call import_export_decl
	regardless of DECL_INLINE.
d3772 1
a3772 1
	* typeck.c (mark_addressable): Set TREE_ADDRESSABLE on CONSTRUCTORs.
d3774 6
a3779 1
	* class.c (finish_struct_bits): Copy TYPE_SIZE.
d3781 1
a3781 4
	* rtti.c (build_dynamic_cast): Support templates.
	* tree.def: Support DYNAMIC_CAST_EXPR.
	* pt.c (tsubst_copy): Likewise.
	* decl2.c (build_expr_from_tree): Likewise.
d3783 2
a3784 1
Mon Jun 17 15:23:36 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3786 1
a3786 5
	* typeck.c (build_static_cast): Support templates.
	(build_const_cast): Likewise.
	* tree.def: Support CONST/STATIC_CAST_EXPR.
	* pt.c (tsubst_copy): Likewise.
	* decl2.c (build_expr_from_tree): Likewise.
d3788 1
a3788 1
Sun Jun 16 12:33:57 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3790 1
a3790 2
	* decl2.c (finish_vtable_vardecl): Don't trust
	TREE_SYMBOL_REFERENCED for vtables of local classes.
d3792 2
a3793 1
Fri Jun 14 18:13:36 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3795 1
a3795 1
	* pt.c (tsubst_copy): Handle operator T.
d3797 5
a3801 1
Wed Jun 12 17:52:40 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d3803 1
a3803 2
	* init.c (build_delete): Move creation of PARMS inside test of
	TYPE_HAS_DESTRUCTOR, since it's never used outside of that block.
d3805 8
a3812 1
Tue Jun 11 15:09:18 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3814 1
a3814 2
	* typeck.c (build_conditional_expr): Don't assume that
	the arguments to ?: are always pointers or records.
d3816 1
a3816 1
Tue Jun 11 13:56:23 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3818 1
a3818 2
	* decl2.c (import_export_decl): Still emit static/weak/comdat
	copies of inline template functions with -fno-implicit-templates.
d3820 2
a3821 1
Tue Jun 11 11:42:13 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3823 1
a3823 2
	* init.c (build_delete): Determine the complete basetype
	path to the destructor we're calling.
d3825 2
a3826 1
Fri Jun  7 15:30:10 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3828 1
a3828 5
	* decl.c (build_enumerator): Always copy the INTEGER_CST used to
	initialize the enum, because we really and truly don't know where
	it came from.
	(start_enum): Don't copy integer_zero_node because
	build_enumerator will do it.
d3830 5
a3834 1
Fri Jun  7 11:11:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3836 1
a3836 1
	* decl.c (finish_function): Do access control on base destructors.
d3838 2
a3839 3
	* pt.c (tsubst, case FUNCTION_DECL): Set up
	IDENTIFIER_GLOBAL_VALUE for member functions so pushdecl doesn't
	hose us.
d3841 1
a3841 1
Fri Jun  7 10:37:33 1996  Mike Stump  <mrs@@cygnus.com>
d3843 2
a3844 6
	* cvt.c (build_up_reference): If we have already extended the
	lifetime of the temporary, don't try it again.
	* typeck.c (c_expand_return): Don't try and convert the return
	value twice when we want a reference, once is enough.
	
Tue Jun  4 15:41:45 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3846 2
a3847 2
	* pt.c (tsubst_expr, case DECL_STMT): Don't pass
	LOOKUP_ONLYCONVERTING at all for now.
d3849 1
a3849 5
	* search.c (add_conversions): Put the conversion function in
	TREE_VALUE, the basetype in TREE_PURPOSE.
	* cvt.c (build_type_conversion): Adjust.
	* cvt.c (build_expr_type_conversion): Adjust.
	* call.c (user_harshness): Adjust.
d3851 2
a3852 1
Mon Jun  3 15:30:52 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3854 2
a3855 2
	* method.c (emit_thunk): Pretend this is a FUNCTION_DECL for the
	backend's benefit.
d3857 1
a3857 1
Mon Jun 10 18:58:19 1996  Mike Stump  <mrs@@cygnus.com>
d3859 7
a3865 2
	* except.c (expand_start_catch_block): Add a dummy region, if we
	get an error, so that we can avoid core dumping later.
d3867 1
a3867 1
Fri May 31 14:56:13 1996  Mike Stump  <mrs@@cygnus.com>
d3869 3
a3871 6
	* cp-tree.h (OFFSET_REF): Remove.
	* tree.def (CP_OFFSET_REF): Rename to OFFSET_REF.
	* expr.c (cplus_expand_expr): Cleanup callers of expand_expr.
	* init.c (expand_aggr_init_1): Likewise.
	(build_new): Likewise.
	* typeck.c (expand_target_expr): Likewise.
d3873 1
a3873 1
Fri May 31 14:22:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3875 4
a3878 2
	* typeck.c (build_modify_expr): Don't use TREE_VALUE on a
	TARGET_EXPR.
d3880 1
a3880 1
Wed May 29 17:04:33 1996  Mike Stump  <mrs@@cygnus.com>
d3882 1
a3882 4
	* cvt.c (build_up_reference): Redo how and when temporaries are
	created.
	* decl.c (grok_reference_init): Don't try and be smart about
	running cleanups.
d3884 1
a3884 1
Wed May 29 16:02:08 1996  Mike Stump  <mrs@@cygnus.com>
d3886 1
a3886 3
	* cvt.c (build_up_reference): Add NULL_TREE to all calls to build
	(TARGET_EXPR...), now that it has 4 arguments.
	* tree.c (build_cplus_new): Likewise.
d3888 1
a3888 1
Thu May 23 16:40:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3890 1
a3890 1
	* error.c (dump_expr, case CAST_EXPR): Handle T() properly.
d3892 1
a3892 6
	* pt.c (instantiate_decl): Don't call push/pop_cp_function_context.
	* decl.c (struct saved_scope): Remove named_labels,
	{base,member}_init_list.
	(maybe_push_to_top_level): Don't set them.  Call
	push_cp_function_context if appropriate.
	(pop_from_top_level): Likewise.
d3894 2
a3895 2
	* method.c (do_build_assign_ref): Remove obsolete check of
	TYPE_HAS_ASSIGN_REF (basetype).
d3897 1
a3897 2
	* decl.c (grokfndecl): Diagnose user definition of
	implicitly-declared methods.
d3899 2
a3900 1
Thu May 23 12:13:08 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3902 1
a3902 4
	* method.c (do_build_copy_constructor): Add code to give
	meaningful error messages instead of crashing.
	(do_build_assign_ref): Don't synthesize assignment operators for
	classes containing reference or const members.
d3904 4
a3907 7
	* class.c (struct base_info): Remove cant_synth_copy_ctor
	and cant_synth_asn_ref.
	(finish_base_struct): Remove the code that tries to conditionalize
	synthesis of copy constructors & assignment operators based on
	access permissions. Instead, let it fail when it tries to
	synthesize the copy constructor. This will give meaningful error
	messages instead of silently generating code to perform a bitcopy.
d3909 2
a3910 1
Wed May 22 11:45:19 1996  Bob Manson  <manson@@charmed.cygnus.com>
d3912 1
a3912 2
	* lex.c (real_yylex): Remove old-n-crufty #if 0 code for
	determining types for constant values.
d3914 6
a3919 14
	* decl.c (struct named_label_list): Use instead of stuffing
	random items into a TREE_LIST node.
	(named_label_uses): Use the new struct.
	(poplevel): Likewise.
	(lookup_label): Likewise.
	(define_label): Add an error message to tell the user the line
	where the goto is located in addition to the destination of the
	goto.
	(init_decl_processing): Use NULL instead of NULL_TREE to initialize
	named_label_uses.
	(finish_function): Likewise.
	
	(start_decl): Complain about defining a static data member
	in a different type from which it was declared.
d3921 1
a3921 1
Wed May 22 09:33:23 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3923 38
a3960 1
	* cvt.c (build_expr_type_conversion): Adjust.
d3962 1
a3962 1
Tue May 21 11:21:56 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3964 2
a3965 2
	* call.c (build_method_call): Always convert 'this' to the
	appropriate type.
d3967 1
a3967 4
	* search.c (add_conversions): Put the conversion function in
	TREE_VALUE, the type in TREE_PURPOSE.
	* cvt.c (build_type_conversion): Adjust.
	* call.c (user_harshness): Adjust.
d3969 7
a3975 2
	* method.c (emit_thunk): Call temporary_allocation and
	permanent_allocation around the ASM_OUTPUT_MI_THUNK case, too.
d3977 1
a3977 3
	* tree.c (build_cplus_array_type): Handle tweaking of
	TYPE_MAIN_VARIANT here.
	* typeck.c (common_type): Not here.
d3979 2
a3980 2
	* typeck.c (complete_type): Only try to complete an array type if
	it has a domain.
d3982 3
a3984 1
Mon May 20 14:55:59 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3986 3
a3988 2
	* decl.c (grokvardecl): Call complete_type.
	(grokdeclarator): Call complete_type for PARM_DECLs.
d3990 1
a3990 1
Fri May 17 16:41:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d3992 6
a3997 2
	* pt.c (instantiate_class_template): Re-set
	CLASSTYPE_GOT_SEMICOLON after calling finish_struct_1.
d3999 1
a3999 1
Fri May 17 14:56:55 1996  Mike Stump  <mrs@@cygnus.com>
d4001 1
a4001 8
	* cp-tree.h (cp_expand_decl_cleanup): Remove, the backend is now
	smart enough to do it right.
	* tree.c (cp_expand_decl_cleanup): Likewise.
	* decl.c (cp_finish_decl): Use expand_decl_cleanup instead of
	cp_expand_decl_cleanup.
	(store_parm_decls): Likewise.
	(hack_incomplete_structures): Likewise.
	* except.c (push_eh_cleanup): Likewise.
d4003 1
a4003 1
Fri May 17 13:13:51 1996  Mike Stump  <mrs@@cygnus.com>
d4005 2
a4006 7
	* expr.c (expand_expr, cond UNSAVE_EXPR): Move from the C++
	frontend to the backend where it belongs.
	* tree.c (unsave_expr): Likewise.
	(unsave_expr_now): Likewise.
	* tree.def (UNSAVE_EXPR): Likewise.
	* cp-tree.h (unsave_expr): Likewise.
	(unsave_expr_now): Likewise.
d4008 1
a4008 1
Fri May 17 11:02:41 1996  Mike Stump  <mrs@@cygnus.com>
d4010 1
a4010 2
	* init.c (emit_base_init): Make sure the partial EH cleanups live
	on the function_obstack.
d4012 1
a4012 1
Thu May 16 15:29:33 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4014 2
a4015 2
	* expr.c (do_case): Don't try to dereference null TREE_TYPEs
	when checking for pointer types.
d4017 1
a4017 1
Thu May 16 13:38:58 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4019 3
a4021 2
	* pt.c (instantiate_class_template): Remove obsolete check for
	access declarations.
d4023 1
a4023 1
Thu May 16 13:34:15 1996  Mike Stump  <mrs@@cygnus.com>
d4025 2
a4026 6
	* call.c (build_overload_call): Simplify calls to
	build_overload_call by removing last parameter.
	(build_method_call): Likewise.
	* cp-tree.h: Likewise.
	* method.c (build_opfncall): Likewise.
	* typeck.c (build_x_function_call): Likewise.
d4028 1
a4028 1
Thu May 16 13:15:43 1996  Mike Stump  <mrs@@cygnus.com>
d4030 3
a4032 3
	* call.c (default_parm_conversions): Factor out common code.
	(build_method_call): Use it.
	(build_overload_call_real): Use it.
d4034 2
a4035 1
Wed May 15 14:46:14 1996  Mike Stump  <mrs@@cygnus.com>
d4037 2
a4038 22
	* call.c (build_method_call): Allow implicit & on METHOD_TYPEs,
	but pedwarn as the code is bogus.
	* typeck.c (decay_conversion): Likewise.
	(build_function_call_real): Use build_addr_func instead of
	default_conversion.  Don't allow pointer-to-method functions down
	here.
	(build_unary_op): Use real pointer-to-member functions instead of
	fake ones.
	(build_ptrmemfunc): Use build_addr_func instead of build_unary_op.
	(convert_for_assignment): Removed some obsolete code.
	* decl2.c (reparse_absdcl_as_expr): Pass current_class_ref to
	build_x_function_call instead of current_class_ptr.  Only call
	digest_init once on an initializer, we do this just checking
	TREE_TYPE.
	(build_expr_from_tree): Pass current_class_ref to
	build_x_function_call instead of current_class_ptr.
	* init.c (build_member_call): Likewise.
	* pase.y: Likewise.
	* error.c (dump_expr): Handle OFFSET_REFs better.
	* pt.c (unify): Handle pointer-to-member functions better.
	* decl.c (finish_function): Clear out current_class_ref just like
	we do for current_class_ptr.
d4040 2
a4041 1
	* typeck.c (get_delta_difference): Handle virtual bases better.
d4043 2
a4044 1
Tue May 14 16:37:37 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4046 1
a4046 4
	* sig.c (build_signature_table_constructor): Use the delta for
	the original basetype for this virtual function with thunks.
	(build_signature_method_call): We still need to adjust 'this'
	with thunks.
d4048 1
a4048 1
Tue May 14 16:27:25 1996  Mike Stump  <mrs@@cygnus.com>
d4050 1
a4050 9
	* call.c (build_addr_func): New routine.  Used to get the `real'
	address of a function or a method.  Needed to avoid getting a
	pointer-to-member function.
	(build_call): New routine to build CALL_EXPRs.
	(build_method_call): Use it.
	* cvt.c (convert_to_aggr): Likewise.
	* typeck.c (build_function_call_real): Likewise.
	* sig.c (build_signature_table_constructor): Use build_addr_func.
	* cp-tree.h (build_call, build_addr_func): Declare them.
d4052 1
a4052 1
Tue May 14 12:47:47 1996  Mike Stump  <mrs@@cygnus.com>
d4054 2
a4055 2
	* cp-tree.h (LOOKUP_AGGR): Remove, unused.
	* parse.y: Remove uses of LOOKUP_AGGR.
d4057 3
a4059 1
Tue May 14 12:07:51 1996  Mike Stump  <mrs@@cygnus.com>
d4061 2
a4062 2
	* *.[chy]: Rename current_class_decl to current_class_ptr, and
	C_C_D to current_class_ref.
d4064 3
a4066 1
Mon May 13 16:55:23 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4068 1
a4068 1
	* call.c (convert_harshness): Tighten up pointer conversions.
d4070 4
a4073 1
Sat May 11 04:33:50 1996  Doug Evans  <dje@@canuck.cygnus.com>
d4075 1
a4075 2
	* decl2.c (finish_vtable_vardecl): Surround DECL_ONE_ONLY with ifdef.
	(finish_file): Likewise.
d4077 2
a4078 1
Fri May 10 11:09:57 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4080 2
a4081 1
	* cvt.c (convert_fn_ptr): We don't use thunks for pmfs.
d4083 1
a4083 2
	* method.c (emit_thunk): Set flag_omit_frame_pointer in default
	code.
d4085 2
a4086 1
Thu May  9 18:18:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4088 1
a4088 1
	* decl2.c: Turn on thunks by default where supported.
d4090 2
a4091 1
Tue May  7 20:39:57 1996  Mike Stump  <mrs@@cygnus.com>
d4093 1
a4093 6
	* cp-tree.h (build_overload_call_maybe): Removed.
	* call.c (build_overload_call_real): Invert meaning of last arg to
	be require_complete.
	(build_overload_call): Likewise.
	* typeck.c (build_x_function_call): Use build_overload_call_real
	instead of build_overload_call_maybe.
d4095 1
a4095 1
Mon May  6 01:23:32 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4097 1
a4097 2
	* decl2.c (finish_file): Don't try to emit functions that haven't
	been compiled.
d4099 5
a4103 1
Fri May  3 09:30:13 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4105 1
a4105 1
	* decl2.c (finish_vtable_vardecl): Oops.
d4107 3
a4109 3
	* decl.c (maybe_push_to_top_level): Do save previous_class_*.
	Also store the bindings from previous_class_values.
	(pop_from_top_level): Restore them.
d4111 2
a4112 1
Thu May  2 21:56:49 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4114 2
a4115 4
	* decl2.c (finish_vtable_vardecl): Only write out vtable if its
	symbol has been referenced.
	(finish_file): Re-join synthesis/vtable loop with inline emission
	loop, disable inlining when an inline is output.
d4117 2
a4118 1
Thu May  2 17:20:02 1996  Mike Stump  <mrs@@cygnus.com>
d4120 1
a4120 3
	* except.c (init_exception_processing): Setup saved_in_catch.
	(push_eh_cleanup): Reset __eh_in_catch.
	(expand_start_catch_block): Set __eh_in_catch.
d4122 4
a4125 1
Thu May  2 16:21:17 1996  Mike Stump  <mrs@@cygnus.com>
d4127 3
a4129 4
	* except.c (push_eh_cleanup): Add tracking for whether or not we
	have an active exception object.
	(expand_builtin_throw): Use it to make sure a rethrow without an
	exception object is caught.
d4131 1
a4131 1
Thu May  2 11:26:41 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4133 3
a4135 2
	* decl.c (maybe_push_to_top_level): Clear out class-level bindings
	cache.
d4137 1
a4137 1
Wed May  1 11:26:52 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4139 34
a4172 3
	* decl2.c (finish_file): Also use sentries for vars with
	DECL_ONE_ONLY or DECL_WEAK set (should any such happen to be
	created).
d4174 4
a4177 2
	* lex.c (handle_cp_pragma): Disable #pragma
	interface/implementation if SUPPORTS_ONE_ONLY > 1.
d4179 1
a4179 1
Tue Apr 30 11:25:46 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4181 2
a4182 2
	* method.c (emit_thunk): Wrap default case in
	temporary/permanent_allocation.
d4184 2
a4185 2
	* method.c (make_thunk): Use DECL_ONE_ONLY.
	(emit_thunk): Call assemble_end_function.
d4187 1
a4187 1
Mon Apr 29 15:38:29 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4189 2
a4190 4
	* decl2.c (import_export_vtable): Use DECL_ONE_ONLY.
	(import_export_decl): Likewise.
	(finish_prevtable_vardecl): Disable vtable hack if
	SUPPORTS_ONE_ONLY > 1.
d4192 2
a4193 1
Mon Apr 29 14:32:47 1996  Mike Stump  <mrs@@cygnus.com>
d4195 1
a4195 2
	* typeck.c (build_modify_expr): PREINCREMENT_EXPR and
	PREDECREMENT_EXPRs take two arguments, not one.
d4197 1
a4197 1
Mon Apr 29 00:27:53 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4199 2
a4200 2
	* class.c (build_vtable_entry): Don't build thunks for abstract
	virtuals.
d4202 2
a4203 2
	* lex.c (real_yylex): Fix handling of __PRETTY_FUNCTION__ like C
	frontend.
d4205 1
a4205 1
Sat Apr 27 16:45:35 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4207 1
a4207 2
	* class.c (set_rtti_entry): Use size_zero_node.
	(build_vtable): Likewise.
d4209 1
a4209 1
Sat Apr 27 14:48:57 1996  Jason Merrill  <jason@@phydeaux.cygnus.com>
d4211 1
a4211 2
	* class.c (finish_struct_1): Pass size_zero_node to set_rtti_entry.
	(prepare_fresh_vtable): Likewise.
d4213 1
a4213 1
Fri Apr 26 13:14:14 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4215 2
a4216 1
	* method.c (emit_thunk): Call mark_used on the target function.
d4218 3
a4220 1
	* call.c (build_method_call): Don't warn about pending templates.
d4222 2
a4223 1
Thu Apr 25 14:55:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4225 2
a4226 1
	* decl2.c (finish_file): Fix list walking logic.
d4228 1
a4228 1
	* typeck2.c (check_for_new_type): Only warn if -pedantic.
d4230 1
a4230 1
Wed Apr 24 15:41:15 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4232 3
a4234 13
	* class.c (finish_struct_1): Remove old code for
	dont_allow_type_definitions.
	* cp-tree.h: Likewise.
	* spew.c: Make sure cp-tree.h is included before parse.h, so the
	definition of flagged_type_tree is found before it is used.
	* lex.c: Likewise.
	* parse.y: Added the ftype member to the type union, and changed a
	number of rules to use it instead of ttype. Added calls to
	check_for_new_type() as appropriate.
	* typeck2.c (check_for_new_type): New function for checking
	if a newly defined type appears in the specified tree.
	* cp-tree.h: Add new type flagged_type_tree. Add a prototype
	for check_for_new_type().
d4236 1
a4236 1
Wed Apr 24 00:36:21 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4238 2
a4239 1
	* decl2.c (finish_file): Only use a sentry if the decl is public.
d4241 1
a4241 2
	* pt.c (tsubst_expr, DECL_STMT): If we don't have an initializer,
	don't pass LOOKUP_ONLYCONVERTING.
d4243 28
a4270 1
Tue Apr 23 17:18:47 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4272 1
a4272 2
	* typeck.c (common_type): Fix the ARRAY_TYPE case so it
	properly keeps track of const and volatile type modifiers.
d4274 2
a4275 1
Tue Apr 23 10:52:56 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4277 1
a4277 2
	* tree.c (cp_tree_equal): C++ version of simple_cst_equal.
	* pt.c (comp_template_args): Use it.
d4279 2
a4280 2
	* rtti.c (get_tinfo_fn, build_dynamic_cast, expand_*_desc): Call
	assemble_external for artificial function decls.
d4282 2
a4283 1
	* decl.c (cp_finish_decl): Oops.
d4285 1
a4285 1
Mon Apr 22 17:28:27 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4287 2
a4288 11
	* decl2.c (import_export_decl): Put static data member templates
	into common storage, or make them weak, depending on whether they
	are dynamically or statically initialized.
	(get_sentry): New function.
	(finish_file): Do import_export_decl for static data members before
	building the init/fini functions.  Don't init/fini a variable that's
	EXTERNAL.  Use a sentry for variables in common.  Fix mismatching
	push/pop_temp_slots.
	* decl.c (cp_finish_decl): If DECL_NOT_REALLY_EXTERN, do the
	expand_static_init thang.
	* method.c (get_id_2): New function.
d4290 1
a4290 1
Mon Apr 22 15:32:45 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4292 1
a4292 2
	* parse.y (empty_parms): Make sure we use C++-style prototypes
	when we're declaring member functions.
d4294 1
a4294 1
Sun Apr 21 10:08:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4296 2
a4297 2
	* Makefile.in (CONFLICTS): 16 s/r conflicts.
	* parse.y (self_template_type): New nonterminal.
d4299 1
a4299 1
Thu Apr 18 08:56:54 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4301 2
a4302 3
	* decl.c (make_typename_type): Handle getting a TYPE_DECL for a
	name.
	* parse.y (base_class.1): Allow 'typename foo::bar'.
d4304 1
a4304 6
	* lex.c (check_newline): Remove #pragma code that plays with the
	input stream, since we now deal with tokens.  Clear nextchar when
	we're done.
	(handle_cp_pragma): Use real_yylex.
	(handle_sysv_pragma): Don't do skipline here.  Only call real_yylex
	in one place.
d4306 2
a4307 1
	* lex.c (check_for_missing_semicolon): Handle SELFNAME.
d4309 1
a4309 1
	* lex.c (handle_cp_pragma): Fix "#pragma implementation".
d4311 8
a4318 1
Wed Apr 17 16:51:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4320 1
a4320 3
	* parse.y: New token SELFNAME for potential constructor.
	* spew.c (yylex): Handle it.
	* lex.c (identifier_type): Produce it.
d4322 1
a4322 2
	* parse.y (complete_type_name): In :: case, don't push class binding.
	(complex_type_name): Likewise.
d4324 2
a4325 1
Wed Apr 17 15:02:40 1996  Mike Stump  <mrs@@cygnus.com>
d4327 1
a4327 2
	* typeck.c (build_reinterpret_cast): Handle pointer to member
	functions.
d4329 2
a4330 1
Wed Apr 17 12:28:26 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d4332 3
a4334 6
	* lex.c (handle_cp_pragma): New function, with decl, doing the cc1plus
	pragmas.
	(check_newline): Put the vtable/unit/implementation/interface pragma
	code into handle_cp_pragma, replacing it with a call.
	(handle_sysv_pragma): Give int return type, and take FINPUT and TOKEN
	args.  Get the next token after handling the pragma token.
d4336 1
a4336 1
Wed Apr 17 10:28:34 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4338 2
a4339 2
	* cvt.c (cp_convert_to_pointer): Avoid doing base analysis on pmfs.
	(convert_to_pointer_force): Likewise.
d4341 2
a4342 1
	* init.c (build_new): Fix array new without -fcheck-new.
d4344 2
a4345 1
Tue Apr 16 13:44:58 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4347 2
a4348 2
	* cp-tree.h, call.c, class.c, decl.c, parse.y, pt.c, rtti.c,
	tree.c: Lose TYPE_NESTED_NAME.
d4350 1
a4350 2
	* parse.y (nested_name_specifier_1): Don't treat non-identifiers
	as identifiers.
d4352 1
a4352 4
	* tree.def: Add VEC_INIT_EXPR.
	* expr.c (cplus_expand_expr): Handle it.
	* init.c (build_new): Use it instead of the RTL_EXPR nastiness and
	the extra file-scope symbol nastiness.
d4354 1
a4354 1
Mon Apr 15 16:21:29 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4356 2
a4357 2
	* method.c (make_thunk): Thunks are static.
	(emit_thunk): Use ASM_OUTPUT_MI_THUNK if it's defined.
d4359 3
a4361 2
	* decl2.c (mark_vtable_entries): Emit thunks as needed.
	(finish_file): Don't emit them here.
d4363 1
a4363 1
Sun Apr 14 11:34:39 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4365 4
a4368 2
	* rtti.c (build_dynamic_cast): Handle null pointers.
	(ifnonnull): New function.
d4370 2
a4371 1
Fri Apr 12 09:08:27 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4373 1
a4373 4
	* call.c (build_method_call): Remember the original basetype we
	were called with. Give an error message instead of trying
	(incorrectly) to call a non-static member function through a
	non-inherited class.
d4375 1
a4375 2
	* search.c (expand_upcast_fixups): Mark the new fixup as
	DECL_ARTIFICIAL.
d4377 3
a4379 1
Thu Apr 11 03:57:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4381 1
a4381 1
	* init.c (build_new): Use a TARGET_EXPR for alloc_expr.
d4383 2
a4384 1
	* class.c (set_rtti_entry): Fix for thunks.
d4386 1
a4386 2
	* decl2.c (import_export_decl): Still emit typeinfo fns for
	cv-variants of builtin types.
d4388 3
a4390 2
	* rtti.c (expand_class_desc): Set up base_info_type_node here.
	(init_rtti_processing): Instead of here.
d4392 3
a4394 1
Wed Apr 10 14:17:13 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4396 2
a4397 3
	* rtti.c (init_rtti_processing): Do init regardless of -frtti.
	(build_typeid): Only complain about taking dynamic typeid without
	-frtti.
d4399 1
a4399 1
	* decl2.c: flag_rtti defaults to 1.
d4401 2
a4402 3
	* rtti.c (get_tinfo_var): The general class case is now smaller.
	(init_rtti_processing): Pack the latter three fields of base_info
	into 32 bits.
d4404 1
a4404 1
Wed Apr 10 13:50:14 1996  Mike Stump  <mrs@@cygnus.com>
d4406 2
a4407 1
	* init.c (expand_member_init): Don't dump if name is NULL_TREE.
d4409 1
a4409 1
Wed Apr 10 12:56:02 1996  Mike Stump  <mrs@@cygnus.com>
d4411 2
a4412 5
	* search.c (make_memoized_table_entry): Undefer the pop, if necessary.
	(push_memoized_context): Split out code to undefer pop_type_level to
	(clear_memoized_cache): here.
	(pop_memoized_context): We can only handle one layer of deferral of
	pop_type_level so clear the cache, if there was a previous level.
d4414 1
a4414 1
Tue Apr  9 23:06:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4416 4
a4419 3
	* rtti.c (init_rtti_processing): Build up base_info_type_node.
	(expand_class_desc): Use one pointer to an array of base_info
	structs, passed using a CONSTRUCTOR.
d4421 2
a4422 1
Tue Apr  9 14:20:57 1996  Mike Stump  <mrs@@cygnus.com>
d4424 1
a4424 24
	* class.c (build_vbase_path): Remove block extern for
	flag_assume_nonnull_objects here.
	(build_vfn_ref): Split out functionality into build_vtbl_ref.
	(build_vtbl_ref): New routine.
	(build_vtable): Set up rtti info here.
	(add_virtual_function): Note in CLASSTYPE_RTTI the best
	place where we can get the rtti pointers from to avoid having to
	search around for a place.
	(finish_base_struct): Likewise.
	(finish_struct_1): Likewise.  Never create totally new vtables
	with totally new vtable pointers for rtti.  Disable code to layout
	vtable pointers better until we want to break binary
	compatibility.
	* rtti.c (build_headof_sub): New routine to convert down to a
	sub-object that has an rtti pointer in the vtable.
	(build_headof): Use it.  Also, use build_vtbl_ref now to be more
	maintainable.
	(build_dynamic_cast): Make sure we have saved it, if we need to.
	* search.c (dfs_init_vbase_pointers): Disable code that deals with
	a more efficient vtable layout, enable later.
	* call.c (flag_assume_nonnull_objects): Moved declaration to
	* cp-tree.h: here.  Declare build_vtbl_ref.
	* pt.c (instantiate_class_template): Use NULL_TREE instead of 0 in
	function calls that want a tree.
d4426 2
a4427 1
Tue Apr  9 12:10:26 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4429 2
a4430 2
	* rtti.c (build_dynamic_cast): Handle downcasting to X* given
	other X subobjects in the most derived type.  Ack.
d4432 1
a4432 9
	* rtti.c (build_dynamic_cast): No need to strip cv-quals here,
	get_typeid will do it for us.
	(get_typeid_1): Break out call-building for expand_*_desc to use.
	(get_typeid): Call it.
	(expand_*_desc): Likewise.
	* decl.c (init_decl_processing): Don't set TYPE_BUILT_IN on char *
	and void *.
	(init_decl_processing): Lose builtin_type_tdescs lossage.
	* decl2.c (finish_vtable_vardecl): Remove obsolete code.
d4434 2
a4435 1
Mon Apr  8 17:23:23 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4437 3
a4439 3
	* pt.c (tsubst): When calling set_nested_typename, use
	TYPE_NESTED_NAME (current_class_type) instead of
	current_class_name.
d4441 1
a4441 4
	* decl.c (pushdecl): Likewise.
	(pushdecl_class_level): Likewise.
	(grokdeclarator): Use NULL_TREE instead of 0 in the call to
	set_nested_typename.
d4443 4
a4446 1
Sun Apr  7 10:44:31 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4448 5
a4452 1
	* rtti.c (synthesize_tinfo_fn): Handle arrays.
d4454 1
a4454 1
	* cp-tree.h (DECL_REALLY_EXTERN): New macro.
d4456 3
a4458 1
Sat Apr  6 13:56:27 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4460 1
a4460 3
	* rtti.c (throw_bad_cast): Use entry point __throw_bad_cast.
	(init_rtti_processing): Lose bad_cast_type.
	(build_dynamic_cast): Use throw_bad_cast.
d4462 2
a4463 1
	* rtti.c (synthesize_tinfo_fn): Handle enums and pmfs.
d4465 1
a4465 2
	* decl2.c (finish_file): Don't synthesize artificial functions
	that are external and not inline.
d4467 4
a4470 1
	* rtti.c (get_tinfo_fn): If at_eof, call import_export_decl.
d4472 1
a4472 2
	* decl2.c (finish_file): Handle having new inlines added to
	saved_inlines by synthesis.
d4474 2
a4475 1
	* rtti.c (get_bad_cast_node): Don't require <typeinfo>.
d4477 2
a4478 1
Fri Apr  5 17:02:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4480 2
a4481 24
	RTTI rewrite to initialize nodes as needed, not require that
	users #include <typeinfo>, complete functionality and reduce wasted 
	space.
	* rtti.c (init_rtti_processing): New fn.
	(build_typeid): The vtable entry is now a function.
	(get_tinfo_var): New fn.
	(get_tinfo_fn): Likewise.
	(get_typeid): Use it.
	(build_dynamic_cast): Declare and use entry point __dynamic_cast.
	(build_*_desc): Rename to expand_*_desc and rewrite to use entry
	points __rtti_*.
	(add_uninstantiated_desc, get_def_to_follow, build_t_desc): Lose.
	(synthesize_tinfo_fn): New fn.
	* method.c (build_t_desc_overload): Lose.
	(build_overload_with_type): More generic.
	* decl.c (init_decl_processing): Call init_rtti_processing.
	* class.c (set_rtti_entry): Use get_tinfo_fn.
	* decl2.c (mark_vtable_entries): Mark the rtti function.
	(finish_prevtable_vardecl): Don't build_t_desc.
	(import_export_decl): Handle tinfo functions.
	(finish_file): Likewise.
	* typeck.c (inline_conversion): New fn.
	(build_function_call_real): Use it.
	* cp-tree.h: Add decls.
d4483 1
a4483 2
	* method.c (hack_identifier): Also convert component_refs from
	references.
d4485 3
a4487 2
	* lex.c (cons_up_default_function): Use the type, not the name, in
	declspecs.
d4489 1
a4489 1
	* decl2.c (import_export_vtable): Fix weak vtables.
d4491 2
a4492 1
Fri Apr  5 13:30:17 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4494 1
a4494 2
	* search.c (get_base_distance_recursive): Fix access checks for
	protected bases.
d4496 1
a4496 1
Fri Apr  5 11:02:06 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d4498 1
a4498 21
	* call.c (unary_complex_lvalue): Delete unneeded decl, it's in
	cp-tree.h.
	(convert_harshness): Add prototypes wrapped by PROTO.
	* decl2.c (grok_function_init): Likewise.
	(do_toplevel_using_decl): Change to void return type.
	* class.c (build_vtable_entry): Remove decl of make_thunk.
	(merge_overrides): Fix order of arg definitions.
	(finish_vtbls): Likewise.
	(fixup_vtable_deltas): Likewise.
	(modify_all_direct_vtables): Likewise.
	(modify_all_indirect_vtables): Likewise.
	* search.c (get_base_distance_recursive): Likewise.
	(get_abstract_virtuals_1): Likewise.
	(fixup_virtual_upcast_offsets): Likewise.
	(lookup_fnfields_1): Add prototypes wrapped by PROTO.
	* init.c (perform_member_init): Fix order of arg definitions.
	(expand_aggr_init_1): Add prototypes wrapped by PROTO.
	* cp-tree.h (make_thunk): Add decl.
	(overload_template_name, push_template_decl): Add decls.
	(do_toplevel_using_decl): Change to void return type.
	(vec_binfo_member): Add decl.
d4500 2
a4501 1
Thu Apr  4 13:33:10 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d4503 5
a4507 4
	* typeck.c (mark_addressable, convert_for_assignment,
	convert_for_initialization, pointer_int_sum, pointer_diff,
	unary_complex_lvalue): Add prototypes wrapped by PROTO.
	(convert_sequence): #if 0 fn decl, since definition also is.
d4509 2
a4510 1
Thu Apr  4 11:00:53 1996  Mike Stump  <mrs@@cygnus.com>
d4512 5
a4516 2
	* rtti.c (build_dynamic_cast): Make sure we strip qualifiers on
	cast to pointer types for type searching.
d4518 1
a4518 1
Wed Apr  3 17:10:57 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d4520 4
a4523 2
	* typeck.c (get_delta_difference): Use cp_error, not error, in the
	case where BINFO == 0.
d4525 1
a4525 1
Wed Apr  3 12:01:02 1996  Mike Stump  <mrs@@cygnus.com>
d4527 1
a4527 2
	* call.c (build_method_call): Fix wording of error messages so
	constructors come out right.
d4529 5
a4533 1
Tue Apr  2 16:06:59 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4535 1
a4535 3
	* decl.c (push_overloaded_decl): Don't warn about hidden
	constructors when both the type and the function are declared
	in a system header file.
d4537 12
a4548 1
Mon Apr  1 09:03:13 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4550 2
a4551 2
	* class.c (finish_struct_1): Propagate the TYPE_PACKED
	flag for the type to the type's fields.
d4553 1
a4553 1
Sat Mar 30 12:14:33 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d4555 2
a4556 1
	* parse.y (complex_parmlist, ELLIPSES): Take out ARM-based warning.
d4558 3
a4560 1
Fri Mar 29 15:51:36 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4562 1
a4562 2
	* class.c (base_info, finish_base_struct): Replace 
	needs_virtual_dtor with base_has_virtual.
d4564 2
a4565 3
	(finish_struct_1): Remove the old code that tried to make default
	destructors virtual. Use base_has_virtual when checking if we need
	to add a vtable entry for the rtti code.
d4567 1
a4567 1
Fri Mar 29 14:02:36 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4569 3
a4571 2
	* pt.c (push_template_decl): Complain about template decl with
	inappropriate declaration.
d4573 2
a4574 1
Fri Mar 29 12:15:35 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4576 1
a4576 2
	* typeck.c (build_x_unary_op): Remove bogus check for taking
	the address of a member function.
d4578 6
a4583 1
Fri Mar 29 11:56:02 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4585 2
a4586 2
	* parse.y (constructor_declarator): Only push the class if
	we are not already in the class.
d4588 1
a4588 1
Fri Mar 29 09:41:02 1996  Jeffrey A. Law  <law@@cygnus.com>
d4590 6
a4595 2
	* method.c (emit_thunk): Remove current_call_is_indirect nonsense.
	Add additional argument to INIT_CUMULATIVE_ARGS.
d4597 1
a4597 1
Thu Mar 28 16:41:39 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4599 1
a4599 1
	* decl.c (shadow_tag): Fix error about anon union with methods.
d4601 1
a4601 3
	* parse.y (self_reference): Only generate a self-reference if this
	is a non-template class.
	(opt.component_decl_list): Only use it if it was generated.
d4603 2
a4604 3
	* parse.y (component_decl_1): Use constructor_declarator.
	(fn.def2): Likewise.
	(notype_component_declarator0): Likewise.
d4606 1
a4606 1
Thu Mar 28 15:11:35 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4608 2
a4609 3
	* typeck.c (build_x_unary_op): Add checks for taking the address
	of a TARGET_EXPR or of a member function, and give appropriate
	warnings.
d4611 1
a4611 1
Thu Mar 28 14:49:26 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4613 6
a4618 2
	* pt.c (process_template_parm): Allow template type parms to be
	used as types for template const parms.
d4620 1
a4620 1
Wed Mar 27 15:51:19 1996  Mike Stump  <mrs@@cygnus.com>
d4622 2
a4623 2
	* init.c (expand_vec_init): Ensure the eh cleanups are on the
	function_obstack.
d4625 1
a4625 1
Wed Mar 27 10:14:30 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4627 3
a4629 4
	* decl.c (lookup_name_real): Be even more picky about the
	ambiguous lookup warning.
	(grokdeclarator): Tweak SCOPE_REF constructor declarators here.
	* parse.y (constructor_declarator): Rather than here.
d4631 2
a4632 3
	* parse.y (constructor_declarator): New nonterminal.
	(fn.def1): Use it.
	(explicit_instantiation): Likewise.
d4634 1
a4634 1
Tue Mar 26 13:41:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4636 3
a4638 10
	Add implicit declaration of class name at class scope.
	* decl.c (lookup_name_real): Restrict pedwarn about ambiguous lookup.
	* parse.y (self_reference): New nonterminal.
	(opt.component_decl_list): Use it.
	(fn.def1): Add nested_name_specifier type_name cases.
	* class.c (build_self_reference): New function.
	(finish_struct): Handle access_default later, move self-reference
	decl to the end.
	* pt.c (lookup_template_class): Handle getting a TYPE_DECL.
	* cp-tree.h: Adjust.
d4640 2
a4641 2
	* pt.c (do_function_instantiation): Separate handling of member
	functions and non-member functions properly.
d4643 2
a4644 1
Mon Mar 25 14:23:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4646 2
a4647 1
	* pt.c (process_template_parm): Improve error for 'volatile class K'.
d4649 3
a4651 1
	* class.c (finish_struct_1): Check the right slot for destructors.
d4653 1
a4653 1
	* decl.c (start_enum): Complain about enum templates.
d4655 5
a4659 1
Mon Mar 25 13:25:31 1996  Mike Stump  <mrs@@cygnus.com>
d4661 7
a4667 2
	* init.c (resolve_offset_ref): Offset pointers to member data by one.
	* typeck.c (unary_complex_lvalue): Likewise.
d4669 1
a4669 1
Mon Mar 25 13:30:42 1996  Bob Manson  <manson@@charmed.cygnus.com>
d4671 3
a4673 2
	* typeck.c (c_expand_return): Check for a returned local
	array name, similar to the check for an ADDR_EXPR.
d4675 2
a4676 1
Mon Mar 25 13:07:19 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4678 1
a4678 2
	* decl.c (cp_finish_decl): Don't build cleanups for static
	variables here.
d4680 2
a4681 1
Fri Mar 22 17:57:55 1996  Mike Stump  <mrs@@cygnus.com>
d4683 1
a4683 6
	* typeck.c (build_modify_expr): Fix error messages to be more
	accurate.
	* cp-tree.h (assop_as_string): Parallel to op_as_string, but for
	assignment operators.
	* error.c (assop_as_string): Likewise.  Add support for `%Q' for
	assignment operators.
d4685 2
a4686 1
Fri Mar 22 13:48:29 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4688 2
a4689 3
	* decl.c (grokdeclarator): Call bad_specifiers for typedefs.  Also
	give an error if initialized.  Pedwarn about nested type with the
	same name as its enclosing class.
d4691 1
a4691 1
	* pt.c (tsubst, case TYPE_DECL): Set DECL_CONTEXT.
d4693 11
a4703 2
	* typeck.c (require_complete_type): Be sure to instantiate the
	MAIN_VARIANT of the type.
d4705 1
a4705 2
	* decl2.c (finish_file): Instantiate pending templates before
	processing static constructors and destructors.
d4707 2
a4708 2
	* pt.c (instantiate_decl): Don't instantiate functions at toplevel
	unless at_eof.
d4710 1
a4710 1
Fri Mar 22 09:30:17 1996  Bob Manson  <manson@@beauty.cygnus.com>
d4712 1
a4712 2
	* decl2.c (delete_sanity): If error_mark_node is passed
	in as an expression, quit while we're ahead.
d4714 2
a4715 2
	* decl.c (grokdeclarator): Give an error message if `friend'
	is combined with any storage class specifiers.
d4717 2
a4718 1
Wed Mar 20 14:51:55 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4720 1
a4720 2
	* parse.y (named_complex_class_head_sans_basetype): Don't crash on
	definition of nonexistent nested type.
d4722 2
a4723 2
	* error.c (dump_decl, case TYPE_DECL): Fix decision for whether or
	not to say 'typedef'.
d4725 5
a4729 1
Wed Mar 20 00:11:47 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d4731 3
a4733 4
	* cp-tree.h (struct lang_type): Make search_slot a tree, not a char*.
	* search.c (dfs_walk, dfs_init_vbase_pointers,
	expand_upcast_fixups): Remove cast of CLASSTYPE_SEARCH_SLOT.
	(dfs_find_vbases): Remove cast for CLASSTYPE_SEARCH_SLOT init.
d4735 1
a4735 1
Tue Mar 19 17:56:03 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4737 3
a4739 3
	* except.c (build_throw): Support minimal parse.
	* pt.c (tsubst_copy): Support THROW_EXPR.
	* decl2.c (build_expr_from_tree): Likewise.
d4741 1
a4741 2
	* pt.c (mangle_class_name_for_template): Always allocate
	scratch_firstobj.
d4743 2
a4744 1
Tue Mar 19 16:34:31 1996  Bob Manson  <manson@@beauty.cygnus.com>
d4746 2
a4747 2
	* cvt.c (cp_convert_to_pointer): Give an appropriate error
	when trying to cast from an incomplete type.
d4749 2
a4750 1
Tue Mar 19 16:00:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4752 1
a4752 3
	* pt.c (instantiate_class_template): Don't bother setting up
	CLASSTYPE_TAGS explicitly, as the nested types will add
	themselves.
d4754 2
a4755 1
Tue Mar 19 15:48:43 1996  Bob Manson  <manson@@beauty.cygnus.com>
d4757 4
a4760 4
	* decl.c (shadow_tag): Remove old error check for usage of
	an enum without a previous declaration.
	(xref_tag): Add error message about usage of enums without a
	previous declaration.
d4762 1
a4762 1
Tue Mar 19 09:21:35 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4764 1
a4764 2
	* lex.c (do_identifier): Only do name consistency check if we're
	parsing.
d4766 4
a4769 2
	* pt.c (push_template_decl): Don't crash if we get a member defn
	that doesn't match.
d4771 1
a4771 5
	* decl.c (xref_tag_from_type): New function to do an xref without
	always having to figure out code_type_node.
	* cp-tree.h: Declare it.
	* pt.c (instantiate_class_template): Use it for friend classes.
	(lookup_template_class): Use it.
d4773 3
a4775 2
	* typeck2.c (build_functional_cast): Pull out a single parm before
	passing it to build_c_cast.
d4777 1
a4777 1
Tue Mar 19 09:07:15 1996  Bob Manson  <manson@@beauty.cygnus.com>
d4779 2
a4780 2
	* expr.c (do_case): Give an error message if a pointer is
	given as a case value.
d4782 1
a4782 1
Mon Mar 18 21:57:54 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4784 5
a4788 2
	* typeck.c (build_c_cast): Don't pull single TEMPLATE_DECL out of
	an overload list.
d4790 2
a4791 2
	* lex.c (cons_up_default_function): Really, now, interface hackery
	does not apply to synthesized methods.
d4793 1
a4793 1
Mon Mar 18 18:20:57 1996  Mike Stump  <mrs@@cygnus.com>
d4795 2
a4796 38
	* call.c (build_method_call): Ctors and dtors now have special names
	with respect to lookups.
	* class.c (add_method): Likewise.
	(grow_method): Likewise.
	(finish_struct_methods): Likewise.
	(warn_hidden): Likewise.
	(finish_struct_1): Likewise.
	* cvt.c (convert_to_reference): Likewise.
	(convert_to_aggr): Likewise.
	(cp_convert): Likewise.
	* decl2.c (check_classfn): Likewise.
	* init.c (expand_member_init): Likewise.
	(expand_default_init): Likewise.
	(expand_aggr_init_1): Likewise.
	(build_offset_ref): Likewise.
	(build_new): Likewise.
	(build_delete): Likewise.
	* lex.c (do_inline_function_hair): Likewise.
	* search.c (lookup_field_1): Likewise.
	(lookup_fnfields_here): Likewise.
	(lookup_field): Likewise.
	(lookup_fnfields): Likewise.
	(get_virtual_destructor): Likewise.
	(dfs_debug_mark): Likewise.
	(dfs_pushdecls): Likewise.
	(dfs_compress_decls): Likewise.
	* tree.c (layout_basetypes): Likewise.
	* typeck.c (build_component_ref): Likewise.
	(build_x_function_call): Likewise.
	(build_modify_expr): Likewise.
	(convert_for_initialization): Likewise.
	(build_functional_cast): Likewise.
	* cp-tree.h (CLASSTYPE_FIRST_CONVERSION): Likewise.
	(CTOR_NAME): New.
	(DTOR_NAME): New.
	* decl.c (ctor_identifier): New.
	(dtor_identifier): New.
	(init_decl_processing): Set them.
d4798 1
a4798 1
Mon Mar 18 18:00:51 1996  Mike Stump  <mrs@@cygnus.com>
d4800 2
a4801 2
	* typeck.c (build_component_ref): Don't get confused by fields whose
	context has no type name, like pointer to member functions.
d4803 1
a4803 1
Mon Mar 18 13:19:03 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4805 3
a4807 1
	* decl.c (grokdeclarator): Handle typedef without declarator.
d4809 3
a4811 1
	* pt.c (tsubst): Handle SCOPE_REF in declarator.
d4813 5
a4817 1
	* parse.y (bad_parm): Catch another case of missing `typename'.
d4819 1
a4819 1
	* lex.c (yyprint): Handle TYPE_DECLs.
d4821 8
a4828 1
	* decl.c (start_function): Don't try to be clever.
d4830 1
a4830 9
	* lex.c: Lose compiler_error_with_decl.
	* typeck2.c: Lose error_with_aggr_type.
	(incomplete_type_error): Use cp_* instead of old functions.
	(readonly_error): Likewise.
	* typeck.c (convert_arguments): Likewise.
	* search.c (lookup_nested_field): Likewise.
	* method.c (make_thunk): Likewise.
	* decl.c (grokparms): Likewise.
	* cp-tree.h: Update.
d4832 2
a4833 2
	* tree.c (min_tree_cons): Call copy_to_permanent for the purpose
	and value.
d4835 1
a4835 1
Mon Mar 18 11:25:52 1996  Bob Manson  <manson@@beauty.cygnus.com>
d4837 1
a4837 3
	* method.c (build_opfncall): When deleting a pointer to an
	array, build a new pointer to the tree past any ARRAY_TYPE
	nodes.
d4839 3
a4841 1
Mon Mar 18 10:11:46 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d4843 1
a4843 1
	* decl.c (lookup_name_real): Initialize local var TYPE to NULL_TREE.
d4845 2
a4846 1
Fri Mar 15 11:03:57 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4848 9
a4856 2
	* pt.c (instantiate_decl): Only call import_export_decl if at_eof
	and ! DECL_INLINE.
d4858 1
a4858 4
	* decl.c (finish_function): Don't set nested based on
	hack_decl_function_context.
	* parse.y (function_try_block): Check for nested function.
	(pending_inlines): Likewise.
d4860 1
a4860 2
	* decl2.c (build_expr_from_tree): If a unary op already has a
	type, just return it.
d4862 1
a4862 1
	* decl2.c (finish_prevtable_vardecl): Use ADJUST_VTABLE_LINKAGE.
d4864 2
a4865 7
	* decl2.c (walk_vtables): vardecl_fn returns int; return 1 if it does.
	(finish_file): Check the return value of walk_vtables.
	(finish_prevtable_vardecl): Return int.
	(finish_vtable_vardecl): Likewise.
	(prune_vtable_vardecl): Likewise.
	* lex.c (set_vardecl_interface_info): Likewise.
	* cp-tree.h: Adjust return types.
d4867 1
a4867 4
	* class.c (delete_duplicate_fields_1): Don't complain about
	duplicate nested types if they're the same type.
	(finish_struct): Remove check for duplicate.
	* decl2.c (grokfield): Don't check for typedef of anonymous type.
d4869 3
a4871 1
Thu Mar 14 10:00:19 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4873 3
a4875 1
	* cp-tree.h: Lose SIGNATURE_GROKKING_TYPEDEF.
d4877 1
a4877 3
	* decl.c (grokdeclarator): Lose special handling of class-level
	typedef.  Lose SIGNATURE_GROKKING_TYPEDEF.  Set
	SIGNATURE_HAS_OPAQUE_TYPEDECLS later.
d4879 2
a4880 1
	* cvt.c (convert_pointer_to_real): Retain cv-quals in conversion.
d4882 3
a4884 1
	* pt.c (tsubst_copy): Strip cv-quals from destructor name types.
d4886 1
a4886 1
	* search.c (compute_access): Fix handling of anonymous union
a4887 2
	* class.c (finish_struct_anon): Propagate TREE_{PRIVATE,PROTECTED}
	from anonymous unions to their members.
d4889 5
a4893 2
	* typeck.c (build_x_function_call): For static member functions,
	hand off to build_member_call.
d4895 1
a4895 1
Wed Mar 13 14:03:34 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4897 3
a4899 1
	* typeck.c (build_component_ref): Handle OFFSET_REFs.
d4901 1
a4901 1
	* init.c (expand_vec_init): Fix init == 0 case.
d4903 1
a4903 1
Tue Mar 12 14:36:02 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4905 1
a4905 2
	* init.c (build_new): Pedwarn about init and array new.
	(expand_vec_init): Handle lists, use convert_for_initialization
d4907 3
a4909 3
	* typeck.c (convert_for_initialization): Pass LOOKUP_NO_CONVERSION
	when converting to an aggregate type.
	* cvt.c (cp_convert): Pass it through.
d4911 2
a4912 2
	* typeck.c (build_conditional_expr): Handle user-defined
	conversions to slightly different types.
d4914 2
a4915 2
	* decl.c (grokdeclarator): Force an array type in a parm to be
	permanent.
d4917 3
a4919 3
	* decl2.c (do_using_directive): Sorry.
	(do_namespace_alias): Likewise.
	* lex.c (real_yylex): Warn about using the `namespace' keyword.
d4921 2
a4922 1
Sun Mar 10 22:26:09 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4924 2
a4925 1
	* parse.y (datadef): Move call to note_list_got_semicolon up.
d4927 2
a4928 1
Fri Mar  8 11:47:26 1996  Mike Stump  <mrs@@cygnus.com>
d4930 2
a4931 1
	* tree.c (unsave_expr): Don't unsave, UNSAVE_EXPRs.
d4933 1
a4933 1
Fri Mar  8 11:29:06 1996  Mike Stump  <mrs@@cygnus.com>
d4935 2
a4936 4
	* decl.c (cp_finish_decl): The exception regions have to be
	nested, not overlapping.  We start the exception region for a
	decl, after it has been fully built, and all temporaries for it
	have been cleaned up.
d4938 1
a4938 1
Thu Mar  7 17:46:06 1996  Mike Stump  <mrs@@cygnus.com>
d4940 3
a4942 1
	* tree.c (vec_binfo_member): Don't core dump if we have no bases.
d4944 1
a4944 1
Thu Mar  7 14:11:49 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4946 2
a4947 3
	* tree.def: Add RETURN_INIT.
	* pt.c (instantiate_decl): Handle RETURN_INIT.
	* decl.c (store_return_init): Handle minimal_parse_mode.
d4949 1
a4949 4
	* tree.c (cp_build_type_variant): Just return an error_mark_node.
	* decl.c (make_typename_type): Don't try to get the file and line
	of an identifier.
	* typeck.c (comptypes): Handle TYPENAME_TYPE.
d4951 2
a4952 1
Wed Mar  6 18:47:50 1996  Per Bothner  <bothner@@kalessin.cygnus.com>
d4954 2
a4955 2
	* decl.c (poplevel): Make sure we clear out and restore old local
	non-VAR_DECL values by default when they go out of scope.
d4957 2
a4958 1
Wed Mar  6 09:57:36 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d4960 1
a4960 2
	* method.c (build_overload_value): Use DECL_ASSEMBLER_NAME in
	referring to addresses of variables and functions.
d4962 2
a4963 1
	* error.c (dump_expr): Support SIZEOF_EXPR.
d4965 1
a4965 1
	* init.c (do_friend): Use the return value of check_classfn.
d4967 3
a4969 1
	* typeck.c (convert_arguments): Call complete_type.
d4971 72
a5042 2
	* method.c (hack_identifier): After giving an error, set value to
	error_mark_node.
d5044 2
a5045 1
Tue Mar  5 16:00:15 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5047 1
a5047 26
	* tree.c (hack_decl_function_context): Kludge around DECL_CONTEXT
	lossage for local classes.
	* cp-tree.h: Declare it.
	* decl.c (lookup_name_real): Evil, painful hack for local classes.
	(grokfndecl): Set DECL_CLASS_CONTEXT and DECL_NO_STATIC_CHAIN here.
	Use hack_decl_function_context.
	(grokdeclarator): Don't set DECL_NO_STATIC_CHAIN here.
	(start_function): Use hack_decl_function_context.
	(finish_function): Likewise.
	* method.c (synthesize_method): Likewise.
	* lex.c (process_next_inline): Likewise.
	(do_pending_inlines): Likewise.
	* decl2.c (finish_file): Unset DECL_STATIC_FUNCTION_P when we're
	done with it.

Mon Mar  4 22:38:39 1996  Gerald Baumgartner  <gb@@alexander.cs.purdue.edu>

	* sig.c (build_signature_pointer_or_reference_type): Align
	signature pointers/references on 8-byte boundaries so they can be
	grabbed 2 words at a time on a Sparc.

Tue Mar  5 10:21:01 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (hack_identifier): Requiring a static chain is now a
	hard error.
	* decl.c (grokdeclarator): Set DECL_NO_STATIC_CHAIN on nested
d5049 12
d5062 1
a5062 1
Mon Mar  4 20:03:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5064 2
a5065 1
	* init.c (build_offset_ref): Call complete_type.
d5067 2
a5068 1
	* decl.c (pop_from_top_level): Always pop previous_class_type.
d5070 2
a5071 2
	* parse.y: Handle multiple decls in a for-init-statement.
	* pt.c (tsubst_expr): Likewise.
d5073 1
a5073 2
	* pt.c (tsubst): Use tsubst_expr for the second operand of an
	ARRAY_REF.
d5075 1
a5075 4
	* decl.c (maybe_push_to_top_level): Don't save previous_class_type.
	(poplevel_class): Set it here.
	(pop_from_top_level): Pop it here if we're returning to class scope.
	* class.c (pushclass): Don't set it here.
d5077 9
a5085 3
	* decl.c (maybe_push_to_top_level): Save current_template_parms,
	and clear it if !pseudo.
	(pop_from_top_level): Restore it.
d5087 3
a5089 2
	* decl2.c (finish_file): Push the dummy each time we walk the list
	of vtables.
d5091 4
a5094 4
	* error.c (dump_expr): Support LOOKUP_EXPR and actually do
	something for CAST_EXPR.
	
Mon Feb 19 14:49:18 1996  Rusty Russell  <rusty@@adelaide.maptek.com.au>
d5096 7
a5102 2
	* cvt.c (cp_convert): Warn about implicit conversion of the
	address of a function to bool, as it is always true.
d5104 3
a5106 1
Fri Feb 23 23:06:01 1996  Rusty Russell  <rusty@@adelaide.maptek.com.au>
d5108 1
a5108 1
	* typeck.c (c_expand_return): Fix warning for local externs returned.
d5110 2
a5111 1
Mon Mar  4 15:03:11 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5113 1
a5113 1
	* tree.c (mapcar): Propagate const and volatile properly.
d5115 2
a5116 2
	* typeck.c (complete_type): Be sure to instantiate the
	MAIN_VARIANT of the type.
d5118 1
a5118 2
	* method.c (synthesize_method): Class interface hackery does not
	apply to synthesized methods.
d5120 2
a5121 1
Mon Mar  4 14:05:23 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5123 5
a5127 2
	* pt.c (comp_template_args): Use comptypes rather than just
	checking for TEMPLATE_TYPE_PARM equivalence.
d5129 1
a5129 2
	* typeck.c (build_x_function_call): Call complete_type before
	checking TYPE_OVERLOADS_CALL_EXPR.
d5131 2
a5132 1
Mon Mar  4 18:48:30 1996  Manfred Hollstein   <manfred@@lts.sel.alcatel.de>
d5134 2
a5135 1
	* g++.c (main): Check also for new define ALT_LIBM.
d5137 3
a5139 1
Fri Mar  1 13:09:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5141 1
a5141 3
	* pt.c (instantiate_class_template): If we don't have a pattern
	yet, that's OK.
	(coerce_template_parms): If we see a local class, bail.
d5143 3
a5145 2
	* decl.c (grok_reference_init): Make sure there's a type before
	checking its code.
d5147 1
a5147 2
	* pt.c (do_function_instantiation): Avoid crashing on invalid decls.
	(push_template_decl): Likewise.
d5149 2
a5150 2
	* parse.y (named_class_head): Set
	CLASSTYPE_TEMPLATE_SPECIALIZATION here if we have basetypes.
d5152 2
a5153 2
	* decl.c (xref_tag): Diagnose redeclaration of template
	type-parameter name.
d5155 1
a5155 1
	* error.c (dump_type): Handle anonymous template type parms.
d5157 2
a5158 3
	* pt.c (instantiate_template): Use TYPE_MAIN_DECL instead of
	TYPE_STUB_DECL.
	(coerce_template_parms): Likewise.
d5160 1
a5160 1
Thu Feb 29 16:26:01 1996  Mike Stump  <mrs@@cygnus.com>
d5162 2
a5163 2
	* class.c (instantiate_type, case {ARRAY,INDIRECT}_REF,
	case ADDR_EXPR): Don't modify rhs if a subinstantiation fails.
d5165 2
a5166 1
Thu Feb 29 08:20:25 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5168 6
a5173 3
	* pt.c (instantiate_template): Take the MAIN_VARIANT of the type
	before trying to get its STUB_DECL.
	(coerce_template_parms): Likewise.
d5175 1
a5175 2
	* parse.y (template_type_parm): If they didn't use 'class',
	pretend they did after giving an error.
d5177 2
a5178 1
	* pt.c (coerce_template_parms): Diagnose use of local class.
d5180 2
a5181 1
	* decl.c (grok_reference_init): Use instantiate_type.
d5183 2
a5184 1
	* error.c (dump_expr): Handle TEMPLATE_DECLs.
d5186 1
a5186 1
	* parse.y (named_class_head): Diagnose mismatching types and tags.
d5188 3
a5190 2
	* decl.c (pushdecl): Type decls and class templates clash with
	artificial type decls, not hide them.
d5192 1
a5192 4
	* decl.c (redeclaration_error_message): Diagnose redefinition of
	templates properly.
	(duplicate_decls): Diagnose disallowed overloads for template
	functions, too.
d5194 4
a5197 2
	* decl.c (start_decl): Call complete_type before checking for a
	destructor.
d5199 1
a5199 1
	* pt.c (tsubst): Use tsubst_expr on the elts of a VEC.
d5201 1
a5201 1
	* decl.c (xref_tag): A TEMPLATE_TYPE_PARM is a match.
d5203 2
a5204 1
Wed Feb 28 09:28:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5206 2
a5207 2
	* decl.c (grok_op_properties): Don't check for operator++(int) in
	a template.
d5209 1
a5209 2
	* tree.c (perm_manip): Return a copy of variable and function
	decls with external linkage.
d5211 2
a5212 4
	* tree.def: Change some of the min tree codes to type "1".
	* pt.c (uses_template_parms): Handle 'e's, return 1 for LOOKUP_EXPRs.
	* method.c (build_overload_int): Emit something arbitrary for
	anything but an INTEGER_CST if we're in a template.
d5214 1
a5214 2
	* decl.c (cp_finish_decl): Call complete_type before deciding
	whether or not to lay out the decl.
d5216 2
a5217 1
	* lex.c (do_identifier): Check for DECL_INITIAL before using it.
d5219 1
a5219 1
Tue Feb 27 16:35:32 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5221 2
a5222 1
	* typeck2.c (build_x_arrow): Call complete_type.
d5224 1
a5224 5
	* pt.c (add_pending_template): Broken out.
	(lookup_template_class): If -fexternal-templates, call it for all
	the methods of implemented types.
	(instantiate_class_template): Instead of instantiating them here.
	(instantiate_decl): Handle -fexternal-templates earlier.
d5226 2
a5227 1
Tue Feb 27 15:51:32 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5229 3
a5231 2
	* search.c, lex.c, decl.c, class.c, cp-tree.h: Don't wrap the
	memoized lookup stuff inside GATHER_STATISTICS.
d5233 1
a5233 1
Tue Feb 27 10:38:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5235 2
a5236 3
	* decl.c (start_decl): Complain about array of incomplete type
	here.
	(grokdeclarator): Not here.
d5238 2
a5239 2
	* parse.y (template_parm): Expand full_parm inline so we can set
	the rule's precedence.
d5241 6
a5246 4
	* pt.c (tsubst_expr): If we're in a template, just do tsubst_copy.
	(tsubst): tsubst_expr the DECL_INITIAL of FIELD_DECLs.
	* decl2.c (grokbitfield): Don't check for integer constant here.
	* class.c (finish_struct_1): Check here.
d5248 2
a5249 1
	* decl.c (define_label): Make the min decl go on permanent_obstack.
d5251 1
a5251 3
	* pt.c (unify): Don't handle CONST_DECLs.
	(uses_template_parms): Don't check DECL_INITIAL on a CONST_DECL.
	(tsubst_copy): Likewise.
d5253 2
a5254 2
	* lex.c (do_identifier): Do pull the DECL_INITIAL out of a
	CONST_DECL for a template parm.
d5256 1
a5256 1
Mon Feb 26 12:48:18 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5258 1
a5258 3
	* decl.c (grokdeclarator): Complain about array of incomplete type
	here.
	(start_decl_1): Not here.
d5260 2
a5261 1
	* pt.c (tsubst): Handle pointer-to-function declarators.
d5263 2
a5264 2
	* method.c (hack_identifier): If pedantic, diagnose local class
	methods that require a static chain.
d5266 1
a5266 4
	* decl.c (grok_op_properties): No longer static.
	* cp-tree.h: Declare it.
	* pt.c (tsubst): Call it for operators.
	Use tsubst_copy for TREE_VECs.
d5268 1
a5268 1
	* parse.y (template_arg): The expr has precedence like '>'.
d5270 1
a5270 1
Fri Feb 23 14:51:52 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5272 2
a5273 225
	* pt.c (coerce_template_parms): Don't coerce an expression using
	template parms.
	(uses_template_parms): Also check DECL_INITIAL in CONST_DECLs.
	(tsubst): Don't use build_index_2_type if the max_value uses template
	parms.
	* method.c (build_overload_int): Emit something arbitrary for an
	expression using template parms.

	* parse.y (template_close_bracket): New non-terminal to catch use
	of '>>' instead of '> >' in template class names.
	(template_type): Use it.
	* Makefile.in (CONFLICTS): Causes one more r/r conflict.

	* tree.def: Add CAST_EXPR.
	* typeck2.c (build_functional_cast): Use CAST_EXPR instead of
	CONVERT_EXPR for minimal_parse_mode.
	* typeck.c (build_c_cast): Likewise.
	* pt.c (tsubst_copy): Likewise.
	* decl2.c (build_expr_from_tree): Likewise.
	* error.c (dump_expr): Likewise.

Fri Feb 23 10:36:46 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* except.c (SetTerminate, SetUnexpected): Put back global vars.
	(init_exception_processing): Put back decl/init of
	set_unexpected_fndecl and set_terminate_fndecl, needed to get the
	fns from libstdc++.

	* decl.c (struct binding_level): Delete ACCEPT_ANY bitfield.
	(declare_uninstantiated_type_level, uninstantiated_type_level_p):
	Delete unused fns.
	* cp-tree.h (declare_uninstantiated_type_level,
	uninstantiated_type_level_p): Delete prototypes.

Thu Feb 22 19:36:15 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (tsubst_expr): Add default return.

Thu Feb 22 16:47:24 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* error.c (fndecl_as_string): Delete unused arg CNAME.
	* sig.c (build_signature_table_constructor,
	build_signature_method_call): Fix calls.

	* class.c (the_null_vtable_entry): Delete var definition.
	(init_class_processing): Delete tree the_null_vtable_entry init.
	* decl.c (no_print_{functions, builtins}): Declare as static.
	(__tp_desc_type_node): #if 0 var definition.
	(init_type_desc): #if 0 init of __tp_desc_type_node.
	(vb_off_identifier): Move var decl into init_decl_processing.
	(current_function_assigns_this): Declare as static.
	(int_ftype_ptr_ptr_int, void_ftype_ptr_int_int): Delete var decls.
	(init_decl_processing): Delete init of void_ftype_ptr_ptr_int.
	Move decls of string_ftype_ptr_ptr and int_ftype_string_string here.
	* decl2.c (delete_sanity): Delete definition/mod of local var ELT_SIZE.
	* init.c (BI_header_type, BI_header_size): Declare as static.
	* pt.c (template_classes): Delete unused var.
	(add_pending_template): Delete decl for non-existent fn.
	(lookup_template_class): Delete vars CODE and TAG_CODE.
	(instantiate_template): Delete unused var TARGS.
	* cp-tree.h (vb_off_identifier, current_function_assigns_this):
	Delete decls.
	(__tp_desc_type_node): #if 0 var decl.
	(fndecl_as_string): Fix prototype.

Thu Feb 22 15:56:19 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.def: Add GOTO_STMT.
	* pt.c (tsubst_expr): Support goto and labels.
	* decl.c (define_label): Support minimal parsing.
	* parse.y (simple_stmt): Likewise.

Thu Feb 22 15:30:12 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* xref.c (GNU_xref_member): Only define/set var I if
	XREF_SHORT_MEMBER_NAMES is defined, to match when it's actually
	used.
	(GNU_xref_end_scope): Delete unused fifth arg TRNS.
	(GNU_xref_end): Fix call.
	* decl.c (poplevel, poplevel_class, finish_method): Fix calls.
	* cp-tree.h (GNU_xref_end_scope): Fix prototype.

	* tree.c (build_exception_variant): Delete unused vars I, A, T,
	T2, and CNAME.
	(layout_vbasetypes): Delete unused var NONVIRTUAL_VAR_SIZE.
	(mapcar): Delete unused var CODE.
	(build_cplus_new): Delete unused arg WITH_CLEANUP_P.
	(break_out_cleanups): Fix call.
	(bot_manip): Likewise.
	* call.c (build_method_call): Likewise.
	* cvt.c (build_up_reference, convert_to_reference, cp_convert):
	Likewise.
	* typeck.c (unary_complex_lvalue, build_modify_expr,
	convert_for_initialization): Likewise.
	* typeck2.c (build_functional_cast): Likewise.
	* cp-tree.h (build_cplus_new): Fix prototype.

	* repo.c (open_repo_file): Delete unused var Q.
	(repo_compile_flags, repo_template_declared,
	repo_template_defined, repo_class_defined, repo_inline_used,
	repo_vtable_used, repo_tinfo_used): #if 0 unused fns.
	(repo_get_id, repo_vtable_used): Declare as static. 
	* cp-tree.h (mark_{decl,class}_instantiated, finish_repo): Add
	prototypes.

Thu Feb 22 14:53:35 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* parse.y (pending_inlines): Add function_try_block case.

	* pt.c (unify): Fix for template const parms.

Thu Feb 22 13:24:15 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* lex.c (extract_interface_info): Delete forward decl.
	(default_copy_constructor_body, default_assign_ref_body): Delete
	decls for non-existent functions.
	(synth_firstobj, inline_text_firstobjs): Delete unused vars.
	(init_lex): Delete setting them.
	(cons_up_default_function): Delete unused vars FUNC_BUF,
	FUNC_LEN, and COMPLEX.  Delete code setting COMPLEX.  Delete old
	#if 0'd synth code.
	(toplevel, expression_obstack): Delete unused extern decls.
	(tree_node_kind): Delete unused enum.
	(tree_node_counts, tree_node_sizes): Wrap with #ifdef
	GATHER_STATISTICS.
	(tree_node_kind_names): Delete unused extern decl.
	(synth_obstack): Delete unused var.
	(init_lex): Don't set it.
	(init_parse): Add decl before use.
	(reduce_count): Only define #ifdef GATHER_STATISTICS && REDUCE_LENGTH.
	(current_unit_{name, language}): Delete unused vars. 
	(check_newline): Don't bother setting them, just accept the #pragma.
	* cp-tree.h (init_repo, peek_yylex): Add prototypes.
	(current_unit_{name, language}): Delete decls.

	* search.c: Wrap all of the memoized functions, macros, and
	variables inside #ifdef GATHER_STATISTICS.
	(lookup_field, lookup_fnfields): Likewise.
	(init_search_processing): Likewise.
	(reinit_search_statistics): Wrap whole function.
	* lex.c (reinit_lang_specific): Wrap call to reinit_search_statistics.

	* decl.c (finish_function): Only call pop_memoized_context if
	GATHER_STATISTICS is defined.
	(start_function): Likewise for push_memoized_context.
	* class.c (pushclass, popclass): Likewise.

	* cp-tree.h (CLASSTYPE_MTABLE_ENTRY): Move definition from here...
	* search.c (CLASSTYPE_MTABLE_ENTRY): ... to here.

	* cvt.c (cp_convert): Delete unused local var FORM.
	* cp-tree.h (can_convert, can_convert_arg, real_lvalue_p): Add
	prototypes.

Thu Feb 22 13:19:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (do_poplevel): Oops; really return what we get from
	poplevel this time.

Thu Feb 22 11:41:44 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* cp-tree.h (is_aggr_type): Add prototype.

	* cp-tree.h ({push,pop}_cp_function_context): Add decls.
	* method.c ({push,pop}_cp_function_context): Delete decls.
	* except.c (start_eh_unwinder, end_eh_unwinder): Declare as void.
	(SetUnexpected, SetTerminate): Delete unused vars.
	(init_exception_processing): Don't set SetUnexpected or
	SetTerminate.  Don't set SET_UNEXPECTED_FNDECL or SET_TERMINATE_FNDECL.
	(output_exception_table_entry): Delete unused array LABEL.
	(expand_internal_throw): Delete unused var PARAMS.
	(expand_start_catch_block): Delete unused var CLEANUP.
	(emit_exception_table): Delete unused var EH_NODE_DECL.
	(expand_builtin_throw): Delete unused vars UNWIND_AND_THROW and
	GOTO_UNWIND_AND_THROW.  Don't set them.
	(end_eh_unwinder): Add top decl.
	(pop_rtl_from_perm): Delete unused decl of PERMANENT_OBSTACK.
	(exception_section, push_rtl_perm, do_function_call,
	lang_interim_eh, push_eh_cleanup, eh_outer_context,
	expand_end_eh_spec, end_eh_unwinder): Declare as static.
	(saved_pc, saved_throw_type, saved_throw_value, saved_cleanup,
	throw_used): Likewise.
	* cp-tree.h (expand_end_eh_spec): Delete prototype.

	* search.c (dfs_mark, dfs_mark_vtable_path,
	dfs_unmark_vtable_path, dfs_mark_new_vtable,
	dfs_unmark_new_vtable, dfs_clear_search_slot,
	dfs_search_slot_nonempty_p, bfs_markedp, bfs_unmarkedp,
	bfs_marked_vtable_pathp, bfs_unmarked_vtable_pathp,
	bfs_marked_new_vtablep, bfs_unmarked_new_vtablep): #if 0 unused
	functions.
	(n_fields_searched, n_calls_lookup_field, n_calls_lookup_field_1,
	n_calls_lookup_fnfields, n_calls_lookup_fnfields_1,
	n_calls_get_base_type, n_outer_fields_searched, n_contexts_saved):
	Only define #ifdef GATHER_STATISTICS.
	(reinit_search_statistics): Only init some vars if GATHER_STATISTICS
	is defined.
	(vbase_decl): Delete var definition.
	(init_search): Delete old decl.
	(init_vbase_pointers): Delete building of VBASE_DECL, since it's
	never actually used.
	(expand_indirect_vtbls_init): Delete init of VBASE_DECL.
	(get_base_distance_recursive): Delete unused fourth arg
	BASETYPE_PATH.  Fix call .
	(get_base_distance): Fix call.
	(push_class_decls): Delete unused var ID.
	(make_memoized_table_entry): Declare as static.
	(breadth_first_search): Declare as static.
	(tree_has_any_destructor_p): Declare as static.
	(pop_class_decls): Delete unused arg pop_class_decls.
	* class.c (popclass): Fix call to pop_class_decls.
	* cp-tree.h (make_memoized_table_entry, breadth_first_search,
	tree_has_any_destructor_p): Delete prototypes.

	* rtti.c (build_ptmf_desc): Delete unused arg TYPE.
	(build_t_desc): Fix call.  Delete unused vars ELEMS and TT.
	(build_dynamic_cast): Delete unused local vars TMP1 and RETVAL.
	(build_user_desc): Delete unused var T.
	(build_class_desc): Delete unused vars T and OFF.
	(build_t_desc): Delete unused var NAME_STRING.
	(build_headof): Make static.
	(get_bad_cast_node): Likewise.
	(get_def_to_follow): Likewise.
	* cp-tree.h (init_type_desc): Add prototype.
	(build_headof): Remove prototype.
d5275 2
a5276 1
Thu Feb 22 00:54:22 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5278 2
a5279 2
	* pt.c (tsubst): Only look for matching decls at file scope for
	non-member functions.
d5281 1
a5281 2
	* call.c (build_scoped_method_call): Handle scoped destructor
	calls in templates.
d5283 6
a5288 1
	* decl.c (*_top_level): Also save previous_class_values.
d5290 2
a5291 3
	* pt.c (tsubst_expr): Support do {} while loops.
	* parse.y (simple_stmt): Likewise.
	* tree.def: Likewise.
d5293 4
a5296 3
	* method.c (build_overload_identifier): For a class nested in a
	template class, don't mangle in the template parms from our
	context.
d5298 4
a5301 99
	* lex.c, cp-tree.h: Remove support for template instantiations in
	the pending_inlines code.
	* pt.c: Remove dead functions and unused arguments.
	(uses_template_parms): TYPENAME_TYPEs always use template parms.
	* parse.y: Stop passing anything to end_template_decl.
	* tree.c (print_lang_statistics): Only print tinst info #ifdef
	GATHER_STATISTICS.

Wed Feb 21 16:57:33 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* init.c (expand_recursive_init{,_1}): Delete decls. 
	(sort_member_init): Delete unused var INIT.
	(emit_base_init): Delete unused var X.
	(build_offset_ref): Delete unused var CNAME.
	(sort_member_init): Delete unused var FIELDS_TO_UNMARK.
	(emit_base_init): Delete unused local var BASE.  Delete extern
	decl of IN_CHARGE_IDENTIFIER.
	(build_delete): Delete unused local var VIRTUAL_SIZE.

	* init.c (build_vec_delete): Delete unused third arg ELT_SIZE.
	(build_delete): Fix call.
	* decl2.c (delete_sanity): Likewise.
	* cp-tree.h (build_vec_delete): Update prototype.

	* typeck.c (common_base_type): Delete unused var TMP.
	(build_binary_op): Delete local var ARGS_SAVE.
	(build_array_ref): Delete unused var ITYPE.
	(c_expand_return): Delete unused var USE_TEMP.

	* typeck.c (compexcepttypes): Delete unused arg STRICT.
	(comptypes): Fix calls.
	* decl.c (duplicate_decls): Likewise.
	* cp-tree.h (compexcepttypes): Delete extra arg.

	* decl2.c (check_classfn): Delete unused second arg CNAME.
	* decl.c (start_decl, grokfndecl): Fix calls.
	* init.c (do_friend): Likewise.
	* cp-tree.h (check_classfn): Update prototype.

	* cp-tree.h (signature_error, import_export_vtable,
	append_signature_fields, id_in_current_class, mark_used,
	copy_assignment_arg_p): Add decls.
	* decl2.c (mark_used): Delete decl.

	* class.c (n_*): Wrap with #ifdef GATHER_STATISTICS.

	* class.c (get_vtable_entry): Diable unused function.
	(doing_hard_virtuals): Delete unused static global var.
	(finish_struct_1): Don't init DOING_HARD_VIRTUALS.
	(prepare_fresh_vtable): Delete unused vars PATH and RESULT.
	(overrides): Delete unused vars RETTYPE and BASE_RETTYPE.
	(modify_one_vtable): Delete unused var OLD_RTTI.
	(finish_struct_anon): Delete unused vars OFFSET and X.
	(finish_struct_bits): Delete unused var METHOD_VEC.
	(get_basefndecls): Delete unused var PURPOSE.  Delete unused
	for-scope local variable METHODS.

	* call.c (user_harshness): Delete unused/unneeded arg PARM.
	(ideal_candidate): Delete unused args BASETYPE and PARMS.
	(build_method_call): Delete unused args passed into ideal_candidate.
	(build_overload_call_real): Likewise.  Delete unused var OVERLOAD_NAME.
	* cp-tree.h (synthesize_method): Add decl.

	* decl.c (note_level_for_for): Give void return type.
	(pushdecl_nonclass_level): Likewise.
	(finish_function): Delete unused vars VFIELDS and ALLOCATED_THIS.
	(poplevel): Delete unused var IMPLICIT_TRY_BLOCK.
	(suspend_binding_level): Delete unused var LEVEL.
	(duplicate_decls): Delete unused var CTYPE.
	(duplicate_decls): Delete unused var PREVIOUS_C_DECL.
	(init_decl_processing): Delete unused vars FLOAT_ENDLINK and
	PTR_ENDLINK.
	(grokdeclarator): Delete unused var C.
	(grokdeclarator): Delete unused var SIZE_VARIES.
	(grokparms): Delete unused var SAW_VOID.
	(start_function): Delete unused var OLDDECL.
	(cplus_expand_expr_stmt): Delete unused var
	REMOVE_IMPLICIT_IMMEDIATELY. 

	* cp-tree.h (pushdecl_nonclass_level): Fix prototype.

	* Makefile.in (CONFLICTS): Update to 12 shift/reduce.

Wed Feb 21 00:06:17 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* tree.c (build_min): Set TREE_COMPLEXITY to lineno.
	(build_min_nt): Likewise.
	* pt.c (do_pushlevel): Emit line note.
	(do_poplevel): Return what we get from poplevel.
	(tsubst_expr): Set lineno from TREE_COMPLEXITY in stmt nodes.
	* parse.y: Use do_pushlevel and do_poplevel.
	* cp-tree.h: Declare do_poplevel.
	
	* cp-tree.h: Declare at_eof.
	* decl.c (cp_finish_decl): Pass it to rest_of_decl_compilation.
	* decl2.c (import_export_decl): Renamed from import_export_inline.
	(finish_file): Call it to do interface handling for statics.
	* pt.c (tsubst_copy): Call mark_used on variables and functions
	used here.
d5303 1
a5303 3
	* decl2.c (finish_file): Don't emit statics we can't generate.
	* pt.c (instantiate_decl): Don't set interface on instantiations
	we can't generate.
d5305 1
a5305 5
	* cp-tree.h (struct tinst_level): Change 'classname' to 'decl'.
	* tree.c (print_lang_statistics): Print max template depth.
	* pt.c (push_tinst_level): Dump entire instantiation context.
	(instantiate_class_template): Use it and pop_tinst_level.
	(instantiate_decl): Likewise.
d5307 1
a5307 2
	* call.c class.c cp-tree.h decl.c decl2.c error.c lex.c method.c
	pt.c ptree.c tree.def: Remove all traces of UNINSTANTIATED_P_TYPE.
d5309 5
a5313 1
Tue Feb 20 18:21:51 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5315 1
a5315 4
	* call.c class.c cp-tree.h cvt.c decl.c decl2.c error.c expr.c
	init.c lex.c method.c parse.y pt.c repo.c search.c spew.c tree.c
	tree.def typeck.c typeck2.c xref.c: Massive, systemic changes for
	the new template implementation.
d5317 10
a5326 1
Tue Feb 20 17:14:29 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5328 5
a5332 1
	* decl2.c (check_cp_case_value): Use STRIP_TYPE_NOPS.
d5334 1
a5334 1
Thu Feb 15 18:44:42 1996  Mike Stump  <mrs@@cygnus.com>
d5336 5
a5340 3
	* decl.c (cp_finish_decl): Delay emitting the debug information for
	a typedef that has been installed as the canonical typedef, if the
	type has not yet been defined.
d5342 1
a5342 1
Thu Feb 15 09:39:08 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5344 4
a5347 1
	* decl2.c (grokfield): Still call pop_nested_class for access decls.
d5349 3
a5351 1
Wed Feb 14 17:30:04 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5353 2
a5354 1
	* decl.c (lookup_label): Call label_rtx.
d5356 1
a5356 3
	* decl.c (make_binding_level): New function.
	(pushlevel, pushlevel_class): Call it instead of explicit
	duplicate calls to xmalloc.
d5358 3
a5360 2
	* decl.c (init_decl_processing): Delete useless build_pointer_type
	call.
d5362 1
a5362 5
	* decl.c (float_ftype_float, ldouble_ftype_ldouble): Add definitions.
	(sizet_ftype_string): Delete variable.
	(init_decl_processing): Add built-in functions fabsf, fabsl,
	sqrtf, sqrtl, sinf, sin, sinl, cosf, cos, cosl.  New local
	variable strlen_ftype, used for strlen.
d5364 1
a5364 1
Wed Feb 14 16:21:25 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5366 1
a5366 3
	* decl.c (push_to_top_level): Start from current_binding_level
	again for now; the stl hacks depend on g++ being broken in this
	way, and it'll be fixed in the template rewrite.
d5368 3
a5370 9
	* tree.def: Add USING_DECL.
	* decl2.c (do_class_using_decl): Implement.
	(grokfield): Pass access decls off to do_class_using_decl instead of
	grokdeclarator.
	* error.c (dump_decl): Handle USING_DECLs.
	* decl.c (grokdeclarator): Remove code for handling access decls.
	* class.c (finish_struct_1): Adjust accordingly, treat using-decls
	as access decls for now.
	(finish_struct): Don't check USING_DECLs for other uses of the name.
d5372 5
a5376 1
	* search.c (get_matching_virtual): Use cp_error_at.
d5378 1
a5378 1
Wed Feb 14 10:36:58 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5380 12
a5391 5
	* typeck.c (comptypes): Default COMP_TYPE_ATTRIBUTES to 1, to
	match c-typeck.c.
	(self_promoting_args_p): Move the check that TYPE is non-nil
	before trying to look at its main variant.
	(unsigned_type, signed_type): Add checking of DI/SI/HI/QI nodes.
d5393 3
a5395 5
	* cp-tree.h (DECL_WAITING_FRIENDS, SET_DECL_WAITING_FRIENDS):
	Delete macros.
	* init.c (xref_friend, embrace_waiting_friends): Delete functions.
	(do_friend): Delete call to xref_friend.
	* class.c (finish_struct_1): Delete call to embrace_waiting_friends.
d5397 1
a5397 1
	* typeck.c (convert_sequence): #if 0 unused function.
d5399 1
a5399 5
	* cp-tree.h (DECL_IN_MEMORY_P): New macro w/ the check that used to
	be in decl_in_memory_p.
	(decl_in_memory_p): Delete decl.
	* expr.c (decl_in_memory_p): Delete fn.
	* typeck.c (mark_addressable): Use DECL_IN_MEMORY_P.
d5401 1
a5401 1
	* decl.c (cp_finish_decl): Use DECL_IN_MEMORY_P.
d5403 3
a5405 1
Tue Feb 13 12:51:21 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5407 9
a5415 2
	* class.c (finish_struct_1): Check for a pure-specifier on a
	non-virtual function here.
d5417 2
a5418 3
	* decl2.c (grok_function_init): Don't check whether the function
	is virtual here.
	(grokfield): Don't call check_for_override here.
d5420 1
a5420 2
	* decl.c (push_to_top_level): Start from inner_binding_level,
	check class_shadowed in class levels.
d5422 9
a5430 1
Mon Feb 12 17:46:59 1996  Mike Stump  <mrs@@cygnus.com>
d5432 1
a5432 2
	* decl.c (resume_level): Ignore things that don't have names, instead
	of core dumping.
d5434 2
a5435 1
Mon Feb 12 15:47:44 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5437 1
a5437 1
	* decl2.c (grokfield): Set DECL_VINDEX properly for FUNCTION_DECLs.
d5439 2
a5440 1
Sat Feb 10 17:59:45 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5442 1
a5442 2
	* class.c (finish_struct_1): Set DECL_VINDEX properly on a
	synthesized dtor.
d5444 2
a5445 3
	* parse.y (complete_type_name): Bind global_scope earlier.
	(complex_type_name): Likewise.
	(qualified_type_name): Remove.
d5447 1
a5447 1
Thu Feb  8 15:15:14 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5449 2
a5450 4
	* decl.c (grokfndecl): Move code that looks for virtuals in base
	classes...
	* class.c (check_for_override): ... to a new function.
	(finish_struct_1): Call it.
d5452 2
a5453 1
	* cp-tree.h: Declare warn_sign_compare.
d5455 2
a5456 3
	* typeck.c (build_binary_op_nodefault): Check warn_sign_compare
	rather than extra_warnings to decide whether to warn about
	comparison of signed and unsigned.
d5458 1
a5458 2
	* decl2.c (lang_decode_option): Handle warn_sign_compare.  -Wall
	implies -Wsign-compare.  -Wall doesn't imply -W.
d5460 1
a5460 1
Wed Feb  7 15:27:57 1996  Mike Stump  <mrs@@cygnus.com>
d5462 1
a5462 2
	* typeck.c (build_component_ref): Fix to handle anon unions in base
	classes as well.
d5464 2
a5465 1
Wed Feb  7 14:29:12 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5467 13
a5479 12
	* class.c (resolves_to_fixed_type_p): Delete code dealing with
	a WITH_CLEANUP_EXPR, since we don't generate them any more.
	* cvt.c (build_up_reference): Likewise.
	* decl.c (grok_reference_init): Likewise.
	(cp_finish_decl): Likewise.
	* error.c (dump_expr): Likewise.
	* tree.c (real_lvalue_p): Likewise.
	(lvalue_p): Likewise.
	(build_cplus_new): Likewise.
	(unsave_expr_now): Likewise.
	* typeck.c (unary_complex_lvalue, build_modify_expr,
	c_expand_return): Likewise.
d5481 3
a5483 1
Tue Feb  6 13:39:22 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5485 1
a5485 13
	Make the C++ front-end pay attention to attributes for structures.
	* class.c (finish_struct): New argument ATTRIBUTES, passed down into
	finish_struct_1.
	(finish_struct_1): New argument ATTRIBUTES; call cplus_decl_attributes.
	Take out old round_up_size use and setting the DECL_ALIGN possibly
	using it.  Take out setting of TYPE_ALIGN to round_up_size, which
	can override what the attribute set.
	* cp-tree.h (finish_struct): Update prototype.
	* parse.y (template_instantiate_once): Pass a NULL_TREE for the
	attributes to finish_struct.
	(structsp): For a CLASS decl, add maybe_attribute to rule and pass that
	value down into finish_struct.
	* Makefile.in (CONFLICTS): Switch to 7 shift/reduce conflicts.
d5487 2
a5488 1
Tue Feb  6 13:12:15 1996  Per Bothner  <bothner@@kalessin.cygnus.com>
d5490 1
a5490 4
	* decl.c (poplevel):  Re-word dead for local handling.
	(pushdecl):  Remove useless DECL_DEAD_FOR_LOCAL test.
	(cp_finish_decl):  If is_for_scope, check for duplicates so
	we can disable is_for_scope.  Otherwise, preserve_temp_slots.
d5492 1
a5492 2
	* lex.c (do_identifier):  Use global binding in preference of
	dead for local variable.
d5494 2
a5495 1
Mon Feb  5 17:46:46 1996  Mike Stump  <mrs@@cygnus.com>
d5497 1
a5497 3
	* init.c (initializing_context): Handle anon union changes, the
	context where fields of anon unions can be initialized now has to be
	found by walking up the TYPE_CONTEXT chain.
d5499 2
a5500 1
Fri Feb  2 14:54:04 1996  Doug Evans  <dje@@charmed.cygnus.com>
d5502 2
a5503 4
	* decl.c (start_decl): #ifdef out code to set DECL_COMMON
	if ASM_OUTPUT{,_ALIGNED}_BSS is defined.
	(obscure_complex_init): If bss is supported, always set
	DECL_INITIAL to error_mark_node.
d5505 27
a5531 1
Thu Feb  1 16:19:56 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5533 1
a5533 2
	* init.c (is_friend): Make sure there's a context before we see if
	it's an aggr type.
d5535 2
a5536 1
Thu Feb  1 15:44:53 1996  Mike Stump  <mrs@@cygnus.com>
d5538 1
a5538 1
	* init.c (is_friend): Classes are not friendly with nested classes.
d5540 1
a5540 1
Thu Feb  1 15:27:37 1996  Doug Evans  <dje@@charmed.cygnus.com>
d5542 1
a5542 2
	* lex.c (check_newline): Pass last character read to HANDLE_PRAGMA,
	and record its result.
d5544 5
a5548 1
Thu Feb  1 09:27:01 1996  Mike Stump  <mrs@@cygnus.com>
d5550 2
a5551 10
	* class.c (finish_struct_anon): Switch around code to not move anon
	union elements around, nor mess up their contexts, nor offsets,
	instead we now build up the right number of COMPONENT_REFs for all
	the anon unions that may be present at build_component_ref time.
	* typeck.c (lookup_anon_field): New routine to handle field lookup
	on fields without names.  We find them, based upon their unique type
	instead.
	* typeck.c (build_component_ref): Allow FIELD_DECL components.
	Handle finding components in anonymous unions, and ensure that a
	COMPONENT_REF is built for each level as necessary.
d5553 3
a5555 1
Tue Jan 30 18:18:23 1996  Mike Stump  <mrs@@cygnus.com>
d5557 2
a5558 2
	* cvt.c (build_up_reference): Make the INDIRECT_BIND case come after
	code that ensures that copy ctors are used if appropriate.
d5560 3
a5562 1
Tue Jan 30 17:35:14 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5564 1
a5564 2
	* init.c (build_vec_delete): Only give an error if base isn't an
	error_mark_node.
d5566 2
a5567 1
Mon Jan 29 17:09:06 1996  Mike Stump  <mrs@@cygnus.com>
d5569 4
a5572 2
	* spew.c (do_aggr): `new struct S;' isn't a forward declaration.
	(yylex): If we see `new', keep slurping.
d5574 3
a5576 1
Thu Jan 25 18:31:36 1996  Mike Stump  <mrs@@cygnus.com>
d5578 1
a5578 153
	* class.c (finish_struct_1): Move code for handling anon unions...
	(finish_struct_anon): to here.  Fixup so that we do the offset
	calculations right, and so that the fields are physically moved to
	the containers's chain.

Thu Jan 25 18:27:37 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (grokdeclarator): Avoid trying to get an operand off an
	identifier node.

Wed Jan 24 11:25:30 1996  Jim Wilson  <wilson@@chestnut.cygnus.com>

	* typeck.c (pointer_int_sum): Use TYPE_PRECISION (sizetype) not
	POINTER_SIZE to agree with expr.c.

Thu Jan 25 13:01:23 1996  Mike Stump  <mrs@@cygnus.com>

	* search.c (lookup_field): Don't report ambiguities if protect is 0,
	instead return NULL_TREE.

Wed Jan 24 13:01:26 1996  Mike Stump  <mrs@@cygnus.com>

	* class.c (finish_struct_1): Call warn_hidden if we want warnings
	about overloaded virtual functions.
	(warn_hidden): New routine to warn of virtual functions that are
	hidden by other virtual functions, that are not overridden.
	(get_basefndecls): New routine, used by warn_hidden.
	(mark_overriders): New routine, used by warn_hidden.
	* search.c (get_matching_virtual): Remove old warning that just
	isn't very useful.

Tue Jan 23 12:26:10 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (output_builtin_tdesc_entries): #if 0 the function definition.

	* typeck.c (null_ptr_cst_p): Delete unused fn.
	(build_function_call_maybe): Delete unused fn.

	* expr.c (extract_init): #if 0 the code after unconditional return 0
	for now.

	Delete old cadillac code.
	* edsel.c: Remove file.
	* Make-lang.in (CXX_SRCS): Take edsel.c off the list.
	* Makefile.in (CXX_OBJS): Delete edsel.o.
	(edsel.o): Delete rule.
	* cp-tree.h (flag_cadillac): Delete var decl.
	* lang-options.h: Delete "-fcadillac" and "-fno-cadillac".
	* decl2.c (flag_cadillac): Delete var definition.
	(lang_decode_option): Delete handling of -fcadillac and -fno-cadillac.
	(grokfield): Delete code depending on flag_cadillac.
	(finish_anon_union): Likewise.
	* class.c (finish_struct_1): Likewise.
	(pushclass): Likewise.
	(popclass): Likewise.
	(push_lang_context): Likewise.
	(pop_lang_context): Likewise.
	* decl.c (init_decl_processing): Likewise.
	(start_decl): Likewise.
	(cp_finish_decl): Likewise.
	(xref_tag): Likewise.
	(finish_enum): Likewise.
	(start_function): Likewise.
	(finish_function): Likewise.
	(finish_stmt): Likewise.
	* lex.c (lang_init): Likewise.
	(check_newline): Likewise.

	* lex.c (do_pending_inlines): Delete synthesized method kludge.

	Delete defunct, ancient garbage collection implementation.
	* rtti.c: New file with the RTTI stuff from gc.c.
	* gc.c: Removed file (moved the remaining stuff into rtti.c).
	* Makefile.in (CXX_OBJS): Replace gc.o with rtti.o.
	(rtti.o): New rule, replacing gc.o.
	* Make-lang.in (CXX_SRCS): Replace gc.c with rtti.c.
	* cp-tree.h: Delete gc-related fn decls.
	(DECL_GC_OFFSET): Delete macro.
	(flag_gc): Delete extern decl.
	* decl.c (current_function_obstack_index): Delete var decl.
	(current_function_obstack_usage): Delete var decl.
	(start_function): Delete clearing of current_function_obstack_index
	and current_function_obstack_usage.
	(init_decl_processing): Delete code relying on -fgc.
	Delete call to init_gc_processing.
	(cp_finish_decl): Delete calls to build_static_gc_entry and
	type_needs_gc_entry.  Delete gc code setting DECL_GC_OFFSET.
	(store_parm_decls): Delete -fgc calls to cp_expand_decl_cleanup
	and to expand_expr of a __gc_main call.
	(maybe_gc_cleanup): Delete var decl.
	(finish_function): Delete call to expand_gc_prologue_and_epilogue.
	* decl2.c (flag_gc): Delete var decl.
	(lang_f_options): Delete offering of -fgc.
	(lang_decode_option): Delete -fgc and -fno-gc handling.
	(get_temp_regvar): Delete gc code.
	* init.c (build_new): Delete gc code.
	* lex.c (init_lex): Delete checking of flag_gc.

	* typeck.c (convert_arguments): Delete gc code.
	(build_component_addr): Delete -fgc warning.
	(build_modify_expr): Delete gc code.

	* decl2.c (build_push_scope): Delete fn.
	* cp-tree.h (build_push_scope): Delete decl.

	* search.c (clear_search_slots): Delete fn.
	* cp-tree.h (clear_search_slots): Delete decl.

	* search.c (tree_needs_constructor_p): Delete fn.
	* cp-tree.h (tree_needs_constructor_p): Delete decl.

	* tree.c (id_cmp): Delete fn.

	* tree.c (set_fnaddr_from_vtable_entry): Delete fn.
	* cp-tree.h (set_fnaddr_from_vtable_entry): Delete decl.

	* tree.c (decl_value_member): Delete fn.
	* cp-tree.h (decl_value_member): Delete decl.

	* tree.c (list_hash_lookup_or_cons): Delete fn.
	* cp-tree.h (list_hash_lookup_or_cons): Delete decl.

	* method.c (cplus_exception_name): Delete fn.
	(EXCEPTION_NAME_{PREFIX, LENGTH}): Delete macros.

	* spew.c (shift_tokens): Delete fn.

Mon Jan 22 17:49:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (init_exception_processing): Pass 1 to needs_pop in calls
	to cp_finish_decl.
	* parse.y: Likewise.

Mon Jan 22 17:34:29 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* tree.c (build_cplus_staticfn_type): Delete function definition;
	never used.
	* cp-tree.h (build_cplus_staticfn_type): Delete decl.

	* tree.c (virtual_member): Delete function definition; never used.
	* cp-tree.h (virtual_member): Delete decl.

Fri Jan 19 18:03:14 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_component_ref): Handle getting vbase pointers
	out of complex multiple inheritance better.

Fri Jan 19 16:27:40 1996  Mike Stump  <mrs@@cygnus.com>

	* typeck.c (build_object_ref): Make sure we use the real type, not
	any reference type.

Fri Jan 19 16:01:47 1996  Mike Stump  <mrs@@cygnus.com>
d5580 2
a5581 2
	* tree.c (build_exception_variant): Don't create new types if we
	don't have to, also build new types on the right obstack.
d5583 4
a5586 1
Fri Jan 19 14:09:44 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5588 1
a5588 3
	* decl.c (store_bindings): Split out from push_to_top_level.
	(push_to_top_level): Call it for b->type_shadowed on class binding
	levels.
d5590 3
a5592 1
Fri Jan 19 13:53:14 1996  Mike Stump  <mrs@@cygnus.com>
d5594 2
a5595 8
	* search.c (expand_upcast_fixups): Fix so that offsets stored in
	vbase_offsets are always right.  Fixes a problem where virtual base
	upcasting and downcasting could be wrong during conversions on this
	during virtual function dispatch at ctor/dtor time when dynamic
	vtable fixups for deltas are needed.  This only sounds easier than
	it is.  :-)
	(fixup_virtual_upcast_offsets): Change to reflect new calling
	convention for expand_upcast_fixups.
d5597 2
a5598 1
Fri Jan 19 12:23:08 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5600 3
a5602 2
	* decl2.c (grokbitfield): Strip the NOPs from WIDTH before we
	check that it's usable as the bitfield width.
d5604 1
a5604 1
Wed Jan 17 21:22:40 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5606 1
a5606 3
	* decl2.c (grokfield): Call cplus_decl_attributes with the attrlist.
	Pass a null tree to grokdeclarator for its ATTRLIST arg, since it's
	only ever used for functions in it.
d5608 2
a5609 1
Wed Jan 17 12:10:38 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5611 1
a5611 3
	* parse.y (qualified_type_name): Use the TYPE_DECL, not the type.
	(nested_type): Likewise.
	(nested_name_specifier): Use lastiddecl.
d5613 12
a5624 4
	* decl.c (grokdeclarator): Adjust accordingly.
	* init.c (expand_member_init): Likewise.
	* parse.y (base_class): Likewise.
	* typeck2.c (build_functional_cast): Likewise.
d5626 1
a5626 2
	* typeck2.c (build_functional_cast): Fill in name after we've
	checked for non-aggr type.
d5628 2
a5629 1
Wed Jan 17 10:18:01 1996  Mike Stump  <mrs@@cygnus.com>
d5631 2
a5632 1
	* decl2.c (warn_pointer_arith): Default to on.
d5634 3
a5636 1
Tue Jan 16 12:45:38 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5638 3
a5640 3
	* lex.c (is_rid): New function.
	* decl.c (grokdeclarator): Diagnose reserved words used as
	declarator-ids.
d5642 5
a5646 1
Tue Jan 16 11:39:40 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5648 1
a5648 1
	* tree.c (get_decl_list): Don't lose cv-quals.
d5650 1
a5650 2
	* decl.c (grokdeclarator): Fix SCOPE_REF handling and diagnose
	typespecs used as declarator-ids.
d5652 1
a5652 1
Tue Jan 16 11:09:42 1996  Mike Stump  <mrs@@cygnus.com>
d5654 1
a5654 2
	* decl.c (poplevel): When poping a level, don't give a warning for
	any subblocks that already exist.
d5656 5
a5660 1
Tue Jan 16 00:25:33 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5662 1
a5662 1
	* typeck.c (build_object_ref): Finish what I started.
d5664 2
a5665 1
	* parse.y (qualified_type_name): Don't check TYPE_BUILT_IN.
d5667 2
a5668 1
	* decl2.c (constructor_name_full): Handle TEMPLATE_TYPE_PARMs.
d5670 2
a5671 2
	* decl.c (grokdeclarator): Also accept TEMPLATE_TYPE_PARM as a
	scope.
d5673 1
a5673 1
Mon Jan 15 16:19:32 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5675 2
a5676 1
	* decl.c (xref_tag): Handle passing a type in directly.
d5678 1
a5678 18
	* parse.y (qualified_type_name): Pull out the type.
	(nested_type): Likewise.
	Take types directly instead of as identifiers.
	* call.c (build_scoped_method_call): Take types directly instead of
	as identifiers.
	* decl.c (xref_basetypes): Likewise.
	* init.c (expand_member_init): Likewise.
	(build_member_call): Likewise.
	(build_offset_ref): Likewise.
	* typeck2.c (build_scoped_ref): Likewise, remove bogus code.
	* method.c (do_build_assign_ref): Likewise.
	* decl.c (grokdeclarator): Handle a type appearing as the
	declarator-id for constructors.
	* method.c (do_build_copy_constructor): current_base_init_list now
	uses the types directly, not their names.
	* init.c (sort_base_init): Likewise.
	(expand_member_init): Likewise.
	* init.c (is_aggr_type): New function, like is_aggr_typedef.
d5680 2
a5681 1
Mon Jan 15 08:45:01 1996  Jeffrey A Law  <law@@cygnus.com>
d5683 1
a5683 2
	* tree.c (layout_basetypes): Call build_lang_field_decl instead
	of build_lang_decl if first arg is a FIELD_DECL.
d5685 4
a5688 1
Thu Jan 11 14:55:07 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5690 4
a5693 4
	* decl.c (cp_finish_decl): Only clear TREE_USED if DECL_NAME is
	non-empty.
	* except.c (expand_start_catch_block): Set TREE_USED to avoid
	warnings about the catch handler.
d5695 2
a5696 1
Mon Jan  8 17:35:12 1996  Jason Merrill  <jason@@yorick.cygnus.com>
d5698 4
a5701 2
	* typeck.c (build_modify_expr): Use a COMPOUND_EXPR instead of
	expand_target_expr.
d5703 2
a5704 1
Thu Jan  4 12:30:32 1996  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5706 1
a5706 24
	Fix access control to use trees rather than integers.
	* class.c (access_{default, public, protected, private,
	default_virtual, public_virtual, private_virtual}_node): Add
	definitions.
	(init_class_processing): Do creation of those nodes.
	* cp-tree.h (access_type): Delete enum decl.
	(access_{default, public, protected, private, default_virtual,
	public_virtual, private_virtual}_node): Add decls.
	(compute_access): Change return type.
	* search.c (compute_access): Have tree return type, instead of enum.
	(lookup_field): Declare THIS_V and NEW_V to be tree nodes.
	* lex.c (real_yylex): Use yylval.ttype for giving the value of the
	access_* node for each of RID_{PUBLIC, PRIVATE, PROTECTED}.
	* parse.y (VISSPEC): Make ttype rather than itype.
	(base_class_access_list): Likewise.
	* *.[cy]: Change all refs of `access_public' to `access_public_node',
	etc.
	* call.c (build_method_call): Make ACCESS be a tree.
	* class.c (alter_access, finish_struct_1, filter_struct): Likewise.
	* cvt.c (convert_to_aggr): Likewise.
	* init.c (build_offset_ref, resolve_offset_ref, build_delete):
	Likewise.
	* method.c (hack_identifier): Likewise.
	* typeck.c (build_component_ref_1, build_component_ref): ): Likewise.
d5708 1
a5708 1
Thu Jan  4 11:02:20 1996  Mike Stump  <mrs@@cygnus.com>
d5710 1
a5710 3
	* typeck.c (pointer_int_sum, pointer_diff): Make code agree with C
	frontend, and make it more consistent with respect to
	warn_pointer_arith.
d5712 1
a5712 1
Tue Jan  2 00:13:38 1996  Rusty Russell  <rusty@@adelaide.maptek.com.au>
d5714 1
a5714 1
	* decl.c (pushdecl): Check for duplicate parameter names.
d5716 2
a5717 1
Wed Jan  3 09:25:48 1996  Mike Stump  <mrs@@cygnus.com>
d5719 1
a5719 1
	* decl.c (expand_static_init): Call assemble_external for atexit.
d5721 1
a5721 1
Wed Jan  3 07:55:19 1996  Mike Stump  <mrs@@cygnus.com>
d5723 1
a5723 7
	* except.c (do_unwind): Remove some generated dead code.
	(eh_outer_context): New routine, factor out some common code from
	expand_builtin_throw and end_eh_unwinder.  Add code to do return
	address masking for the PA.
	(expand_builtin_throw): Use eh_outer_context instead of open coding
	it here.
	(end_eh_unwinder): Likewise.
d5725 3
a5727 1
Tue Jan  2 17:00:56 1996  Mike Stump  <mrs@@cygnus.com>
d5729 1
a5729 2
	* except.c (expand_throw): Call assemble_external for __empty, if we
	use it.
d5731 2
a5732 1
Thu Dec 28 11:13:15 1995  Mike Stump  <mrs@@cygnus.com>
d5734 1
a5734 3
	* except.c (expand_builtin_throw): Use RETURN_ADDR_OFFSET instead of
	NORMAL_RETURN_ADDR_OFFSET.
	(end_eh_unwinder): Likewise.
d5736 1
a5736 1
Wed Dec 27 22:18:16 1995  Mike Stump  <mrs@@cygnus.com>
d5738 2
a5739 3
	* gc.c (build_dynamic_cast): Make sure we don't cast away const
	when dealing with references, and make sure we handle dynamic
	casting to a cv qualified reference.
d5741 2
a5742 1
Thu Dec 21 23:50:35 1995  Mike Stump  <mrs@@cygnus.com>
d5744 1
a5744 6
	* except.c (struct eh_context): New structure top hold eh context
	information.
	(push_eh_context): New routine.
	(pop_eh_context): Likewise.
	* decl.c (push_cp_function_context): Use them.
	(pop_cp_function_context): Likewise.
d5746 2
a5747 1
Wed Dec 20 12:42:51 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d5749 2
a5750 2
	* decl2.c (finish_file): Also prune uninteresting functions in the
	inline emission loop.
d5752 1
a5752 1
Wed Dec 20 02:32:07 1995  Jeffrey A Law  <law@@cygnus.com>
d5754 2
a5755 2
	* sig.c (build_signature_table_constructor): Mark functions
	in the signature as referenced.
d5757 3
a5759 1
Tue Dec 19 22:36:56 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d5761 2
a5762 2
	* decl2.c (finish_file): Do all the vtable/synthesis stuff before
	the inline emission stuff.
d5764 1
a5764 1
Mon Dec 18 15:51:33 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d5766 2
a5767 6
	* cp-tree.h, decl2.c (flag_weak): New flag to control the use of
	weak symbols.	
	* lang-options.h: Add -f{no-,}weak.
	* decl.c (init_decl_processing): If the target does not support weak
	symbols, don't use them.
	* decl2.c, pt.c: s/SUPPORTS_WEAK/flag_weak/.
d5769 3
a5771 1
Sun Dec 17 21:13:23 1995  Rusty Russell  <rusty@@adelaide.maptek.com.au>
d5773 4
a5776 1
	* init.c (expand_member_init): warning for base init after members.
d5778 3
a5780 1
Fri Dec 15 15:32:18 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d5782 2
a5783 2
	* cvt.c (build_expr_type_conversion): Don't convert to a reference
	type.
d5785 2
a5786 1
Thu Dec 14 16:05:58 1995  Mike Stump  <mrs@@cygnus.com>
d5788 1
a5788 2
	* method.c (report_type_mismatch): Improve wording for volatile
	mismatches.
d5790 2
a5791 1
Thu Dec 14 14:16:26 1995  Mike Stump  <mrs@@cygnus.com>
d5793 2
a5794 31
	* init.c (expand_aggr_init_1): Use expand_aggr_init_1 instead of
	expand_assignment, as the later doesn't handle things that have
	copy constructors well.  The compiler would do bitwise copying,
	instead of ctor calling in some cases.

Wed Dec 13 17:05:54 PST 1995  Paul Eggert  <eggert@@twinsun.com>

	* g++.c (my_strerror): Return "cannot access" if errno is 0.
	(pfatal_with_name, perror_exec): Don't assume that
	the returned value from my_strerror contains no '%'s.
	(concat): Remove.
	(sys_nerror): Declare only if HAVE_STRERROR is not defined.

Wed Dec 13 16:22:38 1995  Jason Merrill  <jason@@yorick.cygnus.com>

	Lose CLASSTYPE_METHODS/DECL_NEXT_METHOD chain; make
	TYPE_METHODS/TREE_CHAIN mean what they used to.	
	* decl2.c (constructor_name_full): Refer to CLASSTYPE_METHOD_VEC
	instead of TYPE_METHODS.
	* decl.c (duplicate_decls): Lose references to DECL_NEXT_METHOD.
	* tree.c (tree_copy_lang_decl_for_deferred_output): Likewise.
	* cp-tree.h (CLASSTYPE_METHODS): Lose.
	(CLASSTYPE_METHOD_VEC): Point to lang_spec->methods instead of
	TYPE_METHODS.
	(struct lang_decl): Lose next_method field.
	(DECL_NEXT_METHOD): Lose.
	* class.c (finish_struct_methods): Don't mess with TYPE_METHODS.
	(finish_struct): Just use TYPE_METHODS; we don't need fn_fields
	anymore.
	(finish_struct_methods): Don't mess with the TREE_CHAINs in
	fn_fields.
d5796 1
a5796 2
	* search.c (add_conversions): Don't use TREE_CHAIN to traverse method
	vector.
d5798 2
a5799 2
	* call.c (build_method_call): Synthesize here even when not inlining.
	* typeck.c (build_function_call_real): Likewise.
d5801 2
a5802 1
Wed Dec 13 15:02:39 1995  Ian Lance Taylor  <ian@@cygnus.com>
d5804 2
a5805 3
	* cp/lex.c (check_newline): If DBX_DEBUGGING_INFO and write_symbols
	== DBX_DEBUG, call dbxout_start_new_source_file and
	dbxout_resume_previous_source_file when appropriate.
d5807 1
a5807 1
Tue Dec 12 20:38:55 1995  Mike Stump  <mrs@@cygnus.com>
d5809 2
a5810 2
	* except.c (start_anon_func): Push to the top level.
	(end_anon_func): Pop from the top level.
d5812 1
a5812 1
Mon Dec 11 18:56:14 1995  Mike Stump  <mrs@@cygnus.com>
d5814 2
a5815 8
	* cp-tree.h (build_cleanup): New routine to build cleanups.
	* decl.c (expand_static_init): Use build_cleanup to build a cleanup
	call at ctor time and use atexit to run it later.
	* decl2.c (build_cleanup): New routine, taken from finish_file.
	(finish_file): Use build_cleanup instead, and don't put function
	local statics in global dtor list.
	
Wed Dec  6 14:34:29 1995  Mike Stump  <mrs@@cygnus.com>
d5817 1
a5817 2
	* except.c (expand_throw): Ensure that we have cleanups, if we try
	and expand cleanups.
d5819 3
a5821 1
Wed Dec  6 11:48:21 1995  Mike Stump  <mrs@@cygnus.com>
d5823 1
a5823 69
	* except.c (expand_throw): Add logic to manage dynamic cleanups for
	the EH object.
	(expand_end_catch_block): Use the magic of expand_goto, instead of
	emit_jump so that we get the cleanup for any catch clause parameter
	and the cleanup for the exception object.  Update to reflect label
	changes.
	(push_eh_cleanup): New routine to register a cleanup for an
	exception object.
	(empty_fndecl): Used to default cleanup actions to
	nothing.
	(init_exception_processing): Setup empty_fndecl.  Setup
	saved_cleanup.
	(expand_start_catch_block): Update to reflect label changes.  Call
	push_eh_object to register the cleanup for the EH object.
	(start_anon_func): New routine to start building lambda expressions
	from trees.
	(end_anon_func): New routine to end them.
	(struct labelNode): Change so that we can use tree labels, or rtx
	labels.
	(saved_cleanup): Object to check for dynamic cleanups for the
	exception handling object.
	(push_label_entry): Change so that we can use tree labels, or rtx
	labels.
	(pop_label_entry): Likewise.
	(top_label_entry): Likewise.
	(expand_start_all_catch): Use tree label instead of rtx label, so
	that we can get the magic of expand_goto.
	(expand_end_all_catch): Update to reflect label changes.

	* class.c (build_vfn_ref): Remove building_cleanup logic, as we now
	use UNSAVE_EXPRs.
	typeck.c (get_member_function_from_ptrfunc): Remove remnants of
	building_cleanup logic, as we now use UNSAVE_EXPRs.
	* cp-tree.h (unsave_expr): Declare it.
	* decl.c (building_cleanup): Remove.
	(maybe_build_cleanup): Remove building_cleanup logic, and use
	UNSAVE_EXPR instead.

Sun Dec  3 01:34:58 1995  Mike Stump  <mrs@@cygnus.com>

	* gc.c (build_t_desc): Update error message to say <typeinfo>.

Thu Nov 30 12:30:05 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>

	* decl.c (pushdecl): Only warn about shadowing a local variable if
	warn_shadow is true.

Sun Nov 26 16:06:55 1995  Rusty Russell  <rusty@@adelaide.maptek.com.au>

	* typeck.c (build_binary_op_nodefault): Added warning about
	comparisons between different enum types with -Wall, unless
	-fenum-int-equiv set.

Wed Nov 22 15:44:02 1995  Mike Stump  <mrs@@cygnus.com>

	* class.c (finish_struct_1): Skip down to the inner type in
	multidimensional arrays.  Ensures ctors will be made for types that
	need constructing.

Wed Nov 22 14:19:22 1995  Mike Stump  <mrs@@cygnus.com>

	* decl.c (last_dtor_insn): New to track the last compiler generated
	insn in a dtor.
	(store_parm_decls): Set it.
	(finish_function): Use it to see if the dtor is empty.  Avoid doing
	vtable setup all the time, if we can.
	(struct cp_function): Add last_dtor_insn.
	(push_cp_function_context): Save it.
	(pop_cp_function_context): Restore it.
d5825 90
a5914 1
Wed Nov 22 11:52:19 1995  Paul Russell  <Rusty.Russell@@adelaide.maptek.com.au>
d5916 2
a5917 2
	* typeck.c (build_unary_op): Set TREE_NO_UNUSED_WARNING to avoid
	warnings.
d5919 2
a5920 1
Tue Nov 21 17:15:23 1995  Mike Stump  <mrs@@cygnus.com>
d5922 2
a5923 3
	* typeck.c (expand_target_expr): Make sure targets get put into the
	current temp_slot_level, so that the free_temp_slots call will reuse
	them.
d5925 2
a5926 1
Tue Nov 21 13:32:03 1995  Mike Stump  <mrs@@cygnus.com>
d5928 1
a5928 4
	* class.c (finish_struct_1): Delay delta fixups for virtual bases
	until after we have done the hard virtuals, to avoid a bogus `every
	virtual function must have a unique final overrider' for virtual
	functions that are only overridden by hard virtuals.
d5930 2
a5931 1
Thu Nov  9 13:35:30 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d5933 2
a5934 2
	* pt.c (do_function_instantiation): Don't try to find a file-scope
	template for a member function.
d5936 1
a5936 1
Tue Nov 14 06:20:35 1995  Mike Stump  <mrs@@cygnus.com>
d5938 1
a5938 1
	* g++.c (main): Add handling of -nodefaultlibs.
d5940 2
a5941 1
Mon Nov 13 15:45:34 1995  Mike Stump  <mrs@@cygnus.com>
d5943 2
a5944 14
	* cp-tree.h (INDIRECT_BIND): Add a way for the frontend to
	distinguish between direct bindings of reference variables, and
	indirect bindings of reference variables.
	* cvt.c (build_up_reference): Use it.
	* typeck.c (convert_arguments): Use it to indicate this is an
	indirect binding.
	* decl.c (cp_finish_decl): Ensure that we reuse stack slots as fast
	as they are unused.
	(expand_static_init): Likewise.
	(cplus_expand_expr_stmt): Likewise.
	* decl2.c (finish_file): Likewise.
	* init.c (perform_member_init): Likewise.
	(emit_base_init): Likewise.
	(expand_aggr_vbase_init_1): Likewise.
d5946 1
a5946 1
Fri Nov 10 09:18:09 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5948 1
a5948 5
	* decl.c (push_namespace): Rewrite to use build_lang_decl, so we
	get a DECL_LANG_SPECIFIC node.
	* cp-tree.h (lang_decl_flags): Add new member `level'.
	(NAMESPACE_LEVEL): Don't use decl.arguments, instead use the
	decl_flags level member.
d5950 1
a5950 1
Mon Nov  6 18:36:13 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5952 2
a5953 2
	* call.c (build_method_call): Make sure instance has a
	TYPE_LANG_SPECIFIC node before we dive into it.  
d5955 1
a5955 1
Sat Nov  4 20:01:52 1995  Jason Molenda  <crash@@phydeaux.cygnus.com>
d5957 1
a5957 1
	* method.c (make_thunk): use TREE_SET_CODE to set thunk's tree code.
d5959 2
a5960 1
Thu Nov  2 17:56:57 1995  Mike Stump  <mrs@@cygnus.com>
d5962 1
a5962 2
	* decl.c (duplicate_decls): When smashing decls, smash staticness in
	the usual way.
d5964 2
a5965 1
Thu Nov  2 16:44:02 1995  Mike Stump  <mrs@@cygnus.com>
d5967 1
a5967 3
	* decl.c (poplevel): Handle the merging of subblocks of cleanups
	when finishing blocks that have already been created (usually due to
	the fixup goto code).  Fixes bad debugging information.
d5969 2
a5970 1
Wed Nov  1 12:33:53 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d5972 1
a5972 2
	* method.c (hack_identifier): Don't abort when we get a TREE_LIST
	that's not a list of overloaded functions.
d5974 2
a5975 1
Wed Nov  1 11:38:58 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5977 2
a5978 2
	* decl2.c (mark_vtable_entries): Check DECL_LANG_SPECIFIC on fn
	before trying to use DECL_ABSTRACT_VIRTUAL_P.
d5980 2
a5981 1
Tue Oct 31 11:56:55 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d5983 1
a5983 13
	* decl2.c (mark_used): New function for hooking into setting of
	TREE_USED on decls.
	* call.c (build_method_call): Use it.
	* class.c (instantiate_type): Likewise.
	* init.c (build_offset_ref): Likewise.  Don't call assemble_external
	for all like-named functions.
	* method.c (hack_identifier): Likewise.
	(emit_thunk): Don't call assemble_external.
	(make_thunk): Create thunk as a FUNCTION_DECL so that it
	gets the right mode and ENCODE_SECTION_INFO works.
	
	* parse.y: Use mark_used.  Pass operator names to do_identifier.
	* lex.c (do_identifier): Handle operator names.
d5985 4
a5988 1
	* decl2.c (grokclassfn): Tweak __in_chrg attributes.
d5990 1
a5990 1
Thu Oct 26 16:45:58 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d5992 2
a5993 2
	* errfn.c: Include stdio.h.
	(cp_sprintf): Take out decl of sprintf, and cast sprintf to errorfn*.
d5995 3406
a9400 1
Wed Oct 25 18:58:41 1995  Mike Stump  <mrs@@cygnus.com>
d9402 1
a9402 2
	* typeck2.c (digest_init): Always convert initializers to the
	right type.
d9404 1
a9404 1
Wed Oct 25 13:25:24 1995  Mike Stump  <mrs@@cygnus.com>
d9406 2
a9407 2
	* init.c (member_init_ok_or_else): Don't allow member initializers
	for indirect members, as it is invalid.
d9409 2
a9410 1
Wed Oct 25 11:35:28 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d9412 1
a9412 1
	* decl.c (grokdeclarator): Don't allow `friend signed ()'.
d9414 2
a9415 1
Fri Oct 20 10:30:59 1995  Mike Stump  <mrs@@cygnus.com>
d9417 1
a9417 2
	* parse.y (for.init.statement): Catch compound statements inside for
	initializations, if we're being pedantic.
d9419 1
a9419 1
Fri Oct 20 10:03:42 1995  Mike Stump  <mrs@@cygnus.com>
d9421 3
a9423 2
	* decl.c (lookup_tag): Return NULL_TREE if we don't find what we are
	looking for.
d9425 2
a9426 1
Thu Oct 19 14:26:10 1995  Mike Stump  <mrs@@cygnus.com>
d9428 2
a9429 2
	* error.c (dump_expr): Don't core dump when a boolean expression is
	used as a default argument.
d9431 1
a9431 1
Thu Oct 19 10:36:30 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d9433 3
a9435 2
	* class.c (finish_struct_bits): Check aggregate_value_p instead of
	RETURN_IN_MEMORY.
d9437 1
a9437 1
Wed Oct 18 18:12:32 1995  Jason Merrill  <jason@@yorick.cygnus.com>
d9439 5
a9443 2
	* class.c (finish_struct_bits): Also set TREE_ADDRESSABLE on a
	BLKmode type that would otherwise be returned in registers.
d9445 2
a9446 1
Mon Oct 16 12:32:19 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d9448 2
a9449 3
	* g++.c (WITHLIBC): New macro.
	(main): Declare saw_libc.  Use WITHLIBC if `-lc' was used; set
	saw_libc and pass it at the end if it was set.
d9451 1
a9451 1
Wed Oct 11 16:30:34 1995  Brendan Kehoe  <brendan@@lisa.cygnus.com>
d9453 1
a9453 5
	* parse.y (fn.def1): Call split_specs_attrs in
	declmods notype_declarator case.

Use a consistent time stamp format in ChangeLog entries.
Not everyone has Emacs 20 yet, so stick with Emacs 19 format for now.
d9456 3
a9458 1
add-log-time-format: current-time-string
@


1.1.1.3
log
@FSF gcc 2.8.1
@
text
@a0 31
Mon Nov 24 12:15:55 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* typeck.c (mark_addressable): Don't assume a FUNCTION_DECL
	has DECL_LANG_SPECIFIC.

Mon Dec  8 23:17:13 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (copy_args_p): Handle copy elision for types with virtual
 	bases.
  	* call.c (build_over_call): Likewise.

Tue Dec  2 01:37:19 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* exception.cc (__cp_pop_exception): Lose handler arg.
	* except.c (do_pop_exception): Likewise.
	(push_eh_cleanup): Let the cleanup mechanism supply the handler.
	(expand_end_catch_block): Likewise.

Sun Feb  8 23:47:38 1998  scott snyder  <sss@@d0linux01.fnal.gov>

	* method.c (make_thunk): Avoid name buffer overflow.

Fri Feb  6 21:32:25 1998  Richard Kenner  <kenner@@vlsi1.ultra.nyu.edu>

	* config-lang.in (diff_excludes): Use basename only.

Sun Jan 25 13:20:00 1998  Jason Merrill  <jason@@rhino.cygnus.com>

	* decl.c (cp_finish_decl): When bailing on a comdat variable, also
	unset DECL_NOT_REALLY_EXTERN.

a4 15
Sat Dec 20 13:00:30 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (instantiate_decl): Defer all templates but inline functions.

Fri Dec 19 09:37:26 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* cp-tree.h (struct lang_decl_flags): Add comdat.
	(DECL_COMDAT): New macro.
	* decl.c (duplicate_decls): Propagate it.
	(cp_finish_decl): Handle it.
	* decl2.c (import_export_decl): Just set DECL_COMDAT on VAR_DECLs.

	* except.c (expand_start_catch_block): suspend_momentary for the
	terminate handler.

d16 4
d25 1
a25 1
Thu Nov 27 09:39:31 1997  Jason Merrill  <jason@@yorick.cygnus.com>
d27 3
a29 29
	* except.c: Call terminate without caching so many bits.

	* class.c: Remove static pending_hard_virtuals.
	(add_virtual_function): Take pointers to pending_virtuals
	and pending_hard_virtuals.
	(finish_struct_1): Pass them.  Declare pending_hard_virtuals.

1997-11-26  Mark Mitchell  <mmitchell@@usa.net>

	* pt.c (unify): Handle `void' template parameters in
	specializations.

Wed Nov 26 20:28:49 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* rtti.c (build_dynamic_cast): Handle template case here.
	(build_dynamic_cast_1): Not here.

	* typeck2.c (digest_init): Make copies where appropriate.

	* decl2.c (delete_sanity): resolve_offset_ref.

	* except.c (expand_throw): Call mark_used on the destructor.

	* except.c (expand_start_catch_block): Fix catching a reference
	to pointer.

Tue Nov 25 11:28:21 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Copy size to the saveable obstack.
a37 3
	* init.c (build_new): Stick a CLEANUP_POINT_EXPR inside the
 	TRY_CATCH_EXPR for now.

a45 42
Fri Nov 21 12:22:07 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* except.c (expand_start_catch_block): We only need the rethrow
 	region for non-sjlj exceptions.
	(expand_end_catch_block): Likewise.  Use outer_context_label_stack.

Thu Nov 20 14:40:17 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* method.c (build_decl_overload_real): Don't mess with global 
	placement delete.

	* init.c (build_new): Check for null throw spec, not nothrow_t.

	* decl.c (duplicate_decls): Don't complain about different exceptions
	from an internal declaration.

	* call.c (build_op_delete_call): Fix check for member fns again.

	* decl2.c (import_export_decl): Interface hackery affects
	virtual synthesized methods.

Wed Nov 19 18:24:14 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (start_decl): Don't just complain about a mismatched 
	scope, fix it.

	* decl.c (make_implicit_typename): Handle case where t is not
 	actually from context.
	* tree.c (get_type_decl): Lose identifier case.
	* spew.c (yylex): Lose useless call to identifer_typedecl_value.
	* parse.y (nonnested_type): Just use lookup_name.
	(complex_type_name): Just use IDENTIFIER_GLOBAL_VALUE.

Wed Nov 19 10:39:27 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* decl.c (make_implicit_typename): New fn.
	(lookup_name_real): Use it.  Use current_class_type as the context.

Mon Nov 17 23:42:03 1997  Bruno Haible <haible@@ilog.fr>

	* pt.c (do_poplevel): Don't prohibit jumps into this contour.

a49 2
	* call.c (build_op_delete_call): Fix handling of inherited delete.

a51 28
Sat Nov 15 00:30:51 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_op): Fix copy error.
	(build_op_new_call): New fn.
	(build_op_delete_call): New fn.
	* cp-tree.h: Declare them.
	* init.c (build_new): Use them.  Support placement delete.
	(build_x_delete): Use build_op_delete_call.
	(build_delete): Likewise.
	* decl2.c (delete_sanity): Likewise.
	(coerce_delete_type): Don't complain about placement delete.

Thu Nov 13 01:52:36 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_function_call): Remove unused 'obj' parm.
	* cp-tree.h, typeck.c: Adjust.

	* init.c (build_new): Make the cleanup last longer.
	(expand_vec_init): Call do_pending_stack_adjust.

Wed Nov 12 11:04:33 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* pt.c (do_type_instantiation): Fix typo.
	(mark_class_instantiated): If we support one_only but not weak 
	symbols, don't mark this as known.

	* init.c (build_new): Handle vec delete in EH cleanup.

a56 14
Wed Nov 12 00:48:16 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* init.c (build_new): Handle freeing allocated memory when the
	constructor throws.

	* call.c (build_new_method_call): Fix flags arg.

	* pt.c (do_type_instantiation): Don't try to instantiate
	member templates.
	(mark_decl_instantiated): If we support one_only but not
	weak symbols, mark this one_only.
	* decl2.c (import_export_vtable): Don't defer handling of vtables
	if MULTIPLE_SYMBOL_SPACES.

a64 29
Mon Nov 10 20:25:31 1997  Jason Merrill  <jason@@yorick.cygnus.com>

	* call.c (build_new_method_call): Handle getting a
 	TEMPLATE_ID_EXPR around a TEMPLATE_DECL.  Don't look for a field
 	if we got template parms.
	* typeck.c (build_x_function_call): Remember the TEMPLATE_ID_EXPR,
 	not just the args.
	* decl2.c (build_expr_from_tree): Tweak last change.
	* pt.c (tsubst_copy): Use get_first_fn instead of TREE_VALUE.
	(maybe_fold_nontype_arg): Split out from tsubst_copy.
	* tree.c (get_first_fn): Just return a TEMPLATE_ID_EXPR.

Mon Nov 10 20:08:38 1997  Kriang Lerdsuwanakij <lerdsuwa@@scf-fs.usc.edu>

	* pt.c (tsubst_copy): Handle explicit template arguments in 
	function calls.
	* typeck.c (build_x_function_call): Likewise.
	* decl2.c (build_expr_from_tree): Lookup function name if it 
	hasn't been done.

	* pt.c (tsubst): Instantiate template functions properly when 
	template parameter does not appear in function arguments and return 
	type.
	(comp_template_args): Handle member templates required by tsubst.

Mon Nov 10 20:08:29 1997  Bruno Haible  <bruno@@linuix.mathematik.uni-karlsruhe.de>

	* pt.c (coerce_template_parms): Tweak error message.

d121 5
a135 5

	* except.c (expand_builtin_throw) [!DWARF2_UNWIND_INFO]: Replace
	remaining use of saved_throw_type with a call to get_eh_type.

1997-10-31  Brendan Kehoe  <brendan@@lisa.cygnus.com>
@

