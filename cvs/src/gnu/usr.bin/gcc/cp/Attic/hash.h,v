head	1.3;
access;
symbols
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	FSF_2_8_1:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	99.05.26.16.28.15;	author espie;	state dead;
branches;
next	1.2;

1.2
date	98.03.03.21.34.58;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.06.14;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.06.14;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.25.57;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@So long, and thanks for all the bugs.
@
text
@/* C code produced by gperf version 2.5 (GNU C++ version) */
/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gxx.gperf  */
struct resword { char *name; short token; enum rid rid;};

#define TOTAL_KEYWORDS 103
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 16
#define MIN_HASH_VALUE 4
#define MAX_HASH_VALUE 195
/* maximum key range = 192, duplicates = 0 */

#ifdef __GNUC__
inline
#endif
static unsigned int
hash (str, len)
     register char *str;
     register int unsigned len;
{
  static unsigned char asso_values[] =
    {
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196,   0, 196,  80,  26,  28,
      44,   0,  49,  38,   6,  81, 196,   2,   0,  41,
      16,  47,   4,  31,  32,   5,   6,  62,  20,  96,
      17,  25, 196, 196, 196, 196, 196, 196,
    };
  register int hval = len;

  switch (hval)
    {
      default:
      case 7:
        hval += asso_values[str[6]];
      case 6:
      case 5:
      case 4:
        hval += asso_values[str[3]];
      case 3:
      case 2:
      case 1:
        hval += asso_values[str[0]];
        break;
    }
  return hval + asso_values[str[len - 1]];
}

#ifdef __GNUC__
inline
#endif
struct resword *
is_reserved_word (str, len)
     register char *str;
     register unsigned int len;
{
  static struct resword wordlist[] =
    {
      {"",}, {"",}, {"",}, {"",}, 
      {"else",  ELSE, NORID,},
      {"",}, 
      {"__real",  REALPART, NORID},
      {"",}, 
      {"__real__",  REALPART, NORID},
      {"",}, 
      {"true",  CXX_TRUE, NORID,},
      {"",}, 
      {"__asm__",  GCC_ASM_KEYWORD, NORID},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"this",  THIS, NORID,},
      {"",}, 
      {"extern",  SCSPEC, RID_EXTERN,},
      {"switch",  SWITCH, NORID,},
      {"template",  TEMPLATE, RID_TEMPLATE,},
      {"not",  '!', NORID,},
      {"",}, 
      {"__alignof__",  ALIGNOF, NORID},
      {"static_cast",  STATIC_CAST, NORID,},
      {"",}, 
      {"bool",  TYPESPEC, RID_BOOL,},
      {"private",  VISSPEC, RID_PRIVATE,},
      {"case",  CASE, NORID,},
      {"virtual",  SCSPEC, RID_VIRTUAL,},
      {"try",  TRY, NORID,},
      {"",}, {"",}, 
      {"compl",  '~', NORID,},
      {"public",  VISSPEC, RID_PUBLIC,},
      {"",}, 
      {"__inline",  SCSPEC, RID_INLINE},
      {"",}, 
      {"__inline__",  SCSPEC, RID_INLINE},
      {"class",  AGGR, RID_CLASS,},
      {"const",  CV_QUALIFIER, RID_CONST,},
      {"static",  SCSPEC, RID_STATIC,},
      {"__extension__",  EXTENSION, NORID},
      {"",}, 
      {"short",  TYPESPEC, RID_SHORT,},
      {"__imag__",  IMAGPART, NORID},
      {"delete",  DELETE, NORID,},
      {"__asm",  GCC_ASM_KEYWORD, NORID},
      {"xor",  '^', NORID,},
      {"not_eq",  EQCOMPARE, NORID,},
      {"xor_eq",  ASSIGN, NORID,},
      {"typename",  TYPENAME_KEYWORD, NORID,},
      {"typeid",  TYPEID, NORID,},
      {"",}, 
      {"__complex__",  TYPESPEC, RID_COMPLEX},
      {"false",  CXX_FALSE, NORID,},
      {"sizeof",  SIZEOF, NORID,},
      {"typeof",  TYPEOF, NORID,},
      {"__const__",  CV_QUALIFIER, RID_CONST},
      {"__volatile",  CV_QUALIFIER, RID_VOLATILE},
      {"",}, 
      {"__volatile__",  CV_QUALIFIER, RID_VOLATILE},
      {"__const",  CV_QUALIFIER, RID_CONST},
      {"catch",  CATCH, NORID,},
      {"__null",  CONSTANT, RID_NULL},
      {"protected",  VISSPEC, RID_PROTECTED,},
      {"",}, 
      {"signed",  TYPESPEC, RID_SIGNED,},
      {"",}, 
      {"__complex",  TYPESPEC, RID_COMPLEX},
      {"__alignof",  ALIGNOF, NORID},
      {"__wchar_t",  TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},
      {"double",  TYPESPEC, RID_DOUBLE,},
      {"const_cast",  CONST_CAST, NORID,},
      {"",}, 
      {"struct",  AGGR, RID_RECORD,},
      {"long",  TYPESPEC, RID_LONG,},
      {"or",  OROR, NORID,},
      {"__typeof__",  TYPEOF, NORID},
      {"or_eq",  ASSIGN, NORID,},
      {"for",  FOR, NORID,},
      {"__imag",  IMAGPART, NORID},
      {"enum",  ENUM, NORID,},
      {"",}, {"",}, 
      {"__label__",  LABEL, NORID},
      {"int",  TYPESPEC, RID_INT,},
      {"__signed__",  TYPESPEC, RID_SIGNED},
      {"signature",  AGGR, RID_SIGNATURE	/* Extension */,},
      {"do",  DO, NORID,},
      {"",}, 
      {"explicit",  SCSPEC, RID_EXPLICIT,},
      {"char",  TYPESPEC, RID_CHAR,},
      {"",}, 
      {"__attribute",  ATTRIBUTE, NORID},
      {"friend",  SCSPEC, RID_FRIEND,},
      {"__attribute__",  ATTRIBUTE, NORID},
      {"while",  WHILE, NORID,},
      {"reinterpret_cast",  REINTERPRET_CAST, NORID,},
      {"",}, 
      {"continue",  CONTINUE, NORID,},
      {"namespace",  NAMESPACE, NORID,},
      {"sigof",  SIGOF, NORID		/* Extension */,},
      {"",}, 
      {"volatile",  CV_QUALIFIER, RID_VOLATILE,},
      {"",}, 
      {"bitor",  '|', NORID,},
      {"typedef",  SCSPEC, RID_TYPEDEF,},
      {"void",  TYPESPEC, RID_VOID,},
      {"break",  BREAK, NORID,},
      {"",}, 
      {"new",  NEW, NORID,},
      {"return",  RETURN, NORID,},
      {"and_eq",  ASSIGN, NORID,},
      {"",}, {"",}, {"",}, 
      {"using",  USING, NORID,},
      {"",}, {"",}, 
      {"asm",  ASM_KEYWORD, NORID,},
      {"",}, {"",}, 
      {"and",  ANDAND, NORID,},
      {"mutable",  SCSPEC, RID_MUTABLE,},
      {"__typeof",  TYPEOF, NORID},
      {"union",  AGGR, RID_UNION,},
      {"",}, 
      {"if",  IF, NORID,},
      {"__signed",  TYPESPEC, RID_SIGNED},
      {"",}, {"",}, 
      {"goto",  GOTO, NORID,},
      {"",}, {"",}, 
      {"__sigof__",  SIGOF, NORID		/* Extension */,},
      {"float",  TYPESPEC, RID_FLOAT,},
      {"",}, {"",}, 
      {"default",  DEFAULT, NORID,},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"register",  SCSPEC, RID_REGISTER,},
      {"throw",  THROW, NORID,},
      {"",}, 
      {"bitand",  '&', NORID,},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"operator",  OPERATOR, NORID,},
      {"",}, 
      {"inline",  SCSPEC, RID_INLINE,},
      {"",}, 
      {"dynamic_cast",  DYNAMIC_CAST, NORID,},
      {"",}, {"",}, {"",}, 
      {"__signature__",  AGGR, RID_SIGNATURE	/* Extension */,},
      {"",}, {"",}, {"",}, 
      {"auto",  SCSPEC, RID_AUTO,},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"unsigned",  TYPESPEC, RID_UNSIGNED,},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        {
          register char *s = wordlist[key].name;

          if (*s == *str && !strcmp (str + 1, s + 1))
            return &wordlist[key];
        }
    }
  return 0;
}
@


1.2
log
@GCC 2.8.0 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 2
/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ../../../devo/gcc/cp/gxx.gperf  */
/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */
d5 1
a5 1
#define TOTAL_KEYWORDS 97
d9 2
a10 2
#define MAX_HASH_VALUE 219
/* maximum key range = 216, duplicates = 0 */
d22 13
a34 13
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
     220, 220, 220, 220, 220,   0, 220,  88,  16,  19,
      52,   0,   9,  72,   1,  77, 220,   0,   0,  38,
      13,  44,  38,  30,  27,  57,   1,  14,   0,   2,
       2,   7, 220, 220, 220, 220, 220, 220,
d51 1
d68 5
d75 7
a81 6
      {"while",  WHILE, NORID,},
      {"virtual",  SCSPEC, RID_VIRTUAL,},
      {"",}, {"",}, 
      {"try",  TRY, NORID,},
      {"",}, {"",}, {"",}, {"",}, 
      {"typeof",  TYPEOF, NORID,},
d83 4
a86 2
      {"new",  NEW, NORID,},
      {"extern",  SCSPEC, RID_EXTERN,},
d88 1
a88 1
      {"",}, {"",}, 
d90 2
a91 5
      {"__alignof__",  ALIGNOF, NORID},
      {"",}, 
      {"typedef",  SCSPEC, RID_TYPEDEF,},
      {"",}, 
      {"__extension__",  EXTENSION, NORID},
d93 2
a94 2
      {"__alignof",  ALIGNOF, NORID},
      {"xor",  '^', NORID,},
d99 4
d104 6
a110 7
      {"for",  FOR, NORID,},
      {"",}, {"",}, 
      {"continue",  CONTINUE, NORID,},
      {"",}, 
      {"catch",  CATCH, NORID,},
      {"private",  VISSPEC, RID_PRIVATE,},
      {"",}, 
a111 10
      {"template",  TEMPLATE, RID_TEMPLATE,},
      {"not_eq",  EQCOMPARE, NORID,},
      {"",}, {"",}, 
      {"throw",  THROW, NORID,},
      {"__const",  TYPE_QUAL, RID_CONST},
      {"__const__",  TYPE_QUAL, RID_CONST},
      {"__volatile",  TYPE_QUAL, RID_VOLATILE},
      {"__wchar_t",  TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},
      {"__volatile__",  TYPE_QUAL, RID_VOLATILE},
      {"delete",  DELETE, NORID,},
a112 9
      {"return",  RETURN, NORID,},
      {"__typeof__",  TYPEOF, NORID},
      {"compl",  '~', NORID,},
      {"public",  VISSPEC, RID_PUBLIC,},
      {"__asm__",  GCC_ASM_KEYWORD, NORID},
      {"switch",  SWITCH, NORID,},
      {"",}, 
      {"friend",  SCSPEC, RID_FRIEND,},
      {"__typeof",  TYPEOF, NORID},
d114 1
a114 1
      {"static_cast",  STATIC_CAST, NORID,},
d117 15
a131 1
      {"or",  OROR, NORID,},
d133 1
a134 2
      {"union",  AGGR, RID_UNION,},
      {"char",  TYPESPEC, RID_CHAR,},
d136 3
d140 2
d143 2
d146 3
a148 3
      {"const",  TYPE_QUAL, RID_CONST,},
      {"static",  SCSPEC, RID_STATIC,},
      {"reinterpret_cast",  REINTERPRET_CAST, NORID,},
d151 2
a152 2
      {"__signed__",  TYPESPEC, RID_SIGNED},
      {"if",  IF, NORID,},
d154 1
a154 1
      {"short",  TYPESPEC, RID_SHORT,},
d156 2
a157 2
      {"bitor",  '|', NORID,},
      {"signature",  AGGR, RID_SIGNATURE	/* Extension */,},
d159 3
a161 4
      {"__sigof__",  SIGOF, NORID		/* Extension */,},
      {"volatile",  TYPE_QUAL, RID_VOLATILE,},
      {"__label__",  LABEL, NORID},
      {"do",  DO, NORID,},
d163 1
a163 7
      {"__asm",  GCC_ASM_KEYWORD, NORID},
      {"protected",  VISSPEC, RID_PROTECTED,},
      {"",}, 
      {"float",  TYPESPEC, RID_FLOAT,},
      {"using",  USING, NORID,},
      {"",}, 
      {"const_cast",  CONST_CAST, NORID,},
d165 2
d169 3
a171 6
      {"namespace",  NAMESPACE, NORID,},
      {"",}, {"",}, {"",}, {"",}, 
      {"sigof",  SIGOF, NORID		/* Extension */,},
      {"",}, {"",}, {"",}, 
      {"this",  THIS, NORID,},
      {"",}, {"",}, {"",}, {"",}, 
d174 2
a175 1
      {"signed",  TYPESPEC, RID_SIGNED,},
d177 2
a178 1
      {"",}, {"",}, {"",}, 
d180 4
a183 1
      {"",}, {"",}, {"",}, 
d185 8
a192 1
      {"class",  AGGR, RID_CLASS,},
d194 4
a197 5
      {"",}, {"",}, {"",}, 
      {"and",  ANDAND, NORID,},
      {"",}, {"",}, {"",}, {"",}, 
      {"long",  TYPESPEC, RID_LONG,},
      {"default",  DEFAULT, NORID,},
d199 1
a199 2
      {"unsigned",  TYPESPEC, RID_UNSIGNED,},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
a201 4
      {"bitand",  '&', NORID,},
      {"",}, 
      {"goto",  GOTO, NORID,},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
d203 1
a203 1
      {"",}, {"",}, {"",}, {"",}, {"",}, 
d205 1
a205 1
      {"",}, 
d208 2
a209 5
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, 
      {"overload",  OVERLOAD, NORID,},
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d2 2
a3 1
/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gxx.gperf  */
d6 1
a6 1
#define TOTAL_KEYWORDS 103
d10 2
a11 2
#define MAX_HASH_VALUE 195
/* maximum key range = 192, duplicates = 0 */
d23 13
a35 13
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
     196, 196, 196, 196, 196,   0, 196,  80,  26,  28,
      44,   0,  49,  38,   6,  81, 196,   2,   0,  41,
      16,  47,   4,  31,  32,   5,   6,  62,  20,  96,
      17,  25, 196, 196, 196, 196, 196, 196,
a51 1
        break;
a67 5
      {"",}, 
      {"__real",  REALPART, NORID},
      {"",}, 
      {"__real__",  REALPART, NORID},
      {"",}, 
d70 8
a77 4
      {"__asm__",  GCC_ASM_KEYWORD, NORID},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"this",  THIS, NORID,},
      {"",}, 
d79 4
a82 3
      {"switch",  SWITCH, NORID,},
      {"template",  TEMPLATE, RID_TEMPLATE,},
      {"not",  '!', NORID,},
d84 1
a84 2
      {"__alignof__",  ALIGNOF, NORID},
      {"static_cast",  STATIC_CAST, NORID,},
d86 1
a86 5
      {"bool",  TYPESPEC, RID_BOOL,},
      {"private",  VISSPEC, RID_PRIVATE,},
      {"case",  CASE, NORID,},
      {"virtual",  SCSPEC, RID_VIRTUAL,},
      {"try",  TRY, NORID,},
d88 2
a89 2
      {"compl",  '~', NORID,},
      {"public",  VISSPEC, RID_PUBLIC,},
a93 4
      {"class",  AGGR, RID_CLASS,},
      {"const",  CV_QUALIFIER, RID_CONST,},
      {"static",  SCSPEC, RID_STATIC,},
      {"__extension__",  EXTENSION, NORID},
a94 6
      {"short",  TYPESPEC, RID_SHORT,},
      {"__imag__",  IMAGPART, NORID},
      {"delete",  DELETE, NORID,},
      {"__asm",  GCC_ASM_KEYWORD, NORID},
      {"xor",  '^', NORID,},
      {"not_eq",  EQCOMPARE, NORID,},
d96 7
d104 10
d115 9
d125 1
a125 1
      {"__complex__",  TYPESPEC, RID_COMPLEX},
d128 1
a128 15
      {"typeof",  TYPEOF, NORID,},
      {"__const__",  CV_QUALIFIER, RID_CONST},
      {"__volatile",  CV_QUALIFIER, RID_VOLATILE},
      {"",}, 
      {"__volatile__",  CV_QUALIFIER, RID_VOLATILE},
      {"__const",  CV_QUALIFIER, RID_CONST},
      {"catch",  CATCH, NORID,},
      {"__null",  CONSTANT, RID_NULL},
      {"protected",  VISSPEC, RID_PROTECTED,},
      {"",}, 
      {"signed",  TYPESPEC, RID_SIGNED,},
      {"",}, 
      {"__complex",  TYPESPEC, RID_COMPLEX},
      {"__alignof",  ALIGNOF, NORID},
      {"__wchar_t",  TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},
a129 1
      {"const_cast",  CONST_CAST, NORID,},
d131 2
a133 3
      {"long",  TYPESPEC, RID_LONG,},
      {"or",  OROR, NORID,},
      {"__typeof__",  TYPEOF, NORID},
a134 2
      {"for",  FOR, NORID,},
      {"__imag",  IMAGPART, NORID},
a135 2
      {"",}, {"",}, 
      {"__label__",  LABEL, NORID},
d137 5
d143 5
d149 4
d155 2
a156 2
      {"explicit",  SCSPEC, RID_EXPLICIT,},
      {"char",  TYPESPEC, RID_CHAR,},
d158 2
a159 5
      {"__attribute",  ATTRIBUTE, NORID},
      {"friend",  SCSPEC, RID_FRIEND,},
      {"__attribute__",  ATTRIBUTE, NORID},
      {"while",  WHILE, NORID,},
      {"reinterpret_cast",  REINTERPRET_CAST, NORID,},
d161 1
a161 5
      {"continue",  CONTINUE, NORID,},
      {"namespace",  NAMESPACE, NORID,},
      {"sigof",  SIGOF, NORID		/* Extension */,},
      {"",}, 
      {"volatile",  CV_QUALIFIER, RID_VOLATILE,},
a162 2
      {"bitor",  '|', NORID,},
      {"typedef",  SCSPEC, RID_TYPEDEF,},
d165 6
a170 3
      {"",}, 
      {"new",  NEW, NORID,},
      {"return",  RETURN, NORID,},
d173 1
a173 2
      {"using",  USING, NORID,},
      {"",}, {"",}, 
d175 1
a175 2
      {"",}, {"",}, 
      {"and",  ANDAND, NORID,},
d177 1
a177 4
      {"__typeof",  TYPEOF, NORID},
      {"union",  AGGR, RID_UNION,},
      {"",}, 
      {"if",  IF, NORID,},
d179 6
a184 6
      {"",}, {"",}, 
      {"goto",  GOTO, NORID,},
      {"",}, {"",}, 
      {"__sigof__",  SIGOF, NORID		/* Extension */,},
      {"float",  TYPESPEC, RID_FLOAT,},
      {"",}, {"",}, 
d186 4
a189 3
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"register",  SCSPEC, RID_REGISTER,},
      {"throw",  THROW, NORID,},
a191 4
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"operator",  OPERATOR, NORID,},
      {"",}, 
      {"inline",  SCSPEC, RID_INLINE,},
d193 2
d196 1
a196 1
      {"",}, {"",}, {"",}, 
d198 1
a198 1
      {"",}, {"",}, {"",}, 
d201 5
a205 2
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"unsigned",  TYPESPEC, RID_UNSIGNED,},
@

