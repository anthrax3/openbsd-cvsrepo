head	1.3;
access;
symbols
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	FSF_2_8_1:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	99.05.26.16.20.55;	author espie;	state dead;
branches;
next	1.2;

1.2
date	98.03.03.21.15.08;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.02.05;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.02.05;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.09.30;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@So long, and thanks for all the bugs.
@
text
@/* C code produced by gperf version 2.5 (GNU C++ version) */
/* Command-line: gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ./c-parse.gperf  */
/* Command-line: gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ 
struct resword { char *name; short token; enum rid rid; };

#define TOTAL_KEYWORDS 79
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 20
#define MIN_HASH_VALUE 10
#define MAX_HASH_VALUE 144
/* maximum key range = 135, duplicates = 0 */

#ifdef __GNUC__
inline
#endif
static unsigned int
hash (str, len)
     register char *str;
     register int unsigned len;
{
  static unsigned char asso_values[] =
    {
     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
     145, 145, 145, 145,  25, 145, 145, 145, 145, 145,
     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
     145, 145, 145, 145, 145,   1, 145,  46,   8,  15,
      61,   6,  36,  48,   3,   5, 145,  18,  63,  25,
      29,  76,   1, 145,  13,   2,   1,  51,  37,   9,
       9,   1,   3, 145, 145, 145, 145, 145,
    };
  register int hval = len;

  switch (hval)
    {
      default:
      case 3:
        hval += asso_values[str[2]];
      case 2:
      case 1:
        hval += asso_values[str[0]];
        break;
    }
  return hval + asso_values[str[len - 1]];
}

static struct resword wordlist[] =
{
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, 
      {"int",  TYPESPEC, RID_INT},
      {"",}, {"",}, 
      {"__typeof__",  TYPEOF, NORID},
      {"__signed__",  TYPESPEC, RID_SIGNED},
      {"__imag__",  IMAGPART, NORID},
      {"switch",  SWITCH, NORID},
      {"__inline__",  SCSPEC, RID_INLINE},
      {"else",  ELSE, NORID},
      {"__iterator__",  SCSPEC, RID_ITERATOR},
      {"__inline",  SCSPEC, RID_INLINE},
      {"__extension__",  EXTENSION, NORID},
      {"struct",  STRUCT, NORID},
      {"__real__",  REALPART, NORID},
      {"__const",  TYPE_QUAL, RID_CONST},
      {"while",  WHILE, NORID},
      {"__const__",  TYPE_QUAL, RID_CONST},
      {"case",  CASE, NORID},
      {"__complex__",  TYPESPEC, RID_COMPLEX},
      {"__iterator",  SCSPEC, RID_ITERATOR},
      {"bycopy",  TYPE_QUAL, RID_BYCOPY},
      {"",}, {"",}, {"",}, 
      {"__complex",  TYPESPEC, RID_COMPLEX},
      {"",}, 
      {"in",  TYPE_QUAL, RID_IN},
      {"break",  BREAK, NORID},
      {"@@defs",  DEFS, NORID},
      {"",}, {"",}, {"",}, 
      {"extern",  SCSPEC, RID_EXTERN},
      {"if",  IF, NORID},
      {"typeof",  TYPEOF, NORID},
      {"typedef",  SCSPEC, RID_TYPEDEF},
      {"__typeof",  TYPEOF, NORID},
      {"sizeof",  SIZEOF, NORID},
      {"",}, 
      {"return",  RETURN, NORID},
      {"const",  TYPE_QUAL, RID_CONST},
      {"__volatile__",  TYPE_QUAL, RID_VOLATILE},
      {"@@private",  PRIVATE, NORID},
      {"@@selector",  SELECTOR, NORID},
      {"__volatile",  TYPE_QUAL, RID_VOLATILE},
      {"__asm__",  ASM_KEYWORD, NORID},
      {"",}, {"",}, 
      {"continue",  CONTINUE, NORID},
      {"__alignof__",  ALIGNOF, NORID},
      {"__imag",  IMAGPART, NORID},
      {"__attribute__",  ATTRIBUTE, NORID},
      {"",}, {"",}, 
      {"__attribute",  ATTRIBUTE, NORID},
      {"for",  FOR, NORID},
      {"",}, 
      {"@@encode",  ENCODE, NORID},
      {"id",  OBJECTNAME, RID_ID},
      {"static",  SCSPEC, RID_STATIC},
      {"@@interface",  INTERFACE, NORID},
      {"",}, 
      {"__signed",  TYPESPEC, RID_SIGNED},
      {"",}, 
      {"__label__",  LABEL, NORID},
      {"",}, {"",}, 
      {"__asm",  ASM_KEYWORD, NORID},
      {"char",  TYPESPEC, RID_CHAR},
      {"",}, 
      {"inline",  SCSPEC, RID_INLINE},
      {"out",  TYPE_QUAL, RID_OUT},
      {"register",  SCSPEC, RID_REGISTER},
      {"__real",  REALPART, NORID},
      {"short",  TYPESPEC, RID_SHORT},
      {"",}, 
      {"enum",  ENUM, NORID},
      {"inout",  TYPE_QUAL, RID_INOUT},
      {"",}, 
      {"oneway",  TYPE_QUAL, RID_ONEWAY},
      {"union",  UNION, NORID},
      {"",}, 
      {"__alignof",  ALIGNOF, NORID},
      {"",}, 
      {"@@implementation",  IMPLEMENTATION, NORID},
      {"",}, 
      {"@@class",  CLASS, NORID},
      {"",}, 
      {"@@public",  PUBLIC, NORID},
      {"asm",  ASM_KEYWORD, NORID},
      {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"default",  DEFAULT, NORID},
      {"",}, 
      {"void",  TYPESPEC, RID_VOID},
      {"",}, 
      {"@@protected",  PROTECTED, NORID},
      {"@@protocol",  PROTOCOL, NORID},
      {"",}, {"",}, {"",}, 
      {"volatile",  TYPE_QUAL, RID_VOLATILE},
      {"",}, {"",}, 
      {"signed",  TYPESPEC, RID_SIGNED},
      {"float",  TYPESPEC, RID_FLOAT},
      {"@@end",  END, NORID},
      {"",}, {"",}, 
      {"unsigned",  TYPESPEC, RID_UNSIGNED},
      {"@@compatibility_alias",  ALIAS, NORID},
      {"double",  TYPESPEC, RID_DOUBLE},
      {"",}, {"",}, 
      {"auto",  SCSPEC, RID_AUTO},
      {"",}, 
      {"goto",  GOTO, NORID},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"do",  DO, NORID},
      {"",}, {"",}, {"",}, {"",}, 
      {"long",  TYPESPEC, RID_LONG},
};

#ifdef __GNUC__
inline
#endif
struct resword *
is_reserved_word (str, len)
     register char *str;
     register unsigned int len;
{
  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        {
          register char *s = wordlist[key].name;

          if (*s == *str && !strcmp (str + 1, s + 1))
            return &wordlist[key];
        }
    }
  return 0;
}
@


1.2
log
@GCC 2.8.0 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d2 2
a3 1
/* Command-line: gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ c-parse.gperf  */
d14 1
a14 1
__inline
d47 1
d54 109
a162 109
  {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
  {"",}, 
  {"int",  TYPESPEC, RID_INT},
  {"",}, {"",}, 
  {"__typeof__",  TYPEOF, NORID},
  {"__signed__",  TYPESPEC, RID_SIGNED},
  {"__imag__",  IMAGPART, NORID},
  {"switch",  SWITCH, NORID},
  {"__inline__",  SCSPEC, RID_INLINE},
  {"else",  ELSE, NORID},
  {"__iterator__",  SCSPEC, RID_ITERATOR},
  {"__inline",  SCSPEC, RID_INLINE},
  {"__extension__",  EXTENSION, NORID},
  {"struct",  STRUCT, NORID},
  {"__real__",  REALPART, NORID},
  {"__const",  TYPE_QUAL, RID_CONST},
  {"while",  WHILE, NORID},
  {"__const__",  TYPE_QUAL, RID_CONST},
  {"case",  CASE, NORID},
  {"__complex__",  TYPESPEC, RID_COMPLEX},
  {"__iterator",  SCSPEC, RID_ITERATOR},
  {"bycopy",  TYPE_QUAL, RID_BYCOPY},
  {"",}, {"",}, {"",}, 
  {"__complex",  TYPESPEC, RID_COMPLEX},
  {"",}, 
  {"in",  TYPE_QUAL, RID_IN},
  {"break",  BREAK, NORID},
  {"@@defs",  DEFS, NORID},
  {"",}, {"",}, {"",}, 
  {"extern",  SCSPEC, RID_EXTERN},
  {"if",  IF, NORID},
  {"typeof",  TYPEOF, NORID},
  {"typedef",  SCSPEC, RID_TYPEDEF},
  {"__typeof",  TYPEOF, NORID},
  {"sizeof",  SIZEOF, NORID},
  {"",}, 
  {"return",  RETURN, NORID},
  {"const",  TYPE_QUAL, RID_CONST},
  {"__volatile__",  TYPE_QUAL, RID_VOLATILE},
  {"@@private",  PRIVATE, NORID},
  {"@@selector",  SELECTOR, NORID},
  {"__volatile",  TYPE_QUAL, RID_VOLATILE},
  {"__asm__",  ASM_KEYWORD, NORID},
  {"",}, {"",}, 
  {"continue",  CONTINUE, NORID},
  {"__alignof__",  ALIGNOF, NORID},
  {"__imag",  IMAGPART, NORID},
  {"__attribute__",  ATTRIBUTE, NORID},
  {"",}, {"",}, 
  {"__attribute",  ATTRIBUTE, NORID},
  {"for",  FOR, NORID},
  {"",}, 
  {"@@encode",  ENCODE, NORID},
  {"id",  OBJECTNAME, RID_ID},
  {"static",  SCSPEC, RID_STATIC},
  {"@@interface",  INTERFACE, NORID},
  {"",}, 
  {"__signed",  TYPESPEC, RID_SIGNED},
  {"",}, 
  {"__label__",  LABEL, NORID},
  {"",}, {"",}, 
  {"__asm",  ASM_KEYWORD, NORID},
  {"char",  TYPESPEC, RID_CHAR},
  {"",}, 
  {"inline",  SCSPEC, RID_INLINE},
  {"out",  TYPE_QUAL, RID_OUT},
  {"register",  SCSPEC, RID_REGISTER},
  {"__real",  REALPART, NORID},
  {"short",  TYPESPEC, RID_SHORT},
  {"",}, 
  {"enum",  ENUM, NORID},
  {"inout",  TYPE_QUAL, RID_INOUT},
  {"",}, 
  {"oneway",  TYPE_QUAL, RID_ONEWAY},
  {"union",  UNION, NORID},
  {"",}, 
  {"__alignof",  ALIGNOF, NORID},
  {"",}, 
  {"@@implementation",  IMPLEMENTATION, NORID},
  {"",}, 
  {"@@class",  CLASS, NORID},
  {"",}, 
  {"@@public",  PUBLIC, NORID},
  {"asm",  ASM_KEYWORD, NORID},
  {"",}, {"",}, {"",}, {"",}, {"",}, 
  {"default",  DEFAULT, NORID},
  {"",}, 
  {"void",  TYPESPEC, RID_VOID},
  {"",}, 
  {"@@protected",  PROTECTED, NORID},
  {"@@protocol",  PROTOCOL, NORID},
  {"",}, {"",}, {"",}, 
  {"volatile",  TYPE_QUAL, RID_VOLATILE},
  {"",}, {"",}, 
  {"signed",  TYPESPEC, RID_SIGNED},
  {"float",  TYPESPEC, RID_FLOAT},
  {"@@end",  END, NORID},
  {"",}, {"",}, 
  {"unsigned",  TYPESPEC, RID_UNSIGNED},
  {"@@compatibility_alias",  ALIAS, NORID},
  {"double",  TYPESPEC, RID_DOUBLE},
  {"",}, {"",}, 
  {"auto",  SCSPEC, RID_AUTO},
  {"",}, 
  {"goto",  GOTO, NORID},
  {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
  {"do",  DO, NORID},
  {"",}, {"",}, {"",}, {"",}, 
  {"long",  TYPESPEC, RID_LONG},
d166 1
a166 1
__inline
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d2 1
a2 2
/* Command-line: gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ./c-parse.gperf  */
/* Command-line: gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ 
d13 1
a13 1
inline
a45 1
        break;
d52 109
a160 109
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, 
      {"int",  TYPESPEC, RID_INT},
      {"",}, {"",}, 
      {"__typeof__",  TYPEOF, NORID},
      {"__signed__",  TYPESPEC, RID_SIGNED},
      {"__imag__",  IMAGPART, NORID},
      {"switch",  SWITCH, NORID},
      {"__inline__",  SCSPEC, RID_INLINE},
      {"else",  ELSE, NORID},
      {"__iterator__",  SCSPEC, RID_ITERATOR},
      {"__inline",  SCSPEC, RID_INLINE},
      {"__extension__",  EXTENSION, NORID},
      {"struct",  STRUCT, NORID},
      {"__real__",  REALPART, NORID},
      {"__const",  TYPE_QUAL, RID_CONST},
      {"while",  WHILE, NORID},
      {"__const__",  TYPE_QUAL, RID_CONST},
      {"case",  CASE, NORID},
      {"__complex__",  TYPESPEC, RID_COMPLEX},
      {"__iterator",  SCSPEC, RID_ITERATOR},
      {"bycopy",  TYPE_QUAL, RID_BYCOPY},
      {"",}, {"",}, {"",}, 
      {"__complex",  TYPESPEC, RID_COMPLEX},
      {"",}, 
      {"in",  TYPE_QUAL, RID_IN},
      {"break",  BREAK, NORID},
      {"@@defs",  DEFS, NORID},
      {"",}, {"",}, {"",}, 
      {"extern",  SCSPEC, RID_EXTERN},
      {"if",  IF, NORID},
      {"typeof",  TYPEOF, NORID},
      {"typedef",  SCSPEC, RID_TYPEDEF},
      {"__typeof",  TYPEOF, NORID},
      {"sizeof",  SIZEOF, NORID},
      {"",}, 
      {"return",  RETURN, NORID},
      {"const",  TYPE_QUAL, RID_CONST},
      {"__volatile__",  TYPE_QUAL, RID_VOLATILE},
      {"@@private",  PRIVATE, NORID},
      {"@@selector",  SELECTOR, NORID},
      {"__volatile",  TYPE_QUAL, RID_VOLATILE},
      {"__asm__",  ASM_KEYWORD, NORID},
      {"",}, {"",}, 
      {"continue",  CONTINUE, NORID},
      {"__alignof__",  ALIGNOF, NORID},
      {"__imag",  IMAGPART, NORID},
      {"__attribute__",  ATTRIBUTE, NORID},
      {"",}, {"",}, 
      {"__attribute",  ATTRIBUTE, NORID},
      {"for",  FOR, NORID},
      {"",}, 
      {"@@encode",  ENCODE, NORID},
      {"id",  OBJECTNAME, RID_ID},
      {"static",  SCSPEC, RID_STATIC},
      {"@@interface",  INTERFACE, NORID},
      {"",}, 
      {"__signed",  TYPESPEC, RID_SIGNED},
      {"",}, 
      {"__label__",  LABEL, NORID},
      {"",}, {"",}, 
      {"__asm",  ASM_KEYWORD, NORID},
      {"char",  TYPESPEC, RID_CHAR},
      {"",}, 
      {"inline",  SCSPEC, RID_INLINE},
      {"out",  TYPE_QUAL, RID_OUT},
      {"register",  SCSPEC, RID_REGISTER},
      {"__real",  REALPART, NORID},
      {"short",  TYPESPEC, RID_SHORT},
      {"",}, 
      {"enum",  ENUM, NORID},
      {"inout",  TYPE_QUAL, RID_INOUT},
      {"",}, 
      {"oneway",  TYPE_QUAL, RID_ONEWAY},
      {"union",  UNION, NORID},
      {"",}, 
      {"__alignof",  ALIGNOF, NORID},
      {"",}, 
      {"@@implementation",  IMPLEMENTATION, NORID},
      {"",}, 
      {"@@class",  CLASS, NORID},
      {"",}, 
      {"@@public",  PUBLIC, NORID},
      {"asm",  ASM_KEYWORD, NORID},
      {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"default",  DEFAULT, NORID},
      {"",}, 
      {"void",  TYPESPEC, RID_VOID},
      {"",}, 
      {"@@protected",  PROTECTED, NORID},
      {"@@protocol",  PROTOCOL, NORID},
      {"",}, {"",}, {"",}, 
      {"volatile",  TYPE_QUAL, RID_VOLATILE},
      {"",}, {"",}, 
      {"signed",  TYPESPEC, RID_SIGNED},
      {"float",  TYPESPEC, RID_FLOAT},
      {"@@end",  END, NORID},
      {"",}, {"",}, 
      {"unsigned",  TYPESPEC, RID_UNSIGNED},
      {"@@compatibility_alias",  ALIAS, NORID},
      {"double",  TYPESPEC, RID_DOUBLE},
      {"",}, {"",}, 
      {"auto",  SCSPEC, RID_AUTO},
      {"",}, 
      {"goto",  GOTO, NORID},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"do",  DO, NORID},
      {"",}, {"",}, {"",}, {"",}, 
      {"long",  TYPESPEC, RID_LONG},
d164 1
a164 1
inline
@

