head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1
	FSF_2_8_1:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.20.40;	author espie;	state dead;
branches;
next	1.1;

1.1
date	95.12.20.01.01.58;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.01.58;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@So long, and thanks for all the bugs.
@
text
@This is a partial list of how `gcc -traditional' disagrees with
traditional C compilers (perhaps only some of them).  Most of these
differences are not bugs.

---------------------------------------------------------------------------
K&R-1 (2.4.3) says:

	"If the character following a backslash is not one of those
	specified {in the table above}, the backslash is ignored."

Up until recently, `gcc -traditional' complained about \x \a and \v
appearing in a character or string literal.  I believe however that
this non-feature has been eliminated (recently).

---------------------------------------------------------------------------
When in -traditional mode, gcc allows the following erroneous pair of
declarations to appear together in a given scope:

	typedef int foo;
	typedef foo foo;

---------------------------------------------------------------------------
K&R-1 (8.5) says:

	"No field may be wider than a word."

Gcc however allows:

	struct S { int i:33; };

---------------------------------------------------------------------------
In K&R-1 there is no restriction against comments crossing include file
boundaries.  Gcc however doesn't allow this, even when in -traditional mode.

---------------------------------------------------------------------------
Regarding the length of identifiers, K&R-1 (2.2) says:

	"No more than the first eight characters are significant,
	although more may be used."

Gcc treats all characters of identifiers as significant, even when in
-traditional mode.

---------------------------------------------------------------------------
K&R-1 (2.2) says:

	"An identifier is a sequence of letters and digits; the first
	character must be a letter.  The underscore _ counts as a letter."

Gcc also allows dollar signs in identifiers.  (This may also be an issue
for the -pedantic option.)

---------------------------------------------------------------------------


@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@

