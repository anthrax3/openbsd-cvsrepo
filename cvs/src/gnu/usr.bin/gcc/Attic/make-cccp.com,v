head	1.3;
access;
symbols
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	FSF_2_8_1:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.3
date	99.05.26.16.22.29;	author espie;	state dead;
branches;
next	1.2;

1.2
date	98.03.03.21.18.58;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.03.05;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.03.05;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.12.54;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@So long, and thanks for all the bugs.
@
text
@$v='f$verify(0)	!make-cccp.com
$!
$!	Build the GNU C preprocessor on VMS.
$!
$!	Usage:
$!	  $ @@make-cccp.com [compiler] [link-only]
$!
$!	where [compiler] is one of "GNUC", "VAXC", "DECC";
$!	default when none specified is "GNUC",
$!	and where [link-only] is "LINK" or omitted.
$!	If both options are specified, the compiler must come first.
$!
$ if f$type(gcc_debug).eqs."INTEGER" then  if gcc_debug.and.1 then  set verify
$
$ p1 = f$edit(p1,"UPCASE,TRIM")
$ if p1.eqs."" then  p1 = "GNUC"
$!
$!	Compiler-specific setup (assume GNU C, then override as necessary):
$!
$ CC	 = "gcc"
$ CFLAGS = "/Opt=2/Debug/noVerbos"
$ LIBS	 = "gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr"
$ if p1.nes."GNUC"
$ then
$   CC	   = "cc"
$   CFLAGS = "/noOpt"	!disable optimizer when bootstrapping with native cc
$   if p1.eqs."VAXC"
$   then
$     if f$trnlnm("DECC$CC_DEFAULT").nes."" then  CC = "cc/VAXC"
$     LIBS = "alloca.obj,sys$library:vaxcrtl.olb/Libr"
$     define/noLog SYS SYS$LIBRARY:
$   else
$     if p1.eqs."DECC"
$     then
$	if f$trnlnm("DECC$CC_DEFAULT").nes."" then  CC = "cc/DECC"
$	CC = CC + "/Prefix=All"
$	LIBS = "alloca.obj"	!DECC$SHR will be found implicitly by linker
$	define/noLog SYS DECC$LIBRARY_INCLUDE:
$     else
$	if p1.nes."LINK"
$	then
$	  type sys$input: /Output=sys$error:
$DECK
[compiler] argument should be one of "GNUC", "VAXC", or "DECC".

Usage:
$ @@make-cccp.com [compiler] [link-only]

$EOD
$	  exit %x1000002C + 0*f$verify(v)	!%SYSTEM-F-ABORT
$	endif !!LINK
$     endif !DECC
$   endif !VAXC
$ endif !!GNUC
$
$!
$!	Other setup:
$!
$ LDFLAGS =	"/noMap"
$ PARSER  =	"bison"
$ RENAME  =	"rename/New_Version"
$ LINK	  =	"link"
$ echo	  =	"write sys$output"
$
$!!!!!!!
$!	Nothing beyond this point should need any local configuration changes.
$!!!!!!!
$
$! Set the default directory to the same place as this command procedure.
$ flnm = f$enviroment("PROCEDURE")	!get current procedure name
$ set default 'f$parse(flnm,,,"DEVICE")''f$parse(flnm,,,"DIRECTORY")'
$
$ if p1.eqs."LINK" .or. p2.eqs."LINK" then  goto Link
$ echo " Building the preprocessor."
$
$! Compile the simplest file first, to catch problem with compiler setup early.
$ set verify
$ 'CC''CFLAGS' version.c
$!'f$verify(0)
$
$ set verify
$ 'CC''CFLAGS' cccp.c
$!'f$verify(0)
$
$! Compile preprocessor's parser, possibly making it with yacc first.
$ if f$search("CEXP.C").nes."" then -
    if f$cvtime(f$file_attributes("CEXP.C","RDT")).ges.-
       f$cvtime(f$file_attributes("CEXP.Y","RDT")) then  goto skip_yacc
$ set verify
$ 'PARSER' cexp.y
$ 'RENAME' cexp_tab.c cexp.c
$!'f$verify(0)
$skip_yacc:
$ echo " (Ignore any warning about not finding file ""bison.simple"".)"
$ set verify
$ 'CC''CFLAGS' cexp.c
$ 'CC''CFLAGS'/Define="PREFIX=""_dummy_""" prefix.c
$!'f$verify(0)
$
$! In case there's no builtin alloca support, use the C simulation.
$ if f$locate("alloca.obj",f$edit(LIBS,"lowercase")).lt.f$length(LIBS)
$ then
$  set verify
$ 'CC''CFLAGS'/Incl=[]/Defi=("HAVE_CONFIG_H","STACK_DIRECTION=(-1)") alloca.c
$!'f$verify(0)
$ endif
$!
$
$Link:
$ echo " Linking the preprocessor."
$ set verify
$ 'LINK''LDFLAGS'/Exe=gcc-cpp.exe -
	  cccp.obj,cexp.obj,prefix.obj,version.obj,version.opt/Opt,-
	  'LIBS'
$!'f$verify(0)
$!
$!	Done
$!
$ exit 1+0*f$verify(v)
@


1.2
log
@GCC 2.8.0 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
$! Set the def dir to proper place for use in batch. Works for interactive too.
$flnm = f$enviroment("PROCEDURE")     ! get current procedure name
$set default 'f$parse(flnm,,,"DEVICE")''f$parse(flnm,,,"DIRECTORY")'
d3 1
a3 1
$!	Build the GNU "C" pre-processor on VMS
d5 2
a6 4
$!  Note:  to build with DEC's VAX C compiler, uncomment the 2nd CC, CFLAGS,
$!	   and LIBS alternatives, and also execute the following command:
$!	DEFINE SYS SYS$LIBRARY:
$
d8 4
a11 1
$!	C compiler
d13 4
a16 6
$ CC	=	"gcc"
$! CC	=	"cc"	!uncomment for VAXC
$ BISON	=	"bison"
$ RENAME=	"rename/New_Version"
$ LINK	=	"link"
$ echo	=	"write sys$output"
d18 1
a18 1
$!	Compiler options
d20 36
a55 2
$ CFLAGS =	"/Debug/noVerbos"
$! CFLAGS =	"/noOpt"	!uncomment for VAXC
d57 1
a57 1
$!	Link options
d60 4
a63 5
$!
$!	Link libraries
$!
$ LIBS = "gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr"
$! LIBS = "alloca.obj,sys$library:vaxcrtl.olb/Libr"	!uncomment for VAXC
d69 5
a73 1
$ if "''p1'" .eqs. "LINK" then goto Link
d75 6
d84 5
a88 8
$ t1:='f$search("CEXP.C")'
$ if "''t1'" .eqs. "" then goto 10$
$ t1:='f$file_attributes("CEXP.Y","RDT")'
$ t1:='f$cvtime(t1)'
$ t2:='f$file_attributes("CEXP.C","RDT")'
$ t2:='f$cvtime(t2)'
$ if t1 .les. t2 then goto 20$
$10$:
d90 1
a90 1
$ 'BISON' cexp.y
d93 8
a100 2
$20$:
$!
d104 1
a104 1
$ 'CC''CFLAGS'/Define="STACK_DIRECTION=(-1)" alloca.c		!#'f$verify(1)
d108 1
a108 5
$ echo " (Ignore any warning about not finding file ""bison.simple"".)"
$ set verify
$ 'CC''CFLAGS' cexp.c
$ 'CC''CFLAGS' version.c
$!'f$verify(0)
d112 2
a113 1
$ 'LINK''LDFLAGS'/Exe=gcc-cpp.exe cccp.obj,cexp.obj,version.obj,version.opt/Opt,-
d119 1
a119 1
$ exit
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d1 3
a3 1
$v='f$verify(0)	!make-cccp.com
d5 1
a5 1
$!	Build the GNU C preprocessor on VMS.
d7 4
a10 2
$!	Usage:
$!	  $ @@make-cccp.com [compiler] [link-only]
d12 1
a12 4
$!	where [compiler] is one of "GNUC", "VAXC", "DECC";
$!	default when none specified is "GNUC",
$!	and where [link-only] is "LINK" or omitted.
$!	If both options are specified, the compiler must come first.
d14 6
a19 4
$ if f$type(gcc_debug).eqs."INTEGER" then  if gcc_debug.and.1 then  set verify
$
$ p1 = f$edit(p1,"UPCASE,TRIM")
$ if p1.eqs."" then  p1 = "GNUC"
d21 1
a21 1
$!	Compiler-specific setup (assume GNU C, then override as necessary):
d23 2
a24 36
$ CC	 = "gcc"
$ CFLAGS = "/Opt=2/Debug/noVerbos"
$ LIBS	 = "gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr"
$ if p1.nes."GNUC"
$ then
$   CC	   = "cc"
$   CFLAGS = "/noOpt"	!disable optimizer when bootstrapping with native cc
$   if p1.eqs."VAXC"
$   then
$     if f$trnlnm("DECC$CC_DEFAULT").nes."" then  CC = "cc/VAXC"
$     LIBS = "alloca.obj,sys$library:vaxcrtl.olb/Libr"
$     define/noLog SYS SYS$LIBRARY:
$   else
$     if p1.eqs."DECC"
$     then
$	if f$trnlnm("DECC$CC_DEFAULT").nes."" then  CC = "cc/DECC"
$	CC = CC + "/Prefix=All"
$	LIBS = "alloca.obj"	!DECC$SHR will be found implicitly by linker
$	define/noLog SYS DECC$LIBRARY_INCLUDE:
$     else
$	if p1.nes."LINK"
$	then
$	  type sys$input: /Output=sys$error:
$DECK
[compiler] argument should be one of "GNUC", "VAXC", or "DECC".

Usage:
$ @@make-cccp.com [compiler] [link-only]

$EOD
$	  exit %x1000002C + 0*f$verify(v)	!%SYSTEM-F-ABORT
$	endif !!LINK
$     endif !DECC
$   endif !VAXC
$ endif !!GNUC
$
d26 1
a26 1
$!	Other setup:
d29 5
a33 4
$ PARSER  =	"bison"
$ RENAME  =	"rename/New_Version"
$ LINK	  =	"link"
$ echo	  =	"write sys$output"
d39 1
a39 5
$! Set the default directory to the same place as this command procedure.
$ flnm = f$enviroment("PROCEDURE")	!get current procedure name
$ set default 'f$parse(flnm,,,"DEVICE")''f$parse(flnm,,,"DIRECTORY")'
$
$ if p1.eqs."LINK" .or. p2.eqs."LINK" then  goto Link
a40 6
$
$! Compile the simplest file first, to catch problem with compiler setup early.
$ set verify
$ 'CC''CFLAGS' version.c
$!'f$verify(0)
$
d44 8
a51 5
$
$! Compile preprocessor's parser, possibly making it with yacc first.
$ if f$search("CEXP.C").nes."" then -
    if f$cvtime(f$file_attributes("CEXP.C","RDT")).ges.-
       f$cvtime(f$file_attributes("CEXP.Y","RDT")) then  goto skip_yacc
d53 1
a53 1
$ 'PARSER' cexp.y
d56 2
a57 8
$skip_yacc:
$ echo " (Ignore any warning about not finding file ""bison.simple"".)"
$ set verify
$ 'CC''CFLAGS' cexp.c
$ 'CC''CFLAGS'/Define="PREFIX=""_dummy_""" prefix.c
$!'f$verify(0)
$
$! In case there's no builtin alloca support, use the C simulation.
d61 1
a61 1
$ 'CC''CFLAGS'/Incl=[]/Defi=("HAVE_CONFIG_H","STACK_DIRECTION=(-1)") alloca.c
d65 5
a69 1
$
d73 1
a73 2
$ 'LINK''LDFLAGS'/Exe=gcc-cpp.exe -
	  cccp.obj,cexp.obj,prefix.obj,version.obj,version.opt/Opt,-
d79 1
a79 1
$ exit 1+0*f$verify(v)
@

