head	1.3;
access;
symbols
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	FSF_2_8_1:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	99.05.26.16.20.48;	author espie;	state dead;
branches;
next	1.2;

1.2
date	98.03.03.21.14.53;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.02.01;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.02.01;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.09.16;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@So long, and thanks for all the bugs.
@
text
@/* Utility to generate opcode list from bytecode definition.
   Copyright (C) 1993, 1994 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#include <stdio.h>
#include "hconfig.h"
#include "bi-defs.h"

int
main(argc, argv)
     int argc;
     char **argv;
{
  struct def *d;
  struct variation *v;
  int i;

  yyparse();
  reverse();


  printf ("/* This file is automatically generated from bytecode.def,\n");
  printf ("do not make any changes here. Instead edit bytecode.def.  */\n\n");
  printf ("enum bytecode_opcode\n{");

  i = 0;
  for (d = defs; d; d = d->next)
    for (v = d->variations; v; v = v->next)
      {
	printf ("  %s%s,\n", d->basename, v->name);
	++i;
      }

  puts ("  LAST_AND_UNUSED_OPCODE\n};");

  if (i > 256)
    fprintf (stderr, "%s: warning, number of opcodes is %d\n", *argv, i);
  else
    fprintf (stderr, "(Number of opcodes is %d)\n", i);

  fflush (stdout);
  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);
  /* NOTREACHED */
  return 0;
}

/* Safely allocate NBYTES bytes of memory. Returns pointer to block of
   memory.  */

char *
xmalloc (nbytes)
     int nbytes;
{
  char *tmp = (char *) malloc (nbytes);
  
  if (!tmp)
    {
      fprintf (stderr, "can't allocate %d bytes (out of virtual memory)\n", nbytes);
      exit (FATAL_EXIT_CODE);
    }

  return tmp;
}

/* More 'friendly' abort that prints the line and file.
   config.h can #define abort fancy_abort if you like that sort of thing.  */

void
fancy_abort ()
{
  fprintf (stderr, "Internal gcc abort.\n");
  exit (FATAL_EXIT_CODE);
}
@


1.2
log
@GCC 2.8.0 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d64 2
a65 1
   memory. */
d79 10
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d64 1
a64 2
   memory.  */

a77 10
}

/* More 'friendly' abort that prints the line and file.
   config.h can #define abort fancy_abort if you like that sort of thing.  */

void
fancy_abort ()
{
  fprintf (stderr, "Internal gcc abort.\n");
  exit (FATAL_EXIT_CODE);
@

