head	1.16;
access;
symbols
	OPENBSD_2_5:1.15.0.4
	OPENBSD_2_5_BASE:1.15
	OPENBSD_2_4:1.15.0.2
	OPENBSD_2_4_BASE:1.15
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	FSF_2_8_1:1.1.1.3
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.10.0.4
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.10.0.2
	OPENBSD_2_1_BASE:1.10
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.16
date	99.05.26.16.20.34;	author espie;	state dead;
branches;
next	1.15;

1.15
date	98.05.06.21.30.43;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	98.03.08.18.26.12;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	98.03.06.21.38.03;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	98.03.04.18.16.10;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.03.03.21.14.27;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.04.09.13.42.39;	author downsj;	state Exp;
branches;
next	1.9;

1.9
date	97.04.04.13.18.17;	author graichen;	state Exp;
branches;
next	1.8;

1.8
date	97.03.20.11.32.02;	author downsj;	state Exp;
branches;
next	1.7;

1.7
date	97.01.04.12.28.18;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.09.17.07.19.36;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.08.25.09.56.59;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.07.31.00.18.15;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	95.12.22.08.24.56;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.21.01.16.10;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.01.55;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.01.55;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.08.53;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	98.03.08.18.04.26;	author millert;	state Exp;
branches;
next	;


desc
@@


1.16
log
@So long, and thanks for all the bugs.
@
text
@# Makefile for GNU C compiler.
#   Copyright (C) 1987, 88, 90-97, 1998 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston MA 02111-1307, USA.

# The targets for external use include:
# all, doc, proto, install, install-cross, install-cross-rest,
# uninstall, TAGS, mostlyclean, clean, distclean, maintainer-clean,
# stage1, stage2, stage3, stage4.

# Suppress smart makes who think they know how to automake Yacc files
.y.c:

# Directory where sources are, from where we are.
srcdir = @@srcdir@@
VPATH = @@srcdir@@

# Variables that exist for you to override.
# See below for how to change them for certain systems.

# List of language subdirectories.
# This is overridden by configure.
SUBDIRS =@@subdirs@@

# Selection of languages to be made.
# This is overridden by configure.
LANGUAGES = c proto gcov @@all_languages@@

# Selection of languages to be made during stage1 build.
# This is overridden by configure.
BOOT_LANGUAGES = c @@all_boot_languages@@

ALLOCA =
ALLOCA_FLAGS =
ALLOCA_FINISH = true

# Various ways of specifying flags for compilations:  
# CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.
# BOOT_CFLAGS is the value of CFLAGS to pass
# to the stage2 and stage3 compilations
# XCFLAGS is used for most compilations but not when using the GCC just built.
# TCFLAGS is used for compilations with the GCC just built.
XCFLAGS =
TCFLAGS =
CFLAGS = -g
BOOT_CFLAGS = -O $(CFLAGS)
# These exists to be overridden by the x-* and t-* files, respectively.
X_CFLAGS =
T_CFLAGS =

X_CPPFLAGS =
T_CPPFLAGS =

CC = @@CC@@
BISON = bison
BISONFLAGS =
LEX = flex
LEXFLAGS =
AR = ar
AR_FLAGS = rc
LN = @@symbolic_link@@
DLLTOOL = dlltool
SHELL = /bin/sh
# on sysV, define this as cp.
INSTALL = @@INSTALL@@
# These permit overriding just for certain files.
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)
MAKEINFO = makeinfo
MAKEINFOFLAGS =
TEXI2DVI = texi2dvi
# For GNUmake: let us decide what gets passed to recursive makes.
MAKEOVERRIDES =
@@SET_MAKE@@

# Define this as & to perform parallel make on a Sequent.
# Note that this has some bugs, and it seems currently necessary 
# to compile all the gen* files first by hand to avoid erroneous results.
P =

# How to invoke ranlib.
RANLIB = ranlib
# Test to use to see whether ranlib exists on the system.
RANLIB_TEST = [ -f /usr/bin/ranlib -o -f /bin/ranlib ]

# Compiler to use for compiling libgcc1.a.
# OLDCC should not be the GNU C compiler,
# since that would compile typical libgcc1.a functions such as mulsi3
# into infinite recursions.
OLDCC = cc

# CFLAGS for use with OLDCC, for compiling libgcc1.a.
# NOTE: -O does not work on some Unix systems!
CCLIBFLAGS = -O

# Version of ar to use when compiling libgcc1.a.
OLDAR = ar
OLDAR_FLAGS = qc

# Target to use when installing include directory.  Either
# install-headers-tar or install-headers-cpio.
INSTALL_HEADERS_DIR = @@build_install_headers_dir@@

# Header files that are made available under the same name
# to programs compiled with GCC.
USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h \
    $(srcdir)/ginclude/varargs.h $(srcdir)/ginclude/va-alpha.h \
    $(srcdir)/ginclude/va-h8300.h $(srcdir)/ginclude/va-i860.h \
    $(srcdir)/ginclude/va-i960.h $(srcdir)/ginclude/va-mips.h \
    $(srcdir)/ginclude/va-m88k.h $(srcdir)/ginclude/va-mn10200.h \
    $(srcdir)/ginclude/va-mn10300.h $(srcdir)/ginclude/va-pa.h \
    $(srcdir)/ginclude/va-pyr.h $(srcdir)/ginclude/va-sparc.h \
    $(srcdir)/ginclude/va-clipper.h $(srcdir)/ginclude/va-spur.h \
    $(srcdir)/ginclude/va-m32r.h $(srcdir)/ginclude/va-sh.h \
    $(srcdir)/ginclude/va-v850.h $(srcdir)/ginclude/va-arc.h \
    $(srcdir)/ginclude/iso646.h $(srcdir)/ginclude/va-ppc.h \
    $(srcdir)/ginclude/proto.h $(EXTRA_HEADERS) \
    $(LANG_EXTRA_HEADERS)

# Target to use whe installing assert.h.  Some systems may
# want to set this empty.
INSTALL_ASSERT_H = install-assert-h

# Target to use for installing unformatted man-pages.  Some systems may not
# want them installed.
INSTALL_MAN = install-man

# The GCC to use for compiling libgcc2.a, enquire, and libgcc1-test.
# Usually the one we just built.
# Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).
GCC_FOR_TARGET = ./xgcc -B./

# This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.
# It omits XCFLAGS, and specifies -B./.
# It also specifies -I./include to find, e.g., stddef.h.
GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -I./include $(TCFLAGS)

# Special flags for compiling enquire.
# We disable optimization to make floating point more reliable.
ENQUIRE_CFLAGS = -DNO_MEM -DNO_LONG_DOUBLE_IO -O0
ENQUIRE_LDFLAGS = $(LDFLAGS)

# Sed command to transform gcc to installed name.  Overwritten by configure.
program_transform_name = -e s,x,x,
program_transform_cross_name = -e s,^,$(target_alias)-,

# Tools to use when building a cross-compiler.
# These are used because `configure' appends `cross-make'
# to the makefile when making a cross-compiler.

TARGET_TOOLPREFIX = $(tooldir)/bin/
AR_FOR_TARGET = $(TARGET_TOOLPREFIX)ar
AR_FOR_TARGET_FLAGS = rc
RANLIB_FOR_TARGET = $(TARGET_TOOLPREFIX)ranlib
RANLIB_TEST_FOR_TARGET = [ -f $(TARGET_TOOLPREFIX)ranlib ]

# Dir to search for system headers.  Overridden by cross-make.
SYSTEM_HEADER_DIR = /usr/include

# Control whether to run fixproto.
STMP_FIXPROTO = stmp-fixproto

# Test to see whether <float.h> exists in the system header files,
# and is not derived from GCC.
FLOAT_H_TEST = \
  [ -f $(SYSTEM_HEADER_DIR)/float.h ] && \
  if grep 'ifndef _FLOAT_H___' $(SYSTEM_HEADER_DIR)/float.h >/dev/null; \
  then false; \
  else :; fi

# Test to see whether <limits.h> exists in the system header files.
LIMITS_H_TEST = [ -f $(SYSTEM_HEADER_DIR)/limits.h ]

# There may be a premade insn-attrtab.c for this machine.
# (You could rebuild it with genattrtab as usual, but it takes a long time.)
# PREMADE_ATTRTAB is the file name of the file to use.
# PREMADE_ATTRTAB_MD is the md file it corresponds to.
PREMADE_ATTRTAB_MD = Makefile  # Guaranteed not to cmp equal to md.
PREMADE_ATTRTAB = 

target=@@target@@
target_alias=@@target_alias@@
xmake_file=@@dep_host_xmake_file@@
tmake_file=@@dep_tmake_file@@
out_file=$(srcdir)/config/@@out_file@@
out_object_file=@@out_object_file@@
md_file=$(srcdir)/config/@@md_file@@
tm_file=@@tm_file_list@@
build_xm_file=@@build_xm_file_list@@
host_xm_file=@@host_xm_file_list@@
lang_specs_files=@@lang_specs_files@@
lang_options_files=@@lang_options_files@@
GCC_THREAD_FILE=@@thread_file@@
version=@@version@@
mainversion=`sed -e 's/.*\"\([0-9]*\.[0-9]*\).*/\1/' < $(srcdir)/version.c`

# Common prefix for installation directories.
# NOTE: This directory must exist when you start installation.
prefix = @@prefix@@
# Directory in which to put localized header files. On the systems with
# gcc as the native cc, `local_prefix' may not be `prefix' which is
# `/usr'.
# NOTE: local_prefix *should not* default from prefix.
local_prefix = @@local_prefix@@
# Directory in which to put host dependent programs and libraries
exec_prefix = @@exec_prefix@@
# Directory in which to put the executable for the command `gcc'
bindir = @@bindir@@
# Directory in which to put the directories used by the compiler.
libdir = @@libdir@@
# Directory in which the compiler finds executables, libraries, etc.
libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(version)
# Directory in which the compiler finds g++ includes.
gxx_include_dir= @@gxx_include_dir@@
# Directory in which the old g++ header files may be found.
# The reason we use $(libdir)/g++-include rather than using libsubdir
# is for compatibility with older versions of libg++.
old_gxx_include_dir= $(libdir)/g++-include
# Directory to search for site-specific includes.
includedir = $(local_prefix)/include
# assertdir is overridden in cross-make.
# (But this currently agrees with what is in cross-make.)
assertdir = $(tooldir)/include
# where the info files go
infodir = @@infodir@@
# where the info-files get built
build_infodir = $(srcdir)
# Extension (if any) to put in installed man-page filename.
manext = .1
objext = .o
exeext = @@build_exeext@@

# Directory in which to put man pages.
mandir = @@mandir@@/man1
# Directory in which to find other cross-compilation tools and headers.
# Used in install-cross.
tooldir = $(exec_prefix)/$(target_alias)
# Dir for temp files.
tmpdir = /tmp

# Additional system libraries to link with.
CLIB=

# Change this to a null string if obstacks are installed in the
# system library.
OBSTACK=obstack.o

# Specify the rule for actually making libgcc.a,
LIBGCC = libgcc.a
# and the rule for installing it.
INSTALL_LIBGCC = install-libgcc

# Specify the rule for actually making libgcc1.a.
# The value may be empty; that means to do absolutely nothing
# with or for libgcc1.a.
LIBGCC1 = libgcc1.a

# Specify the rule for making libgcc1.a for a cross-compiler.
# The default rule assumes that libgcc1.a is supplied by the user.
CROSS_LIBGCC1 = libgcc1.cross

# Specify the rule for actually making libgcc2.a.
LIBGCC2 = libgcc2.a

# Options to use when compiling libgcc2.a.
# -g1 causes output of debug info only for file-scope entities.
# we use this here because that should be enough, and also
# so that -g1 will be tested.
LIBGCC2_DEBUG_CFLAGS = -g1
LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) $(LIBGCC2_DEBUG_CFLAGS) -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED -fexceptions

# Additional options to use when compiling libgcc2.a.
# Some targets override this to -Iinclude
LIBGCC2_INCLUDES =

# Additional target-dependent options for compiling libgcc2.a.
TARGET_LIBGCC2_CFLAGS = 

# Things which must be built before building libgcc2.a.
# Some targets override this to stmp-int-hdrs
LIBGCC2_DEPS =

# Enquire target (This is a variable so that a target can choose not to
# build it.)
ENQUIRE = enquire

# libgcc1-test target (must also be overridable for a target)
LIBGCC1_TEST = libgcc1-test

# Specify the target for installing the compiler driver
INSTALL_DRIVER = install-driver-with-alias

# List of extra executables that should be compiled for this target machine
# that are used for compiling from source code to object code.
# The rules for compiling them should be in the t-* file for the machine.
EXTRA_PASSES =@@extra_passes@@

# Like EXTRA_PASSES, but these are used when linking.
EXTRA_PROGRAMS = @@extra_programs@@

# List of extra object files that should be compiled for this target machine.
# The rules for compiling them should be in the t-* file for the machine.
EXTRA_PARTS = @@extra_parts@@

# List of extra object files that should be compiled and linked with
# compiler proper (cc1, cc1obj, cc1plus).
EXTRA_OBJS = @@extra_objs@@

# List of extra object files that should be compiled and linked with
# the gcc driver.
EXTRA_GCC_OBJS =@@host_extra_gcc_objs@@

# List of additional header files to install.
# Often this is edited directly by `configure'.
EXTRA_HEADERS =@@extra_headers_list@@

# Set this to `ld' to enable use of collect2.
USE_COLLECT2 = @@will_use_collect2@@
MAYBE_USE_COLLECT2 = @@maybe_use_collect2@@
# It is convenient for configure to add the assignment at the beginning,
# so don't override it here.

# List of extra C and assembler files to add to libgcc1.a.
# Assembler files should have names ending in `.asm'.
LIB1FUNCS_EXTRA = 

# List of extra C and assembler files to add to libgcc2.a.
# Assembler files should have names ending in `.asm'.
LIB2FUNCS_EXTRA = 

# Default float.h source to use for cross-compiler.
# This is overridden by configure.
CROSS_FLOAT_H=$(srcdir)/config/float-@@float_format@@.h

# Program to convert libraries.
LIBCONVERT = 

# Control whether header files are installed.
INSTALL_HEADERS=install-headers

# Options for tar when copying trees.  So HPUX can override it.
TAROUTOPTS = xpBf

# Select which version of fixincludes to use (I.E. regular versus SVR4)
# This value is overridden directly by configure.
FIXINCLUDES = @@fixincludes@@

# Set to ChangeLog if we are in a CVS working directory.  This lets
# us automatically build version.c.
VERSION_DEP = @@version_dep@@

# Additional directories of header files to run fixincludes on.
# These should be directories searched automatically by default
# just as /usr/include is.
# *Do not* use this for directories that happen to contain 
# header files, but are not searched automatically by default.
# On most systems, this is empty.
OTHER_FIXINCLUDES_DIRS=

# A list of all the language-specific executables.
# This is overridden by configure.
COMPILERS = cc1$(exeext) @@all_compilers@@

# List of things which should already be built whenever we try to use xgcc
# to compile anything (without linking).
GCC_PASSES=xgcc cc1 cpp $(EXTRA_PASSES)

# List of things which should already be built whenever we try to use xgcc
# to link anything.
GCC_PARTS=$(GCC_PASSES) $(LIBGCC) $(EXTRA_PROGRAMS) $(USE_COLLECT2) $(EXTRA_PARTS)

# Directory to link to, when using the target `maketest'.
DIR = ../gcc

# Guaranteed to not exist when not passing md through cpp.
# This value is overridden directly by configure.
MD_FILE = md-cpp-not-used

# Flags to use when cross-building GCC.
# Prefix to apply to names of object files when using them
# to run on the machine we are compiling on.
HOST_PREFIX=
# Prefix to apply to names of object files when compiling them
# to run on the machine we are compiling on.
# The default for this variable is chosen to keep these rules 
# out of the way of the other rules for compiling the same source files.
HOST_PREFIX_1=loser-
HOST_CC=$(CC)
HOST_CFLAGS=$(ALL_CFLAGS)
HOST_CLIB=$(CLIB)
HOST_LDFLAGS=$(LDFLAGS)
HOST_CPPFLAGS=$(ALL_CPPFLAGS)
HOST_ALLOCA=$(ALLOCA)
HOST_MALLOC=$(MALLOC)
HOST_OBSTACK=$(OBSTACK)

# Actual name to use when installing a native compiler.
GCC_INSTALL_NAME = `t='$(program_transform_name)'; echo gcc | sed $$t`

# Actual name to use when installing a cross-compiler.
GCC_CROSS_NAME = `t='$(program_transform_cross_name)'; echo gcc | sed $$t`

# Choose the real default target.
ALL=all.internal

# Choose the real install target.
INSTALL_TARGET=install-normal

# Source for float.h.  Overridden by cross-make.
FLOAT_H=float.h-nat

# Extra symbols for fixproto to define when parsing headers.
FIXPROTO_DEFINES = 

# Extra flags to use when compiling crt{begin,end}.o.
CRTSTUFF_T_CFLAGS = 

# Extra flags to use when compiling [m]crt0.o.
CRT0STUFF_T_CFLAGS = 

# "t" or nothing, for building multilibbed versions of, say, crtbegin.o.
T =

# End of variables for you to override.

# Definition of `all' is here so that new rules inserted by sed
# do not specify the default target.
# The real definition is under `all.internal' (for native compilers)
# or `all.cross' (for cross compilers).
all: all.indirect

# This tells GNU Make version 3 not to put all variables in the environment.
.NOEXPORT:

# sed inserts variable overrides after the following line.
####target overrides
@@target_overrides@@

####host overrides
@@host_overrides@@

####cross overrides
@@cross_defines@@
@@cross_overrides@@

####build overrides
@@build_overrides@@
#
# Now figure out from those variables how to compile and link.

all.indirect: $(ALL)

# IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.
# ??? IN_GCC should be obsolete now.
INTERNAL_CFLAGS = $(CROSS) -DIN_GCC @@extra_c_flags@@

# This is the variable actually used when we compile.
ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS) \
	@@DEFS@@

# Likewise.
ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)

# Even if ALLOCA is set, don't use it if compiling with GCC.
USE_ALLOCA= ` case "${CC}" in "${OLDCC}") echo "${ALLOCA}" ;; esac `
USE_HOST_ALLOCA= ` case "${HOST_CC}"@@"${HOST_ALLOCA}" in "${OLDCC}"@@?*) echo ${HOST_PREFIX}${HOST_ALLOCA} ;; esac `
USE_HOST_MALLOC= ` case "${HOST_MALLOC}" in ?*) echo ${HOST_PREFIX}${HOST_MALLOC} ;; esac `
USE_HOST_OBSTACK= ` case "${HOST_OBSTACK}" in ?*) echo ${HOST_PREFIX}${HOST_OBSTACK} ;; esac `

# Dependency on obstack, alloca, malloc or whatever library facilities
# are not installed in the system libraries.
# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.
LIBDEPS= $(OBSTACK) $(ALLOCA) $(MALLOC)

# Likewise, for use in the tools that must run on this machine
# even if we are cross-building GCC.
# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.
HOST_LIBDEPS= $(HOST_PREFIX)$(HOST_OBSTACK) $(HOST_PREFIX)$(HOST_ALLOCA) $(HOST_PREFIX)$(HOST_MALLOC)

# How to link with both our special library facilities
# and the system's installed libraries.
LIBS = $(OBSTACK) $(USE_ALLOCA) $(MALLOC) $(CLIB)

# Likewise, for use in the tools that must run on this machine
# even if we are cross-building GCC.
HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_ALLOCA) $(USE_HOST_MALLOC)  \
	    $(HOST_CLIB)

HOST_RTL = $(HOST_PREFIX)rtl.o
HOST_RTLANAL = $(HOST_PREFIX)rtlanal.o
HOST_PRINT = $(HOST_PREFIX)print-rtl.o

# Specify the directories to be searched for header files.
# Both . and srcdir are used, in that order,
# so that tm.h and config.h will be found in the compilation
# subdirectory rather than in the source directory.
INCLUDES = -I. -I$(srcdir) -I$(srcdir)/config

# Always use -I$(srcdir)/config when compiling.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<

# This tells GNU make version 3 not to export all the variables
# defined in this file into the environment.
.NOEXPORT:
#
# Support for additional languages (other than c and objc).
# ??? objc can be supported this way too (leave for later).

# These next lines are overridden by configure.
LANG_MAKEFILES = @@all_lang_makefiles@@
LANG_STAGESTUFF = @@all_stagestuff@@
LANG_DIFF_EXCLUDES = @@all_diff_excludes@@
LANG_LIB2FUNCS = @@all_lib2funcs@@
LANG_EXTRA_HEADERS = @@all_headers@@

# Flags to pass to recursive makes.
# CC is set by configure.  Hosts without symlinks need special handling
# because we need CC="stage1/xgcc -Bstage1/" to work in the language
# subdirectories.
# ??? The choices here will need some experimenting with.
FLAGS_TO_PASS = \
	"AR_FLAGS=$(AR_FLAGS)" \
	"AR_FOR_TARGET=$(AR_FOR_TARGET)" \
	"BISON=$(BISON)" \
	"BISONFLAGS=$(BISONFLAGS)" \
	"CC=@@cc_set_by_configure@@" \
	"CFLAGS=$(CFLAGS)" \
	"CLIB=$(CLIB)" \
	"GCC_FOR_TARGET=$(GCC_FOR_TARGET)" \
	"LDFLAGS=$(LDFLAGS)" \
	"LEX=$(LEX)" \
	"LEXFLAGS=$(LEXFLAGS)" \
	"LN=$(LN)" \
	"MAKEINFO=$(MAKEINFO)" \
	"MAKEINFOFLAGS=$(MAKEINFOFLAGS)" \
	"RANLIB_FOR_TARGET=$(RANLIB_FOR_TARGET)" \
	"RANLIB_TEST_FOR_TARGET=$(RANLIB_TEST_FOR_TARGET)" \
	"SHELL=$(SHELL)" \
	"STAGE_PREFIX=@@stage_prefix_set_by_configure@@" \
	"exeext=$(exeext)" \
	"objext=$(objext)" \
	"exec_prefix=$(exec_prefix)" \
	"prefix=$(prefix)" \
	"tooldir=$(tooldir)" \
	"bindir=$(bindir)" \
	"libsubdir=$(libsubdir)"
#
# Lists of files for various purposes.

# Language-specific object files for C and Objective C.
C_AND_OBJC_OBJS = c-lex.o c-pragma.o c-decl.o c-typeck.o c-convert.o \
  c-aux-info.o c-common.o c-iterate.o @@extra_c_objs@@

# Language-specific object files for C.
C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)

# Files specific to the C interpreter bytecode compiler(s).
BC_OBJS = bc-emit.o bc-optab.o

# Bytecode header files constructed at build time; vmsconfig.com wants this.
BC_ALL = bc-arity.h bc-opcode.h bc-opname.h

# Language-independent object files.
OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \
 function.o stmt.o except.o expr.o calls.o expmed.o explow.o optabs.o \
 varasm.o rtl.o print-rtl.o rtlanal.o emit-rtl.o real.o \
 dbxout.o sdbout.o dwarfout.o dwarf2out.o xcoffout.o bitmap.o \
 integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o \
 regclass.o local-alloc.o global.o reload.o reload1.o caller-save.o \
 insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o \
 insn-opinit.o insn-recog.o insn-extract.o insn-output.o insn-emit.o \
 profile.o insn-attrtab.o $(out_object_file) getpwd.o convert.o $(EXTRA_OBJS)

# GEN files are listed separately, so they can be built before doing parallel
#  makes for cc1 or cc1plus.  Otherwise sequent parallel make attempts to load
#  them before rtl.o is compiled.
GEN= genemit genoutput genrecog genextract genflags gencodes genconfig genpeep

CCCP=cccp
# Uncomment this line if you want to use cppmain (w/cpplib) as cpp.
#CCCP=cppmain

# Files to be copied away after each stage in building.
STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \
 insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \
 insn-attr.h insn-attrtab.c insn-opinit.c \
 s-flags s-config s-codes s-mlib \
 s-output s-recog s-emit s-extract s-peep \
 s-attr s-attrtab s-opinit s-proto s-crt s-crtS s-crt0 \
 genemit$(exeext) genoutput$(exeext) genrecog$(exeext) genextract$(exeext) \
 genflags$(exeext) gencodes$(exeext) genconfig$(exeext) genpeep$(exeext) \
 genattrtab$(exeext) genattr$(exeext) genopinit$(exeext) \
 $(BC_ALL) \
 s-bcarity s-bcopcode s-bcopname \
 bi-arity$(exeext) bi-opcode$(exeext) bi-opname$(exeext) \
 xgcc$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES) \
 $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \
 $(CCCP)$(exeext) cc1obj$(exeext) enquire$(exeext) \
 protoize$(exeext) unprotoize$(exeext) \
 specs collect2$(exeext) $(USE_COLLECT2) underscore.c \
 gcov$(exeext) *.bp \
 *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop \
 *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack \
 *.[si] \
 $(LANG_STAGESTUFF)

# Members of libgcc1.a.
LIB1FUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \
   _lshrsi3 _ashrsi3 _ashlsi3 \
   _divdf3 _muldf3 _negdf2 _adddf3 _subdf3 \
   _fixdfsi _fixsfsi _floatsidf _floatsisf _truncdfsf2 _extendsfdf2 \
   _addsf3 _negsf2 _subsf3 _mulsf3 _divsf3 \
   _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2 \
   _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2

# Library members defined in libgcc2.c.
LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2 \
     _lshrdi3 _ashldi3 _ashrdi3 _ffsdi2 \
    _udiv_w_sdiv _udivmoddi4 _cmpdi2 _ucmpdi2 _floatdidf _floatdisf \
    _fixunsdfsi _fixunssfsi _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi \
    _fixxfdi _fixunsxfdi _floatdixf _fixunsxfsi \
    _fixtfdi _fixunstfdi _floatditf \
    __gcc_bcmp _varargs __dummy _eprintf _op_new _op_vnew _new_handler \
    _op_delete _op_vdel _bb _shtab _clear_cache _trampoline __main _exit \
    _ctors _eh _eh_compat _pure

# The files that "belong" in CONFIG_H are deliberately omitted
# because having them there would not be useful in actual practice.
# All they would do is cause complete recompilation every time
# one of the machine description files is edited.
# That may or may not be what one wants to do.
# If it is, rm *.o is an easy way to do it.
# CONFIG_H = $(host_xm_file) $(tm_file)
CONFIG_H =
RTL_H = rtl.h rtl.def gansidecl.h machmode.h machmode.def
TREE_H = tree.h real.h tree.def gansidecl.h machmode.h machmode.def
BYTECODE_H = bytecode.h bc-emit.h bc-optab.h
BASIC_BLOCK_H = basic-block.h bitmap.h
DEMANGLE_H = demangle.h gansidecl.h
RECOG_H = recog.h gansidecl.h
#
# Language makefile fragments.

# The following targets define the interface between us and the languages.
#
# all.build, all.cross, start.encap, rest.encap,
# info, dvi,
# install-normal, install-common, install-info, install-man,
# uninstall, distdir,
# mostlyclean, clean, distclean, extraclean, maintainer-clean,
# stage1, stage2, stage3, stage4
#
# Each language is linked in with a series of hooks (since we can't use `::'
# targets).  The name of each hooked is "lang.${target_name}" (eg: lang.info).
# Configure computes and adds these here.

####language hooks
@@language_hooks@@

# sed inserts language fragments after the following line.
####language fragments
@@language_fragments@@

# End of language makefile fragments.
#
# Avoid a lot of time thinking about remaking Makefile.in and *.def.
.SUFFIXES: .in .def

$(srcdir)/version.c: $(VERSION_DEP)
	cd $(srcdir); cvs log -h $? >tmp-ver
	tag=`sed '1,/^sym/d;s/	*gcc-//;s/:.*$$//;q' tmp-ver`; \
	ver=`echo $${tag} | sed 's/-.*//' | sed 's/_/./g'`; \
	date=`echo $${tag} | sed 's/.*-//'`; \
	if [ $${date} != RELEASE ]; then ver="testgcc-$${ver} $${date} experimental"; fi; \
	echo "char *version_string = \"$${ver}\";" >>tmp-version.c
	rm -f tmp-ver
	sh $(srcdir)/move-if-change tmp-version.c $(srcdir)/version.c

Makefile: $(srcdir)/Makefile.in config.status $(srcdir)/version.c \
   $(xmake_file) $(tmake_file) $(LANG_MAKEFILES)
	$(SHELL) $(srcdir)/configure.frag $(srcdir) "$(SUBDIRS)" \
		"$(xmake_file)" "$(tmake_file)"
	cp config.status config.run
	$(SHELL) config.run
	rm -f config.run

# XXX OpenBSD
#$(srcdir)/configure: $(srcdir)/configure.in
#	cd $(srcdir); autoconf

# cstamp-h.in controls rebuilding of config.in.
# It is named cstamp-h.in and not stamp-h.in so the mostlyclean rule doesn't
# delete it.  A stamp file is needed as autoheader won't update the file if
# nothing has changed.
# It remains in the source directory and is part of the distribution.
# This follows what is done in shellutils, fileutils, etc.
# "echo timestamp" is used instead of touch to be consistent with other
# packages that use autoconf (??? perhaps also to avoid problems with patch?).
# ??? Newer versions have a maintainer mode that may be useful here.
$(srcdir)/config.in: $(srcdir)/cstamp-h.in
$(srcdir)/cstamp-h.in: $(srcdir)/configure.in $(srcdir)/acconfig.h
	cd $(srcdir) && autoheader
	echo timestamp > $(srcdir)/cstamp-h.in
auto-config.h: cstamp-h ; @@true
cstamp-h: config.in config.status
	CONFIG_HEADERS=auto-config.h:config.in $(SHELL) config.status

# Really, really stupid make features, such as SUN's KEEP_STATE, may force
# a target to build even if it is up-to-date.  So we must verify that
# config.status does not exist before failing.
config.status: configure version.c
	@@if [ ! -f config.status ] ; then \
	  echo You must configure gcc.  Look at the INSTALL file for details.; \
	  false; \
	else \
	  $(SHELL) config.status --recheck; \
	fi

all.internal: start.encap rest.encap
# This is what to compile if making a cross-compiler.
# Note that we can compile enquire using the cross-compiler just built,
# although we can't run it on this machine.
all.cross: native gcc-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO) \
	$(LIBGCC1_TEST) $(EXTRA_PARTS) lang.all.cross
# This is what to compile if making gcc with a cross-compiler.
all.build: native xgcc $(EXTRA_PARTS) lang.all.build
# This is what must be made before installing GCC and converting libraries.
start.encap: native xgcc specs $(LIBGCC1) xlimits.h lang.start.encap
# These can't be made until after GCC can run.
rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(EXTRA_PARTS) lang.rest.encap
# This is what is made with the host's compiler
# whether making a cross compiler or not.
native: config.status auto-config.h cpp $(LANGUAGES) \
	$(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)

# Define the names for selecting languages in LANGUAGES.
C c: cc1
PROTO: proto

# Tell GNU make these are phony targets.
.PHONY: C c PROTO proto

# On the target machine, finish building a cross compiler.
# This does the things that can't be done on the host machine.
rest.cross: $(LIBGCC) gfloat.h specs

# Verify that it works to compile and link libgcc1-test.
# If it does, then there are sufficient replacements for libgcc1.a.
libgcc1-test: libgcc1-test.o native $(GCC_PARTS)
	@@echo "Testing libgcc1.  Ignore linker warning messages."
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) libgcc1-test.o -o libgcc1-test \
	  -nostartfiles -nostdlib `$(GCC_FOR_TARGET) --print-libgcc-file-name`
libgcc1-test.o: libgcc1-test.c native xgcc
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -c $(srcdir)/libgcc1-test.c

# Recompile all the language-independent object files.
# This is used only if the user explicitly asks for it.
compilations: ${OBJS}

# Create a list of the language-independent object files so the language
# subdirectories needn't mention their names explicitly.
stamp-objlist: $(OBJS) $(BC_OBJS)
	echo " $(OBJS) $(BC_OBJS)" | sed -e 's, \([a-z0-9]\), ../\1,g' -e 's/\.o/$(objext)/g' >stamp-objlist

# We call this executable `xgcc' rather than `gcc'
# to avoid confusion if the current directory is in the path
# and CC is `gcc'.  It is renamed to `gcc' when it is installed.
xgcc: gcc.o version.o choose-temp.o pexecute.o prefix.o version.o \
   $(LIBDEPS) $(EXTRA_GCC_OBJS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ gcc.o prefix.o version.o \
	  choose-temp.o pexecute.o $(EXTRA_GCC_OBJS) $(LIBS)

# Dump a specs file to make -B./ read these specs over installed ones.
specs: xgcc
	$(GCC_FOR_TARGET) -dumpspecs > tmp-specs
	mv tmp-specs specs

# We do want to create an executable named `xgcc', so we can use it to
# compile libgcc2.a.
# Also create gcc-cross, so that install-common will install properly.
gcc-cross: xgcc
	cp xgcc$(exeext) gcc-cross$(exeext)

cc1: $(P) $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)

# Copy float.h from its source.
gfloat.h: $(FLOAT_H)
	-rm -f gfloat.h
	cp $(FLOAT_H) gfloat.h

# Create float.h source for the native machine.
# Make it empty if we can use the system float.h without changes.
float.h-nat: enquire
	-./enquire -f > tmp-float.h
	grep '#define [^_]' tmp-float.h >/dev/null || true > tmp-float.h
	mv tmp-float.h float.h-nat

# Create a dummy float.h source for a cross-compiler.
# ??? This isn't used anymore.  Should we create config/float-unkn.h
# and make that the default float_format in configure?
float.h-cross:
	echo "#ifndef	__GCC_FLOAT_NOT_NEEDED" > t-float.h-cross
	echo "#error float.h values not known for cross-compiler" >> t-float.h-cross
	echo "#endif" >> t-float.h-cross
	mv t-float.h-cross float.h-cross

# Used to compile enquire with standard cc, but have forgotten why.
# Let's try with GCC.
enquire: enquire.o $(GCC_PARTS)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@@
enquire.o: $(srcdir)/enquire.c $(GCC_PASSES) stmp-int-hdrs
	rm -f include/float.h
	if $(FLOAT_H_TEST); then \
	  SYS_FLOAT_H_WRAP=1; \
	else :; \
	  SYS_FLOAT_H_WRAP=0; \
	fi; \
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) \
	  -DSYS_FLOAT_H_WRAP=$$SYS_FLOAT_H_WRAP \
	  -I. -c $(srcdir)/enquire.c

# Build the version of limits.h that we will install.
xlimits.h: glimits.h limitx.h limity.h
	if $(LIMITS_H_TEST) ; then \
	  cat $(srcdir)/limitx.h $(srcdir)/glimits.h $(srcdir)/limity.h > tmp-xlimits.h; \
	else \
	  cat $(srcdir)/glimits.h > tmp-xlimits.h; \
	fi
	mv tmp-xlimits.h xlimits.h
#
# Build libgcc.a.
# This is done in two parts because some functions, in libgcc1.c,
# must be compiled with something other than GCC,
# while the rest, in libgcc2.c, must be compiled with xgcc.
# That means we can't do libgcc2.c until after xgcc, cc1, etc.

# Use this as value of LIBGCC1 to cause conversion to GNU library format.
# LIBCONVERT should put its output in libgcc1.conv.
libgcc1.conv: libgcc1.a
	$(LIBCONVERT) libgcc1.a libgcc1.conv

# Use this as value of LIBGCC1 to inhibit use of libgcc1.c entirely.
# Make an empty file instead.
libgcc1.null: $(GCC_PASSES)
	echo "__foo () {}" > dummy.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) -c dummy.c
	$(OLDAR) $(OLDAR_FLAGS) libgcc1.null dummy$(objext)
	rm -f dummy$(objext) dummy.c

# This is $(LIBGCC1) for a cross-compiler.
# We have no automatic way of building libgcc1.a, 
# so it's up to the installer to find a way to do that.
# This rule deliberately does not depend on libgcc1.a
# so that it will fail if the installer hasn't provided it.
libgcc1.cross:
	mv libgcc1.a libgcc1.cross || (echo You must find a way to make libgcc1.a; false)

# Compile the library of arithmetic subroutines with the native compiler.
# Don't compile it with GCC!
# (That would cause most arithmetic functions to call themselves.)
#
# NOTE: If you modify these rules substantially, please be sure to
# check at least config/i386/t-sco5 and possibly other makefile
# fragments.
libgcc1.a: libgcc1.c $(CONFIG_H) $(LIB1FUNCS_EXTRA) config.status
	-rm -f tmplibgcc1.a
# Actually build it in tmplibgcc1.a, then rename at end,
# so that libgcc1.a itself remains nonexistent if compilation is aborted.
# -e causes any failing command to make this rule fail.
# -e doesn't work in certain shells, so we test $$? as well.
# lynx has a broken ar, it always complains when the initial library is
# empty, thus this command works only if we don't do -e
# There is a trailing backslash (\) deleted from the following line.
#	set -e;
	for name in $(LIB1FUNCS); \
	do \
	  echo $${name}; \
	  rm -f $${name}$(objext); \
	  $(OLDCC) -DIN_LIBGCC1 $(CCLIBFLAGS) $(INCLUDES) -c -DL$${name} $(srcdir)/libgcc1.c; \
	  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	  mv libgcc1$(objext) $${name}$(objext); \
	  $(OLDAR) $(OLDAR_FLAGS) tmplibgcc1.a $${name}$(objext); \
	  rm -f $${name}$(objext); \
	done
# Some shells crash when a loop has no items.
# So make sure there is always at least one--`..'.
# Then ignore it.
# We don't use -e here because there are if statements
# that should not make the command give up when the if condition is false.
# Instead, we test for failure after each command where it matters.
	for file in .. $(LIB1FUNCS_EXTRA); \
	do \
	  if [ x$${file} != x.. ]; then \
	    name=`echo $${file} | sed -e 's/[.][cS]$$//' -e 's/[.]asm$$//'`; \
	    echo $${name}; \
	    if [ $${name}.asm = $${file} ]; then \
	      cp $${file} $${name}.s || exit 1; file=$${name}.s; \
	    else true; fi; \
	    $(OLDCC) -DIN_LIBGCC1 $(CCLIBFLAGS) $(INCLUDES) -c $${file}; \
	    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	    $(OLDAR) $(OLDAR_FLAGS) tmplibgcc1.a $${name}$(objext); \
	    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	    rm -f $${name}.s $${name}$(objext); \
	  else true; \
	  fi; \
	done
	-if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc1.a; else true; fi
	mv tmplibgcc1.a libgcc1.a

# Build libgcc1.a from assembler source.  LIB1ASMFUNCS is the list of
# functions.  LIB1ASMSRC is the name of the source file in the config
# subdirectory.
libgcc1-asm.a: libgcc2.ready config.status $(srcdir)/config/$(LIB1ASMSRC)
	-rm -f tmplibgcc1.a libgcc1.S
	cp $(srcdir)/config/$(LIB1ASMSRC) libgcc1.S
# Actually build it in tmplibgcc1.a, then rename at end,
# so that libgcc1-asm.a itself remains nonexistent if compilation is aborted.
# -e causes any failing command to make this rule fail.
# -e doesn't work in certain shells, so we test $$? as well.
# lynx has a broken ar, it always complains when the initial library is
# empty, thus this command works only if we don't do -e
# There is a trailing backslash (\) deleted from the following line.
#	set -e;
	for name in $(LIB1ASMFUNCS); \
	do \
	  echo $${name}; \
	  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} libgcc1.S; \
	  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	  mv libgcc1$(objext) $${name}$(objext); \
	  $(AR) $(AR_FLAGS) tmplibgcc1.a $${name}$(objext); \
	  rm -f $${name}$(objext); \
	done
	-rm -f libgcc1.S
	mv tmplibgcc1.a libgcc1-asm.a

# Generate assembly versions of the functions required for libgcc1.
# You'll still need to massage the code by hand (possibly hacking
# underscores and local labels) but this will get you started.
libgcc1.S: libgcc1.c $(CONFIG_H) config.status
	-rm -f libgcc1.S
	touch libgcc1.S
	for name in $(LIB1FUNCS); \
	do \
	  echo $${name}; \
	  $(OLDCC) -DIN_LIBGCC1 $(CCLIBFLAGS) $(INCLUDES) -S -DL$${name} $(srcdir)/libgcc1.c; \
	  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	  echo '#ifdef ' L$${name} >> libgcc1.S; \
	  cat  libgcc1.s >> libgcc1.S; \
	  echo '#endif /*' L$${name} '*/' >> libgcc1.S; \
	  echo "" >> libgcc1.S; \
	done

# Compiling libgcc2.a requires making sure that cc1, etc. have been compiled.
# But recompiling cc1 should not force recompilation of libgcc2.a.
# If you want to force recompilation, delete libgcc2.a.
libgcc2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS) stmp-int-hdrs
	-if [ -f libgcc2.ready ] ; then \
		true; \
	else \
		touch libgcc2.ready; \
	fi

LIB2ADD = $(srcdir)/frame.c $(LIB2FUNCS_EXTRA) $(LANG_LIB2FUNCS)
libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(LIB2ADD) \
   machmode.h longlong.h frame.h gansidecl.h gbl-ctors.h config.status
# Actually build it in tmplibgcc2.a, then rename at end,
# so that libgcc2.a itself remains nonexistent if compilation is aborted.
	-rm -f tmplibgcc2.a
# -e causes any failing command to make this rule fail.
# -e doesn't work in certain shells, so we test $$? as well.
# lynx has a broken ar, it always complains when the initial library is
# empty, thus this command works only if we don't do -e
# There is a trailing backslash (\) deleted from the following line.
#	set -e;
	for name in $(LIB2FUNCS); \
	do \
	  echo $${name}; \
	  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \
	      $(srcdir)/libgcc2.c -o $${name}$(objext); \
	  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	  $(AR) $(AR_FLAGS) tmplibgcc2.a $${name}$(objext); \
	  rm -f $${name}$(objext); \
	done
# Some shells crash when a loop has no items.
# So make sure there is always at least one--`..'.
# Then ignore it.
# We don't use -e here because there are if statements
# that should not make the command give up when the if condition is false.
# Instead, we test for failure after each command where it matters.
	for file in $(LIB2ADD); do \
	  name=`echo $${file} | sed -e 's/[.][cSo]$$//' -e 's/[.]asm$$//' -e 's/[.]txt$$//'`; \
	  oname=` echo $${name} | sed -e 's,.*/,,'`; \
	  if [ $${name}.txt = $${file} ]; then \
	    for f in .. `cat $${file}`; do if [ x$${f} != x.. ]; then \
	      $(MAKE) GCC_FOR_TARGET="$(GCC_FOR_TARGET)" \
		AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" CC="$(CC)" \
		CFLAGS="$(CFLAGS)" HOST_PREFIX="$(HOST_PREFIX)" \
		HOST_PREFIX_1="$(HOST_PREFIX_1)" \
		LANGUAGES="$(LANGUAGES)" \
		LIBGCC2_CFLAGS="$(LIBGCC2_CFLAGS)" $${f}; \
	      if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	      $(AR) $(AR_FLAGS) tmplibgcc2.a $${f}; \
	      rm -f $${f}; \
	    else true; \
	    fi; done; \
	  else \
	    echo $${name}; \
	    if [ $${name}.asm = $${file} ]; then \
	      cp $${file} $${name}.s || exit 1; file=$${name}.s; \
	    else true; fi; \
	    $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c $${file}; \
	    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	    $(AR) $(AR_FLAGS) tmplibgcc2.a $${oname}$(objext); \
	    rm -f $${name}.s $${oname}$(objext); \
	  fi; \
	done
	-if [ x${HPUX_GAS} = x ] ; then \
	  if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc2.a; else true; fi; \
	else true; fi; \
	mv tmplibgcc2.a libgcc2.a
# These lines were deleted from above the mv command
# because it was thought ranlibing libgcc.a itself should suffice.
# However that was not true, as some make variants treats unranlibed
# archives as always out-of-date.
#	-if [ x${HPUX_GAS} = x ] ; then \
#	  if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc2.a; else true; fi; \
#	else true; fi

# Combine the various libraries into a single library, libgcc.a.
libgcc.a: $(LIBGCC1) $(LIBGCC2)
	-rm -rf tmplibgcc.a libgcc.a tmpcopy
	mkdir tmpcopy
	-if [ x$(LIBGCC1) != x ];			\
	then (cd tmpcopy; $(AR) x ../$(LIBGCC1));	\
	else true;					\
	fi
# Some versions of ar (specifically the one in RISC/os 5.x), create an
# unwritable table of contents file, and then print an error message when
# the second ar command tries to overwrite this file.  To avoid the error
# message from ar, we make sure all files are writable.
	-(cd tmpcopy; chmod +w * > /dev/null 2>&1)
	(cd tmpcopy; $(AR) x ../$(LIBGCC2))
	(cd tmpcopy; $(AR) $(AR_FLAGS) ../tmplibgcc.a *$(objext))
	rm -rf tmpcopy
	-if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc.a; else true; fi
# Actually build it in tmplibgcc.a, then rename at end,
# so that libgcc.a itself remains nonexistent if compilation is aborted.
	mv tmplibgcc.a libgcc.a

# Use the genmultilib shell script to generate the information the gcc
# driver program needs to select the library directory based on the
# switches.
multilib.h: s-mlib; @@true
s-mlib: $(srcdir)/genmultilib Makefile
	$(SHELL) $(srcdir)/genmultilib \
	  "$(MULTILIB_OPTIONS)" \
	  "$(MULTILIB_DIRNAMES)" \
	  "$(MULTILIB_MATCHES)" \
	  "$(MULTILIB_EXCEPTIONS)" \
	  "$(MULTILIB_EXTRA_OPTS)" > tmp-mlib.h
	sh $(srcdir)/move-if-change tmp-mlib.h multilib.h
	touch s-mlib

# Build multiple copies of libgcc.a, one for each target switch.
stmp-multilib: $(LIBGCC1) libgcc2.c libgcc2.ready $(CONFIG_H) \
   frame.h gansidecl.h \
   $(LIB2ADD) machmode.h longlong.h gbl-ctors.h config.status
	for i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \
	  dir=`echo $$i | sed -e 's/;.*$$//'`; \
	  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@@/ -/g'`; \
	  $(MAKE) GCC_FOR_TARGET="$(GCC_FOR_TARGET)" \
	    AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" CC="$(CC)" CFLAGS="$(CFLAGS)" \
	    RANLIB="$(RANLIB)" RANLIB_TEST="$(RANLIB_TEST)" \
	    LANGUAGES="$(LANGUAGES)" \
	    HOST_PREFIX="$(HOST_PREFIX)" HOST_PREFIX_1="$(HOST_PREFIX_1)" \
	    LIBGCC2_CFLAGS="$(LIBGCC2_CFLAGS) $${flags}" \
	    MULTILIB_CFLAGS="$${flags}" \
	    LIBGCC1="$(LIBGCC1)" LIBGCC2="$(LIBGCC2)" \
	    dir="$${dir}" stmp-multilib-sub; \
	  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	done
	touch stmp-multilib

# Subroutine of stmp-multilib so make -n works.
stmp-multilib-sub:
	rm -f $(LIBGCC2)
	if [ -d $(dir) ]; then \
	  cd $(dir); \
	  rm -f libgcc.a $(EXTRA_MULTILIB_PARTS); \
	else true; \
	fi
	$(MAKE) GCC_FOR_TARGET="$(GCC_FOR_TARGET)" \
	  AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" CC="$(CC)" CFLAGS="$(CFLAGS)" \
	  HOST_PREFIX="$(HOST_PREFIX)" HOST_PREFIX_1="$(HOST_PREFIX_1)" \
	  LANGUAGES="$(LANGUAGES)" \
	  LIBGCC2_CFLAGS="$(LIBGCC2_CFLAGS)" $(LIBGCC2)
	if [ x$(LIBGCC1) != xlibgcc1-asm.a ]; \
	then true; \
	else rm -f $(LIBGCC1); \
	fi
	if [ x$(LIBGCC1) != xlibgcc1-asm.a ]; \
	then true; \
	else \
	  $(MAKE) GCC_FOR_TARGET="$(GCC_FOR_TARGET)" \
	    AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" CC="$(CC)" CFLAGS="$(CFLAGS)" \
	    HOST_PREFIX="$(HOST_PREFIX)" HOST_PREFIX_1="$(HOST_PREFIX_1)" \
	    LANGUAGES="$(LANGUAGES)" \
	    LIBGCC2_CFLAGS="$(LIBGCC2_CFLAGS)" $(LIBGCC1); \
	fi
	rm -rf tmplibgcc.a tmpcopy
	mkdir tmpcopy
	if [ x$(LIBGCC1) != x ]; \
	then (cd tmpcopy; $(AR) x ../$(LIBGCC1)); \
	else true; \
	fi
	(cd tmpcopy; $(AR) x ../$(LIBGCC2))
	(cd tmpcopy; $(AR) $(AR_FLAGS) ../tmplibgcc.a *$(objext))
	rm -rf libgcc2.a tmpcopy
	if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc.a; else true; fi
	if [ -d $(dir) ]; then true; else mkdir $(dir); fi
	mv tmplibgcc.a $(dir)/libgcc.a
	for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  $(MAKE) GCC_FOR_TARGET="$(GCC_FOR_TARGET)" \
	    AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" CC="$(CC)" CFLAGS="$(CFLAGS)" \
	    HOST_PREFIX="$(HOST_PREFIX)" HOST_PREFIX_1="$(HOST_PREFIX_1)" \
	    LANGUAGES="$(LANGUAGES)" \
	    MULTILIB_CFLAGS="$(MULTILIB_CFLAGS)" T="t" t$${f}; \
	  mv t$${f} $(dir)/$${f}; \
	else true; \
	fi; done

# Compile two additional files that are linked with every program
# linked using GCC on systems using COFF or ELF, for the sake of C++
# constructors.
$(T)crtbegin.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \
  defaults.h frame.h gbl-ctors.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \
	  -finhibit-size-directive -fno-inline-functions -fno-exceptions $(CRTSTUFF_T_CFLAGS) \
	  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -o $(T)crtbegin$(objext)

$(T)crtend.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \
  defaults.h frame.h gbl-ctors.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \
	  -finhibit-size-directive -fno-inline-functions -fno-exceptions $(CRTSTUFF_T_CFLAGS) \
	  -c $(srcdir)/crtstuff.c -DCRT_END -o $(T)crtend$(objext)

# On some systems we also want to install versions of these files
# compiled using PIC for use in shared libraries.
crtbeginS.o crtendS.o: s-crtS ; @@true

s-crtS: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \
  defaults.h frame.h gbl-ctors.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS_S) \
	  -DCRT_BEGIN -finhibit-size-directive -fno-inline-functions \
	  -g0 -c $(srcdir)/crtstuff.c 
	mv crtstuff$(objext) crtbeginS$(objext)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS_S) \
	  -DCRT_END -finhibit-size-directive -fno-inline-functions \
	  -g0 -c $(srcdir)/crtstuff.c -o crtendS$(objext)
	touch s-crtS

# Compile the start modules crt0.o and mcrt0.o that are linked with every program
crt0.o: s-crt0 ; @@true
mcrt0.o: s-crt0; @@true

s-crt0:	$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(CRT0STUFF_T_CFLAGS) \
	  -o crt0.o -c $(CRT0_S)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(CRT0STUFF_T_CFLAGS) \
	  -o mcrt0.o -c $(MCRT0_S)
	touch s-crt0
#
# Compiling object files from source files.

# Note that dependencies on obstack.h are not written
# because that file is not part of GCC.

# C language specific files.

c-parse.o : c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \
    c-parse.h c-tree.h input.h flags.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c c-parse.c
c-parse.h: c-parse.c
c-parse.c: c-parse.y
	$(BISON) $(BISONFLAGS) -d -o c-parse.c c-parse.y
c-parse.y: c-parse.in
	echo '/*WARNING: This file is automatically generated!*/' >tmp-c-parse.y
	sed -e "/^ifobjc$$/,/^end ifobjc$$/d" \
	  -e "/^ifc$$/d" -e "/^end ifc$$/d" \
	  $(srcdir)/c-parse.in >>tmp-c-parse.y
	sh $(srcdir)/move-if-change tmp-c-parse.y c-parse.y

# XXX OpenBSD
#$(srcdir)/c-gperf.h: c-parse.gperf
#	gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$$ \
#	   $(srcdir)/c-parse.gperf >tmp-gperf.h
#	sh $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h

c-decl.o : c-decl.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h output.h
c-typeck.o : c-typeck.c $(CONFIG_H) $(TREE_H) c-tree.h flags.h output.h
c-lang.o : c-lang.c $(CONFIG_H) $(TREE_H)
c-lex.o : c-lex.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h c-parse.h \
    input.h flags.h $(srcdir)/c-gperf.h c-pragma.h
c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(TREE_H) c-tree.h flags.h
c-convert.o : c-convert.c $(CONFIG_H) $(TREE_H) flags.h
c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H) except.h function.h \
    defaults.h c-pragma.h
c-iterate.o: c-iterate.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h flags.h

# To make a configuration always use collect2, set USE_COLLECT2 to ld.
ld: collect2
	rm -f ld$(exeext)
	ln collect2$(exeext) ld$(exeext) > /dev/null 2>&1 \
	   || cp collect2$(exeext) ld$(exeext)

collect2 : collect2.o cplus-dem.o underscore.o version.o \
	choose-temp.o $(LIBDEPS)
# Don't try modifying collect2 (aka ld) in place--it might be linking this.
	-rm -f collect2$(exeext)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ collect2.o \
	  cplus-dem.o underscore.o version.o choose-temp.o $(LIBS)

collect2.o : collect2.c $(CONFIG_H) gansidecl.h gstab.h obstack.h $(DEMANGLE_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  \
	-DTARGET_MACHINE=\"$(target_alias)\" $(MAYBE_USE_COLLECT2) \
	-c `echo $(srcdir)/collect2.c | sed 's,^\./,,'`

cplus-dem.o: cplus-dem.c $(DEMANGLE_H)

underscore.c: s-under ; @@true

s-under: $(GCC_PASSES)
	echo "int xxy_us_dummy;" >tmp-dum.c
	$(GCC_FOR_TARGET) -S tmp-dum.c
	echo '/*WARNING: This file is automatically generated!*/' >tmp-under.c
	if grep _xxy_us_dummy tmp-dum.s > /dev/null ; then \
	  echo "int prepends_underscore = 1;" >>tmp-under.c; \
	else \
	  echo "int prepends_underscore = 0;" >>tmp-under.c; \
	fi
	sh $(srcdir)/move-if-change tmp-under.c underscore.c
	-rm -f tmp-dum.c tmp-dum.s
	touch s-under

# A file used by all variants of C.

c-common.o : c-common.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h

# Language-independent files.

DRIVER_DEFINES = \
  -DSTANDARD_STARTFILE_PREFIX=\"$(libdir)/\" \
  -DSTANDARD_EXEC_PREFIX=\"$(libdir)/gcc-lib/\" \
  -DDEFAULT_TARGET_VERSION=\"$(version)\" \
  -DDEFAULT_TARGET_MACHINE=\"$(target_alias)\" \
  -DTOOLDIR_BASE_PREFIX=\"$(exec_prefix)/\"
gcc.o: gcc.c $(CONFIG_H) gansidecl.h multilib.h Makefile $(lang_specs_files)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
  $(DRIVER_DEFINES) \
  -c `echo $(srcdir)/gcc.c | sed 's,^\./,,'`

dumpvers: dumpvers.c

version.o: version.c
obstack.o: obstack.c $(CONFIG_H)
choose-temp.o: choose-temp.c $(CONFIG_H) gansidecl.h
pexecute.o: pexecute.c $(CONFIG_H) gansidecl.h
prefix.o: prefix.c $(CONFIG_H) gansidecl.h Makefile
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	-DPREFIX=\"$(prefix)\" \
	  -c `echo $(srcdir)/prefix.c | sed 's,^\./,,'`

convert.o: convert.c $(CONFIG_H) $(TREE_H) flags.h convert.h

tree.o : tree.c $(CONFIG_H) $(TREE_H) flags.h function.h
print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)
stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) flags.h function.h
fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h 
toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) bytecode.h bc-emit.h \
   flags.h input.h insn-attr.h insn-codes.h insn-config.h recog.h xcoffout.h \
   defaults.h output.h \
   $(lang_options_files)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2) \
	  -DTARGET_NAME=\"$(target_alias)\" \
	  -c `echo $(srcdir)/toplev.c | sed 's,^\./,,'`

rtl.o : rtl.c $(CONFIG_H) $(RTL_H)

print-rtl.o : print-rtl.c $(CONFIG_H) $(RTL_H)
rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)

varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h function.h \
   defaults.h insn-codes.h expr.h hard-reg-set.h regs.h xcoffout.h \
   output.h bytecode.h c-pragma.h
function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \
   insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \
   $(RECOG_H) output.h bytecode.h bc-emit.h
stmt.o : stmt.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \
   insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h except.h \
   loop.h $(RECOG_H) bytecode.h bc-typecd.h bc-typecd.def bc-opcode.h \
   bc-optab.h bc-emit.h
except.o : except.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \
   insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \
   $(RECOG_H) output.h except.h
expr.o : expr.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h regs.h \
   insn-flags.h insn-codes.h expr.h insn-config.h $(RECOG_H) output.h \
   typeclass.h bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h \
   bc-emit.h modemap.def hard-reg-set.h
calls.o : calls.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h expr.h insn-codes.h \
   insn-flags.h regs.h
expmed.o : expmed.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \
   insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) real.h
explow.o : explow.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h hard-reg-set.h \
   insn-config.h expr.h $(RECOG_H) insn-flags.h insn-codes.h
optabs.o : optabs.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \
   insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) reload.h
dbxout.o : dbxout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h regs.h \
   insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h
sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h except.h \
   function.h expr.h output.h hard-reg-set.h regs.h defaults.h real.h \
   insn-config.h bytecode.h obstack.h xcoffout.h c-pragma.h
dwarfout.o : dwarfout.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf.h flags.h \
   insn-config.h reload.h output.h defaults.h
dwarf2out.o : dwarf2out.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf2.h flags.h \
   insn-config.h reload.h output.h defaults.h hard-reg-set.h regs.h expr.h
xcoffout.o : xcoffout.c $(CONFIG_H) $(TREE_H) $(RTL_H) xcoffout.h flags.h
emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h except.h \
   function.h regs.h insn-config.h $(RECOG_H) real.h expr.h obstack.h \
   bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h bc-emit.h \
   bc-opname.h hard-reg-set.h
real.o : real.c $(CONFIG_H) $(TREE_H)
getpwd.o : getpwd.c $(CONFIG_H)

integrate.o : integrate.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h integrate.h \
   insn-flags.h insn-config.h insn-codes.h expr.h real.h regs.h function.h \
   bytecode.h output.h $(RECOG_H) except.h

jump.o : jump.c $(CONFIG_H) $(RTL_H) flags.h hard-reg-set.h regs.h \
   insn-config.h insn-flags.h $(RECOG_H) expr.h real.h except.h
stupid.o : stupid.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h

cse.o : cse.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h real.h \
   insn-config.h $(RECOG_H) expr.h
profile.o : profile.c $(CONFIG_H) $(RTL_H) flags.h insn-flags.h gcov-io.h \
   $(TREE_H) output.h regs.h
loop.o : loop.c $(CONFIG_H) $(RTL_H) flags.h loop.h insn-config.h \
   insn-flags.h insn-codes.h regs.h hard-reg-set.h $(RECOG_H) expr.h real.h
unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h integrate.h regs.h \
   $(RECOG_H) flags.h expr.h loop.h
flow.o : flow.c $(CONFIG_H) $(RTL_H) flags.h insn-config.h \
   $(BASIC_BLOCK_H) regs.h hard-reg-set.h output.h
combine.o : combine.c $(CONFIG_H) $(RTL_H) flags.h  \
   insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h \
   $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h
regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h \
   $(BASIC_BLOCK_H) regs.h insn-config.h $(RECOG_H) reload.h real.h bytecode.h
local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) \
   regs.h hard-reg-set.h insn-config.h $(RECOG_H) output.h
bitmap.o : bitmap.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) regs.h
global.o : global.c $(CONFIG_H) $(RTL_H) flags.h  \
   $(BASIC_BLOCK_H) regs.h hard-reg-set.h insn-config.h output.h

reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h output.h expr.h\
   reload.h $(RECOG_H) hard-reg-set.h insn-config.h insn-codes.h regs.h real.h
reload1.o : reload1.c $(CONFIG_H) $(RTL_H) real.h flags.h expr.h \
   reload.h regs.h hard-reg-set.h insn-config.h insn-flags.h insn-codes.h \
   $(BASIC_BLOCK_H) $(RECOG_H) output.h
caller-save.o : caller-save.c $(CONFIG_H) $(RTL_H) flags.h \
   regs.h hard-reg-set.h insn-codes.h insn-config.h $(BASIC_BLOCK_H) $(RECOG_H) \
   reload.h expr.h
reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h \
   $(BASIC_BLOCK_H) regs.h insn-config.h insn-attr.h insn-flags.h $(RECOG_H) \
   flags.h output.h
sched.o : $(SCHED_PREFIX)sched.c $(CONFIG_H) $(RTL_H) $(BASIC_BLOCK_H) regs.h hard-reg-set.h \
   flags.h insn-config.h insn-attr.h
final.o : final.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h regs.h \
   $(RECOG_H) conditions.h insn-config.h insn-attr.h except.h real.h output.h \
   hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h
recog.o : recog.c $(CONFIG_H) $(RTL_H)  \
   regs.h $(RECOG_H) hard-reg-set.h flags.h insn-config.h insn-attr.h \
   insn-flags.h insn-codes.h real.h
reg-stack.o : reg-stack.c $(CONFIG_H) $(RTL_H) $(TREE_H) \
   regs.h hard-reg-set.h flags.h insn-config.h insn-flags.h

$(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) \
   $(RTL_H) regs.h hard-reg-set.h real.h insn-config.h conditions.h \
   insn-flags.h output.h insn-attr.h insn-codes.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(out_file)

# Build auxiliary files that support ecoff format.
mips-tfile: mips-tfile.o version.o $(LIBDEPS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@@ mips-tfile.o version.o $(LIBS)

mips-tfile.o : mips-tfile.c $(CONFIG_H) $(RTL_H)

mips-tdump: mips-tdump.o version.o $(LIBDEPS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@@ mips-tdump.o version.o $(LIBS)

mips-tdump.o : mips-tdump.c $(CONFIG_H) $(RTL_H)

# Build file to support OSF/rose half-pic format.
halfpic.o: halfpic.c $(CONFIG_H) $(RTL_H) $(TREE_H)

# Normally this target is not used; but it is used if you
# define ALLOCA=alloca.o.  In that case, you must get a suitable alloca.c
# from the GNU Emacs distribution.
alloca.o:	alloca.c
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(ALLOCA_FLAGS) \
	  -c `echo $(srcdir)/alloca.c | sed 's,^\./,,'`
	$(ALLOCA_FINISH)
#
# Generate header and source files from the machine description, 
# and compile them.

.PRECIOUS: insn-config.h insn-flags.h insn-codes.h \
  insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c \
  insn-attr.h insn-attrtab.c

# The following pair of rules has this effect:
# genconfig is run only if the md has changed since genconfig was last run;
# but the file insn-config.h is touched only when its contents actually change.

# Each of the other insn-* files is handled by a similar pair of rules.

# This causes an anomaly in the results of make -n
# because insn-* is older than s-*
# and thus make -n thinks that insn-* will be updated
# and force recompilation of things that depend on it.
# We use move-if-change precisely to avoid such recompilation.
# But there is no way to teach make -n that it will be avoided.

# Each of the insn-*.[ch] rules has a semicolon at the end,
# for otherwise the system Make on SunOS 4.1 never tries
# to recompile insn-*.o.  To avoid problems and extra noise from
# versions of make which don't like empty commands (nothing after the
# trailing `;'), we call true for each.

insn-config.h: s-config ; @@true
s-config : $(md_file) genconfig $(srcdir)/move-if-change
	./genconfig $(md_file) > tmp-config.h
	sh $(srcdir)/move-if-change tmp-config.h insn-config.h
	touch s-config

insn-flags.h: s-flags ; @@true
s-flags : $(md_file) genflags $(srcdir)/move-if-change
	./genflags $(md_file) > tmp-flags.h
	sh $(srcdir)/move-if-change tmp-flags.h insn-flags.h
	touch s-flags

insn-codes.h: s-codes ; @@true
s-codes : $(md_file) gencodes $(srcdir)/move-if-change
	./gencodes $(md_file) > tmp-codes.h
	sh $(srcdir)/move-if-change tmp-codes.h insn-codes.h
	touch s-codes

insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) expr.h real.h output.h \
  insn-config.h insn-flags.h insn-codes.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-emit.c

insn-emit.c: s-emit ; @@true
s-emit : $(md_file) genemit $(srcdir)/move-if-change
	./genemit $(md_file) > tmp-emit.c
	sh $(srcdir)/move-if-change tmp-emit.c insn-emit.c
	touch s-emit

insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h $(RECOG_H) \
  real.h output.h flags.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-recog.c

insn-recog.c: s-recog ; @@true
s-recog : $(md_file) genrecog $(srcdir)/move-if-change
	./genrecog $(md_file) > tmp-recog.c
	sh $(srcdir)/move-if-change tmp-recog.c insn-recog.c
	touch s-recog

insn-opinit.o : insn-opinit.c $(CONFIG_H) $(RTL_H) insn-codes.h insn-flags.h \
  insn-config.h flags.h $(RECOG_H) expr.h reload.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-opinit.c

insn-opinit.c: s-opinit ; @@true
s-opinit : $(md_file) genopinit $(srcdir)/move-if-change
	./genopinit $(md_file) > tmp-opinit.c
	sh $(srcdir)/move-if-change tmp-opinit.c insn-opinit.c
	touch s-opinit

insn-extract.o : insn-extract.c $(CONFIG_H) $(RTL_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-extract.c

insn-extract.c: s-extract ; @@true
s-extract : $(md_file) genextract $(srcdir)/move-if-change
	./genextract $(md_file) > tmp-extract.c
	sh $(srcdir)/move-if-change tmp-extract.c insn-extract.c
	touch s-extract

insn-peep.o : insn-peep.c $(CONFIG_H) $(RTL_H) regs.h output.h real.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-peep.c

insn-peep.c: s-peep ; @@true
s-peep : $(md_file) genpeep $(srcdir)/move-if-change
	./genpeep $(md_file) > tmp-peep.c
	sh $(srcdir)/move-if-change tmp-peep.c insn-peep.c
	touch s-peep

insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(RTL_H) regs.h real.h output.h \
     insn-attr.h insn-config.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-attrtab.c

insn-attr.h: s-attr ; @@true
s-attr : $(md_file) genattr $(srcdir)/move-if-change
	./genattr $(md_file) > tmp-attr.h
	sh $(srcdir)/move-if-change tmp-attr.h insn-attr.h
	touch s-attr

insn-attrtab.c: s-attrtab ; @@true
s-attrtab : $(md_file) genattrtab $(srcdir)/move-if-change
	if cmp -s $(PREMADE_ATTRTAB_MD) $(md_file);	\
	then					\
	  echo Using $(PREMADE_ATTRTAB);	\
	  cp $(PREMADE_ATTRTAB) tmp-attrtab.c;	\
	else					\
	  ./genattrtab $(md_file) > tmp-attrtab.c;	\
	fi
	sh $(srcdir)/move-if-change tmp-attrtab.c insn-attrtab.c
	touch s-attrtab

insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) regs.h real.h conditions.h \
    hard-reg-set.h insn-config.h insn-flags.h insn-attr.h output.h $(RECOG_H) \
    insn-codes.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-output.c

insn-output.c: s-output ; @@true
s-output : $(md_file) genoutput $(srcdir)/move-if-change
	./genoutput $(md_file) > tmp-output.c
	sh $(srcdir)/move-if-change tmp-output.c insn-output.c
	touch s-output
#
# Compile the programs that generate insn-* from the machine description.
# They are compiled with $(HOST_CC), and associated libraries,
# since they need to run on this machine
# even if GCC is being compiled to run on some other machine.

# $(CONFIG_H) is omitted from the deps of the gen*.o
# because these programs don't really depend on anything 
# about the target machine.  They do depend on config.h itself,
# since that describes the host machine.

# Pass the md file through cpp if the target requests it.
$(MD_FILE): $(MD_DEPS)
	rm -f $@@
	$(MD_CPP) $(MD_CPPFLAGS) $(md_file) | sed 's/^# /; /g' > tmp-$@@
	mv tmp-$@@ $@@

genconfig : genconfig.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	  genconfig.o $(HOST_RTL) $(HOST_LIBS)

genconfig.o : genconfig.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genconfig.c

genflags : genflags.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genflags.o $(HOST_RTL) $(HOST_LIBS)

genflags.o : genflags.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genflags.c

gencodes : gencodes.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 gencodes.o $(HOST_RTL) $(HOST_LIBS)

gencodes.o : gencodes.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencodes.c

genemit : genemit.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genemit.o $(HOST_RTL) $(HOST_LIBS)

genemit.o : genemit.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genemit.c

genopinit : genopinit.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genopinit.o $(HOST_RTL) $(HOST_LIBS)

genopinit.o : genopinit.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genopinit.c

genrecog : genrecog.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genrecog.o $(HOST_RTL) $(HOST_LIBS)

genrecog.o : genrecog.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c

genextract : genextract.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genextract.o $(HOST_RTL) $(HOST_LIBS)

genextract.o : genextract.c $(RTL_H) $(build_xm_file) insn-config.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genextract.c

genpeep : genpeep.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genpeep.o $(HOST_RTL) $(HOST_LIBS)

genpeep.o : genpeep.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genpeep.c

genattr : genattr.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genattr.o $(HOST_RTL) $(HOST_LIBS)

genattr.o : genattr.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattr.c

genattrtab : genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBS)

genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) insn-config.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattrtab.c

genoutput : genoutput.o $(HOST_RTL) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 genoutput.o $(HOST_RTL) $(HOST_LIBS)

genoutput.o : genoutput.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genoutput.c
#
# Compile the libraries to be used by gen*.
# If we are not cross-building, gen* use the same .o's that cc1 will use,
# and HOST_PREFIX_1 is `foobar', just to ensure these rules don't conflict
# with the rules for rtl.o, alloca.o, etc.
$(HOST_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(CONFIG_H) $(RTL_H)
	rm -f $(HOST_PREFIX)rtl.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c

$(HOST_PREFIX_1)print-rtl.o: $(srcdir)/print-rtl.c $(CONFIG_H) $(RTL_H)
	rm -f $(HOST_PREFIX)print-rtl.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/print-rtl.c > $(HOST_PREFIX)print-rtl.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)print-rtl.c

$(HOST_PREFIX_1)rtlanal.o: $(srcdir)/rtlanal.c $(CONFIG_H) $(RTL_H)
	rm -f $(HOST_PREFIX)rtlanal.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtlanal.c > $(HOST_PREFIX)rtlanal.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtlanal.c

$(HOST_PREFIX_1)alloca.o: alloca.c
	rm -f $(HOST_PREFIX)alloca.c
	cp $(srcdir)/alloca.c $(HOST_PREFIX)alloca.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)alloca.c

$(HOST_PREFIX_1)obstack.o: obstack.c
	rm -f $(HOST_PREFIX)obstack.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/obstack.c > $(HOST_PREFIX)obstack.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)obstack.c

$(HOST_PREFIX_1)malloc.o: malloc.c
	rm -f $(HOST_PREFIX)malloc.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/malloc.c > $(HOST_PREFIX)malloc.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)malloc.c

# This satisfies the dependency that we get if you cross-compile a compiler
# that does not need to compile alloca, malloc or whatever.
$(HOST_PREFIX_1): 
	touch $(HOST_PREFIX_1)
#
# Remake bytecode files.
BI_OBJ=bi-parser.o bi-lexer.o bi-reverse.o

bc-emit.o : bc-emit.c $(CONFIG_H) $(RTL_H) real.h $(BYTECODE_H) \
   bc-arity.h bc-opcode.h bc-typecd.h bc-typecd.def bi-run.h bytetypes.h
bc-optab.o : bc-optab.c $(CONFIG_H) $(REAL_H) $(BYTECODE_H) \
   bc-opcode.h bc-typecd.h bc-typecd.def

bi-arity: bi-arity.o $(BI_OBJ) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 bi-arity.o $(BI_OBJ) $(HOST_LIBS)
bi-opcode: bi-opcode.o $(BI_OBJ) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 bi-opcode.o $(BI_OBJ) $(HOST_LIBS)
bi-opname: bi-opname.o $(BI_OBJ) $(HOST_LIBDEPS)
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	 bi-opname.o $(BI_OBJ) $(HOST_LIBS)

bi-parser.h: bi-parser.c
bi-parser.c: $(srcdir)/bi-parser.y
	$(BISON) $(BISONFLAGS) -d -o bi-parser.c $(srcdir)/bi-parser.y

bi-parser.o: bi-parser.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \
	   bi-parser.c
bi-lexer.o: bi-lexer.c bi-parser.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \
	   $(srcdir)/bi-lexer.c
bi-arity.o: bi-arity.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \
	   $(srcdir)/bi-arity.c
bi-opcode.o: bi-opcode.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \
	   $(srcdir)/bi-opcode.c
bi-opname.o: bi-opname.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \
	   $(srcdir)/bi-opname.c
bi-reverse.o: bi-reverse.c bi-defs.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \
	   $(srcdir)/bi-reverse.c

bc-arity.h: s-bcarity ; @@true
s-bcarity : $(srcdir)/bytecode.def bi-arity $(srcdir)/move-if-change
	./bi-arity < $(srcdir)/bytecode.def >tmp-bc-arity.h
	sh $(srcdir)/move-if-change tmp-bc-arity.h bc-arity.h
	touch s-bcarity

bc-opcode.h: s-bcopcode ; @@true
s-bcopcode : $(srcdir)/bytecode.def bi-opcode $(srcdir)/move-if-change
	./bi-opcode < $(srcdir)/bytecode.def >tmp-bcopcd.h
	sh $(srcdir)/move-if-change tmp-bcopcd.h bc-opcode.h
	touch s-bcopcode

bc-opname.h: s-bcopname ; @@true
s-bcopname : $(srcdir)/bytecode.def bi-opname $(srcdir)/move-if-change
	./bi-opname < $(srcdir)/bytecode.def >tmp-bcopnm.h
	sh $(srcdir)/move-if-change tmp-bcopnm.h bc-opname.h
	touch s-bcopname

bytecode.mostlyclean:
	-rm -f bc-arity.h bc-opcode.h bc-opname.h

bytecode.distclean bytecode.clean:	bytecode.mostlyclean
	-rm -f bi-arity bi-opcode bi-opname bi-lexer

bytecode.maintainer-clean: bytecode.clean
	-rm -f bi-parser.c bi-parser.h

#
# Remake cpp and protoize.

# Making the preprocessor
cpp: $(CCCP)
	-rm -f cpp$(exeext)
	ln $(CCCP)$(exeext) cpp$(exeext) > /dev/null 2>&1 \
	 || cp $(CCCP)$(exeext) cpp$(exeext)
cccp: cccp.o cexp.o version.o prefix.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ cccp.o cexp.o prefix.o \
	  version.o $(LIBS)
cexp.o: cexp.c $(CONFIG_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c cexp.c
cexp.c: $(srcdir)/cexp.y
	$(BISON) -o cexp.c $(srcdir)/cexp.y

cccp.o: cccp.c $(CONFIG_H) pcp.h version.c config.status
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	  -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\" \
	  -DOLD_GPLUSPLUS_INCLUDE_DIR=\"$(old_gxx_include_dir)\" \
	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\" \
	  -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\" \
	  -c `echo $(srcdir)/cccp.c | sed 's,^\./,,'`

cppmain: cppmain.o cpplib.o cpphash.o cppalloc.o cpperror.o cppexp.o \
  prefix.o version.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ cppmain.o cpplib.o cpphash.o \
	  cppalloc.o cpperror.o cppexp.o prefix.o version.o $(LIBS)

cppmain.o: cppmain.c $(CONFIG_H) cpplib.h

cpplib.o: cpplib.c $(CONFIG_H) cpplib.h cpphash.h config.status
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	  -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\" \
	  -DOLD_GPLUSPLUS_INCLUDE_DIR=\"$(old_gxx_include_dir)\" \
	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\" \
	  -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\" \
	  -c `echo $(srcdir)/cpplib.c | sed 's,^\./,,'`

cpperror.o: cpperror.c $(CONFIG_H) cpplib.h

cppexp.o: cppexp.c $(CONFIG_H) cpplib.h

cpphash.o: cpphash.c cpplib.h cpphash.h

cppalloc.o: cppalloc.c $(CONFIG_H)

# Note for the stamp targets, we run the program `true' instead of
# having an empty command (nothing following the semicolon).

proto: config.status protoize unprotoize SYSCALLS.c.X

protoize: protoize.o getopt.o getopt1.o getpwd.o version.o \
    pexecute.o choose-temp.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ \
	  protoize.o getopt.o getopt1.o getpwd.o version.o \
	  pexecute.o choose-temp.o $(LIBS)
protoize.o: s-proto ; @@true

unprotoize: unprotoize.o getopt.o getopt1.o getpwd.o version.o \
    pexecute.o choose-temp.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ \
	  unprotoize.o getopt.o getopt1.o getpwd.o version.o \
	  pexecute.o choose-temp.o $(LIBS)
unprotoize.o:	s-proto ; @@true

s-proto: protoize.c getopt.h $(CONFIG_H)
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
          -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\" \
          -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\" \
	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\" \
	  -DSTD_PROTO_DIR=\"$(libsubdir)\" \
	  -DUNPROTOIZE $(srcdir)/protoize.c
	mv protoize$(objext) unprotoize$(objext)
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
          -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\" \
          -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\" \
	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\" \
	  -DSTD_PROTO_DIR=\"$(libsubdir)\" \
	  $(srcdir)/protoize.c
	touch s-proto

getopt.o: getopt.c getopt.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt.c
getopt1.o: getopt1.c getopt.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt1.c

# This info describes the target machine, so compile with GCC just built.
SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES) \
   stmp-int-hdrs
	-rm -f SYSCALLS.c tmp-SYSCALLS.s
	cat $(srcdir)/sys-types.h $(srcdir)/sys-protos.h > SYSCALLS.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	  -aux-info $@@ -S -o tmp-SYSCALLS.s SYSCALLS.c
	-rm -f SYSCALLS.c tmp-SYSCALLS.s


test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)
	-rm -f tmp-proto.[cso]
	cp $(srcdir)/protoize.c tmp-proto.c
	chmod u+w tmp-proto.c
	./protoize -N -B ./ -x getopt.h -c "-B./ -Wall -Wwrite-strings \
	  $(CFLAGS) $(INCLUDES) \
	  -DGCC_INCLUDE_DIR=0 \
	  -DGPLUSPLUS_INCLUDE_DIR=0 \
	  -DCROSS_INCLUDE_DIR=0 \
	  -DTOOL_INCLUDE_DIR=0 \
	  -DSTD_PROTO_DIR=0" tmp-proto.c
	@@echo '**********' Expect 400 lines of differences.
	-diff $(srcdir)/protoize.c tmp-proto.c > tmp-proto.diff
	-wc -l tmp-proto.diff
	./unprotoize -N -x getopt.h -c "-B./ -Wall -Wwrite-strings \
	  $(CFLAGS) $(INCLUDES) \
	  -DGCC_INCLUDE_DIR=0 \
	  -DGPLUSPLUS_INCLUDE_DIR=0 \
	  -DCROSS_INCLUDE_DIR=0 \
	  -DTOOL_INCLUDE_DIR=0 \
	  -DSTD_PROTO_DIR=0" tmp-proto.c
	@@echo Expect zero differences.
	diff $(srcdir)/protoize.c tmp-proto.c | cat
	-rm -f tmp-proto.[cs] tmp-proto$(objext)

gcov.o: gcov.c gcov-io.h

gcov: gcov.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) gcov.o $(LIBS) -o $@@
#
# Build the include directory.  The stamp files are stmp-* rather than
# s-* so that mostlyclean does not force the include directory to
# be rebuilt.

# Build the include directory except for float.h (which depends upon
# enquire).
stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h
# Copy in the headers provided with gcc.
# The sed command gets just the last file name component;
# this is necessary because VPATH could add a dirname.
# Using basename would be simpler, but some systems don't have it.
# The touch command is here to workaround an AIX/Linux NFS bug.
	for file in .. $(USER_H); do \
	  if [ X$$file != X.. ]; then \
	    realfile=`echo $$file | sed -e 's|.*/\([^/]*\)$$|\1|'`; \
	    touch include/$$realfile; \
	    rm -f include/$$realfile; \
	    cp $$file include; \
	    chmod a+r include/$$realfile; \
	  fi; \
	done
	rm -f include/limits.h
	cp xlimits.h include/limits.h
	chmod a+r include/limits.h
# Install the README
	rm -f include/README
	cp $(srcdir)/README-fixinc include/README
	chmod a+r include/README
	touch stmp-int-hdrs

# Build the complete include directory, including float.h.
stmp-headers: stmp-int-hdrs gfloat.h
	rm -f include/float.h
	if [ -s gfloat.h ]; then \
	  cp gfloat.h include/float.h && \
	  chmod a+r include/float.h; \
	else :; fi
	touch stmp-headers

# Build fixed copies of system files.
stmp-fixinc: $(FIXINCLUDES) gsyslimits.h
	rm -rf include
	mkdir include
	if [ x$(FIXINCLUDES) != xMakefile.in ]; \
	then \
	  for dir in $(SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS); do \
	    if [ -d $$dir ]; \
	    then \
	      $(SHELL) $(srcdir)/$(FIXINCLUDES) include $$dir; \
	    else true; fi; \
	  done; \
	else true; \
	fi
	rm -f include/syslimits.h
	if [ -f include/limits.h ]; then \
	  mv include/limits.h include/syslimits.h; \
	else \
	  cp $(srcdir)/gsyslimits.h include/syslimits.h; \
	fi
	chmod a+r include/syslimits.h
	touch stmp-fixinc

# Files related to the fixproto script.

deduced.h: $(GCC_PASSES) $(srcdir)/scan-types.sh stmp-int-hdrs
	CC="$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -I. -I$(srcdir) -Iinclude -I${SYSTEM_HEADER_DIR}"; \
	  export CC; \
	  $(SHELL) $(srcdir)/scan-types.sh "$(srcdir)" >tmp-deduced.h
	mv tmp-deduced.h deduced.h

gen-protos: gen-protos.o scan.o cppalloc.o $(HOST_LIBDEPS)
	${HOST_CC} $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ \
	  gen-protos.o scan.o cppalloc.o $(HOST_LIBS)

gen-protos.o: gen-protos.c scan.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gen-protos.c

scan.o: scan.c scan.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/scan.c

xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h gen-protos Makefile
	cat deduced.h $(srcdir)/sys-protos.h > tmp-fixtmp.c
	mv tmp-fixtmp.c fixtmp.c
	$(GCC_FOR_TARGET) fixtmp.c -w -U__SIZE_TYPE__ -U__PTRDIFF_TYPE__ -U__WCHAR_TYPE__ -E \
	  | sed -e 's/	/ /g' -e 's/ *(/ (/g' -e 's/ [ ]*/ /g' -e 's/( )/()/' \
	  | ./gen-protos >xsys-protos.hT
	mv xsys-protos.hT xsys-protos.h
	rm -rf fixtmp.c

fix-header: fix-header.o scan-decls.o scan.o xsys-protos.h $(HOST_LIBDEPS) \
   cpplib.o cpphash.o cppalloc.o cppexp.o cpperror.o prefix.o version.o
	$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@@ fix-header.o \
	   scan-decls.o scan.o cpplib.o cpphash.o cppalloc.o prefix.o \
	   version.o cppexp.o $(HOST_LIBS)

fix-header.o: fix-header.c obstack.h scan.h xsys-protos.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/fix-header.c

scan-decls.o: scan-decls.c scan.h cpplib.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/scan-decls.c

# stmp-fixproto depends on this, not on fix-header directly.
# The idea is to make sure fix-header gets built,
# but not rerun fixproto after each stage
# just because fix-header's mtime has changed.
fixhdr.ready: fix-header
	-if [ -f fixhdr.ready ] ; then \
		true; \
	else \
		touch fixhdr.ready; \
	fi

# stmp-headers is to make sure fixincludes has already finished.
# The if statement is so that we don't run fixproto a second time
# if it has already been run on the files in `include'.
stmp-fixproto: fixhdr.ready fixproto stmp-headers
	@@echo "Various warnings and error messages from fixproto are normal"
	-if [ -d include ] ; then true; else mkdir include; fi
	-if [ -f include/fixed ] ; then true; \
	else \
	  : This line works around a 'make' bug in BSDI 1.1.; \
	  FIXPROTO_DEFINES="$(FIXPROTO_DEFINES)"; export FIXPROTO_DEFINES; \
	  $(SHELL) ${srcdir}/fixproto include include $(SYSTEM_HEADER_DIR); \
	  touch include/fixed; \
	fi
	touch stmp-fixproto
#
# Remake the info files.

doc: info
info: $(build_infodir)/cpp.info $(build_infodir)/gcc.info lang.info

$(build_infodir)/cpp.info: cpp.texi
	$(MAKEINFO) $(MAKEINFOFLAGS) $(srcdir)/cpp.texi \
		-o $(build_infodir)/cpp.info

$(build_infodir)/gcc.info: gcc.texi extend.texi install.texi invoke.texi \
		md.texi rtl.texi tm.texi gcov.texi
	$(MAKEINFO) $(MAKEINFOFLAGS) -I$(srcdir) $(srcdir)/gcc.texi \
		-o $(build_infodir)/gcc.info

dvi: gcc.dvi cpp.dvi lang.dvi

# XXX OpenBSD
# This works with GNU Make's default rule.
#$(srcdir)/gcc.dvi: gcc.texi extend.texi install.texi invoke.texi \
#		md.texi rtl.texi tm.texi gcov.texi
#	$(TEXI2DVI) $<

# XXX OpenBSD
# This works with GNU Make's default rule.
#$(srcdir)/cpp.dvi: cpp.texi
#	$(TEXI2DVI) $<

# XXX OpenBSD
#$(srcdir)/INSTALL: install1.texi install.texi
#	cd $(srcdir); $(MAKEINFO) -D INSTALLONLY --no-header \
#		--no-split install1.texi -o INSTALL

#
# Deletion of files made during compilation.
# There are four levels of this:
#   `mostlyclean', `clean', `distclean' and `maintainer-clean'.
# `mostlyclean' is useful while working on a particular type of machine.
# It deletes most, but not all, of the files made by compilation.
# It does not delete libgcc.a or its parts, so it won't have to be recompiled.
# `clean' deletes everything made by running `make all'.
# `distclean' also deletes the files made by config.
# `maintainer-clean' also deletes everything that could be regenerated
# automatically, except for `configure'.
# We remove as much from the language subdirectories as we can
# (less duplicated code).


mostlyclean: bytecode.mostlyclean lang.mostlyclean
	-rm -f $(STAGESTUFF)
# Delete the temporary source copies for cross compilation.
	-rm -f $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)rtlanal.c
	-rm -f $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c
	-rm -f $(HOST_PREFIX_1)obstack.c 
# Delete the temp files made in the course of building libgcc.a.
	-rm -f tmplibgcc* tmpcopy xlimits.h libgcc1-test
	for name in $(LIB1FUNCS); do rm -f $${name}.c; done
# Delete other built files.
	-rm -f t-float.h-cross xsys-protos.hT fp-bit.c dp-bit.c
# Delete the stamp and temporary files.
	-rm -f s-* tmp-* stamp-* stmp-*
	-rm -f */stamp-* */tmp-*
# Delete debugging dump files.
	-rm -f *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop
	-rm -f *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack *.addressof
	-rm -f */*.greg */*.lreg */*.combine */*.flow */*.cse */*.jump */*.rtl
	-rm -f */*.tree */*.loop */*.dbr */*.jump2 */*.sched */*.cse2
	-rm -f */*.sched2 */*.stack
# Delete some files made during installation.
	-rm -f specs gfloat.h float.h-* enquire SYSCALLS.c.X SYSCALLS.c
	-rm -f collect collect2 mips-tfile mips-tdump alloca.s
# Delete files generated for fixproto
	-rm -rf fix-header xsys-protos.h deduced.h tmp-deduced.h \
	  gen-protos fixproto.list fixtmp.* fixhdr.ready
# Delete unwanted output files from TeX.
	-rm -f *.toc *.log *.vr *.fn *.cp *.tp *.ky *.pg
	-rm -f */*.toc */*.log */*.vr */*.fn */*.cp */*.tp */*.ky */*.pg
# Delete sorted indices we don't actually use.
	-rm -f gcc.vrs gcc.kys gcc.tps gcc.pgs gcc.fns
# Delete core dumps.
	-rm -f core */core
	-rm -f *.bp */*.bp

# Delete all files made by compilation
# that don't exist in the distribution.
clean: mostlyclean bytecode.clean lang.clean
# It may not be quite desirable to delete unprotoize.c here,
# but the spec for `make clean' requires it.
# Using unprotoize.c is not quite right in the first place, 
# but what better way is there?
	-rm -f libgcc.a libgcc1.a libgcc1-asm.a libgcc2.a libgcc2.ready
	-rm -f libgcc1.null
	-rm -f *.dvi
	-rm -f */*.dvi
	-if [ -f md.pre-cpp ]; then \
	  rm -f md ; \
	fi
# Delete the include directory.
	-rm -rf include
# Delete files used by the "multilib" facility (including libgcc subdirs).
	-rm -f multilib.h tmpmultilib*
	-if [ "x$(MULTILIB_DIRNAMES)" != x ] ; then \
	  rm -rf $(MULTILIB_DIRNAMES); \
	else if [ "x$(MULTILIB_OPTIONS)" != x ] ; then \
	  rm -rf `echo $(MULTILIB_OPTIONS) | sed -e 's/\// /g'`; \
	fi ; fi

# Delete all files that users would normally create
# while building and installing GCC.
distclean: clean bytecode.distclean lang.distclean
	-rm -f tm.h config.h auto-config.h tconfig.h hconfig.h md cstamp-h
	-rm -f config.status config.run config.cache config.bak
	-rm -f Make-lang Make-hooks Make-host Make-target
	-rm -f Makefile specs.h options.h *.oaux
	-rm -fr stage1 stage2 stage3 stage4
	-rm -f */stage1 */stage2 */stage3 */stage4 */include
	-rm -f c-parse.output
	-rm -f *.asm
	-rm -f float.h

# Delete anything likely to be found in the source directory
# that shouldn't be in the distribution.
extraclean: distclean lang.extraclean
	-rm -rf =* ./"#"* *~* config/=* config/"#"* config/*~*
	-rm -f patch* *.orig *.rej config/patch* config/*.orig config/*.rej
	-rm -f config/*/=* config/*/"#"* config/*/*~*
	-rm -f config/*/*.orig config/*/*.rej
	-rm -f *.dvi *.ps *.oaux *.d *.[zZ] *.gz
	-rm -f *.tar *.xtar *diff *.diff.* *.tar.* *.xtar.* *diffs
	-rm -f *lose config/*lose config/*/*lose
	-rm -f *.s *.s[0-9] *.i install1.texi config/ChangeLog
	-rm -f */=* */"#"* */*~*
	-rm -f */patch* */*.orig */*.rej
	-rm -f */*.dvi */*.oaux */*.d */*.[zZ] */*.gz
	-rm -f */*.tar */*.xtar */*diff */*.diff.* */*.tar.* */*.xtar.* */*diffs
	-rm -f */*lose */*.s */*.s[0-9] */*.i

# Get rid of every file that's generated from some other file, except for `configure'.
# Most of these files ARE PRESENT in the GCC distribution.
maintainer-clean:
	@@echo 'This command is intended for maintainers to use; it'
	@@echo 'deletes files that may need special tools to rebuild.'
	$(MAKE) distclean bytecode.maintainer-clean lang.maintainer-clean
	-rm -f c-parse.y c-gperf.h
	-rm -f c-parse.c c-parse.h c-parse.output
	-rm -f cexp.c cexp.output TAGS 
	-rm -f cpp.info* cpp.??s cpp.*aux
	-rm -f gcc.info* gcc.??s gcc.*aux
#
# Entry points `install' and `uninstall'.
# Also use `install-collect2' to install collect2 when the config files don't.

# The semicolon is to prevent the install.sh -> install default rule
# from doing anything.  Having it run true helps avoid problems and
# noise from versions of make which don't like to have null commands.
install: $(INSTALL_TARGET) ; @@true

# Copy the compiler files into directories where they will be run.
# Install the driver last so that the window when things are
# broken is small.
install-normal: install-common $(INSTALL_HEADERS) $(INSTALL_LIBGCC) \
    $(INSTALL_MAN) install-info lang.install-normal $(INSTALL_DRIVER)

# Do nothing while making gcc with a cross-compiler. The person who
# makes gcc for the target machine has to know how to put a complete
# gcc together by hand.
install-build: force
	@@echo You have to install gcc on your target machine by hand.

# Run this on the target machine
# to finish installation of cross compiler.
install-cross-rest: install-float-h-cross

# Install float.h for cross compiler.
# Run this on the target machine!
install-float-h-cross: installdirs
#	if [ -f enquire ] ; then true; else false; fi
# Note: don't use -.  We should fail right away if enquire was not made.
	./enquire -f > $(tmpdir)/float.h
	-rm -f $(libsubdir)/include/float.h
	$(INSTALL_DATA) $(tmpdir)/float.h $(libsubdir)/include/float.h
	-rm -f $(tmpdir)/float.h
	chmod a-x $(libsubdir)/include/float.h

# Create the installation directories.
installdirs:
	-if [ -d $(prefix) ] ; then true ; else mkdir $(prefix) ; chmod a+rx $(prefix) ; fi
	-if [ -d $(exec_prefix) ] ; then true ; else mkdir $(exec_prefix) ; chmod a+rx $(exec_prefix) ; fi
	-if [ -d $(libdir) ] ; then true ; else mkdir $(libdir) ; chmod a+rx $(libdir) ; fi
	-if [ -d $(libdir)/gcc-lib ] ; then true ; else mkdir $(libdir)/gcc-lib ; chmod a+rx $(libdir)/gcc-lib ; fi
# This dir isn't currently searched by cpp.
#	-if [ -d $(libdir)/gcc-lib/include ] ; then true ; else mkdir $(libdir)/gcc-lib/include ; chmod a+rx $(libdir)/gcc-lib/include ; fi
	-if [ -d $(libdir)/gcc-lib/$(target_alias) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target_alias) ; chmod a+rx $(libdir)/gcc-lib/$(target_alias) ; fi
	-if [ -d $(libdir)/gcc-lib/$(target_alias)/$(version) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target_alias)/$(version) ; chmod a+rx $(libdir)/gcc-lib/$(target_alias)/$(version) ; fi
	-if [ -d $(libdir)/gcc-lib/$(target_alias)/$(version)/include ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target_alias)/$(version)/include ; chmod a+rx $(libdir)/gcc-lib/$(target_alias)/$(version)/include ; fi
	-if [ -d $(bindir) ] ; then true ; else mkdir $(bindir) ; chmod a+rx $(bindir) ; fi
	-if [ -d $(includedir) ] ; then true ; else mkdir $(includedir) ; chmod a+rx $(includedir) ; fi
	-if [ -d $(tooldir) ] ; then true ; else mkdir $(tooldir) ; chmod a+rx $(tooldir) ; fi
	-if [ -d $(assertdir) ] ; then true ; else mkdir $(assertdir) ; chmod a+rx $(assertdir) ; fi
	-if [ -d $(infodir) ] ; then true ; else mkdir $(infodir) ; chmod a+rx $(infodir) ; fi

install-mandir:
# We don't use mkdir -p to create the parents of mandir,
# because some systems don't support it.
# Instead, we use this technique to create the immediate parent of mandir.
	-parent=`echo $(mandir)|sed -e 's@@/[^/]*$$@@@@'`; \
	if [ -d $$parent ] ; then true ; else mkdir $$parent ; chmod a+rx $$parent ; fi
	-if [ -d $(mandir) ] ; then true ; else mkdir $(mandir) ; chmod a+rx $(mandir) ; fi

# Install the compiler executables built during cross compilation.
install-common: native installdirs $(EXTRA_PARTS) lang.install-common
	for file in $(COMPILERS); do \
	  if [ -f $$file ] ; then \
	    rm -f $(libsubdir)/$$file; \
	    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file; \
	  else true; \
	  fi; \
	done
	for file in $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2) ..; do \
	  if [ x"$$file" != x.. ]; then \
	    rm -f $(libsubdir)/$$file; \
	    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file; \
	  else true; fi; \
	done
	for file in $(EXTRA_PARTS) ..; do \
	  if [ x"$$file" != x.. ]; then \
	    rm -f $(libsubdir)/$$file; \
	    $(INSTALL_DATA) $$file $(libsubdir)/$$file; \
	    chmod a-x $(libsubdir)/$$file; \
	  else true; fi; \
	done
# Don't mess with specs if it doesn't exist yet.
	-if [ -f specs ] ; then \
	  rm -f $(libsubdir)/specs; \
	  $(INSTALL_DATA) specs $(libsubdir)/specs; \
	  chmod a-x $(libsubdir)/specs; \
	fi
# Install protoize if it was compiled.
	-if [ -f protoize$(exeext) ]; \
	then \
	    rm -f $(bindir)/protoize$(exeext); \
	    $(INSTALL_PROGRAM) protoize$(exeext) $(bindir)/protoize$(exeext); \
	    rm -f $(bindir)/unprotoize$(exeext); \
	    $(INSTALL_PROGRAM) unprotoize$(exeext) $(bindir)/unprotoize$(exeext); \
	    rm -f $(libsubdir)/SYSCALLS.c.X; \
	    $(INSTALL_DATA) SYSCALLS.c.X $(libsubdir)/SYSCALLS.c.X; \
	    chmod a-x $(libsubdir)/SYSCALLS.c.X; \
	fi
	-rm -f $(libsubdir)/cpp$(exeext)
	$(INSTALL_PROGRAM) cpp$(exeext) $(libsubdir)/cpp$(exeext)
# Install gcov if it was compiled.
	-if [ -f gcov$(exeext) ]; \
	then \
	    rm -f $(bindir)/gcov$(exeext); \
	    $(INSTALL_PROGRAM) gcov$(exeext) $(bindir)/gcov$(exeext); \
	    chmod a+x $(bindir)/gcov$(exeext); \
	fi

# Install the driver program as $(target_alias)-gcc
# and also as either gcc (if native) or $(tooldir)/bin/gcc.
install-driver: xgcc
	-if [ -f gcc-cross$(exeext) ] ; then \
	  rm -f $(bindir)/$(GCC_CROSS_NAME)$(exeext); \
	  $(INSTALL_PROGRAM) gcc-cross$(exeext) $(bindir)/$(GCC_CROSS_NAME)$(exeext); \
	  if [ -d $(tooldir)/bin/. ] ; then \
	    rm -f $(tooldir)/bin/gcc$(exeext); \
	    $(INSTALL_PROGRAM) gcc-cross$(exeext) $(tooldir)/bin/gcc$(exeext); \
	  else true; fi; \
	else \
	  rm -f $(bindir)/$(GCC_INSTALL_NAME)$(exeext); \
	  $(INSTALL_PROGRAM) xgcc$(exeext) $(bindir)/$(GCC_INSTALL_NAME)$(exeext); \
	fi

install-driver-with-alias: install-driver
	-if [ ! -f gcc-cross$(exeext) ] ; then \
	  rm -f $(bindir)/$(target_alias)-gcc-1$(exeext); \
	  ln $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target_alias)-gcc-1$(exeext) \
	    > /dev/null 2>&1 \
	    || cp $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target_alias)-gcc-1$(exeext); \
	  mv $(bindir)/$(target_alias)-gcc-1$(exeext) $(bindir)/$(target_alias)-gcc$(exeext); \
	fi

# Install the info files.
# $(INSTALL_DATA) might be a relative pathname, so we can't cd into srcdir
# to do the install.  The sed rule was copied from stmp-int-hdrs.
install-info: doc installdirs lang.install-info
	-rm -f $(infodir)/cpp.info* $(infodir)/gcc.info*
	cd $(build_infodir); for f in cpp.info* gcc.info*; do \
	    $(INSTALL_DATA) $$f $(infodir)/$$f; \
	done
	-chmod a-x $(infodir)/cpp.info* $(infodir)/gcc.info*

# Install the man pages.
install-man: installdirs $(srcdir)/gcc.1 $(srcdir)/cccp.1 lang.install-man
	-if [ -f gcc-cross$(exeext) ] ; then \
	  rm -f $(mandir)/$(GCC_CROSS_NAME)$(manext); \
	  $(INSTALL_DATA) $(srcdir)/gcc.1 $(mandir)/$(GCC_CROSS_NAME)$(manext); \
	  chmod a-x $(mandir)/$(GCC_CROSS_NAME)$(manext); \
	else \
	  rm -f $(mandir)/$(GCC_INSTALL_NAME)$(manext); \
	  $(INSTALL_DATA) $(srcdir)/gcc.1 $(mandir)/$(GCC_INSTALL_NAME)$(manext); \
	  chmod a-x $(mandir)/$(GCC_INSTALL_NAME)$(manext); \
	fi
	-rm -f $(mandir)/cccp$(manext)
	-$(INSTALL_DATA) $(srcdir)/cccp.1 $(mandir)/cccp$(manext)
	-chmod a-x $(mandir)/cccp$(manext)

# Install the library.
install-libgcc: libgcc.a installdirs
	-if [ -f libgcc.a ] ; then \
	  rm -f $(libsubdir)/libgcc.a; \
	  $(INSTALL_DATA) libgcc.a $(libsubdir)/libgcc.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libsubdir); $(RANLIB) libgcc.a); else true; fi; \
	  chmod a-x $(libsubdir)/libgcc.a; \
	else true; fi

# Install multiple versions of libgcc.a.
install-multilib: stmp-multilib installdirs
	for i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \
	  dir=`echo $$i | sed -e 's/;.*$$//'`; \
	  if [ -d $(libsubdir)/$${dir} ]; then true; else mkdir $(libsubdir)/$${dir}; fi; \
	  for f in libgcc.a $(EXTRA_MULTILIB_PARTS); do \
	    rm -f $(libsubdir)/$${dir}/$${f}; \
	    $(INSTALL_DATA) $${dir}/$${f} $(libsubdir)/$${dir}/$${f}; \
	  done; \
	  if $(RANLIB_TEST); then \
	    (cd $(libsubdir)/$${dir}; $(RANLIB) libgcc.a); else true; fi; \
	  chmod a-x $(libsubdir)/$${dir}/libgcc.a; \
	done

# Install all the header files built in the include subdirectory.
install-headers: install-include-dir $(INSTALL_HEADERS_DIR) $(INSTALL_ASSERT_H)
# Fix symlinks to absolute paths in the installed include directory to
# point to the installed directory, not the build directory.
	-files=`cd $(libsubdir)/include; find . -type l -print 2>/dev/null`; \
	if [ $$? -eq 0 ]; then \
	  dir=`cd ./include; pwd`; \
	  for i in $$files; do \
	    dest=`ls -ld $(libsubdir)/include/$$i | sed -n 's/.*-> //p'`; \
	    if expr "$$dest" : "$$dir.*" > /dev/null; then \
	      rm -f $(libsubdir)/include/$$i; \
	      ln -s `echo $$i | sed "s|/[^/]*|/..|g" | sed 's|/..$$||'``echo "$$dest" | sed "s|$$dir||"` $(libsubdir)/include/$$i; \
	    fi; \
	  done; \
	fi

# Create or recreate the gcc private include file directory.
install-include-dir: installdirs
	-rm -rf $(libsubdir)/include
	mkdir $(libsubdir)/include
	-chmod a+rx $(libsubdir)/include

# Install the include directory using tar.
install-headers-tar: stmp-headers $(STMP_FIXPROTO) install-include-dir
	(cd ./include; \
	 tar -cf - .; exit 0) | (cd $(libsubdir)/include; tar $(TAROUTOPTS) - )
# /bin/sh on some systems returns the status of the first tar,
# and that can lose with GNU tar which always writes a full block.
# So use `exit 0' to ignore its exit status.

# Install the include directory using cpio.
install-headers-cpio: stmp-headers $(STMP_FIXPROTO) install-include-dir
	(cd ./include; \
	 find . -print) | (cd ./include; cpio -pdum $(libsubdir)/include)

# Put assert.h where it won't override GNU libc's assert.h.
# It goes in a dir that is searched after GNU libc's headers;
# thus, the following conditionals are no longer needed.
# But it's not worth deleting them now.
## Don't replace the assert.h already there if it is not from GCC.
## This code would be simpler if it tested for -f ... && ! grep ...
## but supposedly the ! operator is missing in sh on some systems.
install-assert-h: assert.h installdirs
	if [ -f $(assertdir)/assert.h ]; \
	then \
	  if grep "__eprintf" $(assertdir)/assert.h >/dev/null; \
	    then \
	    rm -f $(assertdir)/assert.h; \
	    $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h; \
	    chmod a-x $(assertdir)/assert.h; \
	  else true; \
	  fi; \
	else \
	  rm -f $(assertdir)/assert.h; \
	  $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h; \
	  chmod a-x $(assertdir)/assert.h; \
	fi

# Use this target to install the program `collect2' under the name `ld'.
install-collect2: collect2 installdirs
	$(INSTALL_PROGRAM) collect2$(exeext) $(libsubdir)/ld$(exeext)
# Install the driver program as $(libsubdir)/gcc for collect2.
	$(INSTALL_PROGRAM) xgcc$(exeext) $(libsubdir)/gcc$(exeext)

# Cancel installation by deleting the installed files.
uninstall: lang.uninstall
	-rm -rf $(libsubdir)
	-rm -rf $(bindir)/$(GCC_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(GCC_CROSS_NAME)$(exeext)
	-rm -rf $(bindir)/protoize$(exeext)
	-rm -rf $(bindir)/unprotoize$(exeext)
	-rm -rf $(mandir)/$(GCC_INSTALL_NAME)$(manext)
	-rm -rf $(mandir)/$(GCC_CROSS_NAME)$(manext)
	-rm -rf $(mandir)/cccp$(manext)
	-rm -rf $(mandir)/protoize$(manext)
	-rm -rf $(mandir)/unprotoize$(manext)
#
# These exist for maintenance purposes.

# Update the tags table.
TAGS: force
	cd $(srcdir);							\
	mkdir tmp-tags;							\
	mv -f c-parse.[ch] cexp.c =*.[chy] tmp-tags;			\
	etags *.y *.h *.c;						\
	mv tmp-tags/* .;						\
	rmdir tmp-tags

# Create the distribution tar.gz file.
dist: tmp-gcc.xtar
	gzip --best < tmp-gcc.xtar > tmp-gcc.xtar.gz
	mv tmp-gcc.xtar.gz gcc-$(version).tar.gz

tmp-gcc.xtar: distdir
# Make the distribution.
	tar -chf tmp-gcc.xtar gcc-$(version)

distdir-cvs: force
	if [ -d $(srcdir)/CVS ]; then cvs -r update; fi

# This target exists to do the initial work before the language specific
# stuff gets done.
distdir-start: doc $(srcdir)/INSTALL $(srcdir)/c-parse.y $(srcdir)/c-gperf.h \
  $(srcdir)/c-parse.c $(srcdir)/cexp.c $(srcdir)/config.in \
  $(srcdir)/bi-parser.h $(srcdir)/bi-parser.c $(srcdir)/version.c TAGS
	@@if grep -s "for version ${mainversion}" gcc.texi > /dev/null; \
	then true; \
	else echo "You must update the version number in \`gcc.texi'"; sleep 10;\
	fi
# Update the version number in README
	awk '$$1 " " $$2 " " $$3 == "This directory contains" \
		{ $$6 = version; print $$0 } \
	     $$1 " " $$2 " " $$3 != "This directory contains"' \
	  version=$(version) README > tmp.README
	mv tmp.README README
	-rm -rf gcc-$(version) tmp	
# Put all the files in a temporary subdirectory
# which has the name that we want to have in the tar file.
	mkdir tmp
	mkdir tmp/config
	mkdir tmp/ginclude
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file tmp > /dev/null 2>&1 || cp $$file tmp; \
	done
	cd config; \
	for file in *[0-9a-zA-Z+]; do \
	  if test -d $$file && test "$$file" != RCS && test "$$file" != CVS; then \
	    mkdir ../tmp/config/$$file; \
	    cd $$file; \
	    for subfile in *[0-9a-zA-Z+]; do \
	      ln $$subfile ../../tmp/config/$$file >/dev/null 2>&1 \
	      || cp $$subfile ../../tmp/config/$$file; \
	    done; \
	    cd ..; \
	  else \
	    ln $$file ../tmp/config >/dev/null 2>&1 \
	    || cp $$file ../tmp/config; \
	  fi; \
	done
	cd ginclude; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/ginclude >/dev/null 2>&1 \
	   || cp $$file ../tmp/ginclude; \
	done
	ln .gdbinit tmp

# Finish making `distdir', after the languages have done their thing.
distdir-finish:
	mv tmp gcc-$(version)
# Get rid of everything we don't want in the distribution.  We'd want
# this to use Makefile.in, but it doesn't have the `lang.foo' targets
# expanded.
	cd gcc-$(version); make extraclean VERSION_DEP=

distdir: distdir-cvs distdir-start lang.distdir distdir-finish

# make diff oldversion=M.N 
# creates a diff file between an older distribution and this one.
# The -P option assumes this is GNU diff.
diff:
	diff -rc2P -x c-parse.y -x c-parse.c -x c-parse.h -x c-gperf.h \
	  -x cexp.c -x bi-parser.c -x bi-parser.h -x TAGS -x INSTALL \
	  -x configure -x config.in \
	  -x "gcc.??" -x "gcc.??s" -x gcc.aux -x "gcc.info*" \
	  -x "cpp.??" -x "cpp.??s" -x cpp.aux -x "cpp.info*" \
	  $(LANG_DIFF_EXCLUDES) \
	  gcc-$(oldversion) gcc-$(version) > gcc-$(oldversion)-$(version).diff

bootstrap: force
# Only build the C compiler for stage1, because that is the only one that
# we can guarantee will build with the native compiler, and also it is the
# only thing useful for building stage2.
	$(MAKE) CC="$(CC)" libdir=$(libdir) LANGUAGES="$(BOOT_LANGUAGES)"
	$(MAKE) stage1
# This used to define ALLOCA as empty, but that would lead to bad results
# for a subsequent `make install' since that would not have ALLOCA empty.
# To prevent `make install' from compiling alloca.o and then relinking cc1
# because alloca.o is newer, we permit these recursive makes to compile
# alloca.o.  Then cc1 is newer, so it won't have to be relinked.
	$(MAKE) CC="stage1/xgcc -Bstage1/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES="$(LANGUAGES)"
	$(MAKE) stage2
	$(MAKE) CC="stage2/xgcc -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"

bootstrap2: force
	$(MAKE) CC="stage1/xgcc -Bstage1/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES="$(LANGUAGES)"
	$(MAKE) stage2
	$(MAKE) CC="stage2/xgcc -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"

bootstrap3: force
	$(MAKE) CC="stage2/xgcc -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"

# Compare the object files in the current directory with those in the
# stage2 directory.

# ./ avoids bug in some versions of tail.
compare: force
	for file in *$(objext); do \
	  tail +16c ./$$file > tmp-foo1; \
	  tail +16c stage2/$$file > tmp-foo2 2>/dev/null \
	    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true; \
	done
	for dir in tmp-foo $(SUBDIRS); do \
	  if [ "`echo $$dir/*$(objext)`" != "$$dir/*$(objext)" ] ; then \
	    for file in $$dir/*$(objext); do \
	      tail +16c ./$$file > tmp-foo1; \
	      tail +16c stage2/$$file > tmp-foo2 2>/dev/null \
	        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true; \
	    done; \
	  fi; \
	done
	-rm -f tmp-foo*

# Similar, but compare with stage3 directory
compare3: force
	for file in *$(objext); do \
	  tail +16c ./$$file > tmp-foo1; \
	  tail +16c stage3/$$file > tmp-foo2 2>/dev/null \
	    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true; \
	done
	for dir in tmp-foo $(SUBDIRS); do \
	  if [ "`echo $$dir/*$(objext)`" != "$$dir/*$(objext)" ] ; then \
	    for file in $$dir/*$(objext); do \
	      tail +16c ./$$file > tmp-foo1; \
	      tail +16c stage3/$$file > tmp-foo2 2>/dev/null \
	        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true; \
	    done; \
	  fi; \
	done
	-rm -f tmp-foo*

# Compare the object files in the current directory with those in the
# stage2 directory.  Use gnu cmp (diffutils v2.4 or later) to avoid
# running tail and the overhead of twice copying each object file.

gnucompare: force
	for file in *$(objext); do \
	  cmp --ignore-initial=16 $$file stage2/$$file || true ; \
	done
	for dir in tmp-foo $(SUBDIRS); do \
	  if [ "`echo $$dir/*$(objext)`" != "$$dir/*$(objext)" ] ; then \
	    for file in $$dir/*$(objext); do \
	      cmp --ignore-initial=16 $$file stage2/$$file || true ; \
	    done; \
	  fi; \
	done

# Similar, but compare with stage3 directory
gnucompare3: force
	for file in *$(objext); do \
	  cmp --ignore-initial=16 $$file stage3/$$file || true ; \
	done
	for dir in tmp-foo $(SUBDIRS); do \
	  if [ "`echo $$dir/*$(objext)`" != "$$dir/*$(objext)" ] ; then \
	    for file in $$dir/*$(objext); do \
	      cmp --ignore-initial=16 $$file stage3/$$file || true ; \
	    done; \
	  fi; \
	done

# Copy the object files from a particular stage into a subdirectory.
stage1-start:
	-if [ -d stage1 ] ; then true ; else mkdir stage1 ; fi
	-for dir in . $(SUBDIRS) ; \
	 do \
	   if [ -d stage1/$$dir ] ; then true ; else mkdir stage1/$$dir ; fi ; \
	 done
	-mv $(STAGESTUFF) stage1
# Copy as/ld if they exist to stage dir, so that running xgcc from the stage
# dir will work properly.
	-if [ -f as$(exeext) ] ; then $(LN) ../as$(exeext) stage1 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then $(LN) ../ld$(exeext) stage1 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then $(LN) ../collect-ld$(exeext) stage1 ; else true ; fi
	-rm -f stage1/libgcc.a
	-cp libgcc.a stage1
	-if $(RANLIB_TEST) ; then $(RANLIB) stage1/libgcc.a; else true; fi
	-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  cp stage1/$${f} . ; \
	else true; \
	fi; done
stage1: force stage1-start lang.stage1

stage2-start:
	-if [ -d stage2 ] ; then true ; else mkdir stage2 ; fi
	-for dir in . $(SUBDIRS) ; \
	 do \
	   if [ -d stage2/$$dir ] ; then true ; else mkdir stage2/$$dir ; fi ; \
	 done
	-mv $(STAGESTUFF) stage2
# Copy as/ld if they exist to stage dir, so that running xgcc from the stage
# dir will work properly.
	-if [ -f as$(exeext) ] ; then $(LN) ../as$(exeext) stage2 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then $(LN) ../ld$(exeext) stage2 ; else true ; fi
	-if [ -f collect-ld ] ; then $(LN) ../collect-ld$(exeext) stage2 ; else true ; fi
	-rm -f stage2/libgcc.a
	-cp libgcc.a stage2
	-if $(RANLIB_TEST) ; then $(RANLIB) stage2/libgcc.a; else true; fi
	-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  cp stage2/$${f} . ; \
	else true; \
	fi; done
stage2: force stage2-start lang.stage2

stage3-start:
	-if [ -d stage3 ] ; then true ; else mkdir stage3 ; fi
	-for dir in . $(SUBDIRS) ; \
	 do \
	   if [ -d stage3/$$dir ] ; then true ; else mkdir stage3/$$dir ; fi ; \
	 done
	-mv $(STAGESTUFF) stage3
# Copy as/ld if they exist to stage dir, so that running xgcc from the stage
# dir will work properly.
	-if [ -f as$(exeext) ] ; then $(LN) ../as$(exeext) stage3 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then $(LN) ../ld$(exeext) stage3 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then $(LN) ../collect-ld$(exeext) stage3 ; else true ; fi
	-rm -f stage3/libgcc.a
	-cp libgcc.a stage3
	-if $(RANLIB_TEST) ; then $(RANLIB) stage3/libgcc.a; else true; fi
	-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  cp stage3/$${f} . ; \
	else true; \
	fi; done
stage3: force stage3-start lang.stage3

stage4-start:
	-if [ -d stage4 ] ; then true ; else mkdir stage4 ; fi
	-for dir in . $(SUBDIRS) ; \
	 do \
	   if [ -d stage4/$$dir ] ; then true ; else mkdir stage4/$$dir ; fi ; \
	 done
	-mv $(STAGESTUFF) stage4
# Copy as/ld if they exist to stage dir, so that running xgcc from the stage
# dir will work properly.
	-if [ -f as$(exeext) ] ; then $(LN) ../as$(exeext) stage4 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then $(LN) ../ld$(exeext) stage4 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then $(LN) ../collect-ld$(exeext) stage4 ; else true ; fi
	-rm -f stage4/libgcc.a
	-cp libgcc.a stage4
	-if $(RANLIB_TEST) ; then $(RANLIB) stage4/libgcc.a; else true; fi
	-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  cp stage4/$${f} . ; \
	else true; \
	fi; done
stage4: force stage4-start lang.stage4

# Copy just the executable files from a particular stage into a subdirectory,
# and delete the object files.  Use this if you're just verifying a version
# that is pretty sure to work, and you are short of disk space.
risky-stage1: stage1
	-make clean

risky-stage2: stage2
	-make clean

risky-stage3: stage3
	-make clean

risky-stage4: stage4
	-make clean

#In GNU Make, ignore whether `stage*' exists.
.PHONY: stage1 stage2 stage3 stage4 clean maintainer-clean TAGS bootstrap
.PHONY: risky-stage1 risky-stage2 risky-stage3 risky-stage4

force:
@


1.15
log
@use shell to run scripts
@
text
@@


1.14
log
@update to gcc 2.8.1
@
text
@d693 1
a693 1
	$(srcdir)/move-if-change tmp-version.c $(srcdir)/version.c
d1078 1
a1078 1
	$(srcdir)/move-if-change tmp-mlib.h multilib.h
d1214 1
a1214 1
#	 sh $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h
@


1.13
log
@Do not install a ${arch}-unknown-openbsd2.x link
@
text
@d2 1
a2 1
#   Copyright (C) 1987, 88, 90-96, 1997 Free Software Foundation, Inc.
d231 2
d363 4
d603 3
a605 3
 stamp-flags stamp-config stamp-codes stamp-mlib \
 stamp-output stamp-recog stamp-emit stamp-extract stamp-peep \
 stamp-attr stamp-attrtab stamp-opinit stamp-proto stamp-crt stamp-crtS stamp-crt0 \
d610 1
a610 1
 stamp-bcarity stamp-bcopcode stamp-bcopname \
d685 10
d1070 2
a1071 2
multilib.h: stamp-mlib; @@true
stamp-mlib: $(srcdir)/genmultilib Makefile
d1079 1
a1079 1
	touch stamp-mlib
d1166 1
a1166 1
crtbeginS.o crtendS.o: stamp-crtS ; @@true
d1168 1
a1168 1
stamp-crtS: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \
d1177 1
a1177 1
	touch stamp-crtS
d1180 2
a1181 2
crt0.o: stamp-crt0 ; @@true
mcrt0.o: stamp-crt0; @@true
d1183 1
a1183 1
stamp-crt0:	$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)
d1188 1
a1188 1
	touch stamp-crt0
d1247 1
a1247 1
underscore.c: stamp-under ; @@true
d1249 1
a1249 1
stamp-under: $(GCC_PASSES)
d1260 1
a1260 1
	touch stamp-under
d1297 2
a1298 1
   flags.h input.h insn-attr.h xcoffout.h defaults.h output.h \
d1347 1
a1347 1
   bc-opname.h
d1443 1
a1443 1
# because insn-* is older than stamp-*
d1455 2
a1456 2
insn-config.h: stamp-config ; @@true
stamp-config : $(md_file) genconfig $(srcdir)/move-if-change
d1459 1
a1459 1
	touch stamp-config
d1461 2
a1462 2
insn-flags.h: stamp-flags ; @@true
stamp-flags : $(md_file) genflags $(srcdir)/move-if-change
d1465 1
a1465 1
	touch stamp-flags
d1467 2
a1468 2
insn-codes.h: stamp-codes ; @@true
stamp-codes : $(md_file) gencodes $(srcdir)/move-if-change
d1471 1
a1471 1
	touch stamp-codes
d1477 2
a1478 2
insn-emit.c: stamp-emit ; @@true
stamp-emit : $(md_file) genemit $(srcdir)/move-if-change
d1481 1
a1481 1
	touch stamp-emit
d1487 2
a1488 2
insn-recog.c: stamp-recog ; @@true
stamp-recog : $(md_file) genrecog $(srcdir)/move-if-change
d1491 1
a1491 1
	touch stamp-recog
d1497 2
a1498 2
insn-opinit.c: stamp-opinit ; @@true
stamp-opinit : $(md_file) genopinit $(srcdir)/move-if-change
d1501 1
a1501 1
	touch stamp-opinit
d1506 2
a1507 2
insn-extract.c: stamp-extract ; @@true
stamp-extract : $(md_file) genextract $(srcdir)/move-if-change
d1510 1
a1510 1
	touch stamp-extract
d1515 2
a1516 2
insn-peep.c: stamp-peep ; @@true
stamp-peep : $(md_file) genpeep $(srcdir)/move-if-change
d1519 1
a1519 1
	touch stamp-peep
d1525 2
a1526 2
insn-attr.h: stamp-attr ; @@true
stamp-attr : $(md_file) genattr $(srcdir)/move-if-change
d1529 1
a1529 1
	touch stamp-attr
d1531 2
a1532 2
insn-attrtab.c: stamp-attrtab ; @@true
stamp-attrtab : $(md_file) genattrtab $(srcdir)/move-if-change
d1541 1
a1541 1
	touch stamp-attrtab
d1548 2
a1549 2
insn-output.c: stamp-output ; @@true
stamp-output : $(md_file) genoutput $(srcdir)/move-if-change
d1552 1
a1552 1
	touch stamp-output
d1727 2
a1728 2
bc-arity.h: stamp-bcarity ; @@true
stamp-bcarity : $(srcdir)/bytecode.def bi-arity $(srcdir)/move-if-change
d1731 1
a1731 1
	touch stamp-bcarity
d1733 2
a1734 2
bc-opcode.h: stamp-bcopcode ; @@true
stamp-bcopcode : $(srcdir)/bytecode.def bi-opcode $(srcdir)/move-if-change
d1737 1
a1737 1
	touch stamp-bcopcode
d1739 2
a1740 2
bc-opname.h: stamp-bcopname ; @@true
stamp-bcopname : $(srcdir)/bytecode.def bi-opname $(srcdir)/move-if-change
d1743 1
a1743 1
	touch stamp-bcopname
a1770 2
# The reason we use $(libdir)/g++-include rather than using libsubdir
# is for compatibility with the current version of libg++.
d1815 1
a1815 1
protoize.o: stamp-proto ; @@true
d1822 1
a1822 1
unprotoize.o:	stamp-proto ; @@true
d1824 1
a1824 1
stamp-proto: protoize.c getopt.h $(CONFIG_H)
d1842 1
a1842 1
	touch stamp-proto
d1890 1
a1890 1
# stamp-* so that mostlyclean does not force the include directory to
d2072 4
a2075 8
# Delete other temporary files.
	-rm -f tmp-float.h tmp-gcc.xtar.gz
	-rm -f tmp-foo1 tmp-foo2 tmp-proto.* tmp-unproto.1 tmp-SYSCALLS.s
	-rm -f tmp-c-parse.y tmp-gperf.h
	-rm -f tmp-specs t-float.h-cross tmp-xlimits.h
	-rm -f tmp-fixtmp.c xsys-protos.hT
# Delete the stamp files.
	-rm -f stamp-* tmp-*
d2113 1
a2113 2
	-rm -rf stmp-* include
	-rm -f */stmp-*
d2428 2
a2429 2
	mkdir temp;							\
	mv -f c-parse.[ch] cexp.c =*.[chy] temp;		\
d2431 2
a2432 2
	mv temp/* .;							\
	rmdir temp
d2434 4
a2437 7
# Create the distribution tar file.
#dist: gcc-$(version).tar.gz
dist: gcc.xtar.gz

gcc.xtar.gz: gcc.xtar
	gzip --best < gcc.xtar > tmp-gcc.xtar.gz
	mv tmp-gcc.xtar.gz gcc.xtar.gz
d2439 3
a2441 2
#gcc-$(version).tar.gz: gcc-$(version).tar
#	gzip < gcc-$(version).tar > gcc-$(version).tar.gz
d2443 2
a2444 4
#gcc-$(version).tar:
gcc.xtar: distdir
# Make the distribution.
	tar -chf gcc.xtar gcc-$(version)
d2449 2
a2450 1
  $(srcdir)/c-parse.c $(srcdir)/cexp.c $(srcdir)/config.in
d2472 1
a2472 1
	  if test -d $$file && test "$$file" != RCS; then \
d2498 1
a2498 1
	cd gcc-$(version); make extraclean
d2500 1
a2500 1
distdir: distdir-start lang.distdir distdir-finish
d2507 2
a2508 2
	  -x cexp.c -x bi-parser.c -x objc-parse.y -x objc-parse.c \
	  -x bi-parser.h -x TAGS \
d2512 1
a2512 1
	  gcc-$(oldversion) gcc-$(version) > diffs
@


1.12
log
@Don't try and rebuild configure with autoconf.  We have no guarantee
that the timestamp on configure will be newer than configure.in...
@
text
@d303 3
d2166 1
a2166 1
    $(INSTALL_MAN) install-info lang.install-normal install-driver
d2276 4
@


1.11
log
@GCC 2.8.0 merge
@
text
@d684 3
a686 2
$(srcdir)/configure: $(srcdir)/configure.in
	cd $(srcdir); autoconf
@


1.10
log
@Revert to older (working) version of gcc, plus recent changes.
@
text
@d2 1
a2 1
#   Copyright (C) 1987, 88, 90-94, 1995 Free Software Foundation, Inc.
d29 4
d38 1
a38 1
SUBDIRS =
d42 5
a46 1
LANGUAGES = c objective-c proto
d57 1
d59 1
d69 1
a69 1
CC = cc
a74 1
OLDAR_FLAGS = qc
d76 2
d80 1
a80 1
INSTALL = install -c
d85 1
d89 1
d113 1
d117 1
a117 1
INSTALL_HEADERS_DIR = install-headers-tar
d125 2
a126 1
    $(srcdir)/ginclude/va-m88k.h $(srcdir)/ginclude/va-pa.h \
d129 2
d132 2
a133 1
    $(srcdir)/ginclude/proto.h $(EXTRA_HEADERS)
d151 1
a151 1
GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -I./include
d160 1
a160 1
program_transform_cross_name = -e s,^,$(target)-,
d178 8
d196 14
a209 12
target= ... `configure' substitutes actual target name here.
xmake_file= ... `configure' substitutes actual x- file name here.
tmake_file= ... `configure' substitutes actual t- file name here.
out_file= ... `configure' substitutes actual out file name here.
out_object_file= ... `configure' substitutes actual out object file name here.
md_file= ... `configure' substitutes actual md file name here.
tm_file= ... `configure' substitutes actual tm file name here.
build_xm_file= ... `configure' substitutes actual build xm- file name here.
host_xm_file= ... `configure' substitutes actual host xm- file name here.
lang_specs_files= ... `configure' substitutes actual lang spec file names here.
lang_options_files= ... `configure' puts actual lang options file names here.
version=`sed -e 's/.*\"\([^ \"]*\)[ \"].*/\1/' < $(srcdir)/version.c`
a211 2
# Directory where sources are, from where we are.
srcdir = .
d214 1
a214 1
prefix = /usr/local
d219 1
a219 1
local_prefix = /usr/local
d221 1
a221 1
exec_prefix = $(prefix)
d223 1
a223 1
bindir = $(exec_prefix)/bin
d225 1
a225 1
libdir = $(exec_prefix)/lib
d227 1
a227 1
libsubdir = $(libdir)/gcc-lib/$(target)/$(version)
d229 3
a231 1
gxx_include_dir= $(libdir)/g++-include
d238 1
a238 1
infodir = $(prefix)/info
d244 1
a244 1
exeext =
d247 1
a247 1
mandir = $(prefix)/man/man1
d250 1
a250 1
tooldir = $(exec_prefix)/$(target)
d282 2
a283 1
LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) -g1
d306 1
a306 1
EXTRA_PASSES =
d309 1
a309 1
EXTRA_PROGRAMS = 
d313 1
a313 1
EXTRA_PARTS =
d317 1
a317 1
EXTRA_OBJS =
d321 1
a321 1
EXTRA_GCC_OBJS =
d325 1
a325 1
EXTRA_HEADERS =
d328 2
a329 1
# USE_COLLECT2 =
d342 2
a343 1
CROSS_FLOAT_H=float.h-cross
d356 1
a356 1
FIXINCLUDES=fixincludes
d366 4
d424 6
d443 2
d446 2
d449 3
d453 2
a454 1

d461 1
a461 1
INTERNAL_CFLAGS = $(CROSS) -DIN_GCC
d464 2
a465 1
ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS)
d512 1
a512 1

d517 5
a521 3
LANG_MAKEFILES =
LANG_STAGESTUFF =
LANG_DIFF_EXCLUDES =
d533 1
a533 1
	"CC=set-by-configure" \
d535 1
d540 1
d546 1
d554 1
a554 1

d557 3
a559 3
# A list of all the language-specific executables.
# This is overridden by configure.
COMPILERS = cc1$(exeext) cc1obj$(exeext)
d562 1
a562 6
C_OBJS = c-parse.o c-lang.o c-lex.o c-pragma.o \
   c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-iterate.o

# Language-specific object files for Objective C.
OBJC_OBJS = objc-parse.o objc-act.o c-lex.o c-pragma.o \
   c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-iterate.o
d572 3
a574 3
 function.o stmt.o expr.o calls.o expmed.o explow.o optabs.o varasm.o \
 rtl.o print-rtl.o rtlanal.o emit-rtl.o real.o \
 dbxout.o sdbout.o dwarfout.o xcoffout.o \
d579 1
a579 1
 insn-attrtab.o $(out_object_file) getpwd.o convert.o $(EXTRA_OBJS)
d594 1
a594 1
 stamp-flags stamp-config stamp-codes \
d596 1
a596 1
 stamp-attr stamp-attrtab stamp-opinit stamp-proto stamp-crt stamp-crtS \
d603 2
a604 1
 $(GCC_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \
d608 1
d630 3
a632 3
    __gcc_bcmp _varargs _eprintf _op_new _op_vnew _new_handler _op_delete \
    _op_vdel _bb _shtab _clear_cache _trampoline __main _exit _ctors _eh \
    _pure
d642 2
a643 2
RTL_H = rtl.h rtl.def machmode.h machmode.def
TREE_H = tree.h real.h tree.def machmode.h machmode.def
d645 4
a648 1

d665 1
d669 1
d672 1
a672 1

d676 4
a679 3
Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(srcdir)/version.c \
   $(srcdir)/config/$(xmake_file) $(srcdir)/config/$(tmake_file) \
   $(LANG_MAKEFILES)
d684 31
d729 2
a730 1
native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)
a733 2
OBJC objc: cc1obj objc-runtime
OBJECTIVE-C objective-c: cc1obj objc-runtime
d737 1
a737 12
.PHONY: C c OBJC objc OBJECTIVE-C objective-c PROTO proto

# Really, really stupid make features, such as SUN's KEEP_STATE, may force
# a target to build even if it is up-to-date.  So we must verify that
# config.status does not exist before failing.
config.status:
	@@if [ ! -f config.status ] ; then \
	  echo You must configure gcc.  Look at the INSTALL file for details.; \
	  false; \
	else \
	  true; \
	fi
d758 2
a759 2
stamp-objlist: Makefile $(OBJS) $(BC_OBJS)
	echo " $(OBJS) $(BC_OBJS)" | sed -e 's, \([a-z]\), ../\1,g' -e 's/\.o/$(objext)/g' >stamp-objlist
d764 4
a767 2
xgcc: gcc.o version.o $(LIBDEPS) $(EXTRA_GCC_OBJS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ gcc.o version.o $(EXTRA_GCC_OBJS) $(LIBS)
a782 3
cc1obj: $(P) $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)

d789 1
d792 1
d796 2
d799 3
a801 1
	echo "#error float.h values not known for cross-compiler" > t-float.h-cross
d809 9
a817 2
# Breaking this line caused a problem with one version of GNU make.
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) -I. -c $(srcdir)/enquire.c
d827 1
a827 1

d858 4
d876 1
a876 1
	  $(OLDCC) $(CCLIBFLAGS) $(INCLUDES) -c -DL$${name} $(srcdir)/libgcc1.c; \
d896 1
a896 1
	    $(OLDCC) $(CCLIBFLAGS) $(INCLUDES) -c $${file}; \
d942 1
a942 1
	  $(OLDCC) $(CCLIBFLAGS) $(INCLUDES) -S -DL$${name} $(srcdir)/libgcc1.c; \
d960 3
a962 2
libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(LIB2FUNCS_EXTRA) \
   machmode.h longlong.h gbl-ctors.h config.status
d987 17
a1003 5
	for file in .. $(LIB2FUNCS_EXTRA); \
	do \
	  if [ x$${file} != x.. ]; then \
	    name=`echo $${file} | sed -e 's/[.][cS]$$//' -e 's/[.]asm$$//'`; \
	    oname=` echo $${name} | sed -e 's,.*/,,'`; \
a1011 1
	  else true; \
d1050 10
a1059 3
multilib.h: $(srcdir)/genmultilib Makefile
	$(SHELL) $(srcdir)/genmultilib "$(MULTILIB_OPTIONS)" \
	  "$(MULTILIB_DIRNAMES)" "$(MULTILIB_MATCHES)" > multilib.h
d1063 2
a1064 1
   $(LIB2FUNCS_EXTRA) machmode.h longlong.h gbl-ctors.h config.status
d1071 1
d1074 1
d1083 6
a1088 1
	rm -f $(dir)/libgcc.a $(LIBGCC2)
d1092 1
d1104 1
d1119 9
a1127 26

objc-runtime: libobjc.a

# Build the Objective C runtime library.
libobjc.a: cc1obj stmp-int-hdrs libgcc2.ready $(USE_COLLECT2) $(EXTRA_PARTS)
	if [ -d objc ]; then true; else mkdir objc; fi
	thisdir1=`pwd`; \
	srcdir1=`cd $(srcdir); pwd`; \
	cd objc; \
	$(MAKE) -f $${srcdir1}/objc/Makefile libobjc.a \
	  srcdir=$${srcdir1} tooldir=$(tooldir) AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
	  GCC_FOR_TARGET="$${thisdir1}/xgcc -B$${thisdir1}/" \
	  GCC_CFLAGS="$(GCC_CFLAGS)"
	-rm -f libobjc.a
	ln objc/libobjc.a . >/dev/null 2>&1 || cp objc/libobjc.a .
	-if $(RANLIB_TEST) ; then $(RANLIB) libobjc.a; else true; fi

# This is used by objc/Makefile if the user runs that directly.
sublibobjc.a: cc1obj stmp-int-hdrs libgcc2.ready
	thisdir1=`pwd`; \
	srcdir1=`cd $(srcdir); pwd`; \
	cd objc; \
	$(MAKE) -f $$srcdir1/objc/Makefile libobjc.a \
	  srcdir=$$srcdir1 tooldir=$(tooldir) AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
	  GCC_FOR_TARGET="$$thisdir1/xgcc -B$$thisdir1/" \
	  GCC_CFLAGS="$(GCC_CFLAGS)"
d1132 11
a1142 13
crtbegin.o: stamp-crt ; @@true
crtend.o: stamp-crt; @@true

stamp-crt:	crtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \
	  -DCRT_BEGIN -finhibit-size-directive -fno-inline-functions \
	  -g0 -c $(srcdir)/crtstuff.c
	mv crtstuff$(objext) crtbegin$(objext)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \
	  -DCRT_END -finhibit-size-directive -fno-inline-functions \
	  -g0 -c $(srcdir)/crtstuff.c
	mv crtstuff$(objext) crtend$(objext)
	touch stamp-crt
d1148 3
a1150 2
stamp-crtS:	crtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \
d1152 1
a1152 1
	  -g0 -c $(srcdir)/crtstuff.c -fPIC
d1154 1
a1154 1
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \
d1156 1
a1156 2
	  -g0 -c $(srcdir)/crtstuff.c -fPIC
	mv crtstuff$(objext) crtendS$(objext)
d1158 12
a1169 1

d1184 1
d1187 1
a1187 1
	  $(srcdir)/c-parse.in >tmp-c-parse.y
d1203 2
a1204 1
c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H) c-pragma.h
d1213 2
a1214 1
collect2 : collect2.o cplus-dem.o underscore.o version.o $(LIBDEPS)
d1218 1
a1218 1
	  cplus-dem.o underscore.o version.o $(LIBS)
d1220 1
a1220 1
collect2.o : collect2.c $(CONFIG_H) gstab.h obstack.h demangle.h
d1222 1
a1222 1
	-DTARGET_MACHINE=\"$(target)\" $(MAYBE_USE_COLLECT2) \
d1225 1
a1225 1
cplus-dem.o: cplus-dem.c demangle.h
a1241 16
# Objective C language specific files.

objc-parse.o : objc-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \
   c-tree.h input.h flags.h objc-act.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c objc-parse.c
objc-parse.c : objc-parse.y
	$(BISON) $(BISONFLAGS) -o objc-parse.c objc-parse.y
objc-parse.y: c-parse.in
	sed -e "/^ifc$$/,/^end ifc$$/d" \
	  -e "/^ifobjc$$/d" -e "/^end ifobjc$$/d" \
	  $(srcdir)/c-parse.in >tmp-objc-prs.y
	sh $(srcdir)/move-if-change tmp-objc-prs.y objc-parse.y

objc-act.o : objc-act.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h c-lex.h \
   flags.h objc-act.h input.h function.h c-parse.h

d1248 1
a1248 2
gcc.o: gcc.c $(CONFIG_H) multilib.h config.status $(lang_specs_files)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
d1252 5
a1256 3
  -DDEFAULT_TARGET_MACHINE=\"$(target)\" \
  -DTOOLDIR_BASE_PREFIX=\"$(exec_prefix)/\" \
  $(MAYBE_TARGET_DEFAULT) \
d1262 7
a1268 1
obstack.o: obstack.c
d1279 2
a1280 2
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	  $(MAYBE_TARGET_DEFAULT) $(MAYBE_USE_COLLECT2) \
d1293 1
a1293 1
   recog.h output.h bytecode.h
d1295 6
a1300 3
   insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h loop.h \
   recog.h bytecode.h bc-typecd.h bc-typecd.def bc-opcode.h bc-optab.h \
   bc-emit.h
d1302 1
a1302 1
   insn-flags.h insn-codes.h expr.h insn-config.h recog.h output.h \
d1304 1
a1304 1
   bc-emit.h modemap.def
d1306 1
a1306 1
   insn-flags.h
d1308 1
a1308 1
   insn-flags.h insn-config.h insn-codes.h expr.h recog.h real.h
d1310 1
a1310 1
   insn-config.h expr.h recog.h insn-flags.h insn-codes.h
d1312 1
a1312 1
   insn-flags.h insn-config.h insn-codes.h expr.h recog.h reload.h
d1315 3
a1317 2
sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) gsyms.h flags.h \
   insn-config.h reload.h
d1320 2
d1323 4
a1326 3
emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h \
   function.h regs.h insn-config.h insn-codes.h real.h expr.h bytecode.h \
   bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h bc-emit.h bc-opname.h
d1331 2
a1332 2
   insn-flags.h insn-config.h insn-codes.h expr.h real.h function.h \
   bytecode.h
d1335 1
a1335 1
   insn-config.h insn-flags.h insn-codes.h expr.h real.h
d1339 3
a1341 1
   insn-config.h recog.h
d1343 3
a1345 3
   insn-flags.h insn-codes.h regs.h hard-reg-set.h recog.h expr.h real.h
unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h insn-codes.h \
   integrate.h regs.h flags.h expr.h loop.h
d1347 1
a1347 1
   basic-block.h regs.h hard-reg-set.h output.h
d1350 1
a1350 1
   basic-block.h recog.h real.h hard-reg-set.h
d1352 4
a1355 3
   basic-block.h regs.h insn-config.h recog.h reload.h real.h bytecode.h
local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h basic-block.h \
   regs.h hard-reg-set.h insn-config.h recog.h output.h
d1357 1
a1357 1
   basic-block.h regs.h hard-reg-set.h insn-config.h output.h
d1359 2
a1360 2
reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h output.h \
   reload.h recog.h hard-reg-set.h insn-config.h insn-codes.h regs.h real.h
d1363 1
a1363 1
   basic-block.h recog.h output.h
d1365 1
a1365 1
   regs.h hard-reg-set.h insn-codes.h insn-config.h basic-block.h recog.h \
d1368 1
a1368 1
   basic-block.h regs.h insn-config.h insn-attr.h insn-flags.h recog.h \
d1370 1
a1370 1
sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \
d1373 1
a1373 1
   recog.h conditions.h insn-config.h insn-attr.h real.h output.h \
d1376 1
a1376 1
   regs.h recog.h hard-reg-set.h flags.h insn-config.h insn-attr.h \
d1379 1
a1379 1
   regs.h hard-reg-set.h flags.h insn-config.h
d1407 1
a1407 1

d1462 1
a1462 1
insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h recog.h \
d1473 1
a1473 1
  insn-config.h flags.h rtl.h recog.h expr.h reload.h
d1523 1
a1523 1
    hard-reg-set.h insn-config.h insn-flags.h insn-attr.h output.h recog.h \
d1532 1
a1532 1

d1625 1
a1625 1

d1664 1
a1664 1

d1733 1
a1733 1

d1741 2
a1742 2
cccp: cccp.o cexp.o version.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ cccp.o cexp.o \
d1755 1
d1762 1
a1762 1
  version.o $(LIBDEPS)
d1764 3
a1766 1
	  cppalloc.o cpperror.o cppexp.o version.o $(LIBS)
d1772 1
d1791 2
a1792 1
protoize: protoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)
d1794 2
a1795 1
	  protoize.o getopt.o getopt1.o getpwd.o version.o $(LIBS)
d1798 2
a1799 1
unprotoize: unprotoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)
d1801 2
a1802 1
	  unprotoize.o getopt.o getopt1.o getpwd.o version.o $(LIBS)
d1864 6
a1869 1

d1876 1
a1876 1
stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h objc-headers
d1881 1
a1881 2
	objdir=`pwd`; \
	cd $(srcdir); \
d1885 4
a1888 3
	    rm -f $$objdir/include/$$realfile; \
	    cp ginclude/$$realfile $$objdir/include; \
	    chmod a+r $$objdir/include/$$realfile; \
d1900 1
a1900 1
# Build the complete include directory.
d1903 4
a1906 2
	cp gfloat.h include/float.h
	chmod a+r include/float.h
a1931 13
# copy objc header files into build directory
objc-headers: stmp-fixinc
	if [ -d include ]; then true; else mkdir include; fi
	if [ -d objc ]; then true; else mkdir objc; fi
	thisdir1=`pwd`; \
	srcdir1=`cd $(srcdir); pwd`; \
	cd objc; \
	$(MAKE) -f $${srcdir1}/objc/Makefile copy-headers \
	srcdir=$${srcdir1} tooldir=$(tooldir) AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
	GCC_FOR_TARGET="$${thisdir1}/xgcc -B$${thisdir1}/" \
	GCC_CFLAGS="$(GCC_CFLAGS)" incinstalldir=$${thisdir1}/include
	touch objc-headers

d1960 1
a1960 1
   cpplib.o cpphash.o cppalloc.o cppexp.o cpperror.o version.o
d1962 2
a1963 2
	   scan-decls.o scan.o cpplib.o cpphash.o cppalloc.o version.o \
	   cppexp.o $(HOST_LIBS)
d1996 1
a1996 1

d2003 2
a2004 1
	$(MAKEINFO) $(srcdir)/cpp.texi -o $(build_infodir)/cpp.info
d2007 3
a2009 2
		md.texi rtl.texi tm.texi 
	$(MAKEINFO) -I$(srcdir) $(srcdir)/gcc.texi -o $(build_infodir)/gcc.info
d2014 1
a2014 1
## This works with GNU Make's default rule.
d2016 1
a2016 1
#		md.texi rtl.texi tm.texi 
d2020 1
a2020 1
## This works with GNU Make's default rule.
d2026 4
a2029 3
#	$(MAKEINFO) -D INSTALLONLY --no-header --no-split \
#	  `echo $(srcdir)/install1.texi | sed 's,^\./,,'`

d2039 2
a2040 1
# automatically.  We remove as much from the language subdirectories as we can
a2045 6
# Clean the objc subdir if we created one.
	if [ -d objc ]; then \
	  srcdir1=`cd $(srcdir); pwd`; \
	  cd objc; $(MAKE) -f $$srcdir1/objc/Makefile mostlyclean; \
	else true; fi
	-rm -f libobjc.a
d2051 1
a2051 1
	-rm -f tmplibgcc* tmpcopy xlimits.h
d2056 1
a2056 1
	-rm -f tmp-c-parse.y tmp-objc-prs.y tmp-gperf.h
d2064 1
a2064 1
	-rm -f *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack
d2081 1
d2098 1
a2098 1
	-rm -rf stmp-* include objc-headers
d2111 3
a2113 2
	-rm -f tm.h config.h tconfig.h hconfig.h md
	-rm -f config.status config.run
a2116 1
	-rm -f objc-parse.output
d2119 1
d2138 1
a2138 1
# Get rid of every file that's generated from some other file.
d2140 5
a2144 3
maintainer-clean: distclean bytecode.maintainer-clean lang.maintainer-clean
	-rm -f c-parse.y c-gperf.h objc-parse.y
	-rm -f objc-parse.c objc-parse.output
d2149 1
a2149 1

d2162 1
a2162 1
    install-libobjc $(INSTALL_MAN) install-info lang.install-normal install-driver
d2176 1
a2176 1
install-float-h-cross: install-dir
d2185 4
a2188 2
# Create the installation directory.
install-dir:
d2193 3
a2195 3
	-if [ -d $(libdir)/gcc-lib/$(target) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target) ; chmod a+rx $(libdir)/gcc-lib/$(target) ; fi
	-if [ -d $(libdir)/gcc-lib/$(target)/$(version) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target)/$(version) ; chmod a+rx $(libdir)/gcc-lib/$(target)/$(version) ; fi
	-if [ -d $(libdir)/gcc-lib/$(target)/$(version)/include ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target)/$(version)/include ; chmod a+rx $(libdir)/gcc-lib/$(target)/$(version)/include ; fi
d2211 1
a2211 1
install-common: native install-dir $(EXTRA_PARTS) lang.install-common
d2229 1
d2236 1
d2251 7
d2259 1
a2259 1
# Install the driver program as $(target)-gcc
d2272 5
a2276 7
	  if [ X$(NO_TARGET_GCC) = X ]; then \
	    rm -f $(bindir)/$(target)-gcc-1$(exeext); \
	    ln $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target)-gcc-1$(exeext) \
	      > /dev/null 2>&1 \
	      || cp $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target)-gcc-1$(exeext); \
	    mv $(bindir)/$(target)-gcc-1$(exeext) $(bindir)/$(target)-gcc$(exeext); \
	  fi; \
d2280 3
a2282 1
install-info: doc install-dir lang.install-info
d2284 3
a2286 2
	cd $(build_infodir); for f in cpp.info* gcc.info*; \
	do $(INSTALL_DATA) $$f $(infodir)/$$f; done
d2290 2
a2291 2
install-man: install-dir install-mandir $(srcdir)/gcc.1 $(srcdir)/cccp.1 lang.install-man
	-if [ -f gcc-cross ] ; then \
d2305 1
a2305 1
install-libgcc: libgcc.a install-dir
d2315 1
a2315 1
install-multilib: stmp-multilib install-dir
d2319 4
a2322 2
	  rm -f $(libsubdir)/$${dir}/libgcc.a; \
	  $(INSTALL_DATA) $${dir}/libgcc.a $(libsubdir)/$${dir}/libgcc.a; \
a2327 10
# Install the objc run time library.
install-libobjc: install-dir
	-if [ -f libobjc.a ] ; then \
	  rm -f $(libsubdir)/libobjc.a; \
	  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi; \
	  chmod a-x $(libsubdir)/libobjc.a; \
	else true; fi

d2345 1
a2345 1
install-include-dir: install-dir
d2370 1
a2370 1
install-assert-h: assert.h install-dir
d2387 1
a2387 1
install-collect2: collect2 install-dir
d2404 1
a2404 1

d2411 1
a2411 1
	mv -f c-parse.[ch] objc-parse.c cexp.c =*.[chy] temp;		\
d2435 1
a2435 2
  $(srcdir)/objc-parse.y $(srcdir)/c-parse.c $(srcdir)/objc-parse.c \
  $(srcdir)/cexp.c
a2451 1
	mkdir tmp/objc
a2474 4
	cd objc; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/objc >/dev/null 2>&1 || cp $$file ../tmp/objc; \
	done
d2493 1
a2493 1
	  -x TAGS \
d2503 1
a2503 1
	$(MAKE) CC="$(CC)" libdir=$(libdir) LANGUAGES=c
d2600 3
a2602 3
	-if [ -f as$(exeext) ] ; then ln -s ../as$(exeext) stage1 || cp as$(exeext) stage1 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then ln -s ../ld$(exeext) stage1 || cp ld$(exeext) stage1 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then ln -s ../collect-ld$(exeext) stage1 || cp collect-ld$(exeext) stage1 ; else true ; fi
d2606 4
d2621 3
a2623 3
	-if [ -f as$(exeext) ] ; then ln -s ../as$(exeext) stage2 || cp as$(exeext) stage2 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then ln -s ../ld$(exeext) stage2 || cp ld$(exeext) stage2 ; else true ; fi
	-if [ -f collect-ld ] ; then ln -s ../collect-ld$(exeext) stage2 || cp collect-ld$(exeext) stage2 ; else true ; fi
d2627 4
d2642 3
a2644 3
	-if [ -f as$(exeext) ] ; then ln -s ../as$(exeext) stage3 || cp as$(exeext) stage3 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then ln -s ../ld$(exeext) stage3 || cp ld$(exeext) stage3 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then ln -s ../collect-ld$(exeext) stage3 || cp collect-ld$(exeext) stage3 ; else true ; fi
d2648 4
d2663 3
a2665 3
	-if [ -f as$(exeext) ] ; then ln -s ../as$(exeext) stage4 || cp as$(exeext) stage4 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then ln -s ../ld$(exeext) stage4 || cp ld$(exeext) stage4 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then ln -s ../collect-ld$(exeext) stage4 || cp collect-ld$(exeext) stage4 ; else true ; fi
d2669 4
d2679 1
a2679 1
	- make clean
@


1.9
log
@sync g77 to version 0.5.20 - i hope i got everything right because there
is no patch from 0.5.19 to 0.5.20 - so i did it by diffing two gcc trees
looking carefully at the results

what does the new g77 give us:
* now it completely works on the alpha (64bit)
* faster
* less bugs :-)
@
text
@d527 1
a527 1
 insn-peep.o reorg.o alias.o sched.o final.o recog.o reg-stack.o \
a1251 1
alias.o : $(CONFIG_H) $(RTL_H) flags.h hard-reg-set.h regs.h
@


1.8
log
@Reference include directly to avoid $CDPATH clashes.
@
text
@d527 1
a527 1
 insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o \
d1252 1
@


1.7
log
@Add a TOC to a temporary lib so our make(1) will not always rebuild libgcc
@
text
@d2208 1
a2208 1
	  dir=`cd include; pwd`; \
d2226 1
a2226 1
	(cd include; \
d2234 2
a2235 1
	(cd include; find . -print) | (cd include; cpio -pdum $(libsubdir)/include)
@


1.6
log
@use sh to run scripts; from graichen
@
text
@d909 3
d914 3
a916 1
# because ranlibing libgcc.a itself should suffice.
@


1.5
log
@Makefile.in: break mandir creation out of install-dir;
Makefile.bsd-wrapper: add g77 manpage and lots of ${DESTDIR}s.
@
text
@d1068 1
a1068 1
	$(srcdir)/move-if-change tmp-c-parse.y c-parse.y
d1074 1
a1074 1
#	 $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h
d1116 1
a1116 1
	$(srcdir)/move-if-change tmp-under.c underscore.c
d1131 1
a1131 1
	$(srcdir)/move-if-change tmp-objc-prs.y objc-parse.y
d1314 1
a1314 1
	$(srcdir)/move-if-change tmp-config.h insn-config.h
d1320 1
a1320 1
	$(srcdir)/move-if-change tmp-flags.h insn-flags.h
d1326 1
a1326 1
	$(srcdir)/move-if-change tmp-codes.h insn-codes.h
d1336 1
a1336 1
	$(srcdir)/move-if-change tmp-emit.c insn-emit.c
d1346 1
a1346 1
	$(srcdir)/move-if-change tmp-recog.c insn-recog.c
d1356 1
a1356 1
	$(srcdir)/move-if-change tmp-opinit.c insn-opinit.c
d1365 1
a1365 1
	$(srcdir)/move-if-change tmp-extract.c insn-extract.c
d1374 1
a1374 1
	$(srcdir)/move-if-change tmp-peep.c insn-peep.c
d1384 1
a1384 1
	$(srcdir)/move-if-change tmp-attr.h insn-attr.h
d1396 1
a1396 1
	$(srcdir)/move-if-change tmp-attrtab.c insn-attrtab.c
d1407 1
a1407 1
	$(srcdir)/move-if-change tmp-output.c insn-output.c
d1586 1
a1586 1
	$(srcdir)/move-if-change tmp-bc-arity.h bc-arity.h
d1592 1
a1592 1
	$(srcdir)/move-if-change tmp-bcopcd.h bc-opcode.h
d1598 1
a1598 1
	$(srcdir)/move-if-change tmp-bcopnm.h bc-opname.h
@


1.4
log
@Redid the info-file build slightly, but with kept semantics.  Made g77
this style too.  Added OpenBSD/alpha support
@
text
@d2072 2
d2151 1
a2151 1
install-man: install-dir $(srcdir)/gcc.1 $(srcdir)/cccp.1 lang.install-man
@


1.3
log
@Don't require Bison, allow Yacc to handle the parser genetaions as
well.  Remove the pre-build bi-parser.[ch] from the source dir, build
them in the objdir now.
@
text
@d211 2
d1875 1
a1875 1
info: cpp.info gcc.info lang.info
d1877 2
a1878 2
cpp.info: cpp.texi
	$(MAKEINFO) $(srcdir)/cpp.texi -o cpp.info
d1880 1
a1880 1
gcc.info: gcc.texi extend.texi install.texi invoke.texi \
d1882 1
a1882 1
	$(MAKEINFO) -I$(srcdir) $(srcdir)/gcc.texi -o gcc.info
d2144 1
a2144 1
	for f in cpp.info* gcc.info*; \
@


1.2
log
@First cut at making a minimal intrusive munge of gcc to fit in a BSD
framework.  This means, provide a Makefile.bsd-wrapper.  Remove
intermediate files from the source dir.  Build them in the obj-dir.
Add some Makefile hooks so we can tune the std Makefile for our
purpose but still have it behave normal for out-of-tree
configurations.  Only i386 is supported for now.  The other archs will
follow soon.   This checkin requires an existing makeinfo and a yacc
that accepts -o.
@
text
@d1061 1
a1061 1
	$(BISON) $(BISONFLAGS) -d c-parse.y -o c-parse.c
d1124 1
a1124 1
	$(BISON) $(BISONFLAGS) objc-parse.y -o objc-parse.c
d1560 1
a1560 1
	$(BISON) $(BISONFLAGS) -d $(srcdir)/bi-parser.y -o bi-parser.c
d1565 1
a1565 1
bi-lexer.o: bi-lexer.c $(srcdir)/bi-parser.h $(build_xm_file)
@


1.1
log
@Initial revision
@
text
@d121 4
d1056 7
a1062 7
c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \
    $(srcdir)/c-parse.h c-tree.h input.h flags.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/c-parse.c
$(srcdir)/c-parse.h: $(srcdir)/c-parse.c
$(srcdir)/c-parse.c: $(srcdir)/c-parse.y
	cd $(srcdir); $(BISON) $(BISONFLAGS) -d c-parse.y -o c-parse.c
$(srcdir)/c-parse.y: c-parse.in
d1066 1
a1066 1
	$(srcdir)/move-if-change tmp-c-parse.y $(srcdir)/c-parse.y
d1068 5
a1072 4
$(srcdir)/c-gperf.h: c-parse.gperf
	gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$$ \
	   $(srcdir)/c-parse.gperf >tmp-gperf.h
	 $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h
d1077 1
a1077 1
c-lex.o : c-lex.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h $(srcdir)/c-parse.h \
d1120 1
a1120 1
objc-parse.o : $(srcdir)/objc-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \
d1122 4
a1125 4
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/objc-parse.c
$(srcdir)/objc-parse.c : $(srcdir)/objc-parse.y
	cd $(srcdir); $(BISON) $(BISONFLAGS) objc-parse.y -o objc-parse.c
$(srcdir)/objc-parse.y: $(srcdir)/c-parse.in
d1129 1
a1129 1
	$(srcdir)/move-if-change tmp-objc-prs.y $(srcdir)/objc-parse.y
d1132 1
a1132 1
   flags.h objc-act.h input.h function.h $(srcdir)/c-parse.h
d1558 3
a1560 3
$(srcdir)/bi-parser.h: $(srcdir)/bi-parser.c
$(srcdir)/bi-parser.c: $(srcdir)/bi-parser.y
	cd $(srcdir); $(BISON) $(BISONFLAGS) -d bi-parser.y -o bi-parser.c
d1562 1
a1562 1
bi-parser.o: $(srcdir)/bi-parser.c bi-defs.h $(build_xm_file)
d1564 1
a1564 1
	   $(srcdir)/bi-parser.c
d1619 4
a1622 4
cexp.o: $(srcdir)/cexp.c $(CONFIG_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/cexp.c
$(srcdir)/cexp.c: $(srcdir)/cexp.y
	cd $(srcdir); $(BISON) -o cexp.c cexp.y
d1873 1
a1873 1
info: $(srcdir)/cpp.info $(srcdir)/gcc.info lang.info
d1875 2
a1876 2
$(srcdir)/cpp.info: cpp.texi
	cd $(srcdir); $(MAKEINFO) cpp.texi
d1878 1
a1878 1
$(srcdir)/gcc.info: gcc.texi extend.texi install.texi invoke.texi \
d1880 1
a1880 3
	cd $(srcdir); $(MAKEINFO) gcc.texi

dvi: $(srcdir)/gcc.dvi $(srcdir)/cpp.dvi lang.dvi
d1882 1
a1882 4
# This works with GNU Make's default rule.
$(srcdir)/gcc.dvi: gcc.texi extend.texi install.texi invoke.texi \
		md.texi rtl.texi tm.texi 
	$(TEXI2DVI) $<
d1884 15
a1898 7
# This works with GNU Make's default rule.
$(srcdir)/cpp.dvi: cpp.texi
	$(TEXI2DVI) $<

$(srcdir)/INSTALL: install1.texi install.texi
	$(MAKEINFO) -D INSTALLONLY --no-header --no-split \
	  `echo $(srcdir)/install1.texi | sed 's,^\./,,'`
d2033 1
a2033 1
    install-libobjc install-man install-info lang.install-normal install-driver
d2130 7
a2136 5
	  rm -f $(bindir)/$(target)-gcc-1$(exeext); \
	  ln $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target)-gcc-1$(exeext) \
	    > /dev/null 2>&1 \
	    || cp $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target)-gcc-1$(exeext); \
	  mv $(bindir)/$(target)-gcc-1$(exeext) $(bindir)/$(target)-gcc$(exeext); \
d2142 1
a2142 1
	cd $(srcdir); for f in cpp.info* gcc.info*; \
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
#   Copyright (C) 1987, 88, 90-96, 1997 Free Software Foundation, Inc.
a28 4
# Directory where sources are, from where we are.
srcdir = @@srcdir@@
VPATH = @@srcdir@@

d34 1
a34 1
SUBDIRS =@@subdirs@@
d38 1
a38 5
LANGUAGES = c proto gcov @@all_languages@@

# Selection of languages to be made during stage1 build.
# This is overridden by configure.
BOOT_LANGUAGES = c @@all_boot_languages@@
a48 1
# TCFLAGS is used for compilations with the GCC just built.
a49 1
TCFLAGS =
d59 1
a59 1
CC = @@CC@@
d65 1
a66 2
LN = @@symbolic_link@@
DLLTOOL = dlltool
d69 1
a69 1
INSTALL = @@INSTALL@@
a73 1
MAKEINFOFLAGS =
a76 1
@@SET_MAKE@@
a99 1
OLDAR_FLAGS = qc
d103 1
a103 1
INSTALL_HEADERS_DIR = @@build_install_headers_dir@@
d111 1
a111 2
    $(srcdir)/ginclude/va-m88k.h $(srcdir)/ginclude/va-mn10200.h \
    $(srcdir)/ginclude/va-mn10300.h $(srcdir)/ginclude/va-pa.h \
a113 2
    $(srcdir)/ginclude/va-m32r.h $(srcdir)/ginclude/va-sh.h \
    $(srcdir)/ginclude/va-v850.h $(srcdir)/ginclude/va-arc.h \
d115 1
a115 2
    $(srcdir)/ginclude/proto.h $(EXTRA_HEADERS) \
    $(LANG_EXTRA_HEADERS)
d129 1
a129 1
GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -I./include $(TCFLAGS)
d138 1
a138 1
program_transform_cross_name = -e s,^,$(target_alias)-,
a155 8
# Test to see whether <float.h> exists in the system header files,
# and is not derived from GCC.
FLOAT_H_TEST = \
  [ -f $(SYSTEM_HEADER_DIR)/float.h ] && \
  if grep 'ifndef _FLOAT_H___' $(SYSTEM_HEADER_DIR)/float.h >/dev/null; \
  then false; \
  else :; fi

d166 12
a177 14
target=@@target@@
target_alias=@@target_alias@@
xmake_file=@@dep_host_xmake_file@@
tmake_file=@@dep_tmake_file@@
out_file=$(srcdir)/config/@@out_file@@
out_object_file=@@out_object_file@@
md_file=$(srcdir)/config/@@md_file@@
tm_file=@@tm_file_list@@
build_xm_file=@@build_xm_file_list@@
host_xm_file=@@host_xm_file_list@@
lang_specs_files=@@lang_specs_files@@
lang_options_files=@@lang_options_files@@
GCC_THREAD_FILE=@@thread_file@@
version=@@version@@
d180 2
d184 1
a184 1
prefix = @@prefix@@
d189 1
a189 1
local_prefix = @@local_prefix@@
d191 1
a191 1
exec_prefix = @@exec_prefix@@
d193 1
a193 1
bindir = @@bindir@@
d195 1
a195 1
libdir = @@libdir@@
d197 1
a197 1
libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(version)
d199 1
a199 3
gxx_include_dir= @@gxx_include_dir@@
# Directory in which the old g++ header files may be found.
old_gxx_include_dir= $(libdir)/g++-include
d206 1
a206 1
infodir = @@infodir@@
d210 1
a210 1
exeext = @@build_exeext@@
d213 1
a213 1
mandir = @@mandir@@/man1
d216 1
a216 1
tooldir = $(exec_prefix)/$(target_alias)
d248 1
a248 2
LIBGCC2_DEBUG_CFLAGS = -g1
LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) $(LIBGCC2_DEBUG_CFLAGS) -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED -fexceptions
d271 1
a271 1
EXTRA_PASSES =@@extra_passes@@
d274 1
a274 1
EXTRA_PROGRAMS = @@extra_programs@@
d278 1
a278 1
EXTRA_PARTS = @@extra_parts@@
d282 1
a282 1
EXTRA_OBJS = @@extra_objs@@
d286 1
a286 1
EXTRA_GCC_OBJS =@@host_extra_gcc_objs@@
d290 1
a290 1
EXTRA_HEADERS =@@extra_headers_list@@
d293 1
a293 2
USE_COLLECT2 = @@will_use_collect2@@
MAYBE_USE_COLLECT2 = @@maybe_use_collect2@@
d306 1
a306 2
# This is overridden by configure.
CROSS_FLOAT_H=$(srcdir)/config/float-@@float_format@@.h
d319 1
a319 1
FIXINCLUDES = @@fixincludes@@
a328 4
# A list of all the language-specific executables.
# This is overridden by configure.
COMPILERS = cc1$(exeext) @@all_compilers@@

a382 6
# Extra flags to use when compiling [m]crt0.o.
CRT0STUFF_T_CFLAGS = 

# "t" or nothing, for building multilibbed versions of, say, crtbegin.o.
T =

a395 2
@@target_overrides@@

a396 2
@@host_overrides@@

a397 3
@@cross_defines@@
@@cross_overrides@@

d399 1
a399 2
@@build_overrides@@
#
d406 1
a406 1
INTERNAL_CFLAGS = $(CROSS) -DIN_GCC @@extra_c_flags@@
d409 1
a409 2
ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS) \
	@@DEFS@@
d456 1
a456 1
#
d461 3
a463 5
LANG_MAKEFILES = @@all_lang_makefiles@@
LANG_STAGESTUFF = @@all_stagestuff@@
LANG_DIFF_EXCLUDES = @@all_diff_excludes@@
LANG_LIB2FUNCS = @@all_lib2funcs@@
LANG_EXTRA_HEADERS = @@all_headers@@
d475 1
a475 1
	"CC=@@cc_set_by_configure@@" \
a476 1
	"CLIB=$(CLIB)" \
a480 1
	"LN=$(LN)" \
a485 1
	"STAGE_PREFIX=@@stage_prefix_set_by_configure@@" \
d493 1
a493 1
#
d496 3
a498 3
# Language-specific object files for C and Objective C.
C_AND_OBJC_OBJS = c-lex.o c-pragma.o c-decl.o c-typeck.o c-convert.o \
  c-aux-info.o c-common.o c-iterate.o @@extra_c_objs@@
d501 6
a506 1
C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)
d516 3
a518 3
 function.o stmt.o except.o expr.o calls.o expmed.o explow.o optabs.o \
 varasm.o rtl.o print-rtl.o rtlanal.o emit-rtl.o real.o \
 dbxout.o sdbout.o dwarfout.o dwarf2out.o xcoffout.o bitmap.o \
d523 1
a523 1
 profile.o insn-attrtab.o $(out_object_file) getpwd.o convert.o $(EXTRA_OBJS)
d538 1
a538 1
 stamp-flags stamp-config stamp-codes stamp-mlib \
d540 1
a540 1
 stamp-attr stamp-attrtab stamp-opinit stamp-proto stamp-crt stamp-crtS stamp-crt0 \
d547 1
a547 2
 xgcc$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES) \
 $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \
a550 1
 gcov$(exeext) *.bp \
d572 3
a574 3
    __gcc_bcmp _varargs __dummy _eprintf _op_new _op_vnew _new_handler \
    _op_delete _op_vdel _bb _shtab _clear_cache _trampoline __main _exit \
    _ctors _eh _eh_compat _pure
d584 2
a585 2
RTL_H = rtl.h rtl.def gansidecl.h machmode.h machmode.def
TREE_H = tree.h real.h tree.def gansidecl.h machmode.h machmode.def
d587 1
a587 4
BASIC_BLOCK_H = basic-block.h bitmap.h
DEMANGLE_H = demangle.h gansidecl.h
RECOG_H = recog.h gansidecl.h
#
a603 1
@@language_hooks@@
a606 1
@@language_fragments@@
d609 1
a609 1
#
d613 3
a615 4
Makefile: $(srcdir)/Makefile.in config.status $(srcdir)/version.c \
   $(xmake_file) $(tmake_file) $(LANG_MAKEFILES)
	$(SHELL) $(srcdir)/configure.frag $(srcdir) "$(SUBDIRS)" \
		"$(xmake_file)" "$(tmake_file)"
a619 31
$(srcdir)/configure: $(srcdir)/configure.in
	cd $(srcdir); autoconf

# cstamp-h.in controls rebuilding of config.in.
# It is named cstamp-h.in and not stamp-h.in so the mostlyclean rule doesn't
# delete it.  A stamp file is needed as autoheader won't update the file if
# nothing has changed.
# It remains in the source directory and is part of the distribution.
# This follows what is done in shellutils, fileutils, etc.
# "echo timestamp" is used instead of touch to be consistent with other
# packages that use autoconf (??? perhaps also to avoid problems with patch?).
# ??? Newer versions have a maintainer mode that may be useful here.
$(srcdir)/config.in: $(srcdir)/cstamp-h.in
$(srcdir)/cstamp-h.in: $(srcdir)/configure.in $(srcdir)/acconfig.h
	cd $(srcdir) && autoheader
	echo timestamp > $(srcdir)/cstamp-h.in
auto-config.h: cstamp-h ; @@true
cstamp-h: config.in config.status
	CONFIG_HEADERS=auto-config.h:config.in $(SHELL) config.status

# Really, really stupid make features, such as SUN's KEEP_STATE, may force
# a target to build even if it is up-to-date.  So we must verify that
# config.status does not exist before failing.
config.status: configure version.c
	@@if [ ! -f config.status ] ; then \
	  echo You must configure gcc.  Look at the INSTALL file for details.; \
	  false; \
	else \
	  $(SHELL) config.status --recheck; \
	fi

d634 1
a634 2
native: config.status auto-config.h cpp $(LANGUAGES) \
	$(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)
d638 2
d643 12
a654 1
.PHONY: C c PROTO proto
d675 2
a676 2
stamp-objlist: $(OBJS) $(BC_OBJS)
	echo " $(OBJS) $(BC_OBJS)" | sed -e 's, \([a-z0-9]\), ../\1,g' -e 's/\.o/$(objext)/g' >stamp-objlist
d681 2
a682 4
xgcc: gcc.o version.o choose-temp.o pexecute.o prefix.o version.o \
   $(LIBDEPS) $(EXTRA_GCC_OBJS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ gcc.o prefix.o version.o \
	  choose-temp.o pexecute.o $(EXTRA_GCC_OBJS) $(LIBS)
d698 3
a706 1
# Make it empty if we can use the system float.h without changes.
a708 1
	grep '#define [^_]' tmp-float.h >/dev/null || true > tmp-float.h
a711 2
# ??? This isn't used anymore.  Should we create config/float-unkn.h
# and make that the default float_format in configure?
d713 1
a713 3
	echo "#ifndef	__GCC_FLOAT_NOT_NEEDED" > t-float.h-cross
	echo "#error float.h values not known for cross-compiler" >> t-float.h-cross
	echo "#endif" >> t-float.h-cross
d721 2
a722 9
	rm -f include/float.h
	if $(FLOAT_H_TEST); then \
	  SYS_FLOAT_H_WRAP=1; \
	else :; \
	  SYS_FLOAT_H_WRAP=0; \
	fi; \
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) \
	  -DSYS_FLOAT_H_WRAP=$$SYS_FLOAT_H_WRAP \
	  -I. -c $(srcdir)/enquire.c
d732 1
a732 1
#
a762 4
#
# NOTE: If you modify these rules substantially, please be sure to
# check at least config/i386/t-sco5 and possibly other makefile
# fragments.
d777 1
a777 1
	  $(OLDCC) -DIN_LIBGCC1 $(CCLIBFLAGS) $(INCLUDES) -c -DL$${name} $(srcdir)/libgcc1.c; \
d797 1
a797 1
	    $(OLDCC) -DIN_LIBGCC1 $(CCLIBFLAGS) $(INCLUDES) -c $${file}; \
d843 1
a843 1
	  $(OLDCC) -DIN_LIBGCC1 $(CCLIBFLAGS) $(INCLUDES) -S -DL$${name} $(srcdir)/libgcc1.c; \
d861 2
a862 3
LIB2ADD = $(srcdir)/frame.c $(LIB2FUNCS_EXTRA) $(LANG_LIB2FUNCS)
libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(LIB2ADD) \
   machmode.h longlong.h frame.h gansidecl.h gbl-ctors.h config.status
d887 5
a891 17
	for file in $(LIB2ADD); do \
	  name=`echo $${file} | sed -e 's/[.][cSo]$$//' -e 's/[.]asm$$//' -e 's/[.]txt$$//'`; \
	  oname=` echo $${name} | sed -e 's,.*/,,'`; \
	  if [ $${name}.txt = $${file} ]; then \
	    for f in .. `cat $${file}`; do if [ x$${f} != x.. ]; then \
	      $(MAKE) GCC_FOR_TARGET="$(GCC_FOR_TARGET)" \
		AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" CC="$(CC)" \
		CFLAGS="$(CFLAGS)" HOST_PREFIX="$(HOST_PREFIX)" \
		HOST_PREFIX_1="$(HOST_PREFIX_1)" \
		LANGUAGES="$(LANGUAGES)" \
		LIBGCC2_CFLAGS="$(LIBGCC2_CFLAGS)" $${f}; \
	      if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	      $(AR) $(AR_FLAGS) tmplibgcc2.a $${f}; \
	      rm -f $${f}; \
	    else true; \
	    fi; done; \
	  else \
d900 1
d934 3
a936 10
multilib.h: stamp-mlib; @@true
stamp-mlib: $(srcdir)/genmultilib Makefile
	$(SHELL) $(srcdir)/genmultilib \
	  "$(MULTILIB_OPTIONS)" \
	  "$(MULTILIB_DIRNAMES)" \
	  "$(MULTILIB_MATCHES)" \
	  "$(MULTILIB_EXCEPTIONS)" \
	  "$(MULTILIB_EXTRA_OPTS)" > tmp-mlib.h
	$(srcdir)/move-if-change tmp-mlib.h multilib.h
	touch stamp-mlib
d940 1
a940 2
   frame.h gansidecl.h \
   $(LIB2ADD) machmode.h longlong.h gbl-ctors.h config.status
a946 1
	    LANGUAGES="$(LANGUAGES)" \
a948 1
	    MULTILIB_CFLAGS="$${flags}" \
d957 1
a957 6
	rm -f $(LIBGCC2)
	if [ -d $(dir) ]; then \
	  cd $(dir); \
	  rm -f libgcc.a $(EXTRA_MULTILIB_PARTS); \
	else true; \
	fi
a960 1
	  LANGUAGES="$(LANGUAGES)" \
a971 1
	    LANGUAGES="$(LANGUAGES)" \
d986 26
a1011 9
	for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  $(MAKE) GCC_FOR_TARGET="$(GCC_FOR_TARGET)" \
	    AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" CC="$(CC)" CFLAGS="$(CFLAGS)" \
	    HOST_PREFIX="$(HOST_PREFIX)" HOST_PREFIX_1="$(HOST_PREFIX_1)" \
	    LANGUAGES="$(LANGUAGES)" \
	    MULTILIB_CFLAGS="$(MULTILIB_CFLAGS)" T="t" t$${f}; \
	  mv t$${f} $(dir)/$${f}; \
	else true; \
	fi; done
d1016 13
a1028 11
$(T)crtbegin.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \
  defaults.h frame.h gbl-ctors.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \
	  -finhibit-size-directive -fno-inline-functions -fno-exceptions $(CRTSTUFF_T_CFLAGS) \
	  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -o $(T)crtbegin$(objext)

$(T)crtend.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \
  defaults.h frame.h gbl-ctors.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \
	  -finhibit-size-directive -fno-inline-functions -fno-exceptions $(CRTSTUFF_T_CFLAGS) \
	  -c $(srcdir)/crtstuff.c -DCRT_END -o $(T)crtend$(objext)
d1034 2
a1035 3
stamp-crtS: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \
  defaults.h frame.h gbl-ctors.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS_S) \
d1037 1
a1037 1
	  -g0 -c $(srcdir)/crtstuff.c 
d1039 1
a1039 1
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS_S) \
d1041 2
a1042 1
	  -g0 -c $(srcdir)/crtstuff.c -o crtendS$(objext)
d1044 1
a1044 12

# Compile the start modules crt0.o and mcrt0.o that are linked with every program
crt0.o: stamp-crt0 ; @@true
mcrt0.o: stamp-crt0; @@true

stamp-crt0:	$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(CRT0STUFF_T_CFLAGS) \
	  -o crt0.o -c $(CRT0_S)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(CRT0STUFF_T_CFLAGS) \
	  -o mcrt0.o -c $(MCRT0_S)
	touch stamp-crt0
#
a1058 1
	echo '/*WARNING: This file is automatically generated!*/' >tmp-c-parse.y
d1061 1
a1061 1
	  $(srcdir)/c-parse.in >>tmp-c-parse.y
d1076 1
a1076 2
c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H) except.h function.h \
    defaults.h c-pragma.h
d1085 1
a1085 2
collect2 : collect2.o cplus-dem.o underscore.o version.o \
	choose-temp.o $(LIBDEPS)
d1089 1
a1089 1
	  cplus-dem.o underscore.o version.o choose-temp.o $(LIBS)
d1091 1
a1091 1
collect2.o : collect2.c $(CONFIG_H) gansidecl.h gstab.h obstack.h $(DEMANGLE_H)
d1093 1
a1093 1
	-DTARGET_MACHINE=\"$(target_alias)\" $(MAYBE_USE_COLLECT2) \
d1096 1
a1096 1
cplus-dem.o: cplus-dem.c $(DEMANGLE_H)
d1113 16
d1135 2
a1136 1
DRIVER_DEFINES = \
d1140 3
a1142 5
  -DDEFAULT_TARGET_MACHINE=\"$(target_alias)\" \
  -DTOOLDIR_BASE_PREFIX=\"$(exec_prefix)/\"
gcc.o: gcc.c $(CONFIG_H) gansidecl.h multilib.h Makefile $(lang_specs_files)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
  $(DRIVER_DEFINES) \
d1148 1
a1148 7
obstack.o: obstack.c $(CONFIG_H)
choose-temp.o: choose-temp.c $(CONFIG_H) gansidecl.h
pexecute.o: pexecute.c $(CONFIG_H) gansidecl.h
prefix.o: prefix.c $(CONFIG_H) gansidecl.h Makefile
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	-DPREFIX=\"$(prefix)\" \
	  -c `echo $(srcdir)/prefix.c | sed 's,^\./,,'`
d1159 2
a1160 2
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2) \
	  -DTARGET_NAME=\"$(target_alias)\" \
d1173 1
a1173 1
   $(RECOG_H) output.h bytecode.h bc-emit.h
d1175 3
a1177 6
   insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h except.h \
   loop.h $(RECOG_H) bytecode.h bc-typecd.h bc-typecd.def bc-opcode.h \
   bc-optab.h bc-emit.h
except.o : except.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \
   insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \
   $(RECOG_H) output.h except.h
d1179 1
a1179 1
   insn-flags.h insn-codes.h expr.h insn-config.h $(RECOG_H) output.h \
d1181 1
a1181 1
   bc-emit.h modemap.def hard-reg-set.h
d1183 1
a1183 1
   insn-flags.h regs.h
d1185 1
a1185 1
   insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) real.h
d1187 1
a1187 1
   insn-config.h expr.h $(RECOG_H) insn-flags.h insn-codes.h
d1189 1
a1189 1
   insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) reload.h
d1192 2
a1193 3
sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h except.h \
   function.h expr.h output.h hard-reg-set.h regs.h defaults.h real.h \
   insn-config.h bytecode.h obstack.h xcoffout.h c-pragma.h
a1195 2
dwarf2out.o : dwarf2out.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf2.h flags.h \
   insn-config.h reload.h output.h defaults.h hard-reg-set.h regs.h expr.h
d1197 3
a1199 4
emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h except.h \
   function.h regs.h insn-config.h $(RECOG_H) real.h expr.h obstack.h \
   bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h bc-emit.h \
   bc-opname.h
d1204 2
a1205 2
   insn-flags.h insn-config.h insn-codes.h expr.h real.h regs.h function.h \
   bytecode.h output.h $(RECOG_H) except.h
d1208 1
a1208 1
   insn-config.h insn-flags.h $(RECOG_H) expr.h real.h except.h
d1212 1
a1212 3
   insn-config.h $(RECOG_H) expr.h
profile.o : profile.c $(CONFIG_H) $(RTL_H) flags.h insn-flags.h gcov-io.h \
   $(TREE_H) output.h regs.h
d1214 3
a1216 3
   insn-flags.h insn-codes.h regs.h hard-reg-set.h $(RECOG_H) expr.h real.h
unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h integrate.h regs.h \
   $(RECOG_H) flags.h expr.h loop.h
d1218 1
a1218 1
   $(BASIC_BLOCK_H) regs.h hard-reg-set.h output.h
d1221 1
a1221 1
   $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h
d1223 3
a1225 4
   $(BASIC_BLOCK_H) regs.h insn-config.h $(RECOG_H) reload.h real.h bytecode.h
local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) \
   regs.h hard-reg-set.h insn-config.h $(RECOG_H) output.h
bitmap.o : bitmap.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) regs.h
d1227 1
a1227 1
   $(BASIC_BLOCK_H) regs.h hard-reg-set.h insn-config.h output.h
d1229 2
a1230 2
reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h output.h expr.h\
   reload.h $(RECOG_H) hard-reg-set.h insn-config.h insn-codes.h regs.h real.h
d1233 1
a1233 1
   $(BASIC_BLOCK_H) $(RECOG_H) output.h
d1235 1
a1235 1
   regs.h hard-reg-set.h insn-codes.h insn-config.h $(BASIC_BLOCK_H) $(RECOG_H) \
d1238 1
a1238 1
   $(BASIC_BLOCK_H) regs.h insn-config.h insn-attr.h insn-flags.h $(RECOG_H) \
d1240 1
a1240 1
sched.o : $(SCHED_PREFIX)sched.c $(CONFIG_H) $(RTL_H) $(BASIC_BLOCK_H) regs.h hard-reg-set.h \
d1243 1
a1243 1
   $(RECOG_H) conditions.h insn-config.h insn-attr.h except.h real.h output.h \
d1246 1
a1246 1
   regs.h $(RECOG_H) hard-reg-set.h flags.h insn-config.h insn-attr.h \
d1249 1
a1249 1
   regs.h hard-reg-set.h flags.h insn-config.h insn-flags.h
d1277 1
a1277 1
#
d1332 1
a1332 1
insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h $(RECOG_H) \
d1343 1
a1343 1
  insn-config.h flags.h $(RECOG_H) expr.h reload.h
d1393 1
a1393 1
    hard-reg-set.h insn-config.h insn-flags.h insn-attr.h output.h $(RECOG_H) \
d1402 1
a1402 1
#
d1495 1
a1495 1
#
d1534 1
a1534 1
#
d1603 1
a1603 1
#
d1611 2
a1612 2
cccp: cccp.o cexp.o version.o prefix.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ cccp.o cexp.o prefix.o \
a1624 1
	  -DOLD_GPLUSPLUS_INCLUDE_DIR=\"$(old_gxx_include_dir)\" \
d1631 1
a1631 1
  prefix.o version.o $(LIBDEPS)
d1633 1
a1633 3
	  cppalloc.o cpperror.o cppexp.o prefix.o version.o $(LIBS)

cppmain.o: cppmain.c $(CONFIG_H) cpplib.h
a1638 1
	  -DOLD_GPLUSPLUS_INCLUDE_DIR=\"$(old_gxx_include_dir)\" \
d1657 1
a1657 2
protoize: protoize.o getopt.o getopt1.o getpwd.o version.o \
    pexecute.o choose-temp.o $(LIBDEPS)
d1659 1
a1659 2
	  protoize.o getopt.o getopt1.o getpwd.o version.o \
	  pexecute.o choose-temp.o $(LIBS)
d1662 1
a1662 2
unprotoize: unprotoize.o getopt.o getopt1.o getpwd.o version.o \
    pexecute.o choose-temp.o $(LIBDEPS)
d1664 1
a1664 2
	  unprotoize.o getopt.o getopt1.o getpwd.o version.o \
	  pexecute.o choose-temp.o $(LIBS)
d1726 1
a1726 6

gcov.o: gcov.c gcov-io.h

gcov: gcov.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) gcov.o $(LIBS) -o $@@
#
d1733 1
a1733 1
stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h
d1738 2
a1739 1
# The touch command is here to workaround an AIX/Linux NFS bug.
d1743 3
a1745 4
	    touch include/$$realfile; \
	    rm -f include/$$realfile; \
	    cp $$file include; \
	    chmod a+r include/$$realfile; \
d1757 1
a1757 1
# Build the complete include directory, including float.h.
d1760 2
a1761 4
	if [ -s gfloat.h ]; then \
	  cp gfloat.h include/float.h && \
	  chmod a+r include/float.h; \
	else :; fi
d1787 13
d1828 1
a1828 1
   cpplib.o cpphash.o cppalloc.o cppexp.o cpperror.o prefix.o version.o
d1830 2
a1831 2
	   scan-decls.o scan.o cpplib.o cpphash.o cppalloc.o prefix.o \
	   version.o cppexp.o $(HOST_LIBS)
d1864 1
a1864 1
#
d1871 1
a1871 1
	cd $(srcdir); $(MAKEINFO) $(MAKEINFOFLAGS) cpp.texi
d1874 2
a1875 2
		md.texi rtl.texi tm.texi gcov.texi
	cd $(srcdir); $(MAKEINFO) $(MAKEINFOFLAGS) gcc.texi
d1881 1
a1881 1
		md.texi rtl.texi tm.texi gcov.texi
d1889 3
a1891 3
	cd $(srcdir); $(MAKEINFO) -D INSTALLONLY --no-header \
		--no-split install1.texi -o INSTALL
#
d1901 1
a1901 2
# automatically, except for `configure'.
# We remove as much from the language subdirectories as we can
d1907 6
d1918 1
a1918 1
	-rm -f tmplibgcc* tmpcopy xlimits.h libgcc1-test
d1923 1
a1923 1
	-rm -f tmp-c-parse.y tmp-gperf.h
d1931 1
a1931 1
	-rm -f *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack *.addressof
a1947 1
	-rm -f *.bp */*.bp
d1964 1
a1964 1
	-rm -rf stmp-* include
d1977 2
a1978 3
	-rm -f tm.h config.h auto-config.h tconfig.h hconfig.h md cstamp-h
	-rm -f config.status config.run config.cache config.bak
	-rm -f Make-lang Make-hooks Make-host Make-target
d1982 1
a1984 1
	-rm -f float.h
d2003 1
a2003 1
# Get rid of every file that's generated from some other file, except for `configure'.
d2005 3
a2007 5
maintainer-clean:
	@@echo 'This command is intended for maintainers to use; it'
	@@echo 'deletes files that may need special tools to rebuild.'
	$(MAKE) distclean bytecode.maintainer-clean lang.maintainer-clean
	-rm -f c-parse.y c-gperf.h
d2012 1
a2012 1
#
d2025 1
a2025 1
    install-man install-info lang.install-normal install-driver
d2039 1
a2039 1
install-float-h-cross: installdirs
d2048 2
a2049 4
# Create the installation directories.
installdirs:
	-if [ -d $(prefix) ] ; then true ; else mkdir $(prefix) ; chmod a+rx $(prefix) ; fi
	-if [ -d $(exec_prefix) ] ; then true ; else mkdir $(exec_prefix) ; chmod a+rx $(exec_prefix) ; fi
d2054 3
a2056 3
	-if [ -d $(libdir)/gcc-lib/$(target_alias) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target_alias) ; chmod a+rx $(libdir)/gcc-lib/$(target_alias) ; fi
	-if [ -d $(libdir)/gcc-lib/$(target_alias)/$(version) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target_alias)/$(version) ; chmod a+rx $(libdir)/gcc-lib/$(target_alias)/$(version) ; fi
	-if [ -d $(libdir)/gcc-lib/$(target_alias)/$(version)/include ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target_alias)/$(version)/include ; chmod a+rx $(libdir)/gcc-lib/$(target_alias)/$(version)/include ; fi
d2070 1
a2070 1
install-common: native installdirs $(EXTRA_PARTS) lang.install-common
a2087 1
	    chmod a-x $(libsubdir)/$$file; \
a2093 1
	  chmod a-x $(libsubdir)/specs; \
a2107 7
# Install gcov if it was compiled.
	-if [ -f gcov$(exeext) ]; \
	then \
	    rm -f $(bindir)/gcov$(exeext); \
	    $(INSTALL_PROGRAM) gcov$(exeext) $(bindir)/gcov$(exeext); \
	    chmod a+x $(bindir)/gcov$(exeext); \
	fi
d2109 1
a2109 1
# Install the driver program as $(target_alias)-gcc
d2122 2
a2123 2
	  rm -f $(bindir)/$(target_alias)-gcc-1$(exeext); \
	  ln $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target_alias)-gcc-1$(exeext) \
d2125 2
a2126 2
	    || cp $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target_alias)-gcc-1$(exeext); \
	  mv $(bindir)/$(target_alias)-gcc-1$(exeext) $(bindir)/$(target_alias)-gcc$(exeext); \
d2130 1
a2130 3
# $(INSTALL_DATA) might be a relative pathname, so we can't cd into srcdir
# to do the install.  The sed rule was copied from stmp-int-hdrs.
install-info: doc installdirs lang.install-info
d2132 2
a2133 4
	for f in $(srcdir)/cpp.info* $(srcdir)/gcc.info*; do \
	    realfile=`echo $$f | sed -e 's|.*/\([^/]*\)$$|\1|'`; \
	    $(INSTALL_DATA) $$f $(infodir)/$$realfile; \
	done
d2137 2
a2138 2
install-man: installdirs $(srcdir)/gcc.1 $(srcdir)/cccp.1 lang.install-man
	-if [ -f gcc-cross$(exeext) ] ; then \
d2152 1
a2152 1
install-libgcc: libgcc.a installdirs
d2162 1
a2162 1
install-multilib: stmp-multilib installdirs
d2166 2
a2167 4
	  for f in libgcc.a $(EXTRA_MULTILIB_PARTS); do \
	    rm -f $(libsubdir)/$${dir}/$${f}; \
	    $(INSTALL_DATA) $${dir}/$${f} $(libsubdir)/$${dir}/$${f}; \
	  done; \
d2173 10
d2200 1
a2200 1
install-include-dir: installdirs
d2224 1
a2224 1
install-assert-h: assert.h installdirs
d2241 1
a2241 1
install-collect2: collect2 installdirs
d2258 1
a2258 1
#
d2265 1
a2265 1
	mv -f c-parse.[ch] cexp.c =*.[chy] temp;		\
d2289 2
a2290 1
  $(srcdir)/c-parse.c $(srcdir)/cexp.c $(srcdir)/config.in
d2307 1
d2331 4
d2353 1
a2353 1
	  -x bi-parser.h -x TAGS \
d2363 1
a2363 1
	$(MAKE) CC="$(CC)" libdir=$(libdir) LANGUAGES="$(BOOT_LANGUAGES)"
d2460 3
a2462 3
	-if [ -f as$(exeext) ] ; then $(LN) ../as$(exeext) stage1 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then $(LN) ../ld$(exeext) stage1 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then $(LN) ../collect-ld$(exeext) stage1 ; else true ; fi
a2465 4
	-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  cp stage1/$${f} . ; \
	else true; \
	fi; done
d2477 3
a2479 3
	-if [ -f as$(exeext) ] ; then $(LN) ../as$(exeext) stage2 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then $(LN) ../ld$(exeext) stage2 ; else true ; fi
	-if [ -f collect-ld ] ; then $(LN) ../collect-ld$(exeext) stage2 ; else true ; fi
a2482 4
	-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  cp stage2/$${f} . ; \
	else true; \
	fi; done
d2494 3
a2496 3
	-if [ -f as$(exeext) ] ; then $(LN) ../as$(exeext) stage3 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then $(LN) ../ld$(exeext) stage3 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then $(LN) ../collect-ld$(exeext) stage3 ; else true ; fi
a2499 4
	-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  cp stage3/$${f} . ; \
	else true; \
	fi; done
d2511 3
a2513 3
	-if [ -f as$(exeext) ] ; then $(LN) ../as$(exeext) stage4 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then $(LN) ../ld$(exeext) stage4 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then $(LN) ../collect-ld$(exeext) stage4 ; else true ; fi
a2516 4
	-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \
	  cp stage4/$${f} . ; \
	else true; \
	fi; done
d2523 1
a2523 1
	-make clean
@


1.1.1.3
log
@FSF gcc 2.8.1
@
text
@d2 1
a2 1
#   Copyright (C) 1987, 88, 90-97, 1998 Free Software Foundation, Inc.
a226 2
# The reason we use $(libdir)/g++-include rather than using libsubdir
# is for compatibility with older versions of libg++.
a351 4
# Set to ChangeLog if we are in a CVS working directory.  This lets
# us automatically build version.c.
VERSION_DEP = @@version_dep@@

d588 3
a590 3
 s-flags s-config s-codes s-mlib \
 s-output s-recog s-emit s-extract s-peep \
 s-attr s-attrtab s-opinit s-proto s-crt s-crtS s-crt0 \
d595 1
a595 1
 s-bcarity s-bcopcode s-bcopname \
a669 10
$(srcdir)/version.c: $(VERSION_DEP)
	cd $(srcdir); cvs log -h $? >tmp-ver
	tag=`sed '1,/^sym/d;s/	*gcc-//;s/:.*$$//;q' tmp-ver`; \
	ver=`echo $${tag} | sed 's/-.*//' | sed 's/_/./g'`; \
	date=`echo $${tag} | sed 's/.*-//'`; \
	if [ $${date} != RELEASE ]; then ver="testgcc-$${ver} $${date} experimental"; fi; \
	echo "char *version_string = \"$${ver}\";" >>tmp-version.c
	rm -f tmp-ver
	$(srcdir)/move-if-change tmp-version.c $(srcdir)/version.c

d1039 2
a1040 2
multilib.h: s-mlib; @@true
s-mlib: $(srcdir)/genmultilib Makefile
d1048 1
a1048 1
	touch s-mlib
d1135 1
a1135 1
crtbeginS.o crtendS.o: s-crtS ; @@true
d1137 1
a1137 1
s-crtS: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \
d1146 1
a1146 1
	touch s-crtS
d1149 2
a1150 2
crt0.o: s-crt0 ; @@true
mcrt0.o: s-crt0; @@true
d1152 1
a1152 1
s-crt0:	$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)
d1157 1
a1157 1
	touch s-crt0
d1215 1
a1215 1
underscore.c: s-under ; @@true
d1217 1
a1217 1
s-under: $(GCC_PASSES)
d1228 1
a1228 1
	touch s-under
d1265 1
a1265 2
   flags.h input.h insn-attr.h insn-codes.h insn-config.h recog.h xcoffout.h \
   defaults.h output.h \
d1314 1
a1314 1
   bc-opname.h hard-reg-set.h
d1410 1
a1410 1
# because insn-* is older than s-*
d1422 2
a1423 2
insn-config.h: s-config ; @@true
s-config : $(md_file) genconfig $(srcdir)/move-if-change
d1426 1
a1426 1
	touch s-config
d1428 2
a1429 2
insn-flags.h: s-flags ; @@true
s-flags : $(md_file) genflags $(srcdir)/move-if-change
d1432 1
a1432 1
	touch s-flags
d1434 2
a1435 2
insn-codes.h: s-codes ; @@true
s-codes : $(md_file) gencodes $(srcdir)/move-if-change
d1438 1
a1438 1
	touch s-codes
d1444 2
a1445 2
insn-emit.c: s-emit ; @@true
s-emit : $(md_file) genemit $(srcdir)/move-if-change
d1448 1
a1448 1
	touch s-emit
d1454 2
a1455 2
insn-recog.c: s-recog ; @@true
s-recog : $(md_file) genrecog $(srcdir)/move-if-change
d1458 1
a1458 1
	touch s-recog
d1464 2
a1465 2
insn-opinit.c: s-opinit ; @@true
s-opinit : $(md_file) genopinit $(srcdir)/move-if-change
d1468 1
a1468 1
	touch s-opinit
d1473 2
a1474 2
insn-extract.c: s-extract ; @@true
s-extract : $(md_file) genextract $(srcdir)/move-if-change
d1477 1
a1477 1
	touch s-extract
d1482 2
a1483 2
insn-peep.c: s-peep ; @@true
s-peep : $(md_file) genpeep $(srcdir)/move-if-change
d1486 1
a1486 1
	touch s-peep
d1492 2
a1493 2
insn-attr.h: s-attr ; @@true
s-attr : $(md_file) genattr $(srcdir)/move-if-change
d1496 1
a1496 1
	touch s-attr
d1498 2
a1499 2
insn-attrtab.c: s-attrtab ; @@true
s-attrtab : $(md_file) genattrtab $(srcdir)/move-if-change
d1508 1
a1508 1
	touch s-attrtab
d1515 2
a1516 2
insn-output.c: s-output ; @@true
s-output : $(md_file) genoutput $(srcdir)/move-if-change
d1519 1
a1519 1
	touch s-output
d1694 2
a1695 2
bc-arity.h: s-bcarity ; @@true
s-bcarity : $(srcdir)/bytecode.def bi-arity $(srcdir)/move-if-change
d1698 1
a1698 1
	touch s-bcarity
d1700 2
a1701 2
bc-opcode.h: s-bcopcode ; @@true
s-bcopcode : $(srcdir)/bytecode.def bi-opcode $(srcdir)/move-if-change
d1704 1
a1704 1
	touch s-bcopcode
d1706 2
a1707 2
bc-opname.h: s-bcopname ; @@true
s-bcopname : $(srcdir)/bytecode.def bi-opname $(srcdir)/move-if-change
d1710 1
a1710 1
	touch s-bcopname
d1738 2
d1784 1
a1784 1
protoize.o: s-proto ; @@true
d1791 1
a1791 1
unprotoize.o:	s-proto ; @@true
d1793 1
a1793 1
s-proto: protoize.c getopt.h $(CONFIG_H)
d1811 1
a1811 1
	touch s-proto
d1859 1
a1859 1
# s-* so that mostlyclean does not force the include directory to
d2035 8
a2042 4
# Delete other built files.
	-rm -f t-float.h-cross xsys-protos.hT fp-bit.c dp-bit.c
# Delete the stamp and temporary files.
	-rm -f s-* tmp-* stamp-* stmp-*
d2080 2
a2081 1
	-rm -rf include
d2390 2
a2391 2
	mkdir tmp-tags;							\
	mv -f c-parse.[ch] cexp.c =*.[chy] tmp-tags;			\
d2393 10
a2402 2
	mv tmp-tags/* .;						\
	rmdir tmp-tags
d2404 2
a2405 4
# Create the distribution tar.gz file.
dist: tmp-gcc.xtar
	gzip --best < tmp-gcc.xtar > tmp-gcc.xtar.gz
	mv tmp-gcc.xtar.gz gcc-$(version).tar.gz
d2407 2
a2408 1
tmp-gcc.xtar: distdir
d2410 1
a2410 4
	tar -chf tmp-gcc.xtar gcc-$(version)

distdir-cvs: force
	if [ -d $(srcdir)/CVS ]; then cvs -r update; fi
d2415 1
a2415 2
  $(srcdir)/c-parse.c $(srcdir)/cexp.c $(srcdir)/config.in \
  $(srcdir)/bi-parser.h $(srcdir)/bi-parser.c $(srcdir)/version.c TAGS
d2437 1
a2437 1
	  if test -d $$file && test "$$file" != RCS && test "$$file" != CVS; then \
d2463 1
a2463 1
	cd gcc-$(version); make extraclean VERSION_DEP=
d2465 1
a2465 1
distdir: distdir-cvs distdir-start lang.distdir distdir-finish
d2472 2
a2473 2
	  -x cexp.c -x bi-parser.c -x bi-parser.h -x TAGS -x INSTALL \
	  -x configure -x config.in \
d2477 1
a2477 1
	  gcc-$(oldversion) gcc-$(version) > gcc-$(oldversion)-$(version).diff
@

