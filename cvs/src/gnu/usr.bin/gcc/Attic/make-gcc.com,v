head	1.3;
access;
symbols
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	FSF_2_8_1:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.3
date	99.05.26.16.22.30;	author espie;	state dead;
branches;
next	1.2;

1.2
date	98.03.03.21.18.59;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.03.05;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.03.05;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.12.55;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@So long, and thanks for all the bugs.
@
text
@$! make-gcc.com -- VMS build procedure for GNU CC.
$!
$!	Usage:
$!	  $ @@make-gcc.com [host-compiler] [component list]
$!
$!	where [host-compiler] is one of "GNUC", "VAXC", "DECC";
$!	default when none specified is "GNUC",
$!	and where [component list] is space separated list beginning
$!	with "CC1" and optionally followed by "CC1PLUS"; default if
$!	nothing is specified is "CC1" (the C compiler); choosing
$!	"CC1PLUS" (the C++ compiler) without also specifying "CC1"
$!	will not work.	(See make-cc1.com for other potential component
$!	values; but unless you're developing or debugging the compiler
$!	suite itself, the two above are the only ones of interest.)
$!
$!	  For a "stage 2" or subsequent build, always specify GNUC as
$!	the host compiler.
$!
$!	Note:
$!	  Even though it is possible to build with VAX C or DEC C,
$!	a prior version of the gcc-vms binary distribution is still
$!	required to be able to use the newly built GNU CC compiler(s),
$!	because the gcc source distribution does not supply the driver
$!	program which the DCL command "GCC" implements or the C header
$!	files and gcclib support library.
$!
$
$!
$! Change working directory to the location of this procedure.
$!
$ flnm = f$enviroment("PROCEDURE")	!get current procedure name
$ set default 'f$parse(flnm,,,"DEVICE")''f$parse(flnm,,,"DIRECTORY")'
$
$!
$! First, we build the preprocessor.
$!
$ @@make-cccp.com 'p1' 'p2'
$!
$! To install it, copy the resulting GCC-CPP.EXE to the GNU_CC:[000000]
$! directory.
$!
$
$!
$! Now we build the C compiler.  To build the C++ compiler too, use
$! $ @@make-gcc GNUC cc1 cc1plus
$! when invoking this command procedure.  Note that you should not
$! do this for a "stage 1" build.
$!
$ @@make-cc1.com 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8'
$!
$! To install it (them), copy the resulting GCC-CC1.EXE (and GCC-CC1PLUS.EXE)
$! to the GNU_CC:[000000] directory.
$!
$
$!
$! Now we build the `libgcc2' support library.	It will need to be merged
$! with the existing gcclib.olb library.
$!
$ @@make-l2.com 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8'
$!
$! To install, save a backup copy of GNU_CC:[000000]GCCLIB.OLB somewhere,
$! then update the original using the newly created LIBGCC2.OLB via
$! $ library/Obj libgcc2.olb /Extract=*/Output=libgcc2.obj
$! $ library/Obj gnu_cc:[000000]gcclib.olb libgcc2.obj /Replace
$!
$! Depending upon how old your present gcclib library is, you might have
$! to delete some modules, such as `eprintf' and `new', to avoid conflicting
$! symbols from obsolete routines.  After deleting any such modules, just
$! repeat the `library/replace' step.
$!
$ exit
@


1.2
log
@GCC 2.8.0 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
d3 2
a4 1
$!	Build GCC
d6 9
a14 3
$! Set the def dir to proper place for use in batch. Works for interactive too.
$flnm = f$enviroment("PROCEDURE")     ! get current procedure name
$set default 'f$parse(flnm,,,"DEVICE")''f$parse(flnm,,,"DIRECTORY")'
d16 2
d19 7
a25 1
$! First, build the preprocessor.
d27 1
a27 1
$ @@make-cccp
d29 1
a29 3
$! To build the GNU C++ compiler in addition to the GNU CC compiler, comment
$! out the `@@make-cc1' line, and uncomment the `@@make-cc1 cc1 cc1plus' line.
$! To also build Objective-C, add "cc1obj" to the list.
d31 3
a33 1
$! See the file make-cc1.com for a complete list of options.
d35 1
a35 2
$ @@make-cc1
$! @@make-cc1 cc1 cc1plus
d37 1
d39 2
a40 5
$! Now build the library routines that are required.  These will be placed in
$! libgcc2.olb.  To install, extract all of the modules from libgcc2.olb and
$! add them to gnu_cc:[000000]gcclib.olb.  You may have to delete the eprintf
$! and new modules from the gnu_cc:[000000]gcclib.olb, since libgcc2 supplies
$! these same routines with different module names.
d42 1
a42 1
$! Now build gcclib2.olb
d44 4
a47 1
$ @@make-l2
d49 23
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@a0 1
$! make-gcc.com -- VMS build procedure for GNU CC.
d2 1
a2 2
$!	Usage:
$!	  $ @@make-gcc.com [host-compiler] [component list]
d4 3
a6 9
$!	where [host-compiler] is one of "GNUC", "VAXC", "DECC";
$!	default when none specified is "GNUC",
$!	and where [component list] is space separated list beginning
$!	with "CC1" and optionally followed by "CC1PLUS"; default if
$!	nothing is specified is "CC1" (the C compiler); choosing
$!	"CC1PLUS" (the C++ compiler) without also specifying "CC1"
$!	will not work.	(See make-cc1.com for other potential component
$!	values; but unless you're developing or debugging the compiler
$!	suite itself, the two above are the only ones of interest.)
a7 2
$!	  For a "stage 2" or subsequent build, always specify GNUC as
$!	the host compiler.
d9 1
a9 7
$!	Note:
$!	  Even though it is possible to build with VAX C or DEC C,
$!	a prior version of the gcc-vms binary distribution is still
$!	required to be able to use the newly built GNU CC compiler(s),
$!	because the gcc source distribution does not supply the driver
$!	program which the DCL command "GCC" implements or the C header
$!	files and gcclib support library.
d11 1
a11 1
$
d13 3
a15 1
$! Change working directory to the location of this procedure.
d17 1
a17 3
$ flnm = f$enviroment("PROCEDURE")	!get current procedure name
$ set default 'f$parse(flnm,,,"DEVICE")''f$parse(flnm,,,"DIRECTORY")'
$
d19 2
a20 1
$! First, we build the preprocessor.
a21 1
$ @@make-cccp.com 'p1' 'p2'
d23 5
a27 2
$! To install it, copy the resulting GCC-CPP.EXE to the GNU_CC:[000000]
$! directory.
d29 1
a29 1
$
d31 1
a31 4
$! Now we build the C compiler.  To build the C++ compiler too, use
$! $ @@make-gcc GNUC cc1 cc1plus
$! when invoking this command procedure.  Note that you should not
$! do this for a "stage 1" build.
a32 23
$ @@make-cc1.com 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8'
$!
$! To install it (them), copy the resulting GCC-CC1.EXE (and GCC-CC1PLUS.EXE)
$! to the GNU_CC:[000000] directory.
$!
$
$!
$! Now we build the `libgcc2' support library.	It will need to be merged
$! with the existing gcclib.olb library.
$!
$ @@make-l2.com 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8'
$!
$! To install, save a backup copy of GNU_CC:[000000]GCCLIB.OLB somewhere,
$! then update the original using the newly created LIBGCC2.OLB via
$! $ library/Obj libgcc2.olb /Extract=*/Output=libgcc2.obj
$! $ library/Obj gnu_cc:[000000]gcclib.olb libgcc2.obj /Replace
$!
$! Depending upon how old your present gcclib library is, you might have
$! to delete some modules, such as `eprintf' and `new', to avoid conflicting
$! symbols from obsolete routines.  After deleting any such modules, just
$! repeat the `library/replace' step.
$!
$ exit
@

