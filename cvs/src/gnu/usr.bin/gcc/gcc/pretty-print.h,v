head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.54
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.23.42;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.23.42;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Various declarations for language-independent pretty-print subroutines.
   Copyright (C) 2002 Free Software Foundation, Inc.
   Contributed by Gabriel Dos Reis <gdr@@integrable-solutions.net>

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */

#ifndef GCC_PRETTY_PRINT_H
#define GCC_PRETTY_PRINT_H

#include "diagnostic.h"

/* The type of pretty-printer flags passed to clients.  */
typedef unsigned int pp_flags;

typedef enum
{
  pp_none, pp_before, pp_after
} pp_padding;

struct pretty_print_info
{
  /* Where we print external representation of ENTITY.  */
  output_buffer *buffer;
  pp_flags flags;
  /* Where to put whitespace around the entity being formatted.  */
  pp_padding padding;
};

#define pp_left_paren(PPI)      output_add_character (pp_buffer (PPI), '(')
#define pp_right_paren(PPI)     output_add_character (pp_buffer (PPI), ')')
#define pp_left_bracket(PPI)    output_add_character (pp_buffer (PPI), '[')
#define pp_right_bracket(PPI)   output_add_character (pp_buffer (PPI), ']')
#define pp_left_brace(PPI)      output_add_character (pp_buffer (PPI), '{')
#define pp_right_brace(PPI)     output_add_character (pp_buffer (PPI), '}')
#define pp_semicolon(PPI)       output_add_character (pp_buffer (PPI), ';')
#define pp_comma(PPI)           output_add_string (pp_buffer (PPI), ", ")
#define pp_dot(PPI)             output_add_character (pp_buffer (PPI), '.')
#define pp_colon(PPI)           output_add_character (pp_buffer (PPI), ':')
#define pp_colon_colon(PPI)     output_add_string (pp_buffer (PPI), "::")
#define pp_arrow(PPI)           output_add_string (pp_buffer (PPI), "->")
#define pp_equal(PPI)           output_add_character (pp_buffer (PPI), '=')
#define pp_question(PPI)        output_add_character (pp_buffer (PPI), '?')
#define pp_bar(PPI)             output_add_character (pp_buffer (PPI), '|')
#define pp_carret(PPI)          output_add_character (pp_buffer (PPI), '^')
#define pp_ampersand(PPI)       output_add_character (pp_buffer (PPI), '&')
#define pp_less(PPI)            output_add_character (pp_buffer (PPI), '<')
#define pp_greater(PPI)         output_add_character (pp_buffer (PPI), '>')
#define pp_plus(PPI)            output_add_character (pp_buffer (PPI), '+')
#define pp_minus(PPI)           output_add_character (pp_buffer (PPI), '-')
#define pp_star(PPI)            output_add_character (pp_buffer (PPI), '*')
#define pp_slash(PPI)           output_add_character (pp_buffer (PPI), '/')
#define pp_modulo(PPI)          output_add_character (pp_buffer (PPI), '%')
#define pp_exclamation(PPI)     output_add_character (pp_buffer (PPI), '!')
#define pp_complement(PPI)      output_add_character (pp_buffer (PPI), '~')
#define pp_quote(PPI)           output_add_character (pp_buffer (PPI), '\'')
#define pp_backquote(PPI)       output_add_character (pp_buffer (PPI), '`')
#define pp_doublequote(PPI)     output_add_character (pp_buffer (PPI), '"')
#define pp_newline(PPI)         output_add_newline (pp_buffer (PPI))
#define pp_character(PPI, C)    output_add_character (pp_buffer (PPI), C)
#define pp_whitespace(PPI)      output_add_space (pp_buffer (PPI))
#define pp_indentation(PPI)     output_indentation (pp_buffer (PPI))
#define pp_newline_and_indent(PPI, N) \
  do {                                \
    pp_indentation (PPI) += N;        \
    pp_newline (PPI);                 \
  } while (0)
#define pp_separate_with(PPI, C) \
   do {                          \
     pp_character (PPI, C);      \
     pp_whitespace (PPI);        \
   } while (0)
#define pp_format_scalar(PPI, F, S) \
   output_formatted_scalar (pp_buffer (PPI), F, S)
#define pp_wide_integer(PPI, I) \
   pp_format_scalar (PPI, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) I)
#define pp_pointer(PPI, P) pp_format_scalar (PPI, "%p", p)

#define pp_identifier(PPI, ID)  output_add_string (pp_buffer (PPI), ID)
#define pp_tree_identifier(PPI, T) pp_identifier(PPI, IDENTIFIER_POINTER (T))

#define pp_unsupported_tree(PPI, T) \
  output_verbatim (pp_buffer(PPI), "#`%s' not supported by %s#",\
                   tree_code_name[(int) TREE_CODE (T)], __FUNCTION__)

#endif /* GCC_PRETTY_PRINT_H */
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
