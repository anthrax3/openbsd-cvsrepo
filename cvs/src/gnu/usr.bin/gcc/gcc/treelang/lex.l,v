head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.38.06;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.38.06;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@%{ /* -*- c -*- = mode for emacs editor
/* 

   TREELANG lexical analysis

   ---------------------------------------------------------------------

   Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
   
   This program is free software; you can redistribute it and/or modify it 
   under the terms of the GNU General Public License as published by the
   Free Software Foundation; either version 2, or (at your option) any
   later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
   In other words, you are welcome to use, share and improve this program.
   You are forbidden to forbid anyone else to use, share and improve
   what you give them.   Help stamp out software-hoarding!  
   
   ---------------------------------------------------------------------
   
   Written by Tim Josling 1999-2001, based in part on other parts of
   the GCC compiler. 
 
*/

#include <stdio.h>
#include <memory.h>
#include "ansidecl.h"
#include "config.h"
#include "system.h"

/* Avoid poisoned malloc problem.  */
#undef IN_GCC

#include "config.h"
#include "diagnostic.h"
#include "tree.h"

/* Token defs.  */
#include "treelang.h"
#include "parse.h"

extern int option_lexer_trace;

int yylex (void);
void update_yylval (int a); 

static int next_tree_lineno=1;
static int next_tree_charno=1;
 
static void update_lineno_charno (void);
static void dump_lex_value (int lexret);
 
#define SAVE_RETURN(a) {update_yylval (a); if (option_lexer_trace)\
   {fprintf (stderr, "\nlexer returning"); dump_lex_value (a);} return a;}
#define NOT_RETURN(a) {update_yylval (a); if (option_lexer_trace)\
   {fprintf (stderr, "\nlexer swallowing"); dump_lex_value (a);}}

%}

%option nostack
%option nounput
%option noyywrap
%option pointer
%option nodefault

%%

 { 
   /* Should really allocate only what we need. lll;.  */
   yylval = my_malloc (sizeof (struct prod_token_parm_item));
   ((struct prod_token_parm_item *)yylval)->tp.tok.lineno = next_tree_lineno;
   ((struct prod_token_parm_item *)yylval)->tp.tok.charno = next_tree_charno;
 }

[ \n]+ {
  update_lineno_charno ();
    NOT_RETURN (WHITESPACE);
}
  
"//".*  {
  /* Comment.  */
    update_lineno_charno ();
    NOT_RETURN (COMMENT);
}
   
"{" {
  update_lineno_charno ();
  SAVE_RETURN (LEFT_BRACE);
}
  
"}" {
  update_lineno_charno ();
  SAVE_RETURN (RIGHT_BRACE);
}
  
"(" {
  update_lineno_charno ();
  SAVE_RETURN (LEFT_PARENTHESIS);
}
  
")" {
  update_lineno_charno ();
  SAVE_RETURN (RIGHT_PARENTHESIS);
}
  
"," {
  update_lineno_charno ();
  SAVE_RETURN (COMMA);
}
  
";" {
  update_lineno_charno ();
  SAVE_RETURN (SEMICOLON);
}
  
"+" {
  update_lineno_charno ();
  SAVE_RETURN (PLUS);
}
  
"-" {
  update_lineno_charno ();
  SAVE_RETURN (MINUS);
}
  
"=" {
  update_lineno_charno ();
  SAVE_RETURN (ASSIGN);
}
  
"==" {
  update_lineno_charno ();
  SAVE_RETURN (EQUALS);
}
  
[+-]?[0-9]+ {
  update_lineno_charno ();
  SAVE_RETURN (INTEGER);
}
  
"external_reference" {
  update_lineno_charno ();
  SAVE_RETURN (EXTERNAL_REFERENCE);
}
  
"external_definition" {
  update_lineno_charno ();
  SAVE_RETURN (EXTERNAL_DEFINITION);
}
  
"static" {
  update_lineno_charno ();
  SAVE_RETURN (STATIC);
}
  
"automatic" {
  update_lineno_charno ();
  SAVE_RETURN (AUTOMATIC);
}
  
"int" {
  update_lineno_charno ();
  SAVE_RETURN (INT);
}
  
"char" {
  update_lineno_charno ();
  SAVE_RETURN (CHAR);
}
  
"void" {
  update_lineno_charno ();
  SAVE_RETURN (VOID);
}
  
"unsigned" {
  update_lineno_charno ();
  SAVE_RETURN (UNSIGNED);
}
  
"return" {
  update_lineno_charno ();
  SAVE_RETURN (RETURN);
}
  
"if" {
  update_lineno_charno ();
  SAVE_RETURN (IF);
}
  
"else" {
  update_lineno_charno ();
  SAVE_RETURN (ELSE);
}
  
[A-Za-z_]+[A-Za-z_0-9]* {
  update_lineno_charno ();
  update_yylval (NAME); 
  if (option_lexer_trace) 
    {
      fprintf (stderr, "\nlexer returning"); 
      dump_lex_value (NAME);
    } 
  return NAME;
}
  
[^\n]  {
  update_lineno_charno ();
  fprintf (stderr, "%s:%i:%i: Unrecognized character %c\n", in_fname, 
           ((struct prod_token_parm_item *)yylval)->tp.tok.lineno, 
           ((struct prod_token_parm_item *)yylval)->tp.tok.charno, yytext[0]);
  errorcount++;
}

%%

/* 
   Update line number (1-) and character number (1-).  Call this
   before processing the token.  */

static void 
update_lineno_charno (void)
{
   /* Update the values we send to caller in case we sometimes don't
      tell them about all the 'tokens' eg comments etc.  */
   int yyl;
   ((struct prod_token_parm_item *)yylval)->tp.tok.lineno = next_tree_lineno;
   ((struct prod_token_parm_item *)yylval)->tp.tok.charno = next_tree_charno;
   for ( yyl = 0; yyl < yyleng; ++yyl ) 
      {
         if ( yytext[yyl] == '\n' ) 
            {
               ++next_tree_lineno;
               next_tree_charno = 1;
            } 
         else 
           next_tree_charno++;
      }
}

/* Fill in the fields of yylval - the value of the token.  The token
   type is A.  */
void 
update_yylval (int a)
{
  struct prod_token_parm_item * tok;
  tok=yylval;
  
  tok->category = token_category;
  tok->type = a;
  tok->tp.tok.length = yyleng;
  /* Have to copy yytext as it is just a ptr into the buffer at the
     moment.  */
  tok->tp.tok.chars = my_malloc (yyleng + 1);
  memcpy (tok->tp.tok.chars, yytext, yyleng);
}

/* Trace the value LEXRET and the position and token details being
   returned by the lexical analyser.  */

static void
dump_lex_value (int lexret) 
{
  int ix;
  fprintf (stderr, " %d l:%d c:%d ln:%d text=", lexret,
         ((struct prod_token_parm_item *) yylval)->tp.tok.lineno,
         ((struct prod_token_parm_item *) yylval)->tp.tok.charno,
         ((struct prod_token_parm_item *) yylval)->tp.tok.length);
  for (ix = 0; ix < yyleng; ix++) 
    {
      fprintf (stderr, "%c", yytext[ix]);
    }
  fprintf (stderr, " in hex:");
  for (ix = 0; ix < yyleng; ix++) 
    {
      fprintf (stderr, " %2.2x", yytext[ix]);
    }
  fprintf (stderr, "\n");
}  

@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
