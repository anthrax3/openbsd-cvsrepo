head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.22
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.20
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.16
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.12
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.14
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.6
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.10
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.22
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.20
	OPENBSD_5_0:1.9.0.18
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.16
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.14
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.10
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2012.11.20.21.29.36;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.16.01.09.43;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.28.03.30.31;	author pedro;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.13.17.51.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.13.00.20.28;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.23.14.28.50;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.30.20.27.34;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.13.00.12.36;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.04.17.30.15;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.29.13.20.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Make the mips and powerpc optimizer bug workarounds permanent (i.e. apply
them to all platforms). Both of them had been added very late in a release
cycle, which caused us to prefer workarounds with minimal side effects.

Since the issue they are avoiding may happen on other platforms, there is no
harm in making sure no other platform gets bitten by them. And at the moment
no supported platform runs gcc 3, so this does not cause any regression.
@
text
@/* Configuration file for an rs6000 OpenBSD target.
   Copyright (C) 1999 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* XXX need to check ASM_WEAKEN_LABEL/ASM_GLOBALIZE_LABEL. */

/* Run-time target specifications. */
#undef TARGET_OS_CPP_BUILTINS	/* FIXME: sysv4.h should not define this! */
#define TARGET_OS_CPP_BUILTINS()		\
  do						\
    {						\
	OPENBSD_OS_CPP_BUILTINS_ELF();		\
	builtin_define ("__PPC");		\
	builtin_define ("__PPC__");		\
	builtin_define ("__powerpc");		\
	builtin_define ("__powerpc__");		\
	builtin_assert ("cpu=powerpc");		\
	builtin_assert ("machine=powerpc");	\
    }						\
  while (0)

/* Override the default from rs6000.h to avoid conflicts with macros
   defined in OpenBSD header files.  */

#undef RS6000_CPU_CPP_ENDIAN_BUILTINS
#define RS6000_CPU_CPP_ENDIAN_BUILTINS()	\
  do						\
    {						\
      if (BYTES_BIG_ENDIAN)			\
	{					\
	  builtin_define ("__BIG_ENDIAN__");	\
	  builtin_assert ("machine=bigendian");	\
	}					\
      else					\
	{					\
	  builtin_define ("__LITTLE_ENDIAN__");	\
	  builtin_assert ("machine=littleendian"); \
	}					\
    }						\
  while (0)

#undef	CPP_OS_DEFAULT_SPEC
#define CPP_OS_DEFAULT_SPEC "%(cpp_os_openbsd)"

#undef LINKER_NAME 
#define LINKER_NAME "ld"

#undef LINK_SPEC
#define LINK_SPEC "%{shared:-shared} \
  %{!shared: \
    %{!static: \
      %{rdynamic:-export-dynamic} \
      %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}} \
    %{static:-static}}"

#undef	LIB_DEFAULT_SPEC
#define LIB_DEFAULT_SPEC "%(lib_openbsd)"

#undef	STARTFILE_DEFAULT_SPEC
#define STARTFILE_DEFAULT_SPEC "%(startfile_openbsd)"

#undef	ENDFILE_DEFAULT_SPEC
#define ENDFILE_DEFAULT_SPEC "%(endfile_openbsd)"

#undef	LINK_START_DEFAULT_SPEC
#define LINK_START_DEFAULT_SPEC "%(link_start_openbsd)"

#undef	LINK_OS_DEFAULT_SPEC
#define LINK_OS_DEFAULT_SPEC "%(link_os_openbsd)"

#undef TARGET_VERSION
#define TARGET_VERSION fprintf (stderr, " (PowerPC OpenBSD)");

/* Default ABI to use */
#undef RS6000_ABI_NAME 
#define RS6000_ABI_NAME "openbsd"

/* Define this macro as a C expression for the initializer of an
   array of string to tell the driver program which options are
   defaults for this target and thus do not need to be handled
   specially when using `MULTILIB_OPTIONS'.

   Do not define this macro if `MULTILIB_OPTIONS' is not defined in
   the target makefile fragment or if none of the options listed in
   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */

#undef	MULTILIB_DEFAULTS
#define	MULTILIB_DEFAULTS { "mbig", "mcall-openbsd" }

/* collect2 support (Macros for initialization). */


/* Don't tell collect2 we use COFF as we don't have (yet ?) a dynamic ld
   library with the proper functions to handle this -> collect2 will
   default to using nm. */
#undef OBJECT_FORMAT_COFF

/* This must agree with <machine/_types.h> */
#undef SIZE_TYPE
#define SIZE_TYPE "long unsigned int"

#undef PTRDIFF_TYPE
#define PTRDIFF_TYPE "long int"

#undef INTMAX_TYPE
#define INTMAX_TYPE "long long int"

#undef UINTMAX_TYPE
#define UINTMAX_TYPE "long long unsigned int"

#undef WCHAR_TYPE
#define WCHAR_TYPE	"int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE	32

#undef TRAMPOLINE_SIZE
#define TRAMPOLINE_SIZE 40

@


1.9
log
@INTMAX_TYPE and UINTMAX_TYPE are always in terms of long long on
OpenBSD, regardless of the size of a long.
OK kettenis@@ espie@@
@
text
@a113 3
/* Some code gets optimized incorrectly by move_movables() in loop.c */
#define	BROKEN_MOVE_MOVABLES_P

@


1.8
log
@Make stack executable when doing trampolines on macppc
Okay espie@@, kettenis@@
@
text
@d124 6
@


1.7
log
@Adapt to the machine/_types.h changes; size_t and ptrdiff_t are now
defined in terms of long, not int on all architectures.
@
text
@d130 3
@


1.6
log
@Don't define _BIG_ENDIAN on macpcc, only __BIG_ENDIAN__.
Adapted from netbsd.h.  OK drahn@@ deraadt@@
@
text
@d117 7
a123 1
/* some stuff that must agree with ansi.h */
@


1.5
log
@fix WCHAR_TYPE*
okay drahn@@, tested alek@@
@
text
@d38 20
@


1.4
log
@gcc 3.3.5 loop optimization will produce incorrect output on powerpc; a
victim of this being awk(1), which in turn caused some manual pages to be
generated without dates at the bottom.

Since this is fixed by the (invasive) loop optimization rewrite done for
3.4, we can not expect a 3.3 fix anytime soon, and the fix is non-trivial,
so disable the failing section of code on powerpc only.

This has the net effect of magically turning -O1 and -O2 into -Os as far as
-floop-optimize is concerned.

Problem spotted by deraadt@@, researched by otto@@ and yours truly; this
workaround agreed by many.
@
text
@d96 8
@


1.3
log
@- move a few common pieces into OPENBSD_OS_CPP_BUILTINS_COMMON
- add __LP64__ to OPENBSD_OS_CPP_BUILTINS_LP64
- add __sparc to TARGET_OS_CPP_BUILTINS for sparc64
- add __PPC, __PPC__ and __powerpc to TARGET_OS_CPP_BUILTINS for powerpc

ok espie@@
@
text
@d94 2
a95 1

@


1.2
log
@OpenBSD/powerpc is a __unix__ system.
@
text
@d28 7
a34 5
      OPENBSD_OS_CPP_BUILTINS_ELF();		\
      builtin_define ("__powerpc__");		\
      builtin_define ("__unix__");		\
      builtin_assert ("cpu=powerpc");		\
      builtin_assert ("machine=powerpc");	\
@


1.1
log
@Add OpenBSD specific configurations.
@
text
@d30 1
@

