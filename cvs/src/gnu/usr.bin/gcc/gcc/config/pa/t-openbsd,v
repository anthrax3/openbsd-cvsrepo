head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.50
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.46
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.48
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.40
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.44
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.42
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.38
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.36
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.34
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.32
	OPENBSD_5_0:1.2.0.30
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.28
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.26
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.22
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.24
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.20
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.18
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.16
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2004.05.26.21.10.55;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.02.23.59.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@neede for dhared libs
@
text
@#Plug millicode routines into libgcc.a  We want these on both native and
#cross compiles.  We use the "64-bit" routines because the "32-bit" code
#is broken for certain corner cases.

LIB1ASMFUNCS = _divI _divU _remI _remU _div_const _mulI _dyncall
LIB1ASMSRC = pa/milli64.S

# Compile libgcc2.a as PIC.
TARGET_LIBGCC2_CFLAGS = -fPIC -DELF=1 -DLINUX

LIB2FUNCS_EXTRA=fptr.c

fptr.c: $(srcdir)/config/pa/fptr.c
	rm -f fptr.c
	cp $(srcdir)/config/pa/fptr.c .

@


1.1
log
@hppa-openbsd configs; espie@@ ok
@
text
@d9 7
a15 1
TARGET_LIBGCC2_CFLAGS = -DELF=1 -DLINUX
a16 7
# Don't build a shared libgcc_s.so.  Our libgcc contains millicode, and
# the ABI (linker and dynamic linker really) does not allow millicode
# to be exported from shared libraries.  Consequently, to successfully
# link against libgcc_s.so it is necessary to link against _both_
# libgcc_s.so and libgcc.a.  This is a pain.  It's easier just to disable
# the shared libgcc.
SHLIB_LINK =
@

