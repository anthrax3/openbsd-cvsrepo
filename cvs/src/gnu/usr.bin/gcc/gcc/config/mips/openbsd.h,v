head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.18
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.16
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.12
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.14
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.6.0.10
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.18
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.16
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.11.20.21.29.36;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.18.19.39.48;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.21.20.10.31;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.06.19.01.56;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.11.23.48.19;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.06.09.01.06;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.29.12.34.05;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.34.05;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Make the mips and powerpc optimizer bug workarounds permanent (i.e. apply
them to all platforms). Both of them had been added very late in a release
cycle, which caused us to prefer workarounds with minimal side effects.

Since the issue they are avoiding may happen on other platforms, there is no
harm in making sure no other platform gets bitten by them. And at the moment
no supported platform runs gcc 3, so this does not cause any regression.
@
text
@/* Configuration for  a Mips ABI32 OpenBSD target.
   Copyright (C) 1999 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* Definitions needed for OpenBSD, to avoid picking mips 'defaults'.  */

/* GAS must know this.  */
#define SUBTARGET_ASM_SPEC "%{fPIC|fPIE:-KPIC} %|"

/* CPP specific OpenBSD specs.  */
#define SUBTARGET_CPP_SPEC OBSD_CPP_SPEC

/* Needed for ELF (inspired by netbsd-elf).  */
#undef PREFERRED_DEBUGGING_TYPE
#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG
#define LOCAL_LABEL_PREFIX	"."

#define ASM_FINAL_SPEC ""
#include <mips/mips.h>

#undef MDEBUG_ASM_SPEC
#define MDEBUG_ASM_SPEC ""

#include <mips/elf.h>
#undef STARTFILE_SPEC
#define STARTFILE_SPEC "\
	%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \
	crtbegin%O%s} %{shared:crtbeginS%O%s}"
#undef ENDFILE_SPEC
#define ENDFILE_SPEC "%{!shared:crtend%O%s} %{shared:crtendS%O%s}"
#undef LIB_SPEC
#define LIB_SPEC OBSD_LIB_SPEC

/* Get generic OpenBSD definitions.  */
#define OBSD_HAS_DECLARE_FUNCTION_NAME
#define OBSD_HAS_DECLARE_OBJECT
#define OBSD_HAS_CORRECT_SPECS
#include <openbsd.h>

#if defined(HAVE_LD_EH_FRAME_HDR)
#define LINK_EH_SPEC "%{!static:--eh-frame-hdr} "
#endif

/* mips assembler uses .set for arcane purposes.  __attribute__((alias))
   and friends won't work until we get recent binutils with .weakext
	support.  */
#undef SET_ASM_OP

#undef TARGET_OS_CPP_BUILTINS
#define TARGET_OS_CPP_BUILTINS()			\
    do {						\
	OPENBSD_OS_CPP_BUILTINS_ELF();			\
	builtin_define ("__NO_LEADING_UNDERSCORES__");	\
	builtin_define ("__GP_SUPPORT__");		\
	builtin_assert ("machine=mips");		\
	if (TARGET_LONG64)				\
		builtin_define ("__LONG64");		\
	if (TARGET_64BIT)				\
		OPENBSD_OS_CPP_BUILTINS_LP64();		\
	if (TARGET_ABICALLS)				\
		builtin_define ("__ABICALLS__");	\
	if (mips_abi == ABI_EABI)			\
		builtin_define ("__mips_eabi");		\
	else if (mips_abi == ABI_N32)			\
		builtin_define ("__mips_n32");		\
	else if (mips_abi == ABI_64)			\
		builtin_define ("__mips_n64");		\
	else if (mips_abi == ABI_O64)			\
		builtin_define ("__mips_o64");		\
	/* Needed to make libgcc to build properly */	\
	if (mips_abi == ABI_N32)			\
	{						\
		builtin_define ("_ABIN32=2");		\
		builtin_define ("_MIPS_SIM=_ABIN32");	\
		builtin_define ("_MIPS_SZLONG=32");	\
		builtin_define ("_MIPS_SZPTR=32");	\
	}						\
	else if (mips_abi == ABI_64)			\
	{						\
		builtin_define ("_ABI64=3");		\
		builtin_define ("_MIPS_SIM=_ABI64");	\
		builtin_define ("_MIPS_SZLONG=64");	\
		builtin_define ("_MIPS_SZPTR=64");	\
	}						\
	else						\
	{						\
		builtin_define ("_MIPS_SIM=_MIPS_SIM_ABI32");	\
		builtin_define ("_MIPS_SZLONG=32");	\
		builtin_define ("_MIPS_SZPTR=32");	\
	}						\
} while (0)


/* Layout of source language data types.  */
#undef INTMAX_TYPE
#define INTMAX_TYPE "long long int"

#undef UINTMAX_TYPE
#define UINTMAX_TYPE "long long unsigned int"

#undef WCHAR_TYPE
#define WCHAR_TYPE "int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE 32

/* Controlling the compilation driver.  */

/* LINK_SPEC appropriate for OpenBSD:  support for GCC options
   -static, -assert, and -nostdlib. Dynamic loader control.  */
#undef LINK_SPEC
#define LINK_SPEC \
  "%(endian_spec) \
   %{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips64} \
   %{bestGnum} %{shared} %{non_shared} \
   %{call_shared} %{no_archive} %{exact_version} \
   %{!shared: %{!non_shared: %{!call_shared: -non_shared}}} \
   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so} \
   %{!nostdlib:%{!r*:%{!e*:-e __start}}} -dc -dp \
   %{static:-Bstatic} %{!static:-Bdynamic} %{assert*}"

/* -G is incompatible with -KPIC which is the default, so only allow objects
   in the small data section if the user explicitly asks for it.  */
#undef MIPS_DEFAULT_GVALUE
#define MIPS_DEFAULT_GVALUE 0
@


1.6
log
@Make C++ exception handling work on mips64.

ok miod@@
@
text
@a141 3

/* Prevent too much recursion in simplify_shift_const().  */
#define	BROKEN_SIMPLIFY_SHIFT_CONST_P
@


1.5
log
@Backport a small fragment of a gcc 3.4 fix preventing too much recursion in
simplify_shift_const(), and only do this on mips64 platforms, because we are
too late in the release cycle.
This change has the nice side effect of preventing a wrong overoptimistic
optimization on mips64, when masking bit 31 of a long; which in turns causes
python to misbehave.

Help and ok otto@@
@
text
@d56 4
@


1.4
log
@INTMAX_TYPE / UINTMAX_TYPE are always in terms of long long.
reported by sturm@@.  fixes libarchive on mips64.
ok millert@@, miod@@.  tested by jasper@@.
@
text
@d139 2
a140 1

@


1.3
log
@Add support for position independent executables. This adds compile flags
-fpie & -fPIE which are similar to -fpic & -fPIC except that the resulting
objects can not be used in shared libraries due to an additional
optimization for pie. This also adds the -pie link flag which produces a
pie executable given pic or pie objects.  Combining -pie with -static is
currently disabled. The only gcc3 arch that doesn't support pie at moment
is arm due to binutils relocation bugs.

ok kettenis@@
@
text
@d107 5
@


1.2
log
@Add t-openbsd64 to handle some libgcc.a build issues (needed functions)
Change configuration to mips64 with default ABI = N64 (enhanced 64 bit ABI)
we also support the older O32 and N32 abi for building boot stuff.
@
text
@d24 1
a24 1
#define SUBTARGET_ASM_SPEC "%{fPIC:-KPIC} %|"
@


1.1
log
@Initial revision
@
text
@d30 1
d34 2
a35 3
/* The profiling lib spec here is not really correct but we leave
   it as it is until we have some kind of profiling working.  */
#define LIB_SPEC OBSD_LIB_SPEC
d37 2
a38 5
/* By default, OpenBSD mips is little endian.  This is important to set
   here as mips/mips.h defaults to big endian.  */
#ifndef TARGET_ENDIAN_DEFAULT
#define TARGET_ENDIAN_DEFAULT 0
#endif
d40 9
a48 1
#include <mips/mips.h>
d61 1
d64 1
a64 2
	builtin_define ("__unix__");			\
	builtin_define ("__SYSTYPE_BSD__");		\
d67 36
a102 4
	builtin_define ("__OpenBSD__");			\
	builtin_assert ("system=unix");			\
	builtin_assert ("system=OpenBSD");		\
	builtin_assert ("machine=mips");			\
d105 1
a107 7
/* This must agree with <machine/ansi.h>.  */
#undef SIZE_TYPE
#define SIZE_TYPE "unsigned int"

#undef PTRDIFF_TYPE
#define PTRDIFF_TYPE "int"

d120 2
a121 1
  "%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} \
a134 26
/* Since gas and gld are standard on OpenBSD, we don't need these.  */
#undef ASM_FINAL_SPEC
#undef STARTFILE_SPEC

/* Switch into a generic section.  */
#undef TARGET_ASM_NAMED_SECTION
#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section

/* Not having TARGET_GAS here seems a mistake.  If we actually need to
   be prepared for file switching, then we need a custom
   TARGET_ASM_NAMED_SECTION too.  */

#undef TEXT_SECTION
#define TEXT_SECTION()				\
do {						\
  if (TARGET_FILE_SWITCHING)			\
    abort ();					\
  fputs (TEXT_SECTION_ASM_OP, asm_out_file);	\
  fputc ('\n', asm_out_file);			\
} while (0)

/* collect2 support (Macros for initialization).  */

/* Mips default configuration is COFF-only, and confuses collect2.  */
#undef OBJECT_FORMAT_COFF
#undef EXTENDED_COFF
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
