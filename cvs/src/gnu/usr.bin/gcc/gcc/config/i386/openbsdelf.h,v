head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.38
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.34
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.36
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.28
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.32
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.30
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.26
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.24
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.22
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.20
	OPENBSD_5_0:1.7.0.18
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2007.06.16.01.09.43;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.13.17.51.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.29.18.36.28;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.24.10.30.36;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.16.01.03.50;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.13.00.12.36;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.29.13.20.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@INTMAX_TYPE and UINTMAX_TYPE are always in terms of long long on
OpenBSD, regardless of the size of a long.
OK kettenis@@ espie@@
@
text
@/* Configuration for an OpenBSD i386 target.
   
   Copyright (C) 1999 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* This gets defined in tm.h->linux.h->svr4.h, and keeps us from using
   libraries compiled with the native cc, so undef it. */
#undef NO_DOLLAR_IN_LABEL

/* Override the default comment-starter of "/".  */
#undef ASM_COMMENT_START
#define ASM_COMMENT_START "#"

#undef DBX_REGISTER_NUMBER
#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]

/* This goes away when the math-emulator is fixed */
#undef TARGET_DEFAULT
#define TARGET_DEFAULT \
  (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)

/* Run-time target specifications */

#define TARGET_OS_CPP_BUILTINS()		\
  do						\
    {						\
    	OPENBSD_OS_CPP_BUILTINS_ELF();		\
    }						\
  while (0)

/* As an elf system, we need crtbegin/crtend stuff.  */
#undef STARTFILE_SPEC
#define STARTFILE_SPEC "\
	%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \
	crtbegin%O%s} %{shared:crtbeginS%O%s}"
#undef ENDFILE_SPEC
#define ENDFILE_SPEC "%{!shared:crtend%O%s} %{shared:crtendS%O%s}"

/* Layout of source language data types.  */

/* This must agree with <machine/_types.h> */
#undef SIZE_TYPE
#define SIZE_TYPE "long unsigned int"

#undef PTRDIFF_TYPE
#define PTRDIFF_TYPE "long int"

#undef INTMAX_TYPE
#define INTMAX_TYPE "long long int"

#undef UINTMAX_TYPE
#define UINTMAX_TYPE "long long unsigned int"

#undef WCHAR_TYPE
#define WCHAR_TYPE "int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE BITS_PER_WORD

/* Assembler format: overall framework.  */

#undef ASM_APP_ON
#define ASM_APP_ON "#APP\n"

#undef ASM_APP_OFF
#define ASM_APP_OFF "#NO_APP\n"

#undef SET_ASM_OP
#define SET_ASM_OP	"\t.set\t"

/* The following macros were originally stolen from i386v4.h.
   These have to be defined to get PIC code correct.  */

/* Assembler format: dispatch tables.  */

/* Assembler format: sections.  */

/* Stack & calling: aggregate returns.  */

/* Don't default to pcc-struct-return, because gcc is the only compiler, and
   we want to retain compatibility with older gcc versions.  */
#define DEFAULT_PCC_STRUCT_RETURN 0

/* Assembler format: alignment output.  */

#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN
#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP) \
  if ((LOG) != 0) {\
    if ((MAX_SKIP) == 0) fprintf ((FILE), "\t.p2align %d\n", (LOG)); \
    else fprintf ((FILE), "\t.p2align %d,,%d\n", (LOG), (MAX_SKIP)); \
  }
#endif

/* Stack & calling: profiling.  */

/* OpenBSD's profiler recovers all information from the stack pointer.
   The icky part is not here, but in machine/profile.h.  */
#undef FUNCTION_PROFILER
#define FUNCTION_PROFILER(FILE, LABELNO)  \
  fputs (flag_pic ? "\tcall __mcount@@PLT\n": "\tcall __mcount\n", FILE);

/* Assembler format: exception region output.  */

/* Assembler format: alignment output.  */

/* Note that we pick up ASM_OUTPUT_MAX_SKIP_ALIGN from i386/gas.h */

/* Note that we pick up ASM_OUTPUT_MI_THUNK from unix.h.  */

#undef LINK_SPEC
#define LINK_SPEC \
  "%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \
   %{shared:-shared} %{R*} \
   %{static:-Bstatic} \
   %{!static:-Bdynamic} \
   %{assert*} \
   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}"

#define OBSD_HAS_CORRECT_SPECS

/* pick up defines for mprotect (used in TRANSFER_FROM_TRANPOLINE) */
#include <sys/types.h>
#include <sys/mman.h>
@


1.6
log
@Adapt to the machine/_types.h changes; size_t and ptrdiff_t are now
defined in terms of long, not int on all architectures.
@
text
@d64 6
@


1.5
log
@Switch i386 over to DWARF-based exception handling.
ok deraadt@@
@
text
@d57 1
a57 1
/* This must agree with <machine/ansi.h> */
d59 1
a59 1
#define SIZE_TYPE "unsigned int"
d62 1
a62 1
#define PTRDIFF_TYPE "int"
@


1.4
log
@get rid of i386elf.h which is an embedded platform include.
Get the only define we want, namely the debugger registers.
with this, i386 emits dwarf2 by default. Considering how well stabs
are tested in recent gcc (not), this is a good thing.

Sleuthing work by kettenis@@ and me.

Tried out by lots of people, including me, naddy, pvalchev, kettenis,
henning, hshoexer...
@
text
@a113 3
/* our configuration still doesn't handle dwarf2 correctly */
#define DWARF2_UNWIND_INFO 0

@


1.3
log
@update comment to match reality better.
@
text
@d30 2
@


1.2
log
@- move a few common pieces into OPENBSD_OS_CPP_BUILTINS_COMMON
- add __LP64__ to OPENBSD_OS_CPP_BUILTINS_LP64
- add __sparc to TARGET_OS_CPP_BUILTINS for sparc64
- add __PPC, __PPC__ and __powerpc to TARGET_OS_CPP_BUILTINS for powerpc

ok espie@@
@
text
@d112 1
a112 3
/* All configurations that don't use elf must be explicit about not using
   dwarf unwind information. egcs doesn't try too hard to check internal
   configuration files...  */
@


1.1
log
@Add OpenBSD specific configurations.
@
text
@a41 2
	builtin_define ("__unix__");		\
	builtin_assert ("system=bsd");		\
@

