head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.26
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.24
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.20
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.16
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.18
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.10
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.14
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.12
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.8
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.10.21.10.17.08;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.02.04.12.50;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.20.20.25.33;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.09.23.08.35;	author merdely;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.16.01.09.43;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.18.19.34.59;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.29.00.34.05;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.13.17.51.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.13.00.12.36;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.29.13.20.58;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.29.12.31.24;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.31.24;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@change LINK_SPEC in such a way that -rdynamic will work
(passes -export-dynamic to ld(1))

ok drahn@@ miod@@
@
text
@/* Configuration file for an alpha OpenBSD target.
   Copyright (C) 1999 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* Controlling the compilation driver.  */

#undef TARGET_DEFAULT
#define TARGET_DEFAULT \
	(MASK_FP | MASK_FPREGS | MASK_IEEE | MASK_IEEE_CONFORMANT | MASK_GAS)

/* alpha needs __start.  */
#undef LINK_SPEC
#define LINK_SPEC \
  "%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \
   %{shared:-shared} %{R*} \
   %{static:-Bstatic} \
   %{!static:-Bdynamic} \
   %{rdynamic:-export-dynamic} \
   %{assert*} \
   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}"

/* As an elf system, we need crtbegin/crtend stuff.  */
#undef STARTFILE_SPEC
#define STARTFILE_SPEC "\
	%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \
	crtbegin%O%s} %{shared:crtbeginS%O%s}"
#undef ENDFILE_SPEC
#define ENDFILE_SPEC "%{!shared:crtend%O%s} %{shared:crtendS%O%s}"

/* run-time target specifications */
#define TARGET_OS_CPP_BUILTINS()		\
    do {					\
	OPENBSD_OS_CPP_BUILTINS_ELF();		\
	OPENBSD_OS_CPP_BUILTINS_LP64();		\
    } while (0)

/* Layout of source language data types.  */

/* This must agree with <machine/_types.h> */
#undef SIZE_TYPE
#define SIZE_TYPE "long unsigned int"

#undef PTRDIFF_TYPE
#define PTRDIFF_TYPE "long int"

#undef INTMAX_TYPE
#define INTMAX_TYPE "long long int"

#undef UINTMAX_TYPE
#define UINTMAX_TYPE "long long unsigned int"

#undef WCHAR_TYPE
#define WCHAR_TYPE "int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE 32

/* Output and generation of labels.  */
#define LOCAL_LABEL_PREFIX	"."

/* .set on alpha is not used to output labels.  */
#undef SET_ASM_OP

/* don't want no friggin' stack checks.  */
#undef STACK_CHECK_BUILTIN
#define STACK_CHECK_BUILTIN 0

/* OpenBSD doesn't currently support thread-local storage. */
/* alpha.c undefs TARGET_HAVE_TLS and redefines it to HAVE_AS_TLS !?!?! */
#undef HAVE_AS_TLS
#define HAVE_AS_TLS false
@


1.10
log
@spelling error in comment; from brad
@
text
@d34 1
@


1.9
log
@Disable __thread for alpha on OpenBSD. ok matthieu.
A few others mumbled and grumbled and didn't say much but this is blocking
X builds on alpha.
@
text
@d83 1
a83 1
/* OpenBSD doesn't currently supprot thread-local storage. */
@


1.8
log
@Make gcc on alpha use -mieee by default.  This fixes many FPE problems
with several ports on alpha and does not produce a significant slowdown.

Suggestion to patch gcc directly from millert@@
Diff and ok from miod@@
ok pvalchev@@, martin@@, deraadt@@
@
text
@d82 5
@


1.7
log
@INTMAX_TYPE and UINTMAX_TYPE are always in terms of long long on
OpenBSD, regardless of the size of a long.
OK kettenis@@ espie@@
@
text
@d24 2
a25 1
#define TARGET_DEFAULT (MASK_FP | MASK_FPREGS | MASK_GAS)
@


1.6
log
@Disable stack frame checking in the prologue under OpenBSD, unless you compile
with -fstack-check, for consistency with other platforms; ok kettenis@@
@
text
@d60 6
@


1.5
log
@garbage collect obsolete or unused macros - TARGET_ENDIAN_DEFAULT,
PREFERRED_DEBUGGING_TYPE and ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL.

ok kettenis@@ martin@@
@
text
@d23 3
d71 4
@


1.4
log
@Adapt to the machine/_types.h changes; size_t and ptrdiff_t are now
defined in terms of long, not int on all architectures.
@
text
@a20 3
/* We settle for little endian for now.  */
#define TARGET_ENDIAN_DEFAULT 0

a62 4

/* #undef PREFERRED_DEBUGGING_TYPE */
/* #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG */

a67 11

/* So, provide corresponding default, without the .set.  */
#undef ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL
#define ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL(FILE, SY, HI, LO)     \
 do {                                                                   \
  assemble_name (FILE, SY);                                             \
  fputc ('=', FILE);                                                    \
  assemble_name (FILE, HI);                                             \
  fputc ('-', FILE);                                                    \
  assemble_name (FILE, LO);                                             \
  } while (0)
@


1.3
log
@- move a few common pieces into OPENBSD_OS_CPP_BUILTINS_COMMON
- add __LP64__ to OPENBSD_OS_CPP_BUILTINS_LP64
- add __sparc to TARGET_OS_CPP_BUILTINS for sparc64
- add __PPC, __PPC__ and __powerpc to TARGET_OS_CPP_BUILTINS for powerpc

ok espie@@
@
text
@d53 1
a53 1
/* This must agree with <machine/ansi.h> */
@


1.2
log
@Add OpenBSD specific configurations.
@
text
@d47 2
a48 5
	builtin_define ("__OpenBSD__");		\
	builtin_define ("__ANSI_COMPAT");	\
	builtin_define ("__unix__");		\
	builtin_define ("__ELF__");		\
	builtin_assert ("system=unix");		\
@


1.1
log
@Initial revision
@
text
@a23 10
#define OBSD_NO_DYNAMIC_LIBRARIES
#define OBSD_HAS_DECLARE_FUNCTION_NAME
#define OBSD_HAS_DECLARE_FUNCTION_SIZE
#define OBSD_HAS_DECLARE_OBJECT

/* alpha ecoff supports only weak aliases, see below.  */
#define ASM_WEAKEN_LABEL(FILE,NAME) ASM_OUTPUT_WEAK_ALIAS (FILE,NAME,0)

#include <openbsd.h>

d29 14
a42 1
  "%{!nostdlib:%{!r*:%{!e*:-e __start}}} -dc -dp %{assert*}"
d50 1
d70 2
a71 2
#undef PREFERRED_DEBUGGING_TYPE
#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG
d73 1
d76 2
a77 58
/* We don't have an init section yet.  */
#undef HAS_INIT_SECTION

/* collect2 support (assembler format: macros for initialization).  */

/* Don't tell collect2 we use COFF as we don't have (yet ?) a dynamic ld
   library with the proper functions to handle this -> collect2 will
   default to using nm.  */
#undef OBJECT_FORMAT_COFF
#undef EXTENDED_COFF

/* Assembler format: exception region output.  */

/* All configurations that don't use elf must be explicit about not using
   dwarf unwind information. egcs doesn't try too hard to check internal
   configuration files...  */
#ifdef INCOMING_RETURN_ADDR_RTX
#undef DWARF2_UNWIND_INFO
#define DWARF2_UNWIND_INFO 0
#endif

/* Assembler format: file framework.  */

/* Taken from alpha/osf.h. This used to be common to all alpha
   configurations, but elf has departed from it.
   Check alpha/alpha.h, alpha/osf.h for it when egcs is upgraded.  */
#ifndef ASM_FILE_START
#define ASM_FILE_START(FILE)					\
{								\
  alpha_write_verstamp (FILE);					\
  fprintf (FILE, "\t.set noreorder\n");				\
  fprintf (FILE, "\t.set volatile\n");                          \
  fprintf (FILE, "\t.set noat\n");				\
  if (TARGET_SUPPORT_ARCH)					\
    fprintf (FILE, "\t.arch %s\n",				\
             TARGET_CPU_EV6 ? "ev6"				\
	     : (TARGET_CPU_EV5					\
		? (TARGET_MAX ? "pca56" : TARGET_BWX ? "ev56" : "ev5") \
		: "ev4"));					\
								\
  ASM_OUTPUT_SOURCE_FILENAME (FILE, main_input_filename);	\
}
#endif

/* Assembler format: label output.  */

#define ASM_OUTPUT_WEAK_ALIAS(FILE,NAME,VALUE)	\
 do {						\
  fputs ("\t.weakext\t", FILE);			\
  assemble_name (FILE, NAME);			\
  if (VALUE)					\
    {						\
      fputs (" , ", FILE);			\
      assemble_name (FILE, VALUE);		\
    }						\
  fputc ('\n', FILE);				\
 } while (0)

d79 10
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
