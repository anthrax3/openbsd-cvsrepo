head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.11.29.12.31.24;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.31.24;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@;; Scheduling description for Alpha EV6.
;;   Copyright (C) 2002 Free Software Foundation, Inc.
;;
;; This file is part of GNU CC.
;;
;; GNU CC is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;;
;; GNU CC is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU CC; see the file COPYING.  If not, write to
;; the Free Software Foundation, 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

; EV6 can issue 4 insns per clock.  It's out-of-order, so this isn't
; expected to help over-much, but a precise description can be important
; for software pipelining.
;
; EV6 has two symmetric pairs ("clusters") of two asymetric integer
; units ("upper" and "lower"), yielding pipe names U0, U1, L0, L1.
;
; ??? The clusters have independent register files that are re-synced
; every cycle.  Thus there is one additional cycle of latency between
; insns issued on different clusters.  Possibly model that by duplicating
; all EBOX insn_reservations that can issue to either cluster, increasing
; all latencies by one, and adding bypasses within the cluster.
;
; ??? In addition, instruction order affects cluster issue.

(define_automaton "ev6_0,ev6_1")
(define_cpu_unit "ev6_u0,ev6_u1,ev6_l0,ev6_l1" "ev6_0")
(define_reservation "ev6_u" "ev6_u0|ev6_u1")
(define_reservation "ev6_l" "ev6_l0|ev6_l1")
(define_reservation "ev6_ebox" "ev6_u|ev6_l")

(define_cpu_unit "ev6_fa" "ev6_1")
(define_cpu_unit "ev6_fm,ev6_fst0,ev6_fst1" "ev6_0")
(define_reservation "ev6_fst" "ev6_fst0|ev6_fst1")

; Assume type "multi" single issues.
(define_insn_reservation "ev6_multi" 1
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "multi"))
  "ev6_u0+ev6_u1+ev6_l0+ev6_l1+ev6_fa+ev6_fm+ev6_fst0+ev6_fst1")

; Integer loads take at least 3 clocks, and only issue to lower units.
; adjust_cost still factors in user-specified memory latency, so return 1 here.
(define_insn_reservation "ev6_ild" 1
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "ild,ldsym"))
  "ev6_l")

(define_insn_reservation "ev6_ist" 1
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "ist"))
  "ev6_l")

; FP loads take at least 4 clocks.  adjust_cost still factors
; in user-specified memory latency, so return 2 here.
(define_insn_reservation "ev6_fld" 2
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "fld"))
  "ev6_l")

; The FPU communicates with memory and the integer register file
; via two fp store units.  We need a slot in the fst immediately, and
; a slot in LOW after the operand data is ready.  At which point the
; data may be moved either to the store queue or the integer register
; file and the insn retired.

(define_insn_reservation "ev6_fst" 3
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "fst"))
  "ev6_fst,nothing,ev6_l")

; Arithmetic goes anywhere.
(define_insn_reservation "ev6_arith" 1
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "iadd,ilog,icmp"))
  "ev6_ebox")

; Motion video insns also issue only to U0, and take three ticks.
(define_insn_reservation "ev6_mvi" 3
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "mvi"))
  "ev6_u0")

; Shifts issue to upper units.
(define_insn_reservation "ev6_shift" 1
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "shift"))
  "ev6_u")

; Multiplies issue only to U1, and all take 7 ticks.
(define_insn_reservation "ev6_imul" 7
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "imul"))
  "ev6_u1")

; Conditional moves decompose into two independent primitives, each taking
; one cycle.  Since ev6 is out-of-order, we can't see anything but two cycles.
(define_insn_reservation "ev6_icmov" 2
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "icmov"))
  "ev6_ebox,ev6_ebox")

; Integer branches issue to upper units
(define_insn_reservation "ev6_ibr" 1
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "ibr,callpal"))
  "ev6_u")

; Calls only issue to L0.
(define_insn_reservation "ev6_jsr" 1
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "jsr"))
  "ev6_l0")

; Ftoi/itof only issue to lower pipes.
(define_insn_reservation "ev6_itof" 3
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "itof"))
  "ev6_l")

(define_insn_reservation "ev6_ftoi" 3
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "ftoi"))
  "ev6_fst,nothing,ev6_l")

(define_insn_reservation "ev6_fmul" 4
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "fmul"))
  "ev6_fm")

(define_insn_reservation "ev6_fadd" 4
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "fadd,fcpys,fbr"))
  "ev6_fa")

(define_insn_reservation "ev6_fcmov" 8
  (and (eq_attr "cpu" "ev6")
       (eq_attr "type" "fcmov"))
  "ev6_fa,nothing*3,ev6_fa")

(define_insn_reservation "ev6_fdivsf" 12
  (and (eq_attr "cpu" "ev6")
       (and (eq_attr "type" "fdiv")
	    (eq_attr "opsize" "si")))
  "ev6_fa*9")

(define_insn_reservation "ev6_fdivdf" 15
  (and (eq_attr "cpu" "ev6")
       (and (eq_attr "type" "fdiv")
	    (eq_attr "opsize" "di")))
  "ev6_fa*12")

(define_insn_reservation "ev6_sqrtsf" 18
  (and (eq_attr "cpu" "ev6")
       (and (eq_attr "type" "fsqrt")
	    (eq_attr "opsize" "si")))
  "ev6_fa*15")

(define_insn_reservation "ev6_sqrtdf" 33
  (and (eq_attr "cpu" "ev6")
       (and (eq_attr "type" "fsqrt")
	    (eq_attr "opsize" "di")))
  "ev6_fa*30")
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
