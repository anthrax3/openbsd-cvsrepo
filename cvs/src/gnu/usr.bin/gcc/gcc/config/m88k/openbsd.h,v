head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.16
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.12
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.14
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.10
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.20
	OPENBSD_5_0:1.3.0.18
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.16
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.14
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2013.02.12.19.57.06;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.12.30.18.09.30;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2012.12.25.17.10.53;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.11.21.21.25.25;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2012.11.20.21.32.39;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2012.11.15.21.42.23;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.11.21.20.28;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.09.21.47.38;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.09.20.33.39;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2012.04.12.12.09.30;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.16.01.09.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.13.17.51.17;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.29.12.33.45;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.33.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Reenable the stack protector code, the last varargs change fixed the issue.
@
text
@/* Configuration file for an m88k OpenBSD target.
   Copyright (C) 2000 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* <m88k/m88k.h> provided wrong GLOBAL_ASM_OP and SET_ASM_OP */
#undef SET_ASM_OP
#define SET_ASM_OP	"\tequ\t"
#undef GLOBAL_ASM_OP
#define GLOBAL_ASM_OP	"\t.globl\t"

/* <m88k/m88k.h> provided wrong SUPPORTS_WEAK and SUPPORTS_ONE_ONLY values */
#undef SUPPORTS_WEAK
#undef SUPPORTS_ONE_ONLY

/* Run-time target specifications.  */
#define TARGET_OS_CPP_BUILTINS()			\
  do							\
    {							\
      OPENBSD_OS_CPP_BUILTINS_COMMON();			\
      builtin_define ("__m88k");			\
      builtin_define ("__m88k__");			\
      builtin_assert ("cpu=m88k");			\
      builtin_assert ("machine=m88k");			\
      if (TARGET_88000)					\
	builtin_define ("__mc88000__");			\
      else						\
	{						\
	  if (TARGET_88100)				\
	    builtin_define ("__mc88100__");		\
	  if (TARGET_88110)				\
	    builtin_define ("__mc88110__");		\
	}						\
    }							\
  while (0)

/* Layout of source language data types. */

/* This must agree with <machine/_types.h> */
#undef SIZE_TYPE
#define SIZE_TYPE "long unsigned int"

#undef PTRDIFF_TYPE
#define PTRDIFF_TYPE "long int"

#undef INTMAX_TYPE
#define INTMAX_TYPE "long long int"

#undef UINTMAX_TYPE
#define UINTMAX_TYPE "long long unsigned int"

#undef WCHAR_TYPE
#define WCHAR_TYPE "int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE 32

/* Every structure or union's size must be a multiple of 2 bytes.  */
#undef STRUCTURE_SIZE_BOUNDARY
#define STRUCTURE_SIZE_BOUNDARY 16 

/* Due to the split instruction and data caches, trampolines must cause the
   data cache to be synced before attempting to execute the trampoline code.
   Under OpenBSD, this is done by invoking trap #451 with r2 and r3 set to
   the address of the trampoline area and its size, respectively.  */
#undef FINALIZE_TRAMPOLINE
#define FINALIZE_TRAMPOLINE(TRAMP)					\
  emit_library_call(gen_rtx_SYMBOL_REF (Pmode, "__dcache_sync"),	\
		    0, VOIDmode, 2, (TRAMP), Pmode,			\
		    GEN_INT (TRAMPOLINE_SIZE), Pmode)

#if defined(CROSS_COMPILE) && !defined(ATTRIBUTE_UNUSED)
#define ATTRIBUTE_UNUSED
#endif
#undef TRANSFER_FROM_TRAMPOLINE
#define TRANSFER_FROM_TRAMPOLINE					\
extern void __dcache_sync(int, int);					\
void									\
__dcache_sync (addr, len)						\
     int addr ATTRIBUTE_UNUSED, len ATTRIBUTE_UNUSED;			\
{									\
  /* r2 and r3 are set by the caller and need not be modified */	\
  __asm __volatile ("tb0 0, r0, 451");					\
}

/* All configurations that don't use elf must be explicit about not using
   dwarf unwind information. egcs doesn't try too hard to check internal
   configuration files...  */
#define DWARF2_UNWIND_INFO 0
@


1.12
log
@Stop including other files in m88k/openbsd.h; instead specific the complete list
of files to include, in proper order, as tm_file at configure time. This
requires openbsd.h to be split, as also encountered on other platforms, and will
make further work easier.
No functional change introduced.
@
text
@a100 9
/* Disable stack protector until the varargs code is fixed to interact
   correctly with it.  */
#undef OVERRIDE_OPTIONS
#define OVERRIDE_OPTIONS						\
  do {									\
    m88k_override_options ();						\
    flag_propolice_protection = flag_stack_protection = 0;		\
  } while (0)

@


1.11
log
@Define INCOMING_RETURN_ADDR_RTX and DWARF_FRAME_RETURN_COLUMN to allow for
DWARF debugging information to be produced, but define DWARF2_UNWIND_INFO
to zero to prevent it from being output yet.
This exposes dire weaknesses in the way the dwarf unwinder recognizes stack
frame setup instructions, so borrow code from rs6000 to rewrite and annotate
them as dwarf-edible instructions.
No functional change intended - although this enables one more optimization
code path in gcc.
@
text
@a20 4
#include <m88k/aout-dbx.h>
#include <aoutos.h>
#include <m88k/m88k.h>

a29 6

#define OBSD_HAS_CORRECT_ASM_OPS
#define OBSD_OLD_GAS
#define OBSD_NO_DYNAMIC_LIBRARIES

#include <openbsd.h>
@


1.10
log
@Disable the stack protector in OVERRIDE_OPTIONS for the time being. The stack
protector code will conflict with the way variadic functions spill the
registers on the stack, causing the latter to be partially overwritten with
the value of __guard. Core dumps and hilarity ensues. This can probably be
fixed by changing the time registers are spilled from the backend for
__builtin_expand_saveregs(), to setup_incoming_varargs(), as done on e.g.
rs6000. But that's far from a trivial change, and I'd like to be able to
exercize gcc 3 a bit more on m88k before sacrificing more brain cells to
the gcc evil deities.
@
text
@d119 5
@


1.9
log
@Convert to new world order by defining TARGET_OS_CPP_BUILTINS instead of
CPP_PREDEFINES; try to deuglify CPP_SPEC whenever possible as well.
@
text
@d110 9
@


1.8
log
@Make this cross-compile friendly by defining ATTRIBUTE_UNUSED to an empty
string if not defined already, when cross-compiling. (curse words censored)
@
text
@d41 20
a60 14
/* Macros to be automatically defined.  */
#define CPP_PREDEFINES \
    "-D__m88k__ -D__unix__ -D__OpenBSD__ -Asystem(unix) -Asystem(OpenBSD) -Acpu(m88k) -Amachine(m88k)"

/* If -m88000 is in effect, add -Dmc88000; similarly for -m88100 and -m88110.
   However, reproduce the effect of -Dmc88100 previously in CPP_PREDEFINES.
   Here, the CPU_DEFAULT is assumed to be -m88100.  */
#undef CPP_SPEC
#define CPP_SPEC "%{m88000:-D__mc88000__} \
		  %{!m88000:%{m88100:%{m88110:-D__mc88000__}}} \
		  %{!m88000:%{!m88100:%{m88110:-D__mc88110__}}} \
		  %{!m88000:%{!m88110:-D__mc88100__ -D__mc88100}} \
		  %{posix:-D_POSIX_SOURCE} \
		  %{pthread:-D_REENTRANT}"
@


1.7
log
@The next step towards a working gcc3/m88k: remove the argument area (from gcc2),
and try to get the builtin varargs code to work. I have tried to mimic the
gcc2 varargs logic, which is optimal in the sense that no argument gets
duplicated and as many arguments as possible are passed in registers, to no
avail (read: hair-pulling ICE out of nowhere in variadic functions). So I am
now sticking to the original gcc 2.7 varargs, where an argument passed on the
stack consumes the registers it would have been passed as, if its type would
have allowed it. This spills too much memory on the stack, but on the other
hand makes the expansion of va_arg() much simpler.

This means that, should gcc3 on m88k platforms be solid enough, mixing varargs
objects compiled with gcc 2 and gcc 3 will not be possible. But we're not there
yet.
@
text
@d91 3
@


1.6
log
@Doh, in gcc3 the various *_ASM_OP need to output explicit whitespace before
and after the keyword.
@
text
@d96 1
a96 1
     int addr, len;							\
@


1.5
log
@Port the gcc 2.95 m88k fixes to the gcc 3 codebase, except for the function
frame setup and varargs handling, which need some more work at the moment.
@
text
@d27 1
a27 1
#define SET_ASM_OP	"equ"
d29 1
a29 1
#define GLOBAL_ASM_OP	".globl"
@


1.4
log
@Remove incorrect -pthread preprocessor define _POSIX_THREADS and replace
with _REENTRANT. Also remove undef _POSIX_THREADS in phread.h.
From brad@@comstyle.com. okay guenther@@
@
text
@d21 19
a39 3
/* Identify the compiler.  */
#undef  VERSION_INFO1
#define VERSION_INFO1 "Motorola m88k, "
d43 1
a43 1
    "-D__m88k__ -D__unix__ -D__OpenBSD__ -D__CLASSIFY_TYPE__=2 -Asystem=unix -Asystem=OpenBSD -Acpu=m88k -Amachine=m88k"
d48 2
a49 2
#undef	CPP_SPEC
#define	CPP_SPEC "%{m88000:-D__mc88000__} \
d81 20
a100 9
/* Stack & calling: aggregate returns. */

/* Don't default to pcc-struct-return, because gcc is the only compiler, and
   we want to retain compatibility with older gcc versions.  */
#define DEFAULT_PCC_STRUCT_RETURN 0

#undef SET_ASM_OP
#define SET_ASM_OP	"\t.def\t"

@


1.3
log
@INTMAX_TYPE and UINTMAX_TYPE are always in terms of long long on
OpenBSD, regardless of the size of a long.
OK kettenis@@ espie@@
@
text
@d38 1
a38 1
		  %{pthread:-D_POSIX_THREADS}"
@


1.2
log
@Adapt to the machine/_types.h changes; size_t and ptrdiff_t are now
defined in terms of long, not int on all architectures.
@
text
@d49 6
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
/* This must agree with <machine/ansi.h> */
d44 1
a44 1
#define SIZE_TYPE "unsigned int"
d47 1
a47 1
#define PTRDIFF_TYPE "int"
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
