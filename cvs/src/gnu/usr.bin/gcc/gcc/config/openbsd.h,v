head	1.16;
access;
symbols
	OPENBSD_6_0:1.16.0.16
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.12
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.14
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.6
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.10
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.8
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2013.01.24.21.15.47;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2012.11.09.20.18.38;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2012.04.12.12.09.30;	author kurt;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.19.19.36.32;	author naddy;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.26.22.51.28;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2009.07.25.02.04.02;	author kurt;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.22.19.18.49;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.27.18.05.56;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.11.19.21.19;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.20.20.47.32;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.15.17.54.28;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.15.17.46.53;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.13.00.12.35;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.28.22.46.37;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.29.13.20.58;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.29.12.31.14;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.31.14;	author espie;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Get rid of a few warnings by pouring prototypes and punctuation.
@
text
@/* Base configuration file for all OpenBSD targets.
   Copyright (C) 1999, 2000 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* Common OpenBSD configuration. 
   All OpenBSD architectures include this file, which is intended as
   a repository for common defines. 

   Some defines are common to all architectures, a few of them are
   triggered by OBSD_* guards, so that we won't override architecture
   defaults by mistakes.

   OBSD_HAS_CORRECT_SPECS: 
      another mechanism provides correct specs already.
   OBSD_NO_DYNAMIC_LIBRARIES: 
      no implementation of dynamic libraries.
   OBSD_OLD_GAS: 
      older flavor of gas which needs help for PIC.
   OBSD_HAS_DECLARE_FUNCTION_NAME, OBSD_HAS_DECLARE_FUNCTION_SIZE,
   OBSD_HAS_DECLARE_OBJECT: 
      PIC support, FUNCTION_NAME/FUNCTION_SIZE are independent, whereas
      the corresponding logic for OBJECTS is necessarily coupled.
  OBSD_HAS_CORRECT_ASM_OPS:
      another mechanism provides correct ASM_OP values already.

   There are also a few `default' defines such as ASM_WEAKEN_LABEL,
   intended as common ground for arch that don't provide 
   anything suitable.  */

/* OPENBSD_NATIVE is defined only when gcc is configured as part of
   the OpenBSD source tree, specifically through Makefile.bsd-wrapper.

   In such a case the include path can be trimmed as there is no
   distinction between system includes and gcc includes.  */

/* This configuration method, namely Makefile.bsd-wrapper and
   OPENBSD_NATIVE is NOT recommended for building cross-compilers.  */

/* OPENBSD_CROSS is only recommended for building cross-compilers which
   target a OpenBSD system (kernel/userland) */

#if defined(OPENBSD_NATIVE) || defined(OPENBSD_CROSS)

/* The compiler is configured with ONLY the gcc/g++ standard headers.  */
#undef INCLUDE_DEFAULTS
#ifdef CROSS_COMPILE
#define INCLUDE_DEFAULTS                       \
  {                                            \
    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1, 0 },    \
    { GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1, 0 },\
    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1, 0 }, \
    { GPLUSPLUS_INCLUDE_DIR "/..", STANDARD_INCLUDE_COMPONENT, 0, 0, 0 }, \
    { 0, 0, 0, 0, 0 }                             \
  }
#else
#define INCLUDE_DEFAULTS			\
  {						\
    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1, 0 },	\
    { GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1, 0 },\
    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1, 0 }, \
    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0, 0 },	\
    { 0, 0, 0, 0, 0 }				\
  }
#endif

/* Under OpenBSD, the normal location of the various *crt*.o files is the
   /usr/lib directory.  */
#undef STANDARD_STARTFILE_PREFIX
#define STANDARD_STARTFILE_PREFIX	"/usr/lib/"

#endif


/* Controlling the compilation driver.  */

/* TARGET_OS_CPP_BUILTINS() common to all OpenBSD targets.  */
#define OPENBSD_OS_CPP_BUILTINS_COMMON()	\
  do						\
    {						\
      builtin_define ("__OpenBSD__");		\
      builtin_define ("__unix__");		\
      builtin_define ("__ANSI_COMPAT");		\
      builtin_assert ("system=unix");		\
      builtin_assert ("system=bsd");		\
      builtin_assert ("system=OpenBSD");	\
    }						\
  while (0)

/* TARGET_OS_CPP_BUILTINS() common to all OpenBSD ELF targets.  */
#define OPENBSD_OS_CPP_BUILTINS_ELF()		\
  do						\
    {						\
      OPENBSD_OS_CPP_BUILTINS_COMMON();		\
      builtin_define ("__ELF__");		\
    }						\
  while (0)

/* TARGET_OS_CPP_BUILTINS() common to all LP64 OpenBSD targets.  */
#define OPENBSD_OS_CPP_BUILTINS_LP64()		\
  do						\
    {						\
      builtin_define ("_LP64");			\
      builtin_define ("__LP64__");		\
    }						\
  while (0)

/* CPP_SPEC appropriate for OpenBSD. We deal with -posix and -pthread.
   XXX the way threads are handled currently is not very satisfying,
   since all code must be compiled with -pthread to work. 
   This two-stage defines makes it easy to pick that for targets that
   have subspecs.  */
#ifdef CPP_CPU_SPEC
#define OBSD_CPP_SPEC "%(cpp_cpu) %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}"
#else
#define OBSD_CPP_SPEC "%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}"
#endif

#ifndef OBSD_HAS_CORRECT_SPECS

#ifndef OBSD_NO_DYNAMIC_LIBRARIES
#undef SWITCH_TAKES_ARG
#define SWITCH_TAKES_ARG(CHAR) \
  (DEFAULT_SWITCH_TAKES_ARG (CHAR) \
   || (CHAR) == 'R')
#endif

#undef CPP_SPEC
#define CPP_SPEC OBSD_CPP_SPEC

#ifdef OBSD_OLD_GAS
/* ASM_SPEC appropriate for OpenBSD.  For some architectures, OpenBSD 
   still uses a special flavor of gas that needs to be told when generating 
   pic code.  */
#undef ASM_SPEC
#define ASM_SPEC "%{fpic:-k} %{fPIC:-k -K} %|"

#else
/* Since we use gas, stdin -> - is a good idea, but we don't want to
   override native specs just for that.  */
#ifndef ASM_SPEC
#define ASM_SPEC "%|"
#endif
#endif

/* LINK_SPEC appropriate for OpenBSD.  Support for GCC options 
   -static, -assert, and -nostdlib.  */
#undef LINK_SPEC
#ifdef OBSD_NO_DYNAMIC_LIBRARIES
#define LINK_SPEC \
  "%{g:%{!nostdlib:-L/usr/lib/debug}} %{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{assert*}"
#else
#define LINK_SPEC \
  "%{g:%{!nostdlib:-L/usr/lib/debug}} %{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}}} %{shared:-Bshareable -x} -dc -dp %{R*} %{static:-Bstatic} %{assert*}"
#endif

#if defined(HAVE_LD_EH_FRAME_HDR)
#define LINK_EH_SPEC "%{!static:--eh-frame-hdr} "
#endif

#undef LIB_SPEC
#define LIB_SPEC OBSD_LIB_SPEC
#endif


/* Runtime target specification.  */

/* You must redefine CPP_PREDEFINES in any arch specific file.  */
#undef CPP_PREDEFINES

/* Implicit calls to library routines.  */

/* Use memcpy and memset instead of bcopy and bzero.  */
#ifndef TARGET_MEM_FUNCTIONS
#define TARGET_MEM_FUNCTIONS
#endif

/* Miscellaneous parameters.  */

/* Controlling debugging info: dbx options.  */

/* Don't use the `xsTAG;' construct in DBX output; OpenBSD systems that
   use DBX don't support it.  */
#define DBX_NO_XREFS


/* Support of shared libraries, mostly imported from svr4.h through netbsd.  */
/* Two differences from svr4.h:
   - we use . - _func instead of a local label,
   - we put extra spaces in expressions such as 
     .type _func , @@function
     This is more readable for a human being and confuses c++filt less.  */

/* Assembler format: output and generation of labels.  */

/* Define the strings used for the .type and .size directives.
   These strings generally do not vary from one system running OpenBSD
   to another, but if a given system needs to use different pseudo-op
   names for these, they may be overridden in the arch specific file.  */ 

/* OpenBSD assembler is hacked to have .type & .size support even in a.out
   format object files.  Functions size are supported but not activated 
   yet (look for GRACE_PERIOD_EXPIRED in gas/config/obj-aout.c).  
   SET_ASM_OP is needed for attribute alias to work.  */

#ifndef	OBSD_HAS_CORRECT_ASM_OPS

#undef TYPE_ASM_OP
#undef SIZE_ASM_OP
#undef SET_ASM_OP
#undef GLOBAL_ASM_OP

#define TYPE_ASM_OP	"\t.type\t"
#define SIZE_ASM_OP	"\t.size\t"
#define SET_ASM_OP	"\t.set\t"
#define GLOBAL_ASM_OP	"\t.globl\t"

#endif

/* The following macro defines the format used to output the second
   operand of the .type assembler directive.  */
#undef TYPE_OPERAND_FMT
#define TYPE_OPERAND_FMT	"@@%s"

/* Provision if extra assembler code is needed to declare a function's result
   (taken from svr4, not needed yet actually).  */
#ifndef ASM_DECLARE_RESULT
#define ASM_DECLARE_RESULT(FILE, RESULT)
#endif

/* These macros generate the special .type and .size directives which
   are used to set the corresponding fields of the linker symbol table
   entries under OpenBSD.  These macros also have to output the starting 
   labels for the relevant functions/objects.  */

#ifndef OBSD_HAS_DECLARE_FUNCTION_NAME
/* Extra assembler code needed to declare a function properly.
   Some assemblers may also need to also have something extra said 
   about the function's return value.  We allow for that here.  */
#undef ASM_DECLARE_FUNCTION_NAME
#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)			\
  do {									\
    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, "function");			\
    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));			\
    ASM_OUTPUT_LABEL(FILE, NAME);					\
  } while (0)
#endif

#ifndef OBSD_HAS_DECLARE_FUNCTION_SIZE
/* Declare the size of a function.  */
#undef ASM_DECLARE_FUNCTION_SIZE
#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)		\
  do {								\
    if (!flag_inhibit_size_directive)				\
      ASM_OUTPUT_MEASURED_SIZE (FILE, FNAME);			\
  } while (0)
#endif

#ifndef OBSD_HAS_DECLARE_OBJECT
/* Extra assembler code needed to declare an object properly.  */
#undef ASM_DECLARE_OBJECT_NAME
#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)		\
  do {								\
      HOST_WIDE_INT size;					\
      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, "object");		\
      size_directive_output = 0;				\
      if (!flag_inhibit_size_directive				\
	  && (DECL) && DECL_SIZE (DECL))			\
	{							\
	  size_directive_output = 1;				\
	  size = int_size_in_bytes (TREE_TYPE (DECL));		\
	  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);		\
	}							\
      ASM_OUTPUT_LABEL (FILE, NAME);				\
  } while (0)

/* Output the size directive for a decl in rest_of_decl_compilation
   in the case where we did not do so before the initializer.
   Once we find the error_mark_node, we know that the value of
   size_directive_output was set by ASM_DECLARE_OBJECT_NAME 
   when it was run for the same decl.  */
#undef ASM_FINISH_DECLARE_OBJECT
#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)	 \
do {									 \
     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);		 \
     HOST_WIDE_INT size;						 \
     if (!flag_inhibit_size_directive && DECL_SIZE (DECL)		 \
         && ! AT_END && TOP_LEVEL					 \
	 && DECL_INITIAL (DECL) == error_mark_node			 \
	 && !size_directive_output)					 \
       {								 \
	 size_directive_output = 1;					 \
	 size = int_size_in_bytes (TREE_TYPE (DECL));			 \
	 ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);			 \
       }								 \
   } while (0)
#endif


/* Those are `generic' ways to weaken/globalize a label. We shouldn't need
   to override a processor specific definition. Hence, #ifndef ASM_*
   In case overriding turns out to be needed, one can always #undef ASM_* 
   before including this file.  */

/* Tell the assembler that a symbol is weak.  */
/* Note: netbsd arm32 assembler needs a .globl here. An override may 
   be needed when/if we go for arm32 support.  */
#ifndef ASM_WEAKEN_LABEL
#define ASM_WEAKEN_LABEL(FILE,NAME) \
  do { fputs ("\t.weak\t", FILE); assemble_name (FILE, NAME); \
       fputc ('\n', FILE); } while (0)
#endif

/* Storage layout.  */


/* bug work around: we don't want to support #pragma weak, but the current
   code layout needs HANDLE_PRAGMA_WEAK asserted for __attribute((weak)) to
   work.  On the other hand, we don't define HANDLE_PRAGMA_WEAK directly,
   as this depends on a few other details as well...  */
#define HANDLE_SYSV_PRAGMA 1

/* Disable the use of unsafe builtin functions, (strcat, strcpy), making
 * them easier to spot in the object files. 
 */
#define NO_UNSAFE_BUILTINS

/* pick up defines for mprotect (used in TRANSFER_FROM_TRAMPOLINE) */
#include <sys/types.h>
#include <sys/mman.h>
@


1.15
log
@Allow OBSD_HAS_CORRECT_ASM_OPS to prevent <openbsd.h> from redefining the
.type, .size, .set and .globl stanzas, similar to openbsd.h r1.9 in gcc 2.95
@
text
@d65 5
a69 5
    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1 },    \
    { GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1 },\
    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1 }, \
    { GPLUSPLUS_INCLUDE_DIR "/..", STANDARD_INCLUDE_COMPONENT, 0, 0 }, \
    { 0, 0, 0, 0 }                             \
d74 5
a78 5
    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1 },	\
    { GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1 },\
    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1 }, \
    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0 },	\
    { 0, 0, 0, 0 }				\
@


1.14
log
@Remove incorrect -pthread preprocessor define _POSIX_THREADS and replace
with _REENTRANT. Also remove undef _POSIX_THREADS in phread.h.
From brad@@comstyle.com. okay guenther@@
@
text
@d39 2
d221 2
d232 2
@


1.13
log
@- enable thread model posix for gcc 3 which makes dwarf2 exception
handling thread safe and enables thread safety for libstdc++
- bump libstdc++ major

See faq/current.html for instructions on how to correctly build
userland for this change.

originally from kurt@@, ok miod@@
@
text
@d127 1
a127 1
#define OBSD_CPP_SPEC "%(cpp_cpu) %{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS}"
d129 1
a129 1
#define OBSD_CPP_SPEC "%{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS}"
@


1.12
log
@- revert thread model posix since it broke the build for hppa. will revist
when all archs are fully tested and working.
- major bump libstdc++
@
text
@a325 4
/* Otherwise, since we support weak, gthr.h erroneously tries to use
   #pragma weak.  */
#define GTHREAD_USE_WEAK 0

@


1.11
log
@- enable thread model posix for gcc 3 which makes dwarf2 exception
handling thread safe and enables thread safety for libstdc++
- include -D_REENTRANT when -pthread cpp arg is present (needed so
boost can detect -pthread on the command line).
- bump libstdc++ major

See faq/current.html for instructions on how to correctly build
userland for this change.

okay kettenis@@
@
text
@d127 1
a127 1
#define OBSD_CPP_SPEC "%(cpp_cpu) %{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS -D_REENTRANT}"
d129 1
a129 1
#define OBSD_CPP_SPEC "%{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS -D_REENTRANT}"
d326 4
@


1.10
log
@Improved cross build support for gcc on OpenBSD. allows the cross built
compiler to have the same default options as native.
The changes to cross build a native compiler is not quite complete.
"Get this in" miod@@
@
text
@d127 1
a127 1
#define OBSD_CPP_SPEC "%(cpp_cpu) %{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS}"
d129 1
a129 1
#define OBSD_CPP_SPEC "%{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS}"
a325 4
/* Otherwise, since we support weak, gthr.h erroneously tries to use
   #pragma weak.  */
#define GTHREAD_USE_WEAK 0

@


1.9
log
@Add support to find DWARF call fame info in shared libraries.
This makes DWARF-based exception handling work for shared libraries and
dynamic executables.
ok drahn@@, millert@@, pval@@
@
text
@d53 4
a56 1
#ifdef OPENBSD_NATIVE
d60 10
d78 1
@


1.8
log
@Pick common code for trampoline mprotect() code. This did not work at all
on amd64 and was working on sparc64 by sheer luck (because we are not Solaris).
@
text
@d156 4
@


1.7
log
@Do not provide builtins for strcpy() and strcat(), as done with gcc 2, on
the sole purpose of making these easier to spot and exterminate.

tested by various people on amd64 and I on arm&sparc64, ok deraadt@@
@
text
@d322 4
@


1.6
log
@Split lib spec into pre-pthread/post-pthread.
Cosmetic change for us, will make merging with FSF easier.
@
text
@d317 5
@


1.5
log
@install compiler/arch-dependent headers.
ok millert@@
@
text
@a117 4
/* LIB_SPEC appropriate for OpenBSD.  Include -lpthread if -pthread is
   specified on the command line. */
#define OBSD_LIB_SPEC "%{!shared:%{pthread:-lpthread%{p:_p}%{!p:%{pg:_p}}}} %{!shared:-lc%{p:_p}%{!p:%{pg:_p}}}"

@


1.4
log
@- move a few common pieces into OPENBSD_OS_CPP_BUILTINS_COMMON
- add __LP64__ to OPENBSD_OS_CPP_BUILTINS_LP64
- add __sparc to TARGET_OS_CPP_BUILTINS for sparc64
- add __PPC, __PPC__ and __powerpc to TARGET_OS_CPP_BUILTINS for powerpc

ok espie@@
@
text
@a54 3
#undef GCC_INCLUDE_DIR
#define GCC_INCLUDE_DIR "/usr/include"

d62 1
a62 1
    { GCC_INCLUDE_DIR, "GCC", 0, 0 },		\
@


1.3
log
@Add missing C++ include paths: arch-dependent headers, and
backward-compatibility headers.
@
text
@d84 2
d87 1
d106 1
@


1.2
log
@Add OpenBSD specific configurations.
@
text
@d63 2
@


1.1
log
@Initial revision
@
text
@d69 1
d77 27
d105 1
a105 1
   XXX the way threads are handling currently is not very satisfying,
d115 3
a117 4
/* LIB_SPEC appropriate for OpenBSD.  Select the appropriate libc, 
   depending on profiling and threads.  Basically, 
   -lc(_r)?(_p)?, select _r for threads, and _p for p or pg.  */
#define OBSD_LIB_SPEC "%{!shared:-lc%{pthread:_r}%{p:_p}%{!p:%{pg:_p}}}"
a317 1

@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
