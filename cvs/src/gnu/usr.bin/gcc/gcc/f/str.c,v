head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.58
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.28.17;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.28.17;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* str.c -- Implementation File (module.c template V1.0)
   Copyright (C) 1995 Free Software Foundation, Inc.
   Contributed by James Craig Burley.

This file is part of GNU Fortran.

GNU Fortran is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Fortran is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Fortran; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.

   Related Modules:
      None

   Description:
      Handles recognition of keywords.

   Modifications:
*/

/* Include files. */

#include "proj.h"
#include "src.h"
#include "str.h"
#include "lex.h"

/* Externals defined here. */


/* Simple definitions and enumerations. */


/* Internal typedefs. */


/* Private include files. */


/* Internal structure definitions. */


/* Static objects accessed by functions in this module. */


/* Static functions (internal). */


/* Internal macros. */


/* ffestr_first -- Look up the first names in a statement

   ffestrFirst kw;
   ffelexToken t;
   kw = ffestr_first(t);

   Returns FFESTR_firstNone if no matches, else FFESTR_firstXYZ if the
   NAME or NAMES token matches XYZ.  t must be a NAME or NAMES token or this
   routine will crash.

   This routine's code is actually written by a utility called FINI, itself
   written specifically for the Gnu Fortran project.  FINI takes an input
   file, in this case "ffe_first.fini", consisting primarily of a
   list of statements (ASSIGN, IF, DO, DOWHILE), and outputs a C file,
   "str-1t.j", that contains the definition of the
   ffestr_first function.  We #include that file here.

   30-Jan-90  JCB  2.0
      Updated for Fortran 90.
*/

#ifndef MAKING_DEPENDENCIES
#include "str-1t.j"
#endif
/* ffestr_format -- Look up format names in a statement

   ffestrFormat kw;
   ffelexToken t;
   kw = ffestr_format(t);

   Returns FFESTR_formatNone if no matches, else FFESTR_formatXYZ if the
   NAME or NAMES token matches XYZ.  t must be a NAME or NAMES token or this
   routine will crash.

   This routine's code is actually written by a utility called FINI, itself
   written specifically for the Gnu Fortran project.  FINI takes an input
   file, in this case "ffe_format.fini", consisting primarily of a
   list of format keywords (I, F, TL, TR), and outputs a C file,
   "str-fo.j", that contains the definition of the
   ffestr_format function.  We #include that file here.

*/

#ifndef MAKING_DEPENDENCIES
#include "str-fo.j"
#endif
/* ffestr_genio -- Look up genio names in a statement

   ffestrGenio kw;
   ffelexToken t;
   kw = ffestr_genio(t);

   Returns FFESTR_genioNone if no matches, else FFESTR_genioXYZ if the
   NAME or NAMES token matches XYZ.  t must be a NAME or NAMES token or this
   routine will crash.

   This routine's code is actually written by a utility called FINI, itself
   written specifically for the Gnu Fortran project.  FINI takes an input
   file, in this case "ffe_genio.fini", consisting primarily of a
   list of statement keywords (TO, FUNCTION), and outputs a C file,
   "str-io.j", that contains the definition of the
   ffestr_genio function.  We #include that file here.

*/

#ifndef MAKING_DEPENDENCIES
#include "str-io.j"
#endif
/* ffestr_inquire -- Look up inquire names in a statement

   ffestrInquire kw;
   ffelexToken t;
   kw = ffestr_inquire(t);

   Returns FFESTR_inquireNone if no matches, else FFESTR_inquireXYZ if the
   NAME or NAMES token matches XYZ.  t must be a NAME or NAMES token or this
   routine will crash.

   This routine's code is actually written by a utility called FINI, itself
   written specifically for the Gnu Fortran project.  FINI takes an input
   file, in this case "ffe_inquire.fini", consisting primarily of a
   list of statement keywords (TO, FUNCTION), and outputs a C file,
   "str-nq.j", that contains the definition of the
   ffestr_inquire function.  We #include that file here.

*/

#ifndef MAKING_DEPENDENCIES
#include "str-nq.j"
#endif
/* ffestr_open -- Look up open names in a statement

   ffestrOpen kw;
   ffelexToken t;
   kw = ffestr_open(t);

   Returns FFESTR_openNone if no matches, else FFESTR_openXYZ if the
   NAME or NAMES token matches XYZ.  t must be a NAME or NAMES token or this
   routine will crash.

   This routine's code is actually written by a utility called FINI, itself
   written specifically for the Gnu Fortran project.  FINI takes an input
   file, in this case "ffe_open.fini", consisting primarily of a
   list of statement keywords (TO, FUNCTION), and outputs a C file,
   "str-op.j", that contains the definition of the
   ffestr_open function.  We #include that file here.

*/

#ifndef MAKING_DEPENDENCIES
#include "str-op.j"
#endif
/* ffestr_other -- Look up other names in a statement

   ffestrOther kw;
   ffelexToken t;
   kw = ffestr_other(t);

   Returns FFESTR_otherNone if no matches, else FFESTR_otherXYZ if the
   NAME or NAMES token matches XYZ.  t must be a NAME or NAMES token or this
   routine will crash.

   This routine's code is actually written by a utility called FINI, itself
   written specifically for the Gnu Fortran project.  FINI takes an input
   file, in this case "ffe_other.fini", consisting primarily of a
   list of statement keywords (TO, FUNCTION), and outputs a C file,
   "str-ot.j", that contains the definition of the
   ffestr_other function.  We #include that file here.

*/

#ifndef MAKING_DEPENDENCIES
#include "str-ot.j"
#endif
/* ffestr_second -- Look up the second name in a statement

   ffestrSecond kw;
   ffelexToken t;
   kw = ffestr_second(t);

   Returns FFESTR_secondNone if no matches, else FFESTR_secondXYZ if the
   NAME or NAMES token matches XYZ.  t must be a NAME or NAMES token or this
   routine will crash.

   This routine's code is actually written by a utility called FINI, itself
   written specifically for the Gnu Fortran project.  FINI takes an input
   file, in this case "ffe_second.fini", consisting primarily of a
   list of statement keywords (TO, FUNCTION), and outputs a C file,
   "str-2t.j", that contains the definition of the
   ffestr_second function.  We #include that file here.

*/

#ifndef MAKING_DEPENDENCIES
#include "str-2t.j"
#endif
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
