head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.50
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.52
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.48
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.44
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.46
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.38
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.42
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.40
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.36
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.34
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.32
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.30
	OPENBSD_5_0:1.1.1.1.0.28
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.26
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.24
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.20
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.22
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.18
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.16
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.14
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.12
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.10
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.8
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.6
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.4
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.2
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.12.24.23.53.04;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.24.23.53.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* PR optimization/14235 */
/* Origin: <senor_fjord@@yahoo.com> */

typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef unsigned long long uint64_t;

static const uint64_t LOW_BYTE_MASK    = 0x00000000000000ffULL;
static const uint64_t HIGH_BYTE_MASK   = 0x000000000000ff00ULL;
static const uint64_t WORD_MASK        = 0x000000000000ffffULL;
static const uint64_t DWORD_MASK       = 0x00000000ffffffffULL;

extern uint64_t *srca_mask;
extern int *assert_thrown;

void foo()
{
  uint64_t tempA = 0; /* actually a bunch of code to set A */ 
  uint64_t tempB = 0; /* actually a bunch of code to set B */ 

  /* cast A to right size */
  tempA = (((*srca_mask == LOW_BYTE_MASK) || 
            (*srca_mask == HIGH_BYTE_MASK)) ?
           ((int8_t)tempA) : 
           ((*srca_mask == WORD_MASK) ? 
            ((int16_t)tempA) : 
            ((*srca_mask == DWORD_MASK) ? 
             ((int32_t)tempA) : 
             tempA)));

  /* cast B to right size */
  tempB = (((*srca_mask == LOW_BYTE_MASK) || 
            (*srca_mask == HIGH_BYTE_MASK)) ? 
           ((int8_t)tempB) : 
           ((*srca_mask == WORD_MASK) ? 
            ((int16_t)tempB) : 
            ((*srca_mask == DWORD_MASK) ? 
             ((int32_t)tempB) : 
             tempB))); 
    
  if ((int) tempA > (int) tempB) { 
    *assert_thrown = 1;
  }
}
@


1.1.1.1
log
@gcc 3.3.5
@
text
@@
