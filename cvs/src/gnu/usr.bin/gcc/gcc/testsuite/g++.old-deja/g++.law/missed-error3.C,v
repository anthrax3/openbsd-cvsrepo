head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.09;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.09;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// Build don't link: 
// GROUPS passed missed-error
// missed-error file
// From: Neil Wilson <csf004@@cch.coventry.ac.uk>
// Date:     Tue, 28 Apr 92 13:53:54 WET DST
// Subject:  g++ version 2.1 bugs
// Message-ID: <15717.9204281253@@cch.coventry.ac.uk>


// enum bool { FALSE = 0, TRUE = 1 };

typedef int T;

class Traversable {
public:
    virtual const T item() const = 0;
    virtual const bool off() const = 0;
    virtual ~Traversable() { };
};

class Chain : public Traversable {
public:
    virtual const int count() const = 0;
    virtual const bool empty() const = 0;
    virtual void forth() const = 0;
    virtual const bool isfirst() const = 0;
    virtual const bool islast() const = 0;
    virtual const int position() const = 0;
    virtual const T first() const = 0;
    virtual const T last() const = 0;
    virtual const T i_th(const int index) const = 0;
    virtual void start() const = 0;
    virtual void back() const = 0;
    virtual void finish() const = 0;
    virtual void move(const int index) const = 0;
    virtual void go(const int index) const = 0;
    virtual void put(const T value) = 0;
    virtual void put_i_th(const T value, const int index) = 0;
    virtual void swap(const int index) = 0;
    virtual void wipe_out() = 0;
};
class List : public Chain {
protected:
    int item_count;
    int cursor_position;
    virtual void go_offleft() const = 0;
    virtual void go_offright() const = 0;
    virtual void copy(const List& other) = 0;
public:
    List() : item_count(0), cursor_position(0) { };
    virtual const int count() const;
    virtual const bool empty() const;
    virtual const bool isfirst() const;
    virtual const bool islast() const;
    virtual const bool offleft() const;
    virtual const bool offright() const;
    virtual const bool off() const;
    virtual const int position() const;
    virtual const T first() const;
    virtual const T last() const;
    virtual const T i_th(const int index) const;
    virtual void start() const;
    virtual void forth() const;
    virtual void back() const;
    virtual void finish() const;
    virtual void move(const int index) const;
    virtual void go(const int index) const;
    friend const bool operator==(const List& left,
	const List& right);
    friend const bool operator!=(const List& left,
	const List& right);
    virtual void put_i_th(const T value, const int index);
    virtual void swap(const int index);
};
typedef int T;
class Array {
private:
    int lower_index;
    int upper_index;
    T *array;
protected:
    virtual void allocate(const int minindex, const int maxindex);
    virtual void copy(const Array&other);
public:
    Array(const int minindex, const int maxindex);
    Array(const Array& other);
    virtual const int count() const;
    virtual const int lower() const;
    virtual const int upper() const;
    virtual const T item(const int index) const;
      const T Array::operator[](const int index); // ERROR - qualification ignored
    virtual const bool valid_index(const int index) const;
    virtual const bool empty() const;
    friend const bool operator==(const Array& left, const Array& right);
    friend const bool operator!=(const Array& left, const Array& right);
    virtual void put(const T value, const int index);
    virtual void wipe_out();
    Array& operator=(const Array& other);
    virtual ~Array();
};
class Fixed_List: public List, private Array {
protected:
    virtual void go_offleft() const;
    virtual void go_offright() const;
    virtual void copy(const List& other);
public:
    Fixed_List(const List& other);
    Fixed_List(const int size): Array(1, size) { };
    virtual const bool empty() const;
    virtual const int count() const;
    virtual const T item() const;
    virtual const T i_th(const int index) const;
    virtual void move(const int index) const;
    virtual void put(const T value);
    virtual void put_i_th(const T value, const int index);
    virtual void wipe_out() { };
    Fixed_List& operator=(const List& other);
};

void Fixed_List::go_offleft() const
{
    cursor_position = 0;// ERROR - 
};

@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
