head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.54
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.01;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.01;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// Build don't link: 
// GROUPS passed old-abort
const int TRUE = 1;
const int FALSE = 0;

class Rep {
protected:
    Rep(): count(0)
	{ }
    Rep(const Rep& other): count(0)
	{ }

    Rep& operator=(const Rep& other)
	{ /* DO NOT copy over other.count */
	  return *this; }

public:		// TODO - for now
    // Because it is to hard to restrict these operations to the descendants
    // of Rep<REP> that we haven't named yet.  So we just make them public.
    void inc()
	{ count++; }
    void dec()
	{ if (0 == --count) delete this; }
private:
    unsigned count;
};

template<class REP>
class Ref {
public:
    Ref(): rep(0)
	{ }
    Ref(const Ref<REP>& other): rep(other.rep)
	{ if (rep) rep->inc(); }
    ~Ref()
	{ if (rep) rep->dec();
	  rep = 0; }

    Ref<REP>& operator=(const Ref<REP>& other)
	{ if (rep != other.rep) {
	    if (rep) rep->dec();
	    rep = other.rep;
	    if (rep) rep->inc(); }
	  return *this; }

    bool null() const
	{ return 0 == rep ? TRUE: FALSE; }
    bool valid() const
	{ return 0 != rep ? TRUE: FALSE; }

    REP* operator->() const		// should be a valid() reference
	{ return rep; }
    operator REP*() const;		// should be a valid() reference

protected:
    REP *rep;

    Ref(REP *r): rep(r)
	{ if (rep) rep->inc(); }

    Ref<REP>& operator=(REP *r)
	{ if (rep != r) {
	    if (rep) rep->dec();
	    rep = r;
	    if (rep) rep->inc(); }
	  return *this; }
};

template<class REP>
Ref<REP>::operator REP*() const		// should be a valid() reference
{ return rep; }

template<class REP> 
inline int
operator==(const Ref<REP>& a, const Ref<REP>& b)
{ return (REP *) a == (REP *) b; }

template<class REP> 
inline int
operator!=(const Ref<REP>& a, const Ref<REP>& b)
{ return (REP *) a != (REP *) b; }

class XRep: public Rep {
public:
    int i;
};

int
main()
{
    Ref<XRep> y;

    return y != y;
}
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
