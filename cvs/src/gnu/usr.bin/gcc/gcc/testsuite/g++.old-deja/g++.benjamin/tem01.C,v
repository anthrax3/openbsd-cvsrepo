head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.36.59;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.36.59;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// Build don't link: 
// prms-id: 13911

template<unsigned int N>
class ref_counter {
public:
  ref_counter() : p_refcnt(new unsigned int(N)) {}
  ref_counter(const ref_counter<N>& x) : p_refcnt(x.p_refcnt) { 
    ++*p_refcnt; 
  }
  ref_counter& operator=(const ref_counter<N>& rhs) {
    ++*rhs.p_refcnt;
    decrement();
    p_refcnt = rhs.p_refcnt;
    return *this;
  }
  ~ref_counter() {decrement();}
  
  bool unique() const {return *p_refcnt == N;}
  
private:
  unsigned int* p_refcnt;
  void decrement() {
    if (unique()) delete p_refcnt;
    else --*p_refcnt;
  }
};

template<class T, unsigned int N>
class ref_pointer {
public:
   
  ref_pointer() : the_p(0) {}  
  ref_pointer(T* just_newed) : the_p(just_newed) {}       
  virtual ~ref_pointer() {if (unique()) delete the_p;}
protected:
  ref_pointer(T* the_p_arg, ref_counter<N>& ref_count_arg)
    : the_p(the_p_arg), ref_count(ref_count_arg) {}               

public:
   
  ref_pointer& operator=(const ref_pointer&); 
  ref_pointer& operator=(T*);                         
  operator const T*() const {return the_p;}
  T* operator()() {return the_p;} 
  T* operator()() const {return the_p;} 
  T& operator*() const {return *the_p;}                       
  friend bool operator==(const ref_pointer<T, N>& lhs, 
			 const ref_pointer<T, N>& rhs) {
    return lhs.the_p == rhs.the_p;
  }
  friend bool operator!=(const ref_pointer<T, N>& lhs, 
			 const ref_pointer<T, N>& rhs) {
    return lhs.the_p != rhs.the_p;
  }
  
   
  bool unique() const {return ref_count.unique();}
  bool isNull() const {return the_p==0;}

protected:
  ref_counter<N>& refCount() {return ref_count;}

private:
   
  ref_counter<N> ref_count;
  T* the_p;
};

template<class T, unsigned int N>
ref_pointer<T, N>& ref_pointer<T, N>::operator=(const ref_pointer<T, N>& rhs) {
  if (the_p != rhs.the_p) {
    if (unique()) delete the_p;
    the_p = rhs.the_p;
    ref_count = rhs.ref_count;
  }
  return *this;
}


template<class T, unsigned int N>
ref_pointer<T, N>& ref_pointer<T, N>::operator=(T* just_newed) { 
  if (unique()) delete the_p;
  the_p = just_newed;
  ref_count = ref_counter<N>();
  return *this;
}



template<class T>
class CountedObjPtr : public ref_pointer<T, 1> {
public:
  CountedObjPtr() {}
  CountedObjPtr(T* just_newed) : ref_pointer<T, 1>(just_newed) {}
  CountedObjPtr(T* the_p_arg, ref_counter<1>& ref_count_arg)
    : ref_pointer<T, 1>(the_p_arg, ref_count_arg) {}
  CountedObjPtr<T>& operator=(T* rhs) {
    ref_pointer<T, 1>::operator=(rhs); 
    return *this; 
  }
  CountedObjPtr<T>& operator=(const CountedObjPtr<T>& rhs) { 
    ref_pointer<T, 1>::operator=(rhs); 
    return *this; 
  }
  T* operator->() const {return (*this)();}

};





//instantiating type

class TSObservable;

class TSObserver {
public:
   
  enum TSType { NormalTS, UpYldCrvTS, DownYldCrvTS, ZeroVolTS };
   
  virtual ~TSObserver() {}
   
  virtual void update(TSObservable* theChangedObservable) = 0;
  virtual TSType key() const { return myKey; }
  virtual TSType& key() { return myKey; }
protected:
  TSObserver(TSType myKeyArg) : myKey(myKeyArg) {}
  TSType myKey;
};



//now try to instantiate
template class CountedObjPtr<TSObserver>;
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
