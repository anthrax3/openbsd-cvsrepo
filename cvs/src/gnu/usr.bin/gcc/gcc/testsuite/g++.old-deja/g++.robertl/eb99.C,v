head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.58
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.27;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@ 
 
 
 
 
 

 
 
 
 




 

class ref_counted
{
 
protected:
        ref_counted( void ) : _count( 0 ) {}

public:
 
        unsigned int add_ref( void ) { return ++_count; }
        unsigned int release( void ) { return --_count; }
        unsigned int count( void ) const { return _count; }

 
protected:
        unsigned int _count;
};


 


template < class T >
class ref_ptr
{
 
public:
        ref_ptr( T* ptr = 0 ) : _ptr( ptr )
        {
                add_ref();
        }

        ref_ptr( const ref_ptr & rptr ) : _ptr( rptr.get() )
        {
                add_ref();
        }

        ~ref_ptr( void ) { release(); }

 
        T* get( void ) const { return _ptr; }
        T* operator->( void ) const { return get(); }
        T& operator*( void ) const { return *get(); }

        bool operator!( void ) const { return get() == 0; }
        bool operator==( const ref_ptr & rptr ) const { return *get() == *rptr;
}
        bool operator<( const ref_ptr & rptr ) const { return *get() < *rptr; }


        bool operator==( T* ptr ) const { return *get() == *ptr; }
        bool operator<( T* ptr ) const { return *get() < *ptr; }

        const ref_ptr & operator=( const ref_ptr & rptr )
        {
                release();
                _ptr = rptr.get();
                add_ref();

                return *this;
        }

       T* operator=( T* ptr )    
       {
         release();
         _ptr = ptr;
         add_ref();

         return _ptr;
       }

protected:
        void add_ref( void )
        {
                if( _ptr )
                        _ptr->add_ref();
        }

        void release( void )
        {
                if( _ptr && 0 == _ptr->release() )
                {
                        delete _ptr;
                        _ptr = 0;
                }
        }

 
protected:
        T *     _ptr;
};


template< class T >
bool operator==( T* ptr, const ref_ptr< T > & rptr )
{
        return *ptr == *rptr;
}

template< class T >
bool operator<( T* ptr, const ref_ptr< T > & rptr )
{
        return *ptr < *rptr;
}



class Baz : public ref_counted {
  int dummy;
};


class Bar;

int main() {
  ref_ptr<Baz> foo;
  static_cast<Bar *> (foo)->DoSomething;  //ERROR - invalid cast
}
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
