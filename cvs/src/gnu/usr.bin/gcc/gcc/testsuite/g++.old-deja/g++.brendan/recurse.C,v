head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.54
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.01;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.01;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// Build don't link: 
// GROUPS passed recursive-aborts
// types
typedef unsigned int DBflag;   // for storing user flag value
typedef unsigned long DBoffset; // 32-bit unsigned integer
typedef DBoffset DBsize;  // type for storing sizes of objects
typedef unsigned char DBbyte;   // 8-bit unsigned char

class DBlink
{
protected:
  DBbyte link[4];       // hold link in portable MSB first format
public:
  DBlink(DBoffset = 0, DBflag = 0);
  DBlink &operator=(const DBlink &);
  DBlink &operator=(DBoffset);
  operator DBoffset();
  operator const DBbyte *() { return link; }
  void set_flag() { link[0] |= 0x80; }
  void reset_flag() { link[0] &= 0x7f; }
  int test_flag() const { return (link[0] & 0x80) != 0; }
};

typedef DBlink DBsizerec;       // hold data record size in portable format

// constants
const DBoffset DB_NULL = 0;

class DBlinkrec
{
protected:
  // offsets are stored with MSB in link[0]
  DBlink l;  // offset into link file of right child - MSB = red bit
  DBlink r;  // offset into link file of left child - MSB = delete
  DBlink d;  // offset into parallel data file - MSB = user flag
public:
  DBlinkrec():l(DB_NULL), r(DB_NULL), d(DB_NULL) {}
  void make_red() // set link to red
  { l.set_flag(); }
  void make_black() // set link to black
  { l.reset_flag(); }
  int is_red() const // indicates whether this is a red link
  { return l.test_flag(); }
  void set_discard() // set discard flag
  { r.set_flag(); }
  void reset_discard() // reset discard flag
  { r.reset_flag(); }
  int is_discarded() const // check discard flag
  { return r.test_flag(); }
  void set_flag() // set user flag
  { d.set_flag(); }
  void reset_flag() // reset user flag
  { d.reset_flag(); }
  int is_flag() const // check user flag
  { return d.test_flag(); }

  friend class DataBase;
};

class DBpathrec : public DBlinkrec
{
  DBoffset offset;    // offset of link record in LNK file
public:
  DBpathrec():offset(DB_NULL) { }
  DBpathrec(DBoffset off, const DBlinkrec &lr):offset(off), DBlinkrec(lr) {}
  operator DBoffset() { return offset; }
  DBpathrec &operator=(DBoffset off) { offset = off; return *this; }
  DBpathrec &operator=(const DBpathrec &pr)
  { offset = pr.offset; (DBlinkrec)*this = (DBlinkrec)pr; return *this; }

  friend class DataBase;
};

int main()
{
  DBpathrec a(), b();

  a = b;// ERROR -  non-lvalue in assignment.*
}

@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
