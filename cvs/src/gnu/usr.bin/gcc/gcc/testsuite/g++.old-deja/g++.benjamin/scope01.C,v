head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.36.59;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.36.59;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// Build don't link:
// 980604 bkoz
// 3.4.5 Class member access p 4
// nested and non-nested calls, no dtors

struct L { 
  int ii; 
  void foo(int a) {++a;}
  struct Linner {
    int ii_inner; 
    void foo_inner(int b) {++b;}
  };
};
class A : public L {};
class B : public L {};
class C : public A, public B {};


void foo() {
  // straight call
  C x;
  x.A::ii = 5;
  x.A::foo(x.A::ii);
  
  // 5.1 Primary expressions
  // p 8 
  // a nested name specifier that names a class,
  // optionally followed by the keyword template and then followd by
  // the name of a member of either that class or one of its base
  // classes is a qualified-id.  (3.4.3.1 describes their lookup.) 

  // 5.2.5 Class memember access 

  // p 3 if E1 has the type 'pointer to class X' then 
  // E1->E2 == (*(E1)).E32
  // E1 == object-expression
  // E2 == id-expression
  // thus everything gets converted to the "." notation

  // p 2
  // the id-expression shall name a member of the class
  // (object-expression) or of one of its base classes.

  // p4 if E2 is a nested type (of the object-expression), tye
  // expression E1.E2 is ill formed.

  // try 1 nested call - ERROR
#if 0
  C x2;
  x2.A::L::Linner::ii_inner = 6; //ERROR violates p2, does not name member of C
  x2.A::L::Linner::foo_inner(x2.A::L::Linner::ii_inner);
#endif

  //try2: scoped method call  -edg +acc +g++
#if 1
  C::A::Linner x2;
  x2.A::Linner::ii_inner = 6;
  x2.A::Linner::foo_inner(x2.A::Linner::ii_inner);
#endif

  //try 3: non-scoped method call  -edg +acc +g++
#if 0
  C::A::L::Linner x3;
  x3.ii_inner = 6;
  x3.foo_inner(x3.ii_inner);
#endif
}




@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
