head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.54
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.20;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.20;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// test of rtti of non-class types
// Special g++ Options: -frtti

#include <typeinfo>

extern "C" {
  int printf(const char *, ...);
  void exit(int);
}

int i;
short s;
char c;
long l;

unsigned int ui;
unsigned short us;
unsigned char uc;
unsigned long ul;

float f;
double d;

int& ri = i;
const volatile int cvi = 10;
volatile const int vci = 20;
const int ci = 100;

int *pi;
int ai[10];

enum color { red, blue, green, yellow};

int (*fp)();
int (*gp)();
int (*hp)(int);

class XX {
public:
  int xxi;
  float xxf;
  int xxf1 () { return 0; };
  int xxf2 (int k) { return 0; };
};

class YY {
public:
  int yyi;
  double yyd;
  int yyf1 (float f) { return 0; };
  double yyf2 () {return yyd;};
};

int XX::*ptmd1;
int XX::*ptmd2;
float XX::*ptmd3;
int YY::*ptmd4;

int (XX::*ptmf1) ();
int (XX::*ptmf2) ();
int (XX::*ptmf3) (int);
int (YY::*ptmf4) ();

int func1 ()
{ return 0;}

int func2 ()
{ return 1;}

int func3 (int i)
{ return i;}

short func4 ()
{ return 99;}

void error  (int i)
{
  exit(i);
}

int main ()
{
  if (typeid(i) != typeid(int)) error(1);
  if (typeid(s) != typeid(short)) error(2);
  if (typeid(c) != typeid(char)) error(3);
  if (typeid(l) != typeid(long)) error(4);
  if (typeid(ui) != typeid(unsigned int)) error(5);
  if (typeid(us) != typeid(unsigned short)) error(6);
  if (typeid(uc) != typeid(unsigned char)) error(7);
  if (typeid(ul) != typeid(unsigned long)) error(8);
  if (typeid(f) != typeid(float)) error(9);
  if (typeid(d) != typeid(double)) error(10);

  if (typeid(*pi) != typeid(int)) error(51);
  if (typeid(pi) == typeid(ai)) error(52);
  if (typeid(ri) != typeid(i)) error(53);
  if (typeid(cvi) != typeid(vci)) error (54);
  if (typeid(vci) != typeid(i)) error(55);
  if (typeid(ci) != typeid(cvi)) error (56);
  if (typeid(ci) != typeid(const int)) error(57);

  if (typeid(func1) != typeid(func2)) error (81);
  if (typeid(func2) == typeid(func3)) error (82);
  if (typeid(func1) == typeid(func4)) error (83);
  if (typeid(func3) == typeid(func4)) error (84);

  if (typeid(red) != typeid(color)) error (101);
  if (typeid(green) != typeid(blue)) error (102);

  if (typeid(fp) != typeid(gp)) error (103);
  if (typeid(gp) == typeid(hp)) error (104);

  if (typeid(ptmd1) != typeid(ptmd2)) error (105);
  if (typeid(ptmd1) == typeid(ptmd3)) error (106);
  if (typeid(ptmd2) == typeid(ptmd4)) error (107);

  if (typeid(ptmf1) != typeid(ptmf2)) error (108);
  if (typeid(ptmf2) == typeid(ptmf3)) error (109);
  if (typeid(ptmf1) == typeid(ptmf4)) error (110);
  return 0;
}
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
