head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.16;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.16;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// prms-id: 8155

int fail = 1;

class CMainWindow;
class CFrameWnd;
class CWnd;
class CCmdTarget;
 
typedef void (CCmdTarget::*AFX_PMSG)( void);
typedef void (CWnd::*AFX_PMSGW)( void);

struct AFX_MSGMAP_ENTRY {
  unsigned int  nMessage;    
  AFX_PMSG pfn;
};

struct AFX_MSGMAP {
  const AFX_MSGMAP* pBaseMap;
  const AFX_MSGMAP_ENTRY* lpEntries;
};

class CCmdTarget {
public:
  CCmdTarget();
private:
  static AFX_MSGMAP_ENTRY _messageEntries[];
protected:
  static const AFX_MSGMAP messageMap;
  virtual const AFX_MSGMAP* GetMessageMap() const; 
};

const   AFX_MSGMAP CCmdTarget::messageMap = {
  0, &CCmdTarget::_messageEntries[0]
};

const AFX_MSGMAP* CCmdTarget::GetMessageMap() const {
  return &CCmdTarget::messageMap;
}

AFX_MSGMAP_ENTRY CCmdTarget::_messageEntries[] =
{
  { 0, 0 }
};

CCmdTarget :: CCmdTarget() { }
 
class CWnd : public CCmdTarget {
public:
  CWnd();

protected:
  void OnPaint();
private:
  static AFX_MSGMAP_ENTRY _messageEntries[];
protected:
  static   const AFX_MSGMAP messageMap;
  virtual const AFX_MSGMAP* GetMessageMap() const; 
};

CWnd :: CWnd() {
}

void CWnd :: OnPaint() {
}

const AFX_MSGMAP*   CWnd ::GetMessageMap() const {
  return &  CWnd ::messageMap;
}
const AFX_MSGMAP   CWnd ::messageMap = {
  &  CCmdTarget ::messageMap, &  CWnd ::_messageEntries[0]
  };
AFX_MSGMAP_ENTRY   CWnd ::_messageEntries[] = { 
  {0, (AFX_PMSG)0 } }; 

class CFrameWnd : public CWnd {
public:
  CFrameWnd();
protected:
private:
  static AFX_MSGMAP_ENTRY _messageEntries[];
protected:
  static   const AFX_MSGMAP messageMap;
  virtual const AFX_MSGMAP* GetMessageMap() const; 
};

CFrameWnd :: CFrameWnd() { }

const AFX_MSGMAP*   CFrameWnd ::GetMessageMap() const {
  return &  CFrameWnd ::messageMap;
}
const AFX_MSGMAP   CFrameWnd ::messageMap = {
  &  CWnd ::messageMap, &  CFrameWnd ::_messageEntries[0]
  };
AFX_MSGMAP_ENTRY   CFrameWnd ::_messageEntries[] = { 
  {0, (AFX_PMSG)0 } }; 

class CMainWindow : public CFrameWnd {
public:
  CMainWindow();
  void OnPaint();
  void callProc();
private:
  static AFX_MSGMAP_ENTRY _messageEntries[];
protected:
  static   const AFX_MSGMAP messageMap;
  virtual const AFX_MSGMAP* GetMessageMap() const; 
};

CMainWindow :: CMainWindow()
{
}
void CMainWindow :: OnPaint()
{
  fail = 0;
}

void CMainWindow :: callProc()
{
  const AFX_MSGMAP* pMessageMap;
  const AFX_MSGMAP_ENTRY *lpEntry;

  pMessageMap = GetMessageMap();
  lpEntry = pMessageMap->lpEntries;

  if( lpEntry->nMessage == 100) {
    (this->*lpEntry->pfn)();
  }
}

const AFX_MSGMAP*   CMainWindow ::GetMessageMap() const {
  return &  CMainWindow ::messageMap;
}
const AFX_MSGMAP   CMainWindow ::messageMap = {
  &  CFrameWnd ::messageMap, &  CMainWindow ::_messageEntries[0]
  };
AFX_MSGMAP_ENTRY   CMainWindow ::_messageEntries[] = { 
  { 100, (AFX_PMSG)(AFX_PMSGW)(void (CWnd::*)(void))&CMainWindow::OnPaint },
  {0, (AFX_PMSG)0 }
}; 

int main( int argc, char **argv) {
  CMainWindow     myWindow;

  myWindow.callProc();
  return fail;
}
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
