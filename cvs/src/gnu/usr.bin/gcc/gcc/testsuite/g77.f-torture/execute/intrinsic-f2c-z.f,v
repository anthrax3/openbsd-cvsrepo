head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.54
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@c @;


1.1
date	2003.11.29.12.37.31;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@c  intrinsic-f2c-z.f
c
c Test double complex intrinsics Z*.  
c These functions are f2c extensions
c
c     David Billinghurst <David.Billinghurst@@riotinto.com>
c
      double complex z, a
      double precision x
      logical fail
      intrinsic zabs, zcos, zexp, zlog, zsin, zsqrt
      common /flags/ fail
      fail = .false.

c     ZABS - Absolute value
      z = (3.0d0,-4.0d0)
      x = 5.0d0
      call c_d(ZABS(z),x,'ZABS(double complex)')
      call p_d_z(ZABS,z,x,'ZABS')

c     ZCOS - Cosine
      z = (3.0d0,1.0d0)
      a = (-1.52763825012d0,-0.165844401919)
      call c_z(ZCOS(z),a,'ZCOS(double complex)')
      call p_z_z(ZCOS,z,a,'ZCOS')

c     ZEXP - Exponential
      z = (3.0d0,1.0d0)
      a = (10.8522619142d0,16.9013965352)
      call c_z(ZEXP(z),a,'ZEXP(double complex)')
      call p_z_z(ZEXP,z,a,'ZEXP')

c     ZLOG - Natural logarithm
      call c_z(ZLOG(a),z,'ZLOG(double complex)')
      call p_z_z(ZLOG,a,z,'ZLOG')

c     ZSIN - Sine
      z = (3.0d0,1.0d0)
      a = (0.217759551622d0,-1.1634403637d0)
      call c_z(ZSIN(z),a,'ZSIN(double complex)')
      call p_z_z(ZSIN,z,a,'ZSIN')

c     ZSQRT - Square root
      z = (0.0d0,-4.0d0)
      a = sqrt(2.0d0)*(1.0d0,-1.0d0)
      call c_z(ZSQRT(z),a,'ZSQRT(double complex)')
      call p_z_z(ZSQRT,z,a,'ZSQRT')

      if ( fail ) call abort()
      end

      subroutine failure(label)
c     Report failure and set flag
      character*(*) label
      logical fail
      common /flags/ fail
      write(6,'(a,a,a)') 'Test ',label,' FAILED'
      fail = .true.
      end

      subroutine c_z(a,b,label)
c     Check if DOUBLE COMPLEX a equals b, and fail otherwise
      double complex a, b
      character*(*) label
      if ( abs(a-b) .gt. 1.0e-5 ) then
         call failure(label)
         write(6,*) 'Got ',a,' expected ', b
      end if
      end

      subroutine c_d(a,b,label)
c     Check if DOUBLE PRECISION a equals b, and fail otherwise
      double precision a, b
      character*(*) label
      if ( abs(a-b) .gt. 1.0d-5 ) then
         call failure(label)
         write(6,*) 'Got ',a,' expected ', b
      end if
      end

      subroutine p_z_z(f,x,a,label)
c     Check if DOUBLE COMPLEX f(x) equals a for DOUBLE COMPLEX x
      double complex f,x,a
      character*(*) label
      call c_z(f(x),a,label)
      end

      subroutine p_d_z(f,x,a,label)
c     Check if DOUBLE PRECISION f(x) equals a for DOUBLE COMPLEX x
      double precision f,x
      double complex a
      character*(*) label
      call c_d(f(x),a,label)
      end
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
