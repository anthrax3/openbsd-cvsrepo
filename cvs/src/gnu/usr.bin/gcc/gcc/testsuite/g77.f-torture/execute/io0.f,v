head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@c @;


1.1
date	2003.11.29.12.37.31;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@*     Preliminary tests for a few things in the i/o library.
*     Thrown together by Dave Love not from specific bug reports --
*     other ideas welcome.

      character *(*) fmt
      parameter (fmt='(1x,i3,f5.1)')
*     Scratch file makes sure we can use one and avoids dealing with
*     explicit i/o in the testsuite.
      open(90, status='scratch') ! try a biggish unit number
      write(90, '()')           ! extra record for interest
*     Formatted i/o can go wild (endless loop AFAIR) if we're wrongly
*     assuming an ANSI sprintf.
      write(90, fmt) 123, 123.0
      backspace 90              ! backspace problems reported on DOSish systems
      read(90, fmt) i, r
      endfile 90
      if (i/=123 .or. nint(r)/=123) call abort
      rewind 90                 ! make sure we can rewind too
      read(90, '()')
      read(90, fmt) i, r
      if (i/=123 .or. nint(r)/=123) call abort
      close(90)
*     Make sure we can do unformatted i/o OK.  This might be
*     problematic on DOS-like systems if we've done an fopen in text
*     mode, not binary.     
      open(90, status='scratch', access='direct', form='unformatted',
     +     recl=8)
      write(90, rec=1) 123, 123.0
      read(90, rec=1) i, r
      if (i/=123 .or. nint(r)/=123) call abort
      close(90)
      open(90, status='scratch', form='unformatted')
      write(90) 123, 123.0
      backspace 90
      read(90) i, r
      if (i/=123 .or. nint(r)/=123) call abort
      close(90)
*     Fails at 1998-09-01 on spurious recursive i/o check (fixed by
*     1998-09-06 libI77 change):
      open(90, status='scratch', form='formatted', recl=16,
     +     access='direct')
      write(90, '(i8,f8.1)',rec=1) 123, 123.0
      read(90, '(i8,f8.1)', rec=1) i, r
      if (i/=123 .or. nint(r)/=123) call abort
      close(90)
      end
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
