head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@c @;


1.1
date	2003.11.29.12.37.29;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@c     SEGVs in loop.c with -O2.

      character*80 function nxtlin(lun,ierr,itok)
      character onechr*1,twochr*2,thrchr*3
      itok=0
      do while (.true.)
         read (lun,'(a)',iostat=ierr) nxtlin
         if (nxtlin(1:1).ne.'#') then
            ito=0
            do 10 it=1,79
               if (nxtlin(it:it).ne.' ' .and. nxtlin(it+1:it+1).eq.' ')
     $              then
                  itast=0
                  itstrt=0
                  do itt=ito+1,it
                     if (nxtlin(itt:itt).eq.'*') itast=itt
                  enddo
                  itstrt=ito+1
                  do while (nxtlin(itstrt:itstrt).eq.' ')
                     itstrt=itstrt+1
                  enddo
                  if (itast.gt.0) then
                     nchrs=itast-itstrt
                     if (nchrs.eq.1) then
                        onechr=nxtlin(itstrt:itstrt)
                        read (onechr,*) itokn
                     elseif (nchrs.eq.2) then
                        twochr=nxtlin(itstrt:itstrt+1)
                        read (twochr,*) itokn
                     elseif (nchrs.eq.3) then
                        thrchr=nxtlin(itstrt:itstrt+2)
                        read (thrchr,*) itokn
                     elseif (nchrs.eq.4) then
                        thrchr=nxtlin(itstrt:itstrt+3)
                        read (thrchr,*) itokn
                     endif
                     itok=itok+itokn
                  else
                     itok=itok+1
                  endif
                  ito=it+1
               endif
 10         continue
            return
         endif
      enddo
      return
      end
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
