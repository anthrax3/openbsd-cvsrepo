head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.54
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.56;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.56;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Copyright (C) 2000 Free Software Foundation, Inc.  */

/* { dg-do preprocess } */
/* { dg-options "-pedantic -std=gnu99" } */

/* Tests macro syntax, for both definition and invocation, including:-

   o Full range of macro definition semantics.
   o No. of arguments supplied to function-like macros.
   o Odd GNU rest args behavior.
   o Macro arguments do not flow into the rest of the file.  */


/* Test basic macro definition syntax.  The macros are all called
   "foo" deliberately to provoke an (excess) redefinition warning in
   case the macros succeed in being entered in the macro hash table
   despite being an error.

   Split a couple of the lines to check that the errors appear on the
   right line (i.e. are associated with the correct token).  */

#define ;			/* { dg-error "identifier" } */
#define SEMI;			/* { dg-warning "space" } */
#define foo(X			/* { dg-error "missing" } */
#define foo\
(X,)				/* { dg-error "parameter name" } */
#define foo(, X)		/* { dg-error "parameter name" } */
#define foo(X, X)		/* { dg-error "duplicate" } */
#define foo(X Y)		/* { dg-error "comma" } */
#define foo(()			/* { dg-error "may not appear" } */
#define foo(..., X)		/* { dg-error "missing" } */
#define foo \
__VA_ARGS__			/* { dg-warning "__VA_ARGS__" } */
#define goo(__VA_ARGS__)	/* { dg-warning "__VA_ARGS__" } */
#define hoo(...) __VA_ARGS__	/* OK.  */
#define __VA_ARGS__		/* { dg-warning "__VA_ARGS__" } */
__VA_ARGS__			/* { dg-warning "__VA_ARGS__" } */

/* test # of supplied arguments.  */
#define none()
#define one(x)
#define two(x, y)
#define var0(...)
#define var1(x, ...)
none()				/* OK.  */
none(ichi)			/* { dg-error "passed 1" } */
one()				/* OK.  */
one(ichi)			/* OK.  */
one(ichi\
, ni)				/* { dg-error "passed 2" } */
two(ichi)			/* { dg-error "requires 2" } */
var0()				/* OK.  */
var0(ichi)			/* OK.  */
var1()				/* { dg-warning "rest arguments to be used" } */
var1(ichi)			/* { dg-warning "rest arguments to be used" } */
var1(ichi, ni)			/* OK.  */

/* This tests two oddities of GNU rest args - omitting a comma is OK,
   and backtracking a token on pasting an empty rest args.  */
#define rest(x, y...) x ## y	/* { dg-warning "ISO C" } */
rest(ichi,)			/* OK.  */
rest(ichi)			/* { dg-warning "rest arguments to be used" } */
#if 23 != rest(2, 3)		/* OK, no warning.  */
#error 23 != 23 !!
#endif

/* Test that we don't allow arguments to flow into the rest of the
   file.  */
#define half_invocation do_nowt(2
#define do_nowt(x) x
half_invocation )		/* OK.  */
do_nowt (half_invocation))	/* { dg-error "unterminated argument" } */
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
