head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.54
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.52;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.52;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Test for a bogus warning on comparison between signed and unsigned.
   This was inspired by code in gcc. */

/* { dg-do compile } */
/* { dg-options "-Wsign-compare" } */

int tf = 1;

void f(int x, unsigned int y)
{
  /* Test comparing conditional expressions containing truth values.
     This can occur explicitly, or e.g. when (foo?2:(bar?1:0)) is
     optimized into (foo?2:(bar!=0)).  */
  x > (tf?64:(tf!=x)); /* { dg-bogus "signed and unsigned" "case 1" } */
  y > (tf?64:(tf!=x)); /* { dg-bogus "signed and unsigned" "case 2" } */
  x > (tf?(tf!=x):64); /* { dg-bogus "signed and unsigned" "case 3" } */
  y > (tf?(tf!=x):64); /* { dg-bogus "signed and unsigned" "case 4" } */

  x > (tf?64:(tf==x)); /* { dg-bogus "signed and unsigned" "case 5" } */
  y > (tf?64:(tf==x)); /* { dg-bogus "signed and unsigned" "case 6" } */
  x > (tf?(tf==x):64); /* { dg-bogus "signed and unsigned" "case 7" } */
  y > (tf?(tf==x):64); /* { dg-bogus "signed and unsigned" "case 8" } */

  x > (tf?64:(tf>x)); /* { dg-bogus "signed and unsigned" "case 9" } */
  y > (tf?64:(tf>x)); /* { dg-bogus "signed and unsigned" "case 10" } */
  x > (tf?(tf>x):64); /* { dg-bogus "signed and unsigned" "case 11" } */
  y > (tf?(tf>x):64); /* { dg-bogus "signed and unsigned" "case 12" } */

  x < (tf?64:(tf<x)); /* { dg-bogus "signed and unsigned" "case 13" } */
  y < (tf?64:(tf<x)); /* { dg-bogus "signed and unsigned" "case 14" } */
  x < (tf?(tf<x):64); /* { dg-bogus "signed and unsigned" "case 15" } */
  y < (tf?(tf<x):64); /* { dg-bogus "signed and unsigned" "case 16" } */

  x > (tf?64:(tf>=x)); /* { dg-bogus "signed and unsigned" "case 17" } */
  y > (tf?64:(tf>=x)); /* { dg-bogus "signed and unsigned" "case 18" } */
  x > (tf?(tf>=x):64); /* { dg-bogus "signed and unsigned" "case 19" } */
  y > (tf?(tf>=x):64); /* { dg-bogus "signed and unsigned" "case 20" } */

  x > (tf?64:(tf<=x)); /* { dg-bogus "signed and unsigned" "case 21" } */
  y > (tf?64:(tf<=x)); /* { dg-bogus "signed and unsigned" "case 22" } */
  x > (tf?(tf<=x):64); /* { dg-bogus "signed and unsigned" "case 23" } */
  y > (tf?(tf<=x):64); /* { dg-bogus "signed and unsigned" "case 24" } */

  x > (tf?64:(tf&&x)); /* { dg-bogus "signed and unsigned" "case 25" } */
  y > (tf?64:(tf&&x)); /* { dg-bogus "signed and unsigned" "case 26" } */
  x > (tf?(tf&&x):64); /* { dg-bogus "signed and unsigned" "case 27" } */
  y > (tf?(tf&&x):64); /* { dg-bogus "signed and unsigned" "case 28" } */

  x > (tf?64:(tf||x)); /* { dg-bogus "signed and unsigned" "case 29" } */
  y > (tf?64:(tf||x)); /* { dg-bogus "signed and unsigned" "case 30" } */
  x > (tf?(tf||x):64); /* { dg-bogus "signed and unsigned" "case 31" } */
  y > (tf?(tf||x):64); /* { dg-bogus "signed and unsigned" "case 32" } */

  x > (tf?64:(!tf)); /* { dg-bogus "signed and unsigned" "case 33" } */
  y > (tf?64:(!tf)); /* { dg-bogus "signed and unsigned" "case 34" } */
  x > (tf?(!tf):64); /* { dg-bogus "signed and unsigned" "case 35" } */
  y > (tf?(!tf):64); /* { dg-bogus "signed and unsigned" "case 36" } */

}
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
