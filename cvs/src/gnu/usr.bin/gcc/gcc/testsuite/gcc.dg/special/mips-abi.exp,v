head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.54
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.11.29.12.38.01;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.38.01;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#   Copyright (C) 2002 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# This test checks whether MIPS ELF configurations pass the right
# ABI flags to the assembler.  An ABI flag should always be passed
# unless MEABI is selected.

load_lib gcc-dg.exp

# Only run this test on MIPS ELF targets
if {![istarget mips*-*-*] || [gcc_target_object_format] != "elf"} {
    return
}

# A list of all assembler ABI flags.  We should use SGI-compatible
# flags where possible.
set asm_abi_flags {-32 -n32 -64 -mabi=o64 -mabi=eabi}

# Return true if the configuration uses MEABI by default.
proc is_meabi_config {} {
    return [expr {[istarget mipsisa32*-*-elf*]
		  || [istarget mipsisa32el-*-elf*]
		  || [istarget mipsisa64-*-elf*]
		  || [istarget mipsisa64el-*-elf*]
		  || [istarget mipsisa64sr71k-*-elf*]}]
}

# Try to assemble mips-abi.s (an empty file), passing -v in order to
# get the assembler command line.  Check whether an appropriate ABI
# flag is passed.
#
# NAME is a name for the pass/fail line.
# ABIS is a list of acceptable assembler ABI flags, or "" if no
#   ABI flag is expected.
# FLAGS is a list of options for gcc.
proc check_mips_abi {name abis flags} {
    global srcdir subdir asm_abi_flags

    lappend flags "-v"
    set lines [gcc_target_compile "$srcdir/$subdir/mips-abi.s" \
				  "mips-abi.o" object \
				  [list "additional_flags=$flags"]]
    set good 0
    set bad 0
    foreach line [split $lines "\n"] {
	# Find the assembler command line.
	if {[string first "$srcdir/$subdir/mips-abi.s" $line] >= 0} {
	    foreach arg [split $line " "] {
		# Count the number of matching and non-matching
		# ABI options.
		if {[lsearch -exact $abis $arg] >= 0} {
		    incr good
		} elseif {[lsearch -exact $asm_abi_flags $arg] >= 0} {
		    incr bad
		}
	    }
	}
    }
    if {$good == ($abis != "") && $bad == 0} {
	pass "mips-abi $name"
    } else {
	fail "mips-abi $name"
    }
}

# Collect the default target flags.
set default_flags ""
set target [target_info name]
if {[info exists CFLAGS_FOR_TARGET]} {
    append default_flags " $CFLAGS_FOR_TARGET"
}
if {[board_info $target exists cflags]} {
    append default_flags " [board_info $target cflags]"
}
if {[board_info $target exists multilib_flags]} {
    append default_flags " [board_info $target multilib_flags]"
}

# See whether the default command line specifies an ABI.
set default_abi ""
foreach flag $default_flags {
    if {[string first "-mabi" $flag] == 0} {
	set default_abi $flag
    }
}

# If the command line does specify an ABI, just check for the
# appropriate assembler flag.
switch -- $default_abi {
    -mabi=meabi { check_mips_abi "MEABI" "" "" }
    -mabi=eabi { check_mips_abi "EABI" "-mabi=eabi" "" }
    -mabi=32 { check_mips_abi "o32" "-32" "" }
    -mabi=n32 { check_mips_abi "n32" "-n32" "" }
    -mabi=o64 { check_mips_abi "o64" "-mabi=o64" "" }
    -mabi=64 { check_mips_abi "n64" "-64" "" }
    "" {
	# MEABI configs shouldn't pass an ABI flag by default
	# but the others should.  It doesn't seem worthwhile
	# duplicating the configuration to ABI logic here,
	# so just accept any ABI.
	if {[is_meabi_config]} {
	    check_mips_abi "default" "" ""
	} else {
	    check_mips_abi "default" $asm_abi_flags ""
	}
	# See whether passing a -mabi flag does the right thing.
	# Only try ABIs that the SGI assembler also understands.
	check_mips_abi "o32" "-32" "-mabi=32"
	check_mips_abi "n32" "-n32" "-mabi=n32"
	check_mips_abi "64" "-64" "-mabi=64"
    }
}
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
