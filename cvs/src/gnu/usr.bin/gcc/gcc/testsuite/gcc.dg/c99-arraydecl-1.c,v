head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.49;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.49;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Test for C99 forms of array declarator.  */
/* Origin: Joseph Myers <jsm28@@cam.ac.uk> */
/* { dg-do compile } */
/* { dg-options "-std=iso9899:1999 -pedantic-errors" } */

/* Because GCC doesn't yet implement it, we don't yet test for [*] here.  */

/* Test each of: [quals], [quals expr], [static expr], [static quals expr],
   [quals static expr].  Not yet: [quals *].  */

void f00 (int a[const]);
void f01 (int [const]); /* { dg-bogus "warning" "warning in place of error" } */
/* { dg-error "abstract" "\[quals\] in abstract declarator" { target *-*-* } 12 } */
void
f02 (int a[const])
{
  int **b = &a; /* { dg-bogus "warning" "warning in place of error" } */
  /* { dg-error "discards" "discards quals" { target *-*-* } 17 } */
  int *const *c = &a;
}
void
f03 (a)
     int a[const];
{
  int **b = &a; /* { dg-bogus "warning" "warning in place of error" } */
  /* { dg-error "discards" "discards quals" { target *-*-* } 25 } */
  int *const *c = &a;
}

void f10 (int a[const 2]);
void f11 (int [const 2]); /* { dg-bogus "warning" "warning in place of error" } */
/* { dg-error "abstract" "\[quals expr\] in abstract declarator" { target *-*-* } 31 } */
void
f12 (int a[const 2])
{
  int **b = &a; /* { dg-bogus "warning" "warning in place of error" } */
  /* { dg-error "discards" "discards quals" { target *-*-* } 36 } */
  int *const *c = &a;
}
void
f13 (a)
     int a[const 2];
{
  int **b = &a; /* { dg-bogus "warning" "warning in place of error" } */
  /* { dg-error "discards" "discards quals" { target *-*-* } 44 } */
  int *const *c = &a;
}

void f20 (int a[static 2]);
void f21 (int [static 2]); /* { dg-bogus "warning" "warning in place of error" } */
/* { dg-error "abstract" "\[static expr\] in abstract declarator" { target *-*-* } 50 } */
void
f22 (int a[static 2])
{
  int **b = &a;
  int *const *c = &a;
}
void
f23 (a)
     int a[static 2];
{
  int **b = &a;
  int *const *c = &a;
}

void f30 (int a[static const 2]);
void f31 (int [static const 2]); /* { dg-bogus "warning" "warning in place of error" } */
/* { dg-error "abstract" "\[static quals expr\] in abstract declarator" { target *-*-* } 67 } */
void
f32 (int a[static const 2])
{
  int **b = &a; /* { dg-bogus "warning" "warning in place of error" } */
  /* { dg-error "discards" "discards quals" { target *-*-* } 72 } */
  int *const *c = &a;
}
void
f33 (a)
     int a[static const 2];
{
  int **b = &a; /* { dg-bogus "warning" "warning in place of error" } */
  /* { dg-error "discards" "discards quals" { target *-*-* } 80 } */
  int *const *c = &a;
}

void f40 (int a[const static 2]);
void f41 (int [const static 2]); /* { dg-bogus "warning" "warning in place of error" } */
/* { dg-error "abstract" "\[quals static expr\] in abstract declarator" { target *-*-* } 86 } */
void
f42 (int a[const static 2])
{
  int **b = &a; /* { dg-bogus "warning" "warning in place of error" } */
  /* { dg-error "discards" "discards quals" { target *-*-* } 91 } */
  int *const *c = &a;
}
void
f43 (a)
     int a[const static 2];
{
  int **b = &a; /* { dg-bogus "warning" "warning in place of error" } */
  /* { dg-error "discards" "discards quals" { target *-*-* } 99 } */
  int *const *c = &a;
}

/* Test rejection of static and type qualifiers in non-parameter contexts.  */
int x[const 2]; /* { dg-bogus "warning" "warning in place of error" } */
/* { dg-error "non-parameter" "quals in non-parm array" { target *-*-* } 105 } */
int y[static 2]; /* { dg-bogus "warning" "warning in place of error" } */
/* { dg-error "non-parameter" "static in non-parm array" { target *-*-* } 107 } */
void g (int a[static 2][3]);
void h (int a[2][static 3]); /* { dg-bogus "warning" "warning in place of error" } */
/* { dg-error "non-parameter" "static in non-final parm array" { target *-*-* } 110 } */
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
