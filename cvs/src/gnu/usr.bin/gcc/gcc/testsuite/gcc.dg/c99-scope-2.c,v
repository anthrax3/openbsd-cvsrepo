head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.54
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.37.52;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.52;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Test for new block scopes in C99.  Test for each new scope.  */
/* Origin: Joseph Myers <jsm28@@cam.ac.uk> */
/* { dg-do run } */
/* { dg-options "-std=iso9899:1999 -pedantic-errors" } */

extern void abort (void);
extern void exit (int);

int
main (void)
{
  struct foo { int i0; };
  int a, b, c, d;
  a = sizeof (struct foo);
  if (b = sizeof (struct foo { int i0; int i1; }))
    c = sizeof (struct foo { int i0; int i1; int i2; });
  if (!(a <= b && b <= c))
    abort ();
  if ((b = sizeof (struct foo { int i0; int i1; })), 0)
    c = sizeof (struct foo { int i0; int i1; int i2; });
  else
    d = sizeof (struct foo { int i0; int i1; int i2; int i3; });
  if (!(a <= b && b <= d))
    abort ();
  switch (b = sizeof (struct foo { int i0; int i1; }))
    default:
      c = sizeof (struct foo { int i0; int i1; int i2; });
  if (!(a <= b && b <= c))
    abort ();
  do
    c = sizeof (struct foo { int i0; int i1; int i2; });
  while ((b = sizeof (struct foo { int i0; int i1; })), 0);
  if (!(a <= b && b <= c))
    abort ();
  d = 1;
  while ((b = sizeof (struct foo { int i0; int i1; })), d)
    (c = sizeof (struct foo { int i0; int i1; int i2; })), d--;
  if (!(a <= b && b <= c))
    abort ();
  d = 1;
  for ((b = sizeof (struct foo { int i0; int i1; })); d; d--)
    c = sizeof (struct foo { int i0; int i1; int i2; });
  if (!(a <= b && b <= c))
    abort ();
  d = 1;
  for ((b = sizeof (struct foo { int i0; int i1; })); d; d--)
    c = sizeof (struct foo);
  if (!(a <= b && b == c))
    abort ();
  d = 1;
  for (; (b = sizeof (struct foo { int i0; int i1; })), d; d--)
    c = sizeof (struct foo { int i0; int i1; int i2; });
  if (!(a <= b && b <= c))
    abort ();
  d = 1;
  for (; (b = sizeof (struct foo { int i0; int i1; })), d; d--)
    c = sizeof (struct foo);
  if (!(a <= b && b == c))
    abort ();
  d = 1;
  for (; d; (b = sizeof (struct foo { int i0; int i1; })), d--)
    c = sizeof (struct foo { int i0; int i1; int i2; });
  if (!(a <= b && b <= c))
    abort ();
  d = 1;
  for (; d; (b = sizeof (struct foo { int i0; int i1; })), d--)
    c = sizeof (struct foo);
  if (!(a <= b && b == c))
    abort ();
  exit (0);
}
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
