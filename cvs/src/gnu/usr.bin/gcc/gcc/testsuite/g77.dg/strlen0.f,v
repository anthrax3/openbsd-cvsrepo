head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.56
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@c @;


1.1
date	2003.11.29.12.37.27;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.37.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@C     Substring range checking test program, to check behavior with respect
C     to X3J3/90.4 paragraph 5.7.1.
C
C     Patches relax substring checking for subscript expressions in order to
C     simplify coding (elimination of length checks for strings passed as
C     parameters) and to avoid contradictory behavior of subscripted substring
C     expressions with respect to unsubscripted string expressions.
C
C     Key part of 5.7.1 interpretation comes down to statement that in the
C     substring expression,
C        v ( e1 : e2 )
C     1 <= e1 <= e2 <= len to be valid, yet the expression
C        v ( : )
C     is equivalent to
C        v(1:len(v))
C
C     meaning that any statement that reads
C        str = v // 'tail'
C     (where v is a string passed as a parameter) would require coding as
C        if (len(v) .gt. 0) then
C           str = v // 'tail'
C        else
C           str = 'tail'
C        endif
C     to comply with the standard specification.  Under the stricter
C     interpretation, functions strcat and strlat would be incorrect as
C     written for null values of str1 and/or str2.
C
C     This code compiles and runs without error on
C       SunOS 4.1.3 f77 (-C option)
C       SUNWspro SPARCcompiler 4.2 f77 (-C option)
C       (and with proposed patches, gcc-2.9.2 -fbounds-check except for test 6,
C        which is a genuine, deliberate error - comment out to make further
C        tests)
C
C { dg-do run }
C { dg-options "-fbounds-check" }
C
C     G. Helffrich/Tokyo Inst. Technology Jul 24 2001

      character str*8,strres*16,strfun*16,strcat*16,strlat*16

      str='Hi there'

C     Test 1 - (current+patched) two char substring result
      strres=strfun(str,1,2)
      write(*,*) 'strres is ',strres

C     Test 2 - (current+patched) null string result
      strres=strfun(str,5,4)
      write(*,*) 'strres is ',strres

C     Test 3 - (current+patched) null string result
      strres=strfun(str,8,7)
      write(*,*) 'strres is ',strres

C     Test 4 - (current) error; (patched) null string result
      strres=strfun(str,9,8)
      write(*,*) 'strres is ',strres

C     Test 5 - (current) error; (patched) null string result
      strres=strfun(str,1,0)
      write(*,*) 'strres is ',strres

C     Test 6 - (current+patched) error
C     strres=strfun(str,20,20)
C     write(*,*) 'strres is ',strres

C     Test 7 - (current+patched) str result
      strres=strcat(str,'')
      write(*,*) 'strres is ',strres

C     Test 8 - (current) error; (patched) str result
      strres=strlat('',str)
      write(*,*) 'strres is ',strres

      end

      character*(*) function strfun(str,i,j)
      character str*(*)

      strfun = str(i:j)
      end

      character*(*) function strcat(str1,str2)
      character str1*(*), str2*(*)

      strcat = str1 // str2
      end

      character*(*) function strlat(str1,str2)
      character str1*(*), str2*(*)

      strlat = str1(1:len(str1)) // str2(1:len(str2))
      end
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
