head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.18
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.20
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.12
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.6
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.10
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2012.11.28.20.41.46;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.11.28.20.41.46;	author miod;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// { dg-do compile }
// { dg-options "-O2 -Winline" }
// Origin: <markus at oberhumer dot com>
// PR 17115: We should not emit -Winline warning for functions marked with
//  noinline

struct Foo {
  __attribute__((noinline)) int a(int r) { return r & 1; }
  virtual __attribute__((noinline)) int b(int r) { return r & 1; }
  static  __attribute__((noinline)) int c(int r) { return r & 1; }
};

int bar(int r) {
  Foo f;
  int k = 1; k &= f.a(r); k &= f.b(r); k &= f.a(r);
  return k;
}
@


1.1.1.1
log
@gcc 3.3.6
@
text
@@
