head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	gcc-3_3_6:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.11.29.12.36.57;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.29.12.36.57;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* This doesn't work on solaris2 for reasons described in PR 6482.  */
/* { dg-do run { xfail *-*-solaris2* } } */
#include <stdlib.h>

class Two {
private:
    int i, j, k;
public:
    static int count;
    Two( int ii, int jj ) { i = ii; j = jj; k = count++; };
    Two( void )           { i =  0; j =  0; k = count++; };
    int eye( void ) { return i; };
    int jay( void ) { return j; };
    int kay( void ) { return k; };
};

extern Two foo;
extern Two goo;
extern Two coo[];
extern Two koo[];

Two foo( 5, 6 ) __attribute__((init_priority(1005)));

Two goo __attribute__((init_priority(1007))) = Two( 7, 8 );

Two doo[ 3 ];

Two hoo[ 3 ] = {
    Two( 11, 12 ),
    Two( 13, 14 ),
    Two( 15, 16 )
};

Two coo[ 3 ] __attribute__((init_priority(1000)));

Two koo[ 3 ] __attribute__((init_priority(1000))) = {
    Two( 21, 22 ),
    Two( 23, 24 ),
    Two( 25, 26 )
};

Two xoo[ 3 ] __attribute__((init_priority(1100)));

Two zoo[ 3 ] __attribute__((init_priority(1100))) = {
    Two( 31, 32 ),
    Two( 33, 34 ),
    Two( 35, 36 )
};

int Two::count;

long x = 0;

#define X( n ) \
  do { if ( x & (1L << (n)) ) return 1; else x |= (1L << (n)); } while (0)

int main()
{

    X( coo[0].kay() );
    X( coo[1].kay() );
    X( coo[2].kay() );
    X( koo[0].kay() );
    X( koo[1].kay() );
    X( koo[2].kay() );
    if ( 0x3f != x ) abort ();

    X( foo.kay() );
    if ( 0x7f != x ) abort ();

    X( goo.kay() );
    if ( 0xff != x ) abort ();

    X( xoo[0].kay() );
    X( xoo[1].kay() );
    X( xoo[2].kay() );
    X( zoo[0].kay() );
    X( zoo[1].kay() );
    X( zoo[2].kay() );
    if ( 0x3fff != x ) abort ();

    X( doo[0].kay() );
    X( doo[1].kay() );
    X( doo[2].kay() );
    X( hoo[0].kay() );
    X( hoo[1].kay() );
    X( hoo[2].kay() );
    if ( 0xfffff != x ) abort ();

    exit (0);
}
@


1.1.1.1
log
@Import gcc-3.3.2. Only the compiler. ada frontend removed for space 
considerations.
@
text
@@
