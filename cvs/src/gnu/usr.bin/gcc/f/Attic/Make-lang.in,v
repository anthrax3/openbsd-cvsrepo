head	1.11;
access;
symbols
	OPENBSD_2_5:1.10.0.6
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.4
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.9.0.4
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@# @;


1.11
date	99.05.26.16.28.40;	author espie;	state dead;
branches;
next	1.10;

1.10
date	98.03.03.21.35.52;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.04.09.13.43.29;	author downsj;	state Exp;
branches;
next	1.8;

1.8
date	97.04.04.13.25.43;	author graichen;	state Exp;
branches;
next	1.7;

1.7
date	97.04.04.13.19.29;	author graichen;	state Exp;
branches;
next	1.6;

1.6
date	97.04.02.22.57.27;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.02.07.13.44.28;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.02.06.17.56.09;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.15.23.34.39;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.07.31.00.18.19;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.07.27.02.50.30;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.11
log
@So long, and thanks for all the bugs.
@
text
@# Top level makefile fragment for GNU Fortran.           -*-makefile-*-
#   Copyright (C) 1995, 1996 Free Software Foundation, Inc.

#This file is part of GNU Fortran.

#GNU Fortran is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU Fortran is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU Fortran; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
#02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g77)
# - the compiler proper (eg: f771)
# - define the names for selecting the language in LANGUAGES.

# Extra flags to pass to recursive makes (and to sub-configure).
# Use different quoting rules compared with FLAGS_TO_PASS so we can use
# this to set environment variables as well
# Note that GCC_FOR_TARGET, GCC_FLAGS aren't in here -- treated separately.
F77_FLAGS_TO_PASS = \
	CROSS="$(CROSS)" \
	AR_FLAGS="$(AR_FLAGS)" \
	AR_FOR_TARGET="$(AR_FOR_TARGET)" \
	BISON="$(BISON)" \
	BISONFLAGS="$(BISONFLAGS)" \
	CC="$(CC)" \
	CFLAGS="$(CFLAGS)" \
	X_CFLAGS="$(X_CFLAGS)" \
	LDFLAGS="$(LDFLAGS)" \
	LEX="$(LEX)" \
	LEXFLAGS="$(LEXFLAGS)" \
	MAKEINFO="$(MAKEINFO)" \
	MAKEINFOFLAGS="$(MAKEINFOFLAGS)" \
	RANLIB_FOR_TARGET="$(RANLIB_FOR_TARGET)" \
	RANLIB_TEST_FOR_TARGET="$(RANLIB_TEST_FOR_TARGET)" \
	SHELL="$(SHELL)" \
	exec_prefix="$(exec_prefix)" \
	prefix="$(prefix)" \
	tooldir="$(tooldir)" \
	bindir="$(bindir)" \
	libsubdir="$(libsubdir)"
#	"F77_FOR_BUILD=$(F77_FOR_BUILD)" \
#	"F77FLAGS=$(F77FLAGS)" \
#	"F77_FOR_TARGET=$(F77_FOR_TARGET)"

# This flag controls whether to install (overwrite) f77 on this system,
# and also whether to uninstall it when using the uninstall target.
# As shipped, the flag is a test of whether the `f77_install_ok'
# file exists in the build or source directories (top level), but
# you can just change it here if you like.
F77_INSTALL_FLAG = [ -f f77-install-ok -o -f $(srcdir)/f77-install-ok ]

# This flag is similar to F77_INSTALL_FLAG, but controls whether
# to install (ovewrite) f2c-related items on this system.  Currently
# these are `include/f2c.h' and `lib/libf2c.a', though at some point
# `bin/f2c' itself might be added to the g77 distribution.
F2C_INSTALL_FLAG = [ -f f2c-install-ok -o -f $(srcdir)/f2c-install-ok ]

# This flag controls whether it is safe to install gcc's libf2c.a
# even when there's already a lib/libf2c.a installed (which, unless
# F2C_INSTALL_FLAG is set, will be left alone).
F2CLIBOK = [ -f f2c-exists-ok -o -f $(srcdir)/f2c-exists-ok ]

# Actual names to use when installing a native compiler.
F77_INSTALL_NAME = `t='$(program_transform_name)'; echo f77 | sed $$t`
G77_INSTALL_NAME = `t='$(program_transform_name)'; echo g77 | sed $$t`

# Actual names to use when installing a cross-compiler.
F77_CROSS_NAME = `t='$(program_transform_cross_name)'; echo f77 | sed $$t`
G77_CROSS_NAME = `t='$(program_transform_cross_name)'; echo g77 | sed $$t`


# Define the names for selecting f77 in LANGUAGES.
# Note that it would be nice to move the dependency on g77
# into the F77 rule, but that needs a little bit of work
# to do the right thing within all.cross.
F77 f77: f771 f77-runtime

# Tell GNU make to ignore these if they exist.
.PHONY: F77 f77 f77-runtime f77-runtime-unsafe f77.all.build f77.all.cross \
  f77.start.encap f77.rest.encap f77.info f77.dvi maybe-f2c \
  f77.install-normal install-libf77 install-f2c-all install-f2c-header \
  install-f2c-lib f77.install-common f77.install-info f77.install-man \
  f77.uninstall f77.mostlyclean f77.clean f77.distclean f77.extraclean \
  f77.maintainer-clean f77.realclean f77.stage1 f77.stage2 f77.stage3 \
  f77.stage4 f77.distdir f77.rebuilt

# Create the compiler driver for g77 (only if `f77' is in LANGUAGES).
g77: f/g77.c $(CONFIG_H) $(LIBDEPS)
	case '$(LANGUAGES)' in \
	*f77*) \
	  $(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) \
	    -o $@@ $(srcdir)/f/g77.c $(srcdir)/f/zzz.c $(LIBS) ;; \
	esac

# Create a version of the g77 driver which calls the cross-compiler
# (only if `f77' is in LANGUAGES).
g77-cross: f/g77.c version.o $(LIBDEPS)
	case '$(LANGUAGES)' in \
	*f77*) \
	  $(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) \
	    -DGCC_NAME=\"$(GCC_CROSS_NAME)\" \
	    -o $@@ $(srcdir)/f/g77.c $(srcdir)/f/zzz.c $(LIBS) ;; \
	esac

# g77 documentation.
$(build_infodir)/f/g77.info: f/g77.texi f/bugs.texi f/install.texi f/news.texi
	$(MAKEINFO) -P$(srcdir)/f $(srcdir)/f/g77.texi \
	   -o $(build_infodir)/f/g77.info

# XXX OpenBSD What to do with dvi builds...?
$(srcdir)/f/g77.dvi: f/g77.texi f/bugs.texi f/install.texi f/news.texi
	$(TEXI2DVI) $(srcdir)/f/g77.texi

F77_SRCS = \
 $(srcdir)/f/assert.j \
 $(srcdir)/f/bad.c \
 $(srcdir)/f/bad.def \
 $(srcdir)/f/bad.h \
 $(srcdir)/f/bit.c \
 $(srcdir)/f/bit.h \
 $(srcdir)/f/bld-op.def \
 $(srcdir)/f/bld.c \
 $(srcdir)/f/bld.h \
 $(srcdir)/f/com-rt.def \
 $(srcdir)/f/com.c \
 $(srcdir)/f/com.h \
 $(srcdir)/f/config.j \
 $(srcdir)/f/convert.j \
 $(srcdir)/f/data.c \
 $(srcdir)/f/data.h \
 $(srcdir)/f/equiv.c \
 $(srcdir)/f/equiv.h \
 $(srcdir)/f/expr.c \
 $(srcdir)/f/expr.h \
 $(srcdir)/f/fini.c \
 $(srcdir)/f/flags.j \
 $(srcdir)/f/glimits.j \
 $(srcdir)/f/global.c \
 $(srcdir)/f/global.h \
 $(srcdir)/f/hconfig.j \
 $(srcdir)/f/implic.c \
 $(srcdir)/f/implic.h \
 $(srcdir)/f/input.j \
 $(srcdir)/f/info-b.def \
 $(srcdir)/f/info-k.def \
 $(srcdir)/f/info-w.def \
 $(srcdir)/f/info.c \
 $(srcdir)/f/info.h \
 $(srcdir)/f/intrin.c \
 $(srcdir)/f/intrin.def \
 $(srcdir)/f/intrin.h \
 $(srcdir)/f/lab.c \
 $(srcdir)/f/lab.h \
 $(srcdir)/f/lex.c \
 $(srcdir)/f/lex.h \
 $(srcdir)/f/malloc.c \
 $(srcdir)/f/malloc.h \
 $(srcdir)/f/name.c \
 $(srcdir)/f/name.h \
 $(srcdir)/f/parse.c \
 $(srcdir)/f/proj.c \
 $(srcdir)/f/proj.h \
 $(srcdir)/f/rtl.j \
 $(srcdir)/f/src.c \
 $(srcdir)/f/src.h \
 $(srcdir)/f/st.c \
 $(srcdir)/f/st.h \
 $(srcdir)/f/sta.c \
 $(srcdir)/f/sta.h \
 $(srcdir)/f/stb.c \
 $(srcdir)/f/stb.h \
 $(srcdir)/f/stc.c \
 $(srcdir)/f/stc.h \
 $(srcdir)/f/std.c \
 $(srcdir)/f/std.h \
 $(srcdir)/f/ste.c \
 $(srcdir)/f/ste.h \
 $(srcdir)/f/storag.c \
 $(srcdir)/f/storag.h \
 $(srcdir)/f/stp.c \
 $(srcdir)/f/stp.h \
 $(srcdir)/f/str-1t.fin \
 $(srcdir)/f/str-2t.fin \
 $(srcdir)/f/str-fo.fin \
 $(srcdir)/f/str-io.fin \
 $(srcdir)/f/str-nq.fin \
 $(srcdir)/f/str-op.fin \
 $(srcdir)/f/str-ot.fin \
 $(srcdir)/f/str.c \
 $(srcdir)/f/str.h \
 $(srcdir)/f/sts.c \
 $(srcdir)/f/sts.h \
 $(srcdir)/f/stt.c \
 $(srcdir)/f/stt.h \
 $(srcdir)/f/stu.c \
 $(srcdir)/f/stu.h \
 $(srcdir)/f/stv.c \
 $(srcdir)/f/stv.h \
 $(srcdir)/f/stw.c \
 $(srcdir)/f/stw.h \
 $(srcdir)/f/symbol.c \
 $(srcdir)/f/symbol.def \
 $(srcdir)/f/symbol.h \
 $(srcdir)/f/target.c \
 $(srcdir)/f/target.h \
 $(srcdir)/f/tconfig.j \
 $(srcdir)/f/tm.j \
 $(srcdir)/f/top.c \
 $(srcdir)/f/top.h \
 $(srcdir)/f/tree.j \
 $(srcdir)/f/type.c \
 $(srcdir)/f/type.h \
 $(srcdir)/f/where.c \
 $(srcdir)/f/where.h \
 $(srcdir)/f/zzz.c \
 $(srcdir)/f/zzz.h

f771: $(P) $(F77_SRCS) $(LIBDEPS) stamp-objlist f/Makefile
	$(MAKE) -f f/Makefile $(FLAGS_TO_PASS) VPATH=$(srcdir) srcdir=$(srcdir)/f f771

f/Makefile: $(srcdir)/f/Makefile.in $(srcdir)/configure
	$(SHELL) config.status

# Note that the runtime is built in the top-level directory rather
# than in f/runtime a la the Cygnus CHILL example; then xgcc -B./ will
# find it.  Use an absolute name for GCC_FOR_TARGET (so we don't have
# to keep stage? links around everywhere) unless this value has been
# overridden from the default "./xgcc -B./", hence the case statement.
# We depend on GCC_PASSES through f/runtime/Makefile.
stmp-headers = stmp-headers	# to be overrideable in unsafe version
# Depend on stmp-headers, not stmp-int-hdrs, since libF77 needs float.h.
f77-runtime:  f/runtime/Makefile include/f2c.h $(stmp-headers) \
  f/runtime/libF77/Makefile f/runtime/libI77/Makefile
	case "$(LANGUAGES)" in \
	*f77*) top=`pwd`; \
	  cd f/runtime && $(MAKE) \
	    GCC_FOR_TARGET="`case '$(GCC_FOR_TARGET)' in \
	     './xgcc -B./') echo $${top}/xgcc -B$${top}/;; \
	     *) echo '$(GCC_FOR_TARGET)';; esac`" \
	    GCC_FLAGS="$(GCC_FLAGS)" $(F77_FLAGS_TO_PASS) \
	    all ;; \
	esac

# This one doesn't depend on cc1 etc. but f2c.h may not be found,
# in particular, at present...
f77-runtime-unsafe:
	$(MAKE) stmp-headers= GCC_PARTS= f77-runtime

# The configuration of the runtime system relies on an autoconf-type
# configure, not a Cygnus-type one.  It needs to be run *after* the
# appropriate (cross-)compiler has been built, thus depend on GCC_PARTS.
# NB, sh uses the *first* value of $a from `a=fred a=joe prog'.
include/f2c.h f/runtime/Makefile \
f/runtime/libF77/Makefile f/runtime/libI77/Makefile: \
  $(srcdir)/f/runtime/f2c.h.in \
  $(srcdir)/f/com.h f/proj.h $(srcdir)/f/runtime/Makefile.in \
  $(srcdir)/f/runtime/libF77/Makefile.in \
  $(srcdir)/f/runtime/libI77/Makefile.in \
  $(GCC_PASSES)
# The make "stage?" in compiler spec. is fully qualified as above
	top=`pwd`; \
	src=`cd $(srcdir); pwd`; \
	  cd f/runtime; \
	  CC="`case '$(GCC_FOR_TARGET)' in \
	     './xgcc -B./') echo $${top}/xgcc -B$${top}/;; \
	     *) echo '$(GCC_FOR_TARGET)';; esac`" \
	  $(F77_FLAGS_TO_PASS) CONFIG_SITE=/dev/null $(SHELL) \
	  $${src}/f/runtime/configure --srcdir=$${src}/f/runtime

#For now, omit f2c stuff.  -- burley
#f2c: stmp-headers f/f2c/Makefile
#	cd f/f2c; $(MAKE) all
#
#f/f2c/Makefile: $(srcdir)/f/f2c/Makefile.in $(GCC_PARTS) \
#            $(srcdir)/config/$(xmake_file) $(srcdir)/config/$(tmake_file)
#	top=`pwd`; cd f/f2c; \
#          $${top}/f/f2c/configure --srcdir=$${top}/f/f2c

# Build hooks:

# I'm not sure there's a way of getting f2c into here conditionally on
# the --enable-f2c flag detected by config-lang.in so kluge it with the
# maybe-f2c target by looking at STAGESTUFF.
f77.all.build: g77 maybe-f2c
f77.all.cross: g77-cross maybe-f2c
f77.start.encap: g77 maybe-f2c
f77.rest.encap:

f77.info: $(build_infodir)/f/g77.info
# XXX OpenBSD What to do with dvi rules...?
f77.dvi: $(srcdir)/f/g77.dvi

$(srcdir)/f/BUGS: f/bugs0.texi f/bugs.texi
	cd $(srcdir)/f; $(MAKEINFO) -D BUGSONLY --no-header --no-split \
	  --no-validate bugs0.texi -o BUGS

$(srcdir)/f/INSTALL: f/install0.texi f/install.texi
	cd $(srcdir)/f; $(MAKEINFO) -D INSTALLONLY --no-header --no-split \
	  --no-validate install0.texi -o INSTALL

$(srcdir)/f/NEWS: f/news0.texi f/news.texi
	cd $(srcdir)/f; $(MAKEINFO) -D NEWSONLY --no-header --no-split \
	  --no-validate news0.texi -o NEWS

$(srcdir)/f/runtime/configure: f/runtime/configure.in
	cd f/runtime && $(MAKE) rebuilt

f77.rebuilt: f/g77.info f/BUGS f/INSTALL f/NEWS f/runtime/configure
	echo Fortran rebuildable files rebuilt.

maybe-f2c:
#For now, omit f2c stuff.  -- burley
#	case "$(STAGESTUFF)" in *f2c*) $(MAKE) f2c;; esac

# Install hooks:
# f771 is installed elsewhere as part of $(COMPILERS).

f77.install-normal: install-libf77 install-f2c-all

# Install the F77 run time library.
install-libf77: f77-runtime
# Check for the presence of other versions of the library and includes.
# Test libf2c.* in case of a shared version, for instance.
	@@if test -z "$(F2CLIBOK)" && \
	   test -z "$(F2C_INSTALL_FLAG)" && \
	   test "`echo $(libdir)/libf2c.*`" != "$(libdir)/libf2c.*"; then \
   echo ; \
   echo 'You already have a version of libf2c installed as' $(libdir)/libf2c.*; \
   echo 'To use g77 this must be consistent with the one that will be built.'; \
   echo 'You should probably delete it and/or install ./libf2c.a in its place.'; \
   echo 'Resume the "make install" after removing the existing library or'; \
   echo 'define the make variable F2CLIBOK to avoid this test.'; \
   echo 'Check also for' $(includedir)/f2c.h 'per INSTALL instructions.'; \
   echo '(Note that a quick and easy way to resume "make -k install" is to'; \
   echo 'use "make install-libf77".)'; \
   exit 1; else true; fi
	if [ -f libf2c.a ] ; then \
	  $(INSTALL_DATA) libf2c.a $(libsubdir)/libf2c.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libsubdir); $(RANLIB) libf2c.a); else true; fi; \
	  chmod a-x $(libsubdir)/libf2c.a; \
	else true; fi
	if [ -f include/f2c.h ] ; then \
	  $(INSTALL_DATA) include/f2c.h $(libsubdir)/include/f2c.h; \
	else true; fi

# Install the f2c-related stuff in the directories
# where f2c and vanilla ld might look for them.

install-f2c-all: install-f2c-header install-f2c-lib

install-f2c-header:
	-if test -n "$(F2C_INSTALL_FLAG)" && test -f include/f2c.h; then \
	  $(INSTALL_DATA) include/f2c.h $(includedir)/f2c.h; \
	  chmod a+r $(includedir)/f2c.h; \
	else true; fi

install-f2c-lib:
	-if test -n "$(F2C_INSTALL_FLAG)" && test -f libf2c.a; then \
	  $(INSTALL_DATA) libf2c.a $(libdir)/libf2c.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libdir); $(RANLIB) libf2c.a); else true; fi; \
	  chmod a-x $(libdir)/libf2c.a; \
	else true; fi

# Install the driver program as $(target)-g77
# and also as either g77 (if native) or $(tooldir)/bin/g77.
f77.install-common:
	-if [ -f f771$(exeext) ] ; then \
	  if [ -f g77-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(G77_CROSS_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) g77-cross$(exeext) $(bindir)/$(G77_CROSS_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(G77_CROSS_NAME)$(exeext); \
	    if $(F77_INSTALL_FLAG) ; then \
	      rm -f $(bindir)/$(F77_CROSS_NAME)$(exeext); \
	      ln $(bindir)/$(G77_CROSS_NAME)$(exeext) $(bindir)/$(F77_CROSS_NAME)$(exeext) \
		> /dev/null 2>&1 \
		|| cp $(bindir)/$(G77_CROSS_NAME)$(exeext) $(bindir)/$(F77_CROSS_NAME)$(exeext) ; \
	    fi ; \
	  else \
	    rm -f $(bindir)/$(G77_INSTALL_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) g77$(exeext) $(bindir)/$(G77_INSTALL_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(G77_INSTALL_NAME)$(exeext); \
	    if $(F77_INSTALL_FLAG) ; then \
	      rm -f $(bindir)/$(F77_INSTALL_NAME)$(exeext); \
	      ln $(bindir)/$(G77_INSTALL_NAME)$(exeext) $(bindir)/$(F77_INSTALL_NAME)$(exeext) \
		> /dev/null 2>&1 \
		|| cp $(bindir)/$(G77_INSTALL_NAME)$(exeext) $(bindir)/$(F77_INSTALL_NAME)$(exeext) ; \
	    fi ; \
	  fi ; \
	else true; fi

f77.install-info:
	-rm -f $(infodir)/g77.info*
	cd $(build_infodir)/f; for f in g77.info*; \
	do $(INSTALL_DATA) $$f $(infodir)/$$f; done
	-chmod a-x $(infodir)/g77.info*

f77.install-man: $(srcdir)/f/g77.1
	-if [ -f f771$(exeext) ] ; then \
	  if [ -f g77-cross$(exeext) ] ; then \
	    rm -f $(mandir)/$(G77_CROSS_NAME)$(manext); \
	    $(INSTALL_DATA) $(srcdir)/f/g77.1 $(mandir)/$(G77_CROSS_NAME)$(manext); \
	    chmod a-x $(mandir)/$(G77_CROSS_NAME)$(manext); \
	    if $(F77_INSTALL_FLAG) ; then \
	      rm -f $(mandir)/$(F77_CROSS_NAME)$(manext); \
	      ln $(mandir)/$(G77_CROSS_NAME)$(manext) $(mandir)/$(F77_CROSS_NAME)$(manext) \
		> /dev/null 2>&1 \
		|| cp $(mandir)/$(F77_CROSS_NAME)$(manext) $(mandir)/$(F77_CROSS_NAME)$(manext) ; \
	    fi ;\
	  else \
	    rm -f $(mandir)/$(G77_INSTALL_NAME)$(manext); \
	    $(INSTALL_DATA) $(srcdir)/f/g77.1 $(mandir)/$(G77_INSTALL_NAME)$(manext); \
	    chmod a-x $(mandir)/$(G77_INSTALL_NAME)$(manext); \
	    if $(F77_INSTALL_FLAG) ; then \
	      rm -f $(mandir)/$(F77_INSTALL_NAME)$(manext); \
	      ln $(mandir)/$(G77_INSTALL_NAME)$(manext) $(mandir)/$(F77_INSTALL_NAME)$(manext) \
		> /dev/null 2>&1 \
		|| cp $(mandir)/$(F77_INSTALL_NAME)$(manext) $(mandir)/$(F77_INSTALL_NAME)$(manext) ; \
	    fi ;\
	  fi; \
	else true; fi

f77.uninstall:
	-if $(F77_INSTALL_FLAG) ; then \
	  rm -rf $(bindir)/$(F77_INSTALL_NAME)$(exeext) ; \
	  rm -rf $(bindir)/$(F77_CROSS_NAME)$(exeext) ; \
	  rm -rf $(mandir)/$(F77_INSTALL_NAME)$(manext) ; \
	  rm -rf $(mandir)/$(F77_CROSS_NAME)$(manext) ; \
	fi
	-rm -rf $(bindir)/$(G77_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(G77_CROSS_NAME)$(exeext)
	-rm -rf $(mandir)/$(G77_INSTALL_NAME)$(manext)
	-rm -rf $(mandir)/$(G77_CROSS_NAME)$(manext)
	-rm -rf $(infodir)/g77.info*
	-rm -rf $(libsubdir)/libf2c.a
	-if $(F2C_INSTALL_FLAG) ; then \
	  rm -rf include/f2c.h ; \
	  rm -rf $(libdir)/libf2c.a ; \
	fi

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

f77.mostlyclean:
	-rm -f f/*$(objext)
	-rm -f f/fini f/f771 f/stamp-str f/str-*.h f/str-*.j
	-cd f/runtime; $(MAKE) mostlyclean
f77.clean:
	-cd f/runtime; $(MAKE) mostlyclean
	-$(MAKE) f77.mostlyclean
f77.distclean:
	-cd f/runtime; $(MAKE) distclean
	-$(MAKE) f77.clean
	-rm -f f/Makefile
# like gcc's extraclean, which does clean f/ for us, but not f/gbe,
# f/runtime, f/runtime/libF77, and f/runtime/libI77, so do those.
f77.extraclean: f77.distclean
	-rm -f f/*/=* f/*/"#"* f/*/*~*
	-rm -f f/*/patch* f/*/*.orig f/*/*.rej
	-rm -f f/*/*.dvi f/*/*.oaux f/*/*.d f/*/*.[zZ] f/*/*.gz
	-rm -f f/*/*.tar f/*/*.xtar f/*/*diff f/*/*.diff.* f/*/*.tar.* f/*/*.xtar.* f/*/*diffs
	-rm -f f/*/*lose f/*/*.s f/*/*.s[0-9] f/*/*.i
	-rm -f f/*/*/=* f/*/*/"#"* f/*/*/*~*
	-rm -f f/*/*/patch* f/*/*/*.orig f/*/*/*.rej
	-rm -f f/*/*/*.dvi f/*/*/*.oaux f/*/*/*.d f/*/*/*.[zZ] f/*/*/*.gz
	-rm -f f/*/*/*.tar f/*/*/*.xtar f/*/*/*diff f/*/*/*.diff.* f/*/*/*.tar.* f/*/*/*.xtar.* f/*/*/*diffs
	-rm -f f/*/*/*lose f/*/*/*.s f/*/*/*.s[0-9] f/*/*/*.i
# realclean is the pre-2.7.0 name for maintainer-clean
f77.maintainer-clean f77.realclean: f77.distclean
	-rm -f f/g77.info* f/g77.*aux f/TAGS f/BUGS f/INSTALL f/NEWS

# Stage hooks:
# The main makefile has already created stage?/f.

G77STAGESTUFF = f/*$(objext) f/fini f/stamp-str f/str-*.h f/str-*.j
RUNTIMESTAGESTUFF = f/runtime/config.cache f/runtime/config.log \
	f/runtime/config.status f/runtime/Makefile
LIBF77STAGESTUFF = f/runtime/libF77/*$(objext) f/runtime/libF77/Makefile
LIBI77STAGESTUFF = f/runtime/libI77/*$(objext) f/runtime/libI77/Makefile

f77.stage1:
	-mv $(G77STAGESTUFF) stage1/f
	-mv $(RUNTIMESTAGESTUFF) stage1/f/runtime
	-mv $(LIBF77STAGESTUFF) stage1/f/runtime/libF77
	-mv $(LIBI77STAGESTUFF) stage1/f/runtime/libI77
f77.stage2:
	-mv $(G77STAGESTUFF) stage2/f
	-mv $(RUNTIMESTAGESTUFF) stage2/f/runtime
	-mv $(LIBF77STAGESTUFF) stage2/f/runtime/libF77
	-mv $(LIBI77STAGESTUFF) stage2/f/runtime/libI77
f77.stage3:
	-mv $(G77STAGESTUFF) stage3/f
	-mv $(RUNTIMESTAGESTUFF) stage3/f/runtime
	-mv $(LIBF77STAGESTUFF) stage3/f/runtime/libF77
	-mv $(LIBI77STAGESTUFF) stage3/f/runtime/libI77
f77.stage4:
	-mv $(G77STAGESTUFF) stage4/f
	-mv $(RUNTIMESTAGESTUFF) stage4/f/runtime
	-mv $(LIBF77STAGESTUFF) stage4/f/runtime/libF77
	-mv $(LIBI77STAGESTUFF) stage4/f/runtime/libI77

# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
f77.distdir: f77.rebuilt
	mkdir tmp/f
	cd f; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/f >/dev/null 2>&1 || cp $$file ../tmp/f; \
	done
@


1.10
log
@GCC 2.8.0 merge
@
text
@@


1.9
log
@Revert to older (working) version of gcc, plus recent changes.
@
text
@d283 1
a283 1
  $(GCC_PARTS)
@


1.8
log
@changes required to get gcc with the new g77 0.5.20 compiled smoothly
on OpenBSD
@
text
@d2 1
a2 1
#   Copyright (C) 1995-1997 Free Software Foundation, Inc.
a37 2
#
# $(srcdir) must be set to the gcc/ source directory (not gcc/f/).
d112 1
a112 1
g77: $(srcdir)/f/g77.c $(srcdir)/f/zzz.c $(CONFIG_H) $(LIBDEPS)
d121 1
a121 1
g77-cross: $(srcdir)f/g77.c $(srcdir)/f/zzz.c version.o $(LIBDEPS)
d129 9
d243 1
a243 1
	$(MAKE) -f f/Makefile $(FLAGS_TO_PASS) VPATH=$(srcdir) srcdir=$(srcdir) f771
d257 1
a257 1
  f/runtime/libF77/Makefile f/runtime/libI77/Makefile f/runtime/libU77/Makefile
d277 2
a278 5
include/f2c.h \
f/runtime/Makefile \
f/runtime/libF77/Makefile \
f/runtime/libI77/Makefile \
f/runtime/libU77/Makefile: \
d280 1
a280 2
  $(srcdir)/f/com.h $(srcdir)/f/proj.h \
  $(srcdir)/f/runtime/Makefile.in \
a282 3
  $(srcdir)/f/runtime/libU77/Makefile.in \
  $(srcdir)/f/runtime/configure \
  $(srcdir)/f/runtime/libU77/configure \
a292 8
	top=`pwd`; \
	src=`cd $(srcdir); pwd`; \
	  cd f/runtime/libU77; \
	  CC="`case '$(GCC_FOR_TARGET)' in \
	     './xgcc -B./') echo $${top}/xgcc -B$${top}/;; \
	     *) echo '$(GCC_FOR_TARGET)';; esac`" \
	  $(F77_FLAGS_TO_PASS) CONFIG_SITE=/dev/null $(SHELL) \
	  $${src}/f/runtime/libU77/configure --srcdir=$${src}/f/runtime/libU77
d314 1
a314 1
# XXX OpenBSD - what to do with dvi rules ...?
d317 11
a327 7
# XXX OpenBSD - these are the documentation rules for OpenBSD - for now 
#               we will only install the g77 info files - the original
#               g77 documentation rules will follow then commented out
# g77 documentation.
$(build_infodir)/f/g77.info: f/g77.texi f/bugs.texi f/install.texi f/news.texi
	$(MAKEINFO) -P$(srcdir)/f $(srcdir)/f/g77.texi \
	  -o $(build_infodir)/f/g77.info
d329 2
a330 3
# XXX OpenBSD - what to do with dvi rules ...?
$(srcdir)/f/g77.dvi: f/g77.texi f/bugs.texi f/install.texi f/news.texi
	$(TEXI2DVI) $(srcdir)/f/g77.texi
d332 2
a333 35
# XXX OpenBSD - these are the original g77-0.5.20 documentation rules
# g77 documentation.
#$(srcdir)/f/g77.info: f/g77.texi f/bugs.texi f/install.texi f/news.texi f/intdoc.texi
#	cd $(srcdir)/f; $(MAKEINFO) g77.texi
#
#$(srcdir)/f/g77.dvi: f/g77.texi f/bugs.texi f/install.texi f/news.texi f/intdoc.texi
#	cd $(srcdir)/f; $(TEXI2DVI) g77.texi
#
#$(srcdir)/f/intdoc.texi: f/intdoc
#	f/intdoc > $(srcdir)/f/intdoc.texi
#
#f/intdoc: f/intdoc.c f/intdoc.h f/intrin.def f/intrin.h
#	$(HOST_CC) $(HOST_CFLAGS) -W -Wall $(HOST_LDFLAGS) \
#	      `echo $(srcdir)/f/intdoc.c | sed 's,^\./,,'` -o f/intdoc
#
#$(srcdir)/f/BUGS: f/bugs0.texi f/bugs.texi
#	cd $(srcdir)/f; $(MAKEINFO) -D BUGSONLY --no-header --no-split \
#	  --no-validate bugs0.texi -o BUGS
#
#$(srcdir)/f/INSTALL: f/install0.texi f/install.texi
#	cd $(srcdir)/f; $(MAKEINFO) -D INSTALLONLY --no-header --no-split \
#	  --no-validate install0.texi -o INSTALL
#
#$(srcdir)/f/NEWS: f/news0.texi f/news.texi
#	cd $(srcdir)/f; $(MAKEINFO) -D NEWSONLY --no-header --no-split \
#	  --no-validate news0.texi -o NEWS

$(srcdir)/f/runtime/configure: $(srcdir)/f/runtime/configure.in 
	cd f/runtime && $(MAKE) srcdir=$(srcdir)/f/runtime -f $(srcdir)/f/runtime/Makefile.in rebuilt
$(srcdir)/f/runtime/libU77/configure: $(srcdir)/f/runtime/libU77/configure.in
	cd f/runtime && $(MAKE) srcdir=$(srcdir)/f/runtime -f $(srcdir)/f/runtime/Makefile.in rebuilt

f77.rebuilt: $(srcdir)/f/g77.info $(srcdir)/f/BUGS $(srcdir)/f/INSTALL \
  $(srcdir)/f/NEWS $(srcdir)/f/runtime/configure \
  $(srcdir)/f/runtime/libU77/configure
d472 2
a473 2
	-rm -f f/fini f/f771 f/stamp-str f/str-*.h f/str-*.j f/intdoc
	-cd f/runtime; $(MAKE) -f $(srcdir)/f/runtime/Makefile.in mostlyclean
d475 2
a476 1
	-cd f/runtime; $(MAKE) -f $(srcdir)/f/runtime/Makefile.in clean
d478 2
a479 1
	-cd f/runtime; $(MAKE) -f $(srcdir)/f/runtime/Makefile.in distclean
d482 1
a482 2
# f/runtime, f/runtime/libF77, f/runtime/libI77, and f/runtime/libU77,
# so do those.
d496 1
a496 3
	-cd f/runtime; $(MAKE) -f $(srcdir)/f/runtime/Makefile.in maintainer-clean
	-$(MAKE) f77.maintainer-clean
	-rm -f f/g77.info* f/g77.*aux f/TAGS f/BUGS f/INSTALL f/NEWS f/intdoc.texi
d503 1
a503 1
  f/runtime/config.status f/runtime/Makefile
a505 3
LIBU77STAGESTUFF = f/runtime/libU77/*$(objext) f/runtime/libU77/Makefile \
  f/runtime/libU77/config.cache f/runtime/libU77/config.log \
  f/runtime/libU77/config.status
a511 1
	-mv $(LIBU77STAGESTUFF) stage1/f/runtime/libU77
a516 1
	-mv $(LIBU77STAGESTUFF) stage2/f/runtime/libU77
a521 1
	-mv $(LIBU77STAGESTUFF) stage3/f/runtime/libU77
a526 1
	-mv $(LIBU77STAGESTUFF) stage4/f/runtime/libU77
@


1.7
log
@sync g77 to version 0.5.20 - i hope i got everything right because there
is no patch from 0.5.19 to 0.5.20 - so i did it by diffing two gcc trees
looking carefully at the results

what does the new g77 give us:
* now it completely works on the alpha (64bit)
* faster
* less bugs :-)
@
text
@d330 1
a330 1
	$(MAKEINFO) -I$(srcdir)/f $(srcdir)/f/g77.texi \
d365 1
a365 1
	cd f/runtime && $(MAKE) srcdir=../../$(srcdir)/f/runtime -f ../../$(srcdir)/f/runtime/Makefile.in rebuilt
d367 1
a367 1
	cd f/runtime && $(MAKE) srcdir=../../$(srcdir)/f/runtime -f ../../$(srcdir)/f/runtime/Makefile.in rebuilt
d511 1
a511 1
	-cd f/runtime; $(MAKE) -f ../../$(srcdir)/f/runtime/Makefile.in mostlyclean
d513 1
a513 1
	-cd f/runtime; $(MAKE) -f ../../$(srcdir)/f/runtime/Makefile.in clean
d515 1
a515 1
	-cd f/runtime; $(MAKE) -f ../../$(srcdir)/f/runtime/Makefile.in distclean
d533 1
a533 1
	-cd f/runtime; $(MAKE) -f ../../$(srcdir)/f/runtime/Makefile.in maintainer-clean
@


1.6
log
@Use new makeinfo -P dir option to prepend gcc/f to the include path.

You must rebuild and install the new makeinfo before building gcc!

This corrects the gcc/install.texi gcc/f/install.texi name collision.
@
text
@d2 1
a2 1
#   Copyright (C) 1995, 1996 Free Software Foundation, Inc.
d38 2
d114 1
a114 1
g77: f/g77.c $(CONFIG_H) $(LIBDEPS)
d123 1
a123 1
g77-cross: f/g77.c version.o $(LIBDEPS)
a130 9
# g77 documentation.
$(build_infodir)/f/g77.info: f/g77.texi f/bugs.texi f/install.texi f/news.texi
	$(MAKEINFO) -P$(srcdir)/f $(srcdir)/f/g77.texi \
	   -o $(build_infodir)/f/g77.info

# XXX OpenBSD What to do with dvi builds...?
$(srcdir)/f/g77.dvi: f/g77.texi f/bugs.texi f/install.texi f/news.texi
	$(TEXI2DVI) $(srcdir)/f/g77.texi

d236 1
a236 1
	$(MAKE) -f f/Makefile $(FLAGS_TO_PASS) VPATH=$(srcdir) srcdir=$(srcdir)/f f771
d250 1
a250 1
  f/runtime/libF77/Makefile f/runtime/libI77/Makefile
d270 5
a274 2
include/f2c.h f/runtime/Makefile \
f/runtime/libF77/Makefile f/runtime/libI77/Makefile: \
d276 2
a277 1
  $(srcdir)/f/com.h f/proj.h $(srcdir)/f/runtime/Makefile.in \
d280 3
d293 8
d322 1
a322 1
# XXX OpenBSD What to do with dvi rules...?
d325 7
a331 11
$(srcdir)/f/BUGS: f/bugs0.texi f/bugs.texi
	cd $(srcdir)/f; $(MAKEINFO) -D BUGSONLY --no-header --no-split \
	  --no-validate bugs0.texi -o BUGS

$(srcdir)/f/INSTALL: f/install0.texi f/install.texi
	cd $(srcdir)/f; $(MAKEINFO) -D INSTALLONLY --no-header --no-split \
	  --no-validate install0.texi -o INSTALL

$(srcdir)/f/NEWS: f/news0.texi f/news.texi
	cd $(srcdir)/f; $(MAKEINFO) -D NEWSONLY --no-header --no-split \
	  --no-validate news0.texi -o NEWS
d333 3
a335 2
$(srcdir)/f/runtime/configure: f/runtime/configure.in
	cd f/runtime && $(MAKE) rebuilt
d337 35
a371 2
f77.rebuilt: f/g77.info f/BUGS f/INSTALL f/NEWS f/runtime/configure
	echo Fortran rebuildable files rebuilt.
d510 2
a511 2
	-rm -f f/fini f/f771 f/stamp-str f/str-*.h f/str-*.j
	-cd f/runtime; $(MAKE) mostlyclean
d513 1
a513 2
	-cd f/runtime; $(MAKE) mostlyclean
	-$(MAKE) f77.mostlyclean
d515 1
a515 2
	-cd f/runtime; $(MAKE) distclean
	-$(MAKE) f77.clean
d518 2
a519 1
# f/runtime, f/runtime/libF77, and f/runtime/libI77, so do those.
d533 3
a535 1
	-rm -f f/g77.info* f/g77.*aux f/TAGS f/BUGS f/INSTALL f/NEWS
d542 1
a542 1
	f/runtime/config.status f/runtime/Makefile
d545 3
d554 1
d560 1
d566 1
d572 1
@


1.5
log
@no, this does not work yet either
@
text
@d131 1
a131 1
	$(MAKEINFO) -I$(srcdir)/f $(srcdir)/f/g77.texi \
@


1.4
log
@cd into gcc/f before building g77.info to avoid picking up on the wrong
version of install.texi (both gcc/install.texi and gcc/f/install.texi exist
and are different.)
@
text
@d131 1
a131 1
	cd $(srcdir)/f && $(MAKEINFO) -I$(srcdir) $(srcdir)/f/g77.texi \
@


1.3
log
@Update to g77 0.5.19
@
text
@d131 1
a131 1
	$(MAKEINFO) -I$(srcdir)/f $(srcdir)/f/g77.texi \
@


1.2
log
@Redid the info-file build slightly, but with kept semantics.  Made g77
this style too.  Added OpenBSD/alpha support
@
text
@d1 2
a2 2
# Top level makefile fragment for GNU Fortran.
#   Copyright (C) 1995 Free Software Foundation, Inc.
d51 1
d111 1
a111 1
# Create the compiler driver for g77.
d113 5
a117 1
	$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o $@@ $(srcdir)/f/g77.c $(LIBS)
d119 2
a120 1
# Create a version of the g77 driver which calls the cross-compiler.
d122 6
a127 2
	$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o $@@ \
	   -DGCC_NAME=\"$(GCC_CROSS_NAME)\" $(srcdir)/f/g77.c version.o $(LIBS)
d254 3
a256 2
stmp-int-hdrs = stmp-int-hdrs	# to be overrideable in unsafe version
f77-runtime:  f/runtime/Makefile include/f2c.h $(stmp-int-headers) \
d271 1
a271 1
	$(MAKE) stmp-int-hdrs= GCC_PARTS= f77-runtime
d283 1
a283 1
  $(GCC_PARTS) $(srcdir)/config/$(xmake_file) $(srcdir)/config/$(tmake_file)
d295 1
a295 1
#f2c: stmp-int-hdrs f/f2c/Makefile
d474 6
a479 3
f77.clean: f77.mostlyclean
	-cd f/runtime; $(MAKE) clean
f77.distclean: f77.clean
a480 1
	-cd f/runtime; $(MAKE) distclean
@


1.1
log
@Initial integration of G77.

Please do a make cleandir before rebuilding gcc!
@
text
@d120 3
a122 2
$(srcdir)/f/g77.info: f/g77.texi f/bugs.texi f/install.texi f/news.texi
	cd $(srcdir)/f; $(MAKEINFO) g77.texi
d124 1
d126 1
a126 1
	cd $(srcdir)/f; $(TEXI2DVI) g77.texi
d302 2
a303 1
f77.info: $(srcdir)/f/g77.info
d408 1
a408 1
	cd $(srcdir)/f; for f in g77.info*; \
@

