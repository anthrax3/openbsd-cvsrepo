head	1.4;
access;
symbols
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	99.05.26.16.30.16;	author espie;	state dead;
branches;
next	1.3;

1.3
date	97.04.09.13.44.40;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.04.04.13.21.20;	author graichen;	state Exp;
branches;
next	1.1;

1.1
date	96.07.27.02.52.22;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.4
log
@So long, and thanks for all the bugs.
@
text
@#include "f2c.h"

#ifdef KR_headers
extern void sig_die();
VOID z_div(c, a, b) doublecomplex *a, *b, *c;
#else
extern void sig_die(char*, int);
void z_div(doublecomplex *c, doublecomplex *a, doublecomplex *b)
#endif
{
double ratio, den;
double abr, abi;

if( (abr = b->r) < 0.)
	abr = - abr;
if( (abi = b->i) < 0.)
	abi = - abi;
if( abr <= abi )
	{
	if(abi == 0)
		sig_die("complex division by zero", 1);
	ratio = b->r / b->i ;
	den = b->i * (1 + ratio*ratio);
	c->r = (a->r*ratio + a->i) / den;
	c->i = (a->i*ratio - a->r) / den;
	}

else
	{
	ratio = b->i / b->r ;
	den = b->r * (1 + ratio*ratio);
	c->r = (a->r + a->i*ratio) / den;
	c->i = (a->i - a->r*ratio) / den;
	}

}
@


1.3
log
@Revert to older (working) version of gcc, plus recent changes.
@
text
@@


1.2
log
@sync g77 to version 0.5.20 - i hope i got everything right because there
is no patch from 0.5.19 to 0.5.20 - so i did it by diffing two gcc trees
looking carefully at the results

what does the new g77 give us:
* now it completely works on the alpha (64bit)
* faster
* less bugs :-)
@
text
@d5 1
a5 1
VOID z_div(resx, a, b) doublecomplex *a, *b, *resx;
d8 1
a8 1
void z_div(doublecomplex *resx, doublecomplex *a, doublecomplex *b)
a12 1
doublecomplex res;
d24 2
a25 2
	res.r = (a->r*ratio + a->i) / den;
	res.i = (a->i*ratio - a->r) / den;
d32 2
a33 2
	res.r = (a->r + a->i*ratio) / den;
	res.i = (a->i - a->r*ratio) / den;
a35 2
resx->r = res.r;
resx->i = res.i;
@


1.1
log
@Initial integration of G77.

Please do a make cleandir before rebuilding gcc!
@
text
@d5 1
a5 1
VOID z_div(c, a, b) doublecomplex *a, *b, *c;
d8 1
a8 1
void z_div(doublecomplex *c, doublecomplex *a, doublecomplex *b)
d13 1
d25 2
a26 2
	c->r = (a->r*ratio + a->i) / den;
	c->i = (a->i*ratio - a->r) / den;
d33 2
a34 2
	c->r = (a->r + a->i*ratio) / den;
	c->i = (a->i - a->r*ratio) / den;
d37 2
@
