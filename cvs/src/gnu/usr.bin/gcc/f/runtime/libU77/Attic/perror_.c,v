head	1.2;
access;
symbols
	libU77:1.1.1.1
	graichen:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	97.04.09.10.16.53;	author downsj;	state dead;
branches;
next	1.1;

1.1
date	97.04.04.13.11.15;	author graichen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.04.04.13.11.15;	author graichen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@We're pulling this back out...
@
text
@/* Copyright (C) 1995 Free Software Foundation, Inc.
This file is part of GNU Fortran libU77 library.

This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Library General Public License as published
by the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

GNU Fortran is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with GNU Fortran; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdio.h>
#include <errno.h>
#if HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
#include "f2c.h"

#ifdef KR_headers
/* Subroutine */ int perror_ (str, Lstr)
     char *str; ftnlen  Lstr;
#else
/* Subroutine */ int perror_ (const char *str, const ftnlen Lstr)
#endif
{
  char buff[1000];
  char *bp, *blast;

  /* same technique as `system' -- what's wrong with malloc? */
  blast = buff + (Lstr < 1000 ? Lstr : 1000);
  for (bp = buff ; bp<blast && *str!='\0' ; )
    *bp++ = *str++;
  *bp = '\0';
  perror (buff);
  return 0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import of libU77 - part of sync to g77-0.5.20
@
text
@@
