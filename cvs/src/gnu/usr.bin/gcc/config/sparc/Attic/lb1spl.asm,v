head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1
	FSF_2_8_1:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@;; @;


1.2
date	99.05.26.16.27.20;	author espie;	state dead;
branches;
next	1.1;

1.1
date	95.12.20.01.05.42;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.05.42;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@So long, and thanks for all the bugs.
@
text
@/* This is an assembly language implementation of libgcc1.c for the sparclite
   processor.

   These routines are all from the Sparclite User's Guide, slightly edited
   to match the desired calling convention, and also to optimize them.  */

#ifdef L_udivsi3
.text
	.align 4
	.global .udiv
	.proc	04
.udiv:
	wr	%g0,%g0,%y	! Not a delayed write for sparclite
	tst	%g0
	divscc	%o0,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	retl
	divscc	%g1,%o1,%o0
#endif

#ifdef L_umodsi3
.text
	.align 4
	.global .urem
	.proc	04
.urem:
	wr	%g0,%g0,%y	! Not a delayed write for sparclite
	tst	%g0
	divscc	%o0,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	divscc	%g1,%o1,%g1
	bl 1f
	rd	%y,%o0
	retl
	nop
1:	retl
	add	%o0,%o1,%o0
#endif

#ifdef L_divsi3
.text
	.align 4
	.global .div
	.proc	04
! ??? This routine could be made faster if was optimized, and if it was
! rewritten to only calculate the quotient.
.div:
	wr	%g0,%g0,%y	! Not a delayed write for sparclite
	mov	%o1,%o4
	tst	%o1
	bl,a	1f
	sub	%g0,%o4,%o4
1:	tst	%o0
	bl,a	2f
	mov	-1,%y
2:	divscc	%o0,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	be	6f
	mov	%y,%o3
	bg	4f
	addcc	%o3,%o4,%g0
	be,a	6f
	mov	%g0,%o3
	tst	%o0
	bl	5f
	tst	%g1
	ba	5f
	add	%o3,%o4,%o3
4:	subcc	%o3,%o4,%g0
	be,a	6f
	mov	%g0,%o3
	tst	%o0
	bge	5f
	tst	%g1
	sub	%o3,%o4,%o3
5:	bl,a	6f
	add	%g1,1,%g1
6:	tst	%o1
	bl,a	7f
	sub	%g0,%g1,%g1
7:	retl
	mov	%g1,%o0		! Quotient is in %g1.
#endif

#ifdef L_modsi3
.text
	.align 4
	.global .rem
	.proc	04
! ??? This routine could be made faster if was optimized, and if it was
! rewritten to only calculate the remainder.
.rem:
	wr	%g0,%g0,%y	! Not a delayed write for sparclite
	mov	%o1,%o4
	tst	%o1
	bl,a	1f
	sub	%g0,%o4,%o4
1:	tst	%o0
	bl,a	2f
	mov	-1,%y
2:	divscc	%o0,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	divscc	%g1,%o4,%g1
	be	6f
	mov	%y,%o3
	bg	4f
	addcc	%o3,%o4,%g0
	be,a	6f
	mov	%g0,%o3
	tst	%o0
	bl	5f
	tst	%g1
	ba	5f
	add	%o3,%o4,%o3
4:	subcc	%o3,%o4,%g0
	be,a	6f
	mov	%g0,%o3
	tst	%o0
	bge	5f
	tst	%g1
	sub	%o3,%o4,%o3
5:	bl,a	6f
	add	%g1,1,%g1
6:	tst	%o1
	bl,a	7f
	sub	%g0,%g1,%g1
7:	retl
	mov	%o3,%o0		! Remainder is in %o3.
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@

