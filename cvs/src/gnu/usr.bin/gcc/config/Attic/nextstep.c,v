head	1.3;
access;
symbols
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	FSF_2_8_1:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	99.05.26.16.23.32;	author espie;	state dead;
branches;
next	1.2;

1.2
date	98.03.03.21.21.14;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.20.01.03.38;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.20.01.03.38;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.14.19.14.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@So long, and thanks for all the bugs.
@
text
@/* Functions for generic NeXT as target machine for GNU C compiler.
   Copyright (C) 1989, 90-93, 96, 1997 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#include "config.h"
#include <stdio.h>
#include "flags.h"
#include "tree.h"

/* Make everything that used to go in the text section really go there.  */

int flag_no_mach_text_sections = 0;

#define OPT_STRCMP(opt) (!strncmp (opt, p, sizeof (opt)-1))

/* 1 if handle_pragma has been called yet.  */

static int pragma_initialized;

/* Initial setting of `optimize'.  */

static int initial_optimize_flag;

extern char *get_directive_line ();

/* Called from check_newline via the macro HANDLE_PRAGMA.
   FINPUT is the source file input stream.
   CH is the first character after `#pragma'.
   The result is 1 if the pragma was handled.  */

int
handle_pragma (finput, node)
     FILE *finput;
     tree node;
{
  int retval = 0;
  register char *pname;

  /* Record initial setting of optimize flag, so we can restore it.  */
  if (!pragma_initialized)
    {
      pragma_initialized = 1;
      initial_optimize_flag = optimize;
    }

  if (TREE_CODE (node) != IDENTIFIER_NODE)
    return 0;

  pname = IDENTIFIER_POINTER (node);

  if (strcmp (pname, "CC_OPT_ON") == 0)
    {
      optimize = 1, obey_regdecls = 0;
      warning ("optimization turned on");
      retval = 1;
    }
  else if (strcmp (pname, "CC_OPT_OFF") == 0)
    {
      optimize = 0, obey_regdecls = 1;
      warning ("optimization turned off");
      retval = 1;
    }
  else if (strcmp (pname, "CC_OPT_RESTORE") == 0)
    {
      extern int initial_optimize_flag;

      if (optimize != initial_optimize_flag)
	{
	  if (initial_optimize_flag)
	    obey_regdecls = 0;
	  else
	    obey_regdecls = 1;
	  optimize = initial_optimize_flag;
	}
      warning ("optimization level restored");
      retval = 1;
    }
  else if (strcmp (pname, "CC_WRITABLE_STRINGS") == 0)
    flag_writable_strings = retval = 1;
  else if (strcmp (pname, "CC_NON_WRITABLE_STRINGS") == 0)
    flag_writable_strings = 0, retval = 1;
  else if (strcmp (pname, "CC_NO_MACH_TEXT_SECTIONS") == 0)
    flag_no_mach_text_sections = retval = 1;

  return retval;
}
@


1.2
log
@GCC 2.8.0 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1989, 1990, 1991, 1992, 1993 Free Software Foundation, Inc.
d21 5
d43 3
a45 1
   FINPUT is the source file input stream.  */
d47 2
a48 2
void
handle_pragma (finput, get_line_function)
d50 1
a50 1
     char *(*get_line_function) ();
d52 2
a53 1
  register char *p = (*get_line_function) (finput);
d62 6
a67 1
  if (OPT_STRCMP ("CC_OPT_ON"))
d71 1
d73 1
a73 1
  else if (OPT_STRCMP ("CC_OPT_OFF"))
d77 1
d79 1
a79 1
  else if (OPT_STRCMP ("CC_OPT_RESTORE"))
d92 1
d94 8
a101 6
  else if (OPT_STRCMP ("CC_WRITABLE_STRINGS"))
    flag_writable_strings = 1;
  else if (OPT_STRCMP ("CC_NON_WRITABLE_STRINGS"))
    flag_writable_strings = 0;
  else if (OPT_STRCMP ("CC_NO_MACH_TEXT_SECTIONS"))
    flag_no_mach_text_sections = 1;
@


1.1.1.1
log
@FSF GCC version 2.7.2
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
   Copyright (C) 1989, 90-93, 96, 1997 Free Software Foundation, Inc.
a20 5
#include "config.h"
#include <stdio.h>
#include "flags.h"
#include "tree.h"

d38 1
a38 3
   FINPUT is the source file input stream.
   CH is the first character after `#pragma'.
   The result is 1 if the pragma was handled.  */
d40 2
a41 2
int
handle_pragma (finput, node)
d43 1
a43 1
     tree node;
d45 1
a45 2
  int retval = 0;
  register char *pname;
d54 1
a54 6
  if (TREE_CODE (node) != IDENTIFIER_NODE)
    return 0;

  pname = IDENTIFIER_POINTER (node);

  if (strcmp (pname, "CC_OPT_ON") == 0)
a57 1
      retval = 1;
d59 1
a59 1
  else if (strcmp (pname, "CC_OPT_OFF") == 0)
a62 1
      retval = 1;
d64 1
a64 1
  else if (strcmp (pname, "CC_OPT_RESTORE") == 0)
a76 1
      retval = 1;
d78 6
a83 8
  else if (strcmp (pname, "CC_WRITABLE_STRINGS") == 0)
    flag_writable_strings = retval = 1;
  else if (strcmp (pname, "CC_NON_WRITABLE_STRINGS") == 0)
    flag_writable_strings = 0, retval = 1;
  else if (strcmp (pname, "CC_NO_MACH_TEXT_SECTIONS") == 0)
    flag_no_mach_text_sections = retval = 1;

  return retval;
@

