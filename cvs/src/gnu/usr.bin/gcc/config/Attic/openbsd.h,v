head	1.21;
access;
symbols
	OPENBSD_2_5:1.20.0.2
	OPENBSD_2_5_BASE:1.20
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.21
date	99.05.26.16.23.33;	author espie;	state dead;
branches;
next	1.20;

1.20
date	99.02.28.15.51.14;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	99.02.28.15.48.39;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	99.02.28.15.44.58;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	99.02.17.12.57.52;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	99.02.17.12.54.27;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	99.02.17.12.52.36;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	99.01.17.17.41.13;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	99.01.13.00.27.52;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	99.01.08.16.30.05;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	98.12.21.13.18.26;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	98.11.20.11.18.22;	author d;	state Exp;
branches;
next	1.9;

1.9
date	98.05.06.14.25.35;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	98.03.18.04.51.23;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	98.03.11.23.49.19;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.03.03.21.21.16;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.09.17.08.06.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.08.19.33.41;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.29.07.09.45;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.17.07.32.29;	author etheisen;	state Exp;
branches;
next	1.1;

1.1
date	95.12.21.01.17.12;	author niklas;	state Exp;
branches;
next	;


desc
@Support file for OpenBSD
@


1.21
log
@So long, and thanks for all the bugs.
@
text
@/* Base configuration file for all OpenBSD targets.
   Copyright (C) 1999 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* Common OpenBSD configuration. 
   All OpenBSD architectures include this file, which is intended as
   a repository for common defines. 

   Some defines are common to all architectures, a few of them are
   triggered by OBSD_* guards, so that we won't override architecture
   defaults by mistakes.

   OBSD_HAS_CORRECT_SPECS: 
      another mechanism provides correct specs already.
   OBSD_NO_DYNAMIC_LIBRARIES: 
      no implementation of dynamic libraries.
   OBSD_OLD_GAS: 
      older flavor of gas which needs help for PIC.
   OBSD_HAS_DECLARE_FUNCTION_NAME, OBSD_HAS_DECLARE_FUNCTION_SIZE,
   OBSD_HAS_DECLARE_OBJECT: 
      PIC support, FUNCTION_NAME/FUNCTION_SIZE are independent, whereas
      the corresponding logic for OBJECTS is necessarily coupled.

   There are also a few `default' defines such as ASM_WEAKEN_LABEL,
   intended as common ground for arch that don't provide 
   anything suitable.  */

/* OPENBSD_NATIVE is defined only when gcc is configured as part of
   the OpenBSD source tree, specifically through Makefile.bsd-wrapper.

   In such a case the include path can be trimmed as there is no
   distinction between system includes and gcc includes.  */

/* This configuration method, namely Makefile.bsd-wrapper and
   OPENBSD_NATIVE is NOT recommended for building cross-compilers.  */

#ifdef OPENBSD_NATIVE

#undef GCC_INCLUDE_DIR
#define GCC_INCLUDE_DIR "/usr/include"

/* The compiler is configured with ONLY the gcc/g++ standard headers.  */
#undef INCLUDE_DEFAULTS
#define INCLUDE_DEFAULTS			\
  {						\
    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1 },	\
    { GCC_INCLUDE_DIR, "GCC", 0, 0 },		\
    { 0, 0, 0, 0 }				\
  }

/* Under OpenBSD, the normal location of the various *crt*.o files is the
   /usr/lib directory.  */
#define STANDARD_STARTFILE_PREFIX	"/usr/lib/"

#endif


/* Controlling the compilation driver.  */

/* CPP_SPEC appropriate for OpenBSD. We deal with -posix and -pthread.
   XXX the way threads are handling currently is not very satisfying,
   since all code must be compiled with -pthread to work. 
   This two-stage defines makes it easy to pick that for targets that
   have subspecs.  */
#define OBSD_CPP_SPEC "%{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS}"

/* LIB_SPEC appropriate for OpenBSD.  Select the appropriate libc, 
   depending on profiling and threads.  Basically, 
   -lc(_r)?(_p)?, select _r for threads, and _p for p or pg.  */
#define OBSD_LIB_SPEC "-lc%{pthread:_r}%{p:_p}%{!p:%{pg:_p}}"

#ifndef OBSD_HAS_CORRECT_SPECS

#ifndef OBSD_NO_DYNAMIC_LIBRARIES
#undef SWITCH_TAKES_ARG
#define SWITCH_TAKES_ARG(CHAR) \
  (DEFAULT_SWITCH_TAKES_ARG (CHAR) \
   || (CHAR) == 'R')
#endif

#undef CPP_SPEC
#define CPP_SPEC OBSD_CPP_SPEC

#ifdef OBSD_OLD_GAS
/* ASM_SPEC appropriate for OpenBSD.  For some architectures, OpenBSD 
   still uses a special flavor of gas that needs to be told when generating 
   pic code.  */
#undef ASM_SPEC
#define ASM_SPEC "%{fpic:-k} %{fPIC:-k -K} %|"
#else
/* Since we use gas, stdin -> - is a good idea, but we don't want to
   override native specs just for that.  */
#ifndef ASM_SPEC
#define ASM_SPEC "%|"
#endif
#endif

/* LINK_SPEC appropriate for OpenBSD.  Support for GCC options 
   -static, -assert, and -nostdlib.  */
#undef LINK_SPEC
#ifdef OBSD_NO_DYNAMIC_LIBRARIES
#define LINK_SPEC \
  "%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{assert*}"
#else
#define LINK_SPEC \
  "%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{R*} %{static:-Bstatic} %{assert*}"
#endif

#undef LIB_SPEC
#define LIB_SPEC OBSD_LIB_SPEC
#endif


/* Runtime target specification.  */

/* You must redefine CPP_PREDEFINES in any arch specific file.  */
#undef CPP_PREDEFINES

/* Implicit calls to library routines.  */

/* Use memcpy and memset instead of bcopy and bzero.  */
#define TARGET_MEM_FUNCTIONS

/* Miscellaneous parameters.  */

/* Tell libgcc2.c that OpenBSD targets support atexit.  */
#define HAVE_ATEXIT

/* Controlling debugging info: dbx options.  */

/* Don't use the `xsTAG;' construct in DBX output; OpenBSD systems that
   use DBX don't support it.  */
#define DBX_NO_XREFS


/* Support of shared libraries, mostly imported from svr4.h through netbsd.  */
/* Two differences from svr4.h:
   - we use . - _func instead of a local label,
   - we put extra spaces in expressions such as 
     .type _func , @@function
     This is more readable for a human being and confuses c++filt less.  */

/* Assembler format: output and generation of labels.  */

/* Define the strings used for the .type and .size directives.
   These strings generally do not vary from one system running OpenBSD
   to another, but if a given system needs to use different pseudo-op
   names for these, they may be overridden in the arch specific file.  */ 

/* OpenBSD assembler is hacked to have .type & .size support even in a.out
   format object files.  Functions size are supported but not activated 
   yet (look for GRACE_PERIOD_EXPIRED in gas/config/obj-aout.c).  */

#undef TYPE_ASM_OP
#undef SIZE_ASM_OP

#define TYPE_ASM_OP	".type"
#define SIZE_ASM_OP	".size"

/* The following macro defines the format used to output the second
   operand of the .type assembler directive.  */
#undef TYPE_OPERAND_FMT
#define TYPE_OPERAND_FMT	"@@%s"

/* Provision if extra assembler code is needed to declare a function's result
   (taken from svr4, not needed yet actually).  */
#ifndef ASM_DECLARE_RESULT
#define ASM_DECLARE_RESULT(FILE, RESULT)
#endif

/* These macros generate the special .type and .size directives which
   are used to set the corresponding fields of the linker symbol table
   entries under OpenBSD.  These macros also have to output the starting 
   labels for the relevant functions/objects.  */

#ifndef OBSD_HAS_DECLARE_FUNCTION_NAME
/* Extra assembler code needed to declare a function properly.
   Some assemblers may also need to also have something extra said 
   about the function's return value.  We allow for that here.  */
#undef ASM_DECLARE_FUNCTION_NAME
#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)			\
  do {									\
    fprintf (FILE, "\t%s\t", TYPE_ASM_OP);				\
    assemble_name (FILE, NAME);						\
    fputs (" , ", FILE);						\
    fprintf (FILE, TYPE_OPERAND_FMT, "function");			\
    putc ('\n', FILE);							\
    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));			\
    ASM_OUTPUT_LABEL(FILE, NAME);					\
  } while (0)
#endif

#ifndef OBSD_HAS_DECLARE_FUNCTION_SIZE
/* Declare the size of a function.  */
#undef ASM_DECLARE_FUNCTION_SIZE
#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)			\
  do {									\
    if (!flag_inhibit_size_directive)					\
      {									\
	fprintf (FILE, "\t%s\t", SIZE_ASM_OP);				\
	assemble_name (FILE, (FNAME));					\
	fputs (" , . - ", FILE);					\
	assemble_name (FILE, (FNAME));					\
	putc ('\n', FILE);						\
      }									\
  } while (0)
#endif

#ifndef OBSD_HAS_DECLARE_OBJECT
/* Extra assembler code needed to declare an object properly.  */
#undef ASM_DECLARE_OBJECT_NAME
#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)			\
  do {									\
    fprintf (FILE, "\t%s\t ", TYPE_ASM_OP);				\
    assemble_name (FILE, NAME);						\
    fputs (" , ", FILE);						\
    fprintf (FILE, TYPE_OPERAND_FMT, "object");				\
    putc ('\n', FILE);							\
    size_directive_output = 0;						\
    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))		\
      {									\
	size_directive_output = 1;					\
	fprintf (FILE, "\t%s\t", SIZE_ASM_OP);				\
	assemble_name (FILE, NAME);					\
	fprintf (FILE, " , %d\n", int_size_in_bytes (TREE_TYPE (DECL)));\
      }									\
    ASM_OUTPUT_LABEL (FILE, NAME);					\
  } while (0)

/* Output the size directive for a decl in rest_of_decl_compilation
   in the case where we did not do so before the initializer.
   Once we find the error_mark_node, we know that the value of
   size_directive_output was set by ASM_DECLARE_OBJECT_NAME 
   when it was run for the same decl.  */
#undef ASM_FINISH_DECLARE_OBJECT
#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)	 \
do {									 \
     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);			 \
     if (!flag_inhibit_size_directive && DECL_SIZE (DECL)		 \
         && ! AT_END && TOP_LEVEL					 \
	 && DECL_INITIAL (DECL) == error_mark_node			 \
	 && !size_directive_output)					 \
       {								 \
	 size_directive_output = 1;					 \
	 fprintf (FILE, "\t%s\t", SIZE_ASM_OP);			 \
	 assemble_name (FILE, name);					 \
	 fprintf (FILE, " , %d\n", int_size_in_bytes (TREE_TYPE (DECL)));\
       }								 \
   } while (0)
#endif


/* Those are `generic' ways to weaken/globalize a label. We shouldn't need
   to override a processor specific definition. Hence, #ifndef ASM_*
   In case overriding turns out to be needed, one can always #undef ASM_* 
   before including this file.  */

/* Tell the assembler that a symbol is weak.  */
/* Note: netbsd arm32 assembler needs a .globl here. An override may 
   be needed when/if we go for arm32 support.  */
#ifndef ASM_WEAKEN_LABEL
#define ASM_WEAKEN_LABEL(FILE,NAME) \
  do { fputs ("\t.weak\t", FILE); assemble_name (FILE, NAME); \
       fputc ('\n', FILE); } while (0)
#endif

/* Tell the assembler that a symbol is global.  */
#ifndef ASM_GLOBALIZE_LABEL
#define ASM_GLOBALIZE_LABEL(FILE,NAME) \
  do { fputs ("\t.globl\t", FILE); assemble_name (FILE, NAME); \
       fputc ('\n', FILE); } while(0)
#endif


/* Storage layout.  */

/* We don't have to worry about binary compatibility with older C++ code,
   but there is a big known bug with vtable thunks which has not been
   fixed yet, so DON'T activate it by default.  */
/* #define DEFAULT_VTABLE_THUNKS 1 */


/* Otherwise, since we support weak, gthr.h erroneously tries to use
   #pragma weak.  */
#define GTHREAD_USE_WEAK 0

/* bug work around: we don't want to support #pragma weak, but the current
   code layout needs HANDLE_PRAGMA_WEAK asserted for __attribute((weak)) to
   work.  On the other hand, we don't define HANDLE_PRAGMA_WEAK directly,
   as this depends on a few other details as well...  */
#define HANDLE_SYSV_PRAGMA
@


1.20
log
@From: Jeffrey A Law <law@@hurl.cygnus.com>

  Marc Espie writes:
  > I haven't really been able to follow thru the code (and my current build
  > is not finished yet, so I can't do the check myself), but your recent patch
  >
  > to handle weak correctly does look like __attribute__((weak)) will work
  > correctly only if HANDLE_PRAGMA_WEAK is asserted.
  >
  > This is a problem, as HANDLE_PRAGMA_WEAK is a choice, not a feature (at
  > least, that's what the gcc.info documentation seems to imply for
  > HANDLE_SYSV_PRAGMA).
When HANDLE_PRAGMA_WEAK is false, the code will continue to fail as it has
failed for years.  Not perfect by any means.  Feel free to fix it.  It is
still a choice, selecting that choice is the only way to get functional
weak support right now.

What needs to happen long term is the generic weak/alias code needs to become
unconditional and only the pragma parsing of that code be conditional.
@
text
@@


1.19
log
@Formatting changes: conform to the gnu coding standard guidelines.
This is the version that was entered in the egcs project as the official
OpenBSD configuration file.
@
text
@d303 5
@


1.18
log
@Introduce OBSD_CPP_SPEC and OBSD_LIB_SPEC,
so that OpenBSD specific specs are visible to be used by arch
configuration files that don't redefine CPP_SPEC/LIB_SPEC directly.

This avoids some duplication of code.
@
text
@d1 2
a2 1
/* $OpenBSD: openbsd.h,v 1.17 1999/02/17 12:57:52 espie Exp $	*/
d4 18
a21 1
/* common OpenBSD configuration. 
d41 2
a42 2
   intended as common ground for arch that don't provide anything suitable.
 */
d48 2
a49 2
   distinction between system includes and gcc includes
 */
d51 2
a52 2
   OPENBSD_NATIVE is NOT recommended for building cross-compilers
 */
d58 1
a58 1
/* The compiler is configured with ONLY the gcc/g++ standard headers */
d74 2
a75 2
/* Controlling the compilation driver 
 * ---------------------------------- */
d93 1
a93 1
  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \
d103 1
a103 1
   pic code. */
d108 1
a108 1
   override native specs just for that. */
d130 3
a132 3
/* Runtime target specification 
 * ---------------------------- */
/* You must redefine CPP_PREDEFINES in any arch specific file. */
d135 3
a137 3
/* Implicit calls to library routines
 * ---------------------------------- */
/* Use memcpy and memset instead of bcopy and bzero. */
d140 3
a142 3
/* Miscellaneous parameters
 * ------------------------ */
/* tell libgcc2.c that OpenBSD targets support atexit. */
d145 2
a146 2
/* Controlling debugging info: dbx options 
 * --------------------------------------- */
d148 1
a148 1
 * use DBX don't support it. */
d152 1
a152 1
/* Support of shared libraries, mostly imported from svr4.h through netbsd. */
d159 2
a160 2
/* Assembler format: output and generation of labels
 * ------------------------------------------------- */
d164 1
a164 1
   names for these, they may be overridden in the arch specific file. */ 
d168 1
a168 1
   yet (look for GRACE_PERIOD_EXPIRED in gas/config/obj-aout.c). */
d218 1
a218 1
	fputs(" , . - ", FILE);						\
d243 1
a243 1
    ASM_OUTPUT_LABEL(FILE, NAME);					\
d249 2
a250 2
   size_directive_output was set
   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */
d276 1
a276 1
   be needed when/if we go for arm32 support. */
d283 1
a283 1
/* Tell the assembler that a symbol is global. */
d291 2
a292 2
/* Storage layout 
   -------------- */
d295 1
a295 2
	fixed yet, so DON'T activate it by default.
 */
d297 1
d300 1
a300 2
   #pragma weak
 */
d302 1
@


1.17
log
@Future fix: help egcs avoid #pragma weak, which we don't support.
@
text
@d1 1
a1 1
/* $OpenBSD: openbsd.h,v 1.16 1999/02/17 12:54:27 espie Exp $	*/
d58 12
a78 4
/* CPP_SPEC appropriate for OpenBSD. We deal with -posix and -pthread.
   XXX the way threads are handling currently is not very satisfying,
   since all code must be compiled with -pthread to work.
 */
d80 1
a80 1
#define CPP_SPEC "%{posix:-D_POSIX_SOURCE} %{pthread:-D_POSIX_THREADS}"
a106 3
/* LIB_SPEC appropriate for OpenBSD.  Select the appropriate libc, 
   depending on profiling and threads.
   Basically, -lc(_r)?(_p)?, select _r for threads, and _p for p or pg.  */
d108 1
a108 1
#define LIB_SPEC "-lc%{pthread:_r}%{p:_p}%{!p:%{pg:_p}}"
@


1.16
log
@Update to more recent work: remove DEFAULT_VTABLE_THUNKS, as there
is a big and subtle bug with it.
@
text
@d1 1
a1 1
/* $OpenBSD: openbsd.h,v 1.15 1999/02/17 12:52:36 espie Exp $	*/
d275 5
a279 1

@


1.15
log
@General clean-up, closer match to egcs.
@
text
@d1 1
a1 1
/* $OpenBSD: openbsd.h,v 1.10 1999/02/06 16:31:14 espie Exp $	*/
d269 7
a275 4
 * -------------- */
/* Use VTABLE_THUNKS always: we don't have to worry about binary
   compatibility with older C++ code. */
#define DEFAULT_VTABLE_THUNKS 1
@


1.14
log
@- add OBS_OLD_GAS to conditionalize ASM_SPEC for those archs that still
use it (so that more archs may include openbsd.h as is)
- #undef CPP_PREDEFINES globally.
- reorganize stuff and comments to be more precise and match gcc.info
structure better.
- synch other files
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.13 1999/01/13 00:27:52 espie Exp $	*/
d3 18
a20 5
/* OPENBSD_NATIVE is defined when gcc is integrated into the OpenBSD
   source tree so it can be configured appropriately when using the
   'wrapper' makefile with the GNU configure/build mechanism. The
   'wrapper' method and use of OPENBSD_NATIVE is NOT recommended
   while building cross-compilers. */
d22 13
a36 3
#undef GPLUSPLUS_INCLUDE_DIR
#define GPLUSPLUS_INCLUDE_DIR "/usr/include/g++"

d40 1
a40 2
/* Look for the include files in the system-defined places.  */

a50 2

#undef STANDARD_STARTFILE_PREFIX
d55 1
a55 1

d58 8
d67 4
a70 1
/* CPP_SPEC appropriate for OpenBSD. We deal with -posix and -pthread */
a73 1

a87 7
/* LIB_SPEC appropriate for OpenBSD.  Select the appropriate libc, 
   depending on profiling and threads.
   Basically, -lc(_r)?(_p)?, select _r for threads, and _p for p or pg
 */
#undef LIB_SPEC
#define LIB_SPEC "-lc%{pthread:_r}%{p:_p}%{!p:%{pg:_p}}"

d91 4
d97 1
d99 6
a104 5
/* Add the -R arg switch, needed for dynamic library support. */
#undef SWITCH_TAKES_ARG
#define SWITCH_TAKES_ARG(CHAR) \
  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \
   || (CHAR) == 'R')
d106 1
a108 1

a111 4
/* we want gcc.c to call mkstemps for each file it generates
   (fix taken from egcs-current). */
#define MKTEMP_EACH_FILE

d114 1
a114 2
/* Use memcpy and memset instead of bcopy and bzero for implicit library
   calls. */
d119 1
a119 1
/* tell libgcc2.c that OpenBSD targets support atexit */
d122 6
d129 13
a141 4
/*
 * Some imports from svr4.h in support of shared libraries.
 * Currently, we need the DECLARE_OBJECT_SIZE stuff.
 */
d143 3
a145 5
/* Define the strings used for the .type, .size, and .set directives.
   These strings generally do not vary from one system running openbsd
   to another, but if a given system needs to use different pseudo-op
   names for these, they may be overridden in the file which includes
   this one.  */
d149 1
a149 1
#undef SET_ASM_OP
a151 8
#define SET_ASM_OP	".set"

/* This is how we tell the assembler that a symbol is weak.  */

#undef ASM_WEAKEN_LABEL
#define ASM_WEAKEN_LABEL(FILE,NAME) \
  do { fputs ("\t.weak\t", FILE); assemble_name (FILE, NAME); \
       fputc ('\n', FILE); } while (0)
d154 1
a154 5
   operand of the .type assembler directive.  Different svr4 assemblers
   expect various different forms for this operand.  The one given here
   is just a default.  You may need to override it in your machine-
   specific tm.h file (depending upon the particulars of your assembler).  */

d158 2
a159 4
/* Write the extra assembler code needed to declare a function's result.
   Most svr4 assemblers don't require any special declaration of the
   result value, but there are exceptions.  */

d166 2
a167 6
   entries in an ELF object file under SVR4.  These macros also output
   the starting labels for the relevant functions/objects.  */

/* Write the extra assembler code needed to declare a function properly.
   Some svr4 assemblers need to also have something extra said about the
   function's return value.  We allow for that here.  */
d169 4
d176 1
a176 1
    fprintf (FILE, "\t%s\t ", TYPE_ASM_OP);				\
d178 1
a178 1
    putc (',', FILE);							\
d184 1
d186 15
a200 1
/* Write the extra assembler code needed to declare an object properly.  */
d202 2
d209 1
a209 1
    putc (',', FILE);							\
d216 1
a216 1
	fprintf (FILE, "\t%s\t ", SIZE_ASM_OP);				\
d218 1
a218 1
	fprintf (FILE, ",%d\n",  int_size_in_bytes (TREE_TYPE (DECL)));	\
a227 1

d238 1
a238 1
	 fprintf (FILE, "\t%s\t ", SIZE_ASM_OP);			 \
d240 1
a240 1
	 fprintf (FILE, ",%d\n",  int_size_in_bytes (TREE_TYPE (DECL))); \
d243 1
d245 14
a258 1
/* This is how to declare the size of a function.  */
d260 13
a272 19
#undef ASM_DECLARE_FUNCTION_SIZE
#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)			\
  do {									\
    if (!flag_inhibit_size_directive)					\
      {									\
        char label[256];						\
	static int labelno;						\
	labelno++;							\
	ASM_GENERATE_INTERNAL_LABEL (label, "Lfe", labelno);		\
	ASM_OUTPUT_INTERNAL_LABEL (FILE, "Lfe", labelno);		\
	fprintf (FILE, "\t%s\t ", SIZE_ASM_OP);				\
	assemble_name (FILE, (FNAME));					\
        fprintf (FILE, ",");						\
	assemble_name (FILE, label);					\
        fprintf (FILE, "-");						\
	assemble_name (FILE, (FNAME));					\
	putc ('\n', FILE);						\
      }									\
  } while (0)
@


1.13
log
@Use MKTEMP_EACH_FILE
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.12 1999/01/08 16:30:05 espie Exp $	*/
a34 3
/* We want gcc.c to call mkstemp() for each file it generates.  */
/* (patched with code from egcs) */
#define MKTEMP_EACH_FILE
d36 2
a37 2
/* CPP_SPEC appropriate for OpenBSD. We only deal with -posix
	and -pthread */
d39 1
a42 2
/* ASM_SPEC appropriate for OpenBSD.  We only deal
   with the options for generating PIC code.  */
d44 4
d49 8
a56 1
#define ASM_SPEC " %| %{fpic:-k} %{fPIC:-k -K}"
d58 3
a60 3
/* LIB_SPEC appropriate for OpenBSD.  Select the appropriate
   libc, depending on profiling and threads.  
	Basically, -lc(_r)?(_p)?, select _r for threads, _p for p or pg
a61 1

a62 1
/* #define LIB_SPEC "%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}" */
d65 2
a66 3
/* LINK_SPEC appropriate for OpenBSD.  Support
   for GCC options -static, -assert, and -nostdlib.  */

d71 1
a71 1
/* This defines which switch letters take arguments. */
d77 2
a78 1
/* We have atexit(3).  */
d80 2
a81 1
#define HAVE_ATEXIT
d83 3
a85 1
/* Implicit library calls should use memcpy, not bcopy, etc.  */
d87 4
d92 5
@


1.12
log
@We don't need, nor support
#pragma weak/#pragma pack

That's just compatibility with native svr4 that was brought in by
cut & paste.
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.11 1998/12/21 13:18:26 espie Exp $	*/
d35 3
a37 3
/* We want gcc.c to call mktemp() for each file it generates. We would
   prefer mkstemp(), but we will take what we get. XXX busted */
#undef MKTEMP_EACH_FILE
@


1.11
log
@Steal commit from d: forgetting to update comments is a bad idea.

Also, remove some pomposity.
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.10 1998/11/20 11:18:22 d Exp $	*/
a80 3
/* Handle #pragma weak and #pragma pack.  */

#define HANDLE_SYSV_PRAGMA
@


1.10
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.9 1998/05/06 14:25:35 csapuntz Exp $	*/
d39 2
a40 2
/* Provide a CPP_SPEC appropriate for OpenBSD.  Current we just deal with
   the GCC option `-posix'.  */
d45 1
a45 1
/* Provide an ASM_SPEC appropriate for OpenBSD.  Currently we only deal
d51 4
a54 3
/* Provide a LIB_SPEC appropriate for OpenBSD.  Just select the appropriate
   libc, depending on whether we're doing profiling.  */
/* Also, deal with the -pthread option. */
d60 2
a61 2
/* Provide a LINK_SPEC appropriate for OpenBSD.  Here we provide support
   for the special GCC options -static, -assert, and -nostdlib.  */
@


1.9
log
@

Added support for #pragma pack and #pragma weak. This makes Wine much
happier.
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.8 1998/03/18 04:51:23 marc Exp $	*/
d43 1
a43 1
#define CPP_SPEC "%{posix:-D_POSIX_SOURCE}"
d53 1
d56 2
a57 1
#define LIB_SPEC "%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}"
@


1.8
log
@make -R /path/to/lib work the same as -R/path/to/lib
Thanks to <Marc.Espie@@liafa.jussieu.fr> for pointing this out.
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.7 1998/03/11 23:49:19 millert Exp $	*/
d77 4
@


1.7
log
@Pass on -R to ld.  Marco S Hyman <marc@@snafu.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.6 1998/03/03 21:21:16 niklas Exp $	*/
d64 5
@


1.6
log
@GCC 2.8.0 merge
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.5 1997/09/17 08:06:47 deraadt Exp $	*/
d62 1
a62 1
  "%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{static:-Bstatic} %{assert*}"
@


1.5
log
@disable MKTEMP_EACH_FILE, it is not coded correctly inside gcc.c
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.4 1997/04/08 19:33:41 deraadt Exp $	*/
d11 6
d20 5
a24 5
#define INCLUDE_DEFAULTS		\
  {					\
    { GPLUSPLUS_INCLUDE_DIR, 1, 1 },	\
    { STANDARD_INCLUDE_DIR, 0, 0 },	\
    { 0, 0, 0 }				\
@


1.4
log
@use MKTEMP_EACH_FILE, whee
@
text
@d1 1
a1 1
/*	$OpenBSD: openbsd.h,v 1.3 1996/04/29 07:09:45 niklas Exp $	*/
d30 2
a31 2
   prefer mkstemp(), but we will take what we get. */
#define MKTEMP_EACH_FILE 1
@


1.3
log
@From NetBSD:
Re-enable weak alias and sysv pragma support that was lost when we
upgraded to gcc-2.7.  These changes have been submitted to the gcc
maintainers.  With luck, we won't have this problem again...
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d29 3
@


1.2
log
@Moved INCLUDE_DEFAULTS path define into openbsd.h.  openbsd.h now has
OPENBSD_NATIVE section.  Please use this to overload manifest constants.

Added more files to CLEANFILES in Makefile.bsd-wrapper.
@
text
@d1 2
d69 5
a73 5
/* Define the strings used for the special svr4 .type and .size directives.
   These strings generally do not vary from one system running svr4 to
   another, but if a given system (e.g. m88k running svr) needs to use
   different pseudo-op names for these, they may be overridden in the
   file which includes this one.  */
d77 1
d80 1
@


1.1
log
@First cut at making a minimal intrusive munge of gcc to fit in a BSD
framework.  This means, provide a Makefile.bsd-wrapper.  Remove
intermediate files from the source dir.  Build them in the obj-dir.
Add some Makefile hooks so we can tune the std Makefile for our
purpose but still have it behave normal for out-of-tree
configurations.  Only i386 is supported for now.  The other archs will
follow soon.   This checkin requires an existing makeinfo and a yacc
that accepts -o.
@
text
@d1 186
a186 2
/* At the moment OpenBSD is really much like NetBSD */
#include <netbsd.h>
@

