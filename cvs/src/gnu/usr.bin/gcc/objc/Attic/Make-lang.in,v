head	1.5;
access;
symbols
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	FSF_2_8_1:1.1.1.2
	FSF_2_8_0:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.5
date	99.05.26.16.30.36;	author espie;	state dead;
branches;
next	1.4;

1.4
date	98.03.08.18.31.42;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.03.03.21.36.32;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.02.15.07.58.02;	author niklas;	state dead;
branches;
next	1.1;

1.1
date	98.02.14.19.26.43;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.14.19.26.43;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.03.08.18.14.28;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@So long, and thanks for all the bugs.
@
text
@# Top level makefile fragment for GNU Objective-C
#   Copyright (C) 1997, 1998 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.
#
# Extra flags to pass to recursive makes.
OBJC_FLAGS_TO_PASS = \
	"OBJC_FOR_BUILD=$(OBJC_FOR_BUILD)" \
	"OBJCFLAGS=$(OBJCFLAGS)" \
	"OBJC_FOR_TARGET=$(OBJC_FOR_TARGET)" \

# Actual names to use when installing a native compiler.
#OBJC_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`

# Actual names to use when installing a cross-compiler.
#OBJC_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`

#
# Define the names for selecting Objective-C in LANGUAGES.
OBJC objc: cc1obj objc-runtime
OBJECTIVE-C objective-c: cc1obj objc-runtime

# Tell GNU make to ignore these if they exist.
.PHONY: objective-c objc ObjC

# The Objective C thread file
OBJC_THREAD_FILE=thr-$(GCC_THREAD_FILE)

# Language-specific object files for Objective C.
OBJC_OBJS = objc-parse.o objc-act.o $(C_AND_OBJC_OBJS)

cc1obj: $(P) $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ $(OBJC_OBJS) $(OBJS) \
		$(BC_OBJS) $(LIBS)

# Objective C language specific files.

objc-parse.o : objc-parse.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h input.h \
   flags.h output.h $(srcdir)/objc/objc-act.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c objc-parse.c

objc-parse.c : objc-parse.y
	$(BISON) $(BISONFLAGS) -o objc-parse.c objc-parse.y

objc-parse.y: $(srcdir)/c-parse.in
	echo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y
	sed -e "/^ifc$$/,/^end ifc$$/d" \
	  -e "/^ifobjc$$/d" -e "/^end ifobjc$$/d" \
	  $(srcdir)/c-parse.in >>tmp-objc-prs.y
	sh $(srcdir)/move-if-change tmp-objc-prs.y objc-parse.y

objc-act.o : $(srcdir)/objc/objc-act.c \
   $(CONFIG_H) $(TREE_H) $(RTL_H) \
   $(srcdir)/c-tree.h $(srcdir)/c-lex.h \
   $(srcdir)/flags.h $(srcdir)/objc/objc-act.h $(srcdir)/input.h \
   $(srcdir)/function.h $(srcdir)/output.h c-parse.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(srcdir)/objc/objc-act.c

objc-runtime: objc-headers libobjc.a

# copy objc header files into build directory
objc-headers: stmp-fixinc
	if [ -d include ]; then true; else mkdir include; fi
	cd objc; \
	if [ -f Makefile ]; then \
	  $(MAKE) copy-headers \
	  tooldir=$(tooldir) \
	  AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
	  GCC_FOR_TARGET="../xgcc -B../" \
	  GCC_CFLAGS="$(GCC_CFLAGS)" incinstalldir=../include; \
	fi
	touch objc-headers

# Objective C runtime library specific files.

OBJC_O = objc/hash.o objc/sarray.o \
	objc/class.o objc/sendmsg.o \
	objc/init.o objc/archive.o \
	objc/encoding.o objc/selector.o \
	objc/objects.o objc/misc.o \
	objc/NXConstStr.o objc/Object.o \
	objc/Protocol.o objc/nil_method.o \
	objc/thr.o objc/linking.o \
	objc/$(OBJC_THREAD_FILE).o

objc/hash.o: $(srcdir)/objc/hash.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/hash.c -o $@@
objc/sarray.o: $(srcdir)/objc/sarray.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/sarray.c -o $@@
objc/class.o: $(srcdir)/objc/class.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/class.c -o $@@
objc/sendmsg.o: $(srcdir)/objc/sendmsg.c $(GCC_PASSES) objc/runtime-info.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -Iobjc \
	-c $(srcdir)/objc/sendmsg.c -o $@@
objc/init.o: $(srcdir)/objc/init.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/init.c -o $@@
objc/archive.o: $(srcdir)/objc/archive.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/archive.c -o $@@
objc/encoding.o: $(srcdir)/objc/encoding.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/encoding.c -o $@@
objc/selector.o: $(srcdir)/objc/selector.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/selector.c -o $@@
objc/objects.o: $(srcdir)/objc/objects.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/objects.c -o $@@
objc/misc.o: $(srcdir)/objc/misc.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/misc.c -o $@@
objc/NXConstStr.o: $(srcdir)/objc/NXConstStr.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-fgnu-runtime -c $(srcdir)/objc/NXConstStr.m -o $@@
objc/Object.o: $(srcdir)/objc/Object.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-fgnu-runtime -c $(srcdir)/objc/Object.m -o $@@
objc/Protocol.o: $(srcdir)/objc/Protocol.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-fgnu-runtime -c $(srcdir)/objc/Protocol.m -o $@@
objc/thr.o: $(srcdir)/objc/thr.h $(srcdir)/objc/thr.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/thr.c -o $@@
objc/$(OBJC_THREAD_FILE).o: $(srcdir)/objc/$(OBJC_THREAD_FILE).c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/$(OBJC_THREAD_FILE).c -o $@@
objc/nil_method.o: $(srcdir)/objc/nil_method.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/nil_method.c -o $@@
objc/linking.o: $(srcdir)/objc/linking.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-fgnu-runtime -c $(srcdir)/objc/linking.m -o $@@

objc/libobjc_entry.o: $(srcdir)/objc/libobjc_entry.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/libobjc_entry.c -o $@@

# Build the Objective C runtime library.
libobjc.a: cc1obj specs stmp-int-hdrs libgcc2.ready \
 $(USE_COLLECT2) $(EXTRA_PARTS) objc/runtime-info.h $(OBJC_O)
	-rm -f libobjc.a
	$(AR) $(AR_FLAGS) libobjc.a $(OBJC_O)
	-if $(RANLIB_TEST) ; then $(RANLIB) libobjc.a; else true; fi

libobjc_s.a: libobjc.a
	mv libobjc.a libobjc_s.a

# Create a relocatable DLL
libobjc.dll: libobjc_s.a objc/libobjc_entry.o
	$(GCC_FOR_TARGET) -mdll -Wl,--base-file -Wl,libobjc.base \
		-o libobjc.dll libobjc_s.a \
		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def \
		--base-file libobjc.base --output-exp libobjc.exp
	$(GCC_FOR_TARGET) -mdll -Wl,--base-file libobjc.base libobjc.exp \
		-o libobjc.dll libobjc_s.a \
		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def \
		--base-file libobjc.base --output-exp libobjc.exp
	$(GCC_FOR_TARGET) libobjc.exp -mdll \
		-o libobjc.dll libobjc_s.a \
		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def \
		--output-lib libobjc.a

# Platform generated information needed by ObjC runtime
objc/runtime-info.h: cc1obj
	echo "" > tmp-runtime
	echo "/* This file is automatically generated */" >$@@
	./cc1obj -print-objc-runtime-info tmp-runtime >>$@@
	rm -f tmp-runtime
#
# Build hooks:

objc.all.build:
objc.all.cross:
objc.start.encap:
objc.rest.encap:

objc.info:
objc.dvi:

#
# Install hooks:
# cc1obj is installed elsewhere as part of $(COMPILERS).

objc.install-normal: installdirs
	-if [ -f libobjc.a ] ; then \
	  rm -f $(libsubdir)/libobjc.a; \
	  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi; \
	  chmod a-x $(libsubdir)/libobjc.a; \
	else true; fi
	-if [ -f libobjc_s.a ] ; then \
	  rm -f $(libsubdir)/libobjc_s.a; \
	  $(INSTALL_DATA) libobjc_s.a $(libsubdir)/libobjc_s.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libsubdir); $(RANLIB) libobjc_s.a); else true; fi; \
	  chmod a-x $(libsubdir)/libobjc_s.a; \
	else true; fi
	-if [ -f libobjc.dll ] ; then \
	  rm -f $(bindir)/libobjc.dll; \
	  $(INSTALL_DATA) libobjc.dll $(bindir)/libobjc.dll; \
	else true; fi

objc.install-common:

objc.install-info:

objc.install-man:

objc.uninstall:
#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.
objc.mostlyclean:
	-rm -f tmp-objc-prs.y
	-rm -f objc/*$(objext) objc/xforward objc/fflags
	-rm -f objc/runtime-info.h
	-rm -f libobjc.a libobjc_s.a libobjc.dll
	-rm -f libobjc.base libobjc.exp
	-rm -f objc-parse.y
	-rm -f objc-parse.c objc-parse.output
objc.clean: objc.mostlyclean
	-rm -rf objc-headers
objc.distclean:
	-rm -f objc/Makefile objc/Make-host objc/Make-target
	-rm -f objc/config.status objc/config.cache
	-rm -f objc-parse.output
objc.extraclean:
objc.maintainer-clean:

#
# Stage hooks:

objc.stage1: stage1-start
	-mv objc/*$(objext) stage1/objc
	-mv cc1obj$(exeext) stage1
	-mv libobjc.a stage1
objc.stage2: stage2-start
	-mv objc/*$(objext) stage2/objc
	-mv cc1obj$(exeext) stage2
	-mv libobjc.a stage2
objc.stage3: stage3-start
	-mv objc/*$(objext) stage3/objc
	-mv cc1obj$(exeext) stage3
	-mv libobjc.a stage3
objc.stage4: stage4-start
	-mv objc/*$(objext) stage4/objc
	-mv cc1obj$(exeext) stage4
	-mv libobjc.a stage4

#
# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
# ??? Note that this should be fixed once the Makefile is fixed to do
# the build in the inner directory.
objc.distdir: $(srcdir)/objc/objc-parse.c
	mkdir tmp/objc
#	cd objc ; $(MAKE) $(FLAGS_TO_PASS) objc-parse.c
	cd objc; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/objc >/dev/null 2>&1 || cp $$file ../tmp/objc; \
	done
@


1.4
log
@update to gcc 2.8.1
@
text
@@


1.3
log
@GCC 2.8.0 merge
@
text
@d2 1
a2 1
#   Copyright (C) 1997 Free Software Foundation, Inc.
d130 1
a130 1
objc/sendmsg.o: $(srcdir)/objc/sendmsg.c $(GCC_PASSES)
d207 1
a207 1
	echo "" > emptyfile
d209 2
a210 2
	./cc1obj -print-objc-runtime-info emptyfile >>$@@

d277 1
a277 1
objc.stage1:
d281 1
a281 1
objc.stage2:
d285 1
a285 1
objc.stage3:
d289 1
a289 1
objc.stage4:
d299 3
a301 1
objc.distdir:
d303 1
a303 1
	cd objc ; $(MAKE) $(FLAGS_TO_PASS) objc-parse.c
@


1.2
log
@These files were new in the 2.8 import (into the FSF branch) and cvs is stupid
enough to think my branch import want s the new files to end up in the trunk
as well.  Maybe cvs know how to do what I want, but I could not find it in
the manpage
@
text
@d71 2
a72 4
objc-parse.o : $(srcdir)/objc/objc-parse.c \
   $(CONFIG_H) $(TREE_H) \
   $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/input.h \
   $(srcdir)/flags.h $(srcdir)/output.h $(srcdir)/objc/objc-act.h
d74 1
a74 1
	-c $(srcdir)/objc/objc-parse.c
d76 2
a77 3
$(srcdir)/objc/objc-parse.c : $(srcdir)/objc/objc-parse.y
	cd $(srcdir)/objc; \
	$(BISON) $(BISONFLAGS) objc-parse.y -o objc-parse.c
d79 1
a79 1
$(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in
d84 1
a84 1
	$(srcdir)/move-if-change tmp-objc-prs.y $(srcdir)/objc/objc-parse.y
d90 1
a90 1
   $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/c-parse.h
d263 2
a272 2
	-rm -f objc/objc-parse.y
	-rm -f objc/objc-parse.c objc/objc-parse.output
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@FSF gcc 2.8.1
@
text
@d2 1
a2 1
#   Copyright (C) 1997, 1998 Free Software Foundation, Inc.
d133 1
a133 1
objc/sendmsg.o: $(srcdir)/objc/sendmsg.c $(GCC_PASSES) objc/runtime-info.h
d210 1
a210 1
	echo "" > tmp-runtime
d212 2
a213 2
	./cc1obj -print-objc-runtime-info tmp-runtime >>$@@
	rm -f tmp-runtime
d280 1
a280 1
objc.stage1: stage1-start
d284 1
a284 1
objc.stage2: stage2-start
d288 1
a288 1
objc.stage3: stage3-start
d292 1
a292 1
objc.stage4: stage4-start
d302 1
a302 3
# ??? Note that this should be fixed once the Makefile is fixed to do
# the build in the inner directory.
objc.distdir: $(srcdir)/objc/objc-parse.c
d304 1
a304 1
#	cd objc ; $(MAKE) $(FLAGS_TO_PASS) objc-parse.c
@

