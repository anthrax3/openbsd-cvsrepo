head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.8.0.16
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.10
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.12
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@# @;


1.13
date	2017.03.05.00.26.08;	author jsg;	state Exp;
branches;
next	1.12;
commitid	aqjvga3xhotZrvV9;

1.12
date	2017.01.25.08.56.07;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	jf3e9X9AE7yhdtHI;

1.11
date	2016.10.03.21.24.40;	author natano;	state Exp;
branches;
next	1.10;
commitid	gb0S1xHOi6VkqMuN;

1.10
date	2016.09.18.08.58.13;	author natano;	state Exp;
branches;
next	1.9;
commitid	BXZIVfFv6OCHOoWz;

1.9
date	2016.09.11.07.42.02;	author guenther;	state Exp;
branches;
next	1.8;
commitid	noYMEVOXceLT1aKj;

1.8
date	2013.07.05.21.29.51;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.10.21.07.23;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.10.21.06.23;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.05.20.03.06;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.28.18.59.28;	author pascal;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.16.18.57.54;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.04.23.58.26;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.24.20.19.23;	author miod;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Go back to only specifying --target when building cross.

The OpenBSD triple includes the OpenBSD version.  When this recently
changed binutils started building prefixed tools when moving to a new
OpenBSD version which isn't what we want.

ok kettenis@@
@
text
@#	$OpenBSD: Makefile.bsd-wrapper,v 1.12 2017/01/25 08:56:07 kettenis Exp $

.include <bsd.own.mk>

TARGET_ARCH?=	${MACHINE_ARCH}

SUBDIRS=	opcodes bfd
CONF_SUBDIRS=	opcodes bfd

CFLAGS+=	${PIE_DEFAULT}
# This allows moving the whole binutils installation around for 
# testing purposes
PREFIX=/usr
.if ${PREFIX} != "/usr"
MANDIR=${PREFIX}/share/man/man
.endif

MAN=		binutils/doc/addr2line.1 binutils/doc/objcopy.1 \
		binutils/doc/objdump.1 binutils/doc/readelf.1 \
		c++filt.1

#### gdb comes from older binutils at the moment
###CONF_SUBDIRS+=      gdb
###SUBDIRS+=   gdb
###INST_SUBDIRS+=      gdb
###MAN+=               gdb/gdb.1

SUBDIRS+=	binutils
CONF_SUBDIRS+=	binutils
INST_SUBDIRS+=	binutils
MAN+=		binutils/doc/ar.1 binutils/doc/ranlib.1 \
		binutils/doc/strings.1 binutils/doc/strip.1

.if ${TARGET_ARCH} != "aarch64"
SUBDIRS+=	ld gas
CONF_SUBDIRS+=	ld gas
INST_SUBDIRS+=	ld gas
MAN+=		gas/doc/as.1	ld/ld.1
.endif

# Used by the GNU Makefile
ALL_MODULES=${SUBDIRS:S/^/all-/g}
CONFIGURE_MODULES=${CONF_SUBDIRS:S/^/configure-/g}
CONFIGURE_HOST_MODULES=${CONF_SUBDIRS:S/^/configure-/g}
ALL_HOST_MODULES=${SUBDIRS:S/^/all-/g}
INSTALL_MODULES=${INST_SUBDIRS:S/^/install-/g}
INFO_HOST_MODULES=${SUBDIRS:S/^/info-/g}
INSTALL_INFO_HOST_MODULES=${INST_SUBDIRS:S/^/install-info-/g}

.if defined(CROSSDIR)
CONFIGTARGET=--target=${TARGET_ARCH}-unknown-openbsd${OSREV}
.else
CONFIGTARGET=
.endif

.if ${TARGET_ARCH} == "aarch64"
CONFIGTARGET+=--without-gnu-ld
CONFIGTARGET+=--without-gnu-as
.endif

all:	config.status
	SUBDIRS='${SUBDIRS}' \
	  CONFIGURE_HOST_MODULES='${CONFIGURE_HOST_MODULES}' \
	  ${MAKE} CC="${CC}" \
	    CFLAGS="${CFLAGS} ${COPTS}" LDFLAGS=${LDSTATIC} \
	    scriptdir=${PREFIX}/libdata \
	    tooldir=${PREFIX} \
	    MAKEINFO='makeinfo --no-split' \
	    MAKEINFOFLAGS='' \
	    BSDSRCDIR=${BSDSRCDIR} \
	    ALL_MODULES="${ALL_MODULES}" \
	    ALL_HOST_MODULES='${ALL_HOST_MODULES}' \
	    INFO_HOST_MODULES='${INFO_HOST_MODULES}' all info

.include <bsd.own.mk>

.ifdef GLOBAL_AUTOCONF_CACHE
CF=	--cache-file=${GLOBAL_AUTOCONF_CACHE}
.else
CF=
.endif

do-config: .USE
	PATH="/bin:/usr/bin:/sbin:/usr/sbin" \
	MAKEINFO='makeinfo --no-split' \
	sh ${.CURDIR}/configure --prefix=${PREFIX} \
	    --infodir='$${prefix}/share/info' \
	    --disable-nls --disable-gdbtk --disable-install-libbfd ${CF} \
	    ${CONFIGTARGET}
	cd ${.OBJDIR} && \
	    sed -e 's,SUBDIRS *=,SUBDIRS ?=,' <Makefile >Makefile.tmp && \
	    mv -f Makefile.tmp Makefile
	cd ${.OBJDIR} && \
	    ${MAKE} ${CONFIGURE_MODULES}

gas/doc/as.1: config.status
	cd ${.OBJDIR}/gas/doc && ${MAKE} as.1

ld/ld.1: config.status
	cd ${.OBJDIR}/ld && ${MAKE} ld.1

config: do-config
.ifndef GLOBAL_AUTOCONF_CACHE
	-rm -f config.cache
.endif

config.status: do-config

# Need to pass SUBDIRS because of install-info
install: maninstall
	${INSTALL} -d -o ${BINOWN} -g ${BINGRP} \
	    ${DESTDIR}${PREFIX}/libdata/ldscripts
	SUBDIRS='${INST_SUBDIRS}' ${MAKE} DESTDIR='${DESTDIR}' \
	    INSTALL_MAN= \
	    scriptdir=${PREFIX}/libdata \
	    tooldir=${PREFIX} \
	    BSDSRCDIR=${BSDSRCDIR} \
	    INSTALL_MODULES='${INSTALL_MODULES}' \
	    INSTALL_PROGRAM='${INSTALL} -c -S ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}' \
	    INSTALL_DATA='${INSTALL} -c -o ${DOCOWN} -g ${DOCGRP} -m ${NONBINMODE}' \
	    INSTALL_INFO_HOST_MODULES='${INSTALL_INFO_HOST_MODULES}' \
	      install install-info

clean cleandir:
	-@@if [ -e Makefile ]; then ${MAKE} distclean; fi

c++filt.1: binutils/doc/cxxfilt.man
	sed -e 's,@@PROGRAM@@,c++filt,' <${.CURDIR}/binutils/doc/cxxfilt.man >$@@

depend:
	# Nothing here so far...

lint:
	# Nothing here so far...

tags:
	# Nothing here so far...

BEFOREMAN=config.status

.PHONY: config

.include <bsd.obj.mk>
.include <bsd.subdir.mk>

.ifdef NOMAN
maninstall:
	@@echo NOMAN is set
.else
.include <bsd.man.mk>
.endif
@


1.12
log
@Stub out aarch64 support and avoid building gas and ld on this architecture.

ok mpi@@, patrick@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.11 2016/10/03 21:24:40 natano Exp $
d50 1
d52 3
@


1.11
log
@Fix ownership for install on a noperm filesystem.
joint work with tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.10 2016/09/18 08:58:13 natano Exp $
d5 2
d28 3
a30 3
SUBDIRS+=	binutils ld gas
CONF_SUBDIRS+=	binutils ld gas
INST_SUBDIRS+=	binutils ld gas
d32 8
a39 2
		binutils/doc/strings.1 binutils/doc/strip.1 \
		gas/doc/as.1	ld/ld.1
a49 2
# cross-compilation
.if defined(TARGET_ARCH)
d51 4
a54 2
.else
CONFIGTARGET=
@


1.10
log
@Use ${INSTALL} instead of install, like in all the other Makefile's.
ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.9 2016/09/11 07:42:02 guenther Exp $
d99 2
@


1.9
log
@Install programs with ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}
Install info and data files with -o ${DOCOWN} -g ${DOCGRP} -m ${NONBINMODE}

Prompted by natano@@
Tweaks and oks deraadt@@ natano@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.8 2013/07/05 21:29:51 miod Exp $
d105 2
a106 2
	    INSTALL_PROGRAM='install -c -S ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}' \
	    INSTALL_DATA='install -c -o ${DOCOWN} -g ${DOCGRP} -m ${NONBINMODE}' \
@


1.8
log
@ELF_TOOLCHAIN bye bye.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.7 2013/03/10 21:07:23 miod Exp $
d105 2
a106 1
	    INSTALL_PROGRAM='install -c -S' \
@


1.7
log
@Sync to ../binutils/Makefile.bsd-wrapper rev. 1.75:
eplace a comment asking for a particular order to build stuff in
by actual make rules to enforce that order.
While here, correct the MANDIR which must no more contain "cat".
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.5 2013/01/05 20:03:06 miod Exp $
a25 1
.if ${ELF_TOOLCHAIN:L} == "yes"
a31 4
.  else
CONF_SUBDIRS=${SUBDIRS}
CONF_SUBDIRS+= binutils
.endif
a61 5
.if ${ELF_TOOLCHAIN:L} != "yes"
	cd ${.OBJDIR}/binutils && \
	    ${MAKE} CC="${CC}" CFLAGS="${CFLAGS} ${COPTS}" \
	    LDFLAGS=${LDSTATIC} objdump
.endif
a83 1
.if ${ELF_TOOLCHAIN:L} == "yes"
a88 1
.endif
a107 5
.if ${ELF_TOOLCHAIN:L} != "yes"
	cd ${.OBJDIR}/binutils && \
		${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -o ${BINOWN} \
		    -g ${BINGRP} -m ${BINMODE} objdump ${DESTDIR}${PREFIX}/bin
.endif
@


1.6
log
@Let platforms configured to use binutils 2.17 still recurse into the binutils
2.15 directory, but only to build gdb.
ok deraadt@@ espie@@
@
text
@d13 1
a13 1
MANDIR=${PREFIX}/share/man/cat
d93 1
d95 1
a95 2
	# We need to generate as.1 and ld.1 immediately after config.status
	# for the manpage machinery to work properly.
d97 2
@


1.5
log
@Replace the list of platforms enabled (or not) to build the whole binutils
with a test of ELF_TOOLCHAIN provided by bsd.own.mk.
No functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.4 2012/08/28 18:59:28 pascal Exp $
d20 1
a20 1
#### gdb comes from other binutils !?!?!
d31 2
a32 3
		binutils/doc/strings.1 binutils/doc/strip.1
# no as or ld manual ??? 
#		gas/doc/as.1	ld/ld.1
@


1.4
log
@Add support for PIE-by-default in both ld and gcc.  This is a completely
different approach than the one taken in kurt@@'s original diff, but deemed
better after discussion and diff exchange with kettenis@@ and matthew@@.

Lots of feedback by kettenis@@ and matthew@@, prodding and encouragement by
deraadt@@.

ok kettenis@@ matthew@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.3 2011/11/16 18:57:54 schwarze Exp $
d3 1
a3 9
OLD_TOOLCHAIN=m68k m88k vax

.for _arch in ${MACHINE_CPU}
.  if !empty(OLD_TOOLCHAIN:M${_arch})
USING_OLD_TOOLCHAIN?=yes
.else
USING_OLD_TOOLCHAIN?=no
.  endif
.endfor
d26 1
a26 1
.if ${USING_OLD_TOOLCHAIN:L} != "yes"
d68 1
a68 1
.if ${USING_OLD_TOOLCHAIN:L} == "yes"
d94 1
a94 1
.if ${USING_OLD_TOOLCHAIN:L} != "yes"
d119 1
a119 1
.if ${USING_OLD_TOOLCHAIN:L} == "yes"
@


1.3
log
@Sync to ../binutils/Makefile.bsd-wrapper rev. 1.76:
Always install addr2line(1), objcopy(1), and readelf(1) manuals,
even on architectures with !ELF_TOOLCHAIN && !USING_NEW_BINUTILS.
Such architectures do not yet exist, but both symmetry
and fixing potential future issues early  are good ideas.
ok jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.2 2011/07/04 23:58:26 drahn Exp $
d16 1
@


1.2
log
@My merges of miod's binutils-2.17 WIP code with my changed necessary to get
somewhere with it building on arm/ia64. much pressure pirofti@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.1 2011/04/24 20:19:23 miod Exp $
d23 3
a25 1
MAN=		binutils/doc/objdump.1 c++filt.1
d37 2
a38 4
MAN+=		binutils/doc/addr2line.1 binutils/doc/ar.1 \
		binutils/doc/objcopy.1 binutils/doc/ranlib.1 \
		binutils/doc/readelf.1 binutils/doc/strings.1 \
		binutils/doc/strip.1
@


1.1
log
@A first attempt at merging our local changes and fixes into the 2.17 codebase.
ld(1) needs a lot more work, as the upstream code evolved significantly since
2.15, mostly due to changes in PIE binaries layout, and we had already
diverged significantly to implement W^X.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.74 2010/02/03 20:48:58 miod Exp $
d3 1
a3 1
NEW_BINUTILS=alpha amd64 arm hppa hppa64 i386 mips64 powerpc sh sparc sparc64
d6 2
a7 2
.  if !empty(NEW_BINUTILS:M${_arch})
USING_NEW_BINUTILS?=yes
d9 1
a9 1
USING_NEW_BINUTILS?=no
d25 5
a29 7
#### cross-compilation
###.if !defined(TARGET_ARCH)
###CONF_SUBDIRS+=	gdb
###SUBDIRS+=	gdb
###INST_SUBDIRS+=	gdb
###MAN+=		gdb/gdb.1
###.endif
d31 1
a31 1
.if ${USING_NEW_BINUTILS:L} == "yes"
d38 3
a40 2
		binutils/doc/strip.1 \
		gas/doc/as.1 ld/ld.1
d75 1
a75 1
.if ${USING_NEW_BINUTILS:L} != "yes"
d101 1
a101 1
.if ${USING_NEW_BINUTILS:L} == "yes"
d126 1
a126 1
.if ${USING_NEW_BINUTILS:L} != "yes"
d135 2
a136 2
c++filt.1: binutils/cxxfilt.man
	sed -e 's,@@PROGRAM@@,c++filt,' <${.CURDIR}/binutils/cxxfilt.man >$@@
@

