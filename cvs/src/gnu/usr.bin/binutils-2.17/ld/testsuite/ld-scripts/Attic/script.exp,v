head	1.2;
access;
symbols
	BINUTILS_2_17_RELEASE:1.1.1.1 FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2011.04.24.22.12.12;	author miod;	state dead;
branches;
next	1.1;

1.1
date	2011.04.24.20.14.52;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.04.24.20.14.52;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Grr, this was supposed to be an import without the testsuite directories,
really.
@
text
@# Test basic linker script functionality
# By Ian Lance Taylor, Cygnus Support
#   Copyright 1999, 2000, 2001, 2002, 2004
#   Free Software Foundation, Inc.
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.

set testname "script"

if ![ld_assemble $as $srcdir/$subdir/script.s tmpdir/script.o] { 
    unresolved $testname
    return
}

proc check_script { } {
    global nm
    global testname
    global nm_output

    if ![ld_nm $nm "" tmpdir/script] {
	unresolved $testname
	return
    } 

    if {![info exists nm_output(text_start)] \
	    || ![info exists nm_output(text_end)] \
	    || ![info exists nm_output(data_start)] \
	    || ![info exists nm_output(data_end)]} {
	send_log "bad output from nm\n"
	verbose "bad output from nm"
	fail $testname
	return
    } 

    set passes 1
    set text_end 0x104
    set data_end 0x1004

    if [istarget *c4x*-*-*] then {
	set text_end 0x101
	set data_end 0x1001
    }

    if [istarget *c54x*-*-*] then {
	set text_end 0x102
	set data_end 0x1002
    }

    if {$nm_output(text_start) != 0x100} {
	send_log "text_start == $nm_output(text_start)\n"
	verbose "text_start == $nm_output(text_start)"
	set passes 0
    } 

    if {$nm_output(text_end) < $text_end \
	    || $nm_output(text_end) > 0x110} {
	send_log "text_end == $nm_output(text_end)\n"
	verbose "text_end == $nm_output(text_end)"
	set passes 0
    } 

    if {$nm_output(data_start) != 0x1000} {
	send_log "data_start == $nm_output(data_start)\n"
	verbose "data_start == $nm_output(data_start)"
	set passes 0
    } 

    if {$nm_output(data_end) < $data_end \
	    || $nm_output(data_end) > 0x1010} {
	send_log "data_end == $nm_output(data_end)\n"
	verbose "data_end == $nm_output(data_end)"
	set passes 0
    } 

    if { $passes } {
	pass $testname
    } else {
	fail $testname
    }
}

# PE targets need to set the image base to 0 to avoid complications from nm.
set flags ""
if {[istarget "*-*-pe*"] \
    || [istarget "*-*-cygwin*"] \
    || [istarget "*-*-mingw32*"] \
    || [istarget "*-*-winnt*"] \
    || [istarget "*-*-nt"] \
    || [istarget "*-*-interix*"] } then {
  set flags "--image-base 0"
}

if ![ld_simple_link $ld tmpdir/script "$flags -T $srcdir/$subdir/script.t tmpdir/script.o"] {
    fail $testname
} else {
    check_script
}

set testname "MRI script"

if ![ld_simple_link $ld tmpdir/script "$flags -c $srcdir/$subdir/scriptm.t"] {
    fail $testname
} else {
    check_script
}

set testname "MEMORY"

if ![ld_simple_link $ld tmpdir/script "$flags -T $srcdir/$subdir/memory.t tmpdir/script.o"] {
    fail $testname
} else {
    check_script
}


@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Here comes the easter bunnytils 2.17 (the last version released against a
licence mere mortals can understand the terms of); will be connected to the
build on an arch-by-arch basis.

Testsuites and generated files have been intentionnaly omitted from this import.

Peer pressure and ok from at least drahn@@ pirofti@@ deraadt@@
@
text
@@
