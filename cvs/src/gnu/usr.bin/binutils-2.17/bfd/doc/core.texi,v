head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.26
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.24
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.18
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.20
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.12
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.16
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.14
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.10
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.8
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.4
	OPENBSD_5_0:1.1.1.1.0.2
	OPENBSD_5_0_BASE:1.1.1.1
	BINUTILS_2_17_RELEASE:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2011.04.24.20.14.44;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.04.24.20.14.44;	author miod;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@@@section Core files


@@subsection Core file functions


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command (bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@@findex generic_core_file_matches_executable_p
@@subsubsection @@code{generic_core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean generic_core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return TRUE if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached
to @@var{exec_bfd}.  The match is based on executable
basenames only.

Note: When not able to determine the core file failing
command or the executable name, we still return TRUE even
though we're not sure that core file and executable match.
This is to avoid generating a false warning in situations
where we really don't know whether they match or not.

@


1.1.1.1
log
@Here comes the easter bunnytils 2.17 (the last version released against a
licence mere mortals can understand the terms of); will be connected to the
build on an arch-by-arch basis.

Testsuites and generated files have been intentionnaly omitted from this import.

Peer pressure and ok from at least drahn@@ pirofti@@ deraadt@@
@
text
@@
