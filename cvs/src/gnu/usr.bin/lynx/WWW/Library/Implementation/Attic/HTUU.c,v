head	1.6;
access;
symbols
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.5;
commitid	EcR8E7r0stjLUV4p;

1.5
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.4;
commitid	lGGuvDWEniklWrQe;

1.4
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.49;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.45;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.45;	author maja;	state Exp;
branches;
next	;


desc
@@


1.6
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HTUU.c,v 1.11 2010/09/21 23:55:12 tom Exp $
 *
 * MODULE							HTUU.c
 *			UUENCODE AND UUDECODE
 *
 * ACKNOWLEDGEMENT:
 *	This code is taken from rpem distribution, and was originally
 *	written by Mark Riordan.
 *
 * AUTHORS:
 *	MR	Mark Riordan	riordanmr@@clvax1.cl.msu.edu
 *	AL	Ari Luotonen	luotonen@@dxcern.cern.ch
 *
 * HISTORY:
 *	Added as part of the WWW library and edited to conform
 *	with the WWW project coding standards by:	AL  5 Aug 1993
 *	Originally written by:				MR 12 Aug 1990
 *	Original header text:
 * -------------------------------------------------------------
 *  File containing routines to convert a buffer
 *  of bytes to/from RFC 1113 printable encoding format.
 *
 *  This technique is similar to the familiar Unix uuencode
 *  format in that it maps 6 binary bits to one ASCII
 *  character (or more aptly, 3 binary bytes to 4 ASCII
 *  characters).  However, RFC 1113 does not use the same
 *  mapping to printable characters as uuencode.
 *
 *  Mark Riordan   12 August 1990 and 17 Feb 1991.
 *  This code is hereby placed in the public domain.
 * -------------------------------------------------------------
 */

#include <HTUtils.h>
#include <HTUU.h>

#include <LYLeaks.h>

static char six2pr[64] =
{
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
};

static unsigned char pr2six[256];

/*--- function HTUU_encode -----------------------------------------------
 *
 * Encode a single line of binary data to a standard format that
 * uses only printing ASCII characters (but takes up 33% more bytes).
 *
 *    Entry    bufin    points to a buffer of bytes.  If nbytes is not
 *                      a multiple of three, then the byte just beyond
 *                      the last byte in the buffer must be 0.
 *             nbytes   is the number of bytes in that buffer.
 *                      This cannot be more than 48.
 *             bufcoded points to an output buffer.  Be sure that this
 *                      can hold at least 1 + (4*nbytes)/3 characters.
 *
 *    Exit     bufcoded contains the coded line.  The first 4*nbytes/3 bytes
 *                      contain printing ASCII characters representing
 *                      those binary bytes.  This may include one or
 *                      two '=' characters used as padding at the end.
 *                      The last byte is a zero byte.
 *             Returns the number of ASCII characters in "bufcoded".
 */
int HTUU_encode(unsigned char *bufin,
		size_t nbytes,
		char *bufcoded)
{
/* ENC is the basic 1 character encoding function to make a char printing */
#define ENC(c) six2pr[c]

    register char *outptr = bufcoded;
    size_t i;

    /* This doesn't seem to be needed (AL):   register unsigned char *inptr  = bufin; */

    for (i = 0; i < nbytes; i += 3) {
	*(outptr++) = ENC(*bufin >> 2);		/* c1 */
	*(outptr++) = ENC(((*bufin << 4) & 060) | ((bufin[1] >> 4) & 017));	/*c2 */
	*(outptr++) = ENC(((bufin[1] << 2) & 074) | ((bufin[2] >> 6) & 03));	/*c3 */
	*(outptr++) = ENC(bufin[2] & 077);	/* c4 */

	bufin += 3;
    }

    /* If nbytes was not a multiple of 3, then we have encoded too
     * many characters.  Adjust appropriately.
     */
    if (i == nbytes + 1) {
	/* There were only 2 bytes in that last group */
	outptr[-1] = '=';
    } else if (i == nbytes + 2) {
	/* There was only 1 byte in that last group */
	outptr[-1] = '=';
	outptr[-2] = '=';
    }
    *outptr = '\0';
    return (int) (outptr - bufcoded);
}

/*--- function HTUU_decode ------------------------------------------------
 *
 * Decode an ASCII-encoded buffer back to its original binary form.
 *
 *    Entry    bufcoded    points to a uuencoded string.  It is
 *                         terminated by any character not in
 *                         the printable character table six2pr, but
 *                         leading whitespace is stripped.
 *             bufplain    points to the output buffer; must be big
 *                         enough to hold the decoded string (generally
 *                         shorter than the encoded string) plus
 *                         as many as two extra bytes used during
 *                         the decoding process.
 *             outbufsize  is the maximum number of bytes that
 *                         can fit in bufplain.
 *
 *    Exit     Returns the number of binary bytes decoded.
 *             bufplain    contains these bytes.
 */
int HTUU_decode(char *bufcoded,
		unsigned char *bufplain,
		int outbufsize)
{
/* single character decode */
#define DEC(c) pr2six[(int)c]
#define MAXVAL 63

    static int first = 1;

    int nbytesdecoded, j;
    register char *bufin;
    register unsigned char *bufout = bufplain;
    register int nprbytes;

    /* If this is the first call, initialize the mapping table.
     * This code should work even on non-ASCII machines.
     */
    if (first) {
	first = 0;
	for (j = 0; j < 256; j++)
	    pr2six[j] = MAXVAL + 1;

	for (j = 0; j < 64; j++)
	    pr2six[UCH(six2pr[j])] = UCH(j);
#if 0
      /* *INDENT-OFF* */
      pr2six['A']= 0; pr2six['B']= 1; pr2six['C']= 2; pr2six['D']= 3;
      pr2six['E']= 4; pr2six['F']= 5; pr2six['G']= 6; pr2six['H']= 7;
      pr2six['I']= 8; pr2six['J']= 9; pr2six['K']=10; pr2six['L']=11;
      pr2six['M']=12; pr2six['N']=13; pr2six['O']=14; pr2six['P']=15;
      pr2six['Q']=16; pr2six['R']=17; pr2six['S']=18; pr2six['T']=19;
      pr2six['U']=20; pr2six['V']=21; pr2six['W']=22; pr2six['X']=23;
      pr2six['Y']=24; pr2six['Z']=25; pr2six['a']=26; pr2six['b']=27;
      pr2six['c']=28; pr2six['d']=29; pr2six['e']=30; pr2six['f']=31;
      pr2six['g']=32; pr2six['h']=33; pr2six['i']=34; pr2six['j']=35;
      pr2six['k']=36; pr2six['l']=37; pr2six['m']=38; pr2six['n']=39;
      pr2six['o']=40; pr2six['p']=41; pr2six['q']=42; pr2six['r']=43;
      pr2six['s']=44; pr2six['t']=45; pr2six['u']=46; pr2six['v']=47;
      pr2six['w']=48; pr2six['x']=49; pr2six['y']=50; pr2six['z']=51;
      pr2six['0']=52; pr2six['1']=53; pr2six['2']=54; pr2six['3']=55;
      pr2six['4']=56; pr2six['5']=57; pr2six['6']=58; pr2six['7']=59;
      pr2six['8']=60; pr2six['9']=61; pr2six['+']=62; pr2six['/']=63;
      /* *INDENT-ON* */

#endif
    }

    /* Strip leading whitespace. */

    while (*bufcoded == ' ' || *bufcoded == '\t')
	bufcoded++;

    /* Figure out how many characters are in the input buffer.
     * If this would decode into more bytes than would fit into
     * the output buffer, adjust the number of input bytes downwards.
     */
    bufin = bufcoded;
    while (pr2six[UCH(*(bufin++))] <= MAXVAL) ;
    nprbytes = (int) (bufin - bufcoded - 1);
    nbytesdecoded = ((nprbytes + 3) / 4) * 3;
    if (nbytesdecoded > outbufsize) {
	nprbytes = (outbufsize * 4) / 3;
    }

    bufin = bufcoded;

    while (nprbytes > 0) {
	*(bufout++) = UCH((DEC(bufin[0]) << 2) | (DEC(bufin[1]) >> 4));
	*(bufout++) = UCH((DEC(bufin[1]) << 4) | (DEC(bufin[2]) >> 2));
	*(bufout++) = UCH((DEC(bufin[2]) << 6) | (DEC(bufin[3])));
	bufin += 4;
	nprbytes -= 4;
    }

    if (nprbytes & 03) {
	if (pr2six[(int) bufin[-2]] > MAXVAL) {
	    nbytesdecoded -= 2;
	} else {
	    nbytesdecoded -= 1;
	}
    }

    return (nbytesdecoded);
}
@


1.5
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 4
a4 2

/* MODULE							HTUU.c
a32 4
 *
 * BUGS:
 *
 *
d72 1
a72 1
		unsigned int nbytes,
d79 1
a79 1
    unsigned int i;
d104 1
a104 1
    return (outptr - bufcoded);
d137 1
a137 1
    register char *bufin = bufcoded;
d185 1
a185 1
    nprbytes = bufin - bufcoded - 1;
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d3 33
a35 33
**			UUENCODE AND UUDECODE
**
** ACKNOWLEDGEMENT:
**	This code is taken from rpem distribution, and was originally
**	written by Mark Riordan.
**
** AUTHORS:
**	MR	Mark Riordan	riordanmr@@clvax1.cl.msu.edu
**	AL	Ari Luotonen	luotonen@@dxcern.cern.ch
**
** HISTORY:
**	Added as part of the WWW library and edited to conform
**	with the WWW project coding standards by:	AL  5 Aug 1993
**	Originally written by:				MR 12 Aug 1990
**	Original header text:
** -------------------------------------------------------------
**  File containing routines to convert a buffer
**  of bytes to/from RFC 1113 printable encoding format.
**
**  This technique is similar to the familiar Unix uuencode
**  format in that it maps 6 binary bits to one ASCII
**  character (or more aptly, 3 binary bytes to 4 ASCII
**  characters).  However, RFC 1113 does not use the same
**  mapping to printable characters as uuencode.
**
**  Mark Riordan   12 August 1990 and 17 Feb 1991.
**  This code is hereby placed in the public domain.
** -------------------------------------------------------------
**
** BUGS:
**
**
*/
d42 7
a48 6
PRIVATE char six2pr[64] = {
    'A','B','C','D','E','F','G','H','I','J','K','L','M',
    'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
    'a','b','c','d','e','f','g','h','i','j','k','l','m',
    'n','o','p','q','r','s','t','u','v','w','x','y','z',
    '0','1','2','3','4','5','6','7','8','9','+','/'
d51 1
a51 2
PRIVATE unsigned char pr2six[256];

d55 2
a56 2
 *   Encode a single line of binary data to a standard format that
 *   uses only printing ASCII characters (but takes up 33% more bytes).
d73 3
a75 3
PUBLIC int HTUU_encode ARGS3(unsigned char *,	bufin,
			     unsigned int,	nbytes,
			     char *,		bufcoded)
d80 27
a106 26
   register char *outptr = bufcoded;
   unsigned int i;
   /* This doesn't seem to be needed (AL):   register unsigned char *inptr  = bufin; */

   for (i=0; i<nbytes; i += 3) {
      *(outptr++) = ENC(*bufin >> 2);            /* c1 */
      *(outptr++) = ENC(((*bufin << 4) & 060) | ((bufin[1] >> 4) & 017)); /*c2*/
      *(outptr++) = ENC(((bufin[1] << 2) & 074) | ((bufin[2] >> 6) & 03));/*c3*/
      *(outptr++) = ENC(bufin[2] & 077);         /* c4 */

      bufin += 3;
   }

   /* If nbytes was not a multiple of 3, then we have encoded too
    * many characters.  Adjust appropriately.
    */
   if(i == nbytes+1) {
      /* There were only 2 bytes in that last group */
      outptr[-1] = '=';
   } else if(i == nbytes+2) {
      /* There was only 1 byte in that last group */
      outptr[-1] = '=';
      outptr[-2] = '=';
   }
   *outptr = '\0';
   return(outptr - bufcoded);
a108 1

d111 1
a111 1
 *  Decode an ASCII-encoded buffer back to its original binary form.
d128 3
a130 3
PUBLIC int HTUU_decode ARGS3(char *,		bufcoded,
			     unsigned char *,	bufplain,
			     int,		outbufsize)
d136 1
a136 1
   static int first = 1;
d138 12
a149 11
   int nbytesdecoded, j;
   register char *bufin = bufcoded;
   register unsigned char *bufout = bufplain;
   register int nprbytes;

   /* If this is the first call, initialize the mapping table.
    * This code should work even on non-ASCII machines.
    */
   if(first) {
      first = 0;
      for(j=0; j<256; j++) pr2six[j] = MAXVAL+1;
d151 2
a152 1
      for(j=0; j<64; j++) pr2six[UCH(six2pr[j])] = UCH(j);
d154 1
d171 2
d174 1
a174 1
   }
d176 1
a176 1
   /* Strip leading whitespace. */
d178 2
a179 1
   while(*bufcoded==' ' || *bufcoded == '\t') bufcoded++;
d181 29
a209 29
   /* Figure out how many characters are in the input buffer.
    * If this would decode into more bytes than would fit into
    * the output buffer, adjust the number of input bytes downwards.
    */
   bufin = bufcoded;
   while(pr2six[UCH(*(bufin++))] <= MAXVAL);
   nprbytes = bufin - bufcoded - 1;
   nbytesdecoded = ((nprbytes+3)/4) * 3;
   if(nbytesdecoded > outbufsize) {
      nprbytes = (outbufsize*4)/3;
   }

   bufin = bufcoded;

   while (nprbytes > 0) {
      *(bufout++) = UCH((DEC(bufin[0]) << 2) | (DEC(bufin[1]) >> 4));
      *(bufout++) = UCH((DEC(bufin[1]) << 4) | (DEC(bufin[2]) >> 2));
      *(bufout++) = UCH((DEC(bufin[2]) << 6) | (DEC(bufin[3])));
      bufin += 4;
      nprbytes -= 4;
   }

   if(nprbytes & 03) {
      if(pr2six[(int)bufin[-2]] > MAXVAL) {
	 nbytesdecoded -= 2;
      } else {
	 nbytesdecoded -= 1;
      }
   }
d211 1
a211 1
   return(nbytesdecoded);
a212 1

@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d150 1
a150 1
      for(j=0; j<64; j++) pr2six[(unsigned char)six2pr[j]] = (unsigned char)j;
d180 1
a180 1
   while(pr2six[(unsigned char)*(bufin++)] <= MAXVAL);
d190 3
a192 3
      *(bufout++) = (unsigned char) (DEC(*bufin) << 2 | DEC(bufin[1]) >> 4);
      *(bufout++) = (unsigned char) (DEC(bufin[1]) << 4 | DEC(bufin[2]) >> 2);
      *(bufout++) = (unsigned char) (DEC(bufin[2]) << 6 | DEC(bufin[3]));
d199 1
a199 1
         nbytesdecoded -= 2;
d201 1
a201 1
         nbytesdecoded -= 1;
@


1.1
log
@Initial revision
@
text
@d37 2
a38 2
#include "HTUtils.h"
#include "HTUU.h"
d40 1
a40 1
#include "LYLeaks.h"
d68 1
a68 1
 *                      those binary bytes. This may include one or
d113 1
a113 1
 *    Entry    bufcoded    points to a uuencoded string.  It is 
d152 15
a166 15
      pr2six['A']= 0; pr2six['B']= 1; pr2six['C']= 2; pr2six['D']= 3; 
      pr2six['E']= 4; pr2six['F']= 5; pr2six['G']= 6; pr2six['H']= 7; 
      pr2six['I']= 8; pr2six['J']= 9; pr2six['K']=10; pr2six['L']=11; 
      pr2six['M']=12; pr2six['N']=13; pr2six['O']=14; pr2six['P']=15; 
      pr2six['Q']=16; pr2six['R']=17; pr2six['S']=18; pr2six['T']=19; 
      pr2six['U']=20; pr2six['V']=21; pr2six['W']=22; pr2six['X']=23; 
      pr2six['Y']=24; pr2six['Z']=25; pr2six['a']=26; pr2six['b']=27; 
      pr2six['c']=28; pr2six['d']=29; pr2six['e']=30; pr2six['f']=31; 
      pr2six['g']=32; pr2six['h']=33; pr2six['i']=34; pr2six['j']=35; 
      pr2six['k']=36; pr2six['l']=37; pr2six['m']=38; pr2six['n']=39; 
      pr2six['o']=40; pr2six['p']=41; pr2six['q']=42; pr2six['r']=43; 
      pr2six['s']=44; pr2six['t']=45; pr2six['u']=46; pr2six['v']=47; 
      pr2six['w']=48; pr2six['x']=49; pr2six['y']=50; pr2six['z']=51; 
      pr2six['0']=52; pr2six['1']=53; pr2six['2']=54; pr2six['3']=55; 
      pr2six['4']=56; pr2six['5']=57; pr2six['6']=58; pr2six['7']=59; 
d188 1
a188 1
   
d196 1
a196 1
   
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
