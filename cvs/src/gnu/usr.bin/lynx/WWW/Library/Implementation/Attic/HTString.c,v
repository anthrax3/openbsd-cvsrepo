head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.20
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.8;
commitid	EcR8E7r0stjLUV4p;

1.8
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.7;
commitid	lGGuvDWEniklWrQe;

1.7
date	2011.07.22.14.10.38;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.22.04.52.36;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.42;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.48;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.46;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.46;	author maja;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HTString.c,v 1.72 2013/11/28 11:14:49 tom Exp $
 *
 *	Case-independent string comparison		HTString.c
 *
 *	Original version came with listserv implementation.
 *	Version TBL Oct 91 replaces one which modified the strings.
 *	02-Dec-91 (JFG) Added stralloccopy and stralloccat
 *	23 Jan 92 (TBL) Changed strallocc* to 8 char HTSAC* for VM and suchlike
 *	 6 Oct 92 (TBL) Moved WWW_TraceFlag in here to be in library
 *	15 Nov 98 (TD)  Added HTSprintf.
 */

#include <HTUtils.h>

#include <LYLeaks.h>
#include <LYUtils.h>
#include <LYStrings.h>

#ifdef USE_IGNORE_RC
int ignore_unused;
#endif

#ifndef NO_LYNX_TRACE
BOOLEAN WWW_TraceFlag = 0;	/* Global trace flag for ALL W3 code */
int WWW_TraceMask = 0;		/* Global trace flag for ALL W3 code */
#endif

#ifdef _WINDOWS
#undef VC
#define VC "2.14FM"
#endif

#ifndef VC
#define VC "2.14"
#endif /* !VC */

const char *HTLibraryVersion = VC;	/* String for help screen etc */

/*
 *     strcasecomp8 is a variant of strcasecomp (below)
 *     ------------		    -----------
 *     but uses 8bit upper/lower case information
 *     from the current display charset.
 *     It returns 0 if exact match.
 */
int strcasecomp8(const char *a,
		 const char *b)
{
    const char *p = a;
    const char *q = b;

    for (; *p && *q; p++, q++) {
	int diff = UPPER8(*p, *q);

	if (diff)
	    return diff;
    }
    if (*p)
	return 1;		/* p was longer than q */
    if (*q)
	return -1;		/* p was shorter than q */
    return 0;			/* Exact match */
}

/*
 *     strncasecomp8 is a variant of strncasecomp (below)
 *     -------------		     ------------
 *     but uses 8bit upper/lower case information
 *     from the current display charset.
 *     It returns 0 if exact match.
 */
int strncasecomp8(const char *a,
		  const char *b,
		  int n)
{
    const char *p = a;
    const char *q = b;

    for (;; p++, q++) {
	int diff;

	if (p == (a + n))
	    return 0;		/*   Match up to n characters */
	if (!(*p && *q))
	    return (*p - *q);
	diff = UPPER8(*p, *q);
	if (diff)
	    return diff;
    }
    /*NOTREACHED */
}

#ifndef VM			/* VM has these already it seems */
/*	Strings of any length
 *	---------------------
 */
int strcasecomp(const char *a,
		const char *b)
{
    const char *p = a;
    const char *q = b;

    for (; *p && *q; p++, q++) {
	int diff = TOLOWER(*p) - TOLOWER(*q);

	if (diff)
	    return diff;
    }
    if (*p)
	return 1;		/* p was longer than q */
    if (*q)
	return -1;		/* p was shorter than q */
    return 0;			/* Exact match */
}

/*	With count limit
 *	----------------
 */
int strncasecomp(const char *a,
		 const char *b,
		 int n)
{
    const char *p = a;
    const char *q = b;

    for (;; p++, q++) {
	int diff;

	if (p == (a + n))
	    return 0;		/*   Match up to n characters */
	if (!(*p && *q))
	    return (*p - *q);
	diff = TOLOWER(*p) - TOLOWER(*q);
	if (diff)
	    return diff;
    }
    /*NOTREACHED */
}
#endif /* VM */

#define end_component(p) (*(p) == '.' || *(p) == '\0')

#ifdef DEBUG_ASTERISK
#define SHOW_ASTERISK CTRACE
#else
#define SHOW_ASTERISK(p)	/* nothing */
#endif

#define SHOW_ASTERISK_NUM(a,b,c)  \
	SHOW_ASTERISK((tfp, "test @@%d, '%s' vs '%s' (%d)\n", __LINE__, a,b,c))

#define SHOW_ASTERISK_TXT(a,b,c)  \
	SHOW_ASTERISK((tfp, "test @@%d, '%s' vs '%s' %s\n", __LINE__, a,b,c))

/*
 * Compare names as described in RFC 2818: ignore case, allow wildcards. 
 * Return zero on a match, nonzero on mismatch -TD
 *
 * From RFC 2818:
 * Names may contain the wildcard character * which is considered to match any
 * single domain name component or component fragment.  E.g., *.a.com matches
 * foo.a.com but not bar.foo.a.com.  f*.com matches foo.com but not bar.com.
 */
int strcasecomp_asterisk(const char *a, const char *b)
{
    const char *p;
    int result = 0;
    int done = FALSE;

    while (!result && !done) {
	SHOW_ASTERISK_TXT(a, b, "main");
	if (*a == '*') {
	    p = b;
	    for (;;) {
		SHOW_ASTERISK_TXT(a, p, "loop");
		if (end_component(p)) {
		    if (end_component(a + 1)) {
			b = p - 1;
			result = 0;
		    } else {
			result = 1;
		    }
		    break;
		} else if (strcasecomp_asterisk(a + 1, p)) {
		    ++p;
		} else {
		    b = p - 1;
		    result = 0;	/* found a match starting at 'p' */
		    done = TRUE;
		    break;
		}
	    }
	    SHOW_ASTERISK_NUM(a, b, result);
	} else if (*b == '*') {
	    result = strcasecomp_asterisk(b, a);
	    SHOW_ASTERISK_NUM(a, b, result);
	    done = (result == 0);
	} else if (*a == '\0' || *b == '\0') {
	    result = (*a != *b);
	    SHOW_ASTERISK_NUM(a, b, result);
	    break;
	} else if (TOLOWER(UCH(*a)) != TOLOWER(UCH(*b))) {
	    result = 1;
	    SHOW_ASTERISK_NUM(a, b, result);
	    break;
	}
	++a;
	++b;
    }
    return result;
}

#ifdef DEBUG_ASTERISK
void mismatch_asterisk(void)
{
    /* *INDENT-OFF* */
    static struct {
	const char *a;
	const char *b;
	int	    code;
    } table[] = {
	{ "foo.bar",	 "*.*",	      0 },
	{ "foo.bar",	 "*.b*",      0 },
	{ "foo.bar",	 "*.ba*",     0 },
	{ "foo.bar",	 "*.bar*",    0 },
	{ "foo.bar",	 "*.*bar*",   0 },
	{ "foo.bar",	 "*.*.",      1 },
	{ "foo.bar",	 "fo*.b*",    0 },
	{ "*oo.bar",	 "fo*.b*",    0 },
	{ "*oo.bar.com", "fo*.b*",    1 },
	{ "*oo.bar.com", "fo*.b*m",   1 },
	{ "*oo.bar.com", "fo*.b*.c*", 0 },
    };
    /* *INDENT-ON* */

    unsigned n;
    int code;

    CTRACE((tfp, "mismatch_asterisk testing\n"));
    for (n = 0; n < TABLESIZE(table); ++n) {
	CTRACE((tfp, "-------%d\n", n));
	code = strcasecomp_asterisk(table[n].a, table[n].b);
	if (code != table[n].code) {
	    CTRACE((tfp, "mismatch_asterisk '%s' '%s' got %d, want %d\n",
		    table[n].a, table[n].b, code, table[n].code));
	}
    }
}
#endif

#ifdef NOT_ASCII

/*	Case-insensitive with ASCII collating sequence
 *	----------------
 */
int AS_casecomp(const char *p,
		const char *q)
{
    int diff;

    for (;; p++, q++) {
	if (!(*p && *q))
	    return (UCH(*p) - UCH(*q));
	diff = TOASCII(TOLOWER(*p))
	    - TOASCII(TOLOWER(*q));
	if (diff)
	    return diff;
    }
    /*NOTREACHED */
}

/*	With count limit and ASCII collating sequence
 *	----------------
 *	AS_cmp uses n == -1 to compare indefinite length.
 */
int AS_ncmp(const char *p,
	    const char *q,
	    unsigned int n)
{
    const char *a = p;
    int diff;

    for (; (unsigned) (p - a) < n; p++, q++) {
	if (!(*p && *q))
	    return (UCH(*p) - UCH(*q));
	diff = TOASCII(*p)
	    - TOASCII(*q);
	if (diff)
	    return diff;
    }
    return 0;			/*   Match up to n characters */
}
#endif /* NOT_ASCII */

/*	Allocate a new copy of a string, and returns it
*/
char *HTSACopy(char **dest,
	       const char *src)
{
    if (src != 0) {
	if (src != *dest) {
	    size_t size = strlen(src) + 1;

	    FREE(*dest);
	    *dest = (char *) malloc(size);
	    if (*dest == NULL)
		outofmem(__FILE__, "HTSACopy");
	    assert(*dest != NULL);
	    MemCpy(*dest, src, size);
	}
    } else {
	FREE(*dest);
    }
    return *dest;
}

/*	String Allocate and Concatenate
*/
char *HTSACat(char **dest,
	      const char *src)
{
    if (src && *src && (src != *dest)) {
	if (*dest) {
	    size_t length = strlen(*dest);

	    *dest = (char *) realloc(*dest, length + strlen(src) + 1);
	    if (*dest == NULL)
		outofmem(__FILE__, "HTSACat");
	    assert(*dest != NULL);
	    strcpy(*dest + length, src);
	} else {
	    *dest = (char *) malloc(strlen(src) + 1);
	    if (*dest == NULL)
		outofmem(__FILE__, "HTSACat");
	    assert(*dest != NULL);
	    strcpy(*dest, src);
	}
    }
    return *dest;
}

/* optimized for heavily realloc'd strings, store length inside */

#define EXTRA_TYPE size_t	/* type we use for length */
#define EXTRA_SIZE sizeof(void *)	/* alignment >= sizeof(EXTRA_TYPE) */

void HTSAFree_extra(char *s)
{
    free(s - EXTRA_SIZE);
}

/* never shrink */
char *HTSACopy_extra(char **dest,
		     const char *src)
{
    if (src != 0) {
	size_t srcsize = strlen(src) + 1;
	EXTRA_TYPE size = 0;

	if (*dest != 0) {
	    size = *(EXTRA_TYPE *) (void *) ((*dest) - EXTRA_SIZE);
	}
	if ((*dest == 0) || (size < srcsize)) {
	    FREE_extra(*dest);
	    size = srcsize * 2;	/* x2 step */
	    *dest = (char *) malloc(size + EXTRA_SIZE);
	    if (*dest == NULL)
		outofmem(__FILE__, "HTSACopy_extra");
	    assert(*dest != NULL);
	    *(EXTRA_TYPE *) (void *) (*dest) = size;
	    *dest += EXTRA_SIZE;
	}
	MemCpy(*dest, src, srcsize);
    } else {
	Clear_extra(*dest);
    }
    return *dest;
}

/*	Find next Field
 *	---------------
 *
 * On entry,
 *	*pstr	points to a string containig white space separated
 *		field, optionlly quoted.
 *
 * On exit,
 *	*pstr	has been moved to the first delimiter past the
 *		field
 *		THE STRING HAS BEEN MUTILATED by a 0 terminator
 *
 *	returns a pointer to the first field
 */
char *HTNextField(char **pstr)
{
    char *p = *pstr;
    char *start = NULL;		/* start of field */

    if (p != NULL) {
	while (*p && WHITE(*p))
	    p++;		/* Strip white space */
	if (!*p) {
	    *pstr = p;
	} else {
	    if (*p == '"') {	/* quoted field */
		p++;
		start = p;
		for (; *p && *p != '"'; p++) {
		    if (*p == '\\' && p[1])
			p++;	/* Skip escaped chars */
		}
	    } else {
		start = p;
		while (*p && !WHITE(*p))
		    p++;	/* Skip first field */
	    }
	    if (*p)
		*p++ = '\0';
	    *pstr = p;
	}
    }
    return start;
}

/*	Find next Token
 *	---------------
 *	Finds the next token in a string
 *	On entry,
 *	*pstr	points to a string to be parsed.
 *	delims	lists characters to be recognized as delimiters.
 *		If NULL, default is white space "," ";" or "=".
 *		The word can optionally be quoted or enclosed with
 *		chars from bracks.
 *		Comments surrrounded by '(' ')' are filtered out
 *		unless they are specifically reqested by including
 *		' ' or '(' in delims or bracks.
 *	bracks	lists bracketing chars.  Some are recognized as
 *		special, for those give the opening char.
 *		If NULL, defaults to <"> and "<" ">".
 *	found	points to location to fill with the ending delimiter
 *		found, or is NULL.
 *
 *	On exit,
 *	*pstr	has been moved to the first delimiter past the
 *		field
 *		THE STRING HAS BEEN MUTILATED by a 0 terminator
 *	found	points to the delimiter found unless it was NULL.
 *	Returns a pointer to the first word or NULL on error
 */
char *HTNextTok(char **pstr,
		const char *delims,
		const char *bracks,
		char *found)
{
    char *p = *pstr;
    char *start = NULL;
    BOOL get_blanks, skip_comments;
    BOOL get_comments;
    BOOL get_closing_char_too = FALSE;
    char closer;

    if (isEmpty(pstr))
	return NULL;
    if (!delims)
	delims = " ;,=";
    if (!bracks)
	bracks = "<\"";

    get_blanks = (BOOL) (!StrChr(delims, ' ') && !StrChr(bracks, ' '));
    get_comments = (BOOL) (StrChr(bracks, '(') != NULL);
    skip_comments = (BOOL) (!get_comments && !StrChr(delims, '(') && !get_blanks);
#define skipWHITE(c) (!get_blanks && WHITE(c))

    while (*p && skipWHITE(*p))
	p++;			/* Strip white space */
    if (!*p) {
	*pstr = p;
	if (found)
	    *found = '\0';
	return NULL;		/* No first field */
    }
    while (1) {
	/* Strip white space and other delimiters */
	while (*p && (skipWHITE(*p) || StrChr(delims, *p)))
	    p++;
	if (!*p) {
	    *pstr = p;
	    if (found)
		*found = *(p - 1);
	    return NULL;	/* No field */
	}

	if (*p == '(' && (skip_comments || get_comments)) {	/* Comment */
	    int comment_level = 0;

	    if (get_comments && !start)
		start = p + 1;
	    for (; *p && (*p != ')' || --comment_level > 0); p++) {
		if (*p == '(')
		    comment_level++;
		else if (*p == '"') {	/* quoted field within Comment */
		    for (p++; *p && *p != '"'; p++)
			if (*p == '\\' && *(p + 1))
			    p++;	/* Skip escaped chars */
		    if (!*p)
			break;	/* (invalid) end of string found, leave */
		}
		if (*p == '\\' && *(p + 1))
		    p++;	/* Skip escaped chars */
	    }
	    if (get_comments)
		break;
	    if (*p)
		p++;
	    if (get_closing_char_too) {
		if (!*p || (!StrChr(bracks, *p) && StrChr(delims, *p))) {
		    break;
		} else
		    get_closing_char_too = (BOOL) (StrChr(bracks, *p) != NULL);
	    }
	} else if (StrChr(bracks, *p)) {	/* quoted or bracketed field */
	    switch (*p) {
	    case '<':
		closer = '>';
		break;
	    case '[':
		closer = ']';
		break;
	    case '{':
		closer = '}';
		break;
	    case ':':
		closer = ';';
		break;
	    default:
		closer = *p;
	    }
	    if (!start)
		start = ++p;
	    for (; *p && *p != closer; p++)
		if (*p == '\\' && *(p + 1))
		    p++;	/* Skip escaped chars */
	    if (get_closing_char_too) {
		p++;
		if (!*p || (!StrChr(bracks, *p) && StrChr(delims, *p))) {
		    break;
		} else
		    get_closing_char_too = (BOOL) (StrChr(bracks, *p) != NULL);
	    } else
		break;		/* kr95-10-9: needs to stop here */
	} else {		/* Spool field */
	    if (!start)
		start = p;
	    while (*p && !skipWHITE(*p) && !StrChr(bracks, *p) &&
		   !StrChr(delims, *p))
		p++;
	    if (*p && StrChr(bracks, *p)) {
		get_closing_char_too = TRUE;
	    } else {
		if (*p == '(' && skip_comments) {
		    *pstr = p;
		    HTNextTok(pstr, NULL, "(", found);	/*      Advance pstr */
		    *p = '\0';
		    if (*pstr && **pstr)
			(*pstr)++;
		    return start;
		}
		break;		/* Got it */
	    }
	}
    }
    if (found)
	*found = *p;

    if (*p)
	*p++ = '\0';
    *pstr = p;
    return start;
}

static char *HTAlloc(char *ptr, size_t length)
{
    if (ptr != 0)
	ptr = (char *) realloc(ptr, length);
    else
	ptr = (char *) malloc(length);
    if (ptr == 0)
	outofmem(__FILE__, "HTAlloc");
    assert(ptr != NULL);
    return ptr;
}

/*
 * If SAVE_TIME_NOT_SPACE is defined, StrAllocVsprintf will hang on to
 * its temporary string buffers instead of allocating and freeing them
 * in each invocation.  They only grow and never shrink, and won't be
 * cleaned up on exit. - kw
 */
#if defined(_REENTRANT) || defined(_THREAD_SAFE) || defined(LY_FIND_LEAKS)
#undef SAVE_TIME_NOT_SPACE
#endif

/*
 * Replacement for sprintf, allocates buffer on the fly according to what's
 * needed for its arguments.  Unlike sprintf, this always concatenates to the
 * destination buffer, so we do not have to provide both flavors.
 */
typedef enum {
    Flags,
    Width,
    Prec,
    Type,
    Format
} PRINTF;

#define VA_INTGR(type) ival = (int)    va_arg((*ap), type)
#define VA_FLOAT(type) fval = (double) va_arg((*ap), type)
#define VA_POINT(type) pval = (char *) va_arg((*ap), type)

#define NUM_WIDTH 10		/* allow for width substituted for "*" in "%*s" */
		/* also number of chars assumed to be needed in addition
		   to a given precision in floating point formats */

#define GROW_EXPR(n) (((n) * 3) / 2)
#define GROW_SIZE 256

PUBLIC_IF_FIND_LEAKS char *StrAllocVsprintf(char **pstr,
					    size_t dst_len,
					    const char *fmt,
					    va_list * ap)
{
#ifdef HAVE_VASPRINTF
    /*
     * Use vasprintf() if we have it, since it is simplest.
     */
    char *result = 0;
    char *temp = 0;

    /* discard old destination if no length was given */
    if (pstr && !dst_len) {
	if (*pstr)
	    FREE(*pstr);
    }

    if (vasprintf(&temp, fmt, *ap) >= 0) {
	if (dst_len != 0) {
	    size_t src_len = strlen(temp);
	    size_t new_len = dst_len + src_len + 1;

	    result = HTAlloc(pstr ? *pstr : 0, new_len);
	    if (result != 0) {
		strcpy(result + dst_len, temp);
	    }
	    (free) (temp);
	} else {
	    result = temp;
	    mark_malloced(temp, strlen(temp));
	}
    }

    if (pstr != 0)
	*pstr = result;

    return result;
#else /* !HAVE_VASPRINTF */
    /*
     * If vasprintf() is not available, this works - but does not implement
     * the POSIX '$' formatting character which may be used in some of the
     * ".po" files.
     */
#ifdef SAVE_TIME_NOT_SPACE
    static size_t tmp_len = 0;
    static size_t fmt_len = 0;
    static char *tmp_ptr = NULL;
    static char *fmt_ptr = NULL;

#else
    size_t tmp_len = GROW_SIZE;
    char *tmp_ptr = 0;
    char *fmt_ptr;
#endif /* SAVE_TIME_NOT_SPACE */
    size_t have, need;
    char *dst_ptr = *pstr;
    const char *format = fmt;

    if (isEmpty(fmt))
	return 0;

    need = strlen(fmt) + 1;
#ifdef SAVE_TIME_NOT_SPACE
    if (!fmt_ptr || fmt_len < need * NUM_WIDTH) {
	fmt_ptr = HTAlloc(fmt_ptr, fmt_len = need * NUM_WIDTH);
    }
    if (!tmp_ptr || tmp_len < GROW_SIZE) {
	tmp_ptr = HTAlloc(tmp_ptr, tmp_len = GROW_SIZE);
    }
#else
    if ((fmt_ptr = malloc(need * NUM_WIDTH)) == 0
	|| (tmp_ptr = malloc(tmp_len)) == 0) {
	outofmem(__FILE__, "StrAllocVsprintf");
	assert(fmt_ptr != NULL);
	assert(tmp_ptr != NULL);
    }
#endif /* SAVE_TIME_NOT_SPACE */

    if (dst_ptr == 0) {
	dst_ptr = HTAlloc(dst_ptr, have = GROW_SIZE + need);
    } else {
	have = strlen(dst_ptr) + 1;
	need += dst_len;
	if (have < need)
	    dst_ptr = HTAlloc(dst_ptr, have = GROW_SIZE + need);
    }

    while (*fmt != '\0') {
	if (*fmt == '%') {
	    static char dummy[] = "";
	    PRINTF state = Flags;
	    char *pval = dummy;	/* avoid const-cast */
	    double fval = 0.0;
	    int done = FALSE;
	    int ival = 0;
	    int prec = -1;
	    int type = 0;
	    int used = 0;
	    int width = -1;
	    size_t f = 0;

	    fmt_ptr[f++] = *fmt;
	    while (*++fmt != '\0' && !done) {
		fmt_ptr[f++] = *fmt;

		if (isdigit(UCH(*fmt))) {
		    int num = *fmt - '0';

		    if (state == Flags && num != 0)
			state = Width;
		    if (state == Width) {
			if (width < 0)
			    width = 0;
			width = (width * 10) + num;
		    } else if (state == Prec) {
			if (prec < 0)
			    prec = 0;
			prec = (prec * 10) + num;
		    }
		} else if (*fmt == '*') {
		    VA_INTGR(int);

		    if (state == Flags)
			state = Width;
		    if (state == Width) {
			width = ival;
		    } else if (state == Prec) {
			prec = ival;
		    }
		    sprintf(&fmt_ptr[--f], "%d", ival);
		    f = strlen(fmt_ptr);
		} else if (isalpha(UCH(*fmt))) {
		    done = TRUE;
		    switch (*fmt) {
		    case 'Z':	/* FALLTHRU */
		    case 'h':	/* FALLTHRU */
		    case 'l':	/* FALLTHRU */
		    case 'L':	/* FALLTHRU */
			done = FALSE;
			type = *fmt;
			break;
		    case 'o':	/* FALLTHRU */
		    case 'i':	/* FALLTHRU */
		    case 'd':	/* FALLTHRU */
		    case 'u':	/* FALLTHRU */
		    case 'x':	/* FALLTHRU */
		    case 'X':	/* FALLTHRU */
			if (type == 'l')
			    VA_INTGR(long);

			else if (type == 'Z')
			    VA_INTGR(size_t);

			else
			    VA_INTGR(int);

			used = 'i';
			break;
		    case 'f':	/* FALLTHRU */
		    case 'e':	/* FALLTHRU */
		    case 'E':	/* FALLTHRU */
		    case 'g':	/* FALLTHRU */
		    case 'G':	/* FALLTHRU */
			VA_FLOAT(double);

			used = 'f';
			break;
		    case 'c':
			VA_INTGR(int);

			used = 'c';
			break;
		    case 's':
			VA_POINT(char *);

			if (prec < 0)
			    prec = strlen(pval);
			used = 's';
			break;
		    case 'p':
			VA_POINT(void *);

			used = 'p';
			break;
		    case 'n':
			VA_POINT(int *);

			used = 0;
			break;
		    default:
			CTRACE((tfp, "unknown format character '%c' in %s\n",
				*fmt, format));
			break;
		    }
		} else if (*fmt == '.') {
		    state = Prec;
		} else if (*fmt == '%') {
		    done = TRUE;
		    used = '%';
		}
	    }
	    fmt_ptr[f] = '\0';

	    if (prec > 0) {
		switch (used) {
		case 'f':
		    if (width < prec + NUM_WIDTH)
			width = prec + NUM_WIDTH;
		    /* FALLTHRU */
		case 'i':
		    /* FALLTHRU */
		case 'p':
		    if (width < prec + 2)
			width = prec + 2;	/* leading sign/space/zero, "0x" */
		    break;
		case 'c':
		    break;
		case '%':
		    break;
		default:
		    if (width < prec)
			width = prec;
		    break;
		}
	    }
	    if (width >= (int) tmp_len) {
		tmp_len = GROW_EXPR(tmp_len + width);
		tmp_ptr = HTAlloc(tmp_ptr, tmp_len);
	    }

	    switch (used) {
	    case 'i':
	    case 'c':
		sprintf(tmp_ptr, fmt_ptr, ival);
		break;
	    case 'f':
		sprintf(tmp_ptr, fmt_ptr, fval);
		break;
	    default:
		sprintf(tmp_ptr, fmt_ptr, pval);
		break;
	    }
	    need = dst_len + strlen(tmp_ptr) + 1;
	    if (need >= have) {
		dst_ptr = HTAlloc(dst_ptr, have = GROW_EXPR(need));
	    }
	    strcpy(dst_ptr + dst_len, tmp_ptr);
	    dst_len += strlen(tmp_ptr);
	} else {
	    if ((dst_len + 2) >= have) {
		dst_ptr = HTAlloc(dst_ptr, (have += GROW_SIZE));
	    }
	    dst_ptr[dst_len++] = *fmt++;
	}
    }

#ifndef SAVE_TIME_NOT_SPACE
    FREE(tmp_ptr);
    FREE(fmt_ptr);
#endif
    dst_ptr[dst_len] = '\0';
    if (pstr)
	*pstr = dst_ptr;
    return (dst_ptr);
#endif /* HAVE_VASPRINTF */
}
#undef SAVE_TIME_NOT_SPACE

/*
 * Replacement for sprintf, allocates buffer on the fly according to what's
 * needed for its arguments.  Unlike sprintf, this always concatenates to the
 * destination buffer.
 */
/* Note: if making changes, also check the memory tracking version
 * LYLeakHTSprintf in LYLeaks.c. - kw */
#ifdef HTSprintf		/* if hidden by LYLeaks stuff */
#undef HTSprintf
#endif
char *HTSprintf(char **pstr, const char *fmt,...)
{
    char *result = 0;
    size_t inuse = 0;
    va_list ap;

    LYva_start(ap, fmt);
    {
	if (pstr != 0 && *pstr != 0)
	    inuse = strlen(*pstr);
	result = StrAllocVsprintf(pstr, inuse, fmt, &ap);
    }
    va_end(ap);

    return (result);
}

/*
 * Replacement for sprintf, allocates buffer on the fly according to what's
 * needed for its arguments.  Like sprintf, this always resets the destination
 * buffer.
 */
/* Note: if making changes, also check the memory tracking version
 * LYLeakHTSprintf0 in LYLeaks.c. - kw */
#ifdef HTSprintf0		/* if hidden by LYLeaks stuff */
#undef HTSprintf0
#endif
char *HTSprintf0(char **pstr, const char *fmt,...)
{
    char *result = 0;
    va_list ap;

    LYva_start(ap, fmt);
    {
	result = StrAllocVsprintf(pstr, (size_t) 0, fmt, &ap);
    }
    va_end(ap);

    return (result);
}

/*
 * Returns a quoted or escaped form of the given parameter, suitable for use in
 * a command string.
 */
#if USE_QUOTED_PARAMETER
#define S_QUOTE '\''
#define D_QUOTE '"'
char *HTQuoteParameter(const char *parameter)
{
    size_t i;
    size_t last;
    size_t n = 0;
    size_t quoted = 0;
    char *result;

    if (parameter == 0)
	parameter = "";

    last = strlen(parameter);
    for (i = 0; i < last; ++i)
	if (StrChr("\\&#$^*?(){}<>\"';`|", parameter[i]) != 0
	    || isspace(UCH(parameter[i])))
	    ++quoted;

    result = (char *) malloc(last + 5 * quoted + 3);
    if (result == NULL)
	outofmem(__FILE__, "HTQuoteParameter");

    assert(result != NULL);

    n = 0;
#if (USE_QUOTED_PARAMETER == 1)
    /*
     * Only double-quotes are used in Win32/DOS -TD
     */
    if (quoted)
	result[n++] = D_QUOTE;
    for (i = 0; i < last; i++) {
	result[n++] = parameter[i];
    }
    if (quoted)
	result[n++] = D_QUOTE;
#else
    if (quoted)
	result[n++] = S_QUOTE;
    for (i = 0; i < last; i++) {
	if (parameter[i] == S_QUOTE) {
	    result[n++] = S_QUOTE;
	    result[n++] = D_QUOTE;
	    result[n++] = parameter[i];
	    result[n++] = D_QUOTE;
	    result[n++] = S_QUOTE;
	} else {
	    /* Note:  No special handling of other characters, including
	       backslash, since we are constructing a single-quoted string!
	       Backslash has no special escape meaning within those for sh
	       and compatible shells, so trying to escape a backslash by
	       doubling it is unnecessary and would be interpreted by the
	       shell as an additional data character. - kw 2000-05-02
	     */
	    result[n++] = parameter[i];
	}
    }
    if (quoted)
	result[n++] = S_QUOTE;
#endif
    result[n] = '\0';
    return result;
}
#endif

#define HTIsParam(string) ((string[0] == '%' && string[1] == 's'))

/*
 * Returns the number of "%s" tokens in a system command-template.
 */
int HTCountCommandArgs(const char *command)
{
    int number = 0;

    while (command[0] != 0) {
	if (HTIsParam(command))
	    number++;
	command++;
    }
    return number;
}

/*
 * Returns a pointer into the given string after the given parameter number
 */
static const char *HTAfterCommandArg(const char *command,
				     int number)
{
    while (number > 0) {
	if (command[0] != 0) {
	    if (HTIsParam(command)) {
		number--;
		command++;
	    }
	    command++;
	} else {
	    break;
	}
    }
    return command;
}

/*
 * Like HTAddParam, but the parameter may be an environment variable, which we
 * will expand and append.  Do this only for things like the command-verb,
 * where we obtain the parameter from the user's configuration.  Any quoting
 * required for the environment variable has to be done within its value, e.g.,
 *
 *	setenv EDITOR 'xvile -name "No such class"'
 *
 * This is useful only when we quote parameters, of course.
 */
#if USE_QUOTED_PARAMETER
void HTAddXpand(char **result,
		const char *command,
		int number,
		const char *parameter)
{
    if (number > 0) {
	const char *last = HTAfterCommandArg(command, number - 1);
	const char *next = last;

	if (number <= 1) {
	    FREE(*result);
	}

	while (next[0] != 0) {
	    if (HTIsParam(next)) {
		if (next != last) {
		    size_t len = ((size_t) (next - last)
				  + ((*result != 0)
				     ? strlen(*result)
				     : 0));

		    HTSACat(result, last);
		    (*result)[len] = 0;
		}
		HTSACat(result, parameter);
		CTRACE((tfp, "PARAM-EXP:%s\n", *result));
		return;
	    }
	    next++;
	}
    }
}
#endif /* USE_QUOTED_PARAMETER */

/*
 * Append string to a system command that we are constructing, without quoting. 
 * We're given the index of the newest parameter we're processing.  Zero
 * indicates none, so a value of '1' indicates that we copy from the beginning
 * of the command string up to the first parameter, substitute the quoted
 * parameter and return the result.
 *
 * Parameters are substituted at "%s" tokens, like printf.  Other printf-style
 * tokens are not substituted; they are passed through without change.
 */
void HTAddToCmd(char **result,
		const char *command,
		int number,
		const char *string)
{
    if (number > 0) {
	const char *last = HTAfterCommandArg(command, number - 1);
	const char *next = last;

	if (number <= 1) {
	    FREE(*result);
	}
	if (string == 0)
	    string = "";
	while (next[0] != 0) {
	    if (HTIsParam(next)) {
		if (next != last) {
		    size_t len = ((size_t) (next - last)
				  + ((*result != 0)
				     ? strlen(*result)
				     : 0));

		    HTSACat(result, last);
		    (*result)[len] = 0;
		}
		HTSACat(result, string);
		CTRACE((tfp, "PARAM-ADD:%s\n", *result));
		return;
	    }
	    next++;
	}
    }
}

/*
 * Append string-parameter to a system command that we are constructing.  The
 * string is a complete parameter (which is a necessary assumption so we can
 * quote it properly).
 */
void HTAddParam(char **result,
		const char *command,
		int number,
		const char *parameter)
{
    if (number > 0) {
#if USE_QUOTED_PARAMETER
	char *quoted = HTQuoteParameter(parameter);

	HTAddToCmd(result, command, number, quoted);
	FREE(quoted);
#else
	HTAddToCmd(result, command, number, parameter);
#endif
    }
}

/*
 * Append the remaining command-string to a system command (compare with
 * HTAddParam).  Any remaining "%s" tokens are copied as empty strings.
 */
void HTEndParam(char **result,
		const char *command,
		int number)
{
    const char *last;
    int count;

    count = HTCountCommandArgs(command);
    if (count < number)
	number = count;
    last = HTAfterCommandArg(command, number);
    if (last[0] != 0) {
	HTSACat(result, last);
    }
    CTRACE((tfp, "PARAM-END:%s\n", *result));
}

/* Binary-strings (may have embedded nulls).  Some modules (HTGopher) assume
 * there is a null on the end, anyway.
 */

/* (Re)allocate a bstring, e.g., to increase its buffer size for ad hoc
 * operations.
 */
void HTSABAlloc(bstring **dest, int len)
{
    if (*dest == 0) {
	*dest = typecalloc(bstring);

	if (*dest == 0)
	    outofmem(__FILE__, "HTSABAlloc");
    }

    if ((*dest)->len != len) {
	(*dest)->str = typeRealloc(char, (*dest)->str, len);

	if ((*dest)->str == 0)
	    outofmem(__FILE__, "HTSABAlloc");

	(*dest)->len = len;
    }
}

/* Allocate a new bstring, and return it.
*/
void HTSABCopy(bstring **dest, const char *src,
	       int len)
{
    bstring *t;
    unsigned need = (unsigned) (len + 1);

    CTRACE2(TRACE_BSTRING,
	    (tfp, "HTSABCopy(%p, %p, %d)\n",
	     (void *) dest, (const void *) src, len));
    HTSABFree(dest);
    if (src) {
	if (TRACE_BSTRING) {
	    CTRACE((tfp, "===    %4d:", len));
	    trace_bstring2(src, len);
	    CTRACE((tfp, "\n"));
	}
	if ((t = (bstring *) malloc(sizeof(bstring))) == NULL)
	      outofmem(__FILE__, "HTSABCopy");

	assert(t != NULL);

	if ((t->str = typeMallocn(char, need)) == NULL)
	      outofmem(__FILE__, "HTSABCopy");

	assert(t->str != NULL);

	MemCpy(t->str, src, len);
	t->len = len;
	t->str[t->len] = '\0';
	*dest = t;
    }
    if (TRACE_BSTRING) {
	CTRACE((tfp, "=>     %4d:", BStrLen(*dest)));
	trace_bstring(*dest);
	CTRACE((tfp, "\n"));
    }
}

/*
 * Initialize with a null-terminated string (discards the null).
 */
void HTSABCopy0(bstring **dest, const char *src)
{
    HTSABCopy(dest, src, (int) strlen(src));
}

/*
 * Append a block of memory to a bstring.
 */
void HTSABCat(bstring **dest, const char *src,
	      int len)
{
    bstring *t = *dest;

    CTRACE2(TRACE_BSTRING,
	    (tfp, "HTSABCat(%p, %p, %d)\n",
	     (void *) dest, (const void *) src, len));
    if (src) {
	unsigned need = (unsigned) (len + 1);

	if (TRACE_BSTRING) {
	    CTRACE((tfp, "===    %4d:", len));
	    trace_bstring2(src, len);
	    CTRACE((tfp, "\n"));
	}
	if (t) {
	    unsigned length = (unsigned) t->len + need;

	    t->str = typeRealloc(char, t->str, length);
	} else {
	    if ((t = typecalloc(bstring)) == NULL)
		  outofmem(__FILE__, "HTSACat");

	    assert(t != NULL);

	    t->str = typeMallocn(char, need);
	}
	if (t->str == NULL)
	    outofmem(__FILE__, "HTSACat");

	assert(t->str != NULL);

	MemCpy(t->str + t->len, src, len);
	t->len += len;
	t->str[t->len] = '\0';
	*dest = t;
    }
    if (TRACE_BSTRING) {
	CTRACE((tfp, "=>     %4d:", BStrLen(*dest)));
	trace_bstring(*dest);
	CTRACE((tfp, "\n"));
    }
}

/*
 * Append a null-terminated string (discards the null).
 */
void HTSABCat0(bstring **dest, const char *src)
{
    HTSABCat(dest, src, (int) strlen(src));
}

/*
 * Compare two bstring's for equality
 */
BOOL HTSABEql(bstring *a, bstring *b)
{
    unsigned len_a = (unsigned) ((a != 0) ? a->len : 0);
    unsigned len_b = (unsigned) ((b != 0) ? b->len : 0);

    if (len_a == len_b) {
	if (len_a == 0
	    || MemCmp(a->str, b->str, a->len) == 0)
	    return TRUE;
    }
    return FALSE;
}

/*
 * Deallocate a bstring.
 */
void HTSABFree(bstring **ptr)
{
    if (*ptr != NULL) {
	FREE((*ptr)->str);
	FREE(*ptr);
	*ptr = NULL;
    }
}

/*
 * Use this function to perform formatted sprintf's onto the end of a bstring.
 * The bstring may contain embedded nulls; the formatted portions must not.
 */
bstring *HTBprintf(bstring **pstr, const char *fmt,...)
{
    bstring *result = 0;
    char *temp = 0;
    va_list ap;

    LYva_start(ap, fmt);
    {
	temp = StrAllocVsprintf(&temp, (size_t) 0, fmt, &ap);
	if (non_empty(temp)) {
	    HTSABCat(pstr, temp, (int) strlen(temp));
	}
	FREE(temp);
	result = *pstr;
    }
    va_end(ap);

    return (result);
}

/*
 * Write binary-data to the logfile, making it safe for most editors to view.
 * That is most, since we do not restrict line-length.  Nulls and other
 * non-printing characters are addressed.
 */
void trace_bstring2(const char *text,
		    int size)
{
    int n;

    if (text != 0) {
	for (n = 0; n < size; ++n) {
	    int ch = UCH(text[n]);

	    switch (ch) {
	    case '\\':
		fputs("\\\\", tfp);
		break;
	    case '\r':
		fputs("\\r", tfp);
		break;
	    case '\t':
		fputs("\\t", tfp);
		break;
	    case '\f':
		fputs("\\f", tfp);
		break;
	    default:
		if (isprint(ch) || isspace(ch)) {
		    fputc(ch, tfp);
		} else {
		    fprintf(tfp, "\\%03o", ch);
		}
		break;
	    }
	}
    }
}

void trace_bstring(bstring *data)
{
    trace_bstring2(BStrData(data), BStrLen(data));
}
@


1.8
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.7
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: HTString.c,v 1.57 2009/03/17 22:27:59 tom Exp $
d20 4
a186 1
		    result = 1;	/* could not match */
d309 2
a310 1
	    memcpy(*dest, src, size);
d330 1
d336 1
d362 1
a362 1
	    size = *(EXTRA_TYPE *) ((*dest) - EXTRA_SIZE);
d364 1
a364 1
	if (size < srcsize) {
d370 2
a371 1
	    *(EXTRA_TYPE *) (*dest) = size;
d374 1
a374 1
	memcpy(*dest, src, srcsize);
d398 1
a398 1
    char *start;		/* start of field */
d400 21
a420 12
    while (*p && WHITE(*p))
	p++;			/* Strip white space */
    if (!*p) {
	*pstr = p;
	return NULL;		/* No first field */
    }
    if (*p == '"') {		/* quoted field */
	p++;
	start = p;
	for (; *p && *p != '"'; p++) {
	    if (*p == '\\' && p[1])
		p++;		/* Skip escaped chars */
a421 4
    } else {
	start = p;
	while (*p && !WHITE(*p))
	    p++;		/* Skip first field */
a422 3
    if (*p)
	*p++ = '\0';
    *pstr = p;
d470 3
a472 3
    get_blanks = (BOOL) (!strchr(delims, ' ') && !strchr(bracks, ' '));
    get_comments = (BOOL) (strchr(bracks, '(') != NULL);
    skip_comments = (BOOL) (!get_comments && !strchr(delims, '(') && !get_blanks);
d485 1
a485 1
	while (*p && (skipWHITE(*p) || strchr(delims, *p)))
d517 1
a517 1
		if (!*p || (!strchr(bracks, *p) && strchr(delims, *p))) {
d520 1
a520 1
		    get_closing_char_too = (BOOL) (strchr(bracks, *p) != NULL);
d522 1
a522 1
	} else if (strchr(bracks, *p)) {	/* quoted or bracketed field */
d546 1
a546 1
		if (!*p || (!strchr(bracks, *p) && strchr(delims, *p))) {
d549 1
a549 1
		    get_closing_char_too = (BOOL) (strchr(bracks, *p) != NULL);
d555 2
a556 2
	    while (*p && !skipWHITE(*p) && !strchr(bracks, *p) &&
		   !strchr(delims, *p))
d558 1
a558 1
	    if (*p && strchr(bracks, *p)) {
d590 1
d648 2
a649 2
	    int src_len = strlen(temp);
	    int new_len = dst_len + src_len + 1;
a653 1
		mark_malloced(temp, new_len);
d655 1
a655 1
	    free(temp);
d702 2
d781 1
d941 1
a941 1
	result = StrAllocVsprintf(pstr, 0, fmt, &ap);
d968 1
a968 1
	if (strchr("\\&#$^*?(){}<>\"';`|", parameter[i]) != 0
d976 2
d1083 4
a1086 2
		    size_t len = (next - last)
		    + ((*result != 0) ? strlen(*result) : 0);
d1128 4
a1131 2
		    size_t len = (next - last)
		    + ((*result != 0) ? strlen(*result) : 0);
d1192 22
d1220 1
a1220 1
    unsigned need = len + 1;
d1235 8
a1242 3
	if ((t->str = (char *) malloc(need)) == NULL)
	    outofmem(__FILE__, "HTSABCopy");
	memcpy(t->str, src, len);
d1259 1
a1259 1
    HTSABCopy(dest, src, strlen(src));
d1274 1
a1274 1
	unsigned need = len + 1;
d1282 1
a1282 1
	    unsigned length = t->len + need;
d1284 1
a1284 2
	    if ((t->str = (char *) realloc(t->str, length)) == NULL)
		outofmem(__FILE__, "HTSACat");
d1289 3
a1291 1
	    t->str = (char *) malloc(need);
d1295 4
a1298 1
	memcpy(t->str + t->len, src, len);
d1315 1
a1315 1
    HTSABCat(dest, src, strlen(src));
d1323 2
a1324 2
    unsigned len_a = (a != 0) ? a->len : 0;
    unsigned len_b = (b != 0) ? b->len : 0;
d1328 1
a1328 1
	    || memcmp(a->str, b->str, a->len) == 0)
d1358 3
a1360 3
	temp = StrAllocVsprintf(&temp, 0, fmt, &ap);
	if (!isEmpty(temp)) {
	    HTSABCat(pstr, temp, strlen(temp));
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 4
a4 1
/*		Case-independent string comparison		HTString.c
d17 1
d25 5
a33 4
#ifdef _WINDOWS
const char *HTLibraryVersion = "2.14FM";	/* String for help screen etc */

#else
a34 1
#endif
d136 15
d153 7
a159 3
 * Compare strings, ignoring case.  If either begins with an asterisk, treat
 * that as a wildcard to match zero-or-more characters.  This does not test
 * for embedded wildcards.
d163 1
a163 2
    unsigned const char *us1 = (unsigned const char *) a;
    unsigned const char *us2 = (unsigned const char *) b;
d165 1
d167 13
a179 23
    if ((*a != '*') && (*b != '*')) {
	result = strcasecomp(a, b);
    } else {
	int dir = 1;

	if (*b == '*') {
	    us1 = us2;
	    us2 = (unsigned const char *) a;
	    dir = -1;
	}

	if (strlen((const char *) us2) < (strlen((const char *) us1) - 1)) {
	    result = 1;
	} else {
	    while (*++us1 != '\0') ;
	    while (*++us2 != '\0') ;

	    while (1) {
		unsigned char a1 = TOLOWER(*us1);
		unsigned char b1 = TOLOWER(*us2);

		if (a1 != b1) {
		    result = (a1 > b1) ? dir : -dir;
d181 7
a187 2
		} else if ((*--us1) == '*') {
		    result = 0;
a189 1
		--us2;
d191 13
d205 2
d210 38
a247 1
#endif /* VM */
d607 3
a609 3
#define VA_INTGR(type) ival = va_arg((*ap), type)
#define VA_FLOAT(type) fval = va_arg((*ap), type)
#define VA_POINT(type) pval = (char *)va_arg((*ap), type)
d623 40
d678 1
a678 1
    if (fmt == 0 || *fmt == '\0')
a680 11
#ifdef USE_VASPRINTF
    if (pstr && !dst_len) {
	if (*pstr)
	    FREE(*pstr);
	if (vasprintf(pstr, fmt, *ap) >= 0) {
	    mark_malloced(*pstr, strlen(*pstr) + 1);
	    return (*pstr);
	}
    }
#endif /* USE_VASPRINTF */

d881 1
d929 1
a929 10
#ifdef USE_VASPRINTF
	if (pstr) {
	    if (*pstr)
		FREE(*pstr);
	    if (vasprintf(pstr, fmt, ap) >= 0)	/* else call outofmem?? */
		mark_malloced(*pstr, strlen(*pstr) + 1);
	    result = *pstr;
	} else
#endif /* USE_VASPRINTF */
	    result = StrAllocVsprintf(pstr, 0, fmt, &ap);
d965 12
d999 1
d1182 3
a1184 1
    CTRACE2(TRACE_BSTRING, (tfp, "HTSABCopy(%p, %p, %d)\n", dest, src, len));
d1225 3
a1227 1
    CTRACE2(TRACE_BSTRING, (tfp, "HTSABCat(%p, %p, %d)\n", dest, src, len));
@


1.5
log
@sync with lynx 2.8.5.rel2 which fixes a few minor bugs (null pointer checks,
progress bar with very slow connections)
@
text
@d2 8
a9 8
**
**	Original version came with listserv implementation.
**	Version TBL Oct 91 replaces one which modified the strings.
**	02-Dec-91 (JFG) Added stralloccopy and stralloccat
**	23 Jan 92 (TBL) Changed strallocc* to 8 char HTSAC* for VM and suchlike
**	 6 Oct 92 (TBL) Moved WWW_TraceFlag in here to be in library
**	15 Nov 98 (TD)  Added HTSprintf.
*/
d17 2
a18 2
PUBLIC BOOLEAN WWW_TraceFlag = 0;	/* Global trace flag for ALL W3 code */
PUBLIC int WWW_TraceMask = 0;		/* Global trace flag for ALL W3 code */
d22 1
a22 1
#define VC "unknown"
d26 2
a27 1
CONST char * HTLibraryVersion = "2.14FM"; /* String for help screen etc */
d29 1
a29 1
PUBLIC CONST char * HTLibraryVersion = VC; /* String for help screen etc */
d33 8
a40 9
**     strcasecomp8 is a variant of strcasecomp (below)
**     ------------		    -----------
**     but uses 8bit upper/lower case information
**     from the current display charset.
**     It returns 0 if exact match.
*/
PUBLIC int strcasecomp8 ARGS2(
       CONST char*,    a,
       CONST char *,   b)
d42 2
a43 2
    CONST char *p = a;
    CONST char *q = b;
d45 1
a45 1
    for ( ; *p && *q; p++, q++) {
d47 3
a49 1
	if (diff) return diff;
d52 1
a52 1
	return 1;	/* p was longer than q */
d54 2
a55 2
	return -1;	/* p was shorter than q */
    return 0;		/* Exact match */
d59 9
a67 10
**     strncasecomp8 is a variant of strncasecomp (below)
**     -------------		     ------------
**     but uses 8bit upper/lower case information
**     from the current display charset.
**     It returns 0 if exact match.
*/
PUBLIC int strncasecomp8 ARGS3(
	CONST char*,	a,
	CONST char *,	b,
	int,		n)
d69 2
a70 2
    CONST char *p = a;
    CONST char *q = b;
d72 1
a72 1
    for ( ; ; p++, q++) {
d74 3
a76 2
	if (p == (a+n))
	    return 0;	/*   Match up to n characters */
d83 1
a83 1
    /*NOTREACHED*/
d86 1
a86 75
#ifndef VM		/* VM has these already it seems */

#ifdef SH_EX	/* 1997/12/23 (Tue) 16:40:31 */

/*
 * This array is designed for mapping upper and lower case letter
 * together for a case independent comparison.  The mappings are
 * based upon ascii character sequences.
 */
static unsigned char charmap[] = {
	'\000', '\001', '\002', '\003', '\004', '\005', '\006', '\007',
	'\010', '\011', '\012', '\013', '\014', '\015', '\016', '\017',
	'\020', '\021', '\022', '\023', '\024', '\025', '\026', '\027',
	'\030', '\031', '\032', '\033', '\034', '\035', '\036', '\037',
	'\040', '\041', '\042', '\043', '\044', '\045', '\046', '\047',
	'\050', '\051', '\052', '\053', '\054', '\055', '\056', '\057',
	'\060', '\061', '\062', '\063', '\064', '\065', '\066', '\067',
	'\070', '\071', '\072', '\073', '\074', '\075', '\076', '\077',
	'\100', '\141', '\142', '\143', '\144', '\145', '\146', '\147',
	'\150', '\151', '\152', '\153', '\154', '\155', '\156', '\157',
	'\160', '\161', '\162', '\163', '\164', '\165', '\166', '\167',
	'\170', '\171', '\172', '\133', '\134', '\135', '\136', '\137',
	'\140', '\141', '\142', '\143', '\144', '\145', '\146', '\147',
	'\150', '\151', '\152', '\153', '\154', '\155', '\156', '\157',
	'\160', '\161', '\162', '\163', '\164', '\165', '\166', '\167',
	'\170', '\171', '\172', '\173', '\174', '\175', '\176', '\177',
	'\200', '\201', '\202', '\203', '\204', '\205', '\206', '\207',
	'\210', '\211', '\212', '\213', '\214', '\215', '\216', '\217',
	'\220', '\221', '\222', '\223', '\224', '\225', '\226', '\227',
	'\230', '\231', '\232', '\233', '\234', '\235', '\236', '\237',
	'\240', '\241', '\242', '\243', '\244', '\245', '\246', '\247',
	'\250', '\251', '\252', '\253', '\254', '\255', '\256', '\257',
	'\260', '\261', '\262', '\263', '\264', '\265', '\266', '\267',
	'\270', '\271', '\272', '\273', '\274', '\275', '\276', '\277',
	'\340', '\341', '\342', '\343', '\344', '\345', '\346', '\347',
	'\350', '\351', '\352', '\353', '\354', '\355', '\356', '\357',
	'\360', '\361', '\362', '\363', '\364', '\365', '\366', '\327',
	'\370', '\371', '\372', '\373', '\374', '\375', '\376', '\337',
	'\340', '\341', '\342', '\343', '\344', '\345', '\346', '\347',
	'\350', '\351', '\352', '\353', '\354', '\355', '\356', '\357',
	'\360', '\361', '\362', '\363', '\364', '\365', '\366', '\367',
	'\370', '\371', '\372', '\373', '\374', '\375', '\376', '\377',
};

PUBLIC int strcasecomp ARGS2(
	CONST char*,	s1,
	CONST char*,	s2)
{
    register unsigned char *cm = charmap;
    register unsigned char *us1 = (unsigned char *)s1;
    register unsigned char *us2 = (unsigned char *)s2;

    while (cm[*us1] == cm[*us2++])
	if (*us1++ == '\0')
	    return(0);
    return (cm[*us1] - cm[*--us2]);
}

PUBLIC int strncasecomp ARGS3(
	CONST char*,	a,
	CONST char*,	b,
	int,		n)
{
    register unsigned char *cm = charmap;
    register unsigned char *us1 = (unsigned char *)a;
    register unsigned char *us2 = (unsigned char *)b;

    while ((long)(--n) >= 0 && cm[*us1] == cm[*us2++])
	if (*us1++ == '\0')
	    return(0);
    return ((long)n < 0 ? 0 : cm[*us1] - cm[*--us2]);
}

#else	/* SH_EX */

d88 4
a91 5
**	---------------------
*/
PUBLIC int strcasecomp ARGS2(
	CONST char*,	a,
	CONST char *,	b)
d93 2
a94 2
    CONST char *p = a;
    CONST char *q = b;
d96 1
a96 1
    for ( ; *p && *q; p++, q++) {
d98 3
a100 1
	if (diff) return diff;
d103 1
a103 1
	return 1;	/* p was longer than q */
d105 2
a106 2
	return -1;	/* p was shorter than q */
    return 0;		/* Exact match */
a108 1

d110 5
a114 6
**	----------------
*/
PUBLIC int strncasecomp ARGS3(
	CONST char*,	a,
	CONST char *,	b,
	int,		n)
d116 2
a117 2
    CONST char *p = a;
    CONST char *q = b;
d119 1
a119 1
    for ( ; ; p++, q++) {
d121 3
a123 2
	if (p == (a+n))
	    return 0;	/*   Match up to n characters */
d130 1
a130 1
    /*NOTREACHED*/
d133 45
a177 1
#endif	/* SH_EX */
d183 4
a186 5
**	----------------
*/
PUBLIC int AS_casecomp ARGS2(
	CONST char*,	p,
	CONST char*,	q)
d190 1
a190 1
    for ( ; ; p++, q++) {
d192 1
a192 1
	    return (UCH(*p)  - UCH(*q));
d194 1
a194 1
	     - TOASCII(TOLOWER(*q));
d198 1
a198 1
    /*NOTREACHED*/
a200 1

d202 6
a207 7
**	----------------
**	AS_cmp uses n == -1 to compare indefinite length.
*/
PUBLIC int AS_ncmp ARGS3(
	CONST char *,	p,
	CONST char *,	q,
	unsigned int,	n)
d209 1
a209 1
    CONST char *a = p;
d212 1
a212 1
    for ( ; (p-a) < n; p++, q++) {
d216 1
a216 1
	     - TOASCII(*q);
d220 1
a220 12
    return 0;	/*   Match up to n characters */
}


/*	With ASCII collating sequence
**	----------------
*/
PUBLIC int AS_cmp ARGS2(
	CONST char *,	p,
	CONST char *,	q)
{
    return( AS_ncmp( p, q, -1 ) );
a223 1

d226 2
a227 3
PUBLIC char * HTSACopy ARGS2(
	char **,	dest,
	CONST char *,	src)
d232 1
d247 2
a248 3
PUBLIC char * HTSACat ARGS2(
	char **,	dest,
	CONST char *,	src)
d253 2
a254 1
	    *dest = (char *)realloc(*dest, length + strlen(src) + 1);
d257 1
a257 1
	    strcpy (*dest + length, src);
d259 1
a259 1
	    *dest = (char *)malloc(strlen(src) + 1);
d262 1
a262 1
	    strcpy (*dest, src);
a267 1

d270 1
a270 1
#define EXTRA_TYPE size_t		/* type we use for length */
d273 1
a273 2
PUBLIC void   HTSAFree_extra ARGS1(
	char *,		s)
d279 2
a280 3
PUBLIC char * HTSACopy_extra ARGS2(
	char **,	dest,
	CONST char *,	src)
d287 1
a287 1
	    size = *(EXTRA_TYPE *)((*dest) - EXTRA_SIZE);
d291 1
a291 1
	    size = srcsize * 2;   /* x2 step */
d295 1
a295 1
	    *(EXTRA_TYPE *)(*dest) = size;
d306 14
a319 15
**	---------------
**
** On entry,
**	*pstr	points to a string containig white space separated
**		field, optionlly quoted.
**
** On exit,
**	*pstr	has been moved to the first delimiter past the
**		field
**		THE STRING HAS BEEN MUTILATED by a 0 terminator
**
**	returns a pointer to the first field
*/
PUBLIC char * HTNextField ARGS1(
	char **,	pstr)
d321 2
a322 2
    char * p = *pstr;
    char * start;			/* start of field */
d325 1
a325 1
	p++;				/* Strip white space */
d330 1
a330 1
    if (*p == '"') {			/* quoted field */
d333 1
a333 1
	for (; *p && *p!='"'; p++) {
d335 1
a335 1
		p++;			/* Skip escaped chars */
d340 1
a340 1
	    p++;			/* Skip first field */
d349 28
a376 29
**	---------------
**	Finds the next token in a string
**	On entry,
**	*pstr	points to a string to be parsed.
**	delims	lists characters to be recognized as delimiters.
**		If NULL, default is white space "," ";" or "=".
**		The word can optionally be quoted or enclosed with
**		chars from bracks.
**		Comments surrrounded by '(' ')' are filtered out
**		unless they are specifically reqested by including
**		' ' or '(' in delims or bracks.
**	bracks	lists bracketing chars.  Some are recognized as
**		special, for those give the opening char.
**		If NULL, defaults to <"> and "<" ">".
**	found	points to location to fill with the ending delimiter
**		found, or is NULL.
**
**	On exit,
**	*pstr	has been moved to the first delimiter past the
**		field
**		THE STRING HAS BEEN MUTILATED by a 0 terminator
**	found	points to the delimiter found unless it was NULL.
**	Returns a pointer to the first word or NULL on error
*/
PUBLIC char * HTNextTok ARGS4(
	char **,	pstr,
	CONST char *,	delims,
	CONST char *,	bracks,
	char *,		found)
d378 2
a379 2
    char * p = *pstr;
    char * start = NULL;
d385 10
a394 7
    if (isEmpty(pstr)) return NULL;
    if (!delims) delims = " ;,=" ;
    if (!bracks) bracks = "<\"" ;

    get_blanks = (BOOL) (!strchr(delims,' ') && !strchr(bracks,' '));
    get_comments = (BOOL) (strchr(bracks,'(') != NULL);
    skip_comments = (BOOL) (!get_comments && !strchr(delims,'(') && !get_blanks);
d398 1
a398 1
	p++;				/* Strip white space */
d401 2
a402 1
	if (found) *found = '\0';
d407 2
a408 1
	while (*p && (skipWHITE(*p) || strchr(delims,*p))) p++;
d411 3
a413 2
	    if (found) *found = *(p-1);
	    return NULL;					 /* No field */
d416 1
a416 1
	if (*p == '(' && (skip_comments || get_comments)) {	  /* Comment */
d418 12
a429 7
	    if (get_comments && !start) start = p+1;
	    for(;*p && (*p!=')' || --comment_level>0); p++) {
		if (*p == '(') comment_level++;
		else if (*p == '"') {	      /* quoted field within Comment */
		    for(p++; *p && *p!='"'; p++)
			if (*p == '\\' && *(p+1)) p++; /* Skip escaped chars */
		    if (!*p) break; /* (invalid) end of string found, leave */
d431 2
a432 1
		if (*p == '\\' && *(p+1)) p++;	       /* Skip escaped chars */
d436 2
a437 1
	    if (*p) p++;
d439 1
a439 1
		if (!*p || (!strchr(bracks,*p) && strchr(delims,*p))) {
d442 1
a442 1
		    get_closing_char_too = (BOOL) (strchr(bracks,*p) != NULL);
d444 1
a444 1
	} else if (strchr(bracks,*p)) {	       /* quoted or bracketed field */
d446 14
a459 5
	       case '<': closer = '>'; break;
	       case '[': closer = ']'; break;
	       case '{': closer = '}'; break;
	       case ':': closer = ';'; break;
	    default:	 closer = *p;
d461 5
a465 3
	    if (!start) start = ++p;
	    for(;*p && *p!=closer; p++)
		if (*p == '\\' && *(p+1)) p++;	       /* Skip escaped chars */
d468 1
a468 1
		if (!*p || (!strchr(bracks,*p) && strchr(delims,*p))) {
d471 1
a471 1
		    get_closing_char_too = (BOOL) (strchr(bracks,*p) != NULL);
d473 6
a478 5
	    break;			    /* kr95-10-9: needs to stop here */
	} else {					      /* Spool field */
	    if (!start) start = p;
	    while(*p && !skipWHITE(*p) && !strchr(bracks,*p) &&
					  !strchr(delims,*p))
d480 1
a480 1
	    if (*p && strchr(bracks,*p)) {
d483 1
a483 1
		if (*p=='(' && skip_comments) {
d485 1
a485 1
		    HTNextTok(pstr, NULL, "(", found);	/*	Advance pstr */
d487 2
a488 1
		    if (*pstr && **pstr) (*pstr)++;
d491 1
a491 1
		    break;					   /* Got it */
d495 2
a496 1
    if (found) *found = *p;
d498 2
a499 1
    if (*p) *p++ = '\0';
d504 1
a504 1
PRIVATE char *HTAlloc ARGS2(char *, ptr, size_t, length)
d507 1
a507 1
	ptr = (char *)realloc(ptr, length);
d509 1
a509 1
	ptr = (char *)malloc(length);
d530 7
a536 1
typedef enum { Flags, Width, Prec, Type, Format } PRINTF;
d540 1
a540 1
#define VA_POINT(type) pval = (void *)va_arg((*ap), type)
d542 1
a542 1
#define NUM_WIDTH 10	/* allow for width substituted for "*" in "%*s" */
d549 4
a552 5
PUBLIC_IF_FIND_LEAKS char * StrAllocVsprintf ARGS4(
	char **,	pstr,
	size_t,		dst_len,
	CONST char *,	fmt,
	va_list *,	ap)
d559 1
d567 1
a567 1
    CONST char *format = fmt;
d577 2
a578 2
	    mark_malloced(*pstr, strlen(*pstr)+1);
	    return(*pstr);
d585 2
a586 2
    if (!fmt_ptr || fmt_len < need*NUM_WIDTH) {
	fmt_ptr = HTAlloc(fmt_ptr, fmt_len = need*NUM_WIDTH);
d592 2
a593 2
    if ((fmt_ptr = malloc(need*NUM_WIDTH)) == 0
     || (tmp_ptr = malloc(tmp_len)) == 0) {
d611 9
a619 9
	    char *pval   = dummy;	/* avoid const-cast */
	    double fval  = 0.0;
	    int done     = FALSE;
	    int ival     = 0;
	    int prec     = -1;
	    int type     = 0;
	    int used     = 0;
	    int width    = -1;
	    size_t f     = 0;
d627 1
d641 1
d654 4
a657 4
		    case 'Z': /* FALLTHRU */
		    case 'h': /* FALLTHRU */
		    case 'l': /* FALLTHRU */
		    case 'L': /* FALLTHRU */
d661 6
a666 6
		    case 'o': /* FALLTHRU */
		    case 'i': /* FALLTHRU */
		    case 'd': /* FALLTHRU */
		    case 'u': /* FALLTHRU */
		    case 'x': /* FALLTHRU */
		    case 'X': /* FALLTHRU */
d669 1
d674 1
d677 7
a683 6
		    case 'f': /* FALLTHRU */
		    case 'e': /* FALLTHRU */
		    case 'E': /* FALLTHRU */
		    case 'g': /* FALLTHRU */
		    case 'G': /* FALLTHRU */
			    VA_FLOAT(double);
d688 1
d693 1
d700 1
d705 1
d710 1
a710 1
				    *fmt, format));
d732 1
a732 1
			width = prec + 2; /* leading sign/space/zero, "0x" */
d744 1
a744 1
	    if (width >= (int)tmp_len) {
d796 1
a796 6
#if ANSI_VARARGS
PUBLIC char * HTSprintf (char ** pstr, CONST char * fmt, ...)
#else
PUBLIC char * HTSprintf (va_alist)
    va_dcl
#endif
d802 1
a802 1
    LYva_start(ap,fmt);
a803 4
#if !ANSI_VARARGS
	char **		pstr = va_arg(ap, char **);
	CONST char *	fmt  = va_arg(ap, CONST char *);
#endif
d823 1
a823 6
#if ANSI_VARARGS
PUBLIC char * HTSprintf0 (char ** pstr, CONST char * fmt, ...)
#else
PUBLIC char * HTSprintf0 (va_alist)
    va_dcl
#endif
d828 1
a828 1
    LYva_start(ap,fmt);
a829 4
#if !ANSI_VARARGS
	char **		pstr = va_arg(ap, char **);
	CONST char *	fmt  = va_arg(ap, CONST char *);
#endif
d834 2
a835 2
	    if (vasprintf(pstr, fmt, ap) >= 0) /* else call outofmem?? */
		mark_malloced(*pstr, strlen(*pstr)+1);
d839 1
a839 1
	result = StrAllocVsprintf(pstr, 0, fmt, &ap);
d853 1
a853 2
PUBLIC char *HTQuoteParameter ARGS1(
    CONST char *,	parameter)
d859 1
a859 1
    char * result;
d865 1
a865 1
    for (i=0; i < last; ++i)
d867 1
a867 1
	 || isspace(UCH(parameter[i])))
d870 1
a870 1
    result = (char *)malloc(last + 5*quoted + 3);
d891 1
a891 1
	       */
d907 1
a907 2
PUBLIC int HTCountCommandArgs ARGS1(
    CONST char *,	command)
d910 1
d922 2
a923 3
PRIVATE CONST char *HTAfterCommandArg ARGS2(
    CONST char *,	command,
    int,		number)
d950 4
a953 5
PUBLIC void HTAddXpand ARGS4(
    char **,		result,
    CONST char *,	command,
    int,		number,
    CONST char *,	parameter)
d956 2
a957 2
	CONST char *last = HTAfterCommandArg(command, number - 1);
	CONST char *next = last;
d967 2
a968 1
				+ ((*result != 0) ? strlen(*result) : 0);
d992 4
a995 5
PUBLIC void HTAddToCmd ARGS4(
    char **,		result,
    CONST char *,	command,
    int,		number,
    CONST char *,	string)
d998 2
a999 2
	CONST char *last = HTAfterCommandArg(command, number - 1);
	CONST char *next = last;
d1010 2
a1011 1
				+ ((*result != 0) ? strlen(*result) : 0);
d1029 4
a1032 5
PUBLIC void HTAddParam ARGS4(
    char **,		result,
    CONST char *,	command,
    int,		number,
    CONST char *,	parameter)
d1037 1
d1050 3
a1052 4
PUBLIC void HTEndParam ARGS3(
    char **,		result,
    CONST char *,	command,
    int,		number)
d1054 1
a1054 1
    CONST char *last;
d1057 1
a1057 1
    count = HTCountCommandArgs (command);
d1067 2
a1068 3

/*	Binary-strings (may have embedded nulls).
 *	Some modules (HTGopher) assume there is a null on the end, anyway.
d1071 1
a1071 1
/*	Allocate a new bstring, and return it.
d1073 2
a1074 4
PUBLIC void HTSABCopy ARGS3(
	bstring**,	dest,
	CONST char *,	src,
	int,		len)
d1087 4
a1090 3
	if ((t = (bstring*) malloc(sizeof(bstring))) == NULL)
	    outofmem(__FILE__, "HTSABCopy");
	if ((t->str = (char *) malloc (need)) == NULL)
d1092 1
a1092 1
	memcpy (t->str, src, len);
d1107 1
a1107 3
PUBLIC void HTSABCopy0 ARGS2(
	bstring**,	dest,
	CONST char *,	src)
d1115 2
a1116 4
PUBLIC void HTSABCat ARGS3(
	bstring **,	dest,
	CONST char *,	src,
	int,		len)
d1131 2
a1132 1
	    if ((t->str = (char *)realloc(t->str, length)) == NULL)
d1136 3
a1138 2
		outofmem(__FILE__, "HTSACat");
	    t->str = (char *)malloc(need);
d1142 1
a1142 1
	memcpy (t->str + t->len, src, len);
d1157 1
a1157 3
PUBLIC void HTSABCat0 ARGS2(
	bstring**,	dest,
	CONST char *,	src)
d1165 1
a1165 3
PUBLIC BOOL HTSABEql   ARGS2(
	bstring *,	a,
	bstring *,	b)
d1172 1
a1172 1
	 || memcmp(a->str, b->str, a->len) == 0)
d1181 1
a1181 2
PUBLIC void HTSABFree ARGS1(
	bstring **,	ptr)
d1194 1
a1194 6
#ifdef ANSI_VARARGS
PUBLIC bstring * HTBprintf (bstring ** pstr, CONST char * fmt, ...)
#else
PUBLIC bstring * HTBprintf (va_alist)
    va_dcl
#endif
d1200 1
a1200 1
    LYva_start(ap,fmt);
a1201 4
#if !ANSI_VARARGS
	bstring **	pstr = va_arg(ap, char **);
	CONST char *	fmt  = va_arg(ap, CONST char *);
#endif
d1204 1
a1204 1
	    HTSABCat (pstr, temp, strlen(temp));
d1219 2
a1220 3
PUBLIC void trace_bstring2 ARGS2(
	CONST char *,	text,
	int,		size)
d1227 1
d1253 1
a1253 2
PUBLIC void trace_bstring ARGS1(
	bstring *,	data)
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d880 1
a880 1
    size_t last = strlen(parameter);
d885 4
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d275 1
d277 1
a277 1
	    *dest = (char *) malloc (strlen(src) + 1);
d280 1
a280 1
	    strcpy (*dest, src);
d296 1
a296 1
	    int length = strlen(*dest);
d312 39
d432 2
a433 1
    if (!pstr || !*pstr) return NULL;
d546 3
a548 3
 * Replacement for sprintf, allocates buffer on the fly according to what's needed
 * for its arguments.  Unlike sprintf, this always concatenates to the destination
 * buffer, so we do not have to provide both flavors.
d792 3
a794 3
 * Replacement for sprintf, allocates buffer on the fly according to what's needed
 * for its arguments.  Unlike sprintf, this always concatenates to the destination
 * buffer.
d1004 5
a1008 6
 * Append string-parameter to a system command that we are constructing.  The
 * string is a complete parameter (which is a necessary assumption so we can
 * quote it properly).  We're given the index of the newest parameter we're
 * processing.  Zero indicates none, so a value of '1' indicates that we copy
 * from the beginning of the command string up to the first parameter,
 * substitute the quoted parameter and return the result.
d1013 1
a1013 1
PUBLIC void HTAddParam ARGS4(
d1017 1
a1017 1
    CONST char *,	parameter)
a1021 3
#if USE_QUOTED_PARAMETER
	char *quoted;
#endif
d1026 2
a1027 2
	if (parameter == 0)
	    parameter = "";
d1036 1
a1036 7
#if USE_QUOTED_PARAMETER
		quoted = HTQuoteParameter(parameter);
		HTSACat(result, quoted);
		FREE(quoted);
#else
		HTSACat(result, parameter);
#endif
d1046 22
d1078 1
d1090 3
a1092 3
#ifdef EXP_FILE_UPLOAD
/*	bstring Allocate and Concatenate
*/
d1094 1
a1094 1
/*	Allocate a new copy of a bstring, and returns it
d1102 23
a1124 21
    CTRACE((tfp, "HTSABCopy(%p, %p, %d)\n", dest, src, len));
    /* if we already have a bstring ** ... */
    if (dest) {
	/* ... with a valid bstring *, free it ... */
	if (*dest) {
	    FREE((*dest)->str);
	    FREE(*dest);
	}
	*dest = malloc(sizeof(bstring));
	if (src) {
	    CTRACE((tfp, "%% [%s]\n", src));
	    t = (bstring*) malloc(sizeof(bstring));
	    if (t == NULL)
		outofmem(__FILE__, "HTSABCopy");
	    t->str = (char *) malloc (len);
	    if (t->str == NULL)
		outofmem(__FILE__, "HTSABCopy");
	    memcpy (t->str, src, len);
	    t->len = len;
	    *dest = t;
	}
d1128 13
d1147 2
d1150 7
d1158 3
a1160 2
	    int length = t->len;
	    t->str = (char *)realloc(t->str, length + len);
d1162 1
a1162 2
	    t = typecalloc(bstring);
	    if (t == NULL)
d1164 1
a1164 1
	    t->str = (char *)malloc(len);
d1170 1
d1173 124
a1297 1
#endif /* EXP_FILE_UPLOAD */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d16 4
a19 1
PUBLIC int WWW_TraceFlag = 0;	/* Global trace flag for ALL W3 code */
d25 3
d29 1
d83 1
d86 73
d204 2
d221 1
a221 1
	    return ((unsigned char) *p - (unsigned char) *q);
d245 1
a245 1
	    return ((unsigned char) *p - (unsigned char) *q);
d361 1
a361 1
**		If NULL default is white white space "," ";" or "=".
d369 1
a369 1
**		If NULL defaults to <"> and "<" ">".
d384 1
a384 1
	char *, 	found)
d396 3
a398 3
    get_blanks = (!strchr(delims,' ') && !strchr(bracks,' '));
    get_comments = (strchr(bracks,'(') != NULL);
    skip_comments = (!get_comments && !strchr(delims,'(') && !get_blanks);
d436 1
a436 1
		    get_closing_char_too = (strchr(bracks,*p) != NULL);
d438 1
a438 1
	} else if (strchr(bracks,*p)) {        /* quoted or bracketted field */
d454 1
a454 1
		    get_closing_char_too = (strchr(bracks,*p) != NULL);
a456 7
#if 0
	} else if (*p == '<') { 			     /* quoted field */
	    if (!start) start = ++p;
	    for(;*p && *p!='>'; p++)
		if (*p == '\\' && *(p+1)) p++;	       /* Skip escaped chars */
	    break;			    /* kr95-10-9: needs to stop here */
#endif
d495 10
d522 1
a522 1
PRIVATE char * StrAllocVsprintf ARGS4(
d528 6
a534 1
    size_t have, need;
d537 2
d545 11
d557 8
d569 1
d598 1
a598 1
		if (isdigit(*fmt)) {
d622 1
a622 1
		} else if (isalpha(*fmt)) {
a650 5
#if 0	/* we don't need this, it doesn't work on SunOS 4.x */
			if (type == 'L')
			    VA_FLOAT(long double);
			else
#endif
d673 2
a674 2
			CTRACE(tfp, "unknown format character '%c' in %s\n",
			            *fmt, format);
d691 1
d693 1
d697 1
d699 1
d705 1
d739 1
d742 1
d745 1
a745 1
    	*pstr = dst_ptr;
d748 1
d755 5
d791 5
d812 9
d846 1
a846 1
	 || isspace(parameter[i]))
a862 3
	} else if (parameter[i] == '\\') {
	    result[n++] = parameter[i];
	    result[n++] = parameter[i];
d864 7
d948 1
a948 1
		    		+ ((*result != 0) ? strlen(*result) : 0);
d953 1
a953 1
		CTRACE(tfp, "PARAM-EXP:%s\n", *result);
d982 1
d984 1
d995 1
a995 1
		    		+ ((*result != 0) ? strlen(*result) : 0);
d1006 1
a1006 1
		CTRACE(tfp, "PARAM-ADD:%s\n", *result);
d1032 62
a1093 1
    CTRACE(tfp, "PARAM-END:%s\n", *result);
d1095 1
@


1.1
log
@Initial revision
@
text
@d8 1
a9 3
#include <ctype.h>
#include "HTUtils.h"
#include "tcp.h"
d11 1
a11 2
#include "LYLeaks.h"
#include "LYStrings.h"
d13 2
a14 1
#define FREE(x) if (x) {free(x); x = NULL;}
d125 59
d190 10
a199 6
    FREE(*dest);
    if (src) {
	*dest = (char *) malloc (strlen(src) + 1);
	if (*dest == NULL)
	    outofmem(__FILE__, "HTSACopy");
	strcpy (*dest, src);
d210 1
a210 1
    if (src && *src) {
d299 2
a300 2
	const char *,	delims,
	const char *,	bracks,
d405 487
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
