head	1.7;
access;
symbols
	OPENBSD_5_5:1.5.0.22
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.18
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.16
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.6;
commitid	EcR8E7r0stjLUV4p;

1.6
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.5;
commitid	lGGuvDWEniklWrQe;

1.5
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.42;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.49;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.44;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.44;	author maja;	state Exp;
branches;
next	;


desc
@@


1.7
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HTStyle.h,v 1.17 2011/06/06 09:12:01 tom Exp $
					    HTStyle: Style management for libwww
                              STYLE DEFINITION FOR HYPERTEXT

   Styles allow the translation between a logical property of a piece of text
   and its physical representation.

   A StyleSheet is a collection of styles, defining the translation necessary
   to represent a document.  It is a linked list of styles.

Overriding this module

   Why is the style structure declared in the HTStyle.h module, instead of
   having the user browser define the structure, and the HTStyle routines just
   use sizeof() for copying?

   It's not obvious whether HTStyle.c should be common code.  It's useful to
   have common code for loading style sheets, especially if the movement toward
   standard style sheets gets going.

   If it IS common code, then both the hypertext object and HTStyle.c must know
   the structure of a style, so HTStyle.h is a suitable place to put that. 
   HTStyle.c has to be compiled with a knowledge of the

   It we take it out of the library, then of course HTStyle could be declared
   as an undefined structure.  The only references to it are in the
   structure-flattening code HTML.c and HTPlain.c, which only use
   HTStypeNamed().

   You can in any case override this function in your own code, which will
   prevent the HTStyle from being loaded.  You will be able to redefine your
   style structure in this case without problems, as no other moule needs to
   know it.

 */
#ifndef HTStyle_H
#define HTStyle_H

#include <HTAnchor.h>

typedef long int HTFont;	/* Dummy definition instead */

#ifdef NeXT_suppressed
#include <appkit/appkit.h>
typedef NXCoord HTCoord;

#define HTParagraphStyle NXTextStyle
#define HTCoord NXCoord
typedef struct _color {
    float grey;
    int RGBColor;
} HTColor;

#else

typedef int HTCoord;		/* changed from float to int - kw */

typedef struct _HTParagraphStyle {
    HTCoord left_indent;	/* @@@@@@@@ junk! etc etc */
} HTParagraphStyle;

typedef int HTColor;		/* Sorry about the US spelling! */

#endif

#ifdef __cplusplus
extern "C" {
#endif
#define STYLE_NAME_LENGTH       80	/* @@@@@@@@@@@@@@@@@@@@@@ */
    typedef struct {
	short kind;		/* only NX_LEFTTAB implemented */
	HTCoord position;	/* x coordinate for stop */
    } HTTabStop;

/*      The Style Structure
 *      -------------------
 */

    typedef struct _HTStyle {

/*      Style management information
*/
	struct _HTStyle *next;	/* Link for putting into stylesheet */
	char *w_name;		/* Style name */
	const char *c_name;	/* Style name */
	int id;			/* equivalent of name, for speed */
	char *w_SGMLTag;	/* Tag name to start */
	const char *c_SGMLTag;	/* Tag name to start */

/*      Character attributes    (a la NXRun)
*/
	HTFont font;		/* Font id */
	HTCoord fontSize;	/* The size of font, not independent */
	HTColor color;		/* text gray of current run */
	int superscript;	/* superscript (-sub) in points */

	HTAnchor *anchor;	/* Anchor id if any, else zero */

/*      Paragraph Attribtes     (a la NXTextStyle)
*/
	HTCoord indent1st;	/* how far first line in paragraph is
				   * indented */
	HTCoord leftIndent;	/* how far second line is indented */
	HTCoord rightIndent;	/* (Missing from NeXT version */
	short alignment;	/* quad justification */
	HTCoord lineHt;		/* line height */
	HTCoord descentLine;	/* descender bottom from baseline */
	const HTTabStop *tabs;	/* array of tab stops, 0 terminated */

	BOOL wordWrap;		/* Yes means wrap at space not char */
	BOOL freeFormat;	/* Yes means \n is just white space */
	HTCoord spaceBefore;	/* Omissions from NXTextStyle */
	HTCoord spaceAfter;
	int paraFlags;		/* Paragraph flags, bits as follows: */

#define PARA_KEEP       1	/* Do not break page within this paragraph */
#define PARA_WITH_NEXT  2	/* Do not break page after this paragraph */

#define HT_JUSTIFY 0		/* For alignment */
#define HT_LEFT 1
#define HT_RIGHT 2
#define HT_CENTER 3

    } HTStyle;

#define GetHTStyleName(p) ((p)->w_name    ? (p)->w_name    : (p)->c_name)
#define GetHTStyleSGML(p) ((p)->w_SGMLTag ? (p)->w_SGMLTag : (p)->c_SGMLTag)

#define HTStyleInit( \
	next, name, SGML_tag, \
	font, fontsize, color, superscript, \
	anchor, indent1st, leftIndent, rightIndent, \
	alignment, lineHt, descentLine, \
	tabs, wordWrap, freeFormat, spaceBefore, spaceAfter, paraFlags) \
    { \
	next, NULL, #name, ST_##name, NULL, SGML_tag, \
	font, fontsize, color, superscript, \
	anchor, indent1st, leftIndent, rightIndent, \
	alignment, lineHt, descentLine, \
	tabs, wordWrap, freeFormat, spaceBefore, spaceAfter, paraFlags }

#define HT_ALIGN_NONE (-1)

/*      Style functions:
*/
    extern HTStyle *HTStyleNew(void);
    extern HTStyle *HTStyleNewNamed(const char *name);
    extern HTStyle *HTStyleFree(HTStyle *self);

#ifdef SUPRESS
    extern HTStyle *HTStyleRead(HTStyle *self, HTStream *stream);
    extern HTStyle *HTStyleWrite(HTStyle *self, HTStream *stream);
#endif
/*              Style Sheet
 *              -----------
 */
    typedef struct _HTStyleSheet {
	const char *name;
	HTStyle *styles;
    } HTStyleSheet;

/*      Stylesheet functions:
*/
    extern HTStyleSheet *HTStyleSheetNew(void);
    extern HTStyleSheet *HTStyleSheetFree(HTStyleSheet *self);
    extern HTStyle *HTStyleNamed(HTStyleSheet *self, const char *name);
    extern HTStyle *HTStyleForParagraph(HTStyleSheet *self, HTParagraphStyle * paraStyle);
    extern HTStyle *HTStyleMatching(HTStyleSheet *self, HTStyle *style);

/* extern HTStyle * HTStyleForRun (HTStyleSheet *self, NXRun * run); */
    extern HTStyleSheet *HTStyleSheetAddStyle(HTStyleSheet *self, HTStyle *style);
    extern HTStyleSheet *HTStyleSheetRemoveStyle(HTStyleSheet *self, HTStyle *style);

#ifdef SUPPRESS
    extern HTStyleSheet *HTStyleSheetRead(HTStyleSheet *self, HTStream *stream);
    extern HTStyleSheet *HTStyleSheetWrite(HTStyleSheet *self, HTStream *stream);
#endif
#define CLEAR_POINTER ((void *)-1)	/* Pointer value means "clear me" */

/* DefaultStyle.c */
    extern HTStyleSheet *DefaultStyle(HTStyle ***result_array);

/* enum, use this instead of HTStyle name comparisons */
    enum HTStyle_Enum {
	ST_Normal = 0,
	ST_DivCenter,
	ST_DivLeft,
	ST_DivRight,
	ST_Banner,
	ST_Blockquote,
	ST_Bq,
	ST_Footnote,
	ST_List,
	ST_List1,
	ST_List2,
	ST_List3,
	ST_List4,
	ST_List5,
	ST_List6,
	ST_Menu,
	ST_Menu1,
	ST_Menu2,
	ST_Menu3,
	ST_Menu4,
	ST_Menu5,
	ST_Menu6,
	ST_Glossary,
	ST_Glossary1,
	ST_Glossary2,
	ST_Glossary3,
	ST_Glossary4,
	ST_Glossary5,
	ST_Glossary6,
	ST_GlossaryCompact,
	ST_GlossaryCompact1,
	ST_GlossaryCompact2,
	ST_GlossaryCompact3,
	ST_GlossaryCompact4,
	ST_GlossaryCompact5,
	ST_GlossaryCompact6,
	ST_Example,
	ST_Preformatted,
	ST_Listing,
	ST_Address,
	ST_Note,
	ST_Heading1,
	ST_Heading2,
	ST_Heading3,
	ST_Heading4,
	ST_Heading5,
	ST_Heading6,
	ST_HeadingCenter,
	ST_HeadingLeft,
	ST_HeadingRight
    };

#ifdef __cplusplus
}
#endif
#endif				/* HTStyle_H */
@


1.6
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
a3 1
/*                                                       HTStyle: Style management for libwww
d85 2
a86 1
	char *name;		/* Style name */
d88 2
a89 1
	char *SGMLTag;		/* Tag name to start */
d127 16
d159 1
a159 1
	char *name;
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d4 2
a5 2
   Styles allow the translation between a logical property of a piece of text and its
   physical representation.
d7 2
a8 2
   A StyleSheet is a collection of styles, defining the translation necessary to represent
   a document.  It is a linked list of styles.
d12 21
a32 18
   Why is the style structure declared in the HTStyle.h module, instead of having the user
   browser define the structure, and the HTStyle routines just use sizeof() for copying?

   It's not obvious whether HTStyle.c should be common code.  It's useful to have common
   code for loading style sheets, especially if the movement toward standard style sheets
   gets going.

   If it IS common code, then both the hypertext object and HTStyle.c must know the
   structure of a style, so HTStyle.h is a suitable place to put that.  HTStyle.c has to
   be compiled with a knowledge of the

   It we take it out of the library, then of course HTStyle could be declared as an
   undefined structure.  The only references to it are in the structure-flattening code
   HTML.c and HTPlain.c, which only use HTStypeNamed().

   You can in any case override this function in your own code, which will prevent the
   HTStyle from being loaded.  You will be able to redefine your style structure in this
   case without problems, as no other moule needs to know it.
d40 1
a40 1
typedef long int HTFont;        /* Dummy definition instead */
d45 1
d49 2
a50 2
        float   grey;
        int     RGBColor;
d52 1
d58 1
a58 1
    HTCoord     left_indent;            /* @@@@@@@@ junk! etc etc*/
d61 1
a61 1
typedef int HTColor;            /* Sorry about the US spelling! */
d65 8
a72 9


#define STYLE_NAME_LENGTH       80      /* @@@@@@@@@@@@@@@@@@@@@@ */

typedef struct {
    short               kind;           /* only NX_LEFTTAB implemented*/
    HTCoord             position;       /* x coordinate for stop */
} HTTabStop;

d75 2
a76 2
**      -------------------
*/
d78 1
a78 1
typedef struct _HTStyle {
d82 4
a85 5
    struct _HTStyle     *next;          /* Link for putting into stylesheet */
    char *              name;           /* Style name */
    int                 id;             /* equivalent of name, for speed */
    char *              SGMLTag;        /* Tag name to start */

d89 4
a92 4
    HTFont              font;           /* Font id */
    HTCoord             fontSize;       /* The size of font, not independent */
    HTColor             color;		/* text gray of current run */
    int                 superscript;    /* superscript (-sub) in points */
d94 1
a94 1
    HTAnchor            *anchor;        /* Anchor id if any, else zero */
d98 14
a111 14
    HTCoord             indent1st;      /* how far first line in paragraph is
                                 * indented */
    HTCoord             leftIndent;     /* how far second line is indented */
    HTCoord             rightIndent;    /* (Missing from NeXT version */
    short               alignment;      /* quad justification */
    HTCoord             lineHt;         /* line height */
    HTCoord             descentLine;    /* descender bottom from baseline */
    CONST HTTabStop     *tabs;          /* array of tab stops, 0 terminated */

    BOOL                wordWrap;       /* Yes means wrap at space not char */
    BOOL                freeFormat;     /* Yes means \n is just white space */
    HTCoord             spaceBefore;    /* Omissions from NXTextStyle */
    HTCoord             spaceAfter;
    int                 paraFlags;      /* Paragraph flags, bits as follows: */
d113 2
a114 2
#define PARA_KEEP       1       /* Do not break page within this paragraph */
#define PARA_WITH_NEXT  2       /* Do not break page after this paragraph */
d116 1
a116 1
#define HT_JUSTIFY 0            /* For alignment */
d121 1
a121 1
} HTStyle;
d127 4
a130 3
extern HTStyle * HTStyleNew NOPARAMS;
extern HTStyle * HTStyleNewNamed PARAMS ((CONST char * name));
extern HTStyle * HTStyleFree PARAMS((HTStyle * self));
d132 2
a133 2
extern HTStyle * HTStyleRead PARAMS((HTStyle * self, HTStream * stream));
extern HTStyle * HTStyleWrite PARAMS((HTStyle * self, HTStream * stream));
d136 6
a141 7
**              -----------
*/
typedef struct _HTStyleSheet {
        char *          name;
        HTStyle *       styles;
} HTStyleSheet;

d145 10
a154 11
extern HTStyleSheet * HTStyleSheetNew NOPARAMS;
extern HTStyleSheet * HTStyleSheetFree PARAMS((HTStyleSheet * self));
extern HTStyle * HTStyleNamed PARAMS((HTStyleSheet * self, CONST char * name));
extern HTStyle * HTStyleForParagraph PARAMS((HTStyleSheet * self,
        HTParagraphStyle * paraStyle));
extern HTStyle * HTStyleMatching PARAMS((HTStyleSheet *self, HTStyle * style));
/* extern HTStyle * HTStyleForRun PARAMS((HTStyleSheet *self, NXRun * run)); */
extern HTStyleSheet * HTStyleSheetAddStyle PARAMS((HTStyleSheet * self,
        HTStyle * style));
extern HTStyleSheet * HTStyleSheetRemoveStyle PARAMS((HTStyleSheet * self,
        HTStyle * style));
d156 2
a157 4
extern HTStyleSheet * HTStyleSheetRead PARAMS((HTStyleSheet * self,
                                                HTStream * stream));
extern HTStyleSheet * HTStyleSheetWrite PARAMS((HTStyleSheet * self,
                                                HTStream * stream));
d159 1
a159 1
#define CLEAR_POINTER ((void *)-1)      /* Pointer value means "clear me" */
d162 1
a162 1
extern HTStyleSheet * DefaultStyle PARAMS((HTStyle*** result_array));
d165 1
a165 1
enum HTStyle_Enum {
d216 1
a216 1
};
d218 4
a221 1
#endif /* HTStyle_H */
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d80 1
d162 55
a216 1
extern HTStyleSheet * DefaultStyle NOPARAMS;
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d119 1
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
   a document. It is a linked list of styles.
d24 1
a24 1
   undefined structure. The only references to it are in the structure-flattening code
d35 1
a35 4
#ifndef HTUTILS_H
#include "HTUtils.h"
#endif /* HTUTILS_H */
#include "HTAnchor.h"
a37 17

#ifdef SHORT_NAMES
#define HTStyleNew                      HTStNew
#define HTStyleFree                     HTStFree
#define HTStyleRead                     HTStRead
#define HTStyleWrite                    HTStWrite
#define HTStyleSheetNew                 HTStShNe
#define HTStyleSheetFree                HTStShFr
#define HTStyleNamed                    HTStName
#define HTStyleForParagraph             HTStFoPa
#define HTStyleMatching                 HTStMatc
#define HTStyleForRun                   HTStFoRu
#define HTStyleSheetAddStyle            HTStShAd
#define HTStyleSheetRemoveStyle         HTStShRm
#define HTStyleSheetRead                HTStShRe
#define HTStyleSheetWrite               HTStShWr
#endif
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
