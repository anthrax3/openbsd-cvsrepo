head	1.7;
access;
symbols
	OPENBSD_5_5:1.5.0.22
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.18
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.16
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.6;
commitid	EcR8E7r0stjLUV4p;

1.6
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.5;
commitid	lGGuvDWEniklWrQe;

1.5
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.43;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.50;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.43;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.43;	author maja;	state Exp;
branches;
next	;


desc
@@


1.7
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HText.h,v 1.16 2010/09/25 11:41:08 tom Exp $
 *                                                           Rich Hypertext object for libWWW
 *                                RICH HYPERTEXT OBJECT
 *
 * This is the C interface to the Objective-C (or whatever) Style-oriented
 * HyperText class.  It is used when a style-oriented text object is available
 * or craeted in order to display hypertext.
 */
#ifndef HTEXT_H
#define HTEXT_H

#include <HTAnchor.h>
#include <HTStyle.h>
#include <HTStream.h>
#include <SGML.h>

#ifdef __cplusplus
extern "C" {
#endif
#ifndef THINK_C
#ifndef HyperText		/* Objective C version defined HyperText */
    typedef struct _HText HText;	/* Normal Library */
#endif
#else
    class CHyperText;		/* Mac Think-C browser hook */
    typedef CHyperText HText;
#endif

    extern HText *HTMainText;	/* Pointer to current main text */
    extern HTParentAnchor *HTMainAnchor;	/* Pointer to current text's anchor */

    extern const char *HTAppName;	/* Application name */
    extern const char *HTAppVersion;	/* Application version */

/*

Creation and deletion

  HTEXT_NEW: CREATE HYPERTEXT OBJECT

   There are several methods depending on how much you want to specify.  The
   output stream is used with objects which need to output the hypertext to a
   stream.  The structure is for objects which need to refer to the structure
   which is kep by the creating stream.

 */
    extern HText *HText_new(HTParentAnchor *anchor);

    extern HText *HText_new2(HTParentAnchor *anchor,
			     HTStream *output_stream);

    extern HText *HText_new3(HTParentAnchor *anchor,
			     HTStream *output_stream,
			     HTStructured * structure);

/*

  FREE HYPERTEXT OBJECT

 */
    extern void HText_free(HText *me);

/*

Object Building methods

   These are used by a parser to build the text in an object HText_beginAppend
   must be called, then any combination of other append calls, then
   HText_endAppend.  This allows optimised handling using buffers and caches
   which are flushed at the end.

 */
    extern void HText_beginAppend(HText *text);

    extern void HText_endAppend(HText *text);

/*

  SET THE STYLE FOR FUTURE TEXT

 */

    extern void HText_setStyle(HText *text, HTStyle *style);

/*

  ADD ONE CHARACTER

 */
    extern void HText_appendCharacter(HText *text, int ch);

/*

  ADD A ZERO-TERMINATED STRING

 */

    extern void HText_appendText(HText *text, const char *str);

/*

  NEW PARAGRAPH

   and similar things

 */
    extern void HText_appendParagraph(HText *text);

    extern void HText_appendLineBreak(HText *text);

    extern void HText_appendHorizontalRule(HText *text);

/*

  START/END SENSITIVE TEXT

 */

/*

   The anchor object is created and passed to HText_beginAnchor.  The senstive
   text is added to the text object, and then HText_endAnchor is called. 
   Anchors may not be nested.

 */
    extern int HText_beginAnchor(HText *text, int underline,
				 HTChildAnchor *anc);
    extern void HText_endAnchor(HText *text, int number);
    extern BOOL HText_isAnchorBlank(HText *text, int number);

/*

  APPEND AN INLINE IMAGE

   The image is handled by the creation of an anchor whose destination is the
   image document to be included.  The semantics is the intended inline display
   of the image.

   An alternative implementation could be, for example, to begin an anchor,
   append the alternative text or "IMAGE", then end the anchor.  This would
   simply generate some text linked to the image itself as a separate document.

 */
    extern void HText_appendImage(HText *text, HTChildAnchor *anc,
				  const char *alternative_text,
				  int alignment,
				  int isMap);

/*

  RETURN THE ANCHOR ASSOCIATED WITH THIS NODE

 */
    extern HTParentAnchor *HText_nodeAnchor(HText *me);

/*

Browsing functions

 */

/*

  BRING TO FRONT AND HIGHLIGHT IT

 */

    extern BOOL HText_select(HText *text);
    extern BOOL HText_selectAnchor(HText *text, HTChildAnchor *anchor);

/*

Editing functions

   These are called from the application.  There are many more functions not
   included here from the orginal text object.  These functions NEED NOT BE
   IMPLEMENTED in a browser which cannot edit.

 */
/*      Style handling:
*/
/*      Apply this style to the selection
*/
    extern void HText_applyStyle(HText *me, HTStyle *style);

/*      Update all text with changed style.
*/
    extern void HText_updateStyle(HText *me, HTStyle *style);

/*      Return style of  selection
*/
    extern HTStyle *HText_selectionStyle(HText *me, HTStyleSheet *sheet);

/*      Paste in styled text
*/
    extern void HText_replaceSel(HText *me, const char *aString,
				 HTStyle *aStyle);

/*      Apply this style to the selection and all similarly formatted text
 *      (style recovery only)
 */
    extern void HTextApplyToSimilar(HText *me, HTStyle *style);

/*      Select the first unstyled run.
 *      (style recovery only)
 */
    extern void HTextSelectUnstyled(HText *me, HTStyleSheet *sheet);

/*      Anchor handling:
*/
    extern void HText_unlinkSelection(HText *me);
    extern HTAnchor *HText_referenceSelected(HText *me);
    extern HTAnchor *HText_linkSelTo(HText *me, HTAnchor * anchor);

#ifdef __cplusplus
}
#endif
#endif				/* HTEXT_H */
@


1.6
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@a0 5
/*                                                           Rich Hypertext object for libWWW
                                  RICH HYPERTEXT OBJECT

 */

d2 7
a8 5

   This is the C interface to the Objective-C (or whatever) Style-oriented
   HyperText class.  It is used when a style-oriented text object is available
   or craeted in order to display hypertext.

d127 1
a127 1
    extern int HText_beginAnchor(HText *text, BOOL underline,
d148 1
a148 1
				  BOOL isMap);
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d8 3
a10 3
   This is the C interface to the Objective-C (or whatever) Style-oriented HyperText
   class.  It is used when a style-oriented text object is available or craeted in order to
   display hypertext.
d15 1
d21 3
d25 2
a26 2
#ifndef HyperText               /* Objective C version defined HyperText */
typedef struct _HText HText;    /* Normal Library */
d29 2
a30 2
class CHyperText;               /* Mac Think-C browser hook */
typedef CHyperText HText;
d33 5
a37 2
extern HText * HTMainText;              /* Pointer to current main text */
extern HTParentAnchor * HTMainAnchor;   /* Pointer to current text's anchor */
d45 4
a48 3
   There are several methods depending on how much you want to specify.  The output stream
   is used with objects which need to output the hypertext to a stream.  The structure is
   for objects which need to refer to the structure which is kep by the creating stream.
d51 1
a51 1
 extern HText * HText_new PARAMS((HTParentAnchor * anchor));
d53 2
a54 2
 extern HText * HText_new2 PARAMS((HTParentAnchor * anchor,
                                HTStream * output_stream));
d56 3
a58 3
 extern HText * HText_new3 PARAMS((HTParentAnchor * anchor,
                                HTStream * output_stream,
                                HTStructured * structure));
d65 1
a65 2
extern void     HText_free PARAMS((HText * me));

d71 4
a74 3
   These are used by a parser to build the text in an object HText_beginAppend must be
   called, then any combination of other append calls, then HText_endAppend. This allows
   optimised handling using buffers and caches which are flushed at the end.
d77 1
a77 1
extern void HText_beginAppend PARAMS((HText * text));
d79 1
a79 1
extern void HText_endAppend PARAMS((HText * text));
d87 1
a87 1
extern void HText_setStyle PARAMS((HText * text, HTStyle * style));
d94 1
a94 1
extern void HText_appendCharacter PARAMS((HText * text, int ch));
d102 1
a102 1
extern void HText_appendText PARAMS((HText * text, CONST char * str));
d111 1
a111 5
extern void HText_appendParagraph PARAMS((HText * text));

extern void HText_appendLineBreak PARAMS((HText * text));

extern void HText_appendHorizontalRule PARAMS((HText * text));
d113 1
d115 1
d125 3
a127 3
   The anchor object is created and passed to HText_beginAnchor.  The senstive text is
   added to the text object, and then HText_endAnchor is called. Anchors may not be
   nested.
d130 4
a133 6
extern int HText_beginAnchor PARAMS((
	HText *		text,
	BOOL		underline,
	HTChildAnchor *	anc));
extern void HText_endAnchor PARAMS((HText * text, int number));
extern BOOL HText_isAnchorBlank PARAMS((HText * text, int number));
d139 7
a145 6
   The image is handled by the creation of an anchor whose destination is the image
   document to be included. The semantics is the intended inline display of the image.

   An alternative implementation could be, for example, to begin an anchor, append the
   alternative text or "IMAGE", then end the anchor.  This would simply generate some text
   linked to the image itself as a separate document.
d148 4
a151 6
extern void HText_appendImage PARAMS((
        HText *         text,
        HTChildAnchor * anc,
        CONST char *    alternative_text,
        int             alignment,
        BOOL            isMap));
d158 1
a158 2
extern HTParentAnchor * HText_nodeAnchor PARAMS((HText * me));

a165 1

d172 2
a173 3

extern BOOL HText_select PARAMS((HText * text));
extern BOOL HText_selectAnchor PARAMS((HText * text, HTChildAnchor* anchor));
d179 3
a181 3
   These are called from the application.  There are many more functions not included here
   from the orginal text object.  These functions NEED NOT BE IMPLEMENTED in a browser
   which cannot edit.
d188 1
a188 1
extern void HText_applyStyle PARAMS((HText * me, HTStyle *style));
d192 1
a192 1
extern void HText_updateStyle PARAMS((HText * me, HTStyle *style));
d196 1
a196 3
extern HTStyle * HText_selectionStyle PARAMS((
        HText * me,
        HTStyleSheet* sheet));
d200 2
a201 3
extern void HText_replaceSel PARAMS((HText * me,
        CONST char *aString,
        HTStyle* aStyle));
d204 3
a206 3
**      (style recovery only)
*/
extern void HTextApplyToSimilar PARAMS((HText * me, HTStyle *style));
d209 3
a211 4
**      (style recovery only)
*/
extern void HTextSelectUnstyled PARAMS((HText * me, HTStyleSheet *sheet));

d215 3
a217 3
extern void             HText_unlinkSelection PARAMS((HText * me));
extern HTAnchor *       HText_referenceSelected PARAMS((HText * me));
extern HTAnchor *       HText_linkSelTo PARAMS((HText * me, HTAnchor* anchor));
d219 4
a222 1
#endif /* HTEXT_H */
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@a151 8
  DUMP DIAGNOSTICS TO STDERR

 */

extern void HText_dump PARAMS((HText * me));

/*

a222 1

a223 3
/*

   end */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d86 1
a86 1
extern void HText_appendCharacter PARAMS((HText * text, char ch));
d129 1
a129 1

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
                                             
d9 1
a9 1
   class. It is used when a style-oriented text object is available or craeted in order to
d11 1
a11 1
   
d15 4
a18 34
#include "HTAnchor.h"
#include "HTStyle.h"
#include "HTStream.h"
#include "SGML.h"

#ifdef SHORT_NAMES
#define HTMainText                      HTMaText
#define HTMainAnchor                    HtMaAnch
#define HText_new                       HTHTNew
#define HText_new2                      HTHTNew2
#define HText_free                      HTHTFree
#define HText_beginAppend               HTHTBeAp
#define HText_endAppend                 HTHTEnAp
#define HText_setStyle                  HTHTSeSt
#define HText_appendCharacter           HTHTApCh
#define HText_appendImage               HTHTApIm
#define HText_appendText                HTHTApTe
#define HText_appendParagraph           HTHTApPa
#define HText_beginAnchor               HTHTBeAn
#define HText_endAnchor                 HTHTEnAn
#define HText_dump                      HTHTDump
#define HText_nodeAnchor                HTHTNoAn
#define HText_select                    HTHTSele
#define HText_selectAnchor              HTHTSeAn
#define HText_applyStyle                HTHTApSt
#define HText_updateStyle               HTHTUpSt
#define HText_selectionStyle            HTHTStyl
#define HText_replaceSel                HTHTRepl
#define HText_applyToSimilar            HTHTApTo
#define HText_selectUnstyled            HTHTSeUn
#define HText_unlinkSelection           HTHTUnSe
#define HText_linkSelTo                 HTHTLiSe
#define HText_referenceSelected         HTHTRefS
#endif
d37 2
a38 2
  
   There are several methods depending on how much you want to specify. The output stream
d41 1
a41 1
   
d55 1
a55 1
  
d67 1
a67 1
   
d76 1
a76 1
  
d84 1
a84 1
  
d91 1
a91 1
  
d99 1
a99 1
  
d101 1
a101 1
   
d114 1
a114 1
  
d119 1
a119 1
   The anchor object is created and passed to HText_beginAnchor. The senstive text is
d122 1
a122 1
   
d134 1
a134 1
  
d137 1
a137 1
   
d139 1
a139 1
   alternative text or "IMAGE", then end the anchor. This would simply generate some text
d141 1
a141 1
   
d153 1
a153 1
  
d161 1
a161 1
  
d176 1
a176 1
  
d187 2
a188 2
   These are called from the application. There are many more functions not included here
   from the orginal text object. These functions NEED NOT BE IMPLEMENTED in a browser
d190 1
a190 1
   
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
