head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.22
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.18
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.16
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.07.09.04.11.34;	author daniel;	state dead;
branches;
next	1.5;
commitid	lGGuvDWEniklWrQe;

1.5
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.42;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.36;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.46;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.46;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.46;	author maja;	state Exp;
branches;
next	;


desc
@@


1.6
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@/*		FILE WRITER				HTFWrite.h
 *		===========
 *
 *	This version of the stream object just writes to a C file.
 *	The file is assumed open and left open.
 *
 *	Bugs:
 *		strings written must be less than buffer size.
 */

#include <HTUtils.h>

#include <HTFWriter.h>

#include <HTFormat.h>
#include <HTAlert.h>
#include <HTFile.h>

#include <LYUtils.h>
#include <LYLeaks.h>

/*		Stream Object
 *		------------
 */

struct _HTStream {
    const HTStreamClass *isa;

    FILE *fp;
    char *end_command;
    char *remove_command;
    BOOL announce;
};

/*_________________________________________________________________________
 *
 *		B L A C K    H O L E    C L A S S
 *
 *	There is only one black hole instance shared by anyone
 *	who wanst a black hole.  These black holes don't radiate,
 *	they just absorb data.
 */
static void HTBlackHole_put_character(HTStream *me, char c)
{
}
static void HTBlackHole_put_string(HTStream *me, const char *s)
{
}
static void HTBlackHole_write(HTStream *me, const char *s, int l)
{
}
static void HTBlackHole_free(HTStream *me)
{
}
static void HTBlackHole_abort(HTStream *me, HTError e)
{
}

/*	Black Hole stream
 *	-----------------
 */
static const HTStreamClass HTBlackHoleClass =
{
    "BlackHole",
    HTBlackHole_free,
    HTBlackHole_abort,
    HTBlackHole_put_character, HTBlackHole_put_string,
    HTBlackHole_write
};

static HTStream HTBlackHoleInstance =
{
    &HTBlackHoleClass,
    NULL,
    NULL,
    NULL,
    NO
};

/*	Black hole craetion
*/
HTStream *HTBlackHole(void)
{
    return &HTBlackHoleInstance;
}

/*_________________________________________________________________________
 *
 *		F I L E     A C T I O N 	R O U T I N E S
 *  Bug:
 *	All errors are ignored.
 */

/*	Character handling
 *	------------------
 */

static void HTFWriter_put_character(HTStream *me, char c)
{
    putc(c, me->fp);
}

/*	String handling
 *	---------------
 *
 *	Strings must be smaller than this buffer size.
 */
static void HTFWriter_put_string(HTStream *me, const char *s)
{
    fputs(s, me->fp);
}

/*	Buffer write.  Buffers can (and should!) be big.
 *	------------
 */
static void HTFWriter_write(HTStream *me, const char *s, int l)
{
    fwrite(s, 1, l, me->fp);
}

/*	Free an HTML object
 *	-------------------
 *
 *	Note that the SGML parsing context is freed, but the created
 *	object is not,
 *	as it takes on an existence of its own unless explicitly freed.
 */
static void HTFWriter_free(HTStream *me)
{
    fclose(me->fp);
    if (me->end_command) {	/* Temp file */
	_HTProgress(me->end_command);	/* Tell user what's happening */
	system(me->end_command);
	FREE(me->end_command);
	if (me->remove_command) {
	    system(me->remove_command);
	    FREE(me->remove_command);
	}
    }

    FREE(me);
}

/*	End writing
*/

static void HTFWriter_abort(HTStream *me, HTError e)
{
    fclose(me->fp);
    if (me->end_command) {	/* Temp file */
	CTRACE((tfp, "HTFWriter: Aborting: file not executed.\n"));
	FREE(me->end_command);
	if (me->remove_command) {
	    system(me->remove_command);
	    FREE(me->remove_command);
	}
    }

    FREE(me);
}

/*	Structured Object Class
 *	-----------------------
 */
static const HTStreamClass HTFWriter =	/* As opposed to print etc */
{
    "FileWriter",
    HTFWriter_free,
    HTFWriter_abort,
    HTFWriter_put_character, HTFWriter_put_string,
    HTFWriter_write
};

/*	Subclass-specific Methods
 *	-------------------------
 */

HTStream *HTFWriter_new(FILE *fp)
{
    HTStream *me;

    if (!fp)
	return NULL;

    me = (HTStream *) malloc(sizeof(*me));
    if (me == NULL)
	outofmem(__FILE__, "HTML_new");
    me->isa = &HTFWriter;

    me->fp = fp;
    me->end_command = NULL;
    me->remove_command = NULL;
    me->announce = NO;

    return me;
}

/*	Make system command from template
 *	---------------------------------
 *
 *	See mailcap spec for description of template.
 */
/* @@@@ to be written.  sprintfs will do for now.  */

/*	Take action using a system command
 *	----------------------------------
 *
 *	originally from Ghostview handling by Marc Andreseen.
 *	Creates temporary file, writes to it, executes system command
 *	on end-document.  The suffix of the temp file can be given
 *	in case the application is fussy, or so that a generic opener can
 *	be used.
 */
HTStream *HTSaveAndExecute(HTPresentation *pres,
			   HTParentAnchor *anchor,	/* Not used */
			   HTStream *sink)	/* Not used */

#ifdef UNIX
#define REMOVE_COMMAND "/bin/rm -f %s\n"
#endif
#ifdef VMS
#define REMOVE_COMMAND "delete/noconfirm/nolog %s.."
#endif

#ifdef REMOVE_COMMAND
{
    char *fnam;
    const char *suffix;

    HTStream *me;

    if (HTClientHost) {
	HTAlert(CANNOT_SAVE_REMOTE);
	return HTBlackHole();
    }

    me = (HTStream *) malloc(sizeof(*me));
    if (me == NULL)
	outofmem(__FILE__, "Save and execute");
    me->isa = &HTFWriter;

    /* Save the file under a suitably suffixed name */

    suffix = HTFileSuffix(pres->rep, anchor->content_encoding);

    fnam = (char *) malloc(L_tmpnam + 16 + strlen(suffix));
    if (fnam == NULL)
	outofmem(__FILE__, "HTSaveAndExecute");
    tmpnam(fnam);
    strcat(fnam, suffix);

    me->fp = fopen(fnam, BIN_W);
    if (!me->fp) {
	HTAlert(CANNOT_OPEN_TEMP);
	FREE(fnam);
	FREE(me);
	return NULL;
    }

/*	Make command to process file
*/
    me->end_command = 0;
    HTSprintf0(&(me->end_command), pres->command, fnam, fnam, fnam);

    me->remove_command = NULL;	/* If needed, put into end_command */
#ifdef NOPE
/*	Make command to delete file
*/
    me->remove_command = 0;
    HTSprintf0(&(me->remove_command), REMOVE_COMMAND, fnam);
#endif

    me->announce = NO;
    FREE(fnam);
    return me;
}

#else				/* can do remove */
{
    return NULL;
}
#endif

/*	Save Locally
 *	------------
 *
 *  Bugs:
 *	GUI Apps should open local Save panel here really.
 *
 */
HTStream *HTSaveLocally(HTPresentation *pres,
			HTParentAnchor *anchor,		/* Not used */
			HTStream *sink)		/* Not used */

{
    char *fnam;
    char *answer;
    const char *suffix;

    HTStream *me;

    if (HTClientHost) {
	HTAlert(CANNOT_SAVE_REMOTE);
	return HTBlackHole();
    }

    me = (HTStream *) malloc(sizeof(*me));
    if (me == NULL)
	outofmem(__FILE__, "SaveLocally");
    me->isa = &HTFWriter;
    me->end_command = NULL;
    me->remove_command = NULL;	/* If needed, put into end_command */
    me->announce = YES;

    /* Save the file under a suitably suffixed name */

    suffix = HTFileSuffix(pres->rep, anchor->content_encoding);

    fnam = (char *) malloc(L_tmpnam + 16 + strlen(suffix));
    if (fnam == NULL)
	outofmem(__FILE__, "HTSaveLocally");
    tmpnam(fnam);
    strcat(fnam, suffix);

    /*  Save Panel */
    answer = HTPrompt(GIVE_FILENAME, fnam);

    FREE(fnam);

    me->fp = fopen(answer, BIN_W);
    if (!me->fp) {
	HTAlert(CANNOT_OPEN_OUTPUT);
	FREE(answer);
	FREE(me);
	return NULL;
    }

    FREE(answer);
    return me;
}

/*	Format Converter using system command
 *	-------------------------------------
 */
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d2 8
a9 8
**		===========
**
**	This version of the stream object just writes to a C file.
**	The file is assumed open and left open.
**
**	Bugs:
**		strings written must be less than buffer size.
*/
d23 2
a24 2
**		------------
*/
d27 1
a27 1
	CONST HTStreamClass *	isa;
d29 4
a32 4
	FILE *			fp;
	char *			end_command;
	char *			remove_command;
	BOOL			announce;
a34 1

d36 22
a57 18
**
**		B L A C K    H O L E    C L A S S
**
**	There is only one black hole instance shared by anyone
**	who wanst a black hole.  These black holes don't radiate,
**	they just absorb data.
*/
PRIVATE void HTBlackHole_put_character ARGS2(HTStream *, me, char, c)
{}
PRIVATE void HTBlackHole_put_string ARGS2(HTStream *, me, CONST char*, s)
{}
PRIVATE void HTBlackHole_write ARGS3(HTStream *, me, CONST char*, s, int, l)
{}
PRIVATE void HTBlackHole_free ARGS1(HTStream *, me)
{}
PRIVATE void HTBlackHole_abort ARGS2(HTStream *, me, HTError, e)
{}

d60 9
a68 9
**	-----------------
*/
PRIVATE CONST HTStreamClass HTBlackHoleClass =
{
	"BlackHole",
	HTBlackHole_free,
	HTBlackHole_abort,
	HTBlackHole_put_character,	HTBlackHole_put_string,
	HTBlackHole_write
d71 1
a71 1
PRIVATE HTStream HTBlackHoleInstance =
d73 5
a77 5
	&HTBlackHoleClass,
	NULL,
	NULL,
	NULL,
	NO
d82 1
a82 1
PUBLIC HTStream * HTBlackHole NOARGS
a86 1

d88 5
a92 5
**
**		F I L E     A C T I O N 	R O U T I N E S
**  Bug:
**	All errors are ignored.
*/
d95 2
a96 2
**	------------------
*/
d98 1
a98 1
PRIVATE void HTFWriter_put_character ARGS2(HTStream *, me, char, c)
a102 2


d104 5
a108 5
**	---------------
**
**	Strings must be smaller than this buffer size.
*/
PRIVATE void HTFWriter_put_string ARGS2(HTStream *, me, CONST char*, s)
a112 1

d114 3
a116 3
**	------------
*/
PRIVATE void HTFWriter_write ARGS3(HTStream *, me, CONST char*, s, int, l)
a120 3



d122 7
a128 7
**	-------------------
**
**	Note that the SGML parsing context is freed, but the created
**	object is not,
**	as it takes on an existence of its own unless explicitly freed.
*/
PRIVATE void HTFWriter_free ARGS1(HTStream *, me)
d131 1
a131 1
    if (me->end_command) {		/* Temp file */
d147 1
a147 1
PRIVATE void HTFWriter_abort ARGS2(HTStream *, me, HTError, e)
d150 1
a150 1
    if (me->end_command) {		/* Temp file */
a161 2


d163 9
a171 9
**	-----------------------
*/
PRIVATE CONST HTStreamClass HTFWriter = /* As opposed to print etc */
{
	"FileWriter",
	HTFWriter_free,
	HTFWriter_abort,
	HTFWriter_put_character,	HTFWriter_put_string,
	HTFWriter_write
a173 1

d175 2
a176 2
**	-------------------------
*/
d178 1
a178 1
PUBLIC HTStream* HTFWriter_new ARGS1(FILE *, fp)
d180 1
a180 1
    HTStream* me;
d182 2
a183 1
    if (!fp) return NULL;
d185 3
a187 2
    me = (HTStream*)malloc(sizeof(*me));
    if (me == NULL) outofmem(__FILE__, "HTML_new");
d199 4
a202 4
**	---------------------------------
**
**	See mailcap spec for description of template.
*/
a204 2


d206 11
a216 12
**	----------------------------------
**
**	originally from Ghostview handling by Marc Andreseen.
**	Creates temporary file, writes to it, executes system command
**	on end-document.  The suffix of the temp file can be given
**	in case the application is fussy, or so that a generic opener can
**	be used.
*/
PUBLIC HTStream* HTSaveAndExecute ARGS3(
	HTPresentation *,	pres,
	HTParentAnchor *,	anchor,	/* Not used */
	HTStream *,		sink)	/* Not used */
d228 1
a228 1
    CONST char * suffix;
d230 1
a230 1
    HTStream* me;
d237 3
a239 2
    me = (HTStream*)malloc(sizeof(*me));
    if (me == NULL) outofmem(__FILE__, "Save and execute");
d246 1
a246 1
    fnam = (char *)malloc (L_tmpnam + 16 + strlen(suffix));
d249 1
a249 1
    tmpnam (fnam);
d252 1
a252 1
    me->fp = fopen (fnam, BIN_W);
d278 4
a281 2
#else	/* can do remove */
{ return NULL; }
a283 1

d285 9
a293 10
**	------------
**
**  Bugs:
**	GUI Apps should open local Save panel here really.
**
*/
PUBLIC HTStream* HTSaveLocally ARGS3(
	HTPresentation *,	pres,
	HTParentAnchor *,	anchor,	/* Not used */
	HTStream *,		sink)	/* Not used */
d298 1
a298 1
    CONST char * suffix;
d300 1
a300 1
    HTStream* me;
d307 3
a309 2
    me = (HTStream*)malloc(sizeof(*me));
    if (me == NULL) outofmem(__FILE__, "SaveLocally");
d319 1
a319 1
    fnam = (char *)malloc (L_tmpnam + 16 + strlen(suffix));
d322 1
a322 1
    tmpnam (fnam);
d325 1
a325 1
    /*	Save Panel */
d330 1
a330 1
    me->fp = fopen (answer, BIN_W);
a341 2


d343 2
a344 2
**	-------------------------------------
*/
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d30 2
a31 2
	char * 			end_command;
	char * 			remove_command;
d64 1
a64 1
	HTBlackHole_put_character, 	HTBlackHole_put_string,
d136 1
a136 1
        _HTProgress(me->end_command);	/* Tell user what's happening */
d176 1
a176 1
	HTFWriter_put_character, 	HTFWriter_put_string,
d241 1
a241 1
        HTAlert(CANNOT_SAVE_REMOTE);
d262 1
a262 1
        FREE(fnam);
d310 1
a310 1
        HTAlert(CANNOT_SAVE_REMOTE);
d339 1
a339 1
        FREE(answer);
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d155 1
a155 1
	CTRACE(tfp, "HTFWriter: Aborting: file not executed.\n");
d226 1
a226 1
#ifdef unix
d257 1
a257 1
    if (suffix) strcat(fnam, suffix);
d259 1
a259 1
    me->fp = fopen (fnam, "w");
d329 1
a329 1
    if (suffix) strcat(fnam, suffix);
d336 1
a336 1
    me->fp = fopen (answer, "w");
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
#include "HTUtils.h"
d13 1
a13 1
#include "HTFWriter.h"
d15 3
a17 3
#include "HTFormat.h"
#include "HTAlert.h"
#include "HTFile.h"
d19 2
a20 3
#include "LYLeaks.h"

#define FREE(x) if (x) {free(x); x = NULL;}
d28 1
a28 1
	
d60 1
a60 1
{		
d66 1
a66 1
}; 
d119 1
a119 1
    fwrite(s, 1, l, me->fp); 
d155 1
a155 2
	if (TRACE) fprintf(stderr,
		"HTFWriter: Aborting: file not executed.\n");
d172 1
a172 1
{		
d178 1
a178 1
}; 
d188 1
a188 1
    
d193 1
a193 1
    me->isa = &HTFWriter;       
d237 1
a237 1
    
d239 1
a239 1
    
d241 1
a241 1
        HTAlert("Can't save data to file -- please run WWW locally");
d244 1
a244 1
    
d247 2
a248 2
    me->isa = &HTFWriter;  
    
d250 2
a251 2
    
    suffix = HTFileSuffix(pres->rep);
d254 2
d258 1
a258 1
    
d261 1
a261 1
	HTAlert("Can't open temporary file!");
d269 2
a270 6
    me->end_command = (char *)malloc (
    			(strlen (pres->command) + 10+ 3*strlen(fnam))
    			 * sizeof (char));
    if (me == NULL) outofmem(__FILE__, "SaveAndExecute");
    
    sprintf (me->end_command, pres->command, fnam, fnam, fnam);
d275 3
a277 7
*/ 
    me->remove_command = (char *)malloc (
    			(strlen (REMOVE_COMMAND) + 10+ strlen(fnam))
    			 * sizeof (char));
    if (me == NULL) outofmem(__FILE__, "SaveAndExecute");
    
    sprintf (me->remove_command, REMOVE_COMMAND, fnam);
d306 1
a306 1
    
d308 1
a308 1
    
d310 1
a310 1
        HTAlert("Can't save data to file -- please run WWW locally");
d313 1
a313 1
    
d316 1
a316 1
    me->isa = &HTFWriter;  
d320 1
a320 1
    
d322 2
a323 2
    
    suffix = HTFileSuffix(pres->rep);
d326 2
d330 1
a330 1
    
d332 2
a333 2
    answer = HTPrompt("Give name of file to save in", fnam);
    
d335 1
a335 1
    
d338 1
a338 1
	HTAlert("Can't open local file to write into.");
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
