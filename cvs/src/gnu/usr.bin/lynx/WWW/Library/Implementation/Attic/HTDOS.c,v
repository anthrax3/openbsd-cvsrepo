head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.38;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.42;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.36;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.46;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.48;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.48;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HTDOS.c,v 1.40 2013/11/28 11:11:05 tom Exp $
 *							DOS specific routines
 */

#include <HTUtils.h>
#include <LYUtils.h>
#include <HTDOS.h>
#include <LYStrings.h>

#include <LYLeaks.h>

#ifdef _WINDOWS
#include <LYGlobalDefs.h>
#include <HTAlert.h>
#endif

/*
 * Make a copy of the source argument in the result, allowing some extra
 * space so we can append directly onto the result without reallocating.
 */
static char *copy_plus(char **result, const char *source)
{
    int length = (int) strlen(source);
    int extra = 10;
    int n;

    for (n = 0; n < length; ++n) {
	if (source[n] == ' ')
	    ++extra;
    }

    HTSprintf0(result, "%-*s", length + extra, source);
    (*result)[length] = 0;
    return (*result);
}

/* PUBLIC							HTDOS_wwwName()
 *		CONVERTS DOS Name into WWW Name
 * ON ENTRY:
 *	dosname		DOS file specification (NO NODE)
 *
 * ON EXIT:
 *	returns		WWW file specification
 *
 */
const char *HTDOS_wwwName(const char *dosname)
{
    static char *wwwname = NULL;
    char *cp_url = copy_plus(&wwwname, dosname);
    int wwwname_len;
    char ch;

    while ((ch = *dosname) != '\0') {
	switch (ch) {
	case '\\':
	    /* convert dos backslash to unix-style */
	    *cp_url++ = '/';
	    break;
	case ' ':
	    *cp_url++ = '%';
	    *cp_url++ = '2';
	    *cp_url++ = '0';
	    break;
	default:
	    *cp_url++ = ch;
	    break;
	}
	dosname++;
    }
    *cp_url = '\0';

    wwwname_len = (int) strlen(wwwname);
    if (wwwname_len > 1)
	cp_url--;		/* point last char */

    if (wwwname_len > 3 && *cp_url == '/') {
	cp_url++;
	*cp_url = '\0';
    }
    return (wwwname);
}

/*
 * Convert slashes from Unix to DOS
 */
char *HTDOS_slashes(char *path)
{
    char *s;

    for (s = path; *s != '\0'; ++s) {
	if (*s == '/') {
	    *s = '\\';
	}
    }
    return path;
}

/* PUBLIC							HTDOS_name()
 *		CONVERTS WWW name into a DOS name
 * ON ENTRY:
 *	wwwname		WWW file name
 *
 * ON EXIT:
 *	returns		DOS file specification
 */
char *HTDOS_name(const char *wwwname)
{
    static char *result = NULL;
    int joe;

#if defined(SH_EX)		/* 2000/03/07 (Tue) 18:32:42 */
    if (unsafe_filename(wwwname)) {
	HTUserMsg2("unsafe filename : %s", wwwname);
	copy_plus(&result, "BAD_LOCAL_FILE_NAME");
    } else {
	copy_plus(&result, wwwname);
    }
#else
    copy_plus(&result, wwwname);
#endif
#ifdef __DJGPP__
    if (result[0] == '/'
	&& result[1] == 'd'
	&& result[2] == 'e'
	&& result[3] == 'v'
	&& result[4] == '/'
	&& isalpha(result[5])) {
	return (result);
    }
#endif /* __DJGPP__ */

    (void) HTDOS_slashes(result);

    /* pesky leading slash, rudiment from file://localhost/  */
    /* the rest of path may be with or without drive letter  */
    if ((result[1] != '\\') && (result[0] == '\\')) {
	for (joe = 0; (result[joe] = result[joe + 1]) != 0; joe++) ;
    }
    /* convert '|' after the drive letter to ':' */
    if (isalpha(UCH(result[0])) && result[1] == '|') {
	result[1] = ':';
    }
#ifdef _WINDOWS			/* 1998/04/02 (Thu) 08:59:48 */
    if (LYLastPathSep(result) != NULL
	&& !LYIsDosDrive(result)) {
	char temp_buff[LY_MAXPATH];

	sprintf(temp_buff, "%.3s\\%.*s", windows_drive,
		(int) (sizeof(temp_buff) - 5), result);
	StrAllocCopy(result, temp_buff);
    }
#endif
    /*
     * If we have only a device, add a trailing slash.  Otherwise it just
     * refers to the current directory on the given device.
     */
    if (LYLastPathSep(result) == NULL
	&& LYIsDosDrive(result))
	LYAddPathSep0(result);

    CTRACE((tfp, "HTDOS_name changed `%s' to `%s'\n", wwwname, result));
    return (result);
}

#ifdef WIN_EX
char *HTDOS_short_name(const char *path)
{
    static char sbuf[LY_MAXPATH];
    char *ret;
    DWORD r;

    if (StrChr(path, '/'))
	path = HTDOS_name(path);
    r = GetShortPathName(path, sbuf, sizeof sbuf);
    if (r >= sizeof(sbuf) || r == 0) {
	ret = LYStrNCpy(sbuf, path, sizeof(sbuf));
    } else {
	ret = sbuf;
    }
    return ret;
}
#endif

#if defined(DJGPP)
/*
 * Poll tcp/ip lib and yield to DPMI-host while nothing in
 * keyboard buffer (head = tail) (simpler than kbhit).
 * This is required to be able to finish off dead sockets,
 * answer pings etc.
 */
#include <pc.h>
#include <dpmi.h>
#include <libc/farptrgs.h>
#include <go32.h>

void djgpp_idle_loop(void)
{
    while (_farpeekw(_dos_ds, 0x41a) == _farpeekw(_dos_ds, 0x41c)) {
	tcp_tick(NULL);
	__dpmi_yield();
#if defined(USE_SLANG)
	if (SLang_input_pending(1))
	    break;
#endif
    }
}

/* PUBLIC       getxkey()
 *              Replaces libc's getxkey() with polling of tcp/ip
 *              library (WatTcp or Watt-32). *
 * ON EXIT:
 *      returns extended keypress.
 */

/* Copyright (C) 1995 DJ Delorie, see COPYING.DJ for details */

int getxkey(void)
{
#if defined(DJGPP_KEYHANDLER)
    __dpmi_regs r;

    djgpp_idle_loop();

    r.h.ah = 0x10;
    __dpmi_int(0x16, &r);

    if (r.h.al == 0x00)
	return 0x0100 | r.h.ah;
    if (r.h.al == 0xe0)
	return 0x0200 | r.h.ah;
    return r.h.al;

#elif defined(USE_SLANG)
    djgpp_idle_loop();
    return SLkp_getkey();
#else
    /* PDcurses uses myGetChar() in LYString.c */
#endif
}
#endif /* DJGPP */
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: HTDOS.c,v 1.36 2009/01/03 01:58:39 tom Exp $
d15 1
d107 1
a107 1
char *HTDOS_name(char *wwwname)
d112 8
d121 1
d140 4
d167 1
a167 1
char *HTDOS_short_name(char *path)
d173 1
a173 1
    if (strchr(path, '/'))
d177 1
a177 1
	ret = LYstrncpy(sbuf, path, sizeof(sbuf));
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
a3 2
/*	       DOS specific routines

d23 8
a30 1
    int length = strlen(source);
d32 1
a32 1
    HTSprintf0(result, "%-*s", length + 10, source);
a50 2

#ifdef SH_EX
a70 5
#else
    for (; *cp_url != '\0'; cp_url++)
	if (*cp_url == '\\')
	    *cp_url = '/';	/* convert dos backslash to unix-style */
#endif
d72 1
a72 1
    wwwname_len = strlen(wwwname);
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d12 4
d20 1
a20 1
PRIVATE char * copy_plus ARGS2(char **, result, CONST char *, source)
d23 2
a24 1
    HTSprintf0(result, "%-*s", length+10, source);
d30 9
a38 9
**		CONVERTS DOS Name into WWW Name
** ON ENTRY:
**	dosname		DOS file specification (NO NODE)
**
** ON EXIT:
**	returns		WWW file specification
**
*/
char * HTDOS_wwwName ARGS1(CONST char *, dosname)
d50 1
a50 1
	/* convert dos backslash to unix-style */
d58 1
a58 1
      default:
d61 2
a62 2
      }
      dosname++;
d66 3
a68 3
    for ( ; *cp_url != '\0' ; cp_url++)
	if(*cp_url == '\\')
	    *cp_url = '/';   /* convert dos backslash to unix-style */
d73 1
a73 1
	cp_url--;	/* point last char */
d79 1
a79 1
    return(wwwname);
a81 1

d85 1
a85 1
char * HTDOS_slashes ARGS1(char *, path)
d89 2
a90 2
    for (s = path; *s != '\0'; ++s)	{
	if (*s == '/')	{
d98 9
a106 13
**		CONVERTS WWW name into a DOS name
** ON ENTRY:
**	wwwname		WWW file name
**
** ON EXIT:
**	returns		DOS file specification
*/
char * HTDOS_name ARGS1(char *, wwwname)
{
#ifdef _WINDOWS	/* 1998/04/02 (Thu) 08:47:20 */
    extern char windows_drive[];
    char temp_buff[LY_MAXPATH];
#endif
d113 6
a118 6
     && result[1] == 'd'
     && result[2] == 'e'
     && result[3] == 'v'
     && result[4] == '/'
     && isalpha(result[5])) {
	return(result);
d126 2
a127 3
    if((result[1] != '\\') && (result[0]  == '\\')) {
	for (joe = 0; (result[joe] = result[joe+1]) != 0; joe++)
	    ;
d129 4
a133 3
#ifdef _WINDOWS	/* 1998/04/02 (Thu) 08:59:48 */
    if (LYLastPathSep(result) != NULL
     && !LYIsDosDrive(result)) {
d135 1
a135 1
		(int)(sizeof(temp_buff) - 5), result);
d144 1
a144 1
     && LYIsDosDrive(result))
d152 1
a152 1
PUBLIC char *HTDOS_short_name(char *path)
d170 7
a176 11
#if defined(DJGPP) && defined(DJGPP_KEYHANDLER)
/* PUBLIC       getxkey()
**              Replaces libc's getxkey() with polling of tcp/ip
**              library (WatTcp or Watt-32). This is required to
**              be able to finish off dead sockets, answer pings etc.
**
** ON EXIT:
**      returns extended keypress.
*/

/* Copyright (C) 1995 DJ Delorie, see COPYING.DJ for details */
d182 1
a182 1
int getxkey (void)
d184 22
d208 1
a208 8
    /* poll tcp/ip lib and yield to DPMI-host while nothing in
     * keyboard buffer (head = tail) (simpler than kbhit).
     */
    while (_farpeekw(_dos_ds, 0x41a) == _farpeekw(_dos_ds, 0x41c))
    {
	tcp_tick (NULL);
	__dpmi_yield();
    }
d218 7
d226 1
a226 2
#endif /* DJGPP && DJGPP_KEYHANDLER */

@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d6 1
d8 1
d10 1
a10 3
#ifdef WIN_EX
#include <LYGlobalDefs.h>
#endif
d27 1
a27 1
**	dosname 	DOS file specification (NO NODE)
d30 1
a30 1
**	returns 	WWW file specification
d70 2
a71 1
    if (wwwname_len > 3 && *cp_url == '/')
a72 5

#ifdef NOTUSED
    if(*cp_url == ':') {
	cp_url++;
	*cp_url = '/';	/* terminate drive letter to survive */
a73 2
#endif

d78 15
d96 1
a96 1
**	wwwname 	WWW file name
d99 1
a99 1
**	returns 	DOS file specification
d111 10
d122 1
a122 5
    for (joe = 0; result[joe] != '\0'; joe++)	{
	if (result[joe] == '/')	{
	    result[joe] = '\\';	/* convert slashes to dos-style */
	}
    }
d132 2
a133 2
    if (strchr(result, '\\') != NULL
     && strchr(result, ':') == NULL) {
a136 6
    } else {
	char *p = strchr(result, ':');
	if (p && (strcmp(p, ":\\") == 0)) {
	    p[2] = '.';
	    p[3] = '\0';
	}
d143 3
a145 3
    if (strchr(result, '\\') == 0
     && result[1] == ':')
	StrAllocCat(result, "\\");
d150 19
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d8 4
d16 1
a16 1
PRIVATE char * copy_plus ARGS2(char **, result, char *, source)
d33 1
a33 1
char * HTDOS_wwwName ARGS1(char *, dosname)
d35 1
a35 1
    static char *wwwname;
d37 4
d42 19
d64 5
d70 1
a70 1
    if(strlen(wwwname) > 3 && *cp_url == '/')
d94 5
a98 2
    static char *cp_url;
    char *result;
d101 1
a101 1
    copy_plus(&cp_url, wwwname);
d103 3
a105 3
    for (joe = 0; cp_url[joe] != '\0'; joe++)	{
	if (cp_url[joe] == '/')	{
	    cp_url[joe] = '\\';	/* convert slashes to dos-style */
d111 11
a121 2
    if((cp_url[1] == '\\') || (cp_url[0]  != '\\')) {
	result = cp_url;
d123 5
a127 1
	result = cp_url+1;
d129 8
d138 1
a138 1
    CTRACE(tfp, "HTDOS_name changed `%s' to `%s'\n", wwwname, result);
d141 41
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
#include <mem.h>
#include <dos.h>
d8 11
d29 1
a29 1
char * HTDOS_wwwName (char *dosname)
d31 2
a32 2
	static char wwwname[1024];
	char *cp_url = wwwname;
d34 13
a46 4
	strcpy(wwwname,dosname);

	for ( ; *cp_url != '\0' ; cp_url++)
	  if(*cp_url == '\\') *cp_url = '/';   /* convert dos backslash to unix-style */
d48 1
a48 15
	if(strlen(wwwname) > 3 && *cp_url == '/')
		*cp_url = '\0';

	if(*cp_url == ':')
	{
		cp_url++;
		*cp_url = '/';
	}

/*
	if((strlen(wwwname)>2)&&(wwwname[1]==':')) wwwname[1]='|';
	printf("\n\nwww: %s\n\ndos: %s\n\n",wwwname,dosname);
	sleep(5);
*/
	return(wwwname);
a58 2
**
** Bug(?):	Returns pointer to input string, which is modified
d60 1
a60 1
char * HTDOS_name(char *wwwname)
d62 9
a70 10
	static char cp_url[1024];
	int joe;

	memset(cp_url, 0, 1023);
	sprintf(cp_url, "%s",wwwname);

	for(joe = 0; cp_url[joe] != '\0'; joe++)	{
		if(cp_url[joe] == '/')	{
			cp_url[joe] = '\\';
		}
d72 1
d74 7
a80 4
/*	if(strlen(cp_url) < 4) cp_url[] = ':';
	if(strlen(cp_url) == 3) cp_url[3] = '\\';

	if(strlen(cp_url) == 4) cp_url[4] = '.'; */
d82 2
a83 19
	if((strlen(cp_url) > 2) && (cp_url[1] == '|'))
		cp_url[1] = ':';

	if((cp_url[1] == '\\') || (cp_url[0]  != '\\'))
	{
#if 0
		printf("\n\n%s = i%\n\n",cp_url,strlen(cp_url));
		sleep(5);
#endif
		strcpy(wwwname, cp_url);
		return(wwwname); /* return(cp_url); */
	} else {
#if 0
		printf("\n\n%s = %i\n\n",cp_url+1,strlen(cp_url));
		sleep(5);
#endif
		strcpy(wwwname, cp_url+1);
		return(wwwname); /* return(cp_url+1);  */
	}
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
