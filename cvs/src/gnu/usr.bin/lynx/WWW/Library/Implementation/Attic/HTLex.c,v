head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.4;
commitid	EcR8E7r0stjLUV4p;

1.4
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.36;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.47;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.45;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.45;	author maja;	state Exp;
branches;
next	;


desc
@@


1.5
log
@delinked from tree, now it goes to the bit bucket
@
text
@
/* MODULE							HTLex.c
 *		LEXICAL ANALYSOR
 *
 * AUTHORS:
 *	AL	Ari Luotonen	luotonen@@dxcern.cern.ch
 *
 * HISTORY:
 *
 *
 * BUGS:
 *
 *
 */

#include <HTUtils.h>

#include <HTLex.h>		/* Implemented here */

#include <LYLeaks.h>

/*
 * Global variables
 */
char HTlex_buffer[40];		/* Read lexical string          */
int HTlex_line = 1;		/* Line number in source file   */

/*
 * Module-wide variables
 */
static int lex_cnt;
static BOOL lex_template;
static LexItem lex_pushed_back = LEX_NONE;
static FILE *cache = NULL;

void unlex(LexItem lex_item)
{
    lex_pushed_back = lex_item;
}

LexItem lex(FILE *fp)
{
    int ch = 0;

    if (fp != cache) {		/* This cache doesn't work ok because the system  */
	cache = fp;		/* often assign same FILE structure the next open */
	HTlex_line = 1;		/* file.  So, if there are syntax errors in setup *
				   files it may confuse things later on.      */
    }
    if (lex_pushed_back != LEX_NONE) {
	LexItem ret = lex_pushed_back;

	lex_pushed_back = LEX_NONE;
	return ret;
    }

    lex_cnt = 0;
    lex_template = NO;

    for (;;) {
	switch (ch = getc(fp)) {
	case EOF:
	case ' ':
	case '\t':
	case '\r':
	case '\n':
	case ':':
	case ',':
	case '(':
	case ')':
	case '@@':
	    if (lex_cnt > 0) {
		if (ch != EOF)
		    ungetc(ch, fp);
		if (lex_template)
		    return LEX_TMPL_STR;
		else
		    return LEX_ALPH_STR;
	    } else
		switch (ch) {
		case EOF:
		    return LEX_EOF;
		case '\n':
		    HTlex_line++;
		    return LEX_REC_SEP;
		case ':':
		    return LEX_FIELD_SEP;
		case ',':
		    return LEX_ITEM_SEP;
		case '(':
		    return LEX_OPEN_PAREN;
		case ')':
		    return LEX_CLOSE_PAREN;
		case '@@':
		    return LEX_AT_SIGN;
		default:	/* Leading white space ignored (SP,TAB,CR) */
		    break;
		}
	    break;
	default:
	    if (lex_cnt < (int) (sizeof(HTlex_buffer) - 1))
		HTlex_buffer[lex_cnt++] = (char) ch;
	    HTlex_buffer[lex_cnt] = '\0';
	    if ('*' == ch)
		lex_template = YES;
	}			/* switch ch */
    }				/* forever */
}

const char *lex_verbose(LexItem lex_item)
{
    static char msg[sizeof(HTlex_buffer) + 30];		/* @@@@@@@@@@@@@@@@ */

    switch (lex_item) {
    case LEX_NONE:		/* Internally used      */
	return "NO-LEX-ITEM";
    case LEX_EOF:		/* End of file          */
	return "end-of-file";
    case LEX_REC_SEP:		/* Record separator     */
	return "record separator (newline)";
    case LEX_FIELD_SEP:	/* Field separator      */
	return "field separator ':'";
    case LEX_ITEM_SEP:		/* List item separator  */
	return "item separator ','";
    case LEX_OPEN_PAREN:	/* Group start tag      */
	return "'('";
    case LEX_CLOSE_PAREN:	/* Group end tag        */
	return "')'";
    case LEX_AT_SIGN:		/* Address qualifier    */
	return "address qualifier '@@'";
    case LEX_ALPH_STR:		/* Alphanumeric string  */
	sprintf(msg, "alphanumeric string '%.*s'",
		(int) sizeof(HTlex_buffer), HTlex_buffer);
	return msg;
    case LEX_TMPL_STR:		/* Template string      */
	sprintf(msg, "template string '%.*s'",
		(int) sizeof(HTlex_buffer), HTlex_buffer);
	return msg;
    default:
	return "UNKNOWN-LEX-ITEM";
    }
}
@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d3 12
a14 12
**		LEXICAL ANALYSOR
**
** AUTHORS:
**	AL	Ari Luotonen	luotonen@@dxcern.cern.ch
**
** HISTORY:
**
**
** BUGS:
**
**
*/
d18 1
a18 1
#include <HTLex.h>	/* Implemented here */
d23 4
a26 5
** Global variables
*/
PUBLIC char HTlex_buffer[40];	/* Read lexical string		*/
PUBLIC int HTlex_line = 1;	/* Line number in source file	*/

d29 6
a34 7
** Module-wide variables
*/
PRIVATE int lex_cnt;
PRIVATE BOOL lex_template;
PRIVATE LexItem lex_pushed_back = LEX_NONE;
PRIVATE FILE *cache = NULL;

d36 1
a36 1
PUBLIC void unlex ARGS1(LexItem, lex_item)
d41 1
a41 2

PUBLIC LexItem lex ARGS1(FILE *, fp)
d45 5
a49 5
    if (fp != cache) {	/* This cache doesn't work ok because the system  */
	cache = fp;	/* often assign same FILE structure the next open */
	HTlex_line = 1;	/* file.  So, if there are syntax errors in setup */
    }			/* files it may confuse things later on.	  */

d52 1
d60 1
a60 1
    for(;;) {
d62 10
a71 10
	  case EOF:
	  case ' ':
	  case '\t':
	  case '\r':
	  case '\n':
	  case ':':
	  case ',':
	  case '(':
	  case ')':
	  case '@@':
d73 26
a98 15
		if (ch != EOF) ungetc(ch,fp);
		if (lex_template) return LEX_TMPL_STR;
		else		  return LEX_ALPH_STR;
	    }
	    else switch(ch) {
	      case EOF:		return LEX_EOF;
	      case '\n':
		HTlex_line++;	return LEX_REC_SEP;
	      case ':':		return LEX_FIELD_SEP;
	      case ',':		return LEX_ITEM_SEP;
	      case '(':		return LEX_OPEN_PAREN;
	      case ')':		return LEX_CLOSE_PAREN;
	      case '@@':		return LEX_AT_SIGN;
	      default:	;	/* Leading white space ignored (SP,TAB,CR) */
	    }
d100 3
a102 2
	  default:
	    HTlex_buffer[lex_cnt++] = (char) ch;
d104 4
a107 3
	    if ('*' == ch) lex_template = YES;
	} /* switch ch */
    } /* forever */
d110 1
a110 2

PUBLIC char *lex_verbose ARGS1(LexItem, lex_item)
d112 1
a112 1
    static char msg[100];	/* @@@@@@@@@@@@@@@@ */
d115 1
a115 1
      case LEX_NONE:		/* Internally used	*/
d117 1
a117 1
      case LEX_EOF:		/* End of file		*/
d119 1
a119 1
      case LEX_REC_SEP:		/* Record separator	*/
d121 1
a121 1
      case LEX_FIELD_SEP:	/* Field separator	*/
d123 1
a123 1
      case LEX_ITEM_SEP:	/* List item separator	*/
d125 1
a125 1
      case LEX_OPEN_PAREN:	/* Group start tag	*/
d127 1
a127 1
      case LEX_CLOSE_PAREN:	/* Group end tag	*/
d129 1
a129 1
      case LEX_AT_SIGN:		/* Address qualifier	*/
d131 3
a133 2
      case LEX_ALPH_STR:	/* Alphanumeric string	*/
	sprintf(msg, "alphanumeric string '%.70s'", HTlex_buffer);
d135 3
a137 2
      case LEX_TMPL_STR:	/* Template string	*/
	sprintf(msg, "template string '%.70s'", HTlex_buffer);
d139 1
a139 1
      default:
a142 1

@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d46 1
a46 1
    int ch;
d92 1
a92 1
	    HTlex_buffer[lex_cnt++] = ch;
d122 1
a122 1
	sprintf(msg, "alphanumeric string '%s'", HTlex_buffer);
d125 1
a125 1
	sprintf(msg, "template string '%s'", HTlex_buffer);
@


1.1
log
@Initial revision
@
text
@d16 1
a16 3
#include "HTUtils.h"
#include "HTAAUtil.h"
#include "HTLex.h"	/* Implemented here */
d18 3
a20 1
#include "LYLeaks.h"
d50 1
a50 1
	HTlex_line = 1;	/* file. So, if there are syntax errors in setup  */
d80 1
a80 1
	      case EOF:		return LEX_EOF;		break;
d82 6
a87 6
		HTlex_line++;	return LEX_REC_SEP;	break;
	      case ':':		return LEX_FIELD_SEP;	break;
	      case ',':		return LEX_ITEM_SEP;	break;
	      case '(':		return LEX_OPEN_PAREN;	break;
	      case ')':		return LEX_CLOSE_PAREN;	break;
	      case '@@':		return LEX_AT_SIGN;	break;
d102 1
a102 1
    static char msg[100];
a106 1
	break;
a108 1
	break;
a110 1
	break;
a112 1
	break;
a114 1
	break;
a116 1
	break;
a118 1
	break;
a120 1
	break;
a123 1
	break;
a126 1
	break;
a128 1
	break;
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
