head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.18
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.16
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.4;
commitid	EcR8E7r0stjLUV4p;

1.4
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.22.04.01.42;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.47;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.44;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.44;	author maja;	state Exp;
branches;
next	;


desc
@@


1.5
log
@delinked from tree, now it goes to the bit bucket
@
text
@
/*              List object
 *
 *      The list object is a generic container for storing collections
 *      of things in order.
 */
#ifndef HTLIST_H
#define HTLIST_H

#ifndef HTUTILS_H
#include <HTUtils.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif
    typedef struct _HTList HTList;

    struct _HTList {
	void *object;
	HTList *next;
    };

/*	Fast macro to traverse a list.  Call it first with copy of the list
 *	header.  It returns the first object and increments the passed list
 *	pointer.  Call it with the same variable until it returns NULL.
 */
#define HTList_nextObject(me) \
	((me) && ((me) = (me)->next) ? (me)->object : NULL)

/*	Macro to find object pointed to by the head (returns NULL
 *	if list is empty, OR if it doesn't exist - Yuk!)
 */
#define HTList_lastObject(me) \
	((me) && (me)->next ? (me)->next->object : NULL)

/*	Macro to check if a list is empty (or doesn't exist - Yuk!)
*/
#define HTList_isEmpty(me) ((me) ? ((me)->next == NULL) : YES)

/*	Create list.
*/
    extern HTList *HTList_new(void);

/*	Delete list.
*/
    extern void HTList_delete(HTList *me);

/*	Reverse a list.
*/
    extern HTList *HTList_reverse(HTList *start);

/*	Append two lists, making second list empty.
*/
    extern HTList *HTList_appendList(HTList *start,
				     HTList *tail);

/*      Add object to START of list (so it is pointed to by the head).
*/
    extern void HTList_addObject(HTList *me,
				 void *newObject);

/*      Append object to END of list (furthest from the head).
*/
    extern void HTList_appendObject(HTList *me,
				    void *newObject);

/*	Insert an object into the list at a specified position.
 *      If position is 0, this places the object at the head of the list
 *      and is equivalent to HTList_addObject().
 */
    extern void HTList_insertObjectAt(HTList *me,
				      void *newObject,
				      int pos);

/*	Remove specified object from list.
*/
    extern BOOL HTList_removeObject(HTList *me,
				    void *oldObject);

/*	Remove object at a given position in the list, where 0 is the
 *	object pointed to by the head (returns a pointer to the element
 *	(->object) for the object, and NULL if the list is empty, or
 *	if it doesn't exist - Yuk!).
 */
    extern void *HTList_removeObjectAt(HTList *me,
				       int position);

/*	Remove object from START of list (the Last one inserted
 *	via HTList_addObject(), and pointed to by the head).
 */
    extern void *HTList_removeLastObject(HTList *me);

/*	Remove object from END of list (the First one inserted
 *	via HTList_addObject(), and furthest from the head).
 */
    extern void *HTList_removeFirstObject(HTList *me);

/*	Determine total number of objects in the list,
 *	not counting the head.
 */
    extern int HTList_count(HTList *me);

/*	Determine position of an object in the list (a value of 0
 *	means it is pointed to by the head; returns -1 if not found).
 */
    extern int HTList_indexOf(HTList *me,
			      void *object);

/*	Return pointer to the object at a specified position in the list,
 *	where 0 is the object pointed to by the head (returns NULL if
 *	the list is empty, or if it doesn't exist - Yuk!).
 */
    extern void *HTList_objectAt(HTList *me,
				 int position);

/*      Link object to START of list (so it is pointed to by the head).
 *
 *      Unlike HTList_addObject(), it does not malloc memory for HTList entry,
 *	it use already allocated memory which should not be free'd by any
 *	list operations (optimization).
 */
    extern void HTList_linkObject(HTList *me,
				  void *newObject,
				  HTList *newNode);

/*	Unlink object from START of list (the Last one inserted
 *	via HTList_linkObject(), and pointed to by the head).
 *	It does not free memory.
 */
    extern void *HTList_unlinkLastObject(HTList *me);

/*	Unlink specified object from list.
 *	It does not free memory.
 */
    extern BOOL HTList_unlinkObject(HTList *me,
				    void *oldObject);

#ifdef __cplusplus
}
#endif
#endif				/* HTLIST_H */
@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@@


1.3
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d3 4
a6 4
**
**      The list object is a generic container for storing collections
**      of things in order.
*/
d14 4
a17 6
typedef struct _HTList HTList;

struct _HTList {
	void *		object;
	HTList *	next;
};
d19 4
d25 3
a27 3
**	header.  It returns the first object and increments the passed list
**	pointer.  Call it with the same variable until it returns NULL.
*/
a30 1

d32 2
a33 2
**	if list is empty, OR if it doesn't exist - Yuk!)
*/
a36 1

a40 1

d43 1
a43 2
extern HTList * HTList_new NOPARAMS;

d47 1
a47 2
extern void HTList_delete PARAMS((
	HTList *	me));
d51 1
a51 2
extern HTList * HTList_reverse PARAMS((
	HTList *	start));
d55 2
a56 4
extern HTList * HTList_appendList PARAMS((
	HTList *	start,
	HTList *	tail));

d60 2
a61 4
extern void HTList_addObject PARAMS((
	HTList *	me,
	void *		newObject));

d65 2
a66 4
extern void HTList_appendObject PARAMS((
	HTList *	me,
	void *		newObject));

d69 6
a74 8
**      If position is 0, this places the object at the head of the list
**      and is equivalent to HTList_addObject().
*/
extern void HTList_insertObjectAt PARAMS((
	HTList *	me,
	void *		newObject,
	int		pos));

d78 2
a79 4
extern BOOL HTList_removeObject PARAMS((
	HTList *	me,
	void *		oldObject));

d82 6
a87 8
**	object pointed to by the head (returns a pointer to the element
**	(->object) for the object, and NULL if the list is empty, or
**	if it doesn't exist - Yuk!).
*/
extern void * HTList_removeObjectAt PARAMS((
	HTList *	me,
	int		position));

d90 3
a92 5
**	via HTList_addObject(), and pointed to by the head).
*/
extern void * HTList_removeLastObject PARAMS((
	HTList *	me));

d95 3
a97 5
**	via HTList_addObject(), and furthest from the head).
*/
extern void * HTList_removeFirstObject PARAMS((
	HTList *	me));

d100 3
a102 5
**	not counting the head.
*/
extern int HTList_count PARAMS((
	HTList *	me));

d105 4
a108 6
**	means it is pointed to by the head; returns -1 if not found).
*/
extern int HTList_indexOf PARAMS((
	HTList *	me,
	void *		object));

d111 5
a115 6
**	where 0 is the object pointed to by the head (returns NULL if
**	the list is empty, or if it doesn't exist - Yuk!).
*/
extern void * HTList_objectAt PARAMS((
	HTList *	me,
	int		position));
d123 3
a125 4
extern void HTList_linkObject PARAMS((
	HTList *	me,
	void *		newObject,
	HTList *	newNode));
d131 1
a131 2
extern void * HTList_unlinkLastObject PARAMS((
	HTList *	me));
d136 2
a137 3
extern BOOL HTList_unlinkObject PARAMS((
	HTList *	me,
	void *		oldObject));
d139 4
a142 1
#endif /* HTLIST_H */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d142 24
a167 1

@


1.1
log
@Initial revision
@
text
@d11 2
a12 2
#include "HTUtils.h"  /* for BOOL type and PARAMS and ARGS*/
#endif /* HTUTILS_H */
a20 13
#ifdef SHORT_NAMES
#define HTList_new                      HTLiNew
#define HTList_delete                   HTLiDele
#define HTList_addObject                HTLiAdOb
#define HTList_removeObject             HTLiReOb
#define HTList_removeObjectAt           HTLiReAt
#define HTList_removeLastObject         HTLiReLa
#define HTList_removeFirstObject        HTLiReFi
#define HTList_count                    HTLiCoun
#define HTList_indexOf                  HTLiInOf
#define HTList_objectAt                 HTLiObAt
#endif /* SHORT_NAMES */

d51 11
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
