head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.18
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.16
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.4;
commitid	EcR8E7r0stjLUV4p;

1.4
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.22.04.01.43;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.50;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.43;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.43;	author maja;	state Exp;
branches;
next	;


desc
@@


1.5
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*                                                             A parser for WAIS source files
                                 WAIS SOURCE FILE PARSER

   This converter returns a stream object into which a WAIS source file can be
   written.  The result is put via a structured stream into whatever format was
   required for the output stream.

   See also:  HTWAIS protocol interface module

 */
#ifndef HTWSRC_H
#define HTWSRC_H

#include <HTFormat.h>

#ifdef __cplusplus
extern "C" {
#endif
    extern char from_hex(char c);

    extern HTStream *HTWSRCConvert(HTPresentation *pres,
				   HTParentAnchor *anchor,
				   HTStream *sink);

/*

Escaping Strings

   HTDeSlash takes out the invlaid characters in a URL path ELEMENT by
   converting them into hex-escaped characters.  HTEnSlash does the reverse.

   Each returns a pointer to a newly allocated string which must eventually be
   freed by the caller.

 */
    extern char *HTDeSlash(const char *str);

    extern char *HTEnSlash(const char *str);

#ifdef __cplusplus
}
#endif
#endif				/* HTWSRC_H */
@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@@


1.3
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d4 3
a6 3
   This converter returns a stream object into which a WAIS source file can be written.
   The result is put via a structured stream into whatever format was required for the
   output stream.
d8 1
a8 1
   See also: HTWAIS protocol interface module
d16 8
a23 6
extern  char from_hex PARAMS((char c));

extern  HTStream* HTWSRCConvert PARAMS((
        HTPresentation *        pres,
        HTParentAnchor *        anchor,
        HTStream *              sink));
d29 2
a30 2
   HTDeSlash takes out the invlaid characters in a URL path ELEMENT by converting them
   into hex-escaped characters.  HTEnSlash does the reverse.
d32 2
a33 2
   Each returns a pointer to a newly allocated string which must eventually be freed by
   the caller.
d36 1
a36 1
extern char * HTDeSlash PARAMS((CONST char * str));
d38 1
a38 1
extern char * HTEnSlash PARAMS((CONST char * str));
d40 4
a43 1
#endif /* HTWSRC_H */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d38 1
a38 7
#endif

/*

                                                                                    Tim BL

    */
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
                                             
d7 1
a7 1
   
d9 1
a9 1
   
d14 1
a14 5
#ifndef HTUTILS_H
#include "HTUtils.h"
#endif /* HTUTILS_H */

#include "HTFormat.h"
d28 2
a29 2
   into hex-escaped characters. HTEnSlash does the reverse.
   
d32 1
a32 1
   
d43 1
a43 1
                                                                                          
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
