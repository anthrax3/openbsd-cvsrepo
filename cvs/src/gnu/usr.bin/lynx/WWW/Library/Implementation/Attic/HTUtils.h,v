head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.20
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.8;
commitid	EcR8E7r0stjLUV4p;

1.8
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.7;
commitid	lGGuvDWEniklWrQe;

1.7
date	2011.07.22.14.10.38;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.22.04.52.36;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.43;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.49;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.43;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.43;	author maja;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HTUtils.h,v 1.120 2014/01/19 15:18:01 tom Exp $
 *
 * Utility macros for the W3 code library
 * MACROS FOR GENERAL USE
 * 
 * See also:  the system dependent file "www_tcp.h", which is included here.
 */

#ifndef NO_LYNX_TRACE
#define DEBUG			/* Turns on trace; turn off for smaller binary */
#endif

#ifndef HTUTILS_H
#define HTUTILS_H

#ifdef HAVE_CONFIG_H
#include <lynx_cfg.h>		/* generated by autoconf 'configure' script */

/* see AC_FUNC_ALLOCA macro */
#ifdef __GNUC__
# define alloca __builtin_alloca
#else
# ifdef _MSC_VER
#  include <malloc.h>
#  define alloca _alloca
# else
#  if HAVE_ALLOCA_H
#   include <alloca.h>
#  else
#   ifdef _AIX
#pragma alloca
#   else
#    ifndef alloca		/* predefined by HP cc +Olibcalls */
char *alloca();

#    endif
#   endif
#  endif
# endif
#endif

#include <sys/types.h>
#include <stdio.h>

#else /* HAVE_CONFIG_H */

#ifdef DJGPP
#include <sys/config.h>		/* pseudo-autoconf values for DJGPP libc/headers */
#define HAVE_TRUNCATE 1
#define HAVE_ALLOCA 1
#include <limits.h>
#endif /* DJGPP */

#include <sys/types.h>
#include <stdio.h>

/* Explicit system-configure */
#ifdef VMS
#define NO_SIZECHANGE

#if defined(VAXC) && !defined(__DECC)
#define NO_UNISTD_H		/* DEC C has unistd.h, but not VAX C */
#endif

#define NO_KEYPAD
#define NO_UTMP

#undef NO_FILIO_H
#define NO_FILIO_H

#define NOUSERS
#define DISP_PARTIAL		/* experimental */
#endif

#if defined(VMS) || defined(_WINDOWS)
#define HAVE_STDLIB_H 1
#endif

/* Accommodate non-autoconf'd Makefile's (VMS, DJGPP, etc) */

#ifndef NO_ARPA_INET_H
#define HAVE_ARPA_INET_H 1
#endif

#ifndef NO_CBREAK
#define HAVE_CBREAK 1
#endif

#ifndef NO_CUSERID
#define HAVE_CUSERID 1
#endif

#ifndef NO_FILIO_H
#define HAVE_SYS_FILIO_H 1
#endif

#ifndef NO_GETCWD
#define HAVE_GETCWD 1
#endif

#ifndef USE_SLANG
#ifndef NO_KEYPAD
#define HAVE_KEYPAD 1
#endif
#ifndef NO_TTYTYPE
#define HAVE_TTYTYPE 1
#endif
#endif /* USE_SLANG */

#ifndef NO_PUTENV
#define HAVE_PUTENV 1
#endif

#ifndef NO_SIZECHANGE
#define HAVE_SIZECHANGE 1
#endif

#ifndef NO_UNISTD_H
#undef  HAVE_UNISTD_H
#define HAVE_UNISTD_H 1
#endif

#ifndef NO_UTMP
#define HAVE_UTMP 1
#endif

#endif /* HAVE_CONFIG_H */

#include <assert.h>

/* suppress inadvertant use of gettext in makeuctb when cross-compiling */
#ifdef DONT_USE_GETTEXT
#undef HAVE_GETTEXT
#undef HAVE_LIBGETTEXT_H
#undef HAVE_LIBINTL_H
#endif

#ifndef HAVE_ICONV
#undef EXP_JAPANESEUTF8_SUPPORT
#endif

#ifndef lynx_srand
#define lynx_srand srand
#endif

#ifndef lynx_rand
#define lynx_rand rand
#endif

#if '0' != 48
#define NOT_ASCII
#endif

#if '0' == 240
#define EBCDIC
#endif

#ifndef LY_MAXPATH
#define LY_MAXPATH 256
#endif

#ifndef GCC_NORETURN
#define GCC_NORETURN		/* nothing */
#endif

#ifndef GCC_UNUSED
#define GCC_UNUSED		/* nothing */
#endif

#if defined(__GNUC__) && defined(_FORTIFY_SOURCE)
#define USE_IGNORE_RC
extern int ignore_unused;

#define IGNORE_RC(func) ignore_unused = (int) func
#else
#define IGNORE_RC(func) (void) func
#endif /* gcc workarounds */

#if defined(__CYGWIN32__) && ! defined(__CYGWIN__)
#define __CYGWIN__ 1
#endif

#if defined(__CYGWIN__)		/* 1998/12/31 (Thu) 16:13:46 */
#ifdef USE_OPENSSL_INCL
#define NOCRYPT			/* workaround for openssl 1.0.1e bug */
#endif
#include <windows.h>		/* #include "windef.h" */
#define BOOLEAN_DEFINED
#undef HAVE_POPEN		/* FIXME: does this not work, or is it missing */
#undef small			/* see <w32api/rpcndr.h> */
#endif

#ifdef HAVE_ATOLL
#define LYatoll(n) atoll(n)
#else
extern off_t LYatoll(const char *value);
#endif

/* cygwin, mingw32, etc. */
#ifdef FILE_DOES_NOT_EXIST
#undef FILE_DOES_NOT_EXIST	/* see <w32api/winnt.h> */
#endif

/*
 * VS .NET 2003 includes winsock.h unconditionally from windows.h,
 * so we do not want to include windows.h if we want winsock2.h
 */
#if defined(_WINDOWS) && !defined(__CYGWIN__)

#ifndef __GNUC__
#pragma warning (disable : 4100)	/* unreferenced formal parameter */
#pragma warning (disable : 4127)	/* conditional expression is constant */
#pragma warning (disable : 4201)	/* nameless struct/union */
#pragma warning (disable : 4214)	/* bit field types other than int */
#pragma warning (disable : 4310)	/* cast truncates constant value */
#pragma warning (disable : 4514)	/* unreferenced inline function has been removed */
#pragma warning (disable : 4996)	/* This function or variable may be unsafe. ... */
#endif

#if defined(USE_WINSOCK2_H) && (_MSC_VER >= 1300) && (_MSC_VER < 1400)
#include <winsock2.h>		/* includes windows.h, in turn windef.h */
#else
#include <windows.h>		/* #include "windef.h" */
#endif

#define BOOLEAN_DEFINED

#if !_WIN_CC			/* 1999/09/29 (Wed) 22:00:53 */
#include <dos.h>
#endif

#if defined(DECL_SLEEP) && defined(HAVE_CONFIG_H)
#  undef sleep
#  if defined(__MINGW32__)
#    define sleep(n) Sleep((n)*100)
#  else
extern void sleep(unsigned __seconds);
#  endif
#elif !defined(__MINGW32__)
#  undef sleep
extern void sleep(unsigned __seconds);
#endif

#define popen _popen
#define pclose _pclose

#if defined(_MSC_VER) && (_MSC_VER > 0)
typedef unsigned short mode_t;
#endif

#endif /* _WINDOWS */

#if defined(USE_DEFAULT_COLORS) && !defined(HAVE_USE_DEFAULT_COLORS)
    /* if we don't have use_default_colors() */
#  undef USE_DEFAULT_COLORS
#endif

#ifndef USE_COLOR_STYLE
    /* it's useless for such setup */
#  define NO_EMPTY_HREFLESS_A
#endif

#if  defined(__EMX__) || defined(WIN_EX) || defined(HAVE_POPEN)
#  define CAN_CUT_AND_PASTE
#endif

#if defined(USE_SLANG) || (defined(USE_COLOR_STYLE) && defined(__EMX__))
#  define USE_BLINK
#endif

#if defined(DOSPATH) || defined(__EMX__)
#  define USE_DOS_DRIVES	/* we allow things like "c:" in paths */
#endif

#if defined(UNIX)
#  if (defined(__BEOS__) || defined(__CYGWIN__) || defined(__DJGPP__) || defined(__EMX__) || defined(__MINGW32__))
#    define SINGLE_USER_UNIX	/* well, at least they try */
#  else
#    define MULTI_USER_UNIX
#  endif
#endif

/*

  ERROR TYPE

   This is passed back when streams are aborted. It might be nice to have some structure
   of error messages, numbers, and recursive pointers to reasons.  Curently this is a
   placeholder for something more sophisticated.

 */
typedef void *HTError;		/* Unused at present -- best definition? */

/*

Standard C library for malloc() etc

 */
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS 0
#endif

#ifndef EXIT_FAILURE
#define EXIT_FAILURE 1
#endif

#ifdef __EMX__
#include <unistd.h>		/* should be re-include protected under EMX */
#define getcwd _getcwd2
#define chdir _chdir2
#endif

#ifdef vax
#ifdef unix
#define ultrix			/* Assume vax+unix=ultrix */
#endif /* unix */
#endif /* vax */

#ifndef VMS
#ifndef ultrix

#ifdef NeXT
#include <libc.h>		/* NeXT */
#endif /* NeXT */

#else /* ultrix: */

#include <malloc.h>
#include <memory.h>

#endif /* !ultrix */
#else /* VMS: */

#include <unixlib.h>
#if defined(VAXC) && !defined(__DECC)
#define malloc	VAXC$MALLOC_OPT
#define calloc	VAXC$CALLOC_OPT
#define free	VAXC$FREE_OPT
#define cfree	VAXC$CFREE_OPT
#define realloc	VAXC$REALLOC_OPT
#endif /* VAXC && !__DECC */

#endif /* !VMS */

#ifndef NULL
#define NULL ((void *)0)
#endif

#define DeConst(p)   (void *)(intptr_t)(p)

#define isEmpty(s)   ((s) == 0 || *(s) == 0)
#define non_empty(s) !isEmpty(s)

#define NonNull(s) (((s) != 0) ? s : "")
#define NONNULL(s) (((s) != 0) ? s : "(null)")

/* array/table size */
#define	TABLESIZE(v)	(sizeof(v)/sizeof(v[0]))

#define	typecalloc(cast)		(cast *)calloc((size_t)1, sizeof(cast))
#define	typecallocn(cast,ntypes)	(cast *)calloc((size_t)(ntypes),sizeof(cast))

#define typeRealloc(cast,ptr,ntypes)    (cast *)realloc(ptr, (size_t)(ntypes)*sizeof(cast))

#define typeMalloc(cast)                (cast *)malloc(sizeof(cast))
#define typeMallocn(cast,ntypes)        (cast *)malloc((size_t)(ntypes)*sizeof(cast))

/*

OFTEN USED INTEGER MACROS

  Min and Max functions

 */
#ifndef HTMIN
#define HTMIN(a,b) ((a) <= (b) ? (a) : (b))
#define HTMAX(a,b) ((a) >= (b) ? (a) : (b))
#endif
/*

Booleans

 */
/* Note: GOOD and BAD are already defined (differently) on RS6000 aix */
/* #define GOOD(status) ((status)38;1)   VMS style status: test bit 0         */
/* #define BAD(status)  (!GOOD(status))  Bit 0 set if OK, otherwise clear   */

#ifndef _WINDOWS
#ifndef BOOLEAN_DEFINED
typedef char BOOLEAN;		/* Logical value */

#ifndef CURSES
#ifndef TRUE
#define TRUE    (BOOLEAN)1
#define FALSE   (BOOLEAN)0
#endif
#endif /*  CURSES  */
#endif /*  BOOLEAN_DEFINED */
#define BOOLEAN_DEFINED
#endif /* _WINDOWS */

#if defined(_MSC_VER) && (_MSC_VER >= 1300)
/* it declares BOOL/BOOLEAN as BYTE/int */
#else
#ifndef BOOL
#define BOOL BOOLEAN
#endif
#endif

#ifndef YES
#define YES (BOOLEAN)1
#define NO (BOOLEAN)0
#endif

#define STRING1PTR const char *
#define STRING2PTR const char * const *

extern BOOL LYOutOfMemory;	/* Declared in LYexit.c - FM */

#define TCP_PORT 80		/* Allocated to http by Jon Postel/ISI 24-Jan-92 */
#define OLD_TCP_PORT 2784	/* Try the old one if no answer on 80 */
#define DNP_OBJ 80		/* This one doesn't look busy, but we must check */
			/* That one was for decnet */

/*      Inline Function WHITE: Is character c white space? */
/*      For speed, include all control characters */

#define WHITE(c) ((UCH(TOASCII(c))) <= 32)

/*     Inline Function LYIsASCII: Is character c a traditional ASCII
 *     character (i.e. <128) after converting from host character set.  */

#define LYIsASCII(c) (TOASCII(UCH(c)) < 128)

/*

Success (>=0) and failure (<0) codes

Some of the values are chosen to be HTTP-like, but status return values
are generally not the response status from any specific protocol.

 */

#define HT_PARSER_OTHER_CONTENT  701	/* tells SGML to change content model */
#define HT_PARSER_REOPEN_ELT     700	/* tells SGML parser to keep tag open */
#define HT_REDIRECTING           399
#define HT_PARTIAL_CONTENT       206	/* Partial Content */
#define HT_LOADED                200	/* Instead of a socket */

#define HT_OK                      0	/* Generic success */

#define HT_ERROR                  -1	/* Generic failure */
#define HT_CANNOT_TRANSLATE       -4
#define HT_BAD_EOF               -12	/* Premature EOF */
#define HT_NO_CONNECTION         -99	/* ERR no connection available - */
#define HT_NO_DATA              -204	/* OK but no data was loaded - */
					/* possibly other app started or forked */
#define HT_NO_ACCESS            -401	/* Access not available */
#define HT_FORBIDDEN            -403	/* Access forbidden */
#define HT_NOT_ACCEPTABLE       -406	/* Not Acceptable */
#define HT_H_ERRNO_VALID        -800	/* see h_errno for resolver error */
#define HT_INTERNAL             -900	/* Weird -- should never happen. */
#define HT_INTERRUPTED        -29998
#define HT_NOT_LOADED         -29999

#ifndef va_arg
#  include <stdarg.h>
#endif

#define LYva_start(ap,format) va_start(ap,format)

/*
 * GCC can be told that some functions are like printf (and do type-checking on
 * their parameters).
 */
#ifndef GCC_PRINTFLIKE
#if defined(GCC_PRINTF) && !defined(printf) && !defined(HAVE_LIBUTF8_H)
#define GCC_PRINTFLIKE(fmt,var) __attribute__((format(printf,fmt,var)))
#else
#define GCC_PRINTFLIKE(fmt,var)	/*nothing */
#endif
#endif

#include <HTString.h>		/* String utilities */

/*

Out Of Memory checking for malloc() return:

 */
#ifndef __FILE__
#define __FILE__ ""
#define __LINE__ ""
#endif

#include <LYexit.h>

/*
 * Upper- and Lowercase macros
 *
 * The problem here is that toupper(x) is not defined officially unless
 * isupper(x) is.  These macros are CERTAINLY needed on #if defined(pyr) ||
 * define(mips) or BDSI platforms.  For safefy, we make them mandatory.
 *
 * Note: Pyramid and Mips can't uppercase non-alpha.
 */
#include <ctype.h>
#include <string.h>

#ifndef TOLOWER

#ifdef USE_ASCII_CTYPES

#define TOLOWER(c) ascii_tolower(UCH(c))
#define TOUPPER(c) ascii_toupper(UCH(c))
#define ISUPPER(c) ascii_isupper(UCH(c))

#else

#define TOLOWER(c) (isupper(UCH(c)) ? tolower(UCH(c)) : UCH(c))
#define TOUPPER(c) (islower(UCH(c)) ? toupper(UCH(c)) : UCH(c))
#define ISUPPER(c) (isupper(UCH(c)))

#endif

#endif /* TOLOWER */

#define FREE(x)    {if (x != 0) {free((char *)x); x = NULL;}}

/*

The local equivalents of CR and LF

   We can check for these after net ascii text has been converted to the local
   representation.  Similarly, we include them in strings to be sent as net ascii after
   translation.

 */
#define LF   FROMASCII('\012')	/* ASCII line feed LOCAL EQUIVALENT */
#define CR   FROMASCII('\015')	/* Will be converted to ^M for transmission */

/*
 * Debug message control.
 */
#ifdef NO_LYNX_TRACE
#define WWW_TraceFlag   0
#define WWW_TraceMask   0
#define LYTraceLogFP    0
#else
extern BOOLEAN WWW_TraceFlag;
extern int WWW_TraceMask;
#endif

#define TRACE           (WWW_TraceFlag)
#define TRACE_bit(n)    (TRACE && (WWW_TraceMask & (1 << n)) != 0)
#define TRACE_SGML      (TRACE_bit(0))
#define TRACE_STYLE     (TRACE_bit(1))
#define TRACE_TRST      (TRACE_bit(2))
#define TRACE_CFG       (TRACE_bit(3))
#define TRACE_BSTRING   (TRACE_bit(4))
#define TRACE_COOKIES   (TRACE_bit(5))
#define TRACE_CHARSETS  (TRACE_bit(6))
#define TRACE_GRIDTEXT  (TRACE_bit(7))
#define TRACE_TIMING    (TRACE_bit(8))

/*
 * Get printing/scanning formats.
 */
#if defined(HAVE_INTTYPES_H)
#include <inttypes.h>
#endif

/*
 * Printing/scanning-formats for "off_t", as well as cast needed to fit.
 */
#if defined(HAVE_LONG_LONG) && defined(HAVE_INTTYPES_H) && defined(SIZEOF_OFF_T)
#if (SIZEOF_OFF_T == 8) && defined(PRId64)

#define PRI_off_t	PRId64
#define SCN_off_t	SCNd64
#define CAST_off_t(n)	(int64_t)(n)

#elif (SIZEOF_OFF_T == 4) && defined(PRId32)

#define PRI_off_t	PRId32
#define SCN_off_t	SCNd32

#if (SIZEOF_INT == 4)
#define CAST_off_t(n)	(int)(n)
#elif (SIZEOF_LONG == 4)
#define CAST_off_t(n)	(long)(n)
#else
#define CAST_off_t(n)	(int32_t)(n)
#endif

#endif
#endif

#ifndef PRI_off_t
#if defined(HAVE_LONG_LONG) && (SIZEOF_OFF_T > SIZEOF_LONG)
#define PRI_off_t	"lld"
#define SCN_off_t	"lld"
#define CAST_off_t(n)	(long long)(n)
#else
#define PRI_off_t	"ld"
#define SCN_off_t	"ld"
#define CAST_off_t(n)	(long)(n)
#endif
#endif

/*
 * Printing-format for "time_t", as well as cast needed to fit.
 */
#if defined(HAVE_LONG_LONG) && defined(HAVE_INTTYPES_H) && defined(SIZEOF_TIME_T)
#if (SIZEOF_TIME_T == 8) && defined(PRId64)

#define PRI_time_t	PRId64
#define SCN_time_t	SCNd64
#define CAST_time_t(n)	(int64_t)(n)

#elif (SIZEOF_TIME_T == 4) && defined(PRId32)

#define PRI_time_t	PRId32
#define SCN_time_t	SCNd32

#if (SIZEOF_INT == 4)
#define CAST_time_t(n)	(int)(n)
#elif (SIZEOF_LONG == 4)
#define CAST_time_t(n)	(long)(n)
#else
#define CAST_time_t(n)	(int32_t)(n)
#endif

#endif
#endif

#ifndef PRI_time_t
#if defined(HAVE_LONG_LONG) && (SIZEOF_TIME_T > SIZEOF_LONG)
#define PRI_time_t	"lld"
#define SCN_time_t	"lld"
#define CAST_time_t(n)	(long long)(n)
#else
#define PRI_time_t	"ld"
#define SCN_time_t	"ld"
#define CAST_time_t(n)	(long)(n)
#endif
#endif

/*
 * Printing-format for "UCode_t".
 */
#define PRI_UCode_t	"lX"

/*
 * Verbose-tracing.
 */
#if defined(USE_VERTRACE) && !defined(LY_TRACELINE)
#define LY_TRACELINE __LINE__
#endif

#if defined(LY_TRACELINE)
#define LY_SHOWWHERE fprintf( tfp, "%s: %d: ", __FILE__, LY_TRACELINE ),
#else
#define LY_SHOWWHERE		/* nothing */
#endif

#define CTRACE(p)         ((void)((TRACE) && ( LY_SHOWWHERE fprintf p )))
#define CTRACE2(m,p)      ((void)((m)     && ( LY_SHOWWHERE fprintf p )))
#define tfp TraceFP()
#define CTRACE_SLEEP(secs) if (TRACE && LYTraceLogFP == 0) sleep((unsigned)secs)
#define CTRACE_FLUSH(fp)   if (TRACE) fflush(fp)

#include <www_tcp.h>

/*
 * We force this include-ordering since socks.h contains redefinitions of
 * functions that probably are prototyped via other includes.  The socks.h
 * definitions have to be included everywhere, since they're making wrappers
 * for the stdio functions as well as the network functions.
 */
#if defined(USE_SOCKS5) && !defined(DONT_USE_SOCKS5)
#define SOCKS4TO5		/* turn on the Rxxxx definitions used in Lynx */
#include <socks.h>

/*
 * The AIX- and SOCKS4-specific definitions in socks.h are inconsistent.
 * Repair them so they're consistent (and usable).
 */
#if defined(_AIX) && !defined(USE_SOCKS4_PREFIX)
#undef  Raccept
#define Raccept       accept
#undef  Rgetsockname
#define Rgetsockname  getsockname
#undef  Rgetpeername
#define Rgetpeername  getpeername
#endif

/*
 * Workaround for order-of-evaluation problem with gcc and socks5 headers
 * which breaks the Rxxxx names by attaching the prefix twice:
 */
#ifdef INCLUDE_PROTOTYPES
#undef  Raccept
#undef  Rbind
#undef  Rconnect
#undef  Rlisten
#undef  Rselect
#undef  Rgetpeername
#undef  Rgetsockname
#define Raccept       accept
#define Rbind         bind
#define Rconnect      connect
#define Rgetpeername  getpeername
#define Rgetsockname  getsockname
#define Rlisten       listen
#define Rselect       select
#endif

#endif /* USE_SOCKS5 */

#define SHORTENED_RBIND		/* FIXME: do this in configure-script */

#ifdef USE_SSL

#define free_func free__func

#ifdef USE_OPENSSL_INCL
#include <openssl/ssl.h>
#include <openssl/crypto.h>
#include <openssl/rand.h>
#include <openssl/err.h>

#else

#if defined(USE_GNUTLS_FUNCS)
#include <tidy_tls.h>
#define USE_GNUTLS_INCL 1	/* do this for the ".c" ifdef's */
#elif defined(USE_GNUTLS_INCL)
#include <gnutls/openssl.h>
/*
 * GNUTLS's implementation of OpenSSL is very incomplete and rudimentary.
 * For a start, let's make it compile (TD - 2003/4/13).
 */
#ifndef SSL_VERIFY_PEER
#define SSL_VERIFY_PEER			0x01
#endif
#else

#ifdef USE_NSS_COMPAT_INCL
#include <nss_compat_ossl/nss_compat_ossl.h>

#else /* assume SSLeay */
#include <ssl.h>
#include <crypto.h>
#include <rand.h>
#include <err.h>
#endif
#endif
#endif /* USE_OPENSSL_INCL */

#undef free_func
#endif /* USE_SSL */

#ifdef HAVE_BSD_STDLIB_H
#include <bsd/stdlib.h>		/* prototype for arc4random.h */
#elif defined(HAVE_BSD_RANDOM_H)
#include <bsd/random.h>		/* prototype for arc4random.h */
#endif

#ifdef HAVE_LIBDMALLOC
#include <dmalloc.h>		/* Gray Watson's library */
#define show_alloc() dmalloc_log_unfreed()
#endif

#ifdef HAVE_LIBDBMALLOC
#include <dbmalloc.h>		/* Conor Cahill's library */
#define show_alloc() malloc_dump(fileno(stderr))
#endif

#ifndef show_alloc
#define show_alloc()		/* nothing */
#endif

#include <userdefs.h>

#ifdef __cplusplus
extern "C" {
#endif
#ifndef TOLOWER
#ifdef USE_ASCII_CTYPES
    extern int ascii_toupper(int);
    extern int ascii_tolower(int);
    extern int ascii_isupper(int);
#endif
#endif

    extern FILE *TraceFP(void);

#ifdef USE_SSL
    extern SSL *HTGetSSLHandle(void);
    extern void HTSSLInitPRNG(void);
    extern int HTGetSSLCharacter(void *handle);
#endif				/* USE_SSL */

#ifdef __cplusplus
}
#endif
#endif				/* HTUTILS_H */
@


1.8
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.7
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: HTUtils.h,v 1.94 2009/05/10 23:06:31 tom Exp $
d55 1
a57 2
#define DONT_TRACK_INTERNAL_LINKS 1

d130 2
d139 4
d163 2
a164 2
#ifndef	GCC_NORETURN
#define	GCC_NORETURN		/* nothing */
d167 2
a168 2
#ifndef	GCC_UNUSED
#define	GCC_UNUSED		/* nothing */
d171 9
d185 3
d194 6
d211 10
d233 9
a241 1
#undef sleep			/* 1998/06/23 (Tue) 16:54:53 */
d243 1
d248 1
a248 1
#if defined(_MSC_VER)
d354 2
d357 1
d365 2
a366 2
#define	typecalloc(cast)		(cast *)calloc(1,sizeof(cast))
#define	typecallocn(cast,ntypes)	(cast *)calloc(ntypes,sizeof(cast))
d368 1
a368 1
#define typeRealloc(cast,ptr,ntypes)    (cast *)realloc(ptr, (ntypes)*sizeof(cast))
d371 1
a371 1
#define typeMallocn(cast,ntypes)        (cast *)malloc((ntypes)*sizeof(cast))
d420 3
d517 1
a517 1
#ifdef EXP_ASCII_CTYPES
d581 1
a581 1
#if defined(HAVE_INTTYPES_H) && defined(SIZEOF_OFF_T)
d605 1
a605 1
#if (SIZEOF_OFF_T > SIZEOF_LONG)
d619 1
a619 1
#if defined(HAVE_INTTYPES_H) && defined(SIZEOF_TIME_T)
d643 1
a643 1
#if (SIZEOF_TIME_T > SIZEOF_LONG)
d657 1
a657 1
#define PRI_UCode_t	"ld"
d769 6
d795 1
a795 1
#ifdef EXP_ASCII_CTYPES
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 7
a7 5
/*                                       Utility macros for the W3 code library
                                  MACROS FOR GENERAL USE

   See also: the system dependent file "www_tcp.h", which is included here.

d62 1
d66 1
d69 2
d72 1
a76 5
/* since 2.8.6dev.1, Lynx requires an ANSI C (c89) compiler */
#define ANSI_VARARGS 1
#undef HAVE_STDARG_H
#define HAVE_STDARG_H 1

a423 1
# if defined(HAVE_STDARG_H) && defined(ANSI_VARARGS)
a424 5
# else
#  if HAVE_VARARGS_H
#   include <varargs.h>
#  endif
# endif
a426 1
#if defined(ANSI_VARARGS)
a427 3
#else
#define LYva_start(ap,format) va_start(ap)
#endif
d518 37
d556 58
d627 1
a627 1
#define CTRACE_SLEEP(secs) if (TRACE && LYTraceLogFP == 0) sleep(secs)
d681 1
d692 4
a695 1
#ifdef USE_GNUTLS_INCL
d704 4
d715 1
a718 1

d753 1
a753 1
    extern char HTGetSSLCharacter(void *handle);
@


1.5
log
@sync with lynx 2.8.5.rel2 which fixes a few minor bugs (null pointer checks,
progress bar with very slow connections)
@
text
@d9 1
a9 1
#define DEBUG   /* Turns on trace; turn off for smaller binary */
d16 1
a16 1
#include <lynx_cfg.h>	/* generated by autoconf 'configure' script */
d30 1
a30 1
 #pragma alloca
d32 3
a34 2
#    ifndef alloca /* predefined by HP cc +Olibcalls */
char *alloca ();
d44 1
a44 1
#else  /* HAVE_CONFIG_H */
d47 1
a47 1
#include <sys/config.h>	/* pseudo-autoconf values for DJGPP libc/headers */
d61 1
a61 1
#define NO_UNISTD_H	/* DEC C has unistd.h, but not VAX C */
d67 1
a67 1
#define DISP_PARTIAL	/* experimental */
d70 1
a70 1
#if defined(__STDC__) || defined(VMS) || defined(_WINDOWS)
a73 1
#endif
d129 7
d157 1
a157 1
#define	GCC_NORETURN /* nothing */
d161 1
a161 6
#define	GCC_UNUSED /* nothing */
#endif

/* FIXME: need a configure-test */
#if defined(__STDC__) || defined(__DECC) || defined(_WINDOWS) || _WIN_CC
#define ANSI_PREPRO 1
d180 9
a188 1
#if defined(_WINDOWS) && !defined(__CYGWIN__)	/* SCW */
d190 2
d193 1
d197 1
d200 1
d210 5
d249 1
a249 1
typedef void * HTError;                 /* Unused at present -- best definition? */
d269 1
a269 1
#include <unistd.h> /* should be re-include protected under EMX */
d276 1
a276 1
#define ultrix  /* Assume vax+unix=ultrix */
d284 1
a284 1
#include <libc.h>       /* NeXT */
d293 1
a293 1
#else   /* VMS: */
a305 66
/*

Macros for declarations

 */
#define PUBLIC                  /* Accessible outside this module     */
#define PRIVATE static          /* Accessible only within this module */

#if defined(__STDC__) || defined(__BORLANDC__) || defined(_MSC_VER)
#define CONST const             /* "const" only exists in STDC */
#define NOPARAMS (void)
#define PARAMS(parameter_list) parameter_list
#define NOARGS (void)
#define ARGS1(t,a) \
                (t a)
#define ARGS2(t,a,u,b) \
                (t a, u b)
#define ARGS3(t,a,u,b,v,c) \
                (t a, u b, v c)
#define ARGS4(t,a,u,b,v,c,w,d) \
                (t a, u b, v c, w d)
#define ARGS5(t,a,u,b,v,c,w,d,x,e) \
                (t a, u b, v c, w d, x e)
#define ARGS6(t,a,u,b,v,c,w,d,x,e,y,f) \
                (t a, u b, v c, w d, x e, y f)
#define ARGS7(t,a,u,b,v,c,w,d,x,e,y,f,z,g) \
                (t a, u b, v c, w d, x e, y f, z g)
#define ARGS8(t,a,u,b,v,c,w,d,x,e,y,f,z,g,s,h) \
                (t a, u b, v c, w d, x e, y f, z g, s h)
#define ARGS9(t,a,u,b,v,c,w,d,x,e,y,f,z,g,s,h,r,i) \
                (t a, u b, v c, w d, x e, y f, z g, s h, r i)
#define ARGS10(t,a,u,b,v,c,w,d,x,e,y,f,z,g,s,h,r,i,q,j) \
                (t a, u b, v c, w d, x e, y f, z g, s h, r i, q j)

#else  /* not ANSI */

#ifndef _WINDOWS
#define CONST
#endif
#define NOPARAMS ()
#define PARAMS(parameter_list) ()
#define NOARGS ()
#define ARGS1(t,a) (a) \
                t a;
#define ARGS2(t,a,u,b) (a,b) \
                t a; u b;
#define ARGS3(t,a,u,b,v,c) (a,b,c) \
                t a; u b; v c;
#define ARGS4(t,a,u,b,v,c,w,d) (a,b,c,d) \
                t a; u b; v c; w d;
#define ARGS5(t,a,u,b,v,c,w,d,x,e) (a,b,c,d,e) \
                t a; u b; v c; w d; x e;
#define ARGS6(t,a,u,b,v,c,w,d,x,e,y,f) (a,b,c,d,e,f) \
                t a; u b; v c; w d; x e; y f;
#define ARGS7(t,a,u,b,v,c,w,d,x,e,y,f,z,g) (a,b,c,d,e,f,g) \
                t a; u b; v c; w d; x e; y f; z g;
#define ARGS8(t,a,u,b,v,c,w,d,x,e,y,f,z,g,s,h) (a,b,c,d,e,f,g,h) \
                t a; u b; v c; w d; x e; y f; z g; s h;
#define ARGS9(t,a,u,b,v,c,w,d,x,e,y,f,z,g,s,h,r,i) (a,b,c,d,e,f,g,h,i) \
                t a; u b; v c; w d; x e; y f; z g; s h; r i;
#define ARGS10(t,a,u,b,v,c,w,d,x,e,y,f,z,g,s,h,r,i,q,j) (a,b,c,d,e,f,g,h,i,j) \
                t a; u b; v c; w d; x e; y f; z g; s h; r i; q j;


#endif /* __STDC__ (ANSI) */

d321 2
d324 1
a324 1
#define typeMallocn(cast,ntypes)        (cast *)malloc(ntypes*sizeof(cast))
d348 2
a349 1
    typedef char    BOOLEAN;	/* Logical value */
d355 2
a356 2
#endif   /*  CURSES  */
#endif	 /*  BOOLEAN_DEFINED */
d358 1
a358 1
#endif   /* _WINDOWS */
d360 3
d366 1
d375 4
a378 4
#define TCP_PORT 80     /* Allocated to http by Jon Postel/ISI 24-Jan-92 */
#define OLD_TCP_PORT 2784       /* Try the old one if no answer on 80 */
#define DNP_OBJ 80      /* This one doesn't look busy, but we must check */
                        /* That one was for decnet */
d386 1
a386 1
**     character (i.e. <128) after converting from host character set.  */
d399 13
a411 12
#define HT_REDIRECTING 399
#define HT_LOADED 200                   /* Instead of a socket */
#define HT_PARTIAL_CONTENT      206     /* Partial Content */
#define HT_INTERRUPTED -29998
#define HT_NOT_LOADED -29999
#define HT_OK           0               /* Generic success*/

#define HT_ERROR                -1      /* Generic failure */

#define HT_CANNOT_TRANSLATE -4

#define HT_NO_DATA		-204	/* OK but no data was loaded - */
d413 7
a419 10
#define HT_NO_ACCESS            -401    /* Access not available */
#define HT_FORBIDDEN            -403    /* Access forbidden */
#define HT_NOT_ACCEPTABLE       -406    /* Not Acceptable */

#define HT_PARSER_REOPEN_ELT     700    /* tells SGML parser to keep tag open */
#define HT_PARSER_OTHER_CONTENT  701    /* tells SGML to change content model */
#define HT_H_ERRNO_VALID        -800    /* see h_errno for resolver error */

#define HT_INTERNAL             -900    /* Weird -- should never happen. */
#define HT_BAD_EOF      -12             /* Premature EOF */
d445 1
a445 1
#define GCC_PRINTFLIKE(fmt,var) /*nothing*/
d449 1
a449 1
#include <HTString.h>   /* String utilities */
a462 2
extern void outofmem PARAMS((CONST char *fname, CONST char *func));

a482 4
extern int ascii_toupper PARAMS((int));
extern int ascii_tolower PARAMS((int));
extern int ascii_isupper PARAMS((int));

d504 2
a505 2
#define LF   FROMASCII('\012')  /* ASCII line feed LOCAL EQUIVALENT */
#define CR   FROMASCII('\015')  /* Will be converted to ^M for transmission */
d534 1
a534 1
#define LY_SHOWWHERE /* nothing */
a542 2
extern FILE *TraceFP NOPARAMS;

d552 1
a552 1
#define SOCKS4TO5	/* turn on the Rxxxx definitions used in Lynx */
d591 1
a591 1
#define SHORTENED_RBIND	/* FIXME: do this in configure-script */
d614 1
a614 1
#else	/* assume SSLeay */
a623 4
extern SSL * HTGetSSLHandle NOPARAMS;
extern void HTSSLInitPRNG NOPARAMS;
extern char HTGetSSLCharacter PARAMS((void * handle));

d627 1
a627 1
#include <dmalloc.h>    /* Gray Watson's library */
d632 1
a632 1
#include <dbmalloc.h>   /* Conor Cahill's library */
d637 1
a637 1
#define show_alloc()	/* nothing */
d642 23
a664 1
#endif /* HTUTILS_H */
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d574 4
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d17 23
d48 1
d170 6
d200 1
a200 1
#if  defined(__EMX__) || defined(WIN_EX)
d208 12
d356 3
d367 3
d392 1
a392 1
        typedef char    BOOLEAN;                /* Logical value */
d406 1
d455 3
a457 3
#define HT_PARSER_REOPEN_ELT	 700	/* tells SGML parser to keep tag open */
#define HT_PARSER_OTHER_CONTENT	 701	/* tells SGML to change content model */
#define HT_H_ERRNO_VALID 	-800	/* see h_errno for resolver error */
d463 1
a463 1
# if HAVE_STDARG_H && ANSI_VARARGS
d472 1
a472 1
#if ANSI_VARARGS
d482 2
a483 1
#if	GCC_PRINTF
d488 1
d507 7
a513 7

Upper- and Lowercase macros

   The problem here is that toupper(x) is not defined officially unless isupper(x) is.
   These macros are CERTAINLY needed on #if defined(pyr) || define(mips) or BDSI
   platforms.  For safefy, we make them mandatory.

d519 13
a531 1
  /* Pyramid and Mips can't uppercase non-alpha */
d534 4
d540 1
a540 1
#define FREE(x) if (x != 0) {free((char *)x); x = NULL;}
d571 2
d640 1
d646 1
d648 12
d665 2
d674 14
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d4 1
a4 1
   See also: the system dependent file "tcp.h", which is included here.
d20 1
a20 1
#else
d24 2
d45 1
a45 1
#if defined(__STDC__) || defined(VMS)
d51 3
a53 1
/* FIXME: these should be removed after completing auto-configure script */
d55 5
a59 1
/* Accommodate pre-autoconf Makefile */
d105 16
d125 4
d133 17
a149 2
#ifdef _WINDOWS                         /* SCW */
#include <windef.h>
d151 1
a151 1
#define va_arg
d153 3
a157 7
#endif /* _WINDOWS */

#ifdef __EMX__
#include <unistd.h> /* should be re-include protected under EMX */
#include <stdlib.h> /* should be re-include protected under EMX */
#define getcwd _getcwd2
#define chdir _chdir2
d159 2
d163 1
a163 1
/*
d165 4
a168 1
Debug message control.
d170 3
a172 1
 */
d174 2
a175 7
#ifdef NO_LYNX_TRACE
#define TRACE 0
#define PROGRESS(str) /* nothing for now */
#else
#define TRACE (WWW_TraceFlag)
#define PROGRESS(str) printf(str)
        extern int WWW_TraceFlag;
d194 1
a194 1
#ifdef DGUX
d196 15
a210 1
#endif /* DGUX */
a223 5
#ifndef MACH /* Vincent.Cate@@furmint.nectar.cs.cmu.edu */
#ifndef __STRICT_BSD__
#include <stdlib.h>
#endif /* !__STRICT_BSD__ */
#endif /* !MACH */
a228 1
#include <stdlib.h>   /* ANSI */   /* BSN */
a232 1
#include <stdlib.h>
d252 1
a252 1
#ifdef __STDC__
d314 19
d373 1
a373 1
#define WHITE(c) (((unsigned char)(TOASCII(c))) <= 32)
d378 1
a378 1
#define LYIsASCII(c) (TOASCII((unsigned char)(c)) < 128)
d406 2
d469 2
a470 2
#define TOLOWER(c) (isupper((unsigned char)c) ? tolower((unsigned char)c) : ((unsigned char)c))
#define TOUPPER(c) (islower((unsigned char)c) ? toupper((unsigned char)c) : ((unsigned char)c))
d473 1
a473 1
#define FREE(x) if (x) {free(x); x = NULL;}
d487 26
a512 1
#define CTRACE if(TRACE)fprintf
d515 1
a515 1
#define CTRACE_FLUSH(fp) if(TRACE) fflush(fp)
d519 1
a519 1
#include <tcp.h>
d544 21
d568 21
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*                                                    Utitlity macros for the W3 code library
d3 3
a5 5
                                             
   Generates: HTUtils.h
   
   See also: the system dependent file "tcp.h"
   
d8 4
a11 4
#ifndef DEBUG
#define DEBUG   /* Noone ever turns this off as trace is too important */
#endif          /* Keep option for really small memory applications tho */
                
d18 2
d22 6
d33 3
a35 1
#define NO_UNISTD_H
d38 3
d43 5
a47 45
/* FIXME: these will be removed after completing auto-configure script */

#ifdef _IBMR2
#define USE_DIRENT              /* sys V style directory open */
#endif /* _IBMR2 */

#ifdef _SYSV3
#include <fcntl.h>
#define USE_DIRENT              /* sys V style directory open */
#endif /* _SYSV3 */

/* Solaris. */
#if defined(sun) && defined(__svr4__) && !defined(USE_DIRENT)
#define USE_DIRENT              /* sys V style directory open */
#endif /* sun && __svr4__ && !USE_DIRENT */

#ifdef __alpha
#define USE_DIRENT
#endif /* __alpha */

#ifndef USE_DIRENT
#ifdef SVR4
#define USE_DIRENT
#endif /* SVR4 */
#endif /* !USE_DIRENT */

#ifndef SOLARIS2
#include <string.h>             /* For bzero etc */
#endif /* !SOLARIS2 */

#ifdef SCO
#define sco
#endif /* SCO */
#ifdef sco
#include <sys/fcntl.h>
#define USE_DIRENT
#endif /* sco */

/*
Intergraph CLIX
 */
#ifdef CLIX
#include <sys/fcntl.h>
#define USE_DIRENT
#endif /* CLIX */
d49 1
a49 27
#ifdef ISC
#ifndef NO_UNISTD_H
#include <sys/unistd.h>
#endif /* !NO_UNISTD_H */
#else
#if !defined(NO_UNISTD_H) && !defined(VMS)
#include <unistd.h>
#endif /* !NO_UNISTD_H && !VMS */
#endif /* ISC */

#if defined(SVR4) || defined(UNIXWARE)
#include <sys/fcntl.h>
#ifndef NO_FILIO_H     /* BSD Interactive doesn't have filio.h. */
#include <sys/filio.h>
#endif /* !NO_FILIO_H */
#endif /* SVR4 || UNIXWARE */

/*
SOLARIS 2
 */
#ifdef SOLARIS2
#include <sys/filio.h>
#endif /* SOLARIS2 */

#ifndef NO_FILIO_H
#define NO_FILIO_H	/* prevent conflict between autoconf & BSDI make */
#endif
d87 1
d95 4
d106 1
a106 1
#include "windef.h"
d114 6
a119 2
#ifdef SHORT_NAMES
#define WWW_TraceFlag HTTrFlag
a126 4
#ifndef STDIO_H
#include <stdio.h>
#define STDIO_H
#endif
d128 4
a131 1
#ifdef DEBUG
a134 3
#else
#define TRACE 0
#define PROGRESS(str) /* nothing for now */
a136 3
#define CTRACE if(TRACE)fprintf
#define tfp stderr

d140 1
a140 1
  
d142 1
a142 1
   of error messages, numbers, and recursive pointers to reasons. Curently this is a
d144 1
a144 1
   
a178 1
#include <stdio.h>
a185 1
#include <ctype.h>
d258 2
a259 2
                
        
d284 2
a286 2
#define BOOLEAN_DEFINED
#endif
d308 4
d315 4
a318 1
Sucess (>=0) and failure (<0) codes
d322 2
a323 2
#define HT_REDIRECTING 29996
#define HT_LOADED 29997                 /* Instead of a socket */
d331 1
a331 4
#define HT_NO_ACCESS    -10             /* Access not available */
#define HT_FORBIDDEN    -11             /* Access forbidden */
#define HT_INTERNAL     -12             /* Weird -- should never happen. */
#define HT_BAD_EOF      -12             /* Premature EOF */
d333 5
d339 4
a342 1
#include "HTString.h"   /* String utilities */
d345 11
a355 2
#ifdef __STDC__
#include <stdarg.h>
d357 1
a357 1
#include <varargs.h>
d359 9
d370 2
d382 1
a382 1
#include "LYexit.h"
d384 1
a384 5
#define outofmem(file, func)\
 { fprintf(stderr,\
  "\r\n\r\n\r\n%s %s: out of memory.  Aborting...\r\n", file, func);\
  LYOutOfMemory = TRUE; exit(-1);}
/* extern void outofmem PARAMS((const char *fname, const char *func)); */
d392 2
a393 2
   platforms. For safefy, we make them mandatory.
   
d404 2
d411 1
a411 1
   representation. Similarly, we include them in strings to be sent as net ascii after
d413 1
a413 1
   
d418 18
a435 1
#endif /* HTUTILS_H */
d438 11
d450 7
a456 1
   end of utilities */
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
