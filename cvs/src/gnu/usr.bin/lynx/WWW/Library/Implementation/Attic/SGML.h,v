head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.38;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.43;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.50;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.44;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.44;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: SGML.h,v 1.46 2012/02/10 18:32:26 tom Exp $
 *			       SGML parse and stream definition for libwww
 *                             SGML AND STRUCTURED STREAMS
 *
 * The SGML parser is a state machine.	It is called for every character
 * of the input stream.	 The DTD data structure contains pointers
 * to functions which are called to implement the actual effect of the
 * text read. When these functions are called, the attribute structures pointed to by the
 * DTD are valid, and the function is passed a pointer to the current tag structure, and an
 * "element stack" which represents the state of nesting within SGML elements.
 *
 * The following aspects are from Dan Connolly's suggestions:  Binary search,
 * Structured object scheme basically, SGML content enum type.
 *
 * (c) Copyright CERN 1991 - See Copyright.html
 *
 */
#ifndef SGML_H
#define SGML_H

#include <HTStream.h>
#include <HTAnchor.h>
#include <LYJustify.h>

#ifdef __cplusplus
extern "C" {
#endif
/*
 *
 * SGML content types
 *
 */ typedef enum {
	SGML_EMPTY,		/* No content. */
	SGML_LITTERAL,		/* Literal character data.  Recognize exact close tag only.
				   Old www server compatibility only!  Not SGML */
	SGML_CDATA,		/* Character data.  Recognize </ only.
				   (But we treat it just as SGML_LITTERAL.) */
	SGML_SCRIPT,		/* Like CDATA, but allow it to be a comment */
	SGML_RCDATA,		/* Replaceable character data. Should recognize </ and &ref;
				   (but we treat it like SGML_MIXED for old times' sake). */
	SGML_MIXED,		/* Elements and parsed character data.
				   Recognize all markup. */
	SGML_ELEMENT,		/* Any data found should be regarded as an error.
				   (But we treat it just like SGML_MIXED.) */
	SGML_PCDATA		/* Should contain no elements but &ref; is parsed.
				   (We treat it like SGML_CDATA wrt. contained tags
				   i.e. pass them on literally, i.e. like we should
				   treat SGML_RCDATA) (added by KW). */
    } SGMLContent;

    typedef struct {
	const char *name;	/* The name of the attribute */
#ifdef USE_PRETTYSRC
	char type;		/* code of the type of the attribute. Code
				   values are in HTMLDTD.h */
#endif
    } attr;

    typedef const attr *AttrList;

    typedef struct {
	const char *name;
	AttrList list;
    } AttrType;

    typedef int TagClass;

    /* textflow */
#define Tgc_FONTlike	0x00001	/* S,STRIKE,I,B,TT,U,BIG,SMALL,STYLE,BLINK;BR,TAB */
#define Tgc_EMlike	0x00002	/* EM,STRONG,DFN,CODE,SAMP,KBD,VAR,CITE,Q,INS,DEL,SPAN,.. */
#define Tgc_MATHlike	0x00004	/* SUB,SUP,MATH,COMMENT */
#define Tgc_Alike	0x00008	/* A */
#define Tgc_formula	0x00010	/* not used until math is supported better... */
    /* used for special structures: forms, tables,... */
#define Tgc_TRlike	0x00020	/* TR and similar */
#define Tgc_SELECTlike	0x00040	/* SELECT,INPUT,TEXTAREA(,...) */
    /* structure */
#define Tgc_FORMlike	0x00080	/* FORM itself */
#define Tgc_Plike	0x00100	/* P,H1..H6,... structures containing text or
				   insertion but not other structures */
#define Tgc_DIVlike	0x00200	/* ADDRESS,FIG,BDO,NOTE,FN,DIV,CENTER;FIG
				   structures which can contain other structures */
#define Tgc_LIlike	0x00400	/* LH,LI,DT,DD;TH,TD structure-like, only valid
				   within certain other structures */
#define Tgc_ULlike	0x00800	/* UL,OL,DL,DIR,MENU;TABLE;XMP,LISTING
				   special in some way, cannot contain (parsed)
				   text directly */
    /* insertions */
#define Tgc_BRlike	0x01000	/* BR,IMG,TAB allowed in any text */
#define Tgc_APPLETlike	0x02000	/* APPLET,OBJECT,EMBED,SCRIPT;BUTTON */
#define Tgc_HRlike	0x04000	/* HR,MARQUEE can contain all kinds of things
				   and/or are not allowed (?) in running text */
#define Tgc_MAPlike	0x08000	/* MAP,AREA some specials that never contain
				   (directly or indirectly) other things than
				   special insertions */
#define Tgc_outer	0x10000	/* HTML,FRAMESET,FRAME,PLAINTEXT; */
#define Tgc_BODYlike	0x20000	/* BODY,BODYTEXT,NOFRAMES,TEXTFLOW; */
#define Tgc_HEADstuff	0x40000	/* HEAD,BASE,STYLE,TITLE; */
    /* special relations */
#define Tgc_same	0x80000

/*
 * Groups for contains-data.
 */
#define Tgc_INLINElike	(Tgc_Alike | Tgc_APPLETlike | Tgc_BRlike | Tgc_EMlike | Tgc_FONTlike | Tgc_SELECTlike)
#define Tgc_LISTlike	(Tgc_LIlike | Tgc_ULlike)
#define Tgc_BLOCKlike	(Tgc_DIVlike | Tgc_LISTlike)

/* Some more properties of tags (or rather, elements) and rules how
   to deal with them. - kw */
    typedef int TagFlags;

#define Tgf_endO	0x00001	/* end tag can be Omitted */
#define Tgf_startO	0x00002	/* start tag can be Omitted */
#define Tgf_mafse	0x00004	/* Make Attribute-Free Start-tag End instead
				   (if found invalid) */
#define Tgf_strict	0x00008	/* Ignore contained invalid elements,
				   don't pass them on; or other variant
				   handling for some content types */
#define Tgf_nreie	0x00010	/* Not Really Empty If Empty,
				   used by color style code */
#define Tgf_frecyc	0x00020	/* Pass element content on in a form that
				   allows recycling, i.e. don't translate to
				   output (display) character set yet (treat
				   content similar to attribute values) */
#define Tgf_nolyspcl	0x00040	/* Don't generate lynx special characters
				   for soft hyphen and various spaces (nbsp,
				   ensp,..) */

/*		A tag structure describes an SGML element.
 *		-----------------------------------------
 *
 *
 *	name		is the string which comes after the tag opener "<".
 *
 *	attributes	points to a zero-terminated array
 *			of attribute names.
 *
 *	litteral	determines how the SGML engine parses the characters
 *			within the element.  If set, tag openers are ignored
 *			except for that which opens a matching closing tag.
 *
 */
    typedef struct _tag HTTag;
    struct _tag {
	const char *name;	/* The name of the tag */
#ifdef USE_COLOR_STYLE
	unsigned name_len;	/* The length of the name */
#endif
#ifdef USE_JUSTIFY_ELTS
	BOOL can_justify;	/* justification allowed? */
#endif
	AttrList attributes;	/* The list of acceptable attributes */
	int number_of_attributes;	/* Number of possible attributes */
	const AttrType *attr_types;
	SGMLContent contents;	/* End only on end tag @@@@ */
	TagClass tagclass;
	TagClass contains;	/* which classes of elements this one can contain directly */
	TagClass icontains;	/* which classes of elements this one can contain indirectly */
	TagClass contained;	/* in which classes can this tag be contained ? */
	TagClass icontained;	/* in which classes can this tag be indirectly contained ? */
	TagClass canclose;	/* which classes of elements can this one close
				   if something looks wrong ? */
	TagFlags flags;
    };

/*		DTD Information
 *		---------------
 *
 *  Not the whole DTD, but all this parser uses of it.
 */
    typedef struct {
	HTTag *tags;		/* Must be in strcmp order by name */
	int number_of_tags;
	STRING2PTR entity_names;	/* Must be in strcmp order by name */
	size_t number_of_entities;
	/*  "entity_names" table probably unused,
	 *  see comments in HTMLDTD.c near the top
	 */
    } SGML_dtd;

/*	SGML context passed to parsers
*/
    typedef struct _HTSGMLContext *HTSGMLContext;	/* Hidden */

/*__________________________________________________________________________
*/

/*

Structured Object definition

   A structured object is something which can reasonably be represented
   in SGML.  I'll rephrase that.  A structured object is an ordered
   tree-structured arrangement of data which is representable as text.
   The SGML parser outputs to a Structured object.  A Structured object
   can output its contents to another Structured Object.  It's a kind of
   typed stream.  The architecture is largely Dan Conolly's.  Elements and
   entities are passed to the sob by number, implying a knowledge of the
   DTD.	 Knowledge of the SGML syntax is not here, though.

   Superclass: HTStream

   The creation methods will vary on the type of Structured Object.
   Maybe the callerData is enough info to pass along.

 */
    typedef struct _HTStructured HTStructured;

    typedef struct _HTStructuredClass {

	const char *name;	/* Just for diagnostics */

	void (*_free) (HTStructured * me);

	void (*_abort) (HTStructured * me, HTError e);

	void (*put_character) (HTStructured * me, int ch);

	void (*put_string) (HTStructured * me, const char *str);

	void (*put_block) (HTStructured * me, const char *str, int len);

	/* HTStreamClass ends here */

	int (*start_element) (HTStructured * me, int element_number,
			      const BOOL *attribute_present,
			      STRING2PTR attribute_value,
			      int charset,
			      char **include);

	int (*end_element) (HTStructured * me, int element_number,
			    char **include);

	int (*put_entity) (HTStructured * me, int entity_number);

    } HTStructuredClass;

/*
  Equivalents to the following functions possibly could be generalised
  into additional HTStructuredClass members.  For now they don't do
  anything target-specific. - kw
  */
    extern BOOLEAN LYCheckForCSI(HTParentAnchor *anchor, char **url);
    extern void LYDoCSI(char *url, const char *comment, char **csi);
    extern BOOLEAN LYCommentHacks(HTParentAnchor *anchor, const char *comment);

/*

Find a Tag by Name

   Returns a pointer to the tag within the DTD.

 */
    extern HTTag *SGMLFindTag(const SGML_dtd * dtd,
			      const char *string);

/*
 * Return the current offset within the file that SGML is parsing
 */
    extern int SGML_offset(void);

/*

Create an SGML parser

 */
/*
 * On entry,
 *	dtd		must point to a DTD structure as defined above
 *	callbacks	must point to user routines.
 *	callData	is returned in callbacks transparently.
 * On exit,
 *		The default tag starter has been processed.
 */
    extern HTStream *SGML_new(const SGML_dtd * dtd,
			      HTParentAnchor *anchor,
			      HTStructured * target);

    extern const HTStreamClass SGMLParser;

#ifdef __cplusplus
}
#endif
#endif				/* SGML_H */
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: SGML.h,v 1.43 2009/04/16 00:50:16 tom Exp $
d151 1
a151 1
#ifdef EXP_JUSTIFY_ELTS
d176 1
a176 1
	const char **entity_names;	/* Must be in strcmp order by name */
d219 1
a219 1
	void (*put_character) (HTStructured * me, char ch);
d229 1
a229 1
			      const char **attribute_value,
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 17
a17 15
/*						  SGML parse and stream definition for libwww
			       SGML AND STRUCTURED STREAMS

   The SGML parser is a state machine.	It is called for every character
   of the input stream.	 The DTD data structure contains pointers
   to functions which are called to implement the actual effect of the
   text read. When these functions are called, the attribute structures pointed to by the
   DTD are valid, and the function is passed a pointer to the current tag structure, and an
   "element stack" which represents the state of nesting within SGML elements.

   The following aspects are from Dan Connolly's suggestions:  Binary search,
   Structured object scheme basically, SGML content enum type.

   (c) Copyright CERN 1991 - See Copyright.html

d60 7
d103 7
d149 1
a149 1
	int name_len;		/* The length of the name */
d154 1
a154 1
	attr *attributes;	/* The list of acceptable attributes */
d156 1
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d24 3
d28 21
d50 2
a51 25
SGML content types

 */
typedef enum {
    SGML_EMPTY,	   /* No content. */
    SGML_LITTERAL, /* Literal character data.  Recognize exact close tag only.
		      Old www server compatibility only!  Not SGML */
    SGML_CDATA,	   /* Character data.  Recognize </ only.
		      (But we treat it just as SGML_LITTERAL.) */
    SGML_SCRIPT,   /* Like CDATA, but allow it to be a comment */
    SGML_RCDATA,   /* Replaceable character data. Should recognize </ and &ref;
		      (but we treat it like SGML_MIXED for old times' sake). */
    SGML_MIXED,	   /* Elements and parsed character data.
		      Recognize all markup. */
    SGML_ELEMENT,  /* Any data found should be regarded as an error.
		      (But we treat it just like SGML_MIXED.) */
    SGML_PCDATA	   /* Should contain no elements but &ref; is parsed.
		      (We treat it like SGML_CDATA wrt. contained tags
		      i.e. pass them on literally, i.e. like we should
		      treat SGML_RCDATA) (added by KW). */
} SGMLContent;


typedef struct {
    char *	name;		/* The (constant) name of the attribute */
d53 1
a53 1
    char	type;		/* code of the type of the attribute. Code
d56 3
a58 1
} attr;
a59 1
typedef int TagClass;
d61 5
a65 5
#define Tgc_FONTlike	0x00001 /* S,STRIKE,I,B,TT,U,BIG,SMALL,STYLE,BLINK;BR,TAB */
#define Tgc_EMlike	0x00002 /* EM,STRONG,DFN,CODE,SAMP,KBD,VAR,CITE,Q,INS,DEL,SPAN,.. */
#define Tgc_MATHlike	0x00004 /* SUB,SUP,MATH,COMMENT */
#define Tgc_Alike	0x00008 /* A */
#define Tgc_formula	0x00010 /* not used until math is supported better... */
d67 2
a68 2
#define Tgc_TRlike	0x00020 /* TR and similar */
#define Tgc_SELECTlike	0x00040 /* SELECT,INPUT,TEXTAREA(,...) */
d70 10
a79 10
#define Tgc_FORMlike	0x00080 /* FORM itself */
#define Tgc_Plike	0x00100 /* P,H1..H6,... structures containing text or
				    insertion but not other structures */
#define Tgc_DIVlike	0x00200 /* ADDRESS,FIG,BDO,NOTE,FN,DIV,CENTER;FIG
				    structures which can contain other structures */
#define Tgc_LIlike	0x00400 /* LH,LI,DT,DD;TH,TD structure-like, only valid
				    within certain other structures */
#define Tgc_ULlike	0x00800 /* UL,OL,DL,DIR,MENU;TABLE;XMP,LISTING
				    special in some way, cannot contain (parsed)
				    text directly */
d81 10
a90 10
#define Tgc_BRlike	0x01000 /* BR,IMG,TAB allowed in any text */
#define Tgc_APPLETlike	0x02000 /* APPLET,OBJECT,EMBED,SCRIPT;BUTTON */
#define Tgc_HRlike	0x04000 /* HR,MARQUEE can contain all kinds of things
				    and/or are not allowed (?) in running text */
#define Tgc_MAPlike	0x08000 /* MAP,AREA some specials that never contain
				    (directly or indirectly) other things than
				    special insertions */
#define Tgc_outer	0x10000 /* HTML,FRAMESET,FRAME,PLAINTEXT; */
#define Tgc_BODYlike	0x20000 /* BODY,BODYTEXT,NOFRAMES,TEXTFLOW; */
#define Tgc_HEADstuff	0x40000 /* HEAD,BASE,STYLE,TITLE; */
d96 7
a102 6
typedef int TagFlags;
#define Tgf_endO	0x00001 /* end tag can be Omitted */
#define Tgf_startO	0x00002 /* start tag can be Omitted */
#define Tgf_mafse	0x00004 /* Make Attribute-Free Start-tag End instead
				      (if found invalid) */
#define Tgf_strict	0x00008 /* Ignore contained invalid elements,
d105 3
a107 3
#define Tgf_nreie	0x00010 /* Not Really Empty If Empty,
				      used by color style code */
#define Tgf_frecyc	0x00020 /* Pass element content on in a form that
d111 1
a111 1
#define Tgf_nolyspcl	0x00040 /* Don't generate lynx special characters
d116 16
a131 16
**		-----------------------------------------
**
**
**	name		is the string which comes after the tag opener "<".
**
**	attributes	points to a zero-terminated array
**			of attribute names.
**
**	litteral	determines how the SGML engine parses the characters
**			within the element.  If set, tag openers are ignored
**			except for that which opens a matching closing tag.
**
*/
typedef struct _tag HTTag;
struct _tag{
    char *	name;			/* The name of the tag */
d133 1
a133 1
    int		name_len;		/* The length of the name */
d136 1
a136 1
    BOOL	can_justify;		/* justification allowed?*/
d138 12
a149 13
    attr *	attributes;		/* The list of acceptable attributes */
    int		number_of_attributes;	/* Number of possible attributes */
    SGMLContent contents;		/* End only on end tag @@@@ */
    TagClass	tagclass,
	contains,	/* which classes of elements this one can contain directly */
	icontains,	/* which classes of elements this one can contain indirectly */
	contained,	/* in which classes can this tag be contained ? */
	icontained,	/* in which classes can this tag be indirectly contained ? */
	canclose;	/* which classes of elements can this one close
			   if something looks wrong ? */
    TagFlags	flags;
};

d152 13
a164 14
**		---------------
**
**  Not the whole DTD, but all this parser uses of it.
*/
typedef struct {
    HTTag *		tags;		/* Must be in strcmp order by name */
    int			number_of_tags;
    CONST char **	entity_names;	/* Must be in strcmp order by name */
    size_t		number_of_entities;
				/*  "entity_names" table probably unused,
				**  see comments in HTMLDTD.c near the top
				*/
} SGML_dtd;

d168 1
a168 2
typedef struct _HTSGMLContext *HTSGMLContext;	/* Hidden */

d192 13
a204 1
typedef struct _HTStructured HTStructured;
d206 1
a206 1
typedef struct _HTStructuredClass{
d208 1
a208 1
	char*  name;				/* Just for diagnostics */
d210 5
a214 2
	void (*_free) PARAMS((
		HTStructured*	me));
d216 2
a217 33
	void (*_abort) PARAMS((
		HTStructured*	me,
		HTError		e));

	void (*put_character) PARAMS((
		HTStructured*	me,
		char		ch));

	void (*put_string) PARAMS((
		HTStructured*	me,
		CONST char *	str));

	void (*_write) PARAMS((
		HTStructured*	me,
		CONST char *	str,
		int		len));

	int (*start_element) PARAMS((
		HTStructured*	me,
		int		element_number,
		CONST BOOL*	attribute_present,
		CONST char**	attribute_value,
		int		charset,
		char **		include));

	int (*end_element) PARAMS((
		HTStructured*	me,
		int		element_number,
		char **		include));

	int (*put_entity) PARAMS((
		HTStructured*	me,
		int		entity_number));
d219 3
a221 1
} HTStructuredClass;
d228 3
a230 3
extern BOOLEAN LYCheckForCSI PARAMS((HTParentAnchor *anchor, char **url));
extern void LYDoCSI PARAMS((char *url, CONST char *comment, char **csi));
extern BOOLEAN LYCommentHacks PARAMS((HTParentAnchor *anchor, CONST char *comment));
d239 2
a240 3
extern HTTag * SGMLFindTag PARAMS((
	CONST SGML_dtd *	dtd,
	CONST char *		string));
d242 4
d253 10
a262 11
** On entry,
**	dtd		must point to a DTD structure as defined above
**	callbacks	must point to user routines.
**	callData	is returned in callbacks transparently.
** On exit,
**		The default tag starter has been processed.
*/
extern HTStream * SGML_new PARAMS((
	CONST SGML_dtd *	dtd,
	HTParentAnchor *	anchor,
	HTStructured *		target));
d264 1
a264 1
extern CONST HTStreamClass SGMLParser;
d266 4
a269 1
#endif	/* SGML_H */
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@a278 4

/*

    */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d22 1
d29 1
a29 1
typedef enum _SGMLContent {
d33 5
a37 2
    SGML_CDATA,	   /* Character data.  Recognize </ only. */
    SGML_RCDATA,   /* Replaceable character data.  Recognize </ and &ref; */
d40 6
a45 2
    SGML_ELEMENT,  /* Any data found will be returned as an error. */
    SGML_PCDATA	   /* Added by KW. */
d51 1
a51 1
#ifdef USE_PSRC
d80 1
a80 1
#define Tgc_APPLETlike	0x02000 /* APPLET,OBJECT,EMBED,SCRIPT */
d100 2
a101 1
				      don't pass them on */
d104 7
d132 3
d218 1
a218 1
	void (*start_element) PARAMS((
d226 1
a226 1
	void (*end_element) PARAMS((
d235 1
a235 1
}HTStructuredClass;
@


1.1
log
@Initial revision
@
text
@d1 5
a5 7
/*                                                SGML parse and stream definition for libwww
                               SGML AND STRUCTURED STREAMS
                                             
   The SGML parser is a state machine. It is called for every character
   
   of the input stream. The DTD data structure contains pointers
   
a6 1
   
d8 1
a8 1
   DTD are valid, and the function is passed a pointer to the curent tag structure, and an
d10 4
a13 4
   
   The following aspects are from Dan Connolly's suggestions:  Binary search, Strcutured
   object scheme basically, SGML content enum type.
   
d15 1
a15 1
   
d20 2
a21 5
#ifndef HTUTILS_H
#include "HTUtils.h"
#endif /* HTUTILS_H */
#include "HTStream.h"
#include "HTAnchor.h"
d29 1
a29 1
    SGML_EMPTY,    /* No content. */
d32 1
a32 1
    SGML_CDATA,    /* Character data.  Recognize </ only. */
d34 1
a34 1
    SGML_MIXED,    /* Elements and parsed character data.
d37 1
a37 1
    SGML_PCDATA    /* Added by KW. */
d42 5
a46 2
    char *      name;           /* The (constant) name of the attribute */
                                /* Could put type info in here */
d49 1
a49 1
typedef enum _TagClass {
d51 5
a55 5
    Tgc_FONTlike	= 0x00001,/* S,STRIKE,I,B,TT,U,BIG,SMALL,STYLE,BLINK;BR,TAB */
    Tgc_EMlike		= 0x00002, /* EM,STRONG,DFN,CODE,SAMP,KBD,VAR,CITE,Q,INS,DEL,SPAN,.. */
    Tgc_MATHlike	= 0x00004, /* SUB,SUP,MATH,COMMENT */
    Tgc_Alike		= 0x00008, /* A */
    Tgc_formula		= 0x00010, /* not used until math is supported better... */
d57 2
a58 2
    Tgc_TRlike		= 0x00020,/* TR and similar */
    Tgc_SELECTlike	= 0x00040,/* SELECT,INPUT,TEXTAREA(,...) */
d60 2
a61 2
    Tgc_FORMlike	= 0x00080,/* FORM itself */
    Tgc_Plike		= 0x00100, /* P,H1..H6,... structures containing text or
d63 1
a63 1
    Tgc_DIVlike		= 0x00200, /* ADDRESS,FIG,BDO,NOTE,FN,DIV,CENTER;FIG
d65 1
a65 1
    Tgc_LIlike		= 0x00400, /* LH,LI,DT,DD;TH,TD structure-like, only valid
d67 1
a67 1
    Tgc_ULlike		= 0x00800, /* UL,OL,DL,DIR,MENU;TABLE;XMP,LISTING
d71 3
a73 3
    Tgc_BRlike		= 0x01000,/* BR,IMG,TAB allowed in any text */
    Tgc_APPLETlike	= 0x02000, /* APPLET,OBJECT,EMBED,SCRIPT */
    Tgc_HRlike		= 0x04000, /* HR,MARQUEE can contain all kinds of things
d75 1
a75 1
    Tgc_MAPlike		= 0x08000, /* MAP,AREA some specials that never contain
d78 3
a80 3
    Tgc_outer		= 0x10000, /* HTML,FRAMESET,FRAME,PLAINTEXT; */
    Tgc_BODYlike	= 0x20000, /* BODY,BODYTEXT,NOFRAMES,TEXTFLOW; */
    Tgc_HEADstuff	= 0x40000, /* HEAD,BASE,STYLE,TITLE; */
d82 1
a82 2
    Tgc_same		= 0x80000
} TagClass;
d86 4
a89 4
typedef enum _TagFlags {
    Tgf_endO		= 0x00001, /* end tag can be Omitted */
    Tgf_startO		= 0x00002, /* start tag can be Omitted */
    Tgf_mafse   	= 0x00004, /* Make Attribute-Free Start-tag End instead
d91 1
a91 1
    Tgf_strict		= 0x00008  /* Ignore contained invalid elements,
d93 2
a94 1
} TagFlags;
d96 2
a97 2
/*              A tag structure describes an SGML element.
**              -----------------------------------------
d100 1
a100 1
**      name            is the string which comes after the tag opener "<".
d102 2
a103 2
**      attributes      points to a zero-terminated array
**                      of attribute names.
d105 3
a107 3
**      litteral        determines how the SGML engine parses the charaters
**                      within the element. If set, tag openers are ignored
**                      except for that which opens a matching closing tag.
d112 7
a118 4
    char *      name;                   /* The name of the tag */
    attr *      attributes;             /* The list of acceptable attributes */
    int         number_of_attributes;   /* Number of possible attributes */
    SGMLContent contents;               /* End only on end tag @@@@ */
d130 2
a131 2
/*              DTD Information
**              ---------------
d136 7
a142 17
    char* name;
    long code;
} UC_entity_info;

typedef struct {
    HTTag *             tags;           /* Must be in strcmp order by name */
    int                 number_of_tags;
    CONST char **       entity_names;   /* Must be in strcmp order by name */
    size_t              number_of_entities;
    CONST UC_entity_info * unicode_entity_info; /* strcmp order by name */
    size_t              number_of_unicode_entities;
			/*
			**  All calls to unicode_entities table should be done
			**  through HTMLGetEntityUCValue (LYCharSets.c) only.
			**  unicode_entities table now holds *all*
			**  old-style entities too.
			*/
d146 1
a146 1
/*      SGML context passed to parsers
d148 1
a148 1
typedef struct _HTSGMLContext *HTSGMLContext;   /* Hidden */
d159 1
a159 1
   in SGML.  I'll rephrase that.  A structured object is am ordered
d161 3
a163 3
   The SGML parer outputs to a Structured object.  A Structured object
   can output its contents to another Structured Object. It's a kind of
   typed stream. The architecure is largely Dan Conolly's. Elements and
d165 2
a166 2
   DTD.  Knowledge of the SGML syntax is not here, though.
   
d168 1
a168 1
   
d171 1
a171 1
   
d177 1
a177 1
        char*  name;                            /* Just for diagnostics */
d179 2
a180 2
        void (*_free) PARAMS((
                HTStructured*   me));
d182 22
a203 22
        void (*_abort) PARAMS((
                HTStructured*   me,
                HTError         e));
                
        void (*put_character) PARAMS((
                HTStructured*   me,
                char            ch));
                                
        void (*put_string) PARAMS((
                HTStructured*   me,
                CONST char *    str));
                
        void (*_write) PARAMS((
                HTStructured*   me,
                CONST char *    str,
                int             len));
                
        void (*start_element) PARAMS((
                HTStructured*   me,
                int             element_number,
                CONST BOOL*     attribute_present,
                CONST char**    attribute_value,
d206 4
a209 4
                
        void (*end_element) PARAMS((
                HTStructured*   me,
                int             element_number,
d212 4
a215 4
        int (*put_entity) PARAMS((
                HTStructured*   me,
                int             entity_number));
                
d220 1
a220 1
  into additional HTStructuredClass members.  FOr now they don't do
d225 1
d232 1
a232 1
   
d246 3
a248 3
**      dtd             must point to a DTD structure as defined above
**      callbacks       must point to user routines.
**      callData        is returned in callbacks transparently.
d250 1
a250 1
**              The default tag starter has been processed.
d259 1
a259 1
#endif  /* SGML_H */
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
