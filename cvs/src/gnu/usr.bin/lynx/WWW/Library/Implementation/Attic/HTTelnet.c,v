head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.20
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.8;
commitid	EcR8E7r0stjLUV4p;

1.8
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.7;
commitid	lGGuvDWEniklWrQe;

1.7
date	2011.07.22.14.10.38;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.22.04.01.43;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.25.18.16.49;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	98.11.16.17.21.03;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.47;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.47;	author maja;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HTTelnet.c,v 1.41 2013/11/28 11:15:19 tom Exp $
 *
 *		Telnet Access, Rlogin, etc			HTTelnet.c
 *		==========================
 *
 * Authors
 *	TBL	Tim Berners-Lee timbl@@info.cern.ch
 *	JFG	Jean-Francois Groff jgh@@next.com
 *	DD	Denis DeLaRoca (310) 825-4580  <CSP1DWD@@mvs.oac.ucla.edu>
 * History
 *	 8 Jun 92 Telnet hopping prohibited as telnet is not secure (TBL)
 *	26 Jun 92 When over DECnet, suppressed FTP, Gopher and News. (JFG)
 *	 6 Oct 92 Moved HTClientHost and logfile into here. (TBL)
 *	17 Dec 92 Tn3270 added, bug fix. (DD)
 *	 2 Feb 93 Split from HTAccess.c.  Registration.(TBL)
 */

#include <HTUtils.h>
#include <LYUtils.h>

/* Implements:
*/
#include <HTTelnet.h>

#include <HTParse.h>
#include <HTAnchor.h>
#include <HTTP.h>
#include <HTFile.h>

#include <HTTCP.h>
#include <HText.h>

#include <HTAccess.h>
#include <HTAlert.h>

#include <LYStrings.h>
#include <LYClean.h>
#include <LYLeaks.h>

#ifdef __GNUC__
static void do_system(char *) GCC_UNUSED;
#endif

static void do_system(char *command)
{
    if (non_empty(command)) {
	CTRACE((tfp, "HTTelnet: Command is: %s\n\n", command));
	LYSystem(command);
    }
    FREE(command);
}

/*	Telnet or "rlogin" access
 *	-------------------------
 */
static int remote_session(char *acc_method, char *host)
{
    const char *program;
    char *user = host;
    char *password = NULL;
    char *cp;
    char *hostname;
    char *port;
    char *command = NULL;
    enum _login_protocol {
	telnet,
	rlogin,
	tn3270
    } login_protocol =
      strcmp(acc_method, "rlogin") == 0 ? rlogin :
      strcmp(acc_method, "tn3270") == 0 ? tn3270 : telnet;

    /*
     * Modified to allow for odd chars in a username only if exists.
     * 05-28-94 Lynx 2-3-1 Garrett Arch Blythe
     */
    /* prevent telnet://hostname;rm -rf *  URL's (VERY BAD)
     *  *cp=0;        // terminate at any ;,<,>,`,|,",' or space or return
     * or tab to prevent security hole
     */
    for (cp = (StrChr(host, '@@') ? StrChr(host, '@@') : host); *cp != '\0';
	 cp++) {
	if (!isalnum(UCH(*cp)) && *cp != '_' && *cp != '-' &&
	    *cp != ':' && *cp != '.' && *cp != '@@') {
	    *cp = '\0';
	    break;
	}
    }

    hostname = StrChr(host, '@@');

    if (hostname) {
	*hostname++ = '\0';	/* Split */
    } else {
	hostname = host;
	user = NULL;		/* No user specified */
    }

    port = StrChr(hostname, ':');
    if (port)
	*port++ = '\0';		/* Split */

    if (*hostname == '\0') {
	CTRACE((tfp, "HTTelnet: No host specified!\n"));
	return HT_NO_DATA;
    } else if (!valid_hostname(hostname)) {
	char *prefix = NULL;
	char *line = NULL;

	CTRACE((tfp, "HTTelnet: Invalid hostname %s!\n", host));
	HTSprintf0(&prefix,
		   gettext("remote %s session:"), acc_method);
	HTSprintf0(&line,
		   gettext("Invalid hostname %s"), host);
	HTAlwaysAlert(prefix, line);
	FREE(prefix);
	FREE(line);
	return HT_NO_DATA;
    }

    if (user) {
	password = StrChr(user, ':');
	if (password) {
	    *password++ = '\0';
	}
    }

    /* If the person is already telnetting etc, forbid hopping */
    /* This is a security precaution, for us and remote site */

    if (HTSecure) {

#ifdef TELNETHOPPER_MAIL
	HTSprintf0(&command,
		   "finger @@%s | mail -s \"**telnethopper %s\" tbl@@dxcern.cern.ch",
		   HTClientHost, HTClientHost);
	do_system(command);
#endif
	printf("\n\nSorry, but the service you have selected is one\n");
	printf("to which you have to log in.  If you were running www\n");
	printf("on your own computer, you would be automatically connected.\n");
	printf("For security reasons, this is not allowed when\n");
	printf("you log in to this information service remotely.\n\n");

	printf("You can manually connect to this service using %s\n",
	       acc_method);
	printf("to host %s", hostname);
	if (user)
	    printf(", user name %s", user);
	if (password)
	    printf(", password %s", password);
	if (port)
	    printf(", port %s", port);
	printf(".\n\n");
	return HT_NO_DATA;
    }

    /* Not all telnet servers get it even if user name is specified so we
     * always tell the guy what to log in as.
     */
    if (user && login_protocol != rlogin)
	printf("When you are connected, log in as:  %s\n", user);
    if (password && login_protocol != rlogin)
	printf("                  The password is:  %s\n", password);
    fflush(stdout);

/*
 *	NeXTSTEP is the implied version of the NeXT operating system.
 *		You may need to define this yourself.
 */
#if	!defined(TELNET_DONE) && (defined(NeXT) && defined(NeXTSTEP) && NeXTSTEP<=20100)
#define FMT_TELNET "%s%s%s %s %s"

    if ((program = HTGetProgramPath(ppTELNET)) != NULL) {
	HTAddParam(&command, FMT_TELNET, 1, program);
	HTOptParam(&command, FMT_TELNET, 2, user ? " -l " : "");
	HTAddParam(&command, FMT_TELNET, 3, user);
	HTAddParam(&command, FMT_TELNET, 4, hostname);
	HTAddParam(&command, FMT_TELNET, 5, port);
	HTEndParam(&command, FMT_TELNET, 5);
    }
    do_system(command);
#define TELNET_DONE
#endif

/* Most unix machines support username only with rlogin */
#if !defined(TELNET_DONE) && (defined(UNIX) || defined(DOSPATH) || defined(__CYGWIN__))

#define FMT_RLOGIN "%s %s%s%s"
#define FMT_TN3270 "%s %s %s"
#define FMT_TELNET "%s %s %s"

    switch (login_protocol) {
    case rlogin:
	if ((program = HTGetProgramPath(ppRLOGIN)) != NULL) {
	    HTAddParam(&command, FMT_RLOGIN, 1, program);
	    HTAddParam(&command, FMT_RLOGIN, 2, hostname);
	    HTOptParam(&command, FMT_RLOGIN, 3, user ? " -l " : "");
	    HTAddParam(&command, FMT_RLOGIN, 4, user);
	    HTEndParam(&command, FMT_RLOGIN, 4);
	}
	break;

    case tn3270:
	if ((program = HTGetProgramPath(ppTN3270)) != NULL) {
	    HTAddParam(&command, FMT_TN3270, 1, program);
	    HTAddParam(&command, FMT_TN3270, 2, hostname);
	    HTAddParam(&command, FMT_TN3270, 3, port);
	    HTEndParam(&command, FMT_TN3270, 3);
	}
	break;

    case telnet:
	if ((program = HTGetProgramPath(ppTELNET)) != NULL) {
	    HTAddParam(&command, FMT_TELNET, 1, program);
	    HTAddParam(&command, FMT_TELNET, 2, hostname);
	    HTAddParam(&command, FMT_TELNET, 3, port);
	    HTEndParam(&command, FMT_TELNET, 3);
	}
	break;
    }

    LYSystem(command);
#define TELNET_DONE
#endif /* unix */

/* VMS varieties */
#if !defined(TELNET_DONE) && (defined(MULTINET))
    if (login_protocol == rlogin) {
	HTSprintf0(&command, "RLOGIN%s%s%s%s%s %s",	/*lm 930713 */
		   user ? "/USERNAME=\"" : "",
		   NonNull(user),
		   user ? "\"" : "",
		   port ? "/PORT=" : "",
		   NonNull(port),
		   hostname);

    } else if (login_protocol == tn3270) {
	HTSprintf0(&command, "TELNET/TN3270 %s%s %s",
		   port ? "/PORT=" : "",
		   NonNull(port),
		   hostname);

    } else {			/* TELNET */
	HTSprintf0(&command, "TELNET %s%s %s",
		   port ? "/PORT=" : "",
		   NonNull(port),
		   hostname);
    }

    do_system(command);
#define TELNET_DONE
#endif /* MULTINET */

#if !defined(TELNET_DONE) && defined(WIN_TCP)
    if ((cp = getenv("WINTCP_COMMAND_STYLE")) != NULL &&
	0 == strncasecomp(cp, "VMS", 3)) {	/* VMS command syntax */
	if (login_protocol == rlogin) {
	    HTSprintf0(&command, "RLOGIN%s%s%s%s%s %s",		/*lm 930713 */
		       user ? "/USERNAME=\"" : "",
		       NonNull(user),
		       user ? "\"" : "",
		       port ? "/PORT=" : "",
		       NonNull(port),
		       hostname);

	} else if (login_protocol == tn3270) {
	    HTSprintf0(&command, "TELNET/TN3270 %s%s %s",
		       port ? "/PORT=" : "",
		       NonNull(port),
		       hostname);

	} else {		/* TELNET */
	    HTSprintf0(&command, "TELNET %s%s %s",
		       port ? "/PORT=" : "",
		       NonNull(port),
		       hostname);
	}

    } else {			/* UNIX command syntax */
	if (login_protocol == rlogin) {
	    HTSprintf0(&command, "RLOGIN %s%s%s%s%s",
		       hostname,
		       user ? " -l " : "",
		       user ? "\"" : "",
		       NonNull(user),
		       user ? "\"" : "");

	} else if (login_protocol == tn3270) {
	    HTSprintf0(&command, "TN3270 %s %s",
		       hostname,
		       NonNull(port));

	} else {		/* TELNET */
	    HTSprintf0(&command, "TELNET %s %s",
		       hostname,
		       NonNull(port));
	}
    }

    do_system(command);
#define TELNET_DONE
#endif /* WIN_TCP */

#if !defined(TELNET_DONE) && defined(UCX)
    if (login_protocol == rlogin) {
	HTSprintf0(&command, "RLOGIN%s%s%s %s %s",
		   user ? "/USERNAME=\"" : "",
		   NonNull(user),
		   user ? "\"" : "",
		   hostname,
		   NonNull(port));

    } else if (login_protocol == tn3270) {
	HTSprintf0(&command, "TN3270 %s %s",
		   hostname,
		   NonNull(port));

    } else {			/* TELNET */
	HTSprintf0(&command, "TELNET %s %s",
		   hostname,
		   NonNull(port));
    }

    do_system(command);
#define TELNET_DONE
#endif /* UCX */

#if !defined(TELNET_DONE) && defined(CMU_TCP)
    if (login_protocol == telnet) {
	HTSprintf0(&command, "TELNET %s%s %s",
		   port ? "/PORT=" : "",
		   NonNull(port),
		   hostname);
	do_system(command);
    } else {
	printf("\nSorry, this browser was compiled without the %s access option.\n",
	       acc_method);
	printf("\nPress <return> to return to Lynx.");
	LYgetch();
	HadVMSInterrupt = FALSE;
    }
#define TELNET_DONE
#endif /* CMU_TCP */

#if !defined(TELNET_DONE) && defined(SOCKETSHR_TCP)
    if (getenv("MULTINET_SOCKET_LIBRARY") != NULL) {
	if (login_protocol == rlogin) {
	    HTSprintf0(&command, "MULTINET RLOGIN%s%s%s%s %s",	/*lm 930713 */
		       user ? "/USERNAME=" : "",
		       NonNull(user),
		       port ? "/PORT=" : "",
		       NonNull(port),
		       hostname);

	} else if (login_protocol == tn3270) {
	    HTSprintf0(&command, "MULTINET TELNET/TN3270 %s%s %s",
		       port ? "/PORT=" : "",
		       NonNull(port),
		       hostname);

	} else {		/* TELNET */
	    HTSprintf0(&command, "MULTINET TELNET %s%s %s",
		       port ? "/PORT=" : "",
		       NonNull(port),
		       hostname);
	}

	do_system(command);
	return HT_NO_DATA;	/* Ok - it was done but no data */
    } else if ((cp = getenv("WINTCP_COMMAND_STYLE")) != NULL) {
	if (0 == strncasecomp(cp, "VMS", 3)) {	/* VMS command syntax */
	    if (login_protocol == rlogin) {
		HTSprintf0(&command, "RLOGIN%s%s%s%s %s",	/*lm 930713 */
			   user ? "/USERNAME=" : "",
			   NonNull(user),
			   port ? "/PORT=" : "",
			   NonNull(port),
			   hostname);
	    } else if (login_protocol == tn3270) {
		HTSprintf0(&command, "TELNET/TN3270 %s%s %s",
			   port ? "/PORT=" : "",
			   NonNull(port),
			   hostname);
	    } else {		/* TELNET */
		HTSprintf0(&command, "TELNET %s%s %s",
			   port ? "/PORT=" : "",
			   NonNull(port),
			   hostname);
	    }
	} else {		/* UNIX command syntax */
	    if (login_protocol == rlogin) {
		HTSprintf0(&command, "RLOGIN %s%s%s",
			   hostname,
			   user ? " -l " : "",
			   NonNull(user));
	    } else if (login_protocol == tn3270) {
		HTSprintf0(&command, "TN3270 %s %s",
			   hostname,
			   NonNull(port));
	    } else {		/* TELNET */
		HTSprintf0(&command, "TELNET %s %s",
			   hostname,
			   NonNull(port));
	    }
	}

	do_system(command);
	return HT_NO_DATA;	/* Ok - it was done but no data */
    } else if (getenv("UCX$DEVICE") != NULL
	       || getenv("TCPIP$DEVICE") != NULL) {
	if (login_protocol == rlogin) {
	    HTSprintf0(&command, "RLOGIN%s%s %s %s",
		       user ? "/USERNAME=" : "",
		       NonNull(user),
		       hostname,
		       NonNull(port));

	} else if (login_protocol == tn3270) {
	    HTSprintf0(&command, "TN3270 %s %s",
		       hostname,
		       NonNull(port));

	} else {		/* TELNET */
	    HTSprintf0(&command, "TELNET %s %s",
		       hostname,
		       NonNull(port));
	}

	do_system(command);
	return HT_NO_DATA;	/* Ok - it was done but no data */
    } else if (getenv("CMUTEK_ROOT") != NULL) {
	if (login_protocol == telnet) {
	    HTSprintf0(&command, "TELNET %s%s %s",
		       port ? "/PORT=" : "",
		       NonNull(port),
		       hostname);
	    do_system(command);
	} else {
	    printf("\nSorry, this browser was compiled without the %s access option.\n",
		   acc_method);
	    printf("\nPress <return> to return to Lynx.");
	    LYgetch();
	    HadVMSInterrupt = FALSE;
	}
    } else {
	if (login_protocol == telnet) {
	    HTSprintf0(&command, "TELNET %s%s %s",
		       port ? "/PORT=" : "",
		       NonNull(port),
		       hostname);
	    do_system(command);
	} else {
	    printf("\nSorry, this browser was compiled without the %s access option.\n",
		   acc_method);
	    printf("\nPress <return> to return to Lynx.");
	    LYgetch();
	    HadVMSInterrupt = FALSE;
	}
    }
#define TELNET_DONE
#endif /* SOCKETSHR_TCP */

#if !defined(TELNET_DONE) && (defined(SIMPLE_TELNET) || defined(VM))
    if (login_protocol == telnet) {	/* telnet only */
	HTSprintf0(&command, "TELNET  %s",	/* @@@@ Bug: port ignored */
		   hostname);
	do_system(command);
	return HT_NO_DATA;	/* Ok - it was done but no data */
    }
#define TELNET_DONE
#endif

#ifndef TELNET_DONE
    printf("\nSorry, this browser was compiled without the %s access option.\n",
	   acc_method);
    printf("\nTo access the information you must %s to %s", acc_method, hostname);
    if (port)
	printf(" (port %s)", port);
    if (user)
	printf("\nlogging in with username %s", user);
    printf(".\n");
    {
	printf("\nPress <return> to return to Lynx.");
	fflush(stdout);
	LYgetch();
#ifdef VMS
	HadVMSInterrupt = FALSE;
#endif /* VMS */
    }
#endif /* !TELNET_DONE */
    return HT_NO_DATA;
}

/*	"Load a document" -- establishes a session
 *	------------------------------------------
 *
 * On entry,
 *	addr		must point to the fully qualified hypertext reference.
 *
 * On exit,
 *	returns		<0	Error has occurred.
 *			>=0	Value of file descriptor or socket to be used
 *				 to read data.
 *	*pFormat	Set to the format of the file, if known.
 *			(See WWW.h)
 *
 */
static int HTLoadTelnet(const char *addr,
			HTParentAnchor *anchor GCC_UNUSED,
			HTFormat format_out GCC_UNUSED,
			HTStream *sink)		/* Ignored */
{
    char *acc_method;
    char *host;
    int status;

    if (sink) {
	CTRACE((tfp,
		"HTTelnet: Can't output a live session -- must be interactive!\n"));
	return HT_NO_DATA;
    }
    acc_method = HTParse(addr, STR_FILE_URL, PARSE_ACCESS);

    host = HTParse(addr, "", PARSE_HOST);
    if (!host || *host == '\0') {
	status = HT_NO_DATA;
	CTRACE((tfp, "HTTelnet: No host specified!\n"));
    } else {
	status = remote_session(acc_method, host);
    }

    FREE(host);
    FREE(acc_method);
    return status;
}

#ifdef GLOBALDEF_IS_MACRO
#define _HTTELNET_C_1_INIT { "telnet", HTLoadTelnet, NULL }
#define _HTTELNET_C_2_INIT { "rlogin", HTLoadTelnet, NULL }
#define _HTTELNET_C_3_INIT { "tn3270", HTLoadTelnet, NULL }
GLOBALDEF(HTProtocol, HTTelnet, _HTTELNET_C_1_INIT);
GLOBALDEF(HTProtocol, HTRlogin, _HTTELNET_C_2_INIT);
GLOBALDEF(HTProtocol, HTTn3270, _HTTELNET_C_3_INIT);
#else
GLOBALDEF HTProtocol HTTelnet =
{"telnet", HTLoadTelnet, NULL};
GLOBALDEF HTProtocol HTRlogin =
{"rlogin", HTLoadTelnet, NULL};
GLOBALDEF HTProtocol HTTn3270 =
{"tn3270", HTLoadTelnet, NULL};
#endif /* GLOBALDEF_IS_MACRO */
@


1.8
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.7
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: HTTelnet.c,v 1.38 2007/07/01 23:13:22 Daniel.Dickman Exp $
d47 1
a47 1
    if (!isEmpty(command)) {
a49 1
	FREE(command);
d51 1
d82 1
a82 1
    for (cp = (strchr(host, '@@') ? strchr(host, '@@') : host); *cp != '\0';
d91 1
a91 1
    hostname = strchr(host, '@@');
d100 1
a100 1
    port = strchr(hostname, ':');
d104 1
a104 1
    if (!hostname || *hostname == '\0') {
d123 1
a123 1
	password = strchr(user, ':');
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 4
a4 1
/*		Telnet Acees, Roligin, etc			HTTelnet.c
d41 4
d80 1
a80 1
     * or tab to prevent security whole
@


1.5
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d2 13
a14 13
**		==========================
**
** Authors
**	TBL	Tim Berners-Lee timbl@@info.cern.ch
**	JFG	Jean-Francois Groff jgh@@next.com
**	DD	Denis DeLaRoca (310) 825-4580  <CSP1DWD@@mvs.oac.ucla.edu>
** History
**	 8 Jun 92 Telnet hopping prohibited as telnet is not secure (TBL)
**	26 Jun 92 When over DECnet, suppressed FTP, Gopher and News. (JFG)
**	 6 Oct 92 Moved HTClientHost and logfile into here. (TBL)
**	17 Dec 92 Tn3270 added, bug fix. (DD)
**	 2 Feb 93 Split from HTAccess.c.  Registration.(TBL)
*/
d38 1
a38 1
PRIVATE void do_system ARGS1(char *, command)
d48 3
a50 3
**	-------------------------
*/
PRIVATE int remote_session ARGS2(char *, acc_method, char *, host)
d52 29
a80 25
    CONST char *program;
	char * user = host;
	char * password = NULL;
	char * cp;
	char * hostname;
	char * port;
	char * command = NULL;
	enum _login_protocol { telnet, rlogin, tn3270 } login_protocol =
		strcmp(acc_method, "rlogin") == 0 ? rlogin :
		strcmp(acc_method, "tn3270") == 0 ? tn3270 : telnet;

	/*
	 *	Modified to allow for odd chars in a username only if exists.
	 *	05-28-94 Lynx 2-3-1 Garrett Arch Blythe
	 */
	/* prevent telnet://hostname;rm -rf *  URL's (VERY BAD)
	 *  *cp=0;  / * terminate at any ;,<,>,`,|,",' or space or return
	 *  or tab to prevent security whole
	 */
	for(cp = host; *cp != '\0'; cp++) {
	    if(!isalnum(UCH(*cp)) && *cp != '_' && *cp != '-' &&
				*cp != ':' && *cp != '.' && *cp != '@@') {
		*cp = '\0';
		break;
	    }
d82 1
d84 1
a84 1
	hostname = strchr(host, '@@');
d86 10
a95 6
	if (hostname) {
	    *hostname++ = '\0'; /* Split */
	} else {
	    hostname = host;
	    user = NULL;	/* No user specified */
	}
d97 17
a113 3
	port = strchr(hostname, ':');
	if (port)
	    *port++ = '\0';	/* Split */
d115 4
a118 22
	if (!hostname || *hostname == '\0') {
	    CTRACE((tfp, "HTTelnet: No host specified!\n"));
	    return HT_NO_DATA;
	} else if (!valid_hostname(hostname)) {
	    char *prefix = NULL;
	    char *line = NULL;
	    CTRACE((tfp, "HTTelnet: Invalid hostname %s!\n", host));
	    HTSprintf0(&prefix,
		       gettext("remote %s session:"), acc_method);
	    HTSprintf0(&line,
		       gettext("Invalid hostname %s"), host);
	    HTAlwaysAlert(prefix, line);
	    FREE(prefix);
	    FREE(line);
	    return HT_NO_DATA;
	}

	if (user) {
	    password = strchr(user, ':');
	    if (password) {
		*password++ = '\0';
	    }
d120 1
d122 2
a123 2
	/* If the person is already telnetting etc, forbid hopping */
	/* This is a security precaution, for us and remote site */
d125 1
a125 1
	if (HTSecure) {
d128 4
a131 4
	    HTSprintf0(&command,
	      "finger @@%s | mail -s \"**telnethopper %s\" tbl@@dxcern.cern.ch",
	       HTClientHost, HTClientHost);
	    do_system(command);
d133 18
a150 5
	    printf("\n\nSorry, but the service you have selected is one\n");
	    printf("to which you have to log in.  If you were running www\n");
	    printf("on your own computer, you would be automatically connected.\n");
	    printf("For security reasons, this is not allowed when\n");
	    printf("you log in to this information service remotely.\n\n");
d152 8
a159 18
	    printf("You can manually connect to this service using %s\n",
		   acc_method);
	    printf("to host %s", hostname);
	    if (user) printf(", user name %s", user);
	    if (password) printf(", password %s", password);
	    if (port) printf(", port %s", port);
	    printf(".\n\n");
	    return HT_NO_DATA;
	}

	/* Not all telnet servers get it even if user name is specified
	** so we always tell the guy what to log in as
	*/
	if (user && login_protocol != rlogin)
	    printf("When you are connected, log in as:  %s\n", user);
	if (password && login_protocol != rlogin)
	    printf("                  The password is:  %s\n", password);
	fflush(stdout);
d168 9
a176 9
	if ((program = HTGetProgramPath(ppTELNET)) != NULL) {
	    HTAddParam(&command, FMT_TELNET, 1, program);
	    HTOptParam(&command, FMT_TELNET, 2, user ? " -l " : "");
	    HTAddParam(&command, FMT_TELNET, 3, user);
	    HTAddParam(&command, FMT_TELNET, 4, hostname);
	    HTAddParam(&command, FMT_TELNET, 5, port);
	    HTEndParam(&command, FMT_TELNET, 5);
	}
	do_system(command);
d187 19
a205 10
	switch (login_protocol) {
	case rlogin:
	    if ((program = HTGetProgramPath(ppRLOGIN)) != NULL) {
		HTAddParam(&command, FMT_RLOGIN, 1, program);
		HTAddParam(&command, FMT_RLOGIN, 2, hostname);
		HTOptParam(&command, FMT_RLOGIN, 3, user ? " -l " : "");
		HTAddParam(&command, FMT_RLOGIN, 4, user);
		HTEndParam(&command, FMT_RLOGIN, 4);
	    }
	    break;
d207 6
a212 17
	case tn3270:
	    if ((program = HTGetProgramPath(ppTN3270)) != NULL) {
		HTAddParam(&command, FMT_TN3270, 1, program);
		HTAddParam(&command, FMT_TN3270, 2, hostname);
		HTAddParam(&command, FMT_TN3270, 3, port);
		HTEndParam(&command, FMT_TN3270, 3);
	    }
	    break;

	case telnet:
	    if ((program = HTGetProgramPath(ppTELNET)) != NULL) {
		HTAddParam(&command, FMT_TELNET, 1, program);
		HTAddParam(&command, FMT_TELNET, 2, hostname);
		HTAddParam(&command, FMT_TELNET, 3, port);
		HTEndParam(&command, FMT_TELNET, 3);
	    }
	    break;
d214 2
d217 1
a217 1
        LYSystem(command);
d223 29
d253 7
a259 7
	    HTSprintf0(&command, "RLOGIN%s%s%s%s%s %s",  /*lm 930713 */
		user ? "/USERNAME=\"" : "",
		NonNull(user),
		user ? "\"" : "",
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
d263 3
a265 3
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
d267 1
a267 1
	} else {  /* TELNET */
d269 3
a271 3
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
d274 8
a281 3
	do_system(command);
#define TELNET_DONE
#endif /* MULTINET */
d283 4
a286 11
#if !defined(TELNET_DONE) && defined(WIN_TCP)
	if ((cp=getenv("WINTCP_COMMAND_STYLE")) != NULL &&
	    0==strncasecomp(cp, "VMS", 3)) { /* VMS command syntax */
	    if (login_protocol == rlogin) {
		HTSprintf0(&command, "RLOGIN%s%s%s%s%s %s",  /*lm 930713 */
		    user ? "/USERNAME=\"" : "",
		    NonNull(user),
		    user ? "\"" : "",
		    port ? "/PORT=" : "",
		    NonNull(port),
		    hostname);
d288 4
a291 32
	    } else if (login_protocol == tn3270) {
		HTSprintf0(&command, "TELNET/TN3270 %s%s %s",
		    port ? "/PORT=" : "",
		    NonNull(port),
		    hostname);

	    } else {  /* TELNET */
		HTSprintf0(&command, "TELNET %s%s %s",
		    port ? "/PORT=" : "",
		    NonNull(port),
		    hostname);
	    }

	} else { /* UNIX command syntax */
	   if (login_protocol == rlogin) {
	       HTSprintf0(&command, "RLOGIN %s%s%s%s%s",
		   hostname,
		   user ? " -l " : "",
		   user ? "\"" : "",
		   NonNull(user),
		   user ? "\"" : "");

	    } else if (login_protocol == tn3270) {
		HTSprintf0(&command, "TN3270 %s %s",
		    hostname,
		    NonNull(port));

	    } else {  /* TELNET */
		HTSprintf0(&command, "TELNET %s %s",
		    hostname,
		    NonNull(port));
	    }
d293 1
d295 1
a295 1
	do_system(command);
d300 7
a306 7
	if (login_protocol == rlogin) {
	    HTSprintf0(&command, "RLOGIN%s%s%s %s %s",
		user ? "/USERNAME=\"" : "",
		NonNull(user),
		user ? "\"" : "",
		hostname,
		NonNull(port));
d308 4
a311 4
	} else if (login_protocol == tn3270) {
	    HTSprintf0(&command, "TN3270 %s %s",
		hostname,
		NonNull(port));
d313 5
a317 5
	} else {  /* TELNET */
	    HTSprintf0(&command, "TELNET %s %s",
		hostname,
		NonNull(port));
	}
d319 1
a319 1
	do_system(command);
d324 13
a336 15
	if (login_protocol == telnet) {
	    HTSprintf0(&command, "TELNET %s%s %s",
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
	    do_system(command);
	}
	else {
	    printf(
	"\nSorry, this browser was compiled without the %s access option.\n",
		acc_method);
	    printf("\nPress <return> to return to Lynx.");
	    LYgetch();
	    HadVMSInterrupt = FALSE;
	}
d343 6
a348 6
	    HTSprintf0(&command, "MULTINET RLOGIN%s%s%s%s %s",  /*lm 930713 */
		user ? "/USERNAME=" : "",
		NonNull(user),
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
d352 3
a354 3
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
d356 1
a356 1
	} else {  /* TELNET */
d358 3
a360 3
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
d364 3
a366 4
	return HT_NO_DATA;		/* Ok - it was done but no data */
    }
    else if ((cp=getenv("WINTCP_COMMAND_STYLE")) != NULL) {
	if (0==strncasecomp(cp, "VMS", 3)) { /* VMS command syntax */
d368 6
a373 6
		HTSprintf0(&command, "RLOGIN%s%s%s%s %s",  /*lm 930713 */
		    user ? "/USERNAME=" : "",
		    NonNull(user),
		    port ? "/PORT=" : "",
		    NonNull(port),
		    hostname);
d376 4
a379 4
		    port ? "/PORT=" : "",
		    NonNull(port),
		    hostname);
	    } else {  /* TELNET */
d381 3
a383 3
		    port ? "/PORT=" : "",
		    NonNull(port),
		    hostname);
d385 1
a385 1
	} else { /* UNIX command syntax */
d388 3
a390 3
		    hostname,
		    user ? " -l " : "",
		    NonNull(user));
d393 3
a395 3
		    hostname,
		    NonNull(port));
	    } else {  /* TELNET */
d397 2
a398 2
		    hostname,
		    NonNull(port));
d403 3
a405 4
	return HT_NO_DATA;		/* Ok - it was done but no data */
    }
    else if (getenv("UCX$DEVICE") != NULL
          || getenv("TCPIP$DEVICE") != NULL) {
d408 4
a411 4
		user ? "/USERNAME=" : "",
		NonNull(user),
		hostname,
		NonNull(port));
d415 2
a416 2
		hostname,
		NonNull(port));
d418 1
a418 1
	} else {  /* TELNET */
d420 2
a421 2
		hostname,
		NonNull(port));
d425 2
a426 3
	return HT_NO_DATA;		/* Ok - it was done but no data */
    }
    else if (getenv("CMUTEK_ROOT") != NULL) {
d429 3
a431 3
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
d433 3
a435 5
	}
	else {
	    printf(
	  "\nSorry, this browser was compiled without the %s access option.\n",
		acc_method);
d440 1
a440 2
    }
    else {
d443 3
a445 3
		port ? "/PORT=" : "",
		NonNull(port),
		hostname);
d447 3
a449 5
	}
	else {
	    printf(
	  "\nSorry, this browser was compiled without the %s access option.\n",
		acc_method);
d459 6
a464 6
	if (login_protocol == telnet) {			/* telnet only */
	    HTSprintf0(&command, "TELNET  %s",	/* @@@@ Bug: port ignored */
		hostname);
	    do_system(command);
	    return HT_NO_DATA;		/* Ok - it was done but no data */
	}
d469 12
a480 14
	printf(
	"\nSorry, this browser was compiled without the %s access option.\n",
		acc_method);
	printf(
	"\nTo access the information you must %s to %s", acc_method, hostname);
	if (port)
	    printf(" (port %s)", port);
	if (user)
	    printf("\nlogging in with username %s", user);
	printf(".\n");
	{
	    printf("\nPress <return> to return to Lynx.");
	    fflush(stdout);
	    LYgetch();
d482 1
a482 1
	    HadVMSInterrupt = FALSE;
d484 1
a484 1
	}
d486 1
a486 1
	return HT_NO_DATA;
d490 17
a506 21
**	------------------------------------------
**
** On entry,
**	addr		must point to the fully qualified hypertext reference.
**
** On exit,
**	returns		<0	Error has occured.
**			>=0	Value of file descriptor or socket to be used
**				 to read data.
**	*pFormat	Set to the format of the file, if known.
**			(See WWW.h)
**
*/
PRIVATE int HTLoadTelnet
ARGS4
(
 CONST char *,		addr,
 HTParentAnchor *,	anchor GCC_UNUSED,
 HTFormat,		format_out GCC_UNUSED,
 HTStream *,		sink			/* Ignored */
)
d508 2
a509 2
    char * acc_method;
    char * host;
d513 2
a514 1
	CTRACE((tfp, "HTTelnet: Can't output a live session -- must be interactive!\n"));
d517 1
a517 1
    acc_method =  HTParse(addr, STR_FILE_URL, PARSE_ACCESS);
a531 1

d536 3
a538 3
GLOBALDEF (HTProtocol, HTTelnet, _HTTELNET_C_1_INIT );
GLOBALDEF (HTProtocol, HTRlogin, _HTTELNET_C_2_INIT );
GLOBALDEF (HTProtocol, HTTn3270, _HTTELNET_C_3_INIT );
d540 6
a545 3
GLOBALDEF PUBLIC HTProtocol HTTelnet = { "telnet", HTLoadTelnet, NULL };
GLOBALDEF PUBLIC HTProtocol HTRlogin = { "rlogin", HTLoadTelnet, NULL };
GLOBALDEF PUBLIC HTProtocol HTTn3270 = { "tn3270", HTLoadTelnet, NULL };
@


1.4
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d35 1
d40 5
a44 7
    CTRACE((tfp, "HTTelnet: Command is: %s\n\n", command));
#ifdef UNIX	/* want LYSystem's signal sanitizing - kw */
    LYSystem(command);
#else		/* Non-UNIX should use LYSystem too? - left for now - kw */
    system(command);
#endif
    FREE(command);
d52 1
d159 8
a166 7
	HTAddParam(&command, FMT_TELNET, 1, TELNET_PATH);
	HTOptParam(&command, FMT_TELNET, 2, user ? " -l " : "");
	HTAddParam(&command, FMT_TELNET, 3, user);
	HTAddParam(&command, FMT_TELNET, 4, hostname);
	HTAddParam(&command, FMT_TELNET, 5, port);
	HTEndParam(&command, FMT_TELNET, 5);

d178 10
a187 1
	if (login_protocol == rlogin) {
d189 8
a196 5
	    HTAddParam(&command, FMT_RLOGIN, 1, RLOGIN_PATH);
	    HTAddParam(&command, FMT_RLOGIN, 2, hostname);
	    HTOptParam(&command, FMT_RLOGIN, 3, user ? " -l " : "");
	    HTAddParam(&command, FMT_RLOGIN, 4, user);
	    HTEndParam(&command, FMT_RLOGIN, 4);
d198 8
a205 13
	} else if (login_protocol == tn3270) {

	    HTAddParam(&command, FMT_TN3270, 1, TN3270_PATH);
	    HTAddParam(&command, FMT_TN3270, 2, hostname);
	    HTAddParam(&command, FMT_TN3270, 3, port);
	    HTEndParam(&command, FMT_TN3270, 3);

	} else {  /* TELNET */

	    HTAddParam(&command, FMT_TELNET, 1, TELNET_PATH);
	    HTAddParam(&command, FMT_TELNET, 2, hostname);
	    HTAddParam(&command, FMT_TELNET, 3, port);
	    HTEndParam(&command, FMT_TELNET, 3);
d208 1
a208 16
#ifdef __DJGPP__
#ifdef WATT32
	_eth_release();
#endif /* WATT32 */
       __djgpp_set_ctrl_c(0);
       _go32_want_ctrl_break(1);
#endif /* __DJGPP__ */
	do_system(command);
#ifdef __DJGPP__
       __djgpp_set_ctrl_c(1);
       _go32_want_ctrl_break(0);
#ifdef WATT32
       _eth_init();
#endif /* WATT32 */
#endif /* __DJGPP__ */

d217 1
a217 1
		user ? user : "",
d220 1
a220 1
		port ? port : "",
d226 1
a226 1
		port ? port : "",
d232 1
a232 1
		port ? port : "",
d246 1
a246 1
		    user ? user : "",
d249 1
a249 1
		    port ? port : "",
d255 1
a255 1
		    port ? port : "",
d261 1
a261 1
		    port ? port : "",
d271 1
a271 1
		   user ? user : "",
d277 1
a277 1
		    port ? port : "");
d282 1
a282 1
		    port ? port : "");
d294 1
a294 1
		user ? user : "",
d297 1
a297 1
		port ? port : "");
d302 1
a302 1
		port ? port : "");
d307 1
a307 1
		port ? port : "");
d318 1
a318 1
		port ? port : "",
a322 2
	    extern BOOLEAN HadVMSInterrupt;

d338 1
a338 1
		user ? user : "",
d340 1
a340 1
		port ? port : "",
d346 1
a346 1
		port ? port : "",
d352 1
a352 1
		port ? port : "",
d364 1
a364 1
		    user ? user : "",
d366 1
a366 1
		    port ? port : "",
d371 1
a371 1
		    port ? port : "",
d376 1
a376 1
		    port ? port : "",
d384 1
a384 1
		    user ? user : "");
d388 1
a388 1
		    port ? port : "");
d392 1
a392 1
		    port ? port : "");
d404 1
a404 1
		user ? user : "",
d406 1
a406 1
		port ? port : "");
d411 1
a411 1
		port ? port : "");
d416 1
a416 1
		port ? port : "");
d426 1
a426 1
		port ? port : "",
a430 2
	    extern BOOLEAN HadVMSInterrupt;

d443 1
a443 1
		port ? port : "",
a447 2
	    extern BOOLEAN HadVMSInterrupt;

d485 1
a485 4
	    {
		extern BOOLEAN HadVMSInterrupt;
		HadVMSInterrupt = FALSE;
	    }
d523 1
a523 1
    acc_method =  HTParse(addr, "file:", PARSE_ACCESS);
@


1.3
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d39 4
a42 1
    CTRACE(tfp, "HTTelnet: Command is: %s\n\n", command);
d44 1
d72 1
a72 1
	    if(!isalnum(*cp) && *cp != '_' && *cp != '-' &&
d93 1
a93 1
	    CTRACE(tfp, "HTTelnet: No host specified!\n");
d98 1
a98 1
	    CTRACE(tfp, "HTTelnet: Invalid hostname %s!\n", host);
d156 1
a156 1
#if	defined(NeXT) && defined(NeXTSTEP) && NeXTSTEP<=20100
a166 1
	return HT_NO_DATA;		/* Ok - it was done but no data */
d170 2
a171 3
/* Most unix machines suppport username only with rlogin */
#if defined(unix) || defined(DOSPATH)
#ifndef TELNET_DONE
d201 3
d211 3
d215 1
a215 1
	return HT_NO_DATA;		/* Ok - it was done but no data */
a216 1
#endif /* !TELNET_DONE */
d220 1
a220 1
#if defined(MULTINET)
a243 1
	return HT_NO_DATA;		/* Ok - it was done but no data */
d247 17
a263 3
#if defined(WIN_TCP)
	{
	    char *cp;
d265 5
a269 43
	    if ((cp=getenv("WINTCP_COMMAND_STYLE")) != NULL &&
		0==strncasecomp(cp, "VMS", 3)) { /* VMS command syntax */
		if (login_protocol == rlogin) {
		    HTSprintf0(&command, "RLOGIN%s%s%s%s%s %s",  /*lm 930713 */
			user ? "/USERNAME=\"" : "",
			user ? user : "",
			user ? "\"" : "",
			port ? "/PORT=" : "",
			port ? port : "",
			hostname);

		} else if (login_protocol == tn3270) {
		    HTSprintf0(&command, "TELNET/TN3270 %s%s %s",
			port ? "/PORT=" : "",
			port ? port : "",
			hostname);

		} else {  /* TELNET */
		    HTSprintf0(&command, "TELNET %s%s %s",
			port ? "/PORT=" : "",
			port ? port : "",
			hostname);
		}

	    } else { /* UNIX command syntax */
	       if (login_protocol == rlogin) {
		   HTSprintf0(&command, "RLOGIN %s%s%s%s%s",
		       hostname,
		       user ? " -l " : "",
		       user ? "\"" : "",
		       user ? user : "",
		       user ? "\"" : "");

		} else if (login_protocol == tn3270) {
		    HTSprintf0(&command, "TN3270 %s %s",
			hostname,
			port ? port : "");

		} else {  /* TELNET */
		    HTSprintf0(&command, "TELNET %s %s",
			hostname,
			port ? port : "");
		}
d272 19
a290 2
	    do_system(command);
	    return HT_NO_DATA;		/* Ok - it was done but no data */
d292 2
d297 1
a297 1
#ifdef UCX
a317 1
	return HT_NO_DATA;		/* Ok - it was done but no data */
d321 1
a321 1
#ifdef CMU_TCP
a338 1
	return HT_NO_DATA;		/* Ok - it was done but no data */
d342 1
a342 4
#ifdef SOCKETSHR_TCP
  {
    char *cp;

d408 2
a409 1
    else if (getenv("UCX$DEVICE") != NULL) {
a448 1
	return HT_NO_DATA;		/* Ok - it was done but no data */
a467 1
	return HT_NO_DATA;		/* Ok - it was done but no data */
a468 1
  }
d472 1
a472 4
#ifdef VM
#define SIMPLE_TELNET
#endif
#ifdef SIMPLE_TELNET
d479 1
d504 1
a505 1
#endif /* !TELNET_DONE */
d536 1
a536 1
	CTRACE(tfp, "HTTelnet: Can't output a live session -- must be interactive!\n");
d544 1
a544 1
	CTRACE(tfp, "HTTelnet: No host specified!\n");
@


1.2
log
@simple fixes for buffer overflows in telnet:// tn3270:// and rlogin:// and a fix for stupid handling of username for rlogin:// (which is passed to system()...)
@
text
@d13 1
a13 1
**	 2 Feb 93 Split from HTAccess.c. Registration.(TBL)
d16 2
a17 2
#include "HTUtils.h"
#include "tcp.h"
d21 1
a21 1
#include "HTTelnet.h"
d23 4
a26 14
#include "HTParse.h"
#include "HTAnchor.h"
#include "HTTP.h"
#include "HTFile.h"
/*#include <errno.h> included by tcp.h -- FM */
/*#include <stdio.h> included by HTUtils.h -- FM */

#include "HText.h"

#include "HTAccess.h"
#include "HTAlert.h"
#if !defined (VMS) && !defined (_WINDOWS)
#include "../../../userdefs.h"	/* for TELNET_COMMAND and RLOGIN_COMMAND */
#endif /* not VMS */
d28 2
a29 3
#ifdef _WINDOWS /* ../../.. doesn't work for me */
#include "userdefs.h"  /* for TELNET_COMMAND and RLOGIN_COMMAND */
#endif
d31 2
a32 1
#include "LYLeaks.h"
d34 2
a35 3
#define FREE(x) if (x) {free(x); x = NULL;}

#define HT_NO_DATA -9999
d37 6
d54 1
a54 1
	char   command[256];
a57 4
#ifdef VMS
	extern int DCLsystem PARAMS((char *command));
#define system(a) DCLsystem(a) /* use LYCurses.c routines for spawns */
#endif /* VMS */
d88 16
a103 5
    if (!hostname || *hostname == '\0') {
	if (TRACE)
	    fprintf(stderr, "HTTelnet: No host specified!\n");
	return HT_NO_DATA;
    }
d105 5
a109 4
    if (user) {
	password = strchr(user, ':');
	if (password) {
	    *password++ = '\0';
a110 1
    }
d112 2
a113 2
/* If the person is already telnetting etc, forbid hopping */
/* This is a security precaution, for us and remote site */
d118 1
a118 1
	    sprintf(command,
d121 1
a121 1
	    system(command);
d139 3
a141 3
/* Not all telnet servers get it even if user name is specified
** so we always tell the guy what to log in as
*/
d146 1
d153 8
a160 5
	sprintf(command, "%s%s%s %s %s", TELNET_COMMAND,
		user ? " -l " : "",
		user ? user : "",
		hostname,
		port ? port : "");
d162 1
a162 3
	if (TRACE)
	    fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	system(command);
d170 5
d176 6
a181 4
	    snprintf(command, sizeof(command) - 1, "%s %s%s%s", RLOGIN_COMMAND,
		hostname,
		user ? " -l " : "",
		user ? user : "");
d184 5
a188 3
	    snprintf(command, sizeof(command) - 1, "%s %s %s", TN3270_COMMAND,
		hostname,
		port ? port : "");
d191 5
a195 3
	    snprintf(command, sizeof(command) - 1, "%s %s %s", TELNET_COMMAND,
		hostname,
		port ? port : "");
a197 2
	if (TRACE)
	    fprintf(stderr, "HTTelnet: Normal: Command is: %s\n\n", command);
d202 1
a202 1
	system(command);
d215 1
a215 1
	    sprintf(command, "RLOGIN%s%s%s%s%s %s",  /*lm 930713 */
d224 1
a224 1
	    sprintf(command, "TELNET/TN3270 %s%s %s",
d230 1
a230 1
	    sprintf(command, "TELNET %s%s %s",
d236 1
a236 3
	if (TRACE)
	    fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	system(command);
d248 1
a248 1
		    sprintf(command, "RLOGIN%s%s%s%s%s %s",  /*lm 930713 */
d257 1
a257 1
		    sprintf(command, "TELNET/TN3270 %s%s %s",
d263 1
a263 1
		    sprintf(command, "TELNET %s%s %s",
d271 1
a271 1
		   sprintf(command, "RLOGIN %s%s%s%s%s",
d279 1
a279 1
		    sprintf(command, "TN3270 %s %s",
d284 1
a284 1
		    sprintf(command, "TELNET %s %s",
d290 1
a290 3
	    if (TRACE)
		fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	    system(command);
d298 1
a298 1
	    sprintf(command, "RLOGIN%s%s%s %s %s",
d306 1
a306 1
	    sprintf(command, "TN3270 %s %s",
d311 1
a311 1
	    sprintf(command, "TELNET %s %s",
d316 1
a316 3
	if (TRACE)
	    fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	system(command);
d323 1
a323 1
	    sprintf(command, "TELNET %s%s %s",
d327 1
a327 3
	    if (TRACE)
		fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	    system(command);
a329 1
	    extern int LYgetch NOPARAMS;
d349 1
a349 1
	    sprintf(command, "MULTINET RLOGIN%s%s%s%s %s",  /*lm 930713 */
d357 1
a357 1
	    sprintf(command, "MULTINET TELNET/TN3270 %s%s %s",
d363 1
a363 1
	    sprintf(command, "MULTINET TELNET %s%s %s",
d369 1
a369 3
	if (TRACE)
	    fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	system(command);
d375 1
a375 1
		sprintf(command, "RLOGIN%s%s%s%s %s",  /*lm 930713 */
d382 1
a382 1
		sprintf(command, "TELNET/TN3270 %s%s %s",
d387 1
a387 1
		sprintf(command, "TELNET %s%s %s",
d394 1
a394 1
		sprintf(command, "RLOGIN %s%s%s",
d399 1
a399 1
		sprintf(command, "TN3270 %s %s",
d403 1
a403 1
		sprintf(command, "TELNET %s %s",
d409 1
a409 3
	if (TRACE)
	    fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	system(command);
d414 1
a414 1
	    sprintf(command, "RLOGIN%s%s %s %s",
d421 1
a421 1
	    sprintf(command, "TN3270 %s %s",
d426 1
a426 1
	    sprintf(command, "TELNET %s %s",
d431 1
a431 3
	if (TRACE)
	    fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	system(command);
d436 1
a436 1
	    sprintf(command, "TELNET %s%s %s",
d440 1
a440 3
	    if (TRACE)
		fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	    system(command);
a442 1
	    extern int LYgetch NOPARAMS;
d456 1
a456 1
	    sprintf(command, "TELNET %s%s %s",
d460 1
a460 3
	    if (TRACE)
		fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	    system(command);
a462 1
	    extern int LYgetch NOPARAMS;
d482 2
a483 2
	if (login_protocol == telnet) { 		/* telnet only */
	    sprintf(command, "TELNET  %s",	/* @@@@ Bug: port ignored */
d485 1
a485 3
	    if (TRACE)
		fprintf(stderr, "HTTelnet: Command is: %s\n\n", command);
	    system(command);
a501 2
	    extern int LYgetch NOPARAMS;

d523 1
a523 1
**	returns 	<0	Error has occured.
d544 1
a544 3
	if (TRACE)
	    fprintf(stderr,
	   "HTTelnet: Can't output a live session -- must be interactive!\n");
d552 1
a552 2
	if (TRACE)
	    fprintf(stderr, "HTTelnet: No host specified!\n");
@


1.1
log
@Initial revision
@
text
@d76 1
a76 2
	for(cp = (strchr(host, '@@') ? strchr(host, '@@') : host); *cp != '\0';
		cp++)	{
d167 1
a167 1
	    sprintf(command, "%s %s%s%s", RLOGIN_COMMAND,
d173 1
a173 1
	    sprintf(command, "%s %s %s", TN3270_COMMAND,
d178 1
a178 1
	    sprintf(command, "%s %s %s", TELNET_COMMAND,
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
