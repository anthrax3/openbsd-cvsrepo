head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.22
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.18
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.16
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.14
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.12
	OPENBSD_5_0:1.6.0.10
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.14
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.12
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.6;
commitid	EcR8E7r0stjLUV4p;

1.6
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.04.04.24.03;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.42;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.47;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.43;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.43;	author maja;	state Exp;
branches;
next	;


desc
@@


1.7
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*                   /Net/dxcern/userd/timbl/hypertext/WWW/Library/Implementation/HTMIME.html
                                       MIME PARSER

   The MIME parser stream presents a MIME document.  It recursively invokes the
   format manager to handle embedded formats.

   As well as stripping off and parsing the headers, the MIME parser has to
   parse any weirld MIME encodings it may meet within the body parts of
   messages, and must deal with multipart messages.

   This module is implemented to the level necessary for operation with WWW,
   but is not currently complete for any arbitrary MIME message.

   Check the source for latest additions to functionality.

   The MIME parser is complicated by the fact that WWW allows real binary to be
   sent, not ASCII encoded.  Therefore the netascii decoding is included in
   this module.  One cannot layer it by converting first from Net to local
   text, then decoding it.  Of course, for local files, the net ascii decoding
   is not needed.  There are therefore two creation routines.

 */
#ifndef HTMIME_H
#define HTMIME_H

#include <HTStream.h>
#include <HTAnchor.h>

#ifdef __cplusplus
extern "C" {
#endif
/*
 *  This function is for trimming off any paired
 *  open- and close-double quotes from header values.
 *  It does not parse the string for embedded quotes,
 *  and will not modify the string unless both the
 *  first and last characters are double-quotes. - FM
 */ extern void HTMIME_TrimDoubleQuotes(char *value);

/*

  INPUT: LOCAL TEXT

 */
    extern HTStream *HTMIMEConvert(HTPresentation *pres,
				   HTParentAnchor *anchor,
				   HTStream *sink);

/*

  INPUT: NET ASCII

 */
    extern HTStream *HTNetMIME(HTPresentation *pres,
			       HTParentAnchor *anchor,
			       HTStream *sink);

/*

  INPUT: Redirection message, parse headers only for Location if present

 */
    extern HTStream *HTMIMERedirect(HTPresentation *pres,
				    HTParentAnchor *anchor,
				    HTStream *sink);

/*

  For handling Japanese headers.

*/
    extern void HTmmdecode(char **target,
			   char *source);

    extern int HTrjis(char **target,
		      char *source);

    extern int HTmaybekanji(int c1,
			    int c2);

#ifdef __cplusplus
}
#endif
#endif				/* !HTMIME_H */
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@@


1.5
log
@update to lynx2.8.5rel.4; fixes CAN-2005-3120 among other things.
prompted by naddy@@, cloder@@ ok.
@
text
@d4 2
a5 2
   The MIME parser stream presents a MIME document.  It recursively invokes the format
   manager to handle embedded formats.
d7 3
a9 3
   As well as stripping off and parsing the headers, the MIME parser has to parse any
   weirld MIME encodings it may meet within the body parts of messages, and must deal with
   multipart messages.
d11 2
a12 2
   This module is implemented to the level necessary for operation with WWW, but is not
   currently complete for any arbitrary MIME message.
d16 5
a20 5
   The MIME parser is complicated by the fact that WWW allows real binary to be sent, not
   ASCII encoded.  Therefore the netascii decoding is included in this module.  One cannot
   layer it by converting first from Net to local text, then decoding it.  Of course, for
   local files, the net ascii decoding is not needed.  There are therefore two creation
   routines.
d29 3
d33 6
a38 8
**  This function is for trimming off any paired
**  open- and close-double quotes from header values.
**  It does not parse the string for embedded quotes,
**  and will not modify the string unless both the
**  first and last characters are double-quotes. - FM
*/
extern void HTMIME_TrimDoubleQuotes PARAMS((
	char *		value));
d45 4
a48 3
extern HTStream * HTMIMEConvert PARAMS((HTPresentation * pres,
                                        HTParentAnchor * anchor,
                                        HTStream * sink));
d54 4
a57 3
extern HTStream * HTNetMIME PARAMS((HTPresentation * pres,
                                        HTParentAnchor * anchor,
                                        HTStream * sink));
d63 3
a65 4
extern HTStream * HTMIMERedirect PARAMS((HTPresentation * pres,
                                        HTParentAnchor * anchor,
                                        HTStream * sink));

d72 8
a79 11
extern void HTmmdecode PARAMS((
	char **	trg,
	char *	str));

extern int HTrjis PARAMS((
	char **	t,
	char *	s));

extern int HTmaybekanji PARAMS((
	int	c1,
	int	c2));
d81 4
a84 1
#endif /* !HTMIME_H */
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@a69 8
extern void HTmmdec_base64 PARAMS((
	char *	t,
	char *	s));

extern void HTmmdec_quote PARAMS((
	char *	t,
	char *	s));

d71 1
a71 1
	char *	trg,
d75 1
a75 1
	char *	t,
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@a90 4

/*

   end of HTMIME */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d55 8
@


1.1
log
@Initial revision
@
text
@d3 2
a4 2
                                             
   The MIME parser stream presents a MIME document. It recursively invokes the format
d6 1
a6 1
   
d10 1
a10 1
   
d13 1
a13 1
   
d15 1
a15 1
   
d17 2
a18 2
   ASCII encoded.  Therefore the netascii decoding is included in this module. One cannot
   layer it by converting first from Net to local text, then decoding it. Of course, for
d21 1
a21 1
   
d26 2
a27 2
#include "HTStream.h"
#include "HTAnchor.h"
d42 1
a42 1
  
d50 1
a50 1
  
d60 1
a60 1
  
d78 1
a78 1
PUBLIC int HTmaybekanji PARAMS((
a80 1

@


1.1.1.1
log
@Lynx 2.8
@
text
@@
