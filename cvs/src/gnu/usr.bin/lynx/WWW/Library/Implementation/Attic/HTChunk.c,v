head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.38;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.42;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.36;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.46;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.46;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.46;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HTChunk.c,v 1.27 2012/02/07 11:28:44 tom Exp $
 *
 *		Chunk handling:	Flexible arrays
 *		===============================
 *
 */

#include <HTUtils.h>
#include <HTChunk.h>

#include <LYLeaks.h>

/*
 *	Initialize a chunk with a certain allocation unit
 */
void HTChunkInit(HTChunk *ch, int grow)
{
    ch->data = 0;
    ch->growby = grow;
    ch->size = 0;
    ch->allocated = 0;
}

/*	Create a chunk with a certain allocation unit
 *	--------------
 */
HTChunk *HTChunkCreate(int grow)
{
    HTChunk *ch = typecalloc(HTChunk);

    if (ch == NULL)
	outofmem(__FILE__, "creation of chunk");

    HTChunkInit(ch, grow);
    return ch;
}

HTChunk *HTChunkCreateMayFail(int grow, int failok)
{
    HTChunk *ch = typecalloc(HTChunk);

    if (ch == NULL) {
	if (!failok) {
	    outofmem(__FILE__, "creation of chunk");
	} else {
	    return ch;
	}
    }

    assert(ch != NULL);

    HTChunkInit(ch, grow);
    ch->failok = failok;
    return ch;
}

/*	Create a chunk with a certain allocation unit and ensured size
 *	--------------
 */
HTChunk *HTChunkCreate2(int grow, size_t needed)
{
    HTChunk *ch = typecalloc(HTChunk);

    if (ch == NULL)
	outofmem(__FILE__, "HTChunkCreate2");

    assert(ch != NULL);

    HTChunkInit(ch, grow);
    if (needed-- > 0) {
	/* Round up */
	ch->allocated = (int) (needed - (needed % (size_t) ch->growby)
			       + (unsigned) ch->growby);
	CTRACE((tfp, "HTChunkCreate2: requested %d, allocate %u\n",
		(int) needed, (unsigned) ch->allocated));
	ch->data = typecallocn(char, (unsigned) ch->allocated);

	if (!ch->data)
	    outofmem(__FILE__, "HTChunkCreate2 data");
    }
    return ch;
}

/*	Clear a chunk of all data
 *	--------------------------
 */
void HTChunkClear(HTChunk *ch)
{
    FREE(ch->data);
    ch->size = 0;
    ch->allocated = 0;
}

/*     Free a chunk (and it's chain, if any)
 *     -------------------------------------
 */
void HTChunkFree(HTChunk *ch)
{
    HTChunk *next;

    do {
	next = ch->next;
	FREE(ch->data);
	FREE(ch);
	ch = next;
    } while (ch != NULL);
}

/*	Realloc the chunk
 *	-----------------
 */
BOOL HTChunkRealloc(HTChunk *ch, int growby)
{
    char *data;

    ch->allocated = ch->allocated + growby;

    data = (ch->data
	    ? typeRealloc(char, ch->data, ch->allocated)
	    : typecallocn(char, ch->allocated));

    if (data) {
	ch->data = data;
    } else if (ch->failok) {
	HTChunkClear(ch);	/* allocation failed, clear all data - kw */
	return FALSE;		/* caller should check ch->allocated - kw */
    } else {
	outofmem(__FILE__, "HTChunkRealloc");
    }
    return TRUE;
}

/*	Append a character
 *	------------------
 */
void HTChunkPutc(HTChunk *ch, unsigned c)
{
    if (ch->size >= ch->allocated) {
	if (!HTChunkRealloc(ch, ch->growby))
	    return;
    }
    ch->data[ch->size++] = (char) c;
}

/* like above but no realloc: extend to another chunk if necessary */
HTChunk *HTChunkPutc2(HTChunk *ch, int c)
{
    if (ch->size >= ch->allocated) {
	HTChunk *chunk = HTChunkCreateMayFail(ch->growby, ch->failok);

	ch->next = chunk;
	ch = chunk;
	HTChunkPutc(ch, UCH(c));
    } else {
	ch->data[ch->size++] = (char) c;
    }
    return ch;
}

/*	Ensure a certain size
 *	---------------------
 */
void HTChunkEnsure(HTChunk *ch, int needed)
{
    if (needed <= ch->allocated)
	return;
    ch->allocated = needed - 1 - ((needed - 1) % ch->growby)
	+ ch->growby;		/* Round up */
    ch->data = (ch->data
		? typeRealloc(char, ch->data, ch->allocated)
		: typecallocn(char, ch->allocated));

    if (ch->data == NULL)
	outofmem(__FILE__, "HTChunkEnsure");
}

/*
 * Append a block of characters.
 */
void HTChunkPutb(HTChunk *ch, const char *b, int l)
{
    if (l <= 0)
	return;
    if (ch->size + l > ch->allocated) {
	int growby = l - (l % ch->growby) + ch->growby;		/* Round up */

	if (!HTChunkRealloc(ch, growby))
	    return;
    }
    MemCpy(ch->data + ch->size, b, l);
    ch->size += l;
}

/* like above but no realloc: extend to another chunk if necessary */
HTChunk *HTChunkPutb2(HTChunk *ch, const char *b, int l)
{
    if (l <= 0)
	return ch;
    if (ch->size + l > ch->allocated) {
	HTChunk *chunk;
	int m = ch->allocated - ch->size;

	MemCpy(ch->data + ch->size, b, (unsigned) m);
	ch->size += m;

	chunk = HTChunkCreateMayFail(ch->growby, ch->failok);
	ch->next = chunk;
	ch = chunk;
	HTChunkPutb(ch, b + m, l - m);
    } else {
	MemCpy(ch->data + ch->size, b, (unsigned) l);
	ch->size += l;
    }
    return ch;
}

#define PUTC(code)  ch->data[ch->size++] = (char)(code)
#define PUTC2(code) ch->data[ch->size++] = (char)(0x80|(0x3f &(code)))

/*
 * Append a character encoded as UTF-8.
 */
void HTChunkPutUtf8Char(HTChunk *ch, UCode_t code)
{
    int utflen;

    if (TOASCII(code) < 128)
	utflen = 1;
    else if (code < 0x800L) {
	utflen = 2;
    } else if (code < 0x10000L) {
	utflen = 3;
    } else if (code < 0x200000L) {
	utflen = 4;
    } else if (code < 0x4000000L) {
	utflen = 5;
    } else if (code <= 0x7fffffffL) {
	utflen = 6;
    } else
	utflen = 0;

    if (ch->size + utflen > ch->allocated) {
	int growby = (ch->growby >= utflen) ? ch->growby : utflen;

	if (!HTChunkRealloc(ch, growby))
	    return;
    }

    switch (utflen) {
    case 0:
	return;
    case 1:
	ch->data[ch->size++] = (char) code;
	return;
    case 2:
	PUTC(0xc0 | (code >> 6));
	break;
    case 3:
	PUTC(0xe0 | (code >> 12));
	break;
    case 4:
	PUTC(0xf0 | (code >> 18));
	break;
    case 5:
	PUTC(0xf8 | (code >> 24));
	break;
    case 6:
	PUTC(0xfc | (code >> 30));
	break;
    }
    switch (utflen) {
    case 6:
	PUTC2(code >> 24);
	/* FALLTHRU */
    case 5:
	PUTC2(code >> 18);
	/* FALLTHRU */
    case 4:
	PUTC2(code >> 12);
	/* FALLTHRU */
    case 3:
	PUTC2(code >> 6);
	/* FALLTHRU */
    case 2:
	PUTC2(code);
	break;
    }
}

/*	Terminate a chunk
 *	-----------------
 */
void HTChunkTerminate(HTChunk *ch)
{
    HTChunkPutc(ch, (char) 0);
}

/*	Append a string
 *	---------------
 */
void HTChunkPuts(HTChunk *ch, const char *s)
{
    const char *p;

    if (s != NULL) {
	for (p = s; *p; p++) {
	    if (ch->size >= ch->allocated) {
		if (!HTChunkRealloc(ch, ch->growby))
		    break;
	    }
	    ch->data[ch->size++] = *p;
	}
    }
}

/* like above but no realloc: extend to another chunk if necessary */
HTChunk *HTChunkPuts2(HTChunk *ch, const char *s)
{
    const char *p;

    if (s != NULL) {
	for (p = s; *p; p++) {
	    if (ch->size >= ch->allocated) {
		HTChunk *chunk = HTChunkCreateMayFail(ch->growby, ch->failok);

		ch->next = chunk;
		ch = chunk;
		HTChunkPuts(ch, p);
		break;
	    }
	    ch->data[ch->size++] = *p;
	}
    }
    return ch;
}
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: HTChunk.c,v 1.21 2009/02/01 12:49:24 tom Exp $
d50 3
d68 2
d71 1
a71 1
    if (needed > 0) {
d73 1
a73 1
	ch->allocated = (int) (needed - 1 - ((needed - 1) % ch->growby)
d120 2
a121 2
	    ? (char *) realloc(ch->data, (unsigned) ch->allocated)
	    : typecallocn(char, (unsigned) ch->allocated));
d137 1
a137 1
void HTChunkPutc(HTChunk *ch, char c)
d143 1
a143 1
    ch->data[ch->size++] = c;
d147 1
a147 1
HTChunk *HTChunkPutc2(HTChunk *ch, char c)
d153 4
a156 2
	HTChunkPutc(chunk, c);
	return chunk;
a157 1
    ch->data[ch->size++] = c;
d171 2
a172 2
		? (char *) realloc(ch->data, (unsigned) ch->allocated)
		: typecallocn(char, (unsigned) ch->allocated));
d191 1
a191 1
    memcpy(ch->data + ch->size, b, (unsigned) l);
d204 1
a204 1
	memcpy(ch->data + ch->size, b, (unsigned) m);
d209 5
a213 2
	HTChunkPutb(chunk, b + m, l - m);
	return chunk;
a214 2
    memcpy(ch->data + ch->size, b, (unsigned) l);
    ch->size += l;
d310 1
a310 1
		    return;
d328 3
a330 2
		HTChunkPuts(chunk, p);
		return chunk;
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 4
a4 1
/*		Chunk handling:	Flexible arrays
d67 6
a72 5
	ch->allocated = needed - 1 - ((needed - 1) % ch->growby)
	    + ch->growby;	/* Round up */
	CTRACE((tfp, "HTChunkCreate2: requested %d, allocate %d\n",
		(int) needed, ch->allocated));
	ch->data = typecallocn(char, ch->allocated);
d115 2
a116 2
	    ? (char *) realloc(ch->data, ch->allocated)
	    : typecallocn(char, ch->allocated));
d165 2
a166 2
		? (char *) realloc(ch->data, ch->allocated)
		: typecallocn(char, ch->allocated));
d185 1
a185 1
    memcpy(ch->data + ch->size, b, l);
d198 1
a198 1
	memcpy(ch->data + ch->size, b, m);
d206 1
a206 1
    memcpy(ch->data + ch->size, b, l);
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d2 3
a4 3
**		===============================
**
*/
d12 3
a14 3
**	Initialize a chunk with a certain allocation unit
*/
PUBLIC void HTChunkInit ARGS2 (HTChunk *,ch, int,grow)
d23 3
a25 3
**	--------------
*/
PUBLIC HTChunk * HTChunkCreate ARGS1 (int,grow)
d27 2
a28 1
    HTChunk * ch = typecalloc(HTChunk);
d32 1
a32 1
    HTChunkInit (ch, grow);
d36 1
a36 1
PUBLIC HTChunk * HTChunkCreateMayFail ARGS2 (int,grow, int,failok)
d38 2
a39 1
    HTChunk * ch = typecalloc(HTChunk);
d47 1
a47 1
    HTChunkInit (ch, grow);
d53 3
a55 3
**	--------------
*/
PUBLIC HTChunk * HTChunkCreate2 ARGS2 (int,grow, size_t, needed)
d57 2
a58 1
    HTChunk * ch = typecalloc(HTChunk);
d62 1
a62 1
    HTChunkInit (ch, grow);
d64 2
a65 2
	ch->allocated = needed-1 - ((needed-1) % ch->growby)
	    + ch->growby; /* Round up */
d67 1
a67 1
	       (int) needed, ch->allocated));
d69 1
a75 1

d77 3
a79 3
**	--------------------------
*/
PUBLIC void HTChunkClear ARGS1 (HTChunk *,ch)
d86 13
a98 8

/*	Free a chunk
**	------------
*/
PUBLIC void HTChunkFree ARGS1 (HTChunk *,ch)
{
    FREE(ch->data);
    FREE(ch);
a100 1

d102 3
a104 3
**	-----------------
*/
PUBLIC BOOL HTChunkRealloc ARGS2 (HTChunk *,ch, int,growby)
d107 1
d110 4
a113 2
    data = ch->data ? (char *)realloc(ch->data, ch->allocated)
			: typecallocn(char, ch->allocated);
a124 1

d126 3
a128 5
**	------------------
*/
/* Warning: the code of this function is defined as macro in SGML.c. Change
  the macro or undefine it in SGML.c when changing this function. -VH */
PUBLIC void HTChunkPutc ARGS2 (HTChunk *,ch, char,c)
d137 13
d152 12
a163 9
**	---------------------
*/
PUBLIC void HTChunkEnsure ARGS2 (HTChunk *,ch, int,needed)
{
    if (needed <= ch->allocated) return;
    ch->allocated = needed-1 - ((needed-1) % ch->growby)
			     + ch->growby; /* Round up */
    ch->data = ch->data ? (char *)realloc(ch->data, ch->allocated)
			: typecallocn(char, ch->allocated);
d168 4
a171 1
PUBLIC void HTChunkPutb ARGS3 (HTChunk *,ch, CONST char *,b, int,l)
d173 2
a174 1
    if (l <= 0) return;
d176 2
a177 1
	int growby = l - (l % ch->growby) + ch->growby; /* Round up */
d185 23
a207 1
#define PUTC(code) ch->data[ch->size++] = (char)(code)
d210 4
a213 3
PUBLIC void HTChunkPutUtf8Char ARGS2(
	HTChunk *,	ch,
	UCode_t,	code)
d219 1
a219 1
    else if   (code <     0x800L) {
d221 1
a221 1
    } else if (code <   0x10000L) {
d223 1
a223 1
    } else if (code <  0x200000L) {
d227 1
a227 1
    } else if (code<=0x7fffffffL) {
d234 1
d243 1
a243 1
	ch->data[ch->size++] = (char)code;
d246 1
a246 1
	PUTC(0xc0 | (code>>6));
d249 1
a249 1
	PUTC(0xe0 | (code>>12));
d252 1
a252 1
	PUTC(0xf0 | (code>>18));
d255 1
a255 1
	PUTC(0xf8 | (code>>24));
d258 1
a258 1
	PUTC(0xfc | (code>>30));
d263 1
a263 1
	PUTC2(code>>24);
d266 1
a266 1
	PUTC2(code>>18);
d269 1
a269 1
	PUTC2(code>>12);
d272 1
a272 1
	PUTC2(code>>6);
d281 3
a283 3
**	-----------------
*/
PUBLIC void HTChunkTerminate ARGS1 (HTChunk *,ch)
d285 1
a285 1
    HTChunkPutc(ch, (char)0);
d288 22
d311 10
a320 10
/*	Append a string
**	---------------
*/
PUBLIC void HTChunkPuts ARGS2 (HTChunk *,ch, CONST char *,s)
{
    CONST char * p;
    for (p = s; *p; p++) {
	if (ch->size >= ch->allocated) {
	    if (!HTChunkRealloc(ch, ch->growby))
		return;
a321 1
	ch->data[ch->size++] = *p;
d323 1
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d64 1
a64 1
	       needed, ch->allocated));
d94 22
d124 2
a125 12
	char *data;
	ch->allocated = ch->allocated + ch->growby;
	data = ch->data ? (char *)realloc(ch->data, ch->allocated)
			: typecallocn(char, ch->allocated);
	if (data) {
	    ch->data = data;
	} else if (ch->failok) {
	    HTChunkClear(ch);	/* allocation failed, clear all data - kw */
	    return;		/* caller should check ch->allocated - kw */
	} else {
	    outofmem(__FILE__, "HTChunkPutc");
	}
a146 1
    int needed = ch->size + l;
d148 4
a151 14
    if (needed > ch->allocated) {
	char *data;
	ch->allocated = needed-1 - ((needed-1) % ch->growby)
	    + ch->growby; /* Round up */
	data = ch->data ? (char *)realloc(ch->data, ch->allocated)
			: typecallocn(char, ch->allocated);
	if (data) {
	    ch->data = data;
	} else if (ch->failok) {
	    HTChunkClear(ch);	/* allocation failed, clear all data - kw */
	    return;		/* caller should check ch->allocated - kw */
	} else {
	    outofmem(__FILE__, "HTChunkPutb");
	}
a181 1
	char *data;
d183 2
a184 11
	ch->allocated = ch->allocated + growby;
	data = ch->data ? (char *)realloc(ch->data, ch->allocated)
			: typecallocn(char, ch->allocated);
	if (data) {
	    ch->data = data;
	} else if (ch->failok) {
	    HTChunkClear(ch);	/* allocation failed, clear all data - kw */
	    return;		/* caller should check ch->allocated - kw */
	} else {
	    outofmem(__FILE__, "HTChunkPutUtf8Char");
	}
d243 6
a248 4
    for (p=s; *p; p++) {
	HTChunkPutc(ch, *p);
	if (ch->allocated == 0)
	    return;		/* must have been allocation failure - kw */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d11 11
d27 1
a27 1
    HTChunk * ch = (HTChunk *) calloc(1, sizeof(HTChunk));
d29 5
a33 1
        outofmem(__FILE__, "creation of chunk");
d35 12
a46 4
    ch->data = 0;
    ch->growby = grow;
    ch->size = 0;
    ch->allocated = 0;
d55 1
a55 1
    HTChunk * ch = (HTChunk *) calloc(1, sizeof(HTChunk));
d57 1
a57 1
        outofmem(__FILE__, "HTChunkCreate2");
d59 1
a59 1
    ch->growby = grow;
d63 3
a65 1
	ch->data = (char *)calloc(1, ch->allocated);
a68 1
    ch->size = 0;
d102 1
d104 10
a113 4
        ch->data = ch->data ? (char *)realloc(ch->data, ch->allocated)
			    : (char *)calloc(1, ch->allocated);
      if (!ch->data)
          outofmem(__FILE__, "HTChunkPutc");
d126 1
a126 1
    			     + ch->growby; /* Round up */
d128 1
a128 1
			: (char *)calloc(1, ch->allocated);
d130 1
a130 1
        outofmem(__FILE__, "HTChunkEnsure");
d138 1
d141 8
a148 3
        ch->data = ch->data ? (char *)realloc(ch->data, ch->allocated)
			    : (char *)calloc(1, ch->allocated);
	if (ch->data == NULL)
d150 1
d165 1
a165 1
    if (code < 128)
d181 1
d184 10
a193 4
        ch->data = ch->data ? (char *)realloc(ch->data, ch->allocated)
			    : (char *)calloc(1, ch->allocated);
      if (!ch->data)
          outofmem(__FILE__, "HTChunkPutUtf8Char");
d216 1
d221 1
d224 1
d227 1
d230 1
d233 1
d252 5
a256 2
    for (p=s; *p; p++)
        HTChunkPutc(ch, *p);
@


1.1
log
@Initial revision
@
text
@d6 2
a7 3
#include "HTUtils.h"
#include "HTChunk.h"
/*#include <stdio.h> included by HTUtils.h -- FM */
d9 1
a9 3
#include "LYLeaks.h"

#define FREE(x) if (x) {free(x); x = NULL;}
d73 2
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
