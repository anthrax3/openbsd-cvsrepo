head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.18
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.16
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.4;
commitid	EcR8E7r0stjLUV4p;

1.4
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.22.04.01.43;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.49;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.41;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.41;	author maja;	state Exp;
branches;
next	;


desc
@@


1.5
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*							HTVMS_WAISProt.h
 *
 *	Adaptation for Lynx by F.Macrides (macrides@@sci.wfeb.edu)
 *
 *	31-May-1994 FM	Initial version.
 *
 *----------------------------------------------------------------------*/

/*
 *	Routines originally from WProt.h -- FM
 *
 *----------------------------------------------------------------------*/
/* WIDE AREA INFORMATION SERVER SOFTWARE:
 * No guarantees or restrictions.  See the readme file for the full standard
 * disclaimer.
 *
 *  3.26.90	Harry Morris, morris@@think.com
 *  3.30.90  Harry Morris
 *			-	removed chunk code from WAISSearchAPDU,
 *			-	added makeWAISQueryType1Query() and readWAISType1Query() which
 *				replace makeWAISQueryTerms() and makeWAISQueryDocs().
 *  4.11.90  HWM - added definitions of wais element set names
 *  4.14.90  HWM - changed symbol for relevance feedback query from QT_3 to
 *				  QT_RelevanceFeedbackQuery added QT_TextRetrievalQuery as a
 *				  synonym for QT_BooleanQuery
 *				- renamed makeWAISType1Query() to makeWAISTextQuery()
 *				  renamed readWAISType1Query() to readWAISTextQuery()
 *  5.29.90  TS - added CSTFreeWAISFoo functions
 */

#ifndef _H_WAIS_protocol_
#define _H_WAIS_protocol_

#ifndef HTUTILS_H
#include <HTUtils.h>
#endif

#include <HTVMS_WaisUI.h>

/*----------------------------------------------------------------------*/
/* Data types / constants */

/* date factor constants */
#define	DF_INDEPENDENT		1
#define DF_LATER		2
#define DF_EARLIER		3
#define DF_SPECIFIED_RANGE	4

/* chunk types */
#define CT_document		0
#define CT_byte			1
#define CT_line			2
#define CT_paragraph	3

/* relevance feedback query */
#define QT_RelevanceFeedbackQuery	"3"
#define QT_TextRetrievalQuery		QT_BooleanQuery

/* new data tags */
#define DT_UserInformationLength	(data_tag)99
#define	DT_ChunkCode			(data_tag)100
#define	DT_ChunkIDLength		(data_tag)101
#define	DT_ChunkMarker			(data_tag)102
#define	DT_HighlightMarker		(data_tag)103
#define	DT_DeHighlightMarker		(data_tag)104
#define	DT_NewlineCharacters		(data_tag)105
#define	DT_SeedWords			(data_tag)106
#define	DT_DocumentIDChunk		(data_tag)107
#define	DT_ChunkStartID			(data_tag)108
#define	DT_ChunkEndID			(data_tag)109
#define	DT_TextList			(data_tag)110
#define	DT_DateFactor			(data_tag)111
#define	DT_BeginDateRange		(data_tag)112
#define	DT_EndDateRange			(data_tag)113
#define	DT_MaxDocumentsRetrieved	(data_tag)114
#define	DT_SeedWordsUsed		(data_tag)115
#define	DT_DocumentID			(data_tag)116
#define	DT_VersionNumber		(data_tag)117
#define	DT_Score			(data_tag)118
#define	DT_BestMatch			(data_tag)119
#define	DT_DocumentLength		(data_tag)120
#define	DT_Source			(data_tag)121
#define	DT_Date				(data_tag)122
#define	DT_Headline			(data_tag)123
#define	DT_OriginCity			(data_tag)124
#define	DT_PresentStartByte		(data_tag)125
#define	DT_TextLength			(data_tag)126
#define	DT_DocumentText			(data_tag)127
#define	DT_StockCodes			(data_tag)128
#define	DT_CompanyCodes			(data_tag)129
#define	DT_IndustryCodes		(data_tag)130

/* added by harry */
#define DT_DocumentHeaderGroup		(data_tag)150
#define DT_DocumentShortHeaderGroup	(data_tag)151
#define DT_DocumentLongHeaderGroup	(data_tag)152
#define DT_DocumentTextGroup		(data_tag)153
#define DT_DocumentHeadlineGroup	(data_tag)154
#define DT_DocumentCodeGroup		(data_tag)155
#define DT_Lines			(data_tag)131
#define	DT_TYPE_BLOCK			(data_tag)132
#define DT_TYPE				(data_tag)133

/* wais element sets */
#define ES_DocumentHeader		"Document Header"
#define ES_DocumentShortHeader		"Document Short Header"
#define ES_DocumentLongHeader		"Document Long Header"
#define ES_DocumentText			"Document Text"
#define ES_DocumentHeadline		"Document Headline"
#define ES_DocumentCodes		"Document Codes"

typedef struct DocObj {		/* specifies a section of a document */
    any *DocumentID;
    char *Type;
    long ChunkCode;
    union {
	long Pos;
	any *ID;
    } ChunkStart;
    union {
	long Pos;
	any *ID;
    } ChunkEnd;
} DocObj;

/*----------------------------------------------------------------------*/
/* WAIS APDU extensions */

typedef struct WAISInitResponse {
    long ChunkCode;
    long ChunkIDLength;
    char *ChunkMarker;
    char *HighlightMarker;
    char *DeHighlightMarker;
    char *NewlineCharacters;
    /* XXX  need to add UpdateFrequency and Update Time */
} WAISInitResponse;

typedef struct WAISSearch {
    char *SeedWords;
    DocObj **Docs;
    char **TextList;
    long DateFactor;
    char *BeginDateRange;
    char *EndDateRange;
    long MaxDocumentsRetrieved;
} WAISSearch;

typedef struct WAISDocumentHeader {
    any *DocumentID;
    long VersionNumber;
    long Score;
    long BestMatch;
    long DocumentLength;
    long Lines;
    char **Types;
    char *Source;
    char *Date;
    char *Headline;
    char *OriginCity;
} WAISDocumentHeader;

typedef struct WAISDocumentShortHeader {
    any *DocumentID;
    long VersionNumber;
    long Score;
    long BestMatch;
    long DocumentLength;
    long Lines;
} WAISDocumentShortHeader;

typedef struct WAISDocumentLongHeader {
    any *DocumentID;
    long VersionNumber;
    long Score;
    long BestMatch;
    long DocumentLength;
    long Lines;
    char **Types;
    char *Source;
    char *Date;
    char *Headline;
    char *OriginCity;
    char *StockCodes;
    char *CompanyCodes;
    char *IndustryCodes;
} WAISDocumentLongHeader;

typedef struct WAISDocumentText {
    any *DocumentID;
    long VersionNumber;
    any *DocumentText;
} WAISDocumentText;

typedef struct WAISDocumentHeadlines {
    any *DocumentID;
    long VersionNumber;
    char *Source;
    char *Date;
    char *Headline;
    char *OriginCity;
} WAISDocumentHeadlines;

typedef struct WAISDocumentCodes {
    any *DocumentID;
    long VersionNumber;
    char *StockCodes;
    char *CompanyCodes;
    char *IndustryCodes;
} WAISDocumentCodes;

typedef struct WAISSearchResponse {
    char *SeedWordsUsed;
    WAISDocumentHeader **DocHeaders;
    WAISDocumentShortHeader **ShortHeaders;
    WAISDocumentLongHeader **LongHeaders;
    WAISDocumentText **Text;
    WAISDocumentHeadlines **Headlines;
    WAISDocumentCodes **Codes;
    diagnosticRecord **Diagnostics;
} WAISSearchResponse;

/*----------------------------------------------------------------------*/
/* Functions */

char *generate_search_apdu(char *buff,	/* buffer to hold the apdu */
			   long *buff_len,	/* number of bytes written to the buffer */
			   char *seed_words,	/* string of the seed words */
			   char *database_name,
			   DocObj **docobjs,
			   long maxDocsRetrieved);

DocObj *makeDocObjUsingWholeDocument(any *aDocID, char *type);
DocObj *makeDocObjUsingBytes(any *aDocID, char *type, long start, long end);
DocObj *makeDocObjUsingLines(any *aDocID, char *type, long start, long end);
DocObj *makeDocObjUsingParagraphs(any *aDocID, char *type, any *start, any *end);
void freeDocObj(DocObj *doc);

WAISInitResponse *makeWAISInitResponse(long chunkCode, long chunkIDLen,
				       char *chunkMarker, char *highlightMarker,
				       char *deHighlightMarker, char *newLineChars);
void freeWAISInitResponse(WAISInitResponse *init);

WAISSearch *makeWAISSearch(char *seedWords,
			   DocObj **docs,
			   char **textList,
			   long dateFactor,
			   char *beginDateRange,
			   char *endDateRange,
			   long maxDocsRetrieved);
void freeWAISSearch(WAISSearch *query);

WAISDocumentHeader *makeWAISDocumentHeader(any *aDocID,
					   long versionNumber,
					   long score,
					   long bestMatch,
					   long docLen,
					   long lines,
					   char **types,
					   char *source,
					   char *date,
					   char *headline,
					   char *originCity);
void freeWAISDocumentHeader(WAISDocumentHeader *header);
char *writeWAISDocumentHeader(WAISDocumentHeader *header, char *buffer, long *len);
char *readWAISDocumentHeader(WAISDocumentHeader **header, char *buffer);

WAISDocumentShortHeader *makeWAISDocumentShortHeader(any *aDocID,
						     long versionNumber,
						     long score,
						     long bestMatch,
						     long docLen,
						     long lines);
void freeWAISDocumentShortHeader(WAISDocumentShortHeader *header);
char *writeWAISDocumentShortHeader(WAISDocumentShortHeader *header,
				   char *buffer, long *len);
char *readWAISDocumentShortHeader(WAISDocumentShortHeader **header, char *buffer);

WAISDocumentLongHeader *makeWAISDocumentLongHeader(any *aDocID,
						   long versionNumber,
						   long score,
						   long bestMatch,
						   long docLen,
						   long lines,
						   char **types,
						   char *source,
						   char *date, char *headline,
						   char *originCity,
						   char *stockCodes,
						   char *companyCodes,
						   char *industryCodes);
void freeWAISDocumentLongHeader(WAISDocumentLongHeader *header);
char *writeWAISDocumentLongHeader(WAISDocumentLongHeader *header,
				  char *buffer,
				  long *len);
char *readWAISDocumentLongHeader(WAISDocumentLongHeader **header, char *buffer);

WAISSearchResponse *makeWAISSearchResponse(char *seedWordsUsed,
					   WAISDocumentHeader **docHeaders,
					   WAISDocumentShortHeader **shortHeaders,
					   WAISDocumentLongHeader **longHeaders,
					   WAISDocumentText **text, WAISDocumentHeadlines **headlines,
					   WAISDocumentCodes **codes,
					   diagnosticRecord ** diagnostics);
void freeWAISSearchResponse(WAISSearchResponse * response);

WAISDocumentText *makeWAISDocumentText(any *aDocID, long versionNumber,
				       any *documentText);
void freeWAISDocumentText(WAISDocumentText *docText);
char *writeWAISDocumentText(WAISDocumentText *docText, char *buffer, long *len);
char *readWAISDocumentText(WAISDocumentText **docText, char *buffer);

WAISDocumentHeadlines *makeWAISDocumentHeadlines(any *aDocID,
						 long versionNumber,
						 char *source,
						 char *date,
						 char *headline,
						 char *originCity);
void freeWAISDocumentHeadlines(WAISDocumentHeadlines *docHeadline);
char *writeWAISDocumentHeadlines(WAISDocumentHeadlines *docHeadline,
				 char *buffer,
				 long *len);
char *readWAISDocumentHeadlines(WAISDocumentHeadlines **docHeadline, char *buffer);

WAISDocumentCodes *makeWAISDocumentCodes(any *aDocID,
					 long versionNumber,
					 char *stockCodes,
					 char *companyCodes,
					 char *industryCodes);
void freeWAISDocumentCodes(WAISDocumentCodes *docCodes);
char *writeWAISDocumentCodes(WAISDocumentCodes *docCodes, char *buffer, long *len);
char *readWAISDocumentCodes(WAISDocumentCodes **docCodes, char *buffer);

any *makeWAISTextQuery(DocObj **docs);
DocObj **readWAISTextQuery(any *terms);

void CSTFreeWAISInitResponse(WAISInitResponse *init);
void CSTFreeWAISSearch(WAISSearch *query);
void CSTFreeDocObj(DocObj *doc);
void CSTFreeWAISDocumentHeader(WAISDocumentHeader *header);
void CSTFreeWAISDocumentShortHeader(WAISDocumentShortHeader *header);
void CSTFreeWAISDocumentLongHeader(WAISDocumentLongHeader *header);
void CSTFreeWAISSearchResponse(WAISSearchResponse * response);
void CSTFreeWAISDocumentText(WAISDocumentText *docText);
void CSTFreeWAISDocHeadlines(WAISDocumentHeadlines *docHeadline);
void CSTFreeWAISDocumentCodes(WAISDocumentCodes *docCodes);
void CSTFreeWAISTextQuery(any *query);

/*----------------------------------------------------------------------*/

#endif /* ndef _H_WAIS_protocol_ */

/*
 *	Routines originally from WMessage.h -- FM
 *
 *----------------------------------------------------------------------*/
/* WIDE AREA INFORMATION SERVER SOFTWARE
 * No guarantees or restrictions.  See the readme file for the full standard
 * disclaimer.
 * 3.26.90
 */

/* wais-message.h
 *
 * This is the header outside of WAIS Z39.50 messages.  The header will be
 * printable ascii, so as to be transportable.  This header will precede each
 * Z39.50 APDU, or zero-length message if it is an ACK or NACK.  Be sure to
 * change hdr_vers current value if you change the structure of the header.
 *
 * The characters in the header are case insensitive so that the systems from
 * the past that only handle one case can at least read the header.
 *
 * 7.5.90 HWM - added constants
 * 7/5/90 brewster added funtion prototypes and comments
 * 11/30/90 HWM - went to version 2 (inits and typed retrieval)
 */

#ifndef WMESSAGE_H
#define WMESSAGE_H

#ifndef HTUTILS_H
#include <HTUtils.h>
#endif

#include <HTVMS_WaisUI.h>

typedef struct wais_header {
    char msg_len[10];		/* length in bytes of following message */
    char msg_type;		/* type of message: 'z'=Z39.50 APDU,
				   'a'=ACK, 'n'=NACK */
    char hdr_vers;		/* version of this header, currently = '2' */
    char server[10];		/* name or address of server */
    char compression;		/* <sp>=no compression, 'u'=unix compress */
    char encoding;		/* <sp>=no encoding, 'h'=hexize,
				   'u'=uuencode */
    char msg_checksum;		/* XOR of every byte of message */
} WAISMessage;

#define HEADER_LENGTH	25	/* number of bytes needed to write a
				   wais-header (not sizeof(wais_header)) */

#define HEADER_VERSION	(long)'2'

/* message type */
#define Z3950			'z'
#define ACK			'a'
#define	NAK			'n'

/* compression */
#define NO_COMPRESSION		' '
#define UNIX_COMPRESSION	'u'

/* encoding */
#define NO_ENCODING		' '
#define HEX_ENCODING		'h'	/* Swartz 4/3 encoding */
#define IBM_HEXCODING		'i'	/* same as h but uses characters acceptable for IBM mainframes */
#define UUENCODE		'u'

void readWAISPacketHeader(char *msgBuffer, WAISMessage * header_struct);
long getWAISPacketLength(WAISMessage * header);
void writeWAISPacketHeader(char *header, long dataLen, long type,
			   char *server, long compression,
			   long encoding, long version);

#endif /* ndef WMESSAGE_H */
@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@@


1.3
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d2 6
a7 6
**
**	Adaptation for Lynx by F.Macrides (macrides@@sci.wfeb.edu)
**
**	31-May-1994 FM	Initial version.
**
**----------------------------------------------------------------------*/
d10 3
a12 3
**	Routines originally from WProt.h -- FM
**
**----------------------------------------------------------------------*/
d14 16
a29 16
   No guarantees or restrictions.  See the readme file for the full standard
   disclaimer.

   3.26.90	Harry Morris, morris@@think.com
   3.30.90  Harry Morris
			-	removed chunk code from WAISSearchAPDU,
			-	added makeWAISQueryType1Query() and readWAISType1Query() which
				replace makeWAISQueryTerms() and makeWAISQueryDocs().
   4.11.90  HWM - added definitions of wais element set names
   4.14.90  HWM - changed symbol for relevance feedback query from QT_3 to
				  QT_RelevanceFeedbackQuery added QT_TextRetrievalQuery as a
				  synonym for QT_BooleanQuery
				- renamed makeWAISType1Query() to makeWAISTextQuery()
				  renamed readWAISType1Query() to readWAISTextQuery()
   5.29.90  TS - added CSTFreeWAISFoo functions
*/
d112 13
a124 13
typedef struct DocObj { /* specifies a section of a document */
	any*	DocumentID;
	char*   Type;
	long	ChunkCode;
	union {
		long	Pos;
		any*	ID;
	} ChunkStart;
	union {
		long	Pos;
		any*	ID;
	} ChunkEnd;
	} DocObj;
d130 8
a137 8
	long				ChunkCode;
	long				ChunkIDLength;
	char*				ChunkMarker;
	char*				HighlightMarker;
	char*				DeHighlightMarker;
	char*				NewlineCharacters;
	/* XXX  need to add UpdateFrequency and Update Time */
	} WAISInitResponse;
d140 8
a147 8
	char*				SeedWords;
	DocObj**			Docs;
	char**				TextList;
	long				DateFactor;
	char*				BeginDateRange;
	char*				EndDateRange;
	long				MaxDocumentsRetrieved;
	} WAISSearch;
d150 12
a161 12
	any*				DocumentID;
	long				VersionNumber;
	long				Score;
	long				BestMatch;
	long				DocumentLength;
	long				Lines;
	char**				Types;
	char*				Source;
	char*				Date;
	char*				Headline;
	char*				OriginCity;
	} WAISDocumentHeader;
d164 7
a170 7
	any*				DocumentID;
	long				VersionNumber;
	long				Score;
	long				BestMatch;
	long				DocumentLength;
	long				Lines;
	} WAISDocumentShortHeader;
d173 15
a187 15
	any*				DocumentID;
	long				VersionNumber;
	long				Score;
	long				BestMatch;
	long				DocumentLength;
	long				Lines;
	char**				Types;
	char*				Source;
	char*				Date;
	char*				Headline;
	char*				OriginCity;
	char*				StockCodes;
	char*				CompanyCodes;
	char*				IndustryCodes;
	} WAISDocumentLongHeader;
d190 4
a193 4
	any*				DocumentID;
	long				VersionNumber;
	any*				DocumentText;
	} WAISDocumentText;
d196 7
a202 7
	any*				DocumentID;
	long				VersionNumber;
	char*				Source;
	char*				Date;
	char*				Headline;
	char*				OriginCity;
	} WAISDocumentHeadlines;
d205 6
a210 6
	any*				DocumentID;
	long				VersionNumber;
	char*				StockCodes;
	char*				CompanyCodes;
	char*				IndustryCodes;
	} WAISDocumentCodes;
d213 9
a221 9
	char*					SeedWordsUsed;
	WAISDocumentHeader**		DocHeaders;
	WAISDocumentShortHeader**	ShortHeaders;
	WAISDocumentLongHeader**	LongHeaders;
	WAISDocumentText**			Text;
	WAISDocumentHeadlines**		Headlines;
	WAISDocumentCodes**			Codes;
	diagnosticRecord**			Diagnostics;
	} WAISSearchResponse;
d226 122
a347 91
char *
generate_search_apdu PARAMS((char* buff,  /* buffer to hold the apdu */
			  long *buff_len, /* number of bytes written to the buffer */
			  char *seed_words, /* string of the seed words */
			  char *database_name,
			  DocObj** docobjs,
			  long maxDocsRetrieved
			  ));

DocObj* makeDocObjUsingWholeDocument PARAMS((any* aDocID,char* type));
DocObj* makeDocObjUsingBytes PARAMS((any* aDocID,char* type,long start,long end));
DocObj* makeDocObjUsingLines PARAMS((any* aDocID,char* type,long start,long end));
DocObj* makeDocObjUsingParagraphs PARAMS((any* aDocID,char* type,any* start,any* end));
void freeDocObj PARAMS((DocObj* doc));

WAISInitResponse* makeWAISInitResponse PARAMS((long chunkCode,long chunkIDLen,
					    char* chunkMarker,char* highlightMarker,
					    char* deHighlightMarker,char* newLineChars));
void freeWAISInitResponse PARAMS((WAISInitResponse* init));

WAISSearch* makeWAISSearch PARAMS((
	char* seedWords,DocObj** docs,char** textList,
	long dateFactor,char* beginDateRange,char* endDateRange,
	long maxDocsRetrieved));
void freeWAISSearch PARAMS((WAISSearch* query));

WAISDocumentHeader* makeWAISDocumentHeader PARAMS((
	any* aDocID,long versionNumber,long score,long bestMatch,long docLen,
	long lines,char** types,char* source,char* date,char* headline,char* originCity));
void freeWAISDocumentHeader PARAMS((WAISDocumentHeader* header));
char* writeWAISDocumentHeader PARAMS((WAISDocumentHeader* header,char* buffer,long* len));
char* readWAISDocumentHeader PARAMS((WAISDocumentHeader** header,char* buffer));

WAISDocumentShortHeader* makeWAISDocumentShortHeader PARAMS((
	any* aDocID,long versionNumber,long score,long bestMatch,long docLen,long lines));
void freeWAISDocumentShortHeader PARAMS((WAISDocumentShortHeader* header));
char* writeWAISDocumentShortHeader PARAMS((WAISDocumentShortHeader* header,
                                   char* buffer,long* len));
char* readWAISDocumentShortHeader PARAMS((WAISDocumentShortHeader** header,char* buffer));

WAISDocumentLongHeader* makeWAISDocumentLongHeader PARAMS((
	any* aDocID,long versionNumber,long score,long bestMatch,long docLen,
	long lines,char** types,char* source,char* date, char* headline,char* originCity,
	char* stockCodes,char* companyCodes,char* industryCodes));
void freeWAISDocumentLongHeader PARAMS((WAISDocumentLongHeader* header));
char* writeWAISDocumentLongHeader PARAMS((WAISDocumentLongHeader* header,char* buffer,long* len));
char* readWAISDocumentLongHeader PARAMS((WAISDocumentLongHeader** header,char* buffer));

WAISSearchResponse* makeWAISSearchResponse PARAMS((
	char* seedWordsUsed,WAISDocumentHeader** docHeaders,
	WAISDocumentShortHeader** shortHeaders,
	WAISDocumentLongHeader** longHeaders,
	WAISDocumentText** text,WAISDocumentHeadlines** headlines,
	WAISDocumentCodes** codes,
	diagnosticRecord** diagnostics));
void freeWAISSearchResponse PARAMS((WAISSearchResponse* response));

WAISDocumentText* makeWAISDocumentText PARAMS((any* aDocID,long versionNumber,
				       any* documentText));
void freeWAISDocumentText PARAMS((WAISDocumentText* docText));
char* writeWAISDocumentText PARAMS((WAISDocumentText* docText,char* buffer,long* len));
char* readWAISDocumentText PARAMS((WAISDocumentText** docText,char* buffer));

WAISDocumentHeadlines* makeWAISDocumentHeadlines PARAMS((
	any* aDocID,long versionNumber,char* source,char* date,char* headline,
	char* originCity));
void freeWAISDocumentHeadlines PARAMS((WAISDocumentHeadlines* docHeadline));
char* writeWAISDocumentHeadlines PARAMS((WAISDocumentHeadlines* docHeadline,char* buffer,long* len));
char* readWAISDocumentHeadlines PARAMS((WAISDocumentHeadlines** docHeadline,char* buffer));

WAISDocumentCodes* makeWAISDocumentCodes PARAMS((
	any* aDocID,long versionNumber,char* stockCodes,char* companyCodes,
	char* industryCodes));
void freeWAISDocumentCodes PARAMS((WAISDocumentCodes* docCodes));
char* writeWAISDocumentCodes PARAMS((WAISDocumentCodes* docCodes,char* buffer,long* len));
char* readWAISDocumentCodes PARAMS((WAISDocumentCodes** docCodes,char* buffer));

any* makeWAISTextQuery PARAMS((DocObj** docs));
DocObj** readWAISTextQuery PARAMS((any* terms));

void CSTFreeWAISInitResponse PARAMS((WAISInitResponse* init));
void CSTFreeWAISSearch PARAMS((WAISSearch* query));
void CSTFreeDocObj PARAMS((DocObj* doc));
void CSTFreeWAISDocumentHeader PARAMS((WAISDocumentHeader* header));
void CSTFreeWAISDocumentShortHeader PARAMS((WAISDocumentShortHeader* header));
void CSTFreeWAISDocumentLongHeader PARAMS((WAISDocumentLongHeader* header));
void CSTFreeWAISSearchResponse PARAMS((WAISSearchResponse* response));
void CSTFreeWAISDocumentText PARAMS((WAISDocumentText* docText));
void CSTFreeWAISDocHeadlines PARAMS((WAISDocumentHeadlines* docHeadline));
void CSTFreeWAISDocumentCodes PARAMS((WAISDocumentCodes* docCodes));
void CSTFreeWAISTextQuery PARAMS(( any* query));
a352 1

d354 3
a356 3
**	Routines originally from WMessage.h -- FM
**
**----------------------------------------------------------------------*/
d358 4
a361 4
   No guarantees or restrictions.  See the readme file for the full standard
   disclaimer.
   3.26.90
*/
d388 7
a394 7
        char    msg_len[10];    /* length in bytes of following message */
        char    msg_type;       /* type of message: 'z'=Z39.50 APDU,
                                   'a'=ACK, 'n'=NACK */
        char    hdr_vers;       /* version of this header, currently = '2' */
        char    server[10];     /* name or address of server */
        char    compression;    /* <sp>=no compression, 'u'=unix compress */
        char    encoding;       /* <sp>=no encoding, 'h'=hexize,
d396 2
a397 2
        char    msg_checksum;   /* XOR of every byte of message */
        } WAISMessage;
d415 2
a416 2
#define HEX_ENCODING		'h'  /* Swartz 4/3 encoding */
#define IBM_HEXCODING		'i'  /* same as h but uses characters acceptable for IBM mainframes */
d419 5
a423 6

void readWAISPacketHeader PARAMS((char* msgBuffer,WAISMessage *header_struct));
long getWAISPacketLength PARAMS((WAISMessage* header));
void writeWAISPacketHeader PARAMS((char* header,long dataLen,long type,
				char* server,long compression,
				long encoding,long version));
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d15 2
a16 2
   disclaimer.	
  
d18 4
a21 4
   3.30.90  Harry Morris 
   			-	removed chunk code from WAISSearchAPDU,
   			-	added makeWAISQueryType1Query() and readWAISType1Query() which
   				replace makeWAISQueryTerms() and makeWAISQueryDocs().
d23 3
a25 3
   4.14.90  HWM - changed symbol for relevance feedback query from QT_3 to 
   				  QT_RelevanceFeedbackQuery added QT_TextRetrievalQuery as a
   				  synonym for QT_BooleanQuery
d98 1
a98 1
#define DT_DocumentHeadlineGroup 	(data_tag)154
d100 3
a102 3
#define DT_Lines					(data_tag)131 
#define	DT_TYPE_BLOCK				(data_tag)132
#define DT_TYPE						(data_tag)133
d106 2
a107 2
#define ES_DocumentShortHeader	"Document Short Header"
#define ES_DocumentLongHeader	"Document Long Header"
d125 1
a125 1
	
d134 1
a134 1
	char* 				DeHighlightMarker;
d152 2
a153 2
	long				Score;     
	long				BestMatch; 
d155 1
a155 1
	long 				Lines;
d166 2
a167 2
	long				Score;     
	long				BestMatch; 
d169 3
a171 3
	long 				Lines;
 	} WAISDocumentShortHeader;
 
d175 2
a176 2
	long				Score;     
	long				BestMatch; 
d178 1
a178 1
	long 				Lines;
d185 1
a185 1
	char* 				CompanyCodes;
d187 1
a187 1
 	} WAISDocumentLongHeader;
d194 1
a194 1
	
d203 1
a203 1
	
d211 1
a211 1
	
d213 4
a216 4
	char*			       		SeedWordsUsed;
	WAISDocumentHeader** 		DocHeaders;
	WAISDocumentShortHeader** 	ShortHeaders;
	WAISDocumentLongHeader** 	LongHeaders;
d329 1
a329 1
   disclaimer.    
d354 1
a354 1
 
d364 1
a364 1
        char    encoding;       /* <sp>=no encoding, 'h'=hexize, 
d369 1
a369 1
#define HEADER_LENGTH 	25	/* number of bytes needed to write a 
d372 1
a372 1
#define HEADER_VERSION 	(long)'2'
d375 3
a377 3
#define Z3950			'z'  
#define ACK			'a'  
#define	NAK			'n'  
d380 2
a381 2
#define NO_COMPRESSION 		' ' 
#define UNIX_COMPRESSION 	'u' 
d384 4
a387 4
#define NO_ENCODING		' '  
#define HEX_ENCODING	'h'  /* Swartz 4/3 encoding */
#define IBM_HEXCODING	'i'	 /* same as h but uses characters acceptable for IBM mainframes */
#define UUENCODE		'u'  
d393 1
a393 1
				char* server,long compression,	
@


1.1
log
@Initial revision
@
text
@d32 5
d38 1
a38 1
#define _H_WAIS_protocol_
d226 14
a239 5
DocObj* makeDocObjUsingWholeDocument _AP((any* aDocID,char* type));
DocObj* makeDocObjUsingBytes _AP((any* aDocID,char* type,long start,long end));
DocObj* makeDocObjUsingLines _AP((any* aDocID,char* type,long start,long end));
DocObj* makeDocObjUsingParagraphs _AP((any* aDocID,char* type,any* start,any* end));
void freeDocObj _AP((DocObj* doc));
d241 1
a241 1
WAISInitResponse* makeWAISInitResponse _AP((long chunkCode,long chunkIDLen,
d244 1
a244 1
void freeWAISInitResponse _AP((WAISInitResponse* init));
d246 1
a246 1
WAISSearch* makeWAISSearch _AP((
d250 1
a250 1
void freeWAISSearch _AP((WAISSearch* query));
d252 1
a252 1
WAISDocumentHeader* makeWAISDocumentHeader _AP((
d255 3
a257 3
void freeWAISDocumentHeader _AP((WAISDocumentHeader* header));
char* writeWAISDocumentHeader _AP((WAISDocumentHeader* header,char* buffer,long* len));
char* readWAISDocumentHeader _AP((WAISDocumentHeader** header,char* buffer));
d259 1
a259 1
WAISDocumentShortHeader* makeWAISDocumentShortHeader _AP((
d261 2
a262 2
void freeWAISDocumentShortHeader _AP((WAISDocumentShortHeader* header));
char* writeWAISDocumentShortHeader _AP((WAISDocumentShortHeader* header,
d264 1
a264 1
char* readWAISDocumentShortHeader _AP((WAISDocumentShortHeader** header,char* buffer));
d266 1
a266 1
WAISDocumentLongHeader* makeWAISDocumentLongHeader _AP((
d270 3
a272 3
void freeWAISDocumentLongHeader _AP((WAISDocumentLongHeader* header));
char* writeWAISDocumentLongHeader _AP((WAISDocumentLongHeader* header,char* buffer,long* len));
char* readWAISDocumentLongHeader _AP((WAISDocumentLongHeader** header,char* buffer));
d274 1
a274 1
WAISSearchResponse* makeWAISSearchResponse _AP((
d281 1
a281 1
void freeWAISSearchResponse _AP((WAISSearchResponse* response));
d283 1
a283 1
WAISDocumentText* makeWAISDocumentText _AP((any* aDocID,long versionNumber,
d285 3
a287 3
void freeWAISDocumentText _AP((WAISDocumentText* docText));
char* writeWAISDocumentText _AP((WAISDocumentText* docText,char* buffer,long* len));
char* readWAISDocumentText _AP((WAISDocumentText** docText,char* buffer));
d289 1
a289 1
WAISDocumentHeadlines* makeWAISDocumentHeadlines _AP((
d292 3
a294 3
void freeWAISDocumentHeadlines _AP((WAISDocumentHeadlines* docHeadline));
char* writeWAISDocumentHeadlines _AP((WAISDocumentHeadlines* docHeadline,char* buffer,long* len));
char* readWAISDocumentHeadlines _AP((WAISDocumentHeadlines** docHeadline,char* buffer));
d296 1
a296 1
WAISDocumentCodes* makeWAISDocumentCodes _AP((
d299 18
a316 18
void freeWAISDocumentCodes _AP((WAISDocumentCodes* docCodes));
char* writeWAISDocumentCodes _AP((WAISDocumentCodes* docCodes,char* buffer,long* len));
char* readWAISDocumentCodes _AP((WAISDocumentCodes** docCodes,char* buffer));

any* makeWAISTextQuery _AP((DocObj** docs));
DocObj** readWAISTextQuery _AP((any* terms));

void CSTFreeWAISInitResponse _AP((WAISInitResponse* init));
void CSTFreeWAISSearch _AP((WAISSearch* query));
void CSTFreeDocObj _AP((DocObj* doc));
void CSTFreeWAISDocumentHeader _AP((WAISDocumentHeader* header));
void CSTFreeWAISDocumentShortHeader _AP((WAISDocumentShortHeader* header));
void CSTFreeWAISDocumentLongHeader _AP((WAISDocumentLongHeader* header));
void CSTFreeWAISSearchResponse _AP((WAISSearchResponse* response));
void CSTFreeWAISDocumentText _AP((WAISDocumentText* docText));
void CSTFreeWAISDocHeadlines _AP((WAISDocumentHeadlines* docHeadline));
void CSTFreeWAISDocumentCodes _AP((WAISDocumentCodes* docCodes));
void CSTFreeWAISTextQuery _AP(( any* query));
d351 6
d390 3
a392 3
void readWAISPacketHeader _AP((char* msgBuffer,WAISMessage *header_struct));
long getWAISPacketLength _AP((WAISMessage* header));
void writeWAISPacketHeader _AP((char* header,long dataLen,long type,
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
