head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.18
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.16
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.4;
commitid	EcR8E7r0stjLUV4p;

1.4
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.22.04.01.42;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.45;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.44;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.44;	author maja;	state Exp;
branches;
next	;


desc
@@


1.5
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*  */

/*                      Atoms: Names to numbers                 HTAtom.h
 *                      =======================
 *
 *      Atoms are names which are given representative pointer values
 *      so that they can be stored more efficiently, and compaisons
 *      for equality done more efficiently.
 *
 *      HTAtom_for(string) returns a representative value such that it
 *      will always (within one run of the program) return the same
 *      value for the same given string.
 *
 * Authors:
 *      TBL     Tim Berners-Lee, WorldWideWeb project, CERN
 *
 *      (c) Copyright CERN 1991 - See Copyright.html
 *
 */

#ifndef HTATOM_H
#define HTATOM_H

#include <HTList.h>

#ifdef __cplusplus
extern "C" {
#endif
    typedef struct _HTAtom HTAtom;

    struct _HTAtom {
	HTAtom *next;
	char *name;
    };				/* struct _HTAtom */

    extern HTAtom *HTAtom_for(const char *string);
    extern HTList *HTAtom_templateMatches(const char *templ);

#define HTAtom_name(a) ((a)->name)

/*

The HTFormat type

   We use the HTAtom object for holding representations.  This allows faster manipulation
   (comparison and copying) that if we stayed with strings.

 */
    typedef HTAtom *HTFormat;

#ifdef __cplusplus
}
#endif
#endif				/* HTATOM_H */
@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@@


1.3
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d4 16
a19 16
**                      =======================
**
**      Atoms are names which are given representative pointer values
**      so that they can be stored more efficiently, and compaisons
**      for equality done more efficiently.
**
**      HTAtom_for(string) returns a representative value such that it
**      will always (within one run of the program) return the same
**      value for the same given string.
**
** Authors:
**      TBL     Tim Berners-Lee, WorldWideWeb project, CERN
**
**      (c) Copyright CERN 1991 - See Copyright.html
**
*/
d26 9
a34 5
typedef struct _HTAtom HTAtom;
struct _HTAtom {
        HTAtom *        next;
        char *          name;
}; /* struct _HTAtom */
d36 2
d39 5
a43 2
PUBLIC HTAtom * HTAtom_for PARAMS((CONST char * string));
PUBLIC HTList * HTAtom_templateMatches PARAMS((CONST char * templ));
d45 5
a49 1
#define HTAtom_name(a) ((a)->name)
d51 4
a54 1
#endif  /* HTATOM_H */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@a38 3
/*

    */
@


1.1
log
@Initial revision
@
text
@d24 1
a24 9
#ifndef HTUTILS_H
#include "HTUtils.h"
#endif /* HTUTILS_H */
#include "HTList.h"

#ifdef SHORT_NAMES
#define HTAt_for        HTAtom_for
#define HTAt_tMa        HTAtom_templateMatches
#endif /*SHORT_NAMES*/
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
