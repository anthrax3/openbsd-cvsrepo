head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.38;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.43;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.37;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.58;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.41;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.41;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@$ v0 = 0
$ v = f$verify(v0)
$! $LynxId: libmake.com,v 1.15 2011/05/23 23:58:48 tom Exp $
$!			LIBMAKE.COM
$!
$!   Command file to build the WWWLibrary on VMS systems.
$!
$!   11-Jul-2010	Ch. Gartmann
$!	add support for "MULTINETUCX"
$!   01-Jul-2007	T.Dickey
$!	add support for "TCPIP" (TCPIP Services)
$!   23-Oct-2004	T.Dickey
$!	cleanup, remove duplication, etc.
$!   08-Oct-1997	F.Macrides		macrides@@sci.wfeb.edu
$!	Added comments and minor tweaks for convenient addition of
$!	compiler definitions and compiler and linker options.
$!   26-Jul-1995	F.Macrides		macrides@@sci.wfeb.edu
$!	Adding support for GNUC.
$!   03-May-1995	F.Macrides		macrides@@sci.wfeb.edu
$!	Include /nomember for compilations with DECC.  It's not the
$!	default on AXP and the code assumes byte alignment.
$!   07-Dec-1994	F.Macrides		macrides@@sci.wfeb.edu
$!	Updated for DECC/VAX, VAXC/VAX and DECC/AXP
$!   03-NOV-1994	A.Harper		A.Harper@@kcl.ac.uk
$!	Mods to support SOCKETSHR/NETLIB and add a /DEBUG/NOOPT option
$!   02-Jun-1994	F.Macrides		macrides@@sci.wfeb.edu
$!	Mods to support TCPWare (To use non-blocking connects, you need
$!	the DRIVERS_V405B.INC patch from FTP.PROCESS.COM for TCPware for
$!	OpenVMS Version 4.0-5, or a higher version of TCPWare, which will
$!	have that bug in the TCPDRIVER fixed.  Otherwise, add NO_IOCTL to
$!	the /define=(...) list.)
$!   20-May-1994	Andy Harper		A.Harper@@bay.cc.kcl.ac.uk
$!	Added support for the CMU TCP/IP transport
$!   13-Dec-1993	F.Macrides		macrides@@sci.wfeb.edu
$!	Mods for conditional compilations with VAXC versus DECC
$!   10-Dec-1993	F.Macrides		macrides@@sci.wfeb.edu
$!	Initial version, for WWWLibrary v2.14 with Lynx v2.1
$!
$ ON CONTROL_Y THEN GOTO CLEANUP
$ ON ERROR THEN GOTO CLEANUP
$!
$!	Compiler definitions can be added here as a comma separated
$!	list with a lead comma, e.g., ",HAVE_FOO_H,DO_BLAH".  They
$!	will apply only to the libwww-FM modules. - FM
$!
$ extra_defs = ",ACCESS_AUTH"
$!
$!	Include-paths can be added here as a comma separated
$!	list with a lead comma, e.g., ",foo".
$!
$ extra_incs = ""
$!
$ extra_libs = ""
$!
$!	If no TCP/IP agent is specified (as the first argument),
$!	prompt for a number from the list.   Note that the agent
$!	must be the first argument if the debugger mode is to be
$!	set via a second argument (see below). - FM
$!
$ agent = 0
$ IF P1 .EQS. ""
$ THEN
$ 	write sys$output "Acceptable TCP/IP agents are"
$ 	write sys$output " [1] MultiNet (default)"
$ 	write sys$output " [2] UCX"
$ 	write sys$output " [3] WIN_TCP"
$	write sys$output " [4] CMU_TCP"
$	write sys$output " [5] SOCKETSHR_TCP"
$	write sys$output " [6] TCPWARE"
$ 	write sys$output " [7] DECNET"
$ 	write sys$output " [8] TCPIP"
$ 	write sys$output " [9] Multinet UCX emulation"
$ 	read sys$command/prompt="Agent [1,2,3,4,5,6,7,8,9] (RETURN = [1]) " agent
$ ENDIF
$ if agent .eq. 1 .or. agent .eqs. "" .or. p1 .eqs. "MULTINET" then -
    transport = "MULTINET"
$ if agent .eq. 2 .or. p1 .eqs. "UCX"           then transport = "UCX"
$ if agent .eq. 3 .or. p1 .eqs. "WIN_TCP"       then transport = "WIN_TCP"
$ if agent .eq. 4 .or. p1 .eqs. "CMU_TCP"       then transport = "CMU_TCP"
$ if agent .eq. 5 .or. p1 .eqs. "SOCKETSHR_TCP" then transport = "SOCKETSHR_TCP"
$ if agent .eq. 6 .or. p1 .eqs. "TCPWARE"       then transport = "TCPWARE"
$ if agent .eq. 7 .or. p1 .eqs. "DECNET"        then transport = "DECNET"
$ if agent .eq. 8 .or. p1 .eqs. "TCPIP"         then transport = "TCPIP"
$ IF agent .EQ. 9 .OR. P1 .EQS. "MULTINETUCX"
$    THEN
$    transport = "UCX"
$    extra_defs = extra_defs + ",MUCX"
$ ENDIF
$!
$ if transport .eqs. "SOCKETSHR_TCP" then extra_defs = extra_defs + ",_DECC_V4_SOURCE"
$ if transport .eqs. "TCPIP"         then extra_defs = extra_defs + ",TCPIP_SERVICES"
$ if transport .eqs. "TCPWARE"       then extra_defs = extra_defs + ",UCX"
$!
$  if option .eqs. "TCPIP"
$  then
$     if f$trnlnm("TCPIP$IPC_SHR") .eqs. "" then define TCPIP$IPC_SHR SYS$LIBRARY:TCPIP$IPC_SHR
$  endif
$!
$ if P2 .nes. ""
$ then
$   count_parm = 0
$ parse_p2:
$   value_parm = f$element('count_parm, ",", "''p2'")
$   if value_parm .nes. ","
$   then
$      if value_parm .eqs. "BZLIB"
$      then
$         write sys$output "** adding BZlib to build."
$         extra_defs = extra_defs + ",USE_BZLIB"
$         extra_incs = extra_incs + "," + BZLIB_INC
$         extra_libs = extra_libs + "," + BZLIB_LIB + "libbz2/LIB"
$      endif
$      if value_parm .eqs. "SLANG"
$      then
$         write sys$output "** adding SLang to build."
$         extra_defs = extra_defs + ",USE_SLANG"
$         extra_incs = extra_incs + "," + SLANG_INC
$         extra_libs = extra_libs + "," + SLANG_LIB + "slang.olb/lib"
$      endif
$      if value_parm .eqs. "SSL"
$      then
$         write sys$output "** adding SSL to build."
$         IF F$TYPE( ssl_lib ) .EQS. "" THEN ssl_lib = F$TRNLNM("SSLLIB")
$         IF F$TYPE( ssl_inc ) .EQS. "" THEN ssl_inc = F$TRNLNM("SSLINCLUDE")
$         extra_defs = extra_defs + ",USE_SSL,USE_OPENSSL_INCL"
$         extra_libs = extra_libs + "," + SSL_LIB + "libssl/LIB," + SSL_LIB + "libcrypto/LIB"
$!
$!	The "#include <openssl/ssl.h>" requires a logical variable "openssl".
$!
$         define/nolog openssl 'SSL_INC
$      endif
$      if value_parm .eqs. "ZLIB"
$      then
$         write sys$output "** adding Zlib to build."
$         extra_defs = extra_defs + ",USE_ZLIB"
$         extra_incs = extra_incs + "," + ZLIB_INC
$         extra_libs = extra_libs + "," + ZLIB_LIB + "libz/LIB"
$      endif
$      count_parm = count_parm + 1
$      goto parse_p2
$   endif
$ endif
$!
$!	Compiler options can be specified here.  If there was
$!	a second argument (with any value), then debugger mode
$!	with no optimization will be specified as well. - FM
$!
$ cc_opts = ""
$ if p3 .nes. "" then cc_opts = cc_opts + "/DEBUG/NOOPT"
$!
$ all_defs = transport + extra_defs
$ all_incs = "[-.Implementation],[---.src],[---.src.chrtrans],[---]" + extra_incs
$!
$ IF f$getsyi("ARCH_NAME") .eqs. "Alpha" .or. -
     f$getsyi("ARCH_NAME") .eqs. "IA64" .or. -
     f$trnlnm("VAXCMSG") .eqs. "DECC$MSG" .or. -
     f$trnlnm("DECC$CC_DEFAULT") .eqs. "/DECC" .or. -
     f$trnlnm("DECC$CC_DEFAULT") .eqs. "/VAXC"
$ THEN
$! DECC:
$  If transport .eqs. "UCX" .or. transport .eqs. "TCPWARE"
$  Then
$    cc := cc/decc/prefix=all /nomember 'cc_opts'-
	  /warning=(disable=implicitfunc)-
	  /DEFINE=('all_defs) -
	  /INCLUDE=('all_incs)
$  Else
$    if transport .eqs. "MULTINET" then -
	extra_defs = extra_defs + ",_DECC_V4_SOURCE,__SOCKET_TYPEDEFS"
$    cc := cc/decc/prefix=all /nomember 'cc_opts'-
	  /warning=(disable=implicitfunc)-
	  /DEFINE=('all_defs) -
	  /INCLUDE=('all_incs)
$  EndIf
$ ELSE
$  IF f$search("gnu_cc:[000000]gcclib.olb") .nes. ""
$  THEN
$! GNUC:
$    cc := gcc/DEFINE=('all_defs) 'cc_opts' /INCLUDE=('all_incs)
$  ELSE
$! VAXC:
$    cc := cc/DEFINE=('all_defs) 'cc_opts' /INCLUDE=('all_incs)
$  ENDIF
$ ENDIF
$ v1 = f$verify(1)
$ show sym cc
$ cc [-.Implementation]HTString.c
$ cc [-.Implementation]HTParse.c
$ cc [-.Implementation]HTAccess.c
$ cc [-.Implementation]HTTP.c
$ cc [-.Implementation]HTFile.c
$ cc [-.Implementation]HTBTree.c
$ cc [-.Implementation]HTFTP.c
$ cc [-.Implementation]HTTCP.c
$ cc [-.Implementation]SGML.c
$ cc [-.Implementation]HTMLDTD.c
$ cc [-.Implementation]HTChunk.c
$ cc [-.Implementation]HTPlain.c
$ cc [-.Implementation]HTMLGen.c
$ cc [-.Implementation]HTAtom.c
$ cc [-.Implementation]HTAnchor.c
$ cc [-.Implementation]HTStyle.c
$ cc [-.Implementation]HTList.c
$ cc [-.Implementation]HTRules.c
$ cc [-.Implementation]HTFormat.c
$ cc [-.Implementation]HTMIME.c
$ cc [-.Implementation]HTNews.c
$ cc [-.Implementation]HTGopher.c
$ cc [-.Implementation]HTTelnet.c
$ cc [-.Implementation]HTFinger.c
$ cc [-.Implementation]HTWSRC.c
$ cc [-.Implementation]HTAAUtil.c
$ cc [-.Implementation]HTAABrow.c
$ cc [-.Implementation]HTGroup.c
$ cc [-.Implementation]HTAAProt.c
$ cc [-.Implementation]HTAssoc.c
$ cc [-.Implementation]HTLex.c
$ cc [-.Implementation]HTUU.c
$ cc [-.Implementation]HTVMSUtils.c
$ cc [-.Implementation]HTWAIS.c
$ cc [-.Implementation]HTVMS_WaisUI.c
$ cc [-.Implementation]HTVMS_WaisProt.c
$!
$ result = "[-.Implementation]WWWLib_''transport'.olb"
$ If f$search("''result'") .eqs. "" Then -
    LIBRARY/Create 'result
$ LIBRARY/Replace 'result *.obj
$ Delete/nolog/noconf *.obj;*
$!
$ v1 = f$verify(v0)
$ CLEANUP:
$    v1 = f$verify(v)
$exit
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d3 1
a3 1
$! $LynxId: libmake.com,v 1.12 2007/07/01 16:02:59 tom Exp $
d8 2
d72 2
a73 1
$ 	read sys$command/prompt="Agent [1,2,3,4,5,6,7,8] (RETURN = [1]) " agent
d84 5
d91 1
a91 1
$ if transport .eqs. "TCPIP"         then extra_defs = extra_defs + ",_DECC_V4_SOURCE,TCPIP_SERVICES"
d94 5
d123 2
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d3 1
d8 2
d69 2
a70 1
$ 	read sys$command/prompt="Agent [1,2,3,4,5,6,7] (RETURN = [1]) " agent
d74 3
a76 3
$ if agent .eq. 2 .or. p1 .eqs. "UCX" then transport = "UCX"
$ if agent .eq. 3 .or. p1 .eqs. "WIN_TCP" then transport = "WIN_TCP"
$ if agent .eq. 4 .or. p1 .eqs. "CMU_TCP" then transport = "CMU_TCP"
d78 3
a80 2
$ if agent .eq. 6 .or. p1 .eqs. "TCPWARE" then transport = "TCPWARE"
$ if agent .eq. 7 .or. p1 .eqs. "DECNET" then transport = "DECNET"
d83 2
a84 1
$ if transport .eqs. "TCPWARE" then extra_defs = extra_defs + ",UCX"
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d1 2
a2 1
$ v = 'f$verify(0)'
d7 2
d41 8
a48 1
$ extra = ""
d77 2
a78 2
$ if transport .eqs. "SOCKETSHR_TCP" then extra = extra + ",_DECC_V4_SOURCE"
$ if transport .eqs. "TCPWARE" then extra = extra + ",UCX"
d80 1
a80 1
$ if p2 .nes. ""
d82 39
a120 4
$   ssl_arg = "openssl"
$   extra = extra + ",USE_SSL,USE_OPENSSL_INCL"
$ else
$   ssl_arg = ""
d130 6
a135 1
$ IF f$trnlnm("VAXCMSG") .eqs. "DECC$MSG" .or. -
a138 1
$  v1 = f$verify(1)
a139 1
$  v1 = 'f$verify(0)'
d142 1
a142 9
$  v1 = f$verify(1)
$!
$ cc/decc/prefix=all /nomember 'cc_opts'-
    /warning=(disable=implicitfunc)-
    /DEFINE=(ACCESS_AUTH,'transport''extra',VC="""2.14""")-
    /INCLUDE=([-.Implementation],[---.src],[---.src.chrtrans],[---]) -
    [-.Implementation]HTString.c
$!
$ cc := cc/decc/prefix=all /nomember 'cc_opts'-
d144 2
a145 4
	  /DEFINE=(ACCESS_AUTH,'transport''extra')-
	  /INCLUDE=([-.Implementation],[---.src],[---.src.chrtrans],[---])
$!
$  v1 = 'f$verify(0)'
d147 3
a149 11
$  if transport .eqs. "MULTINET" then -
	extra = extra + ",_DECC_V4_SOURCE,__SOCKET_TYPEDEFS"
$  v1 = f$verify(1)
$!
$ cc/decc/prefix=all /nomember 'cc_opts'-
    /warning=(disable=implicitfunc)-
    /DEFINE=(ACCESS_AUTH,'transport''extra',VC="""2.14""")-
    /INCLUDE=([-.Implementation],[---.src],[---.src.chrtrans],[---]) -
    [-.Implementation]HTString.c
$!
$ cc := cc/decc/prefix=all /nomember 'cc_opts'-
d151 2
a152 4
	  /DEFINE=(ACCESS_AUTH,'transport''extra')-
	  /INCLUDE=([-.Implementation],[---.src],[---.src.chrtrans],[---])
$!
$  v1 = 'f$verify(0)'
a156 1
$   v1 = f$verify(1)
d158 1
a158 9
$!
$   gcc/DEFINE=(ACCESS_AUTH,'transport''extra',VC="""2.14""") 'cc_opts'-
       /INCLUDE=([-.Implementation],[---.src],[---.src.chrtrans],[---]) -
       [-.Implementation]HTString.c
$!
$   cc := gcc/DEFINE=(ACCESS_AUTH,'transport''extra') 'cc_opts'-
	     /INCLUDE=([-.Implementation],[---.src],[---.src.chrtrans],[---])
$!
$   v1 = 'f$verify(0)'
a159 1
$   v1 = f$verify(1)
d161 1
a161 9
$!
$   cc/DEFINE=(ACCESS_AUTH,'transport''extra',VC="""2.14""") 'cc_opts'-
      /INCLUDE=([-.Implementation],[---.src],[---.src.chrtrans],[---]) -
      [-.Implementation]HTString.c
$!
$   cc := cc/DEFINE=(ACCESS_AUTH,'transport''extra') 'cc_opts'-
	    /INCLUDE=([-.Implementation],[---.src],[---.src.chrtrans],[---])
$!
$   v1 = 'f$verify(0)'
d165 2
d203 4
a206 3
$ If f$search("[-.Implementation]WWWLib_''transport'.olb") .eqs. "" Then -
    LIBRARY/Create [-.Implementation]WWWLib_'transport'.olb
$ LIBRARY/Replace [-.Implementation]WWWLib_'transport'.olb *.obj
d209 1
a209 1
$ v1 = 'f$verify(0)'
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d70 8
d83 1
a83 1
$ if p2 .nes. "" then cc_opts = cc_opts + "/DEBUG/NOOPT"
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@a178 4
$ cc [-.Implementation]getpass.c
$ cc [-.Implementation]getline.c
$ cc [-.Implementation]crypt.c
$ cc [-.Implementation]crypt_util.c
@


1.1
log
@Initial revision
@
text
@d67 1
d90 1
a90 1
    /DEFINE=(DEBUG,ACCESS_AUTH,'transport''extra',VC="""2.14""")-
d96 1
a96 1
	  /DEFINE=(DEBUG,ACCESS_AUTH,'transport''extra')-
d105 1
a105 1
$ cc/decc/prefix=ansi /nomember 'cc_opts'-
d107 1
a107 1
    /DEFINE=(DEBUG,ACCESS_AUTH,'transport''extra',VC="""2.14""")-
d111 1
a111 1
$ cc := cc/decc/prefix=ansi /nomember 'cc_opts'-
d113 1
a113 1
	  /DEFINE=(DEBUG,ACCESS_AUTH,'transport''extra')-
d124 1
a124 1
$   gcc/DEFINE=(DEBUG,ACCESS_AUTH,'transport''extra',VC="""2.14""") 'cc_opts'-
d128 1
a128 1
$   cc := gcc/DEFINE=(DEBUG,ACCESS_AUTH,'transport''extra') 'cc_opts'-
d136 1
a136 1
$   cc/DEFINE=(DEBUG,ACCESS_AUTH,'transport''extra',VC="""2.14""") 'cc_opts'-
d140 1
a140 1
$   cc := cc/DEFINE=(DEBUG,ACCESS_AUTH,'transport''extra') 'cc_opts'-
a157 1
$ cc [-.Implementation]HTWriter.c
a165 1
$ cc [-.Implementation]HTHistory.c
a172 3
$ cc [-.Implementation]HTAAServ.c
$ cc [-.Implementation]HTAAFile.c
$ cc [-.Implementation]HTPasswd.c
a173 2
$ cc [-.Implementation]HTACL.c
$ cc [-.Implementation]HTAuth.c
d186 1
a186 1
$!    
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
