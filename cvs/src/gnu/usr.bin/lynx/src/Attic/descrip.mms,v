head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.5;
commitid	EcR8E7r0stjLUV4p;

1.5
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.40;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.14;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.59;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.59;	author maja;	state Exp;
branches;
next	;


desc
@@


1.6
log
@delinked from tree, now it goes to the bit bucket
@
text
@! $LynxId: descrip.mms,v 1.12 2008/06/30 23:50:22 tom Exp $
!
!       Make LYNX hypertext browser under VMS
!       =====================================
!
!	NOTE:  Use [.SRC.CHRTRANS]BUILD-CHRTRANS.COM to create the
!	       chrtrans header files before using this descrip.mms.
!
! History:
!  1/1/93  creation at KU (Lou montulli@@ukanaix.cc.ukans.edu).
!  4/12/93 (seb@@lns61.tn.cornell.edu)
!           modified to support either UCX or MULTINET
!  12/2/93 modified to support Lynx rewrite
!  12/13/93 (macrides@@sci.wfeb.edu)
!	     Added conditional compilations for VAXC vs. DECC
!	     (dependencies not yet specified; this is just a
!	      "starter", should anyone want to do it well).
!  10/31/94 RLD Updated for Lynx v2.3.4-VMS, supporting OpenCMU
!               and TCPWare
!  11/11/94 RLD Updated for Lynx v2.3.5-VMS
!  11/18/94 FM Updated for SOCKETSHR/NETLIB
!  12/07/94 FM Updated for DECC/VAX, VAXC/VAX and DECC/AXP
!  05/03/95 FM Include /NoMember for DECC (not the default on AXP, and
!		the code assumes byte alignment).
!  06/14/95 FM Added LYList.
!  07/26/95 FM Separated transport (TOPT) and compiler (COPT) option files.
!  07/29/95 FM Added support for GNUC.
!  02/29/96 FM Added LYMap.
!  06/28/97 FM Added UCAuto, UCAux, and UCdomap.
!  15 Sep 06 (TD)	Cleanup...
!
! Instructions:
!       Use the correct command line for your TCP/IP implementation:
!
!	$ MMS                                   for VAXC - MultiNet
!	$ MMS /Macro = (MULTINET=1)		for VAXC - MultiNet
!	$ MMS /Macro = (WIN_TCP=1)              for VAXC - Wollongong TCP/IP
!	$ MMS /Macro = (UCX=1)			for VAXC - UCX
!	$ MMS /Macro = (CMU_TCP=1)		for VAXC - OpenCMU TCP/IP
!	$ MMS /Macro = (SOCKETSHR_TCP=1)	for VAXC - SOCKETSHR/NETLIB
!	$ MMS /Macro = (TCPWARE=1)		for VAXC - TCPWare TCP/IP
!	$ MMS /Macro = (DECNET=1)		for VAXC - socket emulation over DECnet
!
!	$ MMS /Macro = (MULTINET=1, DEC_C=1)	for DECC - MultiNet
!	$ MMS /Macro = (WIN_TCP=1, DEC_C=1)	for DECC - Wollongong TCP/IP
!	$ MMS /Macro = (UCX=1, DEC_C=1)		for DECC - UCX
!	$ MMS /Macro = (CMU_TCP=1, DEC_C=1)	for DECC - OpenCMU TCP/IP
!	$ MMS /Macro = (SOCKETSHR_TCP=1,DEC_C=1) for DECC - SOCKETSHR/NETLIB
!	$ MMS /Macro = (TCPWARE=1, DEC_C=1)	for DECC - OpenCMU TCP/IP
!	$ MMS /Macro = (DECNET=1, DEC_C=1)	for DECC - socket emulation over DECnet
!
!	$ MMS /Macro = (MULTINET=1, GNU_C=1)	for GNUC - MultiNet
!	$ MMS /Macro = (WIN_TCP=1, GNU_C=1)	for GNUC - Wollongong TCP/IP
!	$ MMS /Macro = (UCX=1, GNU_C=1)		for GNUC - UCX
!	$ MMS /Macro = (CMU_TCP=1, GNU_C=1)	for GNUC - OpenCMU TCP/IP
!	$ MMS /Macro = (SOCKETSHR_TCP=1,GNU_C=1) for GNUC - SOCKETSHR/NETLIB
!	$ MMS /Macro = (TCPWARE=1, GNU_C=1)	for GNUC - OpenCMU TCP/IP
!	$ MMS /Macro = (DECNET=1, GNU_C=1)	for GNUC - socket emulation over DECnet

OBJS =	DefaultStyle.obj, GridText.obj, HTAlert.obj, HTFWriter.obj, -
	HTInit.obj, HTML.obj, LYBookmark.obj, LYCgi.obj, LYCharSets.obj, -
	LYCharUtils.obj, LYClean.obj, LYCookie.obj, LYCurses.obj, -
	LYDownload.obj, LYEdit.obj, LYEditmap.obj, LYForms.obj, -
	LYGetFile.obj, LYHistory.obj, LYJump.obj, LYKeymap.obj, -
	LYLeaks.obj, LYList.obj, LYMail.obj, LYMain.obj, LYMainLoop.obj, -
	LYMap.obj, LYNews.obj, LYOptions.obj, LYPrint.obj, LYReadCFG.obj, -
	LYSearch.obj, LYShowInfo.obj, LYStrings.obj, LYTraversal.obj, -
	LYUpload.obj, LYUtils.obj, LYexit.obj, LYrcFile.obj, TRSTable.obj, -
	LYmktime.obj, UCAuto.obj, UCAux.obj, UCdomap.obj, parsdate.obj

.ifdef SLANG
SCREEN_DEF = USE_SLANG
SCREEN_INC = , SLANG_INC 
SCREEN_LIB = , SLANG_LIB:slang.olb/lib
.else
.ifdef DEC_C
SCREEN_DEF = __VMS_CURSES
.endif
.endif

.ifdef DEC_C
COMPILER = DECC
MODEL_DEF = _DECC_V4_SOURCE
.else
MODEL_DEF =
.ifdef GNU_C
COMPILER = GNUC
CC = gcc
.else
COMPILER = VAXC
.endif
.endif

.ifdef WIN_TCP
NETWORK_DEF = WIN_TCP
NETWORK_OPT = WIN_TCP
.else
.ifdef CMU_TCP
NETWORK_DEF = CMU_TCP
NETWORK_OPT = CMU_TCP
.else
.ifdef SOCKETSHR_TCP
NETWORK_DEF = SOCKETSHR_TCP
NETWORK_OPT = SOCKETSHR_TCP
.else
.ifdef UCX
NETWORK_DEF = UCX
.ifdef DEC_C
NETWORK_OPT = UCXSHR
.else
NETWORK_OPT = UCXOLB
.endif
.else
.ifdef TCPWARE
NETWORK_DEF = TCPWARE,UCX
.ifdef DEC_C
NETWORK_OPT = TCPWARESHR
.else
NETWORK_OPT = TCPWAREOLB
.endif
.else
.ifdef DECnet
NETWORK_DEF = DECNET
NETWORK_OPT = DECNET
.else !  Default to MultiNet
NETWORK_DEF = MULTINET,__SOCKET_TYPEDEFS
NETWORK_OPT = MULTINET
.endif !  DECnet
.endif !  TCPWARE
.endif !  UCX
.endif !  SOCKETSHR_TCP
.endif !  CMU_TCP
.endif !  WIN_TCP

COMPILER_DEF = $(MODEL_DEF),$(NETWORK_DEF),$(SCREEN_DEF)

.ifdef DEC_C
MY_CFLAGS = /decc/Prefix=All/NoMember/Define=(ACCESS_AUTH,$(COMPILER_DEF))
.else
MY_CFLAGS = /Define = (ACCESS_AUTH, $(COMPILER_DEF))
.endif

.if "$(MMS_ARCHNAME)" .eq "IA64"
TOPT = 
COPT = 
.else
TOPT = ,sys$disk:[]$(NETWORK_OPT).opt/opt
COPT = ,sys$disk:[]$(COMPILER).opt/opt
.endif

WWWLIB = [-.WWW.Library.Implementation]WWWLib.olb
CFLAGS = $(MY_CFLAGS) $(CFLAGS)/Include=([], [-], [.chrtrans], [-.WWW.Library.Implementation]$(SCREEN_INC))


lynx :	lynx.exe
	@@ Continue

HDRS = [.chrtrans]iso01_uni.h

lynx.exe :   $(HDRS) $(OBJS) $(WWWLIB)
	$(LINK) /Executable = Lynx.exe $(OBJS), $(WWWLIB)/lib $(SCREEN_LIB) $(TOPT) $(COPT)

$(HDRS) :
	set default [.chrtrans]
	@@build-chrtrans
	set default [-]

clean :
	- Set Protection = (Owner:RWED) *.*;-1
	- Purge /NoLog /NoConfirm
	- Delete /NoConfirm /NoLog *.obj;*
	- Delete /NoConfirm /NoLog *.exe;*
@


1.5
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 2
d69 1
a69 1
	UCAuto.obj, UCAux.obj, UCdomap.obj
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d28 1
d69 5
a73 3
.ifdef WIN_TCP
TCP = WIN_TCP
TCPOPT = WIN_TCP
d75 1
a75 1
CDEF = __VMS_CURSES
a78 3
.ifdef CMU_TCP
TCP = CMU_TCP
TCPOPT = CMU_TCP
d80 9
a88 1
CDEF = __VMS_CURSES
d92 8
d101 3
a103 7
TCP = SOCKETSHR_TCP
TCPOPT = SOCKETSHR_TCP
.ifdef DEC_C
CDEF = _DECC_V4_SOURCE,__VMS_CURSES
.endif
.endif

d105 1
a105 1
TCP = UCX
d107 1
a107 2
TCPOPT = UCXSHR
CDEF = __VMS_CURSES
d109 1
a109 1
TCPOPT = UCXOLB
d111 1
a111 2
.endif

d113 1
a113 1
TCP = TCPWARE
d115 1
a115 2
TCTOPT= TCPWARESHR
CDEF = __VMS_CURSES
d117 1
a117 1
TCTOPT= TCPWAREOLB
d119 1
a119 10
.endif

.ifdef MULTINET
TCP = MULTINET
TCPOPT = MULTINET
.ifdef DEC_C
CDEF = _DECC_V4_SOURCE,__SOCKET_TYPEDEFS,__VMS_CURSES
.endif
.endif

d121 11
a131 3
TCP = DECNET
TCPOPT = DECNET
.endif
d133 1
a133 8
.ifdef TCP
.else
TCP = MULTINET
TCPOPT = MULTINET
.ifdef DEC_C
CDEF = _DECC_V4_SOURCE,__SOCKET_TYPEDEFS,__VMS_CURSES
.endif
.endif
d136 1
a136 3
COMPILER = DECC
.ifdef TCPWARE
TCPFLAGS = /decc/Prefix=All/NoMember/Define=(ACCESS_AUTH,$(TCP),UCX,$(CDEF))
d138 1
a138 1
TCPFLAGS = /decc/Prefix=All/NoMember/Define=(ACCESS_AUTH,$(TCP),$(CDEF))
d140 4
d145 2
a146 11
.ifdef GNU_C
COMPILER = GNUC
CC = gcc
.else
COMPILER = VAXC
.endif
.ifdef TCPWARE
TCPFLAGS = /Define = (ACCESS_AUTH, $(TCP), UCX)
.else
TCPFLAGS = /Define = (ACCESS_AUTH, $(TCP))
.endif
d149 2
a150 4
TOPT = sys$disk:[]$(TCPOPT).opt
COPT = sys$disk:[]$(COMPILER).opt
WWWLIB = [-.WWW.Library.Implementation]WWWLib_$(TCP).olb
CFLAGS = $(TCPFLAGS) $(CFLAGS)/Include=([], [-], [.chrtrans], [-.WWW.Library.Implementation])
d159 1
a159 1
	$(LINK) /Executable = Lynx.exe $(OBJS), $(WWWLIB)/lib, $(TOPT)/opt, $(COPT)/opt
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d8 1
a8 1
!  1/1/93  creation at KU (Lou montulli@@ukanaix.cc.ukans.edu). 
d57 1
a57 1
OBJS = 	DefaultStyle.obj, GridText.obj, HTAlert.obj, HTFWriter.obj, -
d60 4
a63 4
	LYDownload.obj, LYEdit.obj, LYEditmap.obj, LYexit.obj, LYForms.obj, -
	LYGetFile.obj, LYHistory.obj, LYJump.obj, LYKeymap.obj, LYLeaks.obj, -
	LYList.obj, LYMail.obj, LYMain.obj, LYMainLoop.obj, LYMap.obj, -
	LYNews.obj, LYOptions.obj, LYPrint.obj, LYrcFile.obj, LYReadCFG.obj, -
d65 2
a66 1
	LYUpload.obj, LYUtils.obj, UCAuto.obj, UCAux.obj, UCdomap.obj
@


1.1
log
@Initial revision
@
text
@d87 1
a87 1
CDEF = __VMS_CURSES
d136 1
a136 1
TCPFLAGS = /decc/Prefix=All/NoMember/Define=(DEBUG,ACCESS_AUTH,$(TCP),UCX,$(CDEF))
d138 1
a138 1
TCPFLAGS = /decc/Prefix=All/NoMember/Define=(DEBUG,ACCESS_AUTH,$(TCP),$(CDEF))
d148 1
a148 1
TCPFLAGS = /Define = (DEBUG, ACCESS_AUTH, $(TCP), UCX)
d150 1
a150 1
TCPFLAGS = /Define = (DEBUG, ACCESS_AUTH, $(TCP))
d157 1
a157 1
CFLAGS = $(TCPFLAGS) $(CFLAGS)/Include = ([-], [.chrtrans], [-.WWW.Library.Implementation])
d163 3
a165 1
lynx.exe :   $(OBJS) $(WWWLIB)
d167 5
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
