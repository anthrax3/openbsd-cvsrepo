head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.22
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.18
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.16
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.46
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.44
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.42
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.40
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.38
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.36
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.34
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.32
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.30
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.28
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.26
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.24
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.22
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.20
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.18
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.16
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.14
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.12
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.10
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.2;
commitid	EcR8E7r0stjLUV4p;

1.2
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.52;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.52;	author maja;	state Exp;
branches;
next	;


desc
@@


1.3
log
@delinked from tree, now it goes to the bit bucket
@
text
@#ifndef __CURSES_LOADED
#define __CURSES_LOADED	1

#include <ssdef.h>
#include <stdio.h>
#include <smgdef.h>

#ifdef __cplusplus
extern "C" {
#endif
#define	reg	register
#ifndef	TRUE
#define	TRUE	(1)
#define	FALSE	(0)
#endif
#define	ERR	(0)
#define	OK	(1)
#define	_SUBWIN		0001
#define	_ENDLINE	0002
#define	_FULLWIN	0004
#define	_SCROLLWIN	0010
#define	_FLUSH		0020
#define	_STANDOUT	0200
#define	_NOECHO		001
#define	_NONL		002
#define	_NOCRMODE	004
#define	_NORAW		010
#define	_BLINK		SMG$M_BLINK
#define	_BOLD		SMG$M_BOLD
#define	_REVERSE	SMG$M_REVERSE
#define	_UNDERLINE	SMG$M_UNDERLINE
    struct _win_st {
	int _cur_y, _cur_x;
	int _max_y, _max_x;
	int _beg_y, _beg_x;
	short _flags;
	char _clear, _leave, _scroll, _wrap;
	char **_y;
	short *_firstch, *_lastch;
	struct _win_st *_next, *_parent, *_child;
	int _id;
    };

    struct _kb_st {
	int _id;
	unsigned char _flags;
	struct {
	    unsigned short length;
	    unsigned char type;
	    unsigned char pclass;
	    char *address;
	} _buffer_desc;
	int _count;
	char *_ptr;
    };

    struct _pb_st {
	int _id;
	int _rows, _cols;
	union SMGDEF *_attr;
	int _attr_size;
    };

#define	_KEYBOARD	struct _kb_st
#define	WINDOW		struct _win_st
#define	_PASTEBOARD	struct _pb_st

    extern int LINES __asm("_$$PsectAttributes_NOSHR$$LINES");
    extern int COLS __asm("_$$PsectAttributes_NOSHR$$COLS");
    extern WINDOW *stdscr __asm("_$$PsectAttributes_NOSHR$$stdscr");
    extern WINDOW *curscr __asm("_$$PsectAttributes_NOSHR$$curscr");
    extern _KEYBOARD *stdkb __asm("_$$PsectAttributes_NOSHR$$stdkb");
    extern _PASTEBOARD *stdpb __asm("_$$PsectAttributes_NOSHR$$stdpb");

#define	getch()		wgetch	(stdscr)
#define	addch(ch)	waddch	(stdscr, ch)
#define	addstr(string)	waddstr	(stdscr, string)
#define	move(y, x)	wmove	(stdscr, y, x)
#define	refresh()	wrefresh (stdscr)
#define	clear()		wclear	(stdscr)
#define	clrtobot()	wclrtobot (stdscr)
#define	clrtoeol()	wclrtoeol (stdscr)
#define	delch()		wdelch 	(stdscr)
#define	erase()		werase (stdscr)
#define	insch(ch)	winsch	(stdscr, ch)
#define	insertln()	winsertln (stdscr)
#define	standout()	wstandout (stdscr)
#define	standend()	wstandend (stdscr)
#define	getstr(string)	wgetstr	(stdscr, string)
#define	inch()		winch	(stdscr)
#define	setattr(attr)	wsetattr (stdscr, attr)
#define	clrattr(attr)	wclrattr (stdscr, attr)
#define	deleteln()	wdeleteln (stdscr)
#define	insstr(string)	winsstr (stdscr, string)

#define mvwaddch(win,y,x,ch)	(wmove(win,y,x)==ERR)?ERR:waddch(win,ch)
#define mvwgetch(win,y,x)	(wmove(win,y,x)==ERR)?ERR:wgetch(win)
#define mvwaddstr(win,y,x,str)	(wmove(win,y,x)==ERR)?ERR:waddstr(win,str)
#define mvwinsstr(win,y,x,str)	(wmove(win,y,x)==ERR)?ERR:winsstr(win,str)
#define mvwgetstr(win,y,x,str)	(wmove(win,y,x)==ERR)?ERR:wgetstr(win,str)
#define mvwinch(win,y,x)	(wmove(win,y,x)==ERR)?ERR:winch(win)
#define mvwdelch(win,y,x)	(wmove(win,y,x)==ERR)?ERR:wdelch(win)
#define mvwinsch(win,y,x,ch)	(wmove(win,y,x)==ERR)?ERR:winsch(win,ch)
#define mvwdeleteln(win,y,x)	(wmove(win,y,x)==ERR)?ERR:wdeleteln(win)
#define mvaddch(y,x,ch)	mvwaddch (stdscr, y, x, ch)
#define mvgetch(y,x)		mvwgetch (stdscr, y, x)
#define mvaddstr(y,x,str)	mvwaddstr (stdscr, y, x, str)
#define mvinsstr(y,x,str)	mvwinsstr (stdscr, y, x, str)
#define mvgetstr(y,x,str)	mvwgetstr (stdscr, y, x, str)
#define mvinch(y,x)		mvwinch (stdscr, y, x)
#define mvdelch(y,x)		mvwdelch (stdscr, y, x)
#define mvinsch(y,x,ch)	mvwinsch (stdscr, y, x, ch)
#define mvdeleteln(y,x)	mvwdeleteln (stdscr, y, x)
#define mvcur(ly,lx,ny,nx)	wmove (stdscr, ny, nx)
#pragma standard

#define clearok(win, bf)	(win->_clear = bf)
#define leaveok(win, bf)	(win->_leave = bf)
#define scrollok(win, bf)	(win->_scroll = bf)
#define wrapok(win, bf)	(win->_wrap = bf)
#define flushok(win,bf) (bf ? win->_flags |= _FLUSH : (win->_flags &= ~_FLUSH))
#define getyx(win,y,x)		y = win->_cur_y, x = win->_cur_x

#define echo()			(stdkb->_flags &= ~_NOECHO)
#define noecho()		(stdkb->_flags |= _NOECHO)
#define nl()			(stdkb->_flags &= ~_NONL)
#define nonl()			(stdkb->_flags |= _NONL)
#define crmode()		((stdkb->_flags &= ~_NOCRMODE), nonl ())
#define nocrmode()		(stdkb->_flags |= _NOCRMODE)
#define raw()			(stdkb->_flags &= ~_NORAW)
#define noraw()		(stdkb->_flags |= _NORAW)

#define check(status)	if (!(status & SS$_NORMAL))	\
			{	c$$translate (status); 	\
				return ERR;		\
			}

#define bool int

    int waddch(WINDOW * win, char ch);

    int waddstr(WINDOW * win, char *str);

    int box(WINDOW * win, char vert, char hor);

    int wclear(WINDOW * win);

    int wclrattr(WINDOW * win, int attr);

    int wclrtobot(WINDOW * win);

    int wclrtoeol(WINDOW * win);

    int wdelch(WINDOW * win);

    int wdeleteln(WINDOW * win);

    int delwin(WINDOW * win);

    int endwin(void);

    int werase(WINDOW * win);

    int wgetch(WINDOW * win);

    int wgetstr(WINDOW * win, char *str);

    char winch(WINDOW * win);

    WINDOW *initscr(void);

    int winsch(WINDOW * win, char ch);

    int winsertln(WINDOW * win);

    int winsstr(WINDOW * win, char *str);

    int longname(char *termbuf, char *name);

    int mvwin(WINDOW * win, int st_row, int st_col);

    int wmove(WINDOW * win, int y, int x);

    WINDOW *newwin(int numlines, int numcols, int begin_y, int begin_x);

    int overlay(WINDOW * win1, WINDOW * win2);

    int overwrite(WINDOW * win1, WINDOW * win2);

#pragma NOSTANDARD
#undef printw
#undef wprintw
#undef wscanw
#undef scanw
#pragma STANDARD

    int printw(char *format_spec,...);

    int wprintw(WINDOW * win, char *format_spec,...);

    int wrefresh(WINDOW * win);

    int wscanw(WINDOW * win, char *format_spec,...);

    int scanw(char *fmt, int arg1);

    int scroll(WINDOW * win);

    int wsetattr(WINDOW * win, int attr);

    WINDOW *subwin(WINDOW * win, int numlines, int numcols,
		   int begin_y, int begin_x);

    int wstandend(WINDOW * win);

    int wstandout(WINDOW * win);

    int touchwin(WINDOW * win);

#if defined(CC$mixed_float) || defined(CC$VAXCSHR)

#ifndef CC$gfloat
#define CC$gfloat 0
#endif

#if CC$gfloat

#define printw  vaxc$gprintw
#define scanw   vaxc$gscanw
#define wprintw vaxc$gwprintw
#define wscanw  vaxc$gwscanw

#else

#define printw  vaxc$dprintw
#define scanw   vaxc$dscanw
#define wprintw vaxc$dwprintw
#define wscanw  vaxc$dwscanw

#endif
#endif

#ifdef __cplusplus
}
#endif
#endif				/* __CURSES_LOADED */
@


1.2
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@@


1.1
log
@Initial revision
@
text
@d8 3
a11 1

a17 1

a23 1

a27 1

d32 31
a62 37

struct	_win_st
{
	int	_cur_y, _cur_x;
	int	_max_y, _max_x;
	int	_beg_y, _beg_x;
	short	_flags;
	char	_clear, _leave, _scroll, _wrap;
	char	**_y;
	short	*_firstch, *_lastch;
	struct _win_st	*_next, *_parent, *_child;
	int	_id;
};


struct	_kb_st
{
	int	_id;
	unsigned char	_flags;
	struct
	{
		unsigned short	length;
		unsigned char	type;
		unsigned char	class;
		char		*address;
	}	_buffer_desc;
	int	_count;
	char	*_ptr;
};

struct	_pb_st
{
	int	_id;
	int	_rows, _cols;
	union	SMGDEF	*_attr;
	int	_attr_size;
};
d68 6
a73 7

extern int LINES __asm("_$$PsectAttributes_NOSHR$$LINES");
extern int COLS __asm("_$$PsectAttributes_NOSHR$$COLS");
extern WINDOW *stdscr __asm("_$$PsectAttributes_NOSHR$$stdscr");
extern WINDOW *curscr __asm("_$$PsectAttributes_NOSHR$$curscr");
extern _KEYBOARD *stdkb __asm("_$$PsectAttributes_NOSHR$$stdkb");
extern _PASTEBOARD *stdpb __asm("_$$PsectAttributes_NOSHR$$stdpb");
d140 1
a140 1
int waddch (WINDOW *win, char ch);
d142 1
a142 1
int waddstr (WINDOW *win, char *str);
d144 1
a144 1
int box (WINDOW *win, char vert, char hor);
d146 1
a146 1
int wclear (WINDOW *win);
d148 1
a148 1
int wclrattr (WINDOW *win, int attr);
d150 1
a150 1
int wclrtobot (WINDOW *win);
d152 1
a152 1
int wclrtoeol (WINDOW *win);
d154 1
a154 1
int wdelch (WINDOW *win);
d156 1
a156 1
int wdeleteln (WINDOW *win);
d158 1
a158 1
int delwin (WINDOW *win);
d160 1
a160 1
int endwin (void);
d162 1
a162 1
int werase (WINDOW *win);
d164 1
a164 1
int wgetch (WINDOW *win);
d166 1
a166 1
int wgetstr (WINDOW *win, char *str);
d168 1
a168 1
char winch (WINDOW *win);
d170 1
a170 1
WINDOW *initscr (void);
d172 1
a172 1
int winsch (WINDOW *win, char ch);
d174 1
a174 1
int winsertln (WINDOW *win);
d176 1
a176 1
int winsstr (WINDOW *win, char *str);
d178 1
a178 1
int longname (char *termbuf, char *name);
d180 1
a180 1
int mvwin (WINDOW *win, int st_row, int st_col);
d182 1
a182 1
int wmove (WINDOW *win, int y, int x);
d184 1
a184 1
WINDOW *newwin (int numlines, int numcols, int begin_y, int begin_x);
d186 1
a186 1
int overlay (WINDOW *win1, WINDOW *win2);
d188 1
a188 1
int overwrite (WINDOW *win1, WINDOW *win2);
d197 1
a197 1
int printw (char *format_spec, ...);
d199 1
a199 1
int wprintw (WINDOW *win, char *format_spec, ...);
d201 1
a201 1
int wrefresh (WINDOW *win);
d203 1
a203 1
int wscanw (WINDOW *win, char *format_spec, ...);
d205 1
a205 1
int	scanw (char *fmt, int arg1);
d207 1
a207 1
int scroll (WINDOW *win);
d209 1
a209 1
int wsetattr (WINDOW *win, int attr);
d211 2
a212 2
WINDOW *subwin (WINDOW *win, int numlines, int numcols,
			int begin_y, int begin_x);
d214 1
a214 1
int wstandend (WINDOW *win);
d216 1
a216 1
int wstandout (WINDOW *win);
d218 1
a218 1
int touchwin (WINDOW *win);
d243 4
a246 1
#endif					/* __CURSES_LOADED */
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
