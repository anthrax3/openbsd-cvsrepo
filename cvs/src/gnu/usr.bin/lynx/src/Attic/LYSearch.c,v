head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.50;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.12;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.55;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.55;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYSearch.c,v 1.40 2013/10/13 20:23:07 tom Exp $
 */
#include <HTUtils.h>
#include <HTAlert.h>
#include <LYUtils.h>
#include <LYStrings.h>
#include <LYSearch.h>
#include <LYGlobalDefs.h>
#include <GridText.h>

#include <LYLeaks.h>

#define MATCH(a,b) (BOOL)(LYno_attr_strstr(a, b) != 0)

/*
 * Handle special field-related comparisons for anchor_has_target() and
 * link_has_target().
 */
BOOL field_has_target(FormInfo * field, const char *target)
{
    BOOL result = FALSE;
    OptionType *option;
    char *stars = NULL;
    const char *cp;

    if ((field != NULL && field->value != NULL) &&
	field->type != F_HIDDEN_TYPE) {
	if (field->type == F_PASSWORD_TYPE) {
	    /*
	     * Check the actual (hidden password), and then the displayed
	     * string - FM
	     */
	    if (MATCH(field->value, target)) {
		result = TRUE;
	    } else {
		StrAllocCopy(stars, field->value);
		memset(stars, '*', strlen(stars));
		result = MATCH(stars, target);
		FREE(stars);
	    }
	} else if (field->type == F_OPTION_LIST_TYPE) {
	    /*
	     * Search the option strings that are displayed when the popup is
	     * invoked - FM
	     */
	    for (option = field->select_list; option != NULL; option = option->next) {
		if (MATCH(option->name, target)) {
		    result = TRUE;
		    break;
		}
	    }
	} else if (field->type == F_RADIO_TYPE) {
	    /*
	     * Search for checked or unchecked parens - FM
	     */
	    cp = ((field->num_value)
		  ? checked_radio
		  : unchecked_radio);
	    result = MATCH(cp, target);
	} else if (field->type == F_CHECKBOX_TYPE) {
	    /*
	     * Search for checked or unchecked square brackets - FM
	     */
	    cp = ((field->num_value)
		  ? checked_box
		  : unchecked_box);
	    result = MATCH(cp, target);
	} else {
	    result = MATCH(field->value, target);
	}
    }
    return result;
}

/*
 * see also anchor_has_target
 */
static BOOL link_has_target(int cur,
			    char *target)
{
    LinkInfo *a = &links[cur];
    char *text = NULL;
    const char *last = "?";
    int count;

    /*
     * Combine the parts of the link's text using the highlighting information,
     * and compare the target against that.
     */
    for (count = 0; count < 10; ++count) {
	const char *part = LYGetHiliteStr(cur, count);

	if (part == NULL || part == last) {
	    if (MATCH(text, target)) {
		return TRUE;
	    }
	    break;
	}
	StrAllocCat(text, part);
	last = part;
    }

    return field_has_target(a->l_form, target);
}

/*
 * Search for the target string inside of the links that are currently
 * displayed on the screen beginning with the one after the currently selected
 * one.  If found set cur to the new value and return TRUE.  If not found do
 * not reset cur and return FALSE.
 */

static int check_next_target_in_links(int *cur,
				      char *target)
{
    int i;

    if (nlinks != 0) {
	for (i = *cur + 1; i < nlinks; ++i) {
	    if (link_has_target(i, target)) {
		*cur = i;
		return TRUE;
	    }
	}
    }
    return FALSE;
}

static int check_prev_target_in_links(int *cur,
				      char *target)
{
    int i;

    if (nlinks != 0) {
	for (i = *cur - 1; i >= 0; --i) {
	    if (link_has_target(i, target)) {
		*cur = i;
		return TRUE;
	    }
	}
    }
    return FALSE;
}

/*
 * Textsearch checks the prev_target variable to see if it is empty.  If it is
 * then it requests a new search string.  It then searches the current file for
 * the next instance of the search string and finds the line number that the
 * string is on
 *
 * This is the primary USER search engine and is case sensitive or case
 * insensitive depending on the 'LYcase_sensitive' global variable
 */
BOOL textsearch(DocInfo *cur_doc,
		bstring **prev_target,
		int direction)
{
    int offset;
    int oldcur = cur_doc->link;
    static bstring *my_prev_target = NULL;
    static BOOL first = TRUE;
    char *cp;
    int ch = 0;
    RecallType recall;
    int QueryTotal;
    int QueryNum;
    BOOLEAN FirstRecall = TRUE;

    /*
     * Initialize the search string buffer.  - FM
     */
    if (first) {
	BStrCopy0(my_prev_target, "");
	first = FALSE;
    }

    QueryTotal = (search_queries ? HTList_count(search_queries) : 0);
    recall = ((QueryTotal >= 1) ? RECALL_URL : NORECALL);
    QueryNum = QueryTotal;

    if (direction != 0) {
	/*
	 * LYK_NEXT or LYK_PREV was pressed, so copy the buffer into
	 * prev_target.
	 */
	BStrCopy(*prev_target, my_prev_target);
    } else if (*prev_target == 0) {
	BStrCopy0(*prev_target, "");
    }

    if (strlen((*prev_target)->str) == 0) {
	/*
	 * This is a new WHEREIS search ('/'), or LYK_NEXT was pressed but
	 * there was no previous search, so we need to get a search string from
	 * the user.  - FM
	 */
	_statusline(ENTER_WHEREIS_QUERY);

	ch = LYgetBString(prev_target, FALSE, 0, recall);
	if (ch < 0) {
	    /*
	     * User cancelled the search via ^G.  Restore prev_target and
	     * return.  - FM
	     */
	    BStrCopy(*prev_target, my_prev_target);
	    HTInfoMsg(CANCELLED);
	    return (FALSE);
	}
    }

  check_recall:
    if (strlen((*prev_target)->str) == 0 &&
	!(recall && (ch == UPARROW_KEY || ch == DNARROW_KEY))) {
	/*
	 * No entry.  Simply return, retaining the current buffer.  Because
	 * prev_target is now reset, highlighting of the previous search string
	 * will no longer occur, but it can be used again via LYK_NEXT or
	 * LYK_PREV.
	 */
	HTInfoMsg(CANCELLED);
	return (FALSE);
    }

    if (recall && ch == UPARROW_KEY) {
	if (FirstRecall) {
	    /*
	     * Use the current string or last query in the list.  - FM
	     */
	    FirstRecall = FALSE;
	    if (!isBEmpty(my_prev_target)) {
		for (QueryNum = (QueryTotal - 1); QueryNum > 0; QueryNum--) {
		    if ((cp = (char *) HTList_objectAt(search_queries,
						       QueryNum)) != NULL &&
			!strcmp(my_prev_target->str, cp)) {
			break;
		    }
		}
	    } else {
		QueryNum = 0;
	    }
	} else {
	    /*
	     * Go back to the previous query in the list.  - FM
	     */
	    QueryNum++;
	}
	if (QueryNum >= QueryTotal)
	    /*
	     * Roll around to the last query in the list.  - FM
	     */
	    QueryNum = 0;
	if ((cp = (char *) HTList_objectAt(search_queries,
					   QueryNum)) != NULL) {
	    BStrCopy0(*prev_target, cp);
	    if (!isBEmpty(my_prev_target) &&
		!strcmp(my_prev_target->str, (*prev_target)->str)) {
		_statusline(EDIT_CURRENT_QUERY);
	    } else if ((!isBEmpty(my_prev_target) && QueryTotal == 2) ||
		       (isBEmpty(my_prev_target) && QueryTotal == 1)) {
		_statusline(EDIT_THE_PREV_QUERY);
	    } else {
		_statusline(EDIT_A_PREV_QUERY);
	    }
	    ch = LYgetBString(prev_target, FALSE, 0, recall);
	    if (ch < 0) {
		/*
		 * User canceled the search via ^G.  Restore prev_target and
		 * return.  - FM
		 */
		BStrCopy(*prev_target, my_prev_target);
		HTInfoMsg(CANCELLED);
		return (FALSE);
	    }
	    goto check_recall;
	}
    } else if (recall && ch == DNARROW_KEY) {
	if (FirstRecall) {
	    /*
	     * Use the current string or first query in the list.  - FM
	     */
	    FirstRecall = FALSE;
	    if (!isBEmpty(my_prev_target)) {
		for (QueryNum = 0; QueryNum < (QueryTotal - 1); QueryNum++) {
		    if ((cp = (char *) HTList_objectAt(search_queries,
						       QueryNum)) != NULL &&
			!strcmp(my_prev_target->str, cp)) {
			break;
		    }
		}
	    } else {
		QueryNum = QueryTotal - 1;
	    }
	} else {
	    /*
	     * Advance to the next query in the list.  - FM
	     */
	    QueryNum--;
	}
	if (QueryNum < 0)
	    /*
	     * Roll around to the first query in the list.  - FM
	     */
	    QueryNum = QueryTotal - 1;
	if ((cp = (char *) HTList_objectAt(search_queries,
					   QueryNum)) != NULL) {
	    BStrCopy0(*prev_target, cp);
	    if (!isBEmpty(my_prev_target) &&
		!strcmp(my_prev_target->str, (*prev_target)->str)) {
		_statusline(EDIT_CURRENT_QUERY);
	    } else if ((!isBEmpty(my_prev_target) && QueryTotal == 2) ||
		       (isBEmpty(my_prev_target) && QueryTotal == 1)) {
		_statusline(EDIT_THE_PREV_QUERY);
	    } else {
		_statusline(EDIT_A_PREV_QUERY);
	    }
	    ch = LYgetBString(prev_target, FALSE, 0, recall);
	    if (ch < 0) {
		/*
		 * User cancelled the search via ^G.  Restore prev_target and
		 * return.  - FM
		 */
		BStrCopy(*prev_target, my_prev_target);
		HTInfoMsg(CANCELLED);
		return (FALSE);
	    }
	    goto check_recall;
	}
    }
    /*
     * Replace the search string buffer with the new target.  - FM
     */
    BStrCopy(my_prev_target, *prev_target);
    HTAddSearchQuery(my_prev_target->str);

    if (direction < 0) {
	offset = 0;
	if (check_prev_target_in_links(&cur_doc->link, (*prev_target)->str)) {
	    /*
	     * Found in link, changed cur, we're done.
	     */
	    LYhighlight(FALSE, oldcur, (*prev_target)->str);
	    return (TRUE);
	}
    } else {

	/*
	 * Search the links on the currently displayed page for the string,
	 * starting after the current link.  - FM
	 */
	if (check_next_target_in_links(&cur_doc->link, (*prev_target)->str)) {
	    /*
	     * Found in link, changed cur, we're done.
	     */
	    LYhighlight(FALSE, oldcur, (*prev_target)->str);
	    return (TRUE);
	}

	/*
	 * We'll search the text starting from the link we are on, or the next
	 * page.
	 */
	if (nlinks == 0)
	    offset = (display_lines - 1);
	else
	    offset = links[cur_doc->link].ly - 1;
    }

    /*
     * Resume search, this time for all text.  Set www_search_result if string
     * found, and position the hit near top of screen.
     */
    www_user_search((cur_doc->line + offset), cur_doc, (*prev_target)->str, direction);
    if (cur_doc->link != oldcur) {
	LYhighlight(FALSE, oldcur, (*prev_target)->str);
	return (TRUE);
    }
    return (BOOL) (www_search_result > 0);
}
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYSearch.c,v 1.23 2009/01/01 23:28:39 tom Exp $
d14 7
a20 2
static BOOL link_has_target(int cur,
			    char *target)
d22 1
a22 1
    LinkInfo *a = &links[cur];
a25 14
    int count;

    /*
     * Search the hightext strings, if present, taking the case_sensitive
     * setting into account.
     */
    for (count = 0;; ++count) {
	const char *text = LYGetHiliteStr(cur, count);

	if (text == NULL)
	    break;
	if (LYno_attr_strstr(text, target))
	    return TRUE;
    }
d27 3
a29 7
    /*
     * Search the relevant form fields, taking the case_sensitive setting into
     * account.  - FM
     */
    if ((a->l_form != NULL && a->l_form->value != NULL) &&
	a->l_form->type != F_HIDDEN_TYPE) {
	if (a->l_form->type == F_PASSWORD_TYPE) {
d31 2
a32 2
	     * Check the actual, hidden password, and then the displayed
	     * string.  - FM
d34 6
a39 6
	    if (LYno_attr_strstr(a->l_form->value, target)) {
		return TRUE;
	    }
	    StrAllocCopy(stars, a->l_form->value);
	    memset(stars, '*', strlen(stars));
	    if (LYno_attr_strstr(stars, target)) {
a40 1
		return TRUE;
d42 1
a42 2
	    FREE(stars);
	} else if (a->l_form->type == F_OPTION_LIST_TYPE) {
d45 1
a45 1
	     * invoked.  - FM
d47 4
a50 4
	    option = a->l_form->select_list;
	    while (option != NULL) {
		if (LYno_attr_strstr(option->name, target)) {
		    return TRUE;
a51 13
		option = option->next;
	    }
	} else if (a->l_form->type == F_RADIO_TYPE) {
	    /*
	     * Search for checked or unchecked parens.  - FM
	     */
	    if (a->l_form->num_value) {
		cp = checked_radio;
	    } else {
		cp = unchecked_radio;
	    }
	    if (LYno_attr_strstr(cp, target)) {
		return TRUE;
d53 1
a53 1
	} else if (a->l_form->type == F_CHECKBOX_TYPE) {
d55 1
a55 1
	     * Search for checked or unchecked square brackets.  - FM
d57 12
a68 8
	    if (a->l_form->num_value) {
		cp = checked_box;
	    } else {
		cp = unchecked_box;
	    }
	    if (LYno_attr_strstr(cp, target)) {
		return TRUE;
	    }
d70 26
a95 6
	    /*
	     * Check the values intended for display.  May have been found
	     * already via the hightext search, but make sure here that the
	     * entire value is searched.  - FM
	     */
	    if (LYno_attr_strstr(a->l_form->value, target)) {
d98 1
d100 2
d103 2
a104 1
    return FALSE;
d153 1
a153 1
 * insensitive depending on the 'case_sensitive' global variable
d155 2
a156 2
BOOL textsearch(DocInfo *cur_doc, char *prev_target,
		int target_size,
d161 1
a161 1
    static char prev_target_buffer[512];	/* Search string buffer */
d174 1
a174 1
	*prev_target_buffer = '\0';
d182 1
a182 1
    if (direction != 0)
d187 4
a190 1
	LYstrncpy(prev_target, prev_target_buffer, target_size);
d192 1
a192 1
    if (strlen(prev_target) == 0) {
d200 1
a200 1
	ch = LYgetstr(prev_target, VISIBLE, (unsigned) target_size, recall);
d206 1
a206 1
	    LYstrncpy(prev_target, prev_target_buffer, target_size);
d213 2
a214 2
    if (strlen(prev_target) == 0 &&
	!(recall && (ch == UPARROW || ch == DNARROW))) {
d225 1
a225 1
    if (recall && ch == UPARROW) {
d231 1
a231 1
	    if (*prev_target_buffer) {
d235 1
a235 1
			!strcmp(prev_target_buffer, cp)) {
d255 3
a257 3
	    LYstrncpy(prev_target, cp, target_size);
	    if (*prev_target_buffer &&
		!strcmp(prev_target_buffer, prev_target)) {
d259 2
a260 2
	    } else if ((*prev_target_buffer && QueryTotal == 2) ||
		       (!(*prev_target_buffer) && QueryTotal == 1)) {
d265 1
a265 1
	    ch = LYgetstr(prev_target, VISIBLE, (unsigned) target_size, recall);
d271 1
a271 1
		LYstrncpy(prev_target, prev_target_buffer, target_size);
d277 1
a277 1
    } else if (recall && ch == DNARROW) {
d283 1
a283 1
	    if (*prev_target_buffer) {
d287 1
a287 1
			!strcmp(prev_target_buffer, cp)) {
d307 3
a309 3
	    LYstrncpy(prev_target, cp, target_size);
	    if (*prev_target_buffer &&
		!strcmp(prev_target_buffer, prev_target)) {
d311 2
a312 2
	    } else if ((*prev_target_buffer && QueryTotal == 2) ||
		       (!(*prev_target_buffer) && QueryTotal == 1)) {
d317 1
a317 1
	    ch = LYgetstr(prev_target, VISIBLE, (unsigned) target_size, recall);
d323 1
a323 1
		LYstrncpy(prev_target, prev_target_buffer, target_size);
d333 2
a334 2
    LYstrncpy(prev_target_buffer, prev_target, sizeof(prev_target_buffer) - 1);
    HTAddSearchQuery(prev_target_buffer);
d338 1
a338 1
	if (check_prev_target_in_links(&cur_doc->link, prev_target)) {
d342 1
a342 1
	    LYhighlight(OFF, oldcur, prev_target);
d351 1
a351 1
	if (check_next_target_in_links(&cur_doc->link, prev_target)) {
d355 1
a355 1
	    LYhighlight(OFF, oldcur, prev_target);
d373 1
a373 1
    www_user_search((cur_doc->line + offset), cur_doc, prev_target, direction);
d375 1
a375 1
	LYhighlight(OFF, oldcur, prev_target);
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d197 2
a198 1
	if ((ch = LYgetstr(prev_target, VISIBLE, target_size, recall)) < 0) {
d262 2
a263 1
	    if ((ch = LYgetstr(prev_target, VISIBLE, target_size, recall)) < 0) {
d314 2
a315 1
	    if ((ch = LYgetstr(prev_target, VISIBLE, target_size, recall)) < 0) {
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d11 2
a12 3
PRIVATE BOOL link_has_target ARGS2(
	int,		cur,
	char *,		target)
d16 2
a17 1
    char *stars = NULL, *cp;
d24 3
a26 2
    for (count = 0; ; ++count) {
	char *text = LYGetHiliteStr(cur, count);
d34 2
a35 2
     *  Search the relevant form fields, taking the
     *  case_sensitive setting into account. - FM
d41 2
a42 2
	     *  Check the actual, hidden password, and then
	     *  the displayed string. - FM
d48 1
a48 2
	    for (cp = stars; *cp != '\0'; cp++)
		*cp = '*';
d56 2
a57 2
	     *  Search the option strings that are displayed
	     *  when the popup is invoked. - FM
d68 1
a68 1
	     *  Search for checked or unchecked parens. - FM
d80 1
a80 1
	     *  Search for checked or unchecked square brackets. - FM
d92 3
a94 4
	     *  Check the values intended for display.
	     *  May have been found already via the
	     *  hightext search, but make sure here
	     *  that the entire value is searched. - FM
d105 4
a108 5
 *  Search for the target string inside of the links
 *  that are currently displayed on the screen beginning
 *  with the one after the currently selected one.
 *  If found set cur to the new value and return TRUE.
 *  If not found do not reset cur and return FALSE.
d111 2
a112 3
PRIVATE int check_next_target_in_links ARGS2(
	int *,		cur,
	char *,		target)
d127 2
a128 3
PRIVATE int check_prev_target_in_links ARGS2(
	int *,		cur,
	char *,		target)
d144 4
a147 4
 *  Textsearch checks the prev_target variable to see if it is empty.
 *  If it is then it requests a new search string.  It then searches
 *  the current file for the next instance of the search string and
 *  finds the line number that the string is on
d149 2
a150 3
 *  This is the primary USER search engine and is case sensitive
 *  or case insensitive depending on the 'case_sensitive' global
 *  variable
d152 3
a154 5
PUBLIC BOOL textsearch ARGS4(
	DocInfo *,	cur_doc,
	char *,		prev_target,
	int,		target_size,
	int,		direction)
d158 1
a158 1
    static char prev_target_buffer[512]; /* Search string buffer */
d161 2
a162 1
    int ch = 0, recall;
d168 1
a168 1
     *  Initialize the search string buffer. - FM
d181 2
a182 2
	 *  LYK_NEXT or LYK_PREV was pressed, so copy the
	 *  buffer into prev_target.
d186 1
a186 1
    if (strlen(prev_target) == 0 ) {
d188 3
a190 4
	 *  This is a new WHEREIS search ('/'), or
	 *  LYK_NEXT was pressed but there was no
	 *  previous search, so we need to get a
	 *  search string from the user. - FM
d196 2
a197 2
	     *  User cancelled the search via ^G.
	     *  Restore prev_target and return. - FM
d201 1
a201 1
	    return(FALSE);
d205 1
a205 1
check_recall:
d209 4
a212 4
	 *  No entry.  Simply return, retaining the current buffer.
	 *  Because prev_target is now reset, highlighting of the
	 *  previous search string will no longer occur, but it can
	 *  be used again via LYK_NEXT or LYK_PREV.
d215 1
a215 1
	return(FALSE);
d221 1
a221 1
	     *  Use the current string or last query in the list. - FM
d226 2
a227 2
		    if ((cp = (char *)HTList_objectAt(search_queries,
						      QueryNum)) != NULL &&
d231 2
a232 2
		 }
	     } else {
d234 1
a234 1
	     }
d237 1
a237 1
	     *  Go back to the previous query in the list. - FM
d243 1
a243 1
	     *  Roll around to the last query in the list. - FM
d246 2
a247 2
	if ((cp = (char *)HTList_objectAt(search_queries,
					  QueryNum)) != NULL) {
d260 2
a261 2
		 *  User canceled the search via ^G.
		 *  Restore prev_target and return. - FM
d265 1
a265 1
		return(FALSE);
d272 1
a272 1
	     *  Use the current string or first query in the list. - FM
d277 2
a278 2
		    if ((cp = (char *)HTList_objectAt(search_queries,
						      QueryNum)) != NULL &&
d288 1
a288 1
	     *  Advance to the next query in the list. - FM
d294 1
a294 1
	     *  Roll around to the first query in the list. - FM
d297 2
a298 2
	if ((cp = (char *)HTList_objectAt(search_queries,
					  QueryNum)) != NULL) {
d311 2
a312 2
		 *  User cancelled the search via ^G.
		 *  Restore prev_target and return. - FM
d316 1
a316 1
		return(FALSE);
d322 1
a322 1
     *  Replace the search string buffer with the new target. - FM
d324 1
a324 1
    LYstrncpy(prev_target_buffer, prev_target, sizeof(prev_target_buffer)-1);
d331 1
a331 1
	     *  Found in link, changed cur, we're done.
d334 1
a334 1
	    return(TRUE);
d339 2
a340 2
	 *  Search the links on the currently displayed page for
	 *  the string, starting after the current link. - FM
d344 1
a344 1
	     *  Found in link, changed cur, we're done.
d347 1
a347 1
	    return(TRUE);
d351 2
a352 2
	 *  We'll search the text starting from the
	 *  link we are on, or the next page.
d361 2
a362 3
     *  Resume search, this time for all text.
     *  Set www_search_result if string found,
     *  and position the hit near top of screen.
d367 1
a367 1
	return(TRUE);
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d12 1
a12 1
	linkstruct *,	a,
d15 1
d18 1
d21 2
a22 2
     *  Search the hightext string, and hightext2 if present,
     *  taking the case_sensitive setting into account. - FM
d24 6
a29 3
    if (LYno_attr_strstr(a->hightext, target)
     || LYno_attr_strstr(a->hightext2, target)) {
	return TRUE;
d36 3
a38 3
    if ((a->form != NULL && a->form->value != NULL) &&
	a->form->type != F_HIDDEN_TYPE) {
	if (a->form->type == F_PASSWORD_TYPE) {
d43 1
a43 1
	    if (LYno_attr_strstr(a->form->value, target)) {
d46 1
a46 1
	    StrAllocCopy(stars, a->form->value);
d54 1
a54 1
	} else if (a->form->type == F_OPTION_LIST_TYPE) {
d59 1
a59 1
	    option = a->form->select_list;
d66 1
a66 1
	} else if (a->form->type == F_RADIO_TYPE) {
d70 1
a70 1
	    if (a->form->num_value) {
d78 1
a78 1
	} else if (a->form->type == F_CHECKBOX_TYPE) {
d82 1
a82 1
	    if (a->form->num_value) {
d97 1
a97 1
	    if (LYno_attr_strstr(a->form->value, target)) {
d121 1
a121 1
	    if (link_has_target(&links[i], target)) {
d138 1
a138 1
	    if (link_has_target(&links[i], target)) {
d158 1
a158 1
	document *,	cur_doc,
d340 1
a340 1
	    highlight(OFF, oldcur, prev_target);
d353 1
a353 1
	    highlight(OFF, oldcur, prev_target);
d374 1
a374 1
	highlight(OFF, oldcur, prev_target);
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d11 89
d108 1
a108 1
PRIVATE int check_for_target_in_links ARGS2(
d110 1
a110 1
	char *,		new_target)
d112 1
a112 3
    int i = *cur + 1;
    OptionType *option;
    char *stars = NULL, *cp;
d114 10
a123 2
    if (nlinks == 0)
	return(FALSE);
d125 5
a129 17
    for (; i < nlinks; i++) {
        /*
	 *  Search the hightext string, and hightext2 if present,
	 *  taking the case_sensitive setting into account. - FM
	 */
	if (((links[i].hightext != NULL && case_sensitive == TRUE) &&
	     LYno_attr_char_strstr(links[i].hightext, new_target)) ||
	    ((links[i].hightext != NULL && case_sensitive == FALSE) &&
	     LYno_attr_char_case_strstr(links[i].hightext, new_target))) {
	    break;
	}
	if (((links[i].hightext2 != NULL && case_sensitive == TRUE) &&
	     LYno_attr_char_strstr(links[i].hightext2, new_target)) ||
	    ((links[i].hightext2 != NULL && case_sensitive == FALSE) &&
	     LYno_attr_char_case_strstr(links[i].hightext2, new_target))) {
	    break;
	}
d131 5
a135 96
	/*
	 *  Search the relevant form fields, taking the
	 *  case_sensitive setting into account. - FM
	 */
	if ((links[i].form != NULL && links[i].form->value != NULL) &&
	    links[i].form->type != F_HIDDEN_TYPE) {
	    if (links[i].form->type == F_PASSWORD_TYPE) {
	        /*
		 *  Check the actual, hidden password, and then
		 *  the displayed string. - FM
		 */
		if (((case_sensitive == TRUE) &&
		     LYno_attr_char_strstr(links[i].form->value,
					   new_target)) ||
		    ((case_sensitive == FALSE) &&
		     LYno_attr_char_case_strstr(links[i].form->value,
						new_target))) {
		    break;
		}
		StrAllocCopy(stars, links[i].form->value);
		for (cp = stars; *cp != '\0'; cp++)
		    *cp = '*';
		if (((case_sensitive == TRUE) &&
		     LYno_attr_char_strstr(stars, new_target)) ||
		    ((case_sensitive == FALSE) &&
		     LYno_attr_char_case_strstr(stars, new_target))) {
		    FREE(stars);
		    break;
		}
		FREE(stars);
	    } else if (links[i].form->type == F_OPTION_LIST_TYPE) {
		/*
		 *  Search the option strings that are displayed
		 *  when the popup is invoked. - FM
		 */
		option = links[i].form->select_list;
		while (option != NULL) {
		    if (((option->name != NULL &&
			  case_sensitive == TRUE) &&
			 LYno_attr_char_strstr(option->name, new_target)) ||
			((option->name != NULL &&
			  case_sensitive == FALSE) &&
			 LYno_attr_char_case_strstr(option->name,
						    new_target))) {
			break;
		    }
		    option = option->next;
		}
		if (option != NULL) {
		    break;
		}
	    } else if (links[i].form->type == F_RADIO_TYPE) {
		/*
		 *  Search for checked or unchecked parens. - FM
		 */
	        if (links[i].form->num_value) {
		    cp = checked_radio;
		} else {
		    cp = unchecked_radio;
		}
		if (((case_sensitive == TRUE) &&
		     LYno_attr_char_strstr(cp, new_target)) ||
		    ((case_sensitive == FALSE) &&
		     LYno_attr_char_case_strstr(cp, new_target))) {
		    break;
		}
	    } else if (links[i].form->type == F_CHECKBOX_TYPE) {
		/*
		 *  Search for checked or unchecked square brackets. - FM
		 */
	        if (links[i].form->num_value) {
		    cp = checked_box;
		} else {
		    cp = unchecked_box;
		}
		if (((case_sensitive == TRUE) &&
		     LYno_attr_char_strstr(cp, new_target)) ||
		    ((case_sensitive == FALSE) &&
		     LYno_attr_char_case_strstr(cp, new_target))) {
		    break;
		}
	    } else {
	        /*
		 *  Check the values intended for display.
		 *  May have been found already via the
		 *  hightext search, but make sure here
		 *  that the entire value is searched. - FM
		 */
		if (((case_sensitive == TRUE) &&
		     LYno_attr_char_strstr(links[i].form->value,
					   new_target)) ||
		    ((case_sensitive == FALSE) &&
		     LYno_attr_char_case_strstr(links[i].form->value,
						new_target))) {
		    break;
		}
d139 1
a139 6

    if (i == nlinks)
	return(FALSE);
 
    *cur = i;
    return(TRUE);
d144 1
a144 1
 *  If it is then it requests a new search string.  It then searches 
d147 1
a147 1
 * 
a150 1
 *
d152 1
a152 2
		
PUBLIC BOOL textsearch ARGS3(
d155 2
a156 1
	BOOL,		next)
d177 1
a177 1
    recall = ((QueryTotal >= 1) ? RECALL : NORECALL);
d180 4
a183 4
    if (next)
        /*
	 *  LYK_NEXT was pressed, so copy the
	 *  buffer into prev_target. - FM
d185 1
a185 1
	strcpy(prev_target, prev_target_buffer);
d188 1
a188 1
        /*
d196 1
a196 2
	if ((ch = LYgetstr(prev_target, VISIBLE,
	    		   sizeof(prev_target_buffer), recall)) < 0) {
d201 1
a201 1
	    strcpy(prev_target, prev_target_buffer);
d209 2
a210 2
        !(recall && (ch == UPARROW || ch == DNARROW))) {
        /*
d214 1
a214 1
	 *  be used again via LYK_NEXT.   - FM
d216 1
a216 1
        HTInfoMsg(CANCELLED);
d227 1
a227 1
	        for (QueryNum = (QueryTotal - 1); QueryNum > 0; QueryNum--) {
d229 3
a231 3
	    					      QueryNum)) != NULL &&
		        !strcmp(prev_target_buffer, cp)) {
		        break;
d249 2
a250 2
	    				  QueryNum)) != NULL) {
	    strcpy(prev_target, cp);
d252 1
a252 1
	        !strcmp(prev_target_buffer, prev_target)) {
d260 3
a262 4
	    if ((ch = LYgetstr(prev_target, VISIBLE,
	    		       sizeof(prev_target_buffer), recall)) < 0) {
	        /*
		 *  User cancelled the search via ^G.
d265 1
a265 1
		strcpy(prev_target, prev_target_buffer);
d278 1
a278 1
	        for (QueryNum = 0; QueryNum < (QueryTotal - 1); QueryNum++) {
d280 3
a282 3
	    					      QueryNum)) != NULL &&
		        !strcmp(prev_target_buffer, cp)) {
		        break;
d300 2
a301 2
	    				  QueryNum)) != NULL) {
	    strcpy(prev_target, cp);
d303 1
a303 1
	        !strcmp(prev_target_buffer, prev_target)) {
d311 2
a312 3
	    if ((ch = LYgetstr(prev_target, VISIBLE,
			       sizeof(prev_target_buffer), recall)) < 0) {
	        /*
d316 1
a316 1
		strcpy(prev_target, prev_target_buffer);
d326 1
a326 1
    strcpy(prev_target_buffer, prev_target);
d329 23
a351 5
    /*
     *  Search the links on the currently displayed page for
     *  the string, starting after the current link. - FM
     */
    if (check_for_target_in_links(&cur_doc->link, prev_target)) {
d353 2
a354 1
	 *  Found in link, changed cur, we're done.
d356 4
a359 2
	highlight(OFF, oldcur, prev_target);
	return(TRUE); 
a360 9
	
    /*
     *  We'll search the text starting from the
     *  link we are on, or the next page.
     */
    if (nlinks == 0)
	offset = (display_lines - 1);
    else
	offset = links[cur_doc->link].ly - 1;
d367 1
a367 1
    www_user_search((cur_doc->line + offset), cur_doc, prev_target);
d372 1
a372 1
    return(www_search_result > 0);
@


1.1
log
@Initial revision
@
text
@d1 7
a7 8
#include "HTUtils.h"
#include "tcp.h"
#include "LYUtils.h"
#include "LYStrings.h"
#include "LYSearch.h"
#include "LYGlobalDefs.h"
#include "GridText.h"
#include "LYSignal.h"
d9 1
a9 3
#include "LYLeaks.h"

#define FREE(x) if (x) {free(x); x = NULL;}
d217 1
a217 2
	    _statusline(CANCELLED);
	    sleep(InfoSecs);
d231 1
a231 2
        _statusline(CANCELLED);
        sleep(InfoSecs);
d282 1
a282 2
		_statusline(CANCELLED);
		sleep(InfoSecs);
d334 1
a334 2
		_statusline(CANCELLED);
		sleep(InfoSecs);
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
