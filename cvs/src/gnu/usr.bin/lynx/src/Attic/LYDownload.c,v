head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.47;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.08;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.52;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.52;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/* $LynxId: LYDownload.c,v 1.69 2013/10/13 20:23:07 tom Exp $ */
#include <HTUtils.h>
#include <HTParse.h>
#include <HTList.h>
#include <HTAlert.h>
#include <LYCurses.h>
#include <LYUtils.h>
#include <LYGlobalDefs.h>
#include <LYStrings.h>
#include <LYDownload.h>

#include <LYLeaks.h>

/*
 * LYDownload takes a URL and downloads it using a user selected download
 * program
 *
 * It parses an incoming link that looks like
 *
 * LYNXDOWNLOAD://Method=<#>/File=<STRING>/SugFile=<STRING>
 */
#ifdef VMS
BOOLEAN LYDidRename = FALSE;
#endif /* VMS */

static char LYValidDownloadFile[LY_MAXPATH] = "\0";

void LYDownload(char *line)
{
    char *Line = NULL, *method, *file, *sug_file = NULL;
    int method_number;
    int count;
    char *the_command = 0;
    bstring *buffer = NULL;
    bstring *command = NULL;
    char *cp;
    lynx_list_item_type *download_command = 0;
    int ch;
    RecallType recall;
    int FnameTotal;
    int FnameNum;
    BOOLEAN FirstRecall = TRUE;
    BOOLEAN SecondS = FALSE;

#ifdef VMS
    LYDidRename = FALSE;
#endif /* VMS */

    /*
     * Make sure we have a valid download file comparison string loaded via the
     * download options menu.  - FM
     */
    if (LYValidDownloadFile[0] == '\0') {
	goto failed;
    }

    /*
     * Make a copy of the LYNXDOWNLOAD internal URL for parsing.  - FM
     */
    StrAllocCopy(Line, line);

    /*
     * Parse out the File, sug_file, and the Method.
     */
    if ((file = strstr(Line, "/File=")) == NULL)
	goto failed;
    *file = '\0';
    /*
     * Go past "File=".
     */
    file += 6;

    if ((sug_file = strstr(file + 1, "/SugFile=")) != NULL) {
	*sug_file = '\0';
	/*
	 * Go past "SugFile=".
	 */
	sug_file += 9;
	HTUnEscape(sug_file);
    }

    /*
     * Make sure that the file string is the one from the last displayed
     * download options menu.  - FM
     */
    if (strcmp(file, LYValidDownloadFile)) {
	goto failed;
    }
#if defined(DIRED_SUPPORT)
    /* FIXME: use HTLocalName */
    if (!StrNCmp(file, "file://localhost", 16)) {
#ifdef __DJGPP__
	if (!StrNCmp(file + 16, "/dev/", 5))
	    file += 16;
	else {
	    file += 17;
	    file = HTDOS_name(file);
	}
#else
	file += 16;
#endif /* __DJGPP__ */
    } else if (isFILE_URL(file))
	file += LEN_FILE_URL;
    HTUnEscape(file);
#else
#if defined(_WINDOWS)		/* 1997/10/15 (Wed) 16:27:38 */
    if (!StrNCmp(file, "file://localhost/", 17))
	file += 17;
    else if (!StrNCmp(file, "file:/", 6))
	file += 6;
    HTUnEscape(file);
#endif /* _WINDOWS */
#endif /* DIRED_SUPPORT */

    if ((method = strstr(Line, "Method=")) == NULL)
	goto failed;
    /*
     * Go past "Method=".
     */
    method += 7;
    method_number = atoi(method);

    /*
     * Set up the sug_filenames recall buffer.
     */
    FnameTotal = (sug_filenames ? HTList_count(sug_filenames) : 0);
    recall = ((FnameTotal >= 1) ? RECALL_URL : NORECALL);
    FnameNum = FnameTotal;

    if (method_number < 0) {
	/*
	 * Write to local file.
	 */
	_statusline(FILENAME_PROMPT);
      retry:
	if (sug_file) {
	    BStrCopy0(buffer, sug_file);
	} else {
	    BStrCopy0(buffer, "");
	}

      check_recall:
	if ((ch = LYgetBString(&buffer, FALSE, 0, recall)) < 0 ||
	    isBEmpty(buffer) ||
	    ch == UPARROW_KEY ||
	    ch == DNARROW_KEY) {

	    if (recall && ch == UPARROW_KEY) {
		if (FirstRecall) {
		    FirstRecall = FALSE;
		    /*
		     * Use the last Fname in the list.  - FM
		     */
		    FnameNum = 0;
		} else {
		    /*
		     * Go back to the previous Fname in the list.  - FM
		     */
		    FnameNum++;
		}
		if (FnameNum >= FnameTotal) {
		    /*
		     * Reset the FirstRecall flag, and use sug_file or a blank.
		     * - FM
		     */
		    FirstRecall = TRUE;
		    FnameNum = FnameTotal;
		    _statusline(FILENAME_PROMPT);
		    goto retry;
		} else if ((cp = (char *) HTList_objectAt(sug_filenames,
							  FnameNum)) != NULL) {
		    BStrCopy0(buffer, cp);
		    if (FnameTotal == 1) {
			_statusline(EDIT_THE_PREV_FILENAME);
		    } else {
			_statusline(EDIT_A_PREV_FILENAME);
		    }
		    goto check_recall;
		}
	    } else if (recall && ch == DNARROW_KEY) {
		if (FirstRecall) {
		    FirstRecall = FALSE;
		    /*
		     * Use the first Fname in the list.  - FM
		     */
		    FnameNum = FnameTotal - 1;
		} else {
		    /*
		     * Advance to the next Fname in the list.  - FM
		     */
		    FnameNum--;
		}
		if (FnameNum < 0) {
		    /*
		     * Set the FirstRecall flag, and use sug_file or a blank.
		     * - FM
		     */
		    FirstRecall = TRUE;
		    FnameNum = FnameTotal;
		    _statusline(FILENAME_PROMPT);
		    goto retry;
		} else if ((cp = (char *) HTList_objectAt(sug_filenames,
							  FnameNum)) != NULL) {
		    BStrCopy0(buffer, cp);
		    if (FnameTotal == 1) {
			_statusline(EDIT_THE_PREV_FILENAME);
		    } else {
			_statusline(EDIT_A_PREV_FILENAME);
		    }
		    goto check_recall;
		}
	    }

	    /*
	     * Save cancelled.
	     */
	    goto cancelled;
	}

	BStrCopy(command, buffer);
	if (!LYValidateFilename(&buffer, &command))
	    goto cancelled;
#ifdef HAVE_POPEN
	else if (LYIsPipeCommand(buffer->str)) {
	    /* I don't know how to download to a pipe */
	    HTAlert(CANNOT_WRITE_TO_FILE);
	    _statusline(NEW_FILENAME_PROMPT);
	    FirstRecall = TRUE;
	    FnameNum = FnameTotal;
	    goto retry;
	}
#endif

	/*
	 * See if it already exists.
	 */
	switch (LYValidateOutput(buffer->str)) {
	case 'Y':
	    break;
	case 'N':
	    _statusline(NEW_FILENAME_PROMPT);
	    FirstRecall = TRUE;
	    FnameNum = FnameTotal;
	    goto retry;
	default:
	    goto cleanup;
	}

	/*
	 * See if we can write to it.
	 */
	CTRACE((tfp, "LYDownload: filename is %s\n", buffer->str));

	SecondS = TRUE;

	HTInfoMsg(SAVING);
#ifdef VMS
	/*
	 * Try rename() first.  - FM
	 */
	CTRACE((tfp, "command: rename(%s, %s)\n", file, buffer->str));
	if (rename(file, buffer->str)) {
	    /*
	     * Failed.  Use spawned COPY_COMMAND.  - FM
	     */
	    CTRACE((tfp, "         FAILED!\n"));
	    LYCopyFile(file, buffer->str);
	} else {
	    /*
	     * We don't have the temporary file (it was renamed to a permanent
	     * file), so set a flag to pop out of the download menu.  - FM
	     */
	    LYDidRename = TRUE;
	}
	chmod(buffer->str, HIDE_CHMOD);
#else /* Unix: */

	LYCopyFile(file, buffer->str);
	LYRelaxFilePermissions(buffer->str);
#endif /* VMS */

    } else {
	/*
	 * Use configured download commands.
	 */
	BStrCopy0(buffer, "");
	for (count = 0, download_command = downloaders;
	     count < method_number;
	     count++, download_command = download_command->next) ;	/* null body */

	/*
	 * Commands have the form "command %s [etc]" where %s is the filename.
	 */
	if (download_command->command != NULL) {
	    /*
	     * Check for two '%s' and ask for the local filename if there is.
	     */
	    if (HTCountCommandArgs(download_command->command) >= 2) {
		_statusline(FILENAME_PROMPT);

	      again:
		if (sug_file) {
		    BStrCopy0(buffer, sug_file);
		} else {
		    BStrCopy0(buffer, "");
		}

	      check_again:
		if ((ch = LYgetBString(&buffer, FALSE, 0, recall)) < 0 ||
		    isBEmpty(buffer) ||
		    ch == UPARROW_KEY ||
		    ch == DNARROW_KEY) {

		    if (recall && ch == UPARROW_KEY) {
			if (FirstRecall) {
			    FirstRecall = FALSE;
			    /*
			     * Use the last Fname in the list.  - FM
			     */
			    FnameNum = 0;
			} else {
			    /*
			     * Go back to the previous Fname in the list.  - FM
			     */
			    FnameNum++;
			}
			if (FnameNum >= FnameTotal) {
			    /*
			     * Reset the FirstRecall flag, and use sug_file or
			     * a blank.  - FM
			     */
			    FirstRecall = TRUE;
			    FnameNum = FnameTotal;
			    _statusline(FILENAME_PROMPT);
			    goto again;
			} else if ((cp = (char *) HTList_objectAt(sug_filenames,
								  FnameNum))
				   != NULL) {
			    BStrCopy0(buffer, cp);
			    if (FnameTotal == 1) {
				_statusline(EDIT_THE_PREV_FILENAME);
			    } else {
				_statusline(EDIT_A_PREV_FILENAME);
			    }
			    goto check_again;
			}
		    } else if (recall && ch == DNARROW_KEY) {
			if (FirstRecall) {
			    FirstRecall = FALSE;
			    /*
			     * Use the first Fname in the list.  - FM
			     */
			    FnameNum = FnameTotal - 1;
			} else {
			    /*
			     * Advance to the next Fname in the list.  - FM
			     */
			    FnameNum--;
			}
			if (FnameNum < 0) {
			    /*
			     * Set the FirstRecall flag, and use sug_file or a
			     * blank.  - FM
			     */
			    FirstRecall = TRUE;
			    FnameNum = FnameTotal;
			    _statusline(FILENAME_PROMPT);
			    goto again;
			} else if ((cp = (char *) HTList_objectAt(sug_filenames,
								  FnameNum))
				   != NULL) {
			    BStrCopy0(buffer, cp);
			    if (FnameTotal == 1) {
				_statusline(EDIT_THE_PREV_FILENAME);
			    } else {
				_statusline(EDIT_A_PREV_FILENAME);
			    }
			    goto check_again;
			}
		    }

		    /*
		     * Download cancelled.
		     */
		    goto cancelled;
		}

		if (no_dotfiles || !show_dotfiles) {
		    if (*LYPathLeaf(buffer->str) == '.') {
			HTAlert(FILENAME_CANNOT_BE_DOT);
			_statusline(NEW_FILENAME_PROMPT);
			goto again;
		    }
		}
		/*
		 * Cancel if the user entered "/dev/null" on Unix, or an "nl:"
		 * path on VMS.  - FM
		 */
		if (LYIsNullDevice(buffer->str)) {
		    goto cancelled;
		}
		SecondS = TRUE;
	    }

	    /*
	     * The following is considered a bug by the community.  If the
	     * command only takes one argument on the command line, then the
	     * suggested file name is not used.  It actually is not a bug at
	     * all and does as it should, putting both names on the command
	     * line.
	     */
	    count = 1;
	    HTAddParam(&the_command, download_command->command, count, file);
	    if (HTCountCommandArgs(download_command->command) > 1)
		HTAddParam(&the_command, download_command->command, ++count, buffer->str);
	    HTEndParam(&the_command, download_command->command, count);

	} else {
	    HTAlert(MISCONF_DOWNLOAD_COMMAND);
	    goto failed;
	}

	CTRACE((tfp, "command: %s\n", the_command));
	stop_curses();
	LYSystem(the_command);
	FREE(the_command);
	start_curses();
	/* don't remove(file); */
    }

    if (SecondS == TRUE) {
#ifdef VMS
	if (0 == strncasecomp(buffer->str, "sys$disk:", 9)) {
	    if (0 == StrNCmp((buffer->str + 9), "[]", 2)) {
		HTAddSugFilename(buffer->str + 11);
	    } else {
		HTAddSugFilename(buffer->str + 9);
	    }
	} else {
	    HTAddSugFilename(buffer->str);
	}
#else
	HTAddSugFilename(buffer->str);
#endif /* VMS */
    }
    goto cleanup;

  failed:
    HTAlert(CANNOT_DOWNLOAD_FILE);
    goto cleanup;

  cancelled:
    HTInfoMsg(CANCELLING);

  cleanup:
    FREE(Line);
    BStrFree(buffer);
    return;
}

/*
 * Compare a filename with a given suffix, which we have set to give a rough
 * idea of its content.
 */
static int SuffixIs(char *filename, const char *suffix)
{
    size_t have = strlen(filename);
    size_t need = strlen(suffix);

    return have > need && !strcmp(filename + have - need, suffix);
}

/*
 * LYdownload_options writes out the current download choices to a file so that
 * the user can select downloaders in the same way that they select all other
 * links.  Download links look like:
 * LYNXDOWNLOAD://Method=<#>/File=<STRING>/SugFile=<STRING>
 */
int LYdownload_options(char **newfile, char *data_file)
{
    static char tempfile[LY_MAXPATH] = "\0";
    char *downloaded_url = NULL;
    char *sug_filename = NULL;
    FILE *fp0;
    lynx_list_item_type *cur_download;
    int count;

    /*
     * Get a suggested filename.
     */
    StrAllocCopy(sug_filename, *newfile);
    change_sug_filename(sug_filename);

    if ((fp0 = InternalPageFP(tempfile, TRUE)) == 0)
	return (-1);

    StrAllocCopy(downloaded_url, *newfile);
    LYLocalFileToURL(newfile, tempfile);

    LYStrNCpy(LYValidDownloadFile,
	      data_file,
	      (sizeof(LYValidDownloadFile) - 1));
    LYforce_no_cache = TRUE;	/* don't cache this doc */

    BeginInternalPage(fp0, DOWNLOAD_OPTIONS_TITLE, DOWNLOAD_OPTIONS_HELP);

    fprintf(fp0, "<pre>\n");
    fprintf(fp0, "<em>%s</em> %s\n",
	    gettext("Downloaded link:"),
	    downloaded_url);
    FREE(downloaded_url);

    fprintf(fp0, "<em>%s</em> %s\n",
	    gettext("Suggested file name:"),
	    sug_filename);

    fprintf(fp0, "\n%s\n",
	    (user_mode == NOVICE_MODE)
	    ? gettext("Standard download options:")
	    : gettext("Download options:"));

    if (!no_disk_save) {
#if defined(DIRED_SUPPORT)
	/*
	 * Disable save to disk option for local files.
	 */
	if (!lynx_edit_mode)
#endif /* DIRED_SUPPORT */
	{
	    fprintf(fp0,
		    "   <a href=\"%s//Method=-1/File=%s/SugFile=%s%s\">%s</a>\n",
		    STR_LYNXDOWNLOAD,
		    data_file,
		    NonNull(lynx_save_space),
		    sug_filename,
		    gettext("Save to disk"));
	    /*
	     * If it is not a binary file, offer the opportunity to view the
	     * downloaded temporary file (see HTSaveToFile).
	     */
	    if (SuffixIs(data_file, HTML_SUFFIX)
		|| SuffixIs(data_file, TEXT_SUFFIX)) {
		char *target = NULL;
		char *source = LYAddPathToSave(data_file);

		LYLocalFileToURL(&target, source);
		fprintf(fp0,
			"   <a href=\"%s\">%s</a>\n",
			target,
			gettext("View temporary file"));

		FREE(source);
		FREE(target);
	    }
	}
    } else {
	fprintf(fp0, "   <em>%s</em>\n", gettext("Save to disk disabled."));
    }

    if (user_mode == NOVICE_MODE)
	fprintf(fp0, "\n%s\n", gettext("Local additions:"));

    if (downloaders != NULL) {
	for (count = 0, cur_download = downloaders; cur_download != NULL;
	     cur_download = cur_download->next, count++) {
	    if (!no_download || cur_download->always_enabled) {
		fprintf(fp0,
			"   <a href=\"%s//Method=%d/File=%s/SugFile=%s\">",
			STR_LYNXDOWNLOAD, count, data_file, sug_filename);
		fprintf(fp0, "%s", (cur_download->name
				    ? cur_download->name
				    : gettext("No Name Given")));
		fprintf(fp0, "</a>\n");
	    }
	}
    }

    fprintf(fp0, "</pre>\n");
    EndInternalPage(fp0);
    LYCloseTempFP(fp0);
    LYRegisterUIPage(*newfile, UIP_DOWNLOAD_OPTIONS);

    /*
     * Free off temp copy.
     */
    FREE(sug_filename);

    return (0);
}
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d1 1
a1 1
/* $LynxId: LYDownload.c,v 1.59 2008/12/14 18:26:03 tom Exp $ */
d34 2
a35 2
    char buffer[LY_MAXPATH];
    char command[LY_MAXPATH];
d91 1
a91 1
    if (!strncmp(file, "file://localhost", 16)) {
d93 1
a93 1
	if (!strncmp(file + 16, "/dev/", 5))
d107 1
a107 1
    if (!strncmp(file, "file://localhost/", 17))
d109 1
a109 1
    else if (!strncmp(file, "file:/", 6))
d136 6
a141 4
	if (sug_file)
	    LYstrncpy(buffer, sug_file, ((sizeof(buffer) / 2) - 1));
	else
	    *buffer = '\0';
d143 6
a148 4
	if ((ch = LYgetstr(buffer,
			   VISIBLE, (sizeof(buffer) / 2), recall)) < 0 ||
	    *buffer == '\0' || ch == UPARROW || ch == DNARROW) {
	    if (recall && ch == UPARROW) {
d172 1
a172 1
		    LYstrncpy(buffer, cp, sizeof(buffer) - 1);
d180 1
a180 1
	    } else if (recall && ch == DNARROW) {
d204 1
a204 1
		    LYstrncpy(buffer, cp, sizeof(buffer) - 1);
d220 2
a221 2
	strcpy(command, buffer);
	if (!LYValidateFilename(buffer, command))
d224 1
a224 1
	else if (LYIsPipeCommand(buffer)) {
d237 1
a237 1
	switch (LYValidateOutput(buffer)) {
d246 1
a246 2
	    FREE(Line);
	    return;
d252 1
a252 1
	CTRACE((tfp, "LYDownload: filename is %s\n", buffer));
a253 5
	if (!LYCanWriteFile(buffer)) {
	    FirstRecall = TRUE;
	    FnameNum = FnameTotal;
	    goto retry;
	}
d261 2
a262 2
	CTRACE((tfp, "command: rename(%s, %s)\n", file, buffer));
	if (rename(file, buffer)) {
d267 1
a267 1
	    LYCopyFile(file, buffer);
d275 1
a275 1
	chmod(buffer, HIDE_CHMOD);
d278 2
a279 2
	LYCopyFile(file, buffer);
	LYRelaxFilePermissions(buffer);
d286 1
a286 1
	buffer[0] = '\0';
d300 1
d303 1
a303 1
		    strncpy(buffer, sug_file, (sizeof(buffer) / 2) - 1);
d305 1
a305 1
		    *buffer = '\0';
d307 1
d309 6
a314 4
		if ((ch = LYgetstr(buffer, VISIBLE,
				   sizeof(buffer), recall)) < 0 ||
		    *buffer == '\0' || ch == UPARROW || ch == DNARROW) {
		    if (recall && ch == UPARROW) {
d339 1
a339 1
			    LYstrncpy(buffer, cp, sizeof(buffer) - 1);
d347 1
a347 1
		    } else if (recall && ch == DNARROW) {
d372 1
a372 1
			    LYstrncpy(buffer, cp, sizeof(buffer) - 1);
d389 1
a389 1
		    if (*LYPathLeaf(buffer) == '.') {
d399 1
a399 1
		if (LYIsNullDevice(buffer)) {
d415 1
a415 1
		HTAddParam(&the_command, download_command->command, ++count, buffer);
d433 3
a435 3
	if (0 == strncasecomp(buffer, "sys$disk:", 9)) {
	    if (0 == strncmp((buffer + 9), "[]", 2)) {
		HTAddSugFilename(buffer + 11);
d437 1
a437 1
		HTAddSugFilename(buffer + 9);
d440 1
a440 1
	    HTAddSugFilename(buffer);
d443 1
a443 1
	HTAddSugFilename(buffer);
d446 1
a446 2
    FREE(Line);
    return;
d450 1
a450 2
    FREE(Line);
    return;
d454 2
d457 1
d500 1
a500 1
    LYstrncpy(LYValidDownloadFile,
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 1
d159 1
a159 1
		     * Reset the FirstRecall flag, and use sug_file or a blank. 
d191 1
a191 1
		     * Set the FirstRecall flag, and use sug_file or a blank. 
d302 2
a303 1
	      again:if (sug_file)
d305 1
a305 1
		else
d307 1
d473 1
a473 1
 * links.  Download links look like: 
d519 1
a519 1
    if (!no_disk_save && !child_lynx) {
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d14 2
a15 2
 *  LYDownload takes a URL and downloads it using a user selected
 *  download program
d17 1
a17 1
 *  It parses an incoming link that looks like
d19 1
a19 1
 *  LYNXDOWNLOAD://Method=<#>/File=<STRING>/SugFile=<STRING>
d22 1
a22 1
PUBLIC BOOLEAN LYDidRename = FALSE;
d25 1
a25 1
PRIVATE char LYValidDownloadFile[LY_MAXPATH] = "\0";
d27 1
a27 2
PUBLIC void LYDownload ARGS1(
	char *,		line)
d37 2
a38 1
    int ch, recall;
d43 1
d49 2
a50 3
     *	Make sure we have a valid download
     *	file comparison string loaded via
     *	the download options menu. - FM
d57 1
a57 2
     *	Make a copy of the LYNXDOWNLOAD
     *	internal URL for parsing. - FM
d62 1
a62 1
     *	Parse out the File, sug_file, and the Method.
d68 1
a68 1
     *	Go past "File=".
d75 1
a75 1
	 *  Go past "SugFile=".
d82 2
a83 2
     *	Make sure that the file string is the one from
     *	the last displayed download options menu. - FM
a87 1

d101 1
a101 2
    }
    else if (isFILE_URL(file))
d105 1
a105 1
#if defined(_WINDOWS)	/* 1997/10/15 (Wed) 16:27:38 */
d117 1
a117 1
     *	Go past "Method=".
d123 1
a123 1
     *	Set up the sug_filenames recall buffer.
d131 1
a131 1
	 *  Write to local file.
d134 1
a134 1
retry:
d136 1
a136 1
	    LYstrncpy(buffer, sug_file, ((sizeof(buffer)/2) - 1));
d139 1
a139 1
check_recall:
d141 1
a141 1
			   VISIBLE, (sizeof(buffer)/2), recall)) < 0 ||
d147 1
a147 1
		     *	Use the last Fname in the list. - FM
d152 1
a152 1
		     *	Go back to the previous Fname in the list. - FM
d158 2
a159 2
		     *	Reset the FirstRecall flag,
		     *	and use sug_file or a blank. - FM
d165 3
a167 4
		} else if ((cp = (char *)HTList_objectAt(
						sug_filenames,
						FnameNum)) != NULL) {
		    LYstrncpy(buffer, cp, sizeof(buffer)-1);
d179 1
a179 1
		     *	Use the first Fname in the list. - FM
d184 1
a184 1
		     *	Advance to the next Fname in the list. - FM
d190 2
a191 2
		     *	Set the FirstRecall flag,
		     *	and use sug_file or a blank. - FM
d197 3
a199 4
		} else if ((cp = (char *)HTList_objectAt(
						sug_filenames,
						FnameNum)) != NULL) {
		    LYstrncpy(buffer, cp, sizeof(buffer)-1);
d210 1
a210 1
	     *	Save cancelled.
d230 1
a230 1
	 *  See if it already exists.
d246 1
a246 1
	 *  See if we can write to it.
d250 1
a250 1
	if (! LYCanWriteFile(buffer)) {
d260 1
a260 1
	 *  Try rename() first. - FM
d265 1
a265 1
	     *	Failed.  Use spawned COPY_COMMAND. - FM
d271 2
a272 3
	     *	We don't have the temporary file (it was renamed to
	     *	a permanent file), so set a flag to pop out of the
	     *	download menu. - FM
d285 1
a285 1
	 *  Use configured download commands.
d288 1
a288 1
	for (count = 0, download_command=downloaders;
d290 1
a290 2
	     count++, download_command = download_command->next)
	    ; /* null body */
d293 1
a293 2
	 *  Commands have the form "command %s [etc]"
	 *  where %s is the filename.
d297 1
a297 2
	     *	Check for two '%s' and ask for the local filename if
	     *	there is.
d301 2
a302 2
	again:	if (sug_file)
		    strncpy(buffer, sug_file, (sizeof(buffer)/2) - 1);
d305 1
a305 1
	check_again:
d313 1
a313 1
			     *	Use the last Fname in the list. - FM
d318 1
a318 2
			     *	Go back to the previous Fname
			     *	in the list. - FM
d324 2
a325 2
			     *	Reset the FirstRecall flag,
			     *	and use sug_file or a blank. - FM
d331 4
a334 4
			} else if ((cp = (char *)HTList_objectAt(
							sug_filenames,
							FnameNum)) != NULL) {
			    LYstrncpy(buffer, cp, sizeof(buffer)-1);
d346 1
a346 1
			     *	Use the first Fname in the list. - FM
d351 1
a351 1
			     *	Advance to the next Fname in the list. - FM
d357 2
a358 2
			     *	Set the FirstRecall flag,
			     *	and use sug_file or a blank. - FM
d364 4
a367 4
			} else if ((cp = (char *)HTList_objectAt(
							sug_filenames,
							FnameNum)) != NULL) {
			    LYstrncpy(buffer, cp, sizeof(buffer)-1);
d391 2
a392 2
		 *  Cancel if the user entered "/dev/null" on Unix,
		 *  or an "nl:" path on VMS. - FM
d401 5
a405 5
	     *	The following is considered a bug by the community.
	     *	If the command only takes one argument on the command
	     *	line, then the suggested file name is not used.
	     *	It actually is not a bug at all and does as it should,
	     *	putting both names on the command line.
d429 2
a430 2
	    if (0 == strncmp((buffer+9), "[]", 2)) {
		HTAddSugFilename(buffer+11);
d432 1
a432 1
		HTAddSugFilename(buffer+9);
d444 1
a444 1
failed:
d449 1
a449 1
cancelled:
d459 1
a459 3
PRIVATE int SuffixIs ARGS2(
	char *,		filename,
	char *,		suffix)
d463 1
d468 4
a471 4
 *  LYdownload_options writes out the current download choices to
 *  a file so that the user can select downloaders in the same way that
 *  they select all other links.  Download links look like:
 *  LYNXDOWNLOAD://Method=<#>/File=<STRING>/SugFile=<STRING>
d473 1
a473 3
PUBLIC int LYdownload_options ARGS2(
	char **,	newfile,
	char *,		data_file)
d483 1
a483 1
     *	Get a suggested filename.
d489 1
a489 1
	return(-1);
d497 1
a497 2
    LYforce_no_cache = TRUE;  /* don't cache this doc */

d519 1
a519 1
	 *  Disable save to disk option for local files.
d536 1
a536 1
	     || SuffixIs(data_file, TEXT_SUFFIX)) {
d559 1
a559 1
			cur_download = cur_download->next, count++) {
d561 7
a567 5
		fprintf(fp0, "   <a href=\"%s//Method=%d/File=%s/SugFile=%s\">",
			STR_LYNXDOWNLOAD, count,data_file, sug_filename);
		fprintf(fp0, "%s", (cur_download->name ?
			cur_download->name : gettext("No Name Given")));
		fprintf(fp0,"</a>\n");
d578 1
a578 1
     *	Free off temp copy.
d582 1
a582 1
    return(0);
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d94 6
a99 2
	file += 17;
	file = HTDOS_name(file);
d104 2
a105 2
    else if (!strncmp(file, "file:", 5))
	file += 5;
d223 1
a223 1
#if HAVE_POPEN
a285 2

#if defined(UNIX)
a286 1
#endif /* defined(UNIX) */
d402 1
a402 1
		 *  or an "nl:" path (case-insensitive) on VMS. - FM
d404 1
a404 11
#ifdef VMS
		if (!strncasecomp(buffer, "nl:", 3) ||
		    !strncasecomp(buffer, "/nl/", 4))
#else
#if defined(DOSPATH)	/* 1997/10/15 (Wed) 16:41:30 */
		if (!strcmp(buffer, "nul"))
#else
		if (!strcmp(buffer, "/dev/null"))
#endif /* DOSPATH */
#endif /* VMS */
		{
d466 13
d501 1
a501 8
    if (LYReuseTempfiles) {
	fp0 = LYOpenTempRewrite(tempfile, HTML_SUFFIX, BIN_W);
    } else {
	LYRemoveTemp(tempfile);
	fp0 = LYOpenTemp(tempfile, HTML_SUFFIX, BIN_W);
    }
    if (fp0 == NULL) {
	HTAlert(CANNOT_OPEN_TEMP);
d503 1
a503 1
    }
d537 27
a563 6
	fprintf(fp0,
		"   <a href=\"LYNXDOWNLOAD://Method=-1/File=%s/SugFile=%s%s\">%s</a>\n",
		data_file,
		(lynx_save_space ? lynx_save_space : ""),
		sug_filename,
		gettext("Save to disk"));
d575 2
a576 2
		fprintf(fp0, "   <a href=\"LYNXDOWNLOAD://Method=%d/File=%s/SugFile=%s\">",
			count,data_file, sug_filename);
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d28 1
a28 1
	char *, 	line)
d37 1
a37 2
    lynx_html_item_type *download_command = 0;
    FILE *fp;
d63 1
a63 1
     *	Parse out the sug_file, Method and the File.
d65 10
a74 2
    if ((sug_file = (char *)strstr(Line, "SugFile=")) != NULL) {
	*(sug_file-1) = '\0';
d78 1
a78 1
	sug_file += 8;
a81 8
    if ((file = (char *)strstr(Line, "File=")) == NULL)
	goto failed;
    *(file-1) = '\0';
    /*
     *	Go past "File=".
     */
    file += 5;

d90 1
a90 1
#ifdef DIRED_SUPPORT
d92 5
a96 1
    if (!strncmp(file, "file://localhost", 16))
d98 2
d103 8
d113 1
a113 1
    if ((method = (char *)strstr(Line, "Method=")) == NULL)
d125 1
a125 1
    recall = ((FnameTotal >= 1) ? RECALL : NORECALL);
d167 1
a167 1
		    strcpy(buffer, cp);
d200 1
a200 1
		    strcpy(buffer, cp);
d249 1
a249 1
	CTRACE(tfp, "LYDownload: filename is %s", buffer);
d251 1
a251 6
	if ((fp = fopen(buffer, "w")) != NULL) {
	    fclose(fp);
	    remove(buffer);
	} else {
	    HTAlert(CANNOT_WRITE_TO_FILE);
	    _statusline(NEW_FILENAME_PROMPT);
d263 1
a263 1
	CTRACE(tfp, "command: rename(%s, %s)\n", file, buffer);
d268 1
a268 1
	    CTRACE(tfp, "         FAILED!\n");
d343 1
a343 1
			    strcpy(buffer, cp);
d376 1
a376 1
			    strcpy(buffer, cp);
d407 3
d411 1
d437 1
a437 1
	CTRACE(tfp, "command: %s\n", the_command);
d482 1
a482 1
	char *, 	data_file)
d484 1
a484 1
    static char tempfile[LY_MAXPATH];
d488 1
a488 1
    lynx_html_item_type *cur_download;
d497 7
a503 2
    LYRemoveTemp(tempfile);
    if ((fp0 = LYOpenTemp(tempfile, HTML_SUFFIX, "w")) == NULL) {
d520 1
a520 1
    	    gettext("Downloaded link:"),
d525 1
a525 1
    	    gettext("Suggested file name:"),
d534 1
a534 1
#ifdef DIRED_SUPPORT
d569 1
@


1.1
log
@Initial revision
@
text
@d1 9
a9 20
#include "HTUtils.h"
#include "tcp.h"
#include "HTParse.h"
#include "HTList.h"
#include "HTAlert.h"
#include "LYCurses.h"
#include "LYUtils.h"
#include "LYGlobalDefs.h"
#include "LYSignal.h"
#include "LYStrings.h"
#include "LYClean.h"
#include "LYGetFile.h"
#include "LYDownload.h"
#include "LYSystem.h"
#ifdef VMS
#include "HTVMSUtils.h"
#endif /* VMS */
#ifdef DOSPATH
#include "HTDOS.h"
#endif
d11 1
a11 4
#include "LYexit.h"
#include "LYLeaks.h"

#define FREE(x) if (x) {free(x); x = NULL;}
a21 1
#define COPY_COMMAND "copy/nolog/noconf %s %s"
d25 1
a25 1
PRIVATE char LYValidDownloadFile[256] = "\0";
d33 4
a36 3
    char buffer[512];
    char command[512];
    char *cp, *cp1;
a37 1
    int c, len;
a44 1
    extern BOOLEAN HadVMSInterrupt;
d72 1
d92 1
d203 2
a204 25
	if (no_dotfiles || !show_dotfiles) {
	  if (*buffer == '.' ||
#ifdef VMS
	      ((cp = strrchr(buffer, ':')) && *(cp+1) == '.') ||
	      ((cp = strrchr(buffer, ']')) && *(cp+1) == '.') ||
#endif /* VMS */
	      ((cp = strrchr(buffer, '/')) && *(cp+1) == '.')) {
		HTAlert(FILENAME_CANNOT_BE_DOT);
		_statusline(NEW_FILENAME_PROMPT);
		FirstRecall = TRUE;
		FnameNum = FnameTotal;
		goto retry;
	  }
	}
	/*
	 *  Cancel if the user entered "/dev/null" on Unix,
	 *  or an "nl:" path (case-insensitive) on VMS. - FM
	 */
#ifdef VMS
	if (!strncasecomp(buffer, "nl:", 3) ||
	    !strncasecomp(buffer, "/nl/", 4))
#else
	if (!strcmp(buffer, "/dev/null"))
#endif /* VMS */
	{
d206 8
a214 40
	if ((cp = strchr(buffer, '~'))) {
	    *(cp++) = '\0';
	    strcpy(command, buffer);
	    if ((len = strlen(command)) > 0 && command[len-1] == '/')
		command[len-1] = '\0';
#ifdef DOSPATH
	    strcat(command, HTDOS_wwwName((char *)Home_Dir()));
#else
#ifdef VMS
	    strcat(command, HTVMS_wwwName((char *)Home_Dir()));
#else
	    strcat(command, Home_Dir());
#endif /* VMS */
#endif /* DOSPATH */
	    strcat(command, cp);
	    strcpy(buffer, command);
	}
#ifdef VMS
	if (strchr(buffer, '/') != NULL) {
	    strcpy(command, HTVMS_name("", buffer));
	    strcpy(buffer, command);
	}
	if (buffer[0] != '/' && strchr(buffer, ':') == NULL) {
	    strcpy(command, "sys$disk:");
	    if (strchr(buffer, ']') == NULL)
		strcat(command, "[]");
	    strcat(command, buffer);
	    strcpy(buffer, command);
	}
#else
	if (*buffer != '/')
	    cp = getenv("PWD");
	else
	    cp = NULL;
	if (cp) {
	    sprintf(command, "%s/%s", cp, buffer);
#ifdef DOSPATH
	    strcpy(buffer, HTDOS_name(command));
#else
	    strcpy(buffer, command);
a215 2
	}
#endif /* VMS */
d220 11
a230 29
	if ((fp = fopen(buffer, "r")) != NULL) {
	    fclose(fp);

#ifdef VMS
	    _statusline(FILE_EXISTS_HPROMPT);
#else
	    _statusline(FILE_EXISTS_OPROMPT);
#endif /* VMS */
	    c = 0;
	    while(TOUPPER(c)!='Y' && TOUPPER(c)!='N' && c != 7 && c != 3)
		c = LYgetch();
#ifdef VMS
	    if (HadVMSInterrupt) {
		HadVMSInterrupt = FALSE;
		FREE(Line);
		return;
	    }
#endif /* VMS */

	    if (c == 7 || c == 3) { /* Control-G or Control-C */
		goto cancelled;
	    }

	    if (TOUPPER(c) == 'N') {
		_statusline(NEW_FILENAME_PROMPT);
		FirstRecall = TRUE;
		FnameNum = FnameTotal;
		goto retry;
	    }
d236 2
d250 1
a250 2
	_statusline(SAVING);
	sleep(InfoSecs);
d255 1
a255 2
	if (TRACE)
	    fprintf(stderr, "command: rename(%s, %s)\n", file, buffer);
d260 2
a261 12
	    if (TRACE)
		fprintf(stderr, "         FAILED!\n");
	    sprintf(command, COPY_COMMAND, file, buffer);
	    if (TRACE)
		fprintf(stderr, "command: %s\n", command);
	    fflush(stderr);
	    fflush(stdout);
	    stop_curses();
	    system(command);
	    fflush(stdout);
	    fflush(stderr);
	    start_curses();
d272 3
a274 17
	/*
	 *  Prevent spoofing of the shell.
	 */
	cp = quote_pathname(file);
	cp1 = quote_pathname(buffer);
	sprintf(command, "%s %s %s", COPY_PATH, cp, cp1);
	FREE(cp);
	FREE(cp1);
	if (TRACE)
	    fprintf(stderr, "command: %s\n", command);
	fflush(stderr);
	fflush(stdout);
	stop_curses();
	system(command);
	fflush(stdout);
	fflush(stderr);
	start_curses();
d299 1
a299 2
	    char *first_s = strstr(download_command->command, "%s");
	    if (first_s && strstr(first_s+1, "%s")) {
d302 1
a302 1
		    strcpy(buffer, sug_file);
d385 1
a385 6
		    if (*buffer == '.' ||
#ifdef VMS
		       ((cp = strrchr(buffer, ':')) && *(cp+1) == '.') ||
		       ((cp = strrchr(buffer, ']')) && *(cp+1) == '.') ||
#endif /* VMS */
		       ((cp = strrchr(buffer, '/')) && *(cp+1) == '.')) {
d414 5
a418 14
#ifdef VMS
	    sprintf(command, download_command->command, file, buffer,
			     "", "", "", "", "", "", "", "", "", "");
#else /* Unix: */
	    /*
	     *	Prevent spoofing of the shell.
	     */
	    cp = quote_pathname(file);
	    cp1 = quote_pathname(buffer);
	    sprintf(command, download_command->command, cp, cp1,
			     "", "", "", "", "", "", "", "", "", "");
	    FREE(cp);
	    FREE(cp1);
#endif /* VMS */
d421 1
a421 2
	    _statusline(MISCONF_DOWNLOAD_COMMAND);
	    sleep(AlertSecs);
d425 1
a425 2
	if (TRACE)
	    fprintf(stderr, "command: %s\n", command);
d427 2
a428 5
	fflush(stderr);
	fflush(stdout);
	system(command);
	fflush(stderr);
	fflush(stdout);
d452 1
a452 2
    _statusline(CANNOT_DOWNLOAD_FILE);
    sleep(AlertSecs);
d457 1
a457 2
    _statusline(CANCELLING);
    sleep(InfoSecs);
d464 1
a464 1
 *  a file so that the user can select printers in the same way that
d472 2
a473 3
    static char tempfile[256];
    static BOOLEAN first = TRUE;
    static char download_filename[256];
a478 14
    if (first) {
	tempname(tempfile, NEW_FILE);
	first = FALSE;
#if defined (VMS) || defined (DOSPATH)
    sprintf(download_filename, "file://localhost/%s", tempfile);
#else
    sprintf(download_filename, "file://localhost%s", tempfile);
#endif /* VMS */
#ifdef VMS
    } else {
	remove(tempfile);   /* Remove duplicates on VMS. */
#endif /* VMS */
    }

d485 2
a486 1
    if ((fp0 = LYNewTxtFile(tempfile)) == NULL) {
d490 2
a495 1
    StrAllocCopy(*newfile, download_filename);
a497 5
    fprintf(fp0, "<head>\n<title>%s</title>\n</head>\n<body>\n",
		 DOWNLOAD_OPTIONS_TITLE);

    fprintf(fp0,"<h1>Download Options (%s Version %s)</h1><pre>\n",
				       LYNX_NAME, LYNX_VERSION);
d499 1
d501 14
a514 2
    fprintf(fp0, "   You have the following download choices.\n");
    fprintf(fp0, "   Please select one:\n\n");
d516 1
a516 1
    if(!no_disk_save && !child_lynx)
d523 12
a534 8
	    fprintf(fp0,"   \
<a href=\"LYNXDOWNLOAD://Method=-1/File=%s/SugFile=%s%s\">Save to disk</a>\n",
	   data_file, (lynx_save_space ? lynx_save_space : ""), sug_filename);
#ifdef DIRED_SUPPORT
	else {}
#endif /* DIRED_SUPPORT */
    else
	fprintf(fp0,"   Save to disk disabled.\n");
d540 4
a543 5
		fprintf(fp0,"   \
<a href=\"LYNXDOWNLOAD://Method=%d/File=%s/SugFile=%s\">",
				count,data_file, sug_filename);
		fprintf(fp0, (cur_download->name ?
				cur_download->name : "No Name Given"));
a546 4
    } else {
	fprintf(fp0, "\n\
No other download methods have been defined yet.  You may define\n\
an unlimited number of download methods using the lynx.cfg file.\n");
d548 4
a551 2
    fprintf(fp0, "</pre>\n</body>\n");
    fclose(fp0);
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
