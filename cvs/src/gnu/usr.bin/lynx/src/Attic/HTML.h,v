head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.8;
commitid	EcR8E7r0stjLUV4p;

1.8
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.7;
commitid	lGGuvDWEniklWrQe;

1.7
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.21.17.04.48;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.47;	author avsm;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2000.03.25.18.17.06;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.52;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.52;	author maja;	state Exp;
branches;
next	;

1.3.2.1
date	2004.11.06.04.19.29;	author brad;	state Exp;
branches;
next	;

1.3.4.1
date	2004.11.06.04.00.44;	author brad;	state Exp;
branches;
next	;

1.4.2.1
date	2004.11.06.05.06.25;	author brad;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: HTML.h,v 1.33 2011/05/19 09:57:53 tom Exp $
 *
 *					HTML to rich text converter for libwww
 *
 *			THE HTML TO RTF OBJECT CONVERTER
 *
 *  This interprets the HTML semantics.
 */
#ifndef HTML_H
#define HTML_H

#ifndef HTUTILS_H
#include <HTUtils.h>
#endif /* HTUTILS_H */

#include <UCDefs.h>
#include <UCAux.h>
#include <HTAnchor.h>
#include <HTMLDTD.h>

#ifdef __cplusplus
extern "C" {
#endif
/* #define ATTR_CS_IN (me->T.output_utf8 ? me->UCLYhndl : 0) */
#define ATTR_CS_IN me->tag_charset
#define TRANSLATE_AND_UNESCAPE_ENTITIES(s, p, h) \
	LYUCTranslateHTMLString(s, ATTR_CS_IN, current_char_set, YES, p, h, st_HTML)
#define TRANSLATE_AND_UNESCAPE_ENTITIES5(s,cs_from,cs_to,p,h) \
	LYUCTranslateHTMLString(s, cs_from, cs_to, YES, p, h, st_HTML)
#define TRANSLATE_AND_UNESCAPE_ENTITIES6(s,cs_from,cs_to,spcls,p,h) \
	LYUCTranslateHTMLString(s, cs_from, cs_to, spcls, p, h, st_HTML)
#define TRANSLATE_HTML(s,p,h) \
	LYUCFullyTranslateString(s, me->UCLYhndl, current_char_set, NO, YES, p, h, NO, st_HTML)
#define TRANSLATE_HTML5(s,cs_from,cs_to,p,h) \
	LYUCFullyTranslateString(s, cs_from, cs_to, NO, YES, p, h, NO, st_HTML)
#define TRANSLATE_HTML7(s,cs_from,cs_to,spcls,p,h,Back) \
	LYUCFullyTranslateString(s, cs_from, cs_to, NO, spcls, p, h, Back, st_HTML)
/*
 * Strings from attributes which should be converted to some kind of "standard"
 * representation (character encoding), was Latin-1, esp.  URLs (incl. 
 * #fragments) and HTML NAME and ID stuff.
 */
#define TRANSLATE_AND_UNESCAPE_TO_STD(s) \
	LYUCTranslateHTMLString(s, ATTR_CS_IN, ATTR_CS_IN, NO, NO, YES, st_URL)
#define UNESCAPE_FIELDNAME_TO_STD(s) \
	LYUCTranslateHTMLString(s, ATTR_CS_IN, ATTR_CS_IN, NO, NO, YES, st_HTML)
    extern const HTStructuredClass HTMLPresentation;

#ifdef Lynx_HTML_Handler
/*
 *	This section is semi-private to HTML.c and it's helper modules. - FM
 *	--------------------------------------------------------------------
 */

    typedef struct _stack_element {
	HTStyle *style;
	int tag_number;
    } stack_element;

/*		HTML Object
 *		-----------
 */
#define MAX_NESTING 800		/* Should be checked by parser */

    struct _HTStructured {
	const HTStructuredClass *isa;
	HTParentAnchor *node_anchor;
	HText *text;

	HTStream *target;	/* Output stream */
	HTStreamClass targetClass;	/* Output routines */

	HTChildAnchor *CurrentA;	/* current HTML_A anchor */
	int CurrentANum;	/* current HTML_A number */
	char *base_href;	/* current HTML_BASE href */
	char *map_address;	/* current HTML_MAP address */

	HTChunk title;		/* Grow by 128 */
	HTChunk object;		/* Grow by 128 */
	BOOL object_started;
	BOOL object_declare;
	BOOL object_shapes;
	BOOL object_ismap;
	char *object_usemap;
	char *object_id;
	char *object_title;
	char *object_data;
	char *object_type;
	char *object_classid;
	char *object_codebase;
	char *object_codetype;
	char *object_name;
	int objects_mixed_open, objects_figged_open;
	HTChunk option;		/* Grow by 128 */
	BOOL first_option;	/* First OPTION in SELECT? */
	char *LastOptionValue;
	BOOL LastOptionChecked;
	BOOL select_disabled;
	HTChunk textarea;	/* Grow by 128 */
	char *textarea_name;
	int textarea_name_cs;
	char *textarea_accept_cs;
	int textarea_cols;
	int textarea_rows;
	int textarea_disabled;
	int textarea_readonly;
	char *textarea_id;
	HTChunk math;		/* Grow by 128 */
	HTChunk style_block;	/* Grow by 128 */
	HTChunk script;		/* Grow by 128 */

	/*
	 *  Used for nested lists. - FM
	 */
	int List_Nesting_Level;	/* counter for list nesting level */
	int OL_Counter[12];	/* counter for ordered lists */
	char OL_Type[12];	/* types for ordered lists */
	int Last_OL_Count;	/* last count in ordered lists */
	char Last_OL_Type;	/* last type in ordered lists */

	int Division_Level;
	short DivisionAlignments[MAX_NESTING];
	int Underline_Level;
	int Quote_Level;

	BOOL UsePlainSpace;
	BOOL HiddenValue;
	int lastraw;

	const char *comment_start;	/* for literate programming */
	const char *comment_end;

	HTTag *current_tag;
	BOOL style_change;
	HTStyle *new_style;
	HTStyle *old_style;
	int current_default_alignment;
	BOOL in_word;		/* Have just had a non-white char */
	stack_element stack[MAX_NESTING];
	stack_element *sp;	/* Style stack pointer */
	BOOL stack_overrun;	/* Was MAX_NESTING exceeded? */
	int skip_stack;		/* flag to skip next style stack operation */

	/*
	 *  Track if we are in an anchor, paragraph, address, base, etc.
	 */
	BOOL inA;
	BOOL inAPPLET;
	BOOL inAPPLETwithP;
	BOOL inBadBASE;
	BOOL inBadHREF;
	BOOL inBadHTML;
	BOOL inBASE;
	BOOL inBoldA;
	BOOL inBoldH;
	BOOL inCAPTION;
	BOOL inCREDIT;
	BOOL inFIG;
	BOOL inFIGwithP;
	BOOL inFONT;
	BOOL inFORM;
	BOOL inLABEL;
	BOOL inP;
	BOOL inPRE;
	BOOL inSELECT;
	BOOL inTABLE;
	BOOL inTEXTAREA;
	BOOL inUnderline;

	BOOL needBoldH;

	char *xinclude;		/* if no include strin address passed */
	/*
	 * UCI and UCLYhndl give the UCInfo and charset registered for the HTML
	 * parser in the node_anchor's UCStages structure.  It indicates what is
	 * fed to the HTML parser as the stream of character data (not necessarily
	 * tags and attributes).  It should currently always be set to be the same
	 * as UCI and UCLhndl for the HTEXT stage in the node_anchor's UCStages
	 * structure, since the HTML parser sends its input character data to the
	 * output without further charset translation.
	 */
	LYUCcharset *UCI;
	int UCLYhndl;
	/*
	 * inUCI and inUCLYhndl indicate the UCInfo and charset which the HTML
	 * parser treats at the input charset.  It is normally set to the UCI and
	 * UCLhndl for the SGML parser in the node_anchor's UCStages structure
	 * (which may be a dummy, based on the MIME parser's UCI and UCLhndl in
	 * that structure, when we are handling a local file or non-http(s)
	 * gateway).  It could be changed temporarily by the HTML parser, for
	 * conversions of attribute strings, but should be reset once done.  - FM
	 */
	LYUCcharset *inUCI;
	int inUCLYhndl;
	/*
	 * outUCI and outUCLYhndl indicate the UCInfo and charset which the HTML
	 * parser treats as the output charset.  It is normally set to its own UCI
	 * and UCLhndl.  It could be changed for conversions of attribute strings,
	 * but should be reset once done.  - FM
	 */
	LYUCcharset *outUCI;
	int outUCLYhndl;
	/*
	 * T holds the transformation rules for conversions of strings between the
	 * input and output charsets by the HTML parser.  - FM
	 */
	UCTransParams T;

	int tag_charset;	/* charset for attribute values etc. */
    };

    extern HTStyle *LYstyles(int style_number);
    extern BOOL LYBadHTML(HTStructured * me);
    extern void LYShowBadHTML(const char *s);

/*
 *	Semi-Private functions. - FM
 */
    extern void HTML_put_character(HTStructured * me, int c);
    extern void HTML_put_string(HTStructured * me, const char *s);
    extern void HTML_write(HTStructured * me, const char *s, int l);
    extern int HTML_put_entity(HTStructured * me, int entity_number);
    extern void actually_set_style(HTStructured * me);

/*	Style buffering avoids dummy paragraph begin/ends.
*/
#define UPDATE_STYLE if (me->style_change) { actually_set_style(me); }
#endif				/* Lynx_HTML_Handler */

    extern void strtolower(char *i);

/*				P U B L I C
*/

/*
 *  HTConverter to present HTML
 */
    extern HTStream *HTMLToPlain(HTPresentation *pres,
				 HTParentAnchor *anchor,
				 HTStream *sink);

    extern HTStream *HTMLParsedPresent(HTPresentation *pres,
				       HTParentAnchor *anchor,
				       HTStream *sink);

    extern HTStream *HTMLToC(HTPresentation *pres,
			     HTParentAnchor *anchor,
			     HTStream *sink);

    extern HTStream *HTMLPresent(HTPresentation *pres,
				 HTParentAnchor *anchor,
				 HTStream *sink);

    extern HTStructured *HTML_new(HTParentAnchor *anchor,
				  HTFormat format_out,
				  HTStream *target);

/*
 * Record error message as a hypertext object.
 *
 * The error message should be marked as an error so that it can be reloaded
 * later.  This implementation just throws up an error message and leaves the
 * document unloaded.
 *
 * On entry,
 *      sink    is a stream to the output device if any
 *      number  is the HTTP error number
 *      message is the human readable message.
 * On exit,
 *      a return code like HT_LOADED if object exists else 60; 0
 */
    extern int HTLoadError(HTStream *sink,
			   int number,
			   const char *message);

#ifdef __cplusplus
}
#endif
#endif				/* HTML_H */
@


1.8
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.7
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d1 4
a4 1
/*					HTML to rich text converter for libwww
d107 1
d131 2
a132 2
	char *comment_start;	/* for literate programming */
	char *comment_end;
d220 1
a220 1
    extern void HTML_put_character(HTStructured * me, char c);
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d211 1
@


1.5
log
@Backport from lynx-2.8.6dev.7b to prevent a memory exhaustion from crashing
lynx while parsing pages such as:
http://lcamtuf.coredump.cx/mangleme/gallery/lynx_die1.html

Submitted by: Thorsten Glaser <tg at 66h.42h.de>
@
text
@d2 5
a6 5
**
**			THE HTML TO RTF OBJECT CONVERTER
**
**  This interprets the HTML semantics.
*/
d19 3
a23 1

a25 1

a27 1

a29 1

a31 1

a33 1

a35 1

d37 3
a39 3
 *  Strings from attributes which should be converted to some kind
 *  of "standard" representation (character encoding), was Latin-1,
 *  esp. URLs (incl. #fragments) and HTML NAME and ID stuff.
d45 1
a45 2

extern CONST HTStructuredClass HTMLPresentation;
d49 3
a51 3
**	This section is semi-private to HTML.c and it's helper modules. - FM
**	--------------------------------------------------------------------
*/
d53 4
a56 4
typedef struct _stack_element {
	HTStyle *	style;
	int		tag_number;
} stack_element;
d59 2
a60 2
**		-----------
*/
d63 142
a204 146
struct _HTStructured {
    CONST HTStructuredClass *	isa;
    HTParentAnchor *		node_anchor;
    HText *			text;

    HTStream*			target;			/* Output stream */
    HTStreamClass		targetClass;		/* Output routines */

    HTChildAnchor *		CurrentA;	/* current HTML_A anchor */
    int				CurrentANum;	/* current HTML_A number */
    char *			base_href;	/* current HTML_BASE href */
    char *			map_address;	/* current HTML_MAP address */

    HTChunk			title;		/* Grow by 128 */
    HTChunk			object;		/* Grow by 128 */
    BOOL			object_started;
    BOOL			object_declare;
    BOOL			object_shapes;
    BOOL			object_ismap;
    char *			object_usemap;
    char *			object_id;
    char *			object_title;
    char *			object_data;
    char *			object_type;
    char *			object_classid;
    char *			object_codebase;
    char *			object_codetype;
    char *			object_name;
    int				objects_mixed_open,
				objects_figged_open;
    HTChunk			option;		/* Grow by 128 */
    BOOL			first_option;	/* First OPTION in SELECT? */
    char *			LastOptionValue;
    BOOL			LastOptionChecked;
    BOOL			select_disabled;
    HTChunk			textarea;	/* Grow by 128 */
    char *			textarea_name;
    int				textarea_name_cs;
    char *			textarea_accept_cs;
    int				textarea_cols;
    int				textarea_rows;
    int				textarea_disabled;
    char *			textarea_id;
    HTChunk			math;		/* Grow by 128 */
    HTChunk			style_block;	/* Grow by 128 */
    HTChunk			script;		/* Grow by 128 */

    /*
     *  Used for nested lists. - FM
     */
    int		List_Nesting_Level;	/* counter for list nesting level */
    int		OL_Counter[12];		/* counter for ordered lists */
    char	OL_Type[12];		/* types for ordered lists */
    int		Last_OL_Count;		/* last count in ordered lists */
    char	Last_OL_Type;		/* last type in ordered lists */

    int				Division_Level;
    short			DivisionAlignments[MAX_NESTING];
    int				Underline_Level;
    int				Quote_Level;

    BOOL			UsePlainSpace;
    BOOL			HiddenValue;
    int				lastraw;

    char *			comment_start;	/* for literate programming */
    char *			comment_end;

    HTTag *			current_tag;
    BOOL			style_change;
    HTStyle *			new_style;
    HTStyle *			old_style;
    int				current_default_alignment;
    BOOL			in_word;  /* Have just had a non-white char */
    stack_element	stack[MAX_NESTING];
    stack_element	*sp;		/* Style stack pointer */
    BOOL		stack_overrun;	/* Was MAX_NESTING exceeded? */
    int			skip_stack; /* flag to skip next style stack operation */

    /*
    **  Track if we are in an anchor, paragraph, address, base, etc.
    */
    BOOL		inA;
    BOOL		inAPPLET;
    BOOL		inAPPLETwithP;
    BOOL		inBadBASE;
    BOOL		inBadHREF;
    BOOL		inBadHTML;
    BOOL		inBASE;
    BOOL		inBoldA;
    BOOL		inBoldH;
    BOOL		inCAPTION;
    BOOL		inCREDIT;
    BOOL		inFIG;
    BOOL		inFIGwithP;
    BOOL		inFONT;
    BOOL		inFORM;
    BOOL		inLABEL;
    BOOL		inP;
    BOOL		inPRE;
    BOOL		inSELECT;
    BOOL		inTABLE;
    BOOL		inTEXTAREA;
    BOOL		inUnderline;

    BOOL		needBoldH;

    char *		xinclude; /* if no include strin address passed */
    /*
    **  UCI and UCLYhndl give the UCInfo and charset registered for
    **  the HTML parser in the node_anchor's UCStages structure.  It
    **  indicates what is fed to the HTML parser as the stream of character
    **  data (not necessarily tags and attributes).  It should currently
    **  always be set to be the same as UCI and UCLhndl for the HTEXT stage
    **  in the node_anchor's UCStages structure, since the HTML parser sends
    **  its input character data to the output without further charset
    **  translation.
    */
    LYUCcharset	*	UCI;
    int			UCLYhndl;
    /*
    **  inUCI and inUCLYhndl indicate the UCInfo and charset which the
    **  HTML parser treats at the input charset.  It is normally set
    **  to the UCI and UCLhndl for the SGML parser in the node_anchor's
    **  UCStages structure (which may be a dummy, based on the MIME
    **  parser's UCI and UCLhndl in that structure, when we are handling
    **  a local file or non-http(s) gateway).  It could be changed
    **  temporarily by the HTML parser, for conversions of attribute
    **  strings, but should be reset once done. - FM
    */
    LYUCcharset	*	inUCI;
    int			inUCLYhndl;
    /*
    **  outUCI and outUCLYhndl indicate the UCInfo and charset which
    **  the HTML parser treats as the output charset.  It is normally
    **  set to its own UCI and UCLhndl.  It could be changed for
    **  conversions of attribute strings, but should be reset once
    **  done. - FM
    */
    LYUCcharset	*	outUCI;
    int			outUCLYhndl;
    /*
    **  T holds the transformation rules for conversions of strings
    **  between the input and output charsets by the HTML parser. - FM
    */
    UCTransParams	T;
d206 2
a207 2
    int			tag_charset; /* charset for attribute values etc. */
};
d209 2
a210 2
extern  HTStyle *LYstyles PARAMS((int style_number));
extern	BOOL LYBadHTML PARAMS((HTStructured *me)); 
d215 5
a219 5
extern void HTML_put_character PARAMS((HTStructured *me, char c));
extern void HTML_put_string PARAMS((HTStructured *me, CONST char *s));
extern void HTML_write PARAMS((HTStructured *me, CONST char *s, int l));
extern int HTML_put_entity PARAMS((HTStructured *me, int entity_number));
extern void actually_set_style PARAMS((HTStructured * me));
d224 1
a224 1
#endif /* Lynx_HTML_Handler */
d226 1
a226 1
extern void strtolower PARAMS((char* i));
d232 21
a252 26
**  HTConverter to present HTML
*/
extern HTStream* HTMLToPlain PARAMS((
	HTPresentation *	pres,
	HTParentAnchor *	anchor,
	HTStream *		sink));

extern HTStream* HTMLParsedPresent PARAMS((
	HTPresentation *	pres,
	HTParentAnchor *	anchor,
	HTStream *		sink));

extern HTStream* HTMLToC PARAMS((
	HTPresentation *	pres,
	HTParentAnchor *	anchor,
	HTStream *		sink));

extern HTStream* HTMLPresent PARAMS((
	HTPresentation *	pres,
	HTParentAnchor *	anchor,
	HTStream *		sink));

extern HTStructured* HTML_new PARAMS((
	HTParentAnchor * anchor,
	HTFormat	format_out,
	HTStream *	target));
d255 21
a275 19
**  Record error message as a hypertext object.
**
**  The error message should be marked as an error so that it can be
**  reloaded later.  This implementation just throws up an error message
**  and leaves the document unloaded.
**
**  On entry,
**      sink    is a stream to the output device if any
**      number  is the HTTP error number
**      message is the human readable message.
**  On exit,
**      a retrun code like HT_LOADED if object exists else 60; 0
*/
extern int HTLoadError PARAMS((
	HTStream *	sink,
	int		number,
	CONST char *	message));

#endif /* HTML_H */
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d107 1
a107 1
    char *			textarea_cols;
@


1.4.2.1
log
@MFC:
Fix by avsm@@

Backport from lynx-2.8.6dev.7b to prevent a memory exhaustion from crashing
lynx while parsing pages such as:
http://lcamtuf.coredump.cx/mangleme/gallery/lynx_die1.html

Submitted by: Thorsten Glaser <tg at 66h.42h.de>

ok deraadt@@
@
text
@d107 1
a107 1
    int				textarea_cols;
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d69 3
a71 3
    CONST HTStructuredClass * 	isa;
    HTParentAnchor * 		node_anchor;
    HText * 			text;
d81 1
a81 1
    HTChunk 			title;		/* Grow by 128 */
d97 1
a97 1
    				objects_figged_open;
d108 1
a108 1
    int 			textarea_rows;
d119 4
a122 4
    int 	OL_Counter[12];		/* counter for ordered lists */
    char 	OL_Type[12];		/* types for ordered lists */
    int 	Last_OL_Count;		/* last count in ordered lists */
    char 	Last_OL_Type;		/* last type in ordered lists */
d142 2
a143 2
    stack_element 	stack[MAX_NESTING];
    stack_element 	*sp;		/* Style stack pointer */
d215 1
a215 1
    int 		tag_charset; /* charset for attribute values etc. */
a287 1

@


1.3.2.1
log
@MFC:
Fix by avsm@@

Backport from lynx-2.8.6dev.7b to prevent a memory exhaustion from crashing
lynx while parsing pages such as:
http://lcamtuf.coredump.cx/mangleme/gallery/lynx_die1.html

Submitted by: Thorsten Glaser <tg at 66h.42h.de>

ok deraadt@@
@
text
@d107 1
a107 1
    int				textarea_cols;
@


1.3.4.1
log
@MFC:
Fix by avsm@@

Backport from lynx-2.8.6dev.7b to prevent a memory exhaustion from crashing
lynx while parsing pages such as:
http://lcamtuf.coredump.cx/mangleme/gallery/lynx_die1.html

Submitted by: Thorsten Glaser <tg at 66h.42h.de>

ok deraadt@@
@
text
@d107 1
a107 1
    int				textarea_cols;
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d23 1
a23 1
	LYUCFullyTranslateString(s, ATTR_CS_IN, current_char_set, YES, p, h, st_HTML)
d26 1
a26 1
	LYUCFullyTranslateString(s, cs_from, cs_to, YES, p, h, st_HTML)
d29 10
a38 1
	LYUCFullyTranslateString(s, cs_from, cs_to, spcls, p, h, st_HTML)
d46 1
a46 1
	LYUCFullyTranslateString(s, ATTR_CS_IN, ATTR_CS_IN, NO, NO, YES, st_URL)
d48 1
a48 1
	LYUCFullyTranslateString(s, ATTR_CS_IN, ATTR_CS_IN, NO, NO, YES, st_HTML)
d96 2
d175 1
d219 1
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
#include "HTUtils.h"
d13 5
a17 9
#include "UCDefs.h"
#include "UCAux.h"
#include "HTAnchor.h"
#include "HTMLDTD.h"

#ifdef SHORT_NAMES
#define HTMLPresentation        HTMLPren
#define HTMLPresent             HTMLPres
#endif /* SHORT_NAMES */
d206 1
a206 3
extern  HTStyle *styles[HTML_ELEMENTS+31]; /* adding 24 nested list styles  */
					   /* and 3 header alignment styles */
					   /* and 3 div alignment styles    */
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
