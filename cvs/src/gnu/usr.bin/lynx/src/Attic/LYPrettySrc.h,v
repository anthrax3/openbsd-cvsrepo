head	1.6;
access;
symbols
	OPENBSD_5_5:1.4.0.14
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.8
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.24
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.0.14
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.12
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.5;
commitid	EcR8E7r0stjLUV4p;

1.5
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.4;
commitid	lGGuvDWEniklWrQe;

1.4
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.25.18.17.11;	author maja;	state Exp;
branches;
next	;


desc
@@


1.6
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYPrettySrc.h,v 1.12 2010/09/24 09:42:58 tom Exp $
 */
#ifndef LYPrettySrc_H
#define LYPrettySrc_H

#ifdef USE_PRETTYSRC

#include <HTMLDTD.h>

#ifdef __cplusplus
extern "C" {
#endif
    extern BOOL psrc_convert_string;

    /*whether HTML_put_string should convert string passed with 
       TRANSLATE_AND_UNESCAPE_TO_STD */
    extern BOOL psrc_view;
    extern BOOLEAN LYpsrc;

/*
 * This is used for tracking down whether the SGML engine was initialized
 * ==TRUE if yes.  It's value is meaningful if psrc_view = TRUE
 */
    extern BOOL sgml_in_psrc_was_initialized;

    extern BOOL psrc_nested_call;	/* this is used when distinguishing whether 

					   the current call is nested or not in HTML.c HTML_{start,end}_element.
					   It ==FALSE if psrc_view==FALSE || sgml_in_psrc_was_initialized==TRUE */

    extern BOOL psrc_first_tag;	/* this is also used in HTML.c to trigger the 

				   1st tag to preform special.
				 */

    extern BOOL mark_htext_as_source;

/* here is a list of lexeme codes. */
    typedef enum {
	HTL_comm = 0,
	HTL_tag,
	HTL_attrib,
	HTL_attrval,
	HTL_abracket,
	HTL_entity,
	HTL_href,
	HTL_entire,
	HTL_badseq,
	HTL_badtag,
	HTL_badattr,
	HTL_sgmlspecial,
	HTL_num_lexemes
    } HTlexeme;

    typedef struct _HT_tagspec {
	struct _HT_tagspec *next;	/* 0 at the last */
#ifdef USE_COLOR_STYLE
	int style;		/* precalculated value of the style */
	char *class_name;
#endif
	/* these will be passed to HTML_start_element */
	HTMLElement element;
	BOOL *present;
	char **value;

	BOOL start;		/* if true, then this starts element, otherwise - ends */
    } HT_tagspec;

    extern char *HTL_tagspecs[HTL_num_lexemes];
    extern HT_tagspec *lexeme_start[HTL_num_lexemes];
    extern HT_tagspec *lexeme_end[HTL_num_lexemes];

    extern int html_src_parse_tagspec(char *ts, HTlexeme lexeme,
				      int checkonly, int isstart);
    extern void HTMLSRC_init_caches(int dont_exit);
    extern void html_src_clean_item(HTlexeme l);
    extern void html_src_clean_data(void);
    extern void html_src_on_lynxcfg_reload(void);

/* these 2 vars tell what kind of transform should be applied to tag names
  and attribute names. 0 - lowercase, 1 - as is, 2 uppercase. */
    extern int tagname_transform;
    extern int attrname_transform;

    extern BOOLEAN psrcview_no_anchor_numbering;

#ifdef __cplusplus
}
#endif
#endif				/* ifdef USE_PRETTYSRC */
#endif				/* LYPrettySrc_H */
@


1.5
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.4
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYPrettySrc.h,v 1.10 2009/03/11 00:40:00 tom Exp $
d75 2
a76 2
				      BOOL checkonly, BOOL isstart);
    extern void HTMLSRC_init_caches(BOOL dont_exit);
d81 1
a81 1
/* these 2 vars tell what kind of transform should be appiled to tag names
@


1.3
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d19 1
a19 1
    extern BOOL LYpsrc;
d86 1
a86 1
    extern BOOL psrcview_no_anchor_numbering;
@


1.2
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d8 4
a11 15
extern BOOL psrc_convert_string;
 /*whether HTML_put_string should convert string passed with 
   TRANSLATE_AND_UNESCAPE_TO_STD */
extern BOOL psrc_view;
extern BOOL LYpsrc;
extern BOOL sgml_in_psrc_was_initialized; 
 /*this is used for tracking down whether the SGML engine was initialized
  ==TRUE if yes. It's value is meaningful if psrc_view = TRUE */
  
extern BOOL psrc_nested_call;/* this is used when distinguishing whether 
 the current call is nested or not in HTML.c HTML_{start,end}_element.
 It ==FALSE if psrc_view==FALSE || sgml_in_psrc_was_initialized==TRUE */
 
extern BOOL psrc_first_tag; /* this is also used in HTML.c to trigger the 
 1st tag to preform special. */
d13 22
a34 1
extern BOOL mark_htext_as_source;
d37 18
a54 19
typedef enum {
  HTL_comm=0,
  HTL_tag,
  HTL_attrib,
  HTL_attrval,
  HTL_abracket,
  HTL_entity,
  HTL_href,
  HTL_entire,
  HTL_badseq,
  HTL_badtag,
  HTL_badattr,
  HTL_sgmlspecial,
  HTL_num_lexemes
} HTlexeme;

typedef struct _HT_tagspec
{
    struct _HT_tagspec* next;/* 0 at the last */
d56 21
a76 21
    int style;/* precalculated value of the style */    
    char* class_name;
#endif    
        /* these will be passed to HTML_start_element*/
    HTMLElement element;
    BOOL* present;
    char** value;
    
    BOOL start; /* if true, then this starts element, otherwise - ends */    
} HT_tagspec;

extern char* HTL_tagspecs[HTL_num_lexemes];
extern HT_tagspec* lexeme_start[HTL_num_lexemes];
extern HT_tagspec* lexeme_end[HTL_num_lexemes];

extern int html_src_parse_tagspec PARAMS((char* ts, HTlexeme lexeme,
                     BOOL checkonly,BOOL isstart));
extern void HTMLSRC_init_caches PARAMS((BOOL dont_exit));
extern void html_src_clean_item PARAMS((HTlexeme l));
extern void html_src_clean_data NOPARAMS;
extern void html_src_on_lynxcfg_reload NOPARAMS;
d80 2
a81 6
extern int tagname_transform;
extern int attrname_transform;


extern BOOL psrcview_no_anchor_numbering;
#endif /* ifdef USE_PRETTYSRC */
d83 1
d85 5
a89 1
#endif /* LYPrettySrc_H */
@


1.1
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d4 1
a4 1
#ifdef USE_PSRC
d24 4
a27 2
/* here is a list of lexem codes. */
typedef enum _HTlexem {
d40 2
a41 2
  HTL_num_lexems
} HTlexem;
d58 3
a60 3
extern char* HTL_tagspecs[HTL_num_lexems];
extern HT_tagspec* lexem_start[HTL_num_lexems];
extern HT_tagspec* lexem_end[HTL_num_lexems];
d62 1
a62 1
extern int html_src_parse_tagspec PARAMS((char* ts, HTlexem lexem,
d64 4
a67 1
extern void HTMLSRC_init_caches NOPARAMS;
d75 2
a76 1
#endif /* ifdef USE_PSRC */
@

