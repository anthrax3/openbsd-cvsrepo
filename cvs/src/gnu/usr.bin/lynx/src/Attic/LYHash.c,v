head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.48;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.09;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.48.00;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.48.00;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYHash.c,v 1.19 2013/06/12 09:21:21 tom Exp $
 *
 * A hash table for the (fake) CSS support in Lynx-rp
 * (c) 1996 Rob Partington
 * rewritten 1997 by Klaus Weide.
 */
#include <LYHash.h>
#include <LYUtils.h>

#ifdef USE_COLOR_STYLE

/*
 * This is the same function as the private HASH_FUNCTION() in HTAnchor.c, but
 * with a different value for HASH_SIZE.
 */

#define HASH_SIZE CSHASHSIZE
#define HASH_OF(h, v) ((int)((h) * 3 + UCH(v)) % HASH_SIZE)

int hash_code(const char *string)
{
    int hash;
    const char *p;

    for (p = string, hash = 0; *p; p++)
	hash = HASH_OF(hash, *p);

    CTRACE_STYLE((tfp, "hash_code(%s) = %d\n", string, hash));
    return hash;
}

int hash_code_lowercase_on_fly(const char *string)
{
    int hash;
    const char *p;

    for (p = string, hash = 0; *p; p++)
	hash = HASH_OF(hash, TOLOWER(*p));

    CTRACE_STYLE((tfp, "hash_code_lc(%s) = %d\n", string, hash));
    return hash;
}

int hash_code_aggregate_char(int c, int hash)
{
    return HASH_OF(hash, c);
}

int hash_code_aggregate_lower_str(const char *string, int hash_was)
{
    int hash;
    const char *p;

    for (p = string, hash = hash_was; *p; p++)
	hash = HASH_OF(hash, TOLOWER(*p));

    CTRACE_STYLE((tfp, "hash_code_lc2(%s) = %d\n", string, hash));
    return hash;
}

#endif /* USE_COLOR_STYLE */
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYHash.c,v 1.16 2008/12/31 22:10:38 tom Exp $
d29 1
d41 1
d45 1
a45 1
int hash_code_aggregate_char(char c, int hash)
d58 1
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 4
a4 1
/* A hash table for the (fake) CSS support in Lynx-rp
d6 1
d9 1
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d2 2
a3 2
** (c) 1996 Rob Partington
*/
d9 2
a10 2
 *  This is the same function as the private HASH_FUNCTION() in HTAnchor.c,
 *  but with a different value for HASH_SIZE.
d16 1
a16 1
PUBLIC int hash_code ARGS1 (CONST char*, string)
d19 1
a19 1
    CONST char *p;
d22 1
a22 1
	hash = HASH_OF(hash,*p);
d27 1
a27 1
PUBLIC int hash_code_lowercase_on_fly ARGS1 (CONST char*, string)
d30 1
a30 1
    CONST char *p;
d38 1
a38 1
PUBLIC int hash_code_aggregate_char ARGS2 (char, c,int,hash)
d40 1
a40 1
    return HASH_OF(hash,c);
d43 1
a43 1
PUBLIC int hash_code_aggregate_lower_str ARGS2 (CONST char*, string,int,hash_was)
d46 1
a46 1
    CONST char *p;
d48 1
a48 1
    for (p = string, hash = hash_was ; *p; p++)
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d33 1
a33 1
	hash = HASH_OF(hash,tolower(*p));
d49 1
a49 1
	hash = HASH_OF(hash,tolower(*p));
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@a7 18
#ifdef NOT_USED

PUBLIC int hash_table[CSHASHSIZE]; /* 32K should be big enough */

PUBLIC int hash_code_rp ARGS1(char*,string)
{
    char* hash_ptr = string;
    int hash_tmp = 0xC00A | ((*hash_ptr) << 4);

    while (*hash_ptr++)
    {
	hash_tmp ^= (((*hash_ptr)<<4) ^ ((*hash_ptr)<<12));
	hash_tmp >>= 1;
    }
    return (hash_tmp % CSHASHSIZE);
}
#endif

a12 3
#ifdef NOT_USED
#define HASH_SIZE 8193		/* Arbitrary prime.  Memory/speed tradeoff */
#else
d14 1
a14 3
#endif

#define HASH_OF(h, v) ((int)((h) * 3 + (unsigned char)(v)) % HASH_SIZE)
d16 1
a16 1
PUBLIC int hash_code ARGS1 (char*, string)
d19 1
a19 1
    unsigned char *p;
d21 1
a21 1
    for (p = (unsigned char *)string, hash = 0; *p; p++)
d27 1
a27 1
PUBLIC int hash_code_lowercase_on_fly ARGS1 (char*, string)
d30 1
a30 1
    unsigned char *p;
d32 2
a33 2
    for (p = (unsigned char *)string, hash = 0; *p; p++)
	hash = HASH_OF(hash,tolower(*(char *)p));
d43 1
a43 1
PUBLIC int hash_code_aggregate_lower_str ARGS2 (char*, string,int,hash_was)
d46 1
a46 1
    unsigned char *p;
d48 2
a49 2
    for (p = (unsigned char *)string, hash = hash_was ; *p; p++)
	hash = HASH_OF(hash,tolower(*(char *)p));
@


1.1
log
@Initial revision
@
text
@d4 1
d6 1
a6 7
#include "LYStructs.h"
#include "LYCurses.h"
#include "AttrList.h"
#include "SGML.h"
#include "HTMLDTD.h"

#include "LYHash.h"
d14 2
a15 2
	char* hash_ptr = string;
	int hash_tmp = 0xC00A | ((*hash_ptr) << 4);
d17 6
a22 6
	while (*hash_ptr++)
	{
		hash_tmp ^= (((*hash_ptr)<<4) ^ ((*hash_ptr)<<12));
		hash_tmp >>= 1;
	}
	return (hash_tmp % CSHASHSIZE);
d27 3
a29 3
 *	This is the same function as the private HASH_FUNCTION() in HTAnchor.c,
 *      but with a different value for HASH_SIZE.
 */ 
d32 1
a32 1
#define HASH_SIZE 8193		/* Arbitrary prime. Memory/speed tradeoff */
d37 2
d45 12
a56 1
    	hash = (int) (hash * 3 + (*(unsigned char *)p)) % HASH_SIZE;
d60 18
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
