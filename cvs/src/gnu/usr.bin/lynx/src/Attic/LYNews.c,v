head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.49;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.11;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.55;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.55;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYNews.c,v 1.61 2013/11/28 11:21:09 tom Exp $
 */
#include <HTUtils.h>
#ifndef DISABLE_NEWS
#include <HTParse.h>
#include <HTAccess.h>
#include <HTCJK.h>
#include <HTAlert.h>
#include <LYCurses.h>
#include <LYSignal.h>
#include <LYStructs.h>
#include <LYUtils.h>
#include <LYClean.h>
#include <LYStrings.h>
#include <LYHistory.h>
#include <GridText.h>
#include <LYCharSets.h>
#include <LYNews.h>
#include <LYEdit.h>

#include <LYGlobalDefs.h>

#include <LYLeaks.h>

/*
 *  Global variable for async i/o.
 */
BOOLEAN term_message = FALSE;
static void terminate_message(int sig);

static BOOLEAN message_has_content(const char *filename,
				   BOOLEAN *nonspaces)
{
    FILE *fp;
    char *buffer = NULL;
    BOOLEAN in_headers = TRUE;

    *nonspaces = FALSE;

    if (!filename || (fp = fopen(filename, "r")) == NULL) {
	CTRACE((tfp, "Failed to open file %s for reading!\n",
		NONNULL(filename)));
	return FALSE;
    }
    while (LYSafeGets(&buffer, fp) != NULL) {
	char *cp = buffer;
	char firstnonblank = '\0';

	LYTrimNewline(cp);
	for (; *cp; cp++) {
	    if (!firstnonblank && isgraph(UCH(*cp))) {
		firstnonblank = *cp;
	    } else if (!isspace(UCH(*cp))) {
		*nonspaces = TRUE;
	    }
	}
	if (firstnonblank && firstnonblank != '>') {
	    if (!in_headers) {
		LYCloseInput(fp);
		FREE(buffer);
		return TRUE;
	    }
	}
	if (!firstnonblank) {
	    in_headers = FALSE;
	}
    }
    FREE(buffer);
    LYCloseInput(fp);
    return FALSE;
}

/*
 *  This function is called from HTLoadNews() to have the user
 *  create a file with news headers and a body for posting of
 *  a new message (based on a newspost://nntp_host/newsgroups
 *  or snewspost://secure_nntp_host/newsgroups URL), or to post
 *  a followup (based on a newsreply://nntp_host/newsgroups or
 *  snewsreply://secure_nntp_host/newsgroups URL). The group
 *  or comma-separated list of newsgroups is passed without
 *  a lead slash, and followup is TRUE for newsreply or
 *  snewsreply URLs.  - FM
 */
char *LYNewsPost(char *newsgroups,
		 int followup)
{
    char user_input[MAX_LINE];
    char CJKinput[MAX_LINE];
    char *cp = NULL;
    const char *kp = NULL;
    int c = 0;			/* user input */
    int len;
    FILE *fd = NULL;
    char my_tempfile[LY_MAXPATH];
    FILE *fc = NULL;
    char CJKfile[LY_MAXPATH];
    char *postfile = NULL;
    char *NewsGroups = NULL;
    char *References = NULL;
    char *org = NULL;
    FILE *fp = NULL;
    BOOLEAN nonempty = FALSE;
    BOOLEAN nonspaces = FALSE;

    /*
     * Make sure a non-zero length newspost, newsreply, snewspost or snewsreply
     * path was sent to us.  - FM
     */
    if (isEmpty(newsgroups))
	return (postfile);

    /*
     * Return immediately if we do get called, maybe by some quirk of HTNews.c,
     * when we shouldn't.  - kw
     */
    if (no_newspost)
	return (postfile);

    /*
     * Open a temporary file for the headers and message body.  - FM
     */
#ifdef __DJGPP__
    if ((fd = LYOpenTemp(my_tempfile, HTML_SUFFIX, BIN_W)) == NULL)
#else
    if ((fd = LYOpenTemp(my_tempfile, HTML_SUFFIX, "w")) == NULL)
#endif /* __DJGPP__ */
    {
	HTAlert(CANNOT_OPEN_TEMP);
	return (postfile);
    }

    /*
     * If we're using a Japanese display character set, open a temporary file
     * for a conversion to JIS.  - FM
     */
    CJKfile[0] = '\0';
    if (current_char_set == UCGetLYhndl_byMIME("euc-jp") ||
	current_char_set == UCGetLYhndl_byMIME("shift_jis")) {
	if ((fc = LYOpenTemp(CJKfile, HTML_SUFFIX, "w")) == NULL) {
	    HTAlert(CANNOT_OPEN_TEMP);
	    (void) LYRemoveTemp(my_tempfile);
	    return (postfile);
	}
    }

    /*
     * The newsgroups could be a comma-seperated list.  It need not have
     * spaces, but deal with any that may also have been hex escaped.  - FM
     */
    StrAllocCopy(NewsGroups, newsgroups);
    if ((cp = strstr(NewsGroups, ";ref="))) {
	*cp = '\0';
	cp += 5;
	if (*cp == '<') {
	    StrAllocCopy(References, cp);
	} else {
	    StrAllocCopy(References, "<");
	    StrAllocCat(References, cp);
	    StrAllocCat(References, ">");
	}
	HTUnEscape(References);
	if (!((cp = StrChr(References, '@@')) && cp > References + 1 &&
	      isalnum(UCH(cp[1])))) {
	    FREE(References);
	}
    }
    HTUnEscape(NewsGroups);
    if (!*NewsGroups) {
	LYCloseTempFP(fd);	/* Close the temp file. */
	goto cleanup;
    }

    /*
     * Allow ^C to cancel the posting, i.e., don't let SIGINTs exit Lynx.
     */
    signal(SIGINT, terminate_message);
    term_message = FALSE;

    /*
     * Show the list of newsgroups.  - FM
     */
    LYclear();
    LYmove(2, 0);
    scrollok(LYwin, TRUE);	/* Enable scrolling. */
    LYaddstr(gettext("You will be posting to:"));
    LYaddstr("\n\t");
    LYaddstr(NewsGroups);
    LYaddch('\n');

    /*
     * Get the mail address for the From header, offering personal_mail_address
     * as default.
     */
    LYaddstr(gettext("\n\n Please provide your mail address for the From: header\n"));
    sprintf(user_input, "From: %.*s", (int) sizeof(user_input) - 8,
	    NonNull(personal_mail_address));
    if (LYGetStr(user_input, FALSE,
		 sizeof(user_input), NORECALL) < 0 ||
	term_message) {
	HTInfoMsg(NEWS_POST_CANCELLED);
	LYCloseTempFP(fd);	/* Close the temp file. */
	scrollok(LYwin, FALSE);	/* Stop scrolling.      */
	goto cleanup;
    }
    fprintf(fd, "%s\n", user_input);

    /*
     * Get the Subject header, offering the current document's title as the
     * default if this is a followup rather than a new post.  - FM
     */
    LYaddstr(gettext("\n\n Please provide or edit the Subject: header\n"));
    strcpy(user_input, "Subject: ");
    if ((followup == TRUE && nhist > 0) &&
	(kp = HText_getTitle()) != NULL) {
	/*
	 * Add the default subject.
	 */
	kp = LYSkipCBlanks(kp);
#ifdef CJK_EX			/* 1998/05/15 (Fri) 09:10:38 */
	if (HTCJK == JAPANESE) {
	    CJKinput[0] = '\0';
	    switch (kanji_code) {
	    case EUC:
		TO_EUC((const unsigned char *) kp, (unsigned char *) CJKinput);
		kp = CJKinput;
		break;
	    case SJIS:
		TO_SJIS((const unsigned char *) kp, (unsigned char *) CJKinput);
		kp = CJKinput;
		break;
	    default:
		break;
	    }
	}
#endif
	if (strncasecomp(kp, "Re:", 3)) {
	    strcat(user_input, "Re: ");
	}
	len = (int) strlen(user_input);
	LYStrNCpy(user_input + len, kp, (int) sizeof(user_input) - len - 1);
    }
    cp = NULL;
    if (LYGetStr(user_input, FALSE,
		 sizeof(user_input), NORECALL) < 0 ||
	term_message) {
	HTInfoMsg(NEWS_POST_CANCELLED);
	LYCloseTempFP(fd);	/* Close the temp file. */
	scrollok(LYwin, FALSE);	/* Stop scrolling.      */
	goto cleanup;
    }
    fprintf(fd, "%s\n", user_input);

    /*
     * Add Organization:  header.
     */
    StrAllocCopy(cp, "Organization: ");
    if ((org = LYGetEnv("ORGANIZATION")) != NULL) {
	StrAllocCat(cp, org);
    } else if ((org = LYGetEnv("NEWS_ORGANIZATION")) != NULL) {
	StrAllocCat(cp, org);
    }
#ifdef UNIX
    else if ((fp = fopen("/etc/organization", TXT_R)) != NULL) {
	char *buffer = 0;

	if (LYSafeGets(&buffer, fp) != NULL) {
	    if (user_input[0] != '\0') {
		LYTrimNewline(buffer);
		StrAllocCat(cp, buffer);
	    }
	}
	FREE(buffer);
	LYCloseInput(fp);
    }
#else
#ifdef _WINDOWS			/* 1998/05/14 (Thu) 17:47:01 */
    else {
	char *p, fname[LY_MAXPATH];

	strcpy(fname, LynxSigFile);
	p = strrchr(fname, '/');
	if (p != 0 && (p - fname) < sizeof(fname) - 15) {
	    strcpy(p + 1, "LYNX_ETC.TXT");
	    if ((fp = fopen(fname, TXT_R)) != NULL) {
		if (fgets(user_input, (int) sizeof(user_input), fp) != NULL) {
		    if ((org = StrChr(user_input, '\n')) != NULL) {
			*org = '\0';
		    }
		    if (user_input[0] != '\0') {
			StrAllocCat(cp, user_input);
		    }
		}
		LYCloseInput(fp);
	    }
	}
    }
#endif /* _WINDOWS */
#endif /* !UNIX */
    LYStrNCpy(user_input, cp, (sizeof(user_input) - 16));
    FREE(cp);
    LYaddstr(gettext("\n\n Please provide or edit the Organization: header\n"));
    if (LYGetStr(user_input, FALSE,
		 sizeof(user_input), NORECALL) < 0 ||
	term_message) {
	HTInfoMsg(NEWS_POST_CANCELLED);
	LYCloseTempFP(fd);	/* Close the temp file. */
	scrollok(LYwin, FALSE);	/* Stop scrolling.      */
	goto cleanup;
    }
    fprintf(fd, "%s\n", user_input);

    if (References) {
	fprintf(fd, "References: %s\n", References);
    }
    /*
     * Add Newsgroups Summary and Keywords headers.
     */
    fprintf(fd, "Newsgroups: %s\nSummary: \nKeywords: \n\n", NewsGroups);

    /*
     * Have the user create the message body.
     */
    if (!no_editor && non_empty(editor)) {

	if (followup && nhist > 0) {
	    /*
	     * Ask if the user wants to include the original message.
	     */
	    if (term_message) {
		_statusline(INC_ORIG_MSG_PROMPT);
	    } else if (HTConfirm(INC_ORIG_MSG_PROMPT) == YES) {
		/*
		 * The 'TRUE' will add the reply ">" in front of every line. 
		 * We're assuming that if the display character set is Japanese
		 * and the document did not have a CJK charset, any non-EUC or
		 * non-SJIS 8-bit characters in it where converted to 7-bit
		 * equivalents.  - FM
		 */
		print_wwwfile_to_fd(fd, FALSE, TRUE);
	    }
	}
	LYCloseTempFP(fd);	/* Close the temp file. */
	scrollok(LYwin, FALSE);	/* Stop scrolling.      */
	if (term_message || LYCharIsINTERRUPT(c))
	    goto cleanup;

	/*
	 * Spawn the user's editor on the news file.
	 */
	edit_temporary_file(my_tempfile, "", SPAWNING_EDITOR_FOR_NEWS);

	nonempty = message_has_content(my_tempfile, &nonspaces);

    } else {
	/*
	 * Use the built in line editior.
	 */
	LYaddstr(gettext("\n\n Please enter your message below."));
	LYaddstr(gettext("\n When you are done, press enter and put a single period (.)"));
	LYaddstr(gettext("\n on a line and press enter again."));
	LYaddstr("\n\n");
	LYrefresh();
	*user_input = '\0';
	if (LYGetStr(user_input, FALSE,
		     sizeof(user_input), NORECALL) < 0 ||
	    term_message) {
	    HTInfoMsg(NEWS_POST_CANCELLED);
	    LYCloseTempFP(fd);	/* Close the temp file. */
	    scrollok(LYwin, FALSE);	/* Stop scrolling.      */
	    goto cleanup;
	}
	while (!STREQ(user_input, ".") && !term_message) {
	    LYaddch('\n');
	    fprintf(fd, "%s\n", user_input);
	    if (!nonempty && strlen(user_input))
		nonempty = TRUE;
	    *user_input = '\0';
	    if (LYGetStr(user_input, FALSE,
			 sizeof(user_input), NORECALL) < 0) {
		HTInfoMsg(NEWS_POST_CANCELLED);
		LYCloseTempFP(fd);	/* Close the temp file. */
		scrollok(LYwin, FALSE);		/* Stop scrolling.      */
		goto cleanup;
	    }
	}
	fprintf(fd, "\n");
	LYCloseTempFP(fd);	/* Close the temp file. */
	scrollok(LYwin, FALSE);	/* Stop scrolling.      */
    }

    if (nonempty) {
	/*
	 * Confirm whether to post, and if so, whether to append the sig file. 
	 * - FM
	 */
	LYStatusLine = (LYlines - 1);
	c = HTConfirm(POST_MSG_PROMPT);
	LYStatusLine = -1;
	if (c != YES) {
	    LYclear();		/* clear the screen */
	    goto cleanup;
	}
    } else {
	HTAlert(gettext("Message has no original text!"));
	if (!nonspaces
	    || HTConfirmDefault(POST_MSG_PROMPT, NO) != YES)
	    goto cleanup;
    }
    if ((LynxSigFile != NULL) && (fp = fopen(LynxSigFile, TXT_R)) != NULL) {
	char *msg = NULL;

	HTSprintf0(&msg, APPEND_SIG_FILE, LynxSigFile);

	LYStatusLine = (LYlines - 1);
	if (term_message) {
	    _user_message(APPEND_SIG_FILE, LynxSigFile);
	} else if (HTConfirm(msg) == YES) {
	    if ((fd = LYAppendToTxtFile(my_tempfile)) != NULL) {
		char *buffer = NULL;

		fputs("-- \n", fd);
		while (LYSafeGets(&buffer, fp) != NULL) {
		    fputs(buffer, fd);
		}
		LYCloseOutput(fd);
	    }
	}
	LYCloseInput(fp);
	FREE(msg);
	LYStatusLine = -1;
    }
    LYclear();			/* clear the screen */

    /*
     * If we are using a Japanese display character set, convert the contents
     * of the temp file to JIS (nothing should change if it does not, in fact,
     * contain EUC or SJIS di-bytes).  Otherwise, use the temp file as is.  -
     * FM
     */
    if (CJKfile[0] != '\0') {
	if ((fd = fopen(my_tempfile, TXT_R)) != NULL) {
	    char *buffer = NULL;

	    while (LYSafeGets(&buffer, fd) != NULL) {
		TO_JIS((unsigned char *) buffer,
		       (unsigned char *) CJKinput);
		fputs(CJKinput, fc);
	    }
	    LYCloseTempFP(fc);
	    StrAllocCopy(postfile, CJKfile);
	    LYCloseInput(fd);
	    (void) LYRemoveTemp(my_tempfile);
	    strcpy(my_tempfile, CJKfile);
	    CJKfile[0] = '\0';
	} else {
	    StrAllocCopy(postfile, my_tempfile);
	}
    } else {
	StrAllocCopy(postfile, my_tempfile);
    }
    if (!followup) {
	/*
	 * If it's not a followup, the current document most likely is the
	 * group listing, so force a to have the article show up in the list
	 * after the posting.  Note, that if it's a followup via a link in a
	 * news article, the user must do a reload manually on returning to the
	 * group listing.  - FM
	 */
	LYforce_no_cache = TRUE;
    }
    LYStatusLine = (LYlines - 1);
    HTUserMsg(POSTING_TO_NEWS);
    LYStatusLine = -1;

    /*
     * Come here to cleanup and exit.
     */
  cleanup:
#ifndef VMS
    signal(SIGINT, cleanup_sig);
#endif /* !VMS */
    term_message = FALSE;
    if (!postfile)
	(void) LYRemoveTemp(my_tempfile);
    (void) LYRemoveTemp(CJKfile);
    FREE(NewsGroups);
    FREE(References);

    return (postfile);
}

static void terminate_message(int sig GCC_UNUSED)
{
    term_message = TRUE;
    /*
     * Reassert the AST.
     */
    signal(SIGINT, terminate_message);
#ifdef VMS
    /*
     * Refresh the screen to get rid of the "interrupt" message.
     */
    lynx_force_repaint();
    LYrefresh();
#endif /* VMS */
}

#endif /* not DISABLE_NEWS */
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYNews.c,v 1.54 2009/01/01 23:09:57 tom Exp $
d86 1
a86 1
		 BOOLEAN followup)
d142 1
a142 1
	    LYRemoveTemp(my_tempfile);
d163 1
a163 1
	if (!((cp = strchr(References, '@@')) && cp > References + 1 &&
d198 1
a198 1
    if (LYgetstr(user_input, VISIBLE,
d241 1
a241 1
	LYstrncpy(user_input + len, kp, (int) sizeof(user_input) - len - 1);
d244 1
a244 1
    if (LYgetstr(user_input, VISIBLE,
d286 2
a287 2
		if (fgets(user_input, sizeof(user_input), fp) != NULL) {
		    if ((org = strchr(user_input, '\n')) != NULL) {
d300 1
a300 1
    LYstrncpy(user_input, cp, (sizeof(user_input) - 16));
d303 1
a303 1
    if (LYgetstr(user_input, VISIBLE,
d365 1
a365 1
	if (LYgetstr(user_input, VISIBLE,
d379 1
a379 1
	    if (LYgetstr(user_input, VISIBLE,
d453 1
a453 1
	    LYRemoveTemp(my_tempfile);
d485 2
a486 2
	LYRemoveTemp(my_tempfile);
    LYRemoveTemp(CJKfile);
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d88 2
a89 2
    char user_input[1024];
    char CJKinput[1024];
d240 2
a241 2
	len = strlen(user_input);
	LYstrncpy(user_input + len, kp, sizeof(user_input) - len - 1);
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d24 2
a25 2
**  Global variable for async i/o.
*/
d27 1
a27 1
PRIVATE void terminate_message  PARAMS((int sig));
d29 2
a30 3
PRIVATE BOOLEAN message_has_content ARGS2(
    CONST char *,	filename,
    BOOLEAN *,		nonspaces)
d40 1
a40 1
	       NONNULL(filename)));
d46 1
d72 12
a83 13
**  This function is called from HTLoadNews() to have the user
**  create a file with news headers and a body for posting of
**  a new message (based on a newspost://nntp_host/newsgroups
**  or snewspost://secure_nntp_host/newsgroups URL), or to post
**  a followup (based on a newsreply://nntp_host/newsgroups or
**  snewsreply://secure_nntp_host/newsgroups URL). The group
**  or comma-separated list of newsgroups is passed without
**  a lead slash, and followup is TRUE for newsreply or
**  snewsreply URLs.  - FM
*/
PUBLIC char *LYNewsPost ARGS2(
	char *,		newsgroups,
	BOOLEAN,	followup)
d88 2
a89 2
    CONST char *kp = NULL;
    int c = 0;  /* user input */
d104 2
a105 2
     *  Make sure a non-zero length newspost, newsreply,
     *  snewspost or snewsreply path was sent to us. - FM
d107 2
a108 2
    if (!(newsgroups && *newsgroups))
	return(postfile);
d111 2
a112 2
     *  Return immediately if we do get called, maybe by some quirk
     *  of HTNews.c, when we shouldn't. - kw
d115 1
a115 1
	return(postfile);
d118 1
a118 2
     *  Open a temporary file for the headers
     *  and message body. - FM
d127 1
a127 1
	return(postfile);
d131 2
a132 2
     *  If we're using a Japanese display character set,
     *  open a temporary file for a conversion to JIS. - FM
d140 1
a140 1
	    return(postfile);
d145 2
a146 3
     *  The newsgroups could be a comma-seperated list.
     *  It need not have spaces, but deal with any that
     *  may also have been hex escaped. - FM
d167 1
a167 1
	LYCloseTempFP(fd);		/* Close the temp file.	*/
d172 1
a172 2
     *  Allow ^C to cancel the posting,
     *  i.e., don't let SIGINTs exit Lynx.
d178 1
a178 1
     *  Show the list of newsgroups. - FM
d181 2
a182 2
    LYmove(2,0);
    scrollok(LYwin, TRUE);		/* Enable scrolling. */
d189 2
a190 2
     *  Get the mail address for the From header,
     *  offering personal_mail_address as default.
d193 1
a193 1
    sprintf(user_input, "From: %.*s", (int)sizeof(user_input) - 8,
d199 2
a200 2
	LYCloseTempFP(fd);		/* Close the temp file.	*/
	scrollok(LYwin, FALSE);		/* Stop scrolling.	*/
d206 2
a207 3
     *  Get the Subject header, offering the current
     *  document's title as the default if this is a
     *  followup rather than a new post. - FM
d214 1
a214 1
	 *  Add the default subject.
d217 1
a217 1
#ifdef CJK_EX	/* 1998/05/15 (Fri) 09:10:38 */
d220 1
a220 1
	    switch(kanji_code) {
d222 1
a222 1
		TO_EUC((CONST unsigned char *)kp, (unsigned char *)CJKinput);
d226 1
a226 1
		TO_SJIS((CONST unsigned char *)kp, (unsigned char *)CJKinput);
d245 2
a246 2
	LYCloseTempFP(fd);		/* Close the temp file. */
	scrollok(LYwin, FALSE);		/* Stop scrolling.	*/
d249 1
a249 1
    fprintf(fd,"%s\n",user_input);
d252 1
a252 1
     *  Add Organization: header.
d263 1
d274 1
a274 1
#ifdef _WINDOWS	/* 1998/05/14 (Thu) 17:47:01 */
d304 2
a305 2
	LYCloseTempFP(fd);		/* Close the temp file. */
	scrollok(LYwin, FALSE);		/* Stop scrolling.	*/
d314 1
a314 1
     *  Add Newsgroups Summary and Keywords headers.
d319 1
a319 1
     *  Have the user create the message body.
d321 1
a321 1
    if (!no_editor && editor && *editor != '\0') {
d325 1
a325 1
	     *  Ask if the user wants to include the original message.
d331 5
a335 5
		 *  The 'TRUE' will add the reply ">" in front of every line.
		 *  We're assuming that if the display character set is
		 *  Japanese and the document did not have a CJK charset,
		 *  any non-EUC or non-SJIS 8-bit characters in it where
		 *  converted to 7-bit equivalents. - FM
d337 1
a337 1
		print_wwwfile_to_fd(fd, TRUE);
d340 2
a341 2
	LYCloseTempFP(fd);		/* Close the temp file. */
	scrollok(LYwin, FALSE);		/* Stop scrolling.	*/
d346 1
a346 1
	 *  Spawn the user's editor on the news file.
d354 1
a354 1
	 *  Use the built in line editior.
d366 2
a367 2
	    LYCloseTempFP(fd);		/* Close the temp file.	*/
	    scrollok(LYwin, FALSE);	/* Stop scrolling.	*/
d370 1
a370 1
	while (!STREQ(user_input,".") && !term_message) {
d372 1
a372 1
	    fprintf(fd,"%s\n",user_input);
d380 1
a380 1
		scrollok(LYwin, FALSE);	/* Stop scrolling.	*/
d385 2
a386 2
	LYCloseTempFP(fd);		/* Close the temp file. */
	scrollok(LYwin, FALSE);		/* Stop scrolling.	*/
d391 2
a392 2
	 *  Confirm whether to post, and if so,
	 *  whether to append the sig file. - FM
d398 1
a398 1
	    LYclear();  /* clear the screen */
d404 1
a404 1
	 || HTConfirmDefault(POST_MSG_PROMPT, NO) != YES)
d409 1
d416 1
a416 1
	    if ((fd = LYAppendToTxtFile (my_tempfile)) != NULL) {
d418 1
d430 1
a430 1
    LYclear();  /* clear the screen */
d433 4
a436 5
     *  If we are using a Japanese display character
     *  set, convert the contents of the temp file to
     *  JIS (nothing should change if it does not, in
     *  fact, contain EUC or SJIS di-bytes).  Otherwise,
     *  use the temp file as is. - FM
d441 1
d443 2
a444 2
		TO_JIS((unsigned char *)buffer,
		       (unsigned char *)CJKinput);
d461 5
a465 7
	 *  If it's not a followup, the current document
	 *  most likely is the group listing, so force a
	 *  to have the article show up in the list after
	 *  the posting.  Note, that if it's a followup
	 *  via a link in a news article, the user must
	 *  do a reload manually on returning to the
	 *  group listing. - FM
d474 1
a474 1
     *  Come here to cleanup and exit.
d476 1
a476 1
cleanup:
d487 1
a487 1
    return(postfile);
d490 1
a490 2
PRIVATE void terminate_message ARGS1(
	int,	sig GCC_UNUSED)
d494 1
a494 1
     *  Reassert the AST.
d499 1
a499 1
     *  Refresh the screen to get rid of the "interrupt" message.
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d47 1
a47 3
	if (*cp == '\0') {
	    break;
	}
d49 4
a52 18
	    if (*cp == '\n') {
		break;
	    } else if (*cp != ' ') {
		if (!firstnonblank && isgraph(UCH(*cp))) {
		    firstnonblank = *cp;
		} else if (!isspace(UCH(*cp))) {
		    *nonspaces = TRUE;
		}
	    }
	}
	if (*cp != '\n') {
	    int c;
	    while ((c = getc(fp)) != EOF && c != '\n') {
		if (!firstnonblank && isgraph(UCH(c))) {
		    firstnonblank = (char)c;
		} else if (!isspace(UCH(*cp))) {
		    *nonspaces = TRUE;
		}
d198 1
a198 1
	    (personal_mail_address != NULL) ? personal_mail_address : "");
d260 1
a260 1
    if (((org = getenv("ORGANIZATION")) != NULL) && *org != '\0') {
d262 1
a262 2
    } else if (((org = getenv("NEWS_ORGANIZATION")) != NULL) &&
	       *org != '\0') {
a268 3
	    if ((org = strchr(buffer, '\n')) != NULL) {
		*org = '\0';
	    }
d270 1
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d17 1
d29 3
a31 2
PRIVATE BOOLEAN message_has_content ARGS1(
    CONST char *,		filename)
d37 2
d40 2
a41 2
	CTRACE(tfp, "Failed to open file %s for reading!\n",
	       filename ? filename : "(<null>)");
d54 1
a54 1
		if (!firstnonblank && isgraph((unsigned char)*cp)) {
d56 2
d63 2
a64 2
	    while ((c = getc(fp)) != EOF && c != (int)(unsigned char)'\n') {
		if (!firstnonblank && isgraph((unsigned char)c))
d66 3
d73 1
a73 1
		fclose(fp);
d83 1
a83 1
    fclose(fp);
d107 1
d118 1
d128 7
d138 6
a143 1
    if ((fd = LYOpenTemp(my_tempfile, HTML_SUFFIX, "w")) == NULL) {
d180 1
a180 1
	      isalnum(cp[1]))) {
d200 7
a206 7
    clear();
    move(2,0);
    scrollok(stdscr, TRUE);	/* Enable scrolling. */
    addstr(gettext("You will be posting to:"));
    addstr("\n\t");
    addstr(NewsGroups);
    addch('\n');
d212 3
a214 4
    addstr(gettext("\n\n Please provide your mail address for the From: header\n"));
    strcpy(user_input, "From: ");
    if (personal_mail_address)
	strcat(user_input, personal_mail_address);
d220 1
a220 1
	scrollok(stdscr, FALSE);	/* Stop scrolling.	*/
d230 1
a230 1
    addstr(gettext("\n\n Please provide or edit the Subject: header\n"));
d238 17
d258 2
a259 1
	strcat(user_input, kp);
d267 1
a267 1
	scrollok(stdscr, FALSE);	/* Stop scrolling.	*/
d281 3
a283 2
#ifndef VMS
    } else if ((fp = fopen("/etc/organization", "r")) != NULL) {
d294 23
a316 2
	fclose(fp);
#endif /* !VMS */
d318 2
d322 1
a322 1
    addstr(gettext("\n\n Please provide or edit the Organization: header\n"));
d328 1
a328 1
	scrollok(stdscr, FALSE);	/* Stop scrolling.	*/
a344 4
	/*
	 *  Use an external editor.
	 */
	char *editor_arg = "";
d354 1
a354 1
		 *  The 1 will add the reply ">" in front of every line.
d360 1
a360 1
		print_wwwfile_to_fd(fd, 1);
d364 2
a365 2
	scrollok(stdscr, FALSE);	/* Stop scrolling.	*/
	if (term_message || c == 7 || c == 3)
d371 1
a371 12
	if (strstr(editor, "pico")) {
	    editor_arg = " -t"; /* No prompt for filename to use */
	}
	sprintf(user_input,"%s%s %s", editor, editor_arg, my_tempfile);
	_statusline(SPAWNING_EDITOR_FOR_NEWS);
	stop_curses();
	if (LYSystem(user_input)) {
	    start_curses();
	    HTAlert(ERROR_SPAWNING_EDITOR);
	} else {
	    start_curses();
	}
d373 1
a373 1
	nonempty = message_has_content(my_tempfile);
d379 5
a383 5
	addstr(gettext("\n\n Please enter your message below."));
	addstr(gettext("\n When you are done, press enter and put a single period (.)"));
	addstr(gettext("\n on a line and press enter again."));
	addstr("\n\n");
	refresh();
d390 1
a390 1
	    scrollok(stdscr, FALSE);	/* Stop scrolling.	*/
d394 1
a394 1
	    addch('\n');
d402 2
a403 2
		LYCloseTempFP(fd);		/* Close the temp file. */
		scrollok(stdscr, FALSE);	/* Stop scrolling.	*/
d409 1
a409 1
	scrollok(stdscr, FALSE);	/* Stop scrolling.	*/
d412 13
a424 1
    if (!nonempty) {
d426 3
a428 12
	goto cleanup;
    }
    /*
     *  Confirm whether to post, and if so,
     *  whether to append the sig file. - FM
     */
    LYStatusLine = (LYlines - 1);
    c = HTConfirm(POST_MSG_PROMPT);
    LYStatusLine = -1;
    if (c != YES) {
	clear();  /* clear the screen */
	goto cleanup;
d430 1
a430 1
    if ((LynxSigFile != NULL) && (fp = fopen(LynxSigFile, "r")) != NULL) {
d444 1
a444 1
		fclose(fd);
d447 1
a447 1
	fclose(fp);
d451 1
a451 1
    clear();  /* clear the screen */
d461 1
a461 1
	if ((fd = fopen(my_tempfile, "r")) != NULL) {
d470 1
a470 1
	    fclose(fd);
d526 1
a526 1
    refresh();
@


1.1
log
@Initial revision
@
text
@d1 16
a16 18
#include "HTUtils.h"
#include "tcp.h"
#include "HTParse.h"
#include "HTAccess.h"
#include "HTCJK.h"
#include "HTAlert.h"
#include "LYCurses.h"
#include "LYSignal.h"
#include "LYStructs.h"
#include "LYUtils.h"
#include "LYClean.h"
#include "LYStrings.h"
#include "LYGetFile.h"
#include "LYHistory.h"
#include "LYSystem.h"
#include "GridText.h"
#include "LYCharSets.h"
#include "LYNews.h"
d18 1
a18 1
#include "LYGlobalDefs.h"
d20 1
a20 3
#include "LYLeaks.h"

#define FREE(x) if (x) {free(x); x = NULL;}
d28 50
d96 1
d99 1
a99 1
    char my_tempfile[256];
d101 1
a101 1
    char CJKfile[256];
d104 1
d107 1
d120 1
a120 2
    tempname(my_tempfile, NEW_FILE);
    if ((fd = LYNewTxtFile(my_tempfile)) == NULL) {
d130 3
a132 4
    if (!strncmp(LYchar_set_names[current_char_set], "Japanese (EUC)", 14) ||
	!strncmp(LYchar_set_names[current_char_set], "Japanese (SJIS)", 15)) {
	tempname(CJKfile, NEW_FILE);
	if ((fc = LYNewTxtFile(CJKfile)) == NULL) {
d134 1
a134 7
	    fclose(fd);
#ifdef VMS
	    while (remove(my_tempfile) == 0)
		; /* loop through all versions */
#else
	    remove(my_tempfile);
#endif /* VMS */
d145 16
d162 4
d180 1
a180 1
    addstr("You will be posting to:");
d189 1
a189 1
    addstr("\n\n Please provide your mail address for the From: header\n");
d196 3
a198 4
        _statusline(NEWS_POST_CANCELLED);
	sleep(InfoSecs);
	fclose(fd);		 /* Close the temp file. */
	scrollok(stdscr, FALSE); /* Stop scrolling.	 */
d208 1
a208 1
    addstr("\n\n Please provide or edit the Subject: header\n");
d211 1
a211 1
        (cp = HText_getTitle()) != NULL) {
d215 3
a217 5
	while (isspace(*cp)) {
	    cp++;
	}
	if (strncasecomp(cp, "Re:", 3)) {
            strcat(user_input, "Re: ");
d219 1
a219 1
        strcat(user_input, cp);
d225 4
a228 5
        _statusline(NEWS_POST_CANCELLED);
        sleep(InfoSecs);
        fclose(fd);		 /* Close the temp file. */
	scrollok(stdscr, FALSE); /* Stop scrolling.	 */
        goto cleanup;
d239 1
a239 1
    	       *org != '\0') {
d243 4
a246 3
	if (fgets(user_input, sizeof(user_input), fp) != NULL) {
	    if ((org = strchr(user_input, '\n')) != NULL) {
	        *org = '\0';
d249 1
a249 1
	        StrAllocCat(cp, user_input);
d252 1
d257 2
a258 2
    FREE(cp); 
    addstr("\n\n Please provide or edit the Organization: header\n");
d262 4
a265 5
        _statusline(NEWS_POST_CANCELLED);
        sleep(InfoSecs);
        fclose(fd);		 /* Close the temp file. */
	scrollok(stdscr, FALSE); /* Stop scrolling.	 */
        goto cleanup;
d269 3
d281 1
a281 1
        /*
d290 4
a293 7
	    _statusline(INC_ORIG_MSG_PROMPT);
	    c = 0;
	    while (TOUPPER(c) != 'Y' && TOUPPER(c) != 'N' &&
	    	   !term_message && c != 7 && c != 3)
	        c = LYgetch();
	    if (TOUPPER(c) == 'Y')
	        /*
d300 2
a301 1
	        print_wwwfile_to_fd(fd, 1);
d303 2
a304 2
	fclose(fd);		 /* Close the temp file. */
	scrollok(stdscr, FALSE); /* Stop scrolling.	 */
d317 1
a317 1
	if (system(user_input)) {
d319 1
a319 2
	    _statusline(ERROR_SPAWNING_EDITOR);
	    sleep(AlertSecs);
d323 3
d327 1
a327 1
        /*
d330 3
a332 3
	addstr("\n\n Please enter your message below.");
	addstr("\n When you are done, press enter and put a single period (.)");
	addstr("\n on a line and press enter again.");
d335 1
a335 1
        *user_input = '\0';
d337 1
a337 1
	    	     sizeof(user_input), NORECALL) < 0 ||
d339 2
a340 3
	    _statusline(NEWS_POST_CANCELLED);
	    sleep(InfoSecs);
	    fclose(fd);			/* Close the temp file.	*/
d344 1
a344 1
	while (!STREQ(user_input,".") && !term_message) { 
d347 2
d351 5
a355 6
	       		 sizeof(user_input), NORECALL) < 0) {
	        _statusline(NEWS_POST_CANCELLED);
	        sleep(InfoSecs);
	        fclose(fd);		 /* Close the temp file. */
		scrollok(stdscr, FALSE); /* Stop scrolling.	 */
	        goto cleanup;
d357 1
a357 1
 	}
d359 2
a360 2
	fclose(fd);		 /* Close the temp file. */
	scrollok(stdscr, FALSE); /* Stop scrolling.	 */
d363 4
d372 1
a372 2
    _statusline(POST_MSG_PROMPT);
    c = 0;
d374 2
a375 5
    while (TOUPPER(c) != 'Y' && TOUPPER(c) != 'N' &&
	   !term_message && c != 7   && c != 3)
	c = LYgetch();
    if (TOUPPER(c) != 'Y') {
        clear();  /* clear the screen */
d378 4
a381 2
    if ((LynxSigFile != NULL) &&
        (fp = fopen(LynxSigFile, "r")) != NULL) {
d383 8
a390 11
	_user_message(APPEND_SIG_FILE, LynxSigFile);
	c = 0;
        LYStatusLine = -1;
	while (TOUPPER(c) != 'Y' && TOUPPER(c) != 'N' &&
	       !term_message && c != 7   && c != 3)
	    c = LYgetch();
	if (TOUPPER(c) == 'Y') {
	    if ((fd = fopen(my_tempfile, "a")) != NULL) {
	        fputs("-- \n", fd);
	        while (fgets(user_input, sizeof(user_input), fp) != NULL) {
		    fputs(user_input, fd);
d396 2
d410 3
a412 2
	    while (fgets(user_input, sizeof(user_input), fd) != NULL) {
	        TO_JIS((unsigned char *)user_input,
d416 1
a416 1
	    fclose(fc);
d419 1
a419 7
#ifdef VMS
	    while (remove(my_tempfile) == 0)
		; /* loop through all versions */
#else
	    remove(my_tempfile);
#endif /* VMS */
	    fd = fc;
d429 1
a429 1
        /*
d438 1
a438 1
        LYforce_no_cache = TRUE;
d441 1
a441 1
    statusline(POSTING_TO_NEWS);
a442 1
    sleep(MessageSecs);
d452 3
a454 17
    if (!postfile) {
#ifdef VMS
        while (remove(my_tempfile) == 0)
	    ; /* loop through all versions */
#else
	remove(my_tempfile);
#endif /* VMS */
    }
    if (CJKfile[0] != '\0') {
#ifdef VMS
	fclose(fc);
        while (remove(CJKfile) == 0)
	    ; /* loop through all versions */
#else
	remove(CJKfile);
#endif /* VMS */
    }
d456 1
d477 2
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
