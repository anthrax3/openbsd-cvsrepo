head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.8;
commitid	EcR8E7r0stjLUV4p;

1.8
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.7;
commitid	lGGuvDWEniklWrQe;

1.7
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.06.01.53.42;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.47;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.07;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.52;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.52;	author maja;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYCharSets.c,v 1.68 2013/01/04 21:47:16 tom Exp $
 */
#include <HTUtils.h>
#include <HTCJK.h>
#include <HTMLDTD.h>

#include <LYGlobalDefs.h>
#include <UCMap.h>
#include <UCdomap.h>
#include <UCDefs.h>
#include <LYCharSets.h>
#include <GridText.h>
#include <LYCurses.h>
#include <LYStrings.h>

#include <LYLeaks.h>

HTkcode kanji_code = NOKANJI;
BOOLEAN LYHaveCJKCharacterSet = FALSE;
BOOLEAN DisplayCharsetMatchLocale = TRUE;
BOOL force_old_UCLYhndl_on_reload = FALSE;
int forced_UCLYhdnl;
int LYNumCharsets = 0;		/* Will be initialized later by UC_Register. */
int current_char_set = -1;	/* will be intitialized later in LYMain.c */
int linedrawing_char_set = -1;
STRING2PTR p_entity_values = NULL;	/* Pointer, for HTML_put_entity() */

			      /* obsolete and probably not used(???)        */
			      /* will be initialized in HTMLUseCharacterSet */
#ifdef USE_CHARSET_CHOICE
charset_subset_t charset_subsets[MAXCHARSETS];
BOOL custom_display_charset = FALSE;
BOOL custom_assumed_doc_charset = FALSE;

#ifndef ALL_CHARSETS_IN_O_MENU_SCREEN
int display_charset_map[MAXCHARSETS];
int assumed_doc_charset_map[MAXCHARSETS];

const char *display_charset_choices[MAXCHARSETS + 1];
const char *assumed_charset_choices[MAXCHARSETS + 1];
int displayed_display_charset_idx;
#endif
#endif /* USE_CHARSET_CHOICE */

/*
 * New character sets now declared with UCInit() in UCdomap.c
 *
 * INSTRUCTIONS for adding new character sets which do not have
 *		Unicode tables now in UCdomap.h
 *
 *
 * [We hope you need not correct/add old-style mapping below as in ISO_LATIN1[]
 * or SevenBitApproximations[] any more - it works now via new chartrans
 * mechanism, but kept for compatibility only:  we should cleanup the stuff,
 * but this is not so easy...]
 *
 * Currently we only declare some charset's properties here (such as MIME
 * names, etc.), it does not include real mapping.
 *
 * There is a place marked "Add your new character sets HERE" in this file. 
 * Make up a character set and add it in the same style as the ISO_LATIN1 set
 * below, giving it a unique name.
 *
 * Add the name of the set to LYCharSets.  Similarly add the appropriate
 * information to the tables below:  LYchar_set_names, LYCharSet_UC,
 * LYlowest_eightbit.  These 4 tables all MUST have the same order.  (And this
 * is the order you will see in Lynx Options Menu, which is why few
 * unicode-based charsets are listed here).
 *
 */

/*	Entity values -- for ISO Latin 1 local representation
 *
 *	This MUST match exactly the table referred to in the DTD!
 */
static const char *ISO_Latin1[] =
{
    "\306",			/* capital AE diphthong (ligature) (&#198;) - AElig */
    "\301",			/* capital A, acute accent (&#193;) - Aacute */
    "\302",			/* capital A, circumflex accent (&#194;) - Acirc */
    "\300",			/* capital A, grave accent (&#192;) - Agrave */
    "\305",			/* capital A, ring - Aring (&#197;) */
    "\303",			/* capital A, tilde - Atilde (&#195;) */
    "\304",			/* capital A, dieresis or umlaut mark (&#196;) - Auml */
    "\307",			/* capital C, cedilla - Ccedil (&#199;) */
    "\320",			/* capital Eth or D with stroke (&#208;) - Dstrok */
    "\320",			/* capital Eth, Icelandic (&#208;) - ETH */
    "\311",			/* capital E, acute accent (&#201;) - Eacute */
    "\312",			/* capital E, circumflex accent (&#202;) - Ecirc */
    "\310",			/* capital E, grave accent (&#200;) - Egrave */
    "\313",			/* capital E, dieresis or umlaut mark (&#203;) - Euml */
    "\315",			/* capital I, acute accent (&#205;) - Iacute */
    "\316",			/* capital I, circumflex accent (&#206;) - Icirc */
    "\314",			/* capital I, grave accent (&#204;) - Igrave */
    "\317",			/* capital I, dieresis or umlaut mark (&#207;) - Iuml */
    "\321",			/* capital N, tilde (&#209;) - Ntilde */
    "\323",			/* capital O, acute accent (&#211;) - Oacute */
    "\324",			/* capital O, circumflex accent (&#212;) - Ocirc */
    "\322",			/* capital O, grave accent (&#210;) - Ograve */
    "\330",			/* capital O, slash (&#216;) - Oslash */
    "\325",			/* capital O, tilde (&#213;) - Otilde */
    "\326",			/* capital O, dieresis or umlaut mark (&#214;) - Ouml */
    "\336",			/* capital THORN, Icelandic (&#222;) - THORN */
    "\332",			/* capital U, acute accent (&#218;) - Uacute */
    "\333",			/* capital U, circumflex accent (&#219;) - Ucirc */
    "\331",			/* capital U, grave accent (&#217;) - Ugrave */
    "\334",			/* capital U, dieresis or umlaut mark (&#220;) - Uuml */
    "\335",			/* capital Y, acute accent (&#221;) - Yacute */
    "\341",			/* small a, acute accent (&#225;) - aacute */
    "\342",			/* small a, circumflex accent (&#226;) - acirc */
    "\264",			/* spacing acute (&#180;) - acute */
    "\346",			/* small ae diphthong (ligature) (&#230;) - aelig */
    "\340",			/* small a, grave accent (&#224;) - agrave */
    "\046",			/* ampersand (&#38;) - amp */
    "\345",			/* small a, ring (&#229;) - aring */
    "\343",			/* small a, tilde (&#227;) - atilde */
    "\344",			/* small a, dieresis or umlaut mark (&#228;) - auml */
    "\246",			/* broken vertical bar (&#166;) - brkbar */
    "\246",			/* broken vertical bar (&#166;) - brvbar */
    "\347",			/* small c, cedilla (&#231;) - ccedil */
    "\270",			/* spacing cedilla (&#184;) - cedil */
    "\242",			/* cent sign (&#162;) - cent */
    "\251",			/* copyright sign (&#169;) - copy */
    "\244",			/* currency sign (&#164;) - curren */
    "\260",			/* degree sign (&#176;) - deg */
    "\250",			/* spacing dieresis (&#168;) - die */
    "\367",			/* division sign (&#247;) - divide */
    "\351",			/* small e, acute accent (&#233;) - eacute */
    "\352",			/* small e, circumflex accent (&#234;) - ecirc */
    "\350",			/* small e, grave accent (&#232;) - egrave */
    "-",			/* dash the width of emsp - emdash */
    "\002",			/* emsp, em space - not collapsed NEVER CHANGE THIS - emsp */
    "-",			/* dash the width of ensp - endash */
    "\002",			/* ensp, en space - not collapsed NEVER CHANGE THIS - ensp */
    "\360",			/* small eth, Icelandic (&#240;) - eth */
    "\353",			/* small e, dieresis or umlaut mark (&#235;) - euml */
    "\275",			/* fraction 1/2 (&#189;) - frac12 */
    "\274",			/* fraction 1/4 (&#188;) - frac14 */
    "\276",			/* fraction 3/4 (&#190;) - frac34 */
    "\076",			/* greater than (&#62;) - gt */
    "\257",			/* spacing macron (&#175;) - hibar */
    "\355",			/* small i, acute accent (&#237;) - iacute */
    "\356",			/* small i, circumflex accent (&#238;) - icirc */
    "\241",			/* inverted exclamation mark (&#161;) - iexcl */
    "\354",			/* small i, grave accent (&#236;) - igrave */
    "\277",			/* inverted question mark (&#191;) - iquest */
    "\357",			/* small i, dieresis or umlaut mark (&#239;) - iuml */
    "\253",			/* angle quotation mark, left (&#171;) - laquo */
    "\074",			/* less than (&#60;) - lt */
    "\257",			/* spacing macron (&#175;) - macr */
    "-",			/* dash the width of emsp - mdash */
    "\265",			/* micro sign (&#181;) - micro */
    "\267",			/* middle dot (&#183;) - middot */
    "\001",			/* nbsp non-breaking space NEVER CHANGE THIS - nbsp */
    "-",			/* dash the width of ensp - ndash */
    "\254",			/* negation sign (&#172;) - not */
    "\361",			/* small n, tilde (&#241;) - ntilde */
    "\363",			/* small o, acute accent (&#243;) - oacute */
    "\364",			/* small o, circumflex accent (&#244;) - ocirc */
    "\362",			/* small o, grave accent (&#242;) - ograve */
    "\252",			/* feminine ordinal indicator (&#170;) - ordf */
    "\272",			/* masculine ordinal indicator (&#186;) - ordm */
    "\370",			/* small o, slash (&#248;) - oslash */
    "\365",			/* small o, tilde (&#245;) - otilde */
    "\366",			/* small o, dieresis or umlaut mark (&#246;) - ouml */
    "\266",			/* paragraph sign (&#182;) - para */
    "\261",			/* plus-or-minus sign (&#177;) - plusmn */
    "\243",			/* pound sign (&#163;) - pound */
    "\042",			/* quote '"' (&#34;) - quot */
    "\273",			/* angle quotation mark, right (&#187;) - raquo */
    "\256",			/* circled R registered sign (&#174;) - reg */
    "\247",			/* section sign (&#167;) - sect */
    "\007",			/* soft hyphen (&#173;) NEVER CHANGE THIS - shy */
    "\271",			/* superscript 1 (&#185;) - sup1 */
    "\262",			/* superscript 2 (&#178;) - sup2 */
    "\263",			/* superscript 3 (&#179;) - sup3 */
    "\337",			/* small sharp s, German (sz ligature) (&#223;) - szlig */
    "\002",			/* thin space - not collapsed NEVER CHANGE THIS - thinsp */
    "\376",			/* small thorn, Icelandic (&#254;) - thorn */
    "\327",			/* multiplication sign (&#215;) - times */
    "(TM)",			/* circled TM trade mark sign (&#8482;) - trade */
    "\372",			/* small u, acute accent (&#250;) - uacute */
    "\373",			/* small u, circumflex accent (&#251;) - ucirc */
    "\371",			/* small u, grave accent (&#249;) - ugrave */
    "\250",			/* spacing dieresis (&#168;) - uml */
    "\374",			/* small u, dieresis or umlaut mark (&#252;) - uuml */
    "\375",			/* small y, acute accent (&#253;) - yacute */
    "\245",			/* yen sign (&#165;) - yen */
    "\377",			/* small y, dieresis or umlaut mark (&#255;) - yuml */
};

/*	Entity values -- 7 bit character approximations
 *
 *	This MUST match exactly the table referred to in the DTD!
 */
const char *SevenBitApproximations[] =
{
    "AE",			/* capital AE diphthong (ligature) (&#198;) - AElig */
    "A",			/* capital A, acute accent (&#193;) - Aacute */
    "A",			/* capital A, circumflex accent (&#194;) - Acirc */
    "A",			/* capital A, grave accent (&#192;) - Agrave */
    "A",			/* capital A, ring - Aring (&#197;) */
    "A",			/* capital A, tilde - Atilde (&#195;) */
#ifdef LY_UMLAUT
    "Ae",			/* capital A, dieresis or umlaut mark (&#196;) - Auml */
#else
    "A",			/* capital A, dieresis or umlaut mark (&#196;) - Auml */
#endif				/* LY_UMLAUT */
    "C",			/* capital C, cedilla (&#199;) - Ccedil */
    "Dj",			/* capital D with stroke (&#208;) - Dstrok */
    "DH",			/* capital Eth, Icelandic (&#208;) - ETH */
    "E",			/* capital E, acute accent (&#201;) - Eacute */
    "E",			/* capital E, circumflex accent (&#202;) - Ecirc */
    "E",			/* capital E, grave accent (&#200;) - Egrave */
    "E",			/* capital E, dieresis or umlaut mark (&#203;) - Euml */
    "I",			/* capital I, acute accent (&#205;) - Iacute */
    "I",			/* capital I, circumflex accent (&#206;) - Icirc */
    "I",			/* capital I, grave accent (&#204;) - Igrave */
    "I",			/* capital I, dieresis or umlaut mark (&#207;) - Iuml */
    "N",			/* capital N, tilde - Ntilde (&#209;) */
    "O",			/* capital O, acute accent (&#211;) - Oacute */
    "O",			/* capital O, circumflex accent (&#212;) - Ocirc */
    "O",			/* capital O, grave accent (&#210;) - Ograve */
    "O",			/* capital O, slash (&#216;) - Oslash */
    "O",			/* capital O, tilde (&#213;) - Otilde */
#ifdef LY_UMLAUT
    "Oe",			/* capital O, dieresis or umlaut mark (&#214;) - Ouml */
#else
    "O",			/* capital O, dieresis or umlaut mark (&#214;) - Ouml */
#endif				/* LY_UMLAUT */
    "P",			/* capital THORN, Icelandic (&#222;) - THORN */
    "U",			/* capital U, acute accent (&#218;) - Uacute */
    "U",			/* capital U, circumflex accent (&#219;) - Ucirc */
    "U",			/* capital U, grave accent (&#217;) - Ugrave */
#ifdef LY_UMLAUT
    "Ue",			/* capital U, dieresis or umlaut mark (&#220;) - Uuml */
#else
    "U",			/* capital U, dieresis or umlaut mark (&#220;) - Uuml */
#endif				/* LY_UMLAUT */
    "Y",			/* capital Y, acute accent (&#221;) - Yacute */
    "a",			/* small a, acute accent (&#225;) - aacute */
    "a",			/* small a, circumflex accent (&#226;) - acirc */
    "'",			/* spacing acute (&#180;) - acute */
    "ae",			/* small ae diphthong (ligature) (&#230;) - aelig */
    "`a",			/* small a, grave accent (&#232;) - agrave */
    "&",			/* ampersand (&#38;) - amp */
    "a",			/* small a, ring (&#229;) - aring */
    "a",			/* small a, tilde (&#227;) - atilde */
#ifdef LY_UMLAUT
    "ae",			/* small a, dieresis or umlaut mark (&#228;) - auml */
#else
    "a",			/* small a, dieresis or umlaut mark (&#228;) - auml */
#endif				/* LY_UMLAUT */
    "|",			/* broken vertical bar (&#166;) - brkbar */
    "|",			/* broken vertical bar (&#166;) - brvbar */
    "c",			/* small c, cedilla (&#231;) - ccedil */
    ",",			/* spacing cedilla (&#184;) - cedil */
    "-c-",			/* cent sign (&#162;) - cent */
    "(c)",			/* copyright sign (&#169;) - copy */
    "CUR",			/* currency sign (&#164;) - curren */
    "DEG",			/* degree sign (&#176;) - deg */
    "\042",			/* spacing dieresis (&#168;) - die */
    "/",			/* division sign (&#247;) - divide */
    "e",			/* small e, acute accent (&#233;) - eacute */
    "e",			/* small e, circumflex accent (&#234;) - ecirc */
    "e",			/* small e, grave accent (&#232;) - egrave */
    "-",			/* dash the width of emsp - emdash */
    "\002",			/* emsp NEVER CHANGE THIS - emsp */
    "-",			/* dash the width of ensp - endash */
    "\002",			/* ensp NEVER CHANGE THIS - ensp */
    "dh",			/* small eth, Icelandic eth (&#240;) */
    "e",			/* small e, dieresis or umlaut mark (&#235;) - euml */
    " 1/2",			/* fraction 1/2 (&#189;) - frac12 */
    " 1/4",			/* fraction 1/4 (&#188;) - frac14 */
    " 3/4",			/* fraction 3/4 (&#190;) - frac34 */
    ">",			/* greater than (&#62;) - gt */
    "-",			/* spacing macron (&#175;) - hibar */
    "i",			/* small i, acute accent (&#237;) - iacute */
    "i",			/* small i, circumflex accent (&#238;) - icirc */
    "!",			/* inverted exclamation mark (&#161;) - iexcl */
    "`i",			/* small i, grave accent (&#236;) - igrave */
    "?",			/* inverted question mark (&#191;) - iquest */
    "i",			/* small i, dieresis or umlaut mark (&#239;) - iuml */
    "<<",			/* angle quotation mark, left (&#171;) - laquo */
    "<",			/* less than - lt (&#60;) */
    "-",			/* spacing macron (&#175;) - macr */
    "-",			/* dash the width of emsp - mdash */
    "u",			/* micro sign (&#181;) - micro */
    ".",			/* middle dot (&#183;) - middot */
    "\001",			/* nbsp non-breaking space NEVER CHANGE THIS - nbsp */
    "-",			/* dash the width of ensp - ndash */
    "NOT",			/* negation sign (&#172;) - not */
    "n",			/* small n, tilde (&#241;) - ntilde */
    "o",			/* small o, acute accent (&#243;) - oacute */
    "o",			/* small o, circumflex accent (&#244;) - ocirc */
    "o",			/* small o, grave accent (&#242;) - ograve */
    "-a",			/* feminine ordinal indicator (&#170;) - ordf */
    "-o",			/* masculine ordinal indicator (&#186;) - ordm */
    "o",			/* small o, slash (&#248;) - oslash */
    "o",			/* small o, tilde (&#245;) - otilde */
#ifdef LY_UMLAUT
    "oe",			/* small o, dieresis or umlaut mark (&#246;) - ouml */
#else
    "o",			/* small o, dieresis or umlaut mark (&#246;) - ouml */
#endif				/* LY_UMLAUT */
    "P:",			/* paragraph sign (&#182;) - para */
    "+-",			/* plus-or-minus sign (&#177;) - plusmn */
    "-L-",			/* pound sign (&#163;) - pound */
    "\"",			/* quote '"' (&#34;) - quot */
    ">>",			/* angle quotation mark, right (&#187;) - raquo */
    "(R)",			/* circled R registered sign (&#174;) - reg */
    "S:",			/* section sign (&#167;) - sect */
    "\007",			/* soft hyphen (&#173;) NEVER CHANGE THIS - shy */
    "^1",			/* superscript 1 (&#185;) - sup1 */
    "^2",			/* superscript 2 (&#178;) - sup2 */
    "^3",			/* superscript 3 (&#179;) - sup3 */
    "ss",			/* small sharp s, German (sz ligature) (&#223;) - szlig */
    "\002",			/* thin space - not collapsed NEVER CHANGE THIS - thinsp */
    "p",			/* small thorn, Icelandic (&#254;) - thorn */
    "*",			/* multiplication sign (&#215;) - times */
    "(TM)",			/* circled TM trade mark sign (&#8482;) - trade */
    "u",			/* small u, acute accent (&#250;) - uacute */
    "u",			/* small u, circumflex accent (&#251;) - ucirc */
    "u",			/* small u, grave accent (&#249;) - ugrave */
    "\042",			/* spacing dieresis (&#168;) - uml */
#ifdef LY_UMLAUT
    "ue",			/* small u, dieresis or umlaut mark (&#252;) - uuml */
#else
    "u",			/* small u, dieresis or umlaut mark (&#252;) - uuml */
#endif				/* LY_UMLAUT */
    "y",			/* small y, acute accent (&#253;) - yacute */
    "YEN",			/* yen sign (&#165;) - yen */
    "y",			/* small y, dieresis or umlaut mark (&#255;) - yuml */
};

/*
 * Add your new character sets HERE (but only if you can't construct Unicode
 * tables for them).  - FM
 */

/*
 * Add the array name to LYCharSets
 */
STRING2PTR LYCharSets[MAXCHARSETS] =
{
    ISO_Latin1,			/* ISO Latin 1          */
    SevenBitApproximations,	/* 7 Bit Approximations */
};

/*
 * Add the name that the user will see below.  The order of LYCharSets and
 * LYchar_set_names MUST be the same
 */
const char *LYchar_set_names[MAXCHARSETS + 1] =
{
    "Western (ISO-8859-1)",
    "7 bit approximations (US-ASCII)",
    (char *) 0
};

/*
 * Associate additional pieces of info with each of the charsets listed above. 
 * Will be automatically modified (and extended) by charset translations which
 * are loaded using the chartrans mechanism.  Most important piece of info to
 * put here is a MIME charset name.  Used for chartrans (see UCDefs.h).  The
 * order of LYCharSets and LYCharSet_UC MUST be the same.
 *
 * Note that most of the charsets added by the new mechanism in src/chrtrans
 * don't show up here at all.  They don't have to.
 */
LYUCcharset LYCharSet_UC[MAXCHARSETS] =
{
  /*
   * Zero position placeholder and HTMLGetEntityUCValue() reference.  - FM
   */
    {-1, "iso-8859-1", UCT_ENC_8BIT, 0,
     UCT_REP_IS_LAT1,
     UCT_CP_IS_LAT1, UCT_R_LAT1, UCT_R_LAT1},

  /*
   * Placeholders for Unicode tables.  - FM
   */
    {-1, "us-ascii", UCT_ENC_7BIT, 0,
     UCT_REP_SUBSETOF_LAT1,
     UCT_CP_SUBSETOF_LAT1, UCT_R_ASCII, UCT_R_ASCII},

};

/*
 * Add the code of the the lowest character with the high bit set that can be
 * directly displayed.  The order of LYCharSets and LYlowest_eightbit MUST be
 * the same.
 *
 * (If charset have chartrans unicode table, LYlowest_eightbit will be
 * verified/modified anyway.)
 */
int LYlowest_eightbit[MAXCHARSETS] =
{
    160,			/* ISO Latin 1          */
    999,			/* 7 bit approximations */
};

/*
 * Function to set the handling of selected character sets based on the current
 * LYUseDefaultRawMode value.  - FM
 */
void HTMLSetCharacterHandling(int i)
{
    int chndl = safeUCGetLYhndl_byMIME(UCAssume_MIMEcharset);
    BOOLEAN LYRawMode_flag = LYRawMode;
    int UCLYhndl_for_unspec_flag = UCLYhndl_for_unspec;

    if (LYCharSet_UC[i].enc != UCT_ENC_CJK) {
	HTCJK = NOCJK;
	kanji_code = NOKANJI;
	if (i == chndl)
	    LYRawMode = LYUseDefaultRawMode;
	else
	    LYRawMode = (BOOL) (!LYUseDefaultRawMode);

	HTPassEightBitNum = (BOOL) ((LYCharSet_UC[i].codepoints & UCT_CP_SUPERSETOF_LAT1)
				    || (LYCharSet_UC[i].like8859 & UCT_R_HIGH8BIT));

	if (LYRawMode) {
	    HTPassEightBitRaw = (BOOL) (LYlowest_eightbit[i] <= 160);
	} else {
	    HTPassEightBitRaw = FALSE;
	}
	if (LYRawMode || i == chndl) {
	    HTPassHighCtrlRaw = (BOOL) (LYlowest_eightbit[i] <= 130);
	} else {
	    HTPassHighCtrlRaw = FALSE;
	}

	HTPassHighCtrlNum = FALSE;

    } else {			/* CJK encoding: */
	const char *mime = LYCharSet_UC[i].MIMEname;

	if (!strcmp(mime, "euc-cn")) {
	    HTCJK = CHINESE;
	    kanji_code = EUC;
	} else if (!strcmp(mime, "euc-jp")) {
	    HTCJK = JAPANESE;
	    kanji_code = EUC;
	} else if (!strcmp(mime, "shift_jis")) {
	    HTCJK = JAPANESE;
	    kanji_code = SJIS;
	} else if (!strcmp(mime, "euc-kr")) {
	    HTCJK = KOREAN;
	    kanji_code = EUC;
	} else if (!strcmp(mime, "big5")) {
	    HTCJK = TAIPEI;
	    kanji_code = EUC;
	}

	/* for any CJK: */
	if (!LYUseDefaultRawMode)
	    HTCJK = NOCJK;
	LYRawMode = (BOOL) (IS_CJK_TTY ? TRUE : FALSE);
	HTPassEightBitRaw = FALSE;
	HTPassEightBitNum = FALSE;
	HTPassHighCtrlRaw = (BOOL) (IS_CJK_TTY ? TRUE : FALSE);
	HTPassHighCtrlNum = FALSE;
    }

    /*
     * Comment for coding below:
     * UCLYhndl_for_unspec is "current" state with LYRawMode, but
     * UCAssume_MIMEcharset is independent from LYRawMode:  holds the history
     * and may be changed from 'O'ptions menu only.  - LP
     */
    if (LYRawMode) {
	UCLYhndl_for_unspec = i;	/* UCAssume_MIMEcharset not changed! */
    } else {
	if (chndl != i &&
	    (LYCharSet_UC[i].enc != UCT_ENC_CJK ||
	     LYCharSet_UC[chndl].enc != UCT_ENC_CJK)) {
	    UCLYhndl_for_unspec = chndl;	/* fall to UCAssume_MIMEcharset */
	} else {
	    UCLYhndl_for_unspec = LATIN1;	/* UCAssume_MIMEcharset not changed! */
	}
    }

#ifdef USE_SLANG
    if (LYlowest_eightbit[i] > 191) {
	/*
	 * Higher than this may output cntrl chars to screen.  - KW
	 */
	SLsmg_Display_Eight_Bit = 191;
    } else {
	SLsmg_Display_Eight_Bit = LYlowest_eightbit[i];
    }
#endif /* USE_SLANG */

    ena_csi(LYlowest_eightbit[current_char_set] > 155);

    /* some diagnostics */
    if (TRACE) {
	if (LYRawMode_flag != LYRawMode)
	    CTRACE((tfp,
		    "HTMLSetCharacterHandling: LYRawMode changed %s -> %s\n",
		    (LYRawMode_flag ? "ON" : "OFF"),
		    (LYRawMode ? "ON" : "OFF")));
	if (UCLYhndl_for_unspec_flag != UCLYhndl_for_unspec)
	    CTRACE((tfp,
		    "HTMLSetCharacterHandling: UCLYhndl_for_unspec changed %d -> %d\n",
		    UCLYhndl_for_unspec_flag,
		    UCLYhndl_for_unspec));
    }

    return;
}

/*
 * Function to set HTCJK based on "in" and "out" charsets.
 */
void Set_HTCJK(const char *inMIMEname,
	       const char *outMIMEname)
{
    /* need not check for synonyms: MIMEname's got from LYCharSet_UC */

    if (LYRawMode) {
	if ((!strcmp(inMIMEname, "euc-jp") ||
#ifdef EXP_JAPANESEUTF8_SUPPORT
	     !strcmp(inMIMEname, "utf-8") ||
#endif
	     !strcmp(inMIMEname, "shift_jis")) &&
	    (!strcmp(outMIMEname, "euc-jp") ||
	     !strcmp(outMIMEname, "shift_jis"))) {
	    HTCJK = JAPANESE;
	} else if (!strcmp(inMIMEname, "euc-cn") &&
		   !strcmp(outMIMEname, "euc-cn")) {
	    HTCJK = CHINESE;
	} else if (!strcmp(inMIMEname, "big5") &&
		   !strcmp(outMIMEname, "big5")) {
	    HTCJK = TAIPEI;
	} else if (!strcmp(inMIMEname, "euc-kr") &&
		   !strcmp(outMIMEname, "euc-kr")) {
	    HTCJK = KOREAN;
	} else {
	    HTCJK = NOCJK;
	}
    } else {
	HTCJK = NOCJK;
    }
}

/*
 * Function to set the LYDefaultRawMode value based on the selected character
 * set.  - FM
 *
 * Currently unused:  the default value so obvious that LYUseDefaultRawMode
 * utilized directly by someone's mistake.  - LP
 */
static void HTMLSetRawModeDefault(int i)
{
    LYDefaultRawMode = (BOOL) (LYCharSet_UC[i].enc == UCT_ENC_CJK);
    return;
}

/*
 * Function to set the LYUseDefaultRawMode value based on the selected
 * character set and the current LYRawMode value.  - FM
 */
void HTMLSetUseDefaultRawMode(int i,
			      int modeflag)
{
    if (LYCharSet_UC[i].enc != UCT_ENC_CJK) {

	int chndl = safeUCGetLYhndl_byMIME(UCAssume_MIMEcharset);

	if (i == chndl)
	    LYUseDefaultRawMode = (BOOLEAN) modeflag;
	else
	    LYUseDefaultRawMode = (BOOL) (!modeflag);
    } else			/* CJK encoding: */
	LYUseDefaultRawMode = (BOOLEAN) modeflag;

    return;
}

/*
 * Function to set the LYHaveCJKCharacterSet value based on the selected
 * character set.  - FM
 */
static void HTMLSetHaveCJKCharacterSet(int i)
{
    LYHaveCJKCharacterSet = (BOOL) (LYCharSet_UC[i].enc == UCT_ENC_CJK);
    return;
}

/*
 * Function to set the DisplayCharsetMatchLocale value based on the selected
 * character set.  It is used in UPPER8 for 8bit case-insensitive search by
 * matching def7_uni.tbl images.  - LP
 */
static void HTMLSetDisplayCharsetMatchLocale(int i)
{
    BOOLEAN match;

    if (LYHaveCJKCharacterSet) {
	/*
	 * We have no intention to pass CJK via UCTransChar if that happened.
	 * Let someone from CJK correct this if necessary.
	 */
	DisplayCharsetMatchLocale = TRUE;	/* old-style */
	return;

    } else if (strncasecomp(LYCharSet_UC[i].MIMEname, "cp", 2) ||
	       strncasecomp(LYCharSet_UC[i].MIMEname, "windows", 7)) {
	/*
	 * Assume dos/windows displays usually on remote terminal, hence it
	 * rarely matches locale.  (In fact, MS Windows codepoints locale are
	 * never seen on UNIX).
	 */
	match = FALSE;
    } else {
	match = TRUE;		/* guess, but see below */

#if !defined(LOCALE)
	if (LYCharSet_UC[i].enc != UCT_ENC_UTF8)
	    /*
	     * Leave true for utf-8 display - the code doesn't deal very well
	     * with this case.  - kw
	     */
	    match = FALSE;
#else
	if (UCForce8bitTOUPPER) {
	    /*
	     * Force disable locale (from lynx.cfg)
	     */
	    match = FALSE;
	}
#endif
    }

    DisplayCharsetMatchLocale = match;
    return;
}

/*
 * lynx 2.8/2.7.2(and more early) compatibility code:  "human-readable" charset
 * names changes with time so we map that history names to MIME here to get old
 * lynx.cfg and (especially) .lynxrc always recognized.  Please update this
 * table when you change "fullname" of any present charset.
 */
typedef struct _names_pairs {
    const char *fullname;
    const char *MIMEname;
} names_pairs;
/* *INDENT-OFF* */
static const names_pairs OLD_charset_names[] =
{
    {"ISO Latin 1",		"iso-8859-1"},
    {"ISO Latin 2",             "iso-8859-2"},
    {"WinLatin1 (cp1252)",      "windows-1252"},
    {"DEC Multinational",       "dec-mcs"},
    {"Macintosh (8 bit)",       "macintosh"},
    {"NeXT character set",      "next"},
    {"KOI8-R Cyrillic",         "koi8-r"},
    {"Chinese",                 "euc-cn"},
    {"Japanese (EUC)",          "euc-jp"},
    {"Japanese (SJIS)",         "shift_jis"},
    {"Korean",                  "euc-kr"},
    {"Taipei (Big5)",           "big5"},
    {"Vietnamese (VISCII)",     "viscii"},
    {"7 bit approximations",    "us-ascii"},
    {"Transparent",             "x-transparent"},
    {"DosLatinUS (cp437)",      "cp437"},
    {"IBM PC character set",    "cp437"},
    {"DosLatin1 (cp850)",       "cp850"},
    {"IBM PC codepage 850",     "cp850"},
    {"DosLatin2 (cp852)",       "cp852"},
    {"PC Latin2 CP 852",        "cp852"},
    {"DosCyrillic (cp866)",     "cp866"},
    {"DosArabic (cp864)",       "cp864"},
    {"DosGreek (cp737)",        "cp737"},
    {"DosBaltRim (cp775)",      "cp775"},
    {"DosGreek2 (cp869)",       "cp869"},
    {"DosHebrew (cp862)",       "cp862"},
    {"WinLatin2 (cp1250)",      "windows-1250"},
    {"WinCyrillic (cp1251)",    "windows-1251"},
    {"WinGreek (cp1253)",       "windows-1253"},
    {"WinHebrew (cp1255)",      "windows-1255"},
    {"WinArabic (cp1256)",      "windows-1256"},
    {"WinBaltRim (cp1257)",     "windows-1257"},
    {"ISO Latin 3",             "iso-8859-3"},
    {"ISO Latin 4",             "iso-8859-4"},
    {"ISO 8859-5 Cyrillic",     "iso-8859-5"},
    {"ISO 8859-6 Arabic",       "iso-8859-6"},
    {"ISO 8859-7 Greek",        "iso-8859-7"},
    {"ISO 8859-8 Hebrew",       "iso-8859-8"},
    {"ISO-8859-8-I",            "iso-8859-8"},
    {"ISO-8859-8-E",            "iso-8859-8"},
    {"ISO 8859-9 (Latin 5)",    "iso-8859-9"},
    {"ISO 8859-10",             "iso-8859-10"},
    {"UNICODE UTF 8",           "utf-8"},
    {"RFC 1345 w/o Intro",      "mnemonic+ascii+0"},
    {"RFC 1345 Mnemonic",       "mnemonic"},
    {NULL, NULL},		/* terminated with NULL */
};
/* *INDENT-ON* */

/*
 * lynx 2.8/2.7.2 compatibility code:  read "character_set" parameter from
 * lynx.cfg and .lynxrc in both MIME name and "human-readable" name (old and
 * new style).  Returns -1 if not recognized.
 */
int UCGetLYhndl_byAnyName(char *value)
{
    int i;

    if (value == NULL)
	return -1;

    LYTrimTrailing(value);
    CTRACE((tfp, "UCGetLYhndl_byAnyName(%s)\n", value));

    /* search by name */
    for (i = 0; (i < MAXCHARSETS && LYchar_set_names[i]); i++) {
	if (!strcmp(value, LYchar_set_names[i])) {
	    return i;		/* OK */
	}
    }

    /* search by old name from 2.8/2.7.2 version */
    for (i = 0; (OLD_charset_names[i].fullname); i++) {
	if (!strcmp(value, OLD_charset_names[i].fullname)) {
	    return UCGetLYhndl_byMIME(OLD_charset_names[i].MIMEname);	/* OK */
	}
    }

    return UCGetLYhndl_byMIME(value);	/* by MIME */
}

/*
 * Entity names -- Ordered by ISO Latin 1 value.
 * ---------------------------------------------
 * For conversions of DECIMAL escaped entities.
 * Must be in order of ascending value.
 */
static const char *LYEntityNames[] =
{
/*	 NAME		   DECIMAL VALUE */
    "nbsp",			/* 160, non breaking space */
    "iexcl",			/* 161, inverted exclamation mark */
    "cent",			/* 162, cent sign */
    "pound",			/* 163, pound sign */
    "curren",			/* 164, currency sign */
    "yen",			/* 165, yen sign */
    "brvbar",			/* 166, broken vertical bar, (brkbar) */
    "sect",			/* 167, section sign */
    "uml",			/* 168, spacing dieresis */
    "copy",			/* 169, copyright sign */
    "ordf",			/* 170, feminine ordinal indicator */
    "laquo",			/* 171, angle quotation mark, left */
    "not",			/* 172, negation sign */
    "shy",			/* 173, soft hyphen */
    "reg",			/* 174, circled R registered sign */
    "hibar",			/* 175, spacing macron */
    "deg",			/* 176, degree sign */
    "plusmn",			/* 177, plus-or-minus sign */
    "sup2",			/* 178, superscript 2 */
    "sup3",			/* 179, superscript 3 */
    "acute",			/* 180, spacing acute (96) */
    "micro",			/* 181, micro sign */
    "para",			/* 182, paragraph sign */
    "middot",			/* 183, middle dot */
    "cedil",			/* 184, spacing cedilla */
    "sup1",			/* 185, superscript 1 */
    "ordm",			/* 186, masculine ordinal indicator */
    "raquo",			/* 187, angle quotation mark, right */
    "frac14",			/* 188, fraction 1/4 */
    "frac12",			/* 189, fraction 1/2 */
    "frac34",			/* 190, fraction 3/4 */
    "iquest",			/* 191, inverted question mark */
    "Agrave",			/* 192, capital A, grave accent */
    "Aacute",			/* 193, capital A, acute accent */
    "Acirc",			/* 194, capital A, circumflex accent */
    "Atilde",			/* 195, capital A, tilde */
    "Auml",			/* 196, capital A, dieresis or umlaut mark */
    "Aring",			/* 197, capital A, ring */
    "AElig",			/* 198, capital AE diphthong (ligature) */
    "Ccedil",			/* 199, capital C, cedilla */
    "Egrave",			/* 200, capital E, grave accent */
    "Eacute",			/* 201, capital E, acute accent */
    "Ecirc",			/* 202, capital E, circumflex accent */
    "Euml",			/* 203, capital E, dieresis or umlaut mark */
    "Igrave",			/* 204, capital I, grave accent */
    "Iacute",			/* 205, capital I, acute accent */
    "Icirc",			/* 206, capital I, circumflex accent */
    "Iuml",			/* 207, capital I, dieresis or umlaut mark */
    "ETH",			/* 208, capital Eth, Icelandic (or Latin2 Dstrok) */
    "Ntilde",			/* 209, capital N, tilde */
    "Ograve",			/* 210, capital O, grave accent */
    "Oacute",			/* 211, capital O, acute accent */
    "Ocirc",			/* 212, capital O, circumflex accent */
    "Otilde",			/* 213, capital O, tilde */
    "Ouml",			/* 214, capital O, dieresis or umlaut mark */
    "times",			/* 215, multiplication sign */
    "Oslash",			/* 216, capital O, slash */
    "Ugrave",			/* 217, capital U, grave accent */
    "Uacute",			/* 218, capital U, acute accent */
    "Ucirc",			/* 219, capital U, circumflex accent */
    "Uuml",			/* 220, capital U, dieresis or umlaut mark */
    "Yacute",			/* 221, capital Y, acute accent */
    "THORN",			/* 222, capital THORN, Icelandic */
    "szlig",			/* 223, small sharp s, German (sz ligature) */
    "agrave",			/* 224, small a, grave accent */
    "aacute",			/* 225, small a, acute accent */
    "acirc",			/* 226, small a, circumflex accent */
    "atilde",			/* 227, small a, tilde */
    "auml",			/* 228, small a, dieresis or umlaut mark */
    "aring",			/* 229, small a, ring */
    "aelig",			/* 230, small ae diphthong (ligature) */
    "ccedil",			/* 231, small c, cedilla */
    "egrave",			/* 232, small e, grave accent */
    "eacute",			/* 233, small e, acute accent */
    "ecirc",			/* 234, small e, circumflex accent */
    "euml",			/* 235, small e, dieresis or umlaut mark */
    "igrave",			/* 236, small i, grave accent */
    "iacute",			/* 237, small i, acute accent */
    "icirc",			/* 238, small i, circumflex accent */
    "iuml",			/* 239, small i, dieresis or umlaut mark */
    "eth",			/* 240, small eth, Icelandic */
    "ntilde",			/* 241, small n, tilde */
    "ograve",			/* 242, small o, grave accent */
    "oacute",			/* 243, small o, acute accent */
    "ocirc",			/* 244, small o, circumflex accent */
    "otilde",			/* 245, small o, tilde */
    "ouml",			/* 246, small o, dieresis or umlaut mark */
    "divide",			/* 247, division sign */
    "oslash",			/* 248, small o, slash */
    "ugrave",			/* 249, small u, grave accent */
    "uacute",			/* 250, small u, acute accent */
    "ucirc",			/* 251, small u, circumflex accent */
    "uuml",			/* 252, small u, dieresis or umlaut mark */
    "yacute",			/* 253, small y, acute accent */
    "thorn",			/* 254, small thorn, Icelandic */
    "yuml",			/* 255, small y, dieresis or umlaut mark */
};

/*
 * Function to return the entity names of ISO-8859-1 8-bit characters.  - FM
 */
const char *HTMLGetEntityName(UCode_t code)
{
#define IntValue code
    int MaxValue = (TABLESIZE(LYEntityNames) - 1);

    if (IntValue < 0 || IntValue > MaxValue) {
	return "";
    }

    return LYEntityNames[IntValue];
}

/*
 * Function to return the UCode_t (long int) value for entity names.  It
 * returns 0 if not found.
 *
 * unicode_entities[] handles all the names from old style entities[] too. 
 * Lynx now calls unicode_entities[] only through this function: 
 * HTMLGetEntityUCValue().  Note, we need not check for special characters here
 * in function or even before it, we should check them *after* invoking this
 * function, see put_special_unicodes() in SGML.c.
 *
 * In the future we will try to isolate all calls to entities[] in favor of new
 * unicode-based chartrans scheme.  - LP
 */
UCode_t HTMLGetEntityUCValue(const char *name)
{
#include <entities.h>

    UCode_t value = 0;
    size_t i, high, low;
    int diff = 0;
    size_t number_of_unicode_entities = TABLESIZE(unicode_entities);

    /*
     * Make sure we have a non-zero length name.  - FM
     */
    if (isEmpty(name))
	return (value);

    /*
     * Try UC_entity_info unicode_entities[].
     */
    for (low = 0, high = number_of_unicode_entities;
	 high > low;
	 diff < 0 ? (low = i + 1) : (high = i)) {
	/*
	 * Binary search.
	 */
	i = (low + (high - low) / 2);
	diff = AS_cmp(unicode_entities[i].name, name);	/* Case sensitive! */
	if (diff == 0) {
	    value = unicode_entities[i].code;
	    break;
	}
    }
    return (value);
}

/*
 * Original comment -
 * Assume these are Microsoft code points, inflicted on us by FrontPage.  - FM
 *
 * MS FrontPage uses syntax like &#153; in 128-159 range and doesn't follow
 * Unicode standards for this area.  Windows-1252 codepoints are assumed here.
 *
 * However see -
 * http://www.whatwg.org/specs/web-apps/current-work/multipage/infrastructure.html#character-encodings-0
 */
UCode_t LYcp1252ToUnicode(UCode_t code)
{
    if ((code == 1) ||
	(code > 127 && code < 160)) {
	switch (code) {
	case 1:
	    /*
	     * WHITE SMILING FACE
	     */
	    code = 0x263a;
	    break;
	case 128:
	    /*
	     * EURO currency sign
	     */
	    code = 0x20ac;
	    break;
	case 130:
	    /*
	     * SINGLE LOW-9 QUOTATION MARK (sbquo)
	     */
	    code = 0x201a;
	    break;
	case 131:
	    /*
	     * LATIN SMALL LETTER F WITH HOOK
	     */
	    code = 0x192;
	    break;
	case 132:
	    /*
	     * DOUBLE LOW-9 QUOTATION MARK (bdquo)
	     */
	    code = 0x201e;
	    break;
	case 133:
	    /*
	     * HORIZONTAL ELLIPSIS (hellip)
	     */
	    code = 0x2026;
	    break;
	case 134:
	    /*
	     * DAGGER (dagger)
	     */
	    code = 0x2020;
	    break;
	case 135:
	    /*
	     * DOUBLE DAGGER (Dagger)
	     */
	    code = 0x2021;
	    break;
	case 136:
	    /*
	     * MODIFIER LETTER CIRCUMFLEX ACCENT
	     */
	    code = 0x2c6;
	    break;
	case 137:
	    /*
	     * PER MILLE SIGN (permil)
	     */
	    code = 0x2030;
	    break;
	case 138:
	    /*
	     * LATIN CAPITAL LETTER S WITH CARON
	     */
	    code = 0x160;
	    break;
	case 139:
	    /*
	     * SINGLE LEFT-POINTING ANGLE QUOTATION MARK (lsaquo)
	     */
	    code = 0x2039;
	    break;
	case 140:
	    /*
	     * LATIN CAPITAL LIGATURE OE
	     */
	    code = 0x152;
	    break;
	case 142:
	    /*
	     * LATIN CAPITAL LETTER Z WITH CARON
	     */
	    code = 0x17d;
	    break;
	case 145:
	    /*
	     * LEFT SINGLE QUOTATION MARK (lsquo)
	     */
	    code = 0x2018;
	    break;
	case 146:
	    /*
	     * RIGHT SINGLE QUOTATION MARK (rsquo)
	     */
	    code = 0x2019;
	    break;
	case 147:
	    /*
	     * LEFT DOUBLE QUOTATION MARK (ldquo)
	     */
	    code = 0x201c;
	    break;
	case 148:
	    /*
	     * RIGHT DOUBLE QUOTATION MARK (rdquo)
	     */
	    code = 0x201d;
	    break;
	case 149:
	    /*
	     * BULLET (bull)
	     */
	    code = 0x2022;
	    break;
	case 150:
	    /*
	     * EN DASH (ndash)
	     */
	    code = 0x2013;
	    break;
	case 151:
	    /*
	     * EM DASH (mdash)
	     */
	    code = 0x2014;
	    break;
	case 152:
	    /*
	     * SMALL TILDE (tilde)
	     */
	    code = 0x02dc;
	    break;
	case 153:
	    /*
	     * TRADE MARK SIGN (trade)
	     */
	    code = 0x2122;
	    break;
	case 154:
	    /*
	     * LATIN SMALL LETTER S WITH CARON
	     */
	    code = 0x161;
	    break;
	case 155:
	    /*
	     * SINGLE RIGHT-POINTING ANGLE QUOTATION MARK (rsaquo)
	     */
	    code = 0x203a;
	    break;
	case 156:
	    /*
	     * LATIN SMALL LIGATURE OE
	     */
	    code = 0x153;
	    break;
	case 158:
	    /*
	     * LATIN SMALL LETTER Z WITH CARON
	     */
	    code = 0x17e;
	    break;
	case 159:
	    /*
	     * LATIN CAPITAL LETTER Y WITH DIAERESIS
	     */
	    code = 0x178;
	    break;
	default:
	    /*
	     * Undefined (by convention, use the replacement character).
	     */
	    code = 0xfffd;
	    break;
	}
    }
    return code;
}

/*
 * Function to select a character set and then set the character handling and
 * LYHaveCJKCharacterSet flag.  - FM
 */
void HTMLUseCharacterSet(int i)
{
    HTMLSetRawModeDefault(i);
    p_entity_values = LYCharSets[i];
    HTMLSetCharacterHandling(i);	/* set LYRawMode and CJK attributes */
    HTMLSetHaveCJKCharacterSet(i);
    HTMLSetDisplayCharsetMatchLocale(i);
    return;
}

/*
 * Initializer, calls initialization function for the CHARTRANS handling.  - KW
 */
int LYCharSetsDeclared(void)
{
    UCInit();

    return UCInitialized;
}

#ifdef USE_CHARSET_CHOICE
void init_charset_subsets(void)
{
    int i, n;
    int cur_display = 0;
    int cur_assumed = 0;

    /* add them to displayed values */
    charset_subsets[UCLYhndl_for_unspec].hide_assumed = FALSE;
    charset_subsets[current_char_set].hide_display = FALSE;

#ifndef ALL_CHARSETS_IN_O_MENU_SCREEN
    /*all this stuff is for supporting old menu screen... */
    for (i = 0; i < LYNumCharsets; ++i) {
	if (charset_subsets[i].hide_display == FALSE) {
	    n = cur_display++;
	    if (i == current_char_set)
		displayed_display_charset_idx = n;
	    display_charset_map[n] = i;
	    display_charset_choices[n] = LYchar_set_names[i];
	}
	if (charset_subsets[i].hide_assumed == FALSE) {
	    n = cur_assumed++;
	    assumed_doc_charset_map[n] = i;
	    assumed_charset_choices[n] = LYCharSet_UC[i].MIMEname;
	    charset_subsets[i].assumed_idx = n;
	}
	display_charset_choices[cur_display] = NULL;
	assumed_charset_choices[cur_assumed] = NULL;
    }
#endif
}
#endif /* USE_CHARSET_CHOICE */
@


1.8
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.7
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYCharSets.c,v 1.63 2009/05/25 17:57:41 tom Exp $
d27 1
a27 1
const char **p_entity_values = NULL;	/* Pointer, for HTML_put_entity() */
d31 1
a31 1
#ifdef EXP_CHARSET_CHOICE
d44 1
a44 1
#endif /* EXP_CHARSET_CHOICE */
d345 1
a345 1
const char **LYCharSets[MAXCHARSETS] =
d497 1
a497 1
    ena_csi((BOOLEAN) (LYlowest_eightbit[current_char_set] > 155));
d568 1
a568 1
			      BOOLEAN modeflag)
d575 1
a575 1
	    LYUseDefaultRawMode = modeflag;
d579 1
a579 1
	LYUseDefaultRawMode = modeflag;
a714 1
    LYTrimTrailing(value);
d718 1
d1125 1
a1125 1
#ifdef EXP_CHARSET_CHOICE
d1157 1
a1157 1
#endif /* EXP_CHARSET_CHOICE */
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d422 2
a423 3
	HTPassEightBitNum = (BOOL) (
				       ((LYCharSet_UC[i].codepoints & UCT_CP_SUPERSETOF_LAT1)
					|| (LYCharSet_UC[i].like8859 & UCT_R_HIGH8BIT)));
d461 1
a461 1
	LYRawMode = (BOOL) ((HTCJK != NOCJK) ? TRUE : FALSE);
d464 1
a464 1
	HTPassHighCtrlRaw = (BOOL) ((HTCJK != NOCJK) ? TRUE : FALSE);
d905 194
@


1.5
log
@add support for iso8859-13
@
text
@d16 10
a25 8
PUBLIC HTkcode kanji_code = NOKANJI;
PUBLIC BOOLEAN LYHaveCJKCharacterSet = FALSE;
PUBLIC BOOLEAN DisplayCharsetMatchLocale = TRUE;
PUBLIC BOOL force_old_UCLYhndl_on_reload = FALSE;
PUBLIC int forced_UCLYhdnl;
PUBLIC int LYNumCharsets = 0;  /* Will be initialized later by UC_Register. */
PUBLIC int current_char_set = -1; /* will be intitialized later in LYMain.c */
PUBLIC CONST char** p_entity_values = NULL; /* Pointer, for HTML_put_entity()*/
d29 4
a32 3
PUBLIC charset_subset_t charset_subsets[MAXCHARSETS];
PUBLIC BOOL custom_display_charset = FALSE;
PUBLIC BOOL custom_assumed_doc_charset = FALSE;
d34 2
a35 2
PUBLIC int display_charset_map[MAXCHARSETS];
PUBLIC int assumed_doc_charset_map[MAXCHARSETS];
d37 3
a39 3
PUBLIC CONST char* display_charset_choices[MAXCHARSETS+1];
PUBLIC CONST char* assumed_charset_choices[MAXCHARSETS+1];
PUBLIC int displayed_display_charset_idx;
d44 5
a48 1
 *  New character sets now declared with UCInit() in UCdomap.c
d50 4
a53 2
 *  INSTRUCTIONS for adding new character sets which do not have
 *		 Unicode tables now in UCdomap.h
d55 2
d58 9
a66 18
 *  [We hope you need not correct/add old-style mapping below
 *  as in ISO_LATIN1[] or SevenBitApproximations[] any more -
 *  it works now via new chartrans mechanism, but kept for compatibility only:
 *  we should cleanup the stuff, but this is not so easy...]
 *
 *  Currently we only declare some charset's properties here
 *  (such as MIME names, etc.), it does not include real mapping.
 *
 *  There is a place marked "Add your new character sets HERE" in this file.
 *  Make up a character set and add it in the same
 *  style as the ISO_LATIN1 set below, giving it a unique name.
 *
 *  Add the name of the set to LYCharSets.
 *  Similarly add the appropriate information to the tables below:
 *  LYchar_set_names, LYCharSet_UC, LYlowest_eightbit.
 *  These 4 tables all MUST have the same order.
 *  (And this is the order you will see in Lynx Options Menu,
 *  which is why few unicode-based charsets are listed here).
d71 117
a187 116
**
**	This MUST match exactly the table referred to in the DTD!
*/
PRIVATE CONST char * ISO_Latin1[] = {
	"\306", /* capital AE diphthong (ligature) (&#198;) - AElig */
	"\301", /* capital A, acute accent (&#193;) - Aacute */
	"\302", /* capital A, circumflex accent (&#194;) - Acirc */
	"\300", /* capital A, grave accent (&#192;) - Agrave */
	"\305", /* capital A, ring - Aring (&#197;) */
	"\303", /* capital A, tilde - Atilde (&#195;) */
	"\304", /* capital A, dieresis or umlaut mark (&#196;) - Auml */
	"\307", /* capital C, cedilla - Ccedil (&#199;) */
	"\320", /* capital Eth or D with stroke (&#208;) - Dstrok */
	"\320", /* capital Eth, Icelandic (&#208;) - ETH */
	"\311", /* capital E, acute accent (&#201;) - Eacute */
	"\312", /* capital E, circumflex accent (&#202;) - Ecirc */
	"\310", /* capital E, grave accent (&#200;) - Egrave */
	"\313", /* capital E, dieresis or umlaut mark (&#203;) - Euml */
	"\315", /* capital I, acute accent (&#205;) - Iacute */
	"\316", /* capital I, circumflex accent (&#206;) - Icirc */
	"\314", /* capital I, grave accent (&#204;) - Igrave */
	"\317", /* capital I, dieresis or umlaut mark (&#207;) - Iuml */
	"\321", /* capital N, tilde (&#209;) - Ntilde */
	"\323", /* capital O, acute accent (&#211;) - Oacute */
	"\324", /* capital O, circumflex accent (&#212;) - Ocirc */
	"\322", /* capital O, grave accent (&#210;) - Ograve */
	"\330", /* capital O, slash (&#216;) - Oslash */
	"\325", /* capital O, tilde (&#213;) - Otilde */
	"\326", /* capital O, dieresis or umlaut mark (&#214;) - Ouml */
	"\336", /* capital THORN, Icelandic (&#222;) - THORN */
	"\332", /* capital U, acute accent (&#218;) - Uacute */
	"\333", /* capital U, circumflex accent (&#219;) - Ucirc */
	"\331", /* capital U, grave accent (&#217;) - Ugrave */
	"\334", /* capital U, dieresis or umlaut mark (&#220;) - Uuml */
	"\335", /* capital Y, acute accent (&#221;) - Yacute */
	"\341", /* small a, acute accent (&#225;) - aacute */
	"\342", /* small a, circumflex accent (&#226;) - acirc */
	"\264", /* spacing acute (&#180;) - acute */
	"\346", /* small ae diphthong (ligature) (&#230;) - aelig */
	"\340", /* small a, grave accent (&#224;) - agrave */
	"\046", /* ampersand (&#38;) - amp */
	"\345", /* small a, ring (&#229;) - aring */
	"\343", /* small a, tilde (&#227;) - atilde */
	"\344", /* small a, dieresis or umlaut mark (&#228;) - auml */
	"\246", /* broken vertical bar (&#166;) - brkbar */
	"\246", /* broken vertical bar (&#166;) - brvbar */
	"\347", /* small c, cedilla (&#231;) - ccedil */
	"\270", /* spacing cedilla (&#184;) - cedil */
	"\242", /* cent sign (&#162;) - cent */
	"\251", /* copyright sign (&#169;) - copy */
	"\244", /* currency sign (&#164;) - curren */
	"\260", /* degree sign (&#176;) - deg */
	"\250", /* spacing dieresis (&#168;) - die */
	"\367", /* division sign (&#247;) - divide */
	"\351", /* small e, acute accent (&#233;) - eacute */
	"\352", /* small e, circumflex accent (&#234;) - ecirc */
	"\350", /* small e, grave accent (&#232;) - egrave */
	"-",	/* dash the width of emsp - emdash */
	"\002", /* emsp, em space - not collapsed NEVER CHANGE THIS - emsp */
	"-",	/* dash the width of ensp - endash */
	"\002", /* ensp, en space - not collapsed NEVER CHANGE THIS - ensp */
	"\360", /* small eth, Icelandic (&#240;) - eth */
	"\353", /* small e, dieresis or umlaut mark (&#235;) - euml */
	"\275", /* fraction 1/2 (&#189;) - frac12 */
	"\274", /* fraction 1/4 (&#188;) - frac14 */
	"\276", /* fraction 3/4 (&#190;) - frac34 */
	"\076", /* greater than (&#62;) - gt */
	"\257", /* spacing macron (&#175;) - hibar */
	"\355", /* small i, acute accent (&#237;) - iacute */
	"\356", /* small i, circumflex accent (&#238;) - icirc */
	"\241", /* inverted exclamation mark (&#161;) - iexcl */
	"\354", /* small i, grave accent (&#236;) - igrave */
	"\277", /* inverted question mark (&#191;) - iquest */
	"\357", /* small i, dieresis or umlaut mark (&#239;) - iuml */
	"\253", /* angle quotation mark, left (&#171;) - laquo */
	"\074", /* less than (&#60;) - lt */
	"\257", /* spacing macron (&#175;) - macr */
	"-",	/* dash the width of emsp - mdash */
	"\265", /* micro sign (&#181;) - micro */
	"\267", /* middle dot (&#183;) - middot */
	"\001", /* nbsp non-breaking space NEVER CHANGE THIS - nbsp */
	"-",	/* dash the width of ensp - ndash */
	"\254", /* negation sign (&#172;) - not */
	"\361", /* small n, tilde (&#241;) - ntilde */
	"\363", /* small o, acute accent (&#243;) - oacute */
	"\364", /* small o, circumflex accent (&#244;) - ocirc */
	"\362", /* small o, grave accent (&#242;) - ograve */
	"\252", /* feminine ordinal indicator (&#170;) - ordf */
	"\272", /* masculine ordinal indicator (&#186;) - ordm */
	"\370", /* small o, slash (&#248;) - oslash */
	"\365", /* small o, tilde (&#245;) - otilde */
	"\366", /* small o, dieresis or umlaut mark (&#246;) - ouml */
	"\266", /* paragraph sign (&#182;) - para */
	"\261", /* plus-or-minus sign (&#177;) - plusmn */
	"\243", /* pound sign (&#163;) - pound */
	"\042", /* quote '"' (&#34;) - quot */
	"\273", /* angle quotation mark, right (&#187;) - raquo */
	"\256", /* circled R registered sign (&#174;) - reg */
	"\247", /* section sign (&#167;) - sect */
	"\007", /* soft hyphen (&#173;) NEVER CHANGE THIS - shy */
	"\271", /* superscript 1 (&#185;) - sup1 */
	"\262", /* superscript 2 (&#178;) - sup2 */
	"\263", /* superscript 3 (&#179;) - sup3 */
	"\337", /* small sharp s, German (sz ligature) (&#223;) - szlig */
	"\002", /* thin space - not collapsed NEVER CHANGE THIS - thinsp */
	"\376", /* small thorn, Icelandic (&#254;) - thorn */
	"\327", /* multiplication sign (&#215;) - times */
	"(TM)", /* circled TM trade mark sign (&#8482;) - trade */
	"\372", /* small u, acute accent (&#250;) - uacute */
	"\373", /* small u, circumflex accent (&#251;) - ucirc */
	"\371", /* small u, grave accent (&#249;) - ugrave */
	"\250", /* spacing dieresis (&#168;) - uml */
	"\374", /* small u, dieresis or umlaut mark (&#252;) - uuml */
	"\375", /* small y, acute accent (&#253;) - yacute */
	"\245", /* yen sign (&#165;) - yen */
	"\377", /* small y, dieresis or umlaut mark (&#255;) - yuml */
d191 11
a201 10
**
**	This MUST match exactly the table referred to in the DTD!
*/
PUBLIC CONST char * SevenBitApproximations[] = {
	"AE",	/* capital AE diphthong (ligature) (&#198;) - AElig */
	"A",	/* capital A, acute accent (&#193;) - Aacute */
	"A",	/* capital A, circumflex accent (&#194;) - Acirc */
	"A",	/* capital A, grave accent (&#192;) - Agrave */
	"A",	/* capital A, ring - Aring (&#197;) */
	"A",	/* capital A, tilde - Atilde (&#195;) */
d203 1
a203 1
	"Ae",	/* capital A, dieresis or umlaut mark (&#196;) - Auml*/
d205 19
a223 19
	"A",	/* capital A, dieresis or umlaut mark (&#196;) - Auml*/
#endif /* LY_UMLAUT */
	"C",	/* capital C, cedilla (&#199;) - Ccedil */
	"Dj",	/* capital D with stroke (&#208;) - Dstrok */
	"DH",	/* capital Eth, Icelandic (&#208;) - ETH */
	"E",	/* capital E, acute accent (&#201;) - Eacute */
	"E",	/* capital E, circumflex accent (&#202;) - Ecirc */
	"E",	/* capital E, grave accent (&#200;) - Egrave */
	"E",	/* capital E, dieresis or umlaut mark (&#203;) - Euml */
	"I",	/* capital I, acute accent (&#205;) - Iacute */
	"I",	/* capital I, circumflex accent (&#206;) - Icirc */
	"I",	/* capital I, grave accent (&#204;) - Igrave */
	"I",	/* capital I, dieresis or umlaut mark (&#207;) - Iuml */
	"N",	/* capital N, tilde - Ntilde (&#209;) */
	"O",	/* capital O, acute accent (&#211;) - Oacute */
	"O",	/* capital O, circumflex accent (&#212;) - Ocirc */
	"O",	/* capital O, grave accent (&#210;) - Ograve */
	"O",	/* capital O, slash (&#216;) - Oslash */
	"O",	/* capital O, tilde (&#213;) - Otilde */
d225 1
a225 1
	"Oe",	/* capital O, dieresis or umlaut mark (&#214;) - Ouml */
d227 6
a232 6
	"O",	/* capital O, dieresis or umlaut mark (&#214;) - Ouml */
#endif /* LY_UMLAUT */
	"P",	/* capital THORN, Icelandic (&#222;) - THORN */
	"U",	/* capital U, acute accent (&#218;) - Uacute */
	"U",	/* capital U, circumflex accent (&#219;) - Ucirc */
	"U",	/* capital U, grave accent (&#217;) - Ugrave */
d234 1
a234 1
	"Ue",	/* capital U, dieresis or umlaut mark (&#220;) - Uuml */
d236 11
a246 11
	"U",	/* capital U, dieresis or umlaut mark (&#220;) - Uuml */
#endif /* LY_UMLAUT */
	"Y",	/* capital Y, acute accent (&#221;) - Yacute */
	"a",	/* small a, acute accent (&#225;) - aacute */
	"a",	/* small a, circumflex accent (&#226;) - acirc */
	"'",	/* spacing acute (&#180;) - acute */
	"ae",	/* small ae diphthong (ligature) (&#230;) - aelig */
	"`a",	/* small a, grave accent (&#232;) - agrave */
	"&",	/* ampersand (&#38;) - amp */
	"a",	/* small a, ring (&#229;) - aring */
	"a",	/* small a, tilde (&#227;) - atilde */
d248 1
a248 1
	"ae",	/* small a, dieresis or umlaut mark (&#228;) - auml */
d250 49
a298 49
	"a",	/* small a, dieresis or umlaut mark (&#228;) - auml */
#endif /* LY_UMLAUT */
	"|",	/* broken vertical bar (&#166;) - brkbar */
	"|",	/* broken vertical bar (&#166;) - brvbar */
	"c",	/* small c, cedilla (&#231;) - ccedil */
	",",	/* spacing cedilla (&#184;) - cedil */
	"-c-",	/* cent sign (&#162;) - cent */
	"(c)",	/* copyright sign (&#169;) - copy */
	"CUR",	/* currency sign (&#164;) - curren */
	"DEG",	/* degree sign (&#176;) - deg */
	"\042", /* spacing dieresis (&#168;) - die */
	"/",	/* division sign (&#247;) - divide */
	"e",	/* small e, acute accent (&#233;) - eacute */
	"e",	/* small e, circumflex accent (&#234;) - ecirc */
	"e",	/* small e, grave accent (&#232;) - egrave */
	"-",	/* dash the width of emsp - emdash */
	"\002", /* emsp NEVER CHANGE THIS - emsp */
	"-",	/* dash the width of ensp - endash */
	"\002", /* ensp NEVER CHANGE THIS - ensp */
	"dh",	/* small eth, Icelandic eth (&#240;) */
	"e",	/* small e, dieresis or umlaut mark (&#235;) - euml */
	" 1/2", /* fraction 1/2 (&#189;) - frac12 */
	" 1/4", /* fraction 1/4 (&#188;) - frac14 */
	" 3/4", /* fraction 3/4 (&#190;) - frac34 */
	">",	/* greater than (&#62;) - gt */
	"-",	/* spacing macron (&#175;) - hibar */
	"i",	/* small i, acute accent (&#237;) - iacute */
	"i",	/* small i, circumflex accent (&#238;) - icirc*/
	"!",	/* inverted exclamation mark (&#161;) - iexcl */
	"`i",	/* small i, grave accent (&#236;) - igrave */
	"?",	/* inverted question mark (&#191;) - iquest */
	"i",	/* small i, dieresis or umlaut mark (&#239;) - iuml */
	"<<",	/* angle quotation mark, left (&#171;) - laquo */
	"<",	/* less than - lt (&#60;) */
	"-",	/* spacing macron (&#175;) - macr */
	"-",	/* dash the width of emsp - mdash */
	"u",	/* micro sign (&#181;) - micro */
	".",	/* middle dot (&#183;) - middot */
	"\001", /* nbsp non-breaking space NEVER CHANGE THIS - nbsp */
	"-",	/* dash the width of ensp - ndash */
	"NOT",	/* negation sign (&#172;) - not */
	"n",	/* small n, tilde (&#241;) - ntilde */
	"o",	/* small o, acute accent (&#243;) - oacute */
	"o",	/* small o, circumflex accent (&#244;) - ocirc */
	"o",	/* small o, grave accent (&#242;) - ograve */
	"-a",	/* feminine ordinal indicator (&#170;) - ordf */
	"-o",	/* masculine ordinal indicator (&#186;) - ordm */
	"o",	/* small o, slash (&#248;) - oslash */
	"o",	/* small o, tilde (&#245;) - otilde */
d300 1
a300 1
	"oe",	/* small o, dieresis or umlaut mark (&#246;) - ouml */
d302 22
a323 22
	"o",	/* small o, dieresis or umlaut mark (&#246;) - ouml */
#endif /* LY_UMLAUT */
	"P:",	/* paragraph sign (&#182;) - para */
	"+-",	/* plus-or-minus sign (&#177;) - plusmn */
	"-L-",	/* pound sign (&#163;) - pound */
	"\"",	/* quote '"' (&#34;) - quot */
	">>",	/* angle quotation mark, right (&#187;) - raquo */
	"(R)",	/* circled R registered sign (&#174;) - reg */
	"S:",	/* section sign (&#167;) - sect */
	"\007", /* soft hyphen (&#173;) NEVER CHANGE THIS - shy */
	"^1",	/* superscript 1 (&#185;) - sup1 */
	"^2",	/* superscript 2 (&#178;) - sup2 */
	"^3",	/* superscript 3 (&#179;) - sup3 */
	"ss",	/* small sharp s, German (sz ligature) (&#223;) - szlig */
	"\002", /* thin space - not collapsed NEVER CHANGE THIS - thinsp */
	"p",	/* small thorn, Icelandic (&#254;) - thorn */
	"*",	/* multiplication sign (&#215;) - times */
	"(TM)", /* circled TM trade mark sign (&#8482;) - trade */
	"u",	/* small u, acute accent (&#250;) - uacute */
	"u",	/* small u, circumflex accent (&#251;) - ucirc */
	"u",	/* small u, grave accent (&#249;) - ugrave */
	"\042", /* spacing dieresis (&#168;) - uml */
d325 1
a325 1
	"ue",	/* small u, dieresis or umlaut mark (&#252;) - uuml */
d327 5
a331 5
	"u",	/* small u, dieresis or umlaut mark (&#252;) - uuml */
#endif /* LY_UMLAUT */
	"y",	/* small y, acute accent (&#253;) - yacute */
	"YEN",	/* yen sign (&#165;) - yen */
	"y",	/* small y, dieresis or umlaut mark (&#255;) - yuml */
d335 2
a336 2
 *  Add your new character sets HERE (but only if you
 *  can't construct Unicode tables for them). - FM
d340 1
a340 1
 *  Add the array name to LYCharSets
d342 4
a345 3
PUBLIC CONST char ** LYCharSets[MAXCHARSETS]={
	ISO_Latin1,		/* ISO Latin 1		*/
	SevenBitApproximations, /* 7 Bit Approximations */
d349 2
a350 2
 *  Add the name that the user will see below.
 *  The order of LYCharSets and LYchar_set_names MUST be the same
d352 5
a356 4
PUBLIC CONST char * LYchar_set_names[MAXCHARSETS + 1]={
	"Western (ISO-8859-1)",
	"7 bit approximations (US-ASCII)",
	(char *) 0
d360 5
a364 7
 *  Associate additional pieces of info with each of the charsets listed
 *  above.
 *  Will be automatically modified (and extended) by charset translations
 *  which are loaded using the chartrans mechanism.
 *  Most important piece of info to put here is a MIME charset name.
 *  Used for chartrans (see UCDefs.h).
 *  The order of LYCharSets and LYCharSet_UC MUST be the same.
d366 2
a367 2
 *  Note that most of the charsets added by the new mechanism in src/chrtrans
 *  don't show up here at all.  They don't have to.
d369 1
a369 1
PUBLIC LYUCcharset LYCharSet_UC[MAXCHARSETS]=
d372 1
a372 1
   *  Zero position placeholder and HTMLGetEntityUCValue() reference. - FM
d374 3
a376 3
  {-1,"iso-8859-1",    UCT_ENC_8BIT,0,
                       UCT_REP_IS_LAT1,
                       UCT_CP_IS_LAT1,         UCT_R_LAT1,UCT_R_LAT1},
d379 1
a379 1
   *  Placeholders for Unicode tables. - FM
d381 3
a383 3
  {-1,"us-ascii",      UCT_ENC_7BIT,0,
                       UCT_REP_SUBSETOF_LAT1,
                       UCT_CP_SUBSETOF_LAT1,   UCT_R_ASCII,UCT_R_ASCII},
d388 11
a398 10
 *  Add the code of the the lowest character with the high bit set
 *  that can be directly displayed.
 *  The order of LYCharSets and LYlowest_eightbit MUST be the same.
 *
 *  (If charset have chartrans unicode table,
 *  LYlowest_eightbit will be verified/modified anyway.)
 */
PUBLIC int LYlowest_eightbit[MAXCHARSETS]={
	160,	/* ISO Latin 1		*/
	999,	/* 7 bit approximations */
a400 1

d402 2
a403 2
 *  Function to set the handling of selected character sets
 *  based on the current LYUseDefaultRawMode value. - FM
d405 1
a405 1
PUBLIC void HTMLSetCharacterHandling ARGS1(int,i)
d420 2
a421 2
	    ((LYCharSet_UC[i].codepoints & UCT_CP_SUPERSETOF_LAT1) ||
		(LYCharSet_UC[i].like8859 & UCT_R_HIGH8BIT)));
d436 2
a437 2
    } else { /* CJK encoding: */
	CONST char *mime = LYCharSet_UC[i].MIMEname;
d458 1
a458 1
		HTCJK = NOCJK;
d467 4
a470 4
     *  Comment for coding below:
     *  UCLYhndl_for_unspec is "current" state with LYRawMode,
     *  but UCAssume_MIMEcharset is independent from LYRawMode:
     *  holds the history and may be changed from 'O'ptions menu only. - LP
d473 1
a473 1
	UCLYhndl_for_unspec = i;  /* UCAssume_MIMEcharset not changed! */
d478 1
a478 1
	    UCLYhndl_for_unspec = chndl;  /* fall to UCAssume_MIMEcharset */
d480 1
a480 1
	    UCLYhndl_for_unspec = LATIN1;  /* UCAssume_MIMEcharset not changed! */
d487 1
a487 1
	 *  Higher than this may output cntrl chars to screen. - KW
d495 1
a495 1
    ena_csi((BOOLEAN)(LYlowest_eightbit[current_char_set] > 155));
d500 4
a503 3
	    CTRACE((tfp, "HTMLSetCharacterHandling: LYRawMode changed %s -> %s\n",
			(LYRawMode_flag ? "ON" : "OFF"),
			(LYRawMode	? "ON" : "OFF")));
d505 4
a508 3
	    CTRACE((tfp, "HTMLSetCharacterHandling: UCLYhndl_for_unspec changed %d -> %d\n",
			UCLYhndl_for_unspec_flag,
			UCLYhndl_for_unspec));
d517 2
a518 3
PUBLIC void Set_HTCJK ARGS2(
	CONST char *,	inMIMEname,
	CONST char *,	outMIMEname)
d524 3
d549 2
a550 2
 *  Function to set the LYDefaultRawMode value
 *  based on the selected character set. - FM
d552 2
a553 2
 *  Currently unused: the default value so obvious
 *  that LYUseDefaultRawMode utilized directly by someone's mistake. - LP
d555 1
a555 1
PRIVATE void HTMLSetRawModeDefault ARGS1(int,i)
d562 5
a566 7
 *  Function to set the LYUseDefaultRawMode value
 *  based on the selected character set and the
 *  current LYRawMode value. - FM
 */
PUBLIC void HTMLSetUseDefaultRawMode ARGS2(
	int,		i,
	BOOLEAN,	modeflag)
d571 1
d576 2
a577 2
    } else /* CJK encoding: */
	    LYUseDefaultRawMode = modeflag;
d583 2
a584 2
 *  Function to set the LYHaveCJKCharacterSet value
 *  based on the selected character set. - FM
d586 1
a586 1
PRIVATE void HTMLSetHaveCJKCharacterSet ARGS1(int,i)
d593 3
a595 4
 *  Function to set the DisplayCharsetMatchLocale value
 *  based on the selected character set.
 *  It is used in UPPER8 for 8bit case-insensitive search
 *  by matching def7_uni.tbl images. - LP
d597 1
a597 1
PRIVATE void HTMLSetDisplayCharsetMatchLocale ARGS1(int,i)
d601 1
a601 1
    if  (LYHaveCJKCharacterSet) {
d603 4
a606 4
	** We have no intention to pass CJK via UCTransChar if that happened.
	** Let someone from CJK correct this if necessary.
	*/
	DisplayCharsetMatchLocale = TRUE; /* old-style */
d610 1
a610 1
		strncasecomp(LYCharSet_UC[i].MIMEname, "windows", 7)) {
d612 4
a615 4
	** Assume dos/windows displays usually on remote terminal, hence it
	** rarely matches locale.  (In fact, MS Windows codepoints locale are
	** never seen on UNIX).
	*/
d618 1
a618 1
	match = TRUE; /* guess, but see below */
d623 2
a624 2
	     *  Leave true for utf-8 display - the code doesn't deal
	     *  very well with this case. - kw
d630 2
a631 2
	    ** Force disable locale (from lynx.cfg)
	    */
a640 1

d642 4
a645 5
 *  lynx 2.8/2.7.2(and more early) compatibility code:
 *  "human-readable" charset names changes with time
 *  so we map that history names to MIME here
 *  to get old lynx.cfg and (especially) .lynxrc always recognized.
 *  Please update this table when you change "fullname" of any present charset.
d648 2
a649 2
    CONST char * fullname;
    CONST char * MIMEname;
d651 50
a700 50

PRIVATE CONST names_pairs OLD_charset_names[] = {
    {"ISO Latin 1",         "iso-8859-1"},
    {"ISO Latin 2",         "iso-8859-2"},
    {"WinLatin1 (cp1252)",  "windows-1252"},
    {"DEC Multinational",   "dec-mcs"},
    {"Macintosh (8 bit)",   "macintosh"},
    {"NeXT character set",  "next"},
    {"KOI8-R Cyrillic",     "koi8-r"},
    {"Chinese",             "euc-cn"},
    {"Japanese (EUC)",      "euc-jp"},
    {"Japanese (SJIS)",     "shift_jis"},
    {"Korean",              "euc-kr"},
    {"Taipei (Big5)",       "big5"},
    {"Vietnamese (VISCII)", "viscii"},
    {"7 bit approximations","us-ascii"},
    {"Transparent",         "x-transparent"},
    {"DosLatinUS (cp437)",  "cp437"},
    {"IBM PC character set","cp437"},
    {"DosLatin1 (cp850)",   "cp850"},
    {"IBM PC codepage 850", "cp850"},
    {"DosLatin2 (cp852)",   "cp852"},
    {"PC Latin2 CP 852",    "cp852"},
    {"DosCyrillic (cp866)", "cp866"},
    {"DosArabic (cp864)",   "cp864"},
    {"DosGreek (cp737)",    "cp737"},
    {"DosBaltRim (cp775)",  "cp775"},
    {"DosGreek2 (cp869)",   "cp869"},
    {"DosHebrew (cp862)",   "cp862"},
    {"WinLatin2 (cp1250)",  "windows-1250"},
    {"WinCyrillic (cp1251)","windows-1251"},
    {"WinGreek (cp1253)",   "windows-1253"},
    {"WinHebrew (cp1255)",  "windows-1255"},
    {"WinArabic (cp1256)",  "windows-1256"},
    {"WinBaltRim (cp1257)", "windows-1257"},
    {"ISO Latin 3",         "iso-8859-3"},
    {"ISO Latin 4",         "iso-8859-4"},
    {"ISO 8859-5 Cyrillic", "iso-8859-5"},
    {"ISO 8859-6 Arabic",   "iso-8859-6"},
    {"ISO 8859-7 Greek",    "iso-8859-7"},
    {"ISO 8859-8 Hebrew",   "iso-8859-8"},
    {"ISO-8859-8-I",        "iso-8859-8"},
    {"ISO-8859-8-E",        "iso-8859-8"},
    {"ISO 8859-9 (Latin 5)","iso-8859-9"},
    {"ISO 8859-10",         "iso-8859-10"},
    {"ISO 8859-13",         "iso-8859-13"},
    {"UNICODE UTF 8",       "utf-8"},
    {"RFC 1345 w/o Intro",  "mnemonic+ascii+0"},
    {"RFC 1345 Mnemonic",   "mnemonic"},
    {NULL,   NULL}, /* terminated with NULL */
d702 1
d705 3
a707 4
 *  lynx 2.8/2.7.2 compatibility code:
 *  read "character_set" parameter from lynx.cfg and .lynxrc
 *  in both MIME name and "human-readable" name (old and new style).
 *  Returns -1 if not recognized.
d709 1
a709 1
PUBLIC int UCGetLYhndl_byAnyName ARGS1 (char *, value)
d714 2
a715 1
    if (value == NULL) return -1;
d722 1
a722 1
	    return i;  /* OK */
d729 1
a729 1
	    return UCGetLYhndl_byMIME(OLD_charset_names[i].MIMEname); /* OK */
d733 1
a733 1
    return UCGetLYhndl_byMIME(value); /* by MIME */
a735 1

d737 4
a740 4
 *  Entity names -- Ordered by ISO Latin 1 value.
 *  ---------------------------------------------
 *   For conversions of DECIMAL escaped entities.
 *   Must be in order of ascending value.
d742 2
a743 1
PRIVATE CONST char * LYEntityNames[] = {
d745 96
a840 96
	"nbsp",		/* 160, non breaking space */
	"iexcl",	/* 161, inverted exclamation mark */
	"cent",		/* 162, cent sign */
	"pound",	/* 163, pound sign */
	"curren",	/* 164, currency sign */
	"yen",		/* 165, yen sign */
	"brvbar",	/* 166, broken vertical bar, (brkbar) */
	"sect",		/* 167, section sign */
	"uml",		/* 168, spacing dieresis */
	"copy",		/* 169, copyright sign */
	"ordf",		/* 170, feminine ordinal indicator */
	"laquo",	/* 171, angle quotation mark, left */
	"not",		/* 172, negation sign */
	"shy",		/* 173, soft hyphen */
	"reg",		/* 174, circled R registered sign */
	"hibar",	/* 175, spacing macron */
	"deg",		/* 176, degree sign */
	"plusmn",	/* 177, plus-or-minus sign */
	"sup2",		/* 178, superscript 2 */
	"sup3",		/* 179, superscript 3 */
	"acute",	/* 180, spacing acute (96) */
	"micro",	/* 181, micro sign */
	"para",		/* 182, paragraph sign */
	"middot",	/* 183, middle dot */
	"cedil",	/* 184, spacing cedilla */
	"sup1",		/* 185, superscript 1 */
	"ordm",		/* 186, masculine ordinal indicator */
	"raquo",	/* 187, angle quotation mark, right */
	"frac14",	/* 188, fraction 1/4 */
	"frac12",	/* 189, fraction 1/2 */
	"frac34",	/* 190, fraction 3/4 */
	"iquest",	/* 191, inverted question mark */
	"Agrave",	/* 192, capital A, grave accent */
	"Aacute",	/* 193, capital A, acute accent */
	"Acirc",	/* 194, capital A, circumflex accent */
	"Atilde",	/* 195, capital A, tilde */
	"Auml",		/* 196, capital A, dieresis or umlaut mark */
	"Aring",	/* 197, capital A, ring */
	"AElig",	/* 198, capital AE diphthong (ligature) */
	"Ccedil",	/* 199, capital C, cedilla */
	"Egrave",	/* 200, capital E, grave accent */
	"Eacute",	/* 201, capital E, acute accent */
	"Ecirc",	/* 202, capital E, circumflex accent */
	"Euml",		/* 203, capital E, dieresis or umlaut mark */
	"Igrave",	/* 204, capital I, grave accent */
	"Iacute",	/* 205, capital I, acute accent */
	"Icirc",	/* 206, capital I, circumflex accent */
	"Iuml",		/* 207, capital I, dieresis or umlaut mark */
	"ETH",		/* 208, capital Eth, Icelandic (or Latin2 Dstrok) */
	"Ntilde",	/* 209, capital N, tilde */
	"Ograve",	/* 210, capital O, grave accent */
	"Oacute",	/* 211, capital O, acute accent */
	"Ocirc",	/* 212, capital O, circumflex accent */
	"Otilde",	/* 213, capital O, tilde */
	"Ouml",		/* 214, capital O, dieresis or umlaut mark */
	"times",	/* 215, multiplication sign */
	"Oslash",	/* 216, capital O, slash */
	"Ugrave",	/* 217, capital U, grave accent */
	"Uacute",	/* 218, capital U, acute accent */
	"Ucirc",	/* 219, capital U, circumflex accent */
	"Uuml",		/* 220, capital U, dieresis or umlaut mark */
	"Yacute",	/* 221, capital Y, acute accent */
	"THORN",	/* 222, capital THORN, Icelandic */
	"szlig",	/* 223, small sharp s, German (sz ligature) */
	"agrave",	/* 224, small a, grave accent */
	"aacute",	/* 225, small a, acute accent */
	"acirc",	/* 226, small a, circumflex accent */
	"atilde",	/* 227, small a, tilde */
	"auml",		/* 228, small a, dieresis or umlaut mark */
	"aring",	/* 229, small a, ring */
	"aelig",	/* 230, small ae diphthong (ligature) */
	"ccedil",	/* 231, small c, cedilla */
	"egrave",	/* 232, small e, grave accent */
	"eacute",	/* 233, small e, acute accent */
	"ecirc",	/* 234, small e, circumflex accent */
	"euml",		/* 235, small e, dieresis or umlaut mark */
	"igrave",	/* 236, small i, grave accent */
	"iacute",	/* 237, small i, acute accent */
	"icirc",	/* 238, small i, circumflex accent */
	"iuml",		/* 239, small i, dieresis or umlaut mark */
	"eth",		/* 240, small eth, Icelandic */
	"ntilde",	/* 241, small n, tilde */
	"ograve",	/* 242, small o, grave accent */
	"oacute",	/* 243, small o, acute accent */
	"ocirc",	/* 244, small o, circumflex accent */
	"otilde",	/* 245, small o, tilde */
	"ouml",		/* 246, small o, dieresis or umlaut mark */
	"divide",	/* 247, division sign */
	"oslash",	/* 248, small o, slash */
	"ugrave",	/* 249, small u, grave accent */
	"uacute",	/* 250, small u, acute accent */
	"ucirc",	/* 251, small u, circumflex accent */
	"uuml",		/* 252, small u, dieresis or umlaut mark */
	"yacute",	/* 253, small y, acute accent */
	"thorn",	/* 254, small thorn, Icelandic */
	"yuml",		/* 255, small y, dieresis or umlaut mark */
d844 1
a844 2
 *  Function to return the entity names of
 *  ISO-8859-1 8-bit characters. - FM
d846 1
a846 2
PUBLIC CONST char * HTMLGetEntityName ARGS1(
	UCode_t,	code)
d859 2
a860 2
 *  Function to return the UCode_t (long int) value for entity names.
 *  It returns 0 if not found.
d862 5
a866 5
 *  unicode_entities[] handles all the names from old style entities[] too.
 *  Lynx now calls unicode_entities[] only through this function:
 *  HTMLGetEntityUCValue().  Note, we need not check for special characters
 *  here in function or even before it, we should check them *after*
 *  invoking this function, see put_special_unicodes() in SGML.c.
d868 2
a869 2
 *  In the future we will try to isolate all calls to entities[]
 *  in favor of new unicode-based chartrans scheme. - LP
d871 1
a871 2
PUBLIC UCode_t HTMLGetEntityUCValue ARGS1(
	CONST char *,	name)
d881 1
a881 1
     *	Make sure we have a non-zero length name. - FM
d883 2
a884 2
    if (!(name && *name))
	return(value);
d887 1
a887 1
     *	Try UC_entity_info unicode_entities[].
d891 1
a891 1
	 diff < 0 ? (low = i+1) : (high = i)) {
d893 3
a895 3
	**  Binary search.
	*/
	i = (low + (high-low)/2);
d902 1
a902 1
    return(value);
d906 2
a907 2
 *  Function to select a character set and then set the
 *  character handling and LYHaveCJKCharacterSet flag. - FM
d909 1
a909 1
PUBLIC void HTMLUseCharacterSet ARGS1(int, i)
d913 1
a913 1
    HTMLSetCharacterHandling(i);     /* set LYRawMode and CJK attributes */
d920 1
a920 2
 *  Initializer, calls initialization function for the
 *  CHARTRANS handling. - KW
d922 1
a922 1
PUBLIC int LYCharSetsDeclared NOARGS
d930 1
a930 1
PUBLIC void init_charset_subsets NOARGS
d932 1
a932 1
    int i,n;
d942 1
a942 1
    for (i = 0; i < LYNumCharsets; ++i){
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d692 1
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d7 1
a15 4
extern BOOL HTPassEightBitRaw;
extern BOOL HTPassEightBitNum;
extern BOOL HTPassHighCtrlRaw;
extern BOOL HTPassHighCtrlNum;
a20 2
extern void UCInit NOARGS;
extern int UCInitialized;
a380 2
/*  {-1,"iso-8859-15",   UCT_ENC_8BIT,0,0,0,     UCT_R_8BIT,UCT_R_ASCII}, */

d688 2
d711 2
d739 1
a739 1
	"nbsp", 	/* 160, non breaking space */
d741 1
a741 1
	"cent", 	/* 162, cent sign */
d746 1
a746 1
	"sect", 	/* 167, section sign */
d748 2
a749 2
	"copy", 	/* 169, copyright sign */
	"ordf", 	/* 170, feminine ordinal indicator */
d757 2
a758 2
	"sup2", 	/* 178, superscript 2 */
	"sup3", 	/* 179, superscript 3 */
d761 1
a761 1
	"para", 	/* 182, paragraph sign */
d764 2
a765 2
	"sup1", 	/* 185, superscript 1 */
	"ordm", 	/* 186, masculine ordinal indicator */
d775 1
a775 1
	"Auml", 	/* 196, capital A, dieresis or umlaut mark */
d782 1
a782 1
	"Euml", 	/* 203, capital E, dieresis or umlaut mark */
d786 1
a786 1
	"Iuml", 	/* 207, capital I, dieresis or umlaut mark */
d793 1
a793 1
	"Ouml", 	/* 214, capital O, dieresis or umlaut mark */
d799 1
a799 1
	"Uuml", 	/* 220, capital U, dieresis or umlaut mark */
d807 1
a807 1
	"auml", 	/* 228, small a, dieresis or umlaut mark */
d814 1
a814 1
	"euml", 	/* 235, small e, dieresis or umlaut mark */
d818 1
a818 1
	"iuml", 	/* 239, small i, dieresis or umlaut mark */
d825 1
a825 1
	"ouml", 	/* 246, small o, dieresis or umlaut mark */
d831 1
a831 1
	"uuml", 	/* 252, small u, dieresis or umlaut mark */
d834 1
a834 1
	"yuml", 	/* 255, small y, dieresis or umlaut mark */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@a8 1
#include <HTFont.h>
a18 1
extern HTCJKlang HTCJK;
d22 1
a22 1
PUBLIC BOOL force_old_UCLYhndl_on_reload;
d31 13
d420 1
a420 1
	    LYRawMode = (!LYUseDefaultRawMode);
d422 1
a422 1
	HTPassEightBitNum =
d424 1
a424 1
		(LYCharSet_UC[i].like8859 & UCT_R_HIGH8BIT));
d427 1
a427 1
	    HTPassEightBitRaw = (LYlowest_eightbit[i] <= 160);
d432 1
a432 1
	    HTPassHighCtrlRaw = (LYlowest_eightbit[i] <= 130);
d462 1
a462 1
	LYRawMode = (HTCJK != NOCJK) ? TRUE : FALSE;
d465 1
a465 1
	HTPassHighCtrlRaw = (HTCJK != NOCJK) ? TRUE : FALSE;
d498 1
a498 1
    ena_csi((LYlowest_eightbit[current_char_set] > 155));
d503 1
a503 1
	    CTRACE(tfp, "HTMLSetCharacterHandling: LYRawMode changed %s -> %s\n",
d505 1
a505 1
			(LYRawMode	? "ON" : "OFF"));
d507 1
a507 1
	    CTRACE(tfp, "HTMLSetCharacterHandling: UCLYhndl_for_unspec changed %d -> %d\n",
d509 1
a509 1
			UCLYhndl_for_unspec);
d556 1
a556 1
    LYDefaultRawMode = (LYCharSet_UC[i].enc == UCT_ENC_CJK);
d575 1
a575 1
	    LYUseDefaultRawMode = (!modeflag);
d588 1
a588 1
    LYHaveCJKCharacterSet = (LYCharSet_UC[i].enc == UCT_ENC_CJK);
d622 6
a627 1
	match = FALSE;
d848 1
a848 1
    int MaxValue = ((sizeof(LYEntityNames)/sizeof(char **)) - 1);
d878 1
a878 1
    size_t number_of_unicode_entities = sizeof(unicode_entities)/sizeof(unicode_entities[0]);
d923 1
a923 1
PUBLIC int LYCharSetsDeclared NOPARAMS
d929 34
@


1.1
log
@Initial revision
@
text
@d1 12
a12 14
#include "HTUtils.h"
#include "tcp.h"
#include "HTCJK.h"
#include "HTMLDTD.h"

#include "LYGlobalDefs.h"
#include "UCMap.h"
#include "UCDefs.h"
#include "LYCharSets.h"
#include "LYCharUtils.h"
#include "HTFont.h"
#include "GridText.h"
#include "LYCurses.h"
#include "LYStrings.h"
d14 1
a14 2
#include "LYexit.h"
#include "LYLeaks.h"
d23 3
d28 5
a32 1
PUBLIC int LYNumCharsets = 0; /* Will be initialized later by UC_Register. */
d35 2
d38 1
a38 1
 *		 Unicode tables.
a39 2
 *  Currently we only declare some charset's properties here
 *  (such as MIME names, etc.), it does not include real mapping.
d41 1
a41 1
 *  [We hope you need not correct/add old-style mapping
d46 3
d66 1
a66 1
PRIVATE char * ISO_Latin1[] = {
d83 1
a83 1
	"\314", /* capital I, grave accent (&#200;) - Igrave */
d185 1
a185 1
PUBLIC char * SevenBitApproximations[] = {
d332 1
a332 1
PUBLIC char ** LYCharSets[MAXCHARSETS]={
a333 12
	SevenBitApproximations, /* DosLatin1 (cp850)	*/
	SevenBitApproximations, /* WinLatin1 (cp1252)	*/
	SevenBitApproximations, /* DosLatinUS (cp437)	*/
	SevenBitApproximations, /* DEC Multinational	*/
	SevenBitApproximations, /* Macintosh (8 bit)	*/
	SevenBitApproximations, /* NeXT character set	*/
	SevenBitApproximations, /* Chinese		*/
	SevenBitApproximations, /* Japanese (EUC)	*/
	SevenBitApproximations, /* Japanese (SJIS)	*/
	SevenBitApproximations, /* Korean		*/
	SevenBitApproximations, /* Taipei (Big5)	*/
	SevenBitApproximations, /* Vietnamese (VISCII)	*/
a334 1
	SevenBitApproximations, /* Transparent		*/
d341 3
a343 16
PUBLIC CONST char * LYchar_set_names[MAXCHARSETSP]={
	"ISO Latin 1         ",
	"DosLatin1 (cp850)   ",
	"WinLatin1 (cp1252)  ",
	"DosLatinUS (cp437)  ",
	"DEC Multinational   ",
	"Macintosh (8 bit)   ",
	"NeXT character set  ",
	"Chinese             ",
	"Japanese (EUC)      ",
	"Japanese (SJIS)     ",
	"Korean              ",
	"Taipei (Big5)       ",
	"Vietnamese (VISCII) ",
	"7 bit approximations",
	"Transparent         ",
d353 1
a353 1
 *  Used for chartrans.
d357 1
a357 1
 *  don't show up here at all.	They don't have to.
d364 3
a366 29
  {-1,"iso-8859-1",	UCT_ENC_8BIT,
			UCT_REP_IS_LAT1,
			UCT_CP_IS_LAT1, 	UCT_R_LAT1,UCT_R_LAT1},

  /*
   *  Placeholders for Unicode tables. - FM
   */
  {-1,"cp850",		UCT_ENC_8BIT,
			UCT_REP_SUPERSETOF_LAT1,
			0,			UCT_R_8BIT,UCT_R_ASCII},
  {-1,"cp1252", 	UCT_ENC_8BIT,
			UCT_REP_SUPERSETOF_LAT1,
			0,			UCT_R_8BIT,UCT_R_ASCII},
  {-1,"cp437",		UCT_ENC_8BIT,0,0,	UCT_R_8BIT,UCT_R_ASCII},
  {-1,"dec-mcs",	UCT_ENC_8BIT,0,0,	UCT_R_8BIT,UCT_R_ASCII},
  {-1,"macintosh",	UCT_ENC_8BIT,0,0,	UCT_R_8BIT,UCT_R_ASCII},
  {-1,"next",		UCT_ENC_8BIT,0,0,	UCT_R_8BIT,UCT_R_ASCII},

  /*
   *  There is no strict correlation for the next five, since the transfer
   *  charset gets decoded into Display Char Set by the CJK code (separate
   *  from Unicode mechanism).	For now we use the MIME name that describes
   *  what is output to the terminal. - KW
   */
  {-1,"euc-cn", 	UCT_ENC_CJK,0,0,	UCT_R_8BIT,UCT_R_ASCII},
  {-1,"euc-jp", 	UCT_ENC_CJK,0,0,	UCT_R_8BIT,UCT_R_ASCII},
  {-1,"shift_jis",	UCT_ENC_CJK,0,0,	UCT_R_8BIT,UCT_R_ASCII},
  {-1,"euc-kr", 	UCT_ENC_CJK,0,0,	UCT_R_8BIT,UCT_R_ASCII},
  {-1,"big5",		UCT_ENC_CJK,0,0,	UCT_R_8BIT,UCT_R_ASCII},
d371 3
a373 4
  {-1,"viscii", 	UCT_ENC_8BIT_C0,0,0,	UCT_R_8BIT,UCT_R_ASCII},
  {-1,"us-ascii",	UCT_ENC_7BIT,
			UCT_REP_SUBSETOF_LAT1,
			UCT_CP_SUBSETOF_LAT1,	UCT_R_ASCII,UCT_R_ASCII},
d375 1
a375 4
  /*
   *  Placeholder for non-translation mode. - FM
   */
  {-1,"x-transparent",	UCT_ENC_8BIT,0,0,	UCT_R_8BIT,UCT_R_ASCII}
a388 12
	128,	/* DosLatin1 (cp850)	*/
	130,	/* WinLatin1 (cp1252)	*/
	128,	/* DosLatinUS (cp437)	*/
	160,	/* DEC Multinational	*/
	128,	/* Macintosh (8 bit)	*/
	128,	/* NeXT character set	*/
	128,	/* Chinese		*/
	128,	/* Japanese (EUC)	*/
	128,	/* Japanese (SJIS)	*/
	128,	/* Korean		*/
	128,	/* Taipei (Big5)	*/
	128,	/* Vietnamese (VISCII)	*/
a389 1
	128	/* Transparent	(???)	*/
a391 9
/*
 *  The default character set.
 *  --------------------------
 *  Use lynx.cfg and/or user
 *  'o'ptions (.lynxrc) to
 *  set a different default.
 */
PUBLIC char** p_entity_values = ISO_Latin1;	/* Pointer to translation */
PUBLIC int current_char_set = 0;		/* Index for translation */
d399 4
a402 1
    int chndl = -2;
a403 4
	chndl = 0;

	if (UCAssume_MIMEcharset)
	    chndl = UCGetLYhndl_byMIME(UCAssume_MIMEcharset);
d406 4
a414 5
	if (i == (chndl < 0 ? 0 : chndl)) {
	    LYRawMode = LYUseDefaultRawMode ? TRUE : FALSE;
	} else {
	    LYRawMode = LYUseDefaultRawMode ? FALSE : TRUE;
	}
d428 2
a429 8
    } else if (!strncmp(LYchar_set_names[i], "Chinese", 7)) {
	HTCJK = LYUseDefaultRawMode ? CHINESE : NOCJK;
	LYRawMode = (HTCJK != NOCJK) ? TRUE : FALSE;
	kanji_code = EUC;
	HTPassEightBitRaw = FALSE;
	HTPassEightBitNum = FALSE;
	HTPassHighCtrlRaw = (HTCJK != NOCJK) ? TRUE : FALSE;
	HTPassHighCtrlNum = FALSE;
d431 16
a446 8
    } else if (!strncmp(LYchar_set_names[i], "Japanese (EUC)", 14)) {
	HTCJK = LYUseDefaultRawMode ? JAPANESE : NOCJK;
	LYRawMode = (HTCJK != NOCJK) ? TRUE : FALSE;
	kanji_code = EUC;
	HTPassEightBitRaw = FALSE;
	HTPassEightBitNum = FALSE;
	HTPassHighCtrlRaw = (HTCJK != NOCJK) ? TRUE : FALSE;
	HTPassHighCtrlNum = FALSE;
d448 3
a450 2
    } else if (!strncmp(LYchar_set_names[i], "Japanese (SJIS)", 15)) {
	HTCJK = LYUseDefaultRawMode ? JAPANESE : NOCJK;
a451 1
	kanji_code = SJIS;
a455 27

    } else if (!strncmp(LYchar_set_names[i], "Korean", 6)) {
	HTCJK = LYUseDefaultRawMode ? KOREAN : NOCJK;
	LYRawMode = (HTCJK != NOCJK) ? TRUE : FALSE;
	kanji_code = EUC;
	HTPassEightBitRaw = FALSE;
	HTPassEightBitNum = FALSE;
	HTPassHighCtrlRaw = (HTCJK != NOCJK) ? TRUE : FALSE;
	HTPassHighCtrlNum = FALSE;

    } else if (!strncmp(LYchar_set_names[i], "Taipei (Big5)", 13)) {
	HTCJK = LYUseDefaultRawMode ? TAIPEI : NOCJK;
	LYRawMode = (HTCJK != NOCJK) ? TRUE : FALSE;
	kanji_code = EUC;
	HTPassEightBitRaw = FALSE;
	HTPassEightBitNum = FALSE;
	HTPassHighCtrlRaw = (HTCJK != NOCJK) ? TRUE : FALSE;
	HTPassHighCtrlNum = FALSE;

    } else {
	HTCJK = NOCJK;
	kanji_code = NOKANJI;
	HTPassEightBitRaw = LYUseDefaultRawMode ? FALSE : TRUE;
	LYRawMode = HTPassEightBitRaw;
	HTPassEightBitNum = FALSE;
	HTPassHighCtrlRaw = FALSE;
	HTPassHighCtrlNum = FALSE;
d458 6
d465 1
a465 1
	UCLYhndl_for_unspec = i;
d467 1
a467 7
	if (chndl == -2) {
	    chndl = 0;

	    if (UCAssume_MIMEcharset)
		chndl = UCGetLYhndl_byMIME(UCAssume_MIMEcharset);
	}
	if (chndl != i && chndl >= 0 &&
d470 1
a470 1
	    UCLYhndl_for_unspec = chndl;
d472 1
a472 1
	    UCLYhndl_for_unspec = 0;
d489 12
d505 32
d539 3
d543 1
a543 1
PUBLIC void HTMLSetRawModeDefault ARGS1(int,i)
d545 1
a545 10
    if (!strncmp(LYchar_set_names[i], "ISO Latin 1", 11) ||
	!strncmp(LYchar_set_names[i], "Chinese", 7) ||
	!strncmp(LYchar_set_names[i], "Japanese (EUC)", 14) ||
	!strncmp(LYchar_set_names[i], "Japanese (SJIS)", 15) ||
	!strncmp(LYchar_set_names[i], "Korean", 6) ||
	!strncmp(LYchar_set_names[i], "Taipei (Big5)", 13)) {
	LYDefaultRawMode = TRUE;
    } else {
	LYDefaultRawMode = FALSE;
    }
a558 1
	int chndl = 0;
d560 1
a560 2
	if (UCAssume_MIMEcharset)
	    chndl = UCGetLYhndl_byMIME(UCAssume_MIMEcharset);
d565 3
a567 18
    } else if (!strncmp(LYchar_set_names[i], "ISO Latin 1", 11) ||
	       !strncmp(LYchar_set_names[i], "Chinese", 7) ||
	       !strncmp(LYchar_set_names[i], "Japanese (EUC)", 14) ||
	       !strncmp(LYchar_set_names[i], "Japanese (SJIS)", 15) ||
	       !strncmp(LYchar_set_names[i], "Korean", 6) ||
	       !strncmp(LYchar_set_names[i], "Taipei (Big5)", 13)) {
	if (modeflag == TRUE) {
	    LYUseDefaultRawMode = TRUE;
	} else {
	    LYUseDefaultRawMode = FALSE;
	}
    } else {
	if (modeflag == FALSE) {
	    LYUseDefaultRawMode = TRUE;
	} else {
	    LYUseDefaultRawMode = FALSE;
	}
    }
d575 13
a587 1
PUBLIC void HTMLSetHaveCJKCharacterSet ARGS1(int,i)
d589 18
a606 6
    if (!strncmp(LYchar_set_names[i], "Chinese", 7) ||
	!strncmp(LYchar_set_names[i], "Japanese (EUC)", 14) ||
	!strncmp(LYchar_set_names[i], "Japanese (SJIS)", 15) ||
	!strncmp(LYchar_set_names[i], "Korean", 6) ||
	!strncmp(LYchar_set_names[i], "Taipei (Big5)", 13)) {
	LYHaveCJKCharacterSet = TRUE;
d608 12
a619 1
	LYHaveCJKCharacterSet = FALSE;
d621 2
d626 92
d724 1
a724 1
PUBLIC CONST char * LYEntityNames[] = {
d842 2
a843 3
 *  Function to return the UCode_t (long int) value for entity names
 *  in the ISO_Latin1 and UC_entity_info unicode_entities arrays.
 *  It returns 0 if not found. - FM
d845 1
a845 1
 *  unicode_entities[] now handles all the names from old style entities[] too.
d857 2
d862 1
a862 2
/*  CONST char ** entities = HTML_dtd.entity_names;  */
    CONST UC_entity_info * unicode_entities = HTML_dtd.unicode_entity_info;
a869 66

#ifdef NOTDEFINED
/*
**  unicode_entities[] now handles all names from entities[], so disable latter.
**  Let us keep this some sort of comment until we remove
**  all calls to old-style entities[] from the code. - LP
*/

    /*
     *	Handle names that have control characters
     *	or strings in ISO_Latin1[]. - FM
     */
    if (!strcmp(name, "nbsp")) {
	return(160);
    }
    if (!strcmp(name, "shy")) {
	return(173);
    }
    if (!strcmp(name, "ensp")) {
	return(8194);
    }
    if (!strcmp(name, "emsp")) {
	return(8195);
    }
    if (!strcmp(name, "thinsp")) {
	return(8201);
    }
    if (!strcmp(name, "ndash") ||
	!strcmp(name, "endash")) {
	return(8211);
    }
    if (!strcmp(name, "mdash") ||
	!strcmp(name, "emdash")) {
	return(8212);
    }
    if (!strcmp(name, "trade")) {
	return(8482);
    }

    /*
     *	Now try ISO_Latin1[]. - FM
     */
    for (low = 0, high = HTML_dtd.number_of_entities;
	 high > low;
	 diff < 0 ? (low = i+1) : (high = i)) {
	/*
	**  Binary search.
	*/
	i = (low + (high-low)/2);
	diff = strcmp(entities[i], name);
	if (diff == 0) {
	    if (strlen(ISO_Latin1[i]) == 1) {
		value = (unsigned char)(ISO_Latin1[i][0]);
	    }
	    break;
	}
    }
    if (value > 0) {
	return(value);
    }

    /*
     *	Not yet found...    - FM
     */
#endif /* NOTDEFINED */

d873 1
a873 1
    for (low = 0, high = HTML_dtd.number_of_unicode_entities;
d880 1
a880 1
	diff = strcmp(unicode_entities[i].name, name);	/* Case sensitive! */
a885 1

d893 1
a893 1
PUBLIC void HTMLUseCharacterSet ARGS1(int,i)
d895 1
d897 1
a897 1
    HTMLSetCharacterHandling(i);
d899 1
a909 12

    if (UCAssume_MIMEcharset && *UCAssume_MIMEcharset) {
	UCLYhndl_for_unspec = UCGetLYhndl_byMIME(UCAssume_MIMEcharset);
    } else {
	UCLYhndl_for_unspec = 0;
    }
    if (UCAssume_localMIMEcharset && *UCAssume_localMIMEcharset)
	UCLYhndl_HTFile_for_unspec =
	    UCGetLYhndl_byMIME(UCAssume_localMIMEcharset);
    if (UCAssume_unrecMIMEcharset && *UCAssume_unrecMIMEcharset)
	UCLYhndl_for_unrec =
	    UCGetLYhndl_byMIME(UCAssume_unrecMIMEcharset);
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
