head	1.7;
access;
symbols
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.6;
commitid	EcR8E7r0stjLUV4p;

1.6
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.5;
commitid	lGGuvDWEniklWrQe;

1.5
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.12;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.48.00;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.48.00;	author maja;	state Exp;
branches;
next	;


desc
@@


1.7
log
@delinked from tree, now it goes to the bit bucket
@
text
@/* $LynxId: LYStyle.h,v 1.19 2013/10/22 00:42:18 tom Exp $ */
#ifndef LYSTYLE_H
#define LYSTYLE_H

#include <HTUtils.h>

#ifdef USE_COLOR_STYLE

#include <AttrList.h>
#include <HTMLDTD.h>

#ifdef __cplusplus
extern "C" {
#endif

    typedef struct {
	char *given;
	char *actual;
    } LSS_NAMES;

    /* list of elements */ extern const SGML_dtd HTML_dtd;

    /* array of currently set styles */
    extern HTCharStyle displayStyles[DSTYLE_ELEMENTS];

    /* Set all the buckets in the hash table to be empty */
    extern void parse_userstyles(void);

    extern void style_defaultStyleSheet(void);

    extern int style_readFromFile(char *file);

    extern void TrimColorClass(const char *tagname,
			       char *styleclassname,
			       int *phcode);

    /* This is an array of styles for tags that don't specify 'class' - the
     * values from that array will be suggested by SGML.c by setting the
     * following variable.  A value of -1 means that the style value should be
     * calculated honestly -HV
     */
    extern int cached_tag_styles[HTML_ELEMENTS];

    /* The style for current tag is suggested in current_tag_style.  If
     * force_current_tag_style =TRUE, then no attempts to calculate the color
     * style for current tag should be made - the value of 'current_tag_style'
     * must be used.
     */
    extern int current_tag_style;
    extern BOOL force_current_tag_style;

    extern BOOL force_classname;

    /* If force_current_tag_style =TRUE, then here will be the classname (this
     * is done to avoid copying the class name to the buffer class_name.
     */
    extern char *forced_classname;

    /* This is called each time lss styles are read.  It will fill each element
     * of 'cached_tag_styles' -HV
     */
    extern void cache_tag_styles(void);

    /* use this for reading the end of string found during last invokation of
     * TrimColorClass.
     */
    extern void FastTrimColorClass(const char *tag_name,
				   unsigned name_len,
				   char *stylename,
				   char **pstylename_end,
				   int *hcode);

    /*
     * Functions for cached-styles
     */
    extern BOOL ValidCachedStyle(int y, int x);
    extern unsigned GetCachedStyle(int y, int x);
    extern void FreeCachedStyles(void);
    extern void ResetCachedStyles(void);
    extern void SetCachedStyle(int y, int x, unsigned value);

#ifdef __cplusplus
}
#endif
#endif				/* USE_COLOR_STYLE */
extern int lynx_has_color;

#endif /* LYSTYLE_H */
@


1.6
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.5
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d1 1
a1 1
/* $LynxId: LYStyle.h,v 1.16 2009/01/01 23:06:08 tom Exp $ */
a14 1
/* list of elements */ extern const SGML_dtd HTML_dtd;
d16 8
a23 1
/* array of currently set styles */
d26 1
a26 1
/* Set all the buckets in the hash table to be empty */
d37 5
a41 5
/* this is an array of styles for tags that don't specify 'class' - the values
 * from that array will be suggested by SGML.c by setting the following
 * variable.  Value of -1 means that style value should be calculated honestly. 
 * -HV
 */
d44 5
a48 5
/* the style for current tag is suggested in current_tag_style.  If
 * force_current_tag_style =TRUE, then no attempts to calculate the color style
 * for current tag should be made - the value of 'current_tag_style' must be
 * used.
 */
d54 3
a56 3
/* if force_current_tag_style =TRUE, then here will be the classname (this is
 * done to avoid copying the class name to the buffer class_name.
 */
d59 3
a61 3
/* This is called each time lss styles are read.  It will fill each elt of
 * 'cached_tag_styles' -HV
 */
d64 3
a66 3
/* this is global var - it can be used for reading the end of string found
 * during last invokation of TrimColorClass.
 */
d73 3
a75 3
/*
 * Functions for cached-styles
 */
@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 1
d62 1
a62 1
				   int name_len,
d66 9
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d11 4
a14 2
/* list of elements */
extern CONST SGML_dtd HTML_dtd;
d17 1
a17 4
extern HTCharStyle displayStyles[DSTYLE_ELEMENTS];

/* Can we do colour? - RP */
extern int lynx_has_color;
d20 1
a20 1
extern void parse_userstyles NOPARAMS;
d22 1
a22 1
extern void style_deleteStyleList NOPARAMS;
d24 1
a24 1
extern void style_defaultStyleSheet NOPARAMS;
d26 3
a28 1
extern int style_readFromFile PARAMS((char* file));
d30 6
a35 4
extern void TrimColorClass PARAMS((
    CONST char *	tagname,
    char *		styleclassname,
    int *		phcode));
d37 7
a43 5
 /* this is an array of styles for tags that don't specify 'class' - the
    values from that array will be suggested by SGML.c by setting the
    following variable. Value of -1 means that style value should be calculated
    honestly. -HV */
extern int cached_tag_styles[HTML_ELEMENTS];
d45 4
a48 4
 /* the style for current tag is suggested in current_tag_style. If
    force_current_tag_style =TRUE, then no attempts to calculate the color style
    for current tag should be made - the value of 'current_tag_style' must
    be used.
d50 1
a50 2
extern int current_tag_style;
extern BOOL force_current_tag_style;
d52 2
a53 10
extern BOOL force_classname;
extern char* forced_classname; /* if force_current_tag_style =TRUE, then here
    will be the classname (this is done to avoid copying the class name to the
    buffer class_name.  */

 /* This is called each time lss styles are read. It will fill
    each elt of 'cached_tag_styles' -HV */
extern void cache_tag_styles NOPARAMS;
 /* this is global var - it can be used for reading the end of string found
   during last invokation of TrimColorClass.
d55 1
a55 6
extern void FastTrimColorClass PARAMS ((
	    CONST char*		 tag_name,
	    int			 name_len,
	    char*		 stylename,
	    char**		 pstylename_end,
	    int*		 hcode));
d57 14
a70 1
#endif /* USE_COLOR_STYLE */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d4 2
a20 2
extern void style_initialiseHashTable NOPARAMS;

a22 2
extern void HStyle_addStyle PARAMS((char* buffer));

a28 1

a32 1

@


1.1
log
@Initial revision
@
text
@d6 2
a7 1
#include "AttrList.h"
d30 39
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
