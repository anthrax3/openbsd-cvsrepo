head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.8;
commitid	EcR8E7r0stjLUV4p;

1.8
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.7;
commitid	lGGuvDWEniklWrQe;

1.7
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.21.03.24.58;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.48;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.08;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.57;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.57;	author maja;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delinked from tree, now it goes to the bit bucket
@
text
@/* $LynxId: LYEdit.c,v 1.42 2013/11/28 11:18:19 tom Exp $ */
#include <HTUtils.h>
#include <HTParse.h>
#include <HTAlert.h>
#include <LYCurses.h>
#include <LYUtils.h>
#include <LYGlobalDefs.h>
#include <LYStrings.h>
#include <LYEdit.h>
#ifdef VMS
#include <unixio.h>
#endif /* VMS */

#include <LYLeaks.h>
#include <www_wait.h>

BOOLEAN editor_can_position(void)
{
    char *value;
    HTList *p = positionable_editor;
    static const char *table[] =
    {
#ifdef VMS
	"sedt",
#else
	"emacs",		/* + xemacs */
	"jed",
	"jmacs",
	"joe",			/* + rjoe */
	"jove",
	"jstar",
	"nano",
	"pico",			/* + jpico */
	"vi"			/* + vim, xvi, vile, elvis, view... + likely false matches */
#endif
    };
    unsigned n;

    for (n = 0; n < TABLESIZE(table); n++) {
	if (LYstrstr(editor, table[n]) != 0) {
	    return TRUE;
	}
    }
    /*
     * This really isn't right.  LYstrstr() might be too lax,
     * but this should at least match basename to basename...
     */
    if (positionable_editor != NULL) {
	while ((value = (char *) HTList_nextObject(p)) != NULL) {
	    if (strcmp(editor, value) == 0) {
		return TRUE;
	    }
	}
    }
    return FALSE;
}

/*
 * In edit mode invoke the given (or default) editor to display and edit the
 * current file.  For editors listed in 'editor_can_position()', Lynx will open
 * the file to the same line that the screen cursor is on (or close...) when
 * editing is invoked.
 *
 * Returns FALSE if file is uneditable.
 */
int edit_current_file(char *newfile,
		      int cur,
		      int lineno)
{
    int result = FALSE;
    char *filename = NULL;

#if !(defined(VMS) || defined(USE_DOS_DRIVES))
    char *colon;
#endif
    char *number_sign;
    char position[80];

#if defined(VMS) || defined(CANT_EDIT_UNWRITABLE_FILES)
    FILE *fp;
#endif

    CTRACE((tfp, "edit_current_file(newfile=%s, cur=%d, lineno=%d)\n",
	    newfile, cur, lineno));

    /*
     * If it's a remote file then we can't edit it.
     */
    if (!LYisLocalFile(newfile)) {
	HTUserMsg(CANNOT_EDIT_REMOTE_FILES);
	return FALSE;
    }

    /*
     * If there's a fragment, trim it.  - FM
     */
    number_sign = trimPoundSelector(newfile);

    /*
     * On Unix, first try to open it as a completely referenced file, then via
     * the path alone.
     *
     * On VMS, only try the path.
     */
#if defined (VMS) || defined (USE_DOS_DRIVES)
    filename = HTParse(newfile, "", PARSE_PATH + PARSE_PUNCTUATION);
    HTUnEscape(filename);
    StrAllocCopy(filename, HTSYS_name(filename));
    if (!LYCanReadFile(filename)) {
#ifdef SH_EX
	HTUserMsg2(COULD_NOT_EDIT_FILE, filename);
#else
	HTAlert(COULD_NOT_ACCESS_FILE);
#endif
	CTRACE((tfp, "filename: '%s'\n", filename));
	goto done;
    }
#else /* something like UNIX */
    if (StrNCmp(newfile, "file://localhost/", 16) == 0)
	colon = newfile + 16;
    else
	colon = StrChr(newfile, ':');
    StrAllocCopy(filename, (colon + 1));
    HTUnEscape(filename);
    if (!LYCanReadFile(filename)) {
	FREE(filename);
	filename = HTParse(newfile, "", PARSE_PATH + PARSE_PUNCTUATION);
	HTUnEscape(filename);
	if (!LYCanReadFile(HTSYS_name(filename))) {
	    HTAlert(COULD_NOT_ACCESS_FILE);
	    goto done;
	}
    }
#endif

#if defined(VMS) || defined(CANT_EDIT_UNWRITABLE_FILES)
    /*
     * Don't allow editing if user lacks append access.
     */
    if ((fp = fopen(filename, TXT_A)) == NULL) {
	HTUserMsg(NOAUTH_TO_EDIT_FILE);
	goto done;
    }
    fclose(fp);
#endif /* VMS || CANT_EDIT_UNWRITABLE_FILES */

    /*
     * Make sure cur is at least zero.  - FM
     */
    if (cur < 0) {
	cur = 0;
    }

    /*
     * Set up the command for the editor.  - FM
     */
    if (lineno >= 0) {
	*position = 0;
#ifdef VMS
	lineno--;
#endif
	lineno += (nlinks ? links[cur].ly : 0);
	if (lineno > 0)
	    sprintf(position, "%d", lineno);
    } else {
	*position = '\0';
    }

    edit_temporary_file(filename, position, NULL);
    result = TRUE;

  done:
    /*
     * Restore the fragment if there was one.  - FM
     */
    restorePoundSelector(number_sign);

    FREE(filename);
    CTRACE((tfp, "edit_current_file returns %d\n", result));
    return (result);
}

void edit_temporary_file(char *filename,
			 const char *position,
			 const char *message)
{
#ifdef UNIX
    struct stat stat_info;
#endif
    const char *format = "%s %s";
    char *command = NULL;
    const char *editor_arg = "";
    int params = 1;
    int rv;

    if (LYstrstr(editor, "pico")) {
	editor_arg = " -t";	/* No prompt for filename to use */
    }
    if (editor_can_position() && *position) {
#ifdef VMS
	format = "%s %s -%s%s";
	HTAddXpand(&command, format, params++, editor);
	HTAddParam(&command, format, params++, filename);
	HTAddParam(&command, format, params++, position);
	HTAddParam(&command, format, params++, editor_arg);
	HTEndParam(&command, format, params);
#else
	format = "%s +%s%s %s";
	HTAddXpand(&command, format, params++, editor);
	HTAddParam(&command, format, params++, position);
	HTAddParam(&command, format, params++, editor_arg);
	HTAddParam(&command, format, params++, filename);
	HTEndParam(&command, format, params);
#endif
    }
#ifdef DOSPATH
    else if (StrNCmp(editor, "VZ", 2) == 0) {
	/* for Vz editor */
	format = "%s %s -%s";
	HTAddXpand(&command, format, params++, editor);
	HTAddParam(&command, format, params++, HTDOS_short_name(filename));
	HTAddParam(&command, format, params++, position);
	HTEndParam(&command, format, params);
    } else if (StrNCmp(editor, "edit", 4) == 0) {
	/* for standard editor */
	HTAddXpand(&command, format, params++, editor);
	HTAddParam(&command, format, params++, HTDOS_short_name(filename));
	HTEndParam(&command, format, params);
    }
#endif
    else {
#ifdef _WINDOWS
	if (StrChr(editor, ' '))
	    HTAddXpand(&command, format, params++, HTDOS_short_name(editor));
	else
	    HTAddXpand(&command, format, params++, editor);
#else
	HTAddXpand(&command, format, params++, editor);
#endif
	HTAddParam(&command, format, params++, filename);
	HTEndParam(&command, format, params);
    }
    if (message != NULL) {
	_statusline(message);
    }

    CTRACE((tfp, "LYEdit: %s\n", command));
    CTRACE_SLEEP(MessageSecs);

    stop_curses();

#ifdef UNIX
    set_errno(0);
#endif
    if ((rv = LYSystem(command)) != 0) {	/* Spawn Editor */
	start_curses();
	/*
	 * If something went wrong, we should probably return soon; currently
	 * we don't, but at least put out a message.  - kw
	 */
	{
#if defined(UNIX) && defined(WIFEXITED)
	    int save_err = errno;

	    CTRACE((tfp, "ExtEditForm: system() returned %d (0x%x), %s\n",
		    rv, rv,
		    (save_err
		     ? LYStrerror(save_err)
		     : "reason unknown")));
	    LYFixCursesOn("show error warning:");
	    if (rv == -1) {
		HTUserMsg2(gettext("Error starting editor, %s"),
			   LYStrerror(save_err));
	    } else if (WIFSIGNALED(rv)) {
		HTAlwaysAlert(NULL, gettext("Editor killed by signal"));
	    } else if (WIFEXITED(rv) && WEXITSTATUS(rv) != 127) {
		char exitcode[80];

		sprintf(exitcode, "%d", WEXITSTATUS(rv));
		HTUserMsg2(gettext("Editor returned with error status %s"),
			   exitcode);
	    } else
#endif
		HTAlwaysAlert(NULL, ERROR_SPAWNING_EDITOR);
	}
    } else {
	start_curses();
    }
#ifdef UNIX
    /*
     * Delete backup file, if that's your style.
     */
    HTSprintf0(&command, "%s~", filename);
    if (stat(command, &stat_info) == 0)
	remove(command);
#endif
    FREE(command);
}
@


1.8
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.7
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d1 1
a1 1
/* $LynxId: LYEdit.c,v 1.38 2008/12/29 01:00:53 tom Exp $ */
d8 1
a24 1
	"SEDT"
d26 1
a26 1
	"emacs",
d29 1
a29 1
	"joe",
a30 1
	"jpico",
d33 2
a34 3
	"pico",
	"rjoe",
	"vi"
d40 1
a40 1
	if (strstr(editor, table[n]) != 0) {
d44 4
d119 1
a119 1
    if (strncmp(newfile, "file://localhost/", 16) == 0)
d122 1
a122 1
	colon = strchr(newfile, ':');
d157 2
a158 1
    *position = 0;
d160 1
a160 1
    lineno--;
d162 6
a167 3
    lineno += (nlinks ? links[cur].ly : 0);
    if (lineno > 0)
	sprintf(position, "%d", lineno);
d196 1
a196 1
    if (strstr(editor, "pico")) {
d217 1
a217 1
    else if (strncmp(editor, "VZ", 2) == 0) {
d224 1
a224 1
    } else if (strncmp(editor, "edit", 4) == 0) {
d233 1
a233 1
	if (strchr(editor, ' '))
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 1
a1 2
#include <sys/wait.h>

d14 1
d18 2
d33 1
d46 7
d256 2
a257 2
#ifdef UNIX
	    int rvhi = (rv >> 8);
d260 4
a263 1
		    rv, rv, errno ? LYStrerror(errno) : "reason unknown"));
d267 1
a267 1
			   LYStrerror(errno));
d270 6
a275 5
	    } else if (!(rv == -1 || (rvhi == 127 && errno))) {
		HTUserMsg2(gettext("Editor returned with error status, %s"),
			   (errno
			    ? LYStrerror(errno)
			    : gettext("reason unknown.")));
@


1.5
log
@Use appropriate wait(2) macros to test for editor failure.
This also fixes an `&&' that was supposed to be an `&'.

Reported by Alexey Dobriyan <adobriyan at gmail dot com>.

``I like it'' otto@@.
@
text
@d16 1
a16 1
PUBLIC BOOLEAN editor_can_position NOARGS
d18 2
a19 1
    static CONST char *table[] = {
d37 1
d47 4
a50 4
 *  In edit mode invoke the given (or default) editor to display and edit the
 *  current file.  For editors listed in 'editor_can_position()', Lynx
 *  will open the file to the same line that the screen cursor is on (or
 *  close...) when editing is invoked.
d52 1
a52 1
 *  Returns FALSE if file is uneditable.
d54 3
a56 4
PUBLIC int edit_current_file ARGS3(
	char *,		newfile,
	int,		cur,
	int,		lineno)
d60 1
d66 1
d72 1
a72 1
		 newfile, cur, lineno));
d75 1
a75 1
     *  If it's a remote file then we can't edit it.
d83 1
a83 1
     *  If there's a fragment, trim it. - FM
d88 2
a89 2
     *  On Unix, first try to open it as a completely referenced file,
     *  then via the path alone.
d94 1
a94 1
    filename = HTParse(newfile, "", PARSE_PATH+PARSE_PUNCTUATION);
d106 1
a106 1
#else	/* something like UNIX */
d115 1
a115 1
	filename = HTParse(newfile, "", PARSE_PATH+PARSE_PUNCTUATION);
d126 1
a126 1
     *  Don't allow editing if user lacks append access.
d128 1
a128 2
    if ((fp = fopen(filename, TXT_A)) == NULL)
    {
d136 1
a136 1
     *  Make sure cur is at least zero. - FM
d143 1
a143 1
     *  Set up the command for the editor. - FM
d156 1
a156 1
done:
d158 1
a158 1
     *  Restore the fragment if there was one. - FM
d167 3
a169 4
PUBLIC void edit_temporary_file ARGS3(
	char *,		filename,
	char *,		position,
	char *,		message)
d174 1
a174 1
    char *format = "%s %s";
d176 1
a176 1
    char *editor_arg = "";
d181 1
a181 1
	editor_arg = " -t"; /* No prompt for filename to use */
d201 1
a201 1
    else if (strncmp(editor, "VZ", 2)==0) {
d208 1
a208 1
    } else if (strncmp(editor, "edit", 4)==0) {
d242 2
a243 2
	 *  If something went wrong, we should probably return soon;
	 *  currently we don't, but at least put out a message. - kw
d247 2
d250 1
a250 1
		   rv, rv, errno ? LYStrerror(errno) : "reason unknown"));
d257 5
a261 3
	    } else if (WIFEXITED(rv) && WEXITSTATUS(rv) != 127) {
		HTUserMsg2(gettext("Editor returned with exit code %d"),
			   WEXITSTATUS(rv));
d271 1
a271 1
     *  Delete backup file, if that's your style.
d273 3
a275 3
    HTSprintf0 (&command, "%s~", filename);
    if (stat (command, &stat_info) == 0)
	remove (command);
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d1 2
a245 1
	    int rvhi = (rv >> 8);
d249 4
a252 1
	    if (rv != -1 && (rv && 0xff) && !rvhi) {
d254 3
a256 3
	    } else if (!(rv == -1 || (rvhi == 127 && errno))) {
		HTUserMsg2(gettext("Editor returned with error status, %s"),
			   errno ? LYStrerror(errno) : gettext("reason unknown."));
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d57 1
a57 1
#if !(defined(VMS) || defined(DOSPATH) || defined(__EMX__))
a64 3
#if defined(__CYGWIN__) && defined(DOSPATH)
    unsigned char temp_buff[LY_MAXPATH];
#endif
d80 1
a80 3
    number_sign = strchr(newfile, '#');
    if (number_sign)
	*number_sign = '\0';
d88 1
a88 1
#if defined (VMS) || defined (DOSPATH) || defined (__EMX__)
d101 1
a101 2
#else	/* !(VMS || !DOSPATH || !__EMX__) == UNIX */
#ifdef SH_EX	/* Speed Up! */
a105 3
#else
    colon = strchr(newfile, ':');
#endif
d117 1
a117 1
#endif /* !(VMS || !DOSPATH || !__EMX__) */
d156 1
a156 2
    if (number_sign)
	*number_sign = '#';
a218 8
#if defined(__CYGWIN__) && defined(DOSPATH)
	if (strchr(editor, ' ')) {
	    cygwin_conv_to_full_posix_path(HTDOS_short_name(editor), temp_buff);
	    HTAddXpand(&command, format, params++, temp_buff);
	} else {
	    HTAddXpand(&command, format, params++, editor);
	}
#else
a219 1
#endif /* __CYGWIN__ */
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d16 1
d18 2
a19 1
    return (strstr(editor, "sedt") || strstr(editor, "SEDT"));
d21 10
a30 5
    return (strstr(editor, "emacs") || strstr(editor, "vi") ||
	strstr(editor, "pico")  || strstr(editor, "jove")   ||
 	strstr(editor, "jed")   || strstr(editor, "joe")    ||
 	strstr(editor, "jstar") || strstr(editor, "jmacs")  ||
 	strstr(editor, "rjoe")  || strstr(editor, "jpico"));
d32 8
a55 3
    int params = 1;
    char *format = "%s %s";
    char *command = NULL;
d57 4
a60 1
    char *colon, *number_sign;
d62 1
d64 7
d73 1
a73 1
     *  If its a remote file then we can't edit it.
d93 20
a112 1
#if !defined (VMS) && !defined (DOSPATH) && !defined (__EMX__)
d114 1
d117 1
a117 1
    if ((fp = fopen(filename, "r")) == NULL) {
a118 1
#endif /* !VMS */
d121 1
a121 3
	StrAllocCopy(filename, HTSYS_name(filename));
	if ((fp = fopen(filename, "r")) == NULL)
	{
a122 1
	    CTRACE(tfp, "filename: '%s'\n", filename);
a124 1
#if !defined (VMS) && !defined (DOSPATH) && !defined (__EMX__)
d126 1
a126 2
#endif /* !VMS */
    fclose(fp);
d132 1
a132 1
    if ((fp = fopen(filename, "a")) == NULL)
d158 32
d192 1
a192 1
	format = "%s %s -%s";
d196 1
d199 1
a199 1
	format = "%s +%s %s";
d202 1
d206 31
a236 1
    } else {
d238 2
d243 3
d247 1
a247 1
    CTRACE(tfp, "LYEdit: %s\n", command);
a249 3
    /*
     *  Invoke the editor. - FM
     */
a250 2
    LYSystem(command);
    start_curses();
d252 28
a279 3
    result = TRUE;

done:
d281 1
a281 1
     *  Restore the fragment if there was one. - FM
d283 4
a286 3
    if (number_sign)
	*number_sign = '#';

a287 2
    FREE(filename);
    return (result);
@


1.1
log
@Initial revision
@
text
@d1 7
a7 12
#include "HTUtils.h"
#include "tcp.h"
#include "HTParse.h"
#include "HTAlert.h"
#include "LYCurses.h"
#include "LYSignal.h"
#include "LYUtils.h"
#include "LYClean.h"
#include "LYGlobalDefs.h"
#include "LYEdit.h"
#include "LYStrings.h"
#include "LYSystem.h"
a9 1
#include "HTVMSUtils.h"
a10 3
#ifdef DOSPATH
#include "HTDOS.h"
#endif
d12 1
a12 1
#include "LYLeaks.h"
d14 12
a25 1
#define FREE(x) if (x) {free(x); x = NULL;}
d28 5
a32 4
 *  In edit mode invoke either emacs, vi, pico, jove, jed sedt or the
 *  default editor to display and edit the current file.
 *  For emacs, vi, pico, jove and jed, Lynx will open the file to the
 *  same line that the screen cursor is on when editing is invoked.
d40 4
a43 1
    char command[512];
d46 1
d53 1
a53 2
	_statusline(CANNOT_EDIT_REMOTE_FILES);
	sleep(MessageSecs);
d70 1
a70 1
#if !defined (VMS) && !defined (DOSPATH)
d79 3
a81 12
#ifdef DOSPATH
	if (strlen(filename)>1) filename++;
#endif
#ifdef DOSPATH
	if ((fp = fopen(HTDOS_name(filename),"r")) == NULL) {
#else
#ifdef VMS
	if ((fp = fopen(HTVMS_name("", filename), "r")) == NULL) {
#else
	if ((fp = fopen(filename, "r")) == NULL) {
#endif /* VMS */
#endif /* DOSPATH */
d83 2
a84 2
	    FREE(filename);
	    goto failure;
d86 1
a86 1
#if !defined (VMS) && !defined (DOSPATH)
d95 4
a98 12
#ifdef DOSPATH
    if ((fp = fopen(HTDOS_name("", filename), "a")) == NULL) {
#else
#ifdef VMS
    if ((fp = fopen(HTVMS_name("", filename), "a")) == NULL) {
#else
    if ((fp = fopen(filename, "a")) == NULL) {
#endif /* VMS */
#endif /* DOSPATH */
	_statusline(NOAUTH_TO_EDIT_FILE);
	sleep(MessageSecs);
	goto failure;
d113 9
d123 12
a134 6
    if ((strstr(editor, "sedt") || strstr(editor, "SEDT")) &&
	((lineno - 1) + (nlinks ? links[cur].ly : 0)) > 0) {
	sprintf(command, "%s %s -%d",
			 editor,
			 HTVMS_name("", filename),
			 ((lineno - 1) + (nlinks ? links[cur].ly : 0)));
d136 3
a138 1
	sprintf(command, "%s %s", editor, HTVMS_name("", filename));
d140 3
a142 29
#else
    if (strstr(editor, "emacs") || strstr(editor, "vi") ||
	strstr(editor, "pico") || strstr(editor, "jove") ||
	strstr(editor, "jed"))
	sprintf(command, "%s +%d \"%s\"",
			 editor,
			 (lineno + (nlinks ? links[cur].ly : 0)),
#ifdef DOSPATH
			 HTDOS_name(filename));
#else
			 filename);
#endif /* DOSPATH */
    else
#ifdef __DJGPP__
	sprintf(command, "%s %s", editor, HTDOS_name(filename));
#else
	sprintf(command, "%s \"%s\"", editor,
#ifdef DOSPATH
				 HTDOS_name(filename));
#else
				 filename);
#endif /* DOSPATH */
#endif /* __DJGPP__ */
#endif /* VMS */
    if (TRACE) {
	fprintf(stderr, "LYEdit: %s\n", command);
	sleep(MessageSecs);
    }
    FREE(filename);
a146 2
    fflush(stderr);
    fflush(stdout);
d148 1
a148 3
    system(command);
    fflush(stdout);
    fflush(stderr);
d151 3
a158 1
    return TRUE;
d160 3
a162 7
failure:
    /*
     *  Restore the fragment if there was one. - FM
     */
    if (number_sign)
	*number_sign = '#';
    return FALSE;
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
