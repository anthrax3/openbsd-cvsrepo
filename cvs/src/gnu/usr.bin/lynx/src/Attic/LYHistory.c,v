head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.48;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.09;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.54;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.54;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYHistory.c,v 1.86 2013/10/19 00:46:43 tom Exp $
 */
#include <HTUtils.h>
#include <HTTP.h>
#include <GridText.h>
#include <HTAlert.h>
#include <HText.h>
#include <LYGlobalDefs.h>
#include <LYUtils.h>
#include <LYHistory.h>
#include <LYPrint.h>
#include <LYDownload.h>
#include <LYOptions.h>
#include <LYKeymap.h>
#include <LYList.h>
#include <LYShowInfo.h>
#include <LYStrings.h>
#include <LYCharUtils.h>
#include <LYCharSets.h>
#include <LYrcFile.h>
#ifdef DISP_PARTIAL
#include <LYMainLoop.h>
#endif

#ifdef DIRED_SUPPORT
#include <LYUpload.h>
#include <LYLocal.h>
#endif /* DIRED_SUPPORT */

#include <LYexit.h>
#include <LYLeaks.h>
#include <HTCJK.h>

HTList *Visited_Links = NULL;	/* List of safe popped docs. */
int Visited_Links_As = VISITED_LINKS_AS_LATEST | VISITED_LINKS_REVERSE;

static VisitedLink *PrevVisitedLink = NULL;	/* NULL on auxillary */
static VisitedLink *PrevActiveVisitedLink = NULL;	/* Last non-auxillary */
static VisitedLink Latest_first;
static VisitedLink Latest_last;
static VisitedLink *Latest_tree;
static VisitedLink *First_tree;
static VisitedLink *Last_by_first;

int nhist_extra;

#ifdef LY_FIND_LEAKS
static int already_registered_free_messages_stack = 0;
static int already_registered_clean_all_history = 0;
#endif

#ifdef LY_FIND_LEAKS
/*
 * Utility for freeing the list of visited links.  - FM
 */
static void Visited_Links_free(void)
{
    VisitedLink *vl;
    HTList *cur = Visited_Links;

    PrevVisitedLink = NULL;
    PrevActiveVisitedLink = NULL;
    if (!cur)
	return;

    while (NULL != (vl = (VisitedLink *) HTList_nextObject(cur))) {
	FREE(vl->address);
	FREE(vl->title);
	FREE(vl);
    }
    HTList_delete(Visited_Links);
    Visited_Links = NULL;
    Latest_last.prev_latest = &Latest_first;
    Latest_first.next_latest = &Latest_last;
    Last_by_first = Latest_tree = First_tree = 0;
    return;
}
#endif /* LY_FIND_LEAKS */

#ifdef DEBUG
static void trace_history(const char *tag)
{
    if (TRACE) {
	CTRACE((tfp, "HISTORY %s %d/%d (%d extra)\n",
		tag, nhist, size_history, nhist_extra));
	CTRACE_FLUSH(tfp);
    }
}
#else
#define trace_history(tag)	/* nothing */
#endif /* DEBUG */

/*
 * Utility for listing visited links, making any repeated links the most
 * current in the list.  - FM
 */
void LYAddVisitedLink(DocInfo *doc)
{
    VisitedLink *tmp;
    HTList *cur;
    const char *title = (doc->title ? doc->title : NO_TITLE);

    if (isEmpty(doc->address)) {
	PrevVisitedLink = NULL;
	return;
    }

    /*
     * Exclude POST or HEAD replies, and bookmark, menu or list files.  - FM
     */
    if (doc->post_data || doc->isHEAD || doc->bookmark ||
	(			/* special url or a temp file */
	    (!StrNCmp(doc->address, "LYNX", 4) ||
	     !StrNCmp(doc->address, "file://localhost/", 17)))) {
	int related = 1;	/* First approximation only */

	if (LYIsUIPage(doc->address, UIP_HISTORY) ||
	    LYIsUIPage(doc->address, UIP_VLINKS) ||
	    LYIsUIPage(doc->address, UIP_SHOWINFO) ||
	    isLYNXMESSAGES(doc->address) ||
	    ((related = 0) != 0) ||
#ifdef DIRED_SUPPORT
	    LYIsUIPage(doc->address, UIP_DIRED_MENU) ||
	    LYIsUIPage(doc->address, UIP_UPLOAD_OPTIONS) ||
	    LYIsUIPage(doc->address, UIP_PERMIT_OPTIONS) ||
#endif /* DIRED_SUPPORT */
	    LYIsUIPage(doc->address, UIP_PRINT_OPTIONS) ||
	    LYIsUIPage(doc->address, UIP_DOWNLOAD_OPTIONS) ||
	    LYIsUIPage(doc->address, UIP_OPTIONS_MENU) ||
	    isLYNXEDITMAP(doc->address) ||
	    isLYNXKEYMAP(doc->address) ||
	    LYIsUIPage(doc->address, UIP_LIST_PAGE) ||
#ifdef USE_ADDRLIST_PAGE
	    LYIsUIPage(doc->address, UIP_ADDRLIST_PAGE) ||
#endif
	    LYIsUIPage(doc->address, UIP_CONFIG_DEF) ||
	    LYIsUIPage(doc->address, UIP_LYNXCFG) ||
	    isLYNXCOOKIE(doc->address) ||
	    LYIsUIPage(doc->address, UIP_TRACELOG)) {
	    if (!related)
		PrevVisitedLink = NULL;
	    return;
	}
    }

    if (!Visited_Links) {
	Visited_Links = HTList_new();
#ifdef LY_FIND_LEAKS
	atexit(Visited_Links_free);
#endif
	Latest_last.prev_latest = &Latest_first;
	Latest_first.next_latest = &Latest_last;
	Latest_last.next_latest = NULL;		/* Find bugs quick! */
	Latest_first.prev_latest = NULL;
	Last_by_first = Latest_tree = First_tree = NULL;
    }

    cur = Visited_Links;
    while (NULL != (tmp = (VisitedLink *) HTList_nextObject(cur))) {
	if (!strcmp(NonNull(tmp->address),
		    NonNull(doc->address))) {
	    PrevVisitedLink = PrevActiveVisitedLink = tmp;
	    /* Already visited.  Update the last-visited info. */
	    if (tmp->next_latest == &Latest_last)	/* optimization */
		return;

	    /* Remove from "latest" chain */
	    tmp->prev_latest->next_latest = tmp->next_latest;
	    tmp->next_latest->prev_latest = tmp->prev_latest;

	    /* Insert at the end of the "latest" chain */
	    Latest_last.prev_latest->next_latest = tmp;
	    tmp->prev_latest = Latest_last.prev_latest;
	    tmp->next_latest = &Latest_last;
	    Latest_last.prev_latest = tmp;
	    return;
	}
    }

    if ((tmp = typecalloc(VisitedLink)) == NULL)
	outofmem(__FILE__, "LYAddVisitedLink");

    assert(tmp != NULL);

    StrAllocCopy(tmp->address, doc->address);
    LYformTitle(&(tmp->title), title);

    /* First-visited chain */
    HTList_appendObject(Visited_Links, tmp);	/* At end */
    tmp->prev_first = Last_by_first;
    Last_by_first = tmp;

    /* Tree structure */
    if (PrevVisitedLink) {
	VisitedLink *a = PrevVisitedLink;
	VisitedLink *b = a->next_tree;
	int l = PrevVisitedLink->level;

	/* Find last on the deeper levels */
	while (b && b->level > l)
	    a = b, b = b->next_tree;

	if (!b)			/* a == Latest_tree */
	    Latest_tree = tmp;
	tmp->next_tree = a->next_tree;
	a->next_tree = tmp;

	tmp->level = PrevVisitedLink->level + 1;
    } else {
	if (Latest_tree)
	    Latest_tree->next_tree = tmp;
	tmp->level = 0;
	tmp->next_tree = NULL;
	Latest_tree = tmp;
    }
    PrevVisitedLink = PrevActiveVisitedLink = tmp;
    if (!First_tree)
	First_tree = tmp;

    /* "latest" chain */
    Latest_last.prev_latest->next_latest = tmp;
    tmp->prev_latest = Latest_last.prev_latest;
    tmp->next_latest = &Latest_last;
    Latest_last.prev_latest = tmp;

    return;
}

/*
 * Returns true if this is a page that we would push onto the stack if not
 * forced.  If docurl is NULL, only the title is considered; otherwise also
 * check the URL whether it is (likely to be) a generated special page.
 */
BOOLEAN LYwouldPush(const char *title,
		    const char *docurl)
{
    BOOLEAN rc = FALSE;

    /*
     * All non-pushable generated pages have URLs that begin with
     * "file://localhost/" and end with HTML_SUFFIX.  - kw
     */
    if (docurl) {
	size_t ulen;

	if (StrNCmp(docurl, "file://localhost/", 17) != 0 ||
	    (ulen = strlen(docurl)) <= strlen(HTML_SUFFIX) ||
	    strcmp(docurl + ulen - strlen(HTML_SUFFIX), HTML_SUFFIX) != 0) {
	    /*
	     * If it is not a local HTML file, it may be a Web page that
	     * accidentally has the same title.  So return TRUE now.  - kw
	     */
	    return TRUE;
	}
    }

    if (docurl) {
	rc = (BOOLEAN)
	    !(LYIsUIPage(docurl, UIP_HISTORY)
	      || LYIsUIPage(docurl, UIP_PRINT_OPTIONS)
#ifdef DIRED_SUPPORT
	      || LYIsUIPage(docurl, UIP_DIRED_MENU)
	      || LYIsUIPage(docurl, UIP_UPLOAD_OPTIONS)
	      || LYIsUIPage(docurl, UIP_PERMIT_OPTIONS)
#endif /* DIRED_SUPPORT */
	    );
    } else {
	rc = (BOOLEAN)
	    !(!strcmp(title, HISTORY_PAGE_TITLE)
	      || !strcmp(title, PRINT_OPTIONS_TITLE)
#ifdef DIRED_SUPPORT
	      || !strcmp(title, DIRED_MENU_TITLE)
	      || !strcmp(title, UPLOAD_OPTIONS_TITLE)
	      || !strcmp(title, PERMIT_OPTIONS_TITLE)
#endif /* DIRED_SUPPORT */
	    );
    }
    return rc;
}

/*
 * Free post-data for 'DocInfo'
 */
void LYFreePostData(DocInfo *doc)
{
    BStrFree(doc->post_data);
    FREE(doc->post_content_type);
}

/*
 * Free strings associated with a 'DocInfo' struct.
 */
void LYFreeDocInfo(DocInfo *doc)
{
    FREE(doc->title);
    FREE(doc->address);
    FREE(doc->bookmark);
    LYFreePostData(doc);
}

/*
 * Free the information in the last history entry.
 */
static void clean_extra_history(void)
{
    trace_history("clean_extra_history");
    nhist += nhist_extra;
    while (nhist_extra > 0) {
	nhist--;
	LYFreeDocInfo(&HDOC(nhist));
	nhist_extra--;
    }
    trace_history("...clean_extra_history");
}

/*
 * Free the entire history stack, for auditing memory leaks.
 */
#ifdef LY_FIND_LEAKS
static void clean_all_history(void)
{
    trace_history("clean_all_history");
    clean_extra_history();
    while (nhist > 0) {
	nhist--;
	LYFreeDocInfo(&HDOC(nhist));
    }
    trace_history("...clean_all_history");
}
#endif

/* FIXME What is the relationship to are_different() from the mainloop?! */
static int are_identical(HistInfo * doc, DocInfo *doc1)
{
    return (STREQ(doc1->address, doc->hdoc.address)
	    && BINEQ(doc1->post_data, doc->hdoc.post_data)
	    && !strcmp(NonNull(doc1->bookmark),
		       NonNull(doc->hdoc.bookmark))
	    && doc1->isHEAD == doc->hdoc.isHEAD);
}

void LYAllocHistory(int entries)
{
    CTRACE((tfp, "LYAllocHistory %d vs %d\n", entries, size_history));
    if (entries + 1 >= size_history) {
	unsigned want;
	int save = size_history;

	size_history = (entries + 2) * 2;
	want = (unsigned) size_history *(unsigned) sizeof(*history);

	if (history == 0) {
	    history = typeMallocn(HistInfo, want);
	} else {
	    history = typeRealloc(HistInfo, history, want);
	}
	if (history == 0)
	    outofmem(__FILE__, "LYAllocHistory");

	assert(history != NULL);

	while (save < size_history) {
	    memset(&history[save++], 0, sizeof(history[0]));
	}
    }
    CTRACE((tfp, "...LYAllocHistory %d vs %d\n", entries, size_history));
}

/*
 * Push the current filename, link and line number onto the history list.
 */
int LYpush(DocInfo *doc, int force_push)
{
    /*
     * Don't push NULL file names.
     */
    if (*doc->address == '\0')
	return 0;

    /*
     * Check whether this is a document we don't push unless forced.  - FM
     */
    if (!force_push) {
	/*
	 * Don't push the history, printer, or download lists.
	 */
	if (!LYwouldPush(doc->title, doc->address)) {
	    if (!LYforce_no_cache)
		LYoverride_no_cache = TRUE;
	    return 0;
	}
    }

    /*
     * If file is identical to one before it, don't push it.
     * But do not duplicate it if there is only one on the stack,
     * note that HDOC() starts from 0, so nhist should be > 0.
     */
    if (nhist >= 1 && are_identical(&(history[nhist - 1]), doc)) {
	if (HDOC(nhist - 1).internal_link == doc->internal_link) {
	    /* But it is nice to have the last position remembered!
	       - kw */
	    HDOC(nhist - 1).link = doc->link;
	    HDOC(nhist - 1).line = doc->line;
	    return 0;
	}
    }

    /*
     * If file is identical to the current document, just move the pointer.
     */
    if (nhist_extra >= 1 && are_identical(&(history[nhist]), doc)) {
	HDOC(nhist).link = doc->link;
	HDOC(nhist).line = doc->line;
	nhist_extra--;
	LYAllocHistory(nhist);
	nhist++;
	trace_history("LYpush: just move the cursor");
	return 1;
    }

    clean_extra_history();
#ifdef LY_FIND_LEAKS
    if (!already_registered_clean_all_history) {
	already_registered_clean_all_history = 1;
	atexit(clean_all_history);
    }
#endif

    /*
     * OK, push it...
     */
    LYAllocHistory(nhist);
    HDOC(nhist).link = doc->link;
    HDOC(nhist).line = doc->line;

    HDOC(nhist).title = NULL;
    LYformTitle(&(HDOC(nhist).title), doc->title);

    HDOC(nhist).address = NULL;
    StrAllocCopy(HDOC(nhist).address, doc->address);

    HDOC(nhist).post_data = NULL;
    BStrCopy(HDOC(nhist).post_data, doc->post_data);

    HDOC(nhist).post_content_type = NULL;
    StrAllocCopy(HDOC(nhist).post_content_type, doc->post_content_type);

    HDOC(nhist).bookmark = NULL;
    StrAllocCopy(HDOC(nhist).bookmark, doc->bookmark);

    HDOC(nhist).isHEAD = doc->isHEAD;
    HDOC(nhist).safe = doc->safe;

    HDOC(nhist).internal_link = FALSE;	/* by default */
    history[nhist].intern_seq_start = -1;	/* by default */
    if (doc->internal_link) {
	/* Now some tricky stuff: if the caller thinks that the doc
	   to push was the result of following an internal
	   (fragment) link, we check whether we believe it.
	   It is only accepted as valid if the immediately preceding
	   item on the history stack is actually the same document
	   except for fragment and location info.  I.e. the Parent
	   Anchors are the same.
	   Also of course this requires that this is not the first
	   history item. - kw */
	if (nhist > 0) {
	    DocAddress WWWDoc;
	    HTParentAnchor *thisparent, *thatparent = NULL;

	    WWWDoc.address = doc->address;
	    WWWDoc.post_data = doc->post_data;
	    WWWDoc.post_content_type = doc->post_content_type;
	    WWWDoc.bookmark = doc->bookmark;
	    WWWDoc.isHEAD = doc->isHEAD;
	    WWWDoc.safe = doc->safe;
	    thisparent =
		HTAnchor_findAddress(&WWWDoc);
	    /* Now find the ParentAnchor for the previous history
	     * item - kw
	     */
	    if (thisparent) {
		/* If the last-pushed item is a LYNXIMGMAP but THIS one
		 * isn't, compare the physical URLs instead. - kw
		 */
		if (isLYNXIMGMAP(HDOC(nhist - 1).address) &&
		    !isLYNXIMGMAP(doc->address)) {
		    WWWDoc.address = HDOC(nhist - 1).address + LEN_LYNXIMGMAP;
		    /*
		     * If THIS item is a LYNXIMGMAP but the last-pushed one
		     * isn't, fake it by using THIS item's address for
		     * thatparent... - kw
		     */
		} else if (isLYNXIMGMAP(doc->address) &&
			   !isLYNXIMGMAP(HDOC(nhist - 1).address)) {
		    char *temp = NULL;

		    StrAllocCopy(temp, STR_LYNXIMGMAP);
		    StrAllocCat(temp, doc->address + LEN_LYNXIMGMAP);
		    WWWDoc.address = temp;
		    WWWDoc.post_content_type = HDOC(nhist - 1).post_content_type;
		    WWWDoc.bookmark = HDOC(nhist - 1).bookmark;
		    WWWDoc.isHEAD = HDOC(nhist - 1).isHEAD;
		    WWWDoc.safe = HDOC(nhist - 1).safe;
		    thatparent =
			HTAnchor_findAddress(&WWWDoc);
		    FREE(temp);
		} else {
		    WWWDoc.address = HDOC(nhist - 1).address;
		}
		if (!thatparent) {	/* if not yet done */
		    WWWDoc.post_data = HDOC(nhist - 1).post_data;
		    WWWDoc.post_content_type = HDOC(nhist - 1).post_content_type;
		    WWWDoc.bookmark = HDOC(nhist - 1).bookmark;
		    WWWDoc.isHEAD = HDOC(nhist - 1).isHEAD;
		    WWWDoc.safe = HDOC(nhist - 1).safe;
		    thatparent =
			HTAnchor_findAddress(&WWWDoc);
		}
		/* In addition to equality of the ParentAnchors, require
		 * that IF we have a HTMainText (i.e., it wasn't just
		 * HTuncache'd by mainloop), THEN it has to be consistent
		 * with what we are trying to push.
		 *
		 * This may be overkill...  - kw
		 */
		if (thatparent == thisparent &&
		    (!HTMainText || HTMainAnchor == thisparent)
		    ) {
		    HDOC(nhist).internal_link = TRUE;
		    history[nhist].intern_seq_start =
			history[nhist - 1].intern_seq_start >= 0 ?
			history[nhist - 1].intern_seq_start : nhist - 1;
		    CTRACE((tfp, "\nLYpush: pushed as internal link, OK\n"));
		}
	    }
	}
	if (!HDOC(nhist).internal_link) {
	    CTRACE((tfp, "\nLYpush: push as internal link requested, %s\n",
		    "but didn't check out!"));
	}
    }
    CTRACE((tfp, "\nLYpush[%d]: address:%s\n        title:%s\n",
	    nhist, doc->address, doc->title));
    nhist++;
    return 1;
}

/*
 * Pop the previous filename, link and line number from the history list.
 */
void LYpop(DocInfo *doc)
{
    if (nhist > 0) {
	clean_extra_history();
	nhist--;

	LYFreeDocInfo(doc);

	*doc = HDOC(nhist);

#ifdef DISP_PARTIAL
	/* assume we pop the 'doc' to show it soon... */
	LYSetNewline(doc->line);	/* reinitialize */
#endif /* DISP_PARTIAL */
	CTRACE((tfp, "LYpop[%d]: address:%s\n     title:%s\n",
		nhist, doc->address, doc->title));
    }
}

/*
 * Move to the previous filename, link and line number from the history list.
 */
void LYhist_prev(DocInfo *doc)
{
    trace_history("LYhist_prev");
    if (nhist > 0 && (nhist_extra || nhist < size_history)) {
	nhist--;
	nhist_extra++;
	LYpop_num(nhist, doc);
	trace_history("...LYhist_prev");
    }
}

/*
 * Called before calling LYhist_prev().
 */
void LYhist_prev_register(DocInfo *doc)
{
    trace_history("LYhist_prev_register");
    if (nhist > 1) {
	if (nhist_extra) {	/* Make something to return back */
	    /* Store the new position */
	    HDOC(nhist).link = doc->link;
	    HDOC(nhist).line = doc->line;
	} else if (LYpush(doc, 0)) {
	    nhist--;
	    nhist_extra++;
	}
	trace_history("...LYhist_prev_register");
    }
}

/*
 * Move to the next filename, link and line number from the history.
 */
int LYhist_next(DocInfo *doc, DocInfo *newdoc)
{
    if (nhist_extra <= 1)	/* == 1 when we are the last one */
	return 0;
    /* Store the new position */
    HDOC(nhist).link = doc->link;
    HDOC(nhist).line = doc->line;
    LYAllocHistory(nhist);
    nhist++;
    nhist_extra--;
    LYpop_num(nhist, newdoc);
    return 1;
}

/*
 * Pop the specified hist entry, link and line number from the history list but
 * don't actually remove the entry, just return it.
 * (This procedure is badly named :)
 */
void LYpop_num(int number,
	       DocInfo *doc)
{
    if (number >= 0 && nhist + nhist_extra > number) {
	doc->link = HDOC(number).link;
	doc->line = HDOC(number).line;
	StrAllocCopy(doc->title, HDOC(number).title);
	StrAllocCopy(doc->address, HDOC(number).address);
	BStrCopy(doc->post_data, HDOC(number).post_data);
	StrAllocCopy(doc->post_content_type, HDOC(number).post_content_type);
	StrAllocCopy(doc->bookmark, HDOC(number).bookmark);
	doc->isHEAD = HDOC(number).isHEAD;
	doc->safe = HDOC(number).safe;
	doc->internal_link = HDOC(number).internal_link;	/* ?? */
#ifdef DISP_PARTIAL
	/* assume we pop the 'doc' to show it soon... */
	LYSetNewline(doc->line);	/* reinitialize */
#endif /* DISP_PARTIAL */
	if (TRACE) {
	    CTRACE((tfp, "LYpop_num(%d)\n", number));
	    CTRACE((tfp, "  link    %d\n", doc->link));
	    CTRACE((tfp, "  line    %d\n", doc->line));
	    CTRACE((tfp, "  title   %s\n", NonNull(doc->title)));
	    CTRACE((tfp, "  address %s\n", NonNull(doc->address)));
	}
    }
}

/*
 * This procedure outputs the history buffer into a temporary file.
 */
int showhistory(char **newfile)
{
    static char tempfile[LY_MAXPATH] = "\0";
    char *Title = NULL;
    int x = 0;
    FILE *fp0;

    if ((fp0 = InternalPageFP(tempfile, TRUE)) == 0)
	return (-1);

    LYLocalFileToURL(newfile, tempfile);

    LYforce_HTML_mode = TRUE;	/* force this file to be HTML */
    LYforce_no_cache = TRUE;	/* force this file to be new */

    BeginInternalPage(fp0, HISTORY_PAGE_TITLE, HISTORY_PAGE_HELP);

    fprintf(fp0, "<p align=right> <a href=\"%s\">[%s]</a>\n",
	    STR_LYNXMESSAGES, STATUSLINES_TITLE);

    fprintf(fp0, "<pre>\n");

    fprintf(fp0, "<em>%s</em>\n", gettext("You selected:"));
    for (x = nhist + nhist_extra - 1; x >= 0; x--) {
	/*
	 * The number of the document in the hist stack, its title in a link,
	 * and its address.  - FM
	 */
	if (HDOC(x).title != NULL) {
	    StrAllocCopy(Title, HDOC(x).title);
	    LYEntify(&Title, TRUE);
	    LYTrimLeading(Title);
	    LYTrimTrailing(Title);
	    if (*Title == '\0')
		StrAllocCopy(Title, NO_TITLE);
	} else {
	    StrAllocCopy(Title, NO_TITLE);
	}
	fprintf(fp0,
		"%s<em>%d</em>. <tab id=t%d><a href=\"%s%d\">%s</a>\n",
		(x > 99 ? "" : x < 10 ? "  " : " "),
		x, x, STR_LYNXHIST, x, Title);
	if (HDOC(x).address != NULL) {
	    StrAllocCopy(Title, HDOC(x).address);
	    LYEntify(&Title, TRUE);
	} else {
	    StrAllocCopy(Title, gettext("(no address)"));
	}
	if (HDOC(x).internal_link) {
	    if (history[x].intern_seq_start == history[nhist - 1].intern_seq_start)
		StrAllocCat(Title, gettext(" (internal)"));
	    else
		StrAllocCat(Title, gettext(" (was internal)"));
	}
	fprintf(fp0, "<tab to=t%d>%s\n", x, Title);
    }
    fprintf(fp0, "</pre>\n");
    EndInternalPage(fp0);

    LYCloseTempFP(fp0);
    FREE(Title);
    return (0);
}

/*
 * This function makes the history page seem like any other type of file since
 * more info is needed than can be provided by the normal link structure.  We
 * saved out the history number to a special URL.
 *
 * The info looks like:  LYNXHIST:#
 */
BOOLEAN historytarget(DocInfo *newdoc)
{
    int number;
    DocAddress WWWDoc;
    HTParentAnchor *tmpanchor;
    HText *text;
    BOOLEAN treat_as_intern = FALSE;

    if ((!newdoc || !newdoc->address) ||
	strlen(newdoc->address) < 10 || !isdigit(UCH(*(newdoc->address + 9))))
	return (FALSE);

    if ((number = atoi(newdoc->address + 9)) > nhist + nhist_extra || number < 0)
	return (FALSE);

    /*
     * Optimization: assume we came from the History Page,
     * so never return back - always a new version next time.
     * But check first whether HTMainText is really the History
     * Page document - in some obscure situations this may not be
     * the case.  If HTMainText seems to be a History Page document,
     * also check that it really hasn't been pushed. - LP, kw
     */
    if (HTMainText && nhist > 0 &&
	!strcmp(HTLoadedDocumentTitle(), HISTORY_PAGE_TITLE) &&
	LYIsUIPage3(HTLoadedDocumentURL(), UIP_HISTORY, 0) &&
	strcmp(HTLoadedDocumentURL(), HDOC(nhist - 1).address)) {
	HTuncache_current_document();	/* don't waste the cache */
    }

    LYpop_num(number, newdoc);
    if (((newdoc->internal_link &&
	  history[number].intern_seq_start == history[nhist - 1].intern_seq_start)
	 || (number < nhist - 1 &&
	     HDOC(nhist - 1).internal_link &&
	     number == history[nhist - 1].intern_seq_start))
	&& !(LYforce_no_cache == TRUE && LYoverride_no_cache == FALSE)) {
	if (track_internal_links) {
	    LYforce_no_cache = FALSE;
	    LYinternal_flag = TRUE;
	    newdoc->internal_link = TRUE;
	    treat_as_intern = TRUE;
	}
    } else {
	newdoc->internal_link = FALSE;
    }
    /*
     * If we have POST content, and have LYresubmit_posts set or have no_cache
     * set or do not still have the text cached, ask the user whether to
     * resubmit the form.  - FM
     */
    if (newdoc->post_data != NULL) {
	WWWDoc.address = newdoc->address;
	WWWDoc.post_data = newdoc->post_data;
	WWWDoc.post_content_type = newdoc->post_content_type;
	WWWDoc.bookmark = newdoc->bookmark;
	WWWDoc.isHEAD = newdoc->isHEAD;
	WWWDoc.safe = newdoc->safe;
	tmpanchor = HTAnchor_findAddress(&WWWDoc);
	text = (HText *) HTAnchor_document(tmpanchor);
	if (((((LYresubmit_posts == TRUE) ||
	       (LYforce_no_cache == TRUE &&
		LYoverride_no_cache == FALSE)) &&
	      !(treat_as_intern && !reloading)) ||
	     text == NULL) &&
	    (isLYNXIMGMAP(newdoc->address) ||
	     HTConfirm(CONFIRM_POST_RESUBMISSION) == TRUE)) {
	    LYforce_no_cache = TRUE;
	    LYoverride_no_cache = FALSE;
	} else if (text != NULL) {
	    LYforce_no_cache = FALSE;
	    LYoverride_no_cache = TRUE;
	} else {
	    HTInfoMsg(CANCELLED);
	    return (FALSE);
	}
    }

    if (number != 0)
	StrAllocCat(newdoc->title, gettext(" (From History)"));
    return (TRUE);
}

/*
 * This procedure outputs the Visited Links list into a temporary file.  - FM
 * Returns links's number to make active (1-based), or 0 if not required.
 */
int LYShowVisitedLinks(char **newfile)
{
    static char tempfile[LY_MAXPATH] = "\0";
    char *Title = NULL;
    char *Address = NULL;
    int x, tot;
    FILE *fp0;
    VisitedLink *vl;
    HTList *cur = Visited_Links;
    int offset;
    int ret = 0;
    const char *arrow, *post_arrow;

    if (!cur)
	return (-1);

    if ((fp0 = InternalPageFP(tempfile, TRUE)) == 0)
	return (-1);

    LYLocalFileToURL(newfile, tempfile);
    LYRegisterUIPage(*newfile, UIP_VLINKS);

    LYforce_HTML_mode = TRUE;	/* force this file to be HTML */
    LYforce_no_cache = TRUE;	/* force this file to be new */

    BeginInternalPage(fp0, VISITED_LINKS_TITLE, VISITED_LINKS_HELP);

#ifndef NO_OPTION_FORMS
    fprintf(fp0, "<form action=\"%s\" method=\"post\">\n", STR_LYNXOPTIONS);
    LYMenuVisitedLinks(fp0, FALSE);
    fprintf(fp0, "<input type=\"submit\" value=\"Accept Changes\">\n");
    fprintf(fp0, "</form>\n");
    fprintf(fp0, "<P>\n");
#endif

    fprintf(fp0, "<pre>\n");
    fprintf(fp0, "<em>%s</em>\n",
	    gettext("You visited (POSTs, bookmark, menu and list files excluded):"));
    if (Visited_Links_As & VISITED_LINKS_REVERSE)
	tot = x = HTList_count(Visited_Links);
    else
	tot = x = -1;

    if (Visited_Links_As & VISITED_LINKS_AS_TREE) {
	vl = First_tree;
    } else if (Visited_Links_As & VISITED_LINKS_AS_LATEST) {
	if (Visited_Links_As & VISITED_LINKS_REVERSE)
	    vl = Latest_last.prev_latest;
	else
	    vl = Latest_first.next_latest;
	if (vl == &Latest_last || vl == &Latest_first)
	    vl = NULL;
    } else {
	if (Visited_Links_As & VISITED_LINKS_REVERSE)
	    vl = Last_by_first;
	else
	    vl = (VisitedLink *) HTList_nextObject(cur);
    }
    while (NULL != vl) {
	/*
	 * The number of the document (most recent highest), its title in a
	 * link, and its address.  - FM
	 */
	post_arrow = arrow = "";
	if (Visited_Links_As & VISITED_LINKS_REVERSE)
	    x--;
	else
	    x++;
	if (vl == PrevActiveVisitedLink) {
	    if (Visited_Links_As & VISITED_LINKS_REVERSE)
		ret = tot - x + 2;
	    else
		ret = x + 3;
	}
	if (vl == PrevActiveVisitedLink) {
	    post_arrow = "<A NAME=current></A>";
	    /* Otherwise levels 0 and 1 look the same when with arrow: */
	    arrow = (vl->level && (Visited_Links_As & VISITED_LINKS_AS_TREE))
		? "==>" : "=>";
	    StrAllocCat(*newfile, "#current");
	}
	if (Visited_Links_As & VISITED_LINKS_AS_TREE) {
	    offset = 2 * vl->level;
	    if (offset > 24)
		offset = (offset + 24) / 2;
	    if (offset > LYcols * 3 / 4)
		offset = LYcols * 3 / 4;
	} else
	    offset = (x > 99 ? 0 : x < 10 ? 2 : 1);
	if (non_empty(vl->title)) {
	    StrAllocCopy(Title, vl->title);
	    LYEntify(&Title, TRUE);
	    LYTrimLeading(Title);
	    LYTrimTrailing(Title);
	    if (*Title == '\0')
		StrAllocCopy(Title, NO_TITLE);
	} else {
	    StrAllocCopy(Title, NO_TITLE);
	}
	if (non_empty(vl->address)) {
	    StrAllocCopy(Address, vl->address);
	    LYEntify(&Address, FALSE);
	    fprintf(fp0,
		    "%-*s%s<em>%d</em>. <tab id=t%d><a href=\"%s\">%s</a>\n",
		    offset, arrow, post_arrow,
		    x, x, Address, Title);
	} else {
	    fprintf(fp0,
		    "%-*s%s<em>%d</em>. <tab id=t%d><em>%s</em>\n",
		    offset, arrow, post_arrow,
		    x, x, Title);
	}
	if (Address != NULL) {
	    StrAllocCopy(Address, vl->address);
	    LYEntify(&Address, TRUE);
	}
	fprintf(fp0, "<tab to=t%d>%s\n", x,
		((Address != NULL) ? Address : gettext("(no address)")));
	if (Visited_Links_As & VISITED_LINKS_AS_TREE)
	    vl = vl->next_tree;
	else if (Visited_Links_As & VISITED_LINKS_AS_LATEST) {
	    if (Visited_Links_As & VISITED_LINKS_REVERSE)
		vl = vl->prev_latest;
	    else
		vl = vl->next_latest;
	    if (vl == &Latest_last || vl == &Latest_first)
		vl = NULL;
	} else {
	    if (Visited_Links_As & VISITED_LINKS_REVERSE)
		vl = vl->prev_first;
	    else
		vl = (VisitedLink *) HTList_nextObject(cur);
	}
    }
    fprintf(fp0, "</pre>\n");
    EndInternalPage(fp0);

    LYCloseTempFP(fp0);
    FREE(Title);
    FREE(Address);
    return (ret);
}

/*
 * Keep cycled buffer for statusline messages.
 * But allow user to change how big it will be from userdefs.h
 */
#ifndef STATUSBUFSIZE
#define STATUSBUFSIZE   40
#endif

int status_buf_size = STATUSBUFSIZE;

static char **buffstack;
static int topOfStack = 0;

#ifdef LY_FIND_LEAKS
static void free_messages_stack(void)
{
    if (buffstack != 0) {
	topOfStack = status_buf_size;

	while (--topOfStack >= 0) {
	    FREE(buffstack[topOfStack]);
	}
	FREE(buffstack);
    }
}
#endif

static void to_stack(char *str)
{
    /*
     * Cycle buffer:
     */
    if (topOfStack >= status_buf_size) {
	topOfStack = 0;
    }

    /*
     * Register string.
     */
    if (buffstack == 0)
	buffstack = typecallocn(char *, (size_t) status_buf_size);

    FREE(buffstack[topOfStack]);
    buffstack[topOfStack] = str;
    topOfStack++;
#ifdef LY_FIND_LEAKS
    if (!already_registered_free_messages_stack) {
	already_registered_free_messages_stack = 1;
	atexit(free_messages_stack);
    }
#endif
    if (topOfStack >= status_buf_size) {
	topOfStack = 0;
    }
}

/*
 * Dump statusline messages into the buffer.
 * Called from mainloop() when exit immediately with an error:
 * can not access startfile (first_file) so a couple of alert messages
 * will be very useful on exit.
 * (Don't expect everyone will look a trace log in case of difficulties:))
 */
void LYstatusline_messages_on_exit(char **buf)
{
    int i;

    if (buffstack != 0) {
	StrAllocCat(*buf, "\n");
	/* print messages in chronological order:
	 * probably a single message but let's do it.
	 */
	i = topOfStack - 1;
	while (++i < status_buf_size) {
	    if (buffstack[i] != NULL) {
		StrAllocCat(*buf, buffstack[i]);
		StrAllocCat(*buf, "\n");
	    }
	}
	i = -1;
	while (++i < topOfStack) {
	    if (buffstack[i] != NULL) {
		StrAllocCat(*buf, buffstack[i]);
		StrAllocCat(*buf, "\n");
	    }
	}
    }
}

void LYstore_message2(const char *message,
		      const char *argument)
{

    if (message != NULL) {
	char *temp = NULL;

	HTSprintf0(&temp, message, NonNull(argument));
	to_stack(temp);
    }
}

void LYstore_message(const char *message)
{
    if (message != NULL) {
	char *temp = NULL;

	StrAllocCopy(temp, message);
	to_stack(temp);
    }
}

/*     LYLoadMESSAGES
 *     --------------
 *     Create a text/html stream with a list of recent statusline messages.
 *     LYNXMESSAGES:/ internal page.
 *     [implementation based on LYLoadKeymap()].
 */

static int LYLoadMESSAGES(const char *arg GCC_UNUSED,
			  HTParentAnchor *anAnchor,
			  HTFormat format_out,
			  HTStream *sink)
{
    HTFormat format_in = WWW_HTML;
    HTStream *target = NULL;
    char *buf = NULL;
    int nummsg = 0;

    int i;
    char *temp = NULL;

    if (buffstack != 0) {
	i = status_buf_size;
	while (--i >= 0) {
	    if (buffstack[i] != NULL)
		nummsg++;
	}
    }

    /*
     * Set up the stream.  - FM
     */
    target = HTStreamStack(format_in, format_out, sink, anAnchor);

    if (!target || target == NULL) {
	HTSprintf0(&buf, CANNOT_CONVERT_I_TO_O,
		   HTAtom_name(format_in), HTAtom_name(format_out));
	HTAlert(buf);
	FREE(buf);
	return (HT_NOT_LOADED);
    }
    anAnchor->no_cache = TRUE;

#define PUTS(buf)    (*target->isa->put_block)(target, buf, (int) strlen(buf))

    HTSprintf0(&buf, "<html>\n<head>\n");
    PUTS(buf);
    /*
     * This page is a list of messages in display character set.
     */
    HTSprintf0(&buf, "<META %s content=\"text/html;charset=%s\">\n",
	       "http-equiv=\"content-type\"",
	       LYCharSet_UC[current_char_set].MIMEname);
    PUTS(buf);
    HTSprintf0(&buf, "<title>%s</title>\n</head>\n<body>\n",
	       STATUSLINES_TITLE);
    PUTS(buf);

    if (nummsg != 0) {
	HTSprintf0(&buf, "<ol>\n");
	PUTS(buf);
	/* print messages in reverse order: */
	i = topOfStack;
	while (--i >= 0) {
	    if (buffstack[i] != NULL) {
		StrAllocCopy(temp, buffstack[i]);
		LYEntify(&temp, TRUE);
		HTSprintf0(&buf, "<li value=%d> <em>%s</em>\n", nummsg, temp);
		nummsg--;
		PUTS(buf);
	    }
	}
	i = status_buf_size;
	while (--i >= topOfStack) {
	    if (buffstack[i] != NULL) {
		StrAllocCopy(temp, buffstack[i]);
		LYEntify(&temp, TRUE);
		HTSprintf0(&buf, "<li value=%d> <em>%s</em>\n", nummsg, temp);
		nummsg--;
		PUTS(buf);
	    }
	}
	FREE(temp);
	HTSprintf0(&buf, "</ol>\n</body>\n</html>\n");
    } else {
	HTSprintf0(&buf, "<p>%s\n</body>\n</html>\n",
		   gettext("(No messages yet)"));
    }
    PUTS(buf);

    (*target->isa->_free) (target);
    FREE(buf);
    return (HT_LOADED);
}

#ifdef GLOBALDEF_IS_MACRO
#define _LYMESSAGES_C_GLOBALDEF_1_INIT { "LYNXMESSAGES", LYLoadMESSAGES, 0}
GLOBALDEF(HTProtocol, LYLynxStatusMessages, _LYMESSAGES_C_GLOBALDEF_1_INIT);
#else
GLOBALDEF HTProtocol LYLynxStatusMessages =
{"LYNXMESSAGES", LYLoadMESSAGES, 0};
#endif /* GLOBALDEF_IS_MACRO */
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYHistory.c,v 1.75 2009/06/07 16:57:43 tom Exp $
d114 2
a115 2
	    (!strncmp(doc->address, "LYNX", 4) ||
	     !strncmp(doc->address, "file://localhost/", 17)))) {
d122 1
a122 1
	    (related = 0) ||
d131 1
d134 1
a134 1
#ifdef EXP_ADDRLIST_PAGE
d183 3
d247 1
a247 1
	if (strncmp(docurl, "file://localhost/", 17) != 0 ||
d351 1
a351 1
	want = (unsigned) size_history *sizeof(*history);
d354 1
a354 1
	    history = (HistInfo *) malloc(want);
d356 1
a356 1
	    history = (HistInfo *) realloc(history, want);
d360 3
d373 1
a373 1
int LYpush(DocInfo *doc, BOOLEAN force_push)
d766 6
a771 6
#ifndef DONT_TRACK_INTERNAL_LINKS
	LYforce_no_cache = FALSE;
	LYinternal_flag = TRUE;
	newdoc->internal_link = TRUE;
	treat_as_intern = TRUE;
#endif
d999 1
a999 1
	buffstack = typecallocn(char *, status_buf_size);
a1075 4

struct _HTStream {
    HTStreamClass *isa;
};
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d35 1
a35 1
static HTList *Visited_Links = NULL;	/* List of safe popped docs. */
d37 1
d347 2
a348 1
	want = size_history * sizeof(*history);
a356 1
	    CTRACE((tfp, "...LYAllocHistory clearing %d\n", save));
d390 2
d393 1
a393 1
    if (nhist > 1 && are_identical(&(history[nhist - 1]), doc)) {
d954 1
d956 1
d958 5
a962 1
static char *buffstack[STATUSBUFSIZE];
d968 2
a969 1
    topOfStack = STATUSBUFSIZE;
d971 4
a974 2
    while (--topOfStack >= 0) {
	FREE(buffstack[topOfStack]);
d984 1
a984 1
    if (topOfStack >= STATUSBUFSIZE) {
d991 3
d1003 1
a1003 1
    if (topOfStack >= STATUSBUFSIZE) {
d1019 11
a1029 9
    StrAllocCat(*buf, "\n");
    /* print messages in chronological order:
     * probably a single message but let's do it.
     */
    i = topOfStack - 1;
    while (++i < STATUSBUFSIZE) {
	if (buffstack[i] != NULL) {
	    StrAllocCat(*buf, buffstack[i]);
	    StrAllocCat(*buf, "\n");
d1031 6
a1036 6
    }
    i = -1;
    while (++i < topOfStack) {
	if (buffstack[i] != NULL) {
	    StrAllocCat(*buf, buffstack[i]);
	    StrAllocCat(*buf, "\n");
d1087 6
a1092 4
    i = STATUSBUFSIZE;
    while (--i >= 0) {
	if (buffstack[i] != NULL)
	    nummsg++;
d1109 1
a1109 1
#define PUTS(buf)    (*target->isa->put_block)(target, buf, strlen(buf))
d1138 1
a1138 1
	i = STATUSBUFSIZE;
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d32 9
a40 9
PUBLIC HTList * Visited_Links = NULL;	/* List of safe popped docs. */
PUBLIC int Visited_Links_As = VISITED_LINKS_AS_LATEST | VISITED_LINKS_REVERSE;
PRIVATE VisitedLink *PrevVisitedLink = NULL;	    /* NULL on auxillary */
PRIVATE VisitedLink *PrevActiveVisitedLink = NULL;  /* Last non-auxillary */
PRIVATE VisitedLink Latest_first;
PRIVATE VisitedLink Latest_last;
PRIVATE VisitedLink *Latest_tree;
PRIVATE VisitedLink *First_tree;
PRIVATE VisitedLink *Last_by_first;
d45 2
a46 2
PRIVATE int already_registered_free_messages_stack = 0;
PRIVATE int already_registered_clean_all_history = 0;
d51 1
a51 1
 *  Utility for freeing the list of visited links. - FM
d53 1
a53 1
PRIVATE void Visited_Links_free NOARGS
d63 1
a63 1
    while (NULL != (vl = (VisitedLink *)HTList_nextObject(cur))) {
d78 1
a78 2
PRIVATE void trace_history ARGS1(
	CONST char *,	tag)
d82 1
a82 1
		     tag, nhist, MAXHIST, nhist_extra));
d87 1
a87 1
#define trace_history(tag) /* nothing */
d91 2
a92 2
 *  Utility for listing visited links, making any repeated
 *  links the most current in the list. - FM
d94 1
a94 2
PUBLIC void LYAddVisitedLink ARGS1(
	DocInfo *,	doc)
d96 1
a96 1
    VisitedLink *new;
d98 1
a98 1
    char *title = (doc->title ? doc->title : NO_TITLE);
d100 1
a100 1
    if (!(doc->address && *doc->address)) {
d106 1
a106 2
     *	Exclude POST or HEAD replies, and bookmark, menu
     *	or list files. - FM
d109 3
a111 3
	(/* special url or a temp file */
	 (!strncmp(doc->address, "LYNX", 4) ||
	  !strncmp(doc->address, "file://localhost/", 17)))) {
d114 5
a118 5
	if (	LYIsUIPage(doc->address, UIP_HISTORY) ||
		LYIsUIPage(doc->address, UIP_VLINKS) ||
		LYIsUIPage(doc->address, UIP_SHOWINFO) ||
		isLYNXMESSAGES(doc->address) ||
			(related = 0)	||
d120 3
a122 3
		LYIsUIPage(doc->address, UIP_DIRED_MENU) ||
		LYIsUIPage(doc->address, UIP_UPLOAD_OPTIONS) ||
		LYIsUIPage(doc->address, UIP_PERMIT_OPTIONS) ||
d124 5
a128 5
		LYIsUIPage(doc->address, UIP_PRINT_OPTIONS) ||
		LYIsUIPage(doc->address, UIP_DOWNLOAD_OPTIONS) ||
		LYIsUIPage(doc->address, UIP_OPTIONS_MENU) ||
		isLYNXKEYMAP(doc->address) ||
		LYIsUIPage(doc->address, UIP_LIST_PAGE) ||
d130 1
a130 1
		LYIsUIPage(doc->address, UIP_ADDRLIST_PAGE) ||
d132 4
a135 4
		LYIsUIPage(doc->address, UIP_CONFIG_DEF) ||
		LYIsUIPage(doc->address, UIP_LYNXCFG) ||
		isLYNXCOOKIE(doc->address) ||
		LYIsUIPage(doc->address, UIP_TRACELOG)	) {
d155 2
a156 2
    while (NULL != (new = (VisitedLink *)HTList_nextObject(cur))) {
	if (!strcmp(NonNull(new->address),
d158 1
a158 1
	    PrevVisitedLink = PrevActiveVisitedLink = new;
d160 1
a160 1
	    if (new->next_latest == &Latest_last)	/* optimization */
d164 2
a165 2
	    new->prev_latest->next_latest = new->next_latest;
	    new->next_latest->prev_latest = new->prev_latest;
d168 4
a171 4
	    Latest_last.prev_latest->next_latest = new;
	    new->prev_latest = Latest_last.prev_latest;
	    new->next_latest = &Latest_last;
	    Latest_last.prev_latest = new;
d176 1
a176 1
    if ((new = typecalloc(VisitedLink)) == NULL)
d178 2
a179 2
    StrAllocCopy(new->address, doc->address);
    LYformTitle(&(new->title), title);
d182 3
a184 3
    HTList_appendObject(Visited_Links, new);	/* At end */
    new->prev_first = Last_by_first;
    Last_by_first = new;
d197 3
a199 3
	    Latest_tree = new;
	new->next_tree = a->next_tree;
	a->next_tree = new;
d201 1
a201 1
	new->level = PrevVisitedLink->level + 1;
d204 4
a207 4
	    Latest_tree->next_tree = new;
	new->level = 0;
	new->next_tree = NULL;
	Latest_tree = new;
d209 1
a209 1
    PrevVisitedLink = PrevActiveVisitedLink = new;
d211 1
a211 1
	First_tree = new;
d214 4
a217 4
    Latest_last.prev_latest->next_latest = new;
    new->prev_latest = Latest_last.prev_latest;
    new->next_latest = &Latest_last;
    Latest_last.prev_latest = new;
d223 3
a225 4
 *  Returns true if this is a page that we would push onto the stack if not
 *  forced.  If docurl is NULL, only the title is considered; otherwise
 *  also check the URL whether it is (likely to be) a generated special
 *  page.
d227 2
a228 3
PUBLIC BOOLEAN LYwouldPush ARGS2(
	CONST char *,	title,
	CONST char *,	docurl)
d233 2
a234 2
     *  All non-pushable generated pages have URLs that begin with
     *  "file://localhost/" and end with HTML_SUFFIX. - kw
d238 1
d243 2
a244 2
	     *  If it is not a local HTML file, it may be a Web page that
	     *  accidentally has the same title.  So return TRUE now. - kw
d252 2
a253 2
		! (LYIsUIPage(docurl, UIP_HISTORY)
		|| LYIsUIPage(docurl, UIP_PRINT_OPTIONS)
d255 3
a257 3
		|| LYIsUIPage(docurl, UIP_DIRED_MENU)
		|| LYIsUIPage(docurl, UIP_UPLOAD_OPTIONS)
		|| LYIsUIPage(docurl, UIP_PERMIT_OPTIONS)
d262 2
a263 2
		! (!strcmp(title, HISTORY_PAGE_TITLE)
		|| !strcmp(title, PRINT_OPTIONS_TITLE)
d265 3
a267 3
		|| !strcmp(title, DIRED_MENU_TITLE)
		|| !strcmp(title, UPLOAD_OPTIONS_TITLE)
		|| !strcmp(title, PERMIT_OPTIONS_TITLE)
d277 1
a277 2
PUBLIC void LYFreePostData ARGS1(
    DocInfo *,		doc)
d286 1
a286 2
PUBLIC void LYFreeDocInfo ARGS1(
    DocInfo *,		doc)
d295 1
a295 1
 *  Free the information in the last history entry.
d297 1
a297 1
PRIVATE void clean_extra_history NOARGS
d313 1
a313 1
PRIVATE void clean_all_history NOARGS
d326 31
a356 9
PRIVATE int are_identical ARGS2(
	HistInfo *,	doc,
	DocInfo *,	doc1)
{
     return (	STREQ(doc1->address, doc->hdoc.address)
		&& BINEQ(doc1->post_data, doc->hdoc.post_data)
		&& !strcmp(NonNull(doc1->bookmark),
			   NonNull(doc->hdoc.bookmark))
		&& doc1->isHEAD == doc->hdoc.isHEAD );
d360 1
a360 1
 *  Push the current filename, link and line number onto the history list.
d362 1
a362 3
PUBLIC int LYpush ARGS2(
	DocInfo *,	doc,
	BOOLEAN,	force_push)
d365 1
a365 1
     *	Don't push NULL file names.
d371 1
a371 2
     *	Check whether this is a document we
     *	don't push unless forced. - FM
d375 1
a375 1
	 *  Don't push the history, printer, or download lists.
d385 1
a385 1
     *	If file is identical to one before it, don't push it.
d387 2
a388 2
    if ( nhist > 1 && are_identical(&(history[nhist-1]), doc)) {
	if (HDOC(nhist-1).internal_link == doc->internal_link) {
d391 2
a392 2
	    HDOC(nhist-1).link = doc->link;
	    HDOC(nhist-1).line = doc->line;
d398 1
a398 1
     *	If file is identical to the current document, just move the pointer.
d400 1
a400 1
    if ( nhist_extra >= 1 && are_identical(&(history[nhist]), doc)) {
d404 1
d419 1
a419 1
     *	OK, push it if we have stack space.
d421 3
a423 3
    if (nhist < MAXHIST)  {
	HDOC(nhist).link = doc->link;
	HDOC(nhist).line = doc->line;
d425 2
a426 2
	HDOC(nhist).title = NULL;
	LYformTitle(&(HDOC(nhist).title), doc->title);
d428 2
a429 2
	HDOC(nhist).address = NULL;
	StrAllocCopy(HDOC(nhist).address, doc->address);
d431 2
a432 2
	HDOC(nhist).post_data = NULL;
	BStrCopy(HDOC(nhist).post_data, doc->post_data);
d434 43
a476 42
	HDOC(nhist).post_content_type = NULL;
	StrAllocCopy(HDOC(nhist).post_content_type, doc->post_content_type);

	HDOC(nhist).bookmark = NULL;
	StrAllocCopy(HDOC(nhist).bookmark, doc->bookmark);

	HDOC(nhist).isHEAD = doc->isHEAD;
	HDOC(nhist).safe = doc->safe;

	HDOC(nhist).internal_link = FALSE; /* by default */
	history[nhist].intern_seq_start = -1; /* by default */
	if (doc->internal_link) {
	    /* Now some tricky stuff: if the caller thinks that the doc
	       to push was the result of following an internal
	       (fragment) link, we check whether we believe it.
	       It is only accepted as valid if the immediately preceding
	       item on the history stack is actually the same document
	       except for fragment and location info.  I.e. the Parent
	       Anchors are the same.
	       Also of course this requires that this is not the first
	       history item. - kw */
	    if (nhist > 0) {
		DocAddress WWWDoc;
		HTParentAnchor *thisparent, *thatparent = NULL;
		WWWDoc.address = doc->address;
		WWWDoc.post_data = doc->post_data;
		WWWDoc.post_content_type = doc->post_content_type;
		WWWDoc.bookmark = doc->bookmark;
		WWWDoc.isHEAD = doc->isHEAD;
		WWWDoc.safe = doc->safe;
		thisparent =
		    HTAnchor_findAddress(&WWWDoc);
		/* Now find the ParentAnchor for the previous history
		** item - kw
		*/
		if (thisparent) {
		    /* If the last-pushed item is a LYNXIMGMAP but THIS one
		    ** isn't, compare the physical URLs instead. - kw
		    */
		    if (isLYNXIMGMAP(HDOC(nhist-1).address) &&
			!isLYNXIMGMAP(doc->address)) {
			WWWDoc.address = HDOC(nhist-1).address + LEN_LYNXIMGMAP;
d478 45
a522 44
		    ** If THIS item is a LYNXIMGMAP but the last-pushed one
		    ** isn't, fake it by using THIS item's address for
		    ** thatparent... - kw
		    */
		    } else if (isLYNXIMGMAP(doc->address) &&
		       !isLYNXIMGMAP(HDOC(nhist-1).address)) {
			char *temp = NULL;
			StrAllocCopy(temp, STR_LYNXIMGMAP);
			StrAllocCat(temp, doc->address + LEN_LYNXIMGMAP);
			WWWDoc.address = temp;
			WWWDoc.post_content_type = HDOC(nhist-1).post_content_type;
			WWWDoc.bookmark = HDOC(nhist-1).bookmark;
			WWWDoc.isHEAD = HDOC(nhist-1).isHEAD;
			WWWDoc.safe = HDOC(nhist-1).safe;
			thatparent =
			    HTAnchor_findAddress(&WWWDoc);
			FREE(temp);
		    } else {
			WWWDoc.address = HDOC(nhist-1).address;
		    }
		    if (!thatparent) { /* if not yet done */
			WWWDoc.post_data = HDOC(nhist-1).post_data;
			WWWDoc.post_content_type = HDOC(nhist-1).post_content_type;
			WWWDoc.bookmark = HDOC(nhist-1).bookmark;
			WWWDoc.isHEAD = HDOC(nhist-1).isHEAD;
			WWWDoc.safe = HDOC(nhist-1).safe;
			thatparent =
			    HTAnchor_findAddress(&WWWDoc);
		    }
		    /* In addition to equality of the ParentAnchors, require
		    ** that IF we have a HTMainText (i.e., it wasn't just
		    ** HTuncache'd by mainloop), THEN it has to be consistent
		    ** with what we are trying to push.
		    **   This may be overkill... - kw
		    */
		    if (thatparent == thisparent &&
			(!HTMainText || HTMainAnchor == thisparent)
			) {
			HDOC(nhist).internal_link = TRUE;
			history[nhist].intern_seq_start =
			    history[nhist-1].intern_seq_start >= 0 ?
			    history[nhist-1].intern_seq_start : nhist-1;
			CTRACE((tfp, "\nLYpush: pushed as internal link, OK\n"));
		    }
a524 4
	    if (!HDOC(nhist).internal_link) {
		CTRACE((tfp, "\nLYpush: push as internal link requested, %s\n",
			    "but didn't check out!"));
	    }
d526 3
a528 6
	CTRACE((tfp, "\nLYpush[%d]: address:%s\n        title:%s\n",
		    nhist, doc->address, doc->title));
	nhist++;
    } else {
	if (LYCursesON) {
	    HTAlert(MAXHIST_REACHED);
a529 2
	CTRACE((tfp, "\nLYpush: MAXHIST reached for:\n        address:%s\n        title:%s\n",
		    doc->address, doc->title));
d531 3
d538 1
a538 1
 *  Pop the previous filename, link and line number from the history list.
d540 1
a540 2
PUBLIC void LYpop ARGS1(
	DocInfo *,	doc)
d555 1
a555 1
		    nhist, doc->address, doc->title));
d560 1
a560 1
 *  Move to the previous filename, link and line number from the history list.
d562 1
a562 2
PUBLIC void LYhist_prev ARGS1(
	DocInfo *,	doc)
d565 1
a565 1
    if (nhist > 0 && (nhist_extra || nhist < MAXHIST)) {
d574 1
a574 1
 *  Called before calling LYhist_prev().
d576 1
a576 2
PUBLIC void LYhist_prev_register ARGS1(
	DocInfo *,	doc)
d584 3
a586 5
	} else if (nhist < MAXHIST) { /* push will fail */
	    if (LYpush(doc, 0)) {
		nhist--;
		nhist_extra++;
	    }
d593 1
a593 1
 *  Move to the next filename, link and line number from the history.
d595 1
a595 3
PUBLIC int LYhist_next ARGS2(
	DocInfo *,	doc,
	DocInfo *,	newdoc)
d602 1
d610 3
a612 3
 *  Pop the specified hist entry, link and line number from the history
 *  list but don't actually remove the entry, just return it.
 *  (This procedure is badly named :)
d614 2
a615 3
PUBLIC void LYpop_num ARGS2(
	int,		number,
	DocInfo *,	doc)
d627 1
a627 1
	doc->internal_link = HDOC(number).internal_link; /* ?? */
d632 7
d643 1
a643 1
 *  This procedure outputs the history buffer into a temporary file.
d645 1
a645 2
PUBLIC int showhistory ARGS1(
	char **,	newfile)
d653 1
a653 1
	return(-1);
d663 1
a663 1
		 STR_LYNXMESSAGES, STATUSLINES_TITLE);
d670 2
a671 2
	 *  The number of the document in the hist stack,
	 *  its title in a link, and its address. - FM
d679 1
a679 1
		StrAllocCopy(Title , NO_TITLE);
d694 1
a694 1
	    if (history[x].intern_seq_start == history[nhist-1].intern_seq_start)
d701 1
a701 1
    fprintf(fp0,"</pre>\n");
d706 1
a706 1
    return(0);
d710 5
a714 4
 *  This function makes the history page seem like any other type of
 *  file since more info is needed than can be provided by the normal
 *  link structure.  We saved out the history number to a special URL.
 *  The info looks like:  LYNXHIST:#
d716 1
a716 2
PUBLIC BOOLEAN historytarget ARGS1(
	DocInfo *,	newdoc)
d725 2
a726 2
	strlen(newdoc->address) < 10 || !isdigit(UCH(*(newdoc->address+9))))
	return(FALSE);
d728 2
a729 2
    if ((number = atoi(newdoc->address+9)) > nhist + nhist_extra || number < 0)
	return(FALSE);
d742 2
a743 2
	strcmp(HTLoadedDocumentURL(), HDOC(nhist-1).address)) {
	HTuncache_current_document();  /* don't waste the cache */
d748 4
a751 4
	  history[number].intern_seq_start == history[nhist-1].intern_seq_start) ||
	 (number < nhist-1 &&
	  HDOC(nhist-1).internal_link &&
	  number == history[nhist-1].intern_seq_start))
d763 3
a765 3
     *	If we have POST content, and have LYresubmit_posts set
     *	or have no_cache set or do not still have the text cached,
     *	ask the user whether to resubmit the form. - FM
d775 1
a775 1
	text = (HText *)HTAnchor_document(tmpanchor);
d790 1
a790 1
	    return(FALSE);
d796 1
a796 1
    return(TRUE);
d800 2
a801 2
 *  This procedure outputs the Visited Links list into a temporary file. - FM
 *  Returns links's number to make active (1-based), or 0 if not required.
d803 1
a803 2
PUBLIC int LYShowVisitedLinks ARGS1(
	char **,	newfile)
d814 1
a814 1
    char *arrow, *post_arrow;
d817 1
a817 1
	return(-1);
d820 1
a820 1
	return(-1);
d832 1
a832 1
    LYMenuVisitedLinks (fp0, FALSE);
d859 1
a859 1
	    vl = (VisitedLink *)HTList_nextObject(cur);
d863 2
a864 2
	 *  The number of the document (most recent highest),
	 *  its title in a link, and its address. - FM
d881 1
a881 1
			 ? "==>" : "=>";
d887 3
a889 3
		offset = (offset + 24)/2;
	    if (offset > LYcols * 3/4)
		offset = LYcols * 3/4;
d892 1
a892 1
	if (vl->title != NULL && *vl->title != '\0') {
d898 1
a898 1
		StrAllocCopy(Title , NO_TITLE);
d900 1
a900 1
	    StrAllocCopy(Title , NO_TITLE);
d902 1
a902 1
	if (vl->address != NULL && *vl->address != '\0') {
d920 1
a920 1
		     ((Address != NULL) ? Address : gettext("(no address)")));
d934 1
a934 1
		vl = (VisitedLink *)HTList_nextObject(cur);
d937 1
a937 1
    fprintf(fp0,"</pre>\n");
d943 1
a943 1
    return(ret);
a945 1

d947 1
a947 1
 *  Keep cycled buffer for statusline messages.
d950 2
a951 2
PRIVATE char * buffstack[STATUSBUFSIZE];
PRIVATE int topOfStack = 0;
d954 1
a954 1
PRIVATE void free_messages_stack NOARGS
d964 1
a964 1
PRIVATE void to_stack ARGS1(char *, str)
d967 1
a967 1
     *  Cycle buffer:
d974 1
a974 1
     *  Register string.
d980 1
a980 1
    if(!already_registered_free_messages_stack) {
a989 1

d997 1
a997 2
PUBLIC void LYstatusline_messages_on_exit ARGS1(
	char **,	buf)
d1021 2
a1022 4

PUBLIC void LYstore_message2 ARGS2(
	CONST char *,	message,
	CONST char *,	argument)
d1027 1
d1033 1
a1033 2
PUBLIC void LYstore_message ARGS1(
	CONST char *,	message)
d1037 1
d1044 5
a1048 5
**     --------------
**     Create a text/html stream with a list of recent statusline messages.
**     LYNXMESSAGES:/ internal page.
**     [implementation based on LYLoadKeymap()].
*/
d1050 2
a1051 3
struct _HTStream
{
    HTStreamClass * isa;
d1054 4
a1057 5
PRIVATE int LYLoadMESSAGES ARGS4 (
	CONST char *,		arg GCC_UNUSED,
	HTParentAnchor *,	anAnchor,
	HTFormat,		format_out,
	HTStream*,		sink)
d1074 1
a1074 1
     *  Set up the stream. - FM
d1080 1
a1080 1
			 HTAtom_name(format_in), HTAtom_name(format_out));
d1083 1
a1083 1
	return(HT_NOT_LOADED);
d1091 3
a1093 3
	/*
	 *  This page is a list of messages in display character set.
	 */
d1134 1
a1134 1
    (*target->isa->_free)(target);
d1136 1
a1136 1
    return(HT_LOADED);
d1141 1
a1141 1
GLOBALDEF (HTProtocol,LYLynxStatusMessages,_LYMESSAGES_C_GLOBALDEF_1_INIT);
d1143 2
a1144 1
GLOBALDEF PUBLIC HTProtocol LYLynxStatusMessages = {"LYNXMESSAGES", LYLoadMESSAGES, 0};
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d18 1
d45 5
d96 1
a96 1
	document *,	doc)
d120 1
a120 1
		!strncmp(doc->address, "LYNXMESSAGES:", 13) ||
d130 1
a130 1
		!strncmp(doc->address, "LYNXKEYMAP:", 11) ||
d137 1
a137 1
		!strncmp(doc->address, "LYNXCOOKIE:", 11) ||
d159 2
a160 2
	if (!strcmp((new->address ? new->address : ""),
		    (doc->address ? doc->address : ""))) {
a257 1
		|| LYIsUIPage(docurl, UIP_DOWNLOAD_OPTIONS)
a267 1
		|| !strcmp(title, DOWNLOAD_OPTIONS_TITLE)
d279 22
d303 1
a303 1
PRIVATE void clean_extra NOARGS
d305 1
a305 1
    trace_history("clean_extra");
d309 1
a309 5
	FREE(history[nhist].title);
	FREE(history[nhist].address);
	FREE(history[nhist].post_data);
	FREE(history[nhist].post_content_type);
	FREE(history[nhist].bookmark);
d312 1
a312 1
    trace_history("...clean_extra");
d315 17
a331 1
/* What is the relationship to are_different() from the mainloop?! */
d333 2
a334 2
	histstruct *,	doc,
	document *,	doc1)
d336 5
a340 6
     return (	STREQ(doc1->address, doc->address)
		&& !strcmp(doc1->post_data ? doc1->post_data : "",
			   doc->post_data ?  doc->post_data : "")
		&& !strcmp(doc1->bookmark ? doc1->bookmark : "",
			   doc->bookmark ?  doc->bookmark : "")
		&& doc1->isHEAD == doc->isHEAD );
d347 1
a347 1
	document *,	doc,
d375 1
a375 1
	if (history[nhist-1].internal_link == doc->internal_link) {
d378 2
a379 2
	    history[nhist-1].link = doc->link;
	    history[nhist-1].line = doc->line;
d388 2
a389 2
	history[nhist].link = doc->link;
	history[nhist].line = doc->line;
d396 7
a402 1
    clean_extra();
d408 2
a409 2
	history[nhist].link = doc->link;
	history[nhist].line = doc->line;
d411 2
a412 2
	history[nhist].title = NULL;
	LYformTitle(&(history[nhist].title), doc->title);
d414 2
a415 2
	history[nhist].address = NULL;
	StrAllocCopy(history[nhist].address, doc->address);
d417 2
a418 2
	history[nhist].post_data = NULL;
	StrAllocCopy(history[nhist].post_data, doc->post_data);
d420 2
a421 2
	history[nhist].post_content_type = NULL;
	StrAllocCopy(history[nhist].post_content_type, doc->post_content_type);
d423 2
a424 2
	history[nhist].bookmark = NULL;
	StrAllocCopy(history[nhist].bookmark, doc->bookmark);
d426 2
a427 2
	history[nhist].isHEAD = doc->isHEAD;
	history[nhist].safe = doc->safe;
d429 1
a429 1
	history[nhist].internal_link = FALSE; /* by default */
d451 1
a451 1
		    HTAnchor_parent(HTAnchor_findAddress(&WWWDoc));
d459 3
a461 3
		    if (0==strncmp(history[nhist-1].address,"LYNXIMGMAP:",11) &&
			0!=strncmp(doc->address,"LYNXIMGMAP:",11)) {
			WWWDoc.address = history[nhist-1].address + 11;
d467 2
a468 2
		    } else if ((0==strncmp(doc->address,"LYNXIMGMAP:",11) &&
		       0!=strncmp(history[nhist-1].address,"LYNXIMGMAP:",11))) {
d470 2
a471 2
			StrAllocCopy(temp, "LYNXIMGMAP:");
			StrAllocCat(temp, doc->address+11);
d473 4
a476 4
			WWWDoc.post_content_type = history[nhist-1].post_content_type;
			WWWDoc.bookmark = history[nhist-1].bookmark;
			WWWDoc.isHEAD = history[nhist-1].isHEAD;
			WWWDoc.safe = history[nhist-1].safe;
d478 1
a478 1
			    HTAnchor_parent(HTAnchor_findAddress(&WWWDoc));
d481 1
a481 1
			WWWDoc.address = history[nhist-1].address;
d484 5
a488 5
			WWWDoc.post_data = history[nhist-1].post_data;
			WWWDoc.post_content_type = history[nhist-1].post_content_type;
			WWWDoc.bookmark = history[nhist-1].bookmark;
			WWWDoc.isHEAD = history[nhist-1].isHEAD;
			WWWDoc.safe = history[nhist-1].safe;
d490 1
a490 1
			    HTAnchor_parent(HTAnchor_findAddress(&WWWDoc));
d492 6
a497 6
		/* In addition to equality of the ParentAnchors, require
		** that IF we have a HTMainText (i.e., it wasn't just
		** HTuncache'd by mainloop), THEN it has to be consistent
		** with what we are trying to push.
		**   This may be overkill... - kw
		*/
d501 1
a501 1
			history[nhist].internal_link = TRUE;
d509 1
a509 1
	    if (!history[nhist].internal_link) {
d531 1
a531 1
	document *,	doc)
d534 1
a534 1
	clean_extra();
d536 5
a540 15
	doc->link = history[nhist].link;
	doc->line = history[nhist].line;
	FREE(doc->title);
	doc->title = history[nhist].title;	 /* will be freed later */
	FREE(doc->address);
	doc->address = history[nhist].address;	 /* will be freed later */
	FREE(doc->post_data);
	doc->post_data = history[nhist].post_data;
	FREE(doc->post_content_type);
	doc->post_content_type = history[nhist].post_content_type;
	FREE(doc->bookmark);
	doc->bookmark = history[nhist].bookmark; /* will be freed later */
	doc->isHEAD = history[nhist].isHEAD;
	doc->safe = history[nhist].safe;
	doc->internal_link = history[nhist].internal_link;
d554 1
a554 1
	document *,	doc)
d569 1
a569 1
	document *,	doc)
d575 2
a576 2
	    history[nhist].link = doc->link;
	    history[nhist].line = doc->line;
d588 1
a588 1
 *  Move to the next filename, link and line number from the history list.
d591 2
a592 2
	document *,	doc,
	document *,	newdoc)
d597 2
a598 2
    history[nhist].link = doc->link;
    history[nhist].line = doc->line;
d612 1
a612 1
	document *,	doc)
d615 10
a624 10
	doc->link = history[number].link;
	doc->line = history[number].line;
	StrAllocCopy(doc->title, history[number].title);
	StrAllocCopy(doc->address, history[number].address);
	StrAllocCopy(doc->post_data, history[number].post_data);
	StrAllocCopy(doc->post_content_type, history[number].post_content_type);
	StrAllocCopy(doc->bookmark, history[number].bookmark);
	doc->isHEAD = history[number].isHEAD;
	doc->safe = history[number].safe;
	doc->internal_link = history[number].internal_link; /* ?? */
d643 1
a643 8
    if (LYReuseTempfiles) {
	fp0 = LYOpenTempRewrite(tempfile, HTML_SUFFIX, "w");
    } else {
	LYRemoveTemp(tempfile);
	fp0 = LYOpenTemp(tempfile, HTML_SUFFIX, "w");
    }
    if (fp0 == NULL) {
	HTAlert(CANNOT_OPEN_TEMP);
a644 1
    }
d653 2
a654 2
    fprintf(fp0, "<p align=right> <a href=\"LYNXMESSAGES:\">[%s]</a>\n",
		 STATUSLINES_TITLE);
d664 2
a665 2
	if (history[x].title != NULL) {
	    StrAllocCopy(Title, history[x].title);
d675 1
a675 1
		"%s<em>%d</em>. <tab id=t%d><a href=\"LYNXHIST:%d\">%s</a>\n",
d677 3
a679 3
		x, x, x, Title);
	if (history[x].address != NULL) {
	    StrAllocCopy(Title, history[x].address);
d684 1
a684 1
	if (history[x].internal_link) {
d707 1
a707 1
	document *,	newdoc)
d733 1
a733 1
	strcmp(HTLoadedDocumentURL(), history[nhist-1].address)) {
d741 1
a741 1
	  history[nhist-1].internal_link &&
d765 1
a765 1
	tmpanchor = HTAnchor_parent(HTAnchor_findAddress(&WWWDoc));
d772 1
a772 1
	    (!strncmp(newdoc->address, "LYNXIMGMAP:", 11) ||
d811 1
a811 8
    if (LYReuseTempfiles) {
	fp0 = LYOpenTempRewrite(tempfile, HTML_SUFFIX, "w");
    } else {
	LYRemoveTemp(tempfile);
	fp0 = LYOpenTemp(tempfile, HTML_SUFFIX, "w");
    }
    if (fp0 == NULL) {
	HTAlert(CANNOT_OPEN_TEMP);
a812 1
    }
d822 3
a824 14
    fprintf(fp0, "<form action=\"LYNXOPTIONS:\" method=\"post\">\n");
    fprintf(fp0, "<select name=\"visited_pages_type\">\n");
    fprintf(fp0, " <option value=\"first_visited\" %s>Sort By First Visited\n",
		 (Visited_Links_As == VISITED_LINKS_AS_FIRST_V ? "selected" : ""));
    fprintf(fp0, " <option value=\"first_visited_reversed\" %s>Reverse Sort By First Visited\n",
		 (Visited_Links_As == (VISITED_LINKS_AS_FIRST_V|VISITED_LINKS_REVERSE) ? "selected" : ""));
    fprintf(fp0, " <option value=\"visit_tree\" %s>View As Visit Tree\n",
		 (Visited_Links_As == VISITED_LINKS_AS_TREE ? "selected" : ""));
    fprintf(fp0, " <option value=\"last_visited\" %s>Sort By Last Visited\n",
		 (Visited_Links_As == VISITED_LINKS_AS_LATEST ? "selected" : ""));
    fprintf(fp0, " <option value=\"last_visited_reversed\" %s>Reverse Sort By Last Visited\n",
		 (Visited_Links_As == (VISITED_LINKS_AS_LATEST|VISITED_LINKS_REVERSE)
		   ? "selected" : ""));
    fprintf(fp0, "</select>\n");
d828 1
a944 3
#ifdef LY_FIND_LEAKS
PRIVATE int already_registered_free_messages_stack = 0;
#endif
d1024 1
a1024 1
	HTSprintf0(&temp, message, (argument == 0) ? "" : argument);
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d17 4
a20 1
#include <LYGetFile.h>
d29 1
d32 10
d52 2
d64 3
d71 14
a92 1
    VisitedLink *old;
d94 1
d96 2
a97 1
    if (!(doc->address && *doc->address))
d99 1
d108 8
a115 6
	  !strncmp(doc->address, "file://localhost/", 17))
	 && (
	!strcmp((doc->title ? doc->title : ""), HISTORY_PAGE_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), PRINT_OPTIONS_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), DOWNLOAD_OPTIONS_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), OPTIONS_TITLE) ||
d117 3
a119 3
	!strcmp((doc->title ? doc->title : ""), DIRED_MENU_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), UPLOAD_OPTIONS_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), PERMIT_OPTIONS_TITLE) ||
d121 5
a125 2
	!strcmp((doc->title ? doc->title : ""), CURRENT_KEYMAP_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), LIST_PAGE_TITLE) ||
d127 1
a127 1
	!strcmp((doc->title ? doc->title : ""), ADDRLIST_PAGE_TITLE) ||
d129 8
a136 8
	!strcmp((doc->title ? doc->title : ""), SHOWINFO_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), STATUSLINES_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), CONFIG_DEF_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), LYNXCFG_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), COOKIE_JAR_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), VISITED_LINKS_TITLE) ||
	!strcmp((doc->title ? doc->title : ""), LYNX_TRACELOG_TITLE)))) {
	return;
a138 5
    if ((new = (VisitedLink *)calloc(1, sizeof(*new))) == NULL)
	outofmem(__FILE__, "LYAddVisitedLink");
    StrAllocCopy(new->address, doc->address);
    StrAllocCopy(new->title, (doc->title ? doc->title : NO_TITLE));

d144 5
a148 2
	HTList_addObject(Visited_Links, new);
	return;
d152 18
a169 10
    while (NULL != (old = (VisitedLink *)HTList_nextObject(cur))) {
	if (!strcmp((old->address ? old->address : ""),
		    (new->address ? new->address : "")) &&
	    !strcmp((old->title ? new->title : ""),
		    (new->title ? new->title : ""))) {
	    FREE(old->address);
	    FREE(old->title);
	    HTList_removeObject(Visited_Links, old);
	    FREE(old);
	    break;
d172 43
a214 1
    HTList_addObject(Visited_Links, new);
d221 3
a223 1
 *  forced.
d225 3
a227 2
PUBLIC BOOLEAN LYwouldPush ARGS1(
	char *,	title)
d229 35
a263 3
    return (!strcmp(title, HISTORY_PAGE_TITLE)
	 || !strcmp(title, PRINT_OPTIONS_TITLE)
	 || !strcmp(title, DOWNLOAD_OPTIONS_TITLE)
d265 3
a267 3
	 || !strcmp(title, DIRED_MENU_TITLE)
	 || !strcmp(title, UPLOAD_OPTIONS_TITLE)
	 || !strcmp(title, PERMIT_OPTIONS_TITLE)
d269 35
a303 3
	 )
	 ? FALSE
	 : TRUE;
d309 1
a309 1
PUBLIC void LYpush ARGS2(
d317 1
a317 1
	return;
d327 1
a327 1
	if (!LYwouldPush(doc->title)) {
d330 1
a330 1
	    return;
d337 1
a337 11
    if (nhist> 1 &&
	STREQ(history[nhist-1].address, doc->address) &&
	!strcmp(history[nhist-1].post_data ?
		history[nhist-1].post_data : "",
		doc->post_data ?
		doc->post_data : "") &&
	!strcmp(history[nhist-1].bookmark ?
		history[nhist-1].bookmark : "",
		doc->bookmark ?
		doc->bookmark : "") &&
	history[nhist-1].isHEAD == doc->isHEAD) {
d343 1
a343 1
	    return;
d346 15
d367 1
d369 2
a370 1
	StrAllocCopy(history[nhist].title, doc->title);
d373 1
d376 1
d379 1
d382 1
d462 1
a462 1
			CTRACE(tfp, "\nLYpush: pushed as internal link, OK\n");
d467 2
a468 2
		CTRACE(tfp, "\nLYpush: push as internal link requested, %s\n",
			    "but didn't check out!");
d471 2
a472 2
	CTRACE(tfp, "\nLYpush[%d]: address:%s\n        title:%s\n",
		    nhist, doc->address, doc->title);
d478 2
a479 2
	CTRACE(tfp, "\nLYpush: MAXHIST reached for:\n        address:%s\n        title:%s\n",
		    doc->address, doc->title);
d481 1
d491 1
d510 1
a510 1
	Newline_partial = doc->line;	/* reinitialize */
d512 39
a550 2
	CTRACE(tfp, "LYpop[%d]: address:%s\n     title:%s\n",
		    nhist, doc->address, doc->title);
d555 18
d581 1
a581 1
    if (number >= 0 && nhist > number) {
d594 1
a594 1
	Newline_partial = doc->line;	/* reinitialize */
d605 1
a605 1
    static char tempfile[LY_MAXPATH];
d610 7
a616 2
    LYRemoveTemp(tempfile);
    if ((fp0 = LYOpenTemp(tempfile, HTML_SUFFIX, "w")) == NULL) {
d628 1
a628 1
    fprintf(fp0, "<tr align=right> <a href=\"LYNXMESSAGES:\">[%s]</a> </tr>\n",
d634 1
a634 1
    for (x = nhist-1; x >= 0; x--) {
d691 1
a691 1
	strlen(newdoc->address) < 10 || !isdigit(*(newdoc->address+9)))
d694 1
a694 1
    if ((number = atoi(newdoc->address+9)) > nhist || number < 0)
d700 4
d705 6
a710 1
    HTuncache_current_document();  /* don't waste the cache */
d766 2
a767 2
 *  This procedure outputs the Visited Links
 *  list into a temporary file. - FM
d772 1
a772 1
    static char tempfile[LY_MAXPATH];
d775 1
a775 1
    int x;
d779 3
d786 7
a792 2
    LYRemoveTemp(tempfile);
    if ((fp0 = LYOpenTemp(tempfile, HTML_SUFFIX, "w")) == NULL) {
d798 1
d805 18
d826 21
a846 2
    x = HTList_count(Visited_Links);
    while (NULL != (vl = (VisitedLink *)HTList_nextObject(cur))) {
d851 26
a876 1
	x--;
d891 2
a892 2
		    "%s<em>%d</em>. <tab id=t%d><a href=\"%s\">%s</a>\n",
		    (x > 99 ? "" : x < 10 ? "  " : " "),
d896 2
a897 2
		    "%s<em>%d</em>. <tab id=t%d><em>%s</em>\n",
		    (x > 99 ? "" : x < 10 ? "  " : " "),
d906 15
d928 1
a928 1
    return(0);
d958 1
a958 1
    if (topOfStack == STATUSBUFSIZE) {
d974 3
a980 58
 *  Status line messages list, LYNXMESSAGES:/ internal page,
 *  called from getfile() cyrcle.
 */
PUBLIC int LYshow_statusline_messages ARGS1(
    document *,			      newdoc)
{
    static char tempfile[LY_MAXPATH];
    static char *info_url;
    DocAddress WWWDoc;  /* need on exit */
    FILE *fp0;
    int i;

    LYRemoveTemp(tempfile);
    if ((fp0 = LYOpenTemp (tempfile, HTML_SUFFIX, "w")) == 0) {
	HTAlert(CANNOT_OPEN_TEMP);
	return(NOT_FOUND);
    }
    LYLocalFileToURL(&info_url, tempfile);

    LYforce_no_cache = TRUE;  /* don't cache this doc */

    BeginInternalPage (fp0, STATUSLINES_TITLE, NULL);
    fprintf(fp0, "<pre>\n");
    fprintf(fp0, "<ol>\n");

    /* print messages in reverse order: */
    i = topOfStack;
    while (--i >= 0) {
	if (buffstack[i] != NULL)
	    fprintf(fp0,  "<li> <em>%s</em>\n",  buffstack[i]);
    }
    i = STATUSBUFSIZE;
    while (--i >= topOfStack) {
	if (buffstack[i] != NULL)
	fprintf(fp0,  "<li> <em>%s</em>\n",  buffstack[i]);
    }

    fprintf(fp0, "</ol>\n");
    fprintf(fp0, "</pre>\n");
    EndInternalPage(fp0);
    LYCloseTempFP(fp0);


    /* exit to getfile() cyrcle */
    StrAllocCopy(newdoc->address, info_url);
    WWWDoc.address = newdoc->address;
    WWWDoc.post_data = newdoc->post_data;
    WWWDoc.post_content_type = newdoc->post_content_type;
    WWWDoc.bookmark = newdoc->bookmark;
    WWWDoc.isHEAD = newdoc->isHEAD;
    WWWDoc.safe = newdoc->safe;

    if (!HTLoadAbsolute(&WWWDoc))
	return(NOT_FOUND);
    return(NORMAL);
}

/*
d997 1
a997 1
    while (++i <= STATUSBUFSIZE) {
d1020 1
a1020 1
	HTSprintf(&temp, message, (argument == 0) ? "" : argument);
d1034 105
@


1.1
log
@Initial revision
@
text
@d1 17
a17 16
#include "HTUtils.h"
#include "tcp.h"
#include "HTTP.h"
#include "HTAlert.h"
#include "HText.h"
#include "LYGlobalDefs.h"
#include "LYUtils.h"
#include "LYHistory.h"
#include "LYPrint.h"
#include "LYDownload.h"
#include "LYKeymap.h"
#include "LYList.h"
#include "LYShowInfo.h"
#include "LYSignal.h"
#include "LYStrings.h"
#include "LYCharUtils.h"
d20 2
a21 2
#include "LYUpload.h"
#include "LYLocal.h"
d24 2
a25 4
#include "LYexit.h"
#include "LYLeaks.h"
 
#define FREE(x) if (x) {free(x); x = NULL;}
d27 1
a27 1
PUBLIC  HTList * Visited_Links = NULL;  /* List of safe popped docs. */
d29 2
a30 1
/* 
d39 1
a39 1
        return;
d50 1
d52 1
a52 1
/* 
d64 1
a64 1
        return;
d67 2
a68 2
     *  Exclude POST or HEAD replies, and bookmark, menu
     *  or list files. - FM
d71 4
d78 1
d86 3
d90 3
d95 1
a95 1
	!strcmp((doc->title ? doc->title : ""), LYNX_TRACELOG_TITLE)) {
d100 1
a100 1
    	outofmem(__FILE__, "HTAddVisitedLink");
d102 1
a102 1
    StrAllocCopy(new->title, (doc->title ? doc->title : "(no title)"));
d105 2
a106 1
        Visited_Links = HTList_new();
d108 1
d118 1
a118 1
	    	    (new->title ? new->title : ""))) {
d132 20
d159 1
a159 1
     *  Don't push NULL file names.
d165 2
a166 2
     *  Check whether this is a document we
     *  don't push unless forced. - FM
d172 1
a172 15
	if (!strcmp(doc->title, HISTORY_PAGE_TITLE) ||
	    !strcmp(doc->title, PRINT_OPTIONS_TITLE) ||
	    !strcmp(doc->title, DOWNLOAD_OPTIONS_TITLE)) {
	    if (!LYforce_no_cache)
		LYoverride_no_cache = TRUE;
	    return;
	}

#ifdef DIRED_SUPPORT
	/*
	 *  Don't push DIRED menu, upload or permit lists.
	 */
	if (!strcmp(doc->title, DIRED_MENU_TITLE) ||
	    !strcmp(doc->title, UPLOAD_OPTIONS_TITLE) ||
	    !strcmp(doc->title, PERMIT_OPTIONS_TITLE)) {
a176 1
#endif /* DIRED_SUPPORT */
d180 1
a180 1
     *  If file is identical to one before it, don't push it.
d183 2
a184 2
        STREQ(history[nhist-1].address, doc->address) &&
        !strcmp(history[nhist-1].post_data ?
d186 1
a186 1
                doc->post_data ?
d188 1
a188 1
        !strcmp(history[nhist-1].bookmark ?
d190 1
a190 1
                doc->bookmark ?
d197 2
a198 2
	    history[nhist-1].page = doc->line;
 	    return;
a200 29

#ifdef NOTDEFINED
/*
**  The following segment not used any more - What's it good for,
**  anyway??  Doing a pop when a push is requested is confusing,
**  also to the user.  Moreover, the way it was done seems to cause
**  a memory leak. - KW
*/  /*
     *  If file is identical to one two before it, don't push it.
     */
    if (nhist > 2 &&
        STREQ(history[nhist-2].address, doc->address) &&
        !strcmp(history[nhist-2].post_data ?
		history[nhist-2].post_data : "",
                doc->post_data ?
		doc->post_data : "") &&
        !strcmp(history[nhist-2].bookmark ?
		history[nhist-2].bookmark : "",
                doc->bookmark ?
		doc->bookmark : "") &&
	history[nhist-2].isHEAD == doc->isHEAD) {
	/*
	 *  Pop one off the stack.
	 */
	nhist--;
        return;
    }
#endif /* NOTDEFINED */

d202 1
a202 1
     *  OK, push it if we have stack space.
d206 1
a206 1
	history[nhist].page = doc->line;
d223 1
a223 1
 	    /* Now some tricky stuff: if the caller thinks that the doc
d284 1
a284 1
		** that IF we have a HTMainText (i.e. it wasn't just
d296 1
a296 4
			if (TRACE) {
			    fprintf(stderr,
				"\nLYpush: pushed as internal link, OK\n");
			}
d301 1
a301 3
		if (TRACE) {
		    fprintf(stderr,
			    "\nLYpush: push as internal link requested, %s\n",
a302 1
		}
d305 2
d308 3
a310 4
   	if (TRACE) {
    	    fprintf(stderr,
		    "\nLYpush: address:%s\n        title:%s\n",
		    doc->address, doc->title);
d312 1
a312 8
    } else {
        if (LYCursesON) {
	    _statusline(MAXHIST_REACHED);
	    sleep(AlertSecs);
	} 
        if (TRACE) {
    	    fprintf(stderr,
     "\nLYpush: MAXHIST reached for:\n        address:%s\n        title:%s\n",
a313 1
	}
d326 1
a326 1
	doc->line = history[nhist].page;
d330 1
a330 1
	doc->address = history[nhist].address;   /* will be freed later */
d340 6
a345 5
        if (TRACE) {
	    fprintf(stderr,
	    	    "LYpop: address:%s\n     title:%s\n",
		    doc->address, doc->title);
	}
d360 1
a360 1
	doc->line = history[number].page;
d369 4
d382 1
a382 3
    static char tempfile[256];
    static BOOLEAN first = TRUE;
    static char hist_filename[256];
d387 2
a388 18
    if (first) {
	tempname(tempfile, NEW_FILE);
	/*
	 *  Make the file a URL now.
	 */
#if defined (VMS) || defined (DOSPATH)
	sprintf(hist_filename,"file://localhost/%s", tempfile);
#else
	sprintf(hist_filename,"file://localhost%s", tempfile);
#endif /* VMS */
	first = FALSE;
#ifdef VMS
    } else {
	remove(tempfile);  /* Remove duplicates on VMS. */
#endif /* VMS */
    }

    if ((fp0 = LYNewTxtFile(tempfile)) == NULL) {
d393 2
a394 1
    StrAllocCopy(*newfile, hist_filename);
d398 8
a405 7
    fprintf(fp0, "<head>\n");
    LYAddMETAcharsetToFD(fp0, -1);
    fprintf(fp0, "<title>%s</title>\n</head>\n<body>\n",
		 HISTORY_PAGE_TITLE);
    fprintf(fp0, "<h1>You have reached the History Page</h1>\n");
    fprintf(fp0, "<h2>%s Version %s</h2>\n<pre>", LYNX_NAME, LYNX_VERSION);
    fprintf(fp0, "<em>You selected:</em>\n");
d414 4
d419 1
a419 1
	    StrAllocCopy(Title, "(no title)");
d423 1
a423 1
		(x > 99 ? "" : x < 10 ? "  " : " "),  
d429 1
a429 1
	    StrAllocCopy(Title, "(no address)");
d433 1
a433 1
		StrAllocCat(Title, " (internal)");
d435 1
a435 1
		StrAllocCat(Title, " (was internal)");
d439 2
d442 1
a442 3
    fprintf(fp0,"</pre>\n</body>\n");

    fclose(fp0);
d447 1
a447 1
/* 
d463 1
a463 1
        strlen(newdoc->address) < 10 || !isdigit(*(newdoc->address+9)))
d467 7
a473 1
        return(FALSE);
d492 3
a494 3
     *  If we have POST content, and have LYresubmit_posts set
     *  or have no_cache set or do not still have the text cached,
     *  ask the user whether to resubmit the form. - FM
d498 3
a500 3
        WWWDoc.post_data = newdoc->post_data;
        WWWDoc.post_content_type = newdoc->post_content_type;
        WWWDoc.bookmark = newdoc->bookmark;
d505 1
a505 1
        if (((((LYresubmit_posts == TRUE) ||
d518 1
a518 2
	    _statusline(CANCELLED);
	    sleep(InfoSecs);
d524 1
a524 1
	StrAllocCat(newdoc->title," (From History)");
d535 1
a535 3
    static char tempfile[256];
    static BOOLEAN first = TRUE;
    static char vl_filename[256];
d544 1
a544 1
        return(-1);
d546 2
a547 18
    if (first) {
	tempname(tempfile, NEW_FILE);
	/*
	 *  Make the file a URL now.
	 */
#if defined (VMS) || defined (DOSPATH)
	sprintf(vl_filename,"file://localhost/%s", tempfile);
#else
	sprintf(vl_filename,"file://localhost%s", tempfile);
#endif /* VMS */
	first = FALSE;
#ifdef VMS
    } else {
	remove(tempfile);  /* Remove duplicates on VMS. */
#endif /* VMS */
    }

    if ((fp0 = LYNewTxtFile(tempfile)) == NULL) {
d552 2
a553 1
    StrAllocCopy(*newfile, vl_filename);
d557 5
a561 8
    fprintf(fp0, "<head>\n");
    LYAddMETAcharsetToFD(fp0, -1);
    fprintf(fp0, "<title>%s</title>\n</head>\n<body>\n",
		 VISITED_LINKS_TITLE);
    fprintf(fp0, "<h1>You have reached the Visited Links Page</h1>\n");
    fprintf(fp0, "<h2>%s Version %s</h2>\n<pre>", LYNX_NAME, LYNX_VERSION);
    fprintf(fp0, 
  "<em>You visited (POSTs, bookmark, menu and list files excluded):</em>\n");
d572 4
d577 1
a577 1
	    StrAllocCopy(Title , "(no title)");
d597 1
a597 1
		     ((Address != NULL) ? Address : "(no address)"));
d599 2
d602 1
a602 3
    fprintf(fp0,"</pre>\n</body>\n");

    fclose(fp0);
d606 159
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
