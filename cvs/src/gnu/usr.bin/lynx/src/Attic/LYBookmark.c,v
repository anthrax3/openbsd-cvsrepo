head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.47;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.06;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.57;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.57;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYBookmark.c,v 1.76 2013/11/28 11:17:59 tom Exp $
 */
#include <HTUtils.h>
#include <HTAlert.h>
#include <HTFile.h>
#include <LYUtils.h>
#include <LYStrings.h>
#include <LYBookmark.h>
#include <LYGlobalDefs.h>
#include <LYClean.h>
#include <LYKeymap.h>
#include <LYCharUtils.h>	/* need for META charset */
#include <UCAux.h>
#include <LYCharSets.h>		/* need for LYHaveCJKCharacterSet */
#include <LYCurses.h>
#include <GridText.h>
#include <HTCJK.h>

#ifdef VMS
#include <nam.h>
#endif /* VMS */

#include <LYLeaks.h>

char *MBM_A_subbookmark[MBM_V_MAXFILES + 1];
char *MBM_A_subdescript[MBM_V_MAXFILES + 1];

static BOOLEAN is_mosaic_hotlist = FALSE;
static const char *convert_mosaic_bookmark_file(const char *filename_buffer);

int LYindex2MBM(int n)
{
    static char MBMcodes[MBM_V_MAXFILES + 2] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    return n >= 0 && n <= MBM_V_MAXFILES ? MBMcodes[n] : '?';
}

int LYMBM2index(int ch)
{
    if ((ch = TOUPPER(ch)) > 0) {
	const char *letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	const char *result = StrChr(letters, ch);

	if (result != 0
	    && (result - letters) <= MBM_V_MAXFILES)
	    return (int) (result - letters);
    }
    return -1;
}

static void show_bookmark_not_defined(void)
{
    char *string_buffer = 0;

    HTSprintf0(&string_buffer,
	       BOOKMARK_FILE_NOT_DEFINED,
	       key_for_func(LYK_OPTIONS));
    LYMBM_statusline(string_buffer);
    FREE(string_buffer);
}

/*
 * Tries to open a bookmark file for reading, which may be the default, or
 * based on offering the user a choice from the MBM_A_subbookmark[] array.  If
 * successful the file is closed, and the filename in system path specs is
 * returned, the URL is allocated into *URL, and the MBM_A_subbookmark[]
 * filepath is allocated into the BookmarkPage global.  Returns a zero-length
 * pointer to flag a cancel, or a space to flag an undefined selection, without
 * allocating into *URL or BookmarkPage.  Returns NULL with allocating into
 * BookmarkPage but not *URL is the selection is valid but the file doesn't yet
 * exist.  - FM
 */
const char *get_bookmark_filename(char **URL)
{
    static char filename_buffer[LY_MAXPATH];
    char *string_buffer = 0;
    FILE *fp;
    int MBM_tmp;

    /*
     * Multi_Bookmarks support.  - FMG & FM
     * Let user select a bookmark file.
     */
    MBM_tmp = select_multi_bookmarks();
    if (MBM_tmp == -2)
	/*
	 * Zero-length pointer flags a cancel.  - FM
	 */
	return ("");
    if (MBM_tmp == -1) {
	show_bookmark_not_defined();
	/*
	 * Space flags an undefined selection.  - FMG
	 */
	return (" ");
    } else {
	/*
	 * Save the filepath as a global.  The system path will be loaded into
	 * to the (static) filename_buffer as the return value, the URL will be
	 * allocated into *URL, and we also need the filepath available to
	 * calling functions.  This is all pitifully non-reentrant, a la the
	 * original Lynx, and should be redesigned someday.  - FM
	 */
	StrAllocCopy(BookmarkPage, MBM_A_subbookmark[MBM_tmp]);
    }

    /*
     * Seek it in the home path.  - FM
     */
    LYAddPathToHome(filename_buffer,
		    sizeof(filename_buffer),
		    BookmarkPage);
    CTRACE((tfp, "\nget_bookmark_filename: SEEKING %s\n   AS %s\n\n",
	    BookmarkPage, filename_buffer));
    if ((fp = fopen(filename_buffer, TXT_R)) != NULL) {
	/*
	 * We now have the file open.
	 * Check if it is a mosaic hotlist.
	 */
	if (LYSafeGets(&string_buffer, fp) != 0
	    && *LYTrimNewline(string_buffer) != '\0'
	    && !StrNCmp(string_buffer, "ncsa-xmosaic-hotlist-format-1", 29)) {
	    const char *newname;

	    /*
	     * It is a mosaic hotlist file.
	     */
	    is_mosaic_hotlist = TRUE;
	    newname = convert_mosaic_bookmark_file(filename_buffer);
	    LYLocalFileToURL(URL, newname);
	} else {
	    is_mosaic_hotlist = FALSE;
	    LYLocalFileToURL(URL, filename_buffer);
	}
	FREE(string_buffer);
	LYCloseInput(fp);

	return (filename_buffer);	/* bookmark file exists */
    }
    return (NULL);

}				/* big end */

/*
 * Converts a Mosaic hotlist file into an HTML file for handling as a Lynx
 * bookmark file.  - FM
 */
static const char *convert_mosaic_bookmark_file(const char *filename_buffer)
{
    static char newfile[LY_MAXPATH];
    FILE *fp, *nfp;
    char *buf = NULL;
    int line = -2;

    (void) LYRemoveTemp(newfile);
    if ((nfp = LYOpenTemp(newfile, HTML_SUFFIX, "w")) == NULL) {
	LYMBM_statusline(NO_TEMP_FOR_HOTLIST);
	LYSleepAlert();
	return ("");
    }

    if ((fp = fopen(filename_buffer, TXT_R)) == NULL)
	return ("");		/* should always open */

    fprintf(nfp, "<head>\n<title>%s</title>\n</head>\n", MOSAIC_BOOKMARK_TITLE);
    fprintf(nfp, "%s\n\n<p>\n<ol>\n", gettext("\
     This file is an HTML representation of the X Mosaic hotlist file.\n\
     Outdated or invalid links may be removed by using the\n\
     remove bookmark command, it is usually the 'R' key but may have\n\
     been remapped by you or your system administrator."));

    while ((LYSafeGets(&buf, fp)) != NULL) {
	if (line >= 0) {
	    LYTrimNewline(buf);
	    if ((line % 2) == 0) {	/* even lines */
		if (*buf != '\0') {
		    strtok(buf, " ");	/* kill everything after the space */
		    fprintf(nfp, "<LI><a href=\"%s\">", buf);	/* the URL */
		}
	    } else {		/* odd lines */
		fprintf(nfp, "%s</a>\n", buf);	/* the title */
	    }
	}
	/* else - ignore the line (this gets rid of first two lines) */
	line++;
    }
    LYCloseTempFP(nfp);
    LYCloseInput(fp);
    return (newfile);
}

static BOOLEAN havevisible(const char *Title);
static BOOLEAN have8bit(const char *Title);
static char *title_convert8bit(const char *Title);

/*
 * Adds a link to a bookmark file, creating the file if it doesn't already
 * exist, and making sure that no_cache is set for a pre-existing, cached file,
 * so that the change will be evident on return to to that file.  - FM
 */
void save_bookmark_link(const char *address,
			const char *title)
{
    FILE *fp;
    BOOLEAN first_time = FALSE;
    const char *filename;
    char *bookmark_URL = NULL;
    char filename_buffer[LY_MAXPATH];
    char *Address = NULL;
    char *Title = NULL;
    int i, c;
    bstring *string_data = NULL;
    bstring *tmp_data = NULL;
    DocAddress WWWDoc;
    HTParentAnchor *tmpanchor;
    HText *text;

    /*
     * Make sure we were passed something to save.  - FM
     */
    if (isEmpty(address)) {
	HTAlert(MALFORMED_ADDRESS);
	return;
    }

    /*
     * Offer a choice of bookmark files, or get the default.  - FMG
     */
    filename = get_bookmark_filename(&bookmark_URL);

    /*
     * If filename is NULL, must create a new file.  If filename is a space, an
     * invalid bookmark file was selected, or if zero-length, the user
     * cancelled.  Ignore request in both cases.  Otherwise, make a copy before
     * anything might change the static get_bookmark_filename() buffer.  - FM
     */
    if (filename == NULL) {
	first_time = TRUE;
	filename_buffer[0] = '\0';
    } else {
	if (*filename == '\0' || !strcmp(filename, " ")) {
	    FREE(bookmark_URL);
	    return;
	}
	LYStrNCpy(filename_buffer, filename, sizeof(filename_buffer) - 1);
    }

    /*
     * If BookmarkPage is NULL, something went wrong, so ignore the request.  -
     * FM
     */
    if (BookmarkPage == NULL) {
	FREE(bookmark_URL);
	return;
    }

    /*
     * If the link will be added to the same bookmark file, get confirmation. 
     * - FM
     */
    if (LYMultiBookmarks != MBM_OFF) {
	const char *url = HTLoadedDocumentURL();
	const char *page = (*BookmarkPage == '.')
	? (BookmarkPage + 1)
	: BookmarkPage;

	if (strstr(url, page) != NULL) {
	    LYMBM_statusline(MULTIBOOKMARKS_SELF);
	    c = LYgetch_single();
	    if (c != 'L') {
		FREE(bookmark_URL);
		return;
	    }
	}
    }

    /*
     * Allow user to change the title.  - FM
     */
    do {
	if (HTCJK == JAPANESE) {
	    switch (kanji_code) {
	    case EUC:
		BStrAlloc(tmp_data, MAX_LINE + 2 * (int) strlen(title));
		TO_EUC((const unsigned char *) title, (unsigned char *) tmp_data->str);
		break;
	    case SJIS:
		BStrAlloc(tmp_data, MAX_LINE + (int) strlen(title));
		TO_SJIS((const unsigned char *) title, (unsigned char *) tmp_data->str);
		break;
	    default:
		break;
	    }
	    BStrCopy0(string_data, tmp_data ? tmp_data->str : title);
	} else {
	    BStrCopy0(string_data, title);
	}
	LYReduceBlanks(string_data->str);
	LYMBM_statusline(TITLE_PROMPT);
	LYgetBString(&string_data, FALSE, 0, NORECALL);
	if (isBEmpty(string_data)) {
	    LYMBM_statusline(CANCELLED);
	    LYSleepMsg();
	    FREE(bookmark_URL);
	    return;
	}
    } while (!havevisible(string_data->str));

    /*
     * Create the Title with any left-angle-brackets converted to &lt; entities
     * and any ampersands converted to &amp; entities.  - FM
     *
     * Convert 8-bit letters to &#xUUUU to avoid dependencies from display
     * character set which may need changing.  Do NOT convert any 8-bit chars
     * if we have CJK display.  - LP
     */
    LYformTitle(&Title, string_data->str);
    LYEntify(&Title, TRUE);
    if (UCSaveBookmarksInUnicode &&
	have8bit(Title) && (!LYHaveCJKCharacterSet)) {
	char *p = title_convert8bit(Title);

	if (p != 0) {
	    FREE(Title);
	    Title = p;
	}
    }

    /*
     * Create the bookmark file, if it doesn't exist already, Otherwise, open
     * the pre-existing bookmark file.  - FM
     */
    SetDefaultMode(O_TEXT);
    if (first_time) {
	/*
	 * Seek it in the home path.  - FM
	 */
	LYAddPathToHome(filename_buffer,
			sizeof(filename_buffer),
			BookmarkPage);
    }
    CTRACE((tfp, "\nsave_bookmark_link: SEEKING %s\n   AS %s\n\n",
	    BookmarkPage, filename_buffer));
    if ((fp = fopen(filename_buffer, (first_time ? TXT_W : TXT_A))) == NULL) {
	LYMBM_statusline(BOOKMARK_OPEN_FAILED);
	LYSleepAlert();
	FREE(Title);
	FREE(bookmark_URL);
	return;
    }

    /*
     * Convert all ampersands in the address to &amp; entities.  - FM
     */
    StrAllocCopy(Address, address);
    LYEntify(&Address, FALSE);

    /*
     * If we created a new bookmark file, write the headers.  - FM
     * Once and forever...
     */
    if (first_time) {
	fprintf(fp, "<head>\n");
#if defined(SH_EX) && !defined(_WINDOWS)	/* 1997/12/11 (Thu) 19:13:40 */
	if (HTCJK != JAPANESE)
	    LYAddMETAcharsetToFD(fp, -1);
	else
	    fprintf(fp, "<META %s %s>\n",
		    "http-equiv=\"content-type\"",
		    "content=\"text/html;charset=iso-2022-jp\"");
#else
	LYAddMETAcharsetToFD(fp, -1);
#endif /* !_WINDOWS */
	fprintf(fp, "<title>%s</title>\n</head>\n", BOOKMARK_TITLE);
#ifdef _WINDOWS
	fprintf(fp,
		gettext("     You can delete links by the 'R' key<br>\n<ol>\n"));
#else
	fprintf(fp, "%s<br>\n%s\n\n<!--\n%s\n-->\n\n<p>\n<ol>\n",
		gettext("\
     You can delete links using the remove bookmark command.  It is usually\n\
     the 'R' key but may have been remapped by you or your system\n\
     administrator."),
		gettext("\
     This file also may be edited with a standard text editor to delete\n\
     outdated or invalid links, or to change their order."),
		gettext("\
Note: if you edit this file manually\n\
      you should not change the format within the lines\n\
      or add other HTML markup.\n\
      Make sure any bookmark link is saved as a single line."));
#endif /* _WINDOWS */
    }

    /*
     * Add the bookmark link, in Mosaic hotlist or Lynx format.  - FM
     */
    if (is_mosaic_hotlist) {
	time_t NowTime = time(NULL);
	char *TimeString = (char *) ctime(&NowTime);

	/*
	 * TimeString has a \n at the end.
	 */
	fprintf(fp, "%s %s%s\n", Address, TimeString, Title);
    } else {
	fprintf(fp, "<LI><a href=\"%s\">%s</a>\n", Address, Title);
    }
    LYCloseOutput(fp);

    SetDefaultMode(O_BINARY);
    /*
     * If this is a cached bookmark file, set nocache for it so we'll see the
     * new bookmark link when that cache is retrieved.  - FM
     */
    if (!first_time && nhist > 0 && bookmark_URL) {
	for (i = 0; i < nhist; i++) {
	    if (HDOC(i).bookmark &&
		!strcmp(HDOC(i).address, bookmark_URL)) {
		WWWDoc.address = HDOC(i).address;
		WWWDoc.post_data = NULL;
		WWWDoc.post_content_type = NULL;
		WWWDoc.bookmark = HDOC(i).bookmark;
		WWWDoc.isHEAD = FALSE;
		WWWDoc.safe = FALSE;
		tmpanchor = HTAnchor_findAddress(&WWWDoc);
		if ((text = (HText *) HTAnchor_document(tmpanchor)) != NULL) {
		    HText_setNoCache(text);
		}
		break;
	    }
	}
    }

    /*
     * Clean up and report success.
     */
    BStrFree(string_data);
    BStrFree(tmp_data);
    FREE(Title);
    FREE(Address);
    FREE(bookmark_URL);
    LYMBM_statusline(OPERATION_DONE);
    LYSleepMsg();
}

/*
 * Remove a link from a bookmark file.  The calling function is expected to
 * have used get_filename_link(), pass us the link number as cur, the
 * MBM_A_subbookmark[] string as cur_bookmark_page, and to have set up no_cache
 * itself.  - FM
 */
void remove_bookmark_link(int cur,
			  char *cur_bookmark_page)
{
    FILE *fp, *nfp;
    char *buf = NULL;
    int n;

#ifdef VMS
    char filename_buffer[NAM$C_MAXRSS + 12];
    char newfile[NAM$C_MAXRSS + 12];

#define keep_tempfile FALSE
#else
    char filename_buffer[LY_MAXPATH];
    char newfile[LY_MAXPATH];
    BOOLEAN keep_tempfile = FALSE;

#ifdef UNIX
    struct stat stat_buf;
    BOOLEAN regular = FALSE;
#endif /* UNIX */
#endif /* VMS */
    char homepath[LY_MAXPATH];

    CTRACE((tfp, "remove_bookmark_link: deleting link number: %d\n", cur));

    if (!cur_bookmark_page)
	return;
    LYAddPathToHome(filename_buffer,
		    sizeof(filename_buffer),
		    cur_bookmark_page);
    CTRACE((tfp, "\nremove_bookmark_link: SEEKING %s\n   AS %s\n\n",
	    cur_bookmark_page, filename_buffer));
    if ((fp = fopen(filename_buffer, TXT_R)) == NULL) {
	HTAlert(BOOKMARK_OPEN_FAILED_FOR_DEL);
	return;
    }

    LYAddPathToHome(homepath, sizeof(homepath), "");
    if ((nfp = LYOpenScratch(newfile, homepath)) == 0) {
	LYCloseInput(fp);
	HTAlert(BOOKSCRA_OPEN_FAILED_FOR_DEL);
	return;
    }
#ifdef UNIX
    /*
     * Explicitly preserve bookmark file mode on Unix.  - DSL
     */
    if (stat(filename_buffer, &stat_buf) == 0) {
	regular = (BOOLEAN) (S_ISREG(stat_buf.st_mode) && stat_buf.st_nlink == 1);
	(void) chmod(newfile, HIDE_CHMOD);
	if ((nfp = LYReopenTemp(newfile)) == NULL) {
	    (void) LYCloseInput(fp);
	    HTAlert(BOOKTEMP_REOPEN_FAIL_FOR_DEL);
	    return;
	}
    }
#endif /* UNIX */

    if (is_mosaic_hotlist) {
	int del_line = cur * 2;	/* two lines per entry */

	n = -3;			/* skip past cookie and name lines */
	while (LYSafeGets(&buf, fp) != NULL) {
	    n++;
	    if (n == del_line || n == del_line + 1)
		continue;	/* remove two lines */
	    if (fputs(buf, nfp) == EOF)
		goto failure;
	}

    } else {
	char *cp;
	BOOLEAN retain;
	int seen;

	n = -1;
	while (LYSafeGets(&buf, fp) != NULL) {
	    int keep_ol = FALSE;

	    retain = TRUE;
	    seen = 0;
	    cp = buf;
	    if ((cur == 0) && LYstrstr(cp, "<ol><LI>"))
		keep_ol = TRUE;	/* Do not erase, this corrects a bug in an
				   older version */
	    while (n < cur && (cp = LYstrstr(cp, "<a href="))) {
		seen++;
		if (++n == cur) {
		    if (seen != 1 || !LYstrstr(buf, "</a>") ||
			LYstrstr((cp + 1), "<a href=")) {
			HTAlert(BOOKMARK_LINK_NOT_ONE_LINE);
			goto failure;
		    }
		    CTRACE((tfp, "remove_bookmark_link: skipping link %d\n", n));
		    if (keep_ol)
			fprintf(nfp, "<ol>\n");
		    retain = FALSE;
		}
		cp += 8;
	    }
	    if (retain && fputs(buf, nfp) == EOF)
		goto failure;
	}
    }

    FREE(buf);
    CTRACE((tfp, "remove_bookmark_link: files: %s %s\n",
	    newfile, filename_buffer));

    LYCloseInput(fp);
    fp = NULL;
    if (fflush(nfp) == EOF) {
	CTRACE((tfp, "fflush(nfp): %s", LYStrerror(errno)));
	goto failure;
    }
    LYCloseTempFP(nfp);
    nfp = NULL;
#if defined(DOSPATH) || defined(__EMX__)
    remove(filename_buffer);
#endif /* DOSPATH */

#ifdef UNIX
    /*
     * By copying onto the bookmark file, rather than renaming it, we can
     * preserve the original ownership of the file, provided that it is
     * writable by the current process.
     *
     * Changed to copy 1998-04-26 -- gil
     *
     * But if the copy fails, for example because the filesystem is full, we
     * are left with a corrupt bookmark file.  Changed back to use the previous
     * mechanism [try rename(), then mv for EXDEV], except in usual cases (not
     * a regular file e.g., symbolic link, or has hard links).  This will let
     * bookmarks survive a filesystem full condition in the "normal" case
     * (bookmark is on same filesystem as home directory, is a regular file,
     * has no additional hard links).
     *
     * If we first tried LYCopyFile, and that fails, also fall back to trying
     * the other stuff.  That gives a chance to recover in case the LYCopyFile
     * left a corrupt target file.
     *
     * If there is an error, and that error may mean that the bookmark file has
     * been corrupted, don't remove the temporary newfile (which should always
     * be uncorrupted) in place, it may still be used to recover manually.  If
     * this applies, produce an additional message to that effect.  The temp
     * file will still be removed by normal program exit cleanup.  - kw
     * 1999-11-12
     */
    if (!regular) {
	if (LYCopyFile(newfile, filename_buffer) == 0) {
	    (void) LYRemoveTemp(newfile);
	    return;
	}
	LYSleepAlert();		/* give a chance to see error from cp - kw */
	HTUserMsg(BOOKTEMP_COPY_FAIL);
	keep_tempfile = TRUE;
    }
#endif /* UNIX */

    if (rename(newfile, filename_buffer) != -1) {
#ifdef MULTI_USER_UNIX
	if (regular)
	    chmod(filename_buffer, stat_buf.st_mode & 07777);
#endif
	HTSYS_purge(filename_buffer);
	return;
    } else {
#ifndef VMS
	/*
	 * Rename won't work across file systems.  Check if this is the case
	 * and do something appropriate.  Used to be ODD_RENAME
	 */
#if defined(_WINDOWS) || defined(WIN_EX)
#if defined(WIN_EX)
	if (GetLastError() == ERROR_NOT_SAME_DEVICE)
#else /* !_WIN_EX */
	if (errno == ENOTSAM)
#endif /* _WIN_EX */
	{
	    if (rename(newfile, filename_buffer) != 0) {
		if (LYCopyFile(newfile, filename_buffer) == 0)
		    remove(newfile);
	    }
	}
#else
	if (errno == EXDEV) {
	    static const char MV_FMT[] = "%s %s %s";
	    char *buffer = 0;
	    const char *program;

	    if ((program = HTGetProgramPath(ppMV)) != NULL) {
		HTAddParam(&buffer, MV_FMT, 1, program);
		HTAddParam(&buffer, MV_FMT, 2, newfile);
		HTAddParam(&buffer, MV_FMT, 3, filename_buffer);
		HTEndParam(&buffer, MV_FMT, 3);
		if (LYSystem(buffer) == 0) {
#ifdef MULTI_USER_UNIX
		    if (regular)
			chmod(filename_buffer, stat_buf.st_mode & 07777);
#endif
		    FREE(buffer);
		    return;
		}
	    }
	    FREE(buffer);
	    keep_tempfile = TRUE;
	    goto failure;
	}
	CTRACE((tfp, "rename(): %s", LYStrerror(errno)));
#endif /* _WINDOWS */
#endif /* !VMS */

#ifdef VMS
	HTAlert(ERROR_RENAMING_SCRA);
#else
	HTAlert(ERROR_RENAMING_TEMP);
#endif /* VMS */
	if (TRACE)
	    perror("renaming the file");
    }

  failure:
    FREE(buf);
    HTAlert(BOOKMARK_DEL_FAILED);
    if (nfp)
	LYCloseTempFP(nfp);
    if (fp != NULL)
	LYCloseInput(fp);
    if (keep_tempfile) {
	HTUserMsg2(gettext("File may be recoverable from %s during this session"),
		   newfile);
    } else {
	(void) LYRemoveTemp(newfile);
    }
}

/*
 * Allows user to select sub-bookmarks files.  - FMG & FM
 */
int select_multi_bookmarks(void)
{
    int c;

    /*
     * If not enabled, pick the "default" (0).
     */
    if (LYMultiBookmarks == MBM_OFF || LYHaveSubBookmarks() == FALSE) {
	if (MBM_A_subbookmark[0])	/* If it exists! */
	    return (0);
	else
	    return (-1);
    }

    /*
     * For ADVANCED users, we can just mess with the status line to save the 2
     * redraws of the screen, if LYMBMAdvnced is TRUE.  '=' will still show the
     * screen and let them do it the "long" way.
     */
    if (LYMultiBookmarks == MBM_ADVANCED && user_mode == ADVANCED_MODE) {
	LYMBM_statusline(MULTIBOOKMARKS_SELECT);
      get_advanced_choice:
	c = LYgetch();
#ifdef VMS
	if (HadVMSInterrupt) {
	    HadVMSInterrupt = FALSE;
	    c = LYCharINTERRUPT2;
	}
#endif /* VMS */
	if (LYisNonAlnumKeyname(c, LYK_PREV_DOC) || LYCharIsINTERRUPT_HARD(c)) {
	    /*
	     * Treat left-arrow, ^G, or ^C as cancel.
	     */
	    return (-2);
	}
	if (LYisNonAlnumKeyname(c, LYK_REFRESH)) {
	    /*
	     * Refresh the screen.
	     */
	    lynx_force_repaint();
	    LYrefresh();
	    goto get_advanced_choice;
	}
	if (LYisNonAlnumKeyname(c, LYK_ACTIVATE)) {
	    /*
	     * Assume default bookmark file on ENTER or right-arrow.
	     */
	    return (MBM_A_subbookmark[0] ? 0 : -1);
	}
	switch (c) {
	case '=':
	    /*
	     * Get the choice via the menu.
	     */
	    return (select_menu_multi_bookmarks());

	default:
	    /*
	     * Convert to an array index, act on it if valid.
	     * Otherwise, get another keystroke.
	     */
	    if ((c = LYMBM2index(c)) < 0) {
		goto get_advanced_choice;
	    }
	}
	/*
	 * See if we have a bookmark like that.
	 */
	return (MBM_A_subbookmark[c] ? c : -1);
    } else {
	/*
	 * Get the choice via the menu.
	 */
	return (select_menu_multi_bookmarks());
    }
}

/*
 * Allows user to select sub-bookmarks files.  - FMG & FM
 */
int select_menu_multi_bookmarks(void)
{
    int c, d, MBM_tmp_count, MBM_allow;
    int MBM_screens, MBM_from, MBM_to, MBM_current;

    /*
     * If not enabled, pick the "default" (0).
     */
    if (LYMultiBookmarks == MBM_OFF)
	return (0);

    /*
     *        Filip M. Gieszczykiewicz (filipg@@paranoia.com) & FM
     *  ---------------------------------------------------
     * MBM_A_subbookmark[n] - Hold values of the respective "multi_bookmarkn"
     * in the lynxrc file.
     *
     * MBM_A_subdescript[n] - Hold description entries in the lynxrc file.
     *
     * Note: MBM_A_subbookmark[0] is defined to be same value as
     *       "bookmark_file" in the lynxrc file and/or the startup
     *       "bookmark_page".
     *
     * We make the display of bookmarks depend on rows we have available.
     *
     * We load BookmarkPage with the valid MBM_A_subbookmark[n] via
     * get_bookmark_filename().  Otherwise, that function returns a zero-length
     * string to indicate a cancel, a single space to indicate an invalid
     * choice, or NULL to indicate an inaccessible file.
     */
    MBM_allow = (LYlines - 7);	/* We need 7 for header and footer */
    /*
     * Screen big enough?
     */
    if (MBM_allow <= 0) {
	/*
	 * Too small.
	 */
	HTAlert(MULTIBOOKMARKS_SMALL);
	return (-2);
    }

    MBM_screens = (MBM_V_MAXFILES / MBM_allow) + 1;	/* int rounds off low. */

    MBM_current = 1;		/* Gotta start somewhere :-) */

    for (;;) {
	MBM_from = MBM_allow * MBM_current - MBM_allow;
	if (MBM_from < 0)
	    MBM_from = 0;	/* 0 is default bookmark... */
	if (MBM_current != 1)
	    MBM_from++;

	MBM_to = (MBM_allow * MBM_current);
	if (MBM_to > MBM_V_MAXFILES)
	    MBM_to = MBM_V_MAXFILES;

	/*
	 * Display menu of bookmarks.  NOTE that we avoid printw()'s to
	 * increase the chances that any non-ASCII or multibyte/CJK characters
	 * will be handled properly.  - FM
	 */
	LYclear();
	LYmove(1, 5);
	lynx_start_h1_color();
	if (MBM_screens > 1) {
	    char *shead_buffer = 0;

	    HTSprintf0(&shead_buffer,
		       MULTIBOOKMARKS_SHEAD_MASK, MBM_current, MBM_screens);
	    LYaddstr(shead_buffer);
	    FREE(shead_buffer);
	} else {
	    LYaddstr(MULTIBOOKMARKS_SHEAD);
	}

	lynx_stop_h1_color();

	MBM_tmp_count = 0;
	for (c = MBM_from; c <= MBM_to; c++) {
	    LYmove(3 + MBM_tmp_count, 5);
	    LYaddch((chtype) LYindex2MBM(c));
	    LYaddstr(" : ");
	    if (MBM_A_subdescript[c])
		LYaddstr(MBM_A_subdescript[c]);
	    LYmove(3 + MBM_tmp_count, 36);
	    LYaddch('(');
	    if (MBM_A_subbookmark[c])
		LYaddstr(MBM_A_subbookmark[c]);
	    LYaddch(')');
	    MBM_tmp_count++;
	}

	/*
	 * Don't need to show it if it all fits on one screen!
	 */
	if (MBM_screens > 1) {
	    LYmove(LYlines - 2, 0);
	    LYaddstr("'");
	    lynx_start_bold();
	    LYaddstr("[");
	    lynx_stop_bold();
	    LYaddstr("' ");
	    LYaddstr(PREVIOUS);
	    LYaddstr(", '");
	    lynx_start_bold();
	    LYaddstr("]");
	    lynx_stop_bold();
	    LYaddstr("' ");
	    LYaddstr(NEXT_SCREEN);
	}

	LYMBM_statusline(MULTIBOOKMARKS_SAVE);

	for (;;) {
	    c = LYgetch();
#ifdef VMS
	    if (HadVMSInterrupt) {
		HadVMSInterrupt = FALSE;
		c = 7;
	    }
#endif /* VMS */

	    if ((d = LYMBM2index(c)) >= 0) {
		/*
		 * See if we have a bookmark like that.
		 */
		if (MBM_A_subbookmark[d] != NULL)
		    return (d);

		show_bookmark_not_defined();
		LYMBM_statusline(MULTIBOOKMARKS_SAVE);
	    } else if (LYisNonAlnumKeyname(c, LYK_PREV_DOC) ||
		       c == 7 || c == 3) {
		/*
		 * Treat left-arrow, ^G, or ^C as cancel.
		 */
		return (-2);
	    } else if (LYisNonAlnumKeyname(c, LYK_REFRESH)) {
		/*
		 * Refresh the screen.
		 */
		lynx_force_repaint();
		LYrefresh();
	    } else if (LYisNonAlnumKeyname(c, LYK_ACTIVATE)) {
		/*
		 * Assume default bookmark file on ENTER or right-arrow.
		 */
		return (MBM_A_subbookmark[0] ? 0 : -1);
	    } else if ((c == ']' || LYisNonAlnumKeyname(c, LYK_NEXT_PAGE)) &&
		       MBM_screens > 1) {
		/*
		 * Next range, if available.
		 */
		if (++MBM_current > MBM_screens)
		    MBM_current = 1;
		break;
	    }

	    else if ((c == '[' || LYisNonAlnumKeyname(c, LYK_PREV_PAGE)) &&
		     MBM_screens > 1) {
		/*
		 * Previous range, if available.
		 */
		if (--MBM_current <= 0)
		    MBM_current = MBM_screens;
		break;
	    }
	}
    }
}

/*
 * This function returns TRUE if we have sub-bookmarks defined.  Otherwise
 * (i.e., only the default bookmark file is defined), it returns FALSE.  - FM
 */
BOOLEAN LYHaveSubBookmarks(void)
{
    int i;

    for (i = 1; i < MBM_V_MAXFILES; i++) {
	if (non_empty(MBM_A_subbookmark[i]))
	    return (TRUE);
    }

    return (FALSE);
}

/*
 * This function passes a string to _statusline(), making sure it is at the
 * bottom of the screen if LYMultiBookmarks is not MBM_OFF, otherwise, letting
 * it go to the normal statusline position based on the current user mode.  We
 * want to use _statusline() so that any multibyte/CJK characters in the string
 * will be handled properly.  - FM
 */
void LYMBM_statusline(const char *text)
{
    if (LYMultiBookmarks != MBM_OFF && user_mode == NOVICE_MODE) {
	LYStatusLine = (LYlines - 1);
	_statusline(text);
	LYStatusLine = -1;
    } else {
	_statusline(text);
    }
}

/*
 * Check whether we have any visible (non-blank) chars.
 */
static BOOLEAN havevisible(const char *Title)
{
    BOOLEAN result = FALSE;
    const char *p = Title;
    unsigned char c;
    long unicode;

    for (; *p; p++) {
	c = UCH(TOASCII(*p));
	if (c > 32 && c < 127) {
	    result = TRUE;
	    break;
	}
	if (c <= 32 || c == 127)
	    continue;
	if (LYHaveCJKCharacterSet || !UCCanUniTranslateFrom(current_char_set)) {
	    result = TRUE;
	    break;
	}
	unicode = UCTransToUni(*p, current_char_set);
	if (unicode == ucNeedMore)
	    continue;
	if (unicode > 32 && unicode < 127) {
	    result = TRUE;
	    break;
	}
	if (unicode <= 32 || unicode == 0xa0 || unicode == 0xad)
	    continue;
	if (unicode < 0x2000 || unicode >= 0x200f) {
	    result = TRUE;
	    break;
	}
    }
    return (result);
}

/*
 * Check whether string have 8 bit chars.
 */
static BOOLEAN have8bit(const char *Title)
{
    const char *p = Title;

    for (; *p; p++) {
	if (UCH(*p) > 127)
	    return (TRUE);
    }
    return (FALSE);		/* if we came here */
}

/*
 * Ok, title have 8-bit characters and they are in display charset.  Bookmarks
 * is a permanent file.  To avoid dependencies from display character set which
 * may be changed with time we store 8-bit characters as numeric character
 * reference (NCR), so where the character encoded as unicode number in form of
 * &#xUUUU;
 *
 * To make bookmarks more readable for human (&#xUUUU certainly not) we add a
 * comment with '7-bit approximation' from the converted string.  This is a
 * valid HTML and bookmarks code.
 *
 * We do not want use META charset tag in bookmarks file:  it will never be
 * changed later :-(
 *
 * NCR's translation is part of I18N and HTML4.0 supported starting with Lynx
 * 2.7.2, Netscape 4.0 and MSIE 4.0.  Older versions fail.
 */
static char *title_convert8bit(const char *Title)
{
    const char *p = Title;
    char *p0;
    char *q;
    char *comment = NULL;
    char *ncr = NULL;
    char *buf = NULL;
    int charset_in = current_char_set;
    int charset_out = UCGetLYhndl_byMIME("us-ascii");

    for (; *p; p++) {
	char temp[2];

	LYStrNCpy(temp, p, sizeof(temp) - 1);
	if (UCH(*temp) <= 127) {
	    StrAllocCat(comment, temp);
	    StrAllocCat(ncr, temp);
	} else if (charset_out >= 0) {
	    long unicode;
	    char replace_buf[32];

	    if (UCTransCharStr(replace_buf, (int) sizeof(replace_buf), *temp,
			       charset_in, charset_out, YES) > 0)
		StrAllocCat(comment, replace_buf);

	    unicode = UCTransToUni(*temp, charset_in);

	    StrAllocCat(ncr, "&#");
	    sprintf(replace_buf, "%ld", unicode);
	    StrAllocCat(ncr, replace_buf);
	    StrAllocCat(ncr, ";");
	}
    }

    if (comment != NULL) {
	/*
	 * Cleanup comment, collapse multiple dashes into one dash, skip '>'.
	 */
	for (q = p0 = comment; *p0; p0++) {
	    if (UCH(TOASCII(*p0)) >= 32 &&
		*p0 != '>' &&
		(q == comment || *p0 != '-' || *(q - 1) != '-')) {
		*q++ = *p0;
	    }
	}
	*q = '\0';

	/*
	 * valid bookmark should be a single line (no linebreaks!).
	 */
	StrAllocCat(buf, "<!-- ");
	StrAllocCat(buf, comment);
	StrAllocCat(buf, " -->");
	StrAllocCat(buf, ncr);

	FREE(comment);
    }
    FREE(ncr);
    return (buf);
}

/*
 * Since this is the "Default Bookmark File", we save it as a global, and as
 * the first MBM_A_subbookmark entry.
 */
void set_default_bookmark_page(char *value)
{
    if (value != 0) {
	if (bookmark_page == 0
	    || strcmp(bookmark_page, value)) {
	    StrAllocCopy(bookmark_page, value);
	}
	StrAllocCopy(BookmarkPage, bookmark_page);
	StrAllocCopy(MBM_A_subbookmark[0], bookmark_page);
	StrAllocCopy(MBM_A_subdescript[0], MULTIBOOKMARKS_DEFAULT);
    }
}
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYBookmark.c,v 1.62 2009/01/02 00:01:00 tom Exp $
d43 1
a43 1
	const char *result = strchr(letters, ch);
d47 1
a47 1
	    return (result - letters);
d123 1
a123 1
	    && !strncmp(string_buffer, "ncsa-xmosaic-hotlist-format-1", 29)) {
d156 1
a156 1
    LYRemoveTemp(newfile);
a209 2
    char string_buffer[BUFSIZ];
    char tmp_buffer[BUFSIZ];
d213 2
d246 1
a246 1
	LYstrncpy(filename_buffer, filename, sizeof(filename_buffer) - 1);
d285 2
a286 1
		TO_EUC((const unsigned char *) title, (unsigned char *) tmp_buffer);
d289 2
a290 1
		TO_SJIS((const unsigned char *) title, (unsigned char *) tmp_buffer);
d295 1
a295 1
	    LYstrncpy(string_buffer, tmp_buffer, sizeof(string_buffer) - 1);
d297 1
a297 1
	    LYstrncpy(string_buffer, title, sizeof(string_buffer) - 1);
d299 1
a299 1
	LYReduceBlanks(string_buffer);
d301 2
a302 2
	LYgetstr(string_buffer, VISIBLE, sizeof(string_buffer), NORECALL);
	if (*string_buffer == '\0') {
d308 1
a308 1
    } while (!havevisible(string_buffer));
d318 1
a318 1
    LYformTitle(&Title, string_buffer);
d324 4
a327 2
	FREE(Title);
	Title = p;
d439 2
a472 1
    mode_t mode;
d504 1
a504 2
	mode = ((stat_buf.st_mode & 0777) | 0600);	/* make it writable */
	(void) chmod(newfile, mode);
d526 1
a526 1
	char *cp, *cp2;
d537 1
a537 1
	    if ((cur == 0) && (cp2 = LYstrstr(cp, "<ol><LI>")))
d605 1
a605 1
	    LYRemoveTemp(newfile);
d687 1
a687 1
	LYRemoveTemp(newfile);
d1064 1
a1064 1
	LYstrncpy(temp, p, sizeof(temp) - 1);
d1068 1
a1068 1
	} else {
d1072 1
a1072 1
	    if (UCTransCharStr(replace_buf, sizeof(replace_buf), *temp,
d1085 10
a1094 8
    /*
     * Cleanup comment, collapse multiple dashes into one dash, skip '>'.
     */
    for (q = p0 = comment; *p0; p0++) {
	if (UCH(TOASCII(*p0)) >= 32 &&
	    *p0 != '>' &&
	    (q == comment || *p0 != '-' || *(q - 1) != '-')) {
	    *q++ = *p0;
d1096 1
a1096 2
    }
    *q = '\0';
d1098 7
a1104 7
    /*
     * valid bookmark should be a single line (no linebreaks!).
     */
    StrAllocCat(buf, "<!-- ");
    StrAllocCat(buf, comment);
    StrAllocCat(buf, " -->");
    StrAllocCat(buf, ncr);
d1106 2
a1107 1
    FREE(comment);
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d498 1
a498 1
	regular = (S_ISREG(stat_buf.st_mode) && stat_buf.st_nlink == 1);
d851 1
a851 1
	    LYaddch(LYindex2MBM(c));
d981 1
d988 4
a991 2
	if (c > 32 && c < 127)
	    return (TRUE);
d994 4
a997 2
	if (LYHaveCJKCharacterSet || !UCCanUniTranslateFrom(current_char_set))
	    return (TRUE);
d999 6
a1004 2
	if (unicode > 32 && unicode < 127)
	    return (TRUE);
d1007 4
a1010 3
	if (unicode >= 0x2000 && unicode < 0x200f)
	    continue;
	return (TRUE);
d1012 1
a1012 1
    return (FALSE);		/* if we came here */
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d10 1
a10 1
#include <LYCharUtils.h> /* need for META charset */
d12 1
a12 1
#include <LYCharSets.h>  /* need for LYHaveCJKCharacterSet */
d23 2
a24 2
PUBLIC char *MBM_A_subbookmark[MBM_V_MAXFILES+1];
PUBLIC char *MBM_A_subdescript[MBM_V_MAXFILES+1];
d26 2
a27 2
PRIVATE BOOLEAN is_mosaic_hotlist = FALSE;
PRIVATE char * convert_mosaic_bookmark_file PARAMS((char *filename_buffer));
d29 1
a29 1
PUBLIC int LYindex2MBM ARGS1(int, n)
d31 2
a32 1
    static char MBMcodes[MBM_V_MAXFILES+2] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
d36 1
a36 1
PUBLIC int LYMBM2index ARGS1(int, ch)
d39 3
a41 2
	char *letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	char *result = strchr(letters, ch);
d43 1
a43 1
	 && (result - letters) <= MBM_V_MAXFILES)
d49 1
a49 2
PRIVATE void
show_bookmark_not_defined NOARGS
d54 2
a55 2
	    BOOKMARK_FILE_NOT_DEFINED,
	    key_for_func(LYK_OPTIONS));
d61 9
a69 11
 *  Tries to open a bookmark file for reading, which may be
 *  the default, or based on offering the user a choice from
 *  the MBM_A_subbookmark[] array.  If successful the file is
 *  closed, and the filename in system path specs is returned,
 *  the URL is allocated into *URL, and the MBM_A_subbookmark[]
 *  filepath is allocated into the BookmarkPage global.  Returns
 *  a zero-length pointer to flag a cancel, or a space to flag
 *  an undefined selection, without allocating into *URL or
 *  BookmarkPage.  Returns NULL with allocating into BookmarkPage
 *  but not *URL is the selection is valid but the file doesn't
 *  yet exist. - FM
d71 1
a71 2
PUBLIC char * get_bookmark_filename ARGS1(
	char **,	URL)
d79 2
a80 2
     *	Multi_Bookmarks support. - FMG & FM
     *	Let user select a bookmark file.
d85 1
a85 1
	 *  Zero-length pointer flags a cancel. - FM
d87 1
a87 1
	return("");
d91 1
a91 1
	 *  Space flags an undefined selection. - FMG
d93 1
a93 1
	return(" ");
d96 5
a100 6
	 *  Save the filepath as a global.  The system path will be
	 *  loaded into to the (static) filename_buffer as the return
	 *  value, the URL will be allocated into *URL, and we also
	 *  need the filepath available to calling functions.  This
	 *  is all pitifully non-reentrant, a la the original Lynx,
	 *  and should be redesigned someday. - FM
d106 1
a106 1
     *	Seek it in the home path. - FM
d112 1
a112 1
		BookmarkPage, filename_buffer));
d119 4
a122 3
	 && *LYTrimNewline(string_buffer) != '\0'
	 && !strncmp(string_buffer, "ncsa-xmosaic-hotlist-format-1", 29)) {
	    char *newname;
d124 1
a124 1
	     *  It is a mosaic hotlist file.
d136 1
a136 1
	return(filename_buffer);  /* bookmark file exists */
d138 1
a138 1
    return(NULL);
d140 1
a140 1
} /* big end */
d143 2
a144 2
 *  Converts a Mosaic hotlist file into an HTML
 *  file for handling as a Lynx bookmark file. - FM
d146 1
a146 2
PRIVATE char * convert_mosaic_bookmark_file ARGS1(
	char *,		filename_buffer)
d161 1
a161 1
	return ("");  /* should always open */
d163 1
a163 1
    fprintf(nfp,"<head>\n<title>%s</title>\n</head>\n",MOSAIC_BOOKMARK_TITLE);
d173 4
a176 4
	    if ((line % 2) == 0) { /* even lines */
		if(*buf != '\0') {
		    strtok(buf," "); /* kill everything after the space */
		    fprintf(nfp,"<LI><a href=\"%s\">",buf); /* the URL */
d178 2
a179 2
	    } else { /* odd lines */
		fprintf(nfp,"%s</a>\n",buf);  /* the title */
d187 1
a187 1
    return(newfile);
d190 3
a192 3
PRIVATE  BOOLEAN havevisible PARAMS((CONST char *Title));
PRIVATE  BOOLEAN have8bit PARAMS((CONST char *Title));
PRIVATE  char* title_convert8bit PARAMS((CONST char *Title));
d195 3
a197 5
 *  Adds a link to a bookmark file, creating the file
 *  if it doesn't already exist, and making sure that
 *  no_cache is set for a pre-existing, cached file,
 *  so that the change will be evident on return to
 *  to that file. - FM
d199 2
a200 3
PUBLIC void save_bookmark_link ARGS2(
	char *,		address,
	char *,		title)
d204 1
a204 1
    char *filename;
d217 1
a217 1
     *	Make sure we were passed something to save. - FM
d219 1
a219 1
    if (!(address && *address)) {
d225 1
a225 2
     *	Offer a choice of bookmark files,
     *	or get the default. - FMG
d230 4
a233 6
     *	If filename is NULL, must create a new file.  If
     *	filename is a space, an invalid bookmark file was
     *	selected, or if zero-length, the user cancelled.
     *	Ignore request in both cases.  Otherwise, make
     *	a copy before anything might change the static
     *	get_bookmark_filename() buffer. - FM
d239 1
a239 1
	if (*filename == '\0' || !strcmp(filename," ")) {
d243 1
a243 1
	LYstrncpy(filename_buffer, filename, sizeof(filename_buffer)-1);
d247 2
a248 2
     *	If BookmarkPage is NULL, something went
     *	wrong, so ignore the request. - FM
d256 2
a257 2
     *	If the link will be added to the same
     *	bookmark file, get confirmation. - FM
d260 5
a264 4
	CONST char *url = HTLoadedDocumentURL();
	CONST char *page = (*BookmarkPage == '.')
			    ? (BookmarkPage + 1)
			    : BookmarkPage;
d276 1
a276 1
     *	Allow user to change the title. - FM
d280 1
a280 1
	    switch(kanji_code) {
d282 1
a282 1
		TO_EUC((CONST unsigned char *) title, (unsigned char *) tmp_buffer);
d285 1
a285 1
		TO_SJIS((CONST unsigned char *) title, (unsigned char *) tmp_buffer);
d290 1
a290 1
	    LYstrncpy(string_buffer, tmp_buffer, sizeof(string_buffer)-1);
d292 1
a292 1
	    LYstrncpy(string_buffer, title, sizeof(string_buffer)-1);
d294 1
a294 1
	convert_to_spaces(string_buffer, FALSE);
d303 1
a303 1
    } while(!havevisible(string_buffer));
d306 2
a307 3
     *	Create the Title with any left-angle-brackets
     *	converted to &lt; entities and any ampersands
     *	converted to &amp; entities.  - FM
d309 3
a311 3
     *  Convert 8-bit letters to &#xUUUU to avoid dependencies
     *  from display character set which may need changing.
     *  Do NOT convert any 8-bit chars if we have CJK display. - LP
d318 1
d324 2
a325 2
     *	Create the bookmark file, if it doesn't exist already,
     *	Otherwise, open the pre-existing bookmark file. - FM
d330 1
a330 1
	 *  Seek it in the home path. - FM
d337 1
a337 1
		BookmarkPage, filename_buffer));
d347 1
a347 1
     *	Convert all ampersands in the address to &amp; entities. - FM
d353 2
a354 2
     *	If we created a new bookmark file, write the headers. - FM
     *  Once and forever...
d367 2
a368 2
#endif	/* !_WINDOWS */
	fprintf(fp,"<title>%s</title>\n</head>\n", BOOKMARK_TITLE);
d371 1
a371 1
	    gettext("     You can delete links by the 'R' key<br>\n<ol>\n"));
d374 1
a374 1
		    gettext("\
d378 1
a378 1
		    gettext("\
d381 1
a381 1
		    gettext("\
d386 1
a386 1
#endif	/* _WINDOWS */
d390 1
a390 1
     *	Add the bookmark link, in Mosaic hotlist or Lynx format. - FM
d394 2
a395 1
	char *TimeString = (char *)ctime (&NowTime);
d397 1
a397 1
	 *  TimeString has a \n at the end.
d399 1
a399 1
	fprintf(fp,"%s %s%s\n", Address, TimeString, Title);
d401 1
a401 1
	fprintf(fp,"<LI><a href=\"%s\">%s</a>\n", Address, Title);
d407 2
a408 3
     *	If this is a cached bookmark file, set nocache for
     *	it so we'll see the new bookmark link when that
     *	cache is retrieved. - FM
d421 1
a421 1
		if ((text = (HText *)HTAnchor_document(tmpanchor)) != NULL) {
d430 1
a430 1
     *	Clean up and report success.
d440 4
a443 5
 *  Remove a link from a bookmark file.  The calling
 *  function is expected to have used get_filename_link(),
 *  pass us the link number as cur, the MBM_A_subbookmark[]
 *  string as cur_bookmark_page, and to have set up no_cache
 *  itself. - FM
d445 2
a446 3
PUBLIC void remove_bookmark_link ARGS2(
	int,		cur,
	char *,		cur_bookmark_page)
d451 1
d453 3
a455 2
    char filename_buffer[NAM$C_MAXRSS+12];
    char newfile[NAM$C_MAXRSS+12];
d461 1
d478 1
a478 1
		cur_bookmark_page, filename_buffer));
a489 1

d492 1
a492 1
     *	Explicitly preserve bookmark file mode on Unix. - DSL
d496 1
a496 1
	mode = ((stat_buf.st_mode & 0777) | 0600); /* make it writable */
d507 3
a509 2
	int del_line = cur*2;  /* two lines per entry */
	n = -3;  /* skip past cookie and name lines */
d512 2
a513 2
	    if (n == del_line || n == del_line+1)
		continue;  /* remove two lines */
d526 1
d530 2
a531 2
	    if ((cur == 0) && (cp2 = LYstrstr(cp,"<ol><LI>")))
		keep_ol = TRUE; /* Do not erase, this corrects a bug in an
d543 1
a543 1
			fprintf(nfp,"<ol>\n");
d555 1
a555 1
			newfile, filename_buffer));
d571 24
a594 20
     *	By copying onto the bookmark file, rather than renaming it, we
     *	can preserve the original ownership of the file, provided that
     *	it is writable by the current process.
     *	Changed to copy  1998-04-26 -- gil
     *  But if the copy fails, for example because the filesystem is full,
     *  we are left with a corrupt bookmark file.  Changed back to use
     *  the previous mechanism [try rename(), then mv for EXDEV], except
     *  in usual cases (not a regular file e.g., symbolic link, or has hard
     *  links).  This will let bookmarks survive a filesystem full condition
     *  in the "normal" case (bookmark is on same filesystem as home directory,
     *  is a regular file, has no additional hard links).
     *  If we first tried LYCopyFile, and that fails, also fall back to trying
     *  the other stuff.  That gives a chance to recover in case the LYCopyFile
     *  left a corrupt target file.
     *  If there is an error, and that error may mean that the bookmark file
     *  has been corrupted, don't remove the temporary newfile (which should
     *  always be uncorrupted) in place, it may still be used to recover
     *  manually.  If this applies, produce an additional message to that
     *  effect.  The temp file will still be removed by normal program exit
     *  cleanup. - kw 1999-11-12
d601 1
a601 1
	LYSleepAlert();	/* give a chance to see error from cp - kw */
d605 1
a605 1
#endif  /* UNIX */
d617 2
a618 3
	 *  Rename won't work across file systems.
	 *  Check if this is the case and do something appropriate.
	 *  Used to be ODD_RENAME
d634 1
a634 1
	    static CONST char MV_FMT[] = "%s %s %s";
d636 1
a636 1
	    CONST char *program;
d669 1
a669 2

failure:
d685 1
a685 1
 *  Allows user to select sub-bookmarks files. - FMG & FM
d687 1
a687 1
PUBLIC int select_multi_bookmarks NOARGS
d692 1
a692 1
     *	If not enabled, pick the "default" (0).
d695 2
a696 2
	if (MBM_A_subbookmark[0]) /* If it exists! */
	    return(0);
d698 1
a698 1
	    return(-1);
d702 3
a704 3
     *	For ADVANCED users, we can just mess with the status line to save
     *	the 2 redraws of the screen, if LYMBMAdvnced is TRUE.  '=' will
     *	still show the screen and let them do it the "long" way.
d708 1
a708 1
get_advanced_choice:
d718 1
a718 1
	     *	Treat left-arrow, ^G, or ^C as cancel.
d720 1
a720 1
	    return(-2);
d724 1
a724 1
	     *	Refresh the screen.
d732 1
a732 1
	     *	Assume default bookmark file on ENTER or right-arrow.
d737 5
a741 5
	    case '=':
		/*
		 *  Get the choice via the menu.
		 */
		return(select_menu_multi_bookmarks());
d743 8
a750 8
	    default:
		/*
		 *  Convert to an array index, act on it if valid.
		 *  Otherwise, get another keystroke.
		 */
		if ((c = LYMBM2index(c)) < 0) {
		    goto get_advanced_choice;
		}
d753 1
a753 1
	 *  See if we have a bookmark like that.
d758 1
a758 1
	 *  Get the choice via the menu.
d760 1
a760 1
	return(select_menu_multi_bookmarks());
d765 1
a765 1
 *  Allows user to select sub-bookmarks files. - FMG & FM
d767 1
a767 1
PUBLIC int select_menu_multi_bookmarks NOARGS
d773 1
a773 1
     *	If not enabled, pick the "default" (0).
d776 1
a776 1
	return(0);
d779 4
a782 4
     *	Filip M. Gieszczykiewicz (filipg@@paranoia.com) & FM
     *	---------------------------------------------------
     *	MBM_A_subbookmark[n] - Hold values of the respective
     *	"multi_bookmarkn" in the lynxrc file.
d784 1
a784 2
     *	MBM_A_subdescript[n] - Hold description entries in the
     *	lynxrc file.
d786 3
a788 3
     *	Note: MBM_A_subbookmark[0] is defined to be same value as
     *	      "bookmark_file" in the lynxrc file and/or the startup
     *	      "bookmark_page".
d790 1
a790 2
     *	We make the display of bookmarks depend on rows we have
     *	available.
d792 4
a795 5
     *	We load BookmarkPage with the valid MBM_A_subbookmark[n]
     *	via get_bookmark_filename().  Otherwise, that function
     *	returns a zero-length string to indicate a cancel, a
     *	single space to indicate an invalid choice, or NULL to
     *	indicate an inaccessible file.
d797 1
a797 1
    MBM_allow=(LYlines-7);	/* We need 7 for header and footer */
d799 1
a799 1
     *	Screen big enough?
d803 1
a803 1
	 *  Too small.
d809 1
a809 1
    MBM_screens = (MBM_V_MAXFILES/MBM_allow)+1; /* int rounds off low. */
d811 1
a811 1
    MBM_current = 1; /* Gotta start somewhere :-) */
d816 1
a816 1
	    MBM_from = 0; /* 0 is default bookmark... */
d825 3
a827 3
	 *  Display menu of bookmarks.  NOTE that we avoid printw()'s
	 *  to increase the chances that any non-ASCII or multibyte/CJK
	 *  characters will be handled properly. - FM
d831 1
a831 1
	lynx_start_h1_color ();
d834 1
d836 1
a836 1
		    MULTIBOOKMARKS_SHEAD_MASK, MBM_current, MBM_screens);
d843 1
a843 1
	lynx_stop_h1_color ();
d847 1
a847 1
	    LYmove(3+MBM_tmp_count, 5);
d852 1
a852 1
	    LYmove(3+MBM_tmp_count,36);
d861 1
a861 1
	 *  Don't need to show it if it all fits on one screen!
d864 1
a864 1
	    LYmove(LYlines-2, 0);
d892 1
a892 1
		 *  See if we have a bookmark like that.
d895 1
a895 1
		    return(d);
d900 1
a900 1
		c == 7 || c == 3) {
d902 1
a902 1
		 *  Treat left-arrow, ^G, or ^C as cancel.
d904 1
a904 1
		return(-2);
d907 1
a907 1
		 *  Refresh the screen.
d913 1
a913 1
		 *  Assume default bookmark file on ENTER or right-arrow.
d915 3
a917 3
		return(MBM_A_subbookmark[0] ? 0 : -1);
	    } else if ((c == ']' ||  LYisNonAlnumKeyname(c, LYK_NEXT_PAGE)) &&
		MBM_screens > 1) {
d919 1
a919 1
		 *  Next range, if available.
d926 2
a927 2
	    else if ((c == '[' ||  LYisNonAlnumKeyname(c, LYK_PREV_PAGE)) &&
		MBM_screens > 1) {
d929 1
a929 1
		 *  Previous range, if available.
d940 2
a941 3
 *  This function returns TRUE if we have sub-bookmarks defined.
 *  Otherwise (i.e., only the default bookmark file is defined),
 *  it returns FALSE. - FM
d943 1
a943 1
PUBLIC BOOLEAN LYHaveSubBookmarks NOARGS
d948 2
a949 2
	if (MBM_A_subbookmark[i] != NULL && *MBM_A_subbookmark[i] != '\0')
	    return(TRUE);
d952 1
a952 1
    return(FALSE);
d956 5
a960 6
 *  This function passes a string to _statusline(), making
 *  sure it is at the bottom of the screen if LYMultiBookmarks
 *  is not MBM_OFF, otherwise, letting it go to the normal statusline
 *  position based on the current user mode.  We want to use
 *  _statusline() so that any multibyte/CJK characters in the
 *  string will be handled properly. - FM
d962 1
a962 2
PUBLIC void LYMBM_statusline  ARGS1(
	char *,		text)
d976 1
a976 1
PRIVATE  BOOLEAN havevisible ARGS1(CONST char *, Title)
d978 1
a978 1
    CONST char *p = Title;
d982 1
a982 1
    for ( ; *p; p++) {
d985 1
a985 1
	    return(TRUE);
d989 1
a989 1
	    return(TRUE);
d992 1
a992 1
	    return(TRUE);
d997 1
a997 1
	return(TRUE);
d999 1
a999 1
    return(FALSE); /* if we came here */
d1005 1
a1005 1
PRIVATE  BOOLEAN have8bit ARGS1(CONST char *, Title)
d1007 1
a1007 1
    CONST char *p = Title;
d1009 1
a1009 1
    for ( ; *p; p++) {
d1011 1
a1011 1
	return(TRUE);
d1013 1
a1013 1
    return(FALSE); /* if we came here */
d1017 5
a1021 5
 *  Ok, title have 8-bit characters and they are in display charset.
 *  Bookmarks is a permanent file.  To avoid dependencies from display
 *  character set which may be changed with time
 *  we store 8-bit characters as numeric character reference (NCR),
 *  so where the character encoded as unicode number in form of &#xUUUU;
d1023 3
a1025 3
 *  To make bookmarks more readable for human (&#xUUUU certainly not)
 *  we add a comment with '7-bit approximation' from the converted string.
 *  This is a valid HTML and bookmarks code.
d1027 2
a1028 6
 *  We do not want use META charset tag in bookmarks file:
 *  it will never be changed later :-(
 *  NCR's translation is part of I18N and HTML4.0
 *  supported starting with Lynx 2.7.2,
 *  Netscape 4.0 and MSIE 4.0.
 *  Older versions fail.
d1030 2
d1033 1
a1033 1
PRIVATE  char* title_convert8bit ARGS1(CONST char *, Title)
d1035 1
a1035 1
    CONST char *p = Title;
d1039 1
a1039 1
    char *ncr     = NULL;
d1041 1
a1041 1
    int charset_in  = current_char_set;
d1044 1
a1044 1
    for ( ; *p; p++) {
d1046 2
a1047 1
	LYstrncpy(temp, p, sizeof(temp)-1);
d1053 1
a1053 1
	    char replace_buf [32];
d1056 1
a1056 1
				  charset_in, charset_out, YES) > 0)
d1059 1
a1059 1
	    unicode = UCTransToUni( *temp, charset_in);
d1069 1
a1069 2
     *  Cleanup comment, collapse multiple dashes into one dash,
     *  skip '>'.
d1074 1
a1074 1
	    (q == comment || *p0 != '-' || *(q-1) != '-')) {
d1090 1
a1090 1
    return(buf);
d1097 1
a1097 2
PUBLIC void set_default_bookmark_page ARGS1(
	char *,		value)
d1101 1
a1101 1
	 || strcmp(bookmark_page, value)) {
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d3 1
d122 1
a154 1
    char *endline;
d174 3
a176 10
	if(line >= 0) {
	    endline = &buf[strlen(buf)-1];
	    if(*endline == '\n')
		*endline = '\0';
#ifdef DOSPATH	/* 1998/01/10 (Sat) 15:41:35 */
	    endline = strchr(buf, '\r');
	    if (endline == NULL)
		*endline = '\0';
#endif
	    if((line % 2) == 0) { /* even lines */
d268 12
a279 9
    if (LYMultiBookmarks != MBM_OFF &&
	strstr(HTLoadedDocumentURL(),
	       (*BookmarkPage == '.' ?
		    (BookmarkPage+1) : BookmarkPage)) != NULL) {
	LYMBM_statusline(MULTIBOOKMARKS_SELF);
	c = LYgetch_single();
	if (c != 'L') {
	    FREE(bookmark_URL);
	    return;
d420 3
a422 3
	    if (history[i].bookmark &&
		!strcmp(history[i].address, bookmark_URL)) {
		WWWDoc.address = history[i].address;
d425 1
a425 1
		WWWDoc.bookmark = history[i].bookmark;
d428 2
a429 4
		if (((tmpanchor = HTAnchor_parent(
					HTAnchor_findAddress(&WWWDoc)
						 )) != NULL) &&
		    (text = (HText *)HTAnchor_document(tmpanchor)) != NULL) {
d571 1
a571 1
#ifdef DOSPATH
d610 1
a610 1
#ifdef UNIX
d613 1
a613 1
#endif /* UNIX */
d639 15
a653 15
	    HTAddParam(&buffer, MV_FMT, 1, MV_PATH);
	    HTAddParam(&buffer, MV_FMT, 2, newfile);
	    HTAddParam(&buffer, MV_FMT, 3, filename_buffer);
	    HTEndParam(&buffer, MV_FMT, 3);
	    if (LYSystem(buffer) == 0) {
#ifdef UNIX
		if (regular)
		    chmod(filename_buffer, stat_buf.st_mode & 07777);
#endif /* UNIX */
		FREE(buffer);
		return;
	    } else {
		FREE(buffer);
		keep_tempfile = TRUE;
		goto failure;
d655 3
d720 1
a720 1
	if (LYisNonAlnumKeyname(c, LYK_PREV_DOC) || LYCharIsINTERRUPT(c)) {
d872 1
a872 1
	    start_bold();
d874 1
a874 1
	    stop_bold();
d878 1
a878 1
	    start_bold();
d880 1
a880 1
	    stop_bold();
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d14 1
d28 18
d113 3
a115 19
    CTRACE(tfp, "\nget_bookmark_filename: SEEKING %s\n   AS %s\n\n",
		BookmarkPage, filename_buffer);
    if ((fp = fopen(filename_buffer,"r")) != NULL) {
	goto success;
    }

    /*
     *	Failure.
     */
    return(NULL);

success:
    /*
     *	We now have the file open.
     *	Check if it is a mosaic hotlist.
     */
    if (LYSafeGets(&string_buffer, fp) != 0
     && !strncmp(string_buffer, "ncsa-xmosaic-hotlist-format-1", 29)) {
	char *newname;
d117 2
a118 1
	 *  It is a mosaic hotlist file.
d120 17
a136 6
	is_mosaic_hotlist = TRUE;
	newname = convert_mosaic_bookmark_file(filename_buffer);
	LYLocalFileToURL(URL, newname);
    } else {
	is_mosaic_hotlist = FALSE;
	LYLocalFileToURL(URL, filename_buffer);
d138 1
a138 4
    FREE(string_buffer);
    fclose(fp);

    return(filename_buffer);  /* bookmark file exists */
d158 1
a158 1
	sleep(AlertSecs);
d162 1
a162 1
    if ((fp = fopen(filename_buffer, "r")) == NULL)
d177 5
d195 1
a195 1
    fclose(fp);
d220 1
d258 1
a258 1
	strcpy(filename_buffer, filename);
d274 1
a274 1
    if (LYMultiBookmarks == TRUE &&
d279 2
a280 2
	c = LYgetch();
	if (TOUPPER(c) != 'L') {
d290 15
a304 1
	LYstrncpy(string_buffer, title, sizeof(string_buffer)-1);
d310 1
a310 1
	    sleep(MessageSecs);
d325 1
a325 1
    StrAllocCopy(Title, string_buffer);
d347 3
a349 3
    CTRACE(tfp, "\nsave_bookmark_link: SEEKING %s\n   AS %s\n\n",
		BookmarkPage, filename_buffer);
    if ((fp = fopen(filename_buffer, (first_time ? "w" : "a+"))) == NULL) {
d351 1
a351 1
	sleep(AlertSecs);
d368 9
a376 1
	fprintf(fp,"<head>\n");
d378 1
d380 5
a384 1
	fprintf(fp, "%s<br>\n%s\n\n<!--\n%s\n-->\n\n<p>\n<ol>",
d397 1
d413 1
a413 1
    fclose(fp);
d449 1
a449 1
    sleep(MessageSecs);
d469 1
d473 2
d477 2
d482 1
a482 1
    CTRACE(tfp, "remove_bookmark_link: deleting link number: %d\n", cur);
d489 3
a491 3
    CTRACE(tfp, "\nremove_bookmark_link: SEEKING %s\n   AS %s\n\n",
		cur_bookmark_page, filename_buffer);
    if ((fp = fopen(filename_buffer, "r")) == NULL) {
d498 1
a498 1
	fclose(fp);
d508 1
d512 1
a512 1
	    (void) fclose(fp);
d531 1
a531 1
	char *cp;
d537 1
d541 3
d552 3
a554 1
		    CTRACE(tfp, "remove_bookmark_link: skipping link %d\n", n);
d564 3
a566 2
    CTRACE(tfp, "remove_bookmark_link: files: %s %s\n",
			newfile, filename_buffer);
d568 1
a568 1
    fclose(fp);
d570 4
d586 28
a613 5
     */
    if (LYCopyFile(newfile, filename_buffer) == 0)
	return;
    HTAlert(BOOKTEMP_COPY_FAIL);
#else  /* !UNIX */
d615 4
d628 4
a631 1
#ifdef _WINDOWS
d633 7
d641 1
a641 3
	if (errno == EXDEV)
#endif /* WINDOWS */
	{
d648 12
a659 3
	    LYSystem(buffer);
	    FREE(buffer);
	    return;
d661 2
d673 1
a673 1
#endif /* UNIX */
d678 2
a679 1
    LYCloseTempFP(nfp);
d681 7
a687 2
	fclose(fp);
    LYRemoveTemp(newfile);
d700 1
a700 1
    if (LYMultiBookmarks == FALSE || LYHaveSubBookmarks() == FALSE) {
d712 1
a712 1
    if (LYMBMAdvanced && user_mode == ADVANCED_MODE) {
d719 1
a719 1
	    c = 7;
d722 1
a722 2
	if (LYisNonAlnumKeyname(c, LYK_PREV_DOC) ||
	    c == 7 || c == 3) {
d733 1
a733 1
	    refresh();
d754 1
a754 2
		c = TOUPPER(c) - 'A';
		if (c < 0 || c > MBM_V_MAXFILES) {
d775 1
a775 1
    int c, MBM_tmp_count, MBM_allow;
d781 1
a781 1
    if (LYMultiBookmarks == FALSE)
a786 2
     *	LYMultiBookmarks - TRUE when multi_support enabled.
     *
d822 10
a831 28
draw_bookmark_choices:
    MBM_from = MBM_allow * MBM_current - MBM_allow;
    if (MBM_from < 0)
	MBM_from = 0; /* 0 is default bookmark... */
    if (MBM_current != 1)
	MBM_from++;

    MBM_to = (MBM_allow * MBM_current);
    if (MBM_to > MBM_V_MAXFILES)
	MBM_to = MBM_V_MAXFILES;

    /*
     *	Display menu of bookmarks.  NOTE that we avoid printw()'s
     *	to increase the chances that any non-ASCII or multibyte/CJK
     *	characters will be handled properly. - FM
     */
    clear();
    move(1, 5);
    lynx_start_h1_color ();
    if (MBM_screens > 1) {
	char *shead_buffer = 0;
	HTSprintf0(&shead_buffer,
		MULTIBOOKMARKS_SHEAD_MASK, MBM_current, MBM_screens);
	addstr(shead_buffer);
	FREE(shead_buffer);
    } else {
	addstr(MULTIBOOKMARKS_SHEAD);
    }
d833 17
a849 1
    lynx_stop_h1_color ();
d851 1
a851 14
    MBM_tmp_count = 0;
    for (c = MBM_from; c <= MBM_to; c++) {
	move(3+MBM_tmp_count, 5);
	addch((unsigned char)(c + 'A'));
	addstr(" : ");
	if (MBM_A_subdescript[c])
	    addstr(MBM_A_subdescript[c]);
	move(3+MBM_tmp_count,36);
	addch('(');
	if (MBM_A_subbookmark[c])
	    addstr(MBM_A_subbookmark[c]);
	addch(')');
	MBM_tmp_count++;
    }
d853 14
a866 28
    /*
     *	Don't need to show it if it all fits on one screen!
     */
    if (MBM_screens > 1) {
	move(LYlines-2, 0);
	addstr("'");
	standout();
	addstr("[");
	standend();
	addstr("' ");
	addstr(PREVIOUS);
	addstr(", '");
	standout();
	addstr("]");
	standend();
	addstr("' ");
	addstr(NEXT_SCREEN);
    }

    LYMBM_statusline(MULTIBOOKMARKS_SAVE);
get_bookmark_choice:
    c = LYgetch();
#ifdef VMS
    if (HadVMSInterrupt) {
	HadVMSInterrupt = FALSE;
	c = 7;
    }
#endif /* VMS */
a867 2
    if (LYisNonAlnumKeyname(c, LYK_PREV_DOC) ||
	c == 7 || c == 3) {
d869 1
a869 1
	 *  Treat left-arrow, ^G, or ^C as cancel.
d871 15
a885 2
	return(-2);
    }
d887 1
a887 8
    if (LYisNonAlnumKeyname(c, LYK_REFRESH)) {
	/*
	 *  Refresh the screen.
	 */
	lynx_force_repaint();
	refresh();
	goto get_bookmark_choice;
    }
d889 8
a896 6
    if (LYisNonAlnumKeyname(c, LYK_ACTIVATE)) {
	/*
	 *  Assume default bookmark file on ENTER or right-arrow.
	 */
	return(MBM_A_subbookmark[0] ? 0 : -1);
    }
d898 6
a903 9
    /*
     *	Next range, if available.
     */
    if ((c == ']' ||  LYisNonAlnumKeyname(c, LYK_NEXT_PAGE)) &&
	MBM_screens > 1) {
	if (++MBM_current > MBM_screens)
	    MBM_current = 1;
	goto draw_bookmark_choices;
    }
d905 28
a932 9
    /*
     *	Previous range, if available.
     */
    if ((c == '[' ||  LYisNonAlnumKeyname(c, LYK_PREV_PAGE)) &&
	MBM_screens > 1) {
	if (--MBM_current <= 0)
	    MBM_current = MBM_screens;
	goto draw_bookmark_choices;
    }
d934 10
a943 12
    c = TOUPPER(c) - 'A';
    /*
     *	See if we have a bookmark like that.
     */
    if (c < 0 || c > MBM_V_MAXFILES) {
	goto get_bookmark_choice;
    } else if (!MBM_A_subbookmark[c]) {
	show_bookmark_not_defined();
	LYMBM_statusline(MULTIBOOKMARKS_SAVE);
	goto get_bookmark_choice;
    } else {
	return(c);
d967 1
a967 1
 *  is TRUE, otherwise, letting it go to the normal statusline
d975 1
a975 1
    if (LYMultiBookmarks == TRUE && user_mode == NOVICE_MODE) {
d994 1
a994 1
	c = (unsigned char)(TOASCII(*p));
d1021 1
a1021 1
	if ((unsigned char)*p > 127)
d1060 1
a1060 1
	if ((unsigned char)*temp <= 127) {
d1085 1
a1085 1
	if ((unsigned char)(TOASCII(*p0)) >= 32 &&
d1104 18
@


1.1
log
@Initial revision
@
text
@d1 13
a13 13
#include "HTUtils.h"
#include "tcp.h"
#include "HTAlert.h"
#include "LYUtils.h"
#include "LYStrings.h"
#include "LYBookmark.h"
#include "LYGlobalDefs.h"
#include "LYSignal.h"
#include "LYSystem.h"
#include "LYKeymap.h"
#include "LYCharUtils.h"
#include "LYCurses.h"
#include "GridText.h"
a14 3
#ifdef DOSPATH
#include "HTDOS.h"
#endif
a15 1
#include "HTVMSUtils.h"
a16 1
extern BOOLEAN HadVMSInterrupt;	/* Flag from cleanup_sig() AST */
d19 1
a19 3
#include "LYLeaks.h"

#define FREE(x) if (x) {free(x); x = NULL;}
d27 12
d55 2
a56 3
    char URL_buffer[256];
    static char filename_buffer[256];
    char string_buffer[256];
d61 2
a62 2
     *  Multi_Bookmarks support. - FMG & FM
     *  Let user select a bookmark file.
d66 1
a66 1
        /*
d68 2
a69 2
	*/
        return("");
d71 1
a71 5
	sprintf(string_buffer,
		BOOKMARK_FILE_NOT_DEFINED,
		key_for_func(LYK_OPTIONS));
	_statusline(string_buffer);
	sleep(AlertSecs);
d77 1
a77 1
        /*
d89 1
a89 1
     *  Seek it in the home path. - FM
a90 1
    filename_buffer[255] = '\0';
d94 1
a94 2
    if (TRACE)
        fprintf(stderr, "\nget_bookmark_filename: SEEKING %s\n   AS %s\n\n",
d101 1
a101 1
     *  Failure.
d107 2
a108 2
     *  We now have the file open.
     *  Check if it is a mosaic hotlist.
d110 2
a111 2
    if (fgets(string_buffer, 255, fp) &&
	!strncmp(string_buffer, "ncsa-xmosaic-hotlist-format-1", 29)) {
a116 1
	fclose(fp);
d118 1
a118 11
#ifdef DOSPATH
	sprintf(URL_buffer, "file://localhost/%s",
		HTDOS_wwwName((char *)newname));
#else
#ifdef VMS
	sprintf(URL_buffer,"file://localhost%s",
		HTVMS_wwwName((char *)newname));
#else
	sprintf(URL_buffer,"file://localhost%s", newname);
#endif /* VMS */
#endif /* DOSPATH */
a119 1
	fclose(fp);
d121 1
a121 11
#ifdef DOSPATH
        sprintf(URL_buffer,"file://localhost/%s",
		HTDOS_wwwName((char *)filename_buffer));
#else
#ifdef VMS
	sprintf(URL_buffer,"file://localhost%s",
    		HTVMS_wwwName((char *)filename_buffer));
#else
	sprintf(URL_buffer,"file://localhost%s", filename_buffer);
#endif /* VMS */
#endif /* DOSPATH */ 
d123 2
a125 1
    StrAllocCopy(*URL, URL_buffer);
d137 1
a137 2
    static char newfile[256];
    static BOOLEAN first = TRUE;
d139 1
a139 1
    char buf[BUFSIZ];
d143 3
a145 11
    if (first) {
        tempname(newfile, NEW_FILE);
	first = FALSE;
#ifdef VMS
    } else {
        remove(newfile);   /* Remove duplicates on VMS. */
#endif /* VMS */
    }

    if ((nfp = fopen(newfile, "w")) == NULL) {
        LYMBM_statusline(NO_TEMP_FOR_HOTLIST);
d154 1
a154 1
    fprintf(nfp,"\
d158 1
a158 1
     been remapped by you or your system administrator.\n\n<p>\n<ol>\n");
d160 1
a160 1
    while (fgets(buf, sizeof(buf), fp) != NULL) {
d168 1
a168 1
	            fprintf(nfp,"<LI><a href=\"%s\">",buf); /* the URL */
d171 1
a171 1
	        fprintf(nfp,"%s</a>\n",buf);  /* the title */
d173 1
a173 1
	} 
d177 1
a177 1
    fclose(nfp);
d182 4
d201 2
a202 2
    char filename_buffer[256];
    char string_buffer[256];
d211 1
a211 1
     *  Make sure we were passed something to save. - FM
d214 1
a214 1
        HTAlert(MALFORMED_ADDRESS);
d219 2
a220 2
     *  Offer a choice of bookmark files,
     *  or get the default. - FMG
d225 6
a230 6
     *  If filename is NULL, must create a new file.  If
     *  filename is a space, an invalid bookmark file was
     *  selected, or if zero-length, the user cancelled.
     *  Ignore request in both cases.  Otherwise, make
     *  a copy before anything might change the static
     *  get_bookmark_filename() buffer. - FM
d233 1
a233 1
        first_time = TRUE;
d236 1
a236 1
        if (*filename == '\0' || !strcmp(filename," ")) {
d244 2
a245 2
     *  If BookmarkPage is NULL, something went
     *  wrong, so ignore the request. - FM
d248 1
a248 1
        FREE(bookmark_URL);
d253 2
a254 2
     *  If the link will be added to the same
     *  bookmark file, get confirmation. - FM
d257 3
a259 3
        strstr(HTLoadedDocumentURL(),
    	       (*BookmarkPage == '.' ?
	            (BookmarkPage+1) : BookmarkPage)) != NULL) {
d269 1
a269 1
     *  Allow user to change the title. - FM
d271 12
a282 11
    string_buffer[255] = '\0';
    LYstrncpy(string_buffer, title, 255);
    convert_to_spaces(string_buffer, FALSE);
    LYMBM_statusline(TITLE_PROMPT);
    LYgetstr(string_buffer, VISIBLE, sizeof(string_buffer), NORECALL);
    if (*string_buffer == '\0') {
	LYMBM_statusline(CANCELLED);
	sleep(MessageSecs);
	FREE(bookmark_URL);
	return;
    }
d285 7
a291 3
     *  Create the Title with any left-angle-brackets
     *  converted to &lt; entities and any ampersands
     *  converted to &amp; entities.  - FM
d295 6
d303 2
a304 2
     *  Create the bookmark file, if it doesn't exist already,
     *  Otherwise, open the pre-existing bookmark file. - FM
d306 1
a306 3
#if defined(__DJGPP__) || defined(_WINDOWS)
	_fmode = O_TEXT;
#endif /* __DJGPP__  or _WINDOWS */
d308 1
a308 1
        /*
d315 1
a315 2
    if (TRACE)
        fprintf(stderr, "\nsave_bookmark_link: SEEKING %s\n   AS %s\n\n",
d320 1
d326 1
a326 1
     *  Convert all ampersands in the address to &amp; entities. - FM
d332 2
a333 1
     *  If we created a new bookmark file, write the headers. - FM
d338 3
a340 2
	fprintf(fp,"<title>%s</title>\n</head>\n",BOOKMARK_TITLE);
	fprintf(fp,"\
d343 2
a344 1
     administrator.<br>\n\
d346 6
a351 3
     outdated or invalid links, or to change their order, but you should\n\
     not change the format within the lines or add other HTML markup.\n\n\
     <p>\n<ol>\n");
d355 1
a355 1
     *  Add the bookmark link, in Mosaic hotlist or Lynx format. - FM
d369 5
a373 7
#if defined(__DJGPP__) || defined(_WINDOWS)
    _fmode = O_BINARY;
#endif /* __DJGPP__ or _WINDOWS */
    /*
     *  If this is a cached bookmark file, set nocache for
     *  it so we'll see the new bookmark link when that
     *  cache is retrieved. - FM
d376 1
a376 1
    	for (i = 0; i < nhist; i++) {
d378 1
a378 1
	    	!strcmp(history[i].address, bookmark_URL)) {
d387 1
a387 1
				    		 )) != NULL) &&
d397 1
a397 1
     *  Clean up and report success.
d405 1
a405 1
	
d418 1
a418 1
    char buf[BUFSIZ];
d424 2
a425 2
    char filename_buffer[256];
    char newfile[256];
d429 1
d431 1
a431 3
    if (TRACE)
	fprintf(stderr, "remove_bookmark_link: deleting link number: %d\n",
			cur);
d438 1
a438 2
    if (TRACE)
        fprintf(stderr, "\nremove_bookmark_link: SEEKING %s\n   AS %s\n\n",
d441 1
a441 2
	_statusline(BOOKMARK_OPEN_FAILED_FOR_DEL);
	sleep(AlertSecs);
d445 2
a446 6
#ifdef VMS
    sprintf(newfile, "%s-%d", filename_buffer, getpid());
#else
    tempname(newfile, NEW_FILE);
#endif /* VMS */
    if ((nfp = LYNewTxtFile(newfile)) == NULL) {
d448 1
a448 6
#ifdef VMS
	_statusline(BOOKSCRA_OPEN_FAILED_FOR_DEL);
#else
	_statusline(BOOKTEMP_OPEN_FAILED_FOR_DEL);
#endif /* VMS */
	sleep(AlertSecs);
d454 1
a454 1
     *  Explicitly preserve bookmark file mode on Unix. - DSL
d457 1
a457 3
	mode = ((stat_buf.st_mode & 0777) | HIDE_CHMOD);
	(void) fclose(nfp);
	nfp = NULL;
d459 1
a459 1
	if ((nfp = fopen(newfile, "a")) == NULL) {
d461 1
a461 2
	    _statusline(BOOKTEMP_REOPEN_FAIL_FOR_DEL);
	    sleep(AlertSecs);
d470 1
a470 1
        while (fgets(buf, sizeof(buf), fp) != NULL) {
d472 1
a472 1
	    if (n == del_line || n == del_line+1) 
d474 2
a475 2
            if (fputs(buf, nfp) == EOF)
                goto failure;
d483 2
a484 2
        n = -1;
        while (fgets(buf, sizeof(buf), fp) != NULL) {
d488 1
a488 1
            while (n < cur && (cp = LYstrstr(cp, "<a href="))) {
d490 1
a490 1
                if (++n == cur) {
d493 1
a493 2
			_statusline(BOOKMARK_LINK_NOT_ONE_LINE);
			sleep(AlertSecs);
d496 2
a497 4
		    if (TRACE)
	    		fprintf(stderr,
				"remove_bookmark_link: skipping link %d\n", n);
                    retain = FALSE;
d500 4
a503 4
            }
            if (retain && fputs(buf, nfp) == EOF)
                goto failure;
        }
d506 1
a506 2
    if (TRACE)
	fprintf(stderr, "remove_bookmark_link: files: %s %s\n",
d511 1
a511 1
    fclose(nfp);
d516 12
d529 2
a530 15
#ifdef VMS
	char VMSfilename[256];
	/*
	 *  Purge lower version of file.
	 */
	sprintf(VMSfilename, "%s;-1", filename_buffer);
        while (remove(VMSfilename) == 0)
	    ;
	/*
	 *  Reset version number.
	 */
	sprintf(VMSfilename, "%s;1", filename_buffer);
	rename(filename_buffer, VMSfilename);
#endif /* VMS */
        return;
d539 1
a539 1
        if (errno == ENOTSAM) {
d541 11
a551 5
	if (errno == EXDEV) {
#endif /* WINDOWS */ 
	    char buffer[2048];
	    sprintf(buffer, "%s %s %s", MV_PATH, newfile, filename_buffer);
	    system(buffer);
d557 1
a557 1
	_statusline(ERROR_RENAMING_SCRA);
d559 1
a559 1
	_statusline(ERROR_RENAMING_TEMP);
a562 1
	sleep(AlertSecs);
d564 2
a565 1
	   
d567 3
a569 4
    _statusline(BOOKMARK_DEL_FAILED);
    sleep(AlertSecs);
    if (nfp != NULL)
	fclose(nfp);
d571 2
a572 2
        fclose(fp);
    remove(newfile);
d583 1
a583 1
     *  If not enabled, pick the "default" (0).
d587 1
a587 1
            return(0);
d589 1
a589 1
            return(-1);
d593 3
a595 3
     *  For ADVANCED users, we can just mess with the status line to save
     *  the 2 redraws of the screen, if LYMBMAdvnced is TRUE.  '=' will
     *  still show the screen and let them do it the "long" way.
d605 1
a605 1
        }
d610 1
a610 1
	     *  Treat left-arrow, ^G, or ^C as cancel.
d616 1
a616 1
	     *  Refresh the screen.
d624 1
a624 1
	     *  Assume default bookmark file on ENTER or right-arrow.
d630 1
a630 1
	        /*
d636 1
a636 1
	        /*
d650 1
a650 1
        /*
a663 2
    char string_buffer[256];
    char shead_buffer[256];
d666 1
a666 1
     *  If not enabled, pick the "default" (0).
d672 3
a674 3
     *  Filip M. Gieszczykiewicz (filipg@@paranoia.com) & FM
     *  ---------------------------------------------------
     *  LYMultiBookmarks - TRUE when multi_support enabled.
d676 2
a677 2
     *  MBM_A_subbookmark[n] - Hold values of the respective
     *  "multi_bookmarkn" in the lynxrc file.
d679 2
a680 2
     *  MBM_A_subdescript[n] - Hold description entries in the
     *  lynxrc file.
d682 3
a684 3
     *  Note: MBM_A_subbookmark[0] is defined to be same value as
     *        "bookmark_file" in the lynxrc file and/or the startup
     *        "bookmark_page".
d686 2
a687 2
     *  We make the display of bookmarks depend on rows we have
     *  available.
d689 5
a693 5
     *  We load BookmarkPage with the valid MBM_A_subbookmark[n]
     *  via get_bookmark_filename().  Otherwise, that function
     *  returns a zero-length string to indicate a cancel, a
     *  single space to indicate an invalid choice, or NULL to
     *  indicate an inaccessible file.
d697 1
a697 1
     *  Screen big enough?
d700 1
a700 1
        /*
d703 1
a703 2
	_statusline(MULTIBOOKMARKS_SMALL);
	sleep(AlertSecs);
a705 6
    /*
     *  Load the bad choice message buffer.
     */
    sprintf(string_buffer,
    	    BOOKMARK_FILE_NOT_DEFINED,
	    key_for_func(LYK_OPTIONS));
d723 3
a725 3
     *  Display menu of bookmarks.  NOTE that we avoid printw()'s
     *  to increase the chances that any non-ASCII or multibyte/CJK
     *  characters will be handled properly. - FM
d731 2
a732 1
        sprintf(shead_buffer,
d735 1
d737 1
a737 1
        addstr(MULTIBOOKMARKS_SHEAD);
d739 2
a740 2
   
   lynx_stop_h1_color ();
d758 1
a758 1
     *  Don't need to show it if it all fits on one screen!
d811 1
a811 1
     *  Next range, if available.
d814 1
a814 1
        MBM_screens > 1) {
d821 1
a821 1
     *  Previous range, if available.
d824 1
a824 1
        MBM_screens > 1) {
d832 1
a832 1
     *  See if we have a bookmark like that.
d837 1
a837 2
 	LYMBM_statusline(string_buffer);
	sleep(AlertSecs);
d855 1
a855 1
        if (MBM_A_subbookmark[i] != NULL && *MBM_A_subbookmark[i] != '\0')
d870 2
a871 2
 PUBLIC void LYMBM_statusline  ARGS1(
 	char *,		text)
d875 1
a875 1
        _statusline(text);
d878 1
a878 1
        _statusline(text);
d880 122
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
