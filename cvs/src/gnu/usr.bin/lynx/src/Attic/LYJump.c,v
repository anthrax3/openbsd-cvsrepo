head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.8;
commitid	EcR8E7r0stjLUV4p;

1.8
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.7;
commitid	lGGuvDWEniklWrQe;

1.7
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2008.01.29.13.02.31;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.48;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.09;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.57;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.57;	author maja;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYJump.c,v 1.50 2014/01/19 11:43:21 tom Exp $
 */
#include <HTUtils.h>
#include <HTAlert.h>
#include <LYUtils.h>
#include <LYStrings.h>
#include <LYGlobalDefs.h>
#include <LYJump.h>
#include <LYKeymap.h>
#include <GridText.h>

#include <LYLeaks.h>

#ifdef _WINDOWS
#include <stdlib.h>		/* bsearch() */
#endif

#ifdef VMS
#include <fab.h>
#endif /* VMS */

struct JumpTable *JThead = NULL;

static int LYCompare(const void *e1, const void *e2);
static unsigned LYRead_Jumpfile(struct JumpTable *jtp);

void LYJumpTable_free(void)
{
    struct JumpTable *cur = JThead;
    struct JumpTable *next;

    while (cur) {
	next = cur->next;
	FREE(cur->msg);
	FREE(cur->file);
	FREE(cur->shortcut);
	if (cur->history) {
	    LYFreeStringList(cur->history);
	    cur->history = NULL;
	}
	FREE(cur->table);
	FREE(cur->mp);
	FREE(cur);
	cur = next;
    }
    JThead = NULL;
    return;
}

/*
 * Utility for listing shortcuts, making any repeated
 * shortcut the most current in the list. - FM
 */
void LYAddJumpShortcut(HTList *historyp, char *shortcut)
{
    char *tmp = NULL;
    char *old;
    HTList *cur = historyp;

    if (!historyp || isEmpty(shortcut))
	return;

    StrAllocCopy(tmp, shortcut);

    while (NULL != (old = (char *) HTList_nextObject(cur))) {
	if (!strcmp(old, tmp)) {
	    HTList_removeObject(historyp, old);
	    FREE(old);
	    break;
	}
    }
    HTList_addObject(historyp, tmp);

    return;
}

BOOL LYJumpInit(char *config)
{
    struct JumpTable *jtp;
    char *cp;

    /*
     * Create a JumpTable structure.
     */
    jtp = typecalloc(struct JumpTable);

    if (jtp == NULL) {
	outofmem(__FILE__, "LYJumpInit");
    }

    assert(jtp != NULL);

    /*
     * config is JUMPFILE:path[:optional_key[:optional_prompt]]
     *
     * Skip JUMPFILE.
     */
    cp = strtok(config, ":\n");
    if (!cp) {
	FREE(jtp);
	return FALSE;
    }

    /*
     * Get the path.
     */
    cp = strtok(NULL, ":\n");
    if (!cp) {
	FREE(jtp);
	return FALSE;
    }
    StrAllocCopy(jtp->file, cp);
#ifdef LY_FIND_LEAKS
    if (!JThead)
	atexit(LYJumpTable_free);
#endif /* LY_FIND_LEAKS */

    /*
     * Get the key, if present.
     */
    cp = strtok(NULL, ":\n");

    /*
     * If no key, check whether we are resetting the default jumps file.
     */
    if (!cp && JThead) {
	struct JumpTable *jtptmp = JThead;

	jumpfile = jtp->file;
	FREE(jtp);
	while (jtptmp && jtptmp->key)
	    jtptmp = jtptmp->next;
	if (!jtptmp)
	    return FALSE;
	StrAllocCopy(jtptmp->file, jumpfile);
	StrAllocCopy(jtptmp->msg, jumpprompt);
	return TRUE;
    }

    /*
     * If a key is present and we have no default, create one,
     * using the path from config, and the current jumpprompt.
     */
    if (cp && !JThead) {
	JThead = jtp;
	StrAllocCopy(JThead->msg, jumpprompt);
	if (!jumpfile)
	    StrAllocCopy(jumpfile, JThead->file);
	jtp = typecalloc(struct JumpTable);

	if (jtp == NULL) {
	    outofmem(__FILE__, "LYJumpInit");
	}

	assert(jtp != NULL);

	StrAllocCopy(jtp->file, JThead->file);
    }

    /*
     * Complete the initialization of config.
     */
    if (cp) {
	jtp->key = remap(cp, "JUMP", FALSE);	/* key is present, (re)map it */
	cp = strtok(NULL, "\n");	/* get prompt, if present */
	if (non_empty(cp))
	    StrAllocCopy(jtp->msg, cp);		/* prompt is present, load it */
	else
	    cp = NULL;
    }
    if (!cp)			/* no prompt, use default */
	StrAllocCopy(jtp->msg, jumpprompt);
    if (jtp->msg[strlen(jtp->msg) - 1] != ' ')	/* ensure a trailing space */
	StrAllocCat(jtp->msg, " ");
    jtp->history = HTList_new();
    jtp->next = JThead;
    JThead = jtp;
    return TRUE;
}

char *LYJump(int key)
{
    static bstring *buf = NULL;

    JumpDatum seeking;
    JumpDatum *found;
    char *bp, *cp;
    struct JumpTable *jtp;
    int ch;
    RecallType recall;
    int ShortcutTotal;
    int ShortcutNum;
    BOOLEAN FirstShortcutRecall = TRUE;

    if (!JThead)
	return NULL;
    jtp = JThead;
    while (jtp && jtp->key && jtp->key != key)
	jtp = jtp->next;
    if (!jtp) {
	char *msg = 0;

	HTSprintf0(&msg, KEY_NOT_MAPPED_TO_JUMP_FILE, key);
	HTAlert(msg);
	FREE(msg);
	return NULL;
    }
    if (!jtp->table)
	jtp->nel = LYRead_Jumpfile(jtp);
    if (jtp->nel == 0)
	return NULL;

    if (!jump_buffer || isEmpty(jtp->shortcut)) {
	BStrCopy0(buf, "");
    } else if (non_empty(jtp->shortcut)) {
	size_t len = (size_t) BStrLen(buf);

	if (strlen(jtp->shortcut) > len) {
	    jtp->shortcut[len] = '\0';
	    BStrCopy0(buf, jtp->shortcut);
	}
    }

    ShortcutTotal = (jtp->history ? HTList_count(jtp->history) : 0);
    if (jump_buffer && !isBEmpty(buf)) {
	recall = ((ShortcutTotal > 1) ? RECALL_URL : NORECALL);
	ShortcutNum = 0;
	FirstShortcutRecall = FALSE;
    } else {
	recall = ((ShortcutTotal >= 1) ? RECALL_URL : NORECALL);
	ShortcutNum = ShortcutTotal;
	FirstShortcutRecall = TRUE;
    }

    statusline(jtp->msg);
    if ((ch = LYgetBString(&buf, FALSE, 0, recall)) < 0) {
	/*
	 * User cancelled the Jump via ^G. - FM
	 */
	HTInfoMsg(CANCELLED);
	return NULL;
    }

  check_recall:
    bp = buf->str;
    if (TOUPPER(key) == 'G' && StrNCmp(buf->str, "o ", 2) == 0)
	bp++;
    bp = LYSkipBlanks(bp);
    if (*bp == '\0' &&
	!(recall && (ch == UPARROW_KEY || ch == DNARROW_KEY))) {
	/*
	 * User cancelled the Jump via a zero-length string. - FM
	 */
	BStrCopy0(buf, "");
	StrAllocCopy(jtp->shortcut, buf->str);
	HTInfoMsg(CANCELLED);
	return NULL;
    }
#ifdef PERMIT_GOTO_FROM_JUMP
    if (StrChr(bp, ':') || StrChr(bp, '/')) {
	char *temp = NULL;

	LYJumpFileURL = FALSE;
	if (no_goto) {
	    BStrCopy0(buf, "");
	    StrAllocCopy(jtp->shortcut, buf->str);
	    HTUserMsg(RANDOM_URL_DISALLOWED);
	    return NULL;
	}
	HTSprintf0(&temp, "Go %s", bp);
	BStrCopy0(buf, temp);
	FREE(temp);
	return (bp = buf->str);
    }
#endif /* PERMIT_GOTO_FROM_JUMP */

    if (recall && ch == UPARROW_KEY) {
	if (FirstShortcutRecall) {
	    /*
	     * Use last Shortcut in the list. - FM
	     */
	    FirstShortcutRecall = FALSE;
	    ShortcutNum = 0;
	} else {
	    /*
	     * Go back to the previous Shortcut in the list. - FM
	     */
	    ShortcutNum++;
	}
	if (ShortcutNum >= ShortcutTotal)
	    /*
	     * Roll around to the last Shortcut in the list. - FM
	     */
	    ShortcutNum = 0;
	if ((cp = (char *) HTList_objectAt(jtp->history,
					   ShortcutNum)) != NULL) {
	    BStrCopy0(buf, cp);
	    if (jump_buffer && jtp->shortcut &&
		!strcmp(buf->str, jtp->shortcut)) {
		_statusline(EDIT_CURRENT_SHORTCUT);
	    } else if ((jump_buffer && ShortcutTotal == 2) ||
		       (!jump_buffer && ShortcutTotal == 1)) {
		_statusline(EDIT_THE_PREV_SHORTCUT);
	    } else {
		_statusline(EDIT_A_PREV_SHORTCUT);
	    }
	    if ((ch = LYgetBString(&buf, FALSE, 0, recall)) < 0) {
		/*
		 * User cancelled the jump via ^G.
		 */
		HTInfoMsg(CANCELLED);
		return NULL;
	    }
	    goto check_recall;
	}
    } else if (recall && ch == DNARROW_KEY) {
	if (FirstShortcutRecall) {
	    /*
	     * Use the first Shortcut in the list. - FM
	     */
	    FirstShortcutRecall = FALSE;
	    ShortcutNum = ShortcutTotal - 1;
	} else {
	    /*
	     * Advance to the next Shortcut in the list. - FM
	     */
	    ShortcutNum--;
	}
	if (ShortcutNum < 0)
	    /*
	     * Roll around to the first Shortcut in the list. - FM
	     */
	    ShortcutNum = ShortcutTotal - 1;
	if ((cp = (char *) HTList_objectAt(jtp->history,
					   ShortcutNum)) != NULL) {
	    BStrCopy0(buf, cp);
	    if (jump_buffer && jtp->shortcut &&
		!strcmp(buf->str, jtp->shortcut)) {
		_statusline(EDIT_CURRENT_SHORTCUT);
	    } else if ((jump_buffer && ShortcutTotal == 2) ||
		       (!jump_buffer && ShortcutTotal == 1)) {
		_statusline(EDIT_THE_PREV_SHORTCUT);
	    } else {
		_statusline(EDIT_A_PREV_SHORTCUT);
	    }
	    if ((ch = LYgetBString(&buf, FALSE, 0, recall)) < 0) {
		/*
		 * User cancelled the jump via ^G.
		 */
		HTInfoMsg(CANCELLED);
		return NULL;
	    }
	    goto check_recall;
	}
    }

    seeking.key = bp;
    found = (JumpDatum *) bsearch((char *) &seeking, (char *) jtp->table,
				  (size_t) jtp->nel, sizeof(JumpDatum), LYCompare);
    if (!found) {
	user_message("Unknown target '%s'", buf->str);
	LYSleepAlert();
    }

    StrAllocCopy(jtp->shortcut, bp);
    LYAddJumpShortcut(jtp->history, jtp->shortcut);
    return found ? found->url : NULL;
}

static unsigned LYRead_Jumpfile(struct JumpTable *jtp)
{
    struct stat st;
    unsigned int nel;
    char *mp;
    int fd;

#ifdef VMS
    int blocksize = 1024;
    FILE *fp;
    BOOL IsStream_LF = TRUE;
#endif /* VMS */
    char *cp;
    unsigned i;

    if (isEmpty(jtp->file))
	return 0;

    CTRACE((tfp, "Read Jumpfile %s\n", jtp->file));
    if (stat(jtp->file, &st) < 0) {
	HTAlert(CANNOT_LOCATE_JUMP_FILE);
	return 0;
    }

    /* allocate storage to read entire file */
    if ((mp = typecallocn(char, (size_t) st.st_size + 1)) == NULL) {
	HTAlert(OUTOF_MEM_FOR_JUMP_FILE);
	return 0;
    }
#ifdef VMS
    if (st.st_fab_rfm != (char) FAB$C_STMLF) {
	/** It's a record-oriented file. **/
	IsStream_LF = FALSE;
	if ((fp = fopen(jtp->file, "r", "mbc=32")) == NULL) {
	    HTAlert(CANNOT_OPEN_JUMP_FILE);
	    FREE(mp);
	    return 0;
	}
    } else if ((fd = open(jtp->file, O_RDONLY, "mbc=32")) < 0)
#else
    if ((fd = open(jtp->file, O_RDONLY)) < 0)
#endif /* VMS */
    {
	HTAlert(CANNOT_OPEN_JUMP_FILE);
	FREE(mp);
	return 0;
    }
#ifdef VMS
    if (IsStream_LF) {
    /** Handle as a stream. **/
#endif /* VMS */
	if (read(fd, mp, (size_t) st.st_size) != st.st_size) {
	    HTAlert(ERROR_READING_JUMP_FILE);
	    FREE(mp);
	    close(fd);
	    return 0;
	}
	mp[st.st_size] = '\0';
	close(fd);
#ifdef VMS
    } else {
	/** Handle as a series of records. **/
	if (fgets(mp, blocksize, fp) == NULL) {
	    HTAlert(ERROR_READING_JUMP_FILE);
	    FREE(mp);
	    close(fd);
	    return 0;
	} else {
	    while (fgets(mp + strlen(mp), blocksize, fp) != NULL) {
		;
	    }
	}
	LYCloseInput(fp);
	close(fd);
    }
#endif /* VMS */

    /* quick scan for approximate number of entries */
    nel = 0;
    cp = mp;
    while ((cp = StrChr(cp, '\n')) != NULL) {
	nel++;
	cp++;
    }

    jtp->table = (JumpDatum *) malloc((nel + 1) * sizeof(JumpDatum));
    if (jtp->table == NULL) {
	HTAlert(OUTOF_MEM_FOR_JUMP_TABLE);
	FREE(mp);
	return 0;
    }

    cp = jtp->mp = mp;
    for (i = 0; i < nel;) {
	if (StrNCmp(cp, "<!--", 4) == 0 || StrNCmp(cp, "<dl>", 4) == 0) {
	    cp = StrChr(cp, '\n');
	    if (cp == NULL)
		break;
	    cp++;
	    continue;
	}
	cp = LYstrstr(cp, "<dt>");
	if (cp == NULL)
	    break;
	cp += 4;
	jtp->table[i].key = cp;
	cp = LYstrstr(cp, "<dd>");
	if (cp == NULL)
	    break;
	*cp = '\0';
	cp += 4;
	cp = LYstrstr(cp, "href=\"");
	if (cp == NULL)
	    break;
	cp += 6;
	jtp->table[i].url = cp;
	cp = StrChr(cp, '"');
	if (cp == NULL)
	    break;
	*cp = '\0';
	cp++;
	cp = StrChr(cp, '\n');
	if (cp == NULL)
	    break;
	cp++;
	CTRACE((tfp, "Read jumpfile[%u] key='%s', url='%s'\n",
		i, jtp->table[i].key, jtp->table[i].url));
	i++;
    }

    return i;
}

static int LYCompare(const void *e1, const void *e2)
{
    return strcasecomp(((const JumpDatum *) e1)->key,
		       ((const JumpDatum *) e2)->key);
}
@


1.8
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.7
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYJump.c,v 1.34 2009/01/01 22:41:04 tom Exp $
d92 2
d155 3
d184 2
a187 1
    static char buf[124];
d214 9
a222 6
    if (!jump_buffer || isEmpty(jtp->shortcut))
	*buf = '\0';
    else if (non_empty(jtp->shortcut)) {
	if (strlen(jtp->shortcut) > 119)
	    jtp->shortcut[119] = '\0';
	strcpy(buf, jtp->shortcut);
d226 1
a226 1
    if (jump_buffer && *buf) {
d237 1
a237 1
    if ((ch = LYgetstr(buf, VISIBLE, (sizeof(buf) - 4), recall)) < 0) {
d246 2
a247 2
    bp = buf;
    if (TOUPPER(key) == 'G' && strncmp(buf, "o ", 2) == 0)
d251 1
a251 1
	!(recall && (ch == UPARROW || ch == DNARROW))) {
d255 2
a256 2
	*buf = '\0';
	StrAllocCopy(jtp->shortcut, buf);
d261 1
a261 1
    if (strchr(bp, ':') || strchr(bp, '/')) {
d266 2
a267 2
	    *buf = '\0';
	    StrAllocCopy(jtp->shortcut, buf);
d271 4
a274 2
	sprintf(buf, "Go %.*s", (int) sizeof(buf) - 4, bp);
	return (bp = buf);
d278 1
a278 1
    if (recall && ch == UPARROW) {
d298 1
a298 1
	    LYstrncpy(buf, cp, sizeof(buf) - 1);
d300 1
a300 1
		!strcmp(buf, jtp->shortcut)) {
d308 1
a308 2
	    if ((ch = LYgetstr(buf, VISIBLE,
			       sizeof(buf), recall)) < 0) {
d317 1
a317 1
    } else if (recall && ch == DNARROW) {
d337 1
a337 1
	    LYstrncpy(buf, cp, sizeof(buf) - 1);
d339 1
a339 1
		!strcmp(buf, jtp->shortcut)) {
d347 1
a347 1
	    if ((ch = LYgetstr(buf, VISIBLE, sizeof(buf), recall)) < 0) {
d360 1
a360 1
				  jtp->nel, sizeof(JumpDatum), LYCompare);
d362 1
a362 1
	user_message("Unknown target '%s'", buf);
d425 1
d436 1
d438 1
a438 1
	} else
d442 1
d444 1
d451 1
a451 1
    while ((cp = strchr(cp, '\n')) != NULL) {
d456 1
a456 1
    jtp->table = (JumpDatum *) malloc(nel * sizeof(JumpDatum));
d465 2
a466 2
	if (strncmp(cp, "<!--", 4) == 0 || strncmp(cp, "<dl>", 4) == 0) {
	    cp = strchr(cp, '\n');
d487 1
a487 1
	cp = strchr(cp, '"');
d492 1
a492 1
	cp = strchr(cp, '\n');
a498 2
	if (!cp)
	    break;
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d369 1
d386 1
a386 1
    if ((mp = typecallocn(char, st.st_size + 1)) == NULL) {
d412 1
a412 1
	if (read(fd, mp, st.st_size) != st.st_size) {
d422 1
a422 1
	if (fgets(mp, 1024, fp) == NULL) {
d427 1
a427 1
	    while (fgets(mp + strlen(mp), 1024, fp) != NULL) {
@


1.5
log
@More read/write result checking fixes to avoid unsigned comparisons vs
-1.

ok henning@@ beck@@ ray@@
@
text
@d22 2
a23 2
PRIVATE int LYCompare PARAMS((CONST void *e1, CONST void *e2));
PRIVATE unsigned LYRead_Jumpfile PARAMS((struct JumpTable * jtp));
d25 1
a25 1
PUBLIC void LYJumpTable_free NOARGS
d36 1
a36 8
	    char *shortcut;
	    HTList *current = cur->history;

	    while (NULL != (shortcut = (char *) HTList_nextObject(current))) {
		FREE(shortcut);
	    };

	    HTList_delete(cur->history);
d52 1
a52 1
PUBLIC void LYAddJumpShortcut ARGS2(HTList *, historyp, char *, shortcut)
d54 1
a54 1
    char *new = NULL;
d58 1
a58 1
    if (!historyp || !(shortcut && *shortcut))
d61 1
a61 1
    StrAllocCopy(new, shortcut);
d64 1
a64 1
	if (!strcmp(old, new)) {
d70 1
a70 1
    HTList_addObject(historyp, new);
d75 1
a75 1
PUBLIC BOOL LYJumpInit ARGS1(char *, config)
d159 2
a160 2
	if (cp && *cp)
	    StrAllocCopy(jtp->msg, cp);	/* prompt is present, load it */
d174 1
a174 1
PUBLIC char *LYJump ARGS1(int, key)
d181 2
a182 1
    int ch, recall;
d205 1
a205 1
    if (!jump_buffer || !(jtp->shortcut && *jtp->shortcut))
d207 1
a207 1
    else if (jtp->shortcut && *jtp->shortcut) {
d358 1
a358 1
PRIVATE unsigned LYRead_Jumpfile ARGS1(struct JumpTable *, jtp)
d446 1
a446 1
    for (i = 0; i < nel; ) {
d478 1
a478 1
	CTRACE((tfp, "Read jumpfile[%d] key='%s', url='%s'\n",
d488 1
a488 1
PRIVATE int LYCompare ARGS2(CONST void *, e1, CONST void *, e2)
d490 2
a491 2
    return strcasecomp(((CONST JumpDatum *) e1)->key,
		       ((CONST JumpDatum *) e2)->key);
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d414 1
a414 1
	if (read(fd, mp, st.st_size) < st.st_size) {
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d13 1
a13 1
#include <stdlib.h>	/* bsearch() */
d22 2
a23 2
PRIVATE int LYCompare PARAMS ((CONST void *e1, CONST void *e2));
PRIVATE unsigned LYRead_Jumpfile PARAMS ((struct JumpTable *jtp));
d39 1
a39 1
	    while (NULL != (shortcut = (char *)HTList_nextObject(current))) {
d41 2
a42 1
	    }
d59 1
a59 1
PUBLIC void LYAddJumpShortcut ARGS2(HTList *, historyp, char *,shortcut)
d63 1
a63 1
    HTList *cur =  historyp;
d70 1
a70 1
    while (NULL != (old = (char *)HTList_nextObject(cur))) {
d82 1
a82 1
PUBLIC BOOL LYJumpInit ARGS1 (char *, config)
d91 1
d131 1
d153 1
d164 2
a165 2
	jtp->key = remap(cp, "JUMP", FALSE);  /* key is present, (re)map it */
	cp = strtok(NULL, "\n");	    /* get prompt, if present */
d167 1
a167 1
	    StrAllocCopy(jtp->msg, cp);     /* prompt is present, load it */
d171 1
a171 1
    if (!cp)				     /* no prompt, use default */
d173 1
a173 1
    if (jtp->msg[strlen(jtp->msg)-1] != ' ') /* ensure a trailing space */
d200 1
d231 1
a231 1
    if ((ch=LYgetstr(buf, VISIBLE, (sizeof(buf) - 4), recall)) < 0) {
d239 1
a239 1
check_recall:
d241 1
a241 1
    if (toupper(key) == 'G' && strncmp(buf, "o ", 2) == 0)
d256 1
a256 1
	char *temp=NULL;
d265 1
a265 1
	sprintf(buf, "Go %.*s", (int)sizeof(buf) - 4, bp);
d288 3
a290 3
	if ((cp=(char *)HTList_objectAt(jtp->history,
					ShortcutNum)) != NULL) {
	    LYstrncpy(buf, cp, sizeof(buf)-1);
d300 2
a301 2
	    if ((ch=LYgetstr(buf, VISIBLE,
			     sizeof(buf), recall)) < 0) {
d328 3
a330 3
	if ((cp=(char *)HTList_objectAt(jtp->history,
					ShortcutNum)) != NULL) {
	    LYstrncpy(buf, cp, sizeof(buf)-1);
d338 1
a338 1
		_statusline(EDIT_THE_PREV_SHORTCUT);
d340 1
a340 2
	    if ((ch=LYgetstr(buf, VISIBLE,
			     sizeof(buf), recall)) < 0) {
d352 2
a353 2
    found = (JumpDatum *)bsearch((char *)&seeking, (char *)jtp->table,
				 jtp->nel, sizeof(JumpDatum), LYCompare);
d364 1
a364 1
PRIVATE unsigned LYRead_Jumpfile ARGS1(struct JumpTable *,jtp)
d370 1
d378 1
a378 1
    if (jtp->file == NULL || *(jtp->file) == '\0')
d380 2
d388 1
a388 1
    if ((mp= typecallocn(char, st.st_size + 1)) == NULL) {
a391 1

d393 1
a393 1
    if (st.st_fab_rfm != (char)FAB$C_STMLF) {
d401 1
a401 2
    } else
    if ((fd=open(jtp->file, O_RDONLY, "mbc=32")) < 0)
d403 1
a403 1
    if ((fd=open(jtp->file, O_RDONLY)) < 0)
a409 1

d414 7
a420 7
    if (read(fd, mp, st.st_size) < st.st_size) {
	HTAlert(ERROR_READING_JUMP_FILE);
	FREE(mp);
	return 0;
    }
    mp[st.st_size] = '\0';
    close(fd);
d423 9
a431 8
    /** Handle as a series of records. **/
    if(fgets(mp, 1024, fp) == NULL) {
	HTAlert(ERROR_READING_JUMP_FILE);
	FREE(mp);
	return 0;
    } else
	while(fgets(mp+strlen(mp), 1024, fp) != NULL)
	    ;
d439 1
a439 1
    while((cp = strchr(cp, '\n')) != NULL) {
d444 1
a444 1
    jtp->table = (JumpDatum *)malloc(nel * sizeof(JumpDatum));
d484 2
d494 1
a494 1
PRIVATE int LYCompare ARGS2 (CONST void *, e1, CONST void *, e2)
d496 2
a497 1
    return strcasecomp(((CONST JumpDatum *)e1)->key, ((CONST JumpDatum *)e2)->key);
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d12 4
d60 1
a60 1
    char *new;
d67 1
a67 3
    if ((new = (char *)calloc(1, (strlen(shortcut) + 1))) == NULL)
	outofmem(__FILE__, "LYAddJumpShortcut");
    strcpy(new, shortcut);
d89 1
a89 1
    jtp = (struct JumpTable *) calloc(1, sizeof(*jtp));
d149 1
a149 1
	jtp = (struct JumpTable *) calloc(1, sizeof(*jtp));
d160 1
a160 1
	jtp->key = remap(cp, "JUMP");	    /* key is present, (re)map it */
d216 1
a216 1
	recall = ((ShortcutTotal > 1) ? RECALL : NORECALL);
d220 1
a220 1
	recall = ((ShortcutTotal >= 1) ? RECALL : NORECALL);
d260 2
a261 5
	StrAllocCopy(temp, "Go ");
	StrAllocCat(temp, bp);
	strcpy(buf, temp);
	FREE(temp);
	return(bp=buf);
d285 1
a285 1
	    strcpy(buf, cp);
d325 1
a325 1
	    strcpy(buf, cp);
d352 1
a352 1
	sleep(AlertSecs);
d381 1
a381 1
    if ((mp=(char *)calloc(1, st.st_size + 1)) == NULL) {
d425 3
a427 2
	while(fgets(mp+strlen(mp), 1024, fp) != NULL) ;
    fclose(fp);
@


1.1
log
@Initial revision
@
text
@d1 8
a8 10
#include "HTUtils.h"
#include "tcp.h"
#include "HTAlert.h"
#include "LYUtils.h"
#include "LYStrings.h"
#include "LYGlobalDefs.h"
#include "LYJump.h"
#include "LYKeymap.h"
#include "LYSignal.h"
#include "GridText.h"
d10 1
a10 1
#include "LYLeaks.h"
a15 2
#define FREE(x) if (x) {free(x); x = NULL;}

d64 1
a64 1
	outofmem(__FILE__, "HTAddJumpShortcut");
d89 1
a89 2
	perror("Out of memory in LYJumpInit");
	return FALSE;
d112 1
d115 1
d149 1
a149 2
	    perror("Out of memory in LYJumpInit");
	    return FALSE;
d193 2
a194 2
	char msg[40];
	sprintf(msg, KEY_NOT_MAPPED_TO_JUMP_FILE, key);
d196 1
d228 1
a228 2
	_statusline(CANCELLED);
	sleep(InfoSecs);
d236 1
a236 2
    while (isspace(*bp))
	bp++;
d244 1
a244 2
	_statusline(CANCELLED);
	sleep(InfoSecs);
d255 1
a255 2
	    _statusline(RANDOM_URL_DISALLOWED);
	    sleep(MessageSecs);
d301 1
a301 2
		_statusline(CANCELLED);
		sleep(InfoSecs);
d341 1
a341 2
		_statusline(CANCELLED);
		sleep(InfoSecs);
d397 1
a397 1
    if ((fd=open(jtp->file, O_RDONLY, "mbc=32")) < 0) {
d399 1
a399 1
    if ((fd=open(jtp->file, O_RDONLY)) < 0) {
d401 1
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
