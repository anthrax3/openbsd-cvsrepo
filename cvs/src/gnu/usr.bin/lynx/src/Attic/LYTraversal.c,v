head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.50;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.13;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.51;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.51;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYTraversal.c,v 1.30 2010/09/24 22:57:01 tom Exp $
 */
#include <HTUtils.h>
#include <LYGlobalDefs.h>
#include <LYUtils.h>
#include <LYClean.h>
#include <LYCurses.h>
#include <LYStrings.h>
#include <LYTraversal.h>

#include <LYexit.h>
#include <LYLeaks.h>

/* routines to handle special traversal feature */

static void final_perror(const char *msg, int clean_flag)
{
    int saved_errno = errno;

    if (LYCursesON) {
	if (clean_flag)
	    cleanup();
	else
	    stop_curses();
    }
    set_errno(saved_errno);
    perror(msg);
}

static void exit_with_perror(const char *msg)
{
    final_perror(msg, TRUE);
    exit_immediately(EXIT_FAILURE);
}

BOOLEAN lookup_link(char *target)
{
    FILE *ifp;
    char *buffer = NULL;
    char *line = NULL;
    int result = FALSE;

    if ((ifp = fopen(TRAVERSE_FILE, TXT_R)) == NULL) {
	if ((ifp = LYNewTxtFile(TRAVERSE_FILE)) == NULL) {
	    exit_with_perror(CANNOT_OPEN_TRAV_FILE);
	} else {
	    LYCloseOutput(ifp);
	    return (FALSE);
	}
    }

    HTSprintf0(&line, "%s\n", target);

    while (LYSafeGets(&buffer, ifp) != NULL) {
	if (STREQ(line, buffer)) {
	    result = TRUE;
	    break;
	}
    }				/* end while */
    FREE(line);
    FREE(buffer);

    LYCloseInput(ifp);
    return (BOOL) (result);
}

void add_to_table(char *target)
{

    FILE *ifp;

    if ((ifp = LYAppendToTxtFile(TRAVERSE_FILE)) == NULL) {
	exit_with_perror(CANNOT_OPEN_TRAV_FILE);
    }

    fprintf(ifp, "%s\n", target);

    LYCloseOutput(ifp);
}

void add_to_traverse_list(char *fname, char *prev_link_name)
{

    FILE *ifp;

    if ((ifp = LYAppendToTxtFile(TRAVERSE_FOUND_FILE)) == NULL) {
	exit_with_perror(CANNOT_OPEN_TRAF_FILE);
    }

    fprintf(ifp, "%s\t%s\n", fname, prev_link_name);

    LYCloseOutput(ifp);
}

void dump_traversal_history(void)
{
    int x;
    FILE *ifp;

    if (nhist <= 0)
	return;

    if ((ifp = LYAppendToTxtFile(TRAVERSE_FILE)) == NULL) {
	final_perror(CANNOT_OPEN_TRAV_FILE, FALSE);
	return;
    }

    fprintf(ifp, "\n\n%s\n\n\t    %s\n\n",
	    TRAV_WAS_INTERRUPTED,
	    gettext("here is a list of the history stack so that you may rebuild"));

    for (x = nhist - 1; x >= 0; x--) {
	fprintf(ifp, "%s\t%s\n", HDOC(x).title, HDOC(x).address);
    }

    LYCloseOutput(ifp);
}

void add_to_reject_list(char *target)
{

    FILE *ifp;

    CTRACE((tfp, "add_to_reject_list(%s)\n", target));

    if ((ifp = LYAppendToTxtFile(TRAVERSE_REJECT_FILE)) == NULL) {
	exit_with_perror(CANNOT_OPEN_REJ_FILE);
    }

    fprintf(ifp, "%s\n", target);

    LYCloseOutput(ifp);
}

/* there need not be a reject file, so if it doesn't open, just return
   FALSE, meaning "target not in reject file" If the last character in
   a line in a reject file is "*", then also reject if target matches up to
   that point in the string
   Blank lines are ignored
   Lines that contain just a * are allowed, but since they mean "reject
   everything" it shouldn't come up much!
 */

BOOLEAN lookup_reject(char *target)
{
    FILE *ifp;
    char *buffer = NULL;
    char *line = NULL;
    size_t len;
    int result = FALSE;

    if ((ifp = fopen(TRAVERSE_REJECT_FILE, TXT_R)) == NULL) {
	return (FALSE);
    }

    HTSprintf0(&line, "%s", target);

    while (LYSafeGets(&buffer, ifp) != NULL && !result) {
	LYTrimTrailing(buffer);
	len = strlen(buffer);
	if (len != 0) {		/* if not an empty line */
	    if (buffer[len - 1] == '*') {
		/* if last char is * and the rest of the chars match */
		if ((len == 1) || (StrNCmp(line, buffer, len - 1) == 0)) {
		    result = TRUE;
		}
	    } else {
		if (STREQ(line, buffer)) {
		    result = TRUE;
		}
	    }
	}
    }				/* end while loop over the file */
    FREE(buffer);
    FREE(line);

    LYCloseInput(ifp);

    CTRACE((tfp, "lookup_reject(%s) -> %d\n", target, result));
    return (BOOL) (result);
}
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYTraversal.c,v 1.27 2009/01/01 22:37:06 tom Exp $
d17 1
a17 1
static void final_perror(const char *msg, BOOLEAN clean_flag)
d150 1
a150 1
    unsigned len;
d165 1
a165 1
		if ((len == 1) || (strncmp(line, buffer, len - 1) == 0)) {
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d150 1
a150 1
    int len;
d162 1
a162 1
	if (len > 0) {		/* if not an empty line */
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d14 1
a14 1
PRIVATE void final_perror ARGS2(CONST char *,msg, BOOLEAN, clean_flag)
d17 1
d28 1
a28 1
PRIVATE void exit_with_perror ARGS1(CONST char *,msg)
d34 1
a34 1
PUBLIC BOOLEAN lookup ARGS1(char *,target)
d46 1
a46 1
	    return(FALSE);
d53 1
a53 1
	if (STREQ(line,buffer)) {
d57 1
a57 1
    } /* end while */
d65 1
a65 1
PUBLIC void add_to_table ARGS1(char *,target)
d74 1
a74 1
    fprintf(ifp,"%s\n",target);
d79 1
a79 1
PUBLIC void add_to_traverse_list ARGS2(char *,fname, char *,prev_link_name)
d88 1
a88 1
    fprintf(ifp,"%s\t%s\n",fname, prev_link_name);
d93 1
a93 1
PUBLIC void dump_traversal_history NOARGS
d110 1
a110 1
    for (x = nhist-1; x >= 0; x--) {
d117 1
a117 1
PUBLIC void add_to_reject_list ARGS1(char *,target)
d122 2
d128 1
a128 1
    fprintf(ifp,"%s\n",target);
d142 1
a142 1
PUBLIC BOOLEAN lookup_reject ARGS1(char *,target)
d150 2
a151 2
    if ((ifp = fopen(TRAVERSE_REJECT_FILE, TXT_R)) == NULL){
	return(FALSE);
d154 1
a154 1
    HTSprintf0(&line, "%s\n", target);
d159 2
a160 2
	if (len > 0) { 	   /* if not an empty line */
	    if (buffer[len-1] == '*') {
d162 1
a162 1
		if ((len == 1) || (strncmp(line,buffer,len - 1) == 0)) {
d166 1
a166 1
		if (STREQ(line,buffer)) {
d171 1
a171 1
    } /* end while loop over the file */
d176 2
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d110 1
a110 1
	fprintf(ifp,"%s\t%s\n", history[x].title, history[x].address);
d154 1
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d23 1
a23 1
    errno = saved_errno;
d30 1
a30 1
    exit_immediately(-1);
d40 1
a40 1
    if ((ifp = fopen(TRAVERSE_FILE,"r")) == NULL) {
d44 1
a44 1
	    fclose(ifp);
d60 2
a61 2
    fclose(ifp);
    return(result);
d75 1
a75 1
    fclose(ifp);
d89 1
a89 1
    fclose(ifp);
d113 1
a113 1
    fclose(ifp);
d127 1
a127 1
    fclose(ifp);
d147 1
a147 1
    if ((ifp = fopen(TRAVERSE_REJECT_FILE,"r")) == NULL){
d171 2
a172 2
    fclose(ifp);
    return(result);
@


1.1
log
@Initial revision
@
text
@d1 7
a7 6
#include "HTUtils.h"
#include "tcp.h"
#include "LYGlobalDefs.h"
#include "LYUtils.h"
#include "LYSignal.h"
#include "LYTraversal.h"
d9 2
a10 2
#include "LYexit.h"
#include "LYLeaks.h"
d14 19
d36 3
a38 1
    char buffer[200], line[200];
d41 2
a42 14
        if ((ifp = LYNewTxtFile(TRAVERSE_FILE)) == NULL) {
            perror("unable to open or create a traversal file");
#ifndef NOSIGHUP
	    (void) signal(SIGHUP, SIG_DFL);
#endif /* NOSIGHUP */
	    (void) signal(SIGTERM, SIG_DFL);
#ifndef VMS
	    (void) signal(SIGINT, SIG_DFL);
#endif /* !VMS */
#ifdef SIGTSTP
	    if (no_suspend)
	        (void) signal(SIGTSTP,SIG_DFL);
#endif /* SIGTSTP */
            exit(-1);
d44 3
a46 3
            fclose(ifp);
            return(FALSE);
        }
d49 1
a49 1
    sprintf(line,"%s\n",target);
d51 1
a51 1
    while(fgets(buffer, 200, ifp) != NULL) {
d53 2
a54 2
	    fclose(ifp);
	    return(TRUE);
d57 2
d61 1
a61 1
    return(FALSE);
d70 1
a70 13
	perror("unable to open traversal file");
#ifndef NOSIGHUP
	(void) signal(SIGHUP, SIG_DFL);
#endif /* NOSIGHUP */
	(void) signal(SIGTERM, SIG_DFL);
#ifndef VMS
	(void) signal(SIGINT, SIG_DFL);
#endif /* !VMS */
#ifdef SIGTSTP
	if (no_suspend)
	    (void) signal(SIGTSTP,SIG_DFL);
#endif /* SIGTSTP */
	exit(-1);
d84 1
a84 13
	perror("unable to open traversal found file");
#ifndef NOSIGHUP
	(void) signal(SIGHUP, SIG_DFL);
#endif /* NOSIGHUP */
	(void) signal(SIGTERM, SIG_DFL);
#ifndef VMS
	(void) signal(SIGINT, SIG_DFL);
#endif /* !VMS */
#ifdef SIGTSTP
	if (no_suspend)
	    (void) signal(SIGTSTP,SIG_DFL);
#endif /* SIGTSTP */
	exit(-1);
d98 1
a98 1
        return;
d101 1
a101 1
        perror("unable to open traversal file");
d105 3
a107 2
    fprintf(ifp, "\n\nTRAVERSAL WAS INTERUPTED\n\n\
\t    here is a list of the history stack so that you may rebuild\n\n");
d122 1
a122 13
	perror("unable to open reject file");
#ifndef NOSIGHUP
	(void) signal(SIGHUP, SIG_DFL);
#endif /* NOSIGHUP */
	(void) signal(SIGTERM, SIG_DFL);
#ifndef VMS
	(void) signal(SIGINT, SIG_DFL);
#endif /* !VMS */
#ifdef SIGTSTP
	if (no_suspend)
	    (void) signal(SIGTSTP,SIG_DFL);
#endif /* SIGTSTP */
	exit(-1);
d142 4
a145 2
    char buffer[200], line[200], ch;
    int  frag;
d148 1
a148 1
        return(FALSE);
d151 1
a151 1
    sprintf(line,"%s\n",target);
d153 17
a169 17
    while (fgets(buffer, 200, ifp) != NULL) {
	frag = strlen(buffer) - 1; /* real length, minus trailing null */
	ch   = buffer[frag - 1];   /* last character in buffer */
	if (frag > 0) {            /* if not an empty line */
	    if (ch == '*') {
	        if (frag == 1 || ((strncmp(line,buffer,frag - 1)) == 0)) {
	           fclose(ifp);
	           return(TRUE);
	        }
	    } else { /* last character = "*" test */
	        if (STREQ(line,buffer)) {
	            fclose(ifp);
	            return(TRUE);
	        }
	    } /* last character = "*" test */
	} /* frag >= 0 */
    } /* end while */
d172 1
a172 1
    return(FALSE);
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
