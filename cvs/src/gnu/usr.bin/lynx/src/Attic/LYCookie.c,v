head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.47;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.07;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.51;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.51;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYCookie.c,v 1.128 2013/11/28 11:18:12 tom Exp $
 *
 *			       Lynx Cookie Support		   LYCookie.c
 *			       ===================
 *
 *	Author: AMK	A.M. Kuchling (amk@@magnet.com)	12/25/96
 *
 *	Incorporated with mods by FM			01/16/97
 *
 *  Based on:
 *	http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-state-mgmt-05.txt
 *
 *	Updated for:
 *   http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-state-man-mec-02.txt
 *		- FM					1997-07-09
 *
 *	Updated for:
 *   ftp://ds.internic.net/internet-drafts/draft-ietf-http-state-man-mec-03.txt
 *		- FM					1997-08-02
 *
 *	Partially checked against:
 *   http://www.ietf.org/internet-drafts/draft-ietf-http-state-man-mec-10.txt
 *		- kw					1998-12-11
 *
 *	Modified to follow RFC-6265 regarding leading dot of Domain, and
 *	matching of hostname vs domain (2011/06/10 -TD)
 *
 *  TO DO: (roughly in order of decreasing priority)
      * Persistent cookies are still experimental.  Presently cookies
	lose many pieces of information that distinguish
	version 1 from version 0 cookies.  There is no easy way around
	that with the current cookie file format.  Ports are currently
	not stored persistently at all which is clearly wrong.
      * We currently don't do anything special for unverifiable
	transactions to third-party hosts.
      * We currently don't use effective host names or check for
	Domain=.local.
      * Hex escaping isn't considered at all.  Any semi-colons, commas,
	or spaces actually in cookie names or values (i.e., not serving
	as punctuation for the overall Set-Cookie value) should be hex
	escaped if not quoted, but presumably the server is expecting
	them to be hex escaped in our Cookie request header as well, so
	in theory we need not unescape them.  We'll see how this works
	out in practice.
      * The prompt should show more information about the cookie being
	set in Novice mode.
      * The truncation heuristic in HTConfirmCookie should probably be
	smarter, smart enough to leave a really short name/value string
	alone.
      * We protect against denial-of-service attacks (see section 6.3.1 of the
	draft) by limiting the number of cookies from a domain, limiting the
	total number of cookies, and limiting the number of bytes from a
	processed cookie, but we count on the normal garbage collections to
	bring us back down under the limits, rather than actively removing
	cookies and/or domains based on age or frequency of use.
      * If a cookie has the secure flag set, we presently treat only SSL
	connections as secure.  This may need to be expanded for other
	secure communication protocols that become standardized.
*/

#include <HTUtils.h>
#include <HTAccess.h>
#include <HTParse.h>
#include <HTAlert.h>
#include <LYCurses.h>
#include <LYUtils.h>
#include <LYCharUtils.h>
#include <LYClean.h>
#include <LYGlobalDefs.h>
#include <LYEdit.h>
#include <LYStrings.h>
#include <GridText.h>
#include <LYCookie.h>

#include <LYLeaks.h>

/* default for new domains, one of the invcheck_behaviour_t values: */
#define DEFAULT_INVCHECK_BV INVCHECK_QUERY

#define CTrace(p) CTRACE2(TRACE_COOKIES, p)

#define LeadingDot(s)     ((s)[0] == '.')
#define SkipLeadingDot(s) (LeadingDot(s) ? ((s) + 1) : (s))

/*
 *  The first level of the cookie list is a list indexed by the domain
 *  string; cookies with the same domain will be placed in the same
 *  list.  Thus, finding the cookies that apply to a given URL is a
 *  two-level scan; first we check each domain to see if it applies,
 *  and if so, then we check the paths of all the cookies on that
 *  list.  We keep a running total of cookies as we add or delete
 *  them
 */
static HTList *domain_list = NULL;
static HTList *cookie_list = NULL;
static int total_cookies = 0;

struct _cookie {
    char *lynxID;		/* Lynx cookie identifier */
    char *name;			/* Name of this cookie */
    char *value;		/* Value of this cookie */
    int version;		/* Cookie protocol version (=1) */
    char *comment;		/* Comment to show to user */
    char *commentURL;		/* URL for comment to show to user */
    char *domain;		/* Domain for which this cookie is valid */
    char *ddomain;		/* Domain without leading "." */
    int port;			/* Server port from which this cookie was given (usu. 80) */
    char *PortList;		/* List of ports for which cookie can be sent */
    char *path;			/* Path prefix for which this cookie is valid */
    int pathlen;		/* Length of the path */
    int flags;			/* Various flags */
    time_t expires;		/* The time when this cookie expires */
    BOOL quoted;		/* Was a value quoted in the Set-Cookie header? */
};
typedef struct _cookie cookie;

#define COOKIE_FLAG_SECURE 1	/* If set, cookie requires secure links */
#define COOKIE_FLAG_DISCARD 2	/* If set, expire at end of session */
#define COOKIE_FLAG_EXPIRES_SET 4	/* If set, an expiry date was set */
#define COOKIE_FLAG_DOMAIN_SET 8	/* If set, an non-default domain was set */
#define COOKIE_FLAG_PATH_SET 16	/* If set, an non-default path was set */
#define COOKIE_FLAG_FROM_FILE 32	/* If set, this cookie was persistent */

static void MemAllocCopy(char **dest,
			 const char *start,
			 const char *end)
{
    char *temp;

    if (!(start && end) || (end <= start)) {
	HTSACopy(dest, "");
	return;
    }

    temp = typecallocn(char, (unsigned)(end - start) + 1);
    if (temp == NULL)
	outofmem(__FILE__, "MemAllocCopy");
    LYStrNCpy(temp, start, (end - start));
    HTSACopy(dest, temp);
    FREE(temp);
}

static cookie *newCookie(void)
{
    cookie *p = typecalloc(cookie);

    if (p == NULL)
	outofmem(__FILE__, "newCookie");

    assert(p != NULL);

    HTSprintf0(&(p->lynxID), "%p", (void *) p);
    p->port = 80;
    return p;
}

static void freeCookie(cookie * co)
{
    if (co) {
	FREE(co->lynxID);
	FREE(co->name);
	FREE(co->value);
	FREE(co->comment);
	FREE(co->commentURL);
	FREE(co->domain);
	FREE(co->ddomain);
	FREE(co->path);
	FREE(co->PortList);
	FREE(co);
    }
}

static void freeCookies(domain_entry * de)
{
    FREE(de->domain);
    FREE(de->ddomain);
    HTList_delete(de->cookie_list);
    de->cookie_list = NULL;
}

#ifdef LY_FIND_LEAKS
static void LYCookieJar_free(void)
{
    HTList *dl = domain_list;
    domain_entry *de = NULL;
    HTList *cl = NULL, *next = NULL;
    cookie *co = NULL;

    CTrace((tfp, "LYCookieJar_free\n"));
    while (dl) {
	if ((de = dl->object) != NULL) {
	    CTrace((tfp, "...LYCookieJar_free domain %s\n", NonNull(de->ddomain)));
	    cl = de->cookie_list;
	    while (cl) {
		next = cl->next;
		co = cl->object;
		if (co) {
		    HTList_removeObject(de->cookie_list, co);
		    freeCookie(co);
		}
		cl = next;
	    }
	    freeCookies(de);
	    FREE(dl->object);
	}
	dl = dl->next;
    }
    cookie_list = NULL;
    HTList_delete(domain_list);
    domain_list = NULL;
}
#endif /* LY_FIND_LEAKS */

static BOOLEAN has_embedded_dot(char *value)
{
    BOOLEAN result = NO;
    char *first_dot = StrChr(value, '.');

    if (first_dot != NULL && first_dot[1] != '\0') {
	result = YES;
    }
    return result;
}

/*
 * Compare a string against a domain as specified in RFC-6265 Section 5.1.3
 */
static BOOLEAN domain_matches(const char *value,
			      const char *domain)
{
    BOOLEAN result = NO;

    if (isEmpty(value)) {
	CTrace((tfp, "BUG: comparing empty value in domain_matches\n"));
    } else if (isEmpty(domain)) {
	CTrace((tfp, "BUG: comparing empty domain in domain_matches\n"));
    } else {
	if (!strcasecomp(value, domain)) {
	    result = YES;
	} else {
	    int value_len = (int) strlen(value);
	    int suffix_len = (int) strlen(domain);
	    int offset = value_len - suffix_len;

	    if (offset > 1
		&& value[offset - 1] == '.'
		&& !strcasecomp(value + offset, domain)) {
		result = YES;
	    }
	}
    }
    return result;
}

/*
 *  Compare the current port with a port list as specified in Section 4.3 of:
 *   http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-state-man-mec-02.txt
 *	- FM
 */
static BOOLEAN port_matches(int port,
			    const char *list)
{
    const char *number = list;

    if (!(number && isdigit(UCH(*number))))
	return (FALSE);

    while (*number != '\0') {
	if (atoi(number) == port) {
	    return (TRUE);
	}
	while (isdigit(UCH(*number))) {
	    number++;
	}
	while (*number != '\0' && !isdigit(UCH(*number))) {
	    number++;
	}
    }

    return (FALSE);
}

/*
 * Returns the length of the given path ignoring trailing slashes.
 */
static int ignore_trailing_slash(const char *a)
{
    int len = (int) strlen(a);

    while (len > 1 && a[len - 1] == '/')
	--len;
    return len;
}

/*
 * Check if the path 'a' is a prefix of path 'b', ignoring trailing slashes
 * in either, since they denote an empty component.
 */
static BOOL is_prefix(const char *a, const char *b)
{
    int len_a = ignore_trailing_slash(a);
    int len_b = ignore_trailing_slash(b);

    if (len_a > len_b) {
	return FALSE;
    } else {
	if (StrNCmp(a, b, (unsigned) len_a) != 0) {
	    return FALSE;
	}
	if (len_a < len_b && (len_a > 1 || a[0] != '/')) {
	    if (b[len_a] != '\0'
		&& b[len_a] != '/') {
		return FALSE;
	    }
	}
    }
    return TRUE;
}

/*
 * Find the domain-entry for the given name.
 */
static domain_entry *find_domain_entry(const char *name)
{
    HTList *hl;
    domain_entry *de = NULL;
    const char *find;

    if (name != 0
	&& *(find = SkipLeadingDot(name)) != '\0') {
	for (hl = domain_list; hl != NULL; hl = hl->next) {
	    de = (domain_entry *) hl->object;
	    if (de != NULL && de->domain != NULL && de->ddomain != NULL) {
		CTrace((tfp,
			"...test_domain_entry(%s) ->(%s) bv:%u, invcheck_bv:%u\n",
			find,
			NonNull(de->ddomain),
			de->bv,
			de->invcheck_bv));
		if (!strcasecomp(find, de->ddomain)) {
		    break;
		}
	    }
	    de = NULL;
	}
    }
    CTrace((tfp, "find_domain_entry(%s) bv:%d, invcheck_bv:%d\n",
	    name,
	    de ? (int) de->bv : -1,
	    de ? (int) de->invcheck_bv : -1));
    return de;
}

static void SetCookieDomain(cookie * co, const char *domain)
{
    StrAllocCopy(co->ddomain, SkipLeadingDot(domain));
    CTrace((tfp, "SetCookieDomain(%s)\n", co->ddomain));
}

/*
 *  Store a cookie somewhere in the domain list. - AK & FM
 */
static void store_cookie(cookie * co, const char *hostname,
			 const char *path)
{
    HTList *hl, *next;
    cookie *c2;
    time_t now = time(NULL);
    int pos;
    const char *ptr;
    domain_entry *de = NULL;
    BOOL Replacement = FALSE;
    int invprompt_reasons = 0;	/* what is wrong with this cookie - kw */

#define FAILS_COND1 0x01
#define FAILS_COND4 0x02

    if (co == NULL)
	return;

    /*
     * Ensure that the domain list exists.
     */
    if (domain_list == NULL) {
#ifdef LY_FIND_LEAKS
	atexit(LYCookieJar_free);
#endif
	domain_list = HTList_new();
	total_cookies = 0;
    }

    /*
     * Look through domain_list to see if the cookie's domain is already
     * listed.
     */
    cookie_list = NULL;
    if ((de = find_domain_entry(co->domain)) != NULL)
	cookie_list = de->cookie_list;

    /*
     * Apply sanity checks.
     *
     * Section 4.3.2, condition 1:  The value for the Path attribute is
     * not a prefix of the request-URI.
     *
     * If cookie checking for this domain is set to INVCHECK_LOOSE,
     * then we want to bypass this check.  The user should be queried
     * if set to INVCHECK_QUERY.
     */
    if (!is_prefix(co->path, path)) {
	invcheck_behaviour_t invcheck_bv = (de ? de->invcheck_bv
					    : DEFAULT_INVCHECK_BV);

	switch (invcheck_bv) {
	case INVCHECK_LOOSE:
	    break;		/* continue as if nothing were wrong */

	case INVCHECK_QUERY:
	    /* will prompt later if we get that far */
	    invprompt_reasons |= FAILS_COND1;
	    break;

	case INVCHECK_STRICT:
	    CTrace((tfp,
		    "store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
		    co->path, path));
	    freeCookie(co);
	    return;
	}
    }

    /*
     * The next 4 conditions do NOT apply if the domain is still
     * the default of request-host. (domains - case insensitive).
     */
    if (strcasecomp(co->domain, hostname) != 0) {
	/*
	 * The hostname does not contain a dot.
	 */
	if (StrChr(hostname, '.') == NULL) {
	    CTrace((tfp, "store_cookie: Rejecting because '%s' has no dot.\n",
		    hostname));
	    freeCookie(co);
	    return;
	}

	/*
	 * RFC 2109 -
	 * Section 4.3.2, condition 2:  The value for the Domain attribute
	 * contains no embedded dots or does not start with a dot.  (A dot is
	 * embedded if it's neither the first nor last character.) Note that we
	 * added a lead dot ourselves if a domain attribute value otherwise
	 * qualified.  - FM
	 *
	 * RFC 6265 -
	 * If the first character of the attribute-value string is %x2E ("."):
	 *
	 * Let cookie-domain be the attribute-value without the leading %x2E
	 * (".") character.
	 *
	 * Otherwise:
	 *
	 * Let cookie-domain be the entire attribute-value.
	 *
	 * Convert the cookie-domain to lower case.
	 */
	SetCookieDomain(co, co->domain);
	if (isEmpty(co->ddomain)) {
	    CTrace((tfp, "store_cookie: Rejecting domain '%s'.\n", co->ddomain));
	    freeCookie(co);
	    return;
	}
	if (!has_embedded_dot(co->ddomain)) {
	    CTrace((tfp, "store_cookie: Rejecting domain '%s'.\n", co->ddomain));
	    freeCookie(co);
	    return;
	}

	/*
	 * Section 4.3.2, condition 3:  The value for the request-host does not
	 * domain-match the Domain attribute.
	 */
	if (!domain_matches(hostname, co->ddomain)) {
	    CTrace((tfp,
		    "store_cookie: Rejecting domain '%s' for host '%s'.\n",
		    co->ddomain, hostname));
	    freeCookie(co);
	    return;
	}

	/*
	 * RFC 2109 -
	 * Section 4.3.2, condition 4:  The request-host is an HDN (not IP
	 * address) and has the form HD, where D is the value of the Domain
	 * attribute, and H is a string that contains one or more dots.
	 *
	 * If cookie checking for this domain is set to INVCHECK_LOOSE, then we
	 * want to bypass this check.  The user should be queried if set to
	 * INVCHECK_QUERY.
	 */
	ptr = ((hostname + strlen(hostname)) - strlen(co->domain));
	if (StrChr(hostname, '.') < ptr) {
	    invcheck_behaviour_t invcheck_bv = (de ? de->invcheck_bv
						: DEFAULT_INVCHECK_BV);

	    switch (invcheck_bv) {
	    case INVCHECK_LOOSE:
		break;		/* continue as if nothing were wrong */

	    case INVCHECK_QUERY:
		invprompt_reasons |= FAILS_COND4;
		break;		/* will prompt later if we get that far */

	    case INVCHECK_STRICT:
		CTrace((tfp,
			"store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
			co->path, path));
		freeCookie(co);
		return;
	    }
	}
    }

    /*
     * If we found reasons for issuing an invalid cookie confirmation prompt,
     * do that now.  Rejection by the user here is the last chance to
     * completely ignore this cookie; after it passes this hurdle, it may at
     * least supersede a previous cookie (even if it finally gets rejected).  -
     * kw
     */
    if (invprompt_reasons) {
	char *msg = 0;

	if (invprompt_reasons & FAILS_COND4) {
	    HTSprintf0(&msg,
		       INVALID_COOKIE_DOMAIN_CONFIRMATION,
		       co->ddomain,
		       hostname);
	    if (!HTForcedPrompt(cookie_noprompt, msg, NO)) {
		CTrace((tfp,
			"store_cookie: Rejecting domain '%s' for host '%s'.\n",
			co->ddomain,
			hostname));
		freeCookie(co);
		FREE(msg);
		return;
	    }
	}
	if (invprompt_reasons & FAILS_COND1) {
	    HTSprintf0(&msg,
		       INVALID_COOKIE_PATH_CONFIRMATION,
		       co->path, path);
	    if (!HTForcedPrompt(cookie_noprompt, msg, NO)) {
		CTrace((tfp,
			"store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
			co->path, path));
		freeCookie(co);
		FREE(msg);
		return;
	    }
	}
	FREE(msg);
    }

    if (de == NULL) {
	/*
	 * Domain not found; add a new entry for this domain.
	 */
	de = typecalloc(domain_entry);
	if (de == NULL)
	    outofmem(__FILE__, "store_cookie");

	assert(de != NULL);

	de->bv = QUERY_USER;
	de->invcheck_bv = DEFAULT_INVCHECK_BV;	/* should this go here? */
	cookie_list = de->cookie_list = HTList_new();
	StrAllocCopy(de->domain, co->domain);
	StrAllocCopy(de->ddomain, co->ddomain);
	HTList_appendObject(domain_list, de);
    }

    /*
     * Loop over the cookie list, deleting expired and matching cookies.
     */
    hl = cookie_list;
    pos = 0;
    while (hl) {
	c2 = (cookie *) hl->object;
	next = hl->next;
	/*
	 * Check if this cookie has expired.
	 */
	if ((c2 != NULL) &&
	    (c2->flags & COOKIE_FLAG_EXPIRES_SET) &&
	    c2->expires <= now) {
	    HTList_removeObject(cookie_list, c2);
	    freeCookie(c2);
	    c2 = NULL;
	    total_cookies--;

	    /*
	     * Check if this cookie matches the one we're inserting.
	     */
	} else if ((c2) &&
		   !strcasecomp(co->ddomain, c2->ddomain) &&
		   !strcmp(co->path, c2->path) &&
		   !strcmp(co->name, c2->name)) {
	    HTList_removeObject(cookie_list, c2);
	    freeCookie(c2);
	    c2 = NULL;
	    total_cookies--;
	    Replacement = TRUE;

	} else if ((c2) && (c2->pathlen) >= (co->pathlen)) {
	    /*
	     * This comparison determines the (tentative) position of the new
	     * cookie in the list such that it comes before existing cookies
	     * with a less specific path, but after existing cookies of equal
	     * (or greater) path length.  Thus it should normally preserve the
	     * order of new cookies with the same path as they are received,
	     * although this is not required.
	     *
	     * From RFC 2109 4.3.4:
	     *
	     * If multiple cookies satisfy the criteria above, they are ordered
	     * in the Cookie header such that those with more specific Path
	     * attributes precede those with less specific.  Ordering with
	     * respect to other attributes (e.g., Domain) is unspecified.
	     */
	    pos++;
	}
	hl = next;
    }

    /*
     * Don't bother to add the cookie if it's already expired.
     */
    if ((co->flags & COOKIE_FLAG_EXPIRES_SET) && co->expires <= now) {
	freeCookie(co);
	co = NULL;

	/*
	 * Don't add the cookie if we're over the domain's limit.  - FM
	 */
    } else if (HTList_count(cookie_list) > max_cookies_domain) {
	CTrace((tfp,
		"store_cookie: Domain's cookie limit exceeded!  Rejecting cookie.\n"));
	freeCookie(co);
	co = NULL;

	/*
	 * Don't add the cookie if we're over the total cookie limit.  - FM
	 */
    } else if (total_cookies > max_cookies_global) {
	CTrace((tfp,
		"store_cookie: Total cookie limit exceeded!  Rejecting cookie.\n"));
	freeCookie(co);
	co = NULL;

	/*
	 * Don't add the cookie if the value is NULL. - BJP
	 */
	/*
	 * Presence of value is now needed (indicated normally by '='),
	 * but it can now be an empty string.
	 * - kw 1999-06-24
	 */
    } else if (co->value == NULL) {	/* should not happen - kw */
	CTrace((tfp, "store_cookie: Value is NULL! Not storing cookie.\n"));
	freeCookie(co);
	co = NULL;

	/*
	 * If it's a replacement for a cookie that had not expired, and never
	 * allow has not been set, add it again without confirmation.  - FM
	 */
    } else if ((Replacement == TRUE && de) && de->bv != REJECT_ALWAYS) {
	HTList_insertObjectAt(cookie_list, co, pos);
	total_cookies++;

	/*
	 * Get confirmation if we need it, and add cookie if confirmed or
	 * 'allow' is set to always.  - FM
	 *
	 * Cookies read from file are accepted without confirmation prompting. 
	 * (Prompting may actually not be possible if LYLoadCookies is called
	 * before curses is setup.) Maybe this should instead depend on
	 * LYSetCookies and/or LYCookieAcceptDomains and/or
	 * LYCookieRejectDomains and/or LYAcceptAllCookies and/or some other
	 * settings.  -kw
	 */
    } else if ((co->flags & COOKIE_FLAG_FROM_FILE)
	       || HTConfirmCookie(de, hostname, co->name, co->value)) {
	/*
	 * Insert the new cookie so that more specific paths (longer
	 * pathlen) come first in the list. - kw
	 */
	HTList_insertObjectAt(cookie_list, co, pos);
	total_cookies++;
    } else {
	freeCookie(co);
	co = NULL;
    }
}

/*
 *  Scan a domain's cookie_list for any cookies we should
 *  include in a Cookie: request header. - AK & FM
 */
static char *scan_cookie_sublist(char *hostname,
				 char *path,
				 int port,
				 HTList *sublist,
				 char *header,
				 int secure)
{
    HTList *hl;
    cookie *co;
    time_t now = time(NULL);
    char crlftab[8];

    sprintf(crlftab, "%c%c%c", CR, LF, '\t');
    for (hl = sublist; hl != NULL; hl = hl->next) {
	co = (cookie *) hl->object;

	if (co == NULL) {
	    continue;
	}

	/* speed-up host_matches() and limit trace output */
	if (LYstrstr(hostname, co->ddomain) != NULL) {
	    CTrace((tfp, "Checking cookie %p %s=%s\n",
		    (void *) hl,
		    (co->name ? co->name : "(no name)"),
		    (co->value ? co->value : "(no value)")));
	    CTrace((tfp, "\t%s %s %d %s %s %d%s\n",
		    hostname,
		    (co->ddomain ? co->ddomain : "(no domain)"),
		    domain_matches(hostname, co->ddomain),
		    path, co->path,
		    (co->pathlen > 0)
		    ? !is_prefix(co->path, path)
		    : 0,
		    (co->flags & COOKIE_FLAG_SECURE)
		    ? " secure"
		    : ""));
	}
	/*
	 * Check if this cookie has expired, and if so, delete it.
	 */
	if ((co->flags & COOKIE_FLAG_EXPIRES_SET) &&
	    co->expires <= now) {
	    HTList_removeObject(sublist, co);
	    freeCookie(co);
	    total_cookies--;
	    continue;
	}

	/*
	 * Check if we have a unexpired match, and handle if we do.
	 */
	if (co->domain != 0 &&
	    co->name != 0 &&
	    domain_matches(hostname, co->ddomain) &&
	    (co->pathlen == 0 || is_prefix(co->path, path))) {
	    /*
	     * Skip if the secure flag is set and we don't have a secure
	     * connection.  HTTP.c presently treats only SSL connections as
	     * secure.  - FM
	     */
	    if ((co->flags & COOKIE_FLAG_SECURE) && secure == FALSE) {
		continue;
	    }

	    /*
	     * Skip if we have a port list and the current port is not listed. 
	     * - FM
	     */
	    if (co->PortList && !port_matches(port, co->PortList)) {
		continue;
	    }

	    /*
	     * Start or append to the request header.
	     */
	    if (header == NULL) {
		if (co->version > 0) {
		    /*
		     * For Version 1 (or greater) cookies, the version number
		     * goes before the first cookie.
		     */
		    HTSprintf0(&header, "$Version=\"%d\"; ", co->version);
		}
	    } else {
		/*
		 * There's already cookie data there, so add a separator
		 * (always use a semi-colon for "backward compatibility").  -
		 * FM
		 */
		StrAllocCat(header, "; ");
		/*
		 * Check if we should fold the header.  - FM
		 */

		/*
		 * Section 2.2 of RFC1945 says:
		 *
		 * HTTP/1.0 headers may be folded onto multiple lines if each
		 * continuation line begins with a space or horizontal tab. 
		 * All linear whitespace, including folding, has the same
		 * semantics as SP.  [...] However, folding of header lines is
		 * not expected by some applications, and should not be
		 * generated by HTTP/1.0 applications.
		 *
		 * This code was causing problems.  Let's not use it.  -BJP
		 */

		/* if (len > 800) { */
		/*    StrAllocCat(header, crlftab); */
		/* } */

	    }
	    /*
	     * Include the cookie name=value pair.
	     */
	    StrAllocCat(header, co->name);
	    StrAllocCat(header, "=");
	    if (co->quoted) {
		StrAllocCat(header, "\"");
	    }
	    StrAllocCat(header, co->value);
	    if (co->quoted) {
		StrAllocCat(header, "\"");
	    }
	    /*
	     * For Version 1 (or greater) cookies, add $PATH, $PORT and/or
	     * $DOMAIN attributes for the cookie if they were specified via a
	     * server reply header.  - FM
	     */
	    if (co->version > 0) {
		if (co->path && (co->flags & COOKIE_FLAG_PATH_SET)) {
		    HTSprintf(&header, "; $Path=\"%s\"", co->path);
		}
		if (co->PortList && isdigit(UCH(*co->PortList))) {
		    HTSprintf(&header, "; $Port=\"%s\"", co->PortList);
		}
		if (co->domain && (co->flags & COOKIE_FLAG_DOMAIN_SET)) {
		    HTSprintf(&header, "; $Domain=\"%s\"", co->domain);
		}
	    }
	}
    }

    return (header);
}

/*
 * Presence of value is needed (indicated normally by '=') to start a cookie,
 * but it can be an empty string.  - kw 1999-06-24
 */
static char *alloc_attr_value(const char *value_start,
			      const char *value_end)
{
    char *value = NULL;

    if (value_start && value_end >= value_start) {
	int value_len = (int) (value_end - value_start);

	if (value_len > max_cookies_buffer) {
	    value_len = max_cookies_buffer;
	}
	value = typecallocn(char, (unsigned) value_len + 1);

	if (value == NULL)
	    outofmem(__FILE__, "LYProcessSetCookies");
	LYStrNCpy(value, value_start, value_len);
    }
    return value;
}

#define FLAGS_INVALID_PORT 1
#define FLAGS_KNOWN_ATTR   2
#define FLAGS_MAXAGE_ATTR  4

#define is_attr(s, len) attr_len == len && !strncasecomp(attr_start, s, len)

static unsigned parse_attribute(unsigned flags,
				cookie * cur_cookie,
				int *cookie_len,
				const char *attr_start,
				int attr_len,
				char *value,
				const char *address,
				char *hostname,
				int port)
{
    BOOLEAN known_attr = NO;
    int url_type;

    CTrace((tfp, "parse_attribute %.*s\n", attr_len, attr_start));

    flags &= (unsigned) (~FLAGS_KNOWN_ATTR);
    if (is_attr("secure", 6)) {
	if (value == NULL) {
	    known_attr = YES;
	    if (cur_cookie != NULL) {
		cur_cookie->flags |= COOKIE_FLAG_SECURE;
	    }
	} else {
	    /*
	     * If secure has a value, assume someone misused it as cookie name. 
	     * - FM
	     */
	    known_attr = NO;
	}
    } else if (is_attr("discard", 7)) {
	if (value == NULL) {
	    known_attr = YES;
	    if (cur_cookie != NULL) {
		cur_cookie->flags |= COOKIE_FLAG_DISCARD;
	    }
	} else {
	    /*
	     * If discard has a value, assume someone used it as a cookie name. 
	     * - FM
	     */
	    known_attr = NO;
	}
    } else if (is_attr("comment", 7)) {
	known_attr = YES;
	if (cur_cookie != NULL && value &&
	/*
	 * Don't process a repeat comment.  - FM
	 */
	    cur_cookie->comment == NULL) {
	    StrAllocCopy(cur_cookie->comment, value);
	    *cookie_len += (int) strlen(cur_cookie->comment);
	}
    } else if (is_attr("commentURL", 10)) {
	known_attr = YES;
	if (cur_cookie != NULL && value &&
	/*
	 * Don't process a repeat commentURL.  - FM
	 */
	    cur_cookie->commentURL == NULL) {
	    /*
	     * We should get only absolute URLs as values, but will resolve
	     * versus the request's URL just in case.  - FM
	     */
	    cur_cookie->commentURL = HTParse(value,
					     address,
					     PARSE_ALL);
	    /*
	     * Accept only URLs for http or https servers.  - FM
	     */
	    if ((url_type = is_url(cur_cookie->commentURL)) &&
		(url_type == HTTP_URL_TYPE ||
		 url_type == HTTPS_URL_TYPE)) {
		*cookie_len += (int) strlen(cur_cookie->commentURL);
	    } else {
		CTrace((tfp,
			"LYProcessSetCookies: Rejecting commentURL value '%s'\n",
			cur_cookie->commentURL));
		FREE(cur_cookie->commentURL);
	    }
	}
    } else if (is_attr("domain", 6)) {
	known_attr = YES;
	if (cur_cookie != NULL && value &&
	/*
	 * Don't process a repeat domain.  - FM
	 */
	    !(cur_cookie->flags & COOKIE_FLAG_DOMAIN_SET)) {
	    *cookie_len -= (int) strlen(cur_cookie->domain);
	    /*
	     * If the value does not have a lead dot, but does have an embedded
	     * dot, and is not an exact match to the hostname, nor is a numeric
	     * IP address, add a lead dot.  Otherwise, use the value as is.  -
	     * FM (domains - case insensitive).
	     */
	    if (value[0] != '.' && value[0] != '\0' &&
		value[1] != '\0' && strcasecomp(value, hostname)) {
		char *ptr = StrChr(value, '.');

		if (ptr != NULL && ptr[1] != '\0') {
		    ptr = value;
		    while (*ptr == '.' ||
			   isdigit(UCH(*ptr)))
			ptr++;
		    if (*ptr != '\0') {
			CTrace((tfp,
				"LYProcessSetCookies: Adding lead dot for domain value '%s'\n",
				value));
			HTSprintf0(&(cur_cookie->domain), ".%s", value);
		    } else {
			StrAllocCopy(cur_cookie->domain, value);
		    }
		} else {
		    StrAllocCopy(cur_cookie->domain, value);
		}
	    } else {
		StrAllocCopy(cur_cookie->domain, value);
	    }
	    *cookie_len += (int) strlen(cur_cookie->domain);
	    cur_cookie->flags |= COOKIE_FLAG_DOMAIN_SET;
	    SetCookieDomain(cur_cookie, cur_cookie->domain);
	}
    } else if (is_attr("path", 4)) {
	known_attr = YES;
	if (cur_cookie != NULL && value &&
	/*
	 * Don't process a repeat path.  - FM
	 */
	    !(cur_cookie->flags & COOKIE_FLAG_PATH_SET)) {
	    *cookie_len -= (int) strlen(cur_cookie->path);
	    StrAllocCopy(cur_cookie->path, value);
	    *cookie_len += (cur_cookie->pathlen = (int) strlen(cur_cookie->path));
	    cur_cookie->flags |= COOKIE_FLAG_PATH_SET;
	}
    } else if (is_attr("port", 4)) {
	if (cur_cookie != NULL && value &&
	/*
	 * Don't process a repeat port.  - FM
	 */
	    cur_cookie->PortList == NULL) {
	    char *cp = value;

	    while ((*cp != '\0') &&
		   (isdigit(UCH(*cp)) ||
		    *cp == ',' || *cp == ' ')) {
		cp++;
	    }
	    if (*cp == '\0') {
		if (!port_matches(port, value)) {
		    flags |= FLAGS_INVALID_PORT;
		} else {
		    StrAllocCopy(cur_cookie->PortList, value);
		    *cookie_len += (int) strlen(cur_cookie->PortList);
		}
		known_attr = YES;
	    } else {
		known_attr = NO;
	    }
	} else if (cur_cookie != NULL) {
	    /*
	     * Don't process a repeat port.  - FM
	     */
	    if (cur_cookie->PortList == NULL) {
		HTSprintf0(&(cur_cookie->PortList), "%d", port);
		*cookie_len += (int) strlen(cur_cookie->PortList);
	    }
	    known_attr = YES;
	}
    } else if (is_attr("version", 7)) {
	known_attr = YES;
	if (cur_cookie != NULL && value &&
	/*
	 * Don't process a repeat version.  - FM
	 */
	    cur_cookie->version < 1) {
	    int temp = (int) strtol(value, NULL, 10);

	    if (errno != -ERANGE) {
		cur_cookie->version = temp;
	    }
	}
    } else if (is_attr("max-age", 7)) {
	known_attr = YES;
	if (cur_cookie != NULL && value &&
	/*
	 * Don't process a repeat max-age.  - FM
	 */
	    !(flags & FLAGS_MAXAGE_ATTR)) {
	    int temp = (int) strtol(value, NULL, 10);

	    cur_cookie->flags |= COOKIE_FLAG_EXPIRES_SET;
	    if (errno == -ERANGE) {
		cur_cookie->expires = (time_t) 0;
	    } else {
		cur_cookie->expires = (time(NULL) + temp);
		CTrace((tfp, "LYSetCookie: expires %" PRI_time_t ", %s",
			CAST_time_t (cur_cookie->expires),
			ctime(&cur_cookie->expires)));
	    }
	    flags |= FLAGS_MAXAGE_ATTR;
	}
    } else if (is_attr("expires", 7)) {
	/*
	 * Convert an 'expires' attribute value if we haven't received a
	 * 'max-age'.  Note that 'expires' should not be used in Version 1
	 * cookies, but it might be used for "backward compatibility", and, in
	 * turn, ill-informed people surely would start using it instead of,
	 * rather than in addition to, 'max-age'.  - FM
	 */
	known_attr = YES;
	if ((cur_cookie != NULL && !(flags & FLAGS_MAXAGE_ATTR)) &&
	    !(cur_cookie->flags & COOKIE_FLAG_EXPIRES_SET)) {
	    if (value) {
		cur_cookie->flags |= COOKIE_FLAG_EXPIRES_SET;
		cur_cookie->expires = LYmktime(value, FALSE);
		if (cur_cookie->expires > 0) {
		    CTrace((tfp, "LYSetCookie: expires %" PRI_time_t ", %s",
			    CAST_time_t (cur_cookie->expires),
			    ctime(&cur_cookie->expires)));
		}
	    }
	}
    }
    if (known_attr)
	flags |= FLAGS_KNOWN_ATTR;
    return flags;
}

/*
 *  Process potentially concatenated Set-Cookie2 and/or Set-Cookie
 *  headers. - FM
 */
static void LYProcessSetCookies(const char *SetCookie,
				const char *SetCookie2,
				const char *address,
				char *hostname,
				char *path,
				int port)
{
    const char *p, *attr_start, *attr_end, *value_start, *value_end;
    HTList *CombinedCookies = NULL, *cl = NULL;
    cookie *cur_cookie = NULL, *co = NULL;
    int cookie_len = 0;
    int NumCookies = 0;
    BOOL Quoted = FALSE;
    unsigned parse_flags = 0;

    if (isEmpty(SetCookie) &&
	isEmpty(SetCookie2)) {
	/*
	 * Yuk!  Garbage in, so nothing out.  - FM
	 */
	return;
    }

    /*
     * If we have both Set-Cookie and Set-Cookie2 headers.  process the
     * Set-Cookie2 header.  Otherwise, process whichever of the two headers we
     * do have.  Note that if more than one instance of a valued attribute for
     * the same cookie is encountered, the value for the first instance is
     * retained.
     */
    CombinedCookies = HTList_new();

    /*
     * Process the Set-Cookie2 header, if present and not zero-length, adding
     * each cookie to the CombinedCookies list.  - FM
     */
    p = NonNull(SetCookie2);
    if (SetCookie && *p) {
	CTrace((tfp, "LYProcessSetCookies: Using Set-Cookie2 header.\n"));
    }
    while (NumCookies <= max_cookies_domain && *p) {
	value_start = value_end = NULL;
	p = LYSkipCBlanks(p);
	/*
	 * Get the attribute name.
	 */
	attr_start = p;
	while (*p != '\0' && !isspace(UCH(*p)) &&
	       *p != '=' && *p != ';' && *p != ',')
	    p++;
	attr_end = p;
	p = LYSkipCBlanks(p);

	/*
	 * Check for an '=' delimiter, or an 'expires' name followed by white,
	 * since Netscape's bogus parser doesn't require an '=' delimiter, and
	 * 'expires' attributes are being encountered without them.  These
	 * shouldn't be in a Set-Cookie2 header, but we'll assume it's an
	 * expires attribute rather a cookie with that name, since the
	 * attribute mistake rather than name mistake seems more likely to be
	 * made by providers.  - FM
	 */
	if (*p == '=' ||
	    !strncasecomp(attr_start, "Expires", 7)) {
	    /*
	     * Get the value string.
	     */
	    if (*p == '=') {
		p++;
	    }
	    p = LYSkipCBlanks(p);
	    /*
	     * Hack alert!  We must handle Netscape-style cookies with
	     *          "Expires=Mon, 01-Jan-96 13:45:35 GMT" or
	     *          "Expires=Mon,  1 Jan 1996 13:45:35 GMT".
	     * No quotes, but there are spaces.  Argh...  Anyway, we know it
	     * will have at least 3 space separators within it, and two dashes
	     * or two more spaces, so this code looks for a space after the 5th
	     * space separator or dash to mark the end of the value.  - FM
	     */
	    if ((attr_end - attr_start) == 7 &&
		!strncasecomp(attr_start, "Expires", 7)) {
		int spaces = 6;

		value_start = p;
		if (isdigit(UCH(*p))) {
		    /*
		     * No alphabetic day field.  - FM
		     */
		    spaces--;
		} else {
		    /*
		     * Skip the alphabetic day field.  - FM
		     */
		    while (*p != '\0' && isalpha(UCH(*p))) {
			p++;
		    }
		    while (*p == ',' || isspace(UCH(*p))) {
			p++;
		    }
		    spaces--;
		}
		while (*p != '\0' && *p != ';' && *p != ',' && spaces) {
		    p++;
		    if (isspace(UCH(*p))) {
			while (isspace(UCH(*(p + 1))))
			    p++;
			spaces--;
		    } else if (*p == '-') {
			spaces--;
		    }
		}
		value_end = p;
		/*
		 * Hack Alert!  The port attribute can take a comma separated
		 * list of numbers as a value, and such values should be
		 * quoted, but if not, make sure we don't treat a number in the
		 * list as the start of a new cookie.  - FM
		 */
	    } else if ((attr_end - attr_start) == 4 &&
		       !strncasecomp(attr_start, "port", 4) &&
		       isdigit(UCH(*p))) {
		/*
		 * The value starts as an unquoted number.
		 */
		const char *cp, *cp1;

		value_start = p;
		while (1) {
		    while (isdigit(UCH(*p)))
			p++;
		    value_end = p;
		    p = LYSkipCBlanks(p);
		    if (*p == '\0' || *p == ';')
			break;
		    if (*p == ',') {
			cp = LYSkipCBlanks(p + 1);
			if (*cp != '\0' && isdigit(UCH(*cp))) {
			    cp1 = cp;
			    while (isdigit(UCH(*cp1)))
				cp1++;
			    cp1 = LYSkipCBlanks(cp1);
			    if (*cp1 == '\0' || *cp1 == ',' || *cp1 == ';') {
				p = cp;
				continue;
			    }
			}
		    }
		    while (*p != '\0' && *p != ';' && *p != ',')
			p++;
		    value_end = p;
		    /*
		     * Trim trailing spaces.
		     */
		    if ((value_end > value_start) &&
			isspace(UCH(*(value_end - 1)))) {
			value_end--;
			while ((value_end > (value_start + 1)) &&
			       isspace(UCH(*value_end)) &&
			       isspace(UCH(*(value_end - 1)))) {
			    value_end--;
			}
		    }
		    break;
		}
	    } else if (*p == '"') {
		BOOLEAN escaped = FALSE;

		/*
		 * It looks like quoted string.
		 */
		p++;
		value_start = p;
		while (*p != '\0' && (*p != '"' || escaped)) {
		    escaped = (BOOL) (!escaped && *p == '\\');
		    p++;
		}
		if (p != value_start && *p == '"' && !escaped) {
		    value_end = p;
		    p++;
		    Quoted = TRUE;
		} else {
		    value_start--;
		    value_end = p;
		    if (*p)
			p++;
		    Quoted = FALSE;
		}
	    } else {
		/*
		 * Otherwise, it's an unquoted string.
		 */
		value_start = p;
		while (*p != '\0' && *p != ';' && *p != ',')
		    p++;
		value_end = p;
		/*
		 * Trim trailing spaces.
		 */
		if ((value_end > value_start) &&
		    isspace(UCH(*(value_end - 1)))) {
		    value_end--;
		    while ((value_end > (value_start + 1)) &&
			   isspace(UCH(*value_end)) &&
			   isspace(UCH(*(value_end - 1)))) {
			value_end--;
		    }
		}
	    }
	}

	/*
	 * Check for a separator character, and skip it.
	 */
	if (*p == ';' || *p == ',')
	    p++;

	/*
	 * Now, we can handle this attribute/value pair.
	 */
	if (attr_end > attr_start) {
	    char *value = alloc_attr_value(value_start, value_end);

	    parse_flags = parse_attribute(parse_flags,
					  cur_cookie,
					  &cookie_len,
					  attr_start,
					  (int) (attr_end - attr_start),
					  value,
					  address,
					  hostname,
					  port);

	    /*
	     * Presence of value is needed (indicated normally by '='),
	     * but it can be an empty string. - kw 1999-06-24
	     */
	    if (!(parse_flags & FLAGS_KNOWN_ATTR)
		&& value
		&& value_end >= value_start) {
		/*
		 * If we've started a cookie, and it's not too big, save it in
		 * the CombinedCookies list.  - FM
		 */
		if (cookie_len <= max_cookies_buffer
		    && cur_cookie != NULL
		    && !(parse_flags & FLAGS_INVALID_PORT)) {
		    /*
		     * Assume version 1 if not set to that or higher.  - FM
		     */
		    if (cur_cookie->version < 1) {
			cur_cookie->version = 1;
		    }
		    HTList_appendObject(CombinedCookies, cur_cookie);
		} else if (cur_cookie != NULL) {
		    CTrace((tfp,
			    "LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
			    (cur_cookie->name ?
			     cur_cookie->name : "[no name]"),
			    (cur_cookie->value ?
			     cur_cookie->value : "[no value]")));
		    CTrace((tfp,
			    (parse_flags & FLAGS_INVALID_PORT) ?
			    "                     due to excessive length!\n"
			    : "                     due to invalid port!\n"));
		    if (parse_flags & FLAGS_INVALID_PORT) {
			NumCookies--;
		    }
		    freeCookie(cur_cookie);
		    cur_cookie = NULL;
		}
		/*
		 * Start a new cookie.  - FM
		 */
		cur_cookie = newCookie();
		cookie_len = 0;
		NumCookies++;
		MemAllocCopy(&(cur_cookie->name), attr_start, attr_end);
		cookie_len += (int) strlen(cur_cookie->name);
		MemAllocCopy(&(cur_cookie->value), value_start, value_end);
		cookie_len += (int) strlen(cur_cookie->value);
		StrAllocCopy(cur_cookie->domain, hostname);
		cookie_len += (int) strlen(hostname);
		StrAllocCopy(cur_cookie->path, path);
		cookie_len += (cur_cookie->pathlen = (int) strlen(cur_cookie->path));
		cur_cookie->port = port;
		parse_flags = 0;
		cur_cookie->quoted = TRUE;
		SetCookieDomain(cur_cookie, hostname);
	    }
	    FREE(value);
	}
    }

    /*
     * Add any final SetCookie2 cookie to the CombinedCookie list if we are
     * within the length limit.  - FM
     */
    if (NumCookies <= max_cookies_domain
	&& cookie_len <= max_cookies_buffer
	&& cur_cookie != NULL && !(parse_flags & FLAGS_INVALID_PORT)) {
	if (cur_cookie->version < 1) {
	    cur_cookie->version = 1;
	}
	HTList_appendObject(CombinedCookies, cur_cookie);
    } else if (cur_cookie != NULL && !(parse_flags & FLAGS_INVALID_PORT)) {
	CTrace((tfp, "LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
		(cur_cookie->name ? cur_cookie->name : "[no name]"),
		(cur_cookie->value ? cur_cookie->value : "[no value]")));
	CTrace((tfp, "                     due to excessive %s%s%s\n",
		(cookie_len > max_cookies_buffer ? "length" : ""),
		(cookie_len > max_cookies_buffer &&
		 NumCookies > max_cookies_domain
		 ? " and "
		 : ""),
		(NumCookies > max_cookies_domain ? "number!\n" : "!\n")));
	freeCookie(cur_cookie);
	cur_cookie = NULL;
    } else if (cur_cookie != NULL) {	/* invalidport */
	CTrace((tfp, "LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
		(cur_cookie->name ? cur_cookie->name : "[no name]"),
		(cur_cookie->value ? cur_cookie->value : "[no value]")));
	CTrace((tfp, "                     due to invalid port!\n"));
	NumCookies--;
	freeCookie(cur_cookie);
	cur_cookie = NULL;
    }

    /*
     * Process the Set-Cookie header, if no non-zero-length Set-Cookie2 header
     * was present.  - FM
     */
    cookie_len = 0;
    NumCookies = 0;
    cur_cookie = NULL;
    p = ((SetCookie && isEmpty(SetCookie2)) ? SetCookie : "");
    if (SetCookie2 && *p) {
	CTrace((tfp, "LYProcessSetCookies: Using Set-Cookie header.\n"));
    }
    while (NumCookies <= max_cookies_domain && *p) {
	value_start = value_end = NULL;
	p = LYSkipCBlanks(p);
	/*
	 * Get the attribute name.
	 */
	attr_start = p;
	while (*p != '\0' && !isspace(UCH(*p)) &&
	       *p != '=' && *p != ';' && *p != ',')
	    p++;
	attr_end = p;
	p = LYSkipCBlanks(p);

	/*
	 * Check for an '=' delimiter, or an 'expires' name followed by white,
	 * since Netscape's bogus parser doesn't require an '=' delimiter, and
	 * 'expires' attributes are being encountered without them.  - FM
	 */
	if (*p == '=' ||
	    !strncasecomp(attr_start, "Expires", 7)) {
	    /*
	     * Get the value string.
	     */
	    if (*p == '=') {
		p++;
	    }
	    p = LYSkipCBlanks(p);
	    /*
	     * Hack alert!  We must handle Netscape-style cookies with
	     *          "Expires=Mon, 01-Jan-96 13:45:35 GMT" or
	     *          "Expires=Mon,  1 Jan 1996 13:45:35 GMT".
	     * No quotes, but there are spaces.  Argh...  Anyway, we know it
	     * will have at least 3 space separators within it, and two dashes
	     * or two more spaces, so this code looks for a space after the 5th
	     * space separator or dash to mark the end of the value.  - FM
	     */
	    if ((attr_end - attr_start) == 7 &&
		!strncasecomp(attr_start, "Expires", 7)) {
		int spaces = 6;

		value_start = p;
		if (isdigit(UCH(*p))) {
		    /*
		     * No alphabetic day field.  - FM
		     */
		    spaces--;
		} else {
		    /*
		     * Skip the alphabetic day field.  - FM
		     */
		    while (*p != '\0' && isalpha(UCH(*p))) {
			p++;
		    }
		    while (*p == ',' || isspace(UCH(*p))) {
			p++;
		    }
		    spaces--;
		}
		while (*p != '\0' && *p != ';' && *p != ',' && spaces) {
		    p++;
		    if (isspace(UCH(*p))) {
			while (isspace(UCH(*(p + 1))))
			    p++;
			spaces--;
		    } else if (*p == '-') {
			spaces--;
		    }
		}
		value_end = p;
		/*
		 * Hack Alert!  The port attribute can take a comma separated
		 * list of numbers as a value, and such values should be
		 * quoted, but if not, make sure we don't treat a number in the
		 * list as the start of a new cookie.  - FM
		 */
	    } else if ((attr_end - attr_start) == 4 &&
		       !strncasecomp(attr_start, "port", 4) &&
		       isdigit(UCH(*p))) {
		/*
		 * The value starts as an unquoted number.
		 */
		const char *cp, *cp1;

		value_start = p;
		while (1) {
		    while (isdigit(UCH(*p)))
			p++;
		    value_end = p;
		    p = LYSkipCBlanks(p);
		    if (*p == '\0' || *p == ';')
			break;
		    if (*p == ',') {
			cp = LYSkipCBlanks(p + 1);
			if (*cp != '\0' && isdigit(UCH(*cp))) {
			    cp1 = cp;
			    while (isdigit(UCH(*cp1)))
				cp1++;
			    cp1 = LYSkipCBlanks(cp1);
			    if (*cp1 == '\0' || *cp1 == ',' || *cp1 == ';') {
				p = cp;
				continue;
			    }
			}
		    }
		    while (*p != '\0' && *p != ';' && *p != ',')
			p++;
		    value_end = p;
		    /*
		     * Trim trailing spaces.
		     */
		    if ((value_end > value_start) &&
			isspace(UCH(*(value_end - 1)))) {
			value_end--;
			while ((value_end > (value_start + 1)) &&
			       isspace(UCH(*value_end)) &&
			       isspace(UCH(*(value_end - 1)))) {
			    value_end--;
			}
		    }
		    break;
		}
	    } else if (*p == '"') {
		BOOLEAN escaped = FALSE;

		/*
		 * It looks like quoted string.
		 */
		p++;
		value_start = p;
		while (*p != '\0' && (*p != '"' || escaped)) {
		    escaped = (BOOL) (!escaped && *p == '\\');
		    p++;
		}
		if (p != value_start && *p == '"' && !escaped) {
		    value_end = p;
		    p++;
		    Quoted = TRUE;
		} else {
		    value_start--;
		    value_end = p;
		    if (*p)
			p++;
		    Quoted = FALSE;
		}
	    } else {
		/*
		 * Otherwise, it's an unquoted string.
		 */
		value_start = p;
		while (*p != '\0' && *p != ';' && *p != ',')
		    p++;
		value_end = p;
		/*
		 * Trim trailing spaces.
		 */
		if ((value_end > value_start) &&
		    isspace(UCH(*(value_end - 1)))) {
		    value_end--;
		    while ((value_end > (value_start + 1)) &&
			   isspace(UCH(*value_end)) &&
			   isspace(UCH(*(value_end - 1)))) {
			value_end--;
		    }
		}
	    }
	}

	/*
	 * Check for a separator character, and skip it.
	 */
	if (*p == ';' || *p == ',')
	    p++;

	/*
	 * Now, we can handle this attribute/value pair.
	 */
	if (attr_end > attr_start) {
	    char *value = alloc_attr_value(value_start, value_end);

	    parse_flags = parse_attribute(parse_flags,
					  cur_cookie,
					  &cookie_len,
					  attr_start,
					  (int) (attr_end - attr_start),
					  value,
					  address,
					  hostname,
					  port);

	    /*
	     * Presence of value is needed (indicated normally by '='),
	     * but it can be an empty string. - kw 1999-06-24
	     */
	    if (!(parse_flags & FLAGS_KNOWN_ATTR)
		&& value
		&& value_end >= value_start) {
		/*
		 * If we've started a cookie, and it's not too big, save it in
		 * the CombinedCookies list.  - FM
		 */
		if (cookie_len <= max_cookies_buffer
		    && cur_cookie != NULL) {
		    /*
		     * If we had a Set-Cookie2 header, make sure the version is
		     * at least 1, and mark it for quoting.  - FM
		     */
		    if (SetCookie2 != NULL) {
			if (cur_cookie->version < 1) {
			    cur_cookie->version = 1;
			}
			cur_cookie->quoted = TRUE;
		    }
		    HTList_appendObject(CombinedCookies, cur_cookie);
		} else if (cur_cookie != NULL) {
		    CTrace((tfp,
			    "LYProcessSetCookies: Rejecting Set-Cookie: %s=%s\n",
			    (cur_cookie->name ?
			     cur_cookie->name : "[no name]"),
			    (cur_cookie->value ?
			     cur_cookie->value : "[no value]")));
		    CTrace((tfp,
			    "                     due to excessive length!\n"));
		    freeCookie(cur_cookie);
		    cur_cookie = NULL;
		}
		/*
		 * Start a new cookie.  - FM
		 */
		cur_cookie = newCookie();
		NumCookies++;
		cookie_len = 0;
		MemAllocCopy(&(cur_cookie->name), attr_start, attr_end);
		cookie_len += (int) strlen(cur_cookie->name);
		MemAllocCopy(&(cur_cookie->value), value_start, value_end);
		cookie_len += (int) strlen(cur_cookie->value);
		StrAllocCopy(cur_cookie->domain, hostname);
		cookie_len += (int) strlen(hostname);
		StrAllocCopy(cur_cookie->path, path);
		cookie_len += (cur_cookie->pathlen = (int) strlen(cur_cookie->path));
		cur_cookie->port = port;
		parse_flags = 0;
		cur_cookie->quoted = Quoted;
		Quoted = FALSE;
		SetCookieDomain(cur_cookie, hostname);
	    }
	    FREE(value);
	}
    }

    /*
     * Handle the final Set-Cookie cookie if within length limit.  - FM
     */
    if (NumCookies <= max_cookies_domain
	&& cookie_len <= max_cookies_buffer
	&& cur_cookie != NULL) {
	if (SetCookie2 != NULL) {
	    if (cur_cookie->version < 1) {
		cur_cookie->version = 1;
	    }
	    cur_cookie->quoted = TRUE;
	}
	HTList_appendObject(CombinedCookies, cur_cookie);
    } else if (cur_cookie != NULL) {
	CTrace((tfp, "LYProcessSetCookies: Rejecting Set-Cookie: %s=%s\n",
		(cur_cookie->name ? cur_cookie->name : "[no name]"),
		(cur_cookie->value ? cur_cookie->value : "[no value]")));
	CTrace((tfp, "                     due to excessive %s%s%s\n",
		(cookie_len > max_cookies_buffer ? "length" : ""),
		(cookie_len > max_cookies_buffer && NumCookies > max_cookies_domain
		 ? " and "
		 : ""),
		(NumCookies > max_cookies_domain ? "number!\n" : "!\n")));
	freeCookie(cur_cookie);
	cur_cookie = NULL;
    }

    /*
     * OK, now we can actually store any cookies in the CombinedCookies list. 
     * - FM
     */
    cl = CombinedCookies;
    while (NULL != (co = (cookie *) HTList_nextObject(cl))) {
	CTrace((tfp, "LYProcessSetCookie: attr=value pair: '%s=%s'\n",
		(co->name ? co->name : "[no name]"),
		(co->value ? co->value : "[no value]")));
	if (co->expires > 0) {
	    CTrace((tfp, "                    expires: %" PRI_time_t ", %s\n",
		    CAST_time_t (co->expires),
		    ctime(&co->expires)));
	}
	if (isHTTPS_URL(address) &&
	    LYForceSSLCookiesSecure == TRUE &&
	    !(co->flags & COOKIE_FLAG_SECURE)) {
	    co->flags |= COOKIE_FLAG_SECURE;
	    CTrace((tfp, "                    Forced the 'secure' flag on.\n"));
	}
	store_cookie(co, hostname, path);
    }
    HTList_delete(CombinedCookies);
    CombinedCookies = NULL;

    return;
}

/*
 *  Entry function for handling Set-Cookie: and/or Set-Cookie2:
 *  reply headers.   They may have been concatenated as comma
 *  separated lists in HTTP.c or HTMIME.c. - FM
 */
void LYSetCookie(const char *SetCookie,
		 const char *SetCookie2,
		 const char *address)
{
    BOOL BadHeaders = FALSE;
    char *hostname = NULL, *path = NULL, *ptr;
    int port = 80;

    /*
     * Get the hostname, port and path of the address, and report the
     * Set-Cookie and/or Set-Cookie2 header(s) if trace mode is on, but set the
     * cookie(s) only if LYSetCookies is TRUE.  - FM
     */
    if (((hostname = HTParse(address, "", PARSE_HOST)) != NULL) &&
	(ptr = StrChr(hostname, ':')) != NULL) {
	/*
	 * Replace default port number.
	 */
	*ptr = '\0';
	ptr++;
	port = atoi(ptr);
    } else if (isHTTPS_URL(address)) {
	port = 443;
    }

    /*
     * Get the path from the request URI.
     */
    if ((path = HTParse(address, "", PARSE_PATH | PARSE_PUNCTUATION)) != NULL) {
	/*
	 * Trim off any parameters to provide something that we can compare
	 * against the cookie's path for verifying if it has the proper prefix.
	 */
	if ((ptr = StrChr(path, '?')) != NULL) {
	    CTrace((tfp, "discarding params \"%s\" in request URI\n", ptr));
	    *ptr = '\0';
	}
	/* trim a trailing slash, unless we have only a "/" */
	if ((ptr = strrchr(path, '/')) != NULL) {
	    if (ptr == path) {
		++ptr;
	    }
	    CTrace((tfp, "discarding \"%s\" from request URI\n", ptr));
	    *ptr = '\0';
	}
    }

    if (isEmpty(SetCookie) &&
	isEmpty(SetCookie2)) {
	/*
	 * Yuk, something must have gone wrong in HTMIME.c or HTTP.c because
	 * both SetCookie and SetCookie2 are NULL or zero-length.  - FM
	 */
	BadHeaders = TRUE;
    }
    CTrace((tfp, "LYSetCookie called with host '%s', path '%s',\n",
	    NonNull(hostname),
	    NonNull(path)));
    if (SetCookie) {
	CTrace((tfp, "    and Set-Cookie: '%s'\n", SetCookie));
    }
    if (SetCookie2) {
	CTrace((tfp, "    and Set-Cookie2: '%s'\n", SetCookie2));
    }
    if (LYSetCookies == FALSE || BadHeaders == TRUE) {
	CTrace((tfp, "    Ignoring this Set-Cookie/Set-Cookie2 request.\n"));
    }

    /*
     * We're done if LYSetCookies is off or we have bad headers.  - FM
     */
    if (LYSetCookies == FALSE || BadHeaders == TRUE) {
	FREE(hostname);
	FREE(path);
	return;
    }

    /*
     * Process the header(s).
     */
    LYProcessSetCookies(SetCookie, SetCookie2, address, hostname, path, port);
    FREE(hostname);
    FREE(path);
    return;
}

/*
 *  Entry function from creating a Cookie: request header
 *  if needed. - AK & FM
 */
char *LYAddCookieHeader(char *hostname,
			char *path,
			int port,
			int secure)
{
    char *header = NULL;
    HTList *hl = domain_list, *next = NULL;
    domain_entry *de;

    CTrace((tfp, "LYCookie: Searching for '%s:%d', '%s'.\n",
	    NONNULL(hostname),
	    port,
	    NONNULL(path)));

    /*
     * Search the cookie_list elements in the domain_list for any cookies
     * associated with the //hostname:port/path
     */
    while (hl) {
	de = (domain_entry *) hl->object;
	next = hl->next;

	if (de != NULL) {
	    if (!HTList_isEmpty(de->cookie_list)) {
		/*
		 * Scan the domain's cookie_list for any cookies we should
		 * include in our request header.
		 */
		header = scan_cookie_sublist(hostname, path, port,
					     de->cookie_list, header, secure);
	    } else if (de->bv == QUERY_USER && de->invcheck_bv == DEFAULT_INVCHECK_BV) {
		/*
		 * No cookies in this domain, and no default accept/reject
		 * choice was set by the user, so delete the domain.  - FM
		 */
		freeCookies(de);
		HTList_removeObject(domain_list, de);
		FREE(de);
	    }
	}
	hl = next;
    }
    if (header)
	return (header);

    return (NULL);
}

#ifdef USE_PERSISTENT_COOKIES
static int number_of_file_cookies = 0;

/* rjp - cookie loading */
void LYLoadCookies(char *cookie_file)
{
    FILE *cookie_handle;
    char *buf = NULL;
    static char domain[256], path[LY_MAXPATH], name[256], value[4100];
    static char what[8], secure[8], expires_a[16];
    /* *INDENT-OFF* */
    static struct {
	char *s;
	size_t n;
    } tok_values[] = {
	{ domain,	sizeof(domain) },
	{ what,		sizeof(what) },
	{ path,		sizeof(path) },
	{ secure,	sizeof(secure) },
	{ expires_a,	sizeof(expires_a) },
	{ name,		sizeof(name) },
	{ value,	sizeof(value) },
	{ NULL, 0 }
	};
    /* *INDENT-ON* */

    time_t expires;

    cookie_handle = fopen(cookie_file, TXT_R);
    if (!cookie_handle)
	return;

    CTrace((tfp, "LYLoadCookies: reading cookies from %s\n", cookie_file));

    number_of_file_cookies = 0;
    while (LYSafeGets(&buf, cookie_handle) != 0) {
	cookie *moo;
	int tok_loop;
	char *tok_out, *tok_ptr;

	LYTrimNewline(buf);
	if (buf[0] == '\0' || buf[0] == '#') {
	    continue;
	}

	number_of_file_cookies++;

	strcat(buf, "\t");	/* add sep after line if enough space - kw */

	/*
	 * Tokenise the cookie line into its component parts -
	 * this only works for Netscape style cookie files at the
	 * moment.  It may be worth investigating an alternative
	 * format for Lynx because the Netscape format isn't all
	 * that useful, or future-proof. - RP
	 *
	 * 'fixed' by using strsep instead of strtok.  No idea
	 * what kind of platform problems this might introduce. - RP
	 */
	/*
	 * This fails when the path is blank
	 *
	 * sscanf(buf, "%s\t%s\t%s\t%s\t%d\t%s\t%[ -~]",
	 *  domain, what, path, secure, &expires, name, value);
	 */
	CTrace((tfp, "LYLoadCookies: tokenising %s\n", buf));
	tok_ptr = buf;
	tok_out = LYstrsep(&tok_ptr, "\t");
	for (tok_loop = 0; tok_out && tok_values[tok_loop].s; tok_loop++) {
	    CTrace((tfp, "\t%d:[%03d]:[%s]\n",
		    tok_loop, (int) (tok_out - buf), tok_out));
	    LYStrNCpy(tok_values[tok_loop].s,
		      tok_out,
		      (int) tok_values[tok_loop].n);
	    /*
	     * It looks like strtok ignores a leading delimiter,
	     * which makes things a bit more interesting.  Something
	     * like "FALSE\t\tFALSE\t" translates to FALSE,FALSE
	     * instead of FALSE,,FALSE. - RP
	     */
	    tok_out = LYstrsep(&tok_ptr, "\t");
	}

	if (tok_values[tok_loop].s) {
	    /* tok_out in above loop must have been NULL prematurely - kw */
	    CTrace((tfp,
		    "*** wrong format: not enough tokens, ignoring line!\n"));
	    continue;
	}

	expires = atol(expires_a);
	CTrace((tfp, "expires:\t%s\n", ctime(&expires)));
	moo = newCookie();
	StrAllocCopy(moo->domain, domain);
	SetCookieDomain(moo, domain);
	StrAllocCopy(moo->path, path);
	StrAllocCopy(moo->name, name);
	if (value[0] == '"' &&
	    value[1] && value[strlen(value) - 1] == '"' &&
	    value[strlen(value) - 2] != '\\') {
	    value[strlen(value) - 1] = '\0';
	    StrAllocCopy(moo->value, value + 1);
	    moo->quoted = TRUE;
	} else {
	    StrAllocCopy(moo->value, value);
	}
	moo->pathlen = (int) strlen(moo->path);
	/*
	 *  Justification for following flags:
	 *  COOKIE_FLAG_FROM_FILE    So we know were it comes from.
	 *  COOKIE_FLAG_EXPIRES_SET  It must have had an explicit
	 *                           expiration originally, otherwise
	 *                           it would not be in the file.
	 *  COOKIE_FLAG_DOMAIN_SET,  We don't know whether these were
	 *   COOKIE_FLAG_PATH_SET    explicit or implicit, but this
	 *                           only matters for sending version 1
	 *                           cookies; the cookies read from the
	 *                           file are currently treated all like
	 *                           version 0 (we don't set moo->version)
	 *                           so $Domain= and $Path= will normally
	 *                           not be sent to the server.  But if
	 *                           these cookies somehow get mixed with
	 *                           new version 1 cookies we may end up
	 *                           sending version 1 to the server, and
	 *                           in that case we should send $Domain
	 *                           and $Path.  The state-man-mec drafts
	 *                           and RFC 2109 say that $Domain and
	 *                           $Path SHOULD be omitted if they were
	 *                           not given explicitly, but not that
	 *                           they MUST be omitted.
	 *                           See 8.2 Cookie Spoofing in draft -10
	 *                           for a good reason to send them.
	 *                           However, an explicit domain should be
	 *                           now prefixed with a dot (unless it is
	 *                           for a single host), so we check for
	 *                           that.
	 *  COOKIE_FLAG_SECURE       Should have "FALSE" for normal,
	 *                           otherwise set it.
	 */
	moo->flags |= COOKIE_FLAG_FROM_FILE | COOKIE_FLAG_EXPIRES_SET |
	    COOKIE_FLAG_PATH_SET;
	if (LeadingDot(domain))
	    moo->flags |= COOKIE_FLAG_DOMAIN_SET;
	if (secure[0] != 'F')
	    moo->flags |= COOKIE_FLAG_SECURE;
	/* @@@@@@ Should we set port to 443 if secure is set? @@@@@@ */
	moo->expires = expires;
	/*
	 * I don't like using this to store the cookies because it's
	 * designed to store cookies that have been received from an
	 * HTTP request, not from a persistent cookie jar.  Hence the
	 * mucking about with the COOKIE_FLAG_FROM_FILE above. - RP
	 */
	store_cookie(moo, domain, path);
    }
    LYCloseInput(cookie_handle);
}

static FILE *NewCookieFile(char *cookie_file)
{
    CTrace((tfp, "LYStoreCookies: save cookies to %s on exit\n", cookie_file));
    return LYNewTxtFile(cookie_file);
}

/* rjp - persistent cookie support */
void LYStoreCookies(char *cookie_file)
{
    HTList *dl, *cl;
    domain_entry *de;
    cookie *co;
    FILE *cookie_handle = NULL;
    time_t now = time(NULL);	/* system specific? - RP */

    if (isEmpty(cookie_file) || !strcmp(cookie_file, "/dev/null")) {
	/* We give /dev/null the Unix meaning, regardless of OS */
	return;
    }

    /*
     * Check whether we have something to do.  - FM
     */
    if (HTList_isEmpty(domain_list) &&
	number_of_file_cookies == 0) {
	/* No cookies now, and haven't read any,
	 * so don't bother updating the file.
	 */
	return;
    }

    /* if we read cookies from the file, we'll update it even if now empty */
    if (number_of_file_cookies != 0) {
	cookie_handle = NewCookieFile(cookie_file);
	if (cookie_handle == NULL)
	    return;
    }

    for (dl = domain_list; dl != NULL; dl = dl->next) {
	de = (domain_entry *) (dl->object);
	if (de == NULL)
	    /*
	     * Fote says the first object is NULL.  Go with that.
	     */
	    continue;

	/*
	 * Show the domain's cookies.  - FM
	 */
	for (cl = de->cookie_list; cl != NULL; cl = cl->next) {
	    /*
	     * First object is always NULL.  - FM
	     */
	    if ((co = (cookie *) cl->object) == NULL)
		continue;

	    CTrace((tfp, "LYStoreCookies: %" PRI_time_t " %s %" PRI_time_t " ",
		    CAST_time_t (now),
		    (now < co->expires) ? "<" : ">",
		    CAST_time_t (co->expires)));

	    if ((co->flags & COOKIE_FLAG_DISCARD)) {
		CTrace((tfp, "not stored - DISCARD\n"));
		continue;
	    } else if (!(co->flags & COOKIE_FLAG_EXPIRES_SET)) {
		CTrace((tfp, "not stored - no expiration time\n"));
		continue;
	    } else if (co->expires <= now) {
		CTrace((tfp, "not stored - EXPIRED\n"));
		continue;
	    }

	    /* when we're sure we'll write to the file - open it */
	    if (cookie_handle == NULL) {
		cookie_handle = NewCookieFile(cookie_file);
		if (cookie_handle == NULL)
		    return;
	    }

	    fprintf(cookie_handle, "%s\t%s\t%s\t%s\t%" PRI_time_t
		    "\t%s\t%s%s%s\n",
		    de->ddomain,
		    (co->flags & COOKIE_FLAG_DOMAIN_SET) ? "TRUE" : "FALSE",
		    co->path,
		    (co->flags & COOKIE_FLAG_SECURE) ? "TRUE" : "FALSE",
		    CAST_time_t (co->expires), co->name,
		    (co->quoted ? "\"" : ""),
		    NonNull(co->value),
		    (co->quoted ? "\"" : ""));

	    CTrace((tfp, "STORED %s\n", de->ddomain));
	}
    }
    if (cookie_handle != NULL) {
	LYCloseOutput(cookie_handle);
	HTSYS_purge(cookie_file);
    }
}
#endif

/*
 * Check if the given string is completely US-ASCII.  If so (and if the
 * original were hex-encoded), it is likely to be more useful in a decoded
 * form.
 */
static BOOLEAN valueNonAscii(const char *value)
{
    BOOLEAN result = FALSE;

    while (*value != '\0') {
	int ch = UCH(*value++);

	if (ch < 32 || ch > 126) {
	    result = TRUE;
	    break;
	}
    }

    return result;
}

/*	LYHandleCookies - F.Macrides (macrides@@sci.wfeb.edu)
 *	---------------
 *
 *  Lists all cookies by domain, and allows deletions of
 *  individual cookies or entire domains, and changes of
 *  'allow' settings.  The list is invoked via the COOKIE_JAR
 *  command (Ctrl-K), and deletions or changes of 'allow'
 *  settings are done by activating links in that list.
 *  The procedure uses a LYNXCOOKIE: internal URL scheme.
 *
 *  Semantics:
 *	LYNXCOOKIE:/			Create and load the Cookie Jar Page.
 *	LYNXCOOKIE://domain		Manipulate the domain.
 *	LYNXCOOKIE://domain/lynxID	Delete cookie with lynxID in domain.
 *
 *	New functions can be added as extensions to the path, and/or by
 *	assigning meanings to ;parameters, a ?searchpart, and/or #fragments.
 */
static int LYHandleCookies(const char *arg,
			   HTParentAnchor *anAnchor,
			   HTFormat format_out,
			   HTStream *sink)
{
    HTFormat format_in = WWW_HTML;
    HTStream *target = NULL;
    char *buf = NULL;
    char *domain = NULL;
    char *lynxID = NULL;
    HTList *dl, *cl, *next;
    domain_entry *de;
    cookie *co;
    char *name = NULL, *value = NULL, *path = NULL;
    char *comment = NULL, *Address = NULL, *Title = NULL;
    int ch;

    /*
     * Check whether we have something to do.  - FM
     */
    if (HTList_isEmpty(domain_list)) {
	HTProgress(COOKIE_JAR_IS_EMPTY);
	LYSleepMsg();
	HTNoDataOK = 1;
	return (HT_NO_DATA);
    }

    /*
     * If there's a domain string in the "host" field of the LYNXCOOKIE:  URL,
     * this is a request to delete something or change and 'allow' setting.  -
     * FM
     */
    if ((domain = HTParse(arg, "", PARSE_HOST)) != NULL) {
	if (*domain == '\0') {
	    FREE(domain);
	} else {
	    /*
	     * If there is a path string (not just a slash) in the LYNXCOOKIE: 
	     * URL, that's a cookie's lynxID and this is a request to delete it
	     * from the Cookie Jar.  - FM
	     */
	    if ((lynxID = HTParse(arg, "", PARSE_PATH)) != NULL) {
		if (*lynxID == '\0') {
		    FREE(lynxID);
		}
	    }
	}
    }
    if (domain) {
	/*
	 * Seek the domain in the domain_list structure.  - FM
	 */
	if ((de = find_domain_entry(domain)) != NULL) {
	    FREE(domain);
	    /*
	     * We found the domain.  Check whether a lynxID is present.  - FM
	     */
	    if (lynxID) {
		/*
		 * Seek and delete the cookie with this lynxID in the domain's
		 * cookie list.  - FM
		 */
		for (cl = de->cookie_list; cl != NULL; cl = cl->next) {
		    if ((co = (cookie *) cl->object) == NULL)
			/*
			 * First object is always empty.  - FM
			 */
			continue;
		    if (!strcmp(lynxID, co->lynxID)) {
			/*
			 * We found the cookie.  Delete it if confirmed.  - FM
			 */
			if (HTConfirm(DELETE_COOKIE_CONFIRMATION) == FALSE) {
			    FREE(lynxID);
			    HTNoDataOK = 1;
			    return (HT_NO_DATA);
			}
			HTList_removeObject(de->cookie_list, co);
			freeCookie(co);
			co = NULL;
			total_cookies--;
			if ((de->bv == QUERY_USER &&
			     HTList_isEmpty(de->cookie_list)) &&
			    HTConfirm(DELETE_EMPTY_DOMAIN_CONFIRMATION)) {
			    /*
			     * No more cookies in this domain, no default
			     * accept/reject choice was set by the user, and
			     * got confirmation on deleting the domain, so do
			     * it.  - FM
			     */
			    freeCookies(de);
			    HTList_removeObject(domain_list, de);
			    FREE(de);
			    HTProgress(DOMAIN_EATEN);
			} else {
			    HTProgress(COOKIE_EATEN);
			}
			LYSleepMsg();
			HTNoDataOK = 1;
			break;
		    }
		}
	    } else {
		/*
		 * Prompt whether to delete all of the cookies in this domain,
		 * or the domain if no cookies in it, or to change its 'allow'
		 * setting, or to cancel, and then act on the user's response. 
		 * - FM
		 */
		if (HTList_isEmpty(de->cookie_list)) {
		    _statusline(DELETE_DOMAIN_SET_ALLOW_OR_CANCEL);
		} else {
		    _statusline(DELETE_COOKIES_SET_ALLOW_OR_CANCEL);
		}
		HTNoDataOK = 1;
		while (1) {
		    ch = LYgetch_single();
#ifdef VMS
		    if (HadVMSInterrupt) {
			HadVMSInterrupt = FALSE;
			ch = 'C';
		    }
#endif /* VMS */
		    switch (ch) {
		    case 'A':
			/*
			 * Set to accept all cookies from this domain.  - FM
			 */
			de->bv = ACCEPT_ALWAYS;
			HTUserMsg2(ALWAYS_ALLOWING_COOKIES, de->ddomain);
			return (HT_NO_DATA);

		    case 'C':
			/*
			 * Cancelled.  - FM
			 */
		      reject:
			HTUserMsg(CANCELLED);
			return (HT_NO_DATA);

		    case 'D':
			if (HTList_isEmpty(de->cookie_list)) {
			    /*
			     * We had an empty domain, so we were asked to
			     * delete it.  - FM
			     */
			    freeCookies(de);
			    HTList_removeObject(domain_list, de);
			    FREE(de);
			    HTProgress(DOMAIN_EATEN);
			    LYSleepMsg();
			    break;
			}
		      Delete_all_cookies_in_domain:
			/*
			 * Delete all cookies in this domain.  - FM
			 */
			cl = de->cookie_list;
			while (cl) {
			    next = cl->next;
			    co = (cookie *) (cl->object);
			    if (co) {
				HTList_removeObject(de->cookie_list, co);
				freeCookie(co);
				co = NULL;
				total_cookies--;
			    }
			    cl = next;
			}
			HTProgress(DOMAIN_COOKIES_EATEN);
			LYSleepMsg();
			/*
			 * If a default accept/reject choice is set, we're
			 * done.  - FM
			 */
			if (de->bv != QUERY_USER)
			    return (HT_NO_DATA);
			/*
			 * Check whether to delete the empty domain.  - FM
			 */
			if (HTConfirm(DELETE_EMPTY_DOMAIN_CONFIRMATION)) {
			    freeCookies(de);
			    HTList_removeObject(domain_list, de);
			    FREE(de);
			    HTProgress(DOMAIN_EATEN);
			    LYSleepMsg();
			}
			break;

		    case 'P':
			/*
			 * Set to prompt for cookie acceptance from this
			 * domain.  - FM
			 */
			de->bv = QUERY_USER;
			HTUserMsg2(PROMPTING_TO_ALLOW_COOKIES, de->ddomain);
			return (HT_NO_DATA);

		    case 'V':
			/*
			 * Set to reject all cookies from this domain.  - FM
			 */
			de->bv = REJECT_ALWAYS;
			HTUserMsg2(NEVER_ALLOWING_COOKIES, de->ddomain);
			if ((!HTList_isEmpty(de->cookie_list)) &&
			    HTConfirm(DELETE_ALL_COOKIES_IN_DOMAIN))
			    goto Delete_all_cookies_in_domain;
			return (HT_NO_DATA);

		    default:
			if (LYCharIsINTERRUPT(ch))
			    goto reject;
			continue;
		    }
		    break;
		}
	    }
	}
	if (HTList_isEmpty(domain_list)) {
	    /*
	     * There are no more domains left.  Don't delete the domain_list,
	     * otherwise atexit may be called multiple times.  - kw
	     */
	    HTProgress(ALL_COOKIES_EATEN);
	    LYSleepMsg();
	}
	FREE(domain);
	FREE(lynxID);
	return (HT_NO_DATA);
    }

    /*
     * If we get to here, it was a LYNXCOOKIE:/ URL for creating and displaying
     * the Cookie Jar Page, or we didn't find the domain or cookie in a
     * deletion request.  Set up an HTML stream and return an updated Cookie
     * Jar Page.  - FM
     */
    target = HTStreamStack(format_in,
			   format_out,
			   sink, anAnchor);
    if (!target || target == NULL) {
	HTSprintf0(&buf, CANNOT_CONVERT_I_TO_O,
		   HTAtom_name(format_in), HTAtom_name(format_out));
	HTAlert(buf);
	FREE(buf);
	return (HT_NOT_LOADED);
    }

    /*
     * Load HTML strings into buf and pass buf to the target for parsing and
     * rendering.  - FM
     */
#define PUTS(buf)    (*target->isa->put_block)(target, buf, (int) strlen(buf))

    WriteStreamTitle(target, COOKIE_JAR_TITLE);
    HTSprintf0(&buf, "<h1>%s (%s)%s<a href=\"%s%s\">%s</a></h1>\n",
	       LYNX_NAME, LYNX_VERSION,
	       HELP_ON_SEGMENT,
	       helpfilepath, COOKIE_JAR_HELP, COOKIE_JAR_TITLE);
    PUTS(buf);

    HTSprintf0(&buf, "<div><em>Note:</em> %s\n", ACTIVATE_TO_GOBBLE);
    PUTS(buf);
    HTSprintf0(&buf, "%s</div>\n", OR_CHANGE_ALLOW);
    PUTS(buf);

    HTSprintf0(&buf, "<dl compact>\n");
    PUTS(buf);
    for (dl = domain_list; dl != NULL; dl = dl->next) {
	de = (domain_entry *) (dl->object);
	if (de == NULL)
	    /*
	     * First object always is NULL.  - FM
	     */
	    continue;

	/*
	 * Show the domain link and 'allow' setting.  - FM
	 */
	HTSprintf0(&buf,
		   "<dt>%s<dd><a href=\"%s//%s/\"><em>Domain:</em> %s</a>\n",
		   de->ddomain, STR_LYNXCOOKIE, de->ddomain, de->ddomain);
	PUTS(buf);
	switch (de->bv) {
	case (ACCEPT_ALWAYS):
	    HTSprintf0(&buf, COOKIES_ALWAYS_ALLOWED);
	    break;
	case (REJECT_ALWAYS):
	    HTSprintf0(&buf, COOKIES_NEVER_ALLOWED);
	    break;
	case (QUERY_USER):
	    HTSprintf0(&buf, COOKIES_ALLOWED_VIA_PROMPT);
	    break;
	}
	PUTS(buf);
	HTSprintf0(&buf, "\n");
	PUTS(buf);

	/*
	 * Show the domain's cookies.  - FM
	 */
	for (cl = de->cookie_list; cl != NULL; cl = cl->next) {
	    if ((co = (cookie *) cl->object) == NULL)
		/*
		 * First object is always NULL.  - FM
		 */
		continue;

	    /*
	     * Show the name=value pair.  - FM
	     */
	    if (co->name) {
		StrAllocCopy(name, co->name);
		LYEntify(&name, TRUE);
	    } else {
		StrAllocCopy(name, NO_NAME);
	    }
	    if (co->value) {
		StrAllocCopy(value, co->value);
		HTUnEscape(value);
		if (valueNonAscii(value))
		    strcpy(value, co->value);
		LYEntify(&value, TRUE);
	    } else {
		StrAllocCopy(value, NO_VALUE);
	    }
	    HTSprintf0(&buf, "<dd><a href=\"%s//%s/%s\"><em>%s</em>=%s</a>\n",
		       STR_LYNXCOOKIE, de->ddomain, co->lynxID, name, value);
	    FREE(name);
	    FREE(value);
	    PUTS(buf);

	    if (co->flags & COOKIE_FLAG_FROM_FILE) {
		HTSprintf0(&buf, "%s\n",
			   gettext("(from a previous session)"));
		PUTS(buf);
	    }

	    /*
	     * Show the path, port, secure and discard setting.  - FM
	     */
	    if (co->path) {
		StrAllocCopy(path, co->path);
		LYEntify(&path, TRUE);
	    } else {
		StrAllocCopy(path, "/");
	    }
	    HTSprintf0(&buf,
		       "<dd><em>Path:</em> %s\n<dd><em>Port:</em> %d <em>Secure:</em> %s <em>Discard:</em> %s\n",
		       path, co->port,
		       ((co->flags & COOKIE_FLAG_SECURE) ? "YES" : "NO"),
		       ((co->flags & COOKIE_FLAG_DISCARD) ? "YES" : "NO"));
	    FREE(path);
	    PUTS(buf);

	    /*
	     * Show the list of acceptable ports, if present.  - FM
	     */
	    if (co->PortList) {
		HTSprintf0(&buf, "<dd><em>PortList:</em> \"%s\"\n", co->PortList);
		PUTS(buf);
	    }

	    /*
	     * Show the commentURL, if we have one.  - FM
	     */
	    if (co->commentURL) {
		StrAllocCopy(Address, co->commentURL);
		LYEntify(&Address, FALSE);
		StrAllocCopy(Title, co->commentURL);
		LYEntify(&Title, TRUE);
		HTSprintf0(&buf,
			   "<dd><em>CommentURL:</em> <a href=\"%s\">%s</a>\n",
			   Address,
			   Title);
		FREE(Address);
		FREE(Title);
		PUTS(buf);
	    }

	    /*
	     * Show the comment, if we have one.  - FM
	     */
	    if (co->comment) {
		StrAllocCopy(comment, co->comment);
		LYEntify(&comment, TRUE);
		HTSprintf0(&buf, "<dd><em>Comment:</em> %s\n", comment);
		FREE(comment);
		PUTS(buf);
	    }

	    /*
	     * Show the Maximum Gobble Date.  - FM
	     */
	    HTSprintf0(&buf, "<dd><em>%s</em> %s%s",
		       gettext("Maximum Gobble Date:"),
		       ((co->flags & COOKIE_FLAG_EXPIRES_SET)
			?
			ctime(&co->expires) : END_OF_SESSION),
		       ((co->flags & COOKIE_FLAG_EXPIRES_SET)
			?
			"" : "\n"));
	    PUTS(buf);
	}
	HTSprintf0(&buf, "\n");
	PUTS(buf);
    }
    HTSprintf0(&buf, "</dl>\n</body>\n</html>\n");
    PUTS(buf);

    /*
     * Free the target to complete loading of the Cookie Jar Page, and report a
     * successful load.  - FM
     */
    (*target->isa->_free) (target);
    FREE(buf);
    return (HT_LOADED);
}

/*      cookie_domain_flag_set
 *      ----------------------
 *      All purpose function to handle setting domain flags for a
 *      comma-delimited list of domains.  cookie_domain_flags handles
 *      invcheck behavior, as well as accept/reject behavior. - BJP
 */
static void cookie_domain_flag_set(char *domainstr,
				   int flag)
{
    domain_entry *de = NULL;
    char **str = typecalloc(char *);
    char *dstr = NULL;
    char *strsmall = NULL;

    if (str == NULL) {
	HTAlwaysAlert(gettext("Internal"),
		      gettext("cookie_domain_flag_set error, aborting program"));
	exit_immediately(EXIT_FAILURE);
    }

    /*
     * Is this the first domain we're handling?  If so, initialize domain_list.
     */
    if (domain_list == NULL) {
#ifdef LY_FIND_LEAKS
	atexit(LYCookieJar_free);
#endif
	domain_list = HTList_new();
	total_cookies = 0;
    }

    StrAllocCopy(dstr, domainstr);

    *str = dstr;

    while ((strsmall = LYstrsep(str, ",")) != 0) {

	if (*strsmall == '\0')
	    /* Never add a domain for empty string.  It would actually
	     * make more sense to use strtok here. - kw */
	    continue;

	/*
	 * Check the list of existing domains to see if this is a
	 * re-setting of an already existing domain -- if so, just
	 * change the behavior, if not, create a new domain entry.
	 */

	if ((de = find_domain_entry(strsmall)) == NULL) {
	    de = typecalloc(domain_entry);
	    if (de == NULL)
		outofmem(__FILE__, "cookie_domain_flag_set");

	    assert(de != NULL);

	    de->bv = ACCEPT_ALWAYS;
	    de->invcheck_bv = INVCHECK_QUERY;

	    switch (flag) {
	    case (FLAG_ACCEPT_ALWAYS):
		de->invcheck_bv = DEFAULT_INVCHECK_BV;
		break;
	    case (FLAG_REJECT_ALWAYS):
		de->invcheck_bv = DEFAULT_INVCHECK_BV;
		break;
	    case (FLAG_QUERY_USER):
		de->invcheck_bv = DEFAULT_INVCHECK_BV;
		break;
	    case (FLAG_INVCHECK_QUERY):
		de->bv = QUERY_USER;
		break;
	    case (FLAG_INVCHECK_STRICT):
		de->bv = QUERY_USER;
		break;
	    case (FLAG_INVCHECK_LOOSE):
		de->bv = QUERY_USER;
		break;
	    }

	    StrAllocCopy(de->domain, strsmall);
	    StrAllocCopy(de->ddomain, SkipLeadingDot(strsmall));
	    de->cookie_list = HTList_new();
	    HTList_appendObject(domain_list, de);
	}
	switch (flag) {
	case (FLAG_ACCEPT_ALWAYS):
	    de->bv = ACCEPT_ALWAYS;
	    break;
	case (FLAG_REJECT_ALWAYS):
	    de->bv = REJECT_ALWAYS;
	    break;
	case (FLAG_QUERY_USER):
	    de->bv = QUERY_USER;
	    break;
	case (FLAG_INVCHECK_QUERY):
	    de->invcheck_bv = INVCHECK_QUERY;
	    break;
	case (FLAG_INVCHECK_STRICT):
	    de->invcheck_bv = INVCHECK_STRICT;
	    break;
	case (FLAG_INVCHECK_LOOSE):
	    de->invcheck_bv = INVCHECK_LOOSE;
	    break;
	}
	CTrace((tfp,
		"cookie_domain_flag_set (%s, bv=%u, invcheck_bv=%u)\n",
		strsmall, de->bv, de->invcheck_bv));
    }

    FREE(strsmall);
    FREE(str);
    FREE(dstr);
}

/*
 * If any COOKIE_{ACCEPT,REJECT}_DOMAINS have been defined, process them.
 * These are comma delimited lists of domains.  - BJP
 *
 * And for query/strict/loose invalid cookie checking.  - BJP
 */
void LYConfigCookies(void)
{
    static const struct {
	char **domain;
	int flag;
	int once;
    } table[] = {
	/* *INDENT-OFF* */
	{ &LYCookieSAcceptDomains,	FLAG_ACCEPT_ALWAYS,   TRUE },
	{ &LYCookieSRejectDomains,	FLAG_REJECT_ALWAYS,   TRUE },
	{ &LYCookieSStrictCheckDomains, FLAG_INVCHECK_STRICT, TRUE },
	{ &LYCookieSLooseCheckDomains,	FLAG_INVCHECK_LOOSE,  TRUE },
	{ &LYCookieSQueryCheckDomains,	FLAG_INVCHECK_QUERY,  TRUE },
	{ &LYCookieAcceptDomains,	FLAG_ACCEPT_ALWAYS,   FALSE },
	{ &LYCookieRejectDomains,	FLAG_REJECT_ALWAYS,   FALSE },
	{ &LYCookieStrictCheckDomains,	FLAG_INVCHECK_STRICT, FALSE },
	{ &LYCookieLooseCheckDomains,	FLAG_INVCHECK_LOOSE,  FALSE },
	{ &LYCookieQueryCheckDomains,	FLAG_INVCHECK_QUERY,  FALSE },
	/* *INDENT-ON* */

    };
    unsigned n;

    CTrace((tfp, "LYConfigCookies\n"));
    for (n = 0; n < TABLESIZE(table); n++) {
	if (*(table[n].domain) != NULL) {
	    cookie_domain_flag_set(*(table[n].domain), table[n].flag);
	    /*
	     * Discard the value for system settings after we've used them.
	     * The local settings will be merged with the contents of .lynxrc
	     */
	    if (table[n].once) {
		FREE(*(table[n].domain));
	    }
	}
    }
}

#ifdef GLOBALDEF_IS_MACRO
#define _LYCOOKIE_C_GLOBALDEF_1_INIT { "LYNXCOOKIE",LYHandleCookies,0}
GLOBALDEF(HTProtocol, LYLynxCookies, _LYCOOKIE_C_GLOBALDEF_1_INIT);
#else
GLOBALDEF HTProtocol LYLynxCookies =
{"LYNXCOOKIE", LYHandleCookies, 0};
#endif /* GLOBALDEF_IS_MACRO */
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYCookie.c,v 1.95 2009/01/01 22:28:57 tom Exp $
d26 3
d51 6
a56 7
      * We protect against denial-of-service attacks (see section 6.3.1
	of the draft) by limiting a domain to 50 cookies, limiting the
	total number of cookies to 500, and limiting a processed cookie
	to a maximum of 4096 bytes, but we count on the normal garbage
	collections to bring us back down under the limits, rather than
	actively removing cookies and/or domains based on age or frequency
	of use.
d83 3
d107 1
a124 4
struct _HTStream {
    HTStreamClass *isa;
};

d139 1
a139 1
    LYstrncpy(temp, start, (end - start));
d150 3
d167 1
d174 8
d193 1
a193 1
	    CTrace((tfp, "...LYCookieJar_free domain %s\n", de->domain));
d204 1
a204 3
	    FREE(de->domain);
	    HTList_delete(de->cookie_list);
	    de->cookie_list = NULL;
d215 11
d227 1
a227 3
 *  Compare two hostnames as specified in Section 2 of:
 *   http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-state-man-mec-02.txt
 *	- AK & FM
d229 2
a230 2
static BOOLEAN host_matches(const char *A,
			    const char *B)
d232 1
a232 6
    /*
     * The following line will handle both numeric IP addresses and FQDNs.  Do
     * numeric addresses require special handling?
     */
    if (*B != '.' && !strcasecomp(A, B))
	return YES;
d234 11
a244 6
    /*
     * The following will pass a "dotted tail" match to "a.b.c.e" as described
     * in Section 2 of draft-ietf-http-state-man-mec-10.txt.
     */
    if (*B == '.' && B[1] != '\0' && B[1] != '.' && *A != '.') {
	int diff = (int) (strlen(A) - strlen(B));
d246 5
a250 3
	if (diff > 0) {
	    if (!strcasecomp((A + diff), B))
		return YES;
d253 1
a253 1
    return NO;
d308 1
a308 1
	if (strncmp(a, b, (unsigned) len_a) != 0) {
d328 1
d331 1
a331 1
	&& *name != '\0') {
d334 1
a334 1
	    if (de != NULL && de->domain != NULL) {
d336 3
a338 2
			"...test_domain_entry(%s) bv:%u, invcheck_bv:%u\n",
			de->domain,
d341 1
a341 1
		if (!strcasecomp(name, de->domain)) {
d355 6
d420 1
d422 1
a422 1
	    break;		/* will prompt later if we get that far */
d441 1
a441 1
	if (strchr(hostname, '.') == NULL) {
d449 1
d455 12
d468 3
a470 2
	if (co->domain[0] != '.' || co->domain[1] == '\0') {
	    CTrace((tfp, "store_cookie: Rejecting domain '%s'.\n", co->domain));
d474 2
a475 3
	ptr = strchr((co->domain + 1), '.');
	if (ptr == NULL || ptr[1] == '\0') {
	    CTrace((tfp, "store_cookie: Rejecting domain '%s'.\n", co->domain));
d484 1
a484 1
	if (!host_matches(hostname, co->domain)) {
d487 1
a487 1
		    co->domain, hostname));
d493 1
d503 1
a503 1
	if (strchr(hostname, '.') < ptr) {
d538 1
a538 1
		       co->domain,
d543 1
a543 1
			co->domain,
d573 3
d580 1
d607 1
a607 1
		   !strcasecomp(co->domain, c2->domain) &&
d717 1
a717 1
				 BOOL secure)
d719 1
a719 1
    HTList *hl = sublist, *next = NULL;
a721 1
    int len = 0;
d725 1
a725 1
    while (hl) {
a726 1
	next = hl->next;
d728 6
a733 2
	if ((co) &&		/* speed-up host_matches() and limit trace output */
	    (LYstrstr(hostname, co->domain) != NULL)) {
d740 2
a741 2
		    (co->domain ? co->domain : "(no domain)"),
		    host_matches(hostname, co->domain),
d753 1
a753 1
	if (((co) && (co->flags & COOKIE_FLAG_EXPIRES_SET)) &&
a756 1
	    co = NULL;
d758 1
d764 3
a766 2
	if (((co != NULL) &&
	     host_matches(hostname, co->domain)) &&
a773 1
		hl = next;
a781 1
		hl = next;
a794 1
		    len += (int) strlen(header);
a821 1
		/*    len = 0; */
a831 1
		len++;
a835 1
		len++;
a836 1
	    len += (int) (strlen(co->name) + strlen(co->value) + 1);
d844 1
a844 7
		    /*
		     * Append the path attribute.  - FM
		     */
		    StrAllocCat(header, "; $Path=\"");
		    StrAllocCat(header, co->path);
		    StrAllocCat(header, "\"");
		    len += (int) (strlen(co->path) + 10);
d847 1
a847 7
		    /*
		     * Append the port attribute.  - FM
		     */
		    StrAllocCat(header, "; $Port=\"");
		    StrAllocCat(header, co->PortList);
		    StrAllocCat(header, "\"");
		    len += (int) (strlen(co->PortList) + 10);
d850 1
a850 7
		    /*
		     * Append the domain attribute.  - FM
		     */
		    StrAllocCat(header, "; $Domain=\"");
		    StrAllocCat(header, co->domain);
		    StrAllocCat(header, "\"");
		    len += (int) (strlen(co->domain) + 12);
a853 1
	hl = next;
d869 1
a869 1
	int value_len = (value_end - value_start);
d878 1
a878 1
	LYstrncpy(value, value_start, value_len);
d902 3
a904 1
    flags &= ~FLAGS_KNOWN_ATTR;
d985 1
a985 1
		char *ptr = strchr(value, '.');
d996 1
a996 2
			StrAllocCopy(cur_cookie->domain, ".");
			StrAllocCat(cur_cookie->domain, value);
d1008 1
d1063 1
a1063 1
	    int temp = strtol(value, NULL, 10);
d1076 1
a1076 1
	    int temp = strtol(value, NULL, 10);
d1084 1
a1084 1
			CAST_time_t(cur_cookie->expires),
d1105 1
a1105 1
			    CAST_time_t(cur_cookie->expires),
d1148 1
a1148 3
     * retained.  We only accept up to 50 cookies from the header, and only if
     * a cookie's values do not exceed the 4096 byte limit on overall size.  -
     * FM
d1161 1
a1161 1
	attr_start = attr_end = value_start = value_end = NULL;
d1347 1
a1347 1
					  (attr_end - attr_start),
d1402 1
a1402 1
		cookie_len += (int) strlen(cur_cookie->domain);
d1408 1
d1460 1
a1460 1
	attr_start = attr_end = value_start = value_end = NULL;
d1642 1
a1642 1
					  (attr_end - attr_start),
d1695 1
a1695 1
		cookie_len += (int) strlen(cur_cookie->domain);
d1702 1
d1746 1
a1746 1
		    CAST_time_t(co->expires),
d1782 1
a1782 1
	(ptr = strchr(hostname, ':')) != NULL) {
d1792 19
a1810 6
    if (((path = HTParse(address, "",
			 PARSE_PATH | PARSE_PUNCTUATION)) != NULL) &&
	(ptr = strrchr(path, '/')) != NULL) {
	if (ptr == path) {
	    *(ptr + 1) = '\0';	/* Leave a single '/' alone */
	} else {
d1814 1
d1861 1
a1861 1
			BOOL secure)
d1893 1
a1893 3
		FREE(de->domain);
		HTList_delete(de->cookie_list);
		de->cookie_list = NULL;
d1977 1
a1977 1
	    LYstrncpy(tok_values[tok_loop].s,
d2000 1
d2047 1
a2047 1
	if (domain[0] == '.')
d2120 4
a2123 2
	    CTrace((tfp, "LYStoreCookies: %" PRI_time_t " cf %" PRI_time_t " ",
		    CAST_time_t(now), CAST_time_t(co->expires)));
d2145 2
a2146 2
		    de->domain,
		    (de->domain[0] == '.') ? "TRUE" : "FALSE",
d2148 2
a2149 2
		    co->flags & COOKIE_FLAG_SECURE ? "TRUE" : "FALSE",
		    CAST_time_t(co->expires), co->name,
d2154 1
a2154 1
	    CTrace((tfp, "STORED\n"));
d2164 21
d2293 1
a2293 3
			    FREE(de->domain);
			    HTList_delete(de->cookie_list);
			    de->cookie_list = NULL;
d2332 1
a2332 1
			HTUserMsg2(ALWAYS_ALLOWING_COOKIES, de->domain);
d2349 1
a2349 3
			    FREE(de->domain);
			    HTList_delete(de->cookie_list);
			    de->cookie_list = NULL;
d2384 1
a2384 3
			    FREE(de->domain);
			    HTList_delete(de->cookie_list);
			    de->cookie_list = NULL;
d2398 1
a2398 1
			HTUserMsg2(PROMPTING_TO_ALLOW_COOKIES, de->domain);
d2406 1
a2406 1
			HTUserMsg2(NEVER_ALLOWING_COOKIES, de->domain);
d2457 1
a2457 4
    HTSprintf0(&buf,
	       "<html>\n<head>\n<title>%s</title>\n</head>\n<body>\n",
	       COOKIE_JAR_TITLE);
    PUTS(buf);
d2464 1
a2464 1
    HTSprintf0(&buf, "<note>%s\n", ACTIVATE_TO_GOBBLE);
d2466 1
a2466 1
    HTSprintf0(&buf, "%s</note>\n", OR_CHANGE_ALLOW);
d2482 3
a2484 2
	HTSprintf0(&buf, "<dt>%s<dd><a href=\"%s//%s/\">Domain=%s</a>\n",
		   de->domain, STR_LYNXCOOKIE, de->domain, de->domain);
d2522 3
d2529 2
a2530 2
	    HTSprintf0(&buf, "<dd><a href=\"%s//%s/%s\">%s=%s</a>\n",
		       STR_LYNXCOOKIE, de->domain, co->lynxID, name, value);
d2551 1
a2551 1
		       "<dd>Path=%s\n<dd>Port: %d Secure: %s Discard: %s\n",
d2562 1
a2562 1
		HTSprintf0(&buf, "<dD>PortList=\"%s\"\n", co->PortList);
d2575 1
a2575 1
			   "<dd>CommentURL: <a href=\"%s\">%s</a>\n",
d2589 1
a2589 1
		HTSprintf0(&buf, "<dd>Comment: %s\n", comment);
d2607 1
a2607 1
	HTSprintf0(&buf, "</dt>\n");
d2675 2
d2702 1
d2765 1
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 4
a4 1
/*			       Lynx Cookie Support		   LYCookie.c
d79 2
d134 1
a134 1
    temp = typecallocn(char, (end - start) + 1);
d148 1
a148 1
    HTSprintf0(&(p->lynxID), "%p", p);
d176 1
a176 1
    CTRACE((tfp, "LYCookieJar_free\n"));
d179 1
a179 1
	    CTRACE((tfp, "...LYCookieJar_free domain %s\n", de->domain));
d223 1
a223 1
	int diff = (strlen(A) - strlen(B));
d266 1
a266 1
    int len = strlen(a);
d285 1
a285 1
	if (strncmp(a, b, len_a) != 0) {
d311 5
a315 6
		CTRACE2(TRACE_CFG,
			(tfp,
			 "...test_domain_entry(%s) bv:%u, invcheck_bv:%u\n",
			 de->domain,
			 de->bv,
			 de->invcheck_bv));
d323 1
a323 1
    CTRACE((tfp, "find_domain_entry(%s) bv:%d, invcheck_bv:%d\n",
d393 1
a393 1
	    CTRACE((tfp,
d410 1
a410 1
	    CTRACE((tfp, "store_cookie: Rejecting because '%s' has no dot.\n",
d424 1
a424 1
	    CTRACE((tfp, "store_cookie: Rejecting domain '%s'.\n", co->domain));
d430 1
a430 1
	    CTRACE((tfp, "store_cookie: Rejecting domain '%s'.\n", co->domain));
d440 1
a440 1
	    CTRACE((tfp,
d470 1
a470 1
		CTRACE((tfp,
d495 1
a495 1
		CTRACE((tfp,
d509 1
a509 1
		CTRACE((tfp,
d598 1
a598 1
	CTRACE((tfp,
d607 1
a607 1
	CTRACE((tfp,
d621 1
a621 1
	CTRACE((tfp, "store_cookie: Value is NULL! Not storing cookie.\n"));
d682 2
a683 2
	    CTRACE((tfp, "Checking cookie %p %s=%s\n",
		    hl,
d686 1
a686 1
	    CTRACE((tfp, "\t%s %s %d %s %s %d%s\n",
d744 1
a744 1
		    len += strlen(header);
d790 1
a790 1
	    len += (strlen(co->name) + strlen(co->value) + 1);
d804 1
a804 1
		    len += (strlen(co->path) + 10);
d813 1
a813 1
		    len += (strlen(co->PortList) + 10);
d822 1
a822 1
		    len += (strlen(co->domain) + 12);
d847 1
a847 1
	value = typecallocn(char, value_len + 1);
d910 1
a910 1
	    *cookie_len += strlen(cur_cookie->comment);
d932 1
a932 1
		*cookie_len += strlen(cur_cookie->commentURL);
d934 1
a934 1
		CTRACE((tfp,
d947 1
a947 1
	    *cookie_len -= strlen(cur_cookie->domain);
d964 1
a964 1
			CTRACE((tfp,
d978 1
a978 1
	    *cookie_len += strlen(cur_cookie->domain);
d988 1
a988 1
	    *cookie_len -= strlen(cur_cookie->path);
d990 1
a990 1
	    *cookie_len += (cur_cookie->pathlen = strlen(cur_cookie->path));
d1011 1
a1011 1
		    *cookie_len += strlen(cur_cookie->PortList);
d1023 1
a1023 1
		*cookie_len += strlen(cur_cookie->PortList);
d1054 2
a1055 2
		CTRACE((tfp, "LYSetCookie: expires %ld, %s",
			(long) cur_cookie->expires,
d1075 2
a1076 2
		    CTRACE((tfp, "LYSetCookie: expires %ld, %s",
			    (long) cur_cookie->expires,
d1131 1
a1131 1
	CTRACE((tfp, "LYProcessSetCookies: Using Set-Cookie2 header.\n"));
d1348 1
a1348 1
		    CTRACE((tfp,
d1354 1
a1354 1
		    CTRACE((tfp,
d1371 1
a1371 1
		cookie_len += strlen(cur_cookie->name);
d1373 1
a1373 1
		cookie_len += strlen(cur_cookie->value);
d1375 1
a1375 1
		cookie_len += strlen(cur_cookie->domain);
d1377 1
a1377 1
		cookie_len += (cur_cookie->pathlen = strlen(cur_cookie->path));
d1398 1
a1398 1
	CTRACE((tfp, "LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
d1401 1
a1401 1
	CTRACE((tfp, "                     due to excessive %s%s%s\n",
d1411 1
a1411 1
	CTRACE((tfp, "LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
d1414 1
a1414 1
	CTRACE((tfp, "                     due to invalid port!\n"));
d1429 1
a1429 1
	CTRACE((tfp, "LYProcessSetCookies: Using Set-Cookie header.\n"));
d1645 1
a1645 1
		    CTRACE((tfp,
d1651 1
a1651 1
		    CTRACE((tfp,
d1663 1
a1663 1
		cookie_len += strlen(cur_cookie->name);
d1665 1
a1665 1
		cookie_len += strlen(cur_cookie->value);
d1667 1
a1667 1
		cookie_len += strlen(cur_cookie->domain);
d1669 1
a1669 1
		cookie_len += (cur_cookie->pathlen = strlen(cur_cookie->path));
d1693 1
a1693 1
	CTRACE((tfp, "LYProcessSetCookies: Rejecting Set-Cookie: %s=%s\n",
d1696 1
a1696 1
	CTRACE((tfp, "                     due to excessive %s%s%s\n",
d1712 1
a1712 1
	CTRACE((tfp, "LYProcessSetCookie: attr=value pair: '%s=%s'\n",
d1716 2
a1717 2
	    CTRACE((tfp, "                    expires: %ld, %s\n",
		    (long) co->expires,
d1724 1
a1724 1
	    CTRACE((tfp, "                    Forced the 'secure' flag on.\n"));
d1780 1
a1780 1
    CTRACE((tfp, "LYSetCookie called with host '%s', path '%s',\n",
d1784 1
a1784 1
	CTRACE((tfp, "    and Set-Cookie: '%s'\n", SetCookie));
d1787 1
a1787 1
	CTRACE((tfp, "    and Set-Cookie2: '%s'\n", SetCookie2));
d1790 1
a1790 1
	CTRACE((tfp, "    Ignoring this Set-Cookie/Set-Cookie2 request.\n"));
d1824 1
a1824 1
    CTRACE((tfp, "LYCookie: Searching for '%s:%d', '%s'.\n",
d1868 1
a1868 1
/* rjp - experiment cookie loading */
d1897 1
a1897 1
    CTRACE((tfp, "LYLoadCookies: reading cookies from %s\n", cookie_file));
d1930 1
a1930 1
	CTRACE((tfp, "LYLoadCookies: tokenising %s\n", buf));
d1934 1
a1934 1
	    CTRACE((tfp, "\t%d:[%03d]:[%s]\n",
d1938 1
a1938 1
		      tok_values[tok_loop].n);
d1950 1
a1950 1
	    CTRACE((tfp,
d1956 1
a1956 3
	CTRACE((tfp, "expires:\t%s\n", ctime(&expires)));
/*	CTRACE((tfp, "%s\t%s\t%s\t%s\t%ld\t%s\t%s\tREADCOOKIE\n", */
/*	    domain, what, path, secure, (long) expires, name, value)); */
d1961 1
a1961 1
	if (value && value[0] == '"' &&
d1970 1
a1970 1
	moo->pathlen = strlen(moo->path);
d2022 7
a2028 1
/* rjp - experimental persistent cookie support */
d2034 1
a2034 1
    FILE *cookie_handle;
d2037 1
a2037 1
    if (!strcmp(cookie_file, "/dev/null")) {
d2053 6
a2058 1
    CTRACE((tfp, "LYStoreCookies: save cookies to %s on exit\n", cookie_file));
a2059 3
    cookie_handle = LYNewTxtFile(cookie_file);
    if (cookie_handle == NULL)
	return;
d2078 2
a2079 2
	    CTRACE((tfp, "LYStoreCookies: %ld cf %ld ",
		    (long) now, (long) co->expires));
d2082 1
a2082 1
		CTRACE((tfp, "not stored - DISCARD\n"));
d2085 1
a2085 1
		CTRACE((tfp, "not stored - no expiration time\n"));
d2088 1
a2088 1
		CTRACE((tfp, "not stored - EXPIRED\n"));
d2092 9
a2100 1
	    fprintf(cookie_handle, "%s\t%s\t%s\t%s\t%ld\t%s\t%s%s%s\n",
d2105 1
a2105 1
		    (long) co->expires, co->name,
d2110 1
a2110 1
	    CTRACE((tfp, "STORED\n"));
d2113 4
a2116 3
    LYCloseOutput(cookie_handle);

    HTSYS_purge(cookie_file);
d2396 1
a2396 1
#define PUTS(buf)    (*target->isa->put_block)(target, buf, strlen(buf))
a2567 1

d2663 1
a2663 1
	CTRACE((tfp,
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d2 22
a23 22
**			       ===================
**
**	Author: AMK	A.M. Kuchling (amk@@magnet.com)	12/25/96
**
**	Incorporated with mods by FM			01/16/97
**
**  Based on:
**	http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-state-mgmt-05.txt
**
**	Updated for:
**   http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-state-man-mec-02.txt
**		- FM					1997-07-09
**
**	Updated for:
**   ftp://ds.internic.net/internet-drafts/draft-ietf-http-state-man-mec-03.txt
**		- FM					1997-08-02
**
**	Partially checked against:
**   http://www.ietf.org/internet-drafts/draft-ietf-http-state-man-mec-10.txt
**		- kw					1998-12-11
**
**  TO DO: (roughly in order of decreasing priority)
a72 4
#define max_cookies_domain 50
#define max_cookies_global 500
#define max_cookies_buffer 4096

d77 11
a87 11
**  The first level of the cookie list is a list indexed by the domain
**  string; cookies with the same domain will be placed in the same
**  list.  Thus, finding the cookies that apply to a given URL is a
**  two-level scan; first we check each domain to see if it applies,
**  and if so, then we check the paths of all the cookies on that
**  list.  We keep a running total of cookies as we add or delete
**  them
*/
PRIVATE HTList *domain_list = NULL;
PRIVATE HTList *cookie_list = NULL;
PRIVATE int total_cookies = 0;
d90 14
a103 14
    char *lynxID;  /* Lynx cookie identifier */
    char *name;    /* Name of this cookie */
    char *value;   /* Value of this cookie */
    int version;   /* Cookie protocol version (=1) */
    char *comment; /* Comment to show to user */
    char *commentURL; /* URL for comment to show to user */
    char *domain;  /* Domain for which this cookie is valid */
    int port;	   /* Server port from which this cookie was given (usu. 80) */
    char *PortList;/* List of ports for which cookie can be sent */
    char *path;    /* Path prefix for which this cookie is valid */
    int pathlen;   /* Length of the path */
    int flags;	   /* Various flags */
    time_t expires;/* The time when this cookie expires */
    BOOL quoted;   /* Was a value quoted in the Set-Cookie header? */
d107 6
a112 6
#define COOKIE_FLAG_SECURE 1	   /* If set, cookie requires secure links */
#define COOKIE_FLAG_DISCARD 2	   /* If set, expire at end of session */
#define COOKIE_FLAG_EXPIRES_SET 4  /* If set, an expiry date was set */
#define COOKIE_FLAG_DOMAIN_SET 8   /* If set, an non-default domain was set */
#define COOKIE_FLAG_PATH_SET 16    /* If set, an non-default path was set */
#define COOKIE_FLAG_FROM_FILE 32  /* If set, this cookie was persistent */
d114 2
a115 3
struct _HTStream
{
  HTStreamClass * isa;
d118 3
a120 4
PRIVATE void MemAllocCopy ARGS3(
	char **,	dest,
	CONST char *,	start,
	CONST char *,	end)
d137 1
a137 1
PRIVATE cookie * newCookie NOARGS
d148 1
a148 2
PRIVATE void freeCookie ARGS1(
	cookie *,	co)
d164 1
a164 1
PRIVATE void LYCookieJar_free NOARGS
d199 6
a204 7
**  Compare two hostnames as specified in Section 2 of:
**   http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-state-man-mec-02.txt
**	- AK & FM
*/
PRIVATE BOOLEAN host_matches ARGS2(
	CONST char *,	A,
	CONST char *,	B)
d207 2
a208 2
     *	The following line will handle both numeric IP addresses and
     *	FQDNs.  Do numeric addresses require special handling?
d214 2
a215 2
     *	The following will pass a "dotted tail" match to "a.b.c.e"
     *	as described in Section 2 of draft-ietf-http-state-man-mec-10.txt.
d219 1
d229 6
a234 7
**  Compare the current port with a port list as specified in Section 4.3 of:
**   http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-state-man-mec-02.txt
**	- FM
*/
PRIVATE BOOLEAN port_matches ARGS2(
	int,		port,
	CONST char *,	list)
d236 1
a236 1
    CONST char *number = list;
d239 1
a239 1
	return(FALSE);
d243 1
a243 1
	    return(TRUE);
d253 1
a253 1
    return(FALSE);
d259 1
a259 1
PRIVATE int ignore_trailing_slash ARGS1(CONST char *, a)
d262 2
a263 1
    while (len > 1 && a[len-1] == '/')
d272 1
a272 1
PRIVATE BOOL is_prefix ARGS2(CONST char *, a, CONST char *, b)
d285 1
a285 1
	     && b[len_a] != '/') {
d287 1
a287 1
	     }
d296 1
a296 2
PRIVATE domain_entry * find_domain_entry ARGS1(
    CONST char *,	name)
d302 1
a302 1
     && *name != '\0') {
d304 1
a304 1
	    de = (domain_entry *)hl->object;
d307 5
a311 4
			(tfp, "...test_domain_entry(%s) bv:%d, invcheck_bv:%d\n",
			      de->domain,
			      de->bv,
			      de->invcheck_bv));
d320 3
a322 3
		 name,
		 de ? (int) de->bv : -1,
		 de ? (int) de->invcheck_bv : -1));
d327 4
a330 6
**  Store a cookie somewhere in the domain list. - AK & FM
*/
PRIVATE void store_cookie ARGS3(
	cookie *,	co,
	CONST char *,	hostname,
	CONST char *,	path)
d336 1
a336 1
    CONST char *ptr;
d340 1
d348 1
a348 1
     *	Ensure that the domain list exists.
d359 2
a360 2
     *	Look through domain_list to see if the cookie's domain
     *	is already listed.
d378 2
a379 1
					       : DEFAULT_INVCHECK_BV);
d389 3
a391 2
	    CTRACE((tfp, "store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
		   co->path, path));
d403 1
a403 1
	 *  The hostname does not contain a dot.
d413 5
a417 5
	 *  Section 4.3.2, condition 2: The value for the Domain attribute
	 *  contains no embedded dots or does not start with a dot.
	 *  (A dot is embedded if it's neither the first nor last character.)
	 *  Note that we added a lead dot ourselves if a domain attribute
	 *  value otherwise qualified. - FM
d432 2
a433 2
	 *  Section 4.3.2, condition 3: The value for the request-host does
	 *  not domain-match the Domain attribute.
d436 2
a437 1
	    CTRACE((tfp, "store_cookie: Rejecting domain '%s' for host '%s'.\n",
d444 3
a446 3
	 *  Section 4.3.2, condition 4: The request-host is an HDN (not IP
	 *  address) and has the form HD, where D is the value of the Domain
	 *  attribute, and H is a string that contains one or more dots.
d448 3
a450 3
	 *  If cookie checking for this domain is set to INVCHECK_LOOSE,
	 *  then we want to bypass this check.  The user should be queried
	 *  if set to INVCHECK_QUERY.
d455 2
a456 1
						   : DEFAULT_INVCHECK_BV);
d466 3
a468 2
		CTRACE((tfp, "store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
		       co->path, path));
d476 5
a480 5
     *  If we found reasons for issuing an invalid cookie confirmation
     *  prompt, do that now.  Rejection by the user here is the last
     *  chance to completely ignore this cookie; after it passes this
     *  hurdle, it may at least supersede a previous cookie (even if
     *  it finally gets rejected). - kw
d484 1
d491 2
a492 1
		CTRACE((tfp, "store_cookie: Rejecting domain '%s' for host '%s'.\n",
d505 3
a507 2
		CTRACE((tfp, "store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
		       co->path, path));
d524 1
a524 1
	de->invcheck_bv = DEFAULT_INVCHECK_BV; /* should this go here? */
d531 1
a531 1
     *	Loop over the cookie list, deleting expired and matching cookies.
d536 1
a536 1
	c2 = (cookie *)hl->object;
d539 1
a539 1
	 *  Check if this cookie has expired.
d549 3
a551 3
	/*
	 *  Check if this cookie matches the one we're inserting.
	 */
d564 13
a576 14
	     *  This comparison determines the (tentative) position
	     *  of the new cookie in the list such that it comes
	     *  before existing cookies with a less specific path,
	     *  but after existing cookies of equal (or greater)
	     *  path length.  Thus it should normally preserve
	     *  the order of new cookies with the same path as
	     *  they are received, although this is not required.
	     *  From RFC 2109 4.3.4:

   If multiple cookies satisfy the criteria above, they are ordered in
   the Cookie header such that those with more specific Path
   attributes precede those with less specific.  Ordering with respect
   to other attributes (e.g., Domain) is unspecified.

d584 1
a584 1
     *	Don't bother to add the cookie if it's already expired.
d590 3
a592 3
    /*
     *	Don't add the cookie if we're over the domain's limit. - FM
     */
d594 2
a595 1
	CTRACE((tfp, "store_cookie: Domain's cookie limit exceeded!  Rejecting cookie.\n"));
d599 3
a601 3
    /*
     *	Don't add the cookie if we're over the total cookie limit. - FM
     */
d603 2
a604 1
	CTRACE((tfp, "store_cookie: Total cookie limit exceeded!  Rejecting cookie.\n"));
d608 3
a610 3
    /*
     * Don't add the cookie if the value is NULL. - BJP
     */
d616 1
a616 1
    } else if (co->value == NULL) { /* should not happen - kw */
d621 4
a624 5
    /*
     *	If it's a replacement for a cookie that had not expired,
     *	and never allow has not been set, add it again without
     *	confirmation. - FM
     */
d629 11
a639 11
    /*
     *	Get confirmation if we need it, and add cookie
     *	if confirmed or 'allow' is set to always. - FM
     *
     *  Cookies read from file are accepted without confirmation
     *  prompting.  (Prompting may actually not be possible if
     *  LYLoadCookies is called before curses is setup.)  Maybe
     *  this should instead depend on LYSetCookies and/or
     *  LYCookieAcceptDomains and/or LYCookieRejectDomains and/or
     *  LYAcceptAllCookies and/or some other settings. -kw
     */
d655 9
a663 10
**  Scan a domain's cookie_list for any cookies we should
**  include in a Cookie: request header. - AK & FM
*/
PRIVATE char * scan_cookie_sublist ARGS6(
	char *,		hostname,
	char *,		path,
	int,		port,
	HTList *,	sublist,
	char *,		header,
	BOOL,		secure)
d673 1
a673 1
	co = (cookie *)hl->object;
d676 2
a677 3
       if ((co) && /* speed-up host_matches() and limit trace output */
	   (LYstrstr(hostname, co->domain) != NULL))
       {
d679 3
a681 3
			hl,
			(co->name ? co->name : "(no name)"),
			(co->value ? co->value : "(no value)")));
d683 10
a692 10
			hostname,
			(co->domain ? co->domain : "(no domain)"),
			host_matches(hostname, co->domain),
			path, co->path,
			(co->pathlen > 0)
			    ? !is_prefix(co->path, path)
			    : 0,
			(co->flags & COOKIE_FLAG_SECURE)
			    ? " secure"
			    : ""));
d695 1
a695 1
	 *  Check if this cookie has expired, and if so, delete it.
d706 1
a706 1
	 *  Check if we have a unexpired match, and handle if we do.
d712 3
a714 3
	     *	Skip if the secure flag is set and we don't have
	     *	a secure connection.  HTTP.c presently treats only
	     *	SSL connections as secure. - FM
d722 2
a723 2
	     *	Skip if we have a port list and the
	     *	current port is not listed. - FM
d731 1
a731 1
	     *	Start or append to the request header.
d736 2
a737 3
		     *	For Version 1 (or greater) cookies,
		     *	the version number goes before the
		     *	first cookie.
d744 3
a746 3
		 *  There's already cookie data there, so add
		 *  a separator (always use a semi-colon for
		 *  "backward compatibility"). - FM
d750 1
a750 1
		 *  Check if we should fold the header. - FM
d756 6
a761 8
		 *  HTTP/1.0 headers may be folded onto multiple lines
		 *  if each continuation line begins with a space or
		 *  horizontal tab.  All linear whitespace, including
		 *  folding, has the same semantics as SP.
		 *  [...]
		 *  However, folding of header lines is not expected by
		 *  some applications, and should not be generated by
		 *  HTTP/1.0 applications.
d763 1
a763 1
		 * This code was causing problems.  Let's not use it. -BJP
d773 1
a773 1
	     *	Include the cookie name=value pair.
d788 3
a790 4
	     *	For Version 1 (or greater) cookies, add
	     *	$PATH, $PORT and/or $DOMAIN attributes for
	     *	the cookie if they were specified via a
	     *	server reply header. - FM
d795 1
a795 1
		     *	Append the path attribute. - FM
d804 1
a804 1
		     *	Append the port attribute. - FM
d813 1
a813 1
		     *	Append the domain attribute. - FM
d825 1
a825 1
    return(header);
d832 2
a833 3
PRIVATE char *alloc_attr_value ARGS2(
	CONST char *,	value_start,
	CONST char *,	value_end)
d844 1
d858 9
a866 10
PRIVATE unsigned parse_attribute ARGS9(
	unsigned,	flags,
	cookie *,	cur_cookie,
	int *,		cookie_len,
	CONST char *,	attr_start,
	int,		attr_len,
	char *,		value,
	CONST char *,	address,
	char *,		hostname,
	int,		port)
d880 2
a881 2
	     *	If secure has a value, assume someone
	     *	misused it as cookie name. - FM
d893 2
a894 2
	     *	If discard has a value, assume someone
	     *	used it as a cookie name. - FM
d901 3
a903 3
	    /*
	     *	Don't process a repeat comment. - FM
	     */
d911 3
a913 3
	    /*
	     *	Don't process a repeat commentURL. - FM
	     */
d916 2
a917 3
	     *	We should get only absolute URLs as
	     *	values, but will resolve versus the
	     *	request's URL just in case. - FM
d923 1
a923 1
	     *	Accept only URLs for http or https servers. - FM
d930 3
a932 2
		CTRACE((tfp, "LYProcessSetCookies: Rejecting commentURL value '%s'\n",
			    cur_cookie->commentURL));
d939 3
a941 3
	    /*
	     *	Don't process a repeat domain. - FM
	     */
d945 4
a948 6
	     *	If the value does not have a lead dot,
	     *	but does have an embedded dot, and is
	     *	not an exact match to the hostname, nor
	     *	is a numeric IP address, add a lead dot.
	     *	Otherwise, use the value as is. - FM
	     *	(domains - case insensitive).
d953 1
d961 2
a962 2
       "LYProcessSetCookies: Adding lead dot for domain value '%s'\n",
				    value));
d980 3
a982 3
	    /*
	     *	Don't process a repeat path. - FM
	     */
d991 3
a993 3
	    /*
	     *	Don't process a repeat port. - FM
	     */
d996 1
d1015 1
a1015 1
	     *	Don't process a repeat port. - FM
d1026 3
a1028 3
	    /*
	     *	Don't process a repeat version. - FM
	     */
d1031 1
d1039 3
a1041 3
	    /*
	     *	Don't process a repeat max-age. - FM
	     */
d1044 1
d1047 1
a1047 1
		cur_cookie->expires = (time_t)0;
d1051 2
a1052 2
			    (long) cur_cookie->expires,
			    ctime(&cur_cookie->expires)));
d1058 5
a1062 6
	 *  Convert an 'expires' attribute value if we haven't
	 *  received a 'max-age'.  Note that 'expires' should not
	 *  be used in Version 1 cookies, but it might be used for
	 *  "backward compatibility", and, in turn, ill-informed
	 *  people surely would start using it instead of, rather
	 *  than in addition to, 'max-age'. - FM
d1066 1
a1066 1
	     !(cur_cookie->flags & COOKIE_FLAG_EXPIRES_SET)) {
d1072 2
a1073 2
				(long) cur_cookie->expires,
				ctime(&cur_cookie->expires)));
d1084 9
a1092 10
**  Process potentially concatenated Set-Cookie2 and/or Set-Cookie
**  headers. - FM
*/
PRIVATE void LYProcessSetCookies ARGS6(
	CONST char *,	SetCookie,
	CONST char *,	SetCookie2,
	CONST char *,	address,
	char *,		hostname,
	char *,		path,
	int,		port)
d1094 1
a1094 1
    CONST char *p, *attr_start, *attr_end, *value_start, *value_end;
d1102 2
a1103 2
    if (!(SetCookie && *SetCookie) &&
	!(SetCookie2 && *SetCookie2)) {
d1105 1
a1105 1
	 *  Yuk!  Garbage in, so nothing out. - FM
d1111 7
a1117 8
     *	If we have both Set-Cookie and Set-Cookie2 headers.
     *	process the Set-Cookie2 header.  Otherwise, process
     *	whichever of the two headers we do have.  Note that
     *	if more than one instance of a valued attribute for
     *	the same cookie is encountered, the value for the
     *	first instance is retained.  We only accept up to 50
     *	cookies from the header, and only if a cookie's values
     *	do not exceed the 4096 byte limit on overall size. - FM
d1122 2
a1123 2
     *	Process the Set-Cookie2 header, if present and not zero-length,
     *	adding each cookie to the CombinedCookies list. - FM
d1133 1
a1133 1
	 *  Get the attribute name.
d1143 7
a1149 8
	 *  Check for an '=' delimiter, or an 'expires' name followed
	 *  by white, since Netscape's bogus parser doesn't require
	 *  an '=' delimiter, and 'expires' attributes are being
	 *  encountered without them.  These shouldn't be in a
	 *  Set-Cookie2 header, but we'll assume it's an expires
	 *  attribute rather a cookie with that name, since the
	 *  attribute mistake rather than name mistake seems more
	 *  likely to be made by providers. - FM
d1152 1
a1152 1
	     !strncasecomp(attr_start, "Expires", 7)) {
d1154 1
a1154 1
	     *	Get the value string.
d1161 7
a1167 8
	     *	Hack alert!  We must handle Netscape-style cookies with
	     *		"Expires=Mon, 01-Jan-96 13:45:35 GMT" or
	     *		"Expires=Mon,  1 Jan 1996 13:45:35 GMT".
	     *	No quotes, but there are spaces.  Argh...
	     *	Anyway, we know it will have at least 3 space separators
	     *	within it, and two dashes or two more spaces, so this code
	     *	looks for a space after the 5th space separator or dash to
	     *	mark the end of the value. - FM
d1172 1
d1176 1
a1176 1
		     *	No alphabetic day field. - FM
d1181 1
a1181 1
		     *	Skip the alphabetic day field. - FM
d1202 6
a1207 7
	    /*
	     *	Hack Alert!  The port attribute can take a
	     *	comma separated list of numbers as a value,
	     *	and such values should be quoted, but if
	     *	not, make sure we don't treat a number in
	     *	the list as the start of a new cookie. - FM
	     */
d1212 1
a1212 1
		 *  The value starts as an unquoted number.
d1214 2
a1215 1
		CONST char *cp, *cp1;
d1241 1
a1241 1
		     *	Trim trailing spaces.
d1256 1
d1258 1
a1258 1
		 *  It looks like quoted string.
d1279 1
a1279 1
		 *  Otherwise, it's an unquoted string.
d1286 1
a1286 1
		 *  Trim trailing spaces.
d1301 1
a1301 1
	 *  Check for a separator character, and skip it.
d1307 1
a1307 1
	 *  Now, we can handle this attribute/value pair.
d1312 9
a1320 9
	    parse_flags = parse_attribute (parse_flags,
					   cur_cookie,
					   &cookie_len,
					   attr_start,
					   (attr_end - attr_start),
					   value,
					   address,
					   hostname,
					   port);
d1327 2
a1328 2
	      && value
	      && value_end >= value_start) {
d1330 2
a1331 2
		 *  If we've started a cookie, and it's not too big,
		 *  save it in the CombinedCookies list. - FM
d1334 2
a1335 2
		 && cur_cookie != NULL
		 && !(parse_flags & FLAGS_INVALID_PORT)) {
d1337 1
a1337 1
		     *	Assume version 1 if not set to that or higher. - FM
d1345 5
a1349 5
			"LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
				(cur_cookie->name ?
				 cur_cookie->name : "[no name]"),
				(cur_cookie->value ?
				 cur_cookie->value : "[no value]")));
d1351 3
a1353 3
			   (parse_flags & FLAGS_INVALID_PORT) ?
			   "                     due to excessive length!\n"
			 : "                     due to invalid port!\n"));
d1355 1
a1355 1
			NumCookies --;
d1361 1
a1361 1
		 *  Start a new cookie. - FM
d1383 2
a1384 2
     *	Add any final SetCookie2 cookie to the CombinedCookie list
     *	if we are within the length limit. - FM
d1387 2
a1388 2
     && cookie_len <= max_cookies_buffer
     && cur_cookie != NULL && !(parse_flags & FLAGS_INVALID_PORT)) {
d1395 2
a1396 2
		    (cur_cookie->name ? cur_cookie->name : "[no name]"),
		    (cur_cookie->value ? cur_cookie->value : "[no value]")));
d1398 6
a1403 6
		    (cookie_len > max_cookies_buffer ? "length" : ""),
		    (cookie_len > max_cookies_buffer &&
		     NumCookies > max_cookies_domain
			? " and "
			: ""),
		    (NumCookies > max_cookies_domain ? "number!\n" : "!\n")));
d1406 1
a1406 1
    } else if (cur_cookie != NULL) {			/* invalidport */
d1408 2
a1409 2
		    (cur_cookie->name ? cur_cookie->name : "[no name]"),
		    (cur_cookie->value ? cur_cookie->value : "[no value]")));
d1411 1
a1411 1
	NumCookies --;
d1417 2
a1418 2
     *	Process the Set-Cookie header, if no non-zero-length Set-Cookie2
     *	header was present. - FM
d1423 1
a1423 1
    p = ((SetCookie && !(SetCookie2 && *SetCookie2)) ? SetCookie : "");
d1431 1
a1431 1
	 *  Get the attribute name.
d1441 3
a1443 4
	 *  Check for an '=' delimiter, or an 'expires' name followed
	 *  by white, since Netscape's bogus parser doesn't require
	 *  an '=' delimiter, and 'expires' attributes are being
	 *  encountered without them. - FM
d1446 1
a1446 1
	     !strncasecomp(attr_start, "Expires", 7)) {
d1448 1
a1448 1
	     *	Get the value string.
d1455 7
a1461 8
	     *	Hack alert!  We must handle Netscape-style cookies with
	     *		"Expires=Mon, 01-Jan-96 13:45:35 GMT" or
	     *		"Expires=Mon,  1 Jan 1996 13:45:35 GMT".
	     *	No quotes, but there are spaces.  Argh...
	     *	Anyway, we know it will have at least 3 space separators
	     *	within it, and two dashes or two more spaces, so this code
	     *	looks for a space after the 5th space separator or dash to
	     *	mark the end of the value. - FM
d1466 1
d1470 1
a1470 1
		     *	No alphabetic day field. - FM
d1475 1
a1475 1
		     *	Skip the alphabetic day field. - FM
d1496 6
a1501 7
	    /*
	     *	Hack Alert!  The port attribute can take a
	     *	comma separated list of numbers as a value,
	     *	and such values should be quoted, but if
	     *	not, make sure we don't treat a number in
	     *	the list as the start of a new cookie. - FM
	     */
d1506 1
a1506 1
		 *  The value starts as an unquoted number.
d1508 2
a1509 1
		CONST char *cp, *cp1;
d1535 1
a1535 1
		     *	Trim trailing spaces.
d1550 1
d1552 1
a1552 1
		 *  It looks like quoted string.
d1573 1
a1573 1
		 *  Otherwise, it's an unquoted string.
d1580 1
a1580 1
		 *  Trim trailing spaces.
d1595 1
a1595 1
	 *  Check for a separator character, and skip it.
d1601 1
a1601 1
	 *  Now, we can handle this attribute/value pair.
d1606 9
a1614 9
	    parse_flags = parse_attribute (parse_flags,
					   cur_cookie,
					   &cookie_len,
					   attr_start,
					   (attr_end - attr_start),
					   value,
					   address,
					   hostname,
					   port);
d1621 2
a1622 2
	      && value
	      && value_end >= value_start) {
d1624 2
a1625 2
		 *  If we've started a cookie, and it's not too big,
		 *  save it in the CombinedCookies list. - FM
d1628 1
a1628 1
		 && cur_cookie != NULL) {
d1630 2
a1631 3
		     *	If we had a Set-Cookie2 header, make sure
		     *	the version is at least 1, and mark it for
		     *	quoting. - FM
d1641 8
a1648 6
		    CTRACE((tfp, "LYProcessSetCookies: Rejecting Set-Cookie: %s=%s\n",
				(cur_cookie->name ?
				 cur_cookie->name : "[no name]"),
				(cur_cookie->value ?
				 cur_cookie->value : "[no value]")));
		    CTRACE((tfp, "                     due to excessive length!\n"));
d1653 1
a1653 1
		 *  Start a new cookie. - FM
d1676 1
a1676 1
     *	Handle the final Set-Cookie cookie if within length limit. - FM
d1678 3
a1680 1
    if (NumCookies <= max_cookies_domain && cookie_len <= max_cookies_buffer && cur_cookie != NULL) {
d1690 2
a1691 2
		    (cur_cookie->name ? cur_cookie->name : "[no name]"),
		    (cur_cookie->value ? cur_cookie->value : "[no value]")));
d1693 5
a1697 3
		    (cookie_len > max_cookies_buffer ? "length" : ""),
		    (cookie_len > max_cookies_buffer && NumCookies > max_cookies_domain ? " and " : ""),
		    (NumCookies > max_cookies_domain ? "number!\n" : "!\n")));
d1703 2
a1704 2
     *	OK, now we can actually store any cookies
     *	in the CombinedCookies list. - FM
d1707 1
a1707 1
    while (NULL != (co = (cookie *)HTList_nextObject(cl))) {
d1709 2
a1710 2
			    (co->name ? co->name : "[no name]"),
			    (co->value ? co->value : "[no value]")));
d1712 3
a1714 3
		CTRACE((tfp, "                    expires: %ld, %s\n",
			    (long)co->expires,
			    ctime(&co->expires)));
d1731 7
a1737 8
**  Entry function for handling Set-Cookie: and/or Set-Cookie2:
**  reply headers.   They may have been concatenated as comma
**  separated lists in HTTP.c or HTMIME.c. - FM
*/
PUBLIC void LYSetCookie ARGS3(
	CONST char *,	SetCookie,
	CONST char *,	SetCookie2,
	CONST char *,	address)
d1744 3
a1746 3
     *	Get the hostname, port and path of the address, and report
     *	the Set-Cookie and/or Set-Cookie2 header(s) if trace mode is
     *	on, but set the cookie(s) only if LYSetCookies is TRUE. - FM
d1749 1
a1749 1
	(ptr = strchr(hostname, ':')) != NULL)	{
d1751 1
a1751 1
	 *  Replace default port number.
d1760 1
a1760 1
			 PARSE_PATH|PARSE_PUNCTUATION)) != NULL) &&
d1763 1
a1763 1
	    *(ptr+1) = '\0';	/* Leave a single '/' alone */
d1768 2
a1769 2
    if (!(SetCookie && *SetCookie) &&
	!(SetCookie2 && *SetCookie2)) {
d1771 2
a1772 3
	 *  Yuk, something must have gone wrong in
	 *  HTMIME.c or HTTP.c because both SetCookie
	 *  and SetCookie2 are NULL or zero-length. - FM
d1777 2
a1778 2
		NonNull(hostname),
		NonNull(path)));
d1790 1
a1790 1
     *	We're done if LYSetCookies is off or we have bad headers. - FM
d1799 1
a1799 1
     *	Process the header(s).
d1808 7
a1814 8
**  Entry function from creating a Cookie: request header
**  if needed. - AK & FM
*/
PUBLIC char * LYAddCookieHeader ARGS4(
	char *,		hostname,
	char *,		path,
	int,		port,
	BOOL,		secure)
d1821 3
a1823 3
		NONNULL(hostname),
		port,
		NONNULL(path)));
d1826 2
a1827 2
     *	Search the cookie_list elements in the domain_list
     *	for any cookies associated with the //hostname:port/path
d1830 1
a1830 1
	de = (domain_entry *)hl->object;
d1856 1
a1856 1
	return(header);
d1858 1
a1858 1
    return(NULL);
d1862 1
a1862 1
PRIVATE int number_of_file_cookies = 0;
d1865 1
a1865 2
PUBLIC void LYLoadCookies ARGS1 (
	char *,		cookie_file)
d1871 1
d1885 2
d1906 1
a1906 1
	number_of_file_cookies ++;
d1931 4
a1934 2
		tok_loop, tok_out - buf, tok_out));
	    LYstrncpy(tok_values[tok_loop].s, tok_out, tok_values[tok_loop].n);
d1946 2
a1947 1
	    CTRACE((tfp, "*** wrong format: not enough tokens, ignoring line!\n"));
d1960 4
a1963 4
	    value[1] && value[strlen(value)-1] == '"' &&
	    value[strlen(value)-2] != '\\') {
	    value[strlen(value)-1] = '\0';
	    StrAllocCopy(moo->value, value+1);
d1973 2
a1974 2
	 *			     expiration originally, otherwise
	 *			     it would not be in the file.
d1977 23
a1999 23
	 *			     only matters for sending version 1
	 *			     cookies; the cookies read from the
	 *			     file are currently treated all like
	 *			     version 0 (we don't set moo->version)
	 *			     so $Domain= and $Path= will normally
	 *			     not be sent to the server.  But if
	 *			     these cookies somehow get mixed with
	 *			     new version 1 cookies we may end up
	 *			     sending version 1 to the server, and
	 *			     in that case we should send $Domain
	 *			     and $Path.  The state-man-mec drafts
	 *			     and RFC 2109 say that $Domain and
	 *			     $Path SHOULD be omitted if they were
	 *			     not given explicitly, but not that
	 *			     they MUST be omitted.
	 *			     See 8.2 Cookie Spoofing in draft -10
	 *			     for a good reason to send them.
	 *			     However, an explicit domain should be
	 *			     now prefixed with a dot (unless it is
	 *			     for a single host), so we check for
	 *			     that.
	 *  COOKIE_FLAG_SECURE	     Should have "FALSE" for normal,
	 *			     otherwise set it.
d2002 1
a2002 1
			COOKIE_FLAG_PATH_SET;
d2017 1
a2017 1
    LYCloseInput (cookie_handle);
d2021 1
a2021 2
PUBLIC void LYStoreCookies ARGS1 (
	char *,		cookie_file)
d2027 1
a2027 1
    time_t now = time(NULL); /* system specific? - RP */
d2035 1
a2035 1
     *	Check whether we have something to do. - FM
d2047 3
a2049 2
    cookie_handle = LYNewTxtFile (cookie_file);
    if (cookie_handle == NULL) return;
d2051 1
a2051 1
	de = dl->object;
d2054 1
a2054 1
	     *	Fote says the first object is NULL.  Go with that.
d2059 1
a2059 1
	 *  Show the domain's cookies. - FM
d2063 1
a2063 1
	     *	First object is always NULL. - FM
d2065 1
a2065 1
	    if ((co = (cookie *)cl->object) == NULL)
d2069 1
a2069 1
		   (long) now, (long) co->expires));
d2102 21
a2122 22
**	---------------
**
**  Lists all cookies by domain, and allows deletions of
**  individual cookies or entire domains, and changes of
**  'allow' settings.  The list is invoked via the COOKIE_JAR
**  command (Ctrl-K), and deletions or changes of 'allow'
**  settings are done by activating links in that list.
**  The procedure uses a LYNXCOOKIE: internal URL scheme.
**
**  Semantics:
**	LYNXCOOKIE:/			Create and load the Cookie Jar Page.
**	LYNXCOOKIE://domain		Manipulate the domain.
**	LYNXCOOKIE://domain/lynxID	Delete cookie with lynxID in domain.
**
**	New functions can be added as extensions to the path, and/or by
**	assigning meanings to ;parameters, a ?searchpart, and/or #fragments.
*/
PRIVATE int LYHandleCookies ARGS4 (
	CONST char *,		arg,
	HTParentAnchor *,	anAnchor,
	HTFormat,		format_out,
	HTStream*,		sink)
d2137 1
a2137 1
     *	Check whether we have something to do. - FM
d2143 1
a2143 1
	return(HT_NO_DATA);
d2147 3
a2149 3
     *	If there's a domain string in the "host" field of the
     *	LYNXCOOKIE: URL, this is a request to delete something
     *	or change and 'allow' setting. - FM
d2156 3
a2158 3
	     *	If there is a path string (not just a slash) in the
	     *	LYNXCOOKIE: URL, that's a cookie's lynxID and this
	     *	is a request to delete it from the Cookie Jar. - FM
d2169 1
a2169 1
	 *  Seek the domain in the domain_list structure. - FM
d2174 1
a2174 2
	     *  We found the domain.  Check
	     *  whether a lynxID is present. - FM
d2178 2
a2179 2
		 *	Seek and delete the cookie with this lynxID
		 *	in the domain's cookie list. - FM
d2182 1
a2182 1
		    if ((co = (cookie *)cl->object) == NULL)
d2184 1
a2184 1
			 *	First object is always empty. - FM
d2189 1
a2189 2
			 *	We found the cookie.
			 *	Delete it if confirmed. - FM
d2191 1
a2191 2
			if (HTConfirm(DELETE_COOKIE_CONFIRMATION) == FALSE)
			{
d2194 1
a2194 1
			    return(HT_NO_DATA);
d2204 4
a2207 4
			     *  No more cookies in this domain, no
			     *  default accept/reject choice was set
			     *  by the user, and got confirmation on
			     *  deleting the domain, so do it. - FM
d2244 1
a2244 1
		    switch(ch) {
d2251 1
a2251 1
			return(HT_NO_DATA);
d2259 1
a2259 1
			return(HT_NO_DATA);
d2276 1
a2276 1
Delete_all_cookies_in_domain:
d2283 1
a2283 1
			    co = cl->object;
d2299 1
a2299 1
			    return(HT_NO_DATA);
d2321 1
a2321 1
			return(HT_NO_DATA);
d2332 1
a2332 1
			return(HT_NO_DATA);
d2353 1
a2353 1
	return(HT_NO_DATA);
d2367 1
a2367 1
		HTAtom_name(format_in), HTAtom_name(format_out));
d2370 1
a2370 1
	return(HT_NOT_LOADED);
d2379 3
a2381 3

    HTSprintf0(&buf, "<html>\n<head>\n<title>%s</title>\n</head>\n<body>\n",
		 COOKIE_JAR_TITLE);
d2384 3
a2386 3
	LYNX_NAME, LYNX_VERSION,
	HELP_ON_SEGMENT,
	helpfilepath, COOKIE_JAR_HELP, COOKIE_JAR_TITLE);
d2397 1
a2397 1
	de = dl->object;
d2400 1
a2400 1
	     *	First object always is NULL. - FM
d2405 1
a2405 1
	 *  Show the domain link and 'allow' setting. - FM
d2408 1
a2408 1
		      de->domain, STR_LYNXCOOKIE, de->domain, de->domain);
d2426 1
a2426 1
	 *  Show the domain's cookies. - FM
d2429 1
a2429 1
	    if ((co = (cookie *)cl->object) == NULL)
d2431 1
a2431 1
		 *  First object is always NULL. - FM
d2436 1
a2436 1
	     *	Show the name=value pair. - FM
d2451 1
a2451 1
			 STR_LYNXCOOKIE, de->domain, co->lynxID, name, value);
d2457 2
a2458 1
		HTSprintf0(&buf, "%s\n", gettext("(from a previous session)"));
d2463 1
a2463 1
	     *	Show the path, port, secure and discard setting. - FM
d2471 5
a2475 4
	    HTSprintf0(&buf, "<dd>Path=%s\n<dd>Port: %d Secure: %s Discard: %s\n",
			 path, co->port,
			 ((co->flags & COOKIE_FLAG_SECURE) ? "YES" : "NO"),
			 ((co->flags & COOKIE_FLAG_DISCARD) ? "YES" : "NO"));
d2480 1
a2480 1
	     *	Show the list of acceptable ports, if present. - FM
d2488 1
a2488 1
	     *	Show the commentURL, if we have one. - FM
d2496 3
a2498 3
			"<dd>CommentURL: <a href=\"%s\">%s</a>\n",
			Address,
			Title);
d2505 1
a2505 1
	     *	Show the comment, if we have one. - FM
d2516 1
a2516 1
	     *	Show the Maximum Gobble Date. - FM
d2519 3
a2521 3
			 gettext("Maximum Gobble Date:"),
			 ((co->flags & COOKIE_FLAG_EXPIRES_SET)
					    ?
d2523 3
a2525 3
			 ((co->flags & COOKIE_FLAG_EXPIRES_SET)
					    ?
					 "" : "\n"));
d2535 2
a2536 2
     *	Free the target to complete loading of the
     *	Cookie Jar Page, and report a successful load. - FM
d2538 1
a2538 1
    (*target->isa->_free)(target);
d2540 1
a2540 1
    return(HT_LOADED);
a2542 1

d2544 5
a2548 5
**      ----------------------
**      All purpose function to handle setting domain flags for a
**      comma-delimited list of domains.  cookie_domain_flags handles
**      invcheck behavior, as well as accept/reject behavior. - BJP
*/
d2550 2
a2551 3
PRIVATE void cookie_domain_flag_set ARGS2(
	char *,		domainstr,
	int,		flag)
d2595 1
a2595 1
		    outofmem(__FILE__, "cookie_domain_flag_set");
d2600 19
a2618 13
	    switch(flag) {
	    case (FLAG_ACCEPT_ALWAYS):	de->invcheck_bv = DEFAULT_INVCHECK_BV;
					break;
	    case (FLAG_REJECT_ALWAYS):	de->invcheck_bv = DEFAULT_INVCHECK_BV;
					break;
	    case (FLAG_QUERY_USER):	de->invcheck_bv = DEFAULT_INVCHECK_BV;
					break;
	    case (FLAG_INVCHECK_QUERY): de->bv = QUERY_USER;
					break;
	    case (FLAG_INVCHECK_STRICT): de->bv = QUERY_USER;
					break;
	    case (FLAG_INVCHECK_LOOSE): de->bv = QUERY_USER;
					break;
d2625 19
a2643 13
	switch(flag) {
	case (FLAG_ACCEPT_ALWAYS):	de->bv = ACCEPT_ALWAYS;
					break;
	case (FLAG_REJECT_ALWAYS):	de->bv = REJECT_ALWAYS;
					break;
	case (FLAG_QUERY_USER):		de->bv = QUERY_USER;
					break;
	case (FLAG_INVCHECK_QUERY):	de->invcheck_bv = INVCHECK_QUERY;
					break;
	case (FLAG_INVCHECK_STRICT):    de->invcheck_bv = INVCHECK_STRICT;
					break;
	case (FLAG_INVCHECK_LOOSE):	de->invcheck_bv = INVCHECK_LOOSE;
					break;
d2645 3
a2647 2
	CTRACE((tfp, "cookie_domain_flag_set (%s, bv=%d, invcheck_bv=%d)\n",
		     strsmall, de->bv, de->invcheck_bv));
d2661 1
a2661 1
PUBLIC void LYConfigCookies NOARGS
d2663 1
a2663 1
    static CONST struct {
d2668 1
d2679 2
d2700 1
a2700 1
GLOBALDEF (HTProtocol,LYLynxCookies,_LYCOOKIE_C_GLOBALDEF_1_INIT);
d2702 2
a2703 1
GLOBALDEF PUBLIC HTProtocol LYLynxCookies = {"LYNXCOOKIE",LYHandleCookies,0};
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d178 1
d181 1
d301 33
d371 2
a372 13
    for (hl = domain_list; hl != NULL; hl = hl->next) {
	de = (domain_entry *)hl->object;
	if ((de != NULL && de->domain != NULL) &&
	    !strcasecomp(co->domain, de->domain)) {
		cookie_list = de->cookie_list;
		break;
	}
    }

    if(hl == NULL) {
	de = NULL;
	cookie_list = NULL;
    }
d386 1
a386 1
	    				       : DEFAULT_INVCHECK_BV);
d402 1
d426 1
a426 2
	    CTRACE((tfp, "store_cookie: Rejecting domain '%s'.\n",
		    co->domain));
d432 1
a432 2
	    CTRACE((tfp, "store_cookie: Rejecting domain '%s'.\n",
		    co->domain));
d492 1
a492 1
	    if (!HTConfirmDefault(msg, NO)) {
d494 2
a495 2
					co->domain,
					hostname));
d505 1
a505 1
	    if (!HTConfirmDefault(msg, NO)) {
d516 1
a516 1
    if (hl == NULL) {
d518 1
a518 1
	 *	Domain not found; add a new entry for this domain.
d523 1
a523 15
#if 0	/* was: ifdef EXP_PERSISTENT_COOKIES */
	/*
	 * The default behavior for this new domain could be set
	 * differently if the cookie comes from a file, as the
	 * code had it originally, but there doesn't seem to be
	 * a good reason for it any more; setting more permissive
	 * behavior for individual domains is now possible via
	 * configuration options. - kw
	 */
	if (persistent_cookies
	 && (co->flags & COOKIE_FLAG_FROM_FILE))
	    de->bv = ACCEPT_ALWAYS; /* ?? */
	else
#endif
	    de->bv = QUERY_USER;
d663 1
a663 1
	char *, 	header,
d835 255
d1097 2
a1098 2
	char *, 	hostname,
	char *, 	path,
d1104 1
a1104 1
    int length = 0, url_type = 0;
a1105 1
    BOOL MaxAgeAttrSet = FALSE;
d1107 1
a1107 1
    BOOLEAN invalidport = FALSE;
d1133 1
a1133 1
    p = (SetCookie2 ? SetCookie2 : "");
d1318 1
a1318 225
	    int len = (attr_end - attr_start);
	    BOOLEAN known_attr = NO;
	    char *value = NULL;

	    if (value_start && value_end >= value_start) {
		/*
		 * Presence of value is now needed (indicated normally by '=')
		 * to start a cookie, but it can now be an empty string.
		 * - kw 1999-06-24
		 */
		int value_len = (value_end - value_start);

		if (value_len > max_cookies_buffer) {
		    value_len = max_cookies_buffer;
		}
		value = typecallocn(char, value_len + 1);
		if (value == NULL)
		    outofmem(__FILE__, "LYProcessSetCookies");
		LYstrncpy(value, value_start, value_len);
	    }
	    if (len == 6 && !strncasecomp(attr_start, "secure", 6)) {
		if (value == NULL) {
		    known_attr = YES;
		    if (cur_cookie != NULL) {
			cur_cookie->flags |= COOKIE_FLAG_SECURE;
		    }
		} else {
		    /*
		     *	If secure has a value, assume someone
		     *	misused it as cookie name. - FM
		     */
		    known_attr = NO;
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "discard", 7)) {
		if (value == NULL) {
		    known_attr = YES;
		    if (cur_cookie != NULL) {
			cur_cookie->flags |= COOKIE_FLAG_DISCARD;
		    }
		} else {
		    /*
		     *	If discard has a value, assume someone
		     *	used it as a cookie name. - FM
		     */
		    known_attr = NO;
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "comment", 7)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat comment. - FM
		     */
		    cur_cookie->comment == NULL) {
		    StrAllocCopy(cur_cookie->comment, value);
		    length += strlen(cur_cookie->comment);
		}
	    } else if (len == 10 && !strncasecomp(attr_start,
						  "commentURL", 10)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat commentURL. - FM
		     */
		    cur_cookie->commentURL == NULL) {
		    /*
		     *	We should get only absolute URLs as
		     *	values, but will resolve versus the
		     *	request's URL just in case. - FM
		     */
		    cur_cookie->commentURL = HTParse(value,
						     address,
						     PARSE_ALL);
		    /*
		     *	Accept only URLs for http or https servers. - FM
		     */
		    if ((url_type = is_url(cur_cookie->commentURL)) &&
			(url_type == HTTP_URL_TYPE ||
			 url_type == HTTPS_URL_TYPE)) {
			length += strlen(cur_cookie->commentURL);
		    } else {
			CTRACE((tfp, "LYProcessSetCookies: Rejecting commentURL value '%s'\n",
				    cur_cookie->commentURL));
			FREE(cur_cookie->commentURL);
		    }
		}
	    } else if (len == 6 && !strncasecomp(attr_start, "domain", 6)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat domain. - FM
		     */
		    !(cur_cookie->flags & COOKIE_FLAG_DOMAIN_SET)) {
		    length -= strlen(cur_cookie->domain);
		    /*
		     *	If the value does not have a lead dot,
		     *	but does have an embedded dot, and is
		     *	not an exact match to the hostname, nor
		     *	is a numeric IP address, add a lead dot.
		     *	Otherwise, use the value as is. - FM
		     *	(domains - case insensitive).
		     */
		    if (value[0] != '.' && value[0] != '\0' &&
			value[1] != '\0' && strcasecomp(value, hostname)) {
			char *ptr = strchr(value, '.');
			if (ptr != NULL && ptr[1] != '\0') {
			    ptr = value;
			    while (*ptr == '.' ||
				   isdigit(UCH(*ptr)))
				ptr++;
			    if (*ptr != '\0') {
				CTRACE((tfp,
	       "LYProcessSetCookies: Adding lead dot for domain value '%s'\n",
					    value));
				StrAllocCopy(cur_cookie->domain, ".");
				StrAllocCat(cur_cookie->domain, value);
			    } else {
				StrAllocCopy(cur_cookie->domain, value);
			    }
			} else {
			    StrAllocCopy(cur_cookie->domain, value);
			}
		    } else {
			StrAllocCopy(cur_cookie->domain, value);
		    }
		    length += strlen(cur_cookie->domain);
		    cur_cookie->flags |= COOKIE_FLAG_DOMAIN_SET;
		}
	    } else if (len == 4 && !strncasecomp(attr_start, "path", 4)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat path. - FM
		     */
		    !(cur_cookie->flags & COOKIE_FLAG_PATH_SET)) {
		    length -= strlen(cur_cookie->path);
		    StrAllocCopy(cur_cookie->path, value);
		    length += (cur_cookie->pathlen = strlen(cur_cookie->path));
		    cur_cookie->flags |= COOKIE_FLAG_PATH_SET;
		}
	    } else if (len == 4 && !strncasecomp(attr_start, "port", 4)) {
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat port. - FM
		     */
		    cur_cookie->PortList == NULL) {
		    char *cp = value;
		    while ((*cp != '\0') &&
			   (isdigit(UCH(*cp)) ||
			    *cp == ',' || *cp == ' ')) {
			cp++;
		    }
		    if (*cp == '\0' && !port_matches(port, value)) {
			invalidport = TRUE;
			known_attr = YES;
		    } else if (*cp == '\0') {
			StrAllocCopy(cur_cookie->PortList, value);
			length += strlen(cur_cookie->PortList);
			known_attr = YES;
		    } else {
			known_attr = NO;
		    }
		} else if (cur_cookie != NULL) {
		    /*
		     *	Don't process a repeat port. - FM
		     */
		    if (cur_cookie->PortList == NULL) {
			HTSprintf0(&(cur_cookie->PortList), "%d", port);
			length += strlen(cur_cookie->PortList);
		    }
		    known_attr = YES;
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "version", 7)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat version. - FM
		     */
		    cur_cookie->version < 1) {
		    int temp = strtol(value, NULL, 10);
		    if (errno != -ERANGE) {
			cur_cookie->version = temp;
		    }
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "max-age", 7)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat max-age. - FM
		     */
		    !MaxAgeAttrSet) {
		    int temp = strtol(value, NULL, 10);
		    cur_cookie->flags |= COOKIE_FLAG_EXPIRES_SET;
		    if (errno == -ERANGE) {
			cur_cookie->expires = (time_t)0;
		    } else {
			cur_cookie->expires = (time(NULL) + temp);
			CTRACE((tfp, "LYSetCookie: expires %ld, %s",
				    (long) cur_cookie->expires,
				    ctime(&cur_cookie->expires)));
		    }
		    MaxAgeAttrSet = TRUE;
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "expires", 7)) {
		/*
		 *  Convert an 'expires' attribute value if we haven't
		 *  received a 'max-age'.  Note that 'expires' should not
		 *  be used in Version 1 cookies, but it might be used for
		 *  "backward compatibility", and, in turn, ill-informed
		 *  people surely would start using it instead of, rather
		 *  than in addition to, 'max-age'. - FM
		 */
		known_attr = YES;
		if ((cur_cookie != NULL && !MaxAgeAttrSet) &&
		     !(cur_cookie->flags & COOKIE_FLAG_EXPIRES_SET)) {
		    if (value) {
			cur_cookie->flags |= COOKIE_FLAG_EXPIRES_SET;
			cur_cookie->expires = LYmktime(value, FALSE);
			if (cur_cookie->expires > 0) {
			    CTRACE((tfp, "LYSetCookie: expires %ld, %s",
					(long) cur_cookie->expires,
					ctime(&cur_cookie->expires)));
			}
		    }
		}
	    }
d1320 17
a1336 19
	    /*
	     *	If none of the above comparisons succeeded, and we have
	     *	a value, then we have an unknown pair of the form 'foo=bar',
	     *	which means it's time to create a new cookie.  If we don't
	     *	have a non-zero-length value, assume it's an error or a
	     *	new, unknown attribute which doesn't take a value, and
	     *	ignore it. - FM
	     */
	    /* if (!known_attr && value_end > value_start) */

	    /* Is there any reason we don't want to accept cookies with
	     * no value?  This seems to be needed for sites that reset a
	     * cookie by nulling out the value.  If this causes problems,
	     * we can go back to the original behavior above.  - BJP
	     *
	     * Presence of value is now needed (indicated normally by '='),
	     * but it can now be an empty string. - kw 1999-06-24
	     */
	    if (!known_attr && value && value_end >= value_start) {
d1341 3
a1343 2
		if (length <= max_cookies_buffer && cur_cookie != NULL &&
		    !invalidport) {
d1359 1
a1359 1
			   invalidport ?
d1362 1
a1362 1
		    if (invalidport) {
d1372 1
a1372 2
		invalidport = FALSE;
		length = 0;
d1375 1
a1375 1
		length += strlen(cur_cookie->name);
d1377 1
a1377 1
		length += strlen(cur_cookie->value);
d1379 1
a1379 1
		length += strlen(cur_cookie->domain);
d1381 1
a1381 1
		length += (cur_cookie->pathlen = strlen(cur_cookie->path));
d1383 1
a1383 1
		MaxAgeAttrSet = FALSE;
d1395 2
a1396 2
     && length <= max_cookies_buffer
     && cur_cookie != NULL && !invalidport) {
d1401 1
a1401 1
    } else if (cur_cookie != NULL && !invalidport) {
d1406 2
a1407 2
		    (length > max_cookies_buffer ? "length" : ""),
		    (length > max_cookies_buffer &&
d1428 1
a1428 1
    length = 0;
d1612 1
a1612 210
	    int len = (attr_end - attr_start);
	    BOOLEAN known_attr = NO;
	    char *value = NULL;

	    if (value_start && value_end >= value_start) {
		/*
		 * Presence of value is now needed (indicated normally by '=')
		 * to start a cookie, but it can now be an empty string.
		 * - kw 1999-06-24
		 */
		int value_len = (value_end - value_start);

		if (value_len > max_cookies_buffer) {
		    value_len = max_cookies_buffer;
		}
		value = typecallocn(char, value_len + 1);
		if (value == NULL)
		    outofmem(__FILE__, "LYProcessSetCookies");
		LYstrncpy(value, value_start, value_len);
	    }
	    if (len == 6 && !strncasecomp(attr_start, "secure", 6)) {
		if (value == NULL) {
		    known_attr = YES;
		    if (cur_cookie != NULL) {
			cur_cookie->flags |= COOKIE_FLAG_SECURE;
		    }
		} else {
		    /*
		     *	If secure has a value, assume someone
		     *	misused it as cookie name. - FM
		     */
		    known_attr = NO;
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "discard", 7)) {
		if (value == NULL) {
		    known_attr = YES;
		    if (cur_cookie != NULL) {
			cur_cookie->flags |= COOKIE_FLAG_DISCARD;
		    }
		} else {
		    /*
		     *	If discard has a value, assume someone
		     *	used it as a cookie name. - FM
		     */
		    known_attr = NO;
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "comment", 7)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat comment. - FM
		     */
		    cur_cookie->comment == NULL) {
		    StrAllocCopy(cur_cookie->comment, value);
		    length += strlen(cur_cookie->comment);
		}
	    } else if (len == 10 && !strncasecomp(attr_start,
						  "commentURL", 10)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat commentURL. - FM
		     */
		    cur_cookie->commentURL == NULL) {
		    /*
		     *	We should get only absolute URLs as
		     *	values, but will resolve versus the
		     *	request's URL just in case. - FM
		     */
		    cur_cookie->commentURL = HTParse(value,
						     address,
						     PARSE_ALL);
		    /*
		     *	Accept only URLs for http or https servers. - FM
		     */
		    if ((url_type = is_url(cur_cookie->commentURL)) &&
			(url_type == HTTP_URL_TYPE ||
			 url_type == HTTPS_URL_TYPE)) {
			length += strlen(cur_cookie->commentURL);
		    } else {
			CTRACE((tfp, "LYProcessSetCookies: Rejecting commentURL value '%s'\n",
				    cur_cookie->commentURL));
			FREE(cur_cookie->commentURL);
		    }
		}
	    } else if (len == 6 && !strncasecomp(attr_start, "domain", 6)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat domain. - FM
		     */
		    !(cur_cookie->flags & COOKIE_FLAG_DOMAIN_SET)) {
		    length -= strlen(cur_cookie->domain);
		    /*
		     *	If the value does not have a lead dot,
		     *	but does have an embedded dot, and is
		     *	not an exact match to the hostname, nor
		     *	is a numeric IP address, add a lead dot.
		     *	Otherwise, use the value as is. - FM
		     *	(domains - case insensitive).
		     */
		    if (value[0] != '.' && value[0] != '\0' &&
			value[1] != '\0' && strcasecomp(value, hostname)) {
			char *ptr = strchr(value, '.');
			if (ptr != NULL && ptr[1] != '\0') {
			    ptr = value;
			    while (*ptr == '.' ||
				   isdigit(UCH(*ptr)))
				ptr++;
			    if (*ptr != '\0') {
				CTRACE((tfp,
	       "LYProcessSetCookies: Adding lead dot for domain value '%s'\n",
					    value));
				StrAllocCopy(cur_cookie->domain, ".");
				StrAllocCat(cur_cookie->domain, value);
			    } else {
				StrAllocCopy(cur_cookie->domain, value);
			    }
			} else {
			    StrAllocCopy(cur_cookie->domain, value);
			}
		    } else {
			StrAllocCopy(cur_cookie->domain, value);
		    }
		    length += strlen(cur_cookie->domain);
		    cur_cookie->flags |= COOKIE_FLAG_DOMAIN_SET;
		}
	    } else if (len == 4 && !strncasecomp(attr_start, "path", 4)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat path. - FM
		     */
		    !(cur_cookie->flags & COOKIE_FLAG_PATH_SET)) {
		    length -= strlen(cur_cookie->path);
		    StrAllocCopy(cur_cookie->path, value);
		    length += (cur_cookie->pathlen = strlen(cur_cookie->path));
		    cur_cookie->flags |= COOKIE_FLAG_PATH_SET;
		}
	    } else if (len == 4 && !strncasecomp(attr_start, "port", 4)) {
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat port. - FM
		     */
		    cur_cookie->PortList == NULL) {
		    char *cp = value;
		    while ((*cp != '\0') &&
			   (isdigit(UCH(*cp)) ||
			    *cp == ',' || *cp == ' ')) {
			cp++;
		    }
		    if (*cp == '\0' && port_matches(port, value)) {
			StrAllocCopy(cur_cookie->PortList, value);
			length += strlen(cur_cookie->PortList);
			known_attr = YES;
		    } else {
			known_attr = NO;
		    }
		} else if (cur_cookie != NULL) {
		    /*
		     *	Don't process a repeat port. - FM
		     */
		    if (cur_cookie->PortList == NULL) {
			HTSprintf0(&(cur_cookie->PortList), "%d", port);
			length += strlen(cur_cookie->PortList);
		    }
		    known_attr = YES;
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "version", 7)) {
		known_attr = YES;
		if (cur_cookie != NULL && value &&
		    /*
		     *	Don't process a repeat version. - FM
		     */
		    cur_cookie->version < 1) {
		    int temp = strtol(value, NULL, 10);
		    if (errno != -ERANGE) {
			cur_cookie->version = temp;
		    }
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "max-age", 7)) {
		known_attr = YES;
		if ((cur_cookie != NULL) && !MaxAgeAttrSet && value) {
		    int temp = strtol(value, NULL, 10);
		    cur_cookie->flags |= COOKIE_FLAG_EXPIRES_SET;
		    if (errno == -ERANGE) {
			cur_cookie->expires = (time_t)0;
		    } else {
			cur_cookie->expires = (time(NULL) + temp);
		    }
		    MaxAgeAttrSet = TRUE;
		}
	    } else if (len == 7 && !strncasecomp(attr_start, "expires", 7)) {
		/*
		 *  Convert an 'expires' attribute value if we haven't
		 *  received a 'max-age'.  Note that 'expires' should not
		 *  be used in Version 1 cookies, but it might be used for
		 *  "backward compatibility", and, in turn, ill-informed
		 *  people surely would start using it instead of, rather
		 *  than in addition to, 'max-age'. - FM
		 */
		known_attr = YES;
		if ((cur_cookie != NULL) && !(MaxAgeAttrSet) &&
		    !(cur_cookie->flags & COOKIE_FLAG_EXPIRES_SET)) {
		    if (value) {
			cur_cookie->flags |= COOKIE_FLAG_EXPIRES_SET;
			cur_cookie->expires = LYmktime(value, FALSE);
		    }
		}
	    }
d1614 17
a1630 19
	    /*
	     *	If none of the above comparisons succeeded, and we have
	     *	a value, then we have an unknown pair of the form 'foo=bar',
	     *	which means it's time to create a new cookie.  If we don't
	     *	have a non-zero-length value, assume it's an error or a
	     *	new, unknown attribute which doesn't take a value, and
	     *	ignore it. - FM
	     */
	    /* if (!known_attr && value_end > value_start) */

	    /* Is there any reason we don't want to accept cookies with
	     * no value?  This seems to be needed for sites that reset a
	     * cookie by nulling out the value.  If this causes problems,
	     * we can go back to the original behavior above.  - BJP
	     *
	     * Presence of value is now needed (indicated normally by '='),
	     * but it can now be an empty string. - kw 1999-06-24
	     */
	    if (!known_attr && value && value_end >= value_start) {
d1635 2
a1636 1
		if (length <= max_cookies_buffer && cur_cookie != NULL) {
d1663 2
a1664 1
		length = 0;
d1666 1
a1666 1
		length += strlen(cur_cookie->name);
d1668 1
a1668 1
		length += strlen(cur_cookie->value);
d1670 1
a1670 1
		length += strlen(cur_cookie->domain);
d1672 1
a1672 1
		length += (cur_cookie->pathlen = strlen(cur_cookie->path));
d1674 1
a1674 1
		MaxAgeAttrSet = FALSE;
d1685 1
a1685 1
    if (NumCookies <= max_cookies_domain && length <= max_cookies_buffer && cur_cookie != NULL) {
d1698 2
a1699 2
		    (length > max_cookies_buffer ? "length" : ""),
		    (length > max_cookies_buffer && NumCookies > max_cookies_domain ? " and " : ""),
d1719 1
a1719 1
	if (!strncasecomp(address, "https:", 6) &&
d1760 1
a1760 1
    } else if (!strncasecomp(address, "https:", 6)) {
d1763 9
a1771 1
    path = HTParse(address, "", PARSE_PATH|PARSE_PUNCTUATION);
d1782 2
a1783 2
		(hostname ? hostname : ""),
		(path ? path : "")));
d1785 1
a1785 2
	CTRACE((tfp, "    and Set-Cookie: '%s'\n",
			 (SetCookie ? SetCookie : "")));
d1788 1
a1788 2
	CTRACE((tfp, "    and Set-Cookie2: '%s'\n",
			 (SetCookie2 ? SetCookie2 : "")));
d1816 1
a1816 1
PUBLIC char * LYCookie ARGS4(
d1842 2
a1843 3
		 *  Scan the domain's cookie_list for
		 *  any cookies we should include in
		 *  our request header.
d1849 2
a1850 3
		 *  No cookies in this domain, and no default
		 *  accept/reject choice was set by the user,
		 *  so delete the domain. - FM
d1867 1
a1867 1
#ifdef EXP_PERSISTENT_COOKIES
a1901 1
	unsigned i = 0;
d1905 2
a1906 1
	if ((buf[0] == '\0' || buf[0] == '\n' || buf[0] == '#')) {
d1912 1
a1912 12
	/*
	 * Strip out the newline that fgets() puts at the end of a
	 * cookie.
	 */

	while(buf[i] != '\n' && buf[i] != 0) {
	    i++;
	}
	if (buf[i] == '\n') {
	    buf[i++] = '\t';	/* add sep after line if enough space - kw */
	    buf[i] = '\0';
	}
d1934 2
a1935 2
	    CTRACE((tfp, "\t%d:%p:%p:[%s]\n",
		tok_loop, tok_values[tok_loop].s, tok_out, tok_out));
d1954 2
a1955 2
/* 	CTRACE((tfp, "%s\t%s\t%s\t%s\t%ld\t%s\t%s\tREADCOOKIE\n", */
/* 	    domain, what, path, secure, (long) expires, name, value)); */
d2003 1
a2003 1
	    		COOKIE_FLAG_PATH_SET;
d2069 2
a2070 1
	    CTRACE((tfp, "LYStoreCookies: %ld cf %ld ", (long) now, (long) co->expires));
d2084 1
a2084 1
		de->domain,
d2087 2
a2088 2
		co->flags & COOKIE_FLAG_SECURE ? "TRUE" : "FALSE",
		(long) co->expires, co->name,
d2090 1
a2090 1
		    co->value,
d2173 7
a2179 3
	for (dl = domain_list; dl != NULL; dl = dl->next) {
	    de = dl->object;
	    if (!(de && de->domain))
d2181 2
a2182 1
		 *  First object in the list always is empty. - FM
d2184 45
a2228 3
		continue;
	    if (!strcasecomp(domain, de->domain)) {
		FREE(domain);
d2230 4
a2233 2
		 *  We found the domain.  Check
		 *  whether a lynxID is present. - FM
d2235 33
a2267 12
		if (lynxID) {
		    /*
		     *	Seek and delete the cookie with this lynxID
		     *	in the domain's cookie list. - FM
		     */
		    for (cl = de->cookie_list; cl != NULL; cl = cl->next) {
			if ((co = (cookie *)cl->object) == NULL)
			    /*
			     *	First object is always empty. - FM
			     */
			    continue;
			if (!strcmp(lynxID, co->lynxID)) {
d2269 2
a2270 2
			     *	We found the cookie.
			     *	Delete it if confirmed. - FM
d2272 6
a2277 28
			    if (HTConfirm(DELETE_COOKIE_CONFIRMATION) == FALSE)
			    {
				FREE(lynxID);
				HTNoDataOK = 1;
				return(HT_NO_DATA);
			    }
			    HTList_removeObject(de->cookie_list, co);
			    freeCookie(co);
			    co = NULL;
			    total_cookies--;
			    if ((de->bv == QUERY_USER &&
				 HTList_isEmpty(de->cookie_list)) &&
				HTConfirm(DELETE_EMPTY_DOMAIN_CONFIRMATION)) {
				/*
				 *  No more cookies in this domain, no
				 *  default accept/reject choice was set
				 *  by the user, and got confirmation on
				 *  deleting the domain, so do it. - FM
				 */
				FREE(de->domain);
				HTList_delete(de->cookie_list);
				de->cookie_list = NULL;
				HTList_removeObject(domain_list, de);
				FREE(de);
				HTProgress(DOMAIN_EATEN);
			    } else {
				HTProgress(COOKIE_EATEN);
			    }
a2278 1
			    HTNoDataOK = 1;
d2281 15
a2295 20
		    }
		} else {
		    /*
		     *	Prompt whether to delete all of the cookies in
		     *	this domain, or the domain if no cookies in it,
		     *	or to change its 'allow' setting, or to cancel,
		     *	and then act on the user's response. - FM
		     */
		    if (HTList_isEmpty(de->cookie_list)) {
			_statusline(DELETE_DOMAIN_SET_ALLOW_OR_CANCEL);
		    } else {
			_statusline(DELETE_COOKIES_SET_ALLOW_OR_CANCEL);
		    }
		    HTNoDataOK = 1;
		    while (1) {
			ch = LYgetch_single();
#ifdef VMS
			if (HadVMSInterrupt) {
			    HadVMSInterrupt = FALSE;
			    ch = 'C';
d2297 19
a2315 103
#endif /* VMS */
			switch(ch) {
			    case 'A':
				/*
				 *  Set to accept all cookies
				 *  from this domain. - FM
				 */
				de->bv = ACCEPT_ALWAYS;
				HTUserMsg2(ALWAYS_ALLOWING_COOKIES,
					      de->domain);
				return(HT_NO_DATA);

			    case 'C':
				/*
				 *  Cancelled. - FM
				 */
			      reject:
				HTUserMsg(CANCELLED);
				return(HT_NO_DATA);

			    case 'D':
				if (HTList_isEmpty(de->cookie_list)) {
				    /*
				     *	We had an empty domain, so we
				     *	were asked to delete it. - FM
				     */
				    FREE(de->domain);
				    HTList_delete(de->cookie_list);
				    de->cookie_list = NULL;
				    HTList_removeObject(domain_list, de);
				    FREE(de);
				    HTProgress(DOMAIN_EATEN);
				    LYSleepMsg();
				    break;
				}
Delete_all_cookies_in_domain:
				/*
				 *  Delete all cookies in this domain. - FM
				 */
				cl = de->cookie_list;
				while (cl) {
				    next = cl->next;
				    co = cl->object;
				    if (co) {
					HTList_removeObject(de->cookie_list,
							    co);
					freeCookie(co);
					co = NULL;
					total_cookies--;
				    }
				    cl = next;
				}
				HTProgress(DOMAIN_COOKIES_EATEN);
				LYSleepMsg();
				/*
				 *  If a default accept/reject
				 *  choice is set, we're done. - FM
				 */
				if (de->bv != QUERY_USER)
				    return(HT_NO_DATA);
				/*
				 *  Check whether to delete
				 *  the empty domain. - FM
				 */
				if(HTConfirm(
					DELETE_EMPTY_DOMAIN_CONFIRMATION)) {
				    FREE(de->domain);
				    HTList_delete(de->cookie_list);
				    de->cookie_list = NULL;
				    HTList_removeObject(domain_list, de);
				    FREE(de);
				    HTProgress(DOMAIN_EATEN);
				    LYSleepMsg();
				}
				break;

			    case 'P':
				/*
				 *  Set to prompt for cookie acceptance
				 *  from this domain. - FM
				 */
				de->bv = QUERY_USER;
				HTUserMsg2(PROMPTING_TO_ALLOW_COOKIES,
					   de->domain);
				return(HT_NO_DATA);

			    case 'V':
				/*
				 *  Set to reject all cookies
				 *  from this domain. - FM
				 */
				de->bv = REJECT_ALWAYS;
				HTUserMsg2(NEVER_ALLOWING_COOKIES,
					   de->domain);
				if ((!HTList_isEmpty(de->cookie_list)) &&
				    HTConfirm(DELETE_ALL_COOKIES_IN_DOMAIN))
				    goto Delete_all_cookies_in_domain;
				return(HT_NO_DATA);

			    default:
				if (LYCharIsINTERRUPT(ch))
				    goto reject;
				continue;
d2318 25
d2344 1
a2345 1
		break;
d2350 2
a2351 3
	     *	There are no more domains left.
	     *	Don't delete the domain_list, otherwise
	     *  atexit may be called multiple times. - kw
d2362 4
a2365 5
     *	If we get to here, it was a LYNXCOOKIE:/ URL
     *	for creating and displaying the Cookie Jar Page,
     *	or we didn't find the domain or cookie in a
     *	deletion request.  Set up an HTML stream and
     *	return an updated Cookie Jar Page. - FM
d2379 2
a2380 2
     *	Load HTML strings into buf and pass buf
     *	to the target for parsing and rendering. - FM
d2412 2
a2413 2
	HTSprintf0(&buf, "<dt>%s<dd><a href=\"LYNXCOOKIE://%s/\">Domain=%s</a>\n",
		      de->domain, de->domain, de->domain);
d2416 9
a2424 9
	    case (ACCEPT_ALWAYS):
		HTSprintf0(&buf, COOKIES_ALWAYS_ALLOWED);
		break;
	    case (REJECT_ALWAYS):
		HTSprintf0(&buf, COOKIES_NEVER_ALLOWED);
		break;
	    case (QUERY_USER):
		HTSprintf0(&buf, COOKIES_ALLOWED_VIA_PROMPT);
		break;
d2455 2
a2456 2
	    HTSprintf0(&buf, "<dd><a href=\"LYNXCOOKIE://%s/%s\">%s=%s</a>\n",
			 de->domain, co->lynxID, name, value);
d2463 1
a2463 1
	        PUTS(buf);
d2522 1
a2522 1
	    		 gettext("Maximum Gobble Date:"),
d2554 3
a2556 3
PUBLIC void cookie_domain_flag_set ARGS2(
	char *, 	domainstr,
	int, 		flag)
a2558 2
    domain_entry *de2 = NULL;
    HTList *hl = NULL;
a2561 1
    int isexisting = FALSE;
d2570 1
a2570 2
     * Is this the first domain we're handling?  If so, initialize
     * domain_list.
a2571 1

d2593 1
a2593 1
	 * re-setting of an already existing domains -- if so, just
d2597 1
a2597 12
	for (hl = domain_list; hl != NULL; hl = hl->next) {
	    de2 = (domain_entry *)hl->object;
	    if ((de2 != NULL && de2->domain != NULL) &&
		!strcasecomp(strsmall, de2->domain)) {
			isexisting = TRUE;
			break;
	    } else {
		isexisting = FALSE;
	    }
	}

	if(!isexisting) {
a2598 1

d2602 3
d2606 12
a2617 18
		case (FLAG_ACCEPT_ALWAYS): de->bv = ACCEPT_ALWAYS;
					   de->invcheck_bv = DEFAULT_INVCHECK_BV;
					   break;
		case (FLAG_REJECT_ALWAYS): de->bv = REJECT_ALWAYS;
					   de->invcheck_bv = DEFAULT_INVCHECK_BV;
					   break;
		case (FLAG_QUERY_USER):    de->bv = QUERY_USER;
					   de->invcheck_bv = DEFAULT_INVCHECK_BV;
					   break;
		case (FLAG_INVCHECK_QUERY): de->invcheck_bv = INVCHECK_QUERY;
					    de->bv = QUERY_USER;
					    break;
		case (FLAG_INVCHECK_STRICT): de->invcheck_bv = INVCHECK_STRICT;
					     de->bv = QUERY_USER;
					    break;
		case (FLAG_INVCHECK_LOOSE): de->invcheck_bv = INVCHECK_LOOSE;
					    de->bv = QUERY_USER;
					    break;
a2622 15
	} else {
	    switch(flag) {
		case (FLAG_ACCEPT_ALWAYS): de2->bv = ACCEPT_ALWAYS;
					   break;
		case (FLAG_REJECT_ALWAYS): de2->bv = REJECT_ALWAYS;
					   break;
		case (FLAG_QUERY_USER): de2->bv = QUERY_USER;
					   break;
		case (FLAG_INVCHECK_QUERY): de2->invcheck_bv = INVCHECK_QUERY;
					   break;
		case (FLAG_INVCHECK_STRICT): de2->invcheck_bv = INVCHECK_STRICT;
					   break;
		case (FLAG_INVCHECK_LOOSE): de2->invcheck_bv = INVCHECK_LOOSE;
					   break;
	    }
d2624 16
d2648 1
a2648 1
 * If any COOKIE_{ACCEPT,REJECT}_DOMAINS have been defined, process them. 
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d77 3
d135 1
a135 1
    temp = (char *)calloc(1, ((end - start) + 1));
d145 1
a145 1
    cookie *p = (cookie *)calloc(1, sizeof(cookie));
d244 1
a244 1
    if (!(number && isdigit(*number)))
d251 1
a251 1
	while (isdigit(*number)) {
d254 1
a254 1
	while (*number != '\0' && !isdigit(*number)) {
d263 36
d313 3
d339 1
a339 1
	    !strcmp(co->domain, de->domain)) {
d360 16
a375 27
    if (strncmp(co->path, path, co->pathlen) != 0) {
	if((de != NULL && de->invcheck_bv != INVCHECK_LOOSE)
	    || de == NULL) {
		if(de != NULL && de->invcheck_bv == INVCHECK_STRICT) {
		    CTRACE(tfp, "store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
			co->path, path);
		    freeCookie(co);
		    co = NULL;
		    return;
		} else if ((de != NULL
		    && de->invcheck_bv == INVCHECK_QUERY)
		    || de == NULL) {
			char *msg = 0;
			HTSprintf0(&msg,
			    INVALID_COOKIE_PATH_CONFIRMATION,
			    co->path, path);
			if (!HTConfirm(msg)) {
			    CTRACE(tfp, "store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
				co->path, path);
			    freeCookie(co);
			    co = NULL;
			    FREE(msg);
			    return;
			} else {
			    FREE(msg);
			}
		}
d387 2
a388 2
	    CTRACE(tfp, "store_cookie: Rejecting because '%s' has no dot.\n",
		    hostname);
a389 1
	    co = NULL;
d401 2
a402 2
	    CTRACE(tfp, "store_cookie: Rejecting domain '%s'.\n",
		    co->domain);
a403 1
	    co = NULL;
d408 2
a409 2
	    CTRACE(tfp, "store_cookie: Rejecting domain '%s'.\n",
		    co->domain);
a410 1
	    co = NULL;
d419 2
a420 2
	    CTRACE(tfp, "store_cookie: Rejecting domain '%s' for host '%s'.\n",
		    co->domain, hostname);
a421 1
	    co = NULL;
d436 35
a470 19
		if((de != NULL && de->invcheck_bv != INVCHECK_LOOSE)
		    || de == NULL) {
			if(de != NULL && de->invcheck_bv == INVCHECK_STRICT) {
			    CTRACE(tfp, "store_cookie: Rejecting domain '%s' for host '%s'.\n",
				co->domain,
				hostname);
			    freeCookie(co);
			    co = NULL;
			    return;
			} else if ((de != NULL
			    && de->invcheck_bv == INVCHECK_QUERY)
			    || de == NULL) {
				char *msg = 0;
				HTSprintf0(&msg,
				    INVALID_COOKIE_DOMAIN_CONFIRMATION,
				    co->domain,
				    hostname);
				if (!HTConfirm(msg)) {
				    CTRACE(tfp, "store_cookie: Rejecting domain '%s' for host '%s'.\n",
d472 17
a488 9
					hostname);
				    freeCookie(co);
				    co = NULL;
				    FREE(msg);
				    return;
				}
				FREE(msg);
			}
		}
d490 1
d497 1
a497 1
	de = (domain_entry *)calloc(1, sizeof(domain_entry));
d502 6
a507 7
	 * Ok, this is a problem.  The first cookie for a domain
	 * effectively sets the policy for that whole domain - for
	 * something like Netlink, where there are lots of websites
	 * under www.netlink.co.uk, this isn't sensible.  However,
	 * taking this sort of decision down to cookie level also
	 * isn't sensible.  Perhaps something based on the domain
	 * and the path in conjunction makes more sense?  - RP
d511 1
a511 1
	    de->bv = FROM_FILE;
d515 1
a515 1
	de->invcheck_bv = INVCHECK_QUERY; /* should this go here? */
d544 1
a544 1
		   !strcmp(co->domain, c2->domain) &&
d586 1
a586 1
	CTRACE(tfp, "store_cookie: Domain's cookie limit exceeded!  Rejecting cookie.\n");
d594 1
a594 1
	CTRACE(tfp, "store_cookie: Total cookie limit exceeded!  Rejecting cookie.\n");
d601 7
a607 2
    } else if (co->value[0] == '\0') {
	CTRACE(tfp, "store_cookie: Value is NULL! Not storing cookie.\n");
d650 2
a651 2
	CONST char *,	hostname,
	CONST char *,	path,
d668 4
a671 2
	if (co) {
	    CTRACE(tfp, "Checking cookie %p %s=%s\n",
d674 2
a675 2
			(co->value ? co->value : "(no value)"));
	    CTRACE(tfp, "\t%s %s %d %s %s %d%s\n",
d681 1
a681 1
			    ? strncmp(path, co->path, co->pathlen)
d685 1
a685 1
			    : "");
d703 1
a703 1
	    (co->pathlen == 0 || !strncmp(path, co->path, co->pathlen))) {
d799 1
a799 1
		if (co->PortList && isdigit((unsigned char)*co->PortList)) {
d872 1
a872 1
	CTRACE(tfp, "LYProcessSetCookies: Using Set-Cookie2 header.\n");
d881 1
a881 1
	while (*p != '\0' && !isspace((unsigned char)*p) &&
d920 1
a920 1
		if (isdigit((unsigned char)*p)) {
d929 1
a929 1
		    while (*p != '\0' && isalpha((unsigned char)*p)) {
d932 1
a932 1
		    while (*p == ',' || isspace((unsigned char)*p)) {
d939 2
a940 2
		    if (isspace((unsigned char)*p)) {
			while (isspace((unsigned char)*(p + 1)))
d957 1
a957 1
		       isdigit((unsigned char)*p)) {
d964 1
a964 1
		    while (isdigit((unsigned char)*p))
d972 1
a972 1
			if (*cp != '\0' && isdigit((unsigned char)*cp)) {
d974 1
a974 1
			    while (isdigit((unsigned char)*cp1))
d990 1
a990 1
			isspace((unsigned char)*(value_end - 1))) {
d993 2
a994 2
			       isspace((unsigned char)*value_end) &&
			       isspace((unsigned char)*(value_end - 1))) {
d1001 1
d1003 1
a1003 1
		 *  It's a quoted string.
d1007 2
a1008 1
		while (*p != '\0' && *p != '"')
d1010 3
a1012 2
		value_end = p;
		if (*p == '"')
d1014 8
d1034 1
a1034 1
		    isspace((unsigned char)*(value_end - 1))) {
d1037 2
a1038 2
			   isspace((unsigned char)*value_end) &&
			   isspace((unsigned char)*(value_end - 1))) {
d1059 6
a1064 1
	    if (value_end > value_start) {
d1070 1
a1070 1
		value = (char *)calloc(1, value_len + 1);
d1135 2
a1136 2
			CTRACE(tfp, "LYProcessSetCookies: Rejecting commentURL value '%s'\n",
				    cur_cookie->commentURL);
d1162 1
a1162 1
				   isdigit((unsigned char)*ptr))
d1165 1
a1165 1
				CTRACE(tfp,
d1167 1
a1167 1
					    value);
d1202 1
a1202 1
			   (isdigit((unsigned char)*cp) ||
d1251 1
a1251 1
			CTRACE(tfp, "LYSetCookie: expires %ld, %s",
d1253 1
a1253 1
				    ctime(&cur_cookie->expires));
d1273 1
a1273 1
			    CTRACE(tfp, "LYSetCookie: expires %ld, %s",
d1275 1
a1275 1
					ctime(&cur_cookie->expires));
d1295 3
d1299 1
a1299 1
	    if (!known_attr) {
d1314 1
a1314 1
		    CTRACE(tfp,
d1319 2
a1320 2
				 cur_cookie->value : "[no value]"));
		    CTRACE(tfp,
d1323 1
a1323 1
			 : "                     due to invalid port!\n");
d1365 1
a1365 1
	CTRACE(tfp, "LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
d1367 2
a1368 2
		    (cur_cookie->value ? cur_cookie->value : "[no value]"));
	CTRACE(tfp, "                     due to excessive %s%s%s\n",
d1374 1
a1374 1
		    (NumCookies > max_cookies_domain ? "number!\n" : "!\n"));
d1378 1
a1378 1
	CTRACE(tfp, "LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
d1380 2
a1381 2
		    (cur_cookie->value ? cur_cookie->value : "[no value]"));
	CTRACE(tfp, "                     due to invalid port!\n");
d1396 1
a1396 1
	CTRACE(tfp, "LYProcessSetCookies: Using Set-Cookie header.\n");
d1405 1
a1405 1
	while (*p != '\0' && !isspace((unsigned char)*p) &&
d1440 1
a1440 1
		if (isdigit((unsigned char)*p)) {
d1449 1
a1449 1
		    while (*p != '\0' && isalpha((unsigned char)*p)) {
d1452 1
a1452 1
		    while (*p == ',' || isspace((unsigned char)*p)) {
d1459 2
a1460 2
		    if (isspace((unsigned char)*p)) {
			while (isspace((unsigned char)*(p + 1)))
d1477 1
a1477 1
		       isdigit((unsigned char)*p)) {
d1484 1
a1484 1
		    while (isdigit((unsigned char)*p))
d1492 1
a1492 1
			if (*cp != '\0' && isdigit((unsigned char)*cp)) {
d1494 1
a1494 1
			    while (isdigit((unsigned char)*cp1))
d1510 1
a1510 1
			isspace((unsigned char)*(value_end - 1))) {
d1513 2
a1514 2
			       isspace((unsigned char)*value_end) &&
			       isspace((unsigned char)*(value_end - 1))) {
d1521 1
d1523 1
a1523 1
		 *  It's a quoted string.
d1527 2
a1528 1
		while (*p != '\0' && *p != '"')
d1530 3
a1532 2
		value_end = p;
		if (*p == '"')
d1534 8
a1541 1
		Quoted = TRUE;
d1554 1
a1554 1
		    isspace((unsigned char)*(value_end - 1))) {
d1557 2
a1558 2
			   isspace((unsigned char)*value_end) &&
			   isspace((unsigned char)*(value_end - 1))) {
d1579 6
a1584 1
	    if (value_end > value_start) {
d1590 1
a1590 1
		value = (char *)calloc(1, value_len + 1);
d1592 1
a1592 1
		    outofmem(__FILE__, "LYProcessSetCookie");
d1655 2
a1656 2
			CTRACE(tfp, "LYProcessSetCookies: Rejecting commentURL value '%s'\n",
				    cur_cookie->commentURL);
d1682 1
a1682 1
				   isdigit((unsigned char)*ptr))
d1685 1
a1685 1
				CTRACE(tfp,
d1687 1
a1687 1
					    value);
d1722 1
a1722 1
			   (isdigit((unsigned char)*cp) ||
d1800 3
d1804 1
a1804 1
	    if (!known_attr) {
d1823 1
a1823 1
		    CTRACE(tfp, "LYProcessSetCookies: Rejecting Set-Cookie: %s=%s\n",
d1827 2
a1828 2
				 cur_cookie->value : "[no value]"));
		    CTRACE(tfp, "                     due to excessive length!\n");
d1866 1
a1866 1
	CTRACE(tfp, "LYProcessSetCookies: Rejecting Set-Cookie: %s=%s\n",
d1868 2
a1869 2
		    (cur_cookie->value ? cur_cookie->value : "[no value]"));
	CTRACE(tfp, "                     due to excessive %s%s%s\n",
d1872 1
a1872 1
		    (NumCookies > max_cookies_domain ? "number!\n" : "!\n"));
d1883 1
a1883 1
	CTRACE(tfp, "LYProcessSetCookie: attr=value pair: '%s=%s'\n",
d1885 1
a1885 1
			    (co->value ? co->value : "[no value]"));
d1887 1
a1887 1
		CTRACE(tfp, "                    expires: %ld, %s\n",
d1889 1
a1889 1
			    ctime(&co->expires));
d1895 1
a1895 1
	    CTRACE(tfp, "                    Forced the 'secure' flag on.\n");
d1935 1
a1935 9
    if (((path = HTParse(address, "",
			 PARSE_PATH|PARSE_PUNCTUATION)) != NULL) &&
	(ptr = strrchr(path, '/')) != NULL) {
	if (ptr == path) {
	    *(ptr+1) = '\0';	/* Leave a single '/' alone */
	} else {
	    *ptr = '\0';
	}
    }
d1945 1
a1945 1
    CTRACE(tfp, "LYSetCookie called with host '%s', path '%s',\n",
d1947 1
a1947 1
		(path ? path : ""));
d1949 2
a1950 2
	CTRACE(tfp, "    and Set-Cookie: '%s'\n",
			 (SetCookie ? SetCookie : ""));
d1953 2
a1954 2
	CTRACE(tfp, "    and Set-Cookie2: '%s'\n",
			 (SetCookie2 ? SetCookie2 : ""));
d1957 1
a1957 1
	CTRACE(tfp, "    Ignoring this Set-Cookie/Set-Cookie2 request.\n");
d1983 2
a1984 2
	CONST char *,	hostname,
	CONST char *,	path,
d1992 2
a1993 2
    CTRACE(tfp, "LYCookie: Searching for '%s:%d', '%s'.\n",
		(hostname ? hostname : "(null)"),
d1995 1
a1995 1
		(path ? path : "(null)"));
d2014 1
a2014 1
	    } else if (de->bv == QUERY_USER && de->invcheck_bv == INVCHECK_QUERY) {
d2061 1
a2061 1
    cookie_handle = fopen(cookie_file, "r+");
d2065 1
a2065 1
    CTRACE(tfp, "LYLoadCookies: reading cookies from %s\n", cookie_file);
d2088 4
a2091 1
	buf[i] = '\0';
d2103 7
a2109 1
	CTRACE(tfp, "LYLoadCookies: tokenising %s\n", buf);
d2113 2
a2114 2
	    CTRACE(tfp, "\t%d:%p:%p:[%s]\n",
		tok_loop, tok_values[tok_loop].s, tok_out, tok_out);
a2123 1
	expires = atol(expires_a);
d2125 5
a2129 6
	/*
	 * This fails when the path is blank
	 *
	 * sscanf(buf, "%s\t%s\t%s\t%s\t%d\t%s\t%[ -~]",
	 *  domain, what, path, secure, &expires, name, value);
	 */
d2131 4
a2134 3
	CTRACE(tfp, "expires:\t%s\n", ctime(&expires));
/* 	CTRACE(tfp, "%s\t%s\t%s\t%s\t%ld\t%s\t%s\tREADCOOKIE\n", */
/* 	    domain, what, path, secure, (long) expires, name, value); */
d2139 9
a2147 1
	StrAllocCopy(moo->value, value);
d2197 1
a2197 1
    fclose (cookie_handle);
a2203 3
#if 0
    char *buf = NULL;
#endif
d2210 5
d2226 1
a2226 1
    CTRACE(tfp, "LYStoreCookies: save cookies to %s on exit\n", cookie_file);
a2237 18
#if 0
	switch (de->bv) {
	case (ACCEPT_ALWAYS):
	    HTSprintf0(&buf, COOKIES_ALWAYS_ALLOWED);
	    break;
	case (REJECT_ALWAYS):
	    HTSprintf0(&buf, COOKIES_NEVER_ALLOWED);
	    break;
	case (QUERY_USER):
	    HTSprintf0(&buf, COOKIES_ALLOWED_VIA_PROMPT);
	    break;
	case (FROM_FILE):	/* not used any more - kw */
	    HTSprintf0(&buf, gettext("(From Cookie Jar)"));
	    break;
	}
	/* FIXME: buf unused */
#endif

d2248 1
a2248 1
	    CTRACE(tfp, "LYStoreCookies: %ld cf %ld ", (long) now, (long) co->expires);
d2251 1
a2251 1
		CTRACE(tfp, "not stored - DISCARD\n");
d2254 1
a2254 1
		CTRACE(tfp, "not stored - no expiration time\n");
d2257 1
a2257 1
		CTRACE(tfp, "not stored - EXPIRED\n");
d2261 1
a2261 1
	    fprintf(cookie_handle, "%s\t%s\t%s\t%s\t%ld\t%s\t%s\n",
d2263 2
a2264 1
		"FALSE", co->path,
d2266 4
a2269 1
		(long) co->expires, co->name, co->value);
d2271 1
a2271 1
	    CTRACE(tfp, "STORED\n");
d2274 1
a2274 1
    fclose(cookie_handle);
d2321 2
a2322 1
	sleep(MessageSecs);
d2358 1
a2358 1
	    if (!strcmp(domain, de->domain)) {
d2383 1
d2408 2
a2409 1
			    sleep(MessageSecs);
d2425 1
d2427 1
a2427 1
			ch = LYgetch();
d2434 1
a2434 1
			switch(TOUPPER(ch)) {
a2445 2
			    case 7:	/* Ctrl-G */
			    case 3:	/* Ctrl-C */
d2449 1
d2465 1
a2465 1
				    sleep(MessageSecs);
d2486 1
a2486 1
				sleep(MessageSecs);
d2505 1
a2505 1
				    sleep(MessageSecs);
d2533 2
d2550 1
a2550 1
	    sleep(MessageSecs);
d2582 1
a2582 1
    HTSprintf0(&buf, "<HEAD>\n<TITLE>%s</title>\n</HEAD>\n<BODY>\n",
d2591 1
a2591 1
    HTSprintf0(&buf, "<NOTE>%s\n", ACTIVATE_TO_GOBBLE);
d2593 1
a2593 1
    HTSprintf0(&buf, "%s</NOTE>\n", OR_CHANGE_ALLOW);
d2596 1
a2596 1
    HTSprintf0(&buf, "<DL COMPACT>\n");
d2609 1
a2609 1
	HTSprintf0(&buf, "<DT>%s<DD><A HREF=\"LYNXCOOKIE://%s/\">Domain=%s</A>\n",
a2621 5
	    case (FROM_FILE):
#if 0 /* not used any more - kw */
		HTSprintf0(&buf, COOKIES_READ_FROM_FILE);
#endif
		break;
d2652 1
a2652 1
	    HTSprintf0(&buf, "<DD><A HREF=\"LYNXCOOKIE://%s/%s\">%s=%s</A>\n",
d2672 1
a2672 1
	    HTSprintf0(&buf, "<DD>Path=%s\n<DD>Port: %d Secure: %s Discard: %s\n",
d2683 1
a2683 1
		HTSprintf0(&buf, "<DD>PortList=\"%s\"\n", co->PortList);
d2696 1
a2696 1
			"<DD>CommentURL: <A href=\"%s\">%s</A>\n",
d2710 1
a2710 1
		HTSprintf0(&buf, "<DD>Comment: %s\n", comment);
d2718 1
a2718 1
	    HTSprintf0(&buf, "<DD><EM>%s</EM> %s%s",
d2728 1
a2728 1
	HTSprintf0(&buf, "</DT>\n");
d2731 1
a2731 1
    HTSprintf0(&buf, "</DL>\n</BODY>\n");
d2753 1
a2753 1
	int, 	flag)
d2758 1
a2758 1
    char **str = (char **)calloc(1, sizeof(domainstr));
d2763 5
a2767 2
    if (str == NULL)
	outofmem(__FILE__, "cookie_set_invcheck");
d2788 5
d2802 1
a2802 1
		!strcmp(strsmall, de2->domain)) {
d2811 1
a2811 1
	    de = (domain_entry *)calloc(1, sizeof(domain_entry));
d2818 1
a2818 1
					   de->invcheck_bv = INVCHECK_QUERY;
d2821 1
a2821 1
					   de->invcheck_bv = INVCHECK_QUERY;
d2824 1
a2824 4
					   de->invcheck_bv = INVCHECK_QUERY;
					   break;
		case (FLAG_FROM_FILE):     de->bv = FROM_FILE;
					   de->invcheck_bv = INVCHECK_QUERY;
a2847 2
		case (FLAG_FROM_FILE): de2->bv = FROM_FILE;
					   break;
d2861 40
@


1.1
log
@Initial revision
@
text
@d19 4
d24 9
a32 2
      * A means to specify "always allow" and "never allow" domains via
	a configuration file is needed.
d36 1
a36 1
	escaped if not quoted, but presumeably the server is expecting
d53 2
a54 3
	connections as secure.	This may need to be expanded for other
	secure communication protocols that become standarized.
      * Cookies could be optionally stored in a file from session to session.
d57 19
a75 22
#include "HTUtils.h"
#include "tcp.h"
#include "HTAccess.h"
#include "HTParse.h"
#include "HTAlert.h"
#include "LYCurses.h"
#include "LYSignal.h"
#include "LYUtils.h"
#include "LYCharUtils.h"
#include "LYClean.h"
#include "LYGlobalDefs.h"
#include "LYEdit.h"
#include "LYStrings.h"
#include "LYSystem.h"
#include "GridText.h"
#include "LYUtils.h"
#include "LYCharUtils.h"
#include "LYCookie.h"

#include "LYLeaks.h"

#define FREE(x) if (x) {free(x); x = NULL;}
d83 1
a83 1
**  list.   We keep a running total of cookies as we add or delete
d113 2
a142 1
    char lynxID[64];
d146 1
a146 2
    sprintf(lynxID, "%p", p);
    StrAllocCopy(p->lynxID, lynxID);
d167 1
d190 1
a193 13
    if (dump_output_immediately) {
	cl = cookie_list;
	while (cl) {
	    next = cl->next;
	    co = cl->object;
	    if (co) {
		HTList_removeObject(cookie_list, co);
		freeCookie(co);
	    }
	    cl = next;
	}
	HTList_delete(cookie_list);
    }
d198 1
d211 1
a211 1
     *	FQDNs.	Do numeric addresses require special handling?
d213 1
a213 1
    if (*B != '.' && !strcmp(A, B))
d218 1
a218 1
     *	as described in Section 2 of the -05 draft.
d220 1
a220 1
    if (*B == '.') {
d223 1
a223 1
	    if (!strcmp((A + diff), B))
d279 31
a309 1
     *	Apply sanity checks.
d311 6
a316 2
     *	Section 4.3.2, condition 1: The value for the Path attribute is
     *	not a prefix of the request-URI.
d319 27
a345 7
	if (TRACE)
	    fprintf(stderr,
	    "store_cookie: Rejecting because '%s' is not a prefix of '%s'.\n",
		    co->path, path);
	freeCookie(co);
	co = NULL;
	return;
d348 2
a349 2
     *	The next 4 conditions do NOT apply if the domain is still
     *	the default of request-host.
d351 1
a351 1
    if (strcmp(co->domain, hostname) != 0) {
d356 2
a357 4
	    if (TRACE)
		fprintf(stderr,
			"store_cookie: Rejecting because '%s' has no dot.\n",
			hostname);
d371 2
a372 4
	    if (TRACE)
		fprintf(stderr,
			"store_cookie: Rejecting domain '%s'.\n",
			co->domain);
d379 2
a380 4
	    if (TRACE)
		fprintf(stderr,
			"store_cookie: Rejecting domain '%s'.\n",
			co->domain);
d391 2
a392 4
	    if (TRACE)
		fprintf(stderr,
			"store_cookie: Rejecting domain '%s' for host '%s'.\n",
			co->domain, hostname);
d402 4
d409 29
a437 23
	    char *msg = calloc(1,
			       (strlen(co->domain) +
				strlen(hostname) +
				strlen(INVALID_COOKIE_DOMAIN_CONFIRMATION) +
				1));

	    sprintf(msg,
		    INVALID_COOKIE_DOMAIN_CONFIRMATION,
		    co->domain,
		    hostname);
	    if (!HTConfirm(msg)) {
		if (TRACE) {
		    fprintf(stderr,
		       "store_cookie: Rejecting domain '%s' for host '%s'.\n",
			    co->domain,
			    hostname);
		}
		freeCookie(co);
		co = NULL;
		FREE(msg);
		return;
	    }
	    FREE(msg);
d441 22
a462 33
    /*
     *	Ensure that the domain list exists.
     */
    if (domain_list == NULL) {
	atexit(LYCookieJar_free);
	domain_list = HTList_new();
	total_cookies = 0;
    }

    /*
     *	Look through domain_list to see if the cookie's domain
     *	is already listed.
     */
    if (dump_output_immediately) { /* Non-interactive, can't respond */
	if (cookie_list == NULL)
	    cookie_list = HTList_new();
    } else {
	cookie_list = NULL;
	for (hl = domain_list; hl != NULL; hl = hl->next) {
	    de = (domain_entry *)hl->object;
	    if ((de != NULL && de->domain != NULL) &&
		!strcmp(co->domain, de->domain)) {
		cookie_list = de->cookie_list;
		break;
	    }
	}
	if (hl == NULL) {
	    /*
	     *	Domain not found; add a new entry for this domain.
	     */
	    de = (domain_entry *)calloc(1, sizeof(domain_entry));
	    if (de == NULL)
		outofmem(__FILE__, "store_cookie");
d464 4
a467 4
	    cookie_list = de->cookie_list = HTList_new();
	    StrAllocCopy(de->domain, co->domain);
	    HTList_addObject(domain_list, de);
	}
d483 1
a483 1
	    c2->expires < now) {
d502 17
a518 1
	} else if ((c2) && (c2->pathlen) > (co->pathlen)) {
d527 1
a527 1
    if ((co->flags & COOKIE_FLAG_EXPIRES_SET) && co->expires < now) {
d534 2
a535 4
    } else if (HTList_count(cookie_list) > 50) {
	if (TRACE)
	    fprintf(stderr,
	"store_cookie: Domain's cookie limit exceeded!  Rejecting cookie.\n");
d542 10
a551 4
    } else if (total_cookies > 500) {
	if (TRACE)
	    fprintf(stderr,
	"store_cookie: Total cookie limit exceeded!  Rejecting cookie.\n");
d567 7
d575 6
a580 2
    } else if (HTConfirmCookie(de, hostname,
			       co->domain, co->path, co->name, co->value)) {
d612 16
a627 13
	if (TRACE && co) {
	    fprintf(stderr, "Checking cookie %lx %s=%s\n",
			    (long)hl,
			    (co->name ? co->name : "(no name)"),
			    (co->value ? co->value : "(no value)"));
	    fprintf(stderr, "%s %s %d %s %s %d%s\n",
			    hostname,
			    (co->domain ? co->domain : "(no domain)"),
			    host_matches(hostname, co->domain),
			    path, co->path, ((co->pathlen > 0) ?
			  strncmp(path, co->path, co->pathlen) : 0),
			    ((co->flags & COOKIE_FLAG_SECURE) ?
						   " secure" : ""));
d633 1
a633 1
	    co->expires < now) {
d675 1
a675 3
		    char version[16];
		    sprintf(version, "$Version=\"%d\"; ", co->version);
		    StrAllocCopy(header, version);
d688 21
a708 4
		if (len > 800) {
		    StrAllocCat(header, crlftab);
		    len = 0;
		}
d786 1
d813 2
a814 2
    if (TRACE && SetCookie && *p) {
	fprintf(stderr, "LYProcessSetCookies: Using Set-Cookie2 header.\n");
d816 1
a816 1
    while (NumCookies <= 50 && *p) {
d818 1
a818 3
	while (*p != '\0' && isspace((unsigned char)*p)) {
	    p++;
	}
d827 1
a827 3
	while (*p != '\0' && isspace((unsigned char)*p)) {
	    p++;
	}
d847 1
a847 3
	    while (*p != '\0' && isspace((unsigned char)*p)) {
		p++;
	    }
d909 1
a909 2
		    while (isspace((unsigned char)*p))
			p++;
d913 1
a913 3
			cp = (p + 1);
			while (*cp != '\0' && isspace((unsigned char)*cp))
			    cp++;
d918 1
a918 2
			    while (*cp != '\0' && isspace((unsigned char)*cp))
				cp1++;
d993 2
a994 2
		if (value_len > 4096) {
		    value_len = 4096;
d1061 1
a1061 3
			if (TRACE)
			    fprintf(stderr,
		     "LYProcessSetCookies: Rejecting commentURL value '%s'\n",
d1080 1
d1083 1
a1083 1
			value[1] != '\0' && strcmp(value, hostname)) {
d1091 1
a1091 2
				if (TRACE) {
				    fprintf(stderr,
a1093 1
				}
d1132 4
a1135 1
		    if (*cp == '\0') {
d1147 1
a1147 3
			char temp[256];
			sprintf(temp, "%d", port);
			StrAllocCopy(cur_cookie->PortList, temp);
d1177 1
a1177 3
			if (TRACE)
			    fprintf(stderr,
				    "LYSetCookie: expires %ld, %s",
a1194 1
		    known_attr = YES;
d1199 1
a1199 3
			    if (TRACE)
				fprintf(stderr,
					"LYSetCookie: expires %ld, %s",
d1215 8
a1222 1
	    if (!known_attr && value_end > value_start) {
d1227 2
a1228 1
		if (length <= 4096 && cur_cookie != NULL) {
d1237 1
a1237 2
		    if (TRACE) {
			fprintf(stderr,
d1243 6
a1248 2
			fprintf(stderr,
			"                     due to excessive length!\n");
d1257 1
d1280 3
a1282 1
    if (NumCookies <= 50 && length <= 4096 && cur_cookie != NULL) {
d1287 15
a1301 4
    } else if (cur_cookie != NULL) {
	if (TRACE) {
	    fprintf(stderr,
	 "LYProcessSetCookies: Rejecting Set-Cookie2: %s=%s\n",
d1304 2
a1305 6
	    fprintf(stderr,
	 "                     due to excessive %s%s%s\n",
		    (length > 4096 ? "length" : ""),
		    (length > 4096 && NumCookies > 50 ? " and " : ""),
		    (NumCookies > 50 ? "number!\n" : "!\n"));
	}
d1318 2
a1319 2
    if (TRACE && SetCookie2 && *p) {
	fprintf(stderr, "LYProcessSetCookies: Using Set-Cookie header.\n");
d1321 1
a1321 1
    while (NumCookies <= 50 && *p) {
d1323 1
a1323 3
	while (*p != '\0' && isspace((unsigned char)*p)) {
	    p++;
	}
d1332 1
a1332 3
	while (*p != '\0' && isspace((unsigned char)*p)) {
	    p++;
	}
d1348 1
a1348 3
	    while (*p != '\0' && isspace((unsigned char)*p)) {
		p++;
	    }
d1410 1
a1410 2
		    while (isspace((unsigned char)*p))
			p++;
d1414 1
a1414 3
			cp = (p + 1);
			while (*cp != '\0' && isspace((unsigned char)*cp))
			    cp++;
d1419 1
a1419 2
			    while (*cp != '\0' && isspace((unsigned char)*cp))
				cp1++;
d1495 2
a1496 2
		if (value_len > 4096) {
		    value_len = 4096;
d1563 1
a1563 3
			if (TRACE)
			    fprintf(stderr,
		     "LYProcessSetCookies: Rejecting commentURL value '%s'\n",
d1582 1
d1585 1
a1585 1
			value[1] != '\0' && strcmp(value, hostname)) {
d1593 1
a1593 2
				if (TRACE) {
				    fprintf(stderr,
a1595 1
				}
d1634 1
a1634 1
		    if (*cp == '\0') {
d1646 1
a1646 3
			char temp[256];
			sprintf(temp, "%d", port);
			StrAllocCopy(cur_cookie->PortList, temp);
d1657 1
a1657 1
		    cur_cookie->version < 0) {
d1702 8
a1709 1
	    if (!known_attr && value_end > value_start) {
d1714 1
a1714 1
		if (length <= 4096 && cur_cookie != NULL) {
d1728 1
a1728 3
		    if (TRACE) {
			fprintf(stderr,
			"LYProcessSetCookies: Rejecting Set-Cookie: %s=%s\n",
d1733 1
a1733 3
			fprintf(stderr,
			"                     due to excessive length!\n");
		    }
d1762 1
a1762 1
    if (NumCookies <= 50 && length <= 4096 && cur_cookie != NULL) {
d1771 1
a1771 3
	if (TRACE) {
	    fprintf(stderr,
	  "LYProcessSetCookies: Rejecting Set-Cookie: %s=%s\n",
d1774 4
a1777 6
	    fprintf(stderr,
	  "                     due to excessive %s%s%s\n",
		    (length > 4096 ? "length" : ""),
		    (length > 4096 && NumCookies > 50 ? " and " : ""),
		    (NumCookies > 50 ? "number!\n" : "!\n"));
	}
d1788 1
a1788 2
	if (TRACE) {
	    fprintf(stderr, "LYProcessSetCookie: attr=value pair: '%s=%s'\n",
d1791 4
a1794 5
	    if (co->expires > 0) {
		fprintf(stderr, "                    expires: %ld, %s\n",
				 (long)co->expires,
				 ctime(&co->expires));
	    }
d1800 1
a1800 4
	    if (TRACE) {
		fprintf(stderr,
			"                    Forced the 'secure' flag on.\n");
	    }
d1858 1
a1858 3
    if (TRACE) {
	fprintf(stderr,
		"LYSetCookie called with host '%s', path '%s',\n",
d1861 10
a1870 12
	if (SetCookie) {
	    fprintf(stderr, "    and Set-Cookie: '%s'\n",
			    (SetCookie ? SetCookie : ""));
	}
	if (SetCookie2) {
	    fprintf(stderr, "    and Set-Cookie2: '%s'\n",
			    (SetCookie2 ? SetCookie2 : ""));
	}
	if (LYSetCookies == FALSE || BadHeaders == TRUE) {
	    fprintf(stderr,
		    "    Ignoring this Set-Cookie/Set-Cookie2 request.\n");
	}
d1905 1
a1905 3
    if (TRACE) {
	fprintf(stderr,
		"LYCookie: Searching for '%s:%d', '%s'.\n",
a1908 1
    }
d1927 1
a1927 1
	    } else if (de->bv == QUERY_USER) {
d1937 1
a1937 1
		de = NULL;
d1945 165
d2111 1
a2111 3
     *	If we didn't set a header, perhaps all the cookies have
     *	expired and we deleted the last of them above, so check
     *	if we should delete and NULL the domain_list. - FM
d2113 68
a2180 4
    if (domain_list) {
	if (HTList_isEmpty(domain_list)) {
	    HTList_delete(domain_list);
	    domain_list = NULL;
d2183 3
a2185 1
    return(NULL);
d2187 1
d2215 1
a2215 1
    char buf[1024];
a2223 3
#ifdef VMS
    extern BOOLEAN HadVMSInterrupt;
#endif /* VMS */
d2228 1
a2228 1
    if (domain_list == NULL) {
d2267 1
d2289 2
d2292 1
d2310 1
a2310 1
				de = NULL;
d2345 2
a2346 2
				de->bv = QUERY_USER;
				_user_message(ALWAYS_ALLOWING_COOKIES,
a2347 1
				sleep(MessageSecs);
d2356 1
a2356 2
				_statusline(CANCELLED);
				sleep(MessageSecs);
d2369 1
a2369 1
				    de = NULL;
d2409 1
a2409 1
				    de = NULL;
d2417 1
a2417 1
				 *  Set to prompt for cookie acceptence
d2421 2
a2422 3
				_user_message(PROMTING_TO_ALLOW_COOKIES,
					      de->domain);
				sleep(MessageSecs);
d2431 2
a2432 3
				_user_message(NEVER_ALLOWING_COOKIES,
					      de->domain);
				sleep(MessageSecs);
d2449 3
a2451 2
	     *	There are no more domains left,
	     *	so delete the domain_list. - FM
a2452 2
	    HTList_delete(domain_list);
	    domain_list = NULL;
d2456 2
d2472 1
a2472 1
	sprintf(buf, CANNOT_CONVERT_I_TO_O,
d2475 1
d2483 4
a2486 1
    sprintf(buf, "<HEAD>\n<TITLE>%s</title>\n</HEAD>\n<BODY>\n",
d2488 11
a2498 1
    (*target->isa->put_block)(target, buf, strlen(buf));
d2500 2
a2501 12
    sprintf(buf, "<H1>%s</H1>\n", REACHED_COOKIE_JAR_PAGE);
    (*target->isa->put_block)(target, buf, strlen(buf));
    sprintf(buf, "<H2>%s Version %s</H2>\n", LYNX_NAME, LYNX_VERSION);
    (*target->isa->put_block)(target, buf, strlen(buf));

    sprintf(buf, "<NOTE>%s\n", ACTIVATE_TO_GOBBLE);
    (*target->isa->put_block)(target, buf, strlen(buf));
    sprintf(buf, "%s</NOTE>\n", OR_CHANGE_ALLOW);
    (*target->isa->put_block)(target, buf, strlen(buf));

    sprintf(buf, "<DL COMPACT>\n");
    (*target->isa->put_block)(target, buf, strlen(buf));
d2513 3
a2515 3
	sprintf(buf, "<DT><A HREF=\"LYNXCOOKIE://%s/\">Domain=%s</A>\n",
		      de->domain, de->domain);
	(*target->isa->put_block)(target, buf, strlen(buf));
d2518 1
a2518 1
		sprintf(buf, COOKIES_ALWAYS_ALLOWED);
d2521 1
a2521 1
		sprintf(buf, COOKIES_NEVER_ALLOWED);
d2524 7
a2530 2
		sprintf(buf, COOKIES_ALLOWED_VIA_PROMPT);
	    break;
d2532 3
a2534 1
	(*target->isa->put_block)(target, buf, strlen(buf));
d2561 1
a2561 1
	    sprintf(buf, "<DD><A HREF=\"LYNXCOOKIE://%s/%s\">%s=%s</A>\n",
d2565 6
a2570 1
	    (*target->isa->put_block)(target, buf, strlen(buf));
d2581 1
a2581 1
	    sprintf(buf, "<DD>Path=%s\n<DD>Port: %d Secure: %s Discard: %s\n",
d2586 1
a2586 1
	    (*target->isa->put_block)(target, buf, strlen(buf));
d2592 2
a2593 2
		sprintf(buf, "<DD>PortList=\"%s\"\n", co->PortList);
		(*target->isa->put_block)(target, buf, strlen(buf));
d2604 1
a2604 1
		sprintf(buf,
d2610 1
a2610 1
		(*target->isa->put_block)(target, buf, strlen(buf));
d2619 1
a2619 1
		sprintf(buf, "<DD>Comment: %s\n", comment);
d2621 1
a2621 1
		(*target->isa->put_block)(target, buf, strlen(buf));
d2627 3
a2629 3
	    sprintf(buf, "<DD><EM>Maximum Gobble Date:</EM> %s%s",
			 ((co->expires > 0 &&
			   !(co->flags & COOKIE_FLAG_DISCARD))
d2632 1
a2632 2
			 ((co->expires > 0 &&
			   !(co->flags & COOKIE_FLAG_DISCARD))
d2635 1
a2635 1
	    (*target->isa->put_block)(target, buf, strlen(buf));
d2637 2
a2638 2
	sprintf(buf, "</DT>\n");
	(*target->isa->put_block)(target, buf, strlen(buf));
d2640 2
a2641 2
    sprintf(buf, "</DL>\n</BODY>\n");
    (*target->isa->put_block)(target, buf, strlen(buf));
d2648 1
d2650 117
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
