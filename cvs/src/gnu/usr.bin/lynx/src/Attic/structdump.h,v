head	1.6;
access;
symbols
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.0.14
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.12
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.5;
commitid	EcR8E7r0stjLUV4p;

1.5
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.4;
commitid	lGGuvDWEniklWrQe;

1.4
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.22.04.01.51;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.01.18.59.40;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.25.18.17.14;	author maja;	state Exp;
branches;
next	;


desc
@@


1.6
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 *
 * Some macros to dump out formatted struct's via the trace file.  -KED
 *
 */
#ifndef STRUCTDUMP_H
#define STRUCTDUMP_H

/* usage: DUMPSTRUCT_LINK(link_ptr, "message"); */
#define   DUMPSTRUCT_LINK(L,X) \
if ((L)) { \
CTRACE((tfp, "\n" \
            "KED:     link_ptr=%p  sizeof=%d  ["X"]\n" \
            "link       struct {\n"      \
            "           *lname=%p\n"     \
            "            lname=|%s|\n"   \
            "          *target=%p\n"     \
            "           target=|%s|\n"   \
            "        *hightext=%p\n"     \
            "         hightext=|%s|\n"   \
            "       *hightext2=%p\n"     \
            "        hightext2=|%s|\n"   \
            " hightext2_offset=%d\n"     \
            "      inUnderline=%1x\n"    \
            "               lx=%d\n"     \
            "               ly=%d\n"     \
            "             type=%d\n"     \
            "    anchor_number=%d\n"     \
            "  anchor_line_num=%d\n"     \
            "            *form=%p\n"     \
            "}\n", \
            (L), sizeof(*((L))), \
            (L)->lname, (L)->lname, (L)->target, (L)->target, \
            (L)->l_hightext, (L)->l_hightext, \
	    (L)->l_hightext2, (L)->l_hightext2, \
            (L)->l_hightext2_offset, \
	    (L)->inUnderline, (L)->lx, (L)->ly, \
            (L)->type, (L)->anchor_number, (L)->anchor_line_num, (L)->form)); \
}else{ \
CTRACE((tfp, "\n" \
            "KED:     link_ptr=0x00000000  (NULL)     ["X"]\n")); \
} \
CTRACE_FLUSH(tfp);

/* usage: DUMPSTRUCT_ANCHOR(anchor_ptr, "message"); */
#define   DUMPSTRUCT_ANCHOR(A,X) \
if ((A)) { \
CTRACE((tfp, "\n" \
            "KED:   anchor_ptr=%p  sizeof=%d  ["X"]\n" \
            "TextAnchor struct {\n"      \
            "            *next=%p\n"     \
            "           number=%d\n"     \
            "         line_pos=%d\n"     \
            "           extent=%d\n"     \
            "         line_num=%d\n"     \
            "        *hightext=%p\n"     \
            "         hightext=|%s|\n"   \
            "       *hightext2=%p\n"     \
            "        hightext2=|%s|\n"   \
            "  hightext2offset=%d\n"     \
            "        link_type=%d\n"     \
            "     *input_field=%p\n"     \
            "      input_field=|%s|\n"   \
            "      show_anchor=%1x\n"    \
            "      inUnderline=%1x\n"    \
            "   expansion_anch=%1x\n"    \
            "          *anchor=%p\n"     \
            "}\n", \
            (A), sizeof(*((A))), \
            (A)->next, (A)->number, (A)->line_pos, \
            (A)->extent, (A)->line_num, \
            (A)->hightext, (A)->hightext, (A)->hightext2, (A)->hightext2, \
            (A)->hightext2offset, (A)->link_type, \
            (A)->input_field, (A)->input_field->name, (A)->show_anchor, \
            (A)->inUnderline, (A)->expansion_anch, (A)->anchor)); \
}else{ \
CTRACE((tfp, "\n" \
            "KED:   anchor_ptr=0x00000000  (NULL)     ["X"]\n")); \
} \
CTRACE_FLUSH(tfp);

/* usage: DUMPSTRUCT_FORM(forminfo_ptr, "message"); */
#define   DUMPSTRUCT_FORMINFO(F,X) \
if ((F)) { \
CTRACE((tfp, "\n" \
            "KED: forminfo_ptr=%p  sizeof=%d  ["X"]\n" \
            "FormInfo   struct {\n"      \
            "            *name=%p\n"     \
            "             name=|%s|\n"   \
            "           number=%d\n"     \
            "             type=%d\n"     \
            "           *value=%p\n"     \
            "            value=|%s|\n"   \
            "      *orig_value=%p\n"     \
            "       orig_value=|%s|\n"   \
            "             size=%d\n"     \
            "        maxlength=%d\n"     \
            "            group=%d\n"     \
            "        num_value=%d\n"     \
            "           hrange=%d\n"     \
            "           lrange=%d\n"     \
            "     *select_list=%p\n"     \
            "    submit_action=|%s|\n"   \
            "    submit_method=%d\n"     \
            "   submit_enctype=|%s|\n"   \
            "     submit_title=|%s|\n"   \
            "         no_cache=%1x\n"    \
            "  cp_submit_value=|%s|\n"   \
            "orig_submit_value=|%s|\n"   \
            "           size_l=%d\n"     \
            "         disabled=%d\n"     \
            "         readonly=%d\n"     \
            "          name_cs=%d\n"     \
            "         value_cs=%d\n"     \
            "        accept_cs=|%s|\n"   \
            "}\n", \
            (F), sizeof(*((F))), \
            (F)->name, (F)->name, (F)->number, (F)->type, \
            (F)->value, (F)->value, (F)->orig_value, (F)->orig_value, \
            (F)->size, (F)->maxlength, (F)->group, (F)->num_value, \
            (F)->hrange, (F)->lrange, (F)->select_list, (F)->submit_action, \
            (F)->submit_method, (F)->submit_enctype, (F)->submit_title, \
            (F)->no_cache, (F)->cp_submit_value, (F)->orig_submit_value, \
            (F)->size_l, (F)->disabled, (F)->readonly, (F)->name_cs, (F)->value_cs, \
            (F)->accept_cs)); \
} else { \
CTRACE((tfp, "\n" \
            "KED: forminfo_ptr=0x00000000  (NULL)     ["X"]\n")); \
} \
CTRACE_FLUSH(tfp);

/* usage: DUMPSTRUCT_LINE(htline_ptr, "message"); */
#define   DUMPSTRUCT_LINE(L,X) \
if ((L)) { \
CTRACE((tfp, "\n" \
            "KED: htline_ptr=%p  sizeof=%d  ["X"]\n" \
            "HTLine  struct {\n"      \
            "         *next=%p\n"     \
            "         *prev=%p\n"     \
            "        offset=%d\n"     \
            "          size=%d\n"     \
            "   split_after=%1x\n"    \
            "        bullet=%1x\n"    \
            "expansion_line=%1x\n"    \
            "w/o U_C_S def\n"         \
            "        data[]=%p\n"     \
            "          data=|%s|\n"   \
            "}\n", \
            (L), sizeof(*((L))), \
            (L)->next, (L)->prev, (L)->offset, (L)->size, (L)->split_after, \
            (L)->bullet, (L)->expansion_line, (L)->data, (L)->data)); \
}else{ \
CTRACE((tfp, "\n" \
            "KED: htline_ptr=0x00000000  (NULL)     ["X"]\n")); \
} \
CTRACE_FLUSH(tfp);

#endif /* STRUCTDUMP_H */
@


1.5
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.4
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d112 1
d124 1
a124 1
            (F)->size_l, (F)->disabled, (F)->name_cs, (F)->value_cs, \
@


1.3
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@a44 1

a81 1

a129 1

@


1.2
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d13 1
a13 1
            "KED:     link_ptr=0x%08x  sizeof=%d  ["X"]\n" \
d15 1
a15 1
            "           *lname=0x%08x\n" \
d17 1
a17 1
            "          *target=0x%08x\n" \
d19 1
a19 1
            "        *hightext=0x%08x\n" \
d21 1
a21 1
            "       *hightext2=0x%08x\n" \
d30 1
a30 1
            "            *form=0x%08x\n" \
d34 4
a37 2
            (L)->hightext, (L)->hightext, (L)->hightext2, (L)->hightext2, \
            (L)->hightext2_offset, (L)->inUnderline, (L)->lx, (L)->ly, \
d50 1
a50 1
            "KED:   anchor_ptr=0x%08x  sizeof=%d  ["X"]\n" \
d52 1
a52 1
            "            *next=0x%08x\n" \
a53 1
            "            start=%d\n"     \
d57 1
a57 1
            "        *hightext=0x%08x\n" \
d59 1
a59 1
            "       *hightext2=0x%08x\n" \
d63 1
a63 1
            "     *input_field=0x%08x\n" \
d68 1
a68 1
            "          *anchor=0x%08x\n" \
d71 1
a71 1
            (A)->next, (A)->number, (A)->start, (A)->line_pos, \
d75 1
a75 1
            (A)->input_field, (A)->input_field, (A)->show_anchor, \
d88 1
a88 1
            "KED: forminfo_ptr=0x%08x  sizeof=%d  ["X"]\n" \
d90 1
a90 1
            "            *name=0x%08x\n" \
d94 1
a94 1
            "           *value=0x%08x\n" \
d96 1
a96 1
            "      *orig_value=0x%08x\n" \
d104 1
a104 1
            "     *select_list=0x%08x\n" \
d138 1
a138 1
            "KED: htline_ptr=0x%08x  sizeof=%d  ["X"]\n" \
d140 2
a141 2
            "         *next=0x%08x\n" \
            "         *prev=0x%08x\n" \
d148 1
a148 1
            "        data[]=0x%08x\n" \
@


1.1
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d12 1
a12 1
CTRACE(tfp, "\n" \
d36 1
a36 1
            (L)->type, (L)->anchor_number, (L)->anchor_line_num, (L)->form); \
d38 2
a39 2
CTRACE(tfp, "\n" \
            "KED:     link_ptr=0x00000000  (NULL)     ["X"]\n"); \
d47 1
a47 1
CTRACE(tfp, "\n" \
d75 1
a75 1
            (A)->inUnderline, (A)->expansion_anch, (A)->anchor); \
d77 2
a78 2
CTRACE(tfp, "\n" \
            "KED:   anchor_ptr=0x00000000  (NULL)     ["X"]\n"); \
d86 1
a86 1
CTRACE(tfp, "\n" \
d125 4
a128 4
            (F)->accept_cs); \
}else{ \
CTRACE(tfp, "\n" \
            "KED: forminfo_ptr=0x00000000  (NULL)     ["X"]\n"); \
d136 1
a136 1
CTRACE(tfp, "\n" \
d152 1
a152 1
            (L)->bullet, (L)->expansion_line, (L)->data, (L)->data); \
d154 2
a155 2
CTRACE(tfp, "\n" \
            "KED: htline_ptr=0x00000000  (NULL)     ["X"]\n"); \
@

