head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.20
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.8;
commitid	EcR8E7r0stjLUV4p;

1.8
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.7;
commitid	lGGuvDWEniklWrQe;

1.7
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.22.04.01.50;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.25.14.29.10;	author margarida;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.17.12;	author maja;	state Exp;
branches
	1.2.10.1
	1.2.12.1;
next	1.1;

1.1
date	98.03.11.17.47.54;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.54;	author maja;	state Exp;
branches;
next	;

1.2.10.1
date	2003.01.22.23.54.24;	author miod;	state Exp;
branches;
next	;

1.2.12.1
date	2002.12.04.15.50.22;	author jason;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delinked from tree, now it goes to the bit bucket
@
text
@/*
 * $LynxId: LYStrings.h,v 1.113 2013/10/20 20:33:23 tom Exp $
 */
#ifndef LYSTRINGS_H
#define LYSTRINGS_H

#include <LYCurses.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SQUOTE '\''
#define DQUOTE '"'
#define ESCAPE '\\'
#define LPAREN '('
#define RPAREN ')'

    typedef const char *const Const2CharPtr;
    typedef enum {
	NORECALL = 0
	,RECALL_URL
	,RECALL_CMD
	,RECALL_MAIL
    } RecallType;

#define IS_UTF8_TTY (BOOLEAN) (LYCharSet_UC[current_char_set].enc == UCT_ENC_UTF8)
#define IS_CJK_TTY  (BOOLEAN) (HTCJK != NOCJK)

#define is8bits(ch) (BOOLEAN) (UCH(ch) >= 128)	/* isascii(ch) is not POSIX */

/*  UPPER8(ch1,ch2) is an extension of (TOUPPER(ch1) - TOUPPER(ch2))  */
    extern int UPPER8(int ch1,
		      int ch2);

    extern int get_mouse_link(void);
    extern int peek_mouse_link(void);
    extern int peek_mouse_levent(void);
    extern int fancy_mouse(WINDOW * win, int row, int *position);

    extern char *LYstrncpy(char *dst,
			   const char *src,
			   int n);
#define LYStrNCpy(dst,src,n) LYstrncpy(dst,src,(int)(n))
    extern void ena_csi(int flag);
    extern int get_popup_number(const char *msg,
				int *c,
				int *rel);
    extern int LYarrayLength(STRING2PTR list);
    extern int LYarrayWidth(STRING2PTR list);
    extern int LYgetch(void);
    extern int LYgetch_choice(void);
    extern int LYgetch_input(void);
    extern int LYgetch_single(void);
    extern int LYgetstr(char *inputline,
			int masked,
			size_t bufsize,
			RecallType recall);
#define LYGetStr(input,masked,bufsize,recall) \
	LYgetstr(input,masked,(size_t)(bufsize),recall)
    extern int LYgetBString(bstring **inputline,
			    int masked,
			    size_t max_cols,
			    RecallType recall);
    extern int LYscanFloat(const char *source, float *result);
    extern int LYscanFloat2(const char **source, float *result);
    extern char *LYstrsep(char **stringp,
			  const char *delim);
    extern char *LYstrstr(char *chptr,
			  const char *tarptr);
    extern char *LYmbcsstrncpy(char *dst,
			       const char *src,
			       int n_bytes,
			       int n_glyphs,
			       int utf_flag);
    extern const char *LYmbcs_skip_cells(const char *data,
					 int n_cells,
					 int utf_flag);
    extern const char *LYmbcs_skip_glyphs(const char *data,
					  int n_glyphs,
					  int utf_flag);
    extern int LYmbcsstrlen(const char *str,
			    int utf_flag,
			    int count_gcells);

    extern const char *LYno_attr_mbcs_strstr(const char *chptr,
					     const char *tarptr,
					     int utf_flag,
					     int count_gcells,
					     int *nstartp,
					     int *nendp);
    extern const char *LYno_attr_mbcs_case_strstr(const char *chptr,
						  const char *tarptr,
						  int utf_flag,
						  int count_gcells,
						  int *nstartp,
						  int *nendp);

#define LYno_attr_mb_strstr(chptr, tarptr, utf_flag, count_gcells, nstartp, nendp) \
	(LYcase_sensitive \
	    ? LYno_attr_mbcs_strstr(chptr, tarptr, utf_flag, count_gcells, nstartp, nendp) \
	    : LYno_attr_mbcs_case_strstr(chptr, tarptr, utf_flag, count_gcells, nstartp, nendp))

    extern const char *LYno_attr_char_strstr(const char *chptr,
					     const char *tarptr);
    extern const char *LYno_attr_char_case_strstr(const char *chptr,
						  const char *tarptr);

#define LYno_attr_strstr(chptr, tarptr) \
	(LYcase_sensitive \
	? LYno_attr_char_strstr(chptr, tarptr) \
	: LYno_attr_char_case_strstr(chptr, tarptr))

    extern char *SNACopy(char **dest,
			 const char *src,
			 size_t n);
    extern char *SNACat(char **dest,
			const char *src,
			size_t n);

#define StrnAllocCopy(dest, src, n)  SNACopy (&(dest), src, n)
#define StrnAllocCat(dest, src, n)   SNACat  (&(dest), src, n)

    extern char *LYSafeGets(char **src, FILE *fp);

#ifdef USE_CMD_LOGGING
    extern BOOL LYHaveCmdScript(void);
    extern int LYReadCmdKey(int mode);
    extern void LYCloseCmdLogfile(void);
    extern void LYOpenCmdLogfile(int argc, char **argv);
    extern void LYOpenCmdScript(void);
    extern void LYWriteCmdKey(int ch);

#else
#define LYHaveCmdScript() FALSE
#define LYReadCmdKey(mode) LYgetch_for(mode)
#define LYCloseCmdLogfile()	/* nothing */
#endif

/* values for LYgetch */
    /* The following are lynxkeycodes, not to be confused with
     * lynxactioncodes (LYK_*) to which they are often mapped.
     * The lynxkeycodes include all single-byte keys as a subset.
     * These are "extra" keys which do not fit into a single byte.
     */
    typedef enum {
	UNKNOWN_KEY = -1
	,UPARROW_KEY = 256
	,DNARROW_KEY
	,RTARROW_KEY
	,LTARROW_KEY
	,PGDOWN_KEY
	,PGUP_KEY
	,HOME_KEY
	,END_KEY
	,F1_KEY
	,DO_KEY
	,FIND_KEY
	,SELECT_KEY
	,INSERT_KEY
	,REMOVE_KEY
	,DO_NOTHING
	,BACKTAB_KEY
	/* these should be referenced by name in keymap, e.g., "f2" */
	,F2_KEY
	,F3_KEY
	,F4_KEY
	,F5_KEY
	,F6_KEY
	,F7_KEY
	,F8_KEY
	,F9_KEY
	,F10_KEY
	,F11_KEY
	,F12_KEY
	/* this has known value */
	,MOUSE_KEY = 285	/* 0x11D */
    } LYExtraKeys;

/*  ***** NOTES: *****
    If you add definitions for new lynxkeycodes to the above list that need to
    be mapped to LYK_* lynxactioncodes -

    - AT LEAST the tables keymap[] and key_override[] in LYKeymap.c have to be
      changed/reviewed, AS WELL AS the lineedit binding tables in LYEditmap.c !

    - KEYMAP_SIZE, defined in LYKeymap.h, may need to be changed !

    - See also table named_keys[] in LYKeymap.c for 'pretty' strings for the
      keys with codes >= 256 (to appear on the 'K'eymap page).  New keycodes
      should probably be assigned consecutively, so their key names can be
      easily added to named_keys[] (but see next point).  They should also be
      documented in lynx.cfg.

    - The DOS port uses its own native codes for some keys, unless they are
      remapped by the code in LYgetch().  See *.key files in docs/ directory.
      Adding new keys here may conflict with those codes (affecting DOS users),
      unless/until remapping is added or changed in LYgetch().  (N)curses
      keypad codes (KEY_* from curses.h) can also directly appear as
      lynxkeycodes and conflict with our assignments, although that shouldn't
      happen - the useful ones should be recognized in LYgetch().

    - The actual recognition of raw input keys or escape sequences, and mapping
      to our lynxkeycodes, take place in LYgetch() and/or its subsidiary
      functions and/or the curses/slang/etc.  libraries.

    The basic lynxkeycodes can appear combined with various flags in
    higher-order bits as extended lynxkeycodes; see macros in LYKeymap.h.  The
    range of possible basic values is therefore limited, they have to be less
    than LKC_ISLKC (even if KEYMAP_SIZE is increased).
*/

#  define FOR_PANEL	0	/* normal screen, also LYgetch default */
#  define FOR_CHOICE	1	/* mouse menu */
#  define FOR_INPUT	2	/* form input and textarea field */
#  define FOR_PROMPT	3	/* string prompt editing */
#  define FOR_SINGLEKEY	4	/* single key prompt, confirmation */

#ifdef USE_ALT_BINDINGS
/*  Enable code implementing additional, mostly emacs-like, line-editing
    functions. - kw */
#define ENHANCED_LINEEDIT
#endif

/* FieldEditor preserves state between calls to LYDoEdit
 */
    typedef struct {

	int efStartX;		/* Origin of edit-field                      */
	int efStartY;
	int efWidth;		/* Screen real estate for editing            */

	char *efBuffer;		/* the buffer which is being edited */
	size_t efBufInUse;	/* current size of string.                   */
	size_t efBufAlloc;	/* current buffer-size, excluding nul at end */
	size_t efBufLimit;	/* buffer size limit, zero if indefinite     */

	char efPadChar;		/* Right padding  typically ' ' or '_'       */
	BOOL efIsMasked;	/* Masked password entry flag                */

	BOOL efIsDirty;		/* accumulate refresh requests               */
	BOOL efIsPanned;	/* Need horizontal scroll indicator          */
	int efDpyStart;		/* Horizontal scroll offset                  */
	int efEditAt;		/* Insertion point in string                 */
	int efPanMargin;	/* Number of columns look-ahead/look-back    */
	int efInputMods;	/* Modifiers for next input lynxkeycode */
#ifdef ENHANCED_LINEEDIT
	int efEditMark;		/* position of emacs-like mark, or -1-pos to denote
				   unactive mark.  */
#endif

	int *efOffs2Col;	/* fixups for multibyte characters */

    } FieldEditor;

/* line-edit action encoding */

    typedef enum {
	LYE_UNKNOWN = -1	/* no binding            */
	,LYE_NOP = 0		/* Do Nothing            */
	,LYE_CHAR		/* Insert printable char */
	,LYE_ENTER		/* Input complete, return char/lynxkeycode */
	,LYE_TAB		/* Input complete, return TAB  */
	,LYE_STOP		/* Input complete, deactivate  */
	,LYE_ABORT		/* Input cancelled       */

	,LYE_FORM_PASS		/* In form fields: input complete,
				   return char / lynxkeycode;
				   Elsewhere: Do Nothing */

	,LYE_DELN		/* Delete next/curr char */
	,LYE_DELC		/* Obsolete (DELC case was equiv to DELN) */
	,LYE_DELP		/* Delete prev      char */
	,LYE_DELNW		/* Delete next word      */
	,LYE_DELPW		/* Delete prev word      */

	,LYE_ERASE		/* Erase the line        */

	,LYE_BOL		/* Go to begin of line   */
	,LYE_EOL		/* Go to end   of line   */
	,LYE_FORW		/* Cursor forwards       */
	,LYE_FORW_RL		/* Cursor forwards or right link */
	,LYE_BACK		/* Cursor backwards      */
	,LYE_BACK_LL		/* Cursor backwards or left link */
	,LYE_FORWW		/* Word forward          */
	,LYE_BACKW		/* Word back             */

	,LYE_LOWER		/* Lower case the line   */
	,LYE_UPPER		/* Upper case the line   */

	,LYE_LKCMD		/* Invoke command prompt */

	,LYE_AIX		/* Hex 97                */

	,LYE_DELBL		/* Delete back to BOL    */
	,LYE_DELEL		/* Delete thru EOL       */

	,LYE_SWMAP		/* Switch input keymap   */

	,LYE_TPOS		/* Transpose characters  */

	,LYE_SETM1		/* Set modifier 1 flag   */
	,LYE_SETM2		/* Set modifier 2 flag   */
	,LYE_UNMOD		/* Fall back to no-modifier command */

	,LYE_C1CHAR		/* Insert C1 char if printable */

	,LYE_SETMARK		/* emacs-like set-mark-command */
	,LYE_XPMARK		/* emacs-like exchange-point-and-mark */
	,LYE_KILLREG		/* emacs-like kill-region */
	,LYE_YANK		/* emacs-like yank */
#ifdef CAN_CUT_AND_PASTE
	,LYE_PASTE		/* ClipBoard to Lynx       */
#endif
    } LYEditCodes;

/* All preceding values must be within 0x00..0x7f - kw */

/*  The following are meant to be bitwise or-ed:  */
#define LYE_DF       0x80	/* Flag to set modifier 3 AND do other
				   action */
#define LYE_FORM_LAC 0x1000	/* Flag to pass lynxactioncode given by
				   lower bits.  Doesn't fit in a char! */

#if defined(USE_KEYMAPS)
    extern int lynx_initialize_keymaps(void);
    extern int map_string_to_keysym(const char *src, int *lec);
#endif

    extern BOOL LYRemapEditBinding(int xlkc, int lec, int select_edi);	/* in LYEditmap.c */
    extern BOOLEAN LYRemoveNewlines(char *buffer);
    extern BOOLEAN LYTrimStartfile(char *buffer);
    extern LYExtraKeys LYnameToExtraKeys(const char *name);
    extern char *LYElideString(char *str, int cut_pos);
    extern char *LYReduceBlanks(char *buffer);
    extern char *LYRemoveBlanks(char *buffer);
    extern char *LYSkipBlanks(char *buffer);
    extern char *LYSkipNonBlanks(char *buffer);
    extern char *LYTrimNewline(char *buffer);
    extern const char *LYSkipCBlanks(const char *buffer);
    extern const char *LYSkipCNonBlanks(const char *buffer);
    extern const char *LYextraKeysToName(LYExtraKeys code);
    extern int EditBinding(int ch);	/* in LYEditmap.c */
    extern int LYDoEdit(FieldEditor * edit, int ch, int action, int maxMessage);
    extern int LYEditKeyForAction(int lac, int *pmodkey);	/* LYEditmap.c */
    extern int LYKeyForEditAction(int lec);	/* in LYEditmap.c */
    extern int LYhandlePopupList(int cur_choice, int ly, int lx,
				 STRING2PTR choices,
				 int width,
				 int i_length,
				 int disabled,
				 int for_mouse);
    extern void LYCloseCloset(RecallType recall);
    extern void LYEscapeStartfile(char **buffer);
    extern void LYFinishEdit(FieldEditor * edit);
    extern void LYLowerCase(char *buffer);
    extern void LYRefreshEdit(FieldEditor * edit);
    extern void LYSetupEdit(FieldEditor * edit, char *old,
			    size_t buffer_limit,
			    int display_limit);
    extern void LYTrimAllStartfile(char *buffer);
    extern void LYTrimLeading(char *buffer);
    extern void LYTrimTrailing(char *buffer);
    extern void LYUpperCase(char *buffer);

    typedef short LYEditCode;

    typedef struct {
	int code;
	LYEditCode edit;
    } LYEditInit;

    typedef struct {
	const char *name;
	const LYEditInit *init;
	LYEditCode *used;
    } LYEditConfig;

    extern int current_lineedit;
    extern const char *LYEditorNames[];
    extern LYEditConfig LYLineEditors[];
    extern const char *LYLineeditHelpURLs[];

#define CurrentLineEditor() LYLineEditors[current_lineedit].used

    extern void LYinitEditmap(void);
    extern void LYinitKeymap(void);
    extern const char *LYLineeditHelpURL(void);

    extern int escape_bound;

#define LYLineEdit(e,c,m) LYDoEdit(e, c, EditBinding(c) & ~LYE_DF, m)

    extern int LYEditInsert(FieldEditor * edit, unsigned const char *s,
			    int len, int map_active,
			    int maxMessage);

#ifdef __cplusplus
}
#endif
#endif				/* LYSTRINGS_H */
@


1.8
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.7
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d2 1
a2 1
 * $LynxId: LYStrings.h,v 1.72 2009/01/25 19:49:28 tom Exp $
d12 8
d44 2
a45 1
    extern void ena_csi(BOOLEAN flag);
d49 2
a50 2
    extern int LYarrayLength(const char **list);
    extern int LYarrayWidth(const char **list);
d56 1
a56 1
			int hidden,
d59 6
d75 1
a75 1
			       BOOL utf_flag);
d78 1
a78 1
					 BOOL utf_flag);
d81 1
a81 1
					  BOOL utf_flag);
d83 2
a84 2
			    BOOL utf_flag,
			    BOOL count_gcells);
d88 2
a89 2
					     BOOL utf_flag,
					     BOOL count_gcells,
d94 2
a95 2
						  BOOL utf_flag,
						  BOOL count_gcells,
a98 2
#define non_empty(s) !isEmpty(s)

d100 1
a100 1
	(case_sensitive \
d110 1
a110 1
	(case_sensitive \
d116 1
a116 1
			 int n);
d119 1
a119 1
			int n);
d126 1
a126 1
#ifdef EXP_CMD_LOGGING
d141 39
a179 21
/* The following are lynxkeycodes, not to be confused with
   lynxactioncodes (LYK_*) to which they are often mapped.
   The lynxkeycodes include all single-byte keys as a subset. - kw
*/
#define UPARROW		256	/* 0x100 */
#define DNARROW		257	/* 0x101 */
#define RTARROW		258	/* 0x102 */
#define LTARROW		259	/* 0x103 */
#define PGDOWN		260	/* 0x104 */
#define PGUP		261	/* 0x105 */
#define HOME		262	/* 0x106 */
#define END_KEY		263	/* 0x107 */
#define F1		264	/* 0x108 */
#define DO_KEY		265	/* 0x109 */
#define FIND_KEY	266	/* 0x10A */
#define SELECT_KEY	267	/* 0x10B */
#define INSERT_KEY	268	/* 0x10C */
#define REMOVE_KEY	269	/* 0x10D */
#define DO_NOTHING	270	/* 0x10E */
#define BACKTAB_KEY	271	/* 0x10F */
#define MOUSE_KEY	285	/* 0x11D */
d196 1
a196 1
      remapped by the code in LYgetch().  See *.key files in docs/ directory. 
d219 1
a219 4
#define VISIBLE  0
#define HIDDEN   1

#ifdef EXP_ALT_BINDINGS
d225 1
a225 3
#define MAX_EDIT 1024

/* EditFieldData preserves state between calls to LYEdit1
d227 1
a227 1
    typedef struct _EditFieldData {
d229 18
a246 15
	int sx;			/* Origin of editfield                       */
	int sy;
	int dspwdth;		/* Screen real estate for editting           */

	int strlen;		/* Current size of string.                   */
	int maxlen;		/* Max size of string, excluding zero at end */
	char pad;		/* Right padding  typically ' ' or '_'       */
	BOOL hidden;		/* Masked password entry flag                */

	BOOL dirty;		/* accumulate refresh requests               */
	BOOL panon;		/* Need horizontal scroll indicator          */
	int xpan;		/* Horizontal scroll offset                  */
	int pos;		/* Insertion point in string                 */
	int margin;		/* Number of columns look-ahead/look-back    */
	int current_modifiers;	/* Modifiers for next input lynxkeycode */
d248 1
a248 1
	int mark;		/* position of emacs-like mark, or -1-pos to denote
d252 1
a252 1
	char buffer[MAX_EDIT];	/* String buffer                          */
d254 1
a254 4
	int offset2col[MAX_EDIT * 2];
	int col2offset[MAX_EDIT * 2];

    } EditFieldData;
d259 2
a260 1
	LYE_NOP = 0		/* Do Nothing            */
d330 1
a330 5
    extern char *LYElideString(char *str,
			       int cut_pos);
    extern void LYEscapeStartfile(char **buffer);
    extern void LYLowerCase(char *buffer);
    extern void LYUpperCase(char *buffer);
d332 3
d339 1
d342 1
a342 9
    extern void LYTrimLeading(char *buffer);
    extern char *LYTrimNewline(char *buffer);
    extern void LYTrimTrailing(char *buffer);
    extern void LYTrimAllStartfile(char *buffer);
    extern BOOLEAN LYTrimStartfile(char *buffer);
    extern void LYSetupEdit(EditFieldData *edit, char *old,
			    int maxstr,
			    int maxdsp);
    extern void LYRefreshEdit(EditFieldData *edit);
d344 2
a345 3
    extern BOOL LYRemapEditBinding(int xlkc,
				   int lec,
				   int select_edi);	/* in LYEditmap.c */
d347 2
a348 9
    extern int LYEditKeyForAction(int lac, int *pmodkey);	/* LYEditmap.c */
    extern int LYEdit1(EditFieldData *edit, int ch,
		       int action,
		       BOOL maxMessage);
    extern void LYCloseCloset(RecallType recall);
    extern int LYhandlePopupList(int cur_choice,
				 int ly,
				 int lx,
				 const char **choices,
d352 15
a366 1
				 BOOLEAN for_mouse);
d368 10
a377 1
    typedef unsigned char LYEditCode;
d380 2
a381 2
    extern const char *LYLineeditNames[];
    extern LYEditCode *LYLineEditors[];
d384 1
a384 1
#define CurrentLineEditor() LYLineEditors[current_lineedit]
d386 2
d392 1
a392 4
#define LYLineEdit(e,c,m) LYEdit1(e, c, EditBinding(c) & ~LYE_DF, m)

/* Dummy initializer for LYEditmap.c */
    extern int LYEditmapDeclared(void);
d394 1
a394 2
    extern int LYEditInsert(EditFieldData *edit,
			    unsigned const char *s,
d396 1
a396 1
			    BOOL maxMessage);
@


1.6
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 3
d19 4
a22 1
#define is8bits(ch) (UCH(ch) >= 128)	/* isascii(ch) is not POSIX */
d50 2
d61 3
d197 2
d223 4
a226 1
	char buffer[1024];	/* String buffer                          */
d341 1
a341 2
				 BOOLEAN for_mouse,
				 BOOLEAN numbered);
d349 2
@


1.5
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d6 9
a14 6
typedef enum {
    NORECALL = 0
    , RECALL_URL
    , RECALL_CMD
    , RECALL_MAIL
} RecallType;
d19 53
a71 64
extern int UPPER8  PARAMS((
	int		ch1,
	int		ch2));

extern int get_mouse_link NOPARAMS;
extern int peek_mouse_link NOPARAMS;
extern int peek_mouse_levent NOPARAMS;
extern int fancy_mouse PARAMS((WINDOW *win, int row, int *position));

extern char * LYstrncpy PARAMS((
	char *		dst,
	CONST char *	src,
	int		n));
extern void ena_csi PARAMS((BOOLEAN flag));
extern int get_popup_number PARAMS((
	char *		msg,
	int *		c,
	int *		rel));
extern int LYarrayLength PARAMS((CONST char ** list));
extern int LYarrayWidth PARAMS((CONST char ** list));
extern int LYgetch NOPARAMS;
extern int LYgetch_choice NOPARAMS;
extern int LYgetch_input NOPARAMS;
extern int LYgetch_single NOPARAMS;
extern int LYgetstr PARAMS((
	char *		inputline,
	int		hidden,
	size_t		bufsize,
	RecallType	recall));
extern char *LYstrsep PARAMS((
	char **		stringp,
	CONST char *	delim));
extern char * LYstrstr PARAMS((
	char *		chptr,
	CONST char *	tarptr));
extern char * LYmbcsstrncpy PARAMS((
	char *		dst,
	CONST char *	src,
	int		n_bytes,
	int		n_glyphs,
	BOOL		utf_flag));
extern char * LYmbcs_skip_glyphs PARAMS((
	char *		data,
	int		n_glyphs,
	BOOL		utf_flag));
extern int LYmbcsstrlen PARAMS((
	char *		str,
	BOOL		utf_flag,
	BOOL		count_gcells));

extern char * LYno_attr_mbcs_strstr PARAMS((
	char *		chptr,
	CONST char *	tarptr,
	BOOL		utf_flag,
	BOOL		count_gcells,
	int *		nstartp,
	int *		nendp));
extern char * LYno_attr_mbcs_case_strstr PARAMS((
	char *		chptr,
	CONST char *	tarptr,
	BOOL		utf_flag,
	BOOL		count_gcells,
	int *		nstartp,
	int *		nendp));
d80 4
a83 6
extern char * LYno_attr_char_strstr PARAMS((
	char *		chptr,
	char *		tarptr));
extern char * LYno_attr_char_case_strstr PARAMS((
	char *		chptr,
	char *		tarptr));
d90 7
a96 8
extern char * SNACopy PARAMS((
	char **		dest,
	CONST char *	src,
	int		n));
extern char * SNACat PARAMS((
	char **		dest,
	CONST char *	src,
	int		n));
d100 1
a100 1
extern char *LYSafeGets PARAMS((char ** src, FILE * fp));
d103 7
a109 6
extern BOOL LYHaveCmdScript NOPARAMS;
extern int LYReadCmdKey PARAMS((int mode));
extern void LYCloseCmdLogfile NOPARAMS;
extern void LYOpenCmdLogfile PARAMS((int argc, char **argv));
extern void LYOpenCmdScript NOPARAMS;
extern void LYWriteCmdKey PARAMS((int ch));
d113 1
a113 1
#define LYCloseCmdLogfile() /* nothing */
d139 6
a144 5
    If you add definitions for new lynxkeycodes to the above list that
    need to be mapped to LYK_* lynxactioncodes -
    - AT LEAST the tables keymap[] and key_override[] in LYKeymap.c
      have to be changed/reviewed, AS WELL AS the lineedit binding
      tables in LYEditmap.c !
d146 19
a164 17
    - See also table named_keys[] in LYKeymap.c for 'pretty' strings
      for the keys with codes >= 256 (to appear on the 'K'eymap page).
      New keycodes should probably be assigned consecutively, so their
      key names can be easily added to named_keys[] (but see next point).
      They should also be documented in lynx.cfg.
    - The DOS port uses its own native codes for some keys, unless
      they are remapped by the code in LYgetch().  See *.key files
      in docs/ directory.  Adding new keys here may conflict with
      those codes (affecting DOS users), unless/until remapping is
      added or changed in LYgetch().
      (N)curses keypad codes (KEY_* from curses.h) can also directly
      appear as lynxkeycodes and conflict with our assignments, although
      that shouldn't happen - the useful ones should be recognized in
      LYgetch().
    - The actual recognition of raw input keys or escape sequences, and
      mapping to our lynxkeycodes, take place in LYgetch() and/or its
      subsidiary functions and/or the curses/slang/etc. libraries.
d166 3
a168 3
    higher-order bits as extended lynxkeycodes; see macros in LYKeymap.h.
    The range of possible basic values is therefore limited, they have
    to be less than LKC_ISLKC (even if KEYMAP_SIZE is increased).
d188 1
a188 1
typedef struct _EditFieldData {
d190 15
a204 15
        int  sx;        /* Origin of editfield                       */
        int  sy;
        int  dspwdth;   /* Screen real estate for editting           */

        int  strlen;    /* Current size of string.                   */
        int  maxlen;    /* Max size of string, excluding zero at end */
        char pad;       /* Right padding  typically ' ' or '_'       */
        BOOL hidden;    /* Masked password entry flag                */

        BOOL dirty;     /* accumulate refresh requests               */
        BOOL panon;     /* Need horizontal scroll indicator          */
        int  xpan;      /* Horizontal scroll offset                  */
        int  pos;       /* Insertion point in string                 */
        int  margin;    /* Number of columns look-ahead/look-back    */
        int  current_modifiers; /* Modifiers for next input lynxkeycode */
d206 2
a207 2
	int  mark;	/* position of emacs-like mark, or -1-pos to denote
				unactive mark.  */
d210 1
a210 1
        char buffer[1024]; /* String buffer                          */
d212 1
a212 1
} EditFieldData;
d216 7
a222 7
typedef enum {
    LYE_NOP = 0			/* Do Nothing		 */
    ,LYE_CHAR			/* Insert printable char */
    ,LYE_ENTER			/* Input complete, return char/lynxkeycode */
    ,LYE_TAB			/* Input complete, return TAB  */
    ,LYE_STOP			/* Input complete, deactivate  */
    ,LYE_ABORT			/* Input cancelled	 */
d224 1
a224 1
    ,LYE_FORM_PASS		/* In form fields: input complete,
d228 5
a232 5
    ,LYE_DELN			/* Delete next/curr char */
    ,LYE_DELC			/* Obsolete (DELC case was equiv to DELN) */
    ,LYE_DELP			/* Delete prev	    char */
    ,LYE_DELNW			/* Delete next word	 */
    ,LYE_DELPW			/* Delete prev word	 */
d234 1
a234 1
    ,LYE_ERASE			/* Erase the line	 */
d236 8
a243 8
    ,LYE_BOL			/* Go to begin of line	 */
    ,LYE_EOL			/* Go to end   of line	 */
    ,LYE_FORW			/* Cursor forwards	 */
    ,LYE_FORW_RL		/* Cursor forwards or right link */
    ,LYE_BACK			/* Cursor backwards	 */
    ,LYE_BACK_LL		/* Cursor backwards or left link */
    ,LYE_FORWW			/* Word forward		 */
    ,LYE_BACKW			/* Word back		 */
d245 2
a246 2
    ,LYE_LOWER			/* Lower case the line	 */
    ,LYE_UPPER			/* Upper case the line	 */
d248 1
a248 1
    ,LYE_LKCMD			/* Invoke command prompt */
d250 1
a250 1
    ,LYE_AIX			/* Hex 97		 */
d252 2
a253 2
    ,LYE_DELBL			/* Delete back to BOL	 */
    ,LYE_DELEL			/* Delete thru EOL	 */
d255 1
a255 1
    ,LYE_SWMAP			/* Switch input keymap	 */
d257 1
a257 1
    ,LYE_TPOS			/* Transpose characters	 */
d259 3
a261 3
    ,LYE_SETM1			/* Set modifier 1 flag	 */
    ,LYE_SETM2			/* Set modifier 2 flag	 */
    ,LYE_UNMOD			/* Fall back to no-modifier command */
d263 1
a263 1
    ,LYE_C1CHAR			/* Insert C1 char if printable */
d265 4
a268 4
    ,LYE_SETMARK		/* emacs-like set-mark-command */
    ,LYE_XPMARK			/* emacs-like exchange-point-and-mark */
    ,LYE_KILLREG		/* emacs-like kill-region */
    ,LYE_YANK			/* emacs-like yank */
d270 1
a270 1
    ,LYE_PASTE			/* ClipBoard to Lynx	   */
d272 2
a273 1
} LYEditCodes;
d277 1
a277 1
#define LYE_DF       0x80       /* Flag to set modifier 3 AND do other
d279 1
a279 1
#define LYE_FORM_LAC 0x1000     /* Flag to pass lynxactioncode given by
a281 1

d283 2
a284 2
extern int lynx_initialize_keymaps NOPARAMS;
extern int map_string_to_keysym PARAMS((CONST char * src, int *lec));
d287 47
a333 68
extern char *LYElideString PARAMS((
	char *		str,
	int		cut_pos));
extern void LYEscapeStartfile PARAMS((
	char **		buffer));
extern void LYLowerCase PARAMS((
	char *		buffer));
extern void LYUpperCase PARAMS((
	char *		buffer));
extern BOOLEAN LYRemoveNewlines PARAMS((
	char *		buffer));
extern char * LYRemoveBlanks PARAMS((
	char *		buffer));
extern char * LYSkipBlanks PARAMS((
	char *		buffer));
extern char * LYSkipNonBlanks PARAMS((
	char *		buffer));
extern CONST char * LYSkipCBlanks PARAMS((
	CONST char *	buffer));
extern CONST char * LYSkipCNonBlanks PARAMS((
	CONST char *	buffer));
extern void LYTrimLeading PARAMS((
	char *		buffer));
extern char * LYTrimNewline PARAMS((
	char *		buffer));
extern void LYTrimTrailing PARAMS((
	char *		buffer));
extern void LYTrimAllStartfile PARAMS((
	char *		buffer));
extern BOOLEAN LYTrimStartfile PARAMS((
	char *		buffer));
extern void LYSetupEdit PARAMS((
	EditFieldData *	edit,
	char *		old,
	int		maxstr,
	int		maxdsp));
extern void LYRefreshEdit PARAMS((
	EditFieldData *	edit));
extern int EditBinding PARAMS((int ch));		   /* in LYEditmap.c */
extern BOOL LYRemapEditBinding PARAMS((
	int		xlkc,
	int		lec,
	int 		select_edi));			   /* in LYEditmap.c */
extern int LYKeyForEditAction PARAMS((int lec));	   /* in LYEditmap.c */
extern int LYEditKeyForAction PARAMS((int lac, int *pmodkey));/* LYEditmap.c */
extern int LYEdit1 PARAMS((
	EditFieldData *	edit,
	int		ch,
	int		action,
	BOOL		maxMessage));
extern void LYCloseCloset PARAMS((RecallType recall));
extern int LYhandlePopupList PARAMS((
	int		cur_choice,
	int		ly,
	int		lx,
	CONST char **	choices,
	int		width,
	int		i_length,
	int		disabled,
	BOOLEAN		for_mouse,
	BOOLEAN		numbered));

typedef unsigned char LYEditCode;

extern int current_lineedit;
extern char * LYLineeditNames[];
extern LYEditCode * LYLineEditors[];
extern CONST char * LYLineeditHelpURLs[];
d335 1
a335 1
extern CONST char * LYLineeditHelpURL NOPARAMS;
d337 1
a337 1
extern int escape_bound;
d339 1
a339 1
#define LYLineEdit(e,c,m) LYEdit1(e,c,EditBinding(c)&~LYE_DF,m)
d342 1
a342 1
extern int LYEditmapDeclared NOPARAMS;
d344 4
a347 1
int LYEditInsert PARAMS((EditFieldData *edit, unsigned char *s,	int len, int map_active, BOOL maxMessage));
d349 4
a352 1
#endif /* LYSTRINGS_H */
@


1.4
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d13 2
d81 2
a125 4
#ifdef EXP_FILE_UPLOAD
extern void base64_encode PARAMS((char * dest, char * src, int len));
#endif

d303 3
a305 1
extern void LYRemoveBlanks PARAMS((
d316 2
@


1.3
log
@Fix URL CRLF Injection bug.
--
A CRLF injection vulnerability has been reported for Lynx that
may allow an attacker to include extra HTTP headers when viewing
web pages.
If Lynx is called from the command line, carriage return and line
feed (CRLF) characters may be included in the specified URL.
These characters are not escaped when the input is used to construct
a HTTP request.

URL: http://www.flora.org/lynx-dev/html/month082002/msg00211.html

henning@@ fgs@@ pjanzen@@ pvalchev@@ ok
@
text
@d6 7
a22 7
#ifdef HAVE_STRERROR
#define LYStrerror strerror
#else
extern char *LYStrerror PARAMS((
	int		code));
#endif /* HAVE_STRERROR */

d28 6
d35 3
a37 2
extern int LYgetch_for PARAMS((
	int		code));
d42 1
a42 1
	int		recall));
d61 3
a63 1
	BOOL		utf_flag));
d66 1
a66 1
	char *		tarptr,
d68 1
d73 1
a73 1
	char *		tarptr,
d75 1
d78 6
d91 5
d109 17
d127 4
d147 2
a148 2
#define MOUSE_KEY	0x11d	/* 0x11D */
/*  *** NOTE: ***
d155 21
d178 5
a182 4

#  define FOR_PANEL	0
#  define FOR_CHOICE	1
#  define FOR_INPUT	2
d186 6
a191 2
#define NORECALL 0
#define RECALL   1
d211 5
d223 58
a280 29
#define LYE_NOP 0		  /* Do Nothing            */
#define LYE_CHAR  (LYE_NOP   +1)  /* Insert printable char */
#define LYE_ENTER (LYE_CHAR  +1)  /* Input complete, return char/lynxkeycode */
#define LYE_TAB   (LYE_ENTER +1)  /* Input complete, return TAB  */
#define LYE_ABORT (LYE_TAB   +1)  /* Input cancelled       */

#define LYE_FORM_PASS (LYE_ABORT +1)  /* In form fields: input complete,
					 return char / lynxkeycode;
					 Elsewhere: Do Nothing */

#define LYE_DELN  (LYE_FORM_PASS +1)  /* Delete next/curr char */
#define LYE_DELC  (LYE_DELN)      /* Obsolete (DELC case was equiv to DELN) */
#define LYE_DELP  (LYE_DELN  +1)  /* Delete prev      char */
#define LYE_DELNW (LYE_DELP  +1)  /* Delete next word      */
#define LYE_DELPW (LYE_DELNW +1)  /* Delete prev word      */

#define LYE_ERASE (LYE_DELPW +1)  /* Erase the line        */

#define LYE_BOL   (LYE_ERASE +1)  /* Go to begin of line   */
#define LYE_EOL   (LYE_BOL   +1)  /* Go to end   of line   */
#define LYE_FORW  (LYE_EOL   +1)  /* Cursor forwards       */
#define LYE_BACK  (LYE_FORW  +1)  /* Cursor backwards      */
#define LYE_FORWW (LYE_BACK  +1)  /* Word forward          */
#define LYE_BACKW (LYE_FORWW +1)  /* Word back             */

#define LYE_LOWER (LYE_BACKW +1)  /* Lower case the line   */
#define LYE_UPPER (LYE_LOWER +1)  /* Upper case the line   */

#define LYE_LKCMD (LYE_UPPER +1)  /* Invoke command prompt */
d282 5
a286 1
#define LYE_AIX   (LYE_LKCMD +1)  /* Hex 97                */
a287 4
#define LYE_DELBL (LYE_AIX   +1)  /* Delete back to BOL    */
#define LYE_DELEL (LYE_DELBL +1)  /* Delete thru EOL       */

#define LYE_SWMAP (LYE_DELEL +1)  /* Switch input keymap   */
d291 1
d294 3
d328 7
a334 1
extern int EditBinding PARAMS((int ch));
d340 13
a352 2
extern void LYOpenCloset NOPARAMS;
extern void LYCloseCloset NOPARAMS;
d356 2
a357 1
extern char * LYLineEditors[];
d359 5
a363 7
/* Push a character through the lineedit machinery */
#ifdef    NOT_ASCII  /* S/390 -- gil -- 2080 */
#define EditBinding(c) (LYLineEditors[current_lineedit][(c)<256 ? TOASCII(c) : c])
#else  /* NOT_ASCII */
#define EditBinding(c) (LYLineEditors[current_lineedit][c])
#endif /* NOT_ASCII */
#define LYLineEdit(e,c,m) LYEdit1(e,c,EditBinding(c),m)
d367 2
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d190 2
d209 2
@


1.2.10.1
log
@Pull in patch from current:
Fix (margarida):
Fix URL CRLF Injection bug.
--
A CRLF injection vulnerability has been reported for Lynx that
may allow an attacker to include extra HTTP headers when viewing
web pages.
If Lynx is called from the command line, carriage return and line
feed (CRLF) characters may be included in the specified URL.
These characters are not escaped when the input is used to construct
a HTTP request.

URL: http://www.flora.org/lynx-dev/html/month082002/msg00211.html
@
text
@a189 2
extern void LYEscapeStartfile PARAMS((
	char **		buffer));
a206 2
	char *		buffer));
extern void LYTrimAllStartfile PARAMS((
@


1.2.12.1
log
@Pull in patch from current:
Fix (margarida):
Fix URL CRLF Injection bug.
--
A CRLF injection vulnerability has been reported for Lynx that
may allow an attacker to include extra HTTP headers when viewing
web pages.
If Lynx is called from the command line, carriage return and line
feed (CRLF) characters may be included in the specified URL.
These characters are not escaped when the input is used to construct
a HTTP request.

URL: http://www.flora.org/lynx-dev/html/month082002/msg00211.html

henning@@ fgs@@ pjanzen@@ pvalchev@@ ok
@
text
@a189 2
extern void LYEscapeStartfile PARAMS((
	char **		buffer));
a206 2
	char *		buffer));
extern void LYTrimAllStartfile PARAMS((
@


1.1
log
@Initial revision
@
text
@d4 1
a4 5
#include <string.h>

#if !defined(EXP_8BIT_TOUPPER) && !defined(LOCALE)
#define EXP_8BIT_TOUPPER
#endif
d12 11
d29 2
d36 3
d41 1
a41 1
	char *		tarptr));
d85 1
a85 1
#define printable(c) (((c)>31 && (c)<=255) || (c)==9 || (c)==10 || (c)<0 )
d95 1
a95 1
#define END		263	/* 0x107 */
d103 15
d127 1
a127 1
	
d151 1
a151 1
#define LYE_ENTER (LYE_CHAR  +1)  /* Input complete, return char */
d155 7
a161 3
#define LYE_DELN  (LYE_ABORT +1)  /* Delete next    char   */
#define LYE_DELC  (LYE_DELN  +1)  /* Delete current char   */
#define LYE_DELP  (LYE_DELC  +1)  /* Delete prev    char   */
d179 6
a184 1
#define LYE_AIX   (LYE_LKCMD +1)  /* Hex 97		   */
d186 24
d217 1
d223 2
a224 1

d230 4
a233 1
/* Push a chacter through the linedit machinery */
d235 1
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
