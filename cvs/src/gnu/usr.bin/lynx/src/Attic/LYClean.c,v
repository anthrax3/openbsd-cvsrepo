head	1.10;
access;
symbols
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.8
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.6
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.6.0.20
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.14
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.07.23.19.13.26;	author deraadt;	state dead;
branches;
next	1.9;
commitid	EcR8E7r0stjLUV4p;

1.9
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.8;
commitid	lGGuvDWEniklWrQe;

1.8
date	2011.07.22.14.10.39;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.22.04.01.47;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.01.18.59.39;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.30.21.33.17;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.25.18.17.07;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	98.10.28.18.01.04;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.57;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.57;	author maja;	state Exp;
branches;
next	;


desc
@@


1.10
log
@delinked from tree, now it goes to the bit bucket
@
text
@/* $LynxId: LYClean.c,v 1.40 2013/10/10 23:47:25 tom Exp $ */
#include <HTUtils.h>
#include <LYCurses.h>
#include <LYUtils.h>
#include <LYSignal.h>
#include <LYClean.h>
#include <LYMainLoop.h>
#include <LYGlobalDefs.h>
#include <LYTraversal.h>
#include <LYHistory.h>
#include <LYCookie.h>
#include <LYSession.h>
#include <UCAuto.h>
#include <HTAlert.h>

#include <LYexit.h>
#include <LYLeaks.h>

#ifdef DJGPP
extern void sig_handler_watt(int);
#endif /* DJGPP */

#ifdef VMS
BOOLEAN HadVMSInterrupt = FALSE;
#endif /* VMS */

/*
 * Interrupt handler.  Stop curses and exit gracefully.
 */
void cleanup_sig(int sig)
{
#ifdef IGNORE_CTRL_C
    if (sig == SIGINT) {
	/*
	 * Need to rearm the signal.
	 */
#ifdef DJGPP
	if (wathndlcbrk) {
	    sig_handler_watt(sig);	/* Use WATT-32 signal handler */
	}
#endif /* DJGPP */
	signal(SIGINT, cleanup_sig);
	sigint = TRUE;
#ifdef DJGPP
	_eth_release();
	_eth_init();
#endif /* DJGPP */
	return;
    }
#endif /* IGNORE_CTRL_C */

#ifdef VMS
    if (!dump_output_immediately) {

	/*
	 * Reassert the AST.
	 */
	(void) signal(SIGINT, cleanup_sig);
	if (LYCursesON) {
	    lynx_force_repaint();	/* wipe away the "cancel" message */
	    LYrefresh();

	    /*
	     * Ask if exit is intended.
	     */
	    if (LYQuitDefaultYes == TRUE) {
		int Dft = ((LYQuitDefaultYes == TRUE) ? YES : NO);
		int c = HTConfirmDefault(REALLY_EXIT, Dft);

		HadVMSInterrupt = TRUE;
		if (c != Dft) {
		    return;
		}
	    }
	} else {
	    return;
	}
    }
#endif /* VMS */

    /*
     * Ignore signals from terminal.
     */
#ifndef NOSIGHUP
    (void) signal(SIGHUP, SIG_IGN);
#endif /* NOSIGHUP */

#ifdef VMS
    /*
     * Use ttclose() from cleanup() for VMS if not dumping.
     */
    if (dump_output_immediately)
	(void) signal(SIGTERM, SIG_IGN);
#else /* Unix: */
    (void) signal(SIGINT, SIG_IGN);
    (void) signal(SIGTERM, SIG_IGN);
#endif /* VMS */

    if (traversal)
	dump_traversal_history();

#ifndef NOSIGHUP
    if (sig != SIGHUP) {
#endif /* NOSIGHUP */

	if (!dump_output_immediately) {
	    /*
	     * cleanup() also calls cleanup_files().
	     */
	    cleanup();
	}
	if (sig != 0) {
	    SetOutputMode(O_TEXT);
	    printf("\n\n%s %d\n\n",
		   gettext("Exiting via interrupt:"),
		   sig);
	    fflush(stdout);
	}
#ifndef NOSIGHUP
    } else {
#ifdef USE_SESSIONS
	/*
	 * It is useful to save the session if a user closed lynx in a
	 * nonstandard way, such as closing xterm window or in even a crash.
	 */
	SaveSession();
#endif /* USE_SESSIONS */
	cleanup_files();
    }
#endif /* NOSIGHUP */
    if (sig != 0) {
	exit_immediately(EXIT_SUCCESS);
    } else {
	reset_signals();
    }
}

/*
 * Called by interrupt handler or at quit-time, this erases the temporary files
 * that lynx created.
 */
void cleanup_files(void)
{
    LYCleanupTemp();
    FREE(lynx_temp_space);
}

void cleanup(void)
{
    /*
     * Ignore signals from terminal.
     */
#ifndef NOSIGHUP
    (void) signal(SIGHUP, SIG_IGN);
#endif /* NOSIGHUP */
#ifndef VMS			/* use ttclose() from cleanup() for VMS */
    (void) signal(SIGINT, SIG_IGN);
#endif /* !VMS */
    (void) signal(SIGTERM, SIG_IGN);

    if (LYCursesON) {
	LYParkCursor();
	lynx_stop_all_colors();
	LYrefresh();

	stop_curses();
    }
#ifdef EXP_CHARTRANS_AUTOSWITCH
    /*
     * Currently implemented only for LINUX:  Restore original font.
     */ UCChangeTerminalCodepage(-1, (LYUCcharset *) 0);
#endif /* EXP_CHARTRANS_AUTOSWITCH */

#ifdef USE_PERSISTENT_COOKIES
    /*
     * This can go right here for now.  We need to work up a better place
     * to save cookies for the next release, preferably whenever a new
     * persistent cookie is received or used.  Some sort of protocol to
     * handle two processes writing to the cookie file needs to be worked
     * out as well.
     */
    if (persistent_cookies)
	LYStoreCookies(LYCookieSaveFile);
#endif
#ifdef USE_SESSIONS
    SaveSession();
#endif /* USE_SESSIONS */

    cleanup_files();
#ifdef VMS
    ttclose();
    DidCleanup = TRUE;
#endif /* VMS */

    /*
     * If we're looking at memory leaks, hang onto the trace file, since there
     * is no memory freed in this function, and it is a nuisance to not be able
     * to trace the cleanup activity -TD
     */
#ifndef LY_FIND_LEAKS
    LYCloseTracelog();
#endif
}
@


1.9
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.8
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d1 1
a1 1
/* $LynxId: LYClean.c,v 1.38 2008/02/11 00:50:19 Paul.B.Mahol Exp $ */
a53 1
	int c;
d59 3
a61 2
	if (!LYCursesON)
	    return;
d63 12
a74 11
	/*
	 * Refresh screen to get rid of "cancel" message, then query.
	 */
	lynx_force_repaint();
	LYrefresh();

	/*
	 * Ask if exit is intended.
	 */
	if (LYQuitDefaultYes == TRUE) {
	    c = HTConfirmDefault(REALLY_EXIT, YES);
a75 8
	    c = HTConfirmDefault(REALLY_EXIT, NO);
	}
	HadVMSInterrupt = TRUE;
	if (LYQuitDefaultYes == TRUE) {
	    if (c == NO) {
		return;
	    }
	} else if (c != YES) {
d82 1
a82 1
     * Ignore further interrupts.  - mhc:  11/2/91
d93 1
d96 1
a98 2
    (void) signal(SIGTERM, SIG_IGN);

d123 2
a124 4
	 * Wondering is this right place and time to do it.
	 * We need this, for example it is usefull to save session
	 * if user closed lynx in non standard way, like closing
	 * xterm window or in worst one like crash.
d139 1
a139 1
 * Called by Interrupt handler or at quit time.  Erases the temporary files
a149 4
#ifdef VMS
    extern BOOLEAN DidCleanup;
#endif /* VMS */

d151 1
a151 2
     * Cleanup signals - just in case.  Ignore further interrupts.  - mhc: 
     * 11/2/91
a155 2
    (void) signal(SIGTERM, SIG_IGN);

d159 1
d162 1
a162 3
	LYmove(LYlines - 1, 0);
	LYclrtoeol();

d171 1
a171 2
     */
    UCChangeTerminalCodepage(-1, (LYUCcharset *) 0);
a185 3
    /*
     * Wondering is this right place and time to do it.
     */
@


1.7
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 1
d12 1
d128 9
a139 1

a153 2
    if (lynx_temp_space != NULL && rmdir(lynx_temp_space))
	perror("Could not remove the temp-directory");
d203 6
@


1.6
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d26 1
a26 1
 *  Interrupt handler.	Stop curses and exit gracefully.
d28 1
a28 2
PUBLIC void cleanup_sig ARGS1(
	int,		sig)
a29 1

d31 1
a31 1
    if (sig == SIGINT)	{
d55 1
a55 1
	 *  Reassert the AST.
d62 1
a62 1
	 *  Refresh screen to get rid of "cancel" message, then query.
d68 1
a68 1
	 *  Ask if exit is intended.
d87 1
a87 1
     *	Ignore further interrupts. - mhc: 11/2/91
d95 1
a95 1
     *	Use ttclose() from cleanup() for VMS if not dumping.
d113 1
a113 1
	     *	cleanup() also calls cleanup_files().
a129 11
#ifndef NOSIGHUP
	 (void) signal(SIGHUP, SIG_DFL);
#endif /* NOSIGHUP */
    (void) signal(SIGTERM, SIG_DFL);
#ifndef VMS
    (void) signal(SIGINT, SIG_DFL);
#endif /* !VMS */
#ifdef SIGTSTP
    if (no_suspend)
	(void) signal(SIGTSTP, SIG_DFL);
#endif /* SIGTSTP */
d131 3
a133 1
	exit(EXIT_SUCCESS);
d138 2
a139 2
 *  Called by Interrupt handler or at quit time.
 *  Erases the temporary files that lynx created.
d141 1
a141 1
PUBLIC void cleanup_files NOARGS
d149 1
a149 1
PUBLIC void cleanup NOARGS
d156 2
a157 2
     *	Cleanup signals - just in case.
     *	Ignore further interrupts. - mhc: 11/2/91
d162 1
a162 1
    (void) signal (SIGTERM, SIG_IGN);
d164 2
a165 2
#ifndef VMS  /* use ttclose() from cleanup() for VMS */
    (void) signal (SIGINT, SIG_IGN);
d169 1
a169 1
	LYmove(LYlines-1, 0);
d172 1
a172 1
	lynx_stop_all_colors ();
a176 1

d179 1
a179 1
     *	Currently implemented only for LINUX: Restore original font.
d181 1
a181 1
    UCChangeTerminalCodepage(-1, (LYUCcharset*)0);
d193 1
a193 1
	LYStoreCookies (LYCookieSaveFile);
@


1.5
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d9 1
d17 4
d37 5
d44 4
d73 1
a73 1
	    c = HTConfirmDefault(REALLY_EXIT_Y, YES);
d75 1
a75 1
	    c = HTConfirmDefault(REALLY_EXIT_N, NO);
a154 1

d156 1
a156 2
        perror("Could not remove the temp-directory");

a161 1
    int i;
d196 1
a196 1
#ifdef EXP_PERSISTENT_COOKIES
a208 8
    for (i = 0; i < nhist; i++) {
	FREE(history[i].title);
	FREE(history[i].address);
	FREE(history[i].post_data);
	FREE(history[i].post_content_type);
	FREE(history[i].bookmark);
    }
    nhist = 0;
d214 6
d221 1
@


1.4
log
@code missed when upgraded to 2.8.2. -moj
@
text
@d29 6
a34 6
    /*
     *	Need to rearm the signal.
     */
    signal(SIGINT, cleanup_sig);
    sigint = TRUE;
    return;
a45 1
	HadVMSInterrupt = TRUE;
d53 1
a53 1
	refresh();
d63 1
d130 1
a130 1
	exit(0);
d142 2
a143 2
    if (rmdir(lynx_temp_space))
	perror("Could not remove the temp-directory");
d169 2
a170 2
	move(LYlines-1, 0);
	clrtoeol();
d173 1
a173 1
	refresh();
a178 1
#ifdef LINUX
a182 1
#endif /* LINUX */
d194 1
a194 1
	LYStoreCookies (LYCookieFile);
@


1.3
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d141 4
@


1.2
log
@mkdtemp a directory where Lynx puts all it's temporary files.
Fixing creation of all temp files would involve rewriting Lynx.
@
text
@d1 11
a11 10
#include "HTUtils.h"
#include "tcp.h"
#include "LYCurses.h"
#include "LYUtils.h"
#include "LYSignal.h"
#include "LYClean.h"
#include "LYGlobalDefs.h"
#include "LYStrings.h"
#include "LYTraversal.h"
#include "UCAuto.h"
d13 2
a14 4
#include "LYexit.h"
#include "LYLeaks.h"

#define FREE(x) if (x) {free(x); x = NULL;}
d60 1
a60 1
	    _statusline(REALLY_EXIT_Y);
d62 1
a62 1
	    _statusline(REALLY_EXIT_N);
a63 1
	c = LYgetch();
d65 1
a65 2
	    if (TOUPPER(c) == 'N' ||
		c == 7) {
d68 1
a68 1
	} else if (TOUPPER(c) != 'Y') {
d106 4
a109 1
	    printf("\r\nExiting via interrupt: %d\r\n", sig);
d136 1
a136 3
 *  Erases the temporary files that lynx created
 *  temporary files are removed by tempname
 *  which created them.
d140 1
a140 7
    char filename[256];

    tempname(filename, REMOVE_FILES);

    if (rmdir(lynx_temp_space))
	perror("Could not remove the temp-directory");

d183 12
d209 1
a209 9
    fflush(stdout);
    fflush(stderr);
    if (LYTraceLogFP != NULL) {
	fclose(LYTraceLogFP);
	LYTraceLogFP = NULL;
#if !defined(VMS) || (defined(VMS) && !defined(VAXC) && !defined(UCX))
	*stderr = LYOrigStderr;
#endif /* !VMS || (VMS && !VAXC && !UCX) */
    }
@


1.1
log
@Initial revision
@
text
@d145 4
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
