head	1.4;
access;
symbols
	OPENBSD_5_5:1.2.0.22
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.18
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.16
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.24
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.22
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.20
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.18
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.16
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.14
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.12
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2014.07.23.19.13.25;	author deraadt;	state dead;
branches;
next	1.3;
commitid	EcR8E7r0stjLUV4p;

1.3
date	2014.07.09.04.11.35;	author daniel;	state Exp;
branches;
next	1.2;
commitid	lGGuvDWEniklWrQe;

1.2
date	2009.05.31.09.16.52;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.01.18.59.38;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@delinked from tree, now it goes to the bit bucket
@
text
@#!/usr/bin/perl -w
# $LynxId: cfg2html.pl,v 1.21 2014/01/08 22:49:46 tom Exp $
#
# This script uses embedded formatting directives in the lynx.cfg file to
# guide it in extracting comments and related information to construct a
# set of HTML files.  Comments begin with '#', and directives with '.'.
# Directives implemented:
#
#	h1 {Text}
#		major heading.  You may specify the same major heading in
#		more than one place.
#	h2 {Text}
#		minor heading, i.e. a keyword.
#	ex [number]
#		the following line(s) are an example.  The [number] defaults
#		to 1.
#	nf [number]
#		turn justification off for the given number of lines, defaulting
#		to the remainder of the file.
#	fi
#		turn justification back on
#	url text
#		embed an HREF to external site.
#
use strict;

use Getopt::Std;

use vars qw($opt_a $opt_m $opt_s);

use vars qw(@@cats);
use vars qw(%cats);

use vars qw(@@settings_avail);
use vars qw(%settings_avail);

# Options:
#	-a	show all options, not only those that are available.
#	-m	mark unavailable options with an '*'.  Data for this is read
#		from standard input.
#	-s	sort entries in body.html
&getopts('ams');

if ( defined $opt_m ) {
    my $l;
    my @@settings_ = <STDIN>;
    %settings_avail = ();
    foreach $l (@@settings_) {
        chop $l;
        if ( $l =~ /^[[:alpha:]_][[:alnum:]_]*$/ ) {
            $settings_avail{ uc $l } = 1;
        }
    }
}
else {
    $opt_a = 1;
}

# This sub tells whether the support for the given setting was enabled at
# compile time.
sub ok {
    my ($name) = @@_;
    my $ret = defined( $settings_avail{ uc $name } ) + 0;
    $ret;
}

if ( $#ARGV < 0 ) {
    &doit("lynx.cfg");
}
else {
    while ( $#ARGV >= 0 ) {
        &doit( shift @@ARGV );
    }
}
exit(0);

# process a Lynx configuration-file
sub doit {
    my ($name) = @@_;
    my $n;

    # Ignore our own backup files
    if ( $name =~ ".*~" ) {
        return;
    }

    # Read the file into an array in memory.
    open( FP, $name ) || do {
        print STDERR "Can't open $name: $!\n";
        return;
    };
    my (@@input) = <FP>;
    close(FP);

    for $n ( 0 .. $#input ) {
        chop $input[$n];    # trim newlines
        $input[$n] =~ s/\s*$//;    # trim trailing blanks
        $input[$n] =~ s/^\s*//;    # trim leading blanks
    }

    &gen_alphatoc(@@input);
    @@cats = &gen_cattoc(@@input);
    &gen_body(@@input);
}

sub gen_alphatoc {
    my (@@input) = @@_;
    my @@minor;
    my ( $n, $m, $c, $d, $need_p );
    my $output = "alphatoc.html";
    open( FP, ">$output" ) || do {
        print STDERR "Can't open $output: $!\n";
        return;
    };
    print FP <<'EOF';
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<link rev="made" href="mailto:lynx-dev@@nongnu.org">
<title>lynx.cfg settings by name</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="description" content=
"This is a table of Lynx's settings in lynx.cfg, listed alphabetically.  Some settings are disabled at compile-time.">
</head>
<body>
EOF
    $m = 0;
    for $n ( 0 .. $#input ) {
        if ( $input[$n] =~ /^\.h2\s*[[:upper:]][[:upper:][:digit:]_]*$/ ) {
            $minor[$m] = $input[$n];
            $minor[$m] =~ s/^.h2\s*//;
            $m++ if ( ok( $minor[$m] ) || defined $opt_a );
        }
    }
    @@minor = sort @@minor;

    # index by the first character of each keyword
    $c      = ' ';
    $need_p = 1;
    for $n ( 0 .. $#minor ) {
        $d = substr( $minor[$n], 0, 1 );
        if ( $d ne $c ) {
            if ($need_p) {
                printf FP "<p>";
                $need_p = 0;
            }
            printf FP "<a href=\"#%s\">%s</a> \n", $d, $d;
            $c = $d;
        }
    }

    # index by the first character of each keyword
    $c = ' ';
    for $n ( 0 .. $#minor ) {
        $d = substr( $minor[$n], 0, 1 );
        if ( $d ne $c ) {
            printf FP "<h2><a name=%s>%s</a></h2>\n", $d, $d;
            $need_p = 1;
            $c      = $d;
        }
        my $avail = ok( $minor[$n] );
        my $mark = ( !$avail && defined $opt_m ) ? "*" : "";
        if ( defined $opt_a || $avail ) {
            if ($need_p) {
                printf FP "<p>";
                $need_p = 0;
            }
            printf FP "<a href=\"body.html#%s\">%s</a>&nbsp;&nbsp;\n",
              $minor[$n], $minor[$n] . $mark;
        }
    }
    my $str = <<'EOF'
<p>
<a href=cattoc.html>To list of settings by category</a>
EOF
      . (
        defined $opt_a && defined $opt_m
        ? "<p>Support for all settings suffixed with '*' was disabled at compile time.\n"
        : ""
      )
      . <<'EOF'
</body>
</html>
EOF
      ;
    print FP $str;
    close(FP);
}

# This uses the associative array $cats{} to store HREF values pointing into
# the cattoc file.
#
# We could generate this file in alphabetic order as well, but choose to use
# the order of entries in lynx.cfg, since some people expect that arrangement.
sub gen_body {
    my @@input = @@_;
    my ( $n, $c );
    my @@h2;
    my $output = "body.html";
    open( FP, ">$output" ) || do {
        print STDERR "Can't open $output: $!\n";
        return;
    };
    print FP <<'EOF';
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<link rev="made" href="mailto:lynx-dev@@nongnu.org">
<title>Description of settings in lynx configuration file</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="description" content=
"This is a list of each of Lynx's settings in lynx.cfg, with full description and their default values indicated.">
</head>
<body>
EOF
    my $l;
    my $t;
    my $d     = -1;
    my $p     = 0;
    my $m     = 0;
    my $h1    = "";
    my $sp    = ' ';
    my $ex    = 0;
    my $nf    = 0;
    my $any   = 0;
    my $first = 0;
    my $next  = 0;
    my $left  = 0;
    my $needp = 0;
    my %keys;
    undef %keys;

    my @@optnames;
    my %optname_to_fname;    #this maps optname to fname - will be used
                             #for alphabetical output of the content
    my $curfilename = "tmp000";    #will be incremented each time
    my $tmpdir      = "./";        #temp files will be created there
    close(FP);

    for $n ( 0 .. $#input ) {
        if ($next) {
            $next--;
            next;
        }
        $c = $input[$n];
        my $count = $#input;
        my $once  = 1;
        if ( $c =~ /^\.h1\s/ ) {
            $h1 = 1;
            $h1 = $c;
            $h1 =~ s/^.h1\s*//;
            $m     = 0;
            $first = 1;
            undef %keys;
            next;
        }
        elsif ( $c =~ /^\.h2\s/ ) {
            $c =~ s/^.h2\s*//;
            $h2[$m] = $c;
            $keys{$c} = 1;
            $m++;
            next;
        }
        elsif ( $c =~ /^\./ ) {
            my $s = $c;
            $s =~ s/^\.[[:lower:]]+\s//;
            if ( $s =~ /^[[:digit:]]+$/ ) {
                $count = $s;
                $once  = $s;
            }
        }
        if ( $c =~ /^\.ex/ ) {
            $ex = $once;
            printf FP "<h3><em>Example%s:</em></h3>\n", $ex > 1 ? "s" : "";
            $needp = 1;
        }
        elsif ( $c =~ /^\.url/ ) {
            my $url = $c;
            $url =~ s/^\.url\s+//;
            printf FP "<blockquote><p><a href=\"%s\">%s</a></p></blockquote>\n",
              $url, $url;
            $needp = 1;
        }
        elsif ( $c =~ /^\.nf/ ) {
            $needp = 0;
            printf FP "<pre>\n";
            $nf = $count;
        }
        elsif ( $c =~ /^\.fi/ ) {
            printf FP "</pre>\n";
            $nf    = 0;
            $needp = 1;
        }
        elsif ( $c =~ /^$/ ) {
            if ( $m > 1 ) {
                my $j;
                for $j ( 1 .. $#h2 ) {
                    close(FP);
                    ++$curfilename;
                    push @@optnames, $h2[$j];
                    open( FP, ">$tmpdir/$curfilename" ) || do {
                        print STDERR "Can't open tmpfile: $!\n";
                        return;
                    };
                    $optname_to_fname{ $h2[$j] } = $curfilename;

                    printf FP "<hr>\n";
                    printf FP "<h2><kbd><a name=\"%s\">%s</a></kbd>\n", $h2[$j],
                      $h2[$j];
                    if ( $h1 ne "" ) {
                        printf FP " &ndash; <a href=\"cattoc.html#%s\">%s</a>",
                          $cats{$h1}, $h1;
                    }
                    printf FP "</h2>\n";
                    printf FP "<h3><em>Description</em></h3>\n";
                    printf FP "<p>Please see the description of "
                      . "<a href=\"#%s\">%s</a>\n",
                      $h2[0], $h2[0];
                    $needp = 0;
                }
                @@h2 = "";
            }
            $m     = 0;
            $first = 1;
        }
        elsif ( $c =~ /^[#[:alpha:]]/ && $m != 0 ) {
            if ($first) {
                close(FP);
                ++$curfilename;
                push @@optnames, $h2[0];
                open( FP, ">$tmpdir/$curfilename" ) || do {
                    print STDERR "Can't open tmpfile: $!\n";
                    return;
                };
                $optname_to_fname{ $h2[0] } = $curfilename;

                if ($any) {
                    printf FP "<hr>\n";
                }
                printf FP "<h2><kbd><a name=\"%s\">%s</a></kbd>\n", $h2[0],
                  $h2[0];
                if ( $h1 ne "" ) {
                    printf FP " &ndash; <a href=\"cattoc.html#%s\">%s</a>",
                      $cats{$h1}, $h1;
                }
                printf FP "</h2>\n";
                printf FP "<h3><em>Description</em></h3>\n";
                $needp = 1;
                $any++;
                $first = 0;
            }

            # Convert tabs first, to retain relative alignment
            $c =~ s#^\t#' 'x8#e;
            while ( $c =~ /\t/ ) {
                $c =~ s#(^[^\t]+)\t#$1 . $sp x (9 - (length($1) % 8 ))#e;
            }

            # Strip off the comment marker
            $c =~ s/^#//;

            # and convert simple expressions:
            $c =~ s/&/&amp;/g;
            $c =~ s/>/&gt;/g;
            $c =~ s/</&lt;/g;

            #hvv - something wrong was with next statement
            $c =~ s/'([^ ])'/"<strong>$1<\/strong>"/g;

            my $k = 0;
            if ( $c =~ /^[[:alpha:]_][[:alnum:]_]+:/ ) {
                $t = $c;
                $t =~ s/:.*//;
                $k = $keys{$t};
            }

            if ( $c =~ /^$/ ) {
                if ($nf) {
                    printf FP "\n";
                }
                else {
                    $p = 1;
                }
            }
            elsif ( $ex != 0 ) {
                printf FP "%s", $needp ? "<p>" : "<br>";
                $needp = 0;
                printf FP "<code>%s</code><br>\n", $c;
                $ex--;
            }
            elsif ($k) {
                if ( $d != $n && !$nf ) {
                    printf FP "<h3><em>Default value</em></h3>\n";
                    printf FP "<p>";
                    $needp = 0;
                }
                $c =~ s/:$/:<em>none<\/em>/;
                $c =~ s/:/<\/code>:<code>/;
                $c = "<code>" . $c . "</code>";
                if ( !$nf ) {
                    $c .= "<br>";
                }
                printf FP "%s\n", $c;
                $d = $n + 1;
            }
            else {
                if ( $p && !$nf ) {
                    printf FP "<p>\n";
                    $needp = 0;
                }
                $p = 0;
                if ( $input[ $n + 1 ] =~ /^#\s*==/ ) {
                    $c = "<br><em>$c</em>";
                    if ( !$nf ) {
                        $c .= "<br>";
                    }
                    $next++;
                }
                printf FP "<p>" if $needp;
                $needp = 0;
                printf FP "%s\n", $c;
            }
            if ( $nf != 0 && $nf-- == 0 ) {
                printf FP "</pre>\n";
            }
        }
    }
    close(FP);

    # Here we collect files with description of needed lynx.cfg
    # options in the proper (natural or sorted) order.
    open( FP, ">>$output" ) || do {
        print STDERR "Can't open $output: $!\n";
        return;
    };
    {
        my @@ordered =
          ( defined $opt_s ? ( sort keys(%optname_to_fname) ) : @@optnames );
        printf FP "<p>";
        if ( defined $opt_s ) {
            print FP "Options are sorted by name.\n";
        }
        else {
            print FP "Options are in the same order as lynx.cfg.\n";
        }
        foreach $l (@@ordered) {
            my $fnm = $tmpdir . $optname_to_fname{$l};
            open( FP1, "<$fnm" ) || do {
                print STDERR "Can't open $fnm: $!\n";
                return;
            };
            my $avail = ok($l);
            if ( defined $opt_a || $avail ) {
                my @@lines = <FP1>;
                print FP @@lines;
                if ( !$avail && defined $opt_m ) {
                    print FP <<'EOF';
<p>Support for this setting was disabled at compile-time.
EOF
                }
            }
            close(FP1);
        }
        foreach $l ( values(%optname_to_fname) ) {
            unlink $l;
        }
    }

    print FP <<'EOF';
</body>
</html>
EOF
    close(FP);
}

sub gen_cattoc {
    my @@input = @@_;
    my @@major;
    my %descs;
    my %index;
    my ( $n, $m, $c, $d, $found, $h1, $nf, $ex, $count, $once );
    my $output = "cattoc.html";

    open( FP, ">$output" ) || do {
        print STDERR "Can't open $output: $!\n";
        return;
    };
    print FP <<'EOF';
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<link rev="made" href="mailto:lynx-dev@@nongnu.org">
<title>lynx.cfg settings by category</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="description" content=
"These are the categories for Lynx's settings in lynx.cfg, with summary descriptions and links to each setting.">
</head>
<body>
<p>These are the major categories of configuration settings in Lynx:
<ul>
EOF
    $m  = -1;
    $h1 = 0;
    $nf = 0;
    for $n ( 0 .. $#input ) {
        my $count = $#input;
        my $once  = 1;
        $c = $input[$n];
        if ( $input[$n] =~ /^\.h1\s/ ) {
            $h1 = 1;
            $c =~ s/^.h1\s*//;
            $m     = $#major + 1;
            $d     = 0;
            $found = 0;
            while ( $d <= $#major && !$found ) {
                if ( $major[$d] eq $c ) {
                    $m     = $d;
                    $found = 1;
                }
                $d++;
            }
            if ( !$found ) {
                $major[$m]           = $c;
                $descs{ $major[$m] } = "";
                $index{ $major[$m] } = "";
            }
            next;
        }
        elsif ( $h1 != 0 ) {
            if ( $c =~ /^\.(nf|ex)/ ) {
                my $s = $c;
                $s =~ s/^\.[[:lower:]]+\s//;
                if ( $s =~ /^[[:digit:]]+$/ ) {
                    $count = $s;
                    $once  = $s;
                }
            }
            if ( $input[$n] =~ /^$/ ) {
                $h1 = 0;
            }
            elsif ( $input[$n] =~ /^\.nf/ ) {
                $descs{ $major[$m] } .= "<pre>" . "\n";
                $nf = $count;
            }
            elsif ( $input[$n] =~ /^\.fi/ ) {
                $descs{ $major[$m] } .= "</pre>" . "\n";
                $nf = 0;
            }
            elsif ( $input[$n] =~ /^\.ex/ ) {
                $ex = $once;
                $descs{ $major[$m] } .=
                    "<h3><em>Example"
                  . ( $ex > 1 ? "s" : "" )
                  . ":</em></h3>\n" . "\n";
            }
            elsif ( $input[$n] =~ /^\s*#/ ) {
                $c = $input[$n];
                $c =~ s/^\s*#\s*//;
                $descs{ $major[$m] } .= $c . "\n";
            }
        }
        if ( $m >= 0 && $input[$n] =~ /^\.h2\s/ ) {
            $c = $input[$n];
            $c =~ s/^.h2\s*//;
            $index{ $major[$m] } .= $c . "\n"
              if ( defined $opt_a || ok($c) );
            $h1 = 0;
        }
        if ( $nf != 0 && $nf-- == 0 ) {
            $descs{ $major[$m] } .= "</pre>\n";
        }
    }
    @@major = sort @@major;
    for $n ( 0 .. $#major ) {
        $cats{ $major[$n] } = sprintf( "header%03d", $n );
        printf FP "<li><a href=\"#%s\">%s</a>\n", $cats{ $major[$n] },
          $major[$n];
    }
    printf FP "</ul>\n";
    for $n ( 0 .. $#major ) {
        printf FP "\n";
        printf FP "<h2><a name=\"%s\">%s</a></h2>\n", $cats{ $major[$n] },
          $major[$n];
        if ( $descs{ $major[$n] } !~ /^$/ ) {
            printf FP "<h3>Description</h3>\n<p>%s\n", $descs{ $major[$n] };
        }
        $c = $index{ $major[$n] };
        if ( $c ne "" ) {
            my @@c = split( /\n/, $c );
            @@c = sort @@c;
            printf FP
              "<p>Here is a list of settings that belong to this category\n";
            printf FP "<ul>\n";
            for $m ( 0 .. $#c ) {
                my $avail = ok( $c[$m] );
                my $mark = ( !$avail && defined $opt_m ) ? "*" : "";
                printf FP "<li><a href=\"body.html#%s\">%s</a>\n", $c[$m],
                  $c[$m] . $mark;
            }
            printf FP "</ul>\n";
        }
    }
    my $str = <<'EOF'
<p>
<a href=alphatoc.html>To list of settings by name</a>
EOF
      . (
        defined $opt_a && defined $opt_m
        ? "<p>Support for all settings suffixed with '*' was disabled at compile time."
        : ""
      )
      . <<'EOF'
</body>
</html>
EOF
      ;
    print FP $str;
    close(FP);
    return @@cats;
}
@


1.3
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.2
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d2 1
d22 2
d45 12
a56 11
	my $l;
	my @@settings_ = <STDIN>;
	%settings_avail = ();
	foreach $l (@@settings_) {
		chop $l;
		if ($l =~ /^[a-zA-Z_][a-zA-Z_0-9]*$/) {
			$settings_avail{uc $l} = 1;
		}
	}
} else {
	$opt_a = 1;
d62 3
a64 3
	my ($name) = @@_;
	my $ret = defined $opt_a || defined($settings_avail{uc $name})+0;
	$ret;
a66 1

d68 1
a68 5
	&doit("lynx.cfg");
} else {
	while ( $#ARGV >= 0 ) {
		&doit ( shift @@ARGV );
	}
d70 6
a75 2
exit (0);

d79 2
a80 2
	my ($name) = @@_;
	my $n;
d82 22
a103 22
	# Ignore our own backup files
	if ( $name =~ ".*~" ) {
		return;
	}

	# Read the file into an array in memory.
	open(FP,$name) || do {
		print STDERR "Can't open $name: $!\n";
		return;
	};
	my (@@input) = <FP>;
	close(FP);

	for $n (0..$#input) {
		chop $input[$n]; # trim newlines
		$input[$n] =~ s/\s*$//; # trim trailing blanks
		$input[$n] =~ s/^\s*//; # trim leading blanks
	}

	&gen_alphatoc(@@input);
	@@cats = &gen_cattoc(@@input);
	&gen_body(@@input);
d107 10
a116 10
	my (@@input) = @@_;
	my @@minor;
	my ($n, $m, $c, $d);
	my $output = "alphatoc.html";
	open(FP,">$output") || do {
		print STDERR "Can't open $output: $!\n";
		return;
	};
	print FP <<'EOF';
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
d120 4
a123 1
<title>Settings by name</title>
a125 1
<h1>Alphabetical table of settings</h1>
d127 46
a172 33
	$m=0;
	for $n (0..$#input) {
		if ( $input[$n] =~ /^\.h2\s*[A-Z][A-Z0-9_]*$/ ) {
			$minor[$m] = $input[$n];
			$minor[$m] =~ s/^.h2\s*//;
			$m++ if (ok($minor[$m]) || defined $opt_a);
		}
	}
	@@minor = sort @@minor;
	# index by the first character of each keyword
	$c=' ';
	for $n (0..$#minor) {
		$d = substr($minor[$n],0,1);
		if ($d ne $c) {
			printf FP "<a href=\"#%s\">%s</a> \n", $d, $d;
			$c=$d;
		}
	}
	# index by the first character of each keyword
	$c=' ';
	for $n (0..$#minor) {
		$d = substr($minor[$n],0,1);
		if ($d ne $c) {
			printf FP "<h2><a name=%s>%s</a></h2>\n", $d, $d;
			$c=$d;
		}
		my $avail = ok($minor[$n]);
		my $mark = (!$avail && defined $opt_m) ? "*" : "";
		if (defined $opt_a || $avail) {
		    printf FP "<a href=\"body.html#%s\">%s</a>&nbsp;&nbsp;\n", $minor[$n], $minor[$n] . $mark;
		};
	}
	my $str = <<'EOF'
d176 6
a181 3
. (defined $opt_a && defined $opt_m ?
"<p>Support for all settings suffixed with '*' was disabled at compile time.\n" :
 "") . <<'EOF'
d185 3
a187 2
	;print FP $str;
	close(FP);
d196 10
a205 10
	my @@input = @@_;
	my ($n, $c);
	my @@h2;
	my $output = "body.html";
	open(FP,">$output") || do {
		print STDERR "Can't open $output: $!\n";
		return;
	};
	print FP <<'EOF';
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
d210 3
d216 242
a457 213
	my $l;
	my $t;
	my $d = -1;
	my $p = 0;
	my $m = 0;
	my $h1 = "";
	my $sp = ' ';
	my $ex = 0;
	my $nf = 0;
	my $any = 0;
	my $first = 0;
	my $next = 0;
	my $left = 0;
	my %keys;
	undef %keys;

	my @@optnames;
	my %optname_to_fname;	#this maps optname to fname - will be used
	    			#for alphabetical output of the content
	my $curfilename = "tmp000";	#will be incremented each time
	my $tmpdir = "./";	#temp files will be created there
	close(FP);

	for $n (0..$#input) {
		if ( $next ) {
			$next--;
			next;
		}
		$c = $input[$n];
		my $count = $#input;
		my $once = 1;
		if ( $c =~ /^\.h1\s/ ) {
			$h1 = 1;
			$h1 = $c;
			$h1 =~ s/^.h1\s*//;
			$m = 0;
			$first = 1;
			undef %keys;
			next;
		} elsif ( $c =~ /^\.h2\s/ ) {
			$c =~ s/^.h2\s*//;
			$h2[$m] = $c;
			$keys{$c} = 1;
			$m++;
			next;
		} elsif ( $c =~ /^\./ ) {
			my $s = $c;
			$s =~ s/^\.[a-z]+\s//;
			if ( $s =~ /^[0-9]+$/ ) {
				$count = $s;
				$once = $s;
			}
		}
		if ( $c =~ /^\.ex/ ) {
			$ex = $once;
			printf FP "<h3><em>Example%s:</em></h3>\n", $ex > 1 ? "s" : "";
		} elsif ( $c =~ /^\.nf/ ) {
			printf FP "<pre>\n";
			$nf = $count;
		} elsif ( $c =~ /^\.fi/ ) {
			printf FP "</pre>\n";
			$nf = 0;
		} elsif ( $c =~ /^$/ ) {
			if ( $m > 1 ) {
				my $j;
				for $j (1..$#h2) {
					close(FP);++$curfilename;
					push @@optnames,$h2[$j];
					open(FP,">$tmpdir/$curfilename") || do {
						print STDERR "Can't open tmpfile: $!\n";
						return;
					};
					$optname_to_fname{$h2[$j]} = $curfilename;

					printf FP "<hr>\n";
					printf FP "<h2><kbd><a name=\"%s\">%s</a></kbd>\n", $h2[$j], $h2[$j];
					if ( $h1 ne "" ) {
						printf FP " - <a href=\"cattoc.html#%s\">%s</a>", $cats{$h1}, $h1;
					}
					printf FP "</h2>\n";
					printf FP "<h3><em>Description</em></h3>\n";
					printf FP "Please see the description of <a href=\"#%s\">%s</a>\n", $h2[0], $h2[0];
				}
				@@h2 = "";
			}
			$m = 0;
			$first = 1;
		} elsif ( $c =~ /^[#A-Za-z]/ && $m != 0 ) {
			if ( $first ) {
				close(FP);++$curfilename;
				push @@optnames,$h2[0];
				open(FP,">$tmpdir/$curfilename") || do {
				    print STDERR "Can't open tmpfile: $!\n";
				    return;
				};
				$optname_to_fname{$h2[0]} = $curfilename;

				if ( $any ) {
					printf FP "<hr>\n";
				}
				printf FP "<h2><kbd><a name=\"%s\">%s</a></kbd>\n", $h2[0], $h2[0];
				if ( $h1 ne "" ) {
					printf FP " - <a href=\"cattoc.html#%s\">%s</a>", $cats{$h1}, $h1;
				}
				printf FP "</h2>\n";
				printf FP "<h3><em>Description</em></h3>\n";
				$any++;
				$first = 0;
			}

			# Convert tabs first, to retain relative alignment
			$c =~ s#^\t#' 'x8#e;
			while ( $c =~ /\t/ ) {
				$c =~ s#(^[^\t]+)\t#$1 . $sp x (9 - (length($1) % 8 ))#e;
			}

			# Strip off the comment marker
			$c =~ s/^#//;

			# and convert simple expressions:
			$c =~ s/&/&amp;/g;
			$c =~ s/>/&gt;/g;
			$c =~ s/</&lt;/g;
			#hvv - something wrong was with next statement
			$c =~ s/'([^ ])'/"<strong>$1<\/strong>"/g;

			# Do a line-break each time the margin changes.  We 
			# could get fancier, but HTML doesn't really support
			# text-formatting, and we'll use what it does have to
			# do wrapping.
			if ( ! $nf ) {
				$t = $c;
				$t =~ s/(\s*).*/$1/;
				$t = length $t;
				if ( $t != $left ) {
					$left = $t;
					printf FP "<br>\n";
				}
			}

			my $k = 0;
			if ( $c =~ /^[a-zA-Z_]+:/ ) {
				$t = $c;
				$t =~ s/:.*//;
				$k = $keys{$t};
			}

			if ( $c =~ /^$/ ) {
				if ( $nf ) {
					printf FP "\n";
				} else {
					$p = 1;
				}
			} elsif ( $ex != 0 ) {
				printf FP "<br><code>%s</code><br>\n", $c;
				$ex--;
			} elsif ( $k ) {
				if ( $d != $n && ! $nf ) {
					printf FP "<h3><em>Default value</em></h3>\n";
				}
				$c =~ s/:$/:<em>none<\/em>/;
				$c =~ s/:/<\/code>:<code>/;
				$c = "<code>" . $c . "</code>";
				if ( ! $nf ) {
					$c .= "<br>";
				}
				printf FP "%s\n", $c;
				$d = $n + 1;
			} else {
				if ( $p && ! $nf ) {
					printf FP "<p>\n";
				}
				$p = 0;
				if ( $input[$n+1] =~ /^#\s*==/ ) {
					$c = "<br><em>$c</em>";
					if ( ! $nf ) {
						$c .= "<br>";
					}
					$next++;
				}
				printf FP "%s\n", $c;
			}
			if ( $nf != 0 && $nf-- == 0 ) {
				printf FP "</pre>\n";
			}
		}
	}
	close(FP);
	# Here we collect files with description of needed lynx.cfg
	# options in the proper (natural or sorted) order.
	open(FP,">>$output") || do {
		print STDERR "Can't open $output: $!\n";
		return;
	};
	{
	    my @@ordered = (defined $opt_s ? (sort keys(%optname_to_fname)) : @@optnames);
	    if (defined $opt_s) {
		print FP "Options are sorted by name.\n";
	    } else {
		print FP "Options are in the same order as lynx.cfg.\n";
	    }
	    foreach $l (@@ordered) {
		my $fnm = $tmpdir . $optname_to_fname{$l};
		open(FP1,"<$fnm") || do {
		    print STDERR "Can't open $fnm: $!\n";
		    return;
		};
		my $avail = ok($l);
		if (defined $opt_a || $avail) {
		    my @@lines = <FP1>;
		    print FP @@lines;
		    if (!$avail && defined $opt_m) {
			print FP <<'EOF';
d460 8
a467 8
		    }
		}
		close(FP1);
	    }
	    foreach $l (values(%optname_to_fname)) {
		unlink $l;
	    }
	}
d469 1
a469 1
	print FP <<'EOF';
d473 1
a473 1
	close(FP);
d477 13
a489 13
	my @@input = @@_;
	my @@major;
	my %descs;
	my %index;
	my ($n, $m, $c, $d, $found, $h1);
	my $output = "cattoc.html";

	open(FP,">$output") || do {
		print STDERR "Can't open $output: $!\n";
		return;
	};
	print FP <<'EOF';
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
d493 4
a496 1
<title>Settings by category</title>
d499 1
a499 2
<h1>Settings by category</h1>
These are the major categories of configuration settings in Lynx:
d502 102
a603 65
	$m = -1;
	$h1 = 0;
	for $n (0..$#input) {
		if ( $input[$n] =~ /^\.h1\s/ ) {
			$h1 = 1;
			$c = $input[$n];
			$c =~ s/^.h1\s*//;
			$m = $#major + 1;
			$d = 0;
			$found = 0;
			while ( $d <= $#major && ! $found ) {
				if ( $major[$d] eq $c ) {
					$m = $d;
					$found = 1;
				}
				$d++;
			}
			if ( ! $found ) {
				$major[$m] = $c;
				$descs{$major[$m]} = "";
				$index{$major[$m]} = "";
			}
		} elsif ( $h1 != 0 ) {
			if ( $input[$n] =~ /^$/ ) {
				$h1 = 0;
			} elsif ( $input[$n] =~ /^\s*#/ ) {
				$c = $input[$n];
				$c =~ s/^\s*#\s*//;
				$descs{$major[$m]} .= $c . "\n";
			}
		}
		if ( $m >= 0 && $input[$n] =~ /^\.h2\s/ ) {
			$c = $input[$n];
			$c =~ s/^.h2\s*//;
			$index{$major[$m]} .= $c . "\n"
			    if (defined $opt_a || ok($c));
		}
	}
	@@major = sort @@major;
	for $n (0..$#major) {
		$cats{$major[$n]} = sprintf("header%03d", $n);
		printf FP "<li><a href=\"#%s\">%s</a>\n", $cats{$major[$n]}, $major[$n];
	}
	printf FP "</ul>\n";
	for $n (0..$#major) {
		printf FP "\n";
		printf FP "<h2><a name=\"%s\">%s</a></h2>\n", $cats{$major[$n]}, $major[$n];
		if ($descs{$major[$n]} !~ /^$/) {
			printf FP "<h3>Description</h3>\n%s\n", $descs{$major[$n]};
		}
		$c = $index{$major[$n]};
		if ( $c ne "" ) {
			my @@c = split(/\n/, $c);
			@@c = sort @@c;
			printf FP "<p>Here is a list of settings that belong to this category\n";
			printf FP "<ul>\n";
			for $m (0..$#c) {
				my $avail = ok($c[$m]);
				my $mark = (!$avail && defined $opt_m) ? "*" : "";
				printf FP "<li><a href=\"body.html#%s\">%s</a>\n", $c[$m], $c[$m] . $mark;
			}
			printf FP "</ul>\n";
		}
	}
	my $str = <<'EOF'
d607 6
a612 3
. (defined $opt_a && defined $opt_m ?
"<p>Support for all settings suffixed with '*' was disabled at compile time." :
 "") . <<'EOF'
d616 4
a619 3
	;print FP $str;
	close(FP);
	return @@cats;
@


1.1
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d22 1
d24 9
a32 1
require "getopts.pl";
d39 1
a39 1
&Getopts('ams');
d42 2
a43 1
	@@settings_ = <STDIN>;
d58 2
a59 2
	local ($name) = @@_;
	local ($ret) = defined $opt_a || defined($settings_avail{uc $name})+0;
d76 2
a77 1
	local ($name) = @@_;
d89 1
a89 1
	local(@@input) = <FP>;
d104 4
a107 4
	local(@@input) = @@_;
	local (@@minor);
	local ($n, $m, $c, $d);
	local ($output="alphatoc.html");
d116 1
a116 1
<link rev="made" href="mailto:lynx-dev@@sig.net">
d148 2
a149 2
		local ($avail = ok($minor[$n]));
		local ($mark = !$avail && defined $opt_m ? "*" : "");
d154 1
a154 1
	$str = <<'EOF'
d174 4
a177 3
	local(@@input) = @@_;
	local ($n, $m, $c, $p, $h1, $h2, $any);
	local ($output="body.html");
d186 1
a186 1
<link rev="made" href="mailto:lynx-dev@@sig.net">
d191 14
a204 10
	$d = -1;
	$p = 0;
	$m = 0;
	$h1 = "";
	$sp = ' ';
	$ex = 0;
	$nf = 0;
	$any = 0;
	$next = 0;
	$left = 0;
d207 5
a211 5
	local (@@optnames);
	local (%optname_to_fname);#this maps optname to fname - will be used
	    #for alphabetical output of the content
	local ($curfilename = "tmp000");#will be incremented each time
	local ($tmpdir = "./");#temp files will be created there
d220 2
a221 2
		$count = $#input;
		$once = 1;
d237 1
a237 1
			$s = $c;
d255 1
d331 1
a331 1
			$k = 0;
d386 1
a386 1
	    local (@@ordered = (defined $opt_s ? (sort keys(%optname_to_fname)) : @@optnames));
d393 1
a393 1
		local ($fnm = $tmpdir . $optname_to_fname{$l});
d398 1
a398 1
		local ($avail = ok($l));
d400 1
a400 1
		    local(@@lines) = <FP1>;
d423 6
a428 6
	local(@@input) = @@_;
	local (@@major);
	local (@@descs);
	local (@@index);
	local ($n, $m, $c, $d, $found, $h1);
	local ($output="cattoc.html");
d438 1
a438 1
<link rev="made" href="mailto:lynx-dev@@sig.net">
d498 1
a498 1
			@@c = split(/\n/, $c);
d503 2
a504 2
				local($avail = ok($c[$m]));
				local($mark = !$avail && defined $opt_m ? "*" : "");
d510 1
a510 1
	$str = <<'EOF'
@

