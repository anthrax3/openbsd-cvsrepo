head	1.14;
access;
symbols
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.10
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.8
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.8
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.6
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.14
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.12
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.13;
commitid	EcR8E7r0stjLUV4p;

1.13
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.12;
commitid	lGGuvDWEniklWrQe;

1.12
date	2013.12.02.21.31.30;	author naddy;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.22.14.10.37;	author avsm;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.04.04.24.02;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.22.04.52.35;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.22.04.01.41;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.01.18.59.36;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.21.18.53.17;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.25.18.16.43;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	98.03.11.22.40.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.03.11.20.06.38;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.35;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.35;	author maja;	state Exp;
branches;
next	;


desc
@@


1.14
log
@delinked from tree, now it goes to the bit bucket
@
text
@dnl $LynxId: configure.in,v 1.267 2014/03/09 14:09:50 tom Exp $
dnl
dnl Process this file with autoconf to produce a configure script.
dnl
dnl created jan/1997
dnl by T.E.Dickey <dickey@@invisible-island.net>
dnl and Jim Spath <jspath@@mail.bcpl.lib.md.us>
dnl
dnl ---------------------------------------------------------------------------
dnl Copyright 1997-2013,2014 by Thomas E. Dickey
dnl 
dnl Permission to use, copy, modify, and distribute this software and its
dnl documentation for any purpose and without fee is hereby granted,
dnl provided that the above copyright notice appear in all copies and that
dnl both that copyright notice and this permission notice appear in
dnl supporting documentation, and that the name of the above listed
dnl copyright holder(s) not be used in advertising or publicity pertaining
dnl to distribution of the software without specific, written prior
dnl permission.
dnl 
dnl THE ABOVE LISTED COPYRIGHT HOLDER(S) DISCLAIM ALL WARRANTIES WITH REGARD
dnl TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
dnl AND FITNESS, IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE
dnl LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
dnl WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
dnl ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
dnl OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
dnl ---------------------------------------------------------------------------
dnl
dnl ask PRCS to plug-in the project-version for the configure-script.
dnl $Format: "AC_REVISION($ProjectVersion$)"$
AC_REVISION(2.8.8rel.2)

# Save the original $CFLAGS so we can distinguish whether the user set those
# in the environment, or whether autoconf added -O and -g options:
ORIGINAL_CFLAGS="$CFLAGS"

# For autoconf 2.13, make sure we have no cache file at the beginning of this
# script.  That fixes problems with tests whose cached values change from one
# run to the next, as well as with tests that are order-dependent.
rm -f config.cache

AC_PREREQ(2.13.20020210)
AC_INIT(userdefs.h)

# autoconf 2.5x defaults to no cache file; we need the cache file's information
# for building the config page.  But start with it empty to avoid confusion by
# people who don't do a "make distclean" after applying patches.
cache_file=config.cache
rm -f config.cache; touch config.cache

CONFIG_H=lynx_cfg.h
AC_CONFIG_HEADER($CONFIG_H:config.hin)
AC_SUBST(CONFIG_H)

CF_CHECK_CACHE([AC_CANONICAL_SYSTEM])
AC_ARG_WITH(system-type,
[  --with-system-type=XXX  test: override derived host system-type],
[AC_MSG_WARN(overriding system type $host_os to $withval)
 host_os=$withval])

AC_ARG_PROGRAM

PACKAGE=lynx
dnl ask PRCS to plug-in the project-version for the packages.
# $Format: "VERSION=$ProjectVersion$"$
VERSION=2.8.8rel.2

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

AC_MSG_CHECKING(for DESTDIR)
CF_WITH_PATH(destdir,
[  --with-destdir=XXX      set DESTDIR destination for install],
DESTDIR,
[$DESTDIR],
[$DESTDIR])
AC_MSG_RESULT($DESTDIR)

AC_PREFIX_DEFAULT(/usr/local)

dnl --------------------------------------------------------------------------
dnl Checks for location of programs
dnl --------------------------------------------------------------------------

dnl Only add to this case statement when a system has a compiler that is not
dnl detected by AC_PROG_CC. 
case $host_os in
openedition)
	: ${CFLAGS="-D_ALL_SOURCE -Wl,EDIT=NO"}
	: ${CC=c89}
	;;
esac

CF_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
case $host_os in
mingw*)
LN_S="cp -p"
AC_MSG_RESULT(Override: No symbolic links in mingw.)
	;;
*)
	;;
esac
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_YACC
CF_PROG_LINT
CF_MAKEFLAGS
CF_MAKE_TAGS

CF_ACVERSION_CHECK(2.52,
	[AC_PATH_TOOL(WINDRES, windres, none)],
	[AC_PATH_PROG(WINDRES, windres, none)])

CF_BUILD_CC([#],[])

CF_PROG_RANLIB
CF_AR_FLAGS

dnl --------------------------------------------------------------------------
dnl Debug/development/test
dnl --------------------------------------------------------------------------

CF_HELP_MESSAGE(
Development Options:)

CF_DISABLE_ECHO

# special case for WWW/*
if test -n "$ECHO_CC" ; then
	DONT_ECHO_CC="$SHOW_CC ;"
else
	DONT_ECHO_CC=''
fi
AC_SUBST(DONT_ECHO_CC)

AC_MSG_CHECKING(if you want to check memory-leaks)
CF_ARG_ENABLE(find-leaks,
	[  --enable-find-leaks     logic for testing memory leaks],
	[with_leak_checks=yes],
	[with_leak_checks=no])
AC_MSG_RESULT($with_leak_checks)
test "$with_leak_checks" = "yes" && AC_DEFINE(LY_FIND_LEAKS,1,[Define to 1 if you want to check memory-leaks])

# The comment about adding -g to $CFLAGS is unclear.  Autoconf tries to add
# a -g flag; we remove it if the user's $CFLAGS was not set and debugging is
# disabled.
AC_MSG_CHECKING(if you want to enable debug-code)
CF_ARG_ENABLE(debug,
	[  --enable-debug          compile w/ debugging (if \$CFLAGS is set, add -g there, too)],
	[with_debug=yes],
	[with_debug=no])
AC_MSG_RESULT($with_debug)
if test "$with_debug" = "yes" ; then
	case $host_os in
	ultrix*|osf*)
		test -z "$ORIGINAL_CFLAGS" && CF_STRIP_O_OPT(CFLAGS)
		if test -z "$GCC" ; then
			CFLAGS="$CFLAGS -g3"
		fi
		;;
	esac
else
	case $host_os in
	osf*) #(vi
		test -z "$GCC" && CFLAGS="$CFLAGS -std1"
		test -z "$ORIGINAL_CFLAGS" && CF_STRIP_G_OPT(CFLAGS)
		;;
	*)
		test -z "$ORIGINAL_CFLAGS" && CF_STRIP_G_OPT(CFLAGS)
		;;
	esac
fi

AC_MSG_CHECKING(if you want to enable lynx trace code *recommended* )
CF_ARG_DISABLE(trace,
	[  --disable-trace         disable logic for trace code],
	[with_trace=$enableval],
	[with_trace=yes])
AC_MSG_RESULT($with_trace)
test $with_trace = no && AC_DEFINE(NO_LYNX_TRACE,1,[Define to 1 if you want to enable lynx trace code])

AC_MSG_CHECKING(if you want verbose trace code)
CF_ARG_ENABLE(vertrace,
	[  --enable-vertrace       verbose trace code],
	[with_vertrace=yes],
	[with_vertrace=no])
AC_MSG_RESULT($with_vertrace)
test $with_vertrace = yes && AC_DEFINE(LY_TRACELINE,__LINE__,[Define to __LINE__ if you want verbose trace code])

if test -n "$GCC"
then
AC_MSG_CHECKING(if you want to turn on gcc warnings)
CF_ARG_ENABLE(warnings,
	[  --enable-warnings       GCC compiler warnings],
	[with_warnings=yes],
	[with_warnings=no])
AC_MSG_RESULT($with_warnings)
if test "$with_warnings" = "yes"
then
	CF_GCC_ATTRIBUTES
	CF_GCC_WARNINGS
fi
fi

CF_WITH_DBMALLOC
CF_WITH_DMALLOC

dnl --------------------------------------------------------------------------
dnl Checks for compiler & standard-library characteristics
dnl --------------------------------------------------------------------------

dnl If we're able to run this script, this is true!
AC_DEFINE(UNIX,1,[Define to 1 if we can run a configure script])

dnl Only add to this case statement things that we cannot design tests for.
TRY_CFLAGS=
case $host_os in
aix4*)
	TRY_CFLAGS="$TRY_CFLAGS -DAIX4 -D_BSD=44 -D_AIX"
	LIBS="$LIBS -lbsd"
	;;
aix*)
	TRY_CFLAGS="$TRY_CFLAGS -D_ACS_COMPAT_CODE"
	LIBS="$LIBS -lbsd"
	;;
apollo*)
	TRY_CFLAGS="$TRY_CFLAGS -D_BUILTINS -W0,-opt,4"
	;;
bsdi*)
	TRY_CFLAGS="$TRY_CFLAGS -DBSDI"
	;;
clix*)
	# Tested on CLIX 3.1 (T.Dickey).  The original makefile entry
	# contributed by Alex Matulich (matuli_a@@marlin.navsea.navy.mil) also
	# references -lmalloc and -lbsd.
	AC_CHECK_LIB(c_s,strcmp)
	;;
convex*)
	TRY_CFLAGS="$TRY_CFLAGS -D__STDC__ -Dunix"
	;;
cygwin*)
	TRY_CFLAGS="$TRY_CFLAGS -DWIN_EX -D_WINDOWS_NSL"
	LIBS="$LIBS -luser32"
	;;
dgux*)
	TRY_CFLAGS="$TRY_CFLAGS -DDGUX"
	;;
hpux*)
	TRY_CFLAGS="$TRY_CFLAGS -DSNAKE -D_XOPEN_SOURCE_EXTENDED"
	test -z "$GCC" && TRY_CFLAGS="$TRY_CFLAGS -Wp,-H600000 -DSYS_HPUX"
	;;
isc*)
	# -DPOSIX_JC is necessary, else LYBookmark.c never finds out what a mode_t is.
	TRY_CFLAGS="$TRY_CFLAGS -DISC -DPOSIX_JC"
	LIBS="$LIBS -linet -lnsl_s -lcposix"
	;;
irix6.*) #(vi
	TRY_CFLAGS="$TRY_CFLAGS -DSYS_IRIX64"
	;;
irix*)
	# The original makefile used the $CFLAGS option -cckr for some form
	# of K&R compatibility.  However, this causes compilation warnings for
	# varargs on IRIX 5.2, and does not appear to be needed.
	;;
linux*)
	TRY_CFLAGS="$TRY_CFLAGS -DLINUX"
	;;
mingw*)
	# put these directly in CPPFLAGS since they will not work in lynx_cfg.h
	CF_ADD_CFLAGS(\
		-DWIN32_LEAN_AND_MEAN \
		-DDOSPATH \
		-DNOSIGHUP \
		-DNOUSERS \
		-DWIN_EX \
		-D_CONSOLE \
		-D_MBCS \
		-D_WINDOWS \
		-D_WIN_CC \
		-D__WIN32__ \
	)
	EXTRA_OBJS="$EXTRA_OBJS Xsystem\$o"
	;;
msdosdjgpp*)
	LIBS="$LIBS -lwatt"
	TRY_CFLAGS="$TRY_CFLAGS -DDOSPATH -DNOUSERS"
	;;
next*)
	TRY_CFLAGS="$TRY_CFLAGS -DNEXT"
	;;
osf4*)
	# The -Olimit flag (see below) is no longer available with
	# Digital C 5.2, which is bundled with Digital UNIX 4.0.
	TRY_CFLAGS="$TRY_CFLAGS -DDSYS5 -DSYS_TRU64"
	;;
osf*)
	# Increase the maximum size of functions that will be optimized.
	test -z "$GCC" && TRY_CFLAGS="$TRY_CFLAGS -O -Olimit 4000"
	TRY_CFLAGS="$TRY_CFLAGS -DDSYS5 -DSYS_TRU64"
	;;
sco3.2v5*)
	test $ac_cv_prog_gcc != yes && TRY_CFLAGS="$TRY_CFLAGS -belf"
	;;
sco*)
	LIBS="$LIBS -lmalloc"
	# It's a little late to do much, but try to warn user if he's using
	# SCO's cc (which is reported to have broken const/volatile).
	case "$CC" in #(vi
	cc|*/cc)
		AC_MSG_WARN(You should consider using gcc or rcc if available)
		unset ac_cv_prog_CC
		AC_CHECK_PROGS(CC,gcc rcc,$CC)
		;;
	esac
	;;
sequent-ptx)
	TRY_CFLAGS="$TRY_CFLAGS -DSVR4_BSDSELECT -DNO_IOCTL -DUSE_FCNTL"
	;;
sequent-ptx2)
	TRY_CFLAGS="$TRY_CFLAGS -DSVR4_BSDSELECT"
	;;
sony-newsos*)
	TRY_CFLAGS="$TRY_CFLAGS -I/usr/sony/include"
	AC_CHECK_HEADERS(jcurses.h)
	;;
svr4)
	TRY_CFLAGS="$TRY_CFLAGS -DSVR4_BSDSELECT -DSVR4"
	;;
sunos3*)
	TRY_CFLAGS="$TRY_CFLAGS -DSUN"
	;;
sunos4*)
	TRY_CFLAGS="$TRY_CFLAGS -DSUN -DSUN4"
	;;
ultrix*)
	# Increase the maximum size of functions that will be optimized.
	test -z "$GCC" && TRY_CFLAGS="$TRY_CFLAGS -O -Olimit 600 -G 7"
	TRY_CFLAGS="$TRY_CFLAGS -DULTRIX"
	AC_CHECK_HEADERS(cursesX.h,
		[AC_DEFINE(HAVE_CURSESX_H,1,[Define to 1 if we have cursesX.h])
		 cf_cv_ncurses_header=cursesX.h])
	;;
esac

case $host_os in
mingw*)
	EXTRA_OBJS="$EXTRA_OBJS LYIcon\$o"
	;;
esac

CF_ANSI_CC_REQD

dnl --------------------------------------------------------------------------
dnl --------------------------------------------------------------------------

CF_HELP_MESSAGE(
Basic Configuration Options:)

CF_LARGEFILE

dnl --------------------------------------------------------------------------
dnl internationalization macros
dnl --------------------------------------------------------------------------

dnl Set of available languages (based on source distribution)
if test -z "$ALL_LINGUAS" ; then
	ALL_LINGUAS=`test -d $srcdir/po && cd $srcdir/po && echo *.po|sed -e 's/\.po//g' -e 's/*//'`
	AM_PATH_PROG_WITH_TEST(MSGINIT, msginit,
		[$ac_dir/$ac_word --no-translator --version /dev/null >/dev/null 2>&1], :)
	if test "$MSGINIT" != ":" ; then
		CF_VERBOSE(adding en.po)
		ALL_LINGUAS="$ALL_LINGUAS en"
	fi
fi

CF_BUNDLED_INTL(makefile,disable)

INTLDIR_CPPFLAGS="#"
if test -z "$INTLDIR_MAKE" ; then
	INTLDIR_CPPFLAGS=
fi

AC_SUBST(INTLDIR_CPPFLAGS)

CF_WITH_PATH(nls-datadir,
[  --with-nls-datadir=DIR  NLS data, parent of locale],
NLS_DATADIR,
[PREFIX/DATADIR],
[$prefix/$DATADIRNAME])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want full utility pathnames)
CF_ARG_DISABLE(full-paths,
	[  --disable-full-paths    control whether full utility pathnames are used],
	[with_full_paths=no],
	[with_full_paths=yes])
AC_MSG_RESULT($with_full_paths)
test $with_full_paths = no && AC_DEFINE(USE_EXECVP,1,[Define to 1 if you want full utility pathnames])

CF_DEFINE_PROG(system mailer, SYSTEM_MAIL,
	/usr/mmdf/bin/submit \
	/usr/sbin/sendmail \
	/usr/lib/sendmail  \
	)
CF_SYSTEM_MAIL_FLAGS
if test -n "$SYSTEM_MAIL" ; then
if test $with_full_paths = no ; then
	SYSTEM_MAIL=`basename $SYSTEM_MAIL`
fi
fi

dnl --------------------------------------------------------------------------
CF_XOPEN_SOURCE(500,199506L)
CF_SIGWINCH

dnl Collect tests for compiler options into one place
if test -n "$TRY_CFLAGS" ; then
	CF_CHECK_CFLAGS($TRY_CFLAGS)
fi

dnl --------------------------------------------------------------------------
dnl Checks for library configuration (added right-to-left)
dnl --------------------------------------------------------------------------

### Look for network libraries first, since some functions (such as gethostname)
### are used in a lot of places.
AC_CACHE_CHECK(if you want NSS compatible SSL libraries,cf_cv_use_libnss_compat,[
AC_ARG_WITH(nss-compat,
	[  --with-nss-compat{=path}       link with nss_compat library if available],
	[cf_cv_use_libnss_compat=$withval],
	[cf_cv_use_libnss_compat=no])
])

AC_CACHE_CHECK(if you want ssl library,cf_cv_use_libssl,[
AC_ARG_WITH(ssl,
	[  --with-ssl{=path}       link with ssl library if available],
	[cf_cv_use_libssl=$withval],
	[cf_cv_use_libssl=no])
])

AC_CACHE_CHECK(if you want gnutls support,cf_cv_use_libgnutls,[
AC_ARG_WITH(gnutls,
	[  --with-gnutls{=path}    link with gnutls support],
	[cf_cv_use_libgnutls=$withval],
	[cf_cv_use_libgnutls=no])
])

# this option is mainly for comparing with/without Lynx's wrapper for GNUTLS.
AC_CACHE_CHECK(if you want gnutls-openssl compat,cf_cv_gnutls_compat,[
AC_ARG_ENABLE(gnutls-compat,
	[  --enable-gnutls-compat  link with gnutls-openssl compat],
	[cf_cv_gnutls_compat=$enableval],
	[cf_cv_gnutls_compat=no])
])

AC_CACHE_CHECK(if you want socks library,cf_cv_use_libsocks,[
AC_ARG_WITH(socks,
	[  --with-socks{=path}     link with socks library if available],
	[cf_cv_use_libsocks=$withval],
	[cf_cv_use_libsocks=no])
])

AC_CACHE_CHECK(if you want socks5 library,cf_cv_use_libsocks5,[
AC_ARG_WITH(socks5,
	[  --with-socks5{=path}    link with socks5 library if available],
	[cf_cv_use_libsocks5=$withval],
	[cf_cv_use_libsocks5=no])
])

if test "x$cf_cv_use_libsocks" != xno ; then
	CF_SOCKS($cf_cv_use_libsocks)
elif test "x$cf_cv_use_libsocks5" != xno ; then
	CF_SOCKS5($cf_cv_use_libsocks5)
else
	CF_NETLIBS
fi

CF_INET_ADDR

CF_PKG_CONFIG

if test "x$cf_cv_use_libssl"  != xno ; then
	CF_SSL($cf_cv_use_libssl)
elif test "x$cf_cv_use_libgnutls" != xno ; then
    if test "x$cf_cv_gnutls_compat" = xno ; then
        CF_GNUTLS($cf_cv_use_libgnutls,tidy_tls\$o)
		AC_CHECK_FUNCS(gnutls_priority_set_direct)
    else
        CF_GNUTLS($cf_cv_use_libgnutls)
    fi
elif test "x$cf_cv_use_libnss_compat"  != xno ; then
	CF_NSS_COMPAT($cf_cv_use_libnss_compat)
fi

dnl --------------------------------------------------------------------------
### check for ipv6 support
AC_MSG_CHECKING([whether to enable ipv6])
CF_ARG_ENABLE(ipv6,
[  --enable-ipv6           use ipv6 (with ipv4) support],
	[AC_DEFINE(ENABLE_IPV6,1,[Define to 1 if we should enable ipv6])])
AC_MSG_RESULT($enableval)
if test "$enableval" = "yes"; then
	CF_CHECK_IPV6
fi
dnl AC_REPLACE_FUNCS(getaddrinfo getnameinfo)

dnl --------------------------------------------------------------------------
dnl This has to be cached, since there's a lot of interdependent tests.
AC_CACHE_CHECK(for screen type, cf_cv_screen,[
AC_ARG_WITH(screen,
[  --with-screen=XXX       select screen type (XXX is curses (default),
                          ncurses, ncursesw, pdcurses or slang)],
	[
case $withval in
curses|ncurses|ncursesw|pdcurses|slang)
	cf_cv_screen=$withval
	;;
*)	AC_ERROR(Unexpected value)
	;;
esac],
	[cf_cv_screen=curses])])

case $cf_cv_screen in
curses|ncurses*)
	CF_WITH_CURSES_DIR
	;;
esac

cf_wide_curses=no
dft_color_style=yes
case $cf_cv_screen in
curses)
	CF_CURSES_CONFIG
	CF_CURS_PERFORMANCE
	CF_CURS_TOUCHLINE
	;;
ncurses)
	CF_NCURSES_CONFIG
	;;
ncursesw)
	CF_UTF8_LIB
	CF_NCURSES_CONFIG(ncursesw)
	cf_wide_curses=yes
	;;
pdcurses)
	case $host_os in
	mingw*)
		cf_cv_ncurses_header=curses.h
		;;
	*) #(vi
		cf_cv_ncurses_header=xcurses.h
		# do this last, since it changes definition of main: CF_PDCURSES_X11
		;;
	esac
	;;
slang)
	CF_SLANG_UNIX_DEFS
	dft_color_style=no
	;;
esac

CF_CURSES_CHTYPE

AC_MSG_CHECKING(if you want the wide-curses features)
CF_ARG_ENABLE(widec, 
[  --enable-widec          enable wide-curses features], 
	[use_wide_curses=$enableval],
	[use_wide_curses=$cf_wide_curses])
AC_MSG_RESULT($use_wide_curses)

AC_MSG_CHECKING(if color-style code should be used)
CF_ARG_DISABLE(color-style,
[  --disable-color-style   use color style (ncurses/curses)],
	[use_color_style=$enableval],
	[use_color_style=$dft_color_style])

case $use_color_style in
no)
	AC_MSG_RESULT(no)
	INSTALL_LSS=
	;;
*)
	AC_DEFINE(USE_COLOR_STYLE,1,[Define to 1 if we should enable color-style])
	AC_MSG_RESULT(yes)

	AC_MSG_CHECKING(for location of style-sheet file)

CF_WITH_PATH(lss-file,
[  --with-lss-file{=path}  specify the default style-sheet file
                         ],
LYNX_LSS_FILE,
SYSCONFDIR/lynx.lss,
$sysconfdir/lynx.lss)

	AC_MSG_RESULT($LYNX_LSS_FILE)

	test "$LYNX_LSS_FILE" = no && LYNX_LSS_FILE=
	AC_DEFINE_UNQUOTED(LYNX_LSS_FILE,"$LYNX_LSS_FILE",[Define to default path for Lynx lss-file])

	INSTALL_LSS=install-lss
	;;
esac
AC_SUBST(INSTALL_LSS)

dnl --------------------------------------------------------------------------

AC_MSG_CHECKING(for the default configuration-file)

CF_WITH_PATH(cfg-file,
[  --with-cfg-file{=path}  specify the default configuration file
                         ],
LYNX_CFG_FILE,
SYSCONFDIR/lynx.cfg,
$sysconfdir/lynx.cfg)

AC_MSG_RESULT($LYNX_CFG_FILE)

test "$LYNX_CFG_FILE" = no && LYNX_CFG_FILE=
AC_DEFINE_UNQUOTED(LYNX_CFG_FILE,"$LYNX_CFG_FILE",[Define to default path for Lynx cfg-file])

dnl --------------------------------------------------------------------------

AC_MSG_CHECKING(for the default configuration-path)

CF_WITH_PATH(cfg-path,
[  --with-cfg-path{=path}  specify the default configuration directories
                         ],
LYNX_CFG_PATH,
SYSCONFDIR,
$sysconfdir)

AC_MSG_RESULT($LYNX_CFG_PATH)

test -z "$LYNX_CFG_PATH" && `echo "$LYNX_CFG_FILE" | sed -e 's%/[[^/]]*$%%'`
test "x$LYNX_CFG_PATH" = xno && LYNX_CFG_PATH=
AC_DEFINE_UNQUOTED(LYNX_CFG_PATH,"$LYNX_CFG_PATH",[Define to default path for Lynx config-files])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if htmlized lynx.cfg should be built)
CF_ARG_ENABLE(htmlized-cfg,
[  --enable-htmlized-cfg   build htmlized lynx.cfg],
	[use_htmlized_cfg=$enableval],
	[use_htmlized_cfg=no])
AC_MSG_RESULT($use_htmlized_cfg)

LYNXCFG_MAKE=''
if test $use_htmlized_cfg = no ; then
	LYNXCFG_MAKE='#'
fi
AC_SUBST(LYNXCFG_MAKE)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if local doc directory should be linked to help page)
CF_ARG_ENABLE(local-docs,
[  --enable-local-docs     link local doc-directory to help-page],
	[use_local_docs=$enableval],
	[use_local_docs=no])
AC_MSG_RESULT($use_local_docs)

LYNXDOC_MAKE=''
if test $use_local_docs = no ; then
	LYNXDOC_MAKE='#'
fi
AC_SUBST(LYNXDOC_MAKE)

dnl --------------------------------------------------------------------------

AC_MSG_CHECKING(for MIME library directory)
CF_WITH_PATH(mime-libdir,
[  --with-mime-libdir=DIR  MIME data, mime.types and mailcap],
MIME_LIBDIR,
[/etc])
AC_MSG_RESULT($MIME_LIBDIR)
MIME_LIBDIR=`echo "$MIME_LIBDIR" | sed -e 's,/$,,' -e 's,$,/,'`
AC_DEFINE_UNQUOTED(MIME_LIBDIR,"$MIME_LIBDIR",[Define to default path for MIME library])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if locale-charset selection logic should be used)
CF_ARG_DISABLE(locale-charset,
[  --disable-locale-charset use locale-charset selection logic],
	[use_locale_charset=$enableval],
	[use_locale_charset=yes])
AC_MSG_RESULT($use_locale_charset)
test $use_locale_charset != no && AC_DEFINE(USE_LOCALE_CHARSET,1,[Define to 1 if locale-charset selection logic should be used])

dnl --------------------------------------------------------------------------
dnl Check for subsets of compiled-in tables.
dnl --------------------------------------------------------------------------
CHARSET_DEFS=
AC_SUBST(CHARSET_DEFS)

AC_MSG_CHECKING(if you want only a few charsets)
AC_ARG_WITH(charsets,
[  --with-charsets=list    limit charsets to given list of MIME names],
[cf_charsets=$withval],
[cf_charsets=])

if test -n "$cf_charsets" ; then
	AC_MSG_RESULT(yes)
	AC_DEFINE(ALL_CHARSETS,0,[Define to 0 if xxx])
	cf_min_charsets=us-ascii,iso-8859-1,utf-8
	if test "$cf_charsets" = "no" ; then
		cf_charsets=minimal
	fi
	if test "$cf_charsets" = "minimal" ; then
		CF_VERBOSE(using minimal list of charsets: $cf_min_charsets)
	fi
	cf_charsets=`echo $cf_charsets | sed -e "s/minimal/$cf_min_charsets/g" -e 's/,/ /g'`
	for cf_charset in $cf_charsets
	do
		cf_def_charset=`echo $cf_charset | sed -e 's/+/_/g' -e 's/-/_/g'`
		cf_use_charset=no
		# check charsets that are defined via .tbl files
		if ( egrep '^M'$cf_charset'$' $srcdir/src/chrtrans/*.tbl 2>/dev/null >/dev/null )
		then
			cf_use_charset=yes
		# check charsets that are "built-in"
		else
			for cf_tst_charset in big5 euc_cn euc_jp euc_kr shift_jis x_transparent
			do
				if test "$cf_tst_charset" = "$cf_def_charset"
				then
					cf_use_charset=yes
					break
				fi
			done
		fi
		if test $cf_use_charset=yes
		then
			CF_VERBOSE(found $cf_charset)
			CHARSET_DEFS="-DNO_CHARSET_${cf_def_charset}=0 $CHARSET_DEFS"
		else
			CF_VERBOSE(not found $cf_charset)
		fi
	done
else
	AC_MSG_RESULT(no)
fi

dnl --------------------------------------------------------------------------
dnl Checks for standard headers
dnl --------------------------------------------------------------------------

AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_DIRENT
dnl Don't check for sys/wait.h here since it is covered by another test.
AC_CHECK_HEADERS( \
	arpa/inet.h \
	fcntl.h \
	limits.h \
	stdlib.h \
	string.h \
	sys/fcntl.h \
	sys/filio.h \
	sys/ioctl.h \
	sys/param.h \
	sys/timeb.h \
	sys/time.h \
	syslog.h \
	termio.h \
	termios.h \
	unistd.h \
	vfork.h \
)
CF_TERMIO_AND_TERMIOS
CF_FUNC_SIGACTION
CF_FUNC_WAIT
AC_TYPE_GETGROUPS
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_UID_T
AC_TYPE_MODE_T
CF_CHECK_TYPE(ssize_t, int)
CF_CHECK_TYPE(socklen_t, int, [
#include <sys/types.h>
#include <sys/socket.h>
])
CF_TYPE_LONG_LONG
CF_TM_GMTOFF

CF_CHECK_SIZEOF(int,4)
CF_CHECK_SIZEOF(long,4)
CF_CHECK_SIZEOF(off_t,4)
CF_CHECK_SIZEOF(time_t,4)
AC_CHECK_TYPE(intptr_t, long)

dnl --------------------------------------------------------------------------
dnl Checks for library units
dnl --------------------------------------------------------------------------

AC_FUNC_ALLOCA
AC_FUNC_VFORK
CF_FIONBIO
CF_REMOVE_BROKEN
CF_FUNC_LSTAT
AC_CHECK_FUNCS( \
	atoll \
	ctermid \
	cuserid \
	ftime \
	getcwd \
	getgroups \
	gettimeofday \
	getuid \
	mktemp \
	mkdtemp \
	popen \
	putenv \
	readdir \
	setuid \
	strerror \
	truncate \
	ttyname \
	unsetenv \
	sleep usleep \
	vasprintf \
	waitpid \
)
AC_REPLACE_FUNCS( \
	mktime \
	strstr \
)

CF_SRAND(lynx_)
CF_CHECK_FUNCDECLS([
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
], sleep)
CF_CHECK_FUNCDECLS([#include <string.h>], strstr)
CF_CHECK_FUNCDECLS([
#include <stdio.h>
#include <grp.h>], getgrgid getgrnam)

dnl --------------------------------------------------------------------------
dnl Checks for external-data
dnl --------------------------------------------------------------------------

CF_BOOL_DEFS
CF_ERRNO
CF_SET_ERRNO
CF_LOCALE
CF_NGROUPS
CF_SYS_ERRLIST
CF_UTMP
CF_CHECK_EXTERN_DATA(h_errno,int)

AC_SUBST(EXTRA_OBJS)

dnl --------------------------------------------------------------------------
dnl Experimental options that don't need to test system features
dnl --------------------------------------------------------------------------

CF_HELP_MESSAGE(
Experimental Options:)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if bibp: URLs should be supported)
CF_ARG_DISABLE(bibp-urls,
[  --disable-bibp-urls     disable support for bibp: URLs],
	[use_bibp_urls=$enableval],
	[use_bibp_urls=yes])
AC_MSG_RESULT($use_bibp_urls)
test $use_bibp_urls = no && AC_DEFINE(DISABLE_BIBP,1,[Define to 1 if bibp: URLs should be supported])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if configuration info should be browsable)
CF_ARG_DISABLE(config-info,
[  --disable-config-info   disable browsable configuration-info],
	[use_config_info=$enableval],
	[use_config_info=yes])
AC_MSG_RESULT($use_config_info)
test $use_config_info = no && AC_DEFINE(NO_CONFIG_INFO,1,[Define to 1 if configuration info should be browsable])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if new-style forms-based options screen should be used)
CF_ARG_DISABLE(forms-options,
[  --disable-forms-options disable forms-based options],
	[use_forms_options=$enableval],
	[use_forms_options=yes])
AC_MSG_RESULT($use_forms_options)
test $use_forms_options = no && AC_DEFINE(NO_OPTION_FORMS,1,[Define to 1 if new-style forms-based options screen should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if old-style options menu should be used)
CF_ARG_DISABLE(menu-options,
[  --disable-menu-options  disable old-style option menu],
	[use_menu_options=$enableval],
	[use_menu_options=yes])
AC_MSG_RESULT($use_menu_options)
test $use_menu_options = no && AC_DEFINE(NO_OPTION_MENU,1,[Define to 1 if old-style options menu should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if sessions code should be used)
CF_ARG_DISABLE(sessions,
[  --disable-sessions      use sessions code],
	[use_sessions=$enableval],
	[use_sessions=yes])
AC_MSG_RESULT($use_sessions)
if test $use_sessions != no ; then
	AC_DEFINE(USE_SESSIONS,1,[Define to 1 if sessions code should be used])
	EXTRA_OBJS="$EXTRA_OBJS LYSession\$o"
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if session-caching code should be used)
CF_ARG_DISABLE(session-cache,
[  --disable-session-cache use session-caching code],
	[use_session_cache=$enableval],
	[use_session_cache=yes])
AC_MSG_RESULT($use_session_cache)
if test $use_session_cache != no ; then
    AC_DEFINE(USE_CACHEJAR,1,[Define to 1 if session-caching code should be used])
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if address-list page should be used)
CF_ARG_DISABLE(addrlist-page,
[  --disable-addrlist-page disable address-list page],
	[use_addrlist_page=$enableval],
	[use_addrlist_page=yes])
AC_MSG_RESULT($use_addrlist_page)
test $use_addrlist_page != no && AC_DEFINE(USE_ADDRLIST_PAGE,1,[Define to 1 if address-list page should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if experimental CJK logic should be used)
CF_ARG_ENABLE(cjk,
[  --enable-cjk            use experimental CJK logic],
	[use_cjk=$enableval],
	[use_cjk=no])
AC_MSG_RESULT($use_cjk)
test $use_cjk != no && AC_DEFINE(CJK_EX,1,[Define to 1 if experimental CJK logic should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if experimental Japanese UTF-8 logic should be used)
CF_ARG_ENABLE(japanese-utf8,
[  --enable-japanese-utf8  use experimental Japanese UTF-8 logic],
	[use_ja_utf8=$enableval],
	[use_ja_utf8=no])
AC_MSG_RESULT($use_ja_utf8)
if test $use_ja_utf8 != no ; then
	AC_DEFINE(EXP_JAPANESEUTF8_SUPPORT,1,[Define to 1 if experimental Japanese UTF-8 logic should be used])
	AM_ICONV
	if test "$USE_NLS" != yes ; then
	  LIBS="$LIBICONV $LIBS"
	fi
fi

use_dft_colors=no
case $cf_cv_screen in
curses|slang|ncurses*)
	use_dft_colors=maybe
	;;
esac

dnl --------------------------------------------------------------------------
if test "$use_dft_colors" != no ; then
AC_MSG_CHECKING(if you want to use default-colors)
CF_ARG_ENABLE(default-colors,
[  --enable-default-colors enable use of default-colors (ncurses/slang)],
	[use_dft_colors=yes],
	[use_dft_colors=no])
AC_MSG_RESULT($use_dft_colors)
test $use_dft_colors = "yes" && AC_DEFINE(USE_DEFAULT_COLORS,1,[Define to 1 if you want to use default-colors])
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if experimental keyboard-layout logic should be used)
CF_ARG_ENABLE(kbd-layout,
[  --enable-kbd-layout     use experimental keyboard-layout support],
	[use_kbd_layout=$enableval],
	[use_kbd_layout=no])
AC_MSG_RESULT($use_kbd_layout)
test $use_kbd_layout != no && AC_DEFINE(EXP_KEYBOARD_LAYOUT,1,[Define to 1 if experimental keyboard-layout logic should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if experimental nested-table logic should be used)
CF_ARG_ENABLE(nested-tables,
[  --enable-nested-tables  use experimental nested-table support],
	[use_nested_tables=$enableval],
	[use_nested_tables=no])
AC_MSG_RESULT($use_nested_tables)
test $use_nested_tables != no && AC_DEFINE(EXP_NESTED_TABLES,1,[Define to 1 if experimental nested-table logic should be used])

dnl --------------------------------------------------------------------------
dnl Miscellaneous options that don't need to test system features
dnl --------------------------------------------------------------------------

CF_HELP_MESSAGE(
Miscellaneous Options:)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if alternative line-edit bindings should be used)
CF_ARG_DISABLE(alt-bindings,
[  --disable-alt-bindings  disable alternative line-edit bindings],
	[use_alt_bindings=$enableval],
	[use_alt_bindings=yes])
AC_MSG_RESULT($use_alt_bindings)
test $use_alt_bindings != no && AC_DEFINE(USE_ALT_BINDINGS,1,[Define to 1 if alternative line-edit bindings should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if ascii case-conversion should be used)
CF_ARG_DISABLE(ascii-ctypes,
[  --disable-ascii-ctypes  disable use of ascii case-conversion],
	[use_ascii_ctypes=$enableval],
	[use_ascii_ctypes=yes])
AC_MSG_RESULT($use_ascii_ctypes)
test $use_ascii_ctypes != no && AC_DEFINE(USE_ASCII_CTYPES,1,[Define to 1 if ascii case-conversion should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to use extended HTML DTD logic)
CF_ARG_DISABLE(extended-dtd,
[  --disable-extended-dtd  disable extended HTML DTD logic],
	[use_ext_htmldtd=no],
	[use_ext_htmldtd=yes])
AC_MSG_RESULT($use_ext_htmldtd)
test $use_ext_htmldtd = "no" && AC_DEFINE(NO_EXTENDED_HTMLDTD,1,[Define to 1 if you want to use extended HTML DTD logic])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if file-upload logic should be used)
CF_ARG_DISABLE(file-upload,
[  --disable-file-upload   disable file-upload support],
	[use_file_upload=$enableval],
	[use_file_upload=yes])
AC_MSG_RESULT($use_file_upload)
test $use_file_upload != no && AC_DEFINE(USE_FILE_UPLOAD,1,[Define to 1 if file-upload logic should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if IDNA support should be used)
CF_ARG_DISABLE(idna,
[  --disable-idna          disable IDNA support],
	[use_idna=$enableval],
	[use_idna=yes])
AC_MSG_RESULT($use_idna)

if test "$use_idna" = yes ; then
	CF_WITH_IDNA($use_idna)
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if element-justification logic should be used)
CF_ARG_DISABLE(justify-elts,
[  --disable-justify-elts  disable element-justification logic],
	[use_justify_elts=$enableval],
	[use_justify_elts=yes])
AC_MSG_RESULT($use_justify_elts)
test $use_justify_elts != no && AC_DEFINE(USE_JUSTIFY_ELTS,1,[Define to 1 if element-justification logic should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if partial-display should be used)
CF_ARG_DISABLE(partial,
[  --disable-partial       disable partial-display logic],
	[use_partial_display=$enableval],
	[use_partial_display=yes])
AC_MSG_RESULT($use_partial_display)
test $use_partial_display != no && AC_DEFINE(DISP_PARTIAL,1,[Define to 1 if partial-display should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if persistent-cookie logic should be used)
CF_ARG_DISABLE(persistent-cookies,
[  --disable-persistent-cookies  disable persistent-cookie support],
	[use_filed_cookies=$enableval],
	[use_filed_cookies=yes])
AC_MSG_RESULT($use_filed_cookies)
test $use_filed_cookies != no && AC_DEFINE(USE_PERSISTENT_COOKIES,1,[Define to 1 if persistent-cookie logic should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if html source should be colorized)
CF_ARG_DISABLE(prettysrc,
[  --disable-prettysrc     disable colorization of HTML source],
	[use_prettysrc=$enableval],
	[use_prettysrc=yes])
AC_MSG_RESULT($use_prettysrc)
test $use_prettysrc != no && AC_DEFINE(USE_PRETTYSRC,1,[Define to 1 if html source should be colorized])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if progress-bar code should be used)
CF_ARG_DISABLE(progressbar,
[  --disable-progressbar   disable progress-bar],
	[use_progressbar=$enableval],
	[use_progressbar=yes])
AC_MSG_RESULT($use_progressbar)
test $use_progressbar != no && AC_DEFINE(USE_PROGRESSBAR,1,[Define to 1 if progress-bar code should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if read-progress message should show ETA)
CF_ARG_DISABLE(read-eta,
[  --disable-read-eta      disable read-progress message shows ETA],
	[use_read_eta=$enableval],
	[use_read_eta=yes])
AC_MSG_RESULT($use_read_eta)
test $use_read_eta != no && AC_DEFINE(USE_READPROGRESS,1,[Define to 1 if read-progress message should show ETA])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if source caching should be used)
CF_ARG_DISABLE(source-cache,
[  --disable-source-cache  do not cache HTML source for parse mode changes],
	[use_source_cache=$enableval],
	[use_source_cache=yes])
AC_MSG_RESULT($use_source_cache)
test $use_source_cache != no && AC_DEFINE(USE_SOURCE_CACHE,1,[Define to 1 if source caching should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if scrollbar code should be used)
CF_ARG_DISABLE(scrollbar,
[  --disable-scrollbar     disable scrollbar with mouse],
	[use_scrollbar=$enableval],
	[use_scrollbar=yes])
AC_MSG_RESULT($use_scrollbar)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if charset-selection logic should be used)
CF_ARG_ENABLE(charset-choice,
[  --enable-charset-choice use charset-selection logic],
	[use_charset_choice=$enableval],
	[use_charset_choice=no])
AC_MSG_RESULT($use_charset_choice)
test $use_charset_choice != no && AC_DEFINE(USE_CHARSET_CHOICE,1,[Define to 1 if charset-selection logic should be used])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to use external commands)
CF_ARG_ENABLE(externs,
[  --enable-externs        use external commands],
	[use_externs=yes],
	[use_externs=no])
AC_MSG_RESULT($use_externs)
if test $use_externs != "no" ; then
	AC_DEFINE(USE_EXTERNALS,1,[Define to 1 if you want to use external commands])
	EXTRA_OBJS="$EXTRA_OBJS LYExtern\$o"
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to use setfont support)
CF_ARG_ENABLE(font-switch,
[  --enable-font-switch    use Linux setfont for character-translation],
	[use_setfont=yes],
	[use_setfont=no])
AC_MSG_RESULT($use_setfont)
if test $use_setfont = yes ; then
	case $host_os in
	linux*)
		CF_PATH_PROG(SETFONT, consolechars, setfont)
		;;
	os2*)
		SETFONT=built-in
		CF_VERBOSE(Assume $host_os has font-switching)
		;;
	*)
		SETFONT=unknown
		CF_VERBOSE(Assume $host_os has no font-switching)
		;;
	esac
	if test -z "$SETFONT" ; then
		AC_MSG_WARN(Cannot find a font-setting program)
	elif test "$SETFONT" != unknown ; then
		AC_DEFINE(EXP_CHARTRANS_AUTOSWITCH,1,[Define to 1 if you want to use setfont support])
	fi
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want cgi-link support)
CF_ARG_ENABLE(cgi-links,
[  --enable-cgi-links      support cgi links w/o a http daemon],
	[AC_DEFINE(LYNXCGI_LINKS,1,[Define to 1 if you want cgi-link support])])
AC_MSG_RESULT($enableval)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want change-exec support)
CF_ARG_ENABLE(change-exec,
[  --enable-change-exec    allow users to change exec options],
	[use_change_exec=yes],
	[use_change_exec=no])
AC_MSG_RESULT($use_change_exec)
test $use_change_exec = yes && AC_DEFINE(ENABLE_OPTS_CHANGE_EXEC,1,[Define to 1 if you want change-exec support])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want exec-links support)
CF_ARG_OPTION(exec-links,
[  --enable-exec-links     allow lynx to execute programs accessed via a link],
	[use_exec_links=$enableval],
	[use_exec_links=$enableval],
	[$use_change_exec])
AC_MSG_RESULT($use_exec_links)
test $use_exec_links = yes && AC_DEFINE(EXEC_LINKS,1,[Define to 1 if you want exec-links support])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want exec-scripts support)
CF_ARG_OPTION(exec-scripts,
[  --enable-exec-scripts   allow lynx to execute programs inferred from a link],
	[use_exec_scripts=$enableval],
	[use_exec_scripts=$enableval],
	[$use_change_exec])
AC_MSG_RESULT($use_exec_scripts)
test $use_exec_scripts = yes && AC_DEFINE(EXEC_SCRIPTS,1,[Define to 1 if you want exec-scripts support])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want internal-links feature)
CF_ARG_ENABLE(internal-links,
[  --enable-internal-links handle following links to same doc differently],
	[use_internal_links=yes],
	[use_internal_links=no])
AC_MSG_RESULT($use_internal_links)
test $use_internal_links = yes && AC_DEFINE(TRACK_INTERNAL_LINKS,1,[Define to 1 if you want internal-links feature])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to fork NSL requests)
CF_ARG_ENABLE(nsl-fork,
[  --enable-nsl-fork       fork NSL requests, allowing them to be aborted],
	[use_nsl_fork=yes],
	[use_nsl_fork=no])
AC_MSG_RESULT($use_nsl_fork)
if test $use_nsl_fork = yes ; then
	case $host_os in
	mingw*)
		AC_DEFINE(_WINDOWS_NSL,1,[Define to 1 if we want NSL-fork with Windows])
		;;
	*)
		AC_DEFINE(NSL_FORK,1,[Define to 1 if we want NSL-fork])
		;;
	esac
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to log URL requests via syslog)
CF_ARG_ENABLE(syslog,
[  --enable-syslog         log URL requests via syslog],
	[use_syslog=yes],
	[use_syslog=no])
AC_MSG_RESULT($use_syslog)
test $use_syslog = yes && AC_DEFINE(SYSLOG_REQUESTED_URLS,1,[Define to 1 if you want to log URL requests via syslog])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to underline links)
CF_ARG_ENABLE(underlines,
[  --enable-underlines     underline links rather than using boldface],
	[use_underline=yes],
	[use_underline=no])
AC_MSG_RESULT($use_underline)
test $use_underline = yes && AC_DEFINE(UNDERLINE_LINKS,1,[Define to 1 if xxx])
test $use_underline = no  && AC_DEFINE(UNDERLINE_LINKS,0,[Define to 0 if xxx])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if help files should be gzip'ed)
CF_ARG_ENABLE(gzip-help,
[  --enable-gzip-help      install gzip'ed help files],
	[use_gzip_help=$enableval],
	[use_gzip_help=no])
AC_MSG_RESULT($use_gzip_help)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to use libbz2 for decompression of some bzip2 files)
AC_ARG_WITH(bzlib,
[  --with-bzlib            use libbz2 for decompression of some bzip2 files],
	[use_bzlib=$withval],
	[use_bzlib=no])
AC_MSG_RESULT($use_bzlib)

if test ".$use_bzlib" != ".no" ; then
	CF_WITH_BZLIB($use_bzlib)
	test "x$cf_cv_find_linkage_bz2" = "xyes" && AC_DEFINE(USE_BZLIB,1,[Define to 1 if you want to use libbz2 for decompression of some bzip2 files])
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to use zlib for decompression of some gzip files)
AC_ARG_WITH(zlib,
[  --with-zlib             use zlib for decompression of some gzip files],
	[use_zlib=$withval],
	[use_zlib=no])
AC_MSG_RESULT($use_zlib)

if test ".$use_zlib" != ".no" ; then
	CF_WITH_ZLIB($use_zlib)
	test "x$cf_cv_find_linkage_z" = "xyes" && AC_DEFINE(USE_ZLIB,1,[Define to 1 if you want to use zlib for decompression of some gzip files])
fi

dnl --------------------------------------------------------------------------
CF_HELP_MESSAGE(
Other Network Services:)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to exclude FINGER code)
CF_ARG_DISABLE(finger,
[  --disable-finger        disable FINGER logic],
	[use_finger=yes],
	[use_finger=no])
AC_MSG_RESULT($use_finger)
test $use_finger != "no" && AC_DEFINE(DISABLE_FINGER,1,[Define to 1 if you want to exclude FINGER code])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to exclude GOPHER code)
CF_ARG_DISABLE(gopher,
[  --disable-gopher        disable GOPHER logic],
	[use_gopher=yes],
	[use_gopher=no])
AC_MSG_RESULT($use_gopher)
test $use_gopher != "no" && AC_DEFINE(DISABLE_GOPHER,1,[Define to 1 if you want to exclude GOPHER code])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to exclude NEWS code)
CF_ARG_DISABLE(news,
[  --disable-news          disable NEWS logic],
      [use_news=yes],
      [use_news=no])
AC_MSG_RESULT($use_news)
test $use_news != "no" && AC_DEFINE(DISABLE_NEWS,1,[Define to 1 if you want to exclude NEWS code])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to exclude FTP code)
CF_ARG_DISABLE(ftp,
[  --disable-ftp           disable FTP logic],
      [use_ftp=yes],
      [use_ftp=no])
AC_MSG_RESULT($use_ftp)
test $use_ftp != "no" && AC_DEFINE(DISABLE_FTP,1,[Define to 1 if you want to exclude FTP code])

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want to include WAIS code)
CF_ARG_ENABLE(wais,
[  --enable-wais           enable WAIS logic],
      [use_wais=yes],
      [use_wais=no])
AC_MSG_RESULT($use_wais)

MAKE_WAIS="#"
if test $use_wais != "no"
then
	AC_CHECK_LIB(wais,fs_free,[
		CF_MATH_LIB
		CF_ADD_LIB(wais)
		AC_CHECK_HEADERS(wais.h)
		MAKE_WAIS=
		],[AC_MSG_WARN(could not find WAIS library)])
fi
AC_SUBST(MAKE_WAIS)

dnl --------------------------------------------------------------------------
dnl DirEd (directory-editor) options
dnl --------------------------------------------------------------------------

CF_HELP_MESSAGE(
Directory Editor Options:)

# All DirEd functions that were enabled on compilation can be disabled
# or modified at run time via DIRED_MENU symbols in lynx.cfg.
AC_MSG_CHECKING(if directory-editor code should be used)
CF_ARG_DISABLE(dired,
[  --disable-dired          disable optional directory-editor, DirEd],
	[use_dired=$enableval],
	[use_dired=yes])
AC_MSG_RESULT($use_dired)

if test ".$use_dired" != ".no" ; then
	EXTRA_OBJS="$EXTRA_OBJS LYLocal\$o"
	AC_DEFINE(DIRED_SUPPORT,1,[Define to 1 if we want dired support])

	AC_MSG_CHECKING(if you wish to allow extracting from archives via DirEd)
	CF_ARG_DISABLE(dired-dearchive,
	[  --disable-dired-dearchive disable dearchiving commands],[AC_DEFINE(ARCHIVE_ONLY,1,[Define to 1 if you wish to allow extracting from archives via DirEd])])
	AC_MSG_RESULT($enableval)

	AC_MSG_CHECKING(if DirEd mode should override keys)
	CF_ARG_DISABLE(dired-override,
	[  --disable-dired-override disable DirEd override keymap],,[AC_DEFINE(OK_OVERRIDE,1,[Define to 1 if DirEd mode should override keys])])
	AC_MSG_RESULT($enableval)

	AC_MSG_CHECKING(if you wish to allow permissions commands via DirEd)
	CF_ARG_DISABLE(dired-permit,
	[  --disable-dired-permit  disable chmod/attrib commands],,[AC_DEFINE(OK_PERMIT,1,[Define to 1 if you wish to allow permissions commands via DirEd])])
	AC_MSG_RESULT($enableval)

	AC_MSG_CHECKING(if you wish to allow executable-permission commands via DirEd)
	CF_ARG_DISABLE(dired-xpermit,
	[  --disable-dired-xpermit disable chmod/attrib commands],[AC_DEFINE(NO_CHANGE_EXECUTE_PERMS,1,[Define to 1 if you wish to allow executable-permission commands via DirEd])])
	AC_MSG_RESULT($enableval)

	AC_MSG_CHECKING(if you wish to allow "tar" commands from DirEd)
	CF_ARG_DISABLE(dired-tar,
	[  --disable-dired-tar     disable "tar" command],,[AC_DEFINE(OK_TAR,1,[Define to 1 if if you wish to allow "tar" commands from DirEd])])
	AC_MSG_RESULT($enableval)

	AC_MSG_CHECKING(if you wish to allow "uudecode" commands from DirEd)
	CF_ARG_DISABLE(dired-uudecode,
	[  --disable-dired-uudecode disable "uudecode" command],,[AC_DEFINE(OK_UUDECODE,1,[Define to 1 if you wish to allow "uudecode" commands from DirEd])])
	AC_MSG_RESULT($enableval)

	AC_MSG_CHECKING(if you wish to allow "zip" and "unzip" commands from DirEd)
	CF_ARG_DISABLE(dired-zip,
	[  --disable-dired-zip     disable "zip", "unzip"  commands],,[AC_DEFINE(OK_ZIP,1,[Define to 1 if you wish to allow "zip" and "unzip" commands from DirEd])])
	AC_MSG_RESULT($enableval)

	AC_MSG_CHECKING(if you wish to allow "gzip" and "gunzip" commands from DirEd)
	CF_ARG_DISABLE(dired-gzip,
	[  --disable-dired-gzip    disable "gzip", "gunzip" commands],,[AC_DEFINE(OK_GZIP,1,[Define to 1 if you wish to allow "gzip" and "gunzip" commands from DirEd])])
	AC_MSG_RESULT($enableval)
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if you want long-directory listings)
CF_ARG_DISABLE(long-list,
[  --disable-long-list     disable long "ls -l" directory listings],,
	[AC_DEFINE(LONG_LIST,1,[Define to 1 if you want long-directory listings])])
AC_MSG_RESULT($enableval)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if parent-directory references are permitted)
CF_ARG_DISABLE(parent-dir-refs,
[  --disable-parent-dir-refs
                          disable "Up-to" links in directory listings],
	[AC_DEFINE(NO_PARENT_DIR_REFERENCE,1,[Define to 1 if parent-directory references are permitted])])
AC_MSG_RESULT($enableval)

dnl --------------------------------------------------------------------------
CF_PATH_PROG(TELNET,	telnet)
CF_PATH_PROG(TN3270,	tn3270)
CF_PATH_PROG(RLOGIN,	rlogin)

CF_PATH_PROG(MV,	mv)

CF_PATH_PROG(GZIP,	gzip)
CF_PATH_PROG(UNCOMPRESS,gunzip)
CF_PATH_PROG(UNZIP,	unzip)
CF_PATH_PROG(BZIP2,	bzip2)

CF_PATH_PROG(TAR,	tar, pax gtar gnutar bsdtar star)
CF_TAR_OPTIONS($TAR)
AC_DEFINE_UNQUOTED(TAR_UP_OPTIONS,   "$TAR_UP_OPTIONS",[Define to command for tar'ing up files])
AC_DEFINE_UNQUOTED(TAR_DOWN_OPTIONS, "$TAR_DOWN_OPTIONS",[Define to command for untar'ing files])
AC_DEFINE_UNQUOTED(TAR_FILE_OPTIONS, "$TAR_FILE_OPTIONS",[Define to options for tar to work with files])
AC_DEFINE_UNQUOTED(TAR_PIPE_OPTIONS, "$TAR_PIPE_OPTIONS",[Define to options for tar to work with pipes])

dnl --------------------------------------------------------------------------
dnl Test features that rely on configure-definitions
dnl --------------------------------------------------------------------------
if test ".$use_dired" != ".no" ; then

CF_PATH_PROG(COMPRESS,	compress)
CF_PATH_PROG(RM,	rm)
CF_PATH_PROG(UUDECODE,	uudecode)
CF_PATH_PROG(ZCAT,	zcat)
CF_PATH_PROG(ZIP,	zip)

dnl 'INSTALL' is a special case, since the configure script has to find a
dnl BSD-compatible one so the build/install works properly.
case "$INSTALL" in
$srcdir*) # (vi
	AC_DEFINE_UNQUOTED(INSTALL_PATH,"install")
	;;
*) # (vi
	cf_save_INSTALL="$INSTALL"
	CF_PATH_PROG(INSTALL,	install)
	INSTALL="$cf_save_INSTALL"
	;;
esac
fi

COMPRESS_PROG=
COMPRESS_EXT=
if test $use_gzip_help = yes ; then
	COMPRESS_PROG="$ac_cv_path_GZIP -9"
	COMPRESS_EXT=.gz
fi
AC_SUBST(COMPRESS_PROG)
AC_SUBST(COMPRESS_EXT)

if test $cf_cv_screen = pdcurses ; then
	CF_HELP_MESSAGE(Special Libraries for PDCurses X11:)
	case $host_os in #(vi
	mingw*)
		CF_PDCURSES_W32
		;;
	*) #(vi
		CF_PDCURSES_X11
		;;
	esac
else
	CF_TERMIO_AND_CURSES(LYCurses.h)
fi

### These tests must be run after establishing the curses library.
if test $cf_cv_screen != slang ; then
	if test $cf_cv_screen != pdcurses ; then
		AC_CHECK_HEADERS($cf_cv_screen/term.h term.h)
	fi
	CF_ALT_CHAR_SET
	CF_FANCY_CURSES
	CF_FUNC_CURSES_VERSION
	CF_NCURSES_BROKEN
	CF_COLOR_CURSES
	CF_SIZECHANGE
	CF_TTYTYPE
	if test "$use_wide_curses" = yes ; then
		CF_WIDEC_CURSES
	fi
	CF_CURSES_FUNCS( \
		assume_default_colors \
		cbreak \
		define_key \
		delscreen \
		getattrs \
		getbegx \
		getbegy \
		keypad \
		napms \
		newpad \
		newterm \
		pnoutrefresh \
		resizeterm \
		touchline \
		touchwin \
		use_default_colors \
		use_legacy_coding \
		wattr_get \
		wborder \
		wredrawln \
		wresize \
		)
	AC_CHECK_FUNCS( \
		_nc_free_and_exit \
		_nc_freeall \
		)
fi

if test $use_color_style != no ; then
	if test .$cf_cv_color_curses != .yes ; then
		AC_ERROR(Configuration does not support color-styles)
	fi
	if test $cf_cv_screen = slang ; then
		AC_ERROR(Configuration does not support color-styles)
	fi
fi

if test $use_scrollbar != no ; then
	if test .$cf_cv_fancy_curses != .yes ; then
		AC_MSG_WARN(Configuration does not support ACS_xxx definitions)
	else
		AC_DEFINE(USE_SCROLLBAR,1,[Define to 1 if configuration supports ACS_xxx definitions])
	fi
fi

# use rpath for libraries in unusual places
CF_DISABLE_RPATH_HACK

### Finally, build config.h and the makefiles
test -z "$CONFIG_SHELL" && CONFIG_SHELL=/bin/sh
AC_SUBST(CONFIG_SHELL)

CFLAGS="$CFLAGS $EXTRA_CFLAGS"
srcdir="$srcdir"
SRCDIR_CLEAN="#"
if test -n "$srcdir" ; then
	echo srcdir is $srcdir
	mkdir -p WWW/Library/Implementation
	mkdir -p src/chrtrans
	test "$USE_INCLUDED_LIBINTL" = yes && mkdir -p intl
	test "$srcdir" != "." && SRCDIR_CLEAN=""
fi

AC_SUBST(SRCDIR_CLEAN)
AC_OUTPUT(
	[makefile \
	WWW/Library/Implementation/makefile \
	src/makefile \
	src/chrtrans/makefile \
	$SUB_MAKEFILE
	],[
	if test "$USE_NLS" = yes ; then
	if test "$use_our_messages" = yes ; then
		echo creating po/makefile
		rm -f	po/temp$$
		sed	-e 's%^.*LYMessages.c%	../LYMessages.c%' \
			-e '$s/\\//' po/POTFILES >po/temp$$
		sed	-e "/POTFILES =/r po/temp$$" \
			po/makefile.in > po/makefile
		rm -f	po/temp$$
	fi
	fi
	],[
	USE_NLS=$USE_NLS
	use_our_messages=$use_our_messages
	]
)
@


1.13
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.12
log
@Do not add -lcompat in configure.

libcompat isn't needed; configure checks for the presence of cuserid()
and ftime() and the build copes well with the absence of either.
ftime() would only ever be used if gettimeofday() wasn't available,
and cuserid() is replaced by getlogin() but that code branch is not
reached anyway.

ok sthen@@ jca@@ deraadt@@
@
text
@d1 1
a1 1
dnl $LynxId: configure.in,v 1.191 2009/04/12 12:45:06 tom Exp $
d10 1
a10 1
dnl Copyright 1997-2008,2009 by Thomas E. Dickey
d32 1
a32 1
AC_REVISION(2.8.7rel.2)
d62 2
d67 1
a67 1
VERSION=2.8.7rel.2
d95 1
a95 1
AC_PROG_CC
d109 7
a115 4
AC_CHECK_PROGS(LINT, lint alint lclint tdlint, [])

AC_AIX
AC_ISC_POSIX
d145 1
a145 1
test "$with_leak_checks" = "yes" && AC_DEFINE(LY_FIND_LEAKS)
d183 1
a183 1
test $with_trace = no && AC_DEFINE(NO_LYNX_TRACE)
d191 1
a191 1
test $with_vertrace = yes && AC_DEFINE(LY_TRACELINE,__LINE__)
d216 1
a216 3
AC_DEFINE(UNIX)

AC_C_CONST
a218 1
CF_PROG_EXT
a293 3
ekkobsd* | mirbsd*)
	LIBS="$LIBS -lcompat"
	;;
d343 1
a343 1
		[AC_DEFINE(HAVE_CURSESX_H)
d401 1
a401 1
test $with_full_paths = no && AC_DEFINE(USE_EXECVP)
d416 1
a416 1
CF_XOPEN_SOURCE(600,199506L)
d455 1
a455 1
	[cf_cv_gnutls_compat=$withval],
d490 1
d503 1
a503 1
	[AC_DEFINE(ENABLE_IPV6)])
d549 9
a557 2
	cf_cv_ncurses_header=xcurses.h
	# do this last, since it changes definition of main: CF_PDCURSES_X11
d586 1
a586 1
	AC_DEFINE(USE_COLOR_STYLE)
d601 1
a601 1
	AC_DEFINE_UNQUOTED(LYNX_LSS_FILE,"$LYNX_LSS_FILE")
d619 5
d626 1
a626 1
AC_MSG_RESULT($LYNX_CFG_FILE)
d628 12
a639 2
test "$LYNX_CFG_FILE" = no && LYNX_CFG_FILE=
AC_DEFINE_UNQUOTED(LYNX_CFG_FILE,"$LYNX_CFG_FILE")
d678 1
a678 1
AC_DEFINE_UNQUOTED(MIME_LIBDIR,"$MIME_LIBDIR")
d682 2
a683 2
CF_ARG_ENABLE(locale-charset,
[  --enable-locale-charset use locale-charset selection logic],
d687 1
a687 1
test $use_locale_charset != no && AC_DEFINE(USE_LOCALE_CHARSET)
d703 1
a703 1
	AC_DEFINE(ALL_CHARSETS,0)
d777 1
d782 1
d785 5
a789 4
AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(long,4)
AC_CHECK_SIZEOF(off_t,4)
AC_CHECK_SIZEOF(time_t,4)
d801 1
d819 1
a819 1
	usleep \
a821 1
	zError \
d829 8
d864 1
d871 1
a871 1
test $use_bibp_urls = no && AC_DEFINE(DISABLE_BIBP)
d873 1
d880 1
a880 1
test $use_config_info = no && AC_DEFINE(NO_CONFIG_INFO)
d882 1
d889 1
a889 1
test $use_forms_options = no && AC_DEFINE(NO_OPTION_FORMS)
d891 1
d898 1
a898 1
test $use_menu_options = no && AC_DEFINE(NO_OPTION_MENU)
d900 27
a926 3
AC_MSG_CHECKING(if experimental address-list page should be used)
CF_ARG_ENABLE(addrlist-page,
[  --enable-addrlist-page  use experimental address-list page],
d928 1
a928 1
	[use_addrlist_page=no])
d930 1
a930 17
test $use_addrlist_page != no && AC_DEFINE(EXP_ADDRLIST_PAGE)

AC_MSG_CHECKING(if experimental ascii case-conversion should be used)
CF_ARG_ENABLE(ascii-ctypes,
[  --enable-ascii-ctypes   use experimental ascii case-conversion],
	[use_ascii_ctypes=$enableval],
	[use_ascii_ctypes=yes])
AC_MSG_RESULT($use_ascii_ctypes)
test $use_ascii_ctypes != no && AC_DEFINE(EXP_ASCII_CTYPES)

AC_MSG_CHECKING(if experimental charset-selection logic should be used)
CF_ARG_ENABLE(charset-choice,
[  --enable-charset-choice use experimental charset-selection logic],
	[use_charset_choice=$enableval],
	[use_charset_choice=no])
AC_MSG_RESULT($use_charset_choice)
test $use_charset_choice != no && AC_DEFINE(EXP_CHARSET_CHOICE)
d932 1
d939 1
a939 1
test $use_cjk != no && AC_DEFINE(CJK_EX)
d941 1
d949 1
a949 1
	AC_DEFINE(EXP_JAPANESEUTF8_SUPPORT)
d963 1
d971 1
a971 1
test $use_dft_colors = "yes" && AC_DEFINE(USE_DEFAULT_COLORS)
d981 1
a981 1
test $use_kbd_layout != no && AC_DEFINE(EXP_KEYBOARD_LAYOUT)
d990 1
a990 41
test $use_nested_tables != no && AC_DEFINE(EXP_NESTED_TABLES)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if progress-bar code should be used)
CF_ARG_ENABLE(progressbar,
[  --enable-progressbar    use experimental progress-bar],
	[use_progressbar=$enableval],
	[use_progressbar=no])
AC_MSG_RESULT($use_progressbar)
test $use_progressbar != no && AC_DEFINE(USE_PROGRESSBAR)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if scrollbar code should be used)
CF_ARG_ENABLE(scrollbar,
[  --enable-scrollbar      use experimental scrollbar, with mouse],
	[use_scrollbar=$enableval],
	[use_scrollbar=no])
AC_MSG_RESULT($use_scrollbar)

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if sessions code should be used)
CF_ARG_ENABLE(sessions,
[  --enable-sessions       use experimental sessions code],
	[use_sessions=$enableval],
	[use_sessions=no])
AC_MSG_RESULT($use_sessions)
if test $use_sessions != no ; then
	AC_DEFINE(USE_SESSIONS)
	EXTRA_OBJS="$EXTRA_OBJS LYSession\$o"
fi

dnl --------------------------------------------------------------------------
AC_MSG_CHECKING(if session-caching code should be used)
CF_ARG_ENABLE(session-cache,
[  --enable-session-cache  use experimental session-caching code],
	[use_session_cache=$enableval],
	[use_session_cache=no])
AC_MSG_RESULT($use_session_cache)
if test $use_session_cache != no ; then
    AC_DEFINE(USE_CACHEJAR)
fi
d1001 1
a1001 1
CF_ARG_ENABLE(alt-bindings,
d1006 10
a1015 1
test $use_alt_bindings != no && AC_DEFINE(EXP_ALT_BINDINGS)
d1024 1
a1024 1
test $use_ext_htmldtd = "no" && AC_DEFINE(NO_EXTENDED_HTMLDTD)
d1029 1
a1029 1
[  --disable-file-upload   use file-upload support],
d1033 13
a1045 1
test $use_file_upload != no && AC_DEFINE(USE_FILE_UPLOAD)
d1050 1
a1050 1
[  --disable-justify-elts  use element-justification logic],
d1054 1
a1054 1
test $use_justify_elts != no && AC_DEFINE(EXP_JUSTIFY_ELTS)
d1059 1
a1059 1
[  --disable-partial       use partial-display logic],
d1063 1
a1063 1
test $use_partial_display != no && AC_DEFINE(DISP_PARTIAL)
d1072 1
a1072 1
test $use_filed_cookies != no && AC_DEFINE(USE_PERSISTENT_COOKIES)
d1077 1
a1077 1
[  --disable-prettysrc     colorize HTML source],
d1081 10
a1090 1
test $use_prettysrc != no && AC_DEFINE(USE_PRETTYSRC)
d1095 1
a1095 1
[  --disable-read-eta      read-progress message shows ETA],
d1099 1
a1099 1
test $use_read_eta != no && AC_DEFINE(USE_READPROGRESS)
d1104 1
a1104 1
[  --disable-source-cache  cache HTML source for parse mode changes],
d1108 18
a1125 1
test $use_source_cache != no && AC_DEFINE(USE_SOURCE_CACHE)
d1135 1
a1135 1
	AC_DEFINE(USE_EXTERNALS)
d1163 1
a1163 1
		AC_DEFINE(EXP_CHARTRANS_AUTOSWITCH)
d1171 1
a1171 1
	[AC_DEFINE(LYNXCGI_LINKS)])
d1181 1
a1181 1
test $use_change_exec = yes && AC_DEFINE(ENABLE_OPTS_CHANGE_EXEC)
d1191 1
a1191 1
test $use_exec_links = yes && AC_DEFINE(EXEC_LINKS)
d1201 1
a1201 1
test $use_exec_scripts = yes && AC_DEFINE(EXEC_SCRIPTS)
d1210 1
a1210 1
test $use_internal_links = no && AC_DEFINE(DONT_TRACK_INTERNAL_LINKS)
d1222 1
a1222 1
		AC_DEFINE(_WINDOWS_NSL)
d1225 1
a1225 1
		AC_DEFINE(NSL_FORK)
d1237 1
a1237 1
test $use_syslog = yes && AC_DEFINE(SYSLOG_REQUESTED_URLS)
d1246 2
a1247 2
test $use_underline = yes && AC_DEFINE(UNDERLINE_LINKS,1)
test $use_underline = no  && AC_DEFINE(UNDERLINE_LINKS,0)
d1267 1
a1267 1
	AC_DEFINE(USE_BZLIB)
d1280 1
a1280 1
	AC_DEFINE(USE_ZLIB)
d1294 1
a1294 1
test $use_finger != "no" && AC_DEFINE(DISABLE_FINGER)
d1303 1
a1303 1
test $use_gopher != "no" && AC_DEFINE(DISABLE_GOPHER)
d1312 1
a1312 1
test $use_news != "no" && AC_DEFINE(DISABLE_NEWS)
d1321 21
a1341 1
test $use_ftp != "no" && AC_DEFINE(DISABLE_FTP)
d1361 1
a1361 1
	AC_DEFINE(DIRED_SUPPORT)
d1365 1
a1365 1
	[  --disable-dired-dearchive disable dearchiving commands],[AC_DEFINE(ARCHIVE_ONLY)])
d1370 1
a1370 1
	[  --disable-dired-override disable DirEd override keymap],,[AC_DEFINE(OK_OVERRIDE)])
d1375 1
a1375 1
	[  --disable-dired-permit  disable chmod/attrib commands],,[AC_DEFINE(OK_PERMIT)])
d1380 1
a1380 1
	[  --disable-dired-xpermit disable chmod/attrib commands],[AC_DEFINE(NO_CHANGE_EXECUTE_PERMS)])
d1385 1
a1385 1
	[  --disable-dired-tar     disable "tar" command],,[AC_DEFINE(OK_TAR)])
d1390 1
a1390 1
	[  --disable-dired-uudecode disable "uudecode" command],,[AC_DEFINE(OK_UUDECODE)])
d1395 1
a1395 1
	[  --disable-dired-zip     disable "zip", "unzip"  commands],,[AC_DEFINE(OK_ZIP)])
d1400 1
a1400 1
	[  --disable-dired-gzip    disable "gzip", "gunzip" commands],,[AC_DEFINE(OK_GZIP)])
d1408 1
a1408 1
	[AC_DEFINE(LONG_LIST)])
d1416 1
a1416 1
	[AC_DEFINE(NO_PARENT_DIR_REFERENCE)])
d1433 4
a1436 4
AC_DEFINE_UNQUOTED(TAR_UP_OPTIONS,   "$TAR_UP_OPTIONS")
AC_DEFINE_UNQUOTED(TAR_DOWN_OPTIONS, "$TAR_DOWN_OPTIONS")
AC_DEFINE_UNQUOTED(TAR_FILE_OPTIONS, "$TAR_FILE_OPTIONS")
AC_DEFINE_UNQUOTED(TAR_PIPE_OPTIONS, "$TAR_PIPE_OPTIONS")
d1474 8
a1481 1
	CF_PDCURSES_X11
d1488 3
a1490 1
	AC_CHECK_HEADERS($cf_cv_screen/term.h term.h)
d1543 1
a1543 1
		AC_DEFINE(USE_SCROLLBAR)
d1547 3
d1559 3
a1561 3
	$CONFIG_SHELL $MKINSTALLDIRS WWW/Library/Implementation
	$CONFIG_SHELL $MKINSTALLDIRS src/chrtrans
	test "$USE_INCLUDED_LIBINTL" = yes && $CONFIG_SHELL $MKINSTALLDIRS intl
@


1.11
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d292 1
a292 1
openbsd* | ekkobsd* | mirbsd*)
@


1.10
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 2
d4 2
a5 1
dnl written jan/1997
d8 1
d10 1
a10 1
dnl Copyright 1997-2005,2006 by Thomas E. Dickey
d32 1
a32 1
AC_REVISION(2.8.6rel.5)
d54 1
d65 2
a66 1
VERSION=2.8.6rel.5
a68 2
AC_SUBST(DESTDIR)
AC_SUBST(CONFIG_H)
d70 7
a76 2
dnl Set of available languages (based on source distribution)
test -z "$ALL_LINGUAS" && ALL_LINGUAS=`test -d $srcdir/po && cd $srcdir/po && echo *.po|sed -e 's/\.po//g' -e 's/*//'`
d96 8
d106 1
d114 2
a115 3
AC_CHECK_TOOL(RANLIB, ranlib, ':')
AC_CHECK_TOOL(AR, ar, ar)
CF_SUBST(archiver options,AR_OPTS,rv)
d203 2
a204 19
AC_MSG_CHECKING(if you want to link with dbmalloc for testing)
AC_ARG_WITH(dbmalloc,
	[  --with-dbmalloc         test: use Conor Cahill's dbmalloc library],
	[with_dbmalloc=$withval],
	[with_dbmalloc=no])
AC_MSG_RESULT($with_dbmalloc)
if test $with_dbmalloc = yes ; then
	AC_CHECK_LIB(dbmalloc,debug_malloc)
fi

AC_MSG_CHECKING(if you want to link with dmalloc for testing)
AC_ARG_WITH(dmalloc,
	[  --with-dmalloc          test: use Gray Watson's dmalloc library],
	[with_dmalloc=$withval],
	[with_dmalloc=no])
AC_MSG_RESULT($with_dmalloc)
if test $with_dmalloc = yes ; then
	AC_CHECK_LIB(dmalloc,dmalloc_debug)
fi
d269 16
d349 6
d365 1
d367 13
d395 1
d416 1
d431 7
d445 1
a445 2
if test "x$cf_cv_use_libssl" = "xno" ; then
AC_CACHE_CHECK(if you want experimental gnutls support,cf_cv_use_libgnutls,[
d447 1
a447 1
	[  --with-gnutls{=path}    link with experimental gnutls support],
d451 8
a458 1
fi
d481 1
d483 3
d489 18
a506 1
	CF_GNUTLS($cf_cv_use_libgnutls)
d508 1
d510 1
d536 1
a536 3
	CF_CURSES_CPPFLAGS
	CF_NCURSES_VERSION
	CF_CURSES_LIBS
d541 1
a541 3
	CF_NCURSES_CPPFLAGS
	CF_NCURSES_LIBS
	CF_NCURSES_VERSION
d545 1
a545 3
	CF_NCURSES_CPPFLAGS(ncursesw)
	CF_NCURSES_LIBS(ncursesw)
	CF_NCURSES_VERSION
d558 2
d567 36
d612 2
d620 48
a749 1
CF_VARARGS
d751 1
d759 6
d822 2
d871 8
d903 4
a906 1
	AC_CHECK_LIB(iconv,libiconv_open)
a908 34
AC_MSG_CHECKING(if color-style code should be used)
CF_ARG_DISABLE(color-style,
[  --disable-color-style   use color style (ncurses/curses)],
	[use_color_style=$enableval],
	[use_color_style=$dft_color_style])

case $use_color_style in
no)
	AC_MSG_RESULT(no)
	INSTALL_LSS=
	;;
*)
	AC_DEFINE(USE_COLOR_STYLE)
	AC_MSG_RESULT(yes)

	AC_MSG_CHECKING(for location of style-sheet file)

CF_WITH_PATH(lss-file,
[  --with-lss-file{=path}  specify the default style-sheet file
                         ],
LYNX_LSS_FILE,
SYSCONFDIR/lynx.lss,
$sysconfdir/lynx.lss)

	AC_MSG_RESULT($LYNX_LSS_FILE)

	test "$LYNX_LSS_FILE" = no && LYNX_LSS_FILE=
	AC_DEFINE_UNQUOTED(LYNX_LSS_FILE,"$LYNX_LSS_FILE")

	INSTALL_LSS=install-lss
	;;
esac
AC_SUBST(INSTALL_LSS)

d926 1
a926 27
AC_MSG_CHECKING(if experimental htmlized lynx.cfg should be built)
CF_ARG_ENABLE(htmlized-cfg,
[  --enable-htmlized-cfg   build experimental htmlized lynx.cfg],
	[use_exp_htmlized_cfg=$enableval],
	[use_exp_htmlized_cfg=no])
AC_MSG_RESULT($use_exp_htmlized_cfg)

LYNXCFG_MAKE=''
LYNXCFG_URL=''
if test $use_exp_htmlized_cfg = no ; then
	LYNXCFG_MAKE='#'
	LYNXCFG_URL='http://www.hippo.ru/%7Ehvv/'
fi
AC_SUBST(LYNXCFG_MAKE)
AC_SUBST(LYNXCFG_URL)

### check for ipv6 support
AC_MSG_CHECKING([whether to enable ipv6])
CF_ARG_ENABLE(ipv6,
	[  --enable-ipv6           use experimental ipv6 (with ipv4) support],
[AC_DEFINE(ENABLE_IPV6)])
AC_MSG_RESULT($enableval)
if test "$enableval" = "yes"; then
	CF_CHECK_IPV6
fi
dnl AC_REPLACE_FUNCS(getaddrinfo getnameinfo)

d935 1
a935 16
dnl AC_MSG_CHECKING(if experimental JavaScript support should be used)
dnl CF_ARG_ENABLE(libjs,
dnl [  --enable-libjs          use experimental JavaScript support (Mozilla libjs)],
dnl 	[use_libjs=$enableval],
dnl 	[use_libjs=no])
dnl AC_MSG_RESULT($use_libjs)
dnl test $use_libjs != no && AC_DEFINE(EXP_LIBJS)

AC_MSG_CHECKING(if experimental locale-charset selection logic should be used)
CF_ARG_ENABLE(locale-charset,
[  --enable-locale-charset use experimental locale-charset selection logic],
	[use_locale_charset=$enableval],
	[use_locale_charset=yes])
AC_MSG_RESULT($use_locale_charset)
test $use_locale_charset != no && AC_DEFINE(EXP_LOCALE_CHARSET)

d944 10
d962 23
d991 1
d1000 1
d1009 1
d1018 1
d1021 1
a1021 1
[  --enable-justify-elts   use element-justification logic],
d1027 1
d1036 1
d1045 1
d1054 1
d1063 1
d1072 1
a1072 2
AC_SUBST(EXTRA_OBJS)

d1084 1
d1096 4
d1102 1
a1102 1
		CF_VERBOSE(Assume $host_os has font-switching)
d1105 3
a1107 1
	if test -n "$SETFONT" ; then
a1108 2
	else
		AC_MSG_WARN(Cannot find a font-setting program)
d1112 1
d1119 1
d1128 1
d1138 1
d1148 1
d1157 1
d1164 10
a1173 1
test $use_nsl_fork = yes && AC_DEFINE(NSL_FORK)
d1175 1
d1184 1
d1194 1
d1202 1
d1211 1
a1211 1
	CF_WITH_BZLIB
d1215 1
d1224 1
a1224 1
	CF_WITH_ZLIB
d1228 1
d1232 1
d1241 1
d1250 1
d1259 1
d1329 1
d1336 1
d1344 1
d1439 4
@


1.9
log
@update to lynx2.8.5rel.4; fixes CAN-2005-3120 among other things.
prompted by naddy@@, cloder@@ ok.
@
text
@d5 20
d28 1
a28 1
AC_REVISION(2.8.5rel.4)
d51 5
a55 1
CF_CHECK_CACHE
d60 1
a60 1
VERSION=2.8.5rel.4
d91 5
a99 3
AC_AIX
AC_ISC_POSIX

d250 2
a251 2
	TRY_CFLAGS="$TRY_CFLAGS -DSNAKE"
	test -z "$GCC" && TRY_CFLAGS="$TRY_CFLAGS -Wp,-H600000"
d258 3
d282 1
a282 1
	TRY_CFLAGS="$TRY_CFLAGS -DDSYS5"
d287 1
a287 1
	TRY_CFLAGS="$TRY_CFLAGS -DDSYS5"
d333 1
a333 3
if test -z "$GCC" ; then
	CF_ANSI_CC_CHECK
fi
d341 2
d379 2
a380 1
CF_XOPEN_SOURCE
d395 1
a395 1
	[  --with-ssl[=path]       link with ssl library if available],
d403 1
a403 1
	[  --with-gnutls[=path]    link with experimental gnutls support],
d411 1
a411 1
	[  --with-socks[=path]     link with socks library if available],
d418 1
a418 1
	[  --with-socks5[=path]    link with socks5 library if available],
d440 2
a441 2
[  --with-screen=XXX       select screen type
                          (XXX is curses (default), ncurses or slang)],
d458 2
d478 1
d486 1
d490 17
a506 4
dnl Get the actual value for $libdir, which we will compile into Lynx as part of
dnl the config pathnames.
eval cf_libdir=$libdir
cf_libdir=`echo $cf_libdir | sed -e s%'^NONE/'%$prefix/% -e s%'^NONE/'%$ac_default_prefix/%`
d508 1
a508 2
AC_MSG_CHECKING(for location of config-file)
LYNX_CFG_FILE=$cf_libdir/lynx.cfg
a509 1
AC_MSG_RESULT($LYNX_CFG_FILE)
d599 4
d614 1
d631 1
d634 1
d723 11
d735 2
a736 2
CF_ARG_ENABLE(color-style,
[  --enable-color-style    use optional/experimental color style (ncurses/curses)],
d738 1
a738 1
	[use_color_style=no])
d750 11
a760 1
	LYNX_LSS_FILE=$cf_libdir/lynx.lss
d762 1
a762 1
	AC_MSG_RESULT($LYNX_LSS_FILE)
d770 1
a770 1
slang|ncurses*)
a811 8
AC_MSG_CHECKING(if experimental element-justification logic should be used)
CF_ARG_ENABLE(justify-elts,
[  --enable-justify-elts   use experimental element-justification logic],
	[use_exp_justify_elts=$enableval],
	[use_exp_justify_elts=no])
AC_MSG_RESULT($use_exp_justify_elts)
test $use_exp_justify_elts != no && AC_DEFINE(EXP_JUSTIFY_ELTS)

d882 8
d930 2
d940 1
a940 1
	LIBOBJS="$LIBOBJS LYExtern\$o"
d949 16
a964 1
test $use_setfont = yes && AC_DEFINE(EXP_CHARTRANS_AUTOSWITCH)
d1114 1
a1114 1
	LIBOBJS="$LIBOBJS LYLocal\$o"
d1182 7
a1195 1
CF_PATH_PROG(TAR,	tar, pax gtar gnutar bsdtar star)
a1199 6
CF_TAR_OPTIONS($TAR)
AC_DEFINE_UNQUOTED(TAR_UP_OPTIONS,   "$TAR_UP_OPTIONS")
AC_DEFINE_UNQUOTED(TAR_DOWN_OPTIONS, "$TAR_DOWN_OPTIONS")
AC_DEFINE_UNQUOTED(TAR_FILE_OPTIONS, "$TAR_FILE_OPTIONS")
AC_DEFINE_UNQUOTED(TAR_PIPE_OPTIONS, "$TAR_PIPE_OPTIONS")

d1235 1
d1240 3
a1242 1
	CF_WIDEC_CURSES
d1260 1
@


1.8
log
@sync with lynx 2.8.5.rel2 which fixes a few minor bugs (null pointer checks,
progress bar with very slow connections)
@
text
@d8 1
a8 1
AC_REVISION(2.8.5rel.2)
d36 1
a36 1
VERSION=2.8.5rel.2
@


1.7
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d8 1
a8 1
AC_REVISION(2.8.5rel.1)
d36 1
a36 1
VERSION=2.8.5rel.1
@


1.6
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d5 13
d19 2
a20 1
AC_PREREQ(2.13)
d22 4
a25 1
AC_INIT(userdefs.h)
d27 1
d34 3
a36 2
VERSION=2.8.4

a62 1
AC_PROG_RANLIB
d67 4
d99 3
d111 1
a111 1
		CF_STRIP_O_OPT(CFLAGS)
d121 1
a121 1
		CF_STRIP_G_OPT(CFLAGS)
d124 1
a124 1
		CF_STRIP_G_OPT(CFLAGS)
d160 20
d190 1
a190 1
PROG_EXT=
d198 1
d217 1
a217 1
	PROG_EXT=".exe"
d240 4
d245 1
a245 1
	TRY_CFLAGS="$TRY_CFLAGS -DNEXT -DXMOSAIC_HACK"
d247 1
a247 1
openbsd*)
a249 6
os2*)
	# We make sure -Zexe is not used -- it would interfere with @@PROG_EXT@@
	TRY_CFLAGS="$TRY_CFLAGS -Zmt -D__ST_MT_ERRNO__"
	LDFLAGS=`echo "$LDFLAGS -Zmt -Zcrtdll" | sed "s/-Zexe//g"`
	PROG_EXT=".exe"
	;;
a302 1
AC_SUBST(PROG_EXT)
d315 1
a315 1
CF_BUNDLED_INTL(makefile)
d344 5
d350 1
a350 33
CF_PATH_PROG(CHMOD,	chmod)
CF_PATH_PROG(COMPRESS,	compress)
CF_PATH_PROG(COPY,	cp)
CF_PATH_PROG(GZIP,	gzip)
CF_PATH_PROG(MKDIR,	mkdir)
CF_PATH_PROG(MV,	mv)
CF_PATH_PROG(RM,	rm)
CF_PATH_PROG(TAR,	tar)
CF_PATH_PROG(TOUCH,	touch)
CF_PATH_PROG(UNCOMPRESS,gunzip)
CF_PATH_PROG(UNZIP,	unzip)
CF_PATH_PROG(BZIP2,	bzip2)
CF_PATH_PROG(UUDECODE,	uudecode)
CF_PATH_PROG(ZCAT,	zcat)
CF_PATH_PROG(ZIP,	zip)
CF_PATH_PROG(TELNET,	telnet)
CF_PATH_PROG(TN3270,	tn3270)
CF_PATH_PROG(RLOGIN,	rlogin)

dnl 'INSTALL' is a special case, since the configure script has to find a
dnl BSD-compatible one so the build/install works properly.
case "$INSTALL" in
$srcdir*) # (vi
	AC_DEFINE_UNQUOTED(INSTALL_PATH,"install")
	;;
*) # (vi
	cf_save_INSTALL="$INSTALL"
	CF_PATH_PROG(INSTALL,	install)
	INSTALL="$cf_save_INSTALL"
	;;
esac

CF_GNU_SOURCE
d354 1
a354 10
	cf_save_CFLAGS="$CFLAGS"
	cf_save_CPPFLAGS="$CPPFLAGS"
	CF_ADD_CFLAGS($TRY_CFLAGS)
	AC_MSG_CHECKING(if we should use compile options $TRY_CFLAGS)
	AC_TRY_COMPILE([#include <stdio.h>],[FILE *fp = stdin],[cf_result=yes],[cf_result=no])
	AC_MSG_RESULT($cf_result)
	if test "$cf_result" = no ; then
		CFLAGS="$cf_save_CFLAGS"
		CPPFLAGS="$cf_save_CPPFLAGS"
	fi
d370 9
d403 2
d414 1
a414 1
curses|ncurses|pdcurses|slang)
d423 2
a424 9
ncurses|slang)
	;;
pdcurses)
	cf_cv_ncurses_header=xcurses.h
	;;
curses)
	if eval "test \"`echo '$''{'cf_cv_ncurses_header'+set}'`\" != set"; then
		cf_cv_ncurses_header=curses.h
	fi
d441 6
d448 1
d459 1
a459 1
cf_libdir=`echo $cf_libdir | sed -e s@@'^NONE/'@@$prefix/@@ -e s@@'^NONE/'@@$ac_default_prefix/@@`
d559 1
d571 2
a572 1
	mkstemp \
a607 32
### These tests must be run after establishing the curses library.
if test $cf_cv_screen != slang ; then
	if test $cf_cv_screen != pdcurses ; then
		AC_CHECK_HEADERS(ncurses/term.h term.h)
	fi
	CF_ALT_CHAR_SET
	CF_FANCY_CURSES
	CF_NCURSES_BROKEN
	CF_COLOR_CURSES
	CF_SIZECHANGE
	CF_TTYTYPE
	CF_CURSES_FUNCS( \
		assume_default_colors \
		cbreak \
		define_key \
		delscreen \
		getattrs \
		getbegx \
		getbegy \
		keypad \
		napms \
		newpad \
		newterm \
		pnoutrefresh \
		wresize resizeterm \
		touchline \
		touchwin \
		use_default_colors \
		wborder \
		wredrawln )
fi

d633 1
a633 1
[  --disable-forms-options disable experimental forms-based options],
a676 9
if test $use_color_style != no ; then
	if test .$cf_cv_color_curses != .yes ; then
		AC_ERROR(Configuration does not support color-styles)
	fi
	if test $cf_cv_screen = slang ; then
		AC_ERROR(Configuration does not support color-styles)
	fi
fi

d696 5
a700 2
test ".$cf_cv_screen" = ".slang"                && use_dft_colors=maybe
test ".$cf_cv_func_use_default_colors" = ".yes" && use_dft_colors=maybe
a711 8
AC_MSG_CHECKING(if experimental file-upload logic should be used)
CF_ARG_ENABLE(file-upload,
[  --enable-file-upload    use experimental file-upload support],
	[use_file_upload=$enableval],
	[use_file_upload=no])
AC_MSG_RESULT($use_file_upload)
test $use_file_upload != no && AC_DEFINE(EXP_FILE_UPLOAD)

d755 15
a769 7
AC_MSG_CHECKING(if experimental JavaScript support should be used)
CF_ARG_ENABLE(libjs,
[  --enable-libjs          use experimental JavaScript support (Mozilla libjs)],
	[use_libjs=$enableval],
	[use_libjs=no])
AC_MSG_RESULT($use_libjs)
test $use_libjs != no && AC_DEFINE(EXP_LIBJS)
a778 16
AC_MSG_CHECKING(if html source should be colorized)
CF_ARG_ENABLE(prettysrc,
[  --enable-prettysrc      colorize HTML source],
	[use_prettysrc=$enableval],
	[use_prettysrc=no])
AC_MSG_RESULT($use_prettysrc)
test $use_prettysrc != no && AC_DEFINE(USE_PRETTYSRC)

AC_MSG_CHECKING(if read-progress message should show ETA)
CF_ARG_ENABLE(read-eta,
[  --enable-read-eta       experimental read-progress message shows ETA],
	[use_read_eta=$enableval],
	[use_read_eta=no])
AC_MSG_RESULT($use_read_eta)
test $use_read_eta != no && AC_DEFINE(EXP_READPROGRESS)

a785 16
if test $use_scrollbar != no ; then
	if test .$cf_cv_fancy_curses != .yes ; then
		AC_MSG_WARN(Configuration does not support ACS_xxx definitions)
	else
		AC_DEFINE(USE_SCROLLBAR)
	fi
fi

AC_MSG_CHECKING(if source caching should be used)
CF_ARG_ENABLE(source-cache,
[  --enable-source-cache   cache HTML source for parse mode changes],
	[use_source_cache=$enableval],
	[use_source_cache=no])
AC_MSG_RESULT($use_source_cache)
test $use_source_cache != no && AC_DEFINE(SOURCE_CACHE)

d809 8
d825 32
d865 1
a865 1
	LIBOBJS="$LIBOBJS LYExtern.o"
a931 8
AC_MSG_CHECKING(if persistent-cookie logic should be used)
CF_ARG_DISABLE(persistent-cookies,
[  --disable-persistent-cookies  disable persistent-cookie support],
	[use_filed_cookies=$enableval],
	[use_filed_cookies=yes])
AC_MSG_RESULT($use_filed_cookies)
test $use_filed_cookies != no && AC_DEFINE(EXP_PERSISTENT_COOKIES)

d938 2
a939 1
test $use_underline = yes && AC_DEFINE(UNDERLINE_LINKS)
d948 10
a957 5
COMPRESS_PROG=
COMPRESS_EXT=
if test $use_gzip_help = yes ; then
	COMPRESS_PROG=$ac_cv_path_GZIP
	COMPRESS_EXT=.gz
a958 2
AC_SUBST(COMPRESS_PROG)
AC_SUBST(COMPRESS_EXT)
d968 1
a968 18
	AC_MSG_CHECKING(if we need to add -I option to get zlib.h)
	AC_TRY_COMPILE([#include <zlib.h>],[],[AC_MSG_RESULT(no)],[
	AC_MSG_RESULT(yes)
	CF_HEADER_PATH(cf_search,zlib)
	for cf_incdir in $cf_search
	do
		if test -f $cf_incdir/zlib.h ; then
			CF_ADD_CFLAGS(-I$cf_incdir)
			CF_VERBOSE(... found in $cf_incdir)
			break
		fi
		CF_VERBOSE(... tested $cf_incdir)
	done
	])
	CF_FIND_LIBRARY(z,z,
		[#include <zlib.h>],
		[gzopen("name","mode")],
		gzopen)
d972 3
d1024 1
a1024 1
	LIBOBJS="$LIBOBJS LYLocal.o"
d1029 1
a1029 1
	[  --disable-dired-archive  disable dearchiving commands],[AC_DEFINE(ARCHIVE_ONLY)])
d1081 11
d1095 38
d1140 51
d1192 3
d1200 3
a1202 3
	/bin/sh $srcdir/mkdirs.sh WWW/Library/Implementation
	/bin/sh $srcdir/mkdirs.sh src/chrtrans
	test "$USE_INCLUDED_LIBINTL" = yes && $srcdir/mkdirs.sh intl
a1205 3
test -z "$CONFIG_SHELL" && CONFIG_SHELL=/bin/sh
AC_SUBST(CONFIG_SHELL)

d1218 1
a1218 1
		sed	-e 's@@^.*LYMessages.c@@	../LYMessages.c@@' \
@


1.5
log
@a little bit of glue to call openssl; mark@@moxienet.com
@
text
@d3 1
a3 1
dnl by T.E.Dickey <dickey@@clark.net>
d6 1
a6 2
AC_PREREQ(2.12)
rm -f config.cache
d9 3
a11 1
AC_CONFIG_HEADER(lynx_cfg.h:config.hin)
d15 8
d32 9
d43 1
d79 1
a79 1
	[  --enable-debug          logic for object code debugging],
d112 8
a135 122
dnl --------------------------------------------------------------------------

CF_HELP_MESSAGE(
Basic Configuration Options:)

dnl internationalization macros
AM_GNU_GETTEXT

CF_WITH_PATH(nls-datadir,
[  --with-nls-datadir=DIR  NLS data, parent of locale],
NLS_DATADIR,
[PREFIX/DATADIR],
[$prefix/$DATADIRNAME])

INTLDIR_CPPFLAGS="#"
INTLDIR_MAKE=
MSG_DIR_MAKE=
SUB_MAKEFILE=
CF_OUR_MESSAGES
if test "$USE_INCLUDED_LIBINTL" = yes ; then
        if test "$nls_cv_force_use_gnu_gettext" = yes ; then
		AC_MSG_WARN(Using included gettext anyway[,] since none was found)
		SUB_MAKEFILE="intl/makefile"
	else
		INTLDIR_MAKE="#"
	fi
	if test $use_our_messages = no ; then
		MSG_DIR_MAKE="#"
		SUB_MAKEFILE=
	fi
	if test "$use_our_messages" = yes ; then
		SUB_MAKEFILE="$SUB_MAKEFILE po/makefile.in:po/makefile.inn"
	else
		MSG_DIR_MAKE="#"
	fi
elif test "$USE_NLS" = yes ; then
	AC_CHECK_HEADERS(libintl.h)
	INTLDIR_MAKE="#"
	SUB_MAKEFILE="po/makefile.in:po/makefile.inn"
else
	INTLDIR_MAKE="#"
	MSG_DIR_MAKE="#"
fi

dnl We might want to use a preinstalled message library rather than the one
dnl which is bundled with this program.
if test -z "$MSG_DIR_MAKE" ; then
	if test $use_our_messages = no ; then
		MSG_DIR_MAKE="#"
		SUB_MAKEFILE=
	fi
fi

if test -z "$INTLDIR_MAKE" ; then
	INTLDIR_CPPFLAGS=
fi

AC_SUBST(INTLDIR_CPPFLAGS)
AC_SUBST(INTLDIR_MAKE)
AC_SUBST(MSG_DIR_MAKE)

dnl FIXME:  the underlying AM_GNU_GETTEXT macro either needs some fixes or a
dnl little documentation.  It doesn't define anything so that we can ifdef our
dnl own code, except ENABLE_NLS, which is too vague to be of any use.

if test "$USE_INCLUDED_LIBINTL" = yes ; then
	if test "$nls_cv_force_use_gnu_gettext" = yes ; then
		AC_DEFINE(HAVE_GETTEXT)
	elif test "$nls_cv_use_gnu_gettext" = yes ; then
		AC_DEFINE(HAVE_GETTEXT)
	fi
	if test -n "$nls_cv_header_intl" ; then
		AC_DEFINE(HAVE_LIBINTL_H)
	fi
fi

AC_MSG_CHECKING(if you want full utility pathnames)
CF_ARG_DISABLE(full-paths,
	[  --disable-full-paths    control whether full utility pathnames are used],
	[with_full_paths=no],
	[with_full_paths=yes])
AC_MSG_RESULT($with_full_paths)
test $with_full_paths = no && AC_DEFINE(USE_EXECVP)

CF_DEFINE_PROG(system mailer, SYSTEM_MAIL,
	/usr/mmdf/bin/submit \
	/usr/sbin/sendmail \
	/usr/lib/sendmail  \
	)
CF_SYSTEM_MAIL_FLAGS

CF_PATH_PROG(CHMOD,	chmod)
CF_PATH_PROG(COMPRESS,	compress)
CF_PATH_PROG(COPY,	cp)
CF_PATH_PROG(GZIP,	gzip)
CF_PATH_PROG(MKDIR,	mkdir)
CF_PATH_PROG(MV,	mv)
CF_PATH_PROG(RM,	rm)
CF_PATH_PROG(TAR,	tar)
CF_PATH_PROG(TOUCH,	touch)
CF_PATH_PROG(UNCOMPRESS,gunzip)
CF_PATH_PROG(UNZIP,	unzip)
CF_PATH_PROG(BZIP2,	bzip2)
CF_PATH_PROG(UUDECODE,	uudecode)
CF_PATH_PROG(ZCAT,	zcat)
CF_PATH_PROG(ZIP,	zip)
CF_PATH_PROG(TELNET,	telnet)
CF_PATH_PROG(TN3270,	tn3270)
CF_PATH_PROG(RLOGIN,	rlogin)

dnl 'INSTALL' is a special case, since the configure script has to find a
dnl BSD-compatible one so the build/install works properly.
case "$INSTALL" in
$srcdir*) # (vi
	AC_DEFINE_UNQUOTED(INSTALL_PATH,"install")
	;;
*) # (vi
	AC_DEFINE_UNQUOTED(INSTALL_PATH,"$INSTALL")
	;;
esac

dnl --------------------------------------------------------------------------
a141 3
if test -z "$GCC" ; then
	CF_ANSI_CC_CHECK
fi
d149 1
a149 1
	CFLAGS="$CFLAGS -DAIX4 -D_BSD=44 -D_AIX"
d159 1
a159 1
	CFLAGS="$CFLAGS -DBSDI"
d168 5
a172 1
	CFLAGS="$CFLAGS -D__STDC__ -Dunix"
d175 1
a175 1
	CFLAGS="$CFLAGS -DDGUX"
d178 1
a178 1
	CFLAGS="$CFLAGS -DSNAKE"
d183 1
a183 1
	CFLAGS="$CFLAGS -DISC -DPOSIX_JC"
a189 1
	#removed: CFLAGS="$CFLAGS -cckr"
d192 1
a192 1
	CFLAGS="$CFLAGS -DLINUX"
d195 1
a195 1
	CFLAGS="$CFLAGS -DNEXT -DXMOSAIC_HACK"
d198 1
a198 1
	LIBS="$LIBS -lcompat -ltermlib -lssl -lcrypto"
d202 1
a202 1
	CFLAGS="$CFLAGS -Zmt -D__ST_MT_ERRNO__"
d209 1
a209 1
	CFLAGS="$CFLAGS -DDSYS5"
d214 1
a214 1
	CFLAGS="$CFLAGS -DDSYS5"
d232 1
a232 1
	CFLAGS="$CFLAGS -DSVR4_BSDSELECT -DNO_IOCTL -DUSE_FCNTL"
d235 1
a235 1
	CFLAGS="$CFLAGS -DSVR4_BSDSELECT"
d238 1
a238 1
	CFLAGS="$CFLAGS -I/usr/sony/include"
d242 1
a242 1
	CFLAGS="$CFLAGS -DSVR4_BSDSELECT -DSVR4"
d245 1
a245 1
	CFLAGS="$CFLAGS -DSUN"
d248 1
a248 1
	CFLAGS="$CFLAGS -DSUN -DSUN4"
d253 1
a253 1
	CFLAGS="$CFLAGS -DULTRIX"
d261 75
d339 2
a340 1
	CFLAGS="$CFLAGS $TRY_CFLAGS"
d344 4
a347 1
	test "$cf_result" = no && CFLAGS="$cf_save_CFLAGS"
d356 7
d385 3
d396 1
a396 1
curses|ncurses|slang)
d404 7
a410 1
if test $cf_cv_screen != ncurses ; then
d414 2
a415 1
fi
d419 2
d423 1
d428 4
d434 1
a434 2
	CF_SLANG_CPPFLAGS
	CF_SLANG_LIBS
d449 54
d511 1
d520 1
d522 1
d526 1
d529 1
d547 1
d551 2
d556 1
d558 2
d561 1
d569 1
d581 1
a587 2
CF_EBCDIC

d590 3
a594 1
	CF_NCURSES_VERSION
d599 2
a600 1
	AC_CHECK_FUNCS( \
d603 4
d608 7
d617 1
a617 1
	)
d627 8
d667 16
d685 1
a685 1
[  --enable-color-style    use optional/experimental color style],
a695 2
	AC_DEFINE(USE_HASH)
	AC_DEFINE(LINKEDSTYLES)
d718 1
a718 1
test ".$ac_cv_func_use_default_colors" = ".yes" && use_dft_colors=maybe
d730 43
d781 15
a795 7
dnl AC_MSG_CHECKING(if experimental JavaScript support should be used)
dnl CF_ARG_ENABLE(libjs,
dnl [  --enable-libjs          use experimental JavaScript support (Mozilla libjs)],
dnl 	[use_libjs=$enableval],
dnl 	[use_libjs=no])
dnl AC_MSG_RESULT($use_libjs)
dnl test $use_libjs != no && AC_DEFINE(EXP_LIBJS)
d803 24
a826 1
test $use_prettysrc != no && AC_DEFINE(USE_PSRC)
d873 4
a876 1
test $use_externs != ".no" && AC_DEFINE(USE_EXTERNALS)
d892 8
d901 1
a901 1
CF_ARG_ENABLE(exec-links,
d903 5
a907 2
	[AC_DEFINE(EXEC_LINKS)])
AC_MSG_RESULT($enableval)
d910 1
a910 1
CF_ARG_ENABLE(exec-scripts,
d912 5
a916 2
	[AC_DEFINE(EXEC_SCRIPTS)])
AC_MSG_RESULT($enableval)
d943 1
a943 1
CF_ARG_ENABLE(persistent-cookies,
d982 15
a996 1
	CF_FIND_LIBRARY(z,
d1052 1
d1056 1
a1056 1
	CF_ARG_DISABLE(dired-archive,
d1060 1
a1060 1
	AC_MSG_CHECKING(if you wish to allow users to redefine DirEd keys)
d1062 1
a1062 1
	[  --disable-dired-override disable private keymaps],,[AC_DEFINE(OK_OVERRIDE)])
d1112 6
a1117 1
CF_TERMIO_AND_CURSES(LYCurses.h)
d1125 2
a1126 2
	${CONFIG_SHELL-/bin/sh} $srcdir/mkdirs.sh WWW/Library/Implementation
	${CONFIG_SHELL-/bin/sh} $srcdir/mkdirs.sh src/chrtrans
d1146 1
a1146 1
		sed	-e 's@@^.*LYMessages.c@@../LYMessages.c@@' \
@


1.4
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d293 1
a293 1
	LIBS="$LIBS -lcompat -ltermlib"
@


1.3
log
@support non-executable shell scripts
@
text
@d7 2
d12 5
a17 1
AC_CANONICAL_HOST
a26 1
CF_MAKE_INCLUDE
d30 3
d42 8
d60 1
a60 1
	[  --enable-debug          logic for traces/debugging],
d75 2
a76 1
	ultrix*|osf*) #(vi
d80 1
a80 1
			CF_STRIP_G_OPT(CFLAGS)
d85 7
a91 1

d114 71
d191 1
d211 1
d215 3
d244 1
d247 1
a247 1
	CFLAGS="$CFLAGS -DAIX4 -D_BSD=44" 
d254 1
a254 1
	CFLAGS="$CFLAGS -D_BUILTINS -W0,-opt,4"
d257 1
a257 1
	CFLAGS="$CFLAGS -DBSDI" 
d269 1
a269 1
	CFLAGS="$CFLAGS -DDGUX" 
d272 2
a273 1
	CFLAGS="$CFLAGS -DSNAKE" 
d284 1
a284 1
	#removed: CFLAGS="$CFLAGS -cckr" 
d287 1
a287 1
	CFLAGS="$CFLAGS -DLINUX" 
d301 5
d308 1
a308 1
	test -z "$GCC" && CFLAGS="$CFLAGS -O -Olimit 4000"
d312 1
a312 1
	test $ac_cv_prog_gcc != yes && CC="cc -belf"
d347 5
a351 3
	test -z "$GCC" && CFLAGS="$CFLAGS -O -Olimit 600 -G 7"
	CFLAGS="$CFLAGS -DULTRIX" 
	AC_CHECK_HEADERS(cursesX.h, cf_cv_ncurses_header=cursesX.h)
d356 10
d370 24
a393 1
CF_NETLIBS
a394 1
AC_MSG_CHECKING(for screen type)
d396 1
a396 1
AC_CACHE_VAL(cf_cv_screen,[
a408 1
AC_MSG_RESULT($cf_cv_screen)
d465 4
d483 2
d488 1
d511 3
d526 1
d534 1
a534 1
dnl Miscellaneous options that don't need to test system features
d538 1
a538 1
Miscellaneous Options:)
d540 31
a570 6
AC_MSG_CHECKING(if experimental 8-bit case-conversion should be used)
CF_ARG_ENABLE(8bit-toupper,
[  --enable-8bit-toupper   use experimental 8-bit case-conversion],
	[use_8bit_toupper=$enableval],
	[use_8bit_toupper=no])
test $use_8bit_toupper != no && AC_DEFINE(EXP_8BIT_TOUPPER)
d596 1
a596 1
	AC_MSG_RESULT(curses-style)
d621 47
d676 8
d700 18
d720 1
a720 1
[  --enable-internal-links  handle following links to same doc differently],
d734 16
d758 16
d789 32
d832 1
a832 1
[  --disable-dired          enable optional directory-editor, DirEd],
d894 5
d905 3
a907 2
	sh $srcdir/mkdirs.sh WWW/Library/unix
	sh $srcdir/mkdirs.sh src/chrtrans
d911 3
d916 2
a917 2
	makefile \
	WWW/Library/unix/makefile \
d920 17
@


1.2
log
@make it work in our world... -moj
@
text
@d588 2
a589 2
	$srcdir/mkdirs.sh WWW/Library/unix
	$srcdir/mkdirs.sh src/chrtrans
@


1.1
log
@Initial revision
@
text
@d192 1
a192 1
	LIBS="$LIBS -lcompat"
@


1.1.1.1
log
@Lynx 2.8
@
text
@@

