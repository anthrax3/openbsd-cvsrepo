head	1.8;
access;
symbols
	OPENBSD_5_5:1.6.0.14
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.10
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	LYNX_2_8:1.1.1.1
	LYNX:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2014.07.23.19.13.23;	author deraadt;	state dead;
branches;
next	1.7;
commitid	EcR8E7r0stjLUV4p;

1.7
date	2014.07.09.04.11.34;	author daniel;	state Exp;
branches;
next	1.6;
commitid	lGGuvDWEniklWrQe;

1.6
date	2011.07.22.14.10.37;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.31.09.16.50;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.04.01.40;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.18.59.35;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.25.18.16.41;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.17.47.34;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.11.17.47.34;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@delinked from tree, now it goes to the bit bucket
@
text
@
                      Lynx Installation Guide

This file describes how to compile and install Lynx.  A description of Lynx
can be found in the README file.  Lynx has been ported to UN*X, VMS, Win32
and 386DOS.  The procedures for compiling these ports are quite divergent
and are detailed respectively in Sections II, III, IV and V.  General
installation, problem solving and environment variables are covered in
Sections VI and VII.  There is also a PROBLEMS file in the same directory
as INSTALLATION which contains advice for special problems people have
encountered, especially for particular machines and operating systems.

If you still have difficulties, send an e-mail message to the Lynx-Dev mailing
list (see the README file).  Try to include information about your system,
the name and version of your compiler, which curses library you are using
and the compile-time errors.  Be sure to say what version and image-number
of Lynx you are trying to build (alternately the top date of the CHANGES file).

If you don't understand what one of the defines means, try the README.defines
and *.announce files in the docs subdirectory.  The docs/CHANGES* files record
the entire development history of Lynx and are an invaluable resource for
understanding how Lynx should perform.

First, you must configure Lynx for your system regardless of the port you use.
Follow the instructions given immediately below to configure for your system,
and then go to the respective section concerning the port you wish to compile.

-------------------------------------------------------------------------------

I. General configuration instructions (all ports).

Step 1.  Compile-time Variables.

  There are a few variables that MUST be defined if Lynx is to build
  and there are others you may want to change.

  Lynx MUST be able to find lynx.cfg at start-up: using configure
  (e.g. with UNIX or Cygwin), its location is best set with --sysconfdir ;
  you can check in lynx_cfg.h after configure has run, if you wish.
  otherwise, you can use LYNX_CFG_FILE in userdefs.h ,
  environment variable LYNX_CFG or the -cfg command-line option.

  If you are using configure, you need not make any changes in userdefs.h .
  There are a few variables you can't define with configure --options
  but can define in userdefs.h , e.g. numbering fields as well as links.
  Many variables which can be defined with configure or  userdefs.h
  can also be defined in lynx.cfg or via the Options Menu.

  Lynx implements Native Language Support.  Read "ABOUT-NLS", if you want
  to build an international version of Lynx or tailor status-line prompts,
  messages and warnings to the requirements of your site.

Step 2.  Run-time Variables.

  Read  lynx.cfg  thoroughly, as many Lynx features and how to use them
  are explained there, in some cases ONLY there.  Set up local printers,
  downloaders, assumed character set, key mapping and colors in  lynx.cfg .
  Also see the sample mime.types, mailcap and jumps files
  in the samples subdirectory.

Step 3.  Alternative Character Sets.

  You may skip this, if you are not interested in special characters
  and all local files or WWW pages you will view will use the ISO-8859-1
  "ISO Latin 1" Western European character set.

  If you will be running Lynx in an environment with different incompatible
  character sets, configure CHARACTER_SET (the Display character set)
  and ASSUME_LOCAL_CHARSET to work correctly before creating bookmark files
  and other such items: read lynx.cfg for detailed instructions.
  Additional character sets and their properties may be defined with tables
  in the src/chrtrans directory: see the README.* files therein.

Step 4.  News.

  Set NNTPSERVER in lynx.cfg to your site's NNTP server
  or set the environment variable externally.  For posting to be enabled,
  NEWS_POSTING must be TRUE in userdefs.h or lynx.cfg.
  Also define LYNX_SIG_FILE in userdefs.h or lynx.cfg ,
  so that it points to users' signature files for appending to messages.

Step 5.  Anonymous Accounts *** VERY IMPORTANT!!!!! ***

  If you are building Lynx for personal use only, you can skip this.

  If you are setting up anonymous accounts to use Lynx captively,
  i.e. making Web access publicly available to users who should not
  be allowed any other type of access to your system,
  you are STRONGLY advised to use the -anonymous command-line option:
  if you do not use this option, users may be able to gain access
  to all readable files on your machine!

  Many implementations of telnetd allow passing of environment variables,
  which might be used to modify the environment in anonymous accounts,
  allowing mischief or damage by malicious users, so make sure the wrapper
  uses the -cfg and -homepage switches to specify  lynx.cfg  and start-file,
  rather than relying on variables LYNX_CFG, LYNX_CFG_FILE and WWW_HOME.

-------------------------------------------------------------------------------

II. Compile instructions -- UNIX

1a. Auto-configure.  The auto-configure script uses autoconf2.13 to generate a
    Bourne shell script, configure, which creates "makefile" and "lynx_cfg.h".

    If you are on a UNIX platform, the easiest way to build Lynx is to type:

	    ./configure
    and
	    make

    NOTE:  Configure has a number of useful options.  Please see below.

    NOTE:  The 'configure' script generates auxiliary files "config.status"
    "config.cache" and "config.log".  Normally you will not notice these;
    they are created automatically and removed by a "make distclean".

	+ If you wish to rebuild Lynx with a new host, or change ANY of the
	  parameters which are stored in config.cache, you MUST first remove
	  the config.cache file before running configure; its options do NOT
	  override the settings in that file.

	+ The config.status file is a script which creates (or regenerates)
	  the files created by the configure script.

    Please report problems in the configure/make process by including a copy
    of config.status, config.cache and config.log, as well as the pertinent
    compiler diagnostics.

    See the note in aclocal.m4 for special instructions if you must modify the
    configure script.

    NOTE:  Lynx is a curses-based application, so you must have a curses
    library available to link to.  Native curses (on the system when it was
    installed) are often broken, so you may get superior performance if you
    have either "ncurses" ("ftp://invisible-island.net/ncurses") or "slang"
    ("ftp://space.mit.edu/pub/davis/slang").  If you install these libraries
    in your home directory or a non-default location, you may need to set the
    CPPFLAGS (full path to include files) and LIBS (full path to library files)
    environment variables BEFORE running configure.  See "1d. Environment".
    Use the "--with-screen=ncurses" or "--with-screen=slang" option.

    Note that while lynx will build with a variety of versions of curses and
    ncurses, some will be less satisfactory.  Versions of ncurses before
    1.9.9g will not render color properly.  Some other versions of curses do
    not display color at all.  Likewise, lynx may not build with old versions
    of slang, e.g., before 0.99-38, because slang's interfaces change
    periodically.

    Note compiler/system specific problems below.  See also:
	http://invisible-island.net/ncurses/ncurses.faq.html

1b. Platforms.  Configure should work properly on any Unix-style system.
    It has been tested on the following platforms.

	AIX 3.2.5 (cc w/ curses)	BeOS 4.5 (gcc w/ ncurses)
	CLIX (cc w/ curses & ncurses)	DGUX
	Digital Unix 3.2C and 4.0 (gcc & cc w/ curses, ncurses & slang)
	FreeBSD 2.1.5, 3.1 (gcc 2.6.3 w/ curses & ncurses)
	HP-UX (K&R and ANSI cc, gcc w/ curses, ncurses & slang)
	IRIX 5.2 and 6.2 (cc & gcc w/ curses, ncurses & slang)
	Linux 2.0.0 (gcc 2.7.2 w/ curses, ncurses & slang)
	MkLinux 2.1.5 (gcc 2.7.2.1)	NetBSD
	NEXTSTEP 3.3 (gcc 2.7.2.3 w/ curses)
	OS/2 EMX 0.9c (ncurses) 	SCO OpenServer (cc w/ curses)
	Solaris 2.5, 2.6 & 2.7 (cc & gcc w/ curses, ncurses & slang)
	SunOS 4.1 (cc w/ curses, gcc w/ ncurses & slang)
	OS390 and BS2000.

    NOTE:  SunOS and HP-UX come with a bundled K&R compiler, which is only
    useful for compiling with the bundled curses.  Both ncurses and slang
    require a compiler that recognizes prototypes.

1c. Options
    To get a list of the configure script's options, type "./configure --help".
    Below is an alphabetical listing of the Lynx-specific options.  The actual
    order shown by the -help option is different.  See "docs/README.defines"
    for information on defines for which there are no option switches.

  --datadir
	Defines the location where you want the documentation files installed.
	The configure script constructs makefile actions to install lynx.cfg
	modified to reflect this in the HELPFILE setting.  (For platforms which
	do not support a configure script, such as MS-DOS, Win32 and VMS, you
	must edit lynx.cfg).

  --disable-addrlist-page		(prevent defining USE_ADDRLIST_PAGE)
	Turn off code that displays an alternative list-page, bound to 'A'
	rather than 'l', which always lists URLs rather than titles.

  --disable-alt-bindings 		(prevent defining USE_ALT_BINDINGS)
	Compiles-in an alternative set of line-edit bindings, in addition
	to the default bindings.

  --disable-bibp-urls			(define DISABLE_BIBP)
	Disable (do not compile code) support for bibp: URLs.

  --disable-color-style			(define USE_COLOR_STYLE)
	Use this option to disable optional color style.  This is implemented
	for modern curses implementations, e.g., those that support color.

	Before lynx 2.8.6dev.18, this option was disabled by default.
	You can achieve a similar color effect to match the non-color-style
	(but still allowing users to use color-style) by using the
	--without-lss-file option.

  --disable-config-info			(define NO_CONFIG_INFO)
  	Use this option to disable extended browsable configuration information
	(a screen that shows the result of the configuration script, as well
	as extended lynx.cfg viewing with a pointer to the lynx.cfg file and
	additional functionality).

  --disable-dired			(prevent defining DIRED_SUPPORT)
	Use this option to disable the optional directory-editor.

	Lynx supports directory editing (DirEd) for local directories.
	This allows users to do things like view, copy and remove files
	using a tabular display of the directory and single-keystroke
	commands instead of using the command line.  From inside Lynx, the
	keystroke sequence "g.<enter>" switches Lynx to DirEd mode on the
	current directory.  If you're building a Lynx that is to be used as
	a kind of restricted shell for users who do not have access to the
	command line and should not have access to equivalent capabilities,
	you probably want to disable DirEd with this option.  You can also
	disable some DirEd functions while allowing others.  If you have
	disabled DirEd completely, you can ignore all the more specific
	DirEd options.

	All DirEd menu functions that were enabled on compilation can be
	disabled or modified at run time via DIRED_MENU symbols in lynx.cfg.

  --disable-dired-dearchive		(define ARCHIVE_ONLY)
	Use this option to prevent DirEd from extracting files from an
	archive file.

  --disable-dired-gzip			(prevent defining OK_GZIP)
	Use this option to prevent DirEd from using gzip and gunzip.

  --disable-dired-override		(prevent defining OK_OVERRIDE)
	Normally, in DirEd directory viewing mode some key mappings are
	overridden.  Use this option to disable DirEd keymap overriding.

  --disable-dired-permit		(prevent defining OK_PERMIT)
	Use this option to prevent DirEd from changing the permissions
	on directories or files (i.e., from doing what the Unix chmod
	command or the DOS attrib command does).

  --disable-dired-tar			(prevent defining OK_TAR)
	Use this option to prevent DirEd from using the tar program.

  --disable-dired-uudecode		(prevent defining OK_UUDECODE)
	Use this option to prevent DirEd from using uudecode.

  --disable-dired-xpermit		(define NO_CHANGE_EXECUTE_PERMS)
	Use this option if you do not disable out the dired-permit
	option, but want to restrict changes of the eXecute permission
	to directories (i.e., not allow it to be changed for files).  If
	you don't do this, you can still block changes of the eXecute
	permission for files but not directories via the
	"change_exec_perms" command line restriction.

  --disable-dired-zip			(prevent defining OK_ZIP)
	Use this option to prevent DirEd from using zip and unzip.

  --disable-echo
  	Use this option to suppress the "compiling" commands during a build.
	Doing this makes it easier to find and read warning messages.

  --disable-extended-dtd		(define NO_EXTENDED_HTMLDTD)
	disable extended HTML DTD logic.  This should revert to old-style
	(2.7.1/2.7.2) behavior, but is not well-tested.

  --disable-file-upload			(define USE_FILE_UPLOAD)
	Compile-in support for form-based file-upload.

  --disable-finger			(define DISABLE_FINGER)
	Do not compile-in code used to connect to "finger" URLs.

  --disable-forms-options		(define NO_OPTION_FORMS)
	Disable the Form-based Options Menu (see --disable-menu-options).
	The default is to compile key-based & form-based Options Menu code,
	allowing users the final choice via FORMS_OPTIONS in lynx.cfg
	or the -forms_options command-line switch.

  --disable-ftp				(define DISABLE_FTP)
	Do not compile-in code used to connect to FTP servers.

  --disable-full-paths
  	Use this option to control whether full pathnames are compiled in for
	various utilities invoked by lynx as external commands.  By default,
	full pathnames are compiled in for the the locations where configure
	finds these commands at configure time.  Affected commands are chmod,
	compress, cp, gzip, install, mkdir, mv, rm, tar, touch, gunzip, unzip,
	bzip2, uudecode, zcat, zip, telnet, tn3270, rlogin.  (Not all of them
	are used on all systems or in all configurations.)

	This option makes Lynx simpler to install, but potentially less secure,
	since the commands are then set in the user's $PATH.  All of these
	commands may also be overridden individually by setting environment
	variables before configuring.  For example, you can disable the telnet
	command by doing this:

		setenv TELNET /bin/false

  --disable-gopher			(define DISABLE_GOPHER)
	Do not compile-in code used to connect to GOPHER servers.

  --disable-idna
	By default, the configure script searches for the GNU idn library,
	which lets lynx translated URLs which are in UTF-8 to ASCII.  The
	latter is needed for most network accesses.  Use this option to
	suppress the feature, e.g., to reduce size.

  --disable-included-msgs
	Do not use included messages, for i18n support.  If NLS support is
	requested, the configure script will otherwise use the messages in the
	./po subdirectory.

  --disable-justify-elts		(define USE_JUSTIFY_ELTS)
	Do not use element-justification logic.

  --disable-largefile			(prevent defining LONG_LIST)

	Use this option to disable the compiler and linker options that
	provide largefile interfaces.

  --disable-locale-charset		(define USE_LOCALE_CHARSET)
  	Use nl_langinfo(CODESET) to determine initial value for display
	charset, overrides character_set value in .lynxrc file.

  --disable-long-list			(prevent defining LONG_LIST)
	Use this option to disable long "ls -l" directory listings (when
	enabled, the actual directory style is configurable from lynx.cfg).

  --disable-menu-options		(define NO_OPTION_MENU)
	Disable the Key-based Options Menu.
	See --disable-forms-options (above) for further details.

  --disable-news			(define DISABLE_NEWS)
	Do not compile-in code used to connect to NNTP (netnews) servers.

  --disable-parent-dir-refs		(define NO_PARENT_DIR_REFERENCE)
  	Use this option to disable "Up-to" parent-links in directory listings.

  --disable-partial			(prevent defining DISP_PARTIAL)
	Turn off code that lets Lynx display parts of a long page while loading
	it.

  --disable-persistent-cookies		(prevent defining USE_PERSISTENT_COOKIES)
	Turn off support for saving cookies to a file, for subsequent reuse.
	Persistent cookie support will use (or create) the file specified by
	the 'COOKIE_FILE' option, or default to ".lynx_cookies" in the home
	directory.  (Currently there is no protection against conflict if
	several lynx sessions are active from the same account).

  --disable-prettysrc			(define USE_PRETTYSRC)
	Turn off support for colorizing the source view of HTML pages.  If
	compiled-in, new source view mode is available with -prettysrc command
	line option.

  --disable-progressbar			(define USE_PROGRESSBAR)
	Turn off support for a "progress bar" which displays at the bottom
	of the screen when doing downloads and other time-consuming (but
	interruptible) processes.  This feature can be selected in the
	options menu.

  --disable-read-eta			(define USE_READPROGRESS)
	Turn off enhanced read-progress message showing ETA (estimated time to
	completion), as well as the amount of time stalled without any data
	transferred.

  --disable-rpath-hack
	The rpath-hack makes it simpler to build programs, particularly with
	the *BSD ports which may have essential libraries in unusual places.
	But it can interfere with building an executable for the base system.
	Use this option in that case.

  --disable-scrollbar			(define USE_SCROLLBAR)
	Turn off support for scrollbar on the right-margin of the screen.
	If you configure with ncurses, this works with the mouse on xterm,
	etc.

  --disable-session-cache		(define USE_CACHE_JAR)
	Turn off support for saving/restoring session information in files.
	Configurable from lynx.cfg

  --disable-sessions			(define USE_SESSIONS)
	Turn off support for sessions, which allows the user to automatically
	save and restore history information.

  --disable-source-cache		(define USE_SOURCE_CACHE)
	Turn off support for caching HTML pages locally,
	in files or in memory.	Configurable from lynx.cfg

  --disable-trace			(define NO_LYNX_TRACE)
	Turn off code that lets you trace internal details of Lynx's operation.
	We recommend that you leave this enabled, since we need this
	information to diagnose problems with either Lynx or the sites to which
	you connect.

  --enable-ascii-ctypes			(define USE_ASCII_CTYPES)
	Compiles-in alternative case-conversion functions which ensure that
	configuration names, etc., are compared in POSIX locale.  This is
	important for operating in some locale such as Turkish.

  --enable-cgi-links			(define LYNXCGI_LINKS)
	Allows lynx to access a cgi script directly without the need for
	a http daemon.

  --enable-change-exec			(define ENABLE_OPTS_CHANGE_EXEC)
  	Allow users to change the execution status within the options screen.
	See EXEC_LINKS and EXEC_SCRIPTS.

  --enable-charset-choice		(define USE_CHARSET_CHOICE)
	Add logic for ASSUMED_DOC_CHARSET_CHOICE and DISPLAY_CHARSET_CHOICE in
	lynx.cfg, allowing user to configure a subset of the compiled-in
	charsets for normal use.

  --enable-cjk				(define CJK_EX)
	Add experimental logic for supporting CJK documents.  (This is not
	necessary for CJK support and may go away in a future release.)

  --enable-debug			(The symbol DEBUG is always defined.)
        Use this option to compile-in support for debugging.
        Note that this flag is ignored if the CFLAGS environment
        variable is set, in that case "-g" (or whatever) has to
        be included in the CFLAGS value to get debugging.
	Autoconf normally adds -g and -O options to CFLAGS if CFLAGS
	was not set, and if the compiler supports those options.

  --enable-default-colors		(define USE_DEFAULT_COLORS)
  	Enable use of default-color background (ncurses/slang).  Either
	configuration supports the use of 'default' for colors even without
	this option.  That is, 'default' is interpreted as white (foreground)
	or black (background) according to the context.  When the default
	colors configuration is built, the actual values for foreground and
	background colors are determined by the terminal.

  --enable-exec-links			(define EXEC_LINKS)
	Allows lynx to execute programs by accessing a link.

  --enable-exec-scripts 		(define EXEC_SCRIPTS)
	Allows lynx to execute programs inferred from a link.

  --enable-externs			(define USE_EXTERNALS)
	Use this option to enable external application support. (See lynx.cfg.)

  --enable-find-leaks			(define LY_FIND_LEAKS)
	Use this option to compile-in logic for testing memory leaks.

  --enable-font-switch			(define EXP_CHARTRANS_AUTOSWITCH)
	Allow Lynx to automatically change the Linux console state (switch
	fonts) according to the current Display Character Set.  (Linux console
	only.  *Use with discretion.*  See docs/README.chartrans.)

  --enable-gnutls-compat		(define USE_GNUTLS_FUNCS)
	When --with-gnutls is used, tell whether to use GNUTLS's OpenSSL
	compatibility library or use GNUTLS's low-level API directly.

  --enable-gzip-help
	Install the lynx help files in gzip'd format [*.gz] to save space.

  --enable-htmlized-cfg
	generate an HTMLized copy of lynx.cfg which will be installed with
	the other help files.

  --enable-internal-links		(define TRACK_INTERNAL_LINKS)
        With `internal links' (links within a document to a location within
        the same document) enabled, Lynx will distinguish between, for example,
        `<A HREF="foo#frag">' and `<A HREF="#frag">' within a document whose
        URL is `foo'.  It may handle such links differently, although practical
        differences would appear only if the document containing them resulted
        from a POST request or had a no-cache flag set.  This feature attempts
        to interpret URL-references as suggested by RFC 2396, and to prevent
        mistaken resubmissions of form content with the POST method.  An
        alternate opinion asserts that the feature could actually result in
        inappropriate resubmission of form content.

  --enable-ipv6         		(define ENABLE_IPV6)
	use IPV6 (with IPV4) logic.

  --enable-japanese-utf8		(define EXP_JAPANESEUTF8_SUPPORT)
	use experimental Japanese UTF-8 logic.

  --enable-kbd-layout			(define EXP_KEYBOARD_LAYOUT)
	Disabled by default, this option allows you to use translation
	tables on the input keystrokes.  Current tables include
		ROT13'd keyboard layout
		JCUKEN Cyrillic, for AT 101-key kbd
		YAWERTY Cyrillic, for DEC LK201 kbd

  --enable-local-docs
	On install, modify link from help-page to point to the local
	doc-directory, e.g., with README files.  Normally this points
	to the current release directory.

  --enable-nested-tables		(define EXP_NESTED_TABLES)
	Extends TRST to format nested tables, as well as be smarter about
	<BR> and <P> tags in table cells.

  --enable-nls				(several definitions)
	use Native Language Support (i.e., gettext).

  --enable-nsl-fork			(define NSL_FORK)
	Disabled by default, this allows interruption of NSL requests,
	so that `z' will stop the `look-up' phase of a connection.

  --enable-syslog			(define SYSLOG_REQUESTED_URLS)
	Use this option to log NSL requests via syslog().

  --enable-underlines			(define UNDERLINE_LINKS)
	Use this option to underline links rather than using boldface.

  --enable-vertrace			(define LY_TRACELINE)
	Turn on code that prefixes trace output lines with source filename
	and line number.

  --enable-warnings
	Use this option to turn on GCC compiler warnings.

  --enable-wais
	Use this option to turn on configure check for freeWAIS library.

  --enable-widec
	Use this option to allow the configure script to look for wide-curses
	features.  If you do not specify the option, the configure script
	will look for these features if --with-screen=ncursesw is given.
	For this release of Lynx, we recommend the ncursew library built from
	ncurses 5.5.

  --sysconfdir				(affect LYNX_CFG_FILE)
	Defines the location where you want the lynx.cfg file installed.
	The configure script defines the symbol LYNX_CFG_FILE to correspond
	with the $sysconfdir environment variable.  (For platforms which do not
	support a configure script, such as MS-DOS, Win32 and VMS, you must
	edit userdefs.h if you wish to specify the location of lynx.cfg).

  --with-Xaw3d
	This option allows you to specify the X libraries used if you
	are configuring lynx to use PDCurses on a Unix platform.

  --with-XawPlus
	This option allows you to specify the X libraries used if you
	are configuring lynx to use PDCurses on a Unix platform.

  --with-build-cc=XXX
	If cross-compiling, specify a host C compiler, which is needed to
	compile a utility which generates tables for lynx.
	If you do not give this option, the configure script checks if the
	$BUILD_CC variable is set, and otherwise defaults to gcc or cc.

  --with-build-cpp=XXX
	This is unused by lynx.

  --with-build-cflags=XXX
	If cross-compiling, specify the host C compiler-flags.  You might need
	to do this if the target compiler has unusual flags which confuse the
	host compiler.

  --with-build-cppflags=XXX
	If cross-compiling, specify the host C preprocessor-flags.  You might
	need to do this if the target compiler has unusual flags which confuse
	the host compiler.

  --with-build-ldflags=XXX
	If cross-compiling, specify the host linker-flags.  You might need to
	do this if the target linker has unusual flags which confuse the host
	compiler.

  --with-build-libs=XXX
	If cross-compiling, the host libraries.  You might need to do this if
	the target environment requires unusual libraries.

  --with-bzlib[=XXX]			(define USE_BZLIB)
	Use libbz2 for decompression of some bzip2 files.

	The optional value XXX specifies the directory in which the library
	can be found, and may be either the path of the "lib" directory,
	or one level above.  In either case, the corresponding header files
	are assumed to be in the parallel "include" directory.

  --with-charsets=list			(define ALL_CHARSETS)
 	Limit the number of charsets that are compiled-in to the specified
	list of comma-separated MIME names.

  --with-cfg-file			(define LYNX_CFG_FILE)
	Specify the default configuration file's name.  Use --without-cfg-file
	to force the user to specify the configuration file on the command
	line.  The filename can be overridden by using the LYNX_CFG environment
	variable.

  --with-cfg-path			(define LYNX_CFG_PATH)
	Specify the default configuration file(s) directory search-list.  Use
	--without-cfg-path to limit this to the location of the lynx.cfg file.
	The search-list can be overridden using the LYNX_CFG_PATH environment
	variable.

  --with-curses-dir
	Specify directory under which curses/ncurses is installed.  This
	assumes a standard install, e.g., with an include and lib subdirectory.

  --with-dbmalloc
	use Conor Cahill's dbmalloc library

  --with-destdir=XXX
	set DESTDIR variable in makefiles.  This is prefixed to all directories
	in the actual install, but is not really part of the compiled-in or
	configured directory names.  It is convenient for packaging the
	installed files.  If you do not provide the option, the configure
	script uses your $DESTDIR environment variable.

  --with-dmalloc
	use Gray Watson's dmalloc library

  --with-gnutls[=XXX]			(define USE_SSL, USE_GNUTLS_INCL)
	Use this option to configure with the GNU TLS library.
	See docs/README.ssl for additional information.

	The optional value XXX specifies the directory in which the library
	can be found, and may be either the path of the "lib" directory,
	or one level above.  In either case, the corresponding header files
	are assumed to be in the parallel "include" directory.  The default
	is /usr/local/gnutls.

	See the "--enable-gnutls-compat" option.

  --with-included-gettext
	not supported in this package.  The configure script uses macros which
	are bundled together with more useful features.

	See the "--enable-nls" option.

  --with-libiconv-prefix=DIR
	search for libiconv in DIR/include and DIR/lib

  --with-lss-file{=path}		(define LYNX_LSS_FILE)
	Specify the default style-sheet file's name.  Use --without-lss-file
	to make the default behavior match the non-color-style (if no --lss
	option is given, and no COLOR_STYLE setting is in lynx.cfg).

  --with-mime-libdir=list		(define MIME_LIBDIR)
	Use this option to specify the system directory containing the
	mime.types and mailcap files.

  --with-neXtaw
	This option allows you to specify the X libraries used if you
	are configuring lynx to use PDCurses on a Unix platform.

  --with-nls-datadir=DIR
	Use this option to override the configure script's NLS data directory,
	under which the locale (i.e., language) files are installed.  The
	default value is derived at configure time, and depends on whether GNU
	or native gettext is used.

  --with-nss-compat[=XXX]		(define USE_NSS_COMPAT_INCL)
	Use this option to configure with the NSS library's OpenSSL-compatible
	interface.
	See docs/README.ssl for additional information.

	The optional value XXX specifies the directory in which the library
	can be found, and may be either the path of the "lib" directory,
	or one level above.  In either case, the corresponding header files
	are assumed to be in the parallel "include" directory.

  --with-pkg-config[=XXX]
	Use pkg-config, if available, to tell how to build with certain
	libraries, e.g., openssl and gnutls.  If pkg-config is not used,
	or if those libraries are not known to pkg-config, then the configure
	script will search for the libraries as described in the --with-ssl
	and --with-gnutls options.

	The optional value XXX specifies the pathname for pkg-config, e.g.,
	"/usr/local/bin/pkg-config".

	Note: The pkg-config program is used only if no explicit directory
	parameter is provided for the --with-ssl or --with-gnutls options.

  --with-screen=XXX
	Use this option to select the screen type.  The option value, XXX
	must be one of curses (the default), ncurses, ncursesw, pdcurses or
	slang.  Specifying a screen type causes the configure script to
	look in standard locations for the associated header and library
	files, unless you have preset the $CFLAGS and $LIBS variables.

	--with-screen=ncursesw		(define NCURSES, WIDEC_CURSES)
	--with-screen=ncurses		(define NCURSES)
	--with-screen=pdcurses		(define PDCURSES)
	--with-screen=slang		(define USE_SLANG)

	Note that some systems may have a default curses library which
	does not support color, while on others, ncurses is installed as
	the curses library.  The variant ncursesw is the wide-character
	version of ncurses.  See also the --enable-widec option.

	The pdcurses selection supported by the configure script is a UNIX-only
	library which uses X11.  If you are configuring with DJGPP, the likely
	choice is "curses", since that is how PDCurses is normally installed.

  --with-socks[=XXX]			(define SOCKS)
	Use this option to configure with the socks library.

	The optional value XXX specifies the directory in which the library
	can be found, and may be either the path of the "lib" directory,
	or one level above.  In either case, the corresponding header files
	are assumed to be in the parallel "include" directory.

  --with-socks5[=XXX]			(define USE_SOCKS5, SOCKS)
	Use this option to configure with the socks5 library.

	The optional value XXX specifies the directory in which the library
	can be found, and may be either the path of the "lib" directory,
	or one level above.  In either case, the corresponding header files
	are assumed to be in the parallel "include" directory.

	If you make a SOCKSified lynx, you may have trouble accessing FTP
	servers.  Also, instead of SOCKSifying lynx for use behind a firewall,
	you are better off if you make it normally, and set it up to use a
	proxy server.  You can SOCKSify the proxy server, and it will handle
	all clients, not just Lynx.  If your SOCKS server was compiled to use
	the short version of Rbind, also include -DSHORTENED_RBIND in your
	SITE_LYDEFS and SITE_DEFS.  If you do SOCKSify lynx, you can turn off
	SOCKS proxy usage via a -nosocks command line switch.

  --with-ssl[=XXX]			(define USE_SSL)
	Use this option to configure with the OpenSSL library, or SSLeay.
	See docs/README.ssl for additional information.

	The optional value XXX specifies the directory in which the library
	can be found, and may be either the path of the "lib" directory,
	or one level above.  In either case, the corresponding header files
	are assumed to be in the parallel "include" directory.

  --with-system-type=XXX
	For testing, override the derived host system-type which is used to
	decide things such as special compiler options.  This is normally
	chosen automatically based on the type of system which you are
	building on.  We use it for testing the configure script.

  --with-textdomain[=XXX]		(define NLS_TEXTDOMAIN)
	Set the NLS textdomain to the given value.  This is normally "lynx".

  --with-zlib[=XXX]			(define USE_ZLIB)
	Use zlib for decompression of some gzip files.

	The optional value XXX specifies the directory in which the library
	can be found, and may be either the path of the "lib" directory,
	or one level above.  In either case, the corresponding header files
	are assumed to be in the parallel "include" directory.

1d. Environment variables
    The configure script looks for programs and libraries in known/standard
    locations.  You can override the behavior of the script by presetting
    environment variables.  If they are set, the script will try to use these
    values rather than computing new ones.  Useful variables include:

	CC - the C compiler.  If you do not override this, configure
		will try to use gcc. For instance, setting CC=cc and
		exporting this value will cause configure to use cc instead.

	CFLAGS - the C compiler options.  These also include C
		preprocessor options (such as -I), since the $CFLAGS and
		$CPPFLAGS variables are maintained separately.

	CPPFLAGS - the C preprocessor options.  For some configuration
		tests, you may need to set both $CFLAGS and $CPPFLAGS if
		you are compiling against header files in nonstandard
		locations.

	LDFLAGS - linker/loader options.

	LIBS - the libraries to be linked, with -L and -l options.  If
		you are linking against libraries in nonstandard locations
		unrelated to the install prefix (that you can specify in
		the configure script) you may have to specify these via
		the $LIBS variable.

    Lynx has compiled-in the pathnames of various programs which it executes.
    Normally the full pathnames are given, rather than the program name
    alone.  These may be preset in the environment by the capitalized version,
    e.g., INSTALL for "install".  The corresponding internal definitions
    are suffixed "_PATH", e.g., "INSTALL_PATH".


-- 1997/7/27 - T. Dickey <dickey@@clark.net>

1e. Examples
    If you are compiling Lynx for your personal use and are restricted to your
    home directory, a simple method for building would be to choose some
    directory, say ".lynx", and then type:

	./configure --prefix=~/.lynx --exec-prefix=~/.lynx
    and
	make install

    Now you only need to add "~/.lynx/bin" to your PATH and edit "~/.lynx/lib/
    lynx.cfg" as described above.

    I personally use the following csh shell script to set environment
    variables and configure options rather than type them each time.
	#!/bin/csh -f
	setenv CPPFLAGS "-I$HOME/slang -I$HOME/.usr/include"
	setenv LIBS "-L$HOME/.slang/lib -L$HOME/.usr/lib"
	./configure --exec-prefix=$HOME --bindir=$HOME/.lynx \
		--mandir=$HOME/.usr/man --sysconfdir=$HOME/.usr/lib \
		--with-screen=slang --with-zlib

    CPPFLAGS in this example defines the full path to the slang and zlib
    header files, which are not kept in standard directories.  Likewise, LIBS
    defines the nonstandard locations of libslang.a and libz.a.  Setting the
    option --bindir tells the configure script where I want to install the
    lynx binary; setting --mandir tells it where to put the lynx.1 man page,
    and setting --sysconfdir tells it (while at the same time defining
    LYNX_CFG_FILE) where to put the configuration file "lynx.cfg", when I type
    "make install".  The --with-screen=slang and --with-zlib options are
    explained above.

2. Wais support (optional)
    To add direct WAIS support, get the freeWAIS distribution from
    "ftp://ftp.cnidr.org/pub/NIDR.tools/freewais", and compile it.  The
    compile process will create the libraries you will need, wais.a and
    client.a.  Edit the Makefile in the top level directory and add the
    library locations under the DIRECT WAIS ACCESS heading.  Edit the Makefile
    for the WWW Library in "WWW/Library/Implementation/makefile" to point to
    the include directory for the freewais distribution.  Precompiled
    libraries are available for many platforms if you don't wish to compile
    one yourself.

-------------------------------------------------------------------------------

III. Compile instructions -- VMS

Step 1.  Downloading binary files.
    Lynx must handle all IO as streams, and on VMS, output files are always
    created with Stream_LF format via the C RTL's fopen().  The file headers
    indicate Implied Carriage Control, even when the transfer was in binary
    mode, which can confuse downloading software and cause corruption of
    the file contents.  To deal with this, you should define the symbol
    USE_FIXED_RECORDS as TRUE in userdefs.h and/or lynx.cfg.  This will
    instruct Lynx to correct the header information to indicate FIXED 512
    records, with No Implied Carriage Control.  If Lynx fails to do the
    conversion (because the file wasn't mapped to a binary MIME type) you can
    execute FIXED512.COM externally to correct the header information.  The
    command file uses Joe Meadow's FILE utility, or the SET FILE/ATTRIBUTES
    command on current versions of VMS, to modify the headers.  See the
    comments in FIXED512.COM, userdefs.h and lynx.cfg for more information.

Step 2.  Passive FTP
    If your system requires the PASV FTP code instead of the standard PORT FTP
    code (e.g., to deal with a firewall) then set the FTP_PASSIVE option in
    lynx.cfg

Step 3a.
    Lynx uses the VMS port of gzip for uncompressing streams which have
    Content-Encoding headers indicated compression with gzip or the
    Unix compress.  If you do not have gzip installed on your system
    you can get it from "ftp://ftp.wku.edu/" in the fileserv directory.
    The command Lynx uses to uncompress on VMS is "gzip -d".

    If you are using the SOCKETSHR library, read SOCKETSHR.announce and
    make sure you have defined SOCKETSHR and SOCKETSHR_LIBRARY as explained
    therein.

    A "build.com" and "build-slang.com" script for building Lynx with curses
    or slang is in the top level directory.  All you have to do is type
    "@@build" or "@@build-slang" and answer its prompt for your system's TCP-IP
    software.  Current choices are:
	   MULTINET (default)
	   UCX
	   WIN_TCP
	   CMU_TCP
	   SOCKETSHR_TCP
	   TCPWARE
    It will autosense whether you have VAXC, DECC or GNUC on VAX or AXP and
    build appropriately.  If a WWWLib already exists for that TCP-IP software,
    it will prompt you for whether you want to rebuild it.  If you want to
    build a WWWLib separately, you can type "@@libmake.com" with your default
    directory set to [.WWW.Library.vms] instead doing it via "build.com" in
    the top directory.  You may need to modify "build-slang.com", as described
    in its header, so that it can find slang.olb on your system.  If you have
    both DECC and VAXC, it will use DECC to benefit from the newer and more
    efficient memory management functions.

Step 3b.  (optional compilation method)
    If you have and want to use MMS, read the header of descrip.mms in the
    top directory and be sure you include the appropriate macro definitions
    when you invoke it:

	$ MMS /Macro = (MULTINET=1)		for VAXC - MultiNet
	$ MMS /Macro = (WIN_TCP=1)		for VAXC - Wollongong TCP/IP
	$ MMS /Macro = (UCX=1)			for VAXC - UCX
	$ MMS /Macro = (CMU_TCP=1)		for VAXC - OpenCMU TCP/IP
	$ MMS /Macro = (SOCKETSHR_TCP=1)	for VAXC - SOCKETSHR/NETLIB
	$ MMS /Macro = (TCPWARE=1)		for VAXC - TCPWare TCP/IP

	$ MMS /Macro = (MULTINET=1, DEC_C=1)	for DECC - MultiNet
	$ MMS /Macro = (WIN_TCP=1, DEC_C=1)	for DECC - Wollongong TCP/IP
	$ MMS /Macro = (UCX=1, DEC_C=1)		for DECC - UCX
	$ MMS /Macro = (CMU_TCP=1, DEC_C=1)	for DECC - OpenCMU TCP/IP
	$ MMS /Macro = (SOCKETSHR_TCP=1,DEC_C=1) for DECC - SOCKETSHR/NETLIB
	$ MMS /Macro = (TCPWARE=1, DEC_C=1)	for DECC - TCPWare TCP/IP

	$ MMS /Macro = (MULTINET=1, GNU_C=1)	for GNUC - MultiNet
	$ MMS /Macro = (WIN_TCP=1, GNU_C=1)	for GNUC - Wollongong TCP/IP
	$ MMS /Macro = (UCX=1, GNU_C=1)		for GNUC - UCX
	$ MMS /Macro = (CMU_TCP=1, GNU_C=1)	for GNUC - OpenCMU TCP/IP
	$ MMS /Macro = (SOCKETSHR_TCP=1,GNU_C=1) for GNUC - SOCKETSHR/NETLIB
	$ MMS /Macro = (TCPWARE=1, GNU_C=1)	for GNUC - TCPWare TCP/IP

    If you just type "MMS" it will default to the MULTINET and VAXC
    configuration.  MMS will build the WWW library and Lynx sources, and
    link the executable.  However, not all of the header dependencies are
    specified.  If you are not a developer, and need a clean build, you
    should use build.com instead of the MMS utility.

    If you want SOCKS support on VMS, you must add SOCKS as a compilation
    definition, and the SOCKS library to the link command.  However, instead
    of SOCKSifying Lynx for use behind a firewall, you are better off if you
    build Lynx normally, and set up Lynx to use a proxy server (see below).
    You instead can SOCKSify the proxy server, and it will handle all clients,
    not just Lynx.

-------------------------------------------------------------------------------

IV. Compile instructions -- Win32 (Windows95/98/NT)

Borland C:
---------

Simplified:
----------

Sources:
    Download the current sources (choose a zip-file) from http://lynx.isc.org
    and unzip them into a directory where you will build Lynx.

Compiler:
    Download the Borland C/C++ 5.51 compiler from
	http://forms.embarcadero.com/forms/BCC32CompilerDownload

    This is a file named "freecompilertools.exe".

    Run that to install the compiler, e.g., in
	c:\app\bcc55

    Do not install into a directory with spaces in its name, such as
	c:\program files

Libraries:
    Download these "setup" files from http://gnuwin32.sourceforge.net
	libiconv-1.9.2-1.exe (libiconv)
	libintl-0.14.4.exe (libintl)
	openssl-0.9.8h-1-setup.exe (openssl)
	pdcurses-2.6.exe (pdcurses)
	zlib-1.2.3.exe (zlib)

    Install all of the packages in the same directory, "c:\app\GnuWin32".

    A fix is needed in GnuWin32 include/zconf.h: change line reading
    	#if 1	/* HAVE_UNISTD_H -- this line is updated by ./configure */
    to
    	#ifdef HAVE_UNISTD_H

    Prepare import-libraries using Borland's implib program.  The ".lib"
    files that it uses are a different format than the import libraries
    distributed with GnuWin2.  From Lynx's source directory run
        bcblibs

Environment:
    At this point, the bin-directory for the compiler and for the GnuWin32
    libraries should be in your path.

Building:
    From Lynx's source directory
	cd src\chrtrans
	makew32 clean
	makew32
	cd ..\..
	makew32 clean
	makew32

-------------------------------------------------------------------------------

Detailed:
--------
    The original Win32 port was built with Borland C++ 4.52, but later
    versions reportedly can be used.  Before compiling the Lynx sources, you
    need a curses library, and it is recommended that you have the zlib
    library.  Get pdcurses2.3 from "http://pdcurses.sourceforge.net/".  I
    have modified it so that mouse support is no longer broken for Lynx (see
    "http://www.fdisk.com/doslynx/").  You will want to get zlib from
    "http://www.zlib.net/ ".  Compile these libraries, and
    put them in a convenient place (pdcurses inside the Lynx directory).

    Unpack the latest Lynx source distribution, and make an obj directory
    under the source root to contain the compile output.  Copy in your
    IDE file.  A sample IDE file and helper libraries are available at
    "http://www.fdisk.com/doslynx/wlynx/source/".

    First build the .h files in src\chrtrans using "makew32.bat".  Double
    check for new .tbl files; hand edit in any new ones, and then do "makew32".
    Jump into Borland C++, load the project (IDE file) and compile Lynx.
    Alternately, after compiling the chartrans tables, you can come back to
    the top directory and compile manually, i.e., do "make -f makefile.bcb".

    I also have a binary available at "http://www.fdisk.com/doslynx/".  This
    binary was compiled with pdcurses 2.3, hacked so win32 mouse support works,
    and with zlib, so Lynx can do gzip routines internally.  More hints and
    information can be found in "http://www.fdisk.com/doslynx/lynxport.htm".

-- 1997/10/12 - W. Buttles <lynx-port@@fdisk.com>
-- 2010/11/27 - URL's updated by Doug Kaufman <dkaufman@@rahul.net>

-------------------------------------------------------------------------------

Cygwin:
    It is possible to compile under the cygwin system, which will allow you to
    use the configure script described above for Unix.  Type, for example,
    "./configure --with-screen=ncurses --with-libz" in a Dos window running the
    cygwin bash$ shell.  You also have the choice of using either pdcurses or
    slang.  You will need a launch program such as sh.exe to call helper
    applications.  Paths may need to be in cygwin style, rather than Windows
    style (e.g., TMPDIR=/cygdrive/d/cygwin/tmp, rather than
    TMPDIR=d:\cygwin\tmp).

Visual C++:
    You must have compiled zlib and PDCurses with the -MT (threaded code)
    option.  This is not the default with zlib (see Makefile.msc).

    Copy into lib the following
	zconf.h
	zlib.h
	zlib.lib

    from the zlib build-tree, and
	curses.h
	pdcurses.lib

    from the PDCurses build-tree.

    Then
	make-msc

    to build lynx.

-------------------------------------------------------------------------------

V. Compile instructions -- 386 DOS

    Compiling for DOS with DJGPP has traditionally been a multistep
    procedure. Now, if you have a full installation of DJGPP you can
    also install using the configure script, just as in the UNIX
    section. This needs to be done under a BASH shell. Use a shell
    script to run configure as in the example at the end of this
    section. Otherwise you can follow the below instructions. The
    multistep procedure for DOS may not be supported in the future
    and use of the configure script is recommended. The information
    about required libraries and unpacking applies to both methods of
    compiling.

    First install the C compiler and its libraries (see readme.1st from
    DJGPP distribution).

    Originally, lynx makefiles come with the initial -O2 optimization
    level. If you experience compilation process too slow due to paging
    to the disk (DPMI server provide virtual memory, when in lack of
    RAM), you may change optimization to -O1 or turn the optimization
    off entirely.

    If using optimization level -O2 or -O3 with older versions of DJGPP
    and GCC, you may need to "stubedit" your "cc1.exe" file to enlarge
    compiler stack size. For instance, if using DJGPP 2.02 and GCC 2.8.1,
    to compile with -O3 optimization, the stub needs to be edited to give
    a larger stack. To do this go into djgpp\lib\gcc-lib\djgpp\2.81 and
    either type the command:
   	 "stubedit cc1.exe bufsize=63k minstack=2M",
    or edit interactively with: "stubedit cc1.exe". Current versions of
    DJGPP and GCC generally work with the standard stack.

    Unpack the source code using a DOS program like UNZIP386.  If you are
    using PKUNZIP to unpack the .zip archive, you must use the -d command
    line switch to restore the directory structure contained in the archive,
    i.e., do "pkunzip -d lynx-cur.zip".  No switch is required if you use
    unzip386 or unzip.  If you are trying to compile the 386DOS port under a
    WinNT DOS shell, be sure to unpack the source with a DOS program so
    that all directories will be adjusted to the DOS 8.3 file format necessary
    for compiling with DJGPP.  Do NOT use Winzip, because that will create
    long filenames that will not be recognized by DJGPP tools.

    If you wish to compile with "USE_ZLIB" (recommended), you must have the
    zlib library.  Get the source from
	    http://www.zlib.net
    and compile it.  Put libz.a in the lib subdirectory of DJGPP, and put
    zlib.h and zconf.h in the include subdirectory.

    In addition to the files in the Lynx distribution, you will need a curses
    package and a TCP package.  You can use PDCurses (available at
    "http://pdcurses.sourceforge.net/") and the DJGPP port of WATTCP.  The
    updated version of WATTCP is known as WATT-32, and is available at
    "http://home.broadpark.no/~gvanem/".  You can also use slang (available at
    "http://www.jedsoft.org/slang/") as your screen library.  You must
    compile these before you go any further.  If you wish to use PDCurses 2.6,
    you need to first apply the following patch:

--- dos/gccdos.mak.ori	2002-01-11 20:11:18.000000000 -0800
+++ dos/gccdos.mak	2003-12-13 21:29:28.000000000 -0800
@@@@ -40,11 +40,11 @@@@
 	CFLAGS  = -c -g -Wall -DPDCDEBUG
 	LDFLAGS = -g
 else
-	CFLAGS  = -c -O -Wall
+	CFLAGS  = -c -O2 -Wall
 	LDFLAGS =
 endif

-CPPFLAGS	= -I$(PDCURSES_HOME) -I$(CCINCDIR) -D_NAIVE_DOS_REGS
+CPPFLAGS	= -I$(PDCURSES_HOME) -I$(CCINCDIR) -D_NAIVE_DOS_REGS -DHAVE_STRING_H

 CCFLAGS		= $(CFLAGS) $(CPPFLAGS)

@@@@ -64,10 +64,10 @@@@
 all:	$(PDCLIBS) $(DEMOS)

 clean:
 	-del *.o
-	-del curses.lib
-	-del panel.lib
+	-del pdcurses.a
+	-del panel.a

 demos:	$(DEMOS)

@@@@ -287,33 +287,27 @@@@
 #------------------------------------------------------------------------

 firework.exe:	firework.o $(LIBCURSES)
-	$(LINK) $(LDFLAGS) -o firework firework.o $(LIBCURSES)
-	$(COFF2EXE) firework
+	$(LINK) $(LDFLAGS) -o firework.exe firework.o $(LIBCURSES)
 	strip $@@

 newdemo.exe:	newdemo.o $(LIBCURSES)
-	$(LINK) $(LDFLAGS) -o newdemo newdemo.o $(LIBCURSES)
-	$(COFF2EXE) newdemo
+	$(LINK) $(LDFLAGS) -o newdemo.exe newdemo.o $(LIBCURSES)
 	strip $@@

 ptest.exe:	ptest.o $(LIBCURSES) $(LIBPANEL)
-	$(LINK) $(LDFLAGS) -o ptest ptest.o $(LIBCURSES) $(LIBPANEL)
-	$(COFF2EXE) ptest
+	$(LINK) $(LDFLAGS) -o ptest.exe ptest.o $(LIBCURSES) $(LIBPANEL)
 	strip $@@

 testcurs.exe:	testcurs.o $(LIBCURSES)
-	$(LINK) $(LDFLAGS) -o testcurs testcurs.o $(LIBCURSES)
-	$(COFF2EXE) testcurs
+	$(LINK) $(LDFLAGS) -o testcurs.exe testcurs.o $(LIBCURSES)
 	strip $@@

 tuidemo.exe:	tuidemo.o tui.o $(LIBCURSES)
-	$(LINK) $(LDFLAGS) -o tuidemo tuidemo.o tui.o $(LIBCURSES)
-	$(COFF2EXE) tuidemo
+	$(LINK) $(LDFLAGS) -o tuidemo.exe tuidemo.o tui.o $(LIBCURSES)
 	strip $@@

 xmas.exe:	xmas.o $(LIBCURSES)
-	$(LINK) $(LDFLAGS) -o xmas xmas.o $(LIBCURSES)
-	$(COFF2EXE) xmas
+	$(LINK) $(LDFLAGS) -o xmas.exe xmas.o $(LIBCURSES)
 	strip $@@


--- dos/pdckbd.c.ori	2002-09-01 00:13:30.000000000 -0800
+++ dos/pdckbd.c	2004-01-19 20:30:02.000000000 -0800
@@@@ -362,7 +362,7 @@@@
 		return ((int) (0xb8 << 8));
 	if (ascii == 0xe0 && scan == 0x53 && pdc_key_modifiers & PDC_KEY_MODIFIER_SHIFT) /* Shift Del */
 		return ((int) (0xb9 << 8));
-	if (ascii == 0x00 || ascii == 0xe0)
+	if (ascii == 0x00 || (ascii == 0xe0 && scan != 0x00))
 		return ((int) (scan << 8));
 	return ((int) (ascii));
 }
@@@@ -522,7 +522,7 @@@@
 		_watch_breaks();
 #else
 # ifdef GO32
-	(void*)signal(SIGINT,(setting ? SIG_DFL : SIG_IGN));
+/*	(void*)signal(SIGINT,(setting ? SIG_DFL : SIG_IGN)); */
 /*	__djgpp_set_ctrl_c(setting);*/
 	setcbrk(setting);
 # else
--- pdcurses/kernel.c.ori	2002-11-27 03:24:32.000000000 -0800
+++ pdcurses/kernel.c	2003-12-13 21:22:38.000000000 -0800
@@@@ -27,6 +27,10 @@@@
 #include <memory.h>
 #endif

+#ifdef HAVE_STRING_H
+#include <string.h>
+#endif
+
 #ifdef UNIX
 #include <defs.h>
 #include <term.h>
--- pdcurses/pdcutil.c.ori	2001-01-10 00:27:22.000000000 -0800
+++ pdcurses/pdcutil.c	2003-12-13 21:24:58.000000000 -0800
@@@@ -49,7 +49,7 @@@@
 #  include <limits.h>
 #endif

-#ifdef STDC_HEADERS
+#if defined(STDC_HEADERS) || defined(HAVE_STRING_H)
 #  include <string.h>
 #endif

--- pdcurses/pdcwin.c.ori	2002-05-25 17:13:32.000000000 -0800
+++ pdcurses/pdcwin.c	2003-12-13 21:26:02.000000000 -0800
@@@@ -27,6 +27,10 @@@@
 # include <memory.h>
 #endif

+#ifdef HAVE_STRING_H
+#include <string.h>
+#endif
+
 #ifndef HAVE_MEMMOVE
 # define memmove PDC_memmove
 #endif

    If you wish to compile with SSL enabled, you need to get and compile
    OpenSSL. The DJGPP port has been successfully compiled with the
    development version of OpenSSL. DJGPP can compile OpenSSL from the
    standard source distribution (http://www.openssl.org/). See the file
    "INSTALL.DJGPP" in the OpenSSL distribution.

    If you have trouble applying the patches, try using the "patch" program,
    ("http://www.delorie.com/pub/djgpp/current/v2gnu/pat261b.zip").
    To read the Unix man style documentation, use, for example, "less"
    ("http://www.delorie.com/pub/djgpp/current/v2gnu/lss374b.zip").
    Compile or place your compiled PDCurses library in /djgpp/pdcur26, and
    compile or place your compiled WATT-32 library in /djgpp/watt32.  If
    using the SLANG library, put libslang.a in your DJGPP/lib directory and put
    slang.h in your DJGPP/include directory, or in the appropriate directories
    specified by LIBRARY_PATH and INCLUDE_PATH in your DJGPP.ENV file.

    Move to the "lynx2-*/WWW/Library/djgpp" directory.  If compiling with
    PDCurses, do "make".  If using SLANG, do "make -f makefile.sla".  This
    should compile libwww.a.  Next move to the "lynx2-*/src/chrtrans" directory
    and do "make -f makefile.dos" to compile the character tables.  Then move
    to the "lynx2-*/src" directory.  There are three choices for compiling at
    this point.  You can do "make -f makefile.dos" to compile with PDCurses,
    "make -f makefile.wsl" to compile with SLANG, or "make -f makefile.dsl" to
    compile with SLANG and the DJGPP keyhandler.  At the time of this writing,
    it is not clear what the advantages and disadvantages of each version are.
    The PDCurses version has the most experience and allows remapping of ALT
    and Function keys.  The SLANG version seems to have better screen handling.
    It allows mapping of function keys, but not ALT keys.  The SLANG with DJGPP
    keyhandler allows mapping of ALT and Function keys, but has the risk of
    incompatibilities from mixing different programs.

    If you wish to compile with support for internationalization of messages,
    you first need to install the DOS ports of the GNU gettext and libiconv
    packages, available from any DJGPP mirror site.  Then uncomment the lines
    for INTLFLAGS in src/makefile.dsl and in WWW/Library/djgpp/makefile.sla,
    and remove the "#" from the LIBS line in src/makefile.dsl.  Make similar
    changes if using one of the other DOS makefiles.  See the gettext
    documentation for information on creating and using message files for
    different languages.

    If all goes well, you will have a lynx.exe file.  If you have trouble,
    check to be sure djgpp.env is the way it came in the original package.

    To test Lynx_386 you must have a packet driver installed. The simplest
    method is to use a null packet driver that just allows Lynx to start
    up, but doesn't do anything else. One such executable driver has been
    posted, uuencoded, to the lynx-dev mailing list in January 1998,
    but is corrupted in the mailing list archive. You can get this at
    "http://www.ncf.ca/ncf/pda/computer/dos/net/nullpkt.zip". Start the
    dummy packet driver with "nullpkt 0x60", and take it out of memory with
    "nullpkt -u". You can also use slip8250.com. See the CRYNWR package
    "ftp://ftp.simtel.net/pub/simtelnet/msdos/pktdrvr/pktd11.zip". Usage
    is "slip8250 0x60", but you may have to invoke it as, for example,
    "slip8250 0x60 6 3 0x2F8" so that it uses COM2 and IRQ 3, in order to
    avoid an IRQ conflict with a mouse or some other device. Another packet
    driver is slipper.exe, which is available from many sites, including
    "http://www.cavazza.it/file/bbs/intsoft/slippr15.zip". To remove it from
    memory use termin.com (usage "termin 0x60"), available in the CRYNWR
    package. To connect over a dialup PPP connection you need dosppp or klos'
    pppshare. (Find at:
    "http://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/net/dosppp/dosppp06.zip"
    "http://www.ncf.carleton.ca/ncf/pda/computer/dos/net/dosppp06.zip"
    "http://www.cavazza.it/file/bbs/intsoft/dosppp06.zip"
    "http://www.cavazza.it/file/bbs/intsoft/pppshare.exe")

    File access looks like this:

    file:///c:/
    file:///c:/dos
    file:///c:/dos/command.com
    file://localhost/c:/
    file://localhost/c:/dos
    file://localhost/c:/dos/command.com

    See "http://www.fdisk.com/doslynx/lynxport.htm" for more hints and
    some precompiled libraries. One problem you can encounter is editing
    userdefs.h and lynx.cfg, which have unix-style end of lines. You would
    be well advised to use an editor that can handle end of lines terminated
    with a single LF character. You can also unpack the source code using
    unzip386 or unzip with the -a or -aa switch to convert unix LF to dos CRLF.
    That will make texts more readable under DOS. If you compile lynx
    regularly, you may automate the procedure by creating a batch file such
    as the following.

	cd djgpp\watt32\src
	configur djgpp
	make -f djgpp.mak
	cd ..\..\..\www\library\djgpp
	make
	cd ..\..\..\src\chrtrans
	make -f makefile.dos
	cd ..\..\src
	make -f makefile.dos
	strip lynx.exe
	cd ..

    This batch file expects the DJGPP port of WATT-32 to be installed in the
    lynx2-* directory.  Place a copy of this batch file, named "djgpp.bat",
    in the lynx2-* directory, move to that directory and type "djgpp".  A more
    complete batch file with error checking and annotation can be found at:
    "http://lists.nongnu.org/archive/html/lynx-dev/1997-11/msg00250.html".

    If you use the configure method, remember that if you configure with
    the option "--enable-nls", you also need to set LIBS="-liconv". A
    sample shell script to run configure using PDCurses follows. If you
    compile to use SLANG, note that the DJGPP keyhandler will be used
    instead of the SLANG keyhandler unless you define "NO_DJ_KEYHANDLER".

    #!/bin/sh
    CFLAGS="-O2 -I/djgpp/pdcur26 -I/djgpp/watt32/inc" \
    LIBS="-L/djgpp/pdcur26/lib -L/djgpp/watt32/lib -liconv" \
    ./configure --prefix=d:/djgpp/lynx-rel/lynx-cnf \
    --with-screen=curses \
    --disable-full-paths \
    --enable-addrlist-page \
    --enable-change-exec \
    --enable-cgi-links \
    --enable-charset-choice \
    --enable-color-style \
    --enable-exec-links \
    --enable-externs \
    --enable-file-upload \
    --enable-nested-tables \
    --enable-nls \
    --sysconfdir=d:/djgpp/lynx-rel/lynx-cnf \
    --with-bzlib \
    --with-zlib \
    --with-ssl

-- 1997/9/29 - D. Kaufman <dkaufman@@rahul.net>
-- 1997/10/3 - B. Schiavo <Wschiavo@@concentric.net>
-- Last update - 2010/11/27

-------------------------------------------------------------------------------

VI. General installation instructions

    Once you have compiled Lynx, test it out first on a local file.  Be sure
    Lynx can find lynx.cfg.  A _sample_ test command line would be:
    'lynx -cfg=/usr/local/lib/lynx.cfg .'.  Once you are satisfied that
    Lynx works, go ahead and install it.  For Unix, type "make install".

    For VMS, you need to have the executable in a public place, make it
    accessible, define it as a foreign command, and copy lynx.cfg to
    "Lynx_Dir".  Look at lynx.com in the samples directory as a model for
    installing Lynx.  To include lynx.hlp in the system HELP library, use
    the command: "$ library/replace sys$help:helplib.hlb lynx.hlp".

    Local copies of the Lynx online help should be made accessible in response
    to the Lynx 'h'elp command by defining HELPFILE in userdefs.h and/or
    lynx.cfg to an appropriate file://localhost/path URL.  On Unix, all you
    need to do is type "make install-help."  If you are installing manually,
    copy the files "COPYHEADER" and "COPYING" into the lynx_help directory
    BEFORE moving the lynx_help tree to its final location.  These files are
    referenced hypertextually from help documents.

    If you have old, pre-existing bookmark files from earlier versions of
    Lynx, those files may have to be updated.  Conversion may just consist
    of adding one META line near the top, or may require creating new book-
    mark files and editing in bookmarks from outdated files.

    IMPORTANT!  Be sure you have read the warnings about setting up an
    anonymous account with Lynx if you plan to give public access to Lynx.

    After applying patches or editing files to correct for an unsuccessful
    build, be certain to do a "make clean" (or "make distclean" for those
    using auto-configure) before attempting to compile again.

-------------------------------------------------------------------------------

VII. Setting environment variables before running Lynx (optional)

1. All ports

   The Lynx Users Guide describes all of the environment variables used by
   Lynx.  This should be checked later along with reading lynx.cfg after you
   have installed Lynx.

2. Win32 (95/98/NT) and 386 DOS

    These ports cannot start before setting certain environment variables.
    Here are some environment variables that should be set, usually in a
    batch file that runs the lynx executable.  Make sure that you have enough
    room left in your environment.  You may need to change your "SHELL="
    setting in config.sys.  In addition, lynx looks for a "SHELL" environment
    variable when shelling to DOS.  If  you wish to preserve the environment
    space when shelling, put a line like this in your AUTOEXEC.BAT file also
    "SET SHELL=C:\COMMAND.COM /E:4096".  It should match CONFIG.SYS.

    HOME         Where to keep the bookmark file and personal config files.
    TEMP or TMP  Bookmarks are kept here with no HOME.  Temp files here.
    USER         Set to your login name (optional)
    LYNX_CFG     Set to the full path and filename for lynx.cfg
    LYNX_LSS     Set to the full path and filename for lynx.lss
    LYNX_SAVE_SPACE  The (modifiable) location for downloaded file storage.
    SSL_CERT_FILE Set to the full path and filename for your file of trusted
                  certificates

    386 version only:
    WATTCP.CFG   Set to the full path for the WATTCP.CFG directory
    RL_CLCOPY_CMD Command to copy a URL to a "clipboard" file
    RL_PASTE_CMD  Command to go to a URL in your "clipboard" file

    Define these in your batch file for running Lynx.  For example, if your
    application line is "D:\win32\lynx.bat", lynx.bat for Win32 may look like:
	@@ECHO OFF
	set home=d:\win32
	set temp=d:\tmp
	set lynx_cfg=d:\win32\lynx.cfg
	set lynx_save_space=d:\download
	d:\win32\lynx.exe %1 %2 %3 %4 %5

    For lynx_386, a typical batch file might look like:

	@@echo off
	set HOME=f:/lynx2-8
	set USER=your_login_name
	set LYNX_CFG=%HOME%/lynx.cfg
	set WATTCP.CFG=%HOME%
	f:\lynx2-8\lynx %1 %2 %3 %4 %5 %6 %7 %8 %9

    You need to make sure that the WATTCP.CFG file has the correct information
    for IP number, Gateway, Netmask, and Domain Name Server.  This can also be
    automated in the batch file.

    Adapted from "readme.txt" by Wayne Buttles and "readme.dos" by Doug
    Kaufman.

VIII. Acknowledgment

   Thanks to the many volunteers who offered suggestions for making this
   installation manual as accurate and complete as possible.

-- 1999/04/24 - H. Nelson <lynx-admin@@irm.nara.kindai.ac.jp>
-- vile:txtmode
-- $LynxId: INSTALLATION,v 1.123 2014/01/09 20:07:01 tom Exp $
@


1.7
log
@update to lynx 2.8.8rel2, keeping local changes. primarily to get these
changes from 2.8.8dev.16:

* fix most issues found by clang 3.2 analyze
* fix most issues found by Coverity scan

tested on i386, sparc64, and macppc by myself.
tested on vax by miod@@ (including https)
helpful discussion with avsm@@, sthen@@

ok deraadt@@
@
text
@@


1.6
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@d28 2
d99 2
d181 1
a181 1
	Defines the location where you want the documentation files installed. 
d187 5
a191 1
  --disable-alt-bindings 		(prevent defining EXP_ALT_BINDINGS)
d308 6
d319 1
a319 1
  --disable-justify-elts		(define EXP_JUSTIFY_ELTS)
d327 4
d350 5
a354 6
	Use this option to tell configure whether to compile-in support for
	saving cookies to a file, for subsequent reuse.  Persistent cookie
	support will use (or create) the file specified by the 'COOKIE_FILE'
	option, or default to ".lynx_cookies" in the home directory.
	(Currently there is no protection against conflict if several lynx
	sessions are active from the same account).
d357 9
a365 3
	Use this option to compile-in support for colorizing the source view of
	HTML pages.  If compiled-in, new source view mode is available with
	-prettysrc command line option.
d368 1
a368 1
	Enhance the read-progress message to show ETA (estimated time to
d372 19
d392 1
a392 1
	Use this option to compile-in support for caching HTML pages locally,
d401 1
a401 5
  --enable-addrlist-page		(define EXP_ADDRLIST_PAGE)
	Compiles-in an alternative list-page, bound to 'A' rather than 'l',
	which always lists URLs rather than titles.

  --enable-ascii-ctypes			(define EXP_ASCII_CTYPES)
d414 1
a414 1
  --enable-charset-choice		(define EXP_CHARSET_CHOICE)
d467 1
a467 1
  --enable-internal-links		(prevent defining DONT_TRACK_INTERNAL_LINKS)
d497 1
a497 5
  --enable-locale-charset		(define USE_LOCALE_CHARSET)
  	Use nl_langinfo(CODESET) to determine initial value for display
	charset, overrides character_set value in .lynxrc file.

  --enable-nested-tables
a507 20
  --enable-progressbar			(define USE_PROGRESSBAR)
	Compile-in support for a "progress bar" which displays at the bottom
	of the screen when doing downloads and other time-consuming (but
	interruptible) processes.  This feature can be selected in the
	options menu.

  --enable-scrollbar			(define USE_SCROLLBAR)
	Compile-in support for scrollbar on the right-margin of the screen. 
	If you configure with ncurses, this works with the mouse on xterm,
	etc.

  --enable-session-cache		(define USE_CACHE_JAR)
	Use this option to compile-in experimental support for
	saving/restoring session information in files.  Configurable from
	lynx.cfg

  --enable-sessions			(define USE_SESSIONS)
	Compile-in experimental support for sessions, which allow the user
	to automatically save and restore history information.

d521 3
d589 8
a596 1
	line.
d739 3
d828 1
d922 1
d927 53
d981 4
d988 1
a988 1
    library.  Get pdcurses2.3 from "http://www.lightlink.com/hessling/".  I
d991 1
a991 1
    "http://www.gzip.org/zlib/ ".  Compile these libraries, and
d1011 3
d1045 2
d1091 1
a1091 1
	    http://www.gzip.org/zlib/
d1099 2
a1100 2
    "http://www.bgnett.no/~giva/".  You can also use slang (available at
    "http://www.s-lang.org/") as your screen library.  You must
d1232 1
a1232 1
    0.9.7 stable series of OpenSSL. DJGPP can compile OpenSSL from the
a1235 1

d1237 1
a1237 1
    ("http://www.delorie.com/pub/djgpp/current/v2gnu/pat253b.zip").
d1243 2
a1244 3
    slang.h and slcurses.h in your DJGPP/include directory, or in the
    appropriate directories specified by LIBRARY_PATH and INCLUDE_PATH in your
    DJGPP.ENV file.
d1273 12
a1284 11
    To test Lynx_386 you must have a packet driver installed.  The simplest
    method is to use a null packet driver that just allows Lynx to start up,
    but doesn't do anything else.  One such executable driver has been posted,
    uuencoded, to the lynx-dev mailing list:
    "http://www.flora.org/lynx-dev/html/month011998/msg00057.html".
    Start the dummy packet driver with "nullpkt 0x60", and take it out of
    memory with "nullpkt -u".  You can also use slip8250.com.  See the CRYNWR
    package "ftp://ftp.simtel.net/pub/simtelnet/msdos/pktdrvr/pktd11.zip".
    Usage is "slip8250 0x60", but you may have to invoke it as, for example,
    "slip8250  0x60 6 3 0x2F8" so that it uses COM2 and IRQ 3, in order to
    avoid an IRQ conflict with a mouse or some other device.  Another packet
d1286 4
a1289 4
    "ftp://ftp.trumpet.com.au/slipper".  To remove it from memory use
    termin.com (usage "termin 0x60"), available in the CRYNWR package.  To
    connect over a dialup PPP connection you need dosppp or klos' pppshare.
    (Find at:
d1292 2
a1293 3
    "http://mvmpc200.ciw.uni-karlsruhe.de/~mvmpc9/user/TONI/dosppp/dosppp06.zip"
    "ftp://ftp.oldskool.org/pub/tvdog/internet/dosppp06.zip";
    "ftp://ftp.klos.com/pub/demo/pppshare.exe")
d1330 1
a1330 1
    "http://www.flora.org/lynx-dev/html/month111997/msg00250.html".
d1361 1
a1361 1
-- Last update - 2004/01/19
d1363 1
d1398 1
d1465 1
a1465 1
-- $LynxId: INSTALLATION,v 1.106 2008/12/31 21:37:07 tom Exp $
@


1.5
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d140 5
a144 4
    ncurses, some will be less satisfactory.  Versions of ncurses before 1.9.9g
    will not render color properly.  Some other versions of curses do not
    display color at all.  Likewise, lynx may not build with old versions of
    slang, e.g., before 0.99-38, because slang's interfaces change periodically.
d308 1
a308 1
  --disable-largefiles			(prevent defining LONG_LIST)
d363 5
d418 4
d442 1
a442 1
	use experimental IPV6 (with IPV4) logic.
d454 4
a457 3
  --enable-libjs			(define EXP_LIBJS)
  	Disabled by default; used for ifdef'ing JavaScript interface.
	Currently dummy: no JavaScript support implemented in Lynx yet.
d459 1
a459 1
  --enable-locale-charset		(define EXP_LOCALE_CHARSET)
d474 6
d481 12
a492 3
	Compile-in experimental support for scrollbar on the right-margin of
	the screen.  If you configure with ncurses, this works with the mouse
	on xterm, etc.
d529 36
d581 7
d591 1
a591 1
  --with-gnutls[=XXX]			(define USE_SSL)
d601 2
d617 4
d631 23
d709 5
a713 5
    --with-build-cc=XXX
	If cross-compiling, specify a host C compiler, which is needed to
	compile a utility which generates tables for lynx.
	If you do not give this option, the configure script checks if the
	$BUILD_CC variable is set, and otherwise defaults to gcc or cc.
d715 2
a716 2
    --with-build-cpp=XXX
	This is unused by lynx.
d718 4
a721 24
    --with-build-cflags=XXX
	If cross-compiling, specify the host C compiler-flags.  You might need
	to do this if the target compiler has unusual flags which confuse the
	host compiler.

    --with-build-cppflags=XXX
	If cross-compiling, specify the host C preprocessor-flags.  You might
	need to do this if the target compiler has unusual flags which confuse
	the host compiler.

    --with-build-ldflags=XXX
	If cross-compiling, specify the host linker-flags.  You might need to
	do this if the target linker has unusual flags which confuse the host
	compiler.

    --with-build-libs=XXX
	If cross-compiling, the host libraries.  You might need to do this if
	the target environment requires unusual libraries.

  --with-bzlib				(define USE_BZLIB)
	Use libbz2 for decompression of some bzip2 files.

  --with-zlib				(define USE_ZLIB)
	Use zlib for decompression of some gzip files.
d780 9
a788 8
    CPPFLAGS in this example defines the full path to the slang and zlib header
    files, which are not kept in standard directories.  Likewise, LIBS defines
    the nonstandard locations of libslang.a and libz.a.  Setting the option
    --bindir tells the configure script where I want to install the lynx
    binary; setting --mandir tells it where to put the lynx.1 man page, and
    setting --sysconfdir tells it (while at the same time defining LYNX_CFG_FILE)
    where to put the configuration file "lynx.cfg", when I type "make install".
    The --with-screen=slang and --with-zlib options are explained above.
d792 8
a799 7
    "ftp://ftp.cnidr.org/pub/NIDR.tools/freewais", and compile it.  The compile
    process will create the libraries you will need, wais.a and client.a.  Edit
    the Makefile in the top level directory and add the library locations under
    the DIRECT WAIS ACCESS heading.  Edit the Makefile for the WWW Library in
    "WWW/Library/Implementation/makefile" to point to the include
    directory for the freewais distribution.  Precompiled libraries are
    available for many platforms if you don't wish to compile one yourself.
d1364 2
a1365 1
    Adapted from "readme.txt" by Wayne Buttles and "readme.dos" by Doug Kaufman.
d1373 2
@


1.4
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d36 1
a36 1
  (e.g. with UNIX or Cygwin), its location is best set with --libdir ;
d175 7
d189 9
a269 3
  --disable-ftp				(define DISABLE_FTP)
	Do not compile-in code used to connect to FTP servers.

d276 2
a277 2
  --disable-gopher			(define DISABLE_GOPHER)
	Do not compile-in code used to connect to GOPHER servers.
d296 3
d304 8
d362 4
a369 4
  --enable-cgi-links			(define LYNXCGI_LINKS)
	Allows lynx to access a cgi script directly without the need for
	a http daemon.

a378 5
  --enable-color-style			(define USE_COLOR_STYLE)
  	Use this option to enable optional and *experimental* color style.
	This is implemented for curses (if it supports color), ncurses and
	PDCurses, but not slang.

a418 6
  --enable-ipv6         		(define ENABLE_IPV6)
	use experimental IPV6 (with IPV4) logic.

  --enable-justify-elts			(define EXP_JUSTIFY_ELTS)
	use experimental element-justification logic.

d431 6
d481 8
a488 1
  --libdir				(affect LYNX_CFG_FILE)
d491 1
a491 1
	with the $libdir environment variable.  (For platforms which do not
d495 8
d507 5
d541 9
d571 1
a571 1
	version of ncurses.
d611 28
d699 1
a699 1
		--mandir=$HOME/.usr/man --libdir=$HOME/.usr/lib \
d707 1
a707 1
    setting --libdir tells it (while at the same time defining LYNX_CFG_FILE)
d1185 1
a1185 1
    --libdir=d:/djgpp/lynx-rel/lynx-cnf \
@


1.3
log
@Update to lynx-2.8.4-rel1, patchset d, now with IPv6 as well

Local patches we maintain to the distribution are:
- replace unbounded fscanf with fgets (avsm)
- spelling fixes (deraadt)
- hppa -O0 workaround (mickey)
- default to ftp passive (deraadt)
- work with non-exec scripts (deraadt,hin,maja)
- be more careful with rlogin username (art)
- default to our webpage (deraadt)
- install helpfiles locally (maja)
- mkdtemp temp space directory (art)
- install more recent config.guess (avsm)

Tested by beck,millert,grange,fries,miod and others, deraadt@@ ok
@
text
@d248 3
d306 1
a306 1
  --disable-persistent-cookies		(prevent defining EXP_PERSISTENT_COOKIES)
d314 14
d365 2
a387 3
  --enable-file-upload			(define EXP_FILE_UPLOAD)
	Compile-in support for form-based file-upload.

d429 4
a443 10
  --enable-prettysrc			(define USE_PRETTYSRC)
	Use this option to compile-in support for colorizing the source view of
	HTML pages.  If compiled-in, new source view mode is available with
	-prettysrc command line option.

  --enable-read-eta			(define EXP_READPROGRESS)
	Enhance the read-progress message to show ETA (estimated time to
	completion), as well as the amount of time stalled without any data
	transferred.

a448 4
  --enable-source-cache			(define SOURCE_CACHE)
	Use this option to compile-in support for caching HTML pages locally,
	in files or in memory.	Configurable from lynx.cfg

a468 3
  --with-catgets
	use catgets functions if available.  See "--enable-nls".

d473 20
d494 7
a500 2
	use the GNU gettext library included here (default).  See
	"--enable-nls".
d509 5
a513 5
	Use this option to select the screen type.  The option value,
	XXX must be one of curses (the default), ncurses, pdcurses or slang.
	Specifying a screen type causes the configure script to look in
	standard locations for the associated header and library files,
	unless you have preset the $CFLAGS and $LIBS variables.
d515 1
d517 1
d522 6
a527 1
	the curses library.
d563 3
d802 23
a824 11
    Compiling for DOS with DJGPP is a multistep procedure. First install
    the C compiler and its libraries (see readme.1st from DJGPP distribution).

    Originally, lynx makefiles come with the initial -O2 optimization level. 
    If you experience compilation process too slow due to paging to the disk
    (DPMI server provide virtual memory, when in lack of RAM), you may change
    optimization to -O1 or turn the optimization off entirely.

    Alternatively, to get the last bit of run-time performance you may try
    -O2 or -O3, in this case you may need to "stubedit" your "cc1.exe" file
    to enlarge compiler stack size.  If using DJGPP 2.02 and GCC 2.8.1,
d826 2
a827 2
    a larger stack. To do this go into  djgpp\lib\gcc-lib\djgpp\2.81
    and either type the command:
d829 2
a830 4
    or edit interactively with: "stubedit cc1.exe".
    The requirements for compiling with optimization using DJGPP 2.03
    and GCC 2.95.2 have not yet been fully investigated. The above
    should serve as a guide.
d844 1
a844 1
	    http://www.gzip.org/zlib/ 
d850 1
a850 1
    "http://www.lightlink.com/hessling/") and the DJGPP port of WATTCP.  The
d853 2
a854 2
    "ftp://space.mit.edu/pub/davis/slang") as your screen library.  You must
    compile these before you go any further.  If you wish to use PDCurses 2.4,
d857 131
a987 20
    --- dos/pdckbd.c.ori	Sun Dec 26 23:15:04 1999
    +++ dos/pdckbd.c	Fri Mar  3 00:20:14 2000
    @@@@ -336,7 +336,7 @@@@
     	||  (scan == 0x4e && ascii == 0x2b)  /* Plus */
     	||  (scan == 0xe0 && ascii == 0x2f)) /* Slash */
     		return ((int) ((ascii & 0x0f) | 0xf0) << 8);
    -	if (ascii == 0x00 || ascii == 0xe0)
    +	if (ascii == 0x00 || (ascii == 0xe0 && scan != 0x00))
     		return ((int) (scan << 8));
     	return ((int) (ascii));
     }
    @@@@ -496,7 +496,7 @@@@
     		_watch_breaks();
     #else
     # ifdef GO32
    -	(void*)signal(SIGINT,(setting ? SIG_DFL : SIG_IGN));
    +/*	(void*)signal(SIGINT,(setting ? SIG_DFL : SIG_IGN)); */
     /*	__djgpp_set_ctrl_c(setting);*/
     	setcbrk(setting);
     # else
d989 3
a991 2
    If you have trouble applying the patch, try using the "patch" program,
    ("ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/pat253b.zip").
d993 3
a995 3
    ("ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/lss358b.zip").
    Compile or place your compiled PDCurses library in lynx2-*/curses, and
    compile or place your compiled WATT-32 library in lynx2-*/djgpp/watt32.  If
d1040 1
a1040 1
    "ftp://jazz.trumpet.com.au/slipper".  To remove it from memory use
d1044 3
a1046 2
    "http://mvmpc9.ciw.uni-karlsruhe.de/c:/user/toni/dosppp/dosppp06.zip",
    "http://personal.redestb.es/tonilop/dosppp/dosppp06.zip", or
d1048 1
a1048 1
    "http://www.klos.com/get.pppshare.html")
a1057 1
    file://localhost/dev/c/dos/command.com
d1087 27
d1116 1
a1116 1
-- Last update - 2001/07/12
d1176 1
d1178 2
d1183 2
@


1.2
log
@Upgrade to Lynx 2.8.2. -moj
@
text
@d28 1
d30 1
a30 1
I. General configuration instructions (all ports).
d32 2
a33 52
Step 1. (define compile-time variables  -- See the userdefs.h file.)
    There are a few variables that MUST be defined, or Lynx will not build.
    There are a few more that you will probably want to change.  The variables
    that must be changed are marked as such in the userdefs.h file.  Just edit
    this file, and the changes should be straight forward.  If you compile
    using autoconfigure, you can set most defines with option switches and do
    not absolutely have to edit userdefs.h.  Many of the variables are now
    configurable in the lynx.cfg file, so you may set them at run-time if you
    wish.  Lynx implements Native Language Support.  Read "ABOUT-NLS" if you
    want to build an international version of Lynx or tailor the statusline
    prompts, messages and warnings to the requirements of your site.

Step 2. (define run-time variables -- See the lynx.cfg file for details.)
    Set up local printers, downloaders, assumed character set, key mapping,
    and colors in the lynx.cfg file.  Please read "lynx.cfg" thoroughly as
    many of the features of Lynx, and how to use them, are explained.  Also
    see the example mime.types, mailcap and jumps files in the samples
    subdirectory.  Lynx MUST be able to find the lynx.cfg file at start-up.
    The location of the lynx.cfg file may be compiled in with the LYNX_CFG_FILE
    defined in userdefs.h (or with the configure option explained in the Unix
    section below), specified with an environment variable, LYNX_CFG, or
    specified with the "-cfg" command line option.

Step 3. (You may skip this step if you are not interested in any special
    characters and any local files or WWW pages you will view all use the
    ISO-8859-1 "ISO Latin 1" Western European character set.) People who
    will be running Lynx in an environment with different and incompatible
    character sets should configure CHARACTER_SET (the Display character set)
    and ASSUME_LOCAL_CHARSET to work correctly for them before creating
    bookmark files et cetera.  Read "lynx.cfg" for detailed instructions.
    Additional character sets and their properties may be defined with tables
    in the src/chrtrans directory, see the README.* files therein.

Step 4. (optional -- news for UNIX and VMS)
    Set NNTPSERVER in "lynx.cfg" to your site's NNTP server, or set the
    environment variable externally.  For news posting ability to be enabled
    in Lynx, the NEWS_POSTING symbol must be defined to TRUE in userdefs.h or
    lynx.cfg.  Also define LYNX_SIG_FILE in userdefs.h or lynx.cfg so that it
    points to users' signature files for appending to posted messages.

Step 5. (Anonymous account -- VERY IMPORTANT!!!!! -- )
    If you are building Lynx for your personal use only you may skip this
    step.  If you are setting up an anonymous account with Lynx, you are
    STRONGLY advised to use the -anonymous command line option.  If you do
    not use this option, users may be able to gain access to all readable
    files on your machine!  ALSO NOTE that many implementations of telnetd
    allow passing of environment variables, which might be used by
    unscrupulous people to modify the environment in anonymous accounts.
    When making Web access publicly available via anonymous accounts intended
    to run Lynx captively, be sure the wrapper uses the -cfg and -homepage
    switches to specify the configuration and start files, rather than relying
    on the LYNX_CFG, LYNX_CFG_FILE, or WWW_HOME variables.
d35 61
d99 1
a99 1
1a. Auto-configure.  The auto-configure script uses autoconf2.12 to generate a
d126 3
d132 1
a132 1
    have either "ncurses" ("ftp://ftp.clark.net/pub/dickey/ncurses") or "slang"
d146 1
a146 1
	http://www.clark.net/pub/dickey/ncurses/ncurses.faq.html
d151 2
a152 2
	AIX 3.2.5 (cc w/ curses)	CLIX (cc w/ curses & ncurses)
	DGUX
d154 1
a154 1
	FreeBSD 2.1.5 (gcc 2.6.3 w/ curses & ncurses)
d160 2
a161 2
	OS/2 EMX 0.9b (ncurses) 	SCO (cc w/ curses)
	Solaris 2.5 & 2.6 (cc & gcc w/ curses, ncurses & slang)
a168 4
    NOTE:  Ncurses 4.2 builds/works on OS/2; however you should get at least
    the post-4.2 patches from October 1998, since that supports mouse and
    screen sizes other than 25x80.  (ftp://ftp.clark.net/pub/dickey/ncurses/)

d175 1
a175 1
  --disable-alt-bindings 		(define EXP_ALT_BINDINGS)
d179 3
d183 4
a186 3
  	Use this option to disable the browsable configuration information
	(screens that show the result of the configuration script, as well
	as a pointer to the lynx.cfg file).
d188 1
a188 1
  --disable-dired			(define DIRED_SUPPORT)
d199 4
a202 3
	you must disable DirEd with this option.  You can also disable some
	DirEd functions while allowing others.  If you have disabled DirEd
	completely, you can ignore all the other DirEd options.
d204 2
a205 2
	All DirEd functions that were enabled on compilation can be disabled
	or modified at run time via DIRED_MENU symbols in lynx.cfg.
d207 1
a207 1
  --disable-dired-archive		(define ARCHIVE_ONLY)
d215 2
a216 3
	Lynx users can customize their keymaps by creating private
	versions of lynx.cfg and modifying them to override the default
	keymap.  Use this option to prevent DirEd keymap overriding.
d252 1
a252 1
	Do not compile-in code used to connect to "ftp" URLs.
d255 4
a258 5
	Disable the forms-based options screen.  (See --disable-menu-options).
	Please note that a few users with broken curses may have problems with
	popup forms fields.  The default behaviour is to compile both forms and
	menu options code with FORMS_OPTIONS switch in lynx.cfg, or
	-forms_options command-line switch.
d264 15
a278 2
  	Use this option to control whether full utility pathnames are used.
	By default, configure substitutes full pathnames.
d290 2
a291 5
	Disable the menu-style options screen.  (See --disable-forms-options).
	Please note that a few users with broken curses may have problems with
	popup forms fields.  The default behaviour is to compile both styles
	options menu code with FORMS_OPTIONS switch in lynx.cfg, or
	-forms_options command-line switch.
d294 1
a294 1
	Do not compile-in code used to connect to NEWS servers.
d299 1
a299 1
  --disable-partial			(define DISP_PARTIAL)
d303 1
a303 1
  --disable-persistent-cookies		(define EXP_PERSISTENT_COOKIES)
d305 5
a309 4
	saving cookies to a file, for subsequent reuse.  This creates the file
	specified by the 'COOKIE_FILE' option, or defaults to ".lynx_cookies"
	in the home directory.  (Currently there is no protection against
	conflict if several lynx copies are active from the same account).
d321 4
d329 9
d340 2
a341 1
	(Also defines USE_HASH, LINKEDSTYLES)
d344 4
a347 1
  	Use this option to compile-in support for debugging.
d369 3
d380 21
a400 4
  --enable-internal-links		(define DONT_TRACK_INTERNAL_LINKS)
	Disabled by default, this option allows tracking of internal links,
	a feature which could, however, compromise a secure transaction by
	forcing inappropriate resubmission of form content.
d411 1
d413 5
a417 1
  --enable-nls
d424 14
a437 3
  --enable-prettysrc			(define USE_PSRC)
	Use this option to compile-in support for colorizing the source
	view of HTML pages.
d449 4
d466 4
d482 1
a482 1
	XXX must be one of curses (the default), ncurses or slang.
d490 5
a494 1
  --with-socks				(define SOCKS)
d497 6
a502 1
  --with-socks5				(define USE_SOCKS5, SOCKS)
d505 5
d511 16
a526 7
        servers.  Also, instead of SOCKSifying lynx for use behind a firewall,
        you are better off if you make it normally, and set it up to use a
        proxy server.  You can SOCKSify the proxy server, and it will handle
        all clients, not just Lynx.  If your SOCKS server was compiled to use
        the short version of Rbind, also include -DSHORTENED_RBIND in your
        SITE_LYDEFS and SITE_DEFS.  If you do SOCKSify lynx, you can turn off
        SOCKS proxy usage via a -nosocks command line switch.
d558 7
d603 1
a603 1
    "WWW/Library/Implementation/CommonMakefile" to point to the include
d626 3
a628 4
    If your system requires the PASV FTP code instead of the standard
    PORT FTP code (e.g., to deal with a firewall) then edit "WWW/Library/
    Implementation/HTFTP.c" and comment out line 43 like so:
	     /*  #define LISTEN   /* @@@@@@@@ Test LJM */.
d703 2
d711 1
a711 1
    "http://www.cdrom.com/pub/infozip/zlib/".  Compile these libraries, and
d719 1
a719 1
    First build the .h files in src\chrtrans using "MAKEW32.BAT".  Double
d723 1
a723 1
    the top directory and compile manually, i.e., do "make -f makefile.w32".
d732 4
a735 3
    It is possible to compile under the cygwin32 system, which will allow you
    to use the configure script described above for Unix.  Type, for example,
    "./configure --with-screen=slang --with-libz" in a Dos window running the
d737 17
a753 5
    slang.  See "http://www.flora.org/lynx-dev/html/month1097/msg00559.html"
    and "http://www.flora.org/lynx-dev/html/month1097/msg00186.html", and other
    messages along those threads.  You will have to make a minor alteration to
    HTTCP.c (change delay to 30 seconds) and modify HTFILE.c (concerning
    getgroups).  You will need a launch program to call helper applications.
d755 6
d765 13
a777 17
    the c compiler and its libraries. If using DJGPP 2.01, update the
    distribution with the patched lib.c, to take care of bug fixes. It is
    available at: "http://www.cartsys.com/eldredge/djgpp-patches.html".
    GCC 2.7.2.1, as distributed from the usual DJGPP archives, will not
    successfully compile lynx. You need to "stubedit" your "cc1.exe" file.
    The following parameters have worked successfully: minstack=800k,
    bufsize=64k. To accomplish this, move to the djgpp\bin directory
    and type the command:
    	"stubedit cc1.exe bufsize=64k minstack=800k".
    Or do it interactively with the command: "stubedit cc1.exe". (see
    "http://www.flora.org/lynx-dev/html/month0897/msg00145.html").

    If using DJGPP 2.02 and GCC 2.8.1, you may not need to "stubedit"
    cc1.exe if you use -O2 optimization, since cc1.exe comes with
    a 1536K stack. To compile with -O3 optimization, the stub
    needs to be edited to give a larger stack. To do this go into
    djgpp\lib\gcc-lib\djgpp\2.81 and either type the command:
d780 3
d789 1
a789 1
    Win95/NT DOS shell, be sure to unpack the source with a DOS program so
d795 2
a796 1
    zlib library.  Get the source from "http://www.cdrom.com/pub/infozip/zlib/"
d800 29
a828 43
    In addition to the files in the Lynx distribution, you will need a
    curses package and a TCP package. You can use PDCurses (available at
    "http://www.lightlink.com/hessling/") and the DJGPP port of WATTCP
    (available in two different versions at "ftp://neonatal.sm.med.ic.ac.uk/"
    and in "http://www.fdisk.com/doslynx/wlynx/source/djgpp.zip").
    A patched copy of the version from the neonatal site is also
    available from "http://www.rahul.net/dkaufman/tcplibdj.zip" or
    "ftp://ftp.rahul.net/pub/dkaufman/tcplibdj.zip". You can also use slang
    ("ftp://space.mit.edu/pub/davis/slang") as your curses library. You need
    to compile these before you go any further. If you wish to use PDCurses
    2.3, you need to first apply the following patch:

*** curses.h	Thu Jul  9 19:38:28 1998
--- curses.h.new	Sat Aug 15 11:02:08 1998
***************
*** 1802,1807 ****
--- 1802,1808 ----
  #define getbegx(w)              (w)->_begx
  #define getbegy(w)              (w)->_begy
  #define getbegyx(w,y,x)         ( y = (w)->_begy, x = (w)->_begx )
+ #define getbkgd(w)              ((w)->_bkgd)
  #define getch()                 wgetch(stdscr)
  #define getmaxx(w)              (w)->_maxx
  #define getmaxy(w)              (w)->_maxy
*** dos/pdckbd.c	Sat Jul 12 17:10:12 1997
--- dos/pdckbd.c.new	Thu Apr 15 20:52:16 1999
***************
*** 443,449 ****
  		_watch_breaks();
  #else
  # ifdef GO32
! 	(void*)signal(SIGINT,(setting ? SIG_DFL : SIG_IGN));
  /*	__djgpp_set_ctrl_c(setting);*/
  	setcbrk(setting);
  # else
--- 443,449 ----
  		_watch_breaks();
  #else
  # ifdef GO32
! /*	(void*)signal(SIGINT,(setting ? SIG_DFL : SIG_IGN)); */
  /*	__djgpp_set_ctrl_c(setting);*/
  	setcbrk(setting);
  # else
d831 1
a831 4
    ("http://www.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/pat25b.zip").  The
    WATTCP TCPLIB sources must also be patched prior to compilation.  See
    "http://www.flora.org/lynx-dev/html/month1197/msg00403.html".

d833 1
a833 1
    ("http://www.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/lss332b.zip").
d835 1
a835 1
    compile or place your compiled WATTCP library in lynx2-*/djgpp/tcplib.  If
d857 7
a863 7
    you first need to install the DOS port of the GNU gettext package,
    available from any DJGPP mirror site.  You may wish to recompile with DJGPP
    2.02.  Then uncomment the lines for INTLFLAGS in src/makefile.dsl and in
    WWW/Library/djgpp/makefile.sla, and remove the "#" from the LIBS line in
    src/makefile.dsl.  Make similar changes if using one of the other DOS
    makefiles.  See the gettext documentation for information on creating and
    using message files for different languages.
a866 2
    To compile lynx with DJGPP you may need about 20Mb of free disk space
    for virtual memory.
d872 1
a872 1
    "http://www.flora.org/lynx-dev/html/month0198/msg00057.html".
d875 1
a875 1
    package "http://www.simtel.net/pub/simtelnet/msdos/pktdrvr/pktd11.zip".
d886 2
a887 2
    "ftp://ftp.agate.net/users/01935/internet/dosppp06.zip";
    "ftp://ftp.klos.com/demo/pppshare.exe".)
d897 1
d899 13
a911 11
    See "http://www.fdisk.com/doslynx/lynxport.htm" for more hints and some
    precompiled libraries.  One problem you can run into is when editing
    userdefs.h and lynx.cfg, which have unix-style end of lines.  You would be
    well advised to use an editor that can handle end of lines terminated with
    a single LF character.  You can also unpack the source code using unzip386
    or unzip with the -a switch to convert unix LF to dos CRLF.  That will make
    texts more readable under DOS.  If you compile lynx regularly, you may
    automate the procedure by creating a batch file such as the following.

	cd djgpp\tcplib\obj
	make
d921 1
a921 1
    This batch file expects the DJGPP port of WATTCP to be installed in the
d925 1
a925 1
    "http://www.flora.org/lynx-dev/html/month1197/msg00250.html".
d929 1
d936 1
a936 1
    `lynx -cfg=/usr/local/lib/lynx.cfg .`.  Once you are satisfied that
d983 1
a983 1
    "SET SHELL=C:\COMMAND.COM /E:2048".  It should match CONFIG.SYS.
a992 1
    (Depending on how you compiled libtcp.a, you may have to use WATCONF.)
@


1.1
log
@Initial revision
@
text
@d4 23
a26 10
This file describes how to compile and install Lynx.  A description of
Lynx can be found in the README file.  Lynx has been ported to UN*X, VMS,
Win32 and 386DOS.  The procedures for compiling these ports are quite
divergent, and are detailed respectively in Sections II, III, IV and V.

First, however, you must configure Lynx for your system regardless of the
port you will be using.  Follow the instructions given immediately below to
configure for your system, and then go to the respective section concerning
the port you wish to compile.  General installation, problem solving, and
environment variables are covered in Sections VI and VII.
d31 1
a31 1
Step 1. (define compile-time variables -- See the userdefs.h file.)
d35 7
a41 8
    this file, and the changes should be straight forward.  Many of the
    variables in "userdefs.h" are now configurable in the lynx.cfg file, so
    you may set them at run-time if you wish.  If you compile using auto-
    configure, you would not absolutely need to edit "userdefs.h".  Check
    LYMessages_en.h for tailoring the Lynx statusline prompts, messages and
    warnings to the requirements of your site.  The strings in LYMessages_en.h
    may be translated into a language of your choice.  If you rename the file,
    be sure to change the definition in "userdefs.h".
d48 1
a48 1
    subdirectory.  Lynx must be able to find the lynx.cfg file at start-up.
d54 9
a62 10
Step 3. (You may skip this step if you only use English and are not
    interested in any special characters, or if your display and local files
    will all use the ISO-8859-1 "ISO Latin 1" Western European character set.)
    People who will be running Lynx in an environment with different and
    incompatible character sets should configure CHARACTER_SET (the Display
    character set) and ASSUME_LOCAL_CHARSET to work correctly for them before
    creating bookmark files et cetera.  Please read "lynx.cfg" for detailed
    instructions.  Additional character sets and their properties may be
    defined with tables in the src/chrtrans directory, see the README.* files
    therein.
d66 4
a69 7
    environment variable externally.  (See "VII. Setting environment
    variables before running Lynx" for help on setting this and other
    environment variables which affect Lynx.)  For news posting ability
    to be enabled in Lynx, in userdefs.h (and optionally in lynx.cfg) the
    NEWS_POSTING symbol must be defined to TRUE.  Also define LYNX_SIG_FILE
    in userdefs.h or lynx.cfg so that it points to users' signature files
    for appending to posted messages.
d71 1
a71 11
Step 5. (optional -- UNIX only)
    To add direct WAIS support, get the freeWAIS distribution from
    "ftp://ftp.cnidr.org/pub/NIDR.tools/freewais", and compile it.  The compile
    process will create the libraries you will need, wais.a and client.a.  Edit
    the Makefile in the top level directory and add the library locations under
    the DIRECT WAIS ACCESS heading.  Edit the Makefile for the WWW Library in
    "WWW/Library/Implementation/CommonMakefile" to point to the include
    directory for the freewais distribution.  Precompiled libraries are
    available for many platforms if you don't wish to compile one yourself.

Step 6. (Anonymous account -- VERY IMPORTANT!!!!! -- )
d73 1
a73 1
    step. If you are setting up an anonymous account with Lynx, you are
d79 4
a82 4
    When making Lynx and Web access publicly available via anonymous
    accounts intended to run Lynx captively, be sure the wrapper uses the
    -cfg switch to specify the startfile, rather than relying on the
    LYNX_CFG, LYNX_CFG_FILE, or WWW_HOME variables.
d101 1
a101 1
    
d106 1
a106 1
    
d124 9
d144 2
a145 1
	OS/2 EMX 0.9b			SCO (cc w/ curses)
d148 1
d154 4
d164 10
a173 1
  --disable-dired			(defines DIRED_SUPPORT)
d233 16
d253 5
d259 12
a270 1
  	Use this option to disable long "ls -l" directory listings.
d275 24
a298 3
  --enable-8bit-toupper			(define EXP_8BIT_TOUPPER)
	use experimental 8-bit case-conversion, e.g., for case-insensitive
	searches in non-ASCII character set.
d308 1
a308 1
  	enable use of default-color background (ncurses/slang).  Either
d310 10
a319 1
	this option.
d330 4
a333 1
        only.  *Use with discretion.*  See docs/README.chartrans.)
d340 13
d354 13
a366 1
	Use this option to allow NSL requests to be aborted at will.
d369 1
a369 1
	Use this option underline links rather than using boldface.
d381 13
d404 16
a419 1
   --with-zlib				(define USE_ZLIB)
d429 2
a430 1
		will try to use gcc.
a464 2
	setenv RESOLVLIB -lbind

d466 1
a466 2
	setenv CPPFLAGS "-SYSLOG_REQUESTED_URLS -I$HOME/slang \
		-I$HOME/.usr/include"
d472 3
a474 9
    The syntax for setting environment variables depends upon your shell.  I
    use the libbind.a resolver library, not libresolv.a.  Setting RESOLVLIB to
    -lbind defines this environment variable for `make', and thus must be set
    in the same shell that `make' will be run.  CPPFLAGS in this example
    predefines SYSLOG_REQUESTED_URLS for the configure script, since it is not
    defined by default, and has no option switch (see "docs/README.defines").
    CPPFLAGS also defines the full path to the slang and zlib header files,
    which are not kept in standard directories.  Likewise, LIBS defines the
    nonstandard locations of libslang.a and libz.a.  Setting the option
d481 9
a489 5
2. Manual compile
    If auto-configure does not work for you, or you prefer to compile
    Lynx manually, "docs/Makefile.old" will serve as a template for the
    top-level Makefile, and instructions on how to compile are given in
    "docs/INSTALLATION.old".
d513 1
a513 1
             /*  #define LISTEN   /* @@@@@@@@ Test LJM */.
d530 1
a530 1
           MULTINET (default)
d533 1
a533 1
           CMU_TCP
d586 1
a586 1
IV. Compile instructions -- Win32 (Windows95/NT)
d628 20
a647 9
    Compiling for DOS with DJGPP is a multistep procedure.  First install
    the c compiler and its libraries.  DJGPP, as distributed from the
    usual DJGPP archives, will not successfully compile lynx.  You need to
    "stubedit" your "cc1.exe" file.  The following parameters have worked
    successfully:  minstack=800k, bufsize=64k.  To accomplish this, move to
    the djgpp\bin directory and type the command:
        "stubedit cc1.exe bufsize=64k minstack=800k".
    Or do it interactively with the command: "stubedit cc1.exe".
    (see "http://www.flora.org/lynx-dev/html/month0897/msg00145.html").
d665 1
a665 1
    curses package and a TCP package.  You can use PDCurses (available at
d667 1
a667 1
    (available in two different versions at "ftp://neonatal.sm.ic.ac.uk/"
d669 45
a713 9
    You can also use slang ("ftp://space.mit.edu/pub/davis/slang") as your
    curses library.  It has not been fully ported to DOS yet, however.
    See "http://www.flora.org/lynx-dev/html/month1097/msg00390.html".  You
    need to compile these before you go any further. If you wish to use the
    beta version of PDCurses 2.3, you need to first apply a patch (available at
    "http://www.flora.org/lynx-dev/html/month0997/msg00441.html").  If you have
    trouble applying the patch, we recommend that you use the "patch" program,
    ("http://www.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/pat25b.zip").  To
    read the Unix man style documentation, use, for example, "less"
d716 29
a744 1
    compile or place your compiled WATTCP library in lynx2-*/djgpp/tcplib.
a745 4
    Move to the "lynx2-*/WWW/Library/djgpp" directory and do "make".  This
    should compile libwww.a.  Next move to the "lynx2-*/src/chrtrans"
    directory and do "make -f makefile.dos" to compile the character tables.
    Then move to the "lynx2-*/src" directory and do "make -f makefile.dos".
d748 2
d754 2
a755 2
    uuencoded, to the lynx-dev mailing list: "msg00031.html", "msg00057.html",
    and "msg00066.html" under "http://www.flora.org/lynx-dev/html/month0198/".
d766 14
a779 2
    (Find at "http://www.simtel.net/pub/simtelnet/msdos/pktdrvr/dosppp05.zip"
    and "ftp://ftp.klos.com/demo/pppshare.exe".)
d792 1
a792 1
	cd ..\..\www\library\djgpp
d796 1
a796 1
	cd ..\..\..\src
d813 4
a816 3
    Once you have compiled Lynx, test it out on "lynx_help/about_lynx.html".
    You shouldn't need to install Lynx to test it.  Once you are satisfied
    that it works, go ahead and install Lynx.  For Unix, type "make install".
d830 1
a830 2
    referenced hypertextually from help documents.  Find tips for installing
    the help files at "http://www.irm.nara.kindai.ac.jp/lynxdev/README.help".
a843 13
    If something doesn't work, or you can't get Lynx to even compile, or you
    don't understand what one of the defines means, read the PROBLEMS file,
    and the README.defines and *.announce files in the docs subdirectory.
    The docs/CHANGES* files record the entire development history of Lynx
    and are an invaluable resource for understanding how Lynx should perform.

    If you still have difficulties, send an email message to the Lynx-Dev
    mailing list (see the README file).  Try to include pertinent information
    about your system, the OS you are using, the name and version of your
    compiler, which curses library you are using and the compile-time errors.
    Be sure to say what version and image-number (alternately the top date
    of the CHANGES file) of Lynx you are trying to build.

d847 1
a847 111
1. Unix and VMS
    To set your site's NTTP server as the default host for news reading
    and posting via Lynx, set the environment variable NNTPSERVER so that
    it points to its Internet address.  The variable "NNTPSERVER" is used
    to specify the host which will be used as the default for news URLs.

	UNIX
		setenv NNTPSERVER "news.server.dom"

	VMS
		define/system NNTPSERVER "news.server.dom"

    The environment variables "ORGANIZATION" or "NEWS_ORGANIZATION", if set,
    will be used for the Organization: header in news postings.  (On Unix,
    Lynx also checks for an /etc/organization file.)

    The environment variable "LYNX_CFG", if set, will override the default
    location and name of the global configuration file (lynx.cfg) that was
    defined via the constant "LYNX_CFG_FILE" in userdefs.h.  See userdefs.h
    for more information.

    The environment variable "LYNX_TEMP_SPACE", if set, will override the
    default path prefix for temporary files that was defined via the constant
    "TEMP_SPACE" in userdefs.h.  See userdefs.h for more information.

    The environment variable "LYNX_SAVE_SPACE", if set, will override the
    default path prefix for files saved to disk that was defined via the
    constant "SAVE_SPACE" in lynx.cfg.  See lynx.cfg for more information.

    The variable "WWW_HOME", if set, will override the default startup
    URL specified in any of the configuration files.

    Lynx still supports use of gateway servers, with the servers specified
    via the variables "WWW_access_GATEWAY", where "access" is lower case
    and can be "http", "ftp", "gopher" or "wais".  Most of the gateway
    servers have been discontinued, but "http://www.w3.org:8001" is
    available for wais searches (note that you do not include a terminal
    '/' for gateways, but do for proxies; see below).

    Lynx version 2.2 and beyond supports the use of proxy servers that can
    act as firewall gateways and caching servers.  They are preferable to
    the older gateway servers.  Each protocol used by Lynx can be mapped
    separately using PROTOCOL_proxy environment variables of the form:

        UNIX
                setenv http_proxy "http://some.server.dom:port/"
                setenv https_proxy "http://some.server.dom:port/"
                setenv ftp_proxy "http://some.server.dom:port/"
                setenv gopher_proxy "http://some.server.dom:port/"
                setenv news_proxy "http://some.server.dom:port/"
                setenv newspost_proxy "http://some.server.dom:port/"
                setenv newsreply_proxy "http://some.server.dom:port/"
                setenv snews_proxy "http://some.server.dom:port/"
                setenv snewspost_proxy "http://some.server.dom:port/"
                setenv snewsreply_proxy "http://some.server.dom:port/"
                setenv nntp_proxy "http://some.server.dom:port/"
                setenv wais_proxy "http://some.server.dom:port/"
                setenv finger_proxy "http://some.server.dom:port/"
                setenv cso_proxy "http://some.server.dom:port/"

        VMS
                define "http_proxy" "http://some.server.dom:port/"
                define "https_proxy" "http://some.server.dom:port/"
                define "ftp_proxy" "http://some.server.dom:port/"
                define "gopher_proxy" "http://some.server.dom:port/"
                define "news_proxy" "http://some.server.dom:port/"
                define "newspost_proxy" "http://some.server.dom:port/"
                define "newsreply_proxy" "http://some.server.dom:port/"
                define "snews_proxy" "http://some.server.dom:port/"
                define "snewspost_proxy" "http://some.server.dom:port/"
                define "snewsreply_proxy" "http://some.server.dom:port/"
                define "nntp_proxy" "http://some.server.dom:port/"
                define "wais_proxy" "http://some.server.dom:port/"
                define "finger_proxy" "http://some.server.dom:port/"
                define "cso_proxy" "http://some.server.dom:port/"
                (Encase *BOTH* strings in double-quotes to maintain
		 lower case for the PROTOCOL_proxy variable and for
		 the http access type; include /system if you want
		 proxying for all clients on your system.)

    If you wish to override the use of a proxy server for specific hosts or
    entire domains you may use the "no_proxy" environment variable. Here is
    an example use of "no_proxy":

        UNIX
                setenv no_proxy "host.domain.dom, domain1.dom, domain2"

        VMS
                define "no_proxy" "host.domain.dom, domain1.dom, domain2"

    You can include a port number in the no_proxy list to override use
    of a proxy server for the host accessed via that port, but not via
    other ports.  For example, if you use "host.domain.dom:119" and/or
    "host.domain.dom:210", then news (port 119) URLs and/or any wais
    (port 210) searches on that host would be excluded, but http, ftp,
    and gopher services (if normally proxied) would still be included,
    as would any news or wais services on other hosts.

    If you wish to override the use of a proxy server completely (i.e.,
    globally override any existing proxy variables), set the value of
    "no_proxy" to "*".

    Note that Lynx treats file URLs on the local host as requests for
    direct access to the file, and does not attempt ftp if that fails.
    It treats both ftp URLs and file URLs on remote hosts as ftp URLs,
    and does not attempt direct file access for either.  If ftp URLs are
    being proxied, file URLs on a remote host will be converted to ftp
    URLs before submission by Lynx to the proxy server, so no special
    procedure for inducing the proxy server to handle them is required.
    Other WWW clients may require that the http server's configuration
    file have "Map file:* ftp:*" in it to perform that conversion.
d849 14
a862 4
    The proxy and no_proxy variables also can be set at run time via
    lynx.cfg.

2. Win32 (95/NT) and 386 DOS (adapted from "readme.txt" by Wayne Buttles)
a864 1
    LYNX_CFG     The full path and filename for lynx.cfg
d866 3
a868 2
    TERM         Set TERM=vt100 to stop that annoying terminal type message.
    USER         Tells Lynx you are real instead of an anonymous user(?)
d871 1
a871 1
    WATTCP.CFG   Where to find the wattcp.cfg file.
d875 1
a875 1
    application line is "D:\win32\lynx.bat", lynx.bat may look like:
d880 1
d883 14
d903 1
a903 1
-- 1998/01/22 - H. Nelson <lynx-admin@@irm.nara.kindai.ac.jp>
@


1.1.1.1
log
@Lynx 2.8
@
text
@@
