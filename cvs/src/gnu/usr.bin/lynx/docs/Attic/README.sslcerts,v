head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.14
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.20
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.18
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.16
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.14
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.12
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.10
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.8
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2014.07.23.19.13.24;	author deraadt;	state dead;
branches;
next	1.3;
commitid	EcR8E7r0stjLUV4p;

1.3
date	2011.07.22.14.10.38;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.09.16.51;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.22.04.01.43;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@delinked from tree, now it goes to the bit bucket
@
text
@        Lynx SSL support for certificates - README.sslcerts file

BACKGROUND:

The original README.ssl document for lynx stated:

        Note that the server... may not have a valid certificate. Lynx will not
        complain, as it does not yet support certificates...

Such lack of support is no longer the case.  Lynx now features excellent
certificate management through the openssl project.  There is almost no
online documentation available regarding how to use openssl's certificate
management with other programs, so this will accompany lynx and hopefully
encourage good practical security for unix clients.

Lynx relies on openssl to not only encrypt connections over https, but also to
determine whether it should even accept a certificate and establish a secure
connection with a remote host. Because of this reliance upon openssl by lynx,
most of this tutorial deals with how to use openssl to "install" both
vendor-provided CA cert bundles as well as self-signed certs from trusted sources
and, most importantly, how to get them recognized by lynx.

While lynx on many systems will transparently accept valid certificates, not
all systems enjoy such functionality. Further, as noted above, older versions
of lynx do not perform any validity checks on a certificate.

There is also the common case of wanting to trust, use and install a
self-signed certificate from a known server source and have it be trusted by
client programs.

Briefly, the procedure will involve confirming the default system location for
certificates, setting values for SSL_CERT_DIR and SSL_CERT_FILE in
the environment, and converting and hashing the certificates using openssl
utilities to enable recognition.

THE CURRENT SITUATION:

Prior to lynx2.8.5dev9, lynx did not check at all for certificate validity.

Since lynx2.8.5.dev9, lynx has reported this openssl error:

SSL error:unable to get local issuer certificate-Continue? (y)

whenever an https connection was initiated and the certificate could not be
found, for whatever reason, by openssl, and therefore lynx.

This checking for a certificate is an enhancement to security, but rather
tediously generates errors at each https browser request.

The ability to turn off reporting of this error to the user was added to
lynx2.8.5dev16 as the FORCE_SSL_PROMPT setting in lynx.cfg as noted in the
CHANGELOG:

        This lets the user decide whether to ignore prompting for questionable
        aspects of an SSL connection.

While this is a convenient setting to employ when using lynx to script
https -dumps, it by definition ignores the issue of certificate validity
altogether. Those concerned with proper certificate management and
the maintenance of a store of updated CA certificates will be uncomfortable
with this relaxed security setting.

The ability to accept a 'wildcard' certificate, where the first character
is a '*' was added to lynx2.8.6dev18.

PRELIMINARY PROCEDURES:

It is assumed that openssl has been installed correctly, that the default
cert directory is /usr/local/ssl/certs, (it's often /etc/ssl/certs, but we
need a point of departure for the discussion) and that lynx has been compiled
--with-ssl.

The default location for certs on your system may be different, or there may not
be one. You will have to substitute that location for /usr/local/ssl/certs in
the following instructions, and/or set environment variables.

To determine the default location for certs on your system you may run the
following command:

strings libcrypto.a  | grep -in cert | less

Look in this output for SSL_CERT_DIR and SSL_CERT_FILE, and the lines just
above them. This is your default location, respectively, for certificates,
and the CA cert bundle, cert.pem. You will need to know where libcrypto.a is
found of course.

Example output:

<snip>
7490:/etc/ssl/certs
7491:/etc/ssl/cert.pem
7492:SSL_CERT_DIR
7493:SSL_CERT_FILE
<snip>

Other possible example output:

<snip>
31555:/usr/local/ssl/certs
31556:/usr/local/ssl/cert.pem
31557:SSL_CERT_DIR
31558:SSL_CERT_FILE
<snip>

Note that when OpenSSL is installed, the c_rehash utility is installed in a
bin directory (default /usr/local/ssl/bin).  You will need to know where it
is on your system. The command:

whereis c_rehash

will probably give useful results.

Note also that there is no CA cert bundle distributed with OpenSSL. The
OpenSSL team specifically decided NOT to do that. Getting a set of trusted
certificates is left up to the installer.

It is no longer a fairly trivial procedure to pull the bundle of trusted root certs out
of a recent version of Internet Explorer. Multiple certificates are no longer 
exportable as a DER formatted file; extraction of a single certificate is the only
export for DER, and DER is what converts to PEM.

Users with access to Apple OS X can export all certificates from Keychain Access System Roots as
a .pem file. Place this in SSL_CERT_DIR and hash it and you're done.

The MirOS BSD project also provides them. The procedure to convert and install them 
is detailed later in this document, and if you simply need to have commercially provided 
certificates trusted by lynx, you can skip down a few lines to the INSTALLING OR UPDATING
THE CA BUNDLE section.

Extracted Mozilla cert bundles are available for download from the curl project,
http://curl.haxx.se/docs/caextract.html along with a script to extract from Mozilla
source.


INSTALLING A SELF-SIGNED CERTIFICATE:

When you would like to trust a self-signed (non-commercial) certificate you will
need to get hold of the actual file. If it's a cert local to your network you
can ask the sysadmin to make it available for download as a link on a webpage.

If such file is not human-readable it's probably DER formatted and will need to
be converted to PEM format to allow openssl to use it.

To convert DER formatted certificates into something openssl can deal with:

Save the cert as site_name.crt in a directory. In that directory, type:

openssl x509 -inform DER -in site_name.crt -outform PEM -out site_name.pem

You can now copy this individual cert into the directory for that, usually
/usr/local/ssl/certs.  The alternative is to concatenate the individual certs
to the cert.pem bundle in /usr/local/ssl. (Please see INSTALLING OR UPDATING
THE CA BUNDLE below).

The cert file will now be in an acceptable format to openssl, PEM encoded.
However, openssl, and by extension lynx, will not know about it until that
cert is symbolically linked to a file named after the hash value of that cert,
in the default directory /usr/local/ssl/certs.

So the next thing to do is to hash the cert using c_rehash.

INSTALLING OR UPDATING THE CA BUNDLE:

Now would be a good time to check to see if you have the bundle of CA certs
/usr/local/ssl/cert.pem, or to update them.

CA bundles are available in various places, such as the MirOS BSD distribution,
for those who want to take that route, or you can extract the current bundle
from a current version of Internet Explorer (export them all from IE and
transfer it onto your system).

From MirOS, a cert bundle is available at

http://caunter.ca/ssl.certs.shar

It includes the cacert.org certificate. Download the latest revision; read the
file to see how to get the certs out.

No hashing is necessary with this set of certs; it is already done; ignore
the c_rehash usage below for this bundle. Simply run `sh ssl.certs.shar` 
in SSL_CERT_DIR.

From IE 5.x certs extract as a PKCS7 file and need to be converted with something
like:

openssl pkcs7 -inform DER -in bundle.crt -outform PEM -out cert.pem \
-print_certs -text

The resulting cert.pem file should be copied to the default directory for
bundles (usually /usr/local/ssl) and renamed to "cert.pem", assuming that is
the SSL_CERT_FILE.

Individual certs can also process if added and hashed in /usr/local/ssl/certs.

We now have all of the individual certs we wish to trust in our certs
directory, and the most recent bundle of CA certs as well.

Confirm that you have the script c_rehash (See PRELIMINARY PROCEDURES; if it is
not found, a copy is usually located in the tools directory of the openssl
source tree. If you use this copy, it needs the execute bit set or it will not
run).

Run:

./c_rehash

The c_rehash utility is a perl script that runs openssl commands which creates
the files named after the hash values of the certs in the default directory
for certs.

Its output looks like this:

Doing /usr/local/ssl/certs
vsignss.pem => f73e89fd.0
vsign3.pem => 7651b327.0
...more output
<snip>

All pem encoded certs in /usr/local/ssl/certs will now be recognized.

SETTING AND EXPORTING ENVIRONMENT VARIABLES:

If lynx is still not recognizing certs, environment variables need
to be set; if on a sh type shell, the variables also need to be exported.

The environment variables SSL_CERT_DIR and SSL_CERT_FILE need to be set
if a non-default location is used for certificates, or if certs just can't be
found by lynx. They may be set as follows in /etc/profile, or a shell
initialization .profile or .*shrc, if we run a non csh type shell, according
to the results of the search for the default location for certs procedure
(See PRELIMINARY PROCEDURES):

SSL_CERT_DIR="/usr/local/ssl/certs"
SSL_CERT_FILE="/usr/local/ssl/cert.pem"
export SSL_CERT_DIR SSL_CERT_FILE

On csh type shells, you can use:
setenv SSL_CERT_DIR "/usr/local/ssl/certs"
setenv SSL_CERT_FILE "/usr/local/ssl/cert.pem"

Note that the environment variable SSL_CERT_FILE applies to the cert-bundle
if used outside of the default location (/usr/local/ssl/cert.pem) compiled
into OpenSSL. There are issues with SSL_CERT_FILE in 0.9.6x versions of openssl.

The configuration file lynx.cfg allows a system SSL_CERT_FILE variable to be set
which can simplify matters. 

SSL_CERT_FILE:/etc/ssl/certs/ca-certificates.crt

Make sure you have FORCE_SSL_PROMPT set to PROMPT in lynx.cfg like so:

FORCE_SSL_PROMPT:PROMPT

You will now connect without error to https servers with trusted certs, but
will still get this error for untrusted certs:

SSL error:self signed certificate-Continue? (y)

A quick check confirms that these procedures have the same effect with ssl
errors in the pine program.

2003 updated 2009
Stefan Caunter <stefan.caunter@@mohawkcollege.ca>
Mohawk College Department of Computer Science
Hamilton Ontario Canada
@


1.3
log
@update to lynx2.8.7rel.2, with local patches:
- restore local lynx.cfg settings [avsm]
- fix makefile races [espie]
- read/write result checking fixes to avoid unsigned comparisons vs -1 [krw]
- initialize all the InputFieldData members correctly [fgsch]
- fix socklen_t test to include <sys/types.h> [miod]
- fgets(3) returns NULL on error, not 0. No functional change [cloder]

ok krw@@, tests by Simon Kuhnle and Martin Pieuchot
@
text
@@


1.2
log
@Update to lynx-2.8.6.rel5, with our local patches maintained where relevant.
tests from miod@@ sthen@@ jmc@@ jsing@@
two additional fixes from miod:
- fix uninitialized stack variable use, leading to occasional crash.
- modify the socklen_t test to include <sys/types.h>, fixes gcc2 build failures
@
text
@d1 1
a1 1
	Lynx SSL support for certificates - README.sslcerts file
d7 2
a8 2
	Note that the server... may not have a valid certificate. Lynx will not
	complain, as it does not yet support certificates...
d20 2
a21 2
vendor-provided CA cert bundles as well as self-signed certs from trusted
sources and, most importantly, how to get them recognized by lynx.
d32 1
a32 1
certificates, possibly setting values for SSL_CERT_DIR and SSL_CERT_FILE in
d54 2
a55 2
	This lets the user decide whether to ignore prompting for questionable
	aspects of an SSL connection.
d73 3
a75 4
The default location for certs on your system may be different, or there may
not be one.  You will have to substitute that location for
	/usr/local/ssl/certs
in the following instructions, and/or set environment variables.
d117 11
a127 5
It is a fairly trivial procedure to pull the bundle of trusted root certs out
of a recent version of Internet Explorer. The MirOS BSD project also provides
them. The procedure to convert and install them is detailed later in this
document, and if you simply need to have commercially provided certificates
trusted by lynx, you can skip down a few lines to the INSTALLING OR UPDATING
d130 5
d137 3
a139 4
When you would like to trust a self-signed (non-commercial) certificate you
will need to get hold of the actual file.  If it's a cert local to your
network you can ask the sysadmin to make it available for download as a link
on a webpage.
d141 2
a142 2
If such file is not human-readable it's probably DER formatted and will need
to be converted to PEM format to allow openssl to use it.
d167 1
a167 1
CA bundles are available in various places, such as the MirBSD distribution,
d172 1
a172 1
From MirOS, this cert bundle
d174 1
a174 1
http://cvs.mirbsd.de/src/etc/ssl.certs.shar
d176 1
a176 1
includes the cacert.org certificate.  Download the latest revision; read the
d180 2
a181 1
the c_rehash usage below for this bundle.
d183 1
a183 1
From IE certs extract as a PKCS7 file and need to be converted with something
d198 2
a199 2
Confirm that you have the script c_rehash (See PRELIMINARY PROCEDURES; if it
is not found, a copy is usually located in the tools directory of the openssl
d223 1
a223 1
If lynx is still not recognizing certs, environment variables may need
d226 1
a226 1
The environment variables SSL_CERT_DIR and SSL_CERT_FILE only need to be set
a240 4
On many systems setting and exporting them makes all the difference. 
Apparently this is not an issue on other systems, but this might help someone
somewhere.

d243 6
a248 2
into OpenSSL.  There are issues with SSL_CERT_FILE in 0.9.6x versions of
openssl.
d262 2
a263 1
Stef Caunter <stefan.caunter@@mohawkcollege.ca>
@


1.1
log
@update to lynx 2.8.5rel.1
tested todd@@,naddy@@. millert@@ deraadt@@ ok
@
text
@d7 1
a7 1
	Note that the server... may not have a valid certificate. Lynx will not 
d10 5
a14 5
Such lack of support is no longer the case.  Lynx now features excellent 
certificate management through the openssl project.  There is almost no 
online documentation available regarding how to use openssl's certificate 
management with other programs, so this will accompany lynx and hopefully 
encourage good practical security for unix clients. 
d17 2
a18 2
determine whether it should even accept a certificate and establish a secure 
connection with a remote host. Because of this reliance upon openssl by lynx, 
d20 2
a21 2
commercial CA cert bundles as well as self-signed certs from trusted sources 
and, most importantly, how to get them recognized by lynx. 
d23 3
a25 3
While lynx on many systems will transparently accept valid certificates, not 
all systems enjoy such functionality. Further, as noted above, older versions 
of lynx do not perform any validity checks on a certificate. 
d27 2
a28 2
There is also the common case of wanting to trust, use and install a 
self-signed certificate from a known server source and have it be trusted by 
d32 2
a33 2
certificates, possibly setting values for SSL_CERT_DIR and SSL_CERT_FILE in 
the environment, and converting and hashing the certificates using openssl 
d45 1
a45 1
found,  for whatever reason, by openssl, and therefore lynx. 
d47 2
a48 2
This checking for a certificate is an enhancement to security, but rather 
tediously generates errors at each https browser request. 
d50 1
a50 1
The ability to turn off reporting of this error to the user was added to 
d54 2
a55 2
	This lets the user decide whether to ignore prompting for questionable 
	aspects of an SSL connection.  
d57 4
a60 4
While this is a convenient setting to employ when using lynx to script 
https -dumps, it by definition ignores the issue of certificate validity 
altogether. Those concerned with proper certificate management and 
the maintenance of a store of updated CA certificates will be uncomfortable 
d63 3
d68 9
a76 8
It is assumed that openssl has been installed correctly, that the default 
cert directory is /usr/local/ssl/certs, (it's often /etc/ssl/certs, but we 
need a point of departure for the discussion) and that lynx has been compiled 
--with-ssl. 

The default location for certs on your system may be different, or there may not
be one. You will have to substitute that location for /usr/local/ssl/certs in 
the following instructions, and/or set environment variables.
d78 2
a79 2
To determine the default location for certs on your system you may run the 
following command: 
d84 2
a85 2
above them. This is your default location, respectively, for certificates, 
and the CA cert bundle, cert.pem. You will need to know where libcrypto.a is 
d106 2
a107 2
Note that when OpenSSL is installed, the c_rehash utility is installed in a 
binary directory (default /usr/local/ssl/bin).  You will need to know where it 
d110 1
a110 1
whereis c_rehash 
d114 9
a122 9
Note also that there is no CA cert bundle distributed with OpenSSL. The 
OpenSSL team specifically decided NOT to do that. Getting a set of trusted 
certificates is left up to the installer. 

It is a fairly trivial procedure to pull the bundle of trusted root certs out 
of a recent version of Internet Explorer. The mod_ssl project also provides 
them.  The procedure to convert and install them is detailed later in this 
document, and if you simply need to have commercially provided certificates 
trusted by lynx, you can skip down a few lines to the INSTALLING OR UPDATING 
d127 4
a130 3
When you would like to trust a self-signed (non-commercial) certificate you will
need to get hold of the actual file. If it's a cert local to your network you
can ask the sysadmin to make it available for download as a link on a webpage.
d132 2
a133 2
If such file is not human-readable it's probably DER formatted and will need to 
be converted to PEM format to allow openssl to use it.
d142 8
a149 8
/usr/local/ssl/certs.  The alternative is to concatenate the individual certs 
to the cert.pem bundle in /usr/local/ssl. (Please see INSTALLING OR UPDATING 
THE CA BUNDLE below). 

The cert file will now be in an acceptable format to openssl, PEM encoded. 
However, openssl, and by extension lynx, will not know about it until that 
cert is present in a file named after the hash value of that cert, in the 
default directory /usr/local/ssl/certs.
d158 8
a165 4
CA bundles are available in various places, such as the modssl distribution, 
for those who want to take that route, or you can extract the current bundle 
from a current version of Netscape or Internet Explorer (export them all from 
IE and transfer it onto your system). 
d167 7
a173 1
From IE it extracts as a PKCS7 file and needs to be converted with something 
d176 1
a176 1
openssl pkcs7 -inform DER -in bundle.crt -outform PEM -out cert.pem \ 
d179 5
a183 3
The resulting cert.pem file should be copied to the default directory for 
bundles (usually /usr/local/ssl) and renamed to "cert.pem". It will also 
process just fine if it is present and hashed in /usr/local/ssl/certs.
d185 2
a186 2
We now have all of the individual certs we wish to trust in our certs 
directory, and the most recent bundle of CA certs as well. 
d188 2
a189 2
Confirm that you have the script c_rehash (See PRELIMINARY PROCEDURES; if it is 
not found, a copy is usually located in the tools directory of the openssl 
d197 3
a199 3
The c_rehash utility is a perl script that runs openssl commands which creates 
the files named after the hash values of the certs in the default directory 
for certs. 
d216 1
a216 1
The environment variables SSL_CERT_DIR and SSL_CERT_FILE only need to be set 
d218 3
a220 3
found by lynx. They may be set as follows in /etc/profile, or a shell 
initialization .profile or .*shrc, if we run a non csh type shell, according 
to the results of the search for the default location for certs procedure 
d231 2
a232 2
On some systems setting and exporting them makes all the difference. Apparently 
this is often not an issue on other systems, but this might help someone 
d235 4
a238 3
Note that the environment variable SSL_CERT_FILE applies to the cert-bundle 
if used outside of the default location (/usr/local/ssl/cert.pem) compiled 
into OpenSSL. There are issues with SSL_CERT_FILE in 0.9.6x versions of openssl.
d249 1
a249 1
A quick check confirms that these procedures have the same effect with ssl 
d252 1
a252 1
--Stef Caunter <cauntes@@mail.mohawkc.on.ca>
@

