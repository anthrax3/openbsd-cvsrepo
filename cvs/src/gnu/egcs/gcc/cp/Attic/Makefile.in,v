head	1.9;
access;
symbols
	OPENBSD_5_4:1.8.0.40
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.38
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.36
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.34
	OPENBSD_5_0:1.8.0.32
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.30
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.28
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.16
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.14
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.12
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.10
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.8
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	GCC-2_95_pre3_test3:1.1.1.3
	GCC-2_95_pre3_test2:1.1.1.3
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	GCC-2_95_pre3_20000916:1.1.1.3
	GCC-2_95_pre3_20000527:1.1.1.3
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	GCC-2_95_2:1.1.1.3
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	GCC-2_95_1:1.1.1.3
	CYGNUS-990718:1.1.1.2
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2013.08.06.19.16.47;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2003.11.24.17.12.55;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.11.20.18.24.19;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.09.17.11.29.18;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	99.08.23.20.54.51;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	99.07.22.20.39.37;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	99.05.27.00.35.57;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.05.26.15.24.14;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.05.26.13.34.44;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.34.44;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.22.20.06.57;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.08.23.20.29.00;	author espie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@# Makefile for GNU C++ compiler.
#   Copyright (C) 1987, 88, 90-5, 1998, 1999 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# The makefile built from this file lives in the language subdirectory.
# Its purpose is to provide support for:
#
# 1) recursion where necessary, and only then (building .o's), and
# 2) building and debugging cc1 from the language subdirectory, and
# 3) nothing else.
#
# The parent makefile handles all other chores, with help from the
# language makefile fragment, of course.
#
# The targets for external use are:
# all, TAGS, ???mostlyclean, ???clean.

# Suppress smart makes who think they know how to automake Yacc files
.y.c:

# It defines the c++ interface name. It should be changed when the
# c++ interface is changed.
INTERFACE = 2

# Variables that exist for you to override.
# See below for how to change them for certain systems.

ALLOCA =

# Various ways of specifying flags for compilations:  
# CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.
# BOOT_CFLAGS is the value of CFLAGS to pass
# to the stage2 and stage3 compilations
# XCFLAGS is used for most compilations but not when using the GCC just built.
XCFLAGS =
CFLAGS = -g
BOOT_CFLAGS = -O $(CFLAGS)
# These exists to be overridden by the x-* and t-* files, respectively.
X_CFLAGS =
T_CFLAGS =

X_CPPFLAGS =
T_CPPFLAGS =

CC = @@CC@@
BISON = `if [ -f ../../bison/bison ] ; then echo ../../bison/bison -L $(srcdir)/../../bison/ ;  else echo bison ; fi`
BISONFLAGS =
LEX = `if [ -f ../../flex/flex ] ; then echo ../../flex/flex ;  else echo flex ; fi`
LEXFLAGS =
AR = ar
AR_FLAGS = rc
SHELL = /bin/sh
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi

# Define this as & to perform parallel make on a Sequent.
# Note that this has some bugs, and it seems currently necessary 
# to compile all the gen* files first by hand to avoid erroneous results.
P =

# This is used in the definition of SUBDIR_USE_ALLOCA.
# ??? Perhaps it would be better if it just looked for *gcc*.
OLDCC = cc

# This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.
# It omits XCFLAGS, and specifies -B./.
# It also specifies -B$(tooldir)/ to find as and ld for a cross compiler.
GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS)

# Tools to use when building a cross-compiler.
# These are used because `configure' appends `cross-make'
# to the makefile when making a cross-compiler.

# We don't use cross-make.  Instead we use the tools
# from the build tree, if they are available.
# program_transform_name and objdir are set by configure.in.
program_transform_name =
objdir = .

target=@@target@@
xmake_file=@@dep_host_xmake_file@@
tmake_file=@@dep_tmake_file@@
#version=`sed -e 's/.*\"\([^ \"]*\)[ \"].*/\1/' < $(srcdir)/version.c`
#mainversion=`sed -e 's/.*\"\([0-9]*\.[0-9]*\).*/\1/' < $(srcdir)/version.c`

# Directory where sources are, from where we are.
srcdir = @@srcdir@@
VPATH = @@srcdir@@
LIBIBERTY_INCLUDES=$(srcdir)/../../include

# Additional system libraries to link with.
CLIB=
 
# Top build directory, relative to here.
top_builddir = ..

# Internationalization library.
INTLLIBS = @@INTLLIBS@@

# Change this to a null string if obstacks are installed in the
# system library.
OBSTACK=obstack.o

# Choose the real default target.
ALL=all

# End of variables for you to override.

# Definition of `all' is here so that new rules inserted by sed
# do not specify the default target.
all: all.indirect

# This tells GNU Make version 3 not to put all variables in the environment.
.NOEXPORT:

# sed inserts variable overrides after the following line.
####target overrides
@@target_overrides@@
####host overrides
@@host_overrides@@
####cross overrides
@@cross_defines@@
@@cross_overrides@@
####build overrides
@@build_overrides@@
#
# Now figure out from those variables how to compile and link.

all.indirect: Makefile ../cc1plus$(exeext)

# IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.
INTERNAL_CFLAGS = $(CROSS) -DIN_GCC @@extra_c_flags@@

# This is the variable actually used when we compile.
ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS)

# Likewise.
ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)

# Even if ALLOCA is set, don't use it if compiling with GCC.

SUBDIR_OBSTACK = `if [ x$(OBSTACK) != x ]; then echo ../$(OBSTACK); else true; fi`
SUBDIR_USE_ALLOCA = `case "${CC}" in "${OLDCC}") if [ x$(ALLOCA) != x ]; then echo ../$(ALLOCA); else true; fi ;; esac`
SUBDIR_MALLOC = `if [ x$(MALLOC) != x ]; then echo ../$(MALLOC); else true; fi`

# How to link with both our special library facilities
# and the system's installed libraries.
LIBS = $(SUBDIR_OBSTACK) $(SUBDIR_USE_ALLOCA) $(SUBDIR_MALLOC) \
  $(INTLLIBS) $(CLIB) $(LIBIBERTY)

# Specify the directories to be searched for header files.
# Both . and srcdir are used, in that order,
# so that tm.h and config.h will be found in the compilation
# subdirectory rather than in the source directory.
INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. -I$(srcdir)/../config -I$(srcdir)/../../include

# Always use -I$(srcdir)/config when compiling.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<

# The only suffixes we want for implicit rules are .c and .o.
.SUFFIXES:
.SUFFIXES: .c .o

# This tells GNU make version 3 not to export all the variables
# defined in this file into the environment.
.NOEXPORT:
#
# Lists of files for various purposes.

# Language-specific object files for g++

CXX_OBJS = call.o decl.o errfn.o expr.o pt.o sig.o typeck2.o \
 class.o decl2.o error.o lex.o parse.o ptree.o rtti.o spew.o typeck.o cvt.o \
 except.o friend.o init.o method.o search.o semantics.o tree.o xref.o \
 repo.o @@extra_cxx_objs@@

# Language-independent object files.
OBJS = `cat ../stamp-objlist` ../c-common.o ../c-pragma.o
OBJDEPS = ../stamp-objlist ../c-common.o ../c-pragma.o

compiler: ../cc1plus$(exeext)
../cc1plus$(exeext): $(P) $(OBJDEPS) $(CXX_OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ $(OBJS) $(CXX_OBJS) $(LIBS)

Makefile: $(srcdir)/Makefile.in $(srcdir)/../configure
	cd ..; $(SHELL) config.status

native: config.status ../cc1plus$(exeext)
#
# Compiling object files from source files.

# Note that dependencies on obstack.h are not written
# because that file is not part of GCC.

# C++ language specific files.

RTL_H = $(srcdir)/../rtl.h $(srcdir)/../rtl.def \
	$(srcdir)/../machmode.h $(srcdir)/../machmode.def
TREE_H = $(srcdir)/../tree.h $(srcdir)/../real.h $(srcdir)/../tree.def \
	$(srcdir)/../machmode.h $(srcdir)/../machmode.def
CXX_TREE_H = $(TREE_H) cp-tree.h cp-tree.def
PARSE_H = parse.h
PARSE_C = parse.c
EXPR_H = $(srcdir)/../expr.h ../insn-codes.h

parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \
	$(srcdir)/../except.h $(srcdir)/../output.h $(srcdir)/../system.h \
	$(srcdir)/../toplev.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \
  `echo $(PARSE_C) | sed 's,^\./,,'`

CONFLICTS = expect 30 shift/reduce conflicts and 42 reduce/reduce conflicts.
$(PARSE_H) : $(PARSE_C)
$(PARSE_C) : $(srcdir)/parse.y
	@@echo $(CONFLICTS)
	$(BISON) $(BISONFLAGS) -d -o parse.c $(srcdir)/parse.y
	grep '^#define[ 	]*YYEMPTY' parse.c >>parse.h
#$(PARSE_C) $(PARSE_H) : stamp-parse ; @@true
#stamp-parse: $(srcdir)/parse.y
#	@@echo $(CONFLICTS)
#	$(BISON) $(BISONFLAGS) -d $(srcdir)/parse.y
#	grep '^#define[ 	]*YYEMPTY' y.tab.c >>y.tab.h
#	$(SHELL) $(srcdir)/../move-if-change y.tab.c $(PARSE_C)
#	$(SHELL) $(srcdir)/../move-if-change y.tab.h $(PARSE_H)
#	cp $(PARSE_C) y.tab.c
#	touch stamp-parse

# We used to try to protect people from having to rerun gperf.  But,
# the C front-end already requires this if c-parse.gperf is changed,
# so we should be consistent.
#$(srcdir)/hash.h: $(srcdir)/gxx.gperf
#	gperf -L C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word \
#		'-k1,4,7,$$' $(srcdir)/gxx.gperf >$(srcdir)/hash.h

spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) $(PARSE_H) $(srcdir)/../flags.h \
  lex.h $(srcdir)/../system.h $(srcdir)/../toplev.h
lex.o : lex.c $(CONFIG_H) $(CXX_TREE_H) \
  $(PARSE_H) input.c $(srcdir)/../flags.h hash.h lex.h \
  $(srcdir)/../c-pragma.h $(srcdir)/../system.h $(srcdir)/../toplev.h \
  $(srcdir)/../output.h $(srcdir)/../mbchar.h
decl.o : decl.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \
  lex.h decl.h $(srcdir)/../stack.h $(srcdir)/../output.h  \
  $(srcdir)/../except.h $(srcdir)/../system.h $(srcdir)/../toplev.h \
  $(srcdir)/../hash.h
decl2.o : decl2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \
  lex.h decl.h $(EXPR_H) $(srcdir)/../except.h \
  $(srcdir)/../output.h $(srcdir)/../except.h $(srcdir)/../system.h \
  $(srcdir)/../toplev.h $(srcdir)/../dwarf2out.h $(srcdir)/../dwarfout.h \
  $(LIBIBERTY_INCLUDES)/splay-tree.h $(srcdir)/../varray.h
typeck2.o : typeck2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \
  $(srcdir)/../system.h $(srcdir)/../toplev.h
typeck.o : typeck.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \
  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h
class.o : class.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \
  $(srcdir)/../system.h $(srcdir)/../toplev.h \
  $(LIBIBERTY_INCLUDES)/splay-tree.h
call.o : call.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \
  $(srcdir)/../system.h $(srcdir)/../toplev.h
friend.o : friend.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \
  $(srcdir)/../system.h $(srcdir)/../toplev.h
init.o : init.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \
  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h
method.o : method.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \
  $(srcdir)/../toplev.h
cvt.o : cvt.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h decl.h \
  $(srcdir)/../flags.h $(srcdir)/../toplev.h $(srcdir)/../convert.h
search.o : search.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../stack.h \
  $(srcdir)/../flags.h $(srcdir)/../system.h $(srcdir)/../toplev.h \
  $(srcdir)/../varray.h
tree.o : tree.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \
  $(srcdir)/../system.h $(srcdir)/../toplev.h
ptree.o : ptree.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h
rtti.o : rtti.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \
  $(srcdir)/../system.h $(srcdir)/../toplev.h
except.o : except.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \
  $(srcdir)/../except.h $(srcdir)/../system.h $(srcdir)/../toplev.h
expr.o : expr.c $(CONFIG_H) $(CXX_TREE_H) $(RTL_H) $(srcdir)/../flags.h \
  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h
xref.o : xref.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../input.h \
  $(srcdir)/../system.h $(srcdir)/../toplev.h
pt.o : pt.c $(CONFIG_H) $(CXX_TREE_H) decl.h $(PARSE_H) lex.h \
  $(srcdir)/../system.h $(srcdir)/../toplev.h
error.o : error.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \
  $(srcdir)/../toplev.h
errfn.o : errfn.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \
  $(srcdir)/../toplev.h
sig.o : sig.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \
  $(srcdir)/../system.h $(srcdir)/../toplev.h
repo.o : repo.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \
  $(srcdir)/../toplev.h
semantics.o: semantics.c $(CONFIG_H) $(CXX_TREE_H) lex.h \
  $(srcdir)/../except.h $(srcdir)/../system.h $(srcdir)/../toplev.h
  

#
# These exist for maintenance purposes.

# Update the tags table.
TAGS: force
	cd $(srcdir) ;				\
	etags *.c *.h ;				\
	echo 'l' | tr 'l' '\f' >> TAGS ;	\
	echo 'parse.y,0' >> TAGS ; 		\
	etags -a ../*.h ../*.c;

.PHONY: TAGS

force:
@


1.8
log
@Switch to using libiberty in new location.
Disable building of cxxfilt in gcc, build it from its own directory.
@
text
@@


1.7
log
@Grab hashtab.c from the development version of gcc, add it to libiberty.

Make sure that g++ and g77 link against libiberty (fixed in dev. sources
as well).

Use hashtab functions instead of splay-trees in cse.c.

This is worth a 10% compiling speed increase on some arches, including
sparc, hppa...
@
text
@d105 1
d266 1
a266 1
  $(srcdir)/../../include/splay-tree.h $(srcdir)/../varray.h
d273 1
a273 1
  $(srcdir)/../../include/splay-tree.h
@


1.6
log
@Invoke sh move-if-change explicitly.
Official patch, submitted to egcs and accepted in the main source.
(strongly suggested by mickey@@)
@
text
@d164 1
a164 1
  $(INTLLIBS) $(CLIB)
@


1.5
log
@Merge
@
text
@d239 2
a240 2
#	$(srcdir)/../move-if-change y.tab.c $(PARSE_C)
#	$(srcdir)/../move-if-change y.tab.h $(PARSE_H)
@


1.4
log
@Merge
@
text
@a324 29

g++FAQ.info:	$(srcdir)/g++FAQ.texi
	$(MAKEINFO) --no-split -o ./g++FAQ.info $(srcdir)/g++FAQ.texi

# Preprocess the texi file so that the final document will have
# hyperlinks.
# It would be nice if texi2html could do something like this itself.

# Assumption 1: the FAQ puts all http: and ftp: links in a @@file{...}.
# Assumption 2: newsgroups are like @@file{comp.foo}
# Assumption 3: email addresses match the regexp shown.

g++FAQ.html:	$(srcdir)/g++FAQ.texi
	mkdir work
	sed -e 's?@@file{\([fth]*p://[^}]*\)}?@@strong{<A HREF="\1">\1</A>}?' \
	    -e 's?@@file{\(comp\.[-a-z+.]*\)}?<A HREF="news:\1">\1</A>?' \
	    -e 's?@@file{\(gnu\.[-a-z+.]*\)}?<A HREF="news:\1">\1</A>?' \
	    -e 's?\([.+a-zA-Z0-9-]*@@@@[.a-zA-Z0-9-]*[a-zA-Z0-9]\)?<A HREF="mailto:\1">\1</A>?' \
	    $(srcdir)/g++FAQ.texi > work/g++FAQ.texi
	cd work; texi2html g++FAQ.texi
	mv work/*.html .
	rm -r work

# Make plain-text form.

g++FAQ.txt:	$(srcdir)/g++FAQ.texi
	$(MAKEINFO) --no-split --no-headers -o - $(srcdir)/g++FAQ.texi |\
		sed '/^Concept Index/,$$d' > g++FAQ.txt

@


1.3
log
@likewise: don't run gperf now.
@
text
@d39 1
a39 1
INTERFACE = 1
@


1.2
log
@Remove bison/yacc output files and change Makefiles rules to regenerate
them.
@
text
@d247 3
a249 3
$(srcdir)/hash.h: $(srcdir)/gxx.gperf
	gperf -L C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word \
		'-k1,4,7,$$' $(srcdir)/gxx.gperf >$(srcdir)/hash.h
@


1.1
log
@Initial revision
@
text
@d218 2
a219 2
PARSE_H = $(srcdir)/parse.h
PARSE_C = $(srcdir)/parse.c
d232 2
a233 2
	cd $(srcdir); $(BISON) $(BISONFLAGS) -d -o parse.c parse.y
	cd $(srcdir); grep '^#define[ 	]*YYEMPTY' parse.c >>parse.h
@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@


1.1.1.2
log
@990718, very close to release.
testsuite temporarily removed from snapshots because of copyright checks.
@
text
@d39 1
a39 1
INTERFACE = 2
@


1.1.1.3
log
@Update to gcc 2.95.1, official release.
@
text
@d325 29
@


