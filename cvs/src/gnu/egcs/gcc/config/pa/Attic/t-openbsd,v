head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.42
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.40
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.08.06.19.16.45;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2003.03.28.22.28.51;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.16.00.37.08;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	99.05.26.15.29.24;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@LIBGCC1=libgcc1-asm.a
CROSS_LIBGCC1=libgcc1-asm.a

#Plug millicode routines into libgcc.a  We want these on both native and
#cross compiles.

LIB1ASMFUNCS =  _divI _divU _remI _remU _multiply \
	_divI_15 _divI_14 _divI_12 _divI_10 _divI_9 \
	_divI_7 _divI_6 _divI_5 _divI_3 \
	_divU_15 _divU_14 _divU_12 _divU_10 _divU_9 \
	_divU_7 _divU_6 _divU_5 _divU_3 _dyncall

LIB1ASMSRC=pa/milli32.S

# Don't build a shared libgcc_s.so.  Our libgcc contains millicode, and
# the ABI (linker and dynamic linker really) does not allow millicode
# to be exported from shared libraries.  Consequently, to successfully
# link against libgcc_s.so it is necessary to link against _both_
# libgcc_s.so and libgcc.a.  This is a pain.  It's easier just to disable
# the shared libgcc.
SHLIB_LINK =

# Compile crtbeginS.o and crtendS.o as PIC.
CRTSTUFF_T_CFLAGS_S = # -fPIC

# Compile libgcc2.a as PIC.
# This is also used when compiling libgcc1 if libgcc1 is the asm variety.
TARGET_LIBGCC2_CFLAGS = -DELF=1 # -fPIC

ADA_CFLAGS=-mdisable-indexing
@


1.3
log
@PIC does not mix well w/ nopic (yet); espie@@ ok
@
text
@@


1.2
log
@semi-current config from gcc, seems to work better for us too; espie@@ ok
@
text
@d24 1
a24 1
CRTSTUFF_T_CFLAGS_S = -fPIC
d28 1
a28 1
TARGET_LIBGCC2_CFLAGS = -fPIC -DELF=1
@


1.1
log
@Configuration fragments for arches that have not been committed to egcs
main repository yet (rs6000 to come)
@
text
@d3 27
a30 21
LIB1ASMSRC=pa/lib1funcs.asm
LIB1ASMFUNCS=_divI _divU _remI _remU _multiply _dyncall
LIB2FUNCS_EXTRA=lib2funcs.asm ee.asm ee_fp.asm

lib1funcs.asm: $(srcdir)/config/pa/lib1funcs.asm
	rm -f lib1funcs.asm
	cp $(srcdir)/config/pa/lib1funcs.asm .

lib2funcs.asm: $(srcdir)/config/pa/lib2funcs.asm
	rm -f lib2funcs.asm
	cp $(srcdir)/config/pa/lib2funcs.asm .

ee.asm: $(srcdir)/config/pa/ee.asm
	rm -f ee.asm
	cp $(srcdir)/config/pa/ee.asm .

ee_fp.asm: $(srcdir)/config/pa/ee_fp.asm
	rm -f ee_fp.asm
	cp $(srcdir)/config/pa/ee_fp.asm .

TARGET_LIBGCC2_CFLAGS = -fPIC
@

