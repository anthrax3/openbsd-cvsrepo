head	1.11;
access;
symbols
	OPENBSD_5_4:1.10.0.42
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.40
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.38
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.36
	OPENBSD_5_0:1.10.0.34
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.32
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.30
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.26
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2013.08.06.19.16.46;	author miod;	state dead;
branches;
next	1.10;

1.10
date	2003.08.19.19.46.39;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.08.07.29.28;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.22.18.40.25;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.22.18.38.31;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.13.19.41.22;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.26.17.51.57;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.21.19.25.43;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.24.13.17.15;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.10.22.28.57;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.10.33.36;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@/* Configuration file for sparc64 OpenBSD target.
   Copyright (C) 1999 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#ifndef TARGET_CPU_DEFAULT
#define TARGET_CPU_DEFAULT	TARGET_CPU_ultrasparc
#endif

#include <sparc/sp64-elf.h>

#define OBSD_HAS_DECLARE_FUNCTION_NAME
#define OBSD_HAS_DECLARE_FUNCTION_SIZE
#define OBSD_HAS_DECLARE_OBJECT

#include <openbsd.h>

#undef TARGET_VERSION
#define TARGET_VERSION fprintf (stderr, " (sparc64 OpenBSD ELF)")

/* A 64 bit v9 compiler in a Medium/Mid code model.  */

#undef TARGET_DEFAULT
#define TARGET_DEFAULT \
(MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ \
 + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_STACK_BIAS)

#undef SPARC_DEFAULT_CMODEL
#define SPARC_DEFAULT_CMODEL CM_MEDMID

/* Run-time target specifications.  */
#undef CPP_PREDEFINES
#define CPP_PREDEFINES "-D__unix__ -D__sparc__ -D__sparc64__ -D__sparcv9__ \
-D__sparc_v9__ -D__arch64__ -D__LP64__ -D_LP64 -D__ELF__ -D__OpenBSD__ \
-Asystem(unix) -Asystem(OpenBSD) -Acpu(sparc) -Amachine(sparc)"

#undef CPP_SUBTARGET_SPEC
#define CPP_SUBTARGET_SPEC ""

#undef MD_EXEC_PREFIX
#undef MD_STARTFILE_PREFIX

#undef ASM_SPEC
#define ASM_SPEC "\
%{v:-V} -s %{fpic:-K PIC} %{fPIC:-K PIC} \
%{mlittle-endian:-EL} \
%(asm_cpu) %(asm_arch) \
"

/* Layout of source language data types.  */
#undef WCHAR_TYPE
#define WCHAR_TYPE "int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE 32

#undef LONG_DOUBLE_TYPE_SIZE
#define LONG_DOUBLE_TYPE_SIZE 128

#undef LINK_SPEC
#define LINK_SPEC \
  "%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \
   %{shared:-shared} %{R*} \
   %{static:-Bstatic} \
   %{!static:-Bdynamic} \
   %{assert*} \
   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}"

/* For profiled binaries we have to change the memory model.  */
#undef CC1_SPEC
#define CC1_SPEC "%{p*:-mcmodel=medlow} %{p:-mcmodel=medlow}"

/* As an elf system, we need crtbegin/crtend stuff.  */
#undef STARTFILE_SPEC
#define STARTFILE_SPEC "\
        %{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \
        crtbegin%O%s} %{shared:crtbeginS%O%s}"
#undef ENDFILE_SPEC
#define ENDFILE_SPEC "%{!shared:crtend%O%s} %{shared:crtendS%O%s}"

/* A C statement (sans semicolon) to output an element in the table of
   global constructors.  */
#undef ASM_OUTPUT_CONSTRUCTOR
#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)				\
  do {									\
    ctors_section ();							\
    fprintf ((FILE), "\t%s\t ", TARGET_ARCH64 ? ASM_LONGLONG : INT_ASM_OP) ; \
    assemble_name ((FILE), (NAME));					\
    fprintf ((FILE), "\n");						\
  } while (0)

/* A C statement (sans semicolon) to output an element in the table of
   global destructors.  */
#undef ASM_OUTPUT_DESTRUCTOR
#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)				\
  do {									\
    dtors_section ();							\
    fprintf ((FILE), "\t%s\t ", TARGET_ARCH64 ? ASM_LONGLONG : INT_ASM_OP); \
    assemble_name ((FILE), (NAME));					\
    fprintf ((FILE), "\n");						\
  } while (0)

/* problems occur if we're too liberal in preserve_subexpressions_p */
#define	BROKEN_PRESERVE_SUBEXPRESSIONS_P
@


1.10
log
@typo in comment, compiler vs. complier
@
text
@@


1.9
log
@On some architectures, being too optimistic in preserve_subexpressions_p(),
for example when -fexpensive-optimizations is used, sometimes causes incorrect
code sequences to be generated.

As -fexpensive-optimizations is implied by -O2, this means we are potentially
affected by this in numerous places... so add a specific workaround to nullify
expensizve-optimizations in preserve_subexpressions_p() on a
known-to-be-affected basis.

So far, only alpha, powerpc, m88k, sparc and sparc64 are affected.

Problem tracked down by henning@@ - analysis by etoh@@ and I - ugly workaround
by me - ok deraadt@@
@
text
@d36 1
a36 1
/* A 64 bit v9 complier in a Medium/Mid code model.  */
@


1.8
log
@openbsd64 is a 64 BIT (not but) v9 processor; pointed out by millert.
@
text
@d118 2
@


1.7
log
@now that gcc generates "correct" calls to the quad emulation library and
the libc functions are in place, remove HARD_QUAD from sparc64.  (If you
actually want it, for some demented reason, look at -mhard-quad-float,
void where prohibited).
@
text
@d36 1
a36 1
/* A 64 but v9 complier in a Medium/Mid code model.  */
@


1.6
log
@add __LP64__ and _LP64 CPP predefines for systems using LP64.

pvalchev@@ fgsch@@ millert@@ ok
@
text
@a37 1
/* XXX - do we really want HARD_QUAD? */
d40 1
a40 1
(MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \
@


1.5
log
@Change the memory model from some home-grown thing that looks to have been
designed for mmu-less systems to something more decent that doesn't conflict
with how gcc sometimes generates code.

WARNING! This breaks binary compatibility. Reinstall from snapshots.
Upgrades won't work!

I repeat, upgrades won't work! Reinstall.
@
text
@d49 3
a51 1
#define CPP_PREDEFINES "-D__unix__ -D__sparc__ -D__sparc64__ -D__sparcv9__ -D__sparc_v9__ -D__arch64__ -D__ELF__ -D__OpenBSD__ -Asystem(unix) -Asystem(OpenBSD) -Acpu(sparc) -Amachine(sparc)"
@


1.4
log
@predefine __sparc_v9__ on sparc64; ok art, espie
@
text
@d33 14
d54 10
d70 3
@


1.3
log
@Force memory model to medlow for profiling.
espie@@ ok.
@
text
@d35 1
a35 1
#define CPP_PREDEFINES "-D__unix__ -D__sparc__ -D__sparc64__ -D__sparcv9__ -D__arch64__ -D__ELF__ -D__OpenBSD__ -Asystem(unix) -Asystem(OpenBSD) -Acpu(sparc) -Amachine(sparc)"
@


1.2
log
@ctor/dtor emission, stolen from solaris2.
Plus, no sjlj by default.
@
text
@d56 4
@


1.1
log
@Initial cut at sparc64 gcc config.
Polished by art.
@
text
@d64 22
a85 2
/* Use sjlj exceptions.  */
#define DWARF2_UNWIND_INFO 0
@

