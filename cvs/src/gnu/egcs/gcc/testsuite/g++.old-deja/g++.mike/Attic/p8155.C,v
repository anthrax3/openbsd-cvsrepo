head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.1.0.58
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.56
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.54
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.52
	OPENBSD_5_0:1.1.1.1.0.50
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.48
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.46
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.42
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.44
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.40
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.38
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.36
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.34
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.32
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.30
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.28
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.26
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.24
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.22
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.20
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.18
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.16
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	GCC-2_95_pre3_test2:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	GCC-2_95_pre3_20000916:1.1.1.1
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.08.06.19.16.57;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.37.14;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.37.14;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@// prms-id: 8155

int fail = 1;

class CMainWindow;
class CFrameWnd;
class CWnd;
class CCmdTarget;
 
typedef void (CCmdTarget::*AFX_PMSG)( void);
typedef void (CWnd::*AFX_PMSGW)( void);

struct AFX_MSGMAP_ENTRY {
  unsigned int  nMessage;    
  AFX_PMSG pfn;
};

struct AFX_MSGMAP {
  const AFX_MSGMAP* pBaseMap;
  const AFX_MSGMAP_ENTRY* lpEntries;
};

class CCmdTarget {
public:
  CCmdTarget();
private:
  static AFX_MSGMAP_ENTRY _messageEntries[];
protected:
  static const AFX_MSGMAP messageMap;
  virtual const AFX_MSGMAP* GetMessageMap() const; 
};

const   AFX_MSGMAP CCmdTarget::messageMap = {
  0, &CCmdTarget::_messageEntries[0]
};

const AFX_MSGMAP* CCmdTarget::GetMessageMap() const {
  return &CCmdTarget::messageMap;
}

AFX_MSGMAP_ENTRY CCmdTarget::_messageEntries[] =
{
  { 0, 0 }
};

CCmdTarget :: CCmdTarget() { }
 
class CWnd : public CCmdTarget {
public:
  CWnd();

protected:
  void OnPaint();
private:
  static AFX_MSGMAP_ENTRY _messageEntries[];
protected:
  static   const AFX_MSGMAP messageMap;
  virtual const AFX_MSGMAP* GetMessageMap() const; 
};

CWnd :: CWnd() {
}

void CWnd :: OnPaint() {
}

const AFX_MSGMAP*   CWnd ::GetMessageMap() const {
  return &  CWnd ::messageMap;
}
const AFX_MSGMAP   CWnd ::messageMap = {
  &  CCmdTarget ::messageMap, &  CWnd ::_messageEntries[0]
  };
AFX_MSGMAP_ENTRY   CWnd ::_messageEntries[] = { 
  {0, (AFX_PMSG)0 } }; 

class CFrameWnd : public CWnd {
public:
  CFrameWnd();
protected:
private:
  static AFX_MSGMAP_ENTRY _messageEntries[];
protected:
  static   const AFX_MSGMAP messageMap;
  virtual const AFX_MSGMAP* GetMessageMap() const; 
};

CFrameWnd :: CFrameWnd() { }

const AFX_MSGMAP*   CFrameWnd ::GetMessageMap() const {
  return &  CFrameWnd ::messageMap;
}
const AFX_MSGMAP   CFrameWnd ::messageMap = {
  &  CWnd ::messageMap, &  CFrameWnd ::_messageEntries[0]
  };
AFX_MSGMAP_ENTRY   CFrameWnd ::_messageEntries[] = { 
  {0, (AFX_PMSG)0 } }; 

class CMainWindow : public CFrameWnd {
public:
  CMainWindow();
  void OnPaint();
  void callProc();
private:
  static AFX_MSGMAP_ENTRY _messageEntries[];
protected:
  static   const AFX_MSGMAP messageMap;
  virtual const AFX_MSGMAP* GetMessageMap() const; 
};

CMainWindow :: CMainWindow()
{
}
void CMainWindow :: OnPaint()
{
  fail = 0;
}

void CMainWindow :: callProc()
{
  const AFX_MSGMAP* pMessageMap;
  const AFX_MSGMAP_ENTRY *lpEntry;

  pMessageMap = GetMessageMap();
  lpEntry = pMessageMap->lpEntries;

  if( lpEntry->nMessage == 100) {
    (this->*lpEntry->pfn)();
  }
}

const AFX_MSGMAP*   CMainWindow ::GetMessageMap() const {
  return &  CMainWindow ::messageMap;
}
const AFX_MSGMAP   CMainWindow ::messageMap = {
  &  CFrameWnd ::messageMap, &  CMainWindow ::_messageEntries[0]
  };
AFX_MSGMAP_ENTRY   CMainWindow ::_messageEntries[] = { 
  { 100, (AFX_PMSG)(AFX_PMSGW)(void (CWnd::*)(void))&CMainWindow::OnPaint },
  {0, (AFX_PMSG)0 }
}; 

int main( int argc, char **argv) {
  CMainWindow     myWindow;

  myWindow.callProc();
  return fail;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@
