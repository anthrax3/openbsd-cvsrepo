head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.1.0.58
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.56
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.54
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.52
	OPENBSD_5_0:1.1.1.1.0.50
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.48
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.46
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.42
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.44
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.40
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.38
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.36
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.34
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.32
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.30
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.28
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.26
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.24
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.22
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.20
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.18
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.16
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	GCC-2_95_pre3_test2:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	GCC-2_95_pre3_20000916:1.1.1.1
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.16.49;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.36.26;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.36.26;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@This file contains a list of notes for those writing testcases and those
writing expect scripts.  At present, they're in random order.

Verbosity Levels

- each level adds verbosity so level 2 prints all level 1 and level 2 stuff.

1) Print a one-liner indicating the testcase being run (and maybe special
   compiler options).

2) Print compiler and program invocation including arguments and their output.
   Proc's gcc_load and gcc_start handle the latter two.

3) Print detailed testcase analysis like "Looking for pattern ...", etc.

4) Maximum verbosity.  Print anything else of interest.

send_log conventions

Various messages are stored in gcc.log by the testing framework and we
try to augment them with some of our own.  The format of the framework
messages are:

PASS: blah blah ...
FAIL: blah blah ...

so we use

XXXX: blah blah ...

Current messages are:

EXEC: program being executed (so compiler path and args are recorded)
STAT: intermediate pass/fail statistics

Test scripts must ignore the compiler messages "path prefix never used"
and "linker input file unused".  Don't let their appearance cause a testcase
to fail.  See lib/dg.exp for the exact regsub to use.

If you're unclear about which directory a testcase should be installed in,
ask gcc-local.

Have the text of a fail message be the same as that for pass.
IE: have

        if ...success...
                pass "pr 1234"
        else
                fail "pr 1234"

not

        if ...success...
                pass "pr 1234 passed"
        else
                fail "pr 1234 failed"


This lets test-tool (which drives the nightly tests) do a better job
at tracking which tests have digressed or been fixed.

DO NOT PUT NON-PORTABLE TESTCASES IN gcc.c-torture.

ANY TARGET SPECIFIC TESTCASE MUST HAVE APPROPRIATE CODE TO PREVENT IT FROM
CAUSING A `FAILURE' ON UNSUPPORTED PLATFORMS.

The "torture" tests are meant to be generic tests that can run on any
target.  So you have to be careful about endianness, assumptions about
sizes of datatypes, etc etc.

For tests that merely need to compile, put them in the "compile" directory.

For tests which should give an error, put them in the "noncompile" directory
and update noncompile.exp appropriately (see examples in noncompile.exp).

For IEEE FP specific tests, put them in execute/ieee.

For execution tests, put them in execute.

Always use abort() for runtime failures, and exit(0) for success.
The testing harness is set up to watch for these and do something appropriate
(when necessary) for target boards.

If a test does not fit into the torture framework, use the dg framework.



@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@
