head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.1.0.58
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.56
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.54
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.52
	OPENBSD_5_0:1.1.1.1.0.50
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.48
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.46
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.42
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.44
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.40
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.38
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.36
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.34
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.32
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.30
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.28
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.26
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.24
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.22
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.20
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.18
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.16
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	GCC-2_95_pre3_test2:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	GCC-2_95_pre3_20000916:1.1.1.1
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.08.06.19.17.05;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.37.49;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.37.49;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@typedef	char *	caddr_t;
typedef unsigned Cursor;
typedef char *String;
typedef struct _WidgetRec *Widget;
typedef char		Boolean;
typedef unsigned int	Cardinal;
typedef struct _XedwListReturnStruct {
  String   string;
  int      xedwList_index;
  struct _XedwListReturnStruct *next;
} XedwListReturnStruct;
static XedwListReturnStruct *return_list;
static String   srcdir, dstdir;
char *strcpy();
  extern void setCursor(Cursor);
  extern void query_dialog(String, Boolean);
  extern Boolean directoryManagerNewDirectory(String);
trashQueryResult(Widget w, Boolean delete, caddr_t call_data)
{
  int  execute(String, String, String, Boolean);
  extern void destroy_button_dialog(void);
  extern void changestate(Boolean);

  extern Cursor busy, left_ptr;
  extern String cwd;
      	static void freeReturnStruct(void);
  String rmstring;
  int status;
  XedwListReturnStruct *tmp;
  setCursor(busy);
  destroy_button_dialog();
  if (delete == 1) {
    rmstring = (("rm -fr") != ((void *)0) ? (strcpy((char*)XtMalloc((unsigned)strlen("rm -fr") + 1), "rm -fr")) : ((void *)0));
    tmp = return_list;
    while (tmp != ((void *)0)) {
      rmstring = (String) XtRealloc (rmstring, sizeof(char) *
				     (strlen(rmstring) +
				      strlen(tmp->string) + 5));
      sprintf(rmstring, "%s '%s'", rmstring, tmp->string);
      tmp = tmp->next;
    }
    if ((status = execute(((void *)0), "rm", rmstring, 1)) != 0) {
      XBell(XtDisplay(w), 100);
      query_dialog("Can't remove file", 0);
    }
    XtFree(rmstring);

    directoryManagerNewDirectory(cwd);
  } else {
    changestate(1);
  }
  setCursor(left_ptr);
  freeReturnStruct();
}

copyQueryResult(Widget w, Boolean copy, caddr_t call_data)
{
  extern void destroy_button_dialog();
  extern void changestate(Boolean);
  extern Cursor busy, left_ptr;
  static void freeReturnStruct(void);
  int execute(String, String, String, Boolean);
  extern String cwd;
  String copystring;
  int status;
  Cardinal srclen, dstlen;
  XedwListReturnStruct *tmp;
  destroy_button_dialog();
  setCursor(busy);
  if (copy == 1) {
    srclen = strlen(srcdir);
    dstlen = strlen(dstdir);
    copystring = (("cp -r") != ((void *)0) ? (strcpy((char*)XtMalloc((unsigned)strlen("cp -r") + 1), "cp -r")) : ((void *)0));
    tmp = return_list;
    while (tmp != ((void *)0)) {
      copystring = (String) XtRealloc (copystring, sizeof(char) *
				       (strlen(copystring) +
					strlen(tmp->string) +
					srclen + 6));
      sprintf(copystring, "%s '%s/%s'", copystring, srcdir, tmp->string);
      tmp = tmp->next;
    }
    copystring = (String) XtRealloc (copystring, sizeof(char) *
				     (strlen(copystring) +
				      dstlen + 5));
    sprintf(copystring, "%s '%s'", copystring, dstdir);
    if ((status = execute(((void *)0), "cp", copystring, 1)) != 0) {
      XBell(XtDisplay(w), 100);
      query_dialog("Can't copy file!", 0);
    }
    XtFree(copystring);

    directoryManagerNewDirectory(cwd);
  } else {
    changestate(1);
  }
  XtFree(srcdir);
  XtFree(dstdir);
  setCursor(left_ptr);
  freeReturnStruct();
}

freeReturnStruct(){}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@
