head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.1.0.58
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.56
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.54
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.52
	OPENBSD_5_0:1.1.1.1.0.50
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.48
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.46
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.42
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.44
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.40
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.38
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.36
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.34
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.32
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.30
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.28
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.26
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.24
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.22
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.20
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.18
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.16
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	GCC-2_95_pre3_test2:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	GCC-2_95_pre3_20000916:1.1.1.1
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@c @;


1.2
date	2013.08.06.19.17.05;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.37.45;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.37.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@* Test automatic arrays.
      program auto1
      implicit none
      integer i
      integer j0(40)
      integer j1(40)
      integer jc0(40)
      integer jc1(40)
      common /jc0/ jc0
      common /jc1/ jc1

      data j0/40*3/
      data j1/40*4/

      i = 40
      call a1 (j0, j1, i)

      do i = 1, 40
         if (j0(i) .ne. 4) call abort
         if (j1(i) .ne. 3) call abort
         if (jc0(i) .ne. 6) call abort
         if (jc1(i) .ne. 5) call abort
      end do

      end

      block data jc
      implicit none
      integer jc0(40)
      integer jc1(40)
      common /jc0/ jc0
      common /jc1/ jc1

      data jc0/40*5/
      data jc1/40*6/

      end

      subroutine a1 (j0, j1, n)
      implicit none
      integer j0(40), j1(40), n
      integer k0(n,3,2), k1(n,3,2)
      integer i,j,k
      integer jc0(40)
      integer jc1(40)
      common /jc0/ jc0
      common /jc1/ jc1

      do i = 1, 40
         j0(i) = j1(i) - j0(i)
         jc0(i) = jc1(i) - jc0(i)
      end do

      n = -1

      do k = 1, 2
         do j = 1, 3
            do i = 1, 40
               k0(i, j, k) = n
               k1(i, j, k) = n
            end do
         end do
      end do

      do i = 1, 40
         j1(i) = j1(i) + k0(i, 3, 2) * j0(i)
         jc1(i) = jc1(i) + k1(i, 1, 1) * jc0(i)
      end do

      n = 500

      do k = 1, 2
         do j = 1, 3
            do i = 1, 40
               if (k0(i, j, k) .ne. -1) call abort
               k0(i, j, k) = n
               if (k1(i, j, k) .ne. -1) call abort
               k1(i, j, k) = n
            end do
         end do
      end do

      do i = 1, 40
         j0(i) = j1(i) + j0(i)
         jc0(i) = jc1(i) + jc0(i)
      end do

      end
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@
