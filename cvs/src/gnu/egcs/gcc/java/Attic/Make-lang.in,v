head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.3.0.58
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.56
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.54
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.52
	OPENBSD_5_0:1.1.1.3.0.50
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.48
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.46
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.42
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.44
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.40
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.38
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.36
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.34
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.32
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.30
	OPENBSD_4_0_BASE:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.28
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.26
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.24
	OPENBSD_3_7_BASE:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.22
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.20
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.18
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.16
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.14
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.12
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.10
	OPENBSD_3_0_BASE:1.1.1.3
	OPENBSD_2_9:1.1.1.3.0.8
	OPENBSD_2_9_BASE:1.1.1.3
	GCC-2_95_pre3_test3:1.1.1.3
	GCC-2_95_pre3_test2:1.1.1.3
	OPENBSD_2_8:1.1.1.3.0.6
	OPENBSD_2_8_BASE:1.1.1.3
	GCC-2_95_pre3_20000916:1.1.1.3
	GCC-2_95_pre3_20000527:1.1.1.3
	OPENBSD_2_7:1.1.1.3.0.4
	OPENBSD_2_7_BASE:1.1.1.3
	GCC-2_95_2:1.1.1.3
	OPENBSD_2_6:1.1.1.3.0.2
	OPENBSD_2_6_BASE:1.1.1.3
	GCC-2_95_1:1.1.1.3
	CYGNUS-990718:1.1.1.3
	CYGNUS-990629:1.1.1.3
	CYGNUS-990608:1.1.1.2
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.16.49;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.36.17;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.36.17;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.06.17.21.09.33;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.18.16.38.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@# Top level makefile fragment for the GNU compiler for the Java(TM)
# language.
#   Copyright (C) 1996, 1998, 1999 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

#Java and all Java-based marks are trademarks or registered trademarks
#of Sun Microsystems, Inc. in the United States and other countries.
#The Free Software Foundation is independent of Sun Microsystems, Inc.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: jc1)
# - define the names for selecting the language in LANGUAGES.
#
# Extra flags to pass to recursive makes.
JAVA_FLAGS_TO_PASS = \
	"JAVA_FOR_BUILD=$(JAVA_FOR_BUILD)" \
	"JAVAFLAGS=$(JAVAFLAGS)" \
	"JAVA_FOR_TARGET=$(JAVA_FOR_TARGET)"

# Actual names to use when installing a native compiler.
JAVA_INSTALL_NAME = `t='$(program_transform_name)'; echo gcj | sed $$t`

# Actual names to use when installing a cross-compiler.
JAVA_CROSS_NAME = `t='$(program_transform_cross_name)'; echo gcj | sed $$t`

#
GCJ = gcj

# Define the names for selecting java in LANGUAGES.
java: jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext)

# Define the name of target independant tools to be installed in $(bindir)
# Names are subject to changes
JAVA_TARGET_INDEPENDENT_BIN_TOOLS = gcjh jv-scan jcf-dump

# Tell GNU make to ignore these if they exist.
.PHONY: java

# Remember to keep this list in sync with JAVA_OBJS in Makefile.in!!!
#
JAVA_SRCS = $(srcdir)/java/parse.y $(srcdir)/java/class.c \
  $(srcdir)/java/decl.c $(srcdir)/java/expr.c $(srcdir)/java/constants.c \
  $(srcdir)/java/lang.c $(srcdir)/java/typeck.c $(srcdir)/java/except.c \
  $(srcdir)/java/verify.c $(srcdir)/java/zextract.c $(srcdir)/java/jcf-io.c \
  $(srcdir)/java/jcf-parse.c $(srcdir)/java/mangle.c \
  $(srcdir)/java/jcf-write.c $(srcdir)/java/buffer.c \
  $(srcdir)/java/check-init.c \
  $(srcdir)/java/jcf-depend.c  $(srcdir)/java/jcf-path.c

jc1$(exeext): $(P) $(JAVA_SRCS) $(LIBDEPS) stamp-objlist
	cd java; $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jc1$(exeext)

jvspec.o: $(srcdir)/java/jvspec.c
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \
		$(INCLUDES) $(srcdir)/java/jvspec.c

# Create the compiler driver for $(GCJ).
$(GCJ)$(exeext): gcc.o jvspec.o version.o \
	   prefix.o intl.o $(LIBDEPS) $(EXTRA_GCC_OBJS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@@ gcc.o jvspec.o prefix.o intl.o \
	  version.o $(EXTRA_GCC_OBJS) $(LIBS)

# Create a version of the $(GCJ) driver which calls the cross-compiler.
$(GCJ)-cross$(exeext): $(GCJ)$(exeext)
	-rm -f $(GCJ)-cross$(exeext)
	cp $(GCJ)$(exeext) $(GCJ)-cross$(exeext)

# Dependencies here must be kept in sync with dependencies in Makefile.in.
jvgenmain$(exeext): $(srcdir)/java/jvgenmain.c $(srcdir)/java/mangle.c \
		$(OBSTACK) $(LIBDEPS)
	cd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jvgenmain$(exeext)

# This must be kept in sync with dependencies in Makefile.in.
GCJH_SOURCES = $(srcdir)/java/gjavah.c $(srcdir)/java/jcf-io.c \
	$(srcdir)/java/zextract.c $(srcdir)/java/jcf-reader.c \
	$(srcdir)/java/jcf.h $(srcdir)/java/javaop.h \
	$(srcdir)/java/javaop.def $(srcdir)/java/jcf-depend.c \
	$(srcdir)/java/jcf-path.c

gcjh$(exeext): $(GCJH_SOURCES) $(LIBDEPS)
	cd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../gcjh$(exeext)

# This must be kept in sync with dependencies in Makefile.in.
JV_SCAN_SOURCES = $(srcdir)/java/parse-scan.y $(srcdir)/java/lex.c \
       $(srcdir)/java/parse.h $(srcdir)/java/lex.h $(srcdir)/java/jv-scan.c $(srcdir)/../libiberty/xmalloc.c $(srcdir)/../libiberty/xstrdup.c

jv-scan$(exeext): $(JV_SCAN_SOURCES) stamp-objlist $(LIBDEPS)
	cd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jv-scan$(exeext)

# This must be kept in sync with dependencies in Makefile.in.
JCF_DUMP_SOURCES = $(srcdir)/java/jcf-dump.c $(srcdir)/java/jcf-io.c \
       $(srcdir)/java/zextract.c $(srcdir)/../libiberty/memmove.c

jcf-dump$(exeext): $(JCF_DUMP_SOURCES)
	cd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jcf-dump$(exeext)

#
# Build hooks:

java.all.build: $(GCJ)$(exeext)
java.all.cross: $(GCJ)-cross$(exeext)
java.start.encap: $(GCJ)$(exeext)
java.rest.encap:

java.info:

# Install hooks:
# jc1, gcj, jvgenmain, and gcjh are installed elsewhere as part
# of $(COMPILERS).

# Nothing to do here.
java.install-normal:

java.install-common:
	-if [ -f $(GCJ)$(exeext) ]; then \
	  if [ -f $(GCJ)-cross$(exeext) ]; then \
	    rm -f $(bindir)/$(JAVA_CROSS_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) $(GCJ)-cross$(exeext) $(bindir)/$(JAVA_CROSS_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(JAVA_CROSS_NAME)$(exeext); \
	  else \
	    rm -f $(bindir)/$(JAVA_INSTALL_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) $(GCJ)$(exeext) $(bindir)/$(JAVA_INSTALL_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(JAVA_INSTALL_NAME)$(exeext); \
	  fi ; \
	fi ; \
        for tool in $(JAVA_TARGET_INDEPENDENT_BIN_TOOLS); do \
          if [ -f $$tool$(exeext) ]; then \
	    rm -f $(bindir)/$$tool$(exeext); \
	    $(INSTALL_PROGRAM) $$tool$(exeext) $(bindir)/$$tool$(exeext); \
	    chmod a+x $(bindir)/$$tool$(exeext); \
          fi ; \
       done

java.install-man:

java.uninstall:
	-rm -rf $(bindir)/$(JAVA_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(JAVA_CROSS_NAME)$(exeext)

java.install-info:

#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

java.mostlyclean:
	-rm -f java/*$(objext) $(DEMANGLER_PROG)
java.clean:
java.distclean:
	-rm -f java/config.status java/Makefile
	-rm -f java/parse.output
java.extraclean:
java.maintainer-clean:
	-rm -f java/parse.c java/parse-scan.c java/parse.output java/y.tab.c
#
# Stage hooks:
# The main makefile has already created stage?/java.

java.stage1:
	-mv java/*$(objext) stage1/java
java.stage2:
	-mv java/*$(objext) stage2/java
java.stage3:
	-mv java/*$(objext) stage3/java
java.stage4:
	-mv java/*$(objext) stage4/java
#
# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
java.distdir:
	mkdir tmp/java
	cd java ; $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) parse.c hash.h
	cd java; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/java >/dev/null 2>&1 || cp $$file ../tmp/java; \
	done
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@


1.1.1.2
log
@Update to 990608 snapshot.
Highlights:
- official fix for an alpha bug,
- cpp changes semantic slightly,
- valarray in libstdc++.
@
text
@d100 1
a100 1
		$(OBSTACK) $(LIBDEPS) $(TREE_H)
d110 1
a110 1
gcjh$(exeext): $(GCJH_SOURCES) $(LIBDEPS) $(TREE_H)
d122 1
a122 1
       $(srcdir)/java/zextract.c $(srcdir)/../libiberty/memmove.c $(TREE_H)
@


1.1.1.3
log
@Update to 990629 snapshot
closer to gcc 2.95 release.
@
text
@d190 1
a190 1
java.stage1: stage1-start
d192 1
a192 1
java.stage2: stage2-start
d194 1
a194 1
java.stage3: stage3-start
d196 1
a196 1
java.stage4: stage4-start
@


