head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.1.0.58
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.56
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.54
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.52
	OPENBSD_5_0:1.1.1.1.0.50
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.48
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.46
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.42
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.44
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.40
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.38
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.36
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.34
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.32
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.30
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.28
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.26
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.24
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.22
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.20
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.18
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.16
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	GCC-2_95_pre3_test3:1.1.1.1
	GCC-2_95_pre3_test2:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	GCC-2_95_pre3_20000916:1.1.1.1
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	GCC-2_95_2:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS-990718:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.16.49;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.36.18;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.36.18;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@/* Shift right, logical. */

DEFTREECODE (URSHIFT_EXPR, "urshift_expr", '2', 2)

/* Return -1, 0, 1 depending on whether the first argument is
   less, equal, or greater to the second argument. */
DEFTREECODE (COMPARE_EXPR, "compare_expr", '2', 2)

/* Same as COMPARE_EXPR, but if either value is NaN, the result is -1. */
DEFTREECODE (COMPARE_L_EXPR, "compare_l_expr", '2', 2)
/* Same as COMPARE_EXPR, but if either value is NaN, the result is 1. */
DEFTREECODE (COMPARE_G_EXPR, "compare_g_expr", '2', 2)

/* Unary plus. Operand 0 is the expression the unary plus is applied
   to */
DEFTREECODE (UNARY_PLUS_EXPR, "unary_plus_expr", '1', 1)

/* New array creation expression.
   Operand 0 is the array base type.
   Operand 1 is the list of dimension expressions. 
   Operand 2 is the number of other dimensions of unspecified range.
   Once patched, the node will bear the type of the created array.  */
DEFTREECODE (NEW_ARRAY_EXPR, "new_array_expr", 'e', 3)

/* New class creation expression.
   Operand 0 is the name of the class to be created
   Operand 1 is the argument list used to select a constructor.
   There is no operand 2.  That slot is used for the
   CALL_EXPR_RTL macro (see preexpand_calls).
   The type should be the one of the created class.  */
DEFTREECODE (NEW_CLASS_EXPR, "new_class_expr", 'e', 3)

/* Defines `this' as an expression.  */
DEFTREECODE (THIS_EXPR, "this", '1', 0)

/* Case statement expression.
   Operand 1 is the case value.  */
DEFTREECODE (CASE_EXPR, "case", 'x', 1)

/* Default statement expression. */
DEFTREECODE (DEFAULT_EXPR, "default", 'x', 0)

/* Try expression
   Operand 0 is the tried block,
   Operand 1 contains chained catch nodes. */
DEFTREECODE (TRY_EXPR, "try-catch-finally", 'e', 2)

/* Catch clause.
   Operand 0 is the catch clause block, which contains the declaration of
   the catch clause parameter.  */
DEFTREECODE (CATCH_EXPR, "catch", '1', 1)

/* Synchronized statement.
   Operand 0 is the expression on which we whish to synchronize,
   Operand 1 is the synchronized expression block.  */
DEFTREECODE (SYNCHRONIZED_EXPR, "synchronized", 'e', 2)

/* Throw statement.
   Operand 0 is the throw expresion.  */
DEFTREECODE (THROW_EXPR, "throw", '1', 1)

/* Conditional operator.
   Operand 0 is the condition expression
   Operand 1 is the then-value
   Operand 2 is the else-value.  */
DEFTREECODE (CONDITIONAL_EXPR, "?:", 'e', 3)

/* instanceof operator.
   Operand 0 is the expression that is getting tested
   Operand 1 is the class used for the test.  */
DEFTREECODE (INSTANCEOF_EXPR, "instanceof", 'e', 2)

/* Array initializers.
   Operand 0 is the (sub) array target to initialize, left to NULL_TREE
   when the node is created.
   Operand 1 is a CONSTRUCTOR node.  */
DEFTREECODE (NEW_ARRAY_INIT, "new_array_init", '1', 1)
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@
