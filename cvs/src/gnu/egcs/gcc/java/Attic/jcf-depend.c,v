head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.1.0.58
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.56
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.54
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.52
	OPENBSD_5_0:1.1.1.1.0.50
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.48
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.46
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.42
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.44
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.40
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.38
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.36
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.34
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.32
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.30
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.28
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.26
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.24
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.22
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.20
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.18
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.16
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	GCC-2_95_pre3_test3:1.1.1.1
	GCC-2_95_pre3_test2:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	GCC-2_95_pre3_20000916:1.1.1.1
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	GCC-2_95_2:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS-990718:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.08.06.19.16.49;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.36.18;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.36.18;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@/* Functions for handling dependency tracking when reading .class files.

   Copyright (C) 1998  Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  

Java and all Java-based marks are trademarks or registered trademarks
of Sun Microsystems, Inc. in the United States and other countries.
The Free Software Foundation is independent of Sun Microsystems, Inc.  */

/* Written by Tom Tromey <tromey@@cygnus.com>, October 1998.  */

#include "config.h"
#include "system.h"

#include <assert.h>

#include "jcf.h"



/* We keep a linked list of all the files we've already read.  */
struct entry
{
  char *file;
  struct entry *next;
};

/* List of files.  */
static struct entry *dependencies = NULL;

/* Name of targets.  We support multiple targets when writing .class
   files.  */
static struct entry *targets = NULL;

/* Number of columns in output.  */
#define MAX_OUTPUT_COLUMNS 72

/* The output file, or NULL if we aren't doing dependency tracking.  */
static FILE *dep_out = NULL;

/* Nonzero if system files should be added.  */
static int system_files;



/* Helper to free an entry list.  */
static void
free_entry (entp)
     struct entry **entp;
{
  struct entry *ent, *next;

  for (ent = *entp; ent != NULL; ent = next)
    {
      next = ent->next;
      free (ent->file);
      free (ent);
    }
  *entp = NULL;
}

/* Helper to add to entry list.  */
static void
add_entry (entp, name)
     struct entry **entp;
     char *name;
{
  struct entry *ent;

  for (ent = *entp; ent != NULL; ent = ent->next)
    if (! strcmp (ent->file, name))
      return;

  ent = (struct entry *) malloc (sizeof (struct entry));
  ent->file = strdup (name);
  ent->next = *entp;
  *entp = ent;
}

/* Call this to reset the dependency module.  This is required if
   multiple dependency files are being generated from a single tool
   invocation.  */
void
jcf_dependency_reset ()
{
  free_entry (&dependencies);
  free_entry (&targets);

  if (dep_out != NULL)
    {
      if (dep_out != stdout)
	fclose (dep_out);
      dep_out = NULL;
    }
}

void
jcf_dependency_set_target (name)
     char *name;
{
  free_entry (&targets);
  if (name != NULL)
    add_entry (&targets, name);
}

void
jcf_dependency_add_target (name)
     char *name;
{
  add_entry (&targets, name);
}

void
jcf_dependency_set_dep_file (name)
     const char *name;
{
  assert (dep_out != stdout);
  if (dep_out)
    fclose (dep_out);
  if (! strcmp (name, "-"))
    dep_out = stdout;
  else
    dep_out = fopen (name, "w");
}

void
jcf_dependency_add_file (filename, system_p)
     const char *filename;
     int system_p;
{
  /* Just omit system files.  */
  if (system_p && ! system_files)
    return;

  add_entry (&dependencies, filename);
}

void
jcf_dependency_init (system_p)
     int system_p;
{
  system_files = system_p;
}

/* FIXME: this is taken almost directly from cccp.c.  Such duplication
   is bad.  */
static char *
munge (filename)
     char *filename;
{
  static char *buffer = NULL;
  static int buflen = 0;

  int len = 2 * strlen (filename) + 1;
  char *p, *dst;

  if (buflen < len)
    {
      buflen = len;
      if (buffer == NULL)
	buffer = malloc (buflen);
      else
	buffer = realloc (buffer, buflen);
    }

  dst = buffer;
  for (p = filename; *p; ++p)
    {
      switch (*p)
	{
	case ' ':
	case '\t':
	  {
	    /* GNU make uses a weird quoting scheme for white space.
	       A space or tab preceded by 2N+1 backslashes represents
	       N backslashes followed by space; a space or tab
	       preceded by 2N backslashes represents N backslashes at
	       the end of a file name; and backslashes in other
	       contexts should not be doubled.  */
	    char *q;
	    for (q = p - 1; filename < q && q[-1] == '\\';  q--)
	      *dst++ = '\\';
	  }
	  *dst++ = '\\';
	  goto ordinary_char;

	case '$':
	  *dst++ = '$';
	  /* Fall through.  This can mishandle things like "$(" but
	     there's no easy fix.  */
	default:
	ordinary_char:
	  /* This can mishandle characters in the string "\0\n%*?[\\~";
	     exactly which chars are mishandled depends on the `make' version.
	     We know of no portable solution for this;
	     even GNU make 3.76.1 doesn't solve the problem entirely.
	     (Also, '\0' is mishandled due to our calling conventions.)  */
	  *dst++ = *p;
	  break;
	}
    }

  *dst++ = '\0';
  return buffer;
}

/* Helper to print list of files.  */
static int
print_ents (ent, column)
     struct entry *ent;
     int column;
{
  int first = 1;

  for (; ent != NULL; ent = ent->next)
    {
      char *depname = munge (ent->file);
      int len = strlen (depname);

      if (column + len + 2 > MAX_OUTPUT_COLUMNS)
	{
	  fprintf (dep_out, " \\\n ");
	  column = 1;
	}

      if (! first)
	fputs (" ", dep_out);
      fputs (depname, dep_out);
      first = 0;
      column += len + 1;
    }

  return column;
}

void
jcf_dependency_write ()
{
  int column = 0;

  if (! dep_out)
    return;

  assert (targets);
  column = print_ents (targets, 0);
  fputs (" : ", dep_out);

  print_ents (dependencies, column);
  fputs ("\n", dep_out);
  fflush (dep_out);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@
