head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.1.0.58
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.56
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.54
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.52
	OPENBSD_5_0:1.1.1.1.0.50
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.48
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.46
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.42
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.44
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.40
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.38
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.36
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.34
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.32
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.30
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.28
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.26
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.24
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.22
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.20
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.18
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.16
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	GCC-2_95_pre3_test3:1.1.1.1
	GCC-2_95_pre3_test2:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	GCC-2_95_2:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS-990718:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.17.14;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.38.45;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.38.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@# Copyright (C) 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-lib-g++@@prep.ai.mit.edu

# This file was written by Bob Manson. (manson@@cygnus.com)

load_lib "libgloss.exp"

global base_dir

proc libio_init { args } {
    global wrapper_file;
    global wrap_compile_flags;
    set wrapper_file "";
    set wrap_compile_flags "";
    if [target_info exists needs_status_wrapper] {
	set result [build_wrapper "testglue.o"];
	if { $result != "" } {
	    set wrapper_file [lindex $result 0];
	    set wrap_compile_flags [lindex $result 1];
	} else {
	    warning "Status wrapper failed to build."
	}
    }
}
#
# Run the test specified by srcfile and resultfile. compile_args and
# exec_args are additional arguments to be passed in when compiling and
# running the testcase, respectively.
#

proc test_libio { srcfile compile_args inpfile resultfile exec_args } {
    global LIBIO
    global srcdir subdir objdir
    global TOOL_OPTIONS
    global wrapper_file wrap_compile_flags
    global ld_library_path

    if { $inpfile != "" } {
	set inpfile "$srcdir/../tests/$inpfile"
    }

    set args ""
    set ld_library_path ""
    lappend args "additional_flags=-O3";
    lappend args "additional_flags=-I.. -I$srcdir/.."
    lappend args "additional_flags=$wrap_compile_flags";
    lappend args "libs=$wrapper_file";
    if { $compile_args != "" } {
	lappend args "additional_flags=$compile_args"
    }

    if [regexp "\.cc$" $srcfile] {
	lappend args "additional_flags=-nostdinc++"
	lappend args "additional_flags=[libstdc++_include_flags]";
	lappend args "additional_flags=[libstdc++_link_flags]";
	lappend args "libs=-lstdc++"
    } else {
	if [info exists LIBIO] {
	    lappend args "libdir=$LIBIO"
	} else {
	    lappend args "additional_flags=[libio_link_flags]";
	}
	lappend args "additional_flags=[libio_link_flags]";
	lappend args "libs=-lio"
    }

    if [target_info exists slow_simulator] then {
      lappend args "additional_flags=-DSLOW_SIMULATOR"
    }

    if [info exists TOOL_OPTIONS] {
	lappend args "additional_options=$TOOL_OPTIONS"
    }

    set gp [get_multilibs];
    if { $gp != "" } {
	if [file exists $gp/libiberty/libiberty.a] {
	    lappend args "libdir=$gp/libiberty";
	    set found_libiberty 1;
	}
    }
    if ![info exists found_libiberty] {
	set lib [lookfor_file "$objdir" "libiberty/libiberty.a"];
	if { $lib != "" } {
	    lappend args "libdir=[file dirname $lib]";
	}
    }
    lappend args "libs=-liberty"
    lappend args "debug";

    set errname "$srcfile"
    set srcfile "$srcdir/../tests/$srcfile"
    regsub "\\..*$" "[file tail $srcfile]" "" executable
    set executable "$objdir/$executable"

    if { [target_compile $srcfile $executable executable $args] != "" } {
	fail "$errname compilation $exec_args";
	setup_xfail "*-*-*"
	fail "$errname execution $exec_args"
	if { $resultfile != "" } {
	    setup_xfail "*-*-*"
	    fail "$errname output $exec_args"
	}
	return;
    }
    pass "$errname compilation $exec_args"

    set result [libio_load $executable $exec_args $inpfile];
    set status [lindex $result 0];
    set output [lindex $result 1];
    if { $status == "unsupported" } {
	unsupported "target does not support loading $srcfile"
	return;
    }
    if { $status != "pass" } {
	$status "$errname execution $exec_args"
	setup_xfail "*-*-*"
	fail "$errname output $exec_args"
	return;
    }
    pass "$errname execution $exec_args"

    if { $resultfile != "" } {
	set id [open $srcdir/../tests/$resultfile r];
	set expected ""
	append expected [read $id];
	verbose "expected is $expected"
	verbose "actual is $output"
	regsub -all "\r" $output "" output
	regsub "\n+$" $expected "" expected
	regsub "\n+$" $output "" output
	regsub "^\n+" $expected "" expected
	regsub "^\n+" $output "" output
	if { $expected == $output } {
	    pass "$errname output $exec_args"
	} else {
	    fail "$errname output $exec_args"
	}
	close $id;
    }
}

#
# libio_version -- extract and print the version number of libio
#
proc default_libio_version {} {
    global LIBIO
}

proc default_libio_start { } {
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@
