head	1.3;
access;
symbols
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	binutils-2_11_2:1.1.1.7
	OPENBSD_3_1:1.1.1.6.0.8
	OPENBSD_3_1_BASE:1.1.1.6
	OPENBSD_3_0:1.1.1.6.0.6
	OPENBSD_3_0_BASE:1.1.1.6
	OPENBSD_2_9:1.1.1.6.0.4
	OPENBSD_2_9_BASE:1.1.1.6
	OPENBSD_2_8:1.1.1.6.0.2
	OPENBSD_2_8_BASE:1.1.1.6
	binutils-2_10:1.1.1.6
	GCC-2_95_pre3_20000527:1.1.1.5
	OPENBSD_2_7:1.1.1.5.0.4
	OPENBSD_2_7_BASE:1.1.1.5
	GCC-2_95_2:1.1.1.5
	OPENBSD_2_6:1.1.1.5.0.2
	OPENBSD_2_6_BASE:1.1.1.5
	GCC-2_95_1:1.1.1.5
	CYGNUS-990718:1.1.1.4
	CYGNUS-990629:1.1.1.3
	CYGNUS-990608:1.1.1.2
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2003.11.24.17.18.22;	author espie;	state dead;
branches;
next	1.2;

1.2
date	2002.05.11.12.59.41;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	99.05.26.13.38.30;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.38.30;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.06.17.22.12.00;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.18.16.50.50;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.07.22.20.09.17;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.08.23.20.31.44;	author espie;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.07.26.11.56.10;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2002.05.11.12.44.45;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.3
log
@bye, bye, they moved.

(all these changes were okay'ed millert@@, btw)
@
text
@#
# Makefile
#   Copyright (C) 1990, 91 - 99, 2000
#   Free Software Foundation
#
# This file is part of the libiberty library.
# Libiberty is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# Libiberty is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with libiberty; see the file COPYING.LIB.  If not,
# write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#

# This file was written by K. Richard Pixley <rich@@cygnus.com>.

#
# Makefile for libiberty directory
#

srcdir = @@srcdir@@
VPATH = @@srcdir@@

prefix = @@prefix@@

exec_prefix = @@exec_prefix@@
bindir = @@bindir@@
libdir = @@libdir@@

SHELL = @@SHELL@@

# Multilib support variables.
MULTISRCTOP =
MULTIBUILDTOP =
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

AR = @@AR@@
AR_FLAGS = rc

CC = @@CC@@
CFLAGS = @@CFLAGS@@
LIBCFLAGS = $(CFLAGS)
RANLIB = @@RANLIB@@

PICFLAG =

MAKEOVERRIDES =

TARGETLIB = libiberty.a

LIBOBJS = @@LIBOBJS@@
ALLOCA = @@ALLOCA@@

# A configuration can specify extra .o files that should be included,
# even if they are in libc. (Perhaps the libc version is buggy.)
EXTRA_OFILES = 

# Flags to pass to a recursive make.
FLAGS_TO_PASS = \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS)" \
	"LIBCFLAGS=$(LIBCFLAGS)" \
	"EXTRA_OFILES=$(EXTRA_OFILES)" \
	"HDEFINES=$(HDEFINES)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"LDFLAGS=$(LDFLAGS)" \
	"LOADLIBES=$(LOADLIBES)" \
	"RANLIB=$(RANLIB)" \
	"SHELL=$(SHELL)" \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"libdir=$(libdir)" \
	"libsubdir=$(libsubdir)" \
	"tooldir=$(tooldir)"

# Subdirectories to recurse into. We need to override this during cleaning
SUBDIRS = testsuite

all: stamp-picdir $(TARGETLIB) needed-list required-list all-subdir
	@@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all

.PHONY: check installcheck
check: check-subdir
installcheck: installcheck-subdir

@@host_makefile_frag@@

INCDIR=$(srcdir)/$(MULTISRCTOP)../include

COMPILE.c = $(CC) -c @@DEFS@@ $(LIBCFLAGS) -I. -I$(INCDIR) $(HDEFINES) @@ac_libiberty_warn_cflags@@
.c.o:
	test x"$(enable_shared)" != xyes || \
	  $(COMPILE.c) $(PICFLAG) $< -o pic/$@@
	$(COMPILE.c) $<

info: info-subdir
install-info: install-info-subdir
clean-info: clean-info-subdir
dvi: dvi-subdir

# Include files that are in this directory.
HFILES = alloca-conf.h

# NOTE: If you add new files to the library, add them to this list
# (alphabetical), and add them to REQUIRED_OFILES or funcs in
# configure.in.
CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c	      \
	bzero.c calloc.c choose-temp.c clock.c concat.c cplus-dem.c fdmatch.c \
	fnmatch.c getcwd.c getpwd.c getopt.c getopt1.c getpagesize.c	      \
	getruntime.c floatformat.c hashtab.c hex.c index.c insque.c memchr.c  \
	memcmp.c memcpy.c memmove.c memset.c mkstemps.c objalloc.c obstack.c  \
	partition.c pexecute.c putenv.c random.c rename.c rindex.c	      \
	setenv.c sigsetmask.c spaces.c splay-tree.c strcasecmp.c	      \
	strncasecmp.c strchr.c strdup.c strerror.c strrchr.c		      \
	strsignal.c strstr.c strtod.c strtol.c strtoul.c tmpnam.c	      \
	vasprintf.c vfork.c vfprintf.c vprintf.c vsprintf.c waitpid.c	      \
	xatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c

# These are always included in the library.
REQUIRED_OFILES = argv.o choose-temp.o concat.o cplus-dem.o \
  fdmatch.o fnmatch.o getopt.o getopt1.o getpwd.o getruntime.o hashtab.o \
  hex.o floatformat.o objalloc.o obstack.o partition.o pexecute.o spaces.o \
  splay-tree.o strerror.o strsignal.o xatexit.o xexit.o xmalloc.o \
  xmemdup.o xstrdup.o xstrerror.o

$(TARGETLIB): $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS) $(ALLOCA)
	rm -f $(TARGETLIB)
	$(AR) $(AR_FLAGS) $(TARGETLIB) \
	  $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS) $(ALLOCA)
	$(RANLIB) $(TARGETLIB)

INSTALL_DEST = @@INSTALL_DEST@@
install: install_to_$(INSTALL_DEST) install-subdir

install_to_libdir: all
	$(INSTALL_DATA) $(TARGETLIB) $(libdir)$(MULTISUBDIR)/$(TARGETLIB)n
	( cd $(libdir)$(MULTISUBDIR) ; $(RANLIB) $(TARGETLIB)n )
	mv -f $(libdir)$(MULTISUBDIR)/$(TARGETLIB)n $(libdir)$(MULTISUBDIR)/$(TARGETLIB)
	@@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=install

install_to_tooldir: all
	$(INSTALL_DATA) $(TARGETLIB) $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB)n
	( cd $(tooldir)/lib$(MULTISUBDIR) ; $(RANLIB) $(TARGETLIB)n )
	mv -f $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB)n $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB)
	@@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=install

# needed-list is used by libstdc++.  NEEDED is the list of functions
# to include there.  Do not add anything LGPL to this list; libstdc++
# can't use anything encumbering.
NEEDED = atexit calloc memchr memcmp memcpy memmove memset rename strchr \
	 strerror strrchr strstr strtol strtoul tmpnam vfprintf vprintf \
	 vfork waitpid bcmp bcopy bzero
needed-list: Makefile
	rm -f needed-list; touch needed-list; \
	for f in $(NEEDED); do \
	  for g in $(LIBOBJS) $(EXTRA_OFILES); do \
	    case "$$g" in \
	      *$$f*) echo $$g >> needed-list ;; \
	    esac; \
	  done; \
	done

# required-list was used when building a shared bfd/opcodes/libiberty
# library.  I don't know if it used by anything currently.
required-list: Makefile
	echo $(REQUIRED_OFILES) > required-list

stamp-picdir:
	if [ x"$(enable_shared)" = xyes ] && [ ! -d pic ]; then \
	  mkdir pic; \
	else true; fi
	touch stamp-picdir

.PHONY: all etags tags ls clean stage1 stage2

etags tags: TAGS etags-subdir

TAGS: $(CFILES) $(HFILES)
	etags `for i in $(HFILES) $(CFILES); do echo $(srcdir)/$$i ; done`

# The standalone demangler (c++filt) has been moved to binutils.
demangle:
	@@echo "The standalone demangler, now named c++filt, is now"
	@@echo "a part of binutils."
	@@false

ls:
	@@echo Makefile $(HFILES) $(CFILES)

# Need to deal with profiled libraries, too.

# Cleaning has to be done carefully to ensure that we don't clean our SUBDIRS
# multiple times, hence our explicit recursion with an empty SUBDIRS.
mostlyclean: mostlyclean-subdir
	rm -rf *.o pic core errs \#* *.E a.out
	rm -f needed.awk needed2.awk errors dummy needed-list config.h stamp-*
	rm -f $(CONFIG_H) $(NEEDED_LIST) stamp-picdir
	@@$(MULTICLEAN) multi-clean DO=mostlyclean
clean: clean-subdir
	$(MAKE) SUBDIRS="" mostlyclean
	rm -f *.a required-list tmpmulti.out
	@@$(MULTICLEAN) multi-clean DO=clean
distclean: distclean-subdir
	$(MAKE) SUBDIRS="" clean
	@@$(MULTICLEAN) multi-clean DO=distclean
	rm -f *~ Makefile config.status xhost-mkfrag TAGS multilib.out
	rm -f config.log
maintainer-clean realclean: maintainer-clean-subdir
	$(MAKE) SUBDIRS="" distclean

force:

Makefile: $(srcdir)/Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS= $(SHELL) ./config.status

config.h: stamp-h ; @@true
stamp-h: config.in config.status
	CONFIG_FILES= CONFIG_HEADERS=config.h:config.in $(SHELL) ./config.status

config.status: $(srcdir)/configure $(srcdir)/config.table
	$(SHELL) ./config.status --recheck


all-subdir check-subdir installcheck-subdir info-subdir	\
install-info-subdir clean-info-subdir dvi-subdir install-subdir	\
etags-subdir mostlyclean-subdir clean-subdir distclean-subdir \
maintainer-clean-subdir:
	@@target=`echo $@@ | sed -e 's/-subdir//'`; \
	for dir in . $(SUBDIRS) ; do \
	  test $$dir = . || (cd $$dir && $(MAKE) $$target) || exit 1; \
	done

$(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS) $(ALLOCA): stamp-picdir

alloca.o: config.h
atexit.o: config.h
argv.o: config.h alloca-conf.h $(INCDIR)/libiberty.h
basename.o: $(INCDIR)/libiberty.h
choose-temp.o: config.h
clock.o: config.h
concat.o: $(INCDIR)/libiberty.h
cplus-dem.o: config.h $(INCDIR)/demangle.h
fdmatch.o: $(INCDIR)/libiberty.h
fnmatch.o: config.h $(INCDIR)/fnmatch.h
getcwd.o: config.h
getopt.o: config.h $(INCDIR)/getopt.h
getopt1.o: config.h $(INCDIR)/getopt.h
getpagesize.o: config.h
getpwd.o: config.h $(INCDIR)/libiberty.h
getruntime.o: config.h $(INCDIR)/libiberty.h
hex.o: $(INCDIR)/libiberty.h
floatformat.o: $(INCDIR)/floatformat.h
mkstemps.o: config.h
objalloc.o: $(INCDIR)/objalloc.h
obstack.o: config.h $(INCDIR)/obstack.h
partition.o: config.h $(INCDIR)/partition.h
pexecute.o: config.h $(INCDIR)/libiberty.h
setenv.o: config.h
spaces.o: $(INCDIR)/libiberty.h
splay-tree.o: config.h $(INCDIR)/libiberty.h $(INCDIR)/splay-tree.h $(INCDIR)/ansidecl.h
strerror.o: config.h $(INCDIR)/libiberty.h
strsignal.o: config.h $(INCDIR)/libiberty.h
xatexit.o: $(INCDIR)/libiberty.h
xexit.o: $(INCDIR)/libiberty.h
xmalloc.o: $(INCDIR)/libiberty.h
xmemdup.o: config.h $(INCDIR)/libiberty.h
xstrdup.o: config.h $(INCDIR)/libiberty.h
xstrerror.o: config.h $(INCDIR)/libiberty.h
hashtab.o: config.h $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h $(INCDIR)/ansidecl.h
@


1.2
log
@don't pull these yet.
@
text
@@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 97, 98, 1999
d88 9
a96 1
	"SHELL=$(SHELL)"
d109 1
a109 1
COMPILE.c = $(CC) -c @@DEFS@@ $(LIBCFLAGS) -I. -I$(INCDIR) $(HDEFINES)
d126 11
a136 10
CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c \
	bzero.c choose-temp.c clock.c concat.c cplus-dem.c fdmatch.c \
	fnmatch.c getcwd.c getopt.c getopt1.c getpagesize.c \
	getruntime.c floatformat.c hex.c index.c insque.c memchr.c \
	memcmp.c memcpy.c memmove.c memset.c mkstemps.c objalloc.c obstack.c \
	pexecute.c random.c rename.c rindex.c sigsetmask.c spaces.c \
	splay-tree.c strcasecmp.c strncasecmp.c strchr.c strdup.c strerror.c \
	strrchr.c strsignal.c strstr.c strtod.c strtol.c strtoul.c \
	tmpnam.c vasprintf.c vfork.c vfprintf.c vprintf.c vsprintf.c \
	waitpid.c xatexit.c xexit.c xmalloc.c xstrdup.c xstrerror.c
d140 2
a141 2
  fdmatch.o fnmatch.o getopt.o getopt1.o getruntime.o hex.o \
  floatformat.o objalloc.o obstack.o pexecute.o spaces.o \
d143 1
a143 1
  xstrdup.o xstrerror.o
d155 3
a157 3
	$(INSTALL_DATA) $(TARGETLIB) $(libdir)$(MULTISUBDIR)/$(TARGETLIB).n
	( cd $(libdir)$(MULTISUBDIR) ; $(RANLIB) $(TARGETLIB).n )
	mv -f $(libdir)$(MULTISUBDIR)/$(TARGETLIB).n $(libdir)$(MULTISUBDIR)/$(TARGETLIB)
d161 3
a163 3
	$(INSTALL_DATA) $(TARGETLIB) $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB).n
	( cd $(tooldir)/lib$(MULTISUBDIR) ; $(RANLIB) $(TARGETLIB).n )
	mv -f $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB).n $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB)
d166 6
a171 1
# needed-list is used by libstdc++.
d173 8
a180 5
	f="$(LIBOBJS) $(ALLOCA) $(EXTRA_OFILES)"; \
	case $$f in \
	  *alloca.o*) f="$$f xmalloc.o xexit.o" ;; \
	esac; \
	echo $$f > needed-list
d211 2
d218 2
a219 1
clean: mostlyclean clean-subdir
d222 2
a223 1
distclean: clean distclean-subdir
d227 2
a228 1
maintainer-clean realclean: distclean maintainer-clean-subdir
d248 3
a250 1
	cd testsuite && $(MAKE) $$target
d268 1
d275 1
d277 1
d285 1
d288 1
@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@


1.1.1.2
log
@Update to 990608 snapshot.
Highlights:
- official fix for an alpha bug,
- cpp changes semantic slightly,
- valarray in libstdc++.
@
text
@d123 3
a125 3
	pexecute.c putenv.c random.c rename.c rindex.c setenv.c sigsetmask.c \
	spaces.c splay-tree.c strcasecmp.c strncasecmp.c strchr.c strdup.c \
	strerror.c strrchr.c strsignal.c strstr.c strtod.c strtol.c strtoul.c \
@


1.1.1.3
log
@Update to 990629 snapshot
closer to gcc 2.95 release.
@
text
@a250 1
setenv.o: config.h
@


1.1.1.4
log
@990718, very close to release.
testsuite temporarily removed from snapshots because of copyright checks.
@
text
@d157 1
a157 6
# needed-list is used by libstdc++.  NEEDED is the list of functions
# to include there.  Do not add anything LGPL to this list; libstdc++
# can't use anything encumbering.
NEEDED = atexit calloc memchr memcmp memcpy memmove memset rename strchr \
	 strerror strrchr strstr strtol strtoul tmpnam vfprintf vprintf \
	 vfork waitpid bcmp bcopy bzero
d159 5
a163 8
	rm -f needed-list; touch needed-list; \
	for f in $(NEEDED); do \
	  for g in $(LIBOBJS) $(EXTRA_OFILES); do \
	    case "$$g" in \
	      *$$f*) echo $$g >> needed-list ;; \
	    esac; \
	  done; \
	done
@


1.1.1.5
log
@Update to gcc 2.95.1, official release.
@
text
@d88 1
a88 6
	"SHELL=$(SHELL)" \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"libdir=$(libdir)" \
	"libsubdir=$(libsubdir)" \
	"tooldir=$(tooldir)"
@


1.1.1.6
log
@libiberty version bundled with binutils-2.10
@
text
@d3 1
a3 1
#   Copyright (C) 1990, 91 - 99, 2000
a94 3
# Subdirectories to recurse into. We need to override this during cleaning
SUBDIRS = testsuite

d106 1
a106 1
COMPILE.c = $(CC) -c @@DEFS@@ $(LIBCFLAGS) -I. -I$(INCDIR) $(HDEFINES) @@ac_libiberty_warn_cflags@@
d123 10
a132 11
CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c	      \
	bzero.c calloc.c choose-temp.c clock.c concat.c cplus-dem.c fdmatch.c \
	fnmatch.c getcwd.c getpwd.c getopt.c getopt1.c getpagesize.c	      \
	getruntime.c floatformat.c hashtab.c hex.c index.c insque.c memchr.c  \
	memcmp.c memcpy.c memmove.c memset.c mkstemps.c objalloc.c obstack.c  \
	partition.c pexecute.c putenv.c random.c rename.c rindex.c	      \
	setenv.c sigsetmask.c spaces.c splay-tree.c strcasecmp.c	      \
	strncasecmp.c strchr.c strdup.c strerror.c strrchr.c		      \
	strsignal.c strstr.c strtod.c strtol.c strtoul.c tmpnam.c	      \
	vasprintf.c vfork.c vfprintf.c vprintf.c vsprintf.c waitpid.c	      \
	xatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c
d136 2
a137 2
  fdmatch.o fnmatch.o getopt.o getopt1.o getpwd.o getruntime.o hashtab.o \
  hex.o floatformat.o objalloc.o obstack.o partition.o pexecute.o spaces.o \
d139 1
a139 1
  xmemdup.o xstrdup.o xstrerror.o
d151 3
a153 3
	$(INSTALL_DATA) $(TARGETLIB) $(libdir)$(MULTISUBDIR)/$(TARGETLIB)n
	( cd $(libdir)$(MULTISUBDIR) ; $(RANLIB) $(TARGETLIB)n )
	mv -f $(libdir)$(MULTISUBDIR)/$(TARGETLIB)n $(libdir)$(MULTISUBDIR)/$(TARGETLIB)
d157 3
a159 3
	$(INSTALL_DATA) $(TARGETLIB) $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB)n
	( cd $(tooldir)/lib$(MULTISUBDIR) ; $(RANLIB) $(TARGETLIB)n )
	mv -f $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB)n $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB)
a206 2
# Cleaning has to be done carefully to ensure that we don't clean our SUBDIRS
# multiple times, hence our explicit recursion with an empty SUBDIRS.
d212 1
a212 2
clean: clean-subdir
	$(MAKE) SUBDIRS="" mostlyclean
d215 1
a215 2
distclean: distclean-subdir
	$(MAKE) SUBDIRS="" clean
d219 1
a219 2
maintainer-clean realclean: maintainer-clean-subdir
	$(MAKE) SUBDIRS="" distclean
d239 1
a239 3
	for dir in . $(SUBDIRS) ; do \
	  test $$dir = . || (cd $$dir && $(MAKE) $$target) || exit 1; \
	done
a256 1
getpwd.o: config.h $(INCDIR)/libiberty.h
a262 1
partition.o: config.h $(INCDIR)/partition.h
a271 1
xmemdup.o: config.h $(INCDIR)/libiberty.h
a273 1
hashtab.o: config.h $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h $(INCDIR)/ansidecl.h
@


1.1.1.7
log
@libiberty version bundled with binutils 2.11.
@
text
@d3 1
a3 1
#   Copyright (C) 1990, 91-99, 2000
d111 2
a112 3
	if [ x"$(PICFLAG)" != x ]; then \
	  $(COMPILE.c) $(PICFLAG) $< -o pic/$@@; \
	else true; fi
d127 3
a129 4
	bzero.c calloc.c choose-temp.c clock.c concat.c cplus-dem.c	      \
        cp-demangle.c dyn-string.c fdmatch.c fnmatch.c getcwd.c		      \
	getpwd.c getopt.c getopt1.c getpagesize.c getruntime.c		      \
	floatformat.c hashtab.c hex.c index.c insque.c md5.c memchr.c         \
d131 6
a136 6
	partition.c pexecute.c putenv.c random.c rename.c rindex.c setenv.c   \
	sigsetmask.c safe-ctype.c sort.c spaces.c splay-tree.c strcasecmp.c   \
	strncasecmp.c strchr.c strdup.c strerror.c strncmp.c strrchr.c        \
	strsignal.c strstr.c strtod.c strtol.c strtoul.c tmpnam.c vasprintf.c \
	vfork.c vfprintf.c vprintf.c vsprintf.c waitpid.c xatexit.c xexit.c   \
	xmalloc.c xmemdup.c xstrdup.c xstrerror.c
d139 5
a143 6
REQUIRED_OFILES = argv.o choose-temp.o concat.o cplus-dem.o cp-demangle.o     \
	dyn-string.o fdmatch.o fnmatch.o getopt.o getopt1.o getpwd.o          \
	getruntime.o hashtab.o hex.o floatformat.o md5.o objalloc.o obstack.o \
	partition.o pexecute.o safe-ctype.o sort.o spaces.o splay-tree.o      \
	strerror.o strsignal.o xatexit.o xexit.o xmalloc.o xmemdup.o          \
	xstrdup.o xstrerror.o
d146 1
a146 1
	-rm -f $(TARGETLIB)
d170 1
a170 1
	 strerror strncmp strrchr strstr strtol strtoul tmpnam vfprintf vprintf \
d188 1
a188 1
	if [ x"$(PICFLAG)" != x ] && [ ! -d pic ]; then \
d214 3
a216 3
	-rm -rf *.o pic core errs \#* *.E a.out
	-rm -f needed.awk needed2.awk errors dummy needed-list config.h stamp-*
	-rm -f $(CONFIG_H) $(NEEDED_LIST) stamp-picdir
d220 1
a220 1
	-rm -f *.a required-list tmpmulti.out
d225 2
a226 3
	-rm -f *~ Makefile config.status xhost-mkfrag TAGS multilib.out
	-rm -f config.log
	-rmdir testsuite 2>/dev/null
d247 3
a249 4
	@@subdirs='$(SUBDIRS)'; \
	target=`echo $@@ | sed -e 's/-subdir//'`; \
	for dir in $$subdirs ; do \
	  cd $$dir && $(MAKE) $$target; \
a261 2
cp-demangle.o: config.h $(INCDIR)/dyn-string.h $(INCDIR)/demangle.h
dyn-string.o: config.h $(INCDIR)/dyn-string.h
d273 1
a273 2
md5.o: config.h
objalloc.o: config.h $(INCDIR)/objalloc.h
a276 1
rename.o: config.h
a277 1
sort.o: config.h $(INCDIR)/sort.h $(INCDIR)/ansidecl.h
a281 3
strtol.o: config.h
strtoul.o: config.h
vasprintf.o: config.h
d283 2
a284 2
xexit.o: config.h $(INCDIR)/libiberty.h
xmalloc.o: config.h $(INCDIR)/libiberty.h
a287 1
waitpid.o: config.h
@


