head	1.3;
access;
symbols
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	binutils-2_10:1.1.1.2
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	GCC-2_95_2:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS-990718:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.11.24.17.18.22;	author espie;	state dead;
branches;
next	1.2;

1.2
date	2002.05.11.12.59.41;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	99.05.26.13.38.33;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.38.33;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.07.26.11.56.30;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.11.12.45.38;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.3
log
@bye, bye, they moved.

(all these changes were okay'ed millert@@, btw)
@
text
@/* memory allocation routines with error checking.
   Copyright 1989, 90, 91, 92, 93, 94 Free Software Foundation, Inc.
   
This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#include "ansidecl.h"
#include "libiberty.h"

#include <stdio.h>

#ifdef __STDC__
#include <stddef.h>
#else
#define size_t unsigned long
#define ptrdiff_t long
#endif

#if VMS
#include <stdlib.h>
#include <unixlib.h>
#else
/* For systems with larger pointers than ints, these must be declared.  */
PTR malloc PARAMS ((size_t));
PTR realloc PARAMS ((PTR, size_t));
PTR calloc PARAMS ((size_t, size_t));
PTR sbrk PARAMS ((ptrdiff_t));
#endif

/* The program name if set.  */
static const char *name = "";

#ifdef HAVE_SBRK
/* The initial sbrk, set when the program name is set. Not used for win32
   ports other than cygwin32.  */
static char *first_break = NULL;
#endif /* HAVE_SBRK */

void
xmalloc_set_program_name (s)
     const char *s;
{
  name = s;
#ifdef HAVE_SBRK
  /* Win32 ports other than cygwin32 don't have brk() */
  if (first_break == NULL)
    first_break = (char *) sbrk (0);
#endif /* HAVE_SBRK */
}

PTR
xmalloc (size)
    size_t size;
{
  PTR newmem;

  if (size == 0)
    size = 1;
  newmem = malloc (size);
  if (!newmem)
    {
#ifdef HAVE_SBRK
      extern char **environ;
      size_t allocated;

      if (first_break != NULL)
	allocated = (char *) sbrk (0) - first_break;
      else
	allocated = (char *) sbrk (0) - (char *) &environ;
      fprintf (stderr,
	       "\n%s%sCannot allocate %lu bytes after allocating %lu bytes\n",
	       name, *name ? ": " : "",
	       (unsigned long) size, (unsigned long) allocated);
#else /* HAVE_SBRK */
      fprintf (stderr,
              "\n%s%sCannot allocate %lu bytes\n",
              name, *name ? ": " : "",
              (unsigned long) size);
#endif /* HAVE_SBRK */
      xexit (1);
    }
  return (newmem);
}

PTR
xcalloc (nelem, elsize)
  size_t nelem, elsize;
{
  PTR newmem;

  if (nelem == 0 || elsize == 0)
    nelem = elsize = 1;

  newmem = calloc (nelem, elsize);
  if (!newmem)
    {
#ifdef HAVE_SBRK
      extern char **environ;
      size_t allocated;

      if (first_break != NULL)
	allocated = (char *) sbrk (0) - first_break;
      else
	allocated = (char *) sbrk (0) - (char *) &environ;
      fprintf (stderr,
	       "\n%s%sCannot allocate %lu bytes after allocating %lu bytes\n",
	       name, *name ? ": " : "",
	       (unsigned long) (nelem * elsize), (unsigned long) allocated);
#else /* HAVE_SBRK */
      fprintf (stderr,
              "\n%s%sCannot allocate %lu bytes\n",
              name, *name ? ": " : "",
              (unsigned long) (nelem * elsize));
#endif /* HAVE_SBRK */
      xexit (1);
    }
  return (newmem);
}

PTR
xrealloc (oldmem, size)
    PTR oldmem;
    size_t size;
{
  PTR newmem;

  if (size == 0)
    size = 1;
  if (!oldmem)
    newmem = malloc (size);
  else
    newmem = realloc (oldmem, size);
  if (!newmem)
    {
#ifdef HAVE_SBRK
      extern char **environ;
      size_t allocated;

      if (first_break != NULL)
	allocated = (char *) sbrk (0) - first_break;
      else
	allocated = (char *) sbrk (0) - (char *) &environ;
      fprintf (stderr,
	       "\n%s%sCannot reallocate %lu bytes after allocating %lu bytes\n",
	       name, *name ? ": " : "",
	       (unsigned long) size, (unsigned long) allocated);
#else /* HAVE_SBRK */
      fprintf (stderr,
              "\n%s%sCannot reallocate %lu bytes\n",
              name, *name ? ": " : "",
              (unsigned long) size);
#endif /* HAVE_SBRK */
      xexit (1);
    }
  return (newmem);
}
@


1.2
log
@don't pull these yet.
@
text
@@


1.1
log
@Initial revision
@
text
@d84 1
a84 1
	       "\n%s%sCan not allocate %lu bytes after allocating %lu bytes\n",
d89 1
a89 1
              "\n%s%sCan not allocate %lu bytes\n",
d119 1
a119 1
	       "\n%s%sCan not allocate %lu bytes after allocating %lu bytes\n",
d124 1
a124 1
              "\n%s%sCan not allocate %lu bytes\n",
d157 1
a157 1
	       "\n%s%sCan not reallocate %lu bytes after allocating %lu bytes\n",
d162 1
a162 1
              "\n%s%sCan not reallocate %lu bytes\n",
@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@


1.1.1.2
log
@libiberty version bundled with binutils-2.10
@
text
@d84 1
a84 1
	       "\n%s%sCannot allocate %lu bytes after allocating %lu bytes\n",
d89 1
a89 1
              "\n%s%sCannot allocate %lu bytes\n",
d119 1
a119 1
	       "\n%s%sCannot allocate %lu bytes after allocating %lu bytes\n",
d124 1
a124 1
              "\n%s%sCannot allocate %lu bytes\n",
d157 1
a157 1
	       "\n%s%sCannot reallocate %lu bytes after allocating %lu bytes\n",
d162 1
a162 1
              "\n%s%sCannot reallocate %lu bytes\n",
@


1.1.1.3
log
@libiberty version bundled with binutils 2.11.
@
text
@a19 3
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
a63 25
void
xmalloc_failed (size)
     size_t size;
{
#ifdef HAVE_SBRK
  extern char **environ;
  size_t allocated;

  if (first_break != NULL)
    allocated = (char *) sbrk (0) - first_break;
  else
    allocated = (char *) sbrk (0) - (char *) &environ;
  fprintf (stderr,
	   "\n%s%sCannot allocate %lu bytes after allocating %lu bytes\n",
	   name, *name ? ": " : "",
	   (unsigned long) size, (unsigned long) allocated);
#else /* HAVE_SBRK */
  fprintf (stderr,
	   "\n%s%sCannot allocate %lu bytes\n",
	   name, *name ? ": " : "",
	   (unsigned long) size);
#endif /* HAVE_SBRK */
  xexit (1);
}  

d74 4
a77 1
    xmalloc_failed (size);
d79 16
d109 4
a112 1
    xmalloc_failed (nelem * elsize);
d114 16
d147 4
a150 1
    xmalloc_failed (size);
d152 16
@


