head	1.2;
access;
symbols
	OPENBSD_3_4:1.1.0.16
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.14
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.12
	OPENBSD_3_2_BASE:1.1
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	binutils-2_10:1.1.1.1
	CYGNUS:1.1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.11.24.17.18.22;	author espie;	state dead;
branches;
next	1.1;

1.1
date	99.11.20.18.24.18;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.07.26.11.56.23;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.11.12.45.21;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.2
log
@bye, bye, they moved.

(all these changes were okay'ed millert@@, btw)
@
text
@/* An expandable hash tables datatype.  
   Copyright (C) 1999 Free Software Foundation, Inc.
   Contributed by Vladimir Makarov (vmakarov@@cygnus.com).

This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* This package implements basic hash table functionality.  It is possible
   to search for an entry, create an entry and destroy an entry.

   Elements in the table are generic pointers.

   The size of the table is not fixed; if the occupancy of the table
   grows too high the hash table will be expanded.

   The abstract data implementation is based on generalized Algorithm D
   from Knuth's book "The art of computer programming".  Hash table is
   expanded by creation of new hash table and transferring elements from
   the old table to the new table. */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#include "libiberty.h"
#include "hashtab.h"

#ifdef HASHTAB_STATS
/* The following variable is used for debugging. Its value is number
   of all calls of `find_hash_table_entry' for all hash tables. */

static int all_searches = 0;

/* The following variable is used for debugging. Its value is number
   of collisions fixed for time of work with all hash tables. */

static int all_collisions = 0;

/* The following variable is used for debugging. Its value is number
   of all table expansions fixed for time of work with all hash
   tables. */

static int all_expansions = 0;
#endif

/* This macro defines reserved value for empty table entry. */

#define EMPTY_ENTRY    NULL

/* This macro defines reserved value for table entry which contained
   a deleted element. */

#define DELETED_ENTRY  ((void *) 1)

/* The following function returns the nearest prime number which is
   greater than given source number. */

static unsigned long
higher_prime_number (number)
     unsigned long number;
{
  unsigned long i;

  for (number = (number / 2) * 2 + 3;; number += 2)
    {
      for (i = 3; i * i <= number; i += 2)
        if (number % i == 0)
          break;
      if (i * i > number)
        return number;
    }
}

/* This function creates table with length slightly longer than given
   source length.  Created hash table is initiated as empty (all the
   hash table entries are EMPTY_ENTRY).  The function returns the
   created hash table. */

hash_table_t
create_hash_table (size, hash_function, eq_function)
     size_t size;
     unsigned (*hash_function) PARAMS ((hash_table_entry_t));
     int (*eq_function) PARAMS ((hash_table_entry_t, hash_table_entry_t));
{
  hash_table_t result;

  size = higher_prime_number (size);
  result = (hash_table_t) xmalloc (sizeof (*result));
  result->entries
    = (hash_table_entry_t *) xmalloc (size * sizeof (hash_table_entry_t));
  result->size = size;
  result->hash_function = hash_function;
  result->eq_function = eq_function;
#ifdef HASHTAB_STATS
  result->searches = 0;
  result->collisions = 0;
#endif
  empty_hash_table (result);
  return result;
}

/* This function frees all memory allocated for given hash table.
   Naturally the hash table must already exist. */

void
delete_hash_table (htab)
     hash_table_t htab;
{
  free (htab->entries);
  free (htab);
}

/* This function clears all entries in the given hash table.  */

void
empty_hash_table (htab)
     hash_table_t htab;
{
  memset (htab->entries, 0, htab->size * sizeof (hash_table_entry_t));
  htab->number_of_elements = 0;
  htab->number_of_deleted_elements = 0;
}

/* The following function changes size of memory allocated for the
   entries and repeatedly inserts the table elements.  The occupancy
   of the table after the call will be about 50%.  Naturally the hash
   table must already exist.  Remember also that the place of the
   table entries is changed. */

static void
expand_hash_table (htab)
     hash_table_t htab;
{
  hash_table_t new_htab;
  hash_table_entry_t *entry_ptr;
  hash_table_entry_t *new_entry_ptr;

  new_htab = create_hash_table (htab->number_of_elements * 2,
                                htab->hash_function, htab->eq_function);
  for (entry_ptr = htab->entries; entry_ptr < htab->entries + htab->size;
       entry_ptr++)
    if (*entry_ptr != EMPTY_ENTRY && *entry_ptr != DELETED_ENTRY)
      {
        new_entry_ptr = find_hash_table_entry (new_htab, *entry_ptr, 1);
        *new_entry_ptr = (*entry_ptr);
      }
  free (htab->entries);
  *htab = (*new_htab);
  free (new_htab);
}

/* This function searches for hash table entry which contains element
   equal to given value or empty entry in which given value can be
   placed (if the element with given value does not exist in the
   table).  The function works in two regimes.  The first regime is
   used only for search.  The second is used for search and
   reservation empty entry for given value.  The table is expanded if
   occupancy (taking into accout also deleted elements) is more than
   75%.  Naturally the hash table must already exist.  If reservation
   flag is TRUE then the element with given value should be inserted
   into the table entry before another call of
   `find_hash_table_entry'. */

hash_table_entry_t *
find_hash_table_entry (htab, element, reserve)
     hash_table_t htab;
     hash_table_entry_t element;
     int reserve;
{
  hash_table_entry_t *entry_ptr;
  hash_table_entry_t *first_deleted_entry_ptr;
  unsigned index, hash_value, secondary_hash_value;

  if (htab->size * 3 <= htab->number_of_elements * 4)
    {
#ifdef HASHTAB_STATS
      all_expansions++;
#endif
      expand_hash_table (htab);
    }
  hash_value = (*htab->hash_function) (element);
  secondary_hash_value = 1 + hash_value % (htab->size - 2);
  index = hash_value % htab->size;
#ifdef HASHTAB_STATS
  htab->searches++;
  all_searches++;
#endif
  first_deleted_entry_ptr = NULL;
#ifdef HASHTAB_STATS
  for (;;htab->collisions++, all_collisions++)
#else
  for (;;)
#endif
    {
      entry_ptr = htab->entries + index;
      if (*entry_ptr == EMPTY_ENTRY)
        {
          if (reserve)
	    {
	      htab->number_of_elements++;
	      if (first_deleted_entry_ptr != NULL)
		{
		  entry_ptr = first_deleted_entry_ptr;
		  *entry_ptr = DELETED_ENTRY;
		}
	    }
          break;
        }
      else if (*entry_ptr != DELETED_ENTRY)
        {
          if ((*htab->eq_function) (*entry_ptr, element))
            break;
        }
      else if (first_deleted_entry_ptr == NULL)
	first_deleted_entry_ptr = entry_ptr;
      index += secondary_hash_value;
      if (index >= htab->size)
        index -= htab->size;
    }
  return entry_ptr;
}

/* This function deletes element with given value from hash table.
   The hash table entry value will be `DELETED_ENTRY' after the
   function call.  Naturally the hash table must already exist.  Hash
   table entry for given value should be not empty (or deleted). */

void
remove_element_from_hash_table_entry (htab, element)
     hash_table_t htab;
     hash_table_entry_t element;
{
  hash_table_entry_t *entry_ptr;

  entry_ptr = find_hash_table_entry (htab, element, 0);
  *entry_ptr = DELETED_ENTRY;
  htab->number_of_deleted_elements++;
}

/* The following function returns current size of given hash table. */

size_t
hash_table_size (htab)
     hash_table_t htab;
{
  return htab->size;
}

/* The following function returns current number of elements in given
   hash table. */

size_t
hash_table_elements_number (htab)
     hash_table_t htab;
{
  return htab->number_of_elements - htab->number_of_deleted_elements;
}

#ifdef HASHTAB_STATS
/* The following function returns number of percents of fixed
   collisions during all work with given hash table. */

int
hash_table_collisions (htab)
     hash_table_t htab;
{
  int searches;

  searches = htab->searches;
  if (searches == 0)
    searches++;
  return htab->collisions * 100 / searches;
}

/* The following function returns number of percents of fixed
   collisions during all work with all hash tables. */

int
all_hash_table_collisions ()
{
  int searches;

  searches = all_searches;
  if (searches == 0)
    searches++;
  return all_collisions * 100 / searches;
}
#endif
@


1.1
log
@Grab hashtab.c from the development version of gcc, add it to libiberty.

Make sure that g++ and g77 link against libiberty (fixed in dev. sources
as well).

Use hashtab functions instead of splay-trees in cse.c.

This is worth a 10% compiling speed increase on some arches, including
sparc, hppa...
@
text
@@


1.1.1.1
log
@libiberty version bundled with binutils-2.10
@
text
@a37 2
#include <sys/types.h>

a41 2
#include <stdio.h>

d45 18
d65 1
a65 1
#define EMPTY_ENTRY    ((void *) 0)
d76 2
a77 2
higher_prime_number (n)
     unsigned long n;
d81 1
a81 8
  n |= 0x01;  /* Force N to be odd.  */
  if (n < 9)
    return n; /* All odd numbers < 9 are prime.  */

 next:
  n += 2;
  i = 3;
  do
d83 5
a87 3
      if (n % i == 0)
	goto next;
      i += 2;
a88 3
  while ((i * i) <= n);

  return n;
d96 2
a97 2
htab_t
htab_create (size, hash_f, eq_f, del_f)
d99 2
a100 3
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
d102 1
a102 1
  htab_t result;
d105 3
a107 2
  result = (htab_t) xcalloc (1, sizeof (struct htab));
  result->entries = (void **) xcalloc (size, sizeof (void *));
d109 7
a115 3
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
d123 2
a124 2
htab_delete (htab)
     htab_t htab;
a125 9
  int i;
  if (htab->del_f)
    for (i = htab->size - 1; i >= 0; i--)
      {
	if (htab->entries[i] != EMPTY_ENTRY
	    && htab->entries[i] != DELETED_ENTRY)
	  (*htab->del_f) (htab->entries[i]);
      }

d133 2
a134 2
htab_empty (htab)
     htab_t htab;
d136 3
a138 40
  int i;
  if (htab->del_f)
    for (i = htab->size - 1; i >= 0; i--)
      {
	if (htab->entries[i] != EMPTY_ENTRY
	    && htab->entries[i] != DELETED_ENTRY)
	  (*htab->del_f) (htab->entries[i]);
      }

  memset (htab->entries, 0, htab->size * sizeof (void *));
}

/* Similar to htab_find_slot, but without several unwanted side effects:
    - Does not call htab->eq_f when it finds an existing entry.
    - Does not change the count of elements/searches/collisions in the
      hash table.
   This function also assumes there are no deleted entries in the table.
   HASH is the hash value for the element to be inserted.  */
static void **
find_empty_slot_for_expand (htab, hash)
     htab_t htab;
     unsigned int hash;
{
  size_t size = htab->size;
  unsigned int hash2 = 1 + hash % (size - 2);
  unsigned int index = hash % size;

  for (;;)
    {
      void **slot = htab->entries + index;
      if (*slot == EMPTY_ENTRY)
	return slot;

      if (*slot == DELETED_ENTRY)
	abort ();

      index += hash2;
      if (index >= size)
	index -= size;
    }
d148 2
a149 2
htab_expand (htab)
     htab_t htab;
d151 16
a166 26
  void **oentries;
  void **olimit;
  void **p;

  oentries = htab->entries;
  olimit = oentries + htab->size;

  htab->size = higher_prime_number (htab->size * 2);
  htab->entries = xcalloc (htab->size, sizeof (void **));

  htab->n_elements -= htab->n_deleted;
  htab->n_deleted = 0;

  p = oentries;
  do
    {
      void *x = *p;
      if (x != EMPTY_ENTRY && x != DELETED_ENTRY)
	{
	  void **q = find_empty_slot_for_expand (htab, (*htab->hash_f) (x));
	  *q = x;
	}
      p++;
    }
  while (p < olimit);
  free (oentries);
d169 21
a189 16
/* This function searches for a hash table entry equal to the given
   element.  It cannot be used to insert or delete an element.  */

void *
htab_find_with_hash (htab, element, hash)
     htab_t htab;
     const void *element;
     unsigned int hash;
{
  unsigned int index, hash2;
  size_t size;

  htab->searches++;
  size = htab->size;
  hash2 = 1 + hash % (size - 2);
  index = hash % size;
d191 1
a191 1
  for (;;)
d193 4
a196 10
      void *entry = htab->entries[index];
      if (entry == EMPTY_ENTRY)
	return NULL;
      else if (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element))
	return entry;

      htab->collisions++;
      index += hash2;
      if (index >= size)
	index -= size;
d198 4
a201 36
}

/* Like htab_find_slot_with_hash, but compute the hash value from the
   element.  */
void *
htab_find (htab, element)
     htab_t htab;
     const void *element;
{
  return htab_find_with_hash (htab, element, (*htab->hash_f) (element));
}

/* This function searches for a hash table slot containing an entry
   equal to the given element.  To delete an entry, call this with
   INSERT = 0, then call htab_clear_slot on the slot returned (possibly
   after doing some checks).  To insert an entry, call this with
   INSERT = 1, then write the value you want into the returned slot.  */

void **
htab_find_slot_with_hash (htab, element, hash, insert)
     htab_t htab;
     const void *element;
     unsigned int hash;
     int insert;
{
  void **first_deleted_slot;
  unsigned int index, hash2;
  size_t size;

  if (insert && htab->size * 3 <= htab->n_elements * 4)
    htab_expand (htab);

  size = htab->size;
  hash2 = 1 + hash % (size - 2);
  index = hash % size;

d203 6
a208 2
  first_deleted_slot = NULL;

d210 1
d212 4
a215 9
      void *entry = htab->entries[index];
      if (entry == EMPTY_ENTRY)
	{
	  if (!insert)
	    return NULL;

	  htab->n_elements++;

	  if (first_deleted_slot)
d217 6
a222 2
	      *first_deleted_slot = EMPTY_ENTRY;
	      return first_deleted_slot;
d224 12
a235 19

	  return &htab->entries[index];
	}

      if (entry == DELETED_ENTRY)
	{
	  if (!first_deleted_slot)
	    first_deleted_slot = &htab->entries[index];
	}
      else
	{
	  if ((*htab->eq_f) (entry, element))
	    return &htab->entries[index];
	}
      
      htab->collisions++;
      index += hash2;
      if (index >= size)
	index -= size;
d237 1
d240 4
a243 15
/* Like htab_find_slot_with_hash, but compute the hash value from the
   element.  */
void **
htab_find_slot (htab, element, insert)
     htab_t htab;
     const void *element;
     int insert;
{
  return htab_find_slot_with_hash (htab, element, (*htab->hash_f) (element),
				   insert);
}

/* This function deletes an element with the given value from hash
   table.  If there is no matching element in the hash table, this
   function does nothing.  */
d246 9
a254 57
htab_remove_elt (htab, element)
     htab_t htab;
     void *element;
{
  void **slot;

  slot = htab_find_slot (htab, element, 0);
  if (*slot == EMPTY_ENTRY)
    return;

  if (htab->del_f)
    (*htab->del_f) (*slot);

  *slot = DELETED_ENTRY;
  htab->n_deleted++;
}

/* This function clears a specified slot in a hash table.  It is
   useful when you've already done the lookup and don't want to do it
   again.  */

void
htab_clear_slot (htab, slot)
     htab_t htab;
     void **slot;
{
  if (slot < htab->entries || slot >= htab->entries + htab->size
      || *slot == EMPTY_ENTRY || *slot == DELETED_ENTRY)
    abort ();
  if (htab->del_f)
    (*htab->del_f) (*slot);
  *slot = DELETED_ENTRY;
  htab->n_deleted++;
}

/* This function scans over the entire hash table calling
   CALLBACK for each live entry.  If CALLBACK returns false,
   the iteration stops.  INFO is passed as CALLBACK's second
   argument.  */

void
htab_traverse (htab, callback, info)
     htab_t htab;
     htab_trav callback;
     void *info;
{
  void **slot, **limit;
  slot = htab->entries;
  limit = slot + htab->size;
  do
    {
      void *x = *slot;
      if (x != EMPTY_ENTRY && x != DELETED_ENTRY)
	if (!(*callback) (slot, info))
	  break;
    }
  while (++slot < limit);
d260 2
a261 2
htab_size (htab)
     htab_t htab;
d270 2
a271 2
htab_elements (htab)
     htab_t htab;
d273 1
a273 1
  return htab->n_elements - htab->n_deleted;
d276 1
d280 3
a282 3
double
htab_collisions (htab)
     htab_t htab;
d288 2
a289 2
    return 0.0;
  return (double)htab->collisions / (double)searches;
d291 15
@


1.1.1.2
log
@libiberty version bundled with binutils 2.11.
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000 Free Software Foundation, Inc.
a43 4
#ifdef HAVE_STRING_H
#include <string.h>
#endif

d51 1
a51 1
#define EMPTY_ENTRY    ((PTR) 0)
d56 1
a56 13
#define DELETED_ENTRY  ((PTR) 1)

static unsigned long higher_prime_number PARAMS ((unsigned long));
static hashval_t hash_pointer PARAMS ((const void *));
static int eq_pointer PARAMS ((const void *, const void *));
static int htab_expand PARAMS ((htab_t));
static PTR *find_empty_slot_for_expand  PARAMS ((htab_t, hashval_t));

/* At some point, we could make these be NULL, and modify the
   hash-table routines to handle NULL specially; that would avoid
   function-call overhead for the common case of hashing pointers.  */
htab_hash htab_hash_pointer = hash_pointer;
htab_eq htab_eq_pointer = eq_pointer;
d58 2
a59 2
/* The following function returns a nearest prime number which is
   greater than N, and near a power of two. */
d65 1
a65 35
  /* These are primes that are near, but slightly smaller than, a
     power of two.  */
  static unsigned long primes[] = {
    2,
    7,
    13,
    31,
    61,
    127,
    251,
    509,
    1021,
    2039,
    4093,
    8191,
    16381,
    32749,
    65521,
    131071,
    262139,
    524287,
    1048573,
    2097143,
    4194301,
    8388593,
    16777213,
    33554393,
    67108859,
    134217689,
    268435399,
    536870909,
    1073741789,
    2147483647,
    4294967291
  };
d67 8
a74 4
  unsigned long* low = &primes[0];
  unsigned long* high = &primes[sizeof(primes) / sizeof(primes[0])];

  while (low != high)
d76 3
a78 5
      unsigned long* mid = low + (high - low) / 2;
      if (n > *mid)
	low = mid + 1;
      else
	high = mid;
d80 1
d82 1
a82 27
  /* If we've run out of primes, abort.  */
  if (n > *low)
    {
      fprintf (stderr, "Cannot find prime bigger than %lu\n", n);
      abort ();
    }

  return *low;
}

/* Returns a hash code for P.  */

static hashval_t
hash_pointer (p)
     const PTR p;
{
  return (hashval_t) ((long)p >> 3);
}

/* Returns non-zero if P1 and P2 are equal.  */

static int
eq_pointer (p1, p2)
     const PTR p1;
     const PTR p2;
{
  return p1 == p2;
d88 1
a88 1
   created hash table.  Memory allocation must not fail.  */
d101 1
a101 35
  result->entries = (PTR *) xcalloc (size, sizeof (PTR));
  result->size = size;
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
  result->return_allocation_failure = 0;
  return result;
}

/* This function creates table with length slightly longer than given
   source length.  The created hash table is initiated as empty (all the
   hash table entries are EMPTY_ENTRY).  The function returns the created
   hash table.  Memory allocation may fail; it may return NULL.  */

htab_t
htab_try_create (size, hash_f, eq_f, del_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
{
  htab_t result;

  size = higher_prime_number (size);
  result = (htab_t) calloc (1, sizeof (struct htab));
  if (result == NULL)
    return NULL;

  result->entries = (PTR *) calloc (size, sizeof (PTR));
  if (result->entries == NULL)
    {
      free (result);
      return NULL;
    }

a105 1
  result->return_allocation_failure = 1;
a116 1

d119 5
a123 3
      if (htab->entries[i] != EMPTY_ENTRY
	  && htab->entries[i] != DELETED_ENTRY)
	(*htab->del_f) (htab->entries[i]);
a135 1

d138 5
a142 3
      if (htab->entries[i] != EMPTY_ENTRY
	  && htab->entries[i] != DELETED_ENTRY)
	(*htab->del_f) (htab->entries[i]);
d144 1
a144 1
  memset (htab->entries, 0, htab->size * sizeof (PTR));
d153 1
a153 2

static PTR *
d156 1
a156 1
     hashval_t hash;
d159 1
a159 1
  hashval_t hash2 = 1 + hash % (size - 2);
d164 1
a164 2
      PTR *slot = htab->entries + index;

d167 2
a168 1
      else if (*slot == DELETED_ENTRY)
d181 1
a181 3
   table entries is changed.  If memory allocation failures are allowed,
   this function will return zero, indicating that the table could not be
   expanded.  If all goes well, it will return a non-zero value.  */
d183 1
a183 1
static int
d187 3
a189 3
  PTR *oentries;
  PTR *olimit;
  PTR *p;
d195 1
a195 10

  if (htab->return_allocation_failure)
    {
      PTR *nentries = (PTR *) calloc (htab->size, sizeof (PTR *));
      if (nentries == NULL)
	return 0;
      htab->entries = nentries;
    }
  else
    htab->entries = (PTR *) xcalloc (htab->size, sizeof (PTR *));
d203 1
a203 2
      PTR x = *p;

d206 1
a206 2
	  PTR *q = find_empty_slot_for_expand (htab, (*htab->hash_f) (x));

a208 1

a211 1

a212 1
  return 1;
d218 1
a218 1
PTR
d221 2
a222 2
     const PTR element;
     hashval_t hash;
d224 1
a224 2
  unsigned int index;
  hashval_t hash2;
a225 1
  PTR entry;
d229 1
a231 7
  entry = htab->entries[index];
  if (entry == EMPTY_ENTRY
      || (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element)))
    return entry;

  hash2 = 1 + hash % (size - 2);

d234 6
a243 5

      entry = htab->entries[index];
      if (entry == EMPTY_ENTRY
	  || (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element)))
	return entry;
d249 1
a249 2

PTR
d252 1
a252 1
     const PTR element;
d261 1
a261 3
   INSERT = 1, then write the value you want into the returned slot.
   When inserting an entry, NULL may be returned if memory allocation
   fails.  */
d263 1
a263 1
PTR *
d266 6
a271 7
     const PTR element;
     hashval_t hash;
     enum insert_option insert;
{
  PTR *first_deleted_slot;
  unsigned int index;
  hashval_t hash2;
d274 2
a275 3
  if (insert == INSERT && htab->size * 3 <= htab->n_elements * 4
      && htab_expand (htab) == 0)
    return NULL;
d286 1
a286 1
      PTR entry = htab->entries[index];
d289 1
a289 1
	  if (insert == NO_INSERT)
d308 5
a312 2
      else  if ((*htab->eq_f) (entry, element))
	return &htab->entries[index];
d323 1
a323 2

PTR *
d326 2
a327 2
     const PTR element;
     enum insert_option insert;
d340 1
a340 1
     PTR element;
d342 1
a342 1
  PTR *slot;
d344 1
a344 1
  slot = htab_find_slot (htab, element, NO_INSERT);
d362 1
a362 1
     PTR *slot;
a366 1

a368 1

d382 1
a382 1
     PTR info;
d384 3
a386 3
  PTR *slot = htab->entries;
  PTR *limit = slot + htab->size;

d389 1
a389 2
      PTR x = *slot;

d397 1
a397 1
/* Return the current size of given hash table. */
d406 2
a407 1
/* Return the current number of elements in given hash table. */
d416 2
a417 2
/* Return the fraction of fixed collisions during all work with given
   hash table. */
d423 4
a426 1
  if (htab->searches == 0)
d428 1
a428 2

  return (double) htab->collisions / (double) htab->searches;
@


