head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.3.0.52
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.50
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.48
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.46
	OPENBSD_5_0:1.1.1.3.0.44
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.42
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.40
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.36
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.38
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.34
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.32
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.30
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.28
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.26
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.24
	OPENBSD_4_0_BASE:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.22
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.20
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.18
	OPENBSD_3_7_BASE:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.16
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.14
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.12
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.10
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.8
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.6
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.4
	OPENBSD_3_0_BASE:1.1.1.3
	OPENBSD_2_9:1.1.1.3.0.2
	OPENBSD_2_9_BASE:1.1.1.3
	GCC-2_95_pre3_test3:1.1.1.3
	GCC-2_95_pre3_test2:1.1.1.3
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	GCC-2_95_2:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.17.11;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.08.23.20.32.30;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.08.23.20.32.30;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.01.19.16.07.12;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.01.29.15.27.22;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@<html>
<head>
<title>Installing GCC: Building</title>
</head>
<body>
<h1 align="center">Installing GCC: Building</h1>

<p>Now that GCC is configured, you are ready to build the compiler and
runtime libraries.

<p>We <b>highly</b> recommend that GCC be built using GNU make; other
versions may work, then again they might not.  To be safe build with GNU make.

<h2>Building a native compiler</h2>

<p>For a native build issue the command `<code>make bootstrap</code>'.  This 
will build the entire GCC system, which includes the following steps:

<ul>
  <li> Build host tools necessary to build the compiler such as texinfo, bison,
  gperf.<p>

  <li> Build target tools for use by the compiler such as gas, gld, and
  binutils if they have been properly unpacked into the GCC source tree.<p>

  <li> Perform a 3-stage bootstrap of the compiler.<p>

  <li> Perform a comparison test of the stage2 and stage3 compilers.<p>

  <li> Build runtime libraries using the stage3 compiler from the previous
  step.
</ul>

<p>If you are short on disk space you might consider `<code>make 
bootstrap-lean</code>' instead.  This is identical to `<code>make 
bootstrap</code>' except that object files from the stage1 and 
stage2 of the 3-stage bootstrap of the compiler are deleted as 
soon as they are no longer needed.

<p>If you want to save additional space during the bootstrap and in
the final installation as well, you can build the compiler binaries
without debugging information with "make CFLAGS='-O' LIBCFLAGS='-g
-O2' LIBCXXFLAGS='-g -O2 -fno-implicit-templates' bootstrap".  This will save
roughly 40% of disk space both for the bootstrap and the final installation.
(Libraries will still contain debugging information.)

<p>If you used the flag <code>--enable-languages=...</code> to restrict
the compilers to be built, only those you've actually enabled will be
built. This will of course only build those runtime libraries, for
which the particular compiler has been built.  Please note,
that re-defining LANGUAGES when calling `<code>make bootstrap</code>'
<b>*does not*</b> work anymore!

<h2>Building a cross compiler</h2>

<p> We recommend reading the
<a href="http://www.objsw.com/CrossGCC/">
crossgcc FAQ</a> for information about building cross compilers.

<p>When building a cross compiler, it is not generally possible to do a
3-stage bootstrap of the compiler.  This makes for an interesting problem
as parts of GCC can only be built with GCC.

<p>To build a cross compiler, we first recommend building and installing a
native compiler.  You can then use the native GCC compiler to build the
cross compiler.

<p>Assuming you have already installed a native copy of GCC and configured
your corss compiler, issue the command "make", which performs the
following steps:
<ul>
  <li> Build host tools necessary to build the compiler such as texinfo, bison,
  gperf.<p>

  <li> Build target tools for use by the compiler such as gas, gld, and
  binutils if they have been properly unpacked into the GCC source tree.<p>

  <li> Build the compiler (single stage only).<p>

  <li> Build runtime libraries using the compiler from the previous
  step.
</ul>

<p>Note that if an error occurs in any step the make process will exit.

<h2>Building in parallel</h2>

<p> If you have a multiprocessor you can use `<code>make bootstrap
MAKE="make -j 2" -j 2</code>' instead of just `<code>make bootstrap</code>'
when building GCC.  You can use a bigger number instead of two if
you like.  In most cases, it won't help to use a number bigger than
the number of processors in your machine.

<p>
<hr>
<i>Last modified on July 16, 1999.</i>

</body>
</html>
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Update to gcc 2.95.1, official release.
@
text
@@


1.1.1.2
log
@Update to 2.95.2
@
text
@a4 1

d11 2
a12 6
<p>We <strong>highly</strong> recommend that GCC be built using GNU make;
other versions may work, then again they might not.</p>

<p>(For example, many broken versions of make will fail if you use the
recommended setup where <i>objdir</i> is different from <i>srcdir</i>.)

d20 2
a21 2
  <li>Build host tools necessary to build the compiler such as texinfo, bison,
  gperf.</li>
d23 2
a24 4
  <li> Build target tools for use by the compiler such as binutils (bfd,
  binutils, gas, gprof, ld, and opcodes)<br>
  if they have been individually linked or moved into the top level GCC source
  tree before configuring.</li>
d26 1
a26 1
  <li>Perform a 3-stage bootstrap of the compiler.</li>
d28 1
a28 1
  <li>Perform a comparison test of the stage2 and stage3 compilers.</li>
d30 2
a31 2
  <li>Build runtime libraries using the stage3 compiler from the previous
  step.</li>
a53 1

d72 2
a73 2
  <li>Build host tools necessary to build the compiler such as texinfo, bison,
  gperf.</li>
d75 2
a76 4
  <li>Build target tools for use by the compiler such as binutils (bfd,
  binutils, gas, gprof, ld, and opcodes)<br>
  if they have been individually linked or moved into the top level GCC source
  tree before configuring.</li>
d78 1
a78 1
  <li>Build the compiler (single stage only).</li>
d80 2
a81 2
  <li>Build runtime libraries using the compiler from the previous
  step.</li>
d96 1
a96 1
<i>Last modified on August 27, 1999.</i>
@


1.1.1.3
log
@2.95.3, test release 2
@
text
@d77 1
a77 1
your cross compiler, issue the command "make", which performs the
d98 2
a99 3
<p> If you have a multiprocessor system you can use `<code>make bootstrap
MAKE="make -j 2" -j 2</code>' or just `<code>make -j 2 bootstrap</code>'
for GNU Make 3.79 and above instead of just `<code>make bootstrap</code>'
d104 1
d106 1
a106 1
<p><a href="./index.html">Return to the GCC Installation page</a></p>
@


