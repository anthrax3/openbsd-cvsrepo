head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.3.0.52
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.50
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.48
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.46
	OPENBSD_5_0:1.1.1.3.0.44
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.42
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.40
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.36
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.38
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.34
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.32
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.30
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.28
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.26
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.24
	OPENBSD_4_0_BASE:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.22
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.20
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.18
	OPENBSD_3_7_BASE:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.16
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.14
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.12
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.10
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.8
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.6
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.4
	OPENBSD_3_0_BASE:1.1.1.3
	OPENBSD_2_9:1.1.1.3.0.2
	OPENBSD_2_9_BASE:1.1.1.3
	GCC-2_95_pre3_test3:1.1.1.3
	GCC-2_95_pre3_test2:1.1.1.2
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	GCC-2_95_2:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.17.11;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.08.23.20.32.30;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.08.23.20.32.30;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.01.29.15.27.24;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.02.24.18.38.37;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@<html>
<head>
<title>Installation Instructions: Testing GCC</title>
</head>

<body>
<h1 align="center">Installation Instructions: Testing GCC</h1>

<p>The testsuite has been temporarily removed from the gcc distributions
until the copyright status of some tests can be determined.  It is hoped
that the testsuite will be included in the gcc releases again soon.

<p>Until the testsuite is included it is impossible to run the testsuite.
Sorry.


<hr>
<i>Last modified on July 15, 1999.</i>

</body>
</html>
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Update to gcc 2.95.1, official release.
@
text
@@


1.1.1.2
log
@2.95.3, test release 2
@
text
@a1 1

d3 1
a3 1
<title>Installing GCC: Testing</title>
d7 1
a7 103
<h1 align="center">Installing GCC: Testing</h1>

<p><strong>Please note that this is only applicable to current development
versions of GCC and GCC 3.0 or later. GCC 2.95.x does not come with a
testsuite.</strong></p>

<p>Before you install GCC, you might wish to run the testsuite. This
step is optional and may require you to download additional software.</p>

<p>First, you must have <a href="download.html">downloaded the
testsuites</a>. The full distribution contains testsuites; only if you
downloaded the "core" compiler plus any front ends, you do not have the
testsuites.</p>

<p>Second, you must have a new version of dejagnu on your system;
dejagnu 1.3 will not work.  We have made dejagnu snapshots available at
<a href="ftp://gcc.gnu.org/pub/gcc/infrastructure">ftp://gcc.gnu.org/pub/gcc/infrastructure</a>
until a new version of dejagnu has been released.</p>

<p>A few targets require specific preparations:</p>

<ul>

<li>
In order to run the libio tests on targets which do not fully
support Unix/POSIX commands (e.g. Cgwin), the references to the dbz
directory may be deleted from libio/configure.in.
</li>

<li>
<p>When there is difficulty resolving paths to the files init.tcl and
runtest.exp, the following environment variables should be set
appropriately, for example:</p>

<blockquote><code>
TCL_LIBRARY = /usr/share/tcl8.0<br>
DEJAGNULIBS = /usr/share/dejagnu
</code></blockquote>

<p>On systems such as Cygwin, these paths are required to be actual
paths, not mounts or links; presumably this is due to some lack of
portability in the dejagnu code.</p>
</li>
</ul>

<p>Finally, you can run the testsuite (which may take a long time):</p>
<blockquote><code>
cd <i>objdir</i>; make -k check
</code></blockquote>

<p>The testing process will try to test as many components in the GCC
distribution as possible, including the C, C++ and Fortran compilers as
well as the C++ runtime libraries.</p>


<h2>How can I run the test suite on selected tests?</h2>

<p>As a first possibility to cut down the number of tests that are run it is
possible to use `<code>make check-gcc</code>` or `<code>make check-g++</code>`
in the gcc subdirectory of the object directory. To further cut down the
tests the following is possible:</p>

<blockquote><code>
  make check-gcc RUNTESTFLAGS="execute.exp &lt;other options&gt;"
</code></blockquote>

<p>This will run all gcc execute tests in the testsuite.</p>

<blockquote><code>
  make check-g++ RUNTESTFLAGS="old-deja.exp=9805* &lt;other options&gt;"
</code></blockquote>

<p>This will run the g++ "old-deja" tests in the testsuite where the filename
matches 9805*.</p>

<p>The *.exp files are located in the testsuite directories of the GCC
source, the most important ones being compile.exp, execute.exp, dg.exp
and old-deja.exp. To get a list of the possible *.exp files, pipe the
output of `<code>make check</code>` into a file and look at the
"<code>Running ...  .exp</code>" lines.


<h2>How to interpret test results</h2>

<p>After the testsuite has run you'll find various *.sum and *.log
files in the testsuite subdirectories. The *.log files contain a
detailed log of the compiler invocations and the corresponding
results, the *.sum files summarize the results. These summaries list
all the tests that have been run with a corresponding status code:</p>

<ul>
<li>PASS: the test passed as expected
<li>FAIL: the test unexpectedly failed
<li>XFAIL: the test failed as expected
<li>UNSUPPORTED: the test is not supported on this platform
<li>ERROR: the testsuite detected an error
<li>WARNING: the testsuite detected a possible problem
</ul>

<p> It is normal for some tests to report
unexpected failures.  At the current time our testing harness does not allow
fine grained control over whether or not a test is expected to fail.  We expect
to fix this problem in future releases.</p>
d9 3
d13 2
a14 1
<h2>Submitting test results</h2>
a15 5
<p>If you want to report the results to the GCC project, use the
<code>contrib/test_summary</code> shell script. Start it in the objdir with</p>
<blockquote><code>
<i>srcdir</i>/contrib/test_summary -p your_commentary.txt -m gcc-testresults@@gcc.gnu.org |sh
</code></blockquote>
d17 2
a18 11
<p>This script uses the <code>Mail</code> program to send the results, so
make sure it is in your PATH. The file your_commentary.txt is
prepended to the testsuite summary and should contain any special
remarks you have on your results or your build environment. Please
do not edit the testsuite result block or the subject line, as these
messages are automatically parsed and presented at the <a
href="http://gcc.gnu.org/testresults/">GCC testresults</a> web
page.  Here you can also gather information on how specific tests
behave on different platforms and compare them with your results. A
few failing testcases are possible even on released versions and you
should look here first if you think your results are unreasonable.</p>
@


1.1.1.3
log
@Synch with FSF
@
text
@d22 2
a23 2
<p>Second, you must have a current version of dejagnu installed;
dejagnu 1.3 is not sufficient.  We have made dejagnu snapshots available at
@


