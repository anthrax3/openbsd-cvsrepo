head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.3.0.52
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.50
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.48
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.46
	OPENBSD_5_0:1.1.1.3.0.44
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.42
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.40
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.36
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.38
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.34
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.32
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.30
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.28
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.26
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.24
	OPENBSD_4_0_BASE:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.22
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.20
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.18
	OPENBSD_3_7_BASE:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.16
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.14
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.12
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.10
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.8
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.6
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.4
	OPENBSD_3_0_BASE:1.1.1.3
	OPENBSD_2_9:1.1.1.3.0.2
	OPENBSD_2_9_BASE:1.1.1.3
	GCC-2_95_pre3_test3:1.1.1.3
	GCC-2_95_pre3_test2:1.1.1.3
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	GCC-2_95_2:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.17.11;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.08.23.20.32.30;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.08.23.20.32.30;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.01.19.16.07.13;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.01.29.15.27.24;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@
                          Installing GCC: Building
                                      
   Now that GCC is configured, you are ready to build the compiler and
   runtime libraries.
   
   We _highly_ recommend that GCC be built using GNU make; other versions
   may work, then again they might not. To be safe build with GNU make.
   
Building a native compiler

   For a native build issue the command `make bootstrap'. This will build
   the entire GCC system, which includes the following steps:
     * Build host tools necessary to build the compiler such as texinfo,
       bison, gperf.
     * Build target tools for use by the compiler such as gas, gld, and
       binutils if they have been properly unpacked into the GCC source
       tree.
     * Perform a 3-stage bootstrap of the compiler.
     * Perform a comparison test of the stage2 and stage3 compilers.
     * Build runtime libraries using the stage3 compiler from the
       previous step.
       
   If you are short on disk space you might consider `make
   bootstrap-lean' instead. This is identical to `make bootstrap' except
   that object files from the stage1 and stage2 of the 3-stage bootstrap
   of the compiler are deleted as soon as they are no longer needed.
   
   If you want to save additional space during the bootstrap and in the
   final installation as well, you can build the compiler binaries
   without debugging information with "make CFLAGS='-O' LIBCFLAGS='-g
   -O2' LIBCXXFLAGS='-g -O2 -fno-implicit-templates' bootstrap". This
   will save roughly 40% of disk space both for the bootstrap and the
   final installation. (Libraries will still contain debugging
   information.)
   
   If you used the flag --enable-languages=... to restrict the compilers
   to be built, only those you've actually enabled will be built. This
   will of course only build those runtime libraries, for which the
   particular compiler has been built. Please note, that re-defining
   LANGUAGES when calling `make bootstrap' _*does not*_ work anymore!
   
Building a cross compiler

   We recommend reading the [1]crossgcc FAQ for information about
   building cross compilers.
   
   When building a cross compiler, it is not generally possible to do a
   3-stage bootstrap of the compiler. This makes for an interesting
   problem as parts of GCC can only be built with GCC.
   
   To build a cross compiler, we first recommend building and installing
   a native compiler. You can then use the native GCC compiler to build
   the cross compiler.
   
   Assuming you have already installed a native copy of GCC and
   configured your corss compiler, issue the command "make", which
   performs the following steps:
     * Build host tools necessary to build the compiler such as texinfo,
       bison, gperf.
     * Build target tools for use by the compiler such as gas, gld, and
       binutils if they have been properly unpacked into the GCC source
       tree.
     * Build the compiler (single stage only).
     * Build runtime libraries using the compiler from the previous step.
       
   Note that if an error occurs in any step the make process will exit.
   
Building in parallel

   If you have a multiprocessor you can use `make bootstrap MAKE="make -j
   2" -j 2' instead of just `make bootstrap' when building GCC. You can
   use a bigger number instead of two if you like. In most cases, it
   won't help to use a number bigger than the number of processors in
   your machine.
     _________________________________________________________________
   
   _Last modified on July 16, 1999._

References

   1. http://www.objsw.com/CrossGCC/
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Update to gcc 2.95.1, official release.
@
text
@@


1.1.1.2
log
@Update to 2.95.2
@
text
@d8 1
a8 4
   may work, then again they might not.
   
   (For example, many broken versions of make will fail if you use the
   recommended setup where _objdir_ is different from _srcdir_.)
d16 3
a18 4
     * Build target tools for use by the compiler such as binutils (bfd,
       binutils, gas, gprof, ld, and opcodes)
       if they have been individually linked or moved into the top level
       GCC source tree before configuring.
d61 3
a63 4
     * Build target tools for use by the compiler such as binutils (bfd,
       binutils, gas, gprof, ld, and opcodes)
       if they have been individually linked or moved into the top level
       GCC source tree before configuring.
d78 1
a78 1
   _Last modified on August 27, 1999._
@


1.1.1.3
log
@2.95.3, test release 2
@
text
@d3 1
a3 1

d6 1
a6 1

d9 1
a9 1

d12 1
a12 1

d27 1
a27 1

d32 1
a32 1

d40 1
a40 1

d46 1
a46 1

d51 1
a51 1

d55 1
a55 1

d59 1
a59 1

d61 1
a61 1
   configured your cross compiler, issue the command "make", which
d71 1
a71 1

d73 1
a73 1

d76 2
a77 3
   If you have a multiprocessor system you can use `make bootstrap
   MAKE="make -j 2" -j 2' or just `make -j 2 bootstrap' for GNU Make 3.79
   and above instead of just `make bootstrap' when building GCC. You can
d82 2
a83 2

   [2]Return to the GCC Installation page
a87 1
   2. http://gcc.gnu.org/install/index.html
@


