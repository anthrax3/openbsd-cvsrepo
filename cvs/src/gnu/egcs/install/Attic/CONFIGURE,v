head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.3.0.52
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.50
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.48
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.46
	OPENBSD_5_0:1.1.1.3.0.44
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.42
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.40
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.36
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.38
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.34
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.32
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.30
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.28
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.26
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.24
	OPENBSD_4_0_BASE:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.22
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.20
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.18
	OPENBSD_3_7_BASE:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.16
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.14
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.12
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.10
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.8
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.6
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.4
	OPENBSD_3_0_BASE:1.1.1.3
	OPENBSD_2_9:1.1.1.3.0.2
	OPENBSD_2_9_BASE:1.1.1.3
	GCC-2_95_pre3_test3:1.1.1.3
	GCC-2_95_pre3_test2:1.1.1.2
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	GCC-2_95_2:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.17.11;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.08.23.20.32.30;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.08.23.20.32.30;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.01.29.15.27.25;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.02.24.18.38.38;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@
                       Installing GCC: Configuration
                                      
   Like most GNU software, GCC must be configured before it can be built.
   This document describes the recommended configuration procedure for
   both native and cross targets.
   
   We use _srcdir_ to refer to the toplevel source directory for GCC; we
   use _objdir_ to refer to the toplevel build/object directory.
   
   First, we _highly_ recommend that GCC be built into a separate
   directory than the sources which does _not_ reside within the source
   tree. This is how we generally build GCC; building where _srcdir_ ==
   _objdir_ should still work, but doesn't get extensive testing;
   building where _objdir_ is a subdirectory of _srcdir_ is unsupported.
   
   Second, when configuring a native system, either "cc" or "gcc" must be
   in your path or you must set CC in your environment before running
   configure. Otherwise the configuration scripts may fail.
   
   To configure GCC:
   
     % mkdir _objdir_
     % cd _objdir_
     % _srcdir_/configure _[target]_ _[options]_
     
   _target specification_
     * GCC has code to correctly determine the correct value for _target_
       for nearly all native systems. Therefore, we highly recommend you
       not provide a configure target when configuring a native compiler.
     * _target_ must be specified when configuring a cross compiler;
       examples of valid targets would be i960-rtems, m68k-coff, sh-elf,
       etc.
       
   _options specification_
   
   Use _options_ to override several configure time options for GCC. A
   partial list of supported options:
     * --prefix=_dirname_ -- Specify the toplevel installation directory.
       This is the recommended way to install the tools into a directory
       other than the default. The toplevel installation directory
       defaults to /usr/local.
       We _highly_ recommend against _prefix_ being the same or a
       subdirectory of _objdir_ or vice versa.
       These additional options control where certain parts of the
       distribution are installed. Normally you should not need to use
       these options.
          + --with-local-prefix=_dirname_ -- Specify the installation
            directory for local include files. The default is /usr/local.
          + --with-gxx-include-dir=_dirname_ -- Specify the installation
            directory for g++ header files. The default is
            /usr/local/include/g++.
     * --enable-shared -- Build shared versions of the C++ runtime
       libraries if supported --disable-shared is the default.
     * --enable-haifa -- Enable the new Haifa instruction scheduler in
       the compiler; the new scheduler can significantly improve code on
       some targets.
       For EGCS 1.0.x releases --disable-haifa is the default on all
       platforms except the HPPA.
       For newer releases --disable-haifa is the default on all platforms
       except the alpha, hppa, powerpc, rs6000, SPARC and m32r.
     * --with-gnu-as -- Specify that the compiler should assume the GNU
       assembler (aka gas) is available.
     * --with-gnu-ld -- Specify that the compiler should assume the GNU
       linker (aka gld) is available.
     * --with-stabs -- Specify that stabs debugging information should be
       used instead of whatever format the host normally uses. Normally
       GCC uses the same debug format as the host system.
     * --enable-multilib -- Specify that multiple target libraries should
       be built to support different target variants, calling
       conventions, etc. This is the default.
     * --enable-threads -- Specify that the target supports threads. This
       affects only the Objective-C compiler and runtime library.
     * --enable-threads=_lib_ -- Specify that _lib_ is the thread support
       library. This affects only the Objective-C compiler and runtime
       library.
     * --with-cpu=_cpu_ -- Specify which cpu variant the compiler should
       generate code for by default. This is currently only supported on
       the some ports, specifically arm, powerpc, and SPARC. If configure
       does not recognize the model name (e.g. arm700, 603e, or
       ultrasparc) you provide, please check the configure script for a
       complete list of supported models.
     * --enable-target-optspace -- Specify that target libraries should
       be optimzied for code space instead of code speed. This is the
       default for the m32r platform.
     * --enable-cpp -- Specify that a shell script which emulates
       traditional cpp functionality should be installed.
     * --enable-cpplib -- Specify that the functionality of CPP should be
       integrated into the compiler itself. This is still under
       development, but may be useful in limited situations. This option
       is never enabled by default.
     * --without-fast-fixincludes -- Specify that the old, slower method
       of fixing the system header files should be used. EGCS 1.1.x and
       older releases default to the slow version. GCC 2.95 and newer
       releases will default to the fast version.
     * --enable-version-specific-runtime-libs -- Specify that runtime
       libraries should be installed in the compiler specific
       subdirectory (${libsubdir}) rather than the usual places. In
       addition, libstdc++'s include files will be installed in
       ${libsubdir}/include/g++ unless you overruled it by using
       --with-gxx-include-dir=_dirname_. Using this option is
       particularly useful if you intend to use several versions of
       egcs/gcc in parallel. This is currently supported by libf2c and
       libstdc++.
     * --enable-languages=_lang1_,_lang2_,... -- Specify that only a
       particular subset of compilers and their runtime libraries should
       be built. For a list of valid values for _lang_x you can issue the
       following command in the gcc directory of your GCC source tree:
       grep language= */config-lang.in
       Currently, you can use any of the following: CHILL, c++, f77, java
       and objc. Please note, that this switch does not work with EGCS
       1.1.2 or older versions of egcs. It will be supported in GCC 2.95
       and newer version.
       If you do not pass this flag, all languages available in the gcc
       sub-tree will be configured. Re-defining LANGUAGES when calling
       make bootstrap _*does not*_ work anymore, as those language
       sub-directories might not have been configured!
     * --with-dwarf2 -- Specify that the compiler should use DWARF2
       debugging information as the default.
       
   Some options which only apply to building cross compilers:
     * --with-headers=_dir_ -- Specifies a directory which has target
       include files. These include files will be copied into the gcc
       install directory. Fixincludes will be run on these files to make
       them compatible with gcc.
     * --with-libs=_"dir1 dir2 ... dirN"_ -- Specifies a list of
       directories which contain the target runtime libraries. These
       libraries will be copied into the gcc install directory.
     * --with-newlib -- Specifies that "newlib" is being used as the
       target C library. This causes __eprintf to be omitted from
       libgcc.a on the assumption that it will be provided by newlib.
       
   Note that each --enable option has a corresponding --disable option
   and that each --with option has a corresponding --without option.
     _________________________________________________________________
   
   _Last modified on July 16, 1999._
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Update to gcc 2.95.1, official release.
@
text
@@


1.1.1.2
log
@2.95.3, test release 2
@
text
@d3 1
a3 1

d7 1
a7 1

d10 1
a10 1

d16 1
a16 1

d20 1
a20 1

d22 1
a22 1

d26 1
a26 1

d31 4
a34 6
     * _target_ must be specified as --target=_target_ when configuring a
       cross compiler; examples of valid targets would be i960-rtems,
       m68k-coff, sh-elf, etc.
     * Specifying just _target_ instead of --target=_target_ implies that
       the host defaults to _target_.

d36 1
a36 1

d73 1
a73 2
       affects the Objective-C compiler and runtime library, and
       exception handling for other languages like C++ and Java.
d75 2
a76 3
       library. This affects the Objective-C compiler and runtime
       library, and exception handling for other languages like C++ and
       Java.
d84 1
a84 1
       be optimized for code space instead of code speed. This is the
d89 3
a91 4
       integrated into the compiler itself. This option is not supported
       by snapshots since November 2000. In snapshots where it is
       supported, it is not enabled by default, except for snapshots very
       close to November 2000.
d102 3
a104 2
       particularly useful if you intend to use several versions of GCC
       in parallel. This is currently supported by libf2c and libstdc++.
d112 2
a113 2
       1.1.2 or older versions of egcs. It is supported in GCC 2.95 and
       newer versions.
d120 1
a120 1

d123 3
a125 5
       include files. _This options is required_ when building a cross
       compiler, if ${prefix}/${target}/sys-include doesn't pre-exist.
       These include files will be copied into the gcc install directory.
       Fixincludes will be run on these files to make them compatible
       with gcc.
d132 1
a132 1

d136 2
a137 6

   [1]Return to the GCC Installation page

References

   1. http://gcc.gnu.org/install/index.html
@


1.1.1.3
log
@Synch with FSF
@
text
@d114 2
a115 3
       Currently, you can use any of the following: c++, f77, java and
       objc. CHILL is not currently maintained, and will almost certainly
       fail to compile. Note that this switch does not work with EGCS
@


