head	1.19;
access;
symbols
	OPENBSD_5_4:1.18.0.4
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.15.0.32
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.30
	OPENBSD_5_0:1.15.0.28
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.26
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.24
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.20
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.22
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.18
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.16
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.14
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.12
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.10
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.8
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.4
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6;
locks; strict;
comment	@# @;


1.19
date	2013.08.06.19.17.14;	author miod;	state dead;
branches;
next	1.18;

1.18
date	2013.02.02.13.38.08;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2012.08.31.00.11.27;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2012.08.02.13.38.38;	author okan;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.09.22.27.07;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2004.09.18.20.54.45;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.24.17.12.55;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.09.19.31.50;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.11.00.20.18;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.22.20.37.18;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.25.14.36.39;	author maja;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.15.06.10.21;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	99.12.07.00.42.54;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.09.30.13.40.35;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	99.09.30.12.10.55;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	99.07.18.18.19.17;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	99.06.18.00.21.57;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.05.28.14.26.17;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.05.26.15.47.01;	author espie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@#	$OpenBSD: Makefile.bsd-wrapper,v 1.18 2013/02/02 13:38:08 miod Exp $

.if (${MACHINE_ARCH} == "mips")
NOPIC=
.endif

IO_DIR=		$(.CURDIR)/../libio
LIBIBERTY_DIR=	$(.CURDIR)/../../lib/libiberty
STD_DIR=	$(.CURDIR)/std

.if defined(MAKEOBJDIR)
OBJDIR=${MAKEOBJDIR}
.elif defined(OBJMACHINE)
OBJDIR=	obj.${MACHINE}
.else
OBJDIR=	obj
.endif

IO_OBJDIR!=	if [ -d $(IO_DIR)/$(OBJDIR) ]; then \
			echo $(IO_DIR)/$(OBJDIR); \
		else \
			echo $(IO_DIR); \
		fi

LIBIBERTY_OBJDIR!=if [ -d $(LIBIBERTY_DIR)/$(OBJDIR) ]; then \
			echo $(LIBIBERTY_DIR)/$(OBJDIR); \
		else \
			echo $(LIBIBERTY_DIR); \
		fi

LIB=		stdc++
CXXFLAGS+=	-fno-implicit-templates
CPPFLAGS+=	-I$(.CURDIR) -I$(.CURDIR)/stl -I$(.CURDIR)/../libio -I$(IO_OBJDIR)
DPADD+=		${LIBM}
LDADD+=		-lm

# stdc++ sources/objs
STD_SRCS=	cstringi.cc stdexcepti.cc cstdlibi.cc cmathi.cc stlinst.cc \
valarray.cc
SPEC_OBJS=	cstrmain.o cstrio.o fcomplex.o fcomio.o dcomplex.o dcomio.o \
		ldcomplex.o ldcomio.o
STD_OBJS=	$(STD_SRCS:N*.h:R:S/$/.o/g) $(SPEC_OBJS)

# As we need to fill variables with contents of dynamically created files
# we must first see to that they are really generated.  This is a hack that
# ensures this.  The echo at the end is because make doesn't like command
# substitutions to not generate output.
.ifmake !obj && !clean && !cleandir && !includes
PREREQ!=	test ! -f $(IO_OBJDIR)/iostream.list && \
			(cd $(IO_DIR); \
			 make -f Makefile.bsd-wrapper iostream.list); \
		test ! -f $(LIBIBERTY_OBJDIR)/needed-list && \
			(cd $(LIBIBERTY_DIR); \
			 make -f Makefile.bsd-wrapper needed-list); \
		echo 'Prerequisites made'

IO_OBJS!=	cat $(IO_OBJDIR)/iostream.list
QIO_OBJS=	$(IO_OBJS:S/^/$(IO_OBJDIR)\//g)

LIBIBERTY_SRCS!=cat $(LIBIBERTY_OBJDIR)/needed-list
LIBIBERTY_OBJS=$(LIBIBERTY_SRCS:N*.h:S/.c$/.o/g)
# strerror.o does need to be hardwired, as it holds more functionality
# than the standard strerror, so HAVE_STRERROR is not enough to disable it
LIBIBERTY_OBJS+=strerror.o
QLIBIBERTY_OBJS=$(LIBIBERTY_OBJS:S/^/$(LIBIBERTY_OBJDIR)\//g)
.endif

SRCS=		$(STD_SRCS)

OBJS=		$(SPEC_OBJS) $(QIO_OBJS) $(QLIBIBERTY_OBJS)

G_CFG_H=	$(IO_OBJDIR)/_G_config.h

all:		$(G_CFG_H)

beforedepend:	$(G_CFG_H)

$(G_CFG_H):
	cd $(IO_DIR); ${MAKE} -f Makefile.bsd-wrapper _G_config.h

clean:	_SUBDIRUSE
	rm -f a.out [Ee]rrs mklog core *.core ${CLEANFILES}
	rm -f lib${LIB}.a ${STD_OBJS}
	rm -f lib${LIB}_g.a ${STD_OBJS:.o=.go}
	rm -f lib${LIB}_p.a ${STD_OBJS:.o=.po}
	rm -f lib${LIB}.so.*.* ${STD_OBJS:.o=.so}
	rm -f llib-l${LIB}.ln ${STD_OBJS:.o=.ln}

GXX_INCDIR=$(DESTDIR)/usr/include/g++


# stl stuff needs to be installed directly under GXX_INCDIR
includes:
	@@test -d $(GXX_INCDIR) || \
		install -d -m 755 -o $(BINOWN) -g $(BINGRP) $(GXX_INCDIR) 
	@@test -d $(GXX_INCDIR)/std || \
		install -d -m 755 -o $(BINOWN) -g $(BINGRP) $(GXX_INCDIR) $(GXX_INCDIR)/std
	@@-cd $(.CURDIR); for i in `${MAKE} -f Makefile.in -V HEADERS` \
		*.h stl/*.h std/*.h std/*.cc std/*.tcc; do \
		[ -f stl/$$i ] && i=stl/$$i; \
		case $$i in stl*) j=`basename $$i`;; *) j=$$i;; esac; \
		cmp -s $(GXX_INCDIR)/$$j $$i || \
		${INSTALL} ${INSTALL_COPY} -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
				$$i $(GXX_INCDIR)/$$j; \
	done
#
# Misc GNU overridden targets.
#
$(QIO_OBJS) $(QIO_OBJS:.o=.go) $(QIO_OBJS:.o=.po) $(QIO_OBJS:.o=.so):
	cd $(IO_DIR); $(MAKE) -f Makefile.bsd-wrapper

$(QLIBIBERTY_OBJS) $(QLIBIBERTY_OBJS:.o=.go) $(QLIBIBERTY_OBJS:.o=.po) $(QLIBIBERTY_OBJS:.o=.so):
	cd $(LIBIBERTY_DIR); $(MAKE) -f Makefile.bsd-wrapper

stdexcepti.o:	stdexcepti.cc
	@@echo "${COMPILE.cc} -frtti ${.CURDIR}/stdexcepti.cc"
	@@${COMPILE.cc} -frtti ${.CURDIR}/stdexcepti.cc -frtti -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

stdexcepti.go: stdexcepti.cc
	@@echo "${COMPILE.cc} -frtti -g ${.CURDIR}/stdexcepti.cc -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -g ${.CURDIR}/stdexcepti.cc -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

stdexcepti.po: stdexcepti.cc
	@@echo "${COMPILE.cc} -frtti -p ${.CURDIR}/stdexcepti.cc -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -p ${.CURDIR}/stdexcepti.cc -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

stdexcepti.so: stdexcepti.cc
# XXX workaround for compiler ICE
.if ${MACHINE_ARCH} == "m68k"
	@@echo "${COMPILE.cc} -O0 -frtti ${PICFLAG} -DPIC ${.CURDIR}/stdexcepti.cc -o ${.TARGET}"
	@@${COMPILE.cc} -O0 -frtti ${PICFLAG} -DPIC ${.CURDIR}/stdexcepti.cc -o ${.TARGET}.o
.else
	@@echo "${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.CURDIR}/stdexcepti.cc -o ${.TARGET}"
	@@${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.CURDIR}/stdexcepti.cc -o ${.TARGET}.o
.endif
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

typeinfoi.o: typeinfoi.cc $(.CURDIR)/std/typeinfo.h
	@@echo "${COMPILE.cc} -frtti ${.CURDIR}/typeinfoi.cc"
	@@${COMPILE.cc} -frtti ${.CURDIR}/typeinfoi.cc -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

typeinfoi.go: typeinfoi.cc $(.CURDIR)/std/typeinfo.h
	@@echo "${COMPILE.cc} -frtti -g ${.CURDIR}/typeinfoi.cc -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -g ${.CURDIR}/typeinfoi.cc -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

typeinfoi.po: typeinfoi.cc $(.CURDIR)/std/typeinfo.h
	@@echo "${COMPILE.cc} -frtti -p ${.CURDIR}/typeinfoi.cc -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -p ${.CURDIR}/typeinfoi.cc -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

typeinfoi.so: typeinfoi.cc $(.CURDIR)/std/typeinfo.h
	@@echo "${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.CURDIR}/typeinfoi.cc -o ${.TARGET}"
	@@${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.CURDIR}/typeinfoi.cc -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

STRFUNCS= 	REP MAIN TRAITS ADDSS ADDPS ADDCS ADDSP ADDSC \
		EQSS EQPS EQSP NESS NEPS NESP LTSS LTPS LTSP GTSS GTPS GTSP \
		LESS LEPS LESP GESS GEPS GESP
STRIO=		EXTRACT INSERT GETLINE
COMFUNCS=	MAIN ADDCC ADDCF ADDFC SUBCC SUBCF SUBFC MULCC MULCF MULFC \
		DIVCC DIVCF DIVFC PLUS MINUS EQCC EQCF EQFC NECC NECF NEFC ABS \
		ARG POLAR CONJ NORM COS COSH EXP LOG POWCC POWCF POWCI POWFC \
		SIN SINH SQRT
COMIO=		EXTRACT INSERT

cstrmain.o: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -DC \
		`for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    	$(.CURDIR)/sinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -DC \
	    `for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    $(.CURDIR)/sinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

cstrmain.go: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -g -DC \
		`for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    	$(.CURDIR)/sinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -g -DC \
	    `for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    $(.CURDIR)/sinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

cstrmain.po: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -p -DC \
		`for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    	$(.CURDIR)/sinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -p -DC \
	    `for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    $(.CURDIR)/sinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

cstrmain.so: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DC \
		`for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    	$(.CURDIR)/sinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DC \
	    `for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    $(.CURDIR)/sinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o
	
cstrio.o: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

cstrio.go: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -g -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o cstrio.go'
	@@$(COMPILE.cc) -g -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

cstrio.po: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -p -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -p -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

cstrio.so: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC  -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

fcomplex.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

fcomplex.go: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -g -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomplex.go'
	@@$(COMPILE.cc) -g  -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

fcomplex.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -p  -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

fcomplex.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o


fcomio.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

fcomio.go: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -g -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -g -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

fcomio.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -p -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

fcomio.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

dcomplex.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

dcomplex.go: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -g -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -g  -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

dcomplex.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -p  -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

dcomplex.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

dcomio.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

dcomio.go: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -g -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -g -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

dcomio.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -p -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

dcomio.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

ldcomplex.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

ldcomplex.go: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -g -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -g  -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

ldcomplex.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -p  -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

ldcomplex.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

ldcomio.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

ldcomio.go: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -g -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -g -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

ldcomio.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) -p -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

ldcomio.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ${.TARGET}.o
	@@$(LD) -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.if defined(DESTDIR)
CPPFLAGS+= -idirafter ${DESTDIR}/usr/include/g++
.endif

.include <bsd.lib.mk>
@


1.18
log
@Compile stdexcepti.cc with -O0 on m68k when compiling it -fPIC to avoid an ICE
in the compiler. Not investigated further since the compiler will hopefully
get an upgrade soon.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.17 2012/08/31 00:11:27 deraadt Exp $
@


1.17
log
@No longer create lib*_pic.a files.  Nothing uses them anymore.
grep help from sthen; discussion with brad
ok guenther pascal
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.16 2012/08/02 13:38:38 okan Exp $
d134 5
d141 1
@


1.16
log
@remove leftover NOLINT, WANTLINT, LINTFLAGS, LOBJ vars and lint targets.

ok guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.15 2005/01/09 22:27:07 espie Exp $
d86 1
a86 1
	rm -f lib${LIB}_pic.a lib${LIB}.so.*.* ${STD_OBJS:.o=.so}
@


1.15
log
@go look in MAKEOBJDIR if defined, ensuring cross-pieces have a chance
to find each other.

okay niklas@@ (`deja-vu')
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.14 2004/09/18 20:54:45 deraadt Exp $
a5 2

NOLINT=
@


1.14
log
@gnu code will never, ever, EVER, get close to passing lint
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.13 2003/11/24 17:12:55 espie Exp $
d13 3
a15 1
.if defined(OBJMACHINE)
@


1.13
log
@Switch to using libiberty in new location.
Disable building of cxxfilt in gcc, build it from its own directory.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.12 2003/02/09 19:31:50 espie Exp $
d6 2
@


1.12
log
@cosmetic clean-up: use ${.TARGET} extensively, instead of hard-coding
target names.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.11 2002/05/11 00:20:18 espie Exp $
d8 1
a8 1
LIBIBERTY_DIR=	$(.CURDIR)/../libiberty
@


1.11
log
@Add missing libraries to bsd.prog.mk (mostly kerberosV)
Use them in DPADD throughout the tree.
Fix a few mispells (LIBMATH -> LIBM...)
Wipe obsolete lib (LIBRESOLV)
Sort added missing libraries, move obsolete stuff apart.
Synch documentation in bsd.README

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.10 2001/11/22 20:37:18 espie Exp $
d175 1
a175 1
	    	$(.CURDIR)/sinst.cc -o cstrmain.o'
d178 3
a180 3
	    $(.CURDIR)/sinst.cc -o cstrmain.o.o
	@@$(LD) -x -r cstrmain.o.o -o cstrmain.o
	@@rm -f cstrmain.o.o
d186 1
a186 1
	    	$(.CURDIR)/sinst.cc -o cstrmain.go'
d189 3
a191 3
	    $(.CURDIR)/sinst.cc -o cstrmain.go.o
	@@$(LD) -X -r cstrmain.go.o -o cstrmain.go
	@@rm -f cstrmain.go.o
d197 1
a197 1
	    	$(.CURDIR)/sinst.cc -o cstrmain.po'
d200 3
a202 3
	    $(.CURDIR)/sinst.cc -o cstrmain.po.o
	@@$(LD) -X -r cstrmain.po.o -o cstrmain.po
	@@rm -f cstrmain.po.o
d208 1
a208 1
	    	$(.CURDIR)/sinst.cc -o cstrmain.so'
d211 3
a213 3
	    $(.CURDIR)/sinst.cc -o cstrmain.so.o
	@@$(LD) -x -r cstrmain.so.o -o cstrmain.so
	@@rm -f cstrmain.so.o
d219 1
a219 1
		$(.CURDIR)/sinst.cc -o cstrio.o'
d222 3
a224 3
		$(.CURDIR)/sinst.cc -o cstrio.o.o
	@@$(LD) -x -r cstrio.o.o -o cstrio.o
	@@rm -f cstrio.o.o
d233 3
a235 3
		$(.CURDIR)/sinst.cc -o cstrio.go.o
	@@$(LD) -X -r cstrio.go.o -o cstrio.go
	@@rm -f cstrio.go.o
d241 1
a241 1
		$(.CURDIR)/sinst.cc -o cstrio.po'
d244 3
a246 3
		$(.CURDIR)/sinst.cc -o cstrio.po.o
	@@$(LD) -X -r cstrio.po.o -o cstrio.po
	@@rm -f cstrio.po.o
d252 1
a252 1
		$(.CURDIR)/sinst.cc -o cstrio.so'
d255 3
a257 3
		$(.CURDIR)/sinst.cc -o cstrio.so.o
	@@$(LD) -x -r cstrio.so.o -o cstrio.so
	@@rm -f cstrio.so.o
d263 1
a263 1
		$(.CURDIR)/cinst.cc -o fcomplex.o'
d266 3
a268 3
		$(.CURDIR)/cinst.cc -o fcomplex.o.o
	@@$(LD) -x -r fcomplex.o.o -o fcomplex.o
	@@rm -f fcomplex.o.o
d277 3
a279 3
		$(.CURDIR)/cinst.cc -o fcomplex.go.o
	@@$(LD) -X -r fcomplex.go.o -o fcomplex.go
	@@rm -f fcomplex.go.o
d285 1
a285 1
		$(.CURDIR)/cinst.cc -o fcomplex.po'
d288 3
a290 3
		$(.CURDIR)/cinst.cc -o fcomplex.po.o
	@@$(LD) -X -r fcomplex.po.o -o fcomplex.po
	@@rm -f fcomplex.po.o
d296 1
a296 1
		$(.CURDIR)/cinst.cc -o fcomplex.so'
d299 3
a301 3
		$(.CURDIR)/cinst.cc -o fcomplex.so.o
	@@$(LD) -x -r fcomplex.so.o -o fcomplex.so
	@@rm -f fcomplex.so.o
d308 1
a308 1
		$(.CURDIR)/cinst.cc -o fcomio.o'
d311 3
a313 3
		$(.CURDIR)/cinst.cc -o fcomio.o.o
	@@$(LD) -x -r fcomio.o.o -o fcomio.o
	@@rm -f fcomio.o.o
d319 1
a319 1
		$(.CURDIR)/cinst.cc -o fcomio.go'
d322 3
a324 3
		$(.CURDIR)/cinst.cc -o fcomio.go.o
	@@$(LD) -X -r fcomio.go.o -o fcomio.go
	@@rm -f fcomio.go.o
d330 1
a330 1
		$(.CURDIR)/cinst.cc -o fcomio.po'
d333 3
a335 3
		$(.CURDIR)/cinst.cc -o fcomio.po.o
	@@$(LD) -X -r fcomio.po.o -o fcomio.po
	@@rm -f fcomio.po.o
d341 1
a341 1
		$(.CURDIR)/cinst.cc -o fcomio.so'
d344 3
a346 3
		$(.CURDIR)/cinst.cc -o fcomio.so.o
	@@$(LD) -x -r fcomio.so.o -o fcomio.so
	@@rm -f fcomio.so.o
d352 1
a352 1
		$(.CURDIR)/cinst.cc -o dcomplex.o'
d355 3
a357 3
		$(.CURDIR)/cinst.cc -o dcomplex.o.o
	@@$(LD) -x -r dcomplex.o.o -o dcomplex.o
	@@rm -f dcomplex.o.o
d363 1
a363 1
		$(.CURDIR)/cinst.cc -o dcomplex.go'
d366 3
a368 3
		$(.CURDIR)/cinst.cc -o dcomplex.go.o
	@@$(LD) -X -r dcomplex.go.o -o dcomplex.go
	@@rm -f dcomplex.go.o
d374 1
a374 1
		$(.CURDIR)/cinst.cc -o dcomplex.po'
d377 3
a379 3
		$(.CURDIR)/cinst.cc -o dcomplex.po.o
	@@$(LD) -X -r dcomplex.po.o -o dcomplex.po
	@@rm -f dcomplex.po.o
d385 1
a385 1
		$(.CURDIR)/cinst.cc -o dcomplex.so'
d388 3
a390 3
		$(.CURDIR)/cinst.cc -o dcomplex.so.o
	@@$(LD) -x -r dcomplex.so.o -o dcomplex.so
	@@rm -f dcomplex.so.o
d396 1
a396 1
		$(.CURDIR)/cinst.cc -o dcomio.o'
d399 3
a401 3
		$(.CURDIR)/cinst.cc -o dcomio.o.o
	@@$(LD) -x -r dcomio.o.o -o dcomio.o
	@@rm -f dcomio.o.o
d407 1
a407 1
		$(.CURDIR)/cinst.cc -o dcomio.go'
d410 3
a412 3
		$(.CURDIR)/cinst.cc -o dcomio.go.o
	@@$(LD) -X -r dcomio.go.o -o dcomio.go
	@@rm -f dcomio.go.o
d418 1
a418 1
		$(.CURDIR)/cinst.cc -o dcomio.po'
d421 3
a423 3
		$(.CURDIR)/cinst.cc -o dcomio.po.o
	@@$(LD) -X -r dcomio.po.o -o dcomio.po
	@@rm -f dcomio.po.o
d429 1
a429 1
		$(.CURDIR)/cinst.cc -o dcomio.so'
d432 3
a434 3
		$(.CURDIR)/cinst.cc -o dcomio.so.o
	@@$(LD) -x -r dcomio.so.o -o dcomio.so
	@@rm -f dcomio.so.o
d440 1
a440 1
		$(.CURDIR)/cinst.cc -o ldcomplex.o'
d443 3
a445 3
		$(.CURDIR)/cinst.cc -o ldcomplex.o.o
	@@$(LD) -x -r ldcomplex.o.o -o ldcomplex.o
	@@rm -f ldcomplex.o.o
d451 1
a451 1
		$(.CURDIR)/cinst.cc -o ldcomplex.go'
d454 3
a456 3
		$(.CURDIR)/cinst.cc -o ldcomplex.go.o
	@@$(LD) -X -r ldcomplex.go.o -o ldcomplex.go
	@@rm -f ldcomplex.go.o
d462 1
a462 1
		$(.CURDIR)/cinst.cc -o ldcomplex.po'
d465 3
a467 3
		$(.CURDIR)/cinst.cc -o ldcomplex.po.o
	@@$(LD) -X -r ldcomplex.po.o -o ldcomplex.po
	@@rm -f ldcomplex.po.o
d473 1
a473 1
		$(.CURDIR)/cinst.cc -o ldcomplex.so'
d476 3
a478 3
		$(.CURDIR)/cinst.cc -o ldcomplex.so.o
	@@$(LD) -x -r ldcomplex.so.o -o ldcomplex.so
	@@rm -f ldcomplex.so.o
d484 1
a484 1
		$(.CURDIR)/cinst.cc -o ldcomio.o'
d487 3
a489 3
		$(.CURDIR)/cinst.cc -o ldcomio.o.o
	@@$(LD) -x -r ldcomio.o.o -o ldcomio.o
	@@rm -f ldcomio.o.o
d495 1
a495 1
		$(.CURDIR)/cinst.cc -o ldcomio.go'
d498 3
a500 3
		$(.CURDIR)/cinst.cc -o ldcomio.go.o
	@@$(LD) -X -r ldcomio.go.o -o ldcomio.go
	@@rm -f ldcomio.go.o
d506 1
a506 1
		$(.CURDIR)/cinst.cc -o ldcomio.po'
d509 3
a511 3
		$(.CURDIR)/cinst.cc -o ldcomio.po.o
	@@$(LD) -X -r ldcomio.po.o -o ldcomio.po
	@@rm -f ldcomio.po.o
d517 1
a517 1
		$(.CURDIR)/cinst.cc -o ldcomio.so'
d520 3
a522 3
		$(.CURDIR)/cinst.cc -o ldcomio.so.o
	@@$(LD) -x -r ldcomio.so.o -o ldcomio.so
	@@rm -f ldcomio.so.o
@


1.10
log
@Bad .IMPSRC.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.9 2000/08/25 14:36:39 maja Exp $
d32 1
@


1.9
log
@Move NOPIC for mips from toplevel to the libraries that have problems
with shared libraries. This will allow libiberty.so to be created by
default. -moj
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.8 2000/05/15 06:10:21 niklas Exp $
d113 2
a114 2
	@@echo "${COMPILE.cc} -frtti ${.IMPSRC}"
	@@${COMPILE.cc} -frtti ${.IMPSRC} -frtti -o ${.TARGET}.o
d119 2
a120 2
	@@echo "${COMPILE.cc} -frtti -g ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -g ${.IMPSRC} -o ${.TARGET}.o
d125 2
a126 2
	@@echo "${COMPILE.cc} -frtti -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -p ${.IMPSRC} -o ${.TARGET}.o
d131 2
a132 2
	@@echo "${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
d137 2
a138 2
	@@echo "${COMPILE.cc} -frtti ${.IMPSRC}"
	@@${COMPILE.cc} -frtti ${.IMPSRC} -o ${.TARGET}.o
d143 2
a144 2
	@@echo "${COMPILE.cc} -frtti -g ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -g ${.IMPSRC} -o ${.TARGET}.o
d149 2
a150 2
	@@echo "${COMPILE.cc} -frtti -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -p ${.IMPSRC} -o ${.TARGET}.o
d155 2
a156 2
	@@echo "${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
@


1.8
log
@Add support for building libraries with debugging information in them.
Enable by setting DEBUGLIBS=yes in /etc/mk.conf, then -g libraries will get
installed in /usr/lib/debug.  This directory will be searched first if
gcc is given the -g flag during the link stage.
@
text
@d1 5
a5 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.7 1999/12/07 00:42:54 espie Exp $
@


1.7
log
@Remove work-around for make buglet that I just fixed.
(No need to wait for a rebuild, as the bug only manifests itself as
a warning anyway).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.6 1999/09/30 13:40:35 espie Exp $
d77 1
d102 1
a102 1
$(QIO_OBJS) $(QIO_OBJS:.o=.po) $(QIO_OBJS:.o=.so):
d105 1
a105 1
$(QLIBIBERTY_OBJS) $(QLIBIBERTY_OBJS:.o=.po) $(QLIBIBERTY_OBJS:.o=.so):
d114 6
d138 6
d177 11
d221 11
d265 11
d310 11
d354 11
d398 11
d442 11
d485 11
@


1.6
log
@Explanation for why strerror.o is needed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.5 1999/09/30 12:10:55 espie Exp $
d53 1
a53 1
LIBIBERTY_SRCS!=cat $(LIBIBERTY_OBJDIR)/needed-list && echo
@


1.5
log
@In the construct
VAR!=cat file
make warns if file exists, but is empty
(couldn't read shell output, or such bullshit)

Weird, as everything actually went right.
As I don't want to change that behavior so close to release, and since
the needed-list may again be needed in the future, the line
VAR!=cat file && echo
is used instead. make will happily get a new line to eat, that it will
strip right away => no more warning.

Go figure.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.4 1999/07/18 18:19:17 espie Exp $
d55 2
a56 1
# XXX why does strerror.o need to be hardwired?
@


1.4
log
@Change libiberty SRC->OBJ conversion.
The old version won't work with empty lists, and the new one will,
as libiberty only holds .c files.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.3 1999/06/18 00:21:57 espie Exp $
d53 1
a53 1
LIBIBERTY_SRCS!=cat $(LIBIBERTY_OBJDIR)/needed-list
@


1.3
log
@incorporate valarray in installed files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.2 1999/05/28 14:26:17 espie Exp $
d54 1
a54 1
LIBIBERTY_OBJS=$(LIBIBERTY_SRCS:N*.h:R:S/$/.o/g)
@


1.2
log
@Clean up includes installation...
I had left some duplicate code in ???

retrieve HEADERS directly from Makefile.in, this avoids synch problems.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.1 1999/05/26 15:47:01 espie Exp $
d31 2
a32 1
STD_SRCS=	cstringi.cc stdexcepti.cc cstdlibi.cc cmathi.cc stlinst.cc
d90 1
a90 1
		*.h stl/*.h std/*.h std/*.cc; do \
@


1.1
log
@Wrappers + lib versions
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.9 1998/09/20 03:27:18 millert Exp $
d47 1
a47 1
		echo 'Prerequistes made'
a62 7
HEADERS=	cassert cctype cerrno cfloat ciso646 climits clocale cmath complex \
		csetjmp csignal cstdarg cstddef cstdio cstdlib cstring ctime \
		cwchar cwctype string stdexcept \
		algorithm deque functional hash_map hash_set iterator list map \
		memory numeric pthread_alloc queue rope set slist stack utility \
		vector fstream iomanip iostream strstream iosfwd

d70 1
a70 1
	cd $(IO_DIR); make -f Makefile.bsd-wrapper _G_config.h
d79 4
d84 11
a94 18
	install -d -m 755 -o $(BINOWN) -g $(BINGRP) \
		$(DESTDIR)/usr/include/g++/std
	@@-cd $(.CURDIR); for i in $(HEADERS) *.h std/*.*; do \
		if [ -f stl/$$i ]; then \
			install -C -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
				stl/$$i $(DESTDIR)/usr/include/g++/$$i; \
		else \
			install -C -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
				$$i $(DESTDIR)/usr/include/g++/$$i; \
		fi \
	done
	@@-cd $(.CURDIR); for i in *.h std/*.*; do \
	install -C -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
		$$i $(DESTDIR)/usr/include/g++/$$i; \
	done
	@@-cd $(.CURDIR)/stl; for i in *.h; do \
	install -C -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
		$$i $(DESTDIR)/usr/include/g++/$$i; \
d97 1
a97 1
# Misc GNU overidden targets.
@

