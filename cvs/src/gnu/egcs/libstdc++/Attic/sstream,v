head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.52
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.50
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.48
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.46
	OPENBSD_5_0:1.3.0.44
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.42
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.40
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.36
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.38
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.34
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.32
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.30
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.28
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.26
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.24
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.22
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.20
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.18
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	GCC-2_95_pre3_test3:1.1.1.2
	GCC-2_95_pre3_test2:1.1.1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	GCC-2_95_pre3_20000527:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.08.06.19.17.14;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2001.01.29.16.18.54;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.05.23.36.24;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.22.23.42;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.22.23.42;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.01.29.15.27.06;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@/* This is part of libio/iostream, providing -*- C++ -*- input/output.
Copyright (C) 2000 Free Software Foundation

This file is part of the GNU IO Library.  This library is free
software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option)
any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this library; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

As a special exception, if you link this library with files
compiled with a GNU compiler to produce an executable, this does not cause
the resulting executable to be covered by the GNU General Public License.
This exception does not however invalidate any other reasons why
the executable file might be covered by the GNU General Public License. */

/* Written by Magnus Fromreide (magfr@@lysator.liu.se). */
/* seekoff and ideas for overflow is largely borrowed from libstdc++-v3 */

#ifndef __SSTREAM__
#define __SSTREAM__

#include <iostream.h>
#include <streambuf.h>
#include <string>

namespace std
{
  class stringbuf : public streambuf
  {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit
    stringbuf(int which=ios::in|ios::out)
      : streambuf(), mode(static_cast<ios::open_mode>(which)),
	stream(NULL), stream_len(0)
    {
      stringbuf_init();
    }

    explicit
    stringbuf(const string &str, int which=ios::in|ios::out)
      : streambuf(), mode(static_cast<ios::open_mode>(which)),
	stream(NULL), stream_len(0)
    {
      if (mode & (ios::in|ios::out))
	{
	  stream_len = str.size();
	  stream = new char_type[stream_len];
	  str.copy(stream, stream_len);
	}
      stringbuf_init();
    }

    virtual
    ~stringbuf()
    {
      delete[] stream;
    }

    string
    str() const
    {
      if (pbase() != 0)
	return string(stream, pptr()-pbase());
      else
	return string();
    }

    void
    str(const string& str)
    {
      delete[] stream;
      stream_len = str.size();
      stream = new char_type[stream_len];
      str.copy(stream, stream_len);
      stringbuf_init();
    }

  protected:
    // The buffer is already in gptr, so if it ends then it is out of data.
    virtual int
    underflow()
    {
      return EOF;
    }

    virtual int
    overflow(int c = EOF)
    {
      int res;
      if (mode & ios::out)
	{
	  if (c != EOF)
	    {
	      streamsize old_stream_len = stream_len;
	      stream_len += 1;
	      char_type* new_stream = new char_type[stream_len];
	      memcpy(new_stream, stream, old_stream_len);
	      delete[] stream;
	      stream = new_stream;
	      stringbuf_sync(gptr()-eback(), pptr()-pbase());
	      sputc(c);
	      res = c;
	    }
	  else
	    res = EOF;
	}
      else
	res = 0;
      return res;
    }

    virtual streambuf*
    setbuf(char_type* s, streamsize n)
    {
      if (n != 0)
	{
	  delete[] stream;
	  stream = new char_type[n];
	  memcpy(stream, s, n);
	  stream_len = n;
	  stringbuf_sync(0, 0);
	}
      return this;
    }

    virtual pos_type
    seekoff(off_type off, ios::seek_dir way, int which = ios::in | ios::out)
    {
      pos_type ret =  pos_type(off_type(-1));
      bool testin = which & ios::in && mode & ios::in;
      bool testout = which & ios::out && mode & ios::out;
      bool testboth = testin && testout && way != ios::cur;

      if (stream_len && ((testin != testout) || testboth))
	{
	  char_type* beg = stream;
	  char_type* curi = NULL;
	  char_type* curo = NULL;
	  char_type* endi = NULL;
	  char_type* endo = NULL;

	  if (testin)
	    {
	      curi = gptr();
	      endi = egptr();
	    }
	  if (testout)
	    {
	      curo = pptr();
	      endo = epptr();
	    }

	  off_type newoffi = 0;
	  off_type newoffo = 0;
	  if (way == ios::beg)
	    {
	      newoffi = beg - curi;
	      newoffo = beg - curo;
	    }
	  else if (way == ios::end)
	    {
	      newoffi = endi - curi;
	      newoffo = endo - curo;
	    }

	  if (testin && newoffi + off + curi - beg >= 0 &&
	      endi - beg >= newoffi + off + curi - beg)
	    {
	      gbump(newoffi + off);
	      ret = pos_type(newoffi + off + curi);
	    }
	  if (testout && newoffo + off + curo - beg >= 0 &&
	      endo - beg >= newoffo + off + curo - beg)
	    {
	      pbump(newoffo + off);
	      ret = pos_type(newoffo + off + curo);
	    }
	}
      return ret;
    }

    virtual pos_type
    seekpos(pos_type sp, int which = ios::in | ios::out)
    {
      pos_type ret = seekoff(sp, ios::beg, which);
      return ret;
    }

  private:
    void
    stringbuf_sync(streamsize i, streamsize o)
    {
      if (mode & ios::in)
	setg(stream, stream + i, stream + stream_len);
      if (mode & ios::out)
	{
	  setp(stream, stream + stream_len);
	  pbump(o);
	}
    }
    void
    stringbuf_init()
    {
      if (mode & ios::ate)
	stringbuf_sync(0, stream_len);
      else
	stringbuf_sync(0, 0);
    }

  private:
    ios::open_mode	mode;
    char_type*		stream;
    streamsize		stream_len;
  };

  class istringstream : public istream {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit
    istringstream(int which=ios::in)
      : istream(&sb), sb(which | ios::in)
    { }

    explicit
    istringstream(const string& str, int which=ios::in)
      : istream(&sb), sb(str, which | ios::in)
    { }

    stringbuf*
    rdbuf() const
    {
      return const_cast<stringbuf*>(&sb);
    }

    string
    str() const
    {
      return rdbuf()->str();
    }
    void
    str(const string& s)
    {
      rdbuf()->str(s);
    }
  private:
    stringbuf sb;
  };

  class ostringstream : public ostream {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit
    ostringstream(int which=ios::out)
      : ostream(&sb), sb(which | ios::out)
    { }

    explicit
    ostringstream(const string& str, int which=ios::out)
      : ostream(&sb), sb(str, which | ios::out)
    { }

    stringbuf*
    rdbuf() const
    {
      return const_cast<stringbuf*>(&sb);
    }

    string
    str() const
    {
      return rdbuf()->str();
    }

    void str(const string& s)
    {
      rdbuf()->str(s);
    }
  private:
    stringbuf sb;
  };

  class stringstream : public iostream {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit
    stringstream(int which=ios::out|ios::in)
      : iostream(&sb), sb(which)
    { }

    explicit
    stringstream(const string& str, int which=ios::out|ios::in)
      : iostream(&sb), sb(str, which)
    { }

    stringbuf*
    rdbuf() const
    {
      return const_cast<stringbuf*>(&sb);
    }

    string
    str() const
    {
      return rdbuf()->str();
    }

    void
    str(const string& s)
    {
      rdbuf()->str(s);
    }
  private:
    stringbuf sb;
  };
};

#endif /* not __STRSTREAM__ */
@


1.3
log
@Automatic merger
@
text
@@


1.2
log
@Fix
@
text
@d26 1
a30 1
#include <string>
d33 1
d45 12
a56 8
    explicit stringbuf(int which=ios::in|ios::out) :
      streambuf(which), buf(), mode(static_cast<ios::open_mode>(which)),
      rpos(0), bufsize(1)
    { }
	
    explicit stringbuf(const std::string &s, int which=ios::in|ios::out) :
      streambuf(which), buf(s), mode(static_cast<ios::open_mode>(which)),
      bufsize(1)
d58 1
a58 1
      if(mode & ios::in)
d60 3
a62 1
	  setg(&defbuf, &defbuf + bufsize, &defbuf + bufsize);
d64 41
a104 1
      if(mode & ios::out)
d106 14
a119 1
	  setp(&defbuf, &defbuf + bufsize);
d121 3
a123 1
      rpos = (mode & ios::ate ? s.size() : 0);
a124 6
	
    std::string str() const
    {
      const_cast<stringbuf*>(this)->sync();  // Sigh, really ugly hack
      return buf;
    };
d126 2
a127 1
    void str(const std::string& s)
d129 1
a129 2
      buf = s;
      if(mode & ios::in)
d131 5
a135 1
	  gbump(egptr() - gptr());
d137 12
a148 1
      if(mode & ios::out)
d150 42
a191 1
	  pbump(pbase() - pptr());
d193 8
a200 1
      rpos = (mode & ios::ate ? s.size() : 0);
a202 4
  protected:
    inline virtual int sync();
    inline virtual int overflow(int = EOF);
    inline virtual int underflow();
d204 2
a205 12
    std::string			buf;
    ios::open_mode		mode;
    std::string::size_type	rpos;
    streamsize			bufsize;
    char			defbuf;
  };

  class stringstreambase : virtual public ios {
  protected:
    stringbuf __my_sb;
  public:
    std::string str() const
d207 7
a213 1
      return dynamic_cast<stringbuf*>(_strbuf)->str();
d215 2
a216 1
    void str(const std::string& s)
d218 4
a221 2
      clear();
      dynamic_cast<stringbuf*>(_strbuf)->str(s);
d223 26
a248 2
	
    stringbuf* rdbuf()
d250 1
a250 1
      return &__my_sb;
d252 3
a254 3
  protected:
    stringstreambase(int which) :
      __my_sb(which)
d256 1
a256 1
      init (&__my_sb);
d258 2
a259 3
	
    stringstreambase(const std::string& s, int which) :
      __my_sb(s, which)
d261 1
a261 1
      init (&__my_sb);
d263 2
d266 2
a267 2
    
  class istringstream : public stringstreambase, public istream {
d269 8
a276 2
    istringstream(int which=ios::in) :
      stringstreambase(which)
d278 4
a281 25
	
    istringstream(const std::string& s, int which=ios::in) :
      stringstreambase(s, which)
    { }
  };
    
  class ostringstream : public stringstreambase, public ostream {
  public:
    ostringstream(int which=ios::out) :
      stringstreambase(which)
    { }
	
    ostringstream(const std::string& s, int which=ios::out) :
      stringstreambase(s, which)
    { }
  };
    
  class stringstream : public stringstreambase, public iostream {
  public:
    stringstream(int which=ios::in|ios::out) :
      stringstreambase(which)
    { }
    
    stringstream(const std::string &s, int which=ios::in|ios::out) :
      stringstreambase(s, which)
a282 2
  };
}
d284 5
a288 4
inline int std::stringbuf::sync()
{
  if((mode & ios::out) == 0)
    return EOF;
d290 2
a291 2
  streamsize n = pptr() - pbase();
  if(n)
d293 1
a293 6
      buf.replace(rpos, std::string::npos, pbase(), n);
      if(buf.size() - rpos != n)
	return EOF;
      rpos += n;
      pbump(-n);
      gbump(egptr() - gptr());
a294 2
  return 0;
}
d296 14
a309 4
inline int std::stringbuf::overflow(int ch)
{
  if((mode & ios::out) == 0)
    return EOF;
d311 4
a314 1
  streamsize n = pptr() - pbase();
d316 4
a319 2
  if(n && sync())
    return EOF;
d321 2
a322 1
  if(ch != EOF)
d324 1
a324 6
      std::string::size_type oldSize = buf.size();
      
      buf.replace(rpos, std::string::npos, ch);
      if(buf.size() - oldSize != 1)
	return EOF;
      ++rpos;
a325 2
  return 0;
}
d327 2
a328 4
inline int std::stringbuf::underflow()
{
  sync();
  if((mode & ios::in) == 0)
d330 1
a330 1
      return EOF;
d332 3
a334 1
  if(rpos >= buf.size())
d336 1
a336 1
      return EOF;
d338 4
a341 11
  
  std::string::size_type n = egptr() - eback();
  std::string::size_type s;

  s = buf.copy(eback(), n, rpos);
  pbump(pbase() - pptr());
  gbump(eback() - gptr());
  int res = (0377 & buf[rpos]);
  rpos += s;
  return res;
}
@


1.1
log
@Initial revision
@
text
@d1 225
a225 225
/* This is part of libio/iostream, providing -*- C++ -*- input/output.
Copyright (C) 2000 Free Software Foundation

This file is part of the GNU IO Library.  This library is free
software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option)
any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this library; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

As a special exception, if you link this library with files
compiled with a GNU compiler to produce an executable, this does not cause
the resulting executable to be covered by the GNU General Public License.
This exception does not however invalidate any other reasons why
the executable file might be covered by the GNU General Public License. */

/* Written by Magnus Fromreide (magfr@@lysator.liu.se). */

#ifndef __SSTREAM__
#define __SSTREAM__

#include <string>
#include <iostream.h>
#include <streambuf.h>

namespace std
{
  class stringbuf : public streambuf
  {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit stringbuf(int which=ios::in|ios::out) :
      streambuf(which), buf(), mode(static_cast<ios::open_mode>(which)),
      rpos(0), bufsize(1)
    { }
	
    explicit stringbuf(const std::string &s, int which=ios::in|ios::out) :
      streambuf(which), buf(s), mode(static_cast<ios::open_mode>(which)),
      bufsize(1)
    {
      if(mode & ios::in)
	{
	  setg(&defbuf, &defbuf + bufsize, &defbuf + bufsize);
	}
      if(mode & ios::out)
	{
	  setp(&defbuf, &defbuf + bufsize);
	}
      rpos = (mode & ios::ate ? s.size() : 0);
    }
	
    std::string str() const
    {
      const_cast<stringbuf*>(this)->sync();  // Sigh, really ugly hack
      return buf;
    };

    void str(const std::string& s)
    {
      buf = s;
      if(mode & ios::in)
	{
	  gbump(egptr() - gptr());
	}
      if(mode & ios::out)
	{
	  pbump(pbase() - pptr());
	}
      rpos = (mode & ios::ate ? s.size() : 0);
    }

  protected:
    inline virtual int sync();
    inline virtual int overflow(int = EOF);
    inline virtual int underflow();
  private:
    std::string			buf;
    ios::open_mode		mode;
    std::string::size_type	rpos;
    streamsize			bufsize;
    char			defbuf;
  };

  class stringstreambase : virtual public ios {
  protected:
    stringbuf __my_sb;
  public:
    std::string str() const
    {
      return dynamic_cast<stringbuf*>(_strbuf)->str();
    }
    void str(const std::string& s)
    {
      clear();
      dynamic_cast<stringbuf*>(_strbuf)->str(s);
    }
	
    stringbuf* rdbuf()
    {
      return &__my_sb;
    }
  protected:
    stringstreambase(int which) :
      __my_sb(which)
    {
      init (&__my_sb);
    }
	
    stringstreambase(const std::string& s, int which) :
      __my_sb(s, which)
    {
      init (&__my_sb);
    }
  };
    
  class istringstream : public stringstreambase, public istream {
  public:
    istringstream(int which=ios::in) :
      stringstreambase(which)
    { }
	
    istringstream(const std::string& s, int which=ios::in) :
      stringstreambase(s, which)
    { }
  };
    
  class ostringstream : public stringstreambase, public ostream {
  public:
    ostringstream(int which=ios::out) :
      stringstreambase(which)
    { }
	
    ostringstream(const std::string& s, int which=ios::out) :
      stringstreambase(s, which)
    { }
  };
    
  class stringstream : public stringstreambase, public iostream {
  public:
    stringstream(int which=ios::in|ios::out) :
      stringstreambase(which)
    { }
    
    stringstream(const std::string &s, int which=ios::in|ios::out) :
      stringstreambase(s, which)
    { }
  };
}

inline int std::stringbuf::sync()
{
  if((mode & ios::out) == 0)
    return EOF;

  streamsize n = pptr() - pbase();
  if(n)
    {
      buf.replace(rpos, std::string::npos, pbase(), n);
      if(buf.size() - rpos != n)
	return EOF;
      rpos += n;
      pbump(-n);
      gbump(egptr() - gptr());
    }
  return 0;
}

inline int std::stringbuf::overflow(int ch)
{
  if((mode & ios::out) == 0)
    return EOF;

  streamsize n = pptr() - pbase();

  if(n && sync())
    return EOF;

  if(ch != EOF)
    {
      std::string::size_type oldSize = buf.size();
      
      buf.replace(rpos, std::string::npos, ch);
      if(buf.size() - oldSize != 1)
	return EOF;
      ++rpos;
    }
  return 0;
}

inline int std::stringbuf::underflow()
{
  sync();
  if((mode & ios::in) == 0)
    {
      return EOF;
    }
  if(rpos >= buf.size())
    {
      return EOF;
    }
  
  std::string::size_type n = egptr() - eback();
  std::string::size_type s;

  s = buf.copy(eback(), n, rpos);
  pbump(pbase() - pptr());
  gbump(eback() - gptr());
  int res = (0377 & buf[rpos]);
  rpos += s;
  return res;
}

#endif /* not __STRSTREAM__ */
@


1.1.1.1
log
@Synch with 2.95.3 (pre-rel)
@
text
@@


1.1.1.2
log
@2.95.3, test release 2
@
text
@d1 225
a225 343
/* This is part of libio/iostream, providing -*- C++ -*- input/output.
Copyright (C) 2000 Free Software Foundation

This file is part of the GNU IO Library.  This library is free
software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option)
any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this library; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

As a special exception, if you link this library with files
compiled with a GNU compiler to produce an executable, this does not cause
the resulting executable to be covered by the GNU General Public License.
This exception does not however invalidate any other reasons why
the executable file might be covered by the GNU General Public License. */

/* Written by Magnus Fromreide (magfr@@lysator.liu.se). */
/* seekoff and ideas for overflow is largely borrowed from libstdc++-v3 */

#ifndef __SSTREAM__
#define __SSTREAM__

#include <iostream.h>
#include <streambuf.h>
#include <string>

namespace std
{
  class stringbuf : public streambuf
  {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit
    stringbuf(int which=ios::in|ios::out)
      : streambuf(), mode(static_cast<ios::open_mode>(which)),
	stream(NULL), stream_len(0)
    {
      stringbuf_init();
    }

    explicit
    stringbuf(const string &str, int which=ios::in|ios::out)
      : streambuf(), mode(static_cast<ios::open_mode>(which)),
	stream(NULL), stream_len(0)
    {
      if (mode & (ios::in|ios::out))
	{
	  stream_len = str.size();
	  stream = new char_type[stream_len];
	  str.copy(stream, stream_len);
	}
      stringbuf_init();
    }

    virtual
    ~stringbuf()
    {
      delete[] stream;
    }

    string
    str() const
    {
      if (pbase() != 0)
	return string(stream, pptr()-pbase());
      else
	return string();
    }

    void
    str(const string& str)
    {
      delete[] stream;
      stream_len = str.size();
      stream = new char_type[stream_len];
      str.copy(stream, stream_len);
      stringbuf_init();
    }

  protected:
    // The buffer is already in gptr, so if it ends then it is out of data.
    virtual int
    underflow()
    {
      return EOF;
    }

    virtual int
    overflow(int c = EOF)
    {
      int res;
      if (mode & ios::out)
	{
	  if (c != EOF)
	    {
	      streamsize old_stream_len = stream_len;
	      stream_len += 1;
	      char_type* new_stream = new char_type[stream_len];
	      memcpy(new_stream, stream, old_stream_len);
	      delete[] stream;
	      stream = new_stream;
	      stringbuf_sync(gptr()-eback(), pptr()-pbase());
	      sputc(c);
	      res = c;
	    }
	  else
	    res = EOF;
	}
      else
	res = 0;
      return res;
    }

    virtual streambuf*
    setbuf(char_type* s, streamsize n)
    {
      if (n != 0)
	{
	  delete[] stream;
	  stream = new char_type[n];
	  memcpy(stream, s, n);
	  stream_len = n;
	  stringbuf_sync(0, 0);
	}
      return this;
    }

    virtual pos_type
    seekoff(off_type off, ios::seek_dir way, int which = ios::in | ios::out)
    {
      pos_type ret =  pos_type(off_type(-1));
      bool testin = which & ios::in && mode & ios::in;
      bool testout = which & ios::out && mode & ios::out;
      bool testboth = testin && testout && way != ios::cur;

      if (stream_len && ((testin != testout) || testboth))
	{
	  char_type* beg = stream;
	  char_type* curi = NULL;
	  char_type* curo = NULL;
	  char_type* endi = NULL;
	  char_type* endo = NULL;

	  if (testin)
	    {
	      curi = gptr();
	      endi = egptr();
	    }
	  if (testout)
	    {
	      curo = pptr();
	      endo = epptr();
	    }

	  off_type newoffi = 0;
	  off_type newoffo = 0;
	  if (way == ios::beg)
	    {
	      newoffi = beg - curi;
	      newoffo = beg - curo;
	    }
	  else if (way == ios::end)
	    {
	      newoffi = endi - curi;
	      newoffo = endo - curo;
	    }

	  if (testin && newoffi + off + curi - beg >= 0 &&
	      endi - beg >= newoffi + off + curi - beg)
	    {
	      gbump(newoffi + off);
	      ret = pos_type(newoffi + off + curi);
	    }
	  if (testout && newoffo + off + curo - beg >= 0 &&
	      endo - beg >= newoffo + off + curo - beg)
	    {
	      pbump(newoffo + off);
	      ret = pos_type(newoffo + off + curo);
	    }
	}
      return ret;
    }

    virtual pos_type
    seekpos(pos_type sp, int which = ios::in | ios::out)
    {
      pos_type ret = seekoff(sp, ios::beg, which);
      return ret;
    }

  private:
    void
    stringbuf_sync(streamsize i, streamsize o)
    {
      if (mode & ios::in)
	setg(stream, stream + i, stream + stream_len);
      if (mode & ios::out)
	{
	  setp(stream, stream + stream_len);
	  pbump(o);
	}
    }
    void
    stringbuf_init()
    {
      if (mode & ios::ate)
	stringbuf_sync(0, stream_len);
      else
	stringbuf_sync(0, 0);
    }

  private:
    ios::open_mode	mode;
    char_type*		stream;
    streamsize		stream_len;
  };

  class istringstream : public istream {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit
    istringstream(int which=ios::in)
      : istream(&sb), sb(which | ios::in)
    { }

    explicit
    istringstream(const string& str, int which=ios::in)
      : istream(&sb), sb(str, which | ios::in)
    { }

    stringbuf*
    rdbuf() const
    {
      return const_cast<stringbuf*>(&sb);
    }

    string
    str() const
    {
      return rdbuf()->str();
    }
    void
    str(const string& s)
    {
      rdbuf()->str(s);
    }
  private:
    stringbuf sb;
  };

  class ostringstream : public ostream {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit
    ostringstream(int which=ios::out)
      : ostream(&sb), sb(which | ios::out)
    { }

    explicit
    ostringstream(const string& str, int which=ios::out)
      : ostream(&sb), sb(str, which | ios::out)
    { }

    stringbuf*
    rdbuf() const
    {
      return const_cast<stringbuf*>(&sb);
    }

    string
    str() const
    {
      return rdbuf()->str();
    }

    void str(const string& s)
    {
      rdbuf()->str(s);
    }
  private:
    stringbuf sb;
  };

  class stringstream : public iostream {
  public:
    typedef char	char_type;
    typedef int		int_type;
    typedef streampos	pos_type;
    typedef streamoff	off_type;

    explicit
    stringstream(int which=ios::out|ios::in)
      : iostream(&sb), sb(which)
    { }

    explicit
    stringstream(const string& str, int which=ios::out|ios::in)
      : iostream(&sb), sb(str, which)
    { }

    stringbuf*
    rdbuf() const
    {
      return const_cast<stringbuf*>(&sb);
    }

    string
    str() const
    {
      return rdbuf()->str();
    }

    void
    str(const string& s)
    {
      rdbuf()->str(s);
    }
  private:
    stringbuf sb;
  };
};

#endif /* not __STRSTREAM__ */
@

