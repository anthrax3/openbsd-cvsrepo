head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.2.0.58
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.56
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.54
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.52
	OPENBSD_5_0:1.1.1.2.0.50
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.48
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.46
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.42
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.44
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.40
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.38
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.36
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.34
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.32
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.30
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.28
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.26
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.24
	OPENBSD_3_7_BASE:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.22
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.20
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.18
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.16
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.14
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.12
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.10
	OPENBSD_3_0_BASE:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.8
	OPENBSD_2_9_BASE:1.1.1.2
	GCC-2_95_pre3_test3:1.1.1.2
	GCC-2_95_pre3_test2:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.6
	OPENBSD_2_8_BASE:1.1.1.2
	GCC-2_95_pre3_20000527:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.4
	OPENBSD_2_7_BASE:1.1.1.2
	GCC-2_95_2:1.1.1.2
	OPENBSD_2_6:1.1.1.2.0.2
	OPENBSD_2_6_BASE:1.1.1.2
	GCC-2_95_1:1.1.1.2
	CYGNUS-990718:1.1.1.2
	CYGNUS-990629:1.1.1.2
	CYGNUS-990608:1.1.1.1
	CYGNUS-19990517:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.08.06.19.17.15;	author miod;	state dead;
branches;
next	1.1;

1.1
date	99.05.26.13.38.54;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.26.13.38.54;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.18.16.53.07;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@/*
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Hewlett-Packard Company makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 *
 *
 * Copyright (c) 1996,1997
 * Silicon Graphics Computer Systems, Inc.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Silicon Graphics makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

/* NOTE: This is an internal header file, included by other STL headers.
 *   You should not attempt to use it directly.
 */

#ifndef __SGI_STL_INTERNAL_QUEUE_H
#define __SGI_STL_INTERNAL_QUEUE_H

__STL_BEGIN_NAMESPACE

#ifndef __STL_LIMITED_DEFAULT_TEMPLATES
template <class _Tp, class _Sequence = deque<_Tp> >
#else
template <class _Tp, class _Sequence>
#endif
class queue {
  friend bool operator== __STL_NULL_TMPL_ARGS (const queue&, const queue&);
  friend bool operator< __STL_NULL_TMPL_ARGS (const queue&, const queue&);
public:
  typedef typename _Sequence::value_type      value_type;
  typedef typename _Sequence::size_type       size_type;
  typedef          _Sequence                  container_type;

  typedef typename _Sequence::reference       reference;
  typedef typename _Sequence::const_reference const_reference;
protected:
  _Sequence _M_c;
public:
  queue() : _M_c() {}
  explicit queue(const _Sequence& __c) : _M_c(__c) {}

  bool empty() const { return _M_c.empty(); }
  size_type size() const { return _M_c.size(); }
  reference front() { return _M_c.front(); }
  const_reference front() const { return _M_c.front(); }
  reference back() { return _M_c.back(); }
  const_reference back() const { return _M_c.back(); }
  void push(const value_type& __x) { _M_c.push_back(__x); }
  void pop() { _M_c.pop_front(); }
};

template <class _Tp, class _Sequence>
bool 
operator==(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
{
  return __x._M_c == __y._M_c;
}

template <class _Tp, class _Sequence>
bool
operator<(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
{
  return __x._M_c < __y._M_c;
}

#ifdef __STL_FUNCTION_TMPL_PARTIAL_ORDER

template <class _Tp, class _Sequence>
bool
operator!=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
{
  return !(__x == __y);
}

template <class _Tp, class _Sequence>
bool 
operator>(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
{
  return __y < __x;
}

template <class _Tp, class _Sequence>
bool 
operator<=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
{
  return !(__y < __x);
}

template <class _Tp, class _Sequence>
bool 
operator>=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
{
  return !(__x < __y);
}

#endif /* __STL_FUNCTION_TMPL_PARTIAL_ORDER */

#ifndef __STL_LIMITED_DEFAULT_TEMPLATES
template <class _Tp, class _Sequence = vector<_Tp>, 
          class _Compare = less<typename _Sequence::value_type> >
#else
template <class _Tp, class _Sequence, class _Compare>
#endif
class  priority_queue {
public:
  typedef typename _Sequence::value_type      value_type;
  typedef typename _Sequence::size_type       size_type;
  typedef          _Sequence                  container_type;

  typedef typename _Sequence::reference       reference;
  typedef typename _Sequence::const_reference const_reference;
protected:
  _Sequence _M_c;
  _Compare _M_comp;
public:
  priority_queue() : _M_c() {}
  explicit priority_queue(const _Compare& __x) :  _M_c(), _M_comp(__x) {}
  priority_queue(const _Compare& __x, const _Sequence& __s) 
    : _M_c(__s), _M_comp(__x) 
    { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }

#ifdef __STL_MEMBER_TEMPLATES
  template <class _InputIterator>
  priority_queue(_InputIterator __first, _InputIterator __last) 
    : _M_c(__first, __last) { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }

  template <class _InputIterator>
  priority_queue(_InputIterator __first, 
                 _InputIterator __last, const _Compare& __x)
    : _M_c(__first, __last), _M_comp(__x) 
    { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }

  template <class _InputIterator>
  priority_queue(_InputIterator __first, _InputIterator __last,
                 const _Compare& __x, const _Sequence& __s)
  : _M_c(__s), _M_comp(__x)
  { 
    _M_c.insert(_M_c.end(), __first, __last);
    make_heap(_M_c.begin(), _M_c.end(), _M_comp);
  }

#else /* __STL_MEMBER_TEMPLATES */
  priority_queue(const value_type* __first, const value_type* __last) 
    : _M_c(__first, __last) { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }

  priority_queue(const value_type* __first, const value_type* __last, 
                 const _Compare& __x) 
    : _M_c(__first, __last), _M_comp(__x)
    { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }

  priority_queue(const value_type* __first, const value_type* __last, 
                 const _Compare& __x, const _Sequence& __c)
    : _M_c(__c), _M_comp(__x) 
  { 
    _M_c.insert(_M_c.end(), __first, __last);
    make_heap(_M_c.begin(), _M_c.end(), _M_comp);
  }
#endif /* __STL_MEMBER_TEMPLATES */

  bool empty() const { return _M_c.empty(); }
  size_type size() const { return _M_c.size(); }
  const_reference top() const { return _M_c.front(); }
  void push(const value_type& __x) {
    __STL_TRY {
      _M_c.push_back(__x); 
      push_heap(_M_c.begin(), _M_c.end(), _M_comp);
    }
    __STL_UNWIND(_M_c.clear());
  }
  void pop() {
    __STL_TRY {
      pop_heap(_M_c.begin(), _M_c.end(), _M_comp);
      _M_c.pop_back();
    }
    __STL_UNWIND(_M_c.clear());
  }
};

// no equality is provided

__STL_END_NAMESPACE

#endif /* __SGI_STL_INTERNAL_QUEUE_H */

// Local Variables:
// mode:C++
// End:
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@egcs projects compiler system
Exact copy of the snapshot, except for the removal of
	texinfo/
	gcc/ch/
	libchill/

@
text
@@


1.1.1.2
log
@Update to 990629 snapshot
closer to gcc 2.95 release.
@
text
@d52 1
a52 1
  _Sequence c;
d54 2
a55 2
  queue() : c() {}
  explicit queue(const _Sequence& __c) : c(__c) {}
d57 8
a64 8
  bool empty() const { return c.empty(); }
  size_type size() const { return c.size(); }
  reference front() { return c.front(); }
  const_reference front() const { return c.front(); }
  reference back() { return c.back(); }
  const_reference back() const { return c.back(); }
  void push(const value_type& __x) { c.push_back(__x); }
  void pop() { c.pop_front(); }
d71 1
a71 1
  return __x.c == __y.c;
d78 1
a78 1
  return __x.c < __y.c;
d128 2
a129 2
  _Sequence c;
  _Compare comp;
d131 2
a132 2
  priority_queue() : c() {}
  explicit priority_queue(const _Compare& __x) :  c(), comp(__x) {}
d134 2
a135 2
    : c(__s), comp(__x) 
    { make_heap(c.begin(), c.end(), comp); }
d140 1
a140 1
    : c(__first, __last) { make_heap(c.begin(), c.end(), comp); }
d145 2
a146 2
    : c(__first, __last), comp(__x) 
    { make_heap(c.begin(), c.end(), comp); }
d151 1
a151 1
  : c(__s), comp(__x)
d153 2
a154 2
    c.insert(c.end(), __first, __last);
    make_heap(c.begin(), c.end(), comp);
d159 1
a159 1
    : c(__first, __last) { make_heap(c.begin(), c.end(), comp); }
d163 2
a164 2
    : c(__first, __last), comp(__x)
    { make_heap(c.begin(), c.end(), comp); }
d168 1
a168 1
    : c(__c), comp(__x) 
d170 2
a171 2
    c.insert(c.end(), __first, __last);
    make_heap(c.begin(), c.end(), comp);
d175 3
a177 3
  bool empty() const { return c.empty(); }
  size_type size() const { return c.size(); }
  const_reference top() const { return c.front(); }
d180 2
a181 2
      c.push_back(__x); 
      push_heap(c.begin(), c.end(), comp);
d183 1
a183 1
    __STL_UNWIND(c.clear());
d187 2
a188 2
      pop_heap(c.begin(), c.end(), comp);
      c.pop_back();
d190 1
a190 1
    __STL_UNWIND(c.clear());
@

