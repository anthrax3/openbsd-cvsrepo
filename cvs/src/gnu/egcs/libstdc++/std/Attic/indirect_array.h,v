head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.20
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.18
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.16
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.14
	OPENBSD_5_0:1.2.0.12
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.10
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.38
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.36
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.34
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.32
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.30
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.28
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.26
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.24
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.22
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.20
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.18
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.16
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	GCC-2_95_pre3_test3:1.1.1.1
	GCC-2_95_pre3_test2:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	GCC-2_95_pre3_20000527:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	GCC-2_95_2:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	GCC-2_95_1:1.1.1.1
	CYGNUS-990718:1.1.1.1
	CYGNUS-990629:1.1.1.1
	CYGNUS-990608:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.08.06.19.17.14;	author miod;	state dead;
branches;
next	1.2;

1.2
date	2009.02.02.15.26.12;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.06.17.22.18.59;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.06.17.22.18.59;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove gcc 2.95 from the tree. One of the least bogus compiler we had (although
it had required some generous bandaid), but unfortunately not able to compile
most of the Real World (tm) software.
@
text
@// The template and inlines for the -*- C++ -*- indirect_array class.

// Copyright (C) 1997-1999 Cygnus Solutions
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

// Written by Gabriel Dos Reis <Gabriel.Dos-Reis@@DPTMaths.ENS-Cachan.Fr>

#ifndef __INDIRECT_ARRAY__
#define __INDIRECT_ARRAY__

extern "C++" {

template <class _Tp> class indirect_array
{
public:
    typedef _Tp value_type;
    
    void operator=  (const valarray<_Tp>&) const;
    void operator*= (const valarray<_Tp>&) const;
    void operator/= (const valarray<_Tp>&) const;
    void operator%= (const valarray<_Tp>&) const; 
    void operator+= (const valarray<_Tp>&) const;
    void operator-= (const valarray<_Tp>&) const;  
    void operator^= (const valarray<_Tp>&) const;
    void operator&= (const valarray<_Tp>&) const;
    void operator|= (const valarray<_Tp>&) const;
    void operator<<= (const valarray<_Tp>&) const;
    void operator>>= (const valarray<_Tp>&) const; 
    void operator= (const _Tp&);
    
    template<class _Dom>
    void operator=  (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator*= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator/= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator%= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator+= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator-= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator^= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator&= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator|= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator<<= (const _Expr<_Dom, _Tp>&) const;
    template<class _Dom>
    void operator>>= (const _Expr<_Dom, _Tp>&) const; 
    
private:
    indirect_array (const indirect_array&);
    indirect_array (_Array<_Tp>, size_t, _Array<size_t>);
    
    friend class valarray<_Tp>;
    friend class gslice_array<_Tp>;
    
    const size_t 	 _M_sz;
    const _Array<size_t> _M_index;
    const _Array<_Tp> 	 _M_array;
    
    // not implemented
    indirect_array ();
    indirect_array& operator= (const indirect_array&);
};

template<typename _Tp>
inline indirect_array<_Tp>::indirect_array(const indirect_array<_Tp>& __a)
        : _M_sz (__a._M_sz), _M_index (__a._M_index),
          _M_array (__a._M_array) {}

template<typename _Tp>
inline
indirect_array<_Tp>::indirect_array (_Array<_Tp> __a, size_t __s, 
                                     _Array<size_t> __i)
        : _M_sz (__s), _M_index (__i), _M_array (__a) {}


template<typename _Tp>
inline void
indirect_array<_Tp>::operator= (const _Tp& __t)
{ __valarray_fill(_M_array, _M_index, _M_sz, __t); }

template<typename _Tp>
inline void
indirect_array<_Tp>::operator= (const valarray<_Tp>& __v) const
{ __valarray_copy (_Array<_Tp> (__v), _M_sz, _M_array, _M_index); }

template<typename _Tp>
template<class _Dom>
inline void
indirect_array<_Tp>::operator= (const _Expr<_Dom,_Tp>& __e) const
{ __valarray_copy (__e, _M_sz, _M_array, _M_index); }

#undef _DEFINE_VALARRAY_OPERATOR
#define _DEFINE_VALARRAY_OPERATOR(op, name)				\
template<typename _Tp>							\
inline void								\
indirect_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const	\
{									\
  _Array_augmented_##name (_M_array, _M_index, _Array<_Tp> (__v), _M_sz); \
}									\
									\
template<typename _Tp> template<class _Dom>				\
inline void								\
indirect_array<_Tp>::operator op##= (const _Expr<_Dom,_Tp>& __e) const \
{									\
  _Array_augmented_##name (_M_array, _M_index, __e, _M_sz);		\
}

_DEFINE_VALARRAY_OPERATOR(*, multiplies)
_DEFINE_VALARRAY_OPERATOR(/, divides)
_DEFINE_VALARRAY_OPERATOR(%, modulus)
_DEFINE_VALARRAY_OPERATOR(+, plus)
_DEFINE_VALARRAY_OPERATOR(-, minus)
_DEFINE_VALARRAY_OPERATOR(^, xor)
_DEFINE_VALARRAY_OPERATOR(&, and)
_DEFINE_VALARRAY_OPERATOR(|, or)
_DEFINE_VALARRAY_OPERATOR(<<, shift_left)
_DEFINE_VALARRAY_OPERATOR(>>, shift_right)

#undef _DEFINE_VALARRAY_OPERATOR

} // extern "C++"

#endif // __INDIRECT_ARRAY__

// Local Variables:
// mode:c++
// End:
@


1.2
log
@pedantic fixes: remove wrong token pasting.

Reduces drastically the number of warnings one gets when compiling old
library with newer preprocessor.

tests and okay miod@@
@
text
@@


1.1
log
@Initial revision
@
text
@d126 1
a126 1
indirect_array<_Tp>::operator##op##= (const valarray<_Tp>& __v) const	\
d133 1
a133 1
indirect_array<_Tp>::operator##op##= (const _Expr<_Dom,_Tp>& __e) const \
@


1.1.1.1
log
@Update to 990608 snapshot.
Highlights:
- official fix for an alpha bug,
- cpp changes semantic slightly,
- valarray in libstdc++.
@
text
@@
