head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.32
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.10.15.17.11.28;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.28;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/*  DO NOT EDIT THIS FILE.

    It has been auto-edited by fixincludes from:

	"fixinc/tests/inc/iso/math_c99.h"

    This had to be done to correct non-standard usages in the
    original, manufacturer supplied header file.  */



#if defined( SOLARIS_MATH_1_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	HUGE_VAL
#define	HUGE_VAL	(__builtin_huge_val())
#undef	HUGE_VALF
#define	HUGE_VALF	(__builtin_huge_valf())
#undef	HUGE_VALL
#define	HUGE_VALL	(__builtin_huge_vall())
#endif  /* SOLARIS_MATH_1_CHECK */


#if defined( SOLARIS_MATH_2_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	INFINITY
#define	INFINITY	(__builtin_inff())
#endif  /* SOLARIS_MATH_2_CHECK */


#if defined( SOLARIS_MATH_3_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	NAN
#define	NAN		(__builtin_nanf(""))
#endif  /* SOLARIS_MATH_3_CHECK */


#if defined( SOLARIS_MATH_4_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	fpclassify
#define	fpclassify(x) \
  __extension__ ({ __typeof(x) __x_fp = (x); \
		   isnan(__x_fp) \
		     ? FP_NAN \
		     : isinf(__x_fp) \
		       ? FP_INFINITE \
		       : isnormal(__x_fp) \
			 ? FP_NORMAL \
			 : __x_fp == 0.0 \
			   ? FP_ZERO \
			   : FP_SUBNORMAL; })
#endif  /* SOLARIS_MATH_4_CHECK */


#if defined( SOLARIS_MATH_5_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	isfinite
#define	isfinite(x) \
  __extension__ ({ __typeof (x) __x_f = (x); \
		   __builtin_expect(!isnan(__x_f - __x_f), 1); })
#endif  /* SOLARIS_MATH_5_CHECK */


#if defined( SOLARIS_MATH_6_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	isinf
#define	isinf(x) \
  __extension__ ({ __typeof (x) __x_i = (x); \
		   __builtin_expect(!isnan(__x_i) && !isfinite(__x_i), 0); })
#endif  /* SOLARIS_MATH_6_CHECK */


#if defined( SOLARIS_MATH_7_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	isnormal
#define	isnormal(x) \
  __extension__ ({ __typeof(x) __x_n = (x); \
		   if (__x_n < 0.0) __x_n = -__x_n; \
		   __builtin_expect(isfinite(__x_n) \
				    && (sizeof(__x_n) == sizeof(float) \
					  ? __x_n >= __FLT_MIN__ \
					  : sizeof(__x_n) == sizeof(long double) \
					    ? __x_n >= __LDBL_MIN__ \
					    : __x_n >= __DBL_MIN__), 1); })
#endif  /* SOLARIS_MATH_7_CHECK */


#if defined( SOLARIS_MATH_8_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	signbit
#define	signbit(x)	(sizeof(x) == sizeof(float) \
			   ? __builtin_signbitf(x) \
			   : sizeof(x) == sizeof(long double) \
			     ? __builtin_signbitl(x) \
			     : __builtin_signbit(x))
#endif  /* SOLARIS_MATH_8_CHECK */


#if defined( SOLARIS_MATH_9_CHECK )
#ident	"@@(#)math_c99.h	1.9	04/11/01 SMI"
#undef	isgreater
#define	isgreater(x, y)		__builtin_isgreater(x, y)
#undef	isgreaterequal
#define	isgreaterequal(x, y)	__builtin_isgreaterequal(x, y)
#undef	isless
#define	isless(x, y)		__builtin_isless(x, y)
#undef	islessequal
#define	islessequal(x, y)	__builtin_islessequal(x, y)
#undef	islessgreater
#define	islessgreater(x, y)	__builtin_islessgreater(x, y)
#undef	isunordered
#define	isunordered(x, y)	__builtin_isunordered(x, y)
#endif  /* SOLARIS_MATH_9_CHECK */
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
