head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.30
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.32
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@! { dg-do run }
        SUBROUTINE F1(Q)
        COMMON /DATA/ P, X
        INTEGER, TARGET :: X
        INTEGER, POINTER :: P
        INTEGER Q
        Q=1
!$OMP FLUSH
        ! X, P and Q are flushed
        ! because they are shared and accessible
      END SUBROUTINE F1
      SUBROUTINE F2(Q)
        COMMON /DATA/ P, X
        INTEGER, TARGET :: X
        INTEGER, POINTER :: P
        INTEGER Q
!$OMP BARRIER
          Q=2
!$OMP BARRIER
          ! a barrier implies a flush
          ! X, P and Q are flushed
          ! because they are shared and accessible
        END SUBROUTINE F2

      INTEGER FUNCTION G(N)
          COMMON /DATA/ P, X
          INTEGER, TARGET :: X
          INTEGER, POINTER :: P
          INTEGER N
          INTEGER I, J, SUM
          I=1
          SUM = 0
          P=1
!$OMP PARALLEL REDUCTION(+: SUM) NUM_THREADS(2)
          CALL F1(J)
                ! I, N and SUM were not flushed
                !   because they were not accessible in F1
                ! J was flushed because it was accessible
          SUM = SUM + J
          CALL F2(J)
                ! I, N, and SUM were not flushed
                ! because they were not accessible in f2
                ! J was flushed because it was accessible
          SUM = SUM + I + J + P + N
!$OMP END PARALLEL
          G = SUM
      END FUNCTION G

      PROGRAM A19
        COMMON /DATA/ P, X
        INTEGER, TARGET :: X
        INTEGER, POINTER :: P
        INTEGER RESULT, G
        P => X
        RESULT = G(10)
        PRINT *, RESULT
        IF (RESULT .NE. 30) THEN
          CALL ABORT
        ENDIF
      END PROGRAM A19
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
