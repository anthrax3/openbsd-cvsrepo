head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@! { dg-do compile }
! { dg-options "-ffixed-form" }
        MODULE DATA
        USE OMP_LIB, ONLY: OMP_NEST_LOCK_KIND
        TYPE LOCKED_PAIR
        INTEGER A
        INTEGER B
        INTEGER (OMP_NEST_LOCK_KIND) LCK
        END TYPE
            END MODULE DATA
        SUBROUTINE INCR_A(P, A)
            ! called only from INCR_PAIR, no need to lock
            USE DATA
            TYPE(LOCKED_PAIR) :: P
            INTEGER A
            P%A = P%A + A
        END SUBROUTINE INCR_A
        SUBROUTINE INCR_B(P, B)
            ! called from both INCR_PAIR and elsewhere,
            ! so we need a nestable lock
            USE OMP_LIB       ! or INCLUDE "omp_lib.h"
            USE DATA
            TYPE(LOCKED_PAIR) :: P
            INTEGER B
            CALL OMP_SET_NEST_LOCK(P%LCK)
            P%B = P%B + B
            CALL OMP_UNSET_NEST_LOCK(P%LCK)
        END SUBROUTINE INCR_B
        SUBROUTINE INCR_PAIR(P, A, B)
            USE OMP_LIB         ! or INCLUDE "omp_lib.h"
            USE DATA
            TYPE(LOCKED_PAIR) :: P
            INTEGER A
            INTEGER B
        CALL OMP_SET_NEST_LOCK(P%LCK)
        CALL INCR_A(P, A)
        CALL INCR_B(P, B)
        CALL OMP_UNSET_NEST_LOCK(P%LCK)
      END SUBROUTINE INCR_PAIR
      SUBROUTINE A40(P)
        USE OMP_LIB        ! or INCLUDE "omp_lib.h"
        USE DATA
        TYPE(LOCKED_PAIR) :: P
        INTEGER WORK1, WORK2, WORK3
        EXTERNAL WORK1, WORK2, WORK3
!$OMP PARALLEL SECTIONS
!$OMP SECTION
          CALL INCR_PAIR(P, WORK1(), WORK2())
!$OMP SECTION
          CALL INCR_B(P, WORK3())
!$OMP END PARALLEL SECTIONS
      END SUBROUTINE A40
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
