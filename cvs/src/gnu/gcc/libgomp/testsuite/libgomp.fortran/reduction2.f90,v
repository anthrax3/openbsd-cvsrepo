head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@! { dg-do run }
!$ use omp_lib

  logical :: l, la (4), m, ma (4), v
  integer :: n, cnt

  l = .true.
  la = (/.true., .false., .true., .true./)
  m = .false.
  ma = (/.false., .false., .false., .true./)
  v = .false.
  cnt = -1

!$omp parallel num_threads (3) private (n) reduction (.or.:v) &
!$omp & reduction (.and.:l, la) reduction (.or.:m, ma)
!$ if (.not. l .or. any (.not. la)) v = .true.
!$ if (m .or. any (ma)) v = .true.
  n = omp_get_thread_num ()
  if (n .eq. 0) then
    cnt = omp_get_num_threads ()
    l = .false.
    la(3) = .false.
    ma(2) = .true.
  else if (n .eq. 1) then
    l = .false.
    la(4) = .false.
    ma(1) = .true.
  else
    la(3) = .false.
    m = .true.
    ma(1) = .true.
  end if
!$omp end parallel
  if (v) call abort
  if (cnt .eq. 3) then
    if (l .or. any (la .neqv. (/.true., .false., .false., .false./))) call abort
    if (.not. m .or. any (ma .neqv. (/.true., .true., .false., .true./))) call abort
  end if

  l = .true.
  la = (/.true., .false., .true., .true./)
  m = .false.
  ma = (/.false., .false., .false., .true./)
  v = .false.
  cnt = -1

!$omp parallel num_threads (3) private (n) reduction (.or.:v) &
!$omp & reduction (.eqv.:l, la) reduction (.neqv.:m, ma)
!$ if (.not. l .or. any (.not. la)) v = .true.
!$ if (m .or. any (ma)) v = .true.
  n = omp_get_thread_num ()
  if (n .eq. 0) then
    cnt = omp_get_num_threads ()
    l = .false.
    la(3) = .false.
    ma(2) = .true.
  else if (n .eq. 1) then
    l = .false.
    la(4) = .false.
    ma(1) = .true.
  else
    la(3) = .false.
    m = .true.
    ma(1) = .true.
  end if
!$omp end parallel
  if (v) call abort
  if (cnt .eq. 3) then
    if (.not. l .or. any (la .neqv. (/.true., .false., .true., .false./))) call abort
    if (.not. m .or. any (ma .neqv. (/.false., .true., .false., .true./))) call abort
  end if

end
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
