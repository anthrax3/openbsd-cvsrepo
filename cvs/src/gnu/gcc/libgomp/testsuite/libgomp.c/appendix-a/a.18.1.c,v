head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* { dg-do run } */

#include <omp.h>
#include <stdio.h>

extern void abort (void);

#define NUMBER_OF_THREADS 4

int synch[NUMBER_OF_THREADS];
int work[NUMBER_OF_THREADS];
int result[NUMBER_OF_THREADS];
int
fn1 (int i)
{
  return i * 2;
}

int
fn2 (int a, int b)
{
  return a + b;
}

int
main ()
{
  int i, iam, neighbor;
  omp_set_num_threads (NUMBER_OF_THREADS);
#pragma omp parallel private(iam,neighbor) shared(work,synch)
  {
    iam = omp_get_thread_num ();
    synch[iam] = 0;
#pragma omp barrier
    /*Do computation into my portion of work array */
    work[iam] = fn1 (iam);
    /* Announce that I am done with my work. The first flush
     * ensures that my work is made visible before synch.
     * The second flush ensures that synch is made visible.
     */
#pragma omp flush(work,synch)
    synch[iam] = 1;
#pragma omp flush(synch)
    /* Wait for neighbor. The first flush ensures that synch is read
     * from memory, rather than from the temporary view of memory.
     * The second flush ensures that work is read from memory, and
     * is done so after the while loop exits.
     */
    neighbor = (iam > 0 ? iam : omp_get_num_threads ()) - 1;
    while (synch[neighbor] == 0)
      {
#pragma omp flush(synch)
      }
#pragma omp flush(work,synch)
    /* Read neighbor's values of work array */
    result[iam] = fn2 (work[neighbor], work[iam]);
  }
  /* output result here */
  for (i = 0; i < NUMBER_OF_THREADS; i++)
    {
      neighbor = (i > 0 ? i : NUMBER_OF_THREADS) - 1;
      if (result[i] != i * 2 + neighbor * 2)
	abort ();
    }

  return 0;
}
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
