head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* PR middle-end/25261 */
/* { dg-do run } */

#include <omp.h>

extern void abort (void);

int
main (void)
{
  int i = 5, j, l = 0;
  int foo (void)
  {
    return i == 6;
  }
  int bar (void)
  {
    return i - 3;
  }

  omp_set_dynamic (0);

#pragma omp parallel if (foo ()) num_threads (2)
  if (omp_get_num_threads () != 1)
#pragma omp atomic
    l++;

#pragma omp parallel for schedule (static, bar ()) num_threads (2) \
		     reduction (|:l)
  for (j = 0; j < 4; j++)
    if (omp_get_thread_num () != (j >= 2))
#pragma omp atomic
      l++;

  i++;

#pragma omp parallel if (foo ()) num_threads (2)
  if (omp_get_num_threads () != 2)
#pragma omp atomic
    l++;

#pragma omp parallel for schedule (static, bar ()) num_threads (2) \
		     reduction (|:l)
  for (j = 0; j < 6; j++)
    if (omp_get_thread_num () != (j >= 3))
#pragma omp atomic
      l++;

#pragma omp parallel num_threads (4) reduction (|:l)
  if (!foo () || bar () != 3)
#pragma omp atomic
      l++;

  i++;

#pragma omp parallel num_threads (4) reduction (|:l)
  if (foo () || bar () != 4)
#pragma omp atomic
      l++;

  if (l)
    abort ();

  return 0;
}
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
