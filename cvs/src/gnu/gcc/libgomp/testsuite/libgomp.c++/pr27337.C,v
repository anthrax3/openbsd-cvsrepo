head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.30
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.32
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// PR middle-end/27337
// { dg-do run }

#include <omp.h>

extern "C" void abort (void);

struct S
{
  S ();
  ~S ();
  S (const S &);
  int i;
};

int n[3];

S::S () : i(18)
{
  if (omp_get_thread_num () != 0)
#pragma omp atomic
    n[0]++;
}

S::~S ()
{
  if (omp_get_thread_num () != 0)
#pragma omp atomic
    n[1]++;
}

S::S (const S &x)
{
  if (x.i != 18)
    abort ();
  i = 118;
  if (omp_get_thread_num () != 0)
#pragma omp atomic
    n[2]++;
}

S
foo ()
{
  int i;
  S ret;

#pragma omp parallel for firstprivate (ret) lastprivate (ret) \
			 schedule (static, 1) num_threads (4)
  for (i = 0; i < 4; i++)
    ret.i += omp_get_thread_num ();

  return ret;
}

S
bar ()
{
  int i;
  S ret;

#pragma omp parallel for num_threads (4)
  for (i = 0; i < 4; i++)
#pragma omp atomic
    ret.i += omp_get_thread_num () + 1;

  return ret;
}

S x;

int
main (void)
{
  omp_set_dynamic (false);
  x = foo ();
  if (n[0] != 0 || n[1] != 3 || n[2] != 3)
    abort ();
  if (x.i != 118 + 3)
    abort ();
  x = bar ();
  if (n[0] != 0 || n[1] != 3 || n[2] != 3)
    abort ();
  if (x.i != 18 + 0 + 1 + 2 + 3 + 4)
    abort ();
  return 0;
}
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
