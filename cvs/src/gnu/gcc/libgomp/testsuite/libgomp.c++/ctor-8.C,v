head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// { dg-do run }
// { dg-require-effective-target tls_runtime }

#include <omp.h>
#include <assert.h>

#define N 10
#define THR 4

struct B
{
  B();
  B(const B &);
  ~B();
  B& operator=(const B &);
  void doit();
};

static B *base;
static B *threadbase;
static unsigned cmask[THR];
static unsigned dmask[THR];

#pragma omp threadprivate(threadbase)

B::B()
{
  assert (base == 0);
}

B::B(const B &b)
{
  unsigned index = &b - base;
  assert (index < N);
  cmask[omp_get_thread_num()] |= 1u << index;
}

B::~B()
{
  if (threadbase)
    {
      unsigned index = this - threadbase;
      assert (index < N);
      dmask[omp_get_thread_num()] |= 1u << index;
    }
}

void foo()
{
  B b[N];

  base = b;

  #pragma omp parallel firstprivate(b)
    {
      assert (omp_get_num_threads () == THR);
      threadbase = b;
    }

  threadbase = 0;
}

int main()
{
  omp_set_dynamic (0);
  omp_set_num_threads (THR);
  foo();

  for (int i = 0; i < THR; ++i)
    {
      unsigned xmask = (1u << N) - 1;
      assert (cmask[i] == xmask);
      assert (dmask[i] == xmask);
    }

  return 0;
}
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
