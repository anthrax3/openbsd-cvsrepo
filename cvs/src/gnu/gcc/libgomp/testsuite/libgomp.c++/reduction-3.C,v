head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.31;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#include <omp.h>
#include <stdlib.h>

int
main (void)
{
  int i = 0, j = 0, k = ~0, l;
  double d = 1.0;
#pragma omp parallel num_threads(4)
  {
#pragma omp single
    {
      i = 16;
      k ^= (1 << 16);
      d += 32.0;
    }

#pragma omp for reduction(+:i) reduction(*:d) reduction(&:k) nowait
    for (l = 0; l < 4; l++)
      {
	if (omp_get_num_threads () == 4 && (i != 0 || d != 1.0 || k != ~0))
#pragma omp atomic
	  j |= 1;
  
	if (l == omp_get_thread_num ())
	  {
	    i = omp_get_thread_num ();
	    d = i + 1;
	    k = ~(1 << (2 * i));
	  }
      }

    if (omp_get_num_threads () == 4)
      {
#pragma omp barrier
	if (i != (16 + 0 + 1 + 2 + 3))
#pragma omp atomic
	  j |= 2;
	if (d != (33.0 * 1.0 * 2.0 * 3.0 * 4.0))
#pragma omp atomic
	  j |= 4;
	if (k != (~0 ^ 0x55 ^ (1 << 16)))
#pragma omp atomic
	  j |= 8;
      }
  }

  if (j)
    abort ();
  return 0;
}
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
