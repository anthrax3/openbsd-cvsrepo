head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2015.04.02.11.54.27;	author pascal;	state Exp;
branches;
next	1.7;
commitid	SvzUeUwil33XoFIh;

1.7
date	2014.12.22.19.04.24;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	27Z8sR1HFfSJfvHP;

1.6
date	2013.02.03.20.47.02;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.29.08.05.48;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.04.16.57.13;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.21.10.17.08;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.26.21.29.00;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.25.21.02.09;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Change gcc and ld semantics to make static PIE the default when invoking
'cc -static'.  To explicitly request the legacy behaviour, use -nopie.

For the few port affected by this, bumps will follow shortly.

looks good to kettenis@@, ok kurt@@
@
text
@/* Configuration file for an hppa risc OpenBSD target.

   Copyright (C) 1999 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */


#include <pa/pa32-regs.h>
#define OBSD_HAS_DECLARE_FUNCTION_NAME
#define OBSD_HAS_DECLARE_FUNCTION_SIZE
#define OBSD_HAS_DECLARE_OBJECT
#include <openbsd.h>

/* Turn off various SOM crap we don't want.  */
#undef TARGET_ELF32
#define TARGET_ELF32 1

#undef MAX_OFILE_ALIGNMENT
#define MAX_OFILE_ALIGNMENT 0x8000

/* Run-time target specifications. */
#undef TARGET_OS_CPP_BUILTINS
#define TARGET_OS_CPP_BUILTINS()		\
  do						\
    {						\
	OPENBSD_OS_CPP_BUILTINS_ELF();		\
    }						\
  while (0)

/* We don't use profile counters.  */
#define NO_DEFERRED_PROFILE_COUNTERS 1

/* Define the strings used for the special svr4 .type and .size directives.
   These strings generally do not vary from one system running svr4 to
   another, but if a given system (e.g. m88k running svr) needs to use
   different pseudo-op names for these, they may be overridden in the
   file which includes this one.  */

#undef STRING_ASM_OP
#define STRING_ASM_OP   "\t.stringz\t"

#define TEXT_SECTION_ASM_OP "\t.text"
#define DATA_SECTION_ASM_OP "\t.data"
#define BSS_SECTION_ASM_OP "\t.section\t.bss"

/* We want local labels to start with period if made with asm_fprintf.  */
#undef LOCAL_LABEL_PREFIX
#define LOCAL_LABEL_PREFIX "."

/* Define these to generate the Linux/ELF/SysV style of internal
   labels all the time - i.e. to be compatible with
   ASM_GENERATE_INTERNAL_LABEL in <elfos.h>.  Compare these with the
   ones in pa.h and note the lack of dollar signs in these.  FIXME:
   shouldn't we fix pa.h to use ASM_GENERATE_INTERNAL_LABEL instead? */

#undef ASM_OUTPUT_ADDR_VEC_ELT
#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \
  if (TARGET_BIG_SWITCH)					\
    fprintf (FILE, "\t.word .L%d\n", VALUE);			\
  else								\
    fprintf (FILE, "\tb .L%d\n\tnop\n", VALUE)

#undef ASM_OUTPUT_ADDR_DIFF_ELT
#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \
  if (TARGET_BIG_SWITCH)					\
    fprintf (FILE, "\t.word .L%d-.L%d\n", VALUE, REL);		\
  else								\
    fprintf (FILE, "\tb .L%d\n\tnop\n", VALUE)

/* Use the default.  */
#undef ASM_OUTPUT_LABEL

/* NOTE: (*targetm.asm_out.internal_label)() is defined for us by elfos.h, and
   does what we want (i.e. uses colons).  It must be compatible with
   ASM_GENERATE_INTERNAL_LABEL(), so do not define it here.  */

/* Use the default.  */
#undef ASM_OUTPUT_INTERNAL_LABEL

/* Use the default.  */
#undef TARGET_ASM_GLOBALIZE_LABEL

/* FIXME: Hacked from the <elfos.h> one so that we avoid multiple
   labels in a function declaration (since pa.c seems determined to do
   it differently)  */

#undef ASM_DECLARE_FUNCTION_NAME
#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)		\
  do								\
    {								\
      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, "function");	\
      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));		\
    }								\
  while (0)

/* As well as globalizing the label, we need to encode the label
   to ensure a plabel is generated in an indirect call.  */

#undef ASM_OUTPUT_EXTERNAL_LIBCALL
#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)			\
  do								\
    {								\
      if (!FUNCTION_NAME_P (XSTR (FUN, 0)))			\
        hppa_encode_label (FUN);				\
      (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0));	\
    }								\
  while (0)

/* OpenBSD always uses gas. */
#undef TARGET_GAS
#define TARGET_GAS 1

/* XXX OpenBSD/hppa has a non-standard .comm */

#undef ASM_OUTPUT_ALIGNED_COMMON
#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)  		\
  do									\
    {									\
      switch_to_section (bss_section);					\
      assemble_name((FILE), (NAME));					\
      fprintf((FILE), "\t.align %d\n", ((ALIGN) / BITS_PER_UNIT));	\
      fprintf ((FILE), "\t.comm %d\n",					\
	       MAX ((SIZE), ((ALIGN) / BITS_PER_UNIT)));		\
    }									\
  while (0)

#undef ASM_OUTPUT_ALIGNED_LOCAL
#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)  		\
  do									\
    {									\
      switch_to_section (bss_section);					\
      fprintf((FILE), "\t.align %d\n", ((ALIGN) / BITS_PER_UNIT));	\
      assemble_name((FILE), (NAME));					\
      fprintf ((FILE), "\t.block %d\n",	(SIZE));			\
    }									\
  while (0)

#undef TARGET_SCHED_DEFAULT
#define TARGET_SCHED_DEFAULT PROCESSOR_700

#undef LINK_SPEC
#define LINK_SPEC \
  "%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \
   %{shared:-shared} %{R*} \
   %{static:-Bstatic} \
   %{!static:-Bdynamic} \
   %{rdynamic:-export-dynamic} \
   %{assert*} \
   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}"

/* Layout of source language data types. */

/* This must agree with <machine/_types.h> */
#undef SIZE_TYPE
#define SIZE_TYPE "long unsigned int"

#undef PTRDIFF_TYPE
#define PTRDIFF_TYPE "long int"

#undef INTMAX_TYPE
#define INTMAX_TYPE "long long int"

#undef UINTMAX_TYPE
#define UINTMAX_TYPE "long long unsigned int"

#undef WCHAR_TYPE
#define WCHAR_TYPE "int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE 32

/* As an elf system, we need crtbegin/crtend stuff.  */
#undef STARTFILE_SPEC
#define STARTFILE_SPEC "\
	%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} \
	%{!p:%{!static:crt0%O%s} %{static:%{nopie:crt0%O%s} \
	%{!nopie:rcrt0%O%s}}}} crtbegin%O%s} %{shared:crtbeginS%O%s}"
#undef ENDFILE_SPEC
#define ENDFILE_SPEC "%{!shared:crtend%O%s} %{shared:crtendS%O%s}"
@


1.7
log
@Link -static -pie executables with rcrt0.o instead of crt0.o such that they
self-relocate.

Based on a diff for amd64 from kurt@@
@
text
@d191 2
a192 2
	%{!p:%{!static:crt0%O%s} %{static:%{pie:rcrt0%O%s} %{!pie:crt0%O%s}}}} \
        crtbegin%O%s} %{shared:crtbeginS%O%s}"
@


1.6
log
@Sanitize LINK_SPEC for hppa, making it identical to what we have on amd64 and
i386.

ok pascal@@, miod@@
@
text
@d189 4
a192 1
#define STARTFILE_SPEC "%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} crtbegin%O%s} %{shared:crtbeginS%O%s}"
@


1.5
log
@Our _mcount doesn't use profile counters.  Partially fixes profiling on hppa
(things link now).
@
text
@a155 1
/* XXX Why doesn't PA support -R  like everyone ??? */
d158 7
a164 7
  "%{EB} %{EL} %{shared} %{non_shared} \
   %{call_shared} %{no_archive} %{exact_version} \
   %{!shared: %{!non_shared: %{!call_shared: -non_shared}}} \
   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so} \
   %{!nostdlib:%{!r*:%{!e*:-e __start}}} -dc -dp \
   %{static:-Bstatic} %{!static:-Bdynamic} %{rdynamic:-export-dynamic} \
   %{assert*}"
@


1.4
log
@Restore MAX_OFILE_ALIGNMENT define (lost during the gcc3 -> gcc4 switch),
and change ASM_OUTPUT_ALIGNED_COMMON to output an explicit .align directive,
as gas will not compute it from the size (despite what comments elsewhere in
gcc code say).
This effectively makes __attribute__ ((aligned (N))) constructs work as
intended for .bss objects.

ok kettenis@@
@
text
@d45 3
@


1.3
log
@change LINK_SPEC in such a way that -rdynamic will work
(passes -export-dynamic to ld(1))

ok drahn@@ miod@@
@
text
@d33 2
d133 1
@


1.2
log
@Work around the fact that our .comm directive is somewhat non-standard.
@
text
@d158 2
a159 1
   %{static:-Bstatic} %{!static:-Bdynamic} %{assert*}"
@


1.1
log
@Add hppa support, loosely based on the existing GCC 3.3.5 support.  Many bits
removed that are now unnecessary.
@
text
@d123 24
@

