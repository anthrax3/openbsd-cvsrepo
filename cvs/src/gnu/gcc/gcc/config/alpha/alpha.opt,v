head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.16
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.05.04.18.34.32;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.15.17.11.30;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.30;	author robert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge from gcc3 our configuration for alpha, including these local
changes:

* Do not force -msmall-data if -fpic and -mlarge-data if -fPIC.
Instead, have both -fpic and -fPIC only select pic code generation,
and use whatever memory mode is specified (with -mlarge-data being
the implicit default).

* -Wstack-larger-than support.

* Disable stack frame checking in the prologue under OpenBSD, unless
you compile with -fstack-check, for consistency with other platforms.

* -mno-ieee option to disable IEEE mode.

ok kettenis@@
@
text
@; Options for the DEC Alpha port of the compiler
;
; Copyright (C) 2005 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 2, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
; License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING.  If not, write to the Free
; Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA
; 02110-1301, USA.

msoft-float
Target Report Mask(SOFT_FP)
Do not use hardware fp

mfp-regs
Target Report Mask(FPREGS)
Use fp registers

mgas
Target RejectNegative Mask(GAS)
Assume GAS

malpha-as
Target RejectNegative InverseMask(GAS)
Do not assume GAS

mieee-conformant
Target RejectNegative Mask(IEEE_CONFORMANT)
Request IEEE-conformant math library routines (OSF/1)

mieee
Target Report RejectNegative Mask(IEEE)
Emit IEEE-conformant code, without inexact exceptions

mno-ieee
Target Report RejectNegative InverseMask(IEEE)
Emit non-IEEE-conformant code

mieee-with-inexact
Target Report RejectNegative Mask(IEEE_WITH_INEXACT)
Emit IEEE-conformant code, with inexact exceptions

mbuild-constants
Target Report Mask(BUILD_CONSTANTS)
Do not emit complex integer constants to read-only memory

mfloat-vax
Target Report RejectNegative Mask(FLOAT_VAX)
Use VAX fp

mfloat-ieee
Target Report RejectNegative InverseMask(FLOAT_VAX)
Do not use VAX fp

mbwx
Target Report Mask(BWX)
Emit code for the byte/word ISA extension

mmax
Target Report Mask(MAX)
Emit code for the motion video ISA extension

mfix
Target Report Mask(FIX)
Emit code for the fp move and sqrt ISA extension

mcix
Target Report Mask(CIX)
Emit code for the counting ISA extension

mexplicit-relocs
Target Report Mask(EXPLICIT_RELOCS)
Emit code using explicit relocation directives

msmall-data
Target Report RejectNegative Mask(SMALL_DATA)
Emit 16-bit relocations to the small data areas

mlarge-data
Target Report RejectNegative InverseMask(SMALL_DATA)
Emit 32-bit relocations to the small data areas

msmall-text
Target Report RejectNegative Mask(SMALL_TEXT)
Emit direct branches to local functions

mlarge-text
Target Report RejectNegative InverseMask(SMALL_TEXT)
Emit indirect branches to local functions

mtls-kernel
Target Report Mask(TLS_KERNEL)
Emit rdval instead of rduniq for thread pointer

mlong-double-128
Target Report RejectNegative Mask(LONG_DOUBLE_128)
Use 128-bit long double

mlong-double-64
Target Report RejectNegative InverseMask(LONG_DOUBLE_128)
Use 64-bit long double

mcpu=
Target RejectNegative Joined Var(alpha_cpu_string)
Use features of and schedule given CPU

mtune=
Target RejectNegative Joined Var(alpha_tune_string)
Schedule given CPU

mfp-rounding-mode=
Target RejectNegative Joined Var(alpha_fprm_string)
Control the generated fp rounding mode

mfp-trap-mode=
Target RejectNegative Joined Var(alpha_fptm_string)
Control the IEEE trap mode

mtrap-precision=
Target RejectNegative Joined Var(alpha_tp_string)
Control the precision given to fp exceptions

mmemory-latency=
Target RejectNegative Joined Var(alpha_mlat_string)
Tune expected memory latency

mtls-size=
Target RejectNegative Joined UInteger Var(alpha_tls_size) Init(32)
Specify bit size of immediate TLS offsets
@


1.1
log
@Initial revision
@
text
@d46 4
d52 1
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
