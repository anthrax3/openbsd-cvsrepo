head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	gcc-4_2_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.10.15.17.11.29;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.17.11.29;	author robert;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@;; DFA-based pipeline description for the RM9000.
;;   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.
;;
;; This file is part of GCC.

;; GCC is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published
;; by the Free Software Foundation; either version 2, or (at your
;; option) any later version.

;; GCC is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
;; License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GCC; see the file COPYING.  If not, write to the
;; Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
;; MA 02110-1301, USA.

(define_automaton "rm9k_main, rm9k_imul, rm9k_fdiv")

;; These units are for insns that can issue in either pipe.  We don't
;; want to use constructs like "rm9k_m | rm9k_f_int" since that would
;; needlessly make an insn prefer the M pipe.
(define_cpu_unit "rm9k_any1" "rm9k_main")
(define_cpu_unit "rm9k_any2" "rm9k_main")

;; F and M pipe units, for instructions that must be issued by a
;; particular pipe.  Split the F pipe into two units so that integer
;; instructions can issue while the FPU is busy.  We don't need to
;; split M because it is only ever reserved for a single cycle.
(define_cpu_unit "rm9k_m" "rm9k_main")
(define_cpu_unit "rm9k_f_int" "rm9k_main")
(define_cpu_unit "rm9k_f_float" "rm9k_main")

(exclusion_set "rm9k_f_int" "rm9k_f_float")

;; Multiply/divide units.
(define_cpu_unit "rm9k_imul" "rm9k_imul")
(define_cpu_unit "rm9k_fdiv" "rm9k_fdiv")

(define_insn_reservation "rm9k_load" 3
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "load,fpload,fpidxload"))
  "rm9k_m")

(define_insn_reservation "rm9k_store" 1
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "store,fpstore,fpidxstore"))
  "rm9k_m")

(define_insn_reservation "rm9k_int" 1
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "arith,shift,slt,clz,const,nop,trap"))
  "rm9k_any1 | rm9k_any2")

(define_insn_reservation "rm9k_int_cmove" 2
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "condmove")
	    (eq_attr "mode" "SI,DI")))
  "rm9k_any1 | rm9k_any2")

;; This applies to both 'mul' and 'mult'.
(define_insn_reservation "rm9k_mulsi" 3
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "imul,imul3,imadd")
	    (eq_attr "mode" "!DI")))
  "rm9k_f_int")

(define_insn_reservation "rm9k_muldi" 7
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "imul,imul3,imadd")
	    (eq_attr "mode" "DI")))
  "rm9k_f_int + rm9k_imul * 7")

(define_insn_reservation "rm9k_divsi" 38
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "idiv")
	    (eq_attr "mode" "!DI")))
  "rm9k_f_int + rm9k_imul * 38")

(define_insn_reservation "rm9k_divdi" 70
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "idiv")
	    (eq_attr "mode" "DI")))
  "rm9k_f_int + rm9k_imul * 70")

(define_insn_reservation "rm9k_mfhilo" 1
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "mfhilo"))
  "rm9k_f_int")

(define_insn_reservation "rm9k_mthilo" 5
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "mthilo"))
  "rm9k_f_int")

(define_insn_reservation "rm9k_xfer" 2
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "xfer"))
  "rm9k_m")

(define_insn_reservation "rm9k_fquick" 2
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "fabs,fneg,fcmp,fmove"))
  "rm9k_f_float")

(define_insn_reservation "rm9k_fcmove" 2
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "condmove")
	    (eq_attr "mode" "SF,DF")))
  "rm9k_m")

(define_insn_reservation "rm9k_fadd" 6
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "fadd,fcvt"))
  "rm9k_f_float")

(define_insn_reservation "rm9k_fmuls" 6
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "fmul,fmadd")
	    (eq_attr "mode" "SF")))
  "rm9k_f_float")

(define_insn_reservation "rm9k_fmuld" 9
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "fmul,fmadd")
	    (eq_attr "mode" "DF")))
  "rm9k_f_float * 3")

(define_insn_reservation "rm9k_fdivs" 22
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "fdiv,frdiv,fsqrt,frsqrt")
	    (eq_attr "mode" "SF")))
  "rm9k_f_float + rm9k_fdiv * 22")

(define_insn_reservation "rm9k_fdivd" 37
  (and (eq_attr "cpu" "r9000")
       (and (eq_attr "type" "fdiv,frdiv,fsqrt,frsqrt")
	    (eq_attr "mode" "DF")))
  "rm9k_f_float + rm9k_fdiv * 37")

(define_insn_reservation "rm9k_branch" 2
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "branch,jump,call"))
  "rm9k_any1 | rm9k_any2")

(define_insn_reservation "rm9k_unknown" 1
  (and (eq_attr "cpu" "r9000")
       (eq_attr "type" "unknown,multi"))
  "rm9k_m + rm9k_f_int + rm9k_any1 + rm9k_any2")
@


1.1.1.1
log
@import of gcc-4.2.1, the last gcc release under GPLv2
@
text
@@
