head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.54
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.50
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.46
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.48
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.40
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.44
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.42
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.38
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.36
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.34
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.32
	OPENBSD_5_0:1.5.0.30
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.28
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.26
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.22
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.24
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.20
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	READLINE_4_3_PATCH_005:1.1.1.2
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.1.1.1.0.10
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.8
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.6
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	READLINE_4_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2004.05.10.19.36.20;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.04.13.42;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.10.21.40.00;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.08.05.36.51;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.18.17.32.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.18.17.32.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.10.18.48.29;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Resolve conflicts for GNU readline 4.3p5.
ok deraadt@@, otto@@, pval@@
@
text
@/* shell.c -- readline utility functions that are normally provided by
	      bash when readline is linked as part of the shell. */

/* Copyright (C) 1997 Free Software Foundation, Inc.

   This file is part of the GNU Readline Library, a library for
   reading lines of text with interactive input and history editing.

   The GNU Readline Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2, or
   (at your option) any later version.

   The GNU Readline Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   The GNU General Public License is often shipped with GNU software, and
   is generally kept in a file called COPYING or LICENSE.  If you do not
   have a copy of the license, write to the Free Software Foundation,
   59 Temple Place, Suite 330, Boston, MA 02111 USA. */
#define READLINE_LIBRARY

#if defined (HAVE_CONFIG_H)
#  include <config.h>
#endif

#include <sys/types.h>

#if defined (HAVE_UNISTD_H)
#  include <unistd.h>
#endif /* HAVE_UNISTD_H */

#if defined (HAVE_STDLIB_H)
#  include <stdlib.h>
#else
#  include "ansi_stdlib.h"
#endif /* HAVE_STDLIB_H */

#if defined (HAVE_STRING_H)
#  include <string.h>
#else
#  include <strings.h>
#endif /* !HAVE_STRING_H */

#if defined (HAVE_LIMITS_H)
#  include <limits.h>
#endif

#include <fcntl.h>
#include <pwd.h>

#include <stdio.h>

#include "rlstdc.h"
#include "rlshell.h"
#include "xmalloc.h"

#if !defined (HAVE_GETPW_DECLS)
extern struct passwd *getpwuid PARAMS((uid_t));
#endif /* !HAVE_GETPW_DECLS */

#ifndef NULL
#  define NULL 0
#endif

#ifndef CHAR_BIT
#  define CHAR_BIT 8
#endif

/* Nonzero if the integer type T is signed.  */
#define TYPE_SIGNED(t) (! ((t) 0 < (t) -1))

/* Bound on length of the string representing an integer value of type T.
   Subtract one for the sign bit if T is signed;
   302 / 1000 is log10 (2) rounded up;
   add one for integer division truncation;
   add one more for a minus sign if t is signed.  */
#define INT_STRLEN_BOUND(t) \
  ((sizeof (t) * CHAR_BIT - TYPE_SIGNED (t)) * 302 / 1000 \
   + 1 + TYPE_SIGNED (t))

/* All of these functions are resolved from bash if we are linking readline
   as part of bash. */

/* Does shell-like quoting using single quotes. */
char *
sh_single_quote (string)
     char *string;
{
  register int c;
  char *result, *r, *s;

  result = (char *)xmalloc (3 + (4 * strlen (string)));
  r = result;
  *r++ = '\'';

  for (s = string; s && (c = *s); s++)
    {
      *r++ = c;

      if (c == '\'')
	{
	  *r++ = '\\';	/* insert escaped single quote */
	  *r++ = '\'';
	  *r++ = '\'';	/* start new quoted string */
	}
    }

  *r++ = '\'';
  *r = '\0';

  return (result);
}

/* Set the environment variables LINES and COLUMNS to lines and cols,
   respectively. */
void
sh_set_lines_and_columns (lines, cols)
     int lines, cols;
{
  char *b;

#if defined (HAVE_PUTENV)
  if (asprintf (&b, "LINES=%d", lines) == -1)
	  memory_error_and_abort("asprintf");
  putenv (b);
  if (asprintf (&b, "COLUMNS=%d", cols) == -1)
	  memory_error_and_abort("asprintf");
  putenv (b);
#else /* !HAVE_PUTENV */
#  if defined (HAVE_SETENV)
  if (asprintf(&b, "%d", lines) == -1)
	  memory_error_and_abort("asprintf");
  setenv ("LINES", b, 1);
  if (asprintf (&b, "%d", cols) == -1)
	  memory_error_and_abort("asprintf");
  setenv ("COLUMNS", b, 1);
#  endif /* HAVE_SETENV */
#endif /* !HAVE_PUTENV */
}

char *
sh_get_env_value (varname)
     const char *varname;
{
  return ((char *)getenv (varname));
}

char *
sh_get_home_dir ()
{
  char *home_dir;
  struct passwd *entry;

  home_dir = (char *)NULL;
  entry = getpwuid (getuid ());
  if (entry)
    home_dir = entry->pw_dir;
  return (home_dir);
}

#if !defined (O_NDELAY)
#  if defined (FNDELAY)
#    define O_NDELAY FNDELAY
#  endif
#endif

int
sh_unset_nodelay_mode (fd)
     int fd;
{
  int flags, bflags;

  if ((flags = fcntl (fd, F_GETFL, 0)) < 0)
    return -1;

  bflags = 0;

#ifdef O_NONBLOCK
  bflags |= O_NONBLOCK;
#endif

#ifdef O_NDELAY
  bflags |= O_NDELAY;
#endif

  if (flags & bflags)
    {
      flags &= ~bflags;
      return (fcntl (fd, F_SETFL, flags));
    }

  return 0;
}
@


1.4
log
@strings in libreadline, again. this time with no abi change,
static builds still seem to work with this. ok deraadt@@ tedu@@
@
text
@d47 4
d56 1
d61 1
a61 1
extern struct passwd *getpwuid ();
d68 16
d89 1
a89 1
single_quote (string)
d120 1
a120 1
set_lines_and_columns (lines, cols)
d145 2
a146 2
get_env_value (varname)
     char *varname;
d152 1
a152 1
get_home_dir ()
d171 1
a171 1
unset_nodelay_mode (fd)
@


1.3
log
@Back out libreadline changes, this breaks static build (I.E. vax).
changes are nontrivial to fix. Will return when static build works.
@
text
@d105 2
a106 2
  b = xmalloc (24);
  sprintf (b, "LINES=%d", lines);
d108 2
a109 2
  b = xmalloc (24);
  sprintf (b, "COLUMNS=%d", cols);
d113 2
a114 2
  b = xmalloc (8);
  sprintf (b, "%d", lines);
d116 2
a117 2
  b = xmalloc (8);
  sprintf (b, "%d", cols);
@


1.2
log
@strings
ok tedu@@, art@@
@
text
@d105 2
a106 2
  if (asprintf (&b, "LINES=%d", lines) == -1)
	  memory_error_and_abort("asprintf");
d109 1
a109 2
  if (asprintf (&b, "COLUMNS=%d", cols) == -1)
	  memory_error_and_abort("asprintf");
d113 2
a114 2
  if (asprintf(&b, "%d", lines) == -1)
	  memory_error_and_abort("asprintf");
d116 2
a117 2
  if (asprintf (&b, "%d", cols) == -1)
	  memory_error_and_abort("asprintf");
@


1.1
log
@Initial revision
@
text
@d105 2
a106 2
  b = xmalloc (24);
  sprintf (b, "LINES=%d", lines);
d109 2
a110 1
  sprintf (b, "COLUMNS=%d", cols);
d114 2
a115 2
  b = xmalloc (8);
  sprintf (b, "%d", lines);
d117 2
a118 2
  b = xmalloc (8);
  sprintf (b, "%d", cols);
@


1.1.1.1
log
@GNU readline-4.1
@
text
@@


1.1.1.2
log
@GNU readline 4.3p5
@
text
@a46 4
#if defined (HAVE_LIMITS_H)
#  include <limits.h>
#endif

a51 1
#include "rlstdc.h"
d56 1
a56 1
extern struct passwd *getpwuid PARAMS((uid_t));
a62 16
#ifndef CHAR_BIT
#  define CHAR_BIT 8
#endif

/* Nonzero if the integer type T is signed.  */
#define TYPE_SIGNED(t) (! ((t) 0 < (t) -1))

/* Bound on length of the string representing an integer value of type T.
   Subtract one for the sign bit if T is signed;
   302 / 1000 is log10 (2) rounded up;
   add one for integer division truncation;
   add one more for a minus sign if t is signed.  */
#define INT_STRLEN_BOUND(t) \
  ((sizeof (t) * CHAR_BIT - TYPE_SIGNED (t)) * 302 / 1000 \
   + 1 + TYPE_SIGNED (t))

d68 1
a68 1
sh_single_quote (string)
d99 1
a99 1
sh_set_lines_and_columns (lines, cols)
d105 1
a105 1
  b = (char *)xmalloc (INT_STRLEN_BOUND (int) + sizeof ("LINES=") + 1);
d108 1
a108 1
  b = (char *)xmalloc (INT_STRLEN_BOUND (int) + sizeof ("COLUMNS=") + 1);
d113 1
a113 1
  b = (char *)xmalloc (INT_STRLEN_BOUND (int) + 1);
d116 1
a116 1
  b = (char *)xmalloc (INT_STRLEN_BOUND (int) + 1);
d124 2
a125 2
sh_get_env_value (varname)
     const char *varname;
d131 1
a131 1
sh_get_home_dir ()
d150 1
a150 1
sh_unset_nodelay_mode (fd)
@

