head	1.2;
access;
symbols
	OPENBSD_2_8:1.1.1.1.0.14
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.12
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	gmp202:1.1.1.1
	gmp:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.12.11.02.23.35;	author provos;	state dead;
branches;
next	1.1;

1.1
date	97.06.24.21.28.23;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.06.24.21.28.23;	author provos;	state Exp;
branches;
next	;


desc
@@


1.2
log
@another piece of GPL software gone.
@
text
@This directory contains mpn functions optimized for Intel Pentium
processors.

RELEVANT OPTIMIZATION ISSUES

1. Pentium doesn't allocate cache lines on writes, unlike most other modern
processors.  Since the functions in the mpn class do array writes, we have to
handle allocating the destination cache lines by reading a word from it in the
loops, to achieve the best performance.

2. Pairing of memory operations requires that the two issued operations refer
to different cache banks.  The simplest way to insure this is to read/write
two words from the same object.  If we make operations on different objects,
they might or might not be to the same cache bank.

STATUS

1. mpn_lshift and mpn_rshift run at about 6 cycles/limb, but the Pentium
documentation indicates that they should take only 43/8 = 5.375 cycles/limb,
or 5 cycles/limb asymptotically.

2. mpn_add_n and mpn_sub_n run at asymptotically 2 cycles/limb.  Due to loop
overhead and other delays (cache refill?), they run at or near 2.5 cycles/limb.

3. mpn_mul_1, mpn_addmul_1, mpn_submul_1 all run 1 cycle faster than they
should...
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import of libgmp-2.0.2. Makefile.bsd-wrappers need to be worked on.
@
text
@@
