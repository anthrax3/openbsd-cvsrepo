head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.42
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.38
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.34
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.36
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.28
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.32
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.30
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.26
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.24
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.22
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.20
	OPENBSD_5_0:1.2.0.18
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.16
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.14
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.10
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.12
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.8
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	gcc-3_3_2:1.1.1.2
	gcc-2_95_3:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.07.23.17.24.06;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.15.23.28.10;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.15.23.28.10;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.15.23.35.00;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- enable thread support in libobjc
- disable thread priorities in libobjc to avoid thread starvation issues
- major bump lib due to new link dependency on pthread
- link objc regress with -pthread
Tested on i386/amd64/powerpc/landisk/vax/sparc64/hppa. okay espie@@
@
text
@/* GNU Objective C Runtime Thread Interface for POSIX compliant threads
   Copyright (C) 1996, 1997 Free Software Foundation, Inc.
   Contributed by Galen C. Hunt (gchunt@@cs.rochester.edu)
   Modified for Linux/Pthreads by Kai-Uwe Sattler (kus@@iti.cs.uni-magdeburg.de)
   Modified for posix compliance by Chris Ball (cball@@fmco.com)

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version.

GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you link this library with files compiled with
   GCC to produce an executable, this does not cause the resulting executable
   to be covered by the GNU General Public License. This exception does not
   however invalidate any other reasons why the executable file might be
   covered by the GNU General Public License.  */

#include <objc/thr.h>
#include "runtime.h"
#include <pthread.h>

/* Key structure for maintaining thread specific storage */
static pthread_key_t _objc_thread_storage;
static pthread_attr_t _objc_thread_attribs;

/* Backend initialization functions */

/* Initialize the threads subsystem. */
int
__objc_init_thread_system(void)
{
  /* Initialize the thread storage key */
  if (pthread_key_create(&_objc_thread_storage, NULL) == 0)
    {
      /*
       * The normal default detach state for threads is PTHREAD_CREATE_JOINABLE
       * which causes threads to not die when you think they should.
	   */
      if (pthread_attr_init(&_objc_thread_attribs) == 0)
        {
          if (pthread_attr_setdetachstate(&_objc_thread_attribs, 
                                          PTHREAD_CREATE_DETACHED) == 0)
            return 0;
        }
    }

  return -1;
}

/* Close the threads subsystem. */
int
__objc_close_thread_system(void)
{
  if (pthread_key_delete(_objc_thread_storage) == 0)
    {
      if (pthread_attr_destroy(&_objc_thread_attribs) == 0)
        return 0;
    }

  return -1;
}

/* Backend thread functions */

/* Create a new thread of execution. */
objc_thread_t
__objc_thread_detach(void (*func)(void *arg), void *arg)
{
  objc_thread_t thread_id;
  pthread_t new_thread_handle;
  
  if (!(pthread_create(&new_thread_handle, &_objc_thread_attribs, 
                       (void *)func, arg)))
    thread_id = *(objc_thread_t *)&new_thread_handle;
  else
    thread_id = NULL;
  
  return thread_id;
}

/* Set the current thread's priority.
 *
 * Be aware that the default schedpolicy often disallows thread priorities.
 */
int
__objc_thread_set_priority(int priority)
{
#ifndef __OpenBSD__
  pthread_t thread_id = pthread_self();
  int policy;
  struct sched_param params;
  int priority_min, priority_max;

  if (pthread_getschedparam(thread_id, &policy, &params) == 0)
    {
      if ((priority_max = sched_get_priority_max(policy)) != 0)
        return -1;

      if ((priority_min = sched_get_priority_min(policy)) != 0)
        return -1;

      if (priority > priority_max)
        priority = priority_max;
      else if (priority < priority_min)
        priority = priority_min;
      params.sched_priority = priority;

      /*
       * The solaris 7 and several other man pages incorrectly state that
       * this should be a pointer to policy but pthread.h is universally
       * at odds with this.
       */
      if (pthread_setschedparam(thread_id, policy, &params) == 0)
        return 0;
    }
#endif
  return -1;
}

/* Return the current thread's priority. */
int
__objc_thread_get_priority(void)
{
#ifdef __OpenBSD__
  return OBJC_THREAD_INTERACTIVE_PRIORITY;
#else
  int policy;
  struct sched_param params;

  if (pthread_getschedparam(pthread_self(), &policy, &params) == 0)
    return params.sched_priority;
  else
    return -1;
#endif
}

/* Yield our process time to another thread. */
void
__objc_thread_yield(void)
{
  sched_yield();
}

/* Terminate the current thread. */
int
__objc_thread_exit(void)
{
  /* exit the thread */
  pthread_exit(&__objc_thread_exit_status);

  /* Failed if we reached here */
  return -1;
}

/* Returns an integer value which uniquely describes a thread. */
objc_thread_t
__objc_thread_id(void)
{
  pthread_t self = pthread_self();

  return *(objc_thread_t *)&self;
}

/* Sets the thread's local storage pointer. */
int
__objc_thread_set_data(void *value)
{
  if (pthread_setspecific(_objc_thread_storage, value) == 0)
    return 0;
  else
    return -1;
}

/* Returns the thread's local storage pointer. */
void *
__objc_thread_get_data(void)
{
  return pthread_getspecific(_objc_thread_storage);
}

/* Backend mutex functions */

/* Allocate a mutex. */
int
__objc_mutex_allocate(objc_mutex_t mutex)
{
  mutex->backend = objc_malloc(sizeof(pthread_mutex_t));

  if (pthread_mutex_init((pthread_mutex_t *)mutex->backend, NULL))
    {
      objc_free(mutex->backend);
      mutex->backend = NULL;
      return -1;
    }

  return 0;
}

/* Deallocate a mutex. */
int
__objc_mutex_deallocate(objc_mutex_t mutex)
{
  int count = 1;

  /*
   * Posix Threads specifically require that the thread be unlocked for
   * pthread_mutex_destroy to work.
   */

  while (count)
    {
      if ((count = pthread_mutex_unlock((pthread_mutex_t*)mutex->backend)) < 0)
        return -1;
    }

  if (pthread_mutex_destroy((pthread_mutex_t *)mutex->backend))
    return -1;

  objc_free(mutex->backend);
  mutex->backend = NULL;
  return 0;
}

/* Grab a lock on a mutex. */
int
__objc_mutex_lock(objc_mutex_t mutex)
{
  if (pthread_mutex_lock((pthread_mutex_t *)mutex->backend) == 0)
    return 0;
  else
    return -1;
}

/* Try to grab a lock on a mutex. */
int
__objc_mutex_trylock(objc_mutex_t mutex)
{
  if (pthread_mutex_trylock((pthread_mutex_t *)mutex->backend) == 0)
    return 0;
  else
    return -1;
}

/* Unlock the mutex */
int
__objc_mutex_unlock(objc_mutex_t mutex)
{
  if (pthread_mutex_unlock((pthread_mutex_t *)mutex->backend) == 0)
    return 0;
  else
    return -1;
}

/* Backend condition mutex functions */

/* Allocate a condition. */
int
__objc_condition_allocate(objc_condition_t condition)
{
  condition->backend = objc_malloc(sizeof(pthread_cond_t));

  if (pthread_cond_init((pthread_cond_t *)condition->backend, NULL))
    {
      objc_free(condition->backend);
      condition->backend = NULL;
      return -1;
    }

  return 0;
}

/* Deallocate a condition. */
int
__objc_condition_deallocate(objc_condition_t condition)
{
  if (pthread_cond_destroy((pthread_cond_t *)condition->backend))
    return -1;

  objc_free(condition->backend);
  condition->backend = NULL;
  return 0;
}

/* Wait on the condition */
int
__objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)
{
  if (pthread_cond_wait((pthread_cond_t *)condition->backend,
                        (pthread_mutex_t *)mutex->backend) == 0)
    return 0;
  else
    return -1;
}

/* Wake up all threads waiting on this condition. */
int
__objc_condition_broadcast(objc_condition_t condition)
{
  if (pthread_cond_broadcast((pthread_cond_t *)condition->backend) == 0)
    return 0;
  else
    return -1;
}

/* Wake up one thread waiting on this condition. */
int
__objc_condition_signal(objc_condition_t condition)
{
  if (pthread_cond_signal((pthread_cond_t *)condition->backend) == 0)
    return 0;
  else
    return -1;
}
@


1.1
log
@Initial revision
@
text
@d5 1
d35 1
d44 15
a58 1
  return pthread_key_create(&_objc_thread_storage, NULL);
d65 7
a71 1
  return 0;
d82 4
a85 3

  if ( !(pthread_create(&new_thread_handle, NULL, (void *)func, arg)) )
      thread_id = *(objc_thread_t *)&new_thread_handle;
d92 4
a95 1
/* Set the current thread's priority. */
d99 29
a127 1
  /* Not implemented yet */
d135 11
a145 2
  /* Not implemented yet */
  return -1;
d179 4
a182 1
  return pthread_setspecific(_objc_thread_storage, value);
d214 13
d239 4
a242 1
  return pthread_mutex_lock((pthread_mutex_t *)mutex->backend);
d249 4
a252 1
  return pthread_mutex_trylock((pthread_mutex_t *)mutex->backend);
d259 4
a262 1
  return pthread_mutex_unlock((pthread_mutex_t *)mutex->backend);
d299 5
a303 2
  return pthread_cond_wait((pthread_cond_t *)condition->backend,
			   (pthread_mutex_t *)mutex->backend);
d310 4
a313 1
  return pthread_cond_broadcast((pthread_cond_t *)condition->backend);
d320 4
a323 1
  return pthread_cond_signal((pthread_cond_t *)condition->backend);
a324 2

/* End of File */
@


1.1.1.1
log
@move libobjc around to its own directory (from src/gnu/egcs/libobjc)
@
text
@@


1.1.1.2
log
@bump to gcc 3.3.2
@
text
@a4 1
   Modified for posix compliance by Chris Ball (cball@@fmco.com)
a33 1
static pthread_attr_t _objc_thread_attribs;
d42 1
a42 15
  if (pthread_key_create(&_objc_thread_storage, NULL) == 0)
    {
      /*
       * The normal default detach state for threads is PTHREAD_CREATE_JOINABLE
       * which causes threads to not die when you think they should.
	   */
      if (pthread_attr_init(&_objc_thread_attribs) == 0)
        {
          if (pthread_attr_setdetachstate(&_objc_thread_attribs, 
                                          PTHREAD_CREATE_DETACHED) == 0)
            return 0;
        }
    }

  return -1;
d49 1
a49 7
  if (pthread_key_delete(_objc_thread_storage) == 0)
    {
      if (pthread_attr_destroy(&_objc_thread_attribs) == 0)
        return 0;
    }

  return -1;
d60 3
a62 4
  
  if (!(pthread_create(&new_thread_handle, &_objc_thread_attribs, 
                       (void *)func, arg)))
    thread_id = *(objc_thread_t *)&new_thread_handle;
d69 1
a69 4
/* Set the current thread's priority.
 *
 * Be aware that the default schedpolicy often disallows thread priorities.
 */
d73 1
a73 27
  pthread_t thread_id = pthread_self();
  int policy;
  struct sched_param params;
  int priority_min, priority_max;

  if (pthread_getschedparam(thread_id, &policy, &params) == 0)
    {
      if ((priority_max = sched_get_priority_max(policy)) != 0)
        return -1;

      if ((priority_min = sched_get_priority_min(policy)) != 0)
        return -1;

      if (priority > priority_max)
        priority = priority_max;
      else if (priority < priority_min)
        priority = priority_min;
      params.sched_priority = priority;

      /*
       * The solaris 7 and several other man pages incorrectly state that
       * this should be a pointer to policy but pthread.h is universally
       * at odds with this.
       */
      if (pthread_setschedparam(thread_id, policy, &params) == 0)
        return 0;
    }
d81 2
a82 7
  int policy;
  struct sched_param params;

  if (pthread_getschedparam(pthread_self(), &policy, &params) == 0)
    return params.sched_priority;
  else
    return -1;
d116 1
a116 4
  if (pthread_setspecific(_objc_thread_storage, value) == 0)
    return 0;
  else
    return -1;
a147 13
  int count = 1;

  /*
   * Posix Threads specifically require that the thread be unlocked for
   * pthread_mutex_destroy to work.
   */

  while (count)
    {
      if ((count = pthread_mutex_unlock((pthread_mutex_t*)mutex->backend)) < 0)
        return -1;
    }

d160 1
a160 4
  if (pthread_mutex_lock((pthread_mutex_t *)mutex->backend) == 0)
    return 0;
  else
    return -1;
d167 1
a167 4
  if (pthread_mutex_trylock((pthread_mutex_t *)mutex->backend) == 0)
    return 0;
  else
    return -1;
d174 1
a174 4
  if (pthread_mutex_unlock((pthread_mutex_t *)mutex->backend) == 0)
    return 0;
  else
    return -1;
d211 2
a212 5
  if (pthread_cond_wait((pthread_cond_t *)condition->backend,
                        (pthread_mutex_t *)mutex->backend) == 0)
    return 0;
  else
    return -1;
d219 1
a219 4
  if (pthread_cond_broadcast((pthread_cond_t *)condition->backend) == 0)
    return 0;
  else
    return -1;
d226 1
a226 4
  if (pthread_cond_signal((pthread_cond_t *)condition->backend) == 0)
    return 0;
  else
    return -1;
d228 2
@

