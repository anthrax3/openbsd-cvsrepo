head	1.2;
access;
symbols
	netbsd_1_1:1.1.1.1
	netbsd_1_1:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	96.03.15.06.44.13;	author etheisen;	state dead;
branches;
next	1.1;

1.1
date	95.10.18.08.38.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.38.13;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Removed for 2.7.1 import.
@
text
@//    This is part of the iostream library, providing input/output for C++.
//    Copyright (C) 1992 Per Bothner.
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Library General Public
//    License as published by the Free Software Foundation; either
//    version 2 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Library General Public License for more details.
//
//    You should have received a copy of the GNU Library General Public
//    License along with this library; if not, write to the Free
//    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "ioprivate.h"
#include "iostream.h"

istream& istream::get(streambuf& sb, char delim /* = '\n' */)
{
    _gcount = 0;
    if (ipfx1()) {
	register streambuf* isb = rdbuf();
	for (;;) {
	    int len = isb->egptr() - isb->gptr();
	    if (len <= 0)
		if (isb->underflow() == EOF)
		    break;
		else
		    len = isb->egptr() - isb->gptr();
	    char *delimp = (char*)memchr((void*)isb->gptr(), delim, len);
	    if (delimp != NULL)
		len = delimp - isb->gptr();
	    int written = sb.sputn(isb->gptr(), len);
	    isb->gbump(written);
	    _gcount += written;
	    if (written != len) {
		set(ios::failbit);
		break;
	    }
	    if (delimp != NULL)
		break;
	}
    }
    return *this;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
