head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.2.0.6
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.4
	OPENBSD_2_4_BASE:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.2
	OPENBSD_2_3_BASE:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.05.26.16.37.13;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.19.47;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.19.47;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.03.03.20.21.27;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@/* 
Copyright (C) 1993 Free Software Foundation

This file is part of the GNU IO Library.  This library is free
software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option)
any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this library; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

As a special exception, if you link this library with files
compiled with a GNU compiler to produce an executable, this does not cause
the resulting executable to be covered by the GNU General Public License.
This exception does not however invalidate any other reasons why
the executable file might be covered by the GNU General Public License. */

/*  written by Per Bothner (bothner@@cygnus.com) */

#define _POSIX_SOURCE
#include "libioP.h"
#if _IO_HAVE_SYS_WAIT
#include <signal.h>
#include <unistd.h>
#ifdef __STDC__
#include <stdlib.h>
#endif
#include <sys/types.h>
#include <sys/wait.h>

#ifndef _IO_fork
#define _IO_fork vfork /* defined in libiberty, if needed */
_IO_pid_t _IO_fork();
#endif

#endif /* _IO_HAVE_SYS_WAIT */

#ifndef _IO_pipe
#define _IO_pipe pipe
extern int _IO_pipe();
#endif

#ifndef _IO_dup2
#define _IO_dup2 dup2
extern int _IO_dup2();
#endif

#ifndef _IO_waitpid
#define _IO_waitpid waitpid
#endif

#ifndef _IO_execl
#define _IO_execl execl
#endif
#ifndef _IO__exit
#define _IO__exit _exit
#endif

struct _IO_proc_file
{
  struct _IO_FILE_plus file;
  /* Following fields must match those in class procbuf (procbuf.h) */
  _IO_pid_t pid;
  struct _IO_proc_file *next;
};
typedef struct _IO_proc_file _IO_proc_file;

static struct _IO_proc_file *proc_file_chain = NULL;

_IO_FILE *
DEFUN(_IO_proc_open, (fp, command, mode),
      _IO_FILE* fp AND const char *command AND const char *mode)
{
#if _IO_HAVE_SYS_WAIT
  int read_or_write;
  int pipe_fds[2];
  int parent_end, child_end;
  _IO_pid_t child_pid;
  if (_IO_file_is_open(fp))
    return NULL;
  if (_IO_pipe(pipe_fds) < 0)
    return NULL;
  if (mode[0] == 'r')
    {
      parent_end = pipe_fds[0];
      child_end = pipe_fds[1];
      read_or_write = _IO_NO_WRITES;
    }
  else
    {
      parent_end = pipe_fds[1];
      child_end = pipe_fds[0];
      read_or_write = _IO_NO_READS;
    }
  ((_IO_proc_file*)fp)->pid = child_pid = _IO_fork();
  if (child_pid == 0)
    {
      int child_std_end = mode[0] == 'r' ? 1 : 0;
      _IO_close(parent_end);
      if (child_end != child_std_end)
	{
	  _IO_dup2(child_end, child_std_end);
	  _IO_close(child_end);
	}
      /* Posix.2:  "popen() shall ensure that any streams from previous
         popen() calls that remain open in the parent process are closed
	 in the new child process." */
      while (proc_file_chain)
	{
	  _IO_close (_IO_fileno ((_IO_FILE *) proc_file_chain));
	  proc_file_chain = proc_file_chain->next;
	}

      _IO_execl("/bin/sh", "sh", "-c", command, NULL);
      _IO__exit(127);
    }
  _IO_close(child_end);
  if (child_pid < 0)
    {
      _IO_close(parent_end);
      return NULL;
    }
  _IO_fileno(fp) = parent_end;

  /* Link into proc_file_chain. */
  ((_IO_proc_file*)fp)->next = proc_file_chain;
  proc_file_chain = (_IO_proc_file*)fp;

  _IO_mask_flags (fp, read_or_write, _IO_NO_READS|_IO_NO_WRITES);
  return fp;
#else /* !_IO_HAVE_SYS_WAIT */
  return NULL;
#endif
}

_IO_FILE *
DEFUN(_IO_popen, (command, mode),
      const char *command AND const char *mode)
{
  _IO_proc_file *fpx = (_IO_proc_file*)malloc(sizeof(_IO_proc_file));
  _IO_FILE *fp = (_IO_FILE*)fpx;
  if (fp == NULL)
    return NULL;
  _IO_init(fp, 0);
  _IO_JUMPS(fp) = &_IO_proc_jumps;
  _IO_file_init(fp);
#if  !_IO_UNIFIED_JUMPTABLES
  ((struct _IO_FILE_plus*)fp)->vtable = NULL;
#endif
  if (_IO_proc_open (fp, command, mode) != NULL)
    return fp;
  free (fpx);
  return NULL;
}

int
DEFUN(_IO_proc_close, (fp),
      _IO_FILE *fp)
{
  /* This is not name-space clean. FIXME! */
#if _IO_HAVE_SYS_WAIT
  int wstatus;
  _IO_proc_file **ptr = &proc_file_chain;
  _IO_pid_t wait_pid;
  int status = -1;
  
  /* Unlink from proc_file_chain. */
  for ( ; *ptr != NULL; ptr = &(*ptr)->next)
    {
      if (*ptr == (_IO_proc_file*)fp)
	{
	  *ptr = (*ptr)->next;
	  status = 0;
	  break;
	}
    }

  if (status < 0 || _IO_close(_IO_fileno(fp)) < 0)
    return -1;
  /* POSIX.2 Rationale:  "Some historical implementations either block
     or ignore the signals SIGINT, SIGQUIT, and SIGHUP while waiting
     for the child process to terminate.  Since this behavior is not
     described in POSIX.2, such implementations are not conforming." */
  do
    {
      wait_pid = _IO_waitpid (((_IO_proc_file*)fp)->pid, &wstatus, 0);
    } while (wait_pid == -1 && errno == EINTR);
  if (wait_pid == -1)
    return -1;
  return wstatus;
#else /* !_IO_HAVE_SYS_WAIT */
  return -1;
#endif
}

struct _IO_jump_t _IO_proc_jumps = {
  JUMP_INIT_DUMMY,
  JUMP_INIT(finish, _IO_file_finish),
  JUMP_INIT(overflow, _IO_file_overflow),
  JUMP_INIT(underflow, _IO_file_underflow),
  JUMP_INIT(uflow, _IO_default_uflow),
  JUMP_INIT(pbackfail, _IO_default_pbackfail),
  JUMP_INIT(xsputn, _IO_file_xsputn),
  JUMP_INIT(xsgetn, _IO_default_xsgetn),
  JUMP_INIT(seekoff, _IO_file_seekoff),
  JUMP_INIT(seekpos, _IO_default_seekpos),
  JUMP_INIT(setbuf, _IO_file_setbuf),
  JUMP_INIT(sync, _IO_file_sync),
  JUMP_INIT(doallocate, _IO_file_doallocate),
  JUMP_INIT(read, _IO_file_read),
  JUMP_INIT(write, _IO_file_write),
  JUMP_INIT(seek, _IO_file_seek),
  JUMP_INIT(close, _IO_proc_close),
  JUMP_INIT(stat, _IO_file_stat)
};
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@


1.1.1.2
log
@libg++ 2.8.0 baseline import
@
text
@d1 2
a2 25
/* Copyright (C) 1993, 1997 Free Software Foundation, Inc.
   This file is part of the GNU IO Library.
   Written by Per Bothner <bothner@@cygnus.com>.

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2, or (at
   your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this library; see the file COPYING.  If not, write to
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
   MA 02111-1307, USA.

   As a special exception, if you link this library with files
   compiled with a GNU compiler to produce an executable, this does
   not cause the resulting executable to be covered by the GNU General
   Public License.  This exception does not however invalidate any
   other reasons why the executable file might be covered by the GNU
   General Public License.  */
d4 24
a27 3
#ifndef _POSIX_SOURCE
# define _POSIX_SOURCE
#endif
a34 3
#ifdef _LIBC
# include <unistd.h>
#endif
d40 1
a40 1
extern _IO_pid_t _IO_fork __P ((void));
d47 1
a47 1
extern int _IO_pipe __P ((int des[2]));
d52 1
a52 1
extern int _IO_dup2 __P ((int fd, int fd2));
a65 4
#ifndef _IO_close
#define _IO_close close
#endif

d78 2
a79 4
_IO_proc_open (fp, command, mode)
     _IO_FILE *fp;
     const char *command;
     const char *mode;
d82 1
a82 2
  volatile int read_or_write;
  volatile int parent_end, child_end;
d84 1
d86 1
a86 1
  if (_IO_file_is_open (fp))
d88 1
a88 1
  if (_IO_pipe (pipe_fds) < 0)
d102 1
a102 1
  ((_IO_proc_file *) fp)->pid = child_pid = _IO_fork ();
d106 1
a106 1
      _IO_close (parent_end);
d109 2
a110 2
	  _IO_dup2 (child_end, child_std_end);
	  _IO_close (child_end);
d112 1
a112 1
      /* POSIX.2:  "popen() shall ensure that any streams from previous
d121 2
a122 2
      _IO_execl ("/bin/sh", "sh", "-c", command, (char *) 0);
      _IO__exit (127);
d124 1
a124 1
  _IO_close (child_end);
d127 1
a127 1
      _IO_close (parent_end);
d130 1
a130 1
  _IO_fileno (fp) = parent_end;
d133 2
a134 2
  ((_IO_proc_file *) fp)->next = proc_file_chain;
  proc_file_chain = (_IO_proc_file *) fp;
d144 2
a145 3
_IO_popen (command, mode)
     const char *command;
     const char *mode;
d147 3
a149 11
  struct locked_FILE
  {
    struct _IO_proc_file fpx;
#ifdef _IO_MTSAFE_IO
    _IO_lock_t lock;
#endif
  } *new_f;
  _IO_FILE *fp;

  new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));
  if (new_f == NULL)
d151 3
a153 7
#ifdef _IO_MTSAFE_IO
  new_f->fpx.file.file._lock = &new_f->lock;
#endif
  fp = (_IO_FILE*)&new_f->fpx;
  _IO_init (fp, 0);
  _IO_JUMPS (fp) = &_IO_proc_jumps;
  _IO_file_init (fp);
d155 1
a155 1
  ((struct _IO_FILE_plus *) fp)->vtable = NULL;
d159 1
a159 1
  free (new_f);
a162 4
#ifdef strong_alias
strong_alias (_IO_popen, popen);
#endif

d164 2
a165 2
_IO_proc_close (fp)
     _IO_FILE *fp;
d173 1
a173 1

d177 1
a177 1
      if (*ptr == (_IO_proc_file *) fp)
d185 1
a185 1
  if (status < 0 || _IO_close (_IO_fileno(fp)) < 0)
d193 2
a194 3
      wait_pid = _IO_waitpid (((_IO_proc_file *) fp)->pid, &wstatus, 0);
    }
  while (wait_pid == -1 && errno == EINTR);
@

