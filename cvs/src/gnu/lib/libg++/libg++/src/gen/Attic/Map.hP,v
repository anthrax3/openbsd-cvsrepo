head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.35.37;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.18.51;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.18.51;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@@rocky.oswego.edu)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T><C>Map_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T><C>Map_h 1

#include <Pix.h>
#include "<T>.defs.h"

class <T><C>Map
{
protected:
  int                   count;
  <C>                   def;

public:
                        <T><C>Map(<C&> dflt);
  inline virtual              ~<T><C>Map();

  int                   length() const; // current number of items
  int                   empty() const;

  virtual int           contains(<T&> key);      // is key mapped?

  virtual void          clear();                 // delete all items

  virtual <C>&          operator [] (<T&> key) = 0; // access contents by key

  virtual void          del(<T&> key) = 0;       // delete entry

  virtual Pix           first() = 0;             // Pix of first item or 0
  virtual void          next(Pix& i) = 0;        // advance to next or 0
  virtual <T>&          key(Pix i) = 0;          // access key at i
  virtual <C>&          contents(Pix i) = 0;     // access contents at i

  virtual int           owns(Pix i);             // is i a valid Pix  ?
  virtual Pix           seek(<T&> key);          // Pix of key

  <C>&                  dflt();                  // access default val

  void                  error(const char* msg);
  virtual int           OK() = 0;                // rep invariant
};


inline <T><C>Map::~<T><C>Map() {}

inline int <T><C>Map::length() const
{
  return count;
}

inline int <T><C>Map::empty() const
{
  return count == 0;
}

inline <C>& <T><C>Map::dflt()
{
  return def;
}

inline <T><C>Map::<T><C>Map(<C&> dflt) :def(dflt)
{
  count = 0;
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

