head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.35.54;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.19.00;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.19.00;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@@rocky.oswego.edu)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/

#ifdef __GNUG__
#pragma implementation
#endif
#include <stream.h>
#include "<T>.VStack.h"

// error handling


<T>VStack::<T>VStack(<T>VStack& b)
:size(b.size), ptr(b.ptr), s(new <T> [b.size])
{
  for (int i = 0; i < ptr; ++i) s[i] = b.s[i];
}

void <T>VStack::operator = (<T>VStack& b)
{
  if (&b == this) return;
  if (size < b.ptr)
  {
    delete [] s;
    s = new <T> [b.size];
    size = b.size;
  }
  ptr = b.ptr;
  for (int i = 0; i < ptr; ++i) s[i] = b.s[i];
}


void <T>VStack::resize(int newsz)
{
  if (newsz < ptr) error("resize: new size too small");
  <T>* news = new <T> [newsz];
  for (int i = 0; i < ptr; ++i) news[i] = s[i];
  delete [] s;
  s = news;
  size = newsz;
}

int <T>VStack::OK()
{
  int v = s != 0;               // have space
  v &= size >= 0;               // a legal size
  v &= ptr <= size;             // ptr within bounds
  v &= ptr >= 0;
  if (!v) error("invariant failure");
  return v;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

