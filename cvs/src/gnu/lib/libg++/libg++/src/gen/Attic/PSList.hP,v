head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.35.39;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.18.53;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.18.53;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@/*  : Light weight list: This will simply reuse code from a VoidP List, which 
was genclassed from the SLList libg++ class. The classes generated from this file
will all be derived classes from class VoidSLList or intSLList. Note that class SLList does not 
offer all the functionality of List classes, such as sharing of sub-lists.
However, no additional code is needed at all and no .cc file is generated. So it costs nothing
to use these type-safe lists. Only member functions needing type casting are re-defined  */


#ifndef _<T>SList_h
#define _<T>SList_h 1

#include "VoidP.SLList.h"
#include "<T>.defs.h"

class <T>SList : public VoidPSLList
{
public:
  <T>SList() {}
  <T>SList(<T>SList& a) : (a) {}
  ~<T>SList() {}

  <T>SList& operator = (<T>SList& a) {
    return (<T>SList&) VoidPSLList::operator= (a); }

  <T>& operator () (Pix p) { return (<T>&) (VoidPSLList::operator() (p)); }
  <T>& front() { return (<T>&) VoidPSLList::front(); }
  <T>& rear()  { return (<T>&) VoidPSLList::rear(); }
  <T> remove_front() { return (<T>) VoidPSLList::remove_front(); }

};

#endif /* conditional include */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

