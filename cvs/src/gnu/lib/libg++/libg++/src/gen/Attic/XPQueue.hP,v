head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.35.56;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.19.02;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.19.02;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@@rocky.oswego.edu)
    based on code by Marc Shapiro (shapiro@@sor.inria.fr)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T>XPQueue_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T>XPQueue_h

#include "<T>.XPlex.h"
#include "<T>.Queue.h"

class <T>XPQueue : public <T>Queue
{
protected:
  <T>XPlex     p;

public:
               <T>XPQueue(int chunksize = DEFAULT_INITIAL_CAPACITY);
               <T>XPQueue(const <T>XPQueue& q);
  inline              ~<T>XPQueue();

  void          operator = (const <T>XPQueue&);

  inline void          enq(<T&> item);
  inline <T>           deq();
  inline <T>&          front();
  inline void          del_front();

  inline void          clear();
  inline int           empty();
  inline int           full();
  inline int           length();
               
  inline int           OK();
};

inline <T>XPQueue::<T>XPQueue(int chunksize) 
     : p(chunksize) {}
inline <T>XPQueue::<T>XPQueue(const <T>XPQueue& q) : p(q.p) {}

inline <T>XPQueue::~<T>XPQueue() {}

inline void <T>XPQueue::enq(<T&>item)
{
  p.add_high(item);
}

inline <T> <T>XPQueue::deq()
{
  <T> res = p.low_element();
  p.del_low();
  return res;
}

inline <T>& <T>XPQueue::front()
{
  return p.low_element();
}


inline void <T>XPQueue::del_front()
{
  p.del_low();
}

inline void <T>XPQueue::operator =(const <T>XPQueue& s)
{
  p.operator = (s.p);
}

inline int <T>XPQueue::empty()
{
  return p.empty();
}

inline int <T>XPQueue::full()
{
  return p.full();
}

inline int <T>XPQueue::length()
{
  return p.length();
}

inline int <T>XPQueue::OK()
{
  return p.OK();
}

inline void <T>XPQueue::clear()
{
  p.clear();
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

