head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.35.41;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.18.54;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.18.54;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@@rocky.oswego.edu) 
    ranking code from Paul Anderson (paul%lfcs.ed.ac.uk)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T><C>RAVLMap_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T><C>RAVLMap_h 1

#include "<T>.<C>.Map.h"

struct <T><C>RAVLNode
{
  <T><C>RAVLNode*      lt;
  <T><C>RAVLNode*      rt;
  <T>                 item;
  <C>                 cont;
  int                 rank;
  char                stat;
                      <T><C>RAVLNode(<T&> h, <C&> c, 
                           <T><C>RAVLNode* l=0, <T><C>RAVLNode* r=0, int k=1);
                      ~<T><C>RAVLNode();
};

inline <T><C>RAVLNode::<T><C>RAVLNode(<T&> h, <C&> c, 
                           <T><C>RAVLNode* l, <T><C>RAVLNode* r, int k)
     :lt(l), rt(r), item(h), cont(c), rank(k), stat(0) {}

inline <T><C>RAVLNode::~<T><C>RAVLNode() {}

typedef <T><C>RAVLNode* <T><C>RAVLNodePtr;


class <T><C>RAVLMap : public <T><C>Map
{
protected:
  <T><C>RAVLNode*   root;

  <T><C>RAVLNode*   leftmost();
  <T><C>RAVLNode*   rightmost();
  <T><C>RAVLNode*   pred(<T><C>RAVLNode* t);
  <T><C>RAVLNode*   succ(<T><C>RAVLNode* t);
  void            _kill(<T><C>RAVLNode* t);
  void            _add(<T><C>RAVLNode*& t);
  void            _del(<T><C>RAVLNode* p, <T><C>RAVLNode*& t);

public:
                <T><C>RAVLMap(<C&> dflt);
                <T><C>RAVLMap(<T><C>RAVLMap& a);
  inline               ~<T><C>RAVLMap();

  <C>&          operator [] (<T&> key);

  void          del(<T&> key);

  inline Pix           first();
  inline void          next(Pix& i);
  inline <T>&          key(Pix i);
  inline <C>&          contents(Pix i);

  Pix           seek(<T&> key);
  inline int           contains(<T&> key);

  Pix           ranktoPix(int i);
  int           rankof(<T&> key);

  inline void          clear(); 

  Pix           last();
  void          prev(Pix& i);

  int           OK();
};

inline <T><C>RAVLMap::~<T><C>RAVLMap()
{
  _kill(root);
}

inline <T><C>RAVLMap::<T><C>RAVLMap(<C&> dflt) :<T><C>Map(dflt)
{
  root = 0;
}


inline Pix <T><C>RAVLMap::first()
{
  return Pix(leftmost());
}

inline Pix <T><C>RAVLMap::last()
{
  return Pix(rightmost());
}

inline void <T><C>RAVLMap::next(Pix& i)
{
  if (i != 0) i = Pix(succ((<T><C>RAVLNode*)i));
}

inline void <T><C>RAVLMap::prev(Pix& i)
{
  if (i != 0) i = Pix(pred((<T><C>RAVLNode*)i));
}

inline <T>& <T><C>RAVLMap::key(Pix i)
{
  if (i == 0) error("null Pix");
  return ((<T><C>RAVLNode*)i)->item;
}

inline <C>& <T><C>RAVLMap::contents(Pix i)
{
  if (i == 0) error("null Pix");
  return ((<T><C>RAVLNode*)i)->cont;
}

inline void <T><C>RAVLMap::clear()
{
  _kill(root);
  count = 0;
  root = 0;
}

inline int <T><C>RAVLMap::contains(<T&> key)
{
  return seek(key) != 0;
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

