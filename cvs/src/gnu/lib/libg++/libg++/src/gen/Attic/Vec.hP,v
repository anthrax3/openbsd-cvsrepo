head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.35.54;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.19.01;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.19.01;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@@rocky.oswego.edu)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T>Vec_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T>Vec_h 1

#include <builtin.h>
#include "<T>.defs.h"

#ifndef _<T>_typedefs
#define _<T>_typedefs 1
typedef void (*<T>Procedure)(<T&>);
typedef <T>  (*<T>Mapper)(<T&>);
typedef <T>  (*<T>Combiner)(<T&>, <T&>);
typedef int  (*<T>Predicate)(<T&>);
typedef int  (*<T>Comparator)(<T&>, <T&>);
#endif


class <T>Vec 
{
protected:      
  int                   len;
  <T>                   *s;                  

                        <T>Vec(int l, <T>* d);
public:
                        <T>Vec ();
                        <T>Vec (int l);
                        <T>Vec (int l, <T&> fill_value);
                        <T>Vec (const <T>Vec&);
                        ~<T>Vec ();

  <T>Vec &              operator = (const <T>Vec & a);
  <T>Vec                at(int from = 0, int n = -1);

  int                   capacity() const;
  void                  resize(int newlen);                        

  <T>&                  operator [] (int n);
  <T>&                  elem(int n);

  friend <T>Vec         concat(<T>Vec & a, <T>Vec & b);
  friend <T>Vec         map(<T>Mapper f, <T>Vec & a);
  friend <T>Vec         merge(<T>Vec & a, <T>Vec & b, <T>Comparator f);
  friend <T>Vec         combine(<T>Combiner f, <T>Vec & a, <T>Vec & b);
  friend <T>Vec         reverse(<T>Vec & a);

  void                  reverse();
  void                  sort(<T>Comparator f);
  void                  fill(<T&> val, int from = 0, int n = -1);

  void                  apply(<T>Procedure f);
  <T>                   reduce(<T>Combiner f, <T&> base);
  int                   index(<T&> targ);

  friend int            operator == (<T>Vec& a, <T>Vec& b);
  friend int            operator != (<T>Vec& a, <T>Vec& b);

  void                  error(const char* msg);
  void                  range_error();
};

extern void default_<T>Vec_error_handler(const char*);
extern one_arg_error_handler_t <T>Vec_error_handler;

extern one_arg_error_handler_t 
        set_<T>Vec_error_handler(one_arg_error_handler_t f);


inline <T>Vec::<T>Vec()
{
  len = 0; s = 0;
}

inline <T>Vec::<T>Vec(int l)
{
  s = new <T> [len = l];
}


inline <T>Vec::<T>Vec(int l, <T>* d) :len(l), s(d) {}


inline <T>Vec::~<T>Vec()
{
  delete [] s;
}


inline <T>& <T>Vec::operator [] (int n)
{
  if ((unsigned)n >= (unsigned)len)
    range_error();
  return s[n];
}

inline <T>& <T>Vec::elem(int n)
{
  return s[n];
}


inline int <T>Vec::capacity() const
{
  return len;
}



inline int operator != (<T>Vec& a, <T>Vec& b)
{
  return !(a == b);
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

