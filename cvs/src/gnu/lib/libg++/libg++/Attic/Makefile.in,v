head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.2.0.6
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.4
	OPENBSD_2_4_BASE:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.2
	OPENBSD_2_3_BASE:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.34.00;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.17.41;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.17.41;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.03.03.20.17.47;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@# Makefile for GNU C++ class library (libg++)
#   Copyright (C) 1989, 1992, 1993 Free Software Foundation, Inc.
#   written by Doug Lea (dl@@rocky.oswego.edu)

#This file is part of GNU libg++.

#GNU libg++ is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 1, or (at your option)
#any later version.

#GNU libg++ is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU libg++; see the file COPYING.  If not, write to the Free
#Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

srcdir = .

# We specify exactly what we want to pass down; don't let GNU make
# 3.63 overload the command line.
MAKEOVERRIDES=

###**######################################################################
#
# Directories, paths, compilation flags and program names.
#
# If a macro needs to have a different value, then change it in the
# site/architecture specific makefile in the directory config !
#
# This file contains the documentation for the macros and possible values.
# Don't remove them even, if they are only comments !

VERSION = 2.7.1
LIBG++_DIST_VERSION = $(VERSION)

# ------- System-dependent defines

# g++ so specific flags
OSFLAG=

# ld or ld++ os specific libraries
#OSLIBS =

# Comment out the next line to disable incremental linking test
# (this test NOT included in 1.39.0, so don't re-enable) ??? H.S.
#TEST0=test0
#TEST0=

# targets for test-install
TEST_INSTALL 		= test-90S-then-clean # test-90D-then-clean
VERIFY_GXX_INSTALLATION = foo_main # dfoo_main


# You can override gperf to not build it at all
GPERF = gperf
NON_IO_SUBDIRS	=  genclass src $(GPERF) utils tests etc test-install
SUBDIRS	=  $(NON_IO_SUBDIRS)
ALL_SUBDIRS = $(NON_IO_SUBDIRS) old-stream no-stream

UTILS   =  # utils

# C++ compiler to use when testing that installation has succeeded.
INSTALLED_CXX=$(bindir)/gcc

ARLIB   = libg++.a
SHLIB   = libg++.so.$(VERSION)
SHARLIB = libg++-sh.a
SHLINK  = libg++.so
MSHLINK = foo
SHFLAGS =
SHCURSES=
SHDEPS  = -L../libstdc++ -lstdc++ -lm $(SHCURSES)

BUILD_LIBS = $(ARLIB)

RX_OBJ  = $(MULTITOP)/../librx/rx.o

#### package, host, target, and site dependent Makefile fragments come in here.
##

tooldir = $(exec_prefix)/$(target)
INSTALLDIR = $(libdir)

###**######################################################################
#
# compilation actions

.PHONY: rest-in-parallel in-src in-io
rest-in-parallel: .stmp-genclass .stmp-tests .stmp-etc .stmp-gperf .stmp-utils

libs: $(BUILD_LIBS)

# FIXME: Need to multilib librx.
list: src/libgxx.list $(RX_OBJ)
	-rm -f tlist
	touch tlist
	for f in `cat src/libgxx.list`; do \
	  echo "src/$$f" >> tlist ; \
	done
	echo "$(RX_OBJ)" >> tlist
	mv tlist list

piclist: list
	-rm -f tlist
	if [ -z "$(SHCURSES)" ]; then \
	  sed 's,src/CursesW.o,,' list > tlist; \
	else \
	  cp list tlist; \
	fi
	[ -z "$(PICFLAG)" ] || \
	  (sed 's,\([0-9A-Za-z_]*\.o\),pic/\1,g' tlist > tlist2 ; \
	  mv tlist2 tlist)
	mv tlist piclist

$(ARLIB): list
	-rm -f t$(ARLIB)
	$(AR) $(AR_FLAGS) t$(ARLIB) `cat list`
	mv t$(ARLIB) $(ARLIB)
	$(RANLIB) $(ARLIB)

$(SHLIB): piclist $(MULTITOP)/../libstdc++/piclist
	$(CXX) $(SHFLAGS) -shared -o $(SHLIB) `cat piclist` $(SHDEPS)

$(SHARLIB): $(SHLIB)
	-rm -f t$(SHARLIB)
	$(AR) $(AR_FLAGS) t$(SHARLIB) $(SHLIB)
	mv t$(SHARLIB) $(SHARLIB)
	$(RANLIB) $(SHARLIB)

$(SHLINK):
	ln -sf $(SHLIB) $(SHLINK)

$(MSHLINK):
	ln -sf $(SHLIB) $(MSHLINK)

src/libgxx.list: in-src
in-src:
	@@rootme=`pwd`/ ; export rootme ; cd src ; \
		$(MAKE) $(FLAGS_TO_PASS) libgxx.list

$(MULTITOP)/../librx/rx.o: $(srcdir)/../librx/rx.c
	rootme=`pwd`/ ; export rootme ; cd $(MULTITOP)/../librx; \
		$(MAKE) $(FLAGS_TO_PASS) rx.o

.PHONY: installcheck
installcheck: check

.stmp-genclass: $(BUILD_LIBS)
	@@rootme=`pwd`/ ; export rootme ; cd genclass ; \
	  $(MAKE) $(FLAGS_TO_PASS) "gxx_includedir=$(gxx_includedir)"
	touch $@@

.stmp-tests: $(BUILD_LIBS)
	@@if [ -f tests/Makefile ]; then \
	   rootme=`pwd`/ ; export rootme ; cd tests ; \
	      $(MAKE) $(FLAGS_TO_PASS); \
	 else true; fi
	touch $@@

.stmp-etc: $(BUILD_LIBS)
	@@rootme=`pwd`/ ; export rootme ; cd etc ; \
	  $(MAKE) $(FLAGS_TO_PASS)
	touch $@@

.stmp-gperf: $(BUILD_LIBS)
	@@if [ "x$(GPERF)" != "x" ]; then \
	   rootme=`pwd`/ ; export rootme ; cd $(GPERF) ; \
	      $(MAKE) $(FLAGS_TO_PASS); \
	 else true; fi
	touch $@@

.stmp-utils: $(BUILD_LIBS)
	@@if [ "x$(UTILS)" != "x" ]; then \
	   rootme=`pwd`/ ; export rootme ; cd $(UTILS) ; \
	     $(MAKE) $(FLAGS_TO_PASS); \
	 else true; fi
	touch $@@

#
#
# Installation
#

.PHONY: install
install:
	@@if [ -f $(gxx_includedir)/unistd.h ] ; then echo; \
	  echo '*** You seem to have files in $(gxx_includedir)/g++-include'; \
	  echo '*** left over from an old release of libg++.  These must be removed.'; \
	  echo '*** Please see $(srcdir)/README for more information.'; \
	  echo; \
	else \
	  true; \
	fi
	for FILE in $(BUILD_LIBS) ; do \
	  rm -f $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	  if [ $$FILE = $(SHLINK) ] || [ $$FILE = $(MSHLINK) ]; then \
	    ln -sf $(INSTALLDIR)$(MULTISUBDIR)/$(SHLIB) $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	  elif [ $$FILE = $(SHLIB) ]; then \
	    $(INSTALL_PROGRAM) $$FILE $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	    : On the HP, turning off write access improves performance ; \
	    chmod a-w $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	  else \
	    $(INSTALL_DATA) $$FILE $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	    $(RANLIB) $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	    chmod a-x $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	  fi ; \
	done
	@@for D in src genclass $(UTILS) ; do \
		if [ -d $$D ] ; then \
			(rootme=`pwd`/ ; export rootme ; cd $$D;\
			  $(MAKE) $(FLAGS_TO_PASS) "gxx_includedir=$(gxx_includedir)" install) ; \
		else true ; \
		fi ; \
	done
	if [ "x$(GPERF)" != "x" ]; then \
	  rootme=`pwd`/ ; export rootme ; cd gperf ;\
	    $(MAKE) $(FLAGS_TO_PASS) install; \
	else true; fi
	@@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=install

installcheck:
	if [ "x$(TEST_INSTALL)" != "x" ]; then \
	  cd test-install; $(MAKE) $(TEST_INSTALL) \
	      CXX=$(INSTALLED_CXX) "CXXFLAGS=$(CXXFLAGS)" \
	      COMPILE_FLAGS="" LIBS=-lg++; \
	else true; fi

DIST_NAME = libg++-$(LIBG++_DIST_VERSION)

$(DIST_NAME).tar.gz: dist

# Making a dist:
# cvs rtag libgxx-x-yy libg++
# cvs co -r libgxx-x-yy libg++
# Sanitize
# cd {HERE}/..
# make -f Makefile.in libg++.tar.gz

diststuff: info

force:
.PHONY: $(SUBDIRS) dist
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@


1.1.1.2
log
@libg++ 2.8.0 baseline import
@
text
@d37 2
a38 2
VERSION = 2.8.0
LIBG++_DIST_VERSION = 2.8.0b4
d73 1
a73 1
MSHLINK = libg++.so.`echo $(VERSION) | sed 's/\([0-9][.][0-9]\).*/\1/'`
d75 2
a76 1
SHDEPS  = -L../libstdc++ -lstdc++ -lm
d80 1
a80 3
RX_OBJ  = ../librx/rx.o
RX_H=rx.h
_G_CONFIG_H=../../libio/_G_config.h
d92 1
a92 1
.PHONY: rest-in-parallel
d108 3
a110 3
	-rm -f piclist
	if [ -z "$(PICFLAG)" ]; then \
	  cp list piclist; \
d112 1
a112 1
	  sed 's,\([0-9A-Za-z_]*\.o\),pic/\1,g' list > piclist ; \
d114 4
d125 2
a126 2
$(SHLIB): piclist ../libstdc++/piclist
	$(CC) $(SHFLAGS) -shared -o $(SHLIB) `cat piclist` $(SHDEPS)
d135 1
a135 1
	ln -s -f $(SHLIB) $(SHLINK)
d137 2
a138 2
mshlink:
	@@$(MAKE) $(MSHLINK) "SHLINK=$(MSHLINK)"
d140 2
a141 1
src/libgxx.list: force
d145 2
a146 2
../librx/rx.o: $(srcdir)/../librx/rx.c
	rootme=`pwd`/ ; export rootme ; cd ../librx; \
d154 1
a154 1
	  $(MAKE) $(FLAGS_TO_PASS) "gxx_include_dir=$(gxx_include_dir)"
d190 2
a191 2
	@@if [ -f $(gxx_include_dir)/unistd.h ] ; then echo; \
	  echo '*** You seem to have files in $(gxx_include_dir)/g++-include'; \
a197 1
	rootme=`pwd`/ ; export rootme ; \
d200 2
a201 7
	  if [ $$FILE = $(SHLINK) ]; then \
	    ln -s -f $(SHLIB) $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	  elif [ $$FILE = mshlink ]; then \
	    for FILE in $(MSHLINK) ; do \
	      rm -f $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	      ln -s -f $(SHLIB) $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
	    done; \
d204 2
a205 2
	    : On the HP, shared libraries must be mode 555. ;\
	    chmod 555 $(INSTALLDIR)$(MULTISUBDIR)/$$FILE ; \
d215 1
a215 1
			  $(MAKE) $(FLAGS_TO_PASS) "gxx_include_dir=$(gxx_include_dir)" install) ; \
d223 1
a223 2
	@@rootme=`pwd`/ ; export rootme ; \
	$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=install
d237 3
d243 1
a243 1
diststuff: info g++FAQ.txt
d246 1
a246 29
.PHONY: $(SUBDIRS) dist force

g++FAQ.info:	g++FAQ.texi
	makeinfo --no-split g++FAQ.texi

# Preprocess the texi file so that the final document will have
# hyperlinks.
# It would be nice if texi2html could do something like this itself.

# Assumption 1: the FAQ puts all http: and ftp: links in a @@file{...}.
# Assumption 2: newsgroups are like @@file{comp.foo}
# Assumption 3: email addresses match the regexp shown.

g++FAQ.html:	g++FAQ.texi
	mkdir work
	sed -e 's?@@file{\([fth]*p://[^}]*\)}?@@strong{<A HREF="\1">\1</A>}?' \
	    -e 's?@@file{\(comp\.[-a-z+.]*\)}?<A HREF="news:\1">\1</A>?' \
	    -e 's?@@file{\(gnu\.[-a-z+.]*\)}?<A HREF="news:\1">\1</A>?' \
	    -e 's?\([.+a-zA-Z0-9-]*@@@@[.a-zA-Z0-9-]*[a-zA-Z0-9]\)?<A HREF="mailto:\1">\1</A>?' \
	    g++FAQ.texi > work/g++FAQ.texi
	cd work; texi2html g++FAQ.texi
	mv work/*.html .
	rm -r work

# Make plain-text form.

g++FAQ.txt:	g++FAQ.texi
	makeinfo --no-split --no-headers -o - g++FAQ.texi |\
		sed '/^Concept Index/,$$d' > g++FAQ.txt
@

