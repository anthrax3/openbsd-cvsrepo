head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.2.0.6
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.4
	OPENBSD_2_4_BASE:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.2
	OPENBSD_2_3_BASE:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.34.01;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.17.42;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.17.42;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.03.03.20.17.37;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@NOTES ON BUILDING LIBG++ AS A SHARED LIBRARY

A shared library version of libg++-2.7.0 can be built using gcc-2.7.0 on
the following platforms:

Linux (using the ELF toolchain)
Sparc running SunOS 4.x
Alpha running OSF/1
SGI running IRIX 5.x
HPPA running HPUX 9.x
All SVR4 targets (tested on Sparc Solaris and i486 UnixWare)

To build a shared version of libg++ on one of these platforms, pass the
--enable-shared flag to configure, and be sure to compile with gcc.

In order to run a program built with your new shared library (including
gperf and the tests), you may have to set the environment variable
LD_LIBRARY_PATH to include the directory where it lives.

If you are using an SVR4 system other than the ones mentioned above, please
try running make check and let me (jason@@cygnus.com) know whether or not it
works.

Discussion:
----------

Many shared library implementations have an idiosyncracy [bug ???] which
requires anything that is declared in a shared library to be defined even
if it isn't used.  CursesW.o declares functions that are defined in
libcurses (and libtermcap under SunOS).  If these libraries do not exist as
shared libraries (they do under Linux, OSF/1, IRIX, they do not on the
others) and CursesW.o is incorporated into the ".so" file, these two
libraries must be added to the link statement even when the CursesWindow
class is not being used.  This situation can be alleviated by not including
CursesW.o in the .so file; just edit the 'piclist' file in the libg++ build
directory, remove CursesW.o, and run 'make' again.

Under SunOS, you can add CursesW.o to a libg++.sa.2.7 file so that it will
still be included by -lg++; on SVR4 platforms, you will have to put it in
a separate library in order to access it.

In addition, libstdc++.so and libg++.so contain a number of classes which
use the math library.  Consequently, if a shared libm does not exist (it
does under Linux, OSF/1, IRIX and Solaris, but not the others), either the
math library must to added to the link command or you must compile with a
flag that tells the linker to ignore unresolved references
(-Wl,-assert,nodefinitions for SunOS, -Wl,-z,nodefs for SVR4).


Jason Merrill (jason@@cygnus.com)
Thanks to Dr. Joseph E. Sacco (jsacco@@ssl.com) for the original version of
this note.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@


1.1.1.2
log
@libg++ 2.8.0 baseline import
@
text
@d3 1
a3 1
A shared library version of libg++-2.8.x can be built using gcc-2.8.x on
d9 2
a10 2
SGI running IRIX 5.x and up
HPPA running HPUX 9.x and up
a11 1
RS/6000 or PowerPC running AIX (requires GNU ld 2.7 or newer)
d20 4
d29 18
a46 5
if it isn't used.  libstdc++.so and libg++.so contain a number of classes
which use the math library.  Consequently, if a shared libm does not exist
(it does under Linux, OSF/1, IRIX, HPUX and Solaris, but not the others),
either the math library must to added to the link command or you must
compile with a flag that tells the linker to ignore unresolved references
a48 2
The `g++' program now adds -lm by default, so you may not have to worry
about this.
@

