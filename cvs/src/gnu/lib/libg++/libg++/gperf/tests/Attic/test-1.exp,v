head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.34.49;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.18.17;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.18.17;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@/* C code produced by gperf version 2.5 (GNU C++ version) */
/* Command-line: ../src/gperf -p -j1 -g -o -t -N is_reserved_word -k1,3,$  */
/* Command-line: gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ 
struct resword { char *name; short token; enum rid rid; };

#define TOTAL_KEYWORDS 51
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 13
#define MIN_HASH_VALUE 8
#define MAX_HASH_VALUE 82
/* maximum key range = 75, duplicates = 0 */

#ifdef __GNUC__
inline
#endif
static unsigned int
hash (str, len)
     register char *str;
     register int unsigned len;
{
  static unsigned char asso_values[] =
    {
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
     83, 83, 83, 83, 83,  0, 83,  1,  2, 34,
     19,  6, 11, 29,  0, 17, 83,  0, 23, 28,
     26, 30, 31, 83, 15,  1,  0, 28, 13,  4,
     83, 83,  5, 83, 83, 83, 83, 83,
    };
  register int hval = len;

  switch (hval)
    {
      default:
      case 3:
        hval += asso_values[str[2]];
      case 2:
      case 1:
        hval += asso_values[str[0]];
        break;
    }
  return hval + asso_values[str[len - 1]];
}

#ifdef __GNUC__
inline
#endif
struct resword *
is_reserved_word (str, len)
     register char *str;
     register unsigned int len;
{
  static struct resword wordlist[] =
    {
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"__asm__",  ASM, NORID},
      {"",}, 
      {"__typeof__",  TYPEOF, NORID},
      {"__signed__",  TYPESPEC, RID_SIGNED},
      {"__alignof__",  ALIGNOF, NORID},
      {"break",  BREAK, NORID},
      {"__attribute__",  ATTRIBUTE, NORID},
      {"",}, {"",}, 
      {"else",  ELSE, NORID},
      {"__attribute",  ATTRIBUTE, NORID},
      {"__typeof",  TYPEOF, NORID},
      {"int",  TYPESPEC, RID_INT},
      {"__alignof",  ALIGNOF, NORID},
      {"struct",  STRUCT, NORID},
      {"sizeof",  SIZEOF, NORID},
      {"switch",  SWITCH, NORID},
      {"__volatile__",  TYPE_QUAL, RID_VOLATILE},
      {"",}, 
      {"__inline__",  SCSPEC, RID_INLINE},
      {"__signed",  TYPESPEC, RID_SIGNED},
      {"__volatile",  TYPE_QUAL, RID_VOLATILE},
      {"if",  IF, NORID},
      {"__inline",  SCSPEC, RID_INLINE},
      {"while",  WHILE, NORID},
      {"",}, 
      {"__asm",  ASM, NORID},
      {"auto",  SCSPEC, RID_AUTO},
      {"short",  TYPESPEC, RID_SHORT},
      {"default",  DEFAULT, NORID},
      {"extern",  SCSPEC, RID_EXTERN},
      {"",}, {"",}, 
      {"__const",  TYPE_QUAL, RID_CONST},
      {"static",  SCSPEC, RID_STATIC},
      {"__const__",  TYPE_QUAL, RID_CONST},
      {"for",  FOR, NORID},
      {"case",  CASE, NORID},
      {"float",  TYPESPEC, RID_FLOAT},
      {"return",  RETURN, NORID},
      {"typeof",  TYPEOF, NORID},
      {"typedef",  SCSPEC, RID_TYPEDEF},
      {"volatile",  TYPE_QUAL, RID_VOLATILE},
      {"do",  DO, NORID},
      {"inline",  SCSPEC, RID_INLINE},
      {"void",  TYPESPEC, RID_VOID},
      {"char",  TYPESPEC, RID_CHAR},
      {"signed",  TYPESPEC, RID_SIGNED},
      {"unsigned",  TYPESPEC, RID_UNSIGNED},
      {"",}, {"",}, 
      {"double",  TYPESPEC, RID_DOUBLE},
      {"asm",  ASM, NORID},
      {"",}, {"",}, 
      {"goto",  GOTO, NORID},
      {"",}, 
      {"const",  TYPE_QUAL, RID_CONST},
      {"enum",  ENUM, NORID},
      {"register",  SCSPEC, RID_REGISTER},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"continue",  CONTINUE, NORID},
      {"",}, 
      {"union",  UNION, NORID},
      {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"long",  TYPESPEC, RID_LONG},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        {
          register char *s = wordlist[key].name;

          if (*s == *str && !strcmp (str + 1, s + 1))
            return &wordlist[key];
        }
    }
  return 0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

