head	1.13;
access;
symbols
	OPENBSD_2_5:1.12.0.2
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.9.0.4
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6;
locks; strict;
comment	@# @;


1.13
date	99.05.26.16.34.35;	author espie;	state dead;
branches;
next	1.12;

1.12
date	98.12.05.19.43.44;	author kstailey;	state Exp;
branches;
next	1.11;

1.11
date	98.07.24.00.10.47;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	98.03.03.21.40.28;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.04.27.20.55.51;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.01.19.22.46.48;	author graichen;	state Exp;
branches;
next	1.7;

1.7
date	96.10.27.01.24.08;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.07.26.14.40.44;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	96.05.22.08.56.03;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.05.19.21.48.30;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.03.27.23.00.01;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.03.26.00.28.07;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.03.16.05.18.48;	author etheisen;	state Exp;
branches;
next	;


desc
@@


1.13
log
@old libg++, replaced by part of egcs.
@
text
@#	$OpenBSD: Makefile.bsd-wrapper,v 1.12 1998/12/05 19:43:44 kstailey Exp $

.if defined(OBJMACHINE)
OBJDIR=	obj.${MACHINE}
.else
OBJDIR=	obj
.endif

LIBIO_DIR=	$(.CURDIR)/../../libio

LIBIO_OBJDIR!=	if [ -d $(LIBIO_DIR)/$(OBJDIR) ]; then \
			echo $(LIBIO_DIR)/$(OBJDIR); \
		else \
			echo $(LIBIO_DIR); \
		fi

STD_DIR=	$(.CURDIR)/../../libstdc++

STD_OBJDIR!=	if [ -d $(STD_DIR)/$(OBJDIR) ]; then \
			echo $(STD_DIR)/$(OBJDIR); \
		else \
			echo $(STD_DIR); \
		fi

GXX_DIR=	$(.CURDIR)/..

GXX_OBJDIR!=	if [ -d $(GXX_DIR)/$(OBJDIR) ]; then \
			echo $(GXX_DIR)/$(OBJDIR); \
		else \
			echo $(GXX_DIR); \
		fi

.PATH:		$(.CURDIR)/src

PROG=		gperf
CC=		g++
CPPFLAGS+=	-I$(.CURDIR)/src -I$(.CURDIR)/../../libio  \
		-I$(.CURDIR)/../../libstdc++ -I$(.CURDIR)/../src \
		-I$(LIBIO_OBJDIR)
SRCS=		new.cc options.cc iterator.cc main.cc gen-perf.cc \
		key-list.cc list-node.cc hash-table.cc bool-array.cc \
		read-line.cc std-err.cc version.cc

LDFLAGS+=	-L$(STD_OBJDIR) -L$(GXX_OBJDIR)

# if DESTDIR is set, then -nostdlib will be fed to g++, which will prevent
# -lg++ to be automatically included.  So add it here, no matter what.
LDADD+=		-lg++ -lstdc++ -lcurses

all:		$(STD_OBJDIR)/libstdc++.a $(GXX_OBJDIR)/libg++.a

$(STD_OBJDIR)/libstdc++.a:
	cd $(STD_DIR); $(MAKE) -f Makefile.bsd-wrapper

$(GXX_OBJDIR)/libg++.a:
	cd $(GXX_DIR); $(MAKE) -f Makefile.bsd-wrapper SUBDIR=

.include <bsd.own.mk>	# for NOMAN if it's there

.if !defined(NOMAN)
install: maninstall 
.else
install: 
.endif
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} \
		-m ${BINMODE} ${PROG} ${DESTDIR}/usr/bin
	@@-cd $(.CURDIR); for i in gperf.info*; do \
		cmp -s $$i $(DESTDIR)/usr/share/info/$$i || \
		${INSTALL} -c -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
		$$i $(DESTDIR)/usr/share/info/$$i; \
	done

.include <bsd.prog.mk>
@


1.12
log
@NOMAN fixes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.11 1998/07/24 00:10:47 millert Exp $
@


1.11
log
@-lcurses, not termcap/termlib
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.10 1998/03/03 21:40:28 millert Exp $
d57 2
@


1.10
log
@libg++ 2.8.0 from FSF + changes to build in an OpenBSD environment
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.9 1997/04/27 20:55:51 millert Exp $
a48 4

.if (${MACHINE_ARCH} == "mips")
LDADD+=	-ltermlib
.endif
@


1.9
log
@COPY -> INSTALL_COPY and STRIP -> INSTALL_STRIP
This fixes namespace problems where STRIP is sometimes used as
the name of the strip(1) to use and other times used as
the flag to send install(1) when stripping (or not).
COPY doesn't have this problem (yet) but was poorly named.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.8 1997/01/19 22:46:48 graichen Exp $
d37 1
a37 1
CPPFLAGS+=	-nostdinc++ -I$(.CURDIR)/src -I$(.CURDIR)/../../libio  \
@


1.8
log
@work around linker problems on the mips (explicitely link with
-ltermlib)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.7 1996/10/27 01:24:08 deraadt Exp $
d67 2
a68 2
	install ${COPY} ${STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
		${PROG} ${DESTDIR}/usr/bin
d71 1
a71 1
		install -c -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
@


1.7
log
@link against -lcurses until ld is fixed
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.6 1996/07/26 14:40:44 maja Exp $
d49 4
@


1.6
log
@Don't try to install man pages if NOMAN is defined, it will not work!
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.5 1996/05/22 08:56:03 niklas Exp $
d48 1
a48 1
LDADD+=		-lg++ -lstdc++
@


1.5
log
@A possible make recursion case blown away
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.4 1996/05/19 21:48:30 niklas Exp $
d58 1
d60 3
@


1.4
log
@The former build assumed either no separate objdirs, or objdir links to a
separate equivalent hierarchy.  There are two cases where this does not hold:
1. When the objdirs are real directories in the src tree, i.e. not links.
2. When OBJMACHINE is set.
Fix these remaining cases.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.3 1996/03/27 23:00:01 niklas Exp $
d56 1
a56 1
	cd $(GXX_DIR); $(MAKE) -f Makefile.bsd-wrapper
@


1.3
log
@Misc. cleanup, esp. for obj-dirs, DESTDIR compilations and missing
dependencies.
@
text
@d1 1
a1 12
#	$OpenBSD: Makefile.bsd-wrapper,v 1.2 1996/03/26 00:28:07 niklas Exp $

.PATH:		$(.CURDIR)/src

PROG=		gperf
CC=		g++
CPPFLAGS+=	-nostdinc++ -I$(.CURDIR)/src -I$(.CURDIR)/../../libio  \
		-I$(.CURDIR)/../../libstdc++ -I$(.CURDIR)/../src \
		-I../../libio
SRCS=		new.cc options.cc iterator.cc main.cc gen-perf.cc \
		key-list.cc list-node.cc hash-table.cc bool-array.cc \
		read-line.cc std-err.cc version.cc
d9 8
d32 11
@


1.2
log
@Make "make obj" work, make builds to obj directories work.  Don't put
object files in SRCS variables, add them to OBJS instead.  Also
explicitly mention -lg++ because g++ won't use the -L path for getting
libg++ unless done via the command line.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.1 1996/03/16 05:18:48 etheisen Exp $
d20 1
a20 1
STD_DIR=	../../libstdc++
d28 1
a28 1
GXX_DIR=	..
d37 4
a40 1
LDADD+=		-lg++
@


1.1
log
@Allow native BSD build of libg++ 2.7.1.  This is a complete replacement of
the GNU build procedure, not a wrapper.  Generates standard, profiled,
shared object, and shared library versions of libiberty, libstdc++, and
libg++.  libiberty version 0.0, libstdc++ version 27.1, and libg++ version
27.1.  Requires modification of bsd.subdir.mk pmake include.  Targets
linked with the shared libraries libstdc++ and libg++ will, by default,
automatically be run time linked with libm and libcurses.
@
text
@d1 1
a1 1
#	$OpenBSD$
d13 6
a18 1
LDFLAGS+=	-L../../libstdc++ -L..
d21 7
d30 10
a39 1
all:		$(STD_DIR)/libstdc++.a $(GXX_DIR)/libg++.a
d41 1
a41 1
$(STD_DIR)/libstdc++.a:
d44 1
a44 1
$(GXX_DIR)/libg++.a:
@

