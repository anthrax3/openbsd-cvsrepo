head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.05.26.16.34.31;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.18.04;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.18.04;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@/* This may look like C code, but it is really -*- C++ -*- */

/* Data and member functions for generating a minimal-prefix trie.

   Copyright (C) 1989 Free Software Foundation, Inc.
   written by Douglas C. Schmidt (schmidt@@ics.uci.edu)
   
   This file is part of GNU TRIE-GEN.
   
   GNU TRIE-GEN is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.
   
   GNU TRIE-GEN is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with GNU trie-gen; see the file COPYING.  If not, write to
   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */

#include "compact.h"

class Trie
{
public:
  /* N is a guess on the total number of keys. */
                 Trie (int n = 1000): matrix (n), total_size (n) {
		     keys = new char *[n]; current_size = 0;
		     max_key_len = 0; max_row = 1; }
  void           insert (char *str, int len);
  void           output (void);
  void           sort (void);

private:
  Compact_Matrix matrix;           /* Dynamic table encoding the trie DFA. */
  char         **keys;             /* Dynamic resizable table to store input keys. */
  int            total_size;       /* Total size of the keyword table. */
  int            current_size;     /* Current size of the keyword table. */
  int		 max_row;	   /* Largest row in the trie so far. */
  int            max_key_len;	   /* Length of the longest keyword. */

  void           resize (int new_size);
  void           build (int hi, int lo = 0, int col = 0);
  static int     cmp (char **s1, char **s2);
};

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

