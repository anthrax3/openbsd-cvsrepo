head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.05.26.16.34.27;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.18.01;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.18.01;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@// This may look like C code, but it is really -*- C++ -*-
#ifndef option_h
#define option_h 1

/* Process directory listing program options. */

/* Enumeration of all directory listing options. */
enum option_type
{
  HIDDEN = 01, /* Print hidden files (those beginning with '.') */
  LINK   = 02  /* Distinguish between directory and file links. */
};

class Option_Handler
{
private:
  static unsigned option_word;  /* Compact bitwise-storage for program options. */
  static char    *program_name; /* Name of listing program. */
  static void     usage (void); /* Prints usage then exits. */
  
public:
                  Option_Handler (void);                /* Initialize options. */
  void            operator() (int argc, char *argv[]);  /* Process command-line options. */
  int             operator[] (option_type option);      /* Check if option is enabled. */
};

/* Speed things up a bit if we're optimizing. */
#ifdef __OPTIMIZE__
inline int
Option_Handler::operator[] (option_type option) 
{ 
  return option_word & option;
}
#endif // __OPTIMIZE__
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

