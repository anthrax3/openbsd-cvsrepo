head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	FSF_2_8_0:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.05.26.16.34.27;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.18.01;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.18.01;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@// This may look like C code, but it is really -*- C++ -*-
#ifndef screen_h
#define screen_h 1
#include <std.h>
#include <stdio.h>
#include <curses.h>



/* Handles necessary screen-manipultations. */
class Screen_Handler
{
 private:
  static char  term_entry[1024];   /* Holds termcap entry for current terminal. */
  static char  temp_buf[100];      /* Holds inverse screen attributes. */
  static int   width;              /* Current screen width, needed to format output. */
  static char *current_ptr;        /* Pointer to current position in temp_buf. */
  static char *inverse_start;      /* Control sequence beginning inverse mode. */
  static char *inverse_end;        /* Control sequence ending inverse mode. */
  
  static void  center (char *buf); /* Prints out leading spaces to center BUF. */

public:
              Screen_Handler (void);              /* Initialize the screen width. */
  static int  screen_width (void);                /* Return current screen width. */
  static void print_inverse_centered (char *buf); /* Centers, inverts, and prints BUF. */
};

/* See comments in .cc file for inline functions. */

/* Returns current screen width. */
inline int 
Screen_Handler::screen_width (void)
{
  return width;
}
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@

