head	1.10;
access;
symbols
	OPENBSD_2_5:1.9.0.4
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.6
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.4
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7;
locks; strict;
comment	@# @;


1.10
date	99.05.26.16.38.11;	author espie;	state dead;
branches;
next	1.9;

1.9
date	98.09.20.03.27.18;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.03.03.21.42.46;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.06.03.07.36.33;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.05.19.21.48.31;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.05.13.11.32.48;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.03.28.07.31.10;	author etheisen;	state Exp;
branches;
next	1.3;

1.3
date	96.03.27.23.00.05;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.03.26.00.29.27;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.03.16.05.18.55;	author etheisen;	state Exp;
branches;
next	;


desc
@@


1.10
log
@old libg++, replaced by part of egcs.
@
text
@#	$OpenBSD: Makefile.bsd-wrapper,v 1.9 1998/09/20 03:27:18 millert Exp $

IO_DIR=		$(.CURDIR)/../libio
LIBIBERTY_DIR=	$(.CURDIR)/../libiberty
STD_DIR=	$(.CURDIR)/std

.if defined(OBJMACHINE)
OBJDIR=	obj.${MACHINE}
.else
OBJDIR=	obj
.endif

IO_OBJDIR!=	if [ -d $(IO_DIR)/$(OBJDIR) ]; then \
			echo $(IO_DIR)/$(OBJDIR); \
		else \
			echo $(IO_DIR); \
		fi

LIBIBERTY_OBJDIR!=if [ -d $(LIBIBERTY_DIR)/$(OBJDIR) ]; then \
			echo $(LIBIBERTY_DIR)/$(OBJDIR); \
		else \
			echo $(LIBIBERTY_DIR); \
		fi

LIB=		stdc++
CXXFLAGS+=	-fno-implicit-templates
CPPFLAGS+=	-I$(.CURDIR) -I$(.CURDIR)/stl -I$(.CURDIR)/../libio -I$(IO_OBJDIR)
LDADD+=		-lm

# stdc++ sources/objs
STD_SRCS=	cstringi.cc stdexcepti.cc cstdlibi.cc cmathi.cc stlinst.cc
SPEC_OBJS=	cstrmain.o cstrio.o fcomplex.o fcomio.o dcomplex.o dcomio.o \
		ldcomplex.o ldcomio.o
STD_OBJS=	$(STD_SRCS:N*.h:R:S/$/.o/g) $(SPEC_OBJS)

# As we need to fill variables with contents of dynamically created files
# we must first see to that they are really generated.  This is a hack that
# ensures this.  The echo at the end is because make doesn't like command
# substitutions to not generate output.
.ifmake !obj && !clean && !cleandir
PREREQ!=	test ! -f $(IO_OBJDIR)/iostream.list && \
			(cd $(IO_DIR); \
			 make -f Makefile.bsd-wrapper iostream.list); \
		test ! -f $(LIBIBERTY_OBJDIR)/needed-list && \
			(cd $(LIBIBERTY_DIR); \
			 make -f Makefile.bsd-wrapper needed-list); \
		echo 'Prerequistes made'

IO_OBJS!=	cat $(IO_OBJDIR)/iostream.list
QIO_OBJS=	$(IO_OBJS:S/^/$(IO_OBJDIR)\//g)

LIBIBERTY_SRCS!=cat $(LIBIBERTY_OBJDIR)/needed-list
LIBIBERTY_OBJS=$(LIBIBERTY_SRCS:N*.h:R:S/$/.o/g)
# XXX why does strerror.o need to be hardwired?
LIBIBERTY_OBJS+=strerror.o
QLIBIBERTY_OBJS=$(LIBIBERTY_OBJS:S/^/$(LIBIBERTY_OBJDIR)\//g)
.endif

SRCS=		$(STD_SRCS)

OBJS=		$(SPEC_OBJS) $(QIO_OBJS) $(QLIBIBERTY_OBJS)

HEADERS=	cassert cctype cerrno cfloat ciso646 climits clocale cmath complex \
		csetjmp csignal cstdarg cstddef cstdio cstdlib cstring ctime \
		cwchar cwctype string stdexcept \
		algorithm deque functional hash_map hash_set iterator list map \
		memory numeric pthread_alloc queue rope set slist stack utility \
		vector fstream iomanip iostream strstream iosfwd

G_CFG_H=	$(IO_OBJDIR)/_G_config.h

all:		$(G_CFG_H)

beforedepend:	$(G_CFG_H)

$(G_CFG_H):
	cd $(IO_DIR); make -f Makefile.bsd-wrapper _G_config.h

clean:	_SUBDIRUSE
	rm -f a.out [Ee]rrs mklog core *.core ${CLEANFILES}
	rm -f lib${LIB}.a ${STD_OBJS}
	rm -f lib${LIB}_p.a ${STD_OBJS:.o=.po}
	rm -f lib${LIB}_pic.a lib${LIB}.so.*.* ${STD_OBJS:.o=.so}
	rm -f llib-l${LIB}.ln ${STD_OBJS:.o=.ln}

includes:
	install -d -m 755 -o $(BINOWN) -g $(BINGRP) \
		$(DESTDIR)/usr/include/g++/std
	@@-cd $(.CURDIR); for i in $(HEADERS) *.h std/*.*; do \
		if [ -f stl/$$i ]; then \
			install -C -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
				stl/$$i $(DESTDIR)/usr/include/g++/$$i; \
		else \
			install -C -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
				$$i $(DESTDIR)/usr/include/g++/$$i; \
		fi \
	done
	@@-cd $(.CURDIR); for i in *.h std/*.*; do \
	install -C -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
		$$i $(DESTDIR)/usr/include/g++/$$i; \
	done
	@@-cd $(.CURDIR)/stl; for i in *.h; do \
	install -C -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
		$$i $(DESTDIR)/usr/include/g++/$$i; \
	done
#
# Misc GNU overidden targets.
#
$(QIO_OBJS) $(QIO_OBJS:.o=.po) $(QIO_OBJS:.o=.so):
	cd $(IO_DIR); $(MAKE) -f Makefile.bsd-wrapper

$(QLIBIBERTY_OBJS) $(QLIBIBERTY_OBJS:.o=.po) $(QLIBIBERTY_OBJS:.o=.so):
	cd $(LIBIBERTY_DIR); $(MAKE) -f Makefile.bsd-wrapper

stdexcepti.o:	stdexcepti.cc
	@@echo "${COMPILE.cc} -frtti ${.IMPSRC}"
	@@${COMPILE.cc} -frtti ${.IMPSRC} -frtti -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

stdexcepti.po: stdexcepti.cc
	@@echo "${COMPILE.cc} -frtti -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -p ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

stdexcepti.so: stdexcepti.cc
	@@echo "${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

typeinfoi.o: typeinfoi.cc $(.CURDIR)/std/typeinfo.h
	@@echo "${COMPILE.cc} -frtti ${.IMPSRC}"
	@@${COMPILE.cc} -frtti ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

typeinfoi.po: typeinfoi.cc $(.CURDIR)/std/typeinfo.h
	@@echo "${COMPILE.cc} -frtti -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti -p ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

typeinfoi.so: typeinfoi.cc $(.CURDIR)/std/typeinfo.h
	@@echo "${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -frtti ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

STRFUNCS= 	REP MAIN TRAITS ADDSS ADDPS ADDCS ADDSP ADDSC \
		EQSS EQPS EQSP NESS NEPS NESP LTSS LTPS LTSP GTSS GTPS GTSP \
		LESS LEPS LESP GESS GEPS GESP
STRIO=		EXTRACT INSERT GETLINE
COMFUNCS=	MAIN ADDCC ADDCF ADDFC SUBCC SUBCF SUBFC MULCC MULCF MULFC \
		DIVCC DIVCF DIVFC PLUS MINUS EQCC EQCF EQFC NECC NECF NEFC ABS \
		ARG POLAR CONJ NORM COS COSH EXP LOG POWCC POWCF POWCI POWFC \
		SIN SINH SQRT
COMIO=		EXTRACT INSERT

cstrmain.o: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -DC \
		`for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    	$(.CURDIR)/sinst.cc -o cstrmain.o'
	@@$(COMPILE.cc) -DC \
	    `for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    $(.CURDIR)/sinst.cc -o cstrmain.o.o
	@@$(LD) -x -r cstrmain.o.o -o cstrmain.o
	@@rm -f cstrmain.o.o

cstrmain.po: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -p -DC \
		`for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    	$(.CURDIR)/sinst.cc -o cstrmain.po'
	@@$(COMPILE.cc) -p -DC \
	    `for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    $(.CURDIR)/sinst.cc -o cstrmain.po.o
	@@$(LD) -X -r cstrmain.po.o -o cstrmain.po
	@@rm -f cstrmain.po.o

cstrmain.so: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DC \
		`for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    	$(.CURDIR)/sinst.cc -o cstrmain.so'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DC \
	    `for N in $(STRFUNCS); do echo " -D$${N}"; done` \
	    $(.CURDIR)/sinst.cc -o cstrmain.so.o
	@@$(LD) -x -r cstrmain.so.o -o cstrmain.so
	@@rm -f cstrmain.so.o
	
cstrio.o: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o cstrio.o'
	@@$(COMPILE.cc) -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o cstrio.o.o
	@@$(LD) -x -r cstrio.o.o -o cstrio.o
	@@rm -f cstrio.o.o

cstrio.po: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) -p -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o cstrio.po'
	@@$(COMPILE.cc) -p -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o cstrio.po.o
	@@$(LD) -X -r cstrio.po.o -o cstrio.po
	@@rm -f cstrio.po.o

cstrio.so: sinst.cc $(STD_DIR)/bastring.h \
		$(STD_DIR)/bastring.cc $(STD_DIR)/straits.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC  -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o cstrio.so'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DC \
		`for N in $(STRIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/sinst.cc -o cstrio.so.o
	@@$(LD) -x -r cstrio.so.o -o cstrio.so
	@@rm -f cstrio.so.o

fcomplex.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomplex.o'
	@@$(COMPILE.cc) -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomplex.o.o
	@@$(LD) -x -r fcomplex.o.o -o fcomplex.o
	@@rm -f fcomplex.o.o

fcomplex.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomplex.po'
	@@$(COMPILE.cc) -p  -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomplex.po.o
	@@$(LD) -X -r fcomplex.po.o -o fcomplex.po
	@@rm -f fcomplex.po.o

fcomplex.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomplex.so'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DF \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomplex.so.o
	@@$(LD) -x -r fcomplex.so.o -o fcomplex.so
	@@rm -f fcomplex.so.o


fcomio.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomio.o'
	@@$(COMPILE.cc) -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomio.o.o
	@@$(LD) -x -r fcomio.o.o -o fcomio.o
	@@rm -f fcomio.o.o

fcomio.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomio.po'
	@@$(COMPILE.cc) -p -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomio.po.o
	@@$(LD) -X -r fcomio.po.o -o fcomio.po
	@@rm -f fcomio.po.o

fcomio.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomio.so'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DF \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o fcomio.so.o
	@@$(LD) -x -r fcomio.so.o -o fcomio.so
	@@rm -f fcomio.so.o

dcomplex.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomplex.o'
	@@$(COMPILE.cc) -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomplex.o.o
	@@$(LD) -x -r dcomplex.o.o -o dcomplex.o
	@@rm -f dcomplex.o.o

dcomplex.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomplex.po'
	@@$(COMPILE.cc) -p  -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomplex.po.o
	@@$(LD) -X -r dcomplex.po.o -o dcomplex.po
	@@rm -f dcomplex.po.o

dcomplex.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomplex.so'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomplex.so.o
	@@$(LD) -x -r dcomplex.so.o -o dcomplex.so
	@@rm -f dcomplex.so.o

dcomio.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomio.o'
	@@$(COMPILE.cc) -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomio.o.o
	@@$(LD) -x -r dcomio.o.o -o dcomio.o
	@@rm -f dcomio.o.o

dcomio.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomio.po'
	@@$(COMPILE.cc) -p -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomio.po.o
	@@$(LD) -X -r dcomio.po.o -o dcomio.po
	@@rm -f dcomio.po.o

dcomio.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomio.so'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o dcomio.so.o
	@@$(LD) -x -r dcomio.so.o -o dcomio.so
	@@rm -f dcomio.so.o

ldcomplex.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomplex.o'
	@@$(COMPILE.cc) -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomplex.o.o
	@@$(LD) -x -r ldcomplex.o.o -o ldcomplex.o
	@@rm -f ldcomplex.o.o

ldcomplex.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomplex.po'
	@@$(COMPILE.cc) -p  -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomplex.po.o
	@@$(LD) -X -r ldcomplex.po.o -o ldcomplex.po
	@@rm -f ldcomplex.po.o

ldcomplex.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomplex.so'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DLD \
		`for N in $(COMFUNCS); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomplex.so.o
	@@$(LD) -x -r ldcomplex.so.o -o ldcomplex.so
	@@rm -f ldcomplex.so.o

ldcomio.o: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomio.o'
	@@$(COMPILE.cc) -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomio.o.o
	@@$(LD) -x -r ldcomio.o.o -o ldcomio.o
	@@rm -f ldcomio.o.o

ldcomio.po: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) -p -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomio.po'
	@@$(COMPILE.cc) -p -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomio.po.o
	@@$(LD) -X -r ldcomio.po.o -o ldcomio.po
	@@rm -f ldcomio.po.o

ldcomio.so: cinst.cc $(STD_DIR)/complext.h $(STD_DIR)/complext.cc \
		$(STD_DIR)/dcomplex.h $(STD_DIR)/ldcomplex.h
	@@echo '$(COMPILE.cc) $(PICFLAG) -DPIC -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomio.so'
	@@$(COMPILE.cc) $(PICFLAG) -DPIC -DLD \
		`for N in $(COMIO); do echo " -D$${N}"; done` \
		$(.CURDIR)/cinst.cc -o ldcomio.so.o
	@@$(LD) -x -r ldcomio.so.o -o ldcomio.so
	@@rm -f ldcomio.so.o

.if defined(DESTDIR)
CPPFLAGS+= -idirafter ${DESTDIR}/usr/include/g++
.endif

.include <bsd.lib.mk>
@


1.9
log
@Append "-idirafter ${DESTDIR}/usr/include/g++" to CPPFLAGS if DESTDIR is
specified so we can find gcc-installed c++ includes.  dm@@openbsd.org
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.8 1998/03/03 21:42:46 millert Exp $
@


1.8
log
@libg++ 2.8.0 from FSF + changes to build in an OpenBSD environment
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.7 1996/06/03 07:36:33 deraadt Exp $
d425 4
@


1.7
log
@do not build special files for clean, cleandir, or obj
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.6 1996/05/19 21:48:31 niklas Exp $
a4 1
STL_DIR=	$(.CURDIR)/stl
d26 2
a27 2
CXXFLAGS+=	-fno-implicit-templates -nostdinc++
CPPFLAGS+=	-I$(.CURDIR) -I$(.CURDIR)/../libio -I$(IO_OBJDIR)
a29 2
SUBDIR+=	stl

d31 1
a31 2
STD_SRCS=	newi.cc cstringi.cc stddefi.cc stdexcepti.cc typeinfoi.cc \
		exceptioni.cc cstdlibi.cc cmathi.cc 
a58 9
STL_OBJDIR!=	if [ -d $(STL_DIR)/$(OBJDIR) ]; then \
			echo $(STL_DIR)/$(OBJDIR); \
		else \
			echo $(STL_DIR); \
		fi

STL_OBJS=	$(STL_OBJDIR)/tempbuf.o $(STL_OBJDIR)/tree.o \
		$(STL_OBJDIR)/random.o

d61 1
a61 1
OBJS=		$(SPEC_OBJS) $(QIO_OBJS) $(QLIBIBERTY_OBJS) $(STL_OBJS)
d63 6
a68 5
HEADERS=	cassert cctype cerrno cfloat ciso646 climits clocale cmath \
		complex csetjmp csignal cstdarg cstddef cstdio cstdlib \
		cstring ctime cwchar cwctype new stddef string exception \
		stdexcept typeinfo algorithm deque list map queue set stack \
		vector utility functional iterator memory numeric
d86 1
a86 1
afterinstall:
d90 15
a104 3
		cmp -s $$i $(DESTDIR)/usr/include/g++/$$i || \
	install -c -o $(BINOWN) -g $(BINGRP) -m $(NONBINMODE) \
		 $$i $(DESTDIR)/usr/include/g++/$$i; \
a108 3
$(STL_OBJS) $(STL_OBJS:.o=.po) $(STL_OBJS:.o=.so):
	cd $(STL_DIR); $(MAKE) -f Makefile.bsd-wrapper

d115 1
a115 1
stdexcepti.o:	stdexcepti.cc $(.CURDIR)/std/stdexcept.h
d121 1
a121 1
stdexcepti.po: stdexcepti.cc $(.CURDIR)/std/stdexcept.h
d127 1
a127 1
stdexcepti.so: stdexcepti.cc $(.CURDIR)/std/stdexcept.h
d156 3
a158 3
		DIVCC DIVCF DIVFC PLUS MINUS EQCC EQCF EQFC NECC NECF NEFC \
		ABS ARG POLAR CONJ NORM COS COSH EXP LOG POWCC POWCF POWCI \
		POWFC SIN SINH SQRT
@


1.6
log
@The former build assumed either no separate objdirs, or objdir links to a
separate equivalent hierarchy.  There are two cases where this does not hold:
1. When the objdirs are real directories in the src tree, i.e. not links.
2. When OBJMACHINE is set.
Fix these remaining cases.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.5 1996/05/13 11:32:48 niklas Exp $
d44 1
a44 1
.ifnmake obj
@


1.5
log
@Don't do PREREQ's when making obj.
@
text
@d1 1
a1 15
#	$OpenBSD: Makefile.bsd-wrapper,v 1.4 1996/03/28 07:31:10 etheisen Exp $

LIB=		stdc++
CXXFLAGS+=	-fno-implicit-templates -nostdinc++
CPPFLAGS+=	-I$(.CURDIR) -I$(.CURDIR)/../libio -I../libio
LDADD+=		-lm

SUBDIR+=	stl

# stdc++ sources/objs
STD_SRCS=	newi.cc cstringi.cc stddefi.cc stdexcepti.cc typeinfoi.cc \
		exceptioni.cc cstdlibi.cc cmathi.cc 
SPEC_OBJS=	cstrmain.o cstrio.o fcomplex.o fcomio.o dcomplex.o dcomio.o \
		ldcomplex.o ldcomio.o
STD_OBJS=	$(STD_SRCS:N*.h:R:S/$/.o/g) $(SPEC_OBJS)
d25 14
@


1.4
log
@Moved GNU spec stuff into Makefile.bsd-wrapper1 using PREREQ variable.
This makes full BSD build support a reality for libiberty.  make obj
tags depends now works.  General cleanup and commenting.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.3 1996/03/27 23:00:05 niklas Exp $
d44 1
a52 1

d61 1
@


1.3
log
@Misc. cleanup, esp. for obj-dirs, DESTDIR compilations and missing
dependencies.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.2 1996/03/26 00:29:27 niklas Exp $
d56 2
a57 1
LIBIBERTY_OBJS!=cat $(LIBIBERTY_OBJDIR)/needed-list
@


1.2
log
@Make "make obj" work, make builds to obj directories work.  Don't put
object files in SRCS variables, add them to OBJS instead.  Also
explicitly mention -lg++ because g++ won't use the -L path for getting
libg++ unless done via the command line.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.bsd-wrapper,v 1.1 1996/03/16 05:18:55 etheisen Exp $
d17 4
a20 4
IO_DIR=		../libio
LIBIBERTY_DIR=	../libiberty
STL_DIR=	./stl
STD_DIR=	./std
a33 8
IO_OBJS!=	if [ -f $(IO_OBJDIR)/iostream.list ]; then \
			cat $(IO_OBJDIR)/iostream.list; \
		else \
			echo ' '; \
		fi

QIO_OBJS=	$(IO_OBJS:S/^/$(IO_DIR)\//g)

d40 23
a62 2
LIBIBERTY_OBJS!=if [ -f $(LIBIBERTY_OBJDIR)/needed-list ]; then \
			cat $(LIBIBERTY_OBJDIR)/needed-list; \
d64 1
a64 1
			echo ' '; \
d67 2
a68 4
LIBIBERTY_OBJS+=strerror.o
QLIBIBERTY_OBJS=$(LIBIBERTY_OBJS:S/^/$(LIBIBERTY_DIR)\//g)

STL_OBJS=	$(STL_DIR)/tempbuf.o $(STL_DIR)/tree.o $(STL_DIR)/random.o
d80 9
d97 2
a98 1
	install -d -m 755 -o $(BINOWN) -g $(BINGRP) /usr/include/g++/std
d108 1
a108 1
	cd $(.CURDIR)/$(STL_DIR); $(MAKE) -f Makefile.bsd-wrapper
d111 1
a111 1
	cd $(.CURDIR)/$(IO_DIR); $(MAKE) -f Makefile.bsd-wrapper
d114 1
a114 1
	cd $(.CURDIR)/$(LIBIBERTY_DIR); $(MAKE) -f Makefile.bsd-wrapper
@


1.1
log
@Allow native BSD build of libg++ 2.7.1.  This is a complete replacement of
the GNU build procedure, not a wrapper.  Generates standard, profiled,
shared object, and shared library versions of libiberty, libstdc++, and
libg++.  libiberty version 0.0, libstdc++ version 27.1, and libg++ version
27.1.  Requires modification of bsd.subdir.mk pmake include.  Targets
linked with the shared libraries libstdc++ and libg++ will, by default,
automatically be run time linked with libm and libcurses.
@
text
@d1 1
a1 1
#	$OpenBSD$
d22 18
a39 1
IO_OBJS!=	cat $(IO_DIR)/iostream.list
d42 12
a53 1
LIBIBERTY_OBJS!=cat $(LIBIBERTY_DIR)/needed-list
d59 3
a61 2
SRCS=		$(STD_SRCS) $(SPEC_OBJS) $(QIO_OBJS) $(QLIBIBERTY_OBJS) \
		$(STL_OBJS)
@

