head	1.4;
access;
symbols
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@// @;


1.4
date	99.05.26.16.38.18;	author espie;	state dead;
branches;
next	1.3;

1.3
date	98.03.03.21.43.15;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.08.26.12.01.11;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.03.15.22.20.20;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.20.20;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.03.03.20.24.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@old libg++, replaced by part of egcs.
@
text
@// Instantiation file for the -*- C++ -*- string classes.
// Copyright (C) 1994 Free Software Foundation

// This file is part of the GNU ANSI C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

// As a special exception, if you link this library with files
// compiled with a GNU compiler to produce an executable, this does not cause
// the resulting executable to be covered by the GNU General Public License.
// This exception does not however invalidate any other reasons why
// the executable file might be covered by the GNU General Public License.

// Written by Jason Merrill based upon the specification by Takanori Adachi
// in ANSI X3J16/94-0013R2.

#ifdef __GNUG__
#ifdef TRAITS
#ifdef C
#pragma implementation "std/straits.h"
#endif
#endif
#endif

#include <std/bastring.cc>

#ifdef C
typedef char c;
#endif
#ifdef W
typedef wchar_t c;
#endif

#ifdef TRAITS
template class string_char_traits <c>;
#endif

typedef basic_string <c> s;

#ifdef MAIN
template class basic_string <c>;
#endif

#ifdef ADDSS
template s operator+ (const s&, const s&);
#endif
#ifdef ADDPS
template s operator+ (const c*, const s&);
#endif
#ifdef ADDCS
template s operator+ (c, const s&);
#endif
#ifdef ADDSP
template s operator+ (const s&, const c*);
#endif
#ifdef ADDSC
template s operator+ (const s&, c);
#endif
#ifdef EQSS
template bool operator== (const s&, const s&);
#endif
#ifdef EQPS
template bool operator== (const c*, const s&);
#endif
#ifdef EQSP
template bool operator== (const s&, const c*);
#endif
#ifdef NESS
template bool operator!= (const s&, const s&);
#endif
#ifdef NEPS
template bool operator!= (const c*, const s&);
#endif
#ifdef NESP
template bool operator!= (const s&, const c*);
#endif
#ifdef LTSS
template bool operator< (const s&, const s&);
#endif
#ifdef LTPS
template bool operator< (const c*, const s&);
#endif
#ifdef LTSP
template bool operator< (const s&, const c*);
#endif
#ifdef GTSS
template bool operator> (const s&, const s&);
#endif
#ifdef GTPS
template bool operator> (const c*, const s&);
#endif
#ifdef GTSP
template bool operator> (const s&, const c*);
#endif
#ifdef LESS
template bool operator<= (const s&, const s&);
#endif
#ifdef LEPS
template bool operator<= (const c*, const s&);
#endif
#ifdef LESP
template bool operator<= (const s&, const c*);
#endif
#ifdef GESS
template bool operator>= (const s&, const s&);
#endif
#ifdef GEPS
template bool operator>= (const c*, const s&);
#endif
#ifdef GESP
template bool operator>= (const s&, const c*);
#endif
#ifdef EXTRACT
template istream& operator>> (istream&, s&);
#endif // EXTRACT
#ifdef INSERT
template ostream& operator<< (ostream&, const s&);
#endif // INSERT
#ifdef GETLINE
template istream& getline (istream&, s&, c);
#endif
@


1.3
log
@libg++ 2.8.0 from FSF + changes to build in an OpenBSD environment
@
text
@@


1.2
log
@getline template badly instantiated, found by compiling with egcs
@
text
@a35 3
#if 0
#define _G_NO_EXTERN_TEMPLATES
#endif
d49 1
a49 13
#define STRING basic_string <c, string_char_traits <c> >
typedef class STRING s;
#define BSREP __bsrep <c, string_char_traits <c> >
typedef class BSREP r;

#ifdef REP
template class BSREP;
r s::nilRep = { 0, 0, 1 };
#ifdef _G_ALLOC_CONTROL
bool (*r::excess_slop) (size_t, size_t) = r::default_excess;
size_t (*r::frob_size) (size_t) = r::default_frob;
#endif
#endif
d52 1
a52 1
template class STRING;
@


1.1
log
@Initial revision
@
text
@d146 1
a146 1
template istream& getline (istream&, s&);
@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@


1.1.1.2
log
@libg++ 2.8.0 baseline import
@
text
@d36 3
d52 13
a64 1
typedef basic_string <c> s;
d67 1
a67 1
template class basic_string <c>;
d146 1
a146 1
template istream& getline (istream&, s&, c);
@

