head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.2.0.6
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.4
	OPENBSD_2_4_BASE:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.2
	OPENBSD_2_3_BASE:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.05.26.16.38.48;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.20.37;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.20.37;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.03.03.20.24.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@/*
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Hewlett-Packard Company makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 *
 */

#ifndef TEMPBUF_H
#define TEMPBUF_H

#include <limits.h>
#include <pair.h>

#ifndef __stl_buffer_size
#define __stl_buffer_size 16384 // 16k
#endif

extern char __stl_temp_buffer[__stl_buffer_size];

//not reentrant code

template <class T>
pair<T*, int> get_temporary_buffer(int len, T*) {
    while (len > __stl_buffer_size / sizeof(T)) {
	set_new_handler(0);
        T* tmp = (T*)(::operator new((unsigned int)len * sizeof(T)));
        if (tmp) return pair<T*, int>(tmp, len);
        len = len / 2;
    }
    return pair<T*, int>((T*)__stl_temp_buffer, 
                         (int)(__stl_buffer_size / sizeof(T)));
}

template <class T>
void return_temporary_buffer(T* p) {
    if ((char*)(p) != __stl_temp_buffer) deallocate(p);
}

template <class T>
pair<T*, long> get_temporary_buffer(long len, T* p) {
    if (len > INT_MAX/sizeof(T)) 
	len = INT_MAX/sizeof(T);
    pair<T*, int> tmp = get_temporary_buffer((int)len, p);
    return pair<T*, long>(tmp.first, (long)(tmp.second));
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@


1.1.1.2
log
@libg++ 2.8.0 baseline import
@
text
@a13 11
 *
 * Copyright (c) 1996
 * Silicon Graphics Computer Systems, Inc.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Silicon Graphics makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
d16 2
a17 2
#ifndef __SGI_STL_TEMPBUF_H
#define __SGI_STL_TEMPBUF_H
d19 1
a19 1
#ifndef __SGI_STL_PAIR_H
d21 3
a23 12
#endif
#include <limits.h>
#include <stddef.h>
#include <stdlib.h>
#ifndef __TYPE_TRAITS_H
#include <type_traits.h>
#endif
#ifndef __SGI_STL_INTERNAL_CONSTRUCT_H
#include <stl_construct.h>
#endif
#ifndef __SGI_STL_INTERNAL_TEMPBUF_H
#include <stl_tempbuf.h>
d26 1
a26 1
#ifdef __STL_USE_NAMESPACES
d28 1
a28 3
using __STD::get_temporary_buffer;
using __STD::return_temporary_buffer;
using __STD::temporary_buffer;
d30 24
a53 1
#endif /* __STL_USE_NAMESPACES */
d55 1
a55 5
#endif /* __SGI_STL_TEMPBUF_H */

// Local Variables:
// mode:C++
// End:
@

