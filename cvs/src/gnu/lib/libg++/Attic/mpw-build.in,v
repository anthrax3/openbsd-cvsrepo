head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.2.0.6
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.4
	OPENBSD_2_4_BASE:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.2
	OPENBSD_2_3_BASE:1.1.1.2
	FSF_2_8_0:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	FSF_2_7_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.05.26.16.33.30;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.03.15.22.17.29;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.15.22.17.29;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.03.03.20.16.58;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old libg++, replaced by part of egcs.
@
text
@# Top-level script fragment to build everything for MPW.

Set savedir "`Directory`"

#Set Echo 1

Set ThisScript "{0}"

Set objdir ":"

Set verify 0

Set BuildTarget "none"

# Parse arguments.

Loop
	Break If {#} == 0
		If "{BuildTarget}" =~ /none/
			Set BuildTarget "{1}"
		Else
			Echo Only one build target allowed, ignoring "{1}"
		End If
	Shift 1
End Loop

If "{BuildTarget}" =~ /none/
	Set BuildTarget "all"
End If

If {verify} == 1
	Echo "#" Doing "{ThisScript}" "{BuildTarget}" in "`Directory`" ... 
End If

Set ranmake 0

If "`Exists Makefile`" != ""
	Echo "Set Echo 1" >{BuildTarget}.makeout
	Make -f Makefile {BuildTarget} >>{BuildTarget}.makeout
	{BuildTarget}.makeout
	Delete {BuildTarget}.makeout
	Set ranmake 1
End If

If "`Exists Makefile.PPC`" != ""
	Echo "Set Echo 1" >{BuildTarget}.makeout.ppc
	Make -f Makefile.PPC {BuildTarget} >>{BuildTarget}.makeout.ppc
	{BuildTarget}.makeout.ppc
	Delete {BuildTarget}.makeout.ppc
	Set ranmake 1
End If

If {ranmake} == 1
	Exit
End If

# Dispatch on various pseudo-targets.

If "{BuildTarget}" =~ /all/
	Echo Started `Date`
	"{ThisScript}" all-gcc
	"{ThisScript}" all-ld
	"{ThisScript}" all-gdb
	Echo Finished `Date`
Else If "{BuildTarget}" =~ /all-libiberty/
	"{ThisScript}" do-libiberty
Else If "{BuildTarget}" =~ /all-bfd/
	"{ThisScript}" do-bfd
Else If "{BuildTarget}" =~ /all-opcodes/
	"{ThisScript}" do-opcodes
Else If "{BuildTarget}" =~ /all-byacc/
	"{ThisScript}" do-byacc
Else If "{BuildTarget}" =~ /all-flex/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-byacc
	"{ThisScript}" do-flex
Else If "{BuildTarget}" =~ /all-binutils/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" all-opcodes
	"{ThisScript}" all-byacc
	"{ThisScript}" all-flex
	"{ThisScript}" do-binutils
Else If "{BuildTarget}" =~ /all-gas/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" all-opcodes
	"{ThisScript}" do-gas
Else If "{BuildTarget}" =~ /all-gcc/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-byacc
	"{ThisScript}" all-gas
	"{ThisScript}" all-binutils
	"{ThisScript}" do-gcc
Else If "{BuildTarget}" =~ /all-gdb/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" all-opcodes
	"{ThisScript}" all-byacc
	"{ThisScript}" do-gdb
Else If "{BuildTarget}" =~ /all-ld/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" all-opcodes
	"{ThisScript}" all-byacc
	"{ThisScript}" all-flex
	"{ThisScript}" do-ld
Else If "{BuildTarget}" =~ /do-byacc/
	SetDirectory :byacc:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-flex/
	SetDirectory :flex:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-bfd/
	SetDirectory :bfd:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-libiberty/
	SetDirectory :libiberty:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-opcodes/
	SetDirectory :opcodes:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-binutils/
	SetDirectory :binutils:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-gas/
	SetDirectory :gas:
	::mpw-build stamps
	::mpw-build all
Else If "{BuildTarget}" =~ /do-gcc/
	SetDirectory :gcc:
	# Need separate step to build all the insn-... etc files.
	::mpw-build stamps-h
	::mpw-build stamps-c
	::mpw-build all
Else If "{BuildTarget}" =~ /do-gdb/
	SetDirectory :gdb:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-ld/
	SetDirectory :ld:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-newlib/
	SetDirectory :newlib:
	::mpw-build all
Else If "{BuildTarget}" =~ /install/
	"{ThisScript}" install-binutils
	"{ThisScript}" install-gas
	"{ThisScript}" install-gcc
	"{ThisScript}" install-ld
	"{ThisScript}" install-gdb
Else If "{BuildTarget}" =~ /install-binutils/
	SetDirectory :binutils:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-gas/
	SetDirectory :gas:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-gcc/
	SetDirectory :gcc:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-gdb/
	SetDirectory :gdb:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-ld/
	SetDirectory :ld:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-only/
	"{ThisScript}" install-only-binutils
	"{ThisScript}" install-only-gas
	"{ThisScript}" install-only-gcc
	"{ThisScript}" install-only-gdb
	"{ThisScript}" install-only-ld
Else If "{BuildTarget}" =~ /install-only-binutils/
	SetDirectory :binutils:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-gas/
	SetDirectory :gas:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-gcc/
	SetDirectory :gcc:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-gdb/
	SetDirectory :gdb:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-ld/
	SetDirectory :ld:
	::mpw-build install-only
Else
	Echo {BuildTarget} not understood, ignoring
End If

SetDirectory "{savedir}"
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of GNU libg++ 2.7.1 port (prepared by Erik Theisen)
@
text
@@


1.1.1.2
log
@libg++ 2.8.0 baseline import
@
text
@d62 1
d75 1
d81 2
d91 1
a93 1
	"{ThisScript}" all-ld
d99 1
a100 4
Else If "{BuildTarget}" =~ /all-grez/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" do-grez
d105 2
a112 1
	::mpw-build _bootstrap
a124 1
	::mpw-build stamps
d132 4
a135 1
	:mpw-build all
a138 3
Else If "{BuildTarget}" =~ /do-grez/
	SetDirectory :grez:
	::mpw-build all
a145 1
	"{ThisScript}" install-only-top
d159 1
a159 1
	:mpw-build install
a162 3
Else If "{BuildTarget}" =~ /install-grez/
	SetDirectory :grez:
	::mpw-build install
a166 1
	"{ThisScript}" install-only-top
d180 1
a180 1
	:mpw-build install-only
a183 3
Else If "{BuildTarget}" =~ /install-only-grez/
	SetDirectory :grez:
	::mpw-build install-only
a186 6
Else If "{BuildTarget}" =~ /install-only-top/
	NewFolderRecursive "{prefix}"
	If "{prefix}" != "`Directory`"
		Duplicate -y 'Read Me for MPW' "{prefix}"'Read Me for MPW'
		Duplicate -y Install "{prefix}"Install
	End If
@

