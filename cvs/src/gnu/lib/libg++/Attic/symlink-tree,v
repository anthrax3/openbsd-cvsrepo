head	1.4;
access;
symbols
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	FSF_2_8_0:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.4
date	99.05.26.16.33.31;	author espie;	state dead;
branches;
next	1.3;

1.3
date	98.03.03.21.39.10;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.03.03.20.35.30;	author millert;	state dead;
branches;
next	1.1;

1.1
date	98.03.03.20.17.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.03.20.17.01;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@old libg++, replaced by part of egcs.
@
text
@#!/bin/sh
# Create a symlink tree.
#
# Syntax: symlink-tree srcdir "ignore1 ignore2 ..."
#
# where srcdir is the directory to create a symlink tree to,
# and "ignoreN" is a list of files/directories to ignore.

prog=$0
srcdir=$1
ignore="$2"

ignore_additional=". .. CVS"

# If we were invoked with a relative path name, adjust ${prog} to work
# in subdirs.
case ${prog} in
/*) ;;
*) prog=../${prog} ;;
esac

# Set newsrcdir to something subdirectories can use.
case ${srcdir} in
/*) newsrcdir=${srcdir} ;;
*) newsrcdir=../${srcdir} ;;
esac

for f in `ls -a ${srcdir}`; do
  if [ -d ${srcdir}/$f ]; then
    found=
    for i in ${ignore} ${ignore_additional}; do
      if [ "$f" = "$i" ]; then
	found=yes
      fi
    done
    if [ -z "${found}" ]; then
      echo "$f		..working in"
      if [ -d $f ]; then true; else mkdir $f; fi
      (cd $f; ${prog} ${newsrcdir}/$f "${ignore}")
    fi
  else
    echo "$f		..linked"
    rm -f $f
    ln -s ${srcdir}/$f .
  fi
done

exit 0
@


1.3
log
@libg++ 2.8.0 from FSF + changes to build in an OpenBSD environment
@
text
@@


1.2
log
@Files from libg++ 2.8.0 that cvs erroneously placed in the trunk.
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@libg++ 2.8.0 baseline import
@
text
@@

