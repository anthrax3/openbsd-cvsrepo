head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.16;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.16;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "f2c.h"
#include "fio.h"
#include "lio.h"
#include "fmt.h"		/* for f__doend */

extern flag f__lquit;
extern int f__lcount;
extern char *f__icptr;
extern char *f__icend;
extern icilist *f__svic;
extern int f__icnum, f__recpos;

static int
i_getc (void)
{
  if (f__recpos >= f__svic->icirlen)
    {
      if (f__recpos++ == f__svic->icirlen)
	return '\n';
      z_rnew ();
    }
  f__recpos++;
  if (f__icptr >= f__icend)
    return EOF;
  return (*f__icptr++);
}

static int
i_ungetc (int ch __attribute__ ((__unused__)),
	  FILE * f __attribute__ ((__unused__)))
{
  if (--f__recpos == f__svic->icirlen)
    return '\n';
  if (f__recpos < -1)
    err (f__svic->icierr, 110, "recend");
  /* *--icptr == ch, and icptr may point to read-only memory */
  return *--f__icptr /* = ch */ ;
}

static void
c_lir (icilist * a)
{
  extern int l_eof;
  if (f__init != 1)
    f_init ();
  f__init = 3;
  f__reading = 1;
  f__external = 0;
  f__formatted = 1;
  f__svic = a;
  L_len = a->icirlen;
  f__recpos = -1;
  f__icnum = f__recpos = 0;
  f__cursor = 0;
  l_getc = i_getc;
  l_ungetc = i_ungetc;
  l_eof = 0;
  f__icptr = a->iciunit;
  f__icend = f__icptr + a->icirlen * a->icirnum;
  f__cf = 0;
  f__curunit = 0;
  f__elist = (cilist *) a;
}


integer
s_rsli (icilist * a)
{
  f__lioproc = l_read;
  f__lquit = 0;
  f__lcount = 0;
  c_lir (a);
  f__doend = 0;
  return (0);
}

integer
e_rsli (void)
{
  f__init = 1;
  return 0;
}

extern int x_rsne (cilist *);

integer
s_rsni (icilist * a)
{
  extern int nml_read;
  integer rv;
  cilist ca;
  ca.ciend = a->iciend;
  ca.cierr = a->icierr;
  ca.cifmt = a->icifmt;
  c_lir (a);
  rv = x_rsne (&ca);
  nml_read = 0;
  return rv;
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@d4 1
a4 1
#include "fmt.h" /* for f__doend */
d13 2
a14 1
static int i_getc(Void)
d16 84
a99 91
	if(f__recpos >= f__svic->icirlen) {
		if (f__recpos++ == f__svic->icirlen)
			return '\n';
		z_rnew();
		}
	f__recpos++;
	if(f__icptr >= f__icend)
		return EOF;
	return(*f__icptr++);
	}

 static
#ifdef KR_headers
int i_ungetc(ch, f) int ch; FILE *f;
#else
int i_ungetc(int ch, FILE *f)
#endif
{
	if (--f__recpos == f__svic->icirlen)
		return '\n';
	if (f__recpos < -1)
		err(f__svic->icierr,110,"recend");
	/* *--icptr == ch, and icptr may point to read-only memory */
	return *--f__icptr /* = ch */;
	}

 static void
#ifdef KR_headers
c_lir(a) icilist *a;
#else
c_lir(icilist *a)
#endif
{
	extern int l_eof;
	if(f__init != 1) f_init();
	f__init = 3;
	f__reading = 1;
	f__external = 0;
	f__formatted = 1;
	f__svic = a;
	L_len = a->icirlen;
	f__recpos = -1;
	f__icnum = f__recpos = 0;
	f__cursor = 0;
	l_getc = i_getc;
	l_ungetc = i_ungetc;
	l_eof = 0;
	f__icptr = a->iciunit;
	f__icend = f__icptr + a->icirlen*a->icirnum;
	f__cf = 0;
	f__curunit = 0;
	f__elist = (cilist *)a;
	}


#ifdef KR_headers
integer s_rsli(a) icilist *a;
#else
integer s_rsli(icilist *a)
#endif
{
	f__lioproc = l_read;
	f__lquit = 0;
	f__lcount = 0;
	c_lir(a);
	f__doend = 0;
	return(0);
	}

integer e_rsli(Void)
{ f__init = 1; return 0; }

#ifdef KR_headers
integer s_rsni(a) icilist *a;
#else
extern int x_rsne(cilist*);

integer s_rsni(icilist *a)
#endif
{
	extern int nml_read;
	integer rv;
	cilist ca;
	ca.ciend = a->iciend;
	ca.cierr = a->icierr;
	ca.cifmt = a->icifmt;
	c_lir(a);
	rv = x_rsne(&ca);
	nml_read = 0;
	return rv;
	}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d4 1
a4 1
#include "fmt.h"		/* for f__doend */
d13 1
a13 2
static int
i_getc (void)
d15 91
a105 84
  if (f__recpos >= f__svic->icirlen)
    {
      if (f__recpos++ == f__svic->icirlen)
	return '\n';
      z_rnew ();
    }
  f__recpos++;
  if (f__icptr >= f__icend)
    return EOF;
  return (*f__icptr++);
}

static int
i_ungetc (int ch __attribute__ ((__unused__)),
	  FILE * f __attribute__ ((__unused__)))
{
  if (--f__recpos == f__svic->icirlen)
    return '\n';
  if (f__recpos < -1)
    err (f__svic->icierr, 110, "recend");
  /* *--icptr == ch, and icptr may point to read-only memory */
  return *--f__icptr /* = ch */ ;
}

static void
c_lir (icilist * a)
{
  extern int l_eof;
  if (f__init != 1)
    f_init ();
  f__init = 3;
  f__reading = 1;
  f__external = 0;
  f__formatted = 1;
  f__svic = a;
  L_len = a->icirlen;
  f__recpos = -1;
  f__icnum = f__recpos = 0;
  f__cursor = 0;
  l_getc = i_getc;
  l_ungetc = i_ungetc;
  l_eof = 0;
  f__icptr = a->iciunit;
  f__icend = f__icptr + a->icirlen * a->icirnum;
  f__cf = 0;
  f__curunit = 0;
  f__elist = (cilist *) a;
}


integer
s_rsli (icilist * a)
{
  f__lioproc = l_read;
  f__lquit = 0;
  f__lcount = 0;
  c_lir (a);
  f__doend = 0;
  return (0);
}

integer
e_rsli (void)
{
  f__init = 1;
  return 0;
}

extern int x_rsne (cilist *);

integer
s_rsni (icilist * a)
{
  extern int nml_read;
  integer rv;
  cilist ca;
  ca.ciend = a->iciend;
  ca.cierr = a->icierr;
  ca.cifmt = a->icifmt;
  c_lir (a);
  rv = x_rsne (&ca);
  nml_read = 0;
  return rv;
}
@

