head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.11;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.11;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "config.h"
#include "f2c.h"
#include "fio.h"

#undef abs
#undef min
#undef max
#include <stdlib.h>
#ifdef NON_UNIX_STDIO
#ifndef unlink
#define unlink remove
#endif
#else
#if defined (MSDOS) && !defined (GO32)
#include "io.h"
#else
extern int unlink (const char *);
#endif
#endif

integer
f_clos (cllist * a)
{
  unit *b;

  if (f__init & 2)
    f__fatal (131, "I/O recursion");
  if (a->cunit >= MXUNIT)
    return (0);
  b = &f__units[a->cunit];
  if (b->ufd == NULL)
    goto done;
  if (b->uscrtch == 1)
    goto Delete;
  if (!a->csta)
    goto Keep;
  switch (*a->csta)
    {
    default:
    Keep:
    case 'k':
    case 'K':
      if (b->uwrt == 1)
	t_runc ((alist *) a);
      if (b->ufnm)
	{
	  fclose (b->ufd);
	  free (b->ufnm);
	}
      break;
    case 'd':
    case 'D':
    Delete:
      fclose (b->ufd);
      if (b->ufnm)
	{
	  unlink (b->ufnm);
	  /*SYSDEP*/ free (b->ufnm);
	}
    }
  b->ufd = NULL;
done:
  b->uend = 0;
  b->ufnm = NULL;
  return (0);
}

void
f_exit (void)
{
  int i;
  static cllist xx;
  if (!(f__init & 1))
    return;			/* Not initialized, so no open units. */
  /* I/O no longer in progress.  If, during an I/O operation (such
     as waiting for the user to enter a line), there is an
     interrupt (such as ^C to stop the program on a UNIX system),
     f_exit() is called, but there is no longer any I/O in
     progress.  Without turning off this flag, f_clos() would
     think that there is an I/O recursion in this circumstance. */
  f__init &= ~2;
  if (!xx.cerr)
    {
      xx.cerr = 1;
      xx.csta = NULL;
      for (i = 0; i < MXUNIT; i++)
	{
	  xx.cunit = i;
	  (void) f_clos (&xx);
	}
    }
}
int
G77_flush_0 (void)
{
  int i;
  for (i = 0; i < MXUNIT; i++)
    if (f__units[i].ufd != NULL && f__units[i].uwrt)
      fflush (f__units[i].ufd);
  return 0;
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@d4 1
a4 3
#ifdef KR_headers
integer f_clos(a) cllist *a;
#else
d17 1
a17 5
#ifdef __cplusplus
extern "C" int unlink(const char*);
#else
extern int unlink(const char*);
#endif
d21 4
a24 3
integer f_clos(cllist *a)
#endif
{	unit *b;
d26 33
a58 36
	if (f__init & 2)
		f__fatal (131, "I/O recursion");
	if(a->cunit >= MXUNIT) return(0);
	b= &f__units[a->cunit];
	if(b->ufd==NULL)
		goto done;
	if (b->uscrtch == 1)
		goto Delete;
	if (!a->csta)
		goto Keep;
	switch(*a->csta) {
		default:
	 	Keep:
		case 'k':
		case 'K':
			if(b->uwrt == 1)
				t_runc((alist *)a);
			if(b->ufnm) {
				fclose(b->ufd);
				free(b->ufnm);
				}
			break;
		case 'd':
		case 'D':
		Delete:
			fclose(b->ufd);
			if(b->ufnm) {
				unlink(b->ufnm); /*SYSDEP*/
				free(b->ufnm);
				}
		}
	b->ufd=NULL;
 done:
	b->uend=0;
	b->ufnm=NULL;
	return(0);
d60 30
a89 25
 void
#ifdef KR_headers
f_exit()
#else
f_exit(void)
#endif
{	int i;
	static cllist xx;
	if (! (f__init & 1))
		return;		/* Not initialized, so no open units. */
	/* I/O no longer in progress.  If, during an I/O operation (such
	   as waiting for the user to enter a line), there is an
	   interrupt (such as ^C to stop the program on a UNIX system),
	   f_exit() is called, but there is no longer any I/O in
	   progress.  Without turning off this flag, f_clos() would
	   think that there is an I/O recursion in this circumstance. */
	f__init &= ~2;
	if (!xx.cerr) {
		xx.cerr=1;
		xx.csta=NULL;
		for(i=0;i<MXUNIT;i++)
		{
			xx.cunit=i;
			(void) f_clos(&xx);
		}
d91 1
d93 1
a93 4
 int
#ifdef KR_headers
G77_flush_0 ()
#else
d95 6
a100 6
#endif
{	int i;
	for(i=0;i<MXUNIT;i++)
		if(f__units[i].ufd != NULL && f__units[i].uwrt)
			fflush(f__units[i].ufd);
return 0;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d4 3
a6 1

d19 5
a23 1
extern int unlink (const char *);
d27 3
a29 4
integer
f_clos (cllist * a)
{
  unit *b;
d31 36
a66 23
  if (f__init & 2)
    f__fatal (131, "I/O recursion");
  if (a->cunit >= MXUNIT)
    return (0);
  b = &f__units[a->cunit];
  if (b->ufd == NULL)
    goto done;
  if (b->uscrtch == 1)
    goto Delete;
  if (!a->csta)
    goto Keep;
  switch (*a->csta)
    {
    default:
    Keep:
    case 'k':
    case 'K':
      if (b->uwrt == 1)
	t_runc ((alist *) a);
      if (b->ufnm)
	{
	  fclose (b->ufd);
	  free (b->ufnm);
d68 25
a92 9
      break;
    case 'd':
    case 'D':
    Delete:
      fclose (b->ufd);
      if (b->ufnm)
	{
	  unlink (b->ufnm);
	  /*SYSDEP*/ free (b->ufnm);
a93 6
    }
  b->ufd = NULL;
done:
  b->uend = 0;
  b->ufnm = NULL;
  return (0);
d95 4
a98 27

void
f_exit (void)
{
  int i;
  static cllist xx;
  if (!(f__init & 1))
    return;			/* Not initialized, so no open units. */
  /* I/O no longer in progress.  If, during an I/O operation (such
     as waiting for the user to enter a line), there is an
     interrupt (such as ^C to stop the program on a UNIX system),
     f_exit() is called, but there is no longer any I/O in
     progress.  Without turning off this flag, f_clos() would
     think that there is an I/O recursion in this circumstance. */
  f__init &= ~2;
  if (!xx.cerr)
    {
      xx.cerr = 1;
      xx.csta = NULL;
      for (i = 0; i < MXUNIT; i++)
	{
	  xx.cunit = i;
	  (void) f_clos (&xx);
	}
    }
}
int
d100 6
a105 6
{
  int i;
  for (i = 0; i < MXUNIT; i++)
    if (f__units[i].ufd != NULL && f__units[i].uwrt)
      fflush (f__units[i].ufd);
  return 0;
@

