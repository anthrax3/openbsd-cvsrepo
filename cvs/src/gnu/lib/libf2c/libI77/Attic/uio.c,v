head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.17;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.17;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "config.h"
#include "f2c.h"
#include "fio.h"
#include <sys/types.h>
uiolen f__reclen;

int
do_us (ftnint * number, char *ptr, ftnlen len)
{
  if (f__reading)
    {
      f__recpos += (int) (*number * len);
      if (f__recpos > f__reclen)
	err (f__elist->cierr, 110, "do_us");
      if (fread (ptr, (size_t) len, (size_t) (*number), f__cf) != (size_t) *number)
	err (f__elist->ciend, EOF, "do_us");
      return (0);
    }
  else
    {
      f__reclen += *number * len;
      (void) fwrite (ptr, (size_t) len, (size_t) (*number), f__cf);
      return (0);
    }
}
integer
do_ud (ftnint * number, char *ptr, ftnlen len)
{
  f__recpos += (int) (*number * len);
  if (f__recpos > f__curunit->url && f__curunit->url != 1)
    err (f__elist->cierr, 110, "do_ud");
  if (f__reading)
    {
#ifdef Pad_UDread
      size_t i;
      if (!(i = fread (ptr, (size_t) len, (size_t) (*number), f__cf))
	  && !(f__recpos - *number * len))
	err (f__elist->cierr, EOF, "do_ud");
      if (i < (size_t) *number)
	memset (ptr + i * len, 0, (*number - i) * len);
      return 0;
#else
      if (fread (ptr, (size_t) len, (size_t) (*number), f__cf) != *number)
	err (f__elist->cierr, EOF, "do_ud");
      else
	return (0);
#endif
    }
  (void) fwrite (ptr, (size_t) len, (size_t) (*number), f__cf);
  return (0);
}

integer
do_uio (ftnint * number, char *ptr, ftnlen len)
{
  if (f__sequential)
    return (do_us (number, ptr, len));
  else
    return (do_ud (number, ptr, len));
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@d1 1
d7 2
a8 5
#ifdef KR_headers
do_us(number,ptr,len) ftnint *number; char *ptr; ftnlen len;
#else
do_us(ftnint *number, char *ptr, ftnlen len)
#endif
d10 15
a24 15
	if(f__reading)
	{
		f__recpos += (int)(*number * len);
		if(f__recpos>f__reclen)
			err(f__elist->cierr, 110, "do_us");
		if (fread(ptr,(size_t)len,(size_t)(*number),f__cf) != *number)
			err(f__elist->ciend, EOF, "do_us");
		return(0);
	}
	else
	{
		f__reclen += *number * len;
		(void) fwrite(ptr,(size_t)len,(size_t)(*number),f__cf);
		return(0);
	}
d26 2
a27 5
#ifdef KR_headers
integer do_ud(number,ptr,len) ftnint *number; char *ptr; ftnlen len;
#else
integer do_ud(ftnint *number, char *ptr, ftnlen len)
#endif
d29 5
a33 5
	f__recpos += (int)(*number * len);
	if(f__recpos > f__curunit->url && f__curunit->url!=1)
		err(f__elist->cierr,110,"do_ud");
	if(f__reading)
	{
d35 7
a41 2
#ifdef KR_headers
	int i;
d43 4
a46 1
	size_t i;
d48 3
a50 14
		if (!(i = fread(ptr,(size_t)len,(size_t)(*number),f__cf))
		 && !(f__recpos - *number*len))
			err(f__elist->cierr,EOF,"do_ud");
		if (i < *number)
			memset(ptr + i*len, 0, (*number - i)*len);
		return 0;
#else
		if(fread(ptr,(size_t)len,(size_t)(*number),f__cf) != *number)
			err(f__elist->cierr,EOF,"do_ud");
		else return(0);
#endif
	}
	(void) fwrite(ptr,(size_t)len,(size_t)(*number),f__cf);
	return(0);
d52 3
a54 5
#ifdef KR_headers
integer do_uio(number,ptr,len) ftnint *number; char *ptr; ftnlen len;
#else
integer do_uio(ftnint *number, char *ptr, ftnlen len)
#endif
d56 4
a59 3
	if(f__sequential)
		return(do_us(number,ptr,len));
	else	return(do_ud(number,ptr,len));
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@a0 1
#include "config.h"
d6 5
a10 2
int
do_us (ftnint * number, char *ptr, ftnlen len)
d12 15
a26 15
  if (f__reading)
    {
      f__recpos += (int) (*number * len);
      if (f__recpos > f__reclen)
	err (f__elist->cierr, 110, "do_us");
      if (fread (ptr, (size_t) len, (size_t) (*number), f__cf) != (size_t) *number)
	err (f__elist->ciend, EOF, "do_us");
      return (0);
    }
  else
    {
      f__reclen += *number * len;
      (void) fwrite (ptr, (size_t) len, (size_t) (*number), f__cf);
      return (0);
    }
d28 5
a32 2
integer
do_ud (ftnint * number, char *ptr, ftnlen len)
d34 5
a38 5
  f__recpos += (int) (*number * len);
  if (f__recpos > f__curunit->url && f__curunit->url != 1)
    err (f__elist->cierr, 110, "do_ud");
  if (f__reading)
    {
d40 2
a41 7
      size_t i;
      if (!(i = fread (ptr, (size_t) len, (size_t) (*number), f__cf))
	  && !(f__recpos - *number * len))
	err (f__elist->cierr, EOF, "do_ud");
      if (i < (size_t) *number)
	memset (ptr + i * len, 0, (*number - i) * len);
      return 0;
d43 1
a43 4
      if (fread (ptr, (size_t) len, (size_t) (*number), f__cf) != *number)
	err (f__elist->cierr, EOF, "do_ud");
      else
	return (0);
d45 14
a58 3
    }
  (void) fwrite (ptr, (size_t) len, (size_t) (*number), f__cf);
  return (0);
d60 5
a64 3

integer
do_uio (ftnint * number, char *ptr, ftnlen len)
d66 3
a68 4
  if (f__sequential)
    return (do_us (number, ptr, len));
  else
    return (do_ud (number, ptr, len));
@

