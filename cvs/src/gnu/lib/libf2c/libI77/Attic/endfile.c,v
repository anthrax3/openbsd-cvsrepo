head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.13;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.13;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "config.h"
#include "f2c.h"
#include "fio.h"

#include <sys/types.h>
#include <unistd.h>

#undef abs
#undef min
#undef max
#include <stdlib.h>
#include <string.h>

extern char *f__r_mode[], *f__w_mode[];

integer
f_end (alist * a)
{
  unit *b;
  FILE *tf;

  if (f__init & 2)
    f__fatal (131, "I/O recursion");
  if (a->aunit >= MXUNIT || a->aunit < 0)
    err (a->aerr, 101, "endfile");
  b = &f__units[a->aunit];
  if (b->ufd == NULL)
    {
      char nbuf[10];
      sprintf (nbuf, "fort.%ld", (long) a->aunit);
      if ((tf = fopen (nbuf, f__w_mode[0])))
	fclose (tf);
      return (0);
    }
  b->uend = 1;
  return (b->useek ? t_runc (a) : 0);
}

#ifndef HAVE_FTRUNCATE
static int
copy (FILE * from, register long len, FILE * to)
{
  int len1;
  char buf[BUFSIZ];

  while (fread (buf, len1 = len > BUFSIZ ? BUFSIZ : (int) len, 1, from))
    {
      if (!fwrite (buf, len1, 1, to))
	return 1;
      if ((len -= len1) <= 0)
	break;
    }
  return 0;
}
#endif /* !defined(HAVE_FTRUNCATE) */

int
t_runc (alist * a)
{
  off_t loc, len;
  unit *b;
  int rc;
  FILE *bf;
#ifndef HAVE_FTRUNCATE
  FILE *tf;
#endif /* !defined(HAVE_FTRUNCATE) */

  b = &f__units[a->aunit];
  if (b->url)
    return (0);			/*don't truncate direct files */
  loc = FTELL (bf = b->ufd);
  FSEEK (bf, 0, SEEK_END);
  len = FTELL (bf);
  if (loc >= len || b->useek == 0 || b->ufnm == NULL)
    return (0);
#ifndef HAVE_FTRUNCATE
  rc = 0;
  fclose (b->ufd);
  if (!loc)
    {
      if (!(bf = fopen (b->ufnm, f__w_mode[b->ufmt])))
	rc = 1;
      if (b->uwrt)
	b->uwrt = 1;
      goto done;
    }
  if (!(bf = fopen (b->ufnm, f__r_mode[0])) || !(tf = tmpfile ()))
    {
#ifdef NON_UNIX_STDIO
    bad:
#endif
      rc = 1;
      goto done;
    }
  if (copy (bf, loc, tf))
    {
    bad1:
      rc = 1;
      goto done1;
    }
  if (!(bf = freopen (b->ufnm, f__w_mode[0], bf)))
    goto bad1;
  FSEEK (tf, 0, SEEK_SET);
  if (copy (tf, loc, bf))
    goto bad1;
  b->uwrt = 1;
  b->urw = 2;
#ifdef NON_UNIX_STDIO
  if (b->ufmt)
    {
      fclose (bf);
      if (!(bf = fopen (b->ufnm, f__w_mode[3])))
	goto bad;
      FSEEK (bf, 0, SEEK_END);
      b->urw = 3;
    }
#endif
done1:
  fclose (tf);
done:
  f__cf = b->ufd = bf;
#else /* !defined(HAVE_FTRUNCATE) */
  fflush (b->ufd);
  rc = ftruncate (fileno (b->ufd), loc);
  FSEEK (bf, loc, SEEK_SET);
#endif /* !defined(HAVE_FTRUNCATE) */
  if (rc)
    err (a->aerr, 111, "endfile");
  return 0;
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@a7 4
#ifdef KR_headers
extern char *strcpy();
extern FILE *tmpfile();
#else
a12 1
#endif
d16 2
a17 5
#ifdef KR_headers
integer f_end(a) alist *a;
#else
integer f_end(alist *a)
#endif
d19 2
a20 2
	unit *b;
	FILE *tf;
d22 15
a36 13
	if (f__init & 2)
		f__fatal (131, "I/O recursion");
	if(a->aunit>=MXUNIT || a->aunit<0) err(a->aerr,101,"endfile");
	b = &f__units[a->aunit];
	if(b->ufd==NULL) {
		char nbuf[10];
		sprintf(nbuf,"fort.%ld",(long)a->aunit);
		if (tf = fopen(nbuf, f__w_mode[0]))
			fclose(tf);
		return(0);
		}
	b->uend=1;
	return(b->useek ? t_runc(a) : 0);
d40 2
a41 6
 static int
#ifdef KR_headers
copy(from, len, to) FILE *from, *to; register long len;
#else
copy(FILE *from, register long len, FILE *to)
#endif
d43 2
a44 2
	int len1;
	char buf[BUFSIZ];
d46 9
a54 8
	while(fread(buf, len1 = len > BUFSIZ ? BUFSIZ : (int)len, 1, from)) {
		if (!fwrite(buf, len1, 1, to))
			return 1;
		if ((len -= len1) <= 0)
			break;
		}
	return 0;
	}
d57 2
a58 6
 int
#ifdef KR_headers
t_runc(a) alist *a;
#else
t_runc(alist *a)
#endif
d60 4
a63 4
	off_t loc, len;
	unit *b;
	int rc;
	FILE *bf;
d65 1
a65 1
	FILE *tf;
d68 8
a75 8
	b = &f__units[a->aunit];
	if(b->url)
		return(0);	/*don't truncate direct files*/
	loc=FTELL(bf = b->ufd);
	FSEEK(bf,0,SEEK_END);
	len=FTELL(bf);
	if (loc >= len || b->useek == 0 || b->ufnm == NULL)
		return(0);
d77 12
a88 11
	rc = 0;
	fclose(b->ufd);
	if (!loc) {
		if (!(bf = fopen(b->ufnm, f__w_mode[b->ufmt])))
			rc = 1;
		if (b->uwrt)
			b->uwrt = 1;
		goto done;
		}
	if (!(bf = fopen(b->ufnm, f__r_mode[0]))
	 || !(tf = tmpfile())) {
d90 1
a90 1
 bad:
d92 16
a107 15
		rc = 1;
		goto done;
		}
	if (copy(bf, loc, tf)) {
 bad1:
		rc = 1;
		goto done1;
		}
	if (!(bf = freopen(b->ufnm, f__w_mode[0], bf)))
		goto bad1;
	FSEEK(tf, 0, SEEK_SET);
	if (copy(tf, loc, bf))
		goto bad1;
	b->uwrt = 1;
	b->urw = 2;
d109 8
a116 7
	if (b->ufmt) {
		fclose(bf);
		if (!(bf = fopen(b->ufnm, f__w_mode[3])))
			goto bad;
		FSEEK(bf,0,SEEK_END);
		b->urw = 3;
		}
d119 1
a119 1
	fclose(tf);
d121 5
a125 5
	f__cf = b->ufd = bf;
#else  /* !defined(HAVE_FTRUNCATE) */
	fflush(b->ufd);
	rc = ftruncate(fileno(b->ufd), loc);
        FSEEK(bf,loc,SEEK_SET);
d127 4
a130 4
	if (rc)
		err(a->aerr,111,"endfile");
	return 0;
	}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d8 4
d17 1
d21 5
a25 2
integer
f_end (alist * a)
d27 2
a28 2
  unit *b;
  FILE *tf;
d30 13
a42 15
  if (f__init & 2)
    f__fatal (131, "I/O recursion");
  if (a->aunit >= MXUNIT || a->aunit < 0)
    err (a->aerr, 101, "endfile");
  b = &f__units[a->aunit];
  if (b->ufd == NULL)
    {
      char nbuf[10];
      sprintf (nbuf, "fort.%ld", (long) a->aunit);
      if ((tf = fopen (nbuf, f__w_mode[0])))
	fclose (tf);
      return (0);
    }
  b->uend = 1;
  return (b->useek ? t_runc (a) : 0);
d46 6
a51 2
static int
copy (FILE * from, register long len, FILE * to)
d53 2
a54 2
  int len1;
  char buf[BUFSIZ];
d56 8
a63 9
  while (fread (buf, len1 = len > BUFSIZ ? BUFSIZ : (int) len, 1, from))
    {
      if (!fwrite (buf, len1, 1, to))
	return 1;
      if ((len -= len1) <= 0)
	break;
    }
  return 0;
}
d66 6
a71 2
int
t_runc (alist * a)
d73 4
a76 4
  off_t loc, len;
  unit *b;
  int rc;
  FILE *bf;
d78 1
a78 1
  FILE *tf;
d81 8
a88 8
  b = &f__units[a->aunit];
  if (b->url)
    return (0);			/*don't truncate direct files */
  loc = FTELL (bf = b->ufd);
  FSEEK (bf, 0, SEEK_END);
  len = FTELL (bf);
  if (loc >= len || b->useek == 0 || b->ufnm == NULL)
    return (0);
d90 11
a100 12
  rc = 0;
  fclose (b->ufd);
  if (!loc)
    {
      if (!(bf = fopen (b->ufnm, f__w_mode[b->ufmt])))
	rc = 1;
      if (b->uwrt)
	b->uwrt = 1;
      goto done;
    }
  if (!(bf = fopen (b->ufnm, f__r_mode[0])) || !(tf = tmpfile ()))
    {
d102 1
a102 1
    bad:
d104 15
a118 16
      rc = 1;
      goto done;
    }
  if (copy (bf, loc, tf))
    {
    bad1:
      rc = 1;
      goto done1;
    }
  if (!(bf = freopen (b->ufnm, f__w_mode[0], bf)))
    goto bad1;
  FSEEK (tf, 0, SEEK_SET);
  if (copy (tf, loc, bf))
    goto bad1;
  b->uwrt = 1;
  b->urw = 2;
d120 7
a126 8
  if (b->ufmt)
    {
      fclose (bf);
      if (!(bf = fopen (b->ufnm, f__w_mode[3])))
	goto bad;
      FSEEK (bf, 0, SEEK_END);
      b->urw = 3;
    }
d129 1
a129 1
  fclose (tf);
d131 5
a135 5
  f__cf = b->ufd = bf;
#else /* !defined(HAVE_FTRUNCATE) */
  fflush (b->ufd);
  rc = ftruncate (fileno (b->ufd), loc);
  FSEEK (bf, loc, SEEK_SET);
d137 4
a140 4
  if (rc)
    err (a->aerr, 111, "endfile");
  return 0;
}
@

