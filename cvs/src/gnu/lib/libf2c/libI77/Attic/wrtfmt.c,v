head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.17;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.17;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "config.h"
#include "f2c.h"
#include "fio.h"
#include "fmt.h"

extern icilist *f__svic;
extern char *f__icptr;

static int
mv_cur (void)			/* shouldn't use fseek because it insists on calling fflush */
		/* instead we know too much about stdio */
{
  int cursor = f__cursor;
  f__cursor = 0;
  if (f__external == 0)
    {
      if (cursor < 0)
	{
	  if (f__hiwater < f__recpos)
	    f__hiwater = f__recpos;
	  f__recpos += cursor;
	  f__icptr += cursor;
	  if (f__recpos < 0)
	    err (f__elist->cierr, 110, "left off");
	}
      else if (cursor > 0)
	{
	  if (f__recpos + cursor >= f__svic->icirlen)
	    err (f__elist->cierr, 110, "recend");
	  if (f__hiwater <= f__recpos)
	    for (; cursor > 0; cursor--)
	      (*f__putn) (' ');
	  else if (f__hiwater <= f__recpos + cursor)
	    {
	      cursor -= f__hiwater - f__recpos;
	      f__icptr += f__hiwater - f__recpos;
	      f__recpos = f__hiwater;
	      for (; cursor > 0; cursor--)
		(*f__putn) (' ');
	    }
	  else
	    {
	      f__icptr += cursor;
	      f__recpos += cursor;
	    }
	}
      return (0);
    }
  if (cursor > 0)
    {
      if (f__hiwater <= f__recpos)
	for (; cursor > 0; cursor--)
	  (*f__putn) (' ');
      else if (f__hiwater <= f__recpos + cursor)
	{
	  cursor -= f__hiwater - f__recpos;
	  f__recpos = f__hiwater;
	  for (; cursor > 0; cursor--)
	    (*f__putn) (' ');
	}
      else
	{
	  f__recpos += cursor;
	}
    }
  else if (cursor < 0)
    {
      if (cursor + f__recpos < 0)
	err (f__elist->cierr, 110, "left off");
      if (f__hiwater < f__recpos)
	f__hiwater = f__recpos;
      f__recpos += cursor;
    }
  return (0);
}

static int
wrt_Z (Uint * n, int w, int minlen, ftnlen len)
{
  register char *s, *se;
  register int i, w1;
  static int one = 1;
  static char hex[] = "0123456789ABCDEF";
  s = (char *) n;
  --len;
  if (*(char *) &one)
    {
      /* little endian */
      se = s;
      s += len;
      i = -1;
    }
  else
    {
      se = s + len;
      i = 1;
    }
  for (;; s += i)
    if (s == se || *s)
      break;
  w1 = (i * (se - s) << 1) + 1;
  if (*s & 0xf0)
    w1++;
  if (w1 > w)
    for (i = 0; i < w; i++)
      (*f__putn) ('*');
  else
    {
      if ((minlen -= w1) > 0)
	w1 += minlen;
      while (--w >= w1)
	(*f__putn) (' ');
      while (--minlen >= 0)
	(*f__putn) ('0');
      if (!(*s & 0xf0))
	{
	  (*f__putn) (hex[*s & 0xf]);
	  if (s == se)
	    return 0;
	  s += i;
	}
      for (;; s += i)
	{
	  (*f__putn) (hex[*s >> 4 & 0xf]);
	  (*f__putn) (hex[*s & 0xf]);
	  if (s == se)
	    break;
	}
    }
  return 0;
}

static int
wrt_I (Uint * n, int w, ftnlen len, register int base)
{
  int ndigit, sign, spare, i;
  longint x;
  char *ans;
  if (len == sizeof (integer))
    x = n->il;
  else if (len == sizeof (char))
    x = n->ic;
#ifdef Allow_TYQUAD
  else if (len == sizeof (longint))
    x = n->ili;
#endif
  else
    x = n->is;
  ans = f__icvt (x, &ndigit, &sign, base);
  spare = w - ndigit;
  if (sign || f__cplus)
    spare--;
  if (spare < 0)
    for (i = 0; i < w; i++)
      (*f__putn) ('*');
  else
    {
      for (i = 0; i < spare; i++)
	(*f__putn) (' ');
      if (sign)
	(*f__putn) ('-');
      else if (f__cplus)
	(*f__putn) ('+');
      for (i = 0; i < ndigit; i++)
	(*f__putn) (*ans++);
    }
  return (0);
}
static int
wrt_IM (Uint * n, int w, int m, ftnlen len, int base)
{
  int ndigit, sign, spare, i, xsign;
  longint x;
  char *ans;
  if (sizeof (integer) == len)
    x = n->il;
  else if (len == sizeof (char))
    x = n->ic;
#ifdef Allow_TYQUAD
  else if (len == sizeof (longint))
    x = n->ili;
#endif
  else
    x = n->is;
  ans = f__icvt (x, &ndigit, &sign, base);
  if (sign || f__cplus)
    xsign = 1;
  else
    xsign = 0;
  if (ndigit + xsign > w || m + xsign > w)
    {
      for (i = 0; i < w; i++)
	(*f__putn) ('*');
      return (0);
    }
  if (x == 0 && m == 0)
    {
      for (i = 0; i < w; i++)
	(*f__putn) (' ');
      return (0);
    }
  if (ndigit >= m)
    spare = w - ndigit - xsign;
  else
    spare = w - m - xsign;
  for (i = 0; i < spare; i++)
    (*f__putn) (' ');
  if (sign)
    (*f__putn) ('-');
  else if (f__cplus)
    (*f__putn) ('+');
  for (i = 0; i < m - ndigit; i++)
    (*f__putn) ('0');
  for (i = 0; i < ndigit; i++)
    (*f__putn) (*ans++);
  return (0);
}
static int
wrt_AP (char *s)
{
  char quote;
  int i;

  if (f__cursor && (i = mv_cur ()))
    return i;
  quote = *s++;
  for (; *s; s++)
    {
      if (*s != quote)
	(*f__putn) (*s);
      else if (*++s == quote)
	(*f__putn) (*s);
      else
	return (1);
    }
  return (1);
}
static int
wrt_H (int a, char *s)
{
  int i;

  if (f__cursor && (i = mv_cur ()))
    return i;
  while (a--)
    (*f__putn) (*s++);
  return (1);
}

int
wrt_L (Uint * n, int len, ftnlen sz)
{
  int i;
  long x;
  if (sizeof (long) == sz)
    x = n->il;
  else if (sz == sizeof (char))
    x = n->ic;
  else
    x = n->is;
  for (i = 0; i < len - 1; i++)
    (*f__putn) (' ');
  if (x)
    (*f__putn) ('T');
  else
    (*f__putn) ('F');
  return (0);
}
static int
wrt_A (char *p, ftnlen len)
{
  while (len-- > 0)
    (*f__putn) (*p++);
  return (0);
}
static int
wrt_AW (char *p, int w, ftnlen len)
{
  while (w > len)
    {
      w--;
      (*f__putn) (' ');
    }
  while (w-- > 0)
    (*f__putn) (*p++);
  return (0);
}

static int
wrt_G (ufloat * p, int w, int d, int e, ftnlen len)
{
  double up = 1, x;
  int i = 0, oldscale, n, j;
  x = len == sizeof (real) ? p->pf : p->pd;
  if (x < 0)
    x = -x;
  if (x < .1)
    {
      if (x != 0.)
	return (wrt_E (p, w, d, e, len));
      i = 1;
      goto have_i;
    }
  for (; i <= d; i++, up *= 10)
    {
      if (x >= up)
	continue;
    have_i:
      oldscale = f__scale;
      f__scale = 0;
      if (e == 0)
	n = 4;
      else
	n = e + 2;
      i = wrt_F (p, w - n, d - i, len);
      for (j = 0; j < n; j++)
	(*f__putn) (' ');
      f__scale = oldscale;
      return (i);
    }
  return (wrt_E (p, w, d, e, len));
}

int
w_ed (struct syl * p, char *ptr, ftnlen len)
{
  int i;

  if (f__cursor && (i = mv_cur ()))
    return i;
  switch (p->op)
    {
    default:
      fprintf (stderr, "w_ed, unexpected code: %d\n", p->op);
      sig_die (f__fmtbuf, 1);
    case I:
      return (wrt_I ((Uint *) ptr, p->p1, len, 10));
    case IM:
      return (wrt_IM ((Uint *) ptr, p->p1, p->p2.i[0], len, 10));

      /* O and OM don't work right for character, double, complex, */
      /* or doublecomplex, and they differ from Fortran 90 in */
      /* showing a minus sign for negative values. */

    case O:
      return (wrt_I ((Uint *) ptr, p->p1, len, 8));
    case OM:
      return (wrt_IM ((Uint *) ptr, p->p1, p->p2.i[0], len, 8));
    case L:
      return (wrt_L ((Uint *) ptr, p->p1, len));
    case A:
      return (wrt_A (ptr, len));
    case AW:
      return (wrt_AW (ptr, p->p1, len));
    case D:
    case E:
    case EE:
      return (wrt_E ((ufloat *) ptr, p->p1, p->p2.i[0], p->p2.i[1], len));
    case G:
    case GE:
      return (wrt_G ((ufloat *) ptr, p->p1, p->p2.i[0], p->p2.i[1], len));
    case F:
      return (wrt_F ((ufloat *) ptr, p->p1, p->p2.i[0], len));

      /* Z and ZM assume 8-bit bytes. */

    case Z:
      return (wrt_Z ((Uint *) ptr, p->p1, 0, len));
    case ZM:
      return (wrt_Z ((Uint *) ptr, p->p1, p->p2.i[0], len));
    }
}

int
w_ned (struct syl * p)
{
  switch (p->op)
    {
    default:
      fprintf (stderr, "w_ned, unexpected code: %d\n", p->op);
      sig_die (f__fmtbuf, 1);
    case SLASH:
      return ((*f__donewrec) ());
    case T:
      f__cursor = p->p1 - f__recpos - 1;
      return (1);
    case TL:
      f__cursor -= p->p1;
      if (f__cursor < -f__recpos)	/* TL1000, 1X */
	f__cursor = -f__recpos;
      return (1);
    case TR:
    case X:
      f__cursor += p->p1;
      return (1);
    case APOS:
      return (wrt_AP (p->p2.s));
    case H:
      return (wrt_H (p->p1, p->p2.s));
    }
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@d9 2
a10 2
 static int
mv_cur(Void)	/* shouldn't use fseek because it insists on calling fflush */
d13 12
a24 30
	int cursor = f__cursor;
	f__cursor = 0;
	if(f__external == 0) {
		if(cursor < 0) {
			if(f__hiwater < f__recpos)
				f__hiwater = f__recpos;
			f__recpos += cursor;
			f__icptr += cursor;
			if(f__recpos < 0)
				err(f__elist->cierr, 110, "left off");
		}
		else if(cursor > 0) {
			if(f__recpos + cursor >= f__svic->icirlen)
				err(f__elist->cierr, 110, "recend");
			if(f__hiwater <= f__recpos)
				for(; cursor > 0; cursor--)
					(*f__putn)(' ');
			else if(f__hiwater <= f__recpos + cursor) {
				cursor -= f__hiwater - f__recpos;
				f__icptr += f__hiwater - f__recpos;
				f__recpos = f__hiwater;
				for(; cursor > 0; cursor--)
					(*f__putn)(' ');
			}
			else {
				f__icptr += cursor;
				f__recpos += cursor;
			}
		}
		return(0);
d26 34
a59 12
	if (cursor > 0) {
		if(f__hiwater <= f__recpos)
			for(;cursor>0;cursor--) (*f__putn)(' ');
		else if(f__hiwater <= f__recpos + cursor) {
			cursor -= f__hiwater - f__recpos;
			f__recpos = f__hiwater;
			for(; cursor > 0; cursor--)
				(*f__putn)(' ');
		}
		else {
			f__recpos += cursor;
		}
d61 1
a61 1
	else if (cursor < 0)
d63 1
a63 5
		if(cursor + f__recpos < 0)
			err(f__elist->cierr,110,"left off");
		if(f__hiwater < f__recpos)
			f__hiwater = f__recpos;
		f__recpos += cursor;
d65 10
a74 1
	return(0);
d77 2
a78 6
 static int
#ifdef KR_headers
wrt_Z(n,w,minlen,len) Uint *n; int w, minlen; ftnlen len;
#else
wrt_Z(Uint *n, int w, int minlen, ftnlen len)
#endif
d80 41
a120 46
	register char *s, *se;
	register int i, w1;
	static int one = 1;
	static char hex[] = "0123456789ABCDEF";
	s = (char *)n;
	--len;
	if (*(char *)&one) {
		/* little endian */
		se = s;
		s += len;
		i = -1;
		}
	else {
		se = s + len;
		i = 1;
		}
	for(;; s += i)
		if (s == se || *s)
			break;
	w1 = (i*(se-s) << 1) + 1;
	if (*s & 0xf0)
		w1++;
	if (w1 > w)
		for(i = 0; i < w; i++)
			(*f__putn)('*');
	else {
		if ((minlen -= w1) > 0)
			w1 += minlen;
		while(--w >= w1)
			(*f__putn)(' ');
		while(--minlen >= 0)
			(*f__putn)('0');
		if (!(*s & 0xf0)) {
			(*f__putn)(hex[*s & 0xf]);
			if (s == se)
				return 0;
			s += i;
			}
		for(;; s += i) {
			(*f__putn)(hex[*s >> 4 & 0xf]);
			(*f__putn)(hex[*s & 0xf]);
			if (s == se)
				break;
			}
		}
	return 0;
d122 10
d133 10
a142 11
 static int
#ifdef KR_headers
wrt_I(n,w,len, base) Uint *n; ftnlen len; register int base;
#else
wrt_I(Uint *n, int w, ftnlen len, register int base)
#endif
{	int ndigit,sign,spare,i;
	longint x;
	char *ans;
	if(len==sizeof(integer)) x=n->il;
	else if(len == sizeof(char)) x = n->ic;
d144 2
a145 1
	else if (len == sizeof(longint)) x = n->ili;
d147 21
a167 13
	else x=n->is;
	ans=f__icvt(x,&ndigit,&sign, base);
	spare=w-ndigit;
	if(sign || f__cplus) spare--;
	if(spare<0)
		for(i=0;i<w;i++) (*f__putn)('*');
	else
	{	for(i=0;i<spare;i++) (*f__putn)(' ');
		if(sign) (*f__putn)('-');
		else if(f__cplus) (*f__putn)('+');
		for(i=0;i<ndigit;i++) (*f__putn)(*ans++);
	}
	return(0);
d169 10
a178 11
 static int
#ifdef KR_headers
wrt_IM(n,w,m,len,base) Uint *n; ftnlen len; int base;
#else
wrt_IM(Uint *n, int w, int m, ftnlen len, int base)
#endif
{	int ndigit,sign,spare,i,xsign;
	longint x;
	char *ans;
	if(sizeof(integer)==len) x=n->il;
	else if(len == sizeof(char)) x = n->ic;
d180 2
a181 1
	else if (len == sizeof(longint)) x = n->ili;
d183 40
a222 31
	else x=n->is;
	ans=f__icvt(x,&ndigit,&sign, base);
	if(sign || f__cplus) xsign=1;
	else xsign=0;
	if(ndigit+xsign>w || m+xsign>w)
	{	for(i=0;i<w;i++) (*f__putn)('*');
		return(0);
	}
	if(x==0 && m==0)
	{	for(i=0;i<w;i++) (*f__putn)(' ');
		return(0);
	}
	if(ndigit>=m)
		spare=w-ndigit-xsign;
	else
		spare=w-m-xsign;
	for(i=0;i<spare;i++) (*f__putn)(' ');
	if(sign) (*f__putn)('-');
	else if(f__cplus) (*f__putn)('+');
	for(i=0;i<m-ndigit;i++) (*f__putn)('0');
	for(i=0;i<ndigit;i++) (*f__putn)(*ans++);
	return(0);
}
 static int
#ifdef KR_headers
wrt_AP(s) char *s;
#else
wrt_AP(char *s)
#endif
{	char quote;
	int i;
d224 13
a236 9
	if(f__cursor && (i = mv_cur()))
		return i;
	quote = *s++;
	for(;*s;s++)
	{	if(*s!=quote) (*f__putn)(*s);
		else if(*++s==quote) (*f__putn)(*s);
		else return(1);
	}
	return(1);
d238 2
a239 6
 static int
#ifdef KR_headers
wrt_H(a,s) char *s;
#else
wrt_H(int a, char *s)
#endif
d241 8
a248 1
	int i;
d250 21
a270 27
	if(f__cursor && (i = mv_cur()))
		return i;
	while(a--) (*f__putn)(*s++);
	return(1);
}
#ifdef KR_headers
wrt_L(n,len, sz) Uint *n; ftnlen sz;
#else
wrt_L(Uint *n, int len, ftnlen sz)
#endif
{	int i;
	long x;
	if(sizeof(long)==sz) x=n->il;
	else if(sz == sizeof(char)) x = n->ic;
	else x=n->is;
	for(i=0;i<len-1;i++)
		(*f__putn)(' ');
	if(x) (*f__putn)('T');
	else (*f__putn)('F');
	return(0);
}
 static int
#ifdef KR_headers
wrt_A(p,len) char *p; ftnlen len;
#else
wrt_A(char *p, ftnlen len)
#endif
d272 3
a274 2
	while(len-- > 0) (*f__putn)(*p++);
	return(0);
d276 2
a277 6
 static int
#ifdef KR_headers
wrt_AW(p,w,len) char * p; ftnlen len;
#else
wrt_AW(char * p, int w, ftnlen len)
#endif
d279 8
a286 7
	while(w>len)
	{	w--;
		(*f__putn)(' ');
	}
	while(w-- > 0)
		(*f__putn)(*p++);
	return(0);
d289 33
a321 29
 static int
#ifdef KR_headers
wrt_G(p,w,d,e,len) ufloat *p; ftnlen len;
#else
wrt_G(ufloat *p, int w, int d, int e, ftnlen len)
#endif
{	double up = 1,x;
	int i=0,oldscale,n,j;
	x = len==sizeof(real)?p->pf:p->pd;
	if(x < 0 ) x = -x;
	if(x<.1) {
		if (x != 0.)
			return(wrt_E(p,w,d,e,len));
		i = 1;
		goto have_i;
		}
	for(;i<=d;i++,up*=10)
	{	if(x>=up) continue;
 have_i:
		oldscale = f__scale;
		f__scale = 0;
		if(e==0) n=4;
		else	n=e+2;
		i=wrt_F(p,w-n,d-i,len);
		for(j=0;j<n;j++) (*f__putn)(' ');
		f__scale=oldscale;
		return(i);
	}
	return(wrt_E(p,w,d,e,len));
d323 3
a325 5
#ifdef KR_headers
w_ed(p,ptr,len) struct syl *p; char *ptr; ftnlen len;
#else
w_ed(struct syl *p, char *ptr, ftnlen len)
#endif
d327 1
a327 1
	int i;
d329 43
a371 37
	if(f__cursor && (i = mv_cur()))
		return i;
	switch(p->op)
	{
	default:
		fprintf(stderr,"w_ed, unexpected code: %d\n", p->op);
		sig_die(f__fmtbuf, 1);
	case I:	return(wrt_I((Uint *)ptr,p->p1,len, 10));
	case IM:
		return(wrt_IM((Uint *)ptr,p->p1,p->p2.i[0],len,10));

		/* O and OM don't work right for character, double, complex, */
		/* or doublecomplex, and they differ from Fortran 90 in */
		/* showing a minus sign for negative values. */

	case O:	return(wrt_I((Uint *)ptr, p->p1, len, 8));
	case OM:
		return(wrt_IM((Uint *)ptr,p->p1,p->p2.i[0],len,8));
	case L:	return(wrt_L((Uint *)ptr,p->p1, len));
	case A: return(wrt_A(ptr,len));
	case AW:
		return(wrt_AW(ptr,p->p1,len));
	case D:
	case E:
	case EE:
		return(wrt_E((ufloat *)ptr,p->p1,p->p2.i[0],p->p2.i[1],len));
	case G:
	case GE:
		return(wrt_G((ufloat *)ptr,p->p1,p->p2.i[0],p->p2.i[1],len));
	case F:	return(wrt_F((ufloat *)ptr,p->p1,p->p2.i[0],len));

		/* Z and ZM assume 8-bit bytes. */

	case Z: return(wrt_Z((Uint *)ptr,p->p1,0,len));
	case ZM:
		return(wrt_Z((Uint *)ptr,p->p1,p->p2.i[0],len));
	}
d373 3
a375 5
#ifdef KR_headers
w_ned(p) struct syl *p;
#else
w_ned(struct syl *p)
#endif
d377 24
a400 21
	switch(p->op)
	{
	default: fprintf(stderr,"w_ned, unexpected code: %d\n", p->op);
		sig_die(f__fmtbuf, 1);
	case SLASH:
		return((*f__donewrec)());
	case T: f__cursor = p->p1-f__recpos - 1;
		return(1);
	case TL: f__cursor -= p->p1;
		if(f__cursor < -f__recpos)	/* TL1000, 1X */
			f__cursor = -f__recpos;
		return(1);
	case TR:
	case X:
		f__cursor += p->p1;
		return(1);
	case APOS:
		return(wrt_AP(p->p2.s));
	case H:
		return(wrt_H(p->p1,p->p2.s));
	}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d9 2
a10 2
static int
mv_cur (void)			/* shouldn't use fseek because it insists on calling fflush */
d13 30
a42 12
  int cursor = f__cursor;
  f__cursor = 0;
  if (f__external == 0)
    {
      if (cursor < 0)
	{
	  if (f__hiwater < f__recpos)
	    f__hiwater = f__recpos;
	  f__recpos += cursor;
	  f__icptr += cursor;
	  if (f__recpos < 0)
	    err (f__elist->cierr, 110, "left off");
d44 12
a55 34
      else if (cursor > 0)
	{
	  if (f__recpos + cursor >= f__svic->icirlen)
	    err (f__elist->cierr, 110, "recend");
	  if (f__hiwater <= f__recpos)
	    for (; cursor > 0; cursor--)
	      (*f__putn) (' ');
	  else if (f__hiwater <= f__recpos + cursor)
	    {
	      cursor -= f__hiwater - f__recpos;
	      f__icptr += f__hiwater - f__recpos;
	      f__recpos = f__hiwater;
	      for (; cursor > 0; cursor--)
		(*f__putn) (' ');
	    }
	  else
	    {
	      f__icptr += cursor;
	      f__recpos += cursor;
	    }
	}
      return (0);
    }
  if (cursor > 0)
    {
      if (f__hiwater <= f__recpos)
	for (; cursor > 0; cursor--)
	  (*f__putn) (' ');
      else if (f__hiwater <= f__recpos + cursor)
	{
	  cursor -= f__hiwater - f__recpos;
	  f__recpos = f__hiwater;
	  for (; cursor > 0; cursor--)
	    (*f__putn) (' ');
d57 1
a57 1
      else
d59 5
a63 1
	  f__recpos += cursor;
d65 1
a65 10
    }
  else if (cursor < 0)
    {
      if (cursor + f__recpos < 0)
	err (f__elist->cierr, 110, "left off");
      if (f__hiwater < f__recpos)
	f__hiwater = f__recpos;
      f__recpos += cursor;
    }
  return (0);
d68 6
a73 2
static int
wrt_Z (Uint * n, int w, int minlen, ftnlen len)
d75 46
a120 41
  register char *s, *se;
  register int i, w1;
  static int one = 1;
  static char hex[] = "0123456789ABCDEF";
  s = (char *) n;
  --len;
  if (*(char *) &one)
    {
      /* little endian */
      se = s;
      s += len;
      i = -1;
    }
  else
    {
      se = s + len;
      i = 1;
    }
  for (;; s += i)
    if (s == se || *s)
      break;
  w1 = (i * (se - s) << 1) + 1;
  if (*s & 0xf0)
    w1++;
  if (w1 > w)
    for (i = 0; i < w; i++)
      (*f__putn) ('*');
  else
    {
      if ((minlen -= w1) > 0)
	w1 += minlen;
      while (--w >= w1)
	(*f__putn) (' ');
      while (--minlen >= 0)
	(*f__putn) ('0');
      if (!(*s & 0xf0))
	{
	  (*f__putn) (hex[*s & 0xf]);
	  if (s == se)
	    return 0;
	  s += i;
a121 10
      for (;; s += i)
	{
	  (*f__putn) (hex[*s >> 4 & 0xf]);
	  (*f__putn) (hex[*s & 0xf]);
	  if (s == se)
	    break;
	}
    }
  return 0;
}
d123 11
a133 10
static int
wrt_I (Uint * n, int w, ftnlen len, register int base)
{
  int ndigit, sign, spare, i;
  longint x;
  char *ans;
  if (len == sizeof (integer))
    x = n->il;
  else if (len == sizeof (char))
    x = n->ic;
d135 1
a135 2
  else if (len == sizeof (longint))
    x = n->ili;
d137 13
a149 21
  else
    x = n->is;
  ans = f__icvt (x, &ndigit, &sign, base);
  spare = w - ndigit;
  if (sign || f__cplus)
    spare--;
  if (spare < 0)
    for (i = 0; i < w; i++)
      (*f__putn) ('*');
  else
    {
      for (i = 0; i < spare; i++)
	(*f__putn) (' ');
      if (sign)
	(*f__putn) ('-');
      else if (f__cplus)
	(*f__putn) ('+');
      for (i = 0; i < ndigit; i++)
	(*f__putn) (*ans++);
    }
  return (0);
d151 11
a161 10
static int
wrt_IM (Uint * n, int w, int m, ftnlen len, int base)
{
  int ndigit, sign, spare, i, xsign;
  longint x;
  char *ans;
  if (sizeof (integer) == len)
    x = n->il;
  else if (len == sizeof (char))
    x = n->ic;
d163 30
a192 2
  else if (len == sizeof (longint))
    x = n->ili;
d194 2
a195 40
  else
    x = n->is;
  ans = f__icvt (x, &ndigit, &sign, base);
  if (sign || f__cplus)
    xsign = 1;
  else
    xsign = 0;
  if (ndigit + xsign > w || m + xsign > w)
    {
      for (i = 0; i < w; i++)
	(*f__putn) ('*');
      return (0);
    }
  if (x == 0 && m == 0)
    {
      for (i = 0; i < w; i++)
	(*f__putn) (' ');
      return (0);
    }
  if (ndigit >= m)
    spare = w - ndigit - xsign;
  else
    spare = w - m - xsign;
  for (i = 0; i < spare; i++)
    (*f__putn) (' ');
  if (sign)
    (*f__putn) ('-');
  else if (f__cplus)
    (*f__putn) ('+');
  for (i = 0; i < m - ndigit; i++)
    (*f__putn) ('0');
  for (i = 0; i < ndigit; i++)
    (*f__putn) (*ans++);
  return (0);
}
static int
wrt_AP (char *s)
{
  char quote;
  int i;
d197 9
a205 13
  if (f__cursor && (i = mv_cur ()))
    return i;
  quote = *s++;
  for (; *s; s++)
    {
      if (*s != quote)
	(*f__putn) (*s);
      else if (*++s == quote)
	(*f__putn) (*s);
      else
	return (1);
    }
  return (1);
d207 6
a212 2
static int
wrt_H (int a, char *s)
d214 1
a214 1
  int i;
d216 27
a242 9
  if (f__cursor && (i = mv_cur ()))
    return i;
  while (a--)
    (*f__putn) (*s++);
  return (1);
}

int
wrt_L (Uint * n, int len, ftnlen sz)
d244 2
a245 15
  int i;
  long x;
  if (sizeof (long) == sz)
    x = n->il;
  else if (sz == sizeof (char))
    x = n->ic;
  else
    x = n->is;
  for (i = 0; i < len - 1; i++)
    (*f__putn) (' ');
  if (x)
    (*f__putn) ('T');
  else
    (*f__putn) ('F');
  return (0);
d247 6
a252 2
static int
wrt_A (char *p, ftnlen len)
d254 7
a260 15
  while (len-- > 0)
    (*f__putn) (*p++);
  return (0);
}
static int
wrt_AW (char *p, int w, ftnlen len)
{
  while (w > len)
    {
      w--;
      (*f__putn) (' ');
    }
  while (w-- > 0)
    (*f__putn) (*p++);
  return (0);
d263 29
a291 33
static int
wrt_G (ufloat * p, int w, int d, int e, ftnlen len)
{
  double up = 1, x;
  int i = 0, oldscale, n, j;
  x = len == sizeof (real) ? p->pf : p->pd;
  if (x < 0)
    x = -x;
  if (x < .1)
    {
      if (x != 0.)
	return (wrt_E (p, w, d, e, len));
      i = 1;
      goto have_i;
    }
  for (; i <= d; i++, up *= 10)
    {
      if (x >= up)
	continue;
    have_i:
      oldscale = f__scale;
      f__scale = 0;
      if (e == 0)
	n = 4;
      else
	n = e + 2;
      i = wrt_F (p, w - n, d - i, len);
      for (j = 0; j < n; j++)
	(*f__putn) (' ');
      f__scale = oldscale;
      return (i);
    }
  return (wrt_E (p, w, d, e, len));
d293 5
a297 3

int
w_ed (struct syl * p, char *ptr, ftnlen len)
d299 1
a299 1
  int i;
d301 37
a337 43
  if (f__cursor && (i = mv_cur ()))
    return i;
  switch (p->op)
    {
    default:
      fprintf (stderr, "w_ed, unexpected code: %d\n", p->op);
      sig_die (f__fmtbuf, 1);
    case I:
      return (wrt_I ((Uint *) ptr, p->p1, len, 10));
    case IM:
      return (wrt_IM ((Uint *) ptr, p->p1, p->p2.i[0], len, 10));

      /* O and OM don't work right for character, double, complex, */
      /* or doublecomplex, and they differ from Fortran 90 in */
      /* showing a minus sign for negative values. */

    case O:
      return (wrt_I ((Uint *) ptr, p->p1, len, 8));
    case OM:
      return (wrt_IM ((Uint *) ptr, p->p1, p->p2.i[0], len, 8));
    case L:
      return (wrt_L ((Uint *) ptr, p->p1, len));
    case A:
      return (wrt_A (ptr, len));
    case AW:
      return (wrt_AW (ptr, p->p1, len));
    case D:
    case E:
    case EE:
      return (wrt_E ((ufloat *) ptr, p->p1, p->p2.i[0], p->p2.i[1], len));
    case G:
    case GE:
      return (wrt_G ((ufloat *) ptr, p->p1, p->p2.i[0], p->p2.i[1], len));
    case F:
      return (wrt_F ((ufloat *) ptr, p->p1, p->p2.i[0], len));

      /* Z and ZM assume 8-bit bytes. */

    case Z:
      return (wrt_Z ((Uint *) ptr, p->p1, 0, len));
    case ZM:
      return (wrt_Z ((Uint *) ptr, p->p1, p->p2.i[0], len));
    }
d339 5
a343 3

int
w_ned (struct syl * p)
d345 21
a365 24
  switch (p->op)
    {
    default:
      fprintf (stderr, "w_ned, unexpected code: %d\n", p->op);
      sig_die (f__fmtbuf, 1);
    case SLASH:
      return ((*f__donewrec) ());
    case T:
      f__cursor = p->p1 - f__recpos - 1;
      return (1);
    case TL:
      f__cursor -= p->p1;
      if (f__cursor < -f__recpos)	/* TL1000, 1X */
	f__cursor = -f__recpos;
      return (1);
    case TR:
    case X:
      f__cursor += p->p1;
      return (1);
    case APOS:
      return (wrt_AP (p->p2.s));
    case H:
      return (wrt_H (p->p1, p->p2.s));
    }
@

