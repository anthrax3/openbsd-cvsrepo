head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.14;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.14;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "config.h"
#ifndef NON_UNIX_STDIO
#define _INCLUDE_POSIX_SOURCE	/* for HP-UX */
#define _INCLUDE_XOPEN_SOURCE	/* for HP-UX */
#include <sys/types.h>
#include <sys/stat.h>
#endif
#include "f2c.h"
#undef abs
#undef min
#undef max
#include <stdlib.h>
#include "fio.h"
#include "fmt.h"		/* for struct syl */

/*global definitions*/
unit f__units[MXUNIT];		/*unit table */
int f__init;			/*bit 0: set after initializations;
				   bit 1: set during I/O involving returns to
				   caller of library (or calls to user code) */
cilist *f__elist;		/*active external io list */
icilist *f__svic;		/*active internal io list */
flag f__reading;		/*1 if reading, 0 if writing */
flag f__cplus, f__cblank;
char *f__fmtbuf;
int f__fmtlen;
flag f__external;		/*1 if external io, 0 if internal */
int (*f__getn) (void);		/* for formatted input */
void (*f__putn) (int);		/* for formatted output */
int (*f__doed) (struct syl *, char *, ftnlen), (*f__doned) (struct syl *);
int (*f__dorevert) (void), (*f__donewrec) (void), (*f__doend) (void);
flag f__sequential;		/*1 if sequential io, 0 if direct */
flag f__formatted;		/*1 if formatted io, 0 if unformatted */
FILE *f__cf;			/*current file */
unit *f__curunit;		/*current unit */
int f__recpos;			/*place in current record */
int f__cursor, f__hiwater, f__scale;
char *f__icptr;

/*error messages*/
char *F_err[] = {
  "error in format",		/* 100 */
  "illegal unit number",	/* 101 */
  "formatted io not allowed",	/* 102 */
  "unformatted io not allowed",	/* 103 */
  "direct io not allowed",	/* 104 */
  "sequential io not allowed",	/* 105 */
  "can't backspace file",	/* 106 */
  "null file name",		/* 107 */
  "can't stat file",		/* 108 */
  "unit not connected",		/* 109 */
  "off end of record",		/* 110 */
  "truncation failed in endfile",	/* 111 */
  "incomprehensible list input",	/* 112 */
  "out of free space",		/* 113 */
  "unit not connected",		/* 114 */
  "read unexpected character",	/* 115 */
  "bad logical input field",	/* 116 */
  "bad variable type",		/* 117 */
  "bad namelist name",		/* 118 */
  "variable not in namelist",	/* 119 */
  "no end record",		/* 120 */
  "variable count incorrect",	/* 121 */
  "subscript for scalar variable",	/* 122 */
  "invalid array section",	/* 123 */
  "substring out of bounds",	/* 124 */
  "subscript out of bounds",	/* 125 */
  "can't read file",		/* 126 */
  "can't write file",		/* 127 */
  "'new' file exists",		/* 128 */
  "can't append to file",	/* 129 */
  "non-positive record number",	/* 130 */
  "I/O started while already doing I/O",	/* 131 */
  "Temporary file name (TMPDIR?) too long"	/* 132 */
};
#define MAXERR (sizeof(F_err)/sizeof(char *)+100)

int
f__canseek (FILE * f) /*SYSDEP*/
{
#ifdef NON_UNIX_STDIO
  return !isatty (fileno (f));
#else
  struct stat x;

  if (fstat (fileno (f), &x) < 0)
    return (0);
#ifdef S_IFMT
  switch (x.st_mode & S_IFMT)
    {
    case S_IFDIR:
    case S_IFREG:
      if (x.st_nlink > 0)	/* !pipe */
	return (1);
      else
	return (0);
    case S_IFCHR:
      if (isatty (fileno (f)))
	return (0);
      return (1);
#ifdef S_IFBLK
    case S_IFBLK:
      return (1);
#endif
    }
#else
#ifdef S_ISDIR
  /* POSIX version */
  if (S_ISREG (x.st_mode) || S_ISDIR (x.st_mode))
    {
      if (x.st_nlink > 0)	/* !pipe */
	return (1);
      else
	return (0);
    }
  if (S_ISCHR (x.st_mode))
    {
      if (isatty (fileno (f)))
	return (0);
      return (1);
    }
  if (S_ISBLK (x.st_mode))
    return (1);
#else
  Help ! How does fstat work on this system ?
#endif
#endif
    return (0);			/* who knows what it is? */
#endif
}

void
f__fatal (int n, char *s)
{
  static int dead = 0;

  if (n < 100 && n >= 0)
    perror (s);
  /*SYSDEP*/
  else if (n >= (int) MAXERR || n < -1)
    {
      fprintf (stderr, "%s: illegal error number %d\n", s, n);
    }
  else if (n == -1)
    fprintf (stderr, "%s: end of file\n", s);
  else
    fprintf (stderr, "%s: %s\n", s, F_err[n - 100]);
  if (dead)
    {
      fprintf (stderr, "(libf2c f__fatal already called, aborting.)");
      abort ();
    }
  dead = 1;
  if (f__init & 1)
    {
      if (f__curunit)
	{
	  fprintf (stderr, "apparent state: unit %d ",
		   (int) (f__curunit - f__units));
	  fprintf (stderr, f__curunit->ufnm ? "named %s\n" : "(unnamed)\n",
		   f__curunit->ufnm);
	}
      else
	fprintf (stderr, "apparent state: internal I/O\n");
      if (f__fmtbuf)
	fprintf (stderr, "last format: %.*s\n", f__fmtlen, f__fmtbuf);
      fprintf (stderr, "lately %s %s %s %s",
	       f__reading ? "reading" : "writing",
	       f__sequential ? "sequential" : "direct",
	       f__formatted ? "formatted" : "unformatted",
	       f__external ? "external" : "internal");
    }
  f__init &= ~2;		/* No longer doing I/O (no more user code to be called). */
  sig_die (" IO", 1);
}

/*initialization routine*/
void
f_init (void)
{
  unit *p;

  if (f__init & 2)
    f__fatal (131, "I/O recursion");
  f__init = 1;
  p = &f__units[0];
  p->ufd = stderr;
  p->useek = f__canseek (stderr);
  p->ufmt = 1;
  p->uwrt = 1;
  p = &f__units[5];
  p->ufd = stdin;
  p->useek = f__canseek (stdin);
  p->ufmt = 1;
  p->uwrt = 0;
  p = &f__units[6];
  p->ufd = stdout;
  p->useek = f__canseek (stdout);
  p->ufmt = 1;
  p->uwrt = 1;
}

int
f__nowreading (unit * x)
{
  off_t loc;
  int ufmt, urw;
  extern char *f__r_mode[], *f__w_mode[];

  if (x->urw & 1)
    goto done;
  if (!x->ufnm)
    goto cantread;
  ufmt = x->url ? 0 : x->ufmt;
  loc = FTELL (x->ufd);
  urw = 3;
  if (!freopen (x->ufnm, f__w_mode[ufmt | 2], x->ufd))
    {
      urw = 1;
      if (!freopen (x->ufnm, f__r_mode[ufmt], x->ufd))
	{
	cantread:
	  errno = 126;
	  return 1;
	}
    }
  FSEEK (x->ufd, loc, SEEK_SET);
  x->urw = urw;
done:
  x->uwrt = 0;
  return 0;
}

int
f__nowwriting (unit * x)
{
  off_t loc;
  int ufmt;
  extern char *f__w_mode[];

  if (x->urw & 2)
    goto done;
  if (!x->ufnm)
    goto cantwrite;
  ufmt = x->url ? 0 : x->ufmt;
  if (x->uwrt == 3)
    {				/* just did write, rewind */
      if (!(f__cf = x->ufd = freopen (x->ufnm, f__w_mode[ufmt], x->ufd)))
	goto cantwrite;
      x->urw = 2;
    }
  else
    {
      loc = FTELL (x->ufd);
      if (!(f__cf = x->ufd = freopen (x->ufnm, f__w_mode[ufmt |= 2], x->ufd)))
	{
	  x->ufd = NULL;
	cantwrite:
	  errno = 127;
	  return (1);
	}
      x->urw = 3;
      FSEEK (x->ufd, loc, SEEK_SET);
    }
done:
  x->uwrt = 1;
  return 0;
}

int
err__fl (int f, int m, char *s)
{
  if (!f)
    f__fatal (m, s);
  if (f__doend)
    (*f__doend) ();
  f__init &= ~2;
  return errno = m;
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@a8 3
#ifdef KR_headers
extern char *malloc();
#else
a12 1
#endif
d14 1
a14 1
#include "fmt.h"	/* for struct syl */
d17 8
a24 8
unit f__units[MXUNIT];	/*unit table*/
int f__init;	/*bit 0: set after initializations;
		  bit 1: set during I/O involving returns to
		    caller of library (or calls to user code)*/
cilist *f__elist;	/*active external io list*/
icilist *f__svic;	/*active internal io list*/
flag f__reading;	/*1 if reading, 0 if writing*/
flag f__cplus,f__cblank;
d27 10
a36 17
flag f__external;	/*1 if external io, 0 if internal */
#ifdef KR_headers
int (*f__doed)(),(*f__doned)();
int (*f__doend)(),(*f__donewrec)(),(*f__dorevert)();
int (*f__getn)();	/* for formatted input */
void (*f__putn)();	/* for formatted output */
#else
int (*f__getn)(void);	/* for formatted input */
void (*f__putn)(int);	/* for formatted output */
int (*f__doed)(struct syl*, char*, ftnlen),(*f__doned)(struct syl*);
int (*f__dorevert)(void),(*f__donewrec)(void),(*f__doend)(void);
#endif
flag f__sequential;	/*1 if sequential io, 0 if direct*/
flag f__formatted;	/*1 if formatted io, 0 if unformatted*/
FILE *f__cf;	/*current file*/
unit *f__curunit;	/*current unit*/
int f__recpos;	/*place in current record*/
d41 34
a74 35
char *F_err[] =
{
	"error in format",				/* 100 */
	"illegal unit number",				/* 101 */
	"formatted io not allowed",			/* 102 */
	"unformatted io not allowed",			/* 103 */
	"direct io not allowed",			/* 104 */
	"sequential io not allowed",			/* 105 */
	"can't backspace file",				/* 106 */
	"null file name",				/* 107 */
	"can't stat file",				/* 108 */
	"unit not connected",				/* 109 */
	"off end of record",				/* 110 */
	"truncation failed in endfile",			/* 111 */
	"incomprehensible list input",			/* 112 */
	"out of free space",				/* 113 */
	"unit not connected",				/* 114 */
	"read unexpected character",			/* 115 */
	"bad logical input field",			/* 116 */
	"bad variable type",				/* 117 */
	"bad namelist name",				/* 118 */
	"variable not in namelist",			/* 119 */
	"no end record",				/* 120 */
	"variable count incorrect",			/* 121 */
	"subscript for scalar variable",		/* 122 */
	"invalid array section",			/* 123 */
	"substring out of bounds",			/* 124 */
	"subscript out of bounds",			/* 125 */
	"can't read file",				/* 126 */
	"can't write file",				/* 127 */
	"'new' file exists",				/* 128 */
	"can't append to file",				/* 129 */
	"non-positive record number",			/* 130 */
	"I/O started while already doing I/O",		/* 131 */
	"Temporary file name (TMPDIR?) too long"        /* 132 */
d78 2
a79 5
#ifdef KR_headers
f__canseek(f) FILE *f; /*SYSDEP*/
#else
f__canseek(FILE *f) /*SYSDEP*/
#endif
d82 1
a82 1
	return !isatty(fileno(f));
d84 1
a84 1
	struct stat x;
d86 2
a87 2
	if (fstat(fileno(f),&x) < 0)
		return(0);
d89 12
a100 11
	switch(x.st_mode & S_IFMT) {
	case S_IFDIR:
	case S_IFREG:
		if(x.st_nlink > 0)	/* !pipe */
			return(1);
		else
			return(0);
	case S_IFCHR:
		if(isatty(fileno(f)))
			return(0);
		return(1);
d102 2
a103 2
	case S_IFBLK:
		return(1);
d105 1
a105 1
	}
d108 16
a123 14
	/* POSIX version */
	if (S_ISREG(x.st_mode) || S_ISDIR(x.st_mode)) {
		if(x.st_nlink > 0)	/* !pipe */
			return(1);
		else
			return(0);
		}
	if (S_ISCHR(x.st_mode)) {
		if(isatty(fileno(f)))
			return(0);
		return(1);
		}
	if (S_ISBLK(x.st_mode))
		return(1);
d125 1
a125 1
	Help! How does fstat work on this system?
d128 1
a128 1
	return(0);	/* who knows what it is? */
d132 2
a133 6
 void
#ifdef KR_headers
f__fatal(n,s) char *s;
#else
f__fatal(int n, char *s)
#endif
d135 1
a135 1
	static int dead = 0;
d137 25
a161 26
	if(n<100 && n>=0) perror(s); /*SYSDEP*/
	else if(n >= (int)MAXERR || n < -1)
	{	fprintf(stderr,"%s: illegal error number %d\n",s,n);
	}
	else if(n == -1) fprintf(stderr,"%s: end of file\n",s);
	else
		fprintf(stderr,"%s: %s\n",s,F_err[n-100]);
	if (dead) {
		fprintf (stderr, "(libf2c f__fatal already called, aborting.)");
		abort();
	}
	dead = 1;
	if (f__init & 1) {
		if (f__curunit) {
			fprintf(stderr,"apparent state: unit %d ",
				(int)(f__curunit-f__units));
			fprintf(stderr, f__curunit->ufnm ? "named %s\n" : "(unnamed)\n",
				f__curunit->ufnm);
			}
		else
			fprintf(stderr,"apparent state: internal I/O\n");
		if (f__fmtbuf)
			fprintf(stderr,"last format: %.*s\n",f__fmtlen,f__fmtbuf);
		fprintf(stderr,"lately %s %s %s %s",f__reading?"reading":"writing",
			f__sequential?"sequential":"direct",f__formatted?"formatted":"unformatted",
			f__external?"external":"internal");
d163 12
a174 2
	f__init &= ~2;	/* No longer doing I/O (no more user code to be called). */
	sig_die(" IO", 1);
d176 1
d178 23
a200 22
 VOID
f_init(Void)
{	unit *p;

	if (f__init & 2)
		f__fatal (131, "I/O recursion");
	f__init = 1;
	p= &f__units[0];
	p->ufd=stderr;
	p->useek=f__canseek(stderr);
	p->ufmt=1;
	p->uwrt=1;
	p = &f__units[5];
	p->ufd=stdin;
	p->useek=f__canseek(stdin);
	p->ufmt=1;
	p->uwrt=0;
	p= &f__units[6];
	p->ufd=stdout;
	p->useek=f__canseek(stdout);
	p->ufmt=1;
	p->uwrt=1;
d202 3
a204 5
#ifdef KR_headers
f__nowreading(x) unit *x;
#else
f__nowreading(unit *x)
#endif
d206 26
a231 24
	off_t loc;
	int ufmt, urw;
	extern char *f__r_mode[], *f__w_mode[];

	if (x->urw & 1)
		goto done;
	if (!x->ufnm)
		goto cantread;
	ufmt = x->url ? 0 : x->ufmt;
	loc = FTELL(x->ufd);
	urw = 3;
	if (!freopen(x->ufnm, f__w_mode[ufmt|2], x->ufd)) {
		urw = 1;
		if(!freopen(x->ufnm, f__r_mode[ufmt], x->ufd)) {
 cantread:
			errno = 126;
			return 1;
			}
		}
	FSEEK(x->ufd,loc,SEEK_SET);
	x->urw = urw;
 done:
	x->uwrt = 0;
	return 0;
d233 3
a235 5
#ifdef KR_headers
f__nowwriting(x) unit *x;
#else
f__nowwriting(unit *x)
#endif
d237 31
a267 31
	off_t loc;
	int ufmt;
	extern char *f__w_mode[];

	if (x->urw & 2)
		goto done;
	if (!x->ufnm)
		goto cantwrite;
	ufmt = x->url ? 0 : x->ufmt;
	if (x->uwrt == 3) { /* just did write, rewind */
		if (!(f__cf = x->ufd =
				freopen(x->ufnm,f__w_mode[ufmt],x->ufd)))
			goto cantwrite;
		x->urw = 2;
		}
	else {
		loc=FTELL(x->ufd);
		if (!(f__cf = x->ufd =
			freopen(x->ufnm, f__w_mode[ufmt |= 2], x->ufd)))
			{
			x->ufd = NULL;
 cantwrite:
			errno = 127;
			return(1);
			}
		x->urw = 3;
		FSEEK(x->ufd,loc,SEEK_SET);
		}
 done:
	x->uwrt = 1;
	return 0;
d270 2
a271 6
 int
#ifdef KR_headers
err__fl(f, m, s) int f, m; char *s;
#else
err__fl(int f, int m, char *s)
#endif
d273 7
a279 7
	if (!f)
		f__fatal(m, s);
	if (f__doend)
		(*f__doend)();
	f__init &= ~2;
	return errno = m;
	}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d9 3
d16 1
d18 1
a18 1
#include "fmt.h"		/* for struct syl */
d21 8
a28 8
unit f__units[MXUNIT];		/*unit table */
int f__init;			/*bit 0: set after initializations;
				   bit 1: set during I/O involving returns to
				   caller of library (or calls to user code) */
cilist *f__elist;		/*active external io list */
icilist *f__svic;		/*active internal io list */
flag f__reading;		/*1 if reading, 0 if writing */
flag f__cplus, f__cblank;
d31 17
a47 10
flag f__external;		/*1 if external io, 0 if internal */
int (*f__getn) (void);		/* for formatted input */
void (*f__putn) (int);		/* for formatted output */
int (*f__doed) (struct syl *, char *, ftnlen), (*f__doned) (struct syl *);
int (*f__dorevert) (void), (*f__donewrec) (void), (*f__doend) (void);
flag f__sequential;		/*1 if sequential io, 0 if direct */
flag f__formatted;		/*1 if formatted io, 0 if unformatted */
FILE *f__cf;			/*current file */
unit *f__curunit;		/*current unit */
int f__recpos;			/*place in current record */
d52 35
a86 34
char *F_err[] = {
  "error in format",		/* 100 */
  "illegal unit number",	/* 101 */
  "formatted io not allowed",	/* 102 */
  "unformatted io not allowed",	/* 103 */
  "direct io not allowed",	/* 104 */
  "sequential io not allowed",	/* 105 */
  "can't backspace file",	/* 106 */
  "null file name",		/* 107 */
  "can't stat file",		/* 108 */
  "unit not connected",		/* 109 */
  "off end of record",		/* 110 */
  "truncation failed in endfile",	/* 111 */
  "incomprehensible list input",	/* 112 */
  "out of free space",		/* 113 */
  "unit not connected",		/* 114 */
  "read unexpected character",	/* 115 */
  "bad logical input field",	/* 116 */
  "bad variable type",		/* 117 */
  "bad namelist name",		/* 118 */
  "variable not in namelist",	/* 119 */
  "no end record",		/* 120 */
  "variable count incorrect",	/* 121 */
  "subscript for scalar variable",	/* 122 */
  "invalid array section",	/* 123 */
  "substring out of bounds",	/* 124 */
  "subscript out of bounds",	/* 125 */
  "can't read file",		/* 126 */
  "can't write file",		/* 127 */
  "'new' file exists",		/* 128 */
  "can't append to file",	/* 129 */
  "non-positive record number",	/* 130 */
  "I/O started while already doing I/O",	/* 131 */
  "Temporary file name (TMPDIR?) too long"	/* 132 */
d90 5
a94 2
int
f__canseek (FILE * f) /*SYSDEP*/
d97 1
a97 1
  return !isatty (fileno (f));
d99 1
a99 1
  struct stat x;
d101 2
a102 2
  if (fstat (fileno (f), &x) < 0)
    return (0);
d104 11
a114 12
  switch (x.st_mode & S_IFMT)
    {
    case S_IFDIR:
    case S_IFREG:
      if (x.st_nlink > 0)	/* !pipe */
	return (1);
      else
	return (0);
    case S_IFCHR:
      if (isatty (fileno (f)))
	return (0);
      return (1);
d116 2
a117 2
    case S_IFBLK:
      return (1);
d119 1
a119 1
    }
d122 14
a135 16
  /* POSIX version */
  if (S_ISREG (x.st_mode) || S_ISDIR (x.st_mode))
    {
      if (x.st_nlink > 0)	/* !pipe */
	return (1);
      else
	return (0);
    }
  if (S_ISCHR (x.st_mode))
    {
      if (isatty (fileno (f)))
	return (0);
      return (1);
    }
  if (S_ISBLK (x.st_mode))
    return (1);
d137 1
a137 1
  Help ! How does fstat work on this system ?
d140 1
a140 1
    return (0);			/* who knows what it is? */
d144 6
a149 2
void
f__fatal (int n, char *s)
d151 1
a151 1
  static int dead = 0;
d153 26
a178 25
  if (n < 100 && n >= 0)
    perror (s);
  /*SYSDEP*/
  else if (n >= (int) MAXERR || n < -1)
    {
      fprintf (stderr, "%s: illegal error number %d\n", s, n);
    }
  else if (n == -1)
    fprintf (stderr, "%s: end of file\n", s);
  else
    fprintf (stderr, "%s: %s\n", s, F_err[n - 100]);
  if (dead)
    {
      fprintf (stderr, "(libf2c f__fatal already called, aborting.)");
      abort ();
    }
  dead = 1;
  if (f__init & 1)
    {
      if (f__curunit)
	{
	  fprintf (stderr, "apparent state: unit %d ",
		   (int) (f__curunit - f__units));
	  fprintf (stderr, f__curunit->ufnm ? "named %s\n" : "(unnamed)\n",
		   f__curunit->ufnm);
d180 2
a181 12
      else
	fprintf (stderr, "apparent state: internal I/O\n");
      if (f__fmtbuf)
	fprintf (stderr, "last format: %.*s\n", f__fmtlen, f__fmtbuf);
      fprintf (stderr, "lately %s %s %s %s",
	       f__reading ? "reading" : "writing",
	       f__sequential ? "sequential" : "direct",
	       f__formatted ? "formatted" : "unformatted",
	       f__external ? "external" : "internal");
    }
  f__init &= ~2;		/* No longer doing I/O (no more user code to be called). */
  sig_die (" IO", 1);
a182 1

d184 28
a211 2
void
f_init (void)
d213 24
a236 20
  unit *p;

  if (f__init & 2)
    f__fatal (131, "I/O recursion");
  f__init = 1;
  p = &f__units[0];
  p->ufd = stderr;
  p->useek = f__canseek (stderr);
  p->ufmt = 1;
  p->uwrt = 1;
  p = &f__units[5];
  p->ufd = stdin;
  p->useek = f__canseek (stdin);
  p->ufmt = 1;
  p->uwrt = 0;
  p = &f__units[6];
  p->ufd = stdout;
  p->useek = f__canseek (stdout);
  p->ufmt = 1;
  p->uwrt = 1;
d238 5
a242 3

int
f__nowreading (unit * x)
d244 31
a274 26
  off_t loc;
  int ufmt, urw;
  extern char *f__r_mode[], *f__w_mode[];

  if (x->urw & 1)
    goto done;
  if (!x->ufnm)
    goto cantread;
  ufmt = x->url ? 0 : x->ufmt;
  loc = FTELL (x->ufd);
  urw = 3;
  if (!freopen (x->ufnm, f__w_mode[ufmt | 2], x->ufd))
    {
      urw = 1;
      if (!freopen (x->ufnm, f__r_mode[ufmt], x->ufd))
	{
	cantread:
	  errno = 126;
	  return 1;
	}
    }
  FSEEK (x->ufd, loc, SEEK_SET);
  x->urw = urw;
done:
  x->uwrt = 0;
  return 0;
d277 6
a282 2
int
f__nowwriting (unit * x)
d284 6
a289 24
  off_t loc;
  int ufmt;
  extern char *f__w_mode[];

  if (x->urw & 2)
    goto done;
  if (!x->ufnm)
    goto cantwrite;
  ufmt = x->url ? 0 : x->ufmt;
  if (x->uwrt == 3)
    {				/* just did write, rewind */
      if (!(f__cf = x->ufd = freopen (x->ufnm, f__w_mode[ufmt], x->ufd)))
	goto cantwrite;
      x->urw = 2;
    }
  else
    {
      loc = FTELL (x->ufd);
      if (!(f__cf = x->ufd = freopen (x->ufnm, f__w_mode[ufmt |= 2], x->ufd)))
	{
	  x->ufd = NULL;
	cantwrite:
	  errno = 127;
	  return (1);
a290 18
      x->urw = 3;
      FSEEK (x->ufd, loc, SEEK_SET);
    }
done:
  x->uwrt = 1;
  return 0;
}

int
err__fl (int f, int m, char *s)
{
  if (!f)
    f__fatal (m, s);
  if (f__doend)
    (*f__doend) ();
  f__init &= ~2;
  return errno = m;
}
@

