head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.15;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.15;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "config.h"
#include "f2c.h"
#include "fio.h"
#include <string.h>
#if defined (MSDOS) && !defined (GO32)
#undef abs
#undef min
#undef max
#include "io.h"
#endif
integer
f_inqu (inlist * a)
{
  flag byfile;
  int i, n;
  unit *p;
  char buf[256];
  long x;
  if (f__init & 2)
    f__fatal (131, "I/O recursion");
  if (a->infile != NULL)
    {
      byfile = 1;
      g_char (a->infile, a->infilen, buf);
#ifdef NON_UNIX_STDIO
      x = access (buf, 0) ? -1 : 0;
      for (i = 0, p = NULL; i < MXUNIT; i++)
	if (f__units[i].ufd != NULL
	    && f__units[i].ufnm != NULL && !strcmp (f__units[i].ufnm, buf))
	  {
	    p = &f__units[i];
	    break;
	  }
#else
      x = f__inode (buf, &n);
      for (i = 0, p = NULL; i < MXUNIT; i++)
	if (f__units[i].uinode == x
	    && f__units[i].ufd != NULL && f__units[i].udev == n)
	  {
	    p = &f__units[i];
	    break;
	  }
#endif
    }
  else
    {
      byfile = 0;
      if (a->inunit < MXUNIT && a->inunit >= 0)
	{
	  p = &f__units[a->inunit];
	}
      else
	{
	  p = NULL;
	}
    }
  if (a->inex != NULL)
    {
      if ((byfile && x != -1) || (!byfile && p != NULL))
	*a->inex = 1;
      else
	*a->inex = 0;
    }
  if (a->inopen != NULL)
    {
      if (byfile)
	*a->inopen = (p != NULL);
      else
	*a->inopen = (p != NULL && p->ufd != NULL);
    }
  if (a->innum != NULL)
    *a->innum = p - f__units;
  if (a->innamed != NULL)
    {
      if (byfile || (p != NULL && p->ufnm != NULL))
	*a->innamed = 1;
      else
	*a->innamed = 0;
    }
  if (a->inname != NULL)
    {
      if (byfile)
	b_char (buf, a->inname, a->innamlen);
      else if (p != NULL && p->ufnm != NULL)
	b_char (p->ufnm, a->inname, a->innamlen);
    }
  if (a->inacc != NULL && p != NULL && p->ufd != NULL)
    {
      if (p->url)
	b_char ("DIRECT", a->inacc, a->inacclen);
      else
	b_char ("SEQUENTIAL", a->inacc, a->inacclen);
    }
  if (a->inseq != NULL)
    {
      if (p != NULL && p->url)
	b_char ("NO", a->inseq, a->inseqlen);
      else
	b_char ("YES", a->inseq, a->inseqlen);
    }
  if (a->indir != NULL)
    {
      if (p == NULL || p->url)
	b_char ("YES", a->indir, a->indirlen);
      else
	b_char ("NO", a->indir, a->indirlen);
    }
  if (a->infmt != NULL)
    {
      if (p != NULL && p->ufmt == 0)
	b_char ("UNFORMATTED", a->infmt, a->infmtlen);
      else
	b_char ("FORMATTED", a->infmt, a->infmtlen);
    }
  if (a->inform != NULL)
    {
      if (p != NULL && p->ufmt == 0)
	b_char ("NO", a->inform, a->informlen);
      else
	b_char ("YES", a->inform, a->informlen);
    }
  if (a->inunf)
    {
      if (p != NULL && p->ufmt == 0)
	b_char ("YES", a->inunf, a->inunflen);
      else if (p != NULL)
	b_char ("NO", a->inunf, a->inunflen);
      else
	b_char ("UNKNOWN", a->inunf, a->inunflen);
    }
  if (a->inrecl != NULL && p != NULL)
    *a->inrecl = p->url;
  if (a->innrec != NULL && p != NULL && p->url > 0)
    *a->innrec = FTELL (p->ufd) / p->url + 1;
  if (a->inblank && p != NULL && p->ufmt)
    {
      if (p->ublnk)
	b_char ("ZERO", a->inblank, a->inblanklen);
      else
	b_char ("NULL", a->inblank, a->inblanklen);
    }
  return (0);
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@a4 3
#ifdef KR_headers
integer f_inqu(a) inlist *a;
#else
d11 14
a24 12
integer f_inqu(inlist *a)
#endif
{	flag byfile;
	int i, n;
	unit *p;
	char buf[256];
	long x;
	if (f__init & 2)
		f__fatal (131, "I/O recursion");
	if(a->infile!=NULL)
	{	byfile=1;
		g_char(a->infile,a->infilen,buf);
d26 8
a33 8
		x = access(buf,0) ? -1 : 0;
		for(i=0,p=NULL;i<MXUNIT;i++)
			if(f__units[i].ufd != NULL
			 && f__units[i].ufnm != NULL
			 && !strcmp(f__units[i].ufnm,buf)) {
				p = &f__units[i];
				break;
				}
d35 8
a42 8
		x=f__inode(buf, &n);
		for(i=0,p=NULL;i<MXUNIT;i++)
			if(f__units[i].uinode==x
			&& f__units[i].ufd!=NULL
			&& f__units[i].udev == n) {
				p = &f__units[i];
				break;
				}
d44 7
d52 1
a52 1
	else
d54 1
a54 9
		byfile=0;
		if(a->inunit<MXUNIT && a->inunit>=0)
		{
			p= &f__units[a->inunit];
		}
		else
		{
			p=NULL;
		}
d56 87
a142 51
	if(a->inex!=NULL)
		if(byfile && x != -1 || !byfile && p!=NULL)
			*a->inex=1;
		else *a->inex=0;
	if(a->inopen!=NULL)
		if(byfile) *a->inopen=(p!=NULL);
		else *a->inopen=(p!=NULL && p->ufd!=NULL);
	if(a->innum!=NULL) *a->innum= p-f__units;
	if(a->innamed!=NULL)
		if(byfile || p!=NULL && p->ufnm!=NULL)
			*a->innamed=1;
		else	*a->innamed=0;
	if(a->inname!=NULL)
		if(byfile)
			b_char(buf,a->inname,a->innamlen);
		else if(p!=NULL && p->ufnm!=NULL)
			b_char(p->ufnm,a->inname,a->innamlen);
	if(a->inacc!=NULL && p!=NULL && p->ufd!=NULL)
		if(p->url)
			b_char("DIRECT",a->inacc,a->inacclen);
		else	b_char("SEQUENTIAL",a->inacc,a->inacclen);
	if(a->inseq!=NULL)
		if(p!=NULL && p->url)
			b_char("NO",a->inseq,a->inseqlen);
		else	b_char("YES",a->inseq,a->inseqlen);
	if(a->indir!=NULL)
		if(p==NULL || p->url)
			b_char("YES",a->indir,a->indirlen);
		else	b_char("NO",a->indir,a->indirlen);
	if(a->infmt!=NULL)
		if(p!=NULL && p->ufmt==0)
			b_char("UNFORMATTED",a->infmt,a->infmtlen);
		else	b_char("FORMATTED",a->infmt,a->infmtlen);
	if(a->inform!=NULL)
		if(p!=NULL && p->ufmt==0)
		b_char("NO",a->inform,a->informlen);
		else b_char("YES",a->inform,a->informlen);
	if(a->inunf)
		if(p!=NULL && p->ufmt==0)
			b_char("YES",a->inunf,a->inunflen);
		else if (p!=NULL) b_char("NO",a->inunf,a->inunflen);
		else b_char("UNKNOWN",a->inunf,a->inunflen);
	if(a->inrecl!=NULL && p!=NULL)
		*a->inrecl=p->url;
	if(a->innrec!=NULL && p!=NULL && p->url>0)
		*a->innrec=FTELL(p->ufd)/p->url+1;
	if(a->inblank && p!=NULL && p->ufmt)
		if(p->ublnk)
			b_char("ZERO",a->inblank,a->inblanklen);
		else	b_char("NULL",a->inblank,a->inblanklen);
	return(0);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d5 3
d14 12
a25 14
integer
f_inqu (inlist * a)
{
  flag byfile;
  int i, n;
  unit *p;
  char buf[256];
  long x;
  if (f__init & 2)
    f__fatal (131, "I/O recursion");
  if (a->infile != NULL)
    {
      byfile = 1;
      g_char (a->infile, a->infilen, buf);
d27 8
a34 8
      x = access (buf, 0) ? -1 : 0;
      for (i = 0, p = NULL; i < MXUNIT; i++)
	if (f__units[i].ufd != NULL
	    && f__units[i].ufnm != NULL && !strcmp (f__units[i].ufnm, buf))
	  {
	    p = &f__units[i];
	    break;
	  }
d36 8
a43 8
      x = f__inode (buf, &n);
      for (i = 0, p = NULL; i < MXUNIT; i++)
	if (f__units[i].uinode == x
	    && f__units[i].ufd != NULL && f__units[i].udev == n)
	  {
	    p = &f__units[i];
	    break;
	  }
a44 7
    }
  else
    {
      byfile = 0;
      if (a->inunit < MXUNIT && a->inunit >= 0)
	{
	  p = &f__units[a->inunit];
d46 1
a46 1
      else
d48 9
a56 1
	  p = NULL;
d58 51
a108 87
    }
  if (a->inex != NULL)
    {
      if ((byfile && x != -1) || (!byfile && p != NULL))
	*a->inex = 1;
      else
	*a->inex = 0;
    }
  if (a->inopen != NULL)
    {
      if (byfile)
	*a->inopen = (p != NULL);
      else
	*a->inopen = (p != NULL && p->ufd != NULL);
    }
  if (a->innum != NULL)
    *a->innum = p - f__units;
  if (a->innamed != NULL)
    {
      if (byfile || (p != NULL && p->ufnm != NULL))
	*a->innamed = 1;
      else
	*a->innamed = 0;
    }
  if (a->inname != NULL)
    {
      if (byfile)
	b_char (buf, a->inname, a->innamlen);
      else if (p != NULL && p->ufnm != NULL)
	b_char (p->ufnm, a->inname, a->innamlen);
    }
  if (a->inacc != NULL && p != NULL && p->ufd != NULL)
    {
      if (p->url)
	b_char ("DIRECT", a->inacc, a->inacclen);
      else
	b_char ("SEQUENTIAL", a->inacc, a->inacclen);
    }
  if (a->inseq != NULL)
    {
      if (p != NULL && p->url)
	b_char ("NO", a->inseq, a->inseqlen);
      else
	b_char ("YES", a->inseq, a->inseqlen);
    }
  if (a->indir != NULL)
    {
      if (p == NULL || p->url)
	b_char ("YES", a->indir, a->indirlen);
      else
	b_char ("NO", a->indir, a->indirlen);
    }
  if (a->infmt != NULL)
    {
      if (p != NULL && p->ufmt == 0)
	b_char ("UNFORMATTED", a->infmt, a->infmtlen);
      else
	b_char ("FORMATTED", a->infmt, a->infmtlen);
    }
  if (a->inform != NULL)
    {
      if (p != NULL && p->ufmt == 0)
	b_char ("NO", a->inform, a->informlen);
      else
	b_char ("YES", a->inform, a->informlen);
    }
  if (a->inunf)
    {
      if (p != NULL && p->ufmt == 0)
	b_char ("YES", a->inunf, a->inunflen);
      else if (p != NULL)
	b_char ("NO", a->inunf, a->inunflen);
      else
	b_char ("UNKNOWN", a->inunf, a->inunflen);
    }
  if (a->inrecl != NULL && p != NULL)
    *a->inrecl = p->url;
  if (a->innrec != NULL && p != NULL && p->url > 0)
    *a->innrec = FTELL (p->ufd) / p->url + 1;
  if (a->inblank && p != NULL && p->ufmt)
    {
      if (p->ublnk)
	b_char ("ZERO", a->inblank, a->inblanklen);
      else
	b_char ("NULL", a->inblank, a->inblanklen);
    }
  return (0);
@

