head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.16;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.16;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "f2c.h"
#include "fio.h"
#include "fmt.h"
#include "lio.h"

ftnint L_len;
int f__Aquote;

static void
donewrec (void)
{
  if (f__recpos)
    (*f__donewrec) ();
}

static void
lwrt_I (longint n)
{
  char *p;
  int ndigit, sign;

  p = f__icvt (n, &ndigit, &sign, 10);
  if (f__recpos + ndigit >= L_len)
    donewrec ();
  PUT (' ');
  if (sign)
    PUT ('-');
  while (*p)
    PUT (*p++);
}
static void
lwrt_L (ftnint n, ftnlen len)
{
  if (f__recpos + LLOGW >= L_len)
    donewrec ();
  wrt_L ((Uint *) & n, LLOGW, len);
}
static void
lwrt_A (char *p, ftnlen len)
{
  int a;
  char *p1, *pe;

  a = 0;
  pe = p + len;
  if (f__Aquote)
    {
      a = 3;
      if (len > 1 && p[len - 1] == ' ')
	{
	  while (--len > 1 && p[len - 1] == ' ');
	  pe = p + len;
	}
      p1 = p;
      while (p1 < pe)
	if (*p1++ == '\'')
	  a++;
    }
  if (f__recpos + len + a >= L_len)
    donewrec ();
  if (a
#ifndef OMIT_BLANK_CC
      || !f__recpos
#endif
    )
    PUT (' ');
  if (a)
    {
      PUT ('\'');
      while (p < pe)
	{
	  if (*p == '\'')
	    PUT ('\'');
	  PUT (*p++);
	}
      PUT ('\'');
    }
  else
    while (p < pe)
      PUT (*p++);
}

static int
l_g (char *buf, double n)
{
#ifdef Old_list_output
  doublereal absn;
  char *fmt;

  absn = n;
  if (absn < 0)
    absn = -absn;
  fmt = LLOW <= absn && absn < LHIGH ? LFFMT : LEFMT;
#ifdef USE_STRLEN
  sprintf (buf, fmt, n);
  return strlen (buf);
#else
  return sprintf (buf, fmt, n);
#endif

#else
  register char *b, c, c1;

  b = buf;
  *b++ = ' ';
  if (n < 0)
    {
      *b++ = '-';
      n = -n;
    }
  else
    *b++ = ' ';
  if (n == 0)
    {
      *b++ = '0';
      *b++ = '.';
      *b = 0;
      goto f__ret;
    }
  sprintf (b, LGFMT, n);
  switch (*b)
    {
#ifndef WANT_LEAD_0
    case '0':
      while (b[0] = b[1])
	b++;
      break;
#endif
    case 'i':
    case 'I':
      /* Infinity */
    case 'n':
    case 'N':
      /* NaN */
      while (*++b);
      break;

    default:
      /* Fortran 77 insists on having a decimal point... */
      for (;; b++)
	switch (*b)
	  {
	  case 0:
	    *b++ = '.';
	    *b = 0;
	    goto f__ret;
	  case '.':
	    while (*++b);
	    goto f__ret;
	  case 'E':
	    for (c1 = '.', c = 'E'; (*b = c1); c1 = c, c = *++b);
	    goto f__ret;
	  }
    }
f__ret:
  return b - buf;
#endif
}

static void
l_put (register char *s)
{
  register void (*pn) (int) = f__putn;
  register int c;

  while ((c = *s++))
    (*pn) (c);
}

static void
lwrt_F (double n)
{
  char buf[LEFBL];

  if (f__recpos + l_g (buf, n) >= L_len)
    donewrec ();
  l_put (buf);
}
static void
lwrt_C (double a, double b)
{
  char *ba, *bb, bufa[LEFBL], bufb[LEFBL];
  int al, bl;

  al = l_g (bufa, a);
  for (ba = bufa; *ba == ' '; ba++)
    --al;
  bl = l_g (bufb, b) + 1;	/* intentionally high by 1 */
  for (bb = bufb; *bb == ' '; bb++)
    --bl;
  if (f__recpos + al + bl + 3 >= L_len)
    donewrec ();
#ifdef OMIT_BLANK_CC
  else
#endif
    PUT (' ');
  PUT ('(');
  l_put (ba);
  PUT (',');
  if (f__recpos + bl >= L_len)
    {
      (*f__donewrec) ();
#ifndef OMIT_BLANK_CC
      PUT (' ');
#endif
    }
  l_put (bb);
  PUT (')');
}

int
l_write (ftnint * number, char *ptr, ftnlen len, ftnint type)
{
#define Ptr ((flex *)ptr)
  int i;
  longint x;
  double y, z;
  real *xx;
  doublereal *yy;
  for (i = 0; i < *number; i++)
    {
      switch ((int) type)
	{
	default:
	  f__fatal (204, "unknown type in lio");
	case TYINT1:
	  x = Ptr->flchar;
	  goto xint;
	case TYSHORT:
	  x = Ptr->flshort;
	  goto xint;
#ifdef Allow_TYQUAD
	case TYQUAD:
	  x = Ptr->fllongint;
	  goto xint;
#endif
	case TYLONG:
	  x = Ptr->flint;
	xint:lwrt_I (x);
	  break;
	case TYREAL:
	  y = Ptr->flreal;
	  goto xfloat;
	case TYDREAL:
	  y = Ptr->fldouble;
	xfloat:lwrt_F (y);
	  break;
	case TYCOMPLEX:
	  xx = &Ptr->flreal;
	  y = *xx++;
	  z = *xx;
	  goto xcomplex;
	case TYDCOMPLEX:
	  yy = &Ptr->fldouble;
	  y = *yy++;
	  z = *yy;
	xcomplex:
	  lwrt_C (y, z);
	  break;
	case TYLOGICAL1:
	  x = Ptr->flchar;
	  goto xlog;
	case TYLOGICAL2:
	  x = Ptr->flshort;
	  goto xlog;
	case TYLOGICAL:
	  x = Ptr->flint;
	xlog:lwrt_L (Ptr->flint, len);
	  break;
	case TYCHAR:
	  lwrt_A (ptr, len);
	  break;
	}
      ptr += len;
    }
  return (0);
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@d9 2
a10 2
 static VOID
donewrec(Void)
d12 3
a14 3
	if (f__recpos)
		(*f__donewrec)();
	}
d16 2
a17 6
 static VOID
#ifdef KR_headers
lwrt_I(n) longint n;
#else
lwrt_I(longint n)
#endif
d19 2
a20 2
	char *p;
	int ndigit, sign;
d22 8
a29 8
	p = f__icvt(n, &ndigit, &sign, 10);
	if(f__recpos + ndigit >= L_len)
		donewrec();
	PUT(' ');
	if (sign)
		PUT('-');
	while(*p)
		PUT(*p++);
d31 2
a32 6
 static VOID
#ifdef KR_headers
lwrt_L(n, len) ftnint n; ftnlen len;
#else
lwrt_L(ftnint n, ftnlen len)
#endif
d34 3
a36 3
	if(f__recpos+LLOGW>=L_len)
		donewrec();
	wrt_L((Uint *)&n,LLOGW, len);
d38 2
a39 6
 static VOID
#ifdef KR_headers
lwrt_A(p,len) char *p; ftnlen len;
#else
lwrt_A(char *p, ftnlen len)
#endif
d41 2
a42 2
	int a;
	char *p1, *pe;
d44 18
a61 16
	a = 0;
	pe = p + len;
	if (f__Aquote) {
		a = 3;
		if (len > 1 && p[len-1] == ' ') {
			while(--len > 1 && p[len-1] == ' ');
			pe = p + len;
			}
		p1 = p;
		while(p1 < pe)
			if (*p1++ == '\'')
				a++;
		}
	if(f__recpos+len+a >= L_len)
		donewrec();
	if (a
d63 1
a63 1
		|| !f__recpos
d65 16
a80 14
		)
		PUT(' ');
	if (a) {
		PUT('\'');
		while(p < pe) {
			if (*p == '\'')
				PUT('\'');
			PUT(*p++);
			}
		PUT('\'');
		}
	else
		while(p < pe)
			PUT(*p++);
d83 2
a84 6
 static int
#ifdef KR_headers
l_g(buf, n) char *buf; double n;
#else
l_g(char *buf, double n)
#endif
d87 2
a88 2
	doublereal absn;
	char *fmt;
d90 4
a93 4
	absn = n;
	if (absn < 0)
		absn = -absn;
	fmt = LLOW <= absn && absn < LHIGH ? LFFMT : LEFMT;
d95 2
a96 2
	sprintf(buf, fmt, n);
	return strlen(buf);
d98 1
a98 1
	return sprintf(buf, fmt, n);
d102 1
a102 1
	register char *b, c, c1;
d104 19
a122 16
	b = buf;
	*b++ = ' ';
	if (n < 0) {
		*b++ = '-';
		n = -n;
		}
	else
		*b++ = ' ';
	if (n == 0) {
		*b++ = '0';
		*b++ = '.';
		*b = 0;
		goto f__ret;
		}
	sprintf(b, LGFMT, n);
	switch(*b) {
d124 33
a156 4
		case '0':
			while(b[0] = b[1])
				b++;
			break;
d158 1
a158 30
		case 'i':
		case 'I':
			/* Infinity */
		case 'n':
		case 'N':
			/* NaN */
			while(*++b);
			break;

		default:
	/* Fortran 77 insists on having a decimal point... */
		    for(;; b++)
			switch(*b) {
			case 0:
				*b++ = '.';
				*b = 0;
				goto f__ret;
			case '.':
				while(*++b);
				goto f__ret;
			case 'E':
				for(c1 = '.', c = 'E';  *b = c1;
					c1 = c, c = *++b);
				goto f__ret;
			}
		}
 f__ret:
	return b - buf;
#endif
	}
d160 2
a161 6
 static VOID
#ifdef KR_headers
l_put(s) register char *s;
#else
l_put(register char *s)
#endif
d163 2
a164 6
#ifdef KR_headers
	register void (*pn)() = f__putn;
#else
	register void (*pn)(int) = f__putn;
#endif
	register int c;
d166 3
a168 3
	while(c = *s++)
		(*pn)(c);
	}
d170 2
a171 6
 static VOID
#ifdef KR_headers
lwrt_F(n) double n;
#else
lwrt_F(double n)
#endif
d173 1
a173 1
	char buf[LEFBL];
d175 3
a177 3
	if(f__recpos + l_g(buf,n) >= L_len)
		donewrec();
	l_put(buf);
d179 2
a180 6
 static VOID
#ifdef KR_headers
lwrt_C(a,b) double a,b;
#else
lwrt_C(double a, double b)
#endif
d182 2
a183 2
	char *ba, *bb, bufa[LEFBL], bufb[LEFBL];
	int al, bl;
d185 8
a192 8
	al = l_g(bufa, a);
	for(ba = bufa; *ba == ' '; ba++)
		--al;
	bl = l_g(bufb, b) + 1;	/* intentionally high by 1 */
	for(bb = bufb; *bb == ' '; bb++)
		--bl;
	if(f__recpos + al + bl + 3 >= L_len)
		donewrec();
d194 1
a194 1
	else
d196 7
a202 6
	PUT(' ');
	PUT('(');
	l_put(ba);
	PUT(',');
	if (f__recpos + bl >= L_len) {
		(*f__donewrec)();
d204 1
a204 1
		PUT(' ');
d206 3
a208 3
		}
	l_put(bb);
	PUT(')');
d210 3
a212 5
#ifdef KR_headers
l_write(number,ptr,len,type) ftnint *number,type; char *ptr; ftnlen len;
#else
l_write(ftnint *number, char *ptr, ftnlen len, ftnint type)
#endif
d215 8
a222 6
	int i;
	longint x;
	double y,z;
	real *xx;
	doublereal *yy;
	for(i=0;i< *number; i++)
d224 8
a231 9
		switch((int)type)
		{
		default: f__fatal(204,"unknown type in lio");
		case TYINT1:
			x = Ptr->flchar;
			goto xint;
		case TYSHORT:
			x=Ptr->flshort;
			goto xint;
d233 40
a272 42
		case TYQUAD:
			x = Ptr->fllongint;
			goto xint;
#endif
		case TYLONG:
			x=Ptr->flint;
		xint:	lwrt_I(x);
			break;
		case TYREAL:
			y=Ptr->flreal;
			goto xfloat;
		case TYDREAL:
			y=Ptr->fldouble;
		xfloat: lwrt_F(y);
			break;
		case TYCOMPLEX:
			xx= &Ptr->flreal;
			y = *xx++;
			z = *xx;
			goto xcomplex;
		case TYDCOMPLEX:
			yy = &Ptr->fldouble;
			y= *yy++;
			z = *yy;
		xcomplex:
			lwrt_C(y,z);
			break;
		case TYLOGICAL1:
			x = Ptr->flchar;
			goto xlog;
		case TYLOGICAL2:
			x = Ptr->flshort;
			goto xlog;
		case TYLOGICAL:
			x = Ptr->flint;
		xlog:	lwrt_L(Ptr->flint, len);
			break;
		case TYCHAR:
			lwrt_A(ptr,len);
			break;
		}
		ptr += len;
d274 3
a276 1
	return(0);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d9 2
a10 2
static void
donewrec (void)
d12 3
a14 3
  if (f__recpos)
    (*f__donewrec) ();
}
d16 6
a21 2
static void
lwrt_I (longint n)
d23 2
a24 2
  char *p;
  int ndigit, sign;
d26 8
a33 8
  p = f__icvt (n, &ndigit, &sign, 10);
  if (f__recpos + ndigit >= L_len)
    donewrec ();
  PUT (' ');
  if (sign)
    PUT ('-');
  while (*p)
    PUT (*p++);
d35 6
a40 2
static void
lwrt_L (ftnint n, ftnlen len)
d42 3
a44 3
  if (f__recpos + LLOGW >= L_len)
    donewrec ();
  wrt_L ((Uint *) & n, LLOGW, len);
d46 6
a51 2
static void
lwrt_A (char *p, ftnlen len)
d53 2
a54 2
  int a;
  char *p1, *pe;
d56 16
a71 18
  a = 0;
  pe = p + len;
  if (f__Aquote)
    {
      a = 3;
      if (len > 1 && p[len - 1] == ' ')
	{
	  while (--len > 1 && p[len - 1] == ' ');
	  pe = p + len;
	}
      p1 = p;
      while (p1 < pe)
	if (*p1++ == '\'')
	  a++;
    }
  if (f__recpos + len + a >= L_len)
    donewrec ();
  if (a
d73 1
a73 1
      || !f__recpos
d75 14
a88 16
    )
    PUT (' ');
  if (a)
    {
      PUT ('\'');
      while (p < pe)
	{
	  if (*p == '\'')
	    PUT ('\'');
	  PUT (*p++);
	}
      PUT ('\'');
    }
  else
    while (p < pe)
      PUT (*p++);
d91 6
a96 2
static int
l_g (char *buf, double n)
d99 2
a100 2
  doublereal absn;
  char *fmt;
d102 4
a105 4
  absn = n;
  if (absn < 0)
    absn = -absn;
  fmt = LLOW <= absn && absn < LHIGH ? LFFMT : LEFMT;
d107 2
a108 2
  sprintf (buf, fmt, n);
  return strlen (buf);
d110 1
a110 1
  return sprintf (buf, fmt, n);
d114 1
a114 1
  register char *b, c, c1;
d116 16
a131 19
  b = buf;
  *b++ = ' ';
  if (n < 0)
    {
      *b++ = '-';
      n = -n;
    }
  else
    *b++ = ' ';
  if (n == 0)
    {
      *b++ = '0';
      *b++ = '.';
      *b = 0;
      goto f__ret;
    }
  sprintf (b, LGFMT, n);
  switch (*b)
    {
d133 4
a136 33
    case '0':
      while (b[0] = b[1])
	b++;
      break;
#endif
    case 'i':
    case 'I':
      /* Infinity */
    case 'n':
    case 'N':
      /* NaN */
      while (*++b);
      break;

    default:
      /* Fortran 77 insists on having a decimal point... */
      for (;; b++)
	switch (*b)
	  {
	  case 0:
	    *b++ = '.';
	    *b = 0;
	    goto f__ret;
	  case '.':
	    while (*++b);
	    goto f__ret;
	  case 'E':
	    for (c1 = '.', c = 'E'; (*b = c1); c1 = c, c = *++b);
	    goto f__ret;
	  }
    }
f__ret:
  return b - buf;
d138 30
a167 1
}
d169 6
a174 2
static void
l_put (register char *s)
d176 6
a181 2
  register void (*pn) (int) = f__putn;
  register int c;
d183 3
a185 3
  while ((c = *s++))
    (*pn) (c);
}
d187 6
a192 2
static void
lwrt_F (double n)
d194 1
a194 1
  char buf[LEFBL];
d196 3
a198 3
  if (f__recpos + l_g (buf, n) >= L_len)
    donewrec ();
  l_put (buf);
d200 6
a205 2
static void
lwrt_C (double a, double b)
d207 2
a208 2
  char *ba, *bb, bufa[LEFBL], bufb[LEFBL];
  int al, bl;
d210 8
a217 8
  al = l_g (bufa, a);
  for (ba = bufa; *ba == ' '; ba++)
    --al;
  bl = l_g (bufb, b) + 1;	/* intentionally high by 1 */
  for (bb = bufb; *bb == ' '; bb++)
    --bl;
  if (f__recpos + al + bl + 3 >= L_len)
    donewrec ();
d219 1
a219 1
  else
d221 6
a226 7
    PUT (' ');
  PUT ('(');
  l_put (ba);
  PUT (',');
  if (f__recpos + bl >= L_len)
    {
      (*f__donewrec) ();
d228 1
a228 1
      PUT (' ');
d230 3
a232 3
    }
  l_put (bb);
  PUT (')');
d234 5
a238 3

int
l_write (ftnint * number, char *ptr, ftnlen len, ftnint type)
d241 6
a246 8
  int i;
  longint x;
  double y, z;
  real *xx;
  doublereal *yy;
  for (i = 0; i < *number; i++)
    {
      switch ((int) type)
d248 9
a256 8
	default:
	  f__fatal (204, "unknown type in lio");
	case TYINT1:
	  x = Ptr->flchar;
	  goto xint;
	case TYSHORT:
	  x = Ptr->flshort;
	  goto xint;
d258 42
a299 40
	case TYQUAD:
	  x = Ptr->fllongint;
	  goto xint;
#endif
	case TYLONG:
	  x = Ptr->flint;
	xint:lwrt_I (x);
	  break;
	case TYREAL:
	  y = Ptr->flreal;
	  goto xfloat;
	case TYDREAL:
	  y = Ptr->fldouble;
	xfloat:lwrt_F (y);
	  break;
	case TYCOMPLEX:
	  xx = &Ptr->flreal;
	  y = *xx++;
	  z = *xx;
	  goto xcomplex;
	case TYDCOMPLEX:
	  yy = &Ptr->fldouble;
	  y = *yy++;
	  z = *yy;
	xcomplex:
	  lwrt_C (y, z);
	  break;
	case TYLOGICAL1:
	  x = Ptr->flchar;
	  goto xlog;
	case TYLOGICAL2:
	  x = Ptr->flshort;
	  goto xlog;
	case TYLOGICAL:
	  x = Ptr->flint;
	xlog:lwrt_L (Ptr->flint, len);
	  break;
	case TYCHAR:
	  lwrt_A (ptr, len);
	  break;
d301 1
a301 3
      ptr += len;
    }
  return (0);
@

