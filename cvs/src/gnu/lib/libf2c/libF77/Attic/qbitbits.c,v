head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.39;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.09;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.09;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.25;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include "f2c.h"

#ifndef LONGBITS
#define LONGBITS 32
#endif

#ifndef LONG8BITS
#define LONG8BITS (2*LONGBITS)
#endif

integer
qbit_bits (longint a, integer b, integer len)
{
  /* Assume 2's complement arithmetic */

  ulongint x, y;

  x = (ulongint) a;
  y = (ulongint) - 1L;
  x >>= b;
  y <<= len;
  return (longint) (x & y);
}

longint
qbit_cshift (longint a, integer b, integer len)
{
  ulongint x, y, z;

  x = (ulongint) a;
  if (len <= 0)
    {
      if (len == 0)
	return 0;
      goto full_len;
    }
  if (len >= LONG8BITS)
    {
    full_len:
      if (b >= 0)
	{
	  b %= LONG8BITS;
	  return (longint) (x << b | x >> (LONG8BITS - b));
	}
      b = -b;
      b %= LONG8BITS;
      return (longint) (x << (LONG8BITS - b) | x >> b);
    }
  y = z = (unsigned long) -1;
  y <<= len;
  z &= ~y;
  y &= x;
  x &= z;
  if (b >= 0)
    {
      b %= len;
      return (longint) (y | (z & (x << b | x >> (len - b))));
    }
  b = -b;
  b %= len;
  return (longint) (y | (z & (x >> b | x << (len - b))));
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@d11 2
a12 6
 integer
#ifdef KR_headers
qbit_bits(a, b, len) longint a; integer b, len;
#else
qbit_bits(longint a, integer b, integer len)
#endif
d14 1
a14 1
	/* Assume 2's complement arithmetic */
d16 1
a16 1
	ulongint x, y;
d18 6
a23 6
	x = (ulongint) a;
	y = (ulongint)-1L;
	x >>= b;
	y <<= len;
	return (longint)(x & y);
	}
d25 2
a26 6
 longint
#ifdef KR_headers
qbit_cshift(a, b, len) longint a; integer b, len;
#else
qbit_cshift(longint a, integer b, integer len)
#endif
d28 1
a28 1
	ulongint x, y, z;
d30 14
a43 28
	x = (ulongint)a;
	if (len <= 0) {
		if (len == 0)
			return 0;
		goto full_len;
		}
	if (len >= LONG8BITS) {
 full_len:
		if (b >= 0) {
			b %= LONG8BITS;
			return (longint)(x << b | x >> LONG8BITS - b );
			}
		b = -b;
		b %= LONG8BITS;
		return (longint)(x << LONG8BITS - b | x >> b);
		}
	y = z = (unsigned long)-1;
	y <<= len;
	z &= ~y;
	y &= x;
	x &= z;
	if (b >= 0) {
		b %= len;
		return (longint)(y | z & (x << b | x >> len - b));
		}
	b = -b;
	b %= len;
	return (longint)(y | z & (x >> b | x << len - b));
d45 18
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d11 6
a16 2
integer
qbit_bits (longint a, integer b, integer len)
d18 1
a18 1
  /* Assume 2's complement arithmetic */
d20 1
a20 1
  ulongint x, y;
d22 6
a27 6
  x = (ulongint) a;
  y = (ulongint) - 1L;
  x >>= b;
  y <<= len;
  return (longint) (x & y);
}
d29 6
a34 2
longint
qbit_cshift (longint a, integer b, integer len)
d36 1
a36 1
  ulongint x, y, z;
d38 28
a65 14
  x = (ulongint) a;
  if (len <= 0)
    {
      if (len == 0)
	return 0;
      goto full_len;
    }
  if (len >= LONG8BITS)
    {
    full_len:
      if (b >= 0)
	{
	  b %= LONG8BITS;
	  return (longint) (x << b | x >> (LONG8BITS - b));
a66 18
      b = -b;
      b %= LONG8BITS;
      return (longint) (x << (LONG8BITS - b) | x >> b);
    }
  y = z = (unsigned long) -1;
  y <<= len;
  z &= ~y;
  y &= x;
  x &= z;
  if (b >= 0)
    {
      b %= len;
      return (longint) (y | (z & (x << b | x >> (len - b))));
    }
  b = -b;
  b %= len;
  return (longint) (y | (z & (x >> b | x << (len - b))));
}
@

