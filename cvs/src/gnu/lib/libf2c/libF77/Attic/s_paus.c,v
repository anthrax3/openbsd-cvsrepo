head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.10;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.10;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.25;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@#include <stdio.h>
#include "f2c.h"
#define PAUSESIG 15

#include "signal1.h"
#undef abs
#undef min
#undef max
#include <stdlib.h>
extern int getpid (void), isatty (int), pause (void);

extern void f_exit (void);

static void
waitpause (Sigarg)
{
  Use_Sigarg;
  return;
}

static void
s_1paus (FILE * fin)
{
  fprintf (stderr,
	   "To resume execution, type go.  Other input will terminate the job.\n");
  fflush (stderr);
  if (getc (fin) != 'g' || getc (fin) != 'o' || getc (fin) != '\n')
    {
      fprintf (stderr, "STOP\n");
#ifdef NO_ONEXIT
      f_exit ();
#endif
      exit (0);
    }
}

int
s_paus (char *s, ftnlen n)
{
  fprintf (stderr, "PAUSE ");
  if (n > 0)
    fprintf (stderr, " %.*s", (int) n, s);
  fprintf (stderr, " statement executed\n");
  if (isatty (fileno (stdin)))
    s_1paus (stdin);
  else
    {
#if (defined (MSDOS) && !defined (GO32)) || defined (_WIN32)
      FILE *fin;
      fin = fopen ("con", "r");
      if (!fin)
	{
	  fprintf (stderr, "s_paus: can't open con!\n");
	  fflush (stderr);
	  exit (1);
	}
      s_1paus (fin);
      fclose (fin);
#else
      fprintf (stderr,
	       "To resume execution, execute a   kill -%d %d   command\n",
	       PAUSESIG, getpid ());
      signal1 (PAUSESIG, waitpause);
      fflush (stderr);
      pause ();
#endif
    }
  fprintf (stderr, "Execution resumes after PAUSE.\n");
  fflush (stderr);
  return 0;			/* NOT REACHED */
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@a5 6
#ifdef KR_headers
#define Void /* void */
#define Int /* int */
#else
#define Void void
#define Int int
d10 1
a10 5
#ifdef __cplusplus
extern "C" {
#endif
extern int getpid(void), isatty(int), pause(void);
#endif
d12 1
a12 1
extern VOID f_exit(Void);
d14 6
a19 5
 static VOID
waitpause(Sigarg)
{	Use_Sigarg;
	return;
	}
d21 2
a22 6
 static VOID
#ifdef KR_headers
s_1paus(fin) FILE *fin;
#else
s_1paus(FILE *fin)
#endif
d24 6
a29 5
	fprintf(stderr,
	"To resume execution, type go.  Other input will terminate the job.\n");
	fflush(stderr);
	if( getc(fin)!='g' || getc(fin)!='o' || getc(fin)!='\n' ) {
		fprintf(stderr, "STOP\n");
d31 1
a31 1
		f_exit();
d33 3
a35 3
		exit(0);
		}
	}
d37 2
a38 6
 int
#ifdef KR_headers
s_paus(s, n) char *s; ftnlen n;
#else
s_paus(char *s, ftnlen n)
#endif
d40 8
a47 7
	fprintf(stderr, "PAUSE ");
	if(n > 0)
		fprintf(stderr, " %.*s", (int)n, s);
	fprintf(stderr, " statement executed\n");
	if( isatty(fileno(stdin)) )
		s_1paus(stdin);
	else {
d49 10
a58 9
		FILE *fin;
		fin = fopen("con", "r");
		if (!fin) {
			fprintf(stderr, "s_paus: can't open con!\n");
			fflush(stderr);
			exit(1);
			}
		s_1paus(fin);
		fclose(fin);
d60 11
a70 14
		fprintf(stderr,
		"To resume execution, execute a   kill -%d %d   command\n",
			PAUSESIG, getpid() );
		signal1(PAUSESIG, waitpause);
		fflush(stderr);
		pause();
#endif
		}
	fprintf(stderr, "Execution resumes after PAUSE.\n");
	fflush(stderr);
	return 0; /* NOT REACHED */
#ifdef __cplusplus
	}
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@d6 6
d16 5
a20 1
extern int getpid (void), isatty (int), pause (void);
d22 1
a22 1
extern void f_exit (void);
d24 5
a28 6
static void
waitpause (Sigarg)
{
  Use_Sigarg;
  return;
}
d30 6
a35 2
static void
s_1paus (FILE * fin)
d37 5
a41 6
  fprintf (stderr,
	   "To resume execution, type go.  Other input will terminate the job.\n");
  fflush (stderr);
  if (getc (fin) != 'g' || getc (fin) != 'o' || getc (fin) != '\n')
    {
      fprintf (stderr, "STOP\n");
d43 1
a43 1
      f_exit ();
d45 3
a47 3
      exit (0);
    }
}
d49 6
a54 2
int
s_paus (char *s, ftnlen n)
d56 7
a62 8
  fprintf (stderr, "PAUSE ");
  if (n > 0)
    fprintf (stderr, " %.*s", (int) n, s);
  fprintf (stderr, " statement executed\n");
  if (isatty (fileno (stdin)))
    s_1paus (stdin);
  else
    {
d64 22
a85 7
      FILE *fin;
      fin = fopen ("con", "r");
      if (!fin)
	{
	  fprintf (stderr, "s_paus: can't open con!\n");
	  fflush (stderr);
	  exit (1);
d87 1
a87 14
      s_1paus (fin);
      fclose (fin);
#else
      fprintf (stderr,
	       "To resume execution, execute a   kill -%d %d   command\n",
	       PAUSESIG, getpid ());
      signal1 (PAUSESIG, waitpause);
      fflush (stderr);
      pause ();
#endif
    }
  fprintf (stderr, "Execution resumes after PAUSE.\n");
  fflush (stderr);
  return 0;			/* NOT REACHED */
@

