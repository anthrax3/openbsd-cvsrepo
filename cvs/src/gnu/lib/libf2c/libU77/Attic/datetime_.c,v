head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.04.14.06.01.40;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2004.12.30.17.35.27;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.33.14;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.29.19.27.22;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.29.19.27.22;	author drahn;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.24.22.07.32;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libf2c, hasn't been built since it was moved to ports in 2010.
ok miod@@ espie@@
@
text
@/* Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.
This file is part of GNU Fortran libU77 library.

This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Library General Public License as published
by the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

GNU Fortran is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with GNU Fortran; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdio.h>
#include <sys/types.h>
#if TIME_WITH_SYS_TIME
# include <sys/time.h>
# include <time.h>
#else
# if HAVE_SYS_TIME_H
#  include <sys/time.h>
# else
#  include <time.h>
# endif
#endif
#if defined (_WIN32)
#include <windows.h>
#undef min
#undef max
#endif
#include "f2c.h"

void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);

int
G77_date_and_time_0 (char *date, char *fftime, char *zone,
		     integer * values, ftnlen date_len,
		     ftnlen fftime_len, ftnlen zone_len)
{
  time_t lt = time (&lt);
  struct tm ltime = *localtime (&lt), gtime = *gmtime (&lt);
  char dat[9], zon[6], ftim[11];
  int i, vals[8];
#if defined (_WIN32)
    struct _SYSTEMTIME wdattim;
    GetLocalTime(&wdattim);
    vals[7] = wdattim.wMilliseconds;
#else
  vals[7] = 0;                  /* no STDC/POSIX way to get this */
  /* GNUish way; maybe use `ftime' on other systems. */
#endif

  vals[0] = 1900 + ltime.tm_year;
  vals[1] = 1 + ltime.tm_mon;
  vals[2] = ltime.tm_mday;
  /* fixme: year boundaries */
  vals[3] = (ltime.tm_min - gtime.tm_min +
	     60 * (ltime.tm_hour - gtime.tm_hour +
		   24 * (ltime.tm_yday - gtime.tm_yday)));
  vals[4] = ltime.tm_hour;
  vals[5] = ltime.tm_min;
  vals[6] = ltime.tm_sec;
#if HAVE_GETTIMEOFDAY
  {
    struct timeval tp;
#  if GETTIMEOFDAY_ONE_ARGUMENT
    if (!gettimeofday (&tp))
#  else
#    if HAVE_STRUCT_TIMEZONE
    struct timezone tzp;
    /* Some systems such as HPUX, do have struct timezone, but
       gettimeofday takes void* as the 2nd arg.  However, the effect
       of passing anything other than a null pointer is unspecified on
       HPUX.  Configure checks if gettimeofday actually fails with a
       non-NULL arg and pretends that struct timezone is missing if it
       does fail.  */
    if (!gettimeofday (&tp, &tzp))
#    else
    if (!gettimeofday (&tp, (void *) 0))
#    endif /* HAVE_STRUCT_TIMEZONE */
#  endif /* GETTIMEOFDAY_ONE_ARGUMENT */
      vals[7] = tp.tv_usec / 1000;
  }
#endif /* HAVE_GETTIMEOFDAY */
  if (values)			/* null pointer for missing optional */
    for (i = 0; i <= 7; i++)
      values[i] = vals[i];
  sprintf (dat, "%04d%02d%02d", vals[0], vals[1], vals[2]);
  s_copy (date, dat, date_len, 8);
  if (zone)
    {
      sprintf (zon, "%+03d%02d", vals[3] / 60, abs (vals[3] % 60));
      s_copy (zone, zon, zone_len, 5);
    }
  if (fftime)
    {
      sprintf (ftim, "%02d%02d%02d.%03d", vals[4], vals[5], vals[6], vals[7]);
      s_copy (fftime, ftim, fftime_len, 10);
    }
  return 0;
}
@


1.3
log
@Actual synch with 3.3.5.

Changes in Makefile.bsd-wrapper to avoid prereq.

Fix in lib*/config.h.in to include the right ones and get the correct
definitions.

Bump of shlib_version accordingly.
@
text
@@


1.2
log
@result from merge... highly weird, since dale mixed things up
and we're going back, as his libf2c 3.3.2 is actually libf2c 3.2.3.
@
text
@d34 5
d41 1
a41 5
#ifdef KR_headers
VOID s_copy ();
#else
void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb);
#endif
d43 4
a46 3
int G77_date_and_time_0 (char *date, char *fftime, char *zone,
			 integer *values, ftnlen date_len,
			 ftnlen fftime_len, ftnlen zone_len)
d48 2
a49 2
  time_t lt=time(&lt);
  struct tm ltime = *localtime(&lt), gtime = *gmtime(&lt);
d52 8
d66 2
a67 2
	     60*(ltime.tm_hour - gtime.tm_hour +
		 24*(ltime.tm_yday -gtime.tm_yday)));
a70 2
  vals[7] = 0;                  /* no STDC/POSIX way to get this */
  /* GNUish way; maybe use `ftime' on other systems. */
d75 1
a75 1
    if (! gettimeofday (&tp))
d85 1
a85 1
    if (! gettimeofday (&tp, &tzp))
d87 1
a87 1
    if (! gettimeofday (&tp, (void *) 0))
d90 1
a90 1
      vals[7] = tp.tv_usec/1000;
d94 1
a94 1
    for (i=0; i<=7; i++)
d97 11
a107 9
  s_copy(date, dat, date_len, 8);
  if (zone) {
    sprintf(zon, "%+03d%02d", vals[3] / 60, abs(vals[3] % 60));
    s_copy(zone, zon, zone_len, 5);
  }
  if (fftime) {
    sprintf (ftim, "%02d%02d%02d.%03d", vals[4], vals[5], vals[6], vals[7]);
    s_copy(fftime, ftim, fftime_len, 10);
  }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of libf2c from gcc3.3.2
@
text
@@


1.1.1.2
log
@gcc 3.3.5 update
@
text
@a33 5
#if defined (_WIN32)
#include <windows.h>
#undef min
#undef max
#endif
d36 5
a40 1
void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);
d42 3
a44 4
int
G77_date_and_time_0 (char *date, char *fftime, char *zone,
		     integer * values, ftnlen date_len,
		     ftnlen fftime_len, ftnlen zone_len)
d46 2
a47 2
  time_t lt = time (&lt);
  struct tm ltime = *localtime (&lt), gtime = *gmtime (&lt);
a49 8
#if defined (_WIN32)
    struct _SYSTEMTIME wdattim;
    GetLocalTime(&wdattim);
    vals[7] = wdattim.wMilliseconds;
#else
  vals[7] = 0;                  /* no STDC/POSIX way to get this */
  /* GNUish way; maybe use `ftime' on other systems. */
#endif
d56 2
a57 2
	     60 * (ltime.tm_hour - gtime.tm_hour +
		   24 * (ltime.tm_yday - gtime.tm_yday)));
d61 2
d67 1
a67 1
    if (!gettimeofday (&tp))
d77 1
a77 1
    if (!gettimeofday (&tp, &tzp))
d79 1
a79 1
    if (!gettimeofday (&tp, (void *) 0))
d82 1
a82 1
      vals[7] = tp.tv_usec / 1000;
d86 1
a86 1
    for (i = 0; i <= 7; i++)
d89 9
a97 11
  s_copy (date, dat, date_len, 8);
  if (zone)
    {
      sprintf (zon, "%+03d%02d", vals[3] / 60, abs (vals[3] % 60));
      s_copy (zone, zon, zone_len, 5);
    }
  if (fftime)
    {
      sprintf (ftim, "%02d%02d%02d.%03d", vals[4], vals[5], vals[6], vals[7]);
      s_copy (fftime, ftim, fftime_len, 10);
    }
@

