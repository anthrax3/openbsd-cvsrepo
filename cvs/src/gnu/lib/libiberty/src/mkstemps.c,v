head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.38
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.34
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.30
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.32
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.24
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.28
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.26
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.22
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.20
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.18
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	BINUTILS_2_17_1:1.1.1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	gcc-3_3_5:1.1.1.3
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	binutils-2_14:1.1.1.3
	gcc-3_3_2:1.1.1.3
	binutils-2_11_2:1.1.1.2
	binutils-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2008.05.27.18.52.44;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.25.21.17.01;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.25.21.06.18;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.24.16.47.34;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.31.42;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.24.16.31.42;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.24.16.34.20;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.25.20.39.14;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.05.27.18.46.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@/* Copyright (C) 1991, 1992, 1996, 1998, 2004 Free Software Foundation, Inc.
   This file is derived from mkstemp.c from the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the GNU C Library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
   Boston, MA 02110-1301, USA.  */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <sys/types.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#include <errno.h>
#include <stdio.h>
#include <fcntl.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#endif
#include "ansidecl.h"

/* We need to provide a type for gcc_uint64_t.  */
#ifdef __GNUC__
__extension__ typedef unsigned long long gcc_uint64_t;
#else
typedef unsigned long gcc_uint64_t;
#endif

#ifndef TMP_MAX
#define TMP_MAX 16384
#endif

/*

@@deftypefn Replacement int mkstemps (char *@@var{pattern}, int @@var{suffix_len})

Generate a unique temporary file name from @@var{pattern}.
@@var{pattern} has the form:

@@example
   @@var{path}/ccXXXXXX@@var{suffix}
@@end example

@@var{suffix_len} tells us how long @@var{suffix} is (it can be zero
length).  The last six characters of @@var{pattern} before @@var{suffix}
must be @@samp{XXXXXX}; they are replaced with a string that makes the
filename unique.  Returns a file descriptor open on the file for
reading and writing.

@@end deftypefn

*/

int
mkstemps (char *pattern, int suffix_len)
{
  static const char letters[]
    = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  static gcc_uint64_t value;
#ifdef HAVE_GETTIMEOFDAY
  struct timeval tv;
#endif
  char *XXXXXX;
  size_t len;
  int count;

  len = strlen (pattern);

  if ((int) len < 6 + suffix_len
      || strncmp (&pattern[len - 6 - suffix_len], "XXXXXX", 6))
    {
      return -1;
    }

  XXXXXX = &pattern[len - 6 - suffix_len];

#ifdef HAVE_GETTIMEOFDAY
  /* Get some more or less random data.  */
  gettimeofday (&tv, NULL);
  value += ((gcc_uint64_t) tv.tv_usec << 16) ^ tv.tv_sec ^ getpid ();
#else
  value += getpid ();
#endif

  for (count = 0; count < TMP_MAX; ++count)
    {
      gcc_uint64_t v = value;
      int fd;

      /* Fill in the random bits.  */
      XXXXXX[0] = letters[v % 62];
      v /= 62;
      XXXXXX[1] = letters[v % 62];
      v /= 62;
      XXXXXX[2] = letters[v % 62];
      v /= 62;
      XXXXXX[3] = letters[v % 62];
      v /= 62;
      XXXXXX[4] = letters[v % 62];
      v /= 62;
      XXXXXX[5] = letters[v % 62];

      fd = open (pattern, O_RDWR|O_CREAT|O_EXCL, 0600);
      if (fd >= 0)
	/* The file does not exist.  */
	return fd;

      /* This is a random value.  It is only necessary that the next
	 TMP_MAX values generated by adding 7777 to VALUE are different
	 with (module 2^32).  */
      value += 7777;
    }

  /* We return the null string if we can't find a unique file name.  */
  pattern[0] = '\0';
  return -1;
}
@


1.4
log
@fix instances of cvs brain-damage. We want the current FSF version of
these files.
@
text
@d1 1
a1 1
/* Copyright (C) 1991, 1992, 1996, 1998 Free Software Foundation, Inc.
d16 2
a17 2
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d54 1
a54 1
@@deftypefn Replacement int mkstemps (char *@@var{template}, int @@var{suffix_len})
d56 2
a57 2
Generate a unique temporary file name from @@var{template}.
@@var{template} has the form:
d64 1
a64 1
length).  The last six characters of @@var{template} before @@var{suffix}
d74 1
a74 3
mkstemps (template, suffix_len)
     char *template;
     int suffix_len;
d86 1
a86 1
  len = strlen (template);
d89 1
a89 1
      || strncmp (&template[len - 6 - suffix_len], "XXXXXX", 6))
d94 1
a94 1
  XXXXXX = &template[len - 6 - suffix_len];
d122 1
a122 5
#ifdef VMS
      fd = open (template, O_RDWR|O_CREAT|O_EXCL, 0600, "fop=tmd");
#else
      fd = open (template, O_RDWR|O_CREAT|O_EXCL, 0600);
#endif
d134 1
a134 1
  template[0] = '\0';
@


1.3
log
@fix stupid cvs conflicts.
I think that cvs is a poor lonesome, depressive program.
The only way it has found of getting your attention is to throw
senseless conflicts that shouldn't exist in your way.
@
text
@d23 1
d43 1
a43 1
typedef unsigned long long gcc_uint64_t;
@


1.2
log
@OpenBSD changes: synch somewhere between binutils-2.10 and 2.11
Support for mkstemps in choose-temp.
@
text
@d51 1
a51 1
/* Generate a unique temporary file name from TEMPLATE.
d53 1
a53 1
   TEMPLATE has the form:
d55 2
a56 1
   <path>/ccXXXXXX<suffix>
d58 3
a60 1
   SUFFIX_LEN tells us how long <suffix> is (it can be zero length).
d62 9
a70 2
   The last six characters of TEMPLATE before <suffix> must be "XXXXXX";
   they are replaced with a string that makes the filename unique.
a71 1
   Returns a file descriptor open on the file for reading and writing.  */
d123 3
d127 1
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Moving libiberty around, keeping vendor branch.
First: binutils-2.10.
@
text
@@


1.1.1.2
log
@Second import from the vendor branch: binutils-2.11.2
@
text
@a22 1
#include <sys/types.h>
d42 1
a42 1
__extension__ typedef unsigned long long gcc_uint64_t;
@


1.1.1.3
log
@Synch with gcc-3.3.2 version
@
text
@d52 1
a52 1
/*
d54 1
a54 1
@@deftypefn Replacement int mkstemps (char *@@var{template}, int @@var{suffix_len})
d56 1
a56 2
Generate a unique temporary file name from @@var{template}.
@@var{template} has the form:
d58 1
a58 3
@@example
   @@var{path}/ccXXXXXX@@var{suffix}
@@end example
d60 2
a61 9
@@var{suffix_len} tells us how long @@var{suffix} is (it can be zero
length).  The last six characters of @@var{template} before @@var{suffix}
must be @@samp{XXXXXX}; they are replaced with a string that makes the
filename unique.  Returns a file descriptor open on the file for
reading and writing.

@@end deftypefn

*/
d63 1
a114 3
#ifdef VMS
      fd = open (template, O_RDWR|O_CREAT|O_EXCL, 0600, "fop=tmd");
#else
a115 1
#endif
@


1.1.1.4
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@d1 1
a1 1
/* Copyright (C) 1991, 1992, 1996, 1998, 2004 Free Software Foundation, Inc.
d16 2
a17 2
   write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
   Boston, MA 02110-1301, USA.  */
d54 1
a54 1
@@deftypefn Replacement int mkstemps (char *@@var{pattern}, int @@var{suffix_len})
d56 2
a57 2
Generate a unique temporary file name from @@var{pattern}.
@@var{pattern} has the form:
d64 1
a64 1
length).  The last six characters of @@var{pattern} before @@var{suffix}
d74 3
a76 1
mkstemps (char *pattern, int suffix_len)
d88 1
a88 1
  len = strlen (pattern);
d91 1
a91 1
      || strncmp (&pattern[len - 6 - suffix_len], "XXXXXX", 6))
d96 1
a96 1
  XXXXXX = &pattern[len - 6 - suffix_len];
d124 5
a128 1
      fd = open (pattern, O_RDWR|O_CREAT|O_EXCL, 0600);
d140 1
a140 1
  pattern[0] = '\0';
@


