head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.10
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.8
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.32
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.24
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.28
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.26
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.22
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.20
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.18
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	BINUTILS_2_17_1:1.1.1.6
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	gcc-3_3_5:1.1.1.5
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	binutils-2_14:1.1.1.4
	gcc-3_3_2:1.1.1.3
	binutils-2_11_2:1.1.1.2
	binutils-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.10.20.11.15.07;	author pascal;	state Exp;
branches;
next	1.5;
commitid	qUhKPfGTeIcfHu9u;

1.5
date	2008.05.27.18.52.44;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.25.18.02.31;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.25.21.06.19;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.24.16.47.34;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.24.16.34.23;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.25.20.39.25;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.25.17.55.59;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.12.24.21.48.29;	author espie;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.05.27.18.46.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@On xmalloc failure, stop trying to determine the total amount of allocated
memory up to this point by using sbrk(2).  This is of course wildly incorrect
for any mmap-based malloc(3).

This also makes it possible to bring pledge(2) to gnu/.

comments kettenis@@, ok miod@@
@
text
@/* memory allocation routines with error checking.
   Copyright 1989, 90, 91, 92, 93, 94 Free Software Foundation, Inc.
   
This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */

/*

@@deftypefn Replacement void* xmalloc (size_t)

Allocate memory without fail.  If @@code{malloc} fails, this will print
a message to @@code{stderr} (using the name set by
@@code{xmalloc_set_program_name},
if any) and then call @@code{xexit}.  Note that it is therefore safe for
a program to contain @@code{#define malloc xmalloc} in its source.

@@end deftypefn

@@deftypefn Replacement void* xrealloc (void *@@var{ptr}, size_t @@var{size})
Reallocate memory without fail.  This routine functions like @@code{realloc},
but will behave the same as @@code{xmalloc} if memory cannot be found.

@@end deftypefn

@@deftypefn Replacement void* xcalloc (size_t @@var{nelem}, size_t @@var{elsize})

Allocate memory without fail, and set it to zero.  This routine functions
like @@code{calloc}, but will behave the same as @@code{xmalloc} if memory
cannot be found.

@@end deftypefn

@@deftypefn Replacement void xmalloc_set_program_name (const char *@@var{name})

You can use this to set the name of the program used by
@@code{xmalloc_failed} when printing a failure message.

@@end deftypefn

@@deftypefn Replacement void xmalloc_failed (size_t)

This function is not meant to be called by client code, and is listed
here for completeness only.  If any of the allocation routines fail, this
function will be called to print an error message and terminate execution.

@@end deftypefn

*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "ansidecl.h"
#include "libiberty.h"

#include <stdio.h>

#include <stddef.h>

#if VMS
#include <stdlib.h>
#include <unixlib.h>
#else
/* For systems with larger pointers than ints, these must be declared.  */
#  if HAVE_STDLIB_H && HAVE_UNISTD_H && HAVE_DECL_MALLOC \
      && HAVE_DECL_REALLOC && HAVE_DECL_CALLOC && HAVE_DECL_SBRK
#    include <stdlib.h>
#    include <unistd.h>
#  else
#    ifdef __cplusplus
extern "C" {
#    endif /* __cplusplus */
void *malloc (size_t);
void *realloc (void *, size_t);
void *calloc (size_t, size_t);
void *sbrk (ptrdiff_t);
#    ifdef __cplusplus
}
#    endif /* __cplusplus */
#  endif /* HAVE_STDLIB_H ...  */
#endif /* VMS */

/* The program name if set.  */
static const char *name = "";

void
xmalloc_set_program_name (const char *s)
{
  name = s;
}

void
xmalloc_failed (size_t size)
{
  fprintf (stderr,
	   "\n%s%sout of memory allocating %lu bytes\n",
	   name, *name ? ": " : "",
	   (unsigned long) size);
  xexit (1);
}  

PTR
xmalloc (size_t size)
{
  PTR newmem;

  if (size == 0)
    size = 1;
  newmem = malloc (size);
  if (!newmem)
    xmalloc_failed (size);

  return (newmem);
}

PTR
xcalloc (size_t nelem, size_t elsize)
{
  PTR newmem;

  if (nelem == 0 || elsize == 0)
    nelem = elsize = 1;

  newmem = calloc (nelem, elsize);
  if (!newmem)
    xmalloc_failed (nelem * elsize);

  return (newmem);
}

PTR
xrealloc (PTR oldmem, size_t size)
{
  PTR newmem;

  if (size == 0)
    size = 1;
  if (!oldmem)
    newmem = malloc (size);
  else
    newmem = realloc (oldmem, size);
  if (!newmem)
    xmalloc_failed (size);

  return (newmem);
}
@


1.5
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@a98 6
#ifdef HAVE_SBRK
/* The initial sbrk, set when the program name is set. Not used for win32
   ports other than cygwin32.  */
static char *first_break = NULL;
#endif /* HAVE_SBRK */

a102 5
#ifdef HAVE_SBRK
  /* Win32 ports other than cygwin32 don't have brk() */
  if (first_break == NULL)
    first_break = (char *) sbrk (0);
#endif /* HAVE_SBRK */
a107 13
#ifdef HAVE_SBRK
  extern char **environ;
  size_t allocated;

  if (first_break != NULL)
    allocated = (char *) sbrk (0) - first_break;
  else
    allocated = (char *) sbrk (0) - (char *) &environ;
  fprintf (stderr,
	   "\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\n",
	   name, *name ? ": " : "",
	   (unsigned long) size, (unsigned long) allocated);
#else /* HAVE_SBRK */
a111 1
#endif /* HAVE_SBRK */
@


1.4
log
@Automatic merge
@
text
@d17 2
a18 2
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */
a70 1
#ifdef ANSI_PROTOTYPES
a71 4
#else
#define size_t unsigned long
#define ptrdiff_t long
#endif
d78 17
a94 5
PTR malloc PARAMS ((size_t));
PTR realloc PARAMS ((PTR, size_t));
PTR calloc PARAMS ((size_t, size_t));
PTR sbrk PARAMS ((ptrdiff_t));
#endif
d106 1
a106 2
xmalloc_set_program_name (s)
     const char *s;
d117 1
a117 2
xmalloc_failed (size)
     size_t size;
d141 1
a141 2
xmalloc (size)
    size_t size;
d155 1
a155 2
xcalloc (nelem, elsize)
  size_t nelem, elsize;
d170 1
a170 3
xrealloc (oldmem, size)
    PTR oldmem;
    size_t size;
@


1.3
log
@fix stupid cvs conflicts.
I think that cvs is a poor lonesome, depressive program.
The only way it has found of getting your attention is to throw
senseless conflicts that shouldn't exist in your way.
@
text
@d71 1
a71 1
#ifdef __STDC__
@


1.2
log
@OpenBSD changes: synch somewhere between binutils-2.10 and 2.11
Support for mkstemps in choose-temp.
@
text
@d20 46
d110 25
d145 1
a145 4
    {
#ifdef HAVE_SBRK
      extern char **environ;
      size_t allocated;
a146 16
      if (first_break != NULL)
	allocated = (char *) sbrk (0) - first_break;
      else
	allocated = (char *) sbrk (0) - (char *) &environ;
      fprintf (stderr,
	       "\n%s%sCannot allocate %lu bytes after allocating %lu bytes\n",
	       name, *name ? ": " : "",
	       (unsigned long) size, (unsigned long) allocated);
#else /* HAVE_SBRK */
      fprintf (stderr,
              "\n%s%sCannot allocate %lu bytes\n",
              name, *name ? ": " : "",
              (unsigned long) size);
#endif /* HAVE_SBRK */
      xexit (1);
    }
d161 1
a161 4
    {
#ifdef HAVE_SBRK
      extern char **environ;
      size_t allocated;
a162 16
      if (first_break != NULL)
	allocated = (char *) sbrk (0) - first_break;
      else
	allocated = (char *) sbrk (0) - (char *) &environ;
      fprintf (stderr,
	       "\n%s%sCannot allocate %lu bytes after allocating %lu bytes\n",
	       name, *name ? ": " : "",
	       (unsigned long) (nelem * elsize), (unsigned long) allocated);
#else /* HAVE_SBRK */
      fprintf (stderr,
              "\n%s%sCannot allocate %lu bytes\n",
              name, *name ? ": " : "",
              (unsigned long) (nelem * elsize));
#endif /* HAVE_SBRK */
      xexit (1);
    }
d180 1
a180 4
    {
#ifdef HAVE_SBRK
      extern char **environ;
      size_t allocated;
a181 16
      if (first_break != NULL)
	allocated = (char *) sbrk (0) - first_break;
      else
	allocated = (char *) sbrk (0) - (char *) &environ;
      fprintf (stderr,
	       "\n%s%sCannot reallocate %lu bytes after allocating %lu bytes\n",
	       name, *name ? ": " : "",
	       (unsigned long) size, (unsigned long) allocated);
#else /* HAVE_SBRK */
      fprintf (stderr,
              "\n%s%sCannot reallocate %lu bytes\n",
              name, *name ? ": " : "",
              (unsigned long) size);
#endif /* HAVE_SBRK */
      xexit (1);
    }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Moving libiberty around, keeping vendor branch.
First: binutils-2.10.
@
text
@@


1.1.1.2
log
@Second import from the vendor branch: binutils-2.11.2
@
text
@a19 3
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
a63 25
void
xmalloc_failed (size)
     size_t size;
{
#ifdef HAVE_SBRK
  extern char **environ;
  size_t allocated;

  if (first_break != NULL)
    allocated = (char *) sbrk (0) - first_break;
  else
    allocated = (char *) sbrk (0) - (char *) &environ;
  fprintf (stderr,
	   "\n%s%sCannot allocate %lu bytes after allocating %lu bytes\n",
	   name, *name ? ": " : "",
	   (unsigned long) size, (unsigned long) allocated);
#else /* HAVE_SBRK */
  fprintf (stderr,
	   "\n%s%sCannot allocate %lu bytes\n",
	   name, *name ? ": " : "",
	   (unsigned long) size);
#endif /* HAVE_SBRK */
  xexit (1);
}  

d74 4
a77 1
    xmalloc_failed (size);
d79 16
d109 4
a112 1
    xmalloc_failed (nelem * elsize);
d114 16
d147 4
a150 1
    xmalloc_failed (size);
d152 16
@


1.1.1.3
log
@Synch with gcc-3.3.2 version
@
text
@a19 43
/*

@@deftypefn Replacement void* xmalloc (size_t)

Allocate memory without fail.  If @@code{malloc} fails, this will print
a message to @@code{stderr} (using the name set by
@@code{xmalloc_set_program_name},
if any) and then call @@code{xexit}.  Note that it is therefore safe for
a program to contain @@code{#define malloc xmalloc} in its source.

@@end deftypefn

@@deftypefn Replacement void* xrealloc (void *@@var{ptr}, size_t @@var{size})
Reallocate memory without fail.  This routine functions like @@code{realloc},
but will behave the same as @@code{xmalloc} if memory cannot be found.

@@end deftypefn

@@deftypefn Replacement void* xcalloc (size_t @@var{nelem}, size_t @@var{elsize})

Allocate memory without fail, and set it to zero.  This routine functions
like @@code{calloc}, but will behave the same as @@code{xmalloc} if memory
cannot be found.

@@end deftypefn

@@deftypefn Replacement void xmalloc_set_program_name (const char *@@var{name})

You can use this to set the name of the program used by
@@code{xmalloc_failed} when printing a failure message.

@@end deftypefn

@@deftypefn Replacement void xmalloc_failed (size_t)

This function is not meant to be called by client code, and is listed
here for completeness only.  If any of the allocation routines fail, this
function will be called to print an error message and terminate execution.

@@end deftypefn

*/

d80 1
a80 1
	   "\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\n",
d85 1
a85 1
	   "\n%s%sout of memory allocating %lu bytes\n",
@


1.1.1.4
log
@Update to libiberty from binutils-2.14
@
text
@d71 1
a71 1
#ifdef ANSI_PROTOTYPES
@


1.1.1.5
log
@update to gcc 3.3.5
@
text
@d71 1
a71 1
#ifdef __STDC__
@


1.1.1.6
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@d17 2
a18 2
not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */
d71 1
d73 4
d83 5
a87 17
#  if HAVE_STDLIB_H && HAVE_UNISTD_H && HAVE_DECL_MALLOC \
      && HAVE_DECL_REALLOC && HAVE_DECL_CALLOC && HAVE_DECL_SBRK
#    include <stdlib.h>
#    include <unistd.h>
#  else
#    ifdef __cplusplus
extern "C" {
#    endif /* __cplusplus */
void *malloc (size_t);
void *realloc (void *, size_t);
void *calloc (size_t, size_t);
void *sbrk (ptrdiff_t);
#    ifdef __cplusplus
}
#    endif /* __cplusplus */
#  endif /* HAVE_STDLIB_H ...  */
#endif /* VMS */
d99 2
a100 1
xmalloc_set_program_name (const char *s)
d111 2
a112 1
xmalloc_failed (size_t size)
d136 2
a137 1
xmalloc (size_t size)
d151 2
a152 1
xcalloc (size_t nelem, size_t elsize)
d167 3
a169 1
xrealloc (PTR oldmem, size_t size)
@


