head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.36
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.38
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.34
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.30
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.32
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.24
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.28
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.22
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	BINUTILS_2_17_1:1.1.1.5
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	gcc-3_3_5:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.4
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	binutils-2_14:1.1.1.3
	gcc-3_3_2:1.1.1.2
	binutils-2_11_2:1.1.1.1
	binutils-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.05.27.18.52.44;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.03.56;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.25.20.39.25;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.25.17.55.59;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.12.24.21.48.38;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.05.27.18.46.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@/*
 * Copyright (c) 1990 Regents of the University of California.
 * All rights reserved.
 *
 * %sccs.include.redist.c%
 */


/*

@@deftypefun int xatexit (void (*@@var{fn}) (void))

Behaves as the standard @@code{atexit} function, but with no limit on
the number of registered functions.  Returns 0 on success, or @@minus{}1 on
failure.  If you use @@code{xatexit} to register functions, you must use
@@code{xexit} to terminate your program.

@@end deftypefun

*/

/* Adapted from newlib/libc/stdlib/{,at}exit.[ch].
   If you use xatexit, you must call xexit instead of exit.  */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "ansidecl.h"
#include "libiberty.h"

#include <stdio.h>

#include <stddef.h>

#if VMS
#include <stdlib.h>
#include <unixlib.h>
#else
/* For systems with larger pointers than ints, this must be declared.  */
PTR malloc (size_t);
#endif

static void xatexit_cleanup (void);

/* Pointer to function run by xexit.  */
extern void (*_xexit_cleanup) (void);

#define	XATEXIT_SIZE 32

struct xatexit {
	struct	xatexit *next;		/* next in list */
	int	ind;			/* next index in this table */
	void	(*fns[XATEXIT_SIZE]) (void);	/* the table itself */
};

/* Allocate one struct statically to guarantee that we can register
   at least a few handlers.  */
static struct xatexit xatexit_first;

/* Points to head of LIFO stack.  */
static struct xatexit *xatexit_head = &xatexit_first;

/* Register function FN to be run by xexit.
   Return 0 if successful, -1 if not.  */

int
xatexit (void (*fn) (void))
{
  register struct xatexit *p;

  /* Tell xexit to call xatexit_cleanup.  */
  if (!_xexit_cleanup)
    _xexit_cleanup = xatexit_cleanup;

  p = xatexit_head;
  if (p->ind >= XATEXIT_SIZE)
    {
      if ((p = (struct xatexit *) malloc (sizeof *p)) == NULL)
	return -1;
      p->ind = 0;
      p->next = xatexit_head;
      xatexit_head = p;
    }
  p->fns[p->ind++] = fn;
  return 0;
}

/* Call any cleanup functions.  */

static void
xatexit_cleanup (void)
{
  register struct xatexit *p;
  register int n;

  for (p = xatexit_head; p; p = p->next)
    for (n = p->ind; --n >= 0;)
      (*p->fns[n]) ();
}
@


1.2
log
@fix up conflicts
@
text
@d25 3
a32 1
#ifdef ANSI_PROTOTYPES
a33 3
#else
#define size_t unsigned long
#endif
d40 1
a40 1
PTR malloc PARAMS ((size_t));
d43 1
a43 1
static void xatexit_cleanup PARAMS ((void));
d46 1
a46 1
extern void (*_xexit_cleanup) PARAMS ((void));
d53 1
a53 1
	void	(*fns[XATEXIT_SIZE]) PARAMS ((void));	/* the table itself */
d67 1
a67 2
xatexit (fn)
     void (*fn) PARAMS ((void));
d91 1
a91 1
xatexit_cleanup ()
@


1.1
log
@Initial revision
@
text
@d8 14
d30 1
a30 1
#ifdef __STDC__
d36 4
d42 1
@


1.1.1.1
log
@Moving libiberty around, keeping vendor branch.
First: binutils-2.10.
@
text
@@


1.1.1.2
log
@Synch with gcc-3.3.2 version
@
text
@a7 14

/*

@@deftypefun int xatexit (void (*@@var{fn}) (void))

Behaves as the standard @@code{atexit} function, but with no limit on
the number of registered functions.  Returns 0 on success, or @@minus{}1 on
failure.  If you use @@code{xatexit} to register functions, you must use
@@code{xexit} to terminate your program.

@@end deftypefun

*/

a21 4
#if VMS
#include <stdlib.h>
#include <unixlib.h>
#else
a23 1
#endif
@


1.1.1.3
log
@Update to libiberty from binutils-2.14
@
text
@d30 1
a30 1
#ifdef ANSI_PROTOTYPES
@


1.1.1.4
log
@update to gcc 3.3.5
@
text
@d30 1
a30 1
#ifdef __STDC__
@


1.1.1.5
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@a24 3
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
d30 1
d32 3
d41 1
a41 1
PTR malloc (size_t);
d44 1
a44 1
static void xatexit_cleanup (void);
d47 1
a47 1
extern void (*_xexit_cleanup) (void);
d54 1
a54 1
	void	(*fns[XATEXIT_SIZE]) (void);	/* the table itself */
d68 2
a69 1
xatexit (void (*fn) (void))
d93 1
a93 1
xatexit_cleanup (void)
@


