head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.36
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.38
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.34
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.30
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.32
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.24
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.28
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.22
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	BINUTILS_2_17_1:1.1.1.5
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	gcc-3_3_5:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.4
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	binutils-2_14:1.1.1.3
	gcc-3_3_2:1.1.1.2
	binutils-2_11_2:1.1.1.1
	binutils-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.05.27.18.52.44;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.03.56;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.25.20.39.23;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.25.17.55.51;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.12.24.21.48.45;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.05.27.18.46.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@/* Simple implementation of strstr for systems without it.
   This function is in the public domain.  */

/*

@@deftypefn Supplemental char* strstr (const char *@@var{string}, const char *@@var{sub})

This function searches for the substring @@var{sub} in the string
@@var{string}, not including the terminating null characters.  A pointer
to the first occurrence of @@var{sub} is returned, or @@code{NULL} if the
substring is absent.  If @@var{sub} points to a string with zero
length, the function returns @@var{string}.

@@end deftypefn


*/


/* FIXME:  The above description is ANSI compiliant.  This routine has not
   been validated to comply with it.  -fnf */

#include <stddef.h>

extern char *strchr (const char *, int);
extern int strncmp (const void *, const void *, size_t);
extern size_t strlen (const char *);

char *
strstr (const char *s1, const char *s2)
{
  const char *p = s1;
  const size_t len = strlen (s2);

  for (; (p = strchr (p, *s2)) != 0; p++)
    {
      if (strncmp (p, s2, len) == 0)
	return (char *)p;
    }
  return (0);
}
@


1.2
log
@fix up conflicts
@
text
@d23 6
d30 1
a30 2
strstr (s1, s2)
  char *s1, *s2;
d32 2
a33 7
  register char *p = s1;
  extern char *strchr ();
  extern int strncmp ();
#if __GNUC__ >= 2
  extern __SIZE_TYPE__ strlen (const char *);
#endif
  register int len = strlen (s2);
d38 1
a38 3
	{
	  return (p);
	}
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
NAME
d8 5
a12 1
	strstr -- locate first occurance of a substring
d14 1
a14 1
SYNOPSIS
a15 12
	#include <string.h>

	char *strstr (char *s1, char *s2)

DESCRIPTION

	Locates the first occurance in the string pointed to by S1 of
	the string pointed to by S2.  Returns a pointer to the substring
	found, or a NULL pointer if not found.  If S2 points to a string
	with zero length, the function returns S1.
	
BUGS
d30 2
a31 2
#if __GNUC__==2
  extern __SIZE_TYPE__ strlen ();
@


1.1.1.1
log
@Moving libiberty around, keeping vendor branch.
First: binutils-2.10.
@
text
@@


1.1.1.2
log
@Synch with gcc-3.3.2 version
@
text
@d6 1
a6 1
@@deftypefn Supplemental char* strstr (const char *@@var{string}, const char *@@var{sub})
d8 1
a8 5
This function searches for the substring @@var{sub} in the string
@@var{string}, not including the terminating null characters.  A pointer
to the first occurrence of @@var{sub} is returned, or @@code{NULL} if the
substring is absent.  If @@var{sub} points to a string with zero
length, the function returns @@var{string}.
d10 1
a10 1
@@end deftypefn
d12 12
@


1.1.1.3
log
@Update to libiberty from binutils-2.14
@
text
@d30 2
a31 2
#if __GNUC__ >= 2
  extern __SIZE_TYPE__ strlen (const char *);
@


1.1.1.4
log
@update to gcc 3.3.5
@
text
@d30 2
a31 2
#if __GNUC__==2
  extern __SIZE_TYPE__ strlen ();
@


1.1.1.5
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@a22 6
#include <stddef.h>

extern char *strchr (const char *, int);
extern int strncmp (const void *, const void *, size_t);
extern size_t strlen (const char *);

d24 2
a25 1
strstr (const char *s1, const char *s2)
d27 7
a33 2
  const char *p = s1;
  const size_t len = strlen (s2);
d38 3
a40 1
	return (char *)p;
@


