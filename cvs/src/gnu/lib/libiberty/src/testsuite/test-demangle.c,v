head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.48
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.44
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.46
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.38
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.42
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.40
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.36
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.34
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.20
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.22
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	BINUTILS_2_17_1:1.1.1.4
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	gcc-3_3_5:1.1.1.3
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	binutils-2_14:1.1.1.2
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.12.24.22.03.56;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.25.20.39.29;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.25.20.39.29;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.25.17.56.07;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.12.24.21.48.46;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.05.27.18.46.02;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix up conflicts
@
text
@/* Demangler test program,
   Copyright (C) 2002 Free Software Foundation, Inc.
   Written by Zack Weinberg <zack@@codesourcery.com

   This file is part of GNU libiberty.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. 
*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "ansidecl.h"
#include <stdio.h>
#include "libiberty.h"
#include "demangle.h"

struct line
{
  size_t alloced;
  char *data;
};

static unsigned int lineno;

/* Safely read a single line of arbitrary length from standard input.  */

#define LINELEN 80

static void
getline(buf)
     struct line *buf;
{
  char *data = buf->data;
  size_t alloc = buf->alloced;
  size_t count = 0;
  int c;

  if (data == 0)
    {
      data = xmalloc (LINELEN);
      alloc = LINELEN;
    }

  /* Skip comment lines.  */
  while ((c = getchar()) == '#')
    {
      while ((c = getchar()) != EOF && c != '\n');
      lineno++;
    }

  /* c is the first character on the line, and it's not a comment
     line: copy this line into the buffer and return.  */
  while (c != EOF && c != '\n')
    {
      if (count >= alloc)
	{
	  alloc *= 2;
	  data = xrealloc (data, alloc);
	}
      data[count++] = c;
      c = getchar();
    }
  lineno++;
  data[count] = '\0';

  buf->data = data;
  buf->alloced = alloc;
}

/* The tester operates on a data file consisting of triples of lines:
   format switch
   input to be demangled
   expected output

   The format switch is expected to be either the empty string, a
   line of the form --format=<name>, or just <name> by itself.  */

#define FORMATS "--format="
#define FORMATL (sizeof FORMATS - 1)

int
main(argc, argv)
     int argc;
     char **argv;
{
  enum demangling_styles style;
  struct line format;
  struct line input;
  struct line expect;
  char *fstyle;
  char *result;
  int failures = 0;
  int tests = 0;

  if (argc > 1)
    {
      fprintf (stderr, "usage: %s < test-set\n", argv[0]);
      return 2;
    }

  format.data = 0;
  input.data = 0;
  expect.data = 0;

  for (;;)
    {
      getline (&format);
      if (feof (stdin))
	break;

      getline (&input);
      getline (&expect);

      tests++;

      fstyle = format.data;
      if (!strncmp (fstyle, FORMATS, FORMATL))
	fstyle += FORMATL;

      if (fstyle[0] == '\0')
	style = auto_demangling;
      else
	style = cplus_demangle_name_to_style (fstyle);

      if (style == unknown_demangling)
	{
	  printf ("FAIL at line %d: unknown demangling style %s\n",
		  lineno, fstyle);
	  failures++;
	  continue;
	}

      cplus_demangle_set_style (style);

      result = cplus_demangle (input.data,
			       DMGL_PARAMS|DMGL_ANSI|DMGL_VERBOSE|DMGL_TYPES);

      if (result
	  ? strcmp (result, expect.data)
	  : strcmp (input.data, expect.data))
	{
	  printf ("\
FAIL at line %d, style %s:\n\
in:  %s\n\
out: %s\n\
exp: %s\n",
		   lineno, fstyle,
		   input.data,
		   result,
		   expect.data);
	  failures++;
	}
      free (result);
    }

  free (format.data);
  free (input.data);
  free (expect.data);

  printf ("%s: %d tests, %d failures\n", argv[0], tests, failures);
  return failures ? 1 : 0;
}
@


1.1
log
@Initial revision
@
text
@d68 1
a68 1
      if (count + 1 >= alloc)
@


1.1.1.1
log
@Synch with gcc-3.3.2 version
@
text
@@


1.1.1.2
log
@Update to libiberty from binutils-2.14
@
text
@d68 1
a68 1
      if (count >= alloc)
@


1.1.1.3
log
@update to gcc 3.3.5
@
text
@d68 1
a68 1
      if (count + 1 >= alloc)
@


1.1.1.4
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@d2 1
a2 1
   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.
d19 1
a19 1
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. 
a28 6
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#if HAVE_STDLIB_H
# include <stdlib.h>
#endif
d83 2
a84 18
static void
fail (lineno, opts, in, out, exp)
     int lineno;
     const char *opts;
     const char *in;
     const char *out;
     const char *exp;
{
  printf ("\
FAIL at line %d, options %s:\n\
in:  %s\n\
out: %s\n\
exp: %s\n",
	  lineno, opts, in, out != NULL ? out : "(null)", exp);
}

/* The tester operates on a data file consisting of groups of lines:
   options
d88 5
a92 13
   Supported options:
     --format=<name>     Sets the demangling style.
     --no-params         There are two lines of expected output; the first
                         is with DMGL_PARAMS, the second is without it.
     --is-v3-ctor        Calls is_gnu_v3_mangled_ctor on input; expected
                         output is an integer representing ctor_kind.
     --is-v3-dtor        Likewise, but for dtors.
     --ret-postfix       Passes the DMGL_RET_POSTFIX option

   For compatibility, just in case it matters, the options line may be
   empty, to mean --format=auto.  If it doesn't start with --, then it
   may contain only a format name.
*/
d99 1
a99 5
  enum demangling_styles style = auto_demangling;
  int no_params;
  int is_v3_ctor;
  int is_v3_dtor;
  int ret_postfix;
d103 1
d129 5
a133 5
      no_params = 0;
      ret_postfix = 0;
      is_v3_ctor = 0;
      is_v3_dtor = 0;
      if (format.data[0] == '\0')
a134 11
      else if (format.data[0] != '-')
	{
	  style = cplus_demangle_name_to_style (format.data);
	  if (style == unknown_demangling)
	    {
	      printf ("FAIL at line %d: unknown demangling style %s\n",
		      lineno, format.data);
	      failures++;
	      continue;
	    }
	}
d136 1
a136 51
	{
	  char *p;
	  char *opt;

	  p = format.data;
	  while (*p != '\0')
	    {
	      char c;

	      opt = p;
	      p += strcspn (p, " \t=");
	      c = *p;
	      *p = '\0';
	      if (strcmp (opt, "--format") == 0 && c == '=')
		{
		  char *fstyle;

		  *p = c;
		  ++p;
		  fstyle = p;
		  p += strcspn (p, " \t");
		  c = *p;
		  *p = '\0';
		  style = cplus_demangle_name_to_style (fstyle);
		  if (style == unknown_demangling)
		    {
		      printf ("FAIL at line %d: unknown demangling style %s\n",
			      lineno, fstyle);
		      failures++;
		      continue;
		    }
		}
	      else if (strcmp (opt, "--no-params") == 0)
		no_params = 1;
	      else if (strcmp (opt, "--is-v3-ctor") == 0)
		is_v3_ctor = 1;
	      else if (strcmp (opt, "--is-v3-dtor") == 0)
		is_v3_dtor = 1;
	      else if (strcmp (opt, "--ret-postfix") == 0)
		ret_postfix = 1;
	      else
		{
		  printf ("FAIL at line %d: unrecognized option %s\n",
			  lineno, opt);
		  failures++;
		  continue;
		}
	      *p = c;
	      p += strspn (p, " \t");
	    }
	}
d138 1
a138 1
      if (is_v3_ctor || is_v3_dtor)
d140 3
a142 23
	  char buf[20];

	  if (is_v3_ctor)
	    {
	      enum gnu_v3_ctor_kinds kc;

	      kc = is_gnu_v3_mangled_ctor (input.data);
	      sprintf (buf, "%d", (int) kc);
	    }
	  else
	    {
	      enum gnu_v3_dtor_kinds kd;

	      kd = is_gnu_v3_mangled_dtor (input.data);
	      sprintf (buf, "%d", (int) kd);
	    }

	  if (strcmp (buf, expect.data) != 0)
	    {
	      fail (lineno, format.data, input.data, buf, expect.data);
	      failures++;
	    }

d149 1
a149 2
			       DMGL_PARAMS|DMGL_ANSI|DMGL_TYPES
			       |(ret_postfix ? DMGL_RET_POSTFIX : 0));
d155 9
a163 1
	  fail (lineno, format.data, input.data, result, expect.data);
a166 15

      if (no_params)
	{
	  getline (&expect);
	  result = cplus_demangle (input.data, DMGL_ANSI|DMGL_TYPES);

	  if (result
	      ? strcmp (result, expect.data)
	      : strcmp (input.data, expect.data))
	    {
	      fail (lineno, format.data, input.data, result, expect.data);
	      failures++;
	    }
	  free (result);
	}
@


