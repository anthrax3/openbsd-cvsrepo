head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.38
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.34
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.30
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.32
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.24
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.28
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.22
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	BINUTILS_2_17_1:1.1.1.5
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	gcc-3_3_5:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.4
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	binutils-2_14:1.1.1.3
	gcc-3_3_2:1.1.1.2
	binutils-2_11_2:1.1.1.1
	binutils-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.05.27.18.52.44;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.22.03.56;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.25.20.39.25;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.25.17.55.56;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.12.24.21.48.31;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.05.27.18.46.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@/*

@@deftypefn Supplemental int vprintf (const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vfprintf (FILE *@@var{stream}, const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vsprintf (char *@@var{str}, const char *@@var{format}, va_list @@var{ap})

These functions are the same as @@code{printf}, @@code{fprintf}, and
@@code{sprintf}, respectively, except that they are called with a
@@code{va_list} instead of a variable number of arguments.  Note that
they do not call @@code{va_end}; this is the application's
responsibility.  In @@libib{} they are implemented in terms of the
nonstandard but common function @@code{_doprnt}.

@@end deftypefn

*/

#include <ansidecl.h>
#include <stdarg.h>
#include <stdio.h>
#undef vprintf
int
vprintf (const char *format, va_list ap)
{
  return vfprintf (stdout, format, ap);
}
@


1.2
log
@fix up conflicts
@
text
@a18 1
#ifdef ANSI_PROTOTYPES
a19 3
#else
#include <varargs.h>
#endif
d23 1
a23 3
vprintf (format, ap)
     const char *format;
     va_list ap;
@


1.1
log
@Initial revision
@
text
@d1 19
a19 1
#ifdef __STDC__
a24 1
#include <ansidecl.h>
@


1.1.1.1
log
@Moving libiberty around, keeping vendor branch.
First: binutils-2.10.
@
text
@@


1.1.1.2
log
@Synch with gcc-3.3.2 version
@
text
@a0 17
/*

@@deftypefn Supplemental int vprintf (const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vfprintf (FILE *@@var{stream}, const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vsprintf (char *@@var{str}, const char *@@var{format}, va_list @@var{ap})

These functions are the same as @@code{printf}, @@code{fprintf}, and
@@code{sprintf}, respectively, except that they are called with a
@@code{va_list} instead of a variable number of arguments.  Note that
they do not call @@code{va_end}; this is the application's
responsibility.  In @@libib{} they are implemented in terms of the
nonstandard but common function @@code{_doprnt}.

@@end deftypefn

*/

@


1.1.1.3
log
@Update to libiberty from binutils-2.14
@
text
@d18 1
a18 2
#include <ansidecl.h>
#ifdef ANSI_PROTOTYPES
d24 1
@


1.1.1.4
log
@update to gcc 3.3.5
@
text
@d18 2
a19 1
#ifdef __STDC__
a24 1
#include <ansidecl.h>
@


1.1.1.5
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@d18 1
a18 1
#include <ansidecl.h>
d20 3
d24 1
d27 3
a29 1
vprintf (const char *format, va_list ap)
@


