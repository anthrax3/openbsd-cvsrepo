head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.34
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.30
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.32
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.24
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.28
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.26
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.22
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.20
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.18
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.16
	OPENBSD_5_0:1.6.0.14
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.12
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.10
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	BINUTILS_2_17_1:1.1.1.6
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	gcc-3_3_5:1.1.1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	binutils-2_14:1.1.1.4
	gcc-3_3_2:1.1.1.3
	binutils-2_11_2:1.1.1.2
	binutils-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2008.05.27.18.52.44;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.25.18.02.31;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.25.21.17.01;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.25.21.06.18;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.24.16.47.34;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.31.42;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.24.16.31.42;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.24.16.34.20;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.25.20.39.14;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.25.17.55.08;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.12.24.21.48.45;	author espie;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.05.27.18.46.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@/* memcmp -- compare two memory regions.
   This function is in the public domain.  */

/*

@@deftypefn Supplemental int memcmp (const void *@@var{x}, const void *@@var{y}, size_t @@var{count})

Compares the first @@var{count} bytes of two areas of memory.  Returns
zero if they are the same, a value less than zero if @@var{x} is
lexically less than @@var{y}, or a value greater than zero if @@var{x}
is lexically greater than @@var{y}.  Note that lexical order is determined
as if comparing unsigned char arrays.

@@end deftypefn

*/

#include <ansidecl.h>
#include <stddef.h>

int
memcmp (const PTR str1, const PTR str2, size_t count)
{
  register const unsigned char *s1 = (const unsigned char*)str1;
  register const unsigned char *s2 = (const unsigned char*)str2;

  while (count-- > 0)
    {
      if (*s1++ != *s2++)
	  return s1[-1] < s2[-1] ? -1 : 1;
    }
  return 0;
}

@


1.5
log
@Automatic merge
@
text
@a18 1
#ifdef ANSI_PROTOTYPES
a19 3
#else
#define size_t unsigned long
#endif
d22 1
a22 4
memcmp (str1, str2, count)
     const PTR str1;
     const PTR str2;
     size_t count;
@


1.4
log
@fix instances of cvs brain-damage. We want the current FSF version of
these files.
@
text
@d19 1
a19 1
#ifdef __STDC__
d26 4
a29 2
DEFUN(memcmp, (str1, str2, count),
      const PTR str1 AND const PTR str2 AND size_t count)
@


1.3
log
@fix stupid cvs conflicts.
I think that cvs is a poor lonesome, depressive program.
The only way it has found of getting your attention is to throw
senseless conflicts that shouldn't exist in your way.
@
text
@d29 2
a30 2
  register unsigned char *s1 = (unsigned char*)str1;
  register unsigned char *s2 = (unsigned char*)str2;
@


1.2
log
@OpenBSD changes: synch somewhere between binutils-2.10 and 2.11
Support for mkstemps in choose-temp.
@
text
@a4 2
NAME
	memcmp -- compare two memory regions
d6 9
a14 2
SYNOPSIS
	int memcmp (const void *from, const void *to, size_t count)
a15 4
DESCRIPTION
	Compare two memory regions and return less than,
	equal to, or greater than zero, according to lexicographical
	ordering of the compared regions.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Moving libiberty around, keeping vendor branch.
First: binutils-2.10.
@
text
@@


1.1.1.2
log
@Second import from the vendor branch: binutils-2.11.2
@
text
@d28 2
a29 2
  register const unsigned char *s1 = (const unsigned char*)str1;
  register const unsigned char *s2 = (const unsigned char*)str2;
@


1.1.1.3
log
@Synch with gcc-3.3.2 version
@
text
@d5 2
d8 2
a9 9
@@deftypefn Supplemental int memcmp (const void *@@var{x}, const void *@@var{y}, size_t @@var{count})

Compares the first @@var{count} bytes of two areas of memory.  Returns
zero if they are the same, a value less than zero if @@var{x} is
lexically less than @@var{y}, or a value greater than zero if @@var{x}
is lexically greater than @@var{y}.  Note that lexical order is determined
as if comparing unsigned char arrays.

@@end deftypefn
d11 4
@


1.1.1.4
log
@Update to libiberty from binutils-2.14
@
text
@d19 1
a19 1
#ifdef ANSI_PROTOTYPES
d26 2
a27 4
memcmp (str1, str2, count)
     const PTR str1;
     const PTR str2;
     size_t count;
@


1.1.1.5
log
@update to gcc 3.3.5
@
text
@d19 1
a19 1
#ifdef __STDC__
d26 4
a29 2
DEFUN(memcmp, (str1, str2, count),
      const PTR str1 AND const PTR str2 AND size_t count)
@


1.1.1.6
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@d19 1
d21 3
d26 2
a27 1
memcmp (const PTR str1, const PTR str2, size_t count)
@


