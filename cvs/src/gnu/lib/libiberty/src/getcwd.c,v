head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.36
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.34
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.30
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.32
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.24
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.28
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.26
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.22
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.20
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.18
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.16
	OPENBSD_5_0:1.6.0.14
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.12
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.10
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	BINUTILS_2_17_1:1.1.1.6
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	gcc-3_3_5:1.1.1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	binutils-2_14:1.1.1.4
	gcc-3_3_2:1.1.1.3
	binutils-2_11_2:1.1.1.2
	binutils-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2008.05.27.18.52.44;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.25.18.02.31;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.25.21.19.23;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.25.21.06.18;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.24.16.47.34;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.31.42;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.24.16.31.42;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.24.16.34.17;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.25.20.39.12;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.25.17.54.51;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.12.24.21.48.31;	author espie;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.05.27.18.46.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@/* Emulate getcwd using getwd.
   This function is in the public domain. */

/*

@@deftypefn Supplemental char* getcwd (char *@@var{pathname}, int @@var{len})

Copy the absolute pathname for the current working directory into
@@var{pathname}, which is assumed to point to a buffer of at least
@@var{len} bytes, and return a pointer to the buffer.  If the current
directory's path doesn't fit in @@var{len} characters, the result is
@@code{NULL} and @@code{errno} is set.  If @@var{pathname} is a null pointer,
@@code{getcwd} will obtain @@var{len} bytes of space using
@@code{malloc}.

@@end deftypefn

*/

#include "config.h"

#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
#include <errno.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

extern char *getwd ();
extern int errno;

#ifndef MAXPATHLEN
#define MAXPATHLEN 1024
#endif

char *
getcwd (char *buf, size_t len)
{
  char ourbuf[MAXPATHLEN];
  char *result;

  result = getwd (ourbuf);
  if (result) {
    if (strlen (ourbuf) >= len) {
      errno = ERANGE;
      return 0;
    }
    if (!buf) {
       buf = (char*)malloc(len);
       if (!buf) {
           errno = ENOMEM;
	   return 0;
       }
    }
    strcpy (buf, ourbuf);
  }
  return buf;
}
@


1.5
log
@Automatic merge
@
text
@d41 1
a41 3
getcwd (buf, len)
  char *buf;
  size_t len;
@


1.4
log
@extra file mangled by cvs.
kill files that no longer exist.
@
text
@d43 1
a43 1
  int len;
@


1.3
log
@fix stupid cvs conflicts.
I think that cvs is a poor lonesome, depressive program.
The only way it has found of getting your attention is to throw
senseless conflicts that shouldn't exist in your way.
@
text
@d26 6
@


1.2
log
@OpenBSD changes: synch somewhere between binutils-2.10 and 2.11
Support for mkstemps in choose-temp.
@
text
@a4 2
NAME
	getcwd -- get absolute pathname for current working directory
d6 1
a6 2
SYNOPSIS
	char *getcwd (char pathname[len], len)
d8 7
a14 5
DESCRIPTION
	Copy the absolute pathname for the current working directory into
	the supplied buffer and return a pointer to the buffer.  If the 
	current directory's path doesn't fit in LEN characters, the result
	is NULL and errno is set.
d16 1
a16 6
	If pathname is a null pointer, getcwd() will obtain size bytes of
	space using malloc.

BUGS
	Emulated via the getwd() call, which is reasonable for most
	systems that do not have getcwd().
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Moving libiberty around, keeping vendor branch.
First: binutils-2.10.
@
text
@@


1.1.1.2
log
@Second import from the vendor branch: binutils-2.11.2
@
text
@a31 6
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
@


1.1.1.3
log
@Synch with gcc-3.3.2 version
@
text
@d5 2
d8 2
a9 1
@@deftypefn Supplemental char* getcwd (char *@@var{pathname}, int @@var{len})
d11 5
a15 7
Copy the absolute pathname for the current working directory into
@@var{pathname}, which is assumed to point to a buffer of at least
@@var{len} bytes, and return a pointer to the buffer.  If the current
directory's path doesn't fit in @@var{len} characters, the result is
@@code{NULL} and @@code{errno} is set.  If @@var{pathname} is a null pointer,
@@code{getcwd} will obtain @@var{len} bytes of space using
@@code{malloc}.
d17 6
a22 1
@@end deftypefn
@


1.1.1.4
log
@Update to libiberty from binutils-2.14
@
text
@d43 1
a43 1
  size_t len;
@


1.1.1.5
log
@update to gcc 3.3.5
@
text
@d43 1
a43 1
  int len;
@


1.1.1.6
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@d41 3
a43 1
getcwd (char *buf, size_t len)
@


