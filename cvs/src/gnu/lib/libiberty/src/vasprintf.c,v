head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.36
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.34
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.30
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.32
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.24
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.28
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.26
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.22
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.20
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.18
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	OPENBSD_5_0:1.4.0.14
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.12
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	BINUTILS_2_17_1:1.1.1.4
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	gcc-3_3_5:1.1.1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	binutils-2_14:1.1.1.3
	gcc-3_3_2:1.1.1.3
	binutils-2_11_2:1.1.1.2
	binutils-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2008.05.27.18.52.44;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.25.21.06.19;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.24.16.47.34;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.24.16.31.46;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.24.16.34.23;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.25.20.39.25;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.05.27.18.46.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@/* Like vsprintf but provides a pointer to malloc'd storage, which must
   be freed by the caller.
   Copyright (C) 1994, 2003 Free Software Foundation, Inc.

This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <ansidecl.h>
#include <stdarg.h>
#if !defined (va_copy) && defined (__va_copy)
# define va_copy(d,s)  __va_copy((d),(s))
#endif
#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#else
extern unsigned long strtoul ();
extern PTR malloc ();
#endif
#include "libiberty.h"

#ifdef TEST
int global_total_width;
#endif

/*

@@deftypefn Extension int vasprintf (char **@@var{resptr}, const char *@@var{format}, va_list @@var{args})

Like @@code{vsprintf}, but instead of passing a pointer to a buffer,
you pass a pointer to a pointer.  This function will compute the size
of the buffer needed, allocate memory with @@code{malloc}, and store a
pointer to the allocated memory in @@code{*@@var{resptr}}.  The value
returned is the same as @@code{vsprintf} would return.  If memory could
not be allocated, minus one is returned and @@code{NULL} is stored in
@@code{*@@var{resptr}}.

@@end deftypefn

*/

static int int_vasprintf (char **, const char *, va_list);

static int
int_vasprintf (char **result, const char *format, va_list args)
{
  const char *p = format;
  /* Add one to make sure that it is never zero, which might cause malloc
     to return NULL.  */
  int total_width = strlen (format) + 1;
  va_list ap;

#ifdef va_copy
  va_copy (ap, args);
#else
  memcpy ((PTR) &ap, (PTR) &args, sizeof (va_list));
#endif

  while (*p != '\0')
    {
      if (*p++ == '%')
	{
	  while (strchr ("-+ #0", *p))
	    ++p;
	  if (*p == '*')
	    {
	      ++p;
	      total_width += abs (va_arg (ap, int));
	    }
	  else
	    total_width += strtoul (p, (char **) &p, 10);
	  if (*p == '.')
	    {
	      ++p;
	      if (*p == '*')
		{
		  ++p;
		  total_width += abs (va_arg (ap, int));
		}
	      else
	      total_width += strtoul (p, (char **) &p, 10);
	    }
	  while (strchr ("hlL", *p))
	    ++p;
	  /* Should be big enough for any format specifier except %s and floats.  */
	  total_width += 30;
	  switch (*p)
	    {
	    case 'd':
	    case 'i':
	    case 'o':
	    case 'u':
	    case 'x':
	    case 'X':
	    case 'c':
	      (void) va_arg (ap, int);
	      break;
	    case 'f':
	    case 'e':
	    case 'E':
	    case 'g':
	    case 'G':
	      (void) va_arg (ap, double);
	      /* Since an ieee double can have an exponent of 307, we'll
		 make the buffer wide enough to cover the gross case. */
	      total_width += 307;
	      break;
	    case 's':
	      total_width += strlen (va_arg (ap, char *));
	      break;
	    case 'p':
	    case 'n':
	      (void) va_arg (ap, char *);
	      break;
	    }
	  p++;
	}
    }
#ifdef va_copy
  va_end (ap);
#endif
#ifdef TEST
  global_total_width = total_width;
#endif
  *result = (char *) malloc (total_width);
  if (*result != NULL)
    return vsprintf (*result, format, args);
  else
    return -1;
}

int
vasprintf (char **result, const char *format,
#if defined (_BSD_VA_LIST_) && defined (__FreeBSD__)
           _BSD_VA_LIST_ args)
#else
           va_list args)
#endif
{
  return int_vasprintf (result, format, args);
}

#ifdef TEST
static void ATTRIBUTE_PRINTF_1
checkit (const char *format, ...)
{
  char *result;
  VA_OPEN (args, format);
  VA_FIXEDARG (args, const char *, format);
  vasprintf (&result, format, args);
  VA_CLOSE (args);

  if (strlen (result) < (size_t) global_total_width)
    printf ("PASS: ");
  else
    printf ("FAIL: ");
  printf ("%d %s\n", global_total_width, result);

  free (result);
}

extern int main (void);

int
main (void)
{
  checkit ("%d", 0x12345678);
  checkit ("%200d", 5);
  checkit ("%.300d", 6);
  checkit ("%100.150d", 7);
  checkit ("%s", "jjjjjjjjjiiiiiiiiiiiiiiioooooooooooooooooppppppppppppaa\n\
777777777777777777333333333333366666666666622222222222777777777777733333");
  checkit ("%f%s%d%s", 1.0, "foo", 77, "asdjffffffffffffffiiiiiiiiiiixxxxx");

  return 0;
}
#endif /* TEST */
@


1.3
log
@fix stupid cvs conflicts.
I think that cvs is a poor lonesome, depressive program.
The only way it has found of getting your attention is to throw
senseless conflicts that shouldn't exist in your way.
@
text
@d3 1
a3 1
   Copyright (C) 1994 Free Software Foundation, Inc.
d18 2
a19 2
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */
a24 1
#ifdef ANSI_PROTOTYPES
d26 2
a27 2
#else
#include <varargs.h>
d54 1
a54 1
not be allocated, zero is returned and @@code{NULL} is stored in
d61 1
a61 1
static int int_vasprintf PARAMS ((char **, const char *, va_list *));
d64 1
a64 4
int_vasprintf (result, format, args)
     char **result;
     const char *format;
     va_list *args;
d72 5
a76 1
  memcpy ((PTR) &ap, (PTR) args, sizeof (va_list));
d138 3
d146 1
a146 1
    return vsprintf (*result, format, *args);
d148 1
a148 1
    return 0;
d152 1
a152 3
vasprintf (result, format, args)
     char **result;
     const char *format;
d154 1
a154 1
     _BSD_VA_LIST_ args;
d156 1
a156 1
     va_list args;
d159 1
a159 1
  return int_vasprintf (result, format, &args);
d164 1
a164 1
checkit VPARAMS ((const char *format, ...))
d181 1
a181 1
extern int main PARAMS ((void));
d184 1
a184 1
main ()
@


1.2
log
@OpenBSD changes: synch somewhere between binutils-2.10 and 2.11
Support for mkstemps in choose-temp.
@
text
@d21 5
a25 1
#ifdef __STDC__
d31 1
d33 8
a40 1
#include <ansidecl.h>
d46 17
a62 2
unsigned long strtoul ();
char *malloc ();
d90 1
a90 1
	    total_width += strtoul (p, &p, 10);
d100 1
a100 1
	      total_width += strtoul (p, &p, 10);
d141 1
a141 1
  *result = malloc (total_width);
d162 2
a163 8
void
checkit
#ifdef __STDC__
     (const char* format, ...)
#else
     (va_alist)
     va_dcl
#endif
a164 1
  va_list args;
d166 4
d171 1
a171 9
#ifdef __STDC__
  va_start (args, format);
#else
  char *format;
  va_start (args);
  format = va_arg (args, char *);
#endif
  vasprintf (&result, format, args);
  if (strlen (result) < global_total_width)
d176 2
d180 2
d192 2
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Moving libiberty around, keeping vendor branch.
First: binutils-2.10.
@
text
@@


1.1.1.2
log
@Second import from the vendor branch: binutils-2.11.2
@
text
@d21 1
a21 5
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <ansidecl.h>
#ifdef ANSI_PROTOTYPES
d28 1
a28 7
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#else
extern unsigned long strtoul ();
extern PTR malloc ();
#endif
#include "libiberty.h"
d34 2
a35 2

static int int_vasprintf PARAMS ((char **, const char *, va_list *));
d63 1
a63 1
	    total_width += strtoul (p, (char **) &p, 10);
d73 1
a73 1
	      total_width += strtoul (p, (char **) &p, 10);
d135 8
a142 4
static void checkit PARAMS ((const char *, ...));

static void
checkit VPARAMS ((const char* format, ...))
a145 3
#ifndef ANSI_PROTOTYPES
  const char *format;
#endif
d147 6
a152 4
  VA_START (args, format);

#ifndef ANSI_PROTOTYPES
  format = va_arg (args, const char *);
a153 1

d155 1
a155 1
  if (strlen (result) < (size_t) global_total_width)
a161 2
extern int main PARAMS ((void));

a171 2

  return 0;
@


1.1.1.3
log
@Synch with gcc-3.3.2 version
@
text
@a30 1
#ifdef HAVE_STRING_H
a31 1
#endif
a43 15
/*

@@deftypefn Extension int vasprintf (char **@@var{resptr}, const char *@@var{format}, va_list @@var{args})

Like @@code{vsprintf}, but instead of passing a pointer to a buffer,
you pass a pointer to a pointer.  This function will compute the size
of the buffer needed, allocate memory with @@code{malloc}, and store a
pointer to the allocated memory in @@code{*@@var{resptr}}.  The value
returned is the same as @@code{vsprintf} would return.  If memory could
not be allocated, zero is returned and @@code{NULL} is stored in
@@code{*@@var{resptr}}.

@@end deftypefn

*/
d124 1
a124 1
  *result = (char *) malloc (total_width);
d145 4
a148 2
static void ATTRIBUTE_PRINTF_1
checkit VPARAMS ((const char *format, ...))
d150 1
d152 10
a161 2
  VA_OPEN (args, format);
  VA_FIXEDARG (args, const char *, format);
a162 2
  VA_CLOSE (args);

a167 2

  free (result);
@


1.1.1.4
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@d3 1
a3 1
   Copyright (C) 1994, 2003 Free Software Foundation, Inc.
d18 2
a19 2
not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */
d25 1
d27 2
a28 2
#if !defined (va_copy) && defined (__va_copy)
# define va_copy(d,s)  __va_copy((d),(s))
d55 1
a55 1
not be allocated, minus one is returned and @@code{NULL} is stored in
d62 1
a62 1
static int int_vasprintf (char **, const char *, va_list);
d65 4
a68 1
int_vasprintf (char **result, const char *format, va_list args)
d76 1
a76 5
#ifdef va_copy
  va_copy (ap, args);
#else
  memcpy ((PTR) &ap, (PTR) &args, sizeof (va_list));
#endif
a137 3
#ifdef va_copy
  va_end (ap);
#endif
d143 1
a143 1
    return vsprintf (*result, format, args);
d145 1
a145 1
    return -1;
d149 3
a151 1
vasprintf (char **result, const char *format,
d153 1
a153 1
           _BSD_VA_LIST_ args)
d155 1
a155 1
           va_list args)
d158 1
a158 1
  return int_vasprintf (result, format, args);
d163 1
a163 1
checkit (const char *format, ...)
d180 1
a180 1
extern int main (void);
d183 1
a183 1
main (void)
@


