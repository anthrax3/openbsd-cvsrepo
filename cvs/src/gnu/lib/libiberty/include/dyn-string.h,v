head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.36
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.38
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.34
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.30
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.32
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.24
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.28
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.22
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	BINUTILS_2_17_1:1.1.1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	binutils-2_14:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.05.27.18.52.43;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.25.21.06.18;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.24.16.47.34;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.25.20.39.31;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.05.27.18.46.00;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge OpenBSD specific changes:
- pexecute implementation replaced with the older gcc 2.95 implementation,
  as gcc 2.95's collect2 relies upon an implementation behaviour which has
  been lost in further libiberty updates.
- keep the old hash table interfaces, which are used by gcc 2.95.
- keep the OpenBSD replacement for the md5 interface.
- keep the OpenBSD strl{cat,cpy} and snprinft usage.

Bump libiberty minor version due to the addition of a few new symbols.
@
text
@/* An abstract string datatype.
   Copyright (C) 1998, 1999, 2000, 2002, 2004 Free Software Foundation, Inc.
   Contributed by Mark Mitchell (mark@@markmitchell.com).

This file is part of GCC.
   
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */


typedef struct dyn_string
{
  int allocated;	/* The amount of space allocated for the string.  */
  int length;		/* The actual length of the string.  */
  char *s;		/* The string itself, NUL-terminated.  */
}* dyn_string_t;

/* The length STR, in bytes, not including the terminating NUL.  */
#define dyn_string_length(STR)                                          \
  ((STR)->length)

/* The NTBS in which the contents of STR are stored.  */
#define dyn_string_buf(STR)                                             \
  ((STR)->s)

/* Compare DS1 to DS2 with strcmp.  */
#define dyn_string_compare(DS1, DS2)                                    \
  (strcmp ((DS1)->s, (DS2)->s))


/* dyn_string functions are used in the demangling implementation
   included in the G++ runtime library.  To prevent collisions with
   names in user programs, the functions that are used in the
   demangler are given implementation-reserved names.  */

#if defined(IN_LIBGCC2) || defined(IN_GLIBCPP_V3)

#define dyn_string_init                 __cxa_dyn_string_init
#define dyn_string_new                  __cxa_dyn_string_new
#define dyn_string_delete               __cxa_dyn_string_delete
#define dyn_string_release              __cxa_dyn_string_release
#define dyn_string_resize               __cxa_dyn_string_resize
#define dyn_string_clear                __cxa_dyn_string_clear
#define dyn_string_copy                 __cxa_dyn_string_copy
#define dyn_string_copy_cstr            __cxa_dyn_string_copy_cstr
#define dyn_string_prepend              __cxa_dyn_string_prepend
#define dyn_string_prepend_cstr         __cxa_dyn_string_prepend_cstr
#define dyn_string_insert               __cxa_dyn_string_insert
#define dyn_string_insert_cstr          __cxa_dyn_string_insert_cstr
#define dyn_string_insert_char          __cxa_dyn_string_insert_char
#define dyn_string_append               __cxa_dyn_string_append
#define dyn_string_append_cstr          __cxa_dyn_string_append_cstr
#define dyn_string_append_char          __cxa_dyn_string_append_char
#define dyn_string_substring            __cxa_dyn_string_substring
#define dyn_string_eq                   __cxa_dyn_string_eq

#endif /* IN_LIBGCC2 || IN_GLIBCPP_V3 */


extern int dyn_string_init (struct dyn_string *, int);
extern dyn_string_t dyn_string_new (int);
extern void dyn_string_delete (dyn_string_t);
extern char *dyn_string_release (dyn_string_t);
extern dyn_string_t dyn_string_resize (dyn_string_t, int);
extern void dyn_string_clear (dyn_string_t);
extern int dyn_string_copy (dyn_string_t, dyn_string_t);
extern int dyn_string_copy_cstr (dyn_string_t, const char *);
extern int dyn_string_prepend (dyn_string_t, dyn_string_t);
extern int dyn_string_prepend_cstr (dyn_string_t, const char *);
extern int dyn_string_insert (dyn_string_t, int, dyn_string_t);
extern int dyn_string_insert_cstr (dyn_string_t, int, const char *);
extern int dyn_string_insert_char (dyn_string_t, int, int);
extern int dyn_string_append (dyn_string_t, dyn_string_t);
extern int dyn_string_append_cstr (dyn_string_t, const char *);
extern int dyn_string_append_char (dyn_string_t, int);
extern int dyn_string_substring (dyn_string_t,  dyn_string_t, int, int);
extern int dyn_string_eq (dyn_string_t, dyn_string_t);
@


1.2
log
@fix stupid cvs conflicts.
I think that cvs is a poor lonesome, depressive program.
The only way it has found of getting your attention is to throw
senseless conflicts that shouldn't exist in your way.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
d19 2
a20 2
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */
d72 18
a89 21
extern int dyn_string_init              PARAMS ((struct dyn_string *, int));
extern dyn_string_t dyn_string_new      PARAMS ((int));
extern void dyn_string_delete           PARAMS ((dyn_string_t));
extern char *dyn_string_release         PARAMS ((dyn_string_t));
extern dyn_string_t dyn_string_resize   PARAMS ((dyn_string_t, int));
extern void dyn_string_clear            PARAMS ((dyn_string_t));
extern int dyn_string_copy              PARAMS ((dyn_string_t, dyn_string_t));
extern int dyn_string_copy_cstr         PARAMS ((dyn_string_t, const char *));
extern int dyn_string_prepend           PARAMS ((dyn_string_t, dyn_string_t));
extern int dyn_string_prepend_cstr      PARAMS ((dyn_string_t, const char *));
extern int dyn_string_insert            PARAMS ((dyn_string_t, int,
						 dyn_string_t));
extern int dyn_string_insert_cstr       PARAMS ((dyn_string_t, int,
						 const char *));
extern int dyn_string_insert_char       PARAMS ((dyn_string_t, int, int));
extern int dyn_string_append            PARAMS ((dyn_string_t, dyn_string_t));
extern int dyn_string_append_cstr       PARAMS ((dyn_string_t, const char *));
extern int dyn_string_append_char       PARAMS ((dyn_string_t, int));
extern int dyn_string_substring         PARAMS ((dyn_string_t, 
						 dyn_string_t, int, int));
extern int dyn_string_eq                PARAMS ((dyn_string_t, dyn_string_t));
@


1.1
log
@OpenBSD changes: synch somewhere between binutils-2.10 and 2.11
Support for mkstemps in choose-temp.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GNU CC.
d7 1
a7 1
GNU CC is free software; you can redistribute it and/or modify
d12 1
a12 1
GNU CC is distributed in the hope that it will be useful,
d18 1
a18 1
along with GNU CC; see the file COPYING.  If not, write to
d48 1
a48 1
#ifdef IN_LIBGCC2
d69 1
a69 1
#endif /* IN_LIBGCC2 */
@


1.1.1.1
log
@Synch with gcc-3.3.2 version
@
text
@d2 1
a2 1
   Copyright (C) 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GCC.
d7 1
a7 1
GCC is free software; you can redistribute it and/or modify
d12 1
a12 1
GCC is distributed in the hope that it will be useful,
d18 1
a18 1
along with GCC; see the file COPYING.  If not, write to
d48 1
a48 1
#if defined(IN_LIBGCC2) || defined(IN_GLIBCPP_V3)
d69 1
a69 1
#endif /* IN_LIBGCC2 || IN_GLIBCPP_V3 */
@


1.1.1.2
log
@Update libiberty to the version found in binutils 2.17.1 (which still
identifies itself as the gcc 3 version...)
@
text
@d2 1
a2 1
   Copyright (C) 1998, 1999, 2000, 2002, 2004 Free Software Foundation, Inc.
d19 2
a20 2
the Free Software Foundation, 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */
d43 50
a92 18
extern int dyn_string_init (struct dyn_string *, int);
extern dyn_string_t dyn_string_new (int);
extern void dyn_string_delete (dyn_string_t);
extern char *dyn_string_release (dyn_string_t);
extern dyn_string_t dyn_string_resize (dyn_string_t, int);
extern void dyn_string_clear (dyn_string_t);
extern int dyn_string_copy (dyn_string_t, dyn_string_t);
extern int dyn_string_copy_cstr (dyn_string_t, const char *);
extern int dyn_string_prepend (dyn_string_t, dyn_string_t);
extern int dyn_string_prepend_cstr (dyn_string_t, const char *);
extern int dyn_string_insert (dyn_string_t, int, dyn_string_t);
extern int dyn_string_insert_cstr (dyn_string_t, int, const char *);
extern int dyn_string_insert_char (dyn_string_t, int, int);
extern int dyn_string_append (dyn_string_t, dyn_string_t);
extern int dyn_string_append_cstr (dyn_string_t, const char *);
extern int dyn_string_append_char (dyn_string_t, int);
extern int dyn_string_substring (dyn_string_t,  dyn_string_t, int, int);
extern int dyn_string_eq (dyn_string_t, dyn_string_t);
@


