head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.48
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.50
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.46
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.42
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.44
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.36
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.40
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.38
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.34
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.32
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.30
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.28
	OPENBSD_5_0:1.2.0.26
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.24
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.22
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.18
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2005.06.17.20.40.31;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.05.15.45.54;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.05.15.45.54;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
next citrus step.

reviewed by millert, otto, kevlo, naddy, kettenis...
libc+libstdc++ bump
@
text
@// Forwarding declarations -*- C++ -*-

// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003
// Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

//
// ISO C++ 14882: 27.2  Forward declarations
//

/** @@file iosfwd
 *  This is a Standard C++ Library header.  You should @@c #include this header
 *  in your programs, rather than any of the "st[dl]_*.h" implementation files.
 */

#ifndef _CPP_IOSFWD
#define _CPP_IOSFWD 1

#pragma GCC system_header

#include <bits/c++config.h>
#include <bits/c++locale.h> 
#include <cctype>		// For isspace, etc.
#include <bits/stringfwd.h> 	// For string forward declarations.
#include <bits/fpos.h>
#include <bits/functexcept.h>

namespace std 
{
  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
	    typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
	   typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
	   typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
	   typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;

#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS
  // Not included.   (??? Apparently no LWG number?)
  class ios_base; 
#endif

  /** 
   *  @@defgroup s27_2_iosfwd I/O Forward Declarations
   *
   *  Nearly all of the I/O classes are parameterized on the type of
   *  characters they read and write.  (The major exception is ios_base at
   *  the top of the hierarchy.)  This is a change from pre-Standard
   *  streams, which were not templates.
   *
   *  For ease of use and compatibility, all of the basic_* I/O-related
   *  classes are given typedef names for both of the builtin character
   *  widths (wide and narrow).  The typedefs are the same as the
   *  pre-Standard names, for example:
   *
   *  @@code
   *     typedef basic_ifstream<char>  ifstream;
   *  @@endcode
   *
   *  Because properly forward-declaring these classes can be difficult, you
   *  should not do it yourself.  Instead, include the &lt;iosfwd&gt;
   *  header, which contains only declarations of all the I/O classes as
   *  well as the typedefs.  Trying to forward-declare the typedefs
   *  themselves (e.g., "class ostream;") is not valid ISO C++.
   *
   *  For more specific declarations, see
   *  http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#10
   *
   *  @@{
  */
  typedef basic_ios<char> 		ios;		///< @@isiosfwd
  typedef basic_streambuf<char> 	streambuf;	///< @@isiosfwd
  typedef basic_istream<char> 		istream;	///< @@isiosfwd
  typedef basic_ostream<char> 		ostream;	///< @@isiosfwd
  typedef basic_iostream<char> 		iostream;	///< @@isiosfwd
  typedef basic_stringbuf<char> 	stringbuf;	///< @@isiosfwd
  typedef basic_istringstream<char> 	istringstream;	///< @@isiosfwd
  typedef basic_ostringstream<char> 	ostringstream;	///< @@isiosfwd
  typedef basic_stringstream<char> 	stringstream;	///< @@isiosfwd
  typedef basic_filebuf<char> 		filebuf;	///< @@isiosfwd
  typedef basic_ifstream<char> 		ifstream;	///< @@isiosfwd
  typedef basic_ofstream<char> 		ofstream;	///< @@isiosfwd
  typedef basic_fstream<char> 		fstream;	///< @@isiosfwd

#if defined(_GLIBCPP_USE_WCHAR_T) || defined(_GLIBCPP_USE_TYPE_WCHAR_T)
  typedef basic_ios<wchar_t> 		wios;		///< @@isiosfwd
  typedef basic_streambuf<wchar_t> 	wstreambuf;	///< @@isiosfwd
  typedef basic_istream<wchar_t> 	wistream;	///< @@isiosfwd
  typedef basic_ostream<wchar_t> 	wostream;	///< @@isiosfwd
  typedef basic_iostream<wchar_t> 	wiostream;	///< @@isiosfwd
  typedef basic_stringbuf<wchar_t> 	wstringbuf;	///< @@isiosfwd
  typedef basic_istringstream<wchar_t> 	wistringstream;	///< @@isiosfwd
  typedef basic_ostringstream<wchar_t> 	wostringstream;	///< @@isiosfwd
  typedef basic_stringstream<wchar_t> 	wstringstream;	///< @@isiosfwd
  typedef basic_filebuf<wchar_t> 	wfilebuf;	///< @@isiosfwd
  typedef basic_ifstream<wchar_t> 	wifstream;	///< @@isiosfwd
  typedef basic_ofstream<wchar_t> 	wofstream;	///< @@isiosfwd
  typedef basic_fstream<wchar_t> 	wfstream;	///< @@isiosfwd
#endif
  /** @@}  */
} // namespace std

#endif
@


1.1
log
@Initial revision
@
text
@d150 1
a150 1
#ifdef _GLIBCPP_USE_WCHAR_T
@


1.1.1.1
log
@standard C++ library for gcc 3.x
@
text
@@
