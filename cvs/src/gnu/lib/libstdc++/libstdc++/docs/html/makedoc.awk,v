head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.01.05.15.43.56;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.05.15.43.56;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# Take apart bits of HTML and puts them back together again in new and
# fascinating ways.  Copyright (C) 2002 Free Software Foundation, Inc.
# Contributed by Phil Edwards <pme@@gcc.gnu.org>.  Simple two-state automaton
# inspired by Richard Henderson's gcc/mkmap-symver.awk.

# 'file' is the name of the file on stdin
# 'title' is the text to print at the start of the list

BEGIN {
  state = "looking";
  entries = 0;
  printf ("   <li>%s\n", title);
  printf ("   <ul>\n");
}

# Searching for the little table of contents at the top.
state == "looking" && /^<h1>Contents/ {
  state = "entries";
  next;
}

# Ignore everything else up to that point.
state == "looking" {
  next;
}

# An entry in the table of contents.  Pull that line apart.
state == "entries" && /<li>/ {
  extract_info($0);
  next;
}

# End of the list.  Don't bother reading the rest of the file.  (It could
# also contain more <li>'s, so that would be incorrect as well as wasteful.)
state == "entries" && /^<\/ul>/ {
  exit;
}

END {
  for (i = 0; i < entries; i++)
    printf ("     %s\n", entry[i]);
  printf ("   </ul>\n   </li>\n\n");
}

function extract_info(line) {
  # thistarget will be things like "#5" or "elsewhere.html"
  match(line,"href=\".*\"");
  thistarget = substr(line,RSTART+6,RLENGTH-7);

  # take apart the filename
  split(file,X,"/");
  if (thistarget ~ /^#/) {
    # local name, use directory and filename
    target = file thistarget
  } else {
    # different file, only use directory
    target = X[1] "/" thistarget
  }

  # visible text
  gsub("</a></li>","",line);
  start = index(line,"\">") + 2;
  thistext = substr(line,start);

  # Assemble and store the HTML for later output.
  entry[entries++] = "<li><a href=\"" target "\">" thistext "</a></li>"
}

# vim:sw=2
@


1.1.1.1
log
@standard C++ library for gcc 3.x
@
text
@@
