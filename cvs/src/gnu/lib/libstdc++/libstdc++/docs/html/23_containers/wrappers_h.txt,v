head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.52
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.48
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.50
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.42
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.46
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.44
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.40
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.38
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.36
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.34
	OPENBSD_5_0:1.1.1.1.0.32
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.30
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.28
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.01.05.15.44.23;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.05.15.44.23;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
/*****************************************************************
 * Functions to help treat arrays in a uniform manner.  These were
 * inspired by a thread on comp.lang.c++.moderated, started by Dietmar
 * Kuehl and contributed to by the rest of the entire planet.
 *
 * beginof (x), endof (x), lengthof (x) now accompany sizeof, where x
 * can be either a container (currently only sequences) or a builtin
 * array (/not/ a pointer).  The beginof/endof are intended for use in
 * the algorithms library, and lengthof is a "sizing" function.
 *
 * Note example:
 *       char  an_array [17];
 *       cerr << lengthof(an_array) << endl;
 * produces assembly code of
 *       mov 17,register0
 *       call ofstream_put
 * i.e., the template function inlining really does work; g++
 * requires -O3 (or -finline-functions) before it does this, though.
 *
 * pedwards 13Nov98
*/
// beginof
template <class T>
  inline typename vector<T>::iterator beginof (vector<T> &v)
  { return v.begin(); }

template <class T, unsigned int sz>
  inline T* beginof (T (&array)[sz]) { return array; }


// endof
template <class T>
  inline typename vector<T>::iterator endof (vector<T> &v)
  { return v.end(); }

template <class T, unsigned int sz>
  inline T* endof (T (&array)[sz]) { return array + sz; }


// lengthof
template <class T>
  inline typename vector<T>::size_type lengthof (vector<T> &v)
  { return v.size(); }

template <class T, unsigned int sz>
  inline unsigned int lengthof (T (&)[sz]) { return sz; }

@


1.1.1.1
log
@standard C++ library for gcc 3.x
@
text
@@
