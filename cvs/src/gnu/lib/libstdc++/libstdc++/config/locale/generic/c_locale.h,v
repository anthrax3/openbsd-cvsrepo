head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.48
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.50
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.46
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.42
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.44
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.36
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.40
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.38
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.34
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.32
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.30
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.28
	OPENBSD_5_0:1.3.0.26
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.24
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.22
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.18
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.20
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.16
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.14
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.12
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	gcc-3_3_5:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	gcc-3_3_2:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.04.27.09.39.42;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.09.11.41.49;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.05.15.43.45;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.05.15.43.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@zap strlcpy.
bring some code from more recent gcc, in order to have size_t,
and to simplify things a little.
okay otto@@ and friends.
@
text
@// Wrapper for underlying C-language localization -*- C++ -*-

// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

//
// ISO C++ 14882: 22.8  Standard locale categories.
//

// Written by Benjamin Kosnik <bkoz@@redhat.com>

#ifndef _CPP_BITS_C_LOCALE_H
#define _CPP_BITS_C_LOCALE_H 1

#pragma GCC system_header

#include <clocale>
#include <cstring>
#include <cstdio>

#define _GLIBCPP_NUM_CATEGORIES 0

namespace std
{
  typedef int*			__c_locale;

  // Convert numeric value of type _Tv to string and return length of
  // string.  If snprintf is available use it, otherwise fall back to
  // the unsafe sprintf which, in general, can be dangerous and should
  // be avoided.
  template<typename _Tv>
    int
    __convert_from_v(char* __out, 
		     const int __attribute__ ((__unused__)) __size,
		     const char* __fmt,
		     _Tv __v, const __c_locale&, int __prec = -1)
    {
      char* __old = std::setlocale(LC_NUMERIC, NULL);
      size_t __len = std::strlen(__old) + 1;
      char* __sav = new char[__len];
      strlcpy(__sav, __old, __len);
      std::setlocale(LC_NUMERIC, "C");

      int __ret;
#if defined _GLIBCPP_USE_C99 || defined _GLIBCPP_USE_C99_SNPRINTF
      if (__prec >= 0)
        __ret = std::snprintf(__out, __size, __fmt, __prec, __v);
      else
        __ret = std::snprintf(__out, __size, __fmt, __v);
#else
      if (__prec >= 0)
        __ret = std::sprintf(__out, __fmt, __prec, __v);
      else
        __ret = std::sprintf(__out, __fmt, __v);
#endif
      std::setlocale(LC_NUMERIC, __sav);
      delete [] __sav;
      return __ret;
    }
}

#endif
@


1.2
log
@bye, bye, sprintf.
create an actual openbsd configuration that we can tweak.
okay kettenis@@
@
text
@d42 2
d62 5
a66 5
      char* __old = setlocale(LC_ALL, NULL);
      char* __sav = static_cast<char*>(malloc(strlen(__old) + 1));
      if (__sav)
        strcpy(__sav, __old);
      setlocale(LC_ALL, "C");
d71 1
a71 1
        __ret = snprintf(__out, __size, __fmt, __prec, __v);
d73 1
a73 1
        __ret = snprintf(__out, __size, __fmt, __v);
d76 1
a76 1
        __ret = sprintf(__out, __fmt, __prec, __v);
d78 1
a78 1
        __ret = sprintf(__out, __fmt, __v);
d80 2
a81 2
      setlocale(LC_ALL, __sav);
      free(__sav);
@


1.1
log
@Initial revision
@
text
@d67 1
a67 1
#ifdef _GLIBCPP_USE_C99
@


1.1.1.1
log
@standard C++ library for gcc 3.x
@
text
@@
