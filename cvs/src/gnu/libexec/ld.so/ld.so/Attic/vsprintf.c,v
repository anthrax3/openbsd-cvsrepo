head	1.3;
access;
symbols
	OPENBSD_2_9:1.2.0.14
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.12
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.10
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2001.06.27.19.48.56;	author miod;	state dead;
branches;
next	1.2;

1.2
date	98.02.05.14.47.12;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	96.09.18.08.15.31;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.3
log
@More mips leftovers to get rid of...
@
text
@/*  Adapted for ELF dynamic linker - Mitch
 *
 *  vsprintf.c
 *
 *  Copyright (C) 1991, 1992  Linus Torvalds and Lars Wirzenius
 *
 *  Wirzenius wrote this portably, Torvalds fucked it up :-)
 */
#include <stdio.h>
#include <stdarg.h>
#include <ctype.h>
#include <unistd.h>
#include "hash.h"
#include "string.h"
#include "syscall.h"


/* we use this so that we can do without the ctype library */
#define is_digit(c)	((c) >= '0' && (c) <= '9')

static int skip_atoi(const char **s)
{
	int i=0;

	while (is_digit(**s))
		i = i*10 + *((*s)++) - '0';
	return i;
}

#define ZEROPAD	1		/* pad with zero */
#define SIGN	2		/* unsigned/signed long */
#define PLUS	4		/* show plus */
#define SPACE	8		/* space if plus */
#define LEFT	16		/* left justified */
#define SPECIAL	32		/* 0x */
#define SMALL	64		/* use 'abcdef' instead of 'ABCDEF' */

static char * number(char * str, int remain, int num, int base,
			int size, int precision ,int type)
{
	char c,sign,tmp[36];
	const char *digits="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	int i;

	if (type&SMALL) digits="0123456789abcdefghijklmnopqrstuvwxyz";
	if (type&LEFT) type &= ~ZEROPAD;
	if (base<2 || base>36)
		return 0;
	c = (type & ZEROPAD) ? '0' : ' ' ;
	if (type&SIGN && num<0) {
		sign='-';
		num = -num;
	} else
		sign=(type&PLUS) ? '+' : ((type&SPACE) ? ' ' : 0);
	if (sign) size--;
	if (type&SPECIAL)
		if (base==16) size -= 2;
		else if (base==8) size--;
	i=0;
	if (num==0)
		tmp[i++]='0';
	else while (num!=0) {
		tmp[i++]=digits[(unsigned)num % base];
		(unsigned)num /= base;
	}
	if (i>precision) precision=i;
	size -= precision;
	if (!(type&(ZEROPAD+LEFT)))
		while(size-->0 && --remain > 0)
			*str++ = ' ';
	if (sign && --remain > 0)
		*str++ = sign;
	if (type & SPECIAL)
		if (base == 8 && --remain > 0)
			*str++ = '0';
		else if (base == 16 && --remain > 0 && --remain > 0) {
			*str++ = '0';
			*str++ = digits[33];
		}
	if (!(type & LEFT))
		while(size-- > 0 && --remain > 0)
			*str++ = c;
	while(i < precision-- && --remain > 0)
		*str++ = '0';
	while(i-- > 0 && --remain > 0)
		*str++ = tmp[i];
	while(size-- > 0 && --remain > 0)
		*str++ = ' ';
	return str;
}

int _dl_fdprintf(int fd, const char *fmt, ...)
{
	int len;
	int i;
	char * str;
	char *s;
	int *ip;

	int flags;		/* flags to number() */

	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */
	int remain;
	char buf[1024];
	va_list args;

	va_start(args, fmt);
	for (str=buf, remain=sizeof(buf) ; *fmt ; ++fmt) {
		if (*fmt != '%') {
			*str++ = *fmt;
			remain--;
			continue;
		}
			
		/* process flags */
		flags = 0;
		repeat:
			++fmt;		/* this also skips first '%' */
			switch (*fmt) {
				case '-': flags |= LEFT; goto repeat;
				case '+': flags |= PLUS; goto repeat;
				case ' ': flags |= SPACE; goto repeat;
				case '#': flags |= SPECIAL; goto repeat;
				case '0': flags |= ZEROPAD; goto repeat;
				}
		
		/* get field width */
		field_width = -1;
		if (is_digit(*fmt))
			field_width = skip_atoi(&fmt);
		else if (*fmt == '*') {
			/* it's the next argument */
			field_width = va_arg(args, int);
			if (field_width < 0) {
				field_width = -field_width;
				flags |= LEFT;
			}
		}

		/* get the precision */
		precision = -1;
		if (*fmt == '.') {
			++fmt;	
			if (is_digit(*fmt))
				precision = skip_atoi(&fmt);
			else if (*fmt == '*') {
				/* it's the next argument */
				precision = va_arg(args, int);
			}
			if (precision < 0)
				precision = 0;
		}

		/* get the conversion qualifier */
		qualifier = -1;
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
			qualifier = *fmt;
			++fmt;
		}

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0 && --remain > 0) 
					*str++ = ' ';
			if(--remain > 0)
				*str++ = (unsigned char) va_arg(args, int);
			while (--field_width > 0 && --remain > 0)
				*str++ = ' ';
			break;

		case 's':
			s = va_arg(args, char *);
			len = _dl_strlen(s);
			if (precision < 0)
				precision = len;
			else if (len > precision)
				len = precision;

			if (!(flags & LEFT))
				while (len < field_width-- && --remain > 0)
					*str++ = ' ';
			for (i = 0; i < len && remain > 1; ++i, --remain)
				*str++ = *s++;
			while (len < field_width-- && --remain > 0)
				*str++ = ' ';
			break;

		case 'o':
			str = number(str, remain,
				va_arg(args, unsigned long), 8,
				field_width, precision, flags);
			remain = buf + sizeof(buf) - 1 - str;
			break;

		case 'p':
			if (field_width == -1) {
				field_width = 8;
				flags |= ZEROPAD;
			}
			str = number(str, remain,
				(unsigned long) va_arg(args, void *), 16,
				field_width, precision, flags);
			remain = buf + sizeof(buf) - 1 - str;
			break;

		case 'x':
			flags |= SMALL;
		case 'X':
			str = number(str, remain,
				va_arg(args, unsigned long), 16,
				field_width, precision, flags);
			remain = buf + sizeof(buf) - 1 - str;
			break;

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			str = number(str, remain,
				va_arg(args, unsigned long), 10,
				field_width, precision, flags);
			remain = buf + sizeof(buf) - 1 - str;
			break;

		case 'n':
			ip = va_arg(args, int *);
			*ip = (str - buf);
			break;

		default:
			if (*fmt != '%')
				*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
			remain--;
			break;
		}
	}
	*str = '\0';
	_dl_write(fd, buf, str-buf);
	return str-buf;
}

@


1.2
log
@Buf ovfl check...
@
text
@@


1.1
log
@OK, this is the dynamic loader for the MIPS. It's a hack, it's GPL'd, its
just ugly, but it works. So we stick with it right now...
@
text
@d38 2
a39 2
static char * number(char * str, int num, int base, int size, int precision
	,int type)
d69 1
a69 1
		while(size-->0)
d71 1
a71 1
	if (sign)
d73 2
a74 2
	if (type&SPECIAL)
		if (base==8)
d76 1
a76 1
		else if (base==16) {
d80 2
a81 2
	if (!(type&LEFT))
		while(size-->0)
d83 1
a83 1
	while(i<precision--)
d85 1
a85 1
	while(i-->0)
d87 1
a87 1
	while(size-->0)
d106 1
d111 1
a111 1
	for (str=buf ; *fmt ; ++fmt) {
d114 1
d167 1
a167 1
				while (--field_width > 0)
d169 3
a171 2
			*str++ = (unsigned char) va_arg(args, int);
			while (--field_width > 0)
d184 1
a184 1
				while (len < field_width--)
d186 1
a186 1
			for (i = 0; i < len; ++i)
d188 1
a188 1
			while (len < field_width--)
d193 2
a194 1
			str = number(str, va_arg(args, unsigned long), 8,
d196 1
d204 1
a204 1
			str = number(str,
d207 1
d213 2
a214 1
			str = number(str, va_arg(args, unsigned long), 16,
d216 1
d223 2
a224 1
			str = number(str, va_arg(args, unsigned long), 10,
d226 1
d241 1
@
