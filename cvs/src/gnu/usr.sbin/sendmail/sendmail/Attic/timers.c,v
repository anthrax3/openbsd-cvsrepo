head	1.8;
access;
symbols
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.28
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.26
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.24
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.22
	OPENBSD_5_0:1.6.0.20
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.18
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.16
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.20
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.18
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.16
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.14
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	SENDMAIL_8_12_0:1.1.1.3
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	SENDMAIL_8_11_2:1.1.1.2
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	SENDMAIL_8_10_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.09.17.18.49.52;	author matthieu;	state dead;
branches;
next	1.7;
commitid	M7i5giHIoz3DMlTU;

1.7
date	2014.02.07.21.25.00;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.04.13.17.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.22.18.43.56;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.01.17.18.30;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.11.19.02.50;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.15.21.09.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.02.19.05.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.02.19.05.48;	author millert;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	2001.01.15.20.52.18;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	2001.05.31.00.31.44;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Bye.
@
text
@/*
 * Copyright (c) 1999-2001 Proofpoint, Inc. and its suppliers.
 *	All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 * Contributed by Exactis.com, Inc.
 *
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: timers.c,v 8.27 2013/11/22 20:51:57 ca Exp $")

#if _FFR_TIMERS
# include <sys/types.h>
# include <sm/time.h>
# include "sendmail.h"
# include <sys/resource.h>	/* Must be after sendmail.h for NCR MP-RAS */

static TIMER	BaseTimer;		/* current baseline */
static int	NTimers;		/* current pointer into stack */
static TIMER	*TimerStack[MAXTIMERSTACK];

static void
# ifdef __STDC__
warntimer(const char *msg, ...)
# else /* __STDC__ */
warntimer(msg, va_alist)
	const char *msg;
	va_dcl
# endif /* __STDC__ */
{
	char buf[MAXLINE];
	SM_VA_LOCAL_DECL

# if 0
	if (!tTd(98, 30))
		return;
# endif /* 0 */
	SM_VA_START(ap, msg);
	(void) sm_vsnprintf(buf, sizeof(buf), msg, ap);
	SM_VA_END(ap);
	sm_syslog(LOG_NOTICE, CurEnv->e_id, "%s; e_timers=0x%lx",
		  buf, (unsigned long) &CurEnv->e_timers);
}

static void
zerotimer(ptimer)
	TIMER *ptimer;
{
	memset(ptimer, '\0', sizeof(*ptimer));
}

static void
addtimer(ta, tb)
	TIMER *ta;
	TIMER *tb;
{
	tb->ti_wall_sec += ta->ti_wall_sec;
	tb->ti_wall_usec += ta->ti_wall_usec;
	if (tb->ti_wall_usec > 1000000)
	{
		tb->ti_wall_sec++;
		tb->ti_wall_usec -= 1000000;
	}
	tb->ti_cpu_sec += ta->ti_cpu_sec;
	tb->ti_cpu_usec += ta->ti_cpu_usec;
	if (tb->ti_cpu_usec > 1000000)
	{
		tb->ti_cpu_sec++;
		tb->ti_cpu_usec -= 1000000;
	}
}

static void
subtimer(ta, tb)
	TIMER *ta;
	TIMER *tb;
{
	tb->ti_wall_sec -= ta->ti_wall_sec;
	tb->ti_wall_usec -= ta->ti_wall_usec;
	if (tb->ti_wall_usec < 0)
	{
		tb->ti_wall_sec--;
		tb->ti_wall_usec += 1000000;
	}
	tb->ti_cpu_sec -= ta->ti_cpu_sec;
	tb->ti_cpu_usec -= ta->ti_cpu_usec;
	if (tb->ti_cpu_usec < 0)
	{
		tb->ti_cpu_sec--;
		tb->ti_cpu_usec += 1000000;
	}
}

static int
getcurtimer(ptimer)
	TIMER *ptimer;
{
	struct rusage ru;
	struct timeval now;

	if (getrusage(RUSAGE_SELF, &ru) < 0 || gettimeofday(&now, NULL) < 0)
		return -1;
	ptimer->ti_wall_sec = now.tv_sec;
	ptimer->ti_wall_usec = now.tv_usec;
	ptimer->ti_cpu_sec = ru.ru_utime.tv_sec + ru.ru_stime.tv_sec;
	ptimer->ti_cpu_usec = ru.ru_utime.tv_usec + ru.ru_stime.tv_usec;
	if (ptimer->ti_cpu_usec > 1000000)
	{
		ptimer->ti_cpu_sec++;
		ptimer->ti_cpu_usec -= 1000000;
	}
	return 0;
}

static void
getinctimer(ptimer)
	TIMER *ptimer;
{
	TIMER cur;

	if (getcurtimer(&cur) < 0)
	{
		zerotimer(ptimer);
		return;
	}
	if (BaseTimer.ti_wall_sec == 0)
	{
		/* first call */
		memset(ptimer, '\0', sizeof(*ptimer));
	}
	else
	{
		*ptimer = cur;
		subtimer(&BaseTimer, ptimer);
	}
	BaseTimer = cur;
}

void
flushtimers()
{
	NTimers = 0;
	(void) getcurtimer(&BaseTimer);
}

void
pushtimer(ptimer)
	TIMER *ptimer;
{
	int i;
	int save_errno = errno;
	TIMER incr;

	/* find how much time has changed since last call */
	getinctimer(&incr);

	/* add that into the old timers */
	i = NTimers;
	if (i > MAXTIMERSTACK)
		i = MAXTIMERSTACK;
	while (--i >= 0)
	{
		addtimer(&incr, TimerStack[i]);
		if (TimerStack[i] == ptimer)
		{
			warntimer("Timer@@0x%lx already on stack, index=%d, NTimers=%d",
				  (unsigned long) ptimer, i, NTimers);
			errno = save_errno;
			return;
		}
	}
	errno = save_errno;

	/* handle stack overflow */
	if (NTimers >= MAXTIMERSTACK)
		return;

	/* now add the timer to the stack */
	TimerStack[NTimers++] = ptimer;
}

void
poptimer(ptimer)
	TIMER *ptimer;
{
	int i;
	int save_errno = errno;
	TIMER incr;

	/* find how much time has changed since last call */
	getinctimer(&incr);

	/* add that into the old timers */
	i = NTimers;
	if (i > MAXTIMERSTACK)
		i = MAXTIMERSTACK;
	while (--i >= 0)
		addtimer(&incr, TimerStack[i]);

	/* pop back to this timer */
	for (i = 0; i < NTimers; i++)
	{
		if (TimerStack[i] == ptimer)
			break;
	}

	if (i != NTimers - 1)
		warntimer("poptimer: odd pop (timer=0x%lx, index=%d, NTimers=%d)",
			  (unsigned long) ptimer, i, NTimers);
	NTimers = i;

	/* clean up and return */
	errno = save_errno;
}

char *
strtimer(ptimer)
	TIMER *ptimer;
{
	static char buf[40];

	(void) sm_snprintf(buf, sizeof(buf), "%ld.%06ldr/%ld.%06ldc",
		ptimer->ti_wall_sec, ptimer->ti_wall_usec,
		ptimer->ti_cpu_sec, ptimer->ti_cpu_usec);
	return buf;
}
#endif /* _FFR_TIMERS */
@


1.7
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.6
log
@Update to sendmail-8.14.0.  OK mbalmer@@
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d14 1
a14 1
SM_RCSID("@@(#)$Sendmail: timers.c,v 8.26 2006/08/15 23:24:58 ca Exp $")
@


1.5
log
@Update to sendmail 8.13.6
@
text
@d14 1
a14 1
SM_RCSID("@@(#)$Sendmail: timers.c,v 8.25 2005/06/14 23:07:23 ca Exp $")
d43 1
a43 1
	(void) sm_vsnprintf(buf, sizeof buf, msg, ap);
d53 1
a53 1
	memset(ptimer, '\0', sizeof *ptimer);
d133 1
a133 1
		memset(ptimer, '\0', sizeof *ptimer);
d226 1
a226 1
	(void) sm_snprintf(buf, sizeof buf, "%ld.%06ldr/%ld.%06ldc",
@


1.4
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d14 1
a14 1
SM_RCSID("@@(#)$Sendmail: timers.c,v 8.24 2001/09/11 04:05:17 gshapiro Exp $")
d18 1
a18 1
# include <sys/time.h>
@


1.3
log
@merge in sendmail 8.12.0 with BSD Makefiles and mdoc man pages
@
text
@d14 1
a14 1
SM_RCSID("@@(#)$Sendmail: timers.c,v 8.22 2001/05/10 01:16:11 ca Exp $")
@


1.2
log
@sendmail 8.11.2 with BSD Makefiles
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2000 Sendmail, Inc. and its suppliers.
d13 2
a14 3
#ifndef lint
static char id[] = "@@(#)$Sendmail: timers.c,v 8.13.16.1 2000/10/09 01:06:45 gshapiro Exp $";
#endif /* ! lint */
d36 1
a36 1
	VA_LOCAL_DECL
d42 3
a44 3
	VA_START(msg);
	vsnprintf(buf, sizeof buf, msg, ap);
	VA_END;
d46 1
a46 1
		  buf, (u_long) &CurEnv->e_timers);
d171 1
a171 1
				  (u_long) ptimer, i, NTimers);
d213 1
a213 1
			  (u_long) ptimer, i, NTimers);
d226 1
a226 1
	snprintf(buf, sizeof buf, "%ld.%06ldr/%ld.%06ldc",
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1999 Sendmail, Inc. and its suppliers.
d14 1
a14 1
static char id[] = "@@(#)$Sendmail: timers.c,v 8.13 1999/11/23 07:22:28 gshapiro Exp $";
d207 1
d210 2
@


1.1.1.1
log
@stock sendmail 8.10.0 with $Id -> $Sendmail
@
text
@@


1.1.1.1.4.1
log
@Pull in patch from current:
Errata(028):
The signal handlers in sendmail contain code that is unsafe in the
context of a signal handler.  This leads to potentially serious race
conditions.  At the moment this is a theoretical attack only and can
only be exploited on the local host (if at all).
Fix(millert):
Update to sendmail 8.11.4:
8.11.4 revamps signal handling within the MTA in order to reduce
the likelihood of a race condition that can lead to heap
corruption as described in Michal Zalewski's advisory.  The
problems discussed in the advisory are not currently known to
be exploitable but we recommend upgrading to 8.11.4 in case a
method is found to exploit the signal handling race condition.
8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2000 Sendmail, Inc. and its suppliers.
d14 1
a14 1
static char id[] = "@@(#)$Sendmail: timers.c,v 8.13.16.1 2000/10/09 01:06:45 gshapiro Exp $";
a206 1
	{
a208 2
	}

@


1.1.1.2
log
@sendmail 8.11.2
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2000 Sendmail, Inc. and its suppliers.
d14 1
a14 1
static char id[] = "@@(#)$Id: timers.c,v 8.13.16.1 2000/10/09 01:06:45 gshapiro Exp $";
a206 1
	{
a208 2
	}

@


1.1.1.3
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d13 3
a15 2
#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: timers.c,v 8.22 2001/05/10 01:16:11 ca Exp $")
d37 1
a37 1
	SM_VA_LOCAL_DECL
d43 3
a45 3
	SM_VA_START(ap, msg);
	(void) sm_vsnprintf(buf, sizeof buf, msg, ap);
	SM_VA_END(ap);
d47 1
a47 1
		  buf, (unsigned long) &CurEnv->e_timers);
d172 1
a172 1
				  (unsigned long) ptimer, i, NTimers);
d214 1
a214 1
			  (unsigned long) ptimer, i, NTimers);
d227 1
a227 1
	(void) sm_snprintf(buf, sizeof buf, "%ld.%06ldr/%ld.%06ldc",
@


