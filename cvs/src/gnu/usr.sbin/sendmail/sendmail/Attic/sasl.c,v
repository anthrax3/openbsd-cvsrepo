head	1.13;
access;
symbols
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.24
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.22
	OPENBSD_5_0:1.10.0.20
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.18
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.16
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.12
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SENDMAIL_8_12_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.13
date	2014.09.17.18.49.52;	author matthieu;	state dead;
branches;
next	1.12;
commitid	M7i5giHIoz3DMlTU;

1.12
date	2014.02.07.21.25.00;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2012.12.26.11.44.12;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2007.02.04.13.17.35;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.16.00.21.31;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.24.03.59.27;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.01.19.59.23;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.15.02.23.36;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.26.04.48.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.03.17.25.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.18.00.49.28;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.01.17.18.30;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Bye.
@
text
@/*
 * Copyright (c) 2001-2002 Proofpoint, Inc. and its suppliers.
 *	All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.24 2013/11/22 20:51:56 ca Exp $")

#if SASL
# include <stdlib.h>
# include <sendmail.h>
# include <errno.h>

/*
**  In order to ensure that storage leaks are tracked, and to prevent
**  conflicts between the sm_heap package and sasl, we tell sasl to
**  use the following heap allocation functions.  Unfortunately,
**  older sasl packages incorrectly specifies the size of a block
**  using unsigned long: for portability, it should be size_t.
*/

# if defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a
#  define SM_SASL_SIZE_T	size_t
# else /* defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a */
#  define SM_SASL_SIZE_T	unsigned long
# endif /* defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a */

void *sm_sasl_malloc __P((SM_SASL_SIZE_T));
static void *sm_sasl_calloc __P((SM_SASL_SIZE_T, SM_SASL_SIZE_T));
static void *sm_sasl_realloc __P((void *, SM_SASL_SIZE_T));
void sm_sasl_free __P((void *));

/*
**  SASLv1:
**  We can't use an rpool for Cyrus-SASL memory management routines,
**	since the encryption/decryption routines in Cyrus-SASL
**	allocate/deallocate a buffer each time. Since rpool
**	don't release memory until the very end, memory consumption is
**	proportional to the size of an e-mail, which is unacceptable.
*/

/*
**  SM_SASL_MALLOC -- malloc() for SASL
**
**	Parameters:
**		size -- size of requested memory.
**
**	Returns:
**		pointer to memory.
*/

void *
sm_sasl_malloc(size)
	SM_SASL_SIZE_T size;
{
	return sm_malloc((size_t) size);
}

/*
**  SM_SASL_CALLOC -- calloc() for SASL
**
**	Parameters:
**		nelem -- number of elements.
**		elemsize -- size of each element.
**
**	Returns:
**		pointer to memory.
**
**	Notice:
**		this isn't currently used by SASL.
*/

static void *
sm_sasl_calloc(nelem, elemsize)
	SM_SASL_SIZE_T nelem;
	SM_SASL_SIZE_T elemsize;
{
	size_t size;
	void *p;

	size = (size_t) nelem * (size_t) elemsize;
	p = sm_malloc(size);
	if (p == NULL)
		return NULL;
	memset(p, '\0', size);
	return p;
}

/*
**  SM_SASL_REALLOC -- realloc() for SASL
**
**	Parameters:
**		p -- pointer to old memory.
**		size -- size of requested memory.
**
**	Returns:
**		pointer to new memory.
*/

static void *
sm_sasl_realloc(o, size)
	void *o;
	SM_SASL_SIZE_T size;
{
	return sm_realloc(o, (size_t) size);
}

/*
**  SM_SASL_FREE -- free() for SASL
**
**	Parameters:
**		p -- pointer to free.
**
**	Returns:
**		none
*/

void
sm_sasl_free(p)
	void *p;
{
	sm_free(p);
}

/*
**  SM_SASL_INIT -- sendmail specific SASL initialization
**
**	Parameters:
**		none.
**
**	Returns:
**		none
**
**	Side Effects:
**		installs memory management routines for SASL.
*/

void
sm_sasl_init()
{
	sasl_set_alloc(sm_sasl_malloc, sm_sasl_calloc,
		       sm_sasl_realloc, sm_sasl_free);
}
/*
**  INTERSECT -- create the intersection between two lists
**
**	Parameters:
**		s1, s2 -- lists of items (separated by single blanks).
**		rpool -- resource pool from which result is allocated.
**
**	Returns:
**		the intersection of both lists.
*/

char *
intersect(s1, s2, rpool)
	char *s1, *s2;
	SM_RPOOL_T *rpool;
{
	char *hr, *h1, *h, *res;
	int l1, l2, rl;

	if (s1 == NULL || s2 == NULL)	/* NULL string(s) -> NULL result */
		return NULL;
	l1 = strlen(s1);
	l2 = strlen(s2);
	rl = SM_MIN(l1, l2);
	res = (char *) sm_rpool_malloc(rpool, rl + 1);
	if (res == NULL)
		return NULL;
	*res = '\0';
	if (rl == 0)	/* at least one string empty? */
		return res;
	hr = res;
	h1 = s1;
	h = s1;

	/* walk through s1 */
	while (h != NULL && *h1 != '\0')
	{
		/* is there something after the current word? */
		if ((h = strchr(h1, ' ')) != NULL)
			*h = '\0';
		l1 = strlen(h1);

		/* does the current word appear in s2 ? */
		if (iteminlist(h1, s2, " ") != NULL)
		{
			/* add a blank if not first item */
			if (hr != res)
				*hr++ = ' ';

			/* copy the item */
			memcpy(hr, h1, l1);

			/* advance pointer in result list */
			hr += l1;
			*hr = '\0';
		}
		if (h != NULL)
		{
			/* there are more items */
			*h = ' ';
			h1 = h + 1;
		}
	}
	return res;
}
# if SASL >= 20000
/*
**  IPTOSTRING -- create string for SASL_IP*PORT property
**		(borrowed from lib/iptostring.c in Cyrus-IMAP)
**
**	Parameters:
**		addr -- (pointer to) socket address
**		addrlen -- length of socket address
**		out -- output string (result)
**		outlen -- maximum length of output string
**
**	Returns:
**		true iff successful.
**
**	Side Effects:
**		creates output string if successful.
**		sets errno if unsuccessful.
*/

#  include <arpa/inet.h>

#  ifndef NI_MAXHOST
#   define NI_MAXHOST	1025
#  endif
#  ifndef NI_MAXSERV
#   define NI_MAXSERV	32
#  endif

bool
iptostring(addr, addrlen, out, outlen)
	SOCKADDR *addr;
	SOCKADDR_LEN_T addrlen;
	char *out;
	unsigned outlen;
{
	char hbuf[NI_MAXHOST], pbuf[NI_MAXSERV];
#  if NETINET6
	int niflags;
#  endif /* NETINET6 */

	if (addr == NULL || out == NULL)
	{
		errno = EINVAL;
		return false;
	}

#  if NETINET6
	niflags = (NI_NUMERICHOST | NI_NUMERICSERV);
#   ifdef NI_WITHSCOPEID
	if (addr->sa.sa_family == AF_INET6)
		niflags |= NI_WITHSCOPEID;
#   endif /* NI_WITHSCOPEID */
	if (getnameinfo((struct sockaddr *) addr, addrlen,
			hbuf, sizeof(hbuf), pbuf, sizeof(pbuf), niflags) != 0)
		return false;
#  else /* NETINET6 */
	if (addr->sa.sa_family != AF_INET)
	{
		errno = EINVAL;
		return false;
	}
	if (sm_strlcpy(hbuf, inet_ntoa(addr->sin.sin_addr), sizeof(hbuf))
	    >= sizeof(hbuf))
	{
		errno = ENOMEM;
		return false;
	}
	sm_snprintf(pbuf, sizeof(pbuf), "%d", ntohs(addr->sin.sin_port));
#  endif /* NETINET6 */

	if (outlen < strlen(hbuf) + strlen(pbuf) + 2)
	{
		errno = ENOMEM;
		return false;
	}
	sm_snprintf(out, outlen, "%s;%s", hbuf, pbuf);
	return true;
}
# endif /* SASL >= 20000 */
#endif /* SASL */
@


1.12
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.11
log
@Update to sendmail 8.14.6
@
text
@d2 1
a2 1
 * Copyright (c) 2001-2002 Sendmail, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.23 2012/11/27 18:53:13 gshapiro Exp $")
@


1.10
log
@Update to sendmail-8.14.0.  OK mbalmer@@
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.22 2006/08/15 23:24:57 ca Exp $")
d23 1
a23 1
**  the sasl package incorrectly specifies the size of a block
d27 9
a35 3
void *sm_sasl_malloc __P((unsigned long));
static void *sm_sasl_calloc __P((unsigned long, unsigned long));
static void *sm_sasl_realloc __P((void *, unsigned long));
d59 1
a59 1
	unsigned long size;
d80 2
a81 2
	unsigned long nelem;
	unsigned long elemsize;
d108 1
a108 1
	unsigned long size;
@


1.9
log
@Update to sendmail-8.13.2
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.21 2004/11/22 23:09:00 gshapiro Exp $")
d261 1
a261 1
			hbuf, sizeof hbuf, pbuf, sizeof pbuf, niflags) != 0)
d275 1
a275 1
	sm_snprintf(pbuf, sizeof pbuf, "%d", ntohs(addr->sin.sin_port));
@


1.8
log
@Update to sendmail.8.13.0
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.20 2004/06/02 22:48:06 ca Exp $")
a228 3
#  ifndef NI_WITHSCOPEID
#   define NI_WITHSCOPEID	0
#  endif
d244 3
d255 5
d261 1
a261 2
			hbuf, sizeof hbuf, pbuf, sizeof pbuf,
			NI_NUMERICHOST | NI_WITHSCOPEID | NI_NUMERICSERV) != 0)
@


1.7
log
@update to sendmail 8.12.7
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.19.2.2 2002/09/26 23:03:40 gshapiro Exp $")
d211 1
a211 1
**		  (borrowed from lib/iptostring.c in Cyrus-IMAP)
@


1.6
log
@update to sendmail-8.12.6
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.19.2.1 2002/07/13 18:04:56 ca Exp $")
d211 1
a211 1
**		(borrowed from lib/iptostring.c in Cyrus-IMAP)
@


1.5
log
@sendmail 8.12.5
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.19 2002/06/12 15:06:12 ca Exp $")
d211 1
a211 1
**                (borrowed from lib/iptostring.c in Cyrus-IMAP)
@


1.4
log
@Update to sendmail-8.12.4
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.18 2002/05/25 00:26:42 gshapiro Exp $")
d265 2
a266 2
	if (inet_ntop(AF_INET, &(addr->sin.sin_addr),
		      hbuf, sizeof hbuf) == NULL)
d268 1
a268 1
		errno = EINVAL;
@


1.3
log
@update to sendmail 8.12.3
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.12 2002/01/21 02:28:05 gshapiro Exp $")
a17 1
# include <sasl.h>
d33 1
a38 1
**
d208 75
@


1.2
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Sendmail, Inc. and its suppliers.
d11 3
a14 2
# include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.11 2001/09/11 04:05:16 gshapiro Exp $")
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.8 2001/09/04 22:43:05 ca Exp $")
d143 1
a143 1
/*
@


1.1.1.1
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@@
