head	1.9;
access;
symbols
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.38
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.36
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.34
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.32
	OPENBSD_5_0:1.7.0.30
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.28
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.26
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.22
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SENDMAIL_8_12_0:1.1.1.3
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	SENDMAIL_8_11_2:1.1.1.2
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	SENDMAIL_8_10_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.09.17.18.49.52;	author matthieu;	state dead;
branches;
next	1.8;
commitid	M7i5giHIoz3DMlTU;

1.8
date	2014.02.07.21.25.00;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.24.03.59.28;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.01.19.59.23;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.01.17.18.30;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.11.19.02.50;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.21.16.31.45;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.15.21.09.11;	author millert;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.04.02.19.05.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.02.19.05.48;	author millert;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	2001.01.15.20.52.19;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	2001.05.31.00.31.45;	author miod;	state Exp;
branches;
next	1.1.1.1.4.2;

1.1.1.1.4.2
date	2001.08.21.18.09.04;	author miod;	state Exp;
branches;
next	;

1.2.2.1
date	2001.08.21.18.22.19;	author jason;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Bye.
@
text
@/*
 * Copyright (c) 1998-2001 Proofpoint, Inc. and its suppliers.
 *	All rights reserved.
 * Copyright (c) 1983, 1995-1997 Eric P. Allman.  All rights reserved.
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 */

#include <sendmail.h>
#include <sm/debug.h>
#include <sm/string.h>

SM_RCSID("@@(#)$Sendmail: trace.c,v 8.39 2013/11/22 20:51:57 ca Exp $")

static char	*tTnewflag __P((char *));
static char	*tToldflag __P((char *));

/*
**  TtSETUP -- set up for trace package.
**
**	Parameters:
**		vect -- pointer to trace vector.
**		size -- number of flags in trace vector.
**		defflags -- flags to set if no value given.
**
**	Returns:
**		none
**
**	Side Effects:
**		environment is set up.
*/

static unsigned char	*tTvect;
static unsigned int	tTsize;
static char	*DefFlags;

void
tTsetup(vect, size, defflags)
	unsigned char *vect;
	unsigned int size;
	char *defflags;
{
	tTvect = vect;
	tTsize = size;
	DefFlags = defflags;
}

/*
**  tToldflag -- process an old style trace flag
**
**	Parameters:
**		s -- points to a [\0, \t] terminated string,
**		     and the initial character is a digit.
**
**	Returns:
**		pointer to terminating [\0, \t] character
**
**	Side Effects:
**		modifies tTvect
*/

static char *
tToldflag(s)
	register char *s;
{
	unsigned int first, last;
	register unsigned int i;

	/* find first flag to set */
	i = 0;
	while (isascii(*s) && isdigit(*s) && i < tTsize)
		i = i * 10 + (*s++ - '0');

	/*
	**  skip over rest of a too large number
	**  Maybe we should complain if out-of-bounds values are used.
	*/

	while (isascii(*s) && isdigit(*s) && i >= tTsize)
		s++;
	first = i;

	/* find last flag to set */
	if (*s == '-')
	{
		i = 0;
		while (isascii(*++s) && isdigit(*s) && i < tTsize)
			i = i * 10 + (*s - '0');

		/* skip over rest of a too large number */
		while (isascii(*s) && isdigit(*s) && i >= tTsize)
			s++;
	}
	last = i;

	/* find the level to set it to */
	i = 1;
	if (*s == '.')
	{
		i = 0;
		while (isascii(*++s) && isdigit(*s))
			i = i * 10 + (*s - '0');
	}

	/* clean up args */
	if (first >= tTsize)
		first = tTsize - 1;
	if (last >= tTsize)
		last = tTsize - 1;

	/* set the flags */
	while (first <= last)
		tTvect[first++] = (unsigned char) i;

	/* skip trailing junk */
	while (*s != '\0' && *s != ',' && *s != ' ' && *s != '\t')
		++s;

	return s;
}

/*
**  tTnewflag -- process a new style trace flag
**
**	Parameters:
**		s -- Points to a non-empty [\0, \t] terminated string,
**		     of which the initial character is not a digit.
**
**	Returns:
**		pointer to terminating [\0, \t] character
**
**	Side Effects:
**		adds trace flag to libsm debug database
*/

static char *
tTnewflag(s)
	register char *s;
{
	char *pat, *endpat;
	int level;

	pat = s;
	while (*s != '\0' && *s != ',' && *s != ' ' && *s != '\t' && *s != '.')
		++s;
	endpat = s;
	if (*s == '.')
	{
		++s;
		level = 0;
		while (isascii(*s) && isdigit(*s))
		{
			level = level * 10 + (*s - '0');
			++s;
		}
		if (level < 0)
			level = 0;
	}
	else
	{
		level = 1;
	}

	sm_debug_addsetting_x(sm_strndup_x(pat, endpat - pat), level);

	/* skip trailing junk */
	while (*s != '\0' && *s != ',' && *s != ' ' && *s != '\t')
		++s;

	return s;
}

/*
**  TtFLAG -- process an external trace flag list.
**
**	Parameters:
**		s -- the trace flag.
**
**		The syntax of a trace flag list is as follows:
**
**		<flags> ::= <flag> | <flags> "," <flag>
**		<flag> ::= <categories> | <categories> "." <level>
**		<categories> ::= <int> | <int> "-" <int> | <pattern>
**		<pattern> ::= <an sh glob pattern matching a C identifier>
**
**		White space is ignored before and after a flag.
**		However, note that we skip over anything we don't
**		understand, rather than report an error.
**
**	Returns:
**		none.
**
**	Side Effects:
**		sets/clears old-style trace flags.
**		registers new-style trace flags with the libsm debug package.
*/

void
tTflag(s)
	register char *s;
{
	if (s == NULL || *s == '\0')
		s = DefFlags;

	for (;;)
	{
		if (*s == '\0')
			return;
		if (*s == ',' || *s == ' ' || *s == '\t')
		{
			++s;
			continue;
		}
		if (isascii(*s) && isdigit(*s))
			s = tToldflag(s);
		else
			s = tTnewflag(s);
	}
}
@


1.8
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.7
log
@Update to sendmail.8.13.0
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.
d18 1
a18 1
SM_RCSID("@@(#)$Sendmail: trace.c,v 8.38 2002/12/05 17:28:35 ca Exp $")
@


1.6
log
@update to sendmail 8.12.7
@
text
@d18 1
a18 1
SM_RCSID("@@(#)$Sendmail: trace.c,v 8.37.4.1 2002/12/05 17:28:05 ca Exp $")
@


1.5
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d18 1
a18 1
SM_RCSID("@@(#)$Sendmail: trace.c,v 8.37 2001/09/11 04:05:17 gshapiro Exp $")
d207 1
a207 1
	if (*s == '\0')
@


1.4
log
@merge in sendmail 8.12.0 with BSD Makefiles and mdoc man pages
@
text
@d18 1
a18 1
SM_RCSID("@@(#)$Sendmail: trace.c,v 8.35 2001/08/17 16:02:27 ca Exp $")
@


1.3
log
@Update to sendmail 8.11.6, from the release notes:

SECURITY: Fix a possible memory access violation when specifying
	out-of-bounds debug parameters.  Problem detected by
	Cade Cairns of SecurityFocus.
Avoid leaking recipient information in unrelated DSNs.  This could
	happen if a connection is aborted, several mails had been
	scheduled for delivery via that connection, and the timeout
	is reached such that several DSNs are sent next.  Problem
	noted by Dileepan Moorkanat of Hewlett-Packard.
Fix a possible segmentation violation when specifying too many
	wildcard operators in a rule.  Problem detected by
	Werner Wiethege.
Avoid a segmentation fault on non-matching Hesiod lookups.  Problem
	noted by Russell McOrmond of flora.ca
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2000 Sendmail, Inc. and its suppliers.
d14 5
a18 3
#ifndef lint
static char id[] = "@@(#)$Sendmail: trace.c,v 8.20.22.4 2001/08/15 13:05:43 ca Exp $";
#endif /* ! lint */
d20 2
a21 1
#include <sendmail.h>
d38 2
a39 2
static u_char	*tTvect;
static int	tTsize;
d44 2
a45 2
	u_char *vect;
	int size;
d52 3
a54 2
/*
**  TtFLAG -- process an external trace flag description.
d57 2
a58 1
**		s -- the trace flag.
d61 1
a61 1
**		none.
d64 1
a64 1
**		sets/clears trace flags.
d67 2
a68 2
void
tTflag(s)
d74 13
a86 2
	if (*s == '\0')
		s = DefFlags;
d88 2
a89 1
	for (;;)
a90 1
		/* find first flag to set */
d92 2
a93 7
		while (isascii(*s) && isdigit(*s) && i < tTsize)
			i = i * 10 + (*s++ - '0');

		/*
		**  skip over rest of a too large number
		**  Maybe we should complain if out-of-bounds values are used.
		*/
d95 1
d98 49
a146 1
		first = i;
d148 9
a156 2
		/* find last flag to set */
		if (*s == '-')
d158 2
a159 7
			i = 0;
			while (isascii(*++s) && isdigit(*s) && i < tTsize)
				i = i * 10 + (*s - '0');

			/* skip over rest of a too large number */
			while (isascii(*s) && isdigit(*s) && i >= tTsize)
				s++;
d161 13
a173 1
		last = i;
d175 27
a201 8
		/* find the level to set it to */
		i = 1;
		if (*s == '.')
		{
			i = 0;
			while (isascii(*++s) && isdigit(*s))
				i = i * 10 + (*s - '0');
		}
d203 6
a208 9
		/* clean up args */
		if (first >= tTsize)
			first = tTsize - 1;
		if (last >= tTsize)
			last = tTsize - 1;

		/* set the flags */
		while (first <= last)
			tTvect[first++] = i;
d210 3
a212 2
		/* more arguments? */
		if (*s++ == '\0')
d214 9
@


1.2
log
@sendmail 8.11.2 with BSD Makefiles
@
text
@d15 1
a15 1
static char id[] = "@@(#)$Sendmail: trace.c,v 8.20.22.2 2000/09/17 17:04:27 gshapiro Exp $";
d66 1
a66 1
	int first, last;
d76 1
a76 1
		while (isascii(*s) && isdigit(*s))
d78 8
d92 1
a92 1
			while (isascii(*++s) && isdigit(*s))
d94 4
@


1.2.2.1
log
@Errata #13 (millert):
A security hole exists in sendmail(8) that may allow an attacker on the
local host to gain root privileges by specifying out-of-bounds debug
parameters.
@
text
@d66 1
a66 1
	unsigned int first, last;
d76 1
a76 1
		while (isascii(*s) && isdigit(*s) && i < tTsize)
a77 8

		/*
		**  skip over rest of a too large number
		**  Maybe we should complain if out-of-bounds values are used.
		*/

		while (isascii(*s) && isdigit(*s) && i >= tTsize)
			s++;
d84 1
a84 1
			while (isascii(*++s) && isdigit(*s) && i < tTsize)
a85 4

			/* skip over rest of a too large number */
			while (isascii(*s) && isdigit(*s) && i >= tTsize)
				s++;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1998, 1999 Sendmail, Inc. and its suppliers.
d15 1
a15 1
static char id[] = "@@(#)$Sendmail: trace.c,v 8.20 1999/08/02 21:44:36 ca Exp $";
d66 1
a66 1
	unsigned int first, last;
@


1.1.1.1
log
@stock sendmail 8.10.0 with $Id -> $Sendmail
@
text
@@


1.1.1.1.4.1
log
@Pull in patch from current:
Errata(028):
The signal handlers in sendmail contain code that is unsafe in the
context of a signal handler.  This leads to potentially serious race
conditions.  At the moment this is a theoretical attack only and can
only be exploited on the local host (if at all).
Fix(millert):
Update to sendmail 8.11.4:
8.11.4 revamps signal handling within the MTA in order to reduce
the likelihood of a race condition that can lead to heap
corruption as described in Michal Zalewski's advisory.  The
problems discussed in the advisory are not currently known to
be exploitable but we recommend upgrading to 8.11.4 in case a
method is found to exploit the signal handling race condition.
8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2000 Sendmail, Inc. and its suppliers.
d15 1
a15 1
static char id[] = "@@(#)$Sendmail: trace.c,v 8.20.22.2 2000/09/17 17:04:27 gshapiro Exp $";
d66 1
a66 1
	int first, last;
@


1.1.1.1.4.2
log
@Errata #13 (millert):
A security hole exists in sendmail(8) that may allow an attacker on the
local host to gain root privileges by specifying out-of-bounds debug
parameters.
@
text
@d66 1
a66 1
	unsigned int first, last;
d76 1
a76 1
		while (isascii(*s) && isdigit(*s) && i < tTsize)
a77 8

		/*
		**  skip over rest of a too large number
		**  Maybe we should complain if out-of-bounds values are used.
		*/

		while (isascii(*s) && isdigit(*s) && i >= tTsize)
			s++;
d84 1
a84 1
			while (isascii(*++s) && isdigit(*s) && i < tTsize)
a85 4

			/* skip over rest of a too large number */
			while (isascii(*s) && isdigit(*s) && i >= tTsize)
				s++;
@


1.1.1.2
log
@sendmail 8.11.2
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2000 Sendmail, Inc. and its suppliers.
d15 1
a15 1
static char id[] = "@@(#)$Id: trace.c,v 8.20.22.2 2000/09/17 17:04:27 gshapiro Exp $";
d66 1
a66 1
	int first, last;
@


1.1.1.3
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.
d14 4
a18 7
#include <sm/debug.h>
#include <sm/string.h>

SM_RCSID("@@(#)$Sendmail: trace.c,v 8.35 2001/08/17 16:02:27 ca Exp $")

static char	*tTnewflag __P((char *));
static char	*tToldflag __P((char *));
d35 2
a36 2
static unsigned char	*tTvect;
static unsigned int	tTsize;
d41 2
a42 2
	unsigned char *vect;
	unsigned int size;
d49 2
a50 3

/*
**  tToldflag -- process an old style trace flag
d53 1
a53 2
**		s -- points to a [\0, \t] terminated string,
**		     and the initial character is a digit.
d56 1
a56 1
**		pointer to terminating [\0, \t] character
d59 1
a59 1
**		modifies tTvect
d62 2
a63 2
static char *
tToldflag(s)
d66 1
a66 1
	unsigned int first, last;
d69 2
a70 13
	/* find first flag to set */
	i = 0;
	while (isascii(*s) && isdigit(*s) && i < tTsize)
		i = i * 10 + (*s++ - '0');

	/*
	**  skip over rest of a too large number
	**  Maybe we should complain if out-of-bounds values are used.
	*/

	while (isascii(*s) && isdigit(*s) && i >= tTsize)
		s++;
	first = i;
d72 1
a72 2
	/* find last flag to set */
	if (*s == '-')
d74 1
d76 3
a78 2
		while (isascii(*++s) && isdigit(*s) && i < tTsize)
			i = i * 10 + (*s - '0');
d80 8
a87 52
		/* skip over rest of a too large number */
		while (isascii(*s) && isdigit(*s) && i >= tTsize)
			s++;
	}
	last = i;

	/* find the level to set it to */
	i = 1;
	if (*s == '.')
	{
		i = 0;
		while (isascii(*++s) && isdigit(*s))
			i = i * 10 + (*s - '0');
	}

	/* clean up args */
	if (first >= tTsize)
		first = tTsize - 1;
	if (last >= tTsize)
		last = tTsize - 1;

	/* set the flags */
	while (first <= last)
		tTvect[first++] = (unsigned char) i;

	/* skip trailing junk */
	while (*s != '\0' && *s != ',' && *s != ' ' && *s != '\t')
		++s;

	return s;
}

/*
**  tTnewflag -- process a new style trace flag
**
**	Parameters:
**		s -- Points to a non-empty [\0, \t] terminated string,
**		     of which the initial character is not a digit.
**
**	Returns:
**		pointer to terminating [\0, \t] character
**
**	Side Effects:
**		adds trace flag to libsm debug database
*/

static char *
tTnewflag(s)
	register char *s;
{
	char *pat, *endpat;
	int level;
d89 3
a91 9
	pat = s;
	while (*s != '\0' && *s != ',' && *s != ' ' && *s != '\t' && *s != '.')
		++s;
	endpat = s;
	if (*s == '.')
	{
		++s;
		level = 0;
		while (isascii(*s) && isdigit(*s))
d93 3
a95 2
			level = level * 10 + (*s - '0');
			++s;
a96 41
		if (level < 0)
			level = 0;
	}
	else
	{
		level = 1;
	}

	sm_debug_addsetting_x(sm_strndup_x(pat, endpat - pat), level);

	/* skip trailing junk */
	while (*s != '\0' && *s != ',' && *s != ' ' && *s != '\t')
		++s;

	return s;
}

/*
**  TtFLAG -- process an external trace flag list.
**
**	Parameters:
**		s -- the trace flag.
**
**		The syntax of a trace flag list is as follows:
**
**		<flags> ::= <flag> | <flags> "," <flag>
**		<flag> ::= <categories> | <categories> "." <level>
**		<categories> ::= <int> | <int> "-" <int> | <pattern>
**		<pattern> ::= <an sh glob pattern matching a C identifier>
**
**		White space is ignored before and after a flag.
**		However, note that we skip over anything we don't
**		understand, rather than report an error.
**
**	Returns:
**		none.
**
**	Side Effects:
**		sets/clears old-style trace flags.
**		registers new-style trace flags with the libsm debug package.
*/
d98 9
a106 6
void
tTflag(s)
	register char *s;
{
	if (*s == '\0')
		s = DefFlags;
d108 2
a109 3
	for (;;)
	{
		if (*s == '\0')
a110 9
		if (*s == ',' || *s == ' ' || *s == '\t')
		{
			++s;
			continue;
		}
		if (isascii(*s) && isdigit(*s))
			s = tToldflag(s);
		else
			s = tTnewflag(s);
@


