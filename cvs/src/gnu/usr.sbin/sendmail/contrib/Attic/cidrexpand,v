head	1.6;
access;
symbols
	OPENBSD_5_6:1.5.0.34
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.32
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.28
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.26
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.24
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.22
	OPENBSD_5_0:1.5.0.20
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.1.1.0.8
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.6
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	SENDMAIL_8_12_0:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	SENDMAIL_8_11_2:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2014.09.17.18.49.50;	author matthieu;	state dead;
branches;
next	1.5;
commitid	M7i5giHIoz3DMlTU;

1.5
date	2007.02.04.13.17.35;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.13.13.01.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.24.03.59.24;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.01.19.59.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.15.20.52.40;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.01.15.20.52.40;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Bye.
@
text
@#!/usr/bin/perl -w

# $Sendmail: cidrexpand,v 8.8 2006/08/07 17:18:37 ca Exp $
#
# v 0.4
#
# 17 July 2000 Derek J. Balling (dredd@@megacity.org)
# 
# Acts as a preparser on /etc/mail/access_db to allow you to use address/bit
# notation. 
#
# If you have two overlapping CIDR blocks with conflicting actions
# e.g.   10.2.3.128/25 REJECT and 10.2.3.143 ACCEPT
# make sure that the exceptions to the more general block are specified
# later in the access_db.
#
# the -r flag to makemap will make it "do the right thing"
#
# Modifications
# -------------
# 26 Jul 2001 Derek Balling (dredd@@megacity.org)
#     Now uses Net::CIDR because it makes life a lot easier.
#
#  5 Nov 2002 Richard Rognlie (richard@@sendmail.com)
#     Added code to deal with the prefix tags that may now be included in
#     the access_db
#
#     Added clarification in the notes for what to do if you have 
#     exceptions to a larger CIDR block.
#
#  26 Jul 2006 Richard Rognlie (richard@@sendmail.com>
#     Added code to strip "comments" (anything after a non-escaped #)
#     # characters after a \ or within quotes (single and double) are
#     left intact. 
#
#     e.g.
#	From:1.2.3.4	550 Die spammer # spammed us 2006.07.26
#     becomes
#	From:1.2.3.4	550 Die spammer 
#
#  3 August 2006
#
#     Corrected a bug to have it handle the special case of "0.0.0.0/0"
#     since Net::CIDR doesn't handle it properly.
#
# usage: 
#  cidrexpand < /etc/mail/access | makemap -r hash /etc/mail/access
#
#
# Report bugs to: <dredd@@megacity.org>
#


use strict;
use Net::CIDR;
use Getopt::Std;

our ($opt_c,$opt_t);
getopts('ct:');

my $spaceregex = '\s+';
if ($opt_t)
{
    $spaceregex = $opt_t;
}

while (<>)
{
    chomp;
    my ($prefix,$left,$right,$space);

    if ( (/\#/) && $opt_c )
    {
	# print "checking...\n";
	my $i;
	my $qtype='';
	for ($i=0 ; $i<length($_) ; $i++) 
	{
	    my $ch = substr($_,$i,1);
	    if ($ch eq '\\') 
	    {
		$i++;
		next;
	    }
	    elsif ($qtype eq '' && $ch eq '#') 
	    {
		substr($_,$i) = '';
		last;
	    }
	    elsif ($qtype ne '' && $ch eq $qtype) 
	    {
		$qtype = '';
	    }
	    elsif ($qtype eq '' && $ch =~ /[\'\"]/) 
	    {
		$qtype = $ch;
	    }
	}
    } 
    
    if (! /^(|\S\S*:)(\d+\.){3}\d+\/\d\d?$spaceregex.*/ )
    {
	print "$_\n";
    }
    else
    {
	($prefix,$left,$space,$right) = 
	    /^(|\S\S*:)((?:\d+\.){3}\d+\/\d\d?)($spaceregex)(.*)$/;
	
	my @@new_lefts = expand_network($left);
	foreach my $nl (@@new_lefts)
	{
	    print "$prefix$nl$space$right\n";
	}
    }
}
    
sub expand_network
{
    my $left_input = shift;
    my @@rc = ($left_input);
    my ($network,$mask) = split /\//, $left_input;
    if (defined $mask)
    {
	return (0..255)	if $mask == 0;

	my @@parts = split /\./, $network;
	while ($#parts < 3)
	{
	    push @@parts, "0";
	}
	my $clean_input = join '.', @@parts;
	$clean_input .= "/$mask";
	my @@octets = Net::CIDR::cidr2octets($clean_input);
	@@rc = @@octets;
    }
    return @@rc;
}
@


1.5
log
@Update to sendmail-8.14.0.  OK mbalmer@@
@
text
@@


1.4
log
@Update to sendmail-8.13.8
@
text
@d3 1
a3 1
# $Sendmail: cidrexpand,v 8.4.2.1 2006/08/07 17:22:10 ca Exp $
d8 1
a8 1
#
d10 1
a10 1
# notation.
d28 1
a28 1
#     Added clarification in the notes for what to do if you have
d31 10
d46 1
a46 1
# usage:
d56 4
d62 1
a62 2

while (my $arg = shift @@ARGV)
d64 1
a64 4
    if ($arg eq '-t')
    {
	$spaceregex = shift;
    }
a66 4
use strict;

my $SENDMAIL = 1;

d69 1
d72 29
d103 1
a103 1
	print;
d107 2
a108 1
	($prefix,$left,$space,$right) = /^(|\S\S*:)((?:\d+\.){3}\d+\/\d\d?)($spaceregex)(.*)$/;
d117 1
a117 1

@


1.3
log
@Update to sendmail.8.13.0
@
text
@d3 1
a3 1
# $Sendmail: cidrexpand,v 8.4 2002/11/22 21:13:14 ca Exp $
d8 1
a8 1
# 
d10 1
a10 1
# notation. 
d28 1
a28 1
#     Added clarification in the notes for what to do if you have 
d31 6
a36 1
# usage: 
d80 1
a80 1
    
d88 2
@


1.2
log
@update to sendmail 8.12.7
@
text
@d1 1
a1 1
#!/usr/local/bin/perl -w
d3 3
a5 1
# v 0.2-very-beta
d8 1
a8 6
#
# The $SENDMAIL flag tells the code to lump networks in sendmail format
# if applicable. If this flag is disabled, cidrexpand will literally create
# a single line for each entry, which may or may not be what you want. :)
# makes for a rather large hash table...
#
d10 1
a10 2
# notation. Caveat: the address portion MUST be the start address or your
# results will NOT be what what you want.
d21 4
a24 1
#  5 Nov  2002 Richard Rognlie (richard@@sendmail.com)
d31 1
a31 1
# usage:
d34 2
a35 1
# Report bugs to: dredd@@megacity.org
d38 4
d46 2
a47 2
     if ($arg eq '-t')
     {
d49 1
a49 1
     }
d58 1
a58 1
     my ($prefix,$left,$right,$space);
d60 2
a61 2
     if (! /^(|\S\S*:)(\d+\.){3}\d+\/\d\d?$spaceregex.*/ )
     {
d63 3
a65 3
     }
     else
     {
d67 1
a67 1

d73 1
a73 2

     }
d78 7
a84 9
     my ($network,$mask) = split /\//, shift;
     my @@diffs = calc_changes($network,$mask);
     my ($first,$second,$third,$fourth) = split /\./, $network;

     my @@rc = ();

     for my $f ($first..($first+$diffs[0]))
     {
	if ( ( $SENDMAIL ) and ($diffs[1] == 255))
d86 1
a86 1
	    push @@rc, "$f";
d88 6
a93 72
	else
	{
	    for my $s ($second..($second+$diffs[1]))
	    {
		if ( ($SENDMAIL) and ($diffs[2] == 255) )
		{
		    push @@rc,"$f\.$s";
		}
		else
		{
		    for my $t ($third..($third+$diffs[2]))
		    {
			if ( ($SENDMAIL) and ($diffs[3] == 255))
			{
			    push @@rc, "$f\.$s\.$t";
			}
			else
			{
			    for my $fr ($fourth..($fourth+$diffs[3]))
			    {
				push @@rc, "$f\.$s\.$t\.$fr";
			    }
			}
		    }
		}
	    }
	}
     }
     return @@rc;
}

sub calc_changes
{
     my ($network,$mask) = @@_;
    
     my @@octs = split /\./, $network;
    
     my ($first,$second,$third,$fourth) = (0,0,0,0);
    
     my $power = 32 - $mask;
    
     if ($mask > 24)
     {
	$fourth = 2**$power - 1;
     }
     elsif ($mask > 16)
     {
	$fourth = 255;
	$third = 2**($power-8) - 1;
     }
     elsif ($mask > 8)
     {
	$fourth = 255;
	$third  = 255;
	$second = 2**($power-16) - 1;
     }
     elsif ($mask > 0)
     {
	$fourth = 255;
	$third = 255;
	$second = 255;
	$first = 2**($power-24) - 1;
     }
     elsif ($mask == 0)
     {
	$fourth = 255;
	$third = 255;
	$second = 255;
	$first = 255;
     }

     return ($first,$second,$third,$fourth);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
# v 0.2-very-very-beta
d16 15
d33 1
a33 2
#  cidrexpand < /etc/mail/access | makemap hash /etc/mail/access
#
d54 1
a54 1
     my ($left,$right,$space);
d56 1
a56 1
     if (! /^(\d+\.){3}\d+\/\d\d?$spaceregex.*/ )
d62 1
a62 1
	($left,$space,$right) = /^((?:\d+\.){3}\d+\/\d\d?)($spaceregex)(.*)$/;
d67 1
a67 1
	    print "$nl$space$right\n";
d150 8
@


1.1.1.1
log
@sendmail 8.11.2
@
text
@@
