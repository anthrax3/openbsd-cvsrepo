head	1.12;
access;
symbols
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.36
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.34
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.32
	OPENBSD_5_0:1.9.0.30
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.28
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.26
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.22
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	SENDMAIL_8_12_0:1.1.1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	SENDMAIL_8_11_2:1.1.1.2
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	SENDMAIL_8_10_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.09.17.18.49.51;	author matthieu;	state dead;
branches;
next	1.11;
commitid	M7i5giHIoz3DMlTU;

1.11
date	2014.02.07.21.25.00;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.12.21.27.22;	author jca;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.24.03.59.26;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.03.17.25.46;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.14.03.21.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.11.19.02.49;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.29.01.31.13;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.28.02.43.52;	author millert;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.01.15.21.09.05;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.02.19.05.42;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.02.19.05.42;	author millert;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	2001.01.15.20.52.08;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.09.11.18.55.49;	author millert;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	2001.05.31.00.30.15;	author miod;	state Exp;
branches;
next	;

1.3.2.1
date	2001.05.31.01.47.54;	author jason;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Bye.
@
text
@/*
 * Copyright (c) 1998-2002, 2013 Proofpoint, Inc. and its suppliers.
 *	All rights reserved.
 * Copyright (c) 1983 Eric P. Allman.  All rights reserved.
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 *
 */

#include <sm/gen.h>

SM_IDSTR(copyright,
"@@(#) Copyright (c) 1998-2002 Proofpoint, Inc. and its suppliers.\n\
	All rights reserved.\n\
     Copyright (c) 1988, 1993\n\
	The Regents of the University of California.  All rights reserved.\n")

SM_IDSTR(id, "@@(#)$Sendmail: mailstats.c,v 8.103 2013/11/22 20:51:51 ca Exp $")

#include <unistd.h>
#include <stddef.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <time.h>
#ifdef EX_OK
# undef EX_OK		/* unistd.h may have another use for this */
#endif /* EX_OK */
#include <sysexits.h>

#include <sm/errstring.h>
#include <sm/limits.h>
#include <sendmail/sendmail.h>
#include <sendmail/mailstats.h>
#include <sendmail/pathnames.h>


#define MNAMELEN	20	/* max length of mailer name */

int
main(argc, argv)
	int argc;
	char **argv;
{
	register int i;
	int mno;
	int save_errno;
	int ch, fd;
	char *sfile;
	char *cfile;
	SM_FILE_T *cfp;
	bool mnames;
	bool progmode;
	bool trunc;
	long frmsgs = 0, frbytes = 0, tomsgs = 0, tobytes = 0, rejmsgs = 0;
	long dismsgs = 0;
	long quarmsgs = 0;
	time_t now;
	char mtable[MAXMAILERS][MNAMELEN + 1];
	char sfilebuf[MAXPATHLEN];
	char buf[MAXLINE];
	struct statistics stats;
	extern char *ctime();
	extern char *optarg;
	extern int optind;
# define MSOPTS "cC:f:opP"

	cfile = getcfname(0, 0, SM_GET_SENDMAIL_CF, NULL);
	sfile = NULL;
	mnames = true;
	progmode = false;
	trunc = false;
	while ((ch = getopt(argc, argv, MSOPTS)) != -1)
	{
		switch (ch)
		{
		  case 'c':
			cfile = getcfname(0, 0, SM_GET_SUBMIT_CF, NULL);
			break;

		  case 'C':
			cfile = optarg;
			break;

		  case 'f':
			sfile = optarg;
			break;


		  case 'o':
			mnames = false;
			break;

		  case 'p':
			trunc = true;
			/* FALLTHROUGH */

		  case 'P':
			progmode = true;
			break;


		  case '?':
		  default:
  usage:
			(void) sm_io_fputs(smioerr, SM_TIME_DEFAULT,
			    "usage: mailstats [-C cffile] [-c] [-P] [-f stfile] [-o] [-p]\n");
			exit(EX_USAGE);
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 0)
		goto usage;

	if ((cfp = sm_io_open(SmFtStdio, SM_TIME_DEFAULT, cfile, SM_IO_RDONLY,
			      NULL)) == NULL)
	{
		save_errno = errno;
		(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT, "mailstats: ");
		errno = save_errno;
		sm_perror(cfile);
		exit(EX_NOINPUT);
	}

	mno = 0;
	(void) sm_strlcpy(mtable[mno++], "prog", MNAMELEN + 1);
	(void) sm_strlcpy(mtable[mno++], "*file*", MNAMELEN + 1);
	(void) sm_strlcpy(mtable[mno++], "*include*", MNAMELEN + 1);

	while (sm_io_fgets(cfp, SM_TIME_DEFAULT, buf, sizeof(buf)) >= 0)
	{
		register char *b;
		char *s;
		register char *m;

		b = strchr(buf, '#');
		if (b == NULL)
			b = strchr(buf, '\n');
		if (b == NULL)
			b = &buf[strlen(buf)];
		while (isascii(*--b) && isspace(*b))
			continue;
		*++b = '\0';

		b = buf;
		switch (*b++)
		{
		  case 'M':		/* mailer definition */
			break;

		  case 'O':		/* option -- see if .st file */
			if (sm_strncasecmp(b, " StatusFile", 11) == 0 &&
			    !(isascii(b[11]) && isalnum(b[11])))
			{
				/* new form -- find value */
				b = strchr(b, '=');
				if (b == NULL)
					continue;
				while (isascii(*++b) && isspace(*b))
					continue;
			}
			else if (*b++ != 'S')
			{
				/* something else boring */
				continue;
			}

			/* this is the S or StatusFile option -- save it */
			if (sm_strlcpy(sfilebuf, b, sizeof sfilebuf) >=
			    sizeof sfilebuf)
			{
				(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
						     "StatusFile filename too long: %.30s...\n",
						     b);
				exit(EX_CONFIG);
			}
			if (sfile == NULL)
				sfile = sfilebuf;

		  default:
			continue;
		}

		if (mno >= MAXMAILERS)
		{
			(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
					     "Too many mailers defined, %d max.\n",
					     MAXMAILERS);
			exit(EX_SOFTWARE);
		}
		m = mtable[mno];
		s = m + MNAMELEN;		/* is [MNAMELEN + 1] */
		while (*b != ',' && !(isascii(*b) && isspace(*b)) &&
		       *b != '\0' && m < s)
			*m++ = *b++;
		*m = '\0';
		for (i = 0; i < mno; i++)
		{
			if (strcmp(mtable[i], mtable[mno]) == 0)
				break;
		}
		if (i == mno)
			mno++;
	}
	(void) sm_io_close(cfp, SM_TIME_DEFAULT);
	for (; mno < MAXMAILERS; mno++)
		mtable[mno][0] = '\0';

	if (sfile == NULL)
	{
		(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
				     "mailstats: no statistics file located\n");
		exit(EX_OSFILE);
	}

	fd = open(sfile, O_RDONLY, 0600);
	if ((fd < 0) || (i = read(fd, &stats, sizeof stats)) < 0)
	{
		save_errno = errno;
		(void) sm_io_fputs(smioerr, SM_TIME_DEFAULT, "mailstats: ");
		errno = save_errno;
		sm_perror(sfile);
		exit(EX_NOINPUT);
	}
	if (i == 0)
	{
		(void) sleep(1);
		if ((i = read(fd, &stats, sizeof stats)) < 0)
		{
			save_errno = errno;
			(void) sm_io_fputs(smioerr, SM_TIME_DEFAULT,
					   "mailstats: ");
			errno = save_errno;
			sm_perror(sfile);
			exit(EX_NOINPUT);
		}
		else if (i == 0)
		{
			memset((ARBPTR_T) &stats, '\0', sizeof stats);
			(void) time(&stats.stat_itime);
		}
	}
	if (i != 0)
	{
		if (stats.stat_magic != STAT_MAGIC)
		{
			(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
					     "mailstats: incorrect magic number in %s\n",
					     sfile);
			exit(EX_OSERR);
		}
		else if (stats.stat_version != STAT_VERSION)
		{
			(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
					     "mailstats version (%d) incompatible with %s version (%d)\n",
					     STAT_VERSION, sfile,
					     stats.stat_version);

			exit(EX_OSERR);
		}
		else if (i != sizeof stats || stats.stat_size != sizeof(stats))
		{
			(void) sm_io_fputs(smioerr, SM_TIME_DEFAULT,
					   "mailstats: file size changed.\n");
			exit(EX_OSERR);
		}
	}


	if (progmode)
	{
		(void) time(&now);
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "%ld %ld\n",
				     (long) stats.stat_itime, (long) now);
	}
	else
	{
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     "Statistics from %s",
				     ctime(&stats.stat_itime));
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis");
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, " msgsqur");
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "%s\n",
				     mnames ? "  Mailer" : "");
	}
	for (i = 0; i < MAXMAILERS; i++)
	{
		if (stats.stat_nf[i] || stats.stat_nt[i] ||
		    stats.stat_nq[i] ||
		    stats.stat_nr[i] || stats.stat_nd[i])
		{
			char *format;

			if (progmode)
				format = "%2d %8ld %10ld %8ld %10ld   %6ld  %6ld";
			else
				format = "%2d %8ld %10ldK %8ld %10ldK   %6ld  %6ld";
			(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
					     format, i,
					     stats.stat_nf[i],
					     stats.stat_bf[i],
					     stats.stat_nt[i],
					     stats.stat_bt[i],
					     stats.stat_nr[i],
					     stats.stat_nd[i]);
			(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
					     "  %6ld", stats.stat_nq[i]);
			if (mnames)
				(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
						     "  %s",
						      mtable[i]);
			(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "\n");
			frmsgs += stats.stat_nf[i];
			frbytes += stats.stat_bf[i];
			tomsgs += stats.stat_nt[i];
			tobytes += stats.stat_bt[i];
			rejmsgs += stats.stat_nr[i];
			dismsgs += stats.stat_nd[i];
			quarmsgs += stats.stat_nq[i];
		}
	}
	if (progmode)
	{
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " T %8ld %10ld %8ld %10ld   %6ld  %6ld",
				     frmsgs, frbytes, tomsgs, tobytes, rejmsgs,
				     dismsgs);
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     "  %6ld", quarmsgs);
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "\n");
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " C %8ld %8ld %6ld\n",
				     stats.stat_cf, stats.stat_ct,
				     stats.stat_cr);
		(void) close(fd);
		if (trunc)
		{
			fd = open(sfile, O_RDWR | O_TRUNC, 0600);
			if (fd >= 0)
				(void) close(fd);
		}
	}
	else
	{
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     "=============================================================");
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "========");
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "\n");
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " T %8ld %10ldK %8ld %10ldK   %6ld  %6ld",
				     frmsgs, frbytes, tomsgs, tobytes, rejmsgs,
				     dismsgs);
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     "  %6ld", quarmsgs);
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "\n");
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " C %8ld %10s  %8ld %10s    %6ld\n",
				     stats.stat_cf, "", stats.stat_ct, "",
				     stats.stat_cr);
	}
	exit(EX_OK);
	/* NOTREACHED */
	return EX_OK;
}
@


1.11
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.10
log
@Update to sendmail-8.14.7

Verbatim sources, with s/$Id/$Sendmail/ patches, local build system and
config tweaks kept.
tested and ok millert@@ ajacoutot@@
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2002, 2013 Sendmail, Inc. and its suppliers.
d18 1
a18 1
"@@(#) Copyright (c) 1998-2002 Sendmail, Inc. and its suppliers.\n\
d23 1
a23 1
SM_IDSTR(id, "@@(#)$Sendmail: mailstats.c,v 8.102 2013/03/12 15:24:50 ca Exp $")
@


1.9
log
@Update to sendmail.8.13.0
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2002 Sendmail, Inc. and its suppliers.
d23 1
a23 1
SM_IDSTR(id, "@@(#)$Sendmail: mailstats.c,v 8.100 2002/06/27 23:24:06 gshapiro Exp $")
d71 1
d78 1
a78 1
	while ((ch = getopt(argc, argv, "cC:f:opP")) != -1)
d94 1
d107 1
d137 1
a137 1
	while (sm_io_fgets(cfp, SM_TIME_DEFAULT, buf, sizeof(buf)) != NULL)
d275 1
@


1.8
log
@Update to sendmail-8.12.4
@
text
@d18 1
a18 1
"@@(#) Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.\n\
d23 1
a23 1
SM_IDSTR(id, "@@(#)$Sendmail: mailstats.c,v 8.98 2002/05/24 23:10:15 gshapiro Exp $")
a61 1
#if _FFR_QUARANTINE
a62 1
#endif /* _FFR_QUARANTINE */
a285 1
#if _FFR_QUARANTINE
a286 1
#endif /* _FFR_QUARANTINE */
a292 1
#if _FFR_QUARANTINE
a293 1
#endif /* _FFR_QUARANTINE */
a309 1
#if _FFR_QUARANTINE
a311 1
#endif /* _FFR_QUARANTINE */
a322 1
#if _FFR_QUARANTINE
a323 1
#endif /* _FFR_QUARANTINE */
a331 1
#if _FFR_QUARANTINE
a333 1
#endif /* _FFR_QUARANTINE */
a350 1
#if _FFR_QUARANTINE
a351 1
#endif /* _FFR_QUARANTINE */
a356 1
#if _FFR_QUARANTINE
a358 1
#endif /* _FFR_QUARANTINE */
@


1.7
log
@update to sendmail-8.12.2
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.
d23 1
a23 1
SM_IDSTR(id, "@@(#)$Sendmail: mailstats.c,v 8.95 2001/12/30 04:59:40 gshapiro Exp $")
d67 1
a67 1
	char sfilebuf[MAXLINE];
d111 1
a111 1
			    "usage: mailstats [-C cffile] [-P] [-f stfile] [-o] [-p]\n");
d142 9
a182 8
			b = strchr(sfilebuf, '#');
			if (b == NULL)
				b = strchr(sfilebuf, '\n');
			if (b == NULL)
				b = &sfilebuf[strlen(sfilebuf)];
			while (isascii(*--b) && isspace(*b))
				continue;
			*++b = '\0';
d219 1
a219 1
		exit (EX_OSFILE);
d222 1
a222 1
	fd = open(sfile, O_RDONLY);
d354 1
a354 1
			fd = open(sfile, O_RDWR | O_TRUNC);
@


1.6
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d23 1
a23 1
SM_IDSTR(id, "@@(#)$Sendmail: mailstats.c,v 8.91 2001/09/11 04:05:02 gshapiro Exp $")
d37 1
d62 3
d286 5
a290 1
				     " M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis%s\n",
d296 3
d315 4
d330 3
d338 1
a338 1
				     " T %8ld %10ld %8ld %10ld   %6ld  %6ld\n",
d341 5
d361 5
a365 1
				     "=============================================================\n");
d367 1
a367 1
				     " T %8ld %10ldK %8ld %10ldK   %6ld  %6ld\n",
d370 5
@


1.5
log
@merge in sendmail 8.12.0 with BSD Makefiles and mdoc man pages
@
text
@d23 1
a23 1
SM_IDSTR(id, "@@(#)$Sendmail: mailstats.c,v 8.89 2001/09/04 22:44:22 ca Exp $")
@


1.4
log
@Update to sendmail 8.11.4:
    8.11.4 revamps signal handling within the MTA in order to reduce
    the likelihood of a race condition that can lead to heap
    corruption as described in Michal Zalewski's advisory.  The
    problems discussed in the advisory are not currently known to
    be exploitable but we recommend upgrading to 8.11.4 in case a
    method is found to exploit the signal handling race condition.
    8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d15 3
a17 2
#ifndef lint
static char copyright[] =
d21 1
a21 2
	The Regents of the University of California.  All rights reserved.\n";
#endif /* ! lint */
d23 1
a23 3
#ifndef lint
static char id[] = "@@(#)$Sendmail: mailstats.c,v 8.53.16.13 2001/05/07 22:06:38 gshapiro Exp $";
#endif /* ! lint */
d36 1
a43 1

d55 1
a55 1
	FILE *cfp;
d58 1
d70 1
a70 2

	cfile = _PATH_SENDMAILCF;
d72 4
a75 3
	mnames = TRUE;
	progmode = FALSE;
	while ((ch = getopt(argc, argv, "C:f:op")) != -1)
d79 4
d92 1
a92 1
			mnames = FALSE;
d96 5
a100 1
			progmode = TRUE;
d106 2
a107 2
			(void) fputs("usage: mailstats [-C cffile] [-f stfile] [-o] [-p]\n",
				     stderr);
d117 2
a118 1
	if ((cfp = fopen(cfile, "r")) == NULL)
d121 1
a121 1
		fprintf(stderr, "mailstats: ");
d123 1
a123 1
		perror(cfile);
d128 3
a130 3
	(void) strlcpy(mtable[mno++], "prog", MNAMELEN + 1);
	(void) strlcpy(mtable[mno++], "*file*", MNAMELEN + 1);
	(void) strlcpy(mtable[mno++], "*include*", MNAMELEN + 1);
d132 1
a132 1
	while (fgets(buf, sizeof(buf), cfp) != NULL)
d145 1
a145 1
			if (strncasecmp(b, " StatusFile", 11) == 0 &&
d162 1
a162 1
			if (strlcpy(sfilebuf, b, sizeof sfilebuf) >=
d165 3
a167 3
				fprintf(stderr,
					"StatusFile filename too long: %.30s...\n",
					b);
d187 3
a189 3
			fprintf(stderr,
				"Too many mailers defined, %d max.\n",
				MAXMAILERS);
d206 1
a206 1
	(void) fclose(cfp);
d208 1
a208 1
		mtable[mno][0]='\0';
d212 2
a213 1
		fprintf(stderr, "mailstats: no statistics file located\n");
d221 1
a221 1
		(void) fputs("mailstats: ", stderr);
d223 1
a223 1
		perror(sfile);
d232 2
a233 1
			(void) fputs("mailstats: ", stderr);
d235 1
a235 1
			perror(sfile);
d248 3
a250 3
			fprintf(stderr,
				"mailstats: incorrect magic number in %s\n",
				sfile);
d255 5
a259 3
			fprintf(stderr,
				"mailstats version (%d) incompatible with %s version (%d)\n",
				STAT_VERSION, sfile, stats.stat_version);
d264 2
a265 1
			(void) fputs("mailstats: file size changed.\n", stderr);
d273 2
a274 1
		printf("%ld %ld\n", (long) stats.stat_itime, (long) now);
d278 6
a283 3
		printf("Statistics from %s", ctime(&stats.stat_itime));
		printf(" M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis%s\n",
			mnames ? "  Mailer" : "");
d296 8
a303 4
			printf(format, i,
			    stats.stat_nf[i], stats.stat_bf[i],
			    stats.stat_nt[i], stats.stat_bt[i],
			    stats.stat_nr[i], stats.stat_nd[i]);
d305 4
a308 2
				printf("  %s", mtable[i]);
			printf("\n");
d319 8
a326 4
		printf(" T %8ld %10ld %8ld %10ld   %6ld  %6ld\n",
		       frmsgs, frbytes, tomsgs, tobytes, rejmsgs, dismsgs);
		printf(" C %8ld %8ld %6ld\n",
		       stats.stat_cf, stats.stat_ct, stats.stat_cr);
d328 6
a333 3
		fd = open(sfile, O_RDWR | O_TRUNC);
		if (fd >= 0)
			(void) close(fd);
d337 10
a346 5
		printf("=============================================================\n");
		printf(" T %8ld %10ldK %8ld %10ldK   %6ld  %6ld\n",
			frmsgs, frbytes, tomsgs, tobytes, rejmsgs, dismsgs);
		printf(" C %8ld %10s  %8ld %10s    %6ld\n",
		       stats.stat_cf, "", stats.stat_ct, "", stats.stat_cr);
@


1.3
log
@Update to sendmail 8.11.3.  This is a maintenance release which
contains bug fixes for problems found after 8.11.2 was released.
Systems which use buffered file I/O (like OpenBSD) were not properly
fsync()'ing the data (df) file.  Although there is little chance
of data loss, this is an important fix.
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2000 Sendmail, Inc. and its suppliers.
d17 1
a17 1
"@@(#) Copyright (c) 1998-2000 Sendmail, Inc. and its suppliers.\n\
d24 1
a24 1
static char id[] = "@@(#)$Sendmail: mailstats.c,v 8.53.16.12 2001/02/15 20:52:36 geir Exp $";
@


1.3.2.1
log
@Pull in patch from current:
Fix (millert), Errata 001:
Update to sendmail 8.11.4:
    8.11.4 revamps signal handling within the MTA in order to reduce
    the likelihood of a race condition that can lead to heap
    corruption as described in Michal Zalewski's advisory.  The
    problems discussed in the advisory are not currently known to
    be exploitable but we recommend upgrading to 8.11.4 in case a
    method is found to exploit the signal handling race condition.
    8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.
d17 1
a17 1
"@@(#) Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.\n\
d24 1
a24 1
static char id[] = "@@(#)$Sendmail: mailstats.c,v 8.53.16.13 2001/05/07 22:06:38 gshapiro Exp $";
@


1.2
log
@sendmail 8.11.2 with BSD Makefiles
@
text
@d24 1
a24 1
static char id[] = "@@(#)$Sendmail: mailstats.c,v 8.53.16.11 2000/09/17 17:04:26 gshapiro Exp $";
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1998, 1999 Sendmail, Inc. and its suppliers.
d17 1
a17 1
"@@(#) Copyright (c) 1998, 1999 Sendmail, Inc. and its suppliers.\n\
d24 1
a24 1
static char id[] = "@@(#)$Sendmail: mailstats.c,v 8.53 1999/10/13 05:43:54 gshapiro Exp $";
d42 1
d45 1
d71 1
d76 1
a76 1
	while ((ch = getopt(argc, argv, "C:f:op")) != EOF)
d99 1
a99 1
			(void) fputs("usage: mailstats [-C cffile] [-f stfile] -o -p\n",
d208 2
a209 2
	if ((fd = open(sfile, O_RDONLY)) < 0 ||
	    (i = read(fd, &stats, sizeof stats)) < 0)
@


1.1.1.1
log
@stock sendmail 8.10.0 with $Id -> $Sendmail
@
text
@@


1.1.1.1.4.1
log
@Pull in patch from current:
Errata(028):
The signal handlers in sendmail contain code that is unsafe in the
context of a signal handler.  This leads to potentially serious race
conditions.  At the moment this is a theoretical attack only and can
only be exploited on the local host (if at all).
Fix(millert):
Update to sendmail 8.11.4:
8.11.4 revamps signal handling within the MTA in order to reduce
the likelihood of a race condition that can lead to heap
corruption as described in Michal Zalewski's advisory.  The
problems discussed in the advisory are not currently known to
be exploitable but we recommend upgrading to 8.11.4 in case a
method is found to exploit the signal handling race condition.
8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.
d17 1
a17 1
"@@(#) Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.\n\
d24 1
a24 1
static char id[] = "@@(#)$Sendmail: mailstats.c,v 8.53.16.13 2001/05/07 22:06:38 gshapiro Exp $";
a41 1

a43 1

a68 1

d73 1
a73 1
	while ((ch = getopt(argc, argv, "C:f:op")) != -1)
d96 1
a96 1
			(void) fputs("usage: mailstats [-C cffile] [-f stfile] [-o] [-p]\n",
d205 2
a206 2
	fd = open(sfile, O_RDONLY);
	if ((fd < 0) || (i = read(fd, &stats, sizeof stats)) < 0)
@


1.1.1.2
log
@sendmail 8.11.2
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2000 Sendmail, Inc. and its suppliers.
d17 1
a17 1
"@@(#) Copyright (c) 1998-2000 Sendmail, Inc. and its suppliers.\n\
d24 1
a24 1
static char id[] = "@@(#)$Id: mailstats.c,v 8.53.16.11 2000/09/17 17:04:26 gshapiro Exp $";
a41 1

a43 1

a68 1

d73 1
a73 1
	while ((ch = getopt(argc, argv, "C:f:op")) != -1)
d96 1
a96 1
			(void) fputs("usage: mailstats [-C cffile] [-f stfile] [-o] [-p]\n",
d205 2
a206 2
	fd = open(sfile, O_RDONLY);
	if ((fd < 0) || (i = read(fd, &stats, sizeof stats)) < 0)
@


1.1.1.3
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@d2 1
a2 1
 * Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.
d15 3
a17 4
#include <sm/gen.h>

SM_IDSTR(copyright,
"@@(#) Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.\n\
d20 2
a21 1
	The Regents of the University of California.  All rights reserved.\n")
d23 3
a25 1
SM_IDSTR(id, "@@(#)$Sendmail: mailstats.c,v 8.89 2001/09/04 22:44:22 ca Exp $")
a37 1
#include <sm/errstring.h>
d45 1
d57 1
a57 1
	SM_FILE_T *cfp;
a59 1
	bool trunc;
d71 2
a72 1
	cfile = getcfname(0, 0, SM_GET_SENDMAIL_CF, NULL);
d74 3
a76 4
	mnames = true;
	progmode = false;
	trunc = false;
	while ((ch = getopt(argc, argv, "cC:f:opP")) != -1)
a79 4
		  case 'c':
			cfile = getcfname(0, 0, SM_GET_SUBMIT_CF, NULL);
			break;

d89 1
a89 1
			mnames = false;
d93 1
a93 5
			trunc = true;
			/* FALLTHROUGH */

		  case 'P':
			progmode = true;
d99 2
a100 2
			(void) sm_io_fputs(smioerr, SM_TIME_DEFAULT,
			    "usage: mailstats [-C cffile] [-P] [-f stfile] [-o] [-p]\n");
d110 1
a110 2
	if ((cfp = sm_io_open(SmFtStdio, SM_TIME_DEFAULT, cfile, SM_IO_RDONLY,
			      NULL)) == NULL)
d113 1
a113 1
		(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT, "mailstats: ");
d115 1
a115 1
		sm_perror(cfile);
d120 3
a122 3
	(void) sm_strlcpy(mtable[mno++], "prog", MNAMELEN + 1);
	(void) sm_strlcpy(mtable[mno++], "*file*", MNAMELEN + 1);
	(void) sm_strlcpy(mtable[mno++], "*include*", MNAMELEN + 1);
d124 1
a124 1
	while (sm_io_fgets(cfp, SM_TIME_DEFAULT, buf, sizeof(buf)) != NULL)
d137 1
a137 1
			if (sm_strncasecmp(b, " StatusFile", 11) == 0 &&
d154 1
a154 1
			if (sm_strlcpy(sfilebuf, b, sizeof sfilebuf) >=
d157 3
a159 3
				(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
						     "StatusFile filename too long: %.30s...\n",
						     b);
d179 3
a181 3
			(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
					     "Too many mailers defined, %d max.\n",
					     MAXMAILERS);
d198 1
a198 1
	(void) sm_io_close(cfp, SM_TIME_DEFAULT);
d200 1
a200 1
		mtable[mno][0] = '\0';
d204 1
a204 2
		(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
				     "mailstats: no statistics file located\n");
d212 1
a212 1
		(void) sm_io_fputs(smioerr, SM_TIME_DEFAULT, "mailstats: ");
d214 1
a214 1
		sm_perror(sfile);
d223 1
a223 2
			(void) sm_io_fputs(smioerr, SM_TIME_DEFAULT,
					   "mailstats: ");
d225 1
a225 1
			sm_perror(sfile);
d238 3
a240 3
			(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
					     "mailstats: incorrect magic number in %s\n",
					     sfile);
d245 3
a247 5
			(void) sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
					     "mailstats version (%d) incompatible with %s version (%d)\n",
					     STAT_VERSION, sfile,
					     stats.stat_version);

d252 1
a252 2
			(void) sm_io_fputs(smioerr, SM_TIME_DEFAULT,
					   "mailstats: file size changed.\n");
d260 1
a260 2
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "%ld %ld\n",
				     (long) stats.stat_itime, (long) now);
d264 3
a266 6
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     "Statistics from %s",
				     ctime(&stats.stat_itime));
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis%s\n",
				     mnames ? "  Mailer" : "");
d279 4
a282 8
			(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
					     format, i,
					     stats.stat_nf[i],
					     stats.stat_bf[i],
					     stats.stat_nt[i],
					     stats.stat_bt[i],
					     stats.stat_nr[i],
					     stats.stat_nd[i]);
d284 2
a285 4
				(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
						     "  %s",
						      mtable[i]);
			(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT, "\n");
d296 4
a299 8
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " T %8ld %10ld %8ld %10ld   %6ld  %6ld\n",
				     frmsgs, frbytes, tomsgs, tobytes, rejmsgs,
				     dismsgs);
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " C %8ld %8ld %6ld\n",
				     stats.stat_cf, stats.stat_ct,
				     stats.stat_cr);
d301 3
a303 6
		if (trunc)
		{
			fd = open(sfile, O_RDWR | O_TRUNC);
			if (fd >= 0)
				(void) close(fd);
		}
d307 5
a311 10
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     "=============================================================\n");
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " T %8ld %10ldK %8ld %10ldK   %6ld  %6ld\n",
				     frmsgs, frbytes, tomsgs, tobytes, rejmsgs,
				     dismsgs);
		(void) sm_io_fprintf(smioout, SM_TIME_DEFAULT,
				     " C %8ld %10s  %8ld %10s    %6ld\n",
				     stats.stat_cf, "", stats.stat_ct, "",
				     stats.stat_cr);
@


