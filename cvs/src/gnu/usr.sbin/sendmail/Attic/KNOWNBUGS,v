head	1.14;
access;
symbols
	OPENBSD_5_6:1.13.0.16
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.14
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.12
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.10
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SENDMAIL_8_12_0:1.1.1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	SENDMAIL_8_11_2:1.1.1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SENDMAIL_8_10_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2014.09.17.18.49.49;	author matthieu;	state dead;
branches;
next	1.13;
commitid	M7i5giHIoz3DMlTU;

1.13
date	2011.05.17.15.54.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.04.18.34.04;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.04.14.43.48;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2007.02.04.13.17.34;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.16.00.21.29;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.01.19.59.19;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.18.00.49.26;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.14.03.21.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.11.19.02.47;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.01.01.01.40;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.15.21.08.50;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.02.19.48.09;	author millert;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2000.04.02.19.05.36;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.02.19.05.36;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.01.15.20.51.51;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.09.11.18.55.48;	author millert;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.31.00.12.27;	author miod;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Bye.
@
text
@

	     K N O W N   B U G S   I N   S E N D M A I L


The following are bugs or deficiencies in sendmail that we are aware of
but which have not been fixed in the current release.  You probably
want to get the most up to date version of this from ftp.sendmail.org
in /pub/sendmail/KNOWNBUGS.  For descriptions of bugs that have been
fixed, see the file RELEASE_NOTES (in the root directory of the sendmail
distribution).

This list is not guaranteed to be complete.

* Header values which are too long may be truncated.

  If a value of a structured header is longer than 256 (MAXNAME)
  characters then it may be truncated during output. For example,
  if a single address in the To: header is longer than 256 characters
  then it will be truncated which may result in a syntactically
  invalid address.

* Delivery to programs that generate too much output may cause problems

  If e-mail is delivered to a program which generates too much
  output, then sendmail may issue an error:

  timeout waiting for input from local during Draining Input

  Make sure that the program does not generate output beyond a
  status message (corresponding to the exit status).  This may
  require a wrapper around the actual program to redirect output
  to /dev/null.

  Such a problem has been reported for bulk_mailer.

* Null bytes are not handled properly in headers.

  Sendmail should handle full binary data.  As it stands, it handles
  all values in the body, but not 0x00 in the header.  Changing
  this would require a major restructuring of the code -- for
  example, almost no C library support could be used to handle
  strings.

* Header checks are not called if header value is too long or empty.

  If the value of a header is longer than 1250 (MAXNAME + MAXATOM - 6)
  characters or it contains a single word longer than 256 (MAXNAME)
  characters then no header check is done even if one is configured for
  the header.

* Header lines which are too long will be split incorrectly.

  Header lines which are longer than 2045 characters will be split
  but some characters might be lost.  Fix: obey RFC (2)822 and do not
  send lines that are longer than 1000 characters.

* milter communication fails if a single header is larger than 64K.

  If a single header is larger than 64KB (which is not possible in the
  default configuration) then it cannot be transferred in one block to
  libmilter and hence the communication fails.  This can be avoided by
  increasing the constant MILTER_CHUNK_SIZE in
  include/libmilter/mfdef.h and recompiling sendmail, libmilter, and
  all (statically linked) milters (or by using an undocumented compile
  time option:  _FFR_MAXDATASIZE; you have to read the source code in
  order to use this properly).

* Sender addresses whose domain part cause a temporary A record lookup
  failure but have a valid MX record will be temporarily rejected in
  the default configuration.  Solution: fix the DNS at the sender side.
  If that's not easy to achieve, possible workarounds are:
  - add an entry to the access map:
	dom.ain	OK
  - (only for advanced users) replace

# Resolve map (to check if a host exists in check_mail)
Kresolve host -a<OKR> -T<TEMP>

   with

# Resolve map (to check if a host exists in check_mail)
Kcanon host -a<OKR> -T<TEMP>
Kdnsmx dns -R MX -a<OKR> -T<TEMP>
Kresolve sequence dnsmx canon


* Duplicate error messages.

  Sometimes identical, duplicate error messages can be generated.  As
  near as I can tell, this is rare and relatively innocuous.

* Misleading error messages.

  If an illegal address is specified on the command line together
  with at least one valid address and PostmasterCopy is set, the
  DSN does not contain the illegal address, but only the valid
  address(es).

* \231 considered harmful.

  Header addresses that have the \231 character (and possibly others
  in the range \201 - \237) behave in odd and usually unexpected ways.

* accept() problem on SVR4.

  Apparently, the sendmail daemon loop (doing accept()s on the network)
  can get into a weird state on SVR4; it starts logging ``SYSERR:
  getrequests: accept: Protocol Error''.  The workaround is to kill
  and restart the sendmail daemon.  We don't have an SVR4 system at
  Berkeley that carries more than token mail load, so I can't validate
  this.  It is likely to be a glitch in the sockets emulation, since
  "Protocol Error" is not possible error code with Berkeley TCP/IP.

  I've also had someone report the message ``sendmail: accept:
  SIOCGPGRP failed errno 22'' on an SVR4 system.  This message is
  not in the sendmail source code, so I assume it is also a bug
  in the sockets emulation.  (Errno 22 is EINVAL "Invalid Argument"
  on all the systems I have available, including Solaris 2.x.)
  Apparently, this problem is due to linking -lc before -lsocket;
  if you are having this problem, check your Makefile.

* accept() problem on Linux.

  The accept() in sendmail daemon loop can return ETIMEDOUT.  An
  error is reported to syslog:

  Jun  9 17:14:12 hostname sendmail[207]: NOQUEUE: SYSERR(root):
			getrequests: accept: Connection timed out

  "Connection timed out" is not documented as a valid return from
  accept(2) and this was believed to be a bug in the Linux kernel.
  Later information from the Linux kernel group states that Linux
  2.0 kernels follow RFC1122 while sendmail follows the original BSD
  (now POSIX 1003.1g draft) specification.  The 2.1.X and later kernels
  will follow the POSIX draft.

* Excessive mailing list nesting can run out of file descriptors.

  If you have a mailing list that includes lots of other mailing
  lists, each of which has a separate owner, you can run out of
  file descriptors.  Each mailing list with a separate owner uses
  one open file descriptor (prior to 8.6.6 it was three open
  file descriptors per list).  This is particularly egregious if
  you have your connection cache set to be large.

* Connection caching breaks if you pass the port number as an argument.

  If you have a definition such as:

	  Mport,          P=[IPC], F=kmDFMuX, S=11/31, R=21,
			  M=2100000, T=DNS/RFC822/SMTP,
			  A=IPC [127.0.0.1] $h

  (i.e., where $h is the port number instead of the host name) the
  connection caching code will break because it won't notice that
  two messages addressed to different ports should use different
  connections.

* ESMTP SIZE underestimates the size of a message

  Sendmail makes no allowance for headers that it adds, nor does it
  account for the SMTP on-the-wire \r\n expansion.  It probably doesn't
  allow for 8->7 bit MIME conversions either.

* Client ignores SIZE parameter.

  When sendmail acts as client and the server specifies a limit
  for the mail size, sendmail will ignore this and try to send the
  mail anyway.  The server will usually reject the MAIL command
  which specifies the size of the message and hence this problem
  is not significant.

* Paths to programs being executed and the mode of program files are
  not checked.  Essentially, the RunProgramInUnsafeDirPath and
  RunWritableProgram bits in the DontBlameSendmail option are always
  set.  This is not a problem if your system is well managed (that is,
  if binaries and system directories are mode 755 instead of something
  foolish like 777).

* 8-bit data in GECOS field

  If the GECOS (personal name) information in the passwd file contains
  8-bit characters, those characters can be included in the message
  header, which can cause problems when sending SMTP to hosts that
  only accept 7-bit characters.

* 8->7 bit MIME conversion

  When sendmail is doing 8->7 bit MIME conversions, and the message
  contains certain MIME body types that cannot be converted to 7-bit,
  sendmail will pass the message as 8-bit.

* 7->8 bit MIME conversion

  If a message that is encoded as 7-bit MIME is converted to 8-bit and
  that message when decoded is illegal (e.g., because of long lines or
  illegal characters), sendmail can produce an illegal message.

* MIME encoded full name phrases in the From: header

  If a full name phrase includes characters from MustQuoteChars, sendmail
  will quote the entire full name phrase.  If MustQuoteChars includes
  characters which are not special characters according to STD 11 (RFC
  822), this quotation can interfere with MIME encoded full name phrases.
  By default, sendmail includes the single quote character (') in
  MustQuoteChars even though it is not listed as a special character in
  STD 11.

* bestmx map with -z flag truncates the list of MX hosts

  A bestmx map configured with the -z flag will truncate the list
  of MX hosts.  This prevents creation of strings which are too
  long for ruleset parsing.  This can have an adverse effect on the
  relay_based_on_MX feature.

* Saving to ~sender/dead.letter fails if su'ed to root

  If ErrorMode is set to print and an error in sending mail occurs,
  the normal action is to print a message to the screen and append
  the message to a dead.letter file in the sender's home directory.
  In the case where the sender is using su to act as root, the file
  safety checks prevent sendmail from saving the dead.letter file
  because the sender's uid and the current real uid do not match.

* Berkeley DB 2.X race condition with fcntl() locking

  There is a race condition for Berkeley DB 2.X databases on
  operating systems which use fcntl() style locking, such as
  Solaris.  Sendmail locks the map before calling db_open() to
  prevent others from modifying the map while it is being opened.
  Unfortunately, Berkeley DB opens the map, closes it, and then
  reopens it.  fcntl() locking drops the lock when any file
  descriptor pointing to the file is closed, even if it is a
  different file descriptor than the one used to initially lock
  the file.  As a result there is a possibility that entries in a
  map might not be found during a map rebuild.  As a workaround,
  you can use makemap to build a map with a new name and then
  "mv" the new db file to replace the old one.

  Sleepycat Software has added code to avoid this race condition to
  Berkeley DB versions after 2.7.5.

* File open timeouts not available on hard mounted NFS file systems

  Since SIGALRM does not interrupt an RPC call for hard mounted
  NFS file systems, it is impossible to implement a timeout on a file
  open operation.  Therefore, while the NFS server is not responding,
  attempts to open a file on that server will hang.  Systems with
  local mail delivery and NFS hard mounted home directories should be
  avoided, as attempts to open the forward files could hang.

* Race condition for delivery to set-user-ID files

  Sendmail will deliver to a fail if the file is owned by the DefaultUser
  or has the set-user-ID bit set.  Unfortunately, some systems clear that bit
  when a file is modified.  Sendmail compensates by resetting the file mode
  back to it's original settings.  Unfortunately, there's still a
  permission failure race as sendmail checks the permissions before locking
  the file.  This is unavoidable as sendmail must verify the file is safe
  to open before opening it.  A file can not be locked until it is open.

* MAIL_HUB always takes precedence over LOCAL_RELAY

  Despite the information in the documentation, MAIL_HUB ($H) will always
  be used if set instead of LOCAL_RELAY ($R).  This will be fixed in a
  future version.

$Revision: 1.13 $, Last updated $Date: 2011/05/17 15:54:23 $
@


1.13
log
@Update to sendmail 8.14.5
@
text
@d269 1
a269 1
$Revision: 8.61 $, Last updated $Date: 2011/04/07 17:48:23 $
@


1.12
log
@Update to sendmail-8.14.3
@
text
@d15 8
d269 1
a269 1
$Revision: 8.60 $, Last updated $Date: 2007/12/04 01:16:50 $
@


1.11
log
@Update to sendmail-8.14.1
@
text
@d50 11
d261 1
a261 1
$Revision: 8.59 $, Last updated $Date: 2007/02/21 23:13:58 $
@


1.10
log
@Update to sendmail-8.14.0.  OK mbalmer@@
@
text
@d173 1
a173 1
  sendmail will strip the message to 7-bit.
d250 1
a250 1
$Revision: 8.58 $, Last updated $Date: 2006/09/19 23:09:50 $
@


1.9
log
@Update to sendmail-8.13.2
@
text
@d32 4
a35 4
  all values in the body, but only 0x01-0x80 and 0xA0-0xFF in
  the header.  Notably missing is 0x00, which would require a major
  restructuring of the code -- for example, almost no C library support
  could be used to handle strings.
d238 1
a238 1
  when a file is modified.  Sendmail compensates by resetting the file mode 
d240 1
a240 1
  permission failure race as sendmail checks the permissions before locking 
d250 1
a250 1
$Revision: 1.8 $, Last updated $Date: 2003/01/01 19:59:19 $
@


1.8
log
@update to sendmail 8.12.7
@
text
@d44 6
d250 1
a250 1
$Revision: 8.55.2.1 $, Last updated $Date: 2002/12/18 22:38:48 $
@


1.7
log
@update to sendmail 8.12.3
@
text
@d238 7
a244 1
$Revision: 1.6 $, Last updated $Date: 2002/01/14 03:21:38 $
@


1.6
log
@update to sendmail-8.12.2
@
text
@d44 19
d238 1
a238 1
$Revision: 1.5 $, Last updated $Date: 2001/09/11 19:02:47 $
@


1.5
log
@merge in sendmail 8.12.0 with BSD Makefiles and mdoc man pages
@
text
@d6 1
a6 1
The following are bugs or deficiencies in sendmail that I am aware of
d37 1
a37 1
* Header checks are not called if header value is too long.
d49 1
a49 1
* $c (hop count) macro improperly set.
d51 4
a54 5
  The $c macro is supposed to contain the current hop count, for use
  when calling a mailer.  This macro is initialized too early, and
  is always zero (or the value of the -c command line flag, if any).
  This macro will probably be removed entirely in a future release;
  I don't believe there are any mailers left that require it.
d122 8
d219 1
a219 1
$Revision: 8.52 $, Last updated $Date: 2001/09/08 01:20:48 $
@


1.4
log
@update to sendmail 8.11.5
@
text
@a15 1
  (8.10, 8.11)
d152 1
a152 1
  will quote the entire full name phrase. If MustQuoteChars includes
d202 1
a202 1
* Race condition for delivery to set-user-id files
d205 1
a205 1
  or has the set-user-id bit set.  Unfortunately, some systems clear that bit
d212 1
a212 9
* Potential denial of service attack with AutoRebuildAliases

  There is a potential for a denial of service attack if the
  AutoRebuildAliases option is set as a user can kill the sendmail process
  while it is rebuilding the aliases file leaving it in an inconsistent
  state.  This option and it's use is deprecated and will be removed from a
  future version of sendmail.

$Revision: 8.43.16.2 $, Last updated $Date: 2001/07/31 22:42:46 $
@


1.3
log
@sendmail 8.11.2 with BSD Makefiles
@
text
@d38 7
d203 1
a203 1
* Race condition for delivery to setuid files
d206 1
a206 1
  or has the setuid bit set.  Unfortunately, some systems clear that bit
d221 1
a221 1
$Revision: 8.43.16.1 $, Last updated $Date: 2000/09/28 00:45:37 $
@


1.2
log
@Remove sendmail's `Build' scaffolding and add real Makefiles
praliases should be in section 1, not 8
Use arc4random(3) instead of random(3)
Add some sample OpenBSD .mc files
@
text
@a3 1
			     (for 8.9.3)
d15 14
d214 1
a214 1
$Revision: 8.43 $, Last updated $Date: 1999/11/17 18:56:09 $
@


1.2.4.1
log
@Pull in patch from current:
Errata(028):
The signal handlers in sendmail contain code that is unsafe in the
context of a signal handler.  This leads to potentially serious race
conditions.  At the moment there is a theoretical attack only and
can only be exploited on the local host (if at all).
Fix(millert):
Update to sendmail 8.11.4:
8.11.4 revamps signal handling within the MTA in order to reduce
the likelihood of a race condition that can lead to heap
corruption as described in Michal Zalewski's advisory.  The
problems discussed in the advisory are not currently known to
be exploitable but we recommend upgrading to 8.11.4 in case a
method is found to exploit the signal handling race condition.
8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d4 1
a15 14
* Delivery to programs that generate too much output may cause problems
  (8.10, 8.11)

  If e-mail is delivered to a program which generates too much
  output, then sendmail may issue an error:

  timeout waiting for input from local during Draining Input

  Make sure that the program does not generate output beyond a
  status message (corresponding to the exit status).  This may
  require a wrapper around the actual program to redirect output
  to /dev/null.

  Such a problem has been reported for bulk_mailer.
d201 1
a201 1
$Revision: 1.3 $, Last updated $Date: 2001/01/15 21:08:50 $
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock sendmail 8.10.0 with $Id -> $Sendmail
@
text
@@


1.1.1.2
log
@sendmail 8.11.2
@
text
@d4 1
a15 14
* Delivery to programs that generate too much output may cause problems
  (8.10, 8.11)

  If e-mail is delivered to a program which generates too much
  output, then sendmail may issue an error:

  timeout waiting for input from local during Draining Input

  Make sure that the program does not generate output beyond a
  status message (corresponding to the exit status).  This may
  require a wrapper around the actual program to redirect output
  to /dev/null.

  Such a problem has been reported for bulk_mailer.
d201 1
a201 1
$Revision: 8.43.16.1 $, Last updated $Date: 2000/09/28 00:45:37 $
@


1.1.1.3
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@d16 1
a37 7
* Header checks are not called if header value is too long.

  If the value of a header is longer than 1250 (MAXNAME + MAXATOM - 6)
  characters or it contains a single word longer than 256 (MAXNAME)
  characters then no header check is done even if one is configured for
  the header.

d146 1
a146 1
  will quote the entire full name phrase.  If MustQuoteChars includes
d196 1
a196 1
* Race condition for delivery to set-user-ID files
d199 1
a199 1
  or has the set-user-ID bit set.  Unfortunately, some systems clear that bit
d206 9
a214 1
$Revision: 8.52 $, Last updated $Date: 2001/09/08 01:20:48 $
@


