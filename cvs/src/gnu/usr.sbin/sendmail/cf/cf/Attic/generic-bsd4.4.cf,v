head	1.2;
access;
symbols
	SENDMAIL_8_12_0:1.1.1.3
	SENDMAIL_8_11_2:1.1.1.2
	SENDMAIL_8_10_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.04.02.19.48.12;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.02.19.05.50;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.02.19.05.50;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.01.15.20.52.23;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove sendmail's `Build' scaffolding and add real Makefiles
praliases should be in section 1, not 8
Use arc4random(3) instead of random(3)
Add some sample OpenBSD .mc files
@
text
@#
# Copyright (c) 1998-2000 Sendmail, Inc. and its suppliers.
#	All rights reserved.
# Copyright (c) 1983, 1995 Eric P. Allman.  All rights reserved.
# Copyright (c) 1988, 1993
#	The Regents of the University of California.  All rights reserved.
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the sendmail distribution.
#
#

######################################################################
######################################################################
#####
#####		SENDMAIL CONFIGURATION FILE
#####
##### built by gshapiro@@horsey.gshapiro.net on Mon Mar 6 11:41:25 PST 2000
##### in /usr/local/src/sendmail/devel/OpenSource/sendmail-8.10.0/cf/cf
##### using ../ as configuration include directory
#####
######################################################################
######################################################################

#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####
#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####
#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####

#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####

#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####

#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####

#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####



#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####


# level 9 config file format
V9/Berkeley

# override file safeties - setting this option compromises system security,
# addressing the actual file configuration problem is preferred
# need to set this before any file actions are encountered in the cf file
#O DontBlameSendmail=safe

# default LDAP map specification
# need to set this now before any LDAP maps are defined
#O LDAPDefaultSpec=-h localhost

##################
#   local info   #
##################

Cwlocalhost
# file containing names of hosts for which we receive email
Fw/etc/mail/local-host-names

# my official domain name
# ... define this only if sendmail cannot automatically determine your domain
#Dj$w.Foo.COM

CP.

# "Smart" relay host (may be null)
DS


# operators that cannot be in local usernames (i.e., network indicators)
CO @@ % !

# a class with just dot (for identifying canonical names)
C..

# a class with just a left bracket (for identifying domain literals)
C[[


# Resolve map (to check if a host exists in check_mail)
Kresolve host -a<OK> -T<TEMP>

# Hosts that will permit relaying ($=R)
FR-o /etc/mail/relay-domains


# who I send unqualified names to (null means deliver locally)
DR

# who gets all local email traffic ($R has precedence for unqualified names)
DH

# dequoting map
Kdequote dequote

# class E: names that should be exposed as from this host, even if we masquerade
# class L: names that should be delivered locally, even if we have a relay
# class M: domains that should be converted to $M
# class N: domains that should not be converted to $M
#CL root
CEroot

# who I masquerade as (null for no masquerading) (see also $=M)
DM

# my name for error messages
DnMAILER-DAEMON


CPREDIRECT

# Configuration version number
DZ8.10.0


###############
#   Options   #
###############

# strip message body to 7 bits on input?
O SevenBitInput=False

# 8-bit data handling
O EightBitMode=pass8

# wait for alias file rebuild (default units: minutes)
O AliasWait=10

# location of alias file
O AliasFile=/etc/mail/aliases

# minimum number of free blocks on filesystem
O MinFreeBlocks=100

# maximum message size
#O MaxMessageSize=1000000

# substitution for space (blank) characters
O BlankSub=.

# avoid connecting to "expensive" mailers on initial submission?
O HoldExpensive=False

# checkpoint queue runs after every N successful deliveries
#O CheckpointInterval=10

# default delivery mode
O DeliveryMode=background

# automatically rebuild the alias database?
# NOTE: There is a potential for a denial of service attack if this is set.
#       This option is deprecated and will be removed from a future version.
#O AutoRebuildAliases=False

# error message header/file
#O ErrorHeader=/etc/mail/error-header

# error mode
#O ErrorMode=print

# save Unix-style "From_" lines at top of header?
#O SaveFromLine=False

# temporary file mode
O TempFileMode=0600

# match recipients against GECOS field?
#O MatchGECOS=False

# maximum hop count
#O MaxHopCount=17

# location of help file
O HelpFile=/etc/mail/helpfile

# ignore dots as terminators in incoming messages?
#O IgnoreDots=False

# name resolver options
#O ResolverOptions=+AAONLY

# deliver MIME-encapsulated error messages?
O SendMimeErrors=True

# Forward file search path
O ForwardPath=$z/.forward.$w+$h:$z/.forward+$h:$z/.forward.$w:$z/.forward

# open connection cache size
O ConnectionCacheSize=2

# open connection cache timeout
O ConnectionCacheTimeout=5m

# persistent host status directory
#O HostStatusDirectory=.hoststat

# single thread deliveries (requires HostStatusDirectory)?
#O SingleThreadDelivery=False

# use Errors-To: header?
O UseErrorsTo=False

# log level
O LogLevel=9

# send to me too, even in an alias expansion?
#O MeToo=True

# verify RHS in newaliases?
O CheckAliases=False

# default messages to old style headers if no special punctuation?
O OldStyleHeaders=True

# SMTP daemon options
O DaemonPortOptions=Name=MTA
O DaemonPortOptions=Port=587, Name=MSA, M=E

# SMTP client options
#O ClientPortOptions=Address=0.0.0.0

# privacy flags
O PrivacyOptions=authwarnings

# who (if anyone) should get extra copies of error messages
#O PostmasterCopy=Postmaster

# slope of queue-only function
#O QueueFactor=600000

# queue directory
O QueueDirectory=/var/spool/mqueue

# timeouts (many of these)
#O Timeout.initial=5m
#O Timeout.connect=5m
#O Timeout.iconnect=5m
#O Timeout.helo=5m
#O Timeout.mail=10m
#O Timeout.rcpt=1h
#O Timeout.datainit=5m
#O Timeout.datablock=1h
#O Timeout.datafinal=1h
#O Timeout.rset=5m
#O Timeout.quit=2m
#O Timeout.misc=2m
#O Timeout.command=1h
#O Timeout.ident=5s
#O Timeout.fileopen=60s
#O Timeout.control=2m
O Timeout.queuereturn=5d
#O Timeout.queuereturn.normal=5d
#O Timeout.queuereturn.urgent=2d
#O Timeout.queuereturn.non-urgent=7d
O Timeout.queuewarn=4h
#O Timeout.queuewarn.normal=4h
#O Timeout.queuewarn.urgent=1h
#O Timeout.queuewarn.non-urgent=12h
#O Timeout.hoststatus=30m
#O Timeout.resolver.retrans=5s
#O Timeout.resolver.retrans.first=5s
#O Timeout.resolver.retrans.normal=5s
#O Timeout.resolver.retry=4
#O Timeout.resolver.retry.first=4
#O Timeout.resolver.retry.normal=4

# should we not prune routes in route-addr syntax addresses?
#O DontPruneRoutes=False

# queue up everything before forking?
O SuperSafe=True

# status file
O StatusFile=/var/log/sendmail.st

# time zone handling:
#  if undefined, use system default
#  if defined but null, use TZ envariable passed in
#  if defined and non-null, use that info
#O TimeZoneSpec=

# default UID (can be username or userid:groupid)
#O DefaultUser=mailnull

# list of locations of user database file (null means no lookup)
#O UserDatabaseSpec=/etc/mail/userdb

# fallback MX host
#O FallbackMXhost=fall.back.host.net

# if we are the best MX host for a site, try it directly instead of config err
#O TryNullMXList=False

# load average at which we just queue messages
#O QueueLA=8

# load average at which we refuse connections
#O RefuseLA=12

# maximum number of children we allow at one time
#O MaxDaemonChildren=12

# maximum number of new connections per second
#O ConnectionRateThrottle=3

# work recipient factor
#O RecipientFactor=30000

# deliver each queued job in a separate process?
#O ForkEachJob=False

# work class factor
#O ClassFactor=1800

# work time factor
#O RetryFactor=90000

# shall we sort the queue by hostname first?
#O QueueSortOrder=priority

# minimum time in queue before retry
#O MinQueueAge=30m

# default character set
#O DefaultCharSet=iso-8859-1

# service switch file (ignored on Solaris, Ultrix, OSF/1, others)
#O ServiceSwitchFile=/etc/mail/service.switch

# hosts file (normally /etc/hosts)
#O HostsFile=/etc/hosts

# dialup line delay on connection failure
#O DialDelay=10s

# action to take if there are no recipients in the message
#O NoRecipientAction=add-to-undisclosed

# chrooted environment for writing to files
#O SafeFileEnvironment=/arch

# are colons OK in addresses?
#O ColonOkInAddr=True

# how many jobs can you process in the queue?
#O MaxQueueRunSize=10000

# shall I avoid expanding CNAMEs (violates protocols)?
#O DontExpandCnames=False

# SMTP initial login message (old $e macro)
O SmtpGreetingMessage=$j Sendmail $v/$Z; $b

# UNIX initial From header format (old $l macro)
O UnixFromLine=From $g $d

# From: lines that have embedded newlines are unwrapped onto one line
#O SingleLineFromHeader=False

# Allow HELO SMTP command that does not include a host name
#O AllowBogusHELO=False

# Characters to be quoted in a full name phrase (@@,;:\()[] are automatic)
#O MustQuoteChars=.

# delimiter (operator) characters (old $o macro)
O OperatorChars=.:%@@!^/[]+

# shall I avoid calling initgroups(3) because of high NIS costs?
#O DontInitGroups=False

# are group-writable :include: and .forward files (un)trustworthy?
#O UnsafeGroupWrites=True

# where do errors that occur when sending errors get sent?
#O DoubleBounceAddress=postmaster

# where to save bounces if all else fails
#O DeadLetterDrop=/var/tmp/dead.letter

# what user id do we assume for the majority of the processing?
#O RunAsUser=sendmail

# maximum number of recipients per SMTP envelope
#O MaxRecipientsPerMessage=100

# shall we get local names from our installed interfaces?
#O DontProbeInterfaces=False

# Return-Receipt-To: header implies DSN request
#O RrtImpliesDsn=False

# override connection address (for testing)
#O ConnectOnlyTo=0.0.0.0

# Trusted user for file ownership and starting the daemon
#O TrustedUser=root

# Control socket for daemon management
#O ControlSocketName=/var/spool/mqueue/.control

# Maximum MIME header length to protect MUAs
#O MaxMimeHeaderLength=0/0

# Maximum length of the sum of all headers
O MaxHeadersLength=32768

# Maximum depth of alias recursion
#O MaxAliasRecursion=10

# location of pid file
#O PidFile=/var/run/sendmail.pid

# Prefix string for the process title shown on 'ps' listings
#O ProcessTitlePrefix=prefix

# Data file (df) memory-buffer file maximum size
#O DataFileBufferSize=4096

# Transcript file (xf) memory-buffer file maximum size
#O XscriptFileBufferSize=4096

# list of authentication mechanisms
#O AuthMechanisms=GSSAPI KERBEROS_V4 DIGEST-MD5 CRAM-MD5

# default authentication information for outgoing connections
#O DefaultAuthInfo=/etc/mail/default-auth-info

# try to authenticate? (Try when available/only when Authenticated)
#O AuthOptions=T






###########################
#   Message precedences   #
###########################

Pfirst-class=0
Pspecial-delivery=100
Plist=-30
Pbulk=-60
Pjunk=-100

#####################
#   Trusted users   #
#####################

# this is equivalent to setting class "t"
#Ft/etc/mail/trusted-users
Troot
Tdaemon
Tuucp

#########################
#   Format of headers   #
#########################

H?P?Return-Path: <$g>
HReceived: $?sfrom $s $.$?_($?s$|from $.$_)
	$.$?{auth_type}(authenticated)
	$.by $j ($v/$Z)$?r with $r$. id $i$?u
	for $u; $|;
	$.$b
H?D?Resent-Date: $a
H?D?Date: $a
H?F?Resent-From: $?x$x <$g>$|$g$.
H?F?From: $?x$x <$g>$|$g$.
H?x?Full-Name: $x
# HPosted-Date: $a
# H?l?Received-Date: $b
H?M?Resent-Message-Id: <$t.$i@@$j>
H?M?Message-Id: <$t.$i@@$j>

#
######################################################################
######################################################################
#####
#####			REWRITING RULES
#####
######################################################################
######################################################################

############################################
###  Ruleset 3 -- Name Canonicalization  ###
############################################
Scanonify=3

# handle null input (translate to <@@> special case)
R$@@			$@@ <@@>

# strip group: syntax (not inside angle brackets!) and trailing semicolon
R$*			$: $1 <@@>			mark addresses
R$* < $* > $* <@@>	$: $1 < $2 > $3			unmark <addr>
R@@ $* <@@>		$: @@ $1				unmark @@host:...
R$* :: $* <@@>		$: $1 :: $2			unmark node::addr
R:include: $* <@@>	$: :include: $1			unmark :include:...
R$* [ IPv6 $- ] <@@>	$: $1 [ IPv6 $2 ]		unmark IPv6 addr
R$* : $* [ $* ]		$: $1 : $2 [ $3 ] <@@>		remark if leading colon
R$* : $* <@@>		$: $2				strip colon if marked
R$* <@@>			$: $1				unmark
R$* ;			   $1				strip trailing semi
R$* < $* ; >		   $1 < $2 >			bogus bracketed semi

# null input now results from list:; syntax
R$@@			$@@ :; <@@>

# strip angle brackets -- note RFC733 heuristic to get innermost item
R$*			$: < $1 >			housekeeping <>
R$+ < $* >		   < $2 >			strip excess on left
R< $* > $+		   < $1 >			strip excess on right
R<>			$@@ < @@ >			MAIL FROM:<> case
R< $+ >			$: $1				remove housekeeping <>

# strip route address <@@a,@@b,@@c:user@@d> -> <user@@d>
R@@ $+ , $+		$2
R@@ $+ : $+		$2

# find focus for list syntax
R $+ : $* ; @@ $+	$@@ $>Canonify2 $1 : $2 ; < @@ $3 >	list syntax
R $+ : $* ;		$@@ $1 : $2;			list syntax

# find focus for @@ syntax addresses
R$+ @@ $+		$: $1 < @@ $2 >			focus on domain
R$+ < $+ @@ $+ >		$1 $2 < @@ $3 >			move gaze right
R$+ < @@ $+ >		$@@ $>Canonify2 $1 < @@ $2 >	already canonical

# do some sanity checking
R$* < @@ $* : $* > $*	$1 < @@ $2 $3 > $4		nix colons in addrs

# convert old-style addresses to a domain-based address
R$- ! $+		$@@ $>Canonify2 $2 < @@ $1 .UUCP >	resolve uucp names
R$+ . $- ! $+		$@@ $>Canonify2 $3 < @@ $1 . $2 >		domain uucps
R$+ ! $+		$@@ $>Canonify2 $2 < @@ $1 .UUCP >	uucp subdomains

# if we have % signs, take the rightmost one
R$* % $*		$1 @@ $2				First make them all @@s.
R$* @@ $* @@ $*		$1 % $2 @@ $3			Undo all but the last.
R$* @@ $*		$@@ $>Canonify2 $1 < @@ $2 >	Insert < > and finish

# else we must be a local name
R$*			$@@ $>Canonify2 $1


################################################
###  Ruleset 96 -- bottom half of ruleset 3  ###
################################################

SCanonify2=96

# handle special cases for local names
R$* < @@ localhost > $*		$: $1 < @@ $j . > $2		no domain at all
R$* < @@ localhost . $m > $*	$: $1 < @@ $j . > $2		local domain
R$* < @@ localhost . UUCP > $*	$: $1 < @@ $j . > $2		.UUCP domain

# check for IPv6 domain literal (save quoted form)
R$* < @@ [ IPv6 $- ] > $*	$: $2 $| $1 < @@@@ [ $(dequote $2 $) ] > $3	mark IPv6 addr
R$- $| $* < @@@@ $=w > $*		$: $2 < @@ $j . > $4		self-literal
R$- $| $* < @@@@ [ $+ ] > $*	$@@ $2 < @@ [ IPv6 $1 ] > $4	canon IP addr

# check for IPv4 domain literal
R$* < @@ [ $+ ] > $*		$: $1 < @@@@ [ $2 ] > $3		mark [a.b.c.d]
R$* < @@@@ $=w > $*		$: $1 < @@ $j . > $3		self-literal
R$* < @@@@ $+ > $*		$@@ $1 < @@ $2 > $3		canon IP addr





# if really UUCP, handle it immediately

# try UUCP traffic as a local address
R$* < @@ $+ . UUCP > $*		$: $1 < @@ $[ $2 $] . UUCP . > $3
R$* < @@ $+ . . UUCP . > $*	$@@ $1 < @@ $2 . > $3

# hostnames ending in class P are always canonical
R$* < @@ $* $=P > $*		$: $1 < @@ $2 $3 . > $4
R$* < @@ $* $~P > $*		$: $&{daemon_flags} $| $1 < @@ $2 $3 > $4
R$* CC $* $| $*			$: $3
# pass to name server to make hostname canonical
R$* $| $* < @@ $* > $*		$: $2 < @@ $[ $3 $] > $4
R$* $| $*			$: $2

# local host aliases and pseudo-domains are always canonical
R$* < @@ $=w > $*		$: $1 < @@ $2 . > $3
R$* < @@ $=M > $*		$: $1 < @@ $2 . > $3
R$* < @@ $* . . > $*		$1 < @@ $2 . > $3


##################################################
###  Ruleset 4 -- Final Output Post-rewriting  ###
##################################################
Sfinal=4

R$* <@@>			$@@				handle <> and list:;

# strip trailing dot off possibly canonical name
R$* < @@ $+ . > $*	$1 < @@ $2 > $3

# eliminate internal code
R$* < @@ *LOCAL* > $*	$1 < @@ $j > $2

# externalize local domain info
R$* < $+ > $*		$1 $2 $3			defocus
R@@ $+ : @@ $+ : $+	@@ $1 , @@ $2 : $3		<route-addr> canonical
R@@ $*			$@@ @@ $1				... and exit

# UUCP must always be presented in old form
R$+ @@ $- . UUCP		$2!$1				u@@h.UUCP => h!u

# delete duplicate local names
R$+ % $=w @@ $=w		$1 @@ $2				u%host@@host => u@@host



##############################################################
###   Ruleset 97 -- recanonicalize and call ruleset zero   ###
###		   (used for recursive calls)		   ###
##############################################################

SRecurse=97
R$*			$: $>canonify $1
R$*			$@@ $>parse $1


######################################
###   Ruleset 0 -- Parse Address   ###
######################################

Sparse=0

R$*			$: $>Parse0 $1		initial parsing
R<@@>			$#local $: <@@>		special case error msgs
R$*			$: $>ParseLocal $1	handle local hacks
R$*			$: $>Parse1 $1		final parsing

#
#  Parse0 -- do initial syntax checking and eliminate local addresses.
#	This should either return with the (possibly modified) input
#	or return with a #error mailer.  It should not return with a
#	#mailer other than the #error mailer.
#

SParse0
R<@@>			$@@ <@@>			special case error msgs
R$* : $* ; <@@>		$#error $@@ 5.1.3 $: "553 List:; syntax illegal for recipient addresses"
R@@ <@@ $* >		< @@ $1 >		catch "@@@@host" bogosity
R<@@ $+>			$#error $@@ 5.1.3 $: "553 User address required"
R$*			$: <> $1
R<> $* < @@ [ $+ ] > $*	$1 < @@ [ $2 ] > $3
R<> $* <$* : $* > $*	$#error $@@ 5.1.3 $: "553 Colon illegal in host name part"
R<> $*			$1
R$* < @@ . $* > $*	$#error $@@ 5.1.2 $: "553 Invalid host name"
R$* < @@ $* .. $* > $*	$#error $@@ 5.1.2 $: "553 Invalid host name"

# now delete the local info -- note $=O to find characters that cause forwarding
R$* < @@ > $*		$@@ $>Parse0 $>canonify $1	user@@ => user
R< @@ $=w . > : $*	$@@ $>Parse0 $>canonify $2	@@here:... -> ...
R$- < @@ $=w . >		$: $(dequote $1 $) < @@ $2 . >	dequote "foo"@@here
R< @@ $+ >		$#error $@@ 5.1.3 $: "553 User address required"
R$* $=O $* < @@ $=w . >	$@@ $>Parse0 $>canonify $1 $2 $3	...@@here -> ...
R$- 			$: $(dequote $1 $) < @@ *LOCAL* >	dequote "foo"
R< @@ *LOCAL* >		$#error $@@ 5.1.3 $: "553 User address required"
R$* $=O $* < @@ *LOCAL* >
			$@@ $>Parse0 $>canonify $1 $2 $3	...@@*LOCAL* -> ...
R$* < @@ *LOCAL* >	$: $1

#
#  Parse1 -- the bottom half of ruleset 0.
#

SParse1

# handle numeric address spec
R$* < @@ [ $+ ] > $*	$: $>ParseLocal $1 < @@ [ $2 ] > $3	numeric internet spec
R$* < @@ [ $+ ] > $*	$1 < @@ [ $2 ] : $S > $3		Add smart host to path
R$* < @@ [ IPv6 $- ] : > $*
		$#esmtp $@@ [ $(dequote $2 $) ] $: $1 < @@ [IPv6 $2 ] > $3	no smarthost: send
R$* < @@ [ $+ ] : > $*	$#esmtp $@@ [$2] $: $1 < @@ [$2] > $3	no smarthost: send
R$* < @@ [ $+ ] : $- : $*> $*	$#$3 $@@ $4 $: $1 < @@ [$2] > $5	smarthost with mailer
R$* < @@ [ $+ ] : $+ > $*	$#esmtp $@@ $3 $: $1 < @@ [$2] > $4	smarthost without mailer


# short circuit local delivery so forwarded email works
R$=L < @@ $=w . >	$#local $: @@ $1			special local names
R$+ < @@ $=w . >		$#local $: $1			regular local name


# resolve remotely connected UUCP links (if any)

# resolve fake top level domains by forwarding to other hosts



# pass names that still have a host to a smarthost (if defined)
R$* < @@ $* > $*		$: $>MailerToTriple < $S > $1 < @@ $2 > $3	glue on smarthost name

# deal with other remote names
R$* < @@$* > $*		$#esmtp $@@ $2 $: $1 < @@ $2 > $3	user@@host.domain

# handle locally delivered names
R$=L			$#local $: @@ $1		special local names
R$+			$#local $: $1			regular local names

###########################################################################
###   Ruleset 5 -- special rewriting after aliases have been expanded   ###
###########################################################################

SLocal_localaddr
Slocaladdr=5
R$+			$: $1 $| $>"Local_localaddr" $1
R$+ $| $#$*		$#$2
R$+ $| $*		$: $1

# deal with plussed users so aliases work nicely
R$+ + *			$#local $@@ $&h $: $1
R$+ + $*		$#local $@@ + $2 $: $1 + *

# prepend an empty "forward host" on the front
R$+			$: <> $1


# see if we have a relay or a hub
R< > $+			$: < $H > $1			try hub
R< > $+			$: < $R > $1			try relay
R< > $+			$: < > < $1 <> $&h >		nope, restore +detail
R< > < $+ <> + $* >	$: < > < $1 + $2 >		check whether +detail
R< > < $+ <> $* >	$: < > < $1 >			else discard
R< > < $+ + $* > $*	   < > < $1 > + $2 $3		find the user part
R< > < $+ > + $*	$#local $@@ $2 $: @@ $1		strip the extra +
R< > < $+ >		$@@ $1				no +detail
R$+			$: $1 <> $&h			add +detail back in
R$+ <> + $*		$: $1 + $2			check whether +detail
R$+ <> $*		$: $1				else discard
R< local : $* > $*	$: $>MailerToTriple < local : $1 > $2	no host extension
R< error : $* > $*	$: $>MailerToTriple < error : $1 > $2	no host extension
R< $- : $+ > $+		$: $>MailerToTriple < $1 : $2 > $3 < @@ $2 >
R< $+ > $+		$@@ $>MailerToTriple < $1 > $2 < @@ $1 >


###################################################################
###  Ruleset 95 -- canonify mailer:[user@@]host syntax to triple	###
###################################################################

SMailerToTriple=95
R< > $*				$@@ $1			strip off null relay
R< error : $-.$-.$- : $+ > $* 	$#error $@@ $1.$2.$3 $: $4
R< error : $- $+ > $*		$#error $@@ $(dequote $1 $) $: $2
R< local : $* > $*		$>CanonLocal < $1 > $2
R< $- : $+ @@ $+ > $*<$*>$*	$# $1 $@@ $3 $: $2<@@$3>	use literal user
R< $- : $+ > $*			$# $1 $@@ $2 $: $3	try qualified mailer
R< $=w > $*			$@@ $2			delete local host
R< [ IPv6 $+ ] > $*		$#relay $@@ $(dequote $1 $) $: $2	use unqualified mailer
R< $+ > $*			$#relay $@@ $1 $: $2	use unqualified mailer

###################################################################
###  Ruleset CanonLocal -- canonify local: syntax		###
###################################################################

SCanonLocal
# strip local host from routed addresses
R< $* > < @@ $+ > : $+		$@@ $>Recurse $3
R< $* > $+ $=O $+ < @@ $+ >	$@@ $>Recurse $2 $3 $4

# strip trailing dot from any host name that may appear
R< $* > $* < @@ $* . >		$: < $1 > $2 < @@ $3 >

# handle local: syntax -- use old user, either with or without host
R< > $* < @@ $* > $*		$#local $@@ $1@@$2 $: $1
R< > $+				$#local $@@ $1    $: $1

# handle local:user@@host syntax -- ignore host part
R< $+ @@ $+ > $* < @@ $* >	$: < $1 > $3 < @@ $4 >

# handle local:user syntax
R< $+ > $* <@@ $* > $*		$#local $@@ $2@@$3 $: $1
R< $+ > $* 			$#local $@@ $2    $: $1

###################################################################
###  Ruleset 93 -- convert header names to masqueraded form	###
###################################################################

SMasqHdr=93


# do not masquerade anything in class N
R$* < @@ $* $=N . >	$@@ $1 < @@ $2 $3 . >

# special case the users that should be exposed
R$=E < @@ *LOCAL* >	$@@ $1 < @@ $j . >		leave exposed
R$=E < @@ $=M . >	$@@ $1 < @@ $2 . >
R$=E < @@ $=w . >	$@@ $1 < @@ $2 . >

# handle domain-specific masquerading
R$* < @@ $=M . > $*	$: $1 < @@ $2 . @@ $M > $3	convert masqueraded doms
R$* < @@ $=w . > $*	$: $1 < @@ $2 . @@ $M > $3
R$* < @@ *LOCAL* > $*	$: $1 < @@ $j . @@ $M > $2
R$* < @@ $+ @@ > $*	$: $1 < @@ $2 > $3		$M is null
R$* < @@ $+ @@ $+ > $*	$: $1 < @@ $3 . > $4		$M is not null

###################################################################
###  Ruleset 94 -- convert envelope names to masqueraded form	###
###################################################################

SMasqEnv=94
R$* < @@ *LOCAL* > $*	$: $1 < @@ $j . > $2

###################################################################
###  Ruleset 98 -- local part of ruleset zero (can be null)	###
###################################################################

SParseLocal=98

# addresses sent to foo@@host.REDIRECT will give a 551 error code
R$* < @@ $+ .REDIRECT. >		$: $1 < @@ $2 . REDIRECT . > < ${opMode} >
R$* < @@ $+ .REDIRECT. > <i>	$: $1 < @@ $2 . REDIRECT. >
R$* < @@ $+ .REDIRECT. > < $- >	$#error $@@ 5.1.1 $: "551 User has moved; please try " <$1@@$2>





######################################################################
###  CanonAddr --	Convert an address into a standard form for
###			relay checking.  Route address syntax is
###			crudely converted into a %-hack address.
###
###	Parameters:
###		$1 -- full recipient address
###
###	Returns:
###		parsed address, not in source route form
######################################################################

SCanonAddr
R$*			$: $>Parse0 $>canonify $1	make domain canonical


######################################################################
###  ParseRecipient --	Strip off hosts in $=R as well as possibly
###			$* $=m or the access database.
###			Check user portion for host separators.
###
###	Parameters:
###		$1 -- full recipient address
###
###	Returns:
###		parsed, non-local-relaying address
######################################################################

SParseRecipient
R$*				$: <?> $>CanonAddr $1
R<?> $* < @@ $* . >		<?> $1 < @@ $2 >			strip trailing dots
R<?> $- < @@ $* >		$: <?> $(dequote $1 $) < @@ $2 >	dequote local part

# if no $=O character, no host in the user portion, we are done
R<?> $* $=O $* < @@ $* >		$: <NO> $1 $2 $3 < @@ $4>
R<?> $*				$@@ $1



R<NO> $* < @@ $* $=R >		$: <RELAY> $1 < @@ $2 $3 >

R<RELAY> $* < @@ $* >		$@@ $>ParseRecipient $1
R<$-> $*			$@@ $2


######################################################################
###  check_relay -- check hostname/address on SMTP startup
######################################################################

SLocal_check_relay
Scheck_relay
R$*			$: $1 $| $>"Local_check_relay" $1
R$* $| $* $| $#$*	$#$3
R$* $| $* $| $*		$@@ $>"Basic_check_relay" $1 $| $2

SBasic_check_relay
# check for deferred delivery mode
R$*			$: < ${deliveryMode} > $1
R< d > $*		$@@ deferred
R< $* > $*		$: $2




######################################################################
###  check_mail -- check SMTP `MAIL FROM:' command argument
######################################################################

SLocal_check_mail
Scheck_mail
R$*			$: $1 $| $>"Local_check_mail" $1
R$* $| $#$*		$#$2
R$* $| $*		$@@ $>"Basic_check_mail" $1

SBasic_check_mail
# check for deferred delivery mode
R$*			$: < ${deliveryMode} > $1
R< d > $*		$@@ deferred
R< $* > $*		$: $2

R<>			$@@ <OK>			we MUST accept <> (RFC 1123)
R$+			$: <?> $1
R<?><$+>		$: <@@> <$1>
R<?>$+			$: <@@> <$1>
R$*			$: $&{daemon_flags} $| $1
R$* f $* $| <@@> < $* @@ $- >	$: < ? $&{client_name} > < $3 @@ $4 >
R$* u $* $| <@@> < $* >	$: <?> < $3 >
R$* $| $*		$: $2
# handle case of @@localhost on address
R<@@> < $* @@ localhost >	$: < ? $&{client_name} > < $1 @@ localhost >
R<@@> < $* @@ [127.0.0.1] >
			$: < ? $&{client_name} > < $1 @@ [127.0.0.1] >
R<@@> < $* @@ localhost.$m >
			$: < ? $&{client_name} > < $1 @@ localhost.$m >
R<@@> < $* @@ localhost.UUCP >
			$: < ? $&{client_name} > < $1 @@ localhost.UUCP >
R<@@> $*			$: $1			no localhost as domain
R<? $=w> $*		$: $2			local client: ok
R<? $+> <$+>		$#error $@@ 5.5.4 $: "553 Real domain name required"
R<?> $*			$: $1
R$*			$: <?> $>CanonAddr $1		canonify sender address and mark it
R<?> $* < @@ $+ . >	<?> $1 < @@ $2 >			strip trailing dots
# handle non-DNS hostnames (*.bitnet, *.decnet, *.uucp, etc)
R<?> $* < @@ $* $=P >	$: <OK> $1 < @@ $2 $3 >
R<?> $* < @@ $+ >	$: <? $(resolve $2 $: $2 <PERM> $) > $1 < @@ $2 >
R<? $* <$->> $* < @@ $+ >
			$: <$2> $3 < @@ $4 >


# handle case of no @@domain on address
R<?> $*			$: $&{daemon_flags} $| <?> $1
R$* u $* $| <?> $*	$: <OK> $3
R$* $| $*		$: $2
R<?> $*			$: < ? $&{client_name} > $1
R<?> $*			$@@ <OK>				...local unqualed ok
R<? $+> $*		$#error $@@ 5.5.4 $: "553 Domain name required"
							...remote is not
# check results
R<?> $*			$: @@ $1		mark address: nothing known about it
R<OK> $*		$@@ <OK>
R<TEMP> $*		$#error $@@ 4.1.8 $: "451 Sender domain must resolve"
R<PERM> $*		$#error $@@ 5.1.8 $: "501 Sender domain must exist"

######################################################################
###  check_rcpt -- check SMTP `RCPT TO:' command argument
######################################################################

SLocal_check_rcpt
Scheck_rcpt
R$*			$: $1 $| $>"Local_check_rcpt" $1
R$* $| $#$*		$#$2
R$* $| $*		$@@ $>"Basic_check_rcpt" $1

SBasic_check_rcpt
# check for deferred delivery mode
R$*			$: < ${deliveryMode} > $1
R< d > $*		$@@ deferred
R< $* > $*		$: $2


R$*			$: $>ParseRecipient $1		strip relayable hosts





# authenticated by a trusted mechanism?
R$*			$: $1 $| $&{auth_type}
R$* $|			$: $1
R$* $| $={TrustAuthMech}	$# RELAYAUTH
R$* $| $*		$: $1
# anything terminating locally is ok
R$+ < @@ $=w >		$@@ RELAYTO
R$+ < @@ $* $=R >	$@@ RELAYTO


# check for local user (i.e. unqualified address)
R$*			$: <?> $1
R<?> $* < @@ $+ >	$: <REMOTE> $1 < @@ $2 >
# local user is ok
R<?> $+			$@@ RELAYTOLOCAL
R<$+> $*		$: $2

# anything originating locally is ok
# check IP address
R$*			$: $&{client_addr}
R$@@			$@@ RELAYFROM		originated locally
R0			$@@ RELAYFROM		originated locally
R$=R $*			$@@ RELAYFROM		relayable IP address
R$*			$: [ $1 ]		put brackets around it...
R$=w			$@@ RELAYFROM		... and see if it is local


# check client name: first: did it resolve?
R$*			$: < $&{client_resolve} >
R<TEMP>			$#error $@@ 4.7.1 $: "450 Relaying temporarily denied. Cannot resolve PTR record for " $&{client_addr}
R<FORGED>		$#error $@@ 5.7.1 $: "550 Relaying denied. IP name possibly forged " $&{client_name}
R<FAIL>			$#error $@@ 5.7.1 $: "550 Relaying denied. IP name lookup failed " $&{client_name}
R$*			$: <?> $&{client_name}
R<?>			$@@ RELAYFROM
R<?> $=w		$@@ RELAYFROM
R<?> $* $=R			$@@ RELAYFROM

# anything else is bogus
R$*			$#error $@@ 5.7.1 $: "550 Relaying denied"


# is user trusted to authenticate as someone else?
Strust_auth
R$*			$: $&{auth_type} $| $1
# required by RFC 2554 section 4.
R$@@ $| $*		$#error $@@ 5.7.1 $: "550 not authenticated"
R$* $| $&{auth_authen}		$@@ identical
R$* $| <$&{auth_authen}>	$@@ identical
R$* $| $*		$: $1 $| $>"Local_trust_auth" $1
R$* $| $#$*		$#$2
R$*			$#error $@@ 5.7.1 $: "550 " $&{auth_authen} " not allowed to act as " $&{auth_author}

SLocal_trust_auth


#
######################################################################
######################################################################
#####
#####			MAILER DEFINITIONS
#####
######################################################################
######################################################################


##################################################
###   Local and Program Mailer specification   ###
##################################################

#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####

#
#  Envelope sender rewriting
#
SEnvFromL=10
R<@@>			$n			errors to mailer-daemon
R@@ <@@ $*>		$n			temporarily bypass Sun bogosity
R$+			$: $>AddDomain $1	add local domain if needed
R$*			$: $>MasqEnv $1		do masquerading

#
#  Envelope recipient rewriting
#
SEnvToL=20
R$+ < @@ $* >		$: $1			strip host part

#
#  Header sender rewriting
#
SHdrFromL=30
R<@@>			$n			errors to mailer-daemon
R@@ <@@ $*>		$n			temporarily bypass Sun bogosity
R$+			$: $>AddDomain $1	add local domain if needed
R$*			$: $>MasqHdr $1		do masquerading

#
#  Header recipient rewriting
#
SHdrToL=40
R$+			$: $>AddDomain $1	add local domain if needed
R$* < @@ *LOCAL* > $*	$: $1 < @@ $j . > $2

#
#  Common code to add local domain name (only if always-add-domain)
#
SAddDomain=50

Mlocal,		P=/usr/libexec/mail.local, F=lsDFMAw5:/|@@qPrmn9, S=EnvFromL/HdrFromL, R=EnvToL/HdrToL,
		T=DNS/RFC822/X-Unix,
		A=mail -d $u
Mprog,		P=/bin/sh, F=lsDFMoqeu9, S=EnvFromL/HdrFromL, R=EnvToL/HdrToL, D=$z:/,
		T=X-Unix/X-Unix/X-Unix,
		A=sh -c $u

#####################################
###   SMTP Mailer specification   ###
#####################################

#####  $Id: generic-bsd4.4.cf,v 1.1 2000/04/02 19:05:50 millert Exp $  #####

#
#  common sender and masquerading recipient rewriting
#
SMasqSMTP=61
R$* < @@ $* > $*		$@@ $1 < @@ $2 > $3		already fully qualified
R$+			$@@ $1 < @@ *LOCAL* >		add local qualification

#
#  convert pseudo-domain addresses to real domain addresses
#
SPseudoToReal=51

# pass <route-addr>s through
R< @@ $+ > $*		$@@ < @@ $1 > $2			resolve <route-addr>

# output fake domains as user%fake@@relay

# do UUCP heuristics; note that these are shared with UUCP mailers
R$+ < @@ $+ .UUCP. >	$: < $2 ! > $1			convert to UUCP form
R$+ < @@ $* > $*		$@@ $1 < @@ $2 > $3		not UUCP form

# leave these in .UUCP form to avoid further tampering
R< $&h ! > $- ! $+	$@@ $2 < @@ $1 .UUCP. >
R< $&h ! > $-.$+ ! $+	$@@ $3 < @@ $1.$2 >
R< $&h ! > $+		$@@ $1 < @@ $&h .UUCP. >
R< $+ ! > $+		$: $1 ! $2 < @@ $Y >		use UUCP_RELAY
R$+ < @@ $+ : $+ >	$@@ $1 < @@ $3 >			strip mailer: part
R$+ < @@ >		$: $1 < @@ *LOCAL* >		if no UUCP_RELAY


#
#  envelope sender rewriting
#
SEnvFromSMTP=11
R$+			$: $>PseudoToReal $1		sender/recipient common
R$* :; <@@>		$@@				list:; special case
R$*			$: $>MasqSMTP $1		qualify unqual'ed names
R$+			$: $>MasqEnv $1			do masquerading


#
#  envelope recipient rewriting --
#  also header recipient if not masquerading recipients
#
SEnvToSMTP=21
R$+			$: $>PseudoToReal $1		sender/recipient common
R$+			$: $>MasqSMTP $1		qualify unqual'ed names
R$* < @@ *LOCAL* > $*	$: $1 < @@ $j . > $2

#
#  header sender and masquerading header recipient rewriting
#
SHdrFromSMTP=31
R$+			$: $>PseudoToReal $1		sender/recipient common
R:; <@@>			$@@				list:; special case

# do special header rewriting
R$* <@@> $*		$@@ $1 <@@> $2			pass null host through
R< @@ $* > $*		$@@ < @@ $1 > $2			pass route-addr through
R$*			$: $>MasqSMTP $1		qualify unqual'ed names
R$+			$: $>MasqHdr $1			do masquerading


#
#  relay mailer header masquerading recipient rewriting
#
SMasqRelay=71
R$+			$: $>MasqSMTP $1
R$+			$: $>MasqHdr $1

Msmtp,		P=[IPC], F=mDFMuX, S=EnvFromSMTP/HdrFromSMTP, R=EnvToSMTP, E=\r\n, L=990,
		T=DNS/RFC822/SMTP,
		A=IPC $h
Mesmtp,		P=[IPC], F=mDFMuXa, S=EnvFromSMTP/HdrFromSMTP, R=EnvToSMTP, E=\r\n, L=990,
		T=DNS/RFC822/SMTP,
		A=IPC $h
Msmtp8,		P=[IPC], F=mDFMuX8, S=EnvFromSMTP/HdrFromSMTP, R=EnvToSMTP, E=\r\n, L=990,
		T=DNS/RFC822/SMTP,
		A=IPC $h
Mdsmtp,		P=[IPC], F=mDFMuXa%, S=EnvFromSMTP/HdrFromSMTP, R=EnvToSMTP, E=\r\n, L=990,
		T=DNS/RFC822/SMTP,
		A=IPC $h
Mrelay,		P=[IPC], F=mDFMuXa8, S=EnvFromSMTP/HdrFromSMTP, R=MasqSMTP, E=\r\n, L=2040,
		T=DNS/RFC822/SMTP,
		A=IPC $h
@


1.1
log
@Initial revision
@
text
@d26 3
a28 3
#####  $Id: cfhead.m4,v 8.74 2000/02/26 01:00:32 gshapiro Exp $  #####
#####  $Id: cf.m4,v 8.32 1999/02/07 07:26:14 gshapiro Exp $  #####
#####  $Id: generic-bsd4.4.mc,v 8.10 1999/02/07 07:26:02 gshapiro Exp $  #####
d30 1
a30 1
#####  $Id: bsd4.4.m4,v 8.14 1999/04/24 05:37:40 gshapiro Exp $  #####
d32 1
a32 1
#####  $Id: generic.m4,v 8.15 1999/04/04 00:51:09 ca Exp $  #####
d34 1
a34 1
#####  $Id: redirect.m4,v 8.15 1999/08/06 01:47:36 gshapiro Exp $  #####
d36 1
a36 1
#####  $Id: use_cw_file.m4,v 8.9 1999/02/07 07:26:13 gshapiro Exp $  #####
d40 1
a40 1
#####  $Id: proto.m4,v 8.434 2000/02/22 22:55:17 ca Exp $  #####
d1043 1
a1043 1
#####  $Id: local.m4,v 8.50 1999/11/21 19:02:08 ca Exp $  #####
d1092 1
a1092 1
#####  $Id: smtp.m4,v 8.55 1999/09/21 20:26:18 ca Exp $  #####
@


1.1.1.1
log
@stock sendmail 8.10.0 with $Id -> $Sendmail
@
text
@@


1.1.1.2
log
@sendmail 8.11.2
@
text
@d19 2
a20 2
##### built by gshapiro@@horsey.gshapiro.net on Fri Dec 29 22:30:59 PST 2000
##### in /usr/local/src/sendmail/devel/8.11/OpenSource/sendmail-8.11.2/cf/cf
d26 1
a26 1
#####  $Id: cfhead.m4,v 8.76.4.13 2000/08/24 17:09:50 gshapiro Exp $  #####
d40 1
a40 1
#####  $Id: proto.m4,v 8.446.2.5.2.38 2000/12/28 03:37:28 ca Exp $  #####
d86 1
a86 3


# Hosts for which relaying is permitted ($=R)
a88 2
# arithmetic map
Karith arith
d116 1
a116 1
DZ8.11.2
d307 1
a307 1
#O ConnectionRateThrottle=0
d432 2
a433 2
# SMTP AUTH flags
#O AuthOptions
a436 16
# CA directory
#O CACERTPath
# CA file
#O CACERTFile
# Server Cert
#O ServerCertFile
# Server private key
#O ServerKeyFile
# Client Cert
#O ClientCertFile
# Client private key
#O ClientKeyFile
# DHParameters (only required if DSA/DH is used)
#O DHParameters
# Random data source (required for systems without /dev/urandom under OpenSSL)
#O RandFile
d466 2
a467 3
	$.$?{auth_type}(authenticated$?{auth_ssf} (${auth_ssf} bits)$.)
	$.by $j ($v/$Z)$?r with $r$. id $i$?{tls_version}
	(using ${tls_version} with cipher ${cipher} (${cipher_bits} bits) verified ${verify})$.$?u
a507 1
R$* < $+ :; > $*	$@@ $2 :; <@@>			catch <list:;>
a583 1
R$* CC $* $| $* < @@ $+.$+ > $*	$: $3 < @@ $4.$5 . > $6
a599 1
R$+ :; <@@>		$@@ $1 :				handle <list:;>
d651 1
a651 1
R$* : $* ; <@@>		$#error $@@ 5.1.3 $: "501 List:; syntax illegal for recipient addresses"
d653 1
a653 1
R<@@ $+>			$#error $@@ 5.1.3 $: "501 User address required"
d656 1
a656 1
R<> $* <$* : $* > $*	$#error $@@ 5.1.3 $: "501 Colon illegal in host name part"
d658 2
a659 3
R$* < @@ . $* > $*	$#error $@@ 5.1.2 $: "501 Invalid host name"
R$* < @@ $* .. $* > $*	$#error $@@ 5.1.2 $: "501 Invalid host name"
R$* , $~O $*		$#error $@@ 5.1.2 $: "501 Invalid route address"
d665 1
a665 1
R< @@ $+ >		$#error $@@ 5.1.3 $: "501 User address required"
d668 1
a668 1
R< @@ *LOCAL* >		$#error $@@ 5.1.3 $: "501 User address required"
a689 2


a719 3



a730 1

a868 1

a907 5
# authenticated?
R$*			$: $1 $| $>"tls_client" $&{verify} $| MAIL
R$* $| $#$+		$#$2
R$* $| $*		$: $1

d926 1
a926 1
R<? $+> <$+>		$#error $@@ 5.5.4 $: "501 Real domain name required for sender address"
d943 1
a943 1
R<? $+> $*		$#error $@@ 5.5.4 $: "501 Domain name required for sender address " $&f
d948 2
a949 2
R<TEMP> $*		$#error $@@ 4.1.8 $: "451 Domain of sender address " $&f " does not resolve"
R<PERM> $*		$#error $@@ 5.1.8 $: "501 Domain of sender address " $&f " does not exist"
a973 5
# authenticated?
R$*		$: $1 $| $>RelayAuth $1 $| $&{verify}	client authenticated?
R$* $| $# $+		$# $2				error/ok?
R$* $| $*		$: $1				no

a983 1

a1006 3
# pass to name server to make hostname canonical
R<?> $* $~P 		$:<?>  $[ $1 $2 $]
R$* .			$1			strip trailing dots
a1028 19
# is connection with client "good" enough? (done in server)
# input: ${verify} $| (MAIL|STARTTLS)
Stls_client
R$* $| $*	$@@ $>"tls_connection" $1

# is connection with server "good" enough? (done in client)
# input: ${verify}
Stls_server
R$*		$@@ $>"tls_connection" $1

Stls_connection
RSOFTWARE	$#error $@@ 4.7.0 $: "403 TLS handshake."

SRelayAuth
# authenticated?
R$* $| OK		$: $1
R$* $| $*		$@@ NO		not authenticated


d1043 1
a1043 1
#####  $Id: local.m4,v 8.50.16.2 2000/09/17 17:04:22 gshapiro Exp $  #####
d1092 1
a1092 1
#####  $Id: smtp.m4,v 8.56.2.1.2.3 2000/09/25 13:53:27 ca Exp $  #####
d1166 1
a1166 1
		A=TCP $h
d1169 1
a1169 1
		A=TCP $h
d1172 1
a1172 1
		A=TCP $h
d1175 1
a1175 1
		A=TCP $h
d1178 1
a1178 2
		A=TCP $h

@


1.1.1.3
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@d2 1
a2 1
# Copyright (c) 1998-2001 Sendmail, Inc. and its suppliers.
d19 2
a20 2
##### built by ca@@wiz.smi.sendmail.com on Fri Sep 7 18:32:11 PDT 2001
##### in /extra/home/ca/sm-8.12.0/OpenSource/sendmail-8.12.0/cf/cf
a23 4
#####
#####	DO NOT EDIT THIS FILE!  Only edit the source .mc file.
#####
######################################################################
d26 1
a26 1
#####  $Id: cfhead.m4,v 8.107 2001/07/22 03:25:37 ca Exp $  #####
d36 2
a37 1
#####  $Id: use_cw_file.m4,v 8.11 2001/08/26 20:58:57 gshapiro Exp $  #####
d40 1
a41 1
#####  $Id: proto.m4,v 8.620 2001/08/20 00:55:08 ca Exp $  #####
d43 2
a44 2
# level 10 config file format
V10/Berkeley
a58 4
# my LDAP cluster
# need to set this before any LDAP lookups are done (including classes)
#D{sendmailMTACluster}$m

d84 2
a85 2
Kresolve host -a<OKR> -T<TEMP>
C{ResOk}OKR
d94 2
d97 2
a98 2


d108 1
a108 2
C{E}root

d110 2
d120 1
a120 1
DZ8.12.0
d131 1
a131 1
#O EightBitMode=pass8
d157 5
a170 3
# queue file mode (qf files)
#O QueueFileMode=0600

d227 1
a227 7
#O ClientPortOptions=Family=inet, Address=0.0.0.0

# Modifiers to define {daemon_flags} for direct submissions
#O DirectSubmissionModifiers

# Use as mail submission program? See sendmail/SECURITY
#O UseMSP
a237 21
# limit on number of concurrent queue runners
#O MaxQueueChildren

# maximum number of queue-runners per queue-grouping with multiple queues
#O MaxRunnersPerQueue=1

# priority of queue runners (nice(3))
#O NiceQueueRun

# shall we sort the queue by hostname first?
#O QueueSortOrder=priority

# minimum time in queue before retry
#O MinQueueAge=30m

# how many jobs can you process in the queue?
#O MaxQueueRunSize=10000

# perform initial split of envelope without checking MX records
#O FastSplit=1

a240 3
# key for shared memory; 0 to turn off
#O SharedMemoryKey=0

a243 1
#O Timeout.aconnect=0s
a272 6
#O Timeout.lhlo=2m
#O Timeout.auth=10m
#O Timeout.starttls=1h

# time for DeliverBy; extension disabled if less than 0
#O DeliverByMin=0
a306 3
# load average at which we delay connections; 0 means no limit
#O DelayLA=0

d325 6
d334 1
a334 1
# service switch file (name hardwired on Solaris, Ultrix, OSF/1, others)
d352 3
a379 1
# True (the default) means they are not trustworthy.
a381 1

a393 4
# limit the rate recipients per SMTP envelope are accepted
# once the threshold number of recipients have been rejected
#O BadRcptThrottle=20

a429 3
# lookup type to find information about local mailboxes
#O MailboxDatabase=pw

d431 1
a431 1
#O AuthMechanisms=EXTERNAL GSSAPI KERBEROS_V4 DIGEST-MD5 CRAM-MD5
a438 9
# SMTP AUTH maximum encryption strength
#O AuthMaxBits

# SMTP STARTTLS server options
#O TLSSrvOptions

# Input mail filters
#O InputMailFilters

a457 3
############################
# QUEUE GROUP DEFINITIONS  #
############################
d486 1
a486 1
	$.$?{auth_type}(authenticated$?{auth_ssf} bits=${auth_ssf}$.)
d488 1
a488 1
	(version=${tls_version} cipher=${cipher} bits=${cipher_bits} verify=${verify})$.$?u
a521 1
R$* [ IPv6 : $+ ] <@@>	$: $1 [ IPv6 : $2 ]		unmark IPv6 addr
d524 1
a543 1
R@@ [ $* ] : $+		$2
d555 2
d583 7
a589 2
# check for IPv4/IPv6 domain literal
R$* < @@ [ $+ ] > $*		$: $1 < @@@@ [ $2 ] > $3		mark [addr]
d675 1
a675 1
R$* : $* ; <@@>		$#error $@@ 5.1.3 $: "553 List:; syntax illegal for recipient addresses"
d677 1
a677 2
R<@@ $+>			$#error $@@ 5.1.3 $: "553 User address required"
R$+ <@@>			$#error $@@ 5.1.3 $: "553 Hostname required"
d679 2
a680 5
R<> $* < @@ [ $* ] : $+ > $*	$1 < @@ [ $2 ] : $3 > $4
R<> $* < @@ [ $* ] , $+ > $*	$1 < @@ [ $2 ] , $3 > $4
R<> $* < @@ [ $* ] $+ > $*	$#error $@@ 5.1.2 $: "553 Invalid address"
R<> $* < @@ [ $+ ] > $*		$1 < @@ [ $2 ] > $3
R<> $* <$* : $* > $*	$#error $@@ 5.1.3 $: "553 Colon illegal in host name part"
d682 3
a684 6
R$* < @@ . $* > $*	$#error $@@ 5.1.2 $: "553 Invalid host name"
R$* < @@ $* .. $* > $*	$#error $@@ 5.1.2 $: "553 Invalid host name"
R$* < @@ $* @@ > $*	$#error $@@ 5.1.2 $: "553 Invalid route address"
R$* @@ $* < @@ $* > $*	$#error $@@ 5.1.3 $: "553 Invalid route address"
R$* , $~O $*		$#error $@@ 5.1.3 $: "553 Invalid route address"

d690 1
a690 1
R< @@ $+ >		$#error $@@ 5.1.3 $: "553 User address required"
d693 1
a693 1
R< @@ *LOCAL* >		$#error $@@ 5.1.3 $: "553 User address required"
d707 3
a709 1
R$* < @@ [ $+ ] : > $*		$#esmtp $@@ [$2] $: $1 < @@ [$2] > $3	no smarthost: send
a743 1
R$+ $| $#ok		$@@ $1			no change
d758 3
a762 1

a768 1

d773 1
a773 3

R< $~[ : $+ > $+	$: $>MailerToTriple < $1 : $2 > $3 < @@ $2 >

d786 2
a787 2
R< $~[ : $+ @@ $+ > $*<$*>$*	$# $1 $@@ $3 $: $2<@@$3>	use literal user
R< $~[ : $+ > $*		$# $1 $@@ $2 $: $3	try qualified mailer
d789 1
d825 11
a835 1
R$* < @@ *LOCAL* >	$@@ $1 < @@ $j . >
d897 1
a900 1

d902 1
a902 1
R<$+> $*			$@@ $2
d963 1
a963 1
R<? $+> <$+>		$#error $@@ 5.5.4 $: "553 Real domain name required for sender address"
d976 1
a976 1
R$* u $* $| <?> $*	$: <OKR> $3
d980 1
a980 1
R<? $+> $*		$#error $@@ 5.5.4 $: "553 Domain name required for sender address " $&f
d984 1
a984 1
R<$={ResOk}> $*		$@@ <OKR>	domain ok: stop
d986 1
a986 1
R<PERM> $*		$#error $@@ 5.1.8 $: "553 Domain of sender address " $&f " does not exist"
a998 3
# empty address?
R<>			$#error $@@ nouser $: "553 User address required"
R$@@			$#error $@@ nouser $: "553 User address required"
d1005 1
a1005 13
######################################################################
R$*			$: $1 $| @@ $>"Rcpt_ok" $1
R$* $| @@ $#TEMP $+	$: $1 $| T $2
R$* $| @@ $#$*		$#$2
R$* $| @@ RELAY		$@@ RELAY
R$* $| @@ $*		$: O $| $>"Relay_ok" $1
R$* $| T $+		$: T $2 $| $>"Relay_ok" $1
R$* $| $#TEMP $+	$#error $2
R$* $| $#$*		$#$2
R$* $| RELAY		$@@ RELAY
R T $+ $| $*		$#error $1
# anything else is bogus
R$*			$#error $@@ 5.7.1 $: "550 Relaying denied"
a1007 5
######################################################################
### Rcpt_ok: is the recipient ok?
######################################################################
SRcpt_ok
R$*			$: $>ParseRecipient $1		strip relayable hosts
d1011 4
d1016 2
a1017 9
# authenticated via TLS?
R$*			$: $1 $| $>RelayTLS	client authenticated?
R$* $| $# $+		$# $2			error/ok?
R$* $| $*		$: $1			no

R$*			$: $1 $| $>"Local_Relay_Auth" $&{auth_type}
R$* $| $# $*		$# $2
R$* $| NO		$: $1
R$* $| $*		$: $1 $| $&{auth_type}
d1019 1
a1019 1
R$* $| $={TrustAuthMech}	$# RELAY
d1022 2
a1023 2
R$+ < @@ $=w >		$@@ RELAY
R$+ < @@ $* $=R >	$@@ RELAY
d1031 1
a1031 1
R<?> $+			$@@ RELAY
a1033 4
######################################################################
### Relay_ok: is the relay/sender ok?
######################################################################
SRelay_ok
d1037 3
a1039 3
R$@@			$@@ RELAY		originated locally
R0			$@@ RELAY		originated locally
R$=R $*			$@@ RELAY		relayable IP address
d1041 1
a1041 1
R$=w			$@@ RELAY		... and see if it is local
d1046 1
a1046 1
R<TEMP>			$#TEMP $@@ 4.7.1 $: "450 Relaying temporarily denied. Cannot resolve PTR record for " $&{client_addr}
d1049 1
a1049 2
R$*			$: <@@> $&{client_name}
R<@@>			$@@ RELAY
d1051 1
a1051 2
R<@@> $* $=P 		$:<?>  $1 $2
R<@@> $+			$:<?>  $[ $1 $]
d1053 3
a1055 3
R<?> $=w		$@@ RELAY
R<?> $* $=R			$@@ RELAY

d1057 2
d1061 1
a1061 8
######################################################################
###  trust_auth: is user trusted to authenticate as someone else?
###
###	Parameters:
###		$1: AUTH= parameter from MAIL command
######################################################################

SLocal_trust_auth
d1072 1
a1072 7
######################################################################
###  Relay_Auth: allow relaying based on authentication?
###
###	Parameters:
###		$1: ${auth_type}
######################################################################
SLocal_Relay_Auth
d1075 2
a1076 8

######################################################################
###  tls_client: is connection with client "good" enough?
###	(done in server)
###
###	Parameters:
###		${verify} $| (MAIL|STARTTLS)
######################################################################
d1078 1
a1078 1
R$* $| $*	$@@ $>"TLS_connection" $1
d1080 2
a1081 7
######################################################################
###  tls_server: is connection with server "good" enough?
###	(done in client)
###
###	Parameter:
###		${verify}
######################################################################
d1083 1
a1083 1
R$*		$@@ $>"TLS_connection" $1
d1085 1
a1085 8
######################################################################
###  TLS_connection: is TLS connection "good" enough?
###
###	Parameters:
###		${verify}
###		Requirement: RHS from access map, may be ? for none.
######################################################################
STLS_connection
d1088 1
a1088 8

######################################################################
###  RelayTLS: allow relaying based on TLS authentication
###
###	Parameters:
###		none
######################################################################
SRelayTLS
d1090 2
a1092 17
######################################################################
###  authinfo: lookup authinfo in the access map
###
###	Parameters:
###		$1: {server_name}
###		$2: {server_addr}
######################################################################
Sauthinfo

#
######################################################################
######################################################################
#####
#####			MAIL FILTER DEFINITIONS
#####
######################################################################
######################################################################
d1108 1
a1108 1
#####  $Id: local.m4,v 8.58 2000/10/26 01:58:29 ca Exp $  #####
d1113 1
a1113 1
SEnvFromL
d1122 1
a1122 1
SEnvToL
a1123 3
R$+ + $*		$: < $&{addr_type} > $1 + $2	mark with addr type
R<e s> $+ + $*		$: $1			remove +detail for sender
R< $* > $+		$: $2			else remove mark
d1128 1
a1128 1
SHdrFromL
d1137 1
a1137 1
SHdrToL
d1144 1
a1144 1
SAddDomain
d1157 1
a1157 1
#####  $Id: smtp.m4,v 8.64 2001/04/03 01:52:54 gshapiro Exp $  #####
d1162 1
a1162 1
SMasqSMTP
d1169 1
a1169 1
SPseudoToReal
d1185 1
a1185 1
R$+ < @@ $~[ $* : $+ >	$@@ $1 < @@ $4 >			strip mailer: part
d1192 1
a1192 1
SEnvFromSMTP
d1203 1
a1203 1
SEnvToSMTP
d1211 1
a1211 1
SHdrFromSMTP
d1225 1
a1225 1
SMasqRelay
@


