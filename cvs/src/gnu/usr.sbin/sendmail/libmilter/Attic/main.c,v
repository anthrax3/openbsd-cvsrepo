head	1.18;
access;
symbols
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.12
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.10
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.6
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.6
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SENDMAIL_8_12_0:1.1.1.3
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	SENDMAIL_8_11_2:1.1.1.2
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	SENDMAIL_8_10_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.09.17.18.49.50;	author matthieu;	state dead;
branches;
next	1.17;
commitid	M7i5giHIoz3DMlTU;

1.17
date	2014.02.07.21.24.59;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2011.05.17.15.54.23;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.04.18.34.05;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.04.13.17.35;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.24.03.59.25;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.19.01.41.13;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.03.17.31.21;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.01.19.59.21;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.26.04.48.55;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.03.17.25.46;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.18.00.49.27;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.14.03.21.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.11.19.02.49;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.29.01.31.12;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.15.21.09.02;	author millert;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.04.02.19.05.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.02.19.05.58;	author millert;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	2001.01.15.20.52.43;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.09.11.18.55.52;	author millert;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	2001.05.31.00.28.50;	author miod;	state Exp;
branches;
next	;

1.2.2.1
date	2001.05.31.01.47.54;	author jason;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Bye.
@
text
@/*
 *  Copyright (c) 1999-2003, 2006, 2007 Proofpoint, Inc. and its suppliers.
 *	All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: main.c,v 8.85 2013/11/22 20:51:36 ca Exp $")

#define _DEFINE	1
#include "libmilter.h"
#include <fcntl.h>
#include <sys/stat.h>


static smfiDesc_ptr smfi = NULL;

/*
**  SMFI_REGISTER -- register a filter description
**
**	Parameters:
**		smfilter -- description of filter to register
**
**	Returns:
**		MI_SUCCESS/MI_FAILURE
*/

int
smfi_register(smfilter)
	smfiDesc_str smfilter;
{
	size_t len;

	if (smfi == NULL)
	{
		smfi = (smfiDesc_ptr) malloc(sizeof *smfi);
		if (smfi == NULL)
			return MI_FAILURE;
	}
	(void) memcpy(smfi, &smfilter, sizeof *smfi);
	if (smfilter.xxfi_name == NULL)
		smfilter.xxfi_name = "Unknown";

	len = strlen(smfilter.xxfi_name) + 1;
	smfi->xxfi_name = (char *) malloc(len);
	if (smfi->xxfi_name == NULL)
		return MI_FAILURE;
	(void) sm_strlcpy(smfi->xxfi_name, smfilter.xxfi_name, len);

	/* compare milter version with hard coded version */
	if ((SM_LM_VRS_MAJOR(smfi->xxfi_version) != SM_LM_VRS_MAJOR(SMFI_VERSION) ||
	     SM_LM_VRS_MINOR(smfi->xxfi_version) != SM_LM_VRS_MINOR(SMFI_VERSION)) &&
	    smfi->xxfi_version != 2 &&
	    smfi->xxfi_version != 3 &&
	    smfi->xxfi_version != 4)
	{
		/* hard failure for now! */
		smi_log(SMI_LOG_ERR,
			"%s: smfi_register: version mismatch application: %d != milter: %d",
			smfi->xxfi_name, smfi->xxfi_version,
			(int) SMFI_VERSION);

		/* XXX how about smfi? */
		free(smfi->xxfi_name);
		return MI_FAILURE;
	}

	return MI_SUCCESS;
}

/*
**  SMFI_STOP -- stop milter
**
**	Parameters:
**		none.
**
**	Returns:
**		success.
*/

int
smfi_stop()
{
	mi_stop_milters(MILTER_STOP);
	return MI_SUCCESS;
}

/*
**  Default values for some variables.
**	Most of these can be changed with the functions below.
*/

static int dbg = 0;
static char *conn = NULL;
static int timeout = MI_TIMEOUT;
static int backlog = MI_SOMAXCONN;

/*
**  SMFI_OPENSOCKET -- try the socket setup to make sure we'll be
**		       able to start up
**
**	Parameters:
**		rmsocket -- if true, instructs libmilter to attempt
**			to remove the socket before creating it;
**			only applies for "local:" or "unix:" sockets
**
**	Return:
**		MI_SUCCESS/MI_FAILURE
*/

int
smfi_opensocket(rmsocket)
	bool rmsocket;
{
	if (smfi == NULL || conn == NULL)
		return MI_FAILURE;

	return mi_opensocket(conn, backlog, dbg, rmsocket, smfi);
}

/*
**  SMFI_SETDBG -- set debug level.
**
**	Parameters:
**		odbg -- new debug level.
**
**	Returns:
**		MI_SUCCESS
*/

int
smfi_setdbg(odbg)
	int odbg;
{
	dbg = odbg;
	return MI_SUCCESS;
}

/*
**  SMFI_SETTIMEOUT -- set timeout (for read/write).
**
**	Parameters:
**		otimeout -- new timeout.
**
**	Returns:
**		MI_SUCCESS
*/

int
smfi_settimeout(otimeout)
	int otimeout;
{
	timeout = otimeout;
	return MI_SUCCESS;
}

/*
**  SMFI_SETCONN -- set connection information (socket description)
**
**	Parameters:
**		oconn -- new connection information.
**
**	Returns:
**		MI_SUCCESS/MI_FAILURE
*/

int
smfi_setconn(oconn)
	char *oconn;
{
	size_t l;

	if (oconn == NULL || *oconn == '\0')
		return MI_FAILURE;
	l = strlen(oconn) + 1;
	if ((conn = (char *) malloc(l)) == NULL)
		return MI_FAILURE;
	if (sm_strlcpy(conn, oconn, l) >= l)
		return MI_FAILURE;
	return MI_SUCCESS;
}

/*
**  SMFI_SETBACKLOG -- set backlog
**
**	Parameters:
**		obacklog -- new backlog.
**
**	Returns:
**		MI_SUCCESS/MI_FAILURE
*/

int
smfi_setbacklog(obacklog)
	int obacklog;
{
	if (obacklog <= 0)
		return MI_FAILURE;
	backlog = obacklog;
	return MI_SUCCESS;
}


/*
**  SMFI_MAIN -- setup milter connnection and start listener.
**
**	Parameters:
**		none.
**
**	Returns:
**		MI_SUCCESS/MI_FAILURE
*/

int
smfi_main()
{
	int r;

	(void) signal(SIGPIPE, SIG_IGN);
	if (conn == NULL)
	{
		smi_log(SMI_LOG_FATAL, "%s: missing connection information",
			smfi->xxfi_name);
		return MI_FAILURE;
	}

	(void) atexit(mi_clean_signals);
	if (mi_control_startup(smfi->xxfi_name) != MI_SUCCESS)
	{
		smi_log(SMI_LOG_FATAL,
			"%s: Couldn't start signal thread",
			smfi->xxfi_name);
		return MI_FAILURE;
	}
	r = MI_MONITOR_INIT();

	/* Startup the listener */
	if (mi_listener(conn, dbg, smfi, timeout, backlog) != MI_SUCCESS)
		r = MI_FAILURE;

	return r;
}

@


1.17
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.16
log
@Update to sendmail 8.14.5
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2003, 2006, 2007 Sendmail, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.84 2008/09/02 05:37:06 ca Exp $")
@


1.15
log
@Update to sendmail-8.14.3
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.83 2007/04/23 22:22:50 ca Exp $")
d55 2
a56 1
	if (smfi->xxfi_version != SMFI_VERSION &&
@


1.14
log
@Update to sendmail-8.14.0.  OK mbalmer@@
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2003, 2006 Sendmail, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.81 2006/11/02 18:31:43 ca Exp $")
d55 4
a58 1
	if (smfi->xxfi_version != SMFI_VERSION)
@


1.13
log
@Update to sendmail.8.13.0
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2003 Sendmail, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.79 2003/10/20 22:25:09 ca Exp $")
d235 1
a235 1
	r = MI_SUCCESS;
@


1.12
log
@Update to sendmail 8.12.11.  I've been runninga beta version of this for
some time without problems.  See the RELEASE_NOTES for the change log.
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.64.2.13 2003/10/20 22:27:13 ca Exp $")
a97 1
#if _FFR_SMFI_OPENSOCKET
d100 1
a100 1
**		able to start up
a119 1
#endif /* _FFR_SMFI_OPENSOCKET */
d240 1
@


1.11
log
@Update to Sendmail 8.12.8; fixes a buffer overflow in the envelope
comments processing which may allow an attacker to gain root privileges.
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.64.2.10 2003/01/23 22:34:24 ca Exp $")
d89 1
a89 1
**  default values for some variables.
d104 3
a106 1
**		None.
d113 2
a114 1
smfi_opensocket()
d119 1
a119 1
	return mi_opensocket(conn, backlog, dbg, smfi);
@


1.10
log
@update to sendmail 8.12.7
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2002 Sendmail, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.64.2.8 2002/12/18 23:13:45 ca Exp $")
@


1.9
log
@sendmail 8.12.5
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.64 2002/06/04 02:32:32 geir Exp $")
d101 1
a101 1
**                     able to start up
d103 2
a104 2
**  	Parameters:
**  		None.
d106 2
a107 2
**  	Return:
**  		MI_SUCCESS/MI_FAILURE
a238 1

d241 1
@


1.8
log
@Update to sendmail-8.12.4
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.63 2002/04/30 23:52:24 msk Exp $")
@


1.7
log
@update to sendmail 8.12.3
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.55 2002/02/25 17:54:41 gshapiro Exp $")
d96 23
a118 1
static int backlog= MI_SOMAXCONN;
@


1.6
log
@update to sendmail-8.12.2
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.53 2001/11/29 02:21:02 ca Exp $")
d164 1
a164 1
**		odbg -- new backlog.
@


1.5
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.52 2001/09/11 04:04:45 gshapiro Exp $")
d180 1
d194 2
d212 1
d216 1
a216 1
		return MI_FAILURE;
d218 1
a218 1
	return MI_SUCCESS;
@


1.4
log
@merge in sendmail 8.12.0 with BSD Makefiles and mdoc man pages
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: main.c,v 8.49 2001/04/21 01:18:16 ca Exp $")
d71 1
a71 1
/*
@


1.3
log
@Update to sendmail 8.11.4:
    8.11.4 revamps signal handling within the MTA in order to reduce
    the likelihood of a race condition that can lead to heap
    corruption as described in Michal Zalewski's advisory.  The
    problems discussed in the advisory are not currently known to
    be exploitable but we recommend upgrading to 8.11.4 in case a
    method is found to exploit the signal handling race condition.
    8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d11 2
a12 3
#ifndef lint
static char id[] = "@@(#)$Sendmail: main.c,v 8.34.4.11 2001/05/07 22:06:37 gshapiro Exp $";
#endif /* ! lint */
a13 1
#if _FFR_MILTER
d52 1
a52 1
	(void) strlcpy(smfi->xxfi_name, smfilter.xxfi_name, len);
d62 3
d88 5
d98 10
d116 10
d134 10
d155 1
a155 1
	if (strlcpy(conn, oconn, l) >= l)
d160 10
d180 9
d193 1
a193 2

	signal(SIGPIPE, SIG_IGN);
a209 1

a215 1
#endif /* _FFR_MILTER */
@


1.2
log
@sendmail 8.11.2 with BSD Makefiles
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2000 Sendmail, Inc. and its suppliers.
d12 1
a12 1
static char id[] = "@@(#)$Sendmail: main.c,v 8.34.4.9 2000/09/09 02:23:03 gshapiro Exp $";
d134 1
d138 1
d155 1
@


1.2.2.1
log
@Pull in patch from current:
Fix (millert), Errata 001:
Update to sendmail 8.11.4:
    8.11.4 revamps signal handling within the MTA in order to reduce
    the likelihood of a race condition that can lead to heap
    corruption as described in Michal Zalewski's advisory.  The
    problems discussed in the advisory are not currently known to
    be exploitable but we recommend upgrading to 8.11.4 in case a
    method is found to exploit the signal handling race condition.
    8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d12 1
a12 1
static char id[] = "@@(#)$Sendmail: main.c,v 8.34.4.11 2001/05/07 22:06:37 gshapiro Exp $";
a133 1

a136 1

a152 1

@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
static char id[] = "@@(#)$Sendmail: main.c,v 8.34 2000/02/11 02:43:45 gshapiro Exp $";
d21 1
d46 1
a46 1
	(void)memcpy(smfi, &smfilter, sizeof *smfi);
d55 29
d90 1
d125 10
d142 1
a142 1
		exit(EX_DATAERR);
d151 1
a151 1
		exit(EX_OSERR);
d155 2
a156 2
	if (mi_listener(conn, dbg, smfi, timeout) != MI_SUCCESS)
		return(MI_FAILURE);
d158 1
a158 1
	return(MI_SUCCESS);
@


1.1.1.1
log
@stock sendmail 8.10.0 with $Id -> $Sendmail
@
text
@@


1.1.1.1.4.1
log
@Pull in patch from current:
Errata(028):
The signal handlers in sendmail contain code that is unsafe in the
context of a signal handler.  This leads to potentially serious race
conditions.  At the moment this is a theoretical attack only and can
only be exploited on the local host (if at all).
Fix(millert):
Update to sendmail 8.11.4:
8.11.4 revamps signal handling within the MTA in order to reduce
the likelihood of a race condition that can lead to heap
corruption as described in Michal Zalewski's advisory.  The
problems discussed in the advisory are not currently known to
be exploitable but we recommend upgrading to 8.11.4 in case a
method is found to exploit the signal handling race condition.
8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d12 1
a12 1
static char id[] = "@@(#)$Sendmail: main.c,v 8.34.4.11 2001/05/07 22:06:37 gshapiro Exp $";
a20 1

d45 1
a45 1
	(void) memcpy(smfi, &smfilter, sizeof *smfi);
a53 29

	/* compare milter version with hard coded version */
	if (smfi->xxfi_version != SMFI_VERSION)
	{
		/* hard failure for now! */
		smi_log(SMI_LOG_ERR,
			"%s: smfi_register: version mismatch application: %d != milter: %d",
			smfi->xxfi_name, smfi->xxfi_version,
			(int) SMFI_VERSION);
		return MI_FAILURE;
	}

	return MI_SUCCESS;
}

/*
**  SMFI_STOP -- stop milter
**
**	Parameters:
**		none.
**
**	Returns:
**		success.
*/

int
smfi_stop()
{
	mi_stop_milters(MILTER_STOP);
a59 1
static int backlog= MI_SOMAXCONN;
a93 11
smfi_setbacklog(obacklog)
	int obacklog;
{
	if (obacklog <= 0)
		return MI_FAILURE;
	backlog = obacklog;
	return MI_SUCCESS;
}


int
a95 1

d101 1
a101 1
		return MI_FAILURE;
d110 1
a110 1
		return MI_FAILURE;
a112 1

d114 2
a115 2
	if (mi_listener(conn, dbg, smfi, timeout, backlog) != MI_SUCCESS)
		return MI_FAILURE;
d117 1
a117 1
	return MI_SUCCESS;
@


1.1.1.2
log
@sendmail 8.11.2
@
text
@d12 1
a12 1
static char id[] = "@@(#)$Id: main.c,v 8.34.4.9 2000/09/09 02:23:03 gshapiro Exp $";
a20 1

d45 1
a45 1
	(void) memcpy(smfi, &smfilter, sizeof *smfi);
a53 29

	/* compare milter version with hard coded version */
	if (smfi->xxfi_version != SMFI_VERSION)
	{
		/* hard failure for now! */
		smi_log(SMI_LOG_ERR,
			"%s: smfi_register: version mismatch application: %d != milter: %d",
			smfi->xxfi_name, smfi->xxfi_version,
			(int) SMFI_VERSION);
		return MI_FAILURE;
	}

	return MI_SUCCESS;
}

/*
**  SMFI_STOP -- stop milter
**
**	Parameters:
**		none.
**
**	Returns:
**		success.
*/

int
smfi_stop()
{
	mi_stop_milters(MILTER_STOP);
a59 1
static int backlog= MI_SOMAXCONN;
a93 10
smfi_setbacklog(obacklog)
	int obacklog;
{
	if (obacklog <= 0)
		return MI_FAILURE;
	backlog = obacklog;
	return MI_SUCCESS;
}

int
d101 1
a101 1
		return MI_FAILURE;
d110 1
a110 1
		return MI_FAILURE;
d114 2
a115 2
	if (mi_listener(conn, dbg, smfi, timeout, backlog) != MI_SUCCESS)
		return MI_FAILURE;
d117 1
a117 1
	return MI_SUCCESS;
@


1.1.1.3
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@d2 1
a2 1
 *  Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d11 3
a13 2
#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: main.c,v 8.49 2001/04/21 01:18:16 ca Exp $")
d15 1
d54 1
a54 1
	(void) sm_strlcpy(smfi->xxfi_name, smfilter.xxfi_name, len);
a63 3

		/* XXX how about smfi? */
		free(smfi->xxfi_name);
a86 5
/*
**  default values for some variables.
**	Most of these can be changed with the functions below.
*/

a91 10
/*
**  SMFI_SETDBG -- set debug level.
**
**	Parameters:
**		odbg -- new debug level.
**
**	Returns:
**		MI_SUCCESS
*/

a99 10
/*
**  SMFI_SETTIMEOUT -- set timeout (for read/write).
**
**	Parameters:
**		otimeout -- new timeout.
**
**	Returns:
**		MI_SUCCESS
*/

a107 10
/*
**  SMFI_SETCONN -- set connection information (socket description)
**
**	Parameters:
**		oconn -- new connection information.
**
**	Returns:
**		MI_SUCCESS/MI_FAILURE
*/

d119 1
a119 1
	if (sm_strlcpy(conn, oconn, l) >= l)
a123 10
/*
**  SMFI_SETBACKLOG -- set backlog
**
**	Parameters:
**		odbg -- new backlog.
**
**	Returns:
**		MI_SUCCESS/MI_FAILURE
*/

a133 10
/*
**  SMFI_MAIN -- setup milter connnection and start listener.
**
**	Parameters:
**		none.
**
**	Returns:
**		MI_SUCCESS/MI_FAILURE
*/

d137 1
a137 1
	(void) signal(SIGPIPE, SIG_IGN);
d160 1
@


