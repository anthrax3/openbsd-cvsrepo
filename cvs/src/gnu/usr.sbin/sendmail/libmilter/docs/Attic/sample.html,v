head	1.8;
access;
symbols
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.28
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.26
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.24
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.22
	OPENBSD_5_0:1.6.0.20
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.18
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.16
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	SENDMAIL_8_12_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2014.09.17.18.49.50;	author matthieu;	state dead;
branches;
next	1.7;
commitid	M7i5giHIoz3DMlTU;

1.7
date	2014.02.07.21.24.59;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.04.13.17.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.24.03.59.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.17.17.31.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.29.19.44.00;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.03.17.25.46;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.18.55.52;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.11.18.55.52;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Bye.
@
text
@<HTML>
<HEAD><TITLE>A Sample Filter</TITLE></HEAD>
<BODY>
<!--
$Sendmail: sample.html,v 1.23 2013/11/22 20:51:39 ca Exp $
-->
<H1>A Sample Filter</H1>

The following sample logs each message to a separate temporary file,
adds a recipient given with the -a flag,
and rejects a disallowed recipient address given with the -r flag.
It recognizes the following options:
<P>
<CENTER>
<TABLE border="1" cellpadding=2 cellspacing=1>
<TR><TD><CODE>-p port</CODE></TD><TD>The port through which the MTA will connect to the filter.</TD></TR>
<TR><TD><CODE>-t sec</CODE></TD><TD>The timeout value.</TD></TR>
<TR><TD><CODE>-r addr</CODE></TD><TD>A recipient to reject.</TD></TR>
<TR><TD><CODE>-a addr</CODE></TD><TD>A recipient to add.</TD></TR>
</TABLE>
</CENTER>
<HR>
<PRE>
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sysexits.h&gt;
#include &lt;unistd.h&gt;

#include "libmilter/mfapi.h"

#ifndef bool
# define bool	int
# define TRUE	1
# define FALSE	0
#endif /* ! bool */


struct mlfiPriv
{
	char	*mlfi_fname;
	char	*mlfi_connectfrom;
	char	*mlfi_helofrom;
	FILE	*mlfi_fp;
};

#define MLFIPRIV	((struct mlfiPriv *) <A href="smfi_getpriv.html">smfi_getpriv</A>(ctx))

extern sfsistat		mlfi_cleanup(SMFICTX *, bool);

/* recipients to add and reject (set with -a and -r options) */
char *add = NULL;
char *reject = NULL;

sfsistat
<A href="xxfi_connect.html">mlfi_connect</A>(ctx, hostname, hostaddr)
	 SMFICTX *ctx;
	 char *hostname;
	 _SOCK_ADDR *hostaddr;
{
	struct mlfiPriv *priv;
	char *ident;

	/* allocate some private memory */
	priv = malloc(sizeof *priv);
	if (priv == NULL)
	{
		/* can't accept this message right now */
		return SMFIS_TEMPFAIL;
	}
	memset(priv, '\0', sizeof *priv);

	/* save the private data */
	<A href="smfi_setpriv.html">smfi_setpriv</A>(ctx, priv);

	ident = <A href="smfi_getsymval.html">smfi_getsymval</A>(ctx, "_");
	if (ident == NULL)
		ident = "???";
	if ((priv-&gt;mlfi_connectfrom = strdup(ident)) == NULL)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	/* continue processing */
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_helo.html">mlfi_helo</A>(ctx, helohost)
	 SMFICTX *ctx;
	 char *helohost;
{
	size_t len;
	char *tls;
	char *buf;
	struct mlfiPriv *priv = MLFIPRIV;

	tls = <A href="smfi_getsymval.html">smfi_getsymval</A>(ctx, "{tls_version}");
	if (tls == NULL)
		tls = "No TLS";
	if (helohost == NULL)
		helohost = "???";
	len = strlen(tls) + strlen(helohost) + 3;
	if ((buf = (char*) malloc(len)) == NULL)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}
	snprintf(buf, len, "%s, %s", helohost, tls);
	if (priv-&gt;mlfi_helofrom != NULL)
		free(priv-&gt;mlfi_helofrom);
	priv-&gt;mlfi_helofrom = buf;

	/* continue processing */
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_envfrom.html">mlfi_envfrom</A>(ctx, argv)
	 SMFICTX *ctx;
	 char **argv;
{
	int fd = -1;
	int argc = 0;
	struct mlfiPriv *priv = MLFIPRIV;
	char *mailaddr = <A href="smfi_getsymval.html">smfi_getsymval</A>(ctx, "{mail_addr}");

	/* open a file to store this message */
	if ((priv-&gt;mlfi_fname = strdup("/tmp/msg.XXXXXX")) == NULL)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	if ((fd = mkstemp(priv-&gt;mlfi_fname)) == -1)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	if ((priv-&gt;mlfi_fp = fdopen(fd, "w+")) == NULL)
	{
		(void) close(fd);
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	/* count the arguments */
	while (*argv++ != NULL)
		++argc;

	/* log the connection information we stored earlier: */
	if (fprintf(priv-&gt;mlfi_fp, "Connect from %s (%s)\n\n",
		    priv-&gt;mlfi_helofrom, priv-&gt;mlfi_connectfrom) == EOF)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}
	/* log the sender */
	if (fprintf(priv-&gt;mlfi_fp, "FROM %s (%d argument%s)\n",
		    mailaddr ? mailaddr : "???", argc,
		    (argc == 1) ? "" : "s") == EOF)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	/* continue processing */
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_envrcpt.html">mlfi_envrcpt</A>(ctx, argv)
	 SMFICTX *ctx;
	 char **argv;
{
	struct mlfiPriv *priv = MLFIPRIV;
	char *rcptaddr = <A href="smfi_getsymval.html">smfi_getsymval</A>(ctx, "{rcpt_addr}");
	int argc = 0;

	/* count the arguments */
	while (*argv++ != NULL)
		++argc;

	/* log this recipient */
	if (reject != NULL && rcptaddr != NULL &&
	    (strcasecmp(rcptaddr, reject) == 0))
	{
		if (fprintf(priv-&gt;mlfi_fp, "RCPT %s -- REJECTED\n",
			    rcptaddr) == EOF)
		{
			(void) mlfi_cleanup(ctx, FALSE);
			return SMFIS_TEMPFAIL;
		}
		return SMFIS_REJECT;
	}
	if (fprintf(priv-&gt;mlfi_fp, "RCPT %s (%d argument%s)\n",
		    rcptaddr ? rcptaddr : "???", argc,
		    (argc == 1) ? "" : "s") == EOF)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	/* continue processing */
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_header.html">mlfi_header</A>(ctx, headerf, headerv)
	 SMFICTX *ctx;
	 char *headerf;
	 unsigned char *headerv;
{
	/* write the header to the log file */
	if (fprintf(MLFIPRIV-&gt;mlfi_fp, "%s: %s\n", headerf, headerv) == EOF)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	/* continue processing */
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_eoh.html">mlfi_eoh</A>(ctx)
	 SMFICTX *ctx;
{
	/* output the blank line between the header and the body */
	if (fprintf(MLFIPRIV-&gt;mlfi_fp, "\n") == EOF)
	{
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	/* continue processing */
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_body.html">mlfi_body</A>(ctx, bodyp, bodylen)
	 SMFICTX *ctx;
	 unsigned char *bodyp;
	 size_t bodylen;
{
        struct mlfiPriv *priv = MLFIPRIV;

	/* output body block to log file */
	if (fwrite(bodyp, bodylen, 1, priv-&gt;mlfi_fp) != 1)
	{
		/* write failed */
		fprintf(stderr, "Couldn't write file %s: %s\n",
			priv-&gt;mlfi_fname, strerror(errno));
		(void) mlfi_cleanup(ctx, FALSE);
		return SMFIS_TEMPFAIL;
	}

	/* continue processing */
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_eom.html">mlfi_eom</A>(ctx)
	 SMFICTX *ctx;
{
	bool ok = TRUE;

	/* change recipients, if requested */
	if (add != NULL)
		ok = (<A href="smfi_addrcpt.html">smfi_addrcpt</A>(ctx, add) == MI_SUCCESS);
	return mlfi_cleanup(ctx, ok);
}

sfsistat
<A href="xxfi_abort.html">mlfi_abort</A>(ctx)
	 SMFICTX *ctx;
{
	return mlfi_cleanup(ctx, FALSE);
}

sfsistat
mlfi_cleanup(ctx, ok)
	 SMFICTX *ctx;
	 bool ok;
{
	sfsistat rstat = SMFIS_CONTINUE;
	struct mlfiPriv *priv = MLFIPRIV;
	char *p;
	char host[512];
	char hbuf[1024];

	if (priv == NULL)
		return rstat;

	/* close the archive file */
	if (priv-&gt;mlfi_fp != NULL && fclose(priv-&gt;mlfi_fp) == EOF)
	{
		/* failed; we have to wait until later */
		fprintf(stderr, "Couldn't close archive file %s: %s\n",
			priv-&gt;mlfi_fname, strerror(errno));
		rstat = SMFIS_TEMPFAIL;
		(void) unlink(priv-&gt;mlfi_fname);
	}
	else if (ok)
	{
		/* add a header to the message announcing our presence */
		if (gethostname(host, sizeof host) &lt; 0)
			snprintf(host, sizeof host, "localhost");
		p = strrchr(priv-&gt;mlfi_fname, '/');
		if (p == NULL)
			p = priv-&gt;mlfi_fname;
		else
			p++;
		snprintf(hbuf, sizeof hbuf, "%s@@%s", p, host);
		if (<A href="smfi_addheader.html">smfi_addheader</A>(ctx, "X-Archived", hbuf) != MI_SUCCESS)
		{
			/* failed; we have to wait until later */
			fprintf(stderr,
				"Couldn't add header: X-Archived: %s\n",
				hbuf);
			ok = FALSE;
			rstat = SMFIS_TEMPFAIL;
			(void) unlink(priv-&gt;mlfi_fname);
		}
	}
	else
	{
		/* message was aborted -- delete the archive file */
		fprintf(stderr, "Message aborted.  Removing %s\n",
			priv-&gt;mlfi_fname);
		rstat = SMFIS_TEMPFAIL;
		(void) unlink(priv-&gt;mlfi_fname);
	}

	/* release private memory */
	if (priv-&gt;mlfi_fname != NULL)
		free(priv-&gt;mlfi_fname);

	/* return status */
	return rstat;
}

sfsistat
<A href="xxfi_close.html">mlfi_close</A>(ctx)
	 SMFICTX *ctx;
{
	struct mlfiPriv *priv = MLFIPRIV;

	if (priv == NULL)
		return SMFIS_CONTINUE;
	if (priv-&gt;mlfi_connectfrom != NULL)
		free(priv-&gt;mlfi_connectfrom);
	if (priv-&gt;mlfi_helofrom != NULL)
		free(priv-&gt;mlfi_helofrom);
	free(priv);
	<A href="smfi_setpriv.html">smfi_setpriv</A>(ctx, NULL);
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_unknown.html">mlfi_unknown</A>(ctx, cmd)
	SMFICTX *ctx;
	char *cmd;
{
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_data.html">mlfi_data</A>(ctx)
	SMFICTX *ctx;
{
	return SMFIS_CONTINUE;
}

sfsistat
<A href="xxfi_negotiate.html">mlfi_negotiate</A>(ctx, f0, f1, f2, f3, pf0, pf1, pf2, pf3)
	SMFICTX *ctx;
	unsigned long f0;
	unsigned long f1;
	unsigned long f2;
	unsigned long f3;
	unsigned long *pf0;
	unsigned long *pf1;
	unsigned long *pf2;
	unsigned long *pf3;
{
	return SMFIS_ALL_OPTS;
}

struct smfiDesc smfilter =
{
	"SampleFilter",	/* filter name */
	SMFI_VERSION,	/* version code -- do not change */
	SMFIF_ADDHDRS|SMFIF_ADDRCPT,
			/* flags */
	<A href="xxfi_connect.html">mlfi_connect</A>,	/* connection info filter */
	<A href="xxfi_helo.html">mlfi_helo</A>,	/* SMTP HELO command filter */
	<A href="xxfi_envfrom.html">mlfi_envfrom</A>,	/* envelope sender filter */
	<A href="xxfi_envrcpt.html">mlfi_envrcpt</A>,	/* envelope recipient filter */
	<A href="xxfi_header.html">mlfi_header</A>,	/* header filter */
	<A href="xxfi_eoh.html">mlfi_eoh</A>,	/* end of header */
	<A href="xxfi_body.html">mlfi_body</A>,	/* body block filter */
	<A href="xxfi_eom.html">mlfi_eom</A>,	/* end of message */
	<A href="xxfi_abort.html">mlfi_abort</A>,	/* message aborted */
	<A href="xxfi_close.html">mlfi_close</A>,	/* connection cleanup */
	<A href="xxfi_unknown.html">mlfi_unknown</A>,	/* unknown SMTP commands */
	<A href="xxfi_data.html">mlfi_data</A>,	/* DATA command */
	<A href="xxfi_negotiate.html">mlfi_negotiate</A>	/* Once, at the start of each SMTP connection */
};

static void
usage(prog)
	char *prog;
{
	fprintf(stderr,
		"Usage: %s -p socket-addr [-t timeout] [-r reject-addr] [-a add-addr]\n",
		prog);
}

int
main(argc, argv)
	 int argc;
	 char **argv;
{
	bool setconn = FALSE;
	int c;
	const char *args = "p:t:r:a:h";
	extern char *optarg;

	/* Process command line options */
	while ((c = getopt(argc, argv, args)) != -1)
	{
		switch (c)
		{
		  case 'p':
			if (optarg == NULL || *optarg == '\0')
			{
				(void) fprintf(stderr, "Illegal conn: %s\n",
					       optarg);
				exit(EX_USAGE);
			}
			if (<A href="smfi_setconn.html">smfi_setconn</A>(optarg) == MI_FAILURE)
			{
				(void) fprintf(stderr,
					       "smfi_setconn failed\n");
				exit(EX_SOFTWARE);
			}

			/*
			**  If we're using a local socket, make sure it
			**  doesn't already exist.  Don't ever run this
			**  code as root!!
			*/

			if (strncasecmp(optarg, "unix:", 5) == 0)
				unlink(optarg + 5);
			else if (strncasecmp(optarg, "local:", 6) == 0)
				unlink(optarg + 6);
			setconn = TRUE;
			break;

		  case 't':
			if (optarg == NULL || *optarg == '\0')
			{
				(void) fprintf(stderr, "Illegal timeout: %s\n",
					       optarg);
				exit(EX_USAGE);
			}
			if (<A href="smfi_settimeout.html">smfi_settimeout</A>(atoi(optarg)) == MI_FAILURE)
			{
				(void) fprintf(stderr,
					       "smfi_settimeout failed\n");
				exit(EX_SOFTWARE);
			}
			break;

		  case 'r':
			if (optarg == NULL)
			{
				(void) fprintf(stderr,
					       "Illegal reject rcpt: %s\n",
					       optarg);
				exit(EX_USAGE);
			}
			reject = optarg;
			break;

		  case 'a':
			if (optarg == NULL)
			{
				(void) fprintf(stderr,
					       "Illegal add rcpt: %s\n",
					       optarg);
				exit(EX_USAGE);
			}
			add = optarg;
			smfilter.xxfi_flags |= SMFIF_ADDRCPT;
			break;

		  case 'h':
		  default:
			usage(argv[0]);
			exit(EX_USAGE);
		}
	}
	if (!setconn)
	{
		fprintf(stderr, "%s: Missing required -p argument\n", argv[0]);
		usage(argv[0]);
		exit(EX_USAGE);
	}
	if (<A href="smfi_register.html">smfi_register</A>(smfilter) == MI_FAILURE)
	{
		fprintf(stderr, "smfi_register failed\n");
		exit(EX_UNAVAILABLE);
	}
	return <A href="smfi_main.html">smfi_main</A>();
}

/* eof */

</PRE>
<HR size="1">
<FONT size="-1">
Copyright (c) 2000-2004, 2006 Proofpoint, Inc. and its suppliers.
All rights reserved.
<BR>
By using this file, you agree to the terms and conditions set
forth in the LICENSE.
</FONT>
</BODY>
</HTML>
@


1.7
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.6
log
@Update to sendmail-8.14.0.  OK mbalmer@@
@
text
@d5 1
a5 1
$Sendmail: sample.html,v 1.22 2006/10/09 23:14:51 ca Exp $
d530 1
a530 1
Copyright (c) 2000-2004, 2006 Sendmail, Inc. and its suppliers.
@


1.5
log
@Update to sendmail.8.13.0
@
text
@d1 3
a3 3
<html>
<head><title>A Sample Filter</title></head>
<body>
d5 1
a5 1
$Sendmail: sample.html,v 1.18 2004/02/27 00:49:28 msk Exp $
d7 1
a7 1
<h1>A Sample Filter</h1>
d10 14
a23 14
adds a recipient given with the -a flag, and rejects a disallowed
recipient address given with the -r flag.  It recognizes the following
options:
<p>
<center>
<table border="1" cellpadding=2 cellspacing=1>
<tr><td><code>-p port</code></td><td>The port through which the MTA will connect to the filter.</td></tr>
<tr><td><code>-t sec</code></td><td>The timeout value.</td></tr>
<tr><td><code>-r addr</code></td><td>A recipient to reject.</td></tr>
<tr><td><code>-a addr</code></td><td>A recipient to add.</td></tr>
</table>
</center>
<hr>
<pre>
d50 1
a50 1
#define MLFIPRIV	((struct mlfiPriv *) <a href="smfi_getpriv.html">smfi_getpriv</a>(ctx))
d59 1
a59 1
<a href="xxfi_connect.html">mlfi_connect</a>(ctx, hostname, hostaddr)
d77 1
a77 1
	<a href="smfi_setpriv.html">smfi_setpriv</a>(ctx, priv);
d79 1
a79 1
	ident = <a href="smfi_getsymval.html">smfi_getsymval</a>(ctx, "_");
d93 1
a93 1
<a href="xxfi_helo.html">mlfi_helo</a>(ctx, helohost)
d102 1
a102 1
	tls = <a href="smfi_getsymval.html">smfi_getsymval</a>(ctx, "{tls_version}");
d123 1
a123 1
<a href="xxfi_envfrom.html">mlfi_envfrom</a>(ctx, argv)
d130 1
a130 1
	char *mailaddr = <a href="smfi_getsymval.html">smfi_getsymval</a>(ctx, "{mail_addr}");
d177 1
a177 1
<a href="xxfi_envrcpt.html">mlfi_envrcpt</a>(ctx, argv)
d182 1
a182 1
	char *rcptaddr = <a href="smfi_getsymval.html">smfi_getsymval</a>(ctx, "{rcpt_addr}");
d214 1
a214 1
<a href="xxfi_header.html">mlfi_header</a>(ctx, headerf, headerv)
d231 1
a231 1
<a href="xxfi_eoh.html">mlfi_eoh</a>(ctx)
d246 1
a246 1
<a href="xxfi_body.html">mlfi_body</a>(ctx, bodyp, bodylen)
d268 1
a268 1
<a href="xxfi_eom.html">mlfi_eom</a>(ctx)
d275 1
a275 1
		ok = (<a href="smfi_addrcpt.html">smfi_addrcpt</a>(ctx, add) == MI_SUCCESS);
d280 1
a280 1
<a href="xxfi_abort.html">mlfi_abort</a>(ctx)
d320 1
a320 1
		if (<a href="smfi_addheader.html">smfi_addheader</a>(ctx, "X-Archived", hbuf) != MI_SUCCESS)
d349 1
a349 1
<a href="xxfi_close.html">mlfi_close</a>(ctx)
d361 1
a361 1
	<a href="smfi_setpriv.html">smfi_setpriv</a>(ctx, NULL);
d365 30
d401 13
a413 10
	<a href="xxfi_connect.html">mlfi_connect</a>,	/* connection info filter */
	<a href="xxfi_helo.html">mlfi_helo</a>,	/* SMTP HELO command filter */
	<a href="xxfi_envfrom.html">mlfi_envfrom</a>,	/* envelope sender filter */
	<a href="xxfi_envrcpt.html">mlfi_envrcpt</a>,	/* envelope recipient filter */
	<a href="xxfi_header.html">mlfi_header</a>,	/* header filter */
	<a href="xxfi_eoh.html">mlfi_eoh</a>,	/* end of header */
	<a href="xxfi_body.html">mlfi_body</a>,	/* body block filter */
	<a href="xxfi_eom.html">mlfi_eom</a>,	/* end of message */
	<a href="xxfi_abort.html">mlfi_abort</a>,	/* message aborted */
	<a href="xxfi_close.html">mlfi_close</a>,	/* connection cleanup */
d447 1
a447 1
			if (<a href="smfi_setconn.html">smfi_setconn</a>(optarg) == MI_FAILURE)
d474 1
a474 1
			if (<a href="smfi_settimeout.html">smfi_settimeout</a>(atoi(optarg)) == MI_FAILURE)
d517 1
a517 1
	if (<a href="smfi_register.html">smfi_register</a>(smfilter) == MI_FAILURE)
d522 1
a522 1
	return <a href="smfi_main.html">smfi_main</a>();
d527 4
a530 4
</pre>
<hr size="1">
<font size="-1">
Copyright (c) 2000-2004 Sendmail, Inc. and its suppliers.
d532 1
a532 1
<br>
d535 3
a537 3
</font>
</body>
</html>
@


1.4
log
@Update to sendmail-8.12.10.  This includes a fix for a buffer overflow
in address parsing.  That fix (but not all of sendmail-8.12.10) has
been applied to OpenBSD 3.4 and the 3.2 and 3.2 -stable branches.
@
text
@d4 3
d127 2
a130 1
	int argc = 0;
d139 1
a139 1
	if (mkstemp(priv-&gt;mlfi_fname) == -1)
d145 1
a145 1
	if ((priv-&gt;mlfi_fp = fopen(priv-&gt;mlfi_fname, "w+")) == NULL)
d147 1
d369 2
a370 1
	SMFIF_ADDHDRS,	/* flags */
d497 1
a497 1
Copyright (c) 2000-2003 Sendmail, Inc. and its suppliers.
@


1.3
log
@Update to sendmail 8.12.9; fixes a buffer overflow in address parsing
due to a char to int conversion problem which is potentially remotely
exploitable.
@
text
@d382 1
a382 1
		"Usage: %s [-p socket-addr] [-t timeout] [-r reject-addr] [-a add-addr]\n",
d391 1
d425 1
d471 6
@


1.2
log
@Update to sendmail-8.12.4
@
text
@d483 1
a483 1
Copyright (c) 2000-2002 Sendmail, Inc. and its suppliers.
d487 1
a487 1
forth in the <a href="LICENSE.txt">LICENSE</a>.
@


1.1
log
@Initial revision
@
text
@d21 3
a23 2
#include "mfapi.h"

a26 2
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
d29 3
d33 4
a36 6
#define bool char
#define TRUE 1
#define FALSE 0
#endif

extern int errno;
d41 4
a44 4
    char    *mlfi_fname;
    char    *mlfi_connectfrom;
    char    *mlfi_helofrom;
    FILE    *mlfi_fp;
d47 3
a49 1
#define MLFIPRIV        ((struct mlfiPriv *) <a href="smfi_getpriv.html">smfi_getpriv</a>(ctx))
a50 1
extern sfsistat  mlfi_cleanup(SMFICTX *, bool);
d52 2
a53 1
char *add, *reject;
d57 30
a86 26
     SMFICTX *ctx;
     char *hostname;
     _SOCK_ADDR *hostaddr;
{
    struct mlfiPriv *priv;
    char *ident;

    /* allocate some private memory */
    priv = malloc(sizeof *priv);
    if (priv == NULL)
    {
	/* can't accept this message right now */
	return SMFIS_TEMPFAIL;
    }
    memset(priv, '\0', sizeof *priv);

    /* save the private data */
    <a href="smfi_setpriv.html">smfi_setpriv</a>(ctx, priv);
        
    ident = <a href="smfi_getsymval.html">smfi_getsymval</a>(ctx, "_");
    if(!ident) ident = "???";
    if(!(priv-&gt;mlfi_connectfrom = strdup(ident))) {
	return SMFIS_TEMPFAIL;
    }
    /* Continue processing. */
    return SMFIS_CONTINUE;
d91 2
a92 2
     SMFICTX *ctx;
     char *helohost;
d94 23
a116 15
    char *tls;
    char *buf;
    struct mlfiPriv *priv = MLFIPRIV;
    tls = <a href="smfi_getsymval.html">smfi_getsymval</a>(ctx, "{tls_version}");
    if(!tls) tls = "No TLS";
    if(!helohost) helohost = "???";
    if(!(buf = (char*)malloc(strlen(tls) + strlen(helohost) + 3))) {
	return SMFIS_TEMPFAIL;
    }
    sprintf(buf, "%s, %s", helohost, tls);
    if(priv-&gt;mlfi_helofrom)
	free(priv-&gt;mlfi_helofrom);
    priv-&gt;mlfi_helofrom = buf;
    /* Continue processing. */
    return SMFIS_CONTINUE;
d121 2
a122 2
     SMFICTX *ctx;
     char **argv;
d124 45
a168 33
    struct mlfiPriv *priv = MLFIPRIV;
    char *mailaddr = <a href="smfi_getsymval.html">smfi_getsymval</a>(ctx, "{mail_addr}");
    int argc = 0;

    /* open a file to store this message */
    priv-&gt;mlfi_fname = strdup("/tmp/msg.XXXXXX");
    mkstemp(priv-&gt;mlfi_fname);
    if (priv-&gt;mlfi_fname == NULL)
	return SMFIS_TEMPFAIL;
    if ((priv-&gt;mlfi_fp = fopen(priv-&gt;mlfi_fname, "w+")) == NULL)
    {
	free(priv-&gt;mlfi_fname);
	return SMFIS_TEMPFAIL;
    }

    /* count the arguments */
    while(*argv++) ++argc;
    /* log the connection information we stored earlier: */
    if(fprintf(priv-&gt;mlfi_fp, "Connect from %s (%s)\n\n", 
	       priv-&gt;mlfi_helofrom, priv-&gt;mlfi_connectfrom) == EOF) {
	(void) mlfi_cleanup(ctx, FALSE);
	return SMFIS_TEMPFAIL;
    }
    /* log the sender */
    if(fprintf(priv-&gt;mlfi_fp, "FROM %s (%d argument%s)\n", 
	       mailaddr?mailaddr:"???", argc,
	       (argc == 1)?"":"s")
       == EOF) {
	(void) mlfi_cleanup(ctx, FALSE);
	return SMFIS_TEMPFAIL;
    }
    /* continue processing */
    return SMFIS_CONTINUE;
d173 2
a174 2
     SMFICTX *ctx;
     char **argv;
d176 30
a205 23
    struct mlfiPriv *priv = MLFIPRIV;
    char *rcptaddr = <a href="smfi_getsymval.html">smfi_getsymval</a>(ctx, "{rcpt_addr}");
    int argc = 0;
    /* count the arguments */
    while(*argv++) ++argc;
    /* log this recipient */
    if(reject && rcptaddr && (strcmp(rcptaddr, reject) == 0)) {
	if(fprintf(priv-&gt;mlfi_fp, "RCPT %s -- REJECTED\n", rcptaddr)
	   == EOF) {
	    (void) mlfi_cleanup(ctx, FALSE);
	    return SMFIS_TEMPFAIL;
	}
	return SMFIS_REJECT;
    }
    if(fprintf(priv-&gt;mlfi_fp, "RCPT %s (%d argument%s)\n", 
	       rcptaddr?rcptaddr:"???", argc, 
	       (argc == 1)?"":"s")
       == EOF) {
	(void) mlfi_cleanup(ctx, FALSE);
	return SMFIS_TEMPFAIL;
    }
    /* continue processing */
    return SMFIS_CONTINUE;
d210 3
a212 3
     SMFICTX *ctx;
     char *headerf;
     unsigned char *headerv;
d214 6
a219 2
    /* write the header to the log file */
    fprintf(MLFIPRIV-&gt;mlfi_fp, "%s: %s\n", headerf, headerv);
d221 2
a222 2
    /* continue processing */
    return SMFIS_CONTINUE;
d227 1
a227 1
     SMFICTX *ctx;
d229 6
a234 2
    /* output the blank line between the header and the body */
    fprintf(MLFIPRIV-&gt;mlfi_fp, "\n");
d236 2
a237 2
    /* continue processing */
    return SMFIS_CONTINUE;
d242 5
a246 13
     SMFICTX *ctx;
     unsigned char *bodyp;
     size_t bodylen;
{
    /* output body block to log file */
    int nwritten;
    if ((nwritten = fwrite(bodyp, bodylen, 1, MLFIPRIV-&gt;mlfi_fp)) != 1)
    {
	/* write failed */
	perror("error logging body");
	(void) mlfi_cleanup(ctx, FALSE);
	return SMFIS_TEMPFAIL;
    }
d248 12
a259 2
    /* continue processing */
    return SMFIS_CONTINUE;
d264 1
a264 1
     SMFICTX *ctx;
d266 6
a271 5
    bool ok = TRUE;
    /* change recipients, if requested */
    if(add)
	ok = ok && (<a href="smfi_addrcpt.html">smfi_addrcpt</a>(ctx, add) == MI_SUCCESS);
    return mlfi_cleanup(ctx, ok);
d276 1
a276 1
     SMFICTX *ctx;
d278 1
a278 1
    return mlfi_cleanup(ctx, FALSE);
d283 2
a284 2
     SMFICTX *ctx;
     bool ok;
d286 5
a290 5
    sfsistat rstat = SMFIS_CONTINUE;
    struct mlfiPriv *priv = MLFIPRIV;
    char *p;
    char host[512];
    char hbuf[1024];
d292 2
a293 2
    if (priv == NULL)
	return rstat;
d295 31
a325 17
    /* close the archive file */
    if (priv-&gt;mlfi_fp != NULL && fclose(priv-&gt;mlfi_fp) == EOF)
    {
	/* failed; we have to wait until later */
	fprintf(stderr, "Couldn't close archive file %s: %s\n",
		priv-&gt;mlfi_fname, strerror(errno));
	rstat = SMFIS_TEMPFAIL;
	(void) unlink(priv-&gt;mlfi_fname);
    }
    else if (ok)
    {
	/* add a header to the message announcing our presence */
	if (gethostname(host, sizeof host) &lt; 0)
	    strncpy(host, "localhost", sizeof host);
	p = strrchr(priv-&gt;mlfi_fname, '/');
	if (p == NULL)
	    p = priv-&gt;mlfi_fname;
d327 7
a333 12
	    p++;
	snprintf(hbuf, sizeof hbuf, "%s@@%s", p, host);
	<a href="smfi_addheader.html">smfi_addheader</a>(ctx, "X-Archived", hbuf);
    }
    else
    {
	/* message was aborted -- delete the archive file */
	fprintf(stderr, "Message aborted.  Removing %s\n",
		priv-&gt;mlfi_fname);
	rstat = SMFIS_TEMPFAIL;
	(void) unlink(priv-&gt;mlfi_fname);
    }
d335 3
a337 2
    /* release private memory */
    free(priv-&gt;mlfi_fname);
d339 2
a340 2
    /* return status */
    return rstat;
d345 1
a345 1
     SMFICTX *ctx;
d347 11
a357 8
    struct mlfiPriv *priv = MLFIPRIV;
    if(priv-&gt;mlfi_connectfrom)
	free(priv-&gt;mlfi_connectfrom);
    if(priv-&gt;mlfi_helofrom)
	free(priv-&gt;mlfi_helofrom);
    free(priv);
    <a href="smfi_setpriv.html">smfi_setpriv</a>(ctx, NULL);
    return SMFIS_CONTINUE;
d362 13
a374 13
    "SampleFilter", /* filter name */
    SMFI_VERSION,   /* version code -- do not change */
    SMFIF_ADDHDRS,  /* flags */
    <a href="xxfi_connect.html">mlfi_connect</a>,   /* connection info filter */
    <a href="xxfi_helo.html">mlfi_helo</a>,      /* SMTP HELO command filter */
    <a href="xxfi_envfrom.html">mlfi_envfrom</a>,   /* envelope sender filter */
    <a href="xxfi_envrcpt.html">mlfi_envrcpt</a>,   /* envelope recipient filter */
    <a href="xxfi_header.html">mlfi_header</a>,    /* header filter */
    <a href="xxfi_eoh.html">mlfi_eoh</a>,       /* end of header */
    <a href="xxfi_body.html">mlfi_body</a>,      /* body block filter */
    <a href="xxfi_eom.html">mlfi_eom</a>,       /* end of message */
    <a href="xxfi_abort.html">mlfi_abort</a>,     /* message aborted */
    <a href="xxfi_close.html">mlfi_close</a>,     /* connection cleanup */
d377 7
a383 6
static void 
usage()
{
    fprintf(stderr, 
	    "Usage: sample [-p socket-addr] [-t timeout] [-r reject-addr] \n\
\t[-a accept-addr]\n");
d388 2
a389 2
     int argc;
     char *argv[];
d391 85
a475 79
    int retval;
    char c;
    const char *args = "p:t:r:a:h";
    extern char *optarg;

    /* Process command line options */
    while ((c = getopt(argc, argv, args)) != (char)EOF)
    {
	switch (c)
	{
	case 'p':
	    if (optarg == NULL || *optarg == '\0')
	    {
		(void) fprintf(stderr, "Illegal conn: %s\n",
			       optarg);
		exit(EX_USAGE);
	    }
	    if(<a href="smfi_setconn.html">smfi_setconn</a>(optarg) == MI_FAILURE)
	    {
		(void) fputs("smfi_setconn failed", stderr);
		exit(EX_SOFTWARE);
	    }
	    /* 
	    ** If we're using a local socket, make sure it doesn't
	    ** already exist.
	    */
	    if(strncmp(optarg, "unix:", 5) == 0)
		unlink(optarg + 5);
	    else if(strncmp(optarg, "local:", 6) == 0)
		unlink(optarg + 6);
	    break;

	case 't':
	    if (optarg == NULL || *optarg == '\0')
	    {
		(void) fprintf(stderr, "Illegal timeout: %s\n",
			       optarg);
		exit(EX_USAGE);
	    }
	    if(<a href="smfi_settimeout.html">smfi_settimeout</a>(atoi(optarg)) == MI_FAILURE)
	    {
		(void) fputs("smfi_settimeout failed", stderr);
		exit(EX_SOFTWARE);
	    }
	    break;

	case 'r':
	    if (optarg == NULL)
	    {
		(void) fprintf(stderr, "Illegal reject rcpt: %s\n",
			       optarg);
		exit(EX_USAGE);
	    }
	    reject = optarg;
	    break;

	case 'a':
	    if (optarg == NULL)
	    {
		(void) fprintf(stderr, "Illegal add rcpt: %s\n",
			       optarg);
		exit(EX_USAGE);
	    }
	    add = optarg;
	    smfilter.xxfi_flags |= SMFIF_ADDRCPT;
	    break;
	case 'h':
	default:
	    usage();
	    exit(0);
	}
    }
    if (<a href="smfi_register.html">smfi_register</a>(smfilter) == MI_FAILURE)
    {
	fprintf(stderr, "smfi_register failed\n");
	exit(EX_UNAVAILABLE);
    }
    retval = <a href="smfi_main.html">smfi_main</a>();
    return retval;
d483 1
a483 1
Copyright (c) 2000-2001 Sendmail, Inc. and its suppliers.
@


1.1.1.1
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@@
