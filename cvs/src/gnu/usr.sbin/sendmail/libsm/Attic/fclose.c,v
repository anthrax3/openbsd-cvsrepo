head	1.7;
access;
symbols
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SENDMAIL_8_12_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.7
date	2014.09.17.18.49.51;	author matthieu;	state dead;
branches;
next	1.6;
commitid	M7i5giHIoz3DMlTU;

1.6
date	2014.02.07.21.24.59;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.22.18.43.54;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.16.00.21.30;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.18.00.49.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bye.
@
text
@/*
 * Copyright (c) 2000-2002, 2004 Proofpoint, Inc. and its suppliers.
 *      All rights reserved.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: fclose.c,v 1.45 2013/11/22 20:51:42 ca Exp $")
#include <errno.h>
#include <stdlib.h>
#include <sm/time.h>
#include <setjmp.h>
#include <sm/io.h>
#include <sm/assert.h>
#include <sm/heap.h>
#include <sm/signal.h>
#include <sm/conf.h>
#include <sm/clock.h>
#include "local.h"

static void	closealrm __P((int));
static jmp_buf CloseTimeOut;

/*
**  CLOSEALRM -- handler when timeout activated for sm_io_close()
**
**	Returns flow of control to where setjmp(CloseTimeOut) was set.
**
**	Parameters:
**		sig -- unused
**
**	Returns:
**		does not return
**
**	Side Effects:
**		returns flow of control to setjmp(CloseTimeOut).
**
**	NOTE:	THIS CAN BE CALLED FROM A SIGNAL HANDLER.  DO NOT ADD
**		ANYTHING TO THIS ROUTINE UNLESS YOU KNOW WHAT YOU ARE
**		DOING.
*/

/* ARGSUSED0 */
static void
closealrm(sig)
	int sig;
{
	longjmp(CloseTimeOut, 1);
}

/*
**  SM_IO_CLOSE -- close a file handle/pointer
**
**	Parameters:
**		fp -- file pointer to be closed
**		timeout -- maximum time allowed to perform the close (millisecs)
**
**	Returns:
**		0 on success
**		-1 on failure and sets errno
**
**	Side Effects:
**		file pointer 'fp' will no longer be valid.
*/

int
sm_io_close(fp, timeout)
	register SM_FILE_T *fp;
	int SM_NONVOLATILE timeout;
{
	register int SM_NONVOLATILE r;
	SM_EVENT *evt = NULL;

	if (fp == NULL)
	{
		errno = EBADF;
		return SM_IO_EOF;
	}

	SM_REQUIRE_ISA(fp, SmFileMagic);

	/* XXX this won't be reached if above macro is active */
	if (fp->sm_magic == NULL)
	{
		/* not open! */
		errno = EBADF;
		return SM_IO_EOF;
	}
	if (fp->f_close == NULL)
	{
		/* no close function! */
		errno = ENODEV;
		return SM_IO_EOF;
	}
	if (fp->f_dup_cnt > 0)
	{
		/* decrement file pointer open count */
		fp->f_dup_cnt--;
		return 0;
	}

	/*  Okay, this is where we set the timeout.  */
	if (timeout == SM_TIME_DEFAULT)
		timeout = fp->f_timeout;
	if (timeout == SM_TIME_IMMEDIATE)
	{
		errno = EAGAIN;
		return -1;
	}

	/* No more duplicates of file pointer. Flush buffer and close */
	r = fp->f_flags & SMWR ? sm_flush(fp, (int *) &timeout) : 0;

	/* sm_flush() has updated to.it_value for the time it's used */
	if (timeout != SM_TIME_FOREVER)
	{
		if (setjmp(CloseTimeOut) != 0)
		{
			errno = EAGAIN;
			return SM_IO_EOF;
		}
		evt = sm_seteventm(timeout, closealrm, 0);
	}
	if ((*fp->f_close)(fp) < 0)
		r = SM_IO_EOF;

	/*  We're back. So undo our timeout and handler */
	if (evt != NULL)
		sm_clrevent(evt);
	if (fp->f_flags & SMMBF)
	{
		sm_free((char *)fp->f_bf.smb_base);
		fp->f_bf.smb_base = NULL;
	}
	if (HASUB(fp))
		FREEUB(fp);
	fp->f_flags = 0;	/* clear flags */
	fp->sm_magic = NULL;	/* Release this SM_FILE_T for reuse. */
	fp->f_r = fp->f_w = 0;	/* Mess up if reaccessed. */
	return r;
}
@


1.6
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.5
log
@Update to sendmail 8.13.6
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2002, 2004 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: fclose.c,v 1.44 2005/06/14 23:07:20 ca Exp $")
@


1.4
log
@Update to sendmail-8.13.2
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: fclose.c,v 1.43 2004/08/03 20:17:38 ca Exp $")
d19 1
a19 1
#include <sys/time.h>
@


1.3
log
@update to sendmail 8.12.3
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2002 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: fclose.c,v 1.42 2002/02/01 02:28:00 ca Exp $")
d29 1
@


1.2
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: fclose.c,v 1.41 2001/09/11 04:04:48 gshapiro Exp $")
d89 1
a143 2
	if (HASLB(fp))
		FREELB(fp);
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: fclose.c,v 1.39 2001/06/06 00:25:48 ca Exp $")
@


1.1.1.1
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@@
