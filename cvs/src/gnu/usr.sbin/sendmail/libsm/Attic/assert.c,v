head	1.6;
access;
symbols
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.38
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.36
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.34
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.32
	OPENBSD_5_0:1.4.0.30
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.28
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.26
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.22
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.24
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SENDMAIL_8_12_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2014.09.17.18.49.51;	author matthieu;	state dead;
branches;
next	1.5;
commitid	M7i5giHIoz3DMlTU;

1.5
date	2014.02.07.21.24.59;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.24.03.59.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.19.01.41.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Bye.
@
text
@/*
 * Copyright (c) 2000-2001 Proofpoint, Inc. and its suppliers.
 *	All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: assert.c,v 1.27 2013/11/22 20:51:42 ca Exp $")

/*
**  Abnormal program termination and assertion checking.
**  For documentation, see assert.html.
*/

#include <signal.h>
#include <stdlib.h>
#include <unistd.h>

#include <sm/assert.h>
#include <sm/exc.h>
#include <sm/io.h>
#include <sm/varargs.h>

/*
**  Debug categories that are used to guard expensive assertion checks.
*/

SM_DEBUG_T SmExpensiveAssert = SM_DEBUG_INITIALIZER("sm_check_assert",
	"@@(#)$Debug: sm_check_assert - check assertions $");

SM_DEBUG_T SmExpensiveRequire = SM_DEBUG_INITIALIZER("sm_check_require",
	"@@(#)$Debug: sm_check_require - check function preconditions $");

SM_DEBUG_T SmExpensiveEnsure = SM_DEBUG_INITIALIZER("sm_check_ensure",
	"@@(#)$Debug: sm_check_ensure - check function postconditions $");

/*
**  Debug category: send self SIGSTOP on fatal error,
**  so that you can run a debugger on the stopped process.
*/

SM_DEBUG_T SmAbortStop = SM_DEBUG_INITIALIZER("sm_abort_stop",
	"@@(#)$Debug: sm_abort_stop - stop process on fatal error $");

/*
**  SM_ABORT_DEFAULTHANDLER -- Default procedure for abnormal program
**				termination.
**
**	The goal is to display an error message without disturbing the
**	process state too much, then dump core.
**
**	Parameters:
**		filename -- filename (can be NULL).
**		lineno -- line number.
**		msg -- message.
**
**	Returns:
**		doesn't return.
*/

static void
sm_abort_defaulthandler __P((
	const char *filename,
	int lineno,
	const char *msg));

static void
sm_abort_defaulthandler(filename, lineno, msg)
	const char *filename;
	int lineno;
	const char *msg;
{
	if (filename != NULL)
		sm_io_fprintf(smioerr, SM_TIME_DEFAULT, "%s:%d: %s\n", filename,
			      lineno, msg);
	else
		sm_io_fprintf(smioerr, SM_TIME_DEFAULT, "%s\n", msg);
	sm_io_flush(smioerr, SM_TIME_DEFAULT);
#ifdef SIGSTOP
	if (sm_debug_active(&SmAbortStop, 1))
		kill(getpid(), SIGSTOP);
#endif /* SIGSTOP */
	abort();
}

/*
**  This is the action to be taken to cause abnormal program termination.
*/

static SM_ABORT_HANDLER_T SmAbortHandler = sm_abort_defaulthandler;

/*
**  SM_ABORT_SETHANDLER -- Set handler for SM_ABORT()
**
**	This allows you to set a handler function for causing abnormal
**	program termination; it is called when a logic bug is detected.
**
**	Parameters:
**		f -- handler.
**
**	Returns:
**		none.
*/

void
sm_abort_sethandler(f)
	SM_ABORT_HANDLER_T f;
{
	if (f == NULL)
		SmAbortHandler = sm_abort_defaulthandler;
	else
		SmAbortHandler = f;
}

/*
**  SM_ABORT -- Call it when you have detected a logic bug.
**
**	Parameters:
**		fmt -- format string.
**		... -- arguments.
**
**	Returns:
**		doesn't.
*/

void SM_DEAD_D
#if SM_VA_STD
sm_abort(char *fmt, ...)
#else /* SM_VA_STD */
sm_abort(fmt, va_alist)
	char *fmt;
	va_dcl
#endif /* SM_VA_STD */
{
	char msg[128];
	SM_VA_LOCAL_DECL

	SM_VA_START(ap, fmt);
	sm_vsnprintf(msg, sizeof msg, fmt, ap);
	SM_VA_END(ap);
	sm_abort_at(NULL, 0, msg);
}

/*
**  SM_ABORT_AT -- Initiate abnormal program termination.
**
**	This is the low level function that is called to initiate abnormal
**	program termination.  It prints an error message and terminates the
**	program.  It is called by sm_abort and by the assertion macros.
**	If filename != NULL then filename and lineno specify the line of source
**	code at which the bug was detected.
**
**	Parameters:
**		filename -- filename (can be NULL).
**		lineno -- line number.
**		msg -- message.
**
**	Returns:
**		doesn't.
*/

void SM_DEAD_D
sm_abort_at(filename, lineno, msg)
	const char *filename;
	int lineno;
	const char *msg;
{
	SM_TRY
		(*SmAbortHandler)(filename, lineno, msg);
	SM_EXCEPT(exc, "*")
		sm_io_fprintf(smioerr, SM_TIME_DEFAULT,
			      "exception raised by abort handler:\n");
		sm_exc_print(exc, smioerr);
		sm_io_flush(smioerr, SM_TIME_DEFAULT);
	SM_END_TRY

	/*
	**  SmAbortHandler isn't supposed to return.
	**  Since it has, let's make sure that the program is terminated.
	*/

	abort();
}
@


1.5
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.4
log
@Update to sendmail.8.13.0
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Sendmail, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: assert.c,v 1.26 2003/12/05 22:45:24 ca Exp $")
@


1.3
log
@Update to sendmail 8.12.11.  I've been runninga beta version of this for
some time without problems.  See the RELEASE_NOTES for the change log.
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: assert.c,v 1.25.2.1 2003/12/05 22:44:17 ca Exp $")
@


1.2
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: assert.c,v 1.25 2001/09/11 04:04:47 gshapiro Exp $")
d130 1
a130 1
void
d166 1
a166 1
void
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: assert.c,v 1.23 2001/09/04 22:41:27 ca Exp $")
@


1.1.1.1
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@@
