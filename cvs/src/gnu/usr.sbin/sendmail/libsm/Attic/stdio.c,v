head	1.11;
access;
symbols
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.30
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.28
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.26
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.24
	OPENBSD_5_0:1.9.0.22
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.20
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.18
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.14
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SENDMAIL_8_12_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.11
date	2014.09.17.18.49.51;	author matthieu;	state dead;
branches;
next	1.10;
commitid	M7i5giHIoz3DMlTU;

1.10
date	2014.02.07.21.24.59;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.22.18.43.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.16.00.21.30;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.24.03.59.26;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.17.17.31.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.03.17.31.21;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.01.19.59.21;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.18.00.49.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Bye.
@
text
@/*
 * Copyright (c) 2000-2005 Proofpoint, Inc. and its suppliers.
 *      All rights reserved.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.72 2013/11/22 20:51:43 ca Exp $")
#include <unistd.h>
#include <errno.h>
#include <fcntl.h>
#include <string.h>	/* FreeBSD: FD_ZERO needs <string.h> */
#include <sys/stat.h>
#include <sm/time.h>
#include <sm/heap.h>
#include <sm/assert.h>
#include <sm/varargs.h>
#include <sm/io.h>
#include <sm/setjmp.h>
#include <sm/conf.h>
#include <sm/fdset.h>
#include "local.h"

static int	sm_stdsetmode __P((SM_FILE_T *, const int *));
static int	sm_stdgetmode __P((SM_FILE_T *, int *));

/*
**  Overall:
**  Small standard I/O/seek/close functions.
**  These maintain the `known seek offset' for seek optimization.
*/

/*
**  SM_STDOPEN -- open a file with stdio behavior
**
**  Not associated with the system's stdio in libc.
**
**	Parameters:
**		fp -- file pointer to be associated with the open
**		info -- pathname of the file to be opened
**		flags -- indicates type of access methods
**		rpool -- ignored
**
**	Returns:
**		Failure: -1 and set errno
**		Success: 0 or greater (fd of file from open(2)).
**
*/

/* ARGSUSED3 */
int
sm_stdopen(fp, info, flags, rpool)
	SM_FILE_T *fp;
	const void *info;
	int flags;
	const void *rpool;
{
	char *path = (char *) info;
	int oflags;

	switch (SM_IO_MODE(flags))
	{
	  case SM_IO_RDWR:
		oflags = O_RDWR;
		break;
	  case SM_IO_RDWRTR:
		oflags = O_RDWR | O_CREAT | O_TRUNC;
		break;
	  case SM_IO_RDONLY:
		oflags = O_RDONLY;
		break;
	  case SM_IO_WRONLY:
		oflags = O_WRONLY | O_CREAT | O_TRUNC;
		break;
	  case SM_IO_APPEND:
		oflags = O_APPEND | O_WRONLY | O_CREAT;
		break;
	  case SM_IO_APPENDRW:
		oflags = O_APPEND | O_RDWR | O_CREAT;
		break;
	  default:
		errno = EINVAL;
		return -1;
	}
#ifdef O_BINARY
	if (SM_IS_BINARY(flags))
		oflags |= O_BINARY;
#endif /* O_BINARY */
	fp->f_file = open(path, oflags,
			  S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);
	if (fp->f_file < 0)
		return -1; /* errno set by open() */

	if (oflags & O_APPEND)
		(void) (*fp->f_seek)((void *)fp, (off_t)0, SEEK_END);

	return fp->f_file;
}

/*
**  SM_STDREAD -- read from the file
**
**	Parameters:
**		fp -- file pointer to read from
**		buf -- location to place read data
**		n -- number of bytes to read
**
**	Returns:
**		Failure: -1 and sets errno
**		Success: number of bytes read
**
**	Side Effects:
**		Updates internal offset into file.
*/

ssize_t
sm_stdread(fp, buf, n)
	SM_FILE_T *fp;
	char *buf;
	size_t n;
{
	register int ret;

	ret = read(fp->f_file, buf, n);

	/* if the read succeeded, update the current offset */
	if (ret > 0)
		fp->f_lseekoff += ret;
	return ret;
}

/*
**  SM_STDWRITE -- write to the file
**
**	Parameters:
**		fp -- file pointer ro write to
**		buf -- location of data to be written
**		n - number of bytes to write
**
**	Returns:
**		Failure: -1 and sets errno
**		Success: number of bytes written
*/

ssize_t
sm_stdwrite(fp, buf, n)
	SM_FILE_T *fp;
	char const *buf;
	size_t n;
{
	return write(fp->f_file, buf, n);
}

/*
**  SM_STDSEEK -- set the file offset position
**
**	Parmeters:
**		fp -- file pointer to position
**		offset -- how far to position from "base" (set by 'whence')
**		whence -- indicates where the "base" of the 'offset' to start
**
**	Results:
**		Failure: -1 and sets errno
**		Success: the current offset
**
**	Side Effects:
**		Updates the internal value of the offset.
*/

off_t
sm_stdseek(fp, offset, whence)
	SM_FILE_T *fp;
	off_t offset;
	int whence;
{
	register off_t ret;

	ret = lseek(fp->f_file, (off_t) offset, whence);
	if (ret != (off_t) -1)
		fp->f_lseekoff = ret;
	return ret;
}

/*
**  SM_STDCLOSE -- close the file
**
**	Parameters:
**		fp -- the file pointer to close
**
**	Returns:
**		Success: 0 (zero)
**		Failure: -1 and sets errno
*/

int
sm_stdclose(fp)
	SM_FILE_T *fp;
{
	return close(fp->f_file);
}

/*
**  SM_STDSETMODE -- set the access mode for the file
**
**  Called by sm_stdsetinfo().
**
**	Parameters:
**		fp -- file pointer
**		mode -- new mode to set the file access to
**
**	Results:
**		Success: 0 (zero);
**		Failure: -1 and sets errno
*/

static int
sm_stdsetmode(fp, mode)
	SM_FILE_T *fp;
	const int *mode;
{
	int flags = 0;

	switch (SM_IO_MODE(*mode))
	{
	  case SM_IO_RDWR:
		flags |= SMRW;
		break;
	  case SM_IO_RDONLY:
		flags |= SMRD;
		break;
	  case SM_IO_WRONLY:
		flags |= SMWR;
		break;
	  case SM_IO_APPEND:
	  default:
		errno = EINVAL;
		return -1;
	}
	fp->f_flags = fp->f_flags & ~SMMODEMASK;
	fp->f_flags |= flags;
	return 0;
}

/*
**  SM_STDGETMODE -- for getinfo determine open mode
**
**  Called by sm_stdgetinfo().
**
**	Parameters:
**		fp -- the file mode being determined
**		mode -- internal mode to map to external value
**
**	Results:
**		Failure: -1 and sets errno
**		Success: external mode value
*/

static int
sm_stdgetmode(fp, mode)
	SM_FILE_T *fp;
	int *mode;
{
	switch (fp->f_flags & SMMODEMASK)
	{
	  case SMRW:
		*mode = SM_IO_RDWR;
		break;
	  case SMRD:
		*mode = SM_IO_RDONLY;
		break;
	  case SMWR:
		*mode = SM_IO_WRONLY;
		break;
	  default:
		errno = EINVAL;
		return -1;
	}
	return 0;
}

/*
**  SM_STDSETINFO -- set/modify information for a file
**
**	Parameters:
**		fp -- file to set info for
**		what -- type of info to set
**		valp -- location of data used for setting
**
**	Returns:
**		Failure: -1 and sets errno
**		Success: >=0
*/

int
sm_stdsetinfo(fp, what, valp)
	SM_FILE_T *fp;
	int what;
	void *valp;
{
	switch (what)
	{
	  case SM_IO_WHAT_MODE:
		return sm_stdsetmode(fp, (const int *)valp);

	  default:
		errno = EINVAL;
		return -1;
	}
}

/*
**  SM_GETINFO -- get information about the open file
**
**	Parameters:
**		fp -- file to get info for
**		what -- type of info to get
**		valp -- location to place found info
**
**	Returns:
**		Success: may or may not place info in 'valp' depending
**			on 'what' value, and returns values >=0. Return
**			value may be the obtained info
**		Failure: -1 and sets errno
*/

int
sm_stdgetinfo(fp, what, valp)
	SM_FILE_T *fp;
	int what;
	void *valp;
{
	switch (what)
	{
	  case SM_IO_WHAT_MODE:
		return sm_stdgetmode(fp, (int *)valp);

	  case SM_IO_WHAT_FD:
		return fp->f_file;

	  case SM_IO_WHAT_SIZE:
	  {
		  struct stat st;

		  if (fstat(fp->f_file, &st) == 0)
			  return st.st_size;
		  else
			  return -1;
	  }

	  case SM_IO_IS_READABLE:
	  {
		  fd_set readfds;
		  struct timeval timeout;

		  if (SM_FD_SETSIZE > 0 && fp->f_file >= SM_FD_SETSIZE)
		  {
			  errno = EINVAL;
			  return -1;
		  }
		  FD_ZERO(&readfds);
		  SM_FD_SET(fp->f_file, &readfds);
		  timeout.tv_sec = 0;
		  timeout.tv_usec = 0;
		  if (select(fp->f_file + 1, FDSET_CAST &readfds,
			     NULL, NULL, &timeout) > 0 &&
		      SM_FD_ISSET(fp->f_file, &readfds))
			  return 1;
		  return 0;
	  }

	  default:
		errno = EINVAL;
		return -1;
	}
}

/*
**  SM_STDFDOPEN -- open file by primitive 'fd' rather than pathname
**
**	I/O function to handle fdopen() stdio equivalence. The rest of
**	the functions are the same as the sm_stdopen() above.
**
**	Parameters:
**		fp -- the file pointer to be associated with the open
**		name -- the primitive file descriptor for association
**		flags -- indicates type of access methods
**		rpool -- ignored
**
**	Results:
**		Success: primitive file descriptor value
**		Failure: -1 and sets errno
*/

/* ARGSUSED3 */
int
sm_stdfdopen(fp, info, flags, rpool)
	SM_FILE_T *fp;
	const void *info;
	int flags;
	const void *rpool;
{
	int oflags, tmp, fdflags, fd = *((int *) info);

	switch (SM_IO_MODE(flags))
	{
	  case SM_IO_RDWR:
		oflags = O_RDWR | O_CREAT;
		break;
	  case SM_IO_RDONLY:
		oflags = O_RDONLY;
		break;
	  case SM_IO_WRONLY:
		oflags = O_WRONLY | O_CREAT | O_TRUNC;
		break;
	  case SM_IO_APPEND:
		oflags = O_APPEND | O_WRONLY | O_CREAT;
		break;
	  case SM_IO_APPENDRW:
		oflags = O_APPEND | O_RDWR | O_CREAT;
		break;
	  default:
		errno = EINVAL;
		return -1;
	}
#ifdef O_BINARY
	if (SM_IS_BINARY(flags))
		oflags |= O_BINARY;
#endif /* O_BINARY */

	/* Make sure the mode the user wants is a subset of the actual mode. */
	if ((fdflags = fcntl(fd, F_GETFL, 0)) < 0)
		return -1;
	tmp = fdflags & O_ACCMODE;
	if (tmp != O_RDWR && (tmp != (oflags & O_ACCMODE)))
	{
		errno = EINVAL;
		return -1;
	}
	fp->f_file = fd;
	if (oflags & O_APPEND)
		(void) (*fp->f_seek)(fp, (off_t)0, SEEK_END);
	return fp->f_file;
}

/*
**  SM_IO_FOPEN -- open a file
**
**	Same interface and semantics as the open() system call,
**	except that it returns SM_FILE_T* instead of a file descriptor.
**
**	Parameters:
**		pathname -- path of file to open
**		flags -- flags controlling the open
**		...  -- option "mode" for opening the file
**
**	Returns:
**		Raises an exception on heap exhaustion.
**		Returns NULL and sets errno if open() fails.
**		Returns an SM_FILE_T pointer on success.
*/

SM_FILE_T *
#if SM_VA_STD
sm_io_fopen(char *pathname, int flags, ...)
#else /* SM_VA_STD */
sm_io_fopen(pathname, flags, va_alist)
	char *pathname;
	int flags;
	va_dcl
#endif /* SM_VA_STD */
{
	MODE_T mode;
	SM_FILE_T *fp;
	int ioflags;

	if (flags & O_CREAT)
	{
		SM_VA_LOCAL_DECL

		SM_VA_START(ap, flags);
		mode = (MODE_T) SM_VA_ARG(ap, int);
		SM_VA_END(ap);
	}
	else
		mode = 0;

	switch (flags & O_ACCMODE)
	{
	  case O_RDONLY:
		ioflags = SMRD;
		break;
	  case O_WRONLY:
		ioflags = SMWR;
		break;
	  case O_RDWR:
		ioflags = SMRW;
		break;
	  default:
		sm_abort("sm_io_fopen: bad flags 0%o", flags);
	}

	fp = sm_fp(SmFtStdio, ioflags, NULL);
	fp->f_file = open(pathname, flags, mode);
	if (fp->f_file == -1)
	{
		fp->f_flags = 0;
		fp->sm_magic = NULL;
		return NULL;
	}
	return fp;
}
@


1.10
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.9
log
@Update to sendmail 8.13.6
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2005 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.71 2005/06/14 23:07:20 ca Exp $")
@


1.8
log
@Update to sendmail-8.13.2
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2004 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.69 2004/08/03 20:46:34 ca Exp $")
d22 1
a22 1
#include <sys/time.h>
d224 1
a224 1
int
@


1.7
log
@Update to sendmail.8.13.0
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.68 2004/03/03 19:20:29 ca Exp $")
d32 3
d266 1
a266 1
int
@


1.6
log
@Update to sendmail-8.12.10.  This includes a fix for a buffer overflow
in address parsing.  That fix (but not all of sendmail-8.12.10) has
been applied to OpenBSD 3.4 and the 3.2 and 3.2 -stable branches.
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2003 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.56.2.13 2003/09/04 01:18:08 ca Exp $")
@


1.5
log
@Update to Sendmail 8.12.8; fixes a buffer overflow in the envelope
comments processing which may allow an attacker to gain root privileges.
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.56.2.10 2003/01/10 23:07:17 ca Exp $")
d66 1
a66 1
	switch (flags)
d90 4
d228 1
a228 1
	switch (*mode)
d409 1
a409 1
	switch (flags)
d430 4
@


1.4
log
@update to sendmail 8.12.7
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2002 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.56.2.3 2002/10/22 23:07:19 ca Exp $")
@


1.3
log
@update to sendmail 8.12.3
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.56 2002/04/03 21:55:15 ca Exp $")
a26 1
#include <sm/fdset.h>
d29 1
d356 5
a429 1

@


1.2
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.52 2001/09/18 21:45:23 gshapiro Exp $")
d341 10
d352 14
a365 17
		{
			fd_set readfds;
			struct timeval timeout;

			FD_ZERO(&readfds);
			SM_FD_SET(fp->f_file, &readfds);
			timeout.tv_sec = 0;
			timeout.tv_usec = 0;
			if (select(fp->f_file + 1,
				   FDSET_CAST &readfds,
				   NULL,
				   NULL,
				   &timeout) > 0 &&
			    SM_FD_ISSET(fp->f_file, &readfds))
				return 1;
			return 0;
		}
d374 1
a374 1
**  SM_STDFDOPEN -- open file by primative 'fd' rather than pathname
d381 1
a381 1
**		name -- the primative file descriptor for association
d386 1
a386 1
**		Success: primative file descriptor value
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: stdio.c,v 1.49 2001/08/28 16:06:59 gshapiro Exp $")
d391 1
a391 1
	int oflags, tmp, fdflags, fd = (int) info;
@


1.1.1.1
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@@
