head	1.4;
access;
symbols
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.50
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.48
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.46
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.44
	OPENBSD_5_0:1.2.0.42
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.40
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.38
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.34
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.36
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.32
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.30
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.28
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.26
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.24
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.22
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.20
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.18
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.16
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.14
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SENDMAIL_8_12_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.4
date	2014.09.17.18.49.51;	author matthieu;	state dead;
branches;
next	1.3;
commitid	M7i5giHIoz3DMlTU;

1.3
date	2014.02.07.21.25.00;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Bye.
@
text
@/*
 * Copyright (c) 2000-2001 Proofpoint, Inc. and its suppliers.
 *      All rights reserved.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: wbuf.c,v 1.22 2013/11/22 20:51:44 ca Exp $")
#include <errno.h>
#include <sm/io.h>
#include "local.h"

/* Note: This function is called from a macro located in <sm/io.h> */

/*
**  SM_WBUF -- write character to and flush (likely now full) buffer
**
**  Write the given character into the (probably full) buffer for
**  the given file.  Flush the buffer out if it is or becomes full,
**  or if c=='\n' and the file is line buffered.
**
**	Parameters:
**		fp -- the file pointer
**		timeout -- time to complete operation (milliseconds)
**		c -- int representation of the character to add
**
**	Results:
**		Failure: -1 and sets errno
**		Success: int value of 'c'
*/

int
sm_wbuf(fp, timeout, c)
	register SM_FILE_T *fp;
	int timeout;
	register int c;
{
	register int n;

	/*
	**  In case we cannot write, or longjmp takes us out early,
	**  make sure w is 0 (if fully- or un-buffered) or -bf.smb_size
	**  (if line buffered) so that we will get called again.
	**  If we did not do this, a sufficient number of sm_io_putc()
	**  calls might wrap w from negative to positive.
	*/

	fp->f_w = fp->f_lbfsize;
	if (cantwrite(fp))
	{
		errno = EBADF;
		return SM_IO_EOF;
	}
	c = (unsigned char)c;

	/*
	**  If it is completely full, flush it out.  Then, in any case,
	**  stuff c into the buffer.  If this causes the buffer to fill
	**  completely, or if c is '\n' and the file is line buffered,
	**  flush it (perhaps a second time).  The second flush will always
	**  happen on unbuffered streams, where bf.smb_size==1; sm_io_flush()
	**  guarantees that sm_io_putc() will always call sm_wbuf() by setting
	**  w to 0, so we need not do anything else.
	**  Note for the timeout, only one of the sm_io_flush's will get called.
	*/

	n = fp->f_p - fp->f_bf.smb_base;
	if (n >= fp->f_bf.smb_size)
	{
		if (sm_io_flush(fp, timeout))
			return SM_IO_EOF; /* sm_io_flush() sets errno */
		n = 0;
	}
	fp->f_w--;
	*fp->f_p++ = c;
	if (++n == fp->f_bf.smb_size || (fp->f_flags & SMLBF && c == '\n'))
		if (sm_io_flush(fp, timeout))
			return SM_IO_EOF; /* sm_io_flush() sets errno */
	return c;
}
@


1.3
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.2
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: wbuf.c,v 1.21 2001/09/11 04:04:49 gshapiro Exp $")
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: wbuf.c,v 1.19 2001/03/05 03:22:41 ca Exp $")
@


1.1.1.1
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@@
