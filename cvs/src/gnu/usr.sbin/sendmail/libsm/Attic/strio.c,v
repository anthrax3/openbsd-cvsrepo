head	1.7;
access;
symbols
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SENDMAIL_8_12_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.7
date	2014.09.17.18.49.51;	author matthieu;	state dead;
branches;
next	1.6;
commitid	M7i5giHIoz3DMlTU;

1.6
date	2014.02.07.21.24.59;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.22.18.43.54;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.16.00.21.30;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.18.00.49.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bye.
@
text
@/*
 * Copyright (c) 2000-2002, 2004, 2005 Proofpoint, Inc. and its suppliers.
 *      All rights reserved.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 */

#include <sm/gen.h>
SM_IDSTR(id, "@@(#)$Sendmail: strio.c,v 1.45 2013/11/22 20:51:43 ca Exp $")
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <errno.h>
#include <sm/rpool.h>
#include <sm/io.h>
#include <sm/heap.h>
#include <sm/conf.h>
#include "local.h"

static int	sm_strsetmode __P((SM_FILE_T*, const int *));
static int	sm_strgetmode __P((SM_FILE_T*, int *));

/*
**  Cookie structure for the "strio" file type
*/

struct sm_str_obj
{
	char		*strio_base;
	char		*strio_end;
	size_t		strio_size;
	size_t		strio_offset;
	int		strio_flags;
	const void	*strio_rpool;
};

typedef struct sm_str_obj SM_STR_OBJ_T;

/*
**  SM_STRGROW -- increase storage space for string
**
**	Parameters:
**		s -- current cookie
**		size -- new storage size request
**
**	Returns:
**		true iff successful.
*/

static bool sm_strgrow __P((SM_STR_OBJ_T *, size_t));

static bool
sm_strgrow(s, size)
	SM_STR_OBJ_T *s;
	size_t size;
{
	register void *p;

	if (s->strio_size >= size)
		return true;
	p = sm_realloc(s->strio_base, size);
	if (p == NULL)
		return false;
	s->strio_base = p;
	s->strio_end = s->strio_base + size;
	s->strio_size = size;
	return true;
}

/*
**  SM_STRREAD -- read a portion of the string
**
**	Parameters:
**		fp -- the file pointer
**		buf -- location to place read data
**		n -- number of bytes to read
**
**	Returns:
**		Failure: -1 and sets errno
**		Success: >=0, number of bytes read
*/

ssize_t
sm_strread(fp, buf, n)
	SM_FILE_T *fp;
	char *buf;
	size_t n;
{
	register SM_STR_OBJ_T *s = fp->f_cookie;
	int len;

	if (!(s->strio_flags & SMRD) && !(s->strio_flags & SMRW))
	{
		errno = EBADF;
		return -1;
	}
	len = SM_MIN(s->strio_size - s->strio_offset, n);
	(void) memmove(buf, s->strio_base + s->strio_offset, len);
	s->strio_offset += len;
	return len;
}

/*
**  SM_STRWRITE -- write a portion of the string
**
**	Parameters:
**		fp -- the file pointer
**		buf -- location of data for writing
**		n -- number of bytes to write
**
**	Returns:
**		Failure: -1 and sets errno
**		Success: >=0, number of bytes written
*/

ssize_t
sm_strwrite(fp, buf, n)
	SM_FILE_T *fp;
	char const *buf;
	size_t n;
{
	register SM_STR_OBJ_T *s = fp->f_cookie;

	if (!(s->strio_flags & SMWR) && !(s->strio_flags & SMRW))
	{
		errno = EBADF;
		return -1;
	}
	if (n + s->strio_offset > s->strio_size)
	{
		if (!sm_strgrow(s, n + s->strio_offset))
			return 0;
	}
	(void) memmove(s->strio_base + s->strio_offset, buf, n);
	s->strio_offset += n;
	return n;
}

/*
**  SM_STRSEEK -- position the offset pointer for the string
**
**	Only SM_IO_SEEK_SET, SM_IO_SEEK_CUR and SM_IO_SEEK_END are valid
**	values for whence.
**
**	Parameters:
**		fp -- the file pointer
**		offset -- number of bytes offset from "base"
**		whence -- determines "base" for 'offset'
**
**	Returns:
**		Failure: -1 and sets errno
**		Success: >=0, number of bytes read
*/

off_t
sm_strseek(fp, offset, whence)
	SM_FILE_T *fp;
	off_t offset;
	int whence;
{
	register off_t ret;
	register SM_STR_OBJ_T *s = fp->f_cookie;

reseek:
	switch (whence)
	{
	  case SM_IO_SEEK_SET:
		ret = offset;
		break;
	  case SM_IO_SEEK_CUR:
		ret = s->strio_offset + offset;
		break;
	  case SM_IO_SEEK_END:
		ret = s->strio_size;
		break;
	  default:
		errno = EINVAL;
		return -1;
	}
	if (ret < 0 || ret > (off_t)(size_t)(-1))	/* XXX ugly */
		return -1;
	if ((size_t) ret > s->strio_size)
	{
		if (sm_strgrow(s, (size_t)ret))
			goto reseek;

		/* errno set by sm_strgrow */
		return -1;
	}
	s->strio_offset = (size_t) ret;
	return ret;
}

/*
**  SM_STROPEN -- open a string file type
**
**	Parameters:
**		fp -- file pointer open to be associated with
**		info -- initial contents (NULL for none)
**		flags -- flags for methods of access (was mode)
**		rpool -- resource pool to use memory from (if applicable)
**
**	Results:
**		Success: 0 (zero)
**		Failure: -1 and sets errno
*/

int
sm_stropen(fp, info, flags, rpool)
	SM_FILE_T *fp;
	const void *info;
	int flags;
	const void *rpool;
{
	register SM_STR_OBJ_T *s;

#if SM_RPOOL
	s = sm_rpool_malloc_x(rpool, sizeof(SM_STR_OBJ_T));
#else /* SM_RPOOL */
	s = sm_malloc(sizeof(SM_STR_OBJ_T));
	if (s == NULL)
		return -1;
#endif /* SM_RPOOL */

	fp->f_cookie = s;
	s->strio_rpool = rpool;
	s->strio_offset = 0;
	s->strio_size = 0;
	s->strio_base = NULL;
	s->strio_end = 0;

	switch (flags)
	{
	  case SM_IO_RDWR:
		s->strio_flags = SMRW;
		break;
	  case SM_IO_RDONLY:
		s->strio_flags = SMRD;
		break;
	  case SM_IO_WRONLY:
		s->strio_flags = SMWR;
		break;
	  case SM_IO_APPEND:
		if (s->strio_rpool == NULL)
			sm_free(s);
		errno = EINVAL;
		return -1;
	  default:
		if (s->strio_rpool == NULL)
			sm_free(s);
		errno = EINVAL;
		return -1;
	}

	if (info != NULL)
	{
		s->strio_base = sm_strdup_x(info);
		if (s->strio_base == NULL)
		{
			int save_errno = errno;

			if (s->strio_rpool == NULL)
				sm_free(s);
			errno = save_errno;
			return -1;
		}
		s->strio_size = strlen(info);
		s->strio_end = s->strio_base + s->strio_size;
	}
	return 0;
}

/*
**  SM_STRCLOSE -- close the string file type and free resources
**
**	Parameters:
**		fp -- file pointer
**
**	Results:
**		Success: 0 (zero)
*/

int
sm_strclose(fp)
	SM_FILE_T *fp;
{
	SM_STR_OBJ_T *s = fp->f_cookie;

#if !SM_RPOOL
	sm_free(s->strio_base);
	s->strio_base = NULL;
#endif /* !SM_RPOOL */
	return 0;
}

/*
**  SM_STRSETMODE -- set mode info for the file
**
**	 Note: changing the mode can be a safe way to have the "parent"
**	 set up a string that the "child" is not to modify
**
**	Parameters:
**		fp -- the file pointer
**		mode -- location of new mode to set
**
**	Results:
**		Success: 0 (zero)
**		Failure: -1 and sets errno
*/

static int
sm_strsetmode(fp, mode)
	SM_FILE_T *fp;
	const int *mode;
{
	register SM_STR_OBJ_T *s = fp->f_cookie;
	int flags;

	switch (*mode)
	{
	  case SM_IO_RDWR:
		flags = SMRW;
		break;
	  case SM_IO_RDONLY:
		flags = SMRD;
		break;
	  case SM_IO_WRONLY:
		flags = SMWR;
		break;
	  case SM_IO_APPEND:
		errno = EINVAL;
		return -1;
	  default:
		errno = EINVAL;
		return -1;
	}
	s->strio_flags &= ~SMMODEMASK;
	s->strio_flags |= flags;
	return 0;
}

/*
**  SM_STRGETMODE -- get mode info for the file
**
**	Parameters:
**		fp -- the file pointer
**		mode -- location to store current mode
**
**	Results:
**		Success: 0 (zero)
**		Failure: -1 and sets errno
*/

static int
sm_strgetmode(fp, mode)
	SM_FILE_T *fp;
	int *mode;
{
	register SM_STR_OBJ_T *s = fp->f_cookie;

	switch (s->strio_flags & SMMODEMASK)
	{
	  case SMRW:
		*mode = SM_IO_RDWR;
		break;
	  case SMRD:
		*mode = SM_IO_RDONLY;
		break;
	  case SMWR:
		*mode = SM_IO_WRONLY;
		break;
	  default:
		errno = EINVAL;
		return -1;
	}
	return 0;
}

/*
**  SM_STRSETINFO -- set info for the file
**
**	Currently only SM_IO_WHAT_MODE is supported for 'what'.
**
**	Parameters:
**		fp -- the file pointer
**		what -- type of information to set
**		valp -- location to data for doing set
**
**	Results:
**		Failure: -1 and sets errno
**		Success: sm_strsetmode() return [0 (zero)]
*/

int
sm_strsetinfo(fp, what, valp)
	SM_FILE_T *fp;
	int what;
	void *valp;
{
	switch(what)
	{
	  case SM_IO_WHAT_MODE:
		return sm_strsetmode(fp, (int *) valp);
	  default:
		errno = EINVAL;
		return -1;
	}
}

/*
**  SM_STRGETINFO -- get info for the file
**
**	Currently only SM_IO_WHAT_MODE is supported for 'what'.
**
**	Parameters:
**		fp -- the file pointer
**		what -- type of information requested
**		valp -- location to return information in
**
**	Results:
**		Failure: -1 and sets errno
**		Success: sm_strgetmode() return [0 (zero)]
*/

int
sm_strgetinfo(fp, what, valp)
	SM_FILE_T *fp;
	int what;
	void *valp;
{
	switch(what)
	{
	  case SM_IO_WHAT_MODE:
		return sm_strgetmode(fp, (int *) valp);
	  default:
		errno = EINVAL;
		return -1;
	}
}

/*
**  SM_STRIO_INIT -- initializes a write-only string type
**
**  Original comments below. This function does not appear to be used anywhere.
**  The same functionality can be done by changing the mode of the file.
**  ------------
** sm_strio_init initializes an SM_FILE_T structure as a write-only file
** that writes into the specified buffer:
** - Use sm_io_putc, sm_io_fprintf, etc, to write into the buffer.
**   Attempts to write more than size-1 characters into the buffer will fail
**   silently (no error is reported).
** - Use sm_io_fflush to nul terminate the string in the buffer
**   (the write pointer is not advanced).
** No memory is allocated either by sm_strio_init or by sm_io_{putc,write} etc.
**
**	Parameters:
**		fp -- file pointer
**		buf -- memory location for stored data
**		size -- size of 'buf'
**
**	Results:
**		none.
*/

void
sm_strio_init(fp, buf, size)
	SM_FILE_T *fp;
	char *buf;
	size_t size;
{
	fp->sm_magic = SmFileMagic;
	fp->f_flags = SMWR | SMSTR;
	fp->f_file = -1;
	fp->f_bf.smb_base = fp->f_p = (unsigned char *) buf;
	fp->f_bf.smb_size = fp->f_w = (size ? size - 1 : 0);
	fp->f_lbfsize = 0;
	fp->f_r = 0;
	fp->f_read = NULL;
	fp->f_seek = NULL;
	fp->f_getinfo = NULL;
	fp->f_setinfo = NULL;
}
@


1.6
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.5
log
@Update to sendmail 8.13.6
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2002, 2004, 2005 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_IDSTR(id, "@@(#)$Sendmail: strio.c,v 1.44 2005/06/09 21:40:19 ca Exp $")
@


1.4
log
@Update to sendmail-8.13.2
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2002, 2004 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_IDSTR(id, "@@(#)$Sendmail: strio.c,v 1.43 2004/08/03 20:48:30 ca Exp $")
d362 1
a362 1
int
@


1.3
log
@update to sendmail 8.12.3
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2002 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_IDSTR(id, "@@(#)$Sendmail: strio.c,v 1.42 2002/02/11 23:05:50 gshapiro Exp $")
d28 3
d319 1
a319 1
int
@


1.2
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_IDSTR(id, "@@(#)$Sendmail: strio.c,v 1.40 2001/09/11 04:04:49 gshapiro Exp $")
d34 6
a39 5
	char	*strio_base;
	char	*strio_end;
	size_t	strio_size;
	size_t	strio_offset;
	int	strio_flags;
d113 1
a113 1
**		buf -- location of data for writting
d204 2
a205 2
**		info -- flags for methods of access (was mode)
**		flags -- ignored
a220 1
	int *strmode = (int *) info;
a226 2
	{
		errno = ENOMEM;
a227 1
	}
d231 1
d233 2
a234 1
	s->strio_base = 0;
d236 2
a237 1
	switch (*strmode)
d249 3
d254 2
d258 16
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
SM_IDSTR(id, "@@(#)$Sendmail: strio.c,v 1.38 2001/03/06 17:27:06 ca Exp $")
@


1.1.1.1
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@@
