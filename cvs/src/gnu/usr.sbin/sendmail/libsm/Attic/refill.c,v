head	1.7;
access;
symbols
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	SENDMAIL_8_12_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.7
date	2014.09.17.18.49.51;	author matthieu;	state dead;
branches;
next	1.6;
commitid	M7i5giHIoz3DMlTU;

1.6
date	2014.02.07.21.24.59;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.22.18.43.54;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.24.03.59.26;	author millert;	state Exp;
branches
	1.4.4.1
	1.4.6.1
	1.4.8.1;
next	1.3;

1.3
date	2003.01.01.19.59.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;

1.4.4.1
date	2006.03.24.05.42.48;	author brad;	state Exp;
branches;
next	;

1.4.6.1
date	2006.03.24.05.56.17;	author brad;	state Exp;
branches;
next	;

1.4.8.1
date	2006.03.25.01.49.37;	author brad;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bye.
@
text
@/*
 * Copyright (c) 2000-2001, 2005-2006 Proofpoint, Inc. and its suppliers.
 *      All rights reserved.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: refill.c,v 1.54 2013/11/22 20:51:43 ca Exp $")
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <setjmp.h>
#include <signal.h>
#include <sm/time.h>
#include <fcntl.h>
#include <string.h>
#include <sm/io.h>
#include <sm/conf.h>
#include <sm/assert.h>
#include "local.h"

static int sm_lflush __P((SM_FILE_T *, int *));

/*
**  SM_IO_RD_TIMEOUT -- measured timeout for reads
**
**  This #define uses a select() to wait for the 'fd' to become readable.
**  The select() can be active for up to 'To' time. The select() may not
**  use all of the the 'To' time. Hence, the amount of "wall-clock" time is
**  measured to decide how much to subtract from 'To' to update it. On some
**  BSD-based/like systems the timeout for a select() is updated for the
**  amount of time used. On many/most systems this does not happen. Therefore
**  the updating of 'To' must be done ourselves; a copy of 'To' is passed
**  since a BSD-like system will have updated it and we don't want to
**  double the time used!
**  Note: if a valid 'fd' doesn't exist yet, don't use this (e.g. the
**  sendmail buffered file type in sendmail/bf.c; see use below).
**
**	Parameters
**		fp -- the file pointer for the active file
**		fd -- raw file descriptor (from 'fp') to use for select()
**		to -- struct timeval of the timeout
**		timeout -- the original timeout value
**		sel_ret -- the return value from the select()
**
**	Returns:
**		nothing, flow through code
*/

#define SM_IO_RD_TIMEOUT(fp, fd, to, timeout, sel_ret)			\
{									\
	struct timeval sm_io_to_before, sm_io_to_after, sm_io_to_diff;	\
	fd_set sm_io_to_mask, sm_io_x_mask;				\
	errno = 0;							\
	if (timeout == SM_TIME_IMMEDIATE)				\
	{								\
		errno = EAGAIN;						\
		return SM_IO_EOF;					\
	}								\
	if (FD_SETSIZE > 0 && (fd) >= FD_SETSIZE)			\
	{								\
		errno = EINVAL;						\
		return SM_IO_EOF;					\
	}								\
	FD_ZERO(&sm_io_to_mask);					\
	FD_SET((fd), &sm_io_to_mask);					\
	FD_ZERO(&sm_io_x_mask);						\
	FD_SET((fd), &sm_io_x_mask);					\
	if (gettimeofday(&sm_io_to_before, NULL) < 0)			\
		return SM_IO_EOF;					\
	do								\
	{								\
		(sel_ret) = select((fd) + 1, &sm_io_to_mask, NULL,	\
			   	&sm_io_x_mask, (to));			\
	} while ((sel_ret) < 0 && errno == EINTR);			\
	if ((sel_ret) < 0)						\
	{								\
		/* something went wrong, errno set */			\
		fp->f_r = 0;						\
		fp->f_flags |= SMERR;					\
		return SM_IO_EOF;					\
	}								\
	else if ((sel_ret) == 0)					\
	{								\
		/* timeout */						\
		errno = EAGAIN;						\
		return SM_IO_EOF;					\
	}								\
	/* calulate wall-clock time used */				\
	if (gettimeofday(&sm_io_to_after, NULL) < 0)			\
		return SM_IO_EOF;					\
	timersub(&sm_io_to_after, &sm_io_to_before, &sm_io_to_diff);	\
	timersub((to), &sm_io_to_diff, (to));				\
}

/*
**  SM_LFLUSH -- flush a file if it is line buffered and writable
**
**	Parameters:
**		fp -- file pointer to flush
**		timeout -- original timeout value (in milliseconds)
**
**	Returns:
**		Failure: returns SM_IO_EOF and sets errno
**		Success: returns 0
*/

static int
sm_lflush(fp, timeout)
	SM_FILE_T *fp;
	int *timeout;
{

	if ((fp->f_flags & (SMLBF|SMWR)) == (SMLBF|SMWR))
		return sm_flush(fp, timeout);
	return 0;
}

/*
**  SM_REFILL -- refill a buffer
**
**	Parameters:
**		fp -- file pointer for buffer refill
**		timeout -- time to complete filling the buffer in milliseconds
**
**	Returns:
**		Success: returns 0
**		Failure: returns SM_IO_EOF
*/

int
sm_refill(fp, timeout)
	register SM_FILE_T *fp;
	int timeout;
{
	int ret, r;
	struct timeval to;
	int fd;

	if (timeout == SM_TIME_DEFAULT)
		timeout = fp->f_timeout;
	if (timeout == SM_TIME_IMMEDIATE)
	{
		/*
		**  Filling the buffer will take time and we are wanted to
		**  return immediately. And we're not EOF or ERR really.
		**  So... the failure is we couldn't do it in time.
		*/

		errno = EAGAIN;
		fp->f_r = 0; /* just to be sure */
		return 0;
	}

	/* make sure stdio is set up */
	if (!Sm_IO_DidInit)
		sm_init();

	fp->f_r = 0;		/* largely a convenience for callers */

	if (fp->f_flags & SMFEOF)
		return SM_IO_EOF;

	SM_CONVERT_TIME(fp, fd, timeout, &to);

	/* if not already reading, have to be reading and writing */
	if ((fp->f_flags & SMRD) == 0)
	{
		if ((fp->f_flags & SMRW) == 0)
		{
			errno = EBADF;
			fp->f_flags |= SMERR;
			return SM_IO_EOF;
		}

		/* switch to reading */
		if (fp->f_flags & SMWR)
		{
			if (sm_flush(fp, &timeout))
				return SM_IO_EOF;
			fp->f_flags &= ~SMWR;
			fp->f_w = 0;
			fp->f_lbfsize = 0;
		}
		fp->f_flags |= SMRD;
	}
	else
	{
		/*
		**  We were reading.  If there is an ungetc buffer,
		**  we must have been reading from that.  Drop it,
		**  restoring the previous buffer (if any).  If there
		**  is anything in that buffer, return.
		*/

		if (HASUB(fp))
		{
			FREEUB(fp);
			if ((fp->f_r = fp->f_ur) != 0)
			{
				fp->f_p = fp->f_up;

				/* revert blocking state */
				return 0;
			}
		}
	}

	if (fp->f_bf.smb_base == NULL)
		sm_makebuf(fp);

	/*
	**  Before reading from a line buffered or unbuffered file,
	**  flush all line buffered output files, per the ANSI C standard.
	*/

	if (fp->f_flags & (SMLBF|SMNBF))
		(void) sm_fwalk(sm_lflush, &timeout);

	/*
	**  If this file is linked to another, and we are going to hang
	**  on the read, flush the linked file before continuing.
	*/

	if (fp->f_flushfp != NULL &&
	    (*fp->f_getinfo)(fp, SM_IO_IS_READABLE, NULL) <= 0)
		sm_flush(fp->f_flushfp, &timeout);

	fp->f_p = fp->f_bf.smb_base;

	/*
	**  The do-while loop stops trying to read when something is read
	**  or it appears that the timeout has expired before finding
	**  something available to be read (via select()).
	*/

	ret = 0;
	do
	{
		errno = 0; /* needed to ensure EOF correctly found */
		r = (*fp->f_read)(fp, (char *)fp->f_p, fp->f_bf.smb_size);
		if (r <= 0)
		{
			if (r == 0 && errno == 0)
				break; /* EOF found */
			if (IS_IO_ERROR(fd, r, timeout))
				goto err; /* errno set */

			/* read would block */
			SM_IO_RD_TIMEOUT(fp, fd, &to, timeout, ret);
		}
	} while (r <= 0 && ret > 0);

err:
	if (r <= 0)
	{
		if (r == 0)
			fp->f_flags |= SMFEOF;
		else
			fp->f_flags |= SMERR;
		fp->f_r = 0;
		return SM_IO_EOF;
	}
	fp->f_r = r;
	return 0;
}

/*
**  SM_RGET -- refills buffer and returns first character
**
**  Handle sm_getc() when the buffer ran out:
**  Refill, then return the first character in the newly-filled buffer.
**
**	Parameters:
**		fp -- file pointer to work on
**		timeout -- time to complete refill
**
**	Returns:
**		Success: first character in refilled buffer as an int
**		Failure: SM_IO_EOF
*/

int
sm_rget(fp, timeout)
	register SM_FILE_T *fp;
	int timeout;
{
	if (sm_refill(fp, timeout) == 0)
	{
		fp->f_r--;
		return *fp->f_p++;
	}
	return SM_IO_EOF;
}
@


1.6
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.5
log
@Update to sendmail 8.13.6
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001, 2005-2006 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: refill.c,v 1.53 2006/02/28 18:48:25 ca Exp $")
@


1.4
log
@Update to sendmail.8.13.0
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Sendmail, Inc. and its suppliers.
d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: refill.c,v 1.50 2002/09/09 21:50:10 gshapiro Exp $")
d22 1
a22 1
#include <sys/time.h>
d79 5
a83 2
	(sel_ret) = select((fd) + 1, &sm_io_to_mask, NULL,		\
			   &sm_io_x_mask, (to));			\
d100 1
a100 1
	timersub(&sm_io_to_before, &sm_io_to_after, &sm_io_to_diff);	\
@


1.4.8.1
log
@Apply the patch for the async signals race condition in Sendmail.
@
text
@d79 2
a80 5
	do								\
	{								\
		(sel_ret) = select((fd) + 1, &sm_io_to_mask, NULL,	\
			   	&sm_io_x_mask, (to));			\
	} while ((sel_ret) < 0 && errno == EINTR);			\
d97 1
a97 1
	timersub(&sm_io_to_after, &sm_io_to_before, &sm_io_to_diff);	\
@


1.4.6.1
log
@Apply the patch for the async signals race condition in Sendmail.
@
text
@d79 2
a80 5
	do								\
	{								\
		(sel_ret) = select((fd) + 1, &sm_io_to_mask, NULL,	\
			   	&sm_io_x_mask, (to));			\
	} while ((sel_ret) < 0 && errno == EINTR);			\
d97 1
a97 1
	timersub(&sm_io_to_after, &sm_io_to_before, &sm_io_to_diff);	\
@


1.4.4.1
log
@Apply the patch for the async signals race condition in Sendmail.
@
text
@d79 2
a80 5
	do								\
	{								\
		(sel_ret) = select((fd) + 1, &sm_io_to_mask, NULL,	\
			   	&sm_io_x_mask, (to));			\
	} while ((sel_ret) < 0 && errno == EINTR);			\
d97 1
a97 1
	timersub(&sm_io_to_after, &sm_io_to_before, &sm_io_to_diff);	\
@


1.3
log
@update to sendmail 8.12.7
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: refill.c,v 1.49.2.1 2002/09/09 21:38:08 gshapiro Exp $")
@


1.2
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: refill.c,v 1.49 2001/09/11 04:04:49 gshapiro Exp $")
d66 5
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
SM_RCSID("@@(#)$Sendmail: refill.c,v 1.47 2001/06/06 00:22:56 gshapiro Exp $")
@


1.1.1.1
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@@
