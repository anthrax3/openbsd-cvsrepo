head	1.9;
access;
symbols
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.46
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.44
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.42
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.40
	OPENBSD_5_0:1.7.0.38
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.36
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.34
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.30
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.32
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.28
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.26
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.24
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.22
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.20
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.18
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.16
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.14
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.12
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.10
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.8
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SENDMAIL_8_12_0:1.1.1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	SENDMAIL_8_11_2:1.1.1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SENDMAIL_8_10_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.09.17.18.49.51;	author matthieu;	state dead;
branches;
next	1.8;
commitid	M7i5giHIoz3DMlTU;

1.8
date	2014.02.07.21.25.00;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.03.17.25.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.18.00.49.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.01.17.18.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.11.19.02.49;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.15.21.09.03;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.07.19.20.36;	author millert;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2000.04.02.19.05.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.02.19.05.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.01.15.20.52.42;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.09.11.18.55.52;	author millert;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.31.00.29.12;	author miod;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Bye.
@
text
@/*
** Copyright (c) 1999-2002 Proofpoint, Inc. and its suppliers.
**	All rights reserved.
**
** By using this file, you agree to the terms and conditions set
** forth in the LICENSE file which can be found at the top level of
** the sendmail distribution.
*/

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: smndbm.c,v 8.55 2013/11/22 20:51:49 ca Exp $")

#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>

#include <sendmail/sendmail.h>
#include <libsmdb/smdb.h>

#ifdef NDBM

# define SMNDB_DIR_FILE_EXTENSION "dir"
# define SMNDB_PAG_FILE_EXTENSION "pag"

struct smdb_dbm_database_struct
{
	DBM	*smndbm_dbm;
	int	smndbm_lock_fd;
	bool	smndbm_cursor_in_use;
};
typedef struct smdb_dbm_database_struct SMDB_DBM_DATABASE;

struct smdb_dbm_cursor_struct
{
	SMDB_DBM_DATABASE	*smndbmc_db;
	datum			smndbmc_current_key;
};
typedef struct smdb_dbm_cursor_struct SMDB_DBM_CURSOR;

/*
**  SMDB_PUT_FLAGS_TO_NDBM_FLAGS -- Translates smdb put flags to ndbm put flags.
**
**	Parameters:
**		flags -- The flags to translate.
**
**	Returns:
**		The ndbm flags that are equivalent to the smdb flags.
**
**	Notes:
**		Any invalid flags are ignored.
**
*/

int
smdb_put_flags_to_ndbm_flags(flags)
	SMDB_FLAG flags;
{
	int return_flags;

	return_flags = 0;
	if (bitset(SMDBF_NO_OVERWRITE, flags))
		return_flags = DBM_INSERT;
	else
		return_flags = DBM_REPLACE;

	return return_flags;
}

/*
**  Except for smdb_ndbm_open, the rest of these function correspond to the
**  interface laid out in smdb.h.
*/

SMDB_DBM_DATABASE *
smdbm_malloc_database()
{
	SMDB_DBM_DATABASE *db;

	db = (SMDB_DBM_DATABASE *) malloc(sizeof(SMDB_DBM_DATABASE));
	if (db != NULL)
	{
		db->smndbm_dbm = NULL;
		db->smndbm_lock_fd = -1;
		db->smndbm_cursor_in_use = false;
	}

	return db;
}

int
smdbm_close(database)
	SMDB_DATABASE *database;
{
	SMDB_DBM_DATABASE *db = (SMDB_DBM_DATABASE *) database->smdb_impl;
	DBM *dbm = ((SMDB_DBM_DATABASE *) database->smdb_impl)->smndbm_dbm;

	dbm_close(dbm);
	if (db->smndbm_lock_fd != -1)
		close(db->smndbm_lock_fd);

	free(db);
	database->smdb_impl = NULL;

	return SMDBE_OK;
}

int
smdbm_del(database, key, flags)
	SMDB_DATABASE *database;
	SMDB_DBENT *key;
	unsigned int flags;
{
	int result;
	DBM *dbm = ((SMDB_DBM_DATABASE *) database->smdb_impl)->smndbm_dbm;
	datum dbkey;

	(void) memset(&dbkey, '\0', sizeof dbkey);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;

	errno = 0;
	result = dbm_delete(dbm, dbkey);
	if (result != 0)
	{
		int save_errno = errno;

		if (dbm_error(dbm))
			return SMDBE_IO_ERROR;

		if (save_errno != 0)
			return save_errno;

		return SMDBE_NOT_FOUND;
	}
	return SMDBE_OK;
}

int
smdbm_fd(database, fd)
	SMDB_DATABASE *database;
	int *fd;
{
	DBM *dbm = ((SMDB_DBM_DATABASE *) database->smdb_impl)->smndbm_dbm;

	*fd = dbm_dirfno(dbm);
	if (*fd <= 0)
		return EINVAL;

	return SMDBE_OK;
}

int
smdbm_lockfd(database)
	SMDB_DATABASE *database;
{
	SMDB_DBM_DATABASE *db = (SMDB_DBM_DATABASE *) database->smdb_impl;

	return db->smndbm_lock_fd;
}

int
smdbm_get(database, key, data, flags)
	SMDB_DATABASE *database;
	SMDB_DBENT *key;
	SMDB_DBENT *data;
	unsigned int flags;
{
	DBM *dbm = ((SMDB_DBM_DATABASE *) database->smdb_impl)->smndbm_dbm;
	datum dbkey, dbdata;

	(void) memset(&dbkey, '\0', sizeof dbkey);
	(void) memset(&dbdata, '\0', sizeof dbdata);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;

	errno = 0;
	dbdata = dbm_fetch(dbm, dbkey);
	if (dbdata.dptr == NULL)
	{
		int save_errno = errno;

		if (dbm_error(dbm))
			return SMDBE_IO_ERROR;

		if (save_errno != 0)
			return save_errno;

		return SMDBE_NOT_FOUND;
	}
	data->data = dbdata.dptr;
	data->size = dbdata.dsize;
	return SMDBE_OK;
}

int
smdbm_put(database, key, data, flags)
	SMDB_DATABASE *database;
	SMDB_DBENT *key;
	SMDB_DBENT *data;
	unsigned int flags;
{
	int result;
	int save_errno;
	DBM *dbm = ((SMDB_DBM_DATABASE *) database->smdb_impl)->smndbm_dbm;
	datum dbkey, dbdata;

	(void) memset(&dbkey, '\0', sizeof dbkey);
	(void) memset(&dbdata, '\0', sizeof dbdata);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;
	dbdata.dptr = data->data;
	dbdata.dsize = data->size;

	errno = 0;
	result = dbm_store(dbm, dbkey, dbdata,
			   smdb_put_flags_to_ndbm_flags(flags));
	switch (result)
	{
	  case 1:
		return SMDBE_DUPLICATE;

	  case 0:
		return SMDBE_OK;

	  default:
		save_errno = errno;

		if (dbm_error(dbm))
			return SMDBE_IO_ERROR;

		if (save_errno != 0)
			return save_errno;

		return SMDBE_IO_ERROR;
	}
	/* NOTREACHED */
}

int
smndbm_set_owner(database, uid, gid)
	SMDB_DATABASE *database;
	uid_t uid;
	gid_t gid;
{
# if HASFCHOWN
	int fd;
	int result;
	DBM *dbm = ((SMDB_DBM_DATABASE *) database->smdb_impl)->smndbm_dbm;

	fd = dbm_dirfno(dbm);
	if (fd <= 0)
		return EINVAL;

	result = fchown(fd, uid, gid);
	if (result < 0)
		return errno;

	fd = dbm_pagfno(dbm);
	if (fd <= 0)
		return EINVAL;

	result = fchown(fd, uid, gid);
	if (result < 0)
		return errno;
# endif /* HASFCHOWN */

	return SMDBE_OK;
}

int
smdbm_sync(database, flags)
	SMDB_DATABASE *database;
	unsigned int flags;
{
	return SMDBE_UNSUPPORTED;
}

int
smdbm_cursor_close(cursor)
	SMDB_CURSOR *cursor;
{
	SMDB_DBM_CURSOR *dbm_cursor = (SMDB_DBM_CURSOR *) cursor->smdbc_impl;
	SMDB_DBM_DATABASE *db = dbm_cursor->smndbmc_db;

	if (!db->smndbm_cursor_in_use)
		return SMDBE_NOT_A_VALID_CURSOR;

	db->smndbm_cursor_in_use = false;
	free(dbm_cursor);
	free(cursor);

	return SMDBE_OK;
}

int
smdbm_cursor_del(cursor, flags)
	SMDB_CURSOR *cursor;
	unsigned int flags;
{
	int result;
	SMDB_DBM_CURSOR *dbm_cursor = (SMDB_DBM_CURSOR *) cursor->smdbc_impl;
	SMDB_DBM_DATABASE *db = dbm_cursor->smndbmc_db;
	DBM *dbm = db->smndbm_dbm;

	errno = 0;
	result = dbm_delete(dbm, dbm_cursor->smndbmc_current_key);
	if (result != 0)
	{
		int save_errno = errno;

		if (dbm_error(dbm))
			return SMDBE_IO_ERROR;

		if (save_errno != 0)
			return save_errno;

		return SMDBE_NOT_FOUND;
	}
	return SMDBE_OK;
}

int
smdbm_cursor_get(cursor, key, value, flags)
	SMDB_CURSOR *cursor;
	SMDB_DBENT *key;
	SMDB_DBENT *value;
	SMDB_FLAG flags;
{
	SMDB_DBM_CURSOR *dbm_cursor = (SMDB_DBM_CURSOR *) cursor->smdbc_impl;
	SMDB_DBM_DATABASE *db = dbm_cursor->smndbmc_db;
	DBM *dbm = db->smndbm_dbm;
	datum dbkey, dbdata;

	(void) memset(&dbkey, '\0', sizeof dbkey);
	(void) memset(&dbdata, '\0', sizeof dbdata);

	if (flags == SMDB_CURSOR_GET_RANGE)
		return SMDBE_UNSUPPORTED;

	if (dbm_cursor->smndbmc_current_key.dptr == NULL)
	{
		dbm_cursor->smndbmc_current_key = dbm_firstkey(dbm);
		if (dbm_cursor->smndbmc_current_key.dptr == NULL)
		{
			if (dbm_error(dbm))
				return SMDBE_IO_ERROR;
			return SMDBE_LAST_ENTRY;
		}
	}
	else
	{
		dbm_cursor->smndbmc_current_key = dbm_nextkey(dbm);
		if (dbm_cursor->smndbmc_current_key.dptr == NULL)
		{
			if (dbm_error(dbm))
				return SMDBE_IO_ERROR;
			return SMDBE_LAST_ENTRY;
		}
	}

	errno = 0;
	dbdata = dbm_fetch(dbm, dbm_cursor->smndbmc_current_key);
	if (dbdata.dptr == NULL)
	{
		int save_errno = errno;

		if (dbm_error(dbm))
			return SMDBE_IO_ERROR;

		if (save_errno != 0)
			return save_errno;

		return SMDBE_NOT_FOUND;
	}
	value->data = dbdata.dptr;
	value->size = dbdata.dsize;
	key->data = dbm_cursor->smndbmc_current_key.dptr;
	key->size = dbm_cursor->smndbmc_current_key.dsize;

	return SMDBE_OK;
}

int
smdbm_cursor_put(cursor, key, value, flags)
	SMDB_CURSOR *cursor;
	SMDB_DBENT *key;
	SMDB_DBENT *value;
	SMDB_FLAG flags;
{
	int result;
	int save_errno;
	SMDB_DBM_CURSOR *dbm_cursor = (SMDB_DBM_CURSOR *) cursor->smdbc_impl;
	SMDB_DBM_DATABASE *db = dbm_cursor->smndbmc_db;
	DBM *dbm = db->smndbm_dbm;
	datum dbdata;

	(void) memset(&dbdata, '\0', sizeof dbdata);
	dbdata.dptr = value->data;
	dbdata.dsize = value->size;

	errno = 0;
	result = dbm_store(dbm, dbm_cursor->smndbmc_current_key, dbdata,
			   smdb_put_flags_to_ndbm_flags(flags));
	switch (result)
	{
	  case 1:
		return SMDBE_DUPLICATE;

	  case 0:
		return SMDBE_OK;

	  default:
		save_errno = errno;

		if (dbm_error(dbm))
			return SMDBE_IO_ERROR;

		if (save_errno != 0)
			return save_errno;

		return SMDBE_IO_ERROR;
	}
	/* NOTREACHED */
}

int
smdbm_cursor(database, cursor, flags)
	SMDB_DATABASE *database;
	SMDB_CURSOR **cursor;
	SMDB_FLAG flags;
{
	SMDB_DBM_DATABASE *db = (SMDB_DBM_DATABASE *) database->smdb_impl;
	SMDB_CURSOR *cur;
	SMDB_DBM_CURSOR *dbm_cursor;

	if (db->smndbm_cursor_in_use)
		return SMDBE_ONLY_SUPPORTS_ONE_CURSOR;

	db->smndbm_cursor_in_use = true;
	dbm_cursor = (SMDB_DBM_CURSOR *) malloc(sizeof(SMDB_DBM_CURSOR));
	if (dbm_cursor == NULL)
		return SMDBE_MALLOC;
	dbm_cursor->smndbmc_db = db;
	dbm_cursor->smndbmc_current_key.dptr = NULL;
	dbm_cursor->smndbmc_current_key.dsize = 0;

	cur = (SMDB_CURSOR*) malloc(sizeof(SMDB_CURSOR));
	if (cur == NULL)
	{
		free(dbm_cursor);
		return SMDBE_MALLOC;
	}

	cur->smdbc_impl = dbm_cursor;
	cur->smdbc_close = smdbm_cursor_close;
	cur->smdbc_del = smdbm_cursor_del;
	cur->smdbc_get = smdbm_cursor_get;
	cur->smdbc_put = smdbm_cursor_put;
	*cursor = cur;

	return SMDBE_OK;
}
/*
**  SMDB_NDBM_OPEN -- Opens a ndbm database.
**
**	Parameters:
**		database -- An unallocated database pointer to a pointer.
**		db_name -- The name of the database without extension.
**		mode -- File permisions on a created database.
**		mode_mask -- Mode bits that much match on an opened database.
**		sff -- Flags to safefile.
**		type -- The type of database to open.
**			Only SMDB_NDBM is supported.
**		user_info -- Information on the user to use for file
**			    permissions.
**		db_params -- No params are supported.
**
**	Returns:
**		SMDBE_OK -- Success, otherwise errno:
**		SMDBE_MALLOC -- Cannot allocate memory.
**		SMDBE_UNSUPPORTED -- The type is not supported.
**		SMDBE_GDBM_IS_BAD -- We have detected GDBM and we don't
**				    like it.
**		SMDBE_BAD_OPEN -- dbm_open failed and errno was not set.
**		Anything else: errno
*/

int
smdb_ndbm_open(database, db_name, mode, mode_mask, sff, type, user_info,
	       db_params)
	SMDB_DATABASE **database;
	char *db_name;
	int mode;
	int mode_mask;
	long sff;
	SMDB_DBTYPE type;
	SMDB_USER_INFO *user_info;
	SMDB_DBPARAMS *db_params;
{
	bool lockcreated = false;
	int result;
	int lock_fd;
	SMDB_DATABASE *smdb_db;
	SMDB_DBM_DATABASE *db;
	DBM *dbm = NULL;
	struct stat dir_stat_info;
	struct stat pag_stat_info;

	result = SMDBE_OK;
	*database = NULL;

	if (type == NULL)
		return SMDBE_UNKNOWN_DB_TYPE;

	result = smdb_setup_file(db_name, SMNDB_DIR_FILE_EXTENSION, mode_mask,
				 sff, user_info, &dir_stat_info);
	if (result != SMDBE_OK)
		return result;

	result = smdb_setup_file(db_name, SMNDB_PAG_FILE_EXTENSION, mode_mask,
				 sff, user_info, &pag_stat_info);
	if (result != SMDBE_OK)
		return result;

	if ((dir_stat_info.st_mode == ST_MODE_NOFILE ||
	     pag_stat_info.st_mode == ST_MODE_NOFILE) &&
	    bitset(mode, O_CREAT))
		lockcreated = true;

	lock_fd = -1;
	result = smdb_lock_file(&lock_fd, db_name, mode, sff,
				SMNDB_DIR_FILE_EXTENSION);
	if (result != SMDBE_OK)
		return result;

	if (lockcreated)
	{
		int pag_fd;

		/* Need to pre-open the .pag file as well with O_EXCL */
		result = smdb_lock_file(&pag_fd, db_name, mode, sff,
					SMNDB_PAG_FILE_EXTENSION);
		if (result != SMDBE_OK)
		{
			(void) close(lock_fd);
			return result;
		}
		(void) close(pag_fd);

		mode |= O_TRUNC;
		mode &= ~(O_CREAT|O_EXCL);
	}

	smdb_db = smdb_malloc_database();
	if (smdb_db == NULL)
		result = SMDBE_MALLOC;

	db = smdbm_malloc_database();
	if (db == NULL)
		result = SMDBE_MALLOC;

	/* Try to open database */
	if (result == SMDBE_OK)
	{
		db->smndbm_lock_fd = lock_fd;

		errno = 0;
		dbm = dbm_open(db_name, mode, DBMMODE);
		if (dbm == NULL)
		{
			if (errno == 0)
				result = SMDBE_BAD_OPEN;
			else
				result = errno;
		}
		db->smndbm_dbm = dbm;
	}

	/* Check for GDBM */
	if (result == SMDBE_OK)
	{
		if (dbm_dirfno(dbm) == dbm_pagfno(dbm))
			result = SMDBE_GDBM_IS_BAD;
	}

	/* Check for filechanged */
	if (result == SMDBE_OK)
	{
		result = smdb_filechanged(db_name, SMNDB_DIR_FILE_EXTENSION,
					  dbm_dirfno(dbm), &dir_stat_info);
		if (result == SMDBE_OK)
		{
			result = smdb_filechanged(db_name,
						  SMNDB_PAG_FILE_EXTENSION,
						  dbm_pagfno(dbm),
						  &pag_stat_info);
		}
	}

	/* XXX Got to get fchown stuff in here */

	/* Setup driver if everything is ok */
	if (result == SMDBE_OK)
	{
		*database = smdb_db;

		smdb_db->smdb_close = smdbm_close;
		smdb_db->smdb_del = smdbm_del;
		smdb_db->smdb_fd = smdbm_fd;
		smdb_db->smdb_lockfd = smdbm_lockfd;
		smdb_db->smdb_get = smdbm_get;
		smdb_db->smdb_put = smdbm_put;
		smdb_db->smdb_set_owner = smndbm_set_owner;
		smdb_db->smdb_sync = smdbm_sync;
		smdb_db->smdb_cursor = smdbm_cursor;

		smdb_db->smdb_impl = db;

		return SMDBE_OK;
	}

	/* If we're here, something bad happened, clean up */
	if (dbm != NULL)
		dbm_close(dbm);

	smdb_unlock_file(db->smndbm_lock_fd);
	free(db);
	smdb_free_database(smdb_db);

	return result;
}
#endif /* NDBM */
@


1.8
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.7
log
@Update to sendmail-8.12.4
@
text
@d2 1
a2 1
** Copyright (c) 1999-2002 Sendmail, Inc. and its suppliers.
d11 1
a11 1
SM_RCSID("@@(#)$Sendmail: smndbm.c,v 8.52 2002/05/21 22:30:30 gshapiro Exp $")
d441 2
d449 2
d452 1
@


1.6
log
@update to sendmail 8.12.3
@
text
@d11 1
a11 1
SM_RCSID("@@(#)$Sendmail: smndbm.c,v 8.51 2002/01/21 04:10:44 gshapiro Exp $")
d563 1
a563 1
		dbm = dbm_open(db_name, mode, 0644);
@


1.5
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d2 1
a2 1
** Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d11 1
a11 1
SM_RCSID("@@(#)$Sendmail: smndbm.c,v 8.50 2001/09/11 04:04:53 gshapiro Exp $")
d495 1
d520 5
a525 3
# if O_EXLOCK
	mode |= O_EXLOCK;
# else /* O_EXLOCK */
d530 18
a547 1
# endif /* O_EXLOCK */
@


1.4
log
@merge in sendmail 8.12.0 with BSD Makefiles and mdoc man pages
@
text
@d11 1
a11 1
SM_RCSID("@@(#)$Sendmail: smndbm.c,v 8.47 2001/05/10 01:23:58 ca Exp $")
d40 1
a40 1
/*
d458 1
a458 1
/*
@


1.3
log
@sendmail 8.11.2 with BSD Makefiles
@
text
@d2 1
a2 1
** Copyright (c) 1999-2000 Sendmail, Inc. and its suppliers.
d10 2
a11 3
#ifndef lint
static char id[] = "@@(#)$Sendmail: smndbm.c,v 8.40.4.3 2000/10/05 22:27:50 gshapiro Exp $";
#endif /* ! lint */
d69 3
a71 9
/*
**  smdbm_malloc_database -- Create and initialize SMDB_DBM_DATABASE
**
**	Parameters:
**		None
**
**	Returns:
**		A pointer to an allocated SMDB_DBM_DATABASE or NULL
**
d84 1
a84 1
		db->smndbm_cursor_in_use = FALSE;
a89 5
/*
** Except for smdb_ndbm_open, the rest of these function correspond to the
** interface laid out in smdb.h.
*/

d111 1
a111 1
	u_int flags;
d117 1
a117 1
	memset(&dbkey, '\0', sizeof dbkey);
d166 1
a166 1
	u_int flags;
d171 2
a172 2
	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);
d200 1
a200 1
	u_int flags;
d207 2
a208 2
	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);
d273 1
a273 1
	u_int flags;
d288 1
a288 1
	db->smndbm_cursor_in_use = FALSE;
d298 1
a298 1
	u_int flags;
d334 2
a335 2
	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);
d397 1
a397 1
	memset(&dbdata, '\0', sizeof dbdata);
d439 1
a439 1
	db->smndbm_cursor_in_use = TRUE;
a457 1

d471 1
a471 2
**		db_params --
**			No params are supported.
@


1.2
log
@Update to sendmail-8.10.1
@
text
@d11 1
a11 1
static char id[] = "@@(#)$Sendmail: smndbm.c,v 8.40 2000/03/19 05:03:30 ca Exp $";
d127 5
d134 1
a134 1
	result = dbm_delete(dbm, key->dbm);
d165 9
d181 6
d189 2
a190 2
	data->dbm = dbm_fetch(dbm, key->dbm);
	if (data->dbm.dptr == NULL)
d202 2
a203 1

d217 8
d227 1
a227 1
	result = dbm_store(dbm, key->dbm, data->dbm,
d344 4
d374 2
a375 2
	value->dbm = dbm_fetch(dbm, dbm_cursor->smndbmc_current_key);
	if (value->dbm.dptr == NULL)
d387 4
a390 1
	key->dbm = dbm_cursor->smndbmc_current_key;
d407 5
d414 1
a414 1
	result = dbm_store(dbm, dbm_cursor->smndbmc_current_key, value->dbm,
d599 1
@


1.2.4.1
log
@Pull in patch from current:
Errata(028):
The signal handlers in sendmail contain code that is unsafe in the
context of a signal handler.  This leads to potentially serious race
conditions.  At the moment this is a theoretical attack only and can
only be exploited on the local host (if at all).
Fix(millert):
Update to sendmail 8.11.4:
8.11.4 revamps signal handling within the MTA in order to reduce
the likelihood of a race condition that can lead to heap
corruption as described in Michal Zalewski's advisory.  The
problems discussed in the advisory are not currently known to
be exploitable but we recommend upgrading to 8.11.4 in case a
method is found to exploit the signal handling race condition.
8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d11 1
a11 1
static char id[] = "@@(#)$Sendmail: smndbm.c,v 8.40.4.3 2000/10/05 22:27:50 gshapiro Exp $";
a126 5
	datum dbkey;

	memset(&dbkey, '\0', sizeof dbkey);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;
d129 1
a129 1
	result = dbm_delete(dbm, dbkey);
a159 9
smdbm_lockfd(database)
	SMDB_DATABASE *database;
{
	SMDB_DBM_DATABASE *db = (SMDB_DBM_DATABASE *) database->smdb_impl;

	return db->smndbm_lock_fd;
}

int
a166 6
	datum dbkey, dbdata;

	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;
d169 2
a170 2
	dbdata = dbm_fetch(dbm, dbkey);
	if (dbdata.dptr == NULL)
d182 1
a182 2
	data->data = dbdata.dptr;
	data->size = dbdata.dsize;
a195 8
	datum dbkey, dbdata;

	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;
	dbdata.dptr = data->data;
	dbdata.dsize = data->size;
d198 1
a198 1
	result = dbm_store(dbm, dbkey, dbdata,
a314 4
	datum dbkey, dbdata;

	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);
d341 2
a342 2
	dbdata = dbm_fetch(dbm, dbm_cursor->smndbmc_current_key);
	if (dbdata.dptr == NULL)
d354 1
a354 4
	value->data = dbdata.dptr;
	value->size = dbdata.dsize;
	key->data = dbm_cursor->smndbmc_current_key.dptr;
	key->size = dbm_cursor->smndbmc_current_key.dsize;
a370 5
	datum dbdata;

	memset(&dbdata, '\0', sizeof dbdata);
	dbdata.dptr = value->data;
	dbdata.dsize = value->size;
d373 1
a373 1
	result = dbm_store(dbm, dbm_cursor->smndbmc_current_key, dbdata,
a557 1
		smdb_db->smdb_lockfd = smdbm_lockfd;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
** Copyright (c) 1999 Sendmail, Inc. and its suppliers.
d11 1
a11 1
static char id[] = "@@(#)$Sendmail: smndbm.c,v 8.37 1999/10/28 01:58:36 eric Exp $";
d316 3
d463 1
a463 1
	int sff;
@


1.1.1.1
log
@stock sendmail 8.10.0 with $Id -> $Sendmail
@
text
@@


1.1.1.2
log
@sendmail 8.11.2
@
text
@d2 1
a2 1
** Copyright (c) 1999-2000 Sendmail, Inc. and its suppliers.
d11 1
a11 1
static char id[] = "@@(#)$Id: smndbm.c,v 8.40.4.3 2000/10/05 22:27:50 gshapiro Exp $";
a126 5
	datum dbkey;

	memset(&dbkey, '\0', sizeof dbkey);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;
d129 1
a129 1
	result = dbm_delete(dbm, dbkey);
a159 9
smdbm_lockfd(database)
	SMDB_DATABASE *database;
{
	SMDB_DBM_DATABASE *db = (SMDB_DBM_DATABASE *) database->smdb_impl;

	return db->smndbm_lock_fd;
}

int
a166 6
	datum dbkey, dbdata;

	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;
d169 2
a170 2
	dbdata = dbm_fetch(dbm, dbkey);
	if (dbdata.dptr == NULL)
d182 1
a182 2
	data->data = dbdata.dptr;
	data->size = dbdata.dsize;
a195 8
	datum dbkey, dbdata;

	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);
	dbkey.dptr = key->data;
	dbkey.dsize = key->size;
	dbdata.dptr = data->data;
	dbdata.dsize = data->size;
d198 1
a198 1
	result = dbm_store(dbm, dbkey, dbdata,
a314 7
	datum dbkey, dbdata;

	memset(&dbkey, '\0', sizeof dbkey);
	memset(&dbdata, '\0', sizeof dbdata);

	if (flags == SMDB_CURSOR_GET_RANGE)
		return SMDBE_UNSUPPORTED;
d338 2
a339 2
	dbdata = dbm_fetch(dbm, dbm_cursor->smndbmc_current_key);
	if (dbdata.dptr == NULL)
d351 1
a351 4
	value->data = dbdata.dptr;
	value->size = dbdata.dsize;
	key->data = dbm_cursor->smndbmc_current_key.dptr;
	key->size = dbm_cursor->smndbmc_current_key.dsize;
a367 5
	datum dbdata;

	memset(&dbdata, '\0', sizeof dbdata);
	dbdata.dptr = value->data;
	dbdata.dsize = value->size;
d370 1
a370 1
	result = dbm_store(dbm, dbm_cursor->smndbmc_current_key, dbdata,
d460 1
a460 1
	long sff;
a554 1
		smdb_db->smdb_lockfd = smdbm_lockfd;
@


1.1.1.3
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@d2 1
a2 1
** Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d10 3
a12 2
#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: smndbm.c,v 8.47 2001/05/10 01:23:58 ca Exp $")
d70 9
a78 3
/*
**  Except for smdb_ndbm_open, the rest of these function correspond to the
**  interface laid out in smdb.h.
d91 1
a91 1
		db->smndbm_cursor_in_use = false;
d97 5
d123 1
a123 1
	unsigned int flags;
d129 1
a129 1
	(void) memset(&dbkey, '\0', sizeof dbkey);
d178 1
a178 1
	unsigned int flags;
d183 2
a184 2
	(void) memset(&dbkey, '\0', sizeof dbkey);
	(void) memset(&dbdata, '\0', sizeof dbdata);
d212 1
a212 1
	unsigned int flags;
d219 2
a220 2
	(void) memset(&dbkey, '\0', sizeof dbkey);
	(void) memset(&dbdata, '\0', sizeof dbdata);
d285 1
a285 1
	unsigned int flags;
d300 1
a300 1
	db->smndbm_cursor_in_use = false;
d310 1
a310 1
	unsigned int flags;
d346 2
a347 2
	(void) memset(&dbkey, '\0', sizeof dbkey);
	(void) memset(&dbdata, '\0', sizeof dbdata);
d409 1
a409 1
	(void) memset(&dbdata, '\0', sizeof dbdata);
d451 1
a451 1
	db->smndbm_cursor_in_use = true;
d470 1
d484 2
a485 1
**		db_params -- No params are supported.
@


