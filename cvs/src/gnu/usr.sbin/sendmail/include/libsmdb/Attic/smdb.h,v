head	1.11;
access;
symbols
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.38
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.36
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.34
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.32
	OPENBSD_5_0:1.9.0.30
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.28
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.26
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.22
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SENDMAIL_8_12_0:1.1.1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	SENDMAIL_8_11_2:1.1.1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SENDMAIL_8_10_0:1.1.1.1
	SENDMAIL_INC:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.09.17.18.49.50;	author matthieu;	state dead;
branches;
next	1.10;
commitid	M7i5giHIoz3DMlTU;

1.10
date	2014.02.07.21.24.59;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.24.03.59.25;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.01.19.59.21;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.03.17.25.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.14.03.21.39;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.01.17.18.28;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.11.19.02.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.15.21.09.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.07.19.20.33;	author millert;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2000.04.02.19.05.49;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.02.19.05.49;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.01.15.20.52.21;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.09.11.18.55.51;	author millert;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.31.00.28.12;	author miod;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Bye.
@
text
@/*
 * Copyright (c) 1999-2002 Proofpoint, Inc. and its suppliers.
 *	All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 *	$Sendmail: smdb.h,v 8.42 2013/11/22 20:51:28 ca Exp $
 *
 */

#ifndef _SMDB_H_
# define _SMDB_H_

# include <sys/types.h>
# include <sys/stat.h>
# include <sm/gen.h>
# include <sm/errstring.h>

# ifdef NDBM
#  include <ndbm.h>
# endif /* NDBM */

# ifdef NEWDB
#  include "sm/bdb.h"
# endif /* NEWDB */

/*
**  Some size constants
*/

#define SMDB_MAX_USER_NAME_LEN	1024

/*
**  This file defines the abstraction for database lookups. It is pretty
**  much a copy of the db2 interface with the exception that every function
**  returns 0 on success and non-zero on failure. The non-zero return code
**  is meaningful.
**
**  I'm going to put the function comments in this file since the interface
**  MUST be the same for all inheritors of this interface.
*/

typedef struct database_struct SMDB_DATABASE;
typedef struct cursor_struct SMDB_CURSOR;
typedef struct entry_struct SMDB_DBENT;

/*
**  DB_CLOSE_FUNC -- close the database
**
**	Parameters:
**		db -- The database to close.
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_close_func) __P((SMDB_DATABASE *db));

/*
**  DB_DEL_FUNC -- removes a key and data pair from the database
**
**	Parameters:
**		db -- The database to close.
**		key -- The key to remove.
**		flags -- delete options. There are currently no defined
**			 flags for delete.
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_del_func) __P((SMDB_DATABASE *db,
			   SMDB_DBENT *key, unsigned int flags));

/*
**  DB_FD_FUNC -- Returns a pointer to a file used for the database.
**
**	Parameters:
**		db -- The database to close.
**		fd -- A pointer to store the returned fd in.
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_fd_func) __P((SMDB_DATABASE *db, int* fd));

/*
**  DB_GET_FUNC -- Gets the data associated with a key.
**
**	Parameters:
**		db -- The database to close.
**		key -- The key to access.
**		data -- A place to store the returned data.
**		flags -- get options. There are currently no defined
**			 flags for get.
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_get_func) __P((SMDB_DATABASE *db,
			   SMDB_DBENT *key,
			   SMDB_DBENT *data, unsigned int flags));

/*
**  DB_PUT_FUNC -- Sets some data according to the key.
**
**	Parameters:
**		db -- The database to close.
**		key -- The key to use.
**		data -- The data to store.
**		flags -- put options:
**			SMDBF_NO_OVERWRITE - Return an error if key alread
**					     exists.
**			SMDBF_ALLOW_DUP - Allow duplicates in btree maps.
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_put_func) __P((SMDB_DATABASE *db,
			   SMDB_DBENT *key,
			   SMDB_DBENT *data, unsigned int flags));

/*
**  DB_SYNC_FUNC -- Flush any cached information to disk.
**
**	Parameters:
**		db -- The database to sync.
**		flags -- sync options:
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_sync_func) __P((SMDB_DATABASE *db, unsigned int flags));

/*
**  DB_SET_OWNER_FUNC -- Set the owner and group of the database files.
**
**	Parameters:
**		db -- The database to set.
**		uid -- The UID for the new owner (-1 for no change)
**		gid -- The GID for the new owner (-1 for no change)
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_set_owner_func) __P((SMDB_DATABASE *db, uid_t uid, gid_t gid));

/*
**  DB_CURSOR -- Obtain a cursor for sequential access
**
**	Parameters:
**		db -- The database to use.
**		cursor -- The address of a cursor pointer.
**		flags -- sync options:
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_cursor_func) __P((SMDB_DATABASE *db,
			      SMDB_CURSOR **cursor, unsigned int flags));

typedef int (*db_lockfd_func) __P((SMDB_DATABASE *db));

struct database_struct
{
	db_close_func		smdb_close;
	db_del_func		smdb_del;
	db_fd_func		smdb_fd;
	db_get_func		smdb_get;
	db_put_func		smdb_put;
	db_sync_func		smdb_sync;
	db_set_owner_func	smdb_set_owner;
	db_cursor_func		smdb_cursor;
	db_lockfd_func		smdb_lockfd;
	void			*smdb_impl;
};
/*
**  DB_CURSOR_CLOSE -- Close a cursor
**
**	Parameters:
**		cursor -- The cursor to close.
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_cursor_close_func) __P((SMDB_CURSOR *cursor));

/*
**  DB_CURSOR_DEL -- Delete the key/value pair of this cursor
**
**	Parameters:
**		cursor -- The cursor.
**		flags -- flags
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_cursor_del_func) __P((SMDB_CURSOR *cursor,
					unsigned int flags));

/*
**  DB_CURSOR_GET -- Get the key/value of this cursor.
**
**	Parameters:
**		cursor -- The cursor.
**		key -- The current key.
**		value -- The current value
**		flags -- flags
**
**	Returns:
**		0 - Success, otherwise errno.
**		SMDBE_LAST_ENTRY - This is a success condition that
**				   gets returned when the end of the
**				   database is hit.
**
*/

typedef int (*db_cursor_get_func) __P((SMDB_CURSOR *cursor,
				  SMDB_DBENT *key,
				  SMDB_DBENT *data,
				  unsigned int flags));

/*
**  Flags for DB_CURSOR_GET
*/

#define SMDB_CURSOR_GET_FIRST	0
#define SMDB_CURSOR_GET_LAST	1
#define SMDB_CURSOR_GET_NEXT	2
#define SMDB_CURSOR_GET_RANGE	3

/*
**  DB_CURSOR_PUT -- Put the key/value at this cursor.
**
**	Parameters:
**		cursor -- The cursor.
**		key -- The current key.
**		value -- The current value
**		flags -- flags
**
**	Returns:
**		0 - Success, otherwise errno.
**
*/

typedef int (*db_cursor_put_func) __P((SMDB_CURSOR *cursor,
				  SMDB_DBENT *key,
				  SMDB_DBENT *data,
				  unsigned int flags));



struct cursor_struct
{
	db_cursor_close_func	smdbc_close;
	db_cursor_del_func	smdbc_del;
	db_cursor_get_func	smdbc_get;
	db_cursor_put_func	smdbc_put;
	void			*smdbc_impl;
};


struct database_params_struct
{
	unsigned int	smdbp_num_elements;
	unsigned int	smdbp_cache_size;
	bool		smdbp_allow_dup;
};

typedef struct database_params_struct SMDB_DBPARAMS;

struct database_user_struct
{
	uid_t	smdbu_id;
	gid_t	smdbu_group_id;
	char	smdbu_name[SMDB_MAX_USER_NAME_LEN];
};

typedef struct database_user_struct SMDB_USER_INFO;

struct entry_struct
{
	void	*data;
	size_t	size;
};

typedef char *SMDB_DBTYPE;
typedef unsigned int SMDB_FLAG;

/*
**  These are types of databases.
*/

# define SMDB_TYPE_DEFAULT	NULL
# define SMDB_TYPE_DEFAULT_LEN	0
# define SMDB_TYPE_HASH		"hash"
# define SMDB_TYPE_HASH_LEN	5
# define SMDB_TYPE_BTREE	"btree"
# define SMDB_TYPE_BTREE_LEN	6
# define SMDB_TYPE_NDBM		"dbm"
# define SMDB_TYPE_NDBM_LEN	4

/*
**  These are flags
*/

/* Flags for put */
# define SMDBF_NO_OVERWRITE	0x00000001
# define SMDBF_ALLOW_DUP	0x00000002


extern SMDB_DATABASE	*smdb_malloc_database __P((void));
extern void		smdb_free_database __P((SMDB_DATABASE *));
extern int		smdb_open_database __P((SMDB_DATABASE **, char *, int,
						int, long, SMDB_DBTYPE,
						SMDB_USER_INFO *,
						SMDB_DBPARAMS *));
# ifdef NEWDB
extern int		smdb_db_open __P((SMDB_DATABASE **, char *, int, int,
					  long, SMDB_DBTYPE, SMDB_USER_INFO *,
					  SMDB_DBPARAMS *));
# endif /* NEWDB */
# ifdef NDBM
extern int		smdb_ndbm_open __P((SMDB_DATABASE **, char *, int, int,
					    long, SMDB_DBTYPE,
					    SMDB_USER_INFO *,
					    SMDB_DBPARAMS *));
# endif /* NDBM */
extern int		smdb_add_extension __P((char *, int, char *, char *));
extern int		smdb_setup_file __P((char *, char *, int, long,
					     SMDB_USER_INFO *, struct stat *));
extern int		smdb_lock_file __P((int *, char *, int, long, char *));
extern int		smdb_unlock_file __P((int));
extern int		smdb_filechanged __P((char *, char *, int,
					      struct stat *));
extern void		smdb_print_available_types __P((void));
extern char		*smdb_db_definition __P((SMDB_DBTYPE));
extern int		smdb_lock_map __P((SMDB_DATABASE *, int));
extern int		smdb_unlock_map __P((SMDB_DATABASE *));
#endif /* ! _SMDB_H_ */
@


1.10
log
@Update to sendmail 8.14.8.  This touches a lot of files due to the
Sendmail, Inc -> Proofpoint name change.  See RELEASE_NOTES for
actual changes.
@
text
@@


1.9
log
@Update to sendmail.8.13.0
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2002 Sendmail, Inc. and its suppliers.
d9 1
a9 1
 *	$Sendmail: smdb.h,v 8.41 2002/09/24 19:53:28 ca Exp $
@


1.8
log
@update to sendmail 8.12.7
@
text
@d9 1
a9 1
 *	$Sendmail: smdb.h,v 8.40.2.1 2002/10/05 17:04:51 ca Exp $
@


1.7
log
@Update to sendmail-8.12.4
@
text
@d9 1
a9 1
 *	$Sendmail: smdb.h,v 8.40 2002/05/24 23:20:14 gshapiro Exp $
d26 1
a26 4
#  include <db.h>
#  ifndef DB_VERSION_MAJOR
#   define DB_VERSION_MAJOR 1
#  endif /* ! DB_VERSION_MAJOR */
@


1.6
log
@update to sendmail-8.12.2
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
d9 1
a9 1
 *	$Sendmail: smdb.h,v 8.38 2001/11/19 19:30:03 gshapiro Exp $
a36 1
#define SMDB_MAX_NAME_LEN	1024
@


1.5
log
@Update to sendmail 8.12.1.

A potential security problem has been uncovered in 8.12.0 which might
be exploited locally by malicious users to gain access to the client
mail queue.  However, as long as the MTA accepts local connections,
the possible consequences of this potential local exploit are small.
Notice: some operating systems don't provide a way to completely drop
privileges from a set-group-ID program.  In that case sendmail refuses
to run if unsafe options are given.
@
text
@d9 1
a9 1
 *	$Sendmail: smdb.h,v 8.37 2001/09/11 03:08:28 gshapiro Exp $
a19 6

# ifndef NDBM
#  ifndef NEWDB
ERROR	NDBM or NEWDB must be defined.
#  endif /* ! NEWDB */
# endif /* ! NDBM */
@


1.4
log
@merge in sendmail 8.12.0 with BSD Makefiles and mdoc man pages
@
text
@d9 1
a9 1
 *	$Sendmail: smdb.h,v 8.36 2001/05/18 14:55:56 ca Exp $
d59 1
a59 1
/*
d72 1
a72 1
/*
d89 1
a89 1
/*
d103 1
a103 1
/*
d122 1
a122 1
/*
d143 1
a143 1
/*
d157 1
a157 1
/*
d172 1
a172 1
/*
d203 1
a203 1
/*
d216 1
a216 1
/*
d231 1
a231 1
/*
d262 1
a262 1
/*
@


1.3
log
@sendmail 8.11.2 with BSD Makefiles
@
text
@d2 10
a11 9
** Copyright (c) 1999-2000 Sendmail, Inc. and its suppliers.
**	All rights reserved.
**
** By using this file, you agree to the terms and conditions set
** forth in the LICENSE file which can be found at the top level of
** the sendmail distribution.
**
** $Sendmail: smdb.h,v 8.29.2.1.2.2 2000/10/05 22:23:55 gshapiro Exp $
*/
d18 2
a19 3
# ifndef __P
#  include "sendmail/cdefs.h"
# endif /* __P */
d39 1
a39 1
** Some size constants
d41 1
d46 4
a49 4
** This file defines the abstraction for database lookups. It is pretty
** much a copy of the db2 interface with the exception that every function
** returns 0 on success and non-zero on failure. The non-zero return code
** is meaningful.
d51 2
a52 2
** I'm going to put the function comments in this file since the interface
** MUST be the same for all inheritors of this interface.
d59 2
a60 3

/*
** DB_CLOSE_FUNC -- close the database
d69 1
d72 2
a73 4


/*
** DB_DEL_FUNC -- removes a key and data pair from the database
d85 1
d87 1
a87 1
			   SMDB_DBENT *key, u_int flags));
d89 2
a90 4


/*
** DB_FD_FUNC -- Returns a pointer to a file used for the database.
d100 1
d103 2
a104 4


/*
** DB_GET_FUNC -- Gets the data associated with a key.
d117 1
d120 1
a120 2
			   SMDB_DBENT *data, u_int flags));

d122 2
a123 3

/*
** DB_PUT_FUNC -- Sets some data according to the key.
d138 1
d141 1
a141 1
			   SMDB_DBENT *data, u_int flags));
d143 2
a144 3

/*
** DB_SYNC_FUNC -- Flush any cached information to disk.
a153 1
typedef int (*db_sync_func) __P((SMDB_DATABASE *db, u_int flags));
d155 4
a158 3

/*
** DB_SET_OWNER_FUNC -- Set the owner and group of the database files.
a168 2
typedef int (*db_set_owner_func) __P((SMDB_DATABASE *db, uid_t uid,
				 gid_t gid));
d170 4
a173 3

/*
** DB_CURSOR -- Obtain a cursor for sequential access
d184 1
d186 1
a186 1
			      SMDB_CURSOR **cursor, u_int flags));
d203 2
a204 5



/*
** DB_CURSOR_CLOSE -- Close a cursor
d213 1
d216 2
a217 3

/*
** DB_CURSOR_DEL -- Delete the key/value pair of this cursor
a226 1
typedef int (*db_cursor_del_func) __P((SMDB_CURSOR *cursor, u_int flags));
d228 5
a232 3

/*
** DB_CURSOR_GET -- Get the key/value of this cursor.
d247 1
d251 1
a251 1
				  u_int flags));
d254 1
a254 1
** Flags for DB_CURSOR_GET
d256 1
d262 2
a263 3

/*
** DB_CURSOR_PUT -- Put the key/value at this cursor.
d275 1
d279 1
a279 1
				  u_int flags));
d295 3
a297 3
	u_int	smdbp_num_elements;
	u_int	smdbp_cache_size;
	bool	smdbp_allow_dup;
d318 1
a318 1
typedef u_int SMDB_FLAG;
d321 1
a321 1
** These are types of databases.
d334 1
a334 1
** These are flags
d336 1
@


1.2
log
@Update to sendmail-8.10.1
@
text
@d9 1
a9 1
** $Sendmail: smdb.h,v 8.29 2000/03/17 07:32:42 gshapiro Exp $
d21 6
d56 1
a56 1
typedef union database_entity_union SMDB_DBENT;
d192 1
d204 1
d315 1
a315 1
union database_entity_union
d317 2
a318 11
# ifdef NDBM
	datum	dbm;
# endif /* NDBM */
# ifdef NEWDB
	DBT	db;
# endif /* NEWDB */
	struct
	{
		char	*data;
		size_t	size;
	} data;
a320 1

d371 2
@


1.2.4.1
log
@Pull in patch from current:
Errata(028):
The signal handlers in sendmail contain code that is unsafe in the
context of a signal handler.  This leads to potentially serious race
conditions.  At the moment this is a theoretical attack only and can
only be exploited on the local host (if at all).
Fix(millert):
Update to sendmail 8.11.4:
8.11.4 revamps signal handling within the MTA in order to reduce
the likelihood of a race condition that can lead to heap
corruption as described in Michal Zalewski's advisory.  The
problems discussed in the advisory are not currently known to
be exploitable but we recommend upgrading to 8.11.4 in case a
method is found to exploit the signal handling race condition.
8.11.4 also fixes other bugs found since the release of 8.11.3.

See the RELEASE_NOTES file for more details.
@
text
@d9 1
a9 1
** $Sendmail: smdb.h,v 8.29.2.1.2.2 2000/10/05 22:23:55 gshapiro Exp $
a20 6
# ifndef NDBM
#  ifndef NEWDB
ERROR	NDBM or NEWDB must be defined.
#  endif /* ! NEWDB */
# endif /* ! NDBM */

d50 1
a50 1
typedef struct entry_struct SMDB_DBENT;
a185 1
typedef int (*db_lockfd_func) __P((SMDB_DATABASE *db));
a196 1
	db_lockfd_func		smdb_lockfd;
d307 1
a307 1
struct entry_struct
d309 11
a319 2
	void	*data;
	size_t	size;
d322 1
a372 2
extern int		smdb_lock_map __P((SMDB_DATABASE *, int));
extern int		smdb_unlock_map __P((SMDB_DATABASE *));
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
** Copyright (c) 1999 Sendmail, Inc. and its suppliers.
d9 1
a9 1
** $Sendmail: smdb.h,v 8.26 2000/03/02 09:03:05 msk Exp $
d256 1
d350 1
a350 1
						int, int, SMDB_DBTYPE,
d355 1
a355 1
					  int, SMDB_DBTYPE, SMDB_USER_INFO *,
d360 2
a361 1
					    int, SMDB_DBTYPE, SMDB_USER_INFO *,
d365 1
a365 1
extern int		smdb_setup_file __P((char *, char *, int, int,
d367 1
a367 1
extern int		smdb_lock_file __P((int *, char *, int, int, char *));
@


1.1.1.1
log
@stock sendmail 8.10.0 with $Id -> $Sendmail
@
text
@@


1.1.1.2
log
@sendmail 8.11.2
@
text
@d2 1
a2 1
** Copyright (c) 1999-2000 Sendmail, Inc. and its suppliers.
d9 1
a9 1
** $Id: smdb.h,v 8.29.2.1.2.2 2000/10/05 22:23:55 gshapiro Exp $
a20 6
# ifndef NDBM
#  ifndef NEWDB
ERROR	NDBM or NEWDB must be defined.
#  endif /* ! NEWDB */
# endif /* ! NDBM */

d50 1
a50 1
typedef struct entry_struct SMDB_DBENT;
a185 1
typedef int (*db_lockfd_func) __P((SMDB_DATABASE *db));
a196 1
	db_lockfd_func		smdb_lockfd;
a255 1
#define SMDB_CURSOR_GET_RANGE	3
d306 1
a306 1
struct entry_struct
d308 11
a318 2
	void	*data;
	size_t	size;
d321 1
d349 1
a349 1
						int, long, SMDB_DBTYPE,
d354 1
a354 1
					  long, SMDB_DBTYPE, SMDB_USER_INFO *,
d359 1
a359 2
					    long, SMDB_DBTYPE,
					    SMDB_USER_INFO *,
d363 1
a363 1
extern int		smdb_setup_file __P((char *, char *, int, long,
d365 1
a365 1
extern int		smdb_lock_file __P((int *, char *, int, long, char *));
a370 2
extern int		smdb_lock_map __P((SMDB_DATABASE *, int));
extern int		smdb_unlock_map __P((SMDB_DATABASE *));
@


1.1.1.3
log
@sendmail 8.12.0 with $Id tags converted to $Sendmail
@
text
@d2 9
a10 10
 * Copyright (c) 1999-2001 Sendmail, Inc. and its suppliers.
 *	All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 *	$Sendmail: smdb.h,v 8.36 2001/05/18 14:55:56 ca Exp $
 *
 */
d17 3
a19 2
# include <sm/gen.h>
# include <sm/errstring.h>
d39 1
a39 1
**  Some size constants
a40 1

d45 4
a48 4
**  This file defines the abstraction for database lookups. It is pretty
**  much a copy of the db2 interface with the exception that every function
**  returns 0 on success and non-zero on failure. The non-zero return code
**  is meaningful.
d50 2
a51 2
**  I'm going to put the function comments in this file since the interface
**  MUST be the same for all inheritors of this interface.
d58 3
a60 2
/*
**  DB_CLOSE_FUNC -- close the database
d69 1
a70 1
typedef int (*db_close_func) __P((SMDB_DATABASE *db));
d72 3
a74 2
/*
**  DB_DEL_FUNC -- removes a key and data pair from the database
d86 2
a88 2
typedef int (*db_del_func) __P((SMDB_DATABASE *db,
			   SMDB_DBENT *key, unsigned int flags));
d90 3
a92 2
/*
**  DB_FD_FUNC -- Returns a pointer to a file used for the database.
d102 1
a103 1
typedef int (*db_fd_func) __P((SMDB_DATABASE *db, int* fd));
d105 3
a107 2
/*
**  DB_GET_FUNC -- Gets the data associated with a key.
a119 1

d122 2
a123 1
			   SMDB_DBENT *data, unsigned int flags));
d125 3
a127 2
/*
**  DB_PUT_FUNC -- Sets some data according to the key.
a141 1

d144 1
a144 1
			   SMDB_DBENT *data, unsigned int flags));
d146 3
a148 2
/*
**  DB_SYNC_FUNC -- Flush any cached information to disk.
d158 1
d160 3
a162 4
typedef int (*db_sync_func) __P((SMDB_DATABASE *db, unsigned int flags));

/*
**  DB_SET_OWNER_FUNC -- Set the owner and group of the database files.
d173 2
d176 3
a178 4
typedef int (*db_set_owner_func) __P((SMDB_DATABASE *db, uid_t uid, gid_t gid));

/*
**  DB_CURSOR -- Obtain a cursor for sequential access
a188 1

d190 1
a190 1
			      SMDB_CURSOR **cursor, unsigned int flags));
d207 5
a211 2
/*
**  DB_CURSOR_CLOSE -- Close a cursor
a219 1

d222 3
a224 2
/*
**  DB_CURSOR_DEL -- Delete the key/value pair of this cursor
d234 1
d236 3
a238 5
typedef int (*db_cursor_del_func) __P((SMDB_CURSOR *cursor,
					unsigned int flags));

/*
**  DB_CURSOR_GET -- Get the key/value of this cursor.
a252 1

d256 1
a256 1
				  unsigned int flags));
d259 1
a259 1
**  Flags for DB_CURSOR_GET
a260 1

d266 3
a268 2
/*
**  DB_CURSOR_PUT -- Put the key/value at this cursor.
a279 1

d283 1
a283 1
				  unsigned int flags));
d299 3
a301 3
	unsigned int	smdbp_num_elements;
	unsigned int	smdbp_cache_size;
	bool		smdbp_allow_dup;
d322 1
a322 1
typedef unsigned int SMDB_FLAG;
d325 1
a325 1
**  These are types of databases.
d338 1
a338 1
**  These are flags
a339 1

@


