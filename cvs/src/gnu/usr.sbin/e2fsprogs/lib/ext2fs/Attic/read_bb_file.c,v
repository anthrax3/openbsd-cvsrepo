head	1.2;
access;
symbols
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	E2FSPROGS110:1.1.1.1
	E2FSPROGS:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	98.07.07.18.24.56;	author art;	state dead;
branches;
next	1.1;

1.1
date	97.06.14.07.18.46;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.06.14.07.18.46;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.2
log
@old, big, not compiled and not used, die
@
text
@/*
 * read_bb_file.c --- read a list of bad blocks for a FILE *
 *
 * Copyright (C) 1994, 1995 Theodore Ts'o.
 *
 * %Begin-Header%
 * This file may be redistributed under the terms of the GNU Public
 * License.
 * %End-Header%
 */

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/types.h>

#include <linux/ext2_fs.h>

#include "ext2fs.h"

/*
 * Reads a list of bad blocks from  a FILE *
 */
errcode_t ext2fs_read_bb_FILE(ext2_filsys fs, FILE *f, 
			      ext2_badblocks_list *bb_list,
			      void (*invalid)(ext2_filsys fs, blk_t blk))
{
	errcode_t	retval;
	blk_t		blockno;
	int		count;
	char		buf[128];

	EXT2_CHECK_MAGIC(fs, EXT2_ET_MAGIC_EXT2FS_FILSYS);

	if (!*bb_list) {
		retval = ext2fs_badblocks_list_create(bb_list, 10);
		if (retval)
			return retval;
	}

	while (!feof (f)) {
		if (fgets(buf, sizeof(buf), f) == NULL)
			break;
		count = sscanf(buf, "%u", &blockno);
		if (count <= 0)
			continue;
		if ((blockno < fs->super->s_first_data_block) ||
		    (blockno >= fs->super->s_blocks_count)) {
			if (invalid)
				(invalid)(fs, blockno);
			continue;
		}
		retval = ext2fs_badblocks_list_add(*bb_list, blockno);
		if (retval)
			return retval;
	}
	return 0;
}


@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial import of (unmodifed) e2fsprogs 1.10.
@
text
@@
