head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.68
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.70
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.66
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.62
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.64
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.56
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.60
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.58
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.54
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.52
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.50
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.48
	OPENBSD_5_0:1.1.0.46
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.44
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.42
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.38
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.40
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.36
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.34
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.32
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.30
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.28
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.26
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.24
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.22
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.20
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.18
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.16
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.14
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.12
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.10
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2000.10.10.20.40.11;	author beck;	state Exp;
branches;
next	;


desc
@@


1.1
log
@mkhybrid 1.12b5.1

Note, this normally makes a "mkisofs" which is the same binary, mkisofs
from here needs to be tested out prior to replacing our existing mkisofs
with this. (currently just installs mkhybrid)
@
text
@#	$Id: README.session,v 1.4 1999/03/02 04:16:40 eric Exp $	

	This release of mkisofs has basic support completed for
multiple sessions.  However, we still need some interaction 
between cdrecord and mkisofs for this to work correctly. This is needed as
only cdrecord knows the different ways to gather these numbers for all 
different drives. It may be that future versions of mkisofs will include 
the needed support for MMC compliant drives.

	There are a few new options to mkisofs to allow for this.
The first one is "-M /dev/scd0", and is used so that mkisofs can examine
the entirety of the previous image so that it can figure out what additional
files need to be written in the new session. Note that there are operating
systems that don't allow to read from CD drives with a sector size
of 2048 bytes per sector. To use mkisofs on such an operating system, you
will need a version of mkisofs that includes the SCSI transport library 
from cdrecord. Simply use the dev= syntax from cdrecord with -M in
such a case. It will tell mkisofs to use the SCSI transport library to 
read from the CD instead of using the standard read() OS interface.

	There is also a temporary hack in mkisofs in the form of a '-C' option.
The -C option takes two numbers as input, which are delimited by commas.
For example, you could specify "-C 1000,1020", but you should never just
make up numbers to use here.  These numbers are determined from cdrecord.

	Note that if you use -C and omit -M, it effectively means that
you are writing a new session, starting at a non-zero block number,
and you are effectively ignoring all of the previous session contents.
When this session is sent to the writer, the new session effectively
"erases" the previous session.

	In practice you should be able to do something like:

mkisofs [other options] -C `cdrecord dev=b,t,l -msinfo` \
		-M /dev/cdblkdev

Replace 'b,t,l' by the aproriate numbers for SCSIbus, target and lun
of your drive.

Note: As of the 1.12b5 release, the multi-session technology has
matured quite significantly.  It is entirely possible that bugs
exists, or that further tweaks will be required somewhere along the
way to get things working correctly.  The data gathering mode of
cdrecord has been tested, and I believe it works correctly.  Caveat
Emptor.

[Mar 1, 1999].

@
