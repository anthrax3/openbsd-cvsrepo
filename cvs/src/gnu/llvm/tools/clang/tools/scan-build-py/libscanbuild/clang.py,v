head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.09.03.22.46.56;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.56;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.24.08.33.01;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@# -*- coding: utf-8 -*-
#                     The LLVM Compiler Infrastructure
#
# This file is distributed under the University of Illinois Open Source
# License. See LICENSE.TXT for details.
""" This module is responsible for the Clang executable.

Since Clang command line interface is so rich, but this project is using only
a subset of that, it makes sense to create a function specific wrapper. """

import re
import subprocess
import logging
from libscanbuild.shell import decode

__all__ = ['get_version', 'get_arguments', 'get_checkers']


def get_version(cmd):
    """ Returns the compiler version as string. """

    lines = subprocess.check_output([cmd, '-v'], stderr=subprocess.STDOUT)
    return lines.decode('ascii').splitlines()[0]


def get_arguments(command, cwd):
    """ Capture Clang invocation.

    This method returns the front-end invocation that would be executed as
    a result of the given driver invocation. """

    def lastline(stream):
        last = None
        for line in stream:
            last = line
        if last is None:
            raise Exception("output not found")
        return last

    cmd = command[:]
    cmd.insert(1, '-###')
    logging.debug('exec command in %s: %s', cwd, ' '.join(cmd))
    child = subprocess.Popen(cmd,
                             cwd=cwd,
                             universal_newlines=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
    line = lastline(child.stdout)
    child.stdout.close()
    child.wait()
    if child.returncode == 0:
        if re.search(r'clang(.*): error:', line):
            raise Exception(line)
        return decode(line)
    else:
        raise Exception(line)


def get_active_checkers(clang, plugins):
    """ To get the default plugins we execute Clang to print how this
    compilation would be called.

    For input file we specify stdin and pass only language information. """

    def checkers(language):
        """ Returns a list of active checkers for the given language. """

        load = [elem
                for plugin in plugins
                for elem in ['-Xclang', '-load', '-Xclang', plugin]]
        cmd = [clang, '--analyze'] + load + ['-x', language, '-']
        pattern = re.compile(r'^-analyzer-checker=(.*)$')
        return [pattern.match(arg).group(1)
                for arg in get_arguments(cmd, '.') if pattern.match(arg)]

    result = set()
    for language in ['c', 'c++', 'objective-c', 'objective-c++']:
        result.update(checkers(language))
    return result


def get_checkers(clang, plugins):
    """ Get all the available checkers from default and from the plugins.

    clang -- the compiler we are using
    plugins -- list of plugins which was requested by the user

    This method returns a dictionary of all available checkers and status.

    {<plugin name>: (<plugin description>, <is active by default>)} """

    plugins = plugins if plugins else []

    def parse_checkers(stream):
        """ Parse clang -analyzer-checker-help output.

        Below the line 'CHECKERS:' are there the name description pairs.
        Many of them are in one line, but some long named plugins has the
        name and the description in separate lines.

        The plugin name is always prefixed with two space character. The
        name contains no whitespaces. Then followed by newline (if it's
        too long) or other space characters comes the description of the
        plugin. The description ends with a newline character. """

        # find checkers header
        for line in stream:
            if re.match(r'^CHECKERS:', line):
                break
        # find entries
        state = None
        for line in stream:
            if state and not re.match(r'^\s\s\S', line):
                yield (state, line.strip())
                state = None
            elif re.match(r'^\s\s\S+$', line.rstrip()):
                state = line.strip()
            else:
                pattern = re.compile(r'^\s\s(?P<key>\S*)\s*(?P<value>.*)')
                match = pattern.match(line.rstrip())
                if match:
                    current = match.groupdict()
                    yield (current['key'], current['value'])

    def is_active(actives, entry):
        """ Returns true if plugin name is matching the active plugin names.

        actives -- set of active plugin names (or prefixes).
        entry -- the current plugin name to judge.

        The active plugin names are specific plugin names or prefix of some
        names. One example for prefix, when it say 'unix' and it shall match
        on 'unix.API', 'unix.Malloc' and 'unix.MallocSizeof'. """

        return any(re.match(r'^' + a + r'(\.|$)', entry) for a in actives)

    actives = get_active_checkers(clang, plugins)

    load = [elem for plugin in plugins for elem in ['-load', plugin]]
    cmd = [clang, '-cc1'] + load + ['-analyzer-checker-help']

    logging.debug('exec command: %s', ' '.join(cmd))
    child = subprocess.Popen(cmd,
                             universal_newlines=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
    checkers = {
        k: (v, is_active(actives, k))
        for k, v in parse_checkers(child.stdout)
    }
    child.stdout.close()
    child.wait()
    if child.returncode == 0 and len(checkers):
        return checkers
    else:
        raise Exception('Could not query Clang for available checkers.')
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a17 2
# regex for activated checker
ACTIVE_CHECKER_PATTERN = re.compile(r'^-analyzer-checker=(.*)$')
d19 2
d22 2
a23 8
def get_version(clang):
    """ Returns the compiler version as string.

    :param clang:   the compiler we are using
    :return:        the version string printed to stderr """

    output = subprocess.check_output([clang, '-v'], stderr=subprocess.STDOUT)
    return output.decode('utf-8').splitlines()[0]
d29 10
a38 3
    :param command: the compilation command
    :param cwd:     the current working directory
    :return:        the detailed front-end invocation command """
d43 14
a56 8

    output = subprocess.check_output(cmd, cwd=cwd, stderr=subprocess.STDOUT)
    # The relevant information is in the last line of the output.
    # Don't check if finding last line fails, would throw exception anyway.
    last_line = output.decode('utf-8').splitlines()[-1]
    if re.search(r'clang(.*): error:', last_line):
        raise Exception(last_line)
    return decode(last_line)
d60 2
a61 1
    """ Get the active checker list.
d63 1
a63 8
    :param clang:   the compiler we are using
    :param plugins: list of plugins which was requested by the user
    :return:        list of checker names which are active

    To get the default checkers we execute Clang to print how this
    compilation would be called. And take out the enabled checker from the
    arguments. For input file we specify stdin and pass only language
    information. """
d65 1
a65 1
    def get_active_checkers_for(language):
d68 7
a74 7
        load_args = [arg
                     for plugin in plugins
                     for arg in ['-Xclang', '-load', '-Xclang', plugin]]
        cmd = [clang, '--analyze'] + load_args + ['-x', language, '-']
        return [ACTIVE_CHECKER_PATTERN.match(arg).group(1)
                for arg in get_arguments(cmd, '.')
                if ACTIVE_CHECKER_PATTERN.match(arg)]
d78 9
a86 2
        result.update(get_active_checkers_for(language))
    return frozenset(result)
d88 1
d90 1
a90 49
def is_active(checkers):
    """ Returns a method, which classifies the checker active or not,
    based on the received checker name list. """

    def predicate(checker):
        """ Returns True if the given checker is active. """

        return any(pattern.match(checker) for pattern in predicate.patterns)

    predicate.patterns = [re.compile(r'^' + a + r'(\.|$)') for a in checkers]
    return predicate


def parse_checkers(stream):
    """ Parse clang -analyzer-checker-help output.

    Below the line 'CHECKERS:' are there the name description pairs.
    Many of them are in one line, but some long named checker has the
    name and the description in separate lines.

    The checker name is always prefixed with two space character. The
    name contains no whitespaces. Then followed by newline (if it's
    too long) or other space characters comes the description of the
    checker. The description ends with a newline character.

    :param stream:  list of lines to parse
    :return:        generator of tuples

    (<checker name>, <checker description>) """

    lines = iter(stream)
    # find checkers header
    for line in lines:
        if re.match(r'^CHECKERS:', line):
            break
    # find entries
    state = None
    for line in lines:
        if state and not re.match(r'^\s\s\S', line):
            yield (state, line.strip())
            state = None
        elif re.match(r'^\s\s\S+$', line.rstrip()):
            state = line.strip()
        else:
            pattern = re.compile(r'^\s\s(?P<key>\S*)\s*(?P<value>.*)')
            match = pattern.match(line.rstrip())
            if match:
                current = match.groupdict()
                yield (current['key'], current['value'])
d92 1
d94 40
a133 2
def get_checkers(clang, plugins):
    """ Get all the available checkers from default and from the plugins.
d135 1
a135 3
    :param clang:   the compiler we are using
    :param plugins: list of plugins which was requested by the user
    :return:        a dictionary of all available checkers and its status
d137 1
a137 1
    {<checker name>: (<checker description>, <is active by default>)} """
d143 4
a146 5
    output = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
    lines = output.decode('utf-8').splitlines()

    is_active_checker = is_active(get_active_checkers(clang, plugins))

d148 2
a149 2
        name: (description, is_active_checker(name))
        for name, description in parse_checkers(lines)
d151 5
a155 1
    if not checkers:
a156 2

    return checkers
@

