head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.6
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.55.48;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.48;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@//===- CodegenNameGenerator.h - Codegen name generation -------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// Determines the name that the symbol will get for code generation.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_CLANG_INDEX_CODEGENNAMEGENERATOR_H
#define LLVM_CLANG_INDEX_CODEGENNAMEGENERATOR_H

#include "clang/Basic/LLVM.h"
#include <memory>
#include <string>
#include <vector>

namespace clang {
  class ASTContext;
  class Decl;

namespace index {

class CodegenNameGenerator {
public:
  explicit CodegenNameGenerator(ASTContext &Ctx);
  ~CodegenNameGenerator();

  /// \returns true on failure to produce a name for the given decl, false on
  /// success.
  bool writeName(const Decl *D, raw_ostream &OS);

  /// Version of \c writeName function that returns a string.
  std::string getName(const Decl *D);

  /// This can return multiple mangled names when applicable, e.g. for C++
  /// constructors/destructors.
  std::vector<std::string> getAllManglings(const Decl *D);

private:
  struct Implementation;
  std::unique_ptr<Implementation> Impl;
};

} // namespace index
} // namespace clang

#endif // LLVM_CLANG_INDEX_CODEGENNAMEGENERATOR_H
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@
