head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.56;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.56;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.47;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.04;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===--- StmtGraphTraits.h - Graph Traits for the class Stmt ----*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file defines a template specialization of llvm::GraphTraits to
//  treat ASTs (Stmt*) as graphs
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_CLANG_AST_STMTGRAPHTRAITS_H
#define LLVM_CLANG_AST_STMTGRAPHTRAITS_H

#include "clang/AST/Stmt.h"
#include "llvm/ADT/DepthFirstIterator.h"
#include "llvm/ADT/GraphTraits.h"

namespace llvm {

//template <typename T> struct GraphTraits;


template <> struct GraphTraits<clang::Stmt*> {
  typedef clang::Stmt                       NodeType;
  typedef clang::Stmt::child_iterator       ChildIteratorType;
  typedef llvm::df_iterator<clang::Stmt*>   nodes_iterator;

  static NodeType* getEntryNode(clang::Stmt* S) { return S; }

  static inline ChildIteratorType child_begin(NodeType* N) {
    if (N) return N->child_begin();
    else return ChildIteratorType();
  }

  static inline ChildIteratorType child_end(NodeType* N) {
    if (N) return N->child_end();
    else return ChildIteratorType();
  }

  static nodes_iterator nodes_begin(clang::Stmt* S) {
    return df_begin(S);
  }

  static nodes_iterator nodes_end(clang::Stmt* S) {
    return df_end(S);
  }
};


template <> struct GraphTraits<const clang::Stmt*> {
  typedef const clang::Stmt                       NodeType;
  typedef clang::Stmt::const_child_iterator       ChildIteratorType;
  typedef llvm::df_iterator<const clang::Stmt*>   nodes_iterator;

  static NodeType* getEntryNode(const clang::Stmt* S) { return S; }

  static inline ChildIteratorType child_begin(NodeType* N) {
    if (N) return N->child_begin();
    else return ChildIteratorType();
  }

  static inline ChildIteratorType child_end(NodeType* N) {
    if (N) return N->child_end();
    else return ChildIteratorType();
  }

  static nodes_iterator nodes_begin(const clang::Stmt* S) {
    return df_begin(S);
  }

  static nodes_iterator nodes_end(const clang::Stmt* S) {
    return df_end(S);
  }
};


} // end namespace llvm

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a28 1
  typedef clang::Stmt *                     NodeRef;
a55 1
  typedef const clang::Stmt *                     NodeRef;
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d28 1
d33 1
a33 1
  static NodeRef getEntryNode(clang::Stmt *S) { return S; }
d35 1
a35 1
  static ChildIteratorType child_begin(NodeRef N) {
d40 1
a40 1
  static ChildIteratorType child_end(NodeRef N) {
d56 1
d61 1
a61 1
  static NodeRef getEntryNode(const clang::Stmt *S) { return S; }
d63 1
a63 1
  static ChildIteratorType child_begin(NodeRef N) {
d68 1
a68 1
  static ChildIteratorType child_end(NodeRef N) {
@


