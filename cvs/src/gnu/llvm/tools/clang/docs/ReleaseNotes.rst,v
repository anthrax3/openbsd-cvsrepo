head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.5
	OPENBSD_6_2:1.1.1.4.0.2
	OPENBSD_6_2_BASE:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.4
	OPENBSD_6_1_BASE:1.1.1.4
	LLVM_4_0_0:1.1.1.4
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.09.03.22.46.56;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.56;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.50;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.06;	author patrick;	state Exp;
branches;
next	1.1.1.4;
commitid	so2WA7LCP6wbxtYl;

1.1.1.4
date	2017.03.14.08.07.56;	author patrick;	state Exp;
branches;
next	1.1.1.5;
commitid	aUi5NxOzBSLCN5eN;

1.1.1.5
date	2017.10.04.20.27.45;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@=======================
Clang 3.8 Release Notes
=======================

.. contents::
   :local:
   :depth: 2

Written by the `LLVM Team <http://llvm.org/>`_

Introduction
============

This document contains the release notes for the Clang C/C++/Objective-C
frontend, part of the LLVM Compiler Infrastructure, release 3.8. Here we
describe the status of Clang in some detail, including major
improvements from the previous release and new feature work. For the
general LLVM release notes, see `the LLVM
documentation <../../../docs/ReleaseNotes.html>`_. All LLVM
releases may be downloaded from the `LLVM releases web
site <http://llvm.org/releases/>`_.

For more information about Clang or LLVM, including information about
the latest release, please check out the main please see the `Clang Web
Site <http://clang.llvm.org>`_ or the `LLVM Web
Site <http://llvm.org>`_.

What's New in Clang 3.8?
========================

Some of the major new features and improvements to Clang are listed
here. Generic improvements to Clang as a whole or to its underlying
infrastructure are described first, followed by language-specific
sections with improvements to Clang's support for those languages.

Improvements to Clang's diagnostics
-----------------------------------

Clang's diagnostics are constantly being improved to catch more issues,
explain them more clearly, and provide more accurate source information
about them. The improvements since the 3.7 release include:

- ``-Wmicrosoft`` has been split into many targeted flags, so that projects can
  choose to enable only a subset of these warnings. ``-Wno-microsoft`` still
  disables all these warnings, and ``-Wmicrosoft`` still enables them all.

New Compiler Flags
------------------

Clang can "tune" DWARF debugging information to suit one of several different
debuggers. This fine-tuning can mean omitting DWARF features that the
debugger does not need or use, or including DWARF extensions specific to the
debugger. Clang supports tuning for three debuggers, as follows.

- ``-ggdb`` is equivalent to ``-g`` plus tuning for the GDB debugger. For
  compatibility with GCC, Clang allows this option to be followed by a
  single digit from 0 to 3 indicating the debugging information "level."
  For example, ``-ggdb1`` is equivalent to ``-ggdb -g1``.

- ``-glldb`` is equivalent to ``-g`` plus tuning for the LLDB debugger.

- ``-gsce`` is equivalent to ``-g`` plus tuning for the Sony Computer
  Entertainment debugger.

Specifying ``-g`` without a tuning option will use a target-dependent default.

The new ``-fstrict-vtable-pointers`` flag enables better devirtualization
support (experimental).


Alignment
---------
Clang has gotten better at passing down strict type alignment information to LLVM,
and several targets have gotten better at taking advantage of that information.

Dereferencing a pointer that is not adequately aligned for its type is undefined
behavior.  It may crash on target architectures that strictly enforce alignment, but
even on architectures that do not, frequent use of unaligned pointers may hurt
the performance of the generated code.

If you find yourself fixing a bug involving an inadequately aligned pointer, you
have several options.

The best option, when practical, is to increase the alignment of the memory.
For example, this array is not guaranteed to be sufficiently aligned to store
a pointer value:

.. code-block:: c

  char buffer[sizeof(const char*)];

Writing a pointer directly into it violates C's alignment rules:

.. code-block:: c

  ((const char**) buffer)[0] = "Hello, world!\n";

But you can use alignment attributes to increase the required alignment:

.. code-block:: c

  __attribute__((aligned(__alignof__(const char*))))
  char buffer[sizeof(const char*)];

When that's not practical, you can instead reduce the alignment requirements
of the pointer.  If the pointer is to a struct that represents that layout of a
serialized structure, consider making that struct packed; this will remove any
implicit internal padding that the compiler might add to the struct and
reduce its alignment requirement to 1.

.. code-block:: c

  struct file_header {
    uint16_t magic_number;
    uint16_t format_version;
    uint16_t num_entries;
  } __attribute__((packed));

You may also override the default alignment assumptions of a pointer by
using a typedef with explicit alignment:

.. code-block:: c

  typedef const char *unaligned_char_ptr __attribute__((aligned(1)));
  ((unaligned_char_ptr*) buffer)[0] = "Hello, world!\n";

The final option is to copy the memory into something that is properly
aligned.  Be aware, however, that Clang will assume that pointers are
properly aligned for their type when you pass them to a library function
like memcpy.  For example, this code will assume that the source and
destination pointers are both properly aligned for an int:

.. code-block:: c

  void copy_int_array(int *dest, const int *src, size_t num) {
    memcpy(dest, src, num * sizeof(int));
  }

You may explicitly disable this assumption by casting the argument to a
less-aligned pointer type:

.. code-block:: c

  void copy_unaligned_int_array(int *dest, const int *src, size_t num) {
    memcpy((char*) dest, (const char*) src, num * sizeof(int));
  }

Clang promises not to look through the explicit cast when inferring the
alignment of this memcpy.


C Language Changes in Clang
---------------------------

Better support for ``__builtin_object_size``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Clang 3.8 has expanded support for the ``__builtin_object_size`` intrinsic.
Specifically, ``__builtin_object_size`` will now fail less often when you're
trying to get the size of a subobject. Additionally, the ``pass_object_size``
attribute was added, which allows ``__builtin_object_size`` to successfully
report the size of function parameters, without requiring that the function be
inlined.


``overloadable`` attribute relaxations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Previously, functions marked ``overloadable`` in C would strictly use C++'s
type conversion rules, so the following code would not compile:

.. code-block:: c

  void foo(char *bar, char *baz) __attribute__((overloadable));
  void foo(char *bar) __attribute__((overloadable));

  void callFoo() {
    int a;
    foo(&a);
  }

Now, Clang is able to selectively use C's type conversion rules during overload
resolution in C, which allows the above example to compile (albeit potentially
with a warning about an implicit conversion from ``int*`` to ``char*``).

OpenCL C Language Changes in Clang
----------------------------------

Several OpenCL 2.0 features have been added, including:

- Command-line option ``-std=CL2.0``.

- Generic address space (``__generic``) along with new conversion rules
  between different address spaces and default address space deduction.

- Support for program scope variables with ``__global`` address space.

- Pipe specifier was added (although no pipe functions are supported yet).

- Atomic types: ``atomic_int``, ``atomic_uint``, ``atomic_long``,
  ``atomic_ulong``, ``atomic_float``, ``atomic_double``, ``atomic_flag``,
  ``atomic_intptr_t``, ``atomic_uintptr_t``, ``atomic_size_t``,
  ``atomic_ptrdiff_t`` and their usage with C11 style builtin functions.

- Image types: ``image2d_depth_t``, ``image2d_array_depth_t``,
  ``image2d_msaa_t``, ``image2d_array_msaa_t``, ``image2d_msaa_depth_t``,
  ``image2d_array_msaa_depth_t``.

- Other types (for pipes and device side enqueue): ``clk_event_t``,
  ``queue_t``, ``ndrange_t``, ``reserve_id_t``.

Several additional features/bugfixes have been added to the previous standards:

- A set of floating point arithmetic relaxation flags: ``-cl-no-signed-zeros``,
  ``-cl-unsafe-math-optimizations``, ``-cl-finite-math-only``,
  ``-cl-fast-relaxed-math``.

- Added ``^^`` to the list of reserved operations.

- Improved vector support and diagnostics.

- Improved diagnostics for function pointers.

OpenMP Support in Clang
-----------------------

OpenMP 3.1 is fully supported and is enabled by default with ``-fopenmp`` 
which now uses the Clang OpenMP library instead of the GCC OpenMP library.
The runtime can be built in-tree.  

In addition to OpenMP 3.1, several important elements of the OpenMP 4.0/4.5 
are supported as well. We continue to aim to complete OpenMP 4.5

- ``map`` clause
- task dependencies
- ``num_teams`` clause
- ``thread_limit`` clause
- ``target`` and ``target data`` directive
- ``target`` directive with implicit data mapping
- ``target enter data`` and ``target exit data`` directive
- Array sections [2.4, Array Sections].
- Directive name modifiers for ``if`` clause [2.12, if Clause].
- ``linear`` clause can be used in loop-based directives [2.7.2, loop Construct].
- ``simdlen`` clause [2.8, SIMD Construct].
- ``hint`` clause [2.13.2, critical Construct].
- Parsing/semantic analysis of all non-device directives introduced in OpenMP 4.5.

The codegen for OpenMP constructs was significantly improved allowing us to produce much more stable and fast code.
Full test cases of IR are also implemented.

CUDA Support in Clang
---------------------
Clang has experimental support for end-to-end CUDA compilation now:

- The driver now detects CUDA installation, creates host and device compilation
  pipelines, links device-side code with appropriate CUDA bitcode and produces
  single object file with host and GPU code.

- Implemented target attribute-based function overloading which allows Clang to
  compile CUDA sources without splitting them into separate host/device TUs.

Internal API Changes
--------------------

These are major API changes that have happened since the 3.7 release of
Clang. If upgrading an external codebase that uses Clang as a library,
this section should help get you past the largest hurdles of upgrading.

* With this release, the autoconf build system is deprecated. It will be removed
  in the 3.9 release. Please migrate to using CMake. For more information see:
  `Building LLVM with CMake <http://llvm.org/docs/CMake.html>`_

AST Matchers
------------
The AST matcher functions were renamed to reflect the exact AST node names,
which is a breaking change to AST matching code. The following matchers were
affected:

=======================	============================
Previous Matcher Name	New Matcher Name
=======================	============================
recordDecl		recordDecl and cxxRecordDecl
ctorInitializer		cxxCtorInitializer
constructorDecl		cxxConstructorDecl
destructorDecl		cxxDestructorDecl
methodDecl		cxxMethodDecl
conversionDecl		cxxConversionDecl
memberCallExpr		cxxMemberCallExpr
constructExpr		cxxConstructExpr
unresolvedConstructExpr	cxxUnresolvedConstructExpr
thisExpr		cxxThisExpr
bindTemporaryExpr	cxxBindTemporaryExpr
newExpr			cxxNewExpr
deleteExpr		cxxDeleteExpr
defaultArgExpr		cxxDefaultArgExpr
operatorCallExpr	cxxOperatorCallExpr
forRangeStmt		cxxForRangeStmt
catchStmt		cxxCatchStmt
tryStmt			cxxTryStmt
throwExpr		cxxThrowExpr
boolLiteral		cxxBoolLiteral
nullPtrLiteralExpr	cxxNullPtrLiteralExpr
reinterpretCastExpr	cxxReinterpretCastExpr
staticCastExpr		cxxStaticCastExpr
dynamicCastExpr		cxxDynamicCastExpr
constCastExpr		cxxConstCastExpr
functionalCastExpr	cxxFunctionalCastExpr
temporaryObjectExpr	cxxTemporaryObjectExpr
CUDAKernalCallExpr	cudaKernelCallExpr
=======================	============================

recordDecl() previously matched AST nodes of type CXXRecordDecl, but now
matches AST nodes of type RecordDecl. If a CXXRecordDecl is required, use the
cxxRecordDecl() matcher instead.


Static Analyzer
---------------

The scan-build and scan-view tools will now be installed with Clang. Use these
tools to run the static analyzer on projects and view the produced results.

Static analysis of C++ lambdas has been greatly improved, including
interprocedural analysis of lambda applications.

Several new checks were added:

- The analyzer now checks for misuse of ``vfork()``.
- The analyzer can now detect excessively-padded structs. This check can be
  enabled by passing the following command to scan-build:
  ``-enable-checker optin.performance.Padding``.
- The checks to detect misuse of ``_Nonnull`` type qualifiers as well as checks
  to detect misuse of Objective-C generics were added.
- The analyzer now has opt in checks to detect localization errors in Cocoa
  applications. The checks warn about uses of non-localized ``NSStrings``
  passed to UI methods expecting localized strings and on ``NSLocalizedString``
  macros that are missing the comment argument. These can be enabled by passing
  the following command to scan-build:
  ``-enable-checker optin.osx.cocoa.localizability``.


Clang-tidy
----------

New checks have been added to clang-tidy:

* Checks enforcing certain rules of the `CERT Secure Coding Standards
  <https://www.securecoding.cert.org/confluence/display/seccode/SEI+CERT+Coding+Standards>`_:

  * `cert-dcl03-c <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert-dcl03-c.html>`_
  * `cert-dcl50-cpp <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert-dcl50-cpp.html>`_
  * `cert-err52-cpp <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert-err52-cpp.html>`_
  * `cert-err58-cpp <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert-err58-cpp.html>`_
  * `cert-err60-cpp <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert-err60-cpp.html>`_
  * `cert-err61-cpp <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert-err61-cpp.html>`_
  * `cert-fio38-c <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert-fio38-c.html>`_
  * `cert-oop11-cpp <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert-oop11-cpp.html>`_

* Checks supporting the `C++ Core Guidelines
  <https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md>`_:

  * `cppcoreguidelines-pro-bounds-array-to-pointer-decay <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html>`_
  * `cppcoreguidelines-pro-bounds-constant-array-index <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html>`_
  * `cppcoreguidelines-pro-bounds-pointer-arithmetic <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html>`_
  * `cppcoreguidelines-pro-type-const-cast <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html>`_
  * `cppcoreguidelines-pro-type-cstyle-cast <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html>`_
  * `cppcoreguidelines-pro-type-reinterpret-cast <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html>`_
  * `cppcoreguidelines-pro-type-static-cast-downcast <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html>`_
  * `cppcoreguidelines-pro-type-union-access <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html>`_
  * `cppcoreguidelines-pro-type-vararg <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html>`_

* The functionality of the clang-modernize tool has been moved to the new
  ``modernize`` module in clang-tidy along with a few new checks:

  * `modernize-loop-convert <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-loop-convert.html>`_
  * `modernize-make-unique <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-make-unique.html>`_
  * `modernize-pass-by-value <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-pass-by-value.html>`_
  * `modernize-redundant-void-arg <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-redundant-void-arg.html>`_
  * `modernize-replace-auto-ptr <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-replace-auto-ptr.html>`_
  * `modernize-shrink-to-fit <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-shrink-to-fit.html>`_ (renamed from readability-shrink-to-fit)
  * `modernize-use-auto <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-use-auto.html>`_
  * `modernize-use-default <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-use-default.html>`_
  * `modernize-use-nullptr <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-use-nullptr.html>`_
  * `modernize-use-override <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize-use-override.html>`_ (renamed from misc-use-override)

* New checks flagging various readability-related issues:

  * `readability-identifier-naming <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability-identifier-naming.html>`_
  * `readability-implicit-bool-cast <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability-implicit-bool-cast.html>`_
  * `readability-inconsistent-declaration-parameter-name <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html>`_
  * `readability-uniqueptr-delete-release <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability-uniqueptr-delete-release.html>`_

* New ``performance`` module for checks targeting potential performance issues:

  * performance-unnecessary-copy-initialization

* A few new checks have been added to the ``misc`` module:

  * `misc-definitions-in-headers <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-definitions-in-headers.html>`_
  * misc-move-const-arg
  * `misc-move-constructor-init <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-move-constructor-init.html>`_
  * `misc-new-delete-overloads <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-new-delete-overloads.html>`_
  * `misc-non-copyable-objects <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-non-copyable-objects.html>`_
  * `misc-sizeof-container <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-sizeof-container.html>`_
  * `misc-string-integer-assignment <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-string-integer-assignment.html>`_
  * `misc-throw-by-value-catch-by-reference <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html>`_
  * `misc-unused-alias-decls <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-unused-alias-decls.html>`_
  * `misc-unused-parameters <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-unused-parameters.html>`_
  * `misc-virtual-near-miss <http://llvm.org/releases/3.8.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-virtual-near-miss.html>`_


Additional Information
======================

A wide variety of additional information is available on the `Clang web
page <http://clang.llvm.org/>`_. The web page contains versions of the
API documentation which are up-to-date with the Subversion version of
the source code. You can access versions of these documents specific to
this release by going into the "``clang/docs/``" directory in the Clang
tree.

If you have any questions or comments about Clang, please feel free to
contact us via the `mailing
list <http://lists.llvm.org/mailman/listinfo/cfe-dev>`_.
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d2 1
a2 1
Clang 3.9 Release Notes
d15 1
a15 1
frontend, part of the LLVM Compiler Infrastructure, release 3.9. Here we
d19 1
a19 1
documentation <http://llvm.org/docs/ReleaseNotes.html>`_. All LLVM
d28 1
a28 1
What's New in Clang 3.9?
d36 12
a47 1
Major New Features
d50 43
a92 7
- Clang will no longer pass ``--build-id`` by default to the linker. In modern
  linkers that is a relatively expensive option. It can be passed explicitly
  with ``-Wl,--build-id``. To have clang always pass it, build clang with
  ``-DENABLE_LINKER_BUILD_ID``.
- On Itanium ABI targets, attribute abi_tag is now supported for compatibility
  with GCC. Clang's implementation of abi_tag is mostly compatible with GCC ABI
  version 10.
d94 18
a111 2
Improvements to Clang's diagnostics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
d113 5
a117 3
Clang's diagnostics are constantly being improved to catch more issues,
explain them more clearly, and provide more accurate source information
about them. The improvements since the 3.8 release include:
d119 2
a120 1
- ``-Wcomma`` is a new warning to show most uses of the builtin comma operator.
d122 1
a122 2
- ``-Wfloat-conversion`` has two new sub-warnings to give finer grain control for
  floating point to integer conversion warnings.
d124 2
a125 2
  - ``-Wfloat-overflow-conversion`` detects when a constant floating point value
    is converted to an integer type and will overflow the target type.
d127 5
a131 2
  - ``-Wfloat-zero-conversion`` detects when a non-zero floating point value is
    converted to a zero integer value.
d133 1
a133 2
Attribute Changes in Clang
--------------------------
d135 3
a137 4
- The ``nodebug`` attribute may now be applied to static, global, and local
  variables (but not parameters or non-static data members). This will suppress
  all debugging information for the variable (and its type, if there are no
  other uses of the type).
d139 2
d142 1
a142 2
Windows Support
---------------
d144 3
a146 1
TLS is enabled for Cygwin and defaults to -femulated-tls.
d148 2
a149 2
Proper support, including correct mangling and overloading, added for
MS-specific "__unaligned" type qualifier.
a150 9
clang-cl now has limited support for the precompiled header flags /Yc, /Yu, and
/Fp.  If the precompiled header is passed on the compile command with /FI, then
the precompiled header flags are honored.  But if the precompiled header is
included by an ``#include <stdafx.h>`` in each source file instead of by a
``/FIstdafx.h`` flag, these flag continue to be ignored.

clang-cl has a new flag, ``/imsvc <dir>``, for adding a directory to the system
include search path (where warnings are disabled by default) without having to
set ``%INCLUDE%``.
a153 1
The -faltivec and -maltivec flags no longer silently include altivec.h on Power platforms.
d155 2
a156 4
`RenderScript
<https://developer.android.com/guide/topics/renderscript/compute.html>`_
support has been added to the frontend and enabled by the '-x renderscript'
option or the '.rs' file extension.
d158 6
a164 2
C++ Language Changes in Clang
-----------------------------
d166 2
a167 2
- Clang now enforces the rule that a *using-declaration* cannot name an enumerator of a
  scoped enumeration.
d169 2
a170 1
  .. code-block:: c++
d172 1
a172 5
    namespace Foo { enum class E { e }; }
    namespace Bar {
      using Foo::E::e; // error
      constexpr auto e = Foo::E::e; // ok
    }
d174 2
a175 2
- Clang now enforces the rule that an enumerator of an unscoped enumeration declared at
  class scope can only be named by a *using-declaration* in a derived class.
d177 4
a180 1
  .. code-block:: c++
d182 3
a184 3
    class Foo { enum E { e }; }
    using Foo::e; // error
    static constexpr auto e = Foo::e; // ok
d186 2
d189 1
a189 2
C++1z Feature Support
^^^^^^^^^^^^^^^^^^^^^
d191 1
a191 2
Clang's experimental support for the upcoming C++1z standard can be enabled with ``-std=c++1z``.
Changes to C++1z features since Clang 3.8:
d193 2
a194 5
- The ``[[fallthrough]]``, ``[[nodiscard]]``, and ``[[maybe_unused]]`` attributes are
  supported in C++11 onwards, and are largely synonymous with Clang's existing attributes
  ``[[clang::fallthrough]]``, ``[[gnu::warn_unused_result]]``, and ``[[gnu::unused]]``.
  Use ``-Wimplicit-fallthrough`` to warn on unannotated fallthrough within ``switch``
  statements.
d196 1
a196 1
- In C++1z mode, aggregate initialization can be performed for classes with base classes:
d198 1
a198 1
  .. code-block:: c++
d200 4
a203 3
    struct A { int n; };
    struct B : A { int x, y; };
    B b = { 1, 2, 3 }; // b.n == 1, b.x == 2, b.y == 3
d205 3
a207 2
- The range in a range-based ``for`` statement can have different types for its ``begin``
  and ``end`` iterators. This is permitted as an extension in C++11 onwards.
d209 2
a210 2
- Lambda-expressions can explicitly capture ``*this`` (to capture the surrounding object
  by copy). This is permitted as an extension in C++11 onwards.
d212 1
a212 3
- Objects of enumeration type can be direct-list-initialized from a value of the underlying
  type. ``E{n}`` is equivalent to ``E(n)``, except that it implies a check for a narrowing
  conversion.
d214 3
a216 2
- Unary *fold-expression*\s over an empty pack are now rejected for all operators
  other than ``&&``, ``||``, and ``,``.
d218 1
a218 2
OpenCL C Language Changes in Clang
----------------------------------
d220 1
a220 2
Clang now has support for all OpenCL 2.0 features.  In particular, the following
features have been completed since the previous release:
d222 1
a222 45
- Pipe builtin functions (s6.13.16.2-4).
- Dynamic parallelism support via the ``enqueue_kernel`` Clang builtin function,
  as well as the kernel query functions from s6.13.17.6. 
- Address space conversion functions ``to_{global/local/private}``.
- ``nosvm`` attribute support.
- Improved diagnostic and generation of Clang Blocks used in OpenCL kernel code.
- ``opencl_unroll_hint`` pragma.

Several miscellaneous improvements have been made:

- Supported extensions are now part of the target representation to give correct
  diagnostics for unsupported target features during compilation. For example,
  when compiling for a target that does not support the double precision
  floating point extension, Clang will give an error when encountering the
  ``cl_khr_fp64`` pragma. Several missing extensions were added covering up to
  and including OpenCL 2.0.
- Clang now comes with the OpenCL standard headers declaring builtin types and
  functions up to and including OpenCL 2.0 in ``lib/Headers/opencl-c.h``. By
  default, Clang will not include this header. It can be included either using
  the regular ``-I<path to header location>`` directive or (if the default one
  from installation is to be used) using the ``-finclude-default-header``
  frontend flag.

  Example:

  .. code-block:: none

    echo "bool is_wg_uniform(int i){return get_enqueued_local_size(i)==get_local_size(i);}" > test.cl
    clang -cc1 -finclude-default-header -cl-std=CL2.0 test.cl

  All builtin function declarations from OpenCL 2.0 will be automatically
  visible in test.cl.
- Image types have been improved with better diagnostics for access qualifiers.
  Images with one access qualifier type cannot be used in declarations for
  another type. Also qualifiers are now propagated from the frontend down to
  libraries and backends.
- Diagnostic improvements for OpenCL types, address spaces and vectors.
- Half type literal support has been added. For example, ``1.0h`` represents a
  floating point literal in half precision, i.e., the value ``0xH3C00``.
- The Clang driver now accepts OpenCL compiler options ``-cl-*`` (following the
  OpenCL Spec v1.1-1.2 s5.8). For example, the ``-cl-std=CL1.2`` option from the
  spec enables compilation for OpenCL 1.2, or ``-cl-mad-enable`` will enable
  fusing multiply-and-add operations.
- Clang now uses function metadata instead of module metadata to propagate
  information related to OpenCL kernels e.g. kernel argument information.
d225 1
a225 1
----------------------------------
d227 45
a271 11
Added support for all non-offloading features from OpenMP 4.5, including using
data members in private clauses of non-static member functions. Additionally,
data members can be used as loop control variables in loop-based directives.

Currently Clang supports OpenMP 3.1 and all non-offloading features of
OpenMP 4.0/4.5. Offloading features are under development. Clang defines macro
_OPENMP and sets it to OpenMP 3.1 (in accordance with OpenMP standard) by
default. User may change this value using ``-fopenmp-version=[31|40|45]`` option.

The codegen for OpenMP constructs was significantly improved to produce much
more stable and faster code.
d275 40
a315 7
- has and hasAnyArgument: Matchers no longer ignore parentheses and implicit
  casts on the argument before applying the inner matcher. The fix was done to
  allow for greater control by the user. In all existing checkers that use this
  matcher all instances of code ``hasAnyArgument(<inner matcher>)`` or
  ``has(<inner matcher>)`` must be changed to
  ``hasAnyArgument(ignoringParenImpCasts(<inner matcher>))`` or
  ``has(ignoringParenImpCasts(<inner matcher>))``.
d320 90
a409 16
The analyzer now checks for incorrect usage of MPI APIs in C and C++. This
check can be enabled by passing the following command to scan-build:
``-enable-checker optin.mpi.MPI-Checker.``

The analyzer now checks for improper instance cleanup up in Objective-C
``-dealloc`` methods under manual retain/release.

On Windows, checks for memory leaks, double frees, and use-after-free problems
are now enabled by default.

The analyzer now includes scan-build-py, an experimental reimplementation of
scan-build in Python that also creates compilation databases.

The scan-build tool now supports a ``--force-analyze-debug-code`` flag that
forces projects to analyze in debug mode. This flag leaves in assertions and so
typically results in fewer false positives.
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d1 3
a3 3
=======================================
Clang 4.0.0 (In-Progress) Release Notes
=======================================
a10 6
.. warning::

   These are in-progress notes for the upcoming Clang 4.0.0 release. You may
   prefer the `Clang 3.9 Release Notes
   <http://llvm.org/releases/3.9.0/tools/clang/docs/ReleaseNotes.html>`_.

d15 1
a15 1
frontend, part of the LLVM Compiler Infrastructure, release 4.0.0. Here we
d28 2
a29 2
What's New in Clang 4.0.0?
==========================
d39 7
a45 32
- The ``diagnose_if`` attribute has been added to clang. This attribute allows
  clang to emit a warning or error if a function call meets one or more
  user-specified conditions.

- Enhanced devirtualization with
  `-fstrict-vtable-pointers <UsersManual.html#cmdoption-fstrict-vtable-pointers>`_.
  Clang devirtualizes across different basic blocks, like loops:

  .. code-block:: c++

       struct A {
           virtual void foo();
       };
       void indirect(A &a, int n) {
           for (int i = 0 ; i < n; i++)
               a.foo();
       }
       void test(int n) {
           A a;
           indirect(a, n);
       }


-  ...

Improvements to ThinLTO (-flto=thin)
------------------------------------
- Integration with profile data (PGO). When available, profile data enables
  more accurate function importing decisions, as well as cross-module indirect
  call promotion.
- Significant build-time and binary-size improvements when compiling with debug
  info (-g).
d50 3
a52 1
-  ...
d54 1
a54 9
New Compiler Flags
------------------

The option -Og has been added to optimize the debugging experience.
For now, this option is exactly the same as -O1. However, in the future,
some other optimizations might be enabled or disabled.

The option -MJ has been added to simplify adding JSON compilation
database output into existing build systems.
d56 2
a57 1
The option ....
d59 2
a60 4
New Pragmas in Clang
-----------------------

Clang now supports the ...
d62 2
d68 5
a72 1
-  ...
d77 1
a77 1
Clang's support for building native Windows programs ...
d79 12
d94 10
d105 2
a106 1
- ...
d108 1
a108 1
...
d110 5
a114 2
C11 Feature Support
^^^^^^^^^^^^^^^^^^^
d116 2
a117 1
...
d119 5
a123 2
C++ Language Changes in Clang
-----------------------------
a124 1
...
d129 12
a140 1
...
d142 13
a154 2
Objective-C Language Changes in Clang
-------------------------------------
d156 2
a157 1
...
d162 48
a209 1
...
d214 8
a221 8
...

Internal API Changes
--------------------

These are major API changes that have happened since the 3.9 release of
Clang. If upgrading an external codebase that uses Clang as a library,
this section should help get you past the largest hurdles of upgrading.
d223 2
a224 1
-  ...
d229 7
a235 10
...

libclang
--------

...

With the option --show-description, scan-build's list of defects will also
show the description of the defects.

d240 16
a255 18
...

Core Analysis Improvements
==========================

- ...

New Issues Found
================

- ...

Python Binding Changes
----------------------

The following methods have been added:

-  ...
a256 2
Significant Known Problems
==========================
@


1.1.1.4
log
@Import LLVM 4.0.0 release including clang and lld.
@
text
@d1 3
a3 3
=========================
Clang 4.0.0 Release Notes
=========================
d11 6
d20 1
a20 1
This document contains the release notes for the Clang C/C++/Objective-C/OpenCL
d45 1
a45 2
- The `diagnose_if <AttributeReference.html#diagnose-if>`_ attribute has been
  added to clang. This attribute allows
d68 2
d76 6
a81 1
  info (``-g``).
d86 37
a122 3
- The option ``-Og`` has been added to optimize the debugging experience.
  For now, this option is exactly the same as ``-O1``. However, in the future,
  some other optimizations might be enabled or disabled.
d124 2
a125 2
- The option ``-MJ`` has been added to simplify adding JSON compilation
  database output into existing build systems.
d127 11
d142 15
a156 1
**The following bugs in the OpenCL header have been fixed:**
d158 2
a159 2
* Added missing ``overloadable`` and ``convergent`` attributes.
* Removed some erroneous extra ``native_*`` functions.
d161 1
a161 1
**The following bugs in the generation of metadata have been fixed:**
d163 7
a169 62
* Corrected the SPIR version depending on the OpenCL version.
* Source level address spaces are taken from the SPIR specification.
* Image types now contain no access qualifier.

**The following bugs in the AMD target have been fixed:**

* Corrected the bitwidth of ``size_t`` and NULL pointer value with respect to
  address spaces.
* Added ``cl_khr_subgroups``, ``cl_amd_media_ops`` and ``cl_amd_media_ops2``
  extensions.
* Added ``cl-denorms-are-zero`` support.
* Changed address spaces for image objects to be ``constant``.
* Added little-endian.

**The following bugs in OpenCL 2.0 have been fixed:**

* Fixed pipe builtin function return type, added extra argument to generated
  IR intrinsics to propagate size and alignment information of the pipe packed
  type.
* Improved pipe type to accommodate access qualifiers.
* Added correct address space to the ObjC block generation and ``enqueue_kernel``
  prototype.
* Improved handling of integer parameters of ``enqueue_kernel`` prototype. We
  now allow ``size_t`` instead of ``int`` for specifying block parameter sizes.
* Allow using NULL (aka ``CLK_NULL_QUEUE``) with ``queue_t``.


**Improved the following diagnostics:**

* Disallow address spaces other than ``global`` for kernel pointer parameters.
* Correct the use of half type argument and pointer assignment with
  dereferencing.
* Disallow variadic arguments in functions and blocks.
* Allow partial initializer for array and struct.

**Some changes to OpenCL extensions have been made:**

* Added ``cl_khr_mipmap_image``.
* Added ``-cl-ext`` flag to allow overwriting supported extensions otherwise
  set by the target compiled for (Example: ``-cl-ext=-all,+cl_khr_fp16``).
* New types and functions can now be flexibly added to extensions using the
  following pragmas instead of modifying the Clang source code:

  .. code-block:: c

       #pragma OPENCL EXTENSION the_new_extension_name : begin
       // declare types and functions associated with the extension here
       #pragma OPENCL EXTENSION the_new_extension_name : end


**Miscellaneous changes:**

* Fix ``__builtin_astype`` to cast between different address space objects.
* Allow using ``opencl_unroll_hint`` with earlier OpenCL versions than 2.0.
* Improved handling of floating point literal to default to single precision if
  fp64 extension is not enabled.
* Refactor ``sampler_t`` implementation to simplify initializer representation
  which is now handled as a compiler builtin function with an integer value
  passed into it.
* Change fake address space map to use the SPIR convention.
* Added `the OpenCL manual <UsersManual.html#opencl-features>`_ to Clang
  documentation.
d175 11
a185 2
With the option ``--show-description``, scan-build's list of defects will also
show the description of the defects.
d187 2
a188 1
The analyzer now provides better support of code that uses gtest.
d190 1
a190 1
Several new checks were added:
d192 1
a192 13
- The analyzer warns when virtual calls are made from constructors or
  destructors. This check is off by default but can be enabled by passing the
  following command to scan-build: ``-enable-checker optin.cplusplus.VirtualCall``.
- The analyzer checks for synthesized copy properties of mutable types in
  Objective C, such as ``NSMutableArray``. Calling the setter for these properties
  will store an immutable copy of the value.
- The analyzer checks for calls to ``dispatch_once()`` that use an Objective-C
  instance variable as the predicate. Using an instance variable as a predicate
  may result in the passed-in block being executed multiple times or not at all.
  These calls should be rewritten either to use a lock or to store the predicate
  in a global or static variable.
- The analyzer checks for unintended comparisons of ``NSNumber``, ``CFNumberRef``, and
  other Cocoa number objects to scalar values.
d194 2
@


1.1.1.5
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d2 1
a2 1
Clang 5.0.0 Release Notes
d14 2
a15 2
This document contains the release notes for the Clang C/C++/Objective-C
frontend, part of the LLVM Compiler Infrastructure, release 5.0.0. Here we
d23 4
a26 3
For more information about Clang or LLVM, including information about the
latest release, please see the `Clang Web Site <http://clang.llvm.org>`_ or the
`LLVM Web Site <http://llvm.org>`_.
d28 1
a28 1
What's New in Clang 5.0.0?
d39 8
a46 33
C++ coroutines
^^^^^^^^^^^^^^
`C++ coroutines TS
<http://open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4680.pdf>`_
implementation has landed. Use ``-fcoroutines-ts -stdlib=libc++`` to enable
coroutine support. Here is `an example
<https://wandbox.org/permlink/Dth1IO5q8Oe31ew2>`_ to get you started.


Improvements to Clang's diagnostics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``-Wcast-qual`` was implemented for C++. C-style casts are now properly
   diagnosed.

-  ``-Wunused-lambda-capture`` warns when a variable explicitly captured
   by a lambda is not used in the body of the lambda.

-  ``-Wstrict-prototypes`` is a new warning that warns about non-prototype
   function and block declarations and types in C and Objective-C.

-  ``-Wunguarded-availability`` is a new warning that warns about uses of new
   APIs that were introduced in a system whose version is newer than the
   deployment target version. A new Objective-C expression ``@@available`` has
   been introduced to perform system version checking at runtime. This warning
   is off by default to prevent unexpected warnings in existing projects.
   However, its less strict sibling ``-Wunguarded-availability-new`` is on by
   default. It warns about unguarded uses of APIs only when they were introduced
   in or after macOS 10.13, iOS 11, tvOS 11 or watchOS 4.

-  The ``-Wdocumentation`` warning now allows the use of ``\param`` and
   ``\returns`` documentation directives in the documentation comments for
   declarations with a function or a block pointer type.
d48 1
a48 2
-  The compiler no longer warns about unreachable ``__builtin_unreachable``
   statements.
d50 11
a60 2
New Compiler Flags
------------------
a61 2
- ``--autocomplete`` was implemented to obtain a list of flags and its arguments.
  This is used for shell autocompletion.
d63 7
a69 2
Deprecated Compiler Flags
-------------------------
d71 2
a72 45
The following options are deprecated and ignored. They will be removed in
future versions of Clang.

- ``-fslp-vectorize-aggressive`` used to enable the BB vectorizing pass. They have been superseeded
  by the normal SLP vectorizer.
- ``-fno-slp-vectorize-aggressive`` used to be the default behavior of clang.

New Pragmas in Clang
-----------------------

- Clang now supports the ``clang attribute`` pragma that allows users to apply
  an attribute to multiple declarations.

- ``pragma pack`` directives that are included in a precompiled header are now
  applied correctly to the declarations in the compilation unit that includes
  that precompiled header.

Attribute Changes in Clang
--------------------------

-  The ``overloadable`` attribute now allows at most one function with a given
   name to lack the ``overloadable`` attribute. This unmarked function will not
   have its name mangled.
-  The ``ms_abi`` attribute and the ``__builtin_ms_va_list`` types and builtins
   are now supported on AArch64.

C Language Changes in Clang
---------------------------

- Added near complete support for implicit scalar to vector conversion, a GNU
  C/C++ language extension. With this extension, the following code is
  considered valid:

.. code-block:: c

    typedef unsigned v4i32 __attribute__((vector_size(16)));

    v4i32 foo(v4i32 a) {
      // Here 5 is implicitly casted to an unsigned value and replicated into a
      // vector with as many elements as 'a'.
      return a + 5;
    }

The implicit conversion of a scalar value to a vector value--in the context of
a vector expression--occurs when:
d74 3
a76 2
- The type of the vector is that of a ``__attribute__((vector_size(size)))``
  vector, not an OpenCL ``__attribute__((ext_vector_type(size)))`` vector type.
d78 2
a79 3
- The scalar value can be casted to that of the vector element's type without
  the loss of precision based on the type of the scalar and the type of the
  vector's elements.
a80 51
- For compile time constant values, the above rule is weakened to consider the
  value of the scalar constant rather than the constant's type. However,
  for compatibility with GCC, floating point constants with precise integral
  representations are not implicitly converted to integer values.

Currently the basic integer and floating point types with the following
operators are supported: ``+``, ``/``, ``-``, ``*``, ``%``, ``>``, ``<``,
``>=``, ``<=``, ``==``, ``!=``, ``&``, ``|``, ``^`` and the corresponding
assignment operators where applicable.


C++ Language Changes in Clang
-----------------------------

- We expect this to be the last Clang release that defaults to ``-std=gnu++98``
  when using the GCC-compatible ``clang++`` driver. From Clang 6 onwards we
  expect to use ``-std=gnu++14`` or a later standard by default, to match the
  behavior of recent GCC releases. Users are encouraged to change their build
  files to explicitly specify their desired C++ standard.

- Support for the C++17 standard has been completed. This mode can be enabled
  using ``-std=c++17`` (the old flag ``-std=c++1z`` is still supported for
  compatibility).

- When targeting a platform that uses the Itanium C++ ABI, Clang implements a
  `recent change to the ABI`__ that passes objects of class type indirectly if they
  have a non-trivial move constructor. Previous versions of Clang only
  considered the copy constructor, resulting in an ABI change in rare cases,
  but GCC has already implemented this change for several releases.
  This affects all targets other than Windows and PS4. You can opt out of this
  ABI change with ``-fclang-abi-compat=4.0``.

- As mentioned in `C Language Changes in Clang`_, Clang's support for
  implicit scalar to vector conversions also applies to C++. Additionally
  the following operators are also supported: ``&&`` and ``||``.

.. __: https://github.com/itanium-cxx-abi/cxx-abi/commit/7099637aba11fed6bdad7ee65bf4fd3f97fbf076

Objective-C Language Changes in Clang
-------------------------------------

- Clang now guarantees that a ``readwrite`` property is synthesized when an
  ambiguous property (i.e. a property that's declared in multiple protocols)
  is synthesized. The ``-Wprotocol-property-synthesis-ambiguity`` warning that
  warns about incompatible property types is now promoted to an error when
  there's an ambiguity between ``readwrite`` and ``readonly`` properties.

- Clang now prohibits synthesis of ambiguous properties with incompatible
  explicit property attributes. The following property attributes are
  checked for differences: ``copy``, ``retain``/``strong``, ``atomic``,
  ``getter`` and ``setter``.
d85 1
a85 22
Various bug fixes and improvements:

-  Extended OpenCL-related Clang tests.

-  Improved diagnostics across several areas: scoped address space
   qualified variables, function pointers, atomics, type rank for overloading,
   block captures, ``reserve_id_t``.

-  Several address space related fixes for constant address space function scope variables,
   IR generation, mangling of ``generic`` and alloca (post-fix from general Clang
   refactoring of address spaces).

-  Several improvements in extensions: fixed OpenCL version for ``cl_khr_mipmap_image``,
   added missing ``cl_khr_3d_image_writes``.

-  Improvements in ``enqueue_kernel``, especially the implementation of ``ndrange_t`` and blocks.

-  OpenCL type related fixes: global samplers, the ``pipe_t`` size, internal type redefinition,
   and type compatibility checking in ternary and other operations.

-  The OpenCL header has been extended with missing extension guards, and direct mapping of ``as_type``
   to ``__builtin_astype``.
d87 2
a88 1
-  Fixed ``kernel_arg_type_qual`` and OpenCL/SPIR version in metadata.
d90 1
a90 1
-  Added proper use of the kernel calling convention to various targets.
d92 62
a153 1
The following new functionalities have been added:
a154 83
-  Added documentation on OpenCL to Clang user manual.

-  Extended Clang builtins with required ``cl_khr_subgroups`` support.

-  Add ``intel_reqd_sub_group_size`` attribute support.

-  Added OpenCL types to ``CIndex``.


clang-format
------------

* Option **BreakBeforeInheritanceComma** added to break before ``:`` and ``,``  in case of
  multiple inheritance in a class declaration. Enabled by default in the Mozilla coding style.

  +---------------------+----------------------------------------+
  | true                | false                                  |
  +=====================+========================================+
  | .. code-block:: c++ | .. code-block:: c++                    |
  |                     |                                        |
  |   class MyClass     |   class MyClass : public X, public Y { |
  |       : public X    |   };                                   |
  |       , public Y {  |                                        |
  |   };                |                                        |
  +---------------------+----------------------------------------+

* Align block comment decorations.

  +----------------------+---------------------+
  | Before               | After               |
  +======================+=====================+
  |  .. code-block:: c++ | .. code-block:: c++ |
  |                      |                     |
  |    /* line 1         |   /* line 1         |
  |      * line 2        |    * line 2         |
  |     */               |    */               |
  +----------------------+---------------------+

* The :doc:`ClangFormatStyleOptions` documentation provides detailed examples for most options.

* Namespace end comments are now added or updated automatically.

  +---------------------+---------------------+
  | Before              | After               |
  +=====================+=====================+
  | .. code-block:: c++ | .. code-block:: c++ |
  |                     |                     |
  |   namespace A {     |   namespace A {     |
  |   int i;            |   int i;            |
  |   int j;            |   int j;            |
  |   }                 |   } // namespace A  |
  +---------------------+---------------------+

* Comment reflow support added. Overly long comment lines will now be reflown with the rest of
  the paragraph instead of just broken. Option **ReflowComments** added and enabled by default.

libclang
--------

- Libclang now provides code-completion results for more C++ constructs
  and keywords. The following keywords/identifiers are now included in the
  code-completion results: ``static_assert``, ``alignas``, ``constexpr``,
  ``final``, ``noexcept``, ``override`` and ``thread_local``.

- Libclang now provides code-completion results for members from dependent
  classes. For example:

  .. code-block:: c++

    template<typename T>
    void appendValue(std::vector<T> &dest, const T &value) {
        dest. // Relevant completion results are now shown after '.'
    }

  Note that code-completion results are still not provided when the member
  expression includes a dependent base expression. For example:

  .. code-block:: c++

    template<typename T>
    void appendValue(std::vector<std::vector<T>> &dest, const T &value) {
        dest.at(0). // Libclang fails to provide completion results after '.'
    }
d159 2
a160 44
- The static analyzer now supports using the
  `z3 theorem prover <https://github.com/z3prover/z3>`_ from Microsoft Research
  as an external constraint solver. This allows reasoning over more complex
  queries, but performance is ~15x slower than the default range-based
  constraint solver. To enable the z3 solver backend, clang must be built with
  the ``CLANG_ANALYZER_BUILD_Z3=ON`` option, and the
  ``-Xanalyzer -analyzer-constraints=z3`` arguments passed at runtime.

Undefined Behavior Sanitizer (UBSan)
------------------------------------

- The Undefined Behavior Sanitizer has a new check for pointer overflow. This
  check is on by default. The flag to control this functionality is
  ``-fsanitize=pointer-overflow``.

  Pointer overflow is an indicator of undefined behavior: when a pointer
  indexing expression wraps around the address space, or produces other
  unexpected results, its result may not point to a valid object.

- UBSan has several new checks which detect violations of nullability
  annotations. These checks are off by default. The flag to control this group
  of checks is ``-fsanitize=nullability``. The checks can be individially enabled
  by ``-fsanitize=nullability-arg`` (which checks calls),
  ``-fsanitize=nullability-assign`` (which checks assignments), and
  ``-fsanitize=nullability-return`` (which checks return statements).

- UBSan can now detect invalid loads from bitfields and from ObjC BOOLs.

- UBSan can now avoid emitting unnecessary type checks in C++ class methods and
  in several other cases where the result is known at compile-time. UBSan can
  also avoid emitting unnecessary overflow checks in arithmetic expressions
  with promoted integer operands.


Python Binding Changes
----------------------

Python bindings now support both Python 2 and Python 3.

The following methods have been added:

- ``is_scoped_enum`` has been added to ``Cursor``.

- ``exception_specification_kind`` has been added to ``Cursor``.
d162 1
a162 1
- ``get_address_space`` has been added to ``Type``.
d164 1
a164 1
- ``get_typedef_name`` has been added to ``Type``.
d166 13
a178 1
- ``get_exception_specification_kind`` has been added to ``Type``.
@


