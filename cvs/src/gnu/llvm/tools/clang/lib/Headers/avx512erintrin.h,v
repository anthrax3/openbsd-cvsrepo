head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.6
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.56;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.56;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.50;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@/*===---- avx512erintrin.h - AVX512ER intrinsics ---------------------------===
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 *===-----------------------------------------------------------------------===
 */
#ifndef __IMMINTRIN_H
#error "Never use <avx512erintrin.h> directly; include <immintrin.h> instead."
#endif

#ifndef __AVX512ERINTRIN_H
#define __AVX512ERINTRIN_H

// exp2a23
#define _mm512_exp2a23_round_pd(A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_exp2pd_mask((__v8df)(__m512d)(A), \
                                      (__v8df)_mm512_setzero_pd(), \
                                      (__mmask8)-1, (R)); })

#define _mm512_mask_exp2a23_round_pd(S, M, A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_exp2pd_mask((__v8df)(__m512d)(A), \
                                      (__v8df)(__m512d)(S), \
                                      (__mmask8)(M), (R)); })

#define _mm512_maskz_exp2a23_round_pd(M, A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_exp2pd_mask((__v8df)(__m512d)(A), \
                                      (__v8df)_mm512_setzero_pd(), \
                                      (__mmask8)(M), (R)); })

#define _mm512_exp2a23_pd(A) \
   _mm512_exp2a23_round_pd((A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_exp2a23_pd(S, M, A) \
   _mm512_mask_exp2a23_round_pd((S), (M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_exp2a23_pd(M, A) \
   _mm512_maskz_exp2a23_round_pd((M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_exp2a23_round_ps(A, R) __extension__ ({ \
  (__m512)__builtin_ia32_exp2ps_mask((__v16sf)(__m512)(A), \
                                     (__v16sf)_mm512_setzero_ps(), \
                                     (__mmask8)-1, (R)); })

#define _mm512_mask_exp2a23_round_ps(S, M, A, R) __extension__ ({ \
  (__m512)__builtin_ia32_exp2ps_mask((__v16sf)(__m512)(A), \
                                     (__v16sf)(__m512)(S), \
                                     (__mmask8)(M), (R)); })

#define _mm512_maskz_exp2a23_round_ps(M, A, R) __extension__ ({ \
  (__m512)__builtin_ia32_exp2ps_mask((__v16sf)(__m512)(A), \
                                     (__v16sf)_mm512_setzero_ps(), \
                                     (__mmask8)(M), (R)); })

#define _mm512_exp2a23_ps(A) \
   _mm512_exp2a23_round_ps((A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_exp2a23_ps(S, M, A) \
   _mm512_mask_exp2a23_round_ps((S), (M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_exp2a23_ps(M, A) \
   _mm512_maskz_exp2a23_round_ps((M), (A), _MM_FROUND_CUR_DIRECTION)

// rsqrt28
#define _mm512_rsqrt28_round_pd(A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_rsqrt28pd_mask((__v8df)(__m512d)(A), \
                                         (__v8df)_mm512_setzero_pd(), \
                                         (__mmask8)-1, (R)); })

#define _mm512_mask_rsqrt28_round_pd(S, M, A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_rsqrt28pd_mask((__v8df)(__m512d)(A), \
                                         (__v8df)(__m512d)(S), \
                                         (__mmask8)(M), (R)); })

#define _mm512_maskz_rsqrt28_round_pd(M, A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_rsqrt28pd_mask((__v8df)(__m512d)(A), \
                                         (__v8df)_mm512_setzero_pd(), \
                                         (__mmask8)(M), (R)); })

#define _mm512_rsqrt28_pd(A) \
  _mm512_rsqrt28_round_pd((A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_rsqrt28_pd(S, M, A) \
  _mm512_mask_rsqrt28_round_pd((S), (M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_rsqrt28_pd(M, A) \
  _mm512_maskz_rsqrt28_round_pd((M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_rsqrt28_round_ps(A, R) __extension__ ({ \
  (__m512)__builtin_ia32_rsqrt28ps_mask((__v16sf)(__m512)(A), \
                                        (__v16sf)_mm512_setzero_ps(), \
                                        (__mmask16)-1, (R)); })

#define _mm512_mask_rsqrt28_round_ps(S, M, A, R) __extension__ ({ \
  (__m512)__builtin_ia32_rsqrt28ps_mask((__v16sf)(__m512)(A), \
                                        (__v16sf)(__m512)(S), \
                                        (__mmask16)(M), (R)); })

#define _mm512_maskz_rsqrt28_round_ps(M, A, R) __extension__ ({ \
  (__m512)__builtin_ia32_rsqrt28ps_mask((__v16sf)(__m512)(A), \
                                        (__v16sf)_mm512_setzero_ps(), \
                                        (__mmask16)(M), (R)); })

#define _mm512_rsqrt28_ps(A) \
  _mm512_rsqrt28_round_ps((A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_rsqrt28_ps(S, M, A) \
  _mm512_mask_rsqrt28_round_ps((S), (M), A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_rsqrt28_ps(M, A) \
  _mm512_maskz_rsqrt28_round_ps((M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm_rsqrt28_round_ss(A, B, R) __extension__ ({ \
  (__m128)__builtin_ia32_rsqrt28ss_round((__v4sf)(__m128)(A), \
                                        (__v4sf)(__m128)(B), \
                                        (__v4sf)_mm_setzero_ps(), \
                                        (__mmask8)-1, (R)); })

#define _mm_mask_rsqrt28_round_ss(S, M, A, B, R) __extension__ ({ \
  (__m128)__builtin_ia32_rsqrt28ss_round((__v4sf)(__m128)(A), \
                                        (__v4sf)(__m128)(B), \
                                        (__v4sf)(__m128)(S), \
                                        (__mmask8)(M), (R)); })

#define _mm_maskz_rsqrt28_round_ss(M, A, B, R) __extension__ ({ \
  (__m128)__builtin_ia32_rsqrt28ss_round((__v4sf)(__m128)(A), \
                                        (__v4sf)(__m128)(B), \
                                        (__v4sf)_mm_setzero_ps(), \
                                        (__mmask8)(M), (R)); })

#define _mm_rsqrt28_ss(A, B) \
  _mm_rsqrt28_round_ss((A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_mask_rsqrt28_ss(S, M, A, B) \
  _mm_mask_rsqrt28_round_ss((S), (M), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_maskz_rsqrt28_ss(M, A, B) \
  _mm_maskz_rsqrt28_round_ss((M), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_rsqrt28_round_sd(A, B, R) __extension__ ({ \
  (__m128d)__builtin_ia32_rsqrt28sd_round((__v2df)(__m128d)(A), \
                                         (__v2df)(__m128d)(B), \
                                         (__v2df)_mm_setzero_pd(), \
                                         (__mmask8)-1, (R)); })

#define _mm_mask_rsqrt28_round_sd(S, M, A, B, R) __extension__ ({ \
  (__m128d)__builtin_ia32_rsqrt28sd_round((__v2df)(__m128d)(A), \
                                         (__v2df)(__m128d)(B), \
                                         (__v2df)(__m128d)(S), \
                                         (__mmask8)(M), (R)); })

#define _mm_maskz_rsqrt28_round_sd(M, A, B, R) __extension__ ({ \
  (__m128d)__builtin_ia32_rsqrt28sd_round((__v2df)(__m128d)(A), \
                                         (__v2df)(__m128d)(B), \
                                         (__v2df)_mm_setzero_pd(), \
                                         (__mmask8)(M), (R)); })

#define _mm_rsqrt28_sd(A, B) \
  _mm_rsqrt28_round_sd((A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_mask_rsqrt28_sd(S, M, A, B) \
  _mm_mask_rsqrt28_round_sd((S), (M), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_maskz_rsqrt28_sd(M, A, B) \
  _mm_mask_rsqrt28_round_sd((M), (A), (B), _MM_FROUND_CUR_DIRECTION)

// rcp28
#define _mm512_rcp28_round_pd(A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_rcp28pd_mask((__v8df)(__m512d)(A), \
                                       (__v8df)_mm512_setzero_pd(), \
                                       (__mmask8)-1, (R)); })

#define _mm512_mask_rcp28_round_pd(S, M, A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_rcp28pd_mask((__v8df)(__m512d)(A), \
                                       (__v8df)(__m512d)(S), \
                                       (__mmask8)(M), (R)); })

#define _mm512_maskz_rcp28_round_pd(M, A, R) __extension__ ({ \
  (__m512d)__builtin_ia32_rcp28pd_mask((__v8df)(__m512d)(A), \
                                       (__v8df)_mm512_setzero_pd(), \
                                       (__mmask8)(M), (R)); })

#define _mm512_rcp28_pd(A) \
  _mm512_rcp28_round_pd((A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_rcp28_pd(S, M, A) \
  _mm512_mask_rcp28_round_pd((S), (M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_rcp28_pd(M, A) \
  _mm512_maskz_rcp28_round_pd((M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_rcp28_round_ps(A, R) __extension__ ({ \
  (__m512)__builtin_ia32_rcp28ps_mask((__v16sf)(__m512)(A), \
                                      (__v16sf)_mm512_setzero_ps(), \
                                      (__mmask16)-1, (R)); })

#define _mm512_mask_rcp28_round_ps(S, M, A, R) __extension__ ({ \
  (__m512)__builtin_ia32_rcp28ps_mask((__v16sf)(__m512)(A), \
                                      (__v16sf)(__m512)(S), \
                                      (__mmask16)(M), (R)); })

#define _mm512_maskz_rcp28_round_ps(M, A, R) __extension__ ({ \
  (__m512)__builtin_ia32_rcp28ps_mask((__v16sf)(__m512)(A), \
                                      (__v16sf)_mm512_setzero_ps(), \
                                      (__mmask16)(M), (R)); })

#define _mm512_rcp28_ps(A) \
  _mm512_rcp28_round_ps((A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_rcp28_ps(S, M, A) \
  _mm512_mask_rcp28_round_ps((S), (M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_rcp28_ps(M, A) \
  _mm512_maskz_rcp28_round_ps((M), (A), _MM_FROUND_CUR_DIRECTION)

#define _mm_rcp28_round_ss(A, B, R) __extension__ ({ \
  (__m128)__builtin_ia32_rcp28ss_round((__v4sf)(__m128)(A), \
                                      (__v4sf)(__m128)(B), \
                                      (__v4sf)_mm_setzero_ps(), \
                                      (__mmask8)-1, (R)); })

#define _mm_mask_rcp28_round_ss(S, M, A, B, R) __extension__ ({ \
  (__m128)__builtin_ia32_rcp28ss_round((__v4sf)(__m128)(A), \
                                      (__v4sf)(__m128)(B), \
                                      (__v4sf)(__m128)(S), \
                                      (__mmask8)(M), (R)); })

#define _mm_maskz_rcp28_round_ss(M, A, B, R) __extension__ ({ \
  (__m128)__builtin_ia32_rcp28ss_round((__v4sf)(__m128)(A), \
                                      (__v4sf)(__m128)(B), \
                                      (__v4sf)_mm_setzero_ps(), \
                                      (__mmask8)(M), (R)); })

#define _mm_rcp28_ss(A, B) \
  _mm_rcp28_round_ss((A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_mask_rcp28_ss(S, M, A, B) \
  _mm_mask_rcp28_round_ss((S), (M), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_maskz_rcp28_ss(M, A, B) \
  _mm_maskz_rcp28_round_ss((M), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_rcp28_round_sd(A, B, R) __extension__ ({ \
  (__m128d)__builtin_ia32_rcp28sd_round((__v2df)(__m128d)(A), \
                                       (__v2df)(__m128d)(B), \
                                       (__v2df)_mm_setzero_pd(), \
                                       (__mmask8)-1, (R)); })

#define _mm_mask_rcp28_round_sd(S, M, A, B, R) __extension__ ({ \
  (__m128d)__builtin_ia32_rcp28sd_round((__v2df)(__m128d)(A), \
                                       (__v2df)(__m128d)(B), \
                                       (__v2df)(__m128d)(S), \
                                       (__mmask8)(M), (R)); })

#define _mm_maskz_rcp28_round_sd(M, A, B, R) __extension__ ({ \
  (__m128d)__builtin_ia32_rcp28sd_round((__v2df)(__m128d)(A), \
                                       (__v2df)(__m128d)(B), \
                                       (__v2df)_mm_setzero_pd(), \
                                       (__mmask8)(M), (R)); })

#define _mm_rcp28_sd(A, B) \
  _mm_rcp28_round_sd((A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_mask_rcp28_sd(S, M, A, B) \
  _mm_mask_rcp28_round_sd((S), (M), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_maskz_rcp28_sd(M, A, B) \
  _mm_maskz_rcp28_round_sd((M), (A), (B), _MM_FROUND_CUR_DIRECTION)

#endif // __AVX512ERINTRIN_H
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d34 1
a34 1
                                      (__mmask8)-1, (int)(R)); })
d38 2
a39 2
                                      (__v8df)(__m512d)(S), (__mmask8)(M), \
                                      (int)(R)); })
d44 1
a44 1
                                      (__mmask8)(M), (int)(R)); })
d47 1
a47 1
  _mm512_exp2a23_round_pd((A), _MM_FROUND_CUR_DIRECTION)
d50 1
a50 1
  _mm512_mask_exp2a23_round_pd((S), (M), (A), _MM_FROUND_CUR_DIRECTION)
d53 1
a53 1
  _mm512_maskz_exp2a23_round_pd((M), (A), _MM_FROUND_CUR_DIRECTION)
d58 1
a58 1
                                     (__mmask16)-1, (int)(R)); })
d62 2
a63 2
                                     (__v16sf)(__m512)(S), (__mmask16)(M), \
                                     (int)(R)); })
d68 1
a68 1
                                     (__mmask16)(M), (int)(R)); })
d71 1
a71 1
  _mm512_exp2a23_round_ps((A), _MM_FROUND_CUR_DIRECTION)
d74 1
a74 1
  _mm512_mask_exp2a23_round_ps((S), (M), (A), _MM_FROUND_CUR_DIRECTION)
d77 1
a77 1
  _mm512_maskz_exp2a23_round_ps((M), (A), _MM_FROUND_CUR_DIRECTION)
d83 1
a83 1
                                         (__mmask8)-1, (int)(R)); })
d87 2
a88 2
                                         (__v8df)(__m512d)(S), (__mmask8)(M), \
                                         (int)(R)); })
d93 1
a93 1
                                         (__mmask8)(M), (int)(R)); })
d107 1
a107 1
                                        (__mmask16)-1, (int)(R)); })
d111 2
a112 2
                                        (__v16sf)(__m512)(S), (__mmask16)(M), \
                                        (int)(R)); })
d117 1
a117 1
                                        (__mmask16)(M), (int)(R)); })
d129 4
a132 4
  (__m128)__builtin_ia32_rsqrt28ss_round_mask((__v4sf)(__m128)(A), \
                                              (__v4sf)(__m128)(B), \
                                              (__v4sf)_mm_setzero_ps(), \
                                              (__mmask8)-1, (int)(R)); })
d135 4
a138 4
  (__m128)__builtin_ia32_rsqrt28ss_round_mask((__v4sf)(__m128)(A), \
                                              (__v4sf)(__m128)(B), \
                                              (__v4sf)(__m128)(S), \
                                              (__mmask8)(M), (int)(R)); })
d141 4
a144 4
  (__m128)__builtin_ia32_rsqrt28ss_round_mask((__v4sf)(__m128)(A), \
                                              (__v4sf)(__m128)(B), \
                                              (__v4sf)_mm_setzero_ps(), \
                                              (__mmask8)(M), (int)(R)); })
d156 4
a159 4
  (__m128d)__builtin_ia32_rsqrt28sd_round_mask((__v2df)(__m128d)(A), \
                                               (__v2df)(__m128d)(B), \
                                               (__v2df)_mm_setzero_pd(), \
                                               (__mmask8)-1, (int)(R)); })
d162 4
a165 4
  (__m128d)__builtin_ia32_rsqrt28sd_round_mask((__v2df)(__m128d)(A), \
                                               (__v2df)(__m128d)(B), \
                                               (__v2df)(__m128d)(S), \
                                               (__mmask8)(M), (int)(R)); })
d168 4
a171 4
  (__m128d)__builtin_ia32_rsqrt28sd_round_mask((__v2df)(__m128d)(A), \
                                               (__v2df)(__m128d)(B), \
                                               (__v2df)_mm_setzero_pd(), \
                                               (__mmask8)(M), (int)(R)); })
d180 1
a180 1
  _mm_maskz_rsqrt28_round_sd((M), (A), (B), _MM_FROUND_CUR_DIRECTION)
d186 1
a186 1
                                       (__mmask8)-1, (int)(R)); })
d190 2
a191 2
                                       (__v8df)(__m512d)(S), (__mmask8)(M), \
                                       (int)(R)); })
d196 1
a196 1
                                       (__mmask8)(M), (int)(R)); })
d210 1
a210 1
                                      (__mmask16)-1, (int)(R)); })
d214 2
a215 2
                                      (__v16sf)(__m512)(S), (__mmask16)(M), \
                                      (int)(R)); })
d220 1
a220 1
                                      (__mmask16)(M), (int)(R)); })
d232 4
a235 4
  (__m128)__builtin_ia32_rcp28ss_round_mask((__v4sf)(__m128)(A), \
                                            (__v4sf)(__m128)(B), \
                                            (__v4sf)_mm_setzero_ps(), \
                                            (__mmask8)-1, (int)(R)); })
d238 4
a241 4
  (__m128)__builtin_ia32_rcp28ss_round_mask((__v4sf)(__m128)(A), \
                                            (__v4sf)(__m128)(B), \
                                            (__v4sf)(__m128)(S), \
                                            (__mmask8)(M), (int)(R)); })
d244 4
a247 4
  (__m128)__builtin_ia32_rcp28ss_round_mask((__v4sf)(__m128)(A), \
                                            (__v4sf)(__m128)(B), \
                                            (__v4sf)_mm_setzero_ps(), \
                                            (__mmask8)(M), (int)(R)); })
d259 4
a262 4
  (__m128d)__builtin_ia32_rcp28sd_round_mask((__v2df)(__m128d)(A), \
                                             (__v2df)(__m128d)(B), \
                                             (__v2df)_mm_setzero_pd(), \
                                             (__mmask8)-1, (int)(R)); })
d265 4
a268 4
  (__m128d)__builtin_ia32_rcp28sd_round_mask((__v2df)(__m128d)(A), \
                                             (__v2df)(__m128d)(B), \
                                             (__v2df)(__m128d)(S), \
                                             (__mmask8)(M), (int)(R)); })
d271 4
a274 4
  (__m128d)__builtin_ia32_rcp28sd_round_mask((__v2df)(__m128d)(A), \
                                             (__v2df)(__m128d)(B), \
                                             (__v2df)_mm_setzero_pd(), \
                                             (__mmask8)(M), (int)(R)); })
@

