head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.2
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2017.01.14.19.55.46;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.46;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.12;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	so2WA7LCP6wbxtYl;

1.1.1.3
date	2017.03.14.08.07.53;	author patrick;	state Exp;
branches;
next	;
commitid	aUi5NxOzBSLCN5eN;


desc
@@


1.1
log
@Initial revision
@
text
@======================
LLD 3.9 Release Notes
======================

.. contents::
    :local:

Introduction
============

This document contains the release notes for the LLD linker, release 3.9.
Here we describe the status of LLD, including major improvements
from the previous release. All LLD releases may be downloaded
from the `LLVM releases web site <http://llvm.org/releases/>`_.

What's new in ELF Support?
==========================

LLD 3.9 is a major milestone for us. It is the first release that can
link real-world large userland programs, including LLVM/Clang/LLD
themselves. In fact, for example, it can now be used to produce most
userland programs distributed as part of FreeBSD.

Many contributors have joined to the project to develop new features,
port it to new architectures and fix issues since the last release.

Link-Time Optimization
----------------------

Initial support for LTO has been added. It is compatible with
`the LLVM gold plugin <http://llvm.org/docs/GoldPlugin.html>`_ in terms of
command line flags and input file format so that LLD is usable as a
drop-in replacement for GNU gold. LTO is implemented as a native
feature unlike the GNU gold's plugin mechanism.

Identical Code Folding
----------------------

LLD 3.9 can now merge identical code sections to produce smaller
output files. It is expected to be used with ``-ffunction-sections``.

Symbol Versioning
-----------------

LLD 3.9 is able to link against versioned symbols as well as produce
versioned symbols. Both the original Sun's symbol versioning scheme
and the GNU extension are supported.

New Targets
-----------

LLD has expanded support for new targets, including ARM/Thumb, the x32
ABI and MIPS N64 ABI, in addition to the existing support for x86,
x86-64, MIPS, PowerPC and PPC64.

TLS Relocation Optimizations
----------------------------

The ELF ABI specification of the thread-local variable define a few
peephole optimizations linkers can do by rewriting instructions at the
link-time to reduce run-time overhead to access TLS variables. That
feature has been implemented.

New Linker Flags
----------------

Many command line options have been added in this release, including:

- Symbol resolution and output options: ``-Bsymbolic-functions``,
  ``-export-dynamic-symbol``, ``-image-base``, ``-pie``, ``-end-lib``,
  ``-start-lib``, ``-build-id={md5,sha1,none,0x<hexstring>}``.

- Symbol versioning option: ``-dynamic-list``.

- LTO options: ``-lto-O``, ``-lto-aa-pipeline``, ``-lto-jobs``,
  ``-lto-newpm-passes``, ``-plugin``, ``-plugin-eq``, ``-plugin-opt``,
  ``-plugin-opt-eq``, ``-disable-verify``, ``-mllvm``.

- Driver optionss: ``-help``, ``-version``, ``-unresolved-symbols``.

- Debug options: ``-demangle``, ``-reproduce``, ``-save-temps``,
  ``-strip-debug``, ``-trace``, ``-trace-symbol``,
  ``-warn-execstack``.

- Exception handling option: ``-eh-frame-hdr``.

- Identical Code Folding option: ``-icf``.

Changes to the MIPS Target
--------------------------

* Added support for MIPS N64 ABI.
* Added support for TLS relocations for both O32 and N64 MIPS ABIs.

Building LLVM Toolchain with LLD
--------------------------------

A new CMake variable, ``LLVM_ENABLE_LLD``, has been added to use LLD
to build the LLVM toolchain. If the varaible is true, ``-fuse-ld=lld``
option will be added to linker flags so that ``ld.lld`` is used
instead of default ``ld``.  Because ``-fuse-ld=lld`` is a new compiler
driver option, you need Clang 3.8 or newer to use the feature.
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d1 3
a3 3
=======================
LLD 4.0.0 Release Notes
=======================
a7 3
.. warning::
   These are in-progress notes for the upcoming LLVM 4.0.0 release.

d11 1
a11 1
This document contains the release notes for the LLD linker, release 4.0.0.
d16 47
a62 2
Non-comprehensive list of changes in this release
=================================================
d64 1
a64 1
ELF Improvements
d67 13
a79 1
* Initial support for LTO.
d81 10
a90 2
COFF Improvements
-----------------
d92 2
a93 1
* Item 1.
d95 2
a96 2
MachO Improvements
------------------
d98 5
a102 1
* Item 1.
@


1.1.1.3
log
@Import LLVM 4.0.0 release including clang and lld.
@
text
@d8 3
d14 1
a14 9
LLD is a linker which supports ELF (Unix), COFF (Windows) and Mach-O
(macOS). It is generally faster than the GNU BFD/gold linkers or the
MSVC linker.

LLD is designed to be a drop-in replacement for the system linkers, so
that users don't need to change their build systems other than swapping
the linker command.

This document contains the release notes for LLD 4.0.0.
d19 2
a20 3

What's New in LLD 4.0?
======================
d25 1
a25 63
LLD provides much better compatibility with the GNU linker than before.
Now it is able to link the entire FreeBSD base system including the kernel
out of the box. We are working closely with the FreeBSD project to
make it usable as the system linker in a future release of the operating
system.

Multi-threading performance has been improved, and multi-threading
is now enabled by default. Combined with other optimizations, LLD 4.0
is about 1.5 times faster than LLD 3.9 when linking large programs
in our test environment.

Other notable changes are listed below:

* Error messages contain more information than before. If debug info
  is available, the linker prints out not only the object file name
  but the source location of unresolved symbols.

* Error messages are printed in red just like Clang by default. You
  can disable it by passing ``-no-color-diagnostics``.

* LLD's version string is now embedded in a .comment section in the
  result output file. You can dump it with this command: ``objdump -j -s
  .comment <file>``.

* The ``-Map`` option is supported. With that, you can print out section
  and symbol information to a specified file. This feature is useful
  for analyzing link results.

* The file format for the ``-reproduce`` option has changed from cpio to
  tar.

* When creating a copy relocation for a symbol, LLD now scans the
  DSO's header to see if the symbol is in a read-only segment. If so,
  space for the copy relocation is reserved in .bss.rel.ro instead of
  .bss. This fixes a security issue that read-only data in a DSO
  becomes writable if it is copied by a copy relocation. This issue
  was disclosed originally on the
  `binutils mailing list <https://sourceware.org/ml/libc-alpha/2016-12/msg00914.html>`_.

* Compressed input sections are supported.

* ``--oformat binary``, ``--section-start``, ``-Tbss``, ``-Tdata``,
  ``-Ttext``, ``-b binary``, ``-build-id=uuid``, ``-no-rosegment``,
  ``-nopie``, ``-nostdlib``, ``-omagic``, ``-retain-symbols-file``,
  ``-sort-section``, ``-z max-page-size`` and ``-z wxneeded`` are
  supported.

* A lot of linker script directives have been added.

* Default image base address for x86-64 has changed from 0x10000 to
  0x200000 to make it huge-page friendly.

* ARM port now supports GNU ifunc, the ARM C++ exceptions ABI, TLS
  relocations and static linking. Problems with ``dlopen()`` on systems
  using eglibc fixed.

* MIPS port now supports input files in new R6 revision of MIPS ABIs
  or N32 ABI. Generated file now contains .MIPS.abiflags section and
  complete set of ELF headers flags.

* Relocations produced by the ``-mxgot`` compiler flag is supported
  for MIPS. Now it is possible to generate "large" GOT that exceeds the 64K
  limit.
d30 6
a35 4
* Performance on Windows has been improved by parallelizing parts of the
  linker and optimizing file system operations. As a result of these
  improvements, LLD 4.0 has been measured to be about 2.5 times faster
  than LLD 3.9 when linking a large Chromium DLL.
@


