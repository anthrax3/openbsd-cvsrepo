head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.4
	OPENBSD_6_2:1.1.1.3.0.2
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2017.01.14.19.55.46;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.46;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.12;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	so2WA7LCP6wbxtYl;

1.1.1.3
date	2017.03.14.08.07.53;	author patrick;	state Exp;
branches;
next	1.1.1.4;
commitid	aUi5NxOzBSLCN5eN;

1.1.1.4
date	2017.10.04.20.27.36;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@======================
LLD 3.9 Release Notes
======================

.. contents::
    :local:

Introduction
============

This document contains the release notes for the LLD linker, release 3.9.
Here we describe the status of LLD, including major improvements
from the previous release. All LLD releases may be downloaded
from the `LLVM releases web site <http://llvm.org/releases/>`_.

What's new in ELF Support?
==========================

LLD 3.9 is a major milestone for us. It is the first release that can
link real-world large userland programs, including LLVM/Clang/LLD
themselves. In fact, for example, it can now be used to produce most
userland programs distributed as part of FreeBSD.

Many contributors have joined to the project to develop new features,
port it to new architectures and fix issues since the last release.

Link-Time Optimization
----------------------

Initial support for LTO has been added. It is compatible with
`the LLVM gold plugin <http://llvm.org/docs/GoldPlugin.html>`_ in terms of
command line flags and input file format so that LLD is usable as a
drop-in replacement for GNU gold. LTO is implemented as a native
feature unlike the GNU gold's plugin mechanism.

Identical Code Folding
----------------------

LLD 3.9 can now merge identical code sections to produce smaller
output files. It is expected to be used with ``-ffunction-sections``.

Symbol Versioning
-----------------

LLD 3.9 is able to link against versioned symbols as well as produce
versioned symbols. Both the original Sun's symbol versioning scheme
and the GNU extension are supported.

New Targets
-----------

LLD has expanded support for new targets, including ARM/Thumb, the x32
ABI and MIPS N64 ABI, in addition to the existing support for x86,
x86-64, MIPS, PowerPC and PPC64.

TLS Relocation Optimizations
----------------------------

The ELF ABI specification of the thread-local variable define a few
peephole optimizations linkers can do by rewriting instructions at the
link-time to reduce run-time overhead to access TLS variables. That
feature has been implemented.

New Linker Flags
----------------

Many command line options have been added in this release, including:

- Symbol resolution and output options: ``-Bsymbolic-functions``,
  ``-export-dynamic-symbol``, ``-image-base``, ``-pie``, ``-end-lib``,
  ``-start-lib``, ``-build-id={md5,sha1,none,0x<hexstring>}``.

- Symbol versioning option: ``-dynamic-list``.

- LTO options: ``-lto-O``, ``-lto-aa-pipeline``, ``-lto-jobs``,
  ``-lto-newpm-passes``, ``-plugin``, ``-plugin-eq``, ``-plugin-opt``,
  ``-plugin-opt-eq``, ``-disable-verify``, ``-mllvm``.

- Driver optionss: ``-help``, ``-version``, ``-unresolved-symbols``.

- Debug options: ``-demangle``, ``-reproduce``, ``-save-temps``,
  ``-strip-debug``, ``-trace``, ``-trace-symbol``,
  ``-warn-execstack``.

- Exception handling option: ``-eh-frame-hdr``.

- Identical Code Folding option: ``-icf``.

Changes to the MIPS Target
--------------------------

* Added support for MIPS N64 ABI.
* Added support for TLS relocations for both O32 and N64 MIPS ABIs.

Building LLVM Toolchain with LLD
--------------------------------

A new CMake variable, ``LLVM_ENABLE_LLD``, has been added to use LLD
to build the LLVM toolchain. If the varaible is true, ``-fuse-ld=lld``
option will be added to linker flags so that ``ld.lld`` is used
instead of default ``ld``.  Because ``-fuse-ld=lld`` is a new compiler
driver option, you need Clang 3.8 or newer to use the feature.
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d1 3
a3 3
=======================
LLD 4.0.0 Release Notes
=======================
a7 3
.. warning::
   These are in-progress notes for the upcoming LLVM 4.0.0 release.

d11 1
a11 1
This document contains the release notes for the LLD linker, release 4.0.0.
d16 47
a62 2
Non-comprehensive list of changes in this release
=================================================
d64 1
a64 1
ELF Improvements
d67 13
a79 1
* Initial support for LTO.
d81 10
a90 2
COFF Improvements
-----------------
d92 2
a93 1
* Item 1.
d95 2
a96 2
MachO Improvements
------------------
d98 5
a102 1
* Item 1.
@


1.1.1.3
log
@Import LLVM 4.0.0 release including clang and lld.
@
text
@d8 3
d14 1
a14 9
LLD is a linker which supports ELF (Unix), COFF (Windows) and Mach-O
(macOS). It is generally faster than the GNU BFD/gold linkers or the
MSVC linker.

LLD is designed to be a drop-in replacement for the system linkers, so
that users don't need to change their build systems other than swapping
the linker command.

This document contains the release notes for LLD 4.0.0.
d19 2
a20 3

What's New in LLD 4.0?
======================
d25 1
a25 63
LLD provides much better compatibility with the GNU linker than before.
Now it is able to link the entire FreeBSD base system including the kernel
out of the box. We are working closely with the FreeBSD project to
make it usable as the system linker in a future release of the operating
system.

Multi-threading performance has been improved, and multi-threading
is now enabled by default. Combined with other optimizations, LLD 4.0
is about 1.5 times faster than LLD 3.9 when linking large programs
in our test environment.

Other notable changes are listed below:

* Error messages contain more information than before. If debug info
  is available, the linker prints out not only the object file name
  but the source location of unresolved symbols.

* Error messages are printed in red just like Clang by default. You
  can disable it by passing ``-no-color-diagnostics``.

* LLD's version string is now embedded in a .comment section in the
  result output file. You can dump it with this command: ``objdump -j -s
  .comment <file>``.

* The ``-Map`` option is supported. With that, you can print out section
  and symbol information to a specified file. This feature is useful
  for analyzing link results.

* The file format for the ``-reproduce`` option has changed from cpio to
  tar.

* When creating a copy relocation for a symbol, LLD now scans the
  DSO's header to see if the symbol is in a read-only segment. If so,
  space for the copy relocation is reserved in .bss.rel.ro instead of
  .bss. This fixes a security issue that read-only data in a DSO
  becomes writable if it is copied by a copy relocation. This issue
  was disclosed originally on the
  `binutils mailing list <https://sourceware.org/ml/libc-alpha/2016-12/msg00914.html>`_.

* Compressed input sections are supported.

* ``--oformat binary``, ``--section-start``, ``-Tbss``, ``-Tdata``,
  ``-Ttext``, ``-b binary``, ``-build-id=uuid``, ``-no-rosegment``,
  ``-nopie``, ``-nostdlib``, ``-omagic``, ``-retain-symbols-file``,
  ``-sort-section``, ``-z max-page-size`` and ``-z wxneeded`` are
  supported.

* A lot of linker script directives have been added.

* Default image base address for x86-64 has changed from 0x10000 to
  0x200000 to make it huge-page friendly.

* ARM port now supports GNU ifunc, the ARM C++ exceptions ABI, TLS
  relocations and static linking. Problems with ``dlopen()`` on systems
  using eglibc fixed.

* MIPS port now supports input files in new R6 revision of MIPS ABIs
  or N32 ABI. Generated file now contains .MIPS.abiflags section and
  complete set of ELF headers flags.

* Relocations produced by the ``-mxgot`` compiler flag is supported
  for MIPS. Now it is possible to generate "large" GOT that exceeds the 64K
  limit.
d30 6
a35 4
* Performance on Windows has been improved by parallelizing parts of the
  linker and optimizing file system operations. As a result of these
  improvements, LLD 4.0 has been measured to be about 2.5 times faster
  than LLD 3.9 when linking a large Chromium DLL.
@


1.1.1.4
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d2 1
a2 1
lld 5.0.0 Release Notes
d11 12
a22 7
lld is a linker from the LLVM project. It supports ELF (Unix), COFF (Windows)
and Mach-O (macOS), and it is generally faster than the GNU bfd or gold linkers
or the MSVC linker.

lld is designed to be a drop-in replacement for the system linkers, so that
users don't need to change their build systems other than swapping the linker
command.
a23 2
All lld releases may be downloaded from the `LLVM releases web site
<http://llvm.org/releases/>`_.
d25 2
a26 2
Non-comprehensive list of changes in this release
=================================================
d31 71
a101 145
* First and foremost, a lot of compatibility issues and bugs have been fixed.
  Linker script support has significantly improved. As a result, we believe you
  are very likely to be able to link your programs with lld without experiencing
  any problem now.

* Error message format has changed in order to improve readability.
  Traditionally, linker's error messages are concise and arguably too terse.
  This is an example of lld 4.0.0's error message (they are actually in one line)::

    /ssd/clang/bin/ld.lld: error: /ssd/llvm-project/lld/ELF/Writer.cpp:207:
      undefined symbol 'lld::elf::EhFrameSection::addSection()'

  It is not easy to read because too much information is packed into a single line
  and the embedded text, particularly a symbol name, is sometimes too long.
  In lld 5.0.0, we use more vertical space to print out error messages in a more
  structured manner like this::

    bin/ld.lld: error: undefined symbol: lld::elf::EhFrameSection::addSection()
    >>> Referenced by Writer.cpp:207 (/ssd/llvm-project/lld/ELF/Writer.cpp:207)
    >>>               Writer.cpp.o in archive lib/liblldELF.a

  As a bonus, the new error message contains source code location of the error
  if it is available from debug info.

* ``./configure`` scripts generated by GNU autoconf determines whether a linker
  supports modern GNU-compatible features or not by searching for "GNU" in the
  ``--help`` message. To be compatible with the scripts, we decided to add a
  string "(compatible with GNU linkers)" to our ``--help`` message. This is a
  hack, but just like the web browser's User-Agent string (which everyone still
  claim they are "Mozilla/5.0"), we had no choice other than doing this to claim
  that we accept GNU-compatible options.

* The ``-Map`` option is added. The option is to make the linker to print out how
  input files are mapped to the output file. Here is an example::

    Address          Size             Align Out     In      Symbol
    00000000016d84d8 00000000008f8f50     8 .eh_frame
    00000000016d84d8 00000000008f8f50     8         <internal>:(.eh_frame)
    0000000001fd2000 00000000034b3bd0    16 .text
    0000000001fd2000 000000000000002a     1         /usr/lib/x86_64-linux-gnu/crt1.o:(.text)
    0000000001fd2000 0000000000000000     0                 _start
    0000000001fd202a 0000000000000000     1         /usr/lib/x86_64-linux-gnu/crti.o:(.text)
    0000000001fd2030 00000000000000bd    16         /usr/lib/gcc/x86_64-linux-gnu/4.8/crtbegin.o:(.text)
    0000000001fd2030 0000000000000000     0                 deregister_tm_clones
    0000000001fd2060 0000000000000000     0                 register_tm_clones

  This format is not the same as GNU linkers as our linker internal data
  structure is different from them but contains the same amount of information
  and should be more readable than their outputs.

  As with other lld features, the ``-Map`` option is designed with speed in mind.
  The option would generate a hundred megabyte text file if you link a large
  program with it. lld can usually do that in a few seconds, and it is generally
  a few times faster than the GNU gold's ``-Map`` option.

* lld's ``--gdb-index`` option used to be slow, but we sped it up so that it is
  at least as fast as the GNU gold.

* Some nonstandard relocations, such as R_X86_64_8 or R_X86_64_16, are supported.
  They are not used for 32/64-bit applications, but some 16-bit bootloaders need
  them.

* Paddings in executable text sections are now filled with trap instructions
  (such as INT3) instead of being left as null bytes. This change improves
  disassembler outputs because it now prints out trap instructions instead of
  trying to decode 0x00 as an instruction. It also makes debugging of some type
  of program easier because when the control reaches a padding, the program
  immediately raises an error.

* The following options are added: ``-M``, ``-Map``,
  ``-compress-debug-sections``, ``-emit-relocs``,
  ``-error-unresolved-symbols``, ``-exclude-libs``, ``-filter``,
  ``-no-dynamic-linker``, ``-no-export-dynamic``, ``-no-fatal-warnings``,
  ``-print-map``, ``-warn-unresolved-symbols``, ``-z nocopyreloc``,
  ``-z notext``, ``-z rodynamic``


Contributors to lld 5.0
=======================

We had 63 individuals contribute to lld 5.0. Thank you so much!

- Adrian McCarthy
- Alberto Magni
- Alexander Richardson
- Andre Vieira
- Andrew Ng
- Anton Korobeynikov
- Bob Haarman
- David Blaikie
- Davide Italiano
- David L. Jones
- Dmitry Mikulin
- Ed Maste
- Ed Schouten
- Eric Beckmann
- Eric Fiselier
- Eugene Leviant
- Evgeniy Stepanov
- Galina Kistanova
- George Rimar
- Hans Wennborg
- Igor Kudrin
- Ismail Donmez
- Jake Ehrlich
- James Henderson
- Joel Jones
- Jon Chesterfield
- Kamil Rytarowski
- Kevin Enderby
- Konstantin Zhuravlyov
- Kyungwoo Lee
- Leslie Zhai
- Mark Kettenis
- Martell Malone
- Martin Storsjo
- Meador Inge
- Mehdi Amini
- Michal Gorny
- NAKAMURA Takumi
- Paul Robinson
- Pavel Labath
- Petar Jovanovic
- Peter Collingbourne
- Peter Smith
- Petr Hosek
- Rafael Espindola
- Reid Kleckner
- Richard Smith
- Robert Clarke
- Rui Ueyama
- Saleem Abdulrasool
- Sam Clegg
- Sean Eveson
- Sean Silva
- Shankar Easwaran
- Shoaib Meenai
- Simon Atanasyan
- Simon Dardis
- Simon Tatham
- Sylvestre Ledru
- Tom Stellard
- Vitaly Buka
- Yuka Takahashi
- Zachary Turner
@


