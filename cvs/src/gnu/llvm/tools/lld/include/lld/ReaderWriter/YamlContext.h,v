head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.1
	OPENBSD_6_2:1.1.1.1.0.2
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.55.46;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.46;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@//===- lld/ReaderWriter/YamlContext.h - object used in YAML I/O context ---===//
//
//                             The LLVM Linker
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLD_READER_WRITER_YAML_CONTEXT_H
#define LLD_READER_WRITER_YAML_CONTEXT_H

#include "lld/Core/LLVM.h"
#include <functional>
#include <memory>
#include <vector>

namespace lld {
class File;
class LinkingContext;
namespace mach_o {
namespace normalized {
struct NormalizedFile;
}
}

using lld::mach_o::normalized::NormalizedFile;

/// When YAML I/O is used in lld, the yaml context always holds a YamlContext
/// object.  We need to support hetergenous yaml documents which each require
/// different context info.  This struct supports all clients.
struct YamlContext {
  const LinkingContext *_ctx = nullptr;
  const Registry *_registry = nullptr;
  File *_file = nullptr;
  NormalizedFile *_normalizeMachOFile = nullptr;
  StringRef _path;
};

} // end namespace lld

#endif // LLD_READER_WRITER_YAML_CONTEXT_H
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@
