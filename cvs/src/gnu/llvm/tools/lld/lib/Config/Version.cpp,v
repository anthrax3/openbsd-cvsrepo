head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.6
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.1
date	2017.01.14.19.55.46;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.46;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.13;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- lib/Config/Version.cpp - LLD Version Number ---------------*- C++-=====//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines several version-related utility functions for LLD.
//
//===----------------------------------------------------------------------===//

#include "lld/Config/Version.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

namespace lld {

StringRef getLLDRepositoryPath() {
#ifdef LLD_REPOSITORY_STRING
  return LLD_REPOSITORY_STRING;
#else
  return "";
#endif
}

StringRef getLLDRevision() {
#ifdef LLD_REVISION_STRING
  return LLD_REVISION_STRING;
#else
  return "";
#endif
}

std::string getLLDRepositoryVersion() {
  std::string S = getLLDRepositoryPath();
  std::string T = getLLDRevision();
  if (S.empty() && T.empty())
    return "";
  if (!S.empty() && !T.empty())
    return "(" + S + " " + T + ")";
  if (!S.empty())
    return "(" + S + ")";
  return "(" + T + ")";
}

StringRef getLLDVersion() {
#ifdef LLD_VERSION_STRING
  return LLD_VERSION_STRING;
#else
  return "";
#endif
}

} // end namespace lld
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d15 1
d19 8
a26 7
// Returns an SVN repository path, which is usually "trunk".
static std::string getRepositoryPath() {
  StringRef S = LLD_REPOSITORY_STRING;
  size_t Pos = S.find("lld/");
  if (Pos != StringRef::npos)
    return S.substr(Pos + 4);
  return S;
d29 7
a35 5
// Returns an SVN repository name, e.g., " (trunk 284614)"
// or an empty string if no repository info is available.
static std::string getRepository() {
  std::string Repo = getRepositoryPath();
  std::string Rev = LLD_REVISION_STRING;
d37 4
a40 1
  if (Repo.empty() && Rev.empty())
d42 5
a46 3
  if (!Repo.empty() && !Rev.empty())
    return " (" + Repo + " " + Rev + ")";
  return " (" + Repo + Rev + ")";
d49 6
a54 3
// Returns a version string, e.g., "LLD 4.0 (lld/trunk 284614)".
std::string lld::getLLDVersion() {
  return "LLD " + std::string(LLD_VERSION_STRING) + getRepository();
d56 2
@

