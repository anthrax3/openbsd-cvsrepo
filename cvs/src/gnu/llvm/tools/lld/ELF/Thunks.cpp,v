head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.3
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.1
date	2017.01.14.19.55.45;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.45;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.12;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	so2WA7LCP6wbxtYl;

1.1.1.3
date	2017.10.04.20.27.35;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===- Thunks.cpp --------------------------------------------------------===//
//
//                             The LLVM Linker
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===---------------------------------------------------------------------===//
//
// This file contains Thunk subclasses.
//
// A thunk is a small piece of code written after an input section
// which is used to jump between "incompatible" functions
// such as MIPS PIC and non-PIC or ARM non-Thumb and Thumb functions.
//
// If a jump target is too far and its address doesn't fit to a
// short jump instruction, we need to create a thunk too, but we
// haven't supported it yet.
//
// i386 and x86-64 don't need thunks.
//
//===---------------------------------------------------------------------===//

#include "Thunks.h"
#include "Error.h"
#include "InputFiles.h"
#include "InputSection.h"
#include "OutputSections.h"
#include "Symbols.h"
#include "Target.h"
#include "llvm/Support/Allocator.h"

#include "llvm/Object/ELF.h"
#include "llvm/Support/ELF.h"
#include "llvm/Support/Endian.h"

using namespace llvm;
using namespace llvm::object;
using namespace llvm::support::endian;
using namespace llvm::ELF;

namespace lld {
namespace elf {

namespace {
// Specific ARM Thunk implementations. The naming convention is:
// Source State, TargetState, Target Requirement, ABS or PI, Range
template <class ELFT>
class ARMToThumbV7ABSLongThunk final : public Thunk<ELFT> {
public:
  ARMToThumbV7ABSLongThunk(const SymbolBody &Dest,
                           const InputSection<ELFT> &Owner)
      : Thunk<ELFT>(Dest, Owner) {}

  uint32_t size() const override { return 12; }
  void writeTo(uint8_t *Buf) const override;
};

template <class ELFT> class ARMToThumbV7PILongThunk final : public Thunk<ELFT> {
public:
  ARMToThumbV7PILongThunk(const SymbolBody &Dest,
                          const InputSection<ELFT> &Owner)
      : Thunk<ELFT>(Dest, Owner) {}

  uint32_t size() const override { return 16; }
  void writeTo(uint8_t *Buf) const override;
};

template <class ELFT>
class ThumbToARMV7ABSLongThunk final : public Thunk<ELFT> {
public:
  ThumbToARMV7ABSLongThunk(const SymbolBody &Dest,
                           const InputSection<ELFT> &Owner)
      : Thunk<ELFT>(Dest, Owner) {}

  uint32_t size() const override { return 10; }
  void writeTo(uint8_t *Buf) const override;
};

template <class ELFT> class ThumbToARMV7PILongThunk final : public Thunk<ELFT> {
public:
  ThumbToARMV7PILongThunk(const SymbolBody &Dest,
                          const InputSection<ELFT> &Owner)
      : Thunk<ELFT>(Dest, Owner) {}

  uint32_t size() const override { return 12; }
  void writeTo(uint8_t *Buf) const override;
};

// MIPS LA25 thunk
template <class ELFT> class MipsThunk final : public Thunk<ELFT> {
public:
  MipsThunk(const SymbolBody &Dest, const InputSection<ELFT> &Owner)
      : Thunk<ELFT>(Dest, Owner) {}

  uint32_t size() const override { return 16; }
  void writeTo(uint8_t *Buf) const override;
};
} // anonymous namespace

// ARM Target Thunks
template <class ELFT> static uint64_t getARMThunkDestVA(const SymbolBody &S) {
  return S.isInPlt() ? S.getPltVA<ELFT>() : S.getVA<ELFT>();
}

template <class ELFT>
void ARMToThumbV7ABSLongThunk<ELFT>::writeTo(uint8_t *Buf) const {
  const uint8_t Data[] = {
      0x00, 0xc0, 0x00, 0xe3, // movw         ip,:lower16:S
      0x00, 0xc0, 0x40, 0xe3, // movt         ip,:upper16:S
      0x1c, 0xff, 0x2f, 0xe1, // bx   ip
  };
  uint64_t S = getARMThunkDestVA<ELFT>(this->Destination);
  memcpy(Buf, Data, sizeof(Data));
  Target->relocateOne(Buf, R_ARM_MOVW_ABS_NC, S);
  Target->relocateOne(Buf + 4, R_ARM_MOVT_ABS, S);
}

template <class ELFT>
void ThumbToARMV7ABSLongThunk<ELFT>::writeTo(uint8_t *Buf) const {
  const uint8_t Data[] = {
      0x40, 0xf2, 0x00, 0x0c, // movw         ip, :lower16:S
      0xc0, 0xf2, 0x00, 0x0c, // movt         ip, :upper16:S
      0x60, 0x47,             // bx   ip
  };
  uint64_t S = getARMThunkDestVA<ELFT>(this->Destination);
  memcpy(Buf, Data, sizeof(Data));
  Target->relocateOne(Buf, R_ARM_THM_MOVW_ABS_NC, S);
  Target->relocateOne(Buf + 4, R_ARM_THM_MOVT_ABS, S);
}

template <class ELFT>
void ARMToThumbV7PILongThunk<ELFT>::writeTo(uint8_t *Buf) const {
  const uint8_t Data[] = {
      0xf0, 0xcf, 0x0f, 0xe3, // P:  movw ip,:lower16:S - (P + (L1-P) +8)
      0x00, 0xc0, 0x40, 0xe3, //     movt ip,:upper16:S - (P + (L1-P+4) +8)
      0x0f, 0xc0, 0x8c, 0xe0, // L1: add ip, ip, pc
      0x1c, 0xff, 0x2f, 0xe1, //     bx r12
  };
  uint64_t S = getARMThunkDestVA<ELFT>(this->Destination);
  uint64_t P = this->getVA();
  memcpy(Buf, Data, sizeof(Data));
  Target->relocateOne(Buf, R_ARM_MOVW_PREL_NC, S - P - 16);
  Target->relocateOne(Buf + 4, R_ARM_MOVT_PREL, S - P - 12);
}

template <class ELFT>
void ThumbToARMV7PILongThunk<ELFT>::writeTo(uint8_t *Buf) const {
  const uint8_t Data[] = {
      0x4f, 0xf6, 0xf4, 0x7c, // P:  movw ip,:lower16:S - (P + (L1-P) + 4)
      0xc0, 0xf2, 0x00, 0x0c, //     movt ip,:upper16:S - (P + (L1-P+4) + 4)
      0xfc, 0x44,             // L1: add  r12, pc
      0x60, 0x47,             //     bx   r12
  };
  uint64_t S = getARMThunkDestVA<ELFT>(this->Destination);
  uint64_t P = this->getVA();
  memcpy(Buf, Data, sizeof(Data));
  Target->relocateOne(Buf, R_ARM_THM_MOVW_PREL_NC, S - P - 12);
  Target->relocateOne(Buf + 4, R_ARM_THM_MOVT_PREL, S - P - 8);
}

// Write MIPS LA25 thunk code to call PIC function from the non-PIC one.
template <class ELFT> void MipsThunk<ELFT>::writeTo(uint8_t *Buf) const {
  const endianness E = ELFT::TargetEndianness;

  uint64_t S = this->Destination.template getVA<ELFT>();
  write32<E>(Buf, 0x3c190000);                // lui   $25, %hi(func)
  write32<E>(Buf + 4, 0x08000000 | (S >> 2)); // j     func
  write32<E>(Buf + 8, 0x27390000);            // addiu $25, $25, %lo(func)
  write32<E>(Buf + 12, 0x00000000);           // nop
  Target->relocateOne(Buf, R_MIPS_HI16, S);
  Target->relocateOne(Buf + 8, R_MIPS_LO16, S);
}

template <class ELFT>
Thunk<ELFT>::Thunk(const SymbolBody &D, const InputSection<ELFT> &O)
    : Destination(D), Owner(O), Offset(O.getThunkOff() + O.getThunksSize()) {}

template <class ELFT> typename ELFT::uint Thunk<ELFT>::getVA() const {
  return Owner.OutSec->getVA() + Owner.OutSecOff + Offset;
}

template <class ELFT> Thunk<ELFT>::~Thunk() {}

// Creates a thunk for Thumb-ARM interworking.
template <class ELFT>
static Thunk<ELFT> *createThunkArm(uint32_t Reloc, SymbolBody &S,
                                   InputSection<ELFT> &IS) {
  // ARM relocations need ARM to Thumb interworking Thunks.
  // Thumb relocations need Thumb to ARM relocations.
  // Use position independent Thunks if we require position independent code.
  BumpPtrAllocator &Alloc = IS.getFile()->Alloc;
  switch (Reloc) {
  case R_ARM_PC24:
  case R_ARM_PLT32:
  case R_ARM_JUMP24:
    if (Config->Pic)
      return new (Alloc) ARMToThumbV7PILongThunk<ELFT>(S, IS);
    return new (Alloc) ARMToThumbV7ABSLongThunk<ELFT>(S, IS);
  case R_ARM_THM_JUMP19:
  case R_ARM_THM_JUMP24:
    if (Config->Pic)
      return new (Alloc) ThumbToARMV7PILongThunk<ELFT>(S, IS);
    return new (Alloc) ThumbToARMV7ABSLongThunk<ELFT>(S, IS);
  }
  fatal("unrecognized relocation type");
}

template <class ELFT>
static void addThunkARM(uint32_t Reloc, SymbolBody &S, InputSection<ELFT> &IS) {
  // Only one Thunk supported per symbol.
  if (S.hasThunk<ELFT>())
    return;

  // ARM Thunks are added to the same InputSection as the relocation. This
  // isn't strictly necessary but it makes it more likely that a limited range
  // branch can reach the Thunk, and it makes Thunks to the PLT section easier
  Thunk<ELFT> *T = createThunkArm(Reloc, S, IS);
  IS.addThunk(T);
  if (auto *Sym = dyn_cast<DefinedRegular<ELFT>>(&S))
    Sym->ThunkData = T;
  else if (auto *Sym = dyn_cast<SharedSymbol<ELFT>>(&S))
    Sym->ThunkData = T;
  else
    fatal("symbol not DefinedRegular or Shared");
}

template <class ELFT>
static void addThunkMips(uint32_t RelocType, SymbolBody &S,
                         InputSection<ELFT> &IS) {
  // Only one Thunk supported per symbol.
  if (S.hasThunk<ELFT>())
    return;

  // Mips Thunks are added to the InputSection defining S.
  auto *R = cast<DefinedRegular<ELFT>>(&S);
  auto *Sec = cast<InputSection<ELFT>>(R->Section);
  auto *T = new (IS.getFile()->Alloc) MipsThunk<ELFT>(S, *Sec);
  Sec->addThunk(T);
  R->ThunkData = T;
}

template <class ELFT>
void addThunk(uint32_t RelocType, SymbolBody &S, InputSection<ELFT> &IS) {
  if (Config->EMachine == EM_ARM)
    addThunkARM<ELFT>(RelocType, S, IS);
  else if (Config->EMachine == EM_MIPS)
    addThunkMips<ELFT>(RelocType, S, IS);
  else
    llvm_unreachable("add Thunk only supported for ARM and Mips");
}

template void addThunk<ELF32LE>(uint32_t, SymbolBody &,
                                InputSection<ELF32LE> &);
template void addThunk<ELF32BE>(uint32_t, SymbolBody &,
                                InputSection<ELF32BE> &);
template void addThunk<ELF64LE>(uint32_t, SymbolBody &,
                                InputSection<ELF64LE> &);
template void addThunk<ELF64BE>(uint32_t, SymbolBody &,
                                InputSection<ELF64BE> &);

template class Thunk<ELF32LE>;
template class Thunk<ELF32BE>;
template class Thunk<ELF64LE>;
template class Thunk<ELF64BE>;

} // namespace elf
} // namespace lld
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a24 1
#include "Config.h"
d26 1
a27 1
#include "Memory.h"
d31 3
a33 1
#include "llvm/Support/Casting.h"
a35 4
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/MathExtras.h"
#include <cstdint>
#include <cstring>
a45 1

d99 1
a99 2

} // end anonymous namespace
d103 1
a103 2
  uint64_t V = S.isInPlt() ? S.getPltVA<ELFT>() : S.getVA<ELFT>();
  return SignExtend64<32>(V);
d180 1
a180 1
  return Owner.OutSec->Addr + Owner.OutSecOff + Offset;
d183 1
a183 1
template <class ELFT> Thunk<ELFT>::~Thunk() = default;
d192 1
d198 2
a199 2
      return new (BAlloc) ARMToThumbV7PILongThunk<ELFT>(S, IS);
    return new (BAlloc) ARMToThumbV7ABSLongThunk<ELFT>(S, IS);
d203 2
a204 2
      return new (BAlloc) ThumbToARMV7PILongThunk<ELFT>(S, IS);
    return new (BAlloc) ThumbToARMV7ABSLongThunk<ELFT>(S, IS);
a223 2
  else if (auto *Sym = dyn_cast<Undefined<ELFT>>(&S))
    Sym->ThunkData = T;
d238 1
a238 1
  auto *T = new (BAlloc) MipsThunk<ELFT>(S, *Sec);
d267 2
a268 2
} // end namespace elf
} // end namespace lld
@


1.1.1.3
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@a30 1
#include "SyntheticSections.h"
a31 1
#include "llvm/BinaryFormat/ELF.h"
d33 1
d52 2
a53 1
class ARMV7ABSLongThunk final : public Thunk {
d55 3
a57 1
  ARMV7ABSLongThunk(const SymbolBody &Dest) : Thunk(Dest) {}
d60 1
a60 3
  void writeTo(uint8_t *Buf, ThunkSection &IS) const override;
  void addSymbols(ThunkSection &IS) override;
  bool isCompatibleWith(uint32_t RelocType) const override;
d63 1
a63 1
class ARMV7PILongThunk final : public Thunk {
d65 3
a67 1
  ARMV7PILongThunk(const SymbolBody &Dest) : Thunk(Dest) {}
d70 1
a70 3
  void writeTo(uint8_t *Buf, ThunkSection &IS) const override;
  void addSymbols(ThunkSection &IS) override;
  bool isCompatibleWith(uint32_t RelocType) const override;
d73 2
a74 1
class ThumbV7ABSLongThunk final : public Thunk {
d76 3
a78 1
  ThumbV7ABSLongThunk(const SymbolBody &Dest) : Thunk(Dest) { Alignment = 2; }
d81 1
a81 3
  void writeTo(uint8_t *Buf, ThunkSection &IS) const override;
  void addSymbols(ThunkSection &IS) override;
  bool isCompatibleWith(uint32_t RelocType) const override;
d84 1
a84 1
class ThumbV7PILongThunk final : public Thunk {
d86 3
a88 1
  ThumbV7PILongThunk(const SymbolBody &Dest) : Thunk(Dest) { Alignment = 2; }
d91 1
a91 3
  void writeTo(uint8_t *Buf, ThunkSection &IS) const override;
  void addSymbols(ThunkSection &IS) override;
  bool isCompatibleWith(uint32_t RelocType) const override;
d95 1
a95 1
class MipsThunk final : public Thunk {
d97 2
a98 1
  MipsThunk(const SymbolBody &Dest) : Thunk(Dest) {}
d101 1
a101 3
  void writeTo(uint8_t *Buf, ThunkSection &IS) const override;
  void addSymbols(ThunkSection &IS) override;
  InputSection *getTargetInputSection() const override;
d107 2
a108 2
static uint64_t getARMThunkDestVA(const SymbolBody &S) {
  uint64_t V = S.isInPlt() ? S.getPltVA() : S.getVA();
d112 2
a113 1
void ARMV7ABSLongThunk::writeTo(uint8_t *Buf, ThunkSection &IS) const {
d119 1
a119 1
  uint64_t S = getARMThunkDestVA(Destination);
d125 2
a126 13
void ARMV7ABSLongThunk::addSymbols(ThunkSection &IS) {
  ThunkSym = addSyntheticLocal(
      Saver.save("__ARMv7ABSLongThunk_" + Destination.getName()), STT_FUNC,
      Offset, size(), &IS);
  addSyntheticLocal("$a", STT_NOTYPE, Offset, 0, &IS);
}

bool ARMV7ABSLongThunk::isCompatibleWith(uint32_t RelocType) const {
  // Thumb branch relocations can't use BLX
  return RelocType != R_ARM_THM_JUMP19 && RelocType != R_ARM_THM_JUMP24;
}

void ThumbV7ABSLongThunk::writeTo(uint8_t *Buf, ThunkSection &IS) const {
d132 1
a132 1
  uint64_t S = getARMThunkDestVA(Destination);
d138 2
a139 14
void ThumbV7ABSLongThunk::addSymbols(ThunkSection &IS) {
  ThunkSym = addSyntheticLocal(
      Saver.save("__Thumbv7ABSLongThunk_" + Destination.getName()), STT_FUNC,
      Offset | 0x1, size(), &IS);
  addSyntheticLocal("$t", STT_NOTYPE, Offset, 0, &IS);
}

bool ThumbV7ABSLongThunk::isCompatibleWith(uint32_t RelocType) const {
  // ARM branch relocations can't use BLX
  return RelocType != R_ARM_JUMP24 && RelocType != R_ARM_PC24 &&
         RelocType != R_ARM_PLT32;
}

void ARMV7PILongThunk::writeTo(uint8_t *Buf, ThunkSection &IS) const {
d146 2
a147 2
  uint64_t S = getARMThunkDestVA(Destination);
  uint64_t P = ThunkSym->getVA();
d153 2
a154 13
void ARMV7PILongThunk::addSymbols(ThunkSection &IS) {
  ThunkSym = addSyntheticLocal(
      Saver.save("__ARMV7PILongThunk_" + Destination.getName()), STT_FUNC,
      Offset, size(), &IS);
  addSyntheticLocal("$a", STT_NOTYPE, Offset, 0, &IS);
}

bool ARMV7PILongThunk::isCompatibleWith(uint32_t RelocType) const {
  // Thumb branch relocations can't use BLX
  return RelocType != R_ARM_THM_JUMP19 && RelocType != R_ARM_THM_JUMP24;
}

void ThumbV7PILongThunk::writeTo(uint8_t *Buf, ThunkSection &IS) const {
d161 2
a162 2
  uint64_t S = getARMThunkDestVA(Destination);
  uint64_t P = ThunkSym->getVA() & ~0x1;
d168 3
a170 12
void ThumbV7PILongThunk::addSymbols(ThunkSection &IS) {
  ThunkSym = addSyntheticLocal(
      Saver.save("__ThumbV7PILongThunk_" + Destination.getName()), STT_FUNC,
      Offset | 0x1, size(), &IS);
  addSyntheticLocal("$t", STT_NOTYPE, Offset, 0, &IS);
}

bool ThumbV7PILongThunk::isCompatibleWith(uint32_t RelocType) const {
  // ARM branch relocations can't use BLX
  return RelocType != R_ARM_JUMP24 && RelocType != R_ARM_PC24 &&
         RelocType != R_ARM_PLT32;
}
d172 5
a176 7
// Write MIPS LA25 thunk code to call PIC function from the non-PIC one.
void MipsThunk::writeTo(uint8_t *Buf, ThunkSection &) const {
  uint64_t S = Destination.getVA();
  write32(Buf, 0x3c190000, Config->Endianness); // lui   $25, %hi(func)
  write32(Buf + 4, 0x08000000 | (S >> 2), Config->Endianness); // j     func
  write32(Buf + 8, 0x27390000, Config->Endianness); // addiu $25, $25, %lo(func)
  write32(Buf + 12, 0x00000000, Config->Endianness); // nop
d181 3
a183 5
void MipsThunk::addSymbols(ThunkSection &IS) {
  ThunkSym =
      addSyntheticLocal(Saver.save("__LA25Thunk_" + Destination.getName()),
                        STT_FUNC, Offset, size(), &IS);
}
d185 2
a186 3
InputSection *MipsThunk::getTargetInputSection() const {
  auto *DR = dyn_cast<DefinedRegular>(&Destination);
  return dyn_cast<InputSection>(DR->Section);
d189 1
a189 3
Thunk::Thunk(const SymbolBody &D) : Destination(D), Offset(0) {}

Thunk::~Thunk() = default;
d192 3
a194 1
static Thunk *addThunkArm(uint32_t Reloc, SymbolBody &S) {
d203 2
a204 2
      return make<ARMV7PILongThunk>(S);
    return make<ARMV7ABSLongThunk>(S);
d208 2
a209 2
      return make<ThumbV7PILongThunk>(S);
    return make<ThumbV7ABSLongThunk>(S);
d214 35
a248 1
static Thunk *addThunkMips(SymbolBody &S) { return make<MipsThunk>(S); }
d250 2
a251 1
Thunk *addThunk(uint32_t RelocType, SymbolBody &S) {
d253 1
a253 1
    return addThunkArm(RelocType, S);
d255 18
a272 4
    return addThunkMips(S);
  llvm_unreachable("add Thunk only supported for ARM and Mips");
  return nullptr;
}
@


