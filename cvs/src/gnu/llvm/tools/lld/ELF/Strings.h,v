head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.55.45;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.45;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.12;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- Strings.h ------------------------------------------------*- C++ -*-===//
//
//                             The LLVM Linker
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLD_COFF_STRINGS_H
#define LLD_COFF_STRINGS_H

#include "lld/Core/LLVM.h"
#include <vector>

namespace lld {
namespace elf {
bool globMatch(StringRef S, StringRef T);
std::vector<uint8_t> parseHex(StringRef S);
bool isValidCIdentifier(StringRef S);

// Returns a demangled C++ symbol name. If Name is not a mangled
// name or the system does not provide __cxa_demangle function,
// it returns an unmodified string.
std::string demangle(StringRef Name);
}
}

#endif
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d10 2
a11 2
#ifndef LLD_ELF_STRINGS_H
#define LLD_ELF_STRINGS_H
a13 5
#include "llvm/ADT/ArrayRef.h"
#include "llvm/ADT/BitVector.h"
#include "llvm/ADT/Optional.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/GlobPattern.h"
d18 1
a18 3

int getPriority(StringRef S);
bool hasWildcard(StringRef S);
a20 43
StringRef unquote(StringRef S);

// This is a lazy version of StringRef. String size is computed lazily
// when it is needed. It is more efficient than StringRef to instantiate
// if you have a string whose size is unknown.
//
// ELF string tables contain a lot of null-terminated strings.
// Most of them are not necessary for the linker because they are names
// of local symbols and the linker doesn't use local symbol names for
// name resolution. So, we use this class to represents strings read
// from string tables.
class StringRefZ {
public:
  StringRefZ() : Start(nullptr), Size(0) {}
  StringRefZ(const char *S, size_t Size) : Start(S), Size(Size) {}

  /*implicit*/ StringRefZ(const char *S) : Start(S), Size(-1) {}

  /*implicit*/ StringRefZ(llvm::StringRef S)
      : Start(S.data()), Size(S.size()) {}

  operator llvm::StringRef() const {
    if (Size == (size_t)-1)
      Size = strlen(Start);
    return {Start, Size};
  }

private:
  const char *Start;
  mutable size_t Size;
};

// This class represents multiple glob patterns.
class StringMatcher {
public:
  StringMatcher() = default;
  explicit StringMatcher(ArrayRef<StringRef> Pat);

  bool match(StringRef S) const;

private:
  std::vector<llvm::GlobPattern> Patterns;
};
d23 3
a25 6
// name, it returns Optional::None.
llvm::Optional<std::string> demangle(StringRef Name);

inline StringRef toStringRef(ArrayRef<uint8_t> Arr) {
  return {(const char *)Arr.data(), Arr.size()};
}
@

