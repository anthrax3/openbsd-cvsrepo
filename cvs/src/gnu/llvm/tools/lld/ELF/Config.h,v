head	1.4;
access;
symbols
	LLVM_5_0_0:1.1.1.4
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.4
date	2017.10.04.20.51.29;	author patrick;	state Exp;
branches;
next	1.3;
commitid	s9g4O09EGmKo3yXv;

1.3
date	2017.03.18.16.36.56;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	Huz64J4SG96UeM4w;

1.2
date	2017.01.24.10.20.27;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	YS60l1RXyA50G9MH;

1.1
date	2017.01.14.19.55.45;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.45;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.12;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	so2WA7LCP6wbxtYl;

1.1.1.3
date	2017.03.14.08.07.53;	author patrick;	state Exp;
branches;
next	1.1.1.4;
commitid	aUi5NxOzBSLCN5eN;

1.1.1.4
date	2017.10.04.20.27.36;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.4
log
@Merge LLVM 5.0.0 release.
@
text
@//===- Config.h -------------------------------------------------*- C++ -*-===//
//
//                             The LLVM Linker
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLD_ELF_CONFIG_H
#define LLD_ELF_CONFIG_H

#include "llvm/ADT/MapVector.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/ADT/StringSet.h"
#include "llvm/BinaryFormat/ELF.h"
#include "llvm/Support/CachePruning.h"
#include "llvm/Support/CodeGen.h"
#include "llvm/Support/Endian.h"

#include <vector>

namespace lld {
namespace elf {

class InputFile;
struct Symbol;

enum ELFKind {
  ELFNoneKind,
  ELF32LEKind,
  ELF32BEKind,
  ELF64LEKind,
  ELF64BEKind
};

// For --build-id.
enum class BuildIdKind { None, Fast, Md5, Sha1, Hexstring, Uuid };

// For --discard-{all,locals,none}.
enum class DiscardPolicy { Default, All, Locals, None };

// For --strip-{all,debug}.
enum class StripPolicy { None, All, Debug };

// For --unresolved-symbols.
enum class UnresolvedPolicy { ReportError, Warn, WarnAll, Ignore, IgnoreAll };

// For --sort-section and linkerscript sorting rules.
enum class SortSectionPolicy { Default, None, Alignment, Name, Priority };

// For --target2
enum class Target2Policy { Abs, Rel, GotRel };

struct SymbolVersion {
  llvm::StringRef Name;
  bool IsExternCpp;
  bool HasWildcard;
};

// This struct contains symbols version definition that
// can be found in version script if it is used for link.
struct VersionDefinition {
  llvm::StringRef Name;
  uint16_t Id = 0;
  std::vector<SymbolVersion> Globals;
  size_t NameOff = 0; // Offset in the string table
};

// Structure for mapping renamed symbols
struct RenamedSymbol {
  Symbol *Target;
  uint8_t OriginalBinding;
};

// This struct contains the global configuration for the linker.
// Most fields are direct mapping from the command line options
// and such fields have the same name as the corresponding options.
// Most fields are initialized by the driver.
struct Configuration {
  InputFile *FirstElf = nullptr;
  uint8_t OSABI = 0;
  llvm::CachePruningPolicy ThinLTOCachePolicy;
  llvm::StringMap<uint64_t> SectionStartMap;
  llvm::StringRef DynamicLinker;
  llvm::StringRef Entry;
  llvm::StringRef Emulation;
  llvm::StringRef Fini;
  llvm::StringRef Init;
  llvm::StringRef LTOAAPipeline;
  llvm::StringRef LTONewPmPasses;
  llvm::StringRef MapFile;
  llvm::StringRef OutputFile;
  llvm::StringRef OptRemarksFilename;
  llvm::StringRef SoName;
  llvm::StringRef Sysroot;
  llvm::StringRef ThinLTOCacheDir;
  std::string Rpath;
  std::vector<VersionDefinition> VersionDefinitions;
  std::vector<llvm::StringRef> Argv;
  std::vector<llvm::StringRef> AuxiliaryList;
  std::vector<llvm::StringRef> FilterList;
  std::vector<llvm::StringRef> SearchPaths;
  std::vector<llvm::StringRef> SymbolOrderingFile;
  std::vector<llvm::StringRef> Undefined;
  std::vector<SymbolVersion> VersionScriptGlobals;
  std::vector<SymbolVersion> VersionScriptLocals;
  std::vector<uint8_t> BuildIdVector;
  llvm::MapVector<Symbol *, RenamedSymbol> RenamedSymbols;
  bool AllowMultipleDefinition;
  bool AsNeeded = false;
  bool Bsymbolic;
  bool BsymbolicFunctions;
  bool ColorDiagnostics = false;
  bool CompressDebugSections;
  bool DefineCommon;
  bool Demangle = true;
  bool DisableVerify;
  bool EhFrameHdr;
  bool EmitRelocs;
  bool EnableNewDtags;
  bool ExportDynamic;
  bool FatalWarnings;
  bool GcSections;
  bool GdbIndex;
  bool GnuHash;
  bool ICF;
  bool MipsN32Abi = false;
  bool NoGnuUnique;
  bool NoUndefinedVersion;
  bool Nostdlib;
  bool OFormatBinary;
  bool Omagic;
  bool OptRemarksWithHotness;
  bool Pie;
  bool PrintGcSections;
  bool Relocatable;
  bool SaveTemps;
  bool SingleRoRx;
  bool Shared;
  bool Static = false;
  bool SysvHash;
  bool Target1Rel;
  bool Threads;
  bool Trace;
  bool Verbose;
  bool WarnCommon;
  bool WarnMissingEntry;
  bool ZCombreloc;
  bool ZExecstack;
  bool ZNocopyreloc;
  bool ZNodelete;
  bool ZNodlopen;
  bool ZNow;
  bool ZOrigin;
  bool ZRelro;
  bool ZRodynamic;
  bool ZText;
  bool ExitEarly;
  bool ZWxneeded;
  DiscardPolicy Discard;
  SortSectionPolicy SortSection;
  StripPolicy Strip;
  UnresolvedPolicy UnresolvedSymbols;
  Target2Policy Target2;
  BuildIdKind BuildId = BuildIdKind::None;
  ELFKind EKind = ELFNoneKind;
  uint16_t DefaultSymbolVersion = llvm::ELF::VER_NDX_GLOBAL;
  uint16_t EMachine = llvm::ELF::EM_NONE;
  uint64_t ErrorLimit = 20;
  uint64_t ImageBase;
  uint64_t MaxPageSize;
  uint64_t ZStackSize;
  unsigned LTOPartitions;
  unsigned LTOO;
  unsigned Optimize;
  unsigned ThinLTOJobs;

  // The following config options do not directly correspond to any
  // particualr command line options.

  // True if we need to pass through relocations in input files to the
  // output file. Usually false because we consume relocations.
  bool CopyRelocs;

  // True if the target is ELF64. False if ELF32.
  bool Is64;

  // True if the target is little-endian. False if big-endian.
  bool IsLE;

  // endianness::little if IsLE is true. endianness::big otherwise.
  llvm::support::endianness Endianness;

  // True if the target is the little-endian MIPS64.
  //
  // The reason why we have this variable only for the MIPS is because
  // we use this often.  Some ELF headers for MIPS64EL are in a
  // mixed-endian (which is horrible and I'd say that's a serious spec
  // bug), and we need to know whether we are reading MIPS ELF files or
  // not in various places.
  //
  // (Note that MIPS64EL is not a typo for MIPS64LE. This is the official
  // name whatever that means. A fun hypothesis is that "EL" is short for
  // little-endian written in the little-endian order, but I don't know
  // if that's true.)
  bool IsMips64EL;

  // The ELF spec defines two types of relocation table entries, RELA and
  // REL. RELA is a triplet of (offset, info, addend) while REL is a
  // tuple of (offset, info). Addends for REL are implicit and read from
  // the location where the relocations are applied. So, REL is more
  // compact than RELA but requires a bit of more work to process.
  //
  // (From the linker writer's view, this distinction is not necessary.
  // If the ELF had chosen whichever and sticked with it, it would have
  // been easier to write code to process relocations, but it's too late
  // to change the spec.)
  //
  // Each ABI defines its relocation type. IsRela is true if target
  // uses RELA. As far as we know, all 64-bit ABIs are using RELA. A
  // few 32-bit ABIs are using RELA too.
  bool IsRela;

  // True if we are creating position-independent code.
  bool Pic;

  // 4 for ELF32, 8 for ELF64.
  int Wordsize;
};

// The only instance of Configuration struct.
extern Configuration *Config;

} // namespace elf
} // namespace lld

#endif
@


1.3
log
@Add support for -znodlopen.

ok patrick@@
@
text
@d16 4
a19 1
#include "llvm/Support/ELF.h"
d40 2
a41 2
// For --discard-{all,locals,none} and --retain-symbols-file.
enum class DiscardPolicy { Default, All, Locals, RetainFile, None };
d47 1
a47 1
enum class UnresolvedPolicy { NoUndef, ReportError, Warn, Ignore };
a63 1
  VersionDefinition(llvm::StringRef Name, uint16_t Id) : Name(Name), Id(Id) {}
d65 1
a65 1
  uint16_t Id;
d67 7
a73 1
  size_t NameOff; // Offset in string table.
d83 1
d92 1
d94 1
d97 2
a98 2
  llvm::StringSet<> RetainSymbolsFile;
  std::string RPath;
d100 1
d102 1
d109 1
d115 1
d120 1
d126 1
a126 1
  bool GnuHash = false;
a127 1
  bool Mips64EL = false;
d133 2
a134 2
  bool OMagic;
  bool Pic;
a136 1
  bool Rela;
d142 1
a142 1
  bool SysvHash = true;
d151 1
d157 2
d163 1
a163 1
  StripPolicy Strip = StripPolicy::None;
d165 1
a165 1
  Target2Policy Target2 = Target2Policy::GotRel;
d178 52
@


1.2
log
@Avoid allocating space for commons with ld -r.  Already pushed upstream.
@
text
@d138 1
@


1.1
log
@Initial revision
@
text
@d15 1
d34 2
a35 1
enum class BuildIdKind { None, Fnv1, Md5, Sha1, Hexstring };
d37 14
a50 1
enum class UnresolvedPolicy { NoUndef, Error, Warn, Ignore };
d55 1
d61 1
a61 1
  VersionDefinition(llvm::StringRef Name, size_t Id) : Name(Name), Id(Id) {}
d63 1
a63 1
  size_t Id;
a72 1
  Symbol *EntrySym = nullptr;
d74 2
d81 2
a82 2
  llvm::StringRef LtoAAPipeline;
  llvm::StringRef LtoNewPmPasses;
d86 1
d89 1
a89 1
  std::vector<llvm::StringRef> DynamicList;
d91 1
d94 1
d100 2
a103 3
  bool DiscardAll;
  bool DiscardLocals;
  bool DiscardNone;
d109 1
d113 1
d116 3
d125 1
a127 2
  bool StripAll;
  bool StripDebug;
d129 1
d134 1
d136 1
a136 1
  bool ZExecStack;
d141 5
d147 1
d152 1
a152 1
  uint64_t EntryAddr = -1;
d154 4
a157 2
  unsigned LtoJobs;
  unsigned LtoO;
d159 1
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a14 1
#include "llvm/ADT/StringSet.h"
d33 1
a33 2
// For --build-id.
enum class BuildIdKind { None, Fast, Md5, Sha1, Hexstring, Uuid };
d35 1
a35 14
// For --discard-{all,locals,none} and --retain-symbols-file.
enum class DiscardPolicy { Default, All, Locals, RetainFile, None };

// For --strip-{all,debug}.
enum class StripPolicy { None, All, Debug };

// For --unresolved-symbols.
enum class UnresolvedPolicy { NoUndef, ReportError, Warn, Ignore };

// For --sort-section and linkerscript sorting rules.
enum class SortSectionPolicy { Default, None, Alignment, Name, Priority };

// For --target2
enum class Target2Policy { Abs, Rel, GotRel };
a39 1
  bool HasWildcard;
d45 1
a45 1
  VersionDefinition(llvm::StringRef Name, uint16_t Id) : Name(Name), Id(Id) {}
d47 1
a47 1
  uint16_t Id;
d57 1
a58 2
  uint8_t OSABI = 0;
  llvm::StringMap<uint64_t> SectionStartMap;
d64 2
a65 2
  llvm::StringRef LTOAAPipeline;
  llvm::StringRef LTONewPmPasses;
a68 1
  llvm::StringSet<> RetainSymbolsFile;
d71 1
a71 1
  std::vector<llvm::StringRef> AuxiliaryList;
a72 1
  std::vector<llvm::StringRef> SymbolOrderingFile;
a74 1
  std::vector<SymbolVersion> VersionScriptLocals;
a79 1
  bool ColorDiagnostics = false;
d82 3
a89 1
  bool GdbIndex;
a92 1
  bool MipsN32Abi = false;
a94 3
  bool Nostdlib;
  bool OFormatBinary;
  bool OMagic;
a100 1
  bool SingleRoRx;
d103 2
a105 1
  bool Target1Rel;
a109 1
  bool WarnMissingEntry;
d111 1
a111 1
  bool ZExecstack;
a115 5
  bool ExitEarly;
  bool ZWxneeded;
  DiscardPolicy Discard;
  SortSectionPolicy SortSection;
  StripPolicy Strip = StripPolicy::None;
a116 1
  Target2Policy Target2 = Target2Policy::GotRel;
d121 1
a121 1
  uint64_t ErrorLimit = 20;
d123 2
a124 4
  uint64_t MaxPageSize;
  uint64_t ZStackSize;
  unsigned LTOPartitions;
  unsigned LTOO;
a125 1
  unsigned ThinLTOJobs;
@


1.1.1.3
log
@Import LLVM 4.0.0 release including clang and lld.
@
text
@a100 1
  bool DefineCommon;
@


1.1.1.4
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d16 1
a16 4
#include "llvm/BinaryFormat/ELF.h"
#include "llvm/Support/CachePruning.h"
#include "llvm/Support/CodeGen.h"
#include "llvm/Support/Endian.h"
d37 2
a38 2
// For --discard-{all,locals,none}.
enum class DiscardPolicy { Default, All, Locals, None };
d44 1
a44 1
enum class UnresolvedPolicy { ReportError, Warn, WarnAll, Ignore, IgnoreAll };
d61 1
d63 1
a63 1
  uint16_t Id = 0;
d65 1
a65 7
  size_t NameOff = 0; // Offset in the string table
};

// Structure for mapping renamed symbols
struct RenamedSymbol {
  Symbol *Target;
  uint8_t OriginalBinding;
a74 1
  llvm::CachePruningPolicy ThinLTOCachePolicy;
a82 1
  llvm::StringRef MapFile;
a83 1
  llvm::StringRef OptRemarksFilename;
d86 2
a87 2
  llvm::StringRef ThinLTOCacheDir;
  std::string Rpath;
a88 1
  std::vector<llvm::StringRef> Argv;
a89 1
  std::vector<llvm::StringRef> FilterList;
a95 1
  llvm::MapVector<Symbol *, RenamedSymbol> RenamedSymbols;
a100 1
  bool CompressDebugSections;
a104 1
  bool EmitRelocs;
d110 1
a110 1
  bool GnuHash;
d112 1
d118 2
a119 2
  bool Omagic;
  bool OptRemarksWithHotness;
d122 1
d128 1
a128 1
  bool SysvHash;
a136 1
  bool ZNocopyreloc;
a137 1
  bool ZNodlopen;
a140 2
  bool ZRodynamic;
  bool ZText;
d145 1
a145 1
  StripPolicy Strip;
d147 1
a147 1
  Target2Policy Target2;
a159 52

  // The following config options do not directly correspond to any
  // particualr command line options.

  // True if we need to pass through relocations in input files to the
  // output file. Usually false because we consume relocations.
  bool CopyRelocs;

  // True if the target is ELF64. False if ELF32.
  bool Is64;

  // True if the target is little-endian. False if big-endian.
  bool IsLE;

  // endianness::little if IsLE is true. endianness::big otherwise.
  llvm::support::endianness Endianness;

  // True if the target is the little-endian MIPS64.
  //
  // The reason why we have this variable only for the MIPS is because
  // we use this often.  Some ELF headers for MIPS64EL are in a
  // mixed-endian (which is horrible and I'd say that's a serious spec
  // bug), and we need to know whether we are reading MIPS ELF files or
  // not in various places.
  //
  // (Note that MIPS64EL is not a typo for MIPS64LE. This is the official
  // name whatever that means. A fun hypothesis is that "EL" is short for
  // little-endian written in the little-endian order, but I don't know
  // if that's true.)
  bool IsMips64EL;

  // The ELF spec defines two types of relocation table entries, RELA and
  // REL. RELA is a triplet of (offset, info, addend) while REL is a
  // tuple of (offset, info). Addends for REL are implicit and read from
  // the location where the relocations are applied. So, REL is more
  // compact than RELA but requires a bit of more work to process.
  //
  // (From the linker writer's view, this distinction is not necessary.
  // If the ELF had chosen whichever and sticked with it, it would have
  // been easier to write code to process relocations, but it's too late
  // to change the spec.)
  //
  // Each ABI defines its relocation type. IsRela is true if target
  // uses RELA. As far as we know, all 64-bit ABIs are using RELA. A
  // few 32-bit ABIs are using RELA too.
  bool IsRela;

  // True if we are creating position-independent code.
  bool Pic;

  // 4 for ELF32, 8 for ELF64.
  int Wordsize;
@


