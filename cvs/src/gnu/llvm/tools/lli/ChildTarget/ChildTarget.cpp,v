head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.46.55;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.55;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.45;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.01;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@#include "llvm/ExecutionEngine/Orc/OrcArchitectureSupport.h"
#include "llvm/ExecutionEngine/Orc/OrcRemoteTargetServer.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/DynamicLibrary.h"
#include "llvm/Support/Process.h"
#include <sstream>

#include "../RemoteJITUtils.h"

using namespace llvm;
using namespace llvm::orc;
using namespace llvm::sys;

#ifdef __x86_64__
typedef OrcX86_64 HostOrcArch;
#else
typedef OrcGenericArchitecture HostOrcArch;
#endif

int main(int argc, char *argv[]) {

  if (argc != 3) {
    errs() << "Usage: " << argv[0] << " <input fd> <output fd>\n";
    return 1;
  }

  int InFD;
  int OutFD;
  {
    std::istringstream InFDStream(argv[1]), OutFDStream(argv[2]);
    InFDStream >> InFD;
    OutFDStream >> OutFD;
  }

  if (sys::DynamicLibrary::LoadLibraryPermanently(nullptr)) {
    errs() << "Error loading program symbols.\n";
    return 1;
  }

  auto SymbolLookup = [](const std::string &Name) {
    return RTDyldMemoryManager::getSymbolAddressInProcess(Name);
  };

  FDRPCChannel Channel(InFD, OutFD);
  typedef remote::OrcRemoteTargetServer<FDRPCChannel, HostOrcArch> JITServer;
  JITServer Server(Channel, SymbolLookup);

  while (1) {
    JITServer::JITProcId Id = JITServer::InvalidId;
    if (auto EC = Server.getNextProcId(Id)) {
      errs() << "Error: " << EC.message() << "\n";
      return 1;
    }
    switch (Id) {
    case JITServer::TerminateSessionId:
      return 0;
    default:
      if (auto EC = Server.handleKnownProcedure(Id)) {
        errs() << "Error: " << EC.message() << "\n";
        return 1;
      }
    }
  }

  close(InFD);
  close(OutFD);

  return 0;
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d1 1
a1 1
#include "llvm/ExecutionEngine/Orc/OrcABISupport.h"
d15 1
a15 1
typedef OrcX86_64_SysV HostOrcArch;
d17 1
a17 1
typedef OrcGenericABI HostOrcArch;
a19 2
ExitOnError ExitOnErr;

a26 2
  ExitOnErr.setBanner(std::string(argv[0]) + ":");

a43 8
  auto RegisterEHFrames = [](uint8_t *Addr, uint32_t Size) {
    RTDyldMemoryManager::registerEHFramesInProcess(Addr, Size);
  };

  auto DeregisterEHFrames = [](uint8_t *Addr, uint32_t Size) {
    RTDyldMemoryManager::deregisterEHFramesInProcess(Addr, Size);
  };

d46 1
a46 1
  JITServer Server(Channel, SymbolLookup, RegisterEHFrames, DeregisterEHFrames);
d49 5
a53 3
    uint32_t RawId;
    ExitOnErr(Server.startReceivingFunction(Channel, RawId));
    auto Id = static_cast<JITServer::JITFuncId>(RawId);
a55 1
      ExitOnErr(Server.handleTerminateSession());
d58 4
a61 2
      ExitOnErr(Server.handleKnownFunction(Id));
      break;
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d56 2
a57 2
  FDRawChannel Channel(InFD, OutFD);
  typedef remote::OrcRemoteTargetServer<FDRawChannel, HostOrcArch> JITServer;
d60 13
a72 2
  while (!Server.receivedTerminate())
    ExitOnErr(Server.handleOne());
@


