head     1.1;
branch   1.1.1;
access   ;
symbols  LLVM_5_0_0:1.1.1.1 LLVM:1.1.1;
locks    ; strict;
comment  @// @;
expand   @o@;


1.1
date     2017.10.04.20.27.41;  author patrick;  state Exp;
branches 1.1.1.1;
next     ;
commitid        ufzi3t8MqoilCPqO;

1.1.1.1
date     2017.10.04.20.27.41;  author patrick;  state Exp;
branches ;
next     ;
commitid        ufzi3t8MqoilCPqO;


desc
@@



1.1
log
@Initial revision
@
text
@// Evil hack: To simulate memory corruption, we want to fiddle with some internals of std::list.
// Make those accessible to us.
#define private public
#define protected public

#ifdef _LIBCPP_INLINE_VISIBILITY
#undef _LIBCPP_INLINE_VISIBILITY
#endif
#define _LIBCPP_INLINE_VISIBILITY
#include <list>

#include <assert.h>

typedef std::list<int> int_list;

int main()
{
#ifdef LLDB_USING_LIBCPP
    int_list *numbers_list = new int_list{1,2,3,4,5,6,7,8,9,10};

    auto *third_elem = numbers_list->__end_.__next_->__next_->__next_; // Set break point at this line.
    assert(third_elem->__value_ == 3);
    auto *fifth_elem = third_elem->__next_->__next_;
    assert(fifth_elem->__value_ == 5);
    fifth_elem->__next_ = third_elem;
#endif

    // Any attempt to free the list will probably crash the program. Let's just leak it.
    return 0; // Set second break point at this line.
}
@


1.1.1.1
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@@
