head     1.1;
branch   1.1.1;
access   ;
symbols  LLVM_5_0_0:1.1.1.1 LLVM:1.1.1;
locks    ; strict;
comment  @// @;
expand   @o@;


1.1
date     2017.10.04.20.27.40;  author patrick;  state Exp;
branches 1.1.1.1;
next     ;
commitid        ufzi3t8MqoilCPqO;

1.1.1.1
date     2017.10.04.20.27.40;  author patrick;  state Exp;
branches ;
next     ;
commitid        ufzi3t8MqoilCPqO;


desc
@@



1.1
log
@Initial revision
@
text
@//===-- main.cpp ------------------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

template <int Arg>
class TestObj
{
public:
  int getArg()
  {
    return Arg;
  }
};

//----------------------------------------------------------------------
// Define a template class that we can specialize with an enumeration
//----------------------------------------------------------------------
enum class EnumType
{
    Member,
    Subclass
};

template <EnumType Arg> class EnumTemplate;
                                          
//----------------------------------------------------------------------
// Specialization for use when "Arg" is "EnumType::Member"
//----------------------------------------------------------------------
template <>
class EnumTemplate<EnumType::Member> 
{
public:
    EnumTemplate(int m) :
        m_member(m)
    {
    }

    int getMember() const
    {
        return m_member;
    }

protected:
    int m_member;
};

//----------------------------------------------------------------------
// Specialization for use when "Arg" is "EnumType::Subclass"
//----------------------------------------------------------------------
template <>
class EnumTemplate<EnumType::Subclass> : 
    public EnumTemplate<EnumType::Member> 
{
public:
    EnumTemplate(int m) : EnumTemplate<EnumType::Member>(m)
    {
    }    
};

int main(int argc, char **argv)
{
  TestObj<1> testpos;
  TestObj<-1> testneg;
  EnumTemplate<EnumType::Member> member(123);
  EnumTemplate<EnumType::Subclass> subclass(123*2);
  return testpos.getArg() - testneg.getArg() + member.getMember()*2 - subclass.getMember(); // Breakpoint 1
}
@


1.1.1.1
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@@
