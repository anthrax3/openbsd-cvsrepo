head     1.1;
branch   1.1.1;
access   ;
symbols  LLVM_5_0_0:1.1.1.1 LLVM:1.1.1;
locks    ; strict;
comment  @# @;
expand   @o@;


1.1
date     2017.10.04.20.27.42;  author patrick;  state Exp;
branches 1.1.1.1;
next     ;
commitid        ufzi3t8MqoilCPqO;

1.1.1.1
date     2017.10.04.20.27.42;  author patrick;  state Exp;
branches ;
next     ;
commitid        ufzi3t8MqoilCPqO;


desc
@@



1.1
log
@Initial revision
@
text
@"""
Fuzz tests an object after the default construction to make sure it does not crash lldb.
"""

import sys
import lldb


def fuzz_obj(obj):
    obj.GetID()
    obj.ClearAllBreakpointSites()
    obj.FindLocationByAddress(sys.maxsize)
    obj.FindLocationIDByAddress(sys.maxsize)
    obj.FindLocationByID(0)
    obj.GetLocationAtIndex(0)
    obj.SetEnabled(True)
    obj.IsEnabled()
    obj.GetHitCount()
    obj.SetIgnoreCount(1)
    obj.GetIgnoreCount()
    obj.SetCondition("i >= 10")
    obj.GetCondition()
    obj.SetThreadID(0)
    obj.GetThreadID()
    obj.SetThreadIndex(0)
    obj.GetThreadIndex()
    obj.SetThreadName("worker thread")
    obj.GetThreadName()
    obj.SetQueueName("my queue")
    obj.GetQueueName()
    obj.SetScriptCallbackFunction(None)
    obj.SetScriptCallbackBody(None)
    obj.GetNumResolvedLocations()
    obj.GetNumLocations()
    obj.GetDescription(lldb.SBStream())
    for bp_loc in obj:
        s = str(bp_loc)
@


1.1.1.1
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@@
