head     1.1;
branch   1.1.1;
access   ;
symbols  LLVM_5_0_0:1.1.1.1 LLVM:1.1.1;
locks    ; strict;
comment  @ * @;
expand   @o@;


1.1
date     2017.10.04.20.27.39;  author patrick;  state Exp;
branches 1.1.1.1;
next     ;
commitid        ufzi3t8MqoilCPqO;

1.1.1.1
date     2017.10.04.20.27.39;  author patrick;  state Exp;
branches ;
next     ;
commitid        ufzi3t8MqoilCPqO;


desc
@@



1.1
log
@Initial revision
@
text
@//===-- PythonExceptionState.h ----------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLDB_PLUGINS_SCRIPTINTERPRETER_PYTHON_PYTHONEXCEPTIONSTATE_H
#define LLDB_PLUGINS_SCRIPTINTERPRETER_PYTHON_PYTHONEXCEPTIONSTATE_H

#ifndef LLDB_DISABLE_PYTHON

#include "PythonDataObjects.h"

namespace lldb_private {

class PythonExceptionState {
public:
  explicit PythonExceptionState(bool restore_on_exit);
  ~PythonExceptionState();

  void Acquire(bool restore_on_exit);

  void Restore();

  void Discard();

  void Reset();

  static bool HasErrorOccurred();

  bool IsError() const;

  PythonObject GetType() const;

  PythonObject GetValue() const;

  PythonObject GetTraceback() const;

  std::string Format() const;

private:
  std::string ReadBacktrace() const;

  bool m_restore_on_exit;

  PythonObject m_type;
  PythonObject m_value;
  PythonObject m_traceback;
};
}

#endif

#endif
@


1.1.1.1
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@@
