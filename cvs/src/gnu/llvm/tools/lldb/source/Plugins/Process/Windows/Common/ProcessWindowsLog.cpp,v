head     1.1;
branch   1.1.1;
access   ;
symbols  LLVM_5_0_0:1.1.1.1 LLVM:1.1.1;
locks    ; strict;
comment  @// @;
expand   @o@;


1.1
date     2017.10.04.20.27.39;  author patrick;  state Exp;
branches 1.1.1.1;
next     ;
commitid        ufzi3t8MqoilCPqO;

1.1.1.1
date     2017.10.04.20.27.39;  author patrick;  state Exp;
branches ;
next     ;
commitid        ufzi3t8MqoilCPqO;


desc
@@



1.1
log
@Initial revision
@
text
@//===-- ProcessWindowsLog.cpp -----------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "ProcessWindowsLog.h"

using namespace lldb_private;

static constexpr Log::Category g_categories[] = {
    {{"break"}, {"log breakpoints"}, WINDOWS_LOG_BREAKPOINTS},
    {{"event"}, {"log low level debugger events"}, WINDOWS_LOG_EVENT},
    {{"exception"}, {"log exception information"}, WINDOWS_LOG_EXCEPTION},
    {{"memory"}, {"log memory reads and writes"}, WINDOWS_LOG_MEMORY},
    {{"process"}, {"log process events and activities"}, WINDOWS_LOG_PROCESS},
    {{"registers"}, {"log register read/writes"}, WINDOWS_LOG_REGISTERS},
    {{"step"}, {"log step related activities"}, WINDOWS_LOG_STEP},
    {{"thread"}, {"log thread events and activities"}, WINDOWS_LOG_THREAD},
};

Log::Channel ProcessWindowsLog::g_channel(g_categories, WINDOWS_LOG_PROCESS);

void ProcessWindowsLog::Initialize() {
  static llvm::once_flag g_once_flag;
  llvm::call_once(g_once_flag, []() { Log::Register("windows", g_channel); });
}

void ProcessWindowsLog::Terminate() {}









@


1.1.1.1
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@@
