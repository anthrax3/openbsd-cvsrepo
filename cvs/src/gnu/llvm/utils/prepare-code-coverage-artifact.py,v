head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2017.01.14.19.55.58;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.58;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.13;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/env python

'''Prepare a code coverage artifact.

- Collate raw profiles into one indexed profile.
- Delete the raw profiles.
- Copy the coverage mappings in the binaries directory.
'''

import argparse
import glob
import os
import subprocess
import sys

def merge_raw_profiles(host_llvm_profdata, profile_data_dir):
    print ':: Merging raw profiles...',
    sys.stdout.flush()
    raw_profiles = glob.glob(os.path.join(profile_data_dir, '*.profraw'))
    manifest_path = os.path.join(profile_data_dir, 'profiles.manifest')
    profdata_path = os.path.join(profile_data_dir, 'Coverage.profdata')
    with open(manifest_path, 'w') as manifest:
        manifest.write('\n'.join(raw_profiles))
    subprocess.check_call([host_llvm_profdata, 'merge', '-sparse', '-f',
                           manifest_path, '-o', profdata_path])
    for raw_profile in raw_profiles:
        os.remove(raw_profile)
    print 'Done!'

def extract_covmappings(host_llvm_cov, profile_data_dir, llvm_bin_dir):
    print ':: Extracting covmappings...',
    sys.stdout.flush()
    for prog in os.listdir(llvm_bin_dir):
        if prog == 'llvm-lit':
            continue
        covmapping_path = os.path.join(profile_data_dir,
                                       os.path.basename(prog) + '.covmapping')
        subprocess.check_call([host_llvm_cov, 'convert-for-testing',
                               os.path.join(llvm_bin_dir, prog), '-o',
                               covmapping_path])
    print 'Done!'

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('host_llvm_profdata', help='Path to llvm-profdata')
    parser.add_argument('host_llvm_cov', help='Path to llvm-cov')
    parser.add_argument('profile_data_dir',
                       help='Path to the directory containing the raw profiles')
    parser.add_argument('llvm_bin_dir',
                       help='Path to the directory containing llvm binaries')
    args = parser.parse_args()

    merge_raw_profiles(args.host_llvm_profdata, args.profile_data_dir)
    extract_covmappings(args.host_llvm_cov, args.profile_data_dir,
                        args.llvm_bin_dir)
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a2 2
from __future__ import print_function

d6 2
a7 1
- Generate html reports for the given binaries.
d16 2
a17 2
def merge_raw_profiles(host_llvm_profdata, profile_data_dir, preserve_profiles):
    print(':: Merging raw profiles...', end='')
d26 6
a31 10
    if not preserve_profiles:
        for raw_profile in raw_profiles:
            os.remove(raw_profile)
    os.remove(manifest_path)
    print('Done!')
    return profdata_path

def prepare_html_report(host_llvm_cov, profile, report_dir, binaries,
                        restricted_dirs):
    print(':: Preparing html report for {0}...'.format(binaries), end='')
d33 9
a41 27
    objects = []
    for i, binary in enumerate(binaries):
        if i == 0:
            objects.append(binary)
        else:
            objects.extend(('-object', binary))
    invocation = [host_llvm_cov, 'show'] + objects + ['-format', 'html',
                  '-instr-profile', profile, '-o', report_dir,
                  '-show-line-counts-or-regions', '-Xdemangler', 'c++filt',
                  '-Xdemangler', '-n'] + restricted_dirs
    subprocess.check_call(invocation)
    with open(os.path.join(report_dir, 'summary.txt'), 'wb') as Summary:
        subprocess.check_call([host_llvm_cov, 'report'] + objects +
                               ['-instr-profile', profile], stdout=Summary)
    print('Done!')

def prepare_html_reports(host_llvm_cov, profdata_path, report_dir, binaries,
                         unified_report, restricted_dirs):
    if unified_report:
        prepare_html_report(host_llvm_cov, profdata_path, report_dir, binaries,
                            restricted_dirs)
    else:
        for binary in binaries:
            binary_report_dir = os.path.join(report_dir,
                                             os.path.basename(binary))
            prepare_html_report(host_llvm_cov, profdata_path, binary_report_dir,
                                [binary], restricted_dirs)
d49 2
a50 16
    parser.add_argument('report_dir',
                       help='Path to the output directory for html reports')
    parser.add_argument('binaries', metavar='B', type=str, nargs='*',
                       help='Path to an instrumented binary')
    parser.add_argument('--only-merge', action='store_true',
                        help='Only merge raw profiles together, skip report '
                             'generation')
    parser.add_argument('--preserve-profiles',
                       help='Do not delete raw profiles', action='store_true')
    parser.add_argument('--use-existing-profdata',
                       help='Specify an existing indexed profile to use')
    parser.add_argument('--unified-report', action='store_true',
                       help='Emit a unified report for all binaries')
    parser.add_argument('--restrict', metavar='R', type=str, nargs='*',
                       default=[],
                       help='Restrict the reporting to the given source paths')
d53 3
a55 18
    if args.use_existing_profdata and args.only_merge:
        print('--use-existing-profdata and --only-merge are incompatible')
        exit(1)

    if args.use_existing_profdata:
        profdata_path = args.use_existing_profdata
    else:
        profdata_path = merge_raw_profiles(args.host_llvm_profdata,
                                           args.profile_data_dir,
                                           args.preserve_profiles)

    if not len(args.binaries):
        print('No binaries specified, no work to do!')
        exit(1)

    if not args.only_merge:
        prepare_html_reports(args.host_llvm_cov, profdata_path, args.report_dir,
                            args.binaries, args.unified_report, args.restrict)
@

