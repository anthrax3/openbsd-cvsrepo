head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.2
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.09.03.22.46.59;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.59;	author pascal;	state Exp;
branches;
next	;
commitid	piLU3CHugy63NlaI;


desc
@@


1.1
log
@Initial revision
@
text
@Date: Fri, 6 Jul 2001 16:56:56 -0500
From: Vikram S. Adve <vadve@@cs.uiuc.edu>
To: Chris Lattner <lattner@@cs.uiuc.edu>
Subject: lowering the IR

BTW, I do think that we should consider lowering the IR as you said.  I
didn't get time to raise it today, but it comes up with the SPARC
move-conditional instruction.  I don't think we want to put that in the core
VM -- it is a little too specialized.  But without a corresponding
conditional move instruction in the VM, it is pretty difficult to maintain a
close mapping between VM and machine code.  Other architectures may have
other such instructions.

What I was going to suggest was that for a particular processor, we define
additional VM instructions that match some of the unusual opcodes on the
processor but have VM semantics otherwise, i.e., all operands are in SSA
form and typed.  This means that we can re-generate core VM code from the
more specialized code any time we want (so that portability is not lost).

Typically, a static compiler like gcc would generate just the core VM, which
is relatively portable.  Anyone (an offline tool, the linker, etc., or even
the static compiler itself if it chooses) can transform that into more
specialized target-specific VM code for a particular architecture.  If the
linker does it, it can do it after all machine-independent optimizations.
This would be the most convenient, but not necessary.

The main benefit of lowering will be that we will be able to retain a close
mapping between VM and machine code.

--Vikram

@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@
