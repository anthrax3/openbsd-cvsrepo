head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.1
	OPENBSD_6_2:1.1.1.1.0.2
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.09.03.22.46.54;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.54;	author pascal;	state Exp;
branches;
next	;
commitid	piLU3CHugy63NlaI;


desc
@@


1.1
log
@Initial revision
@
text
@
from .common import LLVMObject
from .common import c_object_p
from .common import get_library
from . import enumerations
from .core import MemoryBuffer
from .core import Module
from .core import OpCode
from ctypes import POINTER
from ctypes import byref
from ctypes import c_char_p
from ctypes import cast
__all__ = ['parse_bitcode']
lib = get_library()

def parse_bitcode(mem_buffer):
    """Input is .core.MemoryBuffer"""
    module = c_object_p()
    result = lib.LLVMParseBitcode2(mem_buffer, byref(module))
    if result:
        raise RuntimeError('LLVM Error')
    m = Module(module)
    m.take_ownership(mem_buffer)
    return m

def register_library(library):
    library.LLVMParseBitcode2.argtypes = [MemoryBuffer, POINTER(c_object_p)]
    library.LLVMParseBitcode2.restype = bool

register_library(lib)
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@
