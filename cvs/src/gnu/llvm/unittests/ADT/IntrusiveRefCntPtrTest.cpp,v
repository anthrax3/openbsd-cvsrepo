head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.46.54;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.54;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.24.08.33.21;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- unittest/ADT/IntrusiveRefCntPtrTest.cpp ----------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "llvm/ADT/IntrusiveRefCntPtr.h"
#include "gtest/gtest.h"

namespace {
struct VirtualRefCounted : public llvm::RefCountedBaseVPTR {
  virtual void f() {}
};
}

namespace llvm {

// Run this test with valgrind to detect memory leaks.
TEST(IntrusiveRefCntPtr, RefCountedBaseVPTRCopyDoesNotLeak) {
  VirtualRefCounted *V1 = new VirtualRefCounted;
  IntrusiveRefCntPtr<VirtualRefCounted> R1 = V1;
  VirtualRefCounted *V2 = new VirtualRefCounted(*V1);
  IntrusiveRefCntPtr<VirtualRefCounted> R2 = V2;
}

struct SimpleRefCounted : public RefCountedBase<SimpleRefCounted> {};

// Run this test with valgrind to detect memory leaks.
TEST(IntrusiveRefCntPtr, RefCountedBaseCopyDoesNotLeak) {
  SimpleRefCounted *S1 = new SimpleRefCounted;
  IntrusiveRefCntPtr<SimpleRefCounted> R1 = S1;
  SimpleRefCounted *S2 = new SimpleRefCounted(*S1);
  IntrusiveRefCntPtr<SimpleRefCounted> R2 = S2;
}

struct InterceptRefCounted : public RefCountedBase<InterceptRefCounted> {
  InterceptRefCounted(bool *Released, bool *Retained)
    : Released(Released), Retained(Retained) {}
  bool * const Released;
  bool * const Retained;
};
template <> struct IntrusiveRefCntPtrInfo<InterceptRefCounted> {
  static void retain(InterceptRefCounted *I) {
    *I->Retained = true;
    I->Retain();
  }
  static void release(InterceptRefCounted *I) {
    *I->Released = true;
    I->Release();
  }
};
TEST(IntrusiveRefCntPtr, UsesTraitsToRetainAndRelease) {
  bool Released = false;
  bool Retained = false;
  {
    InterceptRefCounted *I = new InterceptRefCounted(&Released, &Retained);
    IntrusiveRefCntPtr<InterceptRefCounted> R = I;
  }
  EXPECT_TRUE(Released);
  EXPECT_TRUE(Retained);
}

} // end namespace llvm
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d13 6
d21 7
a27 7
namespace {
struct SimpleRefCounted : public RefCountedBase<SimpleRefCounted> {
  SimpleRefCounted() { ++NumInstances; }
  SimpleRefCounted(const SimpleRefCounted &) : RefCountedBase() {
    ++NumInstances;
  }
  ~SimpleRefCounted() { --NumInstances; }
d29 1
a29 4
  static int NumInstances;
};
int SimpleRefCounted::NumInstances = 0;
} // anonymous namespace
d31 1
d33 4
a36 9
  EXPECT_EQ(0, SimpleRefCounted::NumInstances);
  {
    SimpleRefCounted *S1 = new SimpleRefCounted;
    IntrusiveRefCntPtr<SimpleRefCounted> R1 = S1;
    SimpleRefCounted *S2 = new SimpleRefCounted(*S1);
    IntrusiveRefCntPtr<SimpleRefCounted> R2 = S2;
    EXPECT_EQ(2, SimpleRefCounted::NumInstances);
  }
  EXPECT_EQ(0, SimpleRefCounted::NumInstances);
@

