head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.46.55;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.55;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.44;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.20;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//=======- CallGraphTest.cpp - Unit tests for the CG analysis -------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "llvm/Analysis/CallGraph.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Module.h"
#include "gtest/gtest.h"

using namespace llvm;

namespace {

template <typename Ty> void canSpecializeGraphTraitsIterators(Ty *G) {
  typedef typename GraphTraits<Ty *>::NodeType NodeTy;

  auto I = GraphTraits<Ty *>::nodes_begin(G);
  auto E = GraphTraits<Ty *>::nodes_end(G);
  auto X = ++I;

  // Should be able to iterate over all nodes of the graph.
  static_assert(std::is_same<decltype(*I), NodeTy &>::value,
                "Node type does not match");
  static_assert(std::is_same<decltype(*X), NodeTy &>::value,
                "Node type does not match");
  static_assert(std::is_same<decltype(*E), NodeTy &>::value,
                "Node type does not match");

  NodeTy *N = GraphTraits<Ty *>::getEntryNode(G);

  auto S = GraphTraits<NodeTy *>::child_begin(N);
  auto F = GraphTraits<NodeTy *>::child_end(N);

  // Should be able to iterate over immediate successors of a node.
  static_assert(std::is_same<decltype(*S), NodeTy *>::value,
                "Node type does not match");
  static_assert(std::is_same<decltype(*F), NodeTy *>::value,
                "Node type does not match");
}

TEST(CallGraphTest, GraphTraitsSpecialization) {
  Module M("", getGlobalContext());
  CallGraph CG(M);

  canSpecializeGraphTraitsIterators(&CG);
}

TEST(CallGraphTest, GraphTraitsConstSpecialization) {
  Module M("", getGlobalContext());
  CallGraph CG(M);

  canSpecializeGraphTraitsIterators(const_cast<const CallGraph *>(&CG));
}
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d47 1
a47 2
  LLVMContext Context;
  Module M("", Context);
d54 1
a54 2
  LLVMContext Context;
  Module M("", Context);
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d20 1
a20 1
  typedef typename GraphTraits<Ty *>::NodeRef NodeRef;
d27 1
a27 1
  static_assert(std::is_same<decltype(*I), NodeRef>::value,
d29 1
a29 1
  static_assert(std::is_same<decltype(*X), NodeRef>::value,
d31 1
a31 1
  static_assert(std::is_same<decltype(*E), NodeRef>::value,
d34 1
a34 1
  NodeRef N = GraphTraits<Ty *>::getEntryNode(G);
d36 2
a37 2
  auto S = GraphTraits<NodeRef>::child_begin(N);
  auto F = GraphTraits<NodeRef>::child_end(N);
d40 1
a40 1
  static_assert(std::is_same<decltype(*S), NodeRef>::value,
d42 1
a42 1
  static_assert(std::is_same<decltype(*F), NodeRef>::value,
@


