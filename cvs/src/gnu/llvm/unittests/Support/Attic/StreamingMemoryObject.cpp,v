head	1.2;
access;
symbols
	LLVM_3_8_1:1.1.1.1 LLVM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2017.01.14.20.04.08;	author patrick;	state dead;
branches;
next	1.1;
commitid	g3tLqf8knavlReOK;

1.1
date	2016.09.03.22.46.55;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.55;	author pascal;	state Exp;
branches;
next	;
commitid	piLU3CHugy63NlaI;


desc
@@


1.2
log
@Merge LLVM 3.9.1
@
text
@//===- llvm/unittest/Support/StreamingMemoryObject.cpp - unit tests -------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "llvm/ADT/STLExtras.h"
#include "llvm/Support/StreamingMemoryObject.h"
#include "gtest/gtest.h"
#include <string.h>

using namespace llvm;

namespace {
class NullDataStreamer : public DataStreamer {
  size_t GetBytes(unsigned char *buf, size_t len) override {
    memset(buf, 0, len);
    return len;
  }
};
}

TEST(StreamingMemoryObject, Test) {
  auto DS = make_unique<NullDataStreamer>();
  StreamingMemoryObject O(std::move(DS));
  EXPECT_TRUE(O.isValidAddress(32 * 1024));
}

TEST(StreamingMemoryObject, TestSetKnownObjectSize) {
  auto DS = make_unique<NullDataStreamer>();
  StreamingMemoryObject O(std::move(DS));
  uint8_t Buf[32];
  EXPECT_EQ((uint64_t) 16, O.readBytes(Buf, 16, 0));
  O.setKnownObjectSize(24);
  EXPECT_EQ((uint64_t) 8, O.readBytes(Buf, 16, 16));
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@
