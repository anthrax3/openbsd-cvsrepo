head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@//===- EndianStream.h - Stream ops with endian specific data ----*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines utilities for operating on streams that have endian
// specific data.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_SUPPORT_ENDIANSTREAM_H
#define LLVM_SUPPORT_ENDIANSTREAM_H

#include "llvm/Support/Endian.h"
#include "llvm/Support/raw_ostream.h"

namespace llvm {
namespace support {

namespace endian {
/// Adapter to write values to a stream in a particular byte order.
template <endianness endian> struct Writer {
  raw_ostream &OS;
  Writer(raw_ostream &OS) : OS(OS) {}
  template <typename value_type> void write(value_type Val) {
    Val = byte_swap<value_type, endian>(Val);
    OS.write((const char *)&Val, sizeof(value_type));
  }
};

template <>
template <>
inline void Writer<little>::write<float>(float Val) {
  write(FloatToBits(Val));
}

template <>
template <>
inline void Writer<little>::write<double>(double Val) {
  write(DoubleToBits(Val));
}

template <>
template <>
inline void Writer<big>::write<float>(float Val) {
  write(FloatToBits(Val));
}

template <>
template <>
inline void Writer<big>::write<double>(double Val) {
  write(DoubleToBits(Val));
}

} // end namespace endian

} // end namespace support
} // end namespace llvm

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a17 1
#include "llvm/ADT/ArrayRef.h"
a28 4
  template <typename value_type> void write(ArrayRef<value_type> Vals) {
    for (value_type V : Vals)
      write(V);
  }
@

