head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.4
	OPENBSD_6_2:1.1.1.3.0.2
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.17;	author patrick;	state Exp;
branches;
next	1.1.1.4;
commitid	so2WA7LCP6wbxtYl;

1.1.1.4
date	2017.10.04.20.27.53;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===- ArchiveWriter.h - ar archive file format writer ----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// Declares the writeArchive function for writing an archive file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_OBJECT_ARCHIVEWRITER_H
#define LLVM_OBJECT_ARCHIVEWRITER_H

#include "llvm/ADT/StringRef.h"
#include "llvm/Object/Archive.h"
#include "llvm/Support/FileSystem.h"

namespace llvm {

class NewArchiveIterator {
  bool IsNewMember;
  StringRef Name;

  object::Archive::Child OldMember;

public:
  NewArchiveIterator(const object::Archive::Child &OldMember, StringRef Name);
  NewArchiveIterator(StringRef FileName);
  bool isNewMember() const;
  StringRef getName() const;

  const object::Archive::Child &getOld() const;

  StringRef getNew() const;
  llvm::ErrorOr<int> getFD(sys::fs::file_status &NewStatus) const;
  const sys::fs::file_status &getStatus() const;
};

std::pair<StringRef, std::error_code>
writeArchive(StringRef ArcName, std::vector<NewArchiveIterator> &NewMembers,
             bool WriteSymtab, object::Archive::Kind Kind, bool Deterministic,
             bool Thin);
}

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d23 3
a25 4
struct NewArchiveMember {
  std::unique_ptr<MemoryBuffer> Buf;
  sys::TimeValue ModTime = sys::TimeValue::PosixZeroTime();
  unsigned UID = 0, GID = 0, Perms = 0644;
d27 1
a27 13
  NewArchiveMember() = default;
  NewArchiveMember(NewArchiveMember &&Other)
      : Buf(std::move(Other.Buf)), ModTime(Other.ModTime), UID(Other.UID),
        GID(Other.GID), Perms(Other.Perms) {}
  NewArchiveMember &operator=(NewArchiveMember &&Other) {
    Buf = std::move(Other.Buf);
    ModTime = Other.ModTime;
    UID = Other.UID;
    GID = Other.GID;
    Perms = Other.Perms;
    return *this;
  }
  NewArchiveMember(MemoryBufferRef BufRef);
d29 5
a33 2
  static Expected<NewArchiveMember>
  getOldMember(const object::Archive::Child &OldMember, bool Deterministic);
d35 5
a39 2
  static Expected<NewArchiveMember> getFile(StringRef FileName,
                                            bool Deterministic);
d43 1
a43 1
writeArchive(StringRef ArcName, std::vector<NewArchiveMember> &NewMembers,
d45 1
a45 1
             bool Thin, std::unique_ptr<MemoryBuffer> OldArchiveBuf = nullptr);
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d25 1
a25 1
  sys::TimePoint<std::chrono::seconds> ModTime;
a27 1
  bool IsNew = false;
d29 11
@


1.1.1.4
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@a24 1
  StringRef MemberName;
@


