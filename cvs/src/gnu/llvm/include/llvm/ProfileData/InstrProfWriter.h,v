head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.19;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//=-- InstrProfWriter.h - Instrumented profiling writer -----------*- C++ -*-=//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file contains support for writing profiling data for instrumentation
// based PGO and coverage.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_PROFILEDATA_INSTRPROFWRITER_H
#define LLVM_PROFILEDATA_INSTRPROFWRITER_H

#include "llvm/ADT/DenseMap.h"
#include "llvm/ProfileData/InstrProf.h"
#include "llvm/Support/DataTypes.h"
#include "llvm/Support/MemoryBuffer.h"
#include "llvm/Support/raw_ostream.h"

namespace llvm {

/// Writer for instrumentation based profile data.
class InstrProfWriter {
public:
  typedef SmallDenseMap<uint64_t, InstrProfRecord, 1> ProfilingData;

private:
  StringMap<ProfilingData> FunctionData;
  uint64_t MaxFunctionCount;

public:
  InstrProfWriter() : MaxFunctionCount(0) {}

  /// Add function counts for the given function. If there are already counts
  /// for this function and the hash and number of counts match, each counter is
  /// summed. Optionally scale counts by \p Weight.
  std::error_code addRecord(InstrProfRecord &&I, uint64_t Weight = 1);
  /// Write the profile to \c OS
  void write(raw_fd_ostream &OS);
  /// Write the profile in text format to \c OS
  void writeText(raw_fd_ostream &OS);
  /// Write \c Record in text format to \c OS
  static void writeRecordInText(const InstrProfRecord &Record,
                                InstrProfSymtab &Symtab, raw_fd_ostream &OS);
  /// Write the profile, returning the raw data. For testing.
  std::unique_ptr<MemoryBuffer> writeBuffer();

  // Internal interface for testing purpose only.
  void setValueProfDataEndianness(support::endianness Endianness);

private:
  std::pair<uint64_t, uint64_t> writeImpl(raw_ostream &OS);
};

} // end namespace llvm

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a26 3
class ProfOStream;
class InstrProfRecordWriterTrait;

a29 1
  enum ProfKind { PF_Unknown = 0, PF_FE, PF_IRLevel };
a31 1
  bool Sparse;
d33 1
a33 3
  ProfKind ProfileKind;
  // Use raw pointer here for the incomplete type object.
  InstrProfRecordWriterTrait *InfoObj;
d36 1
a36 2
  InstrProfWriter(bool Sparse = false);
  ~InstrProfWriter();
d41 1
a41 1
  Error addRecord(InstrProfRecord &&I, uint64_t Weight = 1);
a51 12
  /// Set the ProfileKind. Report error if mixing FE and IR level profiles.
  Error setIsIRLevelProfile(bool IsIRLevel) {
    if (ProfileKind == PF_Unknown) {
      ProfileKind = IsIRLevel ? PF_IRLevel: PF_FE;
      return Error::success();
    }
    return (IsIRLevel == (ProfileKind == PF_IRLevel))
               ? Error::success()
               : make_error<InstrProfError>(
                     instrprof_error::unsupported_version);
  }

a53 1
  void setOutputSparse(bool Sparse);
d56 1
a56 2
  bool shouldEncodeData(const ProfilingData &PD);
  void writeImpl(ProfOStream &OS);
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a49 2
  /// Merge existing function counts from the given writer.
  Error mergeRecordsFromWriter(InstrProfWriter &&IPW);
@


