head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.24.08.33.16;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- CmpInstAnalysis.h - Utils to help fold compare insts ----*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file holds routines to help analyse compare instructions
// and fold them into constants or other compare instructions
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TRANSFORMS_UTILS_CMPINSTANALYSIS_H
#define LLVM_TRANSFORMS_UTILS_CMPINSTANALYSIS_H

#include "llvm/IR/InstrTypes.h"

namespace llvm {
  class ICmpInst;
  class Value;

  /// getICmpCode - Encode a icmp predicate into a three bit mask.  These bits
  /// are carefully arranged to allow folding of expressions such as:
  ///
  ///      (A < B) | (A > B) --> (A != B)
  ///
  /// Note that this is only valid if the first and second predicates have the
  /// same sign. Is illegal to do: (A u< B) | (A s> B)
  ///
  /// Three bits are used to represent the condition, as follows:
  ///   0  A > B
  ///   1  A == B
  ///   2  A < B
  ///
  /// <=>  Value  Definition
  /// 000     0   Always false
  /// 001     1   A >  B
  /// 010     2   A == B
  /// 011     3   A >= B
  /// 100     4   A <  B
  /// 101     5   A != B
  /// 110     6   A <= B
  /// 111     7   Always true
  ///
  unsigned getICmpCode(const ICmpInst *ICI, bool InvertPred = false);

  /// getICmpValue - This is the complement of getICmpCode, which turns an
  /// opcode and two operands into either a constant true or false, or the
  /// predicate for a new ICmp instruction. The sign is passed in to determine
  /// which kind of predicate to use in the new icmp instruction.
  /// Non-NULL return value will be a true or false constant.
  /// NULL return means a new ICmp is needed.  The predicate for which is
  /// output in NewICmpPred.
  Value *getICmpValue(bool Sign, unsigned Code, Value *LHS, Value *RHS,
                      CmpInst::Predicate &NewICmpPred);

  /// PredicatesFoldable - Return true if both predicates match sign or if at
  /// least one of them is an equality comparison (which is signless).
  bool PredicatesFoldable(CmpInst::Predicate p1, CmpInst::Predicate p2);

} // end namespace llvm

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d24 2
a25 2
  /// Encode a icmp predicate into a three bit mask. These bits are carefully
  /// arranged to allow folding of expressions such as:
d30 1
a30 1
  /// same sign. It is illegal to do: (A u< B) | (A s> B)
d49 4
a52 4
  /// This is the complement of getICmpCode, which turns an opcode and two
  /// operands into either a constant true or false, or the predicate for a new
  /// ICmp instruction. The sign is passed in to determine which kind of
  /// predicate to use in the new icmp instruction.
d54 2
a55 2
  /// NULL return means a new ICmp is needed. The predicate for which is output
  /// in NewICmpPred.
d59 2
a60 2
  /// Return true if both predicates match sign or if at least one of them is an
  /// equality comparison (which is signless).
a61 5

  /// Decompose an icmp into the form ((X & Y) pred Z) if possible. The returned
  /// predicate is either == or !=. Returns false if decomposition fails.
  bool decomposeBitTestICmp(const ICmpInst *I, CmpInst::Predicate &Pred,
                            Value *&X, Value *&Y, Value *&Z);
@

