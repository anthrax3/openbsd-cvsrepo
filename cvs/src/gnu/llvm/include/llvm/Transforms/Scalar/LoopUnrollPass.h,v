head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.2
	OPENBSD_6_2:1.1.1.1.0.2
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.24.08.33.17;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	so2WA7LCP6wbxtYl;

1.1.1.1
date	2017.01.24.08.33.17;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	so2WA7LCP6wbxtYl;

1.1.1.2
date	2017.10.04.20.27.53;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===- LoopUnrollPass.h -----------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TRANSFORMS_SCALAR_LOOPUNROLLPASS_H
#define LLVM_TRANSFORMS_SCALAR_LOOPUNROLLPASS_H

#include "llvm/Analysis/LoopInfo.h"
#include "llvm/IR/PassManager.h"
#include "llvm/Transforms/Scalar/LoopPassManager.h"

namespace llvm {

struct LoopUnrollPass : public PassInfoMixin<LoopUnrollPass> {
  Optional<unsigned> ProvidedCount;
  Optional<unsigned> ProvidedThreshold;
  Optional<bool> ProvidedAllowPartial;
  Optional<bool> ProvidedRuntime;
  Optional<bool> ProvidedUpperBound;

  PreservedAnalyses run(Loop &L, LoopAnalysisManager &AM,
                        LoopStandardAnalysisResults &AR, LPMUpdater &U);
};
} // end namespace llvm

#endif // LLVM_TRANSFORMS_SCALAR_LOOPUNROLLPASS_H
@


1.1.1.1
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@@


1.1.1.2
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d19 6
a24 24
class LoopUnrollPass : public PassInfoMixin<LoopUnrollPass> {
  const bool AllowPartialUnrolling;
  const int OptLevel;

  explicit LoopUnrollPass(bool AllowPartialUnrolling, int OptLevel)
      : AllowPartialUnrolling(AllowPartialUnrolling), OptLevel(OptLevel) {}

public:
  /// Create an instance of the loop unroll pass that will support both full
  /// and partial unrolling.
  ///
  /// This uses the target information (or flags) to control the thresholds for
  /// different unrolling stategies but supports all of them.
  static LoopUnrollPass create(int OptLevel = 2) {
    return LoopUnrollPass(/*AllowPartialUnrolling*/ true, OptLevel);
  }

  /// Create an instance of the loop unroll pass that only does full loop
  /// unrolling.
  ///
  /// This will disable any runtime or partial unrolling.
  static LoopUnrollPass createFull(int OptLevel = 2) {
    return LoopUnrollPass(/*AllowPartialUnrolling*/ false, OptLevel);
  }
@

