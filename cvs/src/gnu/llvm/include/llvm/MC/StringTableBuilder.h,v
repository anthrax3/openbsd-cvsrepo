head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.4
	OPENBSD_6_2:1.1.1.3.0.2
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.58;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	1.1.1.4;
commitid	so2WA7LCP6wbxtYl;

1.1.1.4
date	2017.10.04.20.27.54;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- StringTableBuilder.h - String table building utility ------*- C++ -*-=//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_MC_STRINGTABLEBUILDER_H
#define LLVM_MC_STRINGTABLEBUILDER_H

#include "llvm/ADT/SmallString.h"
#include "llvm/ADT/DenseMap.h"
#include <cassert>

namespace llvm {

/// \brief Utility for building string tables with deduplicated suffixes.
class StringTableBuilder {
public:
  enum Kind { ELF, WinCOFF, MachO, RAW };

private:
  SmallString<256> StringTable;
  DenseMap<StringRef, size_t> StringIndexMap;
  size_t Size = 0;
  Kind K;

public:
  StringTableBuilder(Kind K);

  /// \brief Add a string to the builder. Returns the position of S in the
  /// table. The position will be changed if finalize is used.
  /// Can only be used before the table is finalized.
  size_t add(StringRef S);

  /// \brief Analyze the strings and build the final table. No more strings can
  /// be added after this point.
  void finalize();

  /// \brief Retrieve the string table data. Can only be used after the table
  /// is finalized.
  StringRef data() const {
    assert(isFinalized());
    return StringTable;
  }

  /// \brief Get the offest of a string in the string table. Can only be used
  /// after the table is finalized.
  size_t getOffset(StringRef S) const;

  const DenseMap<StringRef, size_t> &getMap() const { return StringIndexMap; }
  size_t getSize() const { return Size; }
  void clear();

private:
  bool isFinalized() const {
    return !StringTable.empty();
  }
};

} // end llvm namespace

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d26 1
a26 1
  DenseMap<CachedHash<StringRef>, size_t> StringIndexMap;
a28 3
  unsigned Alignment;

  void finalizeStringTable(bool Optimize);
d31 1
a31 1
  StringTableBuilder(Kind K, unsigned Alignment = 1);
a41 4
  /// Finalize the string table without reording it. In this mode, offsets
  /// returned by add will still be valid.
  void finalizeInOrder();

d53 1
a53 4
  const DenseMap<CachedHash<StringRef>, size_t> &getMap() const {
    return StringIndexMap;
  }

@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d13 1
a13 1
#include "llvm/ADT/CachedHashString.h"
a17 1
class raw_ostream;
d25 2
a26 1
  DenseMap<CachedHashStringRef, size_t> StringIndexMap;
a29 1
  bool Finalized = false;
a31 1
  void initSize();
a34 1
  ~StringTableBuilder();
d39 1
a39 2
  size_t add(CachedHashStringRef S);
  size_t add(StringRef S) { return add(CachedHashStringRef(S)); }
d49 7
d58 4
a61 3
  size_t getOffset(CachedHashStringRef S) const;
  size_t getOffset(StringRef S) const {
    return getOffset(CachedHashStringRef(S));
a66 3
  void write(raw_ostream &OS) const;
  void write(uint8_t *Buf) const;

d68 3
a70 1
  bool isFinalized() const { return Finalized; }
@


1.1.1.4
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d1 1
a1 1
//===- StringTableBuilder.h - String table building utility -----*- C++ -*-===//
d15 1
a15 3
#include "llvm/ADT/StringRef.h"
#include <cstddef>
#include <cstdint>
a17 1

d70 1
a70 1
} // end namespace llvm
d72 1
a72 1
#endif // LLVM_MC_STRINGTABLEBUILDER_H
@


