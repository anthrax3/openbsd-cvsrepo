head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.58;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@//===- MCWinEH.h - Windows Unwinding Support --------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_MC_MCWINEH_H
#define LLVM_MC_MCWINEH_H

#include <vector>

namespace llvm {
class MCContext;
class MCSection;
class MCStreamer;
class MCSymbol;
class StringRef;

namespace WinEH {
struct Instruction {
  const MCSymbol *Label;
  const unsigned Offset;
  const unsigned Register;
  const unsigned Operation;

  Instruction(unsigned Op, MCSymbol *L, unsigned Reg, unsigned Off)
    : Label(L), Offset(Off), Register(Reg), Operation(Op) {}
};

struct FrameInfo {
  const MCSymbol *Begin;
  const MCSymbol *End;
  const MCSymbol *ExceptionHandler;
  const MCSymbol *Function;
  const MCSymbol *PrologEnd;
  const MCSymbol *Symbol;

  bool HandlesUnwind;
  bool HandlesExceptions;

  int LastFrameInst;
  const FrameInfo *ChainedParent;
  std::vector<Instruction> Instructions;

  FrameInfo()
    : Begin(nullptr), End(nullptr), ExceptionHandler(nullptr),
      Function(nullptr), PrologEnd(nullptr), Symbol(nullptr),
      HandlesUnwind(false), HandlesExceptions(false), LastFrameInst(-1),
      ChainedParent(nullptr), Instructions() {}
  FrameInfo(const MCSymbol *Function, const MCSymbol *BeginFuncEHLabel)
    : Begin(BeginFuncEHLabel), End(nullptr), ExceptionHandler(nullptr),
      Function(Function), PrologEnd(nullptr), Symbol(nullptr),
      HandlesUnwind(false), HandlesExceptions(false), LastFrameInst(-1),
      ChainedParent(nullptr), Instructions() {}
  FrameInfo(const MCSymbol *Function, const MCSymbol *BeginFuncEHLabel,
            const FrameInfo *ChainedParent)
    : Begin(BeginFuncEHLabel), End(nullptr), ExceptionHandler(nullptr),
      Function(Function), PrologEnd(nullptr), Symbol(nullptr),
      HandlesUnwind(false), HandlesExceptions(false), LastFrameInst(-1),
      ChainedParent(ChainedParent), Instructions() {}
};

class UnwindEmitter {
public:
  static MCSection *getPDataSection(const MCSymbol *Function,
                                    MCContext &Context);
  static MCSection *getXDataSection(const MCSymbol *Function,
                                    MCContext &Context);

  virtual ~UnwindEmitter() { }

  //
  // This emits the unwind info sections (.pdata and .xdata in PE/COFF).
  //
  virtual void Emit(MCStreamer &Streamer) const = 0;
  virtual void EmitUnwindInfo(MCStreamer &Streamer, FrameInfo *FI) const = 0;
};
}
}

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d16 1
d20 1
d34 6
a39 7
  const MCSymbol *Begin = nullptr;
  const MCSymbol *End = nullptr;
  const MCSymbol *ExceptionHandler = nullptr;
  const MCSymbol *Function = nullptr;
  const MCSymbol *PrologEnd = nullptr;
  const MCSymbol *Symbol = nullptr;
  const MCSection *TextSection = nullptr;
d41 2
a42 2
  bool HandlesUnwind = false;
  bool HandlesExceptions = false;
d44 2
a45 2
  int LastFrameInst = -1;
  const FrameInfo *ChainedParent = nullptr;
d48 5
a52 1
  FrameInfo() = default;
d54 4
a57 1
      : Begin(BeginFuncEHLabel), Function(Function) {}
d60 4
a63 2
      : Begin(BeginFuncEHLabel), Function(Function),
        ChainedParent(ChainedParent) {}
d68 10
a77 3
  virtual ~UnwindEmitter();

  /// This emits the unwind info sections (.pdata and .xdata in PE/COFF).
@

