head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.3
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.58;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.10.04.20.27.54;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- llvm/MC/SubtargetFeature.h - CPU characteristics --------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines and manages user or tool specified CPU characteristics.
// The intent is to be able to package specific features that should or should
// not be used on a specific target processor.  A tool, such as llc, could, as
// as example, gather chip info from the command line, a long with features
// that should be used on that chip.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_MC_SUBTARGETFEATURE_H
#define LLVM_MC_SUBTARGETFEATURE_H

#include "llvm/ADT/ArrayRef.h"
#include "llvm/ADT/Triple.h"
#include "llvm/Support/DataTypes.h"
#include <bitset>

namespace llvm {
  class raw_ostream;
  class StringRef;

// A container class for subtarget features.
// This is convenient because std::bitset does not have a constructor
// with an initializer list of set bits.
const unsigned MAX_SUBTARGET_FEATURES = 128;
class FeatureBitset : public std::bitset<MAX_SUBTARGET_FEATURES> {
public:
  // Cannot inherit constructors because it's not supported by VC++..
  FeatureBitset() : bitset() {}

  FeatureBitset(const bitset<MAX_SUBTARGET_FEATURES>& B) : bitset(B) {}

  FeatureBitset(std::initializer_list<unsigned> Init) : bitset() {
    for (auto I : Init)
      set(I);
  }
};

//===----------------------------------------------------------------------===//
///
/// SubtargetFeatureKV - Used to provide key value pairs for feature and
/// CPU bit flags.
//
struct SubtargetFeatureKV {
  const char *Key;                      // K-V key string
  const char *Desc;                     // Help descriptor
  FeatureBitset Value;                  // K-V integer value
  FeatureBitset Implies;                // K-V bit mask

  // Compare routine for std::lower_bound
  bool operator<(StringRef S) const {
    return StringRef(Key) < S;
  }

  // Compare routine for std::is_sorted.
  bool operator<(const SubtargetFeatureKV &Other) const {
    return StringRef(Key) < StringRef(Other.Key);
  }
};

//===----------------------------------------------------------------------===//
///
/// SubtargetInfoKV - Used to provide key value pairs for CPU and arbitrary
/// pointers.
//
struct SubtargetInfoKV {
  const char *Key;                      // K-V key string
  const void *Value;                    // K-V pointer value

  // Compare routine for std::lower_bound
  bool operator<(StringRef S) const {
    return StringRef(Key) < S;
  }
};

//===----------------------------------------------------------------------===//
///
/// SubtargetFeatures - Manages the enabling and disabling of subtarget
/// specific features.  Features are encoded as a string of the form
///   "+attr1,+attr2,-attr3,...,+attrN"
/// A comma separates each feature from the next (all lowercase.)
/// Each of the remaining features is prefixed with + or - indicating whether
/// that feature should be enabled or disabled contrary to the cpu
/// specification.
///

class SubtargetFeatures {
  std::vector<std::string> Features;    // Subtarget features as a vector
public:
  explicit SubtargetFeatures(StringRef Initial = "");

  /// Features string accessors.
  std::string getString() const;

  /// Adding Features.
  void AddFeature(StringRef String, bool Enable = true);

  /// ToggleFeature - Toggle a feature and update the feature bits.
  static void ToggleFeature(FeatureBitset &Bits, StringRef String,
                            ArrayRef<SubtargetFeatureKV> FeatureTable);

  /// Apply the feature flag and update the feature bits.
  static void ApplyFeatureFlag(FeatureBitset &Bits, StringRef Feature,
                               ArrayRef<SubtargetFeatureKV> FeatureTable);

  /// Get feature bits of a CPU.
  FeatureBitset getFeatureBits(StringRef CPU,
                          ArrayRef<SubtargetFeatureKV> CPUTable,
                          ArrayRef<SubtargetFeatureKV> FeatureTable);

  /// Print feature string.
  void print(raw_ostream &OS) const;

  // Dump feature info.
  void dump() const;

  /// Adds the default features for the specified target triple.
  void getDefaultSubtargetFeatures(const Triple& Triple);
};

} // End namespace llvm

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d21 1
a24 1
#include <vector>
a26 1
template <typename T> class ArrayRef;
@


1.1.1.3
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d1 1
a1 1
//===- llvm/MC/SubtargetFeature.h - CPU characteristics ---------*- C++ -*-===//
d10 5
a14 5
/// \file Defines and manages user or tool specified CPU characteristics.
/// The intent is to be able to package specific features that should or should
/// not be used on a specific target processor.  A tool, such as llc, could, as
/// as example, gather chip info from the command line, a long with features
/// that should be used on that chip.
d21 2
a22 1
#include "llvm/ADT/StringRef.h"
a23 2
#include <initializer_list>
#include <string>
a26 1

d28 2
a29 2
class raw_ostream;
class Triple;
d31 4
a34 4
const unsigned MAX_SUBTARGET_FEATURES = 192;
/// Container class for subtarget features.
/// This is convenient because std::bitset does not have a constructor
/// with an initializer list of set bits.
d38 1
a38 1
  FeatureBitset() = default;
d42 1
a42 1
  FeatureBitset(std::initializer_list<unsigned> Init) {
d49 4
a52 2

/// Used to provide key value pairs for feature and CPU bit flags.
d54 4
a57 4
  const char *Key;                      ///< K-V key string
  const char *Desc;                     ///< Help descriptor
  FeatureBitset Value;                  ///< K-V integer value
  FeatureBitset Implies;                ///< K-V bit mask
d59 1
a59 1
  /// Compare routine for std::lower_bound
d64 1
a64 1
  /// Compare routine for std::is_sorted.
d71 4
a74 2

/// Used to provide key value pairs for CPU and arbitrary pointers.
d76 2
a77 2
  const char *Key;                      ///< K-V key string
  const void *Value;                    ///< K-V pointer value
d79 1
a79 1
  /// Compare routine for std::lower_bound
a85 2

/// Manages the enabling and disabling of subtarget specific features.
d87 2
a88 1
/// Features are encoded as a string of the form
d94 2
d97 1
a97 2
  std::vector<std::string> Features;    ///< Subtarget features as a vector

d101 1
a101 1
  /// Returns features as a string.
d104 1
a104 1
  /// Adds Features.
d107 1
a107 1
  /// Toggles a feature and update the feature bits.
d111 1
a111 1
  /// Applies the feature flag and update the feature bits.
d115 1
a115 1
  /// Returns feature bits of a CPU.
d117 2
a118 2
                               ArrayRef<SubtargetFeatureKV> CPUTable,
                               ArrayRef<SubtargetFeatureKV> FeatureTable);
d120 1
a120 1
  /// Prints feature string.
d123 1
a123 1
  // Dumps feature info.
d130 1
a130 1
} // end namespace llvm
d132 1
a132 1
#endif // LLVM_MC_SUBTARGETFEATURE_H
@


