head	1.2;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2017.10.04.21.25.31;	author patrick;	state dead;
branches;
next	1.1;
commitid	Mkd0TLYgb943jFIc;

1.1
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.2
log
@Tedu files that got removed in LLVM 5.0.0.
@
text
@//===- PDBFile.h - Low level interface to a PDB file ------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_PDB_RAW_PDBFILE_H
#define LLVM_DEBUGINFO_PDB_RAW_PDBFILE_H

#include "llvm/ADT/DenseMap.h"
#include "llvm/DebugInfo/CodeView/StreamArray.h"
#include "llvm/DebugInfo/CodeView/StreamInterface.h"
#include "llvm/DebugInfo/PDB/Raw/IPDBFile.h"
#include "llvm/DebugInfo/PDB/Raw/MsfCommon.h"
#include "llvm/Support/Allocator.h"
#include "llvm/Support/Endian.h"
#include "llvm/Support/Error.h"
#include "llvm/Support/MathExtras.h"

#include <memory>

namespace llvm {

namespace codeview {
class StreamInterface;
}

namespace pdb {
class DbiStream;
class InfoStream;
class MappedBlockStream;
class NameHashTable;
class PDBFileBuilder;
class PublicsStream;
class SymbolStream;
class TpiStream;

class PDBFile : public IPDBFile {
  friend PDBFileBuilder;

public:
  explicit PDBFile(std::unique_ptr<codeview::StreamInterface> PdbFileBuffer);
  ~PDBFile() override;

  uint32_t getFreeBlockMapBlock() const;
  uint32_t getUnknown1() const;

  uint32_t getBlockSize() const override;
  uint32_t getBlockCount() const override;
  uint32_t getNumDirectoryBytes() const;
  uint32_t getBlockMapIndex() const;
  uint32_t getNumDirectoryBlocks() const;
  uint64_t getBlockMapOffset() const;

  uint32_t getNumStreams() const override;
  uint32_t getStreamByteSize(uint32_t StreamIndex) const override;
  ArrayRef<support::ulittle32_t>
  getStreamBlockList(uint32_t StreamIndex) const override;
  uint32_t getFileSize() const;

  Expected<ArrayRef<uint8_t>> getBlockData(uint32_t BlockIndex,
                                           uint32_t NumBytes) const override;
  Error setBlockData(uint32_t BlockIndex, uint32_t Offset,
                     ArrayRef<uint8_t> Data) const override;

  ArrayRef<support::ulittle32_t> getStreamSizes() const { return StreamSizes; }
  ArrayRef<ArrayRef<support::ulittle32_t>> getStreamMap() const {
    return StreamMap;
  }

  ArrayRef<support::ulittle32_t> getDirectoryBlockArray() const;

  Error parseFileHeaders();
  Error parseStreamData();

  Expected<InfoStream &> getPDBInfoStream();
  Expected<DbiStream &> getPDBDbiStream();
  Expected<TpiStream &> getPDBTpiStream();
  Expected<TpiStream &> getPDBIpiStream();
  Expected<PublicsStream &> getPDBPublicsStream();
  Expected<SymbolStream &> getPDBSymbolStream();
  Expected<NameHashTable &> getStringTable();

  Error commit();

private:
  Error setSuperBlock(const msf::SuperBlock *Block);

  BumpPtrAllocator Allocator;

  std::unique_ptr<codeview::StreamInterface> Buffer;
  const msf::SuperBlock *SB;
  ArrayRef<support::ulittle32_t> StreamSizes;
  ArrayRef<support::ulittle32_t> DirectoryBlocks;
  std::vector<ArrayRef<support::ulittle32_t>> StreamMap;

  std::unique_ptr<InfoStream> Info;
  std::unique_ptr<DbiStream> Dbi;
  std::unique_ptr<TpiStream> Tpi;
  std::unique_ptr<TpiStream> Ipi;
  std::unique_ptr<PublicsStream> Publics;
  std::unique_ptr<SymbolStream> Symbols;
  std::unique_ptr<MappedBlockStream> DirectoryStream;
  std::unique_ptr<MappedBlockStream> StringTableStream;
  std::unique_ptr<NameHashTable> StringTable;
};
}
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d14 4
a17 4
#include "llvm/DebugInfo/MSF/IMSFFile.h"
#include "llvm/DebugInfo/MSF/MSFCommon.h"
#include "llvm/DebugInfo/MSF/StreamArray.h"
#include "llvm/DebugInfo/MSF/StreamInterface.h"
d27 2
a28 2
namespace msf {
class MappedBlockStream;
a32 1
class GlobalsStream;
d34 1
d41 1
a41 1
class PDBFile : public msf::IMSFFile {
d45 1
a45 2
  PDBFile(std::unique_ptr<msf::ReadableStream> PdbFileBuffer,
          BumpPtrAllocator &Allocator);
d69 1
a69 5
  ArrayRef<uint32_t> getFpmPages() const { return FpmPages; }

  ArrayRef<support::ulittle32_t> getStreamSizes() const {
    return ContainerLayout.StreamSizes;
  }
d71 1
a71 1
    return ContainerLayout.StreamMap;
a73 3
  const msf::MSFLayout &getMsfLayout() const { return ContainerLayout; }
  const msf::ReadableStream &getMsfBuffer() const { return *Buffer; }

a80 1
  Expected<GlobalsStream &> getPDBGlobalsStream();
d87 1
a87 15
  BumpPtrAllocator &getAllocator() { return Allocator; }

  bool hasPDBDbiStream() const;
  bool hasPDBGlobalsStream();
  bool hasPDBInfoStream();
  bool hasPDBIpiStream() const;
  bool hasPDBPublicsStream();
  bool hasPDBSymbolStream();
  bool hasPDBTpiStream() const;
  bool hasStringTable();

 private:
  Expected<std::unique_ptr<msf::MappedBlockStream>> safelyCreateIndexedStream(
      const msf::MSFLayout &Layout, const msf::ReadableStream &MsfData,
      uint32_t StreamIndex) const;
d89 2
a90 1
  BumpPtrAllocator &Allocator;
d92 1
a92 1
  std::unique_ptr<msf::ReadableStream> Buffer;
d94 5
a98 2
  std::vector<uint32_t> FpmPages;
  msf::MSFLayout ContainerLayout;
a99 1
  std::unique_ptr<GlobalsStream> Globals;
d106 2
a107 2
  std::unique_ptr<msf::MappedBlockStream> DirectoryStream;
  std::unique_ptr<msf::MappedBlockStream> StringTableStream;
@

