head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.6
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- PublicsStream.h - PDB Public Symbol Stream -------- ------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_PDB_RAW_PUBLICSSTREAM_H
#define LLVM_DEBUGINFO_PDB_RAW_PUBLICSSTREAM_H

#include "llvm/DebugInfo/CodeView/StreamArray.h"
#include "llvm/DebugInfo/CodeView/SymbolRecord.h"
#include "llvm/DebugInfo/PDB/PDBTypes.h"
#include "llvm/DebugInfo/PDB/Raw/MappedBlockStream.h"
#include "llvm/DebugInfo/PDB/Raw/RawConstants.h"
#include "llvm/DebugInfo/PDB/Raw/RawTypes.h"

#include "llvm/Support/Error.h"

namespace llvm {
namespace pdb {
class DbiStream;
class PDBFile;

class PublicsStream {
  struct GSIHashHeader;
  struct HeaderInfo;

public:
  PublicsStream(PDBFile &File, std::unique_ptr<MappedBlockStream> Stream);
  ~PublicsStream();
  Error reload();

  uint32_t getSymHash() const;
  uint32_t getAddrMap() const;
  uint32_t getNumBuckets() const { return NumBuckets; }
  iterator_range<codeview::CVSymbolArray::Iterator>
  getSymbols(bool *HadError) const;
  codeview::FixedStreamArray<support::ulittle32_t> getHashBuckets() const {
    return HashBuckets;
  }
  codeview::FixedStreamArray<support::ulittle32_t> getAddressMap() const {
    return AddressMap;
  }
  codeview::FixedStreamArray<support::ulittle32_t> getThunkMap() const {
    return ThunkMap;
  }
  codeview::FixedStreamArray<SectionOffset> getSectionOffsets() const {
    return SectionOffsets;
  }

  Error commit();

private:
  PDBFile &Pdb;

  std::unique_ptr<MappedBlockStream> Stream;
  uint32_t NumBuckets = 0;
  ArrayRef<uint8_t> Bitmap;
  codeview::FixedStreamArray<PSHashRecord> HashRecords;
  codeview::FixedStreamArray<support::ulittle32_t> HashBuckets;
  codeview::FixedStreamArray<support::ulittle32_t> AddressMap;
  codeview::FixedStreamArray<support::ulittle32_t> ThunkMap;
  codeview::FixedStreamArray<SectionOffset> SectionOffsets;

  const HeaderInfo *Header;
  const GSIHashHeader *HashHdr;
};
}
}

#endif
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d13 1
a14 2
#include "llvm/DebugInfo/MSF/MappedBlockStream.h"
#include "llvm/DebugInfo/MSF/StreamArray.h"
d16 1
a24 1
struct GSIHashHeader;
d28 1
d32 1
a32 1
  PublicsStream(PDBFile &File, std::unique_ptr<msf::MappedBlockStream> Stream);
d41 1
a41 1
  msf::FixedStreamArray<support::ulittle32_t> getHashBuckets() const {
d44 1
a44 1
  msf::FixedStreamArray<support::ulittle32_t> getAddressMap() const {
d47 1
a47 1
  msf::FixedStreamArray<support::ulittle32_t> getThunkMap() const {
d50 1
a50 1
  msf::FixedStreamArray<SectionOffset> getSectionOffsets() const {
d59 1
a59 1
  std::unique_ptr<msf::MappedBlockStream> Stream;
d62 5
a66 5
  msf::FixedStreamArray<PSHashRecord> HashRecords;
  msf::FixedStreamArray<support::ulittle32_t> HashBuckets;
  msf::FixedStreamArray<support::ulittle32_t> AddressMap;
  msf::FixedStreamArray<support::ulittle32_t> ThunkMap;
  msf::FixedStreamArray<SectionOffset> SectionOffsets;
@

