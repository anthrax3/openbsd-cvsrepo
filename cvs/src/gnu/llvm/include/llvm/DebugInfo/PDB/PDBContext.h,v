head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- PDBContext.h --------------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===/

#ifndef LLVM_DEBUGINFO_PDB_PDBCONTEXT_H
#define LLVM_DEBUGINFO_PDB_PDBCONTEXT_H

#include "llvm/DebugInfo/DIContext.h"
#include "llvm/DebugInfo/PDB/IPDBSession.h"

namespace llvm {

namespace object {
class COFFObjectFile;
}

/// PDBContext
/// This data structure is the top level entity that deals with PDB debug
/// information parsing.  This data structure exists only when there is a
/// need for a transparent interface to different debug information formats
/// (e.g. PDB and DWARF).  More control and power over the debug information
/// access can be had by using the PDB interfaces directly.
class PDBContext : public DIContext {

  PDBContext(PDBContext &) = delete;
  PDBContext &operator=(PDBContext &) = delete;

public:
  PDBContext(const object::COFFObjectFile &Object,
             std::unique_ptr<IPDBSession> PDBSession);

  static bool classof(const DIContext *DICtx) {
    return DICtx->getKind() == CK_PDB;
  }

  void dump(raw_ostream &OS, DIDumpType DumpType = DIDT_All) override;

  DILineInfo getLineInfoForAddress(
      uint64_t Address,
      DILineInfoSpecifier Specifier = DILineInfoSpecifier()) override;
  DILineInfoTable getLineInfoForAddressRange(
      uint64_t Address, uint64_t Size,
      DILineInfoSpecifier Specifier = DILineInfoSpecifier()) override;
  DIInliningInfo getInliningInfoForAddress(
      uint64_t Address,
      DILineInfoSpecifier Specifier = DILineInfoSpecifier()) override;

private:
  std::string getFunctionName(uint64_t Address, DINameKind NameKind) const;
  std::unique_ptr<IPDBSession> Session;
};
}

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d20 19
d41 16
a56 38
  namespace pdb {
  /// PDBContext
  /// This data structure is the top level entity that deals with PDB debug
  /// information parsing.  This data structure exists only when there is a
  /// need for a transparent interface to different debug information formats
  /// (e.g. PDB and DWARF).  More control and power over the debug information
  /// access can be had by using the PDB interfaces directly.
  class PDBContext : public DIContext {

    PDBContext(PDBContext &) = delete;
    PDBContext &operator=(PDBContext &) = delete;

  public:
    PDBContext(const object::COFFObjectFile &Object,
               std::unique_ptr<IPDBSession> PDBSession);

    static bool classof(const DIContext *DICtx) {
      return DICtx->getKind() == CK_PDB;
    }

    void dump(raw_ostream &OS, DIDumpType DumpType = DIDT_All,
              bool DumpEH = false) override;

    DILineInfo getLineInfoForAddress(
        uint64_t Address,
        DILineInfoSpecifier Specifier = DILineInfoSpecifier()) override;
    DILineInfoTable getLineInfoForAddressRange(
        uint64_t Address, uint64_t Size,
        DILineInfoSpecifier Specifier = DILineInfoSpecifier()) override;
    DIInliningInfo getInliningInfoForAddress(
        uint64_t Address,
        DILineInfoSpecifier Specifier = DILineInfoSpecifier()) override;

  private:
    std::string getFunctionName(uint64_t Address, DINameKind NameKind) const;
    std::unique_ptr<IPDBSession> Session;
  };
  }
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a14 3
#include <cstdint>
#include <memory>
#include <string>
d20 1
a20 3
} // end namespace object

namespace pdb {
d22 1
d30 4
a36 2
    PDBContext(PDBContext &) = delete;
    PDBContext &operator=(PDBContext &) = delete;
d43 1
a43 1
              bool DumpEH = false, bool SummarizeTypes = false) override;
d59 2
d62 1
a62 5
} // end namespace pdb

} // end namespace llvm

#endif // LLVM_DEBUGINFO_PDB_PDBCONTEXT_H
@


