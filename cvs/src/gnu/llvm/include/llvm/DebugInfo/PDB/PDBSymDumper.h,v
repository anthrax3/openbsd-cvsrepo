head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.3
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.10.04.20.27.54;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===- PDBSymDumper.h - base interface for PDB symbol dumper *- C++ -----*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_PDB_PDBSYMDUMPER_H
#define LLVM_DEBUGINFO_PDB_PDBSYMDUMPER_H

#include "PDBTypes.h"

namespace llvm {

class raw_ostream;

class PDBSymDumper {
public:
  PDBSymDumper(bool ShouldRequireImpl);
  virtual ~PDBSymDumper();

  virtual void dump(const PDBSymbolAnnotation &Symbol);
  virtual void dump(const PDBSymbolBlock &Symbol);
  virtual void dump(const PDBSymbolCompiland &Symbol);
  virtual void dump(const PDBSymbolCompilandDetails &Symbol);
  virtual void dump(const PDBSymbolCompilandEnv &Symbol);
  virtual void dump(const PDBSymbolCustom &Symbol);
  virtual void dump(const PDBSymbolData &Symbol);
  virtual void dump(const PDBSymbolExe &Symbol);
  virtual void dump(const PDBSymbolFunc &Symbol);
  virtual void dump(const PDBSymbolFuncDebugEnd &Symbol);
  virtual void dump(const PDBSymbolFuncDebugStart &Symbol);
  virtual void dump(const PDBSymbolLabel &Symbol);
  virtual void dump(const PDBSymbolPublicSymbol &Symbol);
  virtual void dump(const PDBSymbolThunk &Symbol);
  virtual void dump(const PDBSymbolTypeArray &Symbol);
  virtual void dump(const PDBSymbolTypeBaseClass &Symbol);
  virtual void dump(const PDBSymbolTypeBuiltin &Symbol);
  virtual void dump(const PDBSymbolTypeCustom &Symbol);
  virtual void dump(const PDBSymbolTypeDimension &Symbol);
  virtual void dump(const PDBSymbolTypeEnum &Symbol);
  virtual void dump(const PDBSymbolTypeFriend &Symbol);
  virtual void dump(const PDBSymbolTypeFunctionArg &Symbol);
  virtual void dump(const PDBSymbolTypeFunctionSig &Symbol);
  virtual void dump(const PDBSymbolTypeManaged &Symbol);
  virtual void dump(const PDBSymbolTypePointer &Symbol);
  virtual void dump(const PDBSymbolTypeTypedef &Symbol);
  virtual void dump(const PDBSymbolTypeUDT &Symbol);
  virtual void dump(const PDBSymbolTypeVTable &Symbol);
  virtual void dump(const PDBSymbolTypeVTableShape &Symbol);
  virtual void dump(const PDBSymbolUnknown &Symbol);
  virtual void dump(const PDBSymbolUsingNamespace &Symbol);

private:
  bool RequireImpl;
};
}

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a17 1
namespace pdb {
a58 1
}
@


1.1.1.3
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@a56 16
  virtual void dumpRight(const PDBSymbolTypeArray &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeBaseClass &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeBuiltin &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeCustom &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeDimension &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeEnum &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeFriend &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeFunctionArg &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeFunctionSig &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeManaged &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypePointer &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeTypedef &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeUDT &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeVTable &Symbol) {}
  virtual void dumpRight(const PDBSymbolTypeVTableShape &Symbol) {}

@


