head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.6
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- TpiStream.cpp - PDB Type Info (TPI) Stream 2 Access ------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_PDB_RAW_PDBTPISTREAM_H
#define LLVM_DEBUGINFO_PDB_RAW_PDBTPISTREAM_H

#include "llvm/DebugInfo/CodeView/StreamArray.h"
#include "llvm/DebugInfo/CodeView/StreamRef.h"
#include "llvm/DebugInfo/CodeView/TypeRecord.h"
#include "llvm/DebugInfo/PDB/PDBTypes.h"
#include "llvm/DebugInfo/PDB/Raw/MappedBlockStream.h"
#include "llvm/DebugInfo/PDB/Raw/RawConstants.h"
#include "llvm/DebugInfo/PDB/Raw/RawTypes.h"
#include "llvm/Support/raw_ostream.h"

#include "llvm/Support/Error.h"

namespace llvm {
namespace pdb {
class PDBFile;

class TpiStream {
  struct HeaderInfo;

public:
  TpiStream(const PDBFile &File, std::unique_ptr<MappedBlockStream> Stream);
  ~TpiStream();
  Error reload();

  PdbRaw_TpiVer getTpiVersion() const;

  uint32_t TypeIndexBegin() const;
  uint32_t TypeIndexEnd() const;
  uint32_t NumTypeRecords() const;
  uint16_t getTypeHashStreamIndex() const;
  uint16_t getTypeHashStreamAuxIndex() const;

  uint32_t getHashKeySize() const;
  uint32_t NumHashBuckets() const;
  codeview::FixedStreamArray<support::ulittle32_t> getHashValues() const;
  codeview::FixedStreamArray<TypeIndexOffset> getTypeIndexOffsets() const;
  codeview::FixedStreamArray<TypeIndexOffset> getHashAdjustments() const;

  iterator_range<codeview::CVTypeArray::Iterator> types(bool *HadError) const;

  Error commit();

private:
  Error verifyHashValues();

  const PDBFile &Pdb;
  std::unique_ptr<MappedBlockStream> Stream;

  codeview::CVTypeArray TypeRecords;

  std::unique_ptr<MappedBlockStream> HashStream;
  codeview::FixedStreamArray<support::ulittle32_t> HashValues;
  codeview::FixedStreamArray<TypeIndexOffset> TypeIndexOffsets;
  codeview::FixedStreamArray<TypeIndexOffset> HashAdjustments;

  const HeaderInfo *Header;
};
}
}

#endif
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d13 2
a15 1
#include "llvm/DebugInfo/MSF/StreamArray.h"
d17 1
a24 3
namespace msf {
class MappedBlockStream;
}
d29 1
a29 1
  friend class TpiStreamBuilder;
d32 1
a32 2
  TpiStream(const PDBFile &File,
            std::unique_ptr<msf::MappedBlockStream> Stream);
d46 3
a48 3
  msf::FixedStreamArray<support::ulittle32_t> getHashValues() const;
  msf::FixedStreamArray<TypeIndexOffset> getTypeIndexOffsets() const;
  msf::FixedStreamArray<TypeIndexOffset> getHashAdjustments() const;
d58 1
a58 1
  std::unique_ptr<msf::MappedBlockStream> Stream;
d62 4
a65 4
  std::unique_ptr<msf::ReadableStream> HashStream;
  msf::FixedStreamArray<support::ulittle32_t> HashValues;
  msf::FixedStreamArray<TypeIndexOffset> TypeIndexOffsets;
  msf::FixedStreamArray<TypeIndexOffset> HashAdjustments;
d67 1
a67 1
  const TpiStreamHeader *Header;
@

