head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.3
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	so2WA7LCP6wbxtYl;

1.1.1.3
date	2017.10.04.20.27.54;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===- TypeVisitorCallbacks.h -----------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_CODEVIEW_TYPEVISITORCALLBACKS_H
#define LLVM_DEBUGINFO_CODEVIEW_TYPEVISITORCALLBACKS_H

#include "llvm/ADT/ArrayRef.h"
#include "llvm/DebugInfo/CodeView/CodeView.h"
#include "llvm/DebugInfo/CodeView/CVRecord.h"
#include "llvm/DebugInfo/CodeView/TypeRecord.h"
#include "llvm/Support/Error.h"

namespace llvm {
namespace codeview {
class TypeVisitorCallbacks {
  friend class CVTypeVisitor;

public:
  virtual ~TypeVisitorCallbacks() {}

  /// Action to take on unknown types. By default, they are ignored.
  virtual Error visitUnknownType(const CVRecord<TypeLeafKind> &Record) {
    return Error::success();
  }
  virtual Error visitUnknownMember(const CVRecord<TypeLeafKind> &Record) {
    return Error::success();
  }

  /// Paired begin/end actions for all types. Receives all record data,
  /// including the fixed-length record prefix.
  virtual Error visitTypeBegin(const CVRecord<TypeLeafKind> &Record) {
    return Error::success();
  }
  virtual Error visitTypeEnd(const CVRecord<TypeLeafKind> &Record) {
    return Error::success();
  }

  virtual Error visitFieldListBegin(const CVRecord<TypeLeafKind> &Record) {
    return Error::success();
  }

  virtual Error visitFieldListEnd(const CVRecord<TypeLeafKind> &Record) {
    return Error::success();
  }

#define TYPE_RECORD(EnumName, EnumVal, Name)                                   \
  virtual Error visit##Name(Name##Record &Record) { return Error::success(); }
#define MEMBER_RECORD(EnumName, EnumVal, Name)                                 \
  TYPE_RECORD(EnumName, EnumVal, Name)
#define TYPE_RECORD_ALIAS(EnumName, EnumVal, Name, AliasName)
#define MEMBER_RECORD_ALIAS(EnumName, EnumVal, Name, AliasName)
#include "TypeRecords.def"
};
}
}

#endif
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d13 3
a20 1

d25 1
a25 1
  virtual ~TypeVisitorCallbacks() = default;
d28 7
a34 1
  virtual Error visitUnknownType(CVType &Record) { return Error::success(); }
d36 5
a40 6
  /// including the fixed-length record prefix.  visitTypeBegin() should return
  /// the type of the Record, or an error if it cannot be determined.
  virtual Error visitTypeBegin(CVType &Record) { return Error::success(); }
  virtual Error visitTypeEnd(CVType &Record) { return Error::success(); }

  virtual Error visitUnknownMember(CVMemberRecord &Record) {
d44 1
a44 1
  virtual Error visitMemberBegin(CVMemberRecord &Record) {
d48 1
a48 1
  virtual Error visitMemberEnd(CVMemberRecord &Record) {
d53 1
a53 3
  virtual Error visitKnownRecord(CVType &CVR, Name##Record &Record) {          \
    return Error::success();                                                   \
  }
d55 1
a55 4
  virtual Error visitKnownMember(CVMemberRecord &CVM, Name##Record &Record) {  \
    return Error::success();                                                   \
  }

d60 2
d63 1
a63 4
} // end namespace codeview
} // end namespace llvm

#endif // LLVM_DEBUGINFO_CODEVIEW_TYPEVISITORCALLBACKS_H
@


1.1.1.3
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d20 2
d29 1
a29 5
  /// the type of the Record, or an error if it cannot be determined.  Exactly
  /// one of the two visitTypeBegin methods will be called, depending on whether
  /// records are being visited sequentially or randomly.  An implementation
  /// should be prepared to handle both (or assert if it can't handle random
  /// access visitation).
a30 3
  virtual Error visitTypeBegin(CVType &Record, TypeIndex Index) {
    return Error::success();
  }
d56 1
a56 5
#include "llvm/DebugInfo/CodeView/CodeViewTypes.def"
#undef TYPE_RECORD
#undef TYPE_RECORD_ALIAS
#undef MEMBER_RECORD
#undef MEMBER_RECORD_ALIAS
@


