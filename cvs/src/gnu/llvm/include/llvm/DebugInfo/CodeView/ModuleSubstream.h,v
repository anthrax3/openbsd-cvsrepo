head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- ModuleSubstream.h ----------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_CODEVIEW_MODULESUBSTREAM_H
#define LLVM_DEBUGINFO_CODEVIEW_MODULESUBSTREAM_H

#include "llvm/DebugInfo/CodeView/CodeView.h"
#include "llvm/DebugInfo/CodeView/StreamArray.h"
#include "llvm/DebugInfo/CodeView/StreamRef.h"
#include "llvm/Support/Endian.h"
#include "llvm/Support/Error.h"

namespace llvm {
namespace codeview {

// Corresponds to the `CV_DebugSSubsectionHeader_t` structure.
struct ModuleSubsectionHeader {
  support::ulittle32_t Kind;   // codeview::ModuleSubstreamKind enum
  support::ulittle32_t Length; // number of bytes occupied by this record.
};

// Corresponds to the `CV_DebugSLinesHeader_t` structure.
struct LineSubstreamHeader {
  support::ulittle32_t RelocOffset;  // Code offset of line contribution.
  support::ulittle16_t RelocSegment; // Code segment of line contribution.
  support::ulittle16_t Flags;        // See LineFlags enumeration.
  support::ulittle32_t CodeSize;     // Code size of this line contribution.
};

// Corresponds to the `CV_DebugSLinesFileBlockHeader_t` structure.
struct LineFileBlockHeader {
  support::ulittle32_t NameIndex; // Index in DBI name buffer of filename.
  support::ulittle32_t NumLines;  // Number of lines
  support::ulittle32_t BlockSize; // Code size of block, in bytes.
  // The following two variable length arrays appear immediately after the
  // header.  The structure definitions follow.
  // LineNumberEntry   Lines[NumLines];
  // ColumnNumberEntry Columns[NumLines];
};

// Corresponds to `CV_Line_t` structure
struct LineNumberEntry {
  support::ulittle32_t Offset; // Offset to start of code bytes for line number
  support::ulittle32_t Flags;  // Start:24, End:7, IsStatement:1
};

// Corresponds to `CV_Column_t` structure
struct ColumnNumberEntry {
  support::ulittle16_t StartColumn;
  support::ulittle16_t EndColumn;
};

class ModuleSubstream {
public:
  ModuleSubstream();
  ModuleSubstream(ModuleSubstreamKind Kind, StreamRef Data);
  static Error initialize(StreamRef Stream, ModuleSubstream &Info);
  uint32_t getRecordLength() const;
  ModuleSubstreamKind getSubstreamKind() const;
  StreamRef getRecordData() const;

private:
  ModuleSubstreamKind Kind;
  StreamRef Data;
};

template <> struct VarStreamArrayExtractor<ModuleSubstream> {
  Error operator()(StreamRef Stream, uint32_t &Length,
                   ModuleSubstream &Info) const {
    if (auto EC = ModuleSubstream::initialize(Stream, Info))
      return EC;
    Length = Info.getRecordLength();
    return Error::success();
  }
};

typedef VarStreamArray<ModuleSubstream> ModuleSubstreamArray;
}
}

#endif // LLVM_DEBUGINFO_CODEVIEW_MODULESUBSTREAM_H
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d14 2
a15 2
#include "llvm/DebugInfo/MSF/StreamArray.h"
#include "llvm/DebugInfo/MSF/StreamRef.h"
d62 2
a63 2
  ModuleSubstream(ModuleSubstreamKind Kind, msf::ReadableStreamRef Data);
  static Error initialize(msf::ReadableStreamRef Stream, ModuleSubstream &Info);
d66 1
a66 1
  msf::ReadableStreamRef getRecordData() const;
d70 1
a70 1
  msf::ReadableStreamRef Data;
d73 4
a76 8
typedef msf::VarStreamArray<ModuleSubstream> ModuleSubstreamArray;
} // namespace codeview

namespace msf {
template <> struct VarStreamArrayExtractor<codeview::ModuleSubstream> {
  Error operator()(ReadableStreamRef Stream, uint32_t &Length,
                   codeview::ModuleSubstream &Info) const {
    if (auto EC = codeview::ModuleSubstream::initialize(Stream, Info))
d82 4
a85 2
} // namespace msf
} // namespace llvm
@

