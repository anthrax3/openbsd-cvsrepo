head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- RecordIterator.h -----------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_CODEVIEW_RECORDITERATOR_H
#define LLVM_DEBUGINFO_CODEVIEW_RECORDITERATOR_H

#include "llvm/ADT/ArrayRef.h"
#include "llvm/ADT/iterator_range.h"
#include "llvm/DebugInfo/CodeView/RecordSerialization.h"
#include "llvm/DebugInfo/CodeView/StreamInterface.h"
#include "llvm/DebugInfo/CodeView/StreamReader.h"
#include "llvm/Support/Endian.h"

namespace llvm {
namespace codeview {

template <typename Kind> struct CVRecord {
  uint32_t Length;
  Kind Type;
  ArrayRef<uint8_t> Data;
  ArrayRef<uint8_t> RawData;
};

template <typename Kind> struct VarStreamArrayExtractor<CVRecord<Kind>> {
  Error operator()(StreamRef Stream, uint32_t &Len,
                   CVRecord<Kind> &Item) const {
    const RecordPrefix *Prefix = nullptr;
    StreamReader Reader(Stream);
    uint32_t Offset = Reader.getOffset();

    if (auto EC = Reader.readObject(Prefix))
      return EC;
    Item.Length = Prefix->RecordLen;
    if (Item.Length < 2)
      return make_error<CodeViewError>(cv_error_code::corrupt_record);
    Item.Type = static_cast<Kind>(uint16_t(Prefix->RecordKind));

    Reader.setOffset(Offset);
    if (auto EC =
            Reader.readBytes(Item.RawData, Item.Length + sizeof(uint16_t)))
      return EC;
    Item.Data = Item.RawData.slice(sizeof(RecordPrefix));
    Len = Prefix->RecordLen + 2;
    return Error::success();
  }
};
}
}

#endif
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d14 1
a14 2
#include "llvm/ADT/Optional.h"
#include "llvm/DebugInfo/CodeView/CodeViewError.h"
d16 2
a17 2
#include "llvm/DebugInfo/MSF/StreamReader.h"
#include "llvm/DebugInfo/MSF/StreamRef.h"
a18 2
#include "llvm/Support/Error.h"
#include <cstdint>
a20 1

d23 2
a24 17
template <typename Kind> class CVRecord {
public:
  CVRecord() = default;
  CVRecord(Kind K, ArrayRef<uint8_t> Data) : Type(K), RecordData(Data) {}

  uint32_t length() const { return RecordData.size(); }
  Kind kind() const { return Type; }
  ArrayRef<uint8_t> data() const { return RecordData; }

  ArrayRef<uint8_t> content() const {
    return RecordData.drop_front(sizeof(RecordPrefix));
  }

  Optional<uint32_t> hash() const { return Hash; }

  void setHash(uint32_t Value) { Hash = Value; }

d26 2
a27 2
  ArrayRef<uint8_t> RecordData;
  Optional<uint32_t> Hash;
d30 3
a32 9
} // end namespace codeview

namespace msf {

template <typename Kind>
struct VarStreamArrayExtractor<codeview::CVRecord<Kind>> {
  Error operator()(ReadableStreamRef Stream, uint32_t &Len,
                   codeview::CVRecord<Kind> &Item) const {
    using namespace codeview;
d39 2
a40 1
    if (Prefix->RecordLen < 2)
d42 1
a42 1
    Kind K = static_cast<Kind>(uint16_t(Prefix->RecordKind));
a44 1
    ArrayRef<uint8_t> RawData;
d46 1
a46 1
            Reader.readBytes(RawData, Prefix->RecordLen + sizeof(uint16_t)))
d48 2
a49 2
    Item = codeview::CVRecord<Kind>(K, RawData);
    Len = Item.length();
d53 2
d56 1
a56 5
} // end namespace msf

} // end namespace llvm

#endif // LLVM_DEBUGINFO_CODEVIEW_RECORDITERATOR_H
@

