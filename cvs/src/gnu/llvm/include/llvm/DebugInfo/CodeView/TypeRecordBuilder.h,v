head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.18;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- TypeRecordBuilder.h --------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_CODEVIEW_TYPERECORDBUILDER_H
#define LLVM_DEBUGINFO_CODEVIEW_TYPERECORDBUILDER_H

#include "llvm/DebugInfo/CodeView/CodeView.h"
#include "llvm/DebugInfo/CodeView/TypeIndex.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/Support/EndianStream.h"
#include "llvm/Support/raw_ostream.h"

namespace llvm {
namespace codeview {

class TypeRecordBuilder {
private:
  TypeRecordBuilder(const TypeRecordBuilder &) = delete;
  TypeRecordBuilder &operator=(const TypeRecordBuilder &) = delete;

public:
  explicit TypeRecordBuilder(TypeRecordKind Kind);

  void writeUInt8(uint8_t Value);
  void writeInt16(int16_t Value);
  void writeUInt16(uint16_t Value);
  void writeInt32(int32_t Value);
  void writeUInt32(uint32_t Value);
  void writeInt64(int64_t Value);
  void writeUInt64(uint64_t Value);
  void writeTypeIndex(TypeIndex TypeInd);
  void writeTypeRecordKind(TypeRecordKind Kind);
  void writeEncodedInteger(int64_t Value);
  void writeEncodedSignedInteger(int64_t Value);
  void writeEncodedUnsignedInteger(uint64_t Value);
  void writeNullTerminatedString(const char *Value);
  void writeNullTerminatedString(StringRef Value);

  llvm::StringRef str();

  uint64_t size() const { return Stream.tell(); }

private:
  llvm::SmallVector<char, 256> Buffer;
  llvm::raw_svector_ostream Stream;
  llvm::support::endian::Writer<llvm::support::endianness::little> Writer;
};
}
}

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a12 1
#include "llvm/ADT/SmallVector.h"
d15 1
a15 1
#include "llvm/DebugInfo/CodeView/TypeRecord.h"
d42 1
a43 2
  void writeGuid(StringRef Guid);
  void writeBytes(StringRef Value) { Stream << Value; }
a47 11

  void truncate(uint64_t Size) {
    // This works because raw_svector_ostream is not buffered.
    assert(Size < Buffer.size());
    Buffer.resize(Size);
  }

  void reset(TypeRecordKind K) {
    Buffer.clear();
    writeTypeRecordKind(K);
  }
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a49 6
  TypeRecordKind kind() const { return Kind; }

  /// Returns the number of bytes remaining before this record is larger than
  /// the maximum record length. Accounts for the extra two byte size field in
  /// the header.
  size_t maxBytesRemaining() const { return MaxRecordLength - size() - 2; }
a58 1
    Kind = K;
a62 1
  TypeRecordKind Kind;
@


