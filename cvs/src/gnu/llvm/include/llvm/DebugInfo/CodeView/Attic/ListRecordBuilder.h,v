head	1.2;
access;
symbols
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.01.24.08.39.06;	author patrick;	state dead;
branches;
next	1.1;
commitid	wUhrDWmTVlrk8aou;

1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.2
log
@Merge LLVM 4.0.0 rc1
@
text
@//===- ListRecordBuilder.h --------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_CODEVIEW_LISTRECORDBUILDER_H
#define LLVM_DEBUGINFO_CODEVIEW_LISTRECORDBUILDER_H

#include "llvm/DebugInfo/CodeView/TypeRecordBuilder.h"

namespace llvm {
namespace codeview {

class ListRecordBuilder {
private:
  ListRecordBuilder(const ListRecordBuilder &) = delete;
  ListRecordBuilder &operator=(const ListRecordBuilder &) = delete;

protected:
  const int MethodKindShift = 2;

  explicit ListRecordBuilder(TypeRecordKind Kind);

public:
  llvm::StringRef str() { return Builder.str(); }

protected:
  void finishSubRecord();

  TypeRecordBuilder &getBuilder() { return Builder; }

private:
  TypeRecordBuilder Builder;
  SmallVector<size_t, 4> ContinuationOffsets;
};
}
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a16 1
class TypeTableBuilder;
a30 11
  void reset() {
    Builder.reset(Kind);
    ContinuationOffsets.clear();
    SubrecordStart = 0;
  }

  void writeListContinuation(const ListContinuationRecord &R);

  /// Writes this list record as a possible sequence of records.
  TypeIndex writeListRecord(TypeTableBuilder &Table);

a36 9
  size_t getLastContinuationStart() const {
    return ContinuationOffsets.empty() ? 0 : ContinuationOffsets.back();
  }
  size_t getLastContinuationEnd() const { return Builder.size(); }
  size_t getLastContinuationSize() const {
    return getLastContinuationEnd() - getLastContinuationStart();
  }

  TypeRecordKind Kind;
a38 1
  size_t SubrecordStart = 0;
@

