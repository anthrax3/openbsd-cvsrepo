head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.56;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@//===- MemoryTypeTableBuilder.h ---------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DEBUGINFO_CODEVIEW_MEMORYTYPETABLEBUILDER_H
#define LLVM_DEBUGINFO_CODEVIEW_MEMORYTYPETABLEBUILDER_H

#include "llvm/ADT/Hashing.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/DebugInfo/CodeView/TypeTableBuilder.h"
#include <functional>
#include <memory>
#include <unordered_map>
#include <vector>

namespace llvm {
namespace codeview {

class MemoryTypeTableBuilder : public TypeTableBuilder {
public:
  class Record {
  public:
    explicit Record(llvm::StringRef RData);

    const char *data() const { return Data.get(); }
    uint16_t size() const { return Size; }

  private:
    uint16_t Size;
    std::unique_ptr<char[]> Data;
  };

private:
  class RecordHash : std::unary_function<llvm::StringRef, size_t> {
  public:
    size_t operator()(llvm::StringRef Val) const {
      return static_cast<size_t>(llvm::hash_value(Val));
    }
  };

public:
  MemoryTypeTableBuilder() {}

  template <typename TFunc> void ForEachRecord(TFunc Func) {
    uint32_t Index = TypeIndex::FirstNonSimpleIndex;

    for (const std::unique_ptr<Record> &R : Records) {
      Func(TypeIndex(Index), R.get());
      ++Index;
    }
  }

private:
  virtual TypeIndex writeRecord(llvm::StringRef Data) override;

private:
  std::vector<std::unique_ptr<Record>> Records;
  std::unordered_map<llvm::StringRef, TypeIndex, RecordHash> HashedRecords;
};
}
}

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d13 1
a13 1
#include "llvm/ADT/DenseMap.h"
d16 3
d26 21
a48 2
  bool empty() const { return Records.empty(); }

d52 2
a53 2
    for (StringRef R : Records) {
      Func(TypeIndex(Index), R);
d58 2
a59 2
protected:
  TypeIndex writeRecord(llvm::StringRef Data) override;
d62 2
a63 3
  std::vector<StringRef> Records;
  BumpPtrAllocator RecordStorage;
  DenseMap<StringRef, TypeIndex> HashedRecords;
d65 2
d68 1
a68 4
} // end namespace codeview
} // end namespace llvm

#endif // LLVM_DEBUGINFO_CODEVIEW_MEMORYTYPETABLEBUILDER_H
@

