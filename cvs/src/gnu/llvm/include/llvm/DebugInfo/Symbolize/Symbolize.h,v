head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- Symbolize.h --------------------------------------------- C++ -----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// Header for LLVM symbolization library.
//
//===----------------------------------------------------------------------===//
#ifndef LLVM_DEBUGINFO_SYMBOLIZE_SYMBOLIZE_H
#define LLVM_DEBUGINFO_SYMBOLIZE_SYMBOLIZE_H

#include "llvm/DebugInfo/Symbolize/SymbolizableModule.h"
#include "llvm/Object/ObjectFile.h"
#include "llvm/Support/ErrorOr.h"
#include <map>
#include <memory>
#include <string>

namespace llvm {
namespace symbolize {

using namespace object;
using FunctionNameKind = DILineInfoSpecifier::FunctionNameKind;

class LLVMSymbolizer {
public:
  struct Options {
    FunctionNameKind PrintFunctions;
    bool UseSymbolTable : 1;
    bool Demangle : 1;
    bool RelativeAddresses : 1;
    std::string DefaultArch;
    std::vector<std::string> DsymHints;
    Options(FunctionNameKind PrintFunctions = FunctionNameKind::LinkageName,
            bool UseSymbolTable = true, bool Demangle = true,
            bool RelativeAddresses = false, std::string DefaultArch = "")
        : PrintFunctions(PrintFunctions), UseSymbolTable(UseSymbolTable),
          Demangle(Demangle), RelativeAddresses(RelativeAddresses),
          DefaultArch(DefaultArch) {}
  };

  LLVMSymbolizer(const Options &Opts = Options()) : Opts(Opts) {}
  ~LLVMSymbolizer() {
    flush();
  }

  ErrorOr<DILineInfo> symbolizeCode(const std::string &ModuleName,
                                    uint64_t ModuleOffset);
  ErrorOr<DIInliningInfo> symbolizeInlinedCode(const std::string &ModuleName,
                                               uint64_t ModuleOffset);
  ErrorOr<DIGlobal> symbolizeData(const std::string &ModuleName,
                                  uint64_t ModuleOffset);
  void flush();
  static std::string DemangleName(const std::string &Name,
                                  const SymbolizableModule *ModInfo);

private:
  // Bundles together object file with code/data and object file with
  // corresponding debug info. These objects can be the same.
  typedef std::pair<ObjectFile*, ObjectFile*> ObjectPair;

  ErrorOr<SymbolizableModule *>
  getOrCreateModuleInfo(const std::string &ModuleName);
  ObjectFile *lookUpDsymFile(const std::string &Path,
                             const MachOObjectFile *ExeObj,
                             const std::string &ArchName);
  ObjectFile *lookUpDebuglinkObject(const std::string &Path,
                                    const ObjectFile *Obj,
                                    const std::string &ArchName);

  /// \brief Returns pair of pointers to object and debug object.
  ErrorOr<ObjectPair> getOrCreateObjectPair(const std::string &Path,
                                            const std::string &ArchName);

  /// \brief Return a pointer to object file at specified path, for a specified
  /// architecture (e.g. if path refers to a Mach-O universal binary, only one
  /// object file from it will be returned).
  ErrorOr<ObjectFile *> getOrCreateObject(const std::string &Path,
                                          const std::string &ArchName);

  std::map<std::string, ErrorOr<std::unique_ptr<SymbolizableModule>>> Modules;

  /// \brief Contains cached results of getOrCreateObjectPair().
  std::map<std::pair<std::string, std::string>, ErrorOr<ObjectPair>>
      ObjectPairForPathArch;

  /// \brief Contains parsed binary for each path, or parsing error.
  std::map<std::string, ErrorOr<OwningBinary<Binary>>> BinaryForPath;

  /// \brief Parsed object file for path/architecture pair, where "path" refers
  /// to Mach-O universal binary.
  std::map<std::pair<std::string, std::string>, ErrorOr<std::unique_ptr<ObjectFile>>>
      ObjectForUBPathAndArch;

  Options Opts;
};

} // namespace symbolize
} // namespace llvm

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a21 1
#include <utility>
d43 1
a43 1
          DefaultArch(std::move(DefaultArch)) {}
d51 6
a56 6
  Expected<DILineInfo> symbolizeCode(const std::string &ModuleName,
                                     uint64_t ModuleOffset);
  Expected<DIInliningInfo> symbolizeInlinedCode(const std::string &ModuleName,
                                                uint64_t ModuleOffset);
  Expected<DIGlobal> symbolizeData(const std::string &ModuleName,
                                   uint64_t ModuleOffset);
d66 1
a66 5
  /// Returns a SymbolizableModule or an error if loading debug info failed.
  /// Only one attempt is made to load a module, and errors during loading are
  /// only reported once. Subsequent calls to get module info for a module that
  /// failed to load will return nullptr.
  Expected<SymbolizableModule *>
a67 1

d76 1
a76 1
  Expected<ObjectPair> getOrCreateObjectPair(const std::string &Path,
d82 1
a82 1
  Expected<ObjectFile *> getOrCreateObject(const std::string &Path,
d85 1
a85 1
  std::map<std::string, std::unique_ptr<SymbolizableModule>> Modules;
d88 1
a88 1
  std::map<std::pair<std::string, std::string>, ObjectPair>
d92 1
a92 1
  std::map<std::string, OwningBinary<Binary>> BinaryForPath;
d96 1
a96 1
  std::map<std::pair<std::string, std::string>, std::unique_ptr<ObjectFile>>
@

