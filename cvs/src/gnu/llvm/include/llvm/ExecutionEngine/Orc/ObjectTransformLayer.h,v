head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.17;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- ObjectTransformLayer.h - Run all objects through functor -*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// Run all objects passed in through a user supplied functor.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_EXECUTIONENGINE_ORC_OBJECTTRANSFORMLAYER_H
#define LLVM_EXECUTIONENGINE_ORC_OBJECTTRANSFORMLAYER_H

#include "JITSymbol.h"

namespace llvm {
namespace orc {

/// @@brief Object mutating layer.
///
///   This layer accepts sets of ObjectFiles (via addObjectSet). It
/// immediately applies the user supplied functor to each object, then adds
/// the set of transformed objects to the layer below.
template <typename BaseLayerT, typename TransformFtor>
class ObjectTransformLayer {
public:
  /// @@brief Handle to a set of added objects.
  typedef typename BaseLayerT::ObjSetHandleT ObjSetHandleT;

  /// @@brief Construct an ObjectTransformLayer with the given BaseLayer
  ObjectTransformLayer(BaseLayerT &BaseLayer,
                       TransformFtor Transform = TransformFtor())
      : BaseLayer(BaseLayer), Transform(std::move(Transform)) {}

  /// @@brief Apply the transform functor to each object in the object set, then
  ///        add the resulting set of objects to the base layer, along with the
  ///        memory manager and symbol resolver.
  ///
  /// @@return A handle for the added objects.
  template <typename ObjSetT, typename MemoryManagerPtrT,
            typename SymbolResolverPtrT>
  ObjSetHandleT addObjectSet(ObjSetT &Objects, MemoryManagerPtrT MemMgr,
                             SymbolResolverPtrT Resolver) {

    for (auto I = Objects.begin(), E = Objects.end(); I != E; ++I)
      *I = Transform(std::move(*I));

    return BaseLayer.addObjectSet(Objects, std::move(MemMgr),
                                  std::move(Resolver));
  }

  /// @@brief Remove the object set associated with the handle H.
  void removeObjectSet(ObjSetHandleT H) { BaseLayer.removeObjectSet(H); }

  /// @@brief Search for the given named symbol.
  /// @@param Name The name of the symbol to search for.
  /// @@param ExportedSymbolsOnly If true, search only for exported symbols.
  /// @@return A handle for the given named symbol, if it exists.
  JITSymbol findSymbol(const std::string &Name, bool ExportedSymbolsOnly) {
    return BaseLayer.findSymbol(Name, ExportedSymbolsOnly);
  }

  /// @@brief Get the address of the given symbol in the context of the set of
  ///        objects represented by the handle H. This call is forwarded to the
  ///        base layer's implementation.
  /// @@param H The handle for the object set to search in.
  /// @@param Name The name of the symbol to search for.
  /// @@param ExportedSymbolsOnly If true, search only for exported symbols.
  /// @@return A handle for the given named symbol, if it is found in the
  ///         given object set.
  JITSymbol findSymbolIn(ObjSetHandleT H, const std::string &Name,
                         bool ExportedSymbolsOnly) {
    return BaseLayer.findSymbolIn(H, Name, ExportedSymbolsOnly);
  }

  /// @@brief Immediately emit and finalize the object set represented by the
  ///        given handle.
  /// @@param H Handle for object set to emit/finalize.
  void emitAndFinalize(ObjSetHandleT H) { BaseLayer.emitAndFinalize(H); }

  /// @@brief Map section addresses for the objects associated with the handle H.
  void mapSectionAddress(ObjSetHandleT H, const void *LocalAddress,
                         TargetAddress TargetAddr) {
    BaseLayer.mapSectionAddress(H, LocalAddress, TargetAddr);
  }

  /// @@brief Access the transform functor directly.
  TransformFtor &getTransform() { return Transform; }

  /// @@brief Access the mumate functor directly.
  const TransformFtor &getTransform() const { return Transform; }

private:
  BaseLayerT &BaseLayer;
  TransformFtor Transform;
};

} // End namespace orc.
} // End namespace llvm.

#endif // LLVM_EXECUTIONENGINE_ORC_OBJECTTRANSFORMLAYER_H
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d45 1
a45 1
  ObjSetHandleT addObjectSet(ObjSetT Objects, MemoryManagerPtrT MemMgr,
d51 1
a51 1
    return BaseLayer.addObjectSet(std::move(Objects), std::move(MemMgr),
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d17 1
a17 1
#include "llvm/ExecutionEngine/JITSymbol.h"
d86 1
a86 1
                         JITTargetAddress TargetAddr) {
@


