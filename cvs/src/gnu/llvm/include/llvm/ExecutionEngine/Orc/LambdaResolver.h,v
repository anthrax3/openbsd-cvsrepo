head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.17;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- LambdaResolverMM - Redirect symbol lookup via a functor -*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//   Defines a RuntimeDyld::SymbolResolver subclass that uses a user-supplied
// functor for symbol resolution.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_EXECUTIONENGINE_ORC_LAMBDARESOLVER_H
#define LLVM_EXECUTIONENGINE_ORC_LAMBDARESOLVER_H

#include "llvm/ADT/STLExtras.h"
#include "llvm/ExecutionEngine/RuntimeDyld.h"
#include <memory>
#include <vector>

namespace llvm {
namespace orc {

template <typename ExternalLookupFtorT, typename DylibLookupFtorT>
class LambdaResolver : public RuntimeDyld::SymbolResolver {
public:

  LambdaResolver(ExternalLookupFtorT ExternalLookupFtor,
                 DylibLookupFtorT DylibLookupFtor)
      : ExternalLookupFtor(ExternalLookupFtor),
        DylibLookupFtor(DylibLookupFtor) {}

  RuntimeDyld::SymbolInfo findSymbol(const std::string &Name) final {
    return ExternalLookupFtor(Name);
  }

  RuntimeDyld::SymbolInfo
  findSymbolInLogicalDylib(const std::string &Name) final {
    return DylibLookupFtor(Name);
  }

private:
  ExternalLookupFtorT ExternalLookupFtor;
  DylibLookupFtorT DylibLookupFtor;
};

template <typename ExternalLookupFtorT,
          typename DylibLookupFtorT>
std::unique_ptr<LambdaResolver<ExternalLookupFtorT, DylibLookupFtorT>>
createLambdaResolver(ExternalLookupFtorT ExternalLookupFtor,
                     DylibLookupFtorT DylibLookupFtor) {
  typedef LambdaResolver<ExternalLookupFtorT, DylibLookupFtorT> LR;
  return make_unique<LR>(std::move(ExternalLookupFtor),
                         std::move(DylibLookupFtor));
}

} // End namespace orc.
} // End namespace llvm.

#endif // LLVM_EXECUTIONENGINE_ORC_LAMBDARESOLVER_H
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d21 1
d26 1
a26 1
template <typename DylibLookupFtorT, typename ExternalLookupFtorT>
d30 8
a37 4
  LambdaResolver(DylibLookupFtorT DylibLookupFtor,
                 ExternalLookupFtorT ExternalLookupFtor)
      : DylibLookupFtor(DylibLookupFtor),
        ExternalLookupFtor(ExternalLookupFtor) {}
a43 4
  RuntimeDyld::SymbolInfo findSymbol(const std::string &Name) final {
    return ExternalLookupFtor(Name);
  }

d45 1
a46 1
  ExternalLookupFtorT ExternalLookupFtor;
d49 8
a56 8
template <typename DylibLookupFtorT,
          typename ExternalLookupFtorT>
std::unique_ptr<LambdaResolver<DylibLookupFtorT, ExternalLookupFtorT>>
createLambdaResolver(DylibLookupFtorT DylibLookupFtor,
                     ExternalLookupFtorT ExternalLookupFtor) {
  typedef LambdaResolver<DylibLookupFtorT, ExternalLookupFtorT> LR;
  return make_unique<LR>(std::move(DylibLookupFtor),
                         std::move(ExternalLookupFtor));
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d26 1
a26 1
class LambdaResolver : public JITSymbolResolver {
d34 2
a35 1
  JITSymbol findSymbolInLogicalDylib(const std::string &Name) final {
d39 1
a39 1
  JITSymbol findSymbol(const std::string &Name) final {
@


