head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.6
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.55.57;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.17;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===--- OrcRemoteTargetRPCAPI.h - Orc Remote-target RPC API ----*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines the Orc remote-target RPC API. It should not be used
// directly, but is used by the RemoteTargetClient and RemoteTargetServer
// classes.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETRPCAPI_H
#define LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETRPCAPI_H

#include "JITSymbol.h"
#include "RPCChannel.h"
#include "RPCUtils.h"

namespace llvm {
namespace orc {
namespace remote {

class OrcRemoteTargetRPCAPI : public RPC<RPCChannel> {
protected:
  class ResourceIdMgr {
  public:
    typedef uint64_t ResourceId;
    ResourceIdMgr() : NextId(0) {}
    ResourceId getNext() {
      if (!FreeIds.empty()) {
        ResourceId I = FreeIds.back();
        FreeIds.pop_back();
        return I;
      }
      return NextId++;
    }
    void release(ResourceId I) { FreeIds.push_back(I); }

  private:
    ResourceId NextId;
    std::vector<ResourceId> FreeIds;
  };

public:
  enum JITProcId : uint32_t {
    InvalidId = 0,
    CallIntVoidId,
    CallIntVoidResponseId,
    CallMainId,
    CallMainResponseId,
    CallVoidVoidId,
    CallVoidVoidResponseId,
    CreateRemoteAllocatorId,
    CreateIndirectStubsOwnerId,
    DestroyRemoteAllocatorId,
    DestroyIndirectStubsOwnerId,
    EmitIndirectStubsId,
    EmitIndirectStubsResponseId,
    EmitResolverBlockId,
    EmitTrampolineBlockId,
    EmitTrampolineBlockResponseId,
    GetSymbolAddressId,
    GetSymbolAddressResponseId,
    GetRemoteInfoId,
    GetRemoteInfoResponseId,
    ReadMemId,
    ReadMemResponseId,
    ReserveMemId,
    ReserveMemResponseId,
    RequestCompileId,
    RequestCompileResponseId,
    SetProtectionsId,
    TerminateSessionId,
    WriteMemId,
    WritePtrId
  };

  static const char *getJITProcIdName(JITProcId Id);

  typedef Procedure<CallIntVoidId, TargetAddress /* FnAddr */> CallIntVoid;

  typedef Procedure<CallIntVoidResponseId, int /* Result */>
      CallIntVoidResponse;

  typedef Procedure<CallMainId, TargetAddress /* FnAddr */,
                    std::vector<std::string> /* Args */>
      CallMain;

  typedef Procedure<CallMainResponseId, int /* Result */> CallMainResponse;

  typedef Procedure<CallVoidVoidId, TargetAddress /* FnAddr */> CallVoidVoid;

  typedef Procedure<CallVoidVoidResponseId> CallVoidVoidResponse;

  typedef Procedure<CreateRemoteAllocatorId,
                    ResourceIdMgr::ResourceId /* Allocator ID */>
      CreateRemoteAllocator;

  typedef Procedure<CreateIndirectStubsOwnerId,
                    ResourceIdMgr::ResourceId /* StubsOwner ID */>
      CreateIndirectStubsOwner;

  typedef Procedure<DestroyRemoteAllocatorId,
                    ResourceIdMgr::ResourceId /* Allocator ID */>
      DestroyRemoteAllocator;

  typedef Procedure<DestroyIndirectStubsOwnerId,
                    ResourceIdMgr::ResourceId /* StubsOwner ID */>
      DestroyIndirectStubsOwner;

  typedef Procedure<EmitIndirectStubsId,
                    ResourceIdMgr::ResourceId /* StubsOwner ID */,
                    uint32_t /* NumStubsRequired */>
      EmitIndirectStubs;

  typedef Procedure<
      EmitIndirectStubsResponseId, TargetAddress /* StubsBaseAddr */,
      TargetAddress /* PtrsBaseAddr */, uint32_t /* NumStubsEmitted */>
      EmitIndirectStubsResponse;

  typedef Procedure<EmitResolverBlockId> EmitResolverBlock;

  typedef Procedure<EmitTrampolineBlockId> EmitTrampolineBlock;

  typedef Procedure<EmitTrampolineBlockResponseId,
                    TargetAddress /* BlockAddr */,
                    uint32_t /* NumTrampolines */>
      EmitTrampolineBlockResponse;

  typedef Procedure<GetSymbolAddressId, std::string /*SymbolName*/>
      GetSymbolAddress;

  typedef Procedure<GetSymbolAddressResponseId, uint64_t /* SymbolAddr */>
      GetSymbolAddressResponse;

  typedef Procedure<GetRemoteInfoId> GetRemoteInfo;

  typedef Procedure<GetRemoteInfoResponseId, std::string /* Triple */,
                    uint32_t /* PointerSize */, uint32_t /* PageSize */,
                    uint32_t /* TrampolineSize */,
                    uint32_t /* IndirectStubSize */>
      GetRemoteInfoResponse;

  typedef Procedure<ReadMemId, TargetAddress /* Src */, uint64_t /* Size */>
      ReadMem;

  typedef Procedure<ReadMemResponseId> ReadMemResponse;

  typedef Procedure<ReserveMemId, ResourceIdMgr::ResourceId /* Id */,
                    uint64_t /* Size */, uint32_t /* Align */>
      ReserveMem;

  typedef Procedure<ReserveMemResponseId, TargetAddress /* Addr */>
      ReserveMemResponse;

  typedef Procedure<RequestCompileId, TargetAddress /* TrampolineAddr */>
      RequestCompile;

  typedef Procedure<RequestCompileResponseId, TargetAddress /* ImplAddr */>
      RequestCompileResponse;

  typedef Procedure<SetProtectionsId, ResourceIdMgr::ResourceId /* Id */,
                    TargetAddress /* Dst */, uint32_t /* ProtFlags */>
      SetProtections;

  typedef Procedure<TerminateSessionId> TerminateSession;

  typedef Procedure<WriteMemId, TargetAddress /* Dst */, uint64_t /* Size */
                    /* Data should follow */>
      WriteMem;

  typedef Procedure<WritePtrId, TargetAddress /* Dst */,
                    TargetAddress /* Val */>
      WritePtr;
};

} // end namespace remote
} // end namespace orc
} // end namespace llvm

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a26 38
class DirectBufferWriter {
public:
  DirectBufferWriter() = default;
  DirectBufferWriter(const char *Src, TargetAddress Dst, uint64_t Size)
      : Src(Src), Dst(Dst), Size(Size) {}

  const char *getSrc() const { return Src; }
  TargetAddress getDst() const { return Dst; }
  uint64_t getSize() const { return Size; }

private:
  const char *Src;
  TargetAddress Dst;
  uint64_t Size;
};

inline Error serialize(RPCChannel &C, const DirectBufferWriter &DBW) {
  if (auto EC = serialize(C, DBW.getDst()))
    return EC;
  if (auto EC = serialize(C, DBW.getSize()))
    return EC;
  return C.appendBytes(DBW.getSrc(), DBW.getSize());
}

inline Error deserialize(RPCChannel &C, DirectBufferWriter &DBW) {
  TargetAddress Dst;
  if (auto EC = deserialize(C, Dst))
    return EC;
  uint64_t Size;
  if (auto EC = deserialize(C, Size))
    return EC;
  char *Addr = reinterpret_cast<char *>(static_cast<uintptr_t>(Dst));

  DBW = DirectBufferWriter(0, Dst, Size);

  return C.readBytes(Addr, Size);
}

d32 1
a32 2
    static const ResourceId InvalidId = ~0U;

d44 1
a44 1
    ResourceId NextId = 0;
d49 4
a52 11
  // FIXME: Remove constructors once MSVC supports synthesizing move-ops.
  OrcRemoteTargetRPCAPI() = default;
  OrcRemoteTargetRPCAPI(const OrcRemoteTargetRPCAPI &) = delete;
  OrcRemoteTargetRPCAPI &operator=(const OrcRemoteTargetRPCAPI &) = delete;

  OrcRemoteTargetRPCAPI(OrcRemoteTargetRPCAPI &&) {}
  OrcRemoteTargetRPCAPI &operator=(OrcRemoteTargetRPCAPI &&) { return *this; }

  enum JITFuncId : uint32_t {
    InvalidId = RPCFunctionIdTraits<JITFuncId>::InvalidId,
    CallIntVoidId = RPCFunctionIdTraits<JITFuncId>::FirstValidId,
d54 1
d56 1
a58 1
    DeregisterEHFramesId,
d62 1
d65 1
d67 1
d69 1
d71 1
a71 1
    RegisterEHFramesId,
d73 1
d75 1
d82 3
a84 1
  static const char *getJITFuncIdName(JITFuncId Id);
d86 2
a87 1
  typedef Function<CallIntVoidId, int32_t(TargetAddress Addr)> CallIntVoid;
d89 2
a90 2
  typedef Function<CallMainId,
                   int32_t(TargetAddress Addr, std::vector<std::string> Args)>
d93 5
a97 1
  typedef Function<CallVoidVoidId, void(TargetAddress FnAddr)> CallVoidVoid;
d99 2
a100 2
  typedef Function<CreateRemoteAllocatorId,
                   void(ResourceIdMgr::ResourceId AllocatorID)>
d103 2
a104 2
  typedef Function<CreateIndirectStubsOwnerId,
                   void(ResourceIdMgr::ResourceId StubOwnerID)>
d107 2
a108 6
  typedef Function<DeregisterEHFramesId,
                   void(TargetAddress Addr, uint32_t Size)>
      DeregisterEHFrames;

  typedef Function<DestroyRemoteAllocatorId,
                   void(ResourceIdMgr::ResourceId AllocatorID)>
d111 2
a112 2
  typedef Function<DestroyIndirectStubsOwnerId,
                   void(ResourceIdMgr::ResourceId StubsOwnerID)>
d115 3
a117 5
  /// EmitIndirectStubs result is (StubsBase, PtrsBase, NumStubsEmitted).
  typedef Function<EmitIndirectStubsId,
                   std::tuple<TargetAddress, TargetAddress, uint32_t>(
                       ResourceIdMgr::ResourceId StubsOwnerID,
                       uint32_t NumStubsRequired)>
d120 6
a125 1
  typedef Function<EmitResolverBlockId, void()> EmitResolverBlock;
d127 1
a127 3
  /// EmitTrampolineBlock result is (BlockAddr, NumTrampolines).
  typedef Function<EmitTrampolineBlockId, std::tuple<TargetAddress, uint32_t>()>
      EmitTrampolineBlock;
d129 6
a134 1
  typedef Function<GetSymbolAddressId, TargetAddress(std::string SymbolName)>
d137 4
a140 5
  /// GetRemoteInfo result is (Triple, PointerSize, PageSize, TrampolineSize,
  ///                          IndirectStubsSize).
  typedef Function<GetRemoteInfoId, std::tuple<std::string, uint32_t, uint32_t,
                                               uint32_t, uint32_t>()>
      GetRemoteInfo;
d142 7
a148 2
  typedef Function<ReadMemId,
                   std::vector<char>(TargetAddress Src, uint64_t Size)>
d151 1
a151 2
  typedef Function<RegisterEHFramesId, void(TargetAddress Addr, uint32_t Size)>
      RegisterEHFrames;
d153 2
a154 3
  typedef Function<ReserveMemId,
                   TargetAddress(ResourceIdMgr::ResourceId AllocID,
                                 uint64_t Size, uint32_t Align)>
d157 4
a160 2
  typedef Function<RequestCompileId,
                   TargetAddress(TargetAddress TrampolineAddr)>
d163 5
a167 3
  typedef Function<SetProtectionsId,
                   void(ResourceIdMgr::ResourceId AllocID, TargetAddress Dst,
                        uint32_t ProtFlags)>
d170 1
a170 1
  typedef Function<TerminateSessionId, void()> TerminateSession;
d172 3
a174 1
  typedef Function<WriteMemId, void(DirectBufferWriter DB)> WriteMem;
d176 2
a177 1
  typedef Function<WritePtrId, void(TargetAddress Dst, TargetAddress Val)>
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d19 2
a21 2
#include "RawByteChannel.h"
#include "llvm/ExecutionEngine/JITSymbol.h"
d30 1
a30 1
  DirectBufferWriter(const char *Src, JITTargetAddress Dst, uint64_t Size)
d34 1
a34 1
  JITTargetAddress getDst() const { return Dst; }
d39 1
a39 1
  JITTargetAddress Dst;
d43 16
a58 33
} // end namespace remote

namespace rpc {

template <> class RPCTypeName<remote::DirectBufferWriter> {
public:
  static const char *getName() { return "DirectBufferWriter"; }
};

template <typename ChannelT>
class SerializationTraits<
    ChannelT, remote::DirectBufferWriter, remote::DirectBufferWriter,
    typename std::enable_if<
        std::is_base_of<RawByteChannel, ChannelT>::value>::type> {
public:
  static Error serialize(ChannelT &C, const remote::DirectBufferWriter &DBW) {
    if (auto EC = serializeSeq(C, DBW.getDst()))
      return EC;
    if (auto EC = serializeSeq(C, DBW.getSize()))
      return EC;
    return C.appendBytes(DBW.getSrc(), DBW.getSize());
  }

  static Error deserialize(ChannelT &C, remote::DirectBufferWriter &DBW) {
    JITTargetAddress Dst;
    if (auto EC = deserializeSeq(C, Dst))
      return EC;
    uint64_t Size;
    if (auto EC = deserializeSeq(C, Size))
      return EC;
    char *Addr = reinterpret_cast<char *>(static_cast<uintptr_t>(Dst));

    DBW = remote::DirectBufferWriter(0, Dst, Size);
d60 1
a60 5
    return C.readBytes(Addr, Size);
  }
};

} // end namespace rpc
d62 2
a63 1
namespace remote {
d65 1
a65 2
class OrcRemoteTargetRPCAPI
    : public rpc::SingleThreadedRPCEndpoint<rpc::RawByteChannel> {
d89 61
a149 56
  OrcRemoteTargetRPCAPI(rpc::RawByteChannel &C)
      : rpc::SingleThreadedRPCEndpoint<rpc::RawByteChannel>(C, true) {}

  class CallIntVoid
      : public rpc::Function<CallIntVoid, int32_t(JITTargetAddress Addr)> {
  public:
    static const char *getName() { return "CallIntVoid"; }
  };

  class CallMain
      : public rpc::Function<CallMain, int32_t(JITTargetAddress Addr,
                                               std::vector<std::string> Args)> {
  public:
    static const char *getName() { return "CallMain"; }
  };

  class CallVoidVoid
      : public rpc::Function<CallVoidVoid, void(JITTargetAddress FnAddr)> {
  public:
    static const char *getName() { return "CallVoidVoid"; }
  };

  class CreateRemoteAllocator
      : public rpc::Function<CreateRemoteAllocator,
                             void(ResourceIdMgr::ResourceId AllocatorID)> {
  public:
    static const char *getName() { return "CreateRemoteAllocator"; }
  };

  class CreateIndirectStubsOwner
      : public rpc::Function<CreateIndirectStubsOwner,
                             void(ResourceIdMgr::ResourceId StubOwnerID)> {
  public:
    static const char *getName() { return "CreateIndirectStubsOwner"; }
  };

  class DeregisterEHFrames
      : public rpc::Function<DeregisterEHFrames,
                             void(JITTargetAddress Addr, uint32_t Size)> {
  public:
    static const char *getName() { return "DeregisterEHFrames"; }
  };

  class DestroyRemoteAllocator
      : public rpc::Function<DestroyRemoteAllocator,
                             void(ResourceIdMgr::ResourceId AllocatorID)> {
  public:
    static const char *getName() { return "DestroyRemoteAllocator"; }
  };

  class DestroyIndirectStubsOwner
      : public rpc::Function<DestroyIndirectStubsOwner,
                             void(ResourceIdMgr::ResourceId StubsOwnerID)> {
  public:
    static const char *getName() { return "DestroyIndirectStubsOwner"; }
  };
d152 5
a156 9
  class EmitIndirectStubs
      : public rpc::Function<
            EmitIndirectStubs,
            std::tuple<JITTargetAddress, JITTargetAddress, uint32_t>(
                ResourceIdMgr::ResourceId StubsOwnerID,
                uint32_t NumStubsRequired)> {
  public:
    static const char *getName() { return "EmitIndirectStubs"; }
  };
d158 1
a158 4
  class EmitResolverBlock : public rpc::Function<EmitResolverBlock, void()> {
  public:
    static const char *getName() { return "EmitResolverBlock"; }
  };
d161 2
a162 6
  class EmitTrampolineBlock
      : public rpc::Function<EmitTrampolineBlock,
                             std::tuple<JITTargetAddress, uint32_t>()> {
  public:
    static const char *getName() { return "EmitTrampolineBlock"; }
  };
d164 2
a165 6
  class GetSymbolAddress
      : public rpc::Function<GetSymbolAddress,
                             JITTargetAddress(std::string SymbolName)> {
  public:
    static const char *getName() { return "GetSymbolAddress"; }
  };
d169 3
a171 7
  class GetRemoteInfo
      : public rpc::Function<
            GetRemoteInfo,
            std::tuple<std::string, uint32_t, uint32_t, uint32_t, uint32_t>()> {
  public:
    static const char *getName() { return "GetRemoteInfo"; }
  };
d173 3
a175 6
  class ReadMem
      : public rpc::Function<ReadMem, std::vector<uint8_t>(JITTargetAddress Src,
                                                           uint64_t Size)> {
  public:
    static const char *getName() { return "ReadMem"; }
  };
d177 2
a178 6
  class RegisterEHFrames
      : public rpc::Function<RegisterEHFrames,
                             void(JITTargetAddress Addr, uint32_t Size)> {
  public:
    static const char *getName() { return "RegisterEHFrames"; }
  };
d180 4
a183 7
  class ReserveMem
      : public rpc::Function<ReserveMem,
                             JITTargetAddress(ResourceIdMgr::ResourceId AllocID,
                                              uint64_t Size, uint32_t Align)> {
  public:
    static const char *getName() { return "ReserveMem"; }
  };
d185 3
a187 6
  class RequestCompile
      : public rpc::Function<
            RequestCompile, JITTargetAddress(JITTargetAddress TrampolineAddr)> {
  public:
    static const char *getName() { return "RequestCompile"; }
  };
d189 4
a192 7
  class SetProtections
      : public rpc::Function<SetProtections,
                             void(ResourceIdMgr::ResourceId AllocID,
                                  JITTargetAddress Dst, uint32_t ProtFlags)> {
  public:
    static const char *getName() { return "SetProtections"; }
  };
d194 1
a194 4
  class TerminateSession : public rpc::Function<TerminateSession, void()> {
  public:
    static const char *getName() { return "TerminateSession"; }
  };
d196 1
a196 5
  class WriteMem
      : public rpc::Function<WriteMem, void(remote::DirectBufferWriter DB)> {
  public:
    static const char *getName() { return "WriteMem"; }
  };
d198 2
a199 5
  class WritePtr : public rpc::Function<WritePtr, void(JITTargetAddress Dst,
                                                       JITTargetAddress Val)> {
  public:
    static const char *getName() { return "WritePtr"; }
  };
@


