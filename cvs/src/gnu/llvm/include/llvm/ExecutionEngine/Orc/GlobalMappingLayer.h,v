head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.3
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.58;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.24.08.33.17;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	so2WA7LCP6wbxtYl;

1.1.1.3
date	2017.10.04.20.27.53;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===---- GlobalMappingLayer.h - Run all IR through a functor ---*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// Convenience layer for injecting symbols that will appear in calls to
// findSymbol.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_EXECUTIONENGINE_ORC_GLOBALMAPPINGLAYER_H
#define LLVM_EXECUTIONENGINE_ORC_GLOBALMAPPINGLAYER_H

#include "JITSymbol.h"
#include <map>

namespace llvm {
namespace orc {

/// @@brief Global mapping layer.
///
///   This layer overrides the findSymbol method to first search a local symbol
/// table that the client can define. It can be used to inject new symbol
/// mappings into the JIT. Beware, however: symbols within a single IR module or
/// object file will still resolve locally (via RuntimeDyld's symbol table) -
/// such internal references cannot be overriden via this layer.
template <typename BaseLayerT>
class GlobalMappingLayer {
public:
  /// @@brief Handle to a set of added modules.
  typedef typename BaseLayerT::ModuleSetHandleT ModuleSetHandleT;

  /// @@brief Construct an GlobalMappingLayer with the given BaseLayer
  GlobalMappingLayer(BaseLayerT &BaseLayer) : BaseLayer(BaseLayer) {}

  /// @@brief Add the given module set to the JIT.
  /// @@return A handle for the added modules.
  template <typename ModuleSetT, typename MemoryManagerPtrT,
            typename SymbolResolverPtrT>
  ModuleSetHandleT addModuleSet(ModuleSetT Ms,
                                MemoryManagerPtrT MemMgr,
                                SymbolResolverPtrT Resolver) {
    return BaseLayer.addModuleSet(std::move(Ms), std::move(MemMgr),
                                  std::move(Resolver));
  }

  /// @@brief Remove the module set associated with the handle H.
  void removeModuleSet(ModuleSetHandleT H) { BaseLayer.removeModuleSet(H); }

  /// @@brief Manually set the address to return for the given symbol.
  void setGlobalMapping(const std::string &Name, TargetAddress Addr) {
    SymbolTable[Name] = Addr;
  }

  /// @@brief Remove the given symbol from the global mapping.
  void eraseGlobalMapping(const std::string &Name) {
    SymbolTable.erase(Name);
  }

  /// @@brief Search for the given named symbol.
  ///
  ///          This method will first search the local symbol table, returning
  ///        any symbol found there. If the symbol is not found in the local
  ///        table then this call will be passed through to the base layer.
  ///
  /// @@param Name The name of the symbol to search for.
  /// @@param ExportedSymbolsOnly If true, search only for exported symbols.
  /// @@return A handle for the given named symbol, if it exists.
  JITSymbol findSymbol(const std::string &Name, bool ExportedSymbolsOnly) {
    auto I = SymbolTable.find(Name);
    if (I != SymbolTable.end())
      return JITSymbol(I->second, JITSymbolFlags::Exported);
    return BaseLayer.findSymbol(Name, ExportedSymbolsOnly);
  }

  /// @@brief Get the address of the given symbol in the context of the set of
  ///        modules represented by the handle H. This call is forwarded to the
  ///        base layer's implementation.
  /// @@param H The handle for the module set to search in.
  /// @@param Name The name of the symbol to search for.
  /// @@param ExportedSymbolsOnly If true, search only for exported symbols.
  /// @@return A handle for the given named symbol, if it is found in the
  ///         given module set.
  JITSymbol findSymbolIn(ModuleSetHandleT H, const std::string &Name,
                         bool ExportedSymbolsOnly) {
    return BaseLayer.findSymbolIn(H, Name, ExportedSymbolsOnly);
  }

  /// @@brief Immediately emit and finalize the module set represented by the
  ///        given handle.
  /// @@param H Handle for module set to emit/finalize.
  void emitAndFinalize(ModuleSetHandleT H) {
    BaseLayer.emitAndFinalize(H);
  }

private:
  BaseLayerT &BaseLayer;
  std::map<std::string, TargetAddress> SymbolTable;
};

} // End namespace orc.
} // End namespace llvm.

#endif // LLVM_EXECUTIONENGINE_ORC_GLOBALMAPPINGLAYER_H
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d18 1
a18 1
#include "llvm/ExecutionEngine/JITSymbol.h"
d55 1
a55 1
  void setGlobalMapping(const std::string &Name, JITTargetAddress Addr) {
d102 1
a102 1
  std::map<std::string, JITTargetAddress> SymbolTable;
@


1.1.1.3
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d1 1
a1 1
//===- GlobalMappingLayer.h - Run all IR through a functor ------*- C++ -*-===//
a19 2
#include <memory>
#include <string>
a21 4

class Module;
class JITSymbolResolver;

d34 2
a35 3

  /// @@brief Handle to an added module.
  using ModuleHandleT = typename BaseLayerT::ModuleHandleT;
d40 1
a40 1
  /// @@brief Add the given module to the JIT.
d42 7
a48 3
  ModuleHandleT addModule(std::shared_ptr<Module> M,
                          std::shared_ptr<JITSymbolResolver> Resolver) {
    return BaseLayer.addModule(std::move(M), std::move(Resolver));
d52 1
a52 1
  void removeModule(ModuleHandleT H) { BaseLayer.removeModule(H); }
d80 2
a81 2
  /// @@brief Get the address of the given symbol in the context of the of the
  ///        module represented by the handle H. This call is forwarded to the
d83 1
a83 1
  /// @@param H The handle for the module to search in.
d87 2
a88 2
  ///         given module.
  JITSymbol findSymbolIn(ModuleHandleT H, const std::string &Name,
d96 1
a96 1
  void emitAndFinalize(ModuleHandleT H) {
d105 2
a106 2
} // end namespace orc
} // end namespace llvm
@


