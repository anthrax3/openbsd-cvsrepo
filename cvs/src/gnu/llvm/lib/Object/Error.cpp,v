head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.3
	OPENBSD_6_2:1.1.1.3.0.2
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.01;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.33;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- Error.cpp - system_error extensions for Object -----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This defines a new error_category for the Object library.
//
//===----------------------------------------------------------------------===//

#include "llvm/Object/Error.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/ManagedStatic.h"

using namespace llvm;
using namespace object;

namespace {
class _object_error_category : public std::error_category {
public:
  const char* name() const LLVM_NOEXCEPT override;
  std::string message(int ev) const override;
};
}

const char *_object_error_category::name() const LLVM_NOEXCEPT {
  return "llvm.object";
}

std::string _object_error_category::message(int EV) const {
  object_error E = static_cast<object_error>(EV);
  switch (E) {
  case object_error::arch_not_found:
    return "No object file for requested architecture";
  case object_error::invalid_file_type:
    return "The file was not recognized as a valid object file";
  case object_error::parse_failed:
    return "Invalid data was encountered while parsing the file";
  case object_error::unexpected_eof:
    return "The end of the file was unexpectedly encountered";
  case object_error::string_table_non_null_end:
    return "String table must end with a null terminator";
  case object_error::invalid_section_index:
    return "Invalid section index";
  case object_error::bitcode_section_not_found:
    return "Bitcode section not found in object file";
  case object_error::elf_invalid_dynamic_table_size:
    return "Invalid dynamic table size";
  case object_error::macho_small_load_command:
    return "Mach-O load command with size < 8 bytes";
  case object_error::macho_load_segment_too_many_sections:
    return "Mach-O segment load command contains too many sections";
  case object_error::macho_load_segment_too_small:
    return "Mach-O segment load command size is too small";
  }
  llvm_unreachable("An enumerator of object_error does not have a message "
                   "defined.");
}

static ManagedStatic<_object_error_category> error_category;

const std::error_category &object::object_category() {
  return *error_category;
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a21 3
// FIXME: This class is only here to support the transition to llvm::Error. It
// will be removed once this transition is complete. Clients should prefer to
// deal with the Error value directly, rather than converting to error_code.
d50 8
a62 14
char BinaryError::ID = 0;
char GenericBinaryError::ID = 0;

GenericBinaryError::GenericBinaryError(Twine Msg) : Msg(Msg.str()) {}

GenericBinaryError::GenericBinaryError(Twine Msg, object_error ECOverride)
    : Msg(Msg.str()) {
  setErrorCode(make_error_code(ECOverride));
}

void GenericBinaryError::log(raw_ostream &OS) const {
  OS << Msg;
}

a66 18
}

llvm::Error llvm::object::isNotObjectErrorInvalidFileType(llvm::Error Err) {
  if (auto Err2 =
       handleErrors(std::move(Err),
         [](std::unique_ptr<ECError> M) {
           // Try to handle 'M'. If successful, return a success value from
           // the handler.
           if (M->convertToErrorCode() == object_error::invalid_file_type)
             return Error::success();

           // We failed to handle 'M' - return it from the handler.
           // This value will be passed back from catchErrors and
           // wind up in Err2, where it will be returned from this function.
           return Error(std::move(M));
         }))
    return Err2;
  return Err;
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d27 1
a27 1
  const char* name() const noexcept override;
d32 1
a32 1
const char *_object_error_category::name() const noexcept {
a52 2
  case object_error::invalid_symbol_index:
    return "Invalid symbol index";
d80 12
a91 11
          handleErrors(std::move(Err), [](std::unique_ptr<ECError> M) -> Error {
            // Try to handle 'M'. If successful, return a success value from
            // the handler.
            if (M->convertToErrorCode() == object_error::invalid_file_type)
              return Error::success();

            // We failed to handle 'M' - return it from the handler.
            // This value will be passed back from catchErrors and
            // wind up in Err2, where it will be returned from this function.
            return Error(std::move(M));
          }))
@


