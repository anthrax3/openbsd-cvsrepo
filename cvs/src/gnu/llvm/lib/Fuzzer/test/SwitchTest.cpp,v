head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.47.02;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.02;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.09;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@// Simple test for a fuzzer. The fuzzer must find the interesting switch value.
#include <cstdint>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cstddef>

static volatile int Sink;

template<class T>
bool Switch(const uint8_t *Data, size_t Size) {
  T X;
  if (Size < sizeof(X)) return false;
  memcpy(&X, Data, sizeof(X));
  switch (X) {
    case 1: Sink = __LINE__; break;
    case 101: Sink = __LINE__; break;
    case 1001: Sink = __LINE__; break;
    case 10001: Sink = __LINE__; break;
    case 100001: Sink = __LINE__; break;
    case 1000001: Sink = __LINE__; break;
    case 10000001: Sink = __LINE__; break;
    case 100000001: return true;
  }
  return false;
}

bool ShortSwitch(const uint8_t *Data, size_t Size) {
  short X;
  if (Size < sizeof(short)) return false;
  memcpy(&X, Data, sizeof(short));
  switch(X) {
    case 42: Sink = __LINE__; break;
    case 402: Sink = __LINE__; break;
    case 4002: Sink = __LINE__; break;
    case 5002: Sink = __LINE__; break;
    case 7002: Sink = __LINE__; break;
    case 9002: Sink = __LINE__; break;
    case 14002: Sink = __LINE__; break;
    case 21402: return true;
  }
  return false;
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  if (Size >= 4  && Switch<int>(Data, Size) &&
      Size >= 12 && Switch<uint64_t>(Data + 4, Size - 4) &&
      Size >= 14 && ShortSwitch(Data + 12, 2)
    ) {
    fprintf(stderr, "BINGO; Found the target, exiting\n");
    exit(1);
  }
  return 0;
}

@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a0 3
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.

@

