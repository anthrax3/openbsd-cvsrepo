head	1.4;
access;
symbols
	LLVM_5_0_0:1.1.1.3
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.4
date	2017.10.04.20.51.27;	author patrick;	state Exp;
branches;
next	1.3;
commitid	s9g4O09EGmKo3yXv;

1.3
date	2017.06.21.16.51.07;	author tedu;	state Exp;
branches;
next	1.2;
commitid	BWqr5ME4itzuAem5;

1.2
date	2017.05.29.14.37.51;	author tedu;	state Exp;
branches;
next	1.1;
commitid	koW1qjoAcPcX7mmY;

1.1
date	2016.09.03.22.47.02;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.02;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.10;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.10.04.20.28.09;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.4
log
@Merge LLVM 5.0.0 release.
@
text
@//===- MCAsmInfoELF.cpp - ELF asm properties ------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines target asm properties related what form asm statements
// should take in general on ELF-based targets
//
//===----------------------------------------------------------------------===//

#include "llvm/MC/MCAsmInfoELF.h"
#include "llvm/BinaryFormat/ELF.h"
#include "llvm/MC/MCContext.h"
#include "llvm/MC/MCSectionELF.h"

using namespace llvm;

void MCAsmInfoELF::anchor() {}

MCSection *MCAsmInfoELF::getNonexecutableStackSection(MCContext &Ctx) const {
  if (!UsesNonexecutableStackSection)
    return nullptr;
  return Ctx.getELFSection(".note.GNU-stack", ELF::SHT_PROGBITS, 0);
}

MCAsmInfoELF::MCAsmInfoELF() {
  HasIdentDirective = false;
  WeakRefDirective = "\t.weak\t";
  PrivateGlobalPrefix = ".L";
  PrivateLabelPrefix = ".L";
}
@


1.3
log
@For a decade or more, we've patched gcc to make -fno-ident the default.
clang doesn't seem to have a command line option for the feature,
so just hard wire it off. We don't need advertisements in our binaries.
ok deraadt
@
text
@d1 1
a1 1
//===-- MCAsmInfoELF.cpp - ELF asm properties -------------------*- C++ -*-===//
d16 1
d19 1
a19 1
#include "llvm/Support/ELF.h"
d22 1
a22 1
void MCAsmInfoELF::anchor() { }
a34 1
  UsesNonexecutableStackSection = false;
@


1.2
log
@openbsd does not use nonexec stack segment header hints.
in fact, false is a much better default for UsesNonexecutableStackSection.
platforms that require it can reenable, instead, saving the rest of us an
unnecessary program header (causes trouble for some special binaries).
ok kettenis
@
text
@d30 1
a30 1
  HasIdentDirective = true;
@


1.1
log
@Initial revision
@
text
@d24 2
d34 1
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a23 2
  if (!UsesNonexecutableStackSection)
    return nullptr;
a31 1
  UsesNonexecutableStackSection = true;
@


1.1.1.3
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d1 1
a1 1
//===- MCAsmInfoELF.cpp - ELF asm properties ------------------------------===//
a15 1
#include "llvm/BinaryFormat/ELF.h"
d18 1
a18 1

d21 1
a21 1
void MCAsmInfoELF::anchor() {}
d34 1
@


