head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.1
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.35;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- InfoStreamBuilder.cpp - PDB Info Stream Creation ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "llvm/DebugInfo/PDB/Raw/InfoStreamBuilder.h"

#include "llvm/DebugInfo/CodeView/StreamWriter.h"
#include "llvm/DebugInfo/PDB/Raw/InfoStream.h"
#include "llvm/DebugInfo/PDB/Raw/MappedBlockStream.h"
#include "llvm/DebugInfo/PDB/Raw/RawError.h"

using namespace llvm;
using namespace llvm::codeview;
using namespace llvm::pdb;

InfoStreamBuilder::InfoStreamBuilder() {}

void InfoStreamBuilder::setVersion(PdbRaw_ImplVer V) { Ver = V; }

void InfoStreamBuilder::setSignature(uint32_t S) { Sig = S; }

void InfoStreamBuilder::setAge(uint32_t A) { Age = A; }

void InfoStreamBuilder::setGuid(PDB_UniqueId G) { Guid = G; }

NameMapBuilder &InfoStreamBuilder::getNamedStreamsBuilder() {
  return NamedStreams;
}

uint32_t InfoStreamBuilder::calculateSerializedLength() const {
  return sizeof(InfoStream::HeaderInfo) +
         NamedStreams.calculateSerializedLength();
}

Expected<std::unique_ptr<InfoStream>> InfoStreamBuilder::build(PDBFile &File) {
  if (!Ver.hasValue())
    return make_error<RawError>(raw_error_code::unspecified,
                                "Missing PDB Stream Version");
  if (!Sig.hasValue())
    return make_error<RawError>(raw_error_code::unspecified,
                                "Missing PDB Stream Signature");
  if (!Age.hasValue())
    return make_error<RawError>(raw_error_code::unspecified,
                                "Missing PDB Stream Age");
  if (!Guid.hasValue())
    return make_error<RawError>(raw_error_code::unspecified,
                                "Missing PDB Stream Guid");

  auto InfoS = MappedBlockStream::createIndexedStream(StreamPDB, File);
  if (!InfoS)
    return InfoS.takeError();
  auto Info = llvm::make_unique<InfoStream>(std::move(*InfoS));
  Info->Version = *Ver;
  Info->Signature = *Sig;
  Info->Age = *Age;
  Info->Guid = *Guid;
  auto NS = NamedStreams.build();
  if (!NS)
    return NS.takeError();
  Info->NamedStreams = **NS;
  return std::move(Info);
}
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d12 1
a12 3
#include "llvm/DebugInfo/MSF/MSFBuilder.h"
#include "llvm/DebugInfo/MSF/MappedBlockStream.h"
#include "llvm/DebugInfo/MSF/StreamWriter.h"
d14 1
a15 1
#include "llvm/DebugInfo/PDB/Raw/RawTypes.h"
a18 1
using namespace llvm::msf;
d21 1
a21 2
InfoStreamBuilder::InfoStreamBuilder(msf::MSFBuilder &Msf)
    : Msf(Msf), Ver(PdbRaw_ImplVer::PdbImplVC70), Sig(-1), Age(0) {}
d36 2
a37 1
  return sizeof(InfoStreamHeader) + NamedStreams.calculateSerializedLength();
d40 27
a66 22
Error InfoStreamBuilder::finalizeMsfLayout() {
  uint32_t Length = calculateSerializedLength();
  if (auto EC = Msf.setStreamSize(StreamPDB, Length))
    return EC;
  return Error::success();
}

Error InfoStreamBuilder::commit(const msf::MSFLayout &Layout,
                                const msf::WritableStream &Buffer) const {
  auto InfoS =
      WritableMappedBlockStream::createIndexedStream(Layout, Buffer, StreamPDB);
  StreamWriter Writer(*InfoS);

  InfoStreamHeader H;
  H.Age = Age;
  H.Signature = Sig;
  H.Version = Ver;
  H.Guid = Guid;
  if (auto EC = Writer.writeObject(H))
    return EC;

  return NamedStreams.commit(Writer);
@

