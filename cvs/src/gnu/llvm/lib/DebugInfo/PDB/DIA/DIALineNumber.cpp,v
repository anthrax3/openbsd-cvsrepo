head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.6
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@//===- DIALineNumber.cpp - DIA implementation of IPDBLineNumber -*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "llvm/DebugInfo/PDB/DIA/DIALineNumber.h"

using namespace llvm;

DIALineNumber::DIALineNumber(CComPtr<IDiaLineNumber> DiaLineNumber)
    : LineNumber(DiaLineNumber) {}

uint32_t DIALineNumber::getLineNumber() const {
  DWORD Line = 0;
  return (S_OK == LineNumber->get_lineNumber(&Line)) ? Line : 0;
}

uint32_t DIALineNumber::getLineNumberEnd() const {
  DWORD LineEnd = 0;
  return (S_OK == LineNumber->get_lineNumberEnd(&LineEnd)) ? LineEnd : 0;
}

uint32_t DIALineNumber::getColumnNumber() const {
  DWORD Column = 0;
  return (S_OK == LineNumber->get_columnNumber(&Column)) ? Column : 0;
}

uint32_t DIALineNumber::getColumnNumberEnd() const {
  DWORD ColumnEnd = 0;
  return (S_OK == LineNumber->get_columnNumberEnd(&ColumnEnd)) ? ColumnEnd : 0;
}

uint32_t DIALineNumber::getAddressSection() const {
  DWORD Section = 0;
  return (S_OK == LineNumber->get_addressSection(&Section)) ? Section : 0;
}

uint32_t DIALineNumber::getAddressOffset() const {
  DWORD Offset = 0;
  return (S_OK == LineNumber->get_addressOffset(&Offset)) ? Offset : 0;
}

uint32_t DIALineNumber::getRelativeVirtualAddress() const {
  DWORD RVA = 0;
  return (S_OK == LineNumber->get_relativeVirtualAddress(&RVA)) ? RVA : 0;
}

uint64_t DIALineNumber::getVirtualAddress() const {
  ULONGLONG Addr = 0;
  return (S_OK == LineNumber->get_virtualAddress(&Addr)) ? Addr : 0;
}

uint32_t DIALineNumber::getLength() const {
  DWORD Length = 0;
  return (S_OK == LineNumber->get_length(&Length)) ? Length : 0;
}

uint32_t DIALineNumber::getSourceFileId() const {
  DWORD Id = 0;
  return (S_OK == LineNumber->get_sourceFileId(&Id)) ? Id : 0;
}

uint32_t DIALineNumber::getCompilandId() const {
  DWORD Id = 0;
  return (S_OK == LineNumber->get_compilandId(&Id)) ? Id : 0;
}

bool DIALineNumber::isStatement() const {
  BOOL Statement = 0;
  return (S_OK == LineNumber->get_statement(&Statement)) ? Statement : false;
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a12 1
using namespace llvm::pdb;
@

