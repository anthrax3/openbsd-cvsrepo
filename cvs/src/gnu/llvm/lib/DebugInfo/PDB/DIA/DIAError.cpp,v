head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.1
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.35;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@#include "llvm/DebugInfo/PDB/DIA/DIAError.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/ManagedStatic.h"

using namespace llvm;
using namespace llvm::pdb;

// FIXME: This class is only here to support the transition to llvm::Error. It
// will be removed once this transition is complete. Clients should prefer to
// deal with the Error value directly, rather than converting to error_code.
class DIAErrorCategory : public std::error_category {
public:
  const char *name() const LLVM_NOEXCEPT override { return "llvm.pdb.dia"; }

  std::string message(int Condition) const override {
    switch (static_cast<dia_error_code>(Condition)) {
    case dia_error_code::could_not_create_impl:
      return "Failed to connect to DIA at runtime.  Verify that Visual Studio "
             "is properly installed, or that msdiaXX.dll is in your PATH.";
    case dia_error_code::invalid_file_format:
      return "Unable to load PDB.  The file has an unrecognized format.";
    case dia_error_code::invalid_parameter:
      return "The parameter is incorrect.";
    case dia_error_code::already_loaded:
      return "Unable to load the PDB or EXE, because it is already loaded.";
    case dia_error_code::debug_info_mismatch:
      return "The PDB file and the EXE file do not match.";
    case dia_error_code::unspecified:
      return "An unknown error has occurred.";
    }
    llvm_unreachable("Unrecognized DIAErrorCode");
  }
};

static ManagedStatic<DIAErrorCategory> Category;

char DIAError::ID = 0;

DIAError::DIAError(dia_error_code C) : DIAError(C, "") {}

DIAError::DIAError(const std::string &Context)
    : DIAError(dia_error_code::unspecified, Context) {}

DIAError::DIAError(dia_error_code C, const std::string &Context) : Code(C) {
  ErrMsg = "DIA Error: ";
  std::error_code EC = convertToErrorCode();
  if (Code != dia_error_code::unspecified)
    ErrMsg += EC.message() + "  ";
  if (!Context.empty())
    ErrMsg += Context;
}

void DIAError::log(raw_ostream &OS) const { OS << ErrMsg << "\n"; }

const std::string &DIAError::getErrorMessage() const { return ErrMsg; }

std::error_code DIAError::convertToErrorCode() const {
  return std::error_code(static_cast<int>(Code), *Category);
}
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d13 1
a13 1
  const char *name() const noexcept override { return "llvm.pdb.dia"; }
d41 1
a41 1
DIAError::DIAError(StringRef Context)
d44 1
a44 1
DIAError::DIAError(dia_error_code C, StringRef Context) : Code(C) {
d47 2
a48 1
  ErrMsg += EC.message() + "  ";
d55 1
a55 1
StringRef DIAError::getErrorMessage() const { return ErrMsg; }
@

