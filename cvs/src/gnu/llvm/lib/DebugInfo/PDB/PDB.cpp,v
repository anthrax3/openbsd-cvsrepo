head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.02;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.35;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- PDB.cpp - base header file for creating a PDB reader -----*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "llvm/DebugInfo/PDB/PDB.h"

#include "llvm/ADT/StringRef.h"
#include "llvm/Config/config.h"
#include "llvm/DebugInfo/PDB/IPDBSession.h"
#include "llvm/DebugInfo/PDB/PDB.h"

#if HAVE_DIA_SDK
#include "llvm/DebugInfo/PDB/DIA/DIASession.h"
#endif

using namespace llvm;

PDB_ErrorCode llvm::loadDataForPDB(PDB_ReaderType Type, StringRef Path,
                                   std::unique_ptr<IPDBSession> &Session) {
  // Create the correct concrete instance type based on the value of Type.
#if HAVE_DIA_SDK
  return DIASession::createFromPdb(Path, Session);
#endif
  return PDB_ErrorCode::NoPdbImpl;
}

PDB_ErrorCode llvm::loadDataForEXE(PDB_ReaderType Type, StringRef Path,
                                   std::unique_ptr<IPDBSession> &Session) {
  // Create the correct concrete instance type based on the value of Type.
#if HAVE_DIA_SDK
  return DIASession::createFromExe(Path, Session);
#endif
  return PDB_ErrorCode::NoPdbImpl;
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a13 1
#include "llvm/DebugInfo/PDB/GenericError.h"
d16 1
a19 3
#include "llvm/DebugInfo/PDB/Raw/RawSession.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/ManagedStatic.h"
a21 1
using namespace llvm::pdb;
d23 2
a24 2
Error llvm::pdb::loadDataForPDB(PDB_ReaderType Type, StringRef Path,
                                std::unique_ptr<IPDBSession> &Session) {
a25 3
  if (Type == PDB_ReaderType::Raw)
    return RawSession::createFromPdb(Path, Session);

a27 2
#else
  return llvm::make_error<GenericError>("DIA is not installed on the system");
d29 1
d32 2
a33 2
Error llvm::pdb::loadDataForEXE(PDB_ReaderType Type, StringRef Path,
                                std::unique_ptr<IPDBSession> &Session) {
a34 3
  if (Type == PDB_ReaderType::Raw)
    return RawSession::createFromExe(Path, Session);

a36 2
#else
  return llvm::make_error<GenericError>("DIA is not installed on the system");
d38 1
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d17 1
a17 1
#if LLVM_ENABLE_DIA_SDK
d33 1
a33 1
#if LLVM_ENABLE_DIA_SDK
d46 1
a46 1
#if LLVM_ENABLE_DIA_SDK
@


