head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.6
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.1
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.01.24.08.33.35;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===- ModuleSubstreamVisitor.cpp -------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "llvm/DebugInfo/CodeView/ModuleSubstreamVisitor.h"

using namespace llvm;
using namespace llvm::codeview;

Error IModuleSubstreamVisitor::visitSymbols(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::Symbols, Data);
}
Error IModuleSubstreamVisitor::visitLines(StreamRef Data,
                                          const LineSubstreamHeader *Header,
                                          const LineInfoArray &Lines) {
  return visitUnknown(ModuleSubstreamKind::Lines, Data);
}
Error IModuleSubstreamVisitor::visitStringTable(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::StringTable, Data);
}
Error IModuleSubstreamVisitor::visitFileChecksums(
    StreamRef Data, const FileChecksumArray &Checksums) {
  return visitUnknown(ModuleSubstreamKind::FileChecksums, Data);
}
Error IModuleSubstreamVisitor::visitFrameData(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::FrameData, Data);
}
Error IModuleSubstreamVisitor::visitInlineeLines(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::InlineeLines, Data);
}
Error IModuleSubstreamVisitor::visitCrossScopeImports(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::CrossScopeExports, Data);
}
Error IModuleSubstreamVisitor::visitCrossScopeExports(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::CrossScopeImports, Data);
}
Error IModuleSubstreamVisitor::visitILLines(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::ILLines, Data);
}
Error IModuleSubstreamVisitor::visitFuncMDTokenMap(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::FuncMDTokenMap, Data);
}
Error IModuleSubstreamVisitor::visitTypeMDTokenMap(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::TypeMDTokenMap, Data);
}
Error IModuleSubstreamVisitor::visitMergedAssemblyInput(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::MergedAssemblyInput, Data);
}
Error IModuleSubstreamVisitor::visitCoffSymbolRVA(StreamRef Data) {
  return visitUnknown(ModuleSubstreamKind::CoffSymbolRVA, Data);
}

Error llvm::codeview::visitModuleSubstream(const ModuleSubstream &R,
                                           IModuleSubstreamVisitor &V) {
  switch (R.getSubstreamKind()) {
  case ModuleSubstreamKind::Symbols:
    return V.visitSymbols(R.getRecordData());
  case ModuleSubstreamKind::Lines: {
    StreamReader Reader(R.getRecordData());
    const LineSubstreamHeader *Header;
    if (auto EC = Reader.readObject(Header))
      return EC;
    VarStreamArrayExtractor<LineColumnEntry> E(Header);
    LineInfoArray LineInfos(E);
    if (auto EC = Reader.readArray(LineInfos, Reader.bytesRemaining()))
      return EC;
    return V.visitLines(R.getRecordData(), Header, LineInfos);
  }
  case ModuleSubstreamKind::StringTable:
    return V.visitStringTable(R.getRecordData());
  case ModuleSubstreamKind::FileChecksums: {
    StreamReader Reader(R.getRecordData());
    FileChecksumArray Checksums;
    if (auto EC = Reader.readArray(Checksums, Reader.bytesRemaining()))
      return EC;
    return V.visitFileChecksums(R.getRecordData(), Checksums);
  }
  case ModuleSubstreamKind::FrameData:
    return V.visitFrameData(R.getRecordData());
  case ModuleSubstreamKind::InlineeLines:
    return V.visitInlineeLines(R.getRecordData());
  case ModuleSubstreamKind::CrossScopeImports:
    return V.visitCrossScopeImports(R.getRecordData());
  case ModuleSubstreamKind::CrossScopeExports:
    return V.visitCrossScopeExports(R.getRecordData());
  case ModuleSubstreamKind::ILLines:
    return V.visitILLines(R.getRecordData());
  case ModuleSubstreamKind::FuncMDTokenMap:
    return V.visitFuncMDTokenMap(R.getRecordData());
  case ModuleSubstreamKind::TypeMDTokenMap:
    return V.visitTypeMDTokenMap(R.getRecordData());
  case ModuleSubstreamKind::MergedAssemblyInput:
    return V.visitMergedAssemblyInput(R.getRecordData());
  case ModuleSubstreamKind::CoffSymbolRVA:
    return V.visitCoffSymbolRVA(R.getRecordData());
  default:
    return V.visitUnknown(R.getSubstreamKind(), R.getRecordData());
  }
}
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a10 2
#include "llvm/DebugInfo/MSF/StreamReader.h"
#include "llvm/DebugInfo/MSF/StreamRef.h"
a13 1
using namespace llvm::msf;
d15 1
a15 1
Error IModuleSubstreamVisitor::visitSymbols(ReadableStreamRef Data) {
d18 1
a18 1
Error IModuleSubstreamVisitor::visitLines(ReadableStreamRef Data,
d23 1
a23 1
Error IModuleSubstreamVisitor::visitStringTable(ReadableStreamRef Data) {
d27 1
a27 1
    ReadableStreamRef Data, const FileChecksumArray &Checksums) {
d30 1
a30 1
Error IModuleSubstreamVisitor::visitFrameData(ReadableStreamRef Data) {
d33 1
a33 1
Error IModuleSubstreamVisitor::visitInlineeLines(ReadableStreamRef Data) {
d36 1
a36 1
Error IModuleSubstreamVisitor::visitCrossScopeImports(ReadableStreamRef Data) {
d39 1
a39 1
Error IModuleSubstreamVisitor::visitCrossScopeExports(ReadableStreamRef Data) {
d42 1
a42 1
Error IModuleSubstreamVisitor::visitILLines(ReadableStreamRef Data) {
d45 1
a45 1
Error IModuleSubstreamVisitor::visitFuncMDTokenMap(ReadableStreamRef Data) {
d48 1
a48 1
Error IModuleSubstreamVisitor::visitTypeMDTokenMap(ReadableStreamRef Data) {
d51 1
a51 2
Error IModuleSubstreamVisitor::visitMergedAssemblyInput(
    ReadableStreamRef Data) {
d54 1
a54 1
Error IModuleSubstreamVisitor::visitCoffSymbolRVA(ReadableStreamRef Data) {
@

