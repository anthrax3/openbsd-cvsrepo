head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.2
	OPENBSD_6_2:1.1.1.1.0.2
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.10.04.20.28.09;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- SyntaxHighlighting.h ------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_DEBUGINFO_SYNTAXHIGHLIGHTING_H
#define LLVM_LIB_DEBUGINFO_SYNTAXHIGHLIGHTING_H

#include "llvm/Support/raw_ostream.h"

namespace llvm {
namespace dwarf {
namespace syntax {

// Symbolic names for various syntax elements.
enum HighlightColor { Address, String, Tag, Attribute, Enumerator, Macro };

/// An RAII object that temporarily switches an output stream to a
/// specific color.
class WithColor {
  llvm::raw_ostream &OS;

public:
  /// To be used like this: WithColor(OS, syntax::String) << "text";
  WithColor(llvm::raw_ostream &OS, enum HighlightColor Type);
  ~WithColor();

  llvm::raw_ostream& get() { return OS; }
  operator llvm::raw_ostream& () { return OS; }
};
}
}
}

#endif
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d1 1
a1 1
//===- SyntaxHighlighting.h -------------------------------------*- C++ -*-===//
d13 2
a15 3

class raw_ostream;

d25 1
a25 1
  raw_ostream &OS;
d29 1
a29 1
  WithColor(raw_ostream &OS, enum HighlightColor Type);
d32 2
a33 2
  raw_ostream& get() { return OS; }
  operator raw_ostream& () { return OS; }
d35 3
d39 1
a39 6
} // end namespace syntax
} // end namespace dwarf

} // end namespace llvm

#endif // LLVM_LIB_DEBUGINFO_SYNTAXHIGHLIGHTING_H
@

