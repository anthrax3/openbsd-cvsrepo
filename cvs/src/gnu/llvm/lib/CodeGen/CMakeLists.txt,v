head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.09.03.22.46.59;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.46.59;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.00;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.37;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@set(system_libs)
if(CMAKE_HOST_UNIX AND LLVM_ENABLE_THREADS AND HAVE_LIBPTHREAD)
  set(system_libs ${system_libs} pthread)
endif()

add_llvm_library(LLVMCodeGen
  AggressiveAntiDepBreaker.cpp
  AllocationOrder.cpp
  Analysis.cpp
  AtomicExpandPass.cpp
  BasicTargetTransformInfo.cpp
  BranchFolding.cpp
  CalcSpillWeights.cpp
  CallingConvLower.cpp
  CodeGen.cpp
  CodeGenPrepare.cpp
  CoreCLRGC.cpp
  CriticalAntiDepBreaker.cpp
  DFAPacketizer.cpp
  DeadMachineInstructionElim.cpp
  DwarfEHPrepare.cpp
  EarlyIfConversion.cpp
  EdgeBundles.cpp
  ErlangGC.cpp
  ExecutionDepsFix.cpp
  ExpandISelPseudos.cpp
  ExpandPostRAPseudos.cpp
  LiveDebugValues.cpp
  FaultMaps.cpp
  FuncletLayout.cpp
  GCMetadata.cpp
  GCMetadataPrinter.cpp
  GCRootLowering.cpp
  GCStrategy.cpp
  GlobalMerge.cpp
  IfConversion.cpp
  ImplicitNullChecks.cpp
  InlineSpiller.cpp
  InterferenceCache.cpp
  InterleavedAccessPass.cpp
  IntrinsicLowering.cpp
  LLVMTargetMachine.cpp
  LatencyPriorityQueue.cpp
  LexicalScopes.cpp
  LiveDebugVariables.cpp
  LiveInterval.cpp
  LiveIntervalAnalysis.cpp
  LiveIntervalUnion.cpp
  LiveRangeCalc.cpp
  LiveRangeEdit.cpp
  LiveRegMatrix.cpp
  LivePhysRegs.cpp
  LiveStackAnalysis.cpp
  LiveVariables.cpp
  LocalStackSlotAllocation.cpp
  MachineBasicBlock.cpp
  MachineBlockFrequencyInfo.cpp
  MachineBlockPlacement.cpp
  MachineBranchProbabilityInfo.cpp
  MachineCSE.cpp
  MachineCombiner.cpp
  MachineCopyPropagation.cpp
  MachineDominators.cpp
  MachineDominanceFrontier.cpp
  MachineFunction.cpp
  MachineFunctionAnalysis.cpp
  MachineFunctionPass.cpp
  MachineFunctionPrinterPass.cpp
  MachineInstr.cpp
  MachineInstrBundle.cpp
  MachineLICM.cpp
  MachineLoopInfo.cpp
  MachineModuleInfo.cpp
  MachineModuleInfoImpls.cpp
  MachinePassRegistry.cpp
  MachinePostDominators.cpp
  MachineRegisterInfo.cpp
  MachineRegionInfo.cpp
  MachineSSAUpdater.cpp
  MachineScheduler.cpp
  MachineSink.cpp
  MachineTraceMetrics.cpp
  MachineVerifier.cpp
  MIRPrinter.cpp
  MIRPrintingPass.cpp
  OcamlGC.cpp
  OptimizePHIs.cpp
  PHIElimination.cpp
  PHIEliminationUtils.cpp
  ParallelCG.cpp
  Passes.cpp
  PeepholeOptimizer.cpp
  PostRASchedulerList.cpp
  ProcessImplicitDefs.cpp
  PrologEpilogInserter.cpp
  PseudoSourceValue.cpp
  RegAllocBase.cpp
  RegAllocBasic.cpp
  RegAllocFast.cpp
  RegAllocGreedy.cpp
  RegAllocPBQP.cpp
  RegisterClassInfo.cpp
  RegisterCoalescer.cpp
  RegisterPressure.cpp
  RegisterScavenging.cpp
  ScheduleDAG.cpp
  ScheduleDAGInstrs.cpp
  ScheduleDAGPrinter.cpp
  ScoreboardHazardRecognizer.cpp
  ShrinkWrap.cpp
  ShadowStackGC.cpp
  ShadowStackGCLowering.cpp
  SjLjEHPrepare.cpp
  SlotIndexes.cpp
  SpillPlacement.cpp
  SplitKit.cpp
  StackColoring.cpp
  StackProtector.cpp
  StackSlotColoring.cpp
  StackMapLivenessAnalysis.cpp
  StackMaps.cpp
  StatepointExampleGC.cpp
  TailDuplication.cpp
  TargetFrameLoweringImpl.cpp
  TargetInstrInfo.cpp
  TargetLoweringBase.cpp
  TargetLoweringObjectFileImpl.cpp
  TargetOptionsImpl.cpp
  TargetRegisterInfo.cpp
  TargetSchedule.cpp
  TwoAddressInstructionPass.cpp
  UnreachableBlockElim.cpp
  VirtRegMap.cpp
  WinEHPrepare.cpp

  ADDITIONAL_HEADER_DIRS
  ${LLVM_MAIN_INCLUDE_DIR}/llvm/CodeGen
  ${LLVM_MAIN_INCLUDE_DIR}/llvm/CodeGen/PBQP

  LINK_LIBS ${system_libs}
  )

add_dependencies(LLVMCodeGen intrinsics_gen)

add_subdirectory(SelectionDAG)
add_subdirectory(AsmPrinter)
add_subdirectory(MIRParser)
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d1 5
a12 1
  BuiltinGCs.cpp
d17 1
d19 1
a20 2
  DetectDeadLanes.cpp
  DFAPacketizer.cpp
d24 1
d28 1
d42 1
a44 1
  LiveDebugValues.cpp
d46 1
a47 1
  LiveInterval.cpp
a48 1
  LivePhysRegs.cpp
d52 1
a54 1
  LLVMTargetMachine.cpp
a55 1
  LowerEmuTLS.cpp
d60 1
d63 1
a63 1
  MachineCSE.cpp
d65 1
a65 1
  MachineDominators.cpp
a66 1
  MachineFunction.cpp
d69 1
a70 1
  MachineInstr.cpp
d77 1
d79 1
a79 1
  MachineRegisterInfo.cpp
a81 1
  MachineSSAUpdater.cpp
a83 1
  PatchableFunction.cpp
d86 1
d88 2
d91 1
a92 3
  PHIElimination.cpp
  PHIEliminationUtils.cpp
  PostRAHazardRecognizer.cpp
a93 1
  PreISelIntrinsicLowering.cpp
a105 7
  RenameIndependentSubregs.cpp
  RegisterUsageInfo.cpp
  RegUsageInfoCollector.cpp
  RegUsageInfoPropagate.cpp
  SafeStack.cpp
  SafeStackColoring.cpp
  SafeStackLayout.cpp
d110 2
a112 1
  ShrinkWrap.cpp
d118 2
d122 1
a122 2
  StackProtector.cpp
  StackSlotColoring.cpp
a123 1
  TailDuplicator.cpp
a128 1
  TargetPassConfig.cpp
a134 1
  XRayInstrumentation.cpp
d140 1
a140 1
  LINK_LIBS ${PTHREAD_LIB}
a147 1
add_subdirectory(GlobalISel)
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@a7 1
  BranchRelaxation.cpp
a12 1
  CountingFunctionInserter.cpp
a50 1
  LowLevelType.cpp
d61 1
a71 1
  MachinePipeliner.cpp
a106 1
  ResetMachineFunctionPass.cpp
a134 1
  TargetSubtargetInfo.cpp
d146 1
d148 1
a148 3
  DEPENDS
  intrinsics_gen
  )
@


