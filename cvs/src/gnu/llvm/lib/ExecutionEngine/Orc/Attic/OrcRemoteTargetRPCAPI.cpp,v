head	1.2;
access;
symbols
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2017.01.24.08.39.07;	author patrick;	state dead;
branches;
next	1.1;
commitid	wUhrDWmTVlrk8aou;

1.1
date	2016.09.03.22.47.02;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.02;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.09;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.2
log
@Merge LLVM 4.0.0 rc1
@
text
@//===------- OrcRemoteTargetRPCAPI.cpp - ORC Remote API utilities ---------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "llvm/ExecutionEngine/Orc/OrcRemoteTargetRPCAPI.h"

namespace llvm {
namespace orc {
namespace remote {

const char *OrcRemoteTargetRPCAPI::getJITProcIdName(JITProcId Id) {
  switch (Id) {
  case InvalidId:
    return "*** Invalid JITProcId ***";
  case CallIntVoidId:
    return "CallIntVoid";
  case CallIntVoidResponseId:
    return "CallIntVoidResponse";
  case CallMainId:
    return "CallMain";
  case CallMainResponseId:
    return "CallMainResponse";
  case CallVoidVoidId:
    return "CallVoidVoid";
  case CallVoidVoidResponseId:
    return "CallVoidVoidResponse";
  case CreateRemoteAllocatorId:
    return "CreateRemoteAllocator";
  case CreateIndirectStubsOwnerId:
    return "CreateIndirectStubsOwner";
  case DestroyRemoteAllocatorId:
    return "DestroyRemoteAllocator";
  case DestroyIndirectStubsOwnerId:
    return "DestroyIndirectStubsOwner";
  case EmitIndirectStubsId:
    return "EmitIndirectStubs";
  case EmitIndirectStubsResponseId:
    return "EmitIndirectStubsResponse";
  case EmitResolverBlockId:
    return "EmitResolverBlock";
  case EmitTrampolineBlockId:
    return "EmitTrampolineBlock";
  case EmitTrampolineBlockResponseId:
    return "EmitTrampolineBlockResponse";
  case GetSymbolAddressId:
    return "GetSymbolAddress";
  case GetSymbolAddressResponseId:
    return "GetSymbolAddressResponse";
  case GetRemoteInfoId:
    return "GetRemoteInfo";
  case GetRemoteInfoResponseId:
    return "GetRemoteInfoResponse";
  case ReadMemId:
    return "ReadMem";
  case ReadMemResponseId:
    return "ReadMemResponse";
  case ReserveMemId:
    return "ReserveMem";
  case ReserveMemResponseId:
    return "ReserveMemResponse";
  case RequestCompileId:
    return "RequestCompile";
  case RequestCompileResponseId:
    return "RequestCompileResponse";
  case SetProtectionsId:
    return "SetProtections";
  case TerminateSessionId:
    return "TerminateSession";
  case WriteMemId:
    return "WriteMem";
  case WritePtrId:
    return "WritePtr";
  };
  return nullptr;
}
}
}
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d16 1
a16 5
#define FUNCNAME(X) \
  case X ## Id: \
  return #X

const char *OrcRemoteTargetRPCAPI::getJITFuncIdName(JITFuncId Id) {
d19 59
a77 22
    return "*** Invalid JITFuncId ***";
  FUNCNAME(CallIntVoid);
  FUNCNAME(CallMain);
  FUNCNAME(CallVoidVoid);
  FUNCNAME(CreateRemoteAllocator);
  FUNCNAME(CreateIndirectStubsOwner);
  FUNCNAME(DeregisterEHFrames);
  FUNCNAME(DestroyRemoteAllocator);
  FUNCNAME(DestroyIndirectStubsOwner);
  FUNCNAME(EmitIndirectStubs);
  FUNCNAME(EmitResolverBlock);
  FUNCNAME(EmitTrampolineBlock);
  FUNCNAME(GetSymbolAddress);
  FUNCNAME(GetRemoteInfo);
  FUNCNAME(ReadMem);
  FUNCNAME(RegisterEHFrames);
  FUNCNAME(ReserveMem);
  FUNCNAME(RequestCompile);
  FUNCNAME(SetProtections);
  FUNCNAME(TerminateSession);
  FUNCNAME(WriteMem);
  FUNCNAME(WritePtr);
d81 3
a83 6

#undef FUNCNAME

} // end namespace remote
} // end namespace orc
} // end namespace llvm
@

