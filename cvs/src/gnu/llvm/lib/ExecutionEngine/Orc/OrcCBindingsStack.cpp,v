head     1.1;
branch   1.1.1;
access   ;
symbols  LLVM_3_8_1:1.1.1.1 LLVM:1.1.1;
locks    ; strict;
comment  @// @;


1.1
date     2016.09.03.22.47.02;  author pascal;  state Exp;
branches 1.1.1.1;
next     ;
commitid        piLU3CHugy63NlaI;

1.1.1.1
date     2016.09.03.22.47.02;  author pascal;  state Exp;
branches ;
next     ;
commitid        piLU3CHugy63NlaI;


desc
@@



1.1
log
@Initial revision
@
text
@//===-------- OrcCBindingsStack.cpp - Orc JIT stack for C bindings --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "OrcCBindingsStack.h"

#include "llvm/ExecutionEngine/Orc/OrcArchitectureSupport.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/DynamicLibrary.h"
#include <cstdio>
#include <system_error>

using namespace llvm;

std::unique_ptr<OrcCBindingsStack::CompileCallbackMgr>
OrcCBindingsStack::createCompileCallbackMgr(Triple T) {
  switch (T.getArch()) {
    default: return nullptr;

    case Triple::x86_64: {
      typedef orc::LocalJITCompileCallbackManager<orc::OrcX86_64> CCMgrT;
      return llvm::make_unique<CCMgrT>(0);
    }
  }
}

OrcCBindingsStack::IndirectStubsManagerBuilder
OrcCBindingsStack::createIndirectStubsMgrBuilder(Triple T) {
  switch (T.getArch()) {
    default: return nullptr;

    case Triple::x86_64:
      return [](){
        return llvm::make_unique<
                 orc::LocalIndirectStubsManager<orc::OrcX86_64>>();
      };
  }
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@
