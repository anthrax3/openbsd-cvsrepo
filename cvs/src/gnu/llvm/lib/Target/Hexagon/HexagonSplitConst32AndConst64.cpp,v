head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.6
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.04;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.26;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//=== HexagonSplitConst32AndConst64.cpp - split CONST32/Const64 into HI/LO ===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// When the compiler is invoked with no small data, for instance, with the -G0
// command line option, then all CONST32_* opcodes should be broken down into
// appropriate LO and HI instructions. This splitting is done by this pass.
// The only reason this is not done in the DAG lowering itself is that there
// is no simple way of getting the register allocator to allot the same hard
// register to the result of LO and HI instructions. This pass is always
// scheduled after register allocation.
//
//===----------------------------------------------------------------------===//

#include "HexagonMachineFunctionInfo.h"
#include "HexagonSubtarget.h"
#include "HexagonTargetMachine.h"
#include "HexagonTargetObjectFile.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/CodeGen/LatencyPriorityQueue.h"
#include "llvm/CodeGen/MachineDominators.h"
#include "llvm/CodeGen/MachineFunctionPass.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineLoopInfo.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/Passes.h"
#include "llvm/CodeGen/ScheduleDAGInstrs.h"
#include "llvm/CodeGen/ScheduleHazardRecognizer.h"
#include "llvm/CodeGen/SchedulerRegistry.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Target/TargetInstrInfo.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Target/TargetRegisterInfo.h"
#include <map>

using namespace llvm;

#define DEBUG_TYPE "xfer"

namespace llvm {
  FunctionPass *createHexagonSplitConst32AndConst64();
  void initializeHexagonSplitConst32AndConst64Pass(PassRegistry&);
}

namespace {

class HexagonSplitConst32AndConst64 : public MachineFunctionPass {
 public:
    static char ID;
    HexagonSplitConst32AndConst64() : MachineFunctionPass(ID) {}

    const char *getPassName() const override {
      return "Hexagon Split Const32s and Const64s";
    }
    bool runOnMachineFunction(MachineFunction &Fn) override;
};


char HexagonSplitConst32AndConst64::ID = 0;


bool HexagonSplitConst32AndConst64::runOnMachineFunction(MachineFunction &Fn) {

  const HexagonTargetObjectFile &TLOF =
      *static_cast<const HexagonTargetObjectFile *>(
          Fn.getTarget().getObjFileLowering());
  if (TLOF.IsSmallDataEnabled())
    return true;

  const TargetInstrInfo *TII = Fn.getSubtarget().getInstrInfo();
  const TargetRegisterInfo *TRI = Fn.getSubtarget().getRegisterInfo();

  // Loop over all of the basic blocks
  for (MachineFunction::iterator MBBb = Fn.begin(), MBBe = Fn.end();
       MBBb != MBBe; ++MBBb) {
    MachineBasicBlock *MBB = &*MBBb;
    // Traverse the basic block
    MachineBasicBlock::iterator MII = MBB->begin();
    MachineBasicBlock::iterator MIE = MBB->end ();
    while (MII != MIE) {
      MachineInstr *MI = MII;
      int Opc = MI->getOpcode();
      if (Opc == Hexagon::CONST32_Int_Real &&
          MI->getOperand(1).isBlockAddress()) {
        int DestReg = MI->getOperand(0).getReg();
        MachineOperand &Symbol = MI->getOperand (1);

        BuildMI (*MBB, MII, MI->getDebugLoc(),
                 TII->get(Hexagon::LO), DestReg).addOperand(Symbol);
        BuildMI (*MBB, MII, MI->getDebugLoc(),
                 TII->get(Hexagon::HI), DestReg).addOperand(Symbol);
        // MBB->erase returns the iterator to the next instruction, which is the
        // one we want to process next
        MII = MBB->erase (MI);
        continue;
      }

      else if (Opc == Hexagon::CONST32_Int_Real ||
               Opc == Hexagon::CONST32_Float_Real) {
        int DestReg = MI->getOperand(0).getReg();

        // We have to convert an FP immediate into its corresponding integer
        // representation
        int64_t ImmValue;
        if (Opc == Hexagon::CONST32_Float_Real) {
          APFloat Val = MI->getOperand(1).getFPImm()->getValueAPF();
          ImmValue = *Val.bitcastToAPInt().getRawData();
        }
        else
          ImmValue = MI->getOperand(1).getImm();

        BuildMI(*MBB, MII, MI->getDebugLoc(),
                 TII->get(Hexagon::A2_tfrsi), DestReg).addImm(ImmValue);
        MII = MBB->erase (MI);
        continue;
      }
      else if (Opc == Hexagon::CONST64_Int_Real ||
               Opc == Hexagon::CONST64_Float_Real) {
        int DestReg = MI->getOperand(0).getReg();

        // We have to convert an FP immediate into its corresponding integer
        // representation
        int64_t ImmValue;
        if (Opc == Hexagon::CONST64_Float_Real) {
          APFloat Val =  MI->getOperand(1).getFPImm()->getValueAPF();
          ImmValue = *Val.bitcastToAPInt().getRawData();
        }
        else
          ImmValue = MI->getOperand(1).getImm();

        unsigned DestLo = TRI->getSubReg(DestReg, Hexagon::subreg_loreg);
        unsigned DestHi = TRI->getSubReg(DestReg, Hexagon::subreg_hireg);

        int32_t LowWord = (ImmValue & 0xFFFFFFFF);
        int32_t HighWord = (ImmValue >> 32) & 0xFFFFFFFF;

        BuildMI(*MBB, MII, MI->getDebugLoc(),
                 TII->get(Hexagon::A2_tfrsi), DestLo).addImm(LowWord);
        BuildMI (*MBB, MII, MI->getDebugLoc(),
                 TII->get(Hexagon::A2_tfrsi), DestHi).addImm(HighWord);
        MII = MBB->erase (MI);
        continue;
      }
      ++MII;
    }
  }

  return true;
}

}

//===----------------------------------------------------------------------===//
//                         Public Constructor Functions
//===----------------------------------------------------------------------===//

FunctionPass *
llvm::createHexagonSplitConst32AndConst64() {
  return new HexagonSplitConst32AndConst64();
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@d24 1
d35 2
d42 1
a63 4
    MachineFunctionProperties getRequiredProperties() const override {
      return MachineFunctionProperties().set(
          MachineFunctionProperties::Property::AllVRegsAllocated);
    }
d75 1
a75 1
  if (TLOF.isSmallDataEnabled())
d89 2
a90 2
      MachineInstr &MI = *MII;
      int Opc = MI.getOpcode();
d92 8
a99 8
          MI.getOperand(1).isBlockAddress()) {
        int DestReg = MI.getOperand(0).getReg();
        MachineOperand &Symbol = MI.getOperand(1);

        BuildMI(*MBB, MII, MI.getDebugLoc(), TII->get(Hexagon::LO), DestReg)
            .addOperand(Symbol);
        BuildMI(*MBB, MII, MI.getDebugLoc(), TII->get(Hexagon::HI), DestReg)
            .addOperand(Symbol);
d102 1
a102 1
        MII = MBB->erase(&MI);
d108 1
a108 1
        int DestReg = MI.getOperand(0).getReg();
d114 1
a114 1
          APFloat Val = MI.getOperand(1).getFPImm()->getValueAPF();
d118 1
a118 1
          ImmValue = MI.getOperand(1).getImm();
d120 3
a122 4
        BuildMI(*MBB, MII, MI.getDebugLoc(), TII->get(Hexagon::A2_tfrsi),
                DestReg)
            .addImm(ImmValue);
        MII = MBB->erase(&MI);
d127 1
a127 1
        int DestReg = MI.getOperand(0).getReg();
d133 1
a133 1
          APFloat Val = MI.getOperand(1).getFPImm()->getValueAPF();
d137 1
a137 1
          ImmValue = MI.getOperand(1).getImm();
d145 5
a149 7
        BuildMI(*MBB, MII, MI.getDebugLoc(), TII->get(Hexagon::A2_tfrsi),
                DestLo)
            .addImm(LowWord);
        BuildMI(*MBB, MII, MI.getDebugLoc(), TII->get(Hexagon::A2_tfrsi),
                DestHi)
            .addImm(HighWord);
        MII = MBB->erase(&MI);
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d11 1
a11 1
// command line option, then all CONST* opcodes should be broken down into
d20 1
d24 2
d28 2
d31 5
d37 1
d50 3
a52 2
  class HexagonSplitConst32AndConst64 : public MachineFunctionPass {
  public:
d54 3
a56 5
    HexagonSplitConst32AndConst64() : MachineFunctionPass(ID) {
      PassRegistry &R = *PassRegistry::getPassRegistry();
      initializeHexagonSplitConst32AndConst64Pass(R);
    }
    StringRef getPassName() const override {
d62 1
a62 1
          MachineFunctionProperties::Property::NoVRegs);
d64 2
a65 2
  };
}
a68 2
INITIALIZE_PASS(HexagonSplitConst32AndConst64, "split-const-for-sdata",
      "Hexagon Split Const32s and Const64s", false, false)
d71 1
d82 40
a121 11
  for (MachineBasicBlock &B : Fn) {
    for (auto I = B.begin(), E = B.end(); I != E; ) {
      MachineInstr &MI = *I;
      ++I;
      unsigned Opc = MI.getOpcode();

      if (Opc == Hexagon::CONST32) {
        unsigned DestReg = MI.getOperand(0).getReg();
        uint64_t ImmValue = MI.getOperand(1).getImm();
        const DebugLoc &DL = MI.getDebugLoc();
        BuildMI(B, MI, DL, TII->get(Hexagon::A2_tfrsi), DestReg)
d123 19
a141 7
        B.erase(&MI);
      } else if (Opc == Hexagon::CONST64) {
        unsigned DestReg = MI.getOperand(0).getReg();
        int64_t ImmValue = MI.getOperand(1).getImm();
        const DebugLoc &DL = MI.getDebugLoc();
        unsigned DestLo = TRI->getSubReg(DestReg, Hexagon::isub_lo);
        unsigned DestHi = TRI->getSubReg(DestReg, Hexagon::isub_hi);
d146 2
a147 1
        BuildMI(B, MI, DL, TII->get(Hexagon::A2_tfrsi), DestLo)
d149 2
a150 1
        BuildMI(B, MI, DL, TII->get(Hexagon::A2_tfrsi), DestHi)
d152 2
a153 1
        B.erase(&MI);
d155 1
d162 1
d168 2
a169 1
FunctionPass *llvm::createHexagonSplitConst32AndConst64() {
@


