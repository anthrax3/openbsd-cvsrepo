head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.3
	OPENBSD_6_2:1.1.1.2.0.2
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.4
	OPENBSD_6_1_BASE:1.1.1.2
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.04;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.10.04.20.28.01;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- HexagonMCExpr.cpp - Hexagon specific MC expression classes
//----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#include "HexagonMCExpr.h"
#include "llvm/MC/MCContext.h"
#include "llvm/MC/MCValue.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "hexagon-mcexpr"

HexagonNoExtendOperand *HexagonNoExtendOperand::Create(MCExpr const *Expr,
                                                       MCContext &Ctx) {
  return new (Ctx) HexagonNoExtendOperand(Expr);
}

bool HexagonNoExtendOperand::evaluateAsRelocatableImpl(
    MCValue &Res, MCAsmLayout const *Layout, MCFixup const *Fixup) const {
  return Expr->evaluateAsRelocatable(Res, Layout, Fixup);
}

void HexagonNoExtendOperand::visitUsedExpr(MCStreamer &Streamer) const {}

MCFragment *llvm::HexagonNoExtendOperand::findAssociatedFragment() const {
  return Expr->findAssociatedFragment();
}

void HexagonNoExtendOperand::fixELFSymbolsInTLSFixups(MCAssembler &Asm) const {}

MCExpr const *HexagonNoExtendOperand::getExpr() const { return Expr; }

bool HexagonNoExtendOperand::classof(MCExpr const *E) {
  return E->getKind() == MCExpr::Target;
}

HexagonNoExtendOperand::HexagonNoExtendOperand(MCExpr const *Expr)
    : Expr(Expr) {}

void HexagonNoExtendOperand::printImpl(raw_ostream &OS, const MCAsmInfo *MAI) const {
  Expr->print(OS, MAI);
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a12 1
#include "llvm/MC/MCStreamer.h"
d20 3
a22 2
HexagonMCExpr *HexagonMCExpr::create(MCExpr const *Expr, MCContext &Ctx) {
  return new (Ctx) HexagonMCExpr(Expr);
d25 2
a26 3
bool HexagonMCExpr::evaluateAsRelocatableImpl(MCValue &Res,
                                              MCAsmLayout const *Layout,
                                              MCFixup const *Fixup) const {
d30 1
a30 3
void HexagonMCExpr::visitUsedExpr(MCStreamer &Streamer) const {
  Streamer.visitUsedExpr(*Expr);
}
d32 1
a32 1
MCFragment *llvm::HexagonMCExpr::findAssociatedFragment() const {
d36 1
a36 15
void HexagonMCExpr::fixELFSymbolsInTLSFixups(MCAssembler &Asm) const {}

MCExpr const *HexagonMCExpr::getExpr() const { return Expr; }

void HexagonMCExpr::setMustExtend(bool Val) {
  assert((!Val || !MustNotExtend) && "Extension contradiction");
  MustExtend = Val;
}

bool HexagonMCExpr::mustExtend() const { return MustExtend; }
void HexagonMCExpr::setMustNotExtend(bool Val) {
  assert((!Val || !MustExtend) && "Extension contradiction");
  MustNotExtend = Val;
}
bool HexagonMCExpr::mustNotExtend() const { return MustNotExtend; }
d38 1
a38 4
bool HexagonMCExpr::s23_2_reloc() const { return S23_2_reloc; }
void HexagonMCExpr::setS23_2_reloc(bool Val) {
  S23_2_reloc = Val;
}
d40 1
a40 1
bool HexagonMCExpr::classof(MCExpr const *E) {
d44 2
a45 3
HexagonMCExpr::HexagonMCExpr(MCExpr const *Expr)
    : Expr(Expr), MustNotExtend(false), MustExtend(false), S23_2_reloc(false),
      SignMismatch(false) {}
d47 1
a47 1
void HexagonMCExpr::printImpl(raw_ostream &OS, const MCAsmInfo *MAI) const {
a49 8

void HexagonMCExpr::setSignMismatch(bool Val) {
  SignMismatch = Val;
}

bool HexagonMCExpr::signMismatch() const {
  return SignMismatch;
}@


1.1.1.3
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@a13 1
#include "llvm/MC/MCSymbolELF.h"
a14 1
#include "llvm/Object/ELF.h"
d39 1
a39 41
static void fixELFSymbolsInTLSFixupsImpl(const MCExpr *Expr, MCAssembler &Asm) {
  switch (Expr->getKind()) {
  case MCExpr::Target:
    llvm_unreachable("Cannot handle nested target MCExpr");
    break;
  case MCExpr::Constant:
    break;

  case MCExpr::Binary: {
    const MCBinaryExpr *be = cast<MCBinaryExpr>(Expr);
    fixELFSymbolsInTLSFixupsImpl(be->getLHS(), Asm);
    fixELFSymbolsInTLSFixupsImpl(be->getRHS(), Asm);
    break;
  }
  case MCExpr::SymbolRef: {
    const MCSymbolRefExpr &symRef = *cast<MCSymbolRefExpr>(Expr);
    switch (symRef.getKind()) {
    default:
      return;
    case MCSymbolRefExpr::VK_Hexagon_GD_GOT:
    case MCSymbolRefExpr::VK_Hexagon_LD_GOT:
    case MCSymbolRefExpr::VK_Hexagon_GD_PLT:
    case MCSymbolRefExpr::VK_Hexagon_LD_PLT:
    case MCSymbolRefExpr::VK_Hexagon_IE:
    case MCSymbolRefExpr::VK_Hexagon_IE_GOT:
    case MCSymbolRefExpr::VK_TPREL:
      break;
    }
    cast<MCSymbolELF>(symRef.getSymbol()).setType(ELF::STT_TLS);
    break;
  }
  case MCExpr::Unary:
    fixELFSymbolsInTLSFixupsImpl(cast<MCUnaryExpr>(Expr)->getSubExpr(), Asm);
    break;
  }
}

void HexagonMCExpr::fixELFSymbolsInTLSFixups(MCAssembler &Asm) const {
  auto expr = getExpr();
  fixELFSymbolsInTLSFixupsImpl(expr, Asm);
}
d55 3
a57 3
bool HexagonMCExpr::s27_2_reloc() const { return S27_2_reloc; }
void HexagonMCExpr::setS27_2_reloc(bool Val) {
  S27_2_reloc = Val;
d65 1
a65 1
    : Expr(Expr), MustNotExtend(false), MustExtend(false), S27_2_reloc(false),
d78 1
a78 1
}
@


