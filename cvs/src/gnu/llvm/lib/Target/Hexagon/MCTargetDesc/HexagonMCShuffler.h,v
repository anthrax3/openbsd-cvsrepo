head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.2
	OPENBSD_6_2:1.1.1.1.0.2
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.10.04.20.28.01;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@//=-- HexagonMCShuffler.h ---------------------------------------------------=//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This declares the shuffling of insns inside a bundle according to the
// packet formation rules of the Hexagon ISA.
//
//===----------------------------------------------------------------------===//

#ifndef HEXAGONMCSHUFFLER_H
#define HEXAGONMCSHUFFLER_H

#include "MCTargetDesc/HexagonShuffler.h"

namespace llvm {

class MCInst;

// Insn bundle shuffler.
class HexagonMCShuffler : public HexagonShuffler {
  bool immext_present;
  bool duplex_present;

public:
  HexagonMCShuffler(MCInstrInfo const &MCII, MCSubtargetInfo const &STI,
                    MCInst &MCB)
      : HexagonShuffler(MCII, STI) {
    init(MCB);
  };
  HexagonMCShuffler(MCInstrInfo const &MCII, MCSubtargetInfo const &STI,
                    MCInst &MCB, const MCInst *AddMI,
                    bool bInsertAtFront = false)
      : HexagonShuffler(MCII, STI) {
    init(MCB, AddMI, bInsertAtFront);
  };

  // Copy reordered bundle to another.
  void copyTo(MCInst &MCB);
  // Reorder and copy result to another.
  bool reshuffleTo(MCInst &MCB);

  bool immextPresent() const { return immext_present; };
  bool duplexPresent() const { return duplex_present; };

private:
  void init(MCInst &MCB);
  void init(MCInst &MCB, const MCInst *AddMI, bool bInsertAtFront = false);
};

// Invocation of the shuffler.
bool HexagonMCShuffle(MCInstrInfo const &MCII, MCSubtargetInfo const &STI,
                      MCInst &);
bool HexagonMCShuffle(MCInstrInfo const &MCII, MCSubtargetInfo const &STI,
                      MCInst &, const MCInst *, int);
unsigned HexagonMCShuffle(MCInstrInfo const &MCII, MCSubtargetInfo const &STI,
                          MCContext &Context, MCInst &,
                          SmallVector<DuplexCandidate, 8>);
}

#endif // HEXAGONMCSHUFFLER_H
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d21 1
d23 1
d26 3
d30 3
a32 3
  HexagonMCShuffler(MCContext &Context, bool Fatal, MCInstrInfo const &MCII,
                    MCSubtargetInfo const &STI, MCInst &MCB)
      : HexagonShuffler(Context, Fatal, MCII, STI) {
d35 5
a39 5
  HexagonMCShuffler(MCContext &Context, bool Fatal, MCInstrInfo const &MCII,
                    MCSubtargetInfo const &STI, MCInst &MCB,
                    MCInst const &AddMI, bool InsertAtFront)
      : HexagonShuffler(Context, Fatal, MCII, STI) {
    init(MCB, AddMI, InsertAtFront);
d47 3
d52 1
a52 1
  void init(MCInst &MCB, MCInst const &AddMI, bool InsertAtFront);
d56 8
a63 9
bool HexagonMCShuffle(MCContext &Context, bool Fatal, MCInstrInfo const &MCII,
                      MCSubtargetInfo const &STI, MCInst &);
bool HexagonMCShuffle(MCContext &Context, MCInstrInfo const &MCII,
                      MCSubtargetInfo const &STI, MCInst &, MCInst const &,
                      int);
bool HexagonMCShuffle(MCContext &Context, MCInstrInfo const &MCII,
                      MCSubtargetInfo const &STI, MCInst &,
                      SmallVector<DuplexCandidate, 8>);
} // namespace llvm
@

