head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.6
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2017.01.14.19.56.06;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.56.06;	author patrick;	state Exp;
branches;
next	;
commitid	qMUxATnKgqN83Oct;


desc
@@


1.1
log
@Initial revision
@
text
@//===---- PPCCCState.h - CCState with PowerPC specific extensions -----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef PPCCCSTATE_H
#define PPCCCSTATE_H

#include "PPCISelLowering.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/CodeGen/CallingConvLower.h"

namespace llvm {

class PPCCCState : public CCState {
public:

  void
  PreAnalyzeCallOperands(const SmallVectorImpl<ISD::OutputArg> &Outs);
  void
  PreAnalyzeFormalArguments(const SmallVectorImpl<ISD::InputArg> &Ins);

private:

  // Records whether the value has been lowered from an ppcf128.
  SmallVector<bool, 4> OriginalArgWasPPCF128;

public:
  PPCCCState(CallingConv::ID CC, bool isVarArg, MachineFunction &MF,
             SmallVectorImpl<CCValAssign> &locs, LLVMContext &C)
        : CCState(CC, isVarArg, MF, locs, C) {}

  bool WasOriginalArgPPCF128(unsigned ValNo) { return OriginalArgWasPPCF128[ValNo]; }
  void clearWasPPCF128() { OriginalArgWasPPCF128.clear(); }
};
}

#endif
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@
