head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_5_0_0:1.1.1.2
	OPENBSD_6_2:1.1.1.1.0.2
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	LLVM_4_0_0:1.1.1.1
	LLVM_4_0_0_RC1:1.1.1.1
	LLVM_3_9_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.1
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qMUxATnKgqN83Oct;

1.1.1.1
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches;
next	1.1.1.2;
commitid	qMUxATnKgqN83Oct;

1.1.1.2
date	2017.10.04.20.28.00;	author patrick;	state Exp;
branches;
next	;
commitid	ufzi3t8MqoilCPqO;


desc
@@


1.1
log
@Initial revision
@
text
@#include "AVRELFStreamer.h"

#include "llvm/Support/ELF.h"
#include "llvm/Support/FormattedStream.h"

#include "AVRMCTargetDesc.h"

namespace llvm {

static unsigned getEFlagsForFeatureSet(const FeatureBitset &Features) {
  unsigned EFlags = 0;

  // Set architecture
  if (Features[AVR::ELFArchAVR1])
    EFlags |= ELF::EF_AVR_ARCH_AVR1;
  else if (Features[AVR::ELFArchAVR2])
    EFlags |= ELF::EF_AVR_ARCH_AVR2;
  else if (Features[AVR::ELFArchAVR25])
    EFlags |= ELF::EF_AVR_ARCH_AVR25;
  else if (Features[AVR::ELFArchAVR3])
    EFlags |= ELF::EF_AVR_ARCH_AVR3;
  else if (Features[AVR::ELFArchAVR31])
    EFlags |= ELF::EF_AVR_ARCH_AVR31;
  else if (Features[AVR::ELFArchAVR35])
    EFlags |= ELF::EF_AVR_ARCH_AVR35;
  else if (Features[AVR::ELFArchAVR4])
    EFlags |= ELF::EF_AVR_ARCH_AVR4;
  else if (Features[AVR::ELFArchAVR5])
    EFlags |= ELF::EF_AVR_ARCH_AVR5;
  else if (Features[AVR::ELFArchAVR51])
    EFlags |= ELF::EF_AVR_ARCH_AVR51;
  else if (Features[AVR::ELFArchAVR6])
    EFlags |= ELF::EF_AVR_ARCH_AVR6;
  else if (Features[AVR::ELFArchAVRTiny])
    EFlags |= ELF::EF_AVR_ARCH_AVRTINY;
  else if (Features[AVR::ELFArchXMEGA1])
    EFlags |= ELF::EF_AVR_ARCH_XMEGA1;
  else if (Features[AVR::ELFArchXMEGA2])
    EFlags |= ELF::EF_AVR_ARCH_XMEGA2;
  else if (Features[AVR::ELFArchXMEGA3])
    EFlags |= ELF::EF_AVR_ARCH_XMEGA3;
  else if (Features[AVR::ELFArchXMEGA4])
    EFlags |= ELF::EF_AVR_ARCH_XMEGA4;
  else if (Features[AVR::ELFArchXMEGA5])
    EFlags |= ELF::EF_AVR_ARCH_XMEGA5;
  else if (Features[AVR::ELFArchXMEGA6])
    EFlags |= ELF::EF_AVR_ARCH_XMEGA6;
  else if (Features[AVR::ELFArchXMEGA7])
    EFlags |= ELF::EF_AVR_ARCH_XMEGA7;

  return EFlags;
}

AVRELFStreamer::AVRELFStreamer(MCStreamer &S,
                               const MCSubtargetInfo &STI)
    : AVRTargetStreamer(S) {

  MCAssembler &MCA = getStreamer().getAssembler();
  unsigned EFlags = MCA.getELFHeaderEFlags();

  EFlags |= getEFlagsForFeatureSet(STI.getFeatureBits());

  MCA.setELFHeaderEFlags(EFlags);
}

} // end namespace llvm
@


1.1.1.1
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@@


1.1.1.2
log
@Import LLVM 5.0.0 release including clang, lld and lldb.
@
text
@d3 1
a3 3
#include "llvm/BinaryFormat/ELF.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/MC/SubtargetFeature.h"
d34 1
a34 1
  else if (Features[AVR::ELFArchTiny])
@

