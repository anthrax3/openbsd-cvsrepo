head	1.1;
branch	1.1.1;
access;
symbols
	LLVM_4_0_0:1.1.1.2
	LLVM_4_0_0_RC1:1.1.1.2
	LLVM_3_9_1:1.1.1.1
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.24.08.33.29;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//=- WebAssemblyInstrFormats.td - WebAssembly Instr. Formats -*- tablegen -*-=//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
///
/// \file
/// \brief WebAssembly instruction format definitions.
///
//===----------------------------------------------------------------------===//

// WebAssembly Instruction Format.
class WebAssemblyInst<string asmstr> : Instruction {
  field bits<0> Inst; // Instruction encoding.
  let Namespace   = "WebAssembly";
  let Pattern     = [];
  let AsmString   = asmstr;
}

// Normal instructions.
class I<dag oops, dag iops, list<dag> pattern, string asmstr = "">
    : WebAssemblyInst<asmstr> {
  dag OutOperandList = oops;
  dag InOperandList  = iops;
  let Pattern        = pattern;
}

// Unary and binary instructions, for the local types that WebAssembly supports.
multiclass UnaryInt<SDNode node, string name> {
  def _I32 : I<(outs I32:$dst), (ins I32:$src),
               [(set I32:$dst, (node I32:$src))],
               !strconcat("i32.", !strconcat(name, "\t$dst, $src"))>;
  def _I64 : I<(outs I64:$dst), (ins I64:$src),
               [(set I64:$dst, (node I64:$src))],
               !strconcat("i64.", !strconcat(name, "\t$dst, $src"))>;
}
multiclass BinaryInt<SDNode node, string name> {
  def _I32 : I<(outs I32:$dst), (ins I32:$lhs, I32:$rhs),
               [(set I32:$dst, (node I32:$lhs, I32:$rhs))],
               !strconcat("i32.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
  def _I64 : I<(outs I64:$dst), (ins I64:$lhs, I64:$rhs),
               [(set I64:$dst, (node I64:$lhs, I64:$rhs))],
               !strconcat("i64.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
}
multiclass UnaryFP<SDNode node, string name> {
  def _F32 : I<(outs F32:$dst), (ins F32:$src),
               [(set F32:$dst, (node F32:$src))],
               !strconcat("f32.", !strconcat(name, "\t$dst, $src"))>;
  def _F64 : I<(outs F64:$dst), (ins F64:$src),
               [(set F64:$dst, (node F64:$src))],
               !strconcat("f64.", !strconcat(name, "\t$dst, $src"))>;
}
multiclass BinaryFP<SDNode node, string name> {
  def _F32 : I<(outs F32:$dst), (ins F32:$lhs, F32:$rhs),
               [(set F32:$dst, (node F32:$lhs, F32:$rhs))],
               !strconcat("f32.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
  def _F64 : I<(outs F64:$dst), (ins F64:$lhs, F64:$rhs),
               [(set F64:$dst, (node F64:$lhs, F64:$rhs))],
               !strconcat("f64.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
}
multiclass ComparisonInt<CondCode cond, string name> {
  def _I32 : I<(outs I32:$dst), (ins I32:$lhs, I32:$rhs),
               [(set I32:$dst, (setcc I32:$lhs, I32:$rhs, cond))],
               !strconcat("i32.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
  def _I64 : I<(outs I32:$dst), (ins I64:$lhs, I64:$rhs),
               [(set I32:$dst, (setcc I64:$lhs, I64:$rhs, cond))],
               !strconcat("i64.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
}
multiclass ComparisonFP<CondCode cond, string name> {
  def _F32 : I<(outs I32:$dst), (ins F32:$lhs, F32:$rhs),
               [(set I32:$dst, (setcc F32:$lhs, F32:$rhs, cond))],
               !strconcat("f32.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
  def _F64 : I<(outs I32:$dst), (ins F64:$lhs, F64:$rhs),
               [(set I32:$dst, (setcc F64:$lhs, F64:$rhs, cond))],
               !strconcat("f64.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d16 2
a17 2
class WebAssemblyInst<bits<32> inst, string asmstr> : Instruction {
  field bits<32> Inst = inst; // Instruction encoding.
d24 2
a25 2
class I<dag oops, dag iops, list<dag> pattern, string asmstr = "", bits<32> inst = -1>
    : WebAssemblyInst<inst, asmstr> {
a30 4
class SIMD_I<dag oops, dag iops, list<dag> pattern,
             string asmstr = "", bits<32> inst = -1>
    : I<oops, iops, pattern, asmstr, inst>, Requires<[HasSIMD128]>;

d32 1
a32 1
multiclass UnaryInt<SDNode node, string name, bits<32> i32Inst, bits<32> i64Inst> {
d35 1
a35 1
               !strconcat("i32.", !strconcat(name, "\t$dst, $src")), i32Inst>;
d38 1
a38 1
               !strconcat("i64.", !strconcat(name, "\t$dst, $src")), i64Inst>;
d40 1
a40 1
multiclass BinaryInt<SDNode node, string name, bits<32> i32Inst, bits<32> i64Inst> {
d43 1
a43 1
               !strconcat("i32.", !strconcat(name, "\t$dst, $lhs, $rhs")), i32Inst>;
d46 1
a46 1
               !strconcat("i64.", !strconcat(name, "\t$dst, $lhs, $rhs")), i64Inst>;
d48 1
a48 1
multiclass UnaryFP<SDNode node, string name, bits<32> f32Inst, bits<32> f64Inst> {
d51 1
a51 1
               !strconcat("f32.", !strconcat(name, "\t$dst, $src")), f32Inst>;
d54 1
a54 1
               !strconcat("f64.", !strconcat(name, "\t$dst, $src")), f64Inst>;
d56 1
a56 1
multiclass BinaryFP<SDNode node, string name, bits<32> f32Inst, bits<32> f64Inst> {
d59 1
a59 1
               !strconcat("f32.", !strconcat(name, "\t$dst, $lhs, $rhs")), f32Inst>;
d62 1
a62 16
               !strconcat("f64.", !strconcat(name, "\t$dst, $lhs, $rhs")), f64Inst>;
}
multiclass SIMDBinary<SDNode node, SDNode fnode, string name> {
  def _I8x16 : SIMD_I<(outs V128:$dst), (ins V128:$lhs, V128:$rhs),
                      [(set (v16i8 V128:$dst), (node V128:$lhs, V128:$rhs))],
                      !strconcat("i8x16.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
  def _I16x8 : SIMD_I<(outs V128:$dst), (ins V128:$lhs, V128:$rhs),
                      [(set (v8i16 V128:$dst), (node V128:$lhs, V128:$rhs))],
                      !strconcat("i16x8.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
  def _I32x4 : SIMD_I<(outs V128:$dst), (ins V128:$lhs, V128:$rhs),
                      [(set (v4i32 V128:$dst), (node V128:$lhs, V128:$rhs))],
                      !strconcat("i32x4.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;
  def _F32x4 : SIMD_I<(outs V128:$dst), (ins V128:$lhs, V128:$rhs),
                      [(set (v4f32 V128:$dst), (fnode V128:$lhs, V128:$rhs))],
                      !strconcat("f32x4.", !strconcat(name, "\t$dst, $lhs, $rhs"))>;

d64 1
a64 1
multiclass ComparisonInt<CondCode cond, string name, bits<32> i32Inst, bits<32> i64Inst> {
d67 1
a67 2
               !strconcat("i32.", !strconcat(name, "\t$dst, $lhs, $rhs")),
               i32Inst>;
d70 1
a70 2
               !strconcat("i64.", !strconcat(name, "\t$dst, $lhs, $rhs")),
               i64Inst>;
d72 1
a72 1
multiclass ComparisonFP<CondCode cond, string name, bits<32> f32Inst, bits<32> f64Inst> {
d75 1
a75 2
               !strconcat("f32.", !strconcat(name, "\t$dst, $lhs, $rhs")),
               f32Inst>;
d78 1
a78 2
               !strconcat("f64.", !strconcat(name, "\t$dst, $lhs, $rhs")),
               f64Inst>;
@

