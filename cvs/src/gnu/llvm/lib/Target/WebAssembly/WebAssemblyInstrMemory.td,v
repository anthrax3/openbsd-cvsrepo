head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.2
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.00;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.03;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.29;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@// WebAssemblyInstrMemory.td-WebAssembly Memory codegen support -*- tablegen -*-
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
///
/// \file
/// \brief WebAssembly Memory operand code-gen constructs.
///
//===----------------------------------------------------------------------===//

// TODO:
//  - HasAddr64
//  - WebAssemblyTargetLowering having to do with atomics
//  - Each has optional alignment.

// WebAssembly has i8/i16/i32/i64/f32/f64 memory types, but doesn't have i8/i16
// local types. These memory-only types instead zero- or sign-extend into local
// types when loading, and truncate when storing.

// WebAssembly constant offsets are performed as unsigned with infinite
// precision, so we need to check for NoUnsignedWrap so that we don't fold an
// offset for an add that needs wrapping.
def regPlusImm : PatFrag<(ops node:$addr, node:$off),
                         (add node:$addr, node:$off),
                         [{ return N->getFlags()->hasNoUnsignedWrap(); }]>;

// GlobalAddresses are conceptually unsigned values, so we can also fold them
// into immediate values as long as their offsets are non-negative.
def regPlusGA : PatFrag<(ops node:$addr, node:$off),
                        (add node:$addr, node:$off),
                        [{
  return N->getFlags()->hasNoUnsignedWrap() ||
         (N->getOperand(1)->getOpcode() == WebAssemblyISD::Wrapper &&
          isa<GlobalAddressSDNode>(N->getOperand(1)->getOperand(0)) &&
          cast<GlobalAddressSDNode>(N->getOperand(1)->getOperand(0))
             ->getOffset() >= 0);
}]>;

// We don't need a regPlusES because external symbols never have constant
// offsets folded into them, so we can just use add.

let Defs = [ARGUMENTS] in {

// Basic load.
def LOAD_I32 : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr), [],
                 "i32.load\t$dst, ${off}(${addr})">;
def LOAD_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr), [],
                 "i64.load\t$dst, ${off}(${addr})">;
def LOAD_F32 : I<(outs F32:$dst), (ins i32imm:$off, I32:$addr), [],
                 "f32.load\t$dst, ${off}(${addr})">;
def LOAD_F64 : I<(outs F64:$dst), (ins i32imm:$off, I32:$addr), [],
                 "f64.load\t$dst, ${off}(${addr})">;

} // Defs = [ARGUMENTS]

// Select loads with no constant offset.
def : Pat<(i32 (load I32:$addr)), (LOAD_I32 0, $addr)>;
def : Pat<(i64 (load I32:$addr)), (LOAD_I64 0, $addr)>;
def : Pat<(f32 (load I32:$addr)), (LOAD_F32 0, $addr)>;
def : Pat<(f64 (load I32:$addr)), (LOAD_F64 0, $addr)>;

// Select loads with a constant offset.
def : Pat<(i32 (load (regPlusImm I32:$addr, imm:$off))),
          (LOAD_I32 imm:$off, $addr)>;
def : Pat<(i64 (load (regPlusImm I32:$addr, imm:$off))),
          (LOAD_I64 imm:$off, $addr)>;
def : Pat<(f32 (load (regPlusImm I32:$addr, imm:$off))),
          (LOAD_F32 imm:$off, $addr)>;
def : Pat<(f64 (load (regPlusImm I32:$addr, imm:$off))),
          (LOAD_F64 imm:$off, $addr)>;
def : Pat<(i32 (load (regPlusGA I32:$addr,
                                (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD_I32 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (load (regPlusGA I32:$addr,
                                (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD_I64 tglobaladdr:$off, $addr)>;
def : Pat<(f32 (load (regPlusGA I32:$addr,
                                (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD_F32 tglobaladdr:$off, $addr)>;
def : Pat<(f64 (load (regPlusGA I32:$addr,
                                (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD_F64 tglobaladdr:$off, $addr)>;
def : Pat<(i32 (load (add I32:$addr, (WebAssemblywrapper texternalsym:$off)))),
          (LOAD_I32 texternalsym:$off, $addr)>;
def : Pat<(i64 (load (add I32:$addr, (WebAssemblywrapper texternalsym:$off)))),
          (LOAD_I64 texternalsym:$off, $addr)>;
def : Pat<(f32 (load (add I32:$addr, (WebAssemblywrapper texternalsym:$off)))),
          (LOAD_F32 texternalsym:$off, $addr)>;
def : Pat<(f64 (load (add I32:$addr, (WebAssemblywrapper texternalsym:$off)))),
          (LOAD_F64 texternalsym:$off, $addr)>;

// Select loads with just a constant offset.
def : Pat<(i32 (load imm:$off)), (LOAD_I32 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (load imm:$off)), (LOAD_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(f32 (load imm:$off)), (LOAD_F32 imm:$off, (CONST_I32 0))>;
def : Pat<(f64 (load imm:$off)), (LOAD_F64 imm:$off, (CONST_I32 0))>;
def : Pat<(i32 (load (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD_I32 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (load (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(f32 (load (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD_F32 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(f64 (load (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD_F64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i32 (load (WebAssemblywrapper texternalsym:$off))),
          (LOAD_I32 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (load (WebAssemblywrapper texternalsym:$off))),
          (LOAD_I64 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(f32 (load (WebAssemblywrapper texternalsym:$off))),
          (LOAD_F32 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(f64 (load (WebAssemblywrapper texternalsym:$off))),
          (LOAD_F64 texternalsym:$off, (CONST_I32 0))>;

let Defs = [ARGUMENTS] in {

// Extending load.
def LOAD8_S_I32  : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i32.load8_s\t$dst, ${off}(${addr})">;
def LOAD8_U_I32  : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i32.load8_u\t$dst, ${off}(${addr})">;
def LOAD16_S_I32 : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i32.load16_s\t$dst, ${off}(${addr})">;
def LOAD16_U_I32 : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i32.load16_u\t$dst, ${off}(${addr})">;
def LOAD8_S_I64  : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i64.load8_s\t$dst, ${off}(${addr})">;
def LOAD8_U_I64  : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i64.load8_u\t$dst, ${off}(${addr})">;
def LOAD16_S_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i64.load16_s\t$dst, ${off}(${addr})">;
def LOAD16_U_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i64.load16_u\t$dst, ${off}(${addr})">;
def LOAD32_S_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i64.load32_s\t$dst, ${off}(${addr})">;
def LOAD32_U_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr), [],
                     "i64.load32_u\t$dst, ${off}(${addr})">;

} // Defs = [ARGUMENTS]

// Select extending loads with no constant offset.
def : Pat<(i32 (sextloadi8 I32:$addr)), (LOAD8_S_I32 0, $addr)>;
def : Pat<(i32 (zextloadi8 I32:$addr)), (LOAD8_U_I32 0, $addr)>;
def : Pat<(i32 (sextloadi16 I32:$addr)), (LOAD16_S_I32 0, $addr)>;
def : Pat<(i32 (zextloadi16 I32:$addr)), (LOAD16_U_I32 0, $addr)>;
def : Pat<(i64 (sextloadi8 I32:$addr)), (LOAD8_S_I64 0, $addr)>;
def : Pat<(i64 (zextloadi8 I32:$addr)), (LOAD8_U_I64 0, $addr)>;
def : Pat<(i64 (sextloadi16 I32:$addr)), (LOAD16_S_I64 0, $addr)>;
def : Pat<(i64 (zextloadi16 I32:$addr)), (LOAD16_U_I64 0, $addr)>;
def : Pat<(i64 (sextloadi32 I32:$addr)), (LOAD32_S_I64 0, $addr)>;
def : Pat<(i64 (zextloadi32 I32:$addr)), (LOAD32_U_I64 0, $addr)>;

// Select extending loads with a constant offset.
def : Pat<(i32 (sextloadi8 (regPlusImm I32:$addr, imm:$off))),
          (LOAD8_S_I32 imm:$off, $addr)>;
def : Pat<(i32 (zextloadi8 (regPlusImm I32:$addr, imm:$off))),
          (LOAD8_U_I32 imm:$off, $addr)>;
def : Pat<(i32 (sextloadi16 (regPlusImm I32:$addr, imm:$off))),
          (LOAD16_S_I32 imm:$off, $addr)>;
def : Pat<(i32 (zextloadi16 (regPlusImm I32:$addr, imm:$off))),
          (LOAD16_U_I32 imm:$off, $addr)>;
def : Pat<(i64 (sextloadi8 (regPlusImm I32:$addr, imm:$off))),
          (LOAD8_S_I64 imm:$off, $addr)>;
def : Pat<(i64 (zextloadi8 (regPlusImm I32:$addr, imm:$off))),
          (LOAD8_U_I64 imm:$off, $addr)>;
def : Pat<(i64 (sextloadi16 (regPlusImm I32:$addr, imm:$off))),
          (LOAD16_S_I64 imm:$off, $addr)>;
def : Pat<(i64 (zextloadi16 (regPlusImm I32:$addr, imm:$off))),
          (LOAD16_U_I64 imm:$off, $addr)>;
def : Pat<(i64 (sextloadi32 (regPlusImm I32:$addr, imm:$off))),
          (LOAD32_S_I64 imm:$off, $addr)>;
def : Pat<(i64 (zextloadi32 (regPlusImm I32:$addr, imm:$off))),
          (LOAD32_U_I64 imm:$off, $addr)>;
def : Pat<(i32 (sextloadi8 (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD8_S_I32 tglobaladdr:$off, $addr)>;
def : Pat<(i32 (zextloadi8 (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD8_U_I32 tglobaladdr:$off, $addr)>;
def : Pat<(i32 (sextloadi16 (regPlusGA I32:$addr,
                                       (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD16_S_I32 tglobaladdr:$off, $addr)>;
def : Pat<(i32 (zextloadi16 (regPlusGA I32:$addr,
                                       (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD16_U_I32 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (sextloadi8 (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD8_S_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (zextloadi8 (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD8_U_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (sextloadi16 (regPlusGA I32:$addr,
                                       (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD16_S_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (zextloadi16 (regPlusGA I32:$addr,
                                       (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD16_U_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (sextloadi32 (regPlusGA I32:$addr,
                                       (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD32_S_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (zextloadi32 (regPlusGA I32:$addr,
                                       (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD32_U_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i32 (sextloadi8 (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off)))),
          (LOAD8_S_I32 texternalsym:$off, $addr)>;
def : Pat<(i32 (zextloadi8 (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off)))),
          (LOAD8_U_I32 texternalsym:$off, $addr)>;
def : Pat<(i32 (sextloadi16 (add I32:$addr,
                                 (WebAssemblywrapper texternalsym:$off)))),
          (LOAD16_S_I32 texternalsym:$off, $addr)>;
def : Pat<(i32 (zextloadi16 (add I32:$addr,
                                 (WebAssemblywrapper texternalsym:$off)))),
          (LOAD16_U_I32 texternalsym:$off, $addr)>;
def : Pat<(i64 (sextloadi8 (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off)))),
          (LOAD8_S_I64 texternalsym:$off, $addr)>;
def : Pat<(i64 (zextloadi8 (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off)))),
          (LOAD8_U_I64 texternalsym:$off, $addr)>;
def : Pat<(i64 (sextloadi16 (add I32:$addr,
                                 (WebAssemblywrapper texternalsym:$off)))),
          (LOAD16_S_I64 texternalsym:$off, $addr)>;
def : Pat<(i64 (zextloadi16 (add I32:$addr,
                                 (WebAssemblywrapper texternalsym:$off)))),
          (LOAD16_U_I64 texternalsym:$off, $addr)>;
def : Pat<(i64 (sextloadi32 (add I32:$addr,
                                 (WebAssemblywrapper texternalsym:$off)))),
          (LOAD32_S_I64 texternalsym:$off, $addr)>;
def : Pat<(i64 (zextloadi32 (add I32:$addr,
                                 (WebAssemblywrapper texternalsym:$off)))),
          (LOAD32_U_I64 texternalsym:$off, $addr)>;

// Select extending loads with just a constant offset.
def : Pat<(i32 (sextloadi8 imm:$off)), (LOAD8_S_I32 imm:$off, (CONST_I32 0))>;
def : Pat<(i32 (zextloadi8 imm:$off)), (LOAD8_U_I32 imm:$off, (CONST_I32 0))>;
def : Pat<(i32 (sextloadi16 imm:$off)), (LOAD16_S_I32 imm:$off, (CONST_I32 0))>;
def : Pat<(i32 (zextloadi16 imm:$off)), (LOAD16_U_I32 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi8 imm:$off)), (LOAD8_S_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi8 imm:$off)), (LOAD8_U_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi16 imm:$off)), (LOAD16_S_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi16 imm:$off)), (LOAD16_U_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi32 imm:$off)), (LOAD32_S_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi32 imm:$off)), (LOAD32_U_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i32 (sextloadi8 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD8_S_I32 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i32 (zextloadi8 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD8_U_I32 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i32 (sextloadi16 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD16_S_I32 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i32 (zextloadi16 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD16_U_I32 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi8 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD8_S_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi8 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD8_U_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi16 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD16_S_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi16 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD16_U_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi32 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD32_S_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi32 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD32_U_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i32 (sextloadi8 (WebAssemblywrapper texternalsym:$off))),
          (LOAD8_S_I32 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i32 (zextloadi8 (WebAssemblywrapper texternalsym:$off))),
          (LOAD8_U_I32 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i32 (sextloadi16 (WebAssemblywrapper texternalsym:$off))),
          (LOAD16_S_I32 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i32 (zextloadi16 (WebAssemblywrapper texternalsym:$off))),
          (LOAD16_U_I32 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi8 (WebAssemblywrapper texternalsym:$off))),
          (LOAD8_S_I64 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi8 (WebAssemblywrapper texternalsym:$off))),
          (LOAD8_U_I64 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi16 (WebAssemblywrapper texternalsym:$off))),
          (LOAD16_S_I64 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi16 (WebAssemblywrapper texternalsym:$off))),
          (LOAD16_U_I64 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (sextloadi32 (WebAssemblywrapper texternalsym:$off))),
          (LOAD32_S_I64 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (zextloadi32 (WebAssemblywrapper texternalsym:$off))),
          (LOAD32_U_I64 texternalsym:$off, (CONST_I32 0))>;

// Resolve "don't care" extending loads to zero-extending loads. This is
// somewhat arbitrary, but zero-extending is conceptually simpler.

// Select "don't care" extending loads with no constant offset.
def : Pat<(i32 (extloadi8 I32:$addr)),  (LOAD8_U_I32 0, $addr)>;
def : Pat<(i32 (extloadi16 I32:$addr)), (LOAD16_U_I32 0, $addr)>;
def : Pat<(i64 (extloadi8 I32:$addr)),  (LOAD8_U_I64 0, $addr)>;
def : Pat<(i64 (extloadi16 I32:$addr)), (LOAD16_U_I64 0, $addr)>;
def : Pat<(i64 (extloadi32 I32:$addr)), (LOAD32_U_I64 0, $addr)>;

// Select "don't care" extending loads with a constant offset.
def : Pat<(i32 (extloadi8 (regPlusImm I32:$addr, imm:$off))),
          (LOAD8_U_I32 imm:$off, $addr)>;
def : Pat<(i32 (extloadi16 (regPlusImm I32:$addr, imm:$off))),
          (LOAD16_U_I32 imm:$off, $addr)>;
def : Pat<(i64 (extloadi8 (regPlusImm I32:$addr, imm:$off))),
          (LOAD8_U_I64 imm:$off, $addr)>;
def : Pat<(i64 (extloadi16 (regPlusImm I32:$addr, imm:$off))),
          (LOAD16_U_I64 imm:$off, $addr)>;
def : Pat<(i64 (extloadi32 (regPlusImm I32:$addr, imm:$off))),
          (LOAD32_U_I64 imm:$off, $addr)>;
def : Pat<(i32 (extloadi8 (regPlusGA I32:$addr,
                                     (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD8_U_I32 tglobaladdr:$off, $addr)>;
def : Pat<(i32 (extloadi16 (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD16_U_I32 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (extloadi8 (regPlusGA I32:$addr,
                                     (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD8_U_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (extloadi16 (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD16_U_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i64 (extloadi32 (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off)))),
          (LOAD32_U_I64 tglobaladdr:$off, $addr)>;
def : Pat<(i32 (extloadi8 (add I32:$addr,
                               (WebAssemblywrapper texternalsym:$off)))),
          (LOAD8_U_I32 texternalsym:$off, $addr)>;
def : Pat<(i32 (extloadi16 (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off)))),
          (LOAD16_U_I32 texternalsym:$off, $addr)>;
def : Pat<(i64 (extloadi8 (add I32:$addr,
                               (WebAssemblywrapper texternalsym:$off)))),
          (LOAD8_U_I64 texternalsym:$off, $addr)>;
def : Pat<(i64 (extloadi16 (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off)))),
          (LOAD16_U_I64 texternalsym:$off, $addr)>;
def : Pat<(i64 (extloadi32 (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off)))),
          (LOAD32_U_I64 texternalsym:$off, $addr)>;

// Select "don't care" extending loads with just a constant offset.
def : Pat<(i32 (extloadi8 imm:$off)), (LOAD8_U_I32 imm:$off, (CONST_I32 0))>;
def : Pat<(i32 (extloadi16 imm:$off)), (LOAD16_U_I32 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi8 imm:$off)), (LOAD8_U_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi16 imm:$off)), (LOAD16_U_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi32 imm:$off)), (LOAD32_U_I64 imm:$off, (CONST_I32 0))>;
def : Pat<(i32 (extloadi8 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD8_U_I32 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i32 (extloadi16 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD16_U_I32 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi8 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD8_U_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi16 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD16_U_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi32 (WebAssemblywrapper tglobaladdr:$off))),
          (LOAD32_U_I64 tglobaladdr:$off, (CONST_I32 0))>;
def : Pat<(i32 (extloadi8 (WebAssemblywrapper texternalsym:$off))),
          (LOAD8_U_I32 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i32 (extloadi16 (WebAssemblywrapper texternalsym:$off))),
          (LOAD16_U_I32 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi8 (WebAssemblywrapper texternalsym:$off))),
          (LOAD8_U_I64 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi16 (WebAssemblywrapper texternalsym:$off))),
          (LOAD16_U_I64 texternalsym:$off, (CONST_I32 0))>;
def : Pat<(i64 (extloadi32 (WebAssemblywrapper texternalsym:$off))),
          (LOAD32_U_I64 tglobaladdr:$off, (CONST_I32 0))>;

let Defs = [ARGUMENTS] in {

// Basic store.
// Note that we split the patterns out of the instruction definitions because
// WebAssembly's stores return their operand value, and tablegen doesn't like
// instruction definition patterns that don't reference all of the output
// operands.
// Note: WebAssembly inverts SelectionDAG's usual operand order.
def STORE_I32  : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr, I32:$val), [],
                   "i32.store\t$dst, ${off}(${addr}), $val">;
def STORE_I64  : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr, I64:$val), [],
                   "i64.store\t$dst, ${off}(${addr}), $val">;
def STORE_F32  : I<(outs F32:$dst), (ins i32imm:$off, I32:$addr, F32:$val), [],
                   "f32.store\t$dst, ${off}(${addr}), $val">;
def STORE_F64  : I<(outs F64:$dst), (ins i32imm:$off, I32:$addr, F64:$val), [],
                   "f64.store\t$dst, ${off}(${addr}), $val">;

} // Defs = [ARGUMENTS]

// Select stores with no constant offset.
def : Pat<(store I32:$val, I32:$addr), (STORE_I32 0, I32:$addr, I32:$val)>;
def : Pat<(store I64:$val, I32:$addr), (STORE_I64 0, I32:$addr, I64:$val)>;
def : Pat<(store F32:$val, I32:$addr), (STORE_F32 0, I32:$addr, F32:$val)>;
def : Pat<(store F64:$val, I32:$addr), (STORE_F64 0, I32:$addr, F64:$val)>;

// Select stores with a constant offset.
def : Pat<(store I32:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE_I32 imm:$off, I32:$addr, I32:$val)>;
def : Pat<(store I64:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE_I64 imm:$off, I32:$addr, I64:$val)>;
def : Pat<(store F32:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE_F32 imm:$off, I32:$addr, F32:$val)>;
def : Pat<(store F64:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE_F64 imm:$off, I32:$addr, F64:$val)>;
def : Pat<(store I32:$val, (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off))),
          (STORE_I32 tglobaladdr:$off, I32:$addr, I32:$val)>;
def : Pat<(store I64:$val, (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off))),
          (STORE_I64 tglobaladdr:$off, I32:$addr, I64:$val)>;
def : Pat<(store F32:$val, (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off))),
          (STORE_F32 tglobaladdr:$off, I32:$addr, F32:$val)>;
def : Pat<(store F64:$val, (regPlusGA I32:$addr,
                                      (WebAssemblywrapper tglobaladdr:$off))),
          (STORE_F64 tglobaladdr:$off, I32:$addr, F64:$val)>;
def : Pat<(store I32:$val, (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off))),
          (STORE_I32 texternalsym:$off, I32:$addr, I32:$val)>;
def : Pat<(store I64:$val, (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off))),
          (STORE_I64 texternalsym:$off, I32:$addr, I64:$val)>;
def : Pat<(store F32:$val, (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off))),
          (STORE_F32 texternalsym:$off, I32:$addr, F32:$val)>;
def : Pat<(store F64:$val, (add I32:$addr,
                                (WebAssemblywrapper texternalsym:$off))),
          (STORE_F64 texternalsym:$off, I32:$addr, F64:$val)>;

// Select stores with just a constant offset.
def : Pat<(store I32:$val, imm:$off),
          (STORE_I32 imm:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(store I64:$val, imm:$off),
          (STORE_I64 imm:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(store F32:$val, imm:$off),
          (STORE_F32 imm:$off, (CONST_I32 0), F32:$val)>;
def : Pat<(store F64:$val, imm:$off),
          (STORE_F64 imm:$off, (CONST_I32 0), F64:$val)>;
def : Pat<(store I32:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE_I32 tglobaladdr:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(store I64:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE_I64 tglobaladdr:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(store F32:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE_F32 tglobaladdr:$off, (CONST_I32 0), F32:$val)>;
def : Pat<(store F64:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE_F64 tglobaladdr:$off, (CONST_I32 0), F64:$val)>;
def : Pat<(store I32:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE_I32 texternalsym:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(store I64:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE_I64 texternalsym:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(store F32:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE_F32 texternalsym:$off, (CONST_I32 0), F32:$val)>;
def : Pat<(store F64:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE_F64 texternalsym:$off, (CONST_I32 0), F64:$val)>;

let Defs = [ARGUMENTS] in {

// Truncating store.
def STORE8_I32  : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr, I32:$val), [],
                    "i32.store8\t$dst, ${off}(${addr}), $val">;
def STORE16_I32 : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr, I32:$val), [],
                    "i32.store16\t$dst, ${off}(${addr}), $val">;
def STORE8_I64  : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr, I64:$val), [],
                    "i64.store8\t$dst, ${off}(${addr}), $val">;
def STORE16_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr, I64:$val), [],
                    "i64.store16\t$dst, ${off}(${addr}), $val">;
def STORE32_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr, I64:$val), [],
                    "i64.store32\t$dst, ${off}(${addr}), $val">;

} // Defs = [ARGUMENTS]

// Select truncating stores with no constant offset.
def : Pat<(truncstorei8 I32:$val, I32:$addr),
          (STORE8_I32 0, I32:$addr, I32:$val)>;
def : Pat<(truncstorei16 I32:$val, I32:$addr),
          (STORE16_I32 0, I32:$addr, I32:$val)>;
def : Pat<(truncstorei8 I64:$val, I32:$addr),
          (STORE8_I64 0, I32:$addr, I64:$val)>;
def : Pat<(truncstorei16 I64:$val, I32:$addr),
          (STORE16_I64 0, I32:$addr, I64:$val)>;
def : Pat<(truncstorei32 I64:$val, I32:$addr),
          (STORE32_I64 0, I32:$addr, I64:$val)>;

// Select truncating stores with a constant offset.
def : Pat<(truncstorei8 I32:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE8_I32 imm:$off, I32:$addr, I32:$val)>;
def : Pat<(truncstorei16 I32:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE16_I32 imm:$off, I32:$addr, I32:$val)>;
def : Pat<(truncstorei8 I64:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE8_I64 imm:$off, I32:$addr, I64:$val)>;
def : Pat<(truncstorei16 I64:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE16_I64 imm:$off, I32:$addr, I64:$val)>;
def : Pat<(truncstorei32 I64:$val, (regPlusImm I32:$addr, imm:$off)),
          (STORE32_I64 imm:$off, I32:$addr, I64:$val)>;
def : Pat<(truncstorei8 I32:$val,
                        (regPlusGA I32:$addr,
                                   (WebAssemblywrapper tglobaladdr:$off))),
          (STORE8_I32 tglobaladdr:$off, I32:$addr, I32:$val)>;
def : Pat<(truncstorei16 I32:$val,
                         (regPlusGA I32:$addr,
                                    (WebAssemblywrapper tglobaladdr:$off))),
          (STORE16_I32 tglobaladdr:$off, I32:$addr, I32:$val)>;
def : Pat<(truncstorei8 I64:$val,
                        (regPlusGA I32:$addr,
                                   (WebAssemblywrapper tglobaladdr:$off))),
          (STORE8_I64 tglobaladdr:$off, I32:$addr, I64:$val)>;
def : Pat<(truncstorei16 I64:$val,
                         (regPlusGA I32:$addr,
                                    (WebAssemblywrapper tglobaladdr:$off))),
          (STORE16_I64 tglobaladdr:$off, I32:$addr, I64:$val)>;
def : Pat<(truncstorei32 I64:$val,
                         (regPlusGA I32:$addr,
                                    (WebAssemblywrapper tglobaladdr:$off))),
          (STORE32_I64 tglobaladdr:$off, I32:$addr, I64:$val)>;
def : Pat<(truncstorei8 I32:$val, (add I32:$addr,
                                       (WebAssemblywrapper texternalsym:$off))),
          (STORE8_I32 texternalsym:$off, I32:$addr, I32:$val)>;
def : Pat<(truncstorei16 I32:$val,
                         (add I32:$addr,
                              (WebAssemblywrapper texternalsym:$off))),
          (STORE16_I32 texternalsym:$off, I32:$addr, I32:$val)>;
def : Pat<(truncstorei8 I64:$val,
                        (add I32:$addr,
                             (WebAssemblywrapper texternalsym:$off))),
          (STORE8_I64 texternalsym:$off, I32:$addr, I64:$val)>;
def : Pat<(truncstorei16 I64:$val,
                         (add I32:$addr,
                              (WebAssemblywrapper texternalsym:$off))),
          (STORE16_I64 texternalsym:$off, I32:$addr, I64:$val)>;
def : Pat<(truncstorei32 I64:$val,
                         (add I32:$addr,
                              (WebAssemblywrapper texternalsym:$off))),
          (STORE32_I64 texternalsym:$off, I32:$addr, I64:$val)>;

// Select truncating stores with just a constant offset.
def : Pat<(truncstorei8 I32:$val, imm:$off),
          (STORE8_I32 imm:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(truncstorei16 I32:$val, imm:$off),
          (STORE16_I32 imm:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(truncstorei8 I64:$val, imm:$off),
          (STORE8_I64 imm:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(truncstorei16 I64:$val, imm:$off),
          (STORE16_I64 imm:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(truncstorei32 I64:$val, imm:$off),
          (STORE32_I64 imm:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(truncstorei8 I32:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE8_I32 tglobaladdr:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(truncstorei16 I32:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE16_I32 tglobaladdr:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(truncstorei8 I64:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE8_I64 tglobaladdr:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(truncstorei16 I64:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE16_I64 tglobaladdr:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(truncstorei32 I64:$val, (WebAssemblywrapper tglobaladdr:$off)),
          (STORE32_I64 tglobaladdr:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(truncstorei8 I32:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE8_I32 texternalsym:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(truncstorei16 I32:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE16_I32 texternalsym:$off, (CONST_I32 0), I32:$val)>;
def : Pat<(truncstorei8 I64:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE8_I64 texternalsym:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(truncstorei16 I64:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE16_I64 texternalsym:$off, (CONST_I32 0), I64:$val)>;
def : Pat<(truncstorei32 I64:$val, (WebAssemblywrapper texternalsym:$off)),
          (STORE32_I64 texternalsym:$off, (CONST_I32 0), I64:$val)>;

let Defs = [ARGUMENTS] in {

// Memory size.
def MEMORY_SIZE_I32 : I<(outs I32:$dst), (ins),
                        [(set I32:$dst, (int_wasm_memory_size))],
                        "memory_size\t$dst">,
                      Requires<[HasAddr32]>;
def MEMORY_SIZE_I64 : I<(outs I64:$dst), (ins),
                        [(set I64:$dst, (int_wasm_memory_size))],
                        "memory_size\t$dst">,
                      Requires<[HasAddr64]>;

// Grow memory.
def GROW_MEMORY_I32 : I<(outs), (ins I32:$delta),
                        [(int_wasm_grow_memory I32:$delta)],
                        "grow_memory\t$delta">,
                      Requires<[HasAddr32]>;
def GROW_MEMORY_I64 : I<(outs), (ins I64:$delta),
                        [(int_wasm_grow_memory I64:$delta)],
                        "grow_memory\t$delta">,
                      Requires<[HasAddr64]>;

} // Defs = [ARGUMENTS]
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a30 12
// Treat an 'or' node as an 'add' if the or'ed bits are known to be zero.
def or_is_add : PatFrag<(ops node:$lhs, node:$rhs), (or node:$lhs, node:$rhs),[{
  if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(N->getOperand(1)))
    return CurDAG->MaskedValueIsZero(N->getOperand(0), CN->getAPIntValue());

  APInt KnownZero0, KnownOne0;
  CurDAG->computeKnownBits(N->getOperand(0), KnownZero0, KnownOne0, 0);
  APInt KnownZero1, KnownOne1;
  CurDAG->computeKnownBits(N->getOperand(1), KnownZero1, KnownOne1, 0);
  return (~KnownZero0 & ~KnownZero1) == 0;
}]>;

d49 8
a56 12
def LOAD_I32 : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr,
                                   P2Align:$p2align), [],
                 "i32.load\t$dst, ${off}(${addr})${p2align}">;
def LOAD_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                   P2Align:$p2align), [],
                 "i64.load\t$dst, ${off}(${addr})${p2align}">;
def LOAD_F32 : I<(outs F32:$dst), (ins i32imm:$off, I32:$addr,
                                   P2Align:$p2align), [],
                 "f32.load\t$dst, ${off}(${addr})${p2align}">;
def LOAD_F64 : I<(outs F64:$dst), (ins i32imm:$off, I32:$addr,
                                   P2Align:$p2align), [],
                 "f64.load\t$dst, ${off}(${addr})${p2align}">;
d61 4
a64 4
def : Pat<(i32 (load I32:$addr)), (LOAD_I32 0, $addr, 0)>;
def : Pat<(i64 (load I32:$addr)), (LOAD_I64 0, $addr, 0)>;
def : Pat<(f32 (load I32:$addr)), (LOAD_F32 0, $addr, 0)>;
def : Pat<(f64 (load I32:$addr)), (LOAD_F64 0, $addr, 0)>;
d68 1
a68 1
          (LOAD_I32 imm:$off, $addr, 0)>;
d70 1
a70 1
          (LOAD_I64 imm:$off, $addr, 0)>;
d72 1
a72 1
          (LOAD_F32 imm:$off, $addr, 0)>;
d74 1
a74 9
          (LOAD_F64 imm:$off, $addr, 0)>;
def : Pat<(i32 (load (or_is_add I32:$addr, imm:$off))),
          (LOAD_I32 imm:$off, $addr, 0)>;
def : Pat<(i64 (load (or_is_add I32:$addr, imm:$off))),
          (LOAD_I64 imm:$off, $addr, 0)>;
def : Pat<(f32 (load (or_is_add I32:$addr, imm:$off))),
          (LOAD_F32 imm:$off, $addr, 0)>;
def : Pat<(f64 (load (or_is_add I32:$addr, imm:$off))),
          (LOAD_F64 imm:$off, $addr, 0)>;
d77 1
a77 1
          (LOAD_I32 tglobaladdr:$off, $addr, 0)>;
d80 1
a80 1
          (LOAD_I64 tglobaladdr:$off, $addr, 0)>;
d83 1
a83 1
          (LOAD_F32 tglobaladdr:$off, $addr, 0)>;
d86 1
a86 1
          (LOAD_F64 tglobaladdr:$off, $addr, 0)>;
d88 1
a88 1
          (LOAD_I32 texternalsym:$off, $addr, 0)>;
d90 1
a90 1
          (LOAD_I64 texternalsym:$off, $addr, 0)>;
d92 1
a92 1
          (LOAD_F32 texternalsym:$off, $addr, 0)>;
d94 1
a94 1
          (LOAD_F64 texternalsym:$off, $addr, 0)>;
d97 4
a100 4
def : Pat<(i32 (load imm:$off)), (LOAD_I32 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (load imm:$off)), (LOAD_I64 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(f32 (load imm:$off)), (LOAD_F32 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(f64 (load imm:$off)), (LOAD_F64 imm:$off, (CONST_I32 0), 0)>;
d102 1
a102 1
          (LOAD_I32 tglobaladdr:$off, (CONST_I32 0), 0)>;
d104 1
a104 1
          (LOAD_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d106 1
a106 1
          (LOAD_F32 tglobaladdr:$off, (CONST_I32 0), 0)>;
d108 1
a108 1
          (LOAD_F64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d110 1
a110 1
          (LOAD_I32 texternalsym:$off, (CONST_I32 0), 0)>;
d112 1
a112 1
          (LOAD_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d114 1
a114 1
          (LOAD_F32 texternalsym:$off, (CONST_I32 0), 0)>;
d116 1
a116 1
          (LOAD_F64 texternalsym:$off, (CONST_I32 0), 0)>;
d121 20
a140 30
def LOAD8_S_I32  : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i32.load8_s\t$dst, ${off}(${addr})${p2align}">;
def LOAD8_U_I32  : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i32.load8_u\t$dst, ${off}(${addr})${p2align}">;
def LOAD16_S_I32 : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i32.load16_s\t$dst, ${off}(${addr})${p2align}">;
def LOAD16_U_I32 : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i32.load16_u\t$dst, ${off}(${addr})${p2align}">;
def LOAD8_S_I64  : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i64.load8_s\t$dst, ${off}(${addr})${p2align}">;
def LOAD8_U_I64  : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i64.load8_u\t$dst, ${off}(${addr})${p2align}">;
def LOAD16_S_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i64.load16_s\t$dst, ${off}(${addr})${p2align}">;
def LOAD16_U_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i64.load16_u\t$dst, ${off}(${addr})${p2align}">;
def LOAD32_S_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i64.load32_s\t$dst, ${off}(${addr})${p2align}">;
def LOAD32_U_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                       P2Align:$p2align), [],
                     "i64.load32_u\t$dst, ${off}(${addr})${p2align}">;
d145 10
a154 10
def : Pat<(i32 (sextloadi8 I32:$addr)), (LOAD8_S_I32 0, $addr, 0)>;
def : Pat<(i32 (zextloadi8 I32:$addr)), (LOAD8_U_I32 0, $addr, 0)>;
def : Pat<(i32 (sextloadi16 I32:$addr)), (LOAD16_S_I32 0, $addr, 0)>;
def : Pat<(i32 (zextloadi16 I32:$addr)), (LOAD16_U_I32 0, $addr, 0)>;
def : Pat<(i64 (sextloadi8 I32:$addr)), (LOAD8_S_I64 0, $addr, 0)>;
def : Pat<(i64 (zextloadi8 I32:$addr)), (LOAD8_U_I64 0, $addr, 0)>;
def : Pat<(i64 (sextloadi16 I32:$addr)), (LOAD16_S_I64 0, $addr, 0)>;
def : Pat<(i64 (zextloadi16 I32:$addr)), (LOAD16_U_I64 0, $addr, 0)>;
def : Pat<(i64 (sextloadi32 I32:$addr)), (LOAD32_S_I64 0, $addr, 0)>;
def : Pat<(i64 (zextloadi32 I32:$addr)), (LOAD32_U_I64 0, $addr, 0)>;
d158 1
a158 1
          (LOAD8_S_I32 imm:$off, $addr, 0)>;
d160 1
a160 1
          (LOAD8_U_I32 imm:$off, $addr, 0)>;
d162 1
a162 1
          (LOAD16_S_I32 imm:$off, $addr, 0)>;
d164 1
a164 1
          (LOAD16_U_I32 imm:$off, $addr, 0)>;
d166 1
a166 1
          (LOAD8_S_I64 imm:$off, $addr, 0)>;
d168 1
a168 1
          (LOAD8_U_I64 imm:$off, $addr, 0)>;
d170 1
a170 1
          (LOAD16_S_I64 imm:$off, $addr, 0)>;
d172 1
a172 1
          (LOAD16_U_I64 imm:$off, $addr, 0)>;
d174 1
a174 1
          (LOAD32_S_I64 imm:$off, $addr, 0)>;
d176 1
a176 21
          (LOAD32_U_I64 imm:$off, $addr, 0)>;
def : Pat<(i32 (sextloadi8 (or_is_add I32:$addr, imm:$off))),
          (LOAD8_S_I32 imm:$off, $addr, 0)>;
def : Pat<(i32 (zextloadi8 (or_is_add I32:$addr, imm:$off))),
          (LOAD8_U_I32 imm:$off, $addr, 0)>;
def : Pat<(i32 (sextloadi16 (or_is_add I32:$addr, imm:$off))),
          (LOAD16_S_I32 imm:$off, $addr, 0)>;
def : Pat<(i32 (zextloadi16 (or_is_add I32:$addr, imm:$off))),
          (LOAD16_U_I32 imm:$off, $addr, 0)>;
def : Pat<(i64 (sextloadi8 (or_is_add I32:$addr, imm:$off))),
          (LOAD8_S_I64 imm:$off, $addr, 0)>;
def : Pat<(i64 (zextloadi8 (or_is_add I32:$addr, imm:$off))),
          (LOAD8_U_I64 imm:$off, $addr, 0)>;
def : Pat<(i64 (sextloadi16 (or_is_add I32:$addr, imm:$off))),
          (LOAD16_S_I64 imm:$off, $addr, 0)>;
def : Pat<(i64 (zextloadi16 (or_is_add I32:$addr, imm:$off))),
          (LOAD16_U_I64 imm:$off, $addr, 0)>;
def : Pat<(i64 (sextloadi32 (or_is_add I32:$addr, imm:$off))),
          (LOAD32_S_I64 imm:$off, $addr, 0)>;
def : Pat<(i64 (zextloadi32 (or_is_add I32:$addr, imm:$off))),
          (LOAD32_U_I64 imm:$off, $addr, 0)>;
d179 1
a179 1
          (LOAD8_S_I32 tglobaladdr:$off, $addr, 0)>;
d182 1
a182 1
          (LOAD8_U_I32 tglobaladdr:$off, $addr, 0)>;
d185 1
a185 1
          (LOAD16_S_I32 tglobaladdr:$off, $addr, 0)>;
d188 1
a188 1
          (LOAD16_U_I32 tglobaladdr:$off, $addr, 0)>;
d191 1
a191 1
          (LOAD8_S_I64 tglobaladdr:$off, $addr, 0)>;
d194 1
a194 1
          (LOAD8_U_I64 tglobaladdr:$off, $addr, 0)>;
d197 1
a197 1
          (LOAD16_S_I64 tglobaladdr:$off, $addr, 0)>;
d200 1
a200 1
          (LOAD16_U_I64 tglobaladdr:$off, $addr, 0)>;
d203 1
a203 1
          (LOAD32_S_I64 tglobaladdr:$off, $addr, 0)>;
d206 1
a206 1
          (LOAD32_U_I64 tglobaladdr:$off, $addr, 0)>;
d209 1
a209 1
          (LOAD8_S_I32 texternalsym:$off, $addr, 0)>;
d212 1
a212 1
          (LOAD8_U_I32 texternalsym:$off, $addr, 0)>;
d215 1
a215 1
          (LOAD16_S_I32 texternalsym:$off, $addr, 0)>;
d218 1
a218 1
          (LOAD16_U_I32 texternalsym:$off, $addr, 0)>;
d221 1
a221 1
          (LOAD8_S_I64 texternalsym:$off, $addr, 0)>;
d224 1
a224 1
          (LOAD8_U_I64 texternalsym:$off, $addr, 0)>;
d227 1
a227 1
          (LOAD16_S_I64 texternalsym:$off, $addr, 0)>;
d230 1
a230 1
          (LOAD16_U_I64 texternalsym:$off, $addr, 0)>;
d233 1
a233 1
          (LOAD32_S_I64 texternalsym:$off, $addr, 0)>;
d236 1
a236 1
          (LOAD32_U_I64 texternalsym:$off, $addr, 0)>;
d239 10
a248 20
def : Pat<(i32 (sextloadi8 imm:$off)),
          (LOAD8_S_I32 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i32 (zextloadi8 imm:$off)),
          (LOAD8_U_I32 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i32 (sextloadi16 imm:$off)),
          (LOAD16_S_I32 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i32 (zextloadi16 imm:$off)),
          (LOAD16_U_I32 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (sextloadi8 imm:$off)),
          (LOAD8_S_I64 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (zextloadi8 imm:$off)),
          (LOAD8_U_I64 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (sextloadi16 imm:$off)),
          (LOAD16_S_I64 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (zextloadi16 imm:$off)),
          (LOAD16_U_I64 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (sextloadi32 imm:$off)),
          (LOAD32_S_I64 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (zextloadi32 imm:$off)),
          (LOAD32_U_I64 imm:$off, (CONST_I32 0), 0)>;
d250 1
a250 1
          (LOAD8_S_I32 tglobaladdr:$off, (CONST_I32 0), 0)>;
d252 1
a252 1
          (LOAD8_U_I32 tglobaladdr:$off, (CONST_I32 0), 0)>;
d254 1
a254 1
          (LOAD16_S_I32 tglobaladdr:$off, (CONST_I32 0), 0)>;
d256 1
a256 1
          (LOAD16_U_I32 tglobaladdr:$off, (CONST_I32 0), 0)>;
d258 1
a258 1
          (LOAD8_S_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d260 1
a260 1
          (LOAD8_U_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d262 1
a262 1
          (LOAD16_S_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d264 1
a264 1
          (LOAD16_U_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d266 1
a266 1
          (LOAD32_S_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d268 1
a268 1
          (LOAD32_U_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d270 1
a270 1
          (LOAD8_S_I32 texternalsym:$off, (CONST_I32 0), 0)>;
d272 1
a272 1
          (LOAD8_U_I32 texternalsym:$off, (CONST_I32 0), 0)>;
d274 1
a274 1
          (LOAD16_S_I32 texternalsym:$off, (CONST_I32 0), 0)>;
d276 1
a276 1
          (LOAD16_U_I32 texternalsym:$off, (CONST_I32 0), 0)>;
d278 1
a278 1
          (LOAD8_S_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d280 1
a280 1
          (LOAD8_U_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d282 1
a282 1
          (LOAD16_S_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d284 1
a284 1
          (LOAD16_U_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d286 1
a286 1
          (LOAD32_S_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d288 1
a288 1
          (LOAD32_U_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d294 5
a298 5
def : Pat<(i32 (extloadi8 I32:$addr)),  (LOAD8_U_I32 0, $addr, 0)>;
def : Pat<(i32 (extloadi16 I32:$addr)), (LOAD16_U_I32 0, $addr, 0)>;
def : Pat<(i64 (extloadi8 I32:$addr)),  (LOAD8_U_I64 0, $addr, 0)>;
def : Pat<(i64 (extloadi16 I32:$addr)), (LOAD16_U_I64 0, $addr, 0)>;
def : Pat<(i64 (extloadi32 I32:$addr)), (LOAD32_U_I64 0, $addr, 0)>;
d302 1
a302 1
          (LOAD8_U_I32 imm:$off, $addr, 0)>;
d304 1
a304 1
          (LOAD16_U_I32 imm:$off, $addr, 0)>;
d306 1
a306 1
          (LOAD8_U_I64 imm:$off, $addr, 0)>;
d308 1
a308 1
          (LOAD16_U_I64 imm:$off, $addr, 0)>;
d310 1
a310 11
          (LOAD32_U_I64 imm:$off, $addr, 0)>;
def : Pat<(i32 (extloadi8 (or_is_add I32:$addr, imm:$off))),
          (LOAD8_U_I32 imm:$off, $addr, 0)>;
def : Pat<(i32 (extloadi16 (or_is_add I32:$addr, imm:$off))),
          (LOAD16_U_I32 imm:$off, $addr, 0)>;
def : Pat<(i64 (extloadi8 (or_is_add I32:$addr, imm:$off))),
          (LOAD8_U_I64 imm:$off, $addr, 0)>;
def : Pat<(i64 (extloadi16 (or_is_add I32:$addr, imm:$off))),
          (LOAD16_U_I64 imm:$off, $addr, 0)>;
def : Pat<(i64 (extloadi32 (or_is_add I32:$addr, imm:$off))),
          (LOAD32_U_I64 imm:$off, $addr, 0)>;
d313 1
a313 1
          (LOAD8_U_I32 tglobaladdr:$off, $addr, 0)>;
d316 1
a316 1
          (LOAD16_U_I32 tglobaladdr:$off, $addr, 0)>;
d319 1
a319 1
          (LOAD8_U_I64 tglobaladdr:$off, $addr, 0)>;
d322 1
a322 1
          (LOAD16_U_I64 tglobaladdr:$off, $addr, 0)>;
d325 1
a325 1
          (LOAD32_U_I64 tglobaladdr:$off, $addr, 0)>;
d328 1
a328 1
          (LOAD8_U_I32 texternalsym:$off, $addr, 0)>;
d331 1
a331 1
          (LOAD16_U_I32 texternalsym:$off, $addr, 0)>;
d334 1
a334 1
          (LOAD8_U_I64 texternalsym:$off, $addr, 0)>;
d337 1
a337 1
          (LOAD16_U_I64 texternalsym:$off, $addr, 0)>;
d340 1
a340 1
          (LOAD32_U_I64 texternalsym:$off, $addr, 0)>;
d343 5
a347 10
def : Pat<(i32 (extloadi8 imm:$off)),
          (LOAD8_U_I32 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i32 (extloadi16 imm:$off)),
          (LOAD16_U_I32 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (extloadi8 imm:$off)),
          (LOAD8_U_I64 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (extloadi16 imm:$off)),
          (LOAD16_U_I64 imm:$off, (CONST_I32 0), 0)>;
def : Pat<(i64 (extloadi32 imm:$off)),
          (LOAD32_U_I64 imm:$off, (CONST_I32 0), 0)>;
d349 1
a349 1
          (LOAD8_U_I32 tglobaladdr:$off, (CONST_I32 0), 0)>;
d351 1
a351 1
          (LOAD16_U_I32 tglobaladdr:$off, (CONST_I32 0), 0)>;
d353 1
a353 1
          (LOAD8_U_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d355 1
a355 1
          (LOAD16_U_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d357 1
a357 1
          (LOAD32_U_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d359 1
a359 1
          (LOAD8_U_I32 texternalsym:$off, (CONST_I32 0), 0)>;
d361 1
a361 1
          (LOAD16_U_I32 texternalsym:$off, (CONST_I32 0), 0)>;
d363 1
a363 1
          (LOAD8_U_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d365 1
a365 1
          (LOAD16_U_I64 texternalsym:$off, (CONST_I32 0), 0)>;
d367 1
a367 1
          (LOAD32_U_I64 tglobaladdr:$off, (CONST_I32 0), 0)>;
d377 8
a384 12
def STORE_I32  : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr,
                                     P2Align:$p2align, I32:$val), [],
                   "i32.store\t$dst, ${off}(${addr})${p2align}, $val">;
def STORE_I64  : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                     P2Align:$p2align, I64:$val), [],
                   "i64.store\t$dst, ${off}(${addr})${p2align}, $val">;
def STORE_F32  : I<(outs F32:$dst), (ins i32imm:$off, I32:$addr,
                                     P2Align:$p2align, F32:$val), [],
                   "f32.store\t$dst, ${off}(${addr})${p2align}, $val">;
def STORE_F64  : I<(outs F64:$dst), (ins i32imm:$off, I32:$addr,
                                     P2Align:$p2align, F64:$val), [],
                   "f64.store\t$dst, ${off}(${addr})${p2align}, $val">;
d389 4
a392 4
def : Pat<(store I32:$val, I32:$addr), (STORE_I32 0, I32:$addr, 0, I32:$val)>;
def : Pat<(store I64:$val, I32:$addr), (STORE_I64 0, I32:$addr, 0, I64:$val)>;
def : Pat<(store F32:$val, I32:$addr), (STORE_F32 0, I32:$addr, 0, F32:$val)>;
def : Pat<(store F64:$val, I32:$addr), (STORE_F64 0, I32:$addr, 0, F64:$val)>;
d396 1
a396 1
          (STORE_I32 imm:$off, I32:$addr, 0, I32:$val)>;
d398 1
a398 1
          (STORE_I64 imm:$off, I32:$addr, 0, I64:$val)>;
d400 1
a400 1
          (STORE_F32 imm:$off, I32:$addr, 0, F32:$val)>;
d402 1
a402 9
          (STORE_F64 imm:$off, I32:$addr, 0, F64:$val)>;
def : Pat<(store I32:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE_I32 imm:$off, I32:$addr, 0, I32:$val)>;
def : Pat<(store I64:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE_I64 imm:$off, I32:$addr, 0, I64:$val)>;
def : Pat<(store F32:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE_F32 imm:$off, I32:$addr, 0, F32:$val)>;
def : Pat<(store F64:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE_F64 imm:$off, I32:$addr, 0, F64:$val)>;
d405 1
a405 1
          (STORE_I32 tglobaladdr:$off, I32:$addr, 0, I32:$val)>;
d408 1
a408 1
          (STORE_I64 tglobaladdr:$off, I32:$addr, 0, I64:$val)>;
d411 1
a411 1
          (STORE_F32 tglobaladdr:$off, I32:$addr, 0, F32:$val)>;
d414 1
a414 1
          (STORE_F64 tglobaladdr:$off, I32:$addr, 0, F64:$val)>;
d417 1
a417 1
          (STORE_I32 texternalsym:$off, I32:$addr, 0, I32:$val)>;
d420 1
a420 1
          (STORE_I64 texternalsym:$off, I32:$addr, 0, I64:$val)>;
d423 1
a423 1
          (STORE_F32 texternalsym:$off, I32:$addr, 0, F32:$val)>;
d426 1
a426 1
          (STORE_F64 texternalsym:$off, I32:$addr, 0, F64:$val)>;
d430 1
a430 1
          (STORE_I32 imm:$off, (CONST_I32 0), 0, I32:$val)>;
d432 1
a432 1
          (STORE_I64 imm:$off, (CONST_I32 0), 0, I64:$val)>;
d434 1
a434 1
          (STORE_F32 imm:$off, (CONST_I32 0), 0, F32:$val)>;
d436 1
a436 1
          (STORE_F64 imm:$off, (CONST_I32 0), 0, F64:$val)>;
d438 1
a438 1
          (STORE_I32 tglobaladdr:$off, (CONST_I32 0), 0, I32:$val)>;
d440 1
a440 1
          (STORE_I64 tglobaladdr:$off, (CONST_I32 0), 0, I64:$val)>;
d442 1
a442 1
          (STORE_F32 tglobaladdr:$off, (CONST_I32 0), 0, F32:$val)>;
d444 1
a444 1
          (STORE_F64 tglobaladdr:$off, (CONST_I32 0), 0, F64:$val)>;
d446 1
a446 1
          (STORE_I32 texternalsym:$off, (CONST_I32 0), 0, I32:$val)>;
d448 1
a448 1
          (STORE_I64 texternalsym:$off, (CONST_I32 0), 0, I64:$val)>;
d450 1
a450 1
          (STORE_F32 texternalsym:$off, (CONST_I32 0), 0, F32:$val)>;
d452 1
a452 1
          (STORE_F64 texternalsym:$off, (CONST_I32 0), 0, F64:$val)>;
d457 10
a466 15
def STORE8_I32  : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr,
                                      P2Align:$p2align, I32:$val), [],
                    "i32.store8\t$dst, ${off}(${addr})${p2align}, $val">;
def STORE16_I32 : I<(outs I32:$dst), (ins i32imm:$off, I32:$addr,
                                      P2Align:$p2align, I32:$val), [],
                    "i32.store16\t$dst, ${off}(${addr})${p2align}, $val">;
def STORE8_I64  : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                      P2Align:$p2align, I64:$val), [],
                    "i64.store8\t$dst, ${off}(${addr})${p2align}, $val">;
def STORE16_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                      P2Align:$p2align, I64:$val), [],
                    "i64.store16\t$dst, ${off}(${addr})${p2align}, $val">;
def STORE32_I64 : I<(outs I64:$dst), (ins i32imm:$off, I32:$addr,
                                      P2Align:$p2align, I64:$val), [],
                    "i64.store32\t$dst, ${off}(${addr})${p2align}, $val">;
d472 1
a472 1
          (STORE8_I32 0, I32:$addr, 0, I32:$val)>;
d474 1
a474 1
          (STORE16_I32 0, I32:$addr, 0, I32:$val)>;
d476 1
a476 1
          (STORE8_I64 0, I32:$addr, 0, I64:$val)>;
d478 1
a478 1
          (STORE16_I64 0, I32:$addr, 0, I64:$val)>;
d480 1
a480 1
          (STORE32_I64 0, I32:$addr, 0, I64:$val)>;
d484 1
a484 1
          (STORE8_I32 imm:$off, I32:$addr, 0, I32:$val)>;
d486 1
a486 1
          (STORE16_I32 imm:$off, I32:$addr, 0, I32:$val)>;
d488 1
a488 1
          (STORE8_I64 imm:$off, I32:$addr, 0, I64:$val)>;
d490 1
a490 1
          (STORE16_I64 imm:$off, I32:$addr, 0, I64:$val)>;
d492 1
a492 11
          (STORE32_I64 imm:$off, I32:$addr, 0, I64:$val)>;
def : Pat<(truncstorei8 I32:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE8_I32 imm:$off, I32:$addr, 0, I32:$val)>;
def : Pat<(truncstorei16 I32:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE16_I32 imm:$off, I32:$addr, 0, I32:$val)>;
def : Pat<(truncstorei8 I64:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE8_I64 imm:$off, I32:$addr, 0, I64:$val)>;
def : Pat<(truncstorei16 I64:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE16_I64 imm:$off, I32:$addr, 0, I64:$val)>;
def : Pat<(truncstorei32 I64:$val, (or_is_add I32:$addr, imm:$off)),
          (STORE32_I64 imm:$off, I32:$addr, 0, I64:$val)>;
d496 1
a496 1
          (STORE8_I32 tglobaladdr:$off, I32:$addr, 0, I32:$val)>;
d500 1
a500 1
          (STORE16_I32 tglobaladdr:$off, I32:$addr, 0, I32:$val)>;
d504 1
a504 1
          (STORE8_I64 tglobaladdr:$off, I32:$addr, 0, I64:$val)>;
d508 1
a508 1
          (STORE16_I64 tglobaladdr:$off, I32:$addr, 0, I64:$val)>;
d512 1
a512 1
          (STORE32_I64 tglobaladdr:$off, I32:$addr, 0, I64:$val)>;
d515 1
a515 1
          (STORE8_I32 texternalsym:$off, I32:$addr, 0, I32:$val)>;
d519 1
a519 1
          (STORE16_I32 texternalsym:$off, I32:$addr, 0, I32:$val)>;
d523 1
a523 1
          (STORE8_I64 texternalsym:$off, I32:$addr, 0, I64:$val)>;
d527 1
a527 1
          (STORE16_I64 texternalsym:$off, I32:$addr, 0, I64:$val)>;
d531 1
a531 1
          (STORE32_I64 texternalsym:$off, I32:$addr, 0, I64:$val)>;
d535 1
a535 1
          (STORE8_I32 imm:$off, (CONST_I32 0), 0, I32:$val)>;
d537 1
a537 1
          (STORE16_I32 imm:$off, (CONST_I32 0), 0, I32:$val)>;
d539 1
a539 1
          (STORE8_I64 imm:$off, (CONST_I32 0), 0, I64:$val)>;
d541 1
a541 1
          (STORE16_I64 imm:$off, (CONST_I32 0), 0, I64:$val)>;
d543 1
a543 1
          (STORE32_I64 imm:$off, (CONST_I32 0), 0, I64:$val)>;
d545 1
a545 1
          (STORE8_I32 tglobaladdr:$off, (CONST_I32 0), 0, I32:$val)>;
d547 1
a547 1
          (STORE16_I32 tglobaladdr:$off, (CONST_I32 0), 0, I32:$val)>;
d549 1
a549 1
          (STORE8_I64 tglobaladdr:$off, (CONST_I32 0), 0, I64:$val)>;
d551 1
a551 1
          (STORE16_I64 tglobaladdr:$off, (CONST_I32 0), 0, I64:$val)>;
d553 1
a553 1
          (STORE32_I64 tglobaladdr:$off, (CONST_I32 0), 0, I64:$val)>;
d555 1
a555 1
          (STORE8_I32 texternalsym:$off, (CONST_I32 0), 0, I32:$val)>;
d557 1
a557 1
          (STORE16_I32 texternalsym:$off, (CONST_I32 0), 0, I32:$val)>;
d559 1
a559 1
          (STORE8_I64 texternalsym:$off, (CONST_I32 0), 0, I64:$val)>;
d561 1
a561 1
          (STORE16_I64 texternalsym:$off, (CONST_I32 0), 0, I64:$val)>;
d563 1
a563 1
          (STORE32_I64 texternalsym:$off, (CONST_I32 0), 0, I64:$val)>;
d567 9
a575 9
// Current memory size.
def CURRENT_MEMORY_I32 : I<(outs I32:$dst), (ins),
                           [(set I32:$dst, (int_wasm_current_memory))],
                           "current_memory\t$dst">,
                         Requires<[HasAddr32]>;
def CURRENT_MEMORY_I64 : I<(outs I64:$dst), (ins),
                           [(set I64:$dst, (int_wasm_current_memory))],
                           "current_memory\t$dst">,
                         Requires<[HasAddr64]>;
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d44 1
a44 3
// into immediate values as long as the add is 'nuw'.
// TODO: We'd like to also match GA offsets but there are cases where the
// register can have a negative value. Find out what more we can do.
d48 5
a52 1
  return N->getFlags()->hasNoUnsignedWrap();
d61 12
a72 14
// FIXME: When we can break syntax compatibility, reorder the fields in the
// asmstrings to match the binary encoding.
def LOAD_I32 : I<(outs I32:$dst),
                 (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                 [], "i32.load\t$dst, ${off}(${addr})${p2align}", 0x28>;
def LOAD_I64 : I<(outs I64:$dst),
                 (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                 [], "i64.load\t$dst, ${off}(${addr})${p2align}", 0x29>;
def LOAD_F32 : I<(outs F32:$dst),
                 (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                 [], "f32.load\t$dst, ${off}(${addr})${p2align}", 0x2a>;
def LOAD_F64 : I<(outs F64:$dst),
                 (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                 [], "f64.load\t$dst, ${off}(${addr})${p2align}", 0x2b>;
d77 4
a80 4
def : Pat<(i32 (load I32:$addr)), (LOAD_I32 0, 0, $addr)>;
def : Pat<(i64 (load I32:$addr)), (LOAD_I64 0, 0, $addr)>;
def : Pat<(f32 (load I32:$addr)), (LOAD_F32 0, 0, $addr)>;
def : Pat<(f64 (load I32:$addr)), (LOAD_F64 0, 0, $addr)>;
d84 1
a84 1
          (LOAD_I32 0, imm:$off, $addr)>;
d86 1
a86 1
          (LOAD_I64 0, imm:$off, $addr)>;
d88 1
a88 1
          (LOAD_F32 0, imm:$off, $addr)>;
d90 1
a90 1
          (LOAD_F64 0, imm:$off, $addr)>;
d92 1
a92 1
          (LOAD_I32 0, imm:$off, $addr)>;
d94 1
a94 1
          (LOAD_I64 0, imm:$off, $addr)>;
d96 1
a96 1
          (LOAD_F32 0, imm:$off, $addr)>;
d98 1
a98 1
          (LOAD_F64 0, imm:$off, $addr)>;
d101 1
a101 1
          (LOAD_I32 0, tglobaladdr:$off, $addr)>;
d104 1
a104 1
          (LOAD_I64 0, tglobaladdr:$off, $addr)>;
d107 1
a107 1
          (LOAD_F32 0, tglobaladdr:$off, $addr)>;
d110 1
a110 1
          (LOAD_F64 0, tglobaladdr:$off, $addr)>;
d112 1
a112 1
          (LOAD_I32 0, texternalsym:$off, $addr)>;
d114 1
a114 1
          (LOAD_I64 0, texternalsym:$off, $addr)>;
d116 1
a116 1
          (LOAD_F32 0, texternalsym:$off, $addr)>;
d118 1
a118 1
          (LOAD_F64 0, texternalsym:$off, $addr)>;
d121 4
a124 4
def : Pat<(i32 (load imm:$off)), (LOAD_I32 0, imm:$off, (CONST_I32 0))>;
def : Pat<(i64 (load imm:$off)), (LOAD_I64 0, imm:$off, (CONST_I32 0))>;
def : Pat<(f32 (load imm:$off)), (LOAD_F32 0, imm:$off, (CONST_I32 0))>;
def : Pat<(f64 (load imm:$off)), (LOAD_F64 0, imm:$off, (CONST_I32 0))>;
d126 1
a126 1
          (LOAD_I32 0, tglobaladdr:$off, (CONST_I32 0))>;
d128 1
a128 1
          (LOAD_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d130 1
a130 1
          (LOAD_F32 0, tglobaladdr:$off, (CONST_I32 0))>;
d132 1
a132 1
          (LOAD_F64 0, tglobaladdr:$off, (CONST_I32 0))>;
d134 1
a134 1
          (LOAD_I32 0, texternalsym:$off, (CONST_I32 0))>;
d136 1
a136 1
          (LOAD_I64 0, texternalsym:$off, (CONST_I32 0))>;
d138 1
a138 1
          (LOAD_F32 0, texternalsym:$off, (CONST_I32 0))>;
d140 1
a140 1
          (LOAD_F64 0, texternalsym:$off, (CONST_I32 0))>;
d145 30
a174 30
def LOAD8_S_I32  : I<(outs I32:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i32.load8_s\t$dst, ${off}(${addr})${p2align}", 0x2c>;
def LOAD8_U_I32  : I<(outs I32:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i32.load8_u\t$dst, ${off}(${addr})${p2align}", 0x2d>;
def LOAD16_S_I32 : I<(outs I32:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i32.load16_s\t$dst, ${off}(${addr})${p2align}", 0x2e>;
def LOAD16_U_I32 : I<(outs I32:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i32.load16_u\t$dst, ${off}(${addr})${p2align}", 0x2f>;
def LOAD8_S_I64  : I<(outs I64:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i64.load8_s\t$dst, ${off}(${addr})${p2align}", 0x30>;
def LOAD8_U_I64  : I<(outs I64:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i64.load8_u\t$dst, ${off}(${addr})${p2align}", 0x31>;
def LOAD16_S_I64 : I<(outs I64:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i64.load16_s\t$dst, ${off}(${addr})${p2align}", 0x32>;
def LOAD16_U_I64 : I<(outs I64:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i64.load16_u\t$dst, ${off}(${addr})${p2align}", 0x33>;
def LOAD32_S_I64 : I<(outs I64:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i64.load32_s\t$dst, ${off}(${addr})${p2align}", 0x34>;
def LOAD32_U_I64 : I<(outs I64:$dst),
                     (ins P2Align:$p2align, offset32_op:$off, I32:$addr),
                     [], "i64.load32_u\t$dst, ${off}(${addr})${p2align}", 0x35>;
d179 10
a188 10
def : Pat<(i32 (sextloadi8 I32:$addr)), (LOAD8_S_I32 0, 0, $addr)>;
def : Pat<(i32 (zextloadi8 I32:$addr)), (LOAD8_U_I32 0, 0, $addr)>;
def : Pat<(i32 (sextloadi16 I32:$addr)), (LOAD16_S_I32 0, 0, $addr)>;
def : Pat<(i32 (zextloadi16 I32:$addr)), (LOAD16_U_I32 0, 0, $addr)>;
def : Pat<(i64 (sextloadi8 I32:$addr)), (LOAD8_S_I64 0, 0, $addr)>;
def : Pat<(i64 (zextloadi8 I32:$addr)), (LOAD8_U_I64 0, 0, $addr)>;
def : Pat<(i64 (sextloadi16 I32:$addr)), (LOAD16_S_I64 0, 0, $addr)>;
def : Pat<(i64 (zextloadi16 I32:$addr)), (LOAD16_U_I64 0, 0, $addr)>;
def : Pat<(i64 (sextloadi32 I32:$addr)), (LOAD32_S_I64 0, 0, $addr)>;
def : Pat<(i64 (zextloadi32 I32:$addr)), (LOAD32_U_I64 0, 0, $addr)>;
d192 1
a192 1
          (LOAD8_S_I32 0, imm:$off, $addr)>;
d194 1
a194 1
          (LOAD8_U_I32 0, imm:$off, $addr)>;
d196 1
a196 1
          (LOAD16_S_I32 0, imm:$off, $addr)>;
d198 1
a198 1
          (LOAD16_U_I32 0, imm:$off, $addr)>;
d200 1
a200 1
          (LOAD8_S_I64 0, imm:$off, $addr)>;
d202 1
a202 1
          (LOAD8_U_I64 0, imm:$off, $addr)>;
d204 1
a204 1
          (LOAD16_S_I64 0, imm:$off, $addr)>;
d206 1
a206 1
          (LOAD16_U_I64 0, imm:$off, $addr)>;
d208 1
a208 1
          (LOAD32_S_I64 0, imm:$off, $addr)>;
d210 1
a210 1
          (LOAD32_U_I64 0, imm:$off, $addr)>;
d212 1
a212 1
          (LOAD8_S_I32 0, imm:$off, $addr)>;
d214 1
a214 1
          (LOAD8_U_I32 0, imm:$off, $addr)>;
d216 1
a216 1
          (LOAD16_S_I32 0, imm:$off, $addr)>;
d218 1
a218 1
          (LOAD16_U_I32 0, imm:$off, $addr)>;
d220 1
a220 1
          (LOAD8_S_I64 0, imm:$off, $addr)>;
d222 1
a222 1
          (LOAD8_U_I64 0, imm:$off, $addr)>;
d224 1
a224 1
          (LOAD16_S_I64 0, imm:$off, $addr)>;
d226 1
a226 1
          (LOAD16_U_I64 0, imm:$off, $addr)>;
d228 1
a228 1
          (LOAD32_S_I64 0, imm:$off, $addr)>;
d230 1
a230 1
          (LOAD32_U_I64 0, imm:$off, $addr)>;
d233 1
a233 1
          (LOAD8_S_I32 0, tglobaladdr:$off, $addr)>;
d236 1
a236 1
          (LOAD8_U_I32 0, tglobaladdr:$off, $addr)>;
d239 1
a239 1
          (LOAD16_S_I32 0, tglobaladdr:$off, $addr)>;
d242 1
a242 1
          (LOAD16_U_I32 0, tglobaladdr:$off, $addr)>;
d245 1
a245 1
          (LOAD8_S_I64 0, tglobaladdr:$off, $addr)>;
d248 1
a248 1
          (LOAD8_U_I64 0, tglobaladdr:$off, $addr)>;
d251 1
a251 1
          (LOAD16_S_I64 0, tglobaladdr:$off, $addr)>;
d254 1
a254 1
          (LOAD16_U_I64 0, tglobaladdr:$off, $addr)>;
d257 1
a257 1
          (LOAD32_S_I64 0, tglobaladdr:$off, $addr)>;
d260 1
a260 1
          (LOAD32_U_I64 0, tglobaladdr:$off, $addr)>;
d263 1
a263 1
          (LOAD8_S_I32 0, texternalsym:$off, $addr)>;
d266 1
a266 1
          (LOAD8_U_I32 0, texternalsym:$off, $addr)>;
d269 1
a269 1
          (LOAD16_S_I32 0, texternalsym:$off, $addr)>;
d272 1
a272 1
          (LOAD16_U_I32 0, texternalsym:$off, $addr)>;
d275 1
a275 1
          (LOAD8_S_I64 0, texternalsym:$off, $addr)>;
d278 1
a278 1
          (LOAD8_U_I64 0, texternalsym:$off, $addr)>;
d281 1
a281 1
          (LOAD16_S_I64 0, texternalsym:$off, $addr)>;
d284 1
a284 1
          (LOAD16_U_I64 0, texternalsym:$off, $addr)>;
d287 1
a287 1
          (LOAD32_S_I64 0, texternalsym:$off, $addr)>;
d290 1
a290 1
          (LOAD32_U_I64 0, texternalsym:$off, $addr)>;
d294 1
a294 1
          (LOAD8_S_I32 0, imm:$off, (CONST_I32 0))>;
d296 1
a296 1
          (LOAD8_U_I32 0, imm:$off, (CONST_I32 0))>;
d298 1
a298 1
          (LOAD16_S_I32 0, imm:$off, (CONST_I32 0))>;
d300 1
a300 1
          (LOAD16_U_I32 0, imm:$off, (CONST_I32 0))>;
d302 1
a302 1
          (LOAD8_S_I64 0, imm:$off, (CONST_I32 0))>;
d304 1
a304 1
          (LOAD8_U_I64 0, imm:$off, (CONST_I32 0))>;
d306 1
a306 1
          (LOAD16_S_I64 0, imm:$off, (CONST_I32 0))>;
d308 1
a308 1
          (LOAD16_U_I64 0, imm:$off, (CONST_I32 0))>;
d310 1
a310 1
          (LOAD32_S_I64 0, imm:$off, (CONST_I32 0))>;
d312 1
a312 1
          (LOAD32_U_I64 0, imm:$off, (CONST_I32 0))>;
d314 1
a314 1
          (LOAD8_S_I32 0, tglobaladdr:$off, (CONST_I32 0))>;
d316 1
a316 1
          (LOAD8_U_I32 0, tglobaladdr:$off, (CONST_I32 0))>;
d318 1
a318 1
          (LOAD16_S_I32 0, tglobaladdr:$off, (CONST_I32 0))>;
d320 1
a320 1
          (LOAD16_U_I32 0, tglobaladdr:$off, (CONST_I32 0))>;
d322 1
a322 1
          (LOAD8_S_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d324 1
a324 1
          (LOAD8_U_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d326 1
a326 1
          (LOAD16_S_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d328 1
a328 1
          (LOAD16_U_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d330 1
a330 1
          (LOAD32_S_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d332 1
a332 1
          (LOAD32_U_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d334 1
a334 1
          (LOAD8_S_I32 0, texternalsym:$off, (CONST_I32 0))>;
d336 1
a336 1
          (LOAD8_U_I32 0, texternalsym:$off, (CONST_I32 0))>;
d338 1
a338 1
          (LOAD16_S_I32 0, texternalsym:$off, (CONST_I32 0))>;
d340 1
a340 1
          (LOAD16_U_I32 0, texternalsym:$off, (CONST_I32 0))>;
d342 1
a342 1
          (LOAD8_S_I64 0, texternalsym:$off, (CONST_I32 0))>;
d344 1
a344 1
          (LOAD8_U_I64 0, texternalsym:$off, (CONST_I32 0))>;
d346 1
a346 1
          (LOAD16_S_I64 0, texternalsym:$off, (CONST_I32 0))>;
d348 1
a348 1
          (LOAD16_U_I64 0, texternalsym:$off, (CONST_I32 0))>;
d350 1
a350 1
          (LOAD32_S_I64 0, texternalsym:$off, (CONST_I32 0))>;
d352 1
a352 1
          (LOAD32_U_I64 0, texternalsym:$off, (CONST_I32 0))>;
d358 5
a362 5
def : Pat<(i32 (extloadi8 I32:$addr)),  (LOAD8_U_I32 0, 0, $addr)>;
def : Pat<(i32 (extloadi16 I32:$addr)), (LOAD16_U_I32 0, 0, $addr)>;
def : Pat<(i64 (extloadi8 I32:$addr)),  (LOAD8_U_I64 0, 0, $addr)>;
def : Pat<(i64 (extloadi16 I32:$addr)), (LOAD16_U_I64 0, 0, $addr)>;
def : Pat<(i64 (extloadi32 I32:$addr)), (LOAD32_U_I64 0, 0, $addr)>;
d366 1
a366 1
          (LOAD8_U_I32 0, imm:$off, $addr)>;
d368 1
a368 1
          (LOAD16_U_I32 0, imm:$off, $addr)>;
d370 1
a370 1
          (LOAD8_U_I64 0, imm:$off, $addr)>;
d372 1
a372 1
          (LOAD16_U_I64 0, imm:$off, $addr)>;
d374 1
a374 1
          (LOAD32_U_I64 0, imm:$off, $addr)>;
d376 1
a376 1
          (LOAD8_U_I32 0, imm:$off, $addr)>;
d378 1
a378 1
          (LOAD16_U_I32 0, imm:$off, $addr)>;
d380 1
a380 1
          (LOAD8_U_I64 0, imm:$off, $addr)>;
d382 1
a382 1
          (LOAD16_U_I64 0, imm:$off, $addr)>;
d384 1
a384 1
          (LOAD32_U_I64 0, imm:$off, $addr)>;
d387 1
a387 1
          (LOAD8_U_I32 0, tglobaladdr:$off, $addr)>;
d390 1
a390 1
          (LOAD16_U_I32 0, tglobaladdr:$off, $addr)>;
d393 1
a393 1
          (LOAD8_U_I64 0, tglobaladdr:$off, $addr)>;
d396 1
a396 1
          (LOAD16_U_I64 0, tglobaladdr:$off, $addr)>;
d399 1
a399 1
          (LOAD32_U_I64 0, tglobaladdr:$off, $addr)>;
d402 1
a402 1
          (LOAD8_U_I32 0, texternalsym:$off, $addr)>;
d405 1
a405 1
          (LOAD16_U_I32 0, texternalsym:$off, $addr)>;
d408 1
a408 1
          (LOAD8_U_I64 0, texternalsym:$off, $addr)>;
d411 1
a411 1
          (LOAD16_U_I64 0, texternalsym:$off, $addr)>;
d414 1
a414 1
          (LOAD32_U_I64 0, texternalsym:$off, $addr)>;
d418 1
a418 1
          (LOAD8_U_I32 0, imm:$off, (CONST_I32 0))>;
d420 1
a420 1
          (LOAD16_U_I32 0, imm:$off, (CONST_I32 0))>;
d422 1
a422 1
          (LOAD8_U_I64 0, imm:$off, (CONST_I32 0))>;
d424 1
a424 1
          (LOAD16_U_I64 0, imm:$off, (CONST_I32 0))>;
d426 1
a426 1
          (LOAD32_U_I64 0, imm:$off, (CONST_I32 0))>;
d428 1
a428 1
          (LOAD8_U_I32 0, tglobaladdr:$off, (CONST_I32 0))>;
d430 1
a430 1
          (LOAD16_U_I32 0, tglobaladdr:$off, (CONST_I32 0))>;
d432 1
a432 1
          (LOAD8_U_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d434 1
a434 1
          (LOAD16_U_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d436 1
a436 1
          (LOAD32_U_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d438 1
a438 1
          (LOAD8_U_I32 0, texternalsym:$off, (CONST_I32 0))>;
d440 1
a440 1
          (LOAD16_U_I32 0, texternalsym:$off, (CONST_I32 0))>;
d442 1
a442 1
          (LOAD8_U_I64 0, texternalsym:$off, (CONST_I32 0))>;
d444 1
a444 1
          (LOAD16_U_I64 0, texternalsym:$off, (CONST_I32 0))>;
d446 1
a446 1
          (LOAD32_U_I64 0, tglobaladdr:$off, (CONST_I32 0))>;
d451 4
d456 12
a467 12
def STORE_I32  : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                            I32:$val), [],
                   "i32.store\t${off}(${addr})${p2align}, $val", 0x36>;
def STORE_I64  : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                            I64:$val), [],
                   "i64.store\t${off}(${addr})${p2align}, $val", 0x37>;
def STORE_F32  : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                            F32:$val), [],
                   "f32.store\t${off}(${addr})${p2align}, $val", 0x38>;
def STORE_F64  : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                            F64:$val), [],
                   "f64.store\t${off}(${addr})${p2align}, $val", 0x39>;
d472 4
a475 4
def : Pat<(store I32:$val, I32:$addr), (STORE_I32 0, 0, I32:$addr, I32:$val)>;
def : Pat<(store I64:$val, I32:$addr), (STORE_I64 0, 0, I32:$addr, I64:$val)>;
def : Pat<(store F32:$val, I32:$addr), (STORE_F32 0, 0, I32:$addr, F32:$val)>;
def : Pat<(store F64:$val, I32:$addr), (STORE_F64 0, 0, I32:$addr, F64:$val)>;
d479 1
a479 1
          (STORE_I32 0, imm:$off, I32:$addr, I32:$val)>;
d481 1
a481 1
          (STORE_I64 0, imm:$off, I32:$addr, I64:$val)>;
d483 1
a483 1
          (STORE_F32 0, imm:$off, I32:$addr, F32:$val)>;
d485 1
a485 1
          (STORE_F64 0, imm:$off, I32:$addr, F64:$val)>;
d487 1
a487 1
          (STORE_I32 0, imm:$off, I32:$addr, I32:$val)>;
d489 1
a489 1
          (STORE_I64 0, imm:$off, I32:$addr, I64:$val)>;
d491 1
a491 1
          (STORE_F32 0, imm:$off, I32:$addr, F32:$val)>;
d493 1
a493 1
          (STORE_F64 0, imm:$off, I32:$addr, F64:$val)>;
d496 1
a496 1
          (STORE_I32 0, tglobaladdr:$off, I32:$addr, I32:$val)>;
d499 1
a499 1
          (STORE_I64 0, tglobaladdr:$off, I32:$addr, I64:$val)>;
d502 1
a502 1
          (STORE_F32 0, tglobaladdr:$off, I32:$addr, F32:$val)>;
d505 1
a505 1
          (STORE_F64 0, tglobaladdr:$off, I32:$addr, F64:$val)>;
d508 1
a508 1
          (STORE_I32 0, texternalsym:$off, I32:$addr, I32:$val)>;
d511 1
a511 1
          (STORE_I64 0, texternalsym:$off, I32:$addr, I64:$val)>;
d514 1
a514 1
          (STORE_F32 0, texternalsym:$off, I32:$addr, F32:$val)>;
d517 1
a517 1
          (STORE_F64 0, texternalsym:$off, I32:$addr, F64:$val)>;
d521 1
a521 1
          (STORE_I32 0, imm:$off, (CONST_I32 0), I32:$val)>;
d523 1
a523 1
          (STORE_I64 0, imm:$off, (CONST_I32 0), I64:$val)>;
d525 1
a525 1
          (STORE_F32 0, imm:$off, (CONST_I32 0), F32:$val)>;
d527 1
a527 1
          (STORE_F64 0, imm:$off, (CONST_I32 0), F64:$val)>;
d529 1
a529 1
          (STORE_I32 0, tglobaladdr:$off, (CONST_I32 0), I32:$val)>;
d531 1
a531 1
          (STORE_I64 0, tglobaladdr:$off, (CONST_I32 0), I64:$val)>;
d533 1
a533 1
          (STORE_F32 0, tglobaladdr:$off, (CONST_I32 0), F32:$val)>;
d535 1
a535 1
          (STORE_F64 0, tglobaladdr:$off, (CONST_I32 0), F64:$val)>;
d537 1
a537 1
          (STORE_I32 0, texternalsym:$off, (CONST_I32 0), I32:$val)>;
d539 1
a539 1
          (STORE_I64 0, texternalsym:$off, (CONST_I32 0), I64:$val)>;
d541 1
a541 1
          (STORE_F32 0, texternalsym:$off, (CONST_I32 0), F32:$val)>;
d543 1
a543 1
          (STORE_F64 0, texternalsym:$off, (CONST_I32 0), F64:$val)>;
d548 15
a562 15
def STORE8_I32  : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                             I32:$val), [],
                    "i32.store8\t${off}(${addr})${p2align}, $val", 0x3a>;
def STORE16_I32 : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                             I32:$val), [],
                    "i32.store16\t${off}(${addr})${p2align}, $val", 0x3b>;
def STORE8_I64  : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                             I64:$val), [],
                    "i64.store8\t${off}(${addr})${p2align}, $val", 0x3c>;
def STORE16_I64 : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                             I64:$val), [],
                    "i64.store16\t${off}(${addr})${p2align}, $val", 0x3d>;
def STORE32_I64 : I<(outs), (ins P2Align:$p2align, offset32_op:$off, I32:$addr,
                             I64:$val), [],
                    "i64.store32\t${off}(${addr})${p2align}, $val", 0x3e>;
d568 1
a568 1
          (STORE8_I32 0, 0, I32:$addr, I32:$val)>;
d570 1
a570 1
          (STORE16_I32 0, 0, I32:$addr, I32:$val)>;
d572 1
a572 1
          (STORE8_I64 0, 0, I32:$addr, I64:$val)>;
d574 1
a574 1
          (STORE16_I64 0, 0, I32:$addr, I64:$val)>;
d576 1
a576 1
          (STORE32_I64 0, 0, I32:$addr, I64:$val)>;
d580 1
a580 1
          (STORE8_I32 0, imm:$off, I32:$addr, I32:$val)>;
d582 1
a582 1
          (STORE16_I32 0, imm:$off, I32:$addr, I32:$val)>;
d584 1
a584 1
          (STORE8_I64 0, imm:$off, I32:$addr, I64:$val)>;
d586 1
a586 1
          (STORE16_I64 0, imm:$off, I32:$addr, I64:$val)>;
d588 1
a588 1
          (STORE32_I64 0, imm:$off, I32:$addr, I64:$val)>;
d590 1
a590 1
          (STORE8_I32 0, imm:$off, I32:$addr, I32:$val)>;
d592 1
a592 1
          (STORE16_I32 0, imm:$off, I32:$addr, I32:$val)>;
d594 1
a594 1
          (STORE8_I64 0, imm:$off, I32:$addr, I64:$val)>;
d596 1
a596 1
          (STORE16_I64 0, imm:$off, I32:$addr, I64:$val)>;
d598 1
a598 1
          (STORE32_I64 0, imm:$off, I32:$addr, I64:$val)>;
d602 1
a602 1
          (STORE8_I32 0, tglobaladdr:$off, I32:$addr, I32:$val)>;
d606 1
a606 1
          (STORE16_I32 0, tglobaladdr:$off, I32:$addr, I32:$val)>;
d610 1
a610 1
          (STORE8_I64 0, tglobaladdr:$off, I32:$addr, I64:$val)>;
d614 1
a614 1
          (STORE16_I64 0, tglobaladdr:$off, I32:$addr, I64:$val)>;
d618 1
a618 1
          (STORE32_I64 0, tglobaladdr:$off, I32:$addr, I64:$val)>;
d621 1
a621 1
          (STORE8_I32 0, texternalsym:$off, I32:$addr, I32:$val)>;
d625 1
a625 1
          (STORE16_I32 0, texternalsym:$off, I32:$addr, I32:$val)>;
d629 1
a629 1
          (STORE8_I64 0, texternalsym:$off, I32:$addr, I64:$val)>;
d633 1
a633 1
          (STORE16_I64 0, texternalsym:$off, I32:$addr, I64:$val)>;
d637 1
a637 1
          (STORE32_I64 0, texternalsym:$off, I32:$addr, I64:$val)>;
d641 1
a641 1
          (STORE8_I32 0, imm:$off, (CONST_I32 0), I32:$val)>;
d643 1
a643 1
          (STORE16_I32 0, imm:$off, (CONST_I32 0), I32:$val)>;
d645 1
a645 1
          (STORE8_I64 0, imm:$off, (CONST_I32 0), I64:$val)>;
d647 1
a647 1
          (STORE16_I64 0, imm:$off, (CONST_I32 0), I64:$val)>;
d649 1
a649 1
          (STORE32_I64 0, imm:$off, (CONST_I32 0), I64:$val)>;
d651 1
a651 1
          (STORE8_I32 0, tglobaladdr:$off, (CONST_I32 0), I32:$val)>;
d653 1
a653 1
          (STORE16_I32 0, tglobaladdr:$off, (CONST_I32 0), I32:$val)>;
d655 1
a655 1
          (STORE8_I64 0, tglobaladdr:$off, (CONST_I32 0), I64:$val)>;
d657 1
a657 1
          (STORE16_I64 0, tglobaladdr:$off, (CONST_I32 0), I64:$val)>;
d659 1
a659 1
          (STORE32_I64 0, tglobaladdr:$off, (CONST_I32 0), I64:$val)>;
d661 1
a661 1
          (STORE8_I32 0, texternalsym:$off, (CONST_I32 0), I32:$val)>;
d663 1
a663 1
          (STORE16_I32 0, texternalsym:$off, (CONST_I32 0), I32:$val)>;
d665 1
a665 1
          (STORE8_I64 0, texternalsym:$off, (CONST_I32 0), I64:$val)>;
d667 1
a667 1
          (STORE16_I64 0, texternalsym:$off, (CONST_I32 0), I64:$val)>;
d669 1
a669 1
          (STORE32_I64 0, texternalsym:$off, (CONST_I32 0), I64:$val)>;
d674 3
a676 3
def CURRENT_MEMORY_I32 : I<(outs I32:$dst), (ins i32imm:$flags),
                           [],
                           "current_memory\t$dst", 0x3f>,
d678 4
d684 3
a686 3
def GROW_MEMORY_I32 : I<(outs), (ins i32imm:$flags, I32:$delta),
                        [],
                        "grow_memory\t$delta", 0x40>,
d688 4
a693 5

def : Pat<(int_wasm_current_memory),
          (CURRENT_MEMORY_I32 0)>;
def : Pat<(int_wasm_grow_memory I32:$delta),
          (GROW_MEMORY_I32 0, $delta)>;
@


