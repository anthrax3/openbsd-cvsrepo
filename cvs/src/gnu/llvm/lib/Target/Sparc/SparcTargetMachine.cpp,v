head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.4
	OPENBSD_6_1_BASE:1.1.1.3
	LLVM_4_0_0:1.1.1.3
	LLVM_4_0_0_RC1:1.1.1.3
	LLVM_3_9_1:1.1.1.2
	LLVM_3_8_1:1.1.1.1
	LLVM:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2016.09.03.22.47.02;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	piLU3CHugy63NlaI;

1.1.1.1
date	2016.09.03.22.47.02;	author pascal;	state Exp;
branches;
next	1.1.1.2;
commitid	piLU3CHugy63NlaI;

1.1.1.2
date	2017.01.14.19.56.08;	author patrick;	state Exp;
branches;
next	1.1.1.3;
commitid	qMUxATnKgqN83Oct;

1.1.1.3
date	2017.01.24.08.33.30;	author patrick;	state Exp;
branches;
next	;
commitid	so2WA7LCP6wbxtYl;


desc
@@


1.1
log
@Initial revision
@
text
@//===-- SparcTargetMachine.cpp - Define TargetMachine for Sparc -----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//
//===----------------------------------------------------------------------===//

#include "SparcTargetMachine.h"
#include "SparcTargetObjectFile.h"
#include "Sparc.h"
#include "llvm/CodeGen/Passes.h"
#include "llvm/IR/LegacyPassManager.h"
#include "llvm/Support/TargetRegistry.h"
using namespace llvm;

extern "C" void LLVMInitializeSparcTarget() {
  // Register the target.
  RegisterTargetMachine<SparcV8TargetMachine> X(TheSparcTarget);
  RegisterTargetMachine<SparcV9TargetMachine> Y(TheSparcV9Target);
  RegisterTargetMachine<SparcelTargetMachine> Z(TheSparcelTarget);
}

static std::string computeDataLayout(const Triple &T, bool is64Bit) {
  // Sparc is typically big endian, but some are little.
  std::string Ret = T.getArch() == Triple::sparcel ? "e" : "E";
  Ret += "-m:e";

  // Some ABIs have 32bit pointers.
  if (!is64Bit)
    Ret += "-p:32:32";

  // Alignments for 64 bit integers.
  Ret += "-i64:64";

  // On SparcV9 128 floats are aligned to 128 bits, on others only to 64.
  // On SparcV9 registers can hold 64 or 32 bits, on others only 32.
  if (is64Bit)
    Ret += "-n32:64";
  else
    Ret += "-f128:64-n32";

  if (is64Bit)
    Ret += "-S128";
  else
    Ret += "-S64";

  return Ret;
}

/// SparcTargetMachine ctor - Create an ILP32 architecture model
///
SparcTargetMachine::SparcTargetMachine(const Target &T, const Triple &TT,
                                       StringRef CPU, StringRef FS,
                                       const TargetOptions &Options,
                                       Reloc::Model RM, CodeModel::Model CM,
                                       CodeGenOpt::Level OL, bool is64bit)
    : LLVMTargetMachine(T, computeDataLayout(TT, is64bit), TT, CPU, FS, Options,
                        RM, CM, OL),
      TLOF(make_unique<SparcELFTargetObjectFile>()),
      Subtarget(TT, CPU, FS, *this, is64bit) {
  initAsmInfo();
}

SparcTargetMachine::~SparcTargetMachine() {}

namespace {
/// Sparc Code Generator Pass Configuration Options.
class SparcPassConfig : public TargetPassConfig {
public:
  SparcPassConfig(SparcTargetMachine *TM, PassManagerBase &PM)
    : TargetPassConfig(TM, PM) {}

  SparcTargetMachine &getSparcTargetMachine() const {
    return getTM<SparcTargetMachine>();
  }

  void addIRPasses() override;
  bool addInstSelector() override;
  void addPreEmitPass() override;
};
} // namespace

TargetPassConfig *SparcTargetMachine::createPassConfig(PassManagerBase &PM) {
  return new SparcPassConfig(this, PM);
}

void SparcPassConfig::addIRPasses() {
  addPass(createAtomicExpandPass(&getSparcTargetMachine()));

  TargetPassConfig::addIRPasses();
}

bool SparcPassConfig::addInstSelector() {
  addPass(createSparcISelDag(getSparcTargetMachine()));
  return false;
}

void SparcPassConfig::addPreEmitPass(){
  addPass(createSparcDelaySlotFillerPass(getSparcTargetMachine()));
}

void SparcV8TargetMachine::anchor() { }

SparcV8TargetMachine::SparcV8TargetMachine(const Target &T, const Triple &TT,
                                           StringRef CPU, StringRef FS,
                                           const TargetOptions &Options,
                                           Reloc::Model RM, CodeModel::Model CM,
                                           CodeGenOpt::Level OL)
    : SparcTargetMachine(T, TT, CPU, FS, Options, RM, CM, OL, false) {}

void SparcV9TargetMachine::anchor() { }

SparcV9TargetMachine::SparcV9TargetMachine(const Target &T, const Triple &TT,
                                           StringRef CPU, StringRef FS,
                                           const TargetOptions &Options,
                                           Reloc::Model RM, CodeModel::Model CM,
                                           CodeGenOpt::Level OL)
    : SparcTargetMachine(T, TT, CPU, FS, Options, RM, CM, OL, true) {}

void SparcelTargetMachine::anchor() {}

SparcelTargetMachine::SparcelTargetMachine(const Target &T, const Triple &TT,
                                           StringRef CPU, StringRef FS,
                                           const TargetOptions &Options,
                                           Reloc::Model RM, CodeModel::Model CM,
                                           CodeGenOpt::Level OL)
    : SparcTargetMachine(T, TT, CPU, FS, Options, RM, CM, OL, false) {}
@


1.1.1.1
log
@Use the space freed up by sparc and zaurus to import LLVM.

ok hackroom@@
@
text
@@


1.1.1.2
log
@Import LLVM 3.9.1 including clang and lld.
@
text
@a15 1
#include "LeonPasses.h"
a16 1
#include "llvm/CodeGen/TargetPassConfig.h"
d55 2
a56 7
static Reloc::Model getEffectiveRelocModel(Optional<Reloc::Model> RM) {
  if (!RM.hasValue())
    return Reloc::Static;
  return *RM;
}

/// Create an ILP32 architecture model
d60 1
a60 2
                                       Optional<Reloc::Model> RM,
                                       CodeModel::Model CM,
d63 1
a63 1
                        getEffectiveRelocModel(RM), CM, OL),
d65 1
a65 1
      Subtarget(TT, CPU, FS, *this, is64bit), is64Bit(is64bit) {
a70 34
const SparcSubtarget *
SparcTargetMachine::getSubtargetImpl(const Function &F) const {
  Attribute CPUAttr = F.getFnAttribute("target-cpu");
  Attribute FSAttr = F.getFnAttribute("target-features");

  std::string CPU = !CPUAttr.hasAttribute(Attribute::None)
                        ? CPUAttr.getValueAsString().str()
                        : TargetCPU;
  std::string FS = !FSAttr.hasAttribute(Attribute::None)
                       ? FSAttr.getValueAsString().str()
                       : TargetFS;

  // FIXME: This is related to the code below to reset the target options,
  // we need to know whether or not the soft float flag is set on the
  // function, so we can enable it as a subtarget feature.
  bool softFloat =
      F.hasFnAttribute("use-soft-float") &&
      F.getFnAttribute("use-soft-float").getValueAsString() == "true";

  if (softFloat)
    FS += FS.empty() ? "+soft-float" : ",+soft-float";

  auto &I = SubtargetMap[CPU + FS];
  if (!I) {
    // This needs to be done before we create a new subtarget since any
    // creation will depend on the TM and the code generation flags on the
    // function that reside in TargetOptions.
    resetTargetOptions(F);
    I = llvm::make_unique<SparcSubtarget>(TargetTriple, CPU, FS, *this,
                                          this->is64Bit);
  }
  return I.get();
}

d76 1
a76 1
      : TargetPassConfig(TM, PM) {}
d103 1
a103 1
void SparcPassConfig::addPreEmitPass() {
a104 35
  if (this->getSparcTargetMachine().getSubtargetImpl()->ignoreZeroFlag()) {
    addPass(new IgnoreZeroFlag(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->performSDIVReplace()) {
    addPass(new ReplaceSDIV(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->fixCallImmediates()) {
    addPass(new FixCALL(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->fixFSMULD()) {
    addPass(new FixFSMULD(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->replaceFMULS()) {
    addPass(new ReplaceFMULS(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->preventRoundChange()) {
    addPass(new PreventRoundChange(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->fixAllFDIVSQRT()) {
    addPass(new FixAllFDIVSQRT(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->insertNOPsLoadStore()) {
    addPass(new InsertNOPsLoadStore(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->insertNOPLoad()) {
    addPass(new InsertNOPLoad(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine().getSubtargetImpl()->flushCacheLineSWAP()) {
    addPass(new FlushCacheLineSWAP(getSparcTargetMachine()));
  }
  if (this->getSparcTargetMachine()
          .getSubtargetImpl()
          ->insertNOPDoublePrecision()) {
    addPass(new InsertNOPDoublePrecision(getSparcTargetMachine()));
  }
d107 1
a107 1
void SparcV8TargetMachine::anchor() {}
d112 1
a112 2
                                           Optional<Reloc::Model> RM,
                                           CodeModel::Model CM,
d116 1
a116 1
void SparcV9TargetMachine::anchor() {}
d121 1
a121 2
                                           Optional<Reloc::Model> RM,
                                           CodeModel::Model CM,
d130 1
a130 2
                                           Optional<Reloc::Model> RM,
                                           CodeModel::Model CM,
@


1.1.1.3
log
@Import LLVM 4.0.0 rc1 including clang and lld to help the current
development effort on OpenBSD/arm64.
@
text
@d25 3
a27 3
  RegisterTargetMachine<SparcV8TargetMachine> X(getTheSparcTarget());
  RegisterTargetMachine<SparcV9TargetMachine> Y(getTheSparcV9Target());
  RegisterTargetMachine<SparcelTargetMachine> Z(getTheSparcelTarget());
d79 1
a79 1
const SparcSubtarget * 
d98 1
a98 1
  if (softFloat)         
d118 1
a118 1
    : TargetPassConfig(TM, PM) {}
d145 1
a145 1
void SparcPassConfig::addPreEmitPass(){
d147 8
a154 4

  if (this->getSparcTargetMachine().getSubtargetImpl()->insertNOPLoad())
  {
    addPass(new InsertNOPLoad(getSparcTargetMachine()));
d156 1
a156 2
  if (this->getSparcTargetMachine().getSubtargetImpl()->fixFSMULD())
  {
d159 1
a159 2
  if (this->getSparcTargetMachine().getSubtargetImpl()->replaceFMULS())
  {
d162 2
a163 2
  if (this->getSparcTargetMachine().getSubtargetImpl()->detectRoundChange()) {
    addPass(new DetectRoundChange(getSparcTargetMachine()));
d165 1
a165 2
  if (this->getSparcTargetMachine().getSubtargetImpl()->fixAllFDIVSQRT())
  {
d168 14
d184 1
a184 1
void SparcV8TargetMachine::anchor() { }
d194 1
a194 1
void SparcV9TargetMachine::anchor() { }
@


