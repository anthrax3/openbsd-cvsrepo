head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.8.0.28
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.26
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.24
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.04.22.10.01.26;	author reyk;	state dead;
branches;
next	1.11;

1.11
date	2013.06.21.12.26.04;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.19.19.36.50;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.17.18.57.41;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.29.16.20.29;	author biorn;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.19.14.20.17;	author biorn;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2003.03.21.09.50.07;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.06.09.10.02;	author hin;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.11.18.00.48.39;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.33;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.33;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.54.52;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.32;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.29.15.55.32;	author biorn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.44;	author biorn;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.22.06.57.21;	author miod;	state Exp;
branches;
next	;

1.3.4.1
date	2003.03.22.21.26.30;	author margarida;	state Exp;
branches;
next	;

1.5.2.1
date	2004.05.26.09.02.38;	author brad;	state Exp;
branches;
next	;

1.5.4.1
date	2004.05.26.08.17.47;	author brad;	state Exp;
branches;
next	;


desc
@@


1.12
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2005 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * $Id: kdc_locl.h,v 1.11 2013/06/21 12:26:04 ajacoutot Exp $
 */

#ifndef __KDC_LOCL_H__
#define __KDC_LOCL_H__

#include "headers.h"

typedef struct pk_client_params pk_client_params;
struct DigestREQ;
struct Kx509Request;
#include <kdc-private.h>

extern sig_atomic_t exit_flag;
extern size_t max_request_udp;
extern size_t max_request_tcp;
extern const char *request_log;
extern const char *port_str;
extern krb5_addresses explicit_addresses;

extern int enable_http;

#ifdef SUPPORT_DETACH

#define DETACH_IS_DEFAULT FALSE

extern int detach_from_console;
#endif

extern const struct units _kdc_digestunits[];

#define KDC_LOG_FILE		"kdc.log"

extern struct timeval _kdc_now;
#define kdc_time (_kdc_now.tv_sec)

extern char *runas_string;
extern char *chroot_string;

void
loop(krb5_context context, krb5_kdc_configuration *config);

krb5_kdc_configuration *
configure(krb5_context context, int argc, char **argv);

#ifdef __APPLE__
void bonjour_announce(krb5_context, krb5_kdc_configuration *);
#endif

#endif /* __KDC_LOCL_H__ */
@


1.11
log
@digest.c is needed for some operations with the kdc(8).

ok robert@@
@
text
@d35 1
a35 1
 * $Id: kdc_locl.h,v 1.10 2013/06/19 19:36:50 robert Exp $
@


1.10
log
@start un-bloating kerberos by removing support for hx509, pthreads, spnego,
ntlm, pkinit
@
text
@d35 1
a35 1
 * $Id: kdc_locl.h,v 1.9 2013/06/17 18:57:41 robert Exp $
d46 1
@


1.9
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d35 1
a35 1
 * $Id$
a45 1
#include <kdc-private.h>
@


1.8
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d34 2
a35 2
/* 
 * $KTH: kdc_locl.h,v 1.66 2005/04/23 19:52:51 lha Exp $ 
d43 9
a51 14
extern krb5_context context;

extern int require_preauth;
extern volatile sig_atomic_t exit_flag;
extern size_t max_request;
extern time_t kdc_warn_pwexpire;
extern struct dbinfo {
    char *realm;
    char *dbname;
    char *mkey_file;
    struct dbinfo *next;
} *databases;
extern HDB **db;
extern int num_db;
a55 15
extern krb5_boolean encode_as_rep_as_tgs_rep;
extern krb5_boolean check_ticket_addresses;
extern krb5_boolean allow_null_ticket_addresses;
extern krb5_boolean allow_anonymous;
enum { TRPOLICY_ALWAYS_CHECK,
       TRPOLICY_ALLOW_PER_PRINCIPAL, 
       TRPOLICY_ALWAYS_HONOUR_REQUEST };
extern int trpolicy;
extern int enable_524;
extern int enable_v4_cross_realm;

#ifdef PKINIT
extern int enable_pkinit;
extern int enable_pkinit_princ_in_cert;
#endif
d57 1
a57 2
#define _PATH_KDC_CONF		HDB_DB_DIR "/kdc.conf"
#define DEFAULT_LOG_DEST	"0-1/FILE:" HDB_DB_DIR "/kdc.log"
d59 1
a59 2
extern struct timeval now;
#define kdc_time (now.tv_sec)
d61 2
a62 24
krb5_error_code as_rep (KDC_REQ*, krb5_data*, const char*, struct sockaddr*);
void configure (int, char**);
krb5_error_code db_fetch (krb5_principal, hdb_entry**);
void free_ent(hdb_entry *);
void kdc_log (int, const char*, ...)
    __attribute__ ((format (printf, 2,3)));

char* kdc_log_msg (int, const char*, ...)
    __attribute__ ((format (printf, 2,3)));
char* kdc_log_msg_va (int, const char*, va_list)
    __attribute__ ((format (printf, 2,0)));
void kdc_openlog (void);
void loop (void);
void set_master_key (EncryptionKey);
krb5_error_code tgs_rep (KDC_REQ*, krb5_data*, const char*, struct sockaddr *);
Key* unseal_key (Key*);
krb5_error_code check_flags(hdb_entry *client, const char *client_name,
			    hdb_entry *server, const char *server_name,
			    krb5_boolean is_as_req);

krb5_error_code get_des_key(hdb_entry*, krb5_boolean, krb5_boolean, Key**);
krb5_error_code encode_v4_ticket (void*, size_t, const EncTicketPart*, 
				  const PrincipalName*, size_t*);
krb5_error_code do_524 (const Ticket*, krb5_data*, const char*, struct sockaddr*);
d64 1
a64 3
#ifdef HAVE_OPENSSL
#define des_new_random_key des_random_key
#endif
d66 1
a66 16
#ifdef PKINIT
typedef struct pk_client_params pk_client_params;
krb5_error_code pk_initialize(const char *, const char *);
krb5_error_code pk_rd_padata(krb5_context, KDC_REQ *,
			     PA_DATA *, pk_client_params **);
krb5_error_code	pk_mk_pa_reply(krb5_context,
			       pk_client_params *,
			       const hdb_entry *,
			       const KDC_REQ *,
			       krb5_keyblock **,
			       METHOD_DATA *);
krb5_error_code pk_check_client(krb5_context, krb5_principal,
				const hdb_entry *, 
				pk_client_params *, char **);
void pk_free_client_param(krb5_context, pk_client_params *);
#endif
d68 2
a69 3
/*
 * Kerberos 4
 */
d71 2
a72 8
extern char *v4_realm;
extern int enable_v4;
extern krb5_boolean enable_kaserver;

krb5_error_code db_fetch4 (const char*, const char*, const char*, hdb_entry**);
krb5_error_code do_version4 (unsigned char*, size_t, krb5_data*, const char*, 
			     struct sockaddr_in*);
int maybe_version4 (unsigned char*, int);
d74 2
a75 2
krb5_error_code do_kaserver (unsigned char*, size_t, krb5_data*, const char*, 
			     struct sockaddr_in*);
d77 2
d80 3
@


1.7
log
@Merge with heimdal-0.6.3 Tested by beck@@, msf@@, me and others. ok beck@@
@
text
@d35 1
a35 1
 * $KTH: kdc_locl.h,v 1.58.2.2 2003/10/27 11:07:16 joda Exp $ 
d72 3
a74 6
#ifdef KRB4
extern char *v4_realm;
extern int enable_v4;
extern int enable_524;
extern int enable_v4_cross_realm;
extern krb5_boolean enable_kaserver;
d108 29
a136 1
#ifdef KRB4
a140 1
#endif
a141 1
#ifdef KRB4
a143 1
#endif
d145 1
a145 3
#ifdef HAVE_OPENSSL
#define des_new_random_key des_random_key
#endif
@


1.6
log
@Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.

ok beck@@ hin@@
@
text
@d35 1
a35 1
 * $KTH: kdc_locl.h,v 1.58 2003/03/18 00:23:06 lha Exp $ 
@


1.5
log
@Merge 0.6rc1
@
text
@d65 4
@


1.5.2.1
log
@MFC:
Fix by biorn:

Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.
@
text
@a64 4
enum { TRPOLICY_ALWAYS_CHECK,
       TRPOLICY_ALLOW_PER_PRINCIPAL, 
       TRPOLICY_ALWAYS_HONOUR_REQUEST };
extern int trpolicy;
@


1.5.4.1
log
@MFC:
Fix by biorn:

Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.
@
text
@a64 4
enum { TRPOLICY_ALWAYS_CHECK,
       TRPOLICY_ALLOW_PER_PRINCIPAL, 
       TRPOLICY_ALWAYS_HONOUR_REQUEST };
extern int trpolicy;
@


1.4
log
@Add a new option to disable krb4 cross-realm authentication, disabled by
default. This works around a recently found vulnerability in the krb4
protocol, see

	http://web.mit.edu/kerberos/www/advisories/MITKRB5-SA-2003-004-krb4.txt

Patch created by adopting the changes in heimdal-0.5.2, with invaluable help
provided by lha@@stacken.kth.se and janj@@stacken.kth.se.

ok beck@@ miod@@
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2001 Kungliga Tekniska Högskolan
d35 1
a35 1
 * $KTH: kdc_locl.h,v 1.52 2001/08/22 20:30:25 assar Exp $ 
d57 1
a57 1
extern char *port_str;
d65 2
d93 1
a93 1
void kdc_openlog (krb5_config_section*);
d102 5
a108 1
krb5_error_code do_524 (const Ticket*, krb5_data*, const char*, struct sockaddr*);
a110 4
krb5_error_code encode_v4_ticket (void*, size_t, const EncTicketPart*, 
				  const PrincipalName*, size_t*);
krb5_error_code encrypt_v4_ticket (void*, size_t, des_cblock*, EncryptedData*);
krb5_error_code get_des_key(hdb_entry*, krb5_boolean, krb5_boolean, Key**);
@


1.3
log
@Merge heimdal-0.4e
@
text
@d70 1
@


1.3.4.1
log
@Errata #13 (hin):
A protocol flaw in the Kerberos 4 protocol allows an attacker to
impersonate any principal in a realm, if a Kerberos KDC is configured to
do cross-realm authentication.

Fix this by restricting the functionality of the protocol to prevent
responding to Kerberos 4 requests originating from foreign realms,
unless explicitely configured to do so by the user.
@
text
@a69 1
extern int enable_v4_cross_realm;
@


1.3.2.1
log
@Errata #026 (hin):
A protocol flaw in the Kerberos 4 protocol allows an attacker to
impersonate any principal in a realm, if a Kerberos KDC is configured to
do cross-realm authentication.

Fix this by restricting the functionality of the protocol to prevent
responding to Kerberos 4 requests originating from foreign realms,
unless explicitely configured to do so by the user.
@
text
@a69 1
extern int enable_v4_cross_realm;
@


1.2
log
@volatile sig_atomic_t
@
text
@d35 1
a35 1
 * $KTH: kdc_locl.h,v 1.48 2001/01/30 01:44:07 assar Exp $ 
a69 2
#endif
#ifdef KASERVER
d107 1
a107 1
krb5_error_code get_des_key(hdb_entry*, krb5_boolean, Key**);
d111 1
a111 1
#ifdef KASERVER
d114 4
@


1.1
log
@Initial revision
@
text
@d46 1
a46 1
extern sig_atomic_t exit_flag;
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d35 1
a35 1
 * $KTH: kdc_locl.h,v 1.52 2001/08/22 20:30:25 assar Exp $ 
d70 2
d109 1
a109 1
krb5_error_code get_des_key(hdb_entry*, krb5_boolean, krb5_boolean, Key**);
d113 1
a113 1
#ifdef KRB4
a115 4
#endif

#ifdef HAVE_OPENSSL
#define des_new_random_key des_random_key
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
d35 1
a35 1
 * $KTH: kdc_locl.h,v 1.58 2003/03/18 00:23:06 lha Exp $ 
d57 1
a57 1
extern const char *port_str;
a64 2
extern int enable_524;
extern int enable_v4_cross_realm;
d69 1
d90 1
a90 1
void kdc_openlog (void);
a98 5
krb5_error_code get_des_key(hdb_entry*, krb5_boolean, krb5_boolean, Key**);
krb5_error_code encode_v4_ticket (void*, size_t, const EncTicketPart*, 
				  const PrincipalName*, size_t*);
krb5_error_code do_524 (const Ticket*, krb5_data*, const char*, struct sockaddr*);

d101 1
d104 4
@


1.1.1.4
log
@Import of heimdal-0.6.3
@
text
@d35 1
a35 1
 * $KTH: kdc_locl.h,v 1.58.2.2 2003/10/27 11:07:16 joda Exp $ 
a64 4
enum { TRPOLICY_ALWAYS_CHECK,
       TRPOLICY_ALLOW_PER_PRINCIPAL, 
       TRPOLICY_ALWAYS_HONOUR_REQUEST };
extern int trpolicy;
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d35 1
a35 1
 * $KTH: kdc_locl.h,v 1.66 2005/04/23 19:52:51 lha Exp $ 
d72 4
a75 3
#ifdef PKINIT
extern int enable_pkinit;
extern int enable_pkinit_princ_in_cert;
d109 1
a109 29
#ifdef HAVE_OPENSSL
#define des_new_random_key des_random_key
#endif

#ifdef PKINIT
typedef struct pk_client_params pk_client_params;
krb5_error_code pk_initialize(const char *, const char *);
krb5_error_code pk_rd_padata(krb5_context, KDC_REQ *,
			     PA_DATA *, pk_client_params **);
krb5_error_code	pk_mk_pa_reply(krb5_context,
			       pk_client_params *,
			       const hdb_entry *,
			       const KDC_REQ *,
			       krb5_keyblock **,
			       METHOD_DATA *);
krb5_error_code pk_check_client(krb5_context, krb5_principal,
				const hdb_entry *, 
				pk_client_params *, char **);
void pk_free_client_param(krb5_context, pk_client_params *);
#endif

/*
 * Kerberos 4
 */

extern char *v4_realm;
extern int enable_v4;
extern krb5_boolean enable_kaserver;

d114 1
d116 1
d119 1
d121 3
a123 1

@


