head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.26
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.24
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.22
	OPENBSD_5_0:1.5.0.20
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.1.3.0.4
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.17.18.57.41;	author robert;	state dead;
branches;
next	1.5;

1.5
date	2006.10.06.07.09.10;	author biorn;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.21.09.50.07;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.29;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.29;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.21.46;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.54.50;	author hin;	state Exp;
branches
	1.1.1.3.2.1
	1.1.1.3.4.1;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.15.30;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.42;	author biorn;	state Exp;
branches;
next	;

1.1.1.3.2.1
date	2003.03.22.06.57.21;	author miod;	state Exp;
branches;
next	;

1.1.1.3.4.1
date	2003.03.22.21.26.30;	author margarida;	state Exp;
branches;
next	;


desc
@@


1.6
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 1997-2005 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "kdc_locl.h"

RCSID("$KTH: 524.c,v 1.31.2.1 2005/07/26 20:43:13 lha Exp $");

#include <krb5-v4compat.h>

/*
 * fetch the server from `t', returning the name in malloced memory in
 * `spn' and the entry itself in `server'
 */

static krb5_error_code
fetch_server (const Ticket *t,
	      char **spn,
	      hdb_entry **server,
	      const char *from)
{
    krb5_error_code ret;
    krb5_principal sprinc;

    ret = _krb5_principalname2krb5_principal(&sprinc, t->sname, t->realm);
    if (ret) {
	kdc_log(0, "_krb5_principalname2krb5_principal: %s",
		krb5_get_err_text(context, ret));
	return ret;
    }
    ret = krb5_unparse_name(context, sprinc, spn);
    if (ret) {
	krb5_free_principal(context, sprinc);
	kdc_log(0, "krb5_unparse_name: %s", krb5_get_err_text(context, ret));
	return ret;
    }
    ret = db_fetch(sprinc, server);
    krb5_free_principal(context, sprinc);
    if (ret) {
	kdc_log(0,
	"Request to convert ticket from %s for unknown principal %s: %s",
		from, *spn, krb5_get_err_text(context, ret));
	if (ret == HDB_ERR_NOENTRY)
	    ret = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;
	return ret;
    }
    return 0;
}

static krb5_error_code
log_524 (const EncTicketPart *et,
	 const char *from,
	 const char *spn)
{
    krb5_principal client;
    char *cpn;
    krb5_error_code ret;

    ret = _krb5_principalname2krb5_principal(&client, et->cname, et->crealm);
    if (ret) {
	kdc_log(0, "_krb5_principalname2krb5_principal: %s",
		krb5_get_err_text (context, ret));
	return ret;
    }
    ret = krb5_unparse_name(context, client, &cpn);
    if (ret) {
	krb5_free_principal(context, client);
	kdc_log(0, "krb5_unparse_name: %s",
		krb5_get_err_text (context, ret));
	return ret;
    }
    kdc_log(1, "524-REQ %s from %s for %s", cpn, from, spn);
    free(cpn);
    krb5_free_principal(context, client);
    return 0;
}

static krb5_error_code
verify_flags (const EncTicketPart *et,
	      const char *spn)
{
    if(et->endtime < kdc_time){
	kdc_log(0, "Ticket expired (%s)", spn);
	return KRB5KRB_AP_ERR_TKT_EXPIRED;
    }
    if(et->flags.invalid){
	kdc_log(0, "Ticket not valid (%s)", spn);
	return KRB5KRB_AP_ERR_TKT_NYV;
    }
    return 0;
}

/*
 * set the `et->caddr' to the most appropriate address to use, where
 * `addr' is the address the request was received from.
 */

static krb5_error_code
set_address (EncTicketPart *et,
	     struct sockaddr *addr,
	     const char *from)
{
    krb5_error_code ret;
    krb5_address *v4_addr;

    v4_addr = malloc (sizeof(*v4_addr));
    if (v4_addr == NULL)
	return ENOMEM;

    ret = krb5_sockaddr2address(context, addr, v4_addr);
    if(ret) {
	free (v4_addr);
	kdc_log(0, "Failed to convert address (%s)", from);
	return ret;
    }
	    
    if (et->caddr && !krb5_address_search (context, v4_addr, et->caddr)) {
	kdc_log(0, "Incorrect network address (%s)", from);
	krb5_free_address(context, v4_addr);
	free (v4_addr);
	return KRB5KRB_AP_ERR_BADADDR;
    }
    if(v4_addr->addr_type == KRB5_ADDRESS_INET) {
	/* we need to collapse the addresses in the ticket to a
	   single address; best guess is to use the address the
	   connection came from */
	
	if (et->caddr != NULL) {
	    free_HostAddresses(et->caddr);
	} else {
	    et->caddr = malloc (sizeof (*et->caddr));
	    if (et->caddr == NULL) {
		krb5_free_address(context, v4_addr);
		free(v4_addr);
		return ENOMEM;
	    }
	}
	et->caddr->val = v4_addr;
	et->caddr->len = 1;
    } else {
	krb5_free_address(context, v4_addr);
	free(v4_addr);
    }
    return 0;
}


static krb5_error_code
encrypt_v4_ticket(void *buf, 
		  size_t len, 
		  krb5_keyblock *skey, 
		  EncryptedData *reply)
{
    krb5_crypto crypto;
    krb5_error_code ret;
    ret = krb5_crypto_init(context, skey, ETYPE_DES_PCBC_NONE, &crypto);
    if (ret) {
	free(buf);
	kdc_log(0, "krb5_crypto_init failed: %s",
		krb5_get_err_text(context, ret));
	return ret;
    }

    ret = krb5_encrypt_EncryptedData(context, 
				     crypto,
				     KRB5_KU_TICKET,
				     buf,
				     len,
				     0,
				     reply);
    krb5_crypto_destroy(context, crypto);
    if(ret) {
	kdc_log(0, "Failed to encrypt data: %s",
		krb5_get_err_text(context, ret));
	return ret;
    }
    return 0;
}

static krb5_error_code
encode_524_response(const char *spn, const EncTicketPart et, const Ticket *t,
		    hdb_entry *server, EncryptedData *ticket, int *kvno)
{
    krb5_error_code ret;
    int use_2b;
    size_t len;

    use_2b = krb5_config_get_bool(context, NULL, "kdc", "use_2b", spn, NULL);
    if(use_2b) {
	ASN1_MALLOC_ENCODE(EncryptedData, 
			   ticket->cipher.data, ticket->cipher.length, 
			   &t->enc_part, &len, ret);
	
	if (ret) {
	    kdc_log(0, "Failed to encode v4 (2b) ticket (%s)", spn);
	    return ret;
	}
	
	ticket->etype = 0;
	ticket->kvno = NULL;
	*kvno = 213; /* 2b's use this magic kvno */
    } else {
	unsigned char buf[MAX_KTXT_LEN + 4 * 4];
	Key *skey;
	
	if (!enable_v4_cross_realm && strcmp (et.crealm, t->realm) != 0) {
	    kdc_log(0, "524 cross-realm %s -> %s disabled", et.crealm,
		    t->realm);
	    return KRB5KDC_ERR_POLICY;
	}

	ret = encode_v4_ticket(buf + sizeof(buf) - 1, sizeof(buf),
			       &et, &t->sname, &len);
	if(ret){
	    kdc_log(0, "Failed to encode v4 ticket (%s)", spn);
	    return ret;
	}
	ret = get_des_key(server, TRUE, FALSE, &skey);
	if(ret){
	    kdc_log(0, "no suitable DES key for server (%s)", spn);
	    return ret;
	}
	ret = encrypt_v4_ticket(buf + sizeof(buf) - len, len, 
				&skey->key, ticket);
	if(ret){
	    kdc_log(0, "Failed to encrypt v4 ticket (%s)", spn);
	    return ret;
	}
	*kvno = server->kvno;
    }

    return 0;
}

/*
 * process a 5->4 request, based on `t', and received `from, addr',
 * returning the reply in `reply'
 */

krb5_error_code
do_524(const Ticket *t, krb5_data *reply,
       const char *from, struct sockaddr *addr)
{
    krb5_error_code ret = 0;
    krb5_crypto crypto;
    hdb_entry *server = NULL;
    Key *skey;
    krb5_data et_data;
    EncTicketPart et;
    EncryptedData ticket;
    krb5_storage *sp;
    char *spn = NULL;
    unsigned char buf[MAX_KTXT_LEN + 4 * 4];
    size_t len;
    int kvno = 0;
    
    if(!enable_524) {
	ret = KRB5KDC_ERR_POLICY;
	kdc_log(0, "Rejected ticket conversion request from %s", from);
	goto out;
    }

    ret = fetch_server (t, &spn, &server, from);
    if (ret) {
	goto out;
    }

    ret = hdb_enctype2key(context, server, t->enc_part.etype, &skey);
    if(ret){
	kdc_log(0, "No suitable key found for server (%s) from %s", spn, from);
	goto out;
    }
    ret = krb5_crypto_init(context, &skey->key, 0, &crypto);
    if (ret) {
	kdc_log(0, "krb5_crypto_init failed: %s",
		krb5_get_err_text(context, ret));
	goto out;
    }
    ret = krb5_decrypt_EncryptedData (context,
				      crypto,
				      KRB5_KU_TICKET,
				      &t->enc_part,
				      &et_data);
    krb5_crypto_destroy(context, crypto);
    if(ret){
	kdc_log(0, "Failed to decrypt ticket from %s for %s", from, spn);
	goto out;
    }
    ret = krb5_decode_EncTicketPart(context, et_data.data, et_data.length, 
				    &et, &len);
    krb5_data_free(&et_data);
    if(ret){
	kdc_log(0, "Failed to decode ticket from %s for %s", from, spn);
	goto out;
    }

    ret = log_524 (&et, from, spn);
    if (ret) {
	free_EncTicketPart(&et);
	goto out;
    }

    ret = verify_flags (&et, spn);
    if (ret) {
	free_EncTicketPart(&et);
	goto out;
    }

    ret = set_address (&et, addr, from);
    if (ret) {
	free_EncTicketPart(&et);
	goto out;
    }

    ret = encode_524_response(spn, et, t, server, &ticket, &kvno);
    free_EncTicketPart(&et);

out:
    /* make reply */
    memset(buf, 0, sizeof(buf));
    sp = krb5_storage_from_mem(buf, sizeof(buf));
    if (sp) {
	krb5_store_int32(sp, ret);
	if(ret == 0){
	    krb5_store_int32(sp, kvno);
	    krb5_store_data(sp, ticket.cipher);
	    /* Aargh! This is coded as a KTEXT_ST. */
	    krb5_storage_seek(sp, MAX_KTXT_LEN - ticket.cipher.length, SEEK_CUR);
	    krb5_store_int32(sp, 0); /* mbz */
	    free_EncryptedData(&ticket);
	}
	ret = krb5_storage_to_data(sp, reply);
	reply->length = krb5_storage_seek(sp, 0, SEEK_CUR);
	krb5_storage_free(sp);
    } else
	krb5_data_zero(reply);
    if(spn)
	free(spn);
    if(server)
	free_ent (server);
    return ret;
}
@


1.5
log
@Coverity fixes backported from the heimdal cvs.

ok beck@@, No problem deraadt@@
@
text
@@


1.4
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d351 15
a365 13
    krb5_store_int32(sp, ret);
    if(ret == 0){
	krb5_store_int32(sp, kvno);
	krb5_store_data(sp, ticket.cipher);
	/* Aargh! This is coded as a KTEXT_ST. */
	krb5_storage_seek(sp, MAX_KTXT_LEN - ticket.cipher.length, SEEK_CUR);
	krb5_store_int32(sp, 0); /* mbz */
	free_EncryptedData(&ticket);
    }
    ret = krb5_storage_to_data(sp, reply);
    reply->length = krb5_storage_seek(sp, 0, SEEK_CUR);
    krb5_storage_free(sp);
    
@


1.3
log
@Merge 0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: 524.c,v 1.29 2003/03/17 05:35:47 assar Exp $");
a37 1
#ifndef KRB4
a38 1
#endif
d54 1
a54 1
    ret = principalname2krb5_principal(&sprinc, t->sname, t->realm);
d56 1
a56 1
	kdc_log(0, "principalname2krb5_principal: %s",
d88 1
a88 1
    ret = principalname2krb5_principal(&client, et->cname, et->crealm);
d90 1
a90 1
	kdc_log(0, "principalname2krb5_principal: %s",
d284 1
a284 1
    int kvno;
@


1.2
log
@Add a new option to disable krb4 cross-realm authentication, disabled by
default. This works around a recently found vulnerability in the krb4
protocol, see

	http://web.mit.edu/kerberos/www/advisories/MITKRB5-SA-2003-004-krb4.txt

Patch created by adopting the changes in heimdal-0.5.2, with invaluable help
provided by lha@@stacken.kth.se and janj@@stacken.kth.se.

ok beck@@ miod@@
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: 524.c,v 1.23 2001/08/17 07:48:49 joda Exp $");
d38 3
a40 1
#ifdef KRB4
d74 1
a74 1
	if (ret == ENOENT)
d178 88
d286 1
a344 7
    if (!enable_v4_cross_realm && strcmp (et.crealm, t->realm) != 0) {
	kdc_log(0, "524 cross-realm %s -> %s disabled", et.crealm,
		t->realm);
	free_EncTicketPart(&et);
	ret = KRB5KDC_ERR_POLICY;
	goto out;
    }
d346 1
a346 2
    ret = encode_v4_ticket(buf + sizeof(buf) - 1, sizeof(buf),
			   &et, &t->sname, &len);
d348 1
a348 15
    if(ret){
	kdc_log(0, "Failed to encode v4 ticket (%s)", spn);
	goto out;
    }
    ret = get_des_key(server, TRUE, FALSE, &skey);
    if(ret){
	kdc_log(0, "no suitable DES key for server (%s)", spn);
	goto out;
    }
    ret = encrypt_v4_ticket(buf + sizeof(buf) - len, len, 
			    skey->key.keyvalue.data, &ticket);
    if(ret){
	kdc_log(0, "Failed to encrypt v4 ticket (%s)", spn);
	goto out;
    }
d355 1
a355 1
	krb5_store_int32(sp, server->kvno); /* is this right? */
d358 1
a358 1
	sp->seek(sp, MAX_KTXT_LEN - ticket.cipher.length, SEEK_CUR);
d363 1
a363 1
    reply->length = (*sp->seek)(sp, 0, SEEK_CUR);
a371 2

#endif /* KRB4 */
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
RCSID("$KTH: 524.c,v 1.19 2001/01/30 01:44:07 assar Exp $");
d139 1
a139 1
    ret = krb5_sockaddr2address(addr, v4_addr);
d254 8
d269 1
a269 1
    ret = get_des_key(server, FALSE, &skey);
d271 1
a271 1
	kdc_log(0, "No DES key for server (%s)", spn);
d294 1
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d36 1
a36 1
RCSID("$KTH: 524.c,v 1.20 2001/05/14 06:17:47 assar Exp $");
d139 1
a139 1
    ret = krb5_sockaddr2address(context, addr, v4_addr);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: 524.c,v 1.23 2001/08/17 07:48:49 joda Exp $");
d261 1
a261 1
    ret = get_des_key(server, TRUE, FALSE, &skey);
d263 1
a263 1
	kdc_log(0, "no suitable DES key for server (%s)", spn);
a285 1
    reply->length = (*sp->seek)(sp, 0, SEEK_CUR);
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: 524.c,v 1.29 2003/03/17 05:35:47 assar Exp $");
d38 1
a38 3
#ifndef KRB4
#include <krb5-v4compat.h>
#endif
d72 1
a72 1
	if (ret == HDB_ERR_NOENTRY)
a175 88

static krb5_error_code
encrypt_v4_ticket(void *buf, 
		  size_t len, 
		  krb5_keyblock *skey, 
		  EncryptedData *reply)
{
    krb5_crypto crypto;
    krb5_error_code ret;
    ret = krb5_crypto_init(context, skey, ETYPE_DES_PCBC_NONE, &crypto);
    if (ret) {
	free(buf);
	kdc_log(0, "krb5_crypto_init failed: %s",
		krb5_get_err_text(context, ret));
	return ret;
    }

    ret = krb5_encrypt_EncryptedData(context, 
				     crypto,
				     KRB5_KU_TICKET,
				     buf,
				     len,
				     0,
				     reply);
    krb5_crypto_destroy(context, crypto);
    if(ret) {
	kdc_log(0, "Failed to encrypt data: %s",
		krb5_get_err_text(context, ret));
	return ret;
    }
    return 0;
}

static krb5_error_code
encode_524_response(const char *spn, const EncTicketPart et, const Ticket *t,
		    hdb_entry *server, EncryptedData *ticket, int *kvno)
{
    krb5_error_code ret;
    int use_2b;
    size_t len;

    use_2b = krb5_config_get_bool(context, NULL, "kdc", "use_2b", spn, NULL);
    if(use_2b) {
	ASN1_MALLOC_ENCODE(EncryptedData, 
			   ticket->cipher.data, ticket->cipher.length, 
			   &t->enc_part, &len, ret);
	
	if (ret) {
	    kdc_log(0, "Failed to encode v4 (2b) ticket (%s)", spn);
	    return ret;
	}
	
	ticket->etype = 0;
	ticket->kvno = NULL;
	*kvno = 213; /* 2b's use this magic kvno */
    } else {
	unsigned char buf[MAX_KTXT_LEN + 4 * 4];
	Key *skey;
	
	if (!enable_v4_cross_realm && strcmp (et.crealm, t->realm) != 0) {
	    kdc_log(0, "524 cross-realm %s -> %s disabled", et.crealm,
		    t->realm);
	    return KRB5KDC_ERR_POLICY;
	}

	ret = encode_v4_ticket(buf + sizeof(buf) - 1, sizeof(buf),
			       &et, &t->sname, &len);
	if(ret){
	    kdc_log(0, "Failed to encode v4 ticket (%s)", spn);
	    return ret;
	}
	ret = get_des_key(server, TRUE, FALSE, &skey);
	if(ret){
	    kdc_log(0, "no suitable DES key for server (%s)", spn);
	    return ret;
	}
	ret = encrypt_v4_ticket(buf + sizeof(buf) - len, len, 
				&skey->key, ticket);
	if(ret){
	    kdc_log(0, "Failed to encrypt v4 ticket (%s)", spn);
	    return ret;
	}
	*kvno = server->kvno;
    }

    return 0;
}

a195 1
    int kvno;
d254 2
a255 2

    ret = encode_524_response(spn, et, t, server, &ticket, &kvno);
d257 15
a271 1

d278 1
a278 1
	krb5_store_int32(sp, kvno);
d281 1
a281 1
	krb5_storage_seek(sp, MAX_KTXT_LEN - ticket.cipher.length, SEEK_CUR);
d286 1
a286 1
    reply->length = krb5_storage_seek(sp, 0, SEEK_CUR);
d295 2
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2005 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: 524.c,v 1.31.2.1 2005/07/26 20:43:13 lha Exp $");
d38 1
d40 1
d56 1
a56 1
    ret = _krb5_principalname2krb5_principal(&sprinc, t->sname, t->realm);
d58 1
a58 1
	kdc_log(0, "_krb5_principalname2krb5_principal: %s",
d90 1
a90 1
    ret = _krb5_principalname2krb5_principal(&client, et->cname, et->crealm);
d92 1
a92 1
	kdc_log(0, "_krb5_principalname2krb5_principal: %s",
d286 1
a286 1
    int kvno = 0;
@


1.1.1.3.4.1
log
@Errata #13 (hin):
A protocol flaw in the Kerberos 4 protocol allows an attacker to
impersonate any principal in a realm, if a Kerberos KDC is configured to
do cross-realm authentication.

Fix this by restricting the functionality of the protocol to prevent
responding to Kerberos 4 requests originating from foreign realms,
unless explicitely configured to do so by the user.
@
text
@a253 8
    if (!enable_v4_cross_realm && strcmp (et.crealm, t->realm) != 0) {
	kdc_log(0, "524 cross-realm %s -> %s disabled", et.crealm,
		t->realm);
	free_EncTicketPart(&et);
	ret = KRB5KDC_ERR_POLICY;
	goto out;
    }

@


1.1.1.3.2.1
log
@Errata #026 (hin):
A protocol flaw in the Kerberos 4 protocol allows an attacker to
impersonate any principal in a realm, if a Kerberos KDC is configured to
do cross-realm authentication.

Fix this by restricting the functionality of the protocol to prevent
responding to Kerberos 4 requests originating from foreign realms,
unless explicitely configured to do so by the user.
@
text
@a253 8
    if (!enable_v4_cross_realm && strcmp (et.crealm, t->realm) != 0) {
	kdc_log(0, "524 cross-realm %s -> %s disabled", et.crealm,
		t->realm);
	free_EncTicketPart(&et);
	ret = KRB5KDC_ERR_POLICY;
	goto out;
    }

@


