head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.22.10.01.26;	author reyk;	state dead;
branches;
next	1.6;

1.6
date	2013.06.17.18.57.41;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.12.23.20.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.05.16.16.49;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.32;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.32;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.21.49;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.54.51;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.15.31;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.43;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.7
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2006 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "hprop.h"

static int inetd_flag = -1;
static int help_flag;
static int version_flag;
static int print_dump;
static const char *database;
static int from_stdin;
static char *local_realm;
static char *ktname = NULL;

struct getargs args[] = {
    { "database", 'd', arg_string, rk_UNCONST(&database), "database", "file" },
    { "stdin",    'n', arg_flag, &from_stdin, "read from stdin", NULL },
    { "print",	    0, arg_flag, &print_dump, "print dump to stdout", NULL },
#ifdef SUPPORT_INETD
    { "inetd",	   'i',	arg_negative_flag,	&inetd_flag,
      "Not started from inetd", NULL },
#endif
    { "keytab",   'k',	arg_string, &ktname,	"keytab to use for authentication", "keytab" },
    { "realm",   'r',	arg_string, &local_realm, "realm to use", NULL },
    { "version",    0, arg_flag, &version_flag, NULL, NULL },
    { "help",    'h',  arg_flag, &help_flag, NULL, NULL}
};

static int num_args = sizeof(args) / sizeof(args[0]);
static char unparseable_name[] = "unparseable name";

static void
usage(int ret)
{
    arg_printusage (args, num_args, NULL, "");
    exit (ret);
}

int
main(int argc, char **argv)
{
    krb5_error_code ret;
    krb5_context context;
    krb5_auth_context ac = NULL;
    krb5_principal c1, c2;
    krb5_authenticator authent;
    krb5_keytab keytab;
    krb5_socket_t sock = rk_INVALID_SOCKET;
    HDB *db = NULL;
    int optidx = 0;
    char *tmp_db;
    krb5_log_facility *fac;
    int nprincs;

    setprogname(argv[0]);

    ret = krb5_init_context(&context);
    if(ret)
	exit(1);

    ret = krb5_openlog(context, "hpropd", &fac);
    if(ret)
	errx(1, "krb5_openlog");
    krb5_set_warn_dest(context, fac);

    if(getarg(args, num_args, argc, argv, &optidx))
	usage(1);

    if(local_realm != NULL)
	krb5_set_default_realm(context, local_realm);

    if(help_flag)
	usage(0);
    if(version_flag) {
	print_version(NULL);
	exit(0);
    }

    argc -= optidx;
    argv += optidx;

    if (argc != 0)
	usage(1);

    if (database == NULL)
	database = hdb_default_db(context);

    if(from_stdin) {
	sock = STDIN_FILENO;
    } else {
	struct sockaddr_storage ss;
	struct sockaddr *sa = (struct sockaddr *)&ss;
	socklen_t sin_len = sizeof(ss);
	char addr_name[256];
	krb5_ticket *ticket;
	char *server;

	sock = STDIN_FILENO;
#ifdef SUPPORT_INETD
	if (inetd_flag == -1) {
	    if (getpeername (sock, sa, &sin_len) < 0) {
		inetd_flag = 0;
	    } else {
		inetd_flag = 1;
	    }
	}
#else
	inetd_flag = 0;
#endif
	if (!inetd_flag) {
	    mini_inetd (krb5_getportbyname (context, "hprop", "tcp",
					    HPROP_PORT), &sock);
	}
	sin_len = sizeof(ss);
	if(getpeername(sock, sa, &sin_len) < 0)
	    krb5_err(context, 1, errno, "getpeername");

	if (inet_ntop(sa->sa_family,
		      socket_get_address (sa),
		      addr_name,
		      sizeof(addr_name)) == NULL)
	    strlcpy (addr_name, "unknown address",
		     sizeof(addr_name));

	krb5_log(context, fac, 0, "Connection from %s", addr_name);

	ret = krb5_kt_register(context, &hdb_kt_ops);
	if(ret)
	    krb5_err(context, 1, ret, "krb5_kt_register");

	if (ktname != NULL) {
	    ret = krb5_kt_resolve(context, ktname, &keytab);
	    if (ret)
		krb5_err (context, 1, ret, "krb5_kt_resolve %s", ktname);
	} else {
	    ret = krb5_kt_default (context, &keytab);
	    if (ret)
		krb5_err (context, 1, ret, "krb5_kt_default");
	}

	ret = krb5_recvauth(context, &ac, &sock, HPROP_VERSION, NULL,
			    0, keytab, &ticket);
	if(ret)
	    krb5_err(context, 1, ret, "krb5_recvauth");

	ret = krb5_unparse_name(context, ticket->server, &server);
	if (ret)
	    krb5_err(context, 1, ret, "krb5_unparse_name");
	if (strncmp(server, "hprop/", 5) != 0)
	    krb5_errx(context, 1, "ticket not for hprop (%s)", server);

	free(server);
	krb5_free_ticket (context, ticket);

	ret = krb5_auth_con_getauthenticator(context, ac, &authent);
	if(ret)
	    krb5_err(context, 1, ret, "krb5_auth_con_getauthenticator");

	ret = krb5_make_principal(context, &c1, NULL, "kadmin", "hprop", NULL);
	if(ret)
	    krb5_err(context, 1, ret, "krb5_make_principal");
	_krb5_principalname2krb5_principal(context, &c2,
					   authent->cname, authent->crealm);
	if(!krb5_principal_compare(context, c1, c2)) {
	    char *s;
	    ret = krb5_unparse_name(context, c2, &s);
	    if (ret)
		s = unparseable_name;
	    krb5_errx(context, 1, "Unauthorized connection from %s", s);
	}
	krb5_free_principal(context, c1);
	krb5_free_principal(context, c2);

	ret = krb5_kt_close(context, keytab);
	if(ret)
	    krb5_err(context, 1, ret, "krb5_kt_close");
    }

    if(!print_dump) {
	asprintf(&tmp_db, "%s~", database);

	ret = hdb_create(context, &db, tmp_db);
	if(ret)
	    krb5_err(context, 1, ret, "hdb_create(%s)", tmp_db);
	ret = db->hdb_open(context, db, O_RDWR | O_CREAT | O_TRUNC, 0600);
	if(ret)
	    krb5_err(context, 1, ret, "hdb_open(%s)", tmp_db);
    }

    nprincs = 0;
    while(1){
	krb5_data data;
	hdb_entry_ex entry;

	if(from_stdin) {
	    ret = krb5_read_message(context, &sock, &data);
	    if(ret != 0 && ret != HEIM_ERR_EOF)
		krb5_err(context, 1, ret, "krb5_read_message");
	} else {
	    ret = krb5_read_priv_message(context, ac, &sock, &data);
	    if(ret)
		krb5_err(context, 1, ret, "krb5_read_priv_message");
	}

	if(ret == HEIM_ERR_EOF || data.length == 0) {
	    if(!from_stdin) {
		data.data = NULL;
		data.length = 0;
		krb5_write_priv_message(context, ac, &sock, &data);
	    }
	    if(!print_dump) {
		ret = db->hdb_close(context, db);
		if(ret)
		    krb5_err(context, 1, ret, "db_close");
		ret = db->hdb_rename(context, db, database);
		if(ret)
		    krb5_err(context, 1, ret, "db_rename");
	    }
	    break;
	}
	memset(&entry, 0, sizeof(entry));
	ret = hdb_value2entry(context, &data, &entry.entry);
	krb5_data_free(&data);
	if(ret)
	    krb5_err(context, 1, ret, "hdb_value2entry");
	if(print_dump)
	    hdb_print_entry(context, db, &entry, stdout);
	else {
	    ret = db->hdb_store(context, db, 0, &entry);
	    if(ret == HDB_ERR_EXISTS) {
		char *s;
		ret = krb5_unparse_name(context, entry.entry.principal, &s);
		if (ret)
		    s = strdup(unparseable_name);
		krb5_warnx(context, "Entry exists: %s", s);
		free(s);
	    } else if(ret)
		krb5_err(context, 1, ret, "db_store");
	    else
		nprincs++;
	}
	hdb_free_entry(context, &entry);
    }
    if (!print_dump)
	krb5_log(context, fac, 0, "Received %d principals", nprincs);

    if (inetd_flag == 0)
	rk_closesocket(sock);

    exit(0);
}
@


1.6
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.5
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997-2004 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a35 135
RCSID("$KTH: hpropd.c,v 1.40 2005/04/24 13:48:08 lha Exp $");

#ifdef KRB4
#include <krb.h>
#include <prot.h>
#define Principal Principal4
#include <krb_db.h>

static des_cblock mkey4;
static des_key_schedule msched4;

static char *
time2str(time_t t)
{
    static char buf[128];
    strftime(buf, sizeof(buf), "%Y%m%d%H%M", gmtime(&t));
    return buf;
}

static int 
dump_krb4(krb5_context context, hdb_entry *ent, int fd)
{
    char name[ANAME_SZ];  
    char instance[INST_SZ];
    char realm[REALM_SZ];
    char buf[1024];
    char *p;
    int i;
    int ret;
    char *princ_name;
    Event *modifier;
    krb5_realm *realms;
    int cmp;
  
    ret = krb5_524_conv_principal(context, ent->principal,
				  name, instance, realm);
    if (ret) {
	ret = krb5_unparse_name(context, ent->principal, &princ_name);
	if (ret == 0) {
	    krb5_warn(context, ret, "%s", princ_name);
	    free(princ_name);
	}
	return -1;
    }

    ret = krb5_get_default_realms (context, &realms);
    if (ret) {
	krb5_warn(context, ret, "krb5_get_default_realms");
	return -1;
    }

    cmp = strcmp (realms[0], ent->principal->realm);
    krb5_free_host_realm (context, realms);
    if (cmp != 0)
        return -1;

    snprintf (buf, sizeof(buf), "%s %s ", name,
	      (strlen(instance) != 0) ? instance : "*");

    if (ent->max_life) { 
	asprintf(&p, "%d", krb_time_to_life(0, *ent->max_life));
	strlcat(buf, p, sizeof(buf));
	free(p);
    } else 
	strlcat(buf, "255", sizeof(buf)); 
    strlcat(buf, " ", sizeof(buf));

    i = 0;
    while (i < ent->keys.len &&
	   ent->keys.val[i].key.keytype != KEYTYPE_DES)
	++i;

    if (i == ent->keys.len) {
	krb5_warnx(context, "No DES key for %s.%s", name, instance);
	return -1;
    }

    if (ent->keys.val[i].mkvno)
	asprintf(&p, "%d ", *ent->keys.val[i].mkvno);
    else
	asprintf(&p, "%d ", 1);
    strlcat(buf, p, sizeof(buf));
    free(p);

    asprintf(&p, "%d ", ent->kvno);
    strlcat(buf, p, sizeof(buf));
    free(p);

    asprintf(&p, "%d ", 0); /* Attributes are always 0*/  
    strlcat(buf, p, sizeof(buf));
    free(p);

    { 
	u_int32_t *key = ent->keys.val[i].key.keyvalue.data;
	kdb_encrypt_key((des_cblock*)key, (des_cblock*)key,
			&mkey4, msched4, DES_ENCRYPT);
	asprintf(&p, "%x %x ", (int)htonl(*key), (int)htonl(*(key+1)));
	strlcat(buf, p, sizeof(buf));
	free(p);
    }
 
    if (ent->valid_end == NULL)
	strlcat(buf, time2str(60*60*24*365*50), sizeof(buf)); /*no expiration*/
    else
	strlcat(buf, time2str(*ent->valid_end), sizeof(buf));
    strlcat(buf, " ", sizeof(buf));

    if (ent->modified_by == NULL) 
	modifier = &ent->created_by;
    else  
	modifier = ent->modified_by;
    
    ret = krb5_524_conv_principal(context, modifier->principal,
				  name, instance, realm);
    if (ret) { 
	ret = krb5_unparse_name(context, modifier->principal, &princ_name);
	if (ret == 0) {
	    krb5_warn(context, ret, "%s", princ_name);
	    free(princ_name);
	}
	return -1;
    } 
    asprintf(&p, "%s %s %s\n", time2str(modifier->time), 
	     (strlen(name) != 0) ? name : "*", 
	     (strlen(instance) != 0) ? instance : "*");
    strlcat(buf, p, sizeof(buf));
    free(p);

    ret = write(fd, buf, strlen(buf));
    if (ret == -1)
	krb5_warnx(context, "write");
    return 0;
}
#endif /* KRB4 */

d40 1
a40 1
static const char *database = HDB_DEFAULT_DB;
a42 3
#ifdef KRB4
static int v4dump;
#endif
d46 4
a49 3
    { "database", 'd', arg_string, &database, "database", "file" },
    { "stdin",    'n', arg_flag, &from_stdin, "read from stdin" },
    { "print",	    0, arg_flag, &print_dump, "print dump to stdout" },
d51 2
a52 1
      "Not started from inetd" },
d54 1
a54 4
    { "realm",   'r',	arg_string, &local_realm, "realm to use" },
#ifdef KRB4
    { "v4dump",       '4',  arg_flag, &v4dump, "create v4 type DB" },
#endif
d60 1
d78 3
a80 3
    int fd;
    HDB *db;
    int optind = 0;
d84 2
a85 4
#ifdef KRB4
    int e;
    int fd_out = -1;
#endif
d93 1
a93 1
	;
d95 2
a96 2
  
    if(getarg(args, num_args, argc, argv, &optind))
a98 5
#ifdef KRB4
    if (v4dump && database == HDB_DEFAULT_DB)
       database = "/var/kerberos/524_dump";
#endif /* KRB4 */

d101 1
a101 1
    
d108 3
a110 3
    
    argc -= optind;
    argv += optind;
d115 6
a120 3
    if(from_stdin)
	fd = STDIN_FILENO;
    else {
d128 2
a129 1
	fd = STDIN_FILENO;
d131 1
a131 1
	    if (getpeername (fd, sa, &sin_len) < 0)
d133 1
a133 1
	    else
d135 1
d137 3
d142 1
a142 1
					    HPROP_PORT));
d145 1
a145 1
	if(getpeername(fd, sa, &sin_len) < 0)
d153 1
a153 1
			     sizeof(addr_name));
d156 1
a156 1
    
d171 1
a171 1
	ret = krb5_recvauth(context, &ac, &fd, HPROP_VERSION, NULL,
d175 1
a175 1
	
d188 1
a188 1
	
d192 1
a192 1
	_krb5_principalname2krb5_principal(&c2, 
d198 1
a198 1
		s = "unparseable name";
d208 1
a208 1
    
a210 17
#ifdef KRB4
	if (v4dump) {
	    fd_out = open(tmp_db, O_WRONLY | O_CREAT | O_TRUNC, 0600);
	    if (fd_out == -1)
		krb5_errx(context, 1, "%s", strerror(errno));
	}
	else
#endif /* KRB4 */
	{
	    ret = hdb_create(context, &db, tmp_db);
	    if(ret)
		krb5_err(context, 1, ret, "hdb_create(%s)", tmp_db);
	    ret = db->hdb_open(context, db, O_RDWR | O_CREAT | O_TRUNC, 0600);
	    if(ret)
		krb5_err(context, 1, ret, "hdb_open(%s)", tmp_db);
	}
    }
d212 6
a217 6
#ifdef KRB4
    if (v4dump) {
	e = kdb_get_master_key(0, &mkey4, msched4);
	if(e)
	    krb5_errx(context, 1, "kdb_get_master_key: %s",
		      krb_get_err_text(e));
a218 1
#endif /* KRB4 */
d223 1
a223 1
	hdb_entry entry;
d226 1
a226 1
	    ret = krb5_read_message(context, &fd, &data);
d230 1
a230 1
	    ret = krb5_read_priv_message(context, ac, &fd, &data);
d239 1
a239 1
		krb5_write_priv_message(context, ac, &fd, &data);
d242 6
a247 18
#ifdef KRB4
		if (v4dump) {
		    ret = rename(tmp_db, database);
		    if (ret)
			krb5_errx(context, 1, "rename");
		    ret = close(fd_out);
		    if (ret)
			krb5_errx(context, 1, "close");
		} else
#endif /* KRB4 */
		{
		    ret = db->hdb_rename(context, db, database);
		    if(ret)
			krb5_err(context, 1, ret, "db_rename");
		    ret = db->hdb_close(context, db);
		    if(ret)
			krb5_err(context, 1, ret, "db_close");
		}
d251 3
a253 1
	ret = hdb_value2entry(context, &data, &entry);
d259 10
a268 5
#ifdef KRB4
	    if (v4dump) {
		ret = dump_krb4(context, &entry, fd_out);
		if(!ret) nprincs++;
	    }
d270 1
a270 15
#endif /* KRB4 */
	    {
		ret = db->hdb_store(context, db, 0, &entry);
		if(ret == HDB_ERR_EXISTS) {
		    char *s;
		    ret = krb5_unparse_name(context, entry.principal, &s);
		    if (ret)
			s = strdup("unparseable name");
		    krb5_warnx(context, "Entry exists: %s", s);
		    free(s);
		} else if(ret) 
		    krb5_err(context, 1, ret, "db_store");
		else
		    nprincs++;
	    }
d276 4
@


1.4
log
@Merge 0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: hpropd.c,v 1.36 2003/04/16 15:46:32 lha Exp $");
d39 5
d73 5
a77 3
	krb5_unparse_name(context, ent->principal, &princ_name);
	krb5_warn(context, ret, "%s", princ_name);
	free(princ_name);
d151 5
a155 3
	krb5_unparse_name(context, modifier->principal, &princ_name);
	krb5_warn(context, ret, "%s", princ_name);
	free(princ_name);
d329 2
a330 1
	principalname2krb5_principal(&c2, authent->cname, authent->crealm);
d333 3
a335 1
	    krb5_unparse_name(context, c2, &s);
d360 1
a360 1
	    ret = db->open(context, db, O_RDWR | O_CREAT | O_TRUNC, 0600);
d408 1
a408 1
		    ret = db->rename(context, db, database);
d411 1
a411 1
		    ret = db->close(context, db);
d432 1
a432 1
		ret = db->store(context, db, 0, &entry);
d435 3
a437 1
		    krb5_unparse_name(context, entry.principal, &s);
@


1.3
log
@string cleaning; parts by me, then parts by hin, then more parts by me.
since this is not a very important part of the source tree, and since it
does compile, i am dumping it in now.
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: hpropd.c,v 1.33 2001/06/18 04:07:48 assar Exp $");
d131 1
a131 1
	strlcat(buf, time2str(60*60*24*365*50), sizeof(buf)); /* no expiration */
d166 1
a166 1
static char *database = HDB_DEFAULT_DB;
d168 1
d181 1
d234 3
@


1.2
log
@Remove all uses of setprogname() and getprogname() in kerberosV subtree.
@
text
@d90 1
a90 1
	strcat(buf, p);
d93 2
a94 2
	strcat(buf, "255"); 
    strcat(buf, " ");
d110 1
a110 1
    strcat(buf, p);
d114 1
a114 1
    strcat(buf, p);
d118 1
a118 1
    strcat(buf, p);
d126 1
a126 1
	strcat(buf, p);
d131 1
a131 1
	strcat(buf, time2str(60*60*24*365*50)); /* no expiration */
d133 2
a134 2
	strcat(buf, time2str(*ent->valid_end));
    strcat(buf, " ");
d152 1
a152 1
    strcat(buf, p);
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
RCSID("$KTH: hpropd.c,v 1.31 2001/01/25 12:37:39 assar Exp $");
a215 2
    set_progname(argv[0]);

d308 1
a308 1
	ret = krb5_auth_getauthenticator(context, ac, &authent);
d310 1
a310 1
	    krb5_err(context, 1, ret, "krb5_auth_getauthenticator");
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d36 1
a36 1
RCSID("$KTH: hpropd.c,v 1.32 2001/02/20 01:44:50 assar Exp $");
d216 1
a216 1
    setprogname(argv[0]);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: hpropd.c,v 1.33 2001/06/18 04:07:48 assar Exp $");
d310 1
a310 1
	ret = krb5_auth_con_getauthenticator(context, ac, &authent);
d312 1
a312 1
	    krb5_err(context, 1, ret, "krb5_auth_con_getauthenticator");
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: hpropd.c,v 1.36 2003/04/16 15:46:32 lha Exp $");
d90 1
a90 1
	strlcat(buf, p, sizeof(buf));
d93 2
a94 2
	strlcat(buf, "255", sizeof(buf)); 
    strlcat(buf, " ", sizeof(buf));
d110 1
a110 1
    strlcat(buf, p, sizeof(buf));
d114 1
a114 1
    strlcat(buf, p, sizeof(buf));
d118 1
a118 1
    strlcat(buf, p, sizeof(buf));
d126 1
a126 1
	strlcat(buf, p, sizeof(buf));
d131 1
a131 1
	strlcat(buf, time2str(60*60*24*365*50), sizeof(buf)); /*no expiration*/
d133 2
a134 2
	strlcat(buf, time2str(*ent->valid_end), sizeof(buf));
    strlcat(buf, " ", sizeof(buf));
d152 1
a152 1
    strlcat(buf, p, sizeof(buf));
d166 1
a166 1
static const char *database = HDB_DEFAULT_DB;
a167 1
static char *local_realm;
a179 1
    { "realm",   'r',	arg_string, &local_realm, "realm to use" },
a233 3

    if(local_realm != NULL)
	krb5_set_default_realm(context, local_realm);
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2004 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: hpropd.c,v 1.40 2005/04/24 13:48:08 lha Exp $");
a38 5
#include <krb.h>
#include <prot.h>
#define Principal Principal4
#include <krb_db.h>

d68 3
a70 5
	ret = krb5_unparse_name(context, ent->principal, &princ_name);
	if (ret == 0) {
	    krb5_warn(context, ret, "%s", princ_name);
	    free(princ_name);
	}
d144 3
a146 5
	ret = krb5_unparse_name(context, modifier->principal, &princ_name);
	if (ret == 0) {
	    krb5_warn(context, ret, "%s", princ_name);
	    free(princ_name);
	}
d322 1
a322 2
	_krb5_principalname2krb5_principal(&c2, 
					   authent->cname, authent->crealm);
d325 1
a325 3
	    ret = krb5_unparse_name(context, c2, &s);
	    if (ret)
		s = "unparseable name";
d350 1
a350 1
	    ret = db->hdb_open(context, db, O_RDWR | O_CREAT | O_TRUNC, 0600);
d398 1
a398 1
		    ret = db->hdb_rename(context, db, database);
d401 1
a401 1
		    ret = db->hdb_close(context, db);
d422 1
a422 1
		ret = db->hdb_store(context, db, 0, &entry);
d425 1
a425 3
		    ret = krb5_unparse_name(context, entry.principal, &s);
		    if (ret)
			s = strdup("unparseable name");
@


