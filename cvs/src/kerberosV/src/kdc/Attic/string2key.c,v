head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.26
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.24
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.22
	OPENBSD_5_0:1.6.0.20
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.18
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.16
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.04.22.10.01.26;	author reyk;	state dead;
branches;
next	1.7;

1.7
date	2013.06.17.18.57.41;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.18.21.08.28;	author biorn;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.16.21.19.55;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.06.07.09.10;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.15.05.43.52;	author mho;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.37;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.37;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.02.15.33;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.32.46;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2003 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "headers.h"
#include <getarg.h>

int version5;
int version4;
int afs;
char *principal;
char *cell;
char *password;
const char *keytype_str = "des3-cbc-sha1";
int version;
int help;

struct getargs args[] = {
    { "version5", '5', arg_flag,   &version5, "Output Kerberos v5 string-to-key",
	NULL },
    { "version4", '4', arg_flag,   &version4, "Output Kerberos v4 string-to-key",
	NULL },
    { "afs",      'a', arg_flag,   &afs, "Output AFS string-to-key", NULL },
    { "cell",     'c', arg_string, &cell, "AFS cell to use", "cell" },
    { "password", 'w', arg_string, &password, "Password to use", "password" },
    { "principal",'p', arg_string, &principal, "Kerberos v5 principal to use", "principal" },
    { "keytype",  'k', arg_string, rk_UNCONST(&keytype_str), "Keytype", NULL },
    { "version",    0, arg_flag,   &version, "print version", NULL },
    { "help",       0, arg_flag,   &help, NULL, NULL }
};

int num_args = sizeof(args) / sizeof(args[0]);

static void
usage(int status)
{
    arg_printusage (args, num_args, NULL, "password");
    exit(status);
}

static void
tokey(krb5_context context,
      krb5_enctype enctype,
      const char *pw,
      krb5_salt salt,
      const char *label)
{
    krb5_error_code ret;
    size_t i;
    krb5_keyblock key;
    char *e;

    ret = krb5_string_to_key_salt(context, enctype, pw, salt, &key);
    if (ret)
	krb5_err(context, 1, ret, "krb5_string_to_key_salt");
    ret = krb5_enctype_to_string(context, enctype, &e);
    if (ret)
	krb5_err(context, 1, ret, "krb5_enctype_to_string");
    printf(label, e);
    printf(": ");
    for(i = 0; i < key.keyvalue.length; i++)
	printf("%02x", ((unsigned char*)key.keyvalue.data)[i]);
    printf("\n");
    krb5_free_keyblock_contents(context, &key);
    free(e);
}

int
main(int argc, char **argv)
{
    krb5_context context;
    krb5_principal princ;
    krb5_salt salt;
    int optidx;
    char buf[1024];
    krb5_enctype etype;
    krb5_error_code ret;

    optidx = krb5_program_setup(&context, argc, argv, args, num_args, NULL);

    if(help)
	usage(0);

    if(version){
	print_version (NULL);
	return 0;
    }

    argc -= optidx;
    argv += optidx;

    if (argc > 1)
	usage(1);

    if(!version5 && !version4 && !afs)
	version5 = 1;

    ret = krb5_string_to_enctype(context, keytype_str, &etype);
    if(ret)
	krb5_err(context, 1, ret, "krb5_string_to_enctype");

    if((etype != ETYPE_DES_CBC_CRC &&
	etype != ETYPE_DES_CBC_MD4 &&
	etype != ETYPE_DES_CBC_MD5) &&
       (afs || version4)) {
	if(!version5) {
	    etype = ETYPE_DES_CBC_CRC;
	} else {
	    krb5_errx(context, 1,
		      "DES is the only valid keytype for AFS and Kerberos 4");
	}
    }

    if(version5 && principal == NULL){
	printf("Kerberos v5 principal: ");
	if(fgets(buf, sizeof(buf), stdin) == NULL)
	    return 1;
	buf[strcspn(buf, "\r\n")] = '\0';
	principal = estrdup(buf);
    }
    if(afs && cell == NULL){
	printf("AFS cell: ");
	if(fgets(buf, sizeof(buf), stdin) == NULL)
	    return 1;
	buf[strcspn(buf, "\r\n")] = '\0';
	cell = estrdup(buf);
    }
    if(argv[0])
	password = argv[0];
    if(password == NULL){
	if(UI_UTIL_read_pw_string(buf, sizeof(buf), "Password: ", 0))
	    return 1;
	password = buf;
    }

    if(version5){
	krb5_parse_name(context, principal, &princ);
	krb5_get_pw_salt(context, princ, &salt);
	tokey(context, etype, password, salt, "Kerberos 5 (%s)");
	krb5_free_salt(context, salt);
    }
    if(version4){
	salt.salttype = KRB5_PW_SALT;
	salt.saltvalue.length = 0;
	salt.saltvalue.data = NULL;
	tokey(context, ETYPE_DES_CBC_MD5, password, salt, "Kerberos 4");
    }
    if(afs){
	salt.salttype = KRB5_AFS3_SALT;
	salt.saltvalue.length = strlen(cell);
	salt.saltvalue.data = cell;
	tokey(context, ETYPE_DES_CBC_MD5, password, salt, "AFS");
    }
    return 0;
}
@


1.7
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.6
log
@Sync with heimdal; clearer and might generet fewer conflicts on next import.

looks ok, beck@@ ray@@
@
text
@d2 3
a4 3
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a36 2
RCSID("$KTH: string2key.c,v 1.22 2003/09/03 09:34:15 lha Exp $");

d48 5
a52 3
    { "version5", '5', arg_flag,   &version5, "Output Kerberos v5 string-to-key" },
    { "version4", '4', arg_flag,   &version4, "Output Kerberos v4 string-to-key" },
    { "afs",      'a', arg_flag,   &afs, "Output AFS string-to-key" },
d56 3
a58 3
    { "keytype",  'k', arg_string, &keytype_str, "Keytype" },
    { "version",    0, arg_flag,   &version, "print version" },
    { "help",       0, arg_flag,   &help, NULL }
d71 4
a74 4
tokey(krb5_context context, 
      krb5_enctype enctype, 
      const char *password, 
      krb5_salt salt, 
d78 1
a78 1
    int i;
d82 1
a82 1
    ret = krb5_string_to_key_salt(context, enctype, password, salt, &key);
d84 1
a84 1
       krb5_err(context, 1, ret, "krb5_string_to_key_salt");
d87 1
a87 1
       krb5_err(context, 1, ret, "krb5_enctype_to_string");
d103 1
a103 1
    int optind;
d108 1
a108 1
    optind = krb5_program_setup(&context, argc, argv, args, num_args, NULL);
d112 1
a112 1
    
d118 2
a119 2
    argc -= optind;
    argv += optind;
d128 3
a130 20
    if(ret) {
	krb5_keytype keytype;
	int *etypes;
	unsigned num;
	char *str;
	ret = krb5_string_to_keytype(context, keytype_str, &keytype);
	if(ret)
	    krb5_err(context, 1, ret, "%s", keytype_str);
	ret = krb5_keytype_to_enctypes(context, keytype, &num, &etypes);
	if(ret)
	    krb5_err(context, 1, ret, "%s", keytype_str);
	if(num == 0)
	    krb5_errx(context, 1, "there are no encryption types for that keytype");
	etype = etypes[0];
	krb5_enctype_to_string(context, etype, &str);
	keytype_str = str;
	if(num > 1 && version5)
	    krb5_warnx(context, "ambiguous keytype, using %s", keytype_str);
    }
    
d138 1
a138 1
	    krb5_errx(context, 1, 
d164 1
a164 1
	
@


1.5
log
@Check that string length != 0 before setting buf[strlen(buf) - 1].

OK cloder@@.
@
text
@d164 1
a164 2
	if(buf[0] != '\0' && buf[strlen(buf) - 1] == '\n')
	    buf[strlen(buf) - 1] = '\0';
d171 1
a171 2
	if(buf[0] != '\0' && buf[strlen(buf) - 1] == '\n')
	    buf[strlen(buf) - 1] = '\0';
@


1.4
log
@Coverity fixes backported from the heimdal cvs.

ok beck@@, No problem deraadt@@
@
text
@d164 1
a164 1
	if(buf[strlen(buf) - 1] == '\n')
d172 1
a172 1
	if(buf[strlen(buf) - 1] == '\n')
@


1.3
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d77 1
d81 7
a87 2
    krb5_string_to_key_salt(context, enctype, password, salt, &key);
    krb5_enctype_to_string(context, enctype, &e);
d94 1
@


1.2
log
@-Wall; ok hin@@
@
text
@d37 1
a37 1
RCSID("$KTH: string2key.c,v 1.20 2003/03/25 12:28:52 joda Exp $");
d125 1
d135 2
a136 1
	krb5_enctype_to_string(context, etype, (char **) &keytype_str);
d172 1
a172 1
	if(des_read_pw_string(buf, sizeof(buf), "Password: ", 0))
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1997, 1998, 1999 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: string2key.c,v 1.18 1999/12/02 17:05:00 joda Exp $");
d45 1
a45 1
char *keytype_str = "des-cbc-md5";
d79 1
d81 3
a83 1
    printf("%s: ", label);
a120 1
#if 0
d123 2
d126 11
a136 1
	ret = krb5_keytype_to_enctype(context, keytype, &etype);
a137 3
#endif
    if(ret)
	krb5_err(context, 1, ret, "%s", keytype_str);
d142 8
a149 4
       (afs || version4))
	krb5_errx(context, 1, 
		  "DES is the only valid keytype for AFS and Kerberos 4");
    
d178 1
a178 1
	tokey(context, etype, password, salt, "Kerberos v5 key");
d185 1
a185 1
	tokey(context, ETYPE_DES_CBC_MD5, password, salt, "Kerberos v4 key");
d191 1
a191 1
	tokey(context, ETYPE_DES_CBC_MD5, password, salt, "AFS key");
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: string2key.c,v 1.20 2003/03/25 12:28:52 joda Exp $");
d45 1
a45 1
const char *keytype_str = "des3-cbc-sha1";
a78 1
    char *e;
d80 1
a80 3
    krb5_enctype_to_string(context, enctype, &e);
    printf(label, e);
    printf(": ");
d118 1
a120 2
	int *etypes;
	unsigned num;
d122 1
a122 11
	if(ret)
	    krb5_err(context, 1, ret, "%s", keytype_str);
	ret = krb5_keytype_to_enctypes(context, keytype, &num, &etypes);
	if(ret)
	    krb5_err(context, 1, ret, "%s", keytype_str);
	if(num == 0)
	    krb5_errx(context, 1, "there are no encryption types for that keytype");
	etype = etypes[0];
	krb5_enctype_to_string(context, etype, &keytype_str);
	if(num > 1 && version5)
	    krb5_warnx(context, "ambiguous keytype, using %s", keytype_str);
d124 3
d131 4
a134 8
       (afs || version4)) {
	if(!version5) {
	    etype = ETYPE_DES_CBC_CRC;
	} else {
	    krb5_errx(context, 1, 
		      "DES is the only valid keytype for AFS and Kerberos 4");
	}
    }
d163 1
a163 1
	tokey(context, etype, password, salt, "Kerberos 5 (%s)");
d170 1
a170 1
	tokey(context, ETYPE_DES_CBC_MD5, password, salt, "Kerberos 4");
d176 1
a176 1
	tokey(context, ETYPE_DES_CBC_MD5, password, salt, "AFS");
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d37 1
a37 1
RCSID("$KTH: string2key.c,v 1.22 2003/09/03 09:34:15 lha Exp $");
a124 1
	char *str;
d134 1
a134 2
	krb5_enctype_to_string(context, etype, &str);
	keytype_str = str;
d170 1
a170 1
	if(UI_UTIL_read_pw_string(buf, sizeof(buf), "Password: ", 0))
@


