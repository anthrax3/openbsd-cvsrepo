head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.28
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.26
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.24
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	HEIMDAL_0_7_2:1.1.1.6
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	HEIMDAL_0_6_3:1.1.1.5
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.1.3.0.4
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.04.22.10.01.26;	author reyk;	state dead;
branches;
next	1.9;

1.9
date	2013.06.17.18.57.41;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.29.16.20.29;	author biorn;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.19.14.20.17;	author biorn;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.09.42.26;	author mho;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2003.05.11.04.12.44;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.21.09.50.07;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.30;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.30;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.21.46;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.54.50;	author hin;	state Exp;
branches
	1.1.1.3.2.1
	1.1.1.3.4.1;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.15.30;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.10.29.15.55.32;	author biorn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.04.14.07.32.42;	author biorn;	state Exp;
branches;
next	;

1.1.1.3.2.1
date	2003.03.22.06.57.21;	author miod;	state Exp;
branches;
next	;

1.1.1.3.4.1
date	2003.03.22.21.26.30;	author margarida;	state Exp;
branches;
next	;

1.5.2.1
date	2004.05.26.09.02.38;	author brad;	state Exp;
branches;
next	;

1.5.4.1
date	2004.05.26.08.17.47;	author brad;	state Exp;
branches;
next	;


desc
@@


1.10
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2007 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Portions Copyright (c) 2009 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kdc_locl.h"
#include <getarg.h>
#include <parse_bytes.h>

struct dbinfo {
    char *realm;
    char *dbname;
    char *mkey_file;
    struct dbinfo *next;
};

static char *config_file;	/* location of kdc config file */

static int require_preauth = -1; /* 1 == require preauth for all principals */
static char *max_request_str;	/* `max_request' as a string */

static int disable_des = -1;

static int builtin_hdb_flag;
static int help_flag;
static int version_flag;

static struct getarg_strings addresses_str;	/* addresses to listen on */

char *runas_string;
char *chroot_string;


static struct getargs args[] = {
    {
	"config-file",	'c',	arg_string,	&config_file,
	"location of config file",	"file"
    },
    {
	"require-preauth",	'p',	arg_negative_flag, &require_preauth,
	"don't require pa-data in as-reqs", NULL
    },
    {
	"max-request",	0,	arg_string, &max_request_str,
	"max size for a kdc-request", "size"
    },
    { "enable-http", 'H', arg_flag, &enable_http, "turn on HTTP support",
   	 NULL },
    {	"ports",	'P', 	arg_string, rk_UNCONST(&port_str),
	"ports to listen to", "portspec"
    },
#ifdef SUPPORT_DETACH
#if DETACH_IS_DEFAULT
    {
	"detach",       'D',      arg_negative_flag, &detach_from_console,
	"don't detach from console", NULL
    },
#else
    {
	"detach",       0 ,      arg_flag, &detach_from_console,
	"detach from console", NULL
    },
#endif
#endif
    {	"addresses",	0,	arg_strings, &addresses_str,
	"addresses to listen on", "list of addresses" },
    {	"disable-des",	0,	arg_flag, &disable_des,
	"disable DES", NULL },
    {	"builtin-hdb",	0,	arg_flag,   &builtin_hdb_flag,
	"list builtin hdb backends", NULL},
    {   "runas-user",	0,	arg_string, &runas_string,
	"run as this user when connected to network", NULL
    },
    {   "chroot",	0,	arg_string, &chroot_string,
	"chroot directory to run in", NULL
    },
    {	"help",		'h',	arg_flag,   &help_flag, NULL, NULL },
    {	"version",	'v',	arg_flag,   &version_flag, NULL, NULL }
};

static int num_args = sizeof(args) / sizeof(args[0]);

static void
usage(int ret)
{
    arg_printusage (args, num_args, NULL, "");
    exit (ret);
}

static void
add_one_address (krb5_context context, const char *str, int first)
{
    krb5_error_code ret;
    krb5_addresses tmp;

    ret = krb5_parse_address (context, str, &tmp);
    if (ret)
	krb5_err (context, 1, ret, "parse_address `%s'", str);
    if (first)
	krb5_copy_addresses(context, &tmp, &explicit_addresses);
    else
	krb5_append_addresses(context, &explicit_addresses, &tmp);
    krb5_free_addresses (context, &tmp);
}

krb5_kdc_configuration *
configure(krb5_context context, int argc, char **argv)
{
    krb5_kdc_configuration *config;
    krb5_error_code ret;
    int optidx = 0;
    const char *p;

    while(getarg(args, num_args, argc, argv, &optidx))
	warnx("error at argument `%s'", argv[optidx]);

    if(help_flag)
	usage (0);

    if (version_flag) {
	print_version(NULL);
	exit(0);
    }

    if (builtin_hdb_flag) {
	char *list;
	ret = hdb_list_builtin(context, &list);
	if (ret)
	    krb5_err(context, 1, ret, "listing builtin hdb backends");
	printf("builtin hdb backends: %s\n", list);
	free(list);
	exit(0);
    }

    argc -= optidx;
    argv += optidx;

    if (argc != 0)
	usage(1);

    {
	char **files;

	if (config_file == NULL) {
	    asprintf(&config_file, "%s/kdc.conf", hdb_db_dir(context));
	    if (config_file == NULL)
		errx(1, "out of memory");
	}

	ret = krb5_prepend_config_files_default(config_file, &files);
	if (ret)
	    krb5_err(context, 1, ret, "getting configuration files");

	ret = krb5_set_config_files(context, files);
	krb5_free_config_files(files);
	if(ret)
	    krb5_err(context, 1, ret, "reading configuration files");
    }

    ret = krb5_kdc_get_config(context, &config);
    if (ret)
	krb5_err(context, 1, ret, "krb5_kdc_default_config");

    kdc_openlog(context, "kdc", config);

    ret = krb5_kdc_set_dbinfo(context, config);
    if (ret)
	krb5_err(context, 1, ret, "krb5_kdc_set_dbinfo");

    if(max_request_str)
	max_request_tcp = max_request_udp = parse_bytes(max_request_str, NULL);

    if(max_request_tcp == 0){
	p = krb5_config_get_string (context,
				    NULL,
				    "kdc",
				    "max-request",
				    NULL);
	if(p)
	    max_request_tcp = max_request_udp = parse_bytes(p, NULL);
    }

    if(require_preauth != -1)
	config->require_preauth = require_preauth;

    if(port_str == NULL){
	p = krb5_config_get_string(context, NULL, "kdc", "ports", NULL);
	if (p != NULL)
	    port_str = strdup(p);
    }

    explicit_addresses.len = 0;

    if (addresses_str.num_strings) {
	int i;

	for (i = 0; i < addresses_str.num_strings; ++i)
	    add_one_address (context, addresses_str.strings[i], i == 0);
	free_getarg_strings (&addresses_str);
    } else {
	char **foo = krb5_config_get_strings (context, NULL,
					      "kdc", "addresses", NULL);

	if (foo != NULL) {
	    add_one_address (context, *foo++, TRUE);
	    while (*foo)
		add_one_address (context, *foo++, FALSE);
	}
    }

    if(enable_http == -1)
	enable_http = krb5_config_get_bool(context, NULL, "kdc",
					   "enable-http", NULL);

    if(request_log == NULL)
	request_log = krb5_config_get_string(context, NULL,
					     "kdc",
					     "kdc-request-log",
					     NULL);

    if (krb5_config_get_string(context, NULL, "kdc",
			       "enforce-transited-policy", NULL))
	krb5_errx(context, 1, "enforce-transited-policy deprecated, "
		  "use [kdc]transited-policy instead");

#ifdef SUPPORT_DETACH
    if(detach_from_console == -1)
	detach_from_console = krb5_config_get_bool_default(context, NULL,
							   DETACH_IS_DEFAULT,
							   "kdc",
							   "detach", NULL);
#endif /* SUPPORT_DETACH */

    if(max_request_tcp == 0)
	max_request_tcp = 64 * 1024;
    if(max_request_udp == 0)
	max_request_udp = 64 * 1024;

    if (port_str == NULL)
	port_str = "+";

    if(disable_des == -1)
	disable_des = krb5_config_get_bool_default(context, NULL,
						   FALSE,
						   "kdc",
						   "disable-des", NULL);
    if(disable_des) {
	krb5_enctype_disable(context, ETYPE_DES_CBC_CRC);
	krb5_enctype_disable(context, ETYPE_DES_CBC_MD4);
	krb5_enctype_disable(context, ETYPE_DES_CBC_MD5);
	krb5_enctype_disable(context, ETYPE_DES_CBC_NONE);
	krb5_enctype_disable(context, ETYPE_DES_CFB64_NONE);
	krb5_enctype_disable(context, ETYPE_DES_PCBC_NONE);
    }

    krb5_kdc_windc_init(context);

    krb5_kdc_pkinit_config(context, config);

    return config;
}
@


1.9
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.8
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997-2004 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 1
a6 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d8 3
a10 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d12 2
a13 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d15 3
a17 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d19 15
a33 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d40 6
a45 3
RCSID("$KTH: config.c,v 1.59 2005/05/23 17:34:12 lha Exp $");

static const char *config_file;	/* location of kdc config file */
d47 1
a47 3
int require_preauth = -1;	/* 1 == require preauth for all principals */

size_t max_request;		/* maximal size of a request */
d49 1
d52 1
a52 1
time_t kdc_warn_pwexpire;	/* time before expiration to print a warning */
d54 3
a56 17
struct dbinfo *databases;
HDB **db;
int num_db;

const char *port_str;

int detach_from_console = -1;
#define DETACH_IS_DEFAULT FALSE

int enable_http = -1;
krb5_boolean encode_as_rep_as_tgs_rep; /* bug compatibility */

krb5_boolean check_ticket_addresses;
krb5_boolean allow_null_ticket_addresses;
krb5_boolean allow_anonymous;
int trpolicy;
static const char *trpolicy_str;
a58 7
krb5_addresses explicit_addresses;

static int disable_des = -1;

char *v4_realm;
int enable_v4 = -1;
int enable_kaserver = -1;
d60 2
a61 2
int enable_524 = -1;
int enable_v4_cross_realm = -1;
a62 3
static int builtin_hdb_flag;
static int help_flag;
static int version_flag;
d65 3
a67 7
    { 
	"config-file",	'c',	arg_string,	&config_file, 
	"location of config file",	"file" 
    },
    { 
	"require-preauth",	'p',	arg_negative_flag, &require_preauth, 
	"don't require pa-data in as-reqs"
a68 5
    { 
	"max-request",	0,	arg_string, &max_request, 
	"max size for a kdc-request", "size"
    },
#if 0
d70 2
a71 7
	"database",	'd', 	arg_string, &databases,
	"location of database", "database"
    },
#endif
    { "enable-http", 'H', arg_flag, &enable_http, "turn on HTTP support" },
    {	"524",		0, 	arg_negative_flag, &enable_524,
	"don't respond to 524 requests" 
d74 2
a75 2
	"kaserver", 'K', arg_flag,   &enable_kaserver,
	"enable kaserver support"
d77 3
a79 12
    {	"kerberos4",	0, 	arg_flag, &enable_v4,
	"respond to kerberos 4 requests" 
    },
    { 
	"v4-realm",	'r',	arg_string, &v4_realm, 
	"realm to serve v4-requests for"
    },
    {	"kerberos4-cross-realm",	0, 	arg_flag,
	&enable_v4_cross_realm,
	"respond to kerberos 4 requests from foreign realms" 
    },
    {	"ports",	'P', 	arg_string, &port_str,
d82 1
d85 2
a86 2
	"detach",       'D',      arg_negative_flag, &detach_from_console, 
	"don't detach from console"
d90 2
a91 2
	"detach",       0 ,      arg_flag, &detach_from_console, 
	"detach from console"
d94 1
d98 1
a98 1
	"disable DES" },
d100 9
a108 3
	"list builtin hdb backends"},
    {	"help",		'h',	arg_flag,   &help_flag },
    {	"version",	'v',	arg_flag,   &version_flag }
d121 1
a121 80
get_dbinfo(void)
{
    const krb5_config_binding *top_binding = NULL;
    const krb5_config_binding *db_binding;
    const krb5_config_binding *default_binding = NULL;
    struct dbinfo *di, **dt;
    const char *default_dbname = HDB_DEFAULT_DB;
    const char *default_mkey = HDB_DB_DIR "/m-key";
    const char *p;

    databases = NULL;
    dt = &databases;
    while((db_binding = (const krb5_config_binding *)
	   krb5_config_get_next(context, NULL, &top_binding, 
				krb5_config_list, 
				"kdc", 
				"database",
				NULL))) {
	p = krb5_config_get_string(context, db_binding, "realm", NULL);
	if(p == NULL) {
	    if(default_binding) {
		krb5_warnx(context, "WARNING: more than one realm-less "
			   "database specification");
		krb5_warnx(context, "WARNING: using the first encountered");
	    } else
		default_binding = db_binding;
	    continue;
	}
	di = calloc(1, sizeof(*di));
	di->realm = strdup(p);
	p = krb5_config_get_string(context, db_binding, "dbname", NULL);
	if(p)
	    di->dbname = strdup(p);
	p = krb5_config_get_string(context, db_binding, "mkey_file", NULL);
	if(p)
	    di->mkey_file = strdup(p);
	*dt = di;
	dt = &di->next;
    }
    if(default_binding) {
	di = calloc(1, sizeof(*di));
	p = krb5_config_get_string(context, default_binding, "dbname", NULL);
	if(p) {
	    di->dbname = strdup(p);
	    default_dbname = p;
	}
	p = krb5_config_get_string(context, default_binding, "mkey_file", NULL);
	if(p) {
	    di->mkey_file = strdup(p);
	    default_mkey = p;
	}
	*dt = di;
	dt = &di->next;
    } else if(databases == NULL) {
	/* if there are none specified, use some default */
	di = calloc(1, sizeof(*di));
	di->dbname = strdup(default_dbname);
	di->mkey_file = strdup(default_mkey);
	*dt = di;
	dt = &di->next;
    }
    for(di = databases; di; di = di->next) {
	if(di->dbname == NULL)
	    di->dbname = strdup(default_dbname);
	if(di->mkey_file == NULL) {
	    p = strrchr(di->dbname, '.');
	    if(p == NULL || strchr(p, '/') != NULL)
		/* final pathname component does not contain a . */
		asprintf(&di->mkey_file, "%s.mkey", di->dbname);
	    else
		/* the filename is something.else, replace .else with
                   .mkey */
		asprintf(&di->mkey_file, "%.*s.mkey", 
			 (int)(p - di->dbname), di->dbname);
	}
    }
}

static void
add_one_address (const char *str, int first)
d136 2
a137 2
void
configure(int argc, char **argv)
d139 1
d141 1
a141 1
    int optind = 0;
d143 3
a145 3
    
    while(getarg(args, num_args, argc, argv, &optind))
	warnx("error at argument `%s'", argv[optind]);
d165 2
a166 2
    argc -= optind;
    argv += optind;
d170 1
a170 1
    
d174 5
a178 2
	if(config_file == NULL)
	    config_file = _PATH_KDC_CONF;
d183 1
a183 1
	    
d186 1
a186 1
	if(ret) 
d190 10
a199 2
    get_dbinfo();
    
d201 1
a201 1
	max_request = parse_bytes(max_request_str, NULL);
d203 1
a203 1
    if(max_request == 0){
d210 1
a210 1
	    max_request = parse_bytes(p, NULL);
d212 3
a214 4
    
    if(require_preauth == -1)
	require_preauth = krb5_config_get_bool(context, NULL, "kdc", 
					       "require-preauth", NULL);
d228 1
a228 1
	    add_one_address (addresses_str.strings[i], i == 0);
d235 1
a235 1
	    add_one_address (*foo++, TRUE);
d237 1
a237 1
		add_one_address (*foo++, FALSE);
a240 13
    if(enable_v4 == -1)
	enable_v4 = krb5_config_get_bool_default(context, NULL, FALSE, "kdc", 
						 "enable-kerberos4", NULL);
    if(enable_v4_cross_realm == -1)
	enable_v4_cross_realm =
	    krb5_config_get_bool_default(context, NULL,
					 FALSE, "kdc", 
					 "enable-kerberos4-cross-realm",
					 NULL);
    if(enable_524 == -1)
	enable_524 = krb5_config_get_bool_default(context, NULL, enable_v4, 
						  "kdc", "enable-524", NULL);

d242 1
a242 1
	enable_http = krb5_config_get_bool(context, NULL, "kdc", 
d244 8
a251 26
    check_ticket_addresses = 
	krb5_config_get_bool_default(context, NULL, TRUE, "kdc", 
				     "check-ticket-addresses", NULL);
    allow_null_ticket_addresses = 
	krb5_config_get_bool_default(context, NULL, TRUE, "kdc", 
				     "allow-null-ticket-addresses", NULL);

    allow_anonymous = 
	krb5_config_get_bool(context, NULL, "kdc", 
			     "allow-anonymous", NULL);
    trpolicy_str = 
	krb5_config_get_string_default(context, NULL, "always-check", "kdc", 
				       "transited-policy", NULL);
    if(strcasecmp(trpolicy_str, "always-check") == 0)
	trpolicy = TRPOLICY_ALWAYS_CHECK;
    else if(strcasecmp(trpolicy_str, "allow-per-principal") == 0)
	trpolicy = TRPOLICY_ALLOW_PER_PRINCIPAL;
    else if(strcasecmp(trpolicy_str, "always-honour-request") == 0)
	trpolicy = TRPOLICY_ALWAYS_HONOUR_REQUEST;
    else {
	kdc_log(0, "unknown transited-policy: %s, reverting to always-check", 
		trpolicy_str);
	trpolicy = TRPOLICY_ALWAYS_CHECK;
    }
	
    if (krb5_config_get_string(context, NULL, "kdc", 
d256 3
a258 28
    if(v4_realm == NULL){
	p = krb5_config_get_string (context, NULL, 
				    "kdc",
				    "v4-realm",
				    NULL);
	if(p != NULL) {
	    v4_realm = strdup(p);
	    if (v4_realm == NULL)
		krb5_errx(context, 1, "out of memory");
	}
    }
    if (enable_kaserver == -1)
	enable_kaserver = krb5_config_get_bool_default(context, NULL, FALSE,
						       "kdc",
						       "enable-kaserver",
						       NULL);

    encode_as_rep_as_tgs_rep = krb5_config_get_bool(context, NULL, "kdc", 
						    "encode_as_rep_as_tgs_rep", 
						    NULL);

    kdc_warn_pwexpire = krb5_config_get_time (context, NULL,
					      "kdc",
					      "kdc_warn_pwexpire",
					      NULL);

    if(detach_from_console == -1) 
	detach_from_console = krb5_config_get_bool_default(context, NULL, 
d262 7
a268 5
    kdc_openlog();
    if(max_request == 0)
	max_request = 64 * 1024;
    if(require_preauth == -1)
	require_preauth = 1;
a271 43
#ifdef PKINIT
    enable_pkinit = krb5_config_get_bool_default(context, NULL, FALSE,
						 "kdc",
						 "enable-pkinit",
						 NULL);
    if (enable_pkinit) {
	const char *user_id, *x509_anchors;

	user_id = krb5_config_get_string(context, NULL,
					  "kdc",
					  "pki-identity",
					  NULL);
	if (user_id == NULL)
	    krb5_errx(context, 1, "pkinit enabled but no identity");

	x509_anchors = krb5_config_get_string(context, NULL,
					      "kdc",
					      "pki-anchors",
					      NULL);
	if (x509_anchors == NULL)
	    krb5_errx(context, 1, "pkinit enabled but no X509 anchors");

	pk_initialize(user_id, x509_anchors);

	enable_pkinit_princ_in_cert = 
	    krb5_config_get_bool_default(context, 
					 NULL, TRUE,
					 "kdc",
					 "pkinit-principal-in-certificate",
					 NULL);
    }
#endif

    if(v4_realm == NULL && (enable_kaserver || enable_v4)){
#ifdef KRB4
	v4_realm = malloc(40); /* REALM_SZ */
	if (v4_realm == NULL)
	    krb5_errx(context, 1, "out of memory");
	krb_get_lrealm(v4_realm, 1);
#else
	krb5_errx(context, 1, "No Kerberos 4 realm configured");
#endif
    }
d273 2
a274 2
	disable_des = krb5_config_get_bool_default(context, NULL, 
						   0,
d284 3
d288 3
a290 6
	kdc_log(0, "DES was disabled, turned off Kerberos V4, 524 "
		"and kaserver");
	enable_v4 = 0;
	enable_524 = 0;
	enable_kaserver = 0;
    }
@


1.7
log
@Merge with heimdal-0.6.3 Tested by beck@@, msf@@, me and others. ok beck@@
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$KTH: config.c,v 1.46.2.2 2003/10/27 11:06:52 joda Exp $");
a55 1
#ifdef HAVE_DAEMON
a57 1
#endif
d71 2
a72 1
#ifdef KRB4
a75 1
#endif
d80 1
a106 1
#ifdef KRB4
a117 1
#endif
a124 1
#ifdef HAVE_DAEMON
a135 1
#endif
d138 4
d253 1
a254 1
    int e;
d257 1
a257 1
    while((e = getarg(args, num_args, argc, argv, &optind)))
d268 10
a284 1
	krb5_error_code ret;
d286 1
a286 1
	char *tmp;
d289 4
a292 3
	asprintf(&tmp, "%s:%s", config_file, krb5_config_file);
	if(tmp == NULL)
	    krb5_errx(context, 1, "out of memory");
a293 5
	krb5_config_file = tmp;

	ret = krb5_get_default_config_files(&files);
	if(ret) 
	    krb5_err(context, 1, ret, "reading configuration files");
a343 1
#ifdef KRB4
d346 1
a346 4
					 "enable-kerberos4", NULL);
#else
#define enable_v4 0
#endif
d385 5
a389 3
	krb5_config_get_bool_default(context, NULL, TRUE, "kdc", 
				     "enforce-transited-policy", NULL);
#ifdef KRB4
a405 1
#endif
a415 1
#ifdef HAVE_DAEMON
a420 1
#endif
d428 35
a463 1
    if(v4_realm == NULL){
d468 22
a490 1
#endif
@


1.6
log
@Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.

ok beck@@ hin@@
@
text
@d38 1
a38 1
RCSID("$KTH: config.c,v 1.46 2003/03/18 00:22:23 lha Exp $");
@


1.5
log
@Fix merge error.

ok hin@@
@
text
@d67 2
d298 1
a298 1
    if(max_request_str){
a299 1
    }
d370 17
@


1.5.2.1
log
@MFC:
Fix by biorn:

Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.
@
text
@a66 2
int trpolicy;
static const char *trpolicy_str;
d296 1
a296 1
    if(max_request_str)
d298 1
a368 17
    trpolicy_str = 
	krb5_config_get_string_default(context, NULL, "always-check", "kdc", 
				       "transited-policy", NULL);
    if(strcasecmp(trpolicy_str, "always-check") == 0)
	trpolicy = TRPOLICY_ALWAYS_CHECK;
    else if(strcasecmp(trpolicy_str, "allow-per-principal") == 0)
	trpolicy = TRPOLICY_ALLOW_PER_PRINCIPAL;
    else if(strcasecmp(trpolicy_str, "always-honour-request") == 0)
	trpolicy = TRPOLICY_ALWAYS_HONOUR_REQUEST;
    else {
	kdc_log(0, "unknown transited-policy: %s, reverting to always-check", 
		trpolicy_str);
	trpolicy = TRPOLICY_ALWAYS_CHECK;
    }
	
	krb5_config_get_bool_default(context, NULL, TRUE, "kdc", 
				     "enforce-transited-policy", NULL);
@


1.5.4.1
log
@MFC:
Fix by biorn:

Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.
@
text
@a66 2
int trpolicy;
static const char *trpolicy_str;
d296 1
a296 1
    if(max_request_str)
d298 1
a368 17
    trpolicy_str = 
	krb5_config_get_string_default(context, NULL, "always-check", "kdc", 
				       "transited-policy", NULL);
    if(strcasecmp(trpolicy_str, "always-check") == 0)
	trpolicy = TRPOLICY_ALWAYS_CHECK;
    else if(strcasecmp(trpolicy_str, "allow-per-principal") == 0)
	trpolicy = TRPOLICY_ALLOW_PER_PRINCIPAL;
    else if(strcasecmp(trpolicy_str, "always-honour-request") == 0)
	trpolicy = TRPOLICY_ALWAYS_HONOUR_REQUEST;
    else {
	kdc_log(0, "unknown transited-policy: %s, reverting to always-check", 
		trpolicy_str);
	trpolicy = TRPOLICY_ALWAYS_CHECK;
    }
	
	krb5_config_get_bool_default(context, NULL, TRUE, "kdc", 
				     "enforce-transited-policy", NULL);
@


1.4
log
@Fix a few merge mistakes
@
text
@d74 3
a78 2
int enable_kaserver = -1;
#endif
a112 4
    },
    {	"kerberos4-cross-realm",	0, 	arg_flag,
	&enable_v4_cross_realm,
	"respond to kerberos 4 requests from foreign realms" 
@


1.3
log
@Merge 0.6rc1
@
text
@a78 3
int enable_524 = -1;
int enable_v4_cross_realm = -1;

@


1.2
log
@Add a new option to disable krb4 cross-realm authentication, disabled by
default. This works around a recently found vulnerability in the krb4
protocol, see

	http://web.mit.edu/kerberos/www/advisories/MITKRB5-SA-2003-004-krb4.txt

Patch created by adopting the changes in heimdal-0.5.2, with invaluable help
provided by lha@@stacken.kth.se and janj@@stacken.kth.se.

ok beck@@ miod@@
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2001 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$KTH: config.c,v 1.38 2001/08/10 14:02:57 joda Exp $");
d40 1
a40 1
static char *config_file;	/* location of kdc config file */
d54 6
a59 1
char *port_str;
d79 3
d105 3
d109 3
a111 2
    {	"kerberos4",	0, 	arg_negative_flag, &enable_v4,
	"don't respond to kerberos 4 requests" 
d113 2
a114 2
    {	"524",		0, 	arg_negative_flag, &enable_524,
	"don't respond to 524 requests" 
d124 4
a127 3
    {
	"kaserver", 'K', arg_flag,   &enable_kaserver,
	"enable kaserver support"
a128 1
#endif
d132 13
d161 1
a161 1
get_dbinfo(krb5_config_section *cf)
d163 3
a165 3
    krb5_config_binding *top_binding = NULL;
    krb5_config_binding *db_binding;
    krb5_config_binding *default_binding = NULL;
d173 2
a174 2
    while((db_binding = (krb5_config_binding *)
	   krb5_config_get_next(context, cf, &top_binding, 
d214 2
a215 1
    } else {
a257 1
    krb5_config_section *cf = NULL;
d279 22
a300 7
    if(config_file == NULL)
	config_file = _PATH_KDC_CONF;
    
    if(krb5_config_parse_file(context, config_file, &cf))
	cf = NULL;
    
    get_dbinfo(cf);
d308 1
a308 1
				    cf, 
d317 1
a317 1
	require_preauth = krb5_config_get_bool(context, cf, "kdc", 
d321 1
a321 1
	p = krb5_config_get_string(context, cf, "kdc", "ports", NULL);
d335 1
a335 1
	char **foo = krb5_config_get_strings (context, cf,
d347 1
a347 1
	enable_v4 = krb5_config_get_bool_default(context, cf, TRUE, "kdc", 
d349 3
d355 1
a355 1
					 FALSE, "kdc",
d359 1
a359 1
	enable_524 = krb5_config_get_bool_default(context, cf, enable_v4, 
a360 1
#endif
d363 1
a363 1
	enable_http = krb5_config_get_bool(context, cf, "kdc", 
d366 1
a366 1
	krb5_config_get_bool_default(context, cf, TRUE, "kdc", 
d369 1
a369 1
	krb5_config_get_bool_default(context, cf, TRUE, "kdc", 
d373 1
a373 1
	krb5_config_get_bool(context, cf, "kdc", 
d377 1
a377 1
	p = krb5_config_get_string (context, cf, 
d388 1
a388 1
	enable_kaserver = krb5_config_get_bool_default(context, cf, FALSE,
d394 1
a394 1
    encode_as_rep_as_tgs_rep = krb5_config_get_bool(context, cf, "kdc", 
d398 1
a398 1
    kdc_warn_pwexpire = krb5_config_get_time (context, cf,
d402 9
a410 3
    kdc_openlog(cf);
    if(cf)
	krb5_config_file_free (context, cf);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2000 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$KTH: config.c,v 1.33 2000/09/10 19:27:17 joda Exp $");
d70 2
a71 3
#endif
#ifdef KASERVER
krb5_boolean enable_kaserver = -1;
d104 4
a111 2
#endif
#ifdef KASERVER
d113 2
a114 2
	"kaserver", 'K', arg_negative_flag,   &enable_kaserver,
	"turn off kaserver support"
d118 1
a118 1
	"ports to listen to" 
d202 1
d205 2
d257 1
a257 1
    if(krb5_config_parse_file(config_file, &cf))
d293 1
d309 6
d324 2
a325 2
	krb5_config_get_bool(context, cf, "kdc", 
			     "check-ticket-addresses", NULL);
d327 2
a328 2
	krb5_config_get_bool(context, cf, "kdc", 
			     "allow-null-ticket-addresses", NULL);
d339 1
a339 1
	if(p)
d341 3
a344 2
#endif
#ifdef KASERVER
d346 1
a346 1
	enable_kaserver = krb5_config_get_bool_default(context, cf, TRUE,
d372 2
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2001 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$KTH: config.c,v 1.36 2001/05/17 07:13:43 joda Exp $");
d253 1
a253 1
    if(krb5_config_parse_file(context, config_file, &cf))
a288 1
	free_getarg_strings (&addresses_str);
d313 2
a314 2
	krb5_config_get_bool_default(context, cf, TRUE, "kdc", 
				     "check-ticket-addresses", NULL);
d316 2
a317 2
	krb5_config_get_bool_default(context, cf, TRUE, "kdc", 
				     "allow-null-ticket-addresses", NULL);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d38 1
a38 1
RCSID("$KTH: config.c,v 1.38 2001/08/10 14:02:57 joda Exp $");
d70 3
a72 1
int enable_kaserver = -1;
d109 2
d112 2
a113 2
	"kaserver", 'K', arg_flag,   &enable_kaserver,
	"enable kaserver support"
d117 1
a117 1
	"ports to listen to", "portspec"
a200 1
		/* final pathname component does not contain a . */
a202 2
		/* the filename is something.else, replace .else with
                   .mkey */
d332 2
d335 1
a335 1
	enable_kaserver = krb5_config_get_bool_default(context, cf, FALSE,
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$KTH: config.c,v 1.46 2003/03/18 00:22:23 lha Exp $");
d40 1
a40 1
static const char *config_file;	/* location of kdc config file */
d54 1
a54 6
const char *port_str;

#ifdef HAVE_DAEMON
int detach_from_console = -1;
#define DETACH_IS_DEFAULT FALSE
#endif
d69 1
a72 3
int enable_524 = -1;
int enable_v4_cross_realm = -1;

d96 4
d103 4
a106 1
#ifdef KRB4
a110 7
    {	"kerberos4",	0, 	arg_flag, &enable_v4,
	"respond to kerberos 4 requests" 
    },
    { 
	"v4-realm",	'r',	arg_string, &v4_realm, 
	"realm to serve v4-requests for"
    },
a111 4
    {	"kerberos4-cross-realm",	0, 	arg_flag,
	&enable_v4_cross_realm,
	"respond to kerberos 4 requests from foreign realms" 
    },
a114 13
#ifdef HAVE_DAEMON
#if DETACH_IS_DEFAULT
    {
	"detach",       'D',      arg_negative_flag, &detach_from_console, 
	"don't detach from console"
    },
#else
    {
	"detach",       0 ,      arg_flag, &detach_from_console, 
	"detach from console"
    },
#endif
#endif
d131 1
a131 1
get_dbinfo(void)
d133 3
a135 3
    const krb5_config_binding *top_binding = NULL;
    const krb5_config_binding *db_binding;
    const krb5_config_binding *default_binding = NULL;
d143 2
a144 2
    while((db_binding = (const krb5_config_binding *)
	   krb5_config_get_next(context, NULL, &top_binding, 
d184 1
a184 2
    } else if(databases == NULL) {
	/* if there are none specified, use some default */
d227 1
d249 7
a255 22
    {
	krb5_error_code ret;
	char **files;
	char *tmp;
	if(config_file == NULL)
	    config_file = _PATH_KDC_CONF;
	asprintf(&tmp, "%s:%s", config_file, krb5_config_file);
	if(tmp == NULL)
	    krb5_errx(context, 1, "out of memory");
	    
	krb5_config_file = tmp;

	ret = krb5_get_default_config_files(&files);
	if(ret) 
	    krb5_err(context, 1, ret, "reading configuration files");
	ret = krb5_set_config_files(context, files);
	krb5_free_config_files(files);
	if(ret) 
	    krb5_err(context, 1, ret, "reading configuration files");
    }

    get_dbinfo();
d263 1
a263 1
				    NULL,
d272 1
a272 1
	require_preauth = krb5_config_get_bool(context, NULL, "kdc", 
d276 1
a276 1
	p = krb5_config_get_string(context, NULL, "kdc", "ports", NULL);
d290 1
a290 1
	char **foo = krb5_config_get_strings (context, NULL,
d302 1
a302 1
	enable_v4 = krb5_config_get_bool_default(context, NULL, FALSE, "kdc", 
a303 9
#else
#define enable_v4 0
#endif
    if(enable_v4_cross_realm == -1)
	enable_v4_cross_realm =
	    krb5_config_get_bool_default(context, NULL,
					 FALSE, "kdc", 
					 "enable-kerberos4-cross-realm",
					 NULL);
d305 1
a305 1
	enable_524 = krb5_config_get_bool_default(context, NULL, enable_v4, 
d307 1
d310 1
a310 1
	enable_http = krb5_config_get_bool(context, NULL, "kdc", 
d313 1
a313 1
	krb5_config_get_bool_default(context, NULL, TRUE, "kdc", 
d316 1
a316 1
	krb5_config_get_bool_default(context, NULL, TRUE, "kdc", 
d320 1
a320 1
	krb5_config_get_bool(context, NULL, "kdc", 
d324 1
a324 1
	p = krb5_config_get_string (context, NULL, 
d328 1
a328 1
	if(p != NULL) {
a329 3
	    if (v4_realm == NULL)
		krb5_errx(context, 1, "out of memory");
	}
d332 1
a332 1
	enable_kaserver = krb5_config_get_bool_default(context, NULL, FALSE,
d338 1
a338 1
    encode_as_rep_as_tgs_rep = krb5_config_get_bool(context, NULL, "kdc", 
d342 1
a342 1
    kdc_warn_pwexpire = krb5_config_get_time (context, NULL,
d346 3
a348 9

#ifdef HAVE_DAEMON
    if(detach_from_console == -1) 
	detach_from_console = krb5_config_get_bool_default(context, NULL, 
							   DETACH_IS_DEFAULT,
							   "kdc",
							   "detach", NULL);
#endif
    kdc_openlog();
a357 2
	if (v4_realm == NULL)
	    krb5_errx(context, 1, "out of memory");
@


1.1.1.5
log
@Import of heimdal-0.6.3
@
text
@d38 1
a38 1
RCSID("$KTH: config.c,v 1.46.2.2 2003/10/27 11:06:52 joda Exp $");
a66 2
int trpolicy;
static const char *trpolicy_str;
d296 1
a296 1
    if(max_request_str)
d298 1
a368 17
    trpolicy_str = 
	krb5_config_get_string_default(context, NULL, "always-check", "kdc", 
				       "transited-policy", NULL);
    if(strcasecmp(trpolicy_str, "always-check") == 0)
	trpolicy = TRPOLICY_ALWAYS_CHECK;
    else if(strcasecmp(trpolicy_str, "allow-per-principal") == 0)
	trpolicy = TRPOLICY_ALLOW_PER_PRINCIPAL;
    else if(strcasecmp(trpolicy_str, "always-honour-request") == 0)
	trpolicy = TRPOLICY_ALWAYS_HONOUR_REQUEST;
    else {
	kdc_log(0, "unknown transited-policy: %s, reverting to always-check", 
		trpolicy_str);
	trpolicy = TRPOLICY_ALWAYS_CHECK;
    }
	
	krb5_config_get_bool_default(context, NULL, TRUE, "kdc", 
				     "enforce-transited-policy", NULL);
@


1.1.1.6
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2004 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$KTH: config.c,v 1.59 2005/05/23 17:34:12 lha Exp $");
d56 1
d59 1
d73 1
a73 2
static int disable_des = -1;

d77 1
a81 1
static int builtin_hdb_flag;
d108 1
d120 1
d128 1
d140 1
a142 4
    {	"disable-des",	0,	arg_flag, &disable_des,
	"disable DES" },
    {	"builtin-hdb",	0,	arg_flag,   &builtin_hdb_flag,
	"list builtin hdb backends"},
a253 1
    krb5_error_code ret;
d255 1
d258 1
a258 1
    while(getarg(args, num_args, argc, argv, &optind))
a268 10
    if (builtin_hdb_flag) {
	char *list;
	ret = hdb_list_builtin(context, &list);
	if (ret)
	    krb5_err(context, 1, ret, "listing builtin hdb backends");
	printf("builtin hdb backends: %s\n", list);
	free(list);
	exit(0);
    }

d276 1
d278 1
a278 1

d281 5
d287 3
a289 4
	ret = krb5_prepend_config_files_default(config_file, &files);
	if (ret)
	    krb5_err(context, 1, ret, "getting configuration files");
	    
d340 1
d343 4
a346 1
						 "enable-kerberos4", NULL);
d385 3
a387 5
    if (krb5_config_get_string(context, NULL, "kdc", 
			       "enforce-transited-policy", NULL))
	krb5_errx(context, 1, "enforce-transited-policy deprecated, "
		  "use [kdc]transited-policy instead");

d404 1
d415 1
d421 1
a428 35

#ifdef PKINIT
    enable_pkinit = krb5_config_get_bool_default(context, NULL, FALSE,
						 "kdc",
						 "enable-pkinit",
						 NULL);
    if (enable_pkinit) {
	const char *user_id, *x509_anchors;

	user_id = krb5_config_get_string(context, NULL,
					  "kdc",
					  "pki-identity",
					  NULL);
	if (user_id == NULL)
	    krb5_errx(context, 1, "pkinit enabled but no identity");

	x509_anchors = krb5_config_get_string(context, NULL,
					      "kdc",
					      "pki-anchors",
					      NULL);
	if (x509_anchors == NULL)
	    krb5_errx(context, 1, "pkinit enabled but no X509 anchors");

	pk_initialize(user_id, x509_anchors);

	enable_pkinit_princ_in_cert = 
	    krb5_config_get_bool_default(context, 
					 NULL, TRUE,
					 "kdc",
					 "pkinit-principal-in-certificate",
					 NULL);
    }
#endif

    if(v4_realm == NULL && (enable_kaserver || enable_v4)){
d430 1
d435 1
a435 2
#else
	krb5_errx(context, 1, "No Kerberos 4 realm configured");
a436 20
    }
    if(disable_des == -1)
	disable_des = krb5_config_get_bool_default(context, NULL, 
						   0,
						   "kdc",
						   "disable-des", NULL);
    if(disable_des) {
	krb5_enctype_disable(context, ETYPE_DES_CBC_CRC);
	krb5_enctype_disable(context, ETYPE_DES_CBC_MD4);
	krb5_enctype_disable(context, ETYPE_DES_CBC_MD5);
	krb5_enctype_disable(context, ETYPE_DES_CBC_NONE);
	krb5_enctype_disable(context, ETYPE_DES_CFB64_NONE);
	krb5_enctype_disable(context, ETYPE_DES_PCBC_NONE);

	kdc_log(0, "DES was disabled, turned off Kerberos V4, 524 "
		"and kaserver");
	enable_v4 = 0;
	enable_524 = 0;
	enable_kaserver = 0;
    }
@


1.1.1.3.4.1
log
@Errata #13 (hin):
A protocol flaw in the Kerberos 4 protocol allows an attacker to
impersonate any principal in a realm, if a Kerberos KDC is configured to
do cross-realm authentication.

Fix this by restricting the functionality of the protocol to prevent
responding to Kerberos 4 requests originating from foreign realms,
unless explicitely configured to do so by the user.
@
text
@a69 1
int enable_v4_cross_realm = -1;
a102 4
    {	"kerberos4-cross-realm",	0, 	arg_flag,
	&enable_v4_cross_realm,
	"respond to kerberos 4 requests from foreign realms" 
    },
a303 6
    if(enable_v4_cross_realm == -1)
	enable_v4_cross_realm =
	    krb5_config_get_bool_default(context, NULL,
					 FALSE, "kdc",
					 "enable-kerberos4-cross-realm",
					 NULL);
d328 1
a328 1
	if(p != NULL) {
a329 3
	    if (v4_realm == NULL)
		krb5_errx(context, 1, "out of memory");
	}
a357 2
	if (v4_realm == NULL)
	    krb5_errx(context, 1, "out of memory");
@


1.1.1.3.2.1
log
@Errata #026 (hin):
A protocol flaw in the Kerberos 4 protocol allows an attacker to
impersonate any principal in a realm, if a Kerberos KDC is configured to
do cross-realm authentication.

Fix this by restricting the functionality of the protocol to prevent
responding to Kerberos 4 requests originating from foreign realms,
unless explicitely configured to do so by the user.
@
text
@a69 1
int enable_v4_cross_realm = -1;
a102 4
    {	"kerberos4-cross-realm",	0, 	arg_flag,
	&enable_v4_cross_realm,
	"respond to kerberos 4 requests from foreign realms" 
    },
a303 6
    if(enable_v4_cross_realm == -1)
	enable_v4_cross_realm =
	    krb5_config_get_bool_default(context, NULL,
					 FALSE, "kdc",
					 "enable-kerberos4-cross-realm",
					 NULL);
d328 1
a328 1
	if(p != NULL) {
a329 3
	    if (v4_realm == NULL)
		krb5_errx(context, 1, "out of memory");
	}
a357 2
	if (v4_realm == NULL)
	    krb5_errx(context, 1, "out of memory");
@


