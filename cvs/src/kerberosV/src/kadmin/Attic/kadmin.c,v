head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.28
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.04.22.10.01.25;	author reyk;	state dead;
branches;
next	1.5;

1.5
date	2013.06.17.18.57.41;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.05.16.16.49;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.43;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.43;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.21.37;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.54.47;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.15.28;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.38;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2004 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kadmin_locl.h"
#include "kadmin-commands.h"
#include <sl.h>

static char *config_file;
static char *keyfile;
int local_flag;
static int ad_flag;
static int help_flag;
static int version_flag;
static char *realm;
static char *admin_server;
static int server_port = 0;
static char *client_name;
static char *keytab;
static char *check_library  = NULL;
static char *check_function = NULL;
static getarg_strings policy_libraries = { 0, NULL };

static struct getargs args[] = {
    {	"principal", 	'p',	arg_string,	&client_name,
	"principal to authenticate as", NULL },
    {   "keytab",	'K',	arg_string,	&keytab,
   	"keytab for authentication principal", NULL },
    {
	"config-file",	'c',	arg_string,	&config_file,
	"location of config file",	"file"
    },
    {
	"key-file",	'k',	arg_string, &keyfile,
	"location of master key file", "file"
    },
    {
	"realm",	'r',	arg_string,   &realm,
	"realm to use", "realm"
    },
    {
	"admin-server",	'a',	arg_string,   &admin_server,
	"server to contact", "host"
    },
    {
	"server-port",	's',	arg_integer,   &server_port,
	"port to use", "port number"
    },
    {	"ad", 		0, arg_flag, &ad_flag, "active directory admin mode",
	NULL },
#ifdef HAVE_DLOPEN
    { "check-library", 0, arg_string, &check_library,
      "library to load password check function from", "library" },
    { "check-function", 0, arg_string, &check_function,
      "password check function to load", "function" },
    { "policy-libraries", 0, arg_strings, &policy_libraries,
      "password check function to load", "function" },
#endif
    {	"local", 'l', arg_flag, &local_flag, "local admin mode", NULL },
    {	"help",		'h',	arg_flag,   &help_flag, NULL, NULL },
    {	"version",	'v',	arg_flag,   &version_flag, NULL, NULL }
};

static int num_args = sizeof(args) / sizeof(args[0]);


krb5_context context;
void *kadm_handle;

int
help(void *opt, int argc, char **argv)
{
    sl_slc_help(commands, argc, argv);
    return 0;
}

static int exit_seen = 0;

int
exit_kadmin (void *opt, int argc, char **argv)
{
    exit_seen = 1;
    return 0;
}

static void
usage(int ret)
{
    arg_printusage (args, num_args, NULL, "[command]");
    exit (ret);
}

int
get_privs(void *opt, int argc, char **argv)
{
    uint32_t privs;
    char str[128];
    kadm5_ret_t ret;

    ret = kadm5_get_privs(kadm_handle, &privs);
    if(ret)
	krb5_warn(context, ret, "kadm5_get_privs");
    else{
	ret =_kadm5_privs_to_string(privs, str, sizeof(str));
	if (ret == 0)
	    printf("%s\n", str);
	else
	    printf("privs: 0x%x\n", (unsigned int)privs);
    }
    return 0;
}

int
main(int argc, char **argv)
{
    krb5_error_code ret;
    char **files;
    kadm5_config_params conf;
    int optidx = 0;
    int exit_status = 0;

    setprogname(argv[0]);

    ret = krb5_init_context(&context);
    if (ret)
	errx (1, "krb5_init_context failed: %d", ret);

    if(getarg(args, num_args, argc, argv, &optidx))
	usage(1);

    if (help_flag)
	usage (0);

    if (version_flag) {
	print_version(NULL);
	exit(0);
    }

    argc -= optidx;
    argv += optidx;

    if (config_file == NULL) {
	asprintf(&config_file, "%s/kdc.conf", hdb_db_dir(context));
	if (config_file == NULL)
	    errx(1, "out of memory");
    }

    ret = krb5_prepend_config_files_default(config_file, &files);
    if (ret)
	krb5_err(context, 1, ret, "getting configuration files");

    ret = krb5_set_config_files(context, files);
    krb5_free_config_files(files);
    if(ret)
	krb5_err(context, 1, ret, "reading configuration files");

    memset(&conf, 0, sizeof(conf));
    if(realm) {
	krb5_set_default_realm(context, realm); /* XXX should be fixed
						   some other way */
	conf.realm = realm;
	conf.mask |= KADM5_CONFIG_REALM;
    }

    if (admin_server) {
	conf.admin_server = admin_server;
	conf.mask |= KADM5_CONFIG_ADMIN_SERVER;
    }

    if (server_port) {
	conf.kadmind_port = htons(server_port);
	conf.mask |= KADM5_CONFIG_KADMIND_PORT;
    }

    if (keyfile) {
	conf.stash_file = keyfile;
	conf.mask |= KADM5_CONFIG_STASH_FILE;
    }

    if(local_flag) {
	int i;

	kadm5_setup_passwd_quality_check (context,
					  check_library, check_function);

	for (i = 0; i < policy_libraries.num_strings; i++) {
	    ret = kadm5_add_passwd_quality_verifier(context,
						    policy_libraries.strings[i]);
	    if (ret)
		krb5_err(context, 1, ret, "kadm5_add_passwd_quality_verifier");
	}
	ret = kadm5_add_passwd_quality_verifier(context, NULL);
	if (ret)
	    krb5_err(context, 1, ret, "kadm5_add_passwd_quality_verifier");

	ret = kadm5_s_init_with_password_ctx(context,
					     KADM5_ADMIN_SERVICE,
					     NULL,
					     KADM5_ADMIN_SERVICE,
					     &conf, 0, 0,
					     &kadm_handle);
    } else if (ad_flag) {
	if (client_name == NULL)
	    krb5_errx(context, 1, "keytab mode require principal name");
	ret = kadm5_ad_init_with_password_ctx(context,
					      client_name,
					      NULL,
					      KADM5_ADMIN_SERVICE,
					      &conf, 0, 0,
					      &kadm_handle);
    } else if (keytab) {
	if (client_name == NULL)
	    krb5_errx(context, 1, "keytab mode require principal name");
        ret = kadm5_c_init_with_skey_ctx(context,
					 client_name,
					 keytab,
					 KADM5_ADMIN_SERVICE,
                                         &conf, 0, 0,
                                         &kadm_handle);
    } else
	ret = kadm5_c_init_with_password_ctx(context,
					     client_name,
					     NULL,
					     KADM5_ADMIN_SERVICE,
					     &conf, 0, 0,
					     &kadm_handle);

    if(ret)
	krb5_err(context, 1, ret, "kadm5_init_with_password");

    signal(SIGINT, SIG_IGN); /* ignore signals for now, the sl command
                                parser will handle SIGINT its own way;
                                we should really take care of this in
                                each function, f.i `get' might be
                                interruptable, but not `create' */
    if (argc != 0) {
	ret = sl_command (commands, argc, argv);
	if(ret == -1)
	    krb5_warnx (context, "unrecognized command: %s", argv[0]);
	else if (ret == -2)
	    ret = 0;
	if(ret != 0)
	    exit_status = 1;
    } else {
	while(!exit_seen) {
	    ret = sl_command_loop(commands, "kadmin> ", NULL);
	    if (ret == -2)
		exit_seen = 1;
	    else if (ret != 0)
		exit_status = 1;
	}
    }

    kadm5_destroy(kadm_handle);
    krb5_free_context(context);
    return exit_status;
}
@


1.5
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.4
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2004 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a37 2
RCSID("$KTH: kadmin.c,v 1.56 2005/05/09 15:35:22 lha Exp $");

d55 1
a55 1
	"principal to authenticate as" },
d57 4
a60 4
   	"keytab for authentication principal" },
    { 
	"config-file",	'c',	arg_string,	&config_file, 
	"location of config file",	"file" 
d63 1
a63 1
	"key-file",	'k',	arg_string, &keyfile, 
d66 3
a68 3
    {	
	"realm",	'r',	arg_string,   &realm, 
	"realm to use", "realm" 
d70 3
a72 3
    {	
	"admin-server",	'a',	arg_string,   &admin_server, 
	"server to contact", "host" 
d74 3
a76 3
    {	
	"server-port",	's',	arg_integer,   &server_port, 
	"port to use", "port number" 
d78 2
a79 1
    {	"ad", 		0, arg_flag, &ad_flag, "active directory admin mode" },
d81 1
a81 1
    { "check-library", 0, arg_string, &check_library, 
d88 3
a90 3
    {	"local", 'l', arg_flag, &local_flag, "local admin mode" },
    {	"help",		'h',	arg_flag,   &help_flag },
    {	"version",	'v',	arg_flag,   &version_flag }
d102 1
a102 28
    if(argc == 0) {
	sl_help(commands, 1, argv - 1 /* XXX */);
    } else {
	SL_cmd *c = sl_match (commands, argv[0], 0);
 	if(c == NULL) {
	    fprintf (stderr, "No such command: %s. "
		     "Try \"help\" for a list of commands\n",
		     argv[0]);
	} else {
	    if(c->func) {
		char *fake[] = { NULL, "--help", NULL };
		fake[0] = argv[0];
		(*c->func)(2, fake);
		fprintf(stderr, "\n");
	    }
	    if(c->help && *c->help)
		fprintf (stderr, "%s\n", c->help);
	    if((++c)->name && c->func == NULL) {
		int f = 0;
		fprintf (stderr, "Synonyms:");
		while (c->name && c->func == NULL) {
		    fprintf (stderr, "%s%s", f ? ", " : " ", (c++)->name);
		    f = 1;
		}
		fprintf (stderr, "\n");
	    }
	}
    }
d125 1
a125 1
    u_int32_t privs;
d128 1
a128 1
    
d134 4
a137 1
	printf("%s\n", str);
d148 1
a148 1
    int optind = 0;
d151 2
d156 2
a157 2
    
    if(getarg(args, num_args, argc, argv, &optind))
d168 2
a169 2
    argc -= optind;
    argv += optind;
d171 5
a175 2
    if (config_file == NULL)
	config_file = HDB_DB_DIR "/kdc.conf";
d180 1
a180 1
    
d183 1
a183 1
    if(ret) 
d185 1
a185 1
    
d212 1
a212 1
	kadm5_setup_passwd_quality_check (context, 
d214 1
a214 1
	
d216 1
a216 1
	    ret = kadm5_add_passwd_quality_verifier(context, 
d224 2
a225 2
	
	ret = kadm5_s_init_with_password_ctx(context, 
d229 1
a229 1
					     &conf, 0, 0, 
d250 1
a250 1
	ret = kadm5_c_init_with_password_ctx(context, 
d254 1
a254 1
					     &conf, 0, 0, 
d256 1
a256 1
    
@


1.3
log
@Merge 0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d35 1
d38 1
a38 1
RCSID("$KTH: kadmin.c,v 1.42 2003/03/31 10:20:19 lha Exp $");
d42 2
a43 1
static int local_flag;
d51 3
d80 9
a95 77
static SL_cmd commands[] = {
    /* commands that are only available with `-l' */
    { 
	"dump",		dump,		"dump [file]",
	"Dumps the database in a human readable format to the\n"
	"specified file, or the standard out." 
    },
    { 
	"load",		load,		"load file",
	"Loads a previously dumped file."
    },
    { 
	"merge",	merge,		"merge file" ,
	"Merges the contents of a dump file into the database."
    },
    { 
	"init",		init,		"init realm...",
	"Initializes the default principals for a realm.\n"
	"Creates the database if necessary."
    },
    /* common commands */
    { 
	"add",	add_new_key, 	"add principal" ,
	"Adds a principal to the database."
    },
    { "add_new_key"},
    { "ank"},
    { 
	"passwd",	cpw_entry, 	"passwd expression..." ,
	"Changes the password of one or more principals\n"
	"matching the expressions."
    },
    { "change_password"},
    { "cpw"},
    { 
	"delete",	del_entry, 	"delete expression...",
	"Deletes all principals matching the expressions."
    },
    { "del_entry" },
    { "del" },
    {
	"del_enctype",	del_enctype,	"del_enctype principal enctype...",
	"Delete all the mentioned enctypes for principal."
    },
    { 
	"ext_keytab",	ext_keytab, 	"ext_keytab expression...",
	"Extracts the keys of all principals matching the expressions,\n"
	"and stores them in a keytab." 
    },
    { 
	"get",		get_entry, 	"get expression...",
	"Shows information about principals matching the expressions."
    },
    { "get_entry" },
    { 
	"rename",	rename_entry, 	"rename source target",
	"Renames `source' to `target'."
    },
    { 
	"modify",	mod_entry, 	"modify principal",
	"Modifies some attributes of the specified principal."
    },
    { 
	"privileges",	get_privs,	"privileges",
	"Shows which kinds of operations you are allowed to perform."
    },
    { "privs" },
    { 
	"list",		list_princs,	"list expression...", 
	"Lists principals in a terse format. The same as `get -t'." 
    },
    { "help",		help, "help"},
    { "?"},
    { "exit",		exit_kadmin, "exit"},
    { "quit" },
    { NULL}
};
a99 2
static SL_cmd *actual_cmds;

d101 1
a101 1
help(int argc, char **argv)
d103 28
a130 1
    sl_help(actual_cmds, argc, argv);
d134 2
d137 1
a137 1
exit_kadmin (int argc, char **argv)
d139 2
a140 1
    return 1;
d151 1
a151 1
get_privs(int argc, char **argv)
a156 18
    int help_flag = 0;
    struct getargs args[] = {
	{ "help",	'h',	arg_flag,	NULL }
    };
    int num_args = sizeof(args) / sizeof(args[0]);
    int optind = 0;

    args[0].value = &help_flag;

    if(getarg(args, num_args, argc, argv, &optind)) {
	arg_printusage (args, num_args, "privileges", NULL);
	return 0;
    }
    if(help_flag) {
	arg_printusage (args, num_args, "privileges", NULL);
	return 0;
    }

d171 1
a171 1
    krb5_config_section *cf = NULL;
d174 1
d197 9
a205 8
    if(krb5_config_parse_file(context, config_file, &cf) == 0) {
	const char *p = krb5_config_get_string (context, cf, 
						"kdc", "key-file", NULL);
	if (p)
	    keyfile = strdup(p);
    }
    krb5_clear_error_string (context);

d224 21
a244 1
    if(local_flag){
d251 9
a259 1
	actual_cmds = commands;
d261 2
d269 1
a269 2
        actual_cmds = commands + 4; /* XXX */
    } else {
a275 2
	actual_cmds = commands + 4; /* XXX */
    }
d286 1
a286 1
	ret = sl_command (actual_cmds, argc, argv);
d289 13
a301 2
    } else
	ret = sl_loop (actual_cmds, "kadmin> ") != 0;
a303 1
    krb5_config_file_free (context, cf);
d305 1
a305 1
    return ret;
@


1.2
log
@Remove all uses of setprogname() and getprogname() in kerberosV subtree.
@
text
@d37 1
a37 1
RCSID("$KTH: kadmin.c,v 1.41 2001/08/10 08:06:13 joda Exp $");
d54 1
a54 1
   	"keytab for authentication pricipal" },
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
RCSID("$KTH: kadmin.c,v 1.34 2001/01/26 22:20:52 joda Exp $");
d48 1
d53 2
d121 1
a226 3
    int e;

    set_progname(argv[0]);
d231 3
a233 3

    while((e = getarg(args, num_args, argc, argv, &optind)))
	errx(1, "error at argument `%s'", argv[optind]);
d249 1
a249 1
    if(krb5_config_parse_file(config_file, &cf) == 0) {
d255 1
d283 8
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d37 1
a37 1
RCSID("$KTH: kadmin.c,v 1.38 2001/05/15 06:34:35 assar Exp $");
a47 1
static char *keytab;
a51 2
    {   "keytab",	'K',	arg_string,	&keytab,
   	"keytab for authentication pricipal" },
d225 1
a225 1
    setprogname(argv[0]);
d248 1
a248 1
    if(krb5_config_parse_file(context, config_file, &cf) == 0) {
a253 1
    krb5_clear_error_string (context);
a280 8
    } else if (keytab) {
        ret = kadm5_c_init_with_skey_ctx(context,
					 client_name,
					 keytab,
					 KADM5_ADMIN_SERVICE,
                                         &conf, 0, 0,
                                         &kadm_handle);
        actual_cmds = commands + 4; /* XXX */
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d37 1
a37 1
RCSID("$KTH: kadmin.c,v 1.41 2001/08/10 08:06:13 joda Exp $");
a120 1
    { "del" },
d226 1
d233 3
a235 3
    
    if(getarg(args, num_args, argc, argv, &optind))
	usage(1);
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d37 1
a37 1
RCSID("$KTH: kadmin.c,v 1.42 2003/03/31 10:20:19 lha Exp $");
d54 1
a54 1
   	"keytab for authentication principal" },
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2004 Kungliga Tekniska Högskolan
a34 1
#include "kadmin-commands.h"
d37 1
a37 1
RCSID("$KTH: kadmin.c,v 1.56 2005/05/09 15:35:22 lha Exp $");
d41 1
a41 2
int local_flag;
static int ad_flag;
a48 3
static char *check_library  = NULL;
static char *check_function = NULL;
static getarg_strings policy_libraries = { 0, NULL };
a74 9
    {	"ad", 		0, arg_flag, &ad_flag, "active directory admin mode" },
#ifdef HAVE_DLOPEN
    { "check-library", 0, arg_string, &check_library, 
      "library to load password check function from", "library" },
    { "check-function", 0, arg_string, &check_function,
      "password check function to load", "function" },
    { "policy-libraries", 0, arg_strings, &policy_libraries,
      "password check function to load", "function" },
#endif
d82 77
d163 2
d166 1
a166 1
help(void *opt, int argc, char **argv)
d168 1
a168 28
    if(argc == 0) {
	sl_help(commands, 1, argv - 1 /* XXX */);
    } else {
	SL_cmd *c = sl_match (commands, argv[0], 0);
 	if(c == NULL) {
	    fprintf (stderr, "No such command: %s. "
		     "Try \"help\" for a list of commands\n",
		     argv[0]);
	} else {
	    if(c->func) {
		char *fake[] = { NULL, "--help", NULL };
		fake[0] = argv[0];
		(*c->func)(2, fake);
		fprintf(stderr, "\n");
	    }
	    if(c->help && *c->help)
		fprintf (stderr, "%s\n", c->help);
	    if((++c)->name && c->func == NULL) {
		int f = 0;
		fprintf (stderr, "Synonyms:");
		while (c->name && c->func == NULL) {
		    fprintf (stderr, "%s%s", f ? ", " : " ", (c++)->name);
		    f = 1;
		}
		fprintf (stderr, "\n");
	    }
	}
    }
a171 2
static int exit_seen = 0;

d173 1
a173 1
exit_kadmin (void *opt, int argc, char **argv)
d175 1
a175 2
    exit_seen = 1;
    return 0;
d186 1
a186 1
get_privs(void *opt, int argc, char **argv)
d192 18
d224 1
a224 1
    char **files;
a226 1
    int exit_status = 0;
d251 8
a258 9
    ret = krb5_prepend_config_files_default(config_file, &files);
    if (ret)
	krb5_err(context, 1, ret, "getting configuration files");
    
    ret = krb5_set_config_files(context, files);
    krb5_free_config_files(files);
    if(ret) 
	krb5_err(context, 1, ret, "reading configuration files");
    
d277 1
a277 21
    if (keyfile) {
	conf.stash_file = keyfile;
	conf.mask |= KADM5_CONFIG_STASH_FILE;
    }

    if(local_flag) {
	int i;

	kadm5_setup_passwd_quality_check (context, 
					  check_library, check_function);
	
	for (i = 0; i < policy_libraries.num_strings; i++) {
	    ret = kadm5_add_passwd_quality_verifier(context, 
						    policy_libraries.strings[i]);
	    if (ret)
		krb5_err(context, 1, ret, "kadm5_add_passwd_quality_verifier");
	}
	ret = kadm5_add_passwd_quality_verifier(context, NULL);
	if (ret)
	    krb5_err(context, 1, ret, "kadm5_add_passwd_quality_verifier");
	
d284 1
a284 9
    } else if (ad_flag) {
	if (client_name == NULL)
	    krb5_errx(context, 1, "keytab mode require principal name");
	ret = kadm5_ad_init_with_password_ctx(context,
					      client_name,
					      NULL,
					      KADM5_ADMIN_SERVICE,
					      &conf, 0, 0,
					      &kadm_handle);
a285 2
	if (client_name == NULL)
	    krb5_errx(context, 1, "keytab mode require principal name");
d292 2
a293 1
    } else
d300 2
d312 1
a312 1
	ret = sl_command (commands, argc, argv);
d315 2
a316 13
	else if (ret == -2)
	    ret = 0;
	if(ret != 0)
	    exit_status = 1;
    } else {
	while(!exit_seen) {
	    ret = sl_command_loop(commands, "kadmin> ", NULL);
	    if (ret == -2)
		exit_seen = 1;
	    else if (ret != 0)
		exit_status = 1;
	}
    }
d319 1
d321 1
a321 1
    return exit_status;
@


