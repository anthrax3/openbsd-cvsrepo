head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.28
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.26
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.24
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.04.22.10.01.26;	author reyk;	state dead;
branches;
next	1.7;

1.7
date	2013.06.17.18.57.41;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.04.01.46.49;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.18.31.44;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.03.12.02.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.46;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.46;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.21.41;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.54.48;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.15.30;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.39;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2006 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kadmin_locl.h"
#include <parse_units.h>

/*
 * util.c - functions for parsing, unparsing, and editing different
 * types of data used in kadmin.
 */

static int
get_response(const char *prompt, const char *def, char *buf, size_t len);

/*
 * attributes
 */

struct units kdb_attrs[] = {
    { "allow-digest",		KRB5_KDB_ALLOW_DIGEST },
    { "allow-kerberos4",	KRB5_KDB_ALLOW_KERBEROS4 },
    { "trusted-for-delegation",	KRB5_KDB_TRUSTED_FOR_DELEGATION },
    { "ok-as-delegate",		KRB5_KDB_OK_AS_DELEGATE },
    { "new-princ",		KRB5_KDB_NEW_PRINC },
    { "support-desmd5",		KRB5_KDB_SUPPORT_DESMD5 },
    { "pwchange-service",	KRB5_KDB_PWCHANGE_SERVICE },
    { "disallow-svr",		KRB5_KDB_DISALLOW_SVR },
    { "requires-pw-change",	KRB5_KDB_REQUIRES_PWCHANGE },
    { "requires-hw-auth",	KRB5_KDB_REQUIRES_HW_AUTH },
    { "requires-pre-auth",	KRB5_KDB_REQUIRES_PRE_AUTH },
    { "disallow-all-tix",	KRB5_KDB_DISALLOW_ALL_TIX },
    { "disallow-dup-skey",	KRB5_KDB_DISALLOW_DUP_SKEY },
    { "disallow-proxiable",	KRB5_KDB_DISALLOW_PROXIABLE },
    { "disallow-renewable",	KRB5_KDB_DISALLOW_RENEWABLE },
    { "disallow-tgt-based",	KRB5_KDB_DISALLOW_TGT_BASED },
    { "disallow-forwardable",	KRB5_KDB_DISALLOW_FORWARDABLE },
    { "disallow-postdated",	KRB5_KDB_DISALLOW_POSTDATED },
    { NULL, 0 }
};

/*
 * convert the attributes in `attributes' into a printable string
 * in `str, len'
 */

void
attributes2str(krb5_flags attributes, char *str, size_t len)
{
    unparse_flags (attributes, kdb_attrs, str, len);
}

/*
 * convert the string in `str' into attributes in `flags'
 * return 0 if parsed ok, else -1.
 */

int
str2attributes(const char *str, krb5_flags *flags)
{
    int res;

    res = parse_flags (str, kdb_attrs, *flags);
    if (res < 0)
	return res;
    else {
	*flags = res;
	return 0;
    }
}

/*
 * try to parse the string `resp' into attributes in `attr', also
 * setting the `bit' in `mask' if attributes are given and valid.
 */

int
parse_attributes (const char *resp, krb5_flags *attr, int *mask, int bit)
{
    krb5_flags tmp = *attr;

    if (str2attributes(resp, &tmp) == 0) {
	*attr = tmp;
	if (mask)
	    *mask |= bit;
	return 0;
    } else if(*resp == '?') {
	print_flags_table (kdb_attrs, stderr);
    } else {
	fprintf (stderr, "Unable to parse \"%s\"\n", resp);
    }
    return -1;
}

/*
 * allow the user to edit the attributes in `attr', prompting with `prompt'
 */

int
edit_attributes (const char *prompt, krb5_flags *attr, int *mask, int bit)
{
    char buf[1024], resp[1024];

    if (mask && (*mask & bit))
	return 0;

    attributes2str(*attr, buf, sizeof(buf));
    for (;;) {
	if(get_response("Attributes", buf, resp, sizeof(resp)) != 0)
	    return 1;
	if (resp[0] == '\0')
	    break;
	if (parse_attributes (resp, attr, mask, bit) == 0)
	    break;
    }
    return 0;
}

/*
 * time_t
 * the special value 0 means ``never''
 */

/*
 * Convert the time `t' to a string representation in `str' (of max
 * size `len').  If include_time also include time, otherwise just
 * date.
 */

void
time_t2str(time_t t, char *str, size_t len, int include_time)
{
    if(t) {
	if(include_time)
	    strftime(str, len, "%Y-%m-%d %H:%M:%S UTC", gmtime(&t));
	else
	    strftime(str, len, "%Y-%m-%d", gmtime(&t));
    } else
	snprintf(str, len, "never");
}

/*
 * Convert the time representation in `str' to a time in `time'.
 * Return 0 if succesful, else -1.
 */

int
str2time_t (const char *str, time_t *t)
{
    const char *p;
    struct tm tm, tm2;

    memset (&tm, 0, sizeof (tm));
    memset (&tm2, 0, sizeof (tm2));

    while(isspace((unsigned char)*str))
	str++;

    if (str[0] == '+') {
	str++;
	*t = parse_time(str, "month");
	if (*t < 0)
	    return -1;
	*t += time(NULL);
	return 0;
    }

    if(strcasecmp(str, "never") == 0) {
	*t = 0;
	return 0;
    }

    if(strcasecmp(str, "now") == 0) {
	*t = time(NULL);
	return 0;
    }

    p = strptime (str, "%Y-%m-%d", &tm);

    if (p == NULL)
	return -1;

    while(isspace((unsigned char)*p))
	p++;

    /* XXX this is really a bit optimistic, we should really complain
       if there was a problem parsing the time */
    if(p[0] != '\0' && strptime (p, "%H:%M:%S", &tm2) != NULL) {
	tm.tm_hour = tm2.tm_hour;
	tm.tm_min  = tm2.tm_min;
	tm.tm_sec  = tm2.tm_sec;
    } else {
	/* Do it on the end of the day */
	tm.tm_hour = 23;
	tm.tm_min  = 59;
	tm.tm_sec  = 59;
    }

    *t = tm2time (tm, 0);
    return 0;
}

/*
 * try to parse the time in `resp' storing it in `value'
 */

int
parse_timet (const char *resp, krb5_timestamp *value, int *mask, int bit)
{
    time_t tmp;

    if (str2time_t(resp, &tmp) == 0) {
	*value = tmp;
	if(mask)
	    *mask |= bit;
	return 0;
    }
    if(*resp != '?')
	fprintf (stderr, "Unable to parse time \"%s\"\n", resp);
    fprintf (stderr, "Print date on format YYYY-mm-dd [hh:mm:ss]\n");
    return -1;
}

/*
 * allow the user to edit the time in `value'
 */

int
edit_timet (const char *prompt, krb5_timestamp *value, int *mask, int bit)
{
    char buf[1024], resp[1024];

    if (mask && (*mask & bit))
	return 0;

    time_t2str (*value, buf, sizeof (buf), 0);

    for (;;) {
	if(get_response(prompt, buf, resp, sizeof(resp)) != 0)
	    return 1;
	if (parse_timet (resp, value, mask, bit) == 0)
	    break;
    }
    return 0;
}

/*
 * deltat
 * the special value 0 means ``unlimited''
 */

/*
 * convert the delta_t value in `t' into a printable form in `str, len'
 */

void
deltat2str(unsigned t, char *str, size_t len)
{
    if(t == 0 || t == INT_MAX)
	snprintf(str, len, "unlimited");
    else
	unparse_time(t, str, len);
}

/*
 * parse the delta value in `str', storing result in `*delta'
 * return 0 if ok, else -1
 */

int
str2deltat(const char *str, krb5_deltat *delta)
{
    int res;

    if(strcasecmp(str, "unlimited") == 0) {
	*delta = 0;
	return 0;
    }
    res = parse_time(str, "day");
    if (res < 0)
	return res;
    else {
	*delta = res;
	return 0;
    }
}

/*
 * try to parse the string in `resp' into a deltad in `value'
 * `mask' will get the bit `bit' set if a value was given.
 */

int
parse_deltat (const char *resp, krb5_deltat *value, int *mask, int bit)
{
    krb5_deltat tmp;

    if (str2deltat(resp, &tmp) == 0) {
	*value = tmp;
	if (mask)
	    *mask |= bit;
	return 0;
    } else if(*resp == '?') {
	print_time_table (stderr);
    } else {
	fprintf (stderr, "Unable to parse time \"%s\"\n", resp);
    }
    return -1;
}

/*
 * allow the user to edit the deltat in `value'
 */

int
edit_deltat (const char *prompt, krb5_deltat *value, int *mask, int bit)
{
    char buf[1024], resp[1024];

    if (mask && (*mask & bit))
	return 0;

    deltat2str(*value, buf, sizeof(buf));
    for (;;) {
	if(get_response(prompt, buf, resp, sizeof(resp)) != 0)
	    return 1;
	if (parse_deltat (resp, value, mask, bit) == 0)
	    break;
    }
    return 0;
}

/*
 * allow the user to edit `ent'
 */

void
set_defaults(kadm5_principal_ent_t ent, int *mask,
	     kadm5_principal_ent_t default_ent, int default_mask)
{
    if (default_ent
	&& (default_mask & KADM5_MAX_LIFE)
	&& !(*mask & KADM5_MAX_LIFE))
	ent->max_life = default_ent->max_life;

    if (default_ent
	&& (default_mask & KADM5_MAX_RLIFE)
	&& !(*mask & KADM5_MAX_RLIFE))
	ent->max_renewable_life = default_ent->max_renewable_life;

    if (default_ent
	&& (default_mask & KADM5_PRINC_EXPIRE_TIME)
	&& !(*mask & KADM5_PRINC_EXPIRE_TIME))
	ent->princ_expire_time = default_ent->princ_expire_time;

    if (default_ent
	&& (default_mask & KADM5_PW_EXPIRATION)
	&& !(*mask & KADM5_PW_EXPIRATION))
	ent->pw_expiration = default_ent->pw_expiration;

    if (default_ent
	&& (default_mask & KADM5_ATTRIBUTES)
	&& !(*mask & KADM5_ATTRIBUTES))
	ent->attributes = default_ent->attributes & ~KRB5_KDB_DISALLOW_ALL_TIX;
}

int
edit_entry(kadm5_principal_ent_t ent, int *mask,
	   kadm5_principal_ent_t default_ent, int default_mask)
{

    set_defaults(ent, mask, default_ent, default_mask);

    if(edit_deltat ("Max ticket life", &ent->max_life, mask,
		    KADM5_MAX_LIFE) != 0)
	return 1;

    if(edit_deltat ("Max renewable life", &ent->max_renewable_life, mask,
		    KADM5_MAX_RLIFE) != 0)
	return 1;

    if(edit_timet ("Principal expiration time", &ent->princ_expire_time, mask,
		   KADM5_PRINC_EXPIRE_TIME) != 0)
	return 1;

    if(edit_timet ("Password expiration time", &ent->pw_expiration, mask,
		   KADM5_PW_EXPIRATION) != 0)
	return 1;

    if(edit_attributes ("Attributes", &ent->attributes, mask,
			KADM5_ATTRIBUTES) != 0)
	return 1;

    return 0;
}

/*
 * Parse the arguments, set the fields in `ent' and the `mask' for the
 * entries having been set.
 * Return 1 on failure and 0 on success.
 */

int
set_entry(krb5_context contextp,
	  kadm5_principal_ent_t ent,
	  int *mask,
	  const char *max_ticket_life,
	  const char *max_renewable_life,
	  const char *expiration,
	  const char *pw_expiration,
	  const char *attributes)
{
    if (max_ticket_life != NULL) {
	if (parse_deltat (max_ticket_life, &ent->max_life,
			  mask, KADM5_MAX_LIFE)) {
	    krb5_warnx (contextp, "unable to parse `%s'", max_ticket_life);
	    return 1;
	}
    }
    if (max_renewable_life != NULL) {
	if (parse_deltat (max_renewable_life, &ent->max_renewable_life,
			  mask, KADM5_MAX_RLIFE)) {
	    krb5_warnx (contextp, "unable to parse `%s'", max_renewable_life);
	    return 1;
	}
    }

    if (expiration) {
	if (parse_timet (expiration, &ent->princ_expire_time,
			mask, KADM5_PRINC_EXPIRE_TIME)) {
	    krb5_warnx (contextp, "unable to parse `%s'", expiration);
	    return 1;
	}
    }
    if (pw_expiration) {
	if (parse_timet (pw_expiration, &ent->pw_expiration,
			 mask, KADM5_PW_EXPIRATION)) {
	    krb5_warnx (contextp, "unable to parse `%s'", pw_expiration);
	    return 1;
	}
    }
    if (attributes != NULL) {
	if (parse_attributes (attributes, &ent->attributes,
			      mask, KADM5_ATTRIBUTES)) {
	    krb5_warnx (contextp, "unable to parse `%s'", attributes);
	    return 1;
	}
    }
    return 0;
}

/*
 * Does `string' contain any globing characters?
 */

static int
is_expression(const char *string)
{
    const char *p;
    int quote = 0;

    for(p = string; *p; p++) {
	if(quote) {
	    quote = 0;
	    continue;
	}
	if(*p == '\\')
	    quote++;
	else if(strchr("[]*?", *p) != NULL)
	    return 1;
    }
    return 0;
}

/*
 * Loop over all principals matching exp.  If any of calls to `func'
 * failes, the first error is returned when all principals are
 * processed.
 */
int
foreach_principal(const char *exp_str,
		  int (*func)(krb5_principal, void*),
		  const char *funcname,
		  void *data)
{
    char **princs = NULL;
    int num_princs = 0;
    int i;
    krb5_error_code saved_ret = 0, ret = 0;
    krb5_principal princ_ent;
    int is_expr;

    /* if this isn't an expression, there is no point in wading
       through the whole database looking for matches */
    is_expr = is_expression(exp_str);
    if(is_expr)
	ret = kadm5_get_principals(kadm_handle, exp_str, &princs, &num_princs);
    if(!is_expr || ret == KADM5_AUTH_LIST) {
	/* we might be able to perform the requested opreration even
           if we're not allowed to list principals */
	num_princs = 1;
	princs = malloc(sizeof(*princs));
	if(princs == NULL)
	    return ENOMEM;
	princs[0] = strdup(exp_str);
	if(princs[0] == NULL){
	    free(princs);
	    return ENOMEM;
	}
    } else if(ret) {
	krb5_warn(context, ret, "kadm5_get_principals");
	return ret;
    }
    for(i = 0; i < num_princs; i++) {
	ret = krb5_parse_name(context, princs[i], &princ_ent);
	if(ret){
	    krb5_warn(context, ret, "krb5_parse_name(%s)", princs[i]);
	    continue;
	}
	ret = (*func)(princ_ent, data);
	if(ret) {
	    krb5_clear_error_message(context);
	    krb5_warn(context, ret, "%s %s", funcname, princs[i]);
	    if (saved_ret == 0)
		saved_ret = ret;
	}
	krb5_free_principal(context, princ_ent);
    }
    if (ret == 0 && saved_ret != 0)
	ret = saved_ret;
    kadm5_free_name_list(kadm_handle, princs, &num_princs);
    return ret;
}

/*
 * prompt with `prompt' and default value `def', and store the reply
 * in `buf, len'
 */

#include <setjmp.h>

static jmp_buf jmpbuf;

static void
interrupt(int sig)
{
    longjmp(jmpbuf, 1);
}

static int
get_response(const char *prompt, const char *def, char *buf, size_t len)
{
    char *p;
    void (*osig)(int);

    osig = signal(SIGINT, interrupt);
    if(setjmp(jmpbuf)) {
	signal(SIGINT, osig);
	fprintf(stderr, "\n");
	return 1;
    }

    fprintf(stderr, "%s [%s]:", prompt, def);
    if(fgets(buf, len, stdin) == NULL) {
	int save_errno = errno;
	if(ferror(stdin))
	    krb5_err(context, 1, save_errno, "<stdin>");
	signal(SIGINT, osig);
	return 1;
    }
    p = strchr(buf, '\n');
    if(p)
	*p = '\0';
    if(strcmp(buf, "") == 0)
	strlcpy(buf, def, len);
    signal(SIGINT, osig);
    return 0;
}

/*
 * return [0, 16) or -1
 */

static int
hex2n (char c)
{
    static char hexdigits[] = "0123456789abcdef";
    const char *p;

    p = strchr (hexdigits, tolower((unsigned char)c));
    if (p == NULL)
	return -1;
    else
	return p - hexdigits;
}

/*
 * convert a key in a readable format into a keyblock.
 * return 0 iff succesful, otherwise `err' should point to an error message
 */

int
parse_des_key (const char *key_string, krb5_key_data *key_data,
	       const char **error)
{
    const char *p = key_string;
    unsigned char bits[8];
    int i;

    if (strlen (key_string) != 16) {
	*error = "bad length, should be 16 for DES key";
	return 1;
    }
    for (i = 0; i < 8; ++i) {
	int d1, d2;

	d1 = hex2n(p[2 * i]);
	d2 = hex2n(p[2 * i + 1]);
	if (d1 < 0 || d2 < 0) {
	    *error = "non-hex character";
	    return 1;
	}
	bits[i] = (d1 << 4) | d2;
    }
    for (i = 0; i < 3; ++i) {
	key_data[i].key_data_ver  = 2;
	key_data[i].key_data_kvno = 0;
	/* key */
	key_data[i].key_data_type[0]     = ETYPE_DES_CBC_CRC;
	key_data[i].key_data_length[0]   = 8;
	key_data[i].key_data_contents[0] = malloc(8);
	if (key_data[i].key_data_contents[0] == NULL) {
	    *error = "malloc";
	    return ENOMEM;
	}
	memcpy (key_data[i].key_data_contents[0], bits, 8);
	/* salt */
	key_data[i].key_data_type[1]     = KRB5_PW_SALT;
	key_data[i].key_data_length[1]   = 0;
	key_data[i].key_data_contents[1] = NULL;
    }
    key_data[0].key_data_type[0] = ETYPE_DES_CBC_MD5;
    key_data[1].key_data_type[0] = ETYPE_DES_CBC_MD4;
    return 0;
}
@


1.7
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.6
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2004 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a36 2
RCSID("$KTH: util.c,v 1.44 2005/05/30 20:47:04 lha Exp $");

d46 1
a46 1
 * attributes 
d50 3
d68 1
a68 1
    { NULL }
d156 1
a156 1
 * date.  
d183 13
d212 2
d217 1
a217 1
    if(strptime (p, "%t%H:%M:%S", &tm2) != NULL) {
d246 1
a246 1
    } 
d406 1
a406 1
    
d433 1
a433 1
set_entry(krb5_context context,
d443 1
a443 1
	if (parse_deltat (max_ticket_life, &ent->max_life, 
d445 1
a445 1
	    krb5_warnx (context, "unable to parse `%s'", max_ticket_life);
d450 1
a450 1
	if (parse_deltat (max_renewable_life, &ent->max_renewable_life, 
d452 1
a452 1
	    krb5_warnx (context, "unable to parse `%s'", max_renewable_life);
d458 1
a458 1
	if (parse_timet (expiration, &ent->princ_expire_time, 
d460 1
a460 1
	    krb5_warnx (context, "unable to parse `%s'", expiration);
d465 1
a465 1
	if (parse_timet (pw_expiration, &ent->pw_expiration, 
d467 1
a467 1
	    krb5_warnx (context, "unable to parse `%s'", pw_expiration);
d472 1
a472 1
	if (parse_attributes (attributes, &ent->attributes, 
d474 1
a474 1
	    krb5_warnx (context, "unable to parse `%s'", attributes);
d498 1
a498 1
	else if(strchr("[]*?", *p) != NULL) 
d504 5
a508 1
/* loop over all principals matching exp */
d510 2
a511 2
foreach_principal(const char *exp, 
		  int (*func)(krb5_principal, void*), 
d515 2
a516 2
    char **princs;
    int num_princs;
d518 1
a518 1
    krb5_error_code ret = 0;
d524 1
a524 1
    is_expr = is_expression(exp);
d526 1
a526 1
	ret = kadm5_get_principals(kadm_handle, exp, &princs, &num_princs);
d534 2
a535 2
	princs[0] = strdup(exp);
	if(princs[0] == NULL){ 
d550 2
a551 1
	if(ret)
d553 3
d558 2
d561 1
a561 1
    return 0;
d633 1
a633 1
	       const char **err)
d640 1
a640 1
	*err = "bad length, should be 16 for DES key";
d649 1
a649 1
	    *err = "non-hex character";
d661 4
@


1.5
log
@fix pr 3292
the time parsing in kadmin does not reflect reality - we must skip
the space between the day and the time, or we simply don't get the time
correctly, resulting in the time being set to 0hrs 0min 0sec
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: util.c,v 1.39 2003/04/14 11:55:27 lha Exp $");
d52 1
d118 1
a118 1
	fprintf (stderr, "Unable to parse '%s'\n", resp);
a197 4
    /* Do it on the end of the day */
    tm2.tm_hour = 23;
    tm2.tm_min  = 59;
    tm2.tm_sec  = 59;
d199 2
d205 5
d230 4
a233 5
    } else if(*resp == '?') {
	printf ("Print date on format YYYY-mm-dd [hh:mm:ss]\n");
    } else {
	fprintf (stderr, "Unable to parse time '%s'\n", resp);
    }
d319 1
a319 1
	fprintf (stderr, "Unable to parse time '%s'\n", resp);
d498 1
a498 1
    krb5_error_code ret;
d562 1
a562 1
	printf("\n");
d566 1
a566 1
    printf("%s [%s]:", prompt, def);
@


1.4
log
@Merge 0.6rc1
@
text
@d202 1
a202 1
    if(strptime (p, "%H:%M:%S", &tm2) != NULL) {
@


1.3
log
@Remove an unused variable.

Spotted by deraadt@@, synced with the Heimdal people.
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: util.c,v 1.36 2001/08/27 23:07:36 assar Exp $");
d559 1
d590 1
a590 1
    p = strchr (hexdigits, tolower((int)c));
@


1.2
log
@volatile sig_atomic_t
@
text
@a541 1
static volatile sig_atomic_t num_intrs;
a555 1
    num_intrs = 0;
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
RCSID("$KTH: util.c,v 1.30 2001/01/11 23:07:29 assar Exp $");
d44 3
d136 2
a137 1
	get_response("Attributes", buf, resp, sizeof(resp));
d249 2
a250 1
	get_response(prompt, buf, resp, sizeof(resp));
d335 2
a336 1
	get_response(prompt, buf, resp, sizeof(resp));
d347 3
a349 3
int
edit_entry(kadm5_principal_ent_t ent, int *mask,
	   kadm5_principal_ent_t default_ent, int default_mask)
a354 2
    edit_deltat ("Max ticket life", &ent->max_life, mask,
		 KADM5_MAX_LIFE);
a359 2
    edit_deltat ("Max renewable life", &ent->max_renewable_life, mask,
		 KADM5_MAX_RLIFE);
a364 2
    edit_timet ("Principal expiration time", &ent->princ_expire_time, mask,
	       KADM5_PRINC_EXPIRE_TIME);
a369 2
    edit_timet ("Password expiration time", &ent->pw_expiration, mask,
	       KADM5_PW_EXPIRATION);
d375 29
a403 2
    edit_attributes ("Attributes", &ent->attributes, mask,
		     KADM5_ATTRIBUTES);
d489 1
d527 2
a528 13
	if(ret) {
	    char *tmp;
	    krb5_error_code ret2;

	    ret2 = krb5_unparse_name(context, princ_ent, &tmp);
	    if(ret2) {
		krb5_warn(context, ret2, "krb5_unparse_name");
		krb5_warn(context, ret, "<unknown principal>");
	    } else {
		krb5_warn(context, ret, "%s", tmp);
		free(tmp);
	    }
	}
d540 12
a551 1
void
d555 8
d565 7
a571 2
    if(fgets(buf, len, stdin) == NULL)
	*buf = '\0';
d576 3
a578 2
	strncpy(buf, def, len);
    buf[len-1] = 0;
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d37 1
a37 1
RCSID("$KTH: util.c,v 1.32 2001/05/14 06:17:20 assar Exp $");
a463 1
		  const char *funcname,
d501 13
a513 2
	if(ret)
	    krb5_warn(context, ret, "%s %s", funcname, princs[i]);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d37 1
a37 1
RCSID("$KTH: util.c,v 1.36 2001/08/27 23:07:36 assar Exp $");
a43 3
static int
get_response(const char *prompt, const char *def, char *buf, size_t len);

d133 1
a133 2
	if(get_response("Attributes", buf, resp, sizeof(resp)) != 0)
	    return 1;
d245 1
a245 2
	if(get_response(prompt, buf, resp, sizeof(resp)) != 0)
	    return 1;
d330 1
a330 2
	if(get_response(prompt, buf, resp, sizeof(resp)) != 0)
	    return 1;
d341 3
a343 3
void
set_defaults(kadm5_principal_ent_t ent, int *mask,
	     kadm5_principal_ent_t default_ent, int default_mask)
d349 2
d356 2
d363 2
d370 2
d377 2
a378 29
}

int
edit_entry(kadm5_principal_ent_t ent, int *mask,
	   kadm5_principal_ent_t default_ent, int default_mask)
{

    set_defaults(ent, mask, default_ent, default_mask);

    if(edit_deltat ("Max ticket life", &ent->max_life, mask,
		    KADM5_MAX_LIFE) != 0)
	return 1;
    
    if(edit_deltat ("Max renewable life", &ent->max_renewable_life, mask,
		    KADM5_MAX_RLIFE) != 0)
	return 1;

    if(edit_timet ("Principal expiration time", &ent->princ_expire_time, mask,
		   KADM5_PRINC_EXPIRE_TIME) != 0)
	return 1;

    if(edit_timet ("Password expiration time", &ent->pw_expiration, mask,
		   KADM5_PW_EXPIRATION) != 0)
	return 1;

    if(edit_attributes ("Attributes", &ent->attributes, mask,
			KADM5_ATTRIBUTES) != 0)
	return 1;

d515 1
a515 12
#include <setjmp.h>

static sig_atomic_t num_intrs;
static jmp_buf jmpbuf;

static void
interrupt(int sig)
{
    longjmp(jmpbuf, 1);
}

static int
a518 8
    void (*osig)(int);

    num_intrs = 0;
    osig = signal(SIGINT, interrupt);
    if(setjmp(jmpbuf)) {
	signal(SIGINT, osig);
	return 1;
    }
d521 2
a522 7
    if(fgets(buf, len, stdin) == NULL) {
	int save_errno = errno;
	if(ferror(stdin))
	    krb5_err(context, 1, save_errno, "<stdin>");
	signal(SIGINT, osig);
	return 1;
    }
d527 2
a528 3
	strlcpy(buf, def, len);
    signal(SIGINT, osig);
    return 0;
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: util.c,v 1.39 2003/04/14 11:55:27 lha Exp $");
d542 1
d557 1
a560 1
	printf("\n");
d591 1
a591 1
    p = strchr (hexdigits, tolower((unsigned char)c));
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2004 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: util.c,v 1.44 2005/05/30 20:47:04 lha Exp $");
a51 1
    { "ok-as-delegate",		KRB5_KDB_OK_AS_DELEGATE },
d117 1
a117 1
	fprintf (stderr, "Unable to parse \"%s\"\n", resp);
d197 4
d202 1
a202 3
    /* XXX this is really a bit optimistic, we should really complain
       if there was a problem parsing the time */
    if(strptime (p, "%t%H:%M:%S", &tm2) != NULL) {
a205 5
    } else {
	/* Do it on the end of the day */
	tm.tm_hour = 23;
	tm.tm_min  = 59;
	tm.tm_sec  = 59;
d226 5
a230 4
    } 
    if(*resp != '?')
	fprintf (stderr, "Unable to parse time \"%s\"\n", resp);
    fprintf (stderr, "Print date on format YYYY-mm-dd [hh:mm:ss]\n");
d316 1
a316 1
	fprintf (stderr, "Unable to parse time \"%s\"\n", resp);
d495 1
a495 1
    krb5_error_code ret = 0;
d559 1
a559 1
	fprintf(stderr, "\n");
d563 1
a563 1
    fprintf(stderr, "%s [%s]:", prompt, def);
@


