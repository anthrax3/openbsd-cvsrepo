head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.28
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.04.22.10.01.25;	author reyk;	state dead;
branches;
next	1.5;

1.5
date	2013.06.17.18.57.41;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.12.23.20.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.37;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.37;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.02.15.27;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.32.35;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Portions Copyright (c) 2010 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$Id: bits.c,v 1.5 2013/06/17 18:57:41 robert Exp $");
#endif
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#ifdef WIN32
#include <winsock2.h>
#include <ws2tcpip.h>
#endif

#define BITSIZE(TYPE)						\
{								\
    int b = 0; TYPE x = 1, zero = 0; const char *pre = "u";	\
    char tmp[128], tmp2[128];					\
    while(x){ x <<= 1; b++; if(x < zero) pre=""; }		\
    if(b >= len){						\
        size_t tabs;						\
	sprintf(tmp, "%sint%d_t" , pre, len);			\
	sprintf(tmp2, "typedef %s %s;", #TYPE, tmp);		\
	tabs = 5 - strlen(tmp2) / 8;				\
        fprintf(f, "%s", tmp2);					\
	while(tabs-- > 0) fprintf(f, "\t");			\
	fprintf(f, "/* %2d bits */\n", b);			\
        return;                                                 \
    }								\
}

#ifndef HAVE___ATTRIBUTE__
#define __attribute__(x)
#endif

static void
try_signed(FILE *f, int len)  __attribute__ ((unused));

static void
try_unsigned(FILE *f, int len) __attribute__ ((unused));

static int
print_bt(FILE *f, int flag) __attribute__ ((unused));

static void
try_signed(FILE *f, int len)
{
    BITSIZE(signed char);
    BITSIZE(short);
    BITSIZE(int);
    BITSIZE(long);
#ifdef HAVE_LONG_LONG
    BITSIZE(long long);
#endif
    fprintf(f, "/* There is no %d bit type */\n", len);
}

static void
try_unsigned(FILE *f, int len)
{
    BITSIZE(unsigned char);
    BITSIZE(unsigned short);
    BITSIZE(unsigned int);
    BITSIZE(unsigned long);
#ifdef HAVE_LONG_LONG
    BITSIZE(unsigned long long);
#endif
    fprintf(f, "/* There is no %d bit type */\n", len);
}

static int
print_bt(FILE *f, int flag)
{
    if(flag == 0){
	fprintf(f, "/* For compatibility with various type definitions */\n");
	fprintf(f, "#ifndef __BIT_TYPES_DEFINED__\n");
	fprintf(f, "#define __BIT_TYPES_DEFINED__\n");
	fprintf(f, "\n");
    }
    return 1;
}

int main(int argc, char **argv)
{
    FILE *f;
    int flag;
    const char *fn, *hb;

    if (argc > 1 && strcmp(argv[1], "--version") == 0) {
	printf("some version");
	return 0;
    }

    if(argc < 2){
	fn = "bits.h";
	hb = "__BITS_H__";
	f = stdout;
    } else {
	char *p;
	fn = argv[1];
	p = malloc(strlen(fn) + 5);
	sprintf(p, "__%s__", fn);
	hb = p;
	for(; *p; p++){
	    if(!isalnum((unsigned char)*p))
		*p = '_';
	}
	f = fopen(argv[1], "w");
    }
    fprintf(f, "/* %s -- this file was generated for %s by\n", fn, HOST);
    fprintf(f, "   %*s    %s */\n\n", (int)strlen(fn), "",
	    "$Id: bits.c,v 1.5 2013/06/17 18:57:41 robert Exp $");
    fprintf(f, "#ifndef %s\n", hb);
    fprintf(f, "#define %s\n", hb);
    fprintf(f, "\n");
#ifdef HAVE_INTTYPES_H
    fprintf(f, "#include <inttypes.h>\n");
#endif
#ifdef HAVE_SYS_TYPES_H
    fprintf(f, "#include <sys/types.h>\n");
#endif
#ifdef HAVE_SYS_BITYPES_H
    fprintf(f, "#include <sys/bitypes.h>\n");
#endif
#ifdef HAVE_BIND_BITYPES_H
    fprintf(f, "#include <bind/bitypes.h>\n");
#endif
#ifdef HAVE_NETINET_IN6_MACHTYPES_H
    fprintf(f, "#include <netinet/in6_machtypes.h>\n");
#endif
#ifdef HAVE_SOCKLEN_T
#ifndef WIN32
    fprintf(f, "#include <sys/socket.h>\n");
#else
    fprintf(f, "#include <winsock2.h>\n");
    fprintf(f, "#include <ws2tcpip.h>\n");
#endif
#endif
    fprintf(f, "\n");

    flag = 0;
#ifndef HAVE_INT8_T
    flag = print_bt(f, flag);
    try_signed (f, 8);
#endif /* HAVE_INT8_T */
#ifndef HAVE_INT16_T
    flag = print_bt(f, flag);
    try_signed (f, 16);
#endif /* HAVE_INT16_T */
#ifndef HAVE_INT32_T
    flag = print_bt(f, flag);
    try_signed (f, 32);
#endif /* HAVE_INT32_T */
#ifndef HAVE_INT64_T
    flag = print_bt(f, flag);
    try_signed (f, 64);
#endif /* HAVE_INT64_T */

#ifndef HAVE_UINT8_T
    flag = print_bt(f, flag);
    try_unsigned (f, 8);
#endif /* HAVE_UINT8_T */
#ifndef HAVE_UINT16_T
    flag = print_bt(f, flag);
    try_unsigned (f, 16);
#endif /* HAVE_UINT16_T */
#ifndef HAVE_UINT32_T
    flag = print_bt(f, flag);
    try_unsigned (f, 32);
#endif /* HAVE_UINT32_T */
#ifndef HAVE_UINT64_T
    flag = print_bt(f, flag);
    try_unsigned (f, 64);
#endif /* HAVE_UINT64_T */

#define X(S) fprintf(f, "typedef uint" #S "_t u_int" #S "_t;\n")
#ifndef HAVE_U_INT8_T
    flag = print_bt(f, flag);
    X(8);
#endif /* HAVE_U_INT8_T */
#ifndef HAVE_U_INT16_T
    flag = print_bt(f, flag);
    X(16);
#endif /* HAVE_U_INT16_T */
#ifndef HAVE_U_INT32_T
    flag = print_bt(f, flag);
    X(32);
#endif /* HAVE_U_INT32_T */
#ifndef HAVE_U_INT64_T
    flag = print_bt(f, flag);
    X(64);
#endif /* HAVE_U_INT64_T */

    if(flag){
	fprintf(f, "\n");
	fprintf(f, "#endif /* __BIT_TYPES_DEFINED__ */\n\n");
    }
#ifdef KRB5
    fprintf(f, "\n");
#if defined(HAVE_SOCKLEN_T)
    fprintf(f, "typedef socklen_t krb5_socklen_t;\n");
#else
    fprintf(f, "typedef int krb5_socklen_t;\n");
#endif
#if defined(HAVE_SSIZE_T)
#ifdef HAVE_UNISTD_H
    fprintf(f, "#include <unistd.h>\n");
#endif
    fprintf(f, "typedef ssize_t krb5_ssize_t;\n");
#else
    fprintf(f, "typedef int krb5_ssize_t;\n");
#endif
    fprintf(f, "\n");

#if defined(_WIN32)
    fprintf(f, "typedef SOCKET krb5_socket_t;\n");
#else
    fprintf(f, "typedef int krb5_socket_t;\n");
#endif
    fprintf(f, "\n");

#endif /* KRB5 */

    fprintf(f, "#ifndef HEIMDAL_DEPRECATED\n");
    fprintf(f, "#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 1 )))\n");
    fprintf(f, "#define HEIMDAL_DEPRECATED __attribute__((deprecated))\n");
    fprintf(f, "#elif defined(_MSC_VER) && (_MSC_VER>1200)\n");
    fprintf(f, "#define HEIMDAL_DEPRECATED __declspec(deprecated)\n");
    fprintf(f, "#else\n");
    fprintf(f, "#define HEIMDAL_DEPRECATED\n");
    fprintf(f, "#endif\n");
    fprintf(f, "#endif\n");

    fprintf(f, "#ifndef HEIMDAL_PRINTF_ATTRIBUTE\n");
    fprintf(f, "#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 1 )))\n");
    fprintf(f, "#define HEIMDAL_PRINTF_ATTRIBUTE(x) __attribute__((format x))\n");
    fprintf(f, "#else\n");
    fprintf(f, "#define HEIMDAL_PRINTF_ATTRIBUTE(x)\n");
    fprintf(f, "#endif\n");
    fprintf(f, "#endif\n");

    fprintf(f, "#ifndef HEIMDAL_NORETURN_ATTRIBUTE\n");
    fprintf(f, "#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 1 )))\n");
    fprintf(f, "#define HEIMDAL_NORETURN_ATTRIBUTE __attribute__((noreturn))\n");
    fprintf(f, "#else\n");
    fprintf(f, "#define HEIMDAL_NORETURN_ATTRIBUTE\n");
    fprintf(f, "#endif\n");
    fprintf(f, "#endif\n");

    fprintf(f, "#ifndef HEIMDAL_UNUSED_ATTRIBUTE\n");
    fprintf(f, "#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 1 )))\n");
    fprintf(f, "#define HEIMDAL_UNUSED_ATTRIBUTE __attribute__((unused))\n");
    fprintf(f, "#else\n");
    fprintf(f, "#define HEIMDAL_UNUSED_ATTRIBUTE\n");
    fprintf(f, "#endif\n");
    fprintf(f, "#endif\n");

    fprintf(f, "#endif /* %s */\n", hb);

    if (f != stdout)
	fclose(f);
    return 0;
}
@


1.5
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d38 1
a38 1
RCSID("$Id$");
d146 1
a146 1
	    "$Id$");
@


1.4
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 32
a33 30
 * Copyright (c) 1997-2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d38 1
a38 1
RCSID("$KTH: bits.c,v 1.23 2005/01/05 15:22:02 lha Exp $");
d44 4
d55 3
a57 3
        int tabs;						\
	snprintf(tmp, sizeof tmp, "%sint%d_t" , pre, len);	\
	snprintf(tmp2, sizeof tmp2, "typedef %s %s;", #TYPE, tmp);	\
d122 6
a127 1
    
d135 2
a136 1
	asprintf(&p, "__%s__", fn);
d145 2
a146 2
    fprintf(f, "   %*s    %s */\n\n", (int)strlen(fn), "", 
	    "$KTH: bits.c,v 1.23 2005/01/05 15:22:02 lha Exp $");
d166 1
d168 4
a187 1
#if 0
a191 1
#endif
a204 1
#if 0
a208 1
#endif
a222 1
#if 0
a226 1
#endif
d248 8
d257 35
d293 3
@


1.3
log
@Merge 0.6rc1
@
text
@d36 1
a36 1
RCSID("$KTH: bits.c,v 1.22 2002/08/28 16:08:44 joda Exp $");
d115 1
a115 1
    char *fn, *hb;
d124 3
a126 2
	asprintf(&hb, "__%s__", fn);
	for(p = hb; *p; p++){
d134 1
a134 1
	    "$KTH: bits.c,v 1.22 2002/08/28 16:08:44 joda Exp $");
@


1.2
log
@string cleaning; parts by me, then parts by hin, then more parts by me.
since this is not a very important part of the source tree, and since it
does compile, i am dumping it in now.
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: bits.c,v 1.18 2000/08/27 05:42:46 assar Exp $");
d45 1
a45 1
    int b = 0; TYPE x = 1, zero = 0; char *pre = "u";		\
d133 1
a133 1
	    "$KTH: bits.c,v 1.18 2000/08/27 05:42:46 assar Exp $");
d137 3
a142 3
#ifdef HAVE_INTTYPES_H
    fprintf(f, "#include <inttypes.h>\n");
#endif
d152 3
d220 17
@


1.1
log
@Initial revision
@
text
@d50 2
a51 2
	sprintf(tmp, "%sint%d_t" , pre, len);			\
	sprintf(tmp2, "typedef %s %s;", #TYPE, tmp);		\
d124 1
a124 2
	hb = malloc(strlen(fn) + 5);
	sprintf(hb, "__%s__", fn);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: bits.c,v 1.22 2002/08/28 16:08:44 joda Exp $");
d45 1
a45 1
    int b = 0; TYPE x = 1, zero = 0; const char *pre = "u";	\
d134 1
a134 1
	    "$KTH: bits.c,v 1.22 2002/08/28 16:08:44 joda Exp $");
d138 3
a143 3
#ifdef HAVE_SYS_TYPES_H
    fprintf(f, "#include <sys/types.h>\n");
#endif
a152 3
#ifdef HAVE_SOCKLEN_T
    fprintf(f, "#include <sys/socket.h>\n");
#endif
a217 17
#ifdef KRB5
    fprintf(f, "\n");
#if defined(HAVE_SOCKLEN_T)
    fprintf(f, "typedef socklen_t krb5_socklen_t;\n");
#else
    fprintf(f, "typedef int krb5_socklen_t;\n");
#endif
#if defined(HAVE_SSIZE_T)
#ifdef HAVE_UNISTD_H
    fprintf(f, "#include <unistd.h>\n");
#endif
    fprintf(f, "typedef ssize_t krb5_ssize_t;\n");
#else
    fprintf(f, "typedef int krb5_ssize_t;\n");
#endif
    fprintf(f, "\n");
#endif /* KRB5 */
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: bits.c,v 1.23 2005/01/05 15:22:02 lha Exp $");
d115 1
a115 1
    const char *fn, *hb;
d124 3
a126 4
	p = malloc(strlen(fn) + 5);
	sprintf(p, "__%s__", fn);
	hb = p;
	for(; *p; p++){
d134 1
a134 1
	    "$KTH: bits.c,v 1.23 2005/01/05 15:22:02 lha Exp $");
@


