head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.6
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.4
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.2
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.04.22.10.01.20;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.17.18.45;	author hin;	state dead;
branches;
next	1.1;

1.1
date	2002.02.06.08.56.27;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.02.06.08.56.27;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.29.15.55.42;	author biorn;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.34.02;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@dnl $Id: check-compile-et.m4,v 1.3 2013/06/17 18:57:40 robert Exp $
dnl
dnl CHECK_COMPILE_ET
AC_DEFUN([CHECK_COMPILE_ET], [

AC_CHECK_PROG(COMPILE_ET, compile_et, [compile_et])

krb_cv_compile_et="no"
krb_cv_com_err_need_r=""
krb_cv_compile_et_cross=no
if test "${COMPILE_ET}" = "compile_et"; then

dnl We have compile_et.  Now let's see if it supports `prefix' and `index'.
AC_MSG_CHECKING(whether compile_et has the features we need)
cat > conftest_et.et <<'EOF'
error_table test conf
prefix CONFTEST
index 1
error_code CODE1, "CODE1"
index 128
error_code CODE2, "CODE2"
end
EOF
if ${COMPILE_ET} conftest_et.et >/dev/null 2>&1; then
  dnl XXX Some systems have <et/com_err.h>.
  save_CPPFLAGS="${CPPFLAGS}"
  if test -d "/usr/include/et"; then
    CPPFLAGS="-I/usr/include/et ${CPPFLAGS}"
  fi
  dnl Check that the `prefix' and `index' directives were honored.
  AC_RUN_IFELSE([
#include <com_err.h>
#include <string.h>
#include "conftest_et.h"
int main(int argc, char **argv){
#ifndef ERROR_TABLE_BASE_conf
#error compile_et does not handle error_table N M
#endif
return (CONFTEST_CODE2 - CONFTEST_CODE1) != 127;}
  ], [krb_cv_compile_et="yes"],[CPPFLAGS="${save_CPPFLAGS}"],
  [krb_cv_compile_et="yes" krb_cv_compile_et_cross=yes] )
fi
AC_MSG_RESULT(${krb_cv_compile_et})
if test "${krb_cv_compile_et}" = "yes" -a "${krb_cv_compile_et_cross}" = no; then
  AC_MSG_CHECKING([for if com_err generates a initialize_conf_error_table_r])
  AC_EGREP_CPP([initialize_conf_error_table_r.*struct et_list],
     [#include "conftest_et.h"],
     [krb_cv_com_err_need_r="ok"])
  if test X"$krb_cv_com_err_need_r" = X ; then
    AC_MSG_RESULT(no)
    krb_cv_compile_et=no
  else
    AC_MSG_RESULT(yes)
  fi
fi
rm -fr conftest*
fi

if test "${krb_cv_compile_et_cross}" = yes ; then
  krb_cv_com_err="cross"
elif test "${krb_cv_compile_et}" = "yes"; then
  dnl Since compile_et seems to work, let's check libcom_err
  krb_cv_save_LIBS="${LIBS}"
  LIBS="${LIBS} -lcom_err"
  AC_MSG_CHECKING(for com_err)
  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <com_err.h>]],[[
    const char *p;
    p = error_message(0);
    initialize_error_table_r(0,0,0,0);
    com_right_r(0, 0, 0, 0);
  ]])],[krb_cv_com_err="yes"],[krb_cv_com_err="no"; CPPFLAGS="${save_CPPFLAGS}"])
  AC_MSG_RESULT(${krb_cv_com_err})
  LIBS="${krb_cv_save_LIBS}"
else
  dnl Since compile_et doesn't work, forget about libcom_err
  krb_cv_com_err="no"
fi

dnl Only use the system's com_err if we found compile_et, libcom_err, and
dnl com_err.h.
if test "${krb_cv_com_err}" = "yes"; then
    DIR_com_err=""
    LIB_com_err="-lcom_err"
    LIB_com_err_a=""
    LIB_com_err_so=""
    AC_MSG_NOTICE(Using the already-installed com_err)
    COMPILE_ET="${ac_cv_prog_COMPILE_ET}"
    localcomerr=no
elif test "${krb_cv_com_err}" = "cross"; then
    DIR_com_err="com_err"
    LIB_com_err="\$(top_builddir)/lib/com_err/libcom_err.la"
    LIB_com_err_a="\$(top_builddir)/lib/com_err/.libs/libcom_err.a"
    LIB_com_err_so="\$(top_builddir)/lib/com_err/.libs/libcom_err.so"
    AC_MSG_NOTICE(Using our own com_err with toolchain compile_et)
    COMPILE_ET="${ac_cv_prog_COMPILE_ET}"
    localcomerr=yes
else
    COMPILE_ET="\$(top_builddir)/lib/com_err/compile_et"
    DIR_com_err="com_err"
    LIB_com_err="\$(top_builddir)/lib/com_err/libcom_err.la"
    LIB_com_err_a="\$(top_builddir)/lib/com_err/.libs/libcom_err.a"
    LIB_com_err_so="\$(top_builddir)/lib/com_err/.libs/libcom_err.so"
    AC_MSG_NOTICE(Using our own com_err)
    localcomerr=yes
fi
AM_CONDITIONAL(COM_ERR, test "$localcomerr" = yes)dnl
AC_SUBST(COMPILE_ET)
AC_SUBST(DIR_com_err)
AC_SUBST(LIB_com_err)
AC_SUBST(LIB_com_err_a)
AC_SUBST(LIB_com_err_so)

])
@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d1 1
a1 1
dnl $Id$
@


1.2
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d1 1
a1 1
dnl $KTH: check-compile-et.m4,v 1.6 2001/09/02 17:08:48 assar Exp $
d9 2
d16 1
a16 1
error_table conf
d26 1
a26 1
  save_CPPFLAGS="${save_CPPFLAGS}"
d31 1
a31 1
  AC_TRY_RUN([
d35 7
a41 2
int main(){return (CONFTEST_CODE2 - CONFTEST_CODE1) != 127;}
  ], [krb_cv_compile_et="yes"],[CPPFLAGS="${save_CPPFLAGS}"])
d44 12
d59 3
a61 1
if test "${krb_cv_compile_et}" = "yes"; then
d66 1
a66 1
  AC_TRY_LINK([#include <com_err.h>],[
d69 3
a71 1
  ],[krb_cv_com_err="yes"],[krb_cv_com_err="no"; CPPFLAGS="${save_CPPFLAGS}"])
d87 10
d104 1
d106 2
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.4e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6.3
@
text
@d1 1
a1 1
dnl $KTH: check-compile-et.m4,v 1.7.2.1 2003/08/15 14:40:42 lha Exp $
a8 1
krb_cv_com_err_need_r=""
d14 1
a14 1
error_table test conf
d24 1
a24 1
  save_CPPFLAGS="${CPPFLAGS}"
d33 1
a33 5
int main(){
#ifndef ERROR_TABLE_BASE_conf
#error compile_et does not handle error_table N M
#endif
return (CONFTEST_CODE2 - CONFTEST_CODE1) != 127;}
a36 10
if test "${krb_cv_compile_et}" = "yes"; then
  AC_MSG_CHECKING(for if com_err needs to have a initialize_error_table_r)
  AC_EGREP_CPP(initialize_error_table_r,[#include "conftest_et.c"],
     [krb_cv_com_err_need_r="initialize_error_table_r(0,0,0,0);"])
  if test X"$krb_cv_com_err_need_r" = X ; then
    AC_MSG_RESULT(no)
  else
    AC_MSG_RESULT(yes)
  fi
fi
a47 1
    $krb_cv_com_err_need_r
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d1 1
a1 1
dnl $KTH: check-compile-et.m4,v 1.13 2005/04/30 13:13:53 lha Exp $
a9 1
krb_cv_compile_et_cross=no
d30 1
a30 1
  AC_RUN_IFELSE([
d39 1
a39 2
  ], [krb_cv_compile_et="yes"],[CPPFLAGS="${save_CPPFLAGS}"],
  [krb_cv_compile_et="yes" krb_cv_compile_et_cross=yes] )
d42 4
a45 4
if test "${krb_cv_compile_et}" = "yes" -a "${krb_cv_compile_et_cross}" = no; then
  AC_MSG_CHECKING([for if com_err generates a initialize_conf_error_table_r])
  AC_EGREP_CPP(initialize_conf_error_table_r,[#include "conftest_et.h"],
     [krb_cv_com_err_need_r="ok"])
a47 1
    krb_cv_compile_et=no
d55 1
a55 3
if test "${krb_cv_compile_et_cross}" = yes ; then
  krb_cv_com_err="cross"
elif test "${krb_cv_compile_et}" = "yes"; then
d60 1
a60 1
  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <com_err.h>]],[[
d63 2
a64 2
    initialize_error_table_r(0,0,0,0);
  ]])],[krb_cv_com_err="yes"],[krb_cv_com_err="no"; CPPFLAGS="${save_CPPFLAGS}"])
a79 6
elif test "${krb_cv_com_err}" = "cross"; then
    DIR_com_err="com_err"
    LIB_com_err="\$(top_builddir)/lib/com_err/libcom_err.la"
    LIB_com_err_a="\$(top_builddir)/lib/com_err/.libs/libcom_err.a"
    LIB_com_err_so="\$(top_builddir)/lib/com_err/.libs/libcom_err.so"
    AC_MSG_NOTICE(Using our own com_err with toolchain compile_et)
@


