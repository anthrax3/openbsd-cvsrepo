head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.04.22.10.01.20;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.17.18.45;	author hin;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.52.36;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.52.36;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.29.15.55.42;	author biorn;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.34.02;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@dnl
dnl $Id: aix.m4,v 1.3 2013/06/17 18:57:40 robert Exp $
dnl

AC_DEFUN([rk_AIX],[

aix=no
case "$host" in 
*-*-aix3*)
	aix=3
	;;
*-*-aix[[4-9]]*)
	aix=4
	;;
esac

AM_CONDITIONAL(AIX, test "$aix" != no)dnl
AM_CONDITIONAL(AIX4, test "$aix" = 4)dnl

AC_ARG_ENABLE(dynamic-afs,
	AS_HELP_STRING([--disable-dynamic-afs],
		[do not use loaded AFS library with AIX]))

if test "$aix" != no; then

	AC_DEFINE(NEED_QSORT, 1, [if your qsort is not a stable sort])

	if test "$enable_dynamic_afs" != no; then
		AC_REQUIRE([rk_DLOPEN])
		if test "$ac_cv_func_dlopen" = no; then
			AC_FIND_FUNC_NO_LIBS(loadquery, ld)
		fi
		if test "$ac_cv_func_dlopen" != no; then
			AIX_EXTRA_KAFS='$(LIB_dlopen)'
		elif test "$ac_cv_func_loadquery" != no; then
			AIX_EXTRA_KAFS='$(LIB_loadquery)'
		else
			AC_MSG_NOTICE([not using dynloaded AFS library])
			AIX_EXTRA_KAFS=
			enable_dynamic_afs=no
		fi
	else
		AIX_EXTRA_KAFS=
	fi
fi

AM_CONDITIONAL(AIX_DYNAMIC_AFS, test "$enable_dynamic_afs" != no)dnl
AC_SUBST(AIX_EXTRA_KAFS)dnl

if test "$aix" != no; then
	AC_DEFINE([_ALL_SOURCE],1,[Required for functional/sane headers on AIX])
fi

AH_BOTTOM([#if _AIX
/* XXX this is gross, but kills about a gazillion warnings */
struct ether_addr;
struct sockaddr;
struct sockaddr_dl;
struct sockaddr_in;
#endif])

])
@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d2 1
a2 1
dnl $Id$
@


1.2
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d2 1
a2 1
dnl $KTH: aix.m4,v 1.5 2000/11/05 17:15:46 joda Exp $
d5 2
a6 1
AC_DEFUN(KRB_AIX,[
d12 1
a12 1
*-*-aix4*)
d16 1
d18 1
a18 3
AM_CONDITIONAL(AIX4, test "$aix" = 4)
aix_dynamic_afs=yes
AM_CONDITIONAL(AIX_DYNAMIC_AFS, test "$aix_dynamic_afs" = yes)dnl
d20 3
a22 1
AC_FIND_FUNC_NO_LIBS(dlopen, dl)
d25 14
a38 2
	if test "$aix_dynamic_afs" = yes; then
		if test "$ac_cv_funclib_dlopen" = yes; then
d40 1
a40 4
		elif test "$ac_cv_funclib_dlopen" != no; then
			AIX_EXTRA_KAFS="$ac_cv_funclib_dlopen"
		else
			AIX_EXTRA_KAFS=-lld
d47 1
a47 1
AM_CONDITIONAL(HAVE_DLOPEN, test "$ac_cv_funclib_dlopen" != no)dnl
d50 13
a62 1
])@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6.3
@
text
@d2 1
a2 1
dnl $KTH: aix.m4,v 1.9.6.1 2004/04/01 07:27:32 joda Exp $
d5 1
a5 2
AC_DEFUN([rk_AIX],[

d11 1
a11 1
*-*-aix4*|*-*-aix5*)
a14 1

d17 2
d20 1
a20 4

AC_ARG_ENABLE(dynamic-afs,
	AC_HELP_STRING([--disable-dynamic-afs],
		[do not use loaded AFS library with AIX]))
d23 5
a27 9
	if test "$enable_dynamic_afs" != no; then
		AC_REQUIRE([rk_DLOPEN])
		if test "$ac_cv_func_dlopen" = no; then
			AC_FIND_FUNC_NO_LIBS(loadquery, ld)
		fi
		if test "$ac_cv_func_dlopen" != no; then
			AIX_EXTRA_KAFS='$(LIB_dlopen)'
		elif test "$ac_cv_func_loadquery" != no; then
			AIX_EXTRA_KAFS='$(LIB_loadquery)'
d29 1
a29 3
			AC_MSG_NOTICE([not using dynloaded AFS library])
			AIX_EXTRA_KAFS=
			enable_dynamic_afs=no
d36 1
a36 1
AM_CONDITIONAL(AIX_DYNAMIC_AFS, test "$enable_dynamic_afs" != no)dnl
d39 1
a39 10
AH_BOTTOM([#if _AIX
#define _ALL_SOURCE
/* XXX this is gross, but kills about a gazillion warnings */
struct ether_addr;
struct sockaddr;
struct sockaddr_dl;
struct sockaddr_in;
#endif])

])
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
dnl $KTH: aix.m4,v 1.11 2004/08/25 14:13:57 joda Exp $
d22 1
a22 1
	AS_HELP_STRING([--disable-dynamic-afs],
@


