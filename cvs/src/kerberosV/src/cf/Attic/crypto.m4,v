head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.2
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.04.22.10.01.20;	author reyk;	state dead;
branches;
next	1.4;

1.4
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.17.18.45;	author hin;	state dead;
branches;
next	1.2;

1.2
date	2002.05.15.02.41.36;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.06.08.56.27;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.02.06.08.56.27;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.29.15.55.42;	author biorn;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.34.02;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@dnl $Id: crypto.m4,v 1.4 2013/06/17 18:57:40 robert Exp $
dnl
dnl test for crypto libraries:
dnl - libcrypto (from openssl)
dnl - own-built libhcrypto

m4_define([test_headers], [
		#undef KRB5 /* makes md4.h et al unhappy */
		#ifdef HAVE_OPENSSL
		#ifdef HAVE_SYS_TYPES_H
		#include <sys/types.h>
		#endif
		#include <openssl/evp.h>
		#include <openssl/md4.h>
		#include <openssl/md5.h>
		#include <openssl/sha.h>
		#include <openssl/des.h>
		#include <openssl/rc4.h>
		#include <openssl/aes.h>
		#include <openssl/ec.h>
		#include <openssl/engine.h>
		#include <openssl/ui.h>
		#include <openssl/rand.h>
		#include <openssl/hmac.h>
		#include <openssl/pkcs12.h>
		#else
		#include <hcrypto/evp.h>
		#include <hcrypto/md4.h>
		#include <hcrypto/md5.h>
		#include <hcrypto/sha.h>
		#include <hcrypto/des.h>
		#include <hcrypto/rc4.h>
		#include <hcrypto/aes.h>
		#include <hcrypto/engine.h>
		#include <hcrypto/hmac.h>
		#include <hcrypto/pkcs12.h>
		#endif
		])
m4_define([test_body], [
		void *schedule = 0;
		EVP_MD_CTX mdctx;

		EVP_md4();
		EVP_md5();
		EVP_sha1();
		EVP_sha256();

		EVP_MD_CTX_init(&mdctx);
		EVP_DigestInit_ex(&mdctx, EVP_sha1(), (ENGINE *)0);
		EVP_CIPHER_iv_length(((EVP_CIPHER*)0));
		UI_UTIL_read_pw_string(0,0,0,0);
		RAND_status();
		#ifdef HAVE_OPENSSL
		EC_KEY_new();
		#endif

		OpenSSL_add_all_algorithms();
		AES_encrypt(0,0,0);
		DES_cbc_encrypt(0, 0, 0, schedule, 0, 0);
		RC4(0, 0, 0, 0);])


AC_DEFUN([KRB_CRYPTO],[
crypto_lib=unknown
AC_WITH_ALL([openssl])

DIR_hcrypto=

AC_MSG_CHECKING([for crypto library])

openssl=no

if test "$crypto_lib" = "unknown" -a "$with_krb4" != "no"; then
	save_CPPFLAGS="$CPPFLAGS"
	save_LIBS="$LIBS"

	cdirs= clibs=
	for i in $LIB_krb4; do
		case "$i" in
		-L*) cdirs="$cdirs $i";;
		-l*) clibs="$clibs $i";;
		esac
	done

	ires=
	for i in $INCLUDE_krb4; do
		CFLAGS="-DHAVE_OPENSSL $i $save_CFLAGS"
		for j in $cdirs; do
			for k in $clibs; do
				LIBS="$j $k $save_LIBS"
				AC_LINK_IFELSE([AC_LANG_PROGRAM([test_headers],
						[test_body])],
					[openssl=yes ires="$i" lres="$j $k"; break 3])
			done
		done
		CFLAGS="$i $save_CFLAGS"
		for j in $cdirs; do
			for k in $clibs; do
				LIBS="$j $k $save_LIBS"
				AC_LINK_IFELSE([AC_LANG_PROGRAM([test_headers],[test_body])],
					[openssl=no ires="$i" lres="$j $k"; break 3])
			done
		done
	done
		
	CFLAGS="$save_CFLAGS"
	LIBS="$save_LIBS"
	if test "$ires" -a "$lres"; then
		INCLUDE_hcrypto="$ires"
		LIB_hcrypto="$lres"
		crypto_lib=krb4
		AC_MSG_RESULT([same as krb4])
		LIB_hcrypto_a='$(LIB_hcrypto)'
		LIB_hcrypto_so='$(LIB_hcrypto)'
		LIB_hcrypto_appl='$(LIB_hcrypto)'
	fi
fi

if test "$crypto_lib" = "unknown" -a "$with_openssl" != "no"; then
	save_CFLAGS="$CFLAGS"
	save_LIBS="$LIBS"
	INCLUDE_hcrypto=
	LIB_hcrypto=
	if test "$with_openssl_include" != ""; then
		INCLUDE_hcrypto="-I${with_openssl_include}"
	fi
	if test "$with_openssl_lib" != ""; then
		LIB_hcrypto="-L${with_openssl_lib}"
	fi
	CFLAGS="-DHAVE_OPENSSL ${INCLUDE_hcrypto} ${CFLAGS}"
	saved_LIB_hcrypto="$LIB_hcrypto"
	for lres in "" "-ldl" "-lnsl -lsocket" "-lnsl -lsocket -ldl"; do
		LIB_hcrypto="${saved_LIB_hcrypto} -lcrypto $lres"
		LIB_hcrypto_a="$LIB_hcrypto"
		LIB_hcrypto_so="$LIB_hcrypto"
		LIB_hcrypto_appl="$LIB_hcrypto"
		LIBS="${LIBS} ${LIB_hcrypto}"
		AC_LINK_IFELSE([AC_LANG_PROGRAM([test_headers],[test_body])], [
			crypto_lib=libcrypto openssl=yes
			AC_MSG_RESULT([libcrypto])
		])
		if test "$crypto_lib" = libcrypto ; then
			break;
		fi
	done
	CFLAGS="$save_CFLAGS"
	LIBS="$save_LIBS"
fi

if test "$crypto_lib" = "unknown"; then

  DIR_hcrypto='hcrypto'
  LIB_hcrypto='$(top_builddir)/lib/hcrypto/libhcrypto.la'
  LIB_hcrypto_a='$(top_builddir)/lib/hcrypto/.libs/libhcrypto.a'
  LIB_hcrypto_so='$(top_builddir)/lib/hcrypto/.libs/libhcrypto.so'
  LIB_hcrypto_appl="-lhcrypto"

  AC_MSG_RESULT([included libhcrypto])

fi

if test "$with_krb4" != no -a "$crypto_lib" != krb4; then
	AC_MSG_ERROR([the crypto library used by krb4 lacks features
required by Kerberos 5; to continue, you need to install a newer 
Kerberos 4 or configure --without-krb4])
fi

if test "$openssl" = "yes"; then
  AC_DEFINE([HAVE_OPENSSL], 1, [define to use openssl's libcrypto])
fi
AM_CONDITIONAL(HAVE_OPENSSL, test "$openssl" = yes)dnl

AC_SUBST(DIR_hcrypto)
AC_SUBST(INCLUDE_hcrypto)
AC_SUBST(LIB_hcrypto)
AC_SUBST(LIB_hcrypto_a)
AC_SUBST(LIB_hcrypto_so)
AC_SUBST(LIB_hcrypto_appl)
])
@


1.4
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d1 1
a1 1
dnl $Id$
@


1.3
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d1 1
a1 1
dnl $KTH: crypto.m4,v 1.7 2001/08/29 17:02:48 assar Exp $
d5 57
a61 2
dnl - libdes (from krb4)
dnl - own-built libdes
d67 1
a67 1
DIR_des=
d71 5
a75 1
if test "$crypto_lib" = "unknown" -a "$with_openssl" != "no"; then
d77 40
a116 40
  save_CPPFLAGS="$CPPFLAGS"
  save_LIBS="$LIBS"
  INCLUDE_des=
  LIB_des=
  if test "$with_openssl_include" != ""; then
    INCLUDE_des="-I${with_openssl}/include"
  fi
  if test "$with_openssl_lib" != ""; then
    LIB_des="-L${with_openssl}/lib"
  fi
  CPPFLAGS="${INCLUDE_des} ${CPPFLAGS}"
  LIB_des="${LIB_des} -lcrypto"
  LIB_des_a="$LIB_des"
  LIB_des_so="$LIB_des"
  LIB_des_appl="$LIB_des"
  LIBS="${LIBS} ${LIB_des}"
  AC_TRY_LINK([
  #include <openssl/md4.h>
  #include <openssl/md5.h>
  #include <openssl/sha.h>
  #include <des.h>
  #include <openssl/rc4.h>
  ],
  [
    MD4_CTX md4;
    MD5_CTX md5;
    SHA_CTX sha1;

    MD4_Init(&md4);
    MD5_Init(&md5);
    SHA1_Init(&sha1);

    des_cbc_encrypt(0, 0, 0, 0, 0, 0);
    RC4(0, 0, 0, 0);
  ], [
  crypto_lib=libcrypto
  AC_DEFINE([HAVE_OPENSSL], 1, [define to use openssl's libcrypto])
  AC_MSG_RESULT([libcrypto])])
  CPPFLAGS="$save_CPPFLAGS"
  LIBS="$save_LIBS"
d119 29
a147 39
if test "$crypto_lib" = "unknown" -a "$with_krb4" != "no"; then

  save_CPPFLAGS="$CPPFLAGS"
  save_LIBS="$LIBS"
  INCLUDE_des="${INCLUDE_krb4}"
  LIB_des=
  if test "$krb4_libdir"; then
    LIB_des="-L${krb4_libdir}"
  fi
  LIB_des="${LIB_des} -ldes"
  CPPFLAGS="${CPPFLAGS} ${INCLUDE_des}"
  LIBS="${LIBS} ${LIB_des}"
  LIB_des_a="$LIB_des"
  LIB_des_so="$LIB_des"
  LIB_des_appl="$LIB_des"
  LIBS="${LIBS} ${LIB_des}"
  AC_TRY_LINK([
  #undef KRB5 /* makes md4.h et al unhappy */
  #define KRB4
  #include <md4.h>
  #include <md5.h>
  #include <sha.h>
  #include <des.h>
  #include <rc4.h>
  ],
  [
    MD4_CTX md4;
    MD5_CTX md5;
    SHA_CTX sha1;

    MD4_Init(&md4);
    MD5_Init(&md5);
    SHA1_Init(&sha1);

    des_cbc_encrypt(0, 0, 0, 0, 0, 0);
    RC4(0, 0, 0, 0);
  ], [crypto_lib=krb4; AC_MSG_RESULT([krb4's libdes])])
  CPPFLAGS="$save_CPPFLAGS"
  LIBS="$save_LIBS"
d152 5
a156 5
  DIR_des='des'
  LIB_des='$(top_builddir)/lib/des/libdes.la'
  LIB_des_a='$(top_builddir)/lib/des/.libs/libdes.a'
  LIB_des_so='$(top_builddir)/lib/des/.libs/libdes.so'
  LIB_des_appl="-ldes"
d158 3
a160 1
  AC_MSG_RESULT([included libdes])
d162 8
d171 1
d173 6
a178 6
AC_SUBST(DIR_des)
AC_SUBST(INCLUDE_des)
AC_SUBST(LIB_des)
AC_SUBST(LIB_des_a)
AC_SUBST(LIB_des_so)
AC_SUBST(LIB_des_appl)
@


1.2
log
@basic change to make kerbV build with OpenSSL 0.9.7 -
since the newer OpenSSL's wish to depreciate the libdes
api, and now do not have symbol conflicts with libdes,
we change the build here so that we use the libdes <des.h>
and use libdes rather than libcrypto (this is the same thing
kerberosIV uses)
@
text
@@


1.1
log
@Initial revision
@
text
@d38 1
a38 1
  #include <openssl/des.h>
@


1.1.1.1
log
@Import of heimdal-0.4e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6.3
@
text
@d1 1
a1 1
dnl $KTH: crypto.m4,v 1.16.2.1 2003/05/05 20:08:32 joda Exp $
a7 49
m4_define([test_headers], [
		#undef KRB5 /* makes md4.h et al unhappy */
		#ifdef HAVE_OPENSSL
		#include <openssl/md4.h>
		#include <openssl/md5.h>
		#include <openssl/sha.h>
		#define OPENSSL_DES_LIBDES_COMPATIBILITY
		#include <openssl/des.h>
		#include <openssl/rc4.h>
		#include <openssl/rand.h>
		#else
		#include <md4.h>
		#include <md5.h>
		#include <sha.h>
		#include <des.h>
		#include <rc4.h>
		#endif
		#ifdef OLD_HASH_NAMES
		typedef struct md4 MD4_CTX;
		#define MD4_Init(C) md4_init((C))
		#define MD4_Update(C, D, L) md4_update((C), (D), (L))
		#define MD4_Final(D, C) md4_finito((C), (D))
		typedef struct md5 MD5_CTX;
		#define MD5_Init(C) md5_init((C))
		#define MD5_Update(C, D, L) md5_update((C), (D), (L))
		#define MD5_Final(D, C) md5_finito((C), (D))
		typedef struct sha SHA_CTX;
		#define SHA1_Init(C) sha_init((C))
		#define SHA1_Update(C, D, L) sha_update((C), (D), (L))
		#define SHA1_Final(D, C) sha_finito((C), (D))
		#endif
		])
m4_define([test_body], [
		void *schedule = 0;
		MD4_CTX md4;
		MD5_CTX md5;
		SHA_CTX sha1;

		MD4_Init(&md4);
		MD5_Init(&md5);
		SHA1_Init(&sha1);
		#ifdef HAVE_OPENSSL
		RAND_status();
		#endif

		des_cbc_encrypt(0, 0, 0, schedule, 0, 0);
		RC4(0, 0, 0, 0);])


d16 43
a58 2
openssl=no
old_hash=no
a60 51
	save_CPPFLAGS="$CPPFLAGS"
	save_LIBS="$LIBS"

	cdirs= clibs=
	for i in $LIB_krb4; do
		case "$i" in
		-L*) cdirs="$cdirs $i";;
		-l*) clibs="$clibs $i";;
		esac
	done

	ires=
	for i in $INCLUDE_krb4; do
		CFLAGS="-DHAVE_OPENSSL $i $save_CFLAGS"
		for j in $cdirs; do
			for k in $clibs; do
				LIBS="$j $k $save_LIBS"
				AC_TRY_LINK(test_headers, test_body,
					openssl=yes ires="$i" lres="$j $k"; break 3)
			done
		done
		CFLAGS="$i $save_CFLAGS"
		for j in $cdirs; do
			for k in $clibs; do
				LIBS="$j $k $save_LIBS"
				AC_TRY_LINK(test_headers, test_body,
					openssl=no ires="$i" lres="$j $k"; break 3)
			done
		done
		CFLAGS="-DHAVE_OLD_HASH_NAMES $i $save_CFLAGS"
		for j in $cdirs; do
			for k in $clibs; do
				LIBS="$j $k $save_LIBS"
				AC_TRY_LINK(test_headers, test_body,
					openssl=no ires="$i" lres="$j $k"; break 3)
			done
		done
	done
		
	CFLAGS="$save_CFLAGS"
	LIBS="$save_LIBS"
	if test "$ires" -a "$lres"; then
		INCLUDE_des="$ires"
		LIB_des="$lres"
		crypto_lib=krb4
		AC_MSG_RESULT([same as krb4])
		LIB_des_a='$(LIB_des)'
		LIB_des_so='$(LIB_des)'
		LIB_des_appl='$(LIB_des)'
	fi
fi
d62 37
a98 29
if test "$crypto_lib" = "unknown" -a "$with_openssl" != "no"; then
	save_CFLAGS="$CFLAGS"
	save_LIBS="$LIBS"
	INCLUDE_des=
	LIB_des=
	if test "$with_openssl_include" != ""; then
		INCLUDE_des="-I${with_openssl_include}"
	fi
	if test "$with_openssl_lib" != ""; then
		LIB_des="-L${with_openssl_lib}"
	fi
	CFLAGS="-DHAVE_OPENSSL ${INCLUDE_des} ${CFLAGS}"
	saved_LIB_des="$LIB_des"
	for lres in "" "-lnsl -lsocket"; do
		LIB_des="${saved_LIB_des} -lcrypto $lres"
		LIB_des_a="$LIB_des"
		LIB_des_so="$LIB_des"
		LIB_des_appl="$LIB_des"
		LIBS="${LIBS} ${LIB_des}"
		AC_TRY_LINK(test_headers, test_body, [
			crypto_lib=libcrypto openssl=yes
			AC_MSG_RESULT([libcrypto])
		])
		if test "$crypto_lib" = libcrypto ; then
			break;
		fi
	done
	CFLAGS="$save_CFLAGS"
	LIBS="$save_LIBS"
a111 15

if test "$with_krb4" != no -a "$crypto_lib" != krb4; then
	AC_MSG_ERROR([the crypto library used by krb4 lacks features
required by Kerberos 5; to continue, you need to install a newer 
Kerberos 4 or configure --without-krb4])
fi

if test "$openssl" = "yes"; then
  AC_DEFINE([HAVE_OPENSSL], 1, [define to use openssl's libcrypto])
fi
if test "$old_hash" = yes; then
  AC_DEFINE([HAVE_OLD_HASH_NAMES], 1,
		[define if you have hash functions like md4_finito()])
fi
AM_CONDITIONAL(HAVE_OPENSSL, test "$openssl" = yes)dnl
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d1 1
a1 1
dnl $KTH: crypto.m4,v 1.20.4.1 2005/08/12 07:40:53 lha Exp $
a10 3
		#ifdef HAVE_SYS_TYPES_H
		#include <sys/types.h>
		#endif
d14 1
a16 2
		#include <openssl/aes.h>
		#include <openssl/ui.h>
a23 1
		#include <aes.h>
a50 1
		UI_UTIL_read_pw_string(0,0,0,0);
d53 1
a53 2
		AES_encrypt(0,0,0);
		DES_cbc_encrypt(0, 0, 0, schedule, 0, 0);
d86 2
a87 3
				AC_LINK_IFELSE([AC_LANG_PROGRAM([test_headers],
						[test_body])],
					[openssl=yes ires="$i" lres="$j $k"; break 3])
d94 2
a95 2
				AC_LINK_IFELSE([AC_LANG_PROGRAM([test_headers],[test_body])],
					[openssl=no ires="$i" lres="$j $k"; break 3])
d102 2
a103 2
				AC_LINK_IFELSE([AC_LANG_PROGRAM([test_headers],[test_body])],
					[openssl=no ires="$i" lres="$j $k"; break 3])
d140 1
a140 1
		AC_LINK_IFELSE([AC_LANG_PROGRAM([test_headers],[test_body])], [
@


