head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.4
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.04.22.10.01.20;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.17.18.45;	author hin;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.52.37;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.52.37;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.56.27;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.29.15.55.42;	author biorn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.34.02;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@dnl $Id: db.m4,v 1.3 2013/06/17 18:57:40 robert Exp $
dnl
dnl tests for various db libraries
dnl

AC_DEFUN([rk_DB],[
AC_ARG_WITH(berkeley-db,
                       AS_HELP_STRING([--with-berkeley-db],
                                      [enable support for berkeley db @@<:@@default=check@@:>@@]),
                       [],
                       [with_berkeley_db=check])

dbheader=""
AC_ARG_WITH(berkeley-db-include,
                       AS_HELP_STRING([--with-berkeley-db-include=dir],
		                      [use berkeley-db headers in dir]),
		       [dbheader=$withval],
		       [with_berkeley_db_include=check])

AC_ARG_ENABLE(ndbm-db,
                       AS_HELP_STRING([--disable-ndbm-db],
                                      [if you don't want ndbm db]),[
])

have_ndbm=no
db_type=unknown

AS_IF([test "x$with_berkeley_db" != xno],
  [AS_IF([test "x$with_berkeley_db_include" != xcheck],
    [AC_CHECK_HEADERS(["$dbheader/db.h"],
                   [AC_SUBST([DBHEADER], [$dbheader])
		    AC_DEFINE([HAVE_DBHEADER], [1],
		                      [Define if you have user supplied header location])
	           ],
		   [if test "x$with_berkeley_db_include" != xcheck; then
		     AC_MSG_FAILURE(
		       [--with-berkeley-db-include was given but include test failed])
		    fi
		   ])],
    [AC_CHECK_HEADERS([					\
	           db5/db.h				\
	           db4/db.h				\
	           db3/db.h				\
	           db.h					\
    ])])

dnl db_create is used by db3 and db4 and db5

  AC_FIND_FUNC_NO_LIBS(db_create, [$dbheader] db5 db4 db3 db, [
  #include <stdio.h>
  #ifdef HAVE_DBHEADER
  #include <$dbheader/db.h>
  #elif HAVE_DB5_DB_H
  #include <db5/db.h>
  #elif HAVE_DB4_DB_H
  #include <db4/db.h>
  #elif defined(HAVE_DB3_DB_H)
  #include <db3/db.h>
  #else
  #include <db.h>
  #endif
  ],[NULL, NULL, 0])

  if test "$ac_cv_func_db_create" = "yes"; then
    db_type=db3
    if test "$ac_cv_funclib_db_create" != "yes"; then
      DBLIB="$ac_cv_funclib_db_create"
    else
      DBLIB=""
    fi
    AC_DEFINE(HAVE_DB3, 1, [define if you have a berkeley db3/4/5 library])
  fi

dnl dbopen is used by db1/db2

  AC_FIND_FUNC_NO_LIBS(dbopen, db2 db, [
  #include <stdio.h>
  #if defined(HAVE_DB2_DB_H)
  #include <db2/db.h>
  #elif defined(HAVE_DB_H)
  #include <db.h>
  #else
  #error no db.h
  #endif
  ],[NULL, 0, 0, 0, NULL])

  if test "$ac_cv_func_dbopen" = "yes"; then
    db_type=db1
    if test "$ac_cv_funclib_dbopen" != "yes"; then
      DBLIB="$ac_cv_funclib_dbopen"
    else
      DBLIB=""
    fi
    AC_DEFINE(HAVE_DB1, 1, [define if you have a berkeley db1/2 library])
  fi

dnl test for ndbm compatability

  if test "$ac_cv_func_dbm_firstkey" != yes; then
    AC_FIND_FUNC_NO_LIBS2(dbm_firstkey, $ac_cv_funclib_dbopen $ac_cv_funclib_db_create, [
    #include <stdio.h>
    #define DB_DBM_HSEARCH 1
    #include <db.h>
    DBM *dbm;
    ],[NULL])
  
    if test "$ac_cv_func_dbm_firstkey" = "yes"; then
      if test "$ac_cv_funclib_dbm_firstkey" != "yes"; then
        LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
      else
        LIB_NDBM=""
      fi
      AC_DEFINE(HAVE_DB_NDBM, 1, [define if you have ndbm compat in db])
      AC_DEFINE(HAVE_NEW_DB, 1, [Define if NDBM really is DB (creates files *.db)])
    else
      $as_unset ac_cv_func_dbm_firstkey
      $as_unset ac_cv_funclib_dbm_firstkey
    fi
  fi

]) # fi berkeley db

if test "$enable_ndbm_db" != "no"; then

  if test "$db_type" = "unknown" -o "$ac_cv_func_dbm_firstkey" = ""; then

    AC_CHECK_HEADERS([				\
  	dbm.h					\
  	ndbm.h					\
    ])
  
    AC_FIND_FUNC_NO_LIBS(dbm_firstkey, ndbm, [
    #include <stdio.h>
    #if defined(HAVE_NDBM_H)
    #include <ndbm.h>
    #elif defined(HAVE_DBM_H)
    #include <dbm.h>
    #endif
    DBM *dbm;
    ],[NULL])
  
    if test "$ac_cv_func_dbm_firstkey" = "yes"; then
      if test "$ac_cv_funclib_dbm_firstkey" != "yes"; then
        LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
      else
        LIB_NDBM=""
      fi
      AC_DEFINE(HAVE_NDBM, 1, [define if you have a ndbm library])dnl
      have_ndbm=yes
      if test "$db_type" = "unknown"; then
        db_type=ndbm
        DBLIB="$LIB_NDBM"
      fi
    else
  
      $as_unset ac_cv_func_dbm_firstkey
      $as_unset ac_cv_funclib_dbm_firstkey
  
      AC_CHECK_HEADERS([				\
  	  gdbm/ndbm.h				\
      ])
  
      AC_FIND_FUNC_NO_LIBS(dbm_firstkey, gdbm, [
      #include <stdio.h>
      #include <gdbm/ndbm.h>
      DBM *dbm;
      ],[NULL])
  
      if test "$ac_cv_func_dbm_firstkey" = "yes"; then
        if test "$ac_cv_funclib_dbm_firstkey" != "yes"; then
  	LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
        else
  	LIB_NDBM=""
        fi
        AC_DEFINE(HAVE_NDBM, 1, [define if you have a ndbm library])dnl
        have_ndbm=yes
        if test "$db_type" = "unknown"; then
  	db_type=ndbm
  	DBLIB="$LIB_NDBM"
        fi
      fi
    fi
  fi #enable_ndbm_db
fi # unknown

if test "$have_ndbm" = "yes"; then
  AC_MSG_CHECKING([if ndbm is implemented with db])
  AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <unistd.h>
#include <fcntl.h>
#if defined(HAVE_GDBM_NDBM_H)
#include <gdbm/ndbm.h>
#elif defined(HAVE_NDBM_H)
#include <ndbm.h>
#elif defined(HAVE_DBM_H)
#include <dbm.h>
#endif
int main(int argc, char **argv)
{
  DBM *d;

  d = dbm_open("conftest", O_RDWR | O_CREAT, 0666);
  if (d == NULL)
    return 1;
  dbm_close(d);
  return 0;
}]])],[
    if test -f conftest.db; then
      AC_MSG_RESULT([yes])
      AC_DEFINE(HAVE_NEW_DB, 1, [Define if NDBM really is DB (creates files *.db)])
    else
      AC_MSG_RESULT([no])
    fi],[AC_MSG_RESULT([no])],[AC_MSG_RESULT([no-cross])])
fi

AM_CONDITIONAL(HAVE_DB1, test "$db_type" = db1)dnl
AM_CONDITIONAL(HAVE_DB3, test "$db_type" = db3)dnl
AM_CONDITIONAL(HAVE_NDBM, test "$db_type" = ndbm)dnl
AM_CONDITIONAL(HAVE_DBHEADER, test "$dbheader" != "")dnl

## it's probably not correct to include LDFLAGS here, but we might
## need it, for now just add any possible -L
z=""
for i in $LDFLAGS; do
	case "$i" in
	-L*) z="$z $i";;
	esac
done
DBLIB="$z $DBLIB"
AC_SUBST(DBLIB)dnl
AC_SUBST(LIB_NDBM)dnl
])
@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d1 1
a1 1
dnl $Id$
@


1.2
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d1 1
a1 1
dnl $KTH: db.m4,v 1.1 2000/07/19 11:21:07 joda Exp $
d5 2
a6 1
AC_DEFUN([rk_DB],[berkeley_db=db
d8 15
a22 4
[  --without-berkeley-db   if you don't want berkeley db],[
if test "$withval" = no; then
	berkeley_db=""
fi
a23 6
if test "$berkeley_db"; then
  AC_CHECK_HEADERS([				\
	db.h					\
	db_185.h				\
  ])
fi
d25 172
a196 6
AC_FIND_FUNC_NO_LIBS2(dbopen, $berkeley_db, [
#include <stdio.h>
#if defined(HAVE_DB_185_H)
#include <db_185.h>
#elif defined(HAVE_DB_H)
#include <db.h>
d198 17
a214 1
],[NULL, 0, 0, 0, NULL])
d216 4
a219 2
AC_FIND_FUNC_NO_LIBS(dbm_firstkey, $berkeley_db gdbm ndbm)
AC_FIND_FUNC_NO_LIBS(db_create, $berkeley_db)
d221 9
a229 7
DBLIB="$LIB_dbopen"
if test "$LIB_dbopen" != "$LIB_db_create"; then
        DBLIB="$DBLIB $LIB_db_create"
fi
if test "$LIB_dbopen" != "$LIB_dbm_firstkey"; then
	DBLIB="$DBLIB $LIB_dbm_firstkey"
fi
d231 1
a231 1

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d1 1
a1 1
dnl $KTH: db.m4,v 1.4 2001/09/03 04:26:18 assar Exp $
a11 3

db_type=unknown

a12 1

d17 1
d19 20
a38 49
dnl db_create is used by db3

  AC_FIND_FUNC_NO_LIBS(db_create, $berkeley_db, [
  #include <stdio.h>
  #include <db.h>
  ],[NULL, NULL, 0])

  if test "$ac_cv_func_db_create" = "yes"; then
    db_type=db3
    if test "$ac_cv_funclib_db_create" != "yes"; then
      DBLIB="$ac_cv_funclib_db_create"
    else
      DBLIB=""
    fi
    AC_DEFINE(HAVE_DB3, 1, [define if you have a berkeley db3 library])
  else

dnl dbopen is used by db1/db2

    AC_FIND_FUNC_NO_LIBS(dbopen, $berkeley_db, [
    #include <stdio.h>
    #if defined(HAVE_DB_185_H)
    #include <db_185.h>
    #elif defined(HAVE_DB_H)
    #include <db.h>
    #else
    #error no db.h
    #endif
    ],[NULL, 0, 0, 0, NULL])

    if test "$ac_cv_func_dbopen" = "yes"; then
      db_type=db1
      if test "$ac_cv_funclib_dbopen" != "yes"; then
        DBLIB="$ac_cv_funclib_dbopen"
      else
        DBLIB=""
      fi
      AC_DEFINE(HAVE_DB1, 1, [define if you have a berkeley db1/2 library])
    fi
  fi

dnl test for ndbm compatability

  AC_FIND_FUNC_NO_LIBS2(dbm_firstkey, $ac_cv_funclib_dbopen $ac_cv_funclib_db_create, [
  #include <stdio.h>
  #define DB_DBM_HSEARCH 1
  #include <db.h>
  DBM *dbm;
  ],[NULL])
a39 76
  if test "$ac_cv_func_dbm_firstkey" = "yes"; then
    if test "$ac_cv_funclib_dbm_firstkey" != "yes"; then
      LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
    else
      LIB_NDBM=""
    fi
    AC_DEFINE(HAVE_DB_NDBM, 1, [define if you have ndbm compat in db])
  else
    $as_unset ac_cv_func_dbm_firstkey
    $as_unset ac_cv_funclib_dbm_firstkey
  fi

fi # berkeley db

if test "$db_type" = "unknown" -o "$ac_cv_func_dbm_firstkey" = ""; then

  AC_CHECK_HEADERS([				\
	dbm.h					\
	ndbm.h					\
  ])

  AC_FIND_FUNC_NO_LIBS(dbm_firstkey, ndbm, [
  #include <stdio.h>
  #if defined(HAVE_NDBM_H)
  #include <ndbm.h>
  #elif defined(HAVE_DBM_H)
  #include <dbm.h>
  #else
  #error no ndbm.h
  #endif
  DBM *dbm;
  ],[NULL])

  if test "$ac_cv_func_dbm_firstkey" = "yes"; then
    if test "$ac_cv_funclib_dbm_firstkey" != "yes"; then
      LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
    else
      LIB_NDBM=""
    fi
    AC_DEFINE(HAVE_NDBM, 1, [define if you have a ndbm library])dnl
    if test "$db_type" = "unknown"; then
      db_type=ndbm
      DBLIB="$LIB_NDBM"
    fi
  else

    $as_unset ac_cv_func_dbm_firstkey
    $as_unset ac_cv_funclib_dbm_firstkey

    AC_CHECK_HEADERS([				\
	  gdbm/ndbm.h				\
    ])

    AC_FIND_FUNC_NO_LIBS(dbm_firstkey, gdbm, [
    #include <stdio.h>
    #include <gdbm/ndbm.h>
    DBM *dbm;
    ],[NULL])

    if test "$ac_cv_func_dbm_firstkey" = "yes"; then
      if test "$ac_cv_funclib_dbm_firstkey" != "yes"; then
	LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
      else
	LIB_NDBM=""
      fi
      AC_DEFINE(HAVE_NDBM, 1, [define if you have a ndbm library])dnl
      if test "$db_type" = "unknown"; then
	db_type=ndbm
	DBLIB="$LIB_NDBM"
      fi
    fi
  fi

fi # unknown
AC_SUBST(DBLIB)dnl
AC_SUBST(LIB_NDBM)dnl
@


1.1.1.3
log
@Import of heimdal-0.6.3
@
text
@d1 1
a1 1
dnl $KTH: db.m4,v 1.9 2002/09/10 14:29:47 joda Exp $
d5 6
a10 4
AC_DEFUN([rk_DB],[
AC_ARG_ENABLE(berkeley-db,
                       AC_HELP_STRING([--disable-berkeley-db],
                                      [if you don't want berkeley db]),[
a12 1
have_ndbm=no
d15 1
a15 1
if test "$enable_berkeley_db" != no; then
a17 2
	db4/db.h				\
	db3/db.h				\
d22 1
a22 1
dnl db_create is used by db3 and db4
d24 1
a24 1
  AC_FIND_FUNC_NO_LIBS(db_create, db4 db3 db, [
a25 5
  #ifdef HAVE_DB4_DB_H
  #include <db4/db.h>
  #elif defined(HAVE_DB3_DB_H)
  #include <db3/db.h>
  #else
a26 1
  #endif
d36 1
a36 1
    AC_DEFINE(HAVE_DB3, 1, [define if you have a berkeley db3/4 library])
d41 1
a41 1
    AC_FIND_FUNC_NO_LIBS(dbopen, db2 db, [
d43 1
a43 3
    #if defined(HAVE_DB2_DB_H)
    #include <db2/db.h>
    #elif defined(HAVE_DB_185_H)
d65 10
a74 16
  if test "$ac_cv_func_dbm_firstkey" != yes; then
    AC_FIND_FUNC_NO_LIBS2(dbm_firstkey, $ac_cv_funclib_dbopen $ac_cv_funclib_db_create, [
    #include <stdio.h>
    #define DB_DBM_HSEARCH 1
    #include <db.h>
    DBM *dbm;
    ],[NULL])
  
    if test "$ac_cv_func_dbm_firstkey" = "yes"; then
      if test "$ac_cv_funclib_dbm_firstkey" != "yes"; then
        LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
      else
        LIB_NDBM=""
      fi
      AC_DEFINE(HAVE_DB_NDBM, 1, [define if you have ndbm compat in db])
      AC_DEFINE(HAVE_NEW_DB, 1, [Define if NDBM really is DB (creates files *.db)])
d76 1
a76 2
      $as_unset ac_cv_func_dbm_firstkey
      $as_unset ac_cv_funclib_dbm_firstkey
d78 4
d99 2
a111 1
    have_ndbm=yes
a137 1
      have_ndbm=yes
a145 44

if test "$have_ndbm" = "yes"; then
  AC_MSG_CHECKING([if ndbm is implemented with db])
  AC_TRY_RUN([
#include <unistd.h>
#include <fcntl.h>
#if defined(HAVE_GDBM_NDBM_H)
#include <gdbm/ndbm.h>
#elif defined(HAVE_NDBM_H)
#include <ndbm.h>
#elif defined(HAVE_DBM_H)
#include <dbm.h>
#endif
int main()
{
  DBM *d;

  d = dbm_open("conftest", O_RDWR | O_CREAT, 0666);
  if (d == NULL)
    return 1;
  dbm_close(d);
  return 0;
}],[
    if test -f conftest.db; then
      AC_MSG_RESULT([yes])
      AC_DEFINE(HAVE_NEW_DB, 1, [Define if NDBM really is DB (creates files *.db)])
    else
      AC_MSG_RESULT([no])
    fi],[AC_MSG_RESULT([no])])
fi

AM_CONDITIONAL(HAVE_DB1, test "$db_type" = db1)dnl
AM_CONDITIONAL(HAVE_DB3, test "$db_type" = db3)dnl
AM_CONDITIONAL(HAVE_NDBM, test "$db_type" = ndbm)dnl

## it's probably not correct to include LDFLAGS here, but we might
## need it, for now just add any possible -L
z=""
for i in $LDFLAGS; do
	case "$i" in
	-L*) z="$z $i";;
	esac
done
DBLIB="$z $DBLIB"
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d1 1
a1 1
dnl $KTH: db.m4,v 1.12 2005/06/10 23:58:37 lha Exp $
d7 1
a7 1
                       AS_HELP_STRING([--disable-berkeley-db],
a10 5
AC_ARG_ENABLE(ndbm-db,
                       AS_HELP_STRING([--disable-ndbm-db],
                                      [if you don't want ndbm db]),[
])

d98 6
a103 1
if test "$enable_ndbm_db" != "no"; then
d105 26
a130 1
  if test "$db_type" = "unknown" -o "$ac_cv_func_dbm_firstkey" = ""; then
d133 1
a133 2
  	dbm.h					\
  	ndbm.h					\
d135 2
a136 2
  
    AC_FIND_FUNC_NO_LIBS(dbm_firstkey, ndbm, [
d138 1
a138 5
    #if defined(HAVE_NDBM_H)
    #include <ndbm.h>
    #elif defined(HAVE_DBM_H)
    #include <dbm.h>
    #endif
d141 1
a141 1
  
d144 1
a144 1
        LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
d146 1
a146 1
        LIB_NDBM=""
d151 2
a152 30
        db_type=ndbm
        DBLIB="$LIB_NDBM"
      fi
    else
  
      $as_unset ac_cv_func_dbm_firstkey
      $as_unset ac_cv_funclib_dbm_firstkey
  
      AC_CHECK_HEADERS([				\
  	  gdbm/ndbm.h				\
      ])
  
      AC_FIND_FUNC_NO_LIBS(dbm_firstkey, gdbm, [
      #include <stdio.h>
      #include <gdbm/ndbm.h>
      DBM *dbm;
      ],[NULL])
  
      if test "$ac_cv_func_dbm_firstkey" = "yes"; then
        if test "$ac_cv_funclib_dbm_firstkey" != "yes"; then
  	LIB_NDBM="$ac_cv_funclib_dbm_firstkey"
        else
  	LIB_NDBM=""
        fi
        AC_DEFINE(HAVE_NDBM, 1, [define if you have a ndbm library])dnl
        have_ndbm=yes
        if test "$db_type" = "unknown"; then
  	db_type=ndbm
  	DBLIB="$LIB_NDBM"
        fi
d155 2
a156 1
  fi #enable_ndbm_db
d161 1
a161 1
  AC_RUN_IFELSE([AC_LANG_SOURCE([[
d180 1
a180 1
}]])],[
@


