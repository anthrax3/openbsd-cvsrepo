head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.1
	HEIMDAL_0_6RC1:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.04.22.10.01.18;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.19.11.36;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.17.18.43;	author hin;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.46.41;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.46.41;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.04.14.07.32.29;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1995 - 1999, 2003 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "ftpd_locl.h"

RCSID("$Id: kauth.c,v 1.3 2013/06/17 19:11:36 robert Exp $");

#if defined(KRB5)

int do_destroy_tickets = 1;
char *k5ccname;

#endif

#ifdef KRB5

static void
dest_cc(void)
{
    krb5_context context;
    krb5_error_code ret;
    krb5_ccache id;

    ret = krb5_init_context(&context);
    if (ret == 0) {
	if (k5ccname)
	    ret = krb5_cc_resolve(context, k5ccname, &id);
	else
	    ret = krb5_cc_default (context, &id);
	if (ret)
	    krb5_free_context(context);
    }
    if (ret == 0) {
	krb5_cc_destroy(context, id);
	krb5_free_context (context);
    }
}
#endif

#if defined(KRB5)

/*
 * Only destroy if we created the tickets
 */

void
cond_kdestroy(void)
{
    if (do_destroy_tickets) {
#if KRB5
	dest_cc();
#endif
	do_destroy_tickets = 0;
    }
    afsunlog();
}

void
kdestroy(void)
{
#if KRB5
    dest_cc();
#endif
    afsunlog();
    reply(200, "Tickets destroyed");
}


void
afslog(const char *cell, int quiet)
{
    if(k_hasafs()) {
#ifdef KRB5
	krb5_context context;
	krb5_error_code ret;
	krb5_ccache id;

	ret = krb5_init_context(&context);
	if (ret == 0) {
	    if (k5ccname)
		ret = krb5_cc_resolve(context, k5ccname, &id);
	    else
		ret = krb5_cc_default(context, &id);
	    if (ret)
		krb5_free_context(context);
	}
	if (ret == 0) {
	    krb5_afslog(context, id, cell, 0);
	    krb5_cc_close (context, id);
	    krb5_free_context (context);
	}
#endif
	if (!quiet)
	    reply(200, "afslog done");
    } else {
	if (!quiet)
	    reply(200, "no AFS present");
    }
}

void
afsunlog(void)
{
    if(k_hasafs())
	k_unlog();
}

#else
int ftpd_afslog_placeholder;
#endif /* KRB5 */
@


1.3
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@d36 1
a36 1
RCSID("$Id$");
@


1.2
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
d36 1
a36 1
RCSID("$KTH: kauth.c,v 1.25 1999/12/02 16:58:31 joda Exp $");
d38 4
a41 20
static KTEXT_ST cip;
static unsigned int lifetime;
static time_t local_time;

static krb_principal pr;

static int do_destroy_tickets = 1;

static int
save_tkt(const char *user,
	 const char *instance,
	 const char *realm,
	 const void *arg, 
	 key_proc_t key_proc,
	 KTEXT *cipp)
{
    local_time = time(0);
    memmove(&cip, *cipp, sizeof(cip));
    return -1;
}
a42 88
static int
store_ticket(KTEXT cip)
{
    char *ptr;
    des_cblock session;
    krb_principal sp;
    unsigned char kvno;
    KTEXT_ST tkt;
    int left = cip->length;
    int len;
    int kerror;
    
    ptr = (char *) cip->dat;

    /* extract session key */
    memmove(session, ptr, 8);
    ptr += 8;
    left -= 8;

    len = strnlen(ptr, left);
    if (len == left)
	return(INTK_BADPW);
    
    /* extract server's name */
    strlcpy(sp.name, ptr, sizeof(sp.name));
    ptr += len + 1;
    left -= len + 1;

    len = strnlen(ptr, left);
    if (len == left)
	return(INTK_BADPW);
    
    /* extract server's instance */
    strlcpy(sp.instance, ptr, sizeof(sp.instance));
    ptr += len + 1;
    left -= len + 1;

    len = strnlen(ptr, left);
    if (len == left)
	return(INTK_BADPW);
    
    /* extract server's realm */
    strlcpy(sp.realm, ptr, sizeof(sp.realm));
    ptr += len + 1;
    left -= len + 1;

    if(left < 3)
	return INTK_BADPW;
    /* extract ticket lifetime, server key version, ticket length */
    /* be sure to avoid sign extension on lifetime! */
    lifetime = (unsigned char) ptr[0];
    kvno = (unsigned char) ptr[1];
    tkt.length = (unsigned char) ptr[2];
    ptr += 3;
    left -= 3;
    
    if (tkt.length > left)
	return(INTK_BADPW);

    /* extract ticket itself */
    memmove(tkt.dat, ptr, tkt.length);
    ptr += tkt.length;
    left -= tkt.length;

    /* Here is where the time should be verified against the KDC.
     * Unfortunately everything is sent in host byte order (receiver
     * makes wrong) , and at this stage there is no way for us to know
     * which byteorder the KDC has. So we simply ignore the time,
     * there are no security risks with this, the only thing that can
     * happen is that we might receive a replayed ticket, which could
     * at most be useless.
     */
    
#if 0
    /* check KDC time stamp */
    {
	time_t kdc_time;

	memmove(&kdc_time, ptr, sizeof(kdc_time));
	if (swap_bytes) swap_u_long(kdc_time);

	ptr += 4;
    
	if (abs((int)(local_time - kdc_time)) > CLOCK_SKEW) {
	    return(RD_AP_TIME);		/* XXX should probably be better
					   code */
	}
    }
d45 1
a45 4
    /* initialize ticket cache */

    if (tf_create(TKT_FILE) != KSUCCESS)
	return(INTK_ERR);
d47 2
a48 16
    if (tf_put_pname(pr.name) != KSUCCESS ||
	tf_put_pinst(pr.instance) != KSUCCESS) {
	tf_close();
	return(INTK_ERR);
    }

    
    kerror = tf_save_cred(sp.name, sp.instance, sp.realm, session, 
			  lifetime, kvno, &tkt, local_time);
    tf_close();

    return(kerror);
}

void
kauth(char *principal, char *ticket)
d50 16
a65 6
    char *p;
    int ret;
  
    if(get_command_prot() != prot_private) {
	reply(500, "Request denied (bad protection level)");
	return;
a66 59
    ret = krb_parse_name(principal, &pr);
    if(ret){
	reply(500, "Bad principal: %s.", krb_get_err_text(ret));
	return;
    }
    if(pr.realm[0] == 0)
	krb_get_lrealm(pr.realm, 1);

    if(ticket){
	cip.length = base64_decode(ticket, &cip.dat);
	if(cip.length == -1){
	    reply(500, "Failed to decode data.");
	    return;
	}
	ret = store_ticket(&cip);
	if(ret){
	    reply(500, "Kerberos error: %s.", krb_get_err_text(ret));
	    memset(&cip, 0, sizeof(cip));
	    return;
	}
	do_destroy_tickets = 1;

	if(k_hasafs())
	    krb_afslog(0, 0);
	reply(200, "Tickets will be destroyed on exit.");
	return;
    }
    
    ret = krb_get_in_tkt (pr.name,
			  pr.instance,
			  pr.realm,
			  KRB_TICKET_GRANTING_TICKET,
			  pr.realm,
			  DEFAULT_TKT_LIFE,
			  NULL, save_tkt, NULL);
    if(ret != INTK_BADPW){
	reply(500, "Kerberos error: %s.", krb_get_err_text(ret));
	return;
    }
    if(base64_encode(cip.dat, cip.length, &p) < 0) {
	reply(500, "Out of memory while base64-encoding.");
	return;
    }
    reply(300, "P=%s T=%s", krb_unparse_name(&pr), p);
    free(p);
    memset(&cip, 0, sizeof(cip));
}


static char *
short_date(int32_t dp)
{
    char *cp;
    time_t t = (time_t)dp;

    if (t == (time_t)(-1L)) return "***  Never  *** ";
    cp = ctime(&t) + 4;
    cp[15] = '\0';
    return (cp);
d68 1
d70 1
a70 81
void
klist(void)
{
    int err;

    char *file = tkt_string();

    krb_principal pr;
    
    char buf1[128], buf2[128];
    int header = 1;
    CREDENTIALS c;

    

    err = tf_init(file, R_TKT_FIL);
    if(err != KSUCCESS){
	reply(500, "%s", krb_get_err_text(err));
	return;
    }
    tf_close();

    /* 
     * We must find the realm of the ticket file here before calling
     * tf_init because since the realm of the ticket file is not
     * really stored in the principal section of the file, the
     * routine we use must itself call tf_init and tf_close.
     */
    err = krb_get_tf_realm(file, pr.realm);
    if(err != KSUCCESS){
	reply(500, "%s", krb_get_err_text(err));
	return;
    }

    err = tf_init(file, R_TKT_FIL);
    if(err != KSUCCESS){
	reply(500, "%s", krb_get_err_text(err));
	return;
    }

    err = tf_get_pname(pr.name);
    if(err != KSUCCESS){
	reply(500, "%s", krb_get_err_text(err));
	return;
    }
    err = tf_get_pinst(pr.instance);
    if(err != KSUCCESS){
	reply(500, "%s", krb_get_err_text(err));
	return;
    }

    /* 
     * You may think that this is the obvious place to get the
     * realm of the ticket file, but it can't be done here as the
     * routine to do this must open the ticket file.  This is why 
     * it was done before tf_init.
     */
       
    lreply(200, "Ticket file: %s", tkt_string());

    lreply(200, "Principal: %s", krb_unparse_name(&pr));
    while ((err = tf_get_cred(&c)) == KSUCCESS) {
	if (header) {
	    lreply(200, "%-15s  %-15s  %s",
		   "  Issued", "  Expires", "  Principal (kvno)");
	    header = 0;
	}
	strlcpy(buf1, short_date(c.issue_date), sizeof(buf1));
	c.issue_date = krb_life_to_time(c.issue_date, c.lifetime);
	if (time(0) < (unsigned long) c.issue_date)
	    strlcpy(buf2, short_date(c.issue_date), sizeof(buf2));
	else
	    strlcpy(buf2, ">>> Expired <<< ", sizeof(buf2));
	lreply(200, "%s  %s  %s (%d)", buf1, buf2,
	       krb_unparse_name_long(c.service, c.instance, c.realm), c.kvno); 
    }
    if (header && err == EOF) {
	lreply(200, "No tickets in file.");
    }
    reply(200, " ");
}
d79 6
a84 2
    if (do_destroy_tickets)
	dest_tkt();
d91 3
a93 1
    dest_tkt();
a97 7
void
krbtkfile(const char *tkfile)
{
    do_destroy_tickets = 0;
    krb_set_tkt_string(tkfile);
    reply(200, "Using ticket file %s", tkfile);
}
d100 1
a100 1
afslog(const char *cell)
d103 22
a124 2
	krb_afslog(cell, 0);
	reply(200, "afslog done");
d126 2
a127 1
	reply(200, "no AFS present");
d137 4
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 1999, 2003 Kungliga Tekniska Högskolan
d36 1
a36 3
RCSID("$KTH: kauth.c,v 1.26 2003/05/07 11:47:23 lha Exp $");

#ifdef KRB4
a348 4
#endif /* KRB4 */

#if defined(KRB4) || defined(KRB5)

a352 18
#ifdef KRB5
	krb5_context context;
	krb5_error_code ret;
	krb5_ccache id;

	ret = krb5_init_context(&context);
	if (ret == 0) {
	    ret = krb5_cc_default(context, &id);
	    if (ret)
		krb5_free_context(context);
	}
	if (ret == 0) {
	    krb5_afslog(context, id, cell, 0);
	    krb5_cc_close (context, id);
	    krb5_free_context (context);
	}
#endif
#ifdef KRB4
a353 1
#endif
a365 4

#else
int ftpd_afslog_placeholder;
#endif /* KRB4 || KRB5 */
@

