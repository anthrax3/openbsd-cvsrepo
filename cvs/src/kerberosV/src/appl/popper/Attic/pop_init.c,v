head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.4
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.04.22.10.01.18;	author reyk;	state dead;
branches;
next	1.4;

1.4
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.17.18.43;	author hin;	state dead;
branches;
next	1.2;

1.2
date	2002.06.05.16.16.49;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.46.11;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.46.11;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.16.03;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.29.15.55.26;	author biorn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.32.16;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1989 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#include <popper.h>
RCSID("$Id: pop_init.c,v 1.4 2013/06/17 18:57:40 robert Exp $");


#if defined(KRB5)

static int
pop_net_read(POP *p, int fd, void *buf, size_t len)
{
#ifdef KRB5
    return krb5_net_read(p->context, &fd, buf, len);
#else
#error must define KRB5
#endif
}
#endif

static char *addr_log;

static void
pop_write_addr(POP *p, struct sockaddr *addr)
{
    char ts[32];
    char as[128];
    time_t t;
    FILE *f;
    if(addr_log == NULL)
	return;
    t = time(NULL);
    strftime(ts, sizeof(ts), "%Y%m%d%H%M%S", localtime(&t));
    if(inet_ntop (addr->sa_family, socket_get_address(addr),
		  as, sizeof(as)) == NULL) {
        pop_log(p, POP_PRIORITY, "failed to print address");
	return;
    }

    f = fopen(addr_log, "a");
    if(f == NULL) {
        pop_log(p, POP_PRIORITY, "failed to open address log (%s)", addr_log);
	return;
    }
    fprintf(f, "%s %s\n", as, ts);
    fclose(f);
}

#ifdef KRB5
static int
krb5_authenticate (POP *p, int s, u_char *buf, struct sockaddr *addr)
{
    krb5_error_code ret;
    krb5_auth_context auth_context = NULL;
    uint32_t len;
    krb5_ticket *ticket;
    char *server;

    if (memcmp (buf, "\x00\x00\x00\x13", 4) != 0)
	return -1;
    len = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3]);

    if (krb5_net_read(p->context, &s, buf, len) != len)
	return -1;
    if (len != sizeof(KRB5_SENDAUTH_VERSION)
	|| memcmp (buf, KRB5_SENDAUTH_VERSION, len) != 0)
	return -1;

    ret = krb5_recvauth (p->context,
			 &auth_context,
			 &s,
			 "KPOPV1.0",
			 NULL, /* let rd_req figure out what server to use */
			 KRB5_RECVAUTH_IGNORE_VERSION,
			 NULL,
			 &ticket);
    if (ret) {
	pop_log(p, POP_PRIORITY, "krb5_recvauth: %s",
		krb5_get_err_text(p->context, ret));
	return -1;
    }


    ret = krb5_unparse_name(p->context, ticket->server, &server);
    if(ret) {
	pop_log(p, POP_PRIORITY, "krb5_unparse_name: %s",
		krb5_get_err_text(p->context, ret));
	ret = -1;
	goto out;
    }
    /* does this make sense? */
    if(strncmp(server, "pop/", 4) != 0) {
	pop_log(p, POP_PRIORITY,
		"Got ticket for service `%s'", server);
	ret = -1;
	goto out;
    } else if(p->debug)
	pop_log(p, POP_DEBUG,
		"Accepted ticket for service `%s'", server);
    free(server);
 out:
    krb5_auth_con_free (p->context, auth_context);
    krb5_copy_principal (p->context, ticket->client, &p->principal);
    krb5_free_ticket (p->context, ticket);

    return ret;
}
#endif

static int
krb_authenticate(POP *p, struct sockaddr *addr)
{
#if defined(KRB5)
    u_char buf[BUFSIZ];

    if (pop_net_read (p, 0, buf, 4) != 4) {
	pop_msg(p, POP_FAILURE, "Reading four bytes: %s",
		strerror(errno));
	exit (1);
    }
    if (krb5_authenticate (p, 0, buf, addr) == 0){
	pop_write_addr(p, addr);
	p->version = 5;
	return POP_SUCCESS;
    }
#endif
    exit (1);

    return(POP_SUCCESS);
}

static int
plain_authenticate (POP *p, struct sockaddr *addr)
{
    return(POP_SUCCESS);
}

static int kerberos_flag;
static char *auth_str;
static int debug_flag;
static int interactive_flag;
static char *port_str;
static char *trace_file;
static int timeout;
static int help_flag;
static int version_flag;

static struct getargs args[] = {
#if defined(KRB5)
    { "kerberos", 'k', arg_flag, &kerberos_flag, "use kerberos" },
#endif
    { "auth-mode", 'a', arg_string, &auth_str, "required authentication",
      "plaintext"
#ifdef OTP
      "|otp"
#endif
#ifdef SASL
      "|sasl"
#endif
    },
    { "debug", 'd', arg_flag, &debug_flag },
    { "interactive", 'i', arg_flag, &interactive_flag, "create new socket" },
    { "port", 'p', arg_string, &port_str, "port to listen to", "port" },
    { "trace-file", 't', arg_string, &trace_file, "trace all command to file", "file" },
    { "timeout", 'T', arg_integer, &timeout, "timeout", "seconds" },
    { "address-log", 0, arg_string, &addr_log, "enable address log", "file" },
    { "help", 'h', arg_flag, &help_flag },
    { "version", 'v', arg_flag, &version_flag }
};

static int num_args = sizeof(args) / sizeof(args[0]);

/*
 *  init:   Start a Post Office Protocol session
 */

static int
pop_getportbyname(POP *p, const char *service,
		  const char *proto, short def)
{
#ifdef KRB5
    return krb5_getportbyname(p->context, service, proto, def);
#else
    return htons(default);
#endif
}

int
pop_init(POP *p,int argcount,char **argmessage)
{
    struct sockaddr_storage cs_ss;
    struct sockaddr *cs = (struct sockaddr *)&cs_ss;
    socklen_t		    len;
    char                *   trace_file_name = "/tmp/popper-trace";
    int			    portnum = 0;
    int 		    optind = 0;
    int			    error;

    /*  Initialize the POP parameter block */
    memset (p, 0, sizeof(POP));

    setprogname(argmessage[0]);

    /*  Save my name in a global variable */
    p->myname = (char*)getprogname();

    /*  Get the name of our host */
    gethostname(p->myhost,MaxHostNameLen);

#ifdef KRB5
    {
	krb5_error_code ret;

	ret = krb5_init_context (&p->context);
	if (ret)
	    errx (1, "krb5_init_context failed: %d", ret);

	krb5_openlog(p->context, p->myname, &p->logf);
	krb5_set_warn_dest(p->context, p->logf);
    }
#else
    /*  Open the log file */
    roken_openlog(p->myname,POP_LOGOPTS,POP_FACILITY);
#endif

    p->auth_level = AUTH_NONE;

    if(getarg(args, num_args, argcount, argmessage, &optind)){
	arg_printusage(args, num_args, NULL, "");
	exit(1);
    }
    if(help_flag){
	arg_printusage(args, num_args, NULL, "");
	exit(0);
    }
    if(version_flag){
	print_version(NULL);
	exit(0);
    }

    argcount -= optind;
    argmessage += optind;

    if (argcount != 0) {
	arg_printusage(args, num_args, NULL, "");
	exit(1);
    }

    if(auth_str){
	if (strcasecmp (auth_str, "plaintext") == 0 ||
	    strcasecmp (auth_str, "none") == 0)
	    p->auth_level = AUTH_NONE;
	else if(strcasecmp(auth_str, "otp") == 0) {
#ifdef OTP
	    p->auth_level = AUTH_OTP;
#else
	    pop_log (p, POP_PRIORITY, "support for OTP not enabled");
	    exit(1);
#endif
	} else if(strcasecmp(auth_str, "sasl") == 0) {
#ifdef SASL
	    p->auth_level = AUTH_SASL;
#else
	    pop_log (p, POP_PRIORITY, "support for SASL not enabled");
	    exit(1);
#endif
	} else {
	    pop_log (p, POP_PRIORITY, "bad value for -a: %s", auth_str);
	    exit(1);
	}
    }
    /*  Debugging requested */
    p->debug = debug_flag;

    if(port_str)
	portnum = htons(atoi(port_str));
    if(trace_file){
	p->debug++;
	if ((p->trace = fopen(trace_file, "a+")) == NULL) {
	    pop_log(p, POP_PRIORITY,
		    "Unable to open trace file \"%s\", err = %d",
		    optarg,errno);
	    exit (1);
	}
	trace_file_name = trace_file;
    }

#if defined(KRB5)
    p->kerberosp = kerberos_flag;
#endif

    if(timeout)
	pop_timeout = timeout;

    /* Fake inetd */
    if (interactive_flag) {
	if (portnum == 0)
	    portnum = p->kerberosp ?
		pop_getportbyname(p, "kpop", "tcp", 1109) :
	    pop_getportbyname(p, "pop", "tcp", 110);
	mini_inetd (portnum, NULL);
    }

    /*  Get the address and socket of the client to whom I am speaking */
    len = sizeof(cs_ss);
    if (getpeername(STDIN_FILENO, cs, &len) < 0) {
        pop_log(p,POP_PRIORITY,
            "Unable to obtain socket and address of client, err = %d",errno);
        exit (1);
    }

    /*  Save the dotted decimal form of the client's IP address
        in the POP parameter block */
    inet_ntop (cs->sa_family, socket_get_address (cs),
	       p->ipaddr, sizeof(p->ipaddr));

    /*  Save the client's port */
    p->ipport = ntohs(socket_get_port (cs));

    /*  Get the canonical name of the host to whom I am speaking */
    error = getnameinfo_verified (cs, len, p->client, sizeof(p->client),
				  NULL, 0, 0);
    if (error) {
	pop_log (p, POP_PRIORITY,
		 "getnameinfo: %s", gai_strerror (error));
	strlcpy (p->client, p->ipaddr, sizeof(p->client));
    }

    /*  Create input file stream for TCP/IP communication */
    if ((p->input = fdopen(STDIN_FILENO,"r")) == NULL){
        pop_log(p,POP_PRIORITY,
            "Unable to open communication stream for input, err = %d",errno);
        exit (1);
    }

    /*  Create output file stream for TCP/IP communication */
    if ((p->output = fdopen(STDOUT_FILENO,"w")) == NULL){
        pop_log(p,POP_PRIORITY,
            "Unable to open communication stream for output, err = %d",errno);
        exit (1);
    }

    pop_log(p,POP_PRIORITY,
        "(v%s) Servicing request from \"%s\" at %s\n",
            VERSION,p->client,p->ipaddr);

#ifdef DEBUG
    if (p->trace)
        pop_log(p,POP_PRIORITY,
            "Tracing session and debugging information in file \"%s\"",
                trace_file_name);
    else if (p->debug)
        pop_log(p,POP_PRIORITY,"Debugging turned on");
#endif /* DEBUG */


    if(p->kerberosp)
	return krb_authenticate(p, cs);
    else
	return plain_authenticate(p, cs);
}
@


1.4
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d8 1
a8 1
RCSID("$Id$");
@


1.3
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d8 1
a8 1
RCSID("$KTH: pop_init.c,v 1.58 2001/02/20 01:44:47 assar Exp $");
d11 1
a11 1
#if defined(KRB4) || defined(KRB5)
d18 2
a19 2
#elif defined(KRB4)
    return krb_net_read(fd, buf, len);
d37 1
a37 1
    if(inet_ntop (addr->sa_family, socket_get_address(addr), 
d42 1
a42 1
    
a51 48
#ifdef KRB4
static int
krb4_authenticate (POP *p, int s, u_char *buf, struct sockaddr *addr)
{
    Key_schedule schedule;
    KTEXT_ST ticket;
    char instance[INST_SZ];  
    char version[9];
    int auth;
  
    if (memcmp (buf, KRB_SENDAUTH_VERS, 4) != 0)
	return -1;
    if (pop_net_read (p, s, buf + 4,
		      KRB_SENDAUTH_VLEN - 4) != KRB_SENDAUTH_VLEN - 4)
	return -1;
    if (memcmp (buf, KRB_SENDAUTH_VERS, KRB_SENDAUTH_VLEN) != 0)
	return -1;

    k_getsockinst (0, instance, sizeof(instance));
    auth = krb_recvauth(KOPT_IGNORE_PROTOCOL,
			s,
			&ticket,
			"pop",
			instance,
                        (struct sockaddr_in *)addr,
			(struct sockaddr_in *) NULL,
                        &p->kdata,
			"",
			schedule,
			version);
    
    if (auth != KSUCCESS) {
        pop_msg(p, POP_FAILURE, "Kerberos authentication failure: %s", 
                krb_get_err_text(auth));
        pop_log(p, POP_PRIORITY, "%s: (%s.%s@@%s) %s", p->client, 
                p->kdata.pname, p->kdata.pinst, p->kdata.prealm,
		krb_get_err_text(auth));
	return -1;
    }

#ifdef DEBUG
    pop_log(p, POP_DEBUG, "%s.%s@@%s (%s): ok", p->kdata.pname, 
            p->kdata.pinst, p->kdata.prealm, p->ipaddr);
#endif /* DEBUG */
    return 0;
}
#endif /* KRB4 */

d58 1
a58 1
    u_int32_t len;
d65 1
a65 1
	
d89 1
a89 1
	pop_log(p, POP_PRIORITY, "krb5_unparse_name: %s", 
d101 1
a101 1
	pop_log(p, POP_DEBUG, 
d116 1
a116 1
#if defined(KRB4) || defined(KRB5)
a123 8
#ifdef KRB4
    if (krb4_authenticate (p, 0, buf, addr) == 0){
	pop_write_addr(p, addr);
	p->version = 4;
	return POP_SUCCESS;
    }
#endif
#ifdef KRB5
a130 2
	
#endif /* defined(KRB4) || defined(KRB5) */
d152 1
a152 1
#if defined(KRB4) || defined(KRB5)
d155 9
a163 1
    { "auth-mode", 'a', arg_string, &auth_str, "required authentication" },
d176 1
a176 1
/* 
d181 1
a181 1
pop_getportbyname(POP *p, const char *service, 
a185 2
#elif defined(KRB4)
    return k_getportbyname(service, proto, htons(def));
d205 2
d208 1
a208 1
    p->myname = __progname;
d253 2
a254 1
	if (strcmp (auth_str, "none") == 0)
d256 2
a257 1
	else if(strcmp(auth_str, "otp") == 0)
d259 15
a273 2
	else
	    warnx ("bad value for -a: %s", optarg);
d291 1
a291 1
#if defined(KRB4) || defined(KRB5)
d297 1
a297 1
    
d304 1
a304 1
	mini_inetd (portnum);
d315 1
a315 1
    /*  Save the dotted decimal form of the client's IP address 
d360 4
a363 1
    return((p->kerberosp ? krb_authenticate : plain_authenticate)(p, cs));
@


1.2
log
@Remove all uses of setprogname() and getprogname() in kerberosV subtree.
@
text
@@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
RCSID("$KTH: pop_init.c,v 1.57 2000/12/31 07:35:05 assar Exp $");
a256 2
    set_progname(argmessage[0]);

d258 1
a258 1
    p->myname = (char*)__progname;
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d8 1
a8 1
RCSID("$KTH: pop_init.c,v 1.58 2001/02/20 01:44:47 assar Exp $");
d257 1
a257 1
    setprogname(argmessage[0]);
d260 1
a260 1
    p->myname = (char*)getprogname();
@


1.1.1.3
log
@Import of heimdal-0.6.3
@
text
@d8 1
a8 1
RCSID("$KTH: pop_init.c,v 1.58.12.1 2003/10/13 12:01:35 lha Exp $");
d397 1
a397 4
    if(p->kerberosp)
	return krb_authenticate(p, cs);
    else
	return plain_authenticate(p, cs);
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d8 1
a8 1
RCSID("$KTH: pop_init.c,v 1.61 2004/07/14 09:04:34 joda Exp $");
d213 1
a213 9
    { "auth-mode", 'a', arg_string, &auth_str, "required authentication", 
      "plaintext"
#ifdef OTP
      "|otp"
#endif
#ifdef SASL
      "|sasl"
#endif
    },
d305 1
a305 2
	if (strcasecmp (auth_str, "plaintext") == 0 || 
	    strcasecmp (auth_str, "none") == 0)
d307 1
a307 2
	else if(strcasecmp(auth_str, "otp") == 0) {
#ifdef OTP
d309 2
a310 15
#else
	    pop_log (p, POP_PRIORITY, "support for OTP not enabled");
	    exit(1);
#endif
	} else if(strcasecmp(auth_str, "sasl") == 0) {
#ifdef SASL
	    p->auth_level = AUTH_SASL;
#else
	    pop_log (p, POP_PRIORITY, "support for SASL not enabled");
	    exit(1);
#endif
	} else {
	    pop_log (p, POP_PRIORITY, "bad value for -a: %s", auth_str);
	    exit(1);
	}
@


