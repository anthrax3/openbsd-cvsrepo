head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.28
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.26
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.24
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	HEIMDAL_0_7_2:1.1.1.6
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	HEIMDAL_0_6_3:1.1.1.5
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.04.22.10.01.17;	author reyk;	state dead;
branches;
next	1.9;

1.9
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.29.16.20.28;	author biorn;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.13.03.09.16;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.11.04.12.44;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.11.17.21.24;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.05.16.16.49;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.45.16;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.45.16;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.14.18;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.14.16;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.13.02.58.18;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.10.29.15.55.23;	author biorn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.04.14.07.31.53;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.10
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2003 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$Id: afslog.c,v 1.9 2013/06/17 18:57:40 robert Exp $");
#endif
#include <ctype.h>
#ifdef KRB5
#include <krb5.h>
#endif
#include <kafs.h>
#include <roken.h>
#include <getarg.h>
#include <err.h>

static int help_flag;
static int version_flag;
static getarg_strings cells;
static char *realm;
static getarg_strings files;
static int unlog_flag;
static int verbose;
#ifdef KRB5
static char *client_string;
static char *cache_string;
static int use_krb5 = 1;
#endif

struct getargs args[] = {
    { "cell",	'c', arg_strings, &cells, "cells to get tokens for", "cell" },
    { "file",	'p', arg_strings, &files, "files to get tokens for", "path" },
    { "realm",	'k', arg_string, &realm, "realm for afs cell", "realm" },
    { "unlog",	'u', arg_flag, &unlog_flag, "remove tokens" },
#ifdef KRB5
    { "principal",'P',arg_string,&client_string,"principal to use","principal"},
    { "cache",   0,  arg_string, &cache_string, "ccache to use", "cache"},
    { "v5",	 0,  arg_negative_flag, &use_krb5, "don't use Kerberos 5" },
#endif
    { "verbose",'v', arg_flag, &verbose },
    { "version", 0,  arg_flag, &version_flag },
    { "help",	'h', arg_flag, &help_flag },
};

static int num_args = sizeof(args) / sizeof(args[0]);

#ifdef KRB5
krb5_context context;
krb5_ccache id;
#endif

static const char *
expand_one_file(FILE *f, const char *cell)
{
    static char buf[1024];
    char *p;

    while (fgets (buf, sizeof(buf), f) != NULL) {
	if(buf[0] == '>') {
	    for(p = buf; *p && !isspace((unsigned char)*p) && *p != '#'; p++)
		;
	    *p = '\0';
	    if(strncmp(buf + 1, cell, strlen(cell)) == 0)
		return buf + 1;
	}
	buf[0] = '\0';
    }
    return NULL;
}

static const char *
expand_cell_name(const char *cell)
{
    FILE *f;
    const char *c;
    const char **fn, *files[] = { _PATH_CELLSERVDB,
				  _PATH_ARLA_CELLSERVDB,
				  _PATH_OPENAFS_DEBIAN_CELLSERVDB,
				  _PATH_ARLA_DEBIAN_CELLSERVDB,
				  NULL };
    for(fn = files; *fn; fn++) {
	f = fopen(*fn, "r");
	if(f == NULL)
	    continue;
	c = expand_one_file(f, cell);
	fclose(f);
	if(c)
	    return c;
    }
    return cell;
}

static void
usage(int ecode)
{
    arg_printusage(args, num_args, NULL, "[cell|path]...");
    exit(ecode);
}

struct cell_list {
    char *cell;
    struct cell_list *next;
} *cell_list;

static int
afslog_cell(const char *cell, int expand)
{
    struct cell_list *p, **q;
    const char *c = cell;
    if(expand){
	c = expand_cell_name(cell);
	if(c == NULL){
	    warnx("No cell matching \"%s\" found.", cell);
	    return -1;
	}
	if(verbose && strcmp(c, cell) != 0)
	    warnx("Cell \"%s\" expanded to \"%s\"", cell, c);
    }
    /* add to list of cells to get tokens for, and also remove
       duplicates; the actual afslog takes place later */
    for(p = cell_list, q = &cell_list; p; q = &p->next, p = p->next)
	if(strcmp(p->cell, c) == 0)
	    return 0;
    p = malloc(sizeof(*p));
    if(p == NULL)
	return -1;
    p->cell = strdup(c);
    if(p->cell == NULL) {
	free(p);
	return -1;
    }
    p->next = NULL;
    *q = p;
    return 0;
}

static int
afslog_file(const char *path)
{
    char cell[64];
    if(k_afs_cell_of_file(path, cell, sizeof(cell))){
	warnx("No cell found for file \"%s\".", path);
	return -1;
    }
    if(verbose)
	warnx("File \"%s\" lives in cell \"%s\"", path, cell);
    return afslog_cell(cell, 0);
}

static int
do_afslog(const char *cell)
{
    int k5ret;

    k5ret = 0;

#ifdef KRB5
    if(context != NULL && id != NULL && use_krb5) {
	k5ret = krb5_afslog(context, id, cell, realm);
	if(k5ret == 0)
	    return 0;
    }
#endif
    if (cell == NULL)
	cell = "<default cell>";
#ifdef KRB5
    if (k5ret)
	krb5_warn(context, k5ret, "krb5_afslog(%s)", cell);
#endif
    if (k5ret)
	return 1;
    return 0;
}

static void
log_func(void *ctx, const char *str)
{
    fprintf(stderr, "%s\n", str);
}

int
main(int argc, char **argv)
{
    int optind = 0;
    int i;
    int num;
    int ret = 0;
    int failed = 0;
    struct cell_list *p;

    setprogname(argv[0]);

    if(getarg(args, num_args, argc, argv, &optind))
	usage(1);
    if(help_flag)
	usage(0);
    if(version_flag) {
	print_version(NULL);
	exit(0);
    }

    if(!k_hasafs())
	errx(1, "AFS does not seem to be present on this machine");

    if(unlog_flag){
	k_unlog();
	exit(0);
    }
#ifdef KRB5
    ret = krb5_init_context(&context);
    if (ret) {
	context = NULL;
    } else {
	if (client_string) {
	    krb5_principal client;

	    ret = krb5_parse_name(context, client_string, &client);
	    if (ret == 0)
		ret = krb5_cc_cache_match(context, client, &id);
	    if (ret)
		id = NULL;
	}
	if (id == NULL && cache_string) {
	    if(krb5_cc_resolve(context, cache_string, &id) != 0) {
		krb5_warnx(context, "failed to open kerberos 5 cache '%s'",
			   cache_string);
		id = NULL;
	    }
	}
	if (id == NULL)
	    if(krb5_cc_default(context, &id) != 0)
		id = NULL;
    }
#endif

    if (verbose)
	kafs_set_verbose(log_func, NULL);

    num = 0;
    for(i = 0; i < files.num_strings; i++){
	afslog_file(files.strings[i]);
	num++;
    }
    free_getarg_strings (&files);
    for(i = 0; i < cells.num_strings; i++){
	afslog_cell(cells.strings[i], 1);
	num++;
    }
    free_getarg_strings (&cells);
    for(i = optind; i < argc; i++){
	num++;
	if(strcmp(argv[i], ".") == 0 ||
	   strcmp(argv[i], "..") == 0 ||
	   strchr(argv[i], '/') ||
	   access(argv[i], F_OK) == 0)
	    afslog_file(argv[i]);
	else
	    afslog_cell(argv[i], 1);
    }
    if(num == 0) {
	if(do_afslog(NULL))
	    failed++;
    } else
	for(p = cell_list; p; p = p->next) {
	    if(verbose)
		warnx("Getting tokens for cell \"%s\"", p->cell);
	    if(do_afslog(p->cell))
		failed++;
    }

    return failed;
}
@


1.9
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d36 1
a36 1
RCSID("$Id$");
@


1.8
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.24 2004/09/03 12:11:40 lha Exp $");
a41 3
#ifdef KRB4
#include <krb.h>
#endif
a48 3
#if 0
static int create_user;
#endif
a53 3
#ifdef KRB4
static int use_krb4 = 1;
#endif
d55 2
a64 3
#ifdef KRB4
    { "v4",	 0, arg_negative_flag, &use_krb4, "don't use Kerberos 4" },
#endif
d66 3
a68 4
    { "v5",	 0, arg_negative_flag, &use_krb5, "don't use Kerberos 5" },
#endif
#if 0
    { "create-user", 0, arg_flag, &create_user, "create user if not found" },
a107 1
#if 0
a109 1
#endif
a122 37
#if 0
static int
createuser (char *cell)
{
    char cellbuf[64];
    char name[ANAME_SZ];
    char instance[INST_SZ];
    char realm[REALM_SZ];
    char cmd[1024];

    if (cell == NULL) {
	FILE *f;
	int len;

	f = fopen (_PATH_THISCELL, "r");
	if (f == NULL)
	    err (1, "open(%s)", _PATH_THISCELL);
	if (fgets (cellbuf, sizeof(cellbuf), f) == NULL)
	    err (1, "read cellname from %s", _PATH_THISCELL);
	len = strlen(cellbuf);
	if (cellbuf[len-1] == '\n')
	    cellbuf[len-1] = '\0';
	cell = cellbuf;
    }

    if(krb_get_default_principal(name, instance, realm))
	errx (1, "Could not even figure out who you are");

    snprintf (cmd, sizeof(cmd),
	      "pts createuser %s%s%s@@%s -cell %s",
	      name, *instance ? "." : "", instance, strlwr(realm),
	      cell);
    DEBUG("Executing %s", cmd);
    return system(cmd);
}
#endif

d183 1
a183 1
    int k5ret, k4ret;
d185 1
a185 1
    k5ret = k4ret = 0;
d189 1
a189 1
	k5ret = krb5_afslog(context, id, cell, NULL);
a193 7
#if KRB4
    if (use_krb4) {
	k4ret = krb_afslog(cell, NULL);
	if(k4ret == 0)
	    return 0;
    }
#endif
d198 1
a198 1
	warnx("krb5_afslog(%s): %s", cell, krb5_get_err_text(context, k5ret));
d200 1
a200 5
#ifdef KRB4
    if (k4ret)
	warnx("krb_afslog(%s): %s", cell, krb_get_err_text(k4ret));
#endif
    if (k5ret || k4ret)
d220 3
a222 1
    
d241 1
a241 1
    if (ret)
d243 21
a263 3
    else
	if(krb5_cc_default(context, &id) != 0)
	    id = NULL;
d289 1
a289 1
    }    
@


1.7
log
@Merge with heimdal-0.6.3 Tested by beck@@, msf@@, me and others. ok beck@@
@
text
@d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.21.2.2 2003/08/25 11:43:51 lha Exp $");
d73 1
a73 1
    { "v4",	 0, arg_negative_flag, &use_krb4, "use Kerberos 4" },
d76 1
a76 1
    { "v5",	 0, arg_negative_flag, &use_krb5, "use Kerberos 5" },
@


1.6
log
@Merge with heimdal-0.6
@
text
@d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.21.2.1 2003/04/23 18:04:26 lha Exp $");
d251 2
@


1.5
log
@Fix a few merge mistakes
@
text
@d36 1
a36 1
RCSID("$Id: afslog.c,v 1.4 2003/05/11 03:39:59 hin Exp $");
@


1.4
log
@Merge 0.6rc1
@
text
@d36 1
a36 1
RCSID("$Id: afslog.c,v 1.1.1.3 2003/05/11 02:14:16 hin Exp $");
d119 1
d122 1
@


1.3
log
@Oops, forgot to commit this...

Look at the right path for CellServDB file.
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.16 2001/05/16 22:10:15 assar Exp $");
d39 1
d41 4
d60 6
d68 2
a69 2
    { "cell",	'c', arg_strings, &cells, "cells to get tokens for", "cells" },
    { "file",	'p', arg_strings, &files, "files to get tokens for", "paths" },
d72 6
d88 5
d94 1
a94 1
expand_cell_name(const char *cell)
d96 1
a96 2
    FILE *f;
    static char buf[128];
a98 3
    f = fopen(_PATH_ARLA_CELLSERVDB, "r");
    if(f == NULL)
	return cell;
d100 2
a101 2
	if(buf[0] == '>'){
	    for(p=buf; *p && !isspace((unsigned char)*p) && *p != '#'; p++)
d104 1
a104 2
	    if(strstr(buf, cell)){
		fclose(f);
a105 1
	    }
d107 23
a129 1
	buf[0] = 0;
a130 1
    fclose(f);
d174 1
a174 1
    arg_printusage(args, num_args, NULL, "[cell]... [path]...");
d178 5
d184 1
a184 2
afslog_cell(krb5_context context, krb5_ccache id,
	    const char *cell, int expand)
d186 1
d191 1
a191 1
	    krb5_warnx(context, "No cell matching \"%s\" found.", cell);
d194 2
a195 2
	if(verbose)
	    krb5_warnx(context, "Cell \"%s\" expanded to \"%s\"", cell, c);
d197 16
a212 1
    return krb5_afslog(context, id, c, realm);
d216 1
a216 2
afslog_file(krb5_context context, krb5_ccache id,
	    const char *path)
d220 1
a220 1
	krb5_warnx(context, "No cell found for file \"%s\".", path);
d224 42
a265 2
	krb5_warnx(context, "File \"%s\" lives in cell \"%s\"", path, cell);
    return afslog_cell(context, id, cell, 0);
a271 2
    krb5_context context;
    krb5_ccache id;
d275 2
a286 3
    ret = krb5_init_context(&context);
    if (ret)
	errx (1, "krb5_init_context failed: %d", ret);
d288 1
a288 2
	krb5_errx(context, 1, 
		  "AFS doesn't seem to be present on this machine");
d294 12
a305 1
    krb5_cc_default(context, &id);
d308 1
a308 1
	afslog_file(context, id, files.strings[i]);
a309 1
	free_getarg_strings (&files);
d311 1
d313 1
a313 1
	afslog_cell(context, id, cells.strings[i], 1);
a314 1
	free_getarg_strings (&cells);
d316 1
d323 1
a323 1
	    afslog_file(context, id, argv[i]);
d325 1
a325 1
	    afslog_cell(context, id, argv[i], 1);
d328 8
a335 1
	krb5_afslog(context, id, NULL, NULL);
d338 1
a338 1
    return ret;
@


1.2
log
@Remove all uses of setprogname() and getprogname() in kerberosV subtree.
@
text
@d78 1
a78 1
    f = fopen(_PATH_CELLSERVDB, "r");
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.14 2001/01/25 12:44:46 assar Exp $");
a181 2
    set_progname(argv[0]);

d207 1
d212 1
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.16 2001/05/16 22:10:15 assar Exp $");
d182 1
a182 1
    setprogname(argv[0]);
a208 1
	free_getarg_strings (&files);
a212 1
	free_getarg_strings (&cells);
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$Id$");
a38 1
#ifdef KRB5
a39 4
#endif
#ifdef KRB4
#include <krb.h>
#endif
a54 6
#ifdef KRB4
static int use_krb4 = 1;
#endif
#ifdef KRB5
static int use_krb5 = 1;
#endif
d57 2
a58 2
    { "cell",	'c', arg_strings, &cells, "cells to get tokens for", "cell" },
    { "file",	'p', arg_strings, &files, "files to get tokens for", "path" },
a60 6
#ifdef KRB4
    { "v4",	 0, arg_negative_flag, &use_krb4, "use Kerberos 4" },
#endif
#ifdef KRB5
    { "v5",	 0, arg_negative_flag, &use_krb5, "use Kerberos 5" },
#endif
a70 5
#ifdef KRB5
krb5_context context;
krb5_ccache id;
#endif

d72 1
a72 1
expand_one_file(FILE *f, const char *cell)
d74 2
a75 1
    static char buf[1024];
d78 3
d82 2
a83 2
	if(buf[0] == '>') {
	    for(p = buf; *p && !isspace((unsigned char)*p) && *p != '#'; p++)
d86 2
a87 1
	    if(strncmp(buf + 1, cell, strlen(cell)) == 0)
d89 1
d91 1
a91 23
	buf[0] = '\0';
    }
    return NULL;
}

static const char *
expand_cell_name(const char *cell)
{
    FILE *f;
    const char *c;
    const char **fn, *files[] = { _PATH_CELLSERVDB,
				  _PATH_ARLA_CELLSERVDB,
				  _PATH_OPENAFS_DEBIAN_CELLSERVDB,
				  _PATH_ARLA_DEBIAN_CELLSERVDB,
				  NULL };
    for(fn = files; *fn; fn++) {
	f = fopen(*fn, "r");
	if(f == NULL)
	    continue;
	c = expand_one_file(f, cell);
	fclose(f);
	if(c)
	    return c;
d93 1
d137 1
a137 1
    arg_printusage(args, num_args, NULL, "[cell|path]...");
a140 5
struct cell_list {
    char *cell;
    struct cell_list *next;
} *cell_list;

d142 2
a143 1
afslog_cell(const char *cell, int expand)
a144 1
    struct cell_list *p, **q;
d149 1
a149 1
	    warnx("No cell matching \"%s\" found.", cell);
d152 2
a153 2
	if(verbose && strcmp(c, cell) != 0)
	    warnx("Cell \"%s\" expanded to \"%s\"", cell, c);
d155 1
a155 16
    /* add to list of cells to get tokens for, and also remove
       duplicates; the actual afslog takes place later */
    for(p = cell_list, q = &cell_list; p; q = &p->next, p = p->next)
	if(strcmp(p->cell, c) == 0)
	    return 0;
    p = malloc(sizeof(*p));
    if(p == NULL)
	return -1;
    p->cell = strdup(c);
    if(p->cell == NULL) {
	free(p);
	return -1;
    }
    p->next = NULL;
    *q = p;
    return 0;
d159 2
a160 1
afslog_file(const char *path)
d164 1
a164 1
	warnx("No cell found for file \"%s\".", path);
d168 2
a169 42
	warnx("File \"%s\" lives in cell \"%s\"", path, cell);
    return afslog_cell(cell, 0);
}

static int
do_afslog(const char *cell)
{
    int k5ret, k4ret;

    k5ret = k4ret = 0;

#ifdef KRB5
    if(context != NULL && id != NULL && use_krb5) {
	k5ret = krb5_afslog(context, id, cell, NULL);
	if(k5ret == 0)
	    return 0;
    }
#endif
#if KRB4
    if (use_krb4) {
	k4ret = krb_afslog(cell, NULL);
	if(k4ret == 0)
	    return 0;
    }
#endif
#ifdef KRB5
    if (k5ret)
	warnx("krb5_afslog(%s): %s", cell, krb5_get_err_text(context, k5ret));
#endif
#ifdef KRB4
    if (k4ret)
	warnx("krb_afslog(%s): %s", cell, krb_get_err_text(k4ret));
#endif
    if (k5ret || k4ret)
	return 1;
    return 0;
}

static void
log_func(void *ctx, const char *str)
{
    fprintf(stderr, "%s\n", str);
d176 2
a180 2
    int failed = 0;
    struct cell_list *p;
d193 3
d197 2
a198 1
	errx(1, "AFS does not seem to be present on this machine");
d204 1
a204 12
#ifdef KRB5
    ret = krb5_init_context(&context);
    if (ret)
	context = NULL;
    else
	if(krb5_cc_default(context, &id) != 0)
	    id = NULL;
#endif

    if (verbose)
	kafs_set_verbose(log_func, NULL);

d207 1
a207 1
	afslog_file(files.strings[i]);
d209 1
a210 1
    free_getarg_strings (&files);
d212 1
a212 1
	afslog_cell(cells.strings[i], 1);
d214 1
a215 1
    free_getarg_strings (&cells);
d222 1
a222 1
	    afslog_file(argv[i]);
d224 1
a224 1
	    afslog_cell(argv[i], 1);
d227 1
a227 8
	if(do_afslog(NULL))
	    failed++;
    } else
	for(p = cell_list; p; p = p->next) {
	    if(verbose)
		warnx("Getting tokens for cell \"%s\"", p->cell);
	    if(do_afslog(p->cell))
		failed++;
d230 1
a230 1
    return failed;
@


1.1.1.4
log
@Import of heimdal-0.6, released earlier today.
@
text
@d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.21.2.1 2003/04/23 18:04:26 lha Exp $");
@


1.1.1.5
log
@Import of heimdal-0.6.3
@
text
@d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.21.2.2 2003/08/25 11:43:51 lha Exp $");
a248 2
    if (cell == NULL)
	cell = "<default cell>";
@


1.1.1.6
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: afslog.c,v 1.24 2004/09/03 12:11:40 lha Exp $");
d73 1
a73 1
    { "v4",	 0, arg_negative_flag, &use_krb4, "don't use Kerberos 4" },
d76 1
a76 1
    { "v5",	 0, arg_negative_flag, &use_krb5, "don't use Kerberos 5" },
@


