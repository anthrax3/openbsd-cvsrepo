head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.1
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.04.22.10.01.17;	author reyk;	state dead;
branches;
next	1.4;

1.4
date	2013.06.17.19.11.35;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.17.18.42;	author hin;	state dead;
branches;
next	1.2;

1.2
date	2001.07.09.07.05.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.45.18;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.45.18;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.04.14.07.31.54;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/* Test the k5dcepag routine by setting a pag, and
 * and execing a shell under this pag.
 *
 * This allows you to join a PAG which was created
 * earlier by some other means.
 * for example k5dcecon
 *
 * Must be run as root for testing only.
 *
 */

#include <stdio.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <setjmp.h>
#include <errno.h>

#define POSIX_SETJMP
#define POSIX_SIGNALS

#ifdef POSIX_SIGNALS
typedef struct sigaction handler;
#define handler_init(H,F)       (sigemptyset(&(H).sa_mask), \
                     (H).sa_flags=0, \
                     (H).sa_handler=(F))
#define handler_swap(S,NEW,OLD)     sigaction(S, &NEW, &OLD)
#define handler_set(S,OLD)      sigaction(S, &OLD, NULL)
#else
typedef sigtype (*handler)();
#define handler_init(H,F)       ((H) = (F))
#define handler_swap(S,NEW,OLD)     ((OLD) = signal ((S), (NEW)))

#define handler_set(S,OLD)      (signal ((S), (OLD)))
#endif

typedef void sigtype;

/*
 * We could include the dcedfs/syscall.h which should have these
 * numbers, but it has extra baggage. So for
 * simplicity sake now, we define these here.
 */


#define AFSCALL_SETPAG 2
#define AFSCALL_GETPAG 11

#if defined(sun)
#define AFS_SYSCALL  72

#elif defined(hpux)
/* assume HPUX 10 +  or is it 50 */
#define AFS_SYSCALL 326

#elif defined(_AIX)
#define DPAGAIX "dpagaix"
/* #define DPAGAIX "/krb5/sbin/dpagaix" */

#elif defined(sgi) || defined(_sgi)
#define AFS_SYSCALL  206+1000

#else
#define AFS_SYSCALL (Unknown_DFS_AFS_SYSCALL)
#endif

static sigjmp_buf setpag_buf;

static sigtype mysig()
{
  siglongjmp(setpag_buf, 1);
}


int  krb5_dfs_newpag(new_pag)
  int new_pag;
{
  handler sa1, osa1;
  handler sa2, osa2;
  int pag = -1;

  handler_init (sa1, mysig);
  handler_init (sa2, mysig);
  handler_swap (SIGSYS, sa1, osa1);
  handler_swap (SIGSEGV, sa2, osa2);

  if (sigsetjmp(setpag_buf, 1) == 0) {
#if defined(_AIX)
    int (*dpagaix)(int, int, int, int, int, int);

    if (dpagaix = load(DPAGAIX, 0, 0))
      pag = (*dpagaix)(AFSCALL_SETPAG, new_pag, 0, 0, 0, 0);
#else
    pag = syscall(AFS_SYSCALL,AFSCALL_SETPAG, new_pag, 0, 0, 0, 0);
#endif
    handler_set (SIGSYS, osa1);
    handler_set (SIGSEGV, osa2);
    return(pag);
  }

  fprintf(stderr,"Setpag failed with a system error\n");
  /* syscall failed! return 0 */
  handler_set (SIGSYS, osa1);
  handler_set (SIGSEGV, osa2);
  return(-1);
}

main(argc, argv)
	int argc;
	char *argv[];
{
  extern int optind;
  extern char *optarg;
  int rv;
  int rc;
  unsigned int pag;
  unsigned int newpag = 0;
  char ccname[256];
  int nflag = 0;

  while((rv = getopt(argc,argv,"n:")) != -1) {
    switch(rv) {
     case 'n':
       nflag++;
       sscanf(optarg,"%8x",&newpag);
       break;
     default:
       printf("Usage: k5dcepagt -n pag \n");
       exit(1);
    }
  }

  if (nflag) {
    fprintf (stderr,"calling k5dcepag newpag=%8.8x\n",newpag);
    pag = krb5_dfs_newpag(newpag);

    fprintf (stderr,"PAG returned = %8.8x\n",pag);
    if ((pag != 0) && (pag != -1)) {
      sprintf (ccname,
        "FILE:/opt/dcelocal/var/security/creds/dcecred_%8.8x",
        pag);
      esetenv("KRB5CCNAME",ccname,1);
      execl("/bin/csh", "csh", NULL);
    }
    else {
      fprintf(stderr," Not a good pag value\n");
    }
  }
}
@


1.4
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@@


1.3
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d1 5
a5 5
/* Test the k5dcepag routine by setting a pag, and 
 * and execing a shell under this pag. 
 * 
 * This allows you to join a PAG which was created  
 * earlier by some other means. 
d7 2
a8 2
 * 
 * Must be run as root for testing only. 
d87 1
a87 1
 
d92 1
a92 1
    if (dpagaix = load(DPAGAIX, 0, 0)) 
d121 1
a121 1
  
d141 1
a141 1
        "FILE:/opt/dcelocal/var/security/creds/dcecred_%8.8x", 
d144 1
a144 1
      execl("/bin/csh","csh",(char *)NULL);
@


1.2
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@@


1.1
log
@Initial revision
@
text
@d144 1
a144 1
      execl("/bin/csh","csh",0);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.7.2
@
text
@d144 1
a144 1
      execl("/bin/csh", "csh", NULL);
@

