head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.22.10.01.19;	author reyk;	state dead;
branches;
next	1.6;

1.6
date	2013.06.17.19.11.38;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.19.03.06.06;	author beck;	state dead;
branches;
next	1.4;

1.4
date	2004.10.29.16.20.29;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.05.16.16.49;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.46.19;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.46.19;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.16.20;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.14.17;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.29.15.55.27;	author biorn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.19;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.7
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2004 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "push_locl.h"
RCSID("$Id: push.c,v 1.6 2013/06/17 19:11:38 robert Exp $");

#if defined(_AIX) && defined(STAT)
/*
 * AIX defines STAT to 1 in sys/dir.h
 */
#  undef STAT
#endif

#ifdef KRB5
static int use_v5 = -1;
static krb5_context context;
#endif

static char *port_str;
static int verbose_level;
static int do_fork;
static int do_leave;
static int do_version;
static int do_help;
static int do_from;
static int do_count;
static char *header_str;

struct getargs args[] = {
#ifdef KRB5
    { "krb5",	'5', arg_flag,		&use_v5,	"Use Kerberos V5",
      NULL },
#endif
    { "verbose",'v', arg_counter,	&verbose_level,	"Verbose",
      NULL },
    { "fork",	'f', arg_flag,		&do_fork,	"Fork deleting proc",
      NULL },
    { "leave",	'l', arg_flag,		&do_leave,	"Leave mail on server",
      NULL },
    { "port",	'p', arg_string,	&port_str,	"Use this port",
      "number-or-service" },
    { "from",	 0,  arg_flag,		&do_from,	"Behave like from",
      NULL },
    { "headers", 0,  arg_string,	&header_str,	"Headers to print", NULL },
    { "count", 'c',  arg_flag,		&do_count,	"Print number of messages", NULL},
    { "version", 0,  arg_flag,		&do_version,	"Print version",
      NULL },
    { "help",	 0,  arg_flag,		&do_help,	NULL,
      NULL }

};

static void
usage (int ret)
{
    arg_printusage (args,
		    sizeof(args) / sizeof(args[0]),
		    NULL,
		    "[[{po:username[@@hostname] | hostname[:username]}] ...] "
		    "filename");
    exit (ret);
}

static int
do_connect (const char *hostname, int port, int nodelay)
{
    struct addrinfo *ai, *a;
    struct addrinfo hints;
    int error;
    int s = -1;
    char portstr[NI_MAXSERV];

    memset (&hints, 0, sizeof(hints));
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    snprintf (portstr, sizeof(portstr), "%u", ntohs(port));

    error = getaddrinfo (hostname, portstr, &hints, &ai);
    if (error)
	errx (1, "getaddrinfo(%s): %s", hostname, gai_strerror(error));

    for (a = ai; a != NULL; a = a->ai_next) {
	s = socket (a->ai_family, a->ai_socktype, a->ai_protocol);
	if (s < 0)
	    continue;
	if (connect (s, a->ai_addr, a->ai_addrlen) < 0) {
	    warn ("connect(%s)", hostname);
 	    close (s);
 	    continue;
	}
	break;
    }
    freeaddrinfo (ai);
    if (a == NULL) {
	warnx ("failed to contact %s", hostname);
	return -1;
    }

    if(setsockopt(s, IPPROTO_TCP, TCP_NODELAY,
		  (void *)&nodelay, sizeof(nodelay)) < 0)
	err (1, "setsockopt TCP_NODELAY");
    return s;
}

typedef enum { INIT = 0, GREET, USER, PASS, STAT, RETR, TOP,
	       DELE, XDELE, QUIT} pop_state;

static char *pop_state_string[] = {
    "INIT", "GREET", "USER", "PASS", "STAT", "RETR", "TOP",
    "DELE", "XDELE", "QUIT"
};

#define PUSH_BUFSIZ 65536

#define STEP 16

struct write_state {
    struct iovec *iovecs;
    size_t niovecs, maxiovecs, allociovecs;
    int fd;
};

static void
write_state_init (struct write_state *w, int fd)
{
#ifdef UIO_MAXIOV
    w->maxiovecs = UIO_MAXIOV;
#else
    w->maxiovecs = 16;
#endif
    w->allociovecs = min(STEP, w->maxiovecs);
    w->niovecs = 0;
    w->iovecs = emalloc(w->allociovecs * sizeof(*w->iovecs));
    w->fd = fd;
}

static void
write_state_add (struct write_state *w, void *v, size_t len)
{
    if(w->niovecs == w->allociovecs) {
	if(w->niovecs == w->maxiovecs) {
	    if(writev (w->fd, w->iovecs, w->niovecs) < 0)
		err(1, "writev");
	    w->niovecs = 0;
	} else {
	    w->allociovecs = min(w->allociovecs + STEP, w->maxiovecs);
	    w->iovecs = erealloc (w->iovecs,
				  w->allociovecs * sizeof(*w->iovecs));
	}
    }
    w->iovecs[w->niovecs].iov_base = v;
    w->iovecs[w->niovecs].iov_len  = len;
    ++w->niovecs;
}

static void
write_state_flush (struct write_state *w)
{
    if (w->niovecs) {
	if (writev (w->fd, w->iovecs, w->niovecs) < 0)
	    err (1, "writev");
	w->niovecs = 0;
    }
}

static void
write_state_destroy (struct write_state *w)
{
    free (w->iovecs);
}

static int
doit(int s,
     const char *host,
     const char *user,
     const char *outfilename,
     const char *header_str,
     int leavep,
     int verbose,
     int forkp)
{
    int ret;
    char out_buf[PUSH_BUFSIZ];
    int out_len = 0;
    char *in_buf;
    size_t in_buf_size;
    size_t in_len = 0;
    char *in_ptr;
    pop_state state = INIT;
    unsigned count = 0, bytes;
    unsigned asked_for = 0, retrieved = 0, asked_deleted = 0, deleted = 0;
    unsigned sent_xdele = 0;
    int out_fd;
    char from_line[128];
    size_t from_line_length;
    time_t now;
    struct write_state write_state;
    unsigned int numheaders = 1;
    char **headers = NULL;
    int i;
    char *tmp = NULL;

    in_buf = emalloc(PUSH_BUFSIZ + 1);
    in_ptr = in_buf;
    in_buf_size = PUSH_BUFSIZ;

    if (do_from) {
	char *tmp2;

	tmp2 = tmp = estrdup(header_str);

	out_fd = -1;
	if (verbose)
	    fprintf (stderr, "%s@@%s\n", user, host);
	while (*tmp != '\0') {
	    tmp = strchr(tmp, ',');
	    if (tmp == NULL)
		break;
	    tmp++;
	    numheaders++;
	}

	headers = emalloc(sizeof(char *) * (numheaders + 1));
	for (i = 0; i < numheaders; i++) {
	    headers[i] = strtok_r(tmp2, ",", &tmp2);
	}
	headers[numheaders] = NULL;
    } else {
	out_fd = open(outfilename, O_WRONLY | O_APPEND | O_CREAT, 0666);
	if (out_fd < 0)
	    err (1, "open %s", outfilename);
	if (verbose)
	    fprintf (stderr, "%s@@%s -> %s\n", user, host, outfilename);
    }

    now = time(NULL);
    from_line_length = snprintf (from_line, sizeof(from_line),
				 "From %s %s", "push", ctime(&now));
    if (from_line_length < 0 || from_line_length > sizeof(from_line))
	errx (1, "snprintf failed");

    out_len = snprintf (out_buf, sizeof(out_buf),
			"USER %s\r\nPASS hej\r\nSTAT\r\n",
			user);
    if (out_len < 0 || out_len > sizeof(out_buf))
	errx (1, "snprintf failed");
    if (net_write (s, out_buf, out_len) != out_len)
	err (1, "write");
    if (verbose > 1)
	fprintf (stderr, "%s", out_buf);

    if (!do_from)
	write_state_init (&write_state, out_fd);

    while(state != QUIT) {
	fd_set readset, writeset;

	FD_ZERO(&readset);
	FD_ZERO(&writeset);
	if (s >= FD_SETSIZE)
	    errx (1, "fd too large");
	FD_SET(s,&readset);

	if (verbose > 1)
	    fprintf (stderr, "state: %s count: %d asked_for: %d "
		     "retrieved: %d asked_deleted: %d\n",
		     pop_state_string[state],
		     count, asked_for, retrieved, asked_deleted);

	if (((state == STAT || state == RETR || state == TOP)
	     && asked_for < count)
	    || (state == XDELE && !sent_xdele)
	    || (state == DELE && asked_deleted < count))
	    FD_SET(s,&writeset);
	ret = select (s + 1, &readset, &writeset, NULL, NULL);
	if (ret < 0) {
	    if (errno == EAGAIN)
		continue;
	    else
		err (1, "select");
	}

	if (FD_ISSET(s, &readset)) {
	    char *beg, *p;
	    size_t rem;
	    int blank_line = 0;

	    if(in_len >= in_buf_size) {
		char *tmp = erealloc(in_buf, in_buf_size + PUSH_BUFSIZ + 1);
		in_ptr = tmp + (in_ptr - in_buf);
		in_buf = tmp;
		in_buf_size += PUSH_BUFSIZ;
	    }

	    ret = read (s, in_ptr, in_buf_size - in_len);
	    if (ret < 0)
		err (1, "read");
	    else if (ret == 0)
		errx (1, "EOF during read");

	    in_len += ret;
	    in_ptr += ret;
	    *in_ptr = '\0';

	    beg = in_buf;
	    rem = in_len;
	    while(rem > 1
		  && (p = strstr(beg, "\r\n")) != NULL) {
		if (state == TOP) {
		    char *copy = beg;

		    for (i = 0; i < numheaders; i++) {
			size_t len;

			len = min(p - copy + 1, strlen(headers[i]));
			if (strncasecmp(copy, headers[i], len) == 0) {
			    fprintf (stdout, "%.*s\n", (int)(p - copy), copy);
			}
		    }
		    if (beg[0] == '.' && beg[1] == '\r' && beg[2] == '\n') {
			if (numheaders > 1)
			    fprintf (stdout, "\n");
			state = STAT;
			if (++retrieved == count) {
			    state = QUIT;
			    net_write (s, "QUIT\r\n", 6);
			    if (verbose > 1)
				fprintf (stderr, "QUIT\r\n");
			}
		    }
		    rem -= p - beg + 2;
		    beg = p + 2;
		} else if (state == RETR) {
		    char *copy = beg;
		    if (beg[0] == '.') {
			if (beg[1] == '\r' && beg[2] == '\n') {
			    if(!blank_line)
				write_state_add(&write_state, "\n", 1);
			    state = STAT;
			    rem -= p - beg + 2;
			    beg = p + 2;
			    if (++retrieved == count) {
				write_state_flush (&write_state);
				if (fsync (out_fd) < 0)
				    err (1, "fsync");
				close(out_fd);
				if (leavep) {
				    state = QUIT;
				    net_write (s, "QUIT\r\n", 6);
				    if (verbose > 1)
					fprintf (stderr, "QUIT\r\n");
				} else {
				    if (forkp) {
					pid_t pid;

					pid = fork();
					if (pid < 0)
					    warn ("fork");
					else if(pid != 0) {
					    if(verbose)
						fprintf (stderr,
							 "(exiting)");
					    return 0;
					}
				    }

				    state = XDELE;
				    if (verbose)
					fprintf (stderr, "deleting... ");
				}
			    }
			    continue;
			} else
			    ++copy;
		    }
		    *p = '\n';
		    if(blank_line &&
		       strncmp(copy, "From ", min(p - copy + 1, 5)) == 0)
			write_state_add(&write_state, ">", 1);
		    write_state_add(&write_state, copy, p - copy + 1);
		    blank_line = (*copy == '\n');
		    rem -= p - beg + 2;
		    beg = p + 2;
		} else if (rem >= 3 && strncmp (beg, "+OK", 3) == 0) {
		    if (state == STAT) {
			if (!do_from)
			    write_state_add(&write_state,
					    from_line, from_line_length);
			blank_line = 0;
			if (do_from)
			    state = TOP;
			else
			    state = RETR;
		    } else if (state == XDELE) {
			state = QUIT;
			net_write (s, "QUIT\r\n", 6);
			if (verbose > 1)
			    fprintf (stderr, "QUIT\r\n");
			break;
		    } else if (state == DELE) {
			if (++deleted == count) {
			    state = QUIT;
			    net_write (s, "QUIT\r\n", 6);
			    if (verbose > 1)
				fprintf (stderr, "QUIT\r\n");
			    break;
			}
		    } else if (++state == STAT) {
			if(sscanf (beg + 4, "%u %u", &count, &bytes) != 2)
			    errx(1, "Bad STAT-line: %.*s", (int)(p - beg), beg);
			if (verbose) {
			    fprintf (stderr, "%u message(s) (%u bytes). "
				     "fetching... ",
				     count, bytes);
			    if (do_from)
				fprintf (stderr, "\n");
			} else if (do_count) {
			    fprintf (stderr, "%u message(s) (%u bytes).\n",
				     count, bytes);
			}
			if (count == 0) {
			    state = QUIT;
			    net_write (s, "QUIT\r\n", 6);
			    if (verbose > 1)
				fprintf (stderr, "QUIT\r\n");
			    break;
			}
		    }

		    rem -= p - beg + 2;
		    beg = p + 2;
		} else {
		    if(state == XDELE) {
			state = DELE;
			rem -= p - beg + 2;
			beg = p + 2;
		    } else
			errx (1, "Bad response: %.*s", (int)(p - beg), beg);
		}
	    }
	    if (!do_from)
		write_state_flush (&write_state);

	    memmove (in_buf, beg, rem);
	    in_len = rem;
	    in_ptr = in_buf + rem;
	}
	if (FD_ISSET(s, &writeset)) {
	    if ((state == STAT && !do_from) || state == RETR)
		out_len = snprintf (out_buf, sizeof(out_buf),
				    "RETR %u\r\n", ++asked_for);
	    else if ((state == STAT && do_from) || state == TOP)
		out_len = snprintf (out_buf, sizeof(out_buf),
				    "TOP %u 0\r\n", ++asked_for);
	    else if(state == XDELE) {
		out_len = snprintf(out_buf, sizeof(out_buf),
				   "XDELE %u %u\r\n", 1, count);
		sent_xdele++;
	    }
	    else if(state == DELE)
		out_len = snprintf (out_buf, sizeof(out_buf),
				    "DELE %u\r\n", ++asked_deleted);
	    if (out_len < 0 || out_len > sizeof(out_buf))
		errx (1, "snprintf failed");
	    if (net_write (s, out_buf, out_len) != out_len)
		err (1, "write");
	    if (verbose > 1)
		fprintf (stderr, "%s", out_buf);
	}
    }
    if (verbose)
	fprintf (stderr, "Done\n");
    if (do_from) {
	free (tmp);
	free (headers);
    } else {
	write_state_destroy (&write_state);
    }
    return 0;
}

#ifdef KRB5
static int
do_v5 (const char *host,
       int port,
       const char *user,
       const char *filename,
       const char *header_str,
       int leavep,
       int verbose,
       int forkp)
{
    krb5_error_code ret;
    krb5_auth_context auth_context = NULL;
    krb5_principal server;
    int s;

    s = do_connect (host, port, 1);
    if (s < 0)
	return 1;

    ret = krb5_sname_to_principal (context,
				   host,
				   "pop",
				   KRB5_NT_SRV_HST,
				   &server);
    if (ret) {
	warnx ("krb5_sname_to_principal: %s",
	       krb5_get_err_text (context, ret));
	return 1;
    }

    ret = krb5_sendauth (context,
			 &auth_context,
			 &s,
			 "KPOPV1.0",
			 NULL,
			 server,
			 0,
			 NULL,
			 NULL,
			 NULL,
			 NULL,
			 NULL,
			 NULL);
    krb5_free_principal (context, server);
    if (ret) {
	warnx ("krb5_sendauth: %s",
	       krb5_get_err_text (context, ret));
	return 1;
    }
    return doit (s, host, user, filename, header_str, leavep, verbose, forkp);
}
#endif

#ifdef HESIOD

#ifdef HESIOD_INTERFACES

static char *
hesiod_get_pobox (const char **user)
{
    void *context;
    struct hesiod_postoffice *hpo;
    char *ret = NULL;

    if(hesiod_init (&context) != 0)
	err (1, "hesiod_init");

    hpo = hesiod_getmailhost (context, *user);
    if (hpo == NULL) {
	warn ("hesiod_getmailhost %s", *user);
    } else {
	if (strcasecmp(hpo->hesiod_po_type, "pop") != 0)
	    errx (1, "Unsupported po type %s", hpo->hesiod_po_type);

	ret = estrdup(hpo->hesiod_po_host);
	*user = estrdup(hpo->hesiod_po_name);
	hesiod_free_postoffice (context, hpo);
    }
    hesiod_end (context);
    return ret;
}

#else /* !HESIOD_INTERFACES */

static char *
hesiod_get_pobox (const char **user)
{
    char *ret = NULL;
    struct hes_postoffice *hpo;

    hpo = hes_getmailhost (*user);
    if (hpo == NULL) {
	warn ("hes_getmailhost %s", *user);
    } else {
	if (strcasecmp(hpo->po_type, "pop") != 0)
	    errx (1, "Unsupported po type %s", hpo->po_type);

	ret = estrdup(hpo->po_host);
	*user = estrdup(hpo->po_name);
    }
    return ret;
}

#endif /* HESIOD_INTERFACES */

#endif /* HESIOD */

static char *
get_pobox (const char **user)
{
    char *ret = NULL;

#ifdef HESIOD
    ret = hesiod_get_pobox (user);
#endif

    if (ret == NULL)
	ret = getenv("MAILHOST");
    if (ret == NULL)
	errx (1, "MAILHOST not set");
    return ret;
}

static void
parse_pobox (char *a0, const char **host, const char **user)
{
    const char *h, *u;
    char *p;
    int po = 0;

    if (a0 == NULL) {

	*user = getenv ("USERNAME");
	if (*user == NULL) {
	    struct passwd *pwd = getpwuid (getuid ());

	    if (pwd == NULL)
		errx (1, "Who are you?");
	    *user = estrdup (pwd->pw_name);
	}
	*host = get_pobox (user);
	return;
    }

    /* if the specification starts with po:, remember this information */
    if(strncmp(a0, "po:", 3) == 0) {
	a0 += 3;
	po++;
    }
    /* if there is an `@@', the hostname is after it, otherwise at the
       beginning of the string */
    p = strchr(a0, '@@');
    if(p != NULL) {
	*p++ = '\0';
	h = p;
    } else {
	h = a0;
    }
    /* if there is a `:', the username comes before it, otherwise at
       the beginning of the string */
    p = strchr(a0, ':');
    if(p != NULL) {
	*p++ = '\0';
	u = p;
    } else {
	u = a0;
    }
    if(h == u) {
	/* some inconsistent compatibility with various mailers */
	if(po) {
	    h = get_pobox (&u);
	} else {
	    u = get_default_username ();
	    if (u == NULL)
		errx (1, "Who are you?");
	}
    }
    *host = h;
    *user = u;
}

int
main(int argc, char **argv)
{
    int port = 0;
    int optind = 0;
    int ret = 1;
    const char *host, *user, *filename = NULL;
    char *pobox = NULL;

    setprogname (argv[0]);

#ifdef KRB5
    {
	krb5_error_code ret;

	ret = krb5_init_context (&context);
	if (ret)
	    errx (1, "krb5_init_context failed: %d", ret);
    }
#endif

    if (getarg (args, sizeof(args) / sizeof(args[0]), argc, argv,
		&optind))
	usage (1);

    argc -= optind;
    argv += optind;

    if (do_help)
	usage (0);

    if (do_version) {
	print_version(NULL);
	return 0;
    }

    if (do_from && header_str == NULL)
	header_str = "From:";
    else if (header_str != NULL)
	do_from = 1;

    if (do_from) {
	if (argc == 0)
	    pobox = NULL;
	else if (argc == 1)
	    pobox = argv[0];
	else
	    usage (1);
    } else {
	if (argc == 1) {
	    filename = argv[0];
	    pobox    = NULL;
	} else if (argc == 2) {
	    filename = argv[1];
	    pobox    = argv[0];
	} else
	    usage (1);
    }

    if (port_str) {
	struct servent *s = roken_getservbyname (port_str, "tcp");

	if (s)
	    port = s->s_port;
	else {
	    char *ptr;

	    port = strtol (port_str, &ptr, 10);
	    if (port == 0 && ptr == port_str)
		errx (1, "Bad port `%s'", port_str);
	    port = htons(port);
	}
    }
    if (port == 0) {
#ifdef KRB5
	port = krb5_getportbyname (context, "kpop", "tcp", 1109);
#else
#error must define KRB5
#endif
    }

    parse_pobox (pobox, &host, &user);

#ifdef KRB5
    if (ret && use_v5) {
	ret = do_v5 (host, port, user, filename, header_str,
		     do_leave, verbose_level, do_fork);
    }
#endif
    return ret;
}
@


1.6
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@d35 1
a35 1
RCSID("$Id$");
@


1.5
log
@Goodbye goodbye, parting is such sweet sorrow. Away and to the attic with you.
ok biorn@@, deraadt@@
@
text
@d2 3
a4 3
 * Copyright (c) 1997-2004 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d35 1
a35 1
RCSID("$KTH: push.c,v 1.47.2.1 2004/06/21 10:54:46 lha Exp $");
d37 5
a41 2
#ifdef KRB4
static int use_v4 = -1;
a59 4
#ifdef KRB4
    { "krb4",	'4', arg_flag,		&use_v4,	"Use Kerberos V4",
      NULL },
#endif    
d136 1
a136 1
typedef enum { INIT = 0, GREET, USER, PASS, STAT, RETR, TOP, 
d141 1
a141 1
    "DELE", "XDELE", "QUIT" 
d171 14
a184 14
    if(w->niovecs == w->allociovecs) {				
	if(w->niovecs == w->maxiovecs) {				
	    if(writev (w->fd, w->iovecs, w->niovecs) < 0)		
		err(1, "writev");				
	    w->niovecs = 0;					
	} else {						
	    w->allociovecs = min(w->allociovecs + STEP, w->maxiovecs);	
	    w->iovecs = erealloc (w->iovecs,				
				  w->allociovecs * sizeof(*w->iovecs));	
	}							
    }								
    w->iovecs[w->niovecs].iov_base = v;				
    w->iovecs[w->niovecs].iov_len  = len;				
    ++w->niovecs;							
d221 1
a221 1
    unsigned count, bytes;
d229 1
a229 1
    int numheaders = 1;
d270 2
d276 1
a276 1
    if (out_len < 0)
d298 1
a298 1
		     pop_state_string[state], 
d313 1
a313 1
	
d318 1
a318 1
	    
d331 1
a331 1
	    
d335 1
a335 1
	    
d408 1
a408 1
		    if(blank_line && 
d421 1
a421 1
			if (do_from) 
d494 1
a494 1
	    if (out_len < 0)
a566 42
#ifdef KRB4
static int
do_v4 (const char *host,
       int port,
       const char *user,
       const char *filename,
       const char *header_str,
       int leavep,
       int verbose,
       int forkp)
{
    KTEXT_ST ticket;
    MSG_DAT msg_data;
    CREDENTIALS cred;
    des_key_schedule sched;
    int s;
    int ret;

    s = do_connect (host, port, 1);
    if (s < 0)
	return 1;
    ret = krb_sendauth(0,
		       s,
		       &ticket, 
		       "pop",
		       (char *)host,
		       krb_realmofhost(host),
		       getpid(),
		       &msg_data,
		       &cred,
		       sched,
		       NULL,
		       NULL,
		       "KPOPV0.1");
    if(ret) {
	warnx("krb_sendauth: %s", krb_get_err_text(ret));
	return 1;
    }
    return doit (s, host, user, filename, header_str, leavep, verbose, forkp);
}
#endif /* KRB4 */

d704 2
a722 7
#if defined(KRB4) && defined(KRB5)
    if(use_v4 == -1 && use_v5 == 1)
	use_v4 = 0;
    if(use_v5 == -1 && use_v4 == 1)
	use_v5 = 0;
#endif    

d730 1
a730 1
	
a770 2
#elif defined(KRB4)
	port = k_getportbyname ("kpop", "tcp", htons(1109));
d772 1
a772 1
#error must define KRB4 or KRB5
a783 7

#ifdef KRB4
    if (ret && use_v4) {
	ret = do_v4 (host, port, user, filename, header_str,
		     do_leave, verbose_level, do_fork);
    }
#endif /* KRB4 */
@


1.4
log
@Merge with heimdal-0.6.3 Tested by beck@@, msf@@, me and others. ok beck@@
@
text
@@


1.3
log
@Merge 0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2001, 2003 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: push.c,v 1.47 2003/04/04 02:10:17 assar Exp $");
d217 2
a218 1
    char in_buf[PUSH_BUFSIZ + 1];	/* sentinel */
d220 1
a220 1
    char *in_ptr = in_buf;
d235 4
d318 8
a325 1
	    ret = read (s, in_ptr, sizeof(in_buf) - in_len - 1);
@


1.2
log
@Remove all uses of setprogname() and getprogname() in kerberosV subtree.
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2000 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: push.c,v 1.44 2001/02/20 01:44:47 assar Exp $");
d140 5
d216 1
a216 1
    size_t out_len = 0;
d270 2
d275 1
a275 1
	write (STDERR_FILENO, out_buf, out_len);
d288 7
d346 1
a346 1
				net_write (STDERR_FILENO, "QUIT\r\n", 6);
d369 1
a369 1
					net_write (STDERR_FILENO, "QUIT\r\n", 6);
d416 1
a416 1
			    net_write (STDERR_FILENO, "QUIT\r\n", 6);
d423 1
a423 1
				net_write (STDERR_FILENO, "QUIT\r\n", 6);
d443 1
a443 1
				net_write (STDERR_FILENO, "QUIT\r\n", 6);
d481 2
d486 1
a486 1
		write (STDERR_FILENO, out_buf, out_len);
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
RCSID("$KTH: push.c,v 1.43 2000/12/31 07:35:59 assar Exp $");
a715 2

    set_progname (argv[0]);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d35 1
a35 1
RCSID("$KTH: push.c,v 1.44 2001/02/20 01:44:47 assar Exp $");
d717 1
a717 1
    setprogname (argv[0]);
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2001, 2003 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: push.c,v 1.47 2003/04/04 02:10:17 assar Exp $");
a139 5
static char *pop_state_string[] = {
    "INIT", "GREET", "USER", "PASS", "STAT", "RETR", "TOP",
    "DELE", "XDELE", "QUIT" 
};

d211 1
a211 1
    int out_len = 0;
a264 2
    if (out_len < 0)
	errx (1, "snprintf failed");
d268 1
a268 1
	fprintf (stderr, "%s", out_buf);
a280 7

	if (verbose > 1)
	    fprintf (stderr, "state: %s count: %d asked_for: %d "
		     "retrieved: %d asked_deleted: %d\n",
		     pop_state_string[state], 
		     count, asked_for, retrieved, asked_deleted);

d332 1
a332 1
				fprintf (stderr, "QUIT\r\n");
d355 1
a355 1
					fprintf (stderr, "QUIT\r\n");
d402 1
a402 1
			    fprintf (stderr, "QUIT\r\n");
d409 1
a409 1
				fprintf (stderr, "QUIT\r\n");
d429 1
a429 1
				fprintf (stderr, "QUIT\r\n");
a466 2
	    if (out_len < 0)
		errx (1, "snprintf failed");
d470 1
a470 1
		fprintf (stderr, "%s", out_buf);
@


1.1.1.4
log
@Import of heimdal-0.6.3
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2004 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: push.c,v 1.47.2.1 2004/06/21 10:54:46 lha Exp $");
d217 1
a217 2
    char *in_buf;
    size_t in_buf_size;
d219 1
a219 1
    char *in_ptr;
a233 4
    in_buf = emalloc(PUSH_BUFSIZ + 1);
    in_ptr = in_buf;
    in_buf_size = PUSH_BUFSIZ;

d313 1
a313 8
	    if(in_len >= in_buf_size) {
		char *tmp = erealloc(in_buf, in_buf_size + PUSH_BUFSIZ + 1);
		in_ptr = tmp + (in_ptr - in_buf);
		in_buf = tmp;
		in_buf_size += PUSH_BUFSIZ;
	    }

	    ret = read (s, in_ptr, in_buf_size - in_len);
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d35 1
a35 1
RCSID("$KTH: push.c,v 1.49 2005/04/19 18:00:17 lha Exp $");
a270 2
    if (from_line_length < 0 || from_line_length > sizeof(from_line))
	errx (1, "snprintf failed");
d275 1
a275 1
    if (out_len < 0 || out_len > sizeof(out_buf))
d493 1
a493 1
	    if (out_len < 0 || out_len > sizeof(out_buf))
@


