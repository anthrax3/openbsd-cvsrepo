head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	HEIMDAL_0_7_2:1.1.1.5
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.04.22.10.01.19;	author reyk;	state dead;
branches;
next	1.5;

1.5
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.17.18.44;	author hin;	state dead;
branches;
next	1.3;

1.3
date	2002.06.05.16.16.49;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.41.36;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.45.28;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.45.28;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.14.53;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.52.26;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.29.15.55.24;	author biorn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.00;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1999 - 2008 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of KTH nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY KTH AND ITS CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL KTH OR ITS CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#include <config.h>

RCSID("$Id: su.c,v 1.5 2013/06/17 18:57:40 robert Exp $");

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <syslog.h>

#ifdef HAVE_PATHS_H
#include <paths.h>
#endif

#ifdef HAVE_SHADOW_H
#include <shadow.h>
#endif

#include <pwd.h>
#ifdef HAVE_CRYPT_H
#include <crypt.h>
#endif

#include "crypto-headers.h"
#ifdef KRB5
#include <krb5.h>
#endif
#include <kafs.h>
#include <err.h>
#include <roken.h>
#include <getarg.h>

#include "supaths.h"

#if !HAVE_DECL_ENVIRON
extern char **environ;
#endif

int kerberos_flag = 1;
int csh_f_flag;
int full_login;
int env_flag;
char *kerberos_instance = "root";
int help_flag;
int version_flag;
char *cmd;
char tkfile[256];

struct getargs args[] = {
    { "kerberos", 'K', arg_negative_flag, &kerberos_flag,
      "don't use kerberos" },
    { NULL,	  'f', arg_flag,	  &csh_f_flag,
      "don't read .cshrc" },
    { "full",	  'l', arg_flag,          &full_login,
      "simulate full login" },
    { NULL,	  'm', arg_flag,          &env_flag,
      "leave environment unmodified" },
    { "instance", 'i', arg_string,        &kerberos_instance,
      "root instance to use" },
    { "command",  'c', arg_string,        &cmd,
      "command to execute" },
    { "help", 	  'h', arg_flag,          &help_flag },
    { "version",  0,   arg_flag,          &version_flag },
};


static void
usage (int ret)
{
    arg_printusage (args,
		    sizeof(args)/sizeof(*args),
		    NULL,
		    "[login [shell arguments]]");
    exit (ret);
}

static void
free_info(struct passwd *p)
{
    free (p->pw_name);
    free (p->pw_passwd);
    free (p->pw_dir);
    free (p->pw_shell);
    free (p);
}

static struct passwd*
dup_info(const struct passwd *pwd)
{
    struct passwd *info;

    info = malloc(sizeof(*info));
    if(info == NULL)
	return NULL;
    info->pw_name = strdup(pwd->pw_name);
    info->pw_passwd = strdup(pwd->pw_passwd);
    info->pw_uid = pwd->pw_uid;
    info->pw_gid = pwd->pw_gid;
    info->pw_dir = strdup(pwd->pw_dir);
    info->pw_shell = strdup(pwd->pw_shell);
    if(info->pw_name == NULL || info->pw_passwd == NULL ||
       info->pw_dir == NULL || info->pw_shell == NULL) {
	free_info (info);
	return NULL;
    }
    return info;
}

#ifdef KRB5
static krb5_context context;
static krb5_ccache ccache;

static int
krb5_verify(const struct passwd *login_info,
	    const struct passwd *su_info,
	    const char *kerberos_instance)
{
    krb5_error_code ret;
    krb5_principal p;
    krb5_realm *realms, *r;
    char *login_name = NULL;
    int user_ok = 0;

#if defined(HAVE_GETLOGIN) && !defined(POSIX_GETLOGIN)
    login_name = getlogin();
#endif
    ret = krb5_init_context (&context);
    if (ret) {
#if 0
	warnx("krb5_init_context failed: %d", ret);
#endif
	return 1;
    }

    ret = krb5_get_default_realms(context, &realms);
    if (ret)
	return 1;

    /* Check all local realms */
    for (r = realms; *r != NULL && !user_ok; r++) {

	if (login_name == NULL || strcmp (login_name, "root") == 0)
	    login_name = login_info->pw_name;
	if (strcmp (su_info->pw_name, "root") == 0)
	    ret = krb5_make_principal(context, &p, *r,
				      login_name,
				      kerberos_instance,
				      NULL);
	else
	    ret = krb5_make_principal(context, &p, *r,
				      su_info->pw_name,
				      NULL);
	if (ret) {
	    krb5_free_host_realm(context, realms);
	    return 1;
	}

	/* if we are su-ing too root, check with krb5_kuserok */
	if (su_info->pw_uid == 0 && !krb5_kuserok(context, p, su_info->pw_name))
	    continue;

	ret = krb5_cc_new_unique(context, krb5_cc_type_memory, NULL, &ccache);
	if(ret) {
	    krb5_free_host_realm(context, realms);
	    krb5_free_principal (context, p);
	    return 1;
	}
  	ret = krb5_verify_user(context, p, ccache, NULL, TRUE, NULL);
	krb5_free_principal (context, p);
	switch (ret) {
	case 0:
	    user_ok = 1;
	    break;
	case KRB5_LIBOS_PWDINTR :
	    krb5_cc_destroy(context, ccache);
	    break;
	case KRB5KRB_AP_ERR_BAD_INTEGRITY:
	case KRB5KRB_AP_ERR_MODIFIED:
	    krb5_cc_destroy(context, ccache);
	    krb5_warnx(context, "Password incorrect");
	    break;
	default :
	    krb5_cc_destroy(context, ccache);
	    krb5_warn(context, ret, "krb5_verify_user");
	    break;
	}
    }
    krb5_free_host_realm(context, realms);
    if (!user_ok)
	return 1;
    return 0;
}

static int
krb5_start_session(void)
{
    krb5_ccache ccache2;
    char *cc_name;
    int ret;

    ret = krb5_cc_new_unique(context, krb5_cc_type_file, NULL, &ccache2);
    if (ret) {
	krb5_cc_destroy(context, ccache);
	return 1;
    }

    ret = krb5_cc_copy_cache(context, ccache, ccache2);
    if (ret) {
	krb5_cc_destroy(context, ccache);
	krb5_cc_destroy(context, ccache2);
	return 1;
    }

    ret = asprintf(&cc_name, "%s:%s", krb5_cc_get_type(context, ccache2),
		   krb5_cc_get_name(context, ccache2));
    if (ret == -1) {
	krb5_cc_destroy(context, ccache);
	krb5_cc_destroy(context, ccache2);
	errx(1, "malloc - out of memory");
    }
    esetenv("KRB5CCNAME", cc_name, 1);

    /* convert creds? */
    if(k_hasafs()) {
	if (k_setpag() == 0)
	    krb5_afslog(context, ccache2, NULL, NULL);
    }

    krb5_cc_close(context, ccache2);
    krb5_cc_destroy(context, ccache);
    return 0;
}
#endif


#define GROUP_MEMBER		0
#define GROUP_MISSING		1
#define GROUP_EMPTY		2
#define GROUP_NOT_MEMBER	3

static int
group_member_p(const char *group, const char *user)
{
    struct group *g;
    int i;
    g = getgrnam(group);
    if(g == NULL)
	return GROUP_MISSING;
    if(g->gr_mem[0] == NULL)
	return GROUP_EMPTY;
    for(i = 0; g->gr_mem[i] != NULL; i++)
	if(strcmp(user, g->gr_mem[i]) == 0)
	    return GROUP_MEMBER;
    return GROUP_NOT_MEMBER;
}

static int
verify_unix(struct passwd *login, struct passwd *su)
{
    char prompt[128];
    char pw_buf[1024];
    char *pw;
    int r;
    if(su->pw_passwd != NULL && *su->pw_passwd != '\0') {
	snprintf(prompt, sizeof(prompt), "%s's password: ", su->pw_name);
	r = UI_UTIL_read_pw_string(pw_buf, sizeof(pw_buf), prompt, 0);
	if(r != 0)
	    exit(0);
	pw = crypt(pw_buf, su->pw_passwd);
	memset(pw_buf, 0, sizeof(pw_buf));
	if(strcmp(pw, su->pw_passwd) != 0) {
	    syslog (LOG_ERR | LOG_AUTH, "%s to %s: incorrect password",
		    login->pw_name, su->pw_name);
	    return 1;
	}
    }
    /* if su:ing to root, check membership of group wheel or root; if
       that group doesn't exist, or is empty, allow anyone to su
       root */
    if(su->pw_uid == 0) {
#ifndef ROOT_GROUP
#define ROOT_GROUP "wheel"
#endif
	int gs = group_member_p(ROOT_GROUP, login->pw_name);
	if(gs == GROUP_NOT_MEMBER) {
	    syslog (LOG_ERR | LOG_AUTH, "%s to %s: not in group %s",
		    login->pw_name, su->pw_name, ROOT_GROUP);
	    return 1;
	}
	return 0;
    }
    return 0;
}

int
main(int argc, char **argv)
{
    int i, optind = 0;
    char *su_user;
    struct passwd *su_info;
    struct passwd *login_info;

    struct passwd *pwd;

    char *shell;

    int ok = 0;

    setprogname (argv[0]);

    if(getarg(args, sizeof(args) / sizeof(args[0]), argc, argv, &optind))
	usage(1);

    for (i=0; i < optind; i++)
      if (strcmp(argv[i], "-") == 0) {
	 full_login = 1;
	 break;
      }

    if(help_flag)
	usage(0);
    if(version_flag) {
	print_version(NULL);
	exit(0);
    }
    if(optind >= argc)
	su_user = "root";
    else
	su_user = argv[optind++];

    if (!issuid() && getuid() != 0)
	warnx("Not setuid and you are not root, expect this to fail");

    pwd = k_getpwnam(su_user);
    if(pwd == NULL)
	errx (1, "unknown login %s", su_user);
    if (pwd->pw_uid == 0 && strcmp ("root", su_user) != 0) {
	syslog (LOG_ALERT, "NIS attack, user %s has uid 0", su_user);
	errx (1, "unknown login %s", su_user);
    }
    su_info = dup_info(pwd);
    if (su_info == NULL)
	errx (1, "malloc: out of memory");

	pwd = getpwuid(getuid());
    if(pwd == NULL)
	errx(1, "who are you?");
    login_info = dup_info(pwd);
    if (login_info == NULL)
	errx (1, "malloc: out of memory");
    if(env_flag)
	shell = login_info->pw_shell;
    else
	shell = su_info->pw_shell;
    if(shell == NULL || *shell == '\0')
	shell = _PATH_BSHELL;


#ifdef KRB5
    if(kerberos_flag && ok == 0 &&
       krb5_verify(login_info, su_info, kerberos_instance) == 0)
	ok = 5;
#endif

    if(ok == 0 && login_info->pw_uid && verify_unix(login_info, su_info) != 0) {
	printf("Sorry!\n");
	exit(1);
    }

#ifdef HAVE_GETSPNAM
   {  struct spwd *sp;
      long    today;

    sp = getspnam(su_info->pw_name);
    if (sp != NULL) {
	today = time(0)/(24L * 60 * 60);
	if (sp->sp_expire > 0) {
	    if (today >= sp->sp_expire) {
		if (login_info->pw_uid)
		    errx(1,"Your account has expired.");
		else
		    printf("Your account has expired.");
            }
            else if (sp->sp_expire - today < 14)
                printf("Your account will expire in %d days.\n",
		       (int)(sp->sp_expire - today));
	}
	if (sp->sp_max > 0) {
	    if (today >= sp->sp_lstchg + sp->sp_max) {
		if (login_info->pw_uid)
		    errx(1,"Your password has expired. Choose a new one.");
		else
		    printf("Your password has expired. Choose a new one.");
	    }
	    else if (today >= sp->sp_lstchg + sp->sp_max - sp->sp_warn)
		printf("Your account will expire in %d days.\n",
		       (int)(sp->sp_lstchg + sp->sp_max -today));
	}
    }
    }
#endif
    {
	char *tty = ttyname (STDERR_FILENO);
	syslog (LOG_NOTICE | LOG_AUTH, tty ? "%s to %s on %s" : "%s to %s",
		login_info->pw_name, su_info->pw_name, tty);
    }


    if(!env_flag) {
	if(full_login) {
	    char *t = getenv ("TERM");
	    char **newenv = NULL;
	    int i, j;

	    i = read_environment(_PATH_ETC_ENVIRONMENT, &newenv);

	    environ = malloc ((10 + i) * sizeof (char *));
	    if (environ == NULL)
		err (1, "malloc");
	    environ[0] = NULL;

	    for (j = 0; j < i; j++) {
		char *p = strchr(newenv[j], '=');
		if (p == NULL)
		    errx(1, "enviroment '%s' missing '='", newenv[j]);
		*p++ = 0;
		esetenv (newenv[j], p, 1);
	    }
	    free(newenv);

	    esetenv ("PATH", _PATH_DEFPATH, 1);
	    if (t)
		esetenv ("TERM", t, 1);
	    if (chdir (su_info->pw_dir) < 0)
		errx (1, "no directory");
	}
	if (full_login || su_info->pw_uid)
	    esetenv ("USER", su_info->pw_name, 1);
	esetenv("HOME", su_info->pw_dir, 1);
	esetenv("SHELL", shell, 1);
    }

    {
	int i;
	char **args;
	char *p;

	p = strrchr(shell, '/');
	if(p)
	    p++;
	else
	    p = shell;

	if (strcmp(p, "csh") != 0)
	    csh_f_flag = 0;

        args = malloc(((cmd ? 2 : 0) + 1 + argc - optind + 1 + csh_f_flag) * sizeof(*args));
	if (args == NULL)
	    err (1, "malloc");
	i = 0;
	if(full_login) {
	    if (asprintf(&args[i++], "-%s", p) == -1)
		errx (1, "malloc");
	} else
	    args[i++] = p;
	if (cmd) {
	   args[i++] = "-c";
	   args[i++] = cmd;
	}

	if (csh_f_flag)
	    args[i++] = "-f";

	for (argv += optind; *argv; ++argv)
	   args[i++] = *argv;
	args[i] = NULL;

	if(setgid(su_info->pw_gid) < 0)
	    err(1, "setgid");
	if (initgroups (su_info->pw_name, su_info->pw_gid) < 0)
	    err (1, "initgroups");
	if(setuid(su_info->pw_uid) < 0
	   || (su_info->pw_uid != 0 && setuid(0) == 0))
	    err(1, "setuid");

#ifdef KRB5
        if (ok == 5)
           krb5_start_session();
#endif
	execve(shell, args, environ);
    }

    exit(1);
}
@


1.5
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d35 1
a35 1
RCSID("$Id$");
@


1.4
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d2 3
a4 3
 * Copyright (c) 1999 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d35 1
a35 1
RCSID("$KTH: su.c,v 1.22 2001/08/22 20:35:38 assar Exp $");
d52 3
d56 3
a58 4
#ifdef HAVE_OPENSSL
#include <des.h>
#else
#include <des.h>
a59 1
#include <krb5.h>
a63 1
#include <kafs.h>
d65 1
a65 3
#ifndef _PATH_DEFPATH
#define _PATH_DEFPATH "/usr/bin:/bin"
#endif
d67 2
a68 2
#ifndef _PATH_BSHELL
#define _PATH_BSHELL "/bin/sh"
d79 1
a143 1
#endif
a149 1
#ifdef KRB5
d152 7
a158 1
	
d166 3
a168 11
	
    if (strcmp (su_info->pw_name, "root") == 0)
	ret = krb5_make_principal(context, &p, NULL, 
				  login_info->pw_name,
				  kerberos_instance,
				  NULL);
    else
	ret = krb5_make_principal(context, &p, NULL, 
				  su_info->pw_name,
				  NULL);
    if(ret)
d170 25
a194 3
	
    if(su_info->pw_uid != 0 || krb5_kuserok(context, p, su_info->pw_name)) {
	ret = krb5_cc_gen_new(context, &krb5_mcc_ops, &ccache);
d196 1
a196 3
#if 1
	    krb5_warn(context, ret, "krb5_cc_gen_new");
#endif
d200 1
a200 1
	ret = krb5_verify_user_lrealm(context, p, ccache, NULL, TRUE, NULL);
d202 13
a214 1
	if(ret) {
d216 2
a217 12
	    switch (ret) {
	    case KRB5_LIBOS_PWDINTR :
		break;
	    case KRB5KRB_AP_ERR_BAD_INTEGRITY:
	    case KRB5KRB_AP_ERR_MODIFIED:
		krb5_warnx(context, "Password incorrect");
		break;
	    default :
		krb5_warn(context, ret, "krb5_verify_user");
		break;
	    }
	    return 1;
a218 1
	return 0;
d220 4
a223 3
    krb5_free_principal (context, p);
#endif
    return 1;
a225 1
#ifdef KRB5
d233 1
a233 1
    ret = krb5_cc_gen_new(context, &krb5_fcc_ops, &ccache2);
d240 5
d246 7
a252 2
    asprintf(&cc_name, "%s:%s", krb5_cc_get_type(context, ccache2),
	     krb5_cc_get_name(context, ccache2));
a254 17
    /* we want to export this even if we don't directly support KRB4 */
    {
#ifndef TKT_ROOT
#define TKT_ROOT "/tmp/tkt"
#endif
	int fd;
	char tkfile[256];
	strlcpy(tkfile, TKT_ROOT, sizeof(tkfile));
	strlcat(tkfile, "_XXXXXX", sizeof(tkfile));
	fd = mkstemp(tkfile);
	if(fd >= 0) {
	    close(fd);
	    esetenv("KRBTKFILE", tkfile, 1);
	}
    }
            
#ifdef KRB4
d260 1
a260 2
#endif
            
d267 22
d290 1
a290 1
verify_unix(struct passwd *su)
d298 1
a298 1
	r = des_read_pw_string(pw_buf, sizeof(pw_buf), prompt, 0);
d303 3
a305 1
	if(strcmp(pw, su->pw_passwd) != 0)
d307 16
a332 1
    char *login_user = NULL;
d340 2
a341 1
    int kerberos_error=1;
d351 1
a351 1
	
d363 3
d376 1
a376 5
    
#if defined(HAVE_GETLOGIN) && !defined(POSIX_GETLOGIN)
    login_user = getlogin();
#endif
    if(login_user == NULL || (pwd = getpwnam(login_user)) == NULL)
d389 3
a391 1
    
d393 3
a395 2
      (kerberos_error=krb5_verify(login_info, su_info, kerberos_instance)) == 0)
	ok++;
d397 1
a397 1
    if(ok == 0 && login_info->pw_uid && verify_unix(su_info) != 0) {
d405 1
a405 1
    
d411 1
a411 1
		if (login_info->pw_uid) 
d416 1
a416 1
            else if (sp->sp_expire - today < 14) 
d419 1
a419 1
	} 
d422 1
a422 1
		if (login_info->pw_uid)    
d436 1
a436 1
	syslog (LOG_NOTICE | LOG_AUTH, tty ? "%s to %s" : "%s to %s on %s",
d444 6
a449 2
	    
	    environ = malloc (10 * sizeof (char *));
d453 10
d493 4
a496 3
	if(full_login)
	    asprintf(&args[i++], "-%s", p);
	else
d501 2
a502 2
	}  
	   
d509 1
a509 1
	
d519 1
a519 1
        if (!kerberos_error)
d522 1
a522 1
	execv(shell, args);
d524 1
a524 1
    
@


1.3
log
@Remove all uses of setprogname() and getprogname() in kerberosV subtree.
@
text
@@


1.2
log
@basic change to make kerbV build with OpenSSL 0.9.7 -
since the newer OpenSSL's wish to depreciate the libdes
api, and now do not have symbol conflicts with libdes,
we change the build here so that we use the libdes <des.h>
and use libdes rather than libcrypto (this is the same thing
kerberosIV uses)
@
text
@a294 2
    setprogname (argv[0]);

@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
RCSID("$KTH: su.c,v 1.18 2001/01/26 16:02:49 joda Exp $");
d53 1
d55 3
d110 10
d121 1
a121 1
make_info(struct passwd *pwd)
d124 1
d135 2
a136 1
       info->pw_dir == NULL || info->pw_shell == NULL)
d138 1
d148 2
a149 1
krb5_verify(struct passwd *login_info, struct passwd *su_info,
d295 1
a295 1
    set_progname (argv[0]);
d324 3
a326 1
    su_info = make_info(pwd);
d335 3
a337 1
    login_info = make_info(pwd);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d35 1
a35 1
RCSID("$KTH: su.c,v 1.20 2001/02/20 01:44:48 assar Exp $");
a52 3
#ifdef HAVE_OPENSSL_DES_H
#include <openssl/des.h>
#else
a53 1
#endif
d277 1
a277 1
    setprogname (argv[0]);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d35 1
a35 1
RCSID("$KTH: su.c,v 1.22 2001/08/22 20:35:38 assar Exp $");
d53 1
a53 1
#ifdef HAVE_OPENSSL
a109 10
static void
free_info(struct passwd *p)
{
    free (p->pw_name);
    free (p->pw_passwd);
    free (p->pw_dir);
    free (p->pw_shell);
    free (p);
}

d111 1
a111 1
dup_info(const struct passwd *pwd)
a113 1

d124 1
a124 2
       info->pw_dir == NULL || info->pw_shell == NULL) {
	free_info (info);
a125 1
    }
d135 1
a135 2
krb5_verify(const struct passwd *login_info,
	    const struct passwd *su_info,
d310 1
a310 3
    su_info = dup_info(pwd);
    if (su_info == NULL)
	errx (1, "malloc: out of memory");
d319 1
a319 3
    login_info = dup_info(pwd);
    if (login_info == NULL)
	errx (1, "malloc: out of memory");
@


1.1.1.4
log
@Import of heimdal-0.6.3
@
text
@d2 1
a2 1
 * Copyright (c) 1999 - 2003 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: su.c,v 1.26.2.1 2003/05/06 12:06:44 joda Exp $");
d53 5
a57 2
#include "crypto-headers.h"
#ifdef KRB5
a58 4
#endif
#ifdef KRB4
#include <krb.h>
#endif
d63 1
a80 1
char tkfile[256];
a141 20
#if defined(KRB4) || defined(KRB5)
static void
set_tkfile()
{
#ifndef TKT_ROOT
#define TKT_ROOT "/tmp/tkt"
#endif
    int fd;
    if(*tkfile != '\0')
	return;
    snprintf(tkfile, sizeof(tkfile), "%s_XXXXXX", TKT_ROOT);
    fd = mkstemp(tkfile);
    if(fd >= 0)
	close(fd);
#ifdef KRB4
    krb_set_tkt_string(tkfile);
#endif
}
#endif

d145 1
d152 1
a154 1
    char *login_name = NULL;
a155 3
#if defined(HAVE_GETLOGIN) && !defined(POSIX_GETLOGIN)
    login_name = getlogin();
#endif
a163 2
    if (login_name == NULL || strcmp (login_name, "root") == 0) 
	login_name = login_info->pw_name;
d166 1
a166 1
				  login_name,
d205 1
d209 1
d230 14
a243 2
    set_tkfile();
    esetenv("KRBTKFILE", tkfile, 1);
d245 1
d251 1
a258 72
#ifdef KRB4

static int
krb_verify(const struct passwd *login_info,
	   const struct passwd *su_info,
	   const char *kerberos_instance)
{
    int ret;
    char *login_name = NULL;
    char *name, *instance, realm[REALM_SZ];
	
#if defined(HAVE_GETLOGIN) && !defined(POSIX_GETLOGIN)
    login_name = getlogin();
#endif

    ret = krb_get_lrealm(realm, 1);
	
    if (login_name == NULL || strcmp (login_name, "root") == 0) 
	login_name = login_info->pw_name;
    if (strcmp (su_info->pw_name, "root") == 0) {
	name = login_name;
	instance = (char*)kerberos_instance;
    } else {
	name = su_info->pw_name;
	instance = "";
    }

    if(su_info->pw_uid != 0 || 
       krb_kuserok(name, instance, realm, su_info->pw_name) == 0) {
	char password[128];
	char *prompt;
	asprintf (&prompt, 
		  "%s's Password: ",
		  krb_unparse_name_long (name, instance, realm));
	if (des_read_pw_string (password, sizeof (password), prompt, 0)) {
	    memset (password, 0, sizeof (password));
	    free(prompt);
	    return (1);
	}
	free(prompt);
	if (strlen(password) == 0)
	    return (1);		/* Empty passwords are not allowed */
	set_tkfile();
	setuid(geteuid()); /* need to run as root here */
	ret = krb_verify_user(name, instance, realm, password, 
			      KRB_VERIFY_SECURE, NULL);
	memset(password, 0, sizeof(password));
	
	if(ret) {
	    warnx("%s", krb_get_err_text(ret));
	    return 1;
	}
	chown (tkt_string(), su_info->pw_uid, su_info->pw_gid);
	return 0;
    }
    return 1;
}


static int
krb_start_session(void)
{
    esetenv("KRBTKFILE", tkfile, 1);
            
    /* convert creds? */
    if(k_hasafs() && k_setpag() == 0)
	krb_afslog(NULL, NULL);
            
    return 0;
}
#endif

d285 1
d328 4
a344 2

#ifdef KRB5
d347 1
a347 7
	ok = 5;
#endif
#ifdef KRB4
    if(kerberos_flag && ok == 0 &&
       (kerberos_error = krb_verify(login_info, su_info, kerberos_instance)) == 0)
	ok = 4;
#endif
d456 1
a456 1
        if (ok == 5)
a457 4
#endif
#ifdef KRB4
	if (ok == 4)
	    krb_start_session();
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1999 - 2006 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: su.c,v 1.29.2.1 2006/01/12 16:26:16 joda Exp $");
a51 3
#ifdef HAVE_CRYPT_H
#include <crypt.h>
#endif
d302 1
a302 1
	if (UI_UTIL_read_pw_string (password, sizeof (password), prompt, 0)) {
d349 1
a349 1
	r = UI_UTIL_read_pw_string(pw_buf, sizeof(pw_buf), prompt, 0);
d472 1
a472 1
	syslog (LOG_NOTICE | LOG_AUTH, tty ? "%s to %s on %s" : "%s to %s",
@


