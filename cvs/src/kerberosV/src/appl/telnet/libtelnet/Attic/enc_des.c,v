head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.5
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.04.22.10.01.19;	author reyk;	state dead;
branches;
next	1.4;

1.4
date	2013.06.17.19.11.38;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.17.18.44;	author hin;	state dead;
branches;
next	1.2;

1.2
date	2002.05.15.02.41.36;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.45.43;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.45.43;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.15.10;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.52.32;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.29.15.55.25;	author biorn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.05;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <config.h>

RCSID("$Id: enc_des.c,v 1.4 2013/06/17 19:11:38 robert Exp $");

#if	defined(AUTHENTICATION) && defined(ENCRYPTION) && defined(DES_ENCRYPTION)
#include <arpa/telnet.h>
#include <stdio.h>
#ifdef	__STDC__
#include <stdlib.h>
#include <string.h>
#endif
#include <roken.h>
#ifdef SOCKS
#include <socks.h>
#endif

#include "encrypt.h"
#include "misc-proto.h"

#include "crypto-headers.h"

extern int encrypt_debug_mode;

#define	CFB	0
#define	OFB	1

#define	NO_SEND_IV	1
#define	NO_RECV_IV	2
#define	NO_KEYID	4
#define	IN_PROGRESS	(NO_SEND_IV|NO_RECV_IV|NO_KEYID)
#define	SUCCESS		0
#define	FAILED		-1


struct stinfo {
  DES_cblock	str_output;
  DES_cblock	str_feed;
  DES_cblock	str_iv;
  DES_cblock	str_ikey;
  DES_key_schedule str_sched;
  int		str_index;
  int		str_flagshift;
};

struct fb {
	DES_cblock krbdes_key;
	DES_key_schedule krbdes_sched;
	DES_cblock temp_feed;
	unsigned char fb_feed[64];
	int need_start;
	int state[2];
	int keyid[2];
	struct stinfo streams[2];
};

static struct fb fb[2];

struct keyidlist {
	char	*keyid;
	int	keyidlen;
	char	*key;
	int	keylen;
	int	flags;
} keyidlist [] = {
	{ "\0", 1, 0, 0, 0 },		/* default key of zero */
	{ 0, 0, 0, 0, 0 }
};

#define	KEYFLAG_MASK	03

#define	KEYFLAG_NOINIT	00
#define	KEYFLAG_INIT	01
#define	KEYFLAG_OK	02
#define	KEYFLAG_BAD	03

#define	KEYFLAG_SHIFT	2

#define	SHIFT_VAL(a,b)	(KEYFLAG_SHIFT*((a)+((b)*2)))

#define	FB64_IV		1
#define	FB64_IV_OK	2
#define	FB64_IV_BAD	3


void fb64_stream_iv (DES_cblock, struct stinfo *);
void fb64_init (struct fb *);
static int fb64_start (struct fb *, int, int);
int fb64_is (unsigned char *, int, struct fb *);
int fb64_reply (unsigned char *, int, struct fb *);
static void fb64_session (Session_Key *, int, struct fb *);
void fb64_stream_key (DES_cblock, struct stinfo *);
int fb64_keyid (int, unsigned char *, int *, struct fb *);
void fb64_printsub(unsigned char *, size_t ,
		   unsigned char *, size_t , char *);

void cfb64_init(int server)
{
	fb64_init(&fb[CFB]);
	fb[CFB].fb_feed[4] = ENCTYPE_DES_CFB64;
	fb[CFB].streams[0].str_flagshift = SHIFT_VAL(0, CFB);
	fb[CFB].streams[1].str_flagshift = SHIFT_VAL(1, CFB);
}


void ofb64_init(int server)
{
	fb64_init(&fb[OFB]);
	fb[OFB].fb_feed[4] = ENCTYPE_DES_OFB64;
	fb[CFB].streams[0].str_flagshift = SHIFT_VAL(0, OFB);
	fb[CFB].streams[1].str_flagshift = SHIFT_VAL(1, OFB);
}

void fb64_init(struct fb *fbp)
{
	memset(fbp,0, sizeof(*fbp));
	fbp->state[0] = fbp->state[1] = FAILED;
	fbp->fb_feed[0] = IAC;
	fbp->fb_feed[1] = SB;
	fbp->fb_feed[2] = TELOPT_ENCRYPT;
	fbp->fb_feed[3] = ENCRYPT_IS;
}

/*
 * Returns:
 *	-1: some error.  Negotiation is done, encryption not ready.
 *	 0: Successful, initial negotiation all done.
 *	 1: successful, negotiation not done yet.
 *	 2: Not yet.  Other things (like getting the key from
 *	    Kerberos) have to happen before we can continue.
 */
int cfb64_start(int dir, int server)
{
	return(fb64_start(&fb[CFB], dir, server));
}

int ofb64_start(int dir, int server)
{
	return(fb64_start(&fb[OFB], dir, server));
}

static int fb64_start(struct fb *fbp, int dir, int server)
{
	int x;
	unsigned char *p;
	int state;

	switch (dir) {
	case DIR_DECRYPT:
		/*
		 * This is simply a request to have the other side
		 * start output (our input).  He will negotiate an
		 * IV so we need not look for it.
		 */
		state = fbp->state[dir-1];
		if (state == FAILED)
			state = IN_PROGRESS;
		break;

	case DIR_ENCRYPT:
		state = fbp->state[dir-1];
		if (state == FAILED)
			state = IN_PROGRESS;
		else if ((state & NO_SEND_IV) == 0) {
			break;
		}

		if (!VALIDKEY(fbp->krbdes_key)) {
		        fbp->need_start = 1;
			break;
		}

		state &= ~NO_SEND_IV;
		state |= NO_RECV_IV;
		if (encrypt_debug_mode)
			printf("Creating new feed\r\n");
		/*
		 * Create a random feed and send it over.
		 */
		do {
		    if (RAND_bytes(fbp->temp_feed,
				   sizeof(*fbp->temp_feed)) != 1)
			abort();
		    DES_set_odd_parity(&fbp->temp_feed);
		} while(DES_is_weak_key(&fbp->temp_feed));

		p = fbp->fb_feed + 3;
		*p++ = ENCRYPT_IS;
		p++;
		*p++ = FB64_IV;
		for (x = 0; x < sizeof(DES_cblock); ++x) {
			if ((*p++ = fbp->temp_feed[x]) == IAC)
				*p++ = IAC;
		}
		*p++ = IAC;
		*p++ = SE;
		printsub('>', &fbp->fb_feed[2], p - &fbp->fb_feed[2]);
		telnet_net_write(fbp->fb_feed, p - fbp->fb_feed);
		break;
	default:
		return(FAILED);
	}
	return(fbp->state[dir-1] = state);
}

/*
 * Returns:
 *	-1: some error.  Negotiation is done, encryption not ready.
 *	 0: Successful, initial negotiation all done.
 *	 1: successful, negotiation not done yet.
 */

int cfb64_is(unsigned char *data, int cnt)
{
	return(fb64_is(data, cnt, &fb[CFB]));
}

int ofb64_is(unsigned char *data, int cnt)
{
	return(fb64_is(data, cnt, &fb[OFB]));
}


int fb64_is(unsigned char *data, int cnt, struct fb *fbp)
{
	unsigned char *p;
	int state = fbp->state[DIR_DECRYPT-1];

	if (cnt-- < 1)
		goto failure;

	switch (*data++) {
	case FB64_IV:
		if (cnt != sizeof(DES_cblock)) {
			if (encrypt_debug_mode)
				printf("CFB64: initial vector failed on size\r\n");
			state = FAILED;
			goto failure;
		}

		if (encrypt_debug_mode)
			printf("CFB64: initial vector received\r\n");

		if (encrypt_debug_mode)
			printf("Initializing Decrypt stream\r\n");

		fb64_stream_iv(data, &fbp->streams[DIR_DECRYPT-1]);

		p = fbp->fb_feed + 3;
		*p++ = ENCRYPT_REPLY;
		p++;
		*p++ = FB64_IV_OK;
		*p++ = IAC;
		*p++ = SE;
		printsub('>', &fbp->fb_feed[2], p - &fbp->fb_feed[2]);
		telnet_net_write(fbp->fb_feed, p - fbp->fb_feed);

		state = fbp->state[DIR_DECRYPT-1] = IN_PROGRESS;
		break;

	default:
		if (encrypt_debug_mode) {
			printf("Unknown option type: %d\r\n", *(data-1));
			printd(data, cnt);
			printf("\r\n");
		}
		/* FALL THROUGH */
	failure:
		/*
		 * We failed.  Send an FB64_IV_BAD option
		 * to the other side so it will know that
		 * things failed.
		 */
		p = fbp->fb_feed + 3;
		*p++ = ENCRYPT_REPLY;
		p++;
		*p++ = FB64_IV_BAD;
		*p++ = IAC;
		*p++ = SE;
		printsub('>', &fbp->fb_feed[2], p - &fbp->fb_feed[2]);
		telnet_net_write(fbp->fb_feed, p - fbp->fb_feed);

		break;
	}
	return(fbp->state[DIR_DECRYPT-1] = state);
}

/*
 * Returns:
 *	-1: some error.  Negotiation is done, encryption not ready.
 *	 0: Successful, initial negotiation all done.
 *	 1: successful, negotiation not done yet.
 */

int cfb64_reply(unsigned char *data, int cnt)
{
	return(fb64_reply(data, cnt, &fb[CFB]));
}

int ofb64_reply(unsigned char *data, int cnt)
{
	return(fb64_reply(data, cnt, &fb[OFB]));
}


int fb64_reply(unsigned char *data, int cnt, struct fb *fbp)
{
	int state = fbp->state[DIR_ENCRYPT-1];

	if (cnt-- < 1)
		goto failure;

	switch (*data++) {
	case FB64_IV_OK:
		fb64_stream_iv(fbp->temp_feed, &fbp->streams[DIR_ENCRYPT-1]);
		if (state == FAILED)
			state = IN_PROGRESS;
		state &= ~NO_RECV_IV;
		encrypt_send_keyid(DIR_ENCRYPT, (unsigned char *)"\0", 1, 1);
		break;

	case FB64_IV_BAD:
		memset(fbp->temp_feed, 0, sizeof(DES_cblock));
		fb64_stream_iv(fbp->temp_feed, &fbp->streams[DIR_ENCRYPT-1]);
		state = FAILED;
		break;

	default:
		if (encrypt_debug_mode) {
			printf("Unknown option type: %d\r\n", data[-1]);
			printd(data, cnt);
			printf("\r\n");
		}
		/* FALL THROUGH */
	failure:
		state = FAILED;
		break;
	}
	return(fbp->state[DIR_ENCRYPT-1] = state);
}

void cfb64_session(Session_Key *key, int server)
{
	fb64_session(key, server, &fb[CFB]);
}

void ofb64_session(Session_Key *key, int server)
{
	fb64_session(key, server, &fb[OFB]);
}

static void fb64_session(Session_Key *key, int server, struct fb *fbp)
{

	if (!key || key->type != SK_DES) {
		if (encrypt_debug_mode)
			printf("Can't set krbdes's session key (%d != %d)\r\n",
				key ? key->type : -1, SK_DES);
		return;
	}
	memcpy(fbp->krbdes_key, key->data, sizeof(DES_cblock));

	fb64_stream_key(fbp->krbdes_key, &fbp->streams[DIR_ENCRYPT-1]);
	fb64_stream_key(fbp->krbdes_key, &fbp->streams[DIR_DECRYPT-1]);

	RAND_seed(key->data, key->length);

	DES_set_key_checked((DES_cblock *)&fbp->krbdes_key,
			    &fbp->krbdes_sched);
	/*
	 * Now look to see if krbdes_start() was waiting for the key to
	 * show up.  If so, go ahead an call it now that we have the key.
	 */
	if (fbp->need_start) {
		fbp->need_start = 0;
		fb64_start(fbp, DIR_ENCRYPT, server);
	}
}

/*
 * We only accept a keyid of 0.  If we get a keyid of
 * 0, then mark the state as SUCCESS.
 */

int cfb64_keyid(int dir, unsigned char *kp, int *lenp)
{
	return(fb64_keyid(dir, kp, lenp, &fb[CFB]));
}

int ofb64_keyid(int dir, unsigned char *kp, int *lenp)
{
	return(fb64_keyid(dir, kp, lenp, &fb[OFB]));
}

int fb64_keyid(int dir, unsigned char *kp, int *lenp, struct fb *fbp)
{
	int state = fbp->state[dir-1];

	if (*lenp != 1 || (*kp != '\0')) {
		*lenp = 0;
		return(state);
	}

	if (state == FAILED)
		state = IN_PROGRESS;

	state &= ~NO_KEYID;

	return(fbp->state[dir-1] = state);
}

void fb64_printsub(unsigned char *data, size_t cnt,
		   unsigned char *buf, size_t buflen, char *type)
{
	char lbuf[32];
	int i;
	char *cp;

	buf[buflen-1] = '\0';		/* make sure it's NULL terminated */
	buflen -= 1;

	switch(data[2]) {
	case FB64_IV:
		snprintf(lbuf, sizeof(lbuf), "%s_IV", type);
		cp = lbuf;
		goto common;

	case FB64_IV_OK:
		snprintf(lbuf, sizeof(lbuf), "%s_IV_OK", type);
		cp = lbuf;
		goto common;

	case FB64_IV_BAD:
		snprintf(lbuf, sizeof(lbuf), "%s_IV_BAD", type);
		cp = lbuf;
		goto common;

	default:
		snprintf(lbuf, sizeof(lbuf), " %d (unknown)", data[2]);
		cp = lbuf;
	common:
		for (; (buflen > 0) && (*buf = *cp++); buf++)
			buflen--;
		for (i = 3; i < cnt; i++) {
			snprintf(lbuf, sizeof(lbuf), " %d", data[i]);
			for (cp = lbuf; (buflen > 0) && (*buf = *cp++); buf++)
				buflen--;
		}
		break;
	}
}

void cfb64_printsub(unsigned char *data, size_t cnt,
		    unsigned char *buf, size_t buflen)
{
	fb64_printsub(data, cnt, buf, buflen, "CFB64");
}

void ofb64_printsub(unsigned char *data, size_t cnt,
		    unsigned char *buf, size_t buflen)
{
	fb64_printsub(data, cnt, buf, buflen, "OFB64");
}

void fb64_stream_iv(DES_cblock seed, struct stinfo *stp)
{

	memcpy(stp->str_iv, seed,sizeof(DES_cblock));
	memcpy(stp->str_output, seed, sizeof(DES_cblock));

	DES_set_key_checked(&stp->str_ikey, &stp->str_sched);

	stp->str_index = sizeof(DES_cblock);
}

void fb64_stream_key(DES_cblock key, struct stinfo *stp)
{
	memcpy(stp->str_ikey, key, sizeof(DES_cblock));
	DES_set_key_checked((DES_cblock*)key, &stp->str_sched);

	memcpy(stp->str_output, stp->str_iv, sizeof(DES_cblock));

	stp->str_index = sizeof(DES_cblock);
}

/*
 * DES 64 bit Cipher Feedback
 *
 *     key --->+-----+
 *          +->| DES |--+
 *          |  +-----+  |
 *	    |           v
 *  INPUT --(--------->(+)+---> DATA
 *          |             |
 *	    +-------------+
 *
 *
 * Given:
 *	iV: Initial vector, 64 bits (8 bytes) long.
 *	Dn: the nth chunk of 64 bits (8 bytes) of data to encrypt (decrypt).
 *	On: the nth chunk of 64 bits (8 bytes) of encrypted (decrypted) output.
 *
 *	V0 = DES(iV, key)
 *	On = Dn ^ Vn
 *	V(n+1) = DES(On, key)
 */

void cfb64_encrypt(unsigned char *s, int c)
{
	struct stinfo *stp = &fb[CFB].streams[DIR_ENCRYPT-1];
	int index;

	index = stp->str_index;
	while (c-- > 0) {
		if (index == sizeof(DES_cblock)) {
			DES_cblock b;
			DES_ecb_encrypt(&stp->str_output, &b,&stp->str_sched, 1);
			memcpy(stp->str_feed, b, sizeof(DES_cblock));
			index = 0;
		}

		/* On encryption, we store (feed ^ data) which is cypher */
		*s = stp->str_output[index] = (stp->str_feed[index] ^ *s);
		s++;
		index++;
	}
	stp->str_index = index;
}

int cfb64_decrypt(int data)
{
	struct stinfo *stp = &fb[CFB].streams[DIR_DECRYPT-1];
	int index;

	if (data == -1) {
		/*
		 * Back up one byte.  It is assumed that we will
		 * never back up more than one byte.  If we do, this
		 * may or may not work.
		 */
		if (stp->str_index)
			--stp->str_index;
		return(0);
	}

	index = stp->str_index++;
	if (index == sizeof(DES_cblock)) {
		DES_cblock b;
		DES_ecb_encrypt(&stp->str_output,&b, &stp->str_sched, 1);
		memcpy(stp->str_feed, b, sizeof(DES_cblock));
		stp->str_index = 1;	/* Next time will be 1 */
		index = 0;		/* But now use 0 */
	}

	/* On decryption we store (data) which is cypher. */
	stp->str_output[index] = data;
	return(data ^ stp->str_feed[index]);
}

/*
 * DES 64 bit Output Feedback
 *
 * key --->+-----+
 *	+->| DES |--+
 *	|  +-----+  |
 *	+-----------+
 *	            v
 *  INPUT -------->(+) ----> DATA
 *
 * Given:
 *	iV: Initial vector, 64 bits (8 bytes) long.
 *	Dn: the nth chunk of 64 bits (8 bytes) of data to encrypt (decrypt).
 *	On: the nth chunk of 64 bits (8 bytes) of encrypted (decrypted) output.
 *
 *	V0 = DES(iV, key)
 *	V(n+1) = DES(Vn, key)
 *	On = Dn ^ Vn
 */

void ofb64_encrypt(unsigned char *s, int c)
{
	struct stinfo *stp = &fb[OFB].streams[DIR_ENCRYPT-1];
	int index;

	index = stp->str_index;
	while (c-- > 0) {
		if (index == sizeof(DES_cblock)) {
			DES_cblock b;
			DES_ecb_encrypt(&stp->str_feed,&b, &stp->str_sched, 1);
			memcpy(stp->str_feed, b, sizeof(DES_cblock));
			index = 0;
		}
		*s++ ^= stp->str_feed[index];
		index++;
	}
	stp->str_index = index;
}

int ofb64_decrypt(int data)
{
	struct stinfo *stp = &fb[OFB].streams[DIR_DECRYPT-1];
	int index;

	if (data == -1) {
		/*
		 * Back up one byte.  It is assumed that we will
		 * never back up more than one byte.  If we do, this
		 * may or may not work.
		 */
		if (stp->str_index)
			--stp->str_index;
		return(0);
	}

	index = stp->str_index++;
	if (index == sizeof(DES_cblock)) {
		DES_cblock b;
		DES_ecb_encrypt(&stp->str_feed,&b,&stp->str_sched, 1);
		memcpy(stp->str_feed, b, sizeof(DES_cblock));
		stp->str_index = 1;	/* Next time will be 1 */
		index = 0;		/* But now use 0 */
	}

	return(data ^ stp->str_feed[index]);
}
#endif

@


1.4
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@d36 1
a36 1
RCSID("$Id$");
@


1.3
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d36 1
a36 1
RCSID("$KTH: enc_des.c,v 1.20 2001/08/29 00:45:19 assar Exp $");
d53 1
a53 5
#ifdef HAVE_OPENSSL
#include <des.h>
#else
#include <des.h>
#endif
d69 5
a73 5
  des_cblock	str_output;
  des_cblock	str_feed;
  des_cblock	str_iv;
  des_cblock	str_ikey;
  des_key_schedule str_sched;
d79 3
a81 3
	des_cblock krbdes_key;
	des_key_schedule krbdes_sched;
	des_cblock temp_feed;
a85 1
	int once;
d118 1
a118 1
void fb64_stream_iv (des_cblock, struct stinfo *);
d124 1
a124 1
void fb64_stream_key (des_cblock, struct stinfo *);
d126 2
a127 2
void fb64_printsub(unsigned char *, int ,
		   unsigned char *, int , char *);
a211 8
#ifndef OLD_DES_RANDOM_KEY
		des_new_random_key(&fbp->temp_feed);
#else
		/*
		 * From des_cryp.man "If the des_check_key flag is non-zero,
		 *  des_set_key will check that the key passed is
		 *  of odd parity and is not a week or semi-weak key."
		 */
d213 6
a218 7
			des_random_key(fbp->temp_feed);
			des_set_odd_parity(fbp->temp_feed);
		} while (des_is_weak_key(fbp->temp_feed));
#endif
		des_ecb_encrypt(&fbp->temp_feed,
				&fbp->temp_feed,
				fbp->krbdes_sched, 1);
d223 1
a223 1
		for (x = 0; x < sizeof(des_cblock); ++x) {
d266 1
a266 1
		if (cnt != sizeof(des_cblock)) {
d355 1
a355 1
		memset(fbp->temp_feed, 0, sizeof(des_cblock));
d393 1
a393 1
	memcpy(fbp->krbdes_key, key->data, sizeof(des_cblock));
d398 4
a401 7
	if (fbp->once == 0) {
#if !defined(OLD_DES_RANDOM_KEY) && !defined(HAVE_OPENSSL)
		des_init_random_number_generator(&fbp->krbdes_key);
#endif
		fbp->once = 1;
	}
	des_key_sched(&fbp->krbdes_key, fbp->krbdes_sched);
d403 2
a404 3
	 * Now look to see if krbdes_start() was was waiting for
	 * the key to show up.  If so, go ahead an call it now
	 * that we have the key.
d444 2
a445 2
void fb64_printsub(unsigned char *data, int cnt, 
		   unsigned char *buf, int buflen, char *type)
d485 2
a486 2
void cfb64_printsub(unsigned char *data, int cnt, 
		    unsigned char *buf, int buflen)
d491 2
a492 2
void ofb64_printsub(unsigned char *data, int cnt,
		    unsigned char *buf, int buflen)
d497 1
a497 1
void fb64_stream_iv(des_cblock seed, struct stinfo *stp)
d500 2
a501 2
	memcpy(stp->str_iv, seed,sizeof(des_cblock));
	memcpy(stp->str_output, seed, sizeof(des_cblock));
d503 1
a503 1
	des_key_sched(&stp->str_ikey, stp->str_sched);
d505 1
a505 1
	stp->str_index = sizeof(des_cblock);
d508 1
a508 1
void fb64_stream_key(des_cblock key, struct stinfo *stp)
d510 2
a511 2
	memcpy(stp->str_ikey, key, sizeof(des_cblock));
	des_key_sched((des_cblock*)key, stp->str_sched);
d513 1
a513 1
	memcpy(stp->str_output, stp->str_iv, sizeof(des_cblock));
d515 1
a515 1
	stp->str_index = sizeof(des_cblock);
d528 1
a528 1
 *         
d547 4
a550 4
		if (index == sizeof(des_cblock)) {
			des_cblock b;
			des_ecb_encrypt(&stp->str_output, &b,stp->str_sched, 1);
			memcpy(stp->str_feed, b, sizeof(des_cblock));
d579 4
a582 4
	if (index == sizeof(des_cblock)) {
		des_cblock b;
		des_ecb_encrypt(&stp->str_output,&b, stp->str_sched, 1);
		memcpy(stp->str_feed, b, sizeof(des_cblock));
d584 1
a584 1
		index = 0;		/* But now use 0 */ 
d619 4
a622 4
		if (index == sizeof(des_cblock)) {
			des_cblock b;
			des_ecb_encrypt(&stp->str_feed,&b, stp->str_sched, 1);
			memcpy(stp->str_feed, b, sizeof(des_cblock));
d648 4
a651 4
	if (index == sizeof(des_cblock)) {
		des_cblock b;
		des_ecb_encrypt(&stp->str_feed,&b,stp->str_sched, 1);
		memcpy(stp->str_feed, b, sizeof(des_cblock));
d653 1
a653 1
		index = 0;		/* But now use 0 */ 
@


1.2
log
@basic change to make kerbV build with OpenSSL 0.9.7 -
since the newer OpenSSL's wish to depreciate the libdes
api, and now do not have symbol conflicts with libdes,
we change the build here so that we use the libdes <des.h>
and use libdes rather than libcrypto (this is the same thing
kerberosIV uses)
@
text
@@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
RCSID("$KTH: enc_des.c,v 1.16 1998/07/09 23:16:23 assar Exp $");
d53 1
d55 3
d131 2
d413 1
a413 1
#ifndef OLD_DES_RANDOM_KEY
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d36 1
a36 1
RCSID("$KTH: enc_des.c,v 1.18 2001/02/24 05:47:39 assar Exp $");
a52 3
#ifdef HAVE_OPENSSL_DES_H
#include <openssl/des.h>
#else
a53 1
#endif
d407 1
a407 1
#if !defined(OLD_DES_RANDOM_KEY) && !defined(HAVE_OPENSSL_DES_H)
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: enc_des.c,v 1.20 2001/08/29 00:45:19 assar Exp $");
d53 1
a53 1
#ifdef HAVE_OPENSSL
a130 2
void fb64_printsub(unsigned char *, int ,
		   unsigned char *, int , char *);
d411 1
a411 1
#if !defined(OLD_DES_RANDOM_KEY) && !defined(HAVE_OPENSSL)
@


1.1.1.4
log
@Import of heimdal-0.6.3
@
text
@d36 1
a36 1
RCSID("$KTH: enc_des.c,v 1.21 2002/09/10 20:03:47 joda Exp $");
d53 5
a57 1
#include "crypto-headers.h"
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: enc_des.c,v 1.23 2005/03/23 16:19:31 lha Exp $");
d69 5
a73 5
  DES_cblock	str_output;
  DES_cblock	str_feed;
  DES_cblock	str_iv;
  DES_cblock	str_ikey;
  DES_key_schedule str_sched;
d79 3
a81 3
	DES_cblock krbdes_key;
	DES_key_schedule krbdes_sched;
	DES_cblock temp_feed;
d119 1
a119 1
void fb64_stream_iv (DES_cblock, struct stinfo *);
d125 1
a125 1
void fb64_stream_key (DES_cblock, struct stinfo *);
d214 1
a214 1
		DES_random_key(&fbp->temp_feed);
d222 3
a224 3
			DES_random_key(fbp->temp_feed);
			DES_set_odd_parity(fbp->temp_feed);
		} while (DES_is_weak_key(fbp->temp_feed));
d226 1
a226 1
		DES_ecb_encrypt(&fbp->temp_feed,
d228 1
a228 1
				&fbp->krbdes_sched, 1);
d233 1
a233 1
		for (x = 0; x < sizeof(DES_cblock); ++x) {
d276 1
a276 1
		if (cnt != sizeof(DES_cblock)) {
d365 1
a365 1
		memset(fbp->temp_feed, 0, sizeof(DES_cblock));
d403 1
a403 1
	memcpy(fbp->krbdes_key, key->data, sizeof(DES_cblock));
d410 1
a410 1
		DES_init_random_number_generator(&fbp->krbdes_key);
d414 1
a414 2
	DES_set_key_checked((DES_cblock *)&fbp->krbdes_key,
			    &fbp->krbdes_sched);
d511 1
a511 1
void fb64_stream_iv(DES_cblock seed, struct stinfo *stp)
d514 2
a515 2
	memcpy(stp->str_iv, seed,sizeof(DES_cblock));
	memcpy(stp->str_output, seed, sizeof(DES_cblock));
d517 1
a517 1
	DES_set_key_checked(&stp->str_ikey, &stp->str_sched);
d519 1
a519 1
	stp->str_index = sizeof(DES_cblock);
d522 1
a522 1
void fb64_stream_key(DES_cblock key, struct stinfo *stp)
d524 2
a525 2
	memcpy(stp->str_ikey, key, sizeof(DES_cblock));
	DES_set_key_checked((DES_cblock*)key, &stp->str_sched);
d527 1
a527 1
	memcpy(stp->str_output, stp->str_iv, sizeof(DES_cblock));
d529 1
a529 1
	stp->str_index = sizeof(DES_cblock);
d561 4
a564 4
		if (index == sizeof(DES_cblock)) {
			DES_cblock b;
			DES_ecb_encrypt(&stp->str_output, &b,&stp->str_sched, 1);
			memcpy(stp->str_feed, b, sizeof(DES_cblock));
d593 4
a596 4
	if (index == sizeof(DES_cblock)) {
		DES_cblock b;
		DES_ecb_encrypt(&stp->str_output,&b, &stp->str_sched, 1);
		memcpy(stp->str_feed, b, sizeof(DES_cblock));
d633 4
a636 4
		if (index == sizeof(DES_cblock)) {
			DES_cblock b;
			DES_ecb_encrypt(&stp->str_feed,&b, &stp->str_sched, 1);
			memcpy(stp->str_feed, b, sizeof(DES_cblock));
d662 4
a665 4
	if (index == sizeof(DES_cblock)) {
		DES_cblock b;
		DES_ecb_encrypt(&stp->str_feed,&b,&stp->str_sched, 1);
		memcpy(stp->str_feed, b, sizeof(DES_cblock));
@


