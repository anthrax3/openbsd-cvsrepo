head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	HEIMDAL_0_7_2:1.1.1.5
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.04.22.10.01.19;	author reyk;	state dead;
branches;
next	1.7;

1.7
date	2013.06.17.19.11.38;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.17.18.44;	author hin;	state dead;
branches;
next	1.5;

1.5
date	2002.06.05.16.16.49;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.06.09.10.01;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.21.56.12;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.13.08.52.45;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.45.23;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.45.23;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.14.45;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.52.23;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.29.15.55.24;	author biorn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.31.57;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1983, 1990, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "rcp_locl.h"
#include <getarg.h>

#define RSH_PROGRAM "rsh"

struct  passwd *pwd;
uid_t	userid;
int     errs, remin, remout;
int     pflag, iamremote, iamrecursive, targetshouldbedirectory;
int     doencrypt, noencrypt;
int     usebroken, usekrb4, usekrb5, forwardtkt;
char    *port;
int     eflag = 0;

#define	CMDNEEDS	64
char cmd[CMDNEEDS];		/* must hold "rcp -r -p -d\0" */

int	 response (void);
void	 rsource (char *, struct stat *);
void	 sink (int, char *[]);
void	 source (int, char *[]);
void	 tolocal (int, char *[]);
void	 toremote (char *, int, char *[]);

int      do_cmd(char *host, char *remuser, char *cmd, int *fdin, int *fdout);

static int fflag, tflag;

static int version_flag, help_flag;

struct getargs args[] = {
    { NULL,	'4', arg_flag,		&usekrb4,	"use Kerberos 4 authentication" },
    { NULL,	'5', arg_flag,		&usekrb5,	"use Kerberos 5 authentication" },
    { NULL,	'F', arg_flag,		&forwardtkt,	"forward credentials" },
    { NULL,	'K', arg_flag,		&usebroken,	"use BSD authentication" },
    { NULL,	'P', arg_string,	&port,		"non-default port", "port" },
    { NULL,	'p', arg_flag,		&pflag,	"preserve file permissions" },
    { NULL,	'r', arg_flag,		&iamrecursive,	"recursive mode" },
    { NULL,	'x', arg_flag,		&doencrypt,	"use encryption" },
    { NULL,	'z', arg_flag,		&noencrypt,	"don't encrypt" },
    { NULL,	'd', arg_flag,		&targetshouldbedirectory },
    { NULL,	'e', arg_flag,		&eflag, 	"passed to rsh" },
    { NULL,	'f', arg_flag,		&fflag },
    { NULL,	't', arg_flag,		&tflag },
    { "version", 0,  arg_flag,		&version_flag },
    { "help",	 0,  arg_flag,		&help_flag }
};

static void
usage (int ret)
{
    arg_printusage (args,
		    sizeof(args) / sizeof(args[0]),
		    NULL,
		    "file1 file2|file... directory");
    exit (ret);
}

int
main(int argc, char **argv)
{
	char *targ;
	int optind = 0;

	setprogname(argv[0]);
	if (getarg (args, sizeof(args) / sizeof(args[0]), argc, argv,
		    &optind))
	    usage (1);
	if(help_flag)
	    usage(0);
	if (version_flag) {
	    print_version (NULL);
	    return 0;
	}

	iamremote = (fflag || tflag);

	argc -= optind;
	argv += optind;

	if ((pwd = getpwuid(userid = getuid())) == NULL)
		errx(1, "unknown user %d", (int)userid);

	remin = STDIN_FILENO;		/* XXX */
	remout = STDOUT_FILENO;

	if (fflag) {			/* Follow "protocol", send data. */
		(void)response();
		source(argc, argv);
		exit(errs);
	}

	if (tflag) {			/* Receive data. */
		sink(argc, argv);
		exit(errs);
	}

	if (argc < 2)
	    usage(1);
	if (argc > 2)
		targetshouldbedirectory = 1;

	remin = remout = -1;
	/* Command to be executed on remote system using "rsh". */
	snprintf(cmd, sizeof(cmd),
		 "rcp%s%s%s", iamrecursive ? " -r" : "",
		 pflag ? " -p" : "", targetshouldbedirectory ? " -d" : "");

	signal(SIGPIPE, lostconn);

	if ((targ = colon(argv[argc - 1])))	/* Dest is remote host. */
		toremote(targ, argc, argv);
	else {
		tolocal(argc, argv);		/* Dest is local host. */
		if (targetshouldbedirectory)
			verifydir(argv[argc - 1]);
	}
	exit(errs);
}

void
toremote(char *targ, int argc, char **argv)
{
	int i;
	char *bp, *host, *src, *suser, *thost, *tuser;

	*targ++ = 0;
	if (*targ == 0)
		targ = ".";

	if ((thost = strchr(argv[argc - 1], '@@')) != NULL) {
		/* user@@host */
		*thost++ = 0;
		tuser = argv[argc - 1];
		if (*tuser == '\0')
			tuser = NULL;
		else if (!okname(tuser))
			exit(1);
	} else {
		thost = argv[argc - 1];
		tuser = NULL;
	}
	thost = unbracket(thost);

	for (i = 0; i < argc - 1; i++) {
		src = colon(argv[i]);
		if (src) {			/* remote to remote */
			int ret;
			*src++ = 0;
			if (*src == 0)
				src = ".";
			host = strchr(argv[i], '@@');
			if (host) {
				*host++ = '\0';
				host = unbracket(host);
				suser = argv[i];
				if (*suser == '\0')
					suser = pwd->pw_name;
				else if (!okname(suser))
					continue;
				ret = asprintf(&bp,
				    "%s%s %s -l %s -n %s %s '%s%s%s:%s'",
					 _PATH_RSH, eflag ? " -e" : "",
					 host, suser, cmd, src,
				    tuser ? tuser : "", tuser ? "@@" : "",
				    thost, targ);
			} else {
				host = unbracket(argv[i]);
				ret = asprintf(&bp,
					 "exec %s%s %s -n %s %s '%s%s%s:%s'",
					 _PATH_RSH, eflag ? " -e" : "",
					 host, cmd, src,
					 tuser ? tuser : "", tuser ? "@@" : "",
					 thost, targ);
			}
			if (ret == -1)
				err (1, "malloc");
			susystem(bp);
			free(bp);
		} else {			/* local to remote */
			if (remin == -1) {
				if (asprintf(&bp, "%s -t %s", cmd, targ) == -1)
					err (1, "malloc");
				host = thost;

				if (do_cmd(host, tuser, bp, &remin, &remout) < 0)
					exit(1);

				if (response() < 0)
					exit(1);
				free(bp);
			}
			source(1, argv+i);
		}
	}
}

void
tolocal(int argc, char **argv)
{
	int i;
	char *bp, *host, *src, *suser;

	for (i = 0; i < argc - 1; i++) {
		int ret;

		if (!(src = colon(argv[i]))) {		/* Local to local. */
			ret = asprintf(&bp, "exec %s%s%s %s %s", _PATH_CP,
			    iamrecursive ? " -PR" : "", pflag ? " -p" : "",
			    argv[i], argv[argc - 1]);
			if (ret == -1)
				err (1, "malloc");
			if (susystem(bp))
				++errs;
			free(bp);
			continue;
		}
		*src++ = 0;
		if (*src == 0)
			src = ".";
		if ((host = strchr(argv[i], '@@')) == NULL) {
			host = argv[i];
			suser = pwd->pw_name;
		} else {
			*host++ = 0;
			suser = argv[i];
			if (*suser == '\0')
				suser = pwd->pw_name;
			else if (!okname(suser))
				continue;
		}
		ret = asprintf(&bp, "%s -f %s", cmd, src);
		if (ret == -1)
			err (1, "malloc");
		if (do_cmd(host, suser, bp, &remin, &remout) < 0) {
			free(bp);
			++errs;
			continue;
		}
		free(bp);
		sink(1, argv + argc - 1);
		close(remin);
		remin = remout = -1;
	}
}

void
source(int argc, char **argv)
{
	struct stat stb;
	static BUF buffer;
	BUF *bp;
	off_t i;
	off_t amt;
	int fd, haderr, indx, result;
	char *last, *name, buf[BUFSIZ];

	for (indx = 0; indx < argc; ++indx) {
                name = argv[indx];
		if ((fd = open(name, O_RDONLY, 0)) < 0)
			goto syserr;
		if (fstat(fd, &stb)) {
syserr:			run_err("%s: %s", name, strerror(errno));
			goto next;
		}
		if (S_ISDIR(stb.st_mode) && iamrecursive) {
			rsource(name, &stb);
			goto next;
		} else if (!S_ISREG(stb.st_mode)) {
			run_err("%s: not a regular file", name);
			goto next;
		}
		if ((last = strrchr(name, '/')) == NULL)
			last = name;
		else
			++last;
		if (pflag) {
			/*
			 * Make it compatible with possible future
			 * versions expecting microseconds.
			 */
			snprintf(buf, sizeof(buf), "T%ld 0 %ld 0\n",
			    (long)stb.st_mtime,
			    (long)stb.st_atime);
			write(remout, buf, strlen(buf));
			if (response() < 0)
				goto next;
		}
#undef MODEMASK
#define	MODEMASK	(S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO)
		snprintf(buf, sizeof(buf), "C%04o %lu %s\n",
			 (unsigned int)(stb.st_mode & MODEMASK),
			 (unsigned long)stb.st_size,
			 last);
		write(remout, buf, strlen(buf));
		if (response() < 0)
			goto next;
		if ((bp = allocbuf(&buffer, fd, BUFSIZ)) == NULL) {
next:			close(fd);
			continue;
		}

		/* Keep writing after an error so that we stay sync'd up. */
		for (haderr = i = 0; i < stb.st_size; i += bp->cnt) {
			amt = bp->cnt;
			if (i + amt > stb.st_size)
				amt = stb.st_size - i;
			if (!haderr) {
			        result = read(fd, bp->buf, (size_t)amt);
				if (result != amt)
					haderr = result >= 0 ? EIO : errno;
			}
			if (haderr)
				write(remout, bp->buf, amt);
			else {
			        result = write(remout, bp->buf, (size_t)amt);
				if (result != amt)
					haderr = result >= 0 ? EIO : errno;
			}
		}
		if (close(fd) && !haderr)
			haderr = errno;
		if (!haderr)
			write(remout, "", 1);
		else
			run_err("%s: %s", name, strerror(haderr));
		response();
	}
}

void
rsource(char *name, struct stat *statp)
{
	DIR *dirp;
	struct dirent *dp;
	char *last, *vect[1], path[MAXPATHLEN];

	if (!(dirp = opendir(name))) {
		run_err("%s: %s", name, strerror(errno));
		return;
	}
	last = strrchr(name, '/');
	if (last == 0)
		last = name;
	else
		last++;
	if (pflag) {
		snprintf(path, sizeof(path), "T%ld 0 %ld 0\n",
		    (long)statp->st_mtime,
		    (long)statp->st_atime);
		write(remout, path, strlen(path));
		if (response() < 0) {
			closedir(dirp);
			return;
		}
	}
	snprintf(path, sizeof(path),
		 "D%04o %d %s\n",
		 (unsigned int)(statp->st_mode & MODEMASK), 0, last);
	write(remout, path, strlen(path));
	if (response() < 0) {
		closedir(dirp);
		return;
	}
	while ((dp = readdir(dirp)) != NULL) {
		if (dp->d_ino == 0)
			continue;
		if (!strcmp(dp->d_name, ".") || !strcmp(dp->d_name, ".."))
			continue;
		if (strlen(name) + 1 + strlen(dp->d_name) >= MAXPATHLEN - 1) {
			run_err("%s/%s: name too long", name, dp->d_name);
			continue;
		}
		snprintf(path, sizeof(path), "%s/%s", name, dp->d_name);
		vect[0] = path;
		source(1, vect);
	}
	closedir(dirp);
	write(remout, "E\n", 2);
	response();
}

void
sink(int argc, char **argv)
{
	static BUF buffer;
	struct stat stb;
	struct timeval tv[2];
	enum { YES, NO, DISPLAYED } wrerr;
	BUF *bp;
	off_t i, j, size;
	int amt, count, exists, first, mask, mode, ofd, omode;
	int setimes, targisdir, wrerrno = 0;
	char ch, *cp, *np, *targ, *why, *vect[1], buf[BUFSIZ];

#define	atime	tv[0]
#define	mtime	tv[1]
#define	SCREWUP(str)	{ why = str; goto screwup; }

	setimes = targisdir = 0;
	mask = umask(0);
	if (!pflag)
		umask(mask);
	if (argc != 1) {
		run_err("ambiguous target");
		exit(1);
	}
	targ = *argv;
	if (targetshouldbedirectory)
		verifydir(targ);
	write(remout, "", 1);
	if (stat(targ, &stb) == 0 && S_ISDIR(stb.st_mode))
		targisdir = 1;
	for (first = 1;; first = 0) {
		cp = buf;
		if (read(remin, cp, 1) <= 0)
			return;
		if (*cp++ == '\n')
			SCREWUP("unexpected <newline>");
		do {
			if (read(remin, &ch, sizeof(ch)) != sizeof(ch))
				SCREWUP("lost connection");
			*cp++ = ch;
		} while (cp < &buf[BUFSIZ - 1] && ch != '\n');
		*cp = 0;

		if (buf[0] == '\01' || buf[0] == '\02') {
			if (iamremote == 0)
				write(STDERR_FILENO,
				    buf + 1, strlen(buf + 1));
			if (buf[0] == '\02')
				exit(1);
			++errs;
			continue;
		}
		if (buf[0] == 'E') {
			write(remout, "", 1);
			return;
		}

		if (ch == '\n')
			*--cp = 0;

		cp = buf;
		if (*cp == 'T') {
			setimes++;
			cp++;
			mtime.tv_sec = strtol(cp, &cp, 10);
			if (!cp || *cp++ != ' ')
				SCREWUP("mtime.sec not delimited");
			mtime.tv_usec = strtol(cp, &cp, 10);
			if (!cp || *cp++ != ' ')
				SCREWUP("mtime.usec not delimited");
			atime.tv_sec = strtol(cp, &cp, 10);
			if (!cp || *cp++ != ' ')
				SCREWUP("atime.sec not delimited");
			atime.tv_usec = strtol(cp, &cp, 10);
			if (!cp || *cp++ != '\0')
				SCREWUP("atime.usec not delimited");
			write(remout, "", 1);
			continue;
		}
		if (*cp != 'C' && *cp != 'D') {
			/*
			 * Check for the case "rcp remote:foo\* local:bar".
			 * In this case, the line "No match." can be returned
			 * by the shell before the rcp command on the remote is
			 * executed so the ^Aerror_message convention isn't
			 * followed.
			 */
			if (first) {
				run_err("%s", cp);
				exit(1);
			}
			SCREWUP("expected control record");
		}
		mode = 0;
		for (++cp; cp < buf + 5; cp++) {
			if (*cp < '0' || *cp > '7')
				SCREWUP("bad mode");
			mode = (mode << 3) | (*cp - '0');
		}
		if (*cp++ != ' ')
			SCREWUP("mode not delimited");

		for (size = 0; isdigit((unsigned char)*cp);)
			size = size * 10 + (*cp++ - '0');
		if (*cp++ != ' ')
			SCREWUP("size not delimited");
		if (targisdir) {
			static char *namebuf;
			static int cursize;
			size_t need;

			need = strlen(targ) + strlen(cp) + 250;
			if (need > cursize) {
				if (!(namebuf = malloc(need)))
					run_err("%s", strerror(errno));
			}
			snprintf(namebuf, need, "%s%s%s", targ,
			    *targ ? "/" : "", cp);
			np = namebuf;
		} else
			np = targ;
		exists = stat(np, &stb) == 0;
		if (buf[0] == 'D') {
			int mod_flag = pflag;
			if (exists) {
				if (!S_ISDIR(stb.st_mode)) {
					errno = ENOTDIR;
					goto bad;
				}
				if (pflag)
					chmod(np, mode);
			} else {
				/* Handle copying from a read-only directory */
				mod_flag = 1;
				if (mkdir(np, mode | S_IRWXU) < 0)
					goto bad;
			}
			vect[0] = np;
			sink(1, vect);
			if (setimes) {
				setimes = 0;
				if (utimes(np, tv) < 0)
				    run_err("%s: set times: %s",
					np, strerror(errno));
			}
			if (mod_flag)
				chmod(np, mode);
			continue;
		}
		omode = mode;
		mode |= S_IWRITE;
		if ((ofd = open(np, O_WRONLY|O_CREAT, mode)) < 0) {
bad:			run_err("%s: %s", np, strerror(errno));
			continue;
		}
		write(remout, "", 1);
		if ((bp = allocbuf(&buffer, ofd, BUFSIZ)) == NULL) {
			close(ofd);
			continue;
		}
		cp = bp->buf;
		wrerr = NO;
		for (count = i = 0; i < size; i += BUFSIZ) {
			amt = BUFSIZ;
			if (i + amt > size)
				amt = size - i;
			count += amt;
			if((j = net_read(remin, cp, amt)) != amt) {
			    run_err("%s", j ? strerror(errno) :
				    "dropped connection");
			    exit(1);
			}
			amt -= j;
			cp += j;
			if (count == bp->cnt) {
				/* Keep reading so we stay sync'd up. */
				if (wrerr == NO) {
					j = write(ofd, bp->buf, (size_t)count);
					if (j != count) {
						wrerr = YES;
						wrerrno = j >= 0 ? EIO : errno;
					}
				}
				count = 0;
				cp = bp->buf;
			}
		}
		if (count != 0 && wrerr == NO &&
		    (j = write(ofd, bp->buf, (size_t)count)) != count) {
			wrerr = YES;
			wrerrno = j >= 0 ? EIO : errno;
		}
		if (ftruncate(ofd, size)) {
			run_err("%s: truncate: %s", np, strerror(errno));
			wrerr = DISPLAYED;
		}
		if (pflag) {
			if (exists || omode != mode)
				if (fchmod(ofd, omode))
					run_err("%s: set mode: %s",
					    np, strerror(errno));
		} else {
			if (!exists && omode != mode)
				if (fchmod(ofd, omode & ~mask))
					run_err("%s: set mode: %s",
					    np, strerror(errno));
		}
		close(ofd);
		response();
		if (setimes && wrerr == NO) {
			setimes = 0;
			if (utimes(np, tv) < 0) {
				run_err("%s: set times: %s",
				    np, strerror(errno));
				wrerr = DISPLAYED;
			}
		}
		switch(wrerr) {
		case YES:
			run_err("%s: %s", np, strerror(wrerrno));
			break;
		case NO:
			write(remout, "", 1);
			break;
		case DISPLAYED:
			break;
		}
	}
screwup:
	run_err("protocol error: %s", why);
	exit(1);
}

int
response(void)
{
	char ch, *cp, resp, rbuf[BUFSIZ];

	if (read(remin, &resp, sizeof(resp)) != sizeof(resp))
		lostconn(0);

	cp = rbuf;
	switch(resp) {
	case 0:				/* ok */
		return (0);
	default:
		*cp++ = resp;
		/* FALLTHROUGH */
	case 1:				/* error, followed by error msg */
	case 2:				/* fatal error, "" */
		do {
			if (read(remin, &ch, sizeof(ch)) != sizeof(ch))
				lostconn(0);
			*cp++ = ch;
		} while (cp < &rbuf[BUFSIZ] && ch != '\n');

		if (!iamremote)
			write(STDERR_FILENO, rbuf, cp - rbuf);
		++errs;
		if (resp == 1)
			return (-1);
		exit(1);
	}
	/* NOTREACHED */
}

#include <stdarg.h>

void
run_err(const char *fmt, ...)
{
	static FILE *fp;
	va_list ap;

	++errs;
	if (fp == NULL && !(fp = fdopen(remout, "w")))
		return;
	va_start(ap, fmt);
	fprintf(fp, "%c", 0x01);
	fprintf(fp, "rcp: ");
	vfprintf(fp, fmt, ap);
	fprintf(fp, "\n");
	fflush(fp);
	va_end(ap);

	if (!iamremote) {
	    va_start(ap, fmt);
	    vwarnx(fmt, ap);
	    va_end(ap);
	}
}

/*
 * This function executes the given command as the specified user on the
 * given host.  This returns < 0 if execution fails, and >= 0 otherwise. This
 * assigns the input and output file descriptors on success.
 *
 * If it cannot create necessary pipes it exits with error message.
 */

int
do_cmd(char *host, char *remuser, char *cmd, int *fdin, int *fdout)
{
	int pin[2], pout[2], reserved[2];

	/*
	 * Reserve two descriptors so that the real pipes won't get
	 * descriptors 0 and 1 because that will screw up dup2 below.
	 */
	pipe(reserved);

	/* Create a socket pair for communicating with rsh. */
	if (pipe(pin) < 0) {
		perror("pipe");
		exit(255);
	}
	if (pipe(pout) < 0) {
		perror("pipe");
		exit(255);
	}

	/* Free the reserved descriptors. */
	close(reserved[0]);
	close(reserved[1]);

	/* For a child to execute the command on the remote host using rsh. */
	if (fork() == 0) {
		char *args[100];
		unsigned int i;

		/* Child. */
		close(pin[1]);
		close(pout[0]);
		dup2(pin[0], 0);
		dup2(pout[1], 1);
		close(pin[0]);
		close(pout[1]);

		i = 0;
		args[i++] = RSH_PROGRAM;
		if (usekrb4)
			args[i++] = "-4";
		if (usekrb5)
			args[i++] = "-5";
		if (usebroken)
			args[i++] = "-K";
		if (doencrypt)
			args[i++] = "-x";
		if (forwardtkt)
			args[i++] = "-F";
		if (noencrypt)
			args[i++] = "-z";
		if (port != NULL) {
			args[i++] = "-p";
			args[i++] = port;
		}
		if (eflag)
		    args[i++] = "-e";
		if (remuser != NULL) {
			args[i++] = "-l";
			args[i++] = remuser;
		}
		args[i++] = host;
		args[i++] = cmd;
		args[i++] = NULL;

		execvp(RSH_PROGRAM, args);
		perror(RSH_PROGRAM);
		exit(1);
	}
	/* Parent.  Close the other side, and return the local side. */
	close(pin[0]);
	*fdout = pin[1];
	close(pout[1]);
	*fdin = pout[0];
	return 0;
}
@


1.7
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@@


1.6
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
int     usebroken, usekrb5, forwardtkt;
d42 1
d61 1
d71 1
d94 1
d104 1
a104 1
	    
d117 1
a117 2
		response();
		setuid(userid);
a122 1
		setuid(userid);
d135 1
a135 1
		 "rcp%s%s%s", iamrecursive ? " -r" : "", 
d160 1
a160 1
	if ((thost = strchr(argv[argc - 1], '@@'))) {
d172 1
d177 1
d184 1
d190 4
a193 3
				asprintf(&bp,
				    "%s %s -l %s -n %s %s '%s%s%s:%s'",
				    _PATH_RSH, host, suser, cmd, src,
d197 7
a203 5
				asprintf(&bp,
				    "exec %s %s -n %s %s '%s%s%s:%s'",
				    _PATH_RSH, argv[i], cmd, src,
				    tuser ? tuser : "", tuser ? "@@" : "",
				    thost, targ);
d205 1
a205 1
			if (bp == NULL)
d207 1
a207 1
			susystem(bp, userid);
d211 1
a211 2
				asprintf(&bp, "%s -t %s", cmd, targ);
				if (bp == NULL)
a220 1
				setuid(userid);
d234 2
d237 1
a237 1
			asprintf(&bp, "exec %s%s%s %s %s", _PATH_CP,
d240 1
a240 1
			if (bp == NULL)
d242 1
a242 1
			if (susystem(bp, userid))
d261 2
a262 2
		asprintf(&bp, "%s -f %s", cmd, src);
		if (bp == NULL)
a270 1
		seteuid(0);
d283 2
a284 1
	int amt, fd, haderr, indx, result;
d295 4
a298 10
		switch (stb.st_mode & S_IFMT) {
		case S_IFREG:
			break;
		case S_IFDIR:
			if (iamrecursive) {
				rsource(name, &stb);
				goto next;
			}
			/* FALLTHROUGH */
		default:
d318 1
d321 1
a321 1
			 stb.st_mode & MODEMASK,
d338 1
a338 1
				result = read(fd, bp->buf, amt);
d345 1
a345 1
				result = write(remout, bp->buf, amt);
d387 2
a388 1
	    "D%04o %d %s\n", statp->st_mode & MODEMASK, 0, last);
d394 1
a394 1
	while ((dp = readdir(dirp))) {
d515 1
a515 1
		for (size = 0; isdigit(*cp);)
d590 1
a590 1
					j = write(ofd, bp->buf, count);
d601 1
a601 1
		    (j = write(ofd, bp->buf, count)) != count) {
d690 1
a692 1
	va_start(ap, fmt);
a693 1
	va_end(ap);
d696 1
d699 3
a701 3
		va_start(ap, fmt);
		vwarnx(fmt, ap);
		va_end(ap);
d713 1
a713 1
int 
d753 2
d769 2
@


1.5
log
@Remove all uses of setprogname() and getprogname() in kerberosV subtree.
@
text
@@


1.4
log
@Merge heimdal-0.4e
@
text
@a94 1
	setprogname(argv[0]);
@


1.3
log
@Merge heimdal-0.3e -> heidmal-0.3f
@
text
@d95 1
d137 3
a139 2
	 sprintf(cmd, "rcp%s%s%s", iamrecursive ? " -r" : "", 
		       pflag ? " -p" : "", targetshouldbedirectory ? " -d" : "");
d156 1
a156 1
	int i, len;
a182 5
			len = strlen(_PATH_RSH) + strlen(argv[i]) +
			    strlen(src) + (tuser ? strlen(tuser) : 0) +
			    strlen(thost) + strlen(targ) + CMDNEEDS + 20;
			if (!(bp = malloc(len)))
				err(1, "malloc");
d184 1
a184 1
				*host++ = 0;
d190 1
a190 1
				snprintf(bp, len,
d195 2
a196 2
			} else
				snprintf(bp, len,
d201 3
d208 3
a210 4
				len = strlen(targ) + CMDNEEDS + 20;
				if (!(bp = malloc(len)))
					err(1, "malloc");
				snprintf(bp, len, "%s -t %s", cmd, targ);
d229 1
a229 1
	int i, len;
d234 1
a234 5
			len = strlen(_PATH_CP) + strlen(argv[i]) +
			    strlen(argv[argc - 1]) + 20;
			if (!(bp = malloc(len)))
				err(1, "malloc");
			snprintf(bp, len, "exec %s%s%s %s %s", _PATH_CP,
d237 2
d258 3
a260 4
		len = strlen(src) + CMDNEEDS + 20;
		if ((bp = malloc(len)) == NULL)
			err(1, "malloc");
		snprintf(bp, len, "%s -f %s", cmd, src);
a273 16
static char *
sizestr(off_t size)
{
    static char ss[32];
    char *p;
    ss[sizeof(ss) - 1] = '\0';
    for(p = ss + sizeof(ss) - 2; p >= ss; p--) {
	*p = '0' + size % 10;
	size /= 10;
	if(size == 0)
	    break;
    }
    return ss;
}
		    

d322 4
a325 2
		snprintf(buf, sizeof(buf), "C%04o %s %s\n",
			 stb.st_mode & MODEMASK, sizestr(stb.st_size), last);
@


1.2
log
@va_start/end for every call to vfprintf and friends, from scp.c
@
text
@d35 1
a37 1
#define	OPTIONS "5dfKpP:rtxz"
d44 1
a44 1
int     usebroken, usekrb5;
a55 1
void	 usage (void);
d59 30
d90 1
a90 3
main(argc, argv)
	int argc;
	char *argv[];
a91 1
	int ch, fflag, tflag;
d93 13
a106 40
	fflag = tflag = 0;
	while ((ch = getopt(argc, argv, OPTIONS)) != -1)
		switch(ch) {			/* User-visible flags. */
		case '5':
			usekrb5 = 1;
			break;
		case 'K':
			usebroken = 1;
			break;
		case 'P':
			port = optarg;
			break;			
		case 'p':
			pflag = 1;
			break;
		case 'r':
			iamrecursive = 1;
			break;
		case 'x':
			doencrypt = 1;
			break;			
		case 'z':
			noencrypt = 1;
			break;
						/* Server options. */
		case 'd':
			targetshouldbedirectory = 1;
			break;
		case 'f':			/* "from" */
			iamremote = 1;
			fflag = 1;
			break;
		case 't':			/* "to" */
			iamremote = 1;
			tflag = 1;
			break;
		case '?':
		default:
			usage();
		}
d117 2
a118 2
		(void)response();
		(void)setuid(userid);
d124 1
a124 1
		(void)setuid(userid);
d130 1
a130 1
		usage();
d136 1
a136 1
	(void) sprintf(cmd, "rcp%s%s%s", iamrecursive ? " -r" : "", 
d139 1
a139 1
	(void)signal(SIGPIPE, lostconn);
d152 1
a152 3
toremote(targ, argc, argv)
	char *targ, *argv[];
	int argc;
d193 1
a193 1
				(void)snprintf(bp, len,
d199 1
a199 1
				(void)snprintf(bp, len,
d204 2
a205 2
			(void)susystem(bp, userid);
			(void)free(bp);
d211 1
a211 1
				(void)snprintf(bp, len, "%s -t %s", cmd, targ);
d219 2
a220 2
				(void)free(bp);
				(void)setuid(userid);
d228 1
a228 3
tolocal(argc, argv)
	int argc;
	char *argv[];
d239 1
a239 1
			(void)snprintf(bp, len, "exec %s%s%s %s %s", _PATH_CP,
d244 1
a244 1
			(void)free(bp);
d264 1
a264 1
		(void)snprintf(bp, len, "%s -f %s", cmd, src);
d266 1
a266 1
			(void)free(bp);
d270 1
a270 1
		(void)free(bp);
d272 2
a273 2
		(void)seteuid(0);
		(void)close(remin);
d278 16
d295 1
a295 3
source(argc, argv)
	int argc;
	char *argv[];
d334 1
a334 1
			(void)snprintf(buf, sizeof(buf), "T%ld 0 %ld 0\n",
d337 1
a337 1
			(void)write(remout, buf, strlen(buf));
d342 3
a344 3
		(void)snprintf(buf, sizeof(buf), "C%04o %lu %s\n",
		    stb.st_mode & MODEMASK, (unsigned long)stb.st_size, last);
		(void)write(remout, buf, strlen(buf));
d348 1
a348 1
next:			(void)close(fd);
d363 1
a363 1
				(void)write(remout, bp->buf, amt);
d373 1
a373 1
			(void)write(remout, "", 1);
d376 1
a376 1
		(void)response();
d381 1
a381 3
rsource(name, statp)
	char *name;
	struct stat *statp;
d397 1
a397 1
		(void)snprintf(path, sizeof(path), "T%ld 0 %ld 0\n",
d400 1
a400 1
		(void)write(remout, path, strlen(path));
d406 1
a406 1
	(void)snprintf(path, sizeof(path),
d408 1
a408 1
	(void)write(remout, path, strlen(path));
d422 1
a422 1
		(void)snprintf(path, sizeof(path), "%s/%s", name, dp->d_name);
d426 3
a428 3
	(void)closedir(dirp);
	(void)write(remout, "E\n", 2);
	(void)response();
d432 1
a432 3
sink(argc, argv)
	int argc;
	char *argv[];
d451 1
a451 1
		(void)umask(mask);
d459 1
a459 1
	(void)write(remout, "", 1);
d477 1
a477 1
				(void)write(STDERR_FILENO,
d485 1
a485 1
			(void)write(remout, "", 1);
d508 1
a508 1
			(void)write(remout, "", 1);
d548 1
a548 1
			(void)snprintf(namebuf, need, "%s%s%s", targ,
d562 1
a562 1
					(void)chmod(np, mode);
d578 1
a578 1
				(void)chmod(np, mode);
d587 1
a587 1
		(void)write(remout, "", 1);
d589 1
a589 1
			(void)close(ofd);
d599 7
a605 10
			do {
				j = read(remin, cp, amt);
				if (j <= 0) {
					run_err("%s", j ? strerror(errno) :
					    "dropped connection");
					exit(1);
				}
				amt -= j;
				cp += j;
			} while (amt > 0);
d639 2
a640 2
		(void)close(ofd);
		(void)response();
d654 1
a654 1
			(void)write(remout, "", 1);
d666 1
a666 1
response()
d689 1
a689 1
			(void)write(STDERR_FILENO, rbuf, cp - rbuf);
a697 9
void
usage()
{
	(void)fprintf(stderr, "%s\n%s\n",
		      "usage: rcp [-5FKpx] [-P port] f1 f2",
		      "       rcp [-5FKprx] [-P port] f1 ... fn directory");
	exit(1);
}

d709 2
a710 2
	(void)fprintf(fp, "%c", 0x01);
	(void)fprintf(fp, "rcp: ");
d712 1
a712 1
	(void)vfprintf(fp, fmt, ap);
d714 2
a715 2
	(void)fprintf(fp, "\n");
	(void)fflush(fp);
d778 2
@


1.1
log
@Initial revision
@
text
@a711 1
	va_start(ap, fmt);
d718 1
d720 1
d724 2
a725 1
	if (!iamremote)
d727 2
a728 2

	va_end(ap);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@a34 1
#include <getarg.h>
d37 1
d44 1
a44 1
int     usebroken, usekrb5, forwardtkt;
d56 1
a59 30
static int fflag, tflag;

static int version_flag, help_flag;

struct getargs args[] = {
    { NULL,	'5', arg_flag,		&usekrb5,	"use Kerberos 5 authentication" },
    { NULL,	'F', arg_flag,		&forwardtkt,	"forward credentials" },
    { NULL,	'K', arg_flag,		&usebroken,	"use BSD authentication" },
    { NULL,	'P', arg_string,	&port,		"non-default port", "port" },
    { NULL,	'p', arg_flag,		&pflag,	"preserve file permissions" },
    { NULL,	'r', arg_flag,		&iamrecursive,	"recursive mode" },
    { NULL,	'x', arg_flag,		&doencrypt,	"use encryption" },
    { NULL,	'z', arg_flag,		&noencrypt,	"don't encrypt" },
    { NULL,	'd', arg_flag,		&targetshouldbedirectory },
    { NULL,	'f', arg_flag,		&fflag },
    { NULL,	't', arg_flag,		&tflag },
    { "version", 0,  arg_flag,		&version_flag },
    { "help",	 0,  arg_flag,		&help_flag }
};

static void
usage (int ret)
{
    arg_printusage (args,
		    sizeof(args) / sizeof(args[0]),
		    NULL,
		    "file1 file2|file... directory");
    exit (ret);
}

d61 3
a63 1
main(int argc, char **argv)
d65 1
a66 13
	int optind = 0;

	if (getarg (args, sizeof(args) / sizeof(args[0]), argc, argv,
		    &optind))
	    usage (1);
	if(help_flag)
	    usage(0);
	if (version_flag) {
	    print_version (NULL);
	    return 0;
	}
	    
	iamremote = (fflag || tflag);
d68 40
d118 2
a119 2
		response();
		setuid(userid);
d125 1
a125 1
		setuid(userid);
d131 1
a131 1
	    usage(1);
d137 1
a137 1
	 sprintf(cmd, "rcp%s%s%s", iamrecursive ? " -r" : "", 
d140 1
a140 1
	signal(SIGPIPE, lostconn);
d153 3
a155 1
toremote(char *targ, int argc, char **argv)
d196 1
a196 1
				snprintf(bp, len,
d202 1
a202 1
				snprintf(bp, len,
d207 2
a208 2
			susystem(bp, userid);
			free(bp);
d214 1
a214 1
				snprintf(bp, len, "%s -t %s", cmd, targ);
d222 2
a223 2
				free(bp);
				setuid(userid);
d231 3
a233 1
tolocal(int argc, char **argv)
d244 1
a244 1
			snprintf(bp, len, "exec %s%s%s %s %s", _PATH_CP,
d249 1
a249 1
			free(bp);
d269 1
a269 1
		snprintf(bp, len, "%s -f %s", cmd, src);
d271 1
a271 1
			free(bp);
d275 1
a275 1
		free(bp);
d277 2
a278 2
		seteuid(0);
		close(remin);
a282 16
static char *
sizestr(off_t size)
{
    static char ss[32];
    char *p;
    ss[sizeof(ss) - 1] = '\0';
    for(p = ss + sizeof(ss) - 2; p >= ss; p--) {
	*p = '0' + size % 10;
	size /= 10;
	if(size == 0)
	    break;
    }
    return ss;
}
		    

d284 3
a286 1
source(int argc, char **argv)
d325 1
a325 1
			snprintf(buf, sizeof(buf), "T%ld 0 %ld 0\n",
d328 1
a328 1
			write(remout, buf, strlen(buf));
d333 3
a335 3
		snprintf(buf, sizeof(buf), "C%04o %s %s\n",
			 stb.st_mode & MODEMASK, sizestr(stb.st_size), last);
		write(remout, buf, strlen(buf));
d339 1
a339 1
next:			close(fd);
d354 1
a354 1
				write(remout, bp->buf, amt);
d364 1
a364 1
			write(remout, "", 1);
d367 1
a367 1
		response();
d372 3
a374 1
rsource(char *name, struct stat *statp)
d390 1
a390 1
		snprintf(path, sizeof(path), "T%ld 0 %ld 0\n",
d393 1
a393 1
		write(remout, path, strlen(path));
d399 1
a399 1
	snprintf(path, sizeof(path),
d401 1
a401 1
	write(remout, path, strlen(path));
d415 1
a415 1
		snprintf(path, sizeof(path), "%s/%s", name, dp->d_name);
d419 3
a421 3
	closedir(dirp);
	write(remout, "E\n", 2);
	response();
d425 3
a427 1
sink(int argc, char **argv)
d446 1
a446 1
		umask(mask);
d454 1
a454 1
	write(remout, "", 1);
d472 1
a472 1
				write(STDERR_FILENO,
d480 1
a480 1
			write(remout, "", 1);
d503 1
a503 1
			write(remout, "", 1);
d543 1
a543 1
			snprintf(namebuf, need, "%s%s%s", targ,
d557 1
a557 1
					chmod(np, mode);
d573 1
a573 1
				chmod(np, mode);
d582 1
a582 1
		write(remout, "", 1);
d584 1
a584 1
			close(ofd);
d594 10
a603 7
			if((j = net_read(remin, cp, amt)) != amt) {
			    run_err("%s", j ? strerror(errno) :
				    "dropped connection");
			    exit(1);
			}
			amt -= j;
			cp += j;
d637 2
a638 2
		close(ofd);
		response();
d652 1
a652 1
			write(remout, "", 1);
d664 1
a664 1
response(void)
d687 1
a687 1
			write(STDERR_FILENO, rbuf, cp - rbuf);
d696 9
d717 5
a721 5
	fprintf(fp, "%c", 0x01);
	fprintf(fp, "rcp: ");
	vfprintf(fp, fmt, ap);
	fprintf(fp, "\n");
	fflush(fp);
a782 2
		if (forwardtkt)
			args[i++] = "-F";
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@a94 1
	setprogname(argv[0]);
d136 2
a137 3
	snprintf(cmd, sizeof(cmd),
		 "rcp%s%s%s", iamrecursive ? " -r" : "", 
		 pflag ? " -p" : "", targetshouldbedirectory ? " -d" : "");
d154 1
a154 1
	int i;
d181 5
d187 1
a187 1
				*host++ = '\0';
d193 1
a193 1
				asprintf(&bp,
d198 2
a199 2
			} else {
				asprintf(&bp,
a203 3
			}
			if (bp == NULL)
				err (1, "malloc");
d208 4
a211 3
				asprintf(&bp, "%s -t %s", cmd, targ);
				if (bp == NULL)
					err (1, "malloc");
d230 1
a230 1
	int i;
d235 5
a239 1
			asprintf(&bp, "exec %s%s%s %s %s", _PATH_CP,
a241 2
			if (bp == NULL)
				err (1, "malloc");
d261 4
a264 3
		asprintf(&bp, "%s -f %s", cmd, src);
		if (bp == NULL)
			err (1, "malloc");
d278 16
d342 2
a343 4
		snprintf(buf, sizeof(buf), "C%04o %lu %s\n",
			 stb.st_mode & MODEMASK,
			 (unsigned long)stb.st_size,
			 last);
@


1.1.1.4
log
@Import of heimdal-0.6.3
@
text
@d44 1
a44 1
int     usebroken, usekrb4, usekrb5, forwardtkt;
a63 1
    { NULL,	'4', arg_flag,		&usekrb4,	"use Kerberos 4 authentication" },
d516 1
a516 1
		for (size = 0; isdigit((unsigned char)*cp);)
d687 1
a691 1
	va_start(ap, fmt);
d697 4
a701 6

	if (!iamremote) {
	    va_start(ap, fmt);
	    vwarnx(fmt, ap);
	    va_end(ap);
	}
a751 2
		if (usekrb4)
			args[i++] = "-4";
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@a45 1
int     eflag = 0;
a73 1
    { NULL,	'e', arg_flag,		&eflag, 	"passed to rsh" },
d192 2
a193 3
				    "%s%s %s -l %s -n %s %s '%s%s%s:%s'",
					 _PATH_RSH, eflag ? " -e" : "", 
					 host, suser, cmd, src,
d198 4
a201 5
					 "exec %s%s %s -n %s %s '%s%s%s:%s'",
					 _PATH_RSH, eflag ? " -e" : "", 
					 argv[i], cmd, src,
					 tuser ? tuser : "", tuser ? "@@" : "",
					 thost, targ);
a321 1
#undef MODEMASK
a770 2
		if (eflag)
		    args[i++] = "-e";
@


